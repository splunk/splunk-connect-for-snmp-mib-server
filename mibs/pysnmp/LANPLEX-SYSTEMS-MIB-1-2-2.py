#
# PySNMP MIB module LANPLEX-SYSTEMS-MIB-1-2-2 (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/LANPLEX-SYSTEMS-MIB-1-2-2
# Produced by pysmi-0.3.4 at Mon Apr 29 19:55:14 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, Integer, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "OctetString", "Integer", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsUnion, ConstraintsIntersection, SingleValueConstraint, ValueSizeConstraint, ValueRangeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsUnion", "ConstraintsIntersection", "SingleValueConstraint", "ValueSizeConstraint", "ValueRangeConstraint")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
Gauge32, Bits, Integer32, NotificationType, TimeTicks, Counter32, MibScalar, MibTable, MibTableRow, MibTableColumn, NotificationType, enterprises, IpAddress, Counter64, ObjectIdentity, Unsigned32, MibIdentifier, ModuleIdentity, iso = mibBuilder.importSymbols("SNMPv2-SMI", "Gauge32", "Bits", "Integer32", "NotificationType", "TimeTicks", "Counter32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "NotificationType", "enterprises", "IpAddress", "Counter64", "ObjectIdentity", "Unsigned32", "MibIdentifier", "ModuleIdentity", "iso")
TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString")
synernetics = MibIdentifier((1, 3, 6, 1, 4, 1, 114))
lanplex = MibIdentifier((1, 3, 6, 1, 4, 1, 114, 1))
lpsProducts = MibIdentifier((1, 3, 6, 1, 4, 1, 114, 1, 3))
lps6000 = MibIdentifier((1, 3, 6, 1, 4, 1, 114, 1, 3, 2))
lps2000 = MibIdentifier((1, 3, 6, 1, 4, 1, 114, 1, 3, 3))
lps6012 = MibIdentifier((1, 3, 6, 1, 4, 1, 114, 1, 3, 2, 1))
lps6004 = MibIdentifier((1, 3, 6, 1, 4, 1, 114, 1, 3, 2, 2))
lps2500 = MibIdentifier((1, 3, 6, 1, 4, 1, 114, 1, 3, 3, 1))
lss2200 = MibIdentifier((1, 3, 6, 1, 4, 1, 114, 1, 3, 3, 2))
lps2016 = MibIdentifier((1, 3, 6, 1, 4, 1, 114, 1, 3, 3, 3))
lps6012System = MibIdentifier((1, 3, 6, 1, 4, 1, 114, 1, 3, 2, 1, 1))
lps6012Chassis = MibIdentifier((1, 3, 6, 1, 4, 1, 114, 1, 3, 2, 1, 2))
lps6012ESM = MibIdentifier((1, 3, 6, 1, 4, 1, 114, 1, 3, 2, 1, 3))
lps6012EFSM = MibIdentifier((1, 3, 6, 1, 4, 1, 114, 1, 3, 2, 1, 4))
lps6012TRSM = MibIdentifier((1, 3, 6, 1, 4, 1, 114, 1, 3, 2, 1, 5))
lps6012TMM = MibIdentifier((1, 3, 6, 1, 4, 1, 114, 1, 3, 2, 1, 6))
lps6004System = MibIdentifier((1, 3, 6, 1, 4, 1, 114, 1, 3, 2, 2, 1))
lps6004Chassis = MibIdentifier((1, 3, 6, 1, 4, 1, 114, 1, 3, 2, 2, 2))
lps6004ESM = MibIdentifier((1, 3, 6, 1, 4, 1, 114, 1, 3, 2, 2, 3))
lps6004EFSM = MibIdentifier((1, 3, 6, 1, 4, 1, 114, 1, 3, 2, 2, 4))
lps6004TRSM = MibIdentifier((1, 3, 6, 1, 4, 1, 114, 1, 3, 2, 2, 5))
lps6004TMM = MibIdentifier((1, 3, 6, 1, 4, 1, 114, 1, 3, 2, 2, 6))
lanplexSystemsMib = MibIdentifier((1, 3, 6, 1, 4, 1, 114, 1, 4))
lpsSystem = MibIdentifier((1, 3, 6, 1, 4, 1, 114, 1, 4, 1))
lpsSlot = MibIdentifier((1, 3, 6, 1, 4, 1, 114, 1, 4, 2))
lpsControlPanel = MibIdentifier((1, 3, 6, 1, 4, 1, 114, 1, 4, 3))
lpsPowerSupply = MibIdentifier((1, 3, 6, 1, 4, 1, 114, 1, 4, 4))
lpsSnmp = MibIdentifier((1, 3, 6, 1, 4, 1, 114, 1, 4, 5))
lpsAgent = MibIdentifier((1, 3, 6, 1, 4, 1, 114, 1, 4, 6))
lpsInterface = MibIdentifier((1, 3, 6, 1, 4, 1, 114, 1, 4, 7))
lpsEthernetPort = MibIdentifier((1, 3, 6, 1, 4, 1, 114, 1, 4, 8))
lpsSmt = MibIdentifier((1, 3, 6, 1, 4, 1, 114, 1, 4, 9))
lpsBridge = MibIdentifier((1, 3, 6, 1, 4, 1, 114, 1, 4, 10))
lpsIpRouter = MibIdentifier((1, 3, 6, 1, 4, 1, 114, 1, 4, 11))
lpsNetworkMonitor = MibIdentifier((1, 3, 6, 1, 4, 1, 114, 1, 4, 12))
lpsTokenRingPort = MibIdentifier((1, 3, 6, 1, 4, 1, 114, 1, 4, 13))
lpsSystemId = MibScalar((1, 3, 6, 1, 4, 1, 114, 1, 4, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpsSystemId.setStatus('mandatory')
lpsSystemType = MibScalar((1, 3, 6, 1, 4, 1, 114, 1, 4, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("lanplex6000", 2), ("lanplex2000", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpsSystemType.setStatus('mandatory')
lpsSystemName = MibScalar((1, 3, 6, 1, 4, 1, 114, 1, 4, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 31))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lpsSystemName.setStatus('mandatory')
lpsSystemManufacturer = MibScalar((1, 3, 6, 1, 4, 1, 114, 1, 4, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 127))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpsSystemManufacturer.setStatus('mandatory')
lpsSystemHardwareRevision = MibScalar((1, 3, 6, 1, 4, 1, 114, 1, 4, 1, 5), OctetString().subtype(subtypeSpec=ValueSizeConstraint(2, 2)).setFixedLength(2)).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpsSystemHardwareRevision.setStatus('mandatory')
lpsSystemMemorySize = MibScalar((1, 3, 6, 1, 4, 1, 114, 1, 4, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpsSystemMemorySize.setStatus('mandatory')
lpsSystemFlashMemorySize = MibScalar((1, 3, 6, 1, 4, 1, 114, 1, 4, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpsSystemFlashMemorySize.setStatus('mandatory')
lpsSystemNvMemorySize = MibScalar((1, 3, 6, 1, 4, 1, 114, 1, 4, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpsSystemNvMemorySize.setStatus('mandatory')
lpsSystemSoftwareRevision = MibScalar((1, 3, 6, 1, 4, 1, 114, 1, 4, 1, 9), OctetString().subtype(subtypeSpec=ValueSizeConstraint(4, 4)).setFixedLength(4)).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpsSystemSoftwareRevision.setStatus('mandatory')
lpsSystemBuildTime = MibScalar((1, 3, 6, 1, 4, 1, 114, 1, 4, 1, 10), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 127))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpsSystemBuildTime.setStatus('mandatory')
lpsSystemSnmpRevision = MibScalar((1, 3, 6, 1, 4, 1, 114, 1, 4, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpsSystemSnmpRevision.setStatus('mandatory')
lpsSystemRequestedSnmpMode = MibScalar((1, 3, 6, 1, 4, 1, 114, 1, 4, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("singleAgentMode", 1), ("multiAgentMode", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lpsSystemRequestedSnmpMode.setStatus('mandatory')
lpsSystemCurrentSnmpMode = MibScalar((1, 3, 6, 1, 4, 1, 114, 1, 4, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("singleAgentMode", 1), ("multiAgentMode", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpsSystemCurrentSnmpMode.setStatus('mandatory')
lpsSystemAction = MibScalar((1, 3, 6, 1, 4, 1, 114, 1, 4, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("other", 1), ("reset", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lpsSystemAction.setStatus('mandatory')
lpsSystemOvertemperature = MibScalar((1, 3, 6, 1, 4, 1, 114, 1, 4, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("true", 1), ("false", 2), ("notSupported", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpsSystemOvertemperature.setStatus('mandatory')
lpsSystemFanFailure = MibScalar((1, 3, 6, 1, 4, 1, 114, 1, 4, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("true", 1), ("false", 2), ("notSupported", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpsSystemFanFailure.setStatus('mandatory')
lpsSystemProtocolMask = MibScalar((1, 3, 6, 1, 4, 1, 114, 1, 4, 1, 17), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpsSystemProtocolMask.setStatus('mandatory')
lpsSlotCount = MibScalar((1, 3, 6, 1, 4, 1, 114, 1, 4, 2, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpsSlotCount.setStatus('mandatory')
lpsSlotTable = MibTable((1, 3, 6, 1, 4, 1, 114, 1, 4, 2, 2), )
if mibBuilder.loadTexts: lpsSlotTable.setStatus('mandatory')
lpsSlotEntry = MibTableRow((1, 3, 6, 1, 4, 1, 114, 1, 4, 2, 2, 1), ).setIndexNames((0, "LANPLEX-SYSTEMS-MIB-1-2-2", "lpsSlotIndex"))
if mibBuilder.loadTexts: lpsSlotEntry.setStatus('mandatory')
lpsSlotIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 114, 1, 4, 2, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpsSlotIndex.setStatus('mandatory')
lpsSlotBoardType = MibTableColumn((1, 3, 6, 1, 4, 1, 114, 1, 4, 2, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 7, 8, 9, 10, 11, 12))).clone(namedValues=NamedValues(("other", 1), ("emptyLocation", 2), ("esmBoard", 7), ("fcmBoard", 8), ("lmmBoard", 9), ("efsmBoard", 10), ("trsmBoard", 11), ("tmmBoard", 12)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpsSlotBoardType.setStatus('mandatory')
lpsSlotBoardRevision = MibTableColumn((1, 3, 6, 1, 4, 1, 114, 1, 4, 2, 2, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 1))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpsSlotBoardRevision.setStatus('mandatory')
lpsSlotBoardStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 114, 1, 4, 2, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("notPresent", 1), ("testing", 2), ("offline", 3), ("online", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpsSlotBoardStatus.setStatus('mandatory')
lpsSlotBoardName = MibTableColumn((1, 3, 6, 1, 4, 1, 114, 1, 4, 2, 2, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpsSlotBoardName.setStatus('mandatory')
lpsSlotBoardNameAbbrev = MibTableColumn((1, 3, 6, 1, 4, 1, 114, 1, 4, 2, 2, 1, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 31))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpsSlotBoardNameAbbrev.setStatus('mandatory')
lpsSlotEthernetPortCount = MibTableColumn((1, 3, 6, 1, 4, 1, 114, 1, 4, 2, 2, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpsSlotEthernetPortCount.setStatus('mandatory')
lpsSlotFddiMacCount = MibTableColumn((1, 3, 6, 1, 4, 1, 114, 1, 4, 2, 2, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpsSlotFddiMacCount.setStatus('mandatory')
lpsSlotFddiPortCount = MibTableColumn((1, 3, 6, 1, 4, 1, 114, 1, 4, 2, 2, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpsSlotFddiPortCount.setStatus('mandatory')
lpsSlotOvertemperature = MibTableColumn((1, 3, 6, 1, 4, 1, 114, 1, 4, 2, 2, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("true", 1), ("false", 2), ("notSupported", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpsSlotOvertemperature.setStatus('mandatory')
lpsSlotTokenRingPortCount = MibTableColumn((1, 3, 6, 1, 4, 1, 114, 1, 4, 2, 2, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpsSlotTokenRingPortCount.setStatus('mandatory')
lpsControlPanelHardwareRevision = MibScalar((1, 3, 6, 1, 4, 1, 114, 1, 4, 3, 1), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 1)).setFixedLength(1)).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpsControlPanelHardwareRevision.setStatus('mandatory')
lpsControlPanelSoftwareRevision = MibScalar((1, 3, 6, 1, 4, 1, 114, 1, 4, 3, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 1)).setFixedLength(1)).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpsControlPanelSoftwareRevision.setStatus('mandatory')
lpsControlPanelLines = MibScalar((1, 3, 6, 1, 4, 1, 114, 1, 4, 3, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpsControlPanelLines.setStatus('mandatory')
lpsControlPanelColumns = MibScalar((1, 3, 6, 1, 4, 1, 114, 1, 4, 3, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpsControlPanelColumns.setStatus('mandatory')
lpsControlPanelText = MibScalar((1, 3, 6, 1, 4, 1, 114, 1, 4, 3, 5), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 127))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpsControlPanelText.setStatus('mandatory')
lpsPowerSupplyCount = MibScalar((1, 3, 6, 1, 4, 1, 114, 1, 4, 4, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpsPowerSupplyCount.setStatus('mandatory')
lpsPowerSupplyStatusTable = MibTable((1, 3, 6, 1, 4, 1, 114, 1, 4, 4, 2), )
if mibBuilder.loadTexts: lpsPowerSupplyStatusTable.setStatus('mandatory')
lpsPowerSupplyStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 114, 1, 4, 4, 2, 1), ).setIndexNames((0, "LANPLEX-SYSTEMS-MIB-1-2-2", "lpsPowerSupplyStatusIndex"))
if mibBuilder.loadTexts: lpsPowerSupplyStatusEntry.setStatus('mandatory')
lpsPowerSupplyStatusIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 114, 1, 4, 4, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpsPowerSupplyStatusIndex.setStatus('mandatory')
lpsPowerSupplyStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 114, 1, 4, 4, 2, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpsPowerSupplyStatus.setStatus('mandatory')
lpsPowerSupplyStatusSupported = MibTableColumn((1, 3, 6, 1, 4, 1, 114, 1, 4, 4, 2, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpsPowerSupplyStatusSupported.setStatus('mandatory')
lpsSnmpAgentId = MibScalar((1, 3, 6, 1, 4, 1, 114, 1, 4, 5, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpsSnmpAgentId.setStatus('mandatory')
lpsSnmpInternalAgentTrapMask = MibScalar((1, 3, 6, 1, 4, 1, 114, 1, 4, 5, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(8, 8)).setFixedLength(8)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lpsSnmpInternalAgentTrapMask.setStatus('mandatory')
lpsSnmpInternalAgentTrapDestinationMask = MibScalar((1, 3, 6, 1, 4, 1, 114, 1, 4, 5, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lpsSnmpInternalAgentTrapDestinationMask.setStatus('mandatory')
lpsSnmpProxyInternalRequests = MibScalar((1, 3, 6, 1, 4, 1, 114, 1, 4, 5, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("true", 1), ("false", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lpsSnmpProxyInternalRequests.setStatus('deprecated')
lpsSnmpInternalProxyRequestMaxAge = MibScalar((1, 3, 6, 1, 4, 1, 114, 1, 4, 5, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lpsSnmpInternalProxyRequestMaxAge.setStatus('mandatory')
lpsSnmpProxyInternalTraps = MibScalar((1, 3, 6, 1, 4, 1, 114, 1, 4, 5, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("true", 1), ("false", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lpsSnmpProxyInternalTraps.setStatus('deprecated')
lpsSnmpInternalProxyTable = MibTable((1, 3, 6, 1, 4, 1, 114, 1, 4, 5, 7), )
if mibBuilder.loadTexts: lpsSnmpInternalProxyTable.setStatus('mandatory')
lpsSnmpInternalProxyEntry = MibTableRow((1, 3, 6, 1, 4, 1, 114, 1, 4, 5, 7, 1), ).setIndexNames((0, "LANPLEX-SYSTEMS-MIB-1-2-2", "lpsSnmpInternalProxyAgentId"), (0, "LANPLEX-SYSTEMS-MIB-1-2-2", "lpsSnmpInternalProxyAccessClass"))
if mibBuilder.loadTexts: lpsSnmpInternalProxyEntry.setStatus('mandatory')
lpsSnmpInternalProxyAgentId = MibTableColumn((1, 3, 6, 1, 4, 1, 114, 1, 4, 5, 7, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpsSnmpInternalProxyAgentId.setStatus('mandatory')
lpsSnmpInternalProxyAccessClass = MibTableColumn((1, 3, 6, 1, 4, 1, 114, 1, 4, 5, 7, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("readOnly", 1), ("readWrite", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpsSnmpInternalProxyAccessClass.setStatus('mandatory')
lpsSnmpInternalProxyCommunity = MibTableColumn((1, 3, 6, 1, 4, 1, 114, 1, 4, 5, 7, 1, 3), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpsSnmpInternalProxyCommunity.setStatus('mandatory')
lpsAgentRequestMaxAge = MibScalar((1, 3, 6, 1, 4, 1, 114, 1, 4, 6, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lpsAgentRequestMaxAge.setStatus('mandatory')
lpsAgentProxyRemoteSmtRequests = MibScalar((1, 3, 6, 1, 4, 1, 114, 1, 4, 6, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("true", 1), ("false", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lpsAgentProxyRemoteSmtRequests.setStatus('deprecated')
lpsAgentRemoteSmtProxyRequestMaxAge = MibScalar((1, 3, 6, 1, 4, 1, 114, 1, 4, 6, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lpsAgentRemoteSmtProxyRequestMaxAge.setStatus('mandatory')
lpsAgentProxyRemoteSmtEvents = MibScalar((1, 3, 6, 1, 4, 1, 114, 1, 4, 6, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("true", 1), ("false", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lpsAgentProxyRemoteSmtEvents.setStatus('mandatory')
lpsAgentTrapDescriptionTable = MibTable((1, 3, 6, 1, 4, 1, 114, 1, 4, 6, 5), )
if mibBuilder.loadTexts: lpsAgentTrapDescriptionTable.setStatus('mandatory')
lpsAgentTrapDescriptionTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 114, 1, 4, 6, 5, 1), ).setIndexNames((0, "LANPLEX-SYSTEMS-MIB-1-2-2", "lpsAgentTrapDescriptionIndex"))
if mibBuilder.loadTexts: lpsAgentTrapDescriptionTableEntry.setStatus('mandatory')
lpsAgentTrapDescriptionIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 114, 1, 4, 6, 5, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpsAgentTrapDescriptionIndex.setStatus('mandatory')
lpsAgentTrapEnterprise = MibTableColumn((1, 3, 6, 1, 4, 1, 114, 1, 4, 6, 5, 1, 2), ObjectIdentifier()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpsAgentTrapEnterprise.setStatus('mandatory')
lpsAgentTrapNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 114, 1, 4, 6, 5, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpsAgentTrapNumber.setStatus('mandatory')
lpsAgentTrapDestinationTable = MibTable((1, 3, 6, 1, 4, 1, 114, 1, 4, 6, 6), )
if mibBuilder.loadTexts: lpsAgentTrapDestinationTable.setStatus('mandatory')
lpsAgentTrapDestinationTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 114, 1, 4, 6, 6, 1), ).setIndexNames((0, "LANPLEX-SYSTEMS-MIB-1-2-2", "lpsAgentTrapDestinationAddressType"), (0, "LANPLEX-SYSTEMS-MIB-1-2-2", "lpsAgentTrapDestinationAddress"))
if mibBuilder.loadTexts: lpsAgentTrapDestinationTableEntry.setStatus('mandatory')
lpsAgentTrapDestinationAddressType = MibTableColumn((1, 3, 6, 1, 4, 1, 114, 1, 4, 6, 6, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("ip", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpsAgentTrapDestinationAddressType.setStatus('mandatory')
lpsAgentTrapDestinationAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 114, 1, 4, 6, 6, 1, 2), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpsAgentTrapDestinationAddress.setStatus('mandatory')
lpsAgentTrapDestinationTrapMask = MibTableColumn((1, 3, 6, 1, 4, 1, 114, 1, 4, 6, 6, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(8, 8)).setFixedLength(8)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lpsAgentTrapDestinationTrapMask.setStatus('mandatory')
lpsAgentTrapDestinationEntryStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 114, 1, 4, 6, 6, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("valid", 1), ("invalid", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lpsAgentTrapDestinationEntryStatus.setStatus('mandatory')
lpsInterfaceLocationTable = MibTable((1, 3, 6, 1, 4, 1, 114, 1, 4, 7, 1), )
if mibBuilder.loadTexts: lpsInterfaceLocationTable.setStatus('mandatory')
lpsInterfaceLocationEntry = MibTableRow((1, 3, 6, 1, 4, 1, 114, 1, 4, 7, 1, 1), ).setIndexNames((0, "LANPLEX-SYSTEMS-MIB-1-2-2", "lpsInterfaceLocationIfIndex"))
if mibBuilder.loadTexts: lpsInterfaceLocationEntry.setStatus('mandatory')
lpsInterfaceLocationIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 114, 1, 4, 7, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpsInterfaceLocationIfIndex.setStatus('mandatory')
lpsInterfaceLocationInterfaceType = MibTableColumn((1, 3, 6, 1, 4, 1, 114, 1, 4, 7, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("other", 1), ("ethernetPort", 2), ("fddiMac", 3), ("tokenringPort", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpsInterfaceLocationInterfaceType.setStatus('mandatory')
lpsInterfaceLocationType = MibTableColumn((1, 3, 6, 1, 4, 1, 114, 1, 4, 7, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("other", 1), ("modularSlot", 2), ("chassis", 3), ("modularCard", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpsInterfaceLocationType.setStatus('mandatory')
lpsInterfaceLocationTypeIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 114, 1, 4, 7, 1, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpsInterfaceLocationTypeIndex.setStatus('mandatory')
lpsInterfaceLocationLocalIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 114, 1, 4, 7, 1, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpsInterfaceLocationLocalIndex.setStatus('mandatory')
lpsEthernetPortCount = MibScalar((1, 3, 6, 1, 4, 1, 114, 1, 4, 8, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpsEthernetPortCount.setStatus('mandatory')
lpsEthernetPortTable = MibTable((1, 3, 6, 1, 4, 1, 114, 1, 4, 8, 2), )
if mibBuilder.loadTexts: lpsEthernetPortTable.setStatus('mandatory')
lpsEthernetPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 114, 1, 4, 8, 2, 1), ).setIndexNames((0, "LANPLEX-SYSTEMS-MIB-1-2-2", "lpsEthernetPortIndex"))
if mibBuilder.loadTexts: lpsEthernetPortEntry.setStatus('mandatory')
lpsEthernetPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 114, 1, 4, 8, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpsEthernetPortIndex.setStatus('mandatory')
lpsEthernetPortIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 114, 1, 4, 8, 2, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpsEthernetPortIfIndex.setStatus('mandatory')
lpsEthernetPortLabel = MibTableColumn((1, 3, 6, 1, 4, 1, 114, 1, 4, 8, 2, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 31))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lpsEthernetPortLabel.setStatus('mandatory')
lpsEthernetPortLinkStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 114, 1, 4, 8, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("active", 1), ("inActive", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpsEthernetPortLinkStatus.setStatus('mandatory')
lpsEthernetPortType = MibTableColumn((1, 3, 6, 1, 4, 1, 114, 1, 4, 8, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9))).clone(namedValues=NamedValues(("rj2110BaseT", 1), ("rj4510BaseT", 2), ("st10BaseFL", 3), ("aui", 4), ("bnc10Base2", 5), ("other", 6), ("rj45100BaseT", 7), ("sc100BaseFx", 8), ("untermBnc10Base2", 9)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpsEthernetPortType.setStatus('mandatory')
lpsEthernetPortRateTable = MibTable((1, 3, 6, 1, 4, 1, 114, 1, 4, 8, 3), )
if mibBuilder.loadTexts: lpsEthernetPortRateTable.setStatus('mandatory')
lpsEthernetPortRateEntry = MibTableRow((1, 3, 6, 1, 4, 1, 114, 1, 4, 8, 3, 1), ).setIndexNames((0, "LANPLEX-SYSTEMS-MIB-1-2-2", "lpsEthernetPortRateIndex"))
if mibBuilder.loadTexts: lpsEthernetPortRateEntry.setStatus('mandatory')
lpsEthernetPortRateIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 114, 1, 4, 8, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpsEthernetPortRateIndex.setStatus('mandatory')
lpsEthernetPortRateByteReceiveRate = MibTableColumn((1, 3, 6, 1, 4, 1, 114, 1, 4, 8, 3, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpsEthernetPortRateByteReceiveRate.setStatus('mandatory')
lpsEthernetPortRatePeakByteReceiveRate = MibTableColumn((1, 3, 6, 1, 4, 1, 114, 1, 4, 8, 3, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpsEthernetPortRatePeakByteReceiveRate.setStatus('mandatory')
lpsEthernetPortRateFrameReceiveRate = MibTableColumn((1, 3, 6, 1, 4, 1, 114, 1, 4, 8, 3, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpsEthernetPortRateFrameReceiveRate.setStatus('mandatory')
lpsEthernetPortRatePeakFrameReceiveRate = MibTableColumn((1, 3, 6, 1, 4, 1, 114, 1, 4, 8, 3, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpsEthernetPortRatePeakFrameReceiveRate.setStatus('mandatory')
lpsEthernetPortRateByteTransmitRate = MibTableColumn((1, 3, 6, 1, 4, 1, 114, 1, 4, 8, 3, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpsEthernetPortRateByteTransmitRate.setStatus('mandatory')
lpsEthernetPortRatePeakByteTransmitRate = MibTableColumn((1, 3, 6, 1, 4, 1, 114, 1, 4, 8, 3, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpsEthernetPortRatePeakByteTransmitRate.setStatus('mandatory')
lpsEthernetPortRateFrameTransmitRate = MibTableColumn((1, 3, 6, 1, 4, 1, 114, 1, 4, 8, 3, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpsEthernetPortRateFrameTransmitRate.setStatus('mandatory')
lpsEthernetPortRatePeakFrameTransmitRate = MibTableColumn((1, 3, 6, 1, 4, 1, 114, 1, 4, 8, 3, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpsEthernetPortRatePeakFrameTransmitRate.setStatus('mandatory')
lpsSmtCount = MibScalar((1, 3, 6, 1, 4, 1, 114, 1, 4, 9, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpsSmtCount.setStatus('mandatory')
lpsSmtFddiMacBeaconTable = MibTable((1, 3, 6, 1, 4, 1, 114, 1, 4, 9, 4), )
if mibBuilder.loadTexts: lpsSmtFddiMacBeaconTable.setStatus('mandatory')
lpsSmtFddiMacBeaconEntry = MibTableRow((1, 3, 6, 1, 4, 1, 114, 1, 4, 9, 4, 1), ).setIndexNames((0, "LANPLEX-SYSTEMS-MIB-1-2-2", "lpsSmtFddiMacBeaconSmtIndex"), (0, "LANPLEX-SYSTEMS-MIB-1-2-2", "lpsSmtFddiMacBeaconIndex"))
if mibBuilder.loadTexts: lpsSmtFddiMacBeaconEntry.setStatus('mandatory')
lpsSmtFddiMacBeaconSmtIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 114, 1, 4, 9, 4, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpsSmtFddiMacBeaconSmtIndex.setStatus('mandatory')
lpsSmtFddiMacBeaconIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 114, 1, 4, 9, 4, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpsSmtFddiMacBeaconIndex.setStatus('mandatory')
lpsSmtFddiMacBeaconHistory = MibTableColumn((1, 3, 6, 1, 4, 1, 114, 1, 4, 9, 4, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 256))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpsSmtFddiMacBeaconHistory.setStatus('mandatory')
lpsSmtFddiMacRateTable = MibTable((1, 3, 6, 1, 4, 1, 114, 1, 4, 9, 5), )
if mibBuilder.loadTexts: lpsSmtFddiMacRateTable.setStatus('mandatory')
lpsSmtFddiMacRateEntry = MibTableRow((1, 3, 6, 1, 4, 1, 114, 1, 4, 9, 5, 1), ).setIndexNames((0, "LANPLEX-SYSTEMS-MIB-1-2-2", "lpsSmtFddiMacRateSmtIndex"), (0, "LANPLEX-SYSTEMS-MIB-1-2-2", "lpsSmtFddiMacRateIndex"))
if mibBuilder.loadTexts: lpsSmtFddiMacRateEntry.setStatus('mandatory')
lpsSmtFddiMacRateSmtIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 114, 1, 4, 9, 5, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpsSmtFddiMacRateSmtIndex.setStatus('mandatory')
lpsSmtFddiMacRateIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 114, 1, 4, 9, 5, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpsSmtFddiMacRateIndex.setStatus('mandatory')
lpsSmtFddiMacRateByteReceiveRate = MibTableColumn((1, 3, 6, 1, 4, 1, 114, 1, 4, 9, 5, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpsSmtFddiMacRateByteReceiveRate.setStatus('mandatory')
lpsSmtFddiMacRatePeakByteReceiveRate = MibTableColumn((1, 3, 6, 1, 4, 1, 114, 1, 4, 9, 5, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpsSmtFddiMacRatePeakByteReceiveRate.setStatus('mandatory')
lpsSmtFddiMacRateFrameReceiveRate = MibTableColumn((1, 3, 6, 1, 4, 1, 114, 1, 4, 9, 5, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpsSmtFddiMacRateFrameReceiveRate.setStatus('mandatory')
lpsSmtFddiMacRatePeakFrameReceiveRate = MibTableColumn((1, 3, 6, 1, 4, 1, 114, 1, 4, 9, 5, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpsSmtFddiMacRatePeakFrameReceiveRate.setStatus('mandatory')
lpsSmtFddiMacRateByteTransmitRate = MibTableColumn((1, 3, 6, 1, 4, 1, 114, 1, 4, 9, 5, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpsSmtFddiMacRateByteTransmitRate.setStatus('mandatory')
lpsSmtFddiMacRatePeakByteTransmitRate = MibTableColumn((1, 3, 6, 1, 4, 1, 114, 1, 4, 9, 5, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpsSmtFddiMacRatePeakByteTransmitRate.setStatus('mandatory')
lpsSmtFddiMacRateFrameTransmitRate = MibTableColumn((1, 3, 6, 1, 4, 1, 114, 1, 4, 9, 5, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpsSmtFddiMacRateFrameTransmitRate.setStatus('mandatory')
lpsSmtFddiMacRatePeakFrameTransmitRate = MibTableColumn((1, 3, 6, 1, 4, 1, 114, 1, 4, 9, 5, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpsSmtFddiMacRatePeakFrameTransmitRate.setStatus('mandatory')
lpsSmtFddiPortTable = MibTable((1, 3, 6, 1, 4, 1, 114, 1, 4, 9, 6), )
if mibBuilder.loadTexts: lpsSmtFddiPortTable.setStatus('mandatory')
lpsSmtFddiPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 114, 1, 4, 9, 6, 1), ).setIndexNames((0, "LANPLEX-SYSTEMS-MIB-1-2-2", "lpsSmtFddiPortSmtIndex"), (0, "LANPLEX-SYSTEMS-MIB-1-2-2", "lpsSmtFddiPortIndex"))
if mibBuilder.loadTexts: lpsSmtFddiPortEntry.setStatus('mandatory')
lpsSmtFddiPortSmtIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 114, 1, 4, 9, 6, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpsSmtFddiPortSmtIndex.setStatus('mandatory')
lpsSmtFddiPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 114, 1, 4, 9, 6, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpsSmtFddiPortIndex.setStatus('mandatory')
lpsSmtFddiPortLocationType = MibTableColumn((1, 3, 6, 1, 4, 1, 114, 1, 4, 9, 6, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("other", 1), ("modularSlot", 2), ("chassis", 3), ("modularCard", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpsSmtFddiPortLocationType.setStatus('mandatory')
lpsSmtFddiPortLocationTypeIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 114, 1, 4, 9, 6, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpsSmtFddiPortLocationTypeIndex.setStatus('mandatory')
lpsSmtFddiPortLocationLocalIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 114, 1, 4, 9, 6, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpsSmtFddiPortLocationLocalIndex.setStatus('mandatory')
lpsSmtFddiPortLabel = MibTableColumn((1, 3, 6, 1, 4, 1, 114, 1, 4, 9, 6, 1, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 31))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lpsSmtFddiPortLabel.setStatus('mandatory')
lpsBridgeCount = MibScalar((1, 3, 6, 1, 4, 1, 114, 1, 4, 10, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpsBridgeCount.setStatus('mandatory')
lpsBridgeTable = MibTable((1, 3, 6, 1, 4, 1, 114, 1, 4, 10, 2), )
if mibBuilder.loadTexts: lpsBridgeTable.setStatus('mandatory')
lpsBridgeEntry = MibTableRow((1, 3, 6, 1, 4, 1, 114, 1, 4, 10, 2, 1), ).setIndexNames((0, "LANPLEX-SYSTEMS-MIB-1-2-2", "lpsBridgeIndex"))
if mibBuilder.loadTexts: lpsBridgeEntry.setStatus('mandatory')
lpsBridgeIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 114, 1, 4, 10, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpsBridgeIndex.setStatus('mandatory')
lpsBridgePortCount = MibTableColumn((1, 3, 6, 1, 4, 1, 114, 1, 4, 10, 2, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpsBridgePortCount.setStatus('mandatory')
lpsBridgeAddressTableSize = MibTableColumn((1, 3, 6, 1, 4, 1, 114, 1, 4, 10, 2, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpsBridgeAddressTableSize.setStatus('mandatory')
lpsBridgeAddressTableCount = MibTableColumn((1, 3, 6, 1, 4, 1, 114, 1, 4, 10, 2, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpsBridgeAddressTableCount.setStatus('mandatory')
lpsBridgeAddressTablePeakCount = MibTableColumn((1, 3, 6, 1, 4, 1, 114, 1, 4, 10, 2, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpsBridgeAddressTablePeakCount.setStatus('mandatory')
lpsBridgeAddressThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 114, 1, 4, 10, 2, 1, 6), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lpsBridgeAddressThreshold.setStatus('mandatory')
lpsBridgeMode = MibTableColumn((1, 3, 6, 1, 4, 1, 114, 1, 4, 10, 2, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("expressMode", 1), ("ieee8021dBridgeMode", 2), ("notSupported", 3), ("ieee8021dSRTBridgeMode", 4), ("ieee8021dSRBridgeMode", 5), ("ibmSRBridgeMode", 6), ("srtBBridgeMode", 7), ("srExpressBridgeMode", 8)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lpsBridgeMode.setStatus('mandatory')
lpsBridgeBackbonePort = MibTableColumn((1, 3, 6, 1, 4, 1, 114, 1, 4, 10, 2, 1, 8), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lpsBridgeBackbonePort.setStatus('mandatory')
lpsBridgeIpFragmentationEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 114, 1, 4, 10, 2, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("true", 1), ("false", 2), ("notSupported", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lpsBridgeIpFragmentationEnabled.setStatus('mandatory')
lpsBridgeTrFddiTranslationMode = MibTableColumn((1, 3, 6, 1, 4, 1, 114, 1, 4, 10, 2, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("native", 1), ("backbone", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lpsBridgeTrFddiTranslationMode.setStatus('mandatory')
lpsBridgePortTable = MibTable((1, 3, 6, 1, 4, 1, 114, 1, 4, 10, 3), )
if mibBuilder.loadTexts: lpsBridgePortTable.setStatus('mandatory')
lpsBridgePortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 114, 1, 4, 10, 3, 1), ).setIndexNames((0, "LANPLEX-SYSTEMS-MIB-1-2-2", "lpsBridgePortBridgeIndex"), (0, "LANPLEX-SYSTEMS-MIB-1-2-2", "lpsBridgePortIndex"))
if mibBuilder.loadTexts: lpsBridgePortEntry.setStatus('mandatory')
lpsBridgePortBridgeIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 114, 1, 4, 10, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpsBridgePortBridgeIndex.setStatus('mandatory')
lpsBridgePortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 114, 1, 4, 10, 3, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpsBridgePortIndex.setStatus('mandatory')
lpsBridgePortIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 114, 1, 4, 10, 3, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpsBridgePortIfIndex.setStatus('mandatory')
lpsBridgePortReceiveMulticastLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 114, 1, 4, 10, 3, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lpsBridgePortReceiveMulticastLimit.setStatus('mandatory')
lpsBridgePortAddressAction = MibTableColumn((1, 3, 6, 1, 4, 1, 114, 1, 4, 10, 3, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("other", 1), ("freezeAddress", 2), ("flushAddress", 3), ("flushDynamicAddress", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lpsBridgePortAddressAction.setStatus('mandatory')
lpsBridgePortSpanningTreeFrameReceivedCounts = MibTableColumn((1, 3, 6, 1, 4, 1, 114, 1, 4, 10, 3, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpsBridgePortSpanningTreeFrameReceivedCounts.setStatus('mandatory')
lpsBridgePortReceiveBlockedDiscards = MibTableColumn((1, 3, 6, 1, 4, 1, 114, 1, 4, 10, 3, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpsBridgePortReceiveBlockedDiscards.setStatus('mandatory')
lpsBridgePortReceiveMulticastLimitExceededs = MibTableColumn((1, 3, 6, 1, 4, 1, 114, 1, 4, 10, 3, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpsBridgePortReceiveMulticastLimitExceededs.setStatus('mandatory')
lpsBridgePortReceiveMulticastLimitExceededDiscards = MibTableColumn((1, 3, 6, 1, 4, 1, 114, 1, 4, 10, 3, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpsBridgePortReceiveMulticastLimitExceededDiscards.setStatus('mandatory')
lpsBridgePortReceiveSecurityDiscards = MibTableColumn((1, 3, 6, 1, 4, 1, 114, 1, 4, 10, 3, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpsBridgePortReceiveSecurityDiscards.setStatus('mandatory')
lpsBridgePortReceiveUnknownDiscards = MibTableColumn((1, 3, 6, 1, 4, 1, 114, 1, 4, 10, 3, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpsBridgePortReceiveUnknownDiscards.setStatus('mandatory')
lpsBridgePortReceiveOtherDiscards = MibTableColumn((1, 3, 6, 1, 4, 1, 114, 1, 4, 10, 3, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpsBridgePortReceiveOtherDiscards.setStatus('mandatory')
lpsBridgePortReceiveErrorDiscards = MibTableColumn((1, 3, 6, 1, 4, 1, 114, 1, 4, 10, 3, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpsBridgePortReceiveErrorDiscards.setStatus('mandatory')
lpsBridgePortSameSegmentDiscards = MibTableColumn((1, 3, 6, 1, 4, 1, 114, 1, 4, 10, 3, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpsBridgePortSameSegmentDiscards.setStatus('mandatory')
lpsBridgePortTransmitBlockedDiscards = MibTableColumn((1, 3, 6, 1, 4, 1, 114, 1, 4, 10, 3, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpsBridgePortTransmitBlockedDiscards.setStatus('mandatory')
lpsBridgePortReceiveAllPathFilteredFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 114, 1, 4, 10, 3, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpsBridgePortReceiveAllPathFilteredFrames.setStatus('mandatory')
lpsBridgePortReceiveMulticastPathFilteredFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 114, 1, 4, 10, 3, 1, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpsBridgePortReceiveMulticastPathFilteredFrames.setStatus('mandatory')
lpsBridgePortTransmitAllPathFilteredFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 114, 1, 4, 10, 3, 1, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpsBridgePortTransmitAllPathFilteredFrames.setStatus('mandatory')
lpsBridgePortTransmitMulticastPathFilteredFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 114, 1, 4, 10, 3, 1, 19), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpsBridgePortTransmitMulticastPathFilteredFrames.setStatus('mandatory')
lpsBridgePortForwardedUnicastFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 114, 1, 4, 10, 3, 1, 20), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpsBridgePortForwardedUnicastFrames.setStatus('mandatory')
lpsBridgePortForwardedUnicastOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 114, 1, 4, 10, 3, 1, 21), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpsBridgePortForwardedUnicastOctets.setStatus('mandatory')
lpsBridgePortForwardedMulticastFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 114, 1, 4, 10, 3, 1, 22), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpsBridgePortForwardedMulticastFrames.setStatus('mandatory')
lpsBridgePortForwardedMulticastOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 114, 1, 4, 10, 3, 1, 23), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpsBridgePortForwardedMulticastOctets.setStatus('mandatory')
lpsBridgePortFloodedUnicastFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 114, 1, 4, 10, 3, 1, 24), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpsBridgePortFloodedUnicastFrames.setStatus('mandatory')
lpsBridgePortFloodedUnicastOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 114, 1, 4, 10, 3, 1, 25), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpsBridgePortFloodedUnicastOctets.setStatus('mandatory')
lpsBridgePortPairTable = MibTable((1, 3, 6, 1, 4, 1, 114, 1, 4, 10, 4), )
if mibBuilder.loadTexts: lpsBridgePortPairTable.setStatus('mandatory')
lpsBridgePortPairEntry = MibTableRow((1, 3, 6, 1, 4, 1, 114, 1, 4, 10, 4, 1), ).setIndexNames((0, "LANPLEX-SYSTEMS-MIB-1-2-2", "lpsBridgePortPairBridgeIndex"), (0, "LANPLEX-SYSTEMS-MIB-1-2-2", "lpsBridgePortPairReceivePortIndex"), (0, "LANPLEX-SYSTEMS-MIB-1-2-2", "lpsBridgePortPairDestinationPortIndex"))
if mibBuilder.loadTexts: lpsBridgePortPairEntry.setStatus('mandatory')
lpsBridgePortPairBridgeIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 114, 1, 4, 10, 4, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpsBridgePortPairBridgeIndex.setStatus('mandatory')
lpsBridgePortPairReceivePortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 114, 1, 4, 10, 4, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpsBridgePortPairReceivePortIndex.setStatus('mandatory')
lpsBridgePortPairDestinationPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 114, 1, 4, 10, 4, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpsBridgePortPairDestinationPortIndex.setStatus('mandatory')
lpsBridgePortPairForwardedToUnicastFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 114, 1, 4, 10, 4, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpsBridgePortPairForwardedToUnicastFrames.setStatus('mandatory')
lpsBridgePortPairForwardedToUnicastOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 114, 1, 4, 10, 4, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpsBridgePortPairForwardedToUnicastOctets.setStatus('mandatory')
lpsBridgePortAddressTable = MibTable((1, 3, 6, 1, 4, 1, 114, 1, 4, 10, 5), )
if mibBuilder.loadTexts: lpsBridgePortAddressTable.setStatus('mandatory')
lpsBridgePortAddressEntry = MibTableRow((1, 3, 6, 1, 4, 1, 114, 1, 4, 10, 5, 1), ).setIndexNames((0, "LANPLEX-SYSTEMS-MIB-1-2-2", "lpsBridgePortAddressBridgeIndex"), (0, "LANPLEX-SYSTEMS-MIB-1-2-2", "lpsBridgePortAddressPortIndex"), (0, "LANPLEX-SYSTEMS-MIB-1-2-2", "lpsBridgePortAddressIndex"))
if mibBuilder.loadTexts: lpsBridgePortAddressEntry.setStatus('mandatory')
lpsBridgePortAddressBridgeIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 114, 1, 4, 10, 5, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpsBridgePortAddressBridgeIndex.setStatus('mandatory')
lpsBridgePortAddressPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 114, 1, 4, 10, 5, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpsBridgePortAddressPortIndex.setStatus('mandatory')
lpsBridgePortAddressIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 114, 1, 4, 10, 5, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpsBridgePortAddressIndex.setStatus('mandatory')
lpsBridgePortAddressRemoteAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 114, 1, 4, 10, 5, 1, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(6, 6)).setFixedLength(6)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lpsBridgePortAddressRemoteAddress.setStatus('mandatory')
lpsBridgePortAddressType = MibTableColumn((1, 3, 6, 1, 4, 1, 114, 1, 4, 10, 5, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("valid", 1), ("invalid", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lpsBridgePortAddressType.setStatus('mandatory')
lpsBridgePortAddressIsStatic = MibTableColumn((1, 3, 6, 1, 4, 1, 114, 1, 4, 10, 5, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("isStatic", 1), ("isDynamic", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lpsBridgePortAddressIsStatic.setStatus('mandatory')
lpsBridgePortAddressStaticPort = MibTableColumn((1, 3, 6, 1, 4, 1, 114, 1, 4, 10, 5, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpsBridgePortAddressStaticPort.setStatus('mandatory')
lpsBridgePortAddressAge = MibTableColumn((1, 3, 6, 1, 4, 1, 114, 1, 4, 10, 5, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpsBridgePortAddressAge.setStatus('mandatory')
lpsBridgeStpGroupAddress = MibScalar((1, 3, 6, 1, 4, 1, 114, 1, 4, 10, 6), OctetString().subtype(subtypeSpec=ValueSizeConstraint(6, 6)).setFixedLength(6)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lpsBridgeStpGroupAddress.setStatus('mandatory')
lpsBridgeStpEnable = MibScalar((1, 3, 6, 1, 4, 1, 114, 1, 4, 10, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("true", 1), ("false", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lpsBridgeStpEnable.setStatus('mandatory')
lpsNetworkAnalyzerTable = MibTable((1, 3, 6, 1, 4, 1, 114, 1, 4, 12, 1), )
if mibBuilder.loadTexts: lpsNetworkAnalyzerTable.setStatus('mandatory')
lpsNetworkAnalyzerTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 114, 1, 4, 12, 1, 1), ).setIndexNames((0, "LANPLEX-SYSTEMS-MIB-1-2-2", "lpsNetworkAnalyzerBridgeIndex"), (0, "LANPLEX-SYSTEMS-MIB-1-2-2", "lpsNetworkAnalyzerBridgePortIndex"))
if mibBuilder.loadTexts: lpsNetworkAnalyzerTableEntry.setStatus('mandatory')
lpsNetworkAnalyzerBridgeIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 114, 1, 4, 12, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpsNetworkAnalyzerBridgeIndex.setStatus('mandatory')
lpsNetworkAnalyzerBridgePortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 114, 1, 4, 12, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpsNetworkAnalyzerBridgePortIndex.setStatus('mandatory')
lpsNetworkAnalyzerPhysicalAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 114, 1, 4, 12, 1, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(6, 6)).setFixedLength(6)).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpsNetworkAnalyzerPhysicalAddress.setStatus('mandatory')
lpsNetworkAnalyzerStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 114, 1, 4, 12, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("valid", 1), ("invalid", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lpsNetworkAnalyzerStatus.setStatus('mandatory')
lpsNetworkPortMonitorTable = MibTable((1, 3, 6, 1, 4, 1, 114, 1, 4, 12, 2), )
if mibBuilder.loadTexts: lpsNetworkPortMonitorTable.setStatus('mandatory')
lpsNetworkPortMonitorTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 114, 1, 4, 12, 2, 1), ).setIndexNames((0, "LANPLEX-SYSTEMS-MIB-1-2-2", "lpsNetworkPortMonitorBridgeIndex"), (0, "LANPLEX-SYSTEMS-MIB-1-2-2", "lpsNetworkPortMonitorBridgePortIndex"))
if mibBuilder.loadTexts: lpsNetworkPortMonitorTableEntry.setStatus('mandatory')
lpsNetworkPortMonitorBridgeIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 114, 1, 4, 12, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpsNetworkPortMonitorBridgeIndex.setStatus('mandatory')
lpsNetworkPortMonitorBridgePortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 114, 1, 4, 12, 2, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpsNetworkPortMonitorBridgePortIndex.setStatus('mandatory')
lpsNetworkPortMonitorAnalyzerAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 114, 1, 4, 12, 2, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(6, 6)).setFixedLength(6)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lpsNetworkPortMonitorAnalyzerAddress.setStatus('mandatory')
lpsNetworkPortMonitorStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 114, 1, 4, 12, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("valid", 1), ("invalid", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lpsNetworkPortMonitorStatus.setStatus('mandatory')
lpsTokenRingPortCount = MibScalar((1, 3, 6, 1, 4, 1, 114, 1, 4, 13, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpsTokenRingPortCount.setStatus('mandatory')
lpsTokenRingPortTable = MibTable((1, 3, 6, 1, 4, 1, 114, 1, 4, 13, 2), )
if mibBuilder.loadTexts: lpsTokenRingPortTable.setStatus('mandatory')
lpsTokenRingPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 114, 1, 4, 13, 2, 1), ).setIndexNames((0, "LANPLEX-SYSTEMS-MIB-1-2-2", "lpsTokenRingPortIndex"))
if mibBuilder.loadTexts: lpsTokenRingPortEntry.setStatus('mandatory')
lpsTokenRingPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 114, 1, 4, 13, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpsTokenRingPortIndex.setStatus('mandatory')
lpsTokenRingPortIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 114, 1, 4, 13, 2, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpsTokenRingPortIfIndex.setStatus('mandatory')
lpsTokenRingPortLabel = MibTableColumn((1, 3, 6, 1, 4, 1, 114, 1, 4, 13, 2, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 31))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lpsTokenRingPortLabel.setStatus('mandatory')
lpsTokenRingPortInsertStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 114, 1, 4, 13, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("inserted", 1), ("deinserted", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpsTokenRingPortInsertStatus.setStatus('mandatory')
lpsTokenRingPortType = MibTableColumn((1, 3, 6, 1, 4, 1, 114, 1, 4, 13, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("rj45", 1), ("other", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpsTokenRingPortType.setStatus('mandatory')
lpsTokenRingPortMode = MibTableColumn((1, 3, 6, 1, 4, 1, 114, 1, 4, 13, 2, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("station", 1), ("lobe", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lpsTokenRingPortMode.setStatus('mandatory')
lpsTokenRingPortSpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 114, 1, 4, 13, 2, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("fourMegabit", 1), ("sixteenMegabit", 2), ("sixteenMegabitETR", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lpsTokenRingPortSpeed.setStatus('mandatory')
lpsTokenRingPortLineErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 114, 1, 4, 13, 2, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpsTokenRingPortLineErrors.setStatus('mandatory')
lpsTokenRingPortBurstErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 114, 1, 4, 13, 2, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpsTokenRingPortBurstErrors.setStatus('mandatory')
lpsTokenRingPortACErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 114, 1, 4, 13, 2, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpsTokenRingPortACErrors.setStatus('mandatory')
lpsTokenRingPortAbortTransErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 114, 1, 4, 13, 2, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpsTokenRingPortAbortTransErrors.setStatus('mandatory')
lpsTokenRingPortInternalErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 114, 1, 4, 13, 2, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpsTokenRingPortInternalErrors.setStatus('mandatory')
lpsTokenRingPortLostFrameErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 114, 1, 4, 13, 2, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpsTokenRingPortLostFrameErrors.setStatus('mandatory')
lpsTokenRingPortReceiveCongestionErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 114, 1, 4, 13, 2, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpsTokenRingPortReceiveCongestionErrors.setStatus('mandatory')
lpsTokenRingPortFrameCopiedErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 114, 1, 4, 13, 2, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpsTokenRingPortFrameCopiedErrors.setStatus('mandatory')
lpsTokenRingPortTokenErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 114, 1, 4, 13, 2, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpsTokenRingPortTokenErrors.setStatus('mandatory')
lpsTokenRingPortSoftErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 114, 1, 4, 13, 2, 1, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpsTokenRingPortSoftErrors.setStatus('mandatory')
lpsTokenRingPortHardErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 114, 1, 4, 13, 2, 1, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpsTokenRingPortHardErrors.setStatus('mandatory')
lpsTokenRingPortTransmitBeacons = MibTableColumn((1, 3, 6, 1, 4, 1, 114, 1, 4, 13, 2, 1, 19), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpsTokenRingPortTransmitBeacons.setStatus('mandatory')
lpsTokenRingPortLobeWires = MibTableColumn((1, 3, 6, 1, 4, 1, 114, 1, 4, 13, 2, 1, 20), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpsTokenRingPortLobeWires.setStatus('mandatory')
lpsTokenRingPortRemoves = MibTableColumn((1, 3, 6, 1, 4, 1, 114, 1, 4, 13, 2, 1, 21), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpsTokenRingPortRemoves.setStatus('mandatory')
lpsTokenRingPortSingles = MibTableColumn((1, 3, 6, 1, 4, 1, 114, 1, 4, 13, 2, 1, 22), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpsTokenRingPortSingles.setStatus('mandatory')
lpsTokenRingPortFreqErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 114, 1, 4, 13, 2, 1, 23), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpsTokenRingPortFreqErrors.setStatus('optional')
lpsTokenRingPortRingStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 114, 1, 4, 13, 2, 1, 24), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpsTokenRingPortRingStatus.setStatus('mandatory')
lpsSystemOverTemperatureEvent = NotificationType((1, 3, 6, 1, 4, 1, 114, 1, 4) + (0,1)).setObjects(("LANPLEX-SYSTEMS-MIB-1-2-2", "lpsSystemOvertemperature"))
lpsPowerSupplyFailureEvent = NotificationType((1, 3, 6, 1, 4, 1, 114, 1, 4) + (0,2)).setObjects(("LANPLEX-SYSTEMS-MIB-1-2-2", "lpsPowerSupplyStatusIndex"), ("LANPLEX-SYSTEMS-MIB-1-2-2", "lpsPowerSupplyStatus"), ("LANPLEX-SYSTEMS-MIB-1-2-2", "lpsPowerSupplyStatusSupported"))
lpsChassisSlotOverTemperatureEvent = NotificationType((1, 3, 6, 1, 4, 1, 114, 1, 4) + (0,3)).setObjects(("LANPLEX-SYSTEMS-MIB-1-2-2", "lpsSlotIndex"), ("LANPLEX-SYSTEMS-MIB-1-2-2", "lpsSlotBoardType"), ("LANPLEX-SYSTEMS-MIB-1-2-2", "lpsSlotBoardRevision"), ("LANPLEX-SYSTEMS-MIB-1-2-2", "lpsSlotBoardStatus"), ("LANPLEX-SYSTEMS-MIB-1-2-2", "lpsSlotOvertemperature"))
lpsChassisSlotInsertEvent = NotificationType((1, 3, 6, 1, 4, 1, 114, 1, 4) + (0,4)).setObjects(("LANPLEX-SYSTEMS-MIB-1-2-2", "lpsSlotIndex"), ("LANPLEX-SYSTEMS-MIB-1-2-2", "lpsSlotBoardType"), ("LANPLEX-SYSTEMS-MIB-1-2-2", "lpsSlotBoardRevision"))
lpsChassisSlotExtractEvent = NotificationType((1, 3, 6, 1, 4, 1, 114, 1, 4) + (0,5)).setObjects(("LANPLEX-SYSTEMS-MIB-1-2-2", "lpsSlotIndex"))
lpsBridgeAddressThresholdEvent = NotificationType((1, 3, 6, 1, 4, 1, 114, 1, 4) + (0,6)).setObjects(("LANPLEX-SYSTEMS-MIB-1-2-2", "lpsBridgeIndex"))
lpsSystemFanFailureEvent = NotificationType((1, 3, 6, 1, 4, 1, 114, 1, 4) + (0,7)).setObjects(("LANPLEX-SYSTEMS-MIB-1-2-2", "lpsSystemFanFailure"))
mibBuilder.exportSymbols("LANPLEX-SYSTEMS-MIB-1-2-2", lpsBridgePortReceiveOtherDiscards=lpsBridgePortReceiveOtherDiscards, lpsControlPanel=lpsControlPanel, lpsBridgePortAddressStaticPort=lpsBridgePortAddressStaticPort, lpsChassisSlotExtractEvent=lpsChassisSlotExtractEvent, lpsTokenRingPortLineErrors=lpsTokenRingPortLineErrors, lpsSystemMemorySize=lpsSystemMemorySize, lpsSmtFddiMacBeaconSmtIndex=lpsSmtFddiMacBeaconSmtIndex, lpsSmtFddiMacRateFrameReceiveRate=lpsSmtFddiMacRateFrameReceiveRate, lpsTokenRingPortSpeed=lpsTokenRingPortSpeed, lpsPowerSupplyFailureEvent=lpsPowerSupplyFailureEvent, lpsBridgePortPairTable=lpsBridgePortPairTable, lpsEthernetPortRateIndex=lpsEthernetPortRateIndex, lpsSmtFddiPortLocationType=lpsSmtFddiPortLocationType, lpsSystemSnmpRevision=lpsSystemSnmpRevision, lpsNetworkAnalyzerBridgeIndex=lpsNetworkAnalyzerBridgeIndex, lpsEthernetPortLabel=lpsEthernetPortLabel, lpsSlotBoardName=lpsSlotBoardName, lpsSmtFddiMacRatePeakFrameReceiveRate=lpsSmtFddiMacRatePeakFrameReceiveRate, lpsSmtFddiMacBeaconTable=lpsSmtFddiMacBeaconTable, lpsSystemProtocolMask=lpsSystemProtocolMask, lpsAgentTrapDestinationTable=lpsAgentTrapDestinationTable, lpsSmtFddiMacRateEntry=lpsSmtFddiMacRateEntry, lpsBridgePortReceiveMulticastLimit=lpsBridgePortReceiveMulticastLimit, lpsBridgePortAddressIndex=lpsBridgePortAddressIndex, lpsBridgePortReceiveUnknownDiscards=lpsBridgePortReceiveUnknownDiscards, lpsAgentRequestMaxAge=lpsAgentRequestMaxAge, lpsTokenRingPortTransmitBeacons=lpsTokenRingPortTransmitBeacons, lps6004TMM=lps6004TMM, lpsSmtFddiMacBeaconHistory=lpsSmtFddiMacBeaconHistory, lpsSmtFddiMacRatePeakByteReceiveRate=lpsSmtFddiMacRatePeakByteReceiveRate, lpsSystemFlashMemorySize=lpsSystemFlashMemorySize, lpsEthernetPortRateFrameReceiveRate=lpsEthernetPortRateFrameReceiveRate, lpsEthernetPortIfIndex=lpsEthernetPortIfIndex, lpsTokenRingPortLobeWires=lpsTokenRingPortLobeWires, lpsSystemOverTemperatureEvent=lpsSystemOverTemperatureEvent, lpsTokenRingPortInternalErrors=lpsTokenRingPortInternalErrors, lpsNetworkPortMonitorTable=lpsNetworkPortMonitorTable, lpsTokenRingPortRemoves=lpsTokenRingPortRemoves, lpsInterfaceLocationType=lpsInterfaceLocationType, lpsAgentTrapDestinationAddress=lpsAgentTrapDestinationAddress, lpsSystemFanFailureEvent=lpsSystemFanFailureEvent, lpsBridgeAddressThresholdEvent=lpsBridgeAddressThresholdEvent, lps6004ESM=lps6004ESM, lpsEthernetPortRatePeakFrameReceiveRate=lpsEthernetPortRatePeakFrameReceiveRate, lpsBridgePortTable=lpsBridgePortTable, lpsBridgePortFloodedUnicastFrames=lpsBridgePortFloodedUnicastFrames, lpsEthernetPortLinkStatus=lpsEthernetPortLinkStatus, lps6004=lps6004, lpsEthernetPortRateByteReceiveRate=lpsEthernetPortRateByteReceiveRate, lpsAgentTrapDestinationTableEntry=lpsAgentTrapDestinationTableEntry, lpsNetworkPortMonitorStatus=lpsNetworkPortMonitorStatus, lpsBridgePortReceiveAllPathFilteredFrames=lpsBridgePortReceiveAllPathFilteredFrames, lpsSlotFddiPortCount=lpsSlotFddiPortCount, lpsBridgePortForwardedMulticastOctets=lpsBridgePortForwardedMulticastOctets, lpsTokenRingPortLostFrameErrors=lpsTokenRingPortLostFrameErrors, lpsBridgePortSpanningTreeFrameReceivedCounts=lpsBridgePortSpanningTreeFrameReceivedCounts, lpsSlotTable=lpsSlotTable, lps2016=lps2016, lpsControlPanelText=lpsControlPanelText, lpsSlotEntry=lpsSlotEntry, lpsNetworkAnalyzerStatus=lpsNetworkAnalyzerStatus, lpsSystemNvMemorySize=lpsSystemNvMemorySize, lpsAgentTrapDescriptionTable=lpsAgentTrapDescriptionTable, lpsBridgePortReceiveBlockedDiscards=lpsBridgePortReceiveBlockedDiscards, lpsEthernetPortRatePeakFrameTransmitRate=lpsEthernetPortRatePeakFrameTransmitRate, lpsSnmp=lpsSnmp, lpsBridgePortPairReceivePortIndex=lpsBridgePortPairReceivePortIndex, lpsSmtFddiPortLocationLocalIndex=lpsSmtFddiPortLocationLocalIndex, lpsEthernetPortRateTable=lpsEthernetPortRateTable, lpsIpRouter=lpsIpRouter, lpsSlot=lpsSlot, lps6004TRSM=lps6004TRSM, lpsBridgePortAddressIsStatic=lpsBridgePortAddressIsStatic, lpsEthernetPort=lpsEthernetPort, lpsPowerSupplyStatusSupported=lpsPowerSupplyStatusSupported, lpsTokenRingPortMode=lpsTokenRingPortMode, lpsEthernetPortEntry=lpsEthernetPortEntry, lpsTokenRingPortInsertStatus=lpsTokenRingPortInsertStatus, lpsControlPanelHardwareRevision=lpsControlPanelHardwareRevision, lpsBridgeCount=lpsBridgeCount, lpsSlotEthernetPortCount=lpsSlotEthernetPortCount, lpsBridgePortTransmitMulticastPathFilteredFrames=lpsBridgePortTransmitMulticastPathFilteredFrames, lpsBridgeAddressTablePeakCount=lpsBridgeAddressTablePeakCount, lps6000=lps6000, lpsSlotBoardRevision=lpsSlotBoardRevision, lps6012Chassis=lps6012Chassis, lpsSystemType=lpsSystemType, lpsTokenRingPortIndex=lpsTokenRingPortIndex, lpsSystemName=lpsSystemName, lpsPowerSupplyStatus=lpsPowerSupplyStatus, lpsSnmpInternalAgentTrapMask=lpsSnmpInternalAgentTrapMask, lpsBridgeMode=lpsBridgeMode, lpsSnmpInternalProxyEntry=lpsSnmpInternalProxyEntry, lps6012TRSM=lps6012TRSM, lpsAgentTrapDestinationTrapMask=lpsAgentTrapDestinationTrapMask, lpsSmtFddiPortLabel=lpsSmtFddiPortLabel, lpsChassisSlotOverTemperatureEvent=lpsChassisSlotOverTemperatureEvent, lpsNetworkAnalyzerTable=lpsNetworkAnalyzerTable, lps6012=lps6012, lpsEthernetPortRatePeakByteTransmitRate=lpsEthernetPortRatePeakByteTransmitRate, lpsSmtFddiMacBeaconIndex=lpsSmtFddiMacBeaconIndex, lpsTokenRingPortTable=lpsTokenRingPortTable, lpsSmtFddiMacRateTable=lpsSmtFddiMacRateTable, lps6012TMM=lps6012TMM, lpsBridgeAddressTableSize=lpsBridgeAddressTableSize, lpsBridgePortAddressTable=lpsBridgePortAddressTable, lpsBridgePortAddressAge=lpsBridgePortAddressAge, lpsTokenRingPortFreqErrors=lpsTokenRingPortFreqErrors, lpsSlotBoardStatus=lpsSlotBoardStatus, lpsBridgeTrFddiTranslationMode=lpsBridgeTrFddiTranslationMode, lpsSystem=lpsSystem, lpsNetworkPortMonitorBridgePortIndex=lpsNetworkPortMonitorBridgePortIndex, lpsTokenRingPortAbortTransErrors=lpsTokenRingPortAbortTransErrors, lpsBridgePortIfIndex=lpsBridgePortIfIndex, lpsBridgePortForwardedUnicastOctets=lpsBridgePortForwardedUnicastOctets, lpsBridgePortTransmitAllPathFilteredFrames=lpsBridgePortTransmitAllPathFilteredFrames, lpsSlotOvertemperature=lpsSlotOvertemperature, lpsPowerSupplyStatusTable=lpsPowerSupplyStatusTable, lpsEthernetPortRatePeakByteReceiveRate=lpsEthernetPortRatePeakByteReceiveRate, lpsEthernetPortTable=lpsEthernetPortTable, lpsControlPanelSoftwareRevision=lpsControlPanelSoftwareRevision, lpsBridgeIndex=lpsBridgeIndex, lpsSmtFddiMacRateByteTransmitRate=lpsSmtFddiMacRateByteTransmitRate, lpsBridgeEntry=lpsBridgeEntry, lpsNetworkMonitor=lpsNetworkMonitor, lpsPowerSupplyCount=lpsPowerSupplyCount, lpsSmtFddiMacRateSmtIndex=lpsSmtFddiMacRateSmtIndex, lpsSmtFddiMacRatePeakByteTransmitRate=lpsSmtFddiMacRatePeakByteTransmitRate, lpsSmtFddiPortIndex=lpsSmtFddiPortIndex, lpsBridgePortEntry=lpsBridgePortEntry, synernetics=synernetics, lpsControlPanelLines=lpsControlPanelLines, lpsAgentTrapDestinationEntryStatus=lpsAgentTrapDestinationEntryStatus, lpsTokenRingPortIfIndex=lpsTokenRingPortIfIndex, lpsSystemBuildTime=lpsSystemBuildTime, lpsSnmpInternalProxyCommunity=lpsSnmpInternalProxyCommunity, lpsAgentRemoteSmtProxyRequestMaxAge=lpsAgentRemoteSmtProxyRequestMaxAge, lpsBridgePortPairForwardedToUnicastOctets=lpsBridgePortPairForwardedToUnicastOctets, lpsSnmpInternalAgentTrapDestinationMask=lpsSnmpInternalAgentTrapDestinationMask, lpsBridgeIpFragmentationEnabled=lpsBridgeIpFragmentationEnabled, lpsBridgePortAddressBridgeIndex=lpsBridgePortAddressBridgeIndex, lpsNetworkPortMonitorBridgeIndex=lpsNetworkPortMonitorBridgeIndex, lps6004System=lps6004System, lps6004Chassis=lps6004Chassis, lpsAgentTrapNumber=lpsAgentTrapNumber, lpsBridgePortAddressEntry=lpsBridgePortAddressEntry, lpsInterfaceLocationInterfaceType=lpsInterfaceLocationInterfaceType, lpsSmtFddiMacRatePeakFrameTransmitRate=lpsSmtFddiMacRatePeakFrameTransmitRate, lpsBridgePortPairBridgeIndex=lpsBridgePortPairBridgeIndex, lps6012EFSM=lps6012EFSM, lpsSnmpInternalProxyAgentId=lpsSnmpInternalProxyAgentId, lpsTokenRingPortBurstErrors=lpsTokenRingPortBurstErrors, lpsBridgePortBridgeIndex=lpsBridgePortBridgeIndex, lpsInterface=lpsInterface, lpsPowerSupplyStatusIndex=lpsPowerSupplyStatusIndex, lpsSnmpInternalProxyTable=lpsSnmpInternalProxyTable, lpsBridgePortAddressRemoteAddress=lpsBridgePortAddressRemoteAddress, lpsTokenRingPortACErrors=lpsTokenRingPortACErrors, lpsSmtFddiMacRateIndex=lpsSmtFddiMacRateIndex, lpsAgentProxyRemoteSmtEvents=lpsAgentProxyRemoteSmtEvents, lpsPowerSupply=lpsPowerSupply, lpsInterfaceLocationTable=lpsInterfaceLocationTable, lpsSmt=lpsSmt, lps6004EFSM=lps6004EFSM, lpsBridgePortForwardedMulticastFrames=lpsBridgePortForwardedMulticastFrames, lpsBridgeStpGroupAddress=lpsBridgeStpGroupAddress, lpsNetworkPortMonitorAnalyzerAddress=lpsNetworkPortMonitorAnalyzerAddress, lpsBridgePortReceiveSecurityDiscards=lpsBridgePortReceiveSecurityDiscards, lpsTokenRingPortSingles=lpsTokenRingPortSingles, lpsTokenRingPortRingStatus=lpsTokenRingPortRingStatus, lpsSystemOvertemperature=lpsSystemOvertemperature, lanplexSystemsMib=lanplexSystemsMib, lpsEthernetPortCount=lpsEthernetPortCount, lpsTokenRingPort=lpsTokenRingPort, lps6012System=lps6012System, lpsSmtFddiPortSmtIndex=lpsSmtFddiPortSmtIndex, lpsBridgeBackbonePort=lpsBridgeBackbonePort, lpsTokenRingPortReceiveCongestionErrors=lpsTokenRingPortReceiveCongestionErrors, lpsSystemId=lpsSystemId, lpsTokenRingPortEntry=lpsTokenRingPortEntry, lpsChassisSlotInsertEvent=lpsChassisSlotInsertEvent, lpsTokenRingPortType=lpsTokenRingPortType, lpsInterfaceLocationIfIndex=lpsInterfaceLocationIfIndex, lpsBridgePortCount=lpsBridgePortCount, lpsBridgePortAddressAction=lpsBridgePortAddressAction, lpsBridgePortPairEntry=lpsBridgePortPairEntry, lpsAgentTrapDescriptionTableEntry=lpsAgentTrapDescriptionTableEntry, lpsSmtFddiMacRateFrameTransmitRate=lpsSmtFddiMacRateFrameTransmitRate, lpsBridgePortAddressPortIndex=lpsBridgePortAddressPortIndex, lpsNetworkPortMonitorTableEntry=lpsNetworkPortMonitorTableEntry, lpsBridge=lpsBridge, lpsPowerSupplyStatusEntry=lpsPowerSupplyStatusEntry, lpsSnmpProxyInternalTraps=lpsSnmpProxyInternalTraps, lpsAgent=lpsAgent, lpsTokenRingPortFrameCopiedErrors=lpsTokenRingPortFrameCopiedErrors, lpsBridgePortReceiveErrorDiscards=lpsBridgePortReceiveErrorDiscards, lpsSystemFanFailure=lpsSystemFanFailure, lpsSlotBoardNameAbbrev=lpsSlotBoardNameAbbrev, lpsBridgePortTransmitBlockedDiscards=lpsBridgePortTransmitBlockedDiscards, lpsSystemSoftwareRevision=lpsSystemSoftwareRevision, lpsBridgePortAddressType=lpsBridgePortAddressType, lpsSlotTokenRingPortCount=lpsSlotTokenRingPortCount, lpsInterfaceLocationEntry=lpsInterfaceLocationEntry, lpsSmtFddiPortLocationTypeIndex=lpsSmtFddiPortLocationTypeIndex, lpsTokenRingPortTokenErrors=lpsTokenRingPortTokenErrors, lpsEthernetPortRateByteTransmitRate=lpsEthernetPortRateByteTransmitRate, lpsSnmpProxyInternalRequests=lpsSnmpProxyInternalRequests, lpsBridgePortFloodedUnicastOctets=lpsBridgePortFloodedUnicastOctets, lpsSystemAction=lpsSystemAction, lpsSystemHardwareRevision=lpsSystemHardwareRevision, lpsAgentTrapEnterprise=lpsAgentTrapEnterprise, lpsNetworkAnalyzerBridgePortIndex=lpsNetworkAnalyzerBridgePortIndex, lpsProducts=lpsProducts, lpsSlotIndex=lpsSlotIndex, lpsSlotBoardType=lpsSlotBoardType, lpsSmtCount=lpsSmtCount, lpsBridgePortIndex=lpsBridgePortIndex, lpsBridgePortReceiveMulticastLimitExceededDiscards=lpsBridgePortReceiveMulticastLimitExceededDiscards, lpsSystemManufacturer=lpsSystemManufacturer, lpsAgentProxyRemoteSmtRequests=lpsAgentProxyRemoteSmtRequests, lpsBridgePortReceiveMulticastPathFilteredFrames=lpsBridgePortReceiveMulticastPathFilteredFrames, lpsSmtFddiMacBeaconEntry=lpsSmtFddiMacBeaconEntry, lpsSlotFddiMacCount=lpsSlotFddiMacCount, lpsBridgeStpEnable=lpsBridgeStpEnable, lpsSnmpInternalProxyAccessClass=lpsSnmpInternalProxyAccessClass, lpsBridgePortPairForwardedToUnicastFrames=lpsBridgePortPairForwardedToUnicastFrames, lpsSystemCurrentSnmpMode=lpsSystemCurrentSnmpMode, lpsEthernetPortType=lpsEthernetPortType, lps2000=lps2000, lanplex=lanplex, lpsBridgePortSameSegmentDiscards=lpsBridgePortSameSegmentDiscards, lpsBridgeTable=lpsBridgeTable, lpsSnmpAgentId=lpsSnmpAgentId, lpsBridgeAddressThreshold=lpsBridgeAddressThreshold, lpsNetworkAnalyzerPhysicalAddress=lpsNetworkAnalyzerPhysicalAddress, lpsNetworkAnalyzerTableEntry=lpsNetworkAnalyzerTableEntry, lpsInterfaceLocationTypeIndex=lpsInterfaceLocationTypeIndex, lpsEthernetPortRateFrameTransmitRate=lpsEthernetPortRateFrameTransmitRate, lpsSmtFddiMacRateByteReceiveRate=lpsSmtFddiMacRateByteReceiveRate, lpsAgentTrapDescriptionIndex=lpsAgentTrapDescriptionIndex, lpsSmtFddiPortTable=lpsSmtFddiPortTable, lpsTokenRingPortSoftErrors=lpsTokenRingPortSoftErrors, lpsSlotCount=lpsSlotCount, lpsControlPanelColumns=lpsControlPanelColumns, lpsInterfaceLocationLocalIndex=lpsInterfaceLocationLocalIndex, lpsEthernetPortIndex=lpsEthernetPortIndex, lss2200=lss2200, lps2500=lps2500, lpsAgentTrapDestinationAddressType=lpsAgentTrapDestinationAddressType, lpsTokenRingPortLabel=lpsTokenRingPortLabel, lpsBridgePortReceiveMulticastLimitExceededs=lpsBridgePortReceiveMulticastLimitExceededs, lpsEthernetPortRateEntry=lpsEthernetPortRateEntry, lpsTokenRingPortHardErrors=lpsTokenRingPortHardErrors, lpsSystemRequestedSnmpMode=lpsSystemRequestedSnmpMode)
mibBuilder.exportSymbols("LANPLEX-SYSTEMS-MIB-1-2-2", lpsSmtFddiPortEntry=lpsSmtFddiPortEntry, lpsBridgeAddressTableCount=lpsBridgeAddressTableCount, lpsBridgePortForwardedUnicastFrames=lpsBridgePortForwardedUnicastFrames, lpsBridgePortPairDestinationPortIndex=lpsBridgePortPairDestinationPortIndex, lpsSnmpInternalProxyRequestMaxAge=lpsSnmpInternalProxyRequestMaxAge, lps6012ESM=lps6012ESM, lpsTokenRingPortCount=lpsTokenRingPortCount)
