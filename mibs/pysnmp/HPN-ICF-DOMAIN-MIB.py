#
# PySNMP MIB module HPN-ICF-DOMAIN-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/HPN-ICF-DOMAIN-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 19:25:38 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, OctetString, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "Integer", "OctetString", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueRangeConstraint, SingleValueConstraint, ValueSizeConstraint, ConstraintsUnion, ConstraintsIntersection = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueRangeConstraint", "SingleValueConstraint", "ValueSizeConstraint", "ConstraintsUnion", "ConstraintsIntersection")
hpnicfCommon, = mibBuilder.importSymbols("HPN-ICF-OID-MIB", "hpnicfCommon")
InetAddress, InetAddressType = mibBuilder.importSymbols("INET-ADDRESS-MIB", "InetAddress", "InetAddressType")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
Bits, ObjectIdentity, MibIdentifier, NotificationType, Unsigned32, Counter32, MibScalar, MibTable, MibTableRow, MibTableColumn, ModuleIdentity, TimeTicks, iso, Counter64, Integer32, IpAddress, Gauge32 = mibBuilder.importSymbols("SNMPv2-SMI", "Bits", "ObjectIdentity", "MibIdentifier", "NotificationType", "Unsigned32", "Counter32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "ModuleIdentity", "TimeTicks", "iso", "Counter64", "Integer32", "IpAddress", "Gauge32")
TextualConvention, TruthValue, DisplayString, RowStatus = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "TruthValue", "DisplayString", "RowStatus")
hpnicfDomain = ModuleIdentity((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 46))
if mibBuilder.loadTexts: hpnicfDomain.setLastUpdated('201210150000Z')
if mibBuilder.loadTexts: hpnicfDomain.setOrganization('')
class HpnicfModeOfDomainScheme(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))
    namedValues = NamedValues(("none", 1), ("local", 2), ("radius", 3), ("tacacs", 4), ("ldap", 5))

class HpnicfAAATypeDomainScheme(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))
    namedValues = NamedValues(("accounting", 1), ("authentication", 2), ("authorization", 3), ("none", 4))

class HpnicfAccessModeofDomainScheme(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12))
    namedValues = NamedValues(("default", 1), ("login", 2), ("lanAccess", 3), ("portal", 4), ("ppp", 5), ("gcm", 6), ("dvpn", 7), ("dhcp", 8), ("voice", 9), ("superauthen", 10), ("command", 11), ("reserved", 12))

hpnicfDomainControl = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 46, 1))
hpnicfDomainDefault = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 46, 1, 1), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpnicfDomainDefault.setStatus('current')
hpnicfDomainTables = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 46, 2))
hpnicfDomainInfoTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 46, 2, 1), )
if mibBuilder.loadTexts: hpnicfDomainInfoTable.setStatus('current')
hpnicfDomainInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 46, 2, 1, 1), ).setIndexNames((0, "HPN-ICF-DOMAIN-MIB", "hpnicfDomainName"))
if mibBuilder.loadTexts: hpnicfDomainInfoEntry.setStatus('current')
hpnicfDomainName = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 46, 2, 1, 1, 1), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 255)))
if mibBuilder.loadTexts: hpnicfDomainName.setStatus('current')
hpnicfDomainState = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 46, 2, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("active", 1), ("block", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfDomainState.setStatus('current')
hpnicfDomainMaxAccessNum = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 46, 2, 1, 1, 3), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfDomainMaxAccessNum.setStatus('current')
hpnicfDomainVlanAssignMode = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 46, 2, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("integer", 1), ("string", 2), ("vlanlist", 3)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfDomainVlanAssignMode.setStatus('current')
hpnicfDomainIdleCutEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 46, 2, 1, 1, 5), TruthValue()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfDomainIdleCutEnable.setStatus('current')
hpnicfDomainIdleCutMaxTime = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 46, 2, 1, 1, 6), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfDomainIdleCutMaxTime.setStatus('current')
hpnicfDomainIdleCutMinFlow = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 46, 2, 1, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 10240000))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfDomainIdleCutMinFlow.setStatus('current')
hpnicfDomainMessengerEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 46, 2, 1, 1, 8), TruthValue()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfDomainMessengerEnable.setStatus('current')
hpnicfDomainMessengerLimitTime = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 46, 2, 1, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 60))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfDomainMessengerLimitTime.setStatus('current')
hpnicfDomainMessengerSpanTime = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 46, 2, 1, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(5, 60))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfDomainMessengerSpanTime.setStatus('current')
hpnicfDomainSelfServiceEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 46, 2, 1, 1, 11), TruthValue()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfDomainSelfServiceEnable.setStatus('current')
hpnicfDomainSelfServiceURL = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 46, 2, 1, 1, 12), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 64))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfDomainSelfServiceURL.setStatus('current')
hpnicfDomainAccFailureAction = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 46, 2, 1, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("ignore", 1), ("reject", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfDomainAccFailureAction.setStatus('current')
hpnicfDomainRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 46, 2, 1, 1, 14), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfDomainRowStatus.setStatus('current')
hpnicfDomainCurrentAccessNum = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 46, 2, 1, 1, 15), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfDomainCurrentAccessNum.setStatus('current')
hpnicfDomainIdleCutTime = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 46, 2, 1, 1, 16), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfDomainIdleCutTime.setStatus('current')
hpnicfDomainSchemeTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 46, 2, 2), )
if mibBuilder.loadTexts: hpnicfDomainSchemeTable.setStatus('current')
hpnicfDomainSchemeEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 46, 2, 2, 1), ).setIndexNames((0, "HPN-ICF-DOMAIN-MIB", "hpnicfDomainName"), (0, "HPN-ICF-DOMAIN-MIB", "hpnicfDomainSchemeIndex"))
if mibBuilder.loadTexts: hpnicfDomainSchemeEntry.setStatus('current')
hpnicfDomainSchemeIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 46, 2, 2, 1, 1), Integer32())
if mibBuilder.loadTexts: hpnicfDomainSchemeIndex.setStatus('current')
hpnicfDomainSchemeMode = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 46, 2, 2, 1, 2), HpnicfModeOfDomainScheme()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfDomainSchemeMode.setStatus('current')
hpnicfDomainAuthSchemeName = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 46, 2, 2, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfDomainAuthSchemeName.setStatus('current')
hpnicfDomainAcctSchemeName = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 46, 2, 2, 1, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfDomainAcctSchemeName.setStatus('current')
hpnicfDomainSchemeRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 46, 2, 2, 1, 5), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfDomainSchemeRowStatus.setStatus('current')
hpnicfDomainSchemeAAAType = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 46, 2, 2, 1, 6), HpnicfAAATypeDomainScheme()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfDomainSchemeAAAType.setStatus('current')
hpnicfDomainSchemeAAAName = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 46, 2, 2, 1, 7), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfDomainSchemeAAAName.setStatus('current')
hpnicfDomainSchemeAccessMode = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 46, 2, 2, 1, 8), HpnicfAccessModeofDomainScheme()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfDomainSchemeAccessMode.setStatus('current')
hpnicfDomainIpPoolTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 46, 2, 3), )
if mibBuilder.loadTexts: hpnicfDomainIpPoolTable.setStatus('current')
hpnicfDomainIpPoolEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 46, 2, 3, 1), ).setIndexNames((0, "HPN-ICF-DOMAIN-MIB", "hpnicfDomainName"), (0, "HPN-ICF-DOMAIN-MIB", "hpnicfDomainIpPoolNum"))
if mibBuilder.loadTexts: hpnicfDomainIpPoolEntry.setStatus('current')
hpnicfDomainIpPoolNum = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 46, 2, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 99)))
if mibBuilder.loadTexts: hpnicfDomainIpPoolNum.setStatus('current')
hpnicfDomainIpPoolLowIpAddrType = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 46, 2, 3, 1, 2), InetAddressType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfDomainIpPoolLowIpAddrType.setStatus('current')
hpnicfDomainIpPoolLowIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 46, 2, 3, 1, 3), InetAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfDomainIpPoolLowIpAddr.setStatus('current')
hpnicfDomainIpPoolLen = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 46, 2, 3, 1, 4), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfDomainIpPoolLen.setStatus('current')
hpnicfDomainIpPoolRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 46, 2, 3, 1, 5), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfDomainIpPoolRowStatus.setStatus('current')
mibBuilder.exportSymbols("HPN-ICF-DOMAIN-MIB", HpnicfAccessModeofDomainScheme=HpnicfAccessModeofDomainScheme, hpnicfDomainAccFailureAction=hpnicfDomainAccFailureAction, HpnicfModeOfDomainScheme=HpnicfModeOfDomainScheme, hpnicfDomainIdleCutEnable=hpnicfDomainIdleCutEnable, hpnicfDomainInfoTable=hpnicfDomainInfoTable, hpnicfDomainIdleCutTime=hpnicfDomainIdleCutTime, hpnicfDomainMaxAccessNum=hpnicfDomainMaxAccessNum, hpnicfDomainSchemeEntry=hpnicfDomainSchemeEntry, hpnicfDomainAcctSchemeName=hpnicfDomainAcctSchemeName, hpnicfDomainMessengerEnable=hpnicfDomainMessengerEnable, hpnicfDomainName=hpnicfDomainName, hpnicfDomainIpPoolLen=hpnicfDomainIpPoolLen, hpnicfDomainSchemeAAAType=hpnicfDomainSchemeAAAType, hpnicfDomainIpPoolEntry=hpnicfDomainIpPoolEntry, hpnicfDomainIdleCutMinFlow=hpnicfDomainIdleCutMinFlow, hpnicfDomainControl=hpnicfDomainControl, hpnicfDomainSchemeMode=hpnicfDomainSchemeMode, hpnicfDomainSchemeAAAName=hpnicfDomainSchemeAAAName, hpnicfDomainState=hpnicfDomainState, PYSNMP_MODULE_ID=hpnicfDomain, hpnicfDomainRowStatus=hpnicfDomainRowStatus, hpnicfDomainSchemeIndex=hpnicfDomainSchemeIndex, hpnicfDomainVlanAssignMode=hpnicfDomainVlanAssignMode, hpnicfDomainSelfServiceURL=hpnicfDomainSelfServiceURL, hpnicfDomainCurrentAccessNum=hpnicfDomainCurrentAccessNum, hpnicfDomainInfoEntry=hpnicfDomainInfoEntry, hpnicfDomainIdleCutMaxTime=hpnicfDomainIdleCutMaxTime, HpnicfAAATypeDomainScheme=HpnicfAAATypeDomainScheme, hpnicfDomainIpPoolNum=hpnicfDomainIpPoolNum, hpnicfDomainSchemeTable=hpnicfDomainSchemeTable, hpnicfDomainDefault=hpnicfDomainDefault, hpnicfDomainIpPoolLowIpAddrType=hpnicfDomainIpPoolLowIpAddrType, hpnicfDomainAuthSchemeName=hpnicfDomainAuthSchemeName, hpnicfDomainMessengerLimitTime=hpnicfDomainMessengerLimitTime, hpnicfDomainSchemeRowStatus=hpnicfDomainSchemeRowStatus, hpnicfDomainSelfServiceEnable=hpnicfDomainSelfServiceEnable, hpnicfDomainMessengerSpanTime=hpnicfDomainMessengerSpanTime, hpnicfDomainTables=hpnicfDomainTables, hpnicfDomainSchemeAccessMode=hpnicfDomainSchemeAccessMode, hpnicfDomainIpPoolTable=hpnicfDomainIpPoolTable, hpnicfDomainIpPoolRowStatus=hpnicfDomainIpPoolRowStatus, hpnicfDomainIpPoolLowIpAddr=hpnicfDomainIpPoolLowIpAddr, hpnicfDomain=hpnicfDomain)
