#
# PySNMP MIB module IT-WATCHDOGS-V4-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/IT-WATCHDOGS-V4-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 19:46:34 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, OctetString, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "Integer", "OctetString", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueSizeConstraint, ConstraintsIntersection, ValueRangeConstraint, SingleValueConstraint, ConstraintsUnion = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueSizeConstraint", "ConstraintsIntersection", "ValueRangeConstraint", "SingleValueConstraint", "ConstraintsUnion")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
ObjectIdentity, Integer32, Gauge32, ModuleIdentity, IpAddress, Bits, MibScalar, MibTable, MibTableRow, MibTableColumn, Counter32, Unsigned32, MibIdentifier, enterprises, NotificationType, TimeTicks, Counter64, iso = mibBuilder.importSymbols("SNMPv2-SMI", "ObjectIdentity", "Integer32", "Gauge32", "ModuleIdentity", "IpAddress", "Bits", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Counter32", "Unsigned32", "MibIdentifier", "enterprises", "NotificationType", "TimeTicks", "Counter64", "iso")
DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention")
itwatchdogs = ModuleIdentity((1, 3, 6, 1, 4, 1, 17373))
itwatchdogs.setRevisions(('2012-09-11 00:00',))
if mibBuilder.loadTexts: itwatchdogs.setLastUpdated('201209110000Z')
if mibBuilder.loadTexts: itwatchdogs.setOrganization('I.T. Watchdogs')
blackbird = MibIdentifier((1, 3, 6, 1, 4, 1, 17373, 4))
watchdog100 = MibIdentifier((1, 3, 6, 1, 4, 1, 17373, 4, 1))
deviceInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 17373, 4, 1, 1))
productTitle = MibScalar((1, 3, 6, 1, 4, 1, 17373, 4, 1, 1, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: productTitle.setStatus('current')
productVersion = MibScalar((1, 3, 6, 1, 4, 1, 17373, 4, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: productVersion.setStatus('current')
productFriendlyName = MibScalar((1, 3, 6, 1, 4, 1, 17373, 4, 1, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: productFriendlyName.setStatus('current')
productMacAddress = MibScalar((1, 3, 6, 1, 4, 1, 17373, 4, 1, 1, 4), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: productMacAddress.setStatus('current')
productUrl = MibScalar((1, 3, 6, 1, 4, 1, 17373, 4, 1, 1, 5), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: productUrl.setStatus('current')
deviceCount = MibScalar((1, 3, 6, 1, 4, 1, 17373, 4, 1, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: deviceCount.setStatus('current')
temperatureUnits = MibScalar((1, 3, 6, 1, 4, 1, 17373, 4, 1, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: temperatureUnits.setStatus('current')
internalTable = MibTable((1, 3, 6, 1, 4, 1, 17373, 4, 1, 2), )
if mibBuilder.loadTexts: internalTable.setStatus('current')
internalEntry = MibTableRow((1, 3, 6, 1, 4, 1, 17373, 4, 1, 2, 1), ).setIndexNames((0, "IT-WATCHDOGS-V4-MIB", "internalIndex"))
if mibBuilder.loadTexts: internalEntry.setStatus('current')
internalIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 17373, 4, 1, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: internalIndex.setStatus('current')
internalSerial = MibTableColumn((1, 3, 6, 1, 4, 1, 17373, 4, 1, 2, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: internalSerial.setStatus('current')
internalName = MibTableColumn((1, 3, 6, 1, 4, 1, 17373, 4, 1, 2, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: internalName.setStatus('current')
internalAvail = MibTableColumn((1, 3, 6, 1, 4, 1, 17373, 4, 1, 2, 1, 4), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: internalAvail.setStatus('current')
internalTemp = MibTableColumn((1, 3, 6, 1, 4, 1, 17373, 4, 1, 2, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-40, 200))).setUnits('0.1 Degrees').setMaxAccess("readonly")
if mibBuilder.loadTexts: internalTemp.setStatus('current')
internalHumidity = MibTableColumn((1, 3, 6, 1, 4, 1, 17373, 4, 1, 2, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setUnits('%').setMaxAccess("readonly")
if mibBuilder.loadTexts: internalHumidity.setStatus('current')
internalDewPoint = MibTableColumn((1, 3, 6, 1, 4, 1, 17373, 4, 1, 2, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-40, 200))).setUnits('0.1 Degrees').setMaxAccess("readonly")
if mibBuilder.loadTexts: internalDewPoint.setStatus('current')
internalIO1 = MibTableColumn((1, 3, 6, 1, 4, 1, 17373, 4, 1, 2, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: internalIO1.setStatus('current')
internalIO2 = MibTableColumn((1, 3, 6, 1, 4, 1, 17373, 4, 1, 2, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: internalIO2.setStatus('current')
internalIO3 = MibTableColumn((1, 3, 6, 1, 4, 1, 17373, 4, 1, 2, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: internalIO3.setStatus('current')
internalIO4 = MibTableColumn((1, 3, 6, 1, 4, 1, 17373, 4, 1, 2, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: internalIO4.setStatus('current')
internalRelayState = MibTableColumn((1, 3, 6, 1, 4, 1, 17373, 4, 1, 2, 1, 12), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: internalRelayState.setStatus('current')
tempSensorTable = MibTable((1, 3, 6, 1, 4, 1, 17373, 4, 1, 4), )
if mibBuilder.loadTexts: tempSensorTable.setStatus('current')
tempSensorEntry = MibTableRow((1, 3, 6, 1, 4, 1, 17373, 4, 1, 4, 1), ).setIndexNames((0, "IT-WATCHDOGS-V4-MIB", "tempSensorIndex"))
if mibBuilder.loadTexts: tempSensorEntry.setStatus('current')
tempSensorIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 17373, 4, 1, 4, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tempSensorIndex.setStatus('current')
tempSensorSerial = MibTableColumn((1, 3, 6, 1, 4, 1, 17373, 4, 1, 4, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tempSensorSerial.setStatus('current')
tempSensorName = MibTableColumn((1, 3, 6, 1, 4, 1, 17373, 4, 1, 4, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tempSensorName.setStatus('current')
tempSensorAvail = MibTableColumn((1, 3, 6, 1, 4, 1, 17373, 4, 1, 4, 1, 4), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tempSensorAvail.setStatus('current')
tempSensorTemp = MibTableColumn((1, 3, 6, 1, 4, 1, 17373, 4, 1, 4, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-40, 200))).setUnits('0.1 Degrees').setMaxAccess("readonly")
if mibBuilder.loadTexts: tempSensorTemp.setStatus('current')
airFlowSensorTable = MibTable((1, 3, 6, 1, 4, 1, 17373, 4, 1, 5), )
if mibBuilder.loadTexts: airFlowSensorTable.setStatus('current')
airFlowSensorEntry = MibTableRow((1, 3, 6, 1, 4, 1, 17373, 4, 1, 5, 1), ).setIndexNames((0, "IT-WATCHDOGS-V4-MIB", "airFlowSensorIndex"))
if mibBuilder.loadTexts: airFlowSensorEntry.setStatus('current')
airFlowSensorIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 17373, 4, 1, 5, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: airFlowSensorIndex.setStatus('current')
airFlowSensorSerial = MibTableColumn((1, 3, 6, 1, 4, 1, 17373, 4, 1, 5, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airFlowSensorSerial.setStatus('current')
airFlowSensorName = MibTableColumn((1, 3, 6, 1, 4, 1, 17373, 4, 1, 5, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airFlowSensorName.setStatus('current')
airFlowSensorAvail = MibTableColumn((1, 3, 6, 1, 4, 1, 17373, 4, 1, 5, 1, 4), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airFlowSensorAvail.setStatus('current')
airFlowSensorTemp = MibTableColumn((1, 3, 6, 1, 4, 1, 17373, 4, 1, 5, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-40, 200))).setUnits('0.1 Degrees').setMaxAccess("readonly")
if mibBuilder.loadTexts: airFlowSensorTemp.setStatus('current')
airFlowSensorFlow = MibTableColumn((1, 3, 6, 1, 4, 1, 17373, 4, 1, 5, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: airFlowSensorFlow.setStatus('current')
airFlowSensorHumidity = MibTableColumn((1, 3, 6, 1, 4, 1, 17373, 4, 1, 5, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setUnits('%').setMaxAccess("readonly")
if mibBuilder.loadTexts: airFlowSensorHumidity.setStatus('current')
airFlowSensorDewPoint = MibTableColumn((1, 3, 6, 1, 4, 1, 17373, 4, 1, 5, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-40, 200))).setUnits('0.1 Degrees').setMaxAccess("readonly")
if mibBuilder.loadTexts: airFlowSensorDewPoint.setStatus('current')
dewPointSensorTable = MibTable((1, 3, 6, 1, 4, 1, 17373, 4, 1, 6), )
if mibBuilder.loadTexts: dewPointSensorTable.setStatus('current')
dewPointSensorEntry = MibTableRow((1, 3, 6, 1, 4, 1, 17373, 4, 1, 6, 1), ).setIndexNames((0, "IT-WATCHDOGS-V4-MIB", "dewPointSensorIndex"))
if mibBuilder.loadTexts: dewPointSensorEntry.setStatus('current')
dewPointSensorIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 17373, 4, 1, 6, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dewPointSensorIndex.setStatus('current')
dewPointSensorSerial = MibTableColumn((1, 3, 6, 1, 4, 1, 17373, 4, 1, 6, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dewPointSensorSerial.setStatus('current')
dewPointSensorName = MibTableColumn((1, 3, 6, 1, 4, 1, 17373, 4, 1, 6, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dewPointSensorName.setStatus('current')
dewPointSensorAvail = MibTableColumn((1, 3, 6, 1, 4, 1, 17373, 4, 1, 6, 1, 4), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dewPointSensorAvail.setStatus('current')
dewPointSensorTemp = MibTableColumn((1, 3, 6, 1, 4, 1, 17373, 4, 1, 6, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-40, 200))).setUnits('0.1 Degrees').setMaxAccess("readonly")
if mibBuilder.loadTexts: dewPointSensorTemp.setStatus('current')
dewPointSensorHumidity = MibTableColumn((1, 3, 6, 1, 4, 1, 17373, 4, 1, 6, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setUnits('%').setMaxAccess("readonly")
if mibBuilder.loadTexts: dewPointSensorHumidity.setStatus('current')
dewPointSensorDewPoint = MibTableColumn((1, 3, 6, 1, 4, 1, 17373, 4, 1, 6, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-40, 200))).setUnits('0.1 Degrees').setMaxAccess("readonly")
if mibBuilder.loadTexts: dewPointSensorDewPoint.setStatus('current')
ccatSensorTable = MibTable((1, 3, 6, 1, 4, 1, 17373, 4, 1, 7), )
if mibBuilder.loadTexts: ccatSensorTable.setStatus('current')
ccatSensorEntry = MibTableRow((1, 3, 6, 1, 4, 1, 17373, 4, 1, 7, 1), ).setIndexNames((0, "IT-WATCHDOGS-V4-MIB", "ccatSensorIndex"))
if mibBuilder.loadTexts: ccatSensorEntry.setStatus('current')
ccatSensorIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 17373, 4, 1, 7, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccatSensorIndex.setStatus('current')
ccatSensorSerial = MibTableColumn((1, 3, 6, 1, 4, 1, 17373, 4, 1, 7, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccatSensorSerial.setStatus('current')
ccatSensorName = MibTableColumn((1, 3, 6, 1, 4, 1, 17373, 4, 1, 7, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccatSensorName.setStatus('current')
ccatSensorAvail = MibTableColumn((1, 3, 6, 1, 4, 1, 17373, 4, 1, 7, 1, 4), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccatSensorAvail.setStatus('current')
ccatSensorValue = MibTableColumn((1, 3, 6, 1, 4, 1, 17373, 4, 1, 7, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-100, 5000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccatSensorValue.setStatus('current')
ccatSensorType = MibTableColumn((1, 3, 6, 1, 4, 1, 17373, 4, 1, 7, 1, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccatSensorType.setStatus('current')
ccatSensorDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 17373, 4, 1, 7, 1, 7), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccatSensorDescription.setStatus('current')
t3hdSensorTable = MibTable((1, 3, 6, 1, 4, 1, 17373, 4, 1, 8), )
if mibBuilder.loadTexts: t3hdSensorTable.setStatus('current')
t3hdSensorEntry = MibTableRow((1, 3, 6, 1, 4, 1, 17373, 4, 1, 8, 1), ).setIndexNames((0, "IT-WATCHDOGS-V4-MIB", "t3hdSensorIndex"))
if mibBuilder.loadTexts: t3hdSensorEntry.setStatus('current')
t3hdSensorIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 17373, 4, 1, 8, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: t3hdSensorIndex.setStatus('current')
t3hdSensorSerial = MibTableColumn((1, 3, 6, 1, 4, 1, 17373, 4, 1, 8, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: t3hdSensorSerial.setStatus('current')
t3hdSensorName = MibTableColumn((1, 3, 6, 1, 4, 1, 17373, 4, 1, 8, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: t3hdSensorName.setStatus('current')
t3hdSensorAvail = MibTableColumn((1, 3, 6, 1, 4, 1, 17373, 4, 1, 8, 1, 4), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: t3hdSensorAvail.setStatus('current')
t3hdSensorIntName = MibTableColumn((1, 3, 6, 1, 4, 1, 17373, 4, 1, 8, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: t3hdSensorIntName.setStatus('current')
t3hdSensorIntTemp = MibTableColumn((1, 3, 6, 1, 4, 1, 17373, 4, 1, 8, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-40, 200))).setUnits('0.1 Degrees').setMaxAccess("readonly")
if mibBuilder.loadTexts: t3hdSensorIntTemp.setStatus('current')
t3hdSensorIntHumidity = MibTableColumn((1, 3, 6, 1, 4, 1, 17373, 4, 1, 8, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setUnits('%').setMaxAccess("readonly")
if mibBuilder.loadTexts: t3hdSensorIntHumidity.setStatus('current')
t3hdSensorIntDewPoint = MibTableColumn((1, 3, 6, 1, 4, 1, 17373, 4, 1, 8, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-40, 200))).setUnits('0.1 Degrees').setMaxAccess("readonly")
if mibBuilder.loadTexts: t3hdSensorIntDewPoint.setStatus('current')
t3hdSensorExtAAvail = MibTableColumn((1, 3, 6, 1, 4, 1, 17373, 4, 1, 8, 1, 9), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: t3hdSensorExtAAvail.setStatus('current')
t3hdSensorExtAName = MibTableColumn((1, 3, 6, 1, 4, 1, 17373, 4, 1, 8, 1, 10), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: t3hdSensorExtAName.setStatus('current')
t3hdSensorExtATemp = MibTableColumn((1, 3, 6, 1, 4, 1, 17373, 4, 1, 8, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-40, 200))).setUnits('0.1 Degrees').setMaxAccess("readonly")
if mibBuilder.loadTexts: t3hdSensorExtATemp.setStatus('current')
t3hdSensorExtBAvail = MibTableColumn((1, 3, 6, 1, 4, 1, 17373, 4, 1, 8, 1, 12), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: t3hdSensorExtBAvail.setStatus('current')
t3hdSensorExtBName = MibTableColumn((1, 3, 6, 1, 4, 1, 17373, 4, 1, 8, 1, 13), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: t3hdSensorExtBName.setStatus('current')
t3hdSensorExtBTemp = MibTableColumn((1, 3, 6, 1, 4, 1, 17373, 4, 1, 8, 1, 14), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-40, 200))).setUnits('0.1 Degrees').setMaxAccess("readonly")
if mibBuilder.loadTexts: t3hdSensorExtBTemp.setStatus('current')
thdSensorTable = MibTable((1, 3, 6, 1, 4, 1, 17373, 4, 1, 9), )
if mibBuilder.loadTexts: thdSensorTable.setStatus('current')
thdSensorEntry = MibTableRow((1, 3, 6, 1, 4, 1, 17373, 4, 1, 9, 1), ).setIndexNames((0, "IT-WATCHDOGS-V4-MIB", "thdSensorIndex"))
if mibBuilder.loadTexts: thdSensorEntry.setStatus('current')
thdSensorIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 17373, 4, 1, 9, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: thdSensorIndex.setStatus('current')
thdSensorSerial = MibTableColumn((1, 3, 6, 1, 4, 1, 17373, 4, 1, 9, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: thdSensorSerial.setStatus('current')
thdSensorName = MibTableColumn((1, 3, 6, 1, 4, 1, 17373, 4, 1, 9, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: thdSensorName.setStatus('current')
thdSensorAvail = MibTableColumn((1, 3, 6, 1, 4, 1, 17373, 4, 1, 9, 1, 4), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: thdSensorAvail.setStatus('current')
thdSensorTemp = MibTableColumn((1, 3, 6, 1, 4, 1, 17373, 4, 1, 9, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-40, 200))).setUnits('0.1 Degrees').setMaxAccess("readonly")
if mibBuilder.loadTexts: thdSensorTemp.setStatus('current')
thdSensorHumidity = MibTableColumn((1, 3, 6, 1, 4, 1, 17373, 4, 1, 9, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setUnits('%').setMaxAccess("readonly")
if mibBuilder.loadTexts: thdSensorHumidity.setStatus('current')
thdSensorDewPoint = MibTableColumn((1, 3, 6, 1, 4, 1, 17373, 4, 1, 9, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-40, 200))).setUnits('0.1 Degrees').setMaxAccess("readonly")
if mibBuilder.loadTexts: thdSensorDewPoint.setStatus('current')
rpmSensorTable = MibTable((1, 3, 6, 1, 4, 1, 17373, 4, 1, 10), )
if mibBuilder.loadTexts: rpmSensorTable.setStatus('current')
rpmSensorEntry = MibTableRow((1, 3, 6, 1, 4, 1, 17373, 4, 1, 10, 1), ).setIndexNames((0, "IT-WATCHDOGS-V4-MIB", "rpmSensorIndex"))
if mibBuilder.loadTexts: rpmSensorEntry.setStatus('current')
rpmSensorIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 17373, 4, 1, 10, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rpmSensorIndex.setStatus('current')
rpmSensorSerial = MibTableColumn((1, 3, 6, 1, 4, 1, 17373, 4, 1, 10, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rpmSensorSerial.setStatus('current')
rpmSensorName = MibTableColumn((1, 3, 6, 1, 4, 1, 17373, 4, 1, 10, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rpmSensorName.setStatus('current')
rpmSensorAvail = MibTableColumn((1, 3, 6, 1, 4, 1, 17373, 4, 1, 10, 1, 4), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rpmSensorAvail.setStatus('current')
rpmSensorEnergy = MibTableColumn((1, 3, 6, 1, 4, 1, 17373, 4, 1, 10, 1, 5), Gauge32()).setUnits('kWh').setMaxAccess("readonly")
if mibBuilder.loadTexts: rpmSensorEnergy.setStatus('current')
rpmSensorVoltage = MibTableColumn((1, 3, 6, 1, 4, 1, 17373, 4, 1, 10, 1, 6), Gauge32()).setUnits('Volts (rms)').setMaxAccess("readonly")
if mibBuilder.loadTexts: rpmSensorVoltage.setStatus('current')
rpmSensorVoltageMax = MibTableColumn((1, 3, 6, 1, 4, 1, 17373, 4, 1, 10, 1, 7), Gauge32()).setUnits('Volts (rms)').setMaxAccess("readonly")
if mibBuilder.loadTexts: rpmSensorVoltageMax.setStatus('current')
rpmSensorVoltageMin = MibTableColumn((1, 3, 6, 1, 4, 1, 17373, 4, 1, 10, 1, 8), Gauge32()).setUnits('Volts (rms)').setMaxAccess("readonly")
if mibBuilder.loadTexts: rpmSensorVoltageMin.setStatus('current')
rpmSensorVoltagePeak = MibTableColumn((1, 3, 6, 1, 4, 1, 17373, 4, 1, 10, 1, 9), Gauge32()).setUnits('Volts').setMaxAccess("readonly")
if mibBuilder.loadTexts: rpmSensorVoltagePeak.setStatus('current')
rpmSensorCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 17373, 4, 1, 10, 1, 10), Gauge32()).setUnits('0.1 Amps (rms)').setMaxAccess("readonly")
if mibBuilder.loadTexts: rpmSensorCurrent.setStatus('current')
rpmSensorRealPower = MibTableColumn((1, 3, 6, 1, 4, 1, 17373, 4, 1, 10, 1, 11), Gauge32()).setUnits('Watts').setMaxAccess("readonly")
if mibBuilder.loadTexts: rpmSensorRealPower.setStatus('current')
rpmSensorApparentPower = MibTableColumn((1, 3, 6, 1, 4, 1, 17373, 4, 1, 10, 1, 12), Gauge32()).setUnits('Volt-Amps').setMaxAccess("readonly")
if mibBuilder.loadTexts: rpmSensorApparentPower.setStatus('current')
rpmSensorPowerFactor = MibTableColumn((1, 3, 6, 1, 4, 1, 17373, 4, 1, 10, 1, 13), Gauge32()).setUnits('%').setMaxAccess("readonly")
if mibBuilder.loadTexts: rpmSensorPowerFactor.setStatus('current')
rpmSensorOutlet1 = MibTableColumn((1, 3, 6, 1, 4, 1, 17373, 4, 1, 10, 1, 14), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rpmSensorOutlet1.setStatus('current')
rpmSensorOutlet2 = MibTableColumn((1, 3, 6, 1, 4, 1, 17373, 4, 1, 10, 1, 15), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rpmSensorOutlet2.setStatus('current')
trap = MibIdentifier((1, 3, 6, 1, 4, 1, 17373, 4, 1, 32767))
trapPrefix = MibIdentifier((1, 3, 6, 1, 4, 1, 17373, 4, 1, 32767, 0))
internalTestNOTIFY = NotificationType((1, 3, 6, 1, 4, 1, 17373, 4, 1, 32767, 0, 10101))
if mibBuilder.loadTexts: internalTestNOTIFY.setStatus('current')
internalTempNOTIFY = NotificationType((1, 3, 6, 1, 4, 1, 17373, 4, 1, 32767, 0, 10205)).setObjects(("IT-WATCHDOGS-V4-MIB", "internalTemp"), ("IT-WATCHDOGS-V4-MIB", "temperatureUnits"))
if mibBuilder.loadTexts: internalTempNOTIFY.setStatus('current')
internalTempCLEAR = NotificationType((1, 3, 6, 1, 4, 1, 17373, 4, 1, 32767, 0, 20205)).setObjects(("IT-WATCHDOGS-V4-MIB", "internalTemp"), ("IT-WATCHDOGS-V4-MIB", "temperatureUnits"))
if mibBuilder.loadTexts: internalTempCLEAR.setStatus('current')
internalHumidityNOTIFY = NotificationType((1, 3, 6, 1, 4, 1, 17373, 4, 1, 32767, 0, 10206)).setObjects(("IT-WATCHDOGS-V4-MIB", "internalHumidity"))
if mibBuilder.loadTexts: internalHumidityNOTIFY.setStatus('current')
internalHumidityCLEAR = NotificationType((1, 3, 6, 1, 4, 1, 17373, 4, 1, 32767, 0, 20206)).setObjects(("IT-WATCHDOGS-V4-MIB", "internalHumidity"))
if mibBuilder.loadTexts: internalHumidityCLEAR.setStatus('current')
internalDewPointNOTIFY = NotificationType((1, 3, 6, 1, 4, 1, 17373, 4, 1, 32767, 0, 10207)).setObjects(("IT-WATCHDOGS-V4-MIB", "internalDewPoint"), ("IT-WATCHDOGS-V4-MIB", "temperatureUnits"))
if mibBuilder.loadTexts: internalDewPointNOTIFY.setStatus('current')
internalDewPointCLEAR = NotificationType((1, 3, 6, 1, 4, 1, 17373, 4, 1, 32767, 0, 20207)).setObjects(("IT-WATCHDOGS-V4-MIB", "internalDewPoint"), ("IT-WATCHDOGS-V4-MIB", "temperatureUnits"))
if mibBuilder.loadTexts: internalDewPointCLEAR.setStatus('current')
internalIO1NOTIFY = NotificationType((1, 3, 6, 1, 4, 1, 17373, 4, 1, 32767, 0, 10208)).setObjects(("IT-WATCHDOGS-V4-MIB", "internalIO1"))
if mibBuilder.loadTexts: internalIO1NOTIFY.setStatus('current')
internalIO1CLEAR = NotificationType((1, 3, 6, 1, 4, 1, 17373, 4, 1, 32767, 0, 20208)).setObjects(("IT-WATCHDOGS-V4-MIB", "internalIO1"))
if mibBuilder.loadTexts: internalIO1CLEAR.setStatus('current')
internalIO2NOTIFY = NotificationType((1, 3, 6, 1, 4, 1, 17373, 4, 1, 32767, 0, 10209)).setObjects(("IT-WATCHDOGS-V4-MIB", "internalIO2"))
if mibBuilder.loadTexts: internalIO2NOTIFY.setStatus('current')
internalIO2CLEAR = NotificationType((1, 3, 6, 1, 4, 1, 17373, 4, 1, 32767, 0, 20209)).setObjects(("IT-WATCHDOGS-V4-MIB", "internalIO2"))
if mibBuilder.loadTexts: internalIO2CLEAR.setStatus('current')
internalIO3NOTIFY = NotificationType((1, 3, 6, 1, 4, 1, 17373, 4, 1, 32767, 0, 10210)).setObjects(("IT-WATCHDOGS-V4-MIB", "internalIO3"))
if mibBuilder.loadTexts: internalIO3NOTIFY.setStatus('current')
internalIO3CLEAR = NotificationType((1, 3, 6, 1, 4, 1, 17373, 4, 1, 32767, 0, 20210)).setObjects(("IT-WATCHDOGS-V4-MIB", "internalIO3"))
if mibBuilder.loadTexts: internalIO3CLEAR.setStatus('current')
internalIO4NOTIFY = NotificationType((1, 3, 6, 1, 4, 1, 17373, 4, 1, 32767, 0, 10211)).setObjects(("IT-WATCHDOGS-V4-MIB", "internalIO4"))
if mibBuilder.loadTexts: internalIO4NOTIFY.setStatus('current')
internalIO4CLEAR = NotificationType((1, 3, 6, 1, 4, 1, 17373, 4, 1, 32767, 0, 20211)).setObjects(("IT-WATCHDOGS-V4-MIB", "internalIO4"))
if mibBuilder.loadTexts: internalIO4CLEAR.setStatus('current')
tempSensorTempNOTIFY = NotificationType((1, 3, 6, 1, 4, 1, 17373, 4, 1, 32767, 0, 10405)).setObjects(("IT-WATCHDOGS-V4-MIB", "tempSensorTemp"), ("IT-WATCHDOGS-V4-MIB", "temperatureUnits"))
if mibBuilder.loadTexts: tempSensorTempNOTIFY.setStatus('current')
tempSensorTempCLEAR = NotificationType((1, 3, 6, 1, 4, 1, 17373, 4, 1, 32767, 0, 20405)).setObjects(("IT-WATCHDOGS-V4-MIB", "tempSensorTemp"), ("IT-WATCHDOGS-V4-MIB", "temperatureUnits"))
if mibBuilder.loadTexts: tempSensorTempCLEAR.setStatus('current')
airFlowSensorTempNOTIFY = NotificationType((1, 3, 6, 1, 4, 1, 17373, 4, 1, 32767, 0, 10505)).setObjects(("IT-WATCHDOGS-V4-MIB", "airFlowSensorTemp"), ("IT-WATCHDOGS-V4-MIB", "temperatureUnits"))
if mibBuilder.loadTexts: airFlowSensorTempNOTIFY.setStatus('current')
airFlowSensorTempCLEAR = NotificationType((1, 3, 6, 1, 4, 1, 17373, 4, 1, 32767, 0, 20505)).setObjects(("IT-WATCHDOGS-V4-MIB", "airFlowSensorTemp"), ("IT-WATCHDOGS-V4-MIB", "temperatureUnits"))
if mibBuilder.loadTexts: airFlowSensorTempCLEAR.setStatus('current')
airFlowSensorFlowNOTIFY = NotificationType((1, 3, 6, 1, 4, 1, 17373, 4, 1, 32767, 0, 10506)).setObjects(("IT-WATCHDOGS-V4-MIB", "airFlowSensorFlow"))
if mibBuilder.loadTexts: airFlowSensorFlowNOTIFY.setStatus('current')
airFlowSensorFlowCLEAR = NotificationType((1, 3, 6, 1, 4, 1, 17373, 4, 1, 32767, 0, 20506)).setObjects(("IT-WATCHDOGS-V4-MIB", "airFlowSensorFlow"))
if mibBuilder.loadTexts: airFlowSensorFlowCLEAR.setStatus('current')
airFlowSensorHumidityNOTIFY = NotificationType((1, 3, 6, 1, 4, 1, 17373, 4, 1, 32767, 0, 10507)).setObjects(("IT-WATCHDOGS-V4-MIB", "airFlowSensorHumidity"))
if mibBuilder.loadTexts: airFlowSensorHumidityNOTIFY.setStatus('current')
airFlowSensorHumidityCLEAR = NotificationType((1, 3, 6, 1, 4, 1, 17373, 4, 1, 32767, 0, 20507)).setObjects(("IT-WATCHDOGS-V4-MIB", "airFlowSensorHumidity"))
if mibBuilder.loadTexts: airFlowSensorHumidityCLEAR.setStatus('current')
airFlowSensorDewPointNOTIFY = NotificationType((1, 3, 6, 1, 4, 1, 17373, 4, 1, 32767, 0, 10508)).setObjects(("IT-WATCHDOGS-V4-MIB", "airFlowSensorDewPoint"), ("IT-WATCHDOGS-V4-MIB", "temperatureUnits"))
if mibBuilder.loadTexts: airFlowSensorDewPointNOTIFY.setStatus('current')
airFlowSensorDewPointCLEAR = NotificationType((1, 3, 6, 1, 4, 1, 17373, 4, 1, 32767, 0, 20508)).setObjects(("IT-WATCHDOGS-V4-MIB", "airFlowSensorDewPoint"), ("IT-WATCHDOGS-V4-MIB", "temperatureUnits"))
if mibBuilder.loadTexts: airFlowSensorDewPointCLEAR.setStatus('current')
dewPointSensorTempNOTIFY = NotificationType((1, 3, 6, 1, 4, 1, 17373, 4, 1, 32767, 0, 10605)).setObjects(("IT-WATCHDOGS-V4-MIB", "dewPointSensorTemp"), ("IT-WATCHDOGS-V4-MIB", "temperatureUnits"))
if mibBuilder.loadTexts: dewPointSensorTempNOTIFY.setStatus('current')
dewPointSensorTempCLEAR = NotificationType((1, 3, 6, 1, 4, 1, 17373, 4, 1, 32767, 0, 20605)).setObjects(("IT-WATCHDOGS-V4-MIB", "dewPointSensorTemp"), ("IT-WATCHDOGS-V4-MIB", "temperatureUnits"))
if mibBuilder.loadTexts: dewPointSensorTempCLEAR.setStatus('current')
dewPointSensorHumidityNOTIFY = NotificationType((1, 3, 6, 1, 4, 1, 17373, 4, 1, 32767, 0, 10606)).setObjects(("IT-WATCHDOGS-V4-MIB", "dewPointSensorHumidity"))
if mibBuilder.loadTexts: dewPointSensorHumidityNOTIFY.setStatus('current')
dewPointSensorHumidityCLEAR = NotificationType((1, 3, 6, 1, 4, 1, 17373, 4, 1, 32767, 0, 20606)).setObjects(("IT-WATCHDOGS-V4-MIB", "dewPointSensorHumidity"))
if mibBuilder.loadTexts: dewPointSensorHumidityCLEAR.setStatus('current')
dewPointSensorDewPointNOTIFY = NotificationType((1, 3, 6, 1, 4, 1, 17373, 4, 1, 32767, 0, 10607)).setObjects(("IT-WATCHDOGS-V4-MIB", "dewPointSensorDewPoint"), ("IT-WATCHDOGS-V4-MIB", "temperatureUnits"))
if mibBuilder.loadTexts: dewPointSensorDewPointNOTIFY.setStatus('current')
dewPointSensorDewPointCLEAR = NotificationType((1, 3, 6, 1, 4, 1, 17373, 4, 1, 32767, 0, 20607)).setObjects(("IT-WATCHDOGS-V4-MIB", "dewPointSensorDewPoint"), ("IT-WATCHDOGS-V4-MIB", "temperatureUnits"))
if mibBuilder.loadTexts: dewPointSensorDewPointCLEAR.setStatus('current')
ccatSensorValueNOTIFY = NotificationType((1, 3, 6, 1, 4, 1, 17373, 4, 1, 32767, 0, 10705)).setObjects(("IT-WATCHDOGS-V4-MIB", "ccatSensorValue"), ("IT-WATCHDOGS-V4-MIB", "ccatSensorType"))
if mibBuilder.loadTexts: ccatSensorValueNOTIFY.setStatus('current')
ccatSensorValueCLEAR = NotificationType((1, 3, 6, 1, 4, 1, 17373, 4, 1, 32767, 0, 20705)).setObjects(("IT-WATCHDOGS-V4-MIB", "ccatSensorValue"), ("IT-WATCHDOGS-V4-MIB", "ccatSensorType"))
if mibBuilder.loadTexts: ccatSensorValueCLEAR.setStatus('current')
t3hdSensorIntTempNOTIFY = NotificationType((1, 3, 6, 1, 4, 1, 17373, 4, 1, 32767, 0, 10806)).setObjects(("IT-WATCHDOGS-V4-MIB", "t3hdSensorIntTemp"), ("IT-WATCHDOGS-V4-MIB", "temperatureUnits"))
if mibBuilder.loadTexts: t3hdSensorIntTempNOTIFY.setStatus('current')
t3hdSensorIntTempCLEAR = NotificationType((1, 3, 6, 1, 4, 1, 17373, 4, 1, 32767, 0, 20806)).setObjects(("IT-WATCHDOGS-V4-MIB", "t3hdSensorIntTemp"), ("IT-WATCHDOGS-V4-MIB", "temperatureUnits"))
if mibBuilder.loadTexts: t3hdSensorIntTempCLEAR.setStatus('current')
t3hdSensorIntHumidityNOTIFY = NotificationType((1, 3, 6, 1, 4, 1, 17373, 4, 1, 32767, 0, 10807)).setObjects(("IT-WATCHDOGS-V4-MIB", "t3hdSensorIntHumidity"))
if mibBuilder.loadTexts: t3hdSensorIntHumidityNOTIFY.setStatus('current')
t3hdSensorIntHumidityCLEAR = NotificationType((1, 3, 6, 1, 4, 1, 17373, 4, 1, 32767, 0, 20807)).setObjects(("IT-WATCHDOGS-V4-MIB", "t3hdSensorIntHumidity"))
if mibBuilder.loadTexts: t3hdSensorIntHumidityCLEAR.setStatus('current')
t3hdSensorIntDewPointNOTIFY = NotificationType((1, 3, 6, 1, 4, 1, 17373, 4, 1, 32767, 0, 10808)).setObjects(("IT-WATCHDOGS-V4-MIB", "t3hdSensorIntDewPoint"), ("IT-WATCHDOGS-V4-MIB", "temperatureUnits"))
if mibBuilder.loadTexts: t3hdSensorIntDewPointNOTIFY.setStatus('current')
t3hdSensorIntDewPointCLEAR = NotificationType((1, 3, 6, 1, 4, 1, 17373, 4, 1, 32767, 0, 20808)).setObjects(("IT-WATCHDOGS-V4-MIB", "t3hdSensorIntDewPoint"), ("IT-WATCHDOGS-V4-MIB", "temperatureUnits"))
if mibBuilder.loadTexts: t3hdSensorIntDewPointCLEAR.setStatus('current')
t3hdSensorExtATempNOTIFY = NotificationType((1, 3, 6, 1, 4, 1, 17373, 4, 1, 32767, 0, 10811)).setObjects(("IT-WATCHDOGS-V4-MIB", "t3hdSensorExtATemp"), ("IT-WATCHDOGS-V4-MIB", "temperatureUnits"))
if mibBuilder.loadTexts: t3hdSensorExtATempNOTIFY.setStatus('current')
t3hdSensorExtATempCLEAR = NotificationType((1, 3, 6, 1, 4, 1, 17373, 4, 1, 32767, 0, 20811)).setObjects(("IT-WATCHDOGS-V4-MIB", "t3hdSensorExtATemp"), ("IT-WATCHDOGS-V4-MIB", "temperatureUnits"))
if mibBuilder.loadTexts: t3hdSensorExtATempCLEAR.setStatus('current')
t3hdSensorExtBTempNOTIFY = NotificationType((1, 3, 6, 1, 4, 1, 17373, 4, 1, 32767, 0, 10814)).setObjects(("IT-WATCHDOGS-V4-MIB", "t3hdSensorExtBTemp"), ("IT-WATCHDOGS-V4-MIB", "temperatureUnits"))
if mibBuilder.loadTexts: t3hdSensorExtBTempNOTIFY.setStatus('current')
t3hdSensorExtBTempCLEAR = NotificationType((1, 3, 6, 1, 4, 1, 17373, 4, 1, 32767, 0, 20814)).setObjects(("IT-WATCHDOGS-V4-MIB", "t3hdSensorExtBTemp"), ("IT-WATCHDOGS-V4-MIB", "temperatureUnits"))
if mibBuilder.loadTexts: t3hdSensorExtBTempCLEAR.setStatus('current')
thdSensorTempNOTIFY = NotificationType((1, 3, 6, 1, 4, 1, 17373, 4, 1, 32767, 0, 10905)).setObjects(("IT-WATCHDOGS-V4-MIB", "thdSensorTemp"), ("IT-WATCHDOGS-V4-MIB", "temperatureUnits"))
if mibBuilder.loadTexts: thdSensorTempNOTIFY.setStatus('current')
thdSensorTempCLEAR = NotificationType((1, 3, 6, 1, 4, 1, 17373, 4, 1, 32767, 0, 20905)).setObjects(("IT-WATCHDOGS-V4-MIB", "thdSensorTemp"), ("IT-WATCHDOGS-V4-MIB", "temperatureUnits"))
if mibBuilder.loadTexts: thdSensorTempCLEAR.setStatus('current')
thdSensorHumidityNOTIFY = NotificationType((1, 3, 6, 1, 4, 1, 17373, 4, 1, 32767, 0, 10906)).setObjects(("IT-WATCHDOGS-V4-MIB", "thdSensorHumidity"))
if mibBuilder.loadTexts: thdSensorHumidityNOTIFY.setStatus('current')
thdSensorHumidityCLEAR = NotificationType((1, 3, 6, 1, 4, 1, 17373, 4, 1, 32767, 0, 20906)).setObjects(("IT-WATCHDOGS-V4-MIB", "thdSensorHumidity"))
if mibBuilder.loadTexts: thdSensorHumidityCLEAR.setStatus('current')
thdSensorDewPointNOTIFY = NotificationType((1, 3, 6, 1, 4, 1, 17373, 4, 1, 32767, 0, 10907)).setObjects(("IT-WATCHDOGS-V4-MIB", "thdSensorDewPoint"), ("IT-WATCHDOGS-V4-MIB", "temperatureUnits"))
if mibBuilder.loadTexts: thdSensorDewPointNOTIFY.setStatus('current')
thdSensorDewPointCLEAR = NotificationType((1, 3, 6, 1, 4, 1, 17373, 4, 1, 32767, 0, 20907)).setObjects(("IT-WATCHDOGS-V4-MIB", "thdSensorDewPoint"), ("IT-WATCHDOGS-V4-MIB", "temperatureUnits"))
if mibBuilder.loadTexts: thdSensorDewPointCLEAR.setStatus('current')
rpmSensorEnergyNOTIFY = NotificationType((1, 3, 6, 1, 4, 1, 17373, 4, 1, 32767, 0, 11005)).setObjects(("IT-WATCHDOGS-V4-MIB", "rpmSensorEnergy"))
if mibBuilder.loadTexts: rpmSensorEnergyNOTIFY.setStatus('current')
rpmSensorEnergyCLEAR = NotificationType((1, 3, 6, 1, 4, 1, 17373, 4, 1, 32767, 0, 21005)).setObjects(("IT-WATCHDOGS-V4-MIB", "rpmSensorEnergy"))
if mibBuilder.loadTexts: rpmSensorEnergyCLEAR.setStatus('current')
rpmSensorVoltageNOTIFY = NotificationType((1, 3, 6, 1, 4, 1, 17373, 4, 1, 32767, 0, 11006)).setObjects(("IT-WATCHDOGS-V4-MIB", "rpmSensorVoltage"))
if mibBuilder.loadTexts: rpmSensorVoltageNOTIFY.setStatus('current')
rpmSensorVoltageCLEAR = NotificationType((1, 3, 6, 1, 4, 1, 17373, 4, 1, 32767, 0, 21006)).setObjects(("IT-WATCHDOGS-V4-MIB", "rpmSensorVoltage"))
if mibBuilder.loadTexts: rpmSensorVoltageCLEAR.setStatus('current')
rpmSensorVoltageMaxNOTIFY = NotificationType((1, 3, 6, 1, 4, 1, 17373, 4, 1, 32767, 0, 11007)).setObjects(("IT-WATCHDOGS-V4-MIB", "rpmSensorVoltageMax"))
if mibBuilder.loadTexts: rpmSensorVoltageMaxNOTIFY.setStatus('current')
rpmSensorVoltageMaxCLEAR = NotificationType((1, 3, 6, 1, 4, 1, 17373, 4, 1, 32767, 0, 21007)).setObjects(("IT-WATCHDOGS-V4-MIB", "rpmSensorVoltageMax"))
if mibBuilder.loadTexts: rpmSensorVoltageMaxCLEAR.setStatus('current')
rpmSensorVoltageMinNOTIFY = NotificationType((1, 3, 6, 1, 4, 1, 17373, 4, 1, 32767, 0, 11008)).setObjects(("IT-WATCHDOGS-V4-MIB", "rpmSensorVoltageMin"))
if mibBuilder.loadTexts: rpmSensorVoltageMinNOTIFY.setStatus('current')
rpmSensorVoltageMinCLEAR = NotificationType((1, 3, 6, 1, 4, 1, 17373, 4, 1, 32767, 0, 21008)).setObjects(("IT-WATCHDOGS-V4-MIB", "rpmSensorVoltageMin"))
if mibBuilder.loadTexts: rpmSensorVoltageMinCLEAR.setStatus('current')
rpmSensorVoltagePeakNOTIFY = NotificationType((1, 3, 6, 1, 4, 1, 17373, 4, 1, 32767, 0, 11009)).setObjects(("IT-WATCHDOGS-V4-MIB", "rpmSensorVoltagePeak"))
if mibBuilder.loadTexts: rpmSensorVoltagePeakNOTIFY.setStatus('current')
rpmSensorVoltagePeakCLEAR = NotificationType((1, 3, 6, 1, 4, 1, 17373, 4, 1, 32767, 0, 21009)).setObjects(("IT-WATCHDOGS-V4-MIB", "rpmSensorVoltagePeak"))
if mibBuilder.loadTexts: rpmSensorVoltagePeakCLEAR.setStatus('current')
rpmSensorCurrentNOTIFY = NotificationType((1, 3, 6, 1, 4, 1, 17373, 4, 1, 32767, 0, 11010)).setObjects(("IT-WATCHDOGS-V4-MIB", "rpmSensorCurrent"))
if mibBuilder.loadTexts: rpmSensorCurrentNOTIFY.setStatus('current')
rpmSensorCurrentCLEAR = NotificationType((1, 3, 6, 1, 4, 1, 17373, 4, 1, 32767, 0, 21010)).setObjects(("IT-WATCHDOGS-V4-MIB", "rpmSensorCurrent"))
if mibBuilder.loadTexts: rpmSensorCurrentCLEAR.setStatus('current')
rpmSensorRealPowerNOTIFY = NotificationType((1, 3, 6, 1, 4, 1, 17373, 4, 1, 32767, 0, 11011)).setObjects(("IT-WATCHDOGS-V4-MIB", "rpmSensorRealPower"))
if mibBuilder.loadTexts: rpmSensorRealPowerNOTIFY.setStatus('current')
rpmSensorRealPowerCLEAR = NotificationType((1, 3, 6, 1, 4, 1, 17373, 4, 1, 32767, 0, 21011)).setObjects(("IT-WATCHDOGS-V4-MIB", "rpmSensorRealPower"))
if mibBuilder.loadTexts: rpmSensorRealPowerCLEAR.setStatus('current')
rpmSensorApparentPowerNOTIFY = NotificationType((1, 3, 6, 1, 4, 1, 17373, 4, 1, 32767, 0, 11012)).setObjects(("IT-WATCHDOGS-V4-MIB", "rpmSensorApparentPower"))
if mibBuilder.loadTexts: rpmSensorApparentPowerNOTIFY.setStatus('current')
rpmSensorApparentPowerCLEAR = NotificationType((1, 3, 6, 1, 4, 1, 17373, 4, 1, 32767, 0, 21012)).setObjects(("IT-WATCHDOGS-V4-MIB", "rpmSensorApparentPower"))
if mibBuilder.loadTexts: rpmSensorApparentPowerCLEAR.setStatus('current')
rpmSensorPowerFactorNOTIFY = NotificationType((1, 3, 6, 1, 4, 1, 17373, 4, 1, 32767, 0, 11013)).setObjects(("IT-WATCHDOGS-V4-MIB", "rpmSensorPowerFactor"))
if mibBuilder.loadTexts: rpmSensorPowerFactorNOTIFY.setStatus('current')
rpmSensorPowerFactorCLEAR = NotificationType((1, 3, 6, 1, 4, 1, 17373, 4, 1, 32767, 0, 21013)).setObjects(("IT-WATCHDOGS-V4-MIB", "rpmSensorPowerFactor"))
if mibBuilder.loadTexts: rpmSensorPowerFactorCLEAR.setStatus('current')
mibBuilder.exportSymbols("IT-WATCHDOGS-V4-MIB", t3hdSensorIntHumidityNOTIFY=t3hdSensorIntHumidityNOTIFY, internalHumidity=internalHumidity, internalIO4NOTIFY=internalIO4NOTIFY, dewPointSensorIndex=dewPointSensorIndex, t3hdSensorName=t3hdSensorName, temperatureUnits=temperatureUnits, t3hdSensorTable=t3hdSensorTable, deviceCount=deviceCount, rpmSensorVoltage=rpmSensorVoltage, t3hdSensorExtBTemp=t3hdSensorExtBTemp, dewPointSensorDewPointCLEAR=dewPointSensorDewPointCLEAR, internalSerial=internalSerial, rpmSensorIndex=rpmSensorIndex, rpmSensorName=rpmSensorName, ccatSensorName=ccatSensorName, thdSensorDewPoint=thdSensorDewPoint, ccatSensorType=ccatSensorType, rpmSensorVoltageMax=rpmSensorVoltageMax, dewPointSensorSerial=dewPointSensorSerial, airFlowSensorAvail=airFlowSensorAvail, thdSensorTempCLEAR=thdSensorTempCLEAR, internalIO3=internalIO3, airFlowSensorFlowCLEAR=airFlowSensorFlowCLEAR, ccatSensorEntry=ccatSensorEntry, rpmSensorSerial=rpmSensorSerial, rpmSensorEnergy=rpmSensorEnergy, dewPointSensorHumidityCLEAR=dewPointSensorHumidityCLEAR, thdSensorDewPointCLEAR=thdSensorDewPointCLEAR, rpmSensorCurrentCLEAR=rpmSensorCurrentCLEAR, rpmSensorCurrent=rpmSensorCurrent, airFlowSensorTempCLEAR=airFlowSensorTempCLEAR, t3hdSensorIntName=t3hdSensorIntName, rpmSensorVoltagePeakNOTIFY=rpmSensorVoltagePeakNOTIFY, thdSensorHumidityCLEAR=thdSensorHumidityCLEAR, dewPointSensorTable=dewPointSensorTable, airFlowSensorHumidity=airFlowSensorHumidity, rpmSensorAvail=rpmSensorAvail, internalHumidityCLEAR=internalHumidityCLEAR, ccatSensorDescription=ccatSensorDescription, internalIO4=internalIO4, t3hdSensorIntHumidity=t3hdSensorIntHumidity, airFlowSensorDewPointNOTIFY=airFlowSensorDewPointNOTIFY, t3hdSensorIntTempCLEAR=t3hdSensorIntTempCLEAR, dewPointSensorTempNOTIFY=dewPointSensorTempNOTIFY, t3hdSensorIntTemp=t3hdSensorIntTemp, rpmSensorCurrentNOTIFY=rpmSensorCurrentNOTIFY, deviceInfo=deviceInfo, airFlowSensorName=airFlowSensorName, t3hdSensorIntDewPointCLEAR=t3hdSensorIntDewPointCLEAR, t3hdSensorExtBTempCLEAR=t3hdSensorExtBTempCLEAR, dewPointSensorHumidityNOTIFY=dewPointSensorHumidityNOTIFY, dewPointSensorTempCLEAR=dewPointSensorTempCLEAR, ccatSensorAvail=ccatSensorAvail, t3hdSensorIntTempNOTIFY=t3hdSensorIntTempNOTIFY, rpmSensorOutlet2=rpmSensorOutlet2, tempSensorTable=tempSensorTable, internalEntry=internalEntry, rpmSensorVoltageMaxCLEAR=rpmSensorVoltageMaxCLEAR, internalName=internalName, ccatSensorTable=ccatSensorTable, t3hdSensorIntDewPoint=t3hdSensorIntDewPoint, dewPointSensorDewPoint=dewPointSensorDewPoint, internalDewPoint=internalDewPoint, airFlowSensorFlow=airFlowSensorFlow, internalIO3NOTIFY=internalIO3NOTIFY, rpmSensorVoltageMinNOTIFY=rpmSensorVoltageMinNOTIFY, internalIO2=internalIO2, airFlowSensorHumidityNOTIFY=airFlowSensorHumidityNOTIFY, t3hdSensorIntDewPointNOTIFY=t3hdSensorIntDewPointNOTIFY, dewPointSensorTemp=dewPointSensorTemp, rpmSensorPowerFactorNOTIFY=rpmSensorPowerFactorNOTIFY, internalIO2NOTIFY=internalIO2NOTIFY, thdSensorTemp=thdSensorTemp, internalIndex=internalIndex, ccatSensorValueNOTIFY=ccatSensorValueNOTIFY, internalAvail=internalAvail, t3hdSensorExtBTempNOTIFY=t3hdSensorExtBTempNOTIFY, productFriendlyName=productFriendlyName, rpmSensorRealPowerNOTIFY=rpmSensorRealPowerNOTIFY, airFlowSensorFlowNOTIFY=airFlowSensorFlowNOTIFY, internalIO2CLEAR=internalIO2CLEAR, itwatchdogs=itwatchdogs, internalRelayState=internalRelayState, PYSNMP_MODULE_ID=itwatchdogs, rpmSensorVoltageMinCLEAR=rpmSensorVoltageMinCLEAR, t3hdSensorExtATempNOTIFY=t3hdSensorExtATempNOTIFY, rpmSensorApparentPower=rpmSensorApparentPower, internalHumidityNOTIFY=internalHumidityNOTIFY, rpmSensorVoltageNOTIFY=rpmSensorVoltageNOTIFY, tempSensorTemp=tempSensorTemp, internalTemp=internalTemp, rpmSensorApparentPowerNOTIFY=rpmSensorApparentPowerNOTIFY, tempSensorIndex=tempSensorIndex, rpmSensorRealPowerCLEAR=rpmSensorRealPowerCLEAR, internalTempCLEAR=internalTempCLEAR, airFlowSensorHumidityCLEAR=airFlowSensorHumidityCLEAR, internalIO3CLEAR=internalIO3CLEAR, thdSensorEntry=thdSensorEntry, t3hdSensorExtBName=t3hdSensorExtBName, productTitle=productTitle, airFlowSensorDewPointCLEAR=airFlowSensorDewPointCLEAR, internalIO4CLEAR=internalIO4CLEAR, rpmSensorOutlet1=rpmSensorOutlet1, t3hdSensorIntHumidityCLEAR=t3hdSensorIntHumidityCLEAR, t3hdSensorSerial=t3hdSensorSerial, blackbird=blackbird, rpmSensorEnergyCLEAR=rpmSensorEnergyCLEAR, internalIO1CLEAR=internalIO1CLEAR, thdSensorAvail=thdSensorAvail, rpmSensorTable=rpmSensorTable, tempSensorTempNOTIFY=tempSensorTempNOTIFY, airFlowSensorTemp=airFlowSensorTemp, rpmSensorVoltageCLEAR=rpmSensorVoltageCLEAR, dewPointSensorAvail=dewPointSensorAvail, rpmSensorVoltagePeak=rpmSensorVoltagePeak, dewPointSensorName=dewPointSensorName, thdSensorName=thdSensorName, ccatSensorValueCLEAR=ccatSensorValueCLEAR, thdSensorSerial=thdSensorSerial, internalTable=internalTable, dewPointSensorHumidity=dewPointSensorHumidity, tempSensorAvail=tempSensorAvail, trap=trap, ccatSensorIndex=ccatSensorIndex, rpmSensorVoltageMaxNOTIFY=rpmSensorVoltageMaxNOTIFY, dewPointSensorDewPointNOTIFY=dewPointSensorDewPointNOTIFY, internalIO1NOTIFY=internalIO1NOTIFY, tempSensorSerial=tempSensorSerial, tempSensorTempCLEAR=tempSensorTempCLEAR, thdSensorTable=thdSensorTable, thdSensorIndex=thdSensorIndex, dewPointSensorEntry=dewPointSensorEntry, thdSensorHumidity=thdSensorHumidity, rpmSensorEnergyNOTIFY=rpmSensorEnergyNOTIFY, rpmSensorVoltagePeakCLEAR=rpmSensorVoltagePeakCLEAR, internalTestNOTIFY=internalTestNOTIFY, rpmSensorApparentPowerCLEAR=rpmSensorApparentPowerCLEAR, productVersion=productVersion, trapPrefix=trapPrefix, t3hdSensorEntry=t3hdSensorEntry, internalIO1=internalIO1, airFlowSensorIndex=airFlowSensorIndex, t3hdSensorExtAAvail=t3hdSensorExtAAvail, rpmSensorEntry=rpmSensorEntry, thdSensorHumidityNOTIFY=thdSensorHumidityNOTIFY, rpmSensorPowerFactorCLEAR=rpmSensorPowerFactorCLEAR, airFlowSensorEntry=airFlowSensorEntry, rpmSensorRealPower=rpmSensorRealPower, internalDewPointNOTIFY=internalDewPointNOTIFY, tempSensorName=tempSensorName, ccatSensorSerial=ccatSensorSerial, ccatSensorValue=ccatSensorValue, airFlowSensorDewPoint=airFlowSensorDewPoint, thdSensorTempNOTIFY=thdSensorTempNOTIFY, t3hdSensorExtAName=t3hdSensorExtAName, thdSensorDewPointNOTIFY=thdSensorDewPointNOTIFY, t3hdSensorExtATempCLEAR=t3hdSensorExtATempCLEAR, airFlowSensorSerial=airFlowSensorSerial, rpmSensorVoltageMin=rpmSensorVoltageMin, internalDewPointCLEAR=internalDewPointCLEAR, tempSensorEntry=tempSensorEntry, t3hdSensorAvail=t3hdSensorAvail, airFlowSensorTempNOTIFY=airFlowSensorTempNOTIFY, productUrl=productUrl, rpmSensorPowerFactor=rpmSensorPowerFactor, internalTempNOTIFY=internalTempNOTIFY, airFlowSensorTable=airFlowSensorTable, t3hdSensorExtATemp=t3hdSensorExtATemp, productMacAddress=productMacAddress, watchdog100=watchdog100, t3hdSensorExtBAvail=t3hdSensorExtBAvail, t3hdSensorIndex=t3hdSensorIndex)
