#
# PySNMP MIB module Wellfleet-IPSEC-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/Wellfleet-IPSEC-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 21:33:57 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, Integer, OctetString = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "Integer", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
SingleValueConstraint, ValueRangeConstraint, ValueSizeConstraint, ConstraintsUnion, ConstraintsIntersection = mibBuilder.importSymbols("ASN1-REFINEMENT", "SingleValueConstraint", "ValueRangeConstraint", "ValueSizeConstraint", "ConstraintsUnion", "ConstraintsIntersection")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
Counter64, NotificationType, iso, Bits, ObjectIdentity, ModuleIdentity, Gauge32, IpAddress, MibScalar, MibTable, MibTableRow, MibTableColumn, Unsigned32, Integer32, TimeTicks, Counter32, MibIdentifier, Opaque = mibBuilder.importSymbols("SNMPv2-SMI", "Counter64", "NotificationType", "iso", "Bits", "ObjectIdentity", "ModuleIdentity", "Gauge32", "IpAddress", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Unsigned32", "Integer32", "TimeTicks", "Counter32", "MibIdentifier", "Opaque")
TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString")
wfIpsecGroup, = mibBuilder.importSymbols("Wellfleet-COMMON-MIB", "wfIpsecGroup")
wfIpsecBase = MibIdentifier((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 26, 1))
wfIpsecBaseCreate = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 26, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("created", 1), ("deleted", 2))).clone('created')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfIpsecBaseCreate.setStatus('mandatory')
wfIpsecBaseEnable = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 26, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('enabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfIpsecBaseEnable.setStatus('mandatory')
wfIpsecBaseState = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 26, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("up", 1), ("down", 2), ("notpresent", 3))).clone('notpresent')).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfIpsecBaseState.setStatus('mandatory')
wfIpsecBaseEspEncipherEnable = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 26, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('enabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfIpsecBaseEspEncipherEnable.setStatus('mandatory')
wfIpsecBaseMaxManualSpi = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 26, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(256, 65535)).clone(384)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfIpsecBaseMaxManualSpi.setStatus('mandatory')
wfIpsecSelectorInTable = MibTable((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 26, 2), )
if mibBuilder.loadTexts: wfIpsecSelectorInTable.setStatus('mandatory')
wfIpsecSelectorInEntry = MibTableRow((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 26, 2, 1), ).setIndexNames((0, "Wellfleet-IPSEC-MIB", "wfIpsecSelectorInInterface"), (0, "Wellfleet-IPSEC-MIB", "wfIpsecSelectorInCircuit"), (0, "Wellfleet-IPSEC-MIB", "wfIpsecSelectorInPolicyNumber"), (0, "Wellfleet-IPSEC-MIB", "wfIpsecSelectorInFragment"))
if mibBuilder.loadTexts: wfIpsecSelectorInEntry.setStatus('mandatory')
wfIpsecSelectorInCreate = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 26, 2, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("created", 1), ("deleted", 2))).clone('created')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfIpsecSelectorInCreate.setStatus('mandatory')
wfIpsecSelectorInEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 26, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('enabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfIpsecSelectorInEnable.setStatus('mandatory')
wfIpsecSelectorInStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 26, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("up", 1), ("down", 2), ("inactive", 3), ("notpresent", 4))).clone('notpresent')).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfIpsecSelectorInStatus.setStatus('mandatory')
wfIpsecSelectorInCounter = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 26, 2, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfIpsecSelectorInCounter.setStatus('mandatory')
wfIpsecSelectorInDefinition = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 26, 2, 1, 5), Opaque()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfIpsecSelectorInDefinition.setStatus('mandatory')
wfIpsecSelectorInReserved = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 26, 2, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfIpsecSelectorInReserved.setStatus('mandatory')
wfIpsecSelectorInInterface = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 26, 2, 1, 7), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfIpsecSelectorInInterface.setStatus('mandatory')
wfIpsecSelectorInCircuit = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 26, 2, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfIpsecSelectorInCircuit.setStatus('mandatory')
wfIpsecSelectorInPolicyNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 26, 2, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfIpsecSelectorInPolicyNumber.setStatus('mandatory')
wfIpsecSelectorInFragment = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 26, 2, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfIpsecSelectorInFragment.setStatus('mandatory')
wfIpsecSelectorInName = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 26, 2, 1, 11), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfIpsecSelectorInName.setStatus('mandatory')
wfIpsecSelectorOutTable = MibTable((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 26, 3), )
if mibBuilder.loadTexts: wfIpsecSelectorOutTable.setStatus('mandatory')
wfIpsecSelectorOutEntry = MibTableRow((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 26, 3, 1), ).setIndexNames((0, "Wellfleet-IPSEC-MIB", "wfIpsecSelectorOutInterface"), (0, "Wellfleet-IPSEC-MIB", "wfIpsecSelectorOutCircuit"), (0, "Wellfleet-IPSEC-MIB", "wfIpsecSelectorOutPolicyNumber"), (0, "Wellfleet-IPSEC-MIB", "wfIpsecSelectorOutFragment"))
if mibBuilder.loadTexts: wfIpsecSelectorOutEntry.setStatus('mandatory')
wfIpsecSelectorOutCreate = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 26, 3, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("created", 1), ("deleted", 2))).clone('created')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfIpsecSelectorOutCreate.setStatus('mandatory')
wfIpsecSelectorOutEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 26, 3, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('enabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfIpsecSelectorOutEnable.setStatus('mandatory')
wfIpsecSelectorOutStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 26, 3, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("up", 1), ("down", 2), ("inactive", 3), ("notpresent", 4))).clone('notpresent')).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfIpsecSelectorOutStatus.setStatus('mandatory')
wfIpsecSelectorOutCounter = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 26, 3, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfIpsecSelectorOutCounter.setStatus('mandatory')
wfIpsecSelectorOutDefinition = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 26, 3, 1, 5), Opaque()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfIpsecSelectorOutDefinition.setStatus('mandatory')
wfIpsecSelectorOutReserved = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 26, 3, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfIpsecSelectorOutReserved.setStatus('mandatory')
wfIpsecSelectorOutInterface = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 26, 3, 1, 7), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfIpsecSelectorOutInterface.setStatus('mandatory')
wfIpsecSelectorOutCircuit = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 26, 3, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfIpsecSelectorOutCircuit.setStatus('mandatory')
wfIpsecSelectorOutPolicyNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 26, 3, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfIpsecSelectorOutPolicyNumber.setStatus('mandatory')
wfIpsecSelectorOutFragment = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 26, 3, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfIpsecSelectorOutFragment.setStatus('mandatory')
wfIpsecSelectorOutName = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 26, 3, 1, 11), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfIpsecSelectorOutName.setStatus('mandatory')
wfIpsecDescriptorTable = MibTable((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 26, 4), )
if mibBuilder.loadTexts: wfIpsecDescriptorTable.setStatus('mandatory')
wfIpsecDescriptorEntry = MibTableRow((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 26, 4, 1), ).setIndexNames((0, "Wellfleet-IPSEC-MIB", "wfIpsecDescriptorInterface"), (0, "Wellfleet-IPSEC-MIB", "wfIpsecDescriptorCircuit"), (0, "Wellfleet-IPSEC-MIB", "wfIpsecDescriptorPolicyNumber"))
if mibBuilder.loadTexts: wfIpsecDescriptorEntry.setStatus('mandatory')
wfIpsecDescriptorCreate = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 26, 4, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("created", 1), ("deleted", 2))).clone('created')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfIpsecDescriptorCreate.setStatus('mandatory')
wfIpsecDescriptorStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 26, 4, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("up", 1), ("down", 2), ("inactive", 3), ("notpresent", 4))).clone('notpresent')).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfIpsecDescriptorStatus.setStatus('mandatory')
wfIpsecDescriptorPolicyNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 26, 4, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfIpsecDescriptorPolicyNumber.setStatus('mandatory')
wfIpsecDescriptorInterface = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 26, 4, 1, 4), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfIpsecDescriptorInterface.setStatus('mandatory')
wfIpsecDescriptorCircuit = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 26, 4, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfIpsecDescriptorCircuit.setStatus('mandatory')
wfIpsecDescriptorManualSaList = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 26, 4, 1, 6), Opaque()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfIpsecDescriptorManualSaList.setStatus('mandatory')
wfIpsecDescriptorSaMode = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 26, 4, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("tunnel", 1), ("transport", 2))).clone('tunnel')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfIpsecDescriptorSaMode.setStatus('mandatory')
wfIpsecDescriptorPfs = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 26, 4, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("true", 1), ("false", 2))).clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfIpsecDescriptorPfs.setStatus('mandatory')
wfIpsecDescriptorProposals = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 26, 4, 1, 9), Opaque()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfIpsecDescriptorProposals.setStatus('mandatory')
wfIpsecDescriptorSourceForDestAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 26, 4, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("packet", 1), ("policy", 2))).clone('policy')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfIpsecDescriptorSourceForDestAddr.setStatus('mandatory')
wfIpsecDescriptorSourceForSrcAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 26, 4, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("packet", 1), ("policy", 2))).clone('policy')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfIpsecDescriptorSourceForSrcAddr.setStatus('mandatory')
wfIpsecDescriptorSourceForProtocol = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 26, 4, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("packet", 1), ("policy", 2))).clone('policy')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfIpsecDescriptorSourceForProtocol.setStatus('mandatory')
wfIpsecDescriptorStartSourceAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 26, 4, 1, 13), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfIpsecDescriptorStartSourceAddr.setStatus('mandatory')
wfIpsecDescriptorEndSourceAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 26, 4, 1, 14), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfIpsecDescriptorEndSourceAddr.setStatus('mandatory')
wfIpsecDescriptorStartDestAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 26, 4, 1, 15), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfIpsecDescriptorStartDestAddr.setStatus('mandatory')
wfIpsecDescriptorEndDestAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 26, 4, 1, 16), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfIpsecDescriptorEndDestAddr.setStatus('mandatory')
wfIpsecDescriptorSourcePort = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 26, 4, 1, 17), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfIpsecDescriptorSourcePort.setStatus('mandatory')
wfIpsecDescriptorProtocol = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 26, 4, 1, 18), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfIpsecDescriptorProtocol.setStatus('mandatory')
wfIpsecDescriptorPrimarySG = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 26, 4, 1, 19), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfIpsecDescriptorPrimarySG.setStatus('mandatory')
wfIpsecDescriptorInboundIdleTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 26, 4, 1, 20), Integer32().clone(15)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfIpsecDescriptorInboundIdleTimer.setStatus('mandatory')
wfIpsecDescriptorAntiReplayWindow = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 26, 4, 1, 21), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 32, 64, 128))).clone(namedValues=NamedValues(("disabled", 1), ("pkts32", 32), ("pkts64", 64), ("pkts128", 128))).clone('pkts64')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfIpsecDescriptorAntiReplayWindow.setStatus('mandatory')
wfIpsecDescriptorDestPort = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 26, 4, 1, 22), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfIpsecDescriptorDestPort.setStatus('mandatory')
wfIpsecEspSaTable = MibTable((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 26, 5), )
if mibBuilder.loadTexts: wfIpsecEspSaTable.setStatus('mandatory')
wfIpsecEspSaEntry = MibTableRow((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 26, 5, 1), ).setIndexNames((0, "Wellfleet-IPSEC-MIB", "wfIpsecEspSaSrc"), (0, "Wellfleet-IPSEC-MIB", "wfIpsecEspSaDest"), (0, "Wellfleet-IPSEC-MIB", "wfIpsecEspSaSpi"))
if mibBuilder.loadTexts: wfIpsecEspSaEntry.setStatus('mandatory')
wfIpsecEspSaCreate = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 26, 5, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("created", 1), ("deleted", 2))).clone('created')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfIpsecEspSaCreate.setStatus('mandatory')
wfIpsecEspSaStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 26, 5, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("up", 1), ("down", 2), ("inactive", 3), ("notpresent", 4))).clone('notpresent')).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfIpsecEspSaStatus.setStatus('mandatory')
wfIpsecEspSaSrc = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 26, 5, 1, 3), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfIpsecEspSaSrc.setStatus('mandatory')
wfIpsecEspSaDest = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 26, 5, 1, 4), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfIpsecEspSaDest.setStatus('mandatory')
wfIpsecEspSaSpi = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 26, 5, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfIpsecEspSaSpi.setStatus('mandatory')
wfIpsecEspSaCipherAlg = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 26, 5, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("none", 1), ("des", 2), ("desede", 3))).clone('des')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfIpsecEspSaCipherAlg.setStatus('mandatory')
wfIpsecEspSaManualCipherKey = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 26, 5, 1, 7), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfIpsecEspSaManualCipherKey.setStatus('mandatory')
wfIpsecEspSaDesKeyStrength = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 26, 5, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("fortybit", 1), ("fiftysixbit", 2))).clone('fiftysixbit')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfIpsecEspSaDesKeyStrength.setStatus('mandatory')
wfIpsecEspSaIntegrityAlg = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 26, 5, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("none", 1), ("hmacMd5", 2), ("hmacSha1", 3))).clone('none')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfIpsecEspSaIntegrityAlg.setStatus('mandatory')
wfIpsecEspSaManualIntegrityKey = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 26, 5, 1, 10), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfIpsecEspSaManualIntegrityKey.setStatus('mandatory')
wfIpsecEspSaVerifyPad = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 26, 5, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfIpsecEspSaVerifyPad.setStatus('mandatory')
wfIpsecEspSaReset = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 26, 5, 1, 12), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfIpsecEspSaReset.setStatus('mandatory')
wfIpsecEspSaBadAuthen = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 26, 5, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfIpsecEspSaBadAuthen.setStatus('mandatory')
wfIpsecEspSaBadDecrypt = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 26, 5, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfIpsecEspSaBadDecrypt.setStatus('mandatory')
wfIpsecEspSaBadPad = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 26, 5, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfIpsecEspSaBadPad.setStatus('mandatory')
wfIpsecEspSaProtectPkt = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 26, 5, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfIpsecEspSaProtectPkt.setStatus('mandatory')
wfIpsecEspSaUnprotectPkt = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 26, 5, 1, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfIpsecEspSaUnprotectPkt.setStatus('mandatory')
wfIpsecEspSaEncryptByte = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 26, 5, 1, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfIpsecEspSaEncryptByte.setStatus('mandatory')
wfIpsecEspSaDecryptByte = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 26, 5, 1, 19), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfIpsecEspSaDecryptByte.setStatus('mandatory')
wfIpsecEspSaMode = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 26, 5, 1, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("tunnel", 1), ("transport", 2))).clone('tunnel')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfIpsecEspSaMode.setStatus('mandatory')
wfIpsecEspSaPfs = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 26, 5, 1, 21), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("true", 1), ("false", 2))).clone('true')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfIpsecEspSaPfs.setStatus('mandatory')
wfIpsecEspSaExpiryType = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 26, 5, 1, 22), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("seconds", 1), ("kilobytes", 2), ("none", 3))).clone('none')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfIpsecEspSaExpiryType.setStatus('mandatory')
wfIpsecEspSaExpiryValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 26, 5, 1, 23), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfIpsecEspSaExpiryValue.setStatus('mandatory')
wfIpsecStatsTable = MibTable((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 26, 6), )
if mibBuilder.loadTexts: wfIpsecStatsTable.setStatus('mandatory')
wfIpsecStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 26, 6, 1), ).setIndexNames((0, "Wellfleet-IPSEC-MIB", "wfIpsecStatsInterface"), (0, "Wellfleet-IPSEC-MIB", "wfIpsecStatsCircuit"))
if mibBuilder.loadTexts: wfIpsecStatsEntry.setStatus('mandatory')
wfIpsecStatsCreate = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 26, 6, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("created", 1), ("deleted", 2))).clone('created')).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfIpsecStatsCreate.setStatus('mandatory')
wfIpsecStatsInterface = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 26, 6, 1, 2), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfIpsecStatsInterface.setStatus('mandatory')
wfIpsecStatsCircuit = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 26, 6, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfIpsecStatsCircuit.setStatus('mandatory')
wfIpsecStatsReset = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 26, 6, 1, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfIpsecStatsReset.setStatus('mandatory')
wfIpsecStatsUnprotectPkt = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 26, 6, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfIpsecStatsUnprotectPkt.setStatus('mandatory')
wfIpsecStatsProtectPkt = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 26, 6, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfIpsecStatsProtectPkt.setStatus('mandatory')
wfIpsecStatsBypassPkt = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 26, 6, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfIpsecStatsBypassPkt.setStatus('mandatory')
wfIpsecStatsDropPkt = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 26, 6, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfIpsecStatsDropPkt.setStatus('mandatory')
wfIpsecStatsNoSa = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 26, 6, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfIpsecStatsNoSa.setStatus('mandatory')
wfIpsecStatsLastBadSpi = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 26, 6, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfIpsecStatsLastBadSpi.setStatus('mandatory')
wfIpsecStatsNoPolicyMatch = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 26, 6, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfIpsecStatsNoPolicyMatch.setStatus('mandatory')
wfIpsecStatsSaExpDropBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 26, 6, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfIpsecStatsSaExpDropBytes.setStatus('mandatory')
wfIpsecStatsOutClips = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 26, 6, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfIpsecStatsOutClips.setStatus('mandatory')
wfIpsecStatsInClips = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 26, 6, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfIpsecStatsInClips.setStatus('mandatory')
wfIpsecRemoteGatewayTable = MibTable((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 26, 7), )
if mibBuilder.loadTexts: wfIpsecRemoteGatewayTable.setStatus('mandatory')
wfIpsecRemoteGatewayEntry = MibTableRow((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 26, 7, 1), ).setIndexNames((0, "Wellfleet-IPSEC-MIB", "wfIpsecRemoteGatewayInterface"), (0, "Wellfleet-IPSEC-MIB", "wfIpsecRemoteGatewayCircuit"), (0, "Wellfleet-IPSEC-MIB", "wfIpsecRemoteGatewayIndex"))
if mibBuilder.loadTexts: wfIpsecRemoteGatewayEntry.setStatus('mandatory')
wfIpsecRemoteGatewayCreate = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 26, 7, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("created", 1), ("deleted", 2))).clone('created')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfIpsecRemoteGatewayCreate.setStatus('mandatory')
wfIpsecRemoteGatewayEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 26, 7, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('enabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfIpsecRemoteGatewayEnable.setStatus('mandatory')
wfIpsecRemoteGatewayStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 26, 7, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("active", 1), ("error", 2), ("inactive", 3), ("notpresent", 4))).clone('notpresent')).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfIpsecRemoteGatewayStatus.setStatus('mandatory')
wfIpsecRemoteGatewayInterface = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 26, 7, 1, 4), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfIpsecRemoteGatewayInterface.setStatus('mandatory')
wfIpsecRemoteGatewayCircuit = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 26, 7, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfIpsecRemoteGatewayCircuit.setStatus('mandatory')
wfIpsecRemoteGatewayIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 26, 7, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfIpsecRemoteGatewayIndex.setStatus('mandatory')
wfIpsecRemoteGatewayIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 26, 7, 1, 7), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfIpsecRemoteGatewayIpAddr.setStatus('mandatory')
wfIpsecRemoteGatewayRange = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 26, 7, 1, 8), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfIpsecRemoteGatewayRange.setStatus('mandatory')
wfIpsecRemoteGatewayName = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 26, 7, 1, 9), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfIpsecRemoteGatewayName.setStatus('mandatory')
wfIpsecProposalTable = MibTable((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 26, 8), )
if mibBuilder.loadTexts: wfIpsecProposalTable.setStatus('mandatory')
wfIpsecProposalEntry = MibTableRow((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 26, 8, 1), ).setIndexNames((0, "Wellfleet-IPSEC-MIB", "wfIpsecProposalNumber"))
if mibBuilder.loadTexts: wfIpsecProposalEntry.setStatus('mandatory')
wfIpsecProposalCreate = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 26, 8, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("created", 1), ("deleted", 2))).clone('created')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfIpsecProposalCreate.setStatus('mandatory')
wfIpsecProposalStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 26, 8, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("active", 1), ("error", 2), ("inactive", 3), ("notpresent", 4))).clone('notpresent')).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfIpsecProposalStatus.setStatus('mandatory')
wfIpsecProposalName = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 26, 8, 1, 3), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfIpsecProposalName.setStatus('mandatory')
wfIpsecProposalNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 26, 8, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfIpsecProposalNumber.setStatus('mandatory')
wfIpsecProposalSuites = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 26, 8, 1, 5), Opaque()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfIpsecProposalSuites.setStatus('mandatory')
wfIpsecSuiteTable = MibTable((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 26, 9), )
if mibBuilder.loadTexts: wfIpsecSuiteTable.setStatus('mandatory')
wfIpsecSuiteEntry = MibTableRow((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 26, 9, 1), ).setIndexNames((0, "Wellfleet-IPSEC-MIB", "wfIpsecSuiteNumber"))
if mibBuilder.loadTexts: wfIpsecSuiteEntry.setStatus('mandatory')
wfIpsecSuiteCreate = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 26, 9, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("created", 1), ("deleted", 2))).clone('created')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfIpsecSuiteCreate.setStatus('mandatory')
wfIpsecSuiteStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 26, 9, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("active", 1), ("error", 2), ("inactive", 3), ("notpresent", 4))).clone('notpresent')).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfIpsecSuiteStatus.setStatus('mandatory')
wfIpsecSuiteName = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 26, 9, 1, 3), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfIpsecSuiteName.setStatus('mandatory')
wfIpsecSuiteNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 26, 9, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfIpsecSuiteNumber.setStatus('mandatory')
wfIpsecSuiteEspProtocol = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 26, 9, 1, 5), Opaque()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfIpsecSuiteEspProtocol.setStatus('mandatory')
wfIpsecSuiteAhProtocol = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 26, 9, 1, 6), Opaque()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfIpsecSuiteAhProtocol.setStatus('mandatory')
wfIpsecEspTransformTable = MibTable((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 26, 10), )
if mibBuilder.loadTexts: wfIpsecEspTransformTable.setStatus('mandatory')
wfIpsecEspTransformEntry = MibTableRow((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 26, 10, 1), ).setIndexNames((0, "Wellfleet-IPSEC-MIB", "wfIpsecEspTransformNumber"))
if mibBuilder.loadTexts: wfIpsecEspTransformEntry.setStatus('mandatory')
wfIpsecEspTransformCreate = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 26, 10, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("created", 1), ("deleted", 2))).clone('created')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfIpsecEspTransformCreate.setStatus('mandatory')
wfIpsecEspTransformStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 26, 10, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("active", 1), ("error", 2), ("inactive", 3), ("notpresent", 4))).clone('notpresent')).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfIpsecEspTransformStatus.setStatus('mandatory')
wfIpsecEspTransformName = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 26, 10, 1, 3), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfIpsecEspTransformName.setStatus('mandatory')
wfIpsecEspTransformNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 26, 10, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfIpsecEspTransformNumber.setStatus('mandatory')
wfIpsecEspTransformCipherAlg = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 26, 10, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("none", 1), ("des", 2), ("desede", 3))).clone('des')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfIpsecEspTransformCipherAlg.setStatus('mandatory')
wfIpsecEspTransformKeyLength = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 26, 10, 1, 6), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfIpsecEspTransformKeyLength.setStatus('mandatory')
wfIpsecEspTransformIntegrityAlg = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 26, 10, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("none", 1), ("hmacMd5", 2), ("hmacSha1", 3))).clone('none')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfIpsecEspTransformIntegrityAlg.setStatus('mandatory')
wfIpsecEspTransformExpiryTime = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 26, 10, 1, 8), Integer32().clone(480)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfIpsecEspTransformExpiryTime.setStatus('mandatory')
wfIpsecEspTransformExpiryMBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 26, 10, 1, 9), Integer32().clone(1024)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfIpsecEspTransformExpiryMBytes.setStatus('mandatory')
wfIpsecEspTransformExpiryPref = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 26, 10, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("minutes", 1), ("mbytes", 2))).clone('minutes')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfIpsecEspTransformExpiryPref.setStatus('mandatory')
wfIpsecAhTransformTable = MibTable((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 26, 11), )
if mibBuilder.loadTexts: wfIpsecAhTransformTable.setStatus('mandatory')
wfIpsecAhTransformEntry = MibTableRow((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 26, 11, 1), ).setIndexNames((0, "Wellfleet-IPSEC-MIB", "wfIpsecAhTransformNumber"))
if mibBuilder.loadTexts: wfIpsecAhTransformEntry.setStatus('mandatory')
wfIpsecAhTransformCreate = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 26, 11, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("created", 1), ("deleted", 2))).clone('created')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfIpsecAhTransformCreate.setStatus('mandatory')
wfIpsecAhTransformStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 26, 11, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("active", 1), ("error", 2), ("inactive", 3), ("notpresent", 4))).clone('notpresent')).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfIpsecAhTransformStatus.setStatus('mandatory')
wfIpsecAhTransformName = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 26, 11, 1, 3), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfIpsecAhTransformName.setStatus('mandatory')
wfIpsecAhTransformNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 26, 11, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfIpsecAhTransformNumber.setStatus('mandatory')
wfIpsecAhTransformIntegrityAlg = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 26, 11, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("none", 1), ("hmacMd5", 2), ("hmacSha1", 3))).clone('hmacMd5')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfIpsecAhTransformIntegrityAlg.setStatus('mandatory')
wfIpsecAhTransformGroup = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 26, 11, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("one", 1))).clone('one')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfIpsecAhTransformGroup.setStatus('mandatory')
wfIpsecAhTransformExpiryType = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 26, 11, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("seconds", 1), ("kilobytes", 2), ("none", 3))).clone('kilobytes')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfIpsecAhTransformExpiryType.setStatus('mandatory')
wfIpsecAhTransformExpiryValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 26, 11, 1, 8), Integer32().clone(1024)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfIpsecAhTransformExpiryValue.setStatus('mandatory')
wfIpsecSaStatsTable = MibTable((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 26, 12), )
if mibBuilder.loadTexts: wfIpsecSaStatsTable.setStatus('mandatory')
wfIpsecSaStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 26, 12, 1), ).setIndexNames((0, "Wellfleet-IPSEC-MIB", "wfIpsecSaStatsSrc"), (0, "Wellfleet-IPSEC-MIB", "wfIpsecSaStatsDest"), (0, "Wellfleet-IPSEC-MIB", "wfIpsecSaStatsSpi"))
if mibBuilder.loadTexts: wfIpsecSaStatsEntry.setStatus('mandatory')
wfIpsecSaStatsStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 26, 12, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("up", 1), ("down", 2), ("inactive", 3), ("notpresent", 4))).clone('notpresent')).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfIpsecSaStatsStatus.setStatus('mandatory')
wfIpsecSaStatsSrc = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 26, 12, 1, 2), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfIpsecSaStatsSrc.setStatus('mandatory')
wfIpsecSaStatsDest = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 26, 12, 1, 3), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfIpsecSaStatsDest.setStatus('mandatory')
wfIpsecSaStatsSpi = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 26, 12, 1, 4), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfIpsecSaStatsSpi.setStatus('mandatory')
wfIpsecSaStatsProto = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 26, 12, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("none", 1), ("esp", 2), ("ah", 3))).clone('none')).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfIpsecSaStatsProto.setStatus('mandatory')
wfIpsecSaStatsCipherAlg = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 26, 12, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("none", 1), ("des", 2), ("desede", 3))).clone('des')).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfIpsecSaStatsCipherAlg.setStatus('mandatory')
wfIpsecSaStatsIntegrityAlg = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 26, 12, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("none", 1), ("hmacMd5", 2), ("hmacSha1", 3))).clone('none')).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfIpsecSaStatsIntegrityAlg.setStatus('mandatory')
wfIpsecSaStatsBadAuthen = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 26, 12, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfIpsecSaStatsBadAuthen.setStatus('mandatory')
wfIpsecSaStatsBadDecrypt = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 26, 12, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfIpsecSaStatsBadDecrypt.setStatus('mandatory')
wfIpsecSaStatsBadPad = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 26, 12, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfIpsecSaStatsBadPad.setStatus('mandatory')
wfIpsecSaStatsProtectPkt = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 26, 12, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfIpsecSaStatsProtectPkt.setStatus('mandatory')
wfIpsecSaStatsUnprotectPkt = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 26, 12, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfIpsecSaStatsUnprotectPkt.setStatus('mandatory')
wfIpsecSaStatsEncryptByte = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 26, 12, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfIpsecSaStatsEncryptByte.setStatus('mandatory')
wfIpsecSaStatsDecryptByte = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 26, 12, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfIpsecSaStatsDecryptByte.setStatus('mandatory')
wfIpsecSaStatsMode = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 26, 12, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("tunnel", 1), ("transport", 2))).clone('tunnel')).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfIpsecSaStatsMode.setStatus('mandatory')
wfIpsecSaStatsPfs = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 26, 12, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("true", 1), ("false", 2))).clone('true')).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfIpsecSaStatsPfs.setStatus('mandatory')
wfIpsecSaStatsExpiryType = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 26, 12, 1, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("seconds", 1), ("kilobytes", 2), ("none", 3))).clone('none')).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfIpsecSaStatsExpiryType.setStatus('mandatory')
wfIpsecSaStatsExpiryValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 26, 12, 1, 18), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfIpsecSaStatsExpiryValue.setStatus('mandatory')
mibBuilder.exportSymbols("Wellfleet-IPSEC-MIB", wfIpsecAhTransformExpiryType=wfIpsecAhTransformExpiryType, wfIpsecDescriptorSaMode=wfIpsecDescriptorSaMode, wfIpsecStatsSaExpDropBytes=wfIpsecStatsSaExpDropBytes, wfIpsecDescriptorManualSaList=wfIpsecDescriptorManualSaList, wfIpsecEspTransformExpiryTime=wfIpsecEspTransformExpiryTime, wfIpsecStatsCircuit=wfIpsecStatsCircuit, wfIpsecEspSaCipherAlg=wfIpsecEspSaCipherAlg, wfIpsecEspTransformTable=wfIpsecEspTransformTable, wfIpsecSelectorOutDefinition=wfIpsecSelectorOutDefinition, wfIpsecSaStatsExpiryType=wfIpsecSaStatsExpiryType, wfIpsecDescriptorEndDestAddr=wfIpsecDescriptorEndDestAddr, wfIpsecDescriptorPrimarySG=wfIpsecDescriptorPrimarySG, wfIpsecBaseMaxManualSpi=wfIpsecBaseMaxManualSpi, wfIpsecSaStatsCipherAlg=wfIpsecSaStatsCipherAlg, wfIpsecSaStatsMode=wfIpsecSaStatsMode, wfIpsecDescriptorSourceForDestAddr=wfIpsecDescriptorSourceForDestAddr, wfIpsecProposalEntry=wfIpsecProposalEntry, wfIpsecSuiteTable=wfIpsecSuiteTable, wfIpsecSuiteAhProtocol=wfIpsecSuiteAhProtocol, wfIpsecRemoteGatewayEnable=wfIpsecRemoteGatewayEnable, wfIpsecAhTransformExpiryValue=wfIpsecAhTransformExpiryValue, wfIpsecSelectorOutStatus=wfIpsecSelectorOutStatus, wfIpsecStatsOutClips=wfIpsecStatsOutClips, wfIpsecSelectorInCounter=wfIpsecSelectorInCounter, wfIpsecBaseEspEncipherEnable=wfIpsecBaseEspEncipherEnable, wfIpsecEspSaEntry=wfIpsecEspSaEntry, wfIpsecSelectorInCreate=wfIpsecSelectorInCreate, wfIpsecSaStatsProto=wfIpsecSaStatsProto, wfIpsecEspSaIntegrityAlg=wfIpsecEspSaIntegrityAlg, wfIpsecDescriptorDestPort=wfIpsecDescriptorDestPort, wfIpsecSaStatsProtectPkt=wfIpsecSaStatsProtectPkt, wfIpsecSelectorInStatus=wfIpsecSelectorInStatus, wfIpsecEspSaStatus=wfIpsecEspSaStatus, wfIpsecSelectorOutEntry=wfIpsecSelectorOutEntry, wfIpsecDescriptorSourcePort=wfIpsecDescriptorSourcePort, wfIpsecDescriptorCircuit=wfIpsecDescriptorCircuit, wfIpsecStatsInterface=wfIpsecStatsInterface, wfIpsecSelectorInPolicyNumber=wfIpsecSelectorInPolicyNumber, wfIpsecDescriptorSourceForProtocol=wfIpsecDescriptorSourceForProtocol, wfIpsecSaStatsBadAuthen=wfIpsecSaStatsBadAuthen, wfIpsecStatsBypassPkt=wfIpsecStatsBypassPkt, wfIpsecRemoteGatewayCircuit=wfIpsecRemoteGatewayCircuit, wfIpsecEspTransformName=wfIpsecEspTransformName, wfIpsecDescriptorStatus=wfIpsecDescriptorStatus, wfIpsecProposalSuites=wfIpsecProposalSuites, wfIpsecDescriptorInboundIdleTimer=wfIpsecDescriptorInboundIdleTimer, wfIpsecEspSaBadPad=wfIpsecEspSaBadPad, wfIpsecSelectorOutFragment=wfIpsecSelectorOutFragment, wfIpsecSelectorInEnable=wfIpsecSelectorInEnable, wfIpsecEspTransformExpiryPref=wfIpsecEspTransformExpiryPref, wfIpsecDescriptorInterface=wfIpsecDescriptorInterface, wfIpsecStatsCreate=wfIpsecStatsCreate, wfIpsecSelectorInDefinition=wfIpsecSelectorInDefinition, wfIpsecDescriptorSourceForSrcAddr=wfIpsecDescriptorSourceForSrcAddr, wfIpsecDescriptorCreate=wfIpsecDescriptorCreate, wfIpsecStatsLastBadSpi=wfIpsecStatsLastBadSpi, wfIpsecEspSaExpiryValue=wfIpsecEspSaExpiryValue, wfIpsecSaStatsSpi=wfIpsecSaStatsSpi, wfIpsecSelectorOutName=wfIpsecSelectorOutName, wfIpsecRemoteGatewayIndex=wfIpsecRemoteGatewayIndex, wfIpsecSelectorInInterface=wfIpsecSelectorInInterface, wfIpsecAhTransformEntry=wfIpsecAhTransformEntry, wfIpsecDescriptorEntry=wfIpsecDescriptorEntry, wfIpsecAhTransformName=wfIpsecAhTransformName, wfIpsecAhTransformStatus=wfIpsecAhTransformStatus, wfIpsecStatsUnprotectPkt=wfIpsecStatsUnprotectPkt, wfIpsecDescriptorPfs=wfIpsecDescriptorPfs, wfIpsecSelectorInCircuit=wfIpsecSelectorInCircuit, wfIpsecEspSaDesKeyStrength=wfIpsecEspSaDesKeyStrength, wfIpsecEspSaManualCipherKey=wfIpsecEspSaManualCipherKey, wfIpsecSaStatsDest=wfIpsecSaStatsDest, wfIpsecRemoteGatewayEntry=wfIpsecRemoteGatewayEntry, wfIpsecBaseState=wfIpsecBaseState, wfIpsecEspSaVerifyPad=wfIpsecEspSaVerifyPad, wfIpsecEspTransformEntry=wfIpsecEspTransformEntry, wfIpsecEspSaPfs=wfIpsecEspSaPfs, wfIpsecAhTransformTable=wfIpsecAhTransformTable, wfIpsecDescriptorProposals=wfIpsecDescriptorProposals, wfIpsecAhTransformIntegrityAlg=wfIpsecAhTransformIntegrityAlg, wfIpsecSaStatsEncryptByte=wfIpsecSaStatsEncryptByte, wfIpsecEspTransformNumber=wfIpsecEspTransformNumber, wfIpsecRemoteGatewayStatus=wfIpsecRemoteGatewayStatus, wfIpsecEspSaManualIntegrityKey=wfIpsecEspSaManualIntegrityKey, wfIpsecStatsInClips=wfIpsecStatsInClips, wfIpsecEspTransformCipherAlg=wfIpsecEspTransformCipherAlg, wfIpsecSaStatsBadPad=wfIpsecSaStatsBadPad, wfIpsecDescriptorStartDestAddr=wfIpsecDescriptorStartDestAddr, wfIpsecEspSaTable=wfIpsecEspSaTable, wfIpsecAhTransformNumber=wfIpsecAhTransformNumber, wfIpsecSuiteCreate=wfIpsecSuiteCreate, wfIpsecRemoteGatewayInterface=wfIpsecRemoteGatewayInterface, wfIpsecProposalCreate=wfIpsecProposalCreate, wfIpsecProposalTable=wfIpsecProposalTable, wfIpsecEspSaBadDecrypt=wfIpsecEspSaBadDecrypt, wfIpsecBase=wfIpsecBase, wfIpsecStatsNoSa=wfIpsecStatsNoSa, wfIpsecRemoteGatewayName=wfIpsecRemoteGatewayName, wfIpsecEspSaCreate=wfIpsecEspSaCreate, wfIpsecEspSaEncryptByte=wfIpsecEspSaEncryptByte, wfIpsecSelectorInReserved=wfIpsecSelectorInReserved, wfIpsecSelectorOutPolicyNumber=wfIpsecSelectorOutPolicyNumber, wfIpsecRemoteGatewayCreate=wfIpsecRemoteGatewayCreate, wfIpsecEspTransformIntegrityAlg=wfIpsecEspTransformIntegrityAlg, wfIpsecEspSaMode=wfIpsecEspSaMode, wfIpsecSaStatsStatus=wfIpsecSaStatsStatus, wfIpsecEspSaExpiryType=wfIpsecEspSaExpiryType, wfIpsecStatsNoPolicyMatch=wfIpsecStatsNoPolicyMatch, wfIpsecSaStatsDecryptByte=wfIpsecSaStatsDecryptByte, wfIpsecSelectorOutInterface=wfIpsecSelectorOutInterface, wfIpsecSelectorOutTable=wfIpsecSelectorOutTable, wfIpsecStatsProtectPkt=wfIpsecStatsProtectPkt, wfIpsecSelectorOutCircuit=wfIpsecSelectorOutCircuit, wfIpsecProposalName=wfIpsecProposalName, wfIpsecSuiteNumber=wfIpsecSuiteNumber, wfIpsecAhTransformGroup=wfIpsecAhTransformGroup, wfIpsecEspSaUnprotectPkt=wfIpsecEspSaUnprotectPkt, wfIpsecEspSaDecryptByte=wfIpsecEspSaDecryptByte, wfIpsecSuiteEntry=wfIpsecSuiteEntry, wfIpsecAhTransformCreate=wfIpsecAhTransformCreate, wfIpsecDescriptorTable=wfIpsecDescriptorTable, wfIpsecBaseCreate=wfIpsecBaseCreate, wfIpsecEspSaBadAuthen=wfIpsecEspSaBadAuthen, wfIpsecStatsReset=wfIpsecStatsReset, wfIpsecSaStatsSrc=wfIpsecSaStatsSrc, wfIpsecSelectorOutReserved=wfIpsecSelectorOutReserved, wfIpsecSaStatsTable=wfIpsecSaStatsTable, wfIpsecEspTransformCreate=wfIpsecEspTransformCreate, wfIpsecEspSaSpi=wfIpsecEspSaSpi, wfIpsecSaStatsExpiryValue=wfIpsecSaStatsExpiryValue, wfIpsecDescriptorPolicyNumber=wfIpsecDescriptorPolicyNumber, wfIpsecSelectorInName=wfIpsecSelectorInName, wfIpsecRemoteGatewayIpAddr=wfIpsecRemoteGatewayIpAddr, wfIpsecSelectorInFragment=wfIpsecSelectorInFragment, wfIpsecEspTransformExpiryMBytes=wfIpsecEspTransformExpiryMBytes, wfIpsecSelectorOutCounter=wfIpsecSelectorOutCounter, wfIpsecRemoteGatewayTable=wfIpsecRemoteGatewayTable, wfIpsecEspSaDest=wfIpsecEspSaDest, wfIpsecSaStatsIntegrityAlg=wfIpsecSaStatsIntegrityAlg, wfIpsecSaStatsUnprotectPkt=wfIpsecSaStatsUnprotectPkt, wfIpsecSuiteEspProtocol=wfIpsecSuiteEspProtocol, wfIpsecDescriptorProtocol=wfIpsecDescriptorProtocol, wfIpsecEspSaReset=wfIpsecEspSaReset, wfIpsecBaseEnable=wfIpsecBaseEnable, wfIpsecSaStatsPfs=wfIpsecSaStatsPfs, wfIpsecStatsDropPkt=wfIpsecStatsDropPkt, wfIpsecSaStatsEntry=wfIpsecSaStatsEntry, wfIpsecStatsTable=wfIpsecStatsTable, wfIpsecEspSaSrc=wfIpsecEspSaSrc, wfIpsecEspSaProtectPkt=wfIpsecEspSaProtectPkt, wfIpsecRemoteGatewayRange=wfIpsecRemoteGatewayRange, wfIpsecSaStatsBadDecrypt=wfIpsecSaStatsBadDecrypt, wfIpsecEspTransformKeyLength=wfIpsecEspTransformKeyLength, wfIpsecSelectorOutEnable=wfIpsecSelectorOutEnable, wfIpsecDescriptorAntiReplayWindow=wfIpsecDescriptorAntiReplayWindow, wfIpsecDescriptorEndSourceAddr=wfIpsecDescriptorEndSourceAddr, wfIpsecSelectorInTable=wfIpsecSelectorInTable, wfIpsecStatsEntry=wfIpsecStatsEntry, wfIpsecSuiteName=wfIpsecSuiteName, wfIpsecProposalStatus=wfIpsecProposalStatus, wfIpsecSelectorInEntry=wfIpsecSelectorInEntry, wfIpsecSelectorOutCreate=wfIpsecSelectorOutCreate, wfIpsecSuiteStatus=wfIpsecSuiteStatus, wfIpsecDescriptorStartSourceAddr=wfIpsecDescriptorStartSourceAddr, wfIpsecProposalNumber=wfIpsecProposalNumber, wfIpsecEspTransformStatus=wfIpsecEspTransformStatus)
