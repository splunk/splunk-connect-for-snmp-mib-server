#
# PySNMP MIB module WAG102 (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/WAG102
# Produced by pysmi-0.3.4 at Mon Apr 29 21:28:49 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, OctetString, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "Integer", "OctetString", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsUnion, ValueRangeConstraint, SingleValueConstraint, ConstraintsIntersection, ValueSizeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsUnion", "ValueRangeConstraint", "SingleValueConstraint", "ConstraintsIntersection", "ValueSizeConstraint")
ObjectGroup, ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ObjectGroup", "ModuleCompliance", "NotificationGroup")
ModuleIdentity, enterprises, MibIdentifier, Bits, Counter32, NotificationType, IpAddress, MibScalar, MibTable, MibTableRow, MibTableColumn, Counter64, TimeTicks, Gauge32, ObjectIdentity, Integer32, iso, Unsigned32 = mibBuilder.importSymbols("SNMPv2-SMI", "ModuleIdentity", "enterprises", "MibIdentifier", "Bits", "Counter32", "NotificationType", "IpAddress", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Counter64", "TimeTicks", "Gauge32", "ObjectIdentity", "Integer32", "iso", "Unsigned32")
DisplayString, TruthValue, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TruthValue", "TextualConvention")
wag102 = ModuleIdentity((1, 3, 6, 1, 4, 1, 4526, 4, 5))
if mibBuilder.loadTexts: wag102.setLastUpdated('200511181000Z')
if mibBuilder.loadTexts: wag102.setOrganization('NETGEAR Inc.')
netgear = MibIdentifier((1, 3, 6, 1, 4, 1, 4526))
wireless = MibIdentifier((1, 3, 6, 1, 4, 1, 4526, 4))
sysSettings = MibIdentifier((1, 3, 6, 1, 4, 1, 4526, 4, 5, 1))
sysMacAddress = MibScalar((1, 3, 6, 1, 4, 1, 4526, 4, 5, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(6, 17))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysMacAddress.setStatus('current')
sysVersion = MibScalar((1, 3, 6, 1, 4, 1, 4526, 4, 5, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysVersion.setStatus('current')
sysAPName = MibScalar((1, 3, 6, 1, 4, 1, 4526, 4, 5, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysAPName.setStatus('current')
sysAdminName = MibScalar((1, 3, 6, 1, 4, 1, 4526, 4, 5, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32)))
if mibBuilder.loadTexts: sysAdminName.setStatus('current')
sysAdminPasswd = MibScalar((1, 3, 6, 1, 4, 1, 4526, 4, 5, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32)))
if mibBuilder.loadTexts: sysAdminPasswd.setStatus('current')
sysCountryRegion = MibScalar((1, 3, 6, 1, 4, 1, 4526, 4, 5, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(410, 36, 124, 208, 40, 246, 250, 276, 372, 380, 392, 484, 528, 554, 578, 630, 340, 724, 752, 756, 826, 840))).clone(namedValues=NamedValues(("asia", 410), ("australia", 36), ("canada", 124), ("denmark", 208), ("europe", 40), ("finland", 246), ("france", 250), ("germany", 276), ("ireland", 372), ("italy", 380), ("japan", 392), ("mexico", 484), ("netherlands", 528), ("newZealand", 554), ("norway", 578), ("puertoRico", 630), ("southAmerica", 340), ("spain", 724), ("sweden", 752), ("switzerland", 756), ("unitedKingdom", 826), ("unitedStates", 840)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysCountryRegion.setStatus('current')
timeSettings = MibIdentifier((1, 3, 6, 1, 4, 1, 4526, 4, 5, 1, 8))
timeCurrentTime = MibScalar((1, 3, 6, 1, 4, 1, 4526, 4, 5, 1, 8, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 20))).setMaxAccess("readonly")
if mibBuilder.loadTexts: timeCurrentTime.setStatus('current')
timeTimeZone = MibScalar((1, 3, 6, 1, 4, 1, 4526, 4, 5, 1, 8, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30))).clone(namedValues=NamedValues(("gmt00UkGreenWichCasablancaMonrovia", 0), ("gmtwest12EniwetokKwajalein", 1), ("gmtwest11MidwayIslandSamoa", 2), ("gmtwest10Hawaii", 3), ("gmtwest9dot5MarqesasIs", 4), ("gmtwest09Alaska", 5), ("gmtwest8dot5PitciarnIs", 6), ("gmtwest08PacificTimeUsCanada", 7), ("gmtwest07MountainTimeUsArizona", 8), ("gmtwest06CentralTimeUsMexicoCityTequciqalpa", 9), ("gmtwest05EasternTimeUsBogotaLimaQuitoIndianaEast", 10), ("gmtwest04CaracasLaPaz", 11), ("gmtwest3dot5Newfoundland", 12), ("gmtwest03BrasiliaBeunosAiresGeorgetown", 13), ("gmtwest02MidAtlantic", 14), ("gmtwest01AzoresCapeVerdeIs", 15), ("gmteast01Europe", 16), ("gmteast02EgyptFinlandRomaniaTurkeyGreeceIsraelJordan", 17), ("gmteast03IraqSyriaRussia", 18), ("gmteast3dot5Iran", 19), ("gmteast04ArmeniaAzerbaijan", 20), ("gmteast4dot5Afghanistan", 21), ("gmteast05RussiaPakistan", 22), ("gmteast5dot5India", 23), ("gmteast06BangladeshRussia", 24), ("gmteast6dot5Burma", 25), ("gmteast07RussiaThailandCombodiaLaos", 26), ("gmteast08RussiaChinaMongoliaIndonesiaPhilippinesTaiwanWA", 27), ("gmteast09RussiaJapanKorea", 28), ("gmteast9dot5AdelaideDarwin", 29), ("gmteast10EasternStandardAustRussiaGaumPapuaNewGuinea", 30)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: timeTimeZone.setStatus('current')
timeDaylightSaving = MibScalar((1, 3, 6, 1, 4, 1, 4526, 4, 5, 1, 8, 3), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: timeDaylightSaving.setStatus('current')
ipSettings = MibIdentifier((1, 3, 6, 1, 4, 1, 4526, 4, 5, 1, 9))
ipDhcpClientEnable = MibScalar((1, 3, 6, 1, 4, 1, 4526, 4, 5, 1, 9, 1), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipDhcpClientEnable.setStatus('current')
ipIPAddress = MibScalar((1, 3, 6, 1, 4, 1, 4526, 4, 5, 1, 9, 2), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipIPAddress.setStatus('current')
ipNetmask = MibScalar((1, 3, 6, 1, 4, 1, 4526, 4, 5, 1, 9, 3), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipNetmask.setStatus('current')
ipGateway = MibScalar((1, 3, 6, 1, 4, 1, 4526, 4, 5, 1, 9, 4), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipGateway.setStatus('current')
ipDnsServer = MibScalar((1, 3, 6, 1, 4, 1, 4526, 4, 5, 1, 9, 5), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipDnsServer.setStatus('current')
wlanSettings = MibIdentifier((1, 3, 6, 1, 4, 1, 4526, 4, 5, 2))
wlanSettingTable = MibTable((1, 3, 6, 1, 4, 1, 4526, 4, 5, 2, 1), )
if mibBuilder.loadTexts: wlanSettingTable.setStatus('current')
wlanSettingEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4526, 4, 5, 2, 1, 1), ).setIndexNames((0, "WAG102", "radioIndex"))
if mibBuilder.loadTexts: wlanSettingEntry.setStatus('current')
radioIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 4526, 4, 5, 2, 1, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("dot11a", 0), ("dot11bg", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: radioIndex.setStatus('current')
radioEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 4526, 4, 5, 2, 1, 1, 2), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: radioEnable.setStatus('current')
wirelessMode = MibTableColumn((1, 3, 6, 1, 4, 1, 4526, 4, 5, 2, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("auto", 0), ("dot11a", 1), ("dot11b", 2), ("dot11g", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wirelessMode.setStatus('current')
channel = MibTableColumn((1, 3, 6, 1, 4, 1, 4526, 4, 5, 2, 1, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 165))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: channel.setStatus('current')
txRate = MibTableColumn((1, 3, 6, 1, 4, 1, 4526, 4, 5, 2, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12))).clone(namedValues=NamedValues(("best", 0), ("rate1Mbps", 1), ("rate2Mbps", 2), ("rate5dot5Mbps", 3), ("rate6Mbps", 4), ("rate9Mbps", 5), ("rate11Mbps", 6), ("rate12Mbps", 7), ("rate18Mbps", 8), ("rate24Mbps", 9), ("rate36Mbps", 10), ("rate48Mbps", 11), ("rate54Mbps", 12)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: txRate.setStatus('current')
txPower = MibTableColumn((1, 3, 6, 1, 4, 1, 4526, 4, 5, 2, 1, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4))).clone(namedValues=NamedValues(("full", 0), ("half", 1), ("quarter", 2), ("eighth", 3), ("min", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: txPower.setStatus('current')
beaconInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 4526, 4, 5, 2, 1, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(20, 1000))).setUnits('1024 microsecond').setMaxAccess("readwrite")
if mibBuilder.loadTexts: beaconInterval.setStatus('current')
dtimInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 4526, 4, 5, 2, 1, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dtimInterval.setStatus('current')
rtsThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 4526, 4, 5, 2, 1, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2346))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rtsThreshold.setStatus('current')
fragmentationThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 4526, 4, 5, 2, 1, 1, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(256, 2346))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fragmentationThreshold.setStatus('current')
dot11bPreamble = MibTableColumn((1, 3, 6, 1, 4, 1, 4526, 4, 5, 2, 1, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("long", 0), ("auto", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dot11bPreamble.setStatus('current')
superMode = MibTableColumn((1, 3, 6, 1, 4, 1, 4526, 4, 5, 2, 1, 1, 14), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: superMode.setStatus('current')
wmm = MibTableColumn((1, 3, 6, 1, 4, 1, 4526, 4, 5, 2, 1, 1, 15), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wmm.setStatus('current')
wmmNoAck = MibTableColumn((1, 3, 6, 1, 4, 1, 4526, 4, 5, 2, 1, 1, 16), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wmmNoAck.setStatus('current')
accessControlMode = MibTableColumn((1, 3, 6, 1, 4, 1, 4526, 4, 5, 2, 1, 1, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 2, 3))).clone(namedValues=NamedValues(("disabled", 0), ("local", 2), ("server", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: accessControlMode.setStatus('current')
wlanSecurityTable = MibTable((1, 3, 6, 1, 4, 1, 4526, 4, 5, 2, 2), )
if mibBuilder.loadTexts: wlanSecurityTable.setStatus('current')
wlanSecurityEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4526, 4, 5, 2, 2, 1), ).setIndexNames((0, "WAG102", "radioIndex"), (0, "WAG102", "securityProfileNo"))
if mibBuilder.loadTexts: wlanSecurityEntry.setStatus('current')
securityProfileNo = MibTableColumn((1, 3, 6, 1, 4, 1, 4526, 4, 5, 2, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4))).setMaxAccess("readonly")
if mibBuilder.loadTexts: securityProfileNo.setStatus('current')
securityProfileEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 4526, 4, 5, 2, 2, 1, 2), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: securityProfileEnabled.setStatus('current')
securityProfileName = MibTableColumn((1, 3, 6, 1, 4, 1, 4526, 4, 5, 2, 2, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: securityProfileName.setStatus('current')
ssid = MibTableColumn((1, 3, 6, 1, 4, 1, 4526, 4, 5, 2, 2, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ssid.setStatus('current')
ssidBroadcastEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 4526, 4, 5, 2, 2, 1, 5), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ssidBroadcastEnable.setStatus('current')
authentication = MibTableColumn((1, 3, 6, 1, 4, 1, 4526, 4, 5, 2, 2, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("openSystem", 0), ("sharedKey", 1), ("legacy8021x", 2), ("wpaPSK", 3), ("wpaRadius", 4), ("wpa2-psk", 5), ("wpawpa2-psk", 6), ("wpa2-802dot1x", 7), ("wpawpa2-802dot1x", 8)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: authentication.setStatus('current')
encryption = MibTableColumn((1, 3, 6, 1, 4, 1, 4526, 4, 5, 2, 2, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("none", 0), ("wep64", 1), ("wep128", 2), ("wep152", 3), ("tkip", 4), ("aes-tkip", 5), ("aes", 6)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: encryption.setStatus('current')
wepKey1 = MibTableColumn((1, 3, 6, 1, 4, 1, 4526, 4, 5, 2, 2, 1, 8), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wepKey1.setStatus('current')
wepKey2 = MibTableColumn((1, 3, 6, 1, 4, 1, 4526, 4, 5, 2, 2, 1, 9), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wepKey2.setStatus('current')
wepKey3 = MibTableColumn((1, 3, 6, 1, 4, 1, 4526, 4, 5, 2, 2, 1, 10), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wepKey3.setStatus('current')
wepKey4 = MibTableColumn((1, 3, 6, 1, 4, 1, 4526, 4, 5, 2, 2, 1, 11), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wepKey4.setStatus('current')
wepKeyDefault = MibTableColumn((1, 3, 6, 1, 4, 1, 4526, 4, 5, 2, 2, 1, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wepKeyDefault.setStatus('current')
wpaPSK = MibTableColumn((1, 3, 6, 1, 4, 1, 4526, 4, 5, 2, 2, 1, 13), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(8, 63))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wpaPSK.setStatus('current')
wlanSeparatorEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 4526, 4, 5, 2, 2, 1, 14), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wlanSeparatorEnable.setStatus('current')
wlanAccessControlLocalTable = MibTable((1, 3, 6, 1, 4, 1, 4526, 4, 5, 2, 3), )
if mibBuilder.loadTexts: wlanAccessControlLocalTable.setStatus('current')
wlanAccessControlLocalEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4526, 4, 5, 2, 3, 1), ).setIndexNames((0, "WAG102", "radioIndex"), (0, "WAG102", "aclIndex"))
if mibBuilder.loadTexts: wlanAccessControlLocalEntry.setStatus('current')
aclIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 4526, 4, 5, 2, 3, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(1, 256), ValueRangeConstraint(9999, 9999), )))
if mibBuilder.loadTexts: aclIndex.setStatus('current')
aclMAC = MibTableColumn((1, 3, 6, 1, 4, 1, 4526, 4, 5, 2, 3, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(6, 17))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aclMAC.setStatus('current')
wlanWdsTable = MibTable((1, 3, 6, 1, 4, 1, 4526, 4, 5, 2, 4), )
if mibBuilder.loadTexts: wlanWdsTable.setStatus('current')
wlanWdsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4526, 4, 5, 2, 4, 1), ).setIndexNames((0, "WAG102", "radioIndex"))
if mibBuilder.loadTexts: wlanWdsEntry.setStatus('current')
operationMode = MibTableColumn((1, 3, 6, 1, 4, 1, 4526, 4, 5, 2, 4, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("ap", 0), ("ptp", 2), ("ptpAP", 3), ("pxp", 4), ("pxpAP", 5), ("repeater", 6)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: operationMode.setStatus('current')
localMacAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 4526, 4, 5, 2, 4, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(6, 17))).setMaxAccess("readonly")
if mibBuilder.loadTexts: localMacAddress.setStatus('current')
ptpRemoteMacAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 4526, 4, 5, 2, 4, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(6, 17))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ptpRemoteMacAddress.setStatus('current')
pxpRemoteMacAddress1 = MibTableColumn((1, 3, 6, 1, 4, 1, 4526, 4, 5, 2, 4, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(6, 17))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pxpRemoteMacAddress1.setStatus('current')
pxpRemoteMacAddress2 = MibTableColumn((1, 3, 6, 1, 4, 1, 4526, 4, 5, 2, 4, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(6, 17))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pxpRemoteMacAddress2.setStatus('current')
pxpRemoteMacAddress3 = MibTableColumn((1, 3, 6, 1, 4, 1, 4526, 4, 5, 2, 4, 1, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(6, 17))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pxpRemoteMacAddress3.setStatus('current')
pxpRemoteMacAddress4 = MibTableColumn((1, 3, 6, 1, 4, 1, 4526, 4, 5, 2, 4, 1, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(6, 17))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pxpRemoteMacAddress4.setStatus('current')
repeaterParentMacAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 4526, 4, 5, 2, 4, 1, 8), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(6, 17))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: repeaterParentMacAddress.setStatus('current')
repeaterChildMacAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 4526, 4, 5, 2, 4, 1, 9), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(6, 17))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: repeaterChildMacAddress.setStatus('current')
wlanClientsTable = MibTable((1, 3, 6, 1, 4, 1, 4526, 4, 5, 2, 5), )
if mibBuilder.loadTexts: wlanClientsTable.setStatus('current')
wlanClientsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4526, 4, 5, 2, 5, 1), ).setIndexNames((0, "WAG102", "radioIndex"), (0, "WAG102", "clientIndex"))
if mibBuilder.loadTexts: wlanClientsEntry.setStatus('current')
clientIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 4526, 4, 5, 2, 5, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: clientIndex.setStatus('current')
clientMacAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 4526, 4, 5, 2, 5, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(6, 17))).setMaxAccess("readonly")
if mibBuilder.loadTexts: clientMacAddress.setStatus('current')
clientIP = MibTableColumn((1, 3, 6, 1, 4, 1, 4526, 4, 5, 2, 5, 1, 3), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: clientIP.setStatus('current')
clientSSID = MibTableColumn((1, 3, 6, 1, 4, 1, 4526, 4, 5, 2, 5, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: clientSSID.setStatus('current')
clientStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 4526, 4, 5, 2, 5, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4))).clone(namedValues=NamedValues(("blocked", 0), ("authenticating", 1), ("authenticated", 2), ("associating", 3), ("associated", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: clientStatus.setStatus('current')
vlanSettings = MibIdentifier((1, 3, 6, 1, 4, 1, 4526, 4, 5, 3))
vlanEnable = MibScalar((1, 3, 6, 1, 4, 1, 4526, 4, 5, 3, 1), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vlanEnable.setStatus('current')
managementVlanId = MibScalar((1, 3, 6, 1, 4, 1, 4526, 4, 5, 3, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4095))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: managementVlanId.setStatus('current')
securityProfileVlanTable = MibTable((1, 3, 6, 1, 4, 1, 4526, 4, 5, 3, 3), )
if mibBuilder.loadTexts: securityProfileVlanTable.setStatus('current')
securityProfileVlanEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4526, 4, 5, 3, 3, 1), ).setIndexNames((0, "WAG102", "radioIndex"), (0, "WAG102", "wlanSecurityProfileNo"))
if mibBuilder.loadTexts: securityProfileVlanEntry.setStatus('current')
profileNo = MibTableColumn((1, 3, 6, 1, 4, 1, 4526, 4, 5, 3, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4))).setMaxAccess("readonly")
if mibBuilder.loadTexts: profileNo.setStatus('current')
profileVlan = MibTableColumn((1, 3, 6, 1, 4, 1, 4526, 4, 5, 3, 3, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4095))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: profileVlan.setStatus('current')
sysStatistics = MibIdentifier((1, 3, 6, 1, 4, 1, 4526, 4, 5, 4))
ethernetStat = MibIdentifier((1, 3, 6, 1, 4, 1, 4526, 4, 5, 4, 1))
ethInPackets = MibScalar((1, 3, 6, 1, 4, 1, 4526, 4, 5, 4, 1, 1), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethInPackets.setStatus('current')
ethOutPackets = MibScalar((1, 3, 6, 1, 4, 1, 4526, 4, 5, 4, 1, 2), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethOutPackets.setStatus('current')
ethInBytes = MibScalar((1, 3, 6, 1, 4, 1, 4526, 4, 5, 4, 1, 3), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethInBytes.setStatus('current')
ethOutBytes = MibScalar((1, 3, 6, 1, 4, 1, 4526, 4, 5, 4, 1, 4), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethOutBytes.setStatus('current')
wirelessStatTable = MibTable((1, 3, 6, 1, 4, 1, 4526, 4, 5, 4, 2), )
if mibBuilder.loadTexts: wirelessStatTable.setStatus('current')
wirelessStatEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4526, 4, 5, 4, 2, 1), ).setIndexNames((0, "WAG102", "radioIndex"), (0, "WAG102", "wlanSecurityProfileNo"))
if mibBuilder.loadTexts: wirelessStatEntry.setStatus('current')
wlanSecurityProfileNo = MibTableColumn((1, 3, 6, 1, 4, 1, 4526, 4, 5, 4, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlanSecurityProfileNo.setStatus('current')
wlanInPacketsUnicast = MibTableColumn((1, 3, 6, 1, 4, 1, 4526, 4, 5, 4, 2, 1, 2), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlanInPacketsUnicast.setStatus('current')
wlanOutPacketsUnicast = MibTableColumn((1, 3, 6, 1, 4, 1, 4526, 4, 5, 4, 2, 1, 3), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlanOutPacketsUnicast.setStatus('current')
wlanInPacketsBroadcast = MibTableColumn((1, 3, 6, 1, 4, 1, 4526, 4, 5, 4, 2, 1, 4), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlanInPacketsBroadcast.setStatus('current')
wlanOutPacketsBroadcast = MibTableColumn((1, 3, 6, 1, 4, 1, 4526, 4, 5, 4, 2, 1, 5), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlanOutPacketsBroadcast.setStatus('current')
wlanInPacketsMulticast = MibTableColumn((1, 3, 6, 1, 4, 1, 4526, 4, 5, 4, 2, 1, 6), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlanInPacketsMulticast.setStatus('current')
wlanOutPacketsMulticast = MibTableColumn((1, 3, 6, 1, 4, 1, 4526, 4, 5, 4, 2, 1, 7), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlanOutPacketsMulticast.setStatus('current')
wlanInPacketsTotal = MibTableColumn((1, 3, 6, 1, 4, 1, 4526, 4, 5, 4, 2, 1, 8), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlanInPacketsTotal.setStatus('current')
wlanOutPacketsTotal = MibTableColumn((1, 3, 6, 1, 4, 1, 4526, 4, 5, 4, 2, 1, 9), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlanOutPacketsTotal.setStatus('current')
wlanInBytesTotal = MibTableColumn((1, 3, 6, 1, 4, 1, 4526, 4, 5, 4, 2, 1, 10), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlanInBytesTotal.setStatus('current')
wlanOutBytesTotal = MibTableColumn((1, 3, 6, 1, 4, 1, 4526, 4, 5, 4, 2, 1, 11), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlanOutBytesTotal.setStatus('current')
radiusSettings = MibIdentifier((1, 3, 6, 1, 4, 1, 4526, 4, 5, 5))
radiusAuthPrimaryServer = MibIdentifier((1, 3, 6, 1, 4, 1, 4526, 4, 5, 5, 1))
radiusAuthPrimaryServerIP = MibScalar((1, 3, 6, 1, 4, 1, 4526, 4, 5, 5, 1, 1), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: radiusAuthPrimaryServerIP.setStatus('current')
radiusAuthPrimaryServerPort = MibScalar((1, 3, 6, 1, 4, 1, 4526, 4, 5, 5, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: radiusAuthPrimaryServerPort.setStatus('current')
radiusAuthPrimaryServerSecret = MibScalar((1, 3, 6, 1, 4, 1, 4526, 4, 5, 5, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 127))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: radiusAuthPrimaryServerSecret.setStatus('current')
radiusAuthSecondaryServer = MibIdentifier((1, 3, 6, 1, 4, 1, 4526, 4, 5, 5, 2))
radiusAuthSecondaryServerIP = MibScalar((1, 3, 6, 1, 4, 1, 4526, 4, 5, 5, 2, 1), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: radiusAuthSecondaryServerIP.setStatus('current')
radiusAuthSecondaryServerPort = MibScalar((1, 3, 6, 1, 4, 1, 4526, 4, 5, 5, 2, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: radiusAuthSecondaryServerPort.setStatus('current')
radiusAuthSecondaryServerSecret = MibScalar((1, 3, 6, 1, 4, 1, 4526, 4, 5, 5, 2, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 127))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: radiusAuthSecondaryServerSecret.setStatus('current')
authenticationSettings = MibIdentifier((1, 3, 6, 1, 4, 1, 4526, 4, 5, 5, 3))
reauthTime = MibScalar((1, 3, 6, 1, 4, 1, 4526, 4, 5, 5, 3, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1800, 36000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: reauthTime.setStatus('current')
wpaGroupKeyUpdateCondition = MibScalar((1, 3, 6, 1, 4, 1, 4526, 4, 5, 5, 3, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("never", 0), ("seconds", 1), ("disconnect", 2), ("secondsAndDisconnect", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wpaGroupKeyUpdateCondition.setStatus('current')
wpaGroupKeyUpdateIntervalSecond = MibScalar((1, 3, 6, 1, 4, 1, 4526, 4, 5, 5, 3, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wpaGroupKeyUpdateIntervalSecond.setStatus('current')
radiusAccountPrimaryServer = MibIdentifier((1, 3, 6, 1, 4, 1, 4526, 4, 5, 5, 4))
radiusAccountPrimaryServerIP = MibScalar((1, 3, 6, 1, 4, 1, 4526, 4, 5, 5, 4, 1), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: radiusAccountPrimaryServerIP.setStatus('current')
radiusAccountPrimaryServerPort = MibScalar((1, 3, 6, 1, 4, 1, 4526, 4, 5, 5, 4, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: radiusAccountPrimaryServerPort.setStatus('current')
radiusAccountPrimaryServerSecret = MibScalar((1, 3, 6, 1, 4, 1, 4526, 4, 5, 5, 4, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 127))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: radiusAccountPrimaryServerSecret.setStatus('current')
radiusAccountSecondaryServer = MibIdentifier((1, 3, 6, 1, 4, 1, 4526, 4, 5, 5, 5))
radiusAccountSecondaryServerIP = MibScalar((1, 3, 6, 1, 4, 1, 4526, 4, 5, 5, 5, 1), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: radiusAccountSecondaryServerIP.setStatus('current')
radiusAccountSecondaryServerPort = MibScalar((1, 3, 6, 1, 4, 1, 4526, 4, 5, 5, 5, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: radiusAccountSecondaryServerPort.setStatus('current')
radiusAccountSecondaryServerSecret = MibScalar((1, 3, 6, 1, 4, 1, 4526, 4, 5, 5, 5, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 127))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: radiusAccountSecondaryServerSecret.setStatus('current')
hotspotSettings = MibIdentifier((1, 3, 6, 1, 4, 1, 4526, 4, 5, 6))
httpRedirectEnable = MibScalar((1, 3, 6, 1, 4, 1, 4526, 4, 5, 6, 1), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: httpRedirectEnable.setStatus('current')
httpRedirectUrl = MibScalar((1, 3, 6, 1, 4, 1, 4526, 4, 5, 6, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: httpRedirectUrl.setStatus('current')
syslogSettings = MibIdentifier((1, 3, 6, 1, 4, 1, 4526, 4, 5, 7))
syslogEnable = MibScalar((1, 3, 6, 1, 4, 1, 4526, 4, 5, 7, 1), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: syslogEnable.setStatus('current')
syslogServerIP = MibScalar((1, 3, 6, 1, 4, 1, 4526, 4, 5, 7, 2), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: syslogServerIP.setStatus('current')
syslogServerPort = MibScalar((1, 3, 6, 1, 4, 1, 4526, 4, 5, 7, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: syslogServerPort.setStatus('current')
remoteMgmtSettings = MibIdentifier((1, 3, 6, 1, 4, 1, 4526, 4, 5, 8))
snmpEnable = MibScalar((1, 3, 6, 1, 4, 1, 4526, 4, 5, 8, 1), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snmpEnable.setStatus('current')
snmpManageIP = MibScalar((1, 3, 6, 1, 4, 1, 4526, 4, 5, 8, 2), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snmpManageIP.setStatus('current')
snmpTrapServerIP = MibScalar((1, 3, 6, 1, 4, 1, 4526, 4, 5, 8, 3), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snmpTrapServerIP.setStatus('current')
snmpReadCommunity = MibScalar((1, 3, 6, 1, 4, 1, 4526, 4, 5, 8, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 31))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snmpReadCommunity.setStatus('current')
snmpWriteCommunity = MibScalar((1, 3, 6, 1, 4, 1, 4526, 4, 5, 8, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 31))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snmpWriteCommunity.setStatus('current')
auxCommand = MibIdentifier((1, 3, 6, 1, 4, 1, 4526, 4, 5, 9))
resetAP = MibScalar((1, 3, 6, 1, 4, 1, 4526, 4, 5, 9, 1), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: resetAP.setStatus('current')
resetToFactoryDefault = MibScalar((1, 3, 6, 1, 4, 1, 4526, 4, 5, 9, 2), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: resetToFactoryDefault.setStatus('current')
mibBuilder.exportSymbols("WAG102", ethOutPackets=ethOutPackets, wlanSecurityProfileNo=wlanSecurityProfileNo, clientStatus=clientStatus, wlanSecurityTable=wlanSecurityTable, wirelessStatTable=wirelessStatTable, ethernetStat=ethernetStat, profileVlan=profileVlan, wpaPSK=wpaPSK, radiusAccountSecondaryServerIP=radiusAccountSecondaryServerIP, rtsThreshold=rtsThreshold, radiusAuthPrimaryServerIP=radiusAuthPrimaryServerIP, dtimInterval=dtimInterval, wmmNoAck=wmmNoAck, wlanInBytesTotal=wlanInBytesTotal, clientSSID=clientSSID, securityProfileName=securityProfileName, clientMacAddress=clientMacAddress, wlanSettings=wlanSettings, ssidBroadcastEnable=ssidBroadcastEnable, ipDnsServer=ipDnsServer, wlanOutPacketsBroadcast=wlanOutPacketsBroadcast, httpRedirectUrl=httpRedirectUrl, vlanEnable=vlanEnable, securityProfileNo=securityProfileNo, securityProfileEnabled=securityProfileEnabled, wepKey4=wepKey4, sysCountryRegion=sysCountryRegion, wlanWdsTable=wlanWdsTable, fragmentationThreshold=fragmentationThreshold, ipSettings=ipSettings, wirelessStatEntry=wirelessStatEntry, clientIndex=clientIndex, timeSettings=timeSettings, repeaterParentMacAddress=repeaterParentMacAddress, aclMAC=aclMAC, securityProfileVlanEntry=securityProfileVlanEntry, radiusAccountPrimaryServer=radiusAccountPrimaryServer, sysMacAddress=sysMacAddress, snmpEnable=snmpEnable, dot11bPreamble=dot11bPreamble, managementVlanId=managementVlanId, netgear=netgear, txPower=txPower, syslogEnable=syslogEnable, wepKey1=wepKey1, sysStatistics=sysStatistics, radiusAuthSecondaryServerPort=radiusAuthSecondaryServerPort, wpaGroupKeyUpdateIntervalSecond=wpaGroupKeyUpdateIntervalSecond, radiusAuthSecondaryServerSecret=radiusAuthSecondaryServerSecret, encryption=encryption, wlanSettingTable=wlanSettingTable, wpaGroupKeyUpdateCondition=wpaGroupKeyUpdateCondition, resetToFactoryDefault=resetToFactoryDefault, sysVersion=sysVersion, vlanSettings=vlanSettings, ethOutBytes=ethOutBytes, wlanOutPacketsTotal=wlanOutPacketsTotal, radiusAccountSecondaryServerSecret=radiusAccountSecondaryServerSecret, wlanClientsTable=wlanClientsTable, timeTimeZone=timeTimeZone, radiusAuthPrimaryServer=radiusAuthPrimaryServer, ptpRemoteMacAddress=ptpRemoteMacAddress, authentication=authentication, wirelessMode=wirelessMode, profileNo=profileNo, ipNetmask=ipNetmask, sysAdminName=sysAdminName, aclIndex=aclIndex, wlanAccessControlLocalTable=wlanAccessControlLocalTable, wlanInPacketsUnicast=wlanInPacketsUnicast, snmpWriteCommunity=snmpWriteCommunity, httpRedirectEnable=httpRedirectEnable, sysAPName=sysAPName, pxpRemoteMacAddress3=pxpRemoteMacAddress3, auxCommand=auxCommand, radiusAccountSecondaryServerPort=radiusAccountSecondaryServerPort, wlanAccessControlLocalEntry=wlanAccessControlLocalEntry, clientIP=clientIP, radioIndex=radioIndex, wepKey2=wepKey2, radiusAccountPrimaryServerPort=radiusAccountPrimaryServerPort, wlanOutPacketsMulticast=wlanOutPacketsMulticast, reauthTime=reauthTime, PYSNMP_MODULE_ID=wag102, accessControlMode=accessControlMode, ssid=ssid, timeCurrentTime=timeCurrentTime, wlanOutPacketsUnicast=wlanOutPacketsUnicast, snmpManageIP=snmpManageIP, ipGateway=ipGateway, timeDaylightSaving=timeDaylightSaving, wlanClientsEntry=wlanClientsEntry, channel=channel, securityProfileVlanTable=securityProfileVlanTable, ethInBytes=ethInBytes, wireless=wireless, radiusAuthSecondaryServer=radiusAuthSecondaryServer, radioEnable=radioEnable, wepKey3=wepKey3, wlanInPacketsTotal=wlanInPacketsTotal, radiusAuthPrimaryServerPort=radiusAuthPrimaryServerPort, syslogServerIP=syslogServerIP, radiusAuthPrimaryServerSecret=radiusAuthPrimaryServerSecret, wlanInPacketsBroadcast=wlanInPacketsBroadcast, superMode=superMode, wepKeyDefault=wepKeyDefault, sysSettings=sysSettings, syslogSettings=syslogSettings, syslogServerPort=syslogServerPort, txRate=txRate, snmpReadCommunity=snmpReadCommunity, wlanWdsEntry=wlanWdsEntry, operationMode=operationMode, radiusSettings=radiusSettings, remoteMgmtSettings=remoteMgmtSettings, ipDhcpClientEnable=ipDhcpClientEnable, wlanSeparatorEnable=wlanSeparatorEnable, radiusAccountPrimaryServerSecret=radiusAccountPrimaryServerSecret, ipIPAddress=ipIPAddress, beaconInterval=beaconInterval, repeaterChildMacAddress=repeaterChildMacAddress, wlanSettingEntry=wlanSettingEntry, wlanSecurityEntry=wlanSecurityEntry, authenticationSettings=authenticationSettings, snmpTrapServerIP=snmpTrapServerIP, radiusAccountSecondaryServer=radiusAccountSecondaryServer, ethInPackets=ethInPackets, wlanOutBytesTotal=wlanOutBytesTotal, wag102=wag102, radiusAccountPrimaryServerIP=radiusAccountPrimaryServerIP, wlanInPacketsMulticast=wlanInPacketsMulticast, resetAP=resetAP, pxpRemoteMacAddress2=pxpRemoteMacAddress2, localMacAddress=localMacAddress, wmm=wmm, pxpRemoteMacAddress4=pxpRemoteMacAddress4, radiusAuthSecondaryServerIP=radiusAuthSecondaryServerIP, pxpRemoteMacAddress1=pxpRemoteMacAddress1, hotspotSettings=hotspotSettings, sysAdminPasswd=sysAdminPasswd)
