#
# PySNMP MIB module DRAFT-FDDI-MIB-VER-3-2 (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/DRAFT-FDDI-MIB-VER-3-2
# Produced by pysmi-0.3.4 at Mon Apr 29 18:39:27 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, Integer, OctetString = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "Integer", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsIntersection, ConstraintsUnion, SingleValueConstraint, ValueSizeConstraint, ValueRangeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsIntersection", "ConstraintsUnion", "SingleValueConstraint", "ValueSizeConstraint", "ValueRangeConstraint")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
Bits, Unsigned32, Gauge32, MibIdentifier, iso, NotificationType, Integer32, MibScalar, MibTable, MibTableRow, MibTableColumn, Counter64, ModuleIdentity, TimeTicks, ObjectIdentity, Counter32, IpAddress, experimental = mibBuilder.importSymbols("SNMPv2-SMI", "Bits", "Unsigned32", "Gauge32", "MibIdentifier", "iso", "NotificationType", "Integer32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Counter64", "ModuleIdentity", "TimeTicks", "ObjectIdentity", "Counter32", "IpAddress", "experimental")
DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention")
fddi = MibIdentifier((1, 3, 6, 1, 3, 8))
fddimib = MibIdentifier((1, 3, 6, 1, 3, 8, 73))
class FddiTimeNano(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ValueRangeConstraint(0, 2147483647)

class FddiTimeMilli(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ValueRangeConstraint(0, 2147483647)

class FddiResourceId(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ValueRangeConstraint(0, 65535)

class FddiSMTStationIdType(OctetString):
    subtypeSpec = OctetString.subtypeSpec + ValueSizeConstraint(8, 8)
    fixedLength = 8

class FddiMACLongAddressType(OctetString):
    subtypeSpec = OctetString.subtypeSpec + ValueSizeConstraint(6, 6)
    fixedLength = 6

fddimibSMT = MibIdentifier((1, 3, 6, 1, 3, 8, 73, 1))
fddimibMAC = MibIdentifier((1, 3, 6, 1, 3, 8, 73, 2))
fddimibMACCounters = MibIdentifier((1, 3, 6, 1, 3, 8, 73, 3))
fddimibPATH = MibIdentifier((1, 3, 6, 1, 3, 8, 73, 4))
fddimibPORT = MibIdentifier((1, 3, 6, 1, 3, 8, 73, 5))
fddimibSMTNumber = MibScalar((1, 3, 6, 1, 3, 8, 73, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fddimibSMTNumber.setStatus('mandatory')
fddimibSMTTable = MibTable((1, 3, 6, 1, 3, 8, 73, 1, 2), )
if mibBuilder.loadTexts: fddimibSMTTable.setStatus('mandatory')
fddimibSMTEntry = MibTableRow((1, 3, 6, 1, 3, 8, 73, 1, 2, 1), ).setIndexNames((0, "DRAFT-FDDI-MIB-VER-3-2", "fddimibSMTIndex"))
if mibBuilder.loadTexts: fddimibSMTEntry.setStatus('mandatory')
fddimibSMTIndex = MibTableColumn((1, 3, 6, 1, 3, 8, 73, 1, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fddimibSMTIndex.setStatus('mandatory')
fddimibSMTStationId = MibTableColumn((1, 3, 6, 1, 3, 8, 73, 1, 2, 1, 2), FddiSMTStationIdType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fddimibSMTStationId.setStatus('mandatory')
fddimibSMTOpVersionId = MibTableColumn((1, 3, 6, 1, 3, 8, 73, 1, 2, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fddimibSMTOpVersionId.setStatus('mandatory')
fddimibSMTHiVersionId = MibTableColumn((1, 3, 6, 1, 3, 8, 73, 1, 2, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fddimibSMTHiVersionId.setStatus('mandatory')
fddimibSMTLoVersionId = MibTableColumn((1, 3, 6, 1, 3, 8, 73, 1, 2, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fddimibSMTLoVersionId.setStatus('mandatory')
fddimibSMTUserData = MibTableColumn((1, 3, 6, 1, 3, 8, 73, 1, 2, 1, 6), OctetString().subtype(subtypeSpec=ValueSizeConstraint(32, 32)).setFixedLength(32)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fddimibSMTUserData.setStatus('mandatory')
fddimibSMTMIBVersionId = MibTableColumn((1, 3, 6, 1, 3, 8, 73, 1, 2, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fddimibSMTMIBVersionId.setStatus('mandatory')
fddimibSMTMACCts = MibTableColumn((1, 3, 6, 1, 3, 8, 73, 1, 2, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fddimibSMTMACCts.setStatus('mandatory')
fddimibSMTNonMasterCts = MibTableColumn((1, 3, 6, 1, 3, 8, 73, 1, 2, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fddimibSMTNonMasterCts.setStatus('mandatory')
fddimibSMTMasterCts = MibTableColumn((1, 3, 6, 1, 3, 8, 73, 1, 2, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fddimibSMTMasterCts.setStatus('mandatory')
fddimibSMTAvailablePaths = MibTableColumn((1, 3, 6, 1, 3, 8, 73, 1, 2, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fddimibSMTAvailablePaths.setStatus('mandatory')
fddimibSMTConfigCapabilities = MibTableColumn((1, 3, 6, 1, 3, 8, 73, 1, 2, 1, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 3))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fddimibSMTConfigCapabilities.setStatus('mandatory')
fddimibSMTConfigPolicy = MibTableColumn((1, 3, 6, 1, 3, 8, 73, 1, 2, 1, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fddimibSMTConfigPolicy.setStatus('mandatory')
fddimibSMTConnectionPolicy = MibTableColumn((1, 3, 6, 1, 3, 8, 73, 1, 2, 1, 14), Integer32().subtype(subtypeSpec=ValueRangeConstraint(32768, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fddimibSMTConnectionPolicy.setStatus('mandatory')
fddimibSMTTNotify = MibTableColumn((1, 3, 6, 1, 3, 8, 73, 1, 2, 1, 15), Integer32().subtype(subtypeSpec=ValueRangeConstraint(2, 30))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fddimibSMTTNotify.setStatus('mandatory')
fddimibSMTStatRptPolicy = MibTableColumn((1, 3, 6, 1, 3, 8, 73, 1, 2, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("true", 1), ("false", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fddimibSMTStatRptPolicy.setStatus('mandatory')
fddimibSMTTraceMaxExpiration = MibTableColumn((1, 3, 6, 1, 3, 8, 73, 1, 2, 1, 17), FddiTimeMilli()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fddimibSMTTraceMaxExpiration.setStatus('mandatory')
fddimibSMTBypassPresent = MibTableColumn((1, 3, 6, 1, 3, 8, 73, 1, 2, 1, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("true", 1), ("false", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fddimibSMTBypassPresent.setStatus('mandatory')
fddimibSMTECMState = MibTableColumn((1, 3, 6, 1, 3, 8, 73, 1, 2, 1, 19), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("ec0", 1), ("ec1", 2), ("ec2", 3), ("ec3", 4), ("ec4", 5), ("ec5", 6), ("ec6", 7), ("ec7", 8)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fddimibSMTECMState.setStatus('mandatory')
fddimibSMTCFState = MibTableColumn((1, 3, 6, 1, 3, 8, 73, 1, 2, 1, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13))).clone(namedValues=NamedValues(("cf0", 1), ("cf1", 2), ("cf2", 3), ("cf3", 4), ("cf4", 5), ("cf5", 6), ("cf6", 7), ("cf7", 8), ("cf8", 9), ("cf9", 10), ("cf10", 11), ("cf11", 12), ("cf12", 13)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fddimibSMTCFState.setStatus('mandatory')
fddimibSMTRemoteDisconnectFlag = MibTableColumn((1, 3, 6, 1, 3, 8, 73, 1, 2, 1, 21), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("true", 1), ("false", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fddimibSMTRemoteDisconnectFlag.setStatus('mandatory')
fddimibSMTStationStatus = MibTableColumn((1, 3, 6, 1, 3, 8, 73, 1, 2, 1, 22), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("concatenated", 1), ("separated", 2), ("thru", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fddimibSMTStationStatus.setStatus('mandatory')
fddimibSMTPeerWrapFlag = MibTableColumn((1, 3, 6, 1, 3, 8, 73, 1, 2, 1, 23), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("true", 1), ("false", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fddimibSMTPeerWrapFlag.setStatus('mandatory')
fddimibSMTTimeStamp = MibTableColumn((1, 3, 6, 1, 3, 8, 73, 1, 2, 1, 24), FddiTimeMilli()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fddimibSMTTimeStamp.setStatus('mandatory')
fddimibSMTTransitionTimeStamp = MibTableColumn((1, 3, 6, 1, 3, 8, 73, 1, 2, 1, 25), FddiTimeMilli()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fddimibSMTTransitionTimeStamp.setStatus('mandatory')
fddimibSMTStationAction = MibTableColumn((1, 3, 6, 1, 3, 8, 73, 1, 2, 1, 26), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("other", 1), ("connect", 2), ("disconnect", 3), ("path-Test", 4), ("self-Test", 5), ("disable-a", 6), ("disable-b", 7), ("disable-m", 8)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fddimibSMTStationAction.setStatus('mandatory')
fddimibMACNumber = MibScalar((1, 3, 6, 1, 3, 8, 73, 2, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fddimibMACNumber.setStatus('mandatory')
fddimibMACTable = MibTable((1, 3, 6, 1, 3, 8, 73, 2, 2), )
if mibBuilder.loadTexts: fddimibMACTable.setStatus('mandatory')
fddimibMACEntry = MibTableRow((1, 3, 6, 1, 3, 8, 73, 2, 2, 1), ).setIndexNames((0, "DRAFT-FDDI-MIB-VER-3-2", "fddimibMACSMTIndex"), (0, "DRAFT-FDDI-MIB-VER-3-2", "fddimibMACIndex"))
if mibBuilder.loadTexts: fddimibMACEntry.setStatus('mandatory')
fddimibMACSMTIndex = MibTableColumn((1, 3, 6, 1, 3, 8, 73, 2, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fddimibMACSMTIndex.setStatus('mandatory')
fddimibMACIndex = MibTableColumn((1, 3, 6, 1, 3, 8, 73, 2, 2, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fddimibMACIndex.setStatus('mandatory')
fddimibMACIfIndex = MibTableColumn((1, 3, 6, 1, 3, 8, 73, 2, 2, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fddimibMACIfIndex.setStatus('mandatory')
fddimibMACFrameStatusFunctions = MibTableColumn((1, 3, 6, 1, 3, 8, 73, 2, 2, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fddimibMACFrameStatusFunctions.setStatus('mandatory')
fddimibMACTMaxCapability = MibTableColumn((1, 3, 6, 1, 3, 8, 73, 2, 2, 1, 5), FddiTimeNano()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fddimibMACTMaxCapability.setStatus('mandatory')
fddimibMACTVXCapability = MibTableColumn((1, 3, 6, 1, 3, 8, 73, 2, 2, 1, 6), FddiTimeNano()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fddimibMACTVXCapability.setStatus('mandatory')
fddimibMACAvailablePaths = MibTableColumn((1, 3, 6, 1, 3, 8, 73, 2, 2, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fddimibMACAvailablePaths.setStatus('mandatory')
fddimibMACCurrentPath = MibTableColumn((1, 3, 6, 1, 3, 8, 73, 2, 2, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("isolated", 1), ("local", 2), ("secondary", 3), ("primary", 4), ("concatenated", 5), ("thru", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fddimibMACCurrentPath.setStatus('mandatory')
fddimibMACUpstreamNbr = MibTableColumn((1, 3, 6, 1, 3, 8, 73, 2, 2, 1, 9), FddiMACLongAddressType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fddimibMACUpstreamNbr.setStatus('mandatory')
fddimibMACDownstreamNbr = MibTableColumn((1, 3, 6, 1, 3, 8, 73, 2, 2, 1, 10), FddiMACLongAddressType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fddimibMACDownstreamNbr.setStatus('mandatory')
fddimibMACOldUpstreamNbr = MibTableColumn((1, 3, 6, 1, 3, 8, 73, 2, 2, 1, 11), FddiMACLongAddressType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fddimibMACOldUpstreamNbr.setStatus('mandatory')
fddimibMACOldDownstreamNbr = MibTableColumn((1, 3, 6, 1, 3, 8, 73, 2, 2, 1, 12), FddiMACLongAddressType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fddimibMACOldDownstreamNbr.setStatus('mandatory')
fddimibMACDupAddressTest = MibTableColumn((1, 3, 6, 1, 3, 8, 73, 2, 2, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("none", 1), ("pass", 2), ("fail", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fddimibMACDupAddressTest.setStatus('mandatory')
fddimibMACRequestedPaths = MibTableColumn((1, 3, 6, 1, 3, 8, 73, 2, 2, 1, 14), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fddimibMACRequestedPaths.setStatus('mandatory')
fddimibMACDownstreamPORTType = MibTableColumn((1, 3, 6, 1, 3, 8, 73, 2, 2, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("a", 1), ("b", 2), ("s", 3), ("m", 4), ("none", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fddimibMACDownstreamPORTType.setStatus('mandatory')
fddimibMACSMTAddress = MibTableColumn((1, 3, 6, 1, 3, 8, 73, 2, 2, 1, 16), FddiMACLongAddressType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fddimibMACSMTAddress.setStatus('mandatory')
fddimibMACTReq = MibTableColumn((1, 3, 6, 1, 3, 8, 73, 2, 2, 1, 17), FddiTimeNano()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fddimibMACTReq.setStatus('mandatory')
fddimibMACTNeg = MibTableColumn((1, 3, 6, 1, 3, 8, 73, 2, 2, 1, 18), FddiTimeNano()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fddimibMACTNeg.setStatus('mandatory')
fddimibMACTMax = MibTableColumn((1, 3, 6, 1, 3, 8, 73, 2, 2, 1, 19), FddiTimeNano()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fddimibMACTMax.setStatus('mandatory')
fddimibMACTvxValue = MibTableColumn((1, 3, 6, 1, 3, 8, 73, 2, 2, 1, 20), FddiTimeNano()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fddimibMACTvxValue.setStatus('mandatory')
fddimibMACFrameCts = MibTableColumn((1, 3, 6, 1, 3, 8, 73, 2, 2, 1, 21), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fddimibMACFrameCts.setStatus('mandatory')
fddimibMACCopiedCts = MibTableColumn((1, 3, 6, 1, 3, 8, 73, 2, 2, 1, 22), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fddimibMACCopiedCts.setStatus('mandatory')
fddimibMACTransmitCts = MibTableColumn((1, 3, 6, 1, 3, 8, 73, 2, 2, 1, 23), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fddimibMACTransmitCts.setStatus('mandatory')
fddimibMACErrorCts = MibTableColumn((1, 3, 6, 1, 3, 8, 73, 2, 2, 1, 24), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fddimibMACErrorCts.setStatus('mandatory')
fddimibMACLostCts = MibTableColumn((1, 3, 6, 1, 3, 8, 73, 2, 2, 1, 25), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fddimibMACLostCts.setStatus('mandatory')
fddimibMACFrameErrorThreshold = MibTableColumn((1, 3, 6, 1, 3, 8, 73, 2, 2, 1, 26), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fddimibMACFrameErrorThreshold.setStatus('mandatory')
fddimibMACFrameErrorRatio = MibTableColumn((1, 3, 6, 1, 3, 8, 73, 2, 2, 1, 27), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fddimibMACFrameErrorRatio.setStatus('mandatory')
fddimibMACRMTState = MibTableColumn((1, 3, 6, 1, 3, 8, 73, 2, 2, 1, 28), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("rm0", 1), ("rm1", 2), ("rm2", 3), ("rm3", 4), ("rm4", 5), ("rm5", 6), ("rm6", 7), ("rm7", 8)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fddimibMACRMTState.setStatus('mandatory')
fddimibMACDaFlag = MibTableColumn((1, 3, 6, 1, 3, 8, 73, 2, 2, 1, 29), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("true", 1), ("false", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fddimibMACDaFlag.setStatus('mandatory')
fddimibMACUnaDaFlag = MibTableColumn((1, 3, 6, 1, 3, 8, 73, 2, 2, 1, 30), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("true", 1), ("false", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fddimibMACUnaDaFlag.setStatus('mandatory')
fddimibMACFrameErrorFlag = MibTableColumn((1, 3, 6, 1, 3, 8, 73, 2, 2, 1, 31), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("true", 1), ("false", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fddimibMACFrameErrorFlag.setStatus('mandatory')
fddimibMACMAUnitdataAvailable = MibTableColumn((1, 3, 6, 1, 3, 8, 73, 2, 2, 1, 32), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("true", 1), ("false", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fddimibMACMAUnitdataAvailable.setStatus('mandatory')
fddimibMACHardwarePresent = MibTableColumn((1, 3, 6, 1, 3, 8, 73, 2, 2, 1, 33), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("true", 1), ("false", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fddimibMACHardwarePresent.setStatus('mandatory')
fddimibMACMAUnitdataEnable = MibTableColumn((1, 3, 6, 1, 3, 8, 73, 2, 2, 1, 34), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("true", 1), ("false", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fddimibMACMAUnitdataEnable.setStatus('mandatory')
fddimibMACCountersTable = MibTable((1, 3, 6, 1, 3, 8, 73, 3, 1), )
if mibBuilder.loadTexts: fddimibMACCountersTable.setStatus('mandatory')
fddimibMACCountersEntry = MibTableRow((1, 3, 6, 1, 3, 8, 73, 3, 1, 1), ).setIndexNames((0, "DRAFT-FDDI-MIB-VER-3-2", "fddimibMACSMTIndex"), (0, "DRAFT-FDDI-MIB-VER-3-2", "fddimibMACIndex"))
if mibBuilder.loadTexts: fddimibMACCountersEntry.setStatus('mandatory')
fddimibMACTokenCts = MibTableColumn((1, 3, 6, 1, 3, 8, 73, 3, 1, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fddimibMACTokenCts.setStatus('mandatory')
fddimibMACTvxExpiredCts = MibTableColumn((1, 3, 6, 1, 3, 8, 73, 3, 1, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fddimibMACTvxExpiredCts.setStatus('mandatory')
fddimibMACNotCopiedCts = MibTableColumn((1, 3, 6, 1, 3, 8, 73, 3, 1, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fddimibMACNotCopiedCts.setStatus('mandatory')
fddimibMACLateCts = MibTableColumn((1, 3, 6, 1, 3, 8, 73, 3, 1, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fddimibMACLateCts.setStatus('mandatory')
fddimibMACRingOpCts = MibTableColumn((1, 3, 6, 1, 3, 8, 73, 3, 1, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fddimibMACRingOpCts.setStatus('mandatory')
fddimibMACNotCopiedRatio = MibTableColumn((1, 3, 6, 1, 3, 8, 73, 3, 1, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fddimibMACNotCopiedRatio.setStatus('mandatory')
fddimibMACNotCopiedFlag = MibTableColumn((1, 3, 6, 1, 3, 8, 73, 3, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("true", 1), ("false", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fddimibMACNotCopiedFlag.setStatus('mandatory')
fddimibMACNotCopiedThreshold = MibTableColumn((1, 3, 6, 1, 3, 8, 73, 3, 1, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fddimibMACNotCopiedThreshold.setStatus('mandatory')
fddimibPATHNumber = MibScalar((1, 3, 6, 1, 3, 8, 73, 4, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fddimibPATHNumber.setStatus('mandatory')
fddimibPATHTable = MibTable((1, 3, 6, 1, 3, 8, 73, 4, 2), )
if mibBuilder.loadTexts: fddimibPATHTable.setStatus('mandatory')
fddimibPATHEntry = MibTableRow((1, 3, 6, 1, 3, 8, 73, 4, 2, 1), ).setIndexNames((0, "DRAFT-FDDI-MIB-VER-3-2", "fddimibPATHSMTIndex"), (0, "DRAFT-FDDI-MIB-VER-3-2", "fddimibPATHIndex"))
if mibBuilder.loadTexts: fddimibPATHEntry.setStatus('mandatory')
fddimibPATHSMTIndex = MibTableColumn((1, 3, 6, 1, 3, 8, 73, 4, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fddimibPATHSMTIndex.setStatus('mandatory')
fddimibPATHIndex = MibTableColumn((1, 3, 6, 1, 3, 8, 73, 4, 2, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fddimibPATHIndex.setStatus('mandatory')
fddimibPATHTVXLowerBound = MibTableColumn((1, 3, 6, 1, 3, 8, 73, 4, 2, 1, 3), FddiTimeNano()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fddimibPATHTVXLowerBound.setStatus('mandatory')
fddimibPATHTMaxLowerBound = MibTableColumn((1, 3, 6, 1, 3, 8, 73, 4, 2, 1, 4), FddiTimeNano()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fddimibPATHTMaxLowerBound.setStatus('mandatory')
fddimibPATHMaxTReq = MibTableColumn((1, 3, 6, 1, 3, 8, 73, 4, 2, 1, 5), FddiTimeNano()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fddimibPATHMaxTReq.setStatus('mandatory')
fddimibPATHConfigTable = MibTable((1, 3, 6, 1, 3, 8, 73, 4, 3), )
if mibBuilder.loadTexts: fddimibPATHConfigTable.setStatus('mandatory')
fddimibPATHConfigEntry = MibTableRow((1, 3, 6, 1, 3, 8, 73, 4, 3, 1), ).setIndexNames((0, "DRAFT-FDDI-MIB-VER-3-2", "fddimibPATHConfigSMTIndex"), (0, "DRAFT-FDDI-MIB-VER-3-2", "fddimibPATHConfigPATHIndex"), (0, "DRAFT-FDDI-MIB-VER-3-2", "fddimibPATHConfigTokenOrder"))
if mibBuilder.loadTexts: fddimibPATHConfigEntry.setStatus('mandatory')
fddimibPATHConfigSMTIndex = MibTableColumn((1, 3, 6, 1, 3, 8, 73, 4, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fddimibPATHConfigSMTIndex.setStatus('mandatory')
fddimibPATHConfigPATHIndex = MibTableColumn((1, 3, 6, 1, 3, 8, 73, 4, 3, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fddimibPATHConfigPATHIndex.setStatus('mandatory')
fddimibPATHConfigTokenOrder = MibTableColumn((1, 3, 6, 1, 3, 8, 73, 4, 3, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fddimibPATHConfigTokenOrder.setStatus('mandatory')
fddimibPATHConfigResourceType = MibTableColumn((1, 3, 6, 1, 3, 8, 73, 4, 3, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 4))).clone(namedValues=NamedValues(("mac", 2), ("port", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fddimibPATHConfigResourceType.setStatus('mandatory')
fddimibPATHConfigResourceIndex = MibTableColumn((1, 3, 6, 1, 3, 8, 73, 4, 3, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fddimibPATHConfigResourceIndex.setStatus('mandatory')
fddimibPATHConfigCurrentPath = MibTableColumn((1, 3, 6, 1, 3, 8, 73, 4, 3, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("isolated", 1), ("local", 2), ("secondary", 3), ("primary", 4), ("concatenated", 5), ("thru", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fddimibPATHConfigCurrentPath.setStatus('mandatory')
fddimibPORTNumber = MibScalar((1, 3, 6, 1, 3, 8, 73, 5, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fddimibPORTNumber.setStatus('mandatory')
fddimibPORTTable = MibTable((1, 3, 6, 1, 3, 8, 73, 5, 2), )
if mibBuilder.loadTexts: fddimibPORTTable.setStatus('mandatory')
fddimibPORTEntry = MibTableRow((1, 3, 6, 1, 3, 8, 73, 5, 2, 1), ).setIndexNames((0, "DRAFT-FDDI-MIB-VER-3-2", "fddimibPORTSMTIndex"), (0, "DRAFT-FDDI-MIB-VER-3-2", "fddimibPORTIndex"))
if mibBuilder.loadTexts: fddimibPORTEntry.setStatus('mandatory')
fddimibPORTSMTIndex = MibTableColumn((1, 3, 6, 1, 3, 8, 73, 5, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fddimibPORTSMTIndex.setStatus('mandatory')
fddimibPORTIndex = MibTableColumn((1, 3, 6, 1, 3, 8, 73, 5, 2, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fddimibPORTIndex.setStatus('mandatory')
fddimibPORTMyType = MibTableColumn((1, 3, 6, 1, 3, 8, 73, 5, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("a", 1), ("b", 2), ("s", 3), ("m", 4), ("none", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fddimibPORTMyType.setStatus('mandatory')
fddimibPORTNeighborType = MibTableColumn((1, 3, 6, 1, 3, 8, 73, 5, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("a", 1), ("b", 2), ("s", 3), ("m", 4), ("none", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fddimibPORTNeighborType.setStatus('mandatory')
fddimibPORTConnectionPolicies = MibTableColumn((1, 3, 6, 1, 3, 8, 73, 5, 2, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 3))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fddimibPORTConnectionPolicies.setStatus('mandatory')
fddimibPORTMACIndicated = MibTableColumn((1, 3, 6, 1, 3, 8, 73, 5, 2, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("tVal9FalseRVal9False", 1), ("tVal9FalseRVal9True", 2), ("tVal9TrueRVal9False", 3), ("tVal9TrueRVal9True", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fddimibPORTMACIndicated.setStatus('mandatory')
fddimibPORTCurrentPath = MibTableColumn((1, 3, 6, 1, 3, 8, 73, 5, 2, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("ce0", 1), ("ce1", 2), ("ce2", 3), ("ce3", 4), ("ce4", 5), ("ce5", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fddimibPORTCurrentPath.setStatus('mandatory')
fddimibPORTRequestedPaths = MibTableColumn((1, 3, 6, 1, 3, 8, 73, 5, 2, 1, 8), OctetString().subtype(subtypeSpec=ValueSizeConstraint(3, 3)).setFixedLength(3)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fddimibPORTRequestedPaths.setStatus('mandatory')
fddimibPORTMACPlacement = MibTableColumn((1, 3, 6, 1, 3, 8, 73, 5, 2, 1, 9), FddiResourceId()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fddimibPORTMACPlacement.setStatus('mandatory')
fddimibPORTAvailablePaths = MibTableColumn((1, 3, 6, 1, 3, 8, 73, 5, 2, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fddimibPORTAvailablePaths.setStatus('mandatory')
fddimibPORTPMDClass = MibTableColumn((1, 3, 6, 1, 3, 8, 73, 5, 2, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("multimode", 1), ("single-mode1", 2), ("single-mode2", 3), ("sonet", 4), ("low-cost-fiber", 5), ("twisted-pair", 6), ("unknown", 7), ("unspecified", 8)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fddimibPORTPMDClass.setStatus('mandatory')
fddimibPORTConnectionCapabilities = MibTableColumn((1, 3, 6, 1, 3, 8, 73, 5, 2, 1, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 3))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fddimibPORTConnectionCapabilities.setStatus('mandatory')
fddimibPORTBSFlag = MibTableColumn((1, 3, 6, 1, 3, 8, 73, 5, 2, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("true", 1), ("false", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fddimibPORTBSFlag.setStatus('mandatory')
fddimibPORTLCTFailCts = MibTableColumn((1, 3, 6, 1, 3, 8, 73, 5, 2, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fddimibPORTLCTFailCts.setStatus('mandatory')
fddimibPORTLerEstimate = MibTableColumn((1, 3, 6, 1, 3, 8, 73, 5, 2, 1, 15), Integer32().subtype(subtypeSpec=ValueRangeConstraint(4, 15))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fddimibPORTLerEstimate.setStatus('mandatory')
fddimibPORTLemRejectCts = MibTableColumn((1, 3, 6, 1, 3, 8, 73, 5, 2, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fddimibPORTLemRejectCts.setStatus('mandatory')
fddimibPORTLemCts = MibTableColumn((1, 3, 6, 1, 3, 8, 73, 5, 2, 1, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fddimibPORTLemCts.setStatus('mandatory')
fddimibPORTLerCutoff = MibTableColumn((1, 3, 6, 1, 3, 8, 73, 5, 2, 1, 18), Integer32().subtype(subtypeSpec=ValueRangeConstraint(4, 15))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fddimibPORTLerCutoff.setStatus('mandatory')
fddimibPORTLerAlarm = MibTableColumn((1, 3, 6, 1, 3, 8, 73, 5, 2, 1, 19), Integer32().subtype(subtypeSpec=ValueRangeConstraint(4, 15))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fddimibPORTLerAlarm.setStatus('mandatory')
fddimibPORTConnectState = MibTableColumn((1, 3, 6, 1, 3, 8, 73, 5, 2, 1, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("disabled", 1), ("connecting", 2), ("standby", 3), ("active", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fddimibPORTConnectState.setStatus('mandatory')
fddimibPORTPCMState = MibTableColumn((1, 3, 6, 1, 3, 8, 73, 5, 2, 1, 21), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10))).clone(namedValues=NamedValues(("pc0", 1), ("pc1", 2), ("pc2", 3), ("pc3", 4), ("pc4", 5), ("pc5", 6), ("pc6", 7), ("pc7", 8), ("pc8", 9), ("pc9", 10)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fddimibPORTPCMState.setStatus('mandatory')
fddimibPORTPCWithhold = MibTableColumn((1, 3, 6, 1, 3, 8, 73, 5, 2, 1, 22), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("none", 1), ("m-m", 2), ("otherincompatible", 3), ("pathnotavailable", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fddimibPORTPCWithhold.setStatus('mandatory')
fddimibPORTLerFlag = MibTableColumn((1, 3, 6, 1, 3, 8, 73, 5, 2, 1, 23), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("true", 1), ("false", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fddimibPORTLerFlag.setStatus('mandatory')
fddimibPORTHardwarePresent = MibTableColumn((1, 3, 6, 1, 3, 8, 73, 5, 2, 1, 24), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("true", 1), ("false", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fddimibPORTHardwarePresent.setStatus('mandatory')
fddimibPORTAction = MibTableColumn((1, 3, 6, 1, 3, 8, 73, 5, 2, 1, 25), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("other", 1), ("maintPORT", 2), ("enablePORT", 3), ("disablePORT", 4), ("startPORT", 5), ("stopPORT", 6)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fddimibPORTAction.setStatus('mandatory')
mibBuilder.exportSymbols("DRAFT-FDDI-MIB-VER-3-2", fddimibPORTConnectionPolicies=fddimibPORTConnectionPolicies, fddimibPATHConfigSMTIndex=fddimibPATHConfigSMTIndex, fddimib=fddimib, fddimibPATHConfigResourceIndex=fddimibPATHConfigResourceIndex, fddimibSMTStationId=fddimibSMTStationId, fddimibMACErrorCts=fddimibMACErrorCts, fddimibMACLostCts=fddimibMACLostCts, fddimibMACTvxExpiredCts=fddimibMACTvxExpiredCts, fddimibMACLateCts=fddimibMACLateCts, fddimibPORTConnectionCapabilities=fddimibPORTConnectionCapabilities, fddimibSMTTable=fddimibSMTTable, fddimibSMTRemoteDisconnectFlag=fddimibSMTRemoteDisconnectFlag, fddimibSMTAvailablePaths=fddimibSMTAvailablePaths, fddimibPORTLemCts=fddimibPORTLemCts, fddimibPORTPCWithhold=fddimibPORTPCWithhold, fddimibPORTLemRejectCts=fddimibPORTLemRejectCts, fddimibMACTReq=fddimibMACTReq, fddimibPORTPMDClass=fddimibPORTPMDClass, fddimibPORTBSFlag=fddimibPORTBSFlag, fddimibSMTLoVersionId=fddimibSMTLoVersionId, fddimibPORTLerEstimate=fddimibPORTLerEstimate, fddimibSMTStationStatus=fddimibSMTStationStatus, fddimibSMTIndex=fddimibSMTIndex, fddimibSMTMasterCts=fddimibSMTMasterCts, fddimibSMTHiVersionId=fddimibSMTHiVersionId, fddimibPATHConfigTable=fddimibPATHConfigTable, fddimibPORTCurrentPath=fddimibPORTCurrentPath, fddimibPORTLCTFailCts=fddimibPORTLCTFailCts, fddimibSMTMACCts=fddimibSMTMACCts, fddimibSMTMIBVersionId=fddimibSMTMIBVersionId, fddimibPORTLerFlag=fddimibPORTLerFlag, fddimibPATHNumber=fddimibPATHNumber, fddimibMACRMTState=fddimibMACRMTState, fddimibPATHConfigCurrentPath=fddimibPATHConfigCurrentPath, fddimibMACMAUnitdataEnable=fddimibMACMAUnitdataEnable, fddimibPATHConfigPATHIndex=fddimibPATHConfigPATHIndex, fddimibPORTLerCutoff=fddimibPORTLerCutoff, fddimibMACNumber=fddimibMACNumber, fddimibSMTNumber=fddimibSMTNumber, fddimibMACTokenCts=fddimibMACTokenCts, fddimibPORTMACPlacement=fddimibPORTMACPlacement, FddiResourceId=FddiResourceId, fddimibMACCurrentPath=fddimibMACCurrentPath, fddimibMAC=fddimibMAC, fddimibSMTNonMasterCts=fddimibSMTNonMasterCts, fddimibPORTAvailablePaths=fddimibPORTAvailablePaths, fddimibMACUnaDaFlag=fddimibMACUnaDaFlag, FddiTimeNano=FddiTimeNano, fddimibMACNotCopiedThreshold=fddimibMACNotCopiedThreshold, fddimibSMTECMState=fddimibSMTECMState, fddimibMACOldDownstreamNbr=fddimibMACOldDownstreamNbr, fddimibMACDupAddressTest=fddimibMACDupAddressTest, fddimibMACNotCopiedCts=fddimibMACNotCopiedCts, fddimibPORTNumber=fddimibPORTNumber, fddimibPORTPCMState=fddimibPORTPCMState, fddimibPORTIndex=fddimibPORTIndex, fddimibMACFrameCts=fddimibMACFrameCts, fddimibSMTUserData=fddimibSMTUserData, fddimibMACCopiedCts=fddimibMACCopiedCts, fddimibMACTvxValue=fddimibMACTvxValue, fddimibSMTStatRptPolicy=fddimibSMTStatRptPolicy, fddimibMACSMTAddress=fddimibMACSMTAddress, fddimibPORTTable=fddimibPORTTable, fddimibMACFrameStatusFunctions=fddimibMACFrameStatusFunctions, fddimibMACUpstreamNbr=fddimibMACUpstreamNbr, FddiSMTStationIdType=FddiSMTStationIdType, fddimibSMTCFState=fddimibSMTCFState, fddimibPORTMyType=fddimibPORTMyType, fddimibPATHTable=fddimibPATHTable, fddimibMACEntry=fddimibMACEntry, fddimibPATHTMaxLowerBound=fddimibPATHTMaxLowerBound, fddimibPORT=fddimibPORT, fddimibMACDownstreamNbr=fddimibMACDownstreamNbr, fddimibMACHardwarePresent=fddimibMACHardwarePresent, fddimibPATHSMTIndex=fddimibPATHSMTIndex, fddimibPATHTVXLowerBound=fddimibPATHTVXLowerBound, fddimibPATHConfigResourceType=fddimibPATHConfigResourceType, fddimibSMTTimeStamp=fddimibSMTTimeStamp, fddimibPATHEntry=fddimibPATHEntry, fddimibMACMAUnitdataAvailable=fddimibMACMAUnitdataAvailable, fddimibMACTMaxCapability=fddimibMACTMaxCapability, fddimibMACFrameErrorFlag=fddimibMACFrameErrorFlag, fddimibMACNotCopiedRatio=fddimibMACNotCopiedRatio, fddimibSMTTransitionTimeStamp=fddimibSMTTransitionTimeStamp, fddimibMACTMax=fddimibMACTMax, fddimibMACTransmitCts=fddimibMACTransmitCts, FddiMACLongAddressType=FddiMACLongAddressType, fddimibPATHMaxTReq=fddimibPATHMaxTReq, fddimibSMTConfigCapabilities=fddimibSMTConfigCapabilities, fddimibSMTEntry=fddimibSMTEntry, fddimibSMTOpVersionId=fddimibSMTOpVersionId, fddimibMACSMTIndex=fddimibMACSMTIndex, fddimibMACCountersEntry=fddimibMACCountersEntry, fddimibMACTable=fddimibMACTable, fddimibPATHConfigEntry=fddimibPATHConfigEntry, FddiTimeMilli=FddiTimeMilli, fddimibPORTNeighborType=fddimibPORTNeighborType, fddimibSMTBypassPresent=fddimibSMTBypassPresent, fddimibMACNotCopiedFlag=fddimibMACNotCopiedFlag, fddimibPATHIndex=fddimibPATHIndex, fddimibPORTRequestedPaths=fddimibPORTRequestedPaths, fddimibPORTConnectState=fddimibPORTConnectState, fddimibSMT=fddimibSMT, fddimibMACFrameErrorThreshold=fddimibMACFrameErrorThreshold, fddimibPATHConfigTokenOrder=fddimibPATHConfigTokenOrder, fddimibMACCounters=fddimibMACCounters, fddimibMACCountersTable=fddimibMACCountersTable, fddimibSMTConnectionPolicy=fddimibSMTConnectionPolicy, fddimibMACAvailablePaths=fddimibMACAvailablePaths, fddimibMACIfIndex=fddimibMACIfIndex, fddimibMACTVXCapability=fddimibMACTVXCapability, fddimibMACOldUpstreamNbr=fddimibMACOldUpstreamNbr, fddimibPATH=fddimibPATH, fddimibPORTMACIndicated=fddimibPORTMACIndicated, fddimibSMTPeerWrapFlag=fddimibSMTPeerWrapFlag, fddimibSMTStationAction=fddimibSMTStationAction, fddimibMACTNeg=fddimibMACTNeg, fddimibPORTAction=fddimibPORTAction, fddimibMACRingOpCts=fddimibMACRingOpCts, fddimibPORTEntry=fddimibPORTEntry, fddimibPORTHardwarePresent=fddimibPORTHardwarePresent, fddimibSMTTNotify=fddimibSMTTNotify, fddimibPORTLerAlarm=fddimibPORTLerAlarm, fddimibMACIndex=fddimibMACIndex, fddimibMACDaFlag=fddimibMACDaFlag, fddimibMACFrameErrorRatio=fddimibMACFrameErrorRatio, fddimibSMTTraceMaxExpiration=fddimibSMTTraceMaxExpiration, fddimibMACDownstreamPORTType=fddimibMACDownstreamPORTType, fddimibSMTConfigPolicy=fddimibSMTConfigPolicy, fddimibMACRequestedPaths=fddimibMACRequestedPaths, fddi=fddi, fddimibPORTSMTIndex=fddimibPORTSMTIndex)
