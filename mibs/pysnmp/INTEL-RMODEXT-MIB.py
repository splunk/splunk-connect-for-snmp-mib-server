#
# PySNMP MIB module INTEL-RMODEXT-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/INTEL-RMODEXT-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 19:43:24 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, Integer, OctetString = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "Integer", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsUnion, ValueSizeConstraint, SingleValueConstraint, ConstraintsIntersection, ValueRangeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsUnion", "ValueSizeConstraint", "SingleValueConstraint", "ConstraintsIntersection", "ValueRangeConstraint")
modulesext, = mibBuilder.importSymbols("INTEL-GEN-MIB", "modulesext")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
NotificationType, TimeTicks, Integer32, ObjectIdentity, IpAddress, ModuleIdentity, Unsigned32, Bits, Counter64, MibIdentifier, iso, Counter32, Gauge32, MibScalar, MibTable, MibTableRow, MibTableColumn = mibBuilder.importSymbols("SNMPv2-SMI", "NotificationType", "TimeTicks", "Integer32", "ObjectIdentity", "IpAddress", "ModuleIdentity", "Unsigned32", "Bits", "Counter64", "MibIdentifier", "iso", "Counter32", "Gauge32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn")
TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString")
rmodext = MibIdentifier((1, 3, 6, 1, 4, 1, 343, 7, 13, 1))
rmodextGeneral = MibIdentifier((1, 3, 6, 1, 4, 1, 343, 7, 13, 1, 1))
rmodextGModuleTable = MibTable((1, 3, 6, 1, 4, 1, 343, 7, 13, 1, 1, 1), )
if mibBuilder.loadTexts: rmodextGModuleTable.setStatus('mandatory')
rmodextGModuleEntry = MibTableRow((1, 3, 6, 1, 4, 1, 343, 7, 13, 1, 1, 1, 1), ).setIndexNames((0, "INTEL-RMODEXT-MIB", "rmodextGModuleChassisIndex"), (0, "INTEL-RMODEXT-MIB", "rmodextGModuleIndex"))
if mibBuilder.loadTexts: rmodextGModuleEntry.setStatus('mandatory')
rmodextGModuleChassisIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 7, 13, 1, 1, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rmodextGModuleChassisIndex.setStatus('mandatory')
rmodextGModuleIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 7, 13, 1, 1, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rmodextGModuleIndex.setStatus('mandatory')
rmodextGModuleHwEncryption = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 7, 13, 1, 1, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rmodextGModuleHwEncryption.setStatus('mandatory')
rmodextGModuleSwEncryption = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 7, 13, 1, 1, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rmodextGModuleSwEncryption.setStatus('mandatory')
rmodextGModuleSwState = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 7, 13, 1, 1, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("testing", 1), ("noError", 2), ("error", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rmodextGModuleSwState.setStatus('mandatory')
rmodextGModuleRamFree = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 7, 13, 1, 1, 1, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rmodextGModuleRamFree.setStatus('mandatory')
rmodextGModuleSwVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 7, 13, 1, 1, 1, 1, 7), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rmodextGModuleSwVersion.setStatus('mandatory')
rmodextGModulePbaNo = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 7, 13, 1, 1, 1, 1, 8), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rmodextGModulePbaNo.setStatus('mandatory')
rmodextGModuleBootSectionVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 7, 13, 1, 1, 1, 1, 9), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rmodextGModuleBootSectionVersion.setStatus('mandatory')
rmodextGModuleMulti1 = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 7, 13, 1, 1, 1, 1, 10), OctetString().subtype(subtypeSpec=ValueSizeConstraint(250, 250)).setFixedLength(250)).setMaxAccess("readonly")
if mibBuilder.loadTexts: rmodextGModuleMulti1.setStatus('mandatory')
rmodextGModuleMulti2 = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 7, 13, 1, 1, 1, 1, 11), OctetString().subtype(subtypeSpec=ValueSizeConstraint(250, 250)).setFixedLength(250)).setMaxAccess("readonly")
if mibBuilder.loadTexts: rmodextGModuleMulti2.setStatus('mandatory')
mibBuilder.exportSymbols("INTEL-RMODEXT-MIB", rmodextGModuleSwVersion=rmodextGModuleSwVersion, rmodextGModuleSwEncryption=rmodextGModuleSwEncryption, rmodextGeneral=rmodextGeneral, rmodextGModuleChassisIndex=rmodextGModuleChassisIndex, rmodextGModuleMulti1=rmodextGModuleMulti1, rmodextGModulePbaNo=rmodextGModulePbaNo, rmodextGModuleRamFree=rmodextGModuleRamFree, rmodextGModuleEntry=rmodextGModuleEntry, rmodextGModuleIndex=rmodextGModuleIndex, rmodextGModuleMulti2=rmodextGModuleMulti2, rmodextGModuleBootSectionVersion=rmodextGModuleBootSectionVersion, rmodextGModuleSwState=rmodextGModuleSwState, rmodextGModuleHwEncryption=rmodextGModuleHwEncryption, rmodext=rmodext, rmodextGModuleTable=rmodextGModuleTable)
