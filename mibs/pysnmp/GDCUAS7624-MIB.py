#
# PySNMP MIB module GDCUAS7624-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/GDCUAS7624-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 19:05:46 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, OctetString, Integer = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "OctetString", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueSizeConstraint, ConstraintsIntersection, SingleValueConstraint, ValueRangeConstraint, ConstraintsUnion = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueSizeConstraint", "ConstraintsIntersection", "SingleValueConstraint", "ValueRangeConstraint", "ConstraintsUnion")
SCinstance, = mibBuilder.importSymbols("GDCMACRO-MIB", "SCinstance")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
NotificationType, Unsigned32, iso, TimeTicks, MibScalar, MibTable, MibTableRow, MibTableColumn, Integer32, ObjectIdentity, IpAddress, enterprises, Bits, Counter32, Counter64, MibIdentifier, ModuleIdentity, Gauge32 = mibBuilder.importSymbols("SNMPv2-SMI", "NotificationType", "Unsigned32", "iso", "TimeTicks", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Integer32", "ObjectIdentity", "IpAddress", "enterprises", "Bits", "Counter32", "Counter64", "MibIdentifier", "ModuleIdentity", "Gauge32")
TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString")
gdc = MibIdentifier((1, 3, 6, 1, 4, 1, 498))
niudiu = MibIdentifier((1, 3, 6, 1, 4, 1, 498, 18))
uas7624System = MibIdentifier((1, 3, 6, 1, 4, 1, 498, 18, 1))
uas7624 = MibIdentifier((1, 3, 6, 1, 4, 1, 498, 18, 2))
uas7624Version = MibIdentifier((1, 3, 6, 1, 4, 1, 498, 18, 1, 1))
uas7624Maintenance = MibIdentifier((1, 3, 6, 1, 4, 1, 498, 18, 1, 2))
uas7624Configuration = MibIdentifier((1, 3, 6, 1, 4, 1, 498, 18, 1, 3))
uas7624Diagnostics = MibIdentifier((1, 3, 6, 1, 4, 1, 498, 18, 1, 4))
uas7624Performance = MibIdentifier((1, 3, 6, 1, 4, 1, 498, 18, 1, 5))
uas7624AlarmConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 498, 18, 1, 6))
uas7624MIBversion = MibScalar((1, 3, 6, 1, 4, 1, 498, 18, 1, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(5, 5)).setFixedLength(5)).setMaxAccess("readonly")
if mibBuilder.loadTexts: uas7624MIBversion.setStatus('mandatory')
uas7624VersionTable = MibTable((1, 3, 6, 1, 4, 1, 498, 18, 1, 1, 2), )
if mibBuilder.loadTexts: uas7624VersionTable.setStatus('mandatory')
uas7624VersionEntry = MibTableRow((1, 3, 6, 1, 4, 1, 498, 18, 1, 1, 2, 1), ).setIndexNames((0, "GDCUAS7624-MIB", "uas7624VersionIndex"))
if mibBuilder.loadTexts: uas7624VersionEntry.setStatus('mandatory')
uas7624VersionIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 18, 1, 1, 2, 1, 1), SCinstance()).setMaxAccess("readonly")
if mibBuilder.loadTexts: uas7624VersionIndex.setStatus('mandatory')
uas7624FirmwareRev = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 18, 1, 1, 2, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(2, 2)).setFixedLength(2)).setMaxAccess("readonly")
if mibBuilder.loadTexts: uas7624FirmwareRev.setStatus('mandatory')
uas7624CardType = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 18, 1, 1, 2, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: uas7624CardType.setStatus('mandatory')
uas7624BootRev = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 18, 1, 1, 2, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(2, 2)).setFixedLength(2)).setMaxAccess("readonly")
if mibBuilder.loadTexts: uas7624BootRev.setStatus('mandatory')
uas7624MaintenanceTable = MibTable((1, 3, 6, 1, 4, 1, 498, 18, 1, 2, 1), )
if mibBuilder.loadTexts: uas7624MaintenanceTable.setStatus('mandatory')
uas7624MaintenanceEntry = MibTableRow((1, 3, 6, 1, 4, 1, 498, 18, 1, 2, 1, 1), ).setIndexNames((0, "GDCUAS7624-MIB", "uas7624MaintenanceLineIndex"))
if mibBuilder.loadTexts: uas7624MaintenanceEntry.setStatus('mandatory')
uas7624MaintenanceLineIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 18, 1, 2, 1, 1, 1), SCinstance()).setMaxAccess("readonly")
if mibBuilder.loadTexts: uas7624MaintenanceLineIndex.setStatus('mandatory')
uas7624SoftReset = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 18, 1, 2, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("norm", 1), ("reset", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: uas7624SoftReset.setStatus('mandatory')
uas7624DefaultInit = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 18, 1, 2, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("normal", 1), ("factoryDefault", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: uas7624DefaultInit.setStatus('mandatory')
uas7624ResetMajorAlarm = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 18, 1, 2, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("norm", 1), ("reset", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: uas7624ResetMajorAlarm.setStatus('mandatory')
uas7624ResetMinorAlarm = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 18, 1, 2, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("norm", 1), ("reset", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: uas7624ResetMinorAlarm.setStatus('mandatory')
uas7624ResetStatistics = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 18, 1, 2, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("norm", 1), ("reset", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: uas7624ResetStatistics.setStatus('mandatory')
uas7624StatLastInitialized = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 18, 1, 2, 1, 1, 7), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: uas7624StatLastInitialized.setStatus('mandatory')
uas7624ValidIntervals = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 18, 1, 2, 1, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 96))).setMaxAccess("readonly")
if mibBuilder.loadTexts: uas7624ValidIntervals.setStatus('mandatory')
uas7624SysUpTime = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 18, 1, 2, 1, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: uas7624SysUpTime.setStatus('mandatory')
uas7624LedStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 18, 1, 2, 1, 1, 10), OctetString().subtype(subtypeSpec=ValueSizeConstraint(2, 2)).setFixedLength(2)).setMaxAccess("readonly")
if mibBuilder.loadTexts: uas7624LedStatus.setStatus('mandatory')
uas7624AlarmStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 18, 1, 2, 1, 1, 11), OctetString().subtype(subtypeSpec=ValueSizeConstraint(4, 4)).setFixedLength(4)).setMaxAccess("readonly")
if mibBuilder.loadTexts: uas7624AlarmStatus.setStatus('mandatory')
uas7624LoopState = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 18, 1, 2, 1, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("inhibit", 1), ("enable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: uas7624LoopState.setStatus('mandatory')
uas7624ConfigMode = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 18, 1, 2, 1, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("hardMode", 1), ("softMode", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: uas7624ConfigMode.setStatus('mandatory')
uas7624ConfigTable = MibTable((1, 3, 6, 1, 4, 1, 498, 18, 1, 3, 1), )
if mibBuilder.loadTexts: uas7624ConfigTable.setStatus('mandatory')
uas7624ConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 498, 18, 1, 3, 1, 1), ).setIndexNames((0, "GDCUAS7624-MIB", "uas7624ConfigIndex"))
if mibBuilder.loadTexts: uas7624ConfigEntry.setStatus('mandatory')
uas7624ConfigIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 18, 1, 3, 1, 1, 1), SCinstance()).setMaxAccess("readonly")
if mibBuilder.loadTexts: uas7624ConfigIndex.setStatus('mandatory')
uas7624NetworkInterfaceType = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 18, 1, 3, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("ds1", 1), ("dsx1", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: uas7624NetworkInterfaceType.setStatus('mandatory')
uas7624TransmitClockSource = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 18, 1, 3, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("recovered", 1), ("internal", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: uas7624TransmitClockSource.setStatus('mandatory')
uas7624PreEqualization = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 18, 1, 3, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("none", 1), ("feet130", 2), ("feet260", 3), ("feet390", 4), ("feet530", 5), ("feet655", 6)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: uas7624PreEqualization.setStatus('mandatory')
uas7624Framing = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 18, 1, 3, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("eSF", 1), ("d4", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: uas7624Framing.setStatus('mandatory')
uas7624LineCoding = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 18, 1, 3, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("b8zs", 1), ("ami", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: uas7624LineCoding.setStatus('mandatory')
uas7624LineBuildout = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 18, 1, 3, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("dB0", 1), ("dB75", 2), ("dB15", 3), ("dB22", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: uas7624LineBuildout.setStatus('mandatory')
uas7624FDLMode = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 18, 1, 3, 1, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("none", 1), ("aNSIT1403", 2), ("tR54016", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: uas7624FDLMode.setStatus('mandatory')
uas7624Loopback = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 18, 1, 3, 1, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("inhibitloop", 1), ("payloadloop", 2), ("lineloop", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: uas7624Loopback.setStatus('mandatory')
uas7624AISLoopdown = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 18, 1, 3, 1, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(4, 60))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: uas7624AISLoopdown.setStatus('mandatory')
uas7624LineBuildoutMode = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 18, 1, 3, 1, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("auto", 1), ("manual", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: uas7624LineBuildoutMode.setStatus('mandatory')
uas7624FramingMode = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 18, 1, 3, 1, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("auto", 1), ("manual", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: uas7624FramingMode.setStatus('mandatory')
uas7624DiagTable = MibTable((1, 3, 6, 1, 4, 1, 498, 18, 1, 4, 1), )
if mibBuilder.loadTexts: uas7624DiagTable.setStatus('mandatory')
uas7624DiagEntry = MibTableRow((1, 3, 6, 1, 4, 1, 498, 18, 1, 4, 1, 1), ).setIndexNames((0, "GDCUAS7624-MIB", "uas7624DiagIndex"))
if mibBuilder.loadTexts: uas7624DiagEntry.setStatus('mandatory')
uas7624DiagIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 18, 1, 4, 1, 1, 1), SCinstance()).setMaxAccess("readonly")
if mibBuilder.loadTexts: uas7624DiagIndex.setStatus('mandatory')
uas7624DiagConfig = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 18, 1, 4, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("stopTest", 1), ("lineLoopback", 2), ("payloadLoopback", 3), ("digitalLoopback", 4), ("selfTest", 5), ("rdl", 6), ("rdlSelfTest", 7)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: uas7624DiagConfig.setStatus('mandatory')
uas7624T1TestLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 18, 1, 4, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16))).clone(namedValues=NamedValues(("noLimit", 1), ("testTime1Min", 2), ("testTime2Mins", 3), ("testTime3Mins", 4), ("testTime4Mins", 5), ("testTime5Mins", 6), ("testTime6Mins", 7), ("testTime7Mins", 8), ("testTime8Mins", 9), ("testTime9Mins", 10), ("testTime10Mins", 11), ("testTime15Mins", 12), ("testTime20Mins", 13), ("testTime25Mins", 14), ("testTime30Mins", 15), ("testTime30Secs", 16)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: uas7624T1TestLimit.setStatus('mandatory')
uas7624T1TestExecutionStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 18, 1, 4, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 4, 5))).clone(namedValues=NamedValues(("notInTest", 1), ("testInProgress", 2), ("testCompleted", 4), ("testCompletedNotInTest", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: uas7624T1TestExecutionStatus.setStatus('mandatory')
uas7624T1TestExceptions = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 18, 1, 4, 1, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readonly")
if mibBuilder.loadTexts: uas7624T1TestExceptions.setStatus('mandatory')
uas7624TestResults = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 18, 1, 4, 1, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1048576))).setMaxAccess("readonly")
if mibBuilder.loadTexts: uas7624TestResults.setStatus('mandatory')
uas7624ResetTestResults = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 18, 1, 4, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("norm", 1), ("reset", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: uas7624ResetTestResults.setStatus('mandatory')
uas7624Alarms = MibIdentifier((1, 3, 6, 1, 4, 1, 498, 18, 2, 1))
uas7624NoResponseAlm = MibIdentifier((1, 3, 6, 1, 4, 1, 498, 18, 2, 1, 1))
uas7624DiagRxErrAlm = MibIdentifier((1, 3, 6, 1, 4, 1, 498, 18, 2, 1, 2))
uas7624PowerUpAlm = MibIdentifier((1, 3, 6, 1, 4, 1, 498, 18, 2, 1, 3))
uas7624LossOfSignalAlm = MibIdentifier((1, 3, 6, 1, 4, 1, 498, 18, 2, 1, 4))
uas7624LossOfFrameAlm = MibIdentifier((1, 3, 6, 1, 4, 1, 498, 18, 2, 1, 5))
uas7624AisAlm = MibIdentifier((1, 3, 6, 1, 4, 1, 498, 18, 2, 1, 6))
uas7624YellowAlm = MibIdentifier((1, 3, 6, 1, 4, 1, 498, 18, 2, 1, 7))
uas7624OutofSyncAlm = MibIdentifier((1, 3, 6, 1, 4, 1, 498, 18, 2, 1, 8))
uas7624SealingCurrentNoContAlm = MibIdentifier((1, 3, 6, 1, 4, 1, 498, 18, 2, 1, 9))
uas7624UASAlm = MibIdentifier((1, 3, 6, 1, 4, 1, 498, 18, 2, 1, 10))
uas7624ESAlm = MibIdentifier((1, 3, 6, 1, 4, 1, 498, 18, 2, 1, 11))
uas7624LineCodeViolationAlm = MibIdentifier((1, 3, 6, 1, 4, 1, 498, 18, 2, 1, 12))
uas7624CRCAlm = MibIdentifier((1, 3, 6, 1, 4, 1, 498, 18, 2, 1, 13))
uas7624BESAlm = MibIdentifier((1, 3, 6, 1, 4, 1, 498, 18, 2, 1, 14))
uas7624SESAlm = MibIdentifier((1, 3, 6, 1, 4, 1, 498, 18, 2, 1, 15))
uas7624MajorBERAlm = MibIdentifier((1, 3, 6, 1, 4, 1, 498, 18, 2, 1, 16))
uas7624MinorBERAlm = MibIdentifier((1, 3, 6, 1, 4, 1, 498, 18, 2, 1, 17))
uas7624AlarmConfigTable = MibTable((1, 3, 6, 1, 4, 1, 498, 18, 1, 6, 1), )
if mibBuilder.loadTexts: uas7624AlarmConfigTable.setStatus('mandatory')
uas7624AlarmConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 498, 18, 1, 6, 1, 1), ).setIndexNames((0, "GDCUAS7624-MIB", "uas7624AlarmConfigIndex"), (0, "GDCUAS7624-MIB", "uas7624AlarmConfigIdentifier"))
if mibBuilder.loadTexts: uas7624AlarmConfigEntry.setStatus('mandatory')
uas7624AlarmConfigIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 18, 1, 6, 1, 1, 1), SCinstance()).setMaxAccess("readonly")
if mibBuilder.loadTexts: uas7624AlarmConfigIndex.setStatus('mandatory')
uas7624AlarmConfigIdentifier = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 18, 1, 6, 1, 1, 2), ObjectIdentifier()).setMaxAccess("readonly")
if mibBuilder.loadTexts: uas7624AlarmConfigIdentifier.setStatus('mandatory')
uas7624AlarmCountWindow = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 18, 1, 6, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9))).clone(namedValues=NamedValues(("disabled", 1), ("last1sec", 2), ("last10sec", 3), ("last30sec", 4), ("last1min", 5), ("last15min", 6), ("last1hr", 7), ("last24hr", 8), ("infinite", 9)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: uas7624AlarmCountWindow.setStatus('mandatory')
uas7624AlarmCountThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 18, 1, 6, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10))).clone(namedValues=NamedValues(("thresGT1", 1), ("thresGT3", 2), ("thresGT10", 3), ("thresGT100", 4), ("thresGT1000", 5), ("thresGT10000", 6), ("thres10E03", 7), ("thres10E04", 8), ("thres10E05", 9), ("thres10E06", 10)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: uas7624AlarmCountThreshold.setStatus('mandatory')
uas7624LocalAlarmConfigTable = MibTable((1, 3, 6, 1, 4, 1, 498, 18, 1, 6, 2), )
if mibBuilder.loadTexts: uas7624LocalAlarmConfigTable.setStatus('mandatory')
uas7624LocalAlarmConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 498, 18, 1, 6, 2, 1), ).setIndexNames((0, "GDCUAS7624-MIB", "uas7624LocalAlarmConfigIndex"))
if mibBuilder.loadTexts: uas7624LocalAlarmConfigEntry.setStatus('mandatory')
uas7624LocalAlarmConfigIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 18, 1, 6, 2, 1, 1), SCinstance()).setMaxAccess("readonly")
if mibBuilder.loadTexts: uas7624LocalAlarmConfigIndex.setStatus('mandatory')
uas7624LOSLocal = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 18, 1, 6, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("disabled", 1), ("enabledMajor", 2), ("enabledMinor", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: uas7624LOSLocal.setStatus('mandatory')
uas7624LOFLocal = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 18, 1, 6, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("disabled", 1), ("enabledMajor", 2), ("enabledMinor", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: uas7624LOFLocal.setStatus('mandatory')
uas7624AISLocal = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 18, 1, 6, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("disabled", 1), ("enabledMajor", 2), ("enabledMinor", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: uas7624AISLocal.setStatus('mandatory')
uas7624YELLOWLocal = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 18, 1, 6, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("disabled", 1), ("enabledMajor", 2), ("enabledMinor", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: uas7624YELLOWLocal.setStatus('mandatory')
uas7624LineCodeViolationLocal = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 18, 1, 6, 2, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("disabled", 1), ("enabledMajor", 2), ("enabledMinor", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: uas7624LineCodeViolationLocal.setStatus('mandatory')
uas7624CRCLocal = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 18, 1, 6, 2, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("disabled", 1), ("enabledMajor", 2), ("enabledMinor", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: uas7624CRCLocal.setStatus('mandatory')
uas7624ESLocal = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 18, 1, 6, 2, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("disabled", 1), ("enabledMajor", 2), ("enabledMinor", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: uas7624ESLocal.setStatus('mandatory')
uas7624BESLocal = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 18, 1, 6, 2, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("disabled", 1), ("enabledMajor", 2), ("enabledMinor", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: uas7624BESLocal.setStatus('mandatory')
uas7624SESLocal = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 18, 1, 6, 2, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("disabled", 1), ("enabledMajor", 2), ("enabledMinor", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: uas7624SESLocal.setStatus('mandatory')
uas7624UASLocal = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 18, 1, 6, 2, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("disabled", 1), ("enabledMajor", 2), ("enabledMinor", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: uas7624UASLocal.setStatus('mandatory')
uas7624OutofSyncLocal = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 18, 1, 6, 2, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("disabled", 1), ("enabledMajor", 2), ("enabledMinor", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: uas7624OutofSyncLocal.setStatus('mandatory')
uas7624NoSealingCurrentLocal = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 18, 1, 6, 2, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("disabled", 1), ("enabledMajor", 2), ("enabledMinor", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: uas7624NoSealingCurrentLocal.setStatus('mandatory')
uas7624CurrentTable = MibTable((1, 3, 6, 1, 4, 1, 498, 18, 1, 5, 3), )
if mibBuilder.loadTexts: uas7624CurrentTable.setStatus('mandatory')
uas7624CurrentEntry = MibTableRow((1, 3, 6, 1, 4, 1, 498, 18, 1, 5, 3, 1), ).setIndexNames((0, "GDCUAS7624-MIB", "uas7624CurrentIndex"))
if mibBuilder.loadTexts: uas7624CurrentEntry.setStatus('mandatory')
uas7624CurrentIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 18, 1, 5, 3, 1, 1), SCinstance()).setMaxAccess("readonly")
if mibBuilder.loadTexts: uas7624CurrentIndex.setStatus('mandatory')
uas7624CurrentStat = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 18, 1, 5, 3, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(10, 17))).setMaxAccess("readonly")
if mibBuilder.loadTexts: uas7624CurrentStat.setStatus('mandatory')
uas7624IntervalTable = MibTable((1, 3, 6, 1, 4, 1, 498, 18, 1, 5, 4), )
if mibBuilder.loadTexts: uas7624IntervalTable.setStatus('mandatory')
uas7624IntervalEntry = MibTableRow((1, 3, 6, 1, 4, 1, 498, 18, 1, 5, 4, 1), ).setIndexNames((0, "GDCUAS7624-MIB", "uas7624IntervalIndex"), (0, "GDCUAS7624-MIB", "uas7624IntervalNumber"))
if mibBuilder.loadTexts: uas7624IntervalEntry.setStatus('mandatory')
uas7624IntervalIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 18, 1, 5, 4, 1, 1), SCinstance()).setMaxAccess("readonly")
if mibBuilder.loadTexts: uas7624IntervalIndex.setStatus('mandatory')
uas7624IntervalNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 18, 1, 5, 4, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 96))).setMaxAccess("readonly")
if mibBuilder.loadTexts: uas7624IntervalNumber.setStatus('mandatory')
uas7624IntervalStat = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 18, 1, 5, 4, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(11, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: uas7624IntervalStat.setStatus('mandatory')
uas7624TotalTable = MibTable((1, 3, 6, 1, 4, 1, 498, 18, 1, 5, 5), )
if mibBuilder.loadTexts: uas7624TotalTable.setStatus('mandatory')
uas7624TotalEntry = MibTableRow((1, 3, 6, 1, 4, 1, 498, 18, 1, 5, 5, 1), ).setIndexNames((0, "GDCUAS7624-MIB", "uas7624TotalIndex"))
if mibBuilder.loadTexts: uas7624TotalEntry.setStatus('mandatory')
uas7624TotalIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 18, 1, 5, 5, 1, 1), SCinstance()).setMaxAccess("readonly")
if mibBuilder.loadTexts: uas7624TotalIndex.setStatus('mandatory')
uas7624TotalStat = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 18, 1, 5, 5, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(14, 17))).setMaxAccess("readonly")
if mibBuilder.loadTexts: uas7624TotalStat.setStatus('mandatory')
uas7624Recent24HrTable = MibTable((1, 3, 6, 1, 4, 1, 498, 18, 1, 5, 6), )
if mibBuilder.loadTexts: uas7624Recent24HrTable.setStatus('mandatory')
uas7624Recent24HrEntry = MibTableRow((1, 3, 6, 1, 4, 1, 498, 18, 1, 5, 6, 1), ).setIndexNames((0, "GDCUAS7624-MIB", "uas7624Recent24HrIndex"))
if mibBuilder.loadTexts: uas7624Recent24HrEntry.setStatus('mandatory')
uas7624Recent24HrIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 18, 1, 5, 6, 1, 1), SCinstance()).setMaxAccess("readonly")
if mibBuilder.loadTexts: uas7624Recent24HrIndex.setStatus('mandatory')
uas7624Recent24HrStat = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 18, 1, 5, 6, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(14, 14)).setFixedLength(14)).setMaxAccess("readonly")
if mibBuilder.loadTexts: uas7624Recent24HrStat.setStatus('mandatory')
mibBuilder.exportSymbols("GDCUAS7624-MIB", uas7624AISLoopdown=uas7624AISLoopdown, uas7624Maintenance=uas7624Maintenance, uas7624Recent24HrIndex=uas7624Recent24HrIndex, uas7624BESLocal=uas7624BESLocal, uas7624StatLastInitialized=uas7624StatLastInitialized, uas7624OutofSyncAlm=uas7624OutofSyncAlm, uas7624ResetStatistics=uas7624ResetStatistics, uas7624CurrentStat=uas7624CurrentStat, uas7624PowerUpAlm=uas7624PowerUpAlm, uas7624VersionTable=uas7624VersionTable, uas7624DiagConfig=uas7624DiagConfig, uas7624FDLMode=uas7624FDLMode, uas7624TotalStat=uas7624TotalStat, uas7624FramingMode=uas7624FramingMode, niudiu=niudiu, uas7624UASAlm=uas7624UASAlm, uas7624TotalEntry=uas7624TotalEntry, uas7624MaintenanceLineIndex=uas7624MaintenanceLineIndex, uas7624Recent24HrStat=uas7624Recent24HrStat, uas7624Recent24HrTable=uas7624Recent24HrTable, uas7624VersionIndex=uas7624VersionIndex, uas7624SysUpTime=uas7624SysUpTime, uas7624FirmwareRev=uas7624FirmwareRev, uas7624OutofSyncLocal=uas7624OutofSyncLocal, uas7624Loopback=uas7624Loopback, uas7624Version=uas7624Version, uas7624AlarmConfigTable=uas7624AlarmConfigTable, uas7624TotalIndex=uas7624TotalIndex, uas7624CRCAlm=uas7624CRCAlm, uas7624YELLOWLocal=uas7624YELLOWLocal, uas7624TestResults=uas7624TestResults, uas7624NoSealingCurrentLocal=uas7624NoSealingCurrentLocal, uas7624MaintenanceTable=uas7624MaintenanceTable, uas7624UASLocal=uas7624UASLocal, uas7624CurrentTable=uas7624CurrentTable, uas7624=uas7624, uas7624ConfigTable=uas7624ConfigTable, uas7624VersionEntry=uas7624VersionEntry, uas7624MIBversion=uas7624MIBversion, uas7624NetworkInterfaceType=uas7624NetworkInterfaceType, uas7624PreEqualization=uas7624PreEqualization, uas7624DiagEntry=uas7624DiagEntry, uas7624SESAlm=uas7624SESAlm, uas7624LineCodeViolationAlm=uas7624LineCodeViolationAlm, uas7624IntervalNumber=uas7624IntervalNumber, uas7624SESLocal=uas7624SESLocal, uas7624TransmitClockSource=uas7624TransmitClockSource, uas7624AlarmConfigIdentifier=uas7624AlarmConfigIdentifier, uas7624T1TestExceptions=uas7624T1TestExceptions, uas7624AlarmConfig=uas7624AlarmConfig, uas7624DiagIndex=uas7624DiagIndex, uas7624MaintenanceEntry=uas7624MaintenanceEntry, uas7624Configuration=uas7624Configuration, uas7624IntervalEntry=uas7624IntervalEntry, uas7624AISLocal=uas7624AISLocal, uas7624LineBuildoutMode=uas7624LineBuildoutMode, uas7624AlarmCountWindow=uas7624AlarmCountWindow, uas7624LedStatus=uas7624LedStatus, gdc=gdc, uas7624Diagnostics=uas7624Diagnostics, uas7624LocalAlarmConfigEntry=uas7624LocalAlarmConfigEntry, uas7624MajorBERAlm=uas7624MajorBERAlm, uas7624T1TestExecutionStatus=uas7624T1TestExecutionStatus, uas7624ValidIntervals=uas7624ValidIntervals, uas7624Framing=uas7624Framing, uas7624CurrentEntry=uas7624CurrentEntry, uas7624LocalAlarmConfigTable=uas7624LocalAlarmConfigTable, uas7624TotalTable=uas7624TotalTable, uas7624ConfigMode=uas7624ConfigMode, uas7624LossOfSignalAlm=uas7624LossOfSignalAlm, uas7624AisAlm=uas7624AisAlm, uas7624IntervalStat=uas7624IntervalStat, uas7624IntervalIndex=uas7624IntervalIndex, uas7624MinorBERAlm=uas7624MinorBERAlm, uas7624LOSLocal=uas7624LOSLocal, uas7624ConfigEntry=uas7624ConfigEntry, uas7624YellowAlm=uas7624YellowAlm, uas7624ResetTestResults=uas7624ResetTestResults, uas7624T1TestLimit=uas7624T1TestLimit, uas7624Recent24HrEntry=uas7624Recent24HrEntry, uas7624ConfigIndex=uas7624ConfigIndex, uas7624LineCodeViolationLocal=uas7624LineCodeViolationLocal, uas7624NoResponseAlm=uas7624NoResponseAlm, uas7624SoftReset=uas7624SoftReset, uas7624LineBuildout=uas7624LineBuildout, uas7624CurrentIndex=uas7624CurrentIndex, uas7624Performance=uas7624Performance, uas7624DiagTable=uas7624DiagTable, uas7624BootRev=uas7624BootRev, uas7624CardType=uas7624CardType, uas7624ESLocal=uas7624ESLocal, uas7624System=uas7624System, uas7624LossOfFrameAlm=uas7624LossOfFrameAlm, uas7624BESAlm=uas7624BESAlm, uas7624LoopState=uas7624LoopState, uas7624DiagRxErrAlm=uas7624DiagRxErrAlm, uas7624IntervalTable=uas7624IntervalTable, uas7624LOFLocal=uas7624LOFLocal, uas7624LocalAlarmConfigIndex=uas7624LocalAlarmConfigIndex, uas7624CRCLocal=uas7624CRCLocal, uas7624SealingCurrentNoContAlm=uas7624SealingCurrentNoContAlm, uas7624AlarmCountThreshold=uas7624AlarmCountThreshold, uas7624DefaultInit=uas7624DefaultInit, uas7624ESAlm=uas7624ESAlm, uas7624ResetMinorAlarm=uas7624ResetMinorAlarm, uas7624LineCoding=uas7624LineCoding, uas7624AlarmConfigEntry=uas7624AlarmConfigEntry, uas7624AlarmConfigIndex=uas7624AlarmConfigIndex, uas7624AlarmStatus=uas7624AlarmStatus, uas7624ResetMajorAlarm=uas7624ResetMajorAlarm, uas7624Alarms=uas7624Alarms)
