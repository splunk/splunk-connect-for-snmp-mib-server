#
# PySNMP MIB module WWP-LEOS-CHASSIS-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/WWP-LEOS-CHASSIS-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 21:31:01 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, Integer, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "OctetString", "Integer", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueSizeConstraint, ValueRangeConstraint, SingleValueConstraint, ConstraintsUnion, ConstraintsIntersection = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueSizeConstraint", "ValueRangeConstraint", "SingleValueConstraint", "ConstraintsUnion", "ConstraintsIntersection")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
Gauge32, Counter32, MibScalar, MibTable, MibTableRow, MibTableColumn, IpAddress, ObjectIdentity, Unsigned32, Integer32, MibIdentifier, Bits, NotificationType, TimeTicks, iso, Counter64, ModuleIdentity = mibBuilder.importSymbols("SNMPv2-SMI", "Gauge32", "Counter32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "IpAddress", "ObjectIdentity", "Unsigned32", "Integer32", "MibIdentifier", "Bits", "NotificationType", "TimeTicks", "iso", "Counter64", "ModuleIdentity")
TextualConvention, DisplayString, MacAddress, DateAndTime, TruthValue = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString", "MacAddress", "DateAndTime", "TruthValue")
wwpModulesLeos, = mibBuilder.importSymbols("WWP-SMI", "wwpModulesLeos")
wwpLeosChassisMIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 6141, 2, 60, 11))
wwpLeosChassisMIB.setRevisions(('2012-09-27 00:00', '2011-11-14 00:00', '2011-03-22 00:00', '2010-01-27 00:00', '2009-11-09 00:00', '2008-10-06 00:00', '2008-06-14 00:00', '2007-05-06 00:48', '2003-04-28 00:00', '2003-03-11 00:00', '2001-04-03 17:00',))
if mibBuilder.loadTexts: wwpLeosChassisMIB.setLastUpdated('201209270000Z')
if mibBuilder.loadTexts: wwpLeosChassisMIB.setOrganization('Ciena, Inc')
class PortList(TextualConvention, OctetString):
    status = 'current'
    subtypeSpec = OctetString.subtypeSpec + ValueSizeConstraint(0, 255)

class FileName(TextualConvention, OctetString):
    status = 'current'
    displayHint = '255a'
    subtypeSpec = OctetString.subtypeSpec + ValueSizeConstraint(0, 64)

wwpLeosChassisMIBObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 6141, 2, 60, 11, 1))
wwpLeosChassis = MibIdentifier((1, 3, 6, 1, 4, 1, 6141, 2, 60, 11, 1, 1))
wwpLeosChassisNotifAttrs = MibIdentifier((1, 3, 6, 1, 4, 1, 6141, 2, 60, 11, 1, 2))
wwpLeosChassisModule = MibIdentifier((1, 3, 6, 1, 4, 1, 6141, 2, 60, 11, 1, 1, 1))
wwpLeosChassisBatteryModule = MibIdentifier((1, 3, 6, 1, 4, 1, 6141, 2, 60, 11, 1, 1, 2))
wwpLeosChassisPowerSupplyModule = MibIdentifier((1, 3, 6, 1, 4, 1, 6141, 2, 60, 11, 1, 1, 3))
wwpLeosChassisFanModule = MibIdentifier((1, 3, 6, 1, 4, 1, 6141, 2, 60, 11, 1, 1, 4))
wwpLeosChassisTempSensor = MibIdentifier((1, 3, 6, 1, 4, 1, 6141, 2, 60, 11, 1, 1, 5))
wwpLeosChassisNotif = MibIdentifier((1, 3, 6, 1, 4, 1, 6141, 2, 60, 11, 1, 1, 7))
wwpLeosChassisPlatformCaps = MibIdentifier((1, 3, 6, 1, 4, 1, 6141, 2, 60, 11, 1, 1, 8))
wwpLeosChassisResourceCounts = MibIdentifier((1, 3, 6, 1, 4, 1, 6141, 2, 60, 11, 1, 1, 9))
wwpLeosChassisMIBNotificationPrefix = MibIdentifier((1, 3, 6, 1, 4, 1, 6141, 2, 60, 11, 2))
wwpLeosChassisMIBNotifications = MibIdentifier((1, 3, 6, 1, 4, 1, 6141, 2, 60, 11, 2, 0))
wwpLeosChassisMIBConformance = MibIdentifier((1, 3, 6, 1, 4, 1, 6141, 2, 60, 11, 3))
wwpLeosChassisMIBCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 6141, 2, 60, 11, 3, 1))
wwpLeosChassisMIBGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 6141, 2, 60, 11, 3, 2))
wwpLeosChassisRebootState = MibScalar((1, 3, 6, 1, 4, 1, 6141, 2, 60, 11, 1, 1, 1, 1), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wwpLeosChassisRebootState.setStatus('current')
wwpLeosChassisSystemTimeOffsetScope = MibScalar((1, 3, 6, 1, 4, 1, 6141, 2, 60, 11, 1, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("dhcp", 1), ("user", 2), ("both", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosChassisSystemTimeOffsetScope.setStatus('current')
wwpLeosChassisSystemTimeOffset = MibScalar((1, 3, 6, 1, 4, 1, 6141, 2, 60, 11, 1, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-43200, 50400))).setUnits('seconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: wwpLeosChassisSystemTimeOffset.setStatus('current')
wwpLeosChassisSerialConsoleState = MibScalar((1, 3, 6, 1, 4, 1, 6141, 2, 60, 11, 1, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wwpLeosChassisSerialConsoleState.setStatus('current')
wwpLeosChassisShellInactivityTimerState = MibScalar((1, 3, 6, 1, 4, 1, 6141, 2, 60, 11, 1, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wwpLeosChassisShellInactivityTimerState.setStatus('current')
wwpLeosChassisShellInactivityTimeout = MibScalar((1, 3, 6, 1, 4, 1, 6141, 2, 60, 11, 1, 1, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1500))).setUnits('minutes').setMaxAccess("readwrite")
if mibBuilder.loadTexts: wwpLeosChassisShellInactivityTimeout.setStatus('current')
wwpLeosChassisSerialConsoleDataBits = MibScalar((1, 3, 6, 1, 4, 1, 6141, 2, 60, 11, 1, 1, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(7, 8))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wwpLeosChassisSerialConsoleDataBits.setStatus('current')
wwpLeosChassisSerialConsoleParity = MibScalar((1, 3, 6, 1, 4, 1, 6141, 2, 60, 11, 1, 1, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("even", 1), ("mark", 2), ("none", 3), ("odd", 4), ("space", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wwpLeosChassisSerialConsoleParity.setStatus('current')
wwpLeosChassisSerialConsoleStopBits = MibScalar((1, 3, 6, 1, 4, 1, 6141, 2, 60, 11, 1, 1, 1, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wwpLeosChassisSerialConsoleStopBits.setStatus('current')
wwpLeosChassisRebootNow = MibScalar((1, 3, 6, 1, 4, 1, 6141, 2, 60, 11, 1, 1, 1, 14), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wwpLeosChassisRebootNow.setStatus('current')
wwpLeosChassisShellLoginTimerState = MibScalar((1, 3, 6, 1, 4, 1, 6141, 2, 60, 11, 1, 1, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wwpLeosChassisShellLoginTimerState.setStatus('current')
wwpLeosChassisShellLoginTimeout = MibScalar((1, 3, 6, 1, 4, 1, 6141, 2, 60, 11, 1, 1, 1, 16), Integer32().subtype(subtypeSpec=ValueRangeConstraint(10, 300))).setUnits('seconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: wwpLeosChassisShellLoginTimeout.setStatus('current')
wwpLeosChassisScheduledRebootTable = MibTable((1, 3, 6, 1, 4, 1, 6141, 2, 60, 11, 1, 1, 1, 17), )
if mibBuilder.loadTexts: wwpLeosChassisScheduledRebootTable.setStatus('current')
wwpLeosChassisWelcomeBanner = MibScalar((1, 3, 6, 1, 4, 1, 6141, 2, 60, 11, 1, 1, 1, 18), FileName()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wwpLeosChassisWelcomeBanner.setStatus('current')
wwpLeosChassisResetWelcomeBanner = MibScalar((1, 3, 6, 1, 4, 1, 6141, 2, 60, 11, 1, 1, 1, 19), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wwpLeosChassisResetWelcomeBanner.setStatus('current')
wwpLeosChassisLoginBanner = MibScalar((1, 3, 6, 1, 4, 1, 6141, 2, 60, 11, 1, 1, 1, 20), FileName()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wwpLeosChassisLoginBanner.setStatus('current')
wwpLeosChassisResetLoginBanner = MibScalar((1, 3, 6, 1, 4, 1, 6141, 2, 60, 11, 1, 1, 1, 21), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wwpLeosChassisResetLoginBanner.setStatus('current')
wwpLeosChassisMacAddress = MibScalar((1, 3, 6, 1, 4, 1, 6141, 2, 60, 11, 1, 1, 1, 50), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosChassisMacAddress.setStatus('current')
wwpLeosChassisDeviceId = MibScalar((1, 3, 6, 1, 4, 1, 6141, 2, 60, 11, 1, 1, 1, 51), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosChassisDeviceId.setStatus('current')
wwpLeosChassisSerialNumber = MibScalar((1, 3, 6, 1, 4, 1, 6141, 2, 60, 11, 1, 1, 1, 52), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosChassisSerialNumber.setStatus('current')
wwpLeosChassisMfgDate = MibScalar((1, 3, 6, 1, 4, 1, 6141, 2, 60, 11, 1, 1, 1, 53), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosChassisMfgDate.setStatus('current')
wwpLeosChassisParamVersion = MibScalar((1, 3, 6, 1, 4, 1, 6141, 2, 60, 11, 1, 1, 1, 54), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosChassisParamVersion.setStatus('current')
wwpLeosChassisHardwareVersion = MibScalar((1, 3, 6, 1, 4, 1, 6141, 2, 60, 11, 1, 1, 1, 55), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosChassisHardwareVersion.setStatus('current')
wwpLeosChassisInnerDoorStatus = MibScalar((1, 3, 6, 1, 4, 1, 6141, 2, 60, 11, 1, 1, 1, 56), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("none", 0), ("open", 1), ("closed", 2), ("override", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosChassisInnerDoorStatus.setStatus('current')
wwpLeosChassisOuterDoorStatus = MibScalar((1, 3, 6, 1, 4, 1, 6141, 2, 60, 11, 1, 1, 1, 57), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("none", 0), ("open", 1), ("closed", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosChassisOuterDoorStatus.setStatus('current')
wwpLeosChassisPostState = MibScalar((1, 3, 6, 1, 4, 1, 6141, 2, 60, 11, 1, 1, 1, 60), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wwpLeosChassisPostState.setStatus('current')
wwpLeosChassisPostResultTable = MibTable((1, 3, 6, 1, 4, 1, 6141, 2, 60, 11, 1, 1, 1, 61), )
if mibBuilder.loadTexts: wwpLeosChassisPostResultTable.setStatus('current')
wwpLeosChassisExternalAlarmStatus = MibScalar((1, 3, 6, 1, 4, 1, 6141, 2, 60, 11, 1, 1, 1, 62), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("raised", 1), ("cleared", 2)))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: wwpLeosChassisExternalAlarmStatus.setStatus('current')
wwpLeosChassisExternalAlarm = MibScalar((1, 3, 6, 1, 4, 1, 6141, 2, 60, 11, 1, 1, 1, 63), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: wwpLeosChassisExternalAlarm.setStatus('current')
wwpLeosSystemPartNumber = MibScalar((1, 3, 6, 1, 4, 1, 6141, 2, 60, 11, 1, 1, 1, 66), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosSystemPartNumber.setStatus('current')
wwpLeosSystemSerialNumber = MibScalar((1, 3, 6, 1, 4, 1, 6141, 2, 60, 11, 1, 1, 1, 67), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosSystemSerialNumber.setStatus('current')
wwpLeosChassisPostResultEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6141, 2, 60, 11, 1, 1, 1, 61, 1), ).setIndexNames((0, "WWP-LEOS-CHASSIS-MIB", "wwpLeosChassisPostResultIndex"))
if mibBuilder.loadTexts: wwpLeosChassisPostResultEntry.setStatus('current')
wwpLeosChassisPostResultIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 11, 1, 1, 1, 61, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 32)))
if mibBuilder.loadTexts: wwpLeosChassisPostResultIndex.setStatus('current')
wwpLeosChassisPostResultCode = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 11, 1, 1, 1, 61, 1, 2), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosChassisPostResultCode.setStatus('current')
wwpLeosChassisPostResultMessage = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 11, 1, 1, 1, 61, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosChassisPostResultMessage.setStatus('current')
wwpLeosChassisScheduledRebootEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6141, 2, 60, 11, 1, 1, 1, 17, 1), ).setIndexNames((0, "WWP-LEOS-CHASSIS-MIB", "wwpLeosChassisScheduledRebootIndex"))
if mibBuilder.loadTexts: wwpLeosChassisScheduledRebootEntry.setStatus('current')
wwpLeosChassisScheduledRebootIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 11, 1, 1, 1, 17, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wwpLeosChassisScheduledRebootIndex.setStatus('current')
wwpLeosChassisScheduledRebootTimestamp = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 11, 1, 1, 1, 17, 1, 2), DateAndTime()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wwpLeosChassisScheduledRebootTimestamp.setStatus('current')
wwpLeosChassisScheduledRebootActive = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 11, 1, 1, 1, 17, 1, 3), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wwpLeosChassisScheduledRebootActive.setStatus('current')
wwpLeosChassisScheduledRebootNopost = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 11, 1, 1, 1, 17, 1, 4), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wwpLeosChassisScheduledRebootNopost.setStatus('current')
wwpLeosChassisScheduledRebootDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 11, 1, 1, 1, 17, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 86400))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wwpLeosChassisScheduledRebootDelay.setStatus('current')
wwpLeosChassisDoorAlarmTable = MibTable((1, 3, 6, 1, 4, 1, 6141, 2, 60, 11, 1, 1, 1, 64), )
if mibBuilder.loadTexts: wwpLeosChassisDoorAlarmTable.setStatus('current')
wwpLeosChassisDoorAlarmEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6141, 2, 60, 11, 1, 1, 1, 64, 1), ).setIndexNames((0, "WWP-LEOS-CHASSIS-MIB", "wwpLeosChassisDoorAlarmIndex"))
if mibBuilder.loadTexts: wwpLeosChassisDoorAlarmEntry.setStatus('current')
wwpLeosChassisDoorAlarmIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 11, 1, 1, 1, 64, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("inner", 0), ("outer", 1)))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: wwpLeosChassisDoorAlarmIndex.setStatus('current')
wwpLeosChassisDoorAlarmStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 11, 1, 1, 1, 64, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosChassisDoorAlarmStatus.setStatus('current')
wwpLeosChassisDoorAlarmAdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 11, 1, 1, 1, 64, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wwpLeosChassisDoorAlarmAdminStatus.setStatus('current')
wwpLeosChassisDoorAlarmFlapDetect = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 11, 1, 1, 1, 64, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone(2)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wwpLeosChassisDoorAlarmFlapDetect.setStatus('current')
wwpLeosChassisDoorAlarmFlapCount = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 11, 1, 1, 1, 64, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(3, 100)).clone(5)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wwpLeosChassisDoorAlarmFlapCount.setStatus('current')
wwpLeosChassisDoorAlarmFlapDetectTime = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 11, 1, 1, 1, 64, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(5, 3600)).clone(10)).setUnits('seconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: wwpLeosChassisDoorAlarmFlapDetectTime.setStatus('current')
wwpLeosChassisDoorAlarmFlapHoldTime = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 11, 1, 1, 1, 64, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(60, 3600)).clone(300)).setUnits('seconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: wwpLeosChassisDoorAlarmFlapHoldTime.setStatus('current')
wwpLeosChassisPowerTable = MibTable((1, 3, 6, 1, 4, 1, 6141, 2, 60, 11, 1, 1, 3, 1), )
if mibBuilder.loadTexts: wwpLeosChassisPowerTable.setStatus('current')
wwpLeosChassisPowerEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6141, 2, 60, 11, 1, 1, 3, 1, 1), ).setIndexNames((0, "WWP-LEOS-CHASSIS-MIB", "wwpLeosChassisPowerSupplyNum"))
if mibBuilder.loadTexts: wwpLeosChassisPowerEntry.setStatus('current')
wwpLeosChassisPowerSupplyNum = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 11, 1, 1, 3, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosChassisPowerSupplyNum.setStatus('current')
wwpLeosChassisPowerSupplyState = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 11, 1, 1, 3, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("online", 1), ("offline", 2), ("faulted", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosChassisPowerSupplyState.setStatus('current')
wwpLeosChassisPowerSupplyType = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 11, 1, 1, 3, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("ac", 1), ("dc", 2), ("unequipped", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosChassisPowerSupplyType.setStatus('current')
wwpLeosChassisPowerSupplyRedundantState = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 11, 1, 1, 3, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("protected", 1), ("unprotected", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosChassisPowerSupplyRedundantState.setStatus('current')
wwpLeosChassisRedPowerSupplyNotifEnabled = MibScalar((1, 3, 6, 1, 4, 1, 6141, 2, 60, 11, 1, 1, 3, 2), TruthValue().clone('true')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wwpLeosChassisRedPowerSupplyNotifEnabled.setStatus('current')
wwpLeosChassisFanModuleTable = MibTable((1, 3, 6, 1, 4, 1, 6141, 2, 60, 11, 1, 1, 4, 1), )
if mibBuilder.loadTexts: wwpLeosChassisFanModuleTable.setStatus('current')
wwpLeosChassisFanModuleEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6141, 2, 60, 11, 1, 1, 4, 1, 1), ).setIndexNames((0, "WWP-LEOS-CHASSIS-MIB", "wwpLeosChassisFanModuleNum"))
if mibBuilder.loadTexts: wwpLeosChassisFanModuleEntry.setStatus('current')
wwpLeosChassisFanModuleNum = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 11, 1, 1, 4, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosChassisFanModuleNum.setStatus('current')
wwpLeosChassisFanModuleType = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 11, 1, 1, 4, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("fixed", 1), ("hotSwappable", 2), ("unequipped", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosChassisFanModuleType.setStatus('current')
wwpLeosChassisFanModuleStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 11, 1, 1, 4, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("ok", 1), ("pending", 2), ("failure", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosChassisFanModuleStatus.setStatus('current')
wwpLeosChassisFanAvgSpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 11, 1, 1, 4, 1, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setUnits('rpm').setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosChassisFanAvgSpeed.setStatus('current')
wwpLeosChassisFanCurrentSpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 11, 1, 1, 4, 1, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setUnits('rpm').setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosChassisFanCurrentSpeed.setStatus('current')
wwpLeosChassisFanMinSpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 11, 1, 1, 4, 1, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setUnits('rpm').setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosChassisFanMinSpeed.setStatus('current')
wwpLeosChassisFanModuleNotifEnabled = MibScalar((1, 3, 6, 1, 4, 1, 6141, 2, 60, 11, 1, 1, 4, 2), TruthValue().clone('true')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wwpLeosChassisFanModuleNotifEnabled.setStatus('current')
wwpLeosChassisTempSensorTable = MibTable((1, 3, 6, 1, 4, 1, 6141, 2, 60, 11, 1, 1, 5, 1), )
if mibBuilder.loadTexts: wwpLeosChassisTempSensorTable.setStatus('current')
wwpLeosChassisTempSensorEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6141, 2, 60, 11, 1, 1, 5, 1, 1), ).setIndexNames((0, "WWP-LEOS-CHASSIS-MIB", "wwpLeosChassisTempSensorNum"))
if mibBuilder.loadTexts: wwpLeosChassisTempSensorEntry.setStatus('current')
wwpLeosChassisTempSensorNum = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 11, 1, 1, 5, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosChassisTempSensorNum.setStatus('current')
wwpLeosChassisTempSensorValue = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 11, 1, 1, 5, 1, 1, 2), Integer32()).setUnits('degrees Celsius').setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosChassisTempSensorValue.setStatus('current')
wwpLeosChassisTempSensorHighThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 11, 1, 1, 5, 1, 1, 3), Integer32()).setUnits('degrees Celsius').setMaxAccess("readwrite")
if mibBuilder.loadTexts: wwpLeosChassisTempSensorHighThreshold.setStatus('current')
wwpLeosChassisTempSensorLowThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 11, 1, 1, 5, 1, 1, 4), Integer32()).setUnits('degrees Celsius').setMaxAccess("readwrite")
if mibBuilder.loadTexts: wwpLeosChassisTempSensorLowThreshold.setStatus('current')
wwpLeosChassisTempSensorState = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 11, 1, 1, 5, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("higherThanThreshold", 0), ("normal", 1), ("lowerThanThreshold", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosChassisTempSensorState.setStatus('current')
wwpLeosChassisTempNotifEnabled = MibScalar((1, 3, 6, 1, 4, 1, 6141, 2, 60, 11, 1, 1, 5, 2), TruthValue().clone('true')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wwpLeosChassisTempNotifEnabled.setStatus('current')
wwpLeosChassisTempHighThreshold = MibScalar((1, 3, 6, 1, 4, 1, 6141, 2, 60, 11, 1, 1, 5, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wwpLeosChassisTempHighThreshold.setStatus('current')
wwpLeosChassisTempLowThreshold = MibScalar((1, 3, 6, 1, 4, 1, 6141, 2, 60, 11, 1, 1, 5, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wwpLeosChassisTempLowThreshold.setStatus('current')
wwpPowerSwitchingOp = MibScalar((1, 3, 6, 1, 4, 1, 6141, 2, 60, 11, 1, 1, 7, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("none", 0), ("acToBattery", 1), ("bateryToAC", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpPowerSwitchingOp.setStatus('current')
wwpLeosChassisBatteryStatus = MibScalar((1, 3, 6, 1, 4, 1, 6141, 2, 60, 11, 1, 1, 2, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("online", 0), ("present", 1), ("missing", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosChassisBatteryStatus.setStatus('current')
wwpLeosChassisBatteryVoltageLevel = MibScalar((1, 3, 6, 1, 4, 1, 6141, 2, 60, 11, 1, 1, 2, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("unknown", 0), ("normal", 1), ("low", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosChassisBatteryVoltageLevel.setStatus('current')
wwpLeosChassisBatteryCondition = MibScalar((1, 3, 6, 1, 4, 1, 6141, 2, 60, 11, 1, 1, 2, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("unknown", 0), ("good", 1), ("bad", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosChassisBatteryCondition.setStatus('current')
wwpLeosChassisPowerSource = MibScalar((1, 3, 6, 1, 4, 1, 6141, 2, 60, 11, 1, 1, 2, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("primaryPower", 1), ("battery", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosChassisPowerSource.setStatus('current')
wwpLeosChassisBatteryNormalStateName = MibScalar((1, 3, 6, 1, 4, 1, 6141, 2, 60, 11, 1, 1, 2, 5), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 128))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wwpLeosChassisBatteryNormalStateName.setStatus('current')
wwpLeosChassisBatteryLowStateName = MibScalar((1, 3, 6, 1, 4, 1, 6141, 2, 60, 11, 1, 1, 2, 6), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 128))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wwpLeosChassisBatteryLowStateName.setStatus('current')
wwpLeosChassisBatteryGoodStateName = MibScalar((1, 3, 6, 1, 4, 1, 6141, 2, 60, 11, 1, 1, 2, 7), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 128))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wwpLeosChassisBatteryGoodStateName.setStatus('current')
wwpLeosChassisBatteryBadStateName = MibScalar((1, 3, 6, 1, 4, 1, 6141, 2, 60, 11, 1, 1, 2, 8), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 128))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wwpLeosChassisBatteryBadStateName.setStatus('current')
wwpLeosChassisBatteryPresentStateName = MibScalar((1, 3, 6, 1, 4, 1, 6141, 2, 60, 11, 1, 1, 2, 9), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 128))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wwpLeosChassisBatteryPresentStateName.setStatus('current')
wwpLeosChassisBatteryMissingStateName = MibScalar((1, 3, 6, 1, 4, 1, 6141, 2, 60, 11, 1, 1, 2, 10), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 128))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wwpLeosChassisBatteryMissingStateName.setStatus('current')
wwpLeosChassisBatteryPowerPrimaryStateName = MibScalar((1, 3, 6, 1, 4, 1, 6141, 2, 60, 11, 1, 1, 2, 11), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 128))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wwpLeosChassisBatteryPowerPrimaryStateName.setStatus('current')
wwpLeosChassisBatteryPowerBatteryStateName = MibScalar((1, 3, 6, 1, 4, 1, 6141, 2, 60, 11, 1, 1, 2, 12), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 128))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wwpLeosChassisBatteryPowerBatteryStateName.setStatus('current')
wwpLeosChassisBatteryLowStateNotifEnabled = MibScalar((1, 3, 6, 1, 4, 1, 6141, 2, 60, 11, 1, 1, 2, 13), TruthValue().clone('true')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wwpLeosChassisBatteryLowStateNotifEnabled.setStatus('current')
wwpLeosChassisBatteryBadStateNotifEnabled = MibScalar((1, 3, 6, 1, 4, 1, 6141, 2, 60, 11, 1, 1, 2, 14), TruthValue().clone('true')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wwpLeosChassisBatteryBadStateNotifEnabled.setStatus('current')
wwpLeosChassisBatteryMissingStateNotifEnabled = MibScalar((1, 3, 6, 1, 4, 1, 6141, 2, 60, 11, 1, 1, 2, 15), TruthValue().clone('true')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wwpLeosChassisBatteryMissingStateNotifEnabled.setStatus('current')
wwpLeosChassisBatteryPowerNotifEnabled = MibScalar((1, 3, 6, 1, 4, 1, 6141, 2, 60, 11, 1, 1, 2, 16), TruthValue().clone('true')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wwpLeosChassisBatteryPowerNotifEnabled.setStatus('current')
wwpLeosChassisPostErrorCategory = MibScalar((1, 3, 6, 1, 4, 1, 6141, 2, 60, 11, 1, 2, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("chassis", 1), ("blade", 2), ("port", 3)))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: wwpLeosChassisPostErrorCategory.setStatus('current')
wwpLeosChassisPostErrorValue = MibScalar((1, 3, 6, 1, 4, 1, 6141, 2, 60, 11, 1, 2, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: wwpLeosChassisPostErrorValue.setStatus('current')
wwpLeosChassisPostErrorCode = MibScalar((1, 3, 6, 1, 4, 1, 6141, 2, 60, 11, 1, 2, 3), Unsigned32()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: wwpLeosChassisPostErrorCode.setStatus('current')
wwpLeosChassisPostErrorMsg = MibScalar((1, 3, 6, 1, 4, 1, 6141, 2, 60, 11, 1, 2, 4), DisplayString()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: wwpLeosChassisPostErrorMsg.setStatus('current')
wwpLeosChassisRebootReasonErrorType = MibScalar((1, 3, 6, 1, 4, 1, 6141, 2, 60, 11, 1, 2, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12))).clone(namedValues=NamedValues(("unknown", 1), ("snmp", 2), ("powerFailure", 3), ("appload", 4), ("errorHandler", 5), ("watchDog", 6), ("upgrade", 7), ("cli", 8), ("resetButton", 9), ("serviceModeChange", 10), ("guardianReboot", 11), ("guardianSaosRestart", 12)))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: wwpLeosChassisRebootReasonErrorType.setStatus('current')
wwpLeosChassisSnmpState = MibScalar((1, 3, 6, 1, 4, 1, 6141, 2, 60, 11, 1, 2, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2)))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: wwpLeosChassisSnmpState.setStatus('current')
wwpLeosChassisPowerSupplyStatusNotification = NotificationType((1, 3, 6, 1, 4, 1, 6141, 2, 60, 11, 2, 0, 1)).setObjects(("WWP-LEOS-CHASSIS-MIB", "wwpLeosChassisPowerSupplyNum"), ("WWP-LEOS-CHASSIS-MIB", "wwpLeosChassisPowerSupplyState"), ("WWP-LEOS-CHASSIS-MIB", "wwpLeosChassisPowerSupplyType"))
if mibBuilder.loadTexts: wwpLeosChassisPowerSupplyStatusNotification.setStatus('current')
wwpLeosChassisFanModuleNotification = NotificationType((1, 3, 6, 1, 4, 1, 6141, 2, 60, 11, 2, 0, 2)).setObjects(("WWP-LEOS-CHASSIS-MIB", "wwpLeosChassisFanModuleNum"), ("WWP-LEOS-CHASSIS-MIB", "wwpLeosChassisFanModuleStatus"))
if mibBuilder.loadTexts: wwpLeosChassisFanModuleNotification.setStatus('current')
wwpLeosChassisTempNotification = NotificationType((1, 3, 6, 1, 4, 1, 6141, 2, 60, 11, 2, 0, 3)).setObjects(("WWP-LEOS-CHASSIS-MIB", "wwpLeosChassisTempSensorState"), ("WWP-LEOS-CHASSIS-MIB", "wwpLeosChassisTempSensorValue"), ("WWP-LEOS-CHASSIS-MIB", "wwpLeosChassisTempSensorHighThreshold"), ("WWP-LEOS-CHASSIS-MIB", "wwpLeosChassisTempSensorLowThreshold"))
if mibBuilder.loadTexts: wwpLeosChassisTempNotification.setStatus('current')
wwpLeosChassisPowerSwitchNotification = NotificationType((1, 3, 6, 1, 4, 1, 6141, 2, 60, 11, 2, 0, 4)).setObjects(("WWP-LEOS-CHASSIS-MIB", "wwpPowerSwitchingOp"))
if mibBuilder.loadTexts: wwpLeosChassisPowerSwitchNotification.setStatus('current')
wwpLeosChassisBatteryStatusNotification = NotificationType((1, 3, 6, 1, 4, 1, 6141, 2, 60, 11, 2, 0, 5)).setObjects(("WWP-LEOS-CHASSIS-MIB", "wwpLeosChassisBatteryStatus"))
if mibBuilder.loadTexts: wwpLeosChassisBatteryStatusNotification.setStatus('current')
wwpLeosChassisBatteryVoltageLevelNotification = NotificationType((1, 3, 6, 1, 4, 1, 6141, 2, 60, 11, 2, 0, 6)).setObjects(("WWP-LEOS-CHASSIS-MIB", "wwpLeosChassisBatteryVoltageLevel"))
if mibBuilder.loadTexts: wwpLeosChassisBatteryVoltageLevelNotification.setStatus('current')
wwpLeosChassisBatteryConditionNotification = NotificationType((1, 3, 6, 1, 4, 1, 6141, 2, 60, 11, 2, 0, 7)).setObjects(("WWP-LEOS-CHASSIS-MIB", "wwpLeosChassisBatteryCondition"))
if mibBuilder.loadTexts: wwpLeosChassisBatteryConditionNotification.setStatus('current')
wwpLeosChassisPowerSourceNotification = NotificationType((1, 3, 6, 1, 4, 1, 6141, 2, 60, 11, 2, 0, 8)).setObjects(("WWP-LEOS-CHASSIS-MIB", "wwpLeosChassisPowerSource"))
if mibBuilder.loadTexts: wwpLeosChassisPowerSourceNotification.setStatus('current')
wwpLeosChassisPostErrorNotification = NotificationType((1, 3, 6, 1, 4, 1, 6141, 2, 60, 11, 2, 0, 9)).setObjects(("WWP-LEOS-CHASSIS-MIB", "wwpLeosChassisPostErrorCategory"), ("WWP-LEOS-CHASSIS-MIB", "wwpLeosChassisPostErrorValue"), ("WWP-LEOS-CHASSIS-MIB", "wwpLeosChassisPostErrorCode"), ("WWP-LEOS-CHASSIS-MIB", "wwpLeosChassisPostErrorMsg"))
if mibBuilder.loadTexts: wwpLeosChassisPostErrorNotification.setStatus('current')
wwpLeosChassisRebootNotification = NotificationType((1, 3, 6, 1, 4, 1, 6141, 2, 60, 11, 2, 0, 10)).setObjects(("WWP-LEOS-CHASSIS-MIB", "wwpLeosChassisRebootReasonErrorType"))
if mibBuilder.loadTexts: wwpLeosChassisRebootNotification.setStatus('current')
wwpLeosChassisSnmpStateNotification = NotificationType((1, 3, 6, 1, 4, 1, 6141, 2, 60, 11, 2, 0, 11)).setObjects(("WWP-LEOS-CHASSIS-MIB", "wwpLeosChassisSnmpState"))
if mibBuilder.loadTexts: wwpLeosChassisSnmpStateNotification.setStatus('current')
wwpLeosChassisDyingGaspNotification = NotificationType((1, 3, 6, 1, 4, 1, 6141, 2, 60, 11, 2, 0, 12)).setObjects(("WWP-LEOS-CHASSIS-MIB", "wwpLeosChassisDeviceId"), ("WWP-LEOS-CHASSIS-MIB", "wwpLeosChassisHardwareVersion"), ("WWP-LEOS-CHASSIS-MIB", "wwpLeosChassisSerialNumber"), ("WWP-LEOS-CHASSIS-MIB", "wwpLeosChassisMacAddress"), ("WWP-LEOS-CHASSIS-MIB", "wwpLeosChassisMfgDate"), ("WWP-LEOS-CHASSIS-MIB", "wwpLeosChassisParamVersion"))
if mibBuilder.loadTexts: wwpLeosChassisDyingGaspNotification.setStatus('current')
wwpLeosChassisDoorStatusChangeNotification = NotificationType((1, 3, 6, 1, 4, 1, 6141, 2, 60, 11, 2, 0, 13)).setObjects(("WWP-LEOS-CHASSIS-MIB", "wwpLeosChassisDeviceId"), ("WWP-LEOS-CHASSIS-MIB", "wwpLeosChassisHardwareVersion"), ("WWP-LEOS-CHASSIS-MIB", "wwpLeosChassisSerialNumber"), ("WWP-LEOS-CHASSIS-MIB", "wwpLeosChassisMacAddress"), ("WWP-LEOS-CHASSIS-MIB", "wwpLeosChassisMfgDate"), ("WWP-LEOS-CHASSIS-MIB", "wwpLeosChassisParamVersion"), ("WWP-LEOS-CHASSIS-MIB", "wwpLeosChassisInnerDoorStatus"), ("WWP-LEOS-CHASSIS-MIB", "wwpLeosChassisOuterDoorStatus"))
if mibBuilder.loadTexts: wwpLeosChassisDoorStatusChangeNotification.setStatus('deprecated')
wwpLeosChassisInnerDoorStatusChangeNotification = NotificationType((1, 3, 6, 1, 4, 1, 6141, 2, 60, 11, 2, 0, 14)).setObjects(("WWP-LEOS-CHASSIS-MIB", "wwpLeosChassisDeviceId"), ("WWP-LEOS-CHASSIS-MIB", "wwpLeosChassisHardwareVersion"), ("WWP-LEOS-CHASSIS-MIB", "wwpLeosChassisSerialNumber"), ("WWP-LEOS-CHASSIS-MIB", "wwpLeosChassisMacAddress"), ("WWP-LEOS-CHASSIS-MIB", "wwpLeosChassisMfgDate"), ("WWP-LEOS-CHASSIS-MIB", "wwpLeosChassisParamVersion"), ("WWP-LEOS-CHASSIS-MIB", "wwpLeosChassisInnerDoorStatus"))
if mibBuilder.loadTexts: wwpLeosChassisInnerDoorStatusChangeNotification.setStatus('current')
wwpLeosChassisOuterDoorStatusChangeNotification = NotificationType((1, 3, 6, 1, 4, 1, 6141, 2, 60, 11, 2, 0, 15)).setObjects(("WWP-LEOS-CHASSIS-MIB", "wwpLeosChassisDeviceId"), ("WWP-LEOS-CHASSIS-MIB", "wwpLeosChassisHardwareVersion"), ("WWP-LEOS-CHASSIS-MIB", "wwpLeosChassisSerialNumber"), ("WWP-LEOS-CHASSIS-MIB", "wwpLeosChassisMacAddress"), ("WWP-LEOS-CHASSIS-MIB", "wwpLeosChassisMfgDate"), ("WWP-LEOS-CHASSIS-MIB", "wwpLeosChassisParamVersion"), ("WWP-LEOS-CHASSIS-MIB", "wwpLeosChassisOuterDoorStatus"))
if mibBuilder.loadTexts: wwpLeosChassisOuterDoorStatusChangeNotification.setStatus('current')
wwpLeosChassisExternalAlarmStatusChangeNotification = NotificationType((1, 3, 6, 1, 4, 1, 6141, 2, 60, 11, 2, 0, 16)).setObjects(("WWP-LEOS-CHASSIS-MIB", "wwpLeosChassisDeviceId"), ("WWP-LEOS-CHASSIS-MIB", "wwpLeosChassisHardwareVersion"), ("WWP-LEOS-CHASSIS-MIB", "wwpLeosChassisSerialNumber"), ("WWP-LEOS-CHASSIS-MIB", "wwpLeosChassisMacAddress"), ("WWP-LEOS-CHASSIS-MIB", "wwpLeosChassisMfgDate"), ("WWP-LEOS-CHASSIS-MIB", "wwpLeosChassisParamVersion"), ("WWP-LEOS-CHASSIS-MIB", "wwpLeosChassisOuterDoorStatus"), ("WWP-LEOS-CHASSIS-MIB", "wwpLeosChassisExternalAlarm"), ("WWP-LEOS-CHASSIS-MIB", "wwpLeosChassisExternalAlarmStatus"))
if mibBuilder.loadTexts: wwpLeosChassisExternalAlarmStatusChangeNotification.setStatus('current')
wwpLeosChassisDoorAlarmStatusChangeNotification = NotificationType((1, 3, 6, 1, 4, 1, 6141, 2, 60, 11, 2, 0, 17)).setObjects(("WWP-LEOS-CHASSIS-MIB", "wwpLeosChassisDoorAlarmIndex"), ("WWP-LEOS-CHASSIS-MIB", "wwpLeosChassisDoorAlarmStatus"))
if mibBuilder.loadTexts: wwpLeosChassisDoorAlarmStatusChangeNotification.setStatus('current')
wwpLeosChassisPlatformCapsMaxPhysPorts = MibScalar((1, 3, 6, 1, 4, 1, 6141, 2, 60, 11, 1, 1, 8, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 28))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosChassisPlatformCapsMaxPhysPorts.setStatus('current')
wwpLeosChassisPlatformCapsMaxAggrPorts = MibScalar((1, 3, 6, 1, 4, 1, 6141, 2, 60, 11, 1, 1, 8, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 14))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosChassisPlatformCapsMaxAggrPorts.setStatus('current')
wwpLeosChassisPlatformCapsMaxVlans = MibScalar((1, 3, 6, 1, 4, 1, 6141, 2, 60, 11, 1, 1, 8, 3), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4064))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosChassisPlatformCapsMaxVlans.setStatus('current')
wwpLeosChassisPlatformCapsMaxIgmpSnoopVlans = MibScalar((1, 3, 6, 1, 4, 1, 6141, 2, 60, 11, 1, 1, 8, 4), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosChassisPlatformCapsMaxIgmpSnoopVlans.setStatus('current')
wwpLeosChassisPlatformCapsMaxMulticastgroups = MibScalar((1, 3, 6, 1, 4, 1, 6141, 2, 60, 11, 1, 1, 8, 5), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 1024))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosChassisPlatformCapsMaxMulticastgroups.setStatus('current')
wwpLeosChassisPlatformCapsMaxRstpDomains = MibScalar((1, 3, 6, 1, 4, 1, 6141, 2, 60, 11, 1, 1, 8, 6), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosChassisPlatformCapsMaxRstpDomains.setStatus('current')
wwpLeosChassisPlatformCapsMaxTunnels = MibScalar((1, 3, 6, 1, 4, 1, 6141, 2, 60, 11, 1, 1, 8, 7), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosChassisPlatformCapsMaxTunnels.setStatus('current')
wwpLeosChassisPlatformCapsMaxIngressTunnels = MibScalar((1, 3, 6, 1, 4, 1, 6141, 2, 60, 11, 1, 1, 8, 8), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosChassisPlatformCapsMaxIngressTunnels.setStatus('current')
wwpLeosChassisPlatformCapsMaxEgressTunnels = MibScalar((1, 3, 6, 1, 4, 1, 6141, 2, 60, 11, 1, 1, 8, 9), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosChassisPlatformCapsMaxEgressTunnels.setStatus('current')
wwpLeosChassisPlatformCapsMaxVcs = MibScalar((1, 3, 6, 1, 4, 1, 6141, 2, 60, 11, 1, 1, 8, 10), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 127))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosChassisPlatformCapsMaxVcs.setStatus('current')
wwpLeosChassisPlatformCapsMaxVss = MibScalar((1, 3, 6, 1, 4, 1, 6141, 2, 60, 11, 1, 1, 8, 11), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 127))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosChassisPlatformCapsMaxVss.setStatus('current')
wwpLeosChassisPlatformCapsMaxVsMembers = MibScalar((1, 3, 6, 1, 4, 1, 6141, 2, 60, 11, 1, 1, 8, 12), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 5334))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosChassisPlatformCapsMaxVsMembers.setStatus('current')
wwpLeosChassisPlatformCapsMaxLearnedMacs = MibScalar((1, 3, 6, 1, 4, 1, 6141, 2, 60, 11, 1, 1, 8, 13), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 20000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosChassisPlatformCapsMaxLearnedMacs.setStatus('current')
wwpLeosChassisPlatformCapsMaxFsmtEntries = MibScalar((1, 3, 6, 1, 4, 1, 6141, 2, 60, 11, 1, 1, 8, 14), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 140))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosChassisPlatformCapsMaxFsmtEntries.setStatus('current')
wwpLeosChassisPlatformCapsMaxFsmtCosEntries = MibScalar((1, 3, 6, 1, 4, 1, 6141, 2, 60, 11, 1, 1, 8, 15), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 34))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosChassisPlatformCapsMaxFsmtCosEntries.setStatus('current')
wwpLeosChassisPlatformCapsMaxL4ProtEntries = MibScalar((1, 3, 6, 1, 4, 1, 6141, 2, 60, 11, 1, 1, 8, 16), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 62))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosChassisPlatformCapsMaxL4ProtEntries.setStatus('current')
wwpLeosChassisPlatformCapsMaxSltEntries = MibScalar((1, 3, 6, 1, 4, 1, 6141, 2, 60, 11, 1, 1, 8, 17), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 99))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosChassisPlatformCapsMaxSltEntries.setStatus('current')
wwpLeosChassisPlatformCapsMaxSactEntries = MibScalar((1, 3, 6, 1, 4, 1, 6141, 2, 60, 11, 1, 1, 8, 18), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 2074))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosChassisPlatformCapsMaxSactEntries.setStatus('current')
wwpLeosChassisPlatformCapsMaxSmtEntries = MibScalar((1, 3, 6, 1, 4, 1, 6141, 2, 60, 11, 1, 1, 8, 19), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 1024))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosChassisPlatformCapsMaxSmtEntries.setStatus('current')
wwpLeosChassisPlatformCapsMaxEprSnids = MibScalar((1, 3, 6, 1, 4, 1, 6141, 2, 60, 11, 1, 1, 8, 20), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 8))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosChassisPlatformCapsMaxEprSnids.setStatus('current')
wwpLeosChassisPlatformCapsMaxSltWildcards = MibScalar((1, 3, 6, 1, 4, 1, 6141, 2, 60, 11, 1, 1, 8, 21), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 3))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosChassisPlatformCapsMaxSltWildcards.setStatus('current')
wwpLeosChassisPlatformCapsVlanTranslation = MibScalar((1, 3, 6, 1, 4, 1, 6141, 2, 60, 11, 1, 1, 8, 22), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosChassisPlatformCapsVlanTranslation.setStatus('current')
wwpLeosChassisPlatformCapsProtocolFilters = MibScalar((1, 3, 6, 1, 4, 1, 6141, 2, 60, 11, 1, 1, 8, 23), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosChassisPlatformCapsProtocolFilters.setStatus('current')
wwpLeosChassisPlatformCapsMultiSubsPerPort = MibScalar((1, 3, 6, 1, 4, 1, 6141, 2, 60, 11, 1, 1, 8, 24), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosChassisPlatformCapsMultiSubsPerPort.setStatus('current')
wwpLeosChassisPlatformCapsVplsFpga = MibScalar((1, 3, 6, 1, 4, 1, 6141, 2, 60, 11, 1, 1, 8, 25), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosChassisPlatformCapsVplsFpga.setStatus('current')
wwpLeosChassisPlatformCapsPbtFpga = MibScalar((1, 3, 6, 1, 4, 1, 6141, 2, 60, 11, 1, 1, 8, 26), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosChassisPlatformCapsPbtFpga.setStatus('current')
wwpLeosChassisPlatformCapsAoamFpga = MibScalar((1, 3, 6, 1, 4, 1, 6141, 2, 60, 11, 1, 1, 8, 27), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosChassisPlatformCapsAoamFpga.setStatus('current')
wwpLeosChassisPlatformCapsDcPower = MibScalar((1, 3, 6, 1, 4, 1, 6141, 2, 60, 11, 1, 1, 8, 29), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosChassisPlatformCapsDcPower.setStatus('current')
wwpLeosChassisPlatformCapsAcPower = MibScalar((1, 3, 6, 1, 4, 1, 6141, 2, 60, 11, 1, 1, 8, 30), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosChassisPlatformCapsAcPower.setStatus('current')
wwpLeosChassisPlatformCapsRedunPower = MibScalar((1, 3, 6, 1, 4, 1, 6141, 2, 60, 11, 1, 1, 8, 31), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosChassisPlatformCapsRedunPower.setStatus('current')
wwpLeosChassisResourcesMaxPorts = MibScalar((1, 3, 6, 1, 4, 1, 6141, 2, 60, 11, 1, 1, 9, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 28))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosChassisResourcesMaxPorts.setStatus('current')
wwpLeosChassisResourcesFreePorts = MibScalar((1, 3, 6, 1, 4, 1, 6141, 2, 60, 11, 1, 1, 9, 2), Gauge32().subtype(subtypeSpec=ValueRangeConstraint(0, 28))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosChassisResourcesFreePorts.setStatus('current')
wwpLeosChassisResourcesMaxAggrPorts = MibScalar((1, 3, 6, 1, 4, 1, 6141, 2, 60, 11, 1, 1, 9, 3), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 14))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosChassisResourcesMaxAggrPorts.setStatus('current')
wwpLeosChassisResourcesFreeAggrs = MibScalar((1, 3, 6, 1, 4, 1, 6141, 2, 60, 11, 1, 1, 9, 4), Gauge32().subtype(subtypeSpec=ValueRangeConstraint(0, 14))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosChassisResourcesFreeAggrs.setStatus('current')
wwpLeosChassisResourcesMaxPortStateGrps = MibScalar((1, 3, 6, 1, 4, 1, 6141, 2, 60, 11, 1, 1, 9, 5), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 21))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosChassisResourcesMaxPortStateGrps.setStatus('current')
wwpLeosChassisResourcesFreePortStateGrps = MibScalar((1, 3, 6, 1, 4, 1, 6141, 2, 60, 11, 1, 1, 9, 6), Gauge32().subtype(subtypeSpec=ValueRangeConstraint(0, 21))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosChassisResourcesFreePortStateGrps.setStatus('current')
wwpLeosChassisResourcesMaxVlans = MibScalar((1, 3, 6, 1, 4, 1, 6141, 2, 60, 11, 1, 1, 9, 7), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4064))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosChassisResourcesMaxVlans.setStatus('current')
wwpLeosChassisResourcesFreeVlans = MibScalar((1, 3, 6, 1, 4, 1, 6141, 2, 60, 11, 1, 1, 9, 8), Gauge32().subtype(subtypeSpec=ValueRangeConstraint(0, 4064))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosChassisResourcesFreeVlans.setStatus('current')
wwpLeosChassisResourcesMaxVlanMembers = MibScalar((1, 3, 6, 1, 4, 1, 6141, 2, 60, 11, 1, 1, 9, 9), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 170688))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosChassisResourcesMaxVlanMembers.setStatus('current')
wwpLeosChassisResourcesFreeVlanMembers = MibScalar((1, 3, 6, 1, 4, 1, 6141, 2, 60, 11, 1, 1, 9, 10), Gauge32().subtype(subtypeSpec=ValueRangeConstraint(0, 170688))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosChassisResourcesFreeVlanMembers.setStatus('current')
wwpLeosChassisResourcesMaxEprSnets = MibScalar((1, 3, 6, 1, 4, 1, 6141, 2, 60, 11, 1, 1, 9, 11), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 8))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosChassisResourcesMaxEprSnets.setStatus('current')
wwpLeosChassisResourcesFreeEprSnets = MibScalar((1, 3, 6, 1, 4, 1, 6141, 2, 60, 11, 1, 1, 9, 12), Gauge32().subtype(subtypeSpec=ValueRangeConstraint(0, 8))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosChassisResourcesFreeEprSnets.setStatus('current')
wwpLeosChassisResourcesMaxMcastSnets = MibScalar((1, 3, 6, 1, 4, 1, 6141, 2, 60, 11, 1, 1, 9, 13), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosChassisResourcesMaxMcastSnets.setStatus('current')
wwpLeosChassisResourcesFreeMcastSnets = MibScalar((1, 3, 6, 1, 4, 1, 6141, 2, 60, 11, 1, 1, 9, 14), Gauge32().subtype(subtypeSpec=ValueRangeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosChassisResourcesFreeMcastSnets.setStatus('current')
wwpLeosChassisResourcesMaxMcastGroups = MibScalar((1, 3, 6, 1, 4, 1, 6141, 2, 60, 11, 1, 1, 9, 15), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 1024))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosChassisResourcesMaxMcastGroups.setStatus('current')
wwpLeosChassisResourcesFreeMcastGroups = MibScalar((1, 3, 6, 1, 4, 1, 6141, 2, 60, 11, 1, 1, 9, 16), Gauge32().subtype(subtypeSpec=ValueRangeConstraint(0, 1024))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosChassisResourcesFreeMcastGroups.setStatus('current')
wwpLeosChassisResourcesMaxDhcpRelayAgnts = MibScalar((1, 3, 6, 1, 4, 1, 6141, 2, 60, 11, 1, 1, 9, 17), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosChassisResourcesMaxDhcpRelayAgnts.setStatus('current')
wwpLeosChassisResourcesFreeDhcpRelayAgnts = MibScalar((1, 3, 6, 1, 4, 1, 6141, 2, 60, 11, 1, 1, 9, 18), Gauge32().subtype(subtypeSpec=ValueRangeConstraint(0, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosChassisResourcesFreeDhcpRelayAgnts.setStatus('current')
wwpLeosChassisResourcesMaxTunnels = MibScalar((1, 3, 6, 1, 4, 1, 6141, 2, 60, 11, 1, 1, 9, 19), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosChassisResourcesMaxTunnels.setStatus('current')
wwpLeosChassisResourcesFreeTunnels = MibScalar((1, 3, 6, 1, 4, 1, 6141, 2, 60, 11, 1, 1, 9, 20), Gauge32().subtype(subtypeSpec=ValueRangeConstraint(0, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosChassisResourcesFreeTunnels.setStatus('current')
wwpLeosChassisResourcesMaxIngressTunnels = MibScalar((1, 3, 6, 1, 4, 1, 6141, 2, 60, 11, 1, 1, 9, 21), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosChassisResourcesMaxIngressTunnels.setStatus('current')
wwpLeosChassisResourcesFreeIngressTunnels = MibScalar((1, 3, 6, 1, 4, 1, 6141, 2, 60, 11, 1, 1, 9, 22), Gauge32().subtype(subtypeSpec=ValueRangeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosChassisResourcesFreeIngressTunnels.setStatus('current')
wwpLeosChassisResourcesMaxEgressTunnels = MibScalar((1, 3, 6, 1, 4, 1, 6141, 2, 60, 11, 1, 1, 9, 23), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosChassisResourcesMaxEgressTunnels.setStatus('current')
wwpLeosChassisResourcesFreeEgressTunnels = MibScalar((1, 3, 6, 1, 4, 1, 6141, 2, 60, 11, 1, 1, 9, 24), Gauge32().subtype(subtypeSpec=ValueRangeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosChassisResourcesFreeEgressTunnels.setStatus('current')
wwpLeosChassisResourcesMaxVcs = MibScalar((1, 3, 6, 1, 4, 1, 6141, 2, 60, 11, 1, 1, 9, 25), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 127))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosChassisResourcesMaxVcs.setStatus('current')
wwpLeosChassisResourcesFreeVcs = MibScalar((1, 3, 6, 1, 4, 1, 6141, 2, 60, 11, 1, 1, 9, 26), Gauge32().subtype(subtypeSpec=ValueRangeConstraint(0, 127))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosChassisResourcesFreeVcs.setStatus('current')
wwpLeosChassisResourcesMaxVss = MibScalar((1, 3, 6, 1, 4, 1, 6141, 2, 60, 11, 1, 1, 9, 27), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 127))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosChassisResourcesMaxVss.setStatus('current')
wwpLeosChassisResourcesFreeVss = MibScalar((1, 3, 6, 1, 4, 1, 6141, 2, 60, 11, 1, 1, 9, 28), Gauge32().subtype(subtypeSpec=ValueRangeConstraint(0, 127))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosChassisResourcesFreeVss.setStatus('current')
wwpLeosChassisResourcesMaxVsMembers = MibScalar((1, 3, 6, 1, 4, 1, 6141, 2, 60, 11, 1, 1, 9, 29), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 5334))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosChassisResourcesMaxVsMembers.setStatus('current')
wwpLeosChassisResourcesFreeVsMembers = MibScalar((1, 3, 6, 1, 4, 1, 6141, 2, 60, 11, 1, 1, 9, 30), Gauge32().subtype(subtypeSpec=ValueRangeConstraint(0, 5334))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosChassisResourcesFreeVsMembers.setStatus('current')
wwpLeosChassisResourcesMaxSlevelWcards = MibScalar((1, 3, 6, 1, 4, 1, 6141, 2, 60, 11, 1, 1, 9, 31), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 3))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosChassisResourcesMaxSlevelWcards.setStatus('current')
wwpLeosChassisResourcesFreeSlevelWcards = MibScalar((1, 3, 6, 1, 4, 1, 6141, 2, 60, 11, 1, 1, 9, 32), Gauge32().subtype(subtypeSpec=ValueRangeConstraint(0, 3))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosChassisResourcesFreeSlevelWcards.setStatus('current')
wwpLeosChassisResourcesMaxSlevels = MibScalar((1, 3, 6, 1, 4, 1, 6141, 2, 60, 11, 1, 1, 9, 33), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 102))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosChassisResourcesMaxSlevels.setStatus('current')
wwpLeosChassisResourcesFreeSlevels = MibScalar((1, 3, 6, 1, 4, 1, 6141, 2, 60, 11, 1, 1, 9, 34), Gauge32().subtype(subtypeSpec=ValueRangeConstraint(0, 102))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosChassisResourcesFreeSlevels.setStatus('current')
wwpLeosChassisResourcesMaxSmappings = MibScalar((1, 3, 6, 1, 4, 1, 6141, 2, 60, 11, 1, 1, 9, 35), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 140))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosChassisResourcesMaxSmappings.setStatus('current')
wwpLeosChassisResourcesFreeSmappings = MibScalar((1, 3, 6, 1, 4, 1, 6141, 2, 60, 11, 1, 1, 9, 36), Gauge32().subtype(subtypeSpec=ValueRangeConstraint(0, 140))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosChassisResourcesFreeSmappings.setStatus('current')
wwpLeosChassisResourcesMaxSmappingCosResources = MibScalar((1, 3, 6, 1, 4, 1, 6141, 2, 60, 11, 1, 1, 9, 37), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 34))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosChassisResourcesMaxSmappingCosResources.setStatus('current')
wwpLeosChassisResourcesFreeSmappingCosResources = MibScalar((1, 3, 6, 1, 4, 1, 6141, 2, 60, 11, 1, 1, 9, 38), Gauge32().subtype(subtypeSpec=ValueRangeConstraint(0, 34))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosChassisResourcesFreeSmappingCosResources.setStatus('current')
wwpLeosChassisResourcesMaxSmappingPrtclResources = MibScalar((1, 3, 6, 1, 4, 1, 6141, 2, 60, 11, 1, 1, 9, 39), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 62))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosChassisResourcesMaxSmappingPrtclResources.setStatus('current')
wwpLeosChassisResourcesFreeSmappingPrtclResources = MibScalar((1, 3, 6, 1, 4, 1, 6141, 2, 60, 11, 1, 1, 9, 40), Gauge32().subtype(subtypeSpec=ValueRangeConstraint(0, 62))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosChassisResourcesFreeSmappingPrtclResources.setStatus('current')
wwpLeosChassisResourcesMaxQosResEgs = MibScalar((1, 3, 6, 1, 4, 1, 6141, 2, 60, 11, 1, 1, 9, 41), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 99))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosChassisResourcesMaxQosResEgs.setStatus('current')
wwpLeosChassisResourcesFreeQosResEgs = MibScalar((1, 3, 6, 1, 4, 1, 6141, 2, 60, 11, 1, 1, 9, 42), Gauge32().subtype(subtypeSpec=ValueRangeConstraint(0, 99))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosChassisResourcesFreeQosResEgs.setStatus('current')
wwpLeosChassisResourcesMaxTprofGblCscdEntries = MibScalar((1, 3, 6, 1, 4, 1, 6141, 2, 60, 11, 1, 1, 9, 43), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 3))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosChassisResourcesMaxTprofGblCscdEntries.setStatus('current')
wwpLeosChassisResourcesFreeTprofGblCscdEntries = MibScalar((1, 3, 6, 1, 4, 1, 6141, 2, 60, 11, 1, 1, 9, 44), Gauge32().subtype(subtypeSpec=ValueRangeConstraint(0, 3))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosChassisResourcesFreeTprofGblCscdEntries.setStatus('current')
wwpLeosChassisResourcesMaxTprofCscdEntries = MibScalar((1, 3, 6, 1, 4, 1, 6141, 2, 60, 11, 1, 1, 9, 45), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 126))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosChassisResourcesMaxTprofCscdEntries.setStatus('current')
wwpLeosChassisResourcesFreeTprofCscdEntries = MibScalar((1, 3, 6, 1, 4, 1, 6141, 2, 60, 11, 1, 1, 9, 46), Gauge32().subtype(subtypeSpec=ValueRangeConstraint(0, 126))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosChassisResourcesFreeTprofCscdEntries.setStatus('current')
wwpLeosChassisResourcesMaxTprofStdEntries = MibScalar((1, 3, 6, 1, 4, 1, 6141, 2, 60, 11, 1, 1, 9, 47), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 336))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosChassisResourcesMaxTprofStdEntries.setStatus('current')
wwpLeosChassisResourcesFreeTprofStdEntries = MibScalar((1, 3, 6, 1, 4, 1, 6141, 2, 60, 11, 1, 1, 9, 48), Gauge32().subtype(subtypeSpec=ValueRangeConstraint(0, 336))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosChassisResourcesFreeTprofStdEntries.setStatus('current')
wwpLeosChassisResourcesMaxSaccessEntries = MibScalar((1, 3, 6, 1, 4, 1, 6141, 2, 60, 11, 1, 1, 9, 49), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 2074))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosChassisResourcesMaxSaccessEntries.setStatus('current')
wwpLeosChassisResourcesFreeSaccessEntries = MibScalar((1, 3, 6, 1, 4, 1, 6141, 2, 60, 11, 1, 1, 9, 50), Gauge32().subtype(subtypeSpec=ValueRangeConstraint(0, 2074))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosChassisResourcesFreeSaccessEntries.setStatus('current')
wwpLeosChassisResourcesMaxSmacEntries = MibScalar((1, 3, 6, 1, 4, 1, 6141, 2, 60, 11, 1, 1, 9, 51), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 1024))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosChassisResourcesMaxSmacEntries.setStatus('current')
wwpLeosChassisResourcesFreeSmacEntries = MibScalar((1, 3, 6, 1, 4, 1, 6141, 2, 60, 11, 1, 1, 9, 52), Gauge32().subtype(subtypeSpec=ValueRangeConstraint(0, 1024))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosChassisResourcesFreeSmacEntries.setStatus('current')
wwpLeosChassisResourcesMaxDrvNoLrnSacResources = MibScalar((1, 3, 6, 1, 4, 1, 6141, 2, 60, 11, 1, 1, 9, 53), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 2048))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosChassisResourcesMaxDrvNoLrnSacResources.setStatus('current')
wwpLeosChassisResourcesFreeDrvNoLrnSacResources = MibScalar((1, 3, 6, 1, 4, 1, 6141, 2, 60, 11, 1, 1, 9, 54), Gauge32().subtype(subtypeSpec=ValueRangeConstraint(0, 2048))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosChassisResourcesFreeDrvNoLrnSacResources.setStatus('current')
wwpLeosChassisResourcesMaxLearnEntries = MibScalar((1, 3, 6, 1, 4, 1, 6141, 2, 60, 11, 1, 1, 9, 55), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 20000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosChassisResourcesMaxLearnEntries.setStatus('current')
wwpLeosChassisResourcesFreeLearnEntries = MibScalar((1, 3, 6, 1, 4, 1, 6141, 2, 60, 11, 1, 1, 9, 56), Gauge32().subtype(subtypeSpec=ValueRangeConstraint(0, 20000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosChassisResourcesFreeLearnEntries.setStatus('current')
wwpLeosChassisResourcesMaxCustomPrtcls = MibScalar((1, 3, 6, 1, 4, 1, 6141, 2, 60, 11, 1, 1, 9, 57), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosChassisResourcesMaxCustomPrtcls.setStatus('current')
wwpLeosChassisResourcesFreeCustomPrtcls = MibScalar((1, 3, 6, 1, 4, 1, 6141, 2, 60, 11, 1, 1, 9, 58), Gauge32().subtype(subtypeSpec=ValueRangeConstraint(0, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosChassisResourcesFreeCustomPrtcls.setStatus('current')
wwpLeosChassisResourcesMaxPrtcls = MibScalar((1, 3, 6, 1, 4, 1, 6141, 2, 60, 11, 1, 1, 9, 59), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosChassisResourcesMaxPrtcls.setStatus('current')
wwpLeosChassisResourcesFreePrtcls = MibScalar((1, 3, 6, 1, 4, 1, 6141, 2, 60, 11, 1, 1, 9, 60), Gauge32().subtype(subtypeSpec=ValueRangeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosChassisResourcesFreePrtcls.setStatus('current')
wwpLeosChassisResourcesMaxPrtclFilters = MibScalar((1, 3, 6, 1, 4, 1, 6141, 2, 60, 11, 1, 1, 9, 61), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosChassisResourcesMaxPrtclFilters.setStatus('current')
wwpLeosChassisResourcesFreePrtclFilters = MibScalar((1, 3, 6, 1, 4, 1, 6141, 2, 60, 11, 1, 1, 9, 62), Gauge32().subtype(subtypeSpec=ValueRangeConstraint(0, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosChassisResourcesFreePrtclFilters.setStatus('current')
wwpLeosChassisResourcesMaxPrtclFilterMembs = MibScalar((1, 3, 6, 1, 4, 1, 6141, 2, 60, 11, 1, 1, 9, 63), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 512))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosChassisResourcesMaxPrtclFilterMembs.setStatus('current')
wwpLeosChassisResourcesFreePrtclFilterMembs = MibScalar((1, 3, 6, 1, 4, 1, 6141, 2, 60, 11, 1, 1, 9, 64), Gauge32().subtype(subtypeSpec=ValueRangeConstraint(0, 512))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosChassisResourcesFreePrtclFilterMembs.setStatus('current')
wwpLeosChassisResourcesMaxBcastFilters = MibScalar((1, 3, 6, 1, 4, 1, 6141, 2, 60, 11, 1, 1, 9, 65), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosChassisResourcesMaxBcastFilters.setStatus('current')
wwpLeosChassisResourcesFreeBcastFilters = MibScalar((1, 3, 6, 1, 4, 1, 6141, 2, 60, 11, 1, 1, 9, 66), Gauge32().subtype(subtypeSpec=ValueRangeConstraint(0, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosChassisResourcesFreeBcastFilters.setStatus('current')
wwpLeosChassisResourcesMaxBcastFilterMembs = MibScalar((1, 3, 6, 1, 4, 1, 6141, 2, 60, 11, 1, 1, 9, 67), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4064))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosChassisResourcesMaxBcastFilterMembs.setStatus('current')
wwpLeosChassisResourcesFreeBcastFilterMembs = MibScalar((1, 3, 6, 1, 4, 1, 6141, 2, 60, 11, 1, 1, 9, 68), Gauge32().subtype(subtypeSpec=ValueRangeConstraint(0, 4064))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosChassisResourcesFreeBcastFilterMembs.setStatus('current')
mibBuilder.exportSymbols("WWP-LEOS-CHASSIS-MIB", wwpLeosChassisResourcesFreeSmappingPrtclResources=wwpLeosChassisResourcesFreeSmappingPrtclResources, wwpLeosChassisResourcesMaxTprofStdEntries=wwpLeosChassisResourcesMaxTprofStdEntries, wwpLeosChassisPlatformCapsMaxPhysPorts=wwpLeosChassisPlatformCapsMaxPhysPorts, wwpLeosChassisPlatformCapsAcPower=wwpLeosChassisPlatformCapsAcPower, wwpLeosChassisResourcesFreeSaccessEntries=wwpLeosChassisResourcesFreeSaccessEntries, wwpLeosChassisResourcesMaxPrtclFilterMembs=wwpLeosChassisResourcesMaxPrtclFilterMembs, wwpLeosChassisPlatformCapsVlanTranslation=wwpLeosChassisPlatformCapsVlanTranslation, wwpLeosChassisPowerSupplyModule=wwpLeosChassisPowerSupplyModule, wwpLeosChassisResetWelcomeBanner=wwpLeosChassisResetWelcomeBanner, wwpLeosChassisTempSensorValue=wwpLeosChassisTempSensorValue, wwpLeosChassisFanModuleNotification=wwpLeosChassisFanModuleNotification, wwpLeosChassisOuterDoorStatusChangeNotification=wwpLeosChassisOuterDoorStatusChangeNotification, wwpLeosChassisResourcesMaxCustomPrtcls=wwpLeosChassisResourcesMaxCustomPrtcls, wwpLeosChassisPlatformCapsMaxAggrPorts=wwpLeosChassisPlatformCapsMaxAggrPorts, wwpLeosChassisBatteryPresentStateName=wwpLeosChassisBatteryPresentStateName, wwpLeosChassisBatteryPowerNotifEnabled=wwpLeosChassisBatteryPowerNotifEnabled, wwpLeosChassisResourcesFreeMcastGroups=wwpLeosChassisResourcesFreeMcastGroups, wwpLeosChassisDoorAlarmEntry=wwpLeosChassisDoorAlarmEntry, FileName=FileName, wwpLeosChassisTempNotification=wwpLeosChassisTempNotification, wwpLeosChassisResourcesFreePrtclFilters=wwpLeosChassisResourcesFreePrtclFilters, wwpLeosChassisResourcesFreeQosResEgs=wwpLeosChassisResourcesFreeQosResEgs, wwpLeosChassisFanModule=wwpLeosChassisFanModule, wwpLeosChassisTempSensorNum=wwpLeosChassisTempSensorNum, wwpLeosChassisResourcesMaxTprofCscdEntries=wwpLeosChassisResourcesMaxTprofCscdEntries, wwpLeosChassisPowerSupplyNum=wwpLeosChassisPowerSupplyNum, wwpLeosChassisBatteryStatusNotification=wwpLeosChassisBatteryStatusNotification, wwpLeosChassisModule=wwpLeosChassisModule, wwpLeosChassisMIBNotificationPrefix=wwpLeosChassisMIBNotificationPrefix, wwpLeosChassisTempSensorState=wwpLeosChassisTempSensorState, wwpLeosChassisResourcesMaxSmappingPrtclResources=wwpLeosChassisResourcesMaxSmappingPrtclResources, wwpLeosChassisResourceCounts=wwpLeosChassisResourceCounts, wwpLeosChassisResourcesFreeLearnEntries=wwpLeosChassisResourcesFreeLearnEntries, wwpLeosChassisParamVersion=wwpLeosChassisParamVersion, wwpLeosChassisResourcesFreeSlevelWcards=wwpLeosChassisResourcesFreeSlevelWcards, wwpLeosChassisResourcesMaxLearnEntries=wwpLeosChassisResourcesMaxLearnEntries, wwpLeosChassis=wwpLeosChassis, wwpLeosChassisResourcesMaxSaccessEntries=wwpLeosChassisResourcesMaxSaccessEntries, wwpLeosChassisPowerSwitchNotification=wwpLeosChassisPowerSwitchNotification, wwpLeosChassisResourcesFreeCustomPrtcls=wwpLeosChassisResourcesFreeCustomPrtcls, wwpLeosChassisResourcesMaxTunnels=wwpLeosChassisResourcesMaxTunnels, wwpLeosChassisPostErrorCode=wwpLeosChassisPostErrorCode, wwpLeosChassisResourcesMaxSmappingCosResources=wwpLeosChassisResourcesMaxSmappingCosResources, wwpLeosChassisPowerSupplyType=wwpLeosChassisPowerSupplyType, wwpLeosChassisPlatformCapsMaxIngressTunnels=wwpLeosChassisPlatformCapsMaxIngressTunnels, wwpLeosChassisResourcesFreeMcastSnets=wwpLeosChassisResourcesFreeMcastSnets, wwpLeosChassisPowerSourceNotification=wwpLeosChassisPowerSourceNotification, wwpLeosChassisPowerTable=wwpLeosChassisPowerTable, wwpLeosChassisExternalAlarm=wwpLeosChassisExternalAlarm, wwpLeosChassisResourcesMaxSlevels=wwpLeosChassisResourcesMaxSlevels, wwpLeosChassisPostErrorNotification=wwpLeosChassisPostErrorNotification, wwpLeosChassisResourcesMaxVlans=wwpLeosChassisResourcesMaxVlans, wwpLeosChassisPostResultTable=wwpLeosChassisPostResultTable, wwpLeosChassisLoginBanner=wwpLeosChassisLoginBanner, wwpLeosChassisScheduledRebootTable=wwpLeosChassisScheduledRebootTable, wwpLeosChassisScheduledRebootTimestamp=wwpLeosChassisScheduledRebootTimestamp, wwpLeosChassisBatteryBadStateNotifEnabled=wwpLeosChassisBatteryBadStateNotifEnabled, wwpLeosChassisResourcesFreePrtcls=wwpLeosChassisResourcesFreePrtcls, wwpLeosChassisBatteryConditionNotification=wwpLeosChassisBatteryConditionNotification, wwpLeosChassisResourcesFreeEgressTunnels=wwpLeosChassisResourcesFreeEgressTunnels, wwpLeosChassisResourcesFreeVlanMembers=wwpLeosChassisResourcesFreeVlanMembers, wwpLeosChassisResourcesMaxMcastSnets=wwpLeosChassisResourcesMaxMcastSnets, wwpLeosChassisResourcesMaxVss=wwpLeosChassisResourcesMaxVss, wwpLeosChassisFanModuleStatus=wwpLeosChassisFanModuleStatus, wwpLeosChassisResourcesMaxAggrPorts=wwpLeosChassisResourcesMaxAggrPorts, wwpLeosChassisBatteryLowStateNotifEnabled=wwpLeosChassisBatteryLowStateNotifEnabled, wwpLeosChassisScheduledRebootActive=wwpLeosChassisScheduledRebootActive, wwpLeosChassisBatteryGoodStateName=wwpLeosChassisBatteryGoodStateName, wwpLeosChassisResourcesFreeVlans=wwpLeosChassisResourcesFreeVlans, wwpLeosChassisScheduledRebootDelay=wwpLeosChassisScheduledRebootDelay, wwpLeosChassisResourcesMaxPorts=wwpLeosChassisResourcesMaxPorts, wwpLeosChassisResourcesMaxBcastFilters=wwpLeosChassisResourcesMaxBcastFilters, wwpLeosChassisResourcesFreePortStateGrps=wwpLeosChassisResourcesFreePortStateGrps, wwpLeosChassisResourcesMaxPrtcls=wwpLeosChassisResourcesMaxPrtcls, wwpLeosChassisPlatformCapsMaxVcs=wwpLeosChassisPlatformCapsMaxVcs, wwpLeosChassisPlatformCapsMultiSubsPerPort=wwpLeosChassisPlatformCapsMultiSubsPerPort, wwpLeosChassisResourcesFreeIngressTunnels=wwpLeosChassisResourcesFreeIngressTunnels, wwpLeosChassisMIBGroups=wwpLeosChassisMIBGroups, wwpLeosChassisMIBObjects=wwpLeosChassisMIBObjects, wwpLeosChassisFanModuleNotifEnabled=wwpLeosChassisFanModuleNotifEnabled, wwpLeosChassisPlatformCapsMaxL4ProtEntries=wwpLeosChassisPlatformCapsMaxL4ProtEntries, wwpLeosChassisPlatformCapsMaxFsmtEntries=wwpLeosChassisPlatformCapsMaxFsmtEntries, wwpLeosChassisDoorAlarmAdminStatus=wwpLeosChassisDoorAlarmAdminStatus, wwpLeosChassisPostErrorValue=wwpLeosChassisPostErrorValue, wwpLeosChassisDoorAlarmFlapDetectTime=wwpLeosChassisDoorAlarmFlapDetectTime, wwpLeosChassisResourcesMaxVsMembers=wwpLeosChassisResourcesMaxVsMembers, wwpLeosChassisResourcesFreeTprofGblCscdEntries=wwpLeosChassisResourcesFreeTprofGblCscdEntries, wwpLeosChassisResourcesFreeTprofStdEntries=wwpLeosChassisResourcesFreeTprofStdEntries, wwpLeosChassisMIBNotifications=wwpLeosChassisMIBNotifications, wwpLeosChassisResourcesFreeEprSnets=wwpLeosChassisResourcesFreeEprSnets, PortList=PortList, wwpLeosChassisPostResultCode=wwpLeosChassisPostResultCode, PYSNMP_MODULE_ID=wwpLeosChassisMIB, wwpLeosChassisFanMinSpeed=wwpLeosChassisFanMinSpeed, wwpLeosChassisBatteryPowerBatteryStateName=wwpLeosChassisBatteryPowerBatteryStateName, wwpLeosChassisResourcesFreeBcastFilters=wwpLeosChassisResourcesFreeBcastFilters, wwpLeosChassisFanCurrentSpeed=wwpLeosChassisFanCurrentSpeed, wwpLeosChassisResourcesFreePrtclFilterMembs=wwpLeosChassisResourcesFreePrtclFilterMembs, wwpLeosChassisPowerEntry=wwpLeosChassisPowerEntry, wwpLeosChassisPlatformCapsProtocolFilters=wwpLeosChassisPlatformCapsProtocolFilters, wwpLeosChassisPlatformCapsMaxSactEntries=wwpLeosChassisPlatformCapsMaxSactEntries, wwpLeosChassisPlatformCaps=wwpLeosChassisPlatformCaps, wwpLeosChassisResetLoginBanner=wwpLeosChassisResetLoginBanner, wwpLeosChassisMfgDate=wwpLeosChassisMfgDate, wwpLeosChassisSystemTimeOffsetScope=wwpLeosChassisSystemTimeOffsetScope, wwpPowerSwitchingOp=wwpPowerSwitchingOp, wwpLeosChassisScheduledRebootEntry=wwpLeosChassisScheduledRebootEntry, wwpLeosChassisBatteryVoltageLevelNotification=wwpLeosChassisBatteryVoltageLevelNotification, wwpLeosChassisBatteryVoltageLevel=wwpLeosChassisBatteryVoltageLevel, wwpLeosSystemPartNumber=wwpLeosSystemPartNumber, wwpLeosChassisSerialConsoleDataBits=wwpLeosChassisSerialConsoleDataBits, wwpLeosChassisRedPowerSupplyNotifEnabled=wwpLeosChassisRedPowerSupplyNotifEnabled, wwpLeosChassisResourcesFreeAggrs=wwpLeosChassisResourcesFreeAggrs, wwpLeosChassisPlatformCapsMaxFsmtCosEntries=wwpLeosChassisPlatformCapsMaxFsmtCosEntries, wwpLeosChassisExternalAlarmStatus=wwpLeosChassisExternalAlarmStatus, wwpLeosChassisResourcesFreeBcastFilterMembs=wwpLeosChassisResourcesFreeBcastFilterMembs, wwpLeosChassisPlatformCapsRedunPower=wwpLeosChassisPlatformCapsRedunPower, wwpLeosChassisHardwareVersion=wwpLeosChassisHardwareVersion, wwpLeosChassisResourcesFreeVcs=wwpLeosChassisResourcesFreeVcs, wwpLeosChassisPostResultEntry=wwpLeosChassisPostResultEntry, wwpLeosChassisPlatformCapsMaxLearnedMacs=wwpLeosChassisPlatformCapsMaxLearnedMacs, wwpLeosChassisResourcesMaxTprofGblCscdEntries=wwpLeosChassisResourcesMaxTprofGblCscdEntries, wwpLeosChassisPowerSupplyState=wwpLeosChassisPowerSupplyState, wwpLeosChassisResourcesFreeDrvNoLrnSacResources=wwpLeosChassisResourcesFreeDrvNoLrnSacResources, wwpLeosChassisTempSensor=wwpLeosChassisTempSensor, wwpLeosChassisNotif=wwpLeosChassisNotif, wwpLeosChassisFanModuleType=wwpLeosChassisFanModuleType, wwpLeosChassisPowerSource=wwpLeosChassisPowerSource, wwpLeosChassisBatteryNormalStateName=wwpLeosChassisBatteryNormalStateName, wwpLeosChassisPlatformCapsAoamFpga=wwpLeosChassisPlatformCapsAoamFpga, wwpLeosChassisShellInactivityTimeout=wwpLeosChassisShellInactivityTimeout, wwpLeosChassisSerialConsoleParity=wwpLeosChassisSerialConsoleParity, wwpLeosChassisBatteryCondition=wwpLeosChassisBatteryCondition, wwpLeosChassisResourcesFreeDhcpRelayAgnts=wwpLeosChassisResourcesFreeDhcpRelayAgnts, wwpLeosChassisSnmpStateNotification=wwpLeosChassisSnmpStateNotification, wwpLeosChassisRebootNow=wwpLeosChassisRebootNow, wwpLeosChassisPlatformCapsMaxSmtEntries=wwpLeosChassisPlatformCapsMaxSmtEntries, wwpLeosChassisDyingGaspNotification=wwpLeosChassisDyingGaspNotification, wwpLeosChassisResourcesMaxSlevelWcards=wwpLeosChassisResourcesMaxSlevelWcards, wwpLeosChassisTempLowThreshold=wwpLeosChassisTempLowThreshold, wwpLeosChassisSerialNumber=wwpLeosChassisSerialNumber, wwpLeosChassisResourcesMaxSmacEntries=wwpLeosChassisResourcesMaxSmacEntries, wwpLeosChassisResourcesMaxVcs=wwpLeosChassisResourcesMaxVcs, wwpLeosChassisResourcesFreeTprofCscdEntries=wwpLeosChassisResourcesFreeTprofCscdEntries, wwpLeosChassisNotifAttrs=wwpLeosChassisNotifAttrs, wwpLeosChassisBatteryMissingStateName=wwpLeosChassisBatteryMissingStateName, wwpLeosChassisScheduledRebootNopost=wwpLeosChassisScheduledRebootNopost, wwpLeosChassisPlatformCapsVplsFpga=wwpLeosChassisPlatformCapsVplsFpga, wwpLeosChassisResourcesFreeVss=wwpLeosChassisResourcesFreeVss, wwpLeosChassisResourcesMaxIngressTunnels=wwpLeosChassisResourcesMaxIngressTunnels, wwpLeosChassisResourcesMaxBcastFilterMembs=wwpLeosChassisResourcesMaxBcastFilterMembs, wwpLeosChassisMacAddress=wwpLeosChassisMacAddress, wwpLeosChassisPlatformCapsMaxVsMembers=wwpLeosChassisPlatformCapsMaxVsMembers, wwpLeosChassisResourcesMaxMcastGroups=wwpLeosChassisResourcesMaxMcastGroups, wwpLeosChassisResourcesMaxPrtclFilters=wwpLeosChassisResourcesMaxPrtclFilters, wwpLeosChassisResourcesMaxDhcpRelayAgnts=wwpLeosChassisResourcesMaxDhcpRelayAgnts, wwpLeosChassisTempHighThreshold=wwpLeosChassisTempHighThreshold, wwpLeosChassisWelcomeBanner=wwpLeosChassisWelcomeBanner, wwpLeosChassisDoorAlarmTable=wwpLeosChassisDoorAlarmTable, wwpLeosChassisTempSensorHighThreshold=wwpLeosChassisTempSensorHighThreshold, wwpLeosChassisPlatformCapsMaxIgmpSnoopVlans=wwpLeosChassisPlatformCapsMaxIgmpSnoopVlans, wwpLeosChassisMIBCompliances=wwpLeosChassisMIBCompliances, wwpLeosChassisOuterDoorStatus=wwpLeosChassisOuterDoorStatus, wwpLeosChassisRebootReasonErrorType=wwpLeosChassisRebootReasonErrorType, wwpLeosChassisSnmpState=wwpLeosChassisSnmpState, wwpLeosChassisPowerSupplyStatusNotification=wwpLeosChassisPowerSupplyStatusNotification, wwpLeosChassisPostErrorCategory=wwpLeosChassisPostErrorCategory, wwpLeosChassisResourcesMaxVlanMembers=wwpLeosChassisResourcesMaxVlanMembers, wwpLeosChassisResourcesFreeVsMembers=wwpLeosChassisResourcesFreeVsMembers, wwpLeosChassisResourcesFreeSmappingCosResources=wwpLeosChassisResourcesFreeSmappingCosResources, wwpLeosChassisRebootNotification=wwpLeosChassisRebootNotification, wwpLeosChassisResourcesMaxEgressTunnels=wwpLeosChassisResourcesMaxEgressTunnels, wwpLeosChassisResourcesFreeTunnels=wwpLeosChassisResourcesFreeTunnels, wwpLeosChassisPostErrorMsg=wwpLeosChassisPostErrorMsg, wwpLeosChassisSystemTimeOffset=wwpLeosChassisSystemTimeOffset, wwpLeosChassisPlatformCapsDcPower=wwpLeosChassisPlatformCapsDcPower, wwpLeosChassisPostResultMessage=wwpLeosChassisPostResultMessage, wwpLeosSystemSerialNumber=wwpLeosSystemSerialNumber, wwpLeosChassisInnerDoorStatus=wwpLeosChassisInnerDoorStatus, wwpLeosChassisPlatformCapsMaxVss=wwpLeosChassisPlatformCapsMaxVss, wwpLeosChassisDoorAlarmIndex=wwpLeosChassisDoorAlarmIndex, wwpLeosChassisFanModuleEntry=wwpLeosChassisFanModuleEntry, wwpLeosChassisDoorAlarmFlapHoldTime=wwpLeosChassisDoorAlarmFlapHoldTime, wwpLeosChassisScheduledRebootIndex=wwpLeosChassisScheduledRebootIndex, wwpLeosChassisResourcesFreeSmappings=wwpLeosChassisResourcesFreeSmappings, wwpLeosChassisPlatformCapsMaxMulticastgroups=wwpLeosChassisPlatformCapsMaxMulticastgroups, wwpLeosChassisMIBConformance=wwpLeosChassisMIBConformance, wwpLeosChassisPlatformCapsMaxSltWildcards=wwpLeosChassisPlatformCapsMaxSltWildcards, wwpLeosChassisMIB=wwpLeosChassisMIB, wwpLeosChassisResourcesFreePorts=wwpLeosChassisResourcesFreePorts, wwpLeosChassisDoorAlarmFlapDetect=wwpLeosChassisDoorAlarmFlapDetect, wwpLeosChassisResourcesMaxEprSnets=wwpLeosChassisResourcesMaxEprSnets, wwpLeosChassisResourcesFreeSlevels=wwpLeosChassisResourcesFreeSlevels, wwpLeosChassisResourcesFreeSmacEntries=wwpLeosChassisResourcesFreeSmacEntries, wwpLeosChassisPlatformCapsMaxEprSnids=wwpLeosChassisPlatformCapsMaxEprSnids, wwpLeosChassisDoorAlarmFlapCount=wwpLeosChassisDoorAlarmFlapCount, wwpLeosChassisPlatformCapsMaxRstpDomains=wwpLeosChassisPlatformCapsMaxRstpDomains, wwpLeosChassisBatteryLowStateName=wwpLeosChassisBatteryLowStateName, wwpLeosChassisResourcesMaxDrvNoLrnSacResources=wwpLeosChassisResourcesMaxDrvNoLrnSacResources, wwpLeosChassisFanModuleNum=wwpLeosChassisFanModuleNum, wwpLeosChassisShellInactivityTimerState=wwpLeosChassisShellInactivityTimerState, wwpLeosChassisExternalAlarmStatusChangeNotification=wwpLeosChassisExternalAlarmStatusChangeNotification, wwpLeosChassisPowerSupplyRedundantState=wwpLeosChassisPowerSupplyRedundantState, wwpLeosChassisBatteryStatus=wwpLeosChassisBatteryStatus, wwpLeosChassisPlatformCapsMaxVlans=wwpLeosChassisPlatformCapsMaxVlans, wwpLeosChassisResourcesMaxQosResEgs=wwpLeosChassisResourcesMaxQosResEgs, wwpLeosChassisBatteryPowerPrimaryStateName=wwpLeosChassisBatteryPowerPrimaryStateName, wwpLeosChassisShellLoginTimerState=wwpLeosChassisShellLoginTimerState, wwpLeosChassisFanModuleTable=wwpLeosChassisFanModuleTable, wwpLeosChassisDoorStatusChangeNotification=wwpLeosChassisDoorStatusChangeNotification, wwpLeosChassisPlatformCapsMaxTunnels=wwpLeosChassisPlatformCapsMaxTunnels, wwpLeosChassisPostResultIndex=wwpLeosChassisPostResultIndex, wwpLeosChassisTempNotifEnabled=wwpLeosChassisTempNotifEnabled, wwpLeosChassisDeviceId=wwpLeosChassisDeviceId, wwpLeosChassisInnerDoorStatusChangeNotification=wwpLeosChassisInnerDoorStatusChangeNotification, wwpLeosChassisDoorAlarmStatusChangeNotification=wwpLeosChassisDoorAlarmStatusChangeNotification, wwpLeosChassisFanAvgSpeed=wwpLeosChassisFanAvgSpeed, wwpLeosChassisBatteryModule=wwpLeosChassisBatteryModule, wwpLeosChassisResourcesMaxSmappings=wwpLeosChassisResourcesMaxSmappings, wwpLeosChassisShellLoginTimeout=wwpLeosChassisShellLoginTimeout, wwpLeosChassisTempSensorLowThreshold=wwpLeosChassisTempSensorLowThreshold, wwpLeosChassisBatteryMissingStateNotifEnabled=wwpLeosChassisBatteryMissingStateNotifEnabled, wwpLeosChassisPlatformCapsMaxEgressTunnels=wwpLeosChassisPlatformCapsMaxEgressTunnels, wwpLeosChassisRebootState=wwpLeosChassisRebootState, wwpLeosChassisBatteryBadStateName=wwpLeosChassisBatteryBadStateName, wwpLeosChassisTempSensorTable=wwpLeosChassisTempSensorTable, wwpLeosChassisTempSensorEntry=wwpLeosChassisTempSensorEntry, wwpLeosChassisPlatformCapsMaxSltEntries=wwpLeosChassisPlatformCapsMaxSltEntries, wwpLeosChassisPlatformCapsPbtFpga=wwpLeosChassisPlatformCapsPbtFpga, wwpLeosChassisResourcesMaxPortStateGrps=wwpLeosChassisResourcesMaxPortStateGrps, wwpLeosChassisPostState=wwpLeosChassisPostState, wwpLeosChassisSerialConsoleState=wwpLeosChassisSerialConsoleState, wwpLeosChassisDoorAlarmStatus=wwpLeosChassisDoorAlarmStatus, wwpLeosChassisSerialConsoleStopBits=wwpLeosChassisSerialConsoleStopBits)
