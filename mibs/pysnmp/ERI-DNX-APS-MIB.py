#
# PySNMP MIB module ERI-DNX-APS-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/ERI-DNX-APS-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 18:51:37 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, ObjectIdentifier, Integer = mibBuilder.importSymbols("ASN1", "OctetString", "ObjectIdentifier", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsIntersection, SingleValueConstraint, ConstraintsUnion, ValueSizeConstraint, ValueRangeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsIntersection", "SingleValueConstraint", "ConstraintsUnion", "ValueSizeConstraint", "ValueRangeConstraint")
utilities, DataSwitch, dnxTrapEnterprise, FunctionSwitch, NestSlotAddress, OneByteField, trapSequence = mibBuilder.importSymbols("ERI-DNX-SMC-MIB", "utilities", "DataSwitch", "dnxTrapEnterprise", "FunctionSwitch", "NestSlotAddress", "OneByteField", "trapSequence")
eriMibs, = mibBuilder.importSymbols("ERI-ROOT-SMI", "eriMibs")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
Integer32, ObjectIdentity, NotificationType, ModuleIdentity, Counter32, IpAddress, TimeTicks, iso, Counter64, Gauge32, MibScalar, MibTable, MibTableRow, MibTableColumn, MibIdentifier, Bits, Unsigned32 = mibBuilder.importSymbols("SNMPv2-SMI", "Integer32", "ObjectIdentity", "NotificationType", "ModuleIdentity", "Counter32", "IpAddress", "TimeTicks", "iso", "Counter64", "Gauge32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "MibIdentifier", "Bits", "Unsigned32")
DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention")
eriDNXApsMIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 644, 3, 13))
eriDNXApsMIB.setRevisions(('2002-05-14 00:00', '2002-04-29 00:00', '2002-04-12 00:00',))
if mibBuilder.loadTexts: eriDNXApsMIB.setLastUpdated('200205140000Z')
if mibBuilder.loadTexts: eriDNXApsMIB.setOrganization('Eastern Research, Inc.')
dnxAPS = MibIdentifier((1, 3, 6, 1, 4, 1, 644, 2, 4, 1, 12, 2))
class ApsSwitchRequestCode(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2, 8, 10, 11, 12, 13, 14, 15, 31))
    namedValues = NamedValues(("noRequest", 0), ("doNotRevert", 1), ("reverseRequest", 2), ("manualSwitch", 8), ("signalDegradeLow", 10), ("signalDegradeHigh", 11), ("signalFailureLow", 12), ("signalFailureHigh", 13), ("forceSwitch", 14), ("lockout", 15), ("clearRequest", 31))

apsConfigTable = MibTable((1, 3, 6, 1, 4, 1, 644, 2, 4, 1, 12, 2, 1), )
if mibBuilder.loadTexts: apsConfigTable.setStatus('current')
apsConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 644, 2, 4, 1, 12, 2, 1, 1), ).setIndexNames((0, "ERI-DNX-APS-MIB", "apsCfgAddr"))
if mibBuilder.loadTexts: apsConfigEntry.setStatus('current')
apsCfgAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 644, 2, 4, 1, 12, 2, 1, 1, 1), NestSlotAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apsCfgAddr.setStatus('current')
apsCfgResource = MibTableColumn((1, 3, 6, 1, 4, 1, 644, 2, 4, 1, 12, 2, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apsCfgResource.setStatus('current')
apsCfgCardType = MibTableColumn((1, 3, 6, 1, 4, 1, 644, 2, 4, 1, 12, 2, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("stm1", 0), ("oc3", 1), ("stm1X", 2), ("oc3X", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: apsCfgCardType.setStatus('current')
apsCfgSfThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 644, 2, 4, 1, 12, 2, 1, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(3, 5))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apsCfgSfThreshold.setStatus('current')
apsCfgSdThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 644, 2, 4, 1, 12, 2, 1, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(5, 9))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apsCfgSdThreshold.setStatus('current')
apsCfgRdiSfCriteria = MibTableColumn((1, 3, 6, 1, 4, 1, 644, 2, 4, 1, 12, 2, 1, 1, 6), FunctionSwitch()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apsCfgRdiSfCriteria.setStatus('current')
apsCfgCmdStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 644, 2, 4, 1, 12, 2, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 101, 400, 401, 402, 403, 404, 450, 500, 501, 502))).clone(namedValues=NamedValues(("ready-for-command", 0), ("update-config", 1), ("update-successful", 101), ("err-general-aps-config-error", 400), ("err-invalid-asp-threshold", 401), ("err-invalid-rdi-criteria", 402), ("err-invalid-aps-dev-command", 403), ("err-aps-not-applicable", 404), ("err-data-locked-by-another-user", 450), ("err-snmp-parse-failed", 500), ("err-invalid-snmp-type", 501), ("err-invalid-snmp-var-size", 502)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apsCfgCmdStatus.setStatus('current')
apsStatusTable = MibTable((1, 3, 6, 1, 4, 1, 644, 2, 4, 1, 12, 2, 2), )
if mibBuilder.loadTexts: apsStatusTable.setStatus('current')
apsStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 644, 2, 4, 1, 12, 2, 2, 1), ).setIndexNames((0, "ERI-DNX-APS-MIB", "apsStatusAddr"))
if mibBuilder.loadTexts: apsStatusEntry.setStatus('current')
apsStatusAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 644, 2, 4, 1, 12, 2, 2, 1, 1), NestSlotAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apsStatusAddr.setStatus('current')
apsStatusResource = MibTableColumn((1, 3, 6, 1, 4, 1, 644, 2, 4, 1, 12, 2, 2, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apsStatusResource.setStatus('current')
apsStatusCardType = MibTableColumn((1, 3, 6, 1, 4, 1, 644, 2, 4, 1, 12, 2, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("stm1Working", 1), ("stm1Protection", 2), ("oc3Working", 3), ("oc3Protection", 4), ("stm1XWorking", 5), ("stm1XProtection", 6), ("oc3XWorking", 7), ("oc3XProtection", 8)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: apsStatusCardType.setStatus('current')
apsStatusCardState = MibTableColumn((1, 3, 6, 1, 4, 1, 644, 2, 4, 1, 12, 2, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("standby", 1), ("online", 2), ("offline", 3), ("defective", 4), ("busError", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: apsStatusCardState.setStatus('current')
apsRedundancyState = MibTableColumn((1, 3, 6, 1, 4, 1, 644, 2, 4, 1, 12, 2, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("detected", 0), ("notDetected", 1), ("failed", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: apsRedundancyState.setStatus('current')
apsSignalFailure = MibTableColumn((1, 3, 6, 1, 4, 1, 644, 2, 4, 1, 12, 2, 2, 1, 6), DataSwitch()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apsSignalFailure.setStatus('current')
apsSignalDegrade = MibTableColumn((1, 3, 6, 1, 4, 1, 644, 2, 4, 1, 12, 2, 2, 1, 7), DataSwitch()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apsSignalDegrade.setStatus('current')
apsLineRxK1Byte = MibTableColumn((1, 3, 6, 1, 4, 1, 644, 2, 4, 1, 12, 2, 2, 1, 8), OneByteField()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apsLineRxK1Byte.setStatus('current')
apsLineRxK2Byte = MibTableColumn((1, 3, 6, 1, 4, 1, 644, 2, 4, 1, 12, 2, 2, 1, 9), OneByteField()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apsLineRxK2Byte.setStatus('current')
apsSysRxReqCode = MibTableColumn((1, 3, 6, 1, 4, 1, 644, 2, 4, 1, 12, 2, 2, 1, 10), ApsSwitchRequestCode()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apsSysRxReqCode.setStatus('current')
apsSysTxReqCode = MibTableColumn((1, 3, 6, 1, 4, 1, 644, 2, 4, 1, 12, 2, 2, 1, 11), ApsSwitchRequestCode()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apsSysTxReqCode.setStatus('current')
apsUserPendingReq = MibTableColumn((1, 3, 6, 1, 4, 1, 644, 2, 4, 1, 12, 2, 2, 1, 12), ApsSwitchRequestCode()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apsUserPendingReq.setStatus('current')
apsSwitchCmdStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 644, 2, 4, 1, 12, 2, 2, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 8, 14, 31, 108, 114, 131, 400, 402, 406, 408, 500, 501, 502))).clone(namedValues=NamedValues(("readyForRequest", 0), ("manualSwitchReq", 8), ("forceSwitchReq", 14), ("clearRequest", 31), ("manual-successful", 108), ("force-successful", 114), ("clear-successful", 131), ("err-gen-aps-req-error", 400), ("err-invalid-aps-card-type", 402), ("err-field-cannot-be-set", 406), ("err-invalid-aps-command", 408), ("err-snmp-parse-failed", 500), ("err-invalid-snmp-type", 501), ("err-invalid-snmp-var-size", 502)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apsSwitchCmdStatus.setStatus('current')
apsConfigTrap = NotificationType((1, 3, 6, 1, 4, 1, 644, 2, 4, 0, 11)).setObjects(("ERI-DNX-SMC-MIB", "trapSequence"), ("ERI-DNX-APS-MIB", "apsCfgAddr"), ("ERI-DNX-APS-MIB", "apsCfgCmdStatus"))
if mibBuilder.loadTexts: apsConfigTrap.setStatus('current')
mibBuilder.exportSymbols("ERI-DNX-APS-MIB", apsRedundancyState=apsRedundancyState, apsLineRxK2Byte=apsLineRxK2Byte, apsCfgRdiSfCriteria=apsCfgRdiSfCriteria, eriDNXApsMIB=eriDNXApsMIB, apsCfgSdThreshold=apsCfgSdThreshold, PYSNMP_MODULE_ID=eriDNXApsMIB, apsLineRxK1Byte=apsLineRxK1Byte, apsSignalFailure=apsSignalFailure, apsCfgCardType=apsCfgCardType, apsSignalDegrade=apsSignalDegrade, apsStatusTable=apsStatusTable, apsStatusCardState=apsStatusCardState, apsCfgSfThreshold=apsCfgSfThreshold, apsStatusEntry=apsStatusEntry, apsSysTxReqCode=apsSysTxReqCode, apsStatusCardType=apsStatusCardType, dnxAPS=dnxAPS, apsConfigTable=apsConfigTable, apsStatusResource=apsStatusResource, apsConfigEntry=apsConfigEntry, apsSysRxReqCode=apsSysRxReqCode, apsCfgResource=apsCfgResource, ApsSwitchRequestCode=ApsSwitchRequestCode, apsUserPendingReq=apsUserPendingReq, apsCfgAddr=apsCfgAddr, apsCfgCmdStatus=apsCfgCmdStatus, apsConfigTrap=apsConfigTrap, apsSwitchCmdStatus=apsSwitchCmdStatus, apsStatusAddr=apsStatusAddr)
