#
# PySNMP MIB module EMPIRE (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/EMPIRE
# Produced by pysmi-0.3.4 at Mon Apr 29 18:48:19 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, OctetString, Integer = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "OctetString", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueRangeConstraint, SingleValueConstraint, ConstraintsIntersection, ValueSizeConstraint, ConstraintsUnion = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueRangeConstraint", "SingleValueConstraint", "ConstraintsIntersection", "ValueSizeConstraint", "ConstraintsUnion")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
enterprises, iso, MibScalar, MibTable, MibTableRow, MibTableColumn, Integer32, ObjectIdentity, NotificationType, MibIdentifier, NotificationType, Bits, Unsigned32, IpAddress, ModuleIdentity, Gauge32, TimeTicks, Counter32, Counter64 = mibBuilder.importSymbols("SNMPv2-SMI", "enterprises", "iso", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Integer32", "ObjectIdentity", "NotificationType", "MibIdentifier", "NotificationType", "Bits", "Unsigned32", "IpAddress", "ModuleIdentity", "Gauge32", "TimeTicks", "Counter32", "Counter64")
TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString")
empire = MibIdentifier((1, 3, 6, 1, 4, 1, 546))
unix = MibIdentifier((1, 3, 6, 1, 4, 1, 546, 1))
dos = MibIdentifier((1, 3, 6, 1, 4, 1, 546, 2))
os2 = MibIdentifier((1, 3, 6, 1, 4, 1, 546, 3))
windows = MibIdentifier((1, 3, 6, 1, 4, 1, 546, 4))
nt = MibIdentifier((1, 3, 6, 1, 4, 1, 546, 5))
monitor = MibIdentifier((1, 3, 6, 1, 4, 1, 546, 6))
empireexp = MibIdentifier((1, 3, 6, 1, 4, 1, 546, 7))
distribsys = MibIdentifier((1, 3, 6, 1, 4, 1, 546, 8))
traps = MibIdentifier((1, 3, 6, 1, 4, 1, 546, 9))
empireHistory = MibIdentifier((1, 3, 6, 1, 4, 1, 546, 10))
logMonitor = MibIdentifier((1, 3, 6, 1, 4, 1, 546, 11))
diskGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 546, 12))
cpuGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 546, 13))
extensionGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 546, 14))
processMonitor = MibIdentifier((1, 3, 6, 1, 4, 1, 546, 15))
applications = MibIdentifier((1, 3, 6, 1, 4, 1, 546, 16))
sysmgmt = MibIdentifier((1, 3, 6, 1, 4, 1, 546, 1, 1))
system = MibIdentifier((1, 3, 6, 1, 4, 1, 546, 1, 1, 1))
nodename = MibScalar((1, 3, 6, 1, 4, 1, 546, 1, 1, 1, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nodename.setStatus('mandatory')
cpu = MibScalar((1, 3, 6, 1, 4, 1, 546, 1, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpu.setStatus('mandatory')
memory = MibScalar((1, 3, 6, 1, 4, 1, 546, 1, 1, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: memory.setStatus('mandatory')
hostid = MibScalar((1, 3, 6, 1, 4, 1, 546, 1, 1, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hostid.setStatus('mandatory')
osver = MibScalar((1, 3, 6, 1, 4, 1, 546, 1, 1, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: osver.setStatus('mandatory')
osrel = MibScalar((1, 3, 6, 1, 4, 1, 546, 1, 1, 1, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: osrel.setStatus('mandatory')
devTable = MibTable((1, 3, 6, 1, 4, 1, 546, 1, 1, 1, 7), )
if mibBuilder.loadTexts: devTable.setStatus('mandatory')
devTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 546, 1, 1, 1, 7, 1), ).setIndexNames((0, "EMPIRE", "devIndex"))
if mibBuilder.loadTexts: devTableEntry.setStatus('mandatory')
devIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 546, 1, 1, 1, 7, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: devIndex.setStatus('mandatory')
devDevice = MibTableColumn((1, 3, 6, 1, 4, 1, 546, 1, 1, 1, 7, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: devDevice.setStatus('mandatory')
devMntPt = MibTableColumn((1, 3, 6, 1, 4, 1, 546, 1, 1, 1, 7, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: devMntPt.setStatus('mandatory')
devBsize = MibTableColumn((1, 3, 6, 1, 4, 1, 546, 1, 1, 1, 7, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: devBsize.setStatus('mandatory')
devTblks = MibTableColumn((1, 3, 6, 1, 4, 1, 546, 1, 1, 1, 7, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: devTblks.setStatus('mandatory')
devFblks = MibTableColumn((1, 3, 6, 1, 4, 1, 546, 1, 1, 1, 7, 1, 6), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: devFblks.setStatus('mandatory')
devTfiles = MibTableColumn((1, 3, 6, 1, 4, 1, 546, 1, 1, 1, 7, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: devTfiles.setStatus('mandatory')
devFfiles = MibTableColumn((1, 3, 6, 1, 4, 1, 546, 1, 1, 1, 7, 1, 8), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: devFfiles.setStatus('mandatory')
devMaxNameLen = MibTableColumn((1, 3, 6, 1, 4, 1, 546, 1, 1, 1, 7, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: devMaxNameLen.setStatus('mandatory')
devType = MibTableColumn((1, 3, 6, 1, 4, 1, 546, 1, 1, 1, 7, 1, 10), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: devType.setStatus('mandatory')
devFsid = MibTableColumn((1, 3, 6, 1, 4, 1, 546, 1, 1, 1, 7, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: devFsid.setStatus('mandatory')
devFstr = MibTableColumn((1, 3, 6, 1, 4, 1, 546, 1, 1, 1, 7, 1, 12), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: devFstr.setStatus('mandatory')
devUnmount = MibTableColumn((1, 3, 6, 1, 4, 1, 546, 1, 1, 1, 7, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("delete", 1), ("valid", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: devUnmount.setStatus('mandatory')
devCapacity = MibTableColumn((1, 3, 6, 1, 4, 1, 546, 1, 1, 1, 7, 1, 14), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: devCapacity.setStatus('mandatory')
devInodeCapacity = MibTableColumn((1, 3, 6, 1, 4, 1, 546, 1, 1, 1, 7, 1, 15), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: devInodeCapacity.setStatus('mandatory')
agentVersion = MibScalar((1, 3, 6, 1, 4, 1, 546, 1, 1, 1, 8), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentVersion.setStatus('mandatory')
kernelConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 546, 1, 1, 1, 9))
maxProcs = MibScalar((1, 3, 6, 1, 4, 1, 546, 1, 1, 1, 9, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: maxProcs.setStatus('mandatory')
serialNumber = MibScalar((1, 3, 6, 1, 4, 1, 546, 1, 1, 1, 9, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: serialNumber.setStatus('mandatory')
romVersion = MibScalar((1, 3, 6, 1, 4, 1, 546, 1, 1, 1, 9, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: romVersion.setStatus('mandatory')
numCPU = MibScalar((1, 3, 6, 1, 4, 1, 546, 1, 1, 1, 9, 4), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: numCPU.setStatus('mandatory')
clockHZ = MibScalar((1, 3, 6, 1, 4, 1, 546, 1, 1, 1, 9, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: clockHZ.setStatus('mandatory')
kernelVers = MibScalar((1, 3, 6, 1, 4, 1, 546, 1, 1, 1, 9, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: kernelVers.setStatus('mandatory')
virtualMem = MibScalar((1, 3, 6, 1, 4, 1, 546, 1, 1, 1, 9, 7), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: virtualMem.setStatus('mandatory')
maxInode = MibScalar((1, 3, 6, 1, 4, 1, 546, 1, 1, 1, 9, 8), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: maxInode.setStatus('mandatory')
maxFiles = MibScalar((1, 3, 6, 1, 4, 1, 546, 1, 1, 1, 9, 9), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: maxFiles.setStatus('mandatory')
maxClist = MibScalar((1, 3, 6, 1, 4, 1, 546, 1, 1, 1, 9, 10), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: maxClist.setStatus('mandatory')
maxMemPerProc = MibScalar((1, 3, 6, 1, 4, 1, 546, 1, 1, 1, 9, 11), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: maxMemPerProc.setStatus('mandatory')
totalSwap = MibScalar((1, 3, 6, 1, 4, 1, 546, 1, 1, 1, 9, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: totalSwap.setStatus('mandatory')
openMaxPerProc = MibScalar((1, 3, 6, 1, 4, 1, 546, 1, 1, 1, 9, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: openMaxPerProc.setStatus('mandatory')
posixJobCtrl = MibScalar((1, 3, 6, 1, 4, 1, 546, 1, 1, 1, 9, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("true", 1), ("false", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: posixJobCtrl.setStatus('mandatory')
posixVersion = MibScalar((1, 3, 6, 1, 4, 1, 546, 1, 1, 1, 9, 15), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: posixVersion.setStatus('mandatory')
pageSize = MibScalar((1, 3, 6, 1, 4, 1, 546, 1, 1, 1, 9, 16), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pageSize.setStatus('mandatory')
wordSize = MibScalar((1, 3, 6, 1, 4, 1, 546, 1, 1, 1, 9, 17), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wordSize.setStatus('mandatory')
bootconf = MibIdentifier((1, 3, 6, 1, 4, 1, 546, 1, 1, 1, 10))
rootName = MibScalar((1, 3, 6, 1, 4, 1, 546, 1, 1, 1, 10, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rootName.setStatus('mandatory')
rootFSType = MibScalar((1, 3, 6, 1, 4, 1, 546, 1, 1, 1, 10, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rootFSType.setStatus('mandatory')
rootBlocks = MibScalar((1, 3, 6, 1, 4, 1, 546, 1, 1, 1, 10, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rootBlocks.setStatus('mandatory')
dumpName = MibScalar((1, 3, 6, 1, 4, 1, 546, 1, 1, 1, 10, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dumpName.setStatus('mandatory')
dumpFSType = MibScalar((1, 3, 6, 1, 4, 1, 546, 1, 1, 1, 10, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dumpFSType.setStatus('mandatory')
dumpBlocks = MibScalar((1, 3, 6, 1, 4, 1, 546, 1, 1, 1, 10, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dumpBlocks.setStatus('mandatory')
swapName = MibScalar((1, 3, 6, 1, 4, 1, 546, 1, 1, 1, 10, 7), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swapName.setStatus('mandatory')
swapFSType = MibScalar((1, 3, 6, 1, 4, 1, 546, 1, 1, 1, 10, 8), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swapFSType.setStatus('mandatory')
swapSize = MibScalar((1, 3, 6, 1, 4, 1, 546, 1, 1, 1, 10, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swapSize.setStatus('mandatory')
streams = MibIdentifier((1, 3, 6, 1, 4, 1, 546, 1, 1, 1, 11))
maxmsgSize = MibScalar((1, 3, 6, 1, 4, 1, 546, 1, 1, 1, 11, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: maxmsgSize.setStatus('mandatory')
maxNumPush = MibScalar((1, 3, 6, 1, 4, 1, 546, 1, 1, 1, 11, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: maxNumPush.setStatus('mandatory')
numMuxLinks = MibScalar((1, 3, 6, 1, 4, 1, 546, 1, 1, 1, 11, 3), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: numMuxLinks.setStatus('mandatory')
streamUse = MibScalar((1, 3, 6, 1, 4, 1, 546, 1, 1, 1, 11, 4), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: streamUse.setStatus('mandatory')
streamMaxs = MibScalar((1, 3, 6, 1, 4, 1, 546, 1, 1, 1, 11, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: streamMaxs.setStatus('mandatory')
streamFails = MibScalar((1, 3, 6, 1, 4, 1, 546, 1, 1, 1, 11, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: streamFails.setStatus('mandatory')
queueUse = MibScalar((1, 3, 6, 1, 4, 1, 546, 1, 1, 1, 11, 7), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: queueUse.setStatus('mandatory')
queueMaxs = MibScalar((1, 3, 6, 1, 4, 1, 546, 1, 1, 1, 11, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: queueMaxs.setStatus('mandatory')
queueFails = MibScalar((1, 3, 6, 1, 4, 1, 546, 1, 1, 1, 11, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: queueFails.setStatus('mandatory')
mblockUse = MibScalar((1, 3, 6, 1, 4, 1, 546, 1, 1, 1, 11, 10), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mblockUse.setStatus('mandatory')
mblockMaxs = MibScalar((1, 3, 6, 1, 4, 1, 546, 1, 1, 1, 11, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mblockMaxs.setStatus('mandatory')
mblockFails = MibScalar((1, 3, 6, 1, 4, 1, 546, 1, 1, 1, 11, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mblockFails.setStatus('mandatory')
dblockUse = MibScalar((1, 3, 6, 1, 4, 1, 546, 1, 1, 1, 11, 13), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dblockUse.setStatus('mandatory')
dblockMaxs = MibScalar((1, 3, 6, 1, 4, 1, 546, 1, 1, 1, 11, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dblockMaxs.setStatus('mandatory')
dblockFails = MibScalar((1, 3, 6, 1, 4, 1, 546, 1, 1, 1, 11, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dblockFails.setStatus('mandatory')
systemType = MibScalar((1, 3, 6, 1, 4, 1, 546, 1, 1, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28))).clone(namedValues=NamedValues(("unknown", 1), ("solarisSparc", 2), ("solarisIntel", 3), ("solarisPPC", 4), ("sunosSparc", 5), ("hpux9Parisc", 6), ("hpux10Parisc", 7), ("nt351Intel", 8), ("nt351Alpha", 9), ("nt40Intel", 10), ("nt40Alpha", 11), ("irix62Mips", 12), ("irix63Mips", 13), ("irix64Mips", 14), ("aix41RS6000", 15), ("aix42RS6000", 16), ("aix43RS6000", 17), ("irix65Mips", 18), ("digitalUNIX", 19), ("linuxIntel", 20), ("hpux11Parisc", 21), ("nt50Intel", 22), ("nt50Alpha", 23), ("nt51Intel", 24), ("aix5RS6000", 25), ("nt52Intel", 26), ("linuxIA64", 27), ("hpux11IA64", 28)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: systemType.setStatus('mandatory')
systemEdgeUptime = MibScalar((1, 3, 6, 1, 4, 1, 546, 1, 1, 1, 13), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: systemEdgeUptime.setStatus('mandatory')
sysedgeLicenseString = MibScalar((1, 3, 6, 1, 4, 1, 546, 1, 1, 1, 14), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysedgeLicenseString.setStatus('mandatory')
sysedgeLicenseKey = MibScalar((1, 3, 6, 1, 4, 1, 546, 1, 1, 1, 16), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysedgeLicenseKey.setStatus('mandatory')
sysedgeMode = MibScalar((1, 3, 6, 1, 4, 1, 546, 1, 1, 1, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("fullMode", 1), ("restrictedMode", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysedgeMode.setStatus('mandatory')
systemTimeZone = MibScalar((1, 3, 6, 1, 4, 1, 546, 1, 1, 1, 18), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: systemTimeZone.setStatus('mandatory')
sysedgeAddressList = MibScalar((1, 3, 6, 1, 4, 1, 546, 1, 1, 1, 19), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysedgeAddressList.setStatus('mandatory')
sysedgeFQDN = MibScalar((1, 3, 6, 1, 4, 1, 546, 1, 1, 1, 20), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysedgeFQDN.setStatus('mandatory')
sysedgeConfProfile = MibScalar((1, 3, 6, 1, 4, 1, 546, 1, 1, 1, 21), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 1024))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysedgeConfProfile.setStatus('mandatory')
sysedgeInstallDir = MibScalar((1, 3, 6, 1, 4, 1, 546, 1, 1, 1, 22), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysedgeInstallDir.setStatus('mandatory')
sysedgePluginList = MibScalar((1, 3, 6, 1, 4, 1, 546, 1, 1, 1, 23), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysedgePluginList.setStatus('mandatory')
userTable = MibTable((1, 3, 6, 1, 4, 1, 546, 1, 1, 2), )
if mibBuilder.loadTexts: userTable.setStatus('mandatory')
userEntry = MibTableRow((1, 3, 6, 1, 4, 1, 546, 1, 1, 2, 1), ).setIndexNames((0, "EMPIRE", "userIndex"))
if mibBuilder.loadTexts: userEntry.setStatus('mandatory')
userIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 546, 1, 1, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: userIndex.setStatus('mandatory')
userLoginID = MibTableColumn((1, 3, 6, 1, 4, 1, 546, 1, 1, 2, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: userLoginID.setStatus('mandatory')
userPasswd = MibTableColumn((1, 3, 6, 1, 4, 1, 546, 1, 1, 2, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: userPasswd.setStatus('mandatory')
userUID = MibTableColumn((1, 3, 6, 1, 4, 1, 546, 1, 1, 2, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: userUID.setStatus('mandatory')
userGID = MibTableColumn((1, 3, 6, 1, 4, 1, 546, 1, 1, 2, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: userGID.setStatus('mandatory')
userName = MibTableColumn((1, 3, 6, 1, 4, 1, 546, 1, 1, 2, 1, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: userName.setStatus('mandatory')
userHomeDir = MibTableColumn((1, 3, 6, 1, 4, 1, 546, 1, 1, 2, 1, 7), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: userHomeDir.setStatus('mandatory')
userShell = MibTableColumn((1, 3, 6, 1, 4, 1, 546, 1, 1, 2, 1, 8), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: userShell.setStatus('mandatory')
groupTable = MibTable((1, 3, 6, 1, 4, 1, 546, 1, 1, 3), )
if mibBuilder.loadTexts: groupTable.setStatus('mandatory')
groupEntry = MibTableRow((1, 3, 6, 1, 4, 1, 546, 1, 1, 3, 1), ).setIndexNames((0, "EMPIRE", "groupIndex"))
if mibBuilder.loadTexts: groupEntry.setStatus('mandatory')
groupIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 546, 1, 1, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: groupIndex.setStatus('mandatory')
groupName = MibTableColumn((1, 3, 6, 1, 4, 1, 546, 1, 1, 3, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: groupName.setStatus('mandatory')
groupPasswd = MibTableColumn((1, 3, 6, 1, 4, 1, 546, 1, 1, 3, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: groupPasswd.setStatus('mandatory')
groupGID = MibTableColumn((1, 3, 6, 1, 4, 1, 546, 1, 1, 3, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: groupGID.setStatus('mandatory')
processTable = MibTable((1, 3, 6, 1, 4, 1, 546, 1, 1, 4), )
if mibBuilder.loadTexts: processTable.setStatus('mandatory')
processEntry = MibTableRow((1, 3, 6, 1, 4, 1, 546, 1, 1, 4, 1), ).setIndexNames((0, "EMPIRE", "processID"))
if mibBuilder.loadTexts: processEntry.setStatus('mandatory')
processID = MibTableColumn((1, 3, 6, 1, 4, 1, 546, 1, 1, 4, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: processID.setStatus('mandatory')
processName = MibTableColumn((1, 3, 6, 1, 4, 1, 546, 1, 1, 4, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: processName.setStatus('mandatory')
processState = MibTableColumn((1, 3, 6, 1, 4, 1, 546, 1, 1, 4, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: processState.setStatus('deprecated')
processNice = MibTableColumn((1, 3, 6, 1, 4, 1, 546, 1, 1, 4, 1, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: processNice.setStatus('mandatory')
processFlags = MibTableColumn((1, 3, 6, 1, 4, 1, 546, 1, 1, 4, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: processFlags.setStatus('mandatory')
processUID = MibTableColumn((1, 3, 6, 1, 4, 1, 546, 1, 1, 4, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: processUID.setStatus('mandatory')
processGID = MibTableColumn((1, 3, 6, 1, 4, 1, 546, 1, 1, 4, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: processGID.setStatus('mandatory')
processKill = MibTableColumn((1, 3, 6, 1, 4, 1, 546, 1, 1, 4, 1, 8), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: processKill.setStatus('mandatory')
processMEM = MibTableColumn((1, 3, 6, 1, 4, 1, 546, 1, 1, 4, 1, 9), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: processMEM.setStatus('mandatory')
processSize = MibTableColumn((1, 3, 6, 1, 4, 1, 546, 1, 1, 4, 1, 10), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: processSize.setStatus('mandatory')
processRSS = MibTableColumn((1, 3, 6, 1, 4, 1, 546, 1, 1, 4, 1, 11), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: processRSS.setStatus('mandatory')
processTime = MibTableColumn((1, 3, 6, 1, 4, 1, 546, 1, 1, 4, 1, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: processTime.setStatus('mandatory')
processParentPID = MibTableColumn((1, 3, 6, 1, 4, 1, 546, 1, 1, 4, 1, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: processParentPID.setStatus('mandatory')
processNumThreads = MibTableColumn((1, 3, 6, 1, 4, 1, 546, 1, 1, 4, 1, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: processNumThreads.setStatus('mandatory')
processInBlks = MibTableColumn((1, 3, 6, 1, 4, 1, 546, 1, 1, 4, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: processInBlks.setStatus('mandatory')
processOutBlks = MibTableColumn((1, 3, 6, 1, 4, 1, 546, 1, 1, 4, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: processOutBlks.setStatus('mandatory')
processMsgsSent = MibTableColumn((1, 3, 6, 1, 4, 1, 546, 1, 1, 4, 1, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: processMsgsSent.setStatus('mandatory')
processMsgsRecv = MibTableColumn((1, 3, 6, 1, 4, 1, 546, 1, 1, 4, 1, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: processMsgsRecv.setStatus('mandatory')
processSysCalls = MibTableColumn((1, 3, 6, 1, 4, 1, 546, 1, 1, 4, 1, 19), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: processSysCalls.setStatus('mandatory')
processMinorPgFlts = MibTableColumn((1, 3, 6, 1, 4, 1, 546, 1, 1, 4, 1, 20), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: processMinorPgFlts.setStatus('mandatory')
processMajorPgFlts = MibTableColumn((1, 3, 6, 1, 4, 1, 546, 1, 1, 4, 1, 21), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: processMajorPgFlts.setStatus('mandatory')
processNumSwaps = MibTableColumn((1, 3, 6, 1, 4, 1, 546, 1, 1, 4, 1, 22), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: processNumSwaps.setStatus('mandatory')
processVolCtx = MibTableColumn((1, 3, 6, 1, 4, 1, 546, 1, 1, 4, 1, 23), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: processVolCtx.setStatus('mandatory')
processInvolCtx = MibTableColumn((1, 3, 6, 1, 4, 1, 546, 1, 1, 4, 1, 24), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: processInvolCtx.setStatus('mandatory')
processArgs = MibTableColumn((1, 3, 6, 1, 4, 1, 546, 1, 1, 4, 1, 25), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: processArgs.setStatus('mandatory')
processStartTime = MibTableColumn((1, 3, 6, 1, 4, 1, 546, 1, 1, 4, 1, 26), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: processStartTime.setStatus('mandatory')
processStateStr = MibTableColumn((1, 3, 6, 1, 4, 1, 546, 1, 1, 4, 1, 27), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: processStateStr.setStatus('mandatory')
processStateInt = MibTableColumn((1, 3, 6, 1, 4, 1, 546, 1, 1, 4, 1, 28), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10))).clone(namedValues=NamedValues(("procStateStarting", 1), ("procStateRunnable", 2), ("procStateActive", 3), ("procStateWait", 4), ("procStateSleeping", 5), ("procStateSwapped", 6), ("procStateSleep", 7), ("procStateStop", 8), ("procStateOther", 9), ("procStateZombie", 10)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: processStateInt.setStatus('mandatory')
whoTable = MibTable((1, 3, 6, 1, 4, 1, 546, 1, 1, 5), )
if mibBuilder.loadTexts: whoTable.setStatus('mandatory')
whoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 546, 1, 1, 5, 1), ).setIndexNames((0, "EMPIRE", "whoIndex"))
if mibBuilder.loadTexts: whoEntry.setStatus('mandatory')
whoIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 546, 1, 1, 5, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: whoIndex.setStatus('mandatory')
whoName = MibTableColumn((1, 3, 6, 1, 4, 1, 546, 1, 1, 5, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: whoName.setStatus('mandatory')
whoDevice = MibTableColumn((1, 3, 6, 1, 4, 1, 546, 1, 1, 5, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: whoDevice.setStatus('mandatory')
whoPID = MibTableColumn((1, 3, 6, 1, 4, 1, 546, 1, 1, 5, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: whoPID.setStatus('mandatory')
whoTime = MibTableColumn((1, 3, 6, 1, 4, 1, 546, 1, 1, 5, 1, 5), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: whoTime.setStatus('mandatory')
whoWhere = MibTableColumn((1, 3, 6, 1, 4, 1, 546, 1, 1, 5, 1, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: whoWhere.setStatus('mandatory')
remoteShell = MibIdentifier((1, 3, 6, 1, 4, 1, 546, 1, 1, 6))
shellOutput = MibScalar((1, 3, 6, 1, 4, 1, 546, 1, 1, 6, 1), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: shellOutput.setStatus('mandatory')
shellCmd = MibScalar((1, 3, 6, 1, 4, 1, 546, 1, 1, 6, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: shellCmd.setStatus('mandatory')
shellExitStat = MibScalar((1, 3, 6, 1, 4, 1, 546, 1, 1, 6, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: shellExitStat.setStatus('mandatory')
shellOutputContents = MibScalar((1, 3, 6, 1, 4, 1, 546, 1, 1, 6, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 512))).setMaxAccess("readonly")
if mibBuilder.loadTexts: shellOutputContents.setStatus('mandatory')
performance = MibIdentifier((1, 3, 6, 1, 4, 1, 546, 1, 1, 7))
kernelperf = MibIdentifier((1, 3, 6, 1, 4, 1, 546, 1, 1, 7, 8))
runQLen = MibScalar((1, 3, 6, 1, 4, 1, 546, 1, 1, 7, 8, 4), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: runQLen.setStatus('mandatory')
diskWaitNum = MibScalar((1, 3, 6, 1, 4, 1, 546, 1, 1, 7, 8, 5), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: diskWaitNum.setStatus('mandatory')
pageWaitNum = MibScalar((1, 3, 6, 1, 4, 1, 546, 1, 1, 7, 8, 6), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pageWaitNum.setStatus('mandatory')
swapActive = MibScalar((1, 3, 6, 1, 4, 1, 546, 1, 1, 7, 8, 7), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swapActive.setStatus('mandatory')
sleepActive = MibScalar((1, 3, 6, 1, 4, 1, 546, 1, 1, 7, 8, 8), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sleepActive.setStatus('mandatory')
memInUse = MibScalar((1, 3, 6, 1, 4, 1, 546, 1, 1, 7, 8, 9), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: memInUse.setStatus('mandatory')
activeMem = MibScalar((1, 3, 6, 1, 4, 1, 546, 1, 1, 7, 8, 10), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: activeMem.setStatus('mandatory')
numProcs = MibScalar((1, 3, 6, 1, 4, 1, 546, 1, 1, 7, 8, 11), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: numProcs.setStatus('mandatory')
numOpenFiles = MibScalar((1, 3, 6, 1, 4, 1, 546, 1, 1, 7, 8, 12), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: numOpenFiles.setStatus('mandatory')
swapInUse = MibScalar((1, 3, 6, 1, 4, 1, 546, 1, 1, 7, 8, 13), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swapInUse.setStatus('mandatory')
numSwitches = MibScalar((1, 3, 6, 1, 4, 1, 546, 1, 1, 7, 8, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: numSwitches.setStatus('mandatory')
numTraps = MibScalar((1, 3, 6, 1, 4, 1, 546, 1, 1, 7, 8, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: numTraps.setStatus('mandatory')
numSyscalls = MibScalar((1, 3, 6, 1, 4, 1, 546, 1, 1, 7, 8, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: numSyscalls.setStatus('mandatory')
numInterrupts = MibScalar((1, 3, 6, 1, 4, 1, 546, 1, 1, 7, 8, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: numInterrupts.setStatus('mandatory')
numPageSwapIns = MibScalar((1, 3, 6, 1, 4, 1, 546, 1, 1, 7, 8, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: numPageSwapIns.setStatus('mandatory')
numPageSwapOuts = MibScalar((1, 3, 6, 1, 4, 1, 546, 1, 1, 7, 8, 19), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: numPageSwapOuts.setStatus('mandatory')
numSwapIns = MibScalar((1, 3, 6, 1, 4, 1, 546, 1, 1, 7, 8, 20), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: numSwapIns.setStatus('mandatory')
numSwapOuts = MibScalar((1, 3, 6, 1, 4, 1, 546, 1, 1, 7, 8, 21), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: numSwapOuts.setStatus('mandatory')
numPageIns = MibScalar((1, 3, 6, 1, 4, 1, 546, 1, 1, 7, 8, 22), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: numPageIns.setStatus('mandatory')
numPageOuts = MibScalar((1, 3, 6, 1, 4, 1, 546, 1, 1, 7, 8, 23), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: numPageOuts.setStatus('mandatory')
numPageReclaims = MibScalar((1, 3, 6, 1, 4, 1, 546, 1, 1, 7, 8, 24), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: numPageReclaims.setStatus('mandatory')
numPageFaults = MibScalar((1, 3, 6, 1, 4, 1, 546, 1, 1, 7, 8, 25), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: numPageFaults.setStatus('mandatory')
loadAverage1Min = MibScalar((1, 3, 6, 1, 4, 1, 546, 1, 1, 7, 8, 26), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: loadAverage1Min.setStatus('mandatory')
loadAverage5Min = MibScalar((1, 3, 6, 1, 4, 1, 546, 1, 1, 7, 8, 27), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: loadAverage5Min.setStatus('mandatory')
loadAverage15Min = MibScalar((1, 3, 6, 1, 4, 1, 546, 1, 1, 7, 8, 28), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: loadAverage15Min.setStatus('mandatory')
totalSwapSpace = MibScalar((1, 3, 6, 1, 4, 1, 546, 1, 1, 7, 8, 29), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: totalSwapSpace.setStatus('mandatory')
swapCapacity = MibScalar((1, 3, 6, 1, 4, 1, 546, 1, 1, 7, 8, 30), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swapCapacity.setStatus('mandatory')
memCapacity = MibScalar((1, 3, 6, 1, 4, 1, 546, 1, 1, 7, 8, 31), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: memCapacity.setStatus('mandatory')
memInUseCapacity = MibScalar((1, 3, 6, 1, 4, 1, 546, 1, 1, 7, 8, 32), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: memInUseCapacity.setStatus('mandatory')
pageScans = MibScalar((1, 3, 6, 1, 4, 1, 546, 1, 1, 7, 8, 33), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pageScans.setStatus('mandatory')
numZombieProcs = MibScalar((1, 3, 6, 1, 4, 1, 546, 1, 1, 7, 8, 34), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: numZombieProcs.setStatus('mandatory')
errorTable = MibTable((1, 3, 6, 1, 4, 1, 546, 1, 1, 8), )
if mibBuilder.loadTexts: errorTable.setStatus('deprecated')
errorEntry = MibTableRow((1, 3, 6, 1, 4, 1, 546, 1, 1, 8, 1), ).setIndexNames((0, "EMPIRE", "seqNum"))
if mibBuilder.loadTexts: errorEntry.setStatus('deprecated')
seqNum = MibTableColumn((1, 3, 6, 1, 4, 1, 546, 1, 1, 8, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: seqNum.setStatus('deprecated')
mid = MibTableColumn((1, 3, 6, 1, 4, 1, 546, 1, 1, 8, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mid.setStatus('deprecated')
sid = MibTableColumn((1, 3, 6, 1, 4, 1, 546, 1, 1, 8, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sid.setStatus('deprecated')
time = MibTableColumn((1, 3, 6, 1, 4, 1, 546, 1, 1, 8, 1, 4), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: time.setStatus('deprecated')
tag = MibTableColumn((1, 3, 6, 1, 4, 1, 546, 1, 1, 8, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tag.setStatus('deprecated')
type = MibTableColumn((1, 3, 6, 1, 4, 1, 546, 1, 1, 8, 1, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: type.setStatus('deprecated')
cause = MibTableColumn((1, 3, 6, 1, 4, 1, 546, 1, 1, 8, 1, 7), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cause.setStatus('deprecated')
severity = MibTableColumn((1, 3, 6, 1, 4, 1, 546, 1, 1, 8, 1, 8), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: severity.setStatus('deprecated')
level = MibTableColumn((1, 3, 6, 1, 4, 1, 546, 1, 1, 8, 1, 9), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: level.setStatus('deprecated')
module = MibTableColumn((1, 3, 6, 1, 4, 1, 546, 1, 1, 8, 1, 10), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: module.setStatus('deprecated')
subSysmsg = MibTableColumn((1, 3, 6, 1, 4, 1, 546, 1, 1, 8, 1, 11), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: subSysmsg.setStatus('deprecated')
errDelete = MibTableColumn((1, 3, 6, 1, 4, 1, 546, 1, 1, 8, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("delete", 1), ("valid", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: errDelete.setStatus('deprecated')
ipc = MibIdentifier((1, 3, 6, 1, 4, 1, 546, 1, 1, 9))
msgqueTable = MibTable((1, 3, 6, 1, 4, 1, 546, 1, 1, 9, 1), )
if mibBuilder.loadTexts: msgqueTable.setStatus('mandatory')
msgqueEntry = MibTableRow((1, 3, 6, 1, 4, 1, 546, 1, 1, 9, 1, 1), ).setIndexNames((0, "EMPIRE", "queID"))
if mibBuilder.loadTexts: msgqueEntry.setStatus('mandatory')
queID = MibTableColumn((1, 3, 6, 1, 4, 1, 546, 1, 1, 9, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: queID.setStatus('mandatory')
queKey = MibTableColumn((1, 3, 6, 1, 4, 1, 546, 1, 1, 9, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: queKey.setStatus('mandatory')
queMode = MibTableColumn((1, 3, 6, 1, 4, 1, 546, 1, 1, 9, 1, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: queMode.setStatus('mandatory')
queOwner = MibTableColumn((1, 3, 6, 1, 4, 1, 546, 1, 1, 9, 1, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: queOwner.setStatus('mandatory')
queGroup = MibTableColumn((1, 3, 6, 1, 4, 1, 546, 1, 1, 9, 1, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: queGroup.setStatus('mandatory')
queNBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 546, 1, 1, 9, 1, 1, 6), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: queNBytes.setStatus('mandatory')
queNMesg = MibTableColumn((1, 3, 6, 1, 4, 1, 546, 1, 1, 9, 1, 1, 7), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: queNMesg.setStatus('mandatory')
queDel = MibTableColumn((1, 3, 6, 1, 4, 1, 546, 1, 1, 9, 1, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("delete", 1), ("valid", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: queDel.setStatus('mandatory')
shmemTable = MibTable((1, 3, 6, 1, 4, 1, 546, 1, 1, 9, 2), )
if mibBuilder.loadTexts: shmemTable.setStatus('mandatory')
shmemEntry = MibTableRow((1, 3, 6, 1, 4, 1, 546, 1, 1, 9, 2, 1), ).setIndexNames((0, "EMPIRE", "shmemID"))
if mibBuilder.loadTexts: shmemEntry.setStatus('mandatory')
shmemID = MibTableColumn((1, 3, 6, 1, 4, 1, 546, 1, 1, 9, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: shmemID.setStatus('mandatory')
shmemKey = MibTableColumn((1, 3, 6, 1, 4, 1, 546, 1, 1, 9, 2, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: shmemKey.setStatus('mandatory')
shmemMode = MibTableColumn((1, 3, 6, 1, 4, 1, 546, 1, 1, 9, 2, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: shmemMode.setStatus('mandatory')
shmemOwner = MibTableColumn((1, 3, 6, 1, 4, 1, 546, 1, 1, 9, 2, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: shmemOwner.setStatus('mandatory')
shmemGroup = MibTableColumn((1, 3, 6, 1, 4, 1, 546, 1, 1, 9, 2, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: shmemGroup.setStatus('mandatory')
shmemSegSz = MibTableColumn((1, 3, 6, 1, 4, 1, 546, 1, 1, 9, 2, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: shmemSegSz.setStatus('mandatory')
shmemNLcks = MibTableColumn((1, 3, 6, 1, 4, 1, 546, 1, 1, 9, 2, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: shmemNLcks.setStatus('mandatory')
shmemDel = MibTableColumn((1, 3, 6, 1, 4, 1, 546, 1, 1, 9, 2, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("delete", 1), ("valid", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: shmemDel.setStatus('mandatory')
semTable = MibTable((1, 3, 6, 1, 4, 1, 546, 1, 1, 9, 3), )
if mibBuilder.loadTexts: semTable.setStatus('mandatory')
semEntry = MibTableRow((1, 3, 6, 1, 4, 1, 546, 1, 1, 9, 3, 1), ).setIndexNames((0, "EMPIRE", "semID"))
if mibBuilder.loadTexts: semEntry.setStatus('mandatory')
semID = MibTableColumn((1, 3, 6, 1, 4, 1, 546, 1, 1, 9, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: semID.setStatus('mandatory')
semKey = MibTableColumn((1, 3, 6, 1, 4, 1, 546, 1, 1, 9, 3, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: semKey.setStatus('mandatory')
semMode = MibTableColumn((1, 3, 6, 1, 4, 1, 546, 1, 1, 9, 3, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: semMode.setStatus('mandatory')
semOwner = MibTableColumn((1, 3, 6, 1, 4, 1, 546, 1, 1, 9, 3, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: semOwner.setStatus('mandatory')
semGroup = MibTableColumn((1, 3, 6, 1, 4, 1, 546, 1, 1, 9, 3, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: semGroup.setStatus('mandatory')
semNsems = MibTableColumn((1, 3, 6, 1, 4, 1, 546, 1, 1, 9, 3, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: semNsems.setStatus('mandatory')
semDel = MibTableColumn((1, 3, 6, 1, 4, 1, 546, 1, 1, 9, 3, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("delete", 1), ("valid", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: semDel.setStatus('mandatory')
buffers = MibIdentifier((1, 3, 6, 1, 4, 1, 546, 1, 1, 10))
mbufs = MibIdentifier((1, 3, 6, 1, 4, 1, 546, 1, 1, 10, 1))
numMbufs = MibScalar((1, 3, 6, 1, 4, 1, 546, 1, 1, 10, 1, 1), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: numMbufs.setStatus('mandatory')
numClusters = MibScalar((1, 3, 6, 1, 4, 1, 546, 1, 1, 10, 1, 2), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: numClusters.setStatus('mandatory')
freeClusters = MibScalar((1, 3, 6, 1, 4, 1, 546, 1, 1, 10, 1, 3), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: freeClusters.setStatus('mandatory')
numDrops = MibScalar((1, 3, 6, 1, 4, 1, 546, 1, 1, 10, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: numDrops.setStatus('mandatory')
numWaits = MibScalar((1, 3, 6, 1, 4, 1, 546, 1, 1, 10, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: numWaits.setStatus('mandatory')
numDrains = MibScalar((1, 3, 6, 1, 4, 1, 546, 1, 1, 10, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: numDrains.setStatus('mandatory')
mbufAllocTable = MibTable((1, 3, 6, 1, 4, 1, 546, 1, 1, 10, 1, 7), )
if mibBuilder.loadTexts: mbufAllocTable.setStatus('mandatory')
mbufAllocEntry = MibTableRow((1, 3, 6, 1, 4, 1, 546, 1, 1, 10, 1, 7, 1), ).setIndexNames((0, "EMPIRE", "mbufType"))
if mibBuilder.loadTexts: mbufAllocEntry.setStatus('mandatory')
mbufType = MibTableColumn((1, 3, 6, 1, 4, 1, 546, 1, 1, 10, 1, 7, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mbufType.setStatus('mandatory')
mbufDesc = MibTableColumn((1, 3, 6, 1, 4, 1, 546, 1, 1, 10, 1, 7, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mbufDesc.setStatus('mandatory')
mbufAlloc = MibTableColumn((1, 3, 6, 1, 4, 1, 546, 1, 1, 10, 1, 7, 1, 3), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mbufAlloc.setStatus('mandatory')
strbufs = MibIdentifier((1, 3, 6, 1, 4, 1, 546, 1, 1, 10, 2))
strbufAllocTable = MibTable((1, 3, 6, 1, 4, 1, 546, 1, 1, 10, 2, 1), )
if mibBuilder.loadTexts: strbufAllocTable.setStatus('mandatory')
strbufAllocEntry = MibTableRow((1, 3, 6, 1, 4, 1, 546, 1, 1, 10, 2, 1, 1), ).setIndexNames((0, "EMPIRE", "strbufAllocIndex"))
if mibBuilder.loadTexts: strbufAllocEntry.setStatus('mandatory')
strbufAllocIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 546, 1, 1, 10, 2, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: strbufAllocIndex.setStatus('mandatory')
strbufAllocSize = MibTableColumn((1, 3, 6, 1, 4, 1, 546, 1, 1, 10, 2, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: strbufAllocSize.setStatus('mandatory')
strbufAllocCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 546, 1, 1, 10, 2, 1, 1, 3), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: strbufAllocCurrent.setStatus('mandatory')
strbufAllocMaxs = MibTableColumn((1, 3, 6, 1, 4, 1, 546, 1, 1, 10, 2, 1, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: strbufAllocMaxs.setStatus('mandatory')
strbufAllocTotals = MibTableColumn((1, 3, 6, 1, 4, 1, 546, 1, 1, 10, 2, 1, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: strbufAllocTotals.setStatus('mandatory')
strbufAllocFails = MibTableColumn((1, 3, 6, 1, 4, 1, 546, 1, 1, 10, 2, 1, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: strbufAllocFails.setStatus('mandatory')
ioBufferCache = MibIdentifier((1, 3, 6, 1, 4, 1, 546, 1, 1, 10, 3))
numBreadRequests = MibScalar((1, 3, 6, 1, 4, 1, 546, 1, 1, 10, 3, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: numBreadRequests.setStatus('mandatory')
numBreadHits = MibScalar((1, 3, 6, 1, 4, 1, 546, 1, 1, 10, 3, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: numBreadHits.setStatus('mandatory')
numBufSleeps = MibScalar((1, 3, 6, 1, 4, 1, 546, 1, 1, 10, 3, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: numBufSleeps.setStatus('mandatory')
numAgeAllocs = MibScalar((1, 3, 6, 1, 4, 1, 546, 1, 1, 10, 3, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: numAgeAllocs.setStatus('mandatory')
numLRUAllocs = MibScalar((1, 3, 6, 1, 4, 1, 546, 1, 1, 10, 3, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: numLRUAllocs.setStatus('mandatory')
minNumBufHdrs = MibScalar((1, 3, 6, 1, 4, 1, 546, 1, 1, 10, 3, 6), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: minNumBufHdrs.setStatus('mandatory')
numAllocBuf = MibScalar((1, 3, 6, 1, 4, 1, 546, 1, 1, 10, 3, 7), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: numAllocBuf.setStatus('mandatory')
ioBufferHitRate = MibScalar((1, 3, 6, 1, 4, 1, 546, 1, 1, 10, 3, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ioBufferHitRate.setStatus('mandatory')
dnlc = MibIdentifier((1, 3, 6, 1, 4, 1, 546, 1, 1, 11))
dnlcHits = MibScalar((1, 3, 6, 1, 4, 1, 546, 1, 1, 11, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dnlcHits.setStatus('mandatory')
dnlcMisses = MibScalar((1, 3, 6, 1, 4, 1, 546, 1, 1, 11, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dnlcMisses.setStatus('mandatory')
dnlcEnters = MibScalar((1, 3, 6, 1, 4, 1, 546, 1, 1, 11, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dnlcEnters.setStatus('mandatory')
dnlcDblEnters = MibScalar((1, 3, 6, 1, 4, 1, 546, 1, 1, 11, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dnlcDblEnters.setStatus('mandatory')
dnlcLongEnters = MibScalar((1, 3, 6, 1, 4, 1, 546, 1, 1, 11, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dnlcLongEnters.setStatus('mandatory')
dnlcLongLooks = MibScalar((1, 3, 6, 1, 4, 1, 546, 1, 1, 11, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dnlcLongLooks.setStatus('mandatory')
dnlcLruEmpty = MibScalar((1, 3, 6, 1, 4, 1, 546, 1, 1, 11, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dnlcLruEmpty.setStatus('mandatory')
dnlcPurges = MibScalar((1, 3, 6, 1, 4, 1, 546, 1, 1, 11, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dnlcPurges.setStatus('mandatory')
dnlcHitRate = MibScalar((1, 3, 6, 1, 4, 1, 546, 1, 1, 11, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dnlcHitRate.setStatus('mandatory')
dnlcCacheSize = MibScalar((1, 3, 6, 1, 4, 1, 546, 1, 1, 11, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dnlcCacheSize.setStatus('mandatory')
ntSystem = MibIdentifier((1, 3, 6, 1, 4, 1, 546, 5, 1))
ntSystemVersion = MibScalar((1, 3, 6, 1, 4, 1, 546, 5, 1, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ntSystemVersion.setStatus('mandatory')
ntBuildNumber = MibScalar((1, 3, 6, 1, 4, 1, 546, 5, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ntBuildNumber.setStatus('mandatory')
ntServicePackNumber = MibScalar((1, 3, 6, 1, 4, 1, 546, 5, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ntServicePackNumber.setStatus('mandatory')
ntWorkstationOrServer = MibScalar((1, 3, 6, 1, 4, 1, 546, 5, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("server", 1), ("workstation", 2), ("unknown", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ntWorkstationOrServer.setStatus('mandatory')
ntfsDisable8dot3NameCreation = MibScalar((1, 3, 6, 1, 4, 1, 546, 5, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("true", 1), ("false", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ntfsDisable8dot3NameCreation.setStatus('mandatory')
ntWin31FileSystem = MibScalar((1, 3, 6, 1, 4, 1, 546, 5, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("true", 1), ("false", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ntWin31FileSystem.setStatus('mandatory')
ntCriticalSectTimeout = MibScalar((1, 3, 6, 1, 4, 1, 546, 5, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ntCriticalSectTimeout.setStatus('mandatory')
ntGlobalFlag = MibScalar((1, 3, 6, 1, 4, 1, 546, 5, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ntGlobalFlag.setStatus('mandatory')
ntIoPageLockLimit = MibScalar((1, 3, 6, 1, 4, 1, 546, 5, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ntIoPageLockLimit.setStatus('mandatory')
ntLargeSystemCache = MibScalar((1, 3, 6, 1, 4, 1, 546, 5, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ntLargeSystemCache.setStatus('mandatory')
ntPagedPoolSize = MibScalar((1, 3, 6, 1, 4, 1, 546, 5, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ntPagedPoolSize.setStatus('mandatory')
ntNonPagedPoolSize = MibScalar((1, 3, 6, 1, 4, 1, 546, 5, 1, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ntNonPagedPoolSize.setStatus('mandatory')
ntPagingFiles = MibScalar((1, 3, 6, 1, 4, 1, 546, 5, 1, 13), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ntPagingFiles.setStatus('mandatory')
ntSystemPages = MibScalar((1, 3, 6, 1, 4, 1, 546, 5, 1, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ntSystemPages.setStatus('mandatory')
ntOptionalSubsystem = MibScalar((1, 3, 6, 1, 4, 1, 546, 5, 1, 15), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ntOptionalSubsystem.setStatus('mandatory')
ntCmdlineOptions = MibScalar((1, 3, 6, 1, 4, 1, 546, 5, 1, 16), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ntCmdlineOptions.setStatus('mandatory')
ntLPTTimeout = MibScalar((1, 3, 6, 1, 4, 1, 546, 5, 1, 17), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ntLPTTimeout.setStatus('mandatory')
ntDosMemSize = MibScalar((1, 3, 6, 1, 4, 1, 546, 5, 1, 18), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ntDosMemSize.setStatus('mandatory')
ntWowCmdline = MibScalar((1, 3, 6, 1, 4, 1, 546, 5, 1, 19), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ntWowCmdline.setStatus('mandatory')
ntWowSize = MibScalar((1, 3, 6, 1, 4, 1, 546, 5, 1, 20), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ntWowSize.setStatus('mandatory')
ntUserFullScreen = MibScalar((1, 3, 6, 1, 4, 1, 546, 5, 1, 21), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("windowed", 0), ("fullscreen", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ntUserFullScreen.setStatus('mandatory')
ntHistoryBufferSize = MibScalar((1, 3, 6, 1, 4, 1, 546, 5, 1, 22), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ntHistoryBufferSize.setStatus('mandatory')
ntNumberHistoryBuffers = MibScalar((1, 3, 6, 1, 4, 1, 546, 5, 1, 23), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ntNumberHistoryBuffers.setStatus('mandatory')
ntQuickEdit = MibScalar((1, 3, 6, 1, 4, 1, 546, 5, 1, 24), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ntQuickEdit.setStatus('mandatory')
ntScreenBufferSize = MibScalar((1, 3, 6, 1, 4, 1, 546, 5, 1, 25), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ntScreenBufferSize.setStatus('mandatory')
ntWindowSize = MibScalar((1, 3, 6, 1, 4, 1, 546, 5, 1, 26), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ntWindowSize.setStatus('mandatory')
ntWindowsAppInitDLLs = MibScalar((1, 3, 6, 1, 4, 1, 546, 5, 1, 27), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ntWindowsAppInitDLLs.setStatus('mandatory')
ntWindowsDeviceNotSelectedTimeout = MibScalar((1, 3, 6, 1, 4, 1, 546, 5, 1, 28), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ntWindowsDeviceNotSelectedTimeout.setStatus('mandatory')
ntWindowsSpooler = MibScalar((1, 3, 6, 1, 4, 1, 546, 5, 1, 29), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("true", 1), ("false", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ntWindowsSpooler.setStatus('mandatory')
ntWindowsSwapDisk = MibScalar((1, 3, 6, 1, 4, 1, 546, 5, 1, 30), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ntWindowsSwapDisk.setStatus('mandatory')
ntWindowsXmitRetryTimeout = MibScalar((1, 3, 6, 1, 4, 1, 546, 5, 1, 31), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ntWindowsXmitRetryTimeout.setStatus('mandatory')
ntSystemRoot = MibScalar((1, 3, 6, 1, 4, 1, 546, 5, 1, 32), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ntSystemRoot.setStatus('mandatory')
ntBuildType = MibScalar((1, 3, 6, 1, 4, 1, 546, 5, 1, 33), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("uniprocessor", 1), ("multiprocessor", 2), ("unknown", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ntBuildType.setStatus('mandatory')
ntSysStartOptions = MibScalar((1, 3, 6, 1, 4, 1, 546, 5, 1, 34), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ntSysStartOptions.setStatus('mandatory')
ntSysBiosDate = MibScalar((1, 3, 6, 1, 4, 1, 546, 5, 1, 35), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ntSysBiosDate.setStatus('mandatory')
ntSysBiosVersion = MibScalar((1, 3, 6, 1, 4, 1, 546, 5, 1, 36), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ntSysBiosVersion.setStatus('mandatory')
ntVideoResolution = MibScalar((1, 3, 6, 1, 4, 1, 546, 5, 1, 37), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ntVideoResolution.setStatus('mandatory')
ntCrashDumpEnabled = MibScalar((1, 3, 6, 1, 4, 1, 546, 5, 1, 38), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1), ("unknown", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ntCrashDumpEnabled.setStatus('mandatory')
ntLogEvent = MibScalar((1, 3, 6, 1, 4, 1, 546, 5, 1, 39), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1), ("unknown", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ntLogEvent.setStatus('mandatory')
ntOverwrite = MibScalar((1, 3, 6, 1, 4, 1, 546, 5, 1, 40), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1), ("unknown", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ntOverwrite.setStatus('mandatory')
ntSendAlert = MibScalar((1, 3, 6, 1, 4, 1, 546, 5, 1, 41), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1), ("unknown", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ntSendAlert.setStatus('mandatory')
ntIsClustered = MibScalar((1, 3, 6, 1, 4, 1, 546, 5, 1, 42), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("true", 1), ("false", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ntIsClustered.setStatus('mandatory')
ntClusterName = MibScalar((1, 3, 6, 1, 4, 1, 546, 5, 1, 43), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ntClusterName.setStatus('mandatory')
ntClusterMembers = MibScalar((1, 3, 6, 1, 4, 1, 546, 5, 1, 44), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ntClusterMembers.setStatus('mandatory')
ntClusterIsActive = MibScalar((1, 3, 6, 1, 4, 1, 546, 5, 1, 45), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("true", 1), ("false", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ntClusterIsActive.setStatus('mandatory')
ntClusterActiveNode = MibScalar((1, 3, 6, 1, 4, 1, 546, 5, 1, 46), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ntClusterActiveNode.setStatus('mandatory')
ntThreads = MibIdentifier((1, 3, 6, 1, 4, 1, 546, 5, 2))
ntThreadTable = MibTable((1, 3, 6, 1, 4, 1, 546, 5, 2, 1), )
if mibBuilder.loadTexts: ntThreadTable.setStatus('mandatory')
ntThreadEntry = MibTableRow((1, 3, 6, 1, 4, 1, 546, 5, 2, 1, 1), ).setIndexNames((0, "EMPIRE", "ntThreadPID"), (0, "EMPIRE", "ntThreadNumber"))
if mibBuilder.loadTexts: ntThreadEntry.setStatus('mandatory')
ntThreadPID = MibTableColumn((1, 3, 6, 1, 4, 1, 546, 5, 2, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ntThreadPID.setStatus('mandatory')
ntThreadNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 546, 5, 2, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ntThreadNumber.setStatus('mandatory')
ntThreadPrivTime = MibTableColumn((1, 3, 6, 1, 4, 1, 546, 5, 2, 1, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ntThreadPrivTime.setStatus('mandatory')
ntThreadProcTime = MibTableColumn((1, 3, 6, 1, 4, 1, 546, 5, 2, 1, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ntThreadProcTime.setStatus('mandatory')
ntThreadUserTime = MibTableColumn((1, 3, 6, 1, 4, 1, 546, 5, 2, 1, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ntThreadUserTime.setStatus('mandatory')
ntThreadContextSwitches = MibTableColumn((1, 3, 6, 1, 4, 1, 546, 5, 2, 1, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ntThreadContextSwitches.setStatus('mandatory')
ntThreadElapsedTime = MibTableColumn((1, 3, 6, 1, 4, 1, 546, 5, 2, 1, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ntThreadElapsedTime.setStatus('mandatory')
ntThreadPriorityBase = MibTableColumn((1, 3, 6, 1, 4, 1, 546, 5, 2, 1, 1, 8), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ntThreadPriorityBase.setStatus('mandatory')
ntThreadPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 546, 5, 2, 1, 1, 9), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ntThreadPriority.setStatus('mandatory')
ntThreadWaitReason = MibTableColumn((1, 3, 6, 1, 4, 1, 546, 5, 2, 1, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19))).clone(namedValues=NamedValues(("waitForExecutive", 0), ("waitForFreePage", 1), ("waitForPageIn", 2), ("waitForPoolAlloc", 3), ("executionDelay", 4), ("suspended", 5), ("waitForUserRequest", 6), ("waitForExecutive1", 7), ("waitForFreePage1", 8), ("waitForPageIn1", 9), ("waitForPoolAlloc1", 10), ("executionDelay1", 11), ("suspended1", 12), ("waitForUserRequest1", 13), ("waitForEventPairHigh", 14), ("waitForEventPairLow", 15), ("waitForLPCRecv", 16), ("waitForLPCReply", 17), ("waitForVmem", 18), ("waitForPageOut", 19)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ntThreadWaitReason.setStatus('mandatory')
ntThreadStartAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 546, 5, 2, 1, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ntThreadStartAddr.setStatus('mandatory')
ntThreadState = MibTableColumn((1, 3, 6, 1, 4, 1, 546, 5, 2, 1, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("initialized", 0), ("ready", 1), ("running", 2), ("standby", 3), ("terminated", 4), ("wait", 5), ("transition", 6), ("unknown", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ntThreadState.setStatus('mandatory')
ntThreadID = MibTableColumn((1, 3, 6, 1, 4, 1, 546, 5, 2, 1, 1, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ntThreadID.setStatus('mandatory')
ntRegistry = MibIdentifier((1, 3, 6, 1, 4, 1, 546, 5, 3))
ntRegistryCurrentSize = MibScalar((1, 3, 6, 1, 4, 1, 546, 5, 3, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ntRegistryCurrentSize.setStatus('mandatory')
ntRegistrySizeLimit = MibScalar((1, 3, 6, 1, 4, 1, 546, 5, 3, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ntRegistrySizeLimit.setStatus('mandatory')
ntServices = MibIdentifier((1, 3, 6, 1, 4, 1, 546, 5, 4))
ntServiceTable = MibTable((1, 3, 6, 1, 4, 1, 546, 5, 4, 1), )
if mibBuilder.loadTexts: ntServiceTable.setStatus('mandatory')
ntServiceEntry = MibTableRow((1, 3, 6, 1, 4, 1, 546, 5, 4, 1, 1), ).setIndexNames((0, "EMPIRE", "ntServiceIndex"))
if mibBuilder.loadTexts: ntServiceEntry.setStatus('mandatory')
ntServiceIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 546, 5, 4, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ntServiceIndex.setStatus('mandatory')
ntServiceName = MibTableColumn((1, 3, 6, 1, 4, 1, 546, 5, 4, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ntServiceName.setStatus('mandatory')
ntServicePathName = MibTableColumn((1, 3, 6, 1, 4, 1, 546, 5, 4, 1, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ntServicePathName.setStatus('mandatory')
ntServiceStartType = MibTableColumn((1, 3, 6, 1, 4, 1, 546, 5, 4, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("automatic", 1), ("manual", 2), ("disabled", 3), ("other", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ntServiceStartType.setStatus('mandatory')
ntServiceParameters = MibTableColumn((1, 3, 6, 1, 4, 1, 546, 5, 4, 1, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ntServiceParameters.setStatus('mandatory')
ntServiceState = MibTableColumn((1, 3, 6, 1, 4, 1, 546, 5, 4, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("running", 1), ("notRunning", 2), ("paused", 3), ("other", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ntServiceState.setStatus('mandatory')
ntServiceObjectName = MibTableColumn((1, 3, 6, 1, 4, 1, 546, 5, 4, 1, 1, 7), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ntServiceObjectName.setStatus('mandatory')
ntPerformance = MibIdentifier((1, 3, 6, 1, 4, 1, 546, 5, 5))
ntSystemPerf = MibIdentifier((1, 3, 6, 1, 4, 1, 546, 5, 5, 1))
ntTotalPrivTime = MibScalar((1, 3, 6, 1, 4, 1, 546, 5, 5, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ntTotalPrivTime.setStatus('mandatory')
ntTotalProcessorTime = MibScalar((1, 3, 6, 1, 4, 1, 546, 5, 5, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ntTotalProcessorTime.setStatus('mandatory')
ntTotalUserTime = MibScalar((1, 3, 6, 1, 4, 1, 546, 5, 5, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ntTotalUserTime.setStatus('mandatory')
ntAlignFixups = MibScalar((1, 3, 6, 1, 4, 1, 546, 5, 5, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ntAlignFixups.setStatus('mandatory')
ntContextSwitches = MibScalar((1, 3, 6, 1, 4, 1, 546, 5, 5, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ntContextSwitches.setStatus('mandatory')
ntExceptionDispatches = MibScalar((1, 3, 6, 1, 4, 1, 546, 5, 5, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ntExceptionDispatches.setStatus('mandatory')
ntFileCtrlKBytes = MibScalar((1, 3, 6, 1, 4, 1, 546, 5, 5, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ntFileCtrlKBytes.setStatus('mandatory')
ntFileCtrlOps = MibScalar((1, 3, 6, 1, 4, 1, 546, 5, 5, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ntFileCtrlOps.setStatus('mandatory')
ntFileDataOps = MibScalar((1, 3, 6, 1, 4, 1, 546, 5, 5, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ntFileDataOps.setStatus('mandatory')
ntReadKBytes = MibScalar((1, 3, 6, 1, 4, 1, 546, 5, 5, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ntReadKBytes.setStatus('mandatory')
ntReadOps = MibScalar((1, 3, 6, 1, 4, 1, 546, 5, 5, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ntReadOps.setStatus('mandatory')
ntWriteKBytes = MibScalar((1, 3, 6, 1, 4, 1, 546, 5, 5, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ntWriteKBytes.setStatus('mandatory')
ntWriteOps = MibScalar((1, 3, 6, 1, 4, 1, 546, 5, 5, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ntWriteOps.setStatus('mandatory')
ntFloatEmuls = MibScalar((1, 3, 6, 1, 4, 1, 546, 5, 5, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ntFloatEmuls.setStatus('mandatory')
ntRunQLen = MibScalar((1, 3, 6, 1, 4, 1, 546, 5, 5, 1, 15), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ntRunQLen.setStatus('mandatory')
ntSystemCalls = MibScalar((1, 3, 6, 1, 4, 1, 546, 5, 5, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ntSystemCalls.setStatus('mandatory')
ntInterrupts = MibScalar((1, 3, 6, 1, 4, 1, 546, 5, 5, 1, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ntInterrupts.setStatus('mandatory')
ntCachePerf = MibIdentifier((1, 3, 6, 1, 4, 1, 546, 5, 5, 2))
ntAsyncCopyReads = MibScalar((1, 3, 6, 1, 4, 1, 546, 5, 5, 2, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ntAsyncCopyReads.setStatus('mandatory')
ntAsyncDataMaps = MibScalar((1, 3, 6, 1, 4, 1, 546, 5, 5, 2, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ntAsyncDataMaps.setStatus('mandatory')
ntAsyncFastReads = MibScalar((1, 3, 6, 1, 4, 1, 546, 5, 5, 2, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ntAsyncFastReads.setStatus('mandatory')
ntAsyncMDLReads = MibScalar((1, 3, 6, 1, 4, 1, 546, 5, 5, 2, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ntAsyncMDLReads.setStatus('mandatory')
ntAsyncPinReads = MibScalar((1, 3, 6, 1, 4, 1, 546, 5, 5, 2, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ntAsyncPinReads.setStatus('mandatory')
ntCopyReadHits = MibScalar((1, 3, 6, 1, 4, 1, 546, 5, 5, 2, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ntCopyReadHits.setStatus('mandatory')
ntCopyReads = MibScalar((1, 3, 6, 1, 4, 1, 546, 5, 5, 2, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ntCopyReads.setStatus('mandatory')
ntDataFlushPages = MibScalar((1, 3, 6, 1, 4, 1, 546, 5, 5, 2, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ntDataFlushPages.setStatus('mandatory')
ntDataFlushes = MibScalar((1, 3, 6, 1, 4, 1, 546, 5, 5, 2, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ntDataFlushes.setStatus('mandatory')
ntDataMapHits = MibScalar((1, 3, 6, 1, 4, 1, 546, 5, 5, 2, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ntDataMapHits.setStatus('mandatory')
ntDataMapPins = MibScalar((1, 3, 6, 1, 4, 1, 546, 5, 5, 2, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ntDataMapPins.setStatus('mandatory')
ntDataMaps = MibScalar((1, 3, 6, 1, 4, 1, 546, 5, 5, 2, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ntDataMaps.setStatus('mandatory')
ntFastReadNotPossible = MibScalar((1, 3, 6, 1, 4, 1, 546, 5, 5, 2, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ntFastReadNotPossible.setStatus('mandatory')
ntFastReadResourceMisses = MibScalar((1, 3, 6, 1, 4, 1, 546, 5, 5, 2, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ntFastReadResourceMisses.setStatus('mandatory')
ntFastReads = MibScalar((1, 3, 6, 1, 4, 1, 546, 5, 5, 2, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ntFastReads.setStatus('mandatory')
ntLazyWriteFlushes = MibScalar((1, 3, 6, 1, 4, 1, 546, 5, 5, 2, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ntLazyWriteFlushes.setStatus('mandatory')
ntLazyWritePages = MibScalar((1, 3, 6, 1, 4, 1, 546, 5, 5, 2, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ntLazyWritePages.setStatus('mandatory')
ntMDLReadHits = MibScalar((1, 3, 6, 1, 4, 1, 546, 5, 5, 2, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ntMDLReadHits.setStatus('mandatory')
ntMDLReads = MibScalar((1, 3, 6, 1, 4, 1, 546, 5, 5, 2, 19), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ntMDLReads.setStatus('mandatory')
ntPinReadHits = MibScalar((1, 3, 6, 1, 4, 1, 546, 5, 5, 2, 20), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ntPinReadHits.setStatus('mandatory')
ntPinReads = MibScalar((1, 3, 6, 1, 4, 1, 546, 5, 5, 2, 21), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ntPinReads.setStatus('mandatory')
ntSyncCopyReads = MibScalar((1, 3, 6, 1, 4, 1, 546, 5, 5, 2, 22), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ntSyncCopyReads.setStatus('mandatory')
ntSyncDataMaps = MibScalar((1, 3, 6, 1, 4, 1, 546, 5, 5, 2, 23), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ntSyncDataMaps.setStatus('mandatory')
ntSyncFastReads = MibScalar((1, 3, 6, 1, 4, 1, 546, 5, 5, 2, 24), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ntSyncFastReads.setStatus('mandatory')
ntSyncMDLReads = MibScalar((1, 3, 6, 1, 4, 1, 546, 5, 5, 2, 25), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ntSyncMDLReads.setStatus('mandatory')
ntSyncPinReads = MibScalar((1, 3, 6, 1, 4, 1, 546, 5, 5, 2, 26), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ntSyncPinReads.setStatus('mandatory')
ntMemoryPerf = MibIdentifier((1, 3, 6, 1, 4, 1, 546, 5, 5, 3))
ntAvailKBytes = MibScalar((1, 3, 6, 1, 4, 1, 546, 5, 5, 3, 1), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ntAvailKBytes.setStatus('mandatory')
ntCacheKBytes = MibScalar((1, 3, 6, 1, 4, 1, 546, 5, 5, 3, 2), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ntCacheKBytes.setStatus('mandatory')
ntCacheKBytesPeak = MibScalar((1, 3, 6, 1, 4, 1, 546, 5, 5, 3, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ntCacheKBytesPeak.setStatus('mandatory')
ntCacheFaults = MibScalar((1, 3, 6, 1, 4, 1, 546, 5, 5, 3, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ntCacheFaults.setStatus('mandatory')
ntCommitLimit = MibScalar((1, 3, 6, 1, 4, 1, 546, 5, 5, 3, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ntCommitLimit.setStatus('mandatory')
ntCommittedKBytes = MibScalar((1, 3, 6, 1, 4, 1, 546, 5, 5, 3, 6), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ntCommittedKBytes.setStatus('mandatory')
ntDemandZeroFaults = MibScalar((1, 3, 6, 1, 4, 1, 546, 5, 5, 3, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ntDemandZeroFaults.setStatus('mandatory')
ntFreeSysPageTableEntries = MibScalar((1, 3, 6, 1, 4, 1, 546, 5, 5, 3, 8), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ntFreeSysPageTableEntries.setStatus('mandatory')
ntPageFaults = MibScalar((1, 3, 6, 1, 4, 1, 546, 5, 5, 3, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ntPageFaults.setStatus('mandatory')
ntPageReads = MibScalar((1, 3, 6, 1, 4, 1, 546, 5, 5, 3, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ntPageReads.setStatus('mandatory')
ntPageWrites = MibScalar((1, 3, 6, 1, 4, 1, 546, 5, 5, 3, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ntPageWrites.setStatus('mandatory')
ntPagesInput = MibScalar((1, 3, 6, 1, 4, 1, 546, 5, 5, 3, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ntPagesInput.setStatus('mandatory')
ntPagesOutput = MibScalar((1, 3, 6, 1, 4, 1, 546, 5, 5, 3, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ntPagesOutput.setStatus('mandatory')
ntPages = MibScalar((1, 3, 6, 1, 4, 1, 546, 5, 5, 3, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ntPages.setStatus('mandatory')
ntPoolNonPagedAllocs = MibScalar((1, 3, 6, 1, 4, 1, 546, 5, 5, 3, 15), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ntPoolNonPagedAllocs.setStatus('mandatory')
ntPoolNonPagedKBytes = MibScalar((1, 3, 6, 1, 4, 1, 546, 5, 5, 3, 16), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ntPoolNonPagedKBytes.setStatus('mandatory')
ntPoolPagedAllocs = MibScalar((1, 3, 6, 1, 4, 1, 546, 5, 5, 3, 17), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ntPoolPagedAllocs.setStatus('mandatory')
ntPoolPagedKBytes = MibScalar((1, 3, 6, 1, 4, 1, 546, 5, 5, 3, 18), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ntPoolPagedKBytes.setStatus('mandatory')
ntPagedResidentKBytes = MibScalar((1, 3, 6, 1, 4, 1, 546, 5, 5, 3, 19), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ntPagedResidentKBytes.setStatus('mandatory')
ntSysCacheResidentKBytes = MibScalar((1, 3, 6, 1, 4, 1, 546, 5, 5, 3, 20), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ntSysCacheResidentKBytes.setStatus('mandatory')
ntSysCodeResidentKBytes = MibScalar((1, 3, 6, 1, 4, 1, 546, 5, 5, 3, 21), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ntSysCodeResidentKBytes.setStatus('mandatory')
ntSysCodeTotalKBytes = MibScalar((1, 3, 6, 1, 4, 1, 546, 5, 5, 3, 22), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ntSysCodeTotalKBytes.setStatus('mandatory')
ntSysDriverResidentKBytes = MibScalar((1, 3, 6, 1, 4, 1, 546, 5, 5, 3, 23), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ntSysDriverResidentKBytes.setStatus('mandatory')
ntSysDriverTotalKBytes = MibScalar((1, 3, 6, 1, 4, 1, 546, 5, 5, 3, 24), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ntSysDriverTotalKBytes.setStatus('mandatory')
ntTransitionFaults = MibScalar((1, 3, 6, 1, 4, 1, 546, 5, 5, 3, 25), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ntTransitionFaults.setStatus('mandatory')
ntWriteCopies = MibScalar((1, 3, 6, 1, 4, 1, 546, 5, 5, 3, 26), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ntWriteCopies.setStatus('mandatory')
ntPageFilePerf = MibIdentifier((1, 3, 6, 1, 4, 1, 546, 5, 5, 4))
ntPageFileUsage = MibScalar((1, 3, 6, 1, 4, 1, 546, 5, 5, 4, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ntPageFileUsage.setStatus('mandatory')
ntPageFilePeakUsage = MibScalar((1, 3, 6, 1, 4, 1, 546, 5, 5, 4, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ntPageFilePeakUsage.setStatus('mandatory')
ntEvents = MibIdentifier((1, 3, 6, 1, 4, 1, 546, 5, 6))
ntEventApplicationCount = MibScalar((1, 3, 6, 1, 4, 1, 546, 5, 6, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ntEventApplicationCount.setStatus('mandatory')
ntEventSecurityCount = MibScalar((1, 3, 6, 1, 4, 1, 546, 5, 6, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ntEventSecurityCount.setStatus('mandatory')
ntEventSystemCount = MibScalar((1, 3, 6, 1, 4, 1, 546, 5, 6, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ntEventSystemCount.setStatus('mandatory')
ntEventMonTable = MibTable((1, 3, 6, 1, 4, 1, 546, 5, 6, 4), )
if mibBuilder.loadTexts: ntEventMonTable.setStatus('mandatory')
ntEventMonEntry = MibTableRow((1, 3, 6, 1, 4, 1, 546, 5, 6, 4, 1), ).setIndexNames((0, "EMPIRE", "ntEventMonIndex"))
if mibBuilder.loadTexts: ntEventMonEntry.setStatus('mandatory')
ntEventMonIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 546, 5, 6, 4, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ntEventMonIndex.setStatus('mandatory')
ntEventMonLog = MibTableColumn((1, 3, 6, 1, 4, 1, 546, 5, 6, 4, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("application", 1), ("security", 2), ("system", 3), ("dnsServer", 4), ("dirService", 5), ("fileRepService", 6)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ntEventMonLog.setStatus('mandatory')
ntEventMonTime = MibTableColumn((1, 3, 6, 1, 4, 1, 546, 5, 6, 4, 1, 3), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ntEventMonTime.setStatus('mandatory')
ntEventMonTraps = MibTableColumn((1, 3, 6, 1, 4, 1, 546, 5, 6, 4, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ntEventMonTraps.setStatus('mandatory')
ntEventMonTypeLastMatch = MibTableColumn((1, 3, 6, 1, 4, 1, 546, 5, 6, 4, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("error", 1), ("warning", 2), ("information", 3), ("success", 4), ("failure", 5), ("noMatch", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ntEventMonTypeLastMatch.setStatus('mandatory')
ntEventMonTypeFilter = MibTableColumn((1, 3, 6, 1, 4, 1, 546, 5, 6, 4, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("error", 1), ("warning", 2), ("information", 3), ("success", 4), ("failure", 5), ("all", 6)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ntEventMonTypeFilter.setStatus('mandatory')
ntEventMonSrcLastMatch = MibTableColumn((1, 3, 6, 1, 4, 1, 546, 5, 6, 4, 1, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ntEventMonSrcLastMatch.setStatus('mandatory')
ntEventMonSrcFilter = MibTableColumn((1, 3, 6, 1, 4, 1, 546, 5, 6, 4, 1, 8), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ntEventMonSrcFilter.setStatus('mandatory')
ntEventMonDescLastMatch = MibTableColumn((1, 3, 6, 1, 4, 1, 546, 5, 6, 4, 1, 9), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 512))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ntEventMonDescLastMatch.setStatus('mandatory')
ntEventMonDescFilter = MibTableColumn((1, 3, 6, 1, 4, 1, 546, 5, 6, 4, 1, 10), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ntEventMonDescFilter.setStatus('mandatory')
ntEventMonStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 546, 5, 6, 4, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("active", 1), ("notInService", 2), ("notReady", 3), ("createAndGo", 4), ("createAndWait", 5), ("destroy", 6))).clone('createAndWait')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ntEventMonStatus.setStatus('mandatory')
ntEventMonDescr = MibTableColumn((1, 3, 6, 1, 4, 1, 546, 5, 6, 4, 1, 12), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ntEventMonDescr.setStatus('mandatory')
ntEventMonAction = MibTableColumn((1, 3, 6, 1, 4, 1, 546, 5, 6, 4, 1, 13), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 256))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ntEventMonAction.setStatus('mandatory')
ntEventMonFlags = MibTableColumn((1, 3, 6, 1, 4, 1, 546, 5, 6, 4, 1, 14), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ntEventMonFlags.setStatus('mandatory')
ntEventMonMatches = MibTableColumn((1, 3, 6, 1, 4, 1, 546, 5, 6, 4, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ntEventMonMatches.setStatus('mandatory')
ntEventApplicationMaxSize = MibScalar((1, 3, 6, 1, 4, 1, 546, 5, 6, 5), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ntEventApplicationMaxSize.setStatus('mandatory')
ntEventApplicationRetention = MibScalar((1, 3, 6, 1, 4, 1, 546, 5, 6, 6), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ntEventApplicationRetention.setStatus('mandatory')
ntEventSecurityMaxSize = MibScalar((1, 3, 6, 1, 4, 1, 546, 5, 6, 7), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ntEventSecurityMaxSize.setStatus('mandatory')
ntEventSecurityRetention = MibScalar((1, 3, 6, 1, 4, 1, 546, 5, 6, 8), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ntEventSecurityRetention.setStatus('mandatory')
ntEventSystemMaxSize = MibScalar((1, 3, 6, 1, 4, 1, 546, 5, 6, 9), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ntEventSystemMaxSize.setStatus('mandatory')
ntEventSystemRetention = MibScalar((1, 3, 6, 1, 4, 1, 546, 5, 6, 10), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ntEventSystemRetention.setStatus('mandatory')
ntEventUnusedIndex = MibScalar((1, 3, 6, 1, 4, 1, 546, 5, 6, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ntEventUnusedIndex.setStatus('mandatory')
ntEventMatchDescr = MibScalar((1, 3, 6, 1, 4, 1, 546, 5, 6, 12), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ntEventMatchDescr.setStatus('mandatory')
ntEventMatchIndex = MibScalar((1, 3, 6, 1, 4, 1, 546, 5, 6, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ntEventMatchIndex.setStatus('mandatory')
ntRegPerf = MibIdentifier((1, 3, 6, 1, 4, 1, 546, 5, 7))
ntRegPerfDumpFile = MibScalar((1, 3, 6, 1, 4, 1, 546, 5, 7, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 256))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ntRegPerfDumpFile.setStatus('mandatory')
ntRegNumberOfThreads = MibScalar((1, 3, 6, 1, 4, 1, 546, 5, 7, 2), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ntRegNumberOfThreads.setStatus('mandatory')
monitorTable = MibTable((1, 3, 6, 1, 4, 1, 546, 6, 1), )
if mibBuilder.loadTexts: monitorTable.setStatus('mandatory')
monitorEntry = MibTableRow((1, 3, 6, 1, 4, 1, 546, 6, 1, 1), ).setIndexNames((0, "EMPIRE", "monIndex"))
if mibBuilder.loadTexts: monitorEntry.setStatus('mandatory')
monIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 546, 6, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: monIndex.setStatus('mandatory')
monDescr = MibTableColumn((1, 3, 6, 1, 4, 1, 546, 6, 1, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: monDescr.setStatus('mandatory')
monInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 546, 6, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647)).clone(60)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: monInterval.setStatus('mandatory')
monSampleType = MibTableColumn((1, 3, 6, 1, 4, 1, 546, 6, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("absoluteValue", 1), ("deltaValue", 2))).clone('absoluteValue')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: monSampleType.setStatus('mandatory')
monOID = MibTableColumn((1, 3, 6, 1, 4, 1, 546, 6, 1, 1, 5), ObjectIdentifier()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: monOID.setStatus('mandatory')
monCurrVal = MibTableColumn((1, 3, 6, 1, 4, 1, 546, 6, 1, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: monCurrVal.setStatus('mandatory')
monOperator = MibTableColumn((1, 3, 6, 1, 4, 1, 546, 6, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("nop", 1), ("gt", 2), ("lt", 3), ("ge", 4), ("le", 5), ("eq", 6), ("ne", 7))).clone('nop')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: monOperator.setStatus('mandatory')
monValue = MibTableColumn((1, 3, 6, 1, 4, 1, 546, 6, 1, 1, 8), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: monValue.setStatus('mandatory')
monLastCall = MibTableColumn((1, 3, 6, 1, 4, 1, 546, 6, 1, 1, 9), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: monLastCall.setStatus('mandatory')
monNumTraps = MibTableColumn((1, 3, 6, 1, 4, 1, 546, 6, 1, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: monNumTraps.setStatus('mandatory')
monLastTrap = MibTableColumn((1, 3, 6, 1, 4, 1, 546, 6, 1, 1, 11), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: monLastTrap.setStatus('mandatory')
monRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 546, 6, 1, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("active", 1), ("notInService", 2), ("notReady", 3), ("createAndGo", 4), ("createAndWait", 5), ("destroy", 6))).clone('createAndWait')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: monRowStatus.setStatus('mandatory')
monMinValue = MibTableColumn((1, 3, 6, 1, 4, 1, 546, 6, 1, 1, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: monMinValue.setStatus('mandatory')
monMaxValue = MibTableColumn((1, 3, 6, 1, 4, 1, 546, 6, 1, 1, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: monMaxValue.setStatus('mandatory')
monAction = MibTableColumn((1, 3, 6, 1, 4, 1, 546, 6, 1, 1, 15), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 256))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: monAction.setStatus('mandatory')
monFlags = MibTableColumn((1, 3, 6, 1, 4, 1, 546, 6, 1, 1, 16), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: monFlags.setStatus('mandatory')
monUnusedIndex = MibScalar((1, 3, 6, 1, 4, 1, 546, 6, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: monUnusedIndex.setStatus('mandatory')
monMatchDescr = MibScalar((1, 3, 6, 1, 4, 1, 546, 6, 3), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: monMatchDescr.setStatus('mandatory')
monMatchIndex = MibScalar((1, 3, 6, 1, 4, 1, 546, 6, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: monMatchIndex.setStatus('mandatory')
rpc = MibIdentifier((1, 3, 6, 1, 4, 1, 546, 8, 1))
nfs = MibIdentifier((1, 3, 6, 1, 4, 1, 546, 8, 2))
nis = MibIdentifier((1, 3, 6, 1, 4, 1, 546, 8, 3))
clientRPCCalls = MibScalar((1, 3, 6, 1, 4, 1, 546, 8, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: clientRPCCalls.setStatus('mandatory')
clientRPCBadcalls = MibScalar((1, 3, 6, 1, 4, 1, 546, 8, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: clientRPCBadcalls.setStatus('mandatory')
clientRPCRetrans = MibScalar((1, 3, 6, 1, 4, 1, 546, 8, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: clientRPCRetrans.setStatus('mandatory')
clientRPCBadxids = MibScalar((1, 3, 6, 1, 4, 1, 546, 8, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: clientRPCBadxids.setStatus('mandatory')
clientRPCTimeouts = MibScalar((1, 3, 6, 1, 4, 1, 546, 8, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: clientRPCTimeouts.setStatus('mandatory')
clientRPCWaits = MibScalar((1, 3, 6, 1, 4, 1, 546, 8, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: clientRPCWaits.setStatus('mandatory')
clientRPCNewcreds = MibScalar((1, 3, 6, 1, 4, 1, 546, 8, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: clientRPCNewcreds.setStatus('mandatory')
clientRPCTimers = MibScalar((1, 3, 6, 1, 4, 1, 546, 8, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: clientRPCTimers.setStatus('mandatory')
serverRPCCalls = MibScalar((1, 3, 6, 1, 4, 1, 546, 8, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: serverRPCCalls.setStatus('mandatory')
serverRPCBadcalls = MibScalar((1, 3, 6, 1, 4, 1, 546, 8, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: serverRPCBadcalls.setStatus('mandatory')
serverRPCNullrecvs = MibScalar((1, 3, 6, 1, 4, 1, 546, 8, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: serverRPCNullrecvs.setStatus('mandatory')
serverRPCBadlens = MibScalar((1, 3, 6, 1, 4, 1, 546, 8, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: serverRPCBadlens.setStatus('mandatory')
serverRPCXdrcalls = MibScalar((1, 3, 6, 1, 4, 1, 546, 8, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: serverRPCXdrcalls.setStatus('mandatory')
clientNFSCalls = MibScalar((1, 3, 6, 1, 4, 1, 546, 8, 2, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: clientNFSCalls.setStatus('mandatory')
clientNFSBadcalls = MibScalar((1, 3, 6, 1, 4, 1, 546, 8, 2, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: clientNFSBadcalls.setStatus('mandatory')
clientNFSNclgets = MibScalar((1, 3, 6, 1, 4, 1, 546, 8, 2, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: clientNFSNclgets.setStatus('mandatory')
clientNFSNclsleeps = MibScalar((1, 3, 6, 1, 4, 1, 546, 8, 2, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: clientNFSNclsleeps.setStatus('mandatory')
clientNFSNulls = MibScalar((1, 3, 6, 1, 4, 1, 546, 8, 2, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: clientNFSNulls.setStatus('mandatory')
clientNFSGetattrs = MibScalar((1, 3, 6, 1, 4, 1, 546, 8, 2, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: clientNFSGetattrs.setStatus('mandatory')
clientNFSSetattrs = MibScalar((1, 3, 6, 1, 4, 1, 546, 8, 2, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: clientNFSSetattrs.setStatus('mandatory')
clientNFSRoots = MibScalar((1, 3, 6, 1, 4, 1, 546, 8, 2, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: clientNFSRoots.setStatus('mandatory')
clientNFSLookups = MibScalar((1, 3, 6, 1, 4, 1, 546, 8, 2, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: clientNFSLookups.setStatus('mandatory')
clientNFSReadlinks = MibScalar((1, 3, 6, 1, 4, 1, 546, 8, 2, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: clientNFSReadlinks.setStatus('mandatory')
clientNFSReads = MibScalar((1, 3, 6, 1, 4, 1, 546, 8, 2, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: clientNFSReads.setStatus('mandatory')
clientNFSWrcaches = MibScalar((1, 3, 6, 1, 4, 1, 546, 8, 2, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: clientNFSWrcaches.setStatus('mandatory')
clientNFSWrites = MibScalar((1, 3, 6, 1, 4, 1, 546, 8, 2, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: clientNFSWrites.setStatus('mandatory')
clientNFSCreates = MibScalar((1, 3, 6, 1, 4, 1, 546, 8, 2, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: clientNFSCreates.setStatus('mandatory')
clientNFSRemoves = MibScalar((1, 3, 6, 1, 4, 1, 546, 8, 2, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: clientNFSRemoves.setStatus('mandatory')
clientNFSRenames = MibScalar((1, 3, 6, 1, 4, 1, 546, 8, 2, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: clientNFSRenames.setStatus('mandatory')
clientNFSLinks = MibScalar((1, 3, 6, 1, 4, 1, 546, 8, 2, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: clientNFSLinks.setStatus('mandatory')
clientNFSSymlinks = MibScalar((1, 3, 6, 1, 4, 1, 546, 8, 2, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: clientNFSSymlinks.setStatus('mandatory')
clientNFSMkdirs = MibScalar((1, 3, 6, 1, 4, 1, 546, 8, 2, 19), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: clientNFSMkdirs.setStatus('mandatory')
clientNFSRmdirs = MibScalar((1, 3, 6, 1, 4, 1, 546, 8, 2, 20), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: clientNFSRmdirs.setStatus('mandatory')
clientNFSReaddirs = MibScalar((1, 3, 6, 1, 4, 1, 546, 8, 2, 21), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: clientNFSReaddirs.setStatus('mandatory')
clientNFSFsstats = MibScalar((1, 3, 6, 1, 4, 1, 546, 8, 2, 22), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: clientNFSFsstats.setStatus('mandatory')
serverNFSCalls = MibScalar((1, 3, 6, 1, 4, 1, 546, 8, 2, 23), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: serverNFSCalls.setStatus('mandatory')
serverNFSBadcalls = MibScalar((1, 3, 6, 1, 4, 1, 546, 8, 2, 24), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: serverNFSBadcalls.setStatus('mandatory')
serverNFSNulls = MibScalar((1, 3, 6, 1, 4, 1, 546, 8, 2, 25), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: serverNFSNulls.setStatus('mandatory')
serverNFSGetattrs = MibScalar((1, 3, 6, 1, 4, 1, 546, 8, 2, 26), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: serverNFSGetattrs.setStatus('mandatory')
serverNFSSetattrs = MibScalar((1, 3, 6, 1, 4, 1, 546, 8, 2, 27), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: serverNFSSetattrs.setStatus('mandatory')
serverNFSRoots = MibScalar((1, 3, 6, 1, 4, 1, 546, 8, 2, 28), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: serverNFSRoots.setStatus('mandatory')
serverNFSLookups = MibScalar((1, 3, 6, 1, 4, 1, 546, 8, 2, 29), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: serverNFSLookups.setStatus('mandatory')
serverNFSReadlinks = MibScalar((1, 3, 6, 1, 4, 1, 546, 8, 2, 30), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: serverNFSReadlinks.setStatus('mandatory')
serverNFSReads = MibScalar((1, 3, 6, 1, 4, 1, 546, 8, 2, 31), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: serverNFSReads.setStatus('mandatory')
serverNFSWrcaches = MibScalar((1, 3, 6, 1, 4, 1, 546, 8, 2, 32), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: serverNFSWrcaches.setStatus('mandatory')
serverNFSWrites = MibScalar((1, 3, 6, 1, 4, 1, 546, 8, 2, 33), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: serverNFSWrites.setStatus('mandatory')
serverNFSCreates = MibScalar((1, 3, 6, 1, 4, 1, 546, 8, 2, 34), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: serverNFSCreates.setStatus('mandatory')
serverNFSRemoves = MibScalar((1, 3, 6, 1, 4, 1, 546, 8, 2, 35), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: serverNFSRemoves.setStatus('mandatory')
serverNFSRenames = MibScalar((1, 3, 6, 1, 4, 1, 546, 8, 2, 36), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: serverNFSRenames.setStatus('mandatory')
serverNFSLinks = MibScalar((1, 3, 6, 1, 4, 1, 546, 8, 2, 37), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: serverNFSLinks.setStatus('mandatory')
serverNFSSymlinks = MibScalar((1, 3, 6, 1, 4, 1, 546, 8, 2, 38), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: serverNFSSymlinks.setStatus('mandatory')
serverNFSMkdirs = MibScalar((1, 3, 6, 1, 4, 1, 546, 8, 2, 39), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: serverNFSMkdirs.setStatus('mandatory')
serverNFSRmdirs = MibScalar((1, 3, 6, 1, 4, 1, 546, 8, 2, 40), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: serverNFSRmdirs.setStatus('mandatory')
serverNFSReaddirs = MibScalar((1, 3, 6, 1, 4, 1, 546, 8, 2, 41), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: serverNFSReaddirs.setStatus('mandatory')
serverNFSFsstats = MibScalar((1, 3, 6, 1, 4, 1, 546, 8, 2, 42), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: serverNFSFsstats.setStatus('mandatory')
empireHistoryCtrlTable = MibTable((1, 3, 6, 1, 4, 1, 546, 10, 1), )
if mibBuilder.loadTexts: empireHistoryCtrlTable.setStatus('mandatory')
empireHistoryCtrlEntry = MibTableRow((1, 3, 6, 1, 4, 1, 546, 10, 1, 1), ).setIndexNames((0, "EMPIRE", "empireHistoryCtrlIndex"))
if mibBuilder.loadTexts: empireHistoryCtrlEntry.setStatus('mandatory')
empireHistoryCtrlIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 546, 10, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: empireHistoryCtrlIndex.setStatus('mandatory')
empireHistoryCtrlDescr = MibTableColumn((1, 3, 6, 1, 4, 1, 546, 10, 1, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: empireHistoryCtrlDescr.setStatus('mandatory')
empireHistoryCtrlInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 546, 10, 1, 1, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: empireHistoryCtrlInterval.setStatus('mandatory')
empireHistoryCtrlObjID = MibTableColumn((1, 3, 6, 1, 4, 1, 546, 10, 1, 1, 4), ObjectIdentifier()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: empireHistoryCtrlObjID.setStatus('mandatory')
empireHistoryCtrlObjType = MibTableColumn((1, 3, 6, 1, 4, 1, 546, 10, 1, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: empireHistoryCtrlObjType.setStatus('mandatory')
empireHistoryCtrlBucketsReq = MibTableColumn((1, 3, 6, 1, 4, 1, 546, 10, 1, 1, 6), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: empireHistoryCtrlBucketsReq.setStatus('mandatory')
empireHistoryCtrlBucketsGrant = MibTableColumn((1, 3, 6, 1, 4, 1, 546, 10, 1, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: empireHistoryCtrlBucketsGrant.setStatus('mandatory')
empireHistoryCtrlLastCall = MibTableColumn((1, 3, 6, 1, 4, 1, 546, 10, 1, 1, 8), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: empireHistoryCtrlLastCall.setStatus('mandatory')
empireHistoryCtrlCreateTime = MibTableColumn((1, 3, 6, 1, 4, 1, 546, 10, 1, 1, 9), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: empireHistoryCtrlCreateTime.setStatus('mandatory')
empireHistoryCtrlStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 546, 10, 1, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("active", 1), ("notInService", 2), ("notReady", 3), ("createAndGo", 4), ("createAndWait", 5), ("destroy", 6))).clone('createAndWait')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: empireHistoryCtrlStatus.setStatus('mandatory')
empireHistoryTable = MibTable((1, 3, 6, 1, 4, 1, 546, 10, 2), )
if mibBuilder.loadTexts: empireHistoryTable.setStatus('mandatory')
empireHistoryEntry = MibTableRow((1, 3, 6, 1, 4, 1, 546, 10, 2, 1), ).setIndexNames((0, "EMPIRE", "empireHistoryIndex"), (0, "EMPIRE", "empireHistorySampleIndex"))
if mibBuilder.loadTexts: empireHistoryEntry.setStatus('mandatory')
empireHistoryIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 546, 10, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: empireHistoryIndex.setStatus('mandatory')
empireHistorySampleIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 546, 10, 2, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: empireHistorySampleIndex.setStatus('mandatory')
empireHistoryStartTime = MibTableColumn((1, 3, 6, 1, 4, 1, 546, 10, 2, 1, 3), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: empireHistoryStartTime.setStatus('mandatory')
empireHistorySampleTime = MibTableColumn((1, 3, 6, 1, 4, 1, 546, 10, 2, 1, 4), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: empireHistorySampleTime.setStatus('mandatory')
empireHistoryValue = MibTableColumn((1, 3, 6, 1, 4, 1, 546, 10, 2, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: empireHistoryValue.setStatus('mandatory')
histCtrlUnusedIndex = MibScalar((1, 3, 6, 1, 4, 1, 546, 10, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: histCtrlUnusedIndex.setStatus('mandatory')
histCtrlMatchDescr = MibScalar((1, 3, 6, 1, 4, 1, 546, 10, 4), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: histCtrlMatchDescr.setStatus('mandatory')
histCtrlMatchIndex = MibScalar((1, 3, 6, 1, 4, 1, 546, 10, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: histCtrlMatchIndex.setStatus('mandatory')
logMonitorTable = MibTable((1, 3, 6, 1, 4, 1, 546, 11, 1), )
if mibBuilder.loadTexts: logMonitorTable.setStatus('mandatory')
logMonitorEntry = MibTableRow((1, 3, 6, 1, 4, 1, 546, 11, 1, 1), ).setIndexNames((0, "EMPIRE", "logMonitorIndex"))
if mibBuilder.loadTexts: logMonitorEntry.setStatus('mandatory')
logMonitorIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 546, 11, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: logMonitorIndex.setStatus('mandatory')
logMonitorLogFile = MibTableColumn((1, 3, 6, 1, 4, 1, 546, 11, 1, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 256))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: logMonitorLogFile.setStatus('mandatory')
logMonitorRegularExpression = MibTableColumn((1, 3, 6, 1, 4, 1, 546, 11, 1, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: logMonitorRegularExpression.setStatus('mandatory')
logMonitorNumberTraps = MibTableColumn((1, 3, 6, 1, 4, 1, 546, 11, 1, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: logMonitorNumberTraps.setStatus('mandatory')
logMonitorLastTrap = MibTableColumn((1, 3, 6, 1, 4, 1, 546, 11, 1, 1, 5), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: logMonitorLastTrap.setStatus('mandatory')
logMonitorLastMatch = MibTableColumn((1, 3, 6, 1, 4, 1, 546, 11, 1, 1, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 256))).setMaxAccess("readonly")
if mibBuilder.loadTexts: logMonitorLastMatch.setStatus('mandatory')
logMonitorStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 546, 11, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("active", 1), ("notInService", 2), ("notReady", 3), ("createAndGo", 4), ("createAndWait", 5), ("destroy", 6))).clone('createAndWait')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: logMonitorStatus.setStatus('mandatory')
logMonitorLogFileSize = MibTableColumn((1, 3, 6, 1, 4, 1, 546, 11, 1, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: logMonitorLogFileSize.setStatus('mandatory')
logMonitorLogFileLastUpdate = MibTableColumn((1, 3, 6, 1, 4, 1, 546, 11, 1, 1, 9), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: logMonitorLogFileLastUpdate.setStatus('mandatory')
logMonitorDescr = MibTableColumn((1, 3, 6, 1, 4, 1, 546, 11, 1, 1, 10), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: logMonitorDescr.setStatus('mandatory')
logMonitorAction = MibTableColumn((1, 3, 6, 1, 4, 1, 546, 11, 1, 1, 11), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 256))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: logMonitorAction.setStatus('mandatory')
logMonitorFlags = MibTableColumn((1, 3, 6, 1, 4, 1, 546, 11, 1, 1, 12), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: logMonitorFlags.setStatus('mandatory')
logMonitorMatches = MibTableColumn((1, 3, 6, 1, 4, 1, 546, 11, 1, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: logMonitorMatches.setStatus('mandatory')
logmonUnusedIndex = MibScalar((1, 3, 6, 1, 4, 1, 546, 11, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: logmonUnusedIndex.setStatus('mandatory')
logmonMatchDescr = MibScalar((1, 3, 6, 1, 4, 1, 546, 11, 3), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: logmonMatchDescr.setStatus('mandatory')
logmonMatchIndex = MibScalar((1, 3, 6, 1, 4, 1, 546, 11, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: logmonMatchIndex.setStatus('mandatory')
diskStatsTable = MibTable((1, 3, 6, 1, 4, 1, 546, 12, 1), )
if mibBuilder.loadTexts: diskStatsTable.setStatus('mandatory')
diskStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 546, 12, 1, 1), ).setIndexNames((0, "EMPIRE", "diskStatsIndex"))
if mibBuilder.loadTexts: diskStatsEntry.setStatus('mandatory')
diskStatsIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 546, 12, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: diskStatsIndex.setStatus('mandatory')
diskStatsQueueLength = MibTableColumn((1, 3, 6, 1, 4, 1, 546, 12, 1, 1, 2), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: diskStatsQueueLength.setStatus('mandatory')
diskStatsServiceTime = MibTableColumn((1, 3, 6, 1, 4, 1, 546, 12, 1, 1, 3), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: diskStatsServiceTime.setStatus('mandatory')
diskStatsUtilization = MibTableColumn((1, 3, 6, 1, 4, 1, 546, 12, 1, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: diskStatsUtilization.setStatus('mandatory')
diskStatsKBytesTransferred = MibTableColumn((1, 3, 6, 1, 4, 1, 546, 12, 1, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: diskStatsKBytesTransferred.setStatus('mandatory')
diskStatsTransfers = MibTableColumn((1, 3, 6, 1, 4, 1, 546, 12, 1, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: diskStatsTransfers.setStatus('mandatory')
diskStatsReads = MibTableColumn((1, 3, 6, 1, 4, 1, 546, 12, 1, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: diskStatsReads.setStatus('mandatory')
diskStatsWrites = MibTableColumn((1, 3, 6, 1, 4, 1, 546, 12, 1, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: diskStatsWrites.setStatus('mandatory')
diskStatsHostmibDevTableIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 546, 12, 1, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: diskStatsHostmibDevTableIndex.setStatus('mandatory')
diskStatsLastUpdate = MibTableColumn((1, 3, 6, 1, 4, 1, 546, 12, 1, 1, 10), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: diskStatsLastUpdate.setStatus('mandatory')
diskStatsKBytesXferStr = MibTableColumn((1, 3, 6, 1, 4, 1, 546, 12, 1, 1, 11), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: diskStatsKBytesXferStr.setStatus('mandatory')
diskStatsTransfersStr = MibTableColumn((1, 3, 6, 1, 4, 1, 546, 12, 1, 1, 12), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: diskStatsTransfersStr.setStatus('mandatory')
diskStatsReadsStr = MibTableColumn((1, 3, 6, 1, 4, 1, 546, 12, 1, 1, 13), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: diskStatsReadsStr.setStatus('mandatory')
diskStatsWritesStr = MibTableColumn((1, 3, 6, 1, 4, 1, 546, 12, 1, 1, 14), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: diskStatsWritesStr.setStatus('mandatory')
diskStatsKBytesXferHi = MibTableColumn((1, 3, 6, 1, 4, 1, 546, 12, 1, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: diskStatsKBytesXferHi.setStatus('mandatory')
diskStatsXferOpsHi = MibTableColumn((1, 3, 6, 1, 4, 1, 546, 12, 1, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: diskStatsXferOpsHi.setStatus('mandatory')
diskStatsReadsHi = MibTableColumn((1, 3, 6, 1, 4, 1, 546, 12, 1, 1, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: diskStatsReadsHi.setStatus('mandatory')
diskStatsWritesHi = MibTableColumn((1, 3, 6, 1, 4, 1, 546, 12, 1, 1, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: diskStatsWritesHi.setStatus('mandatory')
cpuStatsTable = MibTable((1, 3, 6, 1, 4, 1, 546, 13, 1), )
if mibBuilder.loadTexts: cpuStatsTable.setStatus('mandatory')
cpuStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 546, 13, 1, 1), ).setIndexNames((0, "EMPIRE", "cpuStatsIndex"))
if mibBuilder.loadTexts: cpuStatsEntry.setStatus('mandatory')
cpuStatsIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 546, 13, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpuStatsIndex.setStatus('mandatory')
cpuStatsDescr = MibTableColumn((1, 3, 6, 1, 4, 1, 546, 13, 1, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpuStatsDescr.setStatus('mandatory')
cpuStatsIdle = MibTableColumn((1, 3, 6, 1, 4, 1, 546, 13, 1, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpuStatsIdle.setStatus('mandatory')
cpuStatsUser = MibTableColumn((1, 3, 6, 1, 4, 1, 546, 13, 1, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpuStatsUser.setStatus('mandatory')
cpuStatsSys = MibTableColumn((1, 3, 6, 1, 4, 1, 546, 13, 1, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpuStatsSys.setStatus('mandatory')
cpuStatsWait = MibTableColumn((1, 3, 6, 1, 4, 1, 546, 13, 1, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpuStatsWait.setStatus('mandatory')
cpuStatsLastUpdate = MibTableColumn((1, 3, 6, 1, 4, 1, 546, 13, 1, 1, 7), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpuStatsLastUpdate.setStatus('mandatory')
cpuStatsIdlePercent = MibTableColumn((1, 3, 6, 1, 4, 1, 546, 13, 1, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpuStatsIdlePercent.setStatus('mandatory')
cpuStatsUserPercent = MibTableColumn((1, 3, 6, 1, 4, 1, 546, 13, 1, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpuStatsUserPercent.setStatus('mandatory')
cpuStatsSysPercent = MibTableColumn((1, 3, 6, 1, 4, 1, 546, 13, 1, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpuStatsSysPercent.setStatus('mandatory')
cpuStatsWaitPercent = MibTableColumn((1, 3, 6, 1, 4, 1, 546, 13, 1, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpuStatsWaitPercent.setStatus('mandatory')
cpuTotalIdle = MibScalar((1, 3, 6, 1, 4, 1, 546, 13, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpuTotalIdle.setStatus('mandatory')
cpuTotalUser = MibScalar((1, 3, 6, 1, 4, 1, 546, 13, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpuTotalUser.setStatus('mandatory')
cpuTotalSys = MibScalar((1, 3, 6, 1, 4, 1, 546, 13, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpuTotalSys.setStatus('mandatory')
cpuTotalWait = MibScalar((1, 3, 6, 1, 4, 1, 546, 13, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpuTotalWait.setStatus('mandatory')
cpuTotalLastUpdate = MibScalar((1, 3, 6, 1, 4, 1, 546, 13, 6), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpuTotalLastUpdate.setStatus('mandatory')
cpuTotalIdlePercent = MibScalar((1, 3, 6, 1, 4, 1, 546, 13, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpuTotalIdlePercent.setStatus('mandatory')
cpuTotalUserPercent = MibScalar((1, 3, 6, 1, 4, 1, 546, 13, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpuTotalUserPercent.setStatus('mandatory')
cpuTotalSysPercent = MibScalar((1, 3, 6, 1, 4, 1, 546, 13, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpuTotalSysPercent.setStatus('mandatory')
cpuTotalWaitPercent = MibScalar((1, 3, 6, 1, 4, 1, 546, 13, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpuTotalWaitPercent.setStatus('mandatory')
extensionDomainName = MibScalar((1, 3, 6, 1, 4, 1, 546, 14, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 256))).setMaxAccess("readonly")
if mibBuilder.loadTexts: extensionDomainName.setStatus('mandatory')
extensionNisServer = MibScalar((1, 3, 6, 1, 4, 1, 546, 14, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 256))).setMaxAccess("readonly")
if mibBuilder.loadTexts: extensionNisServer.setStatus('mandatory')
extensionMotd = MibScalar((1, 3, 6, 1, 4, 1, 546, 14, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 256))).setMaxAccess("readonly")
if mibBuilder.loadTexts: extensionMotd.setStatus('mandatory')
extensionPing = MibScalar((1, 3, 6, 1, 4, 1, 546, 14, 31), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 256))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: extensionPing.setStatus('mandatory')
processMonTable = MibTable((1, 3, 6, 1, 4, 1, 546, 15, 1), )
if mibBuilder.loadTexts: processMonTable.setStatus('mandatory')
processMonEntry = MibTableRow((1, 3, 6, 1, 4, 1, 546, 15, 1, 1), ).setIndexNames((0, "EMPIRE", "pmonIndex"))
if mibBuilder.loadTexts: processMonEntry.setStatus('mandatory')
pmonIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 546, 15, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pmonIndex.setStatus('mandatory')
pmonDescr = MibTableColumn((1, 3, 6, 1, 4, 1, 546, 15, 1, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pmonDescr.setStatus('mandatory')
pmonInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 546, 15, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647)).clone(60)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pmonInterval.setStatus('mandatory')
pmonSampleType = MibTableColumn((1, 3, 6, 1, 4, 1, 546, 15, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("absoluteValue", 1), ("deltaValue", 2))).clone('absoluteValue')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pmonSampleType.setStatus('mandatory')
pmonAttribute = MibTableColumn((1, 3, 6, 1, 4, 1, 546, 15, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17))).clone(namedValues=NamedValues(("procAlive", 1), ("procMemory", 2), ("procSize", 3), ("procRSS", 4), ("procTime", 5), ("procInBlks", 6), ("procOutBlks", 7), ("procMsgsSent", 8), ("procMsgsRecv", 9), ("procNice", 10), ("procNumThreads", 11), ("procNumSwaps", 12), ("procSysCalls", 13), ("procMinorPgFlts", 14), ("procMajorPgFlts", 15), ("procVolCtx", 16), ("procInvolCtx", 17)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pmonAttribute.setStatus('mandatory')
pmonCurrVal = MibTableColumn((1, 3, 6, 1, 4, 1, 546, 15, 1, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pmonCurrVal.setStatus('mandatory')
pmonOperator = MibTableColumn((1, 3, 6, 1, 4, 1, 546, 15, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("nop", 1), ("gt", 2), ("lt", 3), ("ge", 4), ("le", 5), ("eq", 6), ("ne", 7))).clone('nop')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pmonOperator.setStatus('mandatory')
pmonValue = MibTableColumn((1, 3, 6, 1, 4, 1, 546, 15, 1, 1, 8), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pmonValue.setStatus('mandatory')
pmonLastCall = MibTableColumn((1, 3, 6, 1, 4, 1, 546, 15, 1, 1, 9), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pmonLastCall.setStatus('mandatory')
pmonNumTraps = MibTableColumn((1, 3, 6, 1, 4, 1, 546, 15, 1, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pmonNumTraps.setStatus('mandatory')
pmonLastTrap = MibTableColumn((1, 3, 6, 1, 4, 1, 546, 15, 1, 1, 11), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pmonLastTrap.setStatus('mandatory')
pmonFlags = MibTableColumn((1, 3, 6, 1, 4, 1, 546, 15, 1, 1, 12), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pmonFlags.setStatus('mandatory')
pmonAction = MibTableColumn((1, 3, 6, 1, 4, 1, 546, 15, 1, 1, 13), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 256))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pmonAction.setStatus('mandatory')
pmonRegExpr = MibTableColumn((1, 3, 6, 1, 4, 1, 546, 15, 1, 1, 14), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pmonRegExpr.setStatus('mandatory')
pmonMinValue = MibTableColumn((1, 3, 6, 1, 4, 1, 546, 15, 1, 1, 15), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pmonMinValue.setStatus('mandatory')
pmonMaxValue = MibTableColumn((1, 3, 6, 1, 4, 1, 546, 15, 1, 1, 16), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pmonMaxValue.setStatus('mandatory')
pmonCurrentPID = MibTableColumn((1, 3, 6, 1, 4, 1, 546, 15, 1, 1, 17), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pmonCurrentPID.setStatus('mandatory')
pmonRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 546, 15, 1, 1, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("active", 1), ("notInService", 2), ("notReady", 3), ("createAndGo", 4), ("createAndWait", 5), ("destroy", 6))).clone('createAndWait')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pmonRowStatus.setStatus('mandatory')
pmonNumEvents = MibTableColumn((1, 3, 6, 1, 4, 1, 546, 15, 1, 1, 19), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pmonNumEvents.setStatus('mandatory')
pmonUnusedIndex = MibScalar((1, 3, 6, 1, 4, 1, 546, 15, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pmonUnusedIndex.setStatus('mandatory')
pmonMatchDescr = MibScalar((1, 3, 6, 1, 4, 1, 546, 15, 3), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pmonMatchDescr.setStatus('mandatory')
pmonMatchIndex = MibScalar((1, 3, 6, 1, 4, 1, 546, 15, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pmonMatchIndex.setStatus('mandatory')
processGroupMonTable = MibTable((1, 3, 6, 1, 4, 1, 546, 15, 10), )
if mibBuilder.loadTexts: processGroupMonTable.setStatus('mandatory')
processGroupMonEntry = MibTableRow((1, 3, 6, 1, 4, 1, 546, 15, 10, 1), ).setIndexNames((0, "EMPIRE", "pgmonIndex"))
if mibBuilder.loadTexts: processGroupMonEntry.setStatus('mandatory')
pgmonIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 546, 15, 10, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pgmonIndex.setStatus('mandatory')
pgmonDescr = MibTableColumn((1, 3, 6, 1, 4, 1, 546, 15, 10, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pgmonDescr.setStatus('mandatory')
pgmonInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 546, 15, 10, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647)).clone(60)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pgmonInterval.setStatus('mandatory')
pgmonProcRegExpr = MibTableColumn((1, 3, 6, 1, 4, 1, 546, 15, 10, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pgmonProcRegExpr.setStatus('mandatory')
pgmonFlags = MibTableColumn((1, 3, 6, 1, 4, 1, 546, 15, 10, 1, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pgmonFlags.setStatus('mandatory')
pgmonNumProcs = MibTableColumn((1, 3, 6, 1, 4, 1, 546, 15, 10, 1, 6), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pgmonNumProcs.setStatus('mandatory')
pgmonPIDList = MibTableColumn((1, 3, 6, 1, 4, 1, 546, 15, 10, 1, 7), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pgmonPIDList.setStatus('mandatory')
pgmonStatusList = MibTableColumn((1, 3, 6, 1, 4, 1, 546, 15, 10, 1, 8), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pgmonStatusList.setStatus('mandatory')
pgmonAction = MibTableColumn((1, 3, 6, 1, 4, 1, 546, 15, 10, 1, 9), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 256))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pgmonAction.setStatus('mandatory')
pgmonNumEvents = MibTableColumn((1, 3, 6, 1, 4, 1, 546, 15, 10, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pgmonNumEvents.setStatus('mandatory')
pgmonNumTraps = MibTableColumn((1, 3, 6, 1, 4, 1, 546, 15, 10, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pgmonNumTraps.setStatus('mandatory')
pgmonLastTrap = MibTableColumn((1, 3, 6, 1, 4, 1, 546, 15, 10, 1, 12), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pgmonLastTrap.setStatus('mandatory')
pgmonRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 546, 15, 10, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("active", 1), ("notInService", 2), ("notReady", 3), ("createAndGo", 4), ("createAndWait", 5), ("destroy", 6))).clone('createAndWait')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pgmonRowStatus.setStatus('mandatory')
pgmonRSS = MibTableColumn((1, 3, 6, 1, 4, 1, 546, 15, 10, 1, 14), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pgmonRSS.setStatus('mandatory')
pgmonSize = MibTableColumn((1, 3, 6, 1, 4, 1, 546, 15, 10, 1, 15), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pgmonSize.setStatus('mandatory')
pgmonThreadCount = MibTableColumn((1, 3, 6, 1, 4, 1, 546, 15, 10, 1, 16), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pgmonThreadCount.setStatus('mandatory')
pgmonMEM = MibTableColumn((1, 3, 6, 1, 4, 1, 546, 15, 10, 1, 17), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pgmonMEM.setStatus('mandatory')
pgmonInBlks = MibTableColumn((1, 3, 6, 1, 4, 1, 546, 15, 10, 1, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pgmonInBlks.setStatus('mandatory')
pgmonOutBlks = MibTableColumn((1, 3, 6, 1, 4, 1, 546, 15, 10, 1, 19), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pgmonOutBlks.setStatus('mandatory')
pgmonMsgsSent = MibTableColumn((1, 3, 6, 1, 4, 1, 546, 15, 10, 1, 20), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pgmonMsgsSent.setStatus('mandatory')
pgmonMsgsRecv = MibTableColumn((1, 3, 6, 1, 4, 1, 546, 15, 10, 1, 21), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pgmonMsgsRecv.setStatus('mandatory')
pgmonSysCalls = MibTableColumn((1, 3, 6, 1, 4, 1, 546, 15, 10, 1, 22), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pgmonSysCalls.setStatus('mandatory')
pgmonMinorPgFlts = MibTableColumn((1, 3, 6, 1, 4, 1, 546, 15, 10, 1, 23), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pgmonMinorPgFlts.setStatus('mandatory')
pgmonMajorPgFlts = MibTableColumn((1, 3, 6, 1, 4, 1, 546, 15, 10, 1, 24), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pgmonMajorPgFlts.setStatus('mandatory')
pgmonNumSwaps = MibTableColumn((1, 3, 6, 1, 4, 1, 546, 15, 10, 1, 25), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pgmonNumSwaps.setStatus('mandatory')
pgmonVolCtx = MibTableColumn((1, 3, 6, 1, 4, 1, 546, 15, 10, 1, 26), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pgmonVolCtx.setStatus('mandatory')
pgmonInvolCtx = MibTableColumn((1, 3, 6, 1, 4, 1, 546, 15, 10, 1, 27), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pgmonInvolCtx.setStatus('mandatory')
pgmonCPUSecs = MibTableColumn((1, 3, 6, 1, 4, 1, 546, 15, 10, 1, 28), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pgmonCPUSecs.setStatus('mandatory')
pgmonMatchUser = MibTableColumn((1, 3, 6, 1, 4, 1, 546, 15, 10, 1, 29), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pgmonMatchUser.setStatus('mandatory')
pgmonMatchGroup = MibTableColumn((1, 3, 6, 1, 4, 1, 546, 15, 10, 1, 30), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pgmonMatchGroup.setStatus('mandatory')
pgmonUnusedIndex = MibScalar((1, 3, 6, 1, 4, 1, 546, 15, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pgmonUnusedIndex.setStatus('mandatory')
pgmonMatchDescr = MibScalar((1, 3, 6, 1, 4, 1, 546, 15, 12), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pgmonMatchDescr.setStatus('mandatory')
pgmonMatchIndex = MibScalar((1, 3, 6, 1, 4, 1, 546, 15, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pgmonMatchIndex.setStatus('mandatory')
msExchange = MibIdentifier((1, 3, 6, 1, 4, 1, 546, 16, 1))
msIIS = MibIdentifier((1, 3, 6, 1, 4, 1, 546, 16, 2))
apacheSrv = MibIdentifier((1, 3, 6, 1, 4, 1, 546, 16, 3))
oracledb = MibIdentifier((1, 3, 6, 1, 4, 1, 546, 16, 4))
sybase = MibIdentifier((1, 3, 6, 1, 4, 1, 546, 16, 5))
svcRsp = MibIdentifier((1, 3, 6, 1, 4, 1, 546, 16, 6))
topProcs = MibIdentifier((1, 3, 6, 1, 4, 1, 546, 16, 7))
sqlServer = MibIdentifier((1, 3, 6, 1, 4, 1, 546, 16, 8))
domino = MibIdentifier((1, 3, 6, 1, 4, 1, 546, 16, 10))
surveyor = MibIdentifier((1, 3, 6, 1, 4, 1, 546, 16, 11))
mosMod = MibIdentifier((1, 3, 6, 1, 4, 1, 546, 16, 12))
ccmmod = MibIdentifier((1, 3, 6, 1, 4, 1, 546, 16, 13))
siebelmod = MibIdentifier((1, 3, 6, 1, 4, 1, 546, 16, 14))
testplugin = MibIdentifier((1, 3, 6, 1, 4, 1, 546, 16, 16))
firewall = MibIdentifier((1, 3, 6, 1, 4, 1, 546, 16, 17))
dirmwp = MibIdentifier((1, 3, 6, 1, 4, 1, 546, 16, 18))
custom = MibIdentifier((1, 3, 6, 1, 4, 1, 546, 16, 100))
monitorEvent = MibIdentifier((1, 3, 6, 1, 4, 1, 546, 9, 1))
monitorTrap = NotificationType((1, 3, 6, 1, 4, 1, 546, 1, 1) + (0,1)).setObjects(("EMPIRE", "monDescr"), ("EMPIRE", "monOID"), ("EMPIRE", "monCurrVal"), ("EMPIRE", "monValue"), ("EMPIRE", "monRowStatus"), ("EMPIRE", "monOperator"), ("EMPIRE", "monIndex"), ("EMPIRE", "monFlags"))
kernelErrorEvent = MibIdentifier((1, 3, 6, 1, 4, 1, 546, 9, 2))
kernelErrorTrap = NotificationType((1, 3, 6, 1, 4, 1, 546, 1, 1) + (0,2)).setObjects(("EMPIRE", "seqNum"), ("EMPIRE", "type"), ("EMPIRE", "cause"), ("EMPIRE", "severity"))
monitorEntryNotReadyEvent = MibIdentifier((1, 3, 6, 1, 4, 1, 546, 9, 3))
monitorEntryNotReadyTrap = NotificationType((1, 3, 6, 1, 4, 1, 546, 1, 1) + (0,3)).setObjects(("EMPIRE", "monDescr"), ("EMPIRE", "monOID"), ("EMPIRE", "monCurrVal"), ("EMPIRE", "monValue"), ("EMPIRE", "monRowStatus"), ("EMPIRE", "monOperator"), ("EMPIRE", "monIndex"), ("EMPIRE", "monFlags"))
logMonMatchEvent = MibIdentifier((1, 3, 6, 1, 4, 1, 546, 9, 4))
logMonMatchTrap = NotificationType((1, 3, 6, 1, 4, 1, 546, 1, 1) + (0,4)).setObjects(("EMPIRE", "logMonitorLogFile"), ("EMPIRE", "logMonitorRegularExpression"), ("EMPIRE", "logMonitorLastTrap"), ("EMPIRE", "logMonitorLastMatch"), ("EMPIRE", "logMonitorDescr"), ("EMPIRE", "logMonitorIndex"), ("EMPIRE", "logMonitorFlags"))
logMonNotReadyEvent = MibIdentifier((1, 3, 6, 1, 4, 1, 546, 9, 5))
logMonNotReadyTrap = NotificationType((1, 3, 6, 1, 4, 1, 546, 1, 1) + (0,5)).setObjects(("EMPIRE", "logMonitorLogFile"), ("EMPIRE", "logMonitorRegularExpression"), ("EMPIRE", "logMonitorLastTrap"), ("EMPIRE", "logMonitorLastMatch"), ("EMPIRE", "logMonitorDescr"), ("EMPIRE", "logMonitorIndex"), ("EMPIRE", "logMonitorFlags"))
sendTrapEvent = MibIdentifier((1, 3, 6, 1, 4, 1, 546, 9, 6))
ntEventMonMatchEvent = MibIdentifier((1, 3, 6, 1, 4, 1, 546, 9, 7))
ntEventMonMatchTrap = NotificationType((1, 3, 6, 1, 4, 1, 546, 1, 1) + (0,7)).setObjects(("EMPIRE", "ntEventMonLog"), ("EMPIRE", "ntEventMonTypeLastMatch"), ("EMPIRE", "ntEventMonTime"), ("EMPIRE", "ntEventMonSrcLastMatch"), ("EMPIRE", "ntEventMonDescLastMatch"), ("EMPIRE", "ntEventMonDescr"), ("EMPIRE", "ntEventMonIndex"), ("EMPIRE", "ntEventMonFlags"))
ntEventMonNotReadyEvent = MibIdentifier((1, 3, 6, 1, 4, 1, 546, 9, 8))
ntEventMonNotReadyTrap = NotificationType((1, 3, 6, 1, 4, 1, 546, 1, 1) + (0,8)).setObjects(("EMPIRE", "ntEventMonLog"), ("EMPIRE", "ntEventMonTypeFilter"), ("EMPIRE", "ntEventMonSrcFilter"), ("EMPIRE", "ntEventMonDescFilter"), ("EMPIRE", "ntEventMonDescr"), ("EMPIRE", "ntEventMonIndex"), ("EMPIRE", "ntEventMonFlags"))
monitorClearEvent = MibIdentifier((1, 3, 6, 1, 4, 1, 546, 9, 9))
monitorClearTrap = NotificationType((1, 3, 6, 1, 4, 1, 546, 1, 1) + (0,9)).setObjects(("EMPIRE", "monDescr"), ("EMPIRE", "monOID"), ("EMPIRE", "monCurrVal"), ("EMPIRE", "monValue"), ("EMPIRE", "monRowStatus"), ("EMPIRE", "monOperator"), ("EMPIRE", "monIndex"), ("EMPIRE", "monFlags"))
processStopEvent = MibIdentifier((1, 3, 6, 1, 4, 1, 546, 9, 10))
processStopTrap = NotificationType((1, 3, 6, 1, 4, 1, 546, 1, 1) + (0,10)).setObjects(("EMPIRE", "pmonIndex"), ("EMPIRE", "pmonDescr"), ("EMPIRE", "pmonAttribute"), ("EMPIRE", "pmonCurrVal"), ("EMPIRE", "pmonOperator"), ("EMPIRE", "pmonValue"), ("EMPIRE", "pmonFlags"), ("EMPIRE", "pmonRegExpr"), ("EMPIRE", "pmonCurrentPID"))
processStartEvent = MibIdentifier((1, 3, 6, 1, 4, 1, 546, 9, 11))
processStartTrap = NotificationType((1, 3, 6, 1, 4, 1, 546, 1, 1) + (0,11)).setObjects(("EMPIRE", "pmonIndex"), ("EMPIRE", "pmonDescr"), ("EMPIRE", "pmonAttribute"), ("EMPIRE", "pmonCurrVal"), ("EMPIRE", "pmonOperator"), ("EMPIRE", "pmonValue"), ("EMPIRE", "pmonFlags"), ("EMPIRE", "pmonRegExpr"), ("EMPIRE", "pmonCurrentPID"))
processThresholdEvent = MibIdentifier((1, 3, 6, 1, 4, 1, 546, 9, 12))
processThresholdTrap = NotificationType((1, 3, 6, 1, 4, 1, 546, 1, 1) + (0,12)).setObjects(("EMPIRE", "pmonIndex"), ("EMPIRE", "pmonDescr"), ("EMPIRE", "pmonAttribute"), ("EMPIRE", "pmonCurrVal"), ("EMPIRE", "pmonOperator"), ("EMPIRE", "pmonValue"), ("EMPIRE", "pmonFlags"), ("EMPIRE", "pmonRegExpr"), ("EMPIRE", "pmonCurrentPID"))
processClearEvent = MibIdentifier((1, 3, 6, 1, 4, 1, 546, 9, 13))
processClearTrap = NotificationType((1, 3, 6, 1, 4, 1, 546, 1, 1) + (0,13)).setObjects(("EMPIRE", "pmonIndex"), ("EMPIRE", "pmonDescr"), ("EMPIRE", "pmonAttribute"), ("EMPIRE", "pmonCurrVal"), ("EMPIRE", "pmonOperator"), ("EMPIRE", "pmonValue"), ("EMPIRE", "pmonFlags"), ("EMPIRE", "pmonRegExpr"), ("EMPIRE", "pmonCurrentPID"))
licenseEvent = MibIdentifier((1, 3, 6, 1, 4, 1, 546, 9, 16))
licenseTrap = NotificationType((1, 3, 6, 1, 4, 1, 546, 1, 1) + (0,16)).setObjects(("EMPIRE", "sysedgeLicenseString"))
fwLogmonEvent = MibIdentifier((1, 3, 6, 1, 4, 1, 546, 9, 17))
addrChangeEvent = MibIdentifier((1, 3, 6, 1, 4, 1, 546, 9, 18))
addrChangeTrap = NotificationType((1, 3, 6, 1, 4, 1, 546, 1, 1) + (0,18)).setObjects(("EMPIRE", "nodename"), ("EMPIRE", "sysedgeAddressList"))
procGroupChangeEvent = MibIdentifier((1, 3, 6, 1, 4, 1, 546, 9, 19))
procGroupChangeTrap = NotificationType((1, 3, 6, 1, 4, 1, 546, 1, 1) + (0,19)).setObjects(("EMPIRE", "pgmonIndex"), ("EMPIRE", "pgmonDescr"), ("EMPIRE", "pgmonFlags"), ("EMPIRE", "pgmonNumProcs"), ("EMPIRE", "pgmonProcRegExpr"), ("EMPIRE", "pgmonRowStatus"), ("EMPIRE", "pgmonPIDList"), ("EMPIRE", "pgmonStatusList"))
mibBuilder.exportSymbols("EMPIRE", diskStatsWrites=diskStatsWrites, ntEventMonSrcLastMatch=ntEventMonSrcLastMatch, pmonRegExpr=pmonRegExpr, cpuStatsUserPercent=cpuStatsUserPercent, pgmonIndex=pgmonIndex, swapCapacity=swapCapacity, cpuStatsSysPercent=cpuStatsSysPercent, ntEventMonFlags=ntEventMonFlags, clientNFSMkdirs=clientNFSMkdirs, ntCopyReadHits=ntCopyReadHits, shmemDel=shmemDel, ntThreadWaitReason=ntThreadWaitReason, extensionPing=extensionPing, processMEM=processMEM, shmemNLcks=shmemNLcks, ntNonPagedPoolSize=ntNonPagedPoolSize, memory=memory, dos=dos, ntEventSystemRetention=ntEventSystemRetention, diskStatsHostmibDevTableIndex=diskStatsHostmibDevTableIndex, userGID=userGID, rootFSType=rootFSType, monSampleType=monSampleType, pgmonNumSwaps=pgmonNumSwaps, maxClist=maxClist, devTableEntry=devTableEntry, mosMod=mosMod, processMinorPgFlts=processMinorPgFlts, logMonitorNumberTraps=logMonitorNumberTraps, freeClusters=freeClusters, sysedgeMode=sysedgeMode, clientRPCTimeouts=clientRPCTimeouts, serverRPCNullrecvs=serverRPCNullrecvs, dnlcEnters=dnlcEnters, fwLogmonEvent=fwLogmonEvent, serverNFSLinks=serverNFSLinks, shmemEntry=shmemEntry, empireHistoryCtrlObjID=empireHistoryCtrlObjID, cpuStatsDescr=cpuStatsDescr, ntSysDriverResidentKBytes=ntSysDriverResidentKBytes, clientNFSNulls=clientNFSNulls, ntClusterIsActive=ntClusterIsActive, logMonMatchEvent=logMonMatchEvent, sqlServer=sqlServer, ntDataMapPins=ntDataMapPins, addrChangeEvent=addrChangeEvent, ntRegistryCurrentSize=ntRegistryCurrentSize, ntPoolPagedKBytes=ntPoolPagedKBytes, empireHistoryTable=empireHistoryTable, ntEventMonIndex=ntEventMonIndex, ntEventMonTable=ntEventMonTable, ntServicePathName=ntServicePathName, ntWindowsAppInitDLLs=ntWindowsAppInitDLLs, ntTransitionFaults=ntTransitionFaults, ntLogEvent=ntLogEvent, logmonUnusedIndex=logmonUnusedIndex, ntAsyncPinReads=ntAsyncPinReads, dnlcLongLooks=dnlcLongLooks, cpuTotalUser=cpuTotalUser, totalSwap=totalSwap, queueUse=queueUse, userEntry=userEntry, ntUserFullScreen=ntUserFullScreen, semKey=semKey, cause=cause, pgmonLastTrap=pgmonLastTrap, ntCacheKBytes=ntCacheKBytes, queKey=queKey, ntCriticalSectTimeout=ntCriticalSectTimeout, dnlcLongEnters=dnlcLongEnters, ntEventMonTypeFilter=ntEventMonTypeFilter, diskStatsReadsStr=diskStatsReadsStr, ntClusterName=ntClusterName, cpu=cpu, pageWaitNum=pageWaitNum, processOutBlks=processOutBlks, numSyscalls=numSyscalls, pageScans=pageScans, serverNFSSetattrs=serverNFSSetattrs, logMonitorLogFile=logMonitorLogFile, dumpName=dumpName, ntSysBiosVersion=ntSysBiosVersion, queueFails=queueFails, ntPagingFiles=ntPagingFiles, diskStatsServiceTime=diskStatsServiceTime, monOID=monOID, virtualMem=virtualMem, pmonUnusedIndex=pmonUnusedIndex, extensionMotd=extensionMotd, serverNFSRemoves=serverNFSRemoves, ntEvents=ntEvents, ntEventMonNotReadyEvent=ntEventMonNotReadyEvent, streams=streams, semMode=semMode, svcRsp=svcRsp, bootconf=bootconf, ntRegistrySizeLimit=ntRegistrySizeLimit, cpuGroup=cpuGroup, ntServiceName=ntServiceName, serverNFSMkdirs=serverNFSMkdirs, ntEventMonDescFilter=ntEventMonDescFilter, ntThreads=ntThreads, monNumTraps=monNumTraps, swapSize=swapSize, type=type, monDescr=monDescr, numClusters=numClusters, ntOverwrite=ntOverwrite, surveyor=surveyor, memCapacity=memCapacity, ntFastReadNotPossible=ntFastReadNotPossible, maxInode=maxInode, rpc=rpc, pgmonStatusList=pgmonStatusList, diskWaitNum=diskWaitNum, logMonitorFlags=logMonitorFlags, cpuTotalUserPercent=cpuTotalUserPercent, pmonNumTraps=pmonNumTraps, pmonAction=pmonAction, totalSwapSpace=totalSwapSpace, empireHistoryCtrlTable=empireHistoryCtrlTable, ntWindowSize=ntWindowSize, ccmmod=ccmmod, shellOutput=shellOutput, ntMDLReadHits=ntMDLReadHits, processGroupMonEntry=processGroupMonEntry, empireHistoryCtrlIndex=empireHistoryCtrlIndex, applications=applications, logMonNotReadyTrap=logMonNotReadyTrap, empireHistoryCtrlStatus=empireHistoryCtrlStatus, ntSysCodeResidentKBytes=ntSysCodeResidentKBytes, domino=domino, ntRunQLen=ntRunQLen, numZombieProcs=numZombieProcs, monitorClearEvent=monitorClearEvent, ntWindowsSpooler=ntWindowsSpooler, processInvolCtx=processInvolCtx, ntClusterMembers=ntClusterMembers, devUnmount=devUnmount, ntCacheKBytesPeak=ntCacheKBytesPeak, whoEntry=whoEntry, cpuStatsSys=cpuStatsSys, ntPoolPagedAllocs=ntPoolPagedAllocs, tag=tag, mblockMaxs=mblockMaxs, ntRegPerfDumpFile=ntRegPerfDumpFile, diskStatsTransfers=diskStatsTransfers, diskGroup=diskGroup, monMatchDescr=monMatchDescr, ntThreadPriorityBase=ntThreadPriorityBase, processClearTrap=processClearTrap, posixJobCtrl=posixJobCtrl, logMonitorLastMatch=logMonitorLastMatch, shmemSegSz=shmemSegSz, devMaxNameLen=devMaxNameLen, queMode=queMode, pgmonRSS=pgmonRSS, pgmonNumProcs=pgmonNumProcs, shellExitStat=shellExitStat, mblockUse=mblockUse, monitorClearTrap=monitorClearTrap, clientRPCCalls=clientRPCCalls, cpuTotalWaitPercent=cpuTotalWaitPercent, strbufs=strbufs, devFblks=devFblks, ntCachePerf=ntCachePerf, semNsems=semNsems, ntFastReadResourceMisses=ntFastReadResourceMisses, ntCommittedKBytes=ntCommittedKBytes, monValue=monValue, diskStatsUtilization=diskStatsUtilization, semGroup=semGroup, groupGID=groupGID, cpuStatsLastUpdate=cpuStatsLastUpdate, logMonitorTable=logMonitorTable, diskStatsLastUpdate=diskStatsLastUpdate, cpuStatsWaitPercent=cpuStatsWaitPercent, diskStatsKBytesTransferred=diskStatsKBytesTransferred, shmemKey=shmemKey, procGroupChangeEvent=procGroupChangeEvent, shellCmd=shellCmd, numDrains=numDrains, ntEventSystemMaxSize=ntEventSystemMaxSize, empireHistoryCtrlBucketsGrant=empireHistoryCtrlBucketsGrant, ntAsyncDataMaps=ntAsyncDataMaps, ntScreenBufferSize=ntScreenBufferSize, ntThreadPID=ntThreadPID, ntLazyWriteFlushes=ntLazyWriteFlushes, shmemID=shmemID, pgmonOutBlks=pgmonOutBlks, strbufAllocFails=strbufAllocFails, numBreadHits=numBreadHits, whoPID=whoPID, serverNFSCalls=serverNFSCalls, groupName=groupName, monitorTrap=monitorTrap, ntEventMonEntry=ntEventMonEntry, sysedgeLicenseKey=sysedgeLicenseKey, streamMaxs=streamMaxs, dnlcLruEmpty=dnlcLruEmpty, ntSysStartOptions=ntSysStartOptions, ntEventSecurityRetention=ntEventSecurityRetention, ntPinReadHits=ntPinReadHits, mbufAllocEntry=mbufAllocEntry, logmonMatchDescr=logmonMatchDescr, devInodeCapacity=devInodeCapacity, seqNum=seqNum, ntEventMonMatchEvent=ntEventMonMatchEvent, processUID=processUID, dnlcHitRate=dnlcHitRate, histCtrlMatchIndex=histCtrlMatchIndex, whoIndex=whoIndex, ntPoolNonPagedAllocs=ntPoolNonPagedAllocs, ntSysCodeTotalKBytes=ntSysCodeTotalKBytes, ntDataMapHits=ntDataMapHits, ntEventMonDescr=ntEventMonDescr, ntPagesInput=ntPagesInput, ntEventMonTraps=ntEventMonTraps, ntEventMonNotReadyTrap=ntEventMonNotReadyTrap, ntQuickEdit=ntQuickEdit, serverNFSRmdirs=serverNFSRmdirs, processTable=processTable, diskStatsXferOpsHi=diskStatsXferOpsHi, ntAsyncMDLReads=ntAsyncMDLReads, ntGlobalFlag=ntGlobalFlag, userUID=userUID, semTable=semTable, logMonitor=logMonitor, numProcs=numProcs, clientNFSWrites=clientNFSWrites, cpuTotalSys=cpuTotalSys, ntSystem=ntSystem, dblockMaxs=dblockMaxs, serverRPCXdrcalls=serverRPCXdrcalls, serverNFSLookups=serverNFSLookups, processSysCalls=processSysCalls, ntPagedPoolSize=ntPagedPoolSize, devBsize=devBsize, remoteShell=remoteShell, serverNFSWrites=serverNFSWrites, pmonMatchDescr=pmonMatchDescr, nt=nt, processClearEvent=processClearEvent, ntReadKBytes=ntReadKBytes, ntServicePackNumber=ntServicePackNumber, processStartEvent=processStartEvent, strbufAllocSize=strbufAllocSize, ntSysCacheResidentKBytes=ntSysCacheResidentKBytes, monInterval=monInterval, sybase=sybase, ntFreeSysPageTableEntries=ntFreeSysPageTableEntries, ntEventMatchDescr=ntEventMatchDescr, userIndex=userIndex, numSwapOuts=numSwapOuts)
mibBuilder.exportSymbols("EMPIRE", ntSystemPages=ntSystemPages, extensionGroup=extensionGroup, sysedgePluginList=sysedgePluginList, ntLargeSystemCache=ntLargeSystemCache, pgmonPIDList=pgmonPIDList, numLRUAllocs=numLRUAllocs, kernelErrorTrap=kernelErrorTrap, streamFails=streamFails, processMonitor=processMonitor, ntCommitLimit=ntCommitLimit, numBreadRequests=numBreadRequests, dnlcCacheSize=dnlcCacheSize, devIndex=devIndex, ntServiceParameters=ntServiceParameters, monAction=monAction, pgmonInBlks=pgmonInBlks, clientNFSRenames=clientNFSRenames, pmonMaxValue=pmonMaxValue, ntWowCmdline=ntWowCmdline, processMsgsRecv=processMsgsRecv, empireHistoryValue=empireHistoryValue, msgqueTable=msgqueTable, dnlcHits=dnlcHits, pmonMatchIndex=pmonMatchIndex, cpuStatsUser=cpuStatsUser, numPageIns=numPageIns, clientNFSRemoves=clientNFSRemoves, semDel=semDel, processMonTable=processMonTable, processTime=processTime, maxMemPerProc=maxMemPerProc, pgmonMinorPgFlts=pgmonMinorPgFlts, processName=processName, ntWindowsSwapDisk=ntWindowsSwapDisk, sleepActive=sleepActive, diskStatsEntry=diskStatsEntry, ntReadOps=ntReadOps, empireHistorySampleIndex=empireHistorySampleIndex, logMonitorLogFileSize=logMonitorLogFileSize, ntThreadPrivTime=ntThreadPrivTime, ntLazyWritePages=ntLazyWritePages, cpuStatsIdlePercent=cpuStatsIdlePercent, errDelete=errDelete, ntEventMonDescLastMatch=ntEventMonDescLastMatch, ntLPTTimeout=ntLPTTimeout, pmonInterval=pmonInterval, level=level, histCtrlUnusedIndex=histCtrlUnusedIndex, clientRPCRetrans=clientRPCRetrans, ntEventApplicationMaxSize=ntEventApplicationMaxSize, processParentPID=processParentPID, ntBuildNumber=ntBuildNumber, pgmonCPUSecs=pgmonCPUSecs, ntThreadContextSwitches=ntThreadContextSwitches, dnlcMisses=dnlcMisses, cpuTotalWait=cpuTotalWait, ntSystemPerf=ntSystemPerf, shmemOwner=shmemOwner, pgmonMatchDescr=pgmonMatchDescr, ntCmdlineOptions=ntCmdlineOptions, numOpenFiles=numOpenFiles, ntWriteOps=ntWriteOps, ntEventMonMatches=ntEventMonMatches, clientNFSReaddirs=clientNFSReaddirs, empireHistoryIndex=empireHistoryIndex, strbufAllocIndex=strbufAllocIndex, ntSystemCalls=ntSystemCalls, addrChangeTrap=addrChangeTrap, empireHistorySampleTime=empireHistorySampleTime, msgqueEntry=msgqueEntry, queNMesg=queNMesg, pgmonSysCalls=pgmonSysCalls, strbufAllocMaxs=strbufAllocMaxs, userName=userName, userPasswd=userPasswd, ntAsyncFastReads=ntAsyncFastReads, ntEventSecurityMaxSize=ntEventSecurityMaxSize, systemEdgeUptime=systemEdgeUptime, logmonMatchIndex=logmonMatchIndex, diskStatsReads=diskStatsReads, ntSyncDataMaps=ntSyncDataMaps, cpuTotalSysPercent=cpuTotalSysPercent, empireHistoryCtrlInterval=empireHistoryCtrlInterval, pmonDescr=pmonDescr, pgmonRowStatus=pgmonRowStatus, ntEventApplicationRetention=ntEventApplicationRetention, swapFSType=swapFSType, nis=nis, numCPU=numCPU, oracledb=oracledb, logMonMatchTrap=logMonMatchTrap, numMbufs=numMbufs, mbufAllocTable=mbufAllocTable, pmonIndex=pmonIndex, processGID=processGID, empireHistoryCtrlBucketsReq=empireHistoryCtrlBucketsReq, ntThreadStartAddr=ntThreadStartAddr, processGroupMonTable=processGroupMonTable, processStartTrap=processStartTrap, numBufSleeps=numBufSleeps, pmonLastCall=pmonLastCall, strbufAllocTable=strbufAllocTable, pgmonInterval=pgmonInterval, serverNFSWrcaches=serverNFSWrcaches, processSize=processSize, ntClusterActiveNode=ntClusterActiveNode, ntThreadTable=ntThreadTable, logMonitorRegularExpression=logMonitorRegularExpression, pgmonMatchUser=pgmonMatchUser, rootBlocks=rootBlocks, processNice=processNice, module=module, ntPageFilePerf=ntPageFilePerf, clientRPCTimers=clientRPCTimers, nfs=nfs, processRSS=processRSS, pageSize=pageSize, ntSysDriverTotalKBytes=ntSysDriverTotalKBytes, ntEventSystemCount=ntEventSystemCount, ntBuildType=ntBuildType, clientNFSGetattrs=clientNFSGetattrs, mid=mid, serverNFSNulls=serverNFSNulls, devTable=devTable, ntEventApplicationCount=ntEventApplicationCount, streamUse=streamUse, pgmonNumTraps=pgmonNumTraps, empireHistoryCtrlLastCall=empireHistoryCtrlLastCall, serverNFSBadcalls=serverNFSBadcalls, processStopEvent=processStopEvent, kernelperf=kernelperf, maxNumPush=maxNumPush, empireHistory=empireHistory, numAllocBuf=numAllocBuf, ntThreadProcTime=ntThreadProcTime, userTable=userTable, mblockFails=mblockFails, logMonitorLastTrap=logMonitorLastTrap, processMonEntry=processMonEntry, pgmonThreadCount=pgmonThreadCount, distribsys=distribsys, ioBufferHitRate=ioBufferHitRate, clientNFSReadlinks=clientNFSReadlinks, pgmonUnusedIndex=pgmonUnusedIndex, ntServiceStartType=ntServiceStartType, ntWriteKBytes=ntWriteKBytes, ntSystemRoot=ntSystemRoot, ntPageFileUsage=ntPageFileUsage, pgmonMEM=pgmonMEM, ntSyncPinReads=ntSyncPinReads, processID=processID, cpuStatsIndex=cpuStatsIndex, numSwapIns=numSwapIns, errorEntry=errorEntry, clientRPCNewcreds=clientRPCNewcreds, osrel=osrel, numInterrupts=numInterrupts, pgmonAction=pgmonAction, ioBufferCache=ioBufferCache, numPageReclaims=numPageReclaims, processNumThreads=processNumThreads, performance=performance, clientNFSCalls=clientNFSCalls, ntDataMaps=ntDataMaps, sysedgeAddressList=sysedgeAddressList, topProcs=topProcs, ntTotalProcessorTime=ntTotalProcessorTime, userHomeDir=userHomeDir, devTblks=devTblks, numPageSwapIns=numPageSwapIns, serverNFSRoots=serverNFSRoots, pmonAttribute=pmonAttribute, strbufAllocEntry=strbufAllocEntry, pgmonProcRegExpr=pgmonProcRegExpr, serverNFSGetattrs=serverNFSGetattrs, logMonitorDescr=logMonitorDescr, mbufType=mbufType, diskStatsWritesHi=diskStatsWritesHi, whoWhere=whoWhere, queID=queID, pmonValue=pmonValue, maxProcs=maxProcs, clientNFSReads=clientNFSReads, ntEventMonLog=ntEventMonLog, monitorTable=monitorTable, clientRPCBadxids=clientRPCBadxids, romVersion=romVersion, devFfiles=devFfiles, ntEventMatchIndex=ntEventMatchIndex, logMonitorLogFileLastUpdate=logMonitorLogFileLastUpdate, diskStatsTable=diskStatsTable, ntThreadEntry=ntThreadEntry, firewall=firewall, ntAlignFixups=ntAlignFixups, ntContextSwitches=ntContextSwitches, cpuStatsIdle=cpuStatsIdle, loadAverage1Min=loadAverage1Min, maxmsgSize=maxmsgSize, pgmonMatchIndex=pgmonMatchIndex, queOwner=queOwner, processEntry=processEntry, pgmonInvolCtx=pgmonInvolCtx, pgmonVolCtx=pgmonVolCtx, empireexp=empireexp, monLastCall=monLastCall, licenseEvent=licenseEvent, kernelConfig=kernelConfig, numWaits=numWaits, ntWin31FileSystem=ntWin31FileSystem, pmonMinValue=pmonMinValue, devFsid=devFsid, userLoginID=userLoginID, ntThreadPriority=ntThreadPriority, clientRPCWaits=clientRPCWaits, logMonitorMatches=logMonitorMatches, minNumBufHdrs=minNumBufHdrs, clientRPCBadcalls=clientRPCBadcalls, serverNFSReads=serverNFSReads, monitor=monitor, shmemGroup=shmemGroup, ntOptionalSubsystem=ntOptionalSubsystem, whoTime=whoTime, ntEventSecurityCount=ntEventSecurityCount, mbufAlloc=mbufAlloc, ntServiceEntry=ntServiceEntry, numDrops=numDrops, ntAvailKBytes=ntAvailKBytes, monitorEntry=monitorEntry, clientNFSRmdirs=clientNFSRmdirs, ntEventMonTime=ntEventMonTime, ntAsyncCopyReads=ntAsyncCopyReads, licenseTrap=licenseTrap, ntEventMonTypeLastMatch=ntEventMonTypeLastMatch, ntMemoryPerf=ntMemoryPerf, msExchange=msExchange, osver=osver, ntEventMonAction=ntEventMonAction, ntEventMonMatchTrap=ntEventMonMatchTrap, clientNFSNclsleeps=clientNFSNclsleeps, processFlags=processFlags, ntHistoryBufferSize=ntHistoryBufferSize, processArgs=processArgs, processMajorPgFlts=processMajorPgFlts, semEntry=semEntry, sid=sid, ntFastReads=ntFastReads, ntPagesOutput=ntPagesOutput, memInUse=memInUse, shmemMode=shmemMode, cpuStatsEntry=cpuStatsEntry, monitorEntryNotReadyEvent=monitorEntryNotReadyEvent, ntExceptionDispatches=ntExceptionDispatches, ntEventMonStatus=ntEventMonStatus, ntSyncMDLReads=ntSyncMDLReads)
mibBuilder.exportSymbols("EMPIRE", swapActive=swapActive, ntFileCtrlOps=ntFileCtrlOps, devFstr=devFstr, ntThreadUserTime=ntThreadUserTime, kernelVers=kernelVers, queDel=queDel, pmonFlags=pmonFlags, procGroupChangeTrap=procGroupChangeTrap, ntSysBiosDate=ntSysBiosDate, groupPasswd=groupPasswd, empireHistoryCtrlObjType=empireHistoryCtrlObjType, traps=traps, clientNFSFsstats=clientNFSFsstats, ntTotalPrivTime=ntTotalPrivTime, strbufAllocTotals=strbufAllocTotals, ntPerformance=ntPerformance, processStateStr=processStateStr, dblockUse=dblockUse, ntWorkstationOrServer=ntWorkstationOrServer, ntIoPageLockLimit=ntIoPageLockLimit, devCapacity=devCapacity, wordSize=wordSize, logMonitorAction=logMonitorAction, processInBlks=processInBlks, buffers=buffers, dumpFSType=dumpFSType, dirmwp=dirmwp, ntPages=ntPages, diskStatsQueueLength=diskStatsQueueLength, ntEventMonSrcFilter=ntEventMonSrcFilter, os2=os2, numMuxLinks=numMuxLinks, custom=custom, monIndex=monIndex, devDevice=devDevice, serverRPCCalls=serverRPCCalls, ntServiceIndex=ntServiceIndex, systemType=systemType, ntSystemVersion=ntSystemVersion, ntCacheFaults=ntCacheFaults, windows=windows, ntPageFilePeakUsage=ntPageFilePeakUsage, semOwner=semOwner, serverRPCBadlens=serverRPCBadlens, pmonNumEvents=pmonNumEvents, monMatchIndex=monMatchIndex, ntNumberHistoryBuffers=ntNumberHistoryBuffers, ntServiceState=ntServiceState, sysedgeInstallDir=sysedgeInstallDir, sysmgmt=sysmgmt, monRowStatus=monRowStatus, serverNFSRenames=serverNFSRenames, swapInUse=swapInUse, processKill=processKill, maxFiles=maxFiles, cpuTotalIdlePercent=cpuTotalIdlePercent, empireHistoryCtrlEntry=empireHistoryCtrlEntry, ntPagedResidentKBytes=ntPagedResidentKBytes, pgmonMajorPgFlts=pgmonMajorPgFlts, ntMDLReads=ntMDLReads, numTraps=numTraps, pgmonMsgsRecv=pgmonMsgsRecv, numSwitches=numSwitches, queNBytes=queNBytes, ntRegNumberOfThreads=ntRegNumberOfThreads, ntThreadElapsedTime=ntThreadElapsedTime, groupEntry=groupEntry, processThresholdEvent=processThresholdEvent, empireHistoryStartTime=empireHistoryStartTime, ntPoolNonPagedKBytes=ntPoolNonPagedKBytes, numPageOuts=numPageOuts, siebelmod=siebelmod, cpuTotalLastUpdate=cpuTotalLastUpdate, dnlc=dnlc, queueMaxs=queueMaxs, testplugin=testplugin, clientNFSNclgets=clientNFSNclgets, groupIndex=groupIndex, semID=semID, diskStatsKBytesXferStr=diskStatsKBytesXferStr, monUnusedIndex=monUnusedIndex, sysedgeConfProfile=sysedgeConfProfile, processMsgsSent=processMsgsSent, loadAverage15Min=loadAverage15Min, sysedgeFQDN=sysedgeFQDN, numPageFaults=numPageFaults, nodename=nodename, memInUseCapacity=memInUseCapacity, strbufAllocCurrent=strbufAllocCurrent, ntEventUnusedIndex=ntEventUnusedIndex, posixVersion=posixVersion, ntServiceTable=ntServiceTable, clientNFSWrcaches=clientNFSWrcaches, clientNFSCreates=clientNFSCreates, logMonitorIndex=logMonitorIndex, ntDosMemSize=ntDosMemSize, ntWowSize=ntWowSize, queGroup=queGroup, ntThreadNumber=ntThreadNumber, devTfiles=devTfiles, rootName=rootName, monOperator=monOperator, monLastTrap=monLastTrap, swapName=swapName, ntPageReads=ntPageReads, ntDataFlushPages=ntDataFlushPages, whoTable=whoTable, dnlcPurges=dnlcPurges, ntFloatEmuls=ntFloatEmuls, logMonitorEntry=logMonitorEntry, ntRegistry=ntRegistry, ntInterrupts=ntInterrupts, devType=devType, ntFileCtrlKBytes=ntFileCtrlKBytes, activeMem=activeMem, serverNFSCreates=serverNFSCreates, ntSyncFastReads=ntSyncFastReads, msIIS=msIIS, processStopTrap=processStopTrap, pgmonSize=pgmonSize, ntServices=ntServices, kernelErrorEvent=kernelErrorEvent, ntDemandZeroFaults=ntDemandZeroFaults, openMaxPerProc=openMaxPerProc, empireHistoryCtrlDescr=empireHistoryCtrlDescr, extensionNisServer=extensionNisServer, processVolCtx=processVolCtx, ntSyncCopyReads=ntSyncCopyReads, processStateInt=processStateInt, errorTable=errorTable, mbufs=mbufs, serialNumber=serialNumber, empireHistoryCtrlCreateTime=empireHistoryCtrlCreateTime, serverNFSSymlinks=serverNFSSymlinks, cpuTotalIdle=cpuTotalIdle, clientNFSBadcalls=clientNFSBadcalls, monFlags=monFlags, processState=processState, processStartTime=processStartTime, severity=severity, clientNFSRoots=clientNFSRoots, diskStatsTransfersStr=diskStatsTransfersStr, cpuStatsWait=cpuStatsWait, ntThreadState=ntThreadState, agentVersion=agentVersion, ntThreadID=ntThreadID, ntFileDataOps=ntFileDataOps, ntTotalUserTime=ntTotalUserTime, empireHistoryEntry=empireHistoryEntry, ntPageWrites=ntPageWrites, time=time, ntWriteCopies=ntWriteCopies, histCtrlMatchDescr=histCtrlMatchDescr, processNumSwaps=processNumSwaps, pmonOperator=pmonOperator, ntPinReads=ntPinReads, monitorEntryNotReadyTrap=monitorEntryNotReadyTrap, logMonNotReadyEvent=logMonNotReadyEvent, ntCopyReads=ntCopyReads, ntWindowsXmitRetryTimeout=ntWindowsXmitRetryTimeout, pgmonDescr=pgmonDescr, sendTrapEvent=sendTrapEvent, pgmonFlags=pgmonFlags, clientNFSSymlinks=clientNFSSymlinks, mbufDesc=mbufDesc, serverNFSReaddirs=serverNFSReaddirs, clockHZ=clockHZ, pgmonMatchGroup=pgmonMatchGroup, serverNFSReadlinks=serverNFSReadlinks, shmemTable=shmemTable, diskStatsReadsHi=diskStatsReadsHi, serverNFSFsstats=serverNFSFsstats, empire=empire, hostid=hostid, ipc=ipc, loadAverage5Min=loadAverage5Min, ntIsClustered=ntIsClustered, whoDevice=whoDevice, numAgeAllocs=numAgeAllocs, serverRPCBadcalls=serverRPCBadcalls, sysedgeLicenseString=sysedgeLicenseString, ntRegPerf=ntRegPerf, dnlcDblEnters=dnlcDblEnters, clientNFSLookups=clientNFSLookups, ntSendAlert=ntSendAlert, processThresholdTrap=processThresholdTrap, dumpBlocks=dumpBlocks, numPageSwapOuts=numPageSwapOuts, apacheSrv=apacheSrv, whoName=whoName, dblockFails=dblockFails, devMntPt=devMntPt, monMinValue=monMinValue, subSysmsg=subSysmsg, ntfsDisable8dot3NameCreation=ntfsDisable8dot3NameCreation, diskStatsIndex=diskStatsIndex, ntWindowsDeviceNotSelectedTimeout=ntWindowsDeviceNotSelectedTimeout, pmonRowStatus=pmonRowStatus, pmonLastTrap=pmonLastTrap, groupTable=groupTable, cpuStatsTable=cpuStatsTable, diskStatsKBytesXferHi=diskStatsKBytesXferHi, monCurrVal=monCurrVal, pmonCurrentPID=pmonCurrentPID, monMaxValue=monMaxValue, unix=unix, pmonCurrVal=pmonCurrVal, ntServiceObjectName=ntServiceObjectName, pgmonMsgsSent=pgmonMsgsSent, systemTimeZone=systemTimeZone, ntPageFaults=ntPageFaults, diskStatsWritesStr=diskStatsWritesStr, ntCrashDumpEnabled=ntCrashDumpEnabled, clientNFSSetattrs=clientNFSSetattrs, runQLen=runQLen, ntDataFlushes=ntDataFlushes, pmonSampleType=pmonSampleType, clientNFSLinks=clientNFSLinks, monitorEvent=monitorEvent, extensionDomainName=extensionDomainName, logMonitorStatus=logMonitorStatus, pgmonNumEvents=pgmonNumEvents, ntVideoResolution=ntVideoResolution, system=system, shellOutputContents=shellOutputContents, userShell=userShell)
