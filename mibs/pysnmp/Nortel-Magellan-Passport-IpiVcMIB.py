#
# PySNMP MIB module Nortel-Magellan-Passport-IpiVcMIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/Nortel-Magellan-Passport-IpiVcMIB
# Produced by pysmi-0.3.4 at Mon Apr 29 20:18:13 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, OctetString, Integer = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "OctetString", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsIntersection, SingleValueConstraint, ValueSizeConstraint, ValueRangeConstraint, ConstraintsUnion = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsIntersection", "SingleValueConstraint", "ValueSizeConstraint", "ValueRangeConstraint", "ConstraintsUnion")
Integer32, StorageType, Counter32, RowStatus, Unsigned32, DisplayString = mibBuilder.importSymbols("Nortel-Magellan-Passport-StandardTextualConventionsMIB", "Integer32", "StorageType", "Counter32", "RowStatus", "Unsigned32", "DisplayString")
EnterpriseDateAndTime, Hex, NonReplicated, DigitString = mibBuilder.importSymbols("Nortel-Magellan-Passport-TextualConventionsMIB", "EnterpriseDateAndTime", "Hex", "NonReplicated", "DigitString")
components, passportMIBs = mibBuilder.importSymbols("Nortel-Magellan-Passport-UsefulDefinitionsMIB", "components", "passportMIBs")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
TimeTicks, Integer32, Unsigned32, iso, NotificationType, IpAddress, Counter32, ModuleIdentity, ObjectIdentity, MibIdentifier, Counter64, Gauge32, MibScalar, MibTable, MibTableRow, MibTableColumn, Bits = mibBuilder.importSymbols("SNMPv2-SMI", "TimeTicks", "Integer32", "Unsigned32", "iso", "NotificationType", "IpAddress", "Counter32", "ModuleIdentity", "ObjectIdentity", "MibIdentifier", "Counter64", "Gauge32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Bits")
TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString")
ipiVcMIB = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 2, 4, 2, 53))
ipivc = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 51))
ipivcRowStatusTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 51, 1), )
if mibBuilder.loadTexts: ipivcRowStatusTable.setStatus('mandatory')
ipivcRowStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 51, 1, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-IpiVcMIB", "ipivcIndex"))
if mibBuilder.loadTexts: ipivcRowStatusEntry.setStatus('mandatory')
ipivcRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 51, 1, 1, 1), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipivcRowStatus.setStatus('mandatory')
ipivcComponentName = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 51, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipivcComponentName.setStatus('mandatory')
ipivcStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 51, 1, 1, 4), StorageType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipivcStorageType.setStatus('mandatory')
ipivcIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 51, 1, 1, 10), NonReplicated())
if mibBuilder.loadTexts: ipivcIndex.setStatus('mandatory')
ipivcProvTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 51, 10), )
if mibBuilder.loadTexts: ipivcProvTable.setStatus('mandatory')
ipivcProvEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 51, 10, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-IpiVcMIB", "ipivcIndex"))
if mibBuilder.loadTexts: ipivcProvEntry.setStatus('mandatory')
ipivcIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 51, 10, 1, 1), IpAddress().clone(hexValue="00000000")).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipivcIpAddress.setStatus('mandatory')
ipivcMaximumNumberOfLcn = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 51, 10, 1, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(24, 24)).clone(24)).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipivcMaximumNumberOfLcn.setStatus('mandatory')
ipivcDna = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 51, 2))
ipivcDnaRowStatusTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 51, 2, 1), )
if mibBuilder.loadTexts: ipivcDnaRowStatusTable.setStatus('mandatory')
ipivcDnaRowStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 51, 2, 1, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-IpiVcMIB", "ipivcIndex"), (0, "Nortel-Magellan-Passport-IpiVcMIB", "ipivcDnaIndex"))
if mibBuilder.loadTexts: ipivcDnaRowStatusEntry.setStatus('mandatory')
ipivcDnaRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 51, 2, 1, 1, 1), RowStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipivcDnaRowStatus.setStatus('mandatory')
ipivcDnaComponentName = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 51, 2, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipivcDnaComponentName.setStatus('mandatory')
ipivcDnaStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 51, 2, 1, 1, 4), StorageType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipivcDnaStorageType.setStatus('mandatory')
ipivcDnaIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 51, 2, 1, 1, 10), NonReplicated())
if mibBuilder.loadTexts: ipivcDnaIndex.setStatus('mandatory')
ipivcDnaAddressTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 51, 2, 10), )
if mibBuilder.loadTexts: ipivcDnaAddressTable.setStatus('mandatory')
ipivcDnaAddressEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 51, 2, 10, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-IpiVcMIB", "ipivcIndex"), (0, "Nortel-Magellan-Passport-IpiVcMIB", "ipivcDnaIndex"))
if mibBuilder.loadTexts: ipivcDnaAddressEntry.setStatus('mandatory')
ipivcDnaNumberingPlanIndicator = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 51, 2, 10, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("x121", 0), ("e164", 1))).clone('x121')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipivcDnaNumberingPlanIndicator.setStatus('mandatory')
ipivcDnaDataNetworkAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 51, 2, 10, 1, 2), DigitString().subtype(subtypeSpec=ValueSizeConstraint(1, 15))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipivcDnaDataNetworkAddress.setStatus('mandatory')
ipivcDnaOutgoingOptionsTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 51, 2, 11), )
if mibBuilder.loadTexts: ipivcDnaOutgoingOptionsTable.setStatus('mandatory')
ipivcDnaOutgoingOptionsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 51, 2, 11, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-IpiVcMIB", "ipivcIndex"), (0, "Nortel-Magellan-Passport-IpiVcMIB", "ipivcDnaIndex"))
if mibBuilder.loadTexts: ipivcDnaOutgoingOptionsEntry.setStatus('mandatory')
ipivcDnaOutCalls = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 51, 2, 11, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disallowed", 0), ("allowed", 1))).clone('disallowed')).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipivcDnaOutCalls.setStatus('mandatory')
ipivcDnaOutDefaultPathSensitivity = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 51, 2, 11, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("throughput", 0), ("delay", 1))).clone('throughput')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipivcDnaOutDefaultPathSensitivity.setStatus('obsolete')
ipivcDnaOutPathSensitivityOverRide = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 51, 2, 11, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("no", 0), ("yes", 1))).clone('no')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipivcDnaOutPathSensitivityOverRide.setStatus('obsolete')
ipivcDnaDefaultTransferPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 51, 2, 11, 1, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 9))).clone(namedValues=NamedValues(("normal", 0), ("high", 9))).clone('normal')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipivcDnaDefaultTransferPriority.setStatus('mandatory')
ipivcDnaTransferPriorityOverRide = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 51, 2, 11, 1, 19), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("no", 0), ("yes", 1))).clone('no')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipivcDnaTransferPriorityOverRide.setStatus('mandatory')
ipivcDnaIncomingOptionsTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 51, 2, 12), )
if mibBuilder.loadTexts: ipivcDnaIncomingOptionsTable.setStatus('mandatory')
ipivcDnaIncomingOptionsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 51, 2, 12, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-IpiVcMIB", "ipivcIndex"), (0, "Nortel-Magellan-Passport-IpiVcMIB", "ipivcDnaIndex"))
if mibBuilder.loadTexts: ipivcDnaIncomingOptionsEntry.setStatus('mandatory')
ipivcDnaIncCalls = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 51, 2, 12, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disallowed", 0), ("allowed", 1))).clone('allowed')).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipivcDnaIncCalls.setStatus('mandatory')
ipivcDnaIncHighPriorityReverseCharge = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 51, 2, 12, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disallowed", 0), ("allowed", 1))).clone('allowed')).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipivcDnaIncHighPriorityReverseCharge.setStatus('mandatory')
ipivcDnaIncNormalPriorityReverseCharge = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 51, 2, 12, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disallowed", 0), ("allowed", 1))).clone('allowed')).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipivcDnaIncNormalPriorityReverseCharge.setStatus('mandatory')
ipivcDnaIncIntlNormalCharge = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 51, 2, 12, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disallowed", 0), ("allowed", 1))).clone('allowed')).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipivcDnaIncIntlNormalCharge.setStatus('mandatory')
ipivcDnaIncIntlReverseCharge = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 51, 2, 12, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disallowed", 0), ("allowed", 1))).clone('allowed')).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipivcDnaIncIntlReverseCharge.setStatus('mandatory')
ipivcDnaIncFastSelect = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 51, 2, 12, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disallowed", 0), ("allowed", 1))).clone('disallowed')).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipivcDnaIncFastSelect.setStatus('mandatory')
ipivcDnaIncSameService = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 51, 2, 12, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disallowed", 0), ("allowed", 1))).clone('allowed')).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipivcDnaIncSameService.setStatus('mandatory')
ipivcDnaIncChargeTransfer = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 51, 2, 12, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("no", 0), ("yes", 1))).clone('no')).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipivcDnaIncChargeTransfer.setStatus('mandatory')
ipivcDnaIncAccess = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 51, 2, 12, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disallowed", 0), ("allowed", 1))).clone('disallowed')).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipivcDnaIncAccess.setStatus('mandatory')
ipivcDnaCallOptionsTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 51, 2, 13), )
if mibBuilder.loadTexts: ipivcDnaCallOptionsTable.setStatus('mandatory')
ipivcDnaCallOptionsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 51, 2, 13, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-IpiVcMIB", "ipivcIndex"), (0, "Nortel-Magellan-Passport-IpiVcMIB", "ipivcDnaIndex"))
if mibBuilder.loadTexts: ipivcDnaCallOptionsEntry.setStatus('mandatory')
ipivcDnaServiceCategory = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 51, 2, 13, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 13, 14, 15, 16, 20, 21, 22, 23, 24, 25, 26, 28, 29, 30, 31))).clone(namedValues=NamedValues(("gsp", 0), ("x25", 1), ("enhancedIti", 2), ("ncs", 3), ("mlti", 4), ("sm", 5), ("ici", 6), ("dsp3270", 7), ("iam", 8), ("mlhi", 9), ("term3270", 10), ("iti", 11), ("bsi", 13), ("hostIti", 14), ("x75", 15), ("hdsp3270", 16), ("api3201", 20), ("sdlc", 21), ("snaMultiHost", 22), ("redirectionServ", 23), ("trSnaTpad", 24), ("offnetNui", 25), ("gasServer", 26), ("vapServer", 28), ("vapAgent", 29), ("frameRelay", 30), ("ipiVc", 31))).clone('ipiVc')).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipivcDnaServiceCategory.setStatus('mandatory')
ipivcDnaPacketSizes = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 51, 2, 13, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(2, 2)).setFixedLength(2).clone(hexValue="0100")).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipivcDnaPacketSizes.setStatus('mandatory')
ipivcDnaDefaultRecvFrmNetworkPacketSize = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 51, 2, 13, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(4, 5, 6, 7, 8, 9, 10, 11, 12))).clone(namedValues=NamedValues(("n16", 4), ("n32", 5), ("n64", 6), ("n128", 7), ("n256", 8), ("n512", 9), ("n1024", 10), ("n2048", 11), ("n4096", 12))).clone('n2048')).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipivcDnaDefaultRecvFrmNetworkPacketSize.setStatus('mandatory')
ipivcDnaDefaultSendToNetworkPacketSize = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 51, 2, 13, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(4, 5, 6, 7, 8, 9, 10, 11, 12))).clone(namedValues=NamedValues(("n16", 4), ("n32", 5), ("n64", 6), ("n128", 7), ("n256", 8), ("n512", 9), ("n1024", 10), ("n2048", 11), ("n4096", 12))).clone('n2048')).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipivcDnaDefaultSendToNetworkPacketSize.setStatus('mandatory')
ipivcDnaDefaultRecvFrmNetworkThruputClass = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 51, 2, 13, 1, 5), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 15)).clone(10)).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipivcDnaDefaultRecvFrmNetworkThruputClass.setStatus('mandatory')
ipivcDnaDefaultSendToNetworkThruputClass = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 51, 2, 13, 1, 6), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 15)).clone(10)).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipivcDnaDefaultSendToNetworkThruputClass.setStatus('mandatory')
ipivcDnaDefaultRecvFrmNetworkWindowSize = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 51, 2, 13, 1, 7), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 7)).clone(2)).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipivcDnaDefaultRecvFrmNetworkWindowSize.setStatus('mandatory')
ipivcDnaDefaultSendToNetworkWindowSize = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 51, 2, 13, 1, 8), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 7)).clone(2)).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipivcDnaDefaultSendToNetworkWindowSize.setStatus('mandatory')
ipivcDnaPacketSizeNegotiation = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 51, 2, 13, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("endToEnd", 0), ("local", 1))).clone('local')).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipivcDnaPacketSizeNegotiation.setStatus('mandatory')
ipivcDnaAccountClass = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 51, 2, 13, 1, 10), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipivcDnaAccountClass.setStatus('mandatory')
ipivcDnaServiceExchange = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 51, 2, 13, 1, 12), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipivcDnaServiceExchange.setStatus('mandatory')
ipivcDnaCugFormat = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 51, 2, 13, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("basic", 0), ("extended", 1))).clone('basic')).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipivcDnaCugFormat.setStatus('mandatory')
ipivcDnaCug0AsNonCugCall = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 51, 2, 13, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disallowed", 0), ("allowed", 1))).clone('disallowed')).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipivcDnaCug0AsNonCugCall.setStatus('mandatory')
ipivcDnaFastSelectCallsOnly = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 51, 2, 13, 1, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("no", 0), ("yes", 1))).clone('no')).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipivcDnaFastSelectCallsOnly.setStatus('mandatory')
ipivcDnaCug = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 51, 2, 2))
ipivcDnaCugRowStatusTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 51, 2, 2, 1), )
if mibBuilder.loadTexts: ipivcDnaCugRowStatusTable.setStatus('mandatory')
ipivcDnaCugRowStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 51, 2, 2, 1, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-IpiVcMIB", "ipivcIndex"), (0, "Nortel-Magellan-Passport-IpiVcMIB", "ipivcDnaIndex"), (0, "Nortel-Magellan-Passport-IpiVcMIB", "ipivcDnaCugIndex"))
if mibBuilder.loadTexts: ipivcDnaCugRowStatusEntry.setStatus('mandatory')
ipivcDnaCugRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 51, 2, 2, 1, 1, 1), RowStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipivcDnaCugRowStatus.setStatus('mandatory')
ipivcDnaCugComponentName = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 51, 2, 2, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipivcDnaCugComponentName.setStatus('mandatory')
ipivcDnaCugStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 51, 2, 2, 1, 1, 4), StorageType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipivcDnaCugStorageType.setStatus('mandatory')
ipivcDnaCugIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 51, 2, 2, 1, 1, 10), NonReplicated())
if mibBuilder.loadTexts: ipivcDnaCugIndex.setStatus('mandatory')
ipivcDnaCugCugOptionsTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 51, 2, 2, 10), )
if mibBuilder.loadTexts: ipivcDnaCugCugOptionsTable.setStatus('mandatory')
ipivcDnaCugCugOptionsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 51, 2, 2, 10, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-IpiVcMIB", "ipivcIndex"), (0, "Nortel-Magellan-Passport-IpiVcMIB", "ipivcDnaIndex"), (0, "Nortel-Magellan-Passport-IpiVcMIB", "ipivcDnaCugIndex"))
if mibBuilder.loadTexts: ipivcDnaCugCugOptionsEntry.setStatus('mandatory')
ipivcDnaCugType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 51, 2, 2, 10, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("national", 0), ("international", 1))).clone('national')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipivcDnaCugType.setStatus('mandatory')
ipivcDnaCugDnic = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 51, 2, 2, 10, 1, 2), DigitString().subtype(subtypeSpec=ValueSizeConstraint(4, 4)).setFixedLength(4).clone(hexValue="30303030")).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipivcDnaCugDnic.setStatus('mandatory')
ipivcDnaCugInterlockCode = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 51, 2, 2, 10, 1, 3), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipivcDnaCugInterlockCode.setStatus('mandatory')
ipivcDnaCugOutCalls = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 51, 2, 2, 10, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disallowed", 0), ("allowed", 1))).clone('disallowed')).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipivcDnaCugOutCalls.setStatus('mandatory')
ipivcDnaCugIncCalls = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 51, 2, 2, 10, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disallowed", 0), ("allowed", 1))).clone('allowed')).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipivcDnaCugIncCalls.setStatus('mandatory')
ipivcDnaCugPrivileged = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 51, 2, 2, 10, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("no", 0), ("yes", 1))).clone('yes')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipivcDnaCugPrivileged.setStatus('mandatory')
ipivcDr = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 51, 3))
ipivcDrRowStatusTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 51, 3, 1), )
if mibBuilder.loadTexts: ipivcDrRowStatusTable.setStatus('mandatory')
ipivcDrRowStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 51, 3, 1, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-IpiVcMIB", "ipivcIndex"), (0, "Nortel-Magellan-Passport-IpiVcMIB", "ipivcDrIndex"))
if mibBuilder.loadTexts: ipivcDrRowStatusEntry.setStatus('mandatory')
ipivcDrRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 51, 3, 1, 1, 1), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipivcDrRowStatus.setStatus('mandatory')
ipivcDrComponentName = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 51, 3, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipivcDrComponentName.setStatus('mandatory')
ipivcDrStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 51, 3, 1, 1, 4), StorageType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipivcDrStorageType.setStatus('mandatory')
ipivcDrIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 51, 3, 1, 1, 10), NonReplicated())
if mibBuilder.loadTexts: ipivcDrIndex.setStatus('mandatory')
ipivcDrProvTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 51, 3, 10), )
if mibBuilder.loadTexts: ipivcDrProvTable.setStatus('mandatory')
ipivcDrProvEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 51, 3, 10, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-IpiVcMIB", "ipivcIndex"), (0, "Nortel-Magellan-Passport-IpiVcMIB", "ipivcDrIndex"))
if mibBuilder.loadTexts: ipivcDrProvEntry.setStatus('mandatory')
ipivcDrCallingIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 51, 3, 10, 1, 1), IpAddress().clone(hexValue="00000000")).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipivcDrCallingIpAddress.setStatus('mandatory')
ipivcDrCallingNumberingPlanIndicator = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 51, 3, 10, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("x121", 0), ("e164", 1))).clone('x121')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipivcDrCallingNumberingPlanIndicator.setStatus('mandatory')
ipivcDrCallingDataNetworkAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 51, 3, 10, 1, 3), DigitString().subtype(subtypeSpec=ValueSizeConstraint(1, 15))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipivcDrCallingDataNetworkAddress.setStatus('mandatory')
ipivcLcn = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 51, 4))
ipivcLcnRowStatusTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 51, 4, 1), )
if mibBuilder.loadTexts: ipivcLcnRowStatusTable.setStatus('mandatory')
ipivcLcnRowStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 51, 4, 1, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-IpiVcMIB", "ipivcIndex"), (0, "Nortel-Magellan-Passport-IpiVcMIB", "ipivcLcnIndex"))
if mibBuilder.loadTexts: ipivcLcnRowStatusEntry.setStatus('mandatory')
ipivcLcnRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 51, 4, 1, 1, 1), RowStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipivcLcnRowStatus.setStatus('mandatory')
ipivcLcnComponentName = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 51, 4, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipivcLcnComponentName.setStatus('mandatory')
ipivcLcnStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 51, 4, 1, 1, 4), StorageType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipivcLcnStorageType.setStatus('mandatory')
ipivcLcnIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 51, 4, 1, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(16, 39)))
if mibBuilder.loadTexts: ipivcLcnIndex.setStatus('mandatory')
ipivcLcnStateTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 51, 4, 10), )
if mibBuilder.loadTexts: ipivcLcnStateTable.setStatus('mandatory')
ipivcLcnStateEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 51, 4, 10, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-IpiVcMIB", "ipivcIndex"), (0, "Nortel-Magellan-Passport-IpiVcMIB", "ipivcLcnIndex"))
if mibBuilder.loadTexts: ipivcLcnStateEntry.setStatus('mandatory')
ipivcLcnAdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 51, 4, 10, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("locked", 0), ("unlocked", 1), ("shuttingDown", 2))).clone('unlocked')).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipivcLcnAdminState.setStatus('mandatory')
ipivcLcnOperationalState = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 51, 4, 10, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1))).clone('disabled')).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipivcLcnOperationalState.setStatus('mandatory')
ipivcLcnUsageState = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 51, 4, 10, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("idle", 0), ("active", 1), ("busy", 2))).clone('idle')).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipivcLcnUsageState.setStatus('mandatory')
ipivcLcnAvailabilityStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 51, 4, 10, 1, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(2, 2)).setFixedLength(2)).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipivcLcnAvailabilityStatus.setStatus('mandatory')
ipivcLcnProceduralStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 51, 4, 10, 1, 5), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 1)).setFixedLength(1)).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipivcLcnProceduralStatus.setStatus('mandatory')
ipivcLcnControlStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 51, 4, 10, 1, 6), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 1)).setFixedLength(1)).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipivcLcnControlStatus.setStatus('mandatory')
ipivcLcnAlarmStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 51, 4, 10, 1, 7), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 1)).setFixedLength(1)).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipivcLcnAlarmStatus.setStatus('mandatory')
ipivcLcnStandbyStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 51, 4, 10, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 15))).clone(namedValues=NamedValues(("hotStandby", 0), ("coldStandby", 1), ("providingService", 2), ("notSet", 15))).clone('notSet')).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipivcLcnStandbyStatus.setStatus('mandatory')
ipivcLcnUnknownStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 51, 4, 10, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("false", 0), ("true", 1))).clone('false')).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipivcLcnUnknownStatus.setStatus('mandatory')
ipivcLcnOperTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 51, 4, 11), )
if mibBuilder.loadTexts: ipivcLcnOperTable.setStatus('mandatory')
ipivcLcnOperEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 51, 4, 11, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-IpiVcMIB", "ipivcIndex"), (0, "Nortel-Magellan-Passport-IpiVcMIB", "ipivcLcnIndex"))
if mibBuilder.loadTexts: ipivcLcnOperEntry.setStatus('mandatory')
ipivcLcnIpInterfaceDevice = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 51, 4, 11, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("inactive", 0), ("active", 1))).clone('inactive')).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipivcLcnIpInterfaceDevice.setStatus('mandatory')
ipivcLcnDestinationIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 51, 4, 11, 1, 2), IpAddress().clone(hexValue="00000000")).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipivcLcnDestinationIpAddress.setStatus('mandatory')
ipivcLcnPacketsSent = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 51, 4, 11, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipivcLcnPacketsSent.setStatus('mandatory')
ipivcLcnPacketsReceived = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 51, 4, 11, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipivcLcnPacketsReceived.setStatus('mandatory')
ipivcLcnDiscardTxPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 51, 4, 11, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipivcLcnDiscardTxPackets.setStatus('mandatory')
ipivcLcnDiscardRcvPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 51, 4, 11, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipivcLcnDiscardRcvPackets.setStatus('mandatory')
ipivcLcnVc = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 51, 4, 2))
ipivcLcnVcRowStatusTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 51, 4, 2, 1), )
if mibBuilder.loadTexts: ipivcLcnVcRowStatusTable.setStatus('mandatory')
ipivcLcnVcRowStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 51, 4, 2, 1, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-IpiVcMIB", "ipivcIndex"), (0, "Nortel-Magellan-Passport-IpiVcMIB", "ipivcLcnIndex"), (0, "Nortel-Magellan-Passport-IpiVcMIB", "ipivcLcnVcIndex"))
if mibBuilder.loadTexts: ipivcLcnVcRowStatusEntry.setStatus('mandatory')
ipivcLcnVcRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 51, 4, 2, 1, 1, 1), RowStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipivcLcnVcRowStatus.setStatus('mandatory')
ipivcLcnVcComponentName = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 51, 4, 2, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipivcLcnVcComponentName.setStatus('mandatory')
ipivcLcnVcStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 51, 4, 2, 1, 1, 4), StorageType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipivcLcnVcStorageType.setStatus('mandatory')
ipivcLcnVcIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 51, 4, 2, 1, 1, 10), NonReplicated())
if mibBuilder.loadTexts: ipivcLcnVcIndex.setStatus('mandatory')
ipivcLcnVcCadTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 51, 4, 2, 10), )
if mibBuilder.loadTexts: ipivcLcnVcCadTable.setStatus('mandatory')
ipivcLcnVcCadEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 51, 4, 2, 10, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-IpiVcMIB", "ipivcIndex"), (0, "Nortel-Magellan-Passport-IpiVcMIB", "ipivcLcnIndex"), (0, "Nortel-Magellan-Passport-IpiVcMIB", "ipivcLcnVcIndex"))
if mibBuilder.loadTexts: ipivcLcnVcCadEntry.setStatus('mandatory')
ipivcLcnVcType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 51, 4, 2, 10, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("svc", 0), ("pvc", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipivcLcnVcType.setStatus('mandatory')
ipivcLcnVcState = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 51, 4, 2, 10, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("creating", 0), ("readyP1", 1), ("dteWaitingP2", 2), ("dceWaitingP3", 3), ("dataTransferP4", 4), ("unsupportedP5", 5), ("dteClearRequestP6", 6), ("dceClearIndicationP7", 7), ("termination", 8)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipivcLcnVcState.setStatus('mandatory')
ipivcLcnVcPreviousState = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 51, 4, 2, 10, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("creating", 0), ("readyP1", 1), ("dteWaitingP2", 2), ("dceWaitingP3", 3), ("dataTransferP4", 4), ("unsupportedP5", 5), ("dteClearRequestP6", 6), ("dceClearIndicationP7", 7), ("termination", 8)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipivcLcnVcPreviousState.setStatus('mandatory')
ipivcLcnVcDiagnosticCode = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 51, 4, 2, 10, 1, 4), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipivcLcnVcDiagnosticCode.setStatus('mandatory')
ipivcLcnVcPreviousDiagnosticCode = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 51, 4, 2, 10, 1, 5), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipivcLcnVcPreviousDiagnosticCode.setStatus('mandatory')
ipivcLcnVcCalledNpi = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 51, 4, 2, 10, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("x121", 0), ("e164", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipivcLcnVcCalledNpi.setStatus('mandatory')
ipivcLcnVcCalledDna = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 51, 4, 2, 10, 1, 7), DigitString().subtype(subtypeSpec=ValueSizeConstraint(1, 15))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipivcLcnVcCalledDna.setStatus('mandatory')
ipivcLcnVcCalledLcn = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 51, 4, 2, 10, 1, 8), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipivcLcnVcCalledLcn.setStatus('mandatory')
ipivcLcnVcCallingNpi = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 51, 4, 2, 10, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("x121", 0), ("e164", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipivcLcnVcCallingNpi.setStatus('mandatory')
ipivcLcnVcCallingDna = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 51, 4, 2, 10, 1, 10), DigitString().subtype(subtypeSpec=ValueSizeConstraint(1, 15))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipivcLcnVcCallingDna.setStatus('mandatory')
ipivcLcnVcCallingLcn = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 51, 4, 2, 10, 1, 11), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipivcLcnVcCallingLcn.setStatus('mandatory')
ipivcLcnVcAccountingEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 51, 4, 2, 10, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("yes", 0), ("no", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipivcLcnVcAccountingEnabled.setStatus('mandatory')
ipivcLcnVcFastSelectCall = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 51, 4, 2, 10, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("no", 0), ("yes", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipivcLcnVcFastSelectCall.setStatus('mandatory')
ipivcLcnVcLocalRxPktSize = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 51, 4, 2, 10, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 4, 5, 6, 7, 8, 9, 10, 11, 12))).clone(namedValues=NamedValues(("unknown", 0), ("n16", 4), ("n32", 5), ("n64", 6), ("n128", 7), ("n256", 8), ("n512", 9), ("n1024", 10), ("n2048", 11), ("n4096", 12)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipivcLcnVcLocalRxPktSize.setStatus('mandatory')
ipivcLcnVcLocalTxPktSize = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 51, 4, 2, 10, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 4, 5, 6, 7, 8, 9, 10, 11, 12))).clone(namedValues=NamedValues(("unknown", 0), ("n16", 4), ("n32", 5), ("n64", 6), ("n128", 7), ("n256", 8), ("n512", 9), ("n1024", 10), ("n2048", 11), ("n4096", 12)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipivcLcnVcLocalTxPktSize.setStatus('mandatory')
ipivcLcnVcLocalTxWindowSize = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 51, 4, 2, 10, 1, 16), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 127))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipivcLcnVcLocalTxWindowSize.setStatus('mandatory')
ipivcLcnVcLocalRxWindowSize = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 51, 4, 2, 10, 1, 17), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 127))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipivcLcnVcLocalRxWindowSize.setStatus('mandatory')
ipivcLcnVcPathReliability = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 51, 4, 2, 10, 1, 19), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("high", 0), ("normal", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipivcLcnVcPathReliability.setStatus('mandatory')
ipivcLcnVcAccountingEnd = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 51, 4, 2, 10, 1, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("callingEnd", 0), ("calledEnd", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipivcLcnVcAccountingEnd.setStatus('mandatory')
ipivcLcnVcPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 51, 4, 2, 10, 1, 21), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("normal", 0), ("high", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipivcLcnVcPriority.setStatus('mandatory')
ipivcLcnVcSegmentSize = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 51, 4, 2, 10, 1, 22), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4096))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipivcLcnVcSegmentSize.setStatus('mandatory')
ipivcLcnVcSubnetTxPktSize = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 51, 4, 2, 10, 1, 23), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 4, 5, 6, 7, 8, 9, 10, 11, 12))).clone(namedValues=NamedValues(("unknown", 0), ("n16", 4), ("n32", 5), ("n64", 6), ("n128", 7), ("n256", 8), ("n512", 9), ("n1024", 10), ("n2048", 11), ("n4096", 12)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipivcLcnVcSubnetTxPktSize.setStatus('mandatory')
ipivcLcnVcSubnetTxWindowSize = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 51, 4, 2, 10, 1, 24), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4096))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipivcLcnVcSubnetTxWindowSize.setStatus('mandatory')
ipivcLcnVcSubnetRxPktSize = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 51, 4, 2, 10, 1, 25), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 4, 5, 6, 7, 8, 9, 10, 11, 12))).clone(namedValues=NamedValues(("unknown", 0), ("n16", 4), ("n32", 5), ("n64", 6), ("n128", 7), ("n256", 8), ("n512", 9), ("n1024", 10), ("n2048", 11), ("n4096", 12)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipivcLcnVcSubnetRxPktSize.setStatus('mandatory')
ipivcLcnVcSubnetRxWindowSize = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 51, 4, 2, 10, 1, 26), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4096))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipivcLcnVcSubnetRxWindowSize.setStatus('mandatory')
ipivcLcnVcMaxSubnetPktSize = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 51, 4, 2, 10, 1, 27), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4096))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipivcLcnVcMaxSubnetPktSize.setStatus('mandatory')
ipivcLcnVcTransferPriorityToNetwork = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 51, 4, 2, 10, 1, 28), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 9))).clone(namedValues=NamedValues(("normal", 0), ("high", 9)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipivcLcnVcTransferPriorityToNetwork.setStatus('mandatory')
ipivcLcnVcTransferPriorityFromNetwork = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 51, 4, 2, 10, 1, 29), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 9))).clone(namedValues=NamedValues(("normal", 0), ("high", 9)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipivcLcnVcTransferPriorityFromNetwork.setStatus('mandatory')
ipivcLcnVcIntdTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 51, 4, 2, 11), )
if mibBuilder.loadTexts: ipivcLcnVcIntdTable.setStatus('mandatory')
ipivcLcnVcIntdEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 51, 4, 2, 11, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-IpiVcMIB", "ipivcIndex"), (0, "Nortel-Magellan-Passport-IpiVcMIB", "ipivcLcnIndex"), (0, "Nortel-Magellan-Passport-IpiVcMIB", "ipivcLcnVcIndex"))
if mibBuilder.loadTexts: ipivcLcnVcIntdEntry.setStatus('mandatory')
ipivcLcnVcCallReferenceNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 51, 4, 2, 11, 1, 1), Hex().subtype(subtypeSpec=ValueRangeConstraint(0, 16777215))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipivcLcnVcCallReferenceNumber.setStatus('mandatory')
ipivcLcnVcElapsedTimeTillNow = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 51, 4, 2, 11, 1, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 16777215))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipivcLcnVcElapsedTimeTillNow.setStatus('mandatory')
ipivcLcnVcSegmentsRx = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 51, 4, 2, 11, 1, 3), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 16777215))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipivcLcnVcSegmentsRx.setStatus('mandatory')
ipivcLcnVcSegmentsSent = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 51, 4, 2, 11, 1, 4), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 16777215))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipivcLcnVcSegmentsSent.setStatus('mandatory')
ipivcLcnVcStartTime = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 51, 4, 2, 11, 1, 5), EnterpriseDateAndTime().subtype(subtypeSpec=ConstraintsUnion(ValueSizeConstraint(0, 0), ValueSizeConstraint(19, 19), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipivcLcnVcStartTime.setStatus('mandatory')
ipivcLcnVcStatsTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 51, 4, 2, 12), )
if mibBuilder.loadTexts: ipivcLcnVcStatsTable.setStatus('mandatory')
ipivcLcnVcStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 51, 4, 2, 12, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-IpiVcMIB", "ipivcIndex"), (0, "Nortel-Magellan-Passport-IpiVcMIB", "ipivcLcnIndex"), (0, "Nortel-Magellan-Passport-IpiVcMIB", "ipivcLcnVcIndex"))
if mibBuilder.loadTexts: ipivcLcnVcStatsEntry.setStatus('mandatory')
ipivcLcnVcAckStackingTimeouts = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 51, 4, 2, 12, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 5000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipivcLcnVcAckStackingTimeouts.setStatus('mandatory')
ipivcLcnVcOutOfRangeFrmFromSubnet = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 51, 4, 2, 12, 1, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 5000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipivcLcnVcOutOfRangeFrmFromSubnet.setStatus('mandatory')
ipivcLcnVcDuplicatesFromSubnet = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 51, 4, 2, 12, 1, 3), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 5000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipivcLcnVcDuplicatesFromSubnet.setStatus('mandatory')
ipivcLcnVcFrmRetryTimeouts = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 51, 4, 2, 12, 1, 4), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 5000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipivcLcnVcFrmRetryTimeouts.setStatus('mandatory')
ipivcLcnVcPeakRetryQueueSize = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 51, 4, 2, 12, 1, 5), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 5000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipivcLcnVcPeakRetryQueueSize.setStatus('mandatory')
ipivcLcnVcPeakOoSeqQueueSize = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 51, 4, 2, 12, 1, 6), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 5000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipivcLcnVcPeakOoSeqQueueSize.setStatus('mandatory')
ipivcLcnVcPeakOoSeqFrmForwarded = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 51, 4, 2, 12, 1, 7), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 5000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipivcLcnVcPeakOoSeqFrmForwarded.setStatus('mandatory')
ipivcLcnVcPeakStackedAcksRx = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 51, 4, 2, 12, 1, 8), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 5000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipivcLcnVcPeakStackedAcksRx.setStatus('mandatory')
ipivcLcnVcSubnetRecoveries = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 51, 4, 2, 12, 1, 9), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 5000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipivcLcnVcSubnetRecoveries.setStatus('mandatory')
ipivcLcnVcWindowClosuresToSubnet = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 51, 4, 2, 12, 1, 10), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 5000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipivcLcnVcWindowClosuresToSubnet.setStatus('mandatory')
ipivcLcnVcWindowClosuresFromSubnet = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 51, 4, 2, 12, 1, 11), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 5000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipivcLcnVcWindowClosuresFromSubnet.setStatus('mandatory')
ipivcLcnVcWrTriggers = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 51, 4, 2, 12, 1, 12), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 5000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipivcLcnVcWrTriggers.setStatus('mandatory')
ipiVcGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 2, 4, 2, 53, 1))
ipiVcGroupBE = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 2, 4, 2, 53, 1, 5))
ipiVcGroupBE01 = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 2, 4, 2, 53, 1, 5, 2))
ipiVcGroupBE01A = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 2, 4, 2, 53, 1, 5, 2, 2))
ipiVcCapabilities = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 2, 4, 2, 53, 3))
ipiVcCapabilitiesBE = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 2, 4, 2, 53, 3, 5))
ipiVcCapabilitiesBE01 = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 2, 4, 2, 53, 3, 5, 2))
ipiVcCapabilitiesBE01A = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 2, 4, 2, 53, 3, 5, 2, 2))
mibBuilder.exportSymbols("Nortel-Magellan-Passport-IpiVcMIB", ipivcDnaIncAccess=ipivcDnaIncAccess, ipivcLcnOperationalState=ipivcLcnOperationalState, ipivcLcnVcSegmentsSent=ipivcLcnVcSegmentsSent, ipivcDnaIncChargeTransfer=ipivcDnaIncChargeTransfer, ipivcLcnVcSegmentSize=ipivcLcnVcSegmentSize, ipivcLcnPacketsReceived=ipivcLcnPacketsReceived, ipivcDnaDefaultRecvFrmNetworkPacketSize=ipivcDnaDefaultRecvFrmNetworkPacketSize, ipivcProvEntry=ipivcProvEntry, ipivcDnaNumberingPlanIndicator=ipivcDnaNumberingPlanIndicator, ipivcLcnVcIntdTable=ipivcLcnVcIntdTable, ipivcDnaIndex=ipivcDnaIndex, ipivcLcnDiscardRcvPackets=ipivcLcnDiscardRcvPackets, ipivcLcnVcTransferPriorityFromNetwork=ipivcLcnVcTransferPriorityFromNetwork, ipivcLcnVcElapsedTimeTillNow=ipivcLcnVcElapsedTimeTillNow, ipiVcMIB=ipiVcMIB, ipivcLcnRowStatusEntry=ipivcLcnRowStatusEntry, ipivcDnaOutDefaultPathSensitivity=ipivcDnaOutDefaultPathSensitivity, ipivcDnaIncCalls=ipivcDnaIncCalls, ipivcDnaPacketSizeNegotiation=ipivcDnaPacketSizeNegotiation, ipivcLcnVcCallingNpi=ipivcLcnVcCallingNpi, ipivcDnaServiceCategory=ipivcDnaServiceCategory, ipivcDnaRowStatusTable=ipivcDnaRowStatusTable, ipivcLcnStateEntry=ipivcLcnStateEntry, ipivcLcnVcOutOfRangeFrmFromSubnet=ipivcLcnVcOutOfRangeFrmFromSubnet, ipivcDnaCugPrivileged=ipivcDnaCugPrivileged, ipivcDnaServiceExchange=ipivcDnaServiceExchange, ipivcDnaTransferPriorityOverRide=ipivcDnaTransferPriorityOverRide, ipivcDnaCugInterlockCode=ipivcDnaCugInterlockCode, ipivcDnaRowStatus=ipivcDnaRowStatus, ipivcLcnVcComponentName=ipivcLcnVcComponentName, ipivcDnaCugOutCalls=ipivcDnaCugOutCalls, ipivcDnaCugIncCalls=ipivcDnaCugIncCalls, ipivcDnaCugCugOptionsTable=ipivcDnaCugCugOptionsTable, ipivcLcnVcCallingDna=ipivcLcnVcCallingDna, ipivcDnaCug=ipivcDnaCug, ipivcDrStorageType=ipivcDrStorageType, ipivcLcnVcPeakRetryQueueSize=ipivcLcnVcPeakRetryQueueSize, ipivcLcnVcAckStackingTimeouts=ipivcLcnVcAckStackingTimeouts, ipivcLcnVcType=ipivcLcnVcType, ipivcDnaCallOptionsTable=ipivcDnaCallOptionsTable, ipivcLcnVcDuplicatesFromSubnet=ipivcLcnVcDuplicatesFromSubnet, ipivcLcnVcSubnetRecoveries=ipivcLcnVcSubnetRecoveries, ipiVcGroup=ipiVcGroup, ipivcLcnOperEntry=ipivcLcnOperEntry, ipivcLcnVcSubnetTxWindowSize=ipivcLcnVcSubnetTxWindowSize, ipivcDnaOutgoingOptionsTable=ipivcDnaOutgoingOptionsTable, ipivcDrCallingIpAddress=ipivcDrCallingIpAddress, ipivcLcnVcLocalRxPktSize=ipivcLcnVcLocalRxPktSize, ipivcProvTable=ipivcProvTable, ipiVcGroupBE=ipiVcGroupBE, ipivcDrProvEntry=ipivcDrProvEntry, ipivcDnaDefaultSendToNetworkWindowSize=ipivcDnaDefaultSendToNetworkWindowSize, ipivcLcnVcIntdEntry=ipivcLcnVcIntdEntry, ipivcLcnVcDiagnosticCode=ipivcLcnVcDiagnosticCode, ipivcLcnVcPreviousState=ipivcLcnVcPreviousState, ipivcDnaCugFormat=ipivcDnaCugFormat, ipivcLcnIpInterfaceDevice=ipivcLcnIpInterfaceDevice, ipivcRowStatus=ipivcRowStatus, ipivcDrRowStatusTable=ipivcDrRowStatusTable, ipivcLcnStateTable=ipivcLcnStateTable, ipivcDnaDefaultTransferPriority=ipivcDnaDefaultTransferPriority, ipivcLcnDestinationIpAddress=ipivcLcnDestinationIpAddress, ipivcLcnVcState=ipivcLcnVcState, ipivcDnaStorageType=ipivcDnaStorageType, ipiVcCapabilitiesBE01A=ipiVcCapabilitiesBE01A, ipivcLcnRowStatusTable=ipivcLcnRowStatusTable, ipivcLcnVcCadEntry=ipivcLcnVcCadEntry, ipivcLcnComponentName=ipivcLcnComponentName, ipivcDrCallingNumberingPlanIndicator=ipivcDrCallingNumberingPlanIndicator, ipivcLcnAdminState=ipivcLcnAdminState, ipivcLcnVcPreviousDiagnosticCode=ipivcLcnVcPreviousDiagnosticCode, ipivcLcnVcCalledLcn=ipivcLcnVcCalledLcn, ipiVcCapabilitiesBE=ipiVcCapabilitiesBE, ipivcDnaCugRowStatusEntry=ipivcDnaCugRowStatusEntry, ipivcDrIndex=ipivcDrIndex, ipivcDnaDefaultSendToNetworkPacketSize=ipivcDnaDefaultSendToNetworkPacketSize, ipivcDnaCugComponentName=ipivcDnaCugComponentName, ipivcLcnVcAccountingEnabled=ipivcLcnVcAccountingEnabled, ipiVcGroupBE01A=ipiVcGroupBE01A, ipivcDnaAccountClass=ipivcDnaAccountClass, ipivcDnaCugRowStatus=ipivcDnaCugRowStatus, ipivcDnaDataNetworkAddress=ipivcDnaDataNetworkAddress, ipivcLcnPacketsSent=ipivcLcnPacketsSent, ipivcLcnVc=ipivcLcnVc, ipivcDnaIncFastSelect=ipivcDnaIncFastSelect, ipivcLcnVcStatsEntry=ipivcLcnVcStatsEntry, ipivcLcnVcStartTime=ipivcLcnVcStartTime, ipivcLcnVcLocalTxWindowSize=ipivcLcnVcLocalTxWindowSize, ipivcLcnVcIndex=ipivcLcnVcIndex, ipivcDnaIncSameService=ipivcDnaIncSameService, ipivcDr=ipivcDr, ipivcLcnVcPeakOoSeqFrmForwarded=ipivcLcnVcPeakOoSeqFrmForwarded, ipivcLcnVcCalledDna=ipivcLcnVcCalledDna, ipivcRowStatusEntry=ipivcRowStatusEntry, ipivcDnaCugRowStatusTable=ipivcDnaCugRowStatusTable, ipivcDnaAddressEntry=ipivcDnaAddressEntry, ipivcDnaCug0AsNonCugCall=ipivcDnaCug0AsNonCugCall, ipivcDrComponentName=ipivcDrComponentName, ipivcLcnVcRowStatus=ipivcLcnVcRowStatus, ipivcDnaDefaultRecvFrmNetworkWindowSize=ipivcDnaDefaultRecvFrmNetworkWindowSize, ipivcRowStatusTable=ipivcRowStatusTable, ipivcLcnVcAccountingEnd=ipivcLcnVcAccountingEnd, ipivcDnaRowStatusEntry=ipivcDnaRowStatusEntry, ipivcDnaIncomingOptionsEntry=ipivcDnaIncomingOptionsEntry, ipivcStorageType=ipivcStorageType, ipivcLcnVcWrTriggers=ipivcLcnVcWrTriggers, ipivcDnaCallOptionsEntry=ipivcDnaCallOptionsEntry, ipivcLcnVcLocalTxPktSize=ipivcLcnVcLocalTxPktSize, ipivcLcnVcTransferPriorityToNetwork=ipivcLcnVcTransferPriorityToNetwork, ipivcLcnControlStatus=ipivcLcnControlStatus, ipivcLcnUnknownStatus=ipivcLcnUnknownStatus, ipivcDnaOutgoingOptionsEntry=ipivcDnaOutgoingOptionsEntry, ipivcLcnVcSubnetTxPktSize=ipivcLcnVcSubnetTxPktSize, ipiVcCapabilitiesBE01=ipiVcCapabilitiesBE01, ipivcLcnVcLocalRxWindowSize=ipivcLcnVcLocalRxWindowSize, ipivcDnaIncIntlReverseCharge=ipivcDnaIncIntlReverseCharge, ipivcDnaCugDnic=ipivcDnaCugDnic, ipivcComponentName=ipivcComponentName, ipivcDnaCugCugOptionsEntry=ipivcDnaCugCugOptionsEntry, ipivcLcnVcSubnetRxWindowSize=ipivcLcnVcSubnetRxWindowSize, ipivcLcnVcFastSelectCall=ipivcLcnVcFastSelectCall, ipivcLcnUsageState=ipivcLcnUsageState, ipivcDnaCugType=ipivcDnaCugType, ipivcDnaDefaultRecvFrmNetworkThruputClass=ipivcDnaDefaultRecvFrmNetworkThruputClass, ipivcLcnIndex=ipivcLcnIndex, ipivcLcnVcCallingLcn=ipivcLcnVcCallingLcn, ipivcLcnVcFrmRetryTimeouts=ipivcLcnVcFrmRetryTimeouts, ipivcDnaIncHighPriorityReverseCharge=ipivcDnaIncHighPriorityReverseCharge, ipiVcGroupBE01=ipiVcGroupBE01, ipivcLcnVcCadTable=ipivcLcnVcCadTable, ipivcLcnVcCallReferenceNumber=ipivcLcnVcCallReferenceNumber, ipivcDnaIncNormalPriorityReverseCharge=ipivcDnaIncNormalPriorityReverseCharge, ipivcLcnVcPeakStackedAcksRx=ipivcLcnVcPeakStackedAcksRx, ipivcLcnVcWindowClosuresToSubnet=ipivcLcnVcWindowClosuresToSubnet, ipivcLcnDiscardTxPackets=ipivcLcnDiscardTxPackets, ipivcLcnVcSegmentsRx=ipivcLcnVcSegmentsRx, ipivcLcnVcPriority=ipivcLcnVcPriority, ipivcDnaCugStorageType=ipivcDnaCugStorageType, ipivcLcnVcStorageType=ipivcLcnVcStorageType, ipivcLcnOperTable=ipivcLcnOperTable, ipivcMaximumNumberOfLcn=ipivcMaximumNumberOfLcn, ipivcDna=ipivcDna, ipivcLcnAlarmStatus=ipivcLcnAlarmStatus, ipivcLcnVcWindowClosuresFromSubnet=ipivcLcnVcWindowClosuresFromSubnet, ipivcLcnProceduralStatus=ipivcLcnProceduralStatus, ipivcDnaIncomingOptionsTable=ipivcDnaIncomingOptionsTable, ipivcLcnVcMaxSubnetPktSize=ipivcLcnVcMaxSubnetPktSize, ipivcDnaOutPathSensitivityOverRide=ipivcDnaOutPathSensitivityOverRide, ipivcLcnAvailabilityStatus=ipivcLcnAvailabilityStatus, ipivcLcnVcCalledNpi=ipivcLcnVcCalledNpi, ipiVcCapabilities=ipiVcCapabilities, ipivcDnaPacketSizes=ipivcDnaPacketSizes, ipivcDrCallingDataNetworkAddress=ipivcDrCallingDataNetworkAddress, ipivcDnaComponentName=ipivcDnaComponentName, ipivcDrProvTable=ipivcDrProvTable, ipivcDrRowStatusEntry=ipivcDrRowStatusEntry, ipivcDnaDefaultSendToNetworkThruputClass=ipivcDnaDefaultSendToNetworkThruputClass, ipivcDnaAddressTable=ipivcDnaAddressTable, ipivcLcnStandbyStatus=ipivcLcnStandbyStatus, ipivcLcnVcRowStatusEntry=ipivcLcnVcRowStatusEntry, ipivcDnaFastSelectCallsOnly=ipivcDnaFastSelectCallsOnly, ipivcDrRowStatus=ipivcDrRowStatus, ipivcIndex=ipivcIndex, ipivc=ipivc, ipivcLcnVcPeakOoSeqQueueSize=ipivcLcnVcPeakOoSeqQueueSize, ipivcLcnRowStatus=ipivcLcnRowStatus, ipivcLcnVcSubnetRxPktSize=ipivcLcnVcSubnetRxPktSize, ipivcLcnVcStatsTable=ipivcLcnVcStatsTable, ipivcLcn=ipivcLcn, ipivcIpAddress=ipivcIpAddress, ipivcDnaIncIntlNormalCharge=ipivcDnaIncIntlNormalCharge, ipivcLcnVcRowStatusTable=ipivcLcnVcRowStatusTable, ipivcDnaOutCalls=ipivcDnaOutCalls, ipivcDnaCugIndex=ipivcDnaCugIndex, ipivcLcnVcPathReliability=ipivcLcnVcPathReliability, ipivcLcnStorageType=ipivcLcnStorageType)
