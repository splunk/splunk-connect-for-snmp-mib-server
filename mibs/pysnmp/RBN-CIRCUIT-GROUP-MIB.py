#
# PySNMP MIB module RBN-CIRCUIT-GROUP-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/RBN-CIRCUIT-GROUP-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 20:44:12 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, ObjectIdentifier, OctetString = mibBuilder.importSymbols("ASN1", "Integer", "ObjectIdentifier", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
SingleValueConstraint, ValueSizeConstraint, ConstraintsIntersection, ConstraintsUnion, ValueRangeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "SingleValueConstraint", "ValueSizeConstraint", "ConstraintsIntersection", "ConstraintsUnion", "ValueRangeConstraint")
RbnQosClassId, RbnQosPolicyType = mibBuilder.importSymbols("RBN-QOS-MIB", "RbnQosClassId", "RbnQosPolicyType")
rbnMgmt, = mibBuilder.importSymbols("RBN-SMI", "rbnMgmt")
SnmpAdminString, = mibBuilder.importSymbols("SNMP-FRAMEWORK-MIB", "SnmpAdminString")
NotificationGroup, ModuleCompliance, ObjectGroup = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance", "ObjectGroup")
Integer32, NotificationType, MibIdentifier, ModuleIdentity, Counter64, ObjectIdentity, Unsigned32, iso, TimeTicks, Counter32, Gauge32, MibScalar, MibTable, MibTableRow, MibTableColumn, IpAddress, Bits = mibBuilder.importSymbols("SNMPv2-SMI", "Integer32", "NotificationType", "MibIdentifier", "ModuleIdentity", "Counter64", "ObjectIdentity", "Unsigned32", "iso", "TimeTicks", "Counter32", "Gauge32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "IpAddress", "Bits")
TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString")
rbnCircuitGroupMib = ModuleIdentity((1, 3, 6, 1, 4, 1, 2352, 2, 43))
rbnCircuitGroupMib.setRevisions(('2008-07-30 00:00', '2007-07-25 00:00',))
if mibBuilder.loadTexts: rbnCircuitGroupMib.setLastUpdated('200807300000Z')
if mibBuilder.loadTexts: rbnCircuitGroupMib.setOrganization('Redback Networks, Inc.')
rbnCircuitGroupObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 2352, 2, 43, 1))
rbnCircuitGroupConformance = MibIdentifier((1, 3, 6, 1, 4, 1, 2352, 2, 43, 2))
rbnCircuitGroupStatsTable = MibTable((1, 3, 6, 1, 4, 1, 2352, 2, 43, 1, 1), )
if mibBuilder.loadTexts: rbnCircuitGroupStatsTable.setStatus('current')
rbnCircuitGroupStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2352, 2, 43, 1, 1, 1), ).setIndexNames((0, "RBN-CIRCUIT-GROUP-MIB", "rbnCctGrpName"))
if mibBuilder.loadTexts: rbnCircuitGroupStatsEntry.setStatus('current')
rbnCctGrpName = MibTableColumn((1, 3, 6, 1, 4, 1, 2352, 2, 43, 1, 1, 1, 1), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(1, 113)))
if mibBuilder.loadTexts: rbnCctGrpName.setStatus('current')
rbnCctGrpTxOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 2352, 2, 43, 1, 1, 1, 2), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rbnCctGrpTxOctets.setStatus('current')
rbnCctGrpTxPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 2352, 2, 43, 1, 1, 1, 3), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rbnCctGrpTxPackets.setStatus('current')
rbnCctGrpTxMulticastOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 2352, 2, 43, 1, 1, 1, 4), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rbnCctGrpTxMulticastOctets.setStatus('current')
rbnCctGrpTxMulticastPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 2352, 2, 43, 1, 1, 1, 5), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rbnCctGrpTxMulticastPackets.setStatus('current')
rbnCctGrpRxOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 2352, 2, 43, 1, 1, 1, 6), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rbnCctGrpRxOctets.setStatus('current')
rbnCctGrpRxPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 2352, 2, 43, 1, 1, 1, 7), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rbnCctGrpRxPackets.setStatus('current')
rbnCctGrpRxMulticastOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 2352, 2, 43, 1, 1, 1, 8), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rbnCctGrpRxMulticastOctets.setStatus('current')
rbnCctGrpRxMulticastPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 2352, 2, 43, 1, 1, 1, 9), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rbnCctGrpRxMulticastPackets.setStatus('current')
rbnCctGrpAdjDroppedOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 2352, 2, 43, 1, 1, 1, 10), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rbnCctGrpAdjDroppedOctets.setStatus('current')
rbnCctGrpAdjDroppedPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 2352, 2, 43, 1, 1, 1, 11), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rbnCctGrpAdjDroppedPackets.setStatus('current')
rbnCctGrpDownDroppedOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 2352, 2, 43, 1, 1, 1, 12), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rbnCctGrpDownDroppedOctets.setStatus('current')
rbnCctGrpDownDroppedPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 2352, 2, 43, 1, 1, 1, 13), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rbnCctGrpDownDroppedPackets.setStatus('current')
rbnCctGrpUnreachDroppedOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 2352, 2, 43, 1, 1, 1, 14), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rbnCctGrpUnreachDroppedOctets.setStatus('current')
rbnCctGrpUnreachDroppedPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 2352, 2, 43, 1, 1, 1, 15), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rbnCctGrpUnreachDroppedPackets.setStatus('current')
rbnCctGrpUnknownEncapsOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 2352, 2, 43, 1, 1, 1, 16), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rbnCctGrpUnknownEncapsOctets.setStatus('current')
rbnCctGrpUnknownEncapsPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 2352, 2, 43, 1, 1, 1, 17), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rbnCctGrpUnknownEncapsPackets.setStatus('current')
rbnCircuitGroupQTable = MibTable((1, 3, 6, 1, 4, 1, 2352, 2, 43, 1, 2), )
if mibBuilder.loadTexts: rbnCircuitGroupQTable.setStatus('current')
rbnCircuitGroupQEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2352, 2, 43, 1, 2, 1), ).setIndexNames((0, "RBN-CIRCUIT-GROUP-MIB", "rbnCctGrpName"), (0, "RBN-CIRCUIT-GROUP-MIB", "rbnCctGrpQueueId"))
if mibBuilder.loadTexts: rbnCircuitGroupQEntry.setStatus('current')
rbnCctGrpQueueId = MibTableColumn((1, 3, 6, 1, 4, 1, 2352, 2, 43, 1, 2, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 7)))
if mibBuilder.loadTexts: rbnCctGrpQueueId.setStatus('current')
rbnCctGrpQTxOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 2352, 2, 43, 1, 2, 1, 2), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rbnCctGrpQTxOctets.setStatus('current')
rbnCctGrpQTxPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 2352, 2, 43, 1, 2, 1, 3), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rbnCctGrpQTxPackets.setStatus('current')
rbnCctGrpQWredDroppedOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 2352, 2, 43, 1, 2, 1, 4), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rbnCctGrpQWredDroppedOctets.setStatus('current')
rbnCctGrpQWredDroppedPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 2352, 2, 43, 1, 2, 1, 5), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rbnCctGrpQWredDroppedPkts.setStatus('current')
rbnCctGrpQTailDroppedOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 2352, 2, 43, 1, 2, 1, 6), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rbnCctGrpQTailDroppedOctets.setStatus('current')
rbnCctGrpQTailDroppedPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 2352, 2, 43, 1, 2, 1, 7), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rbnCctGrpQTailDroppedPkts.setStatus('current')
rbnCctGrpRLPolicyStatsTable = MibTable((1, 3, 6, 1, 4, 1, 2352, 2, 43, 1, 3), )
if mibBuilder.loadTexts: rbnCctGrpRLPolicyStatsTable.setStatus('current')
rbnCctGrpRLPolicyStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2352, 2, 43, 1, 3, 1), ).setIndexNames((0, "RBN-CIRCUIT-GROUP-MIB", "rbnCctGrpName"), (0, "RBN-CIRCUIT-GROUP-MIB", "rbnCctGrpRLPolicyType"))
if mibBuilder.loadTexts: rbnCctGrpRLPolicyStatsEntry.setStatus('current')
rbnCctGrpRLPolicyType = MibTableColumn((1, 3, 6, 1, 4, 1, 2352, 2, 43, 1, 3, 1, 1), RbnQosPolicyType())
if mibBuilder.loadTexts: rbnCctGrpRLPolicyType.setStatus('current')
rbnCctGrpRLPolicyName = MibTableColumn((1, 3, 6, 1, 4, 1, 2352, 2, 43, 1, 3, 1, 2), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(1, 39))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rbnCctGrpRLPolicyName.setStatus('current')
rbnCctGrpRLPolicyConformOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 2352, 2, 43, 1, 3, 1, 3), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rbnCctGrpRLPolicyConformOctets.setStatus('current')
rbnCctGrpRLPolicyConformPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 2352, 2, 43, 1, 3, 1, 4), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rbnCctGrpRLPolicyConformPkts.setStatus('current')
rbnCctGrpRLPolicyExceedOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 2352, 2, 43, 1, 3, 1, 5), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rbnCctGrpRLPolicyExceedOctets.setStatus('current')
rbnCctGrpRLPolicyExceedPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 2352, 2, 43, 1, 3, 1, 6), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rbnCctGrpRLPolicyExceedPkts.setStatus('current')
rbnCctGrpRLPolicyExceedDroppedOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 2352, 2, 43, 1, 3, 1, 7), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rbnCctGrpRLPolicyExceedDroppedOctets.setStatus('current')
rbnCctGrpRLPolicyExceedDroppedPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 2352, 2, 43, 1, 3, 1, 8), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rbnCctGrpRLPolicyExceedDroppedPkts.setStatus('current')
rbnCctGrpRLPolicyViolateOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 2352, 2, 43, 1, 3, 1, 9), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rbnCctGrpRLPolicyViolateOctets.setStatus('current')
rbnCctGrpRLPolicyViolatePkts = MibTableColumn((1, 3, 6, 1, 4, 1, 2352, 2, 43, 1, 3, 1, 10), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rbnCctGrpRLPolicyViolatePkts.setStatus('current')
rbnCctGrpRLPolicyViolateDroppedOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 2352, 2, 43, 1, 3, 1, 11), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rbnCctGrpRLPolicyViolateDroppedOctets.setStatus('current')
rbnCctGrpRLPolicyViolateDroppedPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 2352, 2, 43, 1, 3, 1, 12), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rbnCctGrpRLPolicyViolateDroppedPkts.setStatus('current')
rbnCctGrpRLClassStatsTable = MibTable((1, 3, 6, 1, 4, 1, 2352, 2, 43, 1, 4), )
if mibBuilder.loadTexts: rbnCctGrpRLClassStatsTable.setStatus('current')
rbnCctGrpRLClassStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2352, 2, 43, 1, 4, 1), ).setIndexNames((0, "RBN-CIRCUIT-GROUP-MIB", "rbnCctGrpName"), (0, "RBN-CIRCUIT-GROUP-MIB", "rbnCctGrpRLPolicyType"), (0, "RBN-CIRCUIT-GROUP-MIB", "rbnCctGrpRLClassId"))
if mibBuilder.loadTexts: rbnCctGrpRLClassStatsEntry.setStatus('current')
rbnCctGrpRLClassId = MibTableColumn((1, 3, 6, 1, 4, 1, 2352, 2, 43, 1, 4, 1, 1), RbnQosClassId())
if mibBuilder.loadTexts: rbnCctGrpRLClassId.setStatus('current')
rbnCctGrpRLClassName = MibTableColumn((1, 3, 6, 1, 4, 1, 2352, 2, 43, 1, 4, 1, 2), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(1, 39))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rbnCctGrpRLClassName.setStatus('current')
rbnCctGrpRLClassConformOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 2352, 2, 43, 1, 4, 1, 3), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rbnCctGrpRLClassConformOctets.setStatus('current')
rbnCctGrpRLClassConformPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 2352, 2, 43, 1, 4, 1, 4), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rbnCctGrpRLClassConformPkts.setStatus('current')
rbnCctGrpRLClassConformDroppedOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 2352, 2, 43, 1, 4, 1, 5), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rbnCctGrpRLClassConformDroppedOctets.setStatus('current')
rbnCctGrpRLClassConformDroppedPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 2352, 2, 43, 1, 4, 1, 6), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rbnCctGrpRLClassConformDroppedPkts.setStatus('current')
rbnCctGrpRLClassExceedOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 2352, 2, 43, 1, 4, 1, 7), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rbnCctGrpRLClassExceedOctets.setStatus('current')
rbnCctGrpRLClassExceedPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 2352, 2, 43, 1, 4, 1, 8), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rbnCctGrpRLClassExceedPkts.setStatus('current')
rbnCctGrpRLClassExceedDroppedOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 2352, 2, 43, 1, 4, 1, 9), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rbnCctGrpRLClassExceedDroppedOctets.setStatus('current')
rbnCctGrpRLClassExceedDroppedPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 2352, 2, 43, 1, 4, 1, 10), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rbnCctGrpRLClassExceedDroppedPkts.setStatus('current')
rbnCctGrpRLClassViolateOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 2352, 2, 43, 1, 4, 1, 11), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rbnCctGrpRLClassViolateOctets.setStatus('current')
rbnCctGrpRLClassViolatePkts = MibTableColumn((1, 3, 6, 1, 4, 1, 2352, 2, 43, 1, 4, 1, 12), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rbnCctGrpRLClassViolatePkts.setStatus('current')
rbnCctGrpRLClassViolateDroppedOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 2352, 2, 43, 1, 4, 1, 13), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rbnCctGrpRLClassViolateDroppedOctets.setStatus('current')
rbnCctGrpRLClassViolateDroppedPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 2352, 2, 43, 1, 4, 1, 14), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rbnCctGrpRLClassViolateDroppedPkts.setStatus('current')
rbnCircuitGroupCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 2352, 2, 43, 2, 1))
rbnCircuitGroupConformGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 2352, 2, 43, 2, 2))
rbnCCircuitGroupCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 2352, 2, 43, 2, 1, 1)).setObjects(("RBN-CIRCUIT-GROUP-MIB", "rbnCctGrpStatsGroup"), ("RBN-CIRCUIT-GROUP-MIB", "rbnCctGrpQStatsGroup"), ("RBN-CIRCUIT-GROUP-MIB", "rbnCctGrpPolicyStatsGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    rbnCCircuitGroupCompliance = rbnCCircuitGroupCompliance.setStatus('current')
rbnCctGrpStatsGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2352, 2, 43, 2, 2, 1)).setObjects(("RBN-CIRCUIT-GROUP-MIB", "rbnCctGrpTxOctets"), ("RBN-CIRCUIT-GROUP-MIB", "rbnCctGrpTxPackets"), ("RBN-CIRCUIT-GROUP-MIB", "rbnCctGrpTxMulticastOctets"), ("RBN-CIRCUIT-GROUP-MIB", "rbnCctGrpTxMulticastPackets"), ("RBN-CIRCUIT-GROUP-MIB", "rbnCctGrpRxOctets"), ("RBN-CIRCUIT-GROUP-MIB", "rbnCctGrpRxPackets"), ("RBN-CIRCUIT-GROUP-MIB", "rbnCctGrpRxMulticastOctets"), ("RBN-CIRCUIT-GROUP-MIB", "rbnCctGrpRxMulticastPackets"), ("RBN-CIRCUIT-GROUP-MIB", "rbnCctGrpAdjDroppedOctets"), ("RBN-CIRCUIT-GROUP-MIB", "rbnCctGrpAdjDroppedPackets"), ("RBN-CIRCUIT-GROUP-MIB", "rbnCctGrpDownDroppedOctets"), ("RBN-CIRCUIT-GROUP-MIB", "rbnCctGrpDownDroppedPackets"), ("RBN-CIRCUIT-GROUP-MIB", "rbnCctGrpUnreachDroppedOctets"), ("RBN-CIRCUIT-GROUP-MIB", "rbnCctGrpUnreachDroppedPackets"), ("RBN-CIRCUIT-GROUP-MIB", "rbnCctGrpUnknownEncapsOctets"), ("RBN-CIRCUIT-GROUP-MIB", "rbnCctGrpUnknownEncapsPackets"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    rbnCctGrpStatsGroup = rbnCctGrpStatsGroup.setStatus('current')
rbnCctGrpQStatsGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2352, 2, 43, 2, 2, 2)).setObjects(("RBN-CIRCUIT-GROUP-MIB", "rbnCctGrpQTxOctets"), ("RBN-CIRCUIT-GROUP-MIB", "rbnCctGrpQTxPackets"), ("RBN-CIRCUIT-GROUP-MIB", "rbnCctGrpQWredDroppedOctets"), ("RBN-CIRCUIT-GROUP-MIB", "rbnCctGrpQWredDroppedPkts"), ("RBN-CIRCUIT-GROUP-MIB", "rbnCctGrpQTailDroppedOctets"), ("RBN-CIRCUIT-GROUP-MIB", "rbnCctGrpQTailDroppedPkts"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    rbnCctGrpQStatsGroup = rbnCctGrpQStatsGroup.setStatus('current')
rbnCctGrpPolicyStatsGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2352, 2, 43, 2, 2, 3)).setObjects(("RBN-CIRCUIT-GROUP-MIB", "rbnCctGrpRLPolicyName"), ("RBN-CIRCUIT-GROUP-MIB", "rbnCctGrpRLPolicyConformOctets"), ("RBN-CIRCUIT-GROUP-MIB", "rbnCctGrpRLPolicyConformPkts"), ("RBN-CIRCUIT-GROUP-MIB", "rbnCctGrpRLPolicyExceedOctets"), ("RBN-CIRCUIT-GROUP-MIB", "rbnCctGrpRLPolicyExceedPkts"), ("RBN-CIRCUIT-GROUP-MIB", "rbnCctGrpRLPolicyExceedDroppedOctets"), ("RBN-CIRCUIT-GROUP-MIB", "rbnCctGrpRLPolicyExceedDroppedPkts"), ("RBN-CIRCUIT-GROUP-MIB", "rbnCctGrpRLPolicyViolateOctets"), ("RBN-CIRCUIT-GROUP-MIB", "rbnCctGrpRLPolicyViolatePkts"), ("RBN-CIRCUIT-GROUP-MIB", "rbnCctGrpRLPolicyViolateDroppedOctets"), ("RBN-CIRCUIT-GROUP-MIB", "rbnCctGrpRLPolicyViolateDroppedPkts"), ("RBN-CIRCUIT-GROUP-MIB", "rbnCctGrpRLClassName"), ("RBN-CIRCUIT-GROUP-MIB", "rbnCctGrpRLClassConformOctets"), ("RBN-CIRCUIT-GROUP-MIB", "rbnCctGrpRLClassConformPkts"), ("RBN-CIRCUIT-GROUP-MIB", "rbnCctGrpRLClassConformDroppedOctets"), ("RBN-CIRCUIT-GROUP-MIB", "rbnCctGrpRLClassConformDroppedPkts"), ("RBN-CIRCUIT-GROUP-MIB", "rbnCctGrpRLClassExceedOctets"), ("RBN-CIRCUIT-GROUP-MIB", "rbnCctGrpRLClassExceedPkts"), ("RBN-CIRCUIT-GROUP-MIB", "rbnCctGrpRLClassExceedDroppedOctets"), ("RBN-CIRCUIT-GROUP-MIB", "rbnCctGrpRLClassExceedDroppedPkts"), ("RBN-CIRCUIT-GROUP-MIB", "rbnCctGrpRLClassViolateOctets"), ("RBN-CIRCUIT-GROUP-MIB", "rbnCctGrpRLClassViolatePkts"), ("RBN-CIRCUIT-GROUP-MIB", "rbnCctGrpRLClassViolateDroppedOctets"), ("RBN-CIRCUIT-GROUP-MIB", "rbnCctGrpRLClassViolateDroppedPkts"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    rbnCctGrpPolicyStatsGroup = rbnCctGrpPolicyStatsGroup.setStatus('current')
mibBuilder.exportSymbols("RBN-CIRCUIT-GROUP-MIB", rbnCCircuitGroupCompliance=rbnCCircuitGroupCompliance, rbnCctGrpRLPolicyViolateDroppedOctets=rbnCctGrpRLPolicyViolateDroppedOctets, rbnCircuitGroupStatsEntry=rbnCircuitGroupStatsEntry, rbnCctGrpRLClassExceedOctets=rbnCctGrpRLClassExceedOctets, rbnCircuitGroupConformGroups=rbnCircuitGroupConformGroups, rbnCctGrpQWredDroppedPkts=rbnCctGrpQWredDroppedPkts, rbnCctGrpQTailDroppedOctets=rbnCctGrpQTailDroppedOctets, rbnCctGrpTxMulticastOctets=rbnCctGrpTxMulticastOctets, rbnCctGrpRLPolicyType=rbnCctGrpRLPolicyType, rbnCircuitGroupMib=rbnCircuitGroupMib, rbnCctGrpRLClassViolatePkts=rbnCctGrpRLClassViolatePkts, rbnCctGrpUnknownEncapsOctets=rbnCctGrpUnknownEncapsOctets, rbnCctGrpRLClassExceedDroppedOctets=rbnCctGrpRLClassExceedDroppedOctets, rbnCctGrpQTailDroppedPkts=rbnCctGrpQTailDroppedPkts, rbnCctGrpRLPolicyConformPkts=rbnCctGrpRLPolicyConformPkts, rbnCctGrpTxPackets=rbnCctGrpTxPackets, rbnCctGrpRxMulticastPackets=rbnCctGrpRxMulticastPackets, rbnCctGrpRLClassViolateOctets=rbnCctGrpRLClassViolateOctets, rbnCctGrpRLClassExceedDroppedPkts=rbnCctGrpRLClassExceedDroppedPkts, rbnCctGrpStatsGroup=rbnCctGrpStatsGroup, rbnCctGrpRLClassConformPkts=rbnCctGrpRLClassConformPkts, rbnCctGrpRLClassConformDroppedOctets=rbnCctGrpRLClassConformDroppedOctets, rbnCctGrpRxOctets=rbnCctGrpRxOctets, rbnCctGrpDownDroppedOctets=rbnCctGrpDownDroppedOctets, rbnCctGrpRLPolicyViolatePkts=rbnCctGrpRLPolicyViolatePkts, rbnCctGrpRLPolicyViolateDroppedPkts=rbnCctGrpRLPolicyViolateDroppedPkts, rbnCctGrpTxOctets=rbnCctGrpTxOctets, rbnCctGrpPolicyStatsGroup=rbnCctGrpPolicyStatsGroup, rbnCctGrpRLPolicyStatsTable=rbnCctGrpRLPolicyStatsTable, rbnCctGrpRxPackets=rbnCctGrpRxPackets, rbnCctGrpRLClassExceedPkts=rbnCctGrpRLClassExceedPkts, rbnCctGrpRxMulticastOctets=rbnCctGrpRxMulticastOctets, rbnCctGrpRLPolicyStatsEntry=rbnCctGrpRLPolicyStatsEntry, rbnCctGrpRLClassStatsEntry=rbnCctGrpRLClassStatsEntry, rbnCctGrpAdjDroppedOctets=rbnCctGrpAdjDroppedOctets, rbnCctGrpAdjDroppedPackets=rbnCctGrpAdjDroppedPackets, PYSNMP_MODULE_ID=rbnCircuitGroupMib, rbnCctGrpQueueId=rbnCctGrpQueueId, rbnCctGrpQStatsGroup=rbnCctGrpQStatsGroup, rbnCctGrpRLPolicyExceedOctets=rbnCctGrpRLPolicyExceedOctets, rbnCctGrpUnreachDroppedPackets=rbnCctGrpUnreachDroppedPackets, rbnCctGrpRLPolicyConformOctets=rbnCctGrpRLPolicyConformOctets, rbnCctGrpRLClassId=rbnCctGrpRLClassId, rbnCctGrpRLPolicyExceedDroppedOctets=rbnCctGrpRLPolicyExceedDroppedOctets, rbnCctGrpRLClassConformDroppedPkts=rbnCctGrpRLClassConformDroppedPkts, rbnCircuitGroupStatsTable=rbnCircuitGroupStatsTable, rbnCctGrpRLPolicyExceedPkts=rbnCctGrpRLPolicyExceedPkts, rbnCctGrpUnknownEncapsPackets=rbnCctGrpUnknownEncapsPackets, rbnCctGrpQTxPackets=rbnCctGrpQTxPackets, rbnCctGrpRLPolicyViolateOctets=rbnCctGrpRLPolicyViolateOctets, rbnCctGrpRLClassStatsTable=rbnCctGrpRLClassStatsTable, rbnCircuitGroupConformance=rbnCircuitGroupConformance, rbnCctGrpQWredDroppedOctets=rbnCctGrpQWredDroppedOctets, rbnCctGrpRLClassName=rbnCctGrpRLClassName, rbnCctGrpRLClassViolateDroppedPkts=rbnCctGrpRLClassViolateDroppedPkts, rbnCctGrpRLPolicyExceedDroppedPkts=rbnCctGrpRLPolicyExceedDroppedPkts, rbnCircuitGroupQEntry=rbnCircuitGroupQEntry, rbnCctGrpQTxOctets=rbnCctGrpQTxOctets, rbnCctGrpRLClassViolateDroppedOctets=rbnCctGrpRLClassViolateDroppedOctets, rbnCctGrpName=rbnCctGrpName, rbnCctGrpRLClassConformOctets=rbnCctGrpRLClassConformOctets, rbnCircuitGroupQTable=rbnCircuitGroupQTable, rbnCctGrpDownDroppedPackets=rbnCctGrpDownDroppedPackets, rbnCircuitGroupCompliances=rbnCircuitGroupCompliances, rbnCctGrpTxMulticastPackets=rbnCctGrpTxMulticastPackets, rbnCctGrpUnreachDroppedOctets=rbnCctGrpUnreachDroppedOctets, rbnCctGrpRLPolicyName=rbnCctGrpRLPolicyName, rbnCircuitGroupObjects=rbnCircuitGroupObjects)
