#
# PySNMP MIB module GSC-OPT-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/GSC-OPT-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 19:06:32 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, ObjectIdentifier, OctetString = mibBuilder.importSymbols("ASN1", "Integer", "ObjectIdentifier", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
SingleValueConstraint, ValueSizeConstraint, ValueRangeConstraint, ConstraintsIntersection, ConstraintsUnion = mibBuilder.importSymbols("ASN1-REFINEMENT", "SingleValueConstraint", "ValueSizeConstraint", "ValueRangeConstraint", "ConstraintsIntersection", "ConstraintsUnion")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
Counter64, ModuleIdentity, Integer32, MibScalar, MibTable, MibTableRow, MibTableColumn, NotificationType, TimeTicks, MibIdentifier, Unsigned32, iso, enterprises, IpAddress, Counter32, ObjectIdentity, Bits, Gauge32 = mibBuilder.importSymbols("SNMPv2-SMI", "Counter64", "ModuleIdentity", "Integer32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "NotificationType", "TimeTicks", "MibIdentifier", "Unsigned32", "iso", "enterprises", "IpAddress", "Counter32", "ObjectIdentity", "Bits", "Gauge32")
TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString")
codex = MibIdentifier((1, 3, 6, 1, 4, 1, 449))
cdxProductSpecific = MibIdentifier((1, 3, 6, 1, 4, 1, 449, 2))
cdx6500 = MibIdentifier((1, 3, 6, 1, 4, 1, 449, 2, 1))
cdx6500Configuration = MibIdentifier((1, 3, 6, 1, 4, 1, 449, 2, 1, 2))
cdx6500CfgProtocolGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1))
cdx6500PCTPortProtocolGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 1))
cdx6500PCTStationProtocolGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 3))
cdx6500Statistics = MibIdentifier((1, 3, 6, 1, 4, 1, 449, 2, 1, 3))
cdx6500StatProtocolGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1))
cdx6500PSTPortProtocolGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1))
cdx6500PSTStationProtocolGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 3))
cdx6500Controls = MibIdentifier((1, 3, 6, 1, 4, 1, 449, 2, 1, 4))
class DisplayString(OctetString):
    pass

cdx6500PPCTGSCPortTable = MibTable((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 1, 29), )
if mibBuilder.loadTexts: cdx6500PPCTGSCPortTable.setStatus('mandatory')
cdx6500PPCTGSCPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 1, 29, 1), ).setIndexNames((0, "GSC-OPT-MIB", "cdx6500GSCPCfgPortNumber"))
if mibBuilder.loadTexts: cdx6500PPCTGSCPortEntry.setStatus('mandatory')
cdx6500GSCPCfgPortNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 1, 29, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 54))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500GSCPCfgPortNumber.setStatus('mandatory')
cdx6500GSCPCfgPortType = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 1, 29, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(51))).clone(namedValues=NamedValues(("gsc", 51)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500GSCPCfgPortType.setStatus('mandatory')
cdx6500GSCPCfgSubtype = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 1, 29, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("gscTpad", 1), ("gscHpad", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500GSCPCfgSubtype.setStatus('mandatory')
cdx6500GSCPCfgClockSpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 1, 29, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(4, 8, 13, 14, 15, 16, 100))).clone(namedValues=NamedValues(("speed1200", 4), ("speed1800", 8), ("speed2400", 13), ("speed4800", 14), ("speed9600", 15), ("speed19200", 16), ("nc", 100)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500GSCPCfgClockSpeed.setStatus('mandatory')
cdx6500GSCPCfgNumStations = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 1, 29, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 24))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500GSCPCfgNumStations.setStatus('mandatory')
cdx6500GSCPCfgMinPollPeriod = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 1, 29, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500GSCPCfgMinPollPeriod.setStatus('mandatory')
cdx6500GSCPCfgPollRespTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 1, 29, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500GSCPCfgPollRespTimer.setStatus('mandatory')
cdx6500GSCPCfgAckTimeOut = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 1, 29, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500GSCPCfgAckTimeOut.setStatus('mandatory')
cdx6500GSCPCfgInterCharTimeOut = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 1, 29, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 5))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500GSCPCfgInterCharTimeOut.setStatus('mandatory')
cdx6500GSCPCfgBroadcastHoldTimeOut = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 1, 29, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500GSCPCfgBroadcastHoldTimeOut.setStatus('mandatory')
cdx6500GSCPCfgSolicitedTimeOut = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 1, 29, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500GSCPCfgSolicitedTimeOut.setStatus('mandatory')
cdx6500GSCPCfgIdleDiscTimeOut = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 1, 29, 1, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500GSCPCfgIdleDiscTimeOut.setStatus('mandatory')
cdx6500GSCPCfgAutocallRetryTimeOut = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 1, 29, 1, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500GSCPCfgAutocallRetryTimeOut.setStatus('mandatory')
cdx6500GSCPCfgMaxAutocallRetries = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 1, 29, 1, 14), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500GSCPCfgMaxAutocallRetries.setStatus('mandatory')
cdx6500GSCPCfgN1 = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 1, 29, 1, 15), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500GSCPCfgN1.setStatus('mandatory')
cdx6500GSCPCfgN2 = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 1, 29, 1, 16), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500GSCPCfgN2.setStatus('mandatory')
cdx6500GSCPCfgNumRetries = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 1, 29, 1, 17), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500GSCPCfgNumRetries.setStatus('mandatory')
cdx6500GSCPCfgPortAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 1, 29, 1, 18), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 15))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500GSCPCfgPortAddress.setStatus('mandatory')
cdx6500GSCPCfgPortOptions = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 1, 29, 1, 19), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500GSCPCfgPortOptions.setStatus('mandatory')
cdx6500GSCPCfgConnType = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 1, 29, 1, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 16, 100))).clone(namedValues=NamedValues(("simp", 1), ("simpa", 16), ("nc", 100)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500GSCPCfgConnType.setStatus('mandatory')
cdx6500GSCPCfgWakeUpTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 1, 29, 1, 21), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 30))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500GSCPCfgWakeUpTimer.setStatus('mandatory')
cdx6500GSCPCfgElectricalInterfaceType = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 1, 29, 1, 22), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("v24", 1), ("v35", 2), ("v36", 3), ("x21", 4), ("none", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500GSCPCfgElectricalInterfaceType.setStatus('mandatory')
cdx6500GSCPCfgV24ElectricalInterfaceOption = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 1, 29, 1, 23), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("ri", 1), ("tm", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500GSCPCfgV24ElectricalInterfaceOption.setStatus('mandatory')
cdx6500GSCPCfgHighSpeedElectricalInterfaceOption = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 1, 29, 1, 24), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("none", 1), ("xover", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500GSCPCfgHighSpeedElectricalInterfaceOption.setStatus('mandatory')
cdx6500SPCTGSCStationTable = MibTable((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 3, 8), )
if mibBuilder.loadTexts: cdx6500SPCTGSCStationTable.setStatus('mandatory')
cdx6500SPCTGSCStationEntry = MibTableRow((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 3, 8, 1), ).setIndexNames((0, "GSC-OPT-MIB", "cdx6500GSCSCfgPortNumber"), (0, "GSC-OPT-MIB", "cdx6500GSCSCfgStationNumber"))
if mibBuilder.loadTexts: cdx6500SPCTGSCStationEntry.setStatus('mandatory')
cdx6500GSCSCfgPortNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 3, 8, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 54))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500GSCSCfgPortNumber.setStatus('mandatory')
cdx6500GSCSCfgStationNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 3, 8, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 24))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500GSCSCfgStationNumber.setStatus('mandatory')
cdx6500GSCSCfgStationAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 3, 8, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 29))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500GSCSCfgStationAddress.setStatus('mandatory')
cdx6500GSCSCfgRemoteAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 3, 8, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 29))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500GSCSCfgRemoteAddress.setStatus('mandatory')
cdx6500GSCSCfgAutocallMnem = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 3, 8, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 8))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500GSCSCfgAutocallMnem.setStatus('mandatory')
cdx6500GSCSCfgProtocolId = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 3, 8, 1, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500GSCSCfgProtocolId.setStatus('mandatory')
cdx6500GSCSCfgBillingRecords = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 3, 8, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("billingOff", 1), ("billingOn", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500GSCSCfgBillingRecords.setStatus('mandatory')
cdx6500GSCSCfgStationOptions = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 3, 8, 1, 8), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(4, 9))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500GSCSCfgStationOptions.setStatus('mandatory')
cdx6500PPSTGSCPortTable = MibTable((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 30), )
if mibBuilder.loadTexts: cdx6500PPSTGSCPortTable.setStatus('mandatory')
cdx6500PPSTGSCPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 30, 1), ).setIndexNames((0, "GSC-OPT-MIB", "cdx6500GSCPStatPortNumber"))
if mibBuilder.loadTexts: cdx6500PPSTGSCPortEntry.setStatus('mandatory')
cdx6500GSCPStatPortNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 30, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 54))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500GSCPStatPortNumber.setStatus('mandatory')
cdx6500GSCPStatPortType = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 30, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(51))).clone(namedValues=NamedValues(("gsc", 51)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500GSCPStatPortType.setStatus('mandatory')
cdx6500GSCPStatSubtype = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 30, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("gscTpad", 1), ("gscHpad", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500GSCPStatSubtype.setStatus('mandatory')
cdx6500GSCPStatPortStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 30, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 50))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1), ("busyOut", 2), ("up", 3), ("down", 4), ("newvalDisabled", 50)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500GSCPStatPortStatus.setStatus('mandatory')
cdx6500GSCPStatPortSpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 30, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500GSCPStatPortSpeed.setStatus('mandatory')
cdx6500GSCPStatLastStatsReset = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 30, 1, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500GSCPStatLastStatsReset.setStatus('mandatory')
cdx6500GSCPStatCharsIn = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 30, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500GSCPStatCharsIn.setStatus('mandatory')
cdx6500GSCPStatCharsOut = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 30, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500GSCPStatCharsOut.setStatus('mandatory')
cdx6500GSCPStatCharsInPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 30, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500GSCPStatCharsInPerSec.setStatus('mandatory')
cdx6500GSCPStatCharsOutPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 30, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500GSCPStatCharsOutPerSec.setStatus('mandatory')
cdx6500GSCPStatOverrunErrs = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 30, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500GSCPStatOverrunErrs.setStatus('mandatory')
cdx6500GSCPStatChecksumErrs = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 30, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500GSCPStatChecksumErrs.setStatus('mandatory')
cdx6500GSCPStatOverlengthFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 30, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500GSCPStatOverlengthFrames.setStatus('mandatory')
cdx6500GSCPStatPollRespTimeOuts = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 30, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500GSCPStatPollRespTimeOuts.setStatus('mandatory')
cdx6500GSCPStatIntercharTimeOuts = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 30, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500GSCPStatIntercharTimeOuts.setStatus('mandatory')
cdx6500GSCPStatAckTimeOuts = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 30, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500GSCPStatAckTimeOuts.setStatus('mandatory')
cdx6500GSCPStatPADFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 30, 1, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500GSCPStatPADFrames.setStatus('mandatory')
cdx6500GSCPStatSADFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 30, 1, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500GSCPStatSADFrames.setStatus('mandatory')
cdx6500GSCPStatUADFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 30, 1, 19), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500GSCPStatUADFrames.setStatus('mandatory')
cdx6500GSCPStatBROFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 30, 1, 20), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500GSCPStatBROFrames.setStatus('mandatory')
cdx6500GSCPStatPADChars = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 30, 1, 21), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500GSCPStatPADChars.setStatus('mandatory')
cdx6500GSCPStatSADChars = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 30, 1, 22), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500GSCPStatSADChars.setStatus('mandatory')
cdx6500GSCPStatUADChars = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 30, 1, 23), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500GSCPStatUADChars.setStatus('mandatory')
cdx6500GSCPStatENQs = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 30, 1, 24), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500GSCPStatENQs.setStatus('mandatory')
cdx6500GSCPStatPACChars = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 30, 1, 25), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500GSCPStatPACChars.setStatus('mandatory')
cdx6500GSCPStatSACChars = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 30, 1, 26), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500GSCPStatSACChars.setStatus('mandatory')
cdx6500GSCPStatUACChars = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 30, 1, 27), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500GSCPStatUACChars.setStatus('mandatory')
cdx6500GSCPStatPolls = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 30, 1, 28), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500GSCPStatPolls.setStatus('mandatory')
cdx6500SPSTGSCStationTable = MibTable((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 3, 7), )
if mibBuilder.loadTexts: cdx6500SPSTGSCStationTable.setStatus('mandatory')
cdx6500SPSTGSCStationEntry = MibTableRow((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 3, 7, 1), ).setIndexNames((0, "GSC-OPT-MIB", "cdx6500GSCSStatPortNumber"), (0, "GSC-OPT-MIB", "cdx6500GSCSStatStationNum"))
if mibBuilder.loadTexts: cdx6500SPSTGSCStationEntry.setStatus('mandatory')
cdx6500GSCSStatPortNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 3, 7, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 54))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500GSCSStatPortNumber.setStatus('mandatory')
cdx6500GSCSStatStationNum = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 3, 7, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 24))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500GSCSStatStationNum.setStatus('mandatory')
cdx6500GSCSStatPortType = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 3, 7, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(51))).clone(namedValues=NamedValues(("gsc", 51)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500GSCSStatPortType.setStatus('mandatory')
cdx6500GSCSStatSubtype = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 3, 7, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("gscTpad", 1), ("gscHpad", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500GSCSStatSubtype.setStatus('mandatory')
cdx6500GSCSStatStationAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 3, 7, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 29))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500GSCSStatStationAddress.setStatus('mandatory')
cdx6500GSCSStatStationStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 3, 7, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 50))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1), ("busyOut", 2), ("up", 3), ("down", 4), ("newvalDisabled", 50)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500GSCSStatStationStatus.setStatus('mandatory')
cdx6500GSCSStatLastStatsReset = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 3, 7, 1, 7), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500GSCSStatLastStatsReset.setStatus('mandatory')
cdx6500GSCSStatCharsIn = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 3, 7, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500GSCSStatCharsIn.setStatus('mandatory')
cdx6500GSCSStatCharsOut = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 3, 7, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500GSCSStatCharsOut.setStatus('mandatory')
cdx6500GSCSStatCharsInPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 3, 7, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500GSCSStatCharsInPerSec.setStatus('mandatory')
cdx6500GSCSStatCharsOutPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 3, 7, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500GSCSStatCharsOutPerSec.setStatus('mandatory')
cdx6500GSCSStatChecksumErrs = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 3, 7, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500GSCSStatChecksumErrs.setStatus('mandatory')
cdx6500GSCSStatOverlengthFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 3, 7, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500GSCSStatOverlengthFrames.setStatus('mandatory')
cdx6500GSCSStatPollRespTimeOuts = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 3, 7, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500GSCSStatPollRespTimeOuts.setStatus('mandatory')
cdx6500GSCSStatIntercharTimeOuts = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 3, 7, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500GSCSStatIntercharTimeOuts.setStatus('mandatory')
cdx6500GSCSStatAckTimeOuts = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 3, 7, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500GSCSStatAckTimeOuts.setStatus('mandatory')
cdx6500GSCSStatPADFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 3, 7, 1, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500GSCSStatPADFrames.setStatus('mandatory')
cdx6500GSCSStatSADFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 3, 7, 1, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500GSCSStatSADFrames.setStatus('mandatory')
cdx6500GSCSStatUADFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 3, 7, 1, 19), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500GSCSStatUADFrames.setStatus('mandatory')
cdx6500GSCSStatBROFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 3, 7, 1, 20), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500GSCSStatBROFrames.setStatus('mandatory')
cdx6500GSCSStatPADChars = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 3, 7, 1, 21), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500GSCSStatPADChars.setStatus('mandatory')
cdx6500GSCSStatSADChars = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 3, 7, 1, 22), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500GSCSStatSADChars.setStatus('mandatory')
cdx6500GSCSStatUADChars = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 3, 7, 1, 23), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500GSCSStatUADChars.setStatus('mandatory')
cdx6500GSCSStatENQ = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 3, 7, 1, 24), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500GSCSStatENQ.setStatus('mandatory')
cdx6500GSCSStatPACChars = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 3, 7, 1, 25), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500GSCSStatPACChars.setStatus('mandatory')
cdx6500GSCSStatSACChars = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 3, 7, 1, 26), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500GSCSStatSACChars.setStatus('mandatory')
cdx6500GSCSStatUACChars = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 3, 7, 1, 27), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500GSCSStatUACChars.setStatus('mandatory')
cdx6500GSCSStatPolls = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 3, 7, 1, 28), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500GSCSStatPolls.setStatus('mandatory')
cdx6500GSCSStatPADMessages = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 3, 7, 1, 29), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500GSCSStatPADMessages.setStatus('mandatory')
cdx6500GSCSStatUADMessages = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 3, 7, 1, 30), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500GSCSStatUADMessages.setStatus('mandatory')
cdx6500GSCSStatSADMessages = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 3, 7, 1, 31), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500GSCSStatSADMessages.setStatus('mandatory')
cdx6500GSCSStatBROMessages = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 3, 7, 1, 32), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500GSCSStatBROMessages.setStatus('mandatory')
cdx6500GSCSStatSolicitAbort = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 3, 7, 1, 33), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500GSCSStatSolicitAbort.setStatus('mandatory')
cdx6500GSCSStatStatusEnq = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 3, 7, 1, 34), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500GSCSStatStatusEnq.setStatus('mandatory')
cdx6500GSCSStatDeviceUp = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 3, 7, 1, 35), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500GSCSStatDeviceUp.setStatus('mandatory')
cdx6500GSCSStatDeviceDown = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 3, 7, 1, 36), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500GSCSStatDeviceDown.setStatus('mandatory')
cdx6500GSCSStatCallCurrentStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 3, 7, 1, 37), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("inhibited", 1), ("disconnected", 2), ("calling", 3), ("called", 4), ("connected", 5), ("notDefined", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500GSCSStatCallCurrentStatus.setStatus('mandatory')
cdx6500GSCSStatLastClrCauseCode = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 3, 7, 1, 38), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500GSCSStatLastClrCauseCode.setStatus('mandatory')
cdx6500GSCSStatLastClrDiagCode = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 3, 7, 1, 39), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500GSCSStatLastClrDiagCode.setStatus('mandatory')
cdx6500GSCSStatLastInCalledAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 3, 7, 1, 40), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500GSCSStatLastInCalledAddress.setStatus('mandatory')
cdx6500GSCSStatLastInCallingAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 3, 7, 1, 41), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500GSCSStatLastInCallingAddress.setStatus('mandatory')
cdx6500GSCSStatLastInCallFacilities = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 3, 7, 1, 42), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500GSCSStatLastInCallFacilities.setStatus('mandatory')
cdx6500GSCSStatLastInCallCUD = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 3, 7, 1, 43), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500GSCSStatLastInCallCUD.setStatus('mandatory')
cdx6500GSCSStatLastOutCalledAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 3, 7, 1, 44), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500GSCSStatLastOutCalledAddress.setStatus('mandatory')
cdx6500GSCSStatLastOutCallingAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 3, 7, 1, 45), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500GSCSStatLastOutCallingAddress.setStatus('mandatory')
cdx6500GSCSStatLastOutCallFacilities = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 3, 7, 1, 46), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500GSCSStatLastOutCallFacilities.setStatus('mandatory')
cdx6500GSCSStatLastOutCallCUD = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 3, 7, 1, 47), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500GSCSStatLastOutCallCUD.setStatus('mandatory')
cdx6500ContGSC = MibIdentifier((1, 3, 6, 1, 4, 1, 449, 2, 1, 4, 12))
cdx6500ContGSCPTable = MibTable((1, 3, 6, 1, 4, 1, 449, 2, 1, 4, 12, 1), )
if mibBuilder.loadTexts: cdx6500ContGSCPTable.setStatus('mandatory')
cdx6500ContGSCPTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 449, 2, 1, 4, 12, 1, 1), ).setIndexNames((0, "GSC-OPT-MIB", "cdx6500ContGSCPPortNum"))
if mibBuilder.loadTexts: cdx6500ContGSCPTableEntry.setStatus('mandatory')
cdx6500ContGSCPPortNum = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 4, 12, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 54)))
if mibBuilder.loadTexts: cdx6500ContGSCPPortNum.setStatus('mandatory')
cdx6500ContGSCPBootPort = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 4, 12, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("boot", 1), ("noBoot", 2)))).setMaxAccess("writeonly")
if mibBuilder.loadTexts: cdx6500ContGSCPBootPort.setStatus('mandatory')
cdx6500ContGSCPEnablePort = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 4, 12, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("noEnable", 2)))).setMaxAccess("writeonly")
if mibBuilder.loadTexts: cdx6500ContGSCPEnablePort.setStatus('mandatory')
cdx6500ContGSCPDisablePort = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 4, 12, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disable", 1), ("noDisable", 2)))).setMaxAccess("writeonly")
if mibBuilder.loadTexts: cdx6500ContGSCPDisablePort.setStatus('mandatory')
cdx6500ContGSCSTable = MibTable((1, 3, 6, 1, 4, 1, 449, 2, 1, 4, 12, 2), )
if mibBuilder.loadTexts: cdx6500ContGSCSTable.setStatus('mandatory')
cdx6500ContGSCSTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 449, 2, 1, 4, 12, 2, 1), ).setIndexNames((0, "GSC-OPT-MIB", "cdx6500ContGSCSPortNum"), (0, "GSC-OPT-MIB", "cdx6500ContGSCSStnNum"))
if mibBuilder.loadTexts: cdx6500ContGSCSTableEntry.setStatus('mandatory')
cdx6500ContGSCSPortNum = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 4, 12, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 54)))
if mibBuilder.loadTexts: cdx6500ContGSCSPortNum.setStatus('mandatory')
cdx6500ContGSCSStnNum = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 4, 12, 2, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 24)))
if mibBuilder.loadTexts: cdx6500ContGSCSStnNum.setStatus('mandatory')
cdx6500ContGSCSBootStation = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 4, 12, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("boot", 1), ("noBoot", 2)))).setMaxAccess("writeonly")
if mibBuilder.loadTexts: cdx6500ContGSCSBootStation.setStatus('mandatory')
cdx6500ContGSCSEnableStation = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 4, 12, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("noEnable", 2)))).setMaxAccess("writeonly")
if mibBuilder.loadTexts: cdx6500ContGSCSEnableStation.setStatus('mandatory')
cdx6500ContGSCSDisableStation = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 4, 12, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disable", 1), ("noDisable", 2)))).setMaxAccess("writeonly")
if mibBuilder.loadTexts: cdx6500ContGSCSDisableStation.setStatus('mandatory')
mibBuilder.exportSymbols("GSC-OPT-MIB", cdx6500ContGSC=cdx6500ContGSC, cdx6500GSCPCfgAutocallRetryTimeOut=cdx6500GSCPCfgAutocallRetryTimeOut, cdx6500GSCPStatPollRespTimeOuts=cdx6500GSCPStatPollRespTimeOuts, cdx6500GSCPStatCharsIn=cdx6500GSCPStatCharsIn, cdx6500PCTPortProtocolGroup=cdx6500PCTPortProtocolGroup, cdx6500PSTStationProtocolGroup=cdx6500PSTStationProtocolGroup, cdx6500GSCSStatENQ=cdx6500GSCSStatENQ, cdx6500GSCSStatLastInCallCUD=cdx6500GSCSStatLastInCallCUD, cdx6500GSCSStatUACChars=cdx6500GSCSStatUACChars, cdx6500GSCPCfgN2=cdx6500GSCPCfgN2, cdx6500SPCTGSCStationEntry=cdx6500SPCTGSCStationEntry, cdx6500GSCPStatPortType=cdx6500GSCPStatPortType, cdx6500ContGSCPTableEntry=cdx6500ContGSCPTableEntry, cdx6500GSCSStatPortNumber=cdx6500GSCSStatPortNumber, cdx6500GSCSCfgStationNumber=cdx6500GSCSCfgStationNumber, cdx6500GSCSStatLastInCalledAddress=cdx6500GSCSStatLastInCalledAddress, cdx6500GSCSStatStatusEnq=cdx6500GSCSStatStatusEnq, cdx6500GSCSStatUADMessages=cdx6500GSCSStatUADMessages, cdx6500PPSTGSCPortEntry=cdx6500PPSTGSCPortEntry, cdx6500GSCPCfgWakeUpTimer=cdx6500GSCPCfgWakeUpTimer, cdx6500GSCSStatLastStatsReset=cdx6500GSCSStatLastStatsReset, cdx6500GSCSStatBROFrames=cdx6500GSCSStatBROFrames, cdx6500GSCPCfgPortOptions=cdx6500GSCPCfgPortOptions, cdx6500GSCSStatStationNum=cdx6500GSCSStatStationNum, DisplayString=DisplayString, cdx6500GSCSStatStationStatus=cdx6500GSCSStatStationStatus, cdx6500GSCSCfgStationAddress=cdx6500GSCSCfgStationAddress, cdx6500GSCPStatPolls=cdx6500GSCPStatPolls, cdx6500ContGSCPTable=cdx6500ContGSCPTable, cdx6500GSCPStatCharsInPerSec=cdx6500GSCPStatCharsInPerSec, cdxProductSpecific=cdxProductSpecific, cdx6500GSCSStatCallCurrentStatus=cdx6500GSCSStatCallCurrentStatus, cdx6500=cdx6500, cdx6500GSCPStatENQs=cdx6500GSCPStatENQs, cdx6500GSCSCfgProtocolId=cdx6500GSCSCfgProtocolId, cdx6500GSCSStatLastInCallFacilities=cdx6500GSCSStatLastInCallFacilities, cdx6500GSCSStatSADMessages=cdx6500GSCSStatSADMessages, cdx6500SPCTGSCStationTable=cdx6500SPCTGSCStationTable, cdx6500GSCSCfgStationOptions=cdx6500GSCSCfgStationOptions, cdx6500GSCPCfgSolicitedTimeOut=cdx6500GSCPCfgSolicitedTimeOut, cdx6500GSCPStatSADFrames=cdx6500GSCPStatSADFrames, cdx6500GSCSStatCharsOutPerSec=cdx6500GSCSStatCharsOutPerSec, cdx6500GSCSStatSADFrames=cdx6500GSCSStatSADFrames, cdx6500PSTPortProtocolGroup=cdx6500PSTPortProtocolGroup, cdx6500GSCPStatPortStatus=cdx6500GSCPStatPortStatus, cdx6500GSCSStatLastInCallingAddress=cdx6500GSCSStatLastInCallingAddress, cdx6500GSCPCfgBroadcastHoldTimeOut=cdx6500GSCPCfgBroadcastHoldTimeOut, cdx6500GSCPCfgSubtype=cdx6500GSCPCfgSubtype, cdx6500GSCPStatCharsOut=cdx6500GSCPStatCharsOut, cdx6500GSCPCfgPortNumber=cdx6500GSCPCfgPortNumber, cdx6500GSCSStatDeviceUp=cdx6500GSCSStatDeviceUp, cdx6500GSCPCfgHighSpeedElectricalInterfaceOption=cdx6500GSCPCfgHighSpeedElectricalInterfaceOption, cdx6500GSCPCfgMinPollPeriod=cdx6500GSCPCfgMinPollPeriod, cdx6500GSCPStatUACChars=cdx6500GSCPStatUACChars, cdx6500GSCSStatLastOutCallFacilities=cdx6500GSCSStatLastOutCallFacilities, cdx6500GSCSStatPADChars=cdx6500GSCSStatPADChars, cdx6500GSCSCfgBillingRecords=cdx6500GSCSCfgBillingRecords, cdx6500GSCSStatAckTimeOuts=cdx6500GSCSStatAckTimeOuts, cdx6500GSCSStatSADChars=cdx6500GSCSStatSADChars, cdx6500CfgProtocolGroup=cdx6500CfgProtocolGroup, cdx6500PPCTGSCPortTable=cdx6500PPCTGSCPortTable, cdx6500GSCSStatUADFrames=cdx6500GSCSStatUADFrames, cdx6500GSCSStatPortType=cdx6500GSCSStatPortType, cdx6500PCTStationProtocolGroup=cdx6500PCTStationProtocolGroup, cdx6500GSCPCfgPortAddress=cdx6500GSCPCfgPortAddress, cdx6500GSCPCfgAckTimeOut=cdx6500GSCPCfgAckTimeOut, cdx6500ContGSCSTableEntry=cdx6500ContGSCSTableEntry, cdx6500ContGSCPPortNum=cdx6500ContGSCPPortNum, cdx6500GSCPCfgElectricalInterfaceType=cdx6500GSCPCfgElectricalInterfaceType, cdx6500GSCPCfgClockSpeed=cdx6500GSCPCfgClockSpeed, cdx6500GSCSStatStationAddress=cdx6500GSCSStatStationAddress, cdx6500GSCPCfgPollRespTimer=cdx6500GSCPCfgPollRespTimer, cdx6500ContGSCSEnableStation=cdx6500ContGSCSEnableStation, cdx6500GSCSStatUADChars=cdx6500GSCSStatUADChars, cdx6500GSCPStatSubtype=cdx6500GSCPStatSubtype, cdx6500GSCPStatSACChars=cdx6500GSCPStatSACChars, cdx6500GSCSCfgRemoteAddress=cdx6500GSCSCfgRemoteAddress, cdx6500GSCPStatIntercharTimeOuts=cdx6500GSCPStatIntercharTimeOuts, cdx6500GSCPStatLastStatsReset=cdx6500GSCPStatLastStatsReset, cdx6500GSCSStatDeviceDown=cdx6500GSCSStatDeviceDown, cdx6500GSCSStatIntercharTimeOuts=cdx6500GSCSStatIntercharTimeOuts, cdx6500GSCSStatCharsInPerSec=cdx6500GSCSStatCharsInPerSec, cdx6500Controls=cdx6500Controls, cdx6500GSCPCfgN1=cdx6500GSCPCfgN1, cdx6500GSCSCfgPortNumber=cdx6500GSCSCfgPortNumber, cdx6500GSCPStatBROFrames=cdx6500GSCPStatBROFrames, cdx6500GSCSStatLastOutCallCUD=cdx6500GSCSStatLastOutCallCUD, cdx6500GSCPCfgNumRetries=cdx6500GSCPCfgNumRetries, cdx6500GSCSCfgAutocallMnem=cdx6500GSCSCfgAutocallMnem, cdx6500ContGSCPEnablePort=cdx6500ContGSCPEnablePort, cdx6500GSCSStatPACChars=cdx6500GSCSStatPACChars, cdx6500GSCSStatSolicitAbort=cdx6500GSCSStatSolicitAbort, cdx6500ContGSCSTable=cdx6500ContGSCSTable, cdx6500Statistics=cdx6500Statistics, cdx6500GSCPStatPortSpeed=cdx6500GSCPStatPortSpeed, cdx6500ContGSCSPortNum=cdx6500ContGSCSPortNum, cdx6500GSCPStatPortNumber=cdx6500GSCPStatPortNumber, cdx6500GSCPStatOverrunErrs=cdx6500GSCPStatOverrunErrs, cdx6500GSCSStatOverlengthFrames=cdx6500GSCSStatOverlengthFrames, cdx6500ContGSCSBootStation=cdx6500ContGSCSBootStation, codex=codex, cdx6500SPSTGSCStationTable=cdx6500SPSTGSCStationTable, cdx6500ContGSCSStnNum=cdx6500ContGSCSStnNum, cdx6500GSCSStatSubtype=cdx6500GSCSStatSubtype, cdx6500GSCPStatPACChars=cdx6500GSCPStatPACChars, cdx6500GSCPStatChecksumErrs=cdx6500GSCPStatChecksumErrs, cdx6500GSCPCfgPortType=cdx6500GSCPCfgPortType, cdx6500GSCSStatSACChars=cdx6500GSCSStatSACChars, cdx6500GSCPCfgV24ElectricalInterfaceOption=cdx6500GSCPCfgV24ElectricalInterfaceOption, cdx6500GSCPStatPADChars=cdx6500GSCPStatPADChars, cdx6500GSCSStatLastOutCalledAddress=cdx6500GSCSStatLastOutCalledAddress, cdx6500GSCPCfgNumStations=cdx6500GSCPCfgNumStations, cdx6500GSCPStatUADChars=cdx6500GSCPStatUADChars, cdx6500GSCPStatCharsOutPerSec=cdx6500GSCPStatCharsOutPerSec, cdx6500ContGSCPDisablePort=cdx6500ContGSCPDisablePort, cdx6500GSCSStatPolls=cdx6500GSCSStatPolls, cdx6500GSCPStatPADFrames=cdx6500GSCPStatPADFrames, cdx6500SPSTGSCStationEntry=cdx6500SPSTGSCStationEntry, cdx6500GSCPStatAckTimeOuts=cdx6500GSCPStatAckTimeOuts, cdx6500GSCPCfgIdleDiscTimeOut=cdx6500GSCPCfgIdleDiscTimeOut, cdx6500GSCSStatLastClrDiagCode=cdx6500GSCSStatLastClrDiagCode, cdx6500GSCSStatChecksumErrs=cdx6500GSCSStatChecksumErrs, cdx6500ContGSCSDisableStation=cdx6500ContGSCSDisableStation, cdx6500GSCSStatLastClrCauseCode=cdx6500GSCSStatLastClrCauseCode, cdx6500Configuration=cdx6500Configuration, cdx6500GSCPCfgInterCharTimeOut=cdx6500GSCPCfgInterCharTimeOut, cdx6500GSCSStatBROMessages=cdx6500GSCSStatBROMessages, cdx6500GSCPCfgConnType=cdx6500GSCPCfgConnType, cdx6500StatProtocolGroup=cdx6500StatProtocolGroup, cdx6500GSCSStatLastOutCallingAddress=cdx6500GSCSStatLastOutCallingAddress, cdx6500GSCSStatCharsIn=cdx6500GSCSStatCharsIn, cdx6500PPCTGSCPortEntry=cdx6500PPCTGSCPortEntry, cdx6500GSCPStatUADFrames=cdx6500GSCPStatUADFrames, cdx6500GSCSStatPADMessages=cdx6500GSCSStatPADMessages, cdx6500GSCSStatCharsOut=cdx6500GSCSStatCharsOut, cdx6500PPSTGSCPortTable=cdx6500PPSTGSCPortTable, cdx6500GSCPStatOverlengthFrames=cdx6500GSCPStatOverlengthFrames, cdx6500GSCSStatPADFrames=cdx6500GSCSStatPADFrames, cdx6500GSCPCfgMaxAutocallRetries=cdx6500GSCPCfgMaxAutocallRetries, cdx6500ContGSCPBootPort=cdx6500ContGSCPBootPort, cdx6500GSCPStatSADChars=cdx6500GSCPStatSADChars, cdx6500GSCSStatPollRespTimeOuts=cdx6500GSCSStatPollRespTimeOuts)
