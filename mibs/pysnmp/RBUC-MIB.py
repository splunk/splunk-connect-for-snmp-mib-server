#
# PySNMP MIB module RBUC-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/RBUC-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 20:45:23 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, ObjectIdentifier, Integer = mibBuilder.importSymbols("ASN1", "OctetString", "ObjectIdentifier", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsIntersection, SingleValueConstraint, ConstraintsUnion, ValueRangeConstraint, ValueSizeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsIntersection", "SingleValueConstraint", "ConstraintsUnion", "ValueRangeConstraint", "ValueSizeConstraint")
satcomMibs, = mibBuilder.importSymbols("CODAN-SMI", "satcomMibs")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
ObjectIdentity, MibScalar, MibTable, MibTableRow, MibTableColumn, Gauge32, MibIdentifier, IpAddress, Counter32, Bits, ModuleIdentity, iso, TimeTicks, Counter64, Unsigned32, NotificationType, Integer32 = mibBuilder.importSymbols("SNMPv2-SMI", "ObjectIdentity", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Gauge32", "MibIdentifier", "IpAddress", "Counter32", "Bits", "ModuleIdentity", "iso", "TimeTicks", "Counter64", "Unsigned32", "NotificationType", "Integer32")
TestAndIncr, TruthValue, TextualConvention, DisplayString, DateAndTime, TimeInterval = mibBuilder.importSymbols("SNMPv2-TC", "TestAndIncr", "TruthValue", "TextualConvention", "DisplayString", "DateAndTime", "TimeInterval")
rbucMIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 23304, 2, 1))
rbucMIB.setRevisions(('2009-02-11 00:00',))
if mibBuilder.loadTexts: rbucMIB.setLastUpdated('200902110000Z')
if mibBuilder.loadTexts: rbucMIB.setOrganization('Codan Limited.')
class ComponentRevision(DisplayString):
    status = 'current'
    displayHint = 'vxx.yy'
    subtypeSpec = DisplayString.subtypeSpec + ValueSizeConstraint(2, 2)
    fixedLength = 2

class FaultStatus(TextualConvention, Bits):
    status = 'current'
    namedValues = NamedValues(("pafault", 0), ("lofault", 1), ("internalfault", 2), ("rcfault", 3), ("lnbfault", 4))

class TxStatus(TextualConvention, Bits):
    status = 'current'
    namedValues = NamedValues(("txrs232", 0), ("txrs485", 1), ("txfsk", 2), ("txfsk", 3), ("txsnmp", 4), ("txtelnet", 5))

configuration = MibIdentifier((1, 3, 6, 1, 4, 1, 23304, 2, 1, 1))
status = MibIdentifier((1, 3, 6, 1, 4, 1, 23304, 2, 1, 2))
info = MibIdentifier((1, 3, 6, 1, 4, 1, 23304, 2, 1, 3))
txSettings = MibIdentifier((1, 3, 6, 1, 4, 1, 23304, 2, 1, 1, 1))
pktProtocol = MibIdentifier((1, 3, 6, 1, 4, 1, 23304, 2, 1, 1, 2))
rcSetting = MibIdentifier((1, 3, 6, 1, 4, 1, 23304, 2, 1, 1, 3))
freqs = MibIdentifier((1, 3, 6, 1, 4, 1, 23304, 2, 1, 1, 4))
misc = MibIdentifier((1, 3, 6, 1, 4, 1, 23304, 2, 1, 1, 5))
txOn = MibScalar((1, 3, 6, 1, 4, 1, 23304, 2, 1, 1, 1, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: txOn.setStatus('current')
txDefault = MibScalar((1, 3, 6, 1, 4, 1, 23304, 2, 1, 1, 1, 2), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: txDefault.setStatus('current')
txAttenuator = MibScalar((1, 3, 6, 1, 4, 1, 23304, 2, 1, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 15))).setUnits('dBm').setMaxAccess("readwrite")
if mibBuilder.loadTexts: txAttenuator.setStatus('current')
protocol = MibScalar((1, 3, 6, 1, 4, 1, 23304, 2, 1, 1, 2, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: protocol.setStatus('current')
address = MibScalar((1, 3, 6, 1, 4, 1, 23304, 2, 1, 1, 2, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: address.setStatus('current')
mode = MibScalar((1, 3, 6, 1, 4, 1, 23304, 2, 1, 1, 3, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mode.setStatus('current')
onLine = MibScalar((1, 3, 6, 1, 4, 1, 23304, 2, 1, 1, 3, 2), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: onLine.setStatus('current')
rfFreq = MibScalar((1, 3, 6, 1, 4, 1, 23304, 2, 1, 1, 4, 1), Integer32()).setUnits('MHz').setMaxAccess("readwrite")
if mibBuilder.loadTexts: rfFreq.setStatus('current')
ifFreq = MibScalar((1, 3, 6, 1, 4, 1, 23304, 2, 1, 1, 4, 2), Integer32()).setUnits('MHz').setMaxAccess("readwrite")
if mibBuilder.loadTexts: ifFreq.setStatus('current')
loFreq = MibScalar((1, 3, 6, 1, 4, 1, 23304, 2, 1, 1, 4, 3), Integer32()).setUnits('MHz').setMaxAccess("readwrite")
if mibBuilder.loadTexts: loFreq.setStatus('current')
serIf = MibScalar((1, 3, 6, 1, 4, 1, 23304, 2, 1, 1, 5, 1), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: serIf.setStatus('current')
serEcho = MibScalar((1, 3, 6, 1, 4, 1, 23304, 2, 1, 1, 5, 2), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: serEcho.setStatus('current')
pwrAlarmThresh = MibScalar((1, 3, 6, 1, 4, 1, 23304, 2, 1, 1, 5, 3), DisplayString()).setUnits('dB').setMaxAccess("readwrite")
if mibBuilder.loadTexts: pwrAlarmThresh.setStatus('current')
burstPwrThresh = MibScalar((1, 3, 6, 1, 4, 1, 23304, 2, 1, 1, 5, 4), DisplayString()).setUnits('dB').setMaxAccess("readwrite")
if mibBuilder.loadTexts: burstPwrThresh.setStatus('current')
refSource = MibScalar((1, 3, 6, 1, 4, 1, 23304, 2, 1, 1, 5, 5), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: refSource.setStatus('current')
ledState = MibScalar((1, 3, 6, 1, 4, 1, 23304, 2, 1, 1, 5, 6), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ledState.setStatus('current')
paStatus = MibScalar((1, 3, 6, 1, 4, 1, 23304, 2, 1, 2, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("off", 0), ("on", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: paStatus.setStatus('current')
txPower = MibScalar((1, 3, 6, 1, 4, 1, 23304, 2, 1, 2, 2), DisplayString()).setUnits('dB').setMaxAccess("readonly")
if mibBuilder.loadTexts: txPower.setStatus('current')
txBurstPower = MibScalar((1, 3, 6, 1, 4, 1, 23304, 2, 1, 2, 3), DisplayString()).setUnits('dB').setMaxAccess("readonly")
if mibBuilder.loadTexts: txBurstPower.setStatus('current')
faults = MibScalar((1, 3, 6, 1, 4, 1, 23304, 2, 1, 2, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: faults.setStatus('current')
latchedFaults = MibScalar((1, 3, 6, 1, 4, 1, 23304, 2, 1, 2, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: latchedFaults.setStatus('current')
temperature = MibScalar((1, 3, 6, 1, 4, 1, 23304, 2, 1, 2, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: temperature.setStatus('current')
minMaxTemperature = MibScalar((1, 3, 6, 1, 4, 1, 23304, 2, 1, 2, 7), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: minMaxTemperature.setStatus('current')
systemSetting = MibScalar((1, 3, 6, 1, 4, 1, 23304, 2, 1, 2, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2047))).setMaxAccess("readonly")
if mibBuilder.loadTexts: systemSetting.setStatus('current')
systemPoll = MibScalar((1, 3, 6, 1, 4, 1, 23304, 2, 1, 2, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 3))).setMaxAccess("readonly")
if mibBuilder.loadTexts: systemPoll.setStatus('current')
deviceType = MibScalar((1, 3, 6, 1, 4, 1, 23304, 2, 1, 2, 10), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deviceType.setStatus('current')
gateway = MibScalar((1, 3, 6, 1, 4, 1, 23304, 2, 1, 2, 11), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gateway.setStatus('current')
ipAddr = MibScalar((1, 3, 6, 1, 4, 1, 23304, 2, 1, 2, 12), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipAddr.setStatus('current')
macAddress = MibScalar((1, 3, 6, 1, 4, 1, 23304, 2, 1, 2, 13), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: macAddress.setStatus('current')
netmask = MibScalar((1, 3, 6, 1, 4, 1, 23304, 2, 1, 2, 14), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: netmask.setStatus('current')
refPower = MibScalar((1, 3, 6, 1, 4, 1, 23304, 2, 1, 2, 15), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: refPower.setStatus('current')
bucConfiguration = MibScalar((1, 3, 6, 1, 4, 1, 23304, 2, 1, 2, 16), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bucConfiguration.setStatus('current')
buildStandard = MibScalar((1, 3, 6, 1, 4, 1, 23304, 2, 1, 2, 17), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: buildStandard.setStatus('current')
idInfo = MibScalar((1, 3, 6, 1, 4, 1, 23304, 2, 1, 3, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: idInfo.setStatus('current')
limits = MibScalar((1, 3, 6, 1, 4, 1, 23304, 2, 1, 3, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: limits.setStatus('current')
pktProtocolsInfo = MibScalar((1, 3, 6, 1, 4, 1, 23304, 2, 1, 3, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pktProtocolsInfo.setStatus('current')
mibBuilder.exportSymbols("RBUC-MIB", mode=mode, rcSetting=rcSetting, serIf=serIf, ComponentRevision=ComponentRevision, FaultStatus=FaultStatus, gateway=gateway, pktProtocolsInfo=pktProtocolsInfo, ipAddr=ipAddr, refSource=refSource, macAddress=macAddress, configuration=configuration, idInfo=idInfo, refPower=refPower, freqs=freqs, txAttenuator=txAttenuator, netmask=netmask, txSettings=txSettings, latchedFaults=latchedFaults, buildStandard=buildStandard, rfFreq=rfFreq, txDefault=txDefault, limits=limits, misc=misc, serEcho=serEcho, pwrAlarmThresh=pwrAlarmThresh, paStatus=paStatus, address=address, info=info, faults=faults, onLine=onLine, TxStatus=TxStatus, PYSNMP_MODULE_ID=rbucMIB, systemSetting=systemSetting, deviceType=deviceType, txPower=txPower, burstPwrThresh=burstPwrThresh, temperature=temperature, rbucMIB=rbucMIB, txBurstPower=txBurstPower, protocol=protocol, status=status, ifFreq=ifFreq, txOn=txOn, loFreq=loFreq, minMaxTemperature=minMaxTemperature, ledState=ledState, systemPoll=systemPoll, pktProtocol=pktProtocol, bucConfiguration=bucConfiguration)
