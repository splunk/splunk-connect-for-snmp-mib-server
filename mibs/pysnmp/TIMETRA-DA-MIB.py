#
# PySNMP MIB module TIMETRA-DA-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/TIMETRA-DA-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 21:09:50 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, Integer, OctetString = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "Integer", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsUnion, ConstraintsIntersection, ValueSizeConstraint, SingleValueConstraint, ValueRangeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsUnion", "ConstraintsIntersection", "ValueSizeConstraint", "SingleValueConstraint", "ValueRangeConstraint")
InetAddressPrefixLength, InetPortNumber, InetAddressType, InetAddress = mibBuilder.importSymbols("INET-ADDRESS-MIB", "InetAddressPrefixLength", "InetPortNumber", "InetAddressType", "InetAddress")
ModuleCompliance, ObjectGroup, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "ObjectGroup", "NotificationGroup")
ModuleIdentity, Integer32, IpAddress, TimeTicks, Unsigned32, ObjectIdentity, Counter32, NotificationType, MibScalar, MibTable, MibTableRow, MibTableColumn, iso, Counter64, MibIdentifier, Bits, Gauge32 = mibBuilder.importSymbols("SNMPv2-SMI", "ModuleIdentity", "Integer32", "IpAddress", "TimeTicks", "Unsigned32", "ObjectIdentity", "Counter32", "NotificationType", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "iso", "Counter64", "MibIdentifier", "Bits", "Gauge32")
TruthValue, TextualConvention, MacAddress, RowStatus, DisplayString, TimeStamp = mibBuilder.importSymbols("SNMPv2-TC", "TruthValue", "TextualConvention", "MacAddress", "RowStatus", "DisplayString", "TimeStamp")
tmnxSRNotifyPrefix, tmnxSRConfs, tmnxSRObjs, timetraSRMIBModules = mibBuilder.importSymbols("TIMETRA-GLOBAL-MIB", "tmnxSRNotifyPrefix", "tmnxSRConfs", "tmnxSRObjs", "timetraSRMIBModules")
TmnxOperState, TmnxAdminState, TLNamedItemOrEmpty, TNamedItemOrEmpty, TmnxEnabledDisabled, TNamedItem, TItemDescription = mibBuilder.importSymbols("TIMETRA-TC-MIB", "TmnxOperState", "TmnxAdminState", "TLNamedItemOrEmpty", "TNamedItemOrEmpty", "TmnxEnabledDisabled", "TNamedItem", "TItemDescription")
timetraDAMIBModule = ModuleIdentity((1, 3, 6, 1, 4, 1, 6527, 1, 1, 3, 82))
timetraDAMIBModule.setRevisions(('1911-05-23 00:00',))
if mibBuilder.loadTexts: timetraDAMIBModule.setLastUpdated('201106010000Z')
if mibBuilder.loadTexts: timetraDAMIBModule.setOrganization('Alcatel-Lucent')
tmnxDA = MibIdentifier((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 82))
tmnxDAObjs = MibIdentifier((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 82, 1))
tmnxDAConformance = MibIdentifier((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 82))
tmnxDACompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 82, 1))
tmnxDAGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 82, 2))
tmnxDANotifyPrefix = MibIdentifier((1, 3, 6, 1, 4, 1, 6527, 3, 1, 3, 82))
tmnxDANotifications = MibIdentifier((1, 3, 6, 1, 4, 1, 6527, 3, 1, 3, 82, 0))
tmnxDASvrGrpTableLastChanged = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 82, 1, 1), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxDASvrGrpTableLastChanged.setStatus('current')
tmnxDASvrGrpTable = MibTable((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 82, 1, 2), )
if mibBuilder.loadTexts: tmnxDASvrGrpTable.setStatus('current')
tmnxDASvrGrpEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 82, 1, 2, 1), ).setIndexNames((0, "TIMETRA-DA-MIB", "tmnxDASvrGrpIndex"))
if mibBuilder.loadTexts: tmnxDASvrGrpEntry.setStatus('current')
tmnxDASvrGrpIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 82, 1, 2, 1, 1), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(1, 4), )))
if mibBuilder.loadTexts: tmnxDASvrGrpIndex.setStatus('current')
tmnxDASvrGrpRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 82, 1, 2, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxDASvrGrpRowStatus.setStatus('current')
tmnxDASvrGrpLastChanged = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 82, 1, 2, 1, 3), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxDASvrGrpLastChanged.setStatus('current')
tmnxDASvrGrpCardSlotNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 82, 1, 2, 1, 4), Bits().clone(namedValues=NamedValues(("card1", 0), ("card2", 1), ("card3", 2), ("card4", 3), ("card5", 4), ("card6", 5), ("card7", 6), ("card8", 7), ("card9", 8), ("card10", 9)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxDASvrGrpCardSlotNumber.setStatus('current')
tmnxDASvrGrpAdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 82, 1, 2, 1, 5), TmnxAdminState().clone('outOfService')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxDASvrGrpAdminState.setStatus('current')
tmnxDASvrGrpOperState = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 82, 1, 2, 1, 6), TmnxOperState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxDASvrGrpOperState.setStatus('current')
tmnxDAGrpTableLastChanged = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 82, 1, 3), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxDAGrpTableLastChanged.setStatus('current')
tmnxDAGrpTable = MibTable((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 82, 1, 4), )
if mibBuilder.loadTexts: tmnxDAGrpTable.setStatus('current')
tmnxDAGrpEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 82, 1, 4, 1), ).setIndexNames((0, "TIMETRA-DA-MIB", "tmnxDAGrpName"))
if mibBuilder.loadTexts: tmnxDAGrpEntry.setStatus('current')
tmnxDAGrpName = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 82, 1, 4, 1, 1), TNamedItem())
if mibBuilder.loadTexts: tmnxDAGrpName.setStatus('current')
tmnxDAGrpRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 82, 1, 4, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxDAGrpRowStatus.setStatus('current')
tmnxDAGrpLastChanged = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 82, 1, 4, 1, 3), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxDAGrpLastChanged.setStatus('current')
tmnxDAGrpServerGroupIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 82, 1, 4, 1, 4), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(1, 4), ))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxDAGrpServerGroupIndex.setStatus('current')
tmnxDAGrpAdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 82, 1, 4, 1, 5), TmnxAdminState().clone('outOfService')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxDAGrpAdminState.setStatus('current')
tmnxDAGrpDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 82, 1, 4, 1, 6), TItemDescription().clone(hexValue="")).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxDAGrpDescription.setStatus('current')
tmnxDAGrpDnsClientIsmLinkName = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 82, 1, 4, 1, 7), TNamedItemOrEmpty().clone(hexValue="")).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxDAGrpDnsClientIsmLinkName.setStatus('current')
tmnxDAGrpDCAuthCache = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 82, 1, 4, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("none", 1), ("useCache", 2))).clone('none')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxDAGrpDCAuthCache.setStatus('current')
tmnxDAGrpDCAdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 82, 1, 4, 1, 9), TmnxAdminState().clone('outOfService')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxDAGrpDCAdminState.setStatus('current')
tmnxDAGrpDCIsmLinkName = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 82, 1, 4, 1, 10), TNamedItemOrEmpty().clone(hexValue="")).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxDAGrpDCIsmLinkName.setStatus('current')
tmnxDAGrpDCBootStrapPort = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 82, 1, 4, 1, 11), InetPortNumber().clone(22345)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxDAGrpDCBootStrapPort.setStatus('current')
tmnxDAGrpDCConnRetryTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 82, 1, 4, 1, 12), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(100, 300000)).clone(1000)).setUnits('milliseconds').setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxDAGrpDCConnRetryTimer.setStatus('current')
tmnxDAGrpDCIdleTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 82, 1, 4, 1, 13), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(10, 300)).clone(30)).setUnits('seconds').setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxDAGrpDCIdleTimeout.setStatus('current')
tmnxDAGrpBytesFromCache = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 82, 1, 4, 1, 14), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxDAGrpBytesFromCache.setStatus('current')
tmnxDAGrpBytesFromCacheL32 = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 82, 1, 4, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxDAGrpBytesFromCacheL32.setStatus('current')
tmnxDAGrpBytesFromCacheH32 = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 82, 1, 4, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxDAGrpBytesFromCacheH32.setStatus('current')
tmnxDAGrpBytesNotFromCache = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 82, 1, 4, 1, 17), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxDAGrpBytesNotFromCache.setStatus('current')
tmnxDAGrpBytesNotFromCacheL32 = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 82, 1, 4, 1, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxDAGrpBytesNotFromCacheL32.setStatus('current')
tmnxDAGrpBytesNotFromCacheH32 = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 82, 1, 4, 1, 19), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxDAGrpBytesNotFromCacheH32.setStatus('current')
tmnxDAGrpObjectsFromCache = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 82, 1, 4, 1, 20), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxDAGrpObjectsFromCache.setStatus('current')
tmnxDAGrpObjectsFromCacheL32 = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 82, 1, 4, 1, 21), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxDAGrpObjectsFromCacheL32.setStatus('current')
tmnxDAGrpObjectsFromCacheH32 = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 82, 1, 4, 1, 22), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxDAGrpObjectsFromCacheH32.setStatus('current')
tmnxDAGrpObjectsNotFromCache = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 82, 1, 4, 1, 23), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxDAGrpObjectsNotFromCache.setStatus('current')
tmnxDAGrpObjectsNotFromCacheL32 = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 82, 1, 4, 1, 24), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxDAGrpObjectsNotFromCacheL32.setStatus('current')
tmnxDAGrpObjectsNotFromCacheH32 = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 82, 1, 4, 1, 25), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxDAGrpObjectsNotFromCacheH32.setStatus('current')
tmnxDAGrpObjectByteCount = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 82, 1, 4, 1, 26), Counter64()).setUnits('megabytes').setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxDAGrpObjectByteCount.setStatus('current')
tmnxDAGrpObjectByteCountL32 = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 82, 1, 4, 1, 27), Counter32()).setUnits('megabytes').setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxDAGrpObjectByteCountL32.setStatus('current')
tmnxDAGrpObjectByteCountH32 = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 82, 1, 4, 1, 28), Counter32()).setUnits('megabytes').setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxDAGrpObjectByteCountH32.setStatus('current')
tmnxDAGrpNumberOfOrigins = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 82, 1, 4, 1, 29), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxDAGrpNumberOfOrigins.setStatus('current')
tmnxDAGrpNumberOfOriginsL32 = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 82, 1, 4, 1, 30), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxDAGrpNumberOfOriginsL32.setStatus('current')
tmnxDAGrpNumberOfOriginsH32 = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 82, 1, 4, 1, 31), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxDAGrpNumberOfOriginsH32.setStatus('current')
tmnxDAGrpDCAuthCacheHit = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 82, 1, 4, 1, 32), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxDAGrpDCAuthCacheHit.setStatus('current')
tmnxDAGrpDCAuthCacheHitL32 = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 82, 1, 4, 1, 33), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxDAGrpDCAuthCacheHitL32.setStatus('current')
tmnxDAGrpDCAuthCacheHitH32 = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 82, 1, 4, 1, 34), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxDAGrpDCAuthCacheHitH32.setStatus('current')
tmnxDAGrpDCAuthCacheMiss = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 82, 1, 4, 1, 35), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxDAGrpDCAuthCacheMiss.setStatus('current')
tmnxDAGrpDCAuthCacheMissL32 = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 82, 1, 4, 1, 36), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxDAGrpDCAuthCacheMissL32.setStatus('current')
tmnxDAGrpDCAuthCacheMissH32 = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 82, 1, 4, 1, 37), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxDAGrpDCAuthCacheMissH32.setStatus('current')
tmnxDAGrpDCDeniedAuth = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 82, 1, 4, 1, 38), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxDAGrpDCDeniedAuth.setStatus('current')
tmnxDAGrpDCDeniedAuthL32 = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 82, 1, 4, 1, 39), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxDAGrpDCDeniedAuthL32.setStatus('current')
tmnxDAGrpDCDeniedAuthH32 = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 82, 1, 4, 1, 40), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxDAGrpDCDeniedAuthH32.setStatus('current')
tmnxDAGrpDCMinRTTPerPeer = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 82, 1, 4, 1, 41), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxDAGrpDCMinRTTPerPeer.setStatus('current')
tmnxDAGrpDCAvgRTTPerPeer = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 82, 1, 4, 1, 42), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxDAGrpDCAvgRTTPerPeer.setStatus('current')
tmnxDAGrpDCMaxRTTPerPeer = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 82, 1, 4, 1, 43), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxDAGrpDCMaxRTTPerPeer.setStatus('current')
tmnxDAGrpDnsSvrTableLastChanged = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 82, 1, 5), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxDAGrpDnsSvrTableLastChanged.setStatus('current')
tmnxDAGrpDnsSvrTable = MibTable((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 82, 1, 6), )
if mibBuilder.loadTexts: tmnxDAGrpDnsSvrTable.setStatus('current')
tmnxDAGrpDnsSvrEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 82, 1, 6, 1), ).setIndexNames((0, "TIMETRA-DA-MIB", "tmnxDAGrpName"), (0, "TIMETRA-DA-MIB", "tmnxDAGrpDnsSvrAddrTyp"), (0, "TIMETRA-DA-MIB", "tmnxDAGrpDnsSvrAddress"))
if mibBuilder.loadTexts: tmnxDAGrpDnsSvrEntry.setStatus('current')
tmnxDAGrpDnsSvrAddrTyp = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 82, 1, 6, 1, 1), InetAddressType())
if mibBuilder.loadTexts: tmnxDAGrpDnsSvrAddrTyp.setStatus('current')
tmnxDAGrpDnsSvrAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 82, 1, 6, 1, 2), InetAddress().subtype(subtypeSpec=ConstraintsUnion(ValueSizeConstraint(0, 0), ValueSizeConstraint(4, 4), ValueSizeConstraint(16, 16), )))
if mibBuilder.loadTexts: tmnxDAGrpDnsSvrAddress.setStatus('current')
tmnxDAGrpDnsSvrRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 82, 1, 6, 1, 3), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxDAGrpDnsSvrRowStatus.setStatus('current')
tmnxDAGrpDnsSvrLastChanged = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 82, 1, 6, 1, 4), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxDAGrpDnsSvrLastChanged.setStatus('current')
tmnxDADCBtStSvrTableLastChanged = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 82, 1, 7), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxDADCBtStSvrTableLastChanged.setStatus('current')
tmnxDADCBtStSvrTable = MibTable((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 82, 1, 8), )
if mibBuilder.loadTexts: tmnxDADCBtStSvrTable.setStatus('current')
tmnxDADCBtStSvrEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 82, 1, 8, 1), ).setIndexNames((0, "TIMETRA-DA-MIB", "tmnxDAGrpName"), (0, "TIMETRA-DA-MIB", "tmnxDADCBtStSvrIndex"))
if mibBuilder.loadTexts: tmnxDADCBtStSvrEntry.setStatus('current')
tmnxDADCBtStSvrIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 82, 1, 8, 1, 1), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(1, 4), )))
if mibBuilder.loadTexts: tmnxDADCBtStSvrIndex.setStatus('current')
tmnxDADCBtStSvrRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 82, 1, 8, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxDADCBtStSvrRowStatus.setStatus('current')
tmnxDADCBtStSvrLastChanged = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 82, 1, 8, 1, 3), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxDADCBtStSvrLastChanged.setStatus('current')
tmnxDADCBtStSvrAddrType = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 82, 1, 8, 1, 4), InetAddressType().clone('unknown')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxDADCBtStSvrAddrType.setStatus('current')
tmnxDADCBtStSvrAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 82, 1, 8, 1, 5), InetAddress().subtype(subtypeSpec=ValueSizeConstraint(1, 255)).clone(hexValue="")).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxDADCBtStSvrAddress.setStatus('current')
tmnxDAHttpTableLastChanged = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 82, 1, 9), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxDAHttpTableLastChanged.setStatus('current')
tmnxDAHttpTable = MibTable((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 82, 1, 10), )
if mibBuilder.loadTexts: tmnxDAHttpTable.setStatus('current')
tmnxDAHttpEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 82, 1, 10, 1), )
tmnxDAGrpEntry.registerAugmentions(("TIMETRA-DA-MIB", "tmnxDAHttpEntry"))
tmnxDAHttpEntry.setIndexNames(*tmnxDAGrpEntry.getIndexNames())
if mibBuilder.loadTexts: tmnxDAHttpEntry.setStatus('current')
tmnxDAHttpLastChanged = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 82, 1, 10, 1, 1), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxDAHttpLastChanged.setStatus('current')
tmnxDAHttpServerAdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 82, 1, 10, 1, 2), TmnxAdminState().clone('outOfService')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxDAHttpServerAdminState.setStatus('current')
tmnxDAHttpServerOperState = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 82, 1, 10, 1, 3), TmnxOperState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxDAHttpServerOperState.setStatus('current')
tmnxDAHttpServerIdleTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 82, 1, 10, 1, 4), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(10, 65535)).clone(120)).setUnits('seconds').setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxDAHttpServerIdleTimeout.setStatus('current')
tmnxDAHttpServerViaString = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 82, 1, 10, 1, 5), DisplayString().clone(hexValue="")).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxDAHttpServerViaString.setStatus('current')
tmnxDAHttpServerStrBWInUse = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 82, 1, 10, 1, 6), Counter64()).setUnits('kbps').setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxDAHttpServerStrBWInUse.setStatus('current')
tmnxDAHttpServerStrBWInUseL32 = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 82, 1, 10, 1, 7), Counter32()).setUnits('kbps').setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxDAHttpServerStrBWInUseL32.setStatus('current')
tmnxDAHttpServerStrBWInUseH32 = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 82, 1, 10, 1, 8), Counter32()).setUnits('kbps').setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxDAHttpServerStrBWInUseH32.setStatus('current')
tmnxDAHttpServerXferInProg = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 82, 1, 10, 1, 9), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxDAHttpServerXferInProg.setStatus('current')
tmnxDAHttpServerXferCompleted = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 82, 1, 10, 1, 10), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxDAHttpServerXferCompleted.setStatus('current')
tmnxDAHttpServerXferCompletedL32 = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 82, 1, 10, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxDAHttpServerXferCompletedL32.setStatus('current')
tmnxDAHttpServerXferCompletedH32 = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 82, 1, 10, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxDAHttpServerXferCompletedH32.setStatus('current')
tmnxDAHttpServerXferTimeouts = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 82, 1, 10, 1, 13), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxDAHttpServerXferTimeouts.setStatus('current')
tmnxDAHttpServerXferFailed = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 82, 1, 10, 1, 14), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxDAHttpServerXferFailed.setStatus('current')
tmnxDAHttpServerValidRequests = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 82, 1, 10, 1, 15), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxDAHttpServerValidRequests.setStatus('current')
tmnxDAHttpServerValidRequestsL32 = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 82, 1, 10, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxDAHttpServerValidRequestsL32.setStatus('current')
tmnxDAHttpServerValidRequestsH32 = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 82, 1, 10, 1, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxDAHttpServerValidRequestsH32.setStatus('current')
tmnxDAHttpServerInvalidRequests = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 82, 1, 10, 1, 18), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxDAHttpServerInvalidRequests.setStatus('current')
tmnxDAHttpServerMethodNotSuppted = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 82, 1, 10, 1, 19), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxDAHttpServerMethodNotSuppted.setStatus('current')
tmnxDAHttpServerHostNotSuppted = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 82, 1, 10, 1, 20), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxDAHttpServerHostNotSuppted.setStatus('current')
tmnxDAHttpServer1XXCountSent = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 82, 1, 10, 1, 21), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxDAHttpServer1XXCountSent.setStatus('current')
tmnxDAHttpServer1XXCountSentL32 = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 82, 1, 10, 1, 22), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxDAHttpServer1XXCountSentL32.setStatus('current')
tmnxDAHttpServer1XXCountSentH32 = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 82, 1, 10, 1, 23), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxDAHttpServer1XXCountSentH32.setStatus('current')
tmnxDAHttpServer2XXCountSent = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 82, 1, 10, 1, 24), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxDAHttpServer2XXCountSent.setStatus('current')
tmnxDAHttpServer2XXCountSentL32 = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 82, 1, 10, 1, 25), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxDAHttpServer2XXCountSentL32.setStatus('current')
tmnxDAHttpServer2XXCountSentH32 = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 82, 1, 10, 1, 26), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxDAHttpServer2XXCountSentH32.setStatus('current')
tmnxDAHttpServer3XXCountSent = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 82, 1, 10, 1, 27), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxDAHttpServer3XXCountSent.setStatus('current')
tmnxDAHttpServer3XXCountSentL32 = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 82, 1, 10, 1, 28), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxDAHttpServer3XXCountSentL32.setStatus('current')
tmnxDAHttpServer3XXCountSentH32 = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 82, 1, 10, 1, 29), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxDAHttpServer3XXCountSentH32.setStatus('current')
tmnxDAHttpServer4XXCountSent = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 82, 1, 10, 1, 30), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxDAHttpServer4XXCountSent.setStatus('current')
tmnxDAHttpServer4XXCountSentL32 = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 82, 1, 10, 1, 31), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxDAHttpServer4XXCountSentL32.setStatus('current')
tmnxDAHttpServer4XXCountSentH32 = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 82, 1, 10, 1, 32), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxDAHttpServer4XXCountSentH32.setStatus('current')
tmnxDAHttpServer5XXCountSent = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 82, 1, 10, 1, 33), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxDAHttpServer5XXCountSent.setStatus('current')
tmnxDAHttpServer5XXCountSentL32 = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 82, 1, 10, 1, 34), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxDAHttpServer5XXCountSentL32.setStatus('current')
tmnxDAHttpServer5XXCountSentH32 = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 82, 1, 10, 1, 35), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxDAHttpServer5XXCountSentH32.setStatus('current')
tmnxDAHttpIngestAdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 82, 1, 10, 1, 36), TmnxAdminState().clone('outOfService')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxDAHttpIngestAdminState.setStatus('current')
tmnxDAHttpIngestOperState = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 82, 1, 10, 1, 37), TmnxOperState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxDAHttpIngestOperState.setStatus('current')
tmnxDAHttpIngestIsmLinkName = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 82, 1, 10, 1, 38), TNamedItemOrEmpty().clone(hexValue="")).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxDAHttpIngestIsmLinkName.setStatus('current')
tmnxDAHttpIngestIdleTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 82, 1, 10, 1, 39), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(10, 65535)).clone(120)).setUnits('seconds').setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxDAHttpIngestIdleTimeout.setStatus('current')
tmnxDAHttpIngestXferInProg = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 82, 1, 10, 1, 40), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxDAHttpIngestXferInProg.setStatus('current')
tmnxDAHttpIngestXferCompleted = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 82, 1, 10, 1, 41), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxDAHttpIngestXferCompleted.setStatus('current')
tmnxDAHttpIngestXferCompletedL32 = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 82, 1, 10, 1, 42), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxDAHttpIngestXferCompletedL32.setStatus('current')
tmnxDAHttpIngestXferCompletedH32 = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 82, 1, 10, 1, 43), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxDAHttpIngestXferCompletedH32.setStatus('current')
tmnxDAHttpIngestXferTimeouts = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 82, 1, 10, 1, 44), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxDAHttpIngestXferTimeouts.setStatus('current')
tmnxDAHttpIngestXferFailed = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 82, 1, 10, 1, 45), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxDAHttpIngestXferFailed.setStatus('current')
tmnxDAHttpIngest1XXCountRecd = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 82, 1, 10, 1, 46), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxDAHttpIngest1XXCountRecd.setStatus('current')
tmnxDAHttpIngest1XXCountRecdL32 = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 82, 1, 10, 1, 47), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxDAHttpIngest1XXCountRecdL32.setStatus('current')
tmnxDAHttpIngest1XXCountRecdH32 = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 82, 1, 10, 1, 48), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxDAHttpIngest1XXCountRecdH32.setStatus('current')
tmnxDAHttpIngest2XXCountRecd = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 82, 1, 10, 1, 49), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxDAHttpIngest2XXCountRecd.setStatus('current')
tmnxDAHttpIngest2XXCountRecdL32 = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 82, 1, 10, 1, 50), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxDAHttpIngest2XXCountRecdL32.setStatus('current')
tmnxDAHttpIngest2XXCountRecdH32 = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 82, 1, 10, 1, 51), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxDAHttpIngest2XXCountRecdH32.setStatus('current')
tmnxDAHttpIngest3XXCountRecd = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 82, 1, 10, 1, 52), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxDAHttpIngest3XXCountRecd.setStatus('current')
tmnxDAHttpIngest3XXCountRecdL32 = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 82, 1, 10, 1, 53), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxDAHttpIngest3XXCountRecdL32.setStatus('current')
tmnxDAHttpIngest3XXCountRecdH32 = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 82, 1, 10, 1, 54), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxDAHttpIngest3XXCountRecdH32.setStatus('current')
tmnxDAHttpIngest4XXCountRecd = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 82, 1, 10, 1, 55), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxDAHttpIngest4XXCountRecd.setStatus('current')
tmnxDAHttpIngest4XXCountRecdL32 = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 82, 1, 10, 1, 56), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxDAHttpIngest4XXCountRecdL32.setStatus('current')
tmnxDAHttpIngest4XXCountRecdH32 = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 82, 1, 10, 1, 57), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxDAHttpIngest4XXCountRecdH32.setStatus('current')
tmnxDAHttpIngest5XXCountRecd = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 82, 1, 10, 1, 58), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxDAHttpIngest5XXCountRecd.setStatus('current')
tmnxDAHttpIngest5XXCountRecdL32 = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 82, 1, 10, 1, 59), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxDAHttpIngest5XXCountRecdL32.setStatus('current')
tmnxDAHttpIngest5XXCountRecdH32 = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 82, 1, 10, 1, 60), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxDAHttpIngest5XXCountRecdH32.setStatus('current')
tmnxDAIsmLinkTableLastChanged = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 82, 1, 11), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxDAIsmLinkTableLastChanged.setStatus('current')
tmnxDAIsmLinkTable = MibTable((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 82, 1, 12), )
if mibBuilder.loadTexts: tmnxDAIsmLinkTable.setStatus('current')
tmnxDAIsmLinkEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 82, 1, 12, 1), ).setIndexNames((0, "TIMETRA-DA-MIB", "tmnxDAGrpName"), (0, "TIMETRA-DA-MIB", "tmnxDAIsmLinkName"))
if mibBuilder.loadTexts: tmnxDAIsmLinkEntry.setStatus('current')
tmnxDAIsmLinkName = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 82, 1, 12, 1, 1), TNamedItem())
if mibBuilder.loadTexts: tmnxDAIsmLinkName.setStatus('current')
tmnxDAIsmLinkRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 82, 1, 12, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxDAIsmLinkRowStatus.setStatus('current')
tmnxDAIsmLinkLastChanged = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 82, 1, 12, 1, 3), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxDAIsmLinkLastChanged.setStatus('current')
tmnxDAIsmLinkAddrType = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 82, 1, 12, 1, 4), InetAddressType().clone('unknown')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxDAIsmLinkAddrType.setStatus('current')
tmnxDAIsmLinkAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 82, 1, 12, 1, 5), InetAddress().subtype(subtypeSpec=ConstraintsUnion(ValueSizeConstraint(0, 0), ValueSizeConstraint(4, 4), ValueSizeConstraint(16, 16), )).clone(hexValue="")).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxDAIsmLinkAddress.setStatus('current')
tmnxDAIsmLinkAddrPrefixLength = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 82, 1, 12, 1, 6), InetAddressPrefixLength()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxDAIsmLinkAddrPrefixLength.setStatus('current')
tmnxDAIsmLinkDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 82, 1, 12, 1, 7), TItemDescription().clone(hexValue="")).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxDAIsmLinkDescription.setStatus('current')
tmnxDAIsmLinkHttpd = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 82, 1, 12, 1, 8), TruthValue().clone('true')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxDAIsmLinkHttpd.setStatus('current')
tmnxDAIsmLinkHttpListenPort = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 82, 1, 12, 1, 9), InetPortNumber().clone(80)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxDAIsmLinkHttpListenPort.setStatus('current')
tmnxDAIsmLinkIpMtu = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 82, 1, 12, 1, 10), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(512, 9212)).clone(1500)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxDAIsmLinkIpMtu.setStatus('current')
tmnxDAIsmLinkQtag = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 82, 1, 12, 1, 11), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4095))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxDAIsmLinkQtag.setStatus('current')
tmnxDAIsmLinkMacAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 82, 1, 12, 1, 12), MacAddress().clone(hexValue="000000000000")).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxDAIsmLinkMacAddress.setStatus('current')
tmnxDAIsmLinkAdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 82, 1, 12, 1, 13), TmnxAdminState().clone('outOfService')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxDAIsmLinkAdminState.setStatus('current')
tmnxDAIsmLinkOperState = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 82, 1, 12, 1, 14), TmnxOperState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxDAIsmLinkOperState.setStatus('current')
tmnxDAIsmLinkBindings = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 82, 1, 12, 1, 15), Bits().clone(namedValues=NamedValues(("deliveryController", 0), ("httpIngest", 1), ("dnsClient", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxDAIsmLinkBindings.setStatus('current')
tmnxDAIsmLinkArpTableLastChanged = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 82, 1, 13), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxDAIsmLinkArpTableLastChanged.setStatus('current')
tmnxDAIsmLinkArpTable = MibTable((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 82, 1, 14), )
if mibBuilder.loadTexts: tmnxDAIsmLinkArpTable.setStatus('current')
tmnxDAIsmLinkArpEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 82, 1, 14, 1), ).setIndexNames((0, "TIMETRA-DA-MIB", "tmnxDAGrpName"), (0, "TIMETRA-DA-MIB", "tmnxDAIsmLinkName"), (0, "TIMETRA-DA-MIB", "tmnxDAIsmLinkArpAddrType"), (0, "TIMETRA-DA-MIB", "tmnxDAIsmLinkArpAddress"))
if mibBuilder.loadTexts: tmnxDAIsmLinkArpEntry.setStatus('current')
tmnxDAIsmLinkArpAddrType = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 82, 1, 14, 1, 1), InetAddressType())
if mibBuilder.loadTexts: tmnxDAIsmLinkArpAddrType.setStatus('current')
tmnxDAIsmLinkArpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 82, 1, 14, 1, 2), InetAddress().subtype(subtypeSpec=ConstraintsUnion(ValueSizeConstraint(0, 0), ValueSizeConstraint(4, 4), ValueSizeConstraint(16, 16), )))
if mibBuilder.loadTexts: tmnxDAIsmLinkArpAddress.setStatus('current')
tmnxDAIsmLinkArpRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 82, 1, 14, 1, 3), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxDAIsmLinkArpRowStatus.setStatus('current')
tmnxDAIsmLinkArpLastChanged = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 82, 1, 14, 1, 4), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxDAIsmLinkArpLastChanged.setStatus('current')
tmnxDAIsmLinkArpMacAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 82, 1, 14, 1, 5), MacAddress().clone(hexValue="000000000000")).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxDAIsmLinkArpMacAddr.setStatus('current')
tmnxDAIsmLinkArpType = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 82, 1, 14, 1, 6), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxDAIsmLinkArpType.setStatus('current')
tmnxDAStRouteTableLastChanged = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 82, 1, 15), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxDAStRouteTableLastChanged.setStatus('current')
tmnxDAStRouteTable = MibTable((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 82, 1, 16), )
if mibBuilder.loadTexts: tmnxDAStRouteTable.setStatus('current')
tmnxDAStRouteEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 82, 1, 16, 1), ).setIndexNames((0, "TIMETRA-DA-MIB", "tmnxDAGrpName"), (0, "TIMETRA-DA-MIB", "tmnxDAStRouteAddrType"), (0, "TIMETRA-DA-MIB", "tmnxDAStRouteAddress"), (0, "TIMETRA-DA-MIB", "tmnxDAStRoutePrefixLength"), (0, "TIMETRA-DA-MIB", "tmnxDAStRouteNextHopAddrType"), (0, "TIMETRA-DA-MIB", "tmnxDAStRouteNextHopAddress"))
if mibBuilder.loadTexts: tmnxDAStRouteEntry.setStatus('current')
tmnxDAStRouteAddrType = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 82, 1, 16, 1, 1), InetAddressType())
if mibBuilder.loadTexts: tmnxDAStRouteAddrType.setStatus('current')
tmnxDAStRouteAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 82, 1, 16, 1, 2), InetAddress().subtype(subtypeSpec=ConstraintsUnion(ValueSizeConstraint(0, 0), ValueSizeConstraint(4, 4), ValueSizeConstraint(16, 16), )))
if mibBuilder.loadTexts: tmnxDAStRouteAddress.setStatus('current')
tmnxDAStRoutePrefixLength = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 82, 1, 16, 1, 3), InetAddressPrefixLength())
if mibBuilder.loadTexts: tmnxDAStRoutePrefixLength.setStatus('current')
tmnxDAStRouteNextHopAddrType = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 82, 1, 16, 1, 4), InetAddressType())
if mibBuilder.loadTexts: tmnxDAStRouteNextHopAddrType.setStatus('current')
tmnxDAStRouteNextHopAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 82, 1, 16, 1, 5), InetAddress().subtype(subtypeSpec=ConstraintsUnion(ValueSizeConstraint(0, 0), ValueSizeConstraint(4, 4), ValueSizeConstraint(16, 16), )))
if mibBuilder.loadTexts: tmnxDAStRouteNextHopAddress.setStatus('current')
tmnxDAStRouteRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 82, 1, 16, 1, 6), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxDAStRouteRowStatus.setStatus('current')
tmnxDAStRouteLastChanged = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 82, 1, 16, 1, 7), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxDAStRouteLastChanged.setStatus('current')
tmnxDAStRouteMetric = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 82, 1, 16, 1, 8), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxDAStRouteMetric.setStatus('current')
tmnxDASGCardTable = MibTable((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 82, 1, 17), )
if mibBuilder.loadTexts: tmnxDASGCardTable.setStatus('current')
tmnxDASGCardEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 82, 1, 17, 1), ).setIndexNames((0, "TIMETRA-DA-MIB", "tmnxDASvrGrpIndex"), (0, "TIMETRA-DA-MIB", "tmnxDASGCardNumber"))
if mibBuilder.loadTexts: tmnxDASGCardEntry.setStatus('current')
tmnxDASGCardNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 82, 1, 17, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10))).clone(namedValues=NamedValues(("card1", 1), ("card2", 2), ("card3", 3), ("card4", 4), ("card5", 5), ("card6", 6), ("card7", 7), ("card8", 8), ("card9", 9), ("card10", 10))))
if mibBuilder.loadTexts: tmnxDASGCardNumber.setStatus('current')
tmnxDASGCardUpTime = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 82, 1, 17, 1, 2), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxDASGCardUpTime.setStatus('current')
tmnxDASGCardTotNumTCPConn = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 82, 1, 17, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxDASGCardTotNumTCPConn.setStatus('current')
tmnxDASGCardTCPConnEstab = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 82, 1, 17, 1, 4), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxDASGCardTCPConnEstab.setStatus('current')
tmnxDASGCardTCPConnEstabL32 = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 82, 1, 17, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxDASGCardTCPConnEstabL32.setStatus('current')
tmnxDASGCardTCPConnEstabH32 = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 82, 1, 17, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxDASGCardTCPConnEstabH32.setStatus('current')
tmnxDASGCardTCPConnClosed = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 82, 1, 17, 1, 7), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxDASGCardTCPConnClosed.setStatus('current')
tmnxDASGCardTCPConnClosedL32 = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 82, 1, 17, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxDASGCardTCPConnClosedL32.setStatus('current')
tmnxDASGCardTCPConnClosedH32 = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 82, 1, 17, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxDASGCardTCPConnClosedH32.setStatus('current')
tmnxDASGCardTCPRetries = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 82, 1, 17, 1, 10), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxDASGCardTCPRetries.setStatus('current')
tmnxDASGCardTCPRetriesL32 = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 82, 1, 17, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxDASGCardTCPRetriesL32.setStatus('current')
tmnxDASGCardTCPRetriesH32 = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 82, 1, 17, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxDASGCardTCPRetriesH32.setStatus('current')
tmnxDASGCardTCPAckTimeOut = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 82, 1, 17, 1, 13), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxDASGCardTCPAckTimeOut.setStatus('current')
tmnxDASGCardTCPAckTimeOutL32 = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 82, 1, 17, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxDASGCardTCPAckTimeOutL32.setStatus('current')
tmnxDASGCardTCPAckTimeOutH32 = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 82, 1, 17, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxDASGCardTCPAckTimeOutH32.setStatus('current')
tmnxDASGCardTCPFarEndClosed = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 82, 1, 17, 1, 16), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxDASGCardTCPFarEndClosed.setStatus('current')
tmnxDASGCardTCPFarEndClosedL32 = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 82, 1, 17, 1, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxDASGCardTCPFarEndClosedL32.setStatus('current')
tmnxDASGCardTCPFarEndClosedH32 = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 82, 1, 17, 1, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxDASGCardTCPFarEndClosedH32.setStatus('current')
tmnxDASGCardTCPLocalEndClosed = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 82, 1, 17, 1, 19), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxDASGCardTCPLocalEndClosed.setStatus('current')
tmnxDASGCardTCPLocalEndClosedL32 = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 82, 1, 17, 1, 20), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxDASGCardTCPLocalEndClosedL32.setStatus('current')
tmnxDASGCardTCPLocalEndClosedH32 = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 82, 1, 17, 1, 21), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxDASGCardTCPLocalEndClosedH32.setStatus('current')
tmnxDASGCardUsedStorageCpcty = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 82, 1, 17, 1, 22), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxDASGCardUsedStorageCpcty.setStatus('current')
tmnxDASGCardUsedStorageCpctyL32 = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 82, 1, 17, 1, 23), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxDASGCardUsedStorageCpctyL32.setStatus('current')
tmnxDASGCardUsedStorageCpctyH32 = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 82, 1, 17, 1, 24), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxDASGCardUsedStorageCpctyH32.setStatus('current')
tmnxDASGCardRemStorageCpcty = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 82, 1, 17, 1, 25), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxDASGCardRemStorageCpcty.setStatus('current')
tmnxDASGCardRemStorageCpctyL32 = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 82, 1, 17, 1, 26), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxDASGCardRemStorageCpctyL32.setStatus('current')
tmnxDASGCardRemStorageCpctyH32 = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 82, 1, 17, 1, 27), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxDASGCardRemStorageCpctyH32.setStatus('current')
tmnxDASGCardNumberOfAssets = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 82, 1, 17, 1, 28), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxDASGCardNumberOfAssets.setStatus('current')
tmnxDASGCardNumberOfOrigins = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 82, 1, 17, 1, 29), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxDASGCardNumberOfOrigins.setStatus('current')
tmnxDASGCardNumberOfURIs = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 82, 1, 17, 1, 30), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxDASGCardNumberOfURIs.setStatus('current')
tmnxDASGCardECCBlockCorrections = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 82, 1, 17, 1, 31), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxDASGCardECCBlockCorrections.setStatus('current')
tmnxDASGCardECCBlockFailures = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 82, 1, 17, 1, 32), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxDASGCardECCBlockFailures.setStatus('current')
tmnxDASGCardPercentBadBlocks = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 82, 1, 17, 1, 33), Gauge32()).setUnits('hundredths of a percent').setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxDASGCardPercentBadBlocks.setStatus('current')
tmnxDASGCardFPGATotPktsSent = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 82, 1, 17, 1, 34), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxDASGCardFPGATotPktsSent.setStatus('current')
tmnxDASGCardFPGATotPktsSentL32 = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 82, 1, 17, 1, 35), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxDASGCardFPGATotPktsSentL32.setStatus('current')
tmnxDASGCardFPGATotPktsSentH32 = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 82, 1, 17, 1, 36), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxDASGCardFPGATotPktsSentH32.setStatus('current')
tmnxDASGCardFPGATotBytesSent = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 82, 1, 17, 1, 37), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxDASGCardFPGATotBytesSent.setStatus('current')
tmnxDASGCardFPGATotBytesSentL32 = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 82, 1, 17, 1, 38), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxDASGCardFPGATotBytesSentL32.setStatus('current')
tmnxDASGCardFPGATotBytesSentH32 = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 82, 1, 17, 1, 39), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxDASGCardFPGATotBytesSentH32.setStatus('current')
tmnxDASGCardFPGATotPktsRecd = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 82, 1, 17, 1, 40), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxDASGCardFPGATotPktsRecd.setStatus('current')
tmnxDASGCardFPGATotPktsRecdL32 = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 82, 1, 17, 1, 41), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxDASGCardFPGATotPktsRecdL32.setStatus('current')
tmnxDASGCardFPGATotPktsRecdH32 = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 82, 1, 17, 1, 42), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxDASGCardFPGATotPktsRecdH32.setStatus('current')
tmnxDASGCardFPGATotBytesRecd = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 82, 1, 17, 1, 43), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxDASGCardFPGATotBytesRecd.setStatus('current')
tmnxDASGCardFPGATotBytesRecdL32 = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 82, 1, 17, 1, 44), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxDASGCardFPGATotBytesRecdL32.setStatus('current')
tmnxDASGCardFPGATotBytesRecdH32 = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 82, 1, 17, 1, 45), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxDASGCardFPGATotBytesRecdH32.setStatus('current')
tmnxDASGCardFPGAUnderflowErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 82, 1, 17, 1, 46), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxDASGCardFPGAUnderflowErrors.setStatus('current')
tmnxDASGCardFPGAOverflowErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 82, 1, 17, 1, 47), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxDASGCardFPGAOverflowErrors.setStatus('current')
tmnxDADCIntfTable = MibTable((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 82, 1, 18), )
if mibBuilder.loadTexts: tmnxDADCIntfTable.setStatus('current')
tmnxDADCIntfEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 82, 1, 18, 1), ).setIndexNames((0, "TIMETRA-DA-MIB", "tmnxDAGrpName"), (0, "TIMETRA-DA-MIB", "tmnxDADCIntfServerIndex"), (0, "TIMETRA-DA-MIB", "tmnxDADCIntfType"), (0, "TIMETRA-DA-MIB", "tmnxDADCIntfIPAddrType"), (0, "TIMETRA-DA-MIB", "tmnxDADCIntfIPAddress"))
if mibBuilder.loadTexts: tmnxDADCIntfEntry.setStatus('current')
tmnxDADCIntfServerIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 82, 1, 18, 1, 1), Gauge32())
if mibBuilder.loadTexts: tmnxDADCIntfServerIndex.setStatus('current')
tmnxDADCIntfType = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 82, 1, 18, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("service", 1), ("config", 2), ("health", 3), ("job", 4), ("metadata", 5), ("auth", 6), ("event", 7))))
if mibBuilder.loadTexts: tmnxDADCIntfType.setStatus('current')
tmnxDADCIntfIPAddrType = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 82, 1, 18, 1, 3), InetAddressType())
if mibBuilder.loadTexts: tmnxDADCIntfIPAddrType.setStatus('current')
tmnxDADCIntfIPAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 82, 1, 18, 1, 4), InetAddress().subtype(subtypeSpec=ConstraintsUnion(ValueSizeConstraint(0, 0), ValueSizeConstraint(4, 4), ValueSizeConstraint(16, 16), )))
if mibBuilder.loadTexts: tmnxDADCIntfIPAddress.setStatus('current')
tmnxDADCIntfFQDNType = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 82, 1, 18, 1, 5), InetAddressType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxDADCIntfFQDNType.setStatus('current')
tmnxDADCIntfFQDN = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 82, 1, 18, 1, 6), InetAddress().subtype(subtypeSpec=ValueSizeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxDADCIntfFQDN.setStatus('current')
tmnxDADCIntfSrcPort = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 82, 1, 18, 1, 7), InetPortNumber()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxDADCIntfSrcPort.setStatus('current')
tmnxDADCIntfDestPort = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 82, 1, 18, 1, 8), InetPortNumber()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxDADCIntfDestPort.setStatus('current')
tmnxDADCIntfOperState = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 82, 1, 18, 1, 9), TmnxOperState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxDADCIntfOperState.setStatus('current')
tmnxDADCIntfIPUpTime = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 82, 1, 18, 1, 10), Gauge32()).setUnits('seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxDADCIntfIPUpTime.setStatus('current')
tmnxDADCIntfIdleTime = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 82, 1, 18, 1, 11), Gauge32()).setUnits('seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxDADCIntfIdleTime.setStatus('current')
tmnxDADCIntfRetry = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 82, 1, 18, 1, 12), Gauge32()).setUnits('seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxDADCIntfRetry.setStatus('current')
tmnxDADCIntfTimeToLive = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 82, 1, 18, 1, 13), Gauge32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setUnits('seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxDADCIntfTimeToLive.setStatus('current')
tmnxDADCIntfEtag = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 82, 1, 18, 1, 14), TLNamedItemOrEmpty()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxDADCIntfEtag.setStatus('current')
tmnxDADCIntfInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 82, 1, 18, 1, 15), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxDADCIntfInterval.setStatus('current')
tmnxDADCIntfPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 82, 1, 18, 1, 16), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxDADCIntfPriority.setStatus('current')
tmnxDADCIntfWeight = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 82, 1, 18, 1, 17), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxDADCIntfWeight.setStatus('current')
tmnxDADCIntfAttemptedSessStups = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 82, 1, 18, 1, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxDADCIntfAttemptedSessStups.setStatus('current')
tmnxDADCIntfFailedSessStups = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 82, 1, 18, 1, 19), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxDADCIntfFailedSessStups.setStatus('current')
tmnxDADCIntfPingReqTxCount = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 82, 1, 18, 1, 20), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxDADCIntfPingReqTxCount.setStatus('current')
tmnxDADCIntfPingResRxCount = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 82, 1, 18, 1, 21), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxDADCIntfPingResRxCount.setStatus('current')
tmnxDADCIntfReqMsgTxCount = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 82, 1, 18, 1, 22), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxDADCIntfReqMsgTxCount.setStatus('current')
tmnxDADCIntfReqMsgTxCountL32 = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 82, 1, 18, 1, 23), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxDADCIntfReqMsgTxCountL32.setStatus('current')
tmnxDADCIntfReqMsgTxCountH32 = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 82, 1, 18, 1, 24), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxDADCIntfReqMsgTxCountH32.setStatus('current')
tmnxDADCIntfResMsgRxCount = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 82, 1, 18, 1, 25), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxDADCIntfResMsgRxCount.setStatus('current')
tmnxDADCIntfResMsgRxCountL32 = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 82, 1, 18, 1, 26), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxDADCIntfResMsgRxCountL32.setStatus('current')
tmnxDADCIntfResMsgRxCountH32 = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 82, 1, 18, 1, 27), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxDADCIntfResMsgRxCountH32.setStatus('current')
tmnxDADCIntfDecodeErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 82, 1, 18, 1, 28), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxDADCIntfDecodeErrors.setStatus('current')
tmnxDADCIntfConnectionBounce = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 82, 1, 18, 1, 29), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxDADCIntfConnectionBounce.setStatus('current')
tmnxDADCIntfRemoteClose = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 82, 1, 18, 1, 30), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxDADCIntfRemoteClose.setStatus('current')
tmnxDADCIntfNoResponse = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 82, 1, 18, 1, 31), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxDADCIntfNoResponse.setStatus('current')
tmnxDAGrpOrigSvrTable = MibTable((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 82, 1, 19), )
if mibBuilder.loadTexts: tmnxDAGrpOrigSvrTable.setStatus('current')
tmnxDAGrpOrigSvrEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 82, 1, 19, 1), ).setIndexNames((0, "TIMETRA-DA-MIB", "tmnxDAGrpName"), (0, "TIMETRA-DA-MIB", "tmnxDAGrpOrigSvrName"))
if mibBuilder.loadTexts: tmnxDAGrpOrigSvrEntry.setStatus('current')
tmnxDAGrpOrigSvrName = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 82, 1, 19, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 94)))
if mibBuilder.loadTexts: tmnxDAGrpOrigSvrName.setStatus('current')
tmnxDAGrpOrigSvrIPAddrType = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 82, 1, 19, 1, 2), InetAddressType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxDAGrpOrigSvrIPAddrType.setStatus('current')
tmnxDAGrpOrigSvrIPAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 82, 1, 19, 1, 3), InetAddress().subtype(subtypeSpec=ConstraintsUnion(ValueSizeConstraint(0, 0), ValueSizeConstraint(4, 4), ValueSizeConstraint(16, 16), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxDAGrpOrigSvrIPAddress.setStatus('current')
tmnxDAGrpOrigSvrNumObjDelvred = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 82, 1, 19, 1, 4), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxDAGrpOrigSvrNumObjDelvred.setStatus('current')
tmnxDAGrpOrigSvrNumObjDelvredL32 = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 82, 1, 19, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxDAGrpOrigSvrNumObjDelvredL32.setStatus('current')
tmnxDAGrpOrigSvrNumObjDelvredH32 = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 82, 1, 19, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxDAGrpOrigSvrNumObjDelvredH32.setStatus('current')
tmnxDAGrpOrigSvrNumObjFailed = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 82, 1, 19, 1, 7), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxDAGrpOrigSvrNumObjFailed.setStatus('current')
tmnxDAGrpOrigSvrNumObjFailedL32 = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 82, 1, 19, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxDAGrpOrigSvrNumObjFailedL32.setStatus('current')
tmnxDAGrpOrigSvrNumObjFailedH32 = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 82, 1, 19, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxDAGrpOrigSvrNumObjFailedH32.setStatus('current')
tmnxDAGrpOrigSvrNumCurTCPConn = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 82, 1, 19, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxDAGrpOrigSvrNumCurTCPConn.setStatus('current')
tmnxDAV10v0Compliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 82, 1, 1)).setObjects(("TIMETRA-DA-MIB", "tmnxDAV10v0Group"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxDAV10v0Compliance = tmnxDAV10v0Compliance.setStatus('current')
tmnxDAV10v0Group = ObjectGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 82, 2, 1)).setObjects(("TIMETRA-DA-MIB", "tmnxDASvrGrpTableLastChanged"), ("TIMETRA-DA-MIB", "tmnxDASvrGrpRowStatus"), ("TIMETRA-DA-MIB", "tmnxDASvrGrpLastChanged"), ("TIMETRA-DA-MIB", "tmnxDASvrGrpCardSlotNumber"), ("TIMETRA-DA-MIB", "tmnxDASvrGrpAdminState"), ("TIMETRA-DA-MIB", "tmnxDASvrGrpOperState"), ("TIMETRA-DA-MIB", "tmnxDAGrpTableLastChanged"), ("TIMETRA-DA-MIB", "tmnxDAGrpRowStatus"), ("TIMETRA-DA-MIB", "tmnxDAGrpLastChanged"), ("TIMETRA-DA-MIB", "tmnxDAGrpServerGroupIndex"), ("TIMETRA-DA-MIB", "tmnxDAGrpAdminState"), ("TIMETRA-DA-MIB", "tmnxDAGrpDescription"), ("TIMETRA-DA-MIB", "tmnxDAGrpDnsClientIsmLinkName"), ("TIMETRA-DA-MIB", "tmnxDAGrpDCAuthCache"), ("TIMETRA-DA-MIB", "tmnxDAGrpDCAdminState"), ("TIMETRA-DA-MIB", "tmnxDAGrpDCIsmLinkName"), ("TIMETRA-DA-MIB", "tmnxDAGrpDCBootStrapPort"), ("TIMETRA-DA-MIB", "tmnxDAGrpDCConnRetryTimer"), ("TIMETRA-DA-MIB", "tmnxDAGrpDCIdleTimeout"), ("TIMETRA-DA-MIB", "tmnxDAGrpBytesFromCache"), ("TIMETRA-DA-MIB", "tmnxDAGrpBytesFromCacheL32"), ("TIMETRA-DA-MIB", "tmnxDAGrpBytesFromCacheH32"), ("TIMETRA-DA-MIB", "tmnxDAGrpBytesNotFromCache"), ("TIMETRA-DA-MIB", "tmnxDAGrpBytesNotFromCacheL32"), ("TIMETRA-DA-MIB", "tmnxDAGrpBytesNotFromCacheH32"), ("TIMETRA-DA-MIB", "tmnxDAGrpObjectsFromCache"), ("TIMETRA-DA-MIB", "tmnxDAGrpObjectsFromCacheL32"), ("TIMETRA-DA-MIB", "tmnxDAGrpObjectsFromCacheH32"), ("TIMETRA-DA-MIB", "tmnxDAGrpObjectsNotFromCache"), ("TIMETRA-DA-MIB", "tmnxDAGrpObjectsNotFromCacheL32"), ("TIMETRA-DA-MIB", "tmnxDAGrpObjectsNotFromCacheH32"), ("TIMETRA-DA-MIB", "tmnxDAGrpObjectByteCount"), ("TIMETRA-DA-MIB", "tmnxDAGrpObjectByteCountL32"), ("TIMETRA-DA-MIB", "tmnxDAGrpObjectByteCountH32"), ("TIMETRA-DA-MIB", "tmnxDAGrpNumberOfOrigins"), ("TIMETRA-DA-MIB", "tmnxDAGrpNumberOfOriginsL32"), ("TIMETRA-DA-MIB", "tmnxDAGrpNumberOfOriginsH32"), ("TIMETRA-DA-MIB", "tmnxDAGrpDCAuthCacheHit"), ("TIMETRA-DA-MIB", "tmnxDAGrpDCAuthCacheHitL32"), ("TIMETRA-DA-MIB", "tmnxDAGrpDCAuthCacheHitH32"), ("TIMETRA-DA-MIB", "tmnxDAGrpDCAuthCacheMiss"), ("TIMETRA-DA-MIB", "tmnxDAGrpDCAuthCacheMissL32"), ("TIMETRA-DA-MIB", "tmnxDAGrpDCAuthCacheMissH32"), ("TIMETRA-DA-MIB", "tmnxDAGrpDCDeniedAuth"), ("TIMETRA-DA-MIB", "tmnxDAGrpDCDeniedAuthL32"), ("TIMETRA-DA-MIB", "tmnxDAGrpDCDeniedAuthH32"), ("TIMETRA-DA-MIB", "tmnxDAGrpDCMinRTTPerPeer"), ("TIMETRA-DA-MIB", "tmnxDAGrpDCAvgRTTPerPeer"), ("TIMETRA-DA-MIB", "tmnxDAGrpDCMaxRTTPerPeer"), ("TIMETRA-DA-MIB", "tmnxDAGrpDnsSvrTableLastChanged"), ("TIMETRA-DA-MIB", "tmnxDAGrpDnsSvrRowStatus"), ("TIMETRA-DA-MIB", "tmnxDAGrpDnsSvrLastChanged"), ("TIMETRA-DA-MIB", "tmnxDADCBtStSvrTableLastChanged"), ("TIMETRA-DA-MIB", "tmnxDADCBtStSvrRowStatus"), ("TIMETRA-DA-MIB", "tmnxDADCBtStSvrLastChanged"), ("TIMETRA-DA-MIB", "tmnxDADCBtStSvrAddrType"), ("TIMETRA-DA-MIB", "tmnxDADCBtStSvrAddress"), ("TIMETRA-DA-MIB", "tmnxDAHttpTableLastChanged"), ("TIMETRA-DA-MIB", "tmnxDAHttpLastChanged"), ("TIMETRA-DA-MIB", "tmnxDAHttpServerAdminState"), ("TIMETRA-DA-MIB", "tmnxDAHttpServerOperState"), ("TIMETRA-DA-MIB", "tmnxDAHttpServerIdleTimeout"), ("TIMETRA-DA-MIB", "tmnxDAHttpServerViaString"), ("TIMETRA-DA-MIB", "tmnxDAHttpServerStrBWInUse"), ("TIMETRA-DA-MIB", "tmnxDAHttpServerStrBWInUseL32"), ("TIMETRA-DA-MIB", "tmnxDAHttpServerStrBWInUseH32"), ("TIMETRA-DA-MIB", "tmnxDAHttpServerXferInProg"), ("TIMETRA-DA-MIB", "tmnxDAHttpServerXferCompleted"), ("TIMETRA-DA-MIB", "tmnxDAHttpServerXferCompletedL32"), ("TIMETRA-DA-MIB", "tmnxDAHttpServerXferCompletedH32"), ("TIMETRA-DA-MIB", "tmnxDAHttpServerXferTimeouts"), ("TIMETRA-DA-MIB", "tmnxDAHttpServerXferFailed"), ("TIMETRA-DA-MIB", "tmnxDAHttpServerValidRequests"), ("TIMETRA-DA-MIB", "tmnxDAHttpServerValidRequestsL32"), ("TIMETRA-DA-MIB", "tmnxDAHttpServerValidRequestsH32"), ("TIMETRA-DA-MIB", "tmnxDAHttpServerInvalidRequests"), ("TIMETRA-DA-MIB", "tmnxDAHttpServerMethodNotSuppted"), ("TIMETRA-DA-MIB", "tmnxDAHttpServerHostNotSuppted"), ("TIMETRA-DA-MIB", "tmnxDAHttpServer1XXCountSent"), ("TIMETRA-DA-MIB", "tmnxDAHttpServer1XXCountSentL32"), ("TIMETRA-DA-MIB", "tmnxDAHttpServer1XXCountSentH32"), ("TIMETRA-DA-MIB", "tmnxDAHttpServer2XXCountSent"), ("TIMETRA-DA-MIB", "tmnxDAHttpServer2XXCountSentL32"), ("TIMETRA-DA-MIB", "tmnxDAHttpServer2XXCountSentH32"), ("TIMETRA-DA-MIB", "tmnxDAHttpServer3XXCountSent"), ("TIMETRA-DA-MIB", "tmnxDAHttpServer3XXCountSentL32"), ("TIMETRA-DA-MIB", "tmnxDAHttpServer3XXCountSentH32"), ("TIMETRA-DA-MIB", "tmnxDAHttpServer4XXCountSent"), ("TIMETRA-DA-MIB", "tmnxDAHttpServer4XXCountSentL32"), ("TIMETRA-DA-MIB", "tmnxDAHttpServer4XXCountSentH32"), ("TIMETRA-DA-MIB", "tmnxDAHttpServer5XXCountSent"), ("TIMETRA-DA-MIB", "tmnxDAHttpServer5XXCountSentL32"), ("TIMETRA-DA-MIB", "tmnxDAHttpServer5XXCountSentH32"), ("TIMETRA-DA-MIB", "tmnxDAHttpIngestAdminState"), ("TIMETRA-DA-MIB", "tmnxDAHttpIngestOperState"), ("TIMETRA-DA-MIB", "tmnxDAHttpIngestIsmLinkName"), ("TIMETRA-DA-MIB", "tmnxDAHttpIngestIdleTimeout"), ("TIMETRA-DA-MIB", "tmnxDAHttpIngestXferInProg"), ("TIMETRA-DA-MIB", "tmnxDAHttpIngestXferCompleted"), ("TIMETRA-DA-MIB", "tmnxDAHttpIngestXferCompletedL32"), ("TIMETRA-DA-MIB", "tmnxDAHttpIngestXferCompletedH32"), ("TIMETRA-DA-MIB", "tmnxDAHttpIngestXferTimeouts"), ("TIMETRA-DA-MIB", "tmnxDAHttpIngestXferFailed"), ("TIMETRA-DA-MIB", "tmnxDAHttpIngest1XXCountRecd"), ("TIMETRA-DA-MIB", "tmnxDAHttpIngest1XXCountRecdL32"), ("TIMETRA-DA-MIB", "tmnxDAHttpIngest1XXCountRecdH32"), ("TIMETRA-DA-MIB", "tmnxDAHttpIngest2XXCountRecd"), ("TIMETRA-DA-MIB", "tmnxDAHttpIngest2XXCountRecdL32"), ("TIMETRA-DA-MIB", "tmnxDAHttpIngest2XXCountRecdH32"), ("TIMETRA-DA-MIB", "tmnxDAHttpIngest3XXCountRecd"), ("TIMETRA-DA-MIB", "tmnxDAHttpIngest3XXCountRecdL32"), ("TIMETRA-DA-MIB", "tmnxDAHttpIngest3XXCountRecdH32"), ("TIMETRA-DA-MIB", "tmnxDAHttpIngest4XXCountRecd"), ("TIMETRA-DA-MIB", "tmnxDAHttpIngest4XXCountRecdL32"), ("TIMETRA-DA-MIB", "tmnxDAHttpIngest4XXCountRecdH32"), ("TIMETRA-DA-MIB", "tmnxDAHttpIngest5XXCountRecd"), ("TIMETRA-DA-MIB", "tmnxDAHttpIngest5XXCountRecdL32"), ("TIMETRA-DA-MIB", "tmnxDAHttpIngest5XXCountRecdH32"), ("TIMETRA-DA-MIB", "tmnxDAIsmLinkTableLastChanged"), ("TIMETRA-DA-MIB", "tmnxDAIsmLinkRowStatus"), ("TIMETRA-DA-MIB", "tmnxDAIsmLinkLastChanged"), ("TIMETRA-DA-MIB", "tmnxDAIsmLinkAddrType"), ("TIMETRA-DA-MIB", "tmnxDAIsmLinkAddress"), ("TIMETRA-DA-MIB", "tmnxDAIsmLinkAddrPrefixLength"), ("TIMETRA-DA-MIB", "tmnxDAIsmLinkDescription"), ("TIMETRA-DA-MIB", "tmnxDAIsmLinkHttpd"), ("TIMETRA-DA-MIB", "tmnxDAIsmLinkHttpListenPort"), ("TIMETRA-DA-MIB", "tmnxDAIsmLinkIpMtu"), ("TIMETRA-DA-MIB", "tmnxDAIsmLinkQtag"), ("TIMETRA-DA-MIB", "tmnxDAIsmLinkMacAddress"), ("TIMETRA-DA-MIB", "tmnxDAIsmLinkAdminState"), ("TIMETRA-DA-MIB", "tmnxDAIsmLinkOperState"), ("TIMETRA-DA-MIB", "tmnxDAIsmLinkBindings"), ("TIMETRA-DA-MIB", "tmnxDAIsmLinkArpTableLastChanged"), ("TIMETRA-DA-MIB", "tmnxDAIsmLinkArpRowStatus"), ("TIMETRA-DA-MIB", "tmnxDAIsmLinkArpLastChanged"), ("TIMETRA-DA-MIB", "tmnxDAIsmLinkArpMacAddr"), ("TIMETRA-DA-MIB", "tmnxDAIsmLinkArpType"), ("TIMETRA-DA-MIB", "tmnxDAStRouteTableLastChanged"), ("TIMETRA-DA-MIB", "tmnxDAStRouteRowStatus"), ("TIMETRA-DA-MIB", "tmnxDAStRouteLastChanged"), ("TIMETRA-DA-MIB", "tmnxDAStRouteMetric"), ("TIMETRA-DA-MIB", "tmnxDASGCardUpTime"), ("TIMETRA-DA-MIB", "tmnxDASGCardTotNumTCPConn"), ("TIMETRA-DA-MIB", "tmnxDASGCardTCPConnEstab"), ("TIMETRA-DA-MIB", "tmnxDASGCardTCPConnEstabL32"), ("TIMETRA-DA-MIB", "tmnxDASGCardTCPConnEstabH32"), ("TIMETRA-DA-MIB", "tmnxDASGCardTCPConnClosed"), ("TIMETRA-DA-MIB", "tmnxDASGCardTCPConnClosedL32"), ("TIMETRA-DA-MIB", "tmnxDASGCardTCPConnClosedH32"), ("TIMETRA-DA-MIB", "tmnxDASGCardTCPRetries"), ("TIMETRA-DA-MIB", "tmnxDASGCardTCPRetriesL32"), ("TIMETRA-DA-MIB", "tmnxDASGCardTCPRetriesH32"), ("TIMETRA-DA-MIB", "tmnxDASGCardTCPAckTimeOut"), ("TIMETRA-DA-MIB", "tmnxDASGCardTCPAckTimeOutL32"), ("TIMETRA-DA-MIB", "tmnxDASGCardTCPAckTimeOutH32"), ("TIMETRA-DA-MIB", "tmnxDASGCardTCPFarEndClosed"), ("TIMETRA-DA-MIB", "tmnxDASGCardTCPFarEndClosedL32"), ("TIMETRA-DA-MIB", "tmnxDASGCardTCPFarEndClosedH32"), ("TIMETRA-DA-MIB", "tmnxDASGCardTCPLocalEndClosed"), ("TIMETRA-DA-MIB", "tmnxDASGCardTCPLocalEndClosedL32"), ("TIMETRA-DA-MIB", "tmnxDASGCardTCPLocalEndClosedH32"), ("TIMETRA-DA-MIB", "tmnxDASGCardUsedStorageCpcty"), ("TIMETRA-DA-MIB", "tmnxDASGCardUsedStorageCpctyL32"), ("TIMETRA-DA-MIB", "tmnxDASGCardUsedStorageCpctyH32"), ("TIMETRA-DA-MIB", "tmnxDASGCardRemStorageCpcty"), ("TIMETRA-DA-MIB", "tmnxDASGCardRemStorageCpctyL32"), ("TIMETRA-DA-MIB", "tmnxDASGCardRemStorageCpctyH32"), ("TIMETRA-DA-MIB", "tmnxDASGCardNumberOfAssets"), ("TIMETRA-DA-MIB", "tmnxDASGCardNumberOfOrigins"), ("TIMETRA-DA-MIB", "tmnxDASGCardNumberOfURIs"), ("TIMETRA-DA-MIB", "tmnxDASGCardECCBlockCorrections"), ("TIMETRA-DA-MIB", "tmnxDASGCardECCBlockFailures"), ("TIMETRA-DA-MIB", "tmnxDASGCardPercentBadBlocks"), ("TIMETRA-DA-MIB", "tmnxDASGCardFPGATotPktsSent"), ("TIMETRA-DA-MIB", "tmnxDASGCardFPGATotPktsSentL32"), ("TIMETRA-DA-MIB", "tmnxDASGCardFPGATotPktsSentH32"), ("TIMETRA-DA-MIB", "tmnxDASGCardFPGATotBytesSent"), ("TIMETRA-DA-MIB", "tmnxDASGCardFPGATotBytesSentL32"), ("TIMETRA-DA-MIB", "tmnxDASGCardFPGATotBytesSentH32"), ("TIMETRA-DA-MIB", "tmnxDASGCardFPGATotPktsRecd"), ("TIMETRA-DA-MIB", "tmnxDASGCardFPGATotPktsRecdL32"), ("TIMETRA-DA-MIB", "tmnxDASGCardFPGATotPktsRecdH32"), ("TIMETRA-DA-MIB", "tmnxDASGCardFPGATotBytesRecd"), ("TIMETRA-DA-MIB", "tmnxDASGCardFPGATotBytesRecdL32"), ("TIMETRA-DA-MIB", "tmnxDASGCardFPGATotBytesRecdH32"), ("TIMETRA-DA-MIB", "tmnxDASGCardFPGAUnderflowErrors"), ("TIMETRA-DA-MIB", "tmnxDASGCardFPGAOverflowErrors"), ("TIMETRA-DA-MIB", "tmnxDADCIntfFQDNType"), ("TIMETRA-DA-MIB", "tmnxDADCIntfFQDN"), ("TIMETRA-DA-MIB", "tmnxDADCIntfSrcPort"), ("TIMETRA-DA-MIB", "tmnxDADCIntfDestPort"), ("TIMETRA-DA-MIB", "tmnxDADCIntfOperState"), ("TIMETRA-DA-MIB", "tmnxDADCIntfIPUpTime"), ("TIMETRA-DA-MIB", "tmnxDADCIntfIdleTime"), ("TIMETRA-DA-MIB", "tmnxDADCIntfRetry"), ("TIMETRA-DA-MIB", "tmnxDADCIntfTimeToLive"), ("TIMETRA-DA-MIB", "tmnxDADCIntfEtag"), ("TIMETRA-DA-MIB", "tmnxDADCIntfInterval"), ("TIMETRA-DA-MIB", "tmnxDADCIntfPriority"), ("TIMETRA-DA-MIB", "tmnxDADCIntfWeight"), ("TIMETRA-DA-MIB", "tmnxDADCIntfAttemptedSessStups"), ("TIMETRA-DA-MIB", "tmnxDADCIntfFailedSessStups"), ("TIMETRA-DA-MIB", "tmnxDADCIntfPingReqTxCount"), ("TIMETRA-DA-MIB", "tmnxDADCIntfPingResRxCount"), ("TIMETRA-DA-MIB", "tmnxDADCIntfReqMsgTxCount"), ("TIMETRA-DA-MIB", "tmnxDADCIntfReqMsgTxCountL32"), ("TIMETRA-DA-MIB", "tmnxDADCIntfReqMsgTxCountH32"), ("TIMETRA-DA-MIB", "tmnxDADCIntfResMsgRxCount"), ("TIMETRA-DA-MIB", "tmnxDADCIntfResMsgRxCountL32"), ("TIMETRA-DA-MIB", "tmnxDADCIntfResMsgRxCountH32"), ("TIMETRA-DA-MIB", "tmnxDADCIntfDecodeErrors"), ("TIMETRA-DA-MIB", "tmnxDADCIntfConnectionBounce"), ("TIMETRA-DA-MIB", "tmnxDADCIntfRemoteClose"), ("TIMETRA-DA-MIB", "tmnxDADCIntfNoResponse"), ("TIMETRA-DA-MIB", "tmnxDAGrpOrigSvrIPAddrType"), ("TIMETRA-DA-MIB", "tmnxDAGrpOrigSvrIPAddress"), ("TIMETRA-DA-MIB", "tmnxDAGrpOrigSvrNumObjDelvred"), ("TIMETRA-DA-MIB", "tmnxDAGrpOrigSvrNumObjDelvredL32"), ("TIMETRA-DA-MIB", "tmnxDAGrpOrigSvrNumObjDelvredH32"), ("TIMETRA-DA-MIB", "tmnxDAGrpOrigSvrNumObjFailed"), ("TIMETRA-DA-MIB", "tmnxDAGrpOrigSvrNumObjFailedL32"), ("TIMETRA-DA-MIB", "tmnxDAGrpOrigSvrNumObjFailedH32"), ("TIMETRA-DA-MIB", "tmnxDAGrpOrigSvrNumCurTCPConn"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxDAV10v0Group = tmnxDAV10v0Group.setStatus('current')
mibBuilder.exportSymbols("TIMETRA-DA-MIB", tmnxDASGCardFPGATotBytesRecd=tmnxDASGCardFPGATotBytesRecd, tmnxDAHttpServerStrBWInUseH32=tmnxDAHttpServerStrBWInUseH32, tmnxDASGCardRemStorageCpcty=tmnxDASGCardRemStorageCpcty, tmnxDAIsmLinkDescription=tmnxDAIsmLinkDescription, tmnxDAIsmLinkArpTableLastChanged=tmnxDAIsmLinkArpTableLastChanged, tmnxDADCIntfSrcPort=tmnxDADCIntfSrcPort, tmnxDASGCardTCPAckTimeOutH32=tmnxDASGCardTCPAckTimeOutH32, tmnxDASGCardTCPConnClosed=tmnxDASGCardTCPConnClosed, tmnxDAHttpServerXferCompleted=tmnxDAHttpServerXferCompleted, tmnxDAGrpDnsSvrAddrTyp=tmnxDAGrpDnsSvrAddrTyp, tmnxDAStRouteMetric=tmnxDAStRouteMetric, tmnxDAGrpObjectsFromCacheH32=tmnxDAGrpObjectsFromCacheH32, tmnxDAHttpServer5XXCountSentH32=tmnxDAHttpServer5XXCountSentH32, tmnxDASGCardTCPFarEndClosedL32=tmnxDASGCardTCPFarEndClosedL32, tmnxDAHttpTable=tmnxDAHttpTable, tmnxDASGCardTCPFarEndClosedH32=tmnxDASGCardTCPFarEndClosedH32, tmnxDAIsmLinkAdminState=tmnxDAIsmLinkAdminState, tmnxDASGCardEntry=tmnxDASGCardEntry, tmnxDAGrpDCIsmLinkName=tmnxDAGrpDCIsmLinkName, tmnxDAGrpOrigSvrTable=tmnxDAGrpOrigSvrTable, tmnxDAGrpOrigSvrNumObjFailedL32=tmnxDAGrpOrigSvrNumObjFailedL32, tmnxDADCIntfAttemptedSessStups=tmnxDADCIntfAttemptedSessStups, tmnxDAIsmLinkArpEntry=tmnxDAIsmLinkArpEntry, tmnxDAIsmLinkArpLastChanged=tmnxDAIsmLinkArpLastChanged, tmnxDADCIntfInterval=tmnxDADCIntfInterval, tmnxDAGrpDCAdminState=tmnxDAGrpDCAdminState, tmnxDAHttpLastChanged=tmnxDAHttpLastChanged, tmnxDAIsmLinkOperState=tmnxDAIsmLinkOperState, tmnxDAGrpDCAuthCache=tmnxDAGrpDCAuthCache, tmnxDAV10v0Compliance=tmnxDAV10v0Compliance, tmnxDAIsmLinkEntry=tmnxDAIsmLinkEntry, tmnxDASGCardTCPRetriesL32=tmnxDASGCardTCPRetriesL32, tmnxDAHttpServerViaString=tmnxDAHttpServerViaString, tmnxDAHttpServerValidRequestsH32=tmnxDAHttpServerValidRequestsH32, tmnxDAHttpServer3XXCountSent=tmnxDAHttpServer3XXCountSent, tmnxDAIsmLinkArpTable=tmnxDAIsmLinkArpTable, tmnxDAStRouteEntry=tmnxDAStRouteEntry, tmnxDAGrpRowStatus=tmnxDAGrpRowStatus, tmnxDASGCardRemStorageCpctyH32=tmnxDASGCardRemStorageCpctyH32, tmnxDASGCardFPGATotPktsSent=tmnxDASGCardFPGATotPktsSent, tmnxDAGrpDCAvgRTTPerPeer=tmnxDAGrpDCAvgRTTPerPeer, tmnxDASGCardTCPConnEstab=tmnxDASGCardTCPConnEstab, tmnxDAStRouteAddress=tmnxDAStRouteAddress, tmnxDASGCardPercentBadBlocks=tmnxDASGCardPercentBadBlocks, tmnxDAGrpDnsSvrAddress=tmnxDAGrpDnsSvrAddress, tmnxDAIsmLinkHttpListenPort=tmnxDAIsmLinkHttpListenPort, tmnxDAStRouteNextHopAddrType=tmnxDAStRouteNextHopAddrType, tmnxDAHttpEntry=tmnxDAHttpEntry, tmnxDASGCardFPGATotBytesSentH32=tmnxDASGCardFPGATotBytesSentH32, tmnxDAGrpAdminState=tmnxDAGrpAdminState, tmnxDASvrGrpEntry=tmnxDASvrGrpEntry, tmnxDADCBtStSvrAddrType=tmnxDADCBtStSvrAddrType, tmnxDAHttpServerHostNotSuppted=tmnxDAHttpServerHostNotSuppted, tmnxDASGCardTCPAckTimeOut=tmnxDASGCardTCPAckTimeOut, tmnxDAHttpIngest4XXCountRecdL32=tmnxDAHttpIngest4XXCountRecdL32, tmnxDAStRouteTable=tmnxDAStRouteTable, tmnxDASGCardTotNumTCPConn=tmnxDASGCardTotNumTCPConn, tmnxDADCIntfIPUpTime=tmnxDADCIntfIPUpTime, tmnxDAGrpBytesFromCacheL32=tmnxDAGrpBytesFromCacheL32, tmnxDASGCardTCPConnEstabH32=tmnxDASGCardTCPConnEstabH32, tmnxDAHttpServerXferFailed=tmnxDAHttpServerXferFailed, tmnxDASGCardFPGATotBytesSent=tmnxDASGCardFPGATotBytesSent, tmnxDAGrpOrigSvrNumObjFailedH32=tmnxDAGrpOrigSvrNumObjFailedH32, timetraDAMIBModule=timetraDAMIBModule, tmnxDAGrpDCDeniedAuth=tmnxDAGrpDCDeniedAuth, tmnxDAIsmLinkArpAddrType=tmnxDAIsmLinkArpAddrType, tmnxDAHttpServerIdleTimeout=tmnxDAHttpServerIdleTimeout, tmnxDAGrpTable=tmnxDAGrpTable, tmnxDAHttpServerXferCompletedL32=tmnxDAHttpServerXferCompletedL32, tmnxDAGrpObjectsNotFromCacheL32=tmnxDAGrpObjectsNotFromCacheL32, tmnxDASGCardTCPConnClosedH32=tmnxDASGCardTCPConnClosedH32, tmnxDADCIntfEtag=tmnxDADCIntfEtag, tmnxDAHttpIngestOperState=tmnxDAHttpIngestOperState, tmnxDASvrGrpLastChanged=tmnxDASvrGrpLastChanged, tmnxDAIsmLinkHttpd=tmnxDAIsmLinkHttpd, tmnxDAGrpTableLastChanged=tmnxDAGrpTableLastChanged, tmnxDAIsmLinkAddrType=tmnxDAIsmLinkAddrType, tmnxDADCIntfResMsgRxCountH32=tmnxDADCIntfResMsgRxCountH32, tmnxDAGrpOrigSvrNumCurTCPConn=tmnxDAGrpOrigSvrNumCurTCPConn, tmnxDAGrpDCBootStrapPort=tmnxDAGrpDCBootStrapPort, tmnxDAGrpObjectsNotFromCache=tmnxDAGrpObjectsNotFromCache, tmnxDAGrpDCConnRetryTimer=tmnxDAGrpDCConnRetryTimer, tmnxDAHttpServerValidRequestsL32=tmnxDAHttpServerValidRequestsL32, tmnxDAHttpIngest2XXCountRecd=tmnxDAHttpIngest2XXCountRecd, tmnxDASGCardNumberOfAssets=tmnxDASGCardNumberOfAssets, tmnxDADCIntfFQDN=tmnxDADCIntfFQDN, tmnxDADCIntfRetry=tmnxDADCIntfRetry, tmnxDAGrpOrigSvrEntry=tmnxDAGrpOrigSvrEntry, tmnxDAGrpObjectByteCountH32=tmnxDAGrpObjectByteCountH32, tmnxDAGrpObjectsFromCache=tmnxDAGrpObjectsFromCache, tmnxDASGCardTCPConnEstabL32=tmnxDASGCardTCPConnEstabL32, tmnxDAGrpOrigSvrIPAddress=tmnxDAGrpOrigSvrIPAddress, tmnxDASGCardFPGATotPktsSentL32=tmnxDASGCardFPGATotPktsSentL32, tmnxDASGCardFPGAOverflowErrors=tmnxDASGCardFPGAOverflowErrors, tmnxDAGrpNumberOfOrigins=tmnxDAGrpNumberOfOrigins, tmnxDAHttpIngest1XXCountRecdL32=tmnxDAHttpIngest1XXCountRecdL32, tmnxDAGrpServerGroupIndex=tmnxDAGrpServerGroupIndex, tmnxDAStRouteLastChanged=tmnxDAStRouteLastChanged, tmnxDACompliances=tmnxDACompliances, tmnxDAHttpServerXferTimeouts=tmnxDAHttpServerXferTimeouts, tmnxDAHttpIngestXferCompletedH32=tmnxDAHttpIngestXferCompletedH32, tmnxDASGCardUsedStorageCpctyH32=tmnxDASGCardUsedStorageCpctyH32, tmnxDADCBtStSvrTableLastChanged=tmnxDADCBtStSvrTableLastChanged, tmnxDASGCardNumber=tmnxDASGCardNumber, tmnxDAIsmLinkArpType=tmnxDAIsmLinkArpType, tmnxDASGCardUsedStorageCpctyL32=tmnxDASGCardUsedStorageCpctyL32, tmnxDAGrpDCAuthCacheMissH32=tmnxDAGrpDCAuthCacheMissH32, tmnxDASGCardTCPRetries=tmnxDASGCardTCPRetries, tmnxDADCIntfConnectionBounce=tmnxDADCIntfConnectionBounce, tmnxDASGCardFPGATotBytesRecdH32=tmnxDASGCardFPGATotBytesRecdH32, tmnxDASvrGrpTable=tmnxDASvrGrpTable, tmnxDAGrpDCAuthCacheMissL32=tmnxDAGrpDCAuthCacheMissL32, tmnxDADCIntfIdleTime=tmnxDADCIntfIdleTime, tmnxDAStRouteNextHopAddress=tmnxDAStRouteNextHopAddress, tmnxDAHttpServer5XXCountSentL32=tmnxDAHttpServer5XXCountSentL32, tmnxDAStRouteAddrType=tmnxDAStRouteAddrType, tmnxDADCIntfIPAddress=tmnxDADCIntfIPAddress, tmnxDAIsmLinkRowStatus=tmnxDAIsmLinkRowStatus, tmnxDASGCardFPGATotBytesSentL32=tmnxDASGCardFPGATotBytesSentL32, tmnxDAHttpServer1XXCountSent=tmnxDAHttpServer1XXCountSent, tmnxDAStRoutePrefixLength=tmnxDAStRoutePrefixLength, tmnxDASvrGrpAdminState=tmnxDASvrGrpAdminState, tmnxDAGrpObjectByteCountL32=tmnxDAGrpObjectByteCountL32, tmnxDAGrpDnsSvrEntry=tmnxDAGrpDnsSvrEntry, tmnxDAHttpServer4XXCountSentH32=tmnxDAHttpServer4XXCountSentH32, tmnxDADCIntfDestPort=tmnxDADCIntfDestPort, tmnxDADCIntfTimeToLive=tmnxDADCIntfTimeToLive, tmnxDASGCardTCPConnClosedL32=tmnxDASGCardTCPConnClosedL32, tmnxDAGrpOrigSvrNumObjDelvred=tmnxDAGrpOrigSvrNumObjDelvred, tmnxDAGrpNumberOfOriginsH32=tmnxDAGrpNumberOfOriginsH32, tmnxDAGrpBytesFromCacheH32=tmnxDAGrpBytesFromCacheH32, tmnxDAGrpEntry=tmnxDAGrpEntry, tmnxDAGrpDescription=tmnxDAGrpDescription, tmnxDAGrpDnsSvrTable=tmnxDAGrpDnsSvrTable, tmnxDAHttpIngest3XXCountRecdH32=tmnxDAHttpIngest3XXCountRecdH32, tmnxDAHttpIngest5XXCountRecd=tmnxDAHttpIngest5XXCountRecd, tmnxDAIsmLinkArpMacAddr=tmnxDAIsmLinkArpMacAddr, tmnxDASGCardUsedStorageCpcty=tmnxDASGCardUsedStorageCpcty, tmnxDADCIntfIPAddrType=tmnxDADCIntfIPAddrType, tmnxDASvrGrpTableLastChanged=tmnxDASvrGrpTableLastChanged, tmnxDASvrGrpCardSlotNumber=tmnxDASvrGrpCardSlotNumber, tmnxDAGrpBytesNotFromCacheL32=tmnxDAGrpBytesNotFromCacheL32, tmnxDANotifications=tmnxDANotifications, tmnxDAHttpIngest4XXCountRecd=tmnxDAHttpIngest4XXCountRecd, tmnxDAHttpServerMethodNotSuppted=tmnxDAHttpServerMethodNotSuppted, tmnxDASvrGrpIndex=tmnxDASvrGrpIndex, tmnxDAHttpServer3XXCountSentL32=tmnxDAHttpServer3XXCountSentL32, tmnxDADCIntfFQDNType=tmnxDADCIntfFQDNType, tmnxDASGCardFPGATotBytesRecdL32=tmnxDASGCardFPGATotBytesRecdL32, tmnxDAGrpDCAuthCacheHitL32=tmnxDAGrpDCAuthCacheHitL32, tmnxDASGCardTCPRetriesH32=tmnxDASGCardTCPRetriesH32, tmnxDAHttpIngestXferCompleted=tmnxDAHttpIngestXferCompleted, tmnxDAHttpServer2XXCountSentL32=tmnxDAHttpServer2XXCountSentL32, tmnxDAHttpIngest3XXCountRecdL32=tmnxDAHttpIngest3XXCountRecdL32, tmnxDASGCardECCBlockFailures=tmnxDASGCardECCBlockFailures, tmnxDAHttpServerStrBWInUseL32=tmnxDAHttpServerStrBWInUseL32, tmnxDAGrpDnsSvrRowStatus=tmnxDAGrpDnsSvrRowStatus, tmnxDASGCardTCPFarEndClosed=tmnxDASGCardTCPFarEndClosed, tmnxDASGCardFPGATotPktsRecdL32=tmnxDASGCardFPGATotPktsRecdL32, tmnxDAHttpIngest2XXCountRecdL32=tmnxDAHttpIngest2XXCountRecdL32, tmnxDAHttpTableLastChanged=tmnxDAHttpTableLastChanged, tmnxDASGCardTCPAckTimeOutL32=tmnxDASGCardTCPAckTimeOutL32, tmnxDAIsmLinkIpMtu=tmnxDAIsmLinkIpMtu, tmnxDAGrpBytesFromCache=tmnxDAGrpBytesFromCache, tmnxDAHttpIngest1XXCountRecdH32=tmnxDAHttpIngest1XXCountRecdH32, tmnxDAGrpObjectByteCount=tmnxDAGrpObjectByteCount, tmnxDAIsmLinkTableLastChanged=tmnxDAIsmLinkTableLastChanged, tmnxDAIsmLinkQtag=tmnxDAIsmLinkQtag, tmnxDAIsmLinkArpAddress=tmnxDAIsmLinkArpAddress, tmnxDADCBtStSvrTable=tmnxDADCBtStSvrTable, tmnxDAGrpOrigSvrIPAddrType=tmnxDAGrpOrigSvrIPAddrType, tmnxDAGrpDCAuthCacheHitH32=tmnxDAGrpDCAuthCacheHitH32, tmnxDAGrpDCDeniedAuthH32=tmnxDAGrpDCDeniedAuthH32, tmnxDAHttpServer2XXCountSent=tmnxDAHttpServer2XXCountSent, tmnxDAHttpIngestXferTimeouts=tmnxDAHttpIngestXferTimeouts, tmnxDADCIntfWeight=tmnxDADCIntfWeight, tmnxDAIsmLinkAddress=tmnxDAIsmLinkAddress, tmnxDADCBtStSvrRowStatus=tmnxDADCBtStSvrRowStatus, tmnxDADCIntfNoResponse=tmnxDADCIntfNoResponse, tmnxDAIsmLinkName=tmnxDAIsmLinkName, tmnxDAHttpIngest5XXCountRecdH32=tmnxDAHttpIngest5XXCountRecdH32, tmnxDADCIntfDecodeErrors=tmnxDADCIntfDecodeErrors, tmnxDAHttpIngestAdminState=tmnxDAHttpIngestAdminState, tmnxDADCIntfReqMsgTxCountL32=tmnxDADCIntfReqMsgTxCountL32, tmnxDADCIntfResMsgRxCountL32=tmnxDADCIntfResMsgRxCountL32, tmnxDAGroups=tmnxDAGroups, tmnxDAGrpDCMinRTTPerPeer=tmnxDAGrpDCMinRTTPerPeer, tmnxDAStRouteTableLastChanged=tmnxDAStRouteTableLastChanged, tmnxDASvrGrpRowStatus=tmnxDASvrGrpRowStatus, tmnxDAHttpServerOperState=tmnxDAHttpServerOperState, tmnxDAHttpServerValidRequests=tmnxDAHttpServerValidRequests, tmnxDAHttpIngest1XXCountRecd=tmnxDAHttpIngest1XXCountRecd, tmnxDAHttpServer3XXCountSentH32=tmnxDAHttpServer3XXCountSentH32, PYSNMP_MODULE_ID=timetraDAMIBModule, tmnxDAGrpLastChanged=tmnxDAGrpLastChanged, tmnxDAGrpDnsSvrTableLastChanged=tmnxDAGrpDnsSvrTableLastChanged, tmnxDAHttpIngestIsmLinkName=tmnxDAHttpIngestIsmLinkName, tmnxDAIsmLinkMacAddress=tmnxDAIsmLinkMacAddress, tmnxDAHttpIngest4XXCountRecdH32=tmnxDAHttpIngest4XXCountRecdH32, tmnxDADCIntfRemoteClose=tmnxDADCIntfRemoteClose, tmnxDADCIntfFailedSessStups=tmnxDADCIntfFailedSessStups, tmnxDASGCardRemStorageCpctyL32=tmnxDASGCardRemStorageCpctyL32, tmnxDADCIntfTable=tmnxDADCIntfTable, tmnxDADCBtStSvrLastChanged=tmnxDADCBtStSvrLastChanged, tmnxDASGCardFPGATotPktsRecd=tmnxDASGCardFPGATotPktsRecd, tmnxDASGCardNumberOfURIs=tmnxDASGCardNumberOfURIs, tmnxDASGCardNumberOfOrigins=tmnxDASGCardNumberOfOrigins, tmnxDADCIntfEntry=tmnxDADCIntfEntry, tmnxDADCIntfPriority=tmnxDADCIntfPriority, tmnxDASvrGrpOperState=tmnxDASvrGrpOperState, tmnxDADCIntfReqMsgTxCount=tmnxDADCIntfReqMsgTxCount, tmnxDAHttpServer1XXCountSentL32=tmnxDAHttpServer1XXCountSentL32, tmnxDAObjs=tmnxDAObjs, tmnxDAGrpDCIdleTimeout=tmnxDAGrpDCIdleTimeout, tmnxDAIsmLinkBindings=tmnxDAIsmLinkBindings, tmnxDAHttpServer5XXCountSent=tmnxDAHttpServer5XXCountSent, tmnxDAGrpDCAuthCacheHit=tmnxDAGrpDCAuthCacheHit, tmnxDADCIntfOperState=tmnxDADCIntfOperState, tmnxDAHttpIngest2XXCountRecdH32=tmnxDAHttpIngest2XXCountRecdH32, tmnxDAGrpOrigSvrName=tmnxDAGrpOrigSvrName, tmnxDASGCardTCPLocalEndClosedH32=tmnxDASGCardTCPLocalEndClosedH32, tmnxDAGrpOrigSvrNumObjFailed=tmnxDAGrpOrigSvrNumObjFailed, tmnxDAHttpServerInvalidRequests=tmnxDAHttpServerInvalidRequests, tmnxDASGCardTCPLocalEndClosed=tmnxDASGCardTCPLocalEndClosed, tmnxDADCIntfResMsgRxCount=tmnxDADCIntfResMsgRxCount, tmnxDAGrpNumberOfOriginsL32=tmnxDAGrpNumberOfOriginsL32, tmnxDAGrpDCAuthCacheMiss=tmnxDAGrpDCAuthCacheMiss, tmnxDAHttpServer4XXCountSentL32=tmnxDAHttpServer4XXCountSentL32, tmnxDAIsmLinkLastChanged=tmnxDAIsmLinkLastChanged, tmnxDAGrpOrigSvrNumObjDelvredH32=tmnxDAGrpOrigSvrNumObjDelvredH32, tmnxDAHttpServer4XXCountSent=tmnxDAHttpServer4XXCountSent, tmnxDADCIntfType=tmnxDADCIntfType, tmnxDAGrpBytesNotFromCache=tmnxDAGrpBytesNotFromCache, tmnxDAIsmLinkArpRowStatus=tmnxDAIsmLinkArpRowStatus, tmnxDAHttpIngestIdleTimeout=tmnxDAHttpIngestIdleTimeout, tmnxDAGrpDnsSvrLastChanged=tmnxDAGrpDnsSvrLastChanged, tmnxDASGCardTCPLocalEndClosedL32=tmnxDASGCardTCPLocalEndClosedL32, tmnxDASGCardFPGATotPktsRecdH32=tmnxDASGCardFPGATotPktsRecdH32, tmnxDADCIntfPingResRxCount=tmnxDADCIntfPingResRxCount, tmnxDAHttpServerXferInProg=tmnxDAHttpServerXferInProg, tmnxDANotifyPrefix=tmnxDANotifyPrefix, tmnxDAGrpDCMaxRTTPerPeer=tmnxDAGrpDCMaxRTTPerPeer, tmnxDAGrpObjectsFromCacheL32=tmnxDAGrpObjectsFromCacheL32, tmnxDAHttpServer2XXCountSentH32=tmnxDAHttpServer2XXCountSentH32, tmnxDAIsmLinkAddrPrefixLength=tmnxDAIsmLinkAddrPrefixLength, tmnxDAGrpName=tmnxDAGrpName, tmnxDAGrpObjectsNotFromCacheH32=tmnxDAGrpObjectsNotFromCacheH32, tmnxDAHttpServerStrBWInUse=tmnxDAHttpServerStrBWInUse, tmnxDADCIntfReqMsgTxCountH32=tmnxDADCIntfReqMsgTxCountH32, tmnxDA=tmnxDA, tmnxDAIsmLinkTable=tmnxDAIsmLinkTable, tmnxDAGrpDCDeniedAuthL32=tmnxDAGrpDCDeniedAuthL32, tmnxDADCBtStSvrEntry=tmnxDADCBtStSvrEntry, tmnxDAHttpServerXferCompletedH32=tmnxDAHttpServerXferCompletedH32)
mibBuilder.exportSymbols("TIMETRA-DA-MIB", tmnxDAHttpIngestXferInProg=tmnxDAHttpIngestXferInProg, tmnxDAGrpDnsClientIsmLinkName=tmnxDAGrpDnsClientIsmLinkName, tmnxDASGCardTable=tmnxDASGCardTable, tmnxDAHttpIngest3XXCountRecd=tmnxDAHttpIngest3XXCountRecd, tmnxDAHttpIngest5XXCountRecdL32=tmnxDAHttpIngest5XXCountRecdL32, tmnxDAStRouteRowStatus=tmnxDAStRouteRowStatus, tmnxDASGCardUpTime=tmnxDASGCardUpTime, tmnxDADCBtStSvrAddress=tmnxDADCBtStSvrAddress, tmnxDAHttpServerAdminState=tmnxDAHttpServerAdminState, tmnxDASGCardFPGATotPktsSentH32=tmnxDASGCardFPGATotPktsSentH32, tmnxDAV10v0Group=tmnxDAV10v0Group, tmnxDADCBtStSvrIndex=tmnxDADCBtStSvrIndex, tmnxDAHttpIngestXferFailed=tmnxDAHttpIngestXferFailed, tmnxDAHttpIngestXferCompletedL32=tmnxDAHttpIngestXferCompletedL32, tmnxDADCIntfPingReqTxCount=tmnxDADCIntfPingReqTxCount, tmnxDASGCardECCBlockCorrections=tmnxDASGCardECCBlockCorrections, tmnxDAHttpServer1XXCountSentH32=tmnxDAHttpServer1XXCountSentH32, tmnxDADCIntfServerIndex=tmnxDADCIntfServerIndex, tmnxDASGCardFPGAUnderflowErrors=tmnxDASGCardFPGAUnderflowErrors, tmnxDAGrpOrigSvrNumObjDelvredL32=tmnxDAGrpOrigSvrNumObjDelvredL32, tmnxDAGrpBytesNotFromCacheH32=tmnxDAGrpBytesNotFromCacheH32, tmnxDAConformance=tmnxDAConformance)
