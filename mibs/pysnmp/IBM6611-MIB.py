#
# PySNMP MIB module IBM6611-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/IBM6611-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 19:39:51 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, OctetString, Integer = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "OctetString", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueRangeConstraint, ValueSizeConstraint, ConstraintsIntersection, ConstraintsUnion, SingleValueConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueRangeConstraint", "ValueSizeConstraint", "ConstraintsIntersection", "ConstraintsUnion", "SingleValueConstraint")
DisplayString, = mibBuilder.importSymbols("RFC1158-MIB", "DisplayString")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
Bits, ObjectIdentity, MibScalar, MibTable, MibTableRow, MibTableColumn, Counter64, Counter32, TimeTicks, NotificationType, iso, Unsigned32, Integer32, Gauge32, IpAddress, enterprises, MibIdentifier, ModuleIdentity = mibBuilder.importSymbols("SNMPv2-SMI", "Bits", "ObjectIdentity", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Counter64", "Counter32", "TimeTicks", "NotificationType", "iso", "Unsigned32", "Integer32", "Gauge32", "IpAddress", "enterprises", "MibIdentifier", "ModuleIdentity")
DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention")
ibm = MibIdentifier((1, 3, 6, 1, 4, 1, 2))
ibmProd = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 6))
ibm6611 = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 6, 2))
ibmSubagents = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 6, 2, 1))
ibmChipSets = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 6, 2, 2))
ibmDSUs = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 6, 2, 3))
ibmsystem = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 6, 2, 4))
ibmicmp = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 6, 2, 5))
ibmsnmp = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 6, 2, 6))
ibmbridge = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 6, 2, 7))
ibmfr = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 6, 2, 8))
ibmdls = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 6, 2, 9))
ibmppp = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 6, 2, 10))
ibmxns = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 6, 2, 11))
ibmipx = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 6, 2, 12))
ibmappn = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 6, 2, 13))
ibmrpq = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 6, 2, 14))
ibmtb = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 6, 2, 15))
ibmapple = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 6, 2, 16))
ibmdec = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 6, 2, 17))
ibmvines = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 6, 2, 18))
ibminterfaces = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 6, 2, 19))
ibmMainProcessorLoadTable = MibTable((1, 3, 6, 1, 4, 1, 2, 6, 2, 4, 1), )
if mibBuilder.loadTexts: ibmMainProcessorLoadTable.setStatus('mandatory')
ibmMainProcessorLoadEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2, 6, 2, 4, 1, 1), ).setIndexNames((0, "IBM6611-MIB", "ibmMainProcessorLoadIndex"))
if mibBuilder.loadTexts: ibmMainProcessorLoadEntry.setStatus('mandatory')
ibmMainProcessorLoadIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 4, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 60))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmMainProcessorLoadIndex.setStatus('mandatory')
ibmMainProcessorLoad = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 4, 1, 1, 2), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmMainProcessorLoad.setStatus('mandatory')
ibmswvpd = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 6, 2, 4, 2))
swVpdTable = MibTable((1, 3, 6, 1, 4, 1, 2, 6, 2, 4, 2, 1), )
if mibBuilder.loadTexts: swVpdTable.setStatus('mandatory')
swVpdEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2, 6, 2, 4, 2, 1, 1), ).setIndexNames((0, "IBM6611-MIB", "swvpdIndex"))
if mibBuilder.loadTexts: swVpdEntry.setStatus('mandatory')
swvpdIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 4, 2, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swvpdIndex.setStatus('mandatory')
swvpdName = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 4, 2, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swvpdName.setStatus('mandatory')
swvpdPtfName = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 4, 2, 1, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swvpdPtfName.setStatus('mandatory')
swvpdVerId = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 4, 2, 1, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swvpdVerId.setStatus('mandatory')
swvpdRelId = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 4, 2, 1, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swvpdRelId.setStatus('mandatory')
swvpdModId = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 4, 2, 1, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swvpdModId.setStatus('mandatory')
swvpdFixId = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 4, 2, 1, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swvpdFixId.setStatus('mandatory')
swvpdState = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 4, 2, 1, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("complete", 1), ("pending", 2), ("broken", 3), ("cancelled", 4), ("unknown", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swvpdState.setStatus('mandatory')
swvpdAction = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 4, 2, 1, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("apply", 1), ("commit", 2), ("reject", 3), ("decommit", 4), ("cleanup", 5), ("unknown", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swvpdAction.setStatus('mandatory')
swvpdPath = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 4, 2, 1, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("root", 1), ("usr", 2), ("share", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swvpdPath.setStatus('mandatory')
swvpdDateTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 4, 2, 1, 1, 11), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swvpdDateTime.setStatus('mandatory')
ibmmaint = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 6, 2, 4, 4))
ibmmaintShutdown = MibScalar((1, 3, 6, 1, 4, 1, 2, 6, 2, 4, 4, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 4))).clone(namedValues=NamedValues(("running", 1), ("shutdown-noipl", 2), ("shutdown-ipl-local", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ibmmaintShutdown.setStatus('mandatory')
ibmsysInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 6, 2, 4, 4, 7))
ibmsysMBUFs = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 6, 2, 4, 4, 7, 1))
ibmsysMBUFsInUses = MibScalar((1, 3, 6, 1, 4, 1, 2, 6, 2, 4, 4, 7, 1, 1), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmsysMBUFsInUses.setStatus('mandatory')
ibmsysMBUFsKbytes = MibScalar((1, 3, 6, 1, 4, 1, 2, 6, 2, 4, 4, 7, 1, 2), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmsysMBUFsKbytes.setStatus('mandatory')
ibmsysMBUFsPercents = MibScalar((1, 3, 6, 1, 4, 1, 2, 6, 2, 4, 4, 7, 1, 3), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmsysMBUFsPercents.setStatus('mandatory')
ibmsysMBUFsDeniedRequests = MibScalar((1, 3, 6, 1, 4, 1, 2, 6, 2, 4, 4, 7, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmsysMBUFsDeniedRequests.setStatus('mandatory')
ibmsysMBUFsDelayedRequests = MibScalar((1, 3, 6, 1, 4, 1, 2, 6, 2, 4, 4, 7, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmsysMBUFsDelayedRequests.setStatus('mandatory')
ibmsysPageSpace = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 6, 2, 4, 4, 7, 2))
ibmsysPageSpaceTotal = MibScalar((1, 3, 6, 1, 4, 1, 2, 6, 2, 4, 4, 7, 2, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmsysPageSpaceTotal.setStatus('mandatory')
ibmsysPageSpaceInUse = MibScalar((1, 3, 6, 1, 4, 1, 2, 6, 2, 4, 4, 7, 2, 2), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmsysPageSpaceInUse.setStatus('mandatory')
ibmsysRealMem = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 6, 2, 4, 4, 7, 3))
ibmsysRealMemSize = MibScalar((1, 3, 6, 1, 4, 1, 2, 6, 2, 4, 4, 7, 3, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmsysRealMemSize.setStatus('mandatory')
ibmsysRealMemInUse = MibScalar((1, 3, 6, 1, 4, 1, 2, 6, 2, 4, 4, 7, 3, 2), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmsysRealMemInUse.setStatus('mandatory')
ibmsysRealMemFree = MibScalar((1, 3, 6, 1, 4, 1, 2, 6, 2, 4, 4, 7, 3, 3), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmsysRealMemFree.setStatus('mandatory')
ibmTrapNum = MibScalar((1, 3, 6, 1, 4, 1, 2, 6, 2, 6, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmTrapNum.setStatus('mandatory')
ibmTrapThrottleCount = MibScalar((1, 3, 6, 1, 4, 1, 2, 6, 2, 6, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmTrapThrottleCount.setStatus('mandatory')
ibmTrapThrottleId = MibScalar((1, 3, 6, 1, 4, 1, 2, 6, 2, 6, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmTrapThrottleId.setStatus('mandatory')
ibmTrapThrottleTime = MibScalar((1, 3, 6, 1, 4, 1, 2, 6, 2, 6, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmTrapThrottleTime.setStatus('mandatory')
ibmChipSetIntel = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 6, 2, 2, 1))
ibmChipSetIntel82596B = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 6, 2, 2, 1, 1))
ibmChipSetIBM = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 6, 2, 2, 2))
ibmChipSetIBM8025A = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 6, 2, 2, 2, 1))
ibmChipSetIBM8025B = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 6, 2, 2, 2, 2))
ibmChipSetSignetics = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 6, 2, 2, 3))
ibmChipSetSigneticsSCN68562 = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 6, 2, 2, 3, 1))
ibmbridgeMACAddressFilters = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 6, 2, 7, 1))
ibmbridgeSAPFilters = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 6, 2, 7, 2))
ibmbridgeSNAPFilters = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 6, 2, 7, 3))
ibmbridgeRingFilters = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 6, 2, 7, 4))
ibmbridgeHopCountFilters = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 6, 2, 7, 5))
ibmbridgeWindowFilters = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 6, 2, 7, 6))
ibmbridgeFiltOrderTable = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 6, 2, 7, 7))
ibmbridgeRIFFilters = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 6, 2, 7, 8))
ibmmacAddrFilterInfoTable = MibTable((1, 3, 6, 1, 4, 1, 2, 6, 2, 7, 1, 1), )
if mibBuilder.loadTexts: ibmmacAddrFilterInfoTable.setStatus('mandatory')
ibmmacAddrFilterInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2, 6, 2, 7, 1, 1, 1), ).setIndexNames((0, "IBM6611-MIB", "ibmmacAddrFilterType"), (0, "IBM6611-MIB", "ibmmacAddrFilterIfIndex"))
if mibBuilder.loadTexts: ibmmacAddrFilterInfoEntry.setStatus('mandatory')
ibmmacAddrFilterIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 7, 1, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmmacAddrFilterIfIndex.setStatus('mandatory')
ibmmacAddrFilterInBcastType = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 7, 1, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("filterARB", 1), ("filterSRB", 2), ("filterBoth", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmmacAddrFilterInBcastType.setStatus('mandatory')
ibmmacAddrFilterOutBcastType = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 7, 1, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("filterARB", 1), ("filterSRB", 2), ("filterBoth", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmmacAddrFilterOutBcastType.setStatus('mandatory')
ibmmacAddrFilterInFilterType = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 7, 1, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("deny", 1), ("permit", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmmacAddrFilterInFilterType.setStatus('mandatory')
ibmmacAddrFilterOutFilterType = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 7, 1, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("deny", 1), ("permit", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmmacAddrFilterOutFilterType.setStatus('mandatory')
ibmmacAddrFilterInNotForwarded = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 7, 1, 1, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmmacAddrFilterInNotForwarded.setStatus('mandatory')
ibmmacAddrFilterOutNotForwarded = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 7, 1, 1, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmmacAddrFilterOutNotForwarded.setStatus('mandatory')
ibmmacAddrFilterType = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 7, 1, 1, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("sr", 1), ("tb", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmmacAddrFilterType.setStatus('mandatory')
ibmmacAddrFilterInTable = MibTable((1, 3, 6, 1, 4, 1, 2, 6, 2, 7, 1, 2), )
if mibBuilder.loadTexts: ibmmacAddrFilterInTable.setStatus('mandatory')
ibmmacAddrFilterInEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2, 6, 2, 7, 1, 2, 1), ).setIndexNames((0, "IBM6611-MIB", "ibmmacAddrFilterInType"), (0, "IBM6611-MIB", "ibmmacAddrFilterInIfIndex"), (0, "IBM6611-MIB", "ibmmacAddrFilterInSrcAddress"), (0, "IBM6611-MIB", "ibmmacAddrFilterInDestAddress"))
if mibBuilder.loadTexts: ibmmacAddrFilterInEntry.setStatus('mandatory')
ibmmacAddrFilterInIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 7, 1, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmmacAddrFilterInIfIndex.setStatus('mandatory')
ibmmacAddrFilterInSrcAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 7, 1, 2, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(6, 6)).setFixedLength(6)).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmmacAddrFilterInSrcAddress.setStatus('mandatory')
ibmmacAddrFilterInSrcMask = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 7, 1, 2, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(6, 6)).setFixedLength(6)).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmmacAddrFilterInSrcMask.setStatus('mandatory')
ibmmacAddrFilterInDestAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 7, 1, 2, 1, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(6, 6)).setFixedLength(6)).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmmacAddrFilterInDestAddress.setStatus('mandatory')
ibmmacAddrFilterInDestMask = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 7, 1, 2, 1, 5), OctetString().subtype(subtypeSpec=ValueSizeConstraint(6, 6)).setFixedLength(6)).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmmacAddrFilterInDestMask.setStatus('mandatory')
ibmmacAddrFilterInType = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 7, 1, 2, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("sr", 1), ("tb", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmmacAddrFilterInType.setStatus('mandatory')
ibmmacAddrFilterOutTable = MibTable((1, 3, 6, 1, 4, 1, 2, 6, 2, 7, 1, 3), )
if mibBuilder.loadTexts: ibmmacAddrFilterOutTable.setStatus('mandatory')
ibmmacAddrFilterOutEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2, 6, 2, 7, 1, 3, 1), ).setIndexNames((0, "IBM6611-MIB", "ibmmacAddrFilterOutType"), (0, "IBM6611-MIB", "ibmmacAddrFilterOutIfIndex"), (0, "IBM6611-MIB", "ibmmacAddrFilterOutSrcAddress"), (0, "IBM6611-MIB", "ibmmacAddrFilterOutDestAddress"))
if mibBuilder.loadTexts: ibmmacAddrFilterOutEntry.setStatus('mandatory')
ibmmacAddrFilterOutIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 7, 1, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmmacAddrFilterOutIfIndex.setStatus('mandatory')
ibmmacAddrFilterOutSrcAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 7, 1, 3, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(6, 6)).setFixedLength(6)).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmmacAddrFilterOutSrcAddress.setStatus('mandatory')
ibmmacAddrFilterOutSrcMask = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 7, 1, 3, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(6, 6)).setFixedLength(6)).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmmacAddrFilterOutSrcMask.setStatus('mandatory')
ibmmacAddrFilterOutDestAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 7, 1, 3, 1, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(6, 6)).setFixedLength(6)).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmmacAddrFilterOutDestAddress.setStatus('mandatory')
ibmmacAddrFilterOutDestMask = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 7, 1, 3, 1, 5), OctetString().subtype(subtypeSpec=ValueSizeConstraint(6, 6)).setFixedLength(6)).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmmacAddrFilterOutDestMask.setStatus('mandatory')
ibmmacAddrFilterOutType = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 7, 1, 3, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("sr", 1), ("tb", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmmacAddrFilterOutType.setStatus('mandatory')
ibmsapFilterInfoTable = MibTable((1, 3, 6, 1, 4, 1, 2, 6, 2, 7, 2, 1), )
if mibBuilder.loadTexts: ibmsapFilterInfoTable.setStatus('mandatory')
ibmsapFilterInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2, 6, 2, 7, 2, 1, 1), ).setIndexNames((0, "IBM6611-MIB", "ibmsapFilterType"), (0, "IBM6611-MIB", "ibmsapFilterIfIndex"))
if mibBuilder.loadTexts: ibmsapFilterInfoEntry.setStatus('mandatory')
ibmsapFilterIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 7, 2, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmsapFilterIfIndex.setStatus('mandatory')
ibmsapFilterInBcastType = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 7, 2, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("filterARB", 1), ("filterSRB", 2), ("filterBoth", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmsapFilterInBcastType.setStatus('mandatory')
ibmsapFilterOutBcastType = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 7, 2, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("filterARB", 1), ("filterSRB", 2), ("filterBoth", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmsapFilterOutBcastType.setStatus('mandatory')
ibmsapFilterIn = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 7, 2, 1, 1, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(16, 16)).setFixedLength(16)).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmsapFilterIn.setStatus('mandatory')
ibmsapFilterOut = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 7, 2, 1, 1, 5), OctetString().subtype(subtypeSpec=ValueSizeConstraint(16, 16)).setFixedLength(16)).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmsapFilterOut.setStatus('mandatory')
ibmsapFilterInNotForwarded = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 7, 2, 1, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmsapFilterInNotForwarded.setStatus('mandatory')
ibmsapFilterOutNotForwarded = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 7, 2, 1, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmsapFilterOutNotForwarded.setStatus('mandatory')
ibmsapFilterType = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 7, 2, 1, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("sr", 1), ("tb", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmsapFilterType.setStatus('mandatory')
ibmsnapFilterInfoTable = MibTable((1, 3, 6, 1, 4, 1, 2, 6, 2, 7, 3, 1), )
if mibBuilder.loadTexts: ibmsnapFilterInfoTable.setStatus('mandatory')
ibmsnapFilterInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2, 6, 2, 7, 3, 1, 1), ).setIndexNames((0, "IBM6611-MIB", "ibmsnapFilterType"), (0, "IBM6611-MIB", "ibmsnapFilterIfIndex"))
if mibBuilder.loadTexts: ibmsnapFilterInfoEntry.setStatus('mandatory')
ibmsnapFilterIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 7, 3, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmsnapFilterIfIndex.setStatus('mandatory')
ibmsnapFilterInFilterType = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 7, 3, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("deny", 1), ("permit", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmsnapFilterInFilterType.setStatus('mandatory')
ibmsnapFilterOutFilterType = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 7, 3, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("deny", 1), ("permit", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmsnapFilterOutFilterType.setStatus('mandatory')
ibmsnapFilterInNotForwarded = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 7, 3, 1, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmsnapFilterInNotForwarded.setStatus('mandatory')
ibmsnapFilterOutNotForwarded = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 7, 3, 1, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmsnapFilterOutNotForwarded.setStatus('mandatory')
ibmsnapFilterType = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 7, 3, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("sr", 1), ("tb", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmsnapFilterType.setStatus('mandatory')
ibmsnapFilterInTable = MibTable((1, 3, 6, 1, 4, 1, 2, 6, 2, 7, 3, 2), )
if mibBuilder.loadTexts: ibmsnapFilterInTable.setStatus('mandatory')
ibmsnapFilterInEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2, 6, 2, 7, 3, 2, 1), ).setIndexNames((0, "IBM6611-MIB", "ibmsnapFilterInType"), (0, "IBM6611-MIB", "ibmsnapFilterInIfIndex"), (0, "IBM6611-MIB", "ibmsnapFilterInValue"))
if mibBuilder.loadTexts: ibmsnapFilterInEntry.setStatus('mandatory')
ibmsnapFilterInIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 7, 3, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmsnapFilterInIfIndex.setStatus('mandatory')
ibmsnapFilterInValue = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 7, 3, 2, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmsnapFilterInValue.setStatus('mandatory')
ibmsnapFilterInMask = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 7, 3, 2, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmsnapFilterInMask.setStatus('mandatory')
ibmsnapFilterInType = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 7, 3, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("sr", 1), ("tb", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmsnapFilterInType.setStatus('mandatory')
ibmsnapFilterOutTable = MibTable((1, 3, 6, 1, 4, 1, 2, 6, 2, 7, 3, 3), )
if mibBuilder.loadTexts: ibmsnapFilterOutTable.setStatus('mandatory')
ibmsnapFilterOutEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2, 6, 2, 7, 3, 3, 1), ).setIndexNames((0, "IBM6611-MIB", "ibmsnapFilterOutType"), (0, "IBM6611-MIB", "ibmsnapFilterOutIfIndex"), (0, "IBM6611-MIB", "ibmsnapFilterOutValue"))
if mibBuilder.loadTexts: ibmsnapFilterOutEntry.setStatus('mandatory')
ibmsnapFilterOutIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 7, 3, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmsnapFilterOutIfIndex.setStatus('mandatory')
ibmsnapFilterOutValue = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 7, 3, 3, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmsnapFilterOutValue.setStatus('mandatory')
ibmsnapFilterOutMask = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 7, 3, 3, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmsnapFilterOutMask.setStatus('mandatory')
ibmsnapFilterOutType = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 7, 3, 3, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("sr", 1), ("tb", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmsnapFilterOutType.setStatus('mandatory')
ibmringFilterInfoTable = MibTable((1, 3, 6, 1, 4, 1, 2, 6, 2, 7, 4, 1), )
if mibBuilder.loadTexts: ibmringFilterInfoTable.setStatus('mandatory')
ibmringFilterInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2, 6, 2, 7, 4, 1, 1), ).setIndexNames((0, "IBM6611-MIB", "ibmringFilterIfIndex"))
if mibBuilder.loadTexts: ibmringFilterInfoEntry.setStatus('mandatory')
ibmringFilterIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 7, 4, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmringFilterIfIndex.setStatus('mandatory')
ibmringFilterInBcastType = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 7, 4, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("filterARB", 1), ("filterSRB", 2), ("filterBoth", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmringFilterInBcastType.setStatus('mandatory')
ibmringFilterOutBcastType = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 7, 4, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("filterARB", 1), ("filterSRB", 2), ("filterBoth", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmringFilterOutBcastType.setStatus('mandatory')
ibmringFilterInFilterType = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 7, 4, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("deny", 1), ("permit", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmringFilterInFilterType.setStatus('mandatory')
ibmringFilterOutFilterType = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 7, 4, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("deny", 1), ("permit", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmringFilterOutFilterType.setStatus('mandatory')
ibmringFilterInNotForwarded = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 7, 4, 1, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmringFilterInNotForwarded.setStatus('mandatory')
ibmringFilterOutNotForwarded = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 7, 4, 1, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmringFilterOutNotForwarded.setStatus('mandatory')
ibmringFilterInTable = MibTable((1, 3, 6, 1, 4, 1, 2, 6, 2, 7, 4, 2), )
if mibBuilder.loadTexts: ibmringFilterInTable.setStatus('mandatory')
ibmringFilterInEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2, 6, 2, 7, 4, 2, 1), ).setIndexNames((0, "IBM6611-MIB", "ibmringFilterInIfIndex"), (0, "IBM6611-MIB", "ibmringFilterInNumber"))
if mibBuilder.loadTexts: ibmringFilterInEntry.setStatus('mandatory')
ibmringFilterInIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 7, 4, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmringFilterInIfIndex.setStatus('mandatory')
ibmringFilterInNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 7, 4, 2, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmringFilterInNumber.setStatus('mandatory')
ibmringFilterInMask = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 7, 4, 2, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmringFilterInMask.setStatus('mandatory')
ibmringFilterOutTable = MibTable((1, 3, 6, 1, 4, 1, 2, 6, 2, 7, 4, 3), )
if mibBuilder.loadTexts: ibmringFilterOutTable.setStatus('mandatory')
ibmringFilterOutEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2, 6, 2, 7, 4, 3, 1), ).setIndexNames((0, "IBM6611-MIB", "ibmringFilterOutIfIndex"), (0, "IBM6611-MIB", "ibmringFilterOutNumber"))
if mibBuilder.loadTexts: ibmringFilterOutEntry.setStatus('mandatory')
ibmringFilterOutIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 7, 4, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmringFilterOutIfIndex.setStatus('mandatory')
ibmringFilterOutNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 7, 4, 3, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmringFilterOutNumber.setStatus('mandatory')
ibmringFilterOutMask = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 7, 4, 3, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmringFilterOutMask.setStatus('mandatory')
ibmhopCountFilterInfoTable = MibTable((1, 3, 6, 1, 4, 1, 2, 6, 2, 7, 5, 1), )
if mibBuilder.loadTexts: ibmhopCountFilterInfoTable.setStatus('mandatory')
ibmhopCountFilterInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2, 6, 2, 7, 5, 1, 1), ).setIndexNames((0, "IBM6611-MIB", "ibmhopCountFilterIfIndex"))
if mibBuilder.loadTexts: ibmhopCountFilterInfoEntry.setStatus('mandatory')
ibmhopCountFilterIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 7, 5, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmhopCountFilterIfIndex.setStatus('mandatory')
ibmhopCountFilterBcastType = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 7, 5, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("filterARB", 1), ("filterSRB", 2), ("filterBoth", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmhopCountFilterBcastType.setStatus('mandatory')
ibmhopCountFilterCount = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 7, 5, 1, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmhopCountFilterCount.setStatus('mandatory')
ibmwindowFilterInfoTable = MibTable((1, 3, 6, 1, 4, 1, 2, 6, 2, 7, 6, 1), )
if mibBuilder.loadTexts: ibmwindowFilterInfoTable.setStatus('mandatory')
ibmwindowFilterInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2, 6, 2, 7, 6, 1, 1), ).setIndexNames((0, "IBM6611-MIB", "ibmwindowFilterType"), (0, "IBM6611-MIB", "ibmwindowFilterIfIndex"))
if mibBuilder.loadTexts: ibmwindowFilterInfoEntry.setStatus('mandatory')
ibmwindowFilterIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 7, 6, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmwindowFilterIfIndex.setStatus('mandatory')
ibmwindowFilterInBcastType = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 7, 6, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("filterARB", 1), ("filterSRB", 2), ("filterBoth", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmwindowFilterInBcastType.setStatus('mandatory')
ibmwindowFilterOutBcastType = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 7, 6, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("filterARB", 1), ("filterSRB", 2), ("filterBoth", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmwindowFilterOutBcastType.setStatus('mandatory')
ibmwindowFilterInFilterType = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 7, 6, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("deny", 1), ("permit", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmwindowFilterInFilterType.setStatus('mandatory')
ibmwindowFilterOutFilterType = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 7, 6, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("deny", 1), ("permit", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmwindowFilterOutFilterType.setStatus('mandatory')
ibmwindowFilterInNotForwarded = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 7, 6, 1, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmwindowFilterInNotForwarded.setStatus('mandatory')
ibmwindowFilterOutNotForwarded = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 7, 6, 1, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmwindowFilterOutNotForwarded.setStatus('mandatory')
ibmwindowFilterType = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 7, 6, 1, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("sr", 1), ("tb", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmwindowFilterType.setStatus('mandatory')
ibmwindowFilterInTable = MibTable((1, 3, 6, 1, 4, 1, 2, 6, 2, 7, 6, 2), )
if mibBuilder.loadTexts: ibmwindowFilterInTable.setStatus('mandatory')
ibmwindowFilterInEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2, 6, 2, 7, 6, 2, 1), ).setIndexNames((0, "IBM6611-MIB", "ibmwindowFilterInType"), (0, "IBM6611-MIB", "ibmwindowFilterInIfIndex"), (0, "IBM6611-MIB", "ibmwindowFilterInId"), (0, "IBM6611-MIB", "ibmwindowFilterInContents"))
if mibBuilder.loadTexts: ibmwindowFilterInEntry.setStatus('mandatory')
ibmwindowFilterInIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 7, 6, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmwindowFilterInIfIndex.setStatus('mandatory')
ibmwindowFilterInContents = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 7, 6, 2, 1, 2), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmwindowFilterInContents.setStatus('mandatory')
ibmwindowFilterInMaskString = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 7, 6, 2, 1, 3), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmwindowFilterInMaskString.setStatus('mandatory')
ibmwindowFilterInOffsetStart = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 7, 6, 2, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmwindowFilterInOffsetStart.setStatus('mandatory')
ibmwindowFilterInNumBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 7, 6, 2, 1, 5), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 1)).setFixedLength(1)).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmwindowFilterInNumBytes.setStatus('mandatory')
ibmwindowFilterInOffset = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 7, 6, 2, 1, 6), OctetString().subtype(subtypeSpec=ValueSizeConstraint(2, 2)).setFixedLength(2)).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmwindowFilterInOffset.setStatus('mandatory')
ibmwindowFilterInId = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 7, 6, 2, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmwindowFilterInId.setStatus('mandatory')
ibmwindowFilterInType = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 7, 6, 2, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("sr", 1), ("tb", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmwindowFilterInType.setStatus('mandatory')
ibmwindowFilterOutTable = MibTable((1, 3, 6, 1, 4, 1, 2, 6, 2, 7, 6, 3), )
if mibBuilder.loadTexts: ibmwindowFilterOutTable.setStatus('mandatory')
ibmwindowFilterOutEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2, 6, 2, 7, 6, 3, 1), ).setIndexNames((0, "IBM6611-MIB", "ibmwindowFilterOutType"), (0, "IBM6611-MIB", "ibmwindowFilterOutIfIndex"), (0, "IBM6611-MIB", "ibmwindowFilterOutId"), (0, "IBM6611-MIB", "ibmwindowFilterOutContents"))
if mibBuilder.loadTexts: ibmwindowFilterOutEntry.setStatus('mandatory')
ibmwindowFilterOutIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 7, 6, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmwindowFilterOutIfIndex.setStatus('mandatory')
ibmwindowFilterOutContents = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 7, 6, 3, 1, 2), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmwindowFilterOutContents.setStatus('mandatory')
ibmwindowFilterOutMaskString = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 7, 6, 3, 1, 3), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmwindowFilterOutMaskString.setStatus('mandatory')
ibmwindowFilterOutOffsetStart = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 7, 6, 3, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmwindowFilterOutOffsetStart.setStatus('mandatory')
ibmwindowFilterOutNumBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 7, 6, 3, 1, 5), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 1)).setFixedLength(1)).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmwindowFilterOutNumBytes.setStatus('mandatory')
ibmwindowFilterOutOffset = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 7, 6, 3, 1, 6), OctetString().subtype(subtypeSpec=ValueSizeConstraint(2, 2)).setFixedLength(2)).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmwindowFilterOutOffset.setStatus('mandatory')
ibmwindowFilterOutId = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 7, 6, 3, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmwindowFilterOutId.setStatus('mandatory')
ibmwindowFilterOutType = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 7, 6, 3, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("sr", 1), ("tb", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmwindowFilterOutType.setStatus('mandatory')
ibmFiltOrderInTable = MibTable((1, 3, 6, 1, 4, 1, 2, 6, 2, 7, 7, 1), )
if mibBuilder.loadTexts: ibmFiltOrderInTable.setStatus('mandatory')
ibmFiltOrderInEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2, 6, 2, 7, 7, 1, 1), ).setIndexNames((0, "IBM6611-MIB", "ibmFiltOrderInType"), (0, "IBM6611-MIB", "ibmFiltOrderInIfIndex"), (0, "IBM6611-MIB", "ibmFiltOrderInPriority"))
if mibBuilder.loadTexts: ibmFiltOrderInEntry.setStatus('mandatory')
ibmFiltOrderInIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 7, 7, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmFiltOrderInIfIndex.setStatus('mandatory')
ibmFiltOrderInPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 7, 7, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmFiltOrderInPriority.setStatus('mandatory')
ibmFiltOrderInName = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 7, 7, 1, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmFiltOrderInName.setStatus('mandatory')
ibmFiltOrderInType = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 7, 7, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("sr", 1), ("tb", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmFiltOrderInType.setStatus('mandatory')
ibmFiltOrderOutTable = MibTable((1, 3, 6, 1, 4, 1, 2, 6, 2, 7, 7, 2), )
if mibBuilder.loadTexts: ibmFiltOrderOutTable.setStatus('mandatory')
ibmFiltOrderOutEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2, 6, 2, 7, 7, 2, 1), ).setIndexNames((0, "IBM6611-MIB", "ibmFiltOrderOutType"), (0, "IBM6611-MIB", "ibmFiltOrderOutIfIndex"), (0, "IBM6611-MIB", "ibmFiltOrderOutPriority"))
if mibBuilder.loadTexts: ibmFiltOrderOutEntry.setStatus('mandatory')
ibmFiltOrderOutIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 7, 7, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmFiltOrderOutIfIndex.setStatus('mandatory')
ibmFiltOrderOutPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 7, 7, 2, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmFiltOrderOutPriority.setStatus('mandatory')
ibmFiltOrderOutName = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 7, 7, 2, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmFiltOrderOutName.setStatus('mandatory')
ibmFiltOrderOutType = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 7, 7, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("sr", 1), ("tb", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmFiltOrderOutType.setStatus('mandatory')
ibmRIFFilterInfoTable = MibTable((1, 3, 6, 1, 4, 1, 2, 6, 2, 7, 8, 1), )
if mibBuilder.loadTexts: ibmRIFFilterInfoTable.setStatus('mandatory')
ibmRIFFilterInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2, 6, 2, 7, 8, 1, 1), ).setIndexNames((0, "IBM6611-MIB", "ibmRIFFilterIfIndex"))
if mibBuilder.loadTexts: ibmRIFFilterInfoEntry.setStatus('mandatory')
ibmRIFFilterIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 7, 8, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmRIFFilterIfIndex.setStatus('mandatory')
ibmRIFFilterInBcastType = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 7, 8, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("filterARB", 1), ("filterSRB", 2), ("filterBoth", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmRIFFilterInBcastType.setStatus('mandatory')
ibmRIFFilterOutBcastType = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 7, 8, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("filterARB", 1), ("filterSRB", 2), ("filterBoth", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmRIFFilterOutBcastType.setStatus('mandatory')
ibmRIFFilterInFilterType = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 7, 8, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("deny", 1), ("permit", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmRIFFilterInFilterType.setStatus('mandatory')
ibmRIFFilterOutFilterType = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 7, 8, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("deny", 1), ("permit", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmRIFFilterOutFilterType.setStatus('mandatory')
ibmRIFFilterInNotForwarded = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 7, 8, 1, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmRIFFilterInNotForwarded.setStatus('mandatory')
ibmRIFFilterOutNotForwarded = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 7, 8, 1, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmRIFFilterOutNotForwarded.setStatus('mandatory')
ibmRIFFilterInTable = MibTable((1, 3, 6, 1, 4, 1, 2, 6, 2, 7, 8, 2), )
if mibBuilder.loadTexts: ibmRIFFilterInTable.setStatus('mandatory')
ibmRIFFilterInEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2, 6, 2, 7, 8, 2, 1), ).setIndexNames((0, "IBM6611-MIB", "ibmRIFFilterInIfIndex"), (0, "IBM6611-MIB", "ibmRIFFilterInRingNumber"), (0, "IBM6611-MIB", "ibmRIFFilterInBridgeNumber"))
if mibBuilder.loadTexts: ibmRIFFilterInEntry.setStatus('mandatory')
ibmRIFFilterInIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 7, 8, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmRIFFilterInIfIndex.setStatus('mandatory')
ibmRIFFilterInRingNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 7, 8, 2, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmRIFFilterInRingNumber.setStatus('mandatory')
ibmRIFFilterInRingMask = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 7, 8, 2, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmRIFFilterInRingMask.setStatus('mandatory')
ibmRIFFilterInBridgeNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 7, 8, 2, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmRIFFilterInBridgeNumber.setStatus('mandatory')
ibmRIFFilterInBridgeMask = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 7, 8, 2, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmRIFFilterInBridgeMask.setStatus('mandatory')
ibmRIFFilterInRouteDesignator = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 7, 8, 2, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("firstroutedesignator", 1), ("nexttolastroutedesignator", 2), ("allroutedesignators", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmRIFFilterInRouteDesignator.setStatus('mandatory')
ibmRIFFilterOutTable = MibTable((1, 3, 6, 1, 4, 1, 2, 6, 2, 7, 8, 3), )
if mibBuilder.loadTexts: ibmRIFFilterOutTable.setStatus('mandatory')
ibmRIFFilterOutEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2, 6, 2, 7, 8, 3, 1), ).setIndexNames((0, "IBM6611-MIB", "ibmRIFFilterOutIfIndex"), (0, "IBM6611-MIB", "ibmRIFFilterOutRingNumber"), (0, "IBM6611-MIB", "ibmRIFFilterOutBridgeNumber"))
if mibBuilder.loadTexts: ibmRIFFilterOutEntry.setStatus('mandatory')
ibmRIFFilterOutIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 7, 8, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmRIFFilterOutIfIndex.setStatus('mandatory')
ibmRIFFilterOutRingNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 7, 8, 3, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmRIFFilterOutRingNumber.setStatus('mandatory')
ibmRIFFilterOutRingMask = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 7, 8, 3, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmRIFFilterOutRingMask.setStatus('mandatory')
ibmRIFFilterOutBridgeNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 7, 8, 3, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmRIFFilterOutBridgeNumber.setStatus('mandatory')
ibmRIFFilterOutBridgeMask = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 7, 8, 3, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmRIFFilterOutBridgeMask.setStatus('mandatory')
ibmRIFFilterOutRouteDesignator = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 7, 8, 3, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("firstroutedesignator", 1), ("nexttolastroutedesignator", 2), ("allroutedesignators", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmRIFFilterOutRouteDesignator.setStatus('mandatory')
ibmfrDlcmiTable = MibTable((1, 3, 6, 1, 4, 1, 2, 6, 2, 8, 1), )
if mibBuilder.loadTexts: ibmfrDlcmiTable.setStatus('mandatory')
ibmfrDlcmiEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2, 6, 2, 8, 1, 1), ).setIndexNames((0, "IBM6611-MIB", "ibmfrDlcmiIfIndex"))
if mibBuilder.loadTexts: ibmfrDlcmiEntry.setStatus('mandatory')
ibmfrDlcmiIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 8, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmfrDlcmiIfIndex.setStatus('mandatory')
ibmfrDlcmiState = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 8, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("noLmiConfigured", 1), ("lmiRev1", 2), ("ansiT1-617-D", 3), ("ansiT1-617-B", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmfrDlcmiState.setStatus('mandatory')
ibmfrDlcmiAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 8, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("q921", 1), ("q922March90", 2), ("q922November90", 3), ("q922", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmfrDlcmiAddress.setStatus('mandatory')
ibmfrDlcmiAddressLen = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 8, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3, 4))).clone(namedValues=NamedValues(("two-octets", 2), ("three-octets", 3), ("four-octets", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmfrDlcmiAddressLen.setStatus('mandatory')
ibmfrDlcmiPollingInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 8, 1, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(5, 30)).clone(10)).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmfrDlcmiPollingInterval.setStatus('mandatory')
ibmfrDlcmiFullEnquiryInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 8, 1, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255)).clone(6)).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmfrDlcmiFullEnquiryInterval.setStatus('mandatory')
ibmfrDlcmiErrorThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 8, 1, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 10)).clone(3)).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmfrDlcmiErrorThreshold.setStatus('mandatory')
ibmfrDlcmiMonitoredEvents = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 8, 1, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 10)).clone(4)).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmfrDlcmiMonitoredEvents.setStatus('mandatory')
ibmfrDlcmiMaxSupportedVCs = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 8, 1, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmfrDlcmiMaxSupportedVCs.setStatus('mandatory')
ibmfrDlcmiMulticast = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 8, 1, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("nonBroadcast", 1), ("broadcast", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmfrDlcmiMulticast.setStatus('mandatory')
ibmfrCircuitTable = MibTable((1, 3, 6, 1, 4, 1, 2, 6, 2, 8, 2), )
if mibBuilder.loadTexts: ibmfrCircuitTable.setStatus('mandatory')
ibmfrCircuitEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2, 6, 2, 8, 2, 1), ).setIndexNames((0, "IBM6611-MIB", "ibmfrCircuitIfIndex"), (0, "IBM6611-MIB", "ibmfrCircuitDlci"))
if mibBuilder.loadTexts: ibmfrCircuitEntry.setStatus('mandatory')
ibmfrCircuitIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 8, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmfrCircuitIfIndex.setStatus('mandatory')
ibmfrCircuitDlci = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 8, 2, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmfrCircuitDlci.setStatus('mandatory')
ibmfrCircuitState = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 8, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("invalid", 1), ("active", 2), ("inactive", 3))).clone('active')).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmfrCircuitState.setStatus('mandatory')
ibmfrCircuitReceivedFECNs = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 8, 2, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmfrCircuitReceivedFECNs.setStatus('mandatory')
ibmfrCircuitReceivedBECNs = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 8, 2, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmfrCircuitReceivedBECNs.setStatus('mandatory')
ibmfrCircuitSentFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 8, 2, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmfrCircuitSentFrames.setStatus('mandatory')
ibmfrCircuitSentOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 8, 2, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmfrCircuitSentOctets.setStatus('mandatory')
ibmfrCircuitReceivedFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 8, 2, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmfrCircuitReceivedFrames.setStatus('mandatory')
ibmfrCircuitReceivedOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 8, 2, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmfrCircuitReceivedOctets.setStatus('mandatory')
ibmfrCircuitCreationTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 8, 2, 1, 10), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmfrCircuitCreationTime.setStatus('mandatory')
ibmfrCircuitLastTimeChange = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 8, 2, 1, 11), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmfrCircuitLastTimeChange.setStatus('mandatory')
ibmfrCircuitCommittedBurst = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 8, 2, 1, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmfrCircuitCommittedBurst.setStatus('mandatory')
ibmfrCircuitExcessBurst = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 8, 2, 1, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmfrCircuitExcessBurst.setStatus('mandatory')
ibmfrCircuitThroughput = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 8, 2, 1, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmfrCircuitThroughput.setStatus('mandatory')
ibmfrErrTable = MibTable((1, 3, 6, 1, 4, 1, 2, 6, 2, 8, 3), )
if mibBuilder.loadTexts: ibmfrErrTable.setStatus('mandatory')
ibmfrErrEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2, 6, 2, 8, 3, 1), ).setIndexNames((0, "IBM6611-MIB", "ibmfrErrIfIndex"))
if mibBuilder.loadTexts: ibmfrErrEntry.setStatus('mandatory')
ibmfrErrIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 8, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmfrErrIfIndex.setStatus('mandatory')
ibmfrErrType = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 8, 3, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9))).clone(namedValues=NamedValues(("unknownError", 1), ("receiveShort", 2), ("receiveLong", 3), ("illegalDLCI", 4), ("unknownDLCI", 5), ("dlcmiProtoErr", 6), ("dlcmiUnknownIE", 7), ("dlcmiSequenceErr", 8), ("dlcmiUnknownRpt", 9)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmfrErrType.setStatus('mandatory')
ibmfrErrData = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 8, 3, 1, 3), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmfrErrData.setStatus('mandatory')
ibmfrErrTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 8, 3, 1, 4), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmfrErrTime.setStatus('mandatory')
ibmdlsVirtualRingSegmentNumber = MibScalar((1, 3, 6, 1, 4, 1, 2, 6, 2, 9, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4095))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmdlsVirtualRingSegmentNumber.setStatus('mandatory')
ibmdlsFrameFilterType = MibScalar((1, 3, 6, 1, 4, 1, 2, 6, 2, 9, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("deny", 1), ("permit", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmdlsFrameFilterType.setStatus('mandatory')
ibmdlsNameFilterType = MibScalar((1, 3, 6, 1, 4, 1, 2, 6, 2, 9, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("deny", 1), ("permit", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmdlsNameFilterType.setStatus('mandatory')
ibmdlsRouterTable = MibTable((1, 3, 6, 1, 4, 1, 2, 6, 2, 9, 4), )
if mibBuilder.loadTexts: ibmdlsRouterTable.setStatus('mandatory')
ibmdlsRouterEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2, 6, 2, 9, 4, 1), ).setIndexNames((0, "IBM6611-MIB", "ibmdlsRouterAddress"))
if mibBuilder.loadTexts: ibmdlsRouterEntry.setStatus('mandatory')
ibmdlsRouterAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 9, 4, 1, 1), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmdlsRouterAddress.setStatus('mandatory')
ibmdlsRouterStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 9, 4, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("notActive", 1), ("active", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmdlsRouterStatus.setStatus('mandatory')
ibmdlsRouterDefinedBy = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 9, 4, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("user", 1), ("system", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmdlsRouterDefinedBy.setStatus('mandatory')
ibmdlsRouterInFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 9, 4, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmdlsRouterInFrames.setStatus('mandatory')
ibmdlsRouterOutFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 9, 4, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmdlsRouterOutFrames.setStatus('mandatory')
ibmdlsLocalFrameFilterTable = MibTable((1, 3, 6, 1, 4, 1, 2, 6, 2, 9, 5), )
if mibBuilder.loadTexts: ibmdlsLocalFrameFilterTable.setStatus('mandatory')
ibmdlsLocalFrameFilterEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2, 6, 2, 9, 5, 1), ).setIndexNames((0, "IBM6611-MIB", "ibmdlsLocalFrameFilterID"))
if mibBuilder.loadTexts: ibmdlsLocalFrameFilterEntry.setStatus('mandatory')
ibmdlsLocalFrameFilterID = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 9, 5, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmdlsLocalFrameFilterID.setStatus('mandatory')
ibmdlsLocalFrameFilterSrcAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 9, 5, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(6, 6)).setFixedLength(6)).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmdlsLocalFrameFilterSrcAddress.setStatus('mandatory')
ibmdlsLocalFrameFilterSrcMask = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 9, 5, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(6, 6)).setFixedLength(6)).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmdlsLocalFrameFilterSrcMask.setStatus('mandatory')
ibmdlsLocalFrameFilterDestAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 9, 5, 1, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(6, 6)).setFixedLength(6)).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmdlsLocalFrameFilterDestAddress.setStatus('mandatory')
ibmdlsLocalFrameFilterDestMask = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 9, 5, 1, 5), OctetString().subtype(subtypeSpec=ValueSizeConstraint(6, 6)).setFixedLength(6)).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmdlsLocalFrameFilterDestMask.setStatus('mandatory')
ibmdlsRemoteFrameFilterTable = MibTable((1, 3, 6, 1, 4, 1, 2, 6, 2, 9, 6), )
if mibBuilder.loadTexts: ibmdlsRemoteFrameFilterTable.setStatus('mandatory')
ibmdlsRemoteFrameFilterEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2, 6, 2, 9, 6, 1), ).setIndexNames((0, "IBM6611-MIB", "ibmdlsRemoteFrameFilterID"))
if mibBuilder.loadTexts: ibmdlsRemoteFrameFilterEntry.setStatus('mandatory')
ibmdlsRemoteFrameFilterID = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 9, 6, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmdlsRemoteFrameFilterID.setStatus('mandatory')
ibmdlsRemoteFrameFilterSrcAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 9, 6, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(6, 6)).setFixedLength(6)).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmdlsRemoteFrameFilterSrcAddress.setStatus('mandatory')
ibmdlsRemoteFrameFilterSrcMask = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 9, 6, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(6, 6)).setFixedLength(6)).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmdlsRemoteFrameFilterSrcMask.setStatus('mandatory')
ibmdlsRemoteFrameFilterDestAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 9, 6, 1, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(6, 6)).setFixedLength(6)).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmdlsRemoteFrameFilterDestAddress.setStatus('mandatory')
ibmdlsRemoteFrameFilterDestMask = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 9, 6, 1, 5), OctetString().subtype(subtypeSpec=ValueSizeConstraint(6, 6)).setFixedLength(6)).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmdlsRemoteFrameFilterDestMask.setStatus('mandatory')
ibmdlsLocalNameFilterTable = MibTable((1, 3, 6, 1, 4, 1, 2, 6, 2, 9, 7), )
if mibBuilder.loadTexts: ibmdlsLocalNameFilterTable.setStatus('mandatory')
ibmdlsLocalNameFilterEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2, 6, 2, 9, 7, 1), ).setIndexNames((0, "IBM6611-MIB", "ibmdlsLocalNameFilterID"))
if mibBuilder.loadTexts: ibmdlsLocalNameFilterEntry.setStatus('mandatory')
ibmdlsLocalNameFilterID = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 9, 7, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmdlsLocalNameFilterID.setStatus('mandatory')
ibmdlsLocalNameFilterSrcAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 9, 7, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmdlsLocalNameFilterSrcAddress.setStatus('mandatory')
ibmdlsLocalNameFilterDestAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 9, 7, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmdlsLocalNameFilterDestAddress.setStatus('mandatory')
ibmdlsRemoteNameFilterTable = MibTable((1, 3, 6, 1, 4, 1, 2, 6, 2, 9, 8), )
if mibBuilder.loadTexts: ibmdlsRemoteNameFilterTable.setStatus('mandatory')
ibmdlsRemoteNameFilterEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2, 6, 2, 9, 8, 1), ).setIndexNames((0, "IBM6611-MIB", "ibmdlsRemoteNameFilterID"))
if mibBuilder.loadTexts: ibmdlsRemoteNameFilterEntry.setStatus('mandatory')
ibmdlsRemoteNameFilterID = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 9, 8, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmdlsRemoteNameFilterID.setStatus('mandatory')
ibmdlsRemoteNameFilterSrcAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 9, 8, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmdlsRemoteNameFilterSrcAddress.setStatus('mandatory')
ibmdlsRemoteNameFilterDestAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 9, 8, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmdlsRemoteNameFilterDestAddress.setStatus('mandatory')
ibmdlsDefaultDestTable = MibTable((1, 3, 6, 1, 4, 1, 2, 6, 2, 9, 9), )
if mibBuilder.loadTexts: ibmdlsDefaultDestTable.setStatus('mandatory')
ibmdlsDefaultDestEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2, 6, 2, 9, 9, 1), ).setIndexNames((0, "IBM6611-MIB", "ibmdlsDefaultDestAddress"))
if mibBuilder.loadTexts: ibmdlsDefaultDestEntry.setStatus('mandatory')
ibmdlsDefaultDestAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 9, 9, 1, 1), OctetString().subtype(subtypeSpec=ValueSizeConstraint(6, 6)).setFixedLength(6)).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmdlsDefaultDestAddress.setStatus('mandatory')
ibmdlsDefaultRouterAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 9, 9, 1, 2), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmdlsDefaultRouterAddress.setStatus('mandatory')
ibmdlsDefaultNBDestTable = MibTable((1, 3, 6, 1, 4, 1, 2, 6, 2, 9, 10), )
if mibBuilder.loadTexts: ibmdlsDefaultNBDestTable.setStatus('mandatory')
ibmdlsDefaultNBDestEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2, 6, 2, 9, 10, 1), ).setIndexNames((0, "IBM6611-MIB", "ibmdlsDefaultNBDestName"))
if mibBuilder.loadTexts: ibmdlsDefaultNBDestEntry.setStatus('mandatory')
ibmdlsDefaultNBDestName = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 9, 10, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmdlsDefaultNBDestName.setStatus('mandatory')
ibmdlsDefaultNBRouterAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 9, 10, 1, 2), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmdlsDefaultNBRouterAddress.setStatus('mandatory')
ibmdlsStationTable = MibTable((1, 3, 6, 1, 4, 1, 2, 6, 2, 9, 11), )
if mibBuilder.loadTexts: ibmdlsStationTable.setStatus('mandatory')
ibmdlsStationEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2, 6, 2, 9, 11, 1), ).setIndexNames((0, "IBM6611-MIB", "ibmdlsStationIfIndex"), (0, "IBM6611-MIB", "ibmdlsStationAddress"))
if mibBuilder.loadTexts: ibmdlsStationEntry.setStatus('mandatory')
ibmdlsStationIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 9, 11, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmdlsStationIfIndex.setStatus('mandatory')
ibmdlsStationAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 9, 11, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmdlsStationAddress.setStatus('mandatory')
ibmdlsStationTransmitWindowCount = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 9, 11, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 7)).clone(7)).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmdlsStationTransmitWindowCount.setStatus('mandatory')
ibmdlsStationRetransmitCount = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 9, 11, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 50)).clone(10)).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmdlsStationRetransmitCount.setStatus('mandatory')
ibmdlsStationRetransmitThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 9, 11, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 100)).clone(10)).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmdlsStationRetransmitThreshold.setStatus('mandatory')
ibmdlsStationForceDisconnectTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 9, 11, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 600)).clone(120)).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmdlsStationForceDisconnectTimeout.setStatus('mandatory')
ibmdlsStationMaxIfieldSize = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 9, 11, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(265, 30729)).clone(265)).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmdlsStationMaxIfieldSize.setStatus('mandatory')
ibmdlsStationPrimaryRepollTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 9, 11, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 250)).clone(30)).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmdlsStationPrimaryRepollTimeout.setStatus('mandatory')
ibmdlsStationPrimaryRepollCount = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 9, 11, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(3, 50)).clone(15)).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmdlsStationPrimaryRepollCount.setStatus('mandatory')
ibmdlsStationPrimaryRepollThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 9, 11, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 100)).clone(10)).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmdlsStationPrimaryRepollThreshold.setStatus('mandatory')
ibmdlsStationPrimarySlowListTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 9, 11, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 60)).clone(1)).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmdlsStationPrimarySlowListTimeout.setStatus('mandatory')
ibmdlsStationSrcAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 9, 11, 1, 12), OctetString().subtype(subtypeSpec=ValueSizeConstraint(6, 6)).setFixedLength(6)).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmdlsStationSrcAddress.setStatus('mandatory')
ibmdlsStationDestAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 9, 11, 1, 13), OctetString().subtype(subtypeSpec=ValueSizeConstraint(6, 6)).setFixedLength(6)).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmdlsStationDestAddress.setStatus('mandatory')
ibmdlsCirTable = MibTable((1, 3, 6, 1, 4, 1, 2, 6, 2, 9, 12), )
if mibBuilder.loadTexts: ibmdlsCirTable.setStatus('mandatory')
ibmdlsCirEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2, 6, 2, 9, 12, 1), ).setIndexNames((0, "IBM6611-MIB", "ibmdlsCirIfIndex"), (0, "IBM6611-MIB", "ibmdlsCirSrcAddress"), (0, "IBM6611-MIB", "ibmdlsCirSrcSap"), (0, "IBM6611-MIB", "ibmdlsCirDestAddress"), (0, "IBM6611-MIB", "ibmdlsCirDestSap"))
if mibBuilder.loadTexts: ibmdlsCirEntry.setStatus('mandatory')
ibmdlsCirIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 9, 12, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmdlsCirIfIndex.setStatus('mandatory')
ibmdlsCirSrcAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 9, 12, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(6, 6)).setFixedLength(6)).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmdlsCirSrcAddress.setStatus('mandatory')
ibmdlsCirSrcSap = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 9, 12, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmdlsCirSrcSap.setStatus('mandatory')
ibmdlsCirDestAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 9, 12, 1, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(6, 6)).setFixedLength(6)).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmdlsCirDestAddress.setStatus('mandatory')
ibmdlsCirDestSap = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 9, 12, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmdlsCirDestSap.setStatus('mandatory')
ibmdlsCirPartnerRouterAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 9, 12, 1, 6), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmdlsCirPartnerRouterAddress.setStatus('mandatory')
ibmdlsCirLocalLinkState = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 9, 12, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("opening", 1), ("opened", 2), ("closing", 3), ("inactive", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmdlsCirLocalLinkState.setStatus('mandatory')
ibmdlsCirLocalLinkSubState = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 9, 12, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("calling", 1), ("listening", 2), ("contacted", 3), ("localBusy", 4), ("remoteBusy", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmdlsCirLocalLinkSubState.setStatus('mandatory')
ibmdlsCirLocalLinkRouting = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 9, 12, 1, 9), OctetString().subtype(subtypeSpec=ValueSizeConstraint(4, 18))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmdlsCirLocalLinkRouting.setStatus('mandatory')
ibmdlsCirLocalLinkTestCmdsSent = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 9, 12, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmdlsCirLocalLinkTestCmdsSent.setStatus('mandatory')
ibmdlsCirLocalLinkTestCmdsFail = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 9, 12, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmdlsCirLocalLinkTestCmdsFail.setStatus('mandatory')
ibmdlsCirLocalLinkTestCmdsRcv = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 9, 12, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmdlsCirLocalLinkTestCmdsRcv.setStatus('mandatory')
ibmdlsCirLocalLinkDataPktSent = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 9, 12, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmdlsCirLocalLinkDataPktSent.setStatus('mandatory')
ibmdlsCirLocalLinkDataPktResent = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 9, 12, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmdlsCirLocalLinkDataPktResent.setStatus('mandatory')
ibmdlsCirLocalLinkMaxContResent = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 9, 12, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmdlsCirLocalLinkMaxContResent.setStatus('mandatory')
ibmdlsCirLocalLinkDataPktRcv = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 9, 12, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmdlsCirLocalLinkDataPktRcv.setStatus('mandatory')
ibmdlsCirLocalLinkInvalidPktRcv = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 9, 12, 1, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmdlsCirLocalLinkInvalidPktRcv.setStatus('mandatory')
ibmdlsCirLocalLinkAdpRcvErr = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 9, 12, 1, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmdlsCirLocalLinkAdpRcvErr.setStatus('mandatory')
ibmdlsCirLocalLinkAdpSendErr = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 9, 12, 1, 19), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmdlsCirLocalLinkAdpSendErr.setStatus('mandatory')
ibmdlsCirLocalLinkRcvInactiveTimeouts = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 9, 12, 1, 20), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmdlsCirLocalLinkRcvInactiveTimeouts.setStatus('mandatory')
ibmdlsCirLocalLinkCmdPollsSent = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 9, 12, 1, 21), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmdlsCirLocalLinkCmdPollsSent.setStatus('mandatory')
ibmdlsCirLocalLinkCmdRepollsSent = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 9, 12, 1, 22), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmdlsCirLocalLinkCmdRepollsSent.setStatus('mandatory')
ibmdlsCirLocalLinkCmdContRepolls = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 9, 12, 1, 23), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmdlsCirLocalLinkCmdContRepolls.setStatus('mandatory')
ibmdlsCirLocalAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 9, 12, 1, 24), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("sourceIsLocal", 1), ("destinationIsLocal", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmdlsCirLocalAddress.setStatus('mandatory')
ibmdlsCirLocalConnectionState = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 9, 12, 1, 25), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("discontacted", 1), ("contactPending", 2), ("contacted", 3), ("discontactPending", 4), ("connected", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmdlsCirLocalConnectionState.setStatus('mandatory')
ibmpppLinkControlTable = MibTable((1, 3, 6, 1, 4, 1, 2, 6, 2, 10, 1), )
if mibBuilder.loadTexts: ibmpppLinkControlTable.setStatus('mandatory')
ibmpppLinkControlEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2, 6, 2, 10, 1, 1), ).setIndexNames((0, "IBM6611-MIB", "ibmpppLinkControlIndex"))
if mibBuilder.loadTexts: ibmpppLinkControlEntry.setStatus('mandatory')
ibmpppLinkControlIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 10, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmpppLinkControlIndex.setStatus('mandatory')
ibmpppLinkCRCSize = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 10, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(16, 32))).clone(namedValues=NamedValues(("ppp-crc-16", 16), ("ppp-crc-32", 32)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmpppLinkCRCSize.setStatus('mandatory')
ibmpppLinkRestartTimerValue = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 10, 1, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmpppLinkRestartTimerValue.setStatus('mandatory')
ibmpppLinkMaxRestarts = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 10, 1, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmpppLinkMaxRestarts.setStatus('mandatory')
ibmpppLinkLocalMRU = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 10, 1, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmpppLinkLocalMRU.setStatus('mandatory')
ibmpppLinkRemoteMRU = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 10, 1, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmpppLinkRemoteMRU.setStatus('mandatory')
ibmpppLinkLocalACCMap = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 10, 1, 1, 7), OctetString().subtype(subtypeSpec=ValueSizeConstraint(4, 4)).setFixedLength(4)).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmpppLinkLocalACCMap.setStatus('mandatory')
ibmpppLinkRemoteACCMap = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 10, 1, 1, 8), OctetString().subtype(subtypeSpec=ValueSizeConstraint(4, 4)).setFixedLength(4)).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmpppLinkRemoteACCMap.setStatus('mandatory')
ibmpppLinkMagicLoopCount = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 10, 1, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmpppLinkMagicLoopCount.setStatus('mandatory')
ibmpppLinkCommand = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 10, 1, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no-op", 1), ("close", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmpppLinkCommand.setStatus('mandatory')
ibmpppLinkStatusTable = MibTable((1, 3, 6, 1, 4, 1, 2, 6, 2, 10, 2), )
if mibBuilder.loadTexts: ibmpppLinkStatusTable.setStatus('mandatory')
ibmpppLinkStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2, 6, 2, 10, 2, 1), ).setIndexNames((0, "IBM6611-MIB", "ibmpppLinkStatusIndex"))
if mibBuilder.loadTexts: ibmpppLinkStatusEntry.setStatus('mandatory')
ibmpppLinkStatusIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 10, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmpppLinkStatusIndex.setStatus('mandatory')
ibmpppLinkVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 10, 2, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmpppLinkVersion.setStatus('mandatory')
ibmpppLinkCurrentState = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 10, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("closed", 1), ("listen", 2), ("reqsent", 3), ("ackrecvd", 4), ("acksent", 5), ("open", 6), ("closing", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmpppLinkCurrentState.setStatus('mandatory')
ibmpppLinkPreviousState = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 10, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("closed", 1), ("listen", 2), ("reqsent", 3), ("ackrecvd", 4), ("acksent", 5), ("open", 6), ("closing", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmpppLinkPreviousState.setStatus('mandatory')
ibmpppLinkChangeTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 10, 2, 1, 5), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmpppLinkChangeTime.setStatus('mandatory')
ibmpppLinkMagicNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 10, 2, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmpppLinkMagicNumber.setStatus('mandatory')
ibmpppLinkLocalQualityPeriod = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 10, 2, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmpppLinkLocalQualityPeriod.setStatus('mandatory')
ibmpppLinkRemoteQualityPeriod = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 10, 2, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmpppLinkRemoteQualityPeriod.setStatus('mandatory')
ibmpppLinkProtocolCompression = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 10, 2, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("receive-only", 1), ("send-only", 2), ("receive-and-send", 3), ("none", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmpppLinkProtocolCompression.setStatus('mandatory')
ibmpppLinkACCompression = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 10, 2, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("receive-only", 1), ("send-only", 2), ("receive-and-send", 3), ("none", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmpppLinkACCompression.setStatus('mandatory')
ibmpppLinkMeasurementsValid = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 10, 2, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmpppLinkMeasurementsValid.setStatus('mandatory')
ibmpppLinkQuality = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 10, 2, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("good", 1), ("bad", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmpppLinkQuality.setStatus('mandatory')
ibmpppLinkPhysical = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 10, 2, 1, 13), ObjectIdentifier()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmpppLinkPhysical.setStatus('mandatory')
ibmpppLinkErrorsTable = MibTable((1, 3, 6, 1, 4, 1, 2, 6, 2, 10, 3), )
if mibBuilder.loadTexts: ibmpppLinkErrorsTable.setStatus('mandatory')
ibmpppLinkErrorsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2, 6, 2, 10, 3, 1), ).setIndexNames((0, "IBM6611-MIB", "ibmpppLinkErrorsIndex"))
if mibBuilder.loadTexts: ibmpppLinkErrorsEntry.setStatus('mandatory')
ibmpppLinkErrorsIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 10, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmpppLinkErrorsIndex.setStatus('mandatory')
ibmpppLinkBadAddresses = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 10, 3, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmpppLinkBadAddresses.setStatus('mandatory')
ibmpppLinkLastBadAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 10, 3, 1, 3), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmpppLinkLastBadAddress.setStatus('mandatory')
ibmpppLinkBadControls = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 10, 3, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmpppLinkBadControls.setStatus('mandatory')
ibmpppLinkLastBadControl = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 10, 3, 1, 5), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmpppLinkLastBadControl.setStatus('mandatory')
ibmpppLinkLastUnknownProtocol = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 10, 3, 1, 6), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmpppLinkLastUnknownProtocol.setStatus('mandatory')
ibmpppLinkInvalidProtocols = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 10, 3, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmpppLinkInvalidProtocols.setStatus('mandatory')
ibmpppLinkLastInvalidProtocol = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 10, 3, 1, 8), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmpppLinkLastInvalidProtocol.setStatus('mandatory')
ibmpppLinkPacketTooLongs = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 10, 3, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmpppLinkPacketTooLongs.setStatus('mandatory')
ibmpppLinkBadCRCs = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 10, 3, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmpppLinkBadCRCs.setStatus('mandatory')
ibmpppLinkConfigTimeouts = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 10, 3, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmpppLinkConfigTimeouts.setStatus('mandatory')
ibmpppLinkTerminateTimeouts = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 10, 3, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmpppLinkTerminateTimeouts.setStatus('mandatory')
ibmpppLinkQualityTable = MibTable((1, 3, 6, 1, 4, 1, 2, 6, 2, 10, 4), )
if mibBuilder.loadTexts: ibmpppLinkQualityTable.setStatus('mandatory')
ibmpppLinkQualityEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2, 6, 2, 10, 4, 1), ).setIndexNames((0, "IBM6611-MIB", "ibmpppLinkQualityIndex"))
if mibBuilder.loadTexts: ibmpppLinkQualityEntry.setStatus('mandatory')
ibmpppLinkQualityIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 10, 4, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmpppLinkQualityIndex.setStatus('mandatory')
ibmpppLinkInTxLQRs = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 10, 4, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmpppLinkInTxLQRs.setStatus('mandatory')
ibmpppLinkInTxPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 10, 4, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmpppLinkInTxPackets.setStatus('mandatory')
ibmpppLinkLastOutTxPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 10, 4, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmpppLinkLastOutTxPackets.setStatus('mandatory')
ibmpppLinkInTxOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 10, 4, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmpppLinkInTxOctets.setStatus('mandatory')
ibmpppLinkLastOutTxOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 10, 4, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmpppLinkLastOutTxOctets.setStatus('mandatory')
ibmpppLinkInRxPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 10, 4, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmpppLinkInRxPackets.setStatus('mandatory')
ibmpppLinkLastInRxPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 10, 4, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmpppLinkLastInRxPackets.setStatus('mandatory')
ibmpppLinkInRxOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 10, 4, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmpppLinkInRxOctets.setStatus('mandatory')
ibmpppLinkLastInRxOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 10, 4, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmpppLinkLastInRxOctets.setStatus('mandatory')
ibmpppProtocolTables = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 6, 2, 10, 5))
ibmpppIPTable = MibTable((1, 3, 6, 1, 4, 1, 2, 6, 2, 10, 5, 1), )
if mibBuilder.loadTexts: ibmpppIPTable.setStatus('mandatory')
ibmpppIPEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2, 6, 2, 10, 5, 1, 1), ).setIndexNames((0, "IBM6611-MIB", "ibmpppIPLinkNumber"))
if mibBuilder.loadTexts: ibmpppIPEntry.setStatus('mandatory')
ibmpppIPLinkNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 10, 5, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmpppIPLinkNumber.setStatus('mandatory')
ibmpppIPRejects = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 10, 5, 1, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmpppIPRejects.setStatus('mandatory')
ibmpppIPInPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 10, 5, 1, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmpppIPInPackets.setStatus('mandatory')
ibmpppIPInOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 10, 5, 1, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmpppIPInOctets.setStatus('mandatory')
ibmpppIPOutPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 10, 5, 1, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmpppIPOutPackets.setStatus('mandatory')
ibmpppIPOutOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 10, 5, 1, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmpppIPOutOctets.setStatus('mandatory')
ibmpppIPCPTable = MibTable((1, 3, 6, 1, 4, 1, 2, 6, 2, 10, 5, 2), )
if mibBuilder.loadTexts: ibmpppIPCPTable.setStatus('mandatory')
ibmpppIPCPEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2, 6, 2, 10, 5, 2, 1), ).setIndexNames((0, "IBM6611-MIB", "ibmpppIPCPLinkNumber"))
if mibBuilder.loadTexts: ibmpppIPCPEntry.setStatus('mandatory')
ibmpppIPCPLinkNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 10, 5, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmpppIPCPLinkNumber.setStatus('mandatory')
ibmpppIPCPRejects = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 10, 5, 2, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmpppIPCPRejects.setStatus('mandatory')
ibmpppIPCPInPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 10, 5, 2, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmpppIPCPInPackets.setStatus('mandatory')
ibmpppIPCPInOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 10, 5, 2, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmpppIPCPInOctets.setStatus('mandatory')
ibmpppIPCPOutPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 10, 5, 2, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmpppIPCPOutPackets.setStatus('mandatory')
ibmpppIPCPOutOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 10, 5, 2, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmpppIPCPOutOctets.setStatus('mandatory')
ibmpppIPCPCompressionType = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 10, 5, 2, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("none", 1), ("van-jacobson-compressed-tcp", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmpppIPCPCompressionType.setStatus('mandatory')
ibmpppLCPTable = MibTable((1, 3, 6, 1, 4, 1, 2, 6, 2, 10, 5, 3), )
if mibBuilder.loadTexts: ibmpppLCPTable.setStatus('mandatory')
ibmpppLCPEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2, 6, 2, 10, 5, 3, 1), ).setIndexNames((0, "IBM6611-MIB", "ibmpppLCPLinkNumber"))
if mibBuilder.loadTexts: ibmpppLCPEntry.setStatus('mandatory')
ibmpppLCPLinkNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 10, 5, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmpppLCPLinkNumber.setStatus('mandatory')
ibmpppLCPRejects = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 10, 5, 3, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmpppLCPRejects.setStatus('mandatory')
ibmpppLCPInPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 10, 5, 3, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmpppLCPInPackets.setStatus('mandatory')
ibmpppLCPInOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 10, 5, 3, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmpppLCPInOctets.setStatus('mandatory')
ibmpppLCPOutPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 10, 5, 3, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmpppLCPOutPackets.setStatus('mandatory')
ibmpppLCPOutOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 10, 5, 3, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmpppLCPOutOctets.setStatus('mandatory')
ibmpppLCPOutCRs = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 10, 5, 3, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmpppLCPOutCRs.setStatus('mandatory')
ibmpppLCPInCRs = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 10, 5, 3, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmpppLCPInCRs.setStatus('mandatory')
ibmpppLCPOutCAs = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 10, 5, 3, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmpppLCPOutCAs.setStatus('mandatory')
ibmpppLCPInCAs = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 10, 5, 3, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmpppLCPInCAs.setStatus('mandatory')
ibmpppLCPOutCNs = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 10, 5, 3, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmpppLCPOutCNs.setStatus('mandatory')
ibmpppLCPInCNs = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 10, 5, 3, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmpppLCPInCNs.setStatus('mandatory')
ibmpppLCPOutCRejs = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 10, 5, 3, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmpppLCPOutCRejs.setStatus('mandatory')
ibmpppLCPInCRejs = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 10, 5, 3, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmpppLCPInCRejs.setStatus('mandatory')
ibmpppLCPOutTRs = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 10, 5, 3, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmpppLCPOutTRs.setStatus('mandatory')
ibmpppLCPInTRs = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 10, 5, 3, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmpppLCPInTRs.setStatus('mandatory')
ibmpppLCPOutTAs = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 10, 5, 3, 1, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmpppLCPOutTAs.setStatus('mandatory')
ibmpppLCPInTAs = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 10, 5, 3, 1, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmpppLCPInTAs.setStatus('mandatory')
ibmpppLCPOutCodeRejs = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 10, 5, 3, 1, 19), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmpppLCPOutCodeRejs.setStatus('mandatory')
ibmpppLCPInCodeRejs = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 10, 5, 3, 1, 20), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmpppLCPInCodeRejs.setStatus('mandatory')
ibmpppLCPOutEchoReqs = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 10, 5, 3, 1, 21), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmpppLCPOutEchoReqs.setStatus('mandatory')
ibmpppLCPInEchoReqs = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 10, 5, 3, 1, 22), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmpppLCPInEchoReqs.setStatus('mandatory')
ibmpppLCPOutEchoReps = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 10, 5, 3, 1, 23), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmpppLCPOutEchoReps.setStatus('mandatory')
ibmpppLCPInEchoReps = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 10, 5, 3, 1, 24), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmpppLCPInEchoReps.setStatus('mandatory')
ibmpppLCPOutDiscReqs = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 10, 5, 3, 1, 25), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmpppLCPOutDiscReqs.setStatus('mandatory')
ibmpppLCPInDiscReqs = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 10, 5, 3, 1, 26), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmpppLCPInDiscReqs.setStatus('mandatory')
ibmxnsidpForwarding = MibScalar((1, 3, 6, 1, 4, 1, 2, 6, 2, 11, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("forwarding", 1), ("not-forwarding", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmxnsidpForwarding.setStatus('mandatory')
ibmxnsConfigTable = MibTable((1, 3, 6, 1, 4, 1, 2, 6, 2, 11, 4), )
if mibBuilder.loadTexts: ibmxnsConfigTable.setStatus('mandatory')
ibmxnsConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2, 6, 2, 11, 4, 1), ).setIndexNames((0, "IBM6611-MIB", "ibmxnsPortIfIndex"))
if mibBuilder.loadTexts: ibmxnsConfigEntry.setStatus('mandatory')
ibmxnsPortIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 11, 4, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmxnsPortIfIndex.setStatus('mandatory')
ibmxnsPortStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 11, 4, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("active", 1), ("inactive", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmxnsPortStatus.setStatus('mandatory')
ibmxnsidpChecksum = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 11, 4, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("off", 1), ("header", 2), ("packet", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmxnsidpChecksum.setStatus('mandatory')
ibmxnsErrpActive = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 11, 4, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("active", 1), ("suppressed", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmxnsErrpActive.setStatus('mandatory')
ibmxnsLoopbackActive = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 11, 4, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("software-loopback-active", 1), ("hardware-loopback-active", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmxnsLoopbackActive.setStatus('mandatory')
ibmxnsidpInReceives = MibScalar((1, 3, 6, 1, 4, 1, 2, 6, 2, 11, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmxnsidpInReceives.setStatus('mandatory')
ibmxnsidpBcastInReceives = MibScalar((1, 3, 6, 1, 4, 1, 2, 6, 2, 11, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmxnsidpBcastInReceives.setStatus('mandatory')
ibmxnsidpMcastInReceives = MibScalar((1, 3, 6, 1, 4, 1, 2, 6, 2, 11, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmxnsidpMcastInReceives.setStatus('mandatory')
ibmxnsidpInDiscards = MibScalar((1, 3, 6, 1, 4, 1, 2, 6, 2, 11, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmxnsidpInDiscards.setStatus('mandatory')
ibmxnsidpOutRequests = MibScalar((1, 3, 6, 1, 4, 1, 2, 6, 2, 11, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmxnsidpOutRequests.setStatus('mandatory')
ibmxnsidpBcastOutRequests = MibScalar((1, 3, 6, 1, 4, 1, 2, 6, 2, 11, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmxnsidpBcastOutRequests.setStatus('mandatory')
ibmxnsidpMcastOutRequests = MibScalar((1, 3, 6, 1, 4, 1, 2, 6, 2, 11, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmxnsidpMcastOutRequests.setStatus('mandatory')
ibmxnsidpForwDatagrams = MibScalar((1, 3, 6, 1, 4, 1, 2, 6, 2, 11, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmxnsidpForwDatagrams.setStatus('mandatory')
ibmxnsidpOutDiscards = MibScalar((1, 3, 6, 1, 4, 1, 2, 6, 2, 11, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmxnsidpOutDiscards.setStatus('mandatory')
ibmxnsidpOutNoRoutes = MibScalar((1, 3, 6, 1, 4, 1, 2, 6, 2, 11, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmxnsidpOutNoRoutes.setStatus('mandatory')
ibmxnsidpRoutingDiscards = MibScalar((1, 3, 6, 1, 4, 1, 2, 6, 2, 11, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmxnsidpRoutingDiscards.setStatus('mandatory')
ibmxnsidpZeroDirBcast = MibScalar((1, 3, 6, 1, 4, 1, 2, 6, 2, 11, 19), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmxnsidpZeroDirBcast.setStatus('mandatory')
ibmxnsidpTooSmall = MibScalar((1, 3, 6, 1, 4, 1, 2, 6, 2, 11, 20), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmxnsidpTooSmall.setStatus('mandatory')
ibmxnsidpBadLen = MibScalar((1, 3, 6, 1, 4, 1, 2, 6, 2, 11, 21), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmxnsidpBadLen.setStatus('mandatory')
ibmxnsidpBadSum = MibScalar((1, 3, 6, 1, 4, 1, 2, 6, 2, 11, 22), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmxnsidpBadSum.setStatus('mandatory')
ibmxnsidpBadTTL = MibScalar((1, 3, 6, 1, 4, 1, 2, 6, 2, 11, 23), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmxnsidpBadTTL.setStatus('mandatory')
ibmxnsErrUnspec = MibScalar((1, 3, 6, 1, 4, 1, 2, 6, 2, 11, 24), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmxnsErrUnspec.setStatus('mandatory')
ibmxnsErrChecksum = MibScalar((1, 3, 6, 1, 4, 1, 2, 6, 2, 11, 25), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmxnsErrChecksum.setStatus('mandatory')
ibmxnsErrUnreach = MibScalar((1, 3, 6, 1, 4, 1, 2, 6, 2, 11, 26), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmxnsErrUnreach.setStatus('mandatory')
ibmxnsErrTTLExpired = MibScalar((1, 3, 6, 1, 4, 1, 2, 6, 2, 11, 27), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmxnsErrTTLExpired.setStatus('mandatory')
ibmxnsErrTooBig = MibScalar((1, 3, 6, 1, 4, 1, 2, 6, 2, 11, 28), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmxnsErrTooBig.setStatus('mandatory')
ibmxnsErrResources = MibScalar((1, 3, 6, 1, 4, 1, 2, 6, 2, 11, 29), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmxnsErrResources.setStatus('mandatory')
ibmxnsErrCongWarn = MibScalar((1, 3, 6, 1, 4, 1, 2, 6, 2, 11, 30), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmxnsErrCongWarn.setStatus('mandatory')
ibmxnsErrCongDiscard = MibScalar((1, 3, 6, 1, 4, 1, 2, 6, 2, 11, 31), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmxnsErrCongDiscard.setStatus('mandatory')
ibmxnsErrSquelched = MibScalar((1, 3, 6, 1, 4, 1, 2, 6, 2, 11, 32), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmxnsErrSquelched.setStatus('mandatory')
ibmxnsErrOutMsgs = MibScalar((1, 3, 6, 1, 4, 1, 2, 6, 2, 11, 33), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmxnsErrOutMsgs.setStatus('mandatory')
ibmxnsAddrTable = MibTable((1, 3, 6, 1, 4, 1, 2, 6, 2, 11, 34), )
if mibBuilder.loadTexts: ibmxnsAddrTable.setStatus('mandatory')
ibmxnsAddrEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2, 6, 2, 11, 34, 1), ).setIndexNames((0, "IBM6611-MIB", "ibmxnsAddrAddress"))
if mibBuilder.loadTexts: ibmxnsAddrEntry.setStatus('mandatory')
ibmxnsAddrAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 11, 34, 1, 1), OctetString().subtype(subtypeSpec=ValueSizeConstraint(12, 12)).setFixedLength(12)).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmxnsAddrAddress.setStatus('mandatory')
ibmxnsAddrIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 11, 34, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmxnsAddrIfIndex.setStatus('mandatory')
ibmxnsRouteTable = MibTable((1, 3, 6, 1, 4, 1, 2, 6, 2, 11, 35), )
if mibBuilder.loadTexts: ibmxnsRouteTable.setStatus('mandatory')
ibmxnsRouteEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2, 6, 2, 11, 35, 1), ).setIndexNames((0, "IBM6611-MIB", "ibmxnsRouteDest"))
if mibBuilder.loadTexts: ibmxnsRouteEntry.setStatus('mandatory')
ibmxnsRouteDest = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 11, 35, 1, 1), OctetString().subtype(subtypeSpec=ValueSizeConstraint(12, 12)).setFixedLength(12)).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmxnsRouteDest.setStatus('mandatory')
ibmxnsRouteIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 11, 35, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmxnsRouteIfIndex.setStatus('mandatory')
ibmxnsRouteNextHop = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 11, 35, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(4, 4)).setFixedLength(4)).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmxnsRouteNextHop.setStatus('mandatory')
ibmxnsRouteMetric = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 11, 35, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmxnsRouteMetric.setStatus('mandatory')
ibmxnsRouteUse = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 11, 35, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmxnsRouteUse.setStatus('mandatory')
ibmxnsFilterTable = MibTable((1, 3, 6, 1, 4, 1, 2, 6, 2, 11, 36), )
if mibBuilder.loadTexts: ibmxnsFilterTable.setStatus('mandatory')
ibmxnsFilterEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2, 6, 2, 11, 36, 1), ).setIndexNames((0, "IBM6611-MIB", "ibmxnsFilterIfIndex"), (0, "IBM6611-MIB", "ibmxnsFilterNumber"))
if mibBuilder.loadTexts: ibmxnsFilterEntry.setStatus('mandatory')
ibmxnsFilterIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 11, 36, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmxnsFilterIfIndex.setStatus('mandatory')
ibmxnsFilterNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 11, 36, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmxnsFilterNumber.setStatus('mandatory')
ibmxnsFilterValue = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 11, 36, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(30, 30)).setFixedLength(30)).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmxnsFilterValue.setStatus('mandatory')
ibmxnsFilterMask = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 11, 36, 1, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(30, 30)).setFixedLength(30)).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmxnsFilterMask.setStatus('mandatory')
ibmxnsFilterType = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 11, 36, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("deny", 1), ("permit", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmxnsFilterType.setStatus('mandatory')
ibmxnsFilterHCCompare = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 11, 36, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("none", 1), ("less-than", 2), ("less-than-equal", 3), ("equal", 4), ("greater-than-equal", 5), ("greater-than", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmxnsFilterHCCompare.setStatus('mandatory')
ibmxnsFilterUse = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 11, 36, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmxnsFilterUse.setStatus('mandatory')
ibmipxidpForwarding = MibScalar((1, 3, 6, 1, 4, 1, 2, 6, 2, 12, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("forwarding", 1), ("not-forwarding", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmipxidpForwarding.setStatus('mandatory')
ibmipxConfigTable = MibTable((1, 3, 6, 1, 4, 1, 2, 6, 2, 12, 4), )
if mibBuilder.loadTexts: ibmipxConfigTable.setStatus('mandatory')
ibmipxConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2, 6, 2, 12, 4, 1), ).setIndexNames((0, "IBM6611-MIB", "ibmipxPortIfIndex"))
if mibBuilder.loadTexts: ibmipxConfigEntry.setStatus('mandatory')
ibmipxPortIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 12, 4, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmipxPortIfIndex.setStatus('mandatory')
ibmipxPortStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 12, 4, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("active", 1), ("inactive", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmipxPortStatus.setStatus('mandatory')
ibmipxidpChecksum = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 12, 4, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("off", 1), ("header", 2), ("packet", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmipxidpChecksum.setStatus('mandatory')
ibmipxLoopbackActive = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 12, 4, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("software-loopback-active", 1), ("hardware-loopback-active", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmipxLoopbackActive.setStatus('mandatory')
ibmipxidpInReceives = MibScalar((1, 3, 6, 1, 4, 1, 2, 6, 2, 12, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmipxidpInReceives.setStatus('mandatory')
ibmipxidpBcastInReceives = MibScalar((1, 3, 6, 1, 4, 1, 2, 6, 2, 12, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmipxidpBcastInReceives.setStatus('mandatory')
ibmipxidpInDiscards = MibScalar((1, 3, 6, 1, 4, 1, 2, 6, 2, 12, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmipxidpInDiscards.setStatus('mandatory')
ibmipxidpInAddrErrors = MibScalar((1, 3, 6, 1, 4, 1, 2, 6, 2, 12, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmipxidpInAddrErrors.setStatus('mandatory')
ibmipxidpOutRequests = MibScalar((1, 3, 6, 1, 4, 1, 2, 6, 2, 12, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmipxidpOutRequests.setStatus('mandatory')
ibmipxidpBcastOutRequests = MibScalar((1, 3, 6, 1, 4, 1, 2, 6, 2, 12, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmipxidpBcastOutRequests.setStatus('mandatory')
ibmipxidpForwDatagrams = MibScalar((1, 3, 6, 1, 4, 1, 2, 6, 2, 12, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmipxidpForwDatagrams.setStatus('mandatory')
ibmipxidpOutDiscards = MibScalar((1, 3, 6, 1, 4, 1, 2, 6, 2, 12, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmipxidpOutDiscards.setStatus('mandatory')
ibmipxidpOutNoRoutes = MibScalar((1, 3, 6, 1, 4, 1, 2, 6, 2, 12, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmipxidpOutNoRoutes.setStatus('mandatory')
ibmipxidpRoutingDiscards = MibScalar((1, 3, 6, 1, 4, 1, 2, 6, 2, 12, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmipxidpRoutingDiscards.setStatus('mandatory')
ibmipxidpZeroDirBcast = MibScalar((1, 3, 6, 1, 4, 1, 2, 6, 2, 12, 19), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmipxidpZeroDirBcast.setStatus('mandatory')
ibmipxidpTooSmall = MibScalar((1, 3, 6, 1, 4, 1, 2, 6, 2, 12, 20), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmipxidpTooSmall.setStatus('mandatory')
ibmipxidpBadLen = MibScalar((1, 3, 6, 1, 4, 1, 2, 6, 2, 12, 21), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmipxidpBadLen.setStatus('mandatory')
ibmipxidpBadSum = MibScalar((1, 3, 6, 1, 4, 1, 2, 6, 2, 12, 22), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmipxidpBadSum.setStatus('mandatory')
ibmipxidpBadTTL = MibScalar((1, 3, 6, 1, 4, 1, 2, 6, 2, 12, 23), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmipxidpBadTTL.setStatus('mandatory')
ibmipxAddrTable = MibTable((1, 3, 6, 1, 4, 1, 2, 6, 2, 12, 34), )
if mibBuilder.loadTexts: ibmipxAddrTable.setStatus('mandatory')
ibmipxAddrEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2, 6, 2, 12, 34, 1), ).setIndexNames((0, "IBM6611-MIB", "ibmipxAddrAddress"))
if mibBuilder.loadTexts: ibmipxAddrEntry.setStatus('mandatory')
ibmipxAddrAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 12, 34, 1, 1), OctetString().subtype(subtypeSpec=ValueSizeConstraint(12, 12)).setFixedLength(12)).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmipxAddrAddress.setStatus('mandatory')
ibmipxAddrIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 12, 34, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmipxAddrIfIndex.setStatus('mandatory')
ibmipxRouteTable = MibTable((1, 3, 6, 1, 4, 1, 2, 6, 2, 12, 35), )
if mibBuilder.loadTexts: ibmipxRouteTable.setStatus('mandatory')
ibmipxRouteEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2, 6, 2, 12, 35, 1), ).setIndexNames((0, "IBM6611-MIB", "ibmipxRouteDest"))
if mibBuilder.loadTexts: ibmipxRouteEntry.setStatus('mandatory')
ibmipxRouteDest = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 12, 35, 1, 1), OctetString().subtype(subtypeSpec=ValueSizeConstraint(12, 12)).setFixedLength(12)).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmipxRouteDest.setStatus('mandatory')
ibmipxRouteIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 12, 35, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmipxRouteIfIndex.setStatus('mandatory')
ibmipxRouteNextHop = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 12, 35, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(4, 4)).setFixedLength(4)).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmipxRouteNextHop.setStatus('mandatory')
ibmipxRouteMetric = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 12, 35, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmipxRouteMetric.setStatus('mandatory')
ibmipxRouteUse = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 12, 35, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmipxRouteUse.setStatus('mandatory')
ibmipxFilterTable = MibTable((1, 3, 6, 1, 4, 1, 2, 6, 2, 12, 36), )
if mibBuilder.loadTexts: ibmipxFilterTable.setStatus('mandatory')
ibmipxFilterEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2, 6, 2, 12, 36, 1), ).setIndexNames((0, "IBM6611-MIB", "ibmipxFilterIfIndex"), (0, "IBM6611-MIB", "ibmipxFilterNumber"))
if mibBuilder.loadTexts: ibmipxFilterEntry.setStatus('mandatory')
ibmipxFilterIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 12, 36, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmipxFilterIfIndex.setStatus('mandatory')
ibmipxFilterNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 12, 36, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmipxFilterNumber.setStatus('mandatory')
ibmipxFilterValue = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 12, 36, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(30, 30)).setFixedLength(30)).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmipxFilterValue.setStatus('mandatory')
ibmipxFilterMask = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 12, 36, 1, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(30, 30)).setFixedLength(30)).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmipxFilterMask.setStatus('mandatory')
ibmipxFilterType = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 12, 36, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("deny", 1), ("permit", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmipxFilterType.setStatus('mandatory')
ibmipxFilterHCCompare = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 12, 36, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("none", 1), ("less-than", 2), ("less-than-equal", 3), ("equal", 4), ("greater-than-equal", 5), ("greater-than", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmipxFilterHCCompare.setStatus('mandatory')
ibmipxFilterUse = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 12, 36, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmipxFilterUse.setStatus('mandatory')
ibmipxsapStatInRequests = MibScalar((1, 3, 6, 1, 4, 1, 2, 6, 2, 12, 37), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmipxsapStatInRequests.setStatus('mandatory')
ibmipxsapStatOutRequests = MibScalar((1, 3, 6, 1, 4, 1, 2, 6, 2, 12, 38), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmipxsapStatOutRequests.setStatus('mandatory')
ibmipxsapStatInResponses = MibScalar((1, 3, 6, 1, 4, 1, 2, 6, 2, 12, 39), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmipxsapStatInResponses.setStatus('mandatory')
ibmipxsapStatOutResponses = MibScalar((1, 3, 6, 1, 4, 1, 2, 6, 2, 12, 40), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmipxsapStatOutResponses.setStatus('mandatory')
ibmipxsapStatInErrors = MibScalar((1, 3, 6, 1, 4, 1, 2, 6, 2, 12, 41), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmipxsapStatInErrors.setStatus('mandatory')
ibmipxsapStatOutDiscards = MibScalar((1, 3, 6, 1, 4, 1, 2, 6, 2, 12, 42), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmipxsapStatOutDiscards.setStatus('mandatory')
ibmipxsapServerTable = MibTable((1, 3, 6, 1, 4, 1, 2, 6, 2, 12, 43), )
if mibBuilder.loadTexts: ibmipxsapServerTable.setStatus('mandatory')
ibmipxsapServerEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2, 6, 2, 12, 43, 1), ).setIndexNames((0, "IBM6611-MIB", "ibmipxsapServerType"), (0, "IBM6611-MIB", "ibmipxsapServerNet"), (0, "IBM6611-MIB", "ibmipxsapServerHost"), (0, "IBM6611-MIB", "ibmipxsapServerSocket"), (0, "IBM6611-MIB", "ibmipxsapServerIndex"))
if mibBuilder.loadTexts: ibmipxsapServerEntry.setStatus('mandatory')
ibmipxsapServerType = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 12, 43, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmipxsapServerType.setStatus('mandatory')
ibmipxsapServerNet = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 12, 43, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(4, 4)).setFixedLength(4)).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmipxsapServerNet.setStatus('mandatory')
ibmipxsapServerHost = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 12, 43, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(6, 6)).setFixedLength(6)).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmipxsapServerHost.setStatus('mandatory')
ibmipxsapServerSocket = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 12, 43, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmipxsapServerSocket.setStatus('mandatory')
ibmipxsapServerName = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 12, 43, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmipxsapServerName.setStatus('mandatory')
ibmipxsapServerAge = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 12, 43, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmipxsapServerAge.setStatus('mandatory')
ibmipxsapServerHops = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 12, 43, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmipxsapServerHops.setStatus('mandatory')
ibmipxsapServerIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 12, 43, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmipxsapServerIfIndex.setStatus('mandatory')
ibmipxsapServerIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 12, 43, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmipxsapServerIndex.setStatus('mandatory')
ibmipxsapServerRequestsFiltered = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 12, 43, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmipxsapServerRequestsFiltered.setStatus('mandatory')
cylink = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 6, 2, 3, 1))
cylinkStatusTable = MibTable((1, 3, 6, 1, 4, 1, 2, 6, 2, 3, 1, 1), )
if mibBuilder.loadTexts: cylinkStatusTable.setStatus('mandatory')
cylinkStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2, 6, 2, 3, 1, 1, 1), ).setIndexNames((0, "IBM6611-MIB", "cylinkIndex"))
if mibBuilder.loadTexts: cylinkStatusEntry.setStatus('mandatory')
cylinkIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 3, 1, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cylinkIndex.setStatus('mandatory')
cylinkLinkState = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 3, 1, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("cylinkNotConnected", 1), ("cylinkNoInput", 2), ("cylinkNoOutput", 3), ("cylinkConnected", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cylinkLinkState.setStatus('mandatory')
cylinkLoopback = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 3, 1, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("cylinkNoLoopback", 1), ("cylinkNearEndLoopback", 2), ("cylinkFarEndLoopback", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cylinkLoopback.setStatus('mandatory')
cylinkQRSS = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 3, 1, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("cylinkNoQRSS", 1), ("cylinkQRSSMaster", 2), ("cylinkQRSSSlave", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cylinkQRSS.setStatus('mandatory')
cylinkConfigTable = MibTable((1, 3, 6, 1, 4, 1, 2, 6, 2, 3, 1, 3), )
if mibBuilder.loadTexts: cylinkConfigTable.setStatus('mandatory')
cylinkConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2, 6, 2, 3, 1, 3, 1), ).setIndexNames((0, "IBM6611-MIB", "cylinkConfigIndex"))
if mibBuilder.loadTexts: cylinkConfigEntry.setStatus('mandatory')
cylinkConfigIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 3, 1, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cylinkConfigIndex.setStatus('mandatory')
cylinkSerialNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 3, 1, 3, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cylinkSerialNumber.setStatus('mandatory')
cylinkSoftwareVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 3, 1, 3, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 4))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cylinkSoftwareVersion.setStatus('mandatory')
cylinkDTEFraming = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 3, 1, 3, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("cylinkDTEFramingD4", 1), ("cylinkDTEFramingESF", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cylinkDTEFraming.setStatus('mandatory')
cylinkNetworkFraming = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 3, 1, 3, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("cylinkNetworkFramingD4", 1), ("cylinkNetworkFramingESF", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cylinkNetworkFraming.setStatus('mandatory')
cylinkDTEDS1Mode = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 3, 1, 3, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("cylinkDTEDS1ModeB8ZS", 1), ("cylinkDTEDS1ModeAMI", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cylinkDTEDS1Mode.setStatus('mandatory')
cylinkNetworkDS1Mode = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 3, 1, 3, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("cylinkNetworkDS1ModeB8ZS", 1), ("cylinkNetworkDS1ModeAMI", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cylinkNetworkDS1Mode.setStatus('mandatory')
cylinkOnesResponsibility = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 3, 1, 3, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("cylinkOnesResponsibilityDTE", 1), ("cylinkOnesResponsibilityACSU", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cylinkOnesResponsibility.setStatus('mandatory')
cylinkOnesControl = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 3, 1, 3, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("cylinkOnesControlLSB24", 1), ("cylinkOnesControlD4FRM", 2), ("cylinkOnesControlESFDL", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cylinkOnesControl.setStatus('mandatory')
cylinkZeroProtection = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 3, 1, 3, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("cylinkZeroProtection80", 1), ("cylinkZeroProtection15", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cylinkZeroProtection.setStatus('mandatory')
cylinkClockSource = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 3, 1, 3, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("cylinkClockSourceNetwork", 1), ("cylinkClockSourceDTE", 2), ("cylinkClockSourceExternal", 3), ("cylinkClockSourceInternal", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cylinkClockSource.setStatus('mandatory')
cylinkClockFrequency = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 3, 1, 3, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("cylinkClockFreq-56kHz", 1), ("cylinkClockFreq-256kHz", 2), ("cylinkClockFreq-1-344MHz", 3), ("cylinkClockFreq-1-544MHz", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cylinkClockFrequency.setStatus('mandatory')
cylinkClockBackup = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 3, 1, 3, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("cylinkClockBackupNetwork", 1), ("cylinkClockBackupDTE", 2), ("cylinkClockBackupExternal", 3), ("cylinkClockBackupInternal", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cylinkClockBackup.setStatus('mandatory')
cylinkDIUFrequency = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 3, 1, 3, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("cylinkDIUFreq-768kbps", 1), ("cylinkDIUFreq-1-344Mbps", 2), ("cylinkDIUFreq-1-528Mbps", 3), ("cylinkDIUFreq-1-536Mbps", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cylinkDIUFrequency.setStatus('mandatory')
cylinkDIUTiming = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 3, 1, 3, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("cylinkDIUTimingTT", 1), ("cylinkDIUTimingST", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cylinkDIUTiming.setStatus('mandatory')
cylinkDialoutCapability = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 3, 1, 3, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("cylinkDialoutCapabilityPolled", 1), ("cylinkDialoutCapabilityTone", 2), ("cylinkDialoutCapabilityPulse", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cylinkDialoutCapability.setStatus('mandatory')
cylinkDialoutHoldoff = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 3, 1, 3, 1, 17), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 99))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cylinkDialoutHoldoff.setStatus('mandatory')
cylinkPrimaryPhone = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 3, 1, 3, 1, 18), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 19))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cylinkPrimaryPhone.setStatus('mandatory')
cylinkSecondaryPhone = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 3, 1, 3, 1, 19), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 19))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cylinkSecondaryPhone.setStatus('mandatory')
cylinkAlarmRepeatTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 3, 1, 3, 1, 20), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 99))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cylinkAlarmRepeatTime.setStatus('mandatory')
cylinkESThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 3, 1, 3, 1, 21), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 99))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cylinkESThreshold.setStatus('mandatory')
cylinkSecondaryContact = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 3, 1, 3, 1, 22), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("cylinkSecondaryContactOpen", 1), ("cylinkSecondaryContactClosed", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cylinkSecondaryContact.setStatus('mandatory')
ibmdot1dBase = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 6, 2, 15, 1))
ibmdot1dStp = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 6, 2, 15, 2))
ibmdot1dTp = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 6, 2, 15, 3))
ibmdot1dStatic = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 6, 2, 15, 4))
ibmtbMACAddressFilters = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 6, 2, 15, 5))
ibmtbSAPFilters = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 6, 2, 15, 6))
ibmtbEthTypeFilters = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 6, 2, 15, 7))
ibmtbWindowFilters = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 6, 2, 15, 8))
ibmtbFiltOrderTable = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 6, 2, 15, 9))
ibmdot1dBaseBridgeAddress = MibScalar((1, 3, 6, 1, 4, 1, 2, 6, 2, 15, 1, 1), OctetString().subtype(subtypeSpec=ValueSizeConstraint(6, 6)).setFixedLength(6)).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmdot1dBaseBridgeAddress.setStatus('mandatory')
ibmdot1dBaseNumPorts = MibScalar((1, 3, 6, 1, 4, 1, 2, 6, 2, 15, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmdot1dBaseNumPorts.setStatus('mandatory')
ibmdot1dBaseType = MibScalar((1, 3, 6, 1, 4, 1, 2, 6, 2, 15, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("unknown", 1), ("transparent-only", 2), ("sourceroute-only", 3), ("srt", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmdot1dBaseType.setStatus('mandatory')
ibmdot1dBasePortTable = MibTable((1, 3, 6, 1, 4, 1, 2, 6, 2, 15, 1, 4), )
if mibBuilder.loadTexts: ibmdot1dBasePortTable.setStatus('mandatory')
ibmdot1dBasePortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2, 6, 2, 15, 1, 4, 1), ).setIndexNames((0, "IBM6611-MIB", "ibmdot1dBasePort"))
if mibBuilder.loadTexts: ibmdot1dBasePortEntry.setStatus('mandatory')
ibmdot1dBasePort = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 15, 1, 4, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmdot1dBasePort.setStatus('mandatory')
ibmdot1dBasePortIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 15, 1, 4, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmdot1dBasePortIfIndex.setStatus('mandatory')
ibmdot1dBasePortCircuit = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 15, 1, 4, 1, 3), ObjectIdentifier()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmdot1dBasePortCircuit.setStatus('mandatory')
ibmdot1dBasePortDelayExceededDiscards = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 15, 1, 4, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmdot1dBasePortDelayExceededDiscards.setStatus('mandatory')
ibmdot1dBasePortMtuExceededDiscards = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 15, 1, 4, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmdot1dBasePortMtuExceededDiscards.setStatus('mandatory')
ibmdot1dStpProtocolSpecification = MibScalar((1, 3, 6, 1, 4, 1, 2, 6, 2, 15, 2, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("unknown", 1), ("decLb100", 2), ("ieee8021d", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmdot1dStpProtocolSpecification.setStatus('mandatory')
ibmdot1dStpPriority = MibScalar((1, 3, 6, 1, 4, 1, 2, 6, 2, 15, 2, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ibmdot1dStpPriority.setStatus('mandatory')
ibmdot1dStpTimeSinceTopologyChange = MibScalar((1, 3, 6, 1, 4, 1, 2, 6, 2, 15, 2, 3), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmdot1dStpTimeSinceTopologyChange.setStatus('mandatory')
ibmdot1dStpTopChanges = MibScalar((1, 3, 6, 1, 4, 1, 2, 6, 2, 15, 2, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmdot1dStpTopChanges.setStatus('mandatory')
ibmdot1dStpDesignatedRoot = MibScalar((1, 3, 6, 1, 4, 1, 2, 6, 2, 15, 2, 5), OctetString().subtype(subtypeSpec=ValueSizeConstraint(8, 8)).setFixedLength(8)).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmdot1dStpDesignatedRoot.setStatus('mandatory')
ibmdot1dStpRootCost = MibScalar((1, 3, 6, 1, 4, 1, 2, 6, 2, 15, 2, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmdot1dStpRootCost.setStatus('mandatory')
ibmdot1dStpRootPort = MibScalar((1, 3, 6, 1, 4, 1, 2, 6, 2, 15, 2, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmdot1dStpRootPort.setStatus('mandatory')
ibmdot1dStpMaxAge = MibScalar((1, 3, 6, 1, 4, 1, 2, 6, 2, 15, 2, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmdot1dStpMaxAge.setStatus('mandatory')
ibmdot1dStpHelloTime = MibScalar((1, 3, 6, 1, 4, 1, 2, 6, 2, 15, 2, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmdot1dStpHelloTime.setStatus('mandatory')
ibmdot1dStpHoldTime = MibScalar((1, 3, 6, 1, 4, 1, 2, 6, 2, 15, 2, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmdot1dStpHoldTime.setStatus('mandatory')
ibmdot1dStpForwardDelay = MibScalar((1, 3, 6, 1, 4, 1, 2, 6, 2, 15, 2, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmdot1dStpForwardDelay.setStatus('mandatory')
ibmdot1dStpBridgeMaxAge = MibScalar((1, 3, 6, 1, 4, 1, 2, 6, 2, 15, 2, 12), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ibmdot1dStpBridgeMaxAge.setStatus('mandatory')
ibmdot1dStpBridgeHelloTime = MibScalar((1, 3, 6, 1, 4, 1, 2, 6, 2, 15, 2, 13), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ibmdot1dStpBridgeHelloTime.setStatus('mandatory')
ibmdot1dStpBridgeForwardDelay = MibScalar((1, 3, 6, 1, 4, 1, 2, 6, 2, 15, 2, 14), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ibmdot1dStpBridgeForwardDelay.setStatus('mandatory')
ibmdot1dStpPortTable = MibTable((1, 3, 6, 1, 4, 1, 2, 6, 2, 15, 2, 15), )
if mibBuilder.loadTexts: ibmdot1dStpPortTable.setStatus('mandatory')
ibmdot1dStpPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2, 6, 2, 15, 2, 15, 1), ).setIndexNames((0, "IBM6611-MIB", "ibmdot1dStpPort"))
if mibBuilder.loadTexts: ibmdot1dStpPortEntry.setStatus('mandatory')
ibmdot1dStpPort = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 15, 2, 15, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmdot1dStpPort.setStatus('mandatory')
ibmdot1dStpPortPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 15, 2, 15, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ibmdot1dStpPortPriority.setStatus('mandatory')
ibmdot1dStpPortState = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 15, 2, 15, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("disabled", 1), ("blocking", 2), ("listening", 3), ("learning", 4), ("forwarding", 5), ("broken", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmdot1dStpPortState.setStatus('mandatory')
ibmdot1dStpPortEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 15, 2, 15, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ibmdot1dStpPortEnable.setStatus('mandatory')
ibmdot1dStpPortPathCost = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 15, 2, 15, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ibmdot1dStpPortPathCost.setStatus('mandatory')
ibmdot1dStpPortDesignatedRoot = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 15, 2, 15, 1, 6), OctetString().subtype(subtypeSpec=ValueSizeConstraint(8, 8)).setFixedLength(8)).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmdot1dStpPortDesignatedRoot.setStatus('mandatory')
ibmdot1dStpPortDesignatedCost = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 15, 2, 15, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmdot1dStpPortDesignatedCost.setStatus('mandatory')
ibmdot1dStpPortDesignatedBridge = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 15, 2, 15, 1, 8), OctetString().subtype(subtypeSpec=ValueSizeConstraint(8, 8)).setFixedLength(8)).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmdot1dStpPortDesignatedBridge.setStatus('mandatory')
ibmdot1dStpPortDesignatedPort = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 15, 2, 15, 1, 9), OctetString().subtype(subtypeSpec=ValueSizeConstraint(2, 2)).setFixedLength(2)).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmdot1dStpPortDesignatedPort.setStatus('mandatory')
ibmdot1dStpPortForwardTransitions = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 15, 2, 15, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmdot1dStpPortForwardTransitions.setStatus('mandatory')
ibmdot1dTpLearnedEntryDiscards = MibScalar((1, 3, 6, 1, 4, 1, 2, 6, 2, 15, 3, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmdot1dTpLearnedEntryDiscards.setStatus('mandatory')
ibmdot1dTpAgingTime = MibScalar((1, 3, 6, 1, 4, 1, 2, 6, 2, 15, 3, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ibmdot1dTpAgingTime.setStatus('mandatory')
ibmdot1dTpFdbTable = MibTable((1, 3, 6, 1, 4, 1, 2, 6, 2, 15, 3, 3), )
if mibBuilder.loadTexts: ibmdot1dTpFdbTable.setStatus('mandatory')
ibmdot1dTpFdbEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2, 6, 2, 15, 3, 3, 1), ).setIndexNames((0, "IBM6611-MIB", "ibmdot1dTpFdbAddress"))
if mibBuilder.loadTexts: ibmdot1dTpFdbEntry.setStatus('mandatory')
ibmdot1dTpFdbAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 15, 3, 3, 1, 1), OctetString().subtype(subtypeSpec=ValueSizeConstraint(6, 6)).setFixedLength(6)).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmdot1dTpFdbAddress.setStatus('mandatory')
ibmdot1dTpFdbPort = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 15, 3, 3, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmdot1dTpFdbPort.setStatus('mandatory')
ibmdot1dTpFdbStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 15, 3, 3, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("other", 1), ("invalid", 2), ("learned", 3), ("self", 4), ("mgmt", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmdot1dTpFdbStatus.setStatus('mandatory')
ibmdot1dTpPortTable = MibTable((1, 3, 6, 1, 4, 1, 2, 6, 2, 15, 3, 4), )
if mibBuilder.loadTexts: ibmdot1dTpPortTable.setStatus('mandatory')
ibmdot1dTpPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2, 6, 2, 15, 3, 4, 1), ).setIndexNames((0, "IBM6611-MIB", "ibmdot1dTpPort"))
if mibBuilder.loadTexts: ibmdot1dTpPortEntry.setStatus('mandatory')
ibmdot1dTpPort = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 15, 3, 4, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmdot1dTpPort.setStatus('mandatory')
ibmdot1dTpPortMaxInfo = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 15, 3, 4, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmdot1dTpPortMaxInfo.setStatus('mandatory')
ibmdot1dTpPortInFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 15, 3, 4, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmdot1dTpPortInFrames.setStatus('mandatory')
ibmdot1dTpPortOutFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 15, 3, 4, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmdot1dTpPortOutFrames.setStatus('mandatory')
ibmdot1dTpPortInDiscards = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 15, 3, 4, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmdot1dTpPortInDiscards.setStatus('mandatory')
ibmdot1dStaticTable = MibTable((1, 3, 6, 1, 4, 1, 2, 6, 2, 15, 4, 1), )
if mibBuilder.loadTexts: ibmdot1dStaticTable.setStatus('mandatory')
ibmdot1dStaticEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2, 6, 2, 15, 4, 1, 1), ).setIndexNames((0, "IBM6611-MIB", "ibmdot1dStaticAddress"), (0, "IBM6611-MIB", "ibmdot1dStaticReceivePort"))
if mibBuilder.loadTexts: ibmdot1dStaticEntry.setStatus('mandatory')
ibmdot1dStaticAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 15, 4, 1, 1, 1), OctetString().subtype(subtypeSpec=ValueSizeConstraint(6, 6)).setFixedLength(6)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ibmdot1dStaticAddress.setStatus('mandatory')
ibmdot1dStaticReceivePort = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 15, 4, 1, 1, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ibmdot1dStaticReceivePort.setStatus('mandatory')
ibmdot1dStaticAllowedToGoTo = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 15, 4, 1, 1, 3), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ibmdot1dStaticAllowedToGoTo.setStatus('mandatory')
ibmdot1dStaticStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 15, 4, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("other", 1), ("invalid", 2), ("permanent", 3), ("deleteOnReset", 4), ("deleteOnTimeout", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ibmdot1dStaticStatus.setStatus('mandatory')
ibmtbmacFiltInfoTable = MibTable((1, 3, 6, 1, 4, 1, 2, 6, 2, 15, 5, 1), )
if mibBuilder.loadTexts: ibmtbmacFiltInfoTable.setStatus('mandatory')
ibmtbmacFiltInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2, 6, 2, 15, 5, 1, 1), ).setIndexNames((0, "IBM6611-MIB", "ibmtbmacFiltIfIndex"))
if mibBuilder.loadTexts: ibmtbmacFiltInfoEntry.setStatus('mandatory')
ibmtbmacFiltIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 15, 5, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmtbmacFiltIfIndex.setStatus('mandatory')
ibmtbmacFiltInFilterType = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 15, 5, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("deny", 1), ("permit", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmtbmacFiltInFilterType.setStatus('mandatory')
ibmtbmacFiltOutFilterType = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 15, 5, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("deny", 1), ("permit", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmtbmacFiltOutFilterType.setStatus('mandatory')
ibmtbmacFiltInNotForwarded = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 15, 5, 1, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmtbmacFiltInNotForwarded.setStatus('mandatory')
ibmtbmacFiltOutNotForwarded = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 15, 5, 1, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmtbmacFiltOutNotForwarded.setStatus('mandatory')
ibmtbmacFiltInTable = MibTable((1, 3, 6, 1, 4, 1, 2, 6, 2, 15, 5, 2), )
if mibBuilder.loadTexts: ibmtbmacFiltInTable.setStatus('mandatory')
ibmtbmacFiltInEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2, 6, 2, 15, 5, 2, 1), ).setIndexNames((0, "IBM6611-MIB", "ibmtbmacFiltInIfIndex"), (0, "IBM6611-MIB", "ibmtbmacFiltInSrcAddress"), (0, "IBM6611-MIB", "ibmtbmacFiltInDestAddress"))
if mibBuilder.loadTexts: ibmtbmacFiltInEntry.setStatus('mandatory')
ibmtbmacFiltInIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 15, 5, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmtbmacFiltInIfIndex.setStatus('mandatory')
ibmtbmacFiltInSrcAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 15, 5, 2, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(6, 6)).setFixedLength(6)).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmtbmacFiltInSrcAddress.setStatus('mandatory')
ibmtbmacFiltInSrcMask = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 15, 5, 2, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(6, 6)).setFixedLength(6)).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmtbmacFiltInSrcMask.setStatus('mandatory')
ibmtbmacFiltInDestAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 15, 5, 2, 1, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(6, 6)).setFixedLength(6)).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmtbmacFiltInDestAddress.setStatus('mandatory')
ibmtbmacFiltInDestMask = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 15, 5, 2, 1, 5), OctetString().subtype(subtypeSpec=ValueSizeConstraint(6, 6)).setFixedLength(6)).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmtbmacFiltInDestMask.setStatus('mandatory')
ibmtbmacFiltOutTable = MibTable((1, 3, 6, 1, 4, 1, 2, 6, 2, 15, 5, 3), )
if mibBuilder.loadTexts: ibmtbmacFiltOutTable.setStatus('mandatory')
ibmtbmacFiltOutEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2, 6, 2, 15, 5, 3, 1), ).setIndexNames((0, "IBM6611-MIB", "ibmtbmacFiltOutIfIndex"), (0, "IBM6611-MIB", "ibmtbmacFiltOutSrcAddress"), (0, "IBM6611-MIB", "ibmtbmacFiltOutDestAddress"))
if mibBuilder.loadTexts: ibmtbmacFiltOutEntry.setStatus('mandatory')
ibmtbmacFiltOutIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 15, 5, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmtbmacFiltOutIfIndex.setStatus('mandatory')
ibmtbmacFiltOutSrcAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 15, 5, 3, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(6, 6)).setFixedLength(6)).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmtbmacFiltOutSrcAddress.setStatus('mandatory')
ibmtbmacFiltOutSrcMask = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 15, 5, 3, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(6, 6)).setFixedLength(6)).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmtbmacFiltOutSrcMask.setStatus('mandatory')
ibmtbmacFiltOutDestAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 15, 5, 3, 1, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(6, 6)).setFixedLength(6)).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmtbmacFiltOutDestAddress.setStatus('mandatory')
ibmtbmacFiltOutDestMask = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 15, 5, 3, 1, 5), OctetString().subtype(subtypeSpec=ValueSizeConstraint(6, 6)).setFixedLength(6)).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmtbmacFiltOutDestMask.setStatus('mandatory')
ibmtbsapFiltInfoTable = MibTable((1, 3, 6, 1, 4, 1, 2, 6, 2, 15, 6, 1), )
if mibBuilder.loadTexts: ibmtbsapFiltInfoTable.setStatus('mandatory')
ibmtbsapFiltInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2, 6, 2, 15, 6, 1, 1), ).setIndexNames((0, "IBM6611-MIB", "ibmtbsapFiltIfIndex"))
if mibBuilder.loadTexts: ibmtbsapFiltInfoEntry.setStatus('mandatory')
ibmtbsapFiltIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 15, 6, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmtbsapFiltIfIndex.setStatus('mandatory')
ibmtbsapFiltIn = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 15, 6, 1, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(16, 16)).setFixedLength(16)).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmtbsapFiltIn.setStatus('mandatory')
ibmtbsapFiltOut = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 15, 6, 1, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(16, 16)).setFixedLength(16)).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmtbsapFiltOut.setStatus('mandatory')
ibmtbsapFiltInNotForwarded = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 15, 6, 1, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmtbsapFiltInNotForwarded.setStatus('mandatory')
ibmtbsapFiltOutNotForwarded = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 15, 6, 1, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmtbsapFiltOutNotForwarded.setStatus('mandatory')
ibmtbEthTypeFiltInfoTable = MibTable((1, 3, 6, 1, 4, 1, 2, 6, 2, 15, 7, 1), )
if mibBuilder.loadTexts: ibmtbEthTypeFiltInfoTable.setStatus('mandatory')
ibmtbEthTypeFiltInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2, 6, 2, 15, 7, 1, 1), ).setIndexNames((0, "IBM6611-MIB", "ibmtbEthTypeFiltIfIndex"))
if mibBuilder.loadTexts: ibmtbEthTypeFiltInfoEntry.setStatus('mandatory')
ibmtbEthTypeFiltIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 15, 7, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmtbEthTypeFiltIfIndex.setStatus('mandatory')
ibmtbEthTypeFiltInFilterType = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 15, 7, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("deny", 1), ("permit", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmtbEthTypeFiltInFilterType.setStatus('mandatory')
ibmtbEthTypeFiltOutFilterType = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 15, 7, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("deny", 1), ("permit", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmtbEthTypeFiltOutFilterType.setStatus('mandatory')
ibmtbEthTypeFiltInNotForwarded = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 15, 7, 1, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmtbEthTypeFiltInNotForwarded.setStatus('mandatory')
ibmtbEthTypeFiltOutNotForwarded = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 15, 7, 1, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmtbEthTypeFiltOutNotForwarded.setStatus('mandatory')
ibmtbEthTypeFiltInTable = MibTable((1, 3, 6, 1, 4, 1, 2, 6, 2, 15, 7, 2), )
if mibBuilder.loadTexts: ibmtbEthTypeFiltInTable.setStatus('mandatory')
ibmtbEthTypeFiltInEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2, 6, 2, 15, 7, 2, 1), ).setIndexNames((0, "IBM6611-MIB", "ibmtbEthTypeFiltInIfIndex"), (0, "IBM6611-MIB", "ibmtbEthTypeFiltInValue"))
if mibBuilder.loadTexts: ibmtbEthTypeFiltInEntry.setStatus('mandatory')
ibmtbEthTypeFiltInIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 15, 7, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmtbEthTypeFiltInIfIndex.setStatus('mandatory')
ibmtbEthTypeFiltInValue = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 15, 7, 2, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(2, 2)).setFixedLength(2)).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmtbEthTypeFiltInValue.setStatus('mandatory')
ibmtbEthTypeFiltInMask = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 15, 7, 2, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(2, 2)).setFixedLength(2)).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmtbEthTypeFiltInMask.setStatus('mandatory')
ibmtbEthTypeFiltOutTable = MibTable((1, 3, 6, 1, 4, 1, 2, 6, 2, 15, 7, 3), )
if mibBuilder.loadTexts: ibmtbEthTypeFiltOutTable.setStatus('mandatory')
ibmtbEthTypeFiltOutEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2, 6, 2, 15, 7, 3, 1), ).setIndexNames((0, "IBM6611-MIB", "ibmtbEthTypeFiltOutIfIndex"), (0, "IBM6611-MIB", "ibmtbEthTypeFiltOutValue"))
if mibBuilder.loadTexts: ibmtbEthTypeFiltOutEntry.setStatus('mandatory')
ibmtbEthTypeFiltOutIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 15, 7, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmtbEthTypeFiltOutIfIndex.setStatus('mandatory')
ibmtbEthTypeFiltOutValue = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 15, 7, 3, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(2, 2)).setFixedLength(2)).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmtbEthTypeFiltOutValue.setStatus('mandatory')
ibmtbEthTypeFiltOutMask = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 15, 7, 3, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(2, 2)).setFixedLength(2)).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmtbEthTypeFiltOutMask.setStatus('mandatory')
ibmtbwinFiltInfoTable = MibTable((1, 3, 6, 1, 4, 1, 2, 6, 2, 15, 8, 1), )
if mibBuilder.loadTexts: ibmtbwinFiltInfoTable.setStatus('mandatory')
ibmtbwinFiltInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2, 6, 2, 15, 8, 1, 1), ).setIndexNames((0, "IBM6611-MIB", "ibmtbwinFiltIfIndex"))
if mibBuilder.loadTexts: ibmtbwinFiltInfoEntry.setStatus('mandatory')
ibmtbwinFiltIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 15, 8, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmtbwinFiltIfIndex.setStatus('mandatory')
ibmtbwinFiltInFilterType = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 15, 8, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("deny", 1), ("permit", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmtbwinFiltInFilterType.setStatus('mandatory')
ibmtbwinFiltOutFilterType = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 15, 8, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("deny", 1), ("permit", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmtbwinFiltOutFilterType.setStatus('mandatory')
ibmtbwinFiltInNotForwarded = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 15, 8, 1, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmtbwinFiltInNotForwarded.setStatus('mandatory')
ibmtbwinFiltOutNotForwarded = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 15, 8, 1, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmtbwinFiltOutNotForwarded.setStatus('mandatory')
ibmtbwinFiltInTable = MibTable((1, 3, 6, 1, 4, 1, 2, 6, 2, 15, 8, 2), )
if mibBuilder.loadTexts: ibmtbwinFiltInTable.setStatus('mandatory')
ibmtbwinFiltInEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2, 6, 2, 15, 8, 2, 1), ).setIndexNames((0, "IBM6611-MIB", "ibmtbwinFiltInIfIndex"), (0, "IBM6611-MIB", "ibmtbwinFiltInId"), (0, "IBM6611-MIB", "ibmtbwinFiltInContents"))
if mibBuilder.loadTexts: ibmtbwinFiltInEntry.setStatus('mandatory')
ibmtbwinFiltInIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 15, 8, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmtbwinFiltInIfIndex.setStatus('mandatory')
ibmtbwinFiltInContents = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 15, 8, 2, 1, 2), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmtbwinFiltInContents.setStatus('mandatory')
ibmtbwinFiltInMaskString = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 15, 8, 2, 1, 3), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmtbwinFiltInMaskString.setStatus('mandatory')
ibmtbwinFiltInOffsetStart = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 15, 8, 2, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmtbwinFiltInOffsetStart.setStatus('mandatory')
ibmtbwinFiltInNumBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 15, 8, 2, 1, 5), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 1)).setFixedLength(1)).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmtbwinFiltInNumBytes.setStatus('mandatory')
ibmtbwinFiltInOffset = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 15, 8, 2, 1, 6), OctetString().subtype(subtypeSpec=ValueSizeConstraint(2, 2)).setFixedLength(2)).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmtbwinFiltInOffset.setStatus('mandatory')
ibmtbwinFiltInId = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 15, 8, 2, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmtbwinFiltInId.setStatus('mandatory')
ibmtbwinFiltOutTable = MibTable((1, 3, 6, 1, 4, 1, 2, 6, 2, 15, 8, 3), )
if mibBuilder.loadTexts: ibmtbwinFiltOutTable.setStatus('mandatory')
ibmtbwinFiltOutEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2, 6, 2, 15, 8, 3, 1), ).setIndexNames((0, "IBM6611-MIB", "ibmtbwinFiltOutIfIndex"), (0, "IBM6611-MIB", "ibmtbwinFiltOutId"), (0, "IBM6611-MIB", "ibmtbwinFiltOutContents"))
if mibBuilder.loadTexts: ibmtbwinFiltOutEntry.setStatus('mandatory')
ibmtbwinFiltOutIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 15, 8, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmtbwinFiltOutIfIndex.setStatus('mandatory')
ibmtbwinFiltOutContents = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 15, 8, 3, 1, 2), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmtbwinFiltOutContents.setStatus('mandatory')
ibmtbwinFiltOutMaskString = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 15, 8, 3, 1, 3), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmtbwinFiltOutMaskString.setStatus('mandatory')
ibmtbwinFiltOutOffsetStart = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 15, 8, 3, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmtbwinFiltOutOffsetStart.setStatus('mandatory')
ibmtbwinFiltOutNumBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 15, 8, 3, 1, 5), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 1)).setFixedLength(1)).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmtbwinFiltOutNumBytes.setStatus('mandatory')
ibmtbwinFiltOutOffset = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 15, 8, 3, 1, 6), OctetString().subtype(subtypeSpec=ValueSizeConstraint(2, 2)).setFixedLength(2)).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmtbwinFiltOutOffset.setStatus('mandatory')
ibmtbwinFiltOutId = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 15, 8, 3, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmtbwinFiltOutId.setStatus('mandatory')
ibmtbFiltOrderInTable = MibTable((1, 3, 6, 1, 4, 1, 2, 6, 2, 15, 9, 1), )
if mibBuilder.loadTexts: ibmtbFiltOrderInTable.setStatus('mandatory')
ibmtbFiltOrderInEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2, 6, 2, 15, 9, 1, 1), ).setIndexNames((0, "IBM6611-MIB", "ibmtbFiltOrderInPriority"))
if mibBuilder.loadTexts: ibmtbFiltOrderInEntry.setStatus('mandatory')
ibmtbFiltOrderInIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 15, 9, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmtbFiltOrderInIfIndex.setStatus('mandatory')
ibmtbFiltOrderInPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 15, 9, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmtbFiltOrderInPriority.setStatus('mandatory')
ibmtbFiltOrderInName = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 15, 9, 1, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmtbFiltOrderInName.setStatus('mandatory')
ibmtbFiltOrderOutTable = MibTable((1, 3, 6, 1, 4, 1, 2, 6, 2, 15, 9, 2), )
if mibBuilder.loadTexts: ibmtbFiltOrderOutTable.setStatus('mandatory')
ibmtbFiltOrderOutEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2, 6, 2, 15, 9, 2, 1), ).setIndexNames((0, "IBM6611-MIB", "ibmtbFiltOrderOutPriority"))
if mibBuilder.loadTexts: ibmtbFiltOrderOutEntry.setStatus('mandatory')
ibmtbFiltOrderOutIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 15, 9, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmtbFiltOrderOutIfIndex.setStatus('mandatory')
ibmtbFiltOrderOutPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 15, 9, 2, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmtbFiltOrderOutPriority.setStatus('mandatory')
ibmtbFiltOrderOutName = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 15, 9, 2, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmtbFiltOrderOutName.setStatus('mandatory')
ibmSelectNet = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 6, 2, 16, 1))
ibmnbpFilter = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 6, 2, 16, 2))
ibmatportFilter = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 6, 2, 16, 3))
ibmSelectNetFilter = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 6, 2, 16, 4))
ibmSelectNetTable = MibTable((1, 3, 6, 1, 4, 1, 2, 6, 2, 16, 1, 1), )
if mibBuilder.loadTexts: ibmSelectNetTable.setStatus('mandatory')
ibmSelectNetEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2, 6, 2, 16, 1, 1, 1), ).setIndexNames((0, "IBM6611-MIB", "ibmSelectNetIndex"))
if mibBuilder.loadTexts: ibmSelectNetEntry.setStatus('mandatory')
ibmSelectNetIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 16, 1, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmSelectNetIndex.setStatus('mandatory')
ibmSelectNetZone = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 16, 1, 1, 1, 2), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmSelectNetZone.setStatus('mandatory')
ibmSelectNetNetStart = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 16, 1, 1, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(2, 2)).setFixedLength(2)).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmSelectNetNetStart.setStatus('mandatory')
ibmSelectNetNetEnd = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 16, 1, 1, 1, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(2, 2)).setFixedLength(2)).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmSelectNetNetEnd.setStatus('mandatory')
ibmSelectNetInterfaceNetStart = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 16, 1, 1, 1, 5), OctetString().subtype(subtypeSpec=ValueSizeConstraint(2, 2)).setFixedLength(2)).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmSelectNetInterfaceNetStart.setStatus('mandatory')
ibmnbpFilterPacketsFiltered = MibScalar((1, 3, 6, 1, 4, 1, 2, 6, 2, 16, 2, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmnbpFilterPacketsFiltered.setStatus('mandatory')
ibmnbpFilterPacketsSent = MibScalar((1, 3, 6, 1, 4, 1, 2, 6, 2, 16, 2, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmnbpFilterPacketsSent.setStatus('mandatory')
ibmatportFilterTable = MibTable((1, 3, 6, 1, 4, 1, 2, 6, 2, 16, 3, 1), )
if mibBuilder.loadTexts: ibmatportFilterTable.setStatus('mandatory')
ibmatportFilterEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2, 6, 2, 16, 3, 1, 1), ).setIndexNames((0, "IBM6611-MIB", "ibmatportFilterIndex"), (0, "IBM6611-MIB", "ibmatportFilterNetStart"))
if mibBuilder.loadTexts: ibmatportFilterEntry.setStatus('mandatory')
ibmatportFilterIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 16, 3, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmatportFilterIndex.setStatus('mandatory')
ibmatportFilterNetStart = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 16, 3, 1, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(2, 2)).setFixedLength(2)).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmatportFilterNetStart.setStatus('mandatory')
ibmatportFilterNetEnd = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 16, 3, 1, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(2, 2)).setFixedLength(2)).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmatportFilterNetEnd.setStatus('mandatory')
ibmSelectNetFilterTable = MibTable((1, 3, 6, 1, 4, 1, 2, 6, 2, 16, 4, 1), )
if mibBuilder.loadTexts: ibmSelectNetFilterTable.setStatus('mandatory')
ibmSelectNetFilterEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2, 6, 2, 16, 4, 1, 1), ).setIndexNames((0, "IBM6611-MIB", "ibmSelectNetFilterIndex"), (0, "IBM6611-MIB", "ibmSelectNetFilterNetStart"))
if mibBuilder.loadTexts: ibmSelectNetFilterEntry.setStatus('mandatory')
ibmSelectNetFilterIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 16, 4, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmSelectNetFilterIndex.setStatus('mandatory')
ibmSelectNetFilterNetStart = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 16, 4, 1, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(2, 2)).setFixedLength(2)).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmSelectNetFilterNetStart.setStatus('mandatory')
ibmSelectNetFilterNetEnd = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 16, 4, 1, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(2, 2)).setFixedLength(2)).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmSelectNetFilterNetEnd.setStatus('mandatory')
ibmdecAllRoutersFuncAddr = MibScalar((1, 3, 6, 1, 4, 1, 2, 6, 2, 17, 1), OctetString().subtype(subtypeSpec=ValueSizeConstraint(6, 6)).setFixedLength(6)).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmdecAllRoutersFuncAddr.setStatus('mandatory')
ibmdecAllEndNodesFuncAddr = MibScalar((1, 3, 6, 1, 4, 1, 2, 6, 2, 17, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(6, 6)).setFixedLength(6)).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmdecAllEndNodesFuncAddr.setStatus('mandatory')
ibmdecSplitHorPoisonRev = MibScalar((1, 3, 6, 1, 4, 1, 2, 6, 2, 17, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmdecSplitHorPoisonRev.setStatus('mandatory')
ibmdecNodeType = MibScalar((1, 3, 6, 1, 4, 1, 2, 6, 2, 17, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("routing-III", 1), ("nonrouting-III", 2), ("area", 3), ("routing-IV", 4), ("nonrouting-IV", 5), ("area-IV-Prime", 6), ("routing-IV-Prime", 7), ("nonrouting-IV-Prime", 8)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmdecNodeType.setStatus('mandatory')
ibmdecLANCircuitTable = MibTable((1, 3, 6, 1, 4, 1, 2, 6, 2, 17, 5), )
if mibBuilder.loadTexts: ibmdecLANCircuitTable.setStatus('mandatory')
ibmdecLANCircuitEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2, 6, 2, 17, 5, 1), ).setIndexNames((0, "IBM6611-MIB", "ibmdecLANCircuitIndex"))
if mibBuilder.loadTexts: ibmdecLANCircuitEntry.setStatus('mandatory')
ibmdecLANCircuitIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 17, 5, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmdecLANCircuitIndex.setStatus('mandatory')
ibmdecLANCircuitType = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 17, 5, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("bilingual", 1), ("ama", 2), ("phaseIV", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmdecLANCircuitType.setStatus('mandatory')
ibmdecLANCircuitSourceRoute = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 17, 5, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2), ("notapplicable", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmdecLANCircuitSourceRoute.setStatus('mandatory')
ibmdecLANCircuitAddrType = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 17, 5, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("decnet", 1), ("hardware", 2), ("user", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmdecLANCircuitAddrType.setStatus('mandatory')
ibmipext = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 6, 2, 19, 1))
ibmptyqueue = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 6, 2, 19, 2))
ibmTG = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 6, 2, 19, 3))
ibmipPtyQueueEnableTable = MibTable((1, 3, 6, 1, 4, 1, 2, 6, 2, 19, 1, 1), )
if mibBuilder.loadTexts: ibmipPtyQueueEnableTable.setStatus('mandatory')
ibmipPtyQueueEnableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2, 6, 2, 19, 1, 1, 1), ).setIndexNames((0, "IBM6611-MIB", "ibmipPtyQueueEnableIfIndex"))
if mibBuilder.loadTexts: ibmipPtyQueueEnableEntry.setStatus('mandatory')
ibmipPtyQueueEnableIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 19, 1, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmipPtyQueueEnableIfIndex.setStatus('mandatory')
ibmipPtyQueueEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 19, 1, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmipPtyQueueEnable.setStatus('mandatory')
ibmipPtyQueueDefault = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 19, 1, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("high", 1), ("medium", 2), ("low", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmipPtyQueueDefault.setStatus('mandatory')
ibmipPtyQueueTable = MibTable((1, 3, 6, 1, 4, 1, 2, 6, 2, 19, 1, 2), )
if mibBuilder.loadTexts: ibmipPtyQueueTable.setStatus('mandatory')
ibmipPtyQueueEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2, 6, 2, 19, 1, 2, 1), ).setIndexNames((0, "IBM6611-MIB", "ibmipPtyQueueIfIndex"), (0, "IBM6611-MIB", "ibmipPtyQueuePort"), (0, "IBM6611-MIB", "ibmipPtyQueueType"))
if mibBuilder.loadTexts: ibmipPtyQueueEntry.setStatus('mandatory')
ibmipPtyQueueIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 19, 1, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmipPtyQueueIfIndex.setStatus('mandatory')
ibmipPtyQueuePort = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 19, 1, 2, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmipPtyQueuePort.setStatus('mandatory')
ibmipPtyQueueType = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 19, 1, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("tcp", 1), ("udp", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmipPtyQueueType.setStatus('mandatory')
ibmipPtyQueueNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 19, 1, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("high", 1), ("medium", 2), ("low", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmipPtyQueueNumber.setStatus('mandatory')
ibmipFilterTable = MibTable((1, 3, 6, 1, 4, 1, 2, 6, 2, 19, 1, 3), )
if mibBuilder.loadTexts: ibmipFilterTable.setStatus('mandatory')
ibmipFilterEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2, 6, 2, 19, 1, 3, 1), ).setIndexNames((0, "IBM6611-MIB", "ibmipFilterIfIndex"), (0, "IBM6611-MIB", "ibmipFilterId"))
if mibBuilder.loadTexts: ibmipFilterEntry.setStatus('mandatory')
ibmipFilterIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 19, 1, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmipFilterIfIndex.setStatus('mandatory')
ibmipFilterId = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 19, 1, 3, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 50))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmipFilterId.setStatus('mandatory')
ibmipFilterScope = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 19, 1, 3, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("system", 1), ("interface", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmipFilterScope.setStatus('mandatory')
ibmipFilterType = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 19, 1, 3, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("singular", 1), ("dual", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmipFilterType.setStatus('mandatory')
ibmipPermitDeny = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 19, 1, 3, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("permit", 1), ("deny", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmipPermitDeny.setStatus('mandatory')
ibmipFilterAddr1 = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 19, 1, 3, 1, 6), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmipFilterAddr1.setStatus('mandatory')
ibmipFilterMask1 = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 19, 1, 3, 1, 7), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmipFilterMask1.setStatus('mandatory')
ibmipFilterAddr2 = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 19, 1, 3, 1, 8), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmipFilterAddr2.setStatus('mandatory')
ibmipFilterMask2 = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 19, 1, 3, 1, 9), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmipFilterMask2.setStatus('mandatory')
ibmipFilterExtTable = MibTable((1, 3, 6, 1, 4, 1, 2, 6, 2, 19, 1, 4), )
if mibBuilder.loadTexts: ibmipFilterExtTable.setStatus('mandatory')
ibmipFilterExtEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2, 6, 2, 19, 1, 4, 1), ).setIndexNames((0, "IBM6611-MIB", "ibmipFilterExtIfIndex"), (0, "IBM6611-MIB", "ibmipFilterExtFilterId"), (0, "IBM6611-MIB", "ibmipFilterExtValue"), (0, "IBM6611-MIB", "ibmipFilterExtProtocol"))
if mibBuilder.loadTexts: ibmipFilterExtEntry.setStatus('mandatory')
ibmipFilterExtIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 19, 1, 4, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmipFilterExtIfIndex.setStatus('mandatory')
ibmipFilterExtFilterId = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 19, 1, 4, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 50))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmipFilterExtFilterId.setStatus('mandatory')
ibmipFilterExtValue = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 19, 1, 4, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmipFilterExtValue.setStatus('mandatory')
ibmipFilterExtProtocol = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 19, 1, 4, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("none", 1), ("tcpudp", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmipFilterExtProtocol.setStatus('mandatory')
ibmPtyQueueingTable = MibTable((1, 3, 6, 1, 4, 1, 2, 6, 2, 19, 2, 1), )
if mibBuilder.loadTexts: ibmPtyQueueingTable.setStatus('mandatory')
ibmPtyQueueingEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2, 6, 2, 19, 2, 1, 1), ).setIndexNames((0, "IBM6611-MIB", "ibmPtyQueueingIfIndex"), (0, "IBM6611-MIB", "ibmPtyQueueingQnum"))
if mibBuilder.loadTexts: ibmPtyQueueingEntry.setStatus('mandatory')
ibmPtyQueueingIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 19, 2, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmPtyQueueingIfIndex.setStatus('mandatory')
ibmPtyQueueingQnum = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 19, 2, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("high", 1), ("medium", 2), ("low", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmPtyQueueingQnum.setStatus('mandatory')
ibmPtyQueueingLBA = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 19, 2, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 10))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmPtyQueueingLBA.setStatus('mandatory')
ibmPtyQueueingQBR = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 19, 2, 1, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmPtyQueueingQBR.setStatus('mandatory')
ibmPtyQueueingDiscards = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 19, 2, 1, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmPtyQueueingDiscards.setStatus('mandatory')
ibmTGTable = MibTable((1, 3, 6, 1, 4, 1, 2, 6, 2, 19, 3, 1), )
if mibBuilder.loadTexts: ibmTGTable.setStatus('mandatory')
ibmTGEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2, 6, 2, 19, 3, 1, 1), ).setIndexNames((0, "IBM6611-MIB", "ibmTGProtocol"), (0, "IBM6611-MIB", "ibmTGIfIndex"))
if mibBuilder.loadTexts: ibmTGEntry.setStatus('mandatory')
ibmTGProtocol = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 19, 3, 1, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2048))).clone(namedValues=NamedValues(("ip", 2048)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmTGProtocol.setStatus('mandatory')
ibmTGIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 19, 3, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmTGIfIndex.setStatus('mandatory')
ibmTGEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 19, 3, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmTGEnable.setStatus('mandatory')
ibmTGGroupName = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 19, 3, 1, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 8))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmTGGroupName.setStatus('mandatory')
ibmTGSwitchOuts = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 19, 3, 1, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmTGSwitchOuts.setStatus('mandatory')
ibmvSysConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 6, 2, 18, 1))
ibmvIP = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 6, 2, 18, 2))
ibmvNeighbor = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 6, 2, 18, 3))
ibmvRouting = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 6, 2, 18, 4))
ibmvICP = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 6, 2, 18, 5))
ibmvFRP = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 6, 2, 18, 6))
ibmvInterface = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 6, 2, 18, 7))
ibmvSysRtr = MibScalar((1, 3, 6, 1, 4, 1, 2, 6, 2, 18, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmvSysRtr.setStatus('mandatory')
ibmvRouterName = MibScalar((1, 3, 6, 1, 4, 1, 2, 6, 2, 18, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmvRouterName.setStatus('mandatory')
ibmvRouterNetid = MibScalar((1, 3, 6, 1, 4, 1, 2, 6, 2, 18, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmvRouterNetid.setStatus('mandatory')
ibmvipTotalIn = MibScalar((1, 3, 6, 1, 4, 1, 2, 6, 2, 18, 2, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmvipTotalIn.setStatus('mandatory')
ibmvipTotalOut = MibScalar((1, 3, 6, 1, 4, 1, 2, 6, 2, 18, 2, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmvipTotalOut.setStatus('mandatory')
ibmvipRouted = MibScalar((1, 3, 6, 1, 4, 1, 2, 6, 2, 18, 2, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmvipRouted.setStatus('mandatory')
ibmvipBcast = MibScalar((1, 3, 6, 1, 4, 1, 2, 6, 2, 18, 2, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmvipBcast.setStatus('mandatory')
ibmvipInReceives = MibScalar((1, 3, 6, 1, 4, 1, 2, 6, 2, 18, 2, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmvipInReceives.setStatus('mandatory')
ibmvipBcastInReceives = MibScalar((1, 3, 6, 1, 4, 1, 2, 6, 2, 18, 2, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmvipBcastInReceives.setStatus('mandatory')
ibmvipBad = MibScalar((1, 3, 6, 1, 4, 1, 2, 6, 2, 18, 2, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmvipBad.setStatus('mandatory')
ibmvipBadHeaders = MibScalar((1, 3, 6, 1, 4, 1, 2, 6, 2, 18, 2, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmvipBadHeaders.setStatus('mandatory')
ibmvipTooSmalls = MibScalar((1, 3, 6, 1, 4, 1, 2, 6, 2, 18, 2, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmvipTooSmalls.setStatus('mandatory')
ibmvipBadLens = MibScalar((1, 3, 6, 1, 4, 1, 2, 6, 2, 18, 2, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmvipBadLens.setStatus('mandatory')
ibmvipBadSums = MibScalar((1, 3, 6, 1, 4, 1, 2, 6, 2, 18, 2, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmvipBadSums.setStatus('mandatory')
ibmvipInDiscards = MibScalar((1, 3, 6, 1, 4, 1, 2, 6, 2, 18, 2, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmvipInDiscards.setStatus('mandatory')
ibmvipZeroHops = MibScalar((1, 3, 6, 1, 4, 1, 2, 6, 2, 18, 2, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmvipZeroHops.setStatus('mandatory')
ibmvipOutNoRoutes = MibScalar((1, 3, 6, 1, 4, 1, 2, 6, 2, 18, 2, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmvipOutNoRoutes.setStatus('mandatory')
ibmvARP = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 6, 2, 18, 3, 1))
ibmvarpQueryReqs = MibScalar((1, 3, 6, 1, 4, 1, 2, 6, 2, 18, 3, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmvarpQueryReqs.setStatus('mandatory')
ibmvarpServiceResps = MibScalar((1, 3, 6, 1, 4, 1, 2, 6, 2, 18, 3, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmvarpServiceResps.setStatus('mandatory')
ibmvarpAssignReqs = MibScalar((1, 3, 6, 1, 4, 1, 2, 6, 2, 18, 3, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmvarpAssignReqs.setStatus('mandatory')
ibmvarpAssignResps = MibScalar((1, 3, 6, 1, 4, 1, 2, 6, 2, 18, 3, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmvarpAssignResps.setStatus('mandatory')
ibmvarpHeaderError = MibScalar((1, 3, 6, 1, 4, 1, 2, 6, 2, 18, 3, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmvarpHeaderError.setStatus('mandatory')
ibmvNbrNumber = MibScalar((1, 3, 6, 1, 4, 1, 2, 6, 2, 18, 3, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmvNbrNumber.setStatus('mandatory')
ibmvNbrTable = MibTable((1, 3, 6, 1, 4, 1, 2, 6, 2, 18, 3, 3), )
if mibBuilder.loadTexts: ibmvNbrTable.setStatus('mandatory')
ibmvNbrEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2, 6, 2, 18, 3, 3, 1), ).setIndexNames((0, "IBM6611-MIB", "ibmvNbrNetid"), (0, "IBM6611-MIB", "ibmvNbrSubNetid"), (0, "IBM6611-MIB", "ibmvNbrIfType"), (0, "IBM6611-MIB", "ibmvNbrLocSlot"), (0, "IBM6611-MIB", "ibmvNbrLocPort"))
if mibBuilder.loadTexts: ibmvNbrEntry.setStatus('mandatory')
ibmvNbrNetid = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 18, 3, 3, 1, 1), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmvNbrNetid.setStatus('mandatory')
ibmvNbrSubNetid = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 18, 3, 3, 1, 2), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmvNbrSubNetid.setStatus('mandatory')
ibmvNbrType = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 18, 3, 3, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("server", 1), ("workstation", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmvNbrType.setStatus('mandatory')
ibmvNbrIfType = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 18, 3, 3, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32))).clone(namedValues=NamedValues(("other", 1), ("regular1822", 2), ("hdh1822", 3), ("ddn-x25", 4), ("rfc877-x25", 5), ("ethernet-csmacd", 6), ("iso88023-csmacd", 7), ("iso88024-tokenBus", 8), ("iso88025-tokenRing", 9), ("iso88026-man", 10), ("starLan", 11), ("proteon-10Mbit", 12), ("proteon-80Mbit", 13), ("hyperchannel", 14), ("fddi", 15), ("lapb", 16), ("sdlc", 17), ("ds1", 18), ("cept", 19), ("basicISDN", 20), ("primaryISDN", 21), ("propPointToPointSerial", 22), ("ppp", 23), ("loopback", 24), ("eon", 25), ("ethernet-3Mbit", 26), ("nsip", 27), ("slip", 28), ("ultra", 29), ("ds3", 30), ("sip", 31), ("frame-relay", 32)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmvNbrIfType.setStatus('mandatory')
ibmvNbrRemAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 18, 3, 3, 1, 5), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmvNbrRemAddress.setStatus('mandatory')
ibmvNbrLocAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 18, 3, 3, 1, 6), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmvNbrLocAddress.setStatus('mandatory')
ibmvNbrLocSlot = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 18, 3, 3, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 7))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmvNbrLocSlot.setStatus('mandatory')
ibmvNbrLocPort = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 18, 3, 3, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 3))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmvNbrLocPort.setStatus('mandatory')
ibmvNbrAging = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 18, 3, 3, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmvNbrAging.setStatus('mandatory')
ibmvNbrFlags = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 18, 3, 3, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("permanent", 1), ("nonpermanent", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmvNbrFlags.setStatus('mandatory')
ibmvNbrRIF = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 18, 3, 3, 1, 11), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmvNbrRIF.setStatus('mandatory')
ibmvNbrIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 18, 3, 3, 1, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmvNbrIfIndex.setStatus('mandatory')
ibmvNbrMetric = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 18, 3, 3, 1, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmvNbrMetric.setStatus('mandatory')
ibmvRtConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 6, 2, 18, 4, 1))
ibmvRtCfgMax = MibScalar((1, 3, 6, 1, 4, 1, 2, 6, 2, 18, 4, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmvRtCfgMax.setStatus('mandatory')
ibmvRtCfgInFlt = MibScalar((1, 3, 6, 1, 4, 1, 2, 6, 2, 18, 4, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmvRtCfgInFlt.setStatus('mandatory')
ibmvRtCfgInFltNum = MibScalar((1, 3, 6, 1, 4, 1, 2, 6, 2, 18, 4, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmvRtCfgInFltNum.setStatus('mandatory')
ibmvRtCfgInFltTable = MibTable((1, 3, 6, 1, 4, 1, 2, 6, 2, 18, 4, 1, 4), )
if mibBuilder.loadTexts: ibmvRtCfgInFltTable.setStatus('mandatory')
ibmvRtCfgInFltEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2, 6, 2, 18, 4, 1, 4, 1), ).setIndexNames((0, "IBM6611-MIB", "ibmvRtCfgInFltNetID"), (0, "IBM6611-MIB", "ibmvRtCfgInFltIfIndex"))
if mibBuilder.loadTexts: ibmvRtCfgInFltEntry.setStatus('mandatory')
ibmvRtCfgInFltNetID = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 18, 4, 1, 4, 1, 1), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmvRtCfgInFltNetID.setStatus('mandatory')
ibmvRtCfgInFltIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 18, 4, 1, 4, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmvRtCfgInFltIfIndex.setStatus('mandatory')
ibmvRtCfgInFltMode = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 18, 4, 1, 4, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("permit", 1), ("deny", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmvRtCfgInFltMode.setStatus('mandatory')
ibmvRtCfgInFltUses = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 18, 4, 1, 4, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmvRtCfgInFltUses.setStatus('mandatory')
ibmvRtCfgOutFlt = MibScalar((1, 3, 6, 1, 4, 1, 2, 6, 2, 18, 4, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmvRtCfgOutFlt.setStatus('mandatory')
ibmvRtCfgOutFltNum = MibScalar((1, 3, 6, 1, 4, 1, 2, 6, 2, 18, 4, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmvRtCfgOutFltNum.setStatus('mandatory')
ibmvRtCfgOutFltTable = MibTable((1, 3, 6, 1, 4, 1, 2, 6, 2, 18, 4, 1, 7), )
if mibBuilder.loadTexts: ibmvRtCfgOutFltTable.setStatus('mandatory')
ibmvRtCfgOutFltEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2, 6, 2, 18, 4, 1, 7, 1), ).setIndexNames((0, "IBM6611-MIB", "ibmvRtCfgOutFltNetID"), (0, "IBM6611-MIB", "ibmvRtCfgOutFltIfIndex"))
if mibBuilder.loadTexts: ibmvRtCfgOutFltEntry.setStatus('mandatory')
ibmvRtCfgOutFltNetID = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 18, 4, 1, 7, 1, 1), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmvRtCfgOutFltNetID.setStatus('mandatory')
ibmvRtCfgOutFltIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 18, 4, 1, 7, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmvRtCfgOutFltIfIndex.setStatus('mandatory')
ibmvRtCfgOutFltMode = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 18, 4, 1, 7, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("permit", 1), ("deny", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmvRtCfgOutFltMode.setStatus('mandatory')
ibmvRtCfgOutFltUses = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 18, 4, 1, 7, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmvRtCfgOutFltUses.setStatus('mandatory')
ibmvRtCfgFlt = MibScalar((1, 3, 6, 1, 4, 1, 2, 6, 2, 18, 4, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmvRtCfgFlt.setStatus('mandatory')
ibmvRtCfgFltNum = MibScalar((1, 3, 6, 1, 4, 1, 2, 6, 2, 18, 4, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmvRtCfgFltNum.setStatus('mandatory')
ibmvRtCfgFltTable = MibTable((1, 3, 6, 1, 4, 1, 2, 6, 2, 18, 4, 1, 10), )
if mibBuilder.loadTexts: ibmvRtCfgFltTable.setStatus('mandatory')
ibmvRtCfgFltEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2, 6, 2, 18, 4, 1, 10, 1), ).setIndexNames((0, "IBM6611-MIB", "ibmvRtCfgFltNetID"))
if mibBuilder.loadTexts: ibmvRtCfgFltEntry.setStatus('mandatory')
ibmvRtCfgFltNetID = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 18, 4, 1, 10, 1, 1), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmvRtCfgFltNetID.setStatus('mandatory')
ibmvRtCfgFltMode = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 18, 4, 1, 10, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("permit", 1), ("deny", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmvRtCfgFltMode.setStatus('mandatory')
ibmvRtCfgFltUses = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 18, 4, 1, 10, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmvRtCfgFltUses.setStatus('mandatory')
ibmvRTP = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 6, 2, 18, 4, 2))
ibmvrtpUpdSents = MibScalar((1, 3, 6, 1, 4, 1, 2, 6, 2, 18, 4, 2, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmvrtpUpdSents.setStatus('mandatory')
ibmvrtpUpdRecs = MibScalar((1, 3, 6, 1, 4, 1, 2, 6, 2, 18, 4, 2, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmvrtpUpdRecs.setStatus('mandatory')
ibmvrtpReqSents = MibScalar((1, 3, 6, 1, 4, 1, 2, 6, 2, 18, 4, 2, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmvrtpReqSents.setStatus('mandatory')
ibmvrtpReqRecs = MibScalar((1, 3, 6, 1, 4, 1, 2, 6, 2, 18, 4, 2, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmvrtpReqRecs.setStatus('mandatory')
ibmvrtpResSents = MibScalar((1, 3, 6, 1, 4, 1, 2, 6, 2, 18, 4, 2, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmvrtpResSents.setStatus('mandatory')
ibmvrtpResRecs = MibScalar((1, 3, 6, 1, 4, 1, 2, 6, 2, 18, 4, 2, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmvrtpResRecs.setStatus('mandatory')
ibmvrtpRedSents = MibScalar((1, 3, 6, 1, 4, 1, 2, 6, 2, 18, 4, 2, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmvrtpRedSents.setStatus('mandatory')
ibmvrtpRedRecs = MibScalar((1, 3, 6, 1, 4, 1, 2, 6, 2, 18, 4, 2, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmvrtpRedRecs.setStatus('mandatory')
ibmvrtpHeaderError = MibScalar((1, 3, 6, 1, 4, 1, 2, 6, 2, 18, 4, 2, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmvrtpHeaderError.setStatus('mandatory')
ibmvRtNumber = MibScalar((1, 3, 6, 1, 4, 1, 2, 6, 2, 18, 4, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmvRtNumber.setStatus('mandatory')
ibmvRtTable = MibTable((1, 3, 6, 1, 4, 1, 2, 6, 2, 18, 4, 4), )
if mibBuilder.loadTexts: ibmvRtTable.setStatus('mandatory')
ibmvRtEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2, 6, 2, 18, 4, 4, 1), ).setIndexNames((0, "IBM6611-MIB", "ibmvRtNetid"))
if mibBuilder.loadTexts: ibmvRtEntry.setStatus('mandatory')
ibmvRtNetid = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 18, 4, 4, 1, 1), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmvRtNetid.setStatus('mandatory')
ibmvRtMetric = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 18, 4, 4, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmvRtMetric.setStatus('mandatory')
ibmvRtIdle = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 18, 4, 4, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmvRtIdle.setStatus('mandatory')
ibmvRtGateNetid = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 18, 4, 4, 1, 4), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmvRtGateNetid.setStatus('mandatory')
ibmvRtIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 18, 4, 4, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmvRtIfIndex.setStatus('mandatory')
ibmvRtState = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 18, 4, 4, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("permanent", 1), ("nonpermanent", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmvRtState.setStatus('mandatory')
ibmvicpExcGens = MibScalar((1, 3, 6, 1, 4, 1, 2, 6, 2, 18, 5, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmvicpExcGens.setStatus('mandatory')
ibmvicpMetricGens = MibScalar((1, 3, 6, 1, 4, 1, 2, 6, 2, 18, 5, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmvicpMetricGens.setStatus('mandatory')
ibmvicpHeaderError = MibScalar((1, 3, 6, 1, 4, 1, 2, 6, 2, 18, 5, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmvicpHeaderError.setStatus('mandatory')
ibmvFRPreassembles = MibScalar((1, 3, 6, 1, 4, 1, 2, 6, 2, 18, 6, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmvFRPreassembles.setStatus('mandatory')
ibmvFRPfragsReassembled = MibScalar((1, 3, 6, 1, 4, 1, 2, 6, 2, 18, 6, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmvFRPfragsReassembled.setStatus('mandatory')
ibmvFRPreasFails = MibScalar((1, 3, 6, 1, 4, 1, 2, 6, 2, 18, 6, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmvFRPreasFails.setStatus('mandatory')
ibmvFRPfragmented = MibScalar((1, 3, 6, 1, 4, 1, 2, 6, 2, 18, 6, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmvFRPfragmented.setStatus('mandatory')
ibmvFRPfrgCreated = MibScalar((1, 3, 6, 1, 4, 1, 2, 6, 2, 18, 6, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmvFRPfrgCreated.setStatus('mandatory')
ibmvFRPfrgFails = MibScalar((1, 3, 6, 1, 4, 1, 2, 6, 2, 18, 6, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmvFRPfrgFails.setStatus('mandatory')
ibmvPortCfgTable = MibTable((1, 3, 6, 1, 4, 1, 2, 6, 2, 18, 7, 1), )
if mibBuilder.loadTexts: ibmvPortCfgTable.setStatus('mandatory')
ibmvPortCfgEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2, 6, 2, 18, 7, 1, 1), ).setIndexNames((0, "IBM6611-MIB", "ibmvPortCfgIfIndex"))
if mibBuilder.loadTexts: ibmvPortCfgEntry.setStatus('mandatory')
ibmvPortCfgIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 18, 7, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmvPortCfgIfIndex.setStatus('mandatory')
ibmvPortCfgARP = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 18, 7, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmvPortCfgARP.setStatus('mandatory')
ibmvPortCfgServ = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 18, 7, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmvPortCfgServ.setStatus('mandatory')
ibmvPortCfgHCtoServ = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 18, 7, 1, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmvPortCfgHCtoServ.setStatus('mandatory')
ibmvPortCfgPerUpdate = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 18, 7, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2), ("na", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmvPortCfgPerUpdate.setStatus('mandatory')
ibmvPortCfgMetric = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 18, 7, 1, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmvPortCfgMetric.setStatus('mandatory')
ibmvPortCfgTR = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 18, 7, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("na", 1), ("snap", 2), ("vines-tr", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmvPortCfgTR.setStatus('mandatory')
ibmvPortCfgEN = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 18, 7, 1, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("na", 1), ("snap", 2), ("v2", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmvPortCfgEN.setStatus('mandatory')
ibmvPortCfgInFlt = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 18, 7, 1, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmvPortCfgInFlt.setStatus('mandatory')
ibmvPortCfgInFltNum = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 18, 7, 1, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmvPortCfgInFltNum.setStatus('mandatory')
ibmvPortCfgOutFlt = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 18, 7, 1, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmvPortCfgOutFlt.setStatus('mandatory')
ibmvPortCfgOutFltNum = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 18, 7, 1, 1, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmvPortCfgOutFltNum.setStatus('mandatory')
ibmvFltTable = MibTable((1, 3, 6, 1, 4, 1, 2, 6, 2, 18, 7, 2), )
if mibBuilder.loadTexts: ibmvFltTable.setStatus('mandatory')
ibmvFltEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2, 6, 2, 18, 7, 2, 1), ).setIndexNames((0, "IBM6611-MIB", "ibmvFltIfIndex"), (0, "IBM6611-MIB", "ibmvFltNo"))
if mibBuilder.loadTexts: ibmvFltEntry.setStatus('mandatory')
ibmvFltIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 18, 7, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmvFltIfIndex.setStatus('mandatory')
ibmvFltNo = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 18, 7, 2, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmvFltNo.setStatus('mandatory')
ibmvFltMode = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 18, 7, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("inbound", 1), ("outbound", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmvFltMode.setStatus('mandatory')
ibmvFltValue = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 18, 7, 2, 1, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(18, 18)).setFixedLength(18)).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmvFltValue.setStatus('mandatory')
ibmvFltMask = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 18, 7, 2, 1, 5), OctetString().subtype(subtypeSpec=ValueSizeConstraint(18, 18)).setFixedLength(18)).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmvFltMask.setStatus('mandatory')
ibmvFltType = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 18, 7, 2, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("permit", 1), ("deny", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmvFltType.setStatus('mandatory')
ibmvFltHCCompare = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 18, 7, 2, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("less-than", 1), ("less-than-equal", 2), ("equal", 3), ("greater-than-equal", 4), ("greater-than", 5), ("na", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmvFltHCCompare.setStatus('mandatory')
ibmvFltUses = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 18, 7, 2, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmvFltUses.setStatus('mandatory')
ibmvifNumber = MibScalar((1, 3, 6, 1, 4, 1, 2, 6, 2, 18, 7, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmvifNumber.setStatus('mandatory')
ibmvifTable = MibTable((1, 3, 6, 1, 4, 1, 2, 6, 2, 18, 7, 4), )
if mibBuilder.loadTexts: ibmvifTable.setStatus('mandatory')
ibmvifEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2, 6, 2, 18, 7, 4, 1), ).setIndexNames((0, "IBM6611-MIB", "ibmvifSlot"), (0, "IBM6611-MIB", "ibmvifPort"))
if mibBuilder.loadTexts: ibmvifEntry.setStatus('mandatory')
ibmvifSlot = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 18, 7, 4, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 7))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmvifSlot.setStatus('mandatory')
ibmvifPort = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 18, 7, 4, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 3))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmvifPort.setStatus('mandatory')
ibmvifDescr = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 18, 7, 4, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmvifDescr.setStatus('mandatory')
ibmvifAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 18, 7, 4, 1, 4), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmvifAddress.setStatus('mandatory')
ibmvifInPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 18, 7, 4, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmvifInPkts.setStatus('mandatory')
ibmvifInErrs = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 18, 7, 4, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmvifInErrs.setStatus('mandatory')
ibmvifOutPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 18, 7, 4, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmvifOutPkts.setStatus('mandatory')
ibmvifOutErrs = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 18, 7, 4, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmvifOutErrs.setStatus('mandatory')
ibmappnNode = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 6, 2, 13, 1))
ibmappnGeneralInfoAndCaps = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 6, 2, 13, 1, 1))
ibmappnNnUniqueInfoAndCaps = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 6, 2, 13, 1, 2))
ibmappnEnUniqueCaps = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 6, 2, 13, 1, 3))
ibmappnPortInformation = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 6, 2, 13, 1, 4))
ibmappnLinkStationInformation = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 6, 2, 13, 1, 5))
ibmappnSnmpInformation = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 6, 2, 13, 1, 6))
ibmappnMemoryUse = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 6, 2, 13, 1, 7))
ibmappnXidInformation = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 6, 2, 13, 1, 8))
ibmappnNodeCpName = MibScalar((1, 3, 6, 1, 4, 1, 2, 6, 2, 13, 1, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(3, 17))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmappnNodeCpName.setStatus('mandatory')
ibmappnNodeNetid = MibScalar((1, 3, 6, 1, 4, 1, 2, 6, 2, 13, 1, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 8))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmappnNodeNetid.setStatus('mandatory')
ibmappnNodeBlockNum = MibScalar((1, 3, 6, 1, 4, 1, 2, 6, 2, 13, 1, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(3, 3)).setFixedLength(3)).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmappnNodeBlockNum.setStatus('mandatory')
ibmappnNodeIdNum = MibScalar((1, 3, 6, 1, 4, 1, 2, 6, 2, 13, 1, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(5, 5)).setFixedLength(5)).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmappnNodeIdNum.setStatus('mandatory')
ibmappnNodeType = MibScalar((1, 3, 6, 1, 4, 1, 2, 6, 2, 13, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 4))).clone(namedValues=NamedValues(("networkNode", 1), ("endNode", 2), ("len", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmappnNodeType.setStatus('mandatory')
ibmappnNodeUpTime = MibScalar((1, 3, 6, 1, 4, 1, 2, 6, 2, 13, 1, 1, 6), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmappnNodeUpTime.setStatus('mandatory')
ibmappnNodeNegotLs = MibScalar((1, 3, 6, 1, 4, 1, 2, 6, 2, 13, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmappnNodeNegotLs.setStatus('mandatory')
ibmappnNodeSegReasm = MibScalar((1, 3, 6, 1, 4, 1, 2, 6, 2, 13, 1, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmappnNodeSegReasm.setStatus('mandatory')
ibmappnNodeBindReasm = MibScalar((1, 3, 6, 1, 4, 1, 2, 6, 2, 13, 1, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmappnNodeBindReasm.setStatus('mandatory')
ibmappnNodeParallelTg = MibScalar((1, 3, 6, 1, 4, 1, 2, 6, 2, 13, 1, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmappnNodeParallelTg.setStatus('mandatory')
ibmappnNodeService = MibScalar((1, 3, 6, 1, 4, 1, 2, 6, 2, 13, 1, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmappnNodeService.setStatus('mandatory')
ibmappnNodeAdaptiveBindPacing = MibScalar((1, 3, 6, 1, 4, 1, 2, 6, 2, 13, 1, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmappnNodeAdaptiveBindPacing.setStatus('mandatory')
ibmappnNodeNnRcvRegChar = MibScalar((1, 3, 6, 1, 4, 1, 2, 6, 2, 13, 1, 2, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmappnNodeNnRcvRegChar.setStatus('mandatory')
ibmappnNodeNnGateway = MibScalar((1, 3, 6, 1, 4, 1, 2, 6, 2, 13, 1, 2, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmappnNodeNnGateway.setStatus('mandatory')
ibmappnNodeNnCentralDirectory = MibScalar((1, 3, 6, 1, 4, 1, 2, 6, 2, 13, 1, 2, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmappnNodeNnCentralDirectory.setStatus('mandatory')
ibmappnNodeNnTreeCache = MibScalar((1, 3, 6, 1, 4, 1, 2, 6, 2, 13, 1, 2, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmappnNodeNnTreeCache.setStatus('mandatory')
ibmappnNodeNnTreeUpdate = MibScalar((1, 3, 6, 1, 4, 1, 2, 6, 2, 13, 1, 2, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmappnNodeNnTreeUpdate.setStatus('mandatory')
ibmappnNodeNnRouteAddResist = MibScalar((1, 3, 6, 1, 4, 1, 2, 6, 2, 13, 1, 2, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmappnNodeNnRouteAddResist.setStatus('mandatory')
ibmappnNodeNnIsr = MibScalar((1, 3, 6, 1, 4, 1, 2, 6, 2, 13, 1, 2, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmappnNodeNnIsr.setStatus('mandatory')
ibmappnNodeNnFrsn = MibScalar((1, 3, 6, 1, 4, 1, 2, 6, 2, 13, 1, 2, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmappnNodeNnFrsn.setStatus('mandatory')
ibmappnNodeEnSegGen = MibScalar((1, 3, 6, 1, 4, 1, 2, 6, 2, 13, 1, 3, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmappnNodeEnSegGen.setStatus('mandatory')
ibmappnNodeEnModeCosMap = MibScalar((1, 3, 6, 1, 4, 1, 2, 6, 2, 13, 1, 3, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmappnNodeEnModeCosMap.setStatus('mandatory')
ibmappnNodeEnLocateCdinit = MibScalar((1, 3, 6, 1, 4, 1, 2, 6, 2, 13, 1, 3, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmappnNodeEnLocateCdinit.setStatus('mandatory')
ibmappnNodeEnSendRegNames = MibScalar((1, 3, 6, 1, 4, 1, 2, 6, 2, 13, 1, 3, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmappnNodeEnSendRegNames.setStatus('mandatory')
ibmappnNodeEnSendRegChar = MibScalar((1, 3, 6, 1, 4, 1, 2, 6, 2, 13, 1, 3, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmappnNodeEnSendRegChar.setStatus('mandatory')
ibmappnNodePortTable = MibTable((1, 3, 6, 1, 4, 1, 2, 6, 2, 13, 1, 4, 1), )
if mibBuilder.loadTexts: ibmappnNodePortTable.setStatus('mandatory')
ibmappnNodePortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2, 6, 2, 13, 1, 4, 1, 1), ).setIndexNames((0, "IBM6611-MIB", "ibmappnNodePortName"))
if mibBuilder.loadTexts: ibmappnNodePortEntry.setStatus('mandatory')
ibmappnNodePortName = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 13, 1, 4, 1, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 8))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmappnNodePortName.setStatus('mandatory')
ibmappnNodePortState = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 13, 1, 4, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("inactive", 1), ("pendactive", 2), ("active", 3), ("pendinact", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ibmappnNodePortState.setStatus('mandatory')
ibmappnNodePortDlcType = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 13, 1, 4, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("other", 1), ("sdlc", 2), ("dls", 3), ("socket", 4), ("ethernet", 5), ("tokenRing", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmappnNodePortDlcType.setStatus('mandatory')
ibmappnNodePortPortType = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 13, 1, 4, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("leased", 1), ("switched", 2), ("sharedAccessFacilities", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmappnNodePortPortType.setStatus('mandatory')
ibmappnNodePortSIMRIM = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 13, 1, 4, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmappnNodePortSIMRIM.setStatus('mandatory')
ibmappnNodePortLsRole = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 13, 1, 4, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("primary", 1), ("secondary", 2), ("negotiable", 3), ("abm", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmappnNodePortLsRole.setStatus('mandatory')
ibmappnNodePortMaxRcvBtuSize = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 13, 1, 4, 1, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmappnNodePortMaxRcvBtuSize.setStatus('mandatory')
ibmappnNodePortMaxIframeWindow = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 13, 1, 4, 1, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmappnNodePortMaxIframeWindow.setStatus('mandatory')
ibmappnNodePortDefLsGoodXids = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 13, 1, 4, 1, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmappnNodePortDefLsGoodXids.setStatus('mandatory')
ibmappnNodePortDefLsBadXids = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 13, 1, 4, 1, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmappnNodePortDefLsBadXids.setStatus('mandatory')
ibmappnNodePortDynLsGoodXids = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 13, 1, 4, 1, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmappnNodePortDynLsGoodXids.setStatus('mandatory')
ibmappnNodePortDynLsBadXids = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 13, 1, 4, 1, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmappnNodePortDynLsBadXids.setStatus('mandatory')
ibmappnNodePortSpecific = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 13, 1, 4, 1, 1, 13), ObjectIdentifier()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmappnNodePortSpecific.setStatus('mandatory')
ibmappnNodePortIpTable = MibTable((1, 3, 6, 1, 4, 1, 2, 6, 2, 13, 1, 4, 2), )
if mibBuilder.loadTexts: ibmappnNodePortIpTable.setStatus('mandatory')
ibmappnNodePortIpEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2, 6, 2, 13, 1, 4, 2, 1), ).setIndexNames((0, "IBM6611-MIB", "ibmappnNodePortIpName"))
if mibBuilder.loadTexts: ibmappnNodePortIpEntry.setStatus('mandatory')
ibmappnNodePortIpName = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 13, 1, 4, 2, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 8))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmappnNodePortIpName.setStatus('mandatory')
ibmappnNodePortIpPortNum = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 13, 1, 4, 2, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmappnNodePortIpPortNum.setStatus('mandatory')
ibmappnNodePortDlsTable = MibTable((1, 3, 6, 1, 4, 1, 2, 6, 2, 13, 1, 4, 3), )
if mibBuilder.loadTexts: ibmappnNodePortDlsTable.setStatus('mandatory')
ibmappnNodePortDlsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2, 6, 2, 13, 1, 4, 3, 1), ).setIndexNames((0, "IBM6611-MIB", "ibmappnNodePortDlsName"))
if mibBuilder.loadTexts: ibmappnNodePortDlsEntry.setStatus('mandatory')
ibmappnNodePortDlsName = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 13, 1, 4, 3, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 8))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmappnNodePortDlsName.setStatus('mandatory')
ibmappnNodePortDlsMac = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 13, 1, 4, 3, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(6, 6)).setFixedLength(6)).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmappnNodePortDlsMac.setStatus('mandatory')
ibmappnNodePortDlsSap = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 13, 1, 4, 3, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 1)).setFixedLength(1)).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmappnNodePortDlsSap.setStatus('mandatory')
ibmappnNodePortTrTable = MibTable((1, 3, 6, 1, 4, 1, 2, 6, 2, 13, 1, 4, 4), )
if mibBuilder.loadTexts: ibmappnNodePortTrTable.setStatus('mandatory')
ibmappnNodePortTrEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2, 6, 2, 13, 1, 4, 4, 1), ).setIndexNames((0, "IBM6611-MIB", "ibmappnNodePortTrName"))
if mibBuilder.loadTexts: ibmappnNodePortTrEntry.setStatus('mandatory')
ibmappnNodePortTrName = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 13, 1, 4, 4, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 8))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmappnNodePortTrName.setStatus('mandatory')
ibmappnNodePortTrMac = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 13, 1, 4, 4, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(6, 6)).setFixedLength(6)).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmappnNodePortTrMac.setStatus('mandatory')
ibmappnNodePortTrSap = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 13, 1, 4, 4, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 1)).setFixedLength(1)).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmappnNodePortTrSap.setStatus('mandatory')
ibmappnNodePortDlcTraceTable = MibTable((1, 3, 6, 1, 4, 1, 2, 6, 2, 13, 1, 4, 5), )
if mibBuilder.loadTexts: ibmappnNodePortDlcTraceTable.setStatus('mandatory')
ibmappnNodePortDlcTraceEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2, 6, 2, 13, 1, 4, 5, 1), ).setIndexNames((0, "IBM6611-MIB", "ibmappnNodePortDlcTracPortName"), (0, "IBM6611-MIB", "ibmappnNodePortDlcTracIndex"))
if mibBuilder.loadTexts: ibmappnNodePortDlcTraceEntry.setStatus('mandatory')
ibmappnNodePortDlcTracPortName = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 13, 1, 4, 5, 1, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmappnNodePortDlcTracPortName.setStatus('mandatory')
ibmappnNodePortDlcTracIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 13, 1, 4, 5, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmappnNodePortDlcTracIndex.setStatus('mandatory')
ibmappnNodePortDlcTracDlcType = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 13, 1, 4, 5, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("other", 1), ("sdlc", 2), ("dls", 3), ("socket", 4), ("ethernet", 5), ("tokenRing", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmappnNodePortDlcTracDlcType.setStatus('mandatory')
ibmappnNodePortDlcTracLocalAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 13, 1, 4, 5, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmappnNodePortDlcTracLocalAddr.setStatus('mandatory')
ibmappnNodePortDlcTracRemoteAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 13, 1, 4, 5, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmappnNodePortDlcTracRemoteAddr.setStatus('mandatory')
ibmappnNodePortDlcTracMsgType = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 13, 1, 4, 5, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("other", 1), ("unknown", 2), ("request", 3), ("confirm", 4), ("indication", 5), ("response", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmappnNodePortDlcTracMsgType.setStatus('mandatory')
ibmappnNodePortDlcTracCmdType = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 13, 1, 4, 5, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009, 2010, 2012, 2013, 2014, 2015, 2016, 2017, 2018, 2019, 2020, 2021, 2022, 2023, 2024, 2025, 2026, 2027, 2028, 2029, 4122, 4123, 4124, 6001, 6002, 6003, 6004, 6005, 6006, 6007, 6008, 6009, 6010, 6012, 6013, 6014, 6015, 6016, 6017, 6018, 6019, 6020, 6021, 6022, 6023, 6024, 6025, 6026, 6027, 6028, 6029))).clone(namedValues=NamedValues(("testFrame", 1), ("respFrame", 2), ("curFrame", 3), ("icrFrame", 4), ("respAck", 5), ("dgrmFrame", 6), ("xidFrame", 7), ("contFrame", 8), ("contedFrame", 9), ("iFrame", 10), ("enterBusy", 12), ("exitBusy", 13), ("haltFrame", 14), ("lsHalted", 15), ("restartLs", 16), ("lsRestarted", 17), ("netBioSnq", 18), ("netBioSnr", 19), ("gnetFrame", 20), ("netdFrame", 21), ("oobFrame", 22), ("alterSap", 23), ("testRsp", 24), ("haltLsNow", 25), ("netBioAnq", 26), ("netBioAnr", 27), ("mibLsFrame", 28), ("iamOkay", 29), ("ipTestFrame", 2001), ("ipRespFrame", 2002), ("ipCurFrame", 2003), ("ipIcrFrame", 2004), ("ipRespAck", 2005), ("ipDgrmFrame", 2006), ("ipXidFrame", 2007), ("ipContFrame", 2008), ("ipContedFrame", 2009), ("ipIFrame", 2010), ("ipEnterBusy", 2012), ("ipExitBusy", 2013), ("ipHaltFrame", 2014), ("ipLsHalted", 2015), ("ipRestartLs", 2016), ("ipLsRestarted", 2017), ("ipNetBioSnq", 2018), ("ipNetBioSnr", 2019), ("ipGnetFrame", 2020), ("ipNetdFrame", 2021), ("ipOobFrame", 2022), ("ipAlterSap", 2023), ("ipTestRsp", 2024), ("ipHaltLsNow", 2025), ("ipNetBioAnq", 2026), ("ipNetBioAnr", 2027), ("ipMibLsFrame", 2028), ("ipIamOkay", 2029), ("dlsTestReq", 4122), ("dlsTestRsp", 4123), ("dlsIpm", 4124), ("trTestFrame", 6001), ("trRespFrame", 6002), ("trCurFrame", 6003), ("trIcrFrame", 6004), ("trRespAck", 6005), ("trDgrmFrame", 6006), ("trXidFrame", 6007), ("trContFrame", 6008), ("trContedFrame", 6009), ("trIFrame", 6010), ("trEnterBusy", 6012), ("trExitBusy", 6013), ("trHaltFrame", 6014), ("trLsHalted", 6015), ("trRestartLs", 6016), ("trLsRestarted", 6017), ("trNetBioSnq", 6018), ("trNetBioSnr", 6019), ("trGnetFrame", 6020), ("trNetdFrame", 6021), ("trOobFrame", 6022), ("trAlterSap", 6023), ("trTestRsp", 6024), ("trHaltLsNow", 6025), ("trNetBioAnq", 6026), ("trNetBioAnr", 6027), ("trMibLsFrame", 6028), ("trIamOkay", 6029)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmappnNodePortDlcTracCmdType.setStatus('mandatory')
ibmappnNodePortDlcTracUseWan = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 13, 1, 4, 5, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("other", 1), ("notApplicable", 2), ("useUnknown", 3), ("useWan", 4), ("useLan", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmappnNodePortDlcTracUseWan.setStatus('mandatory')
ibmappnNodeLsTable = MibTable((1, 3, 6, 1, 4, 1, 2, 6, 2, 13, 1, 5, 1), )
if mibBuilder.loadTexts: ibmappnNodeLsTable.setStatus('mandatory')
ibmappnNodeLsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2, 6, 2, 13, 1, 5, 1, 1), ).setIndexNames((0, "IBM6611-MIB", "ibmappnNodeLsName"))
if mibBuilder.loadTexts: ibmappnNodeLsEntry.setStatus('mandatory')
ibmappnNodeLsName = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 13, 1, 5, 1, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 8))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmappnNodeLsName.setStatus('mandatory')
ibmappnNodeLsPortName = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 13, 1, 5, 1, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 8))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmappnNodeLsPortName.setStatus('mandatory')
ibmappnNodeLsDlcType = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 13, 1, 5, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("other", 1), ("sdlc", 2), ("dls", 3), ("socket", 4), ("ethernet", 5), ("tokenRing", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmappnNodeLsDlcType.setStatus('mandatory')
ibmappnNodeLsDynamic = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 13, 1, 5, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmappnNodeLsDynamic.setStatus('mandatory')
ibmappnNodeLsState = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 13, 1, 5, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("inactive", 1), ("pendactive", 2), ("active", 3), ("pendinact", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ibmappnNodeLsState.setStatus('mandatory')
ibmappnNodeLsCpName = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 13, 1, 5, 1, 1, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(3, 17))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmappnNodeLsCpName.setStatus('mandatory')
ibmappnNodeLsTgNum = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 13, 1, 5, 1, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmappnNodeLsTgNum.setStatus('mandatory')
ibmappnNodeLsLimResource = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 13, 1, 5, 1, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmappnNodeLsLimResource.setStatus('mandatory')
ibmappnNodeLsMigration = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 13, 1, 5, 1, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmappnNodeLsMigration.setStatus('mandatory')
ibmappnNodeLsBlockNum = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 13, 1, 5, 1, 1, 10), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(3, 3)).setFixedLength(3)).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmappnNodeLsBlockNum.setStatus('mandatory')
ibmappnNodeLsIdNum = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 13, 1, 5, 1, 1, 11), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(5, 5)).setFixedLength(5)).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmappnNodeLsIdNum.setStatus('mandatory')
ibmappnNodeLsCpCpSession = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 13, 1, 5, 1, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmappnNodeLsCpCpSession.setStatus('mandatory')
ibmappnNodeLsTargetPacingCount = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 13, 1, 5, 1, 1, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmappnNodeLsTargetPacingCount.setStatus('mandatory')
ibmappnNodeLsMaxSendBtuSize = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 13, 1, 5, 1, 1, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmappnNodeLsMaxSendBtuSize.setStatus('mandatory')
ibmappnNodeLsEffCap = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 13, 1, 5, 1, 1, 15), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmappnNodeLsEffCap.setStatus('mandatory')
ibmappnNodeLsConnCost = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 13, 1, 5, 1, 1, 16), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmappnNodeLsConnCost.setStatus('mandatory')
ibmappnNodeLsByteCost = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 13, 1, 5, 1, 1, 17), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmappnNodeLsByteCost.setStatus('mandatory')
ibmappnNodeLsSecurity = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 13, 1, 5, 1, 1, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 32, 64, 96, 128, 160, 192))).clone(namedValues=NamedValues(("nonsecure", 1), ("publicSwitchedNetwork", 32), ("undergroundCable", 64), ("secureConduit", 96), ("guardedConduit", 128), ("encrypted", 160), ("guardedRadiation", 192)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmappnNodeLsSecurity.setStatus('mandatory')
ibmappnNodeLsDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 13, 1, 5, 1, 1, 19), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 384, 9216, 147456, 294912, 2013265920))).clone(namedValues=NamedValues(("minimum", 1), ("negligible", 384), ("terrestrial", 9216), ("packet", 147456), ("long", 294912), ("maximum", 2013265920)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmappnNodeLsDelay.setStatus('mandatory')
ibmappnNodeLsUsr1 = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 13, 1, 5, 1, 1, 20), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmappnNodeLsUsr1.setStatus('mandatory')
ibmappnNodeLsUsr2 = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 13, 1, 5, 1, 1, 21), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmappnNodeLsUsr2.setStatus('mandatory')
ibmappnNodeLsUsr3 = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 13, 1, 5, 1, 1, 22), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmappnNodeLsUsr3.setStatus('mandatory')
ibmappnNodeLsInXidBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 13, 1, 5, 1, 1, 23), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmappnNodeLsInXidBytes.setStatus('mandatory')
ibmappnNodeLsInMsgBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 13, 1, 5, 1, 1, 24), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmappnNodeLsInMsgBytes.setStatus('mandatory')
ibmappnNodeLsInXidFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 13, 1, 5, 1, 1, 25), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmappnNodeLsInXidFrames.setStatus('mandatory')
ibmappnNodeLsInMsgFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 13, 1, 5, 1, 1, 26), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmappnNodeLsInMsgFrames.setStatus('mandatory')
ibmappnNodeLsOutXidBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 13, 1, 5, 1, 1, 27), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmappnNodeLsOutXidBytes.setStatus('mandatory')
ibmappnNodeLsOutMsgBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 13, 1, 5, 1, 1, 28), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmappnNodeLsOutMsgBytes.setStatus('mandatory')
ibmappnNodeLsOutXidFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 13, 1, 5, 1, 1, 29), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmappnNodeLsOutXidFrames.setStatus('mandatory')
ibmappnNodeLsOutMsgFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 13, 1, 5, 1, 1, 30), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmappnNodeLsOutMsgFrames.setStatus('mandatory')
ibmappnNodeLsEchoRsps = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 13, 1, 5, 1, 1, 31), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmappnNodeLsEchoRsps.setStatus('mandatory')
ibmappnNodeLsCurrentDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 13, 1, 5, 1, 1, 32), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmappnNodeLsCurrentDelay.setStatus('mandatory')
ibmappnNodeLsMaxDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 13, 1, 5, 1, 1, 33), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmappnNodeLsMaxDelay.setStatus('mandatory')
ibmappnNodeLsMinDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 13, 1, 5, 1, 1, 34), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmappnNodeLsMinDelay.setStatus('mandatory')
ibmappnNodeLsMaxDelayTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 13, 1, 5, 1, 1, 35), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmappnNodeLsMaxDelayTime.setStatus('mandatory')
ibmappnNodeLsGoodXids = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 13, 1, 5, 1, 1, 36), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmappnNodeLsGoodXids.setStatus('mandatory')
ibmappnNodeLsBadXids = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 13, 1, 5, 1, 1, 37), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmappnNodeLsBadXids.setStatus('mandatory')
ibmappnNodeLsSpecific = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 13, 1, 5, 1, 1, 38), ObjectIdentifier()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmappnNodeLsSpecific.setStatus('mandatory')
ibmappnNodeLsSubState = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 13, 1, 5, 1, 1, 39), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15))).clone(namedValues=NamedValues(("inactive", 1), ("sentReqOpnstn", 2), ("pendXidExch", 3), ("sentActAs", 4), ("sentSetMode", 5), ("active", 6), ("sentDeactAsOrd", 7), ("sentDiscOrd", 8), ("sentDestroyTg", 9), ("sentCreateTg", 10), ("sentConnReq", 11), ("pendRcvConnInd", 12), ("pendSendConnRsp", 13), ("sentConnRsp", 14), ("pendDeact", 15)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmappnNodeLsSubState.setStatus('mandatory')
ibmappnNodeLsStartTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 13, 1, 5, 1, 1, 40), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmappnNodeLsStartTime.setStatus('mandatory')
ibmappnNodeLsActiveTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 13, 1, 5, 1, 1, 41), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmappnNodeLsActiveTime.setStatus('mandatory')
ibmappnNodeLsCurrentStateTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 13, 1, 5, 1, 1, 42), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmappnNodeLsCurrentStateTime.setStatus('mandatory')
ibmappnNodeLsIpTable = MibTable((1, 3, 6, 1, 4, 1, 2, 6, 2, 13, 1, 5, 2), )
if mibBuilder.loadTexts: ibmappnNodeLsIpTable.setStatus('mandatory')
ibmappnNodeLsIpEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2, 6, 2, 13, 1, 5, 2, 1), ).setIndexNames((0, "IBM6611-MIB", "ibmappnNodeLsIpName"))
if mibBuilder.loadTexts: ibmappnNodeLsIpEntry.setStatus('mandatory')
ibmappnNodeLsIpName = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 13, 1, 5, 2, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 8))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmappnNodeLsIpName.setStatus('mandatory')
ibmappnNodeLsIpState = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 13, 1, 5, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("inactive", 1), ("pendactive", 2), ("active", 3), ("pendinact", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmappnNodeLsIpState.setStatus('mandatory')
ibmappnNodeLsLocalIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 13, 1, 5, 2, 1, 3), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmappnNodeLsLocalIpAddr.setStatus('mandatory')
ibmappnNodeLsLocalIpPortNum = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 13, 1, 5, 2, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmappnNodeLsLocalIpPortNum.setStatus('mandatory')
ibmappnNodeLsRemoteIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 13, 1, 5, 2, 1, 5), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmappnNodeLsRemoteIpAddr.setStatus('mandatory')
ibmappnNodeLsRemoteIpPortNum = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 13, 1, 5, 2, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmappnNodeLsRemoteIpPortNum.setStatus('mandatory')
ibmappnNodeLsDlsTable = MibTable((1, 3, 6, 1, 4, 1, 2, 6, 2, 13, 1, 5, 3), )
if mibBuilder.loadTexts: ibmappnNodeLsDlsTable.setStatus('mandatory')
ibmappnNodeLsDlsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2, 6, 2, 13, 1, 5, 3, 1), ).setIndexNames((0, "IBM6611-MIB", "ibmappnNodeLsDlsName"))
if mibBuilder.loadTexts: ibmappnNodeLsDlsEntry.setStatus('mandatory')
ibmappnNodeLsDlsName = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 13, 1, 5, 3, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 8))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmappnNodeLsDlsName.setStatus('mandatory')
ibmappnNodeLsDlsState = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 13, 1, 5, 3, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("inactive", 1), ("pendactive", 2), ("active", 3), ("pendinact", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmappnNodeLsDlsState.setStatus('mandatory')
ibmappnNodeLsLocalDlsMac = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 13, 1, 5, 3, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(6, 6)).setFixedLength(6)).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmappnNodeLsLocalDlsMac.setStatus('mandatory')
ibmappnNodeLsLocalDlsSap = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 13, 1, 5, 3, 1, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 1)).setFixedLength(1)).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmappnNodeLsLocalDlsSap.setStatus('mandatory')
ibmappnNodeLsRemoteDlsMac = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 13, 1, 5, 3, 1, 5), OctetString().subtype(subtypeSpec=ValueSizeConstraint(6, 6)).setFixedLength(6)).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmappnNodeLsRemoteDlsMac.setStatus('mandatory')
ibmappnNodeLsRemoteDlsSap = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 13, 1, 5, 3, 1, 6), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 1)).setFixedLength(1)).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmappnNodeLsRemoteDlsSap.setStatus('mandatory')
ibmappnNodeLsTrTable = MibTable((1, 3, 6, 1, 4, 1, 2, 6, 2, 13, 1, 5, 4), )
if mibBuilder.loadTexts: ibmappnNodeLsTrTable.setStatus('mandatory')
ibmappnNodeLsTrEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2, 6, 2, 13, 1, 5, 4, 1), ).setIndexNames((0, "IBM6611-MIB", "ibmappnNodeLsTrName"))
if mibBuilder.loadTexts: ibmappnNodeLsTrEntry.setStatus('mandatory')
ibmappnNodeLsTrName = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 13, 1, 5, 4, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 8))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmappnNodeLsTrName.setStatus('mandatory')
ibmappnNodeLsTrState = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 13, 1, 5, 4, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("inactive", 1), ("pendactive", 2), ("active", 3), ("pendinact", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmappnNodeLsTrState.setStatus('mandatory')
ibmappnNodeLsLocalTrMac = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 13, 1, 5, 4, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(6, 6)).setFixedLength(6)).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmappnNodeLsLocalTrMac.setStatus('mandatory')
ibmappnNodeLsLocalTrSap = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 13, 1, 5, 4, 1, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 1)).setFixedLength(1)).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmappnNodeLsLocalTrSap.setStatus('mandatory')
ibmappnNodeLsRemoteTrMac = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 13, 1, 5, 4, 1, 5), OctetString().subtype(subtypeSpec=ValueSizeConstraint(6, 6)).setFixedLength(6)).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmappnNodeLsRemoteTrMac.setStatus('mandatory')
ibmappnNodeLsRemoteTrSap = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 13, 1, 5, 4, 1, 6), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 1)).setFixedLength(1)).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmappnNodeLsRemoteTrSap.setStatus('mandatory')
ibmappnNodeLsStatusTable = MibTable((1, 3, 6, 1, 4, 1, 2, 6, 2, 13, 1, 5, 5), )
if mibBuilder.loadTexts: ibmappnNodeLsStatusTable.setStatus('mandatory')
ibmappnNodeLsStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2, 6, 2, 13, 1, 5, 5, 1), ).setIndexNames((0, "IBM6611-MIB", "ibmappnNodeLsStatusIndex"))
if mibBuilder.loadTexts: ibmappnNodeLsStatusEntry.setStatus('mandatory')
ibmappnNodeLsStatusIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 13, 1, 5, 5, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmappnNodeLsStatusIndex.setStatus('mandatory')
ibmappnNodeLsStatusTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 13, 1, 5, 5, 1, 2), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmappnNodeLsStatusTime.setStatus('mandatory')
ibmappnNodeLsStatusLsName = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 13, 1, 5, 5, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(3, 17))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmappnNodeLsStatusLsName.setStatus('mandatory')
ibmappnNodeLsStatusCpName = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 13, 1, 5, 5, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(3, 18))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmappnNodeLsStatusCpName.setStatus('mandatory')
ibmappnNodeLsStatusNodeId = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 13, 1, 5, 5, 1, 5), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmappnNodeLsStatusNodeId.setStatus('mandatory')
ibmappnNodeLsStatusTgNum = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 13, 1, 5, 5, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 256))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmappnNodeLsStatusTgNum.setStatus('mandatory')
ibmappnNodeLsStatusGeneralSense = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 13, 1, 5, 5, 1, 7), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmappnNodeLsStatusGeneralSense.setStatus('mandatory')
ibmappnNodeLsStatusNofRetry = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 13, 1, 5, 5, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("retry", 1), ("noretry", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmappnNodeLsStatusNofRetry.setStatus('mandatory')
ibmappnNodeLsStatusEndSense = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 13, 1, 5, 5, 1, 9), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmappnNodeLsStatusEndSense.setStatus('mandatory')
ibmappnNodeLsStatusXidLocalSense = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 13, 1, 5, 5, 1, 10), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmappnNodeLsStatusXidLocalSense.setStatus('mandatory')
ibmappnNodeLsStatusXidRemoteSense = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 13, 1, 5, 5, 1, 11), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmappnNodeLsStatusXidRemoteSense.setStatus('mandatory')
ibmappnNodeLsStatusXidByteInError = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 13, 1, 5, 5, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1000))).clone(namedValues=NamedValues(("na", 1000)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmappnNodeLsStatusXidByteInError.setStatus('mandatory')
ibmappnNodeLsStatusXidBitInError = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 13, 1, 5, 5, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(8))).clone(namedValues=NamedValues(("na", 8)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmappnNodeLsStatusXidBitInError.setStatus('mandatory')
ibmappnNodeLsStatusDlcType = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 13, 1, 5, 5, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("other", 1), ("sdlc", 2), ("dls", 3), ("socket", 4), ("ethernet", 5), ("tr", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmappnNodeLsStatusDlcType.setStatus('mandatory')
ibmappnNodeLsStatusLocalAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 13, 1, 5, 5, 1, 15), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmappnNodeLsStatusLocalAddr.setStatus('mandatory')
ibmappnNodeLsStatusRemoteAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 13, 1, 5, 5, 1, 16), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmappnNodeLsStatusRemoteAddr.setStatus('mandatory')
ibmappnSnmpInPkts = MibScalar((1, 3, 6, 1, 4, 1, 2, 6, 2, 13, 1, 6, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmappnSnmpInPkts.setStatus('mandatory')
ibmappnSnmpInGetRequests = MibScalar((1, 3, 6, 1, 4, 1, 2, 6, 2, 13, 1, 6, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmappnSnmpInGetRequests.setStatus('mandatory')
ibmappnSnmpInGetNexts = MibScalar((1, 3, 6, 1, 4, 1, 2, 6, 2, 13, 1, 6, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmappnSnmpInGetNexts.setStatus('mandatory')
ibmappnSnmpInSetRequests = MibScalar((1, 3, 6, 1, 4, 1, 2, 6, 2, 13, 1, 6, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmappnSnmpInSetRequests.setStatus('mandatory')
ibmappnSnmpInTotalVars = MibScalar((1, 3, 6, 1, 4, 1, 2, 6, 2, 13, 1, 6, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmappnSnmpInTotalVars.setStatus('mandatory')
ibmappnSnmpInGetVars = MibScalar((1, 3, 6, 1, 4, 1, 2, 6, 2, 13, 1, 6, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmappnSnmpInGetVars.setStatus('mandatory')
ibmappnSnmpInGetNextVars = MibScalar((1, 3, 6, 1, 4, 1, 2, 6, 2, 13, 1, 6, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmappnSnmpInGetNextVars.setStatus('mandatory')
ibmappnSnmpInSetVars = MibScalar((1, 3, 6, 1, 4, 1, 2, 6, 2, 13, 1, 6, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmappnSnmpInSetVars.setStatus('mandatory')
ibmappnSnmpOutNoSuchNames = MibScalar((1, 3, 6, 1, 4, 1, 2, 6, 2, 13, 1, 6, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmappnSnmpOutNoSuchNames.setStatus('mandatory')
ibmappnSnmpOutGenErrs = MibScalar((1, 3, 6, 1, 4, 1, 2, 6, 2, 13, 1, 6, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmappnSnmpOutGenErrs.setStatus('mandatory')
ibmappnMemorySize = MibScalar((1, 3, 6, 1, 4, 1, 2, 6, 2, 13, 1, 7, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmappnMemorySize.setStatus('mandatory')
ibmappnMemoryUsed = MibScalar((1, 3, 6, 1, 4, 1, 2, 6, 2, 13, 1, 7, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmappnMemoryUsed.setStatus('mandatory')
ibmappnMemoryWarnThresh = MibScalar((1, 3, 6, 1, 4, 1, 2, 6, 2, 13, 1, 7, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmappnMemoryWarnThresh.setStatus('mandatory')
ibmappnMemoryCritThresh = MibScalar((1, 3, 6, 1, 4, 1, 2, 6, 2, 13, 1, 7, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmappnMemoryCritThresh.setStatus('mandatory')
ibmappnNodeDefLsGoodXids = MibScalar((1, 3, 6, 1, 4, 1, 2, 6, 2, 13, 1, 8, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmappnNodeDefLsGoodXids.setStatus('mandatory')
ibmappnNodeDefLsBadXids = MibScalar((1, 3, 6, 1, 4, 1, 2, 6, 2, 13, 1, 8, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmappnNodeDefLsBadXids.setStatus('mandatory')
ibmappnNodeDynLsGoodXids = MibScalar((1, 3, 6, 1, 4, 1, 2, 6, 2, 13, 1, 8, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmappnNodeDynLsGoodXids.setStatus('mandatory')
ibmappnNodeDynLsBadXids = MibScalar((1, 3, 6, 1, 4, 1, 2, 6, 2, 13, 1, 8, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmappnNodeDynLsBadXids.setStatus('mandatory')
ibmappnNn = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 6, 2, 13, 2))
ibmappnNnTopo = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 6, 2, 13, 2, 1))
ibmappnNnTopology = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 6, 2, 13, 2, 3))
ibmappnNnTopoMaxNodes = MibScalar((1, 3, 6, 1, 4, 1, 2, 6, 2, 13, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmappnNnTopoMaxNodes.setStatus('mandatory')
ibmappnNnTopoCurNumNodes = MibScalar((1, 3, 6, 1, 4, 1, 2, 6, 2, 13, 2, 1, 2), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmappnNnTopoCurNumNodes.setStatus('mandatory')
ibmappnNnTopoInTdus = MibScalar((1, 3, 6, 1, 4, 1, 2, 6, 2, 13, 2, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmappnNnTopoInTdus.setStatus('mandatory')
ibmappnNnTopoOutTdus = MibScalar((1, 3, 6, 1, 4, 1, 2, 6, 2, 13, 2, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmappnNnTopoOutTdus.setStatus('mandatory')
ibmappnNnTopoNodeLowRsns = MibScalar((1, 3, 6, 1, 4, 1, 2, 6, 2, 13, 2, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmappnNnTopoNodeLowRsns.setStatus('mandatory')
ibmappnNnTopoNodeEqualRsns = MibScalar((1, 3, 6, 1, 4, 1, 2, 6, 2, 13, 2, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmappnNnTopoNodeEqualRsns.setStatus('mandatory')
ibmappnNnTopoNodeGoodHighRsns = MibScalar((1, 3, 6, 1, 4, 1, 2, 6, 2, 13, 2, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmappnNnTopoNodeGoodHighRsns.setStatus('mandatory')
ibmappnNnTopoNodeBadHighRsns = MibScalar((1, 3, 6, 1, 4, 1, 2, 6, 2, 13, 2, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmappnNnTopoNodeBadHighRsns.setStatus('mandatory')
ibmappnNnTopoNodeStateUpdates = MibScalar((1, 3, 6, 1, 4, 1, 2, 6, 2, 13, 2, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmappnNnTopoNodeStateUpdates.setStatus('mandatory')
ibmappnNnTopoNodeErrors = MibScalar((1, 3, 6, 1, 4, 1, 2, 6, 2, 13, 2, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmappnNnTopoNodeErrors.setStatus('mandatory')
ibmappnNnTopoNodeTimerUpdates = MibScalar((1, 3, 6, 1, 4, 1, 2, 6, 2, 13, 2, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmappnNnTopoNodeTimerUpdates.setStatus('mandatory')
ibmappnNnTopoNodePurges = MibScalar((1, 3, 6, 1, 4, 1, 2, 6, 2, 13, 2, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmappnNnTopoNodePurges.setStatus('mandatory')
ibmappnNnTopoTgLowRsns = MibScalar((1, 3, 6, 1, 4, 1, 2, 6, 2, 13, 2, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmappnNnTopoTgLowRsns.setStatus('mandatory')
ibmappnNnTopoTgEqualRsns = MibScalar((1, 3, 6, 1, 4, 1, 2, 6, 2, 13, 2, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmappnNnTopoTgEqualRsns.setStatus('mandatory')
ibmappnNnTopoTgGoodHighRsns = MibScalar((1, 3, 6, 1, 4, 1, 2, 6, 2, 13, 2, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmappnNnTopoTgGoodHighRsns.setStatus('mandatory')
ibmappnNnTopoTgBadHighRsns = MibScalar((1, 3, 6, 1, 4, 1, 2, 6, 2, 13, 2, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmappnNnTopoTgBadHighRsns.setStatus('mandatory')
ibmappnNnTopoTgStateUpdates = MibScalar((1, 3, 6, 1, 4, 1, 2, 6, 2, 13, 2, 1, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmappnNnTopoTgStateUpdates.setStatus('mandatory')
ibmappnNnTopoTgErrors = MibScalar((1, 3, 6, 1, 4, 1, 2, 6, 2, 13, 2, 1, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmappnNnTopoTgErrors.setStatus('mandatory')
ibmappnNnTopoTgTimerUpdates = MibScalar((1, 3, 6, 1, 4, 1, 2, 6, 2, 13, 2, 1, 19), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmappnNnTopoTgTimerUpdates.setStatus('mandatory')
ibmappnNnTopoTgPurges = MibScalar((1, 3, 6, 1, 4, 1, 2, 6, 2, 13, 2, 1, 20), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmappnNnTopoTgPurges.setStatus('mandatory')
ibmappnNnTopoTotalRouteCalcs = MibScalar((1, 3, 6, 1, 4, 1, 2, 6, 2, 13, 2, 1, 21), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmappnNnTopoTotalRouteCalcs.setStatus('mandatory')
ibmappnNnTopoTotalRouteRejs = MibScalar((1, 3, 6, 1, 4, 1, 2, 6, 2, 13, 2, 1, 22), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmappnNnTopoTotalRouteRejs.setStatus('mandatory')
ibmappnNnTopoRouteTable = MibTable((1, 3, 6, 1, 4, 1, 2, 6, 2, 13, 2, 1, 23), )
if mibBuilder.loadTexts: ibmappnNnTopoRouteTable.setStatus('mandatory')
ibmappnNnTopoRouteEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2, 6, 2, 13, 2, 1, 23, 1), ).setIndexNames((0, "IBM6611-MIB", "ibmappnNnTopoRouteCos"))
if mibBuilder.loadTexts: ibmappnNnTopoRouteEntry.setStatus('mandatory')
ibmappnNnTopoRouteCos = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 13, 2, 1, 23, 1, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmappnNnTopoRouteCos.setStatus('mandatory')
ibmappnNnTopoRouteTrees = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 13, 2, 1, 23, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmappnNnTopoRouteTrees.setStatus('mandatory')
ibmappnNnTopoRouteCalcs = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 13, 2, 1, 23, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmappnNnTopoRouteCalcs.setStatus('mandatory')
ibmappnNnTopoRouteRejs = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 13, 2, 1, 23, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmappnNnTopoRouteRejs.setStatus('mandatory')
ibmappnNnAdjNodeTable = MibTable((1, 3, 6, 1, 4, 1, 2, 6, 2, 13, 2, 2), )
if mibBuilder.loadTexts: ibmappnNnAdjNodeTable.setStatus('mandatory')
ibmappnNnAdjNodeEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2, 6, 2, 13, 2, 2, 1), ).setIndexNames((0, "IBM6611-MIB", "ibmappnNnAdjNodeAdjName"))
if mibBuilder.loadTexts: ibmappnNnAdjNodeEntry.setStatus('mandatory')
ibmappnNnAdjNodeAdjName = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 13, 2, 2, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(3, 17))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmappnNnAdjNodeAdjName.setStatus('mandatory')
ibmappnNnAdjNodeCpCpSessStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 13, 2, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("active", 1), ("conLoserActive", 2), ("conWinnerActive", 3), ("inactive", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmappnNnAdjNodeCpCpSessStatus.setStatus('mandatory')
ibmappnNnAdjNodeOutOfSeqTdus = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 13, 2, 2, 1, 3), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmappnNnAdjNodeOutOfSeqTdus.setStatus('mandatory')
ibmappnNnAdjNodeLastFrsnSent = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 13, 2, 2, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmappnNnAdjNodeLastFrsnSent.setStatus('mandatory')
ibmappnNnAdjNodeLastFrsnRcvd = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 13, 2, 2, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmappnNnAdjNodeLastFrsnRcvd.setStatus('mandatory')
ibmappnNnTopologyTable = MibTable((1, 3, 6, 1, 4, 1, 2, 6, 2, 13, 2, 3, 1), )
if mibBuilder.loadTexts: ibmappnNnTopologyTable.setStatus('mandatory')
ibmappnNnTopologyEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2, 6, 2, 13, 2, 3, 1, 1), ).setIndexNames((0, "IBM6611-MIB", "ibmappnNnNodeName"))
if mibBuilder.loadTexts: ibmappnNnTopologyEntry.setStatus('mandatory')
ibmappnNnNodeName = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 13, 2, 3, 1, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(3, 17))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmappnNnNodeName.setStatus('mandatory')
ibmappnNnNodeFrsn = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 13, 2, 3, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmappnNnNodeFrsn.setStatus('mandatory')
ibmappnNnNodeEntryTimeLeft = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 13, 2, 3, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 31))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmappnNnNodeEntryTimeLeft.setStatus('mandatory')
ibmappnNnNodeType = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 13, 2, 3, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 3))).clone(namedValues=NamedValues(("networknode", 1), ("virtualnode", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmappnNnNodeType.setStatus('mandatory')
ibmappnNnNodeRsn = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 13, 2, 3, 1, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmappnNnNodeRsn.setStatus('mandatory')
ibmappnNnNodeRouteAddResist = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 13, 2, 3, 1, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmappnNnNodeRouteAddResist.setStatus('mandatory')
ibmappnNnNodeCongested = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 13, 2, 3, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmappnNnNodeCongested.setStatus('mandatory')
ibmappnNnNodeIsrDepleted = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 13, 2, 3, 1, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmappnNnNodeIsrDepleted.setStatus('mandatory')
ibmappnNnNodeEndptDepleted = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 13, 2, 3, 1, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmappnNnNodeEndptDepleted.setStatus('mandatory')
ibmappnNnNodeQuiescing = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 13, 2, 3, 1, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmappnNnNodeQuiescing.setStatus('mandatory')
ibmappnNnNodeGateway = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 13, 2, 3, 1, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmappnNnNodeGateway.setStatus('mandatory')
ibmappnNnNodeCentralDirectory = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 13, 2, 3, 1, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmappnNnNodeCentralDirectory.setStatus('mandatory')
ibmappnNnNodeIsr = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 13, 2, 3, 1, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmappnNnNodeIsr.setStatus('mandatory')
ibmappnNnNodeChainSupport = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 13, 2, 3, 1, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmappnNnNodeChainSupport.setStatus('mandatory')
ibmappnNnTgTopologyTable = MibTable((1, 3, 6, 1, 4, 1, 2, 6, 2, 13, 2, 3, 2), )
if mibBuilder.loadTexts: ibmappnNnTgTopologyTable.setStatus('mandatory')
ibmappnNnTgTopologyEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2, 6, 2, 13, 2, 3, 2, 1), ).setIndexNames((0, "IBM6611-MIB", "ibmappnNnTgOwner"), (0, "IBM6611-MIB", "ibmappnNnTgDest"), (0, "IBM6611-MIB", "ibmappnNnTgNum"))
if mibBuilder.loadTexts: ibmappnNnTgTopologyEntry.setStatus('mandatory')
ibmappnNnTgOwner = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 13, 2, 3, 2, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(3, 17))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmappnNnTgOwner.setStatus('mandatory')
ibmappnNnTgDest = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 13, 2, 3, 2, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(3, 17))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmappnNnTgDest.setStatus('mandatory')
ibmappnNnTgNum = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 13, 2, 3, 2, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmappnNnTgNum.setStatus('mandatory')
ibmappnNnTgFrsn = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 13, 2, 3, 2, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmappnNnTgFrsn.setStatus('mandatory')
ibmappnNnTgEntryTimeLeft = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 13, 2, 3, 2, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 31))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmappnNnTgEntryTimeLeft.setStatus('mandatory')
ibmappnNnTgDestVirtual = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 13, 2, 3, 2, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmappnNnTgDestVirtual.setStatus('mandatory')
ibmappnNnTgDlcData = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 13, 2, 3, 2, 1, 7), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 9))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmappnNnTgDlcData.setStatus('mandatory')
ibmappnNnTgRsn = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 13, 2, 3, 2, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmappnNnTgRsn.setStatus('mandatory')
ibmappnNnTgOperational = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 13, 2, 3, 2, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmappnNnTgOperational.setStatus('mandatory')
ibmappnNnTgQuiescing = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 13, 2, 3, 2, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmappnNnTgQuiescing.setStatus('mandatory')
ibmappnNnTgCpCpSession = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 13, 2, 3, 2, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmappnNnTgCpCpSession.setStatus('mandatory')
ibmappnNnTgEffCap = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 13, 2, 3, 2, 1, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmappnNnTgEffCap.setStatus('mandatory')
ibmappnNnTgConnCost = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 13, 2, 3, 2, 1, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmappnNnTgConnCost.setStatus('mandatory')
ibmappnNnTgByteCost = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 13, 2, 3, 2, 1, 14), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmappnNnTgByteCost.setStatus('mandatory')
ibmappnNnTgSecurity = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 13, 2, 3, 2, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 32, 64, 96, 128, 160, 192))).clone(namedValues=NamedValues(("nonsecure", 1), ("publicSwitchedNetwork", 32), ("undergroundCable", 64), ("secureConduit", 96), ("guardedConduit", 128), ("encrypted", 160), ("guardedRadiation", 192)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmappnNnTgSecurity.setStatus('mandatory')
ibmappnNnTgDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 13, 2, 3, 2, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 384, 9216, 147456, 294912, 2013265920))).clone(namedValues=NamedValues(("minimum", 1), ("negligible", 384), ("terrestrial", 9216), ("packet", 147456), ("long", 294912), ("maximum", 2013265920)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmappnNnTgDelay.setStatus('mandatory')
ibmappnNnTgModemClass = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 13, 2, 3, 2, 1, 17), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmappnNnTgModemClass.setStatus('mandatory')
ibmappnNnTgUsr1 = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 13, 2, 3, 2, 1, 18), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmappnNnTgUsr1.setStatus('mandatory')
ibmappnNnTgUsr2 = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 13, 2, 3, 2, 1, 19), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmappnNnTgUsr2.setStatus('mandatory')
ibmappnNnTgUsr3 = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 13, 2, 3, 2, 1, 20), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmappnNnTgUsr3.setStatus('mandatory')
ibmappnNnTopologyFRTable = MibTable((1, 3, 6, 1, 4, 1, 2, 6, 2, 13, 2, 3, 3), )
if mibBuilder.loadTexts: ibmappnNnTopologyFRTable.setStatus('mandatory')
ibmappnNnTopologyFREntry = MibTableRow((1, 3, 6, 1, 4, 1, 2, 6, 2, 13, 2, 3, 3, 1), ).setIndexNames((0, "IBM6611-MIB", "ibmappnNnNodeFRFrsn"), (0, "IBM6611-MIB", "ibmappnNnNodeFRName"))
if mibBuilder.loadTexts: ibmappnNnTopologyFREntry.setStatus('mandatory')
ibmappnNnNodeFRName = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 13, 2, 3, 3, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(3, 17))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmappnNnNodeFRName.setStatus('mandatory')
ibmappnNnNodeFRFrsn = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 13, 2, 3, 3, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmappnNnNodeFRFrsn.setStatus('mandatory')
ibmappnNnNodeFREntryTimeLeft = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 13, 2, 3, 3, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 31))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmappnNnNodeFREntryTimeLeft.setStatus('mandatory')
ibmappnNnNodeFRType = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 13, 2, 3, 3, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 3))).clone(namedValues=NamedValues(("networknode", 1), ("virtualnode", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmappnNnNodeFRType.setStatus('mandatory')
ibmappnNnNodeFRRsn = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 13, 2, 3, 3, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmappnNnNodeFRRsn.setStatus('mandatory')
ibmappnNnNodeFRRouteAddResist = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 13, 2, 3, 3, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmappnNnNodeFRRouteAddResist.setStatus('mandatory')
ibmappnNnNodeFRCongested = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 13, 2, 3, 3, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmappnNnNodeFRCongested.setStatus('mandatory')
ibmappnNnNodeFRIsrDepleted = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 13, 2, 3, 3, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmappnNnNodeFRIsrDepleted.setStatus('mandatory')
ibmappnNnNodeFREndptDepleted = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 13, 2, 3, 3, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmappnNnNodeFREndptDepleted.setStatus('mandatory')
ibmappnNnNodeFRQuiescing = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 13, 2, 3, 3, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmappnNnNodeFRQuiescing.setStatus('mandatory')
ibmappnNnNodeFRGateway = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 13, 2, 3, 3, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmappnNnNodeFRGateway.setStatus('mandatory')
ibmappnNnNodeFRCentralDirectory = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 13, 2, 3, 3, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmappnNnNodeFRCentralDirectory.setStatus('mandatory')
ibmappnNnNodeFRIsr = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 13, 2, 3, 3, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmappnNnNodeFRIsr.setStatus('mandatory')
ibmappnNnNodeFRChainSupport = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 13, 2, 3, 3, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmappnNnNodeFRChainSupport.setStatus('mandatory')
ibmappnNnTgTopologyFRTable = MibTable((1, 3, 6, 1, 4, 1, 2, 6, 2, 13, 2, 3, 4), )
if mibBuilder.loadTexts: ibmappnNnTgTopologyFRTable.setStatus('mandatory')
ibmappnNnTgTopologyFREntry = MibTableRow((1, 3, 6, 1, 4, 1, 2, 6, 2, 13, 2, 3, 4, 1), ).setIndexNames((0, "IBM6611-MIB", "ibmappnNnTgFRFrsn"), (0, "IBM6611-MIB", "ibmappnNnTgFROwner"), (0, "IBM6611-MIB", "ibmappnNnTgFRDest"), (0, "IBM6611-MIB", "ibmappnNnTgFRNum"))
if mibBuilder.loadTexts: ibmappnNnTgTopologyFREntry.setStatus('mandatory')
ibmappnNnTgFROwner = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 13, 2, 3, 4, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(3, 17))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmappnNnTgFROwner.setStatus('mandatory')
ibmappnNnTgFRDest = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 13, 2, 3, 4, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(3, 17))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmappnNnTgFRDest.setStatus('mandatory')
ibmappnNnTgFRNum = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 13, 2, 3, 4, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmappnNnTgFRNum.setStatus('mandatory')
ibmappnNnTgFRFrsn = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 13, 2, 3, 4, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmappnNnTgFRFrsn.setStatus('mandatory')
ibmappnNnTgFREntryTimeLeft = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 13, 2, 3, 4, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 31))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmappnNnTgFREntryTimeLeft.setStatus('mandatory')
ibmappnNnTgFRDestVirtual = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 13, 2, 3, 4, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmappnNnTgFRDestVirtual.setStatus('mandatory')
ibmappnNnTgFRDlcData = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 13, 2, 3, 4, 1, 7), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 9))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmappnNnTgFRDlcData.setStatus('mandatory')
ibmappnNnTgFRRsn = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 13, 2, 3, 4, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmappnNnTgFRRsn.setStatus('mandatory')
ibmappnNnTgFROperational = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 13, 2, 3, 4, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmappnNnTgFROperational.setStatus('mandatory')
ibmappnNnTgFRQuiescing = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 13, 2, 3, 4, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmappnNnTgFRQuiescing.setStatus('mandatory')
ibmappnNnTgFRCpCpSession = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 13, 2, 3, 4, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmappnNnTgFRCpCpSession.setStatus('mandatory')
ibmappnNnTgFREffCap = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 13, 2, 3, 4, 1, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmappnNnTgFREffCap.setStatus('mandatory')
ibmappnNnTgFRConnCost = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 13, 2, 3, 4, 1, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmappnNnTgFRConnCost.setStatus('mandatory')
ibmappnNnTgFRByteCost = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 13, 2, 3, 4, 1, 14), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmappnNnTgFRByteCost.setStatus('mandatory')
ibmappnNnTgFRSecurity = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 13, 2, 3, 4, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 32, 64, 96, 128, 160, 192))).clone(namedValues=NamedValues(("nonsecure", 1), ("publicSwitchedNetwork", 32), ("undergroundCable", 64), ("secureConduit", 96), ("guardedConduit", 128), ("encrypted", 160), ("guardedRadiation", 192)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmappnNnTgFRSecurity.setStatus('mandatory')
ibmappnNnTgFRDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 13, 2, 3, 4, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 384, 9216, 147456, 294912, 2013265920))).clone(namedValues=NamedValues(("minimum", 1), ("negligible", 384), ("terrestrial", 9216), ("packet", 147456), ("long", 294912), ("maximum", 2013265920)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmappnNnTgFRDelay.setStatus('mandatory')
ibmappnNnTgFRModemClass = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 13, 2, 3, 4, 1, 17), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmappnNnTgFRModemClass.setStatus('mandatory')
ibmappnNnTgFRUsr1 = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 13, 2, 3, 4, 1, 18), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmappnNnTgFRUsr1.setStatus('mandatory')
ibmappnNnTgFRUsr2 = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 13, 2, 3, 4, 1, 19), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmappnNnTgFRUsr2.setStatus('mandatory')
ibmappnNnTgFRUsr3 = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 13, 2, 3, 4, 1, 20), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmappnNnTgFRUsr3.setStatus('mandatory')
ibmappnLocalTopology = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 6, 2, 13, 3))
ibmappnLocalThisNode = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 6, 2, 13, 3, 1))
ibmappnLocalGeneral = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 6, 2, 13, 3, 1, 1))
ibmappnLocalNnSpecific = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 6, 2, 13, 3, 1, 2))
ibmappnLocalTg = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 6, 2, 13, 3, 1, 3))
ibmappnLocalEnTopology = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 6, 2, 13, 3, 2))
ibmappnLocalNodeName = MibScalar((1, 3, 6, 1, 4, 1, 2, 6, 2, 13, 3, 1, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(3, 17))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmappnLocalNodeName.setStatus('mandatory')
ibmappnLocalNodeType = MibScalar((1, 3, 6, 1, 4, 1, 2, 6, 2, 13, 3, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 4))).clone(namedValues=NamedValues(("networknode", 1), ("endnode", 2), ("len", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmappnLocalNodeType.setStatus('mandatory')
ibmappnLocalNnRsn = MibScalar((1, 3, 6, 1, 4, 1, 2, 6, 2, 13, 3, 1, 2, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmappnLocalNnRsn.setStatus('mandatory')
ibmappnLocalNnRouteAddResist = MibScalar((1, 3, 6, 1, 4, 1, 2, 6, 2, 13, 3, 1, 2, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmappnLocalNnRouteAddResist.setStatus('mandatory')
ibmappnLocalNnCongested = MibScalar((1, 3, 6, 1, 4, 1, 2, 6, 2, 13, 3, 1, 2, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmappnLocalNnCongested.setStatus('mandatory')
ibmappnLocalNnIsrDepleted = MibScalar((1, 3, 6, 1, 4, 1, 2, 6, 2, 13, 3, 1, 2, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmappnLocalNnIsrDepleted.setStatus('mandatory')
ibmappnLocalNnEndptDepleted = MibScalar((1, 3, 6, 1, 4, 1, 2, 6, 2, 13, 3, 1, 2, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmappnLocalNnEndptDepleted.setStatus('mandatory')
ibmappnLocalNnQuiescing = MibScalar((1, 3, 6, 1, 4, 1, 2, 6, 2, 13, 3, 1, 2, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmappnLocalNnQuiescing.setStatus('mandatory')
ibmappnLocalNnGateway = MibScalar((1, 3, 6, 1, 4, 1, 2, 6, 2, 13, 3, 1, 2, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmappnLocalNnGateway.setStatus('mandatory')
ibmappnLocalNnCentralDirectory = MibScalar((1, 3, 6, 1, 4, 1, 2, 6, 2, 13, 3, 1, 2, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmappnLocalNnCentralDirectory.setStatus('mandatory')
ibmappnLocalNnIsr = MibScalar((1, 3, 6, 1, 4, 1, 2, 6, 2, 13, 3, 1, 2, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmappnLocalNnIsr.setStatus('mandatory')
ibmappnLocalNnChainSupport = MibScalar((1, 3, 6, 1, 4, 1, 2, 6, 2, 13, 3, 1, 2, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmappnLocalNnChainSupport.setStatus('mandatory')
ibmappnLocalNnFrsn = MibScalar((1, 3, 6, 1, 4, 1, 2, 6, 2, 13, 3, 1, 2, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmappnLocalNnFrsn.setStatus('mandatory')
ibmappnLocalTgTable = MibTable((1, 3, 6, 1, 4, 1, 2, 6, 2, 13, 3, 1, 3, 1), )
if mibBuilder.loadTexts: ibmappnLocalTgTable.setStatus('mandatory')
ibmappnLocalTgEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2, 6, 2, 13, 3, 1, 3, 1, 1), ).setIndexNames((0, "IBM6611-MIB", "ibmappnLocalTgDest"), (0, "IBM6611-MIB", "ibmappnLocalTgNum"))
if mibBuilder.loadTexts: ibmappnLocalTgEntry.setStatus('mandatory')
ibmappnLocalTgDest = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 13, 3, 1, 3, 1, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(3, 17))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmappnLocalTgDest.setStatus('mandatory')
ibmappnLocalTgNum = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 13, 3, 1, 3, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmappnLocalTgNum.setStatus('mandatory')
ibmappnLocalTgDestVirtual = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 13, 3, 1, 3, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmappnLocalTgDestVirtual.setStatus('mandatory')
ibmappnLocalTgDlcData = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 13, 3, 1, 3, 1, 1, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 9))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmappnLocalTgDlcData.setStatus('mandatory')
ibmappnLocalTgRsn = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 13, 3, 1, 3, 1, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmappnLocalTgRsn.setStatus('mandatory')
ibmappnLocalTgQuiescing = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 13, 3, 1, 3, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmappnLocalTgQuiescing.setStatus('mandatory')
ibmappnLocalTgOperational = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 13, 3, 1, 3, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmappnLocalTgOperational.setStatus('mandatory')
ibmappnLocalTgCpCpSession = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 13, 3, 1, 3, 1, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmappnLocalTgCpCpSession.setStatus('mandatory')
ibmappnLocalTgEffCap = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 13, 3, 1, 3, 1, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmappnLocalTgEffCap.setStatus('mandatory')
ibmappnLocalTgConnCost = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 13, 3, 1, 3, 1, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmappnLocalTgConnCost.setStatus('mandatory')
ibmappnLocalTgByteCost = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 13, 3, 1, 3, 1, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmappnLocalTgByteCost.setStatus('mandatory')
ibmappnLocalTgSecurity = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 13, 3, 1, 3, 1, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 32, 64, 96, 128, 160, 192))).clone(namedValues=NamedValues(("nonsecure", 1), ("publicSwitchedNetwork", 32), ("undergroundCable", 64), ("secureConduit", 96), ("guardedConduit", 128), ("encrypted", 160), ("guardedRadiation", 192)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmappnLocalTgSecurity.setStatus('mandatory')
ibmappnLocalTgDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 13, 3, 1, 3, 1, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 384, 9216, 147456, 294912, 2013265920))).clone(namedValues=NamedValues(("minimum", 1), ("negligible", 384), ("terrestrial", 9216), ("packet", 147456), ("long", 294912), ("maximum", 2013265920)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmappnLocalTgDelay.setStatus('mandatory')
ibmappnLocalTgModemClass = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 13, 3, 1, 3, 1, 1, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmappnLocalTgModemClass.setStatus('mandatory')
ibmappnLocalTgUsr1 = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 13, 3, 1, 3, 1, 1, 15), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmappnLocalTgUsr1.setStatus('mandatory')
ibmappnLocalTgUsr2 = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 13, 3, 1, 3, 1, 1, 16), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmappnLocalTgUsr2.setStatus('mandatory')
ibmappnLocalTgUsr3 = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 13, 3, 1, 3, 1, 1, 17), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmappnLocalTgUsr3.setStatus('mandatory')
ibmappnLocalEnTable = MibTable((1, 3, 6, 1, 4, 1, 2, 6, 2, 13, 3, 2, 1), )
if mibBuilder.loadTexts: ibmappnLocalEnTable.setStatus('mandatory')
ibmappnLocalEnEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2, 6, 2, 13, 3, 2, 1, 1), ).setIndexNames((0, "IBM6611-MIB", "ibmappnLocalEnName"))
if mibBuilder.loadTexts: ibmappnLocalEnEntry.setStatus('mandatory')
ibmappnLocalEnName = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 13, 3, 2, 1, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(3, 17))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmappnLocalEnName.setStatus('mandatory')
ibmappnLocalEnEntryTimeLeft = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 13, 3, 2, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 31))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmappnLocalEnEntryTimeLeft.setStatus('mandatory')
ibmappnLocalEnType = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 13, 3, 2, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 4))).clone(namedValues=NamedValues(("endnode", 2), ("len", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmappnLocalEnType.setStatus('mandatory')
ibmappnLocalEnTgTable = MibTable((1, 3, 6, 1, 4, 1, 2, 6, 2, 13, 3, 2, 2), )
if mibBuilder.loadTexts: ibmappnLocalEnTgTable.setStatus('mandatory')
ibmappnLocalEnTgEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2, 6, 2, 13, 3, 2, 2, 1), ).setIndexNames((0, "IBM6611-MIB", "ibmappnLocalEnTgOrigin"), (0, "IBM6611-MIB", "ibmappnLocalEnTgDest"), (0, "IBM6611-MIB", "ibmappnLocalEnTgNum"))
if mibBuilder.loadTexts: ibmappnLocalEnTgEntry.setStatus('mandatory')
ibmappnLocalEnTgOrigin = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 13, 3, 2, 2, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(3, 17))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmappnLocalEnTgOrigin.setStatus('mandatory')
ibmappnLocalEnTgDest = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 13, 3, 2, 2, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(3, 17))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmappnLocalEnTgDest.setStatus('mandatory')
ibmappnLocalEnTgNum = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 13, 3, 2, 2, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmappnLocalEnTgNum.setStatus('mandatory')
ibmappnLocalEnTgEntryTimeLeft = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 13, 3, 2, 2, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 31))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmappnLocalEnTgEntryTimeLeft.setStatus('mandatory')
ibmappnLocalEnTgDestVirtual = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 13, 3, 2, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmappnLocalEnTgDestVirtual.setStatus('mandatory')
ibmappnLocalEnTgDlcData = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 13, 3, 2, 2, 1, 6), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmappnLocalEnTgDlcData.setStatus('mandatory')
ibmappnLocalEnTgOperational = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 13, 3, 2, 2, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmappnLocalEnTgOperational.setStatus('mandatory')
ibmappnLocalEnTgCpCpSession = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 13, 3, 2, 2, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmappnLocalEnTgCpCpSession.setStatus('mandatory')
ibmappnLocalEnTgEffCap = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 13, 3, 2, 2, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmappnLocalEnTgEffCap.setStatus('mandatory')
ibmappnLocalEnTgConnCost = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 13, 3, 2, 2, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmappnLocalEnTgConnCost.setStatus('mandatory')
ibmappnLocalEnTgByteCost = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 13, 3, 2, 2, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmappnLocalEnTgByteCost.setStatus('mandatory')
ibmappnLocalEnTgSecurity = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 13, 3, 2, 2, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 32, 64, 96, 128, 160, 192))).clone(namedValues=NamedValues(("nonsecure", 1), ("publicSwitchedNetwork", 32), ("undergroundCable", 64), ("secureConduit", 96), ("guardedConduit", 128), ("encrypted", 160), ("guardedRadiation", 192)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmappnLocalEnTgSecurity.setStatus('mandatory')
ibmappnLocalEnTgDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 13, 3, 2, 2, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 384, 9216, 147456, 294912, 2013265920))).clone(namedValues=NamedValues(("minimum", 1), ("negligible", 384), ("terrestrial", 9216), ("packet", 147456), ("long", 294912), ("maximum", 2013265920)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmappnLocalEnTgDelay.setStatus('mandatory')
ibmappnLocalEnTgModemClass = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 13, 3, 2, 2, 1, 14), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmappnLocalEnTgModemClass.setStatus('mandatory')
ibmappnLocalEnTgUsr1 = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 13, 3, 2, 2, 1, 15), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmappnLocalEnTgUsr1.setStatus('mandatory')
ibmappnLocalEnTgUsr2 = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 13, 3, 2, 2, 1, 16), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmappnLocalEnTgUsr2.setStatus('mandatory')
ibmappnLocalEnTgUsr3 = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 13, 3, 2, 2, 1, 17), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmappnLocalEnTgUsr3.setStatus('mandatory')
ibmappnDir = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 6, 2, 13, 5))
ibmappnDirPerf = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 6, 2, 13, 5, 1))
ibmappnDirMaxCaches = MibScalar((1, 3, 6, 1, 4, 1, 2, 6, 2, 13, 5, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmappnDirMaxCaches.setStatus('mandatory')
ibmappnDirCurCaches = MibScalar((1, 3, 6, 1, 4, 1, 2, 6, 2, 13, 5, 1, 2), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmappnDirCurCaches.setStatus('mandatory')
ibmappnDirCurHomeEntries = MibScalar((1, 3, 6, 1, 4, 1, 2, 6, 2, 13, 5, 1, 3), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmappnDirCurHomeEntries.setStatus('mandatory')
ibmappnDirRegEntries = MibScalar((1, 3, 6, 1, 4, 1, 2, 6, 2, 13, 5, 1, 4), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmappnDirRegEntries.setStatus('mandatory')
ibmappnDirInLocates = MibScalar((1, 3, 6, 1, 4, 1, 2, 6, 2, 13, 5, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmappnDirInLocates.setStatus('mandatory')
ibmappnDirInBcastLocates = MibScalar((1, 3, 6, 1, 4, 1, 2, 6, 2, 13, 5, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmappnDirInBcastLocates.setStatus('mandatory')
ibmappnDirOutLocates = MibScalar((1, 3, 6, 1, 4, 1, 2, 6, 2, 13, 5, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmappnDirOutLocates.setStatus('mandatory')
ibmappnDirOutBcastLocates = MibScalar((1, 3, 6, 1, 4, 1, 2, 6, 2, 13, 5, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmappnDirOutBcastLocates.setStatus('mandatory')
ibmappnDirNotFoundLocates = MibScalar((1, 3, 6, 1, 4, 1, 2, 6, 2, 13, 5, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmappnDirNotFoundLocates.setStatus('mandatory')
ibmappnDirNotFoundBcastLocates = MibScalar((1, 3, 6, 1, 4, 1, 2, 6, 2, 13, 5, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmappnDirNotFoundBcastLocates.setStatus('mandatory')
ibmappnDirLocateOutstands = MibScalar((1, 3, 6, 1, 4, 1, 2, 6, 2, 13, 5, 1, 11), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmappnDirLocateOutstands.setStatus('mandatory')
ibmappnDirTable = MibTable((1, 3, 6, 1, 4, 1, 2, 6, 2, 13, 5, 2), )
if mibBuilder.loadTexts: ibmappnDirTable.setStatus('mandatory')
ibmappnDirEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2, 6, 2, 13, 5, 2, 1), ).setIndexNames((0, "IBM6611-MIB", "ibmappnDirLuName"))
if mibBuilder.loadTexts: ibmappnDirEntry.setStatus('mandatory')
ibmappnDirLuName = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 13, 5, 2, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(3, 17))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmappnDirLuName.setStatus('mandatory')
ibmappnDirServerName = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 13, 5, 2, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(3, 17))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmappnDirServerName.setStatus('mandatory')
ibmappnDirLuOwnerName = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 13, 5, 2, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(3, 17))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmappnDirLuOwnerName.setStatus('mandatory')
ibmappnDirLuLocation = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 13, 5, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("local", 1), ("domain", 2), ("xdomain", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmappnDirLuLocation.setStatus('mandatory')
ibmappnDirType = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 13, 5, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("home", 1), ("cache", 2), ("registered", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmappnDirType.setStatus('mandatory')
ibmappnDirWildCard = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 13, 5, 2, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("other", 1), ("explicit-entry", 2), ("partial-wildcard", 3), ("full-wildcard", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmappnDirWildCard.setStatus('mandatory')
ibmappnCos = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 6, 2, 13, 6))
ibmappnCosModeTable = MibTable((1, 3, 6, 1, 4, 1, 2, 6, 2, 13, 6, 1), )
if mibBuilder.loadTexts: ibmappnCosModeTable.setStatus('mandatory')
ibmappnCosModeEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2, 6, 2, 13, 6, 1, 1), ).setIndexNames((0, "IBM6611-MIB", "ibmappnCosModeName"))
if mibBuilder.loadTexts: ibmappnCosModeEntry.setStatus('mandatory')
ibmappnCosModeName = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 13, 6, 1, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 8))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmappnCosModeName.setStatus('mandatory')
ibmappnCosModeCosName = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 13, 6, 1, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 8))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmappnCosModeCosName.setStatus('mandatory')
ibmappnCosNameTable = MibTable((1, 3, 6, 1, 4, 1, 2, 6, 2, 13, 6, 2), )
if mibBuilder.loadTexts: ibmappnCosNameTable.setStatus('mandatory')
ibmappnCosNameEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2, 6, 2, 13, 6, 2, 1), ).setIndexNames((0, "IBM6611-MIB", "ibmappnCosName"))
if mibBuilder.loadTexts: ibmappnCosNameEntry.setStatus('mandatory')
ibmappnCosName = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 13, 6, 2, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 8))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmappnCosName.setStatus('mandatory')
ibmappnCosTransPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 13, 6, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("low", 1), ("medium", 2), ("high", 3), ("network", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmappnCosTransPriority.setStatus('mandatory')
ibmappnCosNodeRowTable = MibTable((1, 3, 6, 1, 4, 1, 2, 6, 2, 13, 6, 3), )
if mibBuilder.loadTexts: ibmappnCosNodeRowTable.setStatus('mandatory')
ibmappnCosNodeRowEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2, 6, 2, 13, 6, 3, 1), ).setIndexNames((0, "IBM6611-MIB", "ibmappnCosNodeRowName"), (0, "IBM6611-MIB", "ibmappnCosNodeRowIndex"))
if mibBuilder.loadTexts: ibmappnCosNodeRowEntry.setStatus('mandatory')
ibmappnCosNodeRowName = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 13, 6, 3, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 8))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmappnCosNodeRowName.setStatus('mandatory')
ibmappnCosNodeRowIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 13, 6, 3, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmappnCosNodeRowIndex.setStatus('mandatory')
ibmappnCosNodeRowWgt = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 13, 6, 3, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmappnCosNodeRowWgt.setStatus('mandatory')
ibmappnCosNodeRowResistMin = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 13, 6, 3, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmappnCosNodeRowResistMin.setStatus('mandatory')
ibmappnCosNodeRowResistMax = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 13, 6, 3, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmappnCosNodeRowResistMax.setStatus('mandatory')
ibmappnCosNodeRowMinCongestAllow = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 13, 6, 3, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmappnCosNodeRowMinCongestAllow.setStatus('mandatory')
ibmappnCosNodeRowMaxCongestAllow = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 13, 6, 3, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmappnCosNodeRowMaxCongestAllow.setStatus('mandatory')
ibmappnCosTgRowTable = MibTable((1, 3, 6, 1, 4, 1, 2, 6, 2, 13, 6, 4), )
if mibBuilder.loadTexts: ibmappnCosTgRowTable.setStatus('mandatory')
ibmappnCosTgRowEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2, 6, 2, 13, 6, 4, 1), ).setIndexNames((0, "IBM6611-MIB", "ibmappnCosTgRowName"), (0, "IBM6611-MIB", "ibmappnCosTgRowIndex"))
if mibBuilder.loadTexts: ibmappnCosTgRowEntry.setStatus('mandatory')
ibmappnCosTgRowName = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 13, 6, 4, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 8))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmappnCosTgRowName.setStatus('mandatory')
ibmappnCosTgRowIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 13, 6, 4, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmappnCosTgRowIndex.setStatus('mandatory')
ibmappnCosTgRowWgt = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 13, 6, 4, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmappnCosTgRowWgt.setStatus('mandatory')
ibmappnCosTgRowEffCapMin = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 13, 6, 4, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmappnCosTgRowEffCapMin.setStatus('mandatory')
ibmappnCosTgRowEffCapMax = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 13, 6, 4, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmappnCosTgRowEffCapMax.setStatus('mandatory')
ibmappnCosTgRowConnCostMin = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 13, 6, 4, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmappnCosTgRowConnCostMin.setStatus('mandatory')
ibmappnCosTgRowConnCostMax = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 13, 6, 4, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmappnCosTgRowConnCostMax.setStatus('mandatory')
ibmappnCosTgRowByteCostMin = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 13, 6, 4, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmappnCosTgRowByteCostMin.setStatus('mandatory')
ibmappnCosTgRowByteCostMax = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 13, 6, 4, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmappnCosTgRowByteCostMax.setStatus('mandatory')
ibmappnCosTgRowSecurityMin = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 13, 6, 4, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 32, 64, 96, 128, 160, 192))).clone(namedValues=NamedValues(("nonsecure", 1), ("publicSwitchedNetwork", 32), ("undergroundCable", 64), ("secureConduit", 96), ("guardedConduit", 128), ("encrypted", 160), ("guardedRadiation", 192)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmappnCosTgRowSecurityMin.setStatus('mandatory')
ibmappnCosTgRowSecurityMax = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 13, 6, 4, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 32, 64, 96, 128, 160, 192))).clone(namedValues=NamedValues(("nonsecure", 1), ("publicSwitchedNetwork", 32), ("undergroundCable", 64), ("secureConduit", 96), ("guardedConduit", 128), ("encrypted", 160), ("guardedRadiation", 192)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmappnCosTgRowSecurityMax.setStatus('mandatory')
ibmappnCosTgRowDelayMin = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 13, 6, 4, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 384, 9216, 147456, 294912, 2013265920))).clone(namedValues=NamedValues(("minimum", 1), ("negligible", 384), ("terrestrial", 9216), ("packet", 147456), ("long", 294912), ("maximum", 2013265920)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmappnCosTgRowDelayMin.setStatus('mandatory')
ibmappnCosTgRowDelayMax = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 13, 6, 4, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 384, 9216, 147456, 294912, 2013265920))).clone(namedValues=NamedValues(("minimum", 1), ("negligible", 384), ("terrestrial", 9216), ("packet", 147456), ("long", 294912), ("maximum", 2013265920)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmappnCosTgRowDelayMax.setStatus('mandatory')
ibmappnCosTgRowUsr1Min = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 13, 6, 4, 1, 14), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmappnCosTgRowUsr1Min.setStatus('mandatory')
ibmappnCosTgRowUsr1Max = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 13, 6, 4, 1, 15), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmappnCosTgRowUsr1Max.setStatus('mandatory')
ibmappnCosTgRowUsr2Min = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 13, 6, 4, 1, 16), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmappnCosTgRowUsr2Min.setStatus('mandatory')
ibmappnCosTgRowUsr2Max = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 13, 6, 4, 1, 17), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmappnCosTgRowUsr2Max.setStatus('mandatory')
ibmappnCosTgRowUsr3Min = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 13, 6, 4, 1, 18), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmappnCosTgRowUsr3Min.setStatus('mandatory')
ibmappnCosTgRowUsr3Max = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 13, 6, 4, 1, 19), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmappnCosTgRowUsr3Max.setStatus('mandatory')
ibmappnSession = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 6, 2, 13, 7))
ibmappnConversation = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 6, 2, 13, 8))
ibmappnSessGeneral = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 6, 2, 13, 7, 1))
ibmappnSessEndPoint = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 6, 2, 13, 7, 2))
ibmappnSessIntermediate = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 6, 2, 13, 7, 3))
ibmappnConvGeneral = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 6, 2, 13, 8, 1))
ibmappnConvEndPoint = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 6, 2, 13, 8, 2))
ibmappnIsInformation = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 6, 2, 13, 7, 3, 1))
ibmappnIsAccounting = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 6, 2, 13, 7, 3, 2))
ibmappnIsInGlobal = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 6, 2, 13, 7, 3, 1, 1))
ibmappnIsInGlobeStatus = MibScalar((1, 3, 6, 1, 4, 1, 2, 6, 2, 13, 7, 3, 1, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("notActive", 1), ("active", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ibmappnIsInGlobeStatus.setStatus('mandatory')
ibmappnIsInGlobeRscv = MibScalar((1, 3, 6, 1, 4, 1, 2, 6, 2, 13, 7, 3, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("notActive", 1), ("active", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ibmappnIsInGlobeRscv.setStatus('mandatory')
ibmappnIsInGlobeRscvTime = MibScalar((1, 3, 6, 1, 4, 1, 2, 6, 2, 13, 7, 3, 1, 1, 3), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmappnIsInGlobeRscvTime.setStatus('mandatory')
ibmappnIsInGlobeCtrStatus = MibScalar((1, 3, 6, 1, 4, 1, 2, 6, 2, 13, 7, 3, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("notActive", 1), ("active", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ibmappnIsInGlobeCtrStatus.setStatus('mandatory')
ibmappnIsInGlobeCtrStatusTime = MibScalar((1, 3, 6, 1, 4, 1, 2, 6, 2, 13, 7, 3, 1, 1, 5), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmappnIsInGlobeCtrStatusTime.setStatus('mandatory')
ibmappnIsInTable = MibTable((1, 3, 6, 1, 4, 1, 2, 6, 2, 13, 7, 3, 1, 2), )
if mibBuilder.loadTexts: ibmappnIsInTable.setStatus('mandatory')
ibmappnIsInEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2, 6, 2, 13, 7, 3, 1, 2, 1), ).setIndexNames((0, "IBM6611-MIB", "ibmappnIsInFqLuName"), (0, "IBM6611-MIB", "ibmappnIsInPcid"))
if mibBuilder.loadTexts: ibmappnIsInEntry.setStatus('mandatory')
ibmappnIsInFqLuName = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 13, 7, 3, 1, 2, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(3, 17))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmappnIsInFqLuName.setStatus('mandatory')
ibmappnIsInPcid = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 13, 7, 3, 1, 2, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(8, 8)).setFixedLength(8)).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmappnIsInPcid.setStatus('mandatory')
ibmappnIsInPriLuName = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 13, 7, 3, 1, 2, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(3, 17))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmappnIsInPriLuName.setStatus('mandatory')
ibmappnIsInSecLuName = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 13, 7, 3, 1, 2, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(3, 17))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmappnIsInSecLuName.setStatus('mandatory')
ibmappnIsInModeName = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 13, 7, 3, 1, 2, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 8))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmappnIsInModeName.setStatus('mandatory')
ibmappnIsInCosName = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 13, 7, 3, 1, 2, 1, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 8))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmappnIsInCosName.setStatus('mandatory')
ibmappnIsInTransPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 13, 7, 3, 1, 2, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmappnIsInTransPriority.setStatus('mandatory')
ibmappnIsInSessType = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 13, 7, 3, 1, 2, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("lu62", 1), ("lu0thru3", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmappnIsInSessType.setStatus('mandatory')
ibmappnIsInSessState = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 13, 7, 3, 1, 2, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("inactive", 1), ("pendactive", 2), ("active", 3), ("pendinact", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ibmappnIsInSessState.setStatus('mandatory')
ibmappnIsInSessStartTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 13, 7, 3, 1, 2, 1, 10), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmappnIsInSessStartTime.setStatus('mandatory')
ibmappnIsInSessUpTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 13, 7, 3, 1, 2, 1, 11), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmappnIsInSessUpTime.setStatus('mandatory')
ibmappnIsInCtrUpTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 13, 7, 3, 1, 2, 1, 12), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmappnIsInCtrUpTime.setStatus('mandatory')
ibmappnIsInP2SFmdPius = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 13, 7, 3, 1, 2, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmappnIsInP2SFmdPius.setStatus('mandatory')
ibmappnIsInS2PFmdPius = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 13, 7, 3, 1, 2, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmappnIsInS2PFmdPius.setStatus('mandatory')
ibmappnIsInP2SNonFmdPius = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 13, 7, 3, 1, 2, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmappnIsInP2SNonFmdPius.setStatus('mandatory')
ibmappnIsInS2PNonFmdPius = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 13, 7, 3, 1, 2, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmappnIsInS2PNonFmdPius.setStatus('mandatory')
ibmappnIsInP2SFmdBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 13, 7, 3, 1, 2, 1, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmappnIsInP2SFmdBytes.setStatus('mandatory')
ibmappnIsInS2PFmdBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 13, 7, 3, 1, 2, 1, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmappnIsInS2PFmdBytes.setStatus('mandatory')
ibmappnIsInP2SNonFmdBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 13, 7, 3, 1, 2, 1, 19), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmappnIsInP2SNonFmdBytes.setStatus('mandatory')
ibmappnIsInS2PNonFmdBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 13, 7, 3, 1, 2, 1, 20), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmappnIsInS2PNonFmdBytes.setStatus('mandatory')
ibmappnIsInPsAdjCpName = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 13, 7, 3, 1, 2, 1, 21), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(3, 17))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmappnIsInPsAdjCpName.setStatus('mandatory')
ibmappnIsInPsAdjTgNum = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 13, 7, 3, 1, 2, 1, 22), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmappnIsInPsAdjTgNum.setStatus('mandatory')
ibmappnIsInPsSendMaxBtuSize = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 13, 7, 3, 1, 2, 1, 23), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmappnIsInPsSendMaxBtuSize.setStatus('mandatory')
ibmappnIsInPsSendPacingType = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 13, 7, 3, 1, 2, 1, 24), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("fixed", 1), ("adaptive", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmappnIsInPsSendPacingType.setStatus('mandatory')
ibmappnIsInPsSendRpc = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 13, 7, 3, 1, 2, 1, 25), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmappnIsInPsSendRpc.setStatus('mandatory')
ibmappnIsInPsSendNxWndwSize = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 13, 7, 3, 1, 2, 1, 26), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmappnIsInPsSendNxWndwSize.setStatus('mandatory')
ibmappnIsInPsRecvPacingType = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 13, 7, 3, 1, 2, 1, 27), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("fixed", 1), ("adaptive", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmappnIsInPsRecvPacingType.setStatus('mandatory')
ibmappnIsInPsRecvRpc = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 13, 7, 3, 1, 2, 1, 28), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmappnIsInPsRecvRpc.setStatus('mandatory')
ibmappnIsInPsRecvNxWndwSize = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 13, 7, 3, 1, 2, 1, 29), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmappnIsInPsRecvNxWndwSize.setStatus('mandatory')
ibmappnIsInSsAdjCpName = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 13, 7, 3, 1, 2, 1, 30), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(3, 17))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmappnIsInSsAdjCpName.setStatus('mandatory')
ibmappnIsInSsAdjTgNum = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 13, 7, 3, 1, 2, 1, 31), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmappnIsInSsAdjTgNum.setStatus('mandatory')
ibmappnIsInSsSendMaxBtuSize = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 13, 7, 3, 1, 2, 1, 32), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmappnIsInSsSendMaxBtuSize.setStatus('mandatory')
ibmappnIsInSsSendPacingType = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 13, 7, 3, 1, 2, 1, 33), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("fixed", 1), ("adaptive", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmappnIsInSsSendPacingType.setStatus('mandatory')
ibmappnIsInSsSendRpc = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 13, 7, 3, 1, 2, 1, 34), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmappnIsInSsSendRpc.setStatus('mandatory')
ibmappnIsInSsSendNxWndwSize = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 13, 7, 3, 1, 2, 1, 35), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmappnIsInSsSendNxWndwSize.setStatus('mandatory')
ibmappnIsInSsRecvPacingType = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 13, 7, 3, 1, 2, 1, 36), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("fixed", 1), ("adaptive", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmappnIsInSsRecvPacingType.setStatus('mandatory')
ibmappnIsInSsRecvRpc = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 13, 7, 3, 1, 2, 1, 37), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmappnIsInSsRecvRpc.setStatus('mandatory')
ibmappnIsInSsRecvNxWndwSize = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 13, 7, 3, 1, 2, 1, 38), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmappnIsInSsRecvNxWndwSize.setStatus('mandatory')
ibmappnIsInRouteInfo = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 13, 7, 3, 1, 2, 1, 39), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmappnIsInRouteInfo.setStatus('mandatory')
ibmappnIsAcGlobal = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 6, 2, 13, 7, 3, 2, 1))
ibmappnIsAcGlobeStatus = MibScalar((1, 3, 6, 1, 4, 1, 2, 6, 2, 13, 7, 3, 2, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("notActive", 1), ("activeNotFull", 2), ("activeButFull", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmappnIsAcGlobeStatus.setStatus('mandatory')
ibmappnIsAcGlobeByteThresh = MibScalar((1, 3, 6, 1, 4, 1, 2, 6, 2, 13, 7, 3, 2, 1, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ibmappnIsAcGlobeByteThresh.setStatus('mandatory')
ibmappnIsAcGlobeCheckPt = MibScalar((1, 3, 6, 1, 4, 1, 2, 6, 2, 13, 7, 3, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("ready", 1), ("yes", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ibmappnIsAcGlobeCheckPt.setStatus('mandatory')
ibmappnIsAcGlobeMgrUtcSecs = MibScalar((1, 3, 6, 1, 4, 1, 2, 6, 2, 13, 7, 3, 2, 1, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ibmappnIsAcGlobeMgrUtcSecs.setStatus('mandatory')
ibmappnIsAcGlobeMgrUtcMins = MibScalar((1, 3, 6, 1, 4, 1, 2, 6, 2, 13, 7, 3, 2, 1, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ibmappnIsAcGlobeMgrUtcMins.setStatus('mandatory')
ibmappnIsAcGlobeMgrUtcHours = MibScalar((1, 3, 6, 1, 4, 1, 2, 6, 2, 13, 7, 3, 2, 1, 6), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ibmappnIsAcGlobeMgrUtcHours.setStatus('mandatory')
ibmappnIsAcGlobeMgrUtcMdays = MibScalar((1, 3, 6, 1, 4, 1, 2, 6, 2, 13, 7, 3, 2, 1, 7), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ibmappnIsAcGlobeMgrUtcMdays.setStatus('mandatory')
ibmappnIsAcGlobeMgrUtcMonths = MibScalar((1, 3, 6, 1, 4, 1, 2, 6, 2, 13, 7, 3, 2, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(12, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11))).clone(namedValues=NamedValues(("january", 12), ("february", 1), ("march", 2), ("april", 3), ("may", 4), ("june", 5), ("july", 6), ("august", 7), ("september", 8), ("october", 9), ("november", 10), ("december", 11)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ibmappnIsAcGlobeMgrUtcMonths.setStatus('mandatory')
ibmappnIsAcGlobeMgrUtcYears = MibScalar((1, 3, 6, 1, 4, 1, 2, 6, 2, 13, 7, 3, 2, 1, 9), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ibmappnIsAcGlobeMgrUtcYears.setStatus('mandatory')
ibmappnIsAcGlobeMgrUtcWdays = MibScalar((1, 3, 6, 1, 4, 1, 2, 6, 2, 13, 7, 3, 2, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(7, 1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("sunday", 7), ("monday", 1), ("tuesday", 2), ("wednesday", 3), ("thursday", 4), ("friday", 5), ("saturday", 6)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ibmappnIsAcGlobeMgrUtcWdays.setStatus('mandatory')
ibmappnIsAcGlobeMgrUtcYdays = MibScalar((1, 3, 6, 1, 4, 1, 2, 6, 2, 13, 7, 3, 2, 1, 11), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ibmappnIsAcGlobeMgrUtcYdays.setStatus('mandatory')
ibmappnIsAcGlobeMgrUtcIsdst = MibScalar((1, 3, 6, 1, 4, 1, 2, 6, 2, 13, 7, 3, 2, 1, 12), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ibmappnIsAcGlobeMgrUtcIsdst.setStatus('mandatory')
ibmappnIsAcGlobeMgrName = MibScalar((1, 3, 6, 1, 4, 1, 2, 6, 2, 13, 7, 3, 2, 1, 13), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(3, 17))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ibmappnIsAcGlobeMgrName.setStatus('mandatory')
ibmappnIsAcBtypeTable = MibTable((1, 3, 6, 1, 4, 1, 2, 6, 2, 13, 7, 3, 2, 2), )
if mibBuilder.loadTexts: ibmappnIsAcBtypeTable.setStatus('mandatory')
ibmappnIsAcBtypeEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2, 6, 2, 13, 7, 3, 2, 2, 1), ).setIndexNames((0, "IBM6611-MIB", "ibmappnIsAcBtypeMedia"))
if mibBuilder.loadTexts: ibmappnIsAcBtypeEntry.setStatus('mandatory')
ibmappnIsAcBtypeMedia = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 13, 7, 3, 2, 2, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("memory", 1), ("dasd", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmappnIsAcBtypeMedia.setStatus('mandatory')
ibmappnIsAcBtypeActive = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 13, 7, 3, 2, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ibmappnIsAcBtypeActive.setStatus('mandatory')
ibmappnIsAcBtypeDirName = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 13, 7, 3, 2, 2, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmappnIsAcBtypeDirName.setStatus('mandatory')
ibmappnIsAcBtypePrdMaxBufs = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 13, 7, 3, 2, 2, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmappnIsAcBtypePrdMaxBufs.setStatus('mandatory')
ibmappnIsAcBtypeMaxBufs = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 13, 7, 3, 2, 2, 1, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ibmappnIsAcBtypeMaxBufs.setStatus('mandatory')
ibmappnIsAcBtypeCurBufs = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 13, 7, 3, 2, 2, 1, 6), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmappnIsAcBtypeCurBufs.setStatus('mandatory')
ibmappnIsAcBtypePrdRecPerBuf = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 13, 7, 3, 2, 2, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmappnIsAcBtypePrdRecPerBuf.setStatus('mandatory')
ibmappnIsAcBtypeRecPerBuf = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 13, 7, 3, 2, 2, 1, 8), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ibmappnIsAcBtypeRecPerBuf.setStatus('mandatory')
ibmappnIsAcBtypeRecFormat = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 13, 7, 3, 2, 2, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("ascii", 1), ("binary", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ibmappnIsAcBtypeRecFormat.setStatus('mandatory')
ibmappnIsAcBtypeFullAction = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 13, 7, 3, 2, 2, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("halt", 1), ("wrap", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ibmappnIsAcBtypeFullAction.setStatus('mandatory')
ibmappnIsAcBtypeFullTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 13, 7, 3, 2, 2, 1, 11), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmappnIsAcBtypeFullTime.setStatus('mandatory')
ibmappnIsAcBtypeFullReason = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 13, 7, 3, 2, 2, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("notFull", 1), ("physicallyFull", 2), ("logicallyFull", 3), ("ioErrors", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmappnIsAcBtypeFullReason.setStatus('mandatory')
ibmappnIsAcBtypeFullWraps = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 13, 7, 3, 2, 2, 1, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmappnIsAcBtypeFullWraps.setStatus('mandatory')
ibmappnIsAcBtypeFullLosts = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 13, 7, 3, 2, 2, 1, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmappnIsAcBtypeFullLosts.setStatus('mandatory')
ibmappnIsAcBtypeErrorWraps = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 13, 7, 3, 2, 2, 1, 15), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmappnIsAcBtypeErrorWraps.setStatus('mandatory')
ibmappnIsAcBtypeErrorLosts = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 13, 7, 3, 2, 2, 1, 16), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmappnIsAcBtypeErrorLosts.setStatus('mandatory')
ibmappnIsAcBtypeCheckPts = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 13, 7, 3, 2, 2, 1, 17), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmappnIsAcBtypeCheckPts.setStatus('mandatory')
ibmappnIsAcBtypePurges = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 13, 7, 3, 2, 2, 1, 18), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmappnIsAcBtypePurges.setStatus('mandatory')
ibmappnIsAcBtypeDeletes = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 13, 7, 3, 2, 2, 1, 19), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmappnIsAcBtypeDeletes.setStatus('mandatory')
ibmappnIsAcBtypeResets = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 13, 7, 3, 2, 2, 1, 20), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmappnIsAcBtypeResets.setStatus('mandatory')
ibmappnIsAcBtypeClearStats = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 13, 7, 3, 2, 2, 1, 21), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("ready", 1), ("yes", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ibmappnIsAcBtypeClearStats.setStatus('mandatory')
ibmappnIsAcBufTable = MibTable((1, 3, 6, 1, 4, 1, 2, 6, 2, 13, 7, 3, 2, 3), )
if mibBuilder.loadTexts: ibmappnIsAcBufTable.setStatus('mandatory')
ibmappnIsAcBufEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2, 6, 2, 13, 7, 3, 2, 3, 1), ).setIndexNames((0, "IBM6611-MIB", "ibmappnIsAcBufMedia"), (0, "IBM6611-MIB", "ibmappnIsAcBufNumber"))
if mibBuilder.loadTexts: ibmappnIsAcBufEntry.setStatus('mandatory')
ibmappnIsAcBufMedia = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 13, 7, 3, 2, 3, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("memory", 1), ("dasd", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmappnIsAcBufMedia.setStatus('mandatory')
ibmappnIsAcBufNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 13, 7, 3, 2, 3, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmappnIsAcBufNumber.setStatus('mandatory')
ibmappnIsAcBufState = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 13, 7, 3, 2, 3, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("complete", 1), ("active", 2), ("purge", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ibmappnIsAcBufState.setStatus('mandatory')
ibmappnIsAcBufRecFormat = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 13, 7, 3, 2, 3, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("ascii", 1), ("binary", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmappnIsAcBufRecFormat.setStatus('mandatory')
ibmappnIsAcBufMaxRecords = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 13, 7, 3, 2, 3, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmappnIsAcBufMaxRecords.setStatus('mandatory')
ibmappnIsAcBufOldestIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 13, 7, 3, 2, 3, 1, 6), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ibmappnIsAcBufOldestIndex.setStatus('mandatory')
ibmappnIsAcBufNewestIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 13, 7, 3, 2, 3, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmappnIsAcBufNewestIndex.setStatus('mandatory')
ibmappnIsAcBufName = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 13, 7, 3, 2, 3, 1, 8), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmappnIsAcBufName.setStatus('mandatory')
ibmappnIsAcTimeTable = MibTable((1, 3, 6, 1, 4, 1, 2, 6, 2, 13, 7, 3, 2, 4), )
if mibBuilder.loadTexts: ibmappnIsAcTimeTable.setStatus('mandatory')
ibmappnIsAcTimeEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2, 6, 2, 13, 7, 3, 2, 4, 1), ).setIndexNames((0, "IBM6611-MIB", "ibmappnIsAcTimeIndex"))
if mibBuilder.loadTexts: ibmappnIsAcTimeEntry.setStatus('mandatory')
ibmappnIsAcTimeIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 13, 7, 3, 2, 4, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmappnIsAcTimeIndex.setStatus('mandatory')
ibmappnIsAcTimeEntryType = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 13, 7, 3, 2, 4, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("startCollection", 1), ("endCollection", 2), ("createdMedia", 3), ("wrappedMedia", 4), ("timeChange", 5), ("managerSetTime", 6), ("recordFormatChanged", 7), ("timeReference", 8)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmappnIsAcTimeEntryType.setStatus('mandatory')
ibmappnIsAcTimeForMedia = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 13, 7, 3, 2, 4, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 99))).clone(namedValues=NamedValues(("memoryMedia", 1), ("dasdMedia", 2), ("allMedias", 99)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmappnIsAcTimeForMedia.setStatus('mandatory')
ibmappnIsAcTimeRecTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 13, 7, 3, 2, 4, 1, 4), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmappnIsAcTimeRecTime.setStatus('mandatory')
ibmappnIsAcTimeAgtUtcSecs = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 13, 7, 3, 2, 4, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmappnIsAcTimeAgtUtcSecs.setStatus('mandatory')
ibmappnIsAcTimeAgtUtcMins = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 13, 7, 3, 2, 4, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmappnIsAcTimeAgtUtcMins.setStatus('mandatory')
ibmappnIsAcTimeAgtUtcHours = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 13, 7, 3, 2, 4, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmappnIsAcTimeAgtUtcHours.setStatus('mandatory')
ibmappnIsAcTimeAgtUtcMdays = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 13, 7, 3, 2, 4, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmappnIsAcTimeAgtUtcMdays.setStatus('mandatory')
ibmappnIsAcTimeAgtUtcMonths = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 13, 7, 3, 2, 4, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(12, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11))).clone(namedValues=NamedValues(("january", 12), ("february", 1), ("march", 2), ("april", 3), ("may", 4), ("june", 5), ("july", 6), ("august", 7), ("september", 8), ("october", 9), ("november", 10), ("december", 11)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmappnIsAcTimeAgtUtcMonths.setStatus('mandatory')
ibmappnIsAcTimeAgtUtcYears = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 13, 7, 3, 2, 4, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmappnIsAcTimeAgtUtcYears.setStatus('mandatory')
ibmappnIsAcTimeAgtUtcWdays = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 13, 7, 3, 2, 4, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(7, 1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("sunday", 7), ("monday", 1), ("tuesday", 2), ("wednesday", 3), ("thursday", 4), ("friday", 5), ("saturday", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmappnIsAcTimeAgtUtcWdays.setStatus('mandatory')
ibmappnIsAcTimeAgtUtcYdays = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 13, 7, 3, 2, 4, 1, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmappnIsAcTimeAgtUtcYdays.setStatus('mandatory')
ibmappnIsAcTimeAgtUtcIsdst = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 13, 7, 3, 2, 4, 1, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmappnIsAcTimeAgtUtcIsdst.setStatus('mandatory')
ibmappnIsAcTimeAgtName = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 13, 7, 3, 2, 4, 1, 14), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(3, 17))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmappnIsAcTimeAgtName.setStatus('mandatory')
ibmappnIsAcTimeMgrUtcSecs = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 13, 7, 3, 2, 4, 1, 15), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmappnIsAcTimeMgrUtcSecs.setStatus('mandatory')
ibmappnIsAcTimeMgrUtcMins = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 13, 7, 3, 2, 4, 1, 16), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmappnIsAcTimeMgrUtcMins.setStatus('mandatory')
ibmappnIsAcTimeMgrUtcHours = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 13, 7, 3, 2, 4, 1, 17), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmappnIsAcTimeMgrUtcHours.setStatus('mandatory')
ibmappnIsAcTimeMgrUtcMdays = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 13, 7, 3, 2, 4, 1, 18), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmappnIsAcTimeMgrUtcMdays.setStatus('mandatory')
ibmappnIsAcTimeMgrUtcMonths = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 13, 7, 3, 2, 4, 1, 19), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(12, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11))).clone(namedValues=NamedValues(("january", 12), ("february", 1), ("march", 2), ("april", 3), ("may", 4), ("june", 5), ("july", 6), ("august", 7), ("september", 8), ("october", 9), ("november", 10), ("december", 11)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmappnIsAcTimeMgrUtcMonths.setStatus('mandatory')
ibmappnIsAcTimeMgrUtcYears = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 13, 7, 3, 2, 4, 1, 20), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmappnIsAcTimeMgrUtcYears.setStatus('mandatory')
ibmappnIsAcTimeMgrUtcWdays = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 13, 7, 3, 2, 4, 1, 21), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(7, 1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("sunday", 7), ("monday", 1), ("tuesday", 2), ("wednesday", 3), ("thursday", 4), ("friday", 5), ("saturday", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmappnIsAcTimeMgrUtcWdays.setStatus('mandatory')
ibmappnIsAcTimeMgrUtcYdays = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 13, 7, 3, 2, 4, 1, 22), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmappnIsAcTimeMgrUtcYdays.setStatus('mandatory')
ibmappnIsAcTimeMgrUtcIsdst = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 13, 7, 3, 2, 4, 1, 23), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmappnIsAcTimeMgrUtcIsdst.setStatus('mandatory')
ibmappnIsAcTimeMgrName = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 13, 7, 3, 2, 4, 1, 24), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 17))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmappnIsAcTimeMgrName.setStatus('mandatory')
ibmappnIsAcTimeMgrTimeValid = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 13, 7, 3, 2, 4, 1, 25), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("notvalid", 1), ("valid", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ibmappnIsAcTimeMgrTimeValid.setStatus('mandatory')
ibmappnIsAcDataTable = MibTable((1, 3, 6, 1, 4, 1, 2, 6, 2, 13, 7, 3, 2, 5), )
if mibBuilder.loadTexts: ibmappnIsAcDataTable.setStatus('mandatory')
ibmappnIsAcDataEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2, 6, 2, 13, 7, 3, 2, 5, 1), ).setIndexNames((0, "IBM6611-MIB", "ibmappnIsAcIndex"))
if mibBuilder.loadTexts: ibmappnIsAcDataEntry.setStatus('mandatory')
ibmappnIsAcIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 13, 7, 3, 2, 5, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmappnIsAcIndex.setStatus('mandatory')
ibmappnIsAcEntryType = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 13, 7, 3, 2, 5, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("startEntry", 1), ("endEntry", 2), ("thresholdEntry", 3), ("checkpointEntry", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmappnIsAcEntryType.setStatus('mandatory')
ibmappnIsAcRecTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 13, 7, 3, 2, 5, 1, 3), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmappnIsAcRecTime.setStatus('mandatory')
ibmappnIsAcFqLuName = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 13, 7, 3, 2, 5, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(3, 17))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmappnIsAcFqLuName.setStatus('mandatory')
ibmappnIsAcPcid = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 13, 7, 3, 2, 5, 1, 5), OctetString().subtype(subtypeSpec=ValueSizeConstraint(8, 8)).setFixedLength(8)).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmappnIsAcPcid.setStatus('mandatory')
ibmappnIsAcPriLuName = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 13, 7, 3, 2, 5, 1, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(3, 17))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmappnIsAcPriLuName.setStatus('mandatory')
ibmappnIsAcSecLuName = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 13, 7, 3, 2, 5, 1, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(3, 17))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmappnIsAcSecLuName.setStatus('mandatory')
ibmappnIsAcModeName = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 13, 7, 3, 2, 5, 1, 8), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 8))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmappnIsAcModeName.setStatus('mandatory')
ibmappnIsAcCosName = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 13, 7, 3, 2, 5, 1, 9), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 8))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmappnIsAcCosName.setStatus('mandatory')
ibmappnIsAcTransPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 13, 7, 3, 2, 5, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("low", 1), ("medium", 2), ("high", 3), ("network", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmappnIsAcTransPriority.setStatus('mandatory')
ibmappnIsAcSessType = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 13, 7, 3, 2, 5, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("lu62", 1), ("lu0thru3", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmappnIsAcSessType.setStatus('mandatory')
ibmappnIsAcSessState = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 13, 7, 3, 2, 5, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("inactive", 1), ("pendactive", 2), ("active", 3), ("pendinact", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmappnIsAcSessState.setStatus('mandatory')
ibmappnIsAcSessStartTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 13, 7, 3, 2, 5, 1, 13), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmappnIsAcSessStartTime.setStatus('mandatory')
ibmappnIsAcSessUpTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 13, 7, 3, 2, 5, 1, 14), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmappnIsAcSessUpTime.setStatus('mandatory')
ibmappnIsAcCtrUpTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 13, 7, 3, 2, 5, 1, 15), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmappnIsAcCtrUpTime.setStatus('mandatory')
ibmappnIsAcEndReason = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 13, 7, 3, 2, 5, 1, 16), OctetString().subtype(subtypeSpec=ValueSizeConstraint(4, 4)).setFixedLength(4)).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmappnIsAcEndReason.setStatus('mandatory')
ibmappnIsAcP2SFmdPius = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 13, 7, 3, 2, 5, 1, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmappnIsAcP2SFmdPius.setStatus('mandatory')
ibmappnIsAcS2PFmdPius = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 13, 7, 3, 2, 5, 1, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmappnIsAcS2PFmdPius.setStatus('mandatory')
ibmappnIsAcP2SNonFmdPius = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 13, 7, 3, 2, 5, 1, 19), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmappnIsAcP2SNonFmdPius.setStatus('mandatory')
ibmappnIsAcS2PNonFmdPius = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 13, 7, 3, 2, 5, 1, 20), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmappnIsAcS2PNonFmdPius.setStatus('mandatory')
ibmappnIsAcP2SFmdBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 13, 7, 3, 2, 5, 1, 21), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmappnIsAcP2SFmdBytes.setStatus('mandatory')
ibmappnIsAcS2PFmdBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 13, 7, 3, 2, 5, 1, 22), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmappnIsAcS2PFmdBytes.setStatus('mandatory')
ibmappnIsAcP2SNonFmdBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 13, 7, 3, 2, 5, 1, 23), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmappnIsAcP2SNonFmdBytes.setStatus('mandatory')
ibmappnIsAcS2PNonFmdBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 13, 7, 3, 2, 5, 1, 24), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmappnIsAcS2PNonFmdBytes.setStatus('mandatory')
ibmappnIsAcRouteInfo = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 13, 7, 3, 2, 5, 1, 25), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmappnIsAcRouteInfo.setStatus('mandatory')
ibmappcInformation = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 6, 2, 13, 7, 2, 1))
ibmappcInGlobal = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 6, 2, 13, 7, 2, 1, 1))
ibmappcInGlobeStatus = MibScalar((1, 3, 6, 1, 4, 1, 2, 6, 2, 13, 7, 2, 1, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("notActive", 1), ("active", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ibmappcInGlobeStatus.setStatus('mandatory')
ibmappcInGlobeRscv = MibScalar((1, 3, 6, 1, 4, 1, 2, 6, 2, 13, 7, 2, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("notActive", 1), ("active", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ibmappcInGlobeRscv.setStatus('mandatory')
ibmappcInGlobeRscvTime = MibScalar((1, 3, 6, 1, 4, 1, 2, 6, 2, 13, 7, 2, 1, 1, 3), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmappcInGlobeRscvTime.setStatus('mandatory')
ibmappcInGlobeCtrStatus = MibScalar((1, 3, 6, 1, 4, 1, 2, 6, 2, 13, 7, 2, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("notActive", 1), ("active", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ibmappcInGlobeCtrStatus.setStatus('mandatory')
ibmappcInGlobeCtrStatusTime = MibScalar((1, 3, 6, 1, 4, 1, 2, 6, 2, 13, 7, 2, 1, 1, 5), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmappcInGlobeCtrStatusTime.setStatus('mandatory')
ibmappcInGlobeActSess = MibScalar((1, 3, 6, 1, 4, 1, 2, 6, 2, 13, 7, 2, 1, 1, 6), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmappcInGlobeActSess.setStatus('mandatory')
ibmappcInLluTable = MibTable((1, 3, 6, 1, 4, 1, 2, 6, 2, 13, 7, 2, 1, 2), )
if mibBuilder.loadTexts: ibmappcInLluTable.setStatus('mandatory')
ibmappcInLluEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2, 6, 2, 13, 7, 2, 1, 2, 1), ).setIndexNames((0, "IBM6611-MIB", "ibmappcInLluLuName"))
if mibBuilder.loadTexts: ibmappcInLluEntry.setStatus('mandatory')
ibmappcInLluLuName = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 13, 7, 2, 1, 2, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(3, 17))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmappcInLluLuName.setStatus('mandatory')
ibmappcInLluDefType = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 13, 7, 2, 1, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("sysdef", 1), ("dynamic", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmappcInLluDefType.setStatus('mandatory')
ibmappcInLluSessLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 13, 7, 2, 1, 2, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmappcInLluSessLimit.setStatus('mandatory')
ibmappcInLluBindRspMayQ = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 13, 7, 2, 1, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmappcInLluBindRspMayQ.setStatus('mandatory')
ibmappcInLluDefaultLu = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 13, 7, 2, 1, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmappcInLluDefaultLu.setStatus('mandatory')
ibmappcInLluCntlPtLu = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 13, 7, 2, 1, 2, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmappcInLluCntlPtLu.setStatus('mandatory')
ibmappcInLluCurActSess = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 13, 7, 2, 1, 2, 1, 7), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmappcInLluCurActSess.setStatus('mandatory')
ibmappcInRluTable = MibTable((1, 3, 6, 1, 4, 1, 2, 6, 2, 13, 7, 2, 1, 3), )
if mibBuilder.loadTexts: ibmappcInRluTable.setStatus('mandatory')
ibmappcInRluEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2, 6, 2, 13, 7, 2, 1, 3, 1), ).setIndexNames((0, "IBM6611-MIB", "ibmappcInRluLocLuName"), (0, "IBM6611-MIB", "ibmappcInRluParLuName"))
if mibBuilder.loadTexts: ibmappcInRluEntry.setStatus('mandatory')
ibmappcInRluLocLuName = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 13, 7, 2, 1, 3, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(3, 17))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmappcInRluLocLuName.setStatus('mandatory')
ibmappcInRluParLuName = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 13, 7, 2, 1, 3, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(3, 17))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmappcInRluParLuName.setStatus('mandatory')
ibmappcInRluParLuLocName = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 13, 7, 2, 1, 3, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(3, 17))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmappcInRluParLuLocName.setStatus('mandatory')
ibmappcInRluDefType = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 13, 7, 2, 1, 3, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("sysdef", 1), ("dynamic", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmappcInRluDefType.setStatus('mandatory')
ibmappcInRluDefParaSessSup = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 13, 7, 2, 1, 3, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmappcInRluDefParaSessSup.setStatus('mandatory')
ibmappcInRluDefCnosSup = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 13, 7, 2, 1, 3, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmappcInRluDefCnosSup.setStatus('mandatory')
ibmappcInRluDefAllVerSup = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 13, 7, 2, 1, 3, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmappcInRluDefAllVerSup.setStatus('mandatory')
ibmappcInRluDefAttSecSup = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 13, 7, 2, 1, 3, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmappcInRluDefAttSecSup.setStatus('mandatory')
ibmappcInRluDefSessSecSup = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 13, 7, 2, 1, 3, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmappcInRluDefSessSecSup.setStatus('mandatory')
ibmappcInRluDefEnhanSecSup = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 13, 7, 2, 1, 3, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("none", 1), ("level1", 2), ("level2", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmappcInRluDefEnhanSecSup.setStatus('mandatory')
ibmappcInRluActType = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 13, 7, 2, 1, 3, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("active", 1), ("notActive", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmappcInRluActType.setStatus('mandatory')
ibmappcInRluActParaSessSup = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 13, 7, 2, 1, 3, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmappcInRluActParaSessSup.setStatus('mandatory')
ibmappcInRluActCnosSup = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 13, 7, 2, 1, 3, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmappcInRluActCnosSup.setStatus('mandatory')
ibmappcInRluActAllVerSup = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 13, 7, 2, 1, 3, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmappcInRluActAllVerSup.setStatus('mandatory')
ibmappcInRluActAttSecSup = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 13, 7, 2, 1, 3, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmappcInRluActAttSecSup.setStatus('mandatory')
ibmappcInRluActSessSecSup = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 13, 7, 2, 1, 3, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmappcInRluActSessSecSup.setStatus('mandatory')
ibmappcInRluActEnhanSecSup = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 13, 7, 2, 1, 3, 1, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("none", 1), ("level1", 2), ("level2", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmappcInRluActEnhanSecSup.setStatus('mandatory')
ibmappcInMdTable = MibTable((1, 3, 6, 1, 4, 1, 2, 6, 2, 13, 7, 2, 1, 4), )
if mibBuilder.loadTexts: ibmappcInMdTable.setStatus('mandatory')
ibmappcInMdEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2, 6, 2, 13, 7, 2, 1, 4, 1), ).setIndexNames((0, "IBM6611-MIB", "ibmappcInMdLluName"), (0, "IBM6611-MIB", "ibmappcInMdRluName"), (0, "IBM6611-MIB", "ibmappcInMdModeName"))
if mibBuilder.loadTexts: ibmappcInMdEntry.setStatus('mandatory')
ibmappcInMdLluName = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 13, 7, 2, 1, 4, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(3, 17))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmappcInMdLluName.setStatus('mandatory')
ibmappcInMdRluName = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 13, 7, 2, 1, 4, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(3, 17))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmappcInMdRluName.setStatus('mandatory')
ibmappcInMdModeName = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 13, 7, 2, 1, 4, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 8))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmappcInMdModeName.setStatus('mandatory')
ibmappcInMdDefType = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 13, 7, 2, 1, 4, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("sysdef", 1), ("dynamic", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmappcInMdDefType.setStatus('mandatory')
ibmappcInMdSessEndTpName = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 13, 7, 2, 1, 4, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmappcInMdSessEndTpName.setStatus('mandatory')
ibmappcInMdSessLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 13, 7, 2, 1, 4, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmappcInMdSessLimit.setStatus('mandatory')
ibmappcInMdMaxSessLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 13, 7, 2, 1, 4, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmappcInMdMaxSessLimit.setStatus('mandatory')
ibmappcInMdAutoActLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 13, 7, 2, 1, 4, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmappcInMdAutoActLimit.setStatus('mandatory')
ibmappcInMdDrainSelf = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 13, 7, 2, 1, 4, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmappcInMdDrainSelf.setStatus('mandatory')
ibmappcInMdDrainPart = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 13, 7, 2, 1, 4, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmappcInMdDrainPart.setStatus('mandatory')
ibmappcInMdMinCwinLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 13, 7, 2, 1, 4, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmappcInMdMinCwinLimit.setStatus('mandatory')
ibmappcInMdMinClosLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 13, 7, 2, 1, 4, 1, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmappcInMdMinClosLimit.setStatus('mandatory')
ibmappcInMdRecvPacWinSz = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 13, 7, 2, 1, 4, 1, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmappcInMdRecvPacWinSz.setStatus('mandatory')
ibmappcInMdSendPacWinSz = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 13, 7, 2, 1, 4, 1, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmappcInMdSendPacWinSz.setStatus('mandatory')
ibmappcInMdPrefRecvRuSz = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 13, 7, 2, 1, 4, 1, 15), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmappcInMdPrefRecvRuSz.setStatus('mandatory')
ibmappcInMdPrefSendRuSz = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 13, 7, 2, 1, 4, 1, 16), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmappcInMdPrefSendRuSz.setStatus('mandatory')
ibmappcInMdRecvRuSzUpBnd = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 13, 7, 2, 1, 4, 1, 17), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmappcInMdRecvRuSzUpBnd.setStatus('mandatory')
ibmappcInMdSendRuSzUpBnd = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 13, 7, 2, 1, 4, 1, 18), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmappcInMdSendRuSzUpBnd.setStatus('mandatory')
ibmappcInMdRecvRuSzLoBnd = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 13, 7, 2, 1, 4, 1, 19), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmappcInMdRecvRuSzLoBnd.setStatus('mandatory')
ibmappcInMdSendRuSzLoBnd = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 13, 7, 2, 1, 4, 1, 20), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmappcInMdSendRuSzLoBnd.setStatus('mandatory')
ibmappcInMdDfSyncLvl = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 13, 7, 2, 1, 4, 1, 21), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("none", 1), ("confirm", 2), ("syncPoint", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmappcInMdDfSyncLvl.setStatus('mandatory')
ibmappcInMdAcSyncLvl = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 13, 7, 2, 1, 4, 1, 22), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("none", 1), ("confirm", 2), ("syncPoint", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmappcInMdAcSyncLvl.setStatus('mandatory')
ibmappcInMdDfCrypto = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 13, 7, 2, 1, 4, 1, 23), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmappcInMdDfCrypto.setStatus('mandatory')
ibmappcInMdAcCrypto = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 13, 7, 2, 1, 4, 1, 24), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmappcInMdAcCrypto.setStatus('mandatory')
ibmappcInMdReinit = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 13, 7, 2, 1, 4, 1, 25), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("operatorControlled", 1), ("primaryOnly", 2), ("secondaryOnly", 3), ("primaryOrSecondary", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmappcInMdReinit.setStatus('mandatory')
ibmappcInMdAltCode = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 13, 7, 2, 1, 4, 1, 26), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmappcInMdAltCode.setStatus('mandatory')
ibmappcInMdActCwin = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 13, 7, 2, 1, 4, 1, 27), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmappcInMdActCwin.setStatus('mandatory')
ibmappcInMdActClos = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 13, 7, 2, 1, 4, 1, 28), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmappcInMdActClos.setStatus('mandatory')
ibmappcInMdPndCwin = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 13, 7, 2, 1, 4, 1, 29), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmappcInMdPndCwin.setStatus('mandatory')
ibmappcInMdPndClos = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 13, 7, 2, 1, 4, 1, 30), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmappcInMdPndClos.setStatus('mandatory')
ibmappcInMdPtmCwin = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 13, 7, 2, 1, 4, 1, 31), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmappcInMdPtmCwin.setStatus('mandatory')
ibmappcInMdPtmClos = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 13, 7, 2, 1, 4, 1, 32), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmappcInMdPtmClos.setStatus('mandatory')
ibmappcInMdFreeSessLst = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 13, 7, 2, 1, 4, 1, 33), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmappcInMdFreeSessLst.setStatus('mandatory')
ibmappcInMdWaitReqLst = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 13, 7, 2, 1, 4, 1, 34), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmappcInMdWaitReqLst.setStatus('mandatory')
ibmappcInLtpTable = MibTable((1, 3, 6, 1, 4, 1, 2, 6, 2, 13, 7, 2, 1, 5), )
if mibBuilder.loadTexts: ibmappcInLtpTable.setStatus('mandatory')
ibmappcInLtpEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2, 6, 2, 13, 7, 2, 1, 5, 1), ).setIndexNames((0, "IBM6611-MIB", "ibmappcInLtpLuName"), (0, "IBM6611-MIB", "ibmappcInLtpTpName"))
if mibBuilder.loadTexts: ibmappcInLtpEntry.setStatus('mandatory')
ibmappcInLtpLuName = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 13, 7, 2, 1, 5, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(3, 17))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmappcInLtpLuName.setStatus('mandatory')
ibmappcInLtpTpName = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 13, 7, 2, 1, 5, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmappcInLtpTpName.setStatus('mandatory')
ibmappcInLtpDefType = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 13, 7, 2, 1, 5, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("sysdef", 1), ("dynamic", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmappcInLtpDefType.setStatus('mandatory')
ibmappcInLtpSyncLvl = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 13, 7, 2, 1, 5, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("none", 1), ("confirm", 2), ("syncPoint", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmappcInLtpSyncLvl.setStatus('mandatory')
ibmappcInLtpInstLmt = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 13, 7, 2, 1, 5, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmappcInLtpInstLmt.setStatus('mandatory')
ibmappcInLtpInstNum = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 13, 7, 2, 1, 5, 1, 6), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmappcInLtpInstNum.setStatus('mandatory')
ibmappcInLtpStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 13, 7, 2, 1, 5, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("enabled", 1), ("tempDisabled", 2), ("permDisabled", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmappcInLtpStatus.setStatus('mandatory')
ibmappcInLtpLongRun = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 13, 7, 2, 1, 5, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmappcInLtpLongRun.setStatus('mandatory')
ibmappcInLtpPfCnos = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 13, 7, 2, 1, 5, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmappcInLtpPfCnos.setStatus('mandatory')
ibmappcInLtpPfSessCntl = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 13, 7, 2, 1, 5, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmappcInLtpPfSessCntl.setStatus('mandatory')
ibmappcInLtpPfDefine = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 13, 7, 2, 1, 5, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmappcInLtpPfDefine.setStatus('mandatory')
ibmappcInLtpPfDisplay = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 13, 7, 2, 1, 5, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmappcInLtpPfDisplay.setStatus('mandatory')
ibmappcInLtpPfAllocSer = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 13, 7, 2, 1, 5, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmappcInLtpPfAllocSer.setStatus('mandatory')
ibmappcInLtpRescSup = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 13, 7, 2, 1, 5, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("basicConv", 1), ("mappedConv", 2), ("allConv", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmappcInLtpRescSup.setStatus('mandatory')
ibmappcInLtpRecoSup = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 13, 7, 2, 1, 5, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmappcInLtpRecoSup.setStatus('mandatory')
ibmappcInLtpSecReq = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 13, 7, 2, 1, 5, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmappcInLtpSecReq.setStatus('mandatory')
ibmappcInLtpSecLvl = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 13, 7, 2, 1, 5, 1, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("noAdditional", 1), ("specificUsers", 2), ("specificProfiles", 3), ("specificUserProfiles", 4), ("specificUserLus", 5), ("specificUserProfLus", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmappcInLtpSecLvl.setStatus('mandatory')
ibmappcInLtpVerPip = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 13, 7, 2, 1, 5, 1, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmappcInLtpVerPip.setStatus('mandatory')
ibmappcInLtpPipSubNum = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 13, 7, 2, 1, 5, 1, 19), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmappcInLtpPipSubNum.setStatus('mandatory')
ibmappcInSsTable = MibTable((1, 3, 6, 1, 4, 1, 2, 6, 2, 13, 7, 2, 1, 6), )
if mibBuilder.loadTexts: ibmappcInSsTable.setStatus('mandatory')
ibmappcInSsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2, 6, 2, 13, 7, 2, 1, 6, 1), ).setIndexNames((0, "IBM6611-MIB", "ibmappcInSsFqLuName"), (0, "IBM6611-MIB", "ibmappcInSsPcid"))
if mibBuilder.loadTexts: ibmappcInSsEntry.setStatus('mandatory')
ibmappcInSsFqLuName = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 13, 7, 2, 1, 6, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(3, 17))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmappcInSsFqLuName.setStatus('mandatory')
ibmappcInSsPcid = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 13, 7, 2, 1, 6, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(8, 8)).setFixedLength(8)).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmappcInSsPcid.setStatus('mandatory')
ibmappcInSsPluName = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 13, 7, 2, 1, 6, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(3, 17))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmappcInSsPluName.setStatus('mandatory')
ibmappcInSsSluName = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 13, 7, 2, 1, 6, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(3, 17))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmappcInSsSluName.setStatus('mandatory')
ibmappcInSsModeName = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 13, 7, 2, 1, 6, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 8))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmappcInSsModeName.setStatus('mandatory')
ibmappcInSsCosName = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 13, 7, 2, 1, 6, 1, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 8))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmappcInSsCosName.setStatus('mandatory')
ibmappcInSsSessType = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 13, 7, 2, 1, 6, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("lu62", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmappcInSsSessType.setStatus('mandatory')
ibmappcInSsSessState = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 13, 7, 2, 1, 6, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("inactive", 1), ("pendactive", 2), ("active", 3), ("pendinact", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmappcInSsSessState.setStatus('mandatory')
ibmappcInSsTransPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 13, 7, 2, 1, 6, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmappcInSsTransPriority.setStatus('mandatory')
ibmappcInSsPaceType = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 13, 7, 2, 1, 6, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("none", 1), ("fixed", 2), ("adaptive", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmappcInSsPaceType.setStatus('mandatory')
ibmappcInSsSendMaxRuSz = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 13, 7, 2, 1, 6, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmappcInSsSendMaxRuSz.setStatus('mandatory')
ibmappcInSsRecvMaxRuSz = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 13, 7, 2, 1, 6, 1, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmappcInSsRecvMaxRuSz.setStatus('mandatory')
ibmappcInSsEnhanceSecSup = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 13, 7, 2, 1, 6, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("none", 1), ("level1", 2), ("level2", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmappcInSsEnhanceSecSup.setStatus('mandatory')
ibmappcInSsSendPacingType = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 13, 7, 2, 1, 6, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("none", 1), ("fixed", 2), ("adaptive", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmappcInSsSendPacingType.setStatus('mandatory')
ibmappcInSsSendRpc = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 13, 7, 2, 1, 6, 1, 15), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmappcInSsSendRpc.setStatus('mandatory')
ibmappcInSsSendNxWndwSize = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 13, 7, 2, 1, 6, 1, 16), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmappcInSsSendNxWndwSize.setStatus('mandatory')
ibmappcInSsRecvPacingType = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 13, 7, 2, 1, 6, 1, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("none", 1), ("fixed", 2), ("adaptive", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmappcInSsRecvPacingType.setStatus('mandatory')
ibmappcInSsRecvRpc = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 13, 7, 2, 1, 6, 1, 18), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmappcInSsRecvRpc.setStatus('mandatory')
ibmappcInSsRecvNxWndwSize = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 13, 7, 2, 1, 6, 1, 19), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmappcInSsRecvNxWndwSize.setStatus('mandatory')
ibmappcInSsSessStartTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 13, 7, 2, 1, 6, 1, 20), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmappcInSsSessStartTime.setStatus('mandatory')
ibmappcInSsSessUpTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 13, 7, 2, 1, 6, 1, 21), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmappcInSsSessUpTime.setStatus('mandatory')
ibmappcInSsCtrUpTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 13, 7, 2, 1, 6, 1, 22), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmappcInSsCtrUpTime.setStatus('mandatory')
ibmappcInSsP2SFmdPius = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 13, 7, 2, 1, 6, 1, 23), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmappcInSsP2SFmdPius.setStatus('mandatory')
ibmappcInSsS2PFmdPius = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 13, 7, 2, 1, 6, 1, 24), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmappcInSsS2PFmdPius.setStatus('mandatory')
ibmappcInSsP2SNonFmdPius = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 13, 7, 2, 1, 6, 1, 25), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmappcInSsP2SNonFmdPius.setStatus('mandatory')
ibmappcInSsS2PNonFmdPius = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 13, 7, 2, 1, 6, 1, 26), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmappcInSsS2PNonFmdPius.setStatus('mandatory')
ibmappcInSsP2SFmdBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 13, 7, 2, 1, 6, 1, 27), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmappcInSsP2SFmdBytes.setStatus('mandatory')
ibmappcInSsS2PFmdBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 13, 7, 2, 1, 6, 1, 28), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmappcInSsS2PFmdBytes.setStatus('mandatory')
ibmappcInSsP2SNonFmdBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 13, 7, 2, 1, 6, 1, 29), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmappcInSsP2SNonFmdBytes.setStatus('mandatory')
ibmappcInSsS2PNonFmdBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 13, 7, 2, 1, 6, 1, 30), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmappcInSsS2PNonFmdBytes.setStatus('mandatory')
ibmappcInSsRscv = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 13, 7, 2, 1, 6, 1, 31), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmappcInSsRscv.setStatus('mandatory')
ibmappcInSsStatusTable = MibTable((1, 3, 6, 1, 4, 1, 2, 6, 2, 13, 7, 2, 1, 7), )
if mibBuilder.loadTexts: ibmappcInSsStatusTable.setStatus('mandatory')
ibmappcInSsStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2, 6, 2, 13, 7, 2, 1, 7, 1), ).setIndexNames((0, "IBM6611-MIB", "ibmappcInSsStatusIndex"))
if mibBuilder.loadTexts: ibmappcInSsStatusEntry.setStatus('mandatory')
ibmappcInSsStatusIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 13, 7, 2, 1, 7, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmappcInSsStatusIndex.setStatus('mandatory')
ibmappcInSsStatusTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 13, 7, 2, 1, 7, 1, 2), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmappcInSsStatusTime.setStatus('mandatory')
ibmappcInSsStatusType = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 13, 7, 2, 1, 7, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("recvNegBindRsp", 1), ("sendNegBindRsp", 2), ("sessActRejected", 3), ("unbindSent", 4), ("unbindReceived", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmappcInSsStatusType.setStatus('mandatory')
ibmappcInSsStatusLocLuName = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 13, 7, 2, 1, 7, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(3, 17))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmappcInSsStatusLocLuName.setStatus('mandatory')
ibmappcInSsStatusParLuName = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 13, 7, 2, 1, 7, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(3, 17))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmappcInSsStatusParLuName.setStatus('mandatory')
ibmappcInSsStatusModeName = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 13, 7, 2, 1, 7, 1, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 8))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmappcInSsStatusModeName.setStatus('mandatory')
ibmappcInSsStatusUnbindType = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 13, 7, 2, 1, 7, 1, 7), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 1)).setFixedLength(1)).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmappcInSsStatusUnbindType.setStatus('mandatory')
ibmappcInSsStatusSenseCode = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 13, 7, 2, 1, 7, 1, 8), OctetString().subtype(subtypeSpec=ValueSizeConstraint(4, 4)).setFixedLength(4)).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmappcInSsStatusSenseCode.setStatus('mandatory')
ibmappcInSsStatusComponentId = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 13, 7, 2, 1, 7, 1, 9), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 8))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmappcInSsStatusComponentId.setStatus('mandatory')
ibmappcInSsStatusDetectModule = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 13, 7, 2, 1, 7, 1, 10), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 8))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmappcInSsStatusDetectModule.setStatus('mandatory')
mibBuilder.exportSymbols("IBM6611-MIB", ibmappnNnTopoTgGoodHighRsns=ibmappnNnTopoTgGoodHighRsns, ibmappnNnTgTopologyTable=ibmappnNnTgTopologyTable, ibmipxsapStatInErrors=ibmipxsapStatInErrors, ibmvRTP=ibmvRTP, ibmappnIsInS2PNonFmdPius=ibmappnIsInS2PNonFmdPius, ibmappnNodeLsStatusRemoteAddr=ibmappnNodeLsStatusRemoteAddr, ibmappnLocalTgDest=ibmappnLocalTgDest, ibmvifTable=ibmvifTable, ibmappnCosTgRowUsr2Min=ibmappnCosTgRowUsr2Min, ibmappnConvEndPoint=ibmappnConvEndPoint, ibmsapFilterIn=ibmsapFilterIn, ibmappnNodeLsSubState=ibmappnNodeLsSubState, ibmappnNodeLsInMsgFrames=ibmappnNodeLsInMsgFrames, ibmptyqueue=ibmptyqueue, ibmappnNodeLsStartTime=ibmappnNodeLsStartTime, ibmFiltOrderInTable=ibmFiltOrderInTable, ibmfrCircuitState=ibmfrCircuitState, ibmdot1dStpPriority=ibmdot1dStpPriority, ibmvNbrMetric=ibmvNbrMetric, ibmfr=ibmfr, ibmappcInLtpStatus=ibmappcInLtpStatus, ibmdlsCirLocalLinkCmdPollsSent=ibmdlsCirLocalLinkCmdPollsSent, ibmpppLCPEntry=ibmpppLCPEntry, ibmappcInMdWaitReqLst=ibmappcInMdWaitReqLst, ibmsnapFilterIfIndex=ibmsnapFilterIfIndex, ibmappnNnTgFRDelay=ibmappnNnTgFRDelay, ibmringFilterInBcastType=ibmringFilterInBcastType, cylinkIndex=cylinkIndex, ibmappnCosTgRowDelayMax=ibmappnCosTgRowDelayMax, ibmsnapFilterInfoTable=ibmsnapFilterInfoTable, swvpdRelId=swvpdRelId, ibmapple=ibmapple, ibmappnNodePortDefLsBadXids=ibmappnNodePortDefLsBadXids, ibmdlsCirPartnerRouterAddress=ibmdlsCirPartnerRouterAddress, ibmdot1dStpBridgeHelloTime=ibmdot1dStpBridgeHelloTime, ibmappnNodeLsInMsgBytes=ibmappnNodeLsInMsgBytes, ibmappnNodeLsRemoteDlsMac=ibmappnNodeLsRemoteDlsMac, ibmpppLinkQualityTable=ibmpppLinkQualityTable, ibmappnSnmpInSetRequests=ibmappnSnmpInSetRequests, ibmappnIsAccounting=ibmappnIsAccounting, ibmappnIsAcTimeForMedia=ibmappnIsAcTimeForMedia, ibmappnNodeLsRemoteDlsSap=ibmappnNodeLsRemoteDlsSap, ibmwindowFilterInfoEntry=ibmwindowFilterInfoEntry, ibmipxidpBadLen=ibmipxidpBadLen, ibmappnNodeLsIpName=ibmappnNodeLsIpName, ibmappnNodeLsTrName=ibmappnNodeLsTrName, ibmtbwinFiltOutContents=ibmtbwinFiltOutContents, ibmappnIsAcP2SFmdPius=ibmappnIsAcP2SFmdPius, ibmdecLANCircuitSourceRoute=ibmdecLANCircuitSourceRoute, ibmpppLCPOutOctets=ibmpppLCPOutOctets, ibmtbmacFiltInSrcAddress=ibmtbmacFiltInSrcAddress, swVpdTable=swVpdTable, ibmipFilterMask2=ibmipFilterMask2, ibmappnNodeLsDynamic=ibmappnNodeLsDynamic, ibmpppIPCPInOctets=ibmpppIPCPInOctets, ibmappcInSsStatusLocLuName=ibmappcInSsStatusLocLuName, ibmipxsapServerNet=ibmipxsapServerNet, ibmtbEthTypeFiltInNotForwarded=ibmtbEthTypeFiltInNotForwarded, ibmappnNnTopoRouteCos=ibmappnNnTopoRouteCos, ibmtbmacFiltOutNotForwarded=ibmtbmacFiltOutNotForwarded, ibmappnDirTable=ibmappnDirTable, ibmvFRPreassembles=ibmvFRPreassembles, ibmappnIsInRouteInfo=ibmappnIsInRouteInfo, ibmdlsLocalNameFilterEntry=ibmdlsLocalNameFilterEntry, ibmappnNodeSegReasm=ibmappnNodeSegReasm, ibmxnsErrUnspec=ibmxnsErrUnspec, ibmSelectNetZone=ibmSelectNetZone, ibmappnLocalEnTgByteCost=ibmappnLocalEnTgByteCost, ibmipxFilterType=ibmipxFilterType, ibmipxsapStatOutRequests=ibmipxsapStatOutRequests, ibmappnNodeLsBlockNum=ibmappnNodeLsBlockNum, ibmtbSAPFilters=ibmtbSAPFilters, ibmappnNodeLsLimResource=ibmappnNodeLsLimResource, ibmxnsErrChecksum=ibmxnsErrChecksum, ibmtbEthTypeFiltInfoTable=ibmtbEthTypeFiltInfoTable, ibmsysRealMemSize=ibmsysRealMemSize, ibmappnIsInCosName=ibmappnIsInCosName, ibmappnNnNodeCentralDirectory=ibmappnNnNodeCentralDirectory, ibmsnapFilterOutNotForwarded=ibmsnapFilterOutNotForwarded, ibmipPtyQueueEnable=ibmipPtyQueueEnable, ibmsysMBUFsInUses=ibmsysMBUFsInUses, ibmappnEnUniqueCaps=ibmappnEnUniqueCaps, ibmappnCosNodeRowName=ibmappnCosNodeRowName, ibmappnNodeLsIpEntry=ibmappnNodeLsIpEntry, ibmipFilterAddr1=ibmipFilterAddr1, ibmdlsCirLocalLinkTestCmdsFail=ibmdlsCirLocalLinkTestCmdsFail, ibmpppLCPInTRs=ibmpppLCPInTRs, swvpdModId=swvpdModId, cylinkConfigIndex=cylinkConfigIndex, ibmappcInSsS2PFmdPius=ibmappcInSsS2PFmdPius, ibmappnNodeLsUsr3=ibmappnNodeLsUsr3, ibmFiltOrderInIfIndex=ibmFiltOrderInIfIndex, ibmappnNodeLsOutMsgBytes=ibmappnNodeLsOutMsgBytes, ibmappcInMdDfSyncLvl=ibmappcInMdDfSyncLvl, ibmwindowFilterIfIndex=ibmwindowFilterIfIndex, ibmvIP=ibmvIP, ibmsnapFilterOutFilterType=ibmsnapFilterOutFilterType, ibmvRtCfgInFlt=ibmvRtCfgInFlt, ibmtbmacFiltInDestMask=ibmtbmacFiltInDestMask, ibmdlsStationRetransmitCount=ibmdlsStationRetransmitCount, ibmvipBcast=ibmvipBcast, ibmtbFiltOrderOutName=ibmtbFiltOrderOutName, ibmappnLocalEnTgEffCap=ibmappnLocalEnTgEffCap, ibmvNbrLocAddress=ibmvNbrLocAddress, ibmappnNodeLsUsr1=ibmappnNodeLsUsr1, ibmbridgeFiltOrderTable=ibmbridgeFiltOrderTable, ibmipFilterExtTable=ibmipFilterExtTable, ibmfrErrTime=ibmfrErrTime, ibmpppLinkQualityEntry=ibmpppLinkQualityEntry, ibmtbmacFiltInFilterType=ibmtbmacFiltInFilterType, ibmappn=ibmappn, ibmappnIsAcBufTable=ibmappnIsAcBufTable, ibmappcInRluDefEnhanSecSup=ibmappcInRluDefEnhanSecSup, ibmringFilterInfoEntry=ibmringFilterInfoEntry, ibmipxidpOutDiscards=ibmipxidpOutDiscards, ibmappnLocalEnEntry=ibmappnLocalEnEntry, ibmtbmacFiltInfoEntry=ibmtbmacFiltInfoEntry, ibmappcInMdDefType=ibmappcInMdDefType, ibmvipRouted=ibmvipRouted, ibmatportFilterNetEnd=ibmatportFilterNetEnd, ibmappcInGlobeCtrStatusTime=ibmappcInGlobeCtrStatusTime, ibmappnNodeLsLocalIpPortNum=ibmappnNodeLsLocalIpPortNum, ibmsnapFilterInMask=ibmsnapFilterInMask, ibmrpq=ibmrpq, ibmappnNnTgFRNum=ibmappnNnTgFRNum, ibmappcInSsStatusEntry=ibmappcInSsStatusEntry, ibmdot1dStatic=ibmdot1dStatic, ibmipxidpChecksum=ibmipxidpChecksum, ibmappnDirMaxCaches=ibmappnDirMaxCaches, ibmdlsRemoteFrameFilterEntry=ibmdlsRemoteFrameFilterEntry, ibmappcInSsPcid=ibmappcInSsPcid, ibmappnIsAcTimeMgrUtcIsdst=ibmappnIsAcTimeMgrUtcIsdst, ibmsapFilterOutNotForwarded=ibmsapFilterOutNotForwarded, ibmdot1dTpFdbTable=ibmdot1dTpFdbTable, ibmdlsCirLocalAddress=ibmdlsCirLocalAddress, ibmappnNodeLsOutXidFrames=ibmappnNodeLsOutXidFrames, ibmvNbrSubNetid=ibmvNbrSubNetid, cylinkSoftwareVersion=cylinkSoftwareVersion, ibmvrtpUpdRecs=ibmvrtpUpdRecs, ibmappnDirServerName=ibmappnDirServerName, ibmappnIsAcBtypePrdMaxBufs=ibmappnIsAcBtypePrdMaxBufs, ibmappcInRluDefSessSecSup=ibmappcInRluDefSessSecSup, ibmappnNodeLsStatusDlcType=ibmappnNodeLsStatusDlcType, ibmfrCircuitReceivedFrames=ibmfrCircuitReceivedFrames, ibmdlsRemoteNameFilterID=ibmdlsRemoteNameFilterID, ibmpppIPCPEntry=ibmpppIPCPEntry, ibmpppLinkPhysical=ibmpppLinkPhysical, ibmfrCircuitSentFrames=ibmfrCircuitSentFrames, ibmappnMemoryCritThresh=ibmappnMemoryCritThresh, ibmpppLinkCurrentState=ibmpppLinkCurrentState, ibmappnNnNodeFRRouteAddResist=ibmappnNnNodeFRRouteAddResist, ibmappnIsInformation=ibmappnIsInformation, ibmappcInMdRecvRuSzUpBnd=ibmappcInMdRecvRuSzUpBnd, ibmxnsidpBcastInReceives=ibmxnsidpBcastInReceives, ibmappcInMdTable=ibmappcInMdTable, ibmappcInMdPrefRecvRuSz=ibmappcInMdPrefRecvRuSz, ibmTrapNum=ibmTrapNum, swvpdIndex=swvpdIndex, ibmappcInSsSessType=ibmappcInSsSessType, ibmmacAddrFilterInDestMask=ibmmacAddrFilterInDestMask, ibmwindowFilterInFilterType=ibmwindowFilterInFilterType, ibmappnNodeNetid=ibmappnNodeNetid, ibmappnIsAcPriLuName=ibmappnIsAcPriLuName, ibmappnNodeLsInXidFrames=ibmappnNodeLsInXidFrames, ibmappnNodePortDlcTracLocalAddr=ibmappnNodePortDlcTracLocalAddr, ibmappnNodeLsDlsState=ibmappnNodeLsDlsState, ibmappcInMdLluName=ibmappcInMdLluName, cylinkDTEDS1Mode=cylinkDTEDS1Mode, ibmipPtyQueueTable=ibmipPtyQueueTable, ibmtbsapFiltInNotForwarded=ibmtbsapFiltInNotForwarded, ibmxnsAddrEntry=ibmxnsAddrEntry, ibmdlsCirLocalLinkAdpRcvErr=ibmdlsCirLocalLinkAdpRcvErr, ibmappnLocalGeneral=ibmappnLocalGeneral, ibmappnNodeLsTrState=ibmappnNodeLsTrState, ibmatportFilter=ibmatportFilter, ibmChipSetSigneticsSCN68562=ibmChipSetSigneticsSCN68562, ibmpppLCPOutTAs=ibmpppLCPOutTAs, ibmappnNnTgFREffCap=ibmappnNnTgFREffCap, ibmdlsStationPrimarySlowListTimeout=ibmdlsStationPrimarySlowListTimeout, ibmappcInMdRluName=ibmappcInMdRluName, ibmappnCosTgRowWgt=ibmappnCosTgRowWgt, ibmappnIsAcTimeAgtUtcMdays=ibmappnIsAcTimeAgtUtcMdays, ibmdot1dStpRootPort=ibmdot1dStpRootPort, ibmappnLocalEnTgConnCost=ibmappnLocalEnTgConnCost, ibmappcInSsRecvMaxRuSz=ibmappcInSsRecvMaxRuSz, ibmappnIsAcP2SNonFmdPius=ibmappnIsAcP2SNonFmdPius, ibmFiltOrderOutEntry=ibmFiltOrderOutEntry, ibmxnsidpBadSum=ibmxnsidpBadSum, ibmRIFFilterIfIndex=ibmRIFFilterIfIndex, ibmipxFilterIfIndex=ibmipxFilterIfIndex, ibmpppLinkStatusEntry=ibmpppLinkStatusEntry, ibmappnMemoryUse=ibmappnMemoryUse, ibm=ibm, ibmappnNodeLsStatusNofRetry=ibmappnNodeLsStatusNofRetry, ibmappnIsAcBtypeFullAction=ibmappnIsAcBtypeFullAction, ibmipxFilterValue=ibmipxFilterValue, ibmvPortCfgIfIndex=ibmvPortCfgIfIndex, ibmxnsidpZeroDirBcast=ibmxnsidpZeroDirBcast, ibmappnNodeLsMaxDelayTime=ibmappnNodeLsMaxDelayTime, ibmappcInRluActSessSecSup=ibmappcInRluActSessSecSup, ibmipxRouteIfIndex=ibmipxRouteIfIndex, ibmappnIsInSsAdjTgNum=ibmappnIsInSsAdjTgNum, ibmipxsapServerRequestsFiltered=ibmipxsapServerRequestsFiltered, ibmdot1dBase=ibmdot1dBase, ibmvRtNetid=ibmvRtNetid, ibmappnNodeNnRouteAddResist=ibmappnNodeNnRouteAddResist, ibmappnIsAcBtypeFullWraps=ibmappnIsAcBtypeFullWraps, ibmvInterface=ibmvInterface, ibmappnNodeEnSegGen=ibmappnNodeEnSegGen, ibmringFilterOutFilterType=ibmringFilterOutFilterType, ibmappnNnTgFROwner=ibmappnNnTgFROwner, ibmFiltOrderOutTable=ibmFiltOrderOutTable, ibmpppLCPInPackets=ibmpppLCPInPackets, ibmappnNodePortIpTable=ibmappnNodePortIpTable, ibmipxsapStatInRequests=ibmipxsapStatInRequests, ibmappnLocalEnTgUsr3=ibmappnLocalEnTgUsr3, ibmappnNodeEnSendRegChar=ibmappnNodeEnSendRegChar, ibmappnIsInP2SFmdBytes=ibmappnIsInP2SFmdBytes, ibmvRtCfgOutFltMode=ibmvRtCfgOutFltMode, ibmappnNodeLsOutMsgFrames=ibmappnNodeLsOutMsgFrames, ibmipFilterMask1=ibmipFilterMask1, ibmsnapFilterInfoEntry=ibmsnapFilterInfoEntry, ibmappnNnNodeFRRsn=ibmappnNnNodeFRRsn, ibmwindowFilterInType=ibmwindowFilterInType, ibmappnNodePortDlcTracIndex=ibmappnNodePortDlcTracIndex, ibmappcInRluDefAttSecSup=ibmappcInRluDefAttSecSup, ibmtbEthTypeFiltOutValue=ibmtbEthTypeFiltOutValue, ibmmacAddrFilterOutDestAddress=ibmmacAddrFilterOutDestAddress, ibmipxidpInDiscards=ibmipxidpInDiscards, ibmpppLinkInTxPackets=ibmpppLinkInTxPackets, ibmwindowFilterInNotForwarded=ibmwindowFilterInNotForwarded, ibmvFRPfragmented=ibmvFRPfragmented, ibmipxConfigTable=ibmipxConfigTable, ibmvFltTable=ibmvFltTable, ibmtbwinFiltInIfIndex=ibmtbwinFiltInIfIndex, ibmipxAddrTable=ibmipxAddrTable, ibmvNbrTable=ibmvNbrTable, ibmipFilterAddr2=ibmipFilterAddr2, ibmdlsStationPrimaryRepollThreshold=ibmdlsStationPrimaryRepollThreshold, ibmappnNodePortIpEntry=ibmappnNodePortIpEntry, ibmpppLCPInCAs=ibmpppLCPInCAs, ibmdot1dBaseNumPorts=ibmdot1dBaseNumPorts, ibmSelectNetFilterIndex=ibmSelectNetFilterIndex, ibmpppLinkProtocolCompression=ibmpppLinkProtocolCompression, ibmdot1dTpPortMaxInfo=ibmdot1dTpPortMaxInfo, ibmappnCosNodeRowMinCongestAllow=ibmappnCosNodeRowMinCongestAllow, ibmdlsCirSrcAddress=ibmdlsCirSrcAddress, ibmvNbrType=ibmvNbrType, ibmipPtyQueueType=ibmipPtyQueueType, cylinkDIUFrequency=cylinkDIUFrequency, ibmappnNodePortDefLsGoodXids=ibmappnNodePortDefLsGoodXids, ibmappnNnTopoRouteTable=ibmappnNnTopoRouteTable, ibmtbwinFiltInNotForwarded=ibmtbwinFiltInNotForwarded, ibmappcInRluActType=ibmappcInRluActType)
mibBuilder.exportSymbols("IBM6611-MIB", ibmsnapFilterOutType=ibmsnapFilterOutType, ibmappnIsAcIndex=ibmappnIsAcIndex, ibmappcInSsS2PNonFmdBytes=ibmappcInSsS2PNonFmdBytes, ibmappnNnTopology=ibmappnNnTopology, ibmappnCosTgRowUsr3Max=ibmappnCosTgRowUsr3Max, ibmvSysRtr=ibmvSysRtr, swvpdAction=swvpdAction, ibmdot1dStp=ibmdot1dStp, ibmtbwinFiltIfIndex=ibmtbwinFiltIfIndex, ibmappnNnTgUsr3=ibmappnNnTgUsr3, ibmdot1dBasePortIfIndex=ibmdot1dBasePortIfIndex, ibmxnsFilterValue=ibmxnsFilterValue, ibmpppLinkBadControls=ibmpppLinkBadControls, ibmmacAddrFilterInfoTable=ibmmacAddrFilterInfoTable, ibmappnNodeLsRemoteTrMac=ibmappnNodeLsRemoteTrMac, ibmtbsapFiltOutNotForwarded=ibmtbsapFiltOutNotForwarded, ibmringFilterOutMask=ibmringFilterOutMask, ibmipFilterExtValue=ibmipFilterExtValue, ibmappnLocalEnName=ibmappnLocalEnName, ibmappnLocalNnGateway=ibmappnLocalNnGateway, ibmvines=ibmvines, ibmdlsRouterAddress=ibmdlsRouterAddress, ibmRIFFilterInRouteDesignator=ibmRIFFilterInRouteDesignator, ibmdot1dTpPortInFrames=ibmdot1dTpPortInFrames, ibmwindowFilterInEntry=ibmwindowFilterInEntry, ibmipxsapStatInResponses=ibmipxsapStatInResponses, ibmdlsLocalFrameFilterSrcMask=ibmdlsLocalFrameFilterSrcMask, ibmxnsidpMcastOutRequests=ibmxnsidpMcastOutRequests, ibmtbmacFiltInEntry=ibmtbmacFiltInEntry, ibmdec=ibmdec, ibmappnNnTopoTgBadHighRsns=ibmappnNnTopoTgBadHighRsns, ibmappcInMdSendRuSzLoBnd=ibmappcInMdSendRuSzLoBnd, ibmtbEthTypeFiltInValue=ibmtbEthTypeFiltInValue, ibmappnNnTopoTotalRouteRejs=ibmappnNnTopoTotalRouteRejs, ibmappnNnTopoNodeErrors=ibmappnNnTopoNodeErrors, ibmdlsLocalFrameFilterTable=ibmdlsLocalFrameFilterTable, cylinkOnesResponsibility=cylinkOnesResponsibility, ibmvFltEntry=ibmvFltEntry, ibmappnLocalEnEntryTimeLeft=ibmappnLocalEnEntryTimeLeft, ibmipxLoopbackActive=ibmipxLoopbackActive, ibmmaint=ibmmaint, ibmtbwinFiltOutFilterType=ibmtbwinFiltOutFilterType, ibmvRtGateNetid=ibmvRtGateNetid, ibmappcInSsSluName=ibmappcInSsSluName, ibmpppIPInPackets=ibmpppIPInPackets, ibmfrCircuitCommittedBurst=ibmfrCircuitCommittedBurst, ibmdlsDefaultNBRouterAddress=ibmdlsDefaultNBRouterAddress, ibmappnIsAcRecTime=ibmappnIsAcRecTime, ibmappnIsInSsSendMaxBtuSize=ibmappnIsInSsSendMaxBtuSize, ibmatportFilterTable=ibmatportFilterTable, ibmdlsCirEntry=ibmdlsCirEntry, ibmappnNnTopoInTdus=ibmappnNnTopoInTdus, ibmappnCosModeName=ibmappnCosModeName, ibmappnNnTgDlcData=ibmappnNnTgDlcData, ibmdlsDefaultDestEntry=ibmdlsDefaultDestEntry, ibmvRtCfgInFltTable=ibmvRtCfgInFltTable, ibmPtyQueueingEntry=ibmPtyQueueingEntry, ibmPtyQueueingTable=ibmPtyQueueingTable, ibmappnNnTgDestVirtual=ibmappnNnTgDestVirtual, ibmdot1dTpLearnedEntryDiscards=ibmdot1dTpLearnedEntryDiscards, ibmsnapFilterOutValue=ibmsnapFilterOutValue, ibmappnLocalNnSpecific=ibmappnLocalNnSpecific, ibmtbwinFiltInfoEntry=ibmtbwinFiltInfoEntry, ibmdot1dStpPortEntry=ibmdot1dStpPortEntry, ibmwindowFilterOutNotForwarded=ibmwindowFilterOutNotForwarded, ibmpppLinkCRCSize=ibmpppLinkCRCSize, ibmbridgeHopCountFilters=ibmbridgeHopCountFilters, ibmxnsFilterHCCompare=ibmxnsFilterHCCompare, ibmappnIsInPsRecvNxWndwSize=ibmappnIsInPsRecvNxWndwSize, ibmicmp=ibmicmp, ibmappcInMdActClos=ibmappcInMdActClos, ibmvFRPfragsReassembled=ibmvFRPfragsReassembled, ibmappnLocalTgModemClass=ibmappnLocalTgModemClass, ibmxnsErrTooBig=ibmxnsErrTooBig, ibmxnsErrUnreach=ibmxnsErrUnreach, ibmappnNnAdjNodeAdjName=ibmappnNnAdjNodeAdjName, ibmdot1dStpTopChanges=ibmdot1dStpTopChanges, ibmvNbrLocPort=ibmvNbrLocPort, cylinkDTEFraming=cylinkDTEFraming, ibmSelectNet=ibmSelectNet, ibmappnIsAcTimeMgrName=ibmappnIsAcTimeMgrName, ibmdlsRemoteNameFilterDestAddress=ibmdlsRemoteNameFilterDestAddress, ibmvRtCfgOutFlt=ibmvRtCfgOutFlt, ibmTGIfIndex=ibmTGIfIndex, ibmappnNodePortTrMac=ibmappnNodePortTrMac, ibmpppLinkLocalQualityPeriod=ibmpppLinkLocalQualityPeriod, ibmpppIPEntry=ibmpppIPEntry, ibmipxsapServerAge=ibmipxsapServerAge, ibmtbwinFiltInMaskString=ibmtbwinFiltInMaskString, ibmsnapFilterInNotForwarded=ibmsnapFilterInNotForwarded, ibmSelectNetNetStart=ibmSelectNetNetStart, ibmappnNodeAdaptiveBindPacing=ibmappnNodeAdaptiveBindPacing, ibmappnSession=ibmappnSession, ibmappnIsAcBtypeFullLosts=ibmappnIsAcBtypeFullLosts, ibmappnNodeUpTime=ibmappnNodeUpTime, cylinkESThreshold=cylinkESThreshold, ibmipxidpBadTTL=ibmipxidpBadTTL, ibmmacAddrFilterOutType=ibmmacAddrFilterOutType, ibmappnConversation=ibmappnConversation, ibmappnLocalEnTgDelay=ibmappnLocalEnTgDelay, ibmappnNodeLsRemoteTrSap=ibmappnNodeLsRemoteTrSap, ibmfrDlcmiAddress=ibmfrDlcmiAddress, ibmRIFFilterOutEntry=ibmRIFFilterOutEntry, ibmappnLocalTgConnCost=ibmappnLocalTgConnCost, ibmappnIsAcBtypePrdRecPerBuf=ibmappnIsAcBtypePrdRecPerBuf, ibmappnNnTgFRCpCpSession=ibmappnNnTgFRCpCpSession, ibmappnNnTopoNodeBadHighRsns=ibmappnNnTopoNodeBadHighRsns, ibmappnIsAcGlobeMgrUtcWdays=ibmappnIsAcGlobeMgrUtcWdays, ibmRIFFilterInRingNumber=ibmRIFFilterInRingNumber, ibmappnNodePortDynLsGoodXids=ibmappnNodePortDynLsGoodXids, ibmwindowFilterInOffsetStart=ibmwindowFilterInOffsetStart, ibmappcInMdMaxSessLimit=ibmappcInMdMaxSessLimit, ibmappcInMdFreeSessLst=ibmappcInMdFreeSessLst, ibmwindowFilterInfoTable=ibmwindowFilterInfoTable, ibmpppLinkControlEntry=ibmpppLinkControlEntry, ibmipxFilterEntry=ibmipxFilterEntry, ibmpppIPCPOutPackets=ibmpppIPCPOutPackets, ibmappnNodeLsBadXids=ibmappnNodeLsBadXids, ibmappnNodePortDlcTracCmdType=ibmappnNodePortDlcTracCmdType, ibmappnNnTgConnCost=ibmappnNnTgConnCost, ibmvRtIdle=ibmvRtIdle, ibmTGEntry=ibmTGEntry, ibmTrapThrottleTime=ibmTrapThrottleTime, ibmdot1dTpPort=ibmdot1dTpPort, ibmdlsStationMaxIfieldSize=ibmdlsStationMaxIfieldSize, ibmappnNodePortEntry=ibmappnNodePortEntry, ibmsysPageSpace=ibmsysPageSpace, ibmappcInMdPndCwin=ibmappcInMdPndCwin, ibmappcInMdReinit=ibmappcInMdReinit, ibmipxidpOutNoRoutes=ibmipxidpOutNoRoutes, ibmappnIsAcGlobeMgrUtcSecs=ibmappnIsAcGlobeMgrUtcSecs, ibmappnIsAcP2SNonFmdBytes=ibmappnIsAcP2SNonFmdBytes, ibmdlsDefaultDestTable=ibmdlsDefaultDestTable, ibmdot1dStaticReceivePort=ibmdot1dStaticReceivePort, ibmappcInSsP2SFmdBytes=ibmappcInSsP2SFmdBytes, ibmvFRPreasFails=ibmvFRPreasFails, ibmappnCosModeCosName=ibmappnCosModeCosName, ibmappnNodeEnSendRegNames=ibmappnNodeEnSendRegNames, ibmvNbrAging=ibmvNbrAging, ibmdot1dTpFdbEntry=ibmdot1dTpFdbEntry, ibmpppLinkMeasurementsValid=ibmpppLinkMeasurementsValid, ibmappcInSsStatusUnbindType=ibmappcInSsStatusUnbindType, ibmappnIsAcBtypeResets=ibmappnIsAcBtypeResets, ibmhopCountFilterInfoTable=ibmhopCountFilterInfoTable, ibmsapFilterInBcastType=ibmsapFilterInBcastType, ibmappnLinkStationInformation=ibmappnLinkStationInformation, ibmppp=ibmppp, ibmdlsCirLocalLinkTestCmdsSent=ibmdlsCirLocalLinkTestCmdsSent, ibmvFRP=ibmvFRP, ibmappnNodeLsLocalDlsSap=ibmappnNodeLsLocalDlsSap, ibmvicpMetricGens=ibmvicpMetricGens, ibmappnCosTgRowIndex=ibmappnCosTgRowIndex, swvpdPtfName=swvpdPtfName, ibmRIFFilterOutRingNumber=ibmRIFFilterOutRingNumber, ibmappnNnTgEntryTimeLeft=ibmappnNnTgEntryTimeLeft, ibmxnsAddrAddress=ibmxnsAddrAddress, ibmappcInLluLuName=ibmappcInLluLuName, ibmxnsErrResources=ibmxnsErrResources, ibmappnLocalNodeType=ibmappnLocalNodeType, ibmvPortCfgMetric=ibmvPortCfgMetric, ibmsnapFilterOutEntry=ibmsnapFilterOutEntry, ibmdlsRouterStatus=ibmdlsRouterStatus, ibmappcInSsSendNxWndwSize=ibmappcInSsSendNxWndwSize, ibmvRouterName=ibmvRouterName, ibmappnLocalTgQuiescing=ibmappnLocalTgQuiescing, ibmdot1dStpHelloTime=ibmdot1dStpHelloTime, ibmappnNodeLsMinDelay=ibmappnNodeLsMinDelay, ibmappnDirPerf=ibmappnDirPerf, ibmProd=ibmProd, ibmappnCosTgRowEffCapMin=ibmappnCosTgRowEffCapMin, ibmvipTooSmalls=ibmvipTooSmalls, ibmvipBad=ibmvipBad, ibmappnNnTopoRouteCalcs=ibmappnNnTopoRouteCalcs, ibmfrDlcmiAddressLen=ibmfrDlcmiAddressLen, ibmappnNnAdjNodeCpCpSessStatus=ibmappnNnAdjNodeCpCpSessStatus, ibmappnIsAcBtypeActive=ibmappnIsAcBtypeActive, ibmxnsPortStatus=ibmxnsPortStatus, ibmappnNodeLsStatusXidBitInError=ibmappnNodeLsStatusXidBitInError, ibmappnCosTgRowByteCostMin=ibmappnCosTgRowByteCostMin, ibmtbwinFiltInfoTable=ibmtbwinFiltInfoTable, swVpdEntry=swVpdEntry, ibmtbwinFiltOutId=ibmtbwinFiltOutId, ibmappnIsInSessStartTime=ibmappnIsInSessStartTime, ibmvNbrFlags=ibmvNbrFlags, ibmappcInMdSendPacWinSz=ibmappcInMdSendPacWinSz, ibmdlsStationEntry=ibmdlsStationEntry, ibmappnNodePortSIMRIM=ibmappnNodePortSIMRIM, ibmdlsLocalFrameFilterSrcAddress=ibmdlsLocalFrameFilterSrcAddress, ibmdecAllEndNodesFuncAddr=ibmdecAllEndNodesFuncAddr, ibmappcInLtpRescSup=ibmappcInLtpRescSup, ibmappnIsInPriLuName=ibmappnIsInPriLuName, ibmxnsConfigTable=ibmxnsConfigTable, ibmappnNodePortTrEntry=ibmappnNodePortTrEntry, ibmappnIsAcBtypeDirName=ibmappnIsAcBtypeDirName, ibmxnsPortIfIndex=ibmxnsPortIfIndex, ibmdlsRemoteFrameFilterSrcAddress=ibmdlsRemoteFrameFilterSrcAddress, ibmtbFiltOrderInTable=ibmtbFiltOrderInTable, ibmpppLCPOutCRs=ibmpppLCPOutCRs, ibmmacAddrFilterOutFilterType=ibmmacAddrFilterOutFilterType, ibmvRtCfgOutFltEntry=ibmvRtCfgOutFltEntry, ibmdlsCirLocalConnectionState=ibmdlsCirLocalConnectionState, ibmappnIsInCtrUpTime=ibmappnIsInCtrUpTime, ibmappnNn=ibmappnNn, ibmappnNodeLsRemoteIpPortNum=ibmappnNodeLsRemoteIpPortNum, ibmappnIsInGlobeStatus=ibmappnIsInGlobeStatus, ibmappnIsAcTimeIndex=ibmappnIsAcTimeIndex, ibmsnapFilterInTable=ibmsnapFilterInTable, ibmxnsidpBadTTL=ibmxnsidpBadTTL, ibmdlsRouterOutFrames=ibmdlsRouterOutFrames, ibmvRtCfgOutFltUses=ibmvRtCfgOutFltUses, ibmappnIsInP2SFmdPius=ibmappnIsInP2SFmdPius, ibmvFltIfIndex=ibmvFltIfIndex, ibmdecSplitHorPoisonRev=ibmdecSplitHorPoisonRev, ibmtbFiltOrderInPriority=ibmtbFiltOrderInPriority, ibmappcInSsStatusComponentId=ibmappcInSsStatusComponentId, ibmappnNodeLsByteCost=ibmappnNodeLsByteCost, ibmappnCosNodeRowTable=ibmappnCosNodeRowTable, ibmpppLinkInRxPackets=ibmpppLinkInRxPackets, ibmvPortCfgEntry=ibmvPortCfgEntry, ibmappnNodeLsActiveTime=ibmappnNodeLsActiveTime, ibmtbEthTypeFiltOutNotForwarded=ibmtbEthTypeFiltOutNotForwarded, ibmdlsLocalFrameFilterEntry=ibmdlsLocalFrameFilterEntry, ibmappcInRluTable=ibmappcInRluTable, cylinkClockBackup=cylinkClockBackup, ibmappnIsInPsSendPacingType=ibmappnIsInPsSendPacingType, ibmappnIsInGlobeRscv=ibmappnIsInGlobeRscv, ibmappnIsAcTimeMgrUtcYdays=ibmappnIsAcTimeMgrUtcYdays, ibmappnIsInPsSendNxWndwSize=ibmappnIsInPsSendNxWndwSize, ibmappcInSsS2PFmdBytes=ibmappcInSsS2PFmdBytes, ibmappnSnmpInGetVars=ibmappnSnmpInGetVars, ibmSelectNetFilterNetEnd=ibmSelectNetFilterNetEnd, ibmvFRPfrgCreated=ibmvFRPfrgCreated, cylinkDIUTiming=cylinkDIUTiming, ibmappcInSsRecvNxWndwSize=ibmappcInSsRecvNxWndwSize, ibmtbmacFiltInfoTable=ibmtbmacFiltInfoTable, ibmappnNodeLsInXidBytes=ibmappnNodeLsInXidBytes, ibmvRtCfgOutFltNetID=ibmvRtCfgOutFltNetID, ibmappnNodeNnTreeCache=ibmappnNodeNnTreeCache, ibmTGGroupName=ibmTGGroupName, cylinkStatusTable=cylinkStatusTable, ibmappnIsAcGlobeMgrName=ibmappnIsAcGlobeMgrName, swvpdName=swvpdName, ibmxnsRouteMetric=ibmxnsRouteMetric, ibmappnNodeLsEchoRsps=ibmappnNodeLsEchoRsps, ibmRIFFilterInBridgeNumber=ibmRIFFilterInBridgeNumber, ibmappnIsAcRouteInfo=ibmappnIsAcRouteInfo, ibmappnNnTopologyTable=ibmappnNnTopologyTable, ibmappnIsInSsAdjCpName=ibmappnIsInSsAdjCpName, ibmappnIsInTransPriority=ibmappnIsInTransPriority, ibmTGEnable=ibmTGEnable, ibmpppLCPOutEchoReps=ibmpppLCPOutEchoReps, ibmtbmacFiltInSrcMask=ibmtbmacFiltInSrcMask, ibmappnLocalEnTgEntry=ibmappnLocalEnTgEntry, ibmappnNnNodeFREntryTimeLeft=ibmappnNnNodeFREntryTimeLeft)
mibBuilder.exportSymbols("IBM6611-MIB", ibmappnNodeLsUsr2=ibmappnNodeLsUsr2, ibmappnNodeLsIpTable=ibmappnNodeLsIpTable, ibmpppLinkACCompression=ibmpppLinkACCompression, ibmappnIsInSsRecvRpc=ibmappnIsInSsRecvRpc, ibmappnNodeLsConnCost=ibmappnNodeLsConnCost, ibmbridgeWindowFilters=ibmbridgeWindowFilters, ibmappnLocalEnTgNum=ibmappnLocalEnTgNum, ibmappnCosTgRowEffCapMax=ibmappnCosTgRowEffCapMax, ibmappnNnNodeQuiescing=ibmappnNnNodeQuiescing, ibmpppLCPOutCAs=ibmpppLCPOutCAs, ibmxnsidpInReceives=ibmxnsidpInReceives, ibmxnsidpForwDatagrams=ibmxnsidpForwDatagrams, ibmappnIsInS2PFmdBytes=ibmappnIsInS2PFmdBytes, ibmappnIsInSsSendNxWndwSize=ibmappnIsInSsSendNxWndwSize, ibmappnNnTgFRUsr2=ibmappnNnTgFRUsr2, ibmvarpAssignReqs=ibmvarpAssignReqs, ibmappcInRluEntry=ibmappcInRluEntry, ibmappcInLtpSecReq=ibmappcInLtpSecReq, ibmappnNnNodeFREndptDepleted=ibmappnNnNodeFREndptDepleted, ibmappnIsAcBtypePurges=ibmappnIsAcBtypePurges, ibmxnsErrpActive=ibmxnsErrpActive, ibmpppIPOutOctets=ibmpppIPOutOctets, ibmvicpHeaderError=ibmvicpHeaderError, ibmsysMBUFsDelayedRequests=ibmsysMBUFsDelayedRequests, ibmappcInSsStatusModeName=ibmappcInSsStatusModeName, ibmappnSnmpInGetNextVars=ibmappnSnmpInGetNextVars, ibmappcInLtpLongRun=ibmappcInLtpLongRun, cylinkLinkState=cylinkLinkState, ibmappcInRluActEnhanSecSup=ibmappcInRluActEnhanSecSup, swvpdPath=swvpdPath, ibmwindowFilterOutId=ibmwindowFilterOutId, ibmappnIsAcBufNewestIndex=ibmappnIsAcBufNewestIndex, ibmappnDirEntry=ibmappnDirEntry, ibmdot1dTpPortEntry=ibmdot1dTpPortEntry, ibmappcInSsP2SNonFmdBytes=ibmappcInSsP2SNonFmdBytes, ibmappnIsInSessType=ibmappnIsInSessType, ibmappnIsInP2SNonFmdPius=ibmappnIsInP2SNonFmdPius, ibmappnIsAcTimeAgtUtcHours=ibmappnIsAcTimeAgtUtcHours, ibmdlsRemoteFrameFilterTable=ibmdlsRemoteFrameFilterTable, cylinkAlarmRepeatTime=cylinkAlarmRepeatTime, ibmdot1dStaticAddress=ibmdot1dStaticAddress, ibmpppIPCPRejects=ibmpppIPCPRejects, ibmappnCosTgRowConnCostMin=ibmappnCosTgRowConnCostMin, ibmvRtNumber=ibmvRtNumber, ibmappcInMdPtmCwin=ibmappcInMdPtmCwin, ibmappnIsAcBtypeClearStats=ibmappnIsAcBtypeClearStats, ibmsysMBUFsDeniedRequests=ibmsysMBUFsDeniedRequests, ibmappnLocalNodeName=ibmappnLocalNodeName, ibmdlsStationDestAddress=ibmdlsStationDestAddress, ibmvifEntry=ibmvifEntry, ibmvifNumber=ibmvifNumber, ibmappnDirInLocates=ibmappnDirInLocates, ibmipxsapServerHost=ibmipxsapServerHost, ibmappnIsAcSessState=ibmappnIsAcSessState, ibmappnIsInPcid=ibmappnIsInPcid, ibmxnsidpForwarding=ibmxnsidpForwarding, ibmappnLocalNnFrsn=ibmappnLocalNnFrsn, ibmwindowFilterOutIfIndex=ibmwindowFilterOutIfIndex, ibmtbwinFiltInContents=ibmtbwinFiltInContents, ibmRIFFilterOutNotForwarded=ibmRIFFilterOutNotForwarded, cylinkStatusEntry=cylinkStatusEntry, ibmappcInRluActAttSecSup=ibmappcInRluActAttSecSup, ibmvrtpUpdSents=ibmvrtpUpdSents, ibmappnLocalEnTgTable=ibmappnLocalEnTgTable, ibmappnDirWildCard=ibmappnDirWildCard, ibmappnLocalTgCpCpSession=ibmappnLocalTgCpCpSession, ibmappnLocalEnTgUsr1=ibmappnLocalEnTgUsr1, ibmwindowFilterOutOffsetStart=ibmwindowFilterOutOffsetStart, ibmappnNnAdjNodeLastFrsnRcvd=ibmappnNnAdjNodeLastFrsnRcvd, ibmdlsCirLocalLinkInvalidPktRcv=ibmdlsCirLocalLinkInvalidPktRcv, ibmdlsCirSrcSap=ibmdlsCirSrcSap, ibmipPtyQueueEntry=ibmipPtyQueueEntry, ibmappnNodeLsLocalTrMac=ibmappnNodeLsLocalTrMac, ibmpppLCPInEchoReqs=ibmpppLCPInEchoReqs, ibmvrtpRedSents=ibmvrtpRedSents, ibmipxidpBadSum=ibmipxidpBadSum, ibmwindowFilterOutEntry=ibmwindowFilterOutEntry, ibmvipBadHeaders=ibmvipBadHeaders, ibmappnNodeLsDelay=ibmappnNodeLsDelay, ibmappnNodePortDlsEntry=ibmappnNodePortDlsEntry, ibmappnCosTgRowUsr3Min=ibmappnCosTgRowUsr3Min, ibmappcInLtpSyncLvl=ibmappcInLtpSyncLvl, ibmtbwinFiltOutTable=ibmtbwinFiltOutTable, ibmtbMACAddressFilters=ibmtbMACAddressFilters, ibmRIFFilterInNotForwarded=ibmRIFFilterInNotForwarded, ibmtbEthTypeFiltOutEntry=ibmtbEthTypeFiltOutEntry, ibmappnIsAcBufState=ibmappnIsAcBufState, ibmappnCosTgRowEntry=ibmappnCosTgRowEntry, ibmappnNnNodeFrsn=ibmappnNnNodeFrsn, ibmdot1dBasePortCircuit=ibmdot1dBasePortCircuit, ibmxnsidpChecksum=ibmxnsidpChecksum, ibmappnNnTopoTotalRouteCalcs=ibmappnNnTopoTotalRouteCalcs, ibmdot1dStpPortDesignatedBridge=ibmdot1dStpPortDesignatedBridge, ibmappnNnTgFRSecurity=ibmappnNnTgFRSecurity, ibmmacAddrFilterOutIfIndex=ibmmacAddrFilterOutIfIndex, ibmtb=ibmtb, ibmfrDlcmiEntry=ibmfrDlcmiEntry, ibmxnsAddrTable=ibmxnsAddrTable, cylinkLoopback=cylinkLoopback, ibmappnNodeLsStatusTable=ibmappnNodeLsStatusTable, ibmappcInLtpPipSubNum=ibmappcInLtpPipSubNum, ibmpppLinkControlTable=ibmpppLinkControlTable, ibmvarpAssignResps=ibmvarpAssignResps, ibmappcInSsRscv=ibmappcInSsRscv, cylinkSerialNumber=cylinkSerialNumber, ibmappnIsAcBufMedia=ibmappnIsAcBufMedia, ibmappnNodeLsStatusEntry=ibmappnNodeLsStatusEntry, ibmappnNodePortMaxIframeWindow=ibmappnNodePortMaxIframeWindow, ibmappnNodeLsStatusNodeId=ibmappnNodeLsStatusNodeId, ibmwindowFilterOutFilterType=ibmwindowFilterOutFilterType, ibmpppLinkQuality=ibmpppLinkQuality, ibmappnIsInSsRecvPacingType=ibmappnIsInSsRecvPacingType, ibmappnNnTgTopologyEntry=ibmappnNnTgTopologyEntry, ibmappnIsAcTimeRecTime=ibmappnIsAcTimeRecTime, ibmtbFiltOrderOutPriority=ibmtbFiltOrderOutPriority, ibmappnCos=ibmappnCos, ibmpppIPInOctets=ibmpppIPInOctets, ibmpppIPRejects=ibmpppIPRejects, ibmChipSetIntel82596B=ibmChipSetIntel82596B, ibmSelectNetInterfaceNetStart=ibmSelectNetInterfaceNetStart, ibmChipSetSignetics=ibmChipSetSignetics, ibmappnNodeLsCurrentStateTime=ibmappnNodeLsCurrentStateTime, ibmappnNodeLsLocalIpAddr=ibmappnNodeLsLocalIpAddr, ibmvifOutPkts=ibmvifOutPkts, ibmRIFFilterOutIfIndex=ibmRIFFilterOutIfIndex, ibmappcInRluParLuLocName=ibmappcInRluParLuLocName, ibmappnLocalTgUsr3=ibmappnLocalTgUsr3, ibmappnIsAcBufMaxRecords=ibmappnIsAcBufMaxRecords, ibmFiltOrderInType=ibmFiltOrderInType, ibmtbwinFiltOutNotForwarded=ibmtbwinFiltOutNotForwarded, ibmfrDlcmiErrorThreshold=ibmfrDlcmiErrorThreshold, ibmvRtCfgMax=ibmvRtCfgMax, ibmappnNodeLsTrEntry=ibmappnNodeLsTrEntry, ibmipxConfigEntry=ibmipxConfigEntry, ibmnbpFilter=ibmnbpFilter, ibmappnNodePortDlcTracPortName=ibmappnNodePortDlcTracPortName, ibmappnNode=ibmappnNode, ibmipxAddrAddress=ibmipxAddrAddress, ibmChipSetIBM=ibmChipSetIBM, ibmappnIsAcS2PFmdPius=ibmappnIsAcS2PFmdPius, ibmappnIsInPsAdjTgNum=ibmappnIsInPsAdjTgNum, ibmtbmacFiltOutEntry=ibmtbmacFiltOutEntry, ibmpppLinkStatusTable=ibmpppLinkStatusTable, ibmappnLocalNnIsrDepleted=ibmappnLocalNnIsrDepleted, ibmappcInMdActCwin=ibmappcInMdActCwin, ibmappnNodeService=ibmappnNodeService, ibmwindowFilterInBcastType=ibmwindowFilterInBcastType, ibmappcInSsTransPriority=ibmappcInSsTransPriority, ibmdlsCirLocalLinkCmdContRepolls=ibmdlsCirLocalLinkCmdContRepolls, ibmappnNodeEnLocateCdinit=ibmappnNodeEnLocateCdinit, ibmappnCosNodeRowResistMin=ibmappnCosNodeRowResistMin, ibmappnIsAcSessStartTime=ibmappnIsAcSessStartTime, ibmdot1dTpPortInDiscards=ibmdot1dTpPortInDiscards, ibmappnIsInGlobal=ibmappnIsInGlobal, ibmmacAddrFilterInEntry=ibmmacAddrFilterInEntry, ibmdlsRemoteFrameFilterID=ibmdlsRemoteFrameFilterID, ibmappnIsAcTimeAgtUtcWdays=ibmappnIsAcTimeAgtUtcWdays, ibmappcInLtpPfCnos=ibmappcInLtpPfCnos, ibmpppIPOutPackets=ibmpppIPOutPackets, ibmappnNodeLsDlcType=ibmappnNodeLsDlcType, ibmPtyQueueingLBA=ibmPtyQueueingLBA, ibmdlsStationPrimaryRepollCount=ibmdlsStationPrimaryRepollCount, ibmappnLocalTgDlcData=ibmappnLocalTgDlcData, ibmpppLinkPreviousState=ibmpppLinkPreviousState, ibmringFilterInNotForwarded=ibmringFilterInNotForwarded, ibmdot1dStpBridgeMaxAge=ibmdot1dStpBridgeMaxAge, ibmfrErrIfIndex=ibmfrErrIfIndex, ibmtbsapFiltIfIndex=ibmtbsapFiltIfIndex, ibmdot1dBaseBridgeAddress=ibmdot1dBaseBridgeAddress, ibmpppLinkLastBadAddress=ibmpppLinkLastBadAddress, ibmappcInMdAcSyncLvl=ibmappcInMdAcSyncLvl, ibmdlsCirDestAddress=ibmdlsCirDestAddress, ibmappnNnTopoOutTdus=ibmappnNnTopoOutTdus, ibmdecLANCircuitTable=ibmdecLANCircuitTable, ibmvRtCfgInFltIfIndex=ibmvRtCfgInFltIfIndex, ibmdot1dStpRootCost=ibmdot1dStpRootCost, ibmappnDirLocateOutstands=ibmappnDirLocateOutstands, ibmappnSnmpInGetRequests=ibmappnSnmpInGetRequests, swvpdState=swvpdState, ibmappnDirNotFoundBcastLocates=ibmappnDirNotFoundBcastLocates, ibmpppLinkInvalidProtocols=ibmpppLinkInvalidProtocols, ibmmacAddrFilterOutEntry=ibmmacAddrFilterOutEntry, ibmxnsFilterIfIndex=ibmxnsFilterIfIndex, ibmringFilterInMask=ibmringFilterInMask, ibmtbwinFiltInOffset=ibmtbwinFiltInOffset, ibmvifSlot=ibmvifSlot, ibmipxPortStatus=ibmipxPortStatus, ibmappcInRluDefType=ibmappcInRluDefType, ibmtbEthTypeFiltOutTable=ibmtbEthTypeFiltOutTable, ibmappnIsAcGlobeMgrUtcMdays=ibmappnIsAcGlobeMgrUtcMdays, ibmvFltNo=ibmvFltNo, ibmipxidpBcastInReceives=ibmipxidpBcastInReceives, ibmtbwinFiltInEntry=ibmtbwinFiltInEntry, ibmappnIsAcBtypeMaxBufs=ibmappnIsAcBtypeMaxBufs, ibmvRtState=ibmvRtState, ibmappcInLtpPfDisplay=ibmappcInLtpPfDisplay, ibmappcInSsModeName=ibmappcInSsModeName, ibmdot1dTpFdbPort=ibmdot1dTpFdbPort, ibmdlsCirDestSap=ibmdlsCirDestSap, ibmpppLCPInCodeRejs=ibmpppLCPInCodeRejs, ibmappnNodeLsStatusLocalAddr=ibmappnNodeLsStatusLocalAddr, ibmipFilterEntry=ibmipFilterEntry, ibmappcInGlobeRscvTime=ibmappcInGlobeRscvTime, ibmtbEthTypeFiltInEntry=ibmtbEthTypeFiltInEntry, ibmSelectNetNetEnd=ibmSelectNetNetEnd, ibmdlsRemoteFrameFilterDestAddress=ibmdlsRemoteFrameFilterDestAddress, ibmPtyQueueingDiscards=ibmPtyQueueingDiscards, ibmpppIPCPInPackets=ibmpppIPCPInPackets, ibmFiltOrderInEntry=ibmFiltOrderInEntry, ibmvFltValue=ibmvFltValue, ibmappnNnTopologyFRTable=ibmappnNnTopologyFRTable, ibmappnIsInPsAdjCpName=ibmappnIsInPsAdjCpName, ibmappnNodePortDlcTracDlcType=ibmappnNodePortDlcTracDlcType, ibmxnsErrOutMsgs=ibmxnsErrOutMsgs, ibmappcInRluParLuName=ibmappcInRluParLuName, ibmdlsStationRetransmitThreshold=ibmdlsStationRetransmitThreshold, ibmfrCircuitEntry=ibmfrCircuitEntry, ibmappnDir=ibmappnDir, ibmappnCosNodeRowIndex=ibmappnCosNodeRowIndex, ibmvRtMetric=ibmvRtMetric, ibmappnNodePortSpecific=ibmappnNodePortSpecific, cylinkZeroProtection=cylinkZeroProtection, ibmdot1dStaticAllowedToGoTo=ibmdot1dStaticAllowedToGoTo, ibmmacAddrFilterInfoEntry=ibmmacAddrFilterInfoEntry, ibmappnNodeLsRemoteIpAddr=ibmappnNodeLsRemoteIpAddr, ibmringFilterOutIfIndex=ibmringFilterOutIfIndex, ibmbridgeRingFilters=ibmbridgeRingFilters, ibmappnNnTopologyFREntry=ibmappnNnTopologyFREntry, ibmpppLinkCommand=ibmpppLinkCommand, ibmringFilterInfoTable=ibmringFilterInfoTable, ibmwindowFilterInIfIndex=ibmwindowFilterInIfIndex, ibmdot1dBasePortMtuExceededDiscards=ibmdot1dBasePortMtuExceededDiscards, ibmappnNodeLsPortName=ibmappnNodeLsPortName, ibmxnsRouteTable=ibmxnsRouteTable, ibmvPortCfgTable=ibmvPortCfgTable, ibmtbmacFiltInNotForwarded=ibmtbmacFiltInNotForwarded, ibmipxidpZeroDirBcast=ibmipxidpZeroDirBcast, ibmpppLinkLastBadControl=ibmpppLinkLastBadControl, ibmappnNodeLsStatusXidByteInError=ibmappnNodeLsStatusXidByteInError, ibmringFilterInEntry=ibmringFilterInEntry, ibmvRouterNetid=ibmvRouterNetid, ibmappcInMdPndClos=ibmappcInMdPndClos, ibmtbwinFiltOutOffset=ibmtbwinFiltOutOffset, cylinkConfigEntry=cylinkConfigEntry, ibmipext=ibmipext, ibmappnNodeLsCpCpSession=ibmappnNodeLsCpCpSession, ibmdlsStationAddress=ibmdlsStationAddress, ibmpppLinkMagicLoopCount=ibmpppLinkMagicLoopCount, ibmappnIsAcTimeMgrUtcMonths=ibmappnIsAcTimeMgrUtcMonths, ibmfrCircuitExcessBurst=ibmfrCircuitExcessBurst, ibmappnLocalNnCentralDirectory=ibmappnLocalNnCentralDirectory, ibmtbwinFiltInTable=ibmtbwinFiltInTable, ibmappnNodePortTrSap=ibmappnNodePortTrSap, ibmdlsDefaultRouterAddress=ibmdlsDefaultRouterAddress)
mibBuilder.exportSymbols("IBM6611-MIB", ibmdot1dStpBridgeForwardDelay=ibmdot1dStpBridgeForwardDelay, ibmringFilterOutNotForwarded=ibmringFilterOutNotForwarded, ibmvRtCfgOutFltNum=ibmvRtCfgOutFltNum, ibmappnNodeLsDlsName=ibmappnNodeLsDlsName, ibmappnMemoryWarnThresh=ibmappnMemoryWarnThresh, ibmappnNnAdjNodeLastFrsnSent=ibmappnNnAdjNodeLastFrsnSent, ibmappnNodeLsSecurity=ibmappnNodeLsSecurity, ibmappcInMdMinClosLimit=ibmappcInMdMinClosLimit, ibmappcInMdDrainSelf=ibmappcInMdDrainSelf, ibmappnNnTopoTgPurges=ibmappnNnTopoTgPurges, ibmRIFFilterOutBcastType=ibmRIFFilterOutBcastType, ibmtbmacFiltOutTable=ibmtbmacFiltOutTable, ibmxnsidpBadLen=ibmxnsidpBadLen, ibmxnsLoopbackActive=ibmxnsLoopbackActive, ibmSelectNetFilter=ibmSelectNetFilter, ibmpppLCPInOctets=ibmpppLCPInOctets, ibmsnapFilterOutIfIndex=ibmsnapFilterOutIfIndex, ibmfrCircuitCreationTime=ibmfrCircuitCreationTime, ibmappnNodeDefLsBadXids=ibmappnNodeDefLsBadXids, ibmipxFilterHCCompare=ibmipxFilterHCCompare, ibmappcInSsSessStartTime=ibmappcInSsSessStartTime, ibmvipTotalIn=ibmvipTotalIn, ibmappnNodeLsState=ibmappnNodeLsState, ibmpppLinkLastOutTxOctets=ibmpppLinkLastOutTxOctets, ibmappnLocalEnTgDestVirtual=ibmappnLocalEnTgDestVirtual, ibmappnNodeLsCpName=ibmappnNodeLsCpName, ibmdot1dTpPortOutFrames=ibmdot1dTpPortOutFrames, ibmappcInLtpTable=ibmappcInLtpTable, ibmvrtpResSents=ibmvrtpResSents, ibmappnNodePortPortType=ibmappnNodePortPortType, ibmmacAddrFilterInTable=ibmmacAddrFilterInTable, ibmappnNodeBindReasm=ibmappnNodeBindReasm, ibmappnCosTgRowUsr1Max=ibmappnCosTgRowUsr1Max, ibmipxidpForwarding=ibmipxidpForwarding, ibmappnIsAcS2PNonFmdBytes=ibmappnIsAcS2PNonFmdBytes, ibmappnNnTgFRModemClass=ibmappnNnTgFRModemClass, ibmappnIsAcBtypeRecFormat=ibmappnIsAcBtypeRecFormat, ibmappnNodeNnCentralDirectory=ibmappnNodeNnCentralDirectory, ibmipxidpInAddrErrors=ibmipxidpInAddrErrors, ibmvPortCfgServ=ibmvPortCfgServ, ibmappnLocalTgUsr2=ibmappnLocalTgUsr2, ibmappcInGlobal=ibmappcInGlobal, ibmipxAddrEntry=ibmipxAddrEntry, ibmSelectNetEntry=ibmSelectNetEntry, ibmappnCosTgRowConnCostMax=ibmappnCosTgRowConnCostMax, ibmappnIsAcGlobeMgrUtcHours=ibmappnIsAcGlobeMgrUtcHours, ibmappnNodeIdNum=ibmappnNodeIdNum, ibmvrtpResRecs=ibmvrtpResRecs, ibmtbEthTypeFiltInFilterType=ibmtbEthTypeFiltInFilterType, ibmappnIsAcBufRecFormat=ibmappnIsAcBufRecFormat, ibmappnNnTopoNodeLowRsns=ibmappnNnTopoNodeLowRsns, ibmmacAddrFilterInType=ibmmacAddrFilterInType, ibmappnSnmpOutGenErrs=ibmappnSnmpOutGenErrs, ibmsysPageSpaceTotal=ibmsysPageSpaceTotal, ibmRIFFilterInRingMask=ibmRIFFilterInRingMask, ibmmacAddrFilterInSrcMask=ibmmacAddrFilterInSrcMask, ibmappnNodeLsDlsEntry=ibmappnNodeLsDlsEntry, ibmappcInSsRecvPacingType=ibmappcInSsRecvPacingType, ibmringFilterOutBcastType=ibmringFilterOutBcastType, ibmtbwinFiltInFilterType=ibmtbwinFiltInFilterType, ibmvPortCfgHCtoServ=ibmvPortCfgHCtoServ, ibmappnIsAcGlobeCheckPt=ibmappnIsAcGlobeCheckPt, ibmappnLocalThisNode=ibmappnLocalThisNode, ibmdot1dTpFdbStatus=ibmdot1dTpFdbStatus, ibmappnDirInBcastLocates=ibmappnDirInBcastLocates, ibmdot1dStpHoldTime=ibmdot1dStpHoldTime, ibmxnsRouteDest=ibmxnsRouteDest, ibmsnapFilterInFilterType=ibmsnapFilterInFilterType, ibmwindowFilterType=ibmwindowFilterType, ibminterfaces=ibminterfaces, ibmwindowFilterOutType=ibmwindowFilterOutType, ibmappcInSsPluName=ibmappcInSsPluName, ibmipxRouteUse=ibmipxRouteUse, ibmappnNodeLsStatusCpName=ibmappnNodeLsStatusCpName, ibmappnNodeLsTrTable=ibmappnNodeLsTrTable, ibmappcInLtpRecoSup=ibmappcInLtpRecoSup, ibmappnIsInS2PNonFmdBytes=ibmappnIsInS2PNonFmdBytes, ibmappnDirOutLocates=ibmappnDirOutLocates, ibmsnapFilterInValue=ibmsnapFilterInValue, ibmappnNodePortDlcTraceTable=ibmappnNodePortDlcTraceTable, ibmappnSnmpInSetVars=ibmappnSnmpInSetVars, ibm6611=ibm6611, ibmappnIsAcTimeTable=ibmappnIsAcTimeTable, ibmappnLocalEnTgUsr2=ibmappnLocalEnTgUsr2, ibmappnIsInEntry=ibmappnIsInEntry, ibmappnNodePortTable=ibmappnNodePortTable, ibmdecNodeType=ibmdecNodeType, swvpdFixId=swvpdFixId, ibmmacAddrFilterIfIndex=ibmmacAddrFilterIfIndex, ibmvFltMask=ibmvFltMask, ibmvPortCfgOutFltNum=ibmvPortCfgOutFltNum, ibmappnIsInSessUpTime=ibmappnIsInSessUpTime, ibmtbmacFiltInTable=ibmtbmacFiltInTable, ibmappnLocalNnRouteAddResist=ibmappnLocalNnRouteAddResist, ibmappcInLluEntry=ibmappcInLluEntry, ibmvrtpRedRecs=ibmvrtpRedRecs, ibmpppLCPInDiscReqs=ibmpppLCPInDiscReqs, ibmtbmacFiltOutDestAddress=ibmtbmacFiltOutDestAddress, ibmappnNnNodeFRType=ibmappnNnNodeFRType, ibmdlsCirIfIndex=ibmdlsCirIfIndex, ibmappnNodePortDlcTracRemoteAddr=ibmappnNodePortDlcTracRemoteAddr, ibmxns=ibmxns, ibmappnIsInSsSendPacingType=ibmappnIsInSsSendPacingType, ibmappnSnmpInformation=ibmappnSnmpInformation, ibmvNbrIfType=ibmvNbrIfType, ibmipFilterIfIndex=ibmipFilterIfIndex, ibmappnLocalEnTgEntryTimeLeft=ibmappnLocalEnTgEntryTimeLeft, ibmringFilterInFilterType=ibmringFilterInFilterType, ibmappnIsAcBufName=ibmappnIsAcBufName, ibmappnNodeLsSpecific=ibmappnNodeLsSpecific, ibmappnNnNodeIsrDepleted=ibmappnNnNodeIsrDepleted, ibmappnNnTgFRDlcData=ibmappnNnTgFRDlcData, ibmsnapFilterOutTable=ibmsnapFilterOutTable, ibmappcInLtpSecLvl=ibmappcInLtpSecLvl, ibmvNbrEntry=ibmvNbrEntry, ibmappcInRluDefAllVerSup=ibmappcInRluDefAllVerSup, ibmRIFFilterOutBridgeNumber=ibmRIFFilterOutBridgeNumber, ibmpppLinkMaxRestarts=ibmpppLinkMaxRestarts, ibmappnNodeLsIpState=ibmappnNodeLsIpState, ibmdot1dStpPortForwardTransitions=ibmdot1dStpPortForwardTransitions, ibmvSysConfig=ibmvSysConfig, ibmxnsErrCongWarn=ibmxnsErrCongWarn, ibmappnNnNodeRsn=ibmappnNnNodeRsn, ibmappcInSsFqLuName=ibmappcInSsFqLuName, ibmappnLocalTgNum=ibmappnLocalTgNum, ibmpppLCPOutPackets=ibmpppLCPOutPackets, ibmappnNnTopoNodePurges=ibmappnNnTopoNodePurges, ibmappnNnTgUsr2=ibmappnNnTgUsr2, ibmdot1dTpFdbAddress=ibmdot1dTpFdbAddress, ibmappnNnNodeEntryTimeLeft=ibmappnNnNodeEntryTimeLeft, ibmpppProtocolTables=ibmpppProtocolTables, ibmipxsapServerType=ibmipxsapServerType, ibmappnNodeLsEntry=ibmappnNodeLsEntry, ibmappnNnNodeCongested=ibmappnNnNodeCongested, ibmFiltOrderOutType=ibmFiltOrderOutType, ibmappnNodeNnIsr=ibmappnNodeNnIsr, ibmxnsFilterNumber=ibmxnsFilterNumber, cylinkSecondaryPhone=cylinkSecondaryPhone, ibmipxsapServerHops=ibmipxsapServerHops, ibmdecLANCircuitType=ibmdecLANCircuitType, ibmipxidpRoutingDiscards=ibmipxidpRoutingDiscards, ibmappcInLluSessLimit=ibmappcInLluSessLimit, ibmappnCosTgRowUsr1Min=ibmappnCosTgRowUsr1Min, ibmTGTable=ibmTGTable, ibmpppLinkLocalACCMap=ibmpppLinkLocalACCMap, ibmappnNnTopoRouteEntry=ibmappnNnTopoRouteEntry, ibmipxsapServerEntry=ibmipxsapServerEntry, ibmvrtpReqRecs=ibmvrtpReqRecs, ibmipx=ibmipx, ibmMainProcessorLoad=ibmMainProcessorLoad, ibmappnLocalTgEffCap=ibmappnLocalTgEffCap, ibmappcInMdAcCrypto=ibmappcInMdAcCrypto, ibmappnIsAcTimeAgtUtcSecs=ibmappnIsAcTimeAgtUtcSecs, ibmfrCircuitReceivedOctets=ibmfrCircuitReceivedOctets, ibmvRtCfgInFltEntry=ibmvRtCfgInFltEntry, ibmappcInSsStatusTime=ibmappcInSsStatusTime, ibmappnNodePortIpName=ibmappnNodePortIpName, ibmtbFiltOrderTable=ibmtbFiltOrderTable, ibmtbEthTypeFiltInTable=ibmtbEthTypeFiltInTable, ibmnbpFilterPacketsSent=ibmnbpFilterPacketsSent, ibmipxidpBcastOutRequests=ibmipxidpBcastOutRequests, ibmpppLinkInTxLQRs=ibmpppLinkInTxLQRs, ibmvRtCfgInFltNetID=ibmvRtCfgInFltNetID, ibmappcInMdDrainPart=ibmappcInMdDrainPart, ibmfrCircuitTable=ibmfrCircuitTable, ibmbridge=ibmbridge, ibmappnNodeLsTable=ibmappnNodeLsTable, ibmappnDirRegEntries=ibmappnDirRegEntries, ibmappnIsAcGlobeMgrUtcIsdst=ibmappnIsAcGlobeMgrUtcIsdst, ibmappnIsAcBufEntry=ibmappnIsAcBufEntry, ibmxnsRouteIfIndex=ibmxnsRouteIfIndex, ibmwindowFilterInId=ibmwindowFilterInId, ibmappnCosTransPriority=ibmappnCosTransPriority, ibmappcInLtpInstLmt=ibmappcInLtpInstLmt, ibmappnCosModeEntry=ibmappnCosModeEntry, ibmpppLinkInTxOctets=ibmpppLinkInTxOctets, ibmappnNodeNnTreeUpdate=ibmappnNodeNnTreeUpdate, ibmSelectNetIndex=ibmSelectNetIndex, ibmpppLCPOutCNs=ibmpppLCPOutCNs, ibmdlsCirLocalLinkRouting=ibmdlsCirLocalLinkRouting, ibmpppIPCPLinkNumber=ibmpppIPCPLinkNumber, ibmappnIsAcEndReason=ibmappnIsAcEndReason, ibmappnIsAcS2PNonFmdPius=ibmappnIsAcS2PNonFmdPius, ibmdot1dStpForwardDelay=ibmdot1dStpForwardDelay, ibmChipSetIBM8025A=ibmChipSetIBM8025A, ibmappcInRluActAllVerSup=ibmappcInRluActAllVerSup, ibmipFilterExtFilterId=ibmipFilterExtFilterId, ibmappnNodeLsLocalDlsMac=ibmappnNodeLsLocalDlsMac, ibmappnIsAcTimeMgrUtcMdays=ibmappnIsAcTimeMgrUtcMdays, ibmtbsapFiltInfoEntry=ibmtbsapFiltInfoEntry, ibmappnIsAcBtypeEntry=ibmappnIsAcBtypeEntry, ibmtbmacFiltOutSrcMask=ibmtbmacFiltOutSrcMask, ibmappcInRluDefParaSessSup=ibmappcInRluDefParaSessSup, ibmvarpServiceResps=ibmvarpServiceResps, ibmpppLinkQualityIndex=ibmpppLinkQualityIndex, ibmdlsLocalFrameFilterDestMask=ibmdlsLocalFrameFilterDestMask, ibmappnNnTgFRFrsn=ibmappnNnTgFRFrsn, ibmappcInRluActParaSessSup=ibmappcInRluActParaSessSup, ibmhopCountFilterBcastType=ibmhopCountFilterBcastType, ibmmacAddrFilterOutSrcMask=ibmmacAddrFilterOutSrcMask, ibmpppLCPInCRs=ibmpppLCPInCRs, ibmsysRealMemInUse=ibmsysRealMemInUse, ibmtbwinFiltOutEntry=ibmtbwinFiltOutEntry, ibmvRtCfgOutFltTable=ibmvRtCfgOutFltTable, ibmappnIsInSessState=ibmappnIsInSessState, ibmappnIsAcBufOldestIndex=ibmappnIsAcBufOldestIndex, ibmappnLocalTopology=ibmappnLocalTopology, ibmappnNnAdjNodeOutOfSeqTdus=ibmappnNnAdjNodeOutOfSeqTdus, ibmappnNodeNnGateway=ibmappnNodeNnGateway, ibmappnIsInS2PFmdPius=ibmappnIsInS2PFmdPius, ibmappcInGlobeCtrStatus=ibmappcInGlobeCtrStatus, ibmvifOutErrs=ibmvifOutErrs, ibmappnNnTgCpCpSession=ibmappnNnTgCpCpSession, ibmvNbrLocSlot=ibmvNbrLocSlot, ibmvicpExcGens=ibmvicpExcGens, cylinkNetworkFraming=cylinkNetworkFraming, ibmtbEthTypeFiltIfIndex=ibmtbEthTypeFiltIfIndex, ibmappcInMdRecvRuSzLoBnd=ibmappcInMdRecvRuSzLoBnd, ibmpppLCPTable=ibmpppLCPTable, ibmpppLCPOutTRs=ibmpppLCPOutTRs, ibmdot1dStaticTable=ibmdot1dStaticTable, ibmappcInSsS2PNonFmdPius=ibmappcInSsS2PNonFmdPius, ibmappnNnNodeFRName=ibmappnNnNodeFRName, ibmappnCosNodeRowMaxCongestAllow=ibmappnCosNodeRowMaxCongestAllow, ibmfrDlcmiTable=ibmfrDlcmiTable, ibmvRtEntry=ibmvRtEntry, ibmfrErrEntry=ibmfrErrEntry, ibmfrDlcmiMaxSupportedVCs=ibmfrDlcmiMaxSupportedVCs, ibmipxsapServerTable=ibmipxsapServerTable, ibmMainProcessorLoadIndex=ibmMainProcessorLoadIndex, ibmfrCircuitLastTimeChange=ibmfrCircuitLastTimeChange, ibmsapFilterType=ibmsapFilterType, ibmtbmacFiltInIfIndex=ibmtbmacFiltInIfIndex, ibmwindowFilterOutTable=ibmwindowFilterOutTable, ibmpppLCPOutCodeRejs=ibmpppLCPOutCodeRejs, cylinkDialoutCapability=cylinkDialoutCapability, ibmdot1dBasePortDelayExceededDiscards=ibmdot1dBasePortDelayExceededDiscards, ibmfrErrType=ibmfrErrType, ibmappnLocalNnRsn=ibmappnLocalNnRsn, ibmfrDlcmiFullEnquiryInterval=ibmfrDlcmiFullEnquiryInterval, ibmwindowFilterInNumBytes=ibmwindowFilterInNumBytes, ibmTGSwitchOuts=ibmTGSwitchOuts, ibmwindowFilterOutBcastType=ibmwindowFilterOutBcastType, ibmwindowFilterOutContents=ibmwindowFilterOutContents, ibmpppLinkLocalMRU=ibmpppLinkLocalMRU, ibmappnIsAcGlobeMgrUtcMins=ibmappnIsAcGlobeMgrUtcMins, ibmappnNnTgFrsn=ibmappnNnTgFrsn, ibmappnNnTopoNodeStateUpdates=ibmappnNnTopoNodeStateUpdates, ibmxnsidpRoutingDiscards=ibmxnsidpRoutingDiscards, ibmfrDlcmiState=ibmfrDlcmiState, ibmmacAddrFilterInNotForwarded=ibmmacAddrFilterInNotForwarded, ibmsnapFilterInType=ibmsnapFilterInType, ibmappnIsAcFqLuName=ibmappnIsAcFqLuName, ibmRIFFilterOutFilterType=ibmRIFFilterOutFilterType)
mibBuilder.exportSymbols("IBM6611-MIB", ibmappnNnTopoNodeTimerUpdates=ibmappnNnTopoNodeTimerUpdates, ibmappcInSsCtrUpTime=ibmappcInSsCtrUpTime, ibmfrDlcmiIfIndex=ibmfrDlcmiIfIndex, ibmappnIsAcBtypeMedia=ibmappnIsAcBtypeMedia, ibmfrDlcmiMulticast=ibmfrDlcmiMulticast, ibmappnNnTgFRUsr1=ibmappnNnTgFRUsr1, ibmtbmacFiltOutFilterType=ibmtbmacFiltOutFilterType, ibmdlsRouterEntry=ibmdlsRouterEntry, ibmpppIPCPTable=ibmpppIPCPTable, ibmdot1dStpPortPriority=ibmdot1dStpPortPriority, ibmappcInGlobeRscv=ibmappcInGlobeRscv, ibmappnNodePortDlsMac=ibmappnNodePortDlsMac, ibmappnIsInPsSendRpc=ibmappnIsInPsSendRpc, cylinkDialoutHoldoff=cylinkDialoutHoldoff, ibmappcInLtpVerPip=ibmappcInLtpVerPip, ibmxnsErrCongDiscard=ibmxnsErrCongDiscard, ibmipxAddrIfIndex=ibmipxAddrIfIndex, ibmdlsDefaultNBDestTable=ibmdlsDefaultNBDestTable, ibmdlsCirLocalLinkState=ibmdlsCirLocalLinkState, ibmappnIsAcBtypeErrorLosts=ibmappnIsAcBtypeErrorLosts, ibmappnNnTgSecurity=ibmappnNnTgSecurity, ibmappnNnTgOperational=ibmappnNnTgOperational, ibmsapFilterIfIndex=ibmsapFilterIfIndex, ibmtbFiltOrderOutEntry=ibmtbFiltOrderOutEntry, ibmvipInReceives=ibmvipInReceives, cylinkSecondaryContact=cylinkSecondaryContact, ibmdot1dTp=ibmdot1dTp, ibmpppLinkBadCRCs=ibmpppLinkBadCRCs, ibmipxFilterNumber=ibmipxFilterNumber, ibmappnNodeNnRcvRegChar=ibmappnNodeNnRcvRegChar, ibmappnCosNameEntry=ibmappnCosNameEntry, ibmappnIsAcTimeAgtUtcIsdst=ibmappnIsAcTimeAgtUtcIsdst, ibmappnIsInFqLuName=ibmappnIsInFqLuName, ibmdlsCirLocalLinkTestCmdsRcv=ibmdlsCirLocalLinkTestCmdsRcv, ibmipxPortIfIndex=ibmipxPortIfIndex, ibmappcInMdDfCrypto=ibmappcInMdDfCrypto, ibmappnLocalEnTopology=ibmappnLocalEnTopology, ibmxnsFilterMask=ibmxnsFilterMask, ibmvipBadSums=ibmvipBadSums, ibmappnNodeNnFrsn=ibmappnNodeNnFrsn, ibmappcInLtpDefType=ibmappcInLtpDefType, ibmappcInSsSessState=ibmappcInSsSessState, ibmipFilterExtProtocol=ibmipFilterExtProtocol, ibmappcInSsStatusParLuName=ibmappcInSsStatusParLuName, ibmpppLinkLastOutTxPackets=ibmpppLinkLastOutTxPackets, ibmpppLinkErrorsTable=ibmpppLinkErrorsTable, ibmipxsapServerIfIndex=ibmipxsapServerIfIndex, ibmappnIsAcGlobeByteThresh=ibmappnIsAcGlobeByteThresh, ibmxnsConfigEntry=ibmxnsConfigEntry, ibmmacAddrFilterInFilterType=ibmmacAddrFilterInFilterType, ibmfrCircuitIfIndex=ibmfrCircuitIfIndex, ibmtbsapFiltOut=ibmtbsapFiltOut, ibmappnIsAcBtypeRecPerBuf=ibmappnIsAcBtypeRecPerBuf, ibmtbFiltOrderInIfIndex=ibmtbFiltOrderInIfIndex, ibmappnLocalTgUsr1=ibmappnLocalTgUsr1, ibmappcInLluDefType=ibmappcInLluDefType, ibmdlsLocalNameFilterDestAddress=ibmdlsLocalNameFilterDestAddress, ibmfrCircuitSentOctets=ibmfrCircuitSentOctets, ibmappnNnNodeType=ibmappnNnNodeType, ibmappnNodePortDlcTracUseWan=ibmappnNodePortDlcTracUseWan, ibmipPtyQueueNumber=ibmipPtyQueueNumber, ibmappnNodePortDynLsBadXids=ibmappnNodePortDynLsBadXids, ibmappcInSsSessUpTime=ibmappcInSsSessUpTime, ibmdot1dStpPortTable=ibmdot1dStpPortTable, ibmappnNodeLsMaxDelay=ibmappnNodeLsMaxDelay, ibmappnNnTgModemClass=ibmappnNnTgModemClass, ibmRIFFilterInTable=ibmRIFFilterInTable, ibmappnLocalNnCongested=ibmappnLocalNnCongested, ibmappnSnmpInTotalVars=ibmappnSnmpInTotalVars, ibmappnNnNodeEndptDepleted=ibmappnNnNodeEndptDepleted, ibmappnCosTgRowUsr2Max=ibmappnCosTgRowUsr2Max, ibmipFilterExtIfIndex=ibmipFilterExtIfIndex, ibmappnLocalTgSecurity=ibmappnLocalTgSecurity, ibmRIFFilterInBridgeMask=ibmRIFFilterInBridgeMask, ibmdot1dStpPortPathCost=ibmdot1dStpPortPathCost, ibmappcInSsCosName=ibmappcInSsCosName, ibmappnNodePortDlcTraceEntry=ibmappnNodePortDlcTraceEntry, ibmsapFilterOutBcastType=ibmsapFilterOutBcastType, ibmmacAddrFilterOutSrcAddress=ibmmacAddrFilterOutSrcAddress, ibmappnNodeLsMigration=ibmappnNodeLsMigration, ibmappnIsAcBtypeFullTime=ibmappnIsAcBtypeFullTime, ibmappcInSsTable=ibmappcInSsTable, ibmSelectNetFilterEntry=ibmSelectNetFilterEntry, ibmdls=ibmdls, ibmappnIsAcTimeMgrUtcHours=ibmappnIsAcTimeMgrUtcHours, ibmpppLinkBadAddresses=ibmpppLinkBadAddresses, ibmdot1dStpProtocolSpecification=ibmdot1dStpProtocolSpecification, ibmappcInSsRecvRpc=ibmappcInSsRecvRpc, ibmappnIsInSsSendRpc=ibmappnIsInSsSendRpc, ibmpppLinkRemoteACCMap=ibmpppLinkRemoteACCMap, ibmdot1dBasePortEntry=ibmdot1dBasePortEntry, ibmappnNnTgTopologyFREntry=ibmappnNnTgTopologyFREntry, ibmappnNnTgRsn=ibmappnNnTgRsn, ibmvPortCfgInFltNum=ibmvPortCfgInFltNum, ibmmacAddrFilterOutDestMask=ibmmacAddrFilterOutDestMask, ibmDSUs=ibmDSUs, ibmappnNodePortDlsSap=ibmappnNodePortDlsSap, ibmmacAddrFilterOutNotForwarded=ibmmacAddrFilterOutNotForwarded, ibmdlsLocalNameFilterSrcAddress=ibmdlsLocalNameFilterSrcAddress, ibmvrtpHeaderError=ibmvrtpHeaderError, ibmappcInGlobeStatus=ibmappcInGlobeStatus, ibmsnapFilterInEntry=ibmsnapFilterInEntry, ibmpppLinkRemoteMRU=ibmpppLinkRemoteMRU, ibmappnMemoryUsed=ibmappnMemoryUsed, ibmvipTotalOut=ibmvipTotalOut, ibmappnIsInGlobeCtrStatus=ibmappnIsInGlobeCtrStatus, ibmfrCircuitReceivedBECNs=ibmfrCircuitReceivedBECNs, ibmtbEthTypeFiltInfoEntry=ibmtbEthTypeFiltInfoEntry, ibmappcInformation=ibmappcInformation, ibmappnNnAdjNodeEntry=ibmappnNnAdjNodeEntry, ibmatportFilterNetStart=ibmatportFilterNetStart, ibmappnNodeLsStatusEndSense=ibmappnNodeLsStatusEndSense, ibmappnDirLuName=ibmappnDirLuName, ibmappnLocalTgEntry=ibmappnLocalTgEntry, ibmtbsapFiltIn=ibmtbsapFiltIn, ibmvPortCfgTR=ibmvPortCfgTR, ibmappnLocalEnTable=ibmappnLocalEnTable, ibmappnCosNameTable=ibmappnCosNameTable, ibmpppLinkControlIndex=ibmpppLinkControlIndex, ibmappcInMdPrefSendRuSz=ibmappcInMdPrefSendRuSz, ibmappnLocalEnTgDlcData=ibmappnLocalEnTgDlcData, ibmwindowFilterInTable=ibmwindowFilterInTable, ibmappnIsAcCosName=ibmappnIsAcCosName, ibmdlsLocalNameFilterTable=ibmdlsLocalNameFilterTable, ibmappnNodeLsTgNum=ibmappnNodeLsTgNum, ibmPtyQueueingQBR=ibmPtyQueueingQBR, ibmappnNnTopoTgEqualRsns=ibmappnNnTopoTgEqualRsns, ibmappnIsAcSecLuName=ibmappnIsAcSecLuName, ibmappnNnAdjNodeTable=ibmappnNnAdjNodeTable, ibmvipInDiscards=ibmvipInDiscards, ibmappnLocalEnTgDest=ibmappnLocalEnTgDest, ibmxnsidpInDiscards=ibmxnsidpInDiscards, ibmappnNodeDynLsGoodXids=ibmappnNodeDynLsGoodXids, ibmipxFilterMask=ibmipxFilterMask, ibmappnNnTopoNodeGoodHighRsns=ibmappnNnTopoNodeGoodHighRsns, ibmappnNodeEnModeCosMap=ibmappnNodeEnModeCosMap, ibmdlsRemoteFrameFilterSrcMask=ibmdlsRemoteFrameFilterSrcMask, ibmappnNnTgNum=ibmappnNnTgNum, ibmdlsCirLocalLinkRcvInactiveTimeouts=ibmdlsCirLocalLinkRcvInactiveTimeouts, ibmfrDlcmiPollingInterval=ibmfrDlcmiPollingInterval, ibmappnNodeLsIdNum=ibmappnNodeLsIdNum, ibmtbEthTypeFiltOutMask=ibmtbEthTypeFiltOutMask, ibmappnIsAcBtypeTable=ibmappnIsAcBtypeTable, ibmappcInSsEntry=ibmappcInSsEntry, ibmappnCosTgRowTable=ibmappnCosTgRowTable, ibmappnNnTopoMaxNodes=ibmappnNnTopoMaxNodes, ibmappcInRluLocLuName=ibmappcInRluLocLuName, ibmdlsStationTable=ibmdlsStationTable, ibmappnIsInGlobeCtrStatusTime=ibmappnIsInGlobeCtrStatusTime, ibmdlsNameFilterType=ibmdlsNameFilterType, ibmappcInRluActCnosSup=ibmappcInRluActCnosSup, ibmChipSets=ibmChipSets, ibmappnNnNodeGateway=ibmappnNnNodeGateway, ibmipFilterId=ibmipFilterId, ibmvRtCfgFltTable=ibmvRtCfgFltTable, ibmTrapThrottleCount=ibmTrapThrottleCount, cylinkConfigTable=cylinkConfigTable, ibmtbFiltOrderOutTable=ibmtbFiltOrderOutTable, ibmvNbrNumber=ibmvNbrNumber, ibmxnsFilterTable=ibmxnsFilterTable, ibmipxidpOutRequests=ibmipxidpOutRequests, ibmpppLinkChangeTime=ibmpppLinkChangeTime, ibmipPtyQueueEnableEntry=ibmipPtyQueueEnableEntry, ibmbridgeRIFFilters=ibmbridgeRIFFilters, ibmwindowFilterInContents=ibmwindowFilterInContents, ibmsysPageSpaceInUse=ibmsysPageSpaceInUse, ibmsysRealMem=ibmsysRealMem, ibmappnNnTgEffCap=ibmappnNnTgEffCap, ibmpppLinkErrorsIndex=ibmpppLinkErrorsIndex, cylinkNetworkDS1Mode=cylinkNetworkDS1Mode, ibmringFilterOutTable=ibmringFilterOutTable, ibmappcInLluCurActSess=ibmappcInLluCurActSess, swvpdDateTime=swvpdDateTime, ibmtbEthTypeFiltInMask=ibmtbEthTypeFiltInMask, ibmappcInLtpPfAllocSer=ibmappcInLtpPfAllocSer, ibmpppIPTable=ibmpppIPTable, ibmappnIsInSsRecvNxWndwSize=ibmappnIsInSsRecvNxWndwSize, ibmappcInLtpPfDefine=ibmappcInLtpPfDefine, ibmsysMBUFsPercents=ibmsysMBUFsPercents, ibmappcInLtpLuName=ibmappcInLtpLuName, ibmsapFilterOut=ibmsapFilterOut, ibmappnNnTopoTgErrors=ibmappnNnTopoTgErrors, ibmtbFiltOrderInName=ibmtbFiltOrderInName, ibmdot1dStpPort=ibmdot1dStpPort, ibmnbpFilterPacketsFiltered=ibmnbpFilterPacketsFiltered, ibmdot1dStpMaxAge=ibmdot1dStpMaxAge, ibmipxsapServerIndex=ibmipxsapServerIndex, ibmRIFFilterInBcastType=ibmRIFFilterInBcastType, ibmappcInMdSendRuSzUpBnd=ibmappcInMdSendRuSzUpBnd, ibmappnNodeLsStatusLsName=ibmappnNodeLsStatusLsName, ibmdot1dStpDesignatedRoot=ibmdot1dStpDesignatedRoot, ibmvPortCfgEN=ibmvPortCfgEN, ibmappnIsAcTimeAgtUtcMonths=ibmappnIsAcTimeAgtUtcMonths, ibmappcInLluCntlPtLu=ibmappcInLluCntlPtLu, ibmappnLocalNnQuiescing=ibmappnLocalNnQuiescing, ibmappcInSsSendMaxRuSz=ibmappcInSsSendMaxRuSz, ibmvipBadLens=ibmvipBadLens, ibmvICP=ibmvICP, ibmpppLinkErrorsEntry=ibmpppLinkErrorsEntry, ibmpppIPCPCompressionType=ibmpppIPCPCompressionType, ibmfrCircuitThroughput=ibmfrCircuitThroughput, ibmtbmacFiltOutDestMask=ibmtbmacFiltOutDestMask, ibmappnNnTgFREntryTimeLeft=ibmappnNnTgFREntryTimeLeft, ibmappnCosTgRowDelayMin=ibmappnCosTgRowDelayMin, ibmappnIsAcDataEntry=ibmappnIsAcDataEntry, ibmdlsRemoteFrameFilterDestMask=ibmdlsRemoteFrameFilterDestMask, ibmappnNodeDefLsGoodXids=ibmappnNodeDefLsGoodXids, ibmipFilterScope=ibmipFilterScope, cylinkPrimaryPhone=cylinkPrimaryPhone, ibmvFltHCCompare=ibmvFltHCCompare, ibmappnIsAcGlobeMgrUtcYears=ibmappnIsAcGlobeMgrUtcYears, ibmmaintShutdown=ibmmaintShutdown, ibmmacAddrFilterType=ibmmacAddrFilterType, ibmdot1dBasePort=ibmdot1dBasePort, ibmvifPort=ibmvifPort, ibmappnNodePortDlsTable=ibmappnNodePortDlsTable, ibmappcInSsStatusIndex=ibmappcInSsStatusIndex, ibmxnsidpOutNoRoutes=ibmxnsidpOutNoRoutes, ibmvRtConfig=ibmvRtConfig, ibmvPortCfgOutFlt=ibmvPortCfgOutFlt, ibmappnLocalTgOperational=ibmappnLocalTgOperational, cylink=cylink, ibmRIFFilterOutTable=ibmRIFFilterOutTable, ibmTGProtocol=ibmTGProtocol, ibmdot1dStpTimeSinceTopologyChange=ibmdot1dStpTimeSinceTopologyChange, ibmtbsapFiltInfoTable=ibmtbsapFiltInfoTable, ibmappnNodeLsStatusXidRemoteSense=ibmappnNodeLsStatusXidRemoteSense, ibmappnNodePortDlsName=ibmappnNodePortDlsName, ibmipxsapServerSocket=ibmipxsapServerSocket, ibmipFilterType=ibmipFilterType, ibmappnCosTgRowByteCostMax=ibmappnCosTgRowByteCostMax, ibmappnNodeType=ibmappnNodeType, ibmipxRouteDest=ibmipxRouteDest, cylinkQRSS=cylinkQRSS, ibmsnapFilterInIfIndex=ibmsnapFilterInIfIndex, ibmappnLocalTg=ibmappnLocalTg, ibmappcInRluDefCnosSup=ibmappcInRluDefCnosSup, ibmappcInMdModeName=ibmappcInMdModeName, ibmappnSnmpInGetNexts=ibmappnSnmpInGetNexts, ibmvPortCfgARP=ibmvPortCfgARP, ibmRIFFilterOutRingMask=ibmRIFFilterOutRingMask, ibmxnsFilterUse=ibmxnsFilterUse, ibmappnCosName=ibmappnCosName, ibmappnIsInP2SNonFmdBytes=ibmappnIsInP2SNonFmdBytes, ibmappnIsInPsSendMaxBtuSize=ibmappnIsInPsSendMaxBtuSize, ibmPtyQueueingIfIndex=ibmPtyQueueingIfIndex, ibmappnNnNodeFRGateway=ibmappnNnNodeFRGateway, ibmhopCountFilterInfoEntry=ibmhopCountFilterInfoEntry, ibmappnIsAcDataTable=ibmappnIsAcDataTable, ibmdecLANCircuitAddrType=ibmdecLANCircuitAddrType, ibmdlsStationTransmitWindowCount=ibmdlsStationTransmitWindowCount, ibmdot1dStaticEntry=ibmdot1dStaticEntry, ibmxnsidpOutDiscards=ibmxnsidpOutDiscards, ibmappnIsAcBtypeFullReason=ibmappnIsAcBtypeFullReason)
mibBuilder.exportSymbols("IBM6611-MIB", ibmFiltOrderInPriority=ibmFiltOrderInPriority, ibmvRtCfgOutFltIfIndex=ibmvRtCfgOutFltIfIndex, ibmdlsCirLocalLinkDataPktSent=ibmdlsCirLocalLinkDataPktSent, ibmfrCircuitDlci=ibmfrCircuitDlci, ibmdecAllRoutersFuncAddr=ibmdecAllRoutersFuncAddr, ibmappnLocalTgByteCost=ibmappnLocalTgByteCost, ibmappnLocalNnIsr=ibmappnLocalNnIsr, ibmvipOutNoRoutes=ibmvipOutNoRoutes, ibmipPtyQueueEnableTable=ibmipPtyQueueEnableTable, ibmipxidpTooSmall=ibmipxidpTooSmall, ibmdlsRouterInFrames=ibmdlsRouterInFrames, ibmappnIsInModeName=ibmappnIsInModeName, ibmvPortCfgInFlt=ibmvPortCfgInFlt, ibmappnNnNodeFRCongested=ibmappnNnNodeFRCongested, ibmappnNnNodeRouteAddResist=ibmappnNnNodeRouteAddResist, ibmpppLinkConfigTimeouts=ibmpppLinkConfigTimeouts, ibmsapFilterInfoEntry=ibmsapFilterInfoEntry, ibmappnLocalEnTgCpCpSession=ibmappnLocalEnTgCpCpSession, ibmipxsapServerName=ibmipxsapServerName, ibmpppLCPInCRejs=ibmpppLCPInCRejs, ibmdot1dStpPortDesignatedPort=ibmdot1dStpPortDesignatedPort, ibmtbEthTypeFiltOutFilterType=ibmtbEthTypeFiltOutFilterType, ibmsnmp=ibmsnmp, ibmtbFiltOrderOutIfIndex=ibmtbFiltOrderOutIfIndex, ibmxnsRouteUse=ibmxnsRouteUse, ibmvNbrIfIndex=ibmvNbrIfIndex, ibmappnNodeLsStatusTgNum=ibmappnNodeLsStatusTgNum, ibmappnNnTopologyEntry=ibmappnNnTopologyEntry, ibmappnDirType=ibmappnDirType, ibmswvpd=ibmswvpd, ibmtbwinFiltOutIfIndex=ibmtbwinFiltOutIfIndex, ibmvRouting=ibmvRouting, ibmappnLocalNnEndptDepleted=ibmappnLocalNnEndptDepleted, ibmappcInSsStatusSenseCode=ibmappcInSsStatusSenseCode, ibmvarpHeaderError=ibmvarpHeaderError, ibmappnNnTgOwner=ibmappnNnTgOwner, ibmappnSessEndPoint=ibmappnSessEndPoint, ibmdot1dStaticStatus=ibmdot1dStaticStatus, ibmappnDirNotFoundLocates=ibmappnDirNotFoundLocates, ibmvRtCfgFltNetID=ibmvRtCfgFltNetID, ibmappnNodeLsName=ibmappnNodeLsName, ibmappnIsAcBtypeCurBufs=ibmappnIsAcBtypeCurBufs, ibmappcInMdPtmClos=ibmappcInMdPtmClos, ibmdecLANCircuitIndex=ibmdecLANCircuitIndex, ibmhopCountFilterCount=ibmhopCountFilterCount, ibmdlsStationForceDisconnectTimeout=ibmdlsStationForceDisconnectTimeout, ibmdot1dStpPortEnable=ibmdot1dStpPortEnable, ibmappnCosNodeRowEntry=ibmappnCosNodeRowEntry, ibmpppLinkPacketTooLongs=ibmpppLinkPacketTooLongs, ibmappnNnTopoTgLowRsns=ibmappnNnTopoTgLowRsns, ibmappnNnTopoRouteTrees=ibmappnNnTopoRouteTrees, ibmFiltOrderOutName=ibmFiltOrderOutName, ibmdlsCirLocalLinkDataPktRcv=ibmdlsCirLocalLinkDataPktRcv, ibmappcInMdEntry=ibmappcInMdEntry, ibmappnNodeLsOutXidBytes=ibmappnNodeLsOutXidBytes, ibmringFilterInIfIndex=ibmringFilterInIfIndex, ibmsapFilterInfoTable=ibmsapFilterInfoTable, ibmtbFiltOrderInEntry=ibmtbFiltOrderInEntry, ibmmacAddrFilterInIfIndex=ibmmacAddrFilterInIfIndex, ibmappnLocalTgDestVirtual=ibmappnLocalTgDestVirtual, ibmvRtCfgInFltMode=ibmvRtCfgInFltMode, ibmvRtCfgFltMode=ibmvRtCfgFltMode, ibmappnNnNodeFRCentralDirectory=ibmappnNnNodeFRCentralDirectory, ibmappcInGlobeActSess=ibmappcInGlobeActSess, ibmappnLocalTgRsn=ibmappnLocalTgRsn, ibmFiltOrderOutPriority=ibmFiltOrderOutPriority, ibmappnNodePortTrTable=ibmappnNodePortTrTable, ibmxnsidpMcastInReceives=ibmxnsidpMcastInReceives, ibmappnIsAcTimeAgtUtcMins=ibmappnIsAcTimeAgtUtcMins, ibmmacAddrFilterOutTable=ibmmacAddrFilterOutTable, ibmipxRouteTable=ibmipxRouteTable, ibmipPtyQueueEnableIfIndex=ibmipPtyQueueEnableIfIndex, ibmipFilterExtEntry=ibmipFilterExtEntry, ibmappnIsInPsRecvRpc=ibmappnIsInPsRecvRpc, ibmfrDlcmiMonitoredEvents=ibmfrDlcmiMonitoredEvents, ibmxnsAddrIfIndex=ibmxnsAddrIfIndex, ibmappnLocalEnTgOperational=ibmappnLocalEnTgOperational, ibmdlsRemoteNameFilterTable=ibmdlsRemoteNameFilterTable, ibmwindowFilterInMaskString=ibmwindowFilterInMaskString, ibmappnCosNodeRowResistMax=ibmappnCosNodeRowResistMax, ibmRIFFilterInEntry=ibmRIFFilterInEntry, ibmappcInSsP2SNonFmdPius=ibmappcInSsP2SNonFmdPius, ibmvRtTable=ibmvRtTable, ibmvifInErrs=ibmvifInErrs, ibmsnapFilterOutMask=ibmsnapFilterOutMask, ibmipxRouteNextHop=ibmipxRouteNextHop, ibmappnIsAcSessUpTime=ibmappnIsAcSessUpTime, ibmpppLCPLinkNumber=ibmpppLCPLinkNumber, ibmdlsRouterTable=ibmdlsRouterTable, ibmRIFFilterInfoEntry=ibmRIFFilterInfoEntry, ibmappcInSsSendRpc=ibmappcInSsSendRpc, ibmdlsLocalFrameFilterID=ibmdlsLocalFrameFilterID, ibmappnLocalEnType=ibmappnLocalEnType, ibmappnIsAcPcid=ibmappnIsAcPcid, ibmdlsCirLocalLinkCmdRepollsSent=ibmdlsCirLocalLinkCmdRepollsSent, ibmappnIsAcTimeMgrUtcMins=ibmappnIsAcTimeMgrUtcMins, ibmappnNodeLsStatusIndex=ibmappnNodeLsStatusIndex, ibmipxsapStatOutResponses=ibmipxsapStatOutResponses, ibmsystem=ibmsystem, ibmFiltOrderInName=ibmFiltOrderInName, ibmmacAddrFilterInBcastType=ibmmacAddrFilterInBcastType, ibmRIFFilterInfoTable=ibmRIFFilterInfoTable, ibmappnDirOutBcastLocates=ibmappnDirOutBcastLocates, ibmmacAddrFilterOutBcastType=ibmmacAddrFilterOutBcastType, ibmdlsDefaultDestAddress=ibmdlsDefaultDestAddress, ibmsysMBUFs=ibmsysMBUFs, ibmfrErrTable=ibmfrErrTable, ibmtbEthTypeFiltOutIfIndex=ibmtbEthTypeFiltOutIfIndex, ibmappnNnTopoRouteRejs=ibmappnNnTopoRouteRejs, ibmpppLinkLastInRxOctets=ibmpppLinkLastInRxOctets, ibmappnLocalEnTgSecurity=ibmappnLocalEnTgSecurity, ibmpppLCPInCNs=ibmpppLCPInCNs, ibmtbwinFiltInId=ibmtbwinFiltInId, ibmatportFilterEntry=ibmatportFilterEntry, ibmdlsStationPrimaryRepollTimeout=ibmdlsStationPrimaryRepollTimeout, ibmdlsLocalFrameFilterDestAddress=ibmdlsLocalFrameFilterDestAddress, ibmringFilterOutEntry=ibmringFilterOutEntry, ibmappnNnTgQuiescing=ibmappnNnTgQuiescing, ibmappnNnTopoCurNumNodes=ibmappnNnTopoCurNumNodes, ibmappnIsAcTimeAgtUtcYdays=ibmappnIsAcTimeAgtUtcYdays, ibmxnsFilterEntry=ibmxnsFilterEntry, ibmappnIsAcTransPriority=ibmappnIsAcTransPriority, ibmsapFilterInNotForwarded=ibmsapFilterInNotForwarded, ibmpppLCPOutCRejs=ibmpppLCPOutCRejs, ibmRIFFilterOutBridgeMask=ibmRIFFilterOutBridgeMask, ibmappnNnNodeFRChainSupport=ibmappnNnNodeFRChainSupport, swvpdVerId=swvpdVerId, ibmtbwinFiltInNumBytes=ibmtbwinFiltInNumBytes, ibmpppLinkInRxOctets=ibmpppLinkInRxOctets, ibmappnLocalNnChainSupport=ibmappnLocalNnChainSupport, ibmappnNnTopoNodeEqualRsns=ibmappnNnTopoNodeEqualRsns, ibmappnSessGeneral=ibmappnSessGeneral, ibmtbmacFiltOutIfIndex=ibmtbmacFiltOutIfIndex, ibmvifDescr=ibmvifDescr, ibmappnNnTgFRConnCost=ibmappnNnTgFRConnCost, ibmChipSetIBM8025B=ibmChipSetIBM8025B, ibmappnNodeParallelTg=ibmappnNodeParallelTg, ibmipPtyQueuePort=ibmipPtyQueuePort, ibmdot1dBaseType=ibmdot1dBaseType, ibmsysInfo=ibmsysInfo, ibmbridgeMACAddressFilters=ibmbridgeMACAddressFilters, ibmsnapFilterType=ibmsnapFilterType, ibmRIFFilterInIfIndex=ibmRIFFilterInIfIndex, ibmpppLinkVersion=ibmpppLinkVersion, ibmxnsErrSquelched=ibmxnsErrSquelched, ibmdlsRouterDefinedBy=ibmdlsRouterDefinedBy, ibmappnIsAcS2PFmdBytes=ibmappnIsAcS2PFmdBytes, ibmtbWindowFilters=ibmtbWindowFilters, ibmappnIsAcModeName=ibmappnIsAcModeName, ibmappnNnTgFRDest=ibmappnNnTgFRDest, ibmappnIsAcTimeEntryType=ibmappnIsAcTimeEntryType, ibmappcInSsP2SFmdPius=ibmappcInSsP2SFmdPius, ibmvFltType=ibmvFltType, ibmmacAddrFilterInDestAddress=ibmmacAddrFilterInDestAddress, ibmdot1dStpPortDesignatedRoot=ibmdot1dStpPortDesignatedRoot, ibmwindowFilterOutMaskString=ibmwindowFilterOutMaskString, ibmipxsapStatOutDiscards=ibmipxsapStatOutDiscards, ibmvNbrRIF=ibmvNbrRIF, ibmappcInLluBindRspMayQ=ibmappcInLluBindRspMayQ, ibmxnsRouteNextHop=ibmxnsRouteNextHop, ibmdot1dBasePortTable=ibmdot1dBasePortTable, ibmdlsCirTable=ibmdlsCirTable, ibmappcInMdSessEndTpName=ibmappcInMdSessEndTpName, ibmsysMBUFsKbytes=ibmsysMBUFsKbytes, ibmappnIsAcGlobeMgrUtcMonths=ibmappnIsAcGlobeMgrUtcMonths, ibmappnLocalTgTable=ibmappnLocalTgTable, ibmdot1dStpPortState=ibmdot1dStpPortState, ibmappcInLtpPfSessCntl=ibmappcInLtpPfSessCntl, ibmappnIsAcBtypeErrorWraps=ibmappnIsAcBtypeErrorWraps, ibmringFilterInNumber=ibmringFilterInNumber, ibmtbwinFiltOutNumBytes=ibmtbwinFiltOutNumBytes, ibmappnGeneralInfoAndCaps=ibmappnGeneralInfoAndCaps, ibmappnDirLuOwnerName=ibmappnDirLuOwnerName, ibmtbwinFiltInOffsetStart=ibmtbwinFiltInOffsetStart, ibmpppLCPOutDiscReqs=ibmpppLCPOutDiscReqs, ibmhopCountFilterIfIndex=ibmhopCountFilterIfIndex, ibmtbwinFiltOutMaskString=ibmtbwinFiltOutMaskString, ibmfrCircuitReceivedFECNs=ibmfrCircuitReceivedFECNs, ibmpppLCPRejects=ibmpppLCPRejects, ibmappnNnNodeChainSupport=ibmappnNnNodeChainSupport, ibmappnIsAcEntryType=ibmappnIsAcEntryType, ibmpppLCPInTAs=ibmpppLCPInTAs, ibmvipZeroHops=ibmvipZeroHops, ibmappcInSsStatusType=ibmappcInSsStatusType, ibmxnsidpOutRequests=ibmxnsidpOutRequests, ibmSelectNetTable=ibmSelectNetTable, ibmappcInSsStatusDetectModule=ibmappcInSsStatusDetectModule, ibmvipBcastInReceives=ibmvipBcastInReceives, ibmipPtyQueueIfIndex=ibmipPtyQueueIfIndex, ibmwindowFilterOutNumBytes=ibmwindowFilterOutNumBytes, ibmipPermitDeny=ibmipPermitDeny, ibmappnNnNodeFRIsr=ibmappnNnNodeFRIsr, ibmappnIsAcSessType=ibmappnIsAcSessType, ibmappnSnmpInPkts=ibmappnSnmpInPkts, ibmmacAddrFilterInSrcAddress=ibmmacAddrFilterInSrcAddress, ibmvPortCfgPerUpdate=ibmvPortCfgPerUpdate, ibmappnIsAcGlobal=ibmappnIsAcGlobal, ibmpppLinkLastInvalidProtocol=ibmpppLinkLastInvalidProtocol, ibmappnDirCurCaches=ibmappnDirCurCaches, ibmappnNnTgFRUsr3=ibmappnNnTgFRUsr3, ibmipxRouteEntry=ibmipxRouteEntry, ibmvRtIfIndex=ibmvRtIfIndex, ibmappnNodeLsEffCap=ibmappnNodeLsEffCap, ibmdot1dTpAgingTime=ibmdot1dTpAgingTime, ibmpppLinkStatusIndex=ibmpppLinkStatusIndex, ibmwindowFilterOutOffset=ibmwindowFilterOutOffset, ibmvRtCfgInFltUses=ibmvRtCfgInFltUses, ibmpppLinkTerminateTimeouts=ibmpppLinkTerminateTimeouts, ibmipxFilterUse=ibmipxFilterUse, ibmvFltMode=ibmvFltMode, ibmappnNodePortMaxRcvBtuSize=ibmappnNodePortMaxRcvBtuSize, ibmappnCosNodeRowWgt=ibmappnCosNodeRowWgt, ibmwindowFilterInOffset=ibmwindowFilterInOffset, cylinkOnesControl=cylinkOnesControl, ibmvNbrRemAddress=ibmvNbrRemAddress, ibmpppLinkRestartTimerValue=ibmpppLinkRestartTimerValue, ibmappcInLtpEntry=ibmappcInLtpEntry, ibmappnNodeBlockNum=ibmappnNodeBlockNum, ibmappnNnNodeName=ibmappnNnNodeName, ibmappnIsInPsRecvPacingType=ibmappnIsInPsRecvPacingType, ibmvNeighbor=ibmvNeighbor, ibmdot1dStpPortDesignatedCost=ibmdot1dStpPortDesignatedCost, ibmappnIsAcGlobeMgrUtcYdays=ibmappnIsAcGlobeMgrUtcYdays, ibmappnIsInSecLuName=ibmappnIsInSecLuName, ibmvFRPfrgFails=ibmvFRPfrgFails, ibmappnNodePortState=ibmappnNodePortState, ibmSubagents=ibmSubagents, ibmappnNodePortTrName=ibmappnNodePortTrName, cylinkClockFrequency=cylinkClockFrequency, ibmappnCosTgRowName=ibmappnCosTgRowName, ibmdlsLocalNameFilterID=ibmdlsLocalNameFilterID, ibmappcInLluDefaultLu=ibmappcInLluDefaultLu, ibmtbEthTypeFilters=ibmtbEthTypeFilters, ibmappnIsAcTimeMgrUtcWdays=ibmappnIsAcTimeMgrUtcWdays, ibmxnsRouteEntry=ibmxnsRouteEntry, ibmappcInLtpInstNum=ibmappcInLtpInstNum, ibmappnIsAcBtypeDeletes=ibmappnIsAcBtypeDeletes, ibmappnIsAcTimeAgtUtcYears=ibmappnIsAcTimeAgtUtcYears, ibmappnNodePortDlcType=ibmappnNodePortDlcType, ibmdlsStationIfIndex=ibmdlsStationIfIndex, ibmappnNodeLsStatusTime=ibmappnNodeLsStatusTime, ibmappnDirCurHomeEntries=ibmappnDirCurHomeEntries, ibmxnsFilterType=ibmxnsFilterType, ibmappnNodeLsCurrentDelay=ibmappnNodeLsCurrentDelay, ibmvRtCfgFlt=ibmvRtCfgFlt, ibmappnSessIntermediate=ibmappnSessIntermediate, ibmappnIsAcTimeMgrUtcYears=ibmappnIsAcTimeMgrUtcYears, ibmappnConvGeneral=ibmappnConvGeneral, ibmipxidpForwDatagrams=ibmipxidpForwDatagrams, ibmappnDirLuLocation=ibmappnDirLuLocation, ibmxnsidpBcastOutRequests=ibmxnsidpBcastOutRequests, ibmPtyQueueingQnum=ibmPtyQueueingQnum, ibmvRtCfgFltEntry=ibmvRtCfgFltEntry, ibmtbmacFiltOutSrcAddress=ibmtbmacFiltOutSrcAddress)
mibBuilder.exportSymbols("IBM6611-MIB", ibmpppIPCPOutOctets=ibmpppIPCPOutOctets, ibmappnNnTopo=ibmappnNnTopo, ibmatportFilterIndex=ibmatportFilterIndex, ibmappnNnTopoTgTimerUpdates=ibmappnNnTopoTgTimerUpdates, ibmappnLocalTgDelay=ibmappnLocalTgDelay, ibmappnNodeCpName=ibmappnNodeCpName, ibmdlsCirLocalLinkMaxContResent=ibmdlsCirLocalLinkMaxContResent, ibmappnIsInTable=ibmappnIsInTable, ibmappnNodeLsLocalTrSap=ibmappnNodeLsLocalTrSap, ibmSelectNetFilterTable=ibmSelectNetFilterTable, ibmappnNnNodeFRIsrDepleted=ibmappnNnNodeFRIsrDepleted, ibmipxFilterTable=ibmipxFilterTable, ibmappnNnTopoTgStateUpdates=ibmappnNnTopoTgStateUpdates, ibmappnNodeLsStatusGeneralSense=ibmappnNodeLsStatusGeneralSense, ibmvRtCfgInFltNum=ibmvRtCfgInFltNum, ibmFiltOrderOutIfIndex=ibmFiltOrderOutIfIndex, ibmpppLCPOutEchoReqs=ibmpppLCPOutEchoReqs, ibmappnIsAcTimeAgtName=ibmappnIsAcTimeAgtName, ibmvifAddress=ibmvifAddress, ibmappcInLluTable=ibmappcInLluTable, ibmappnCosTgRowSecurityMin=ibmappnCosTgRowSecurityMin, ibmappnIsAcTimeMgrUtcSecs=ibmappnIsAcTimeMgrUtcSecs, ibmpppLinkLastUnknownProtocol=ibmpppLinkLastUnknownProtocol, ibmpppLinkLastInRxPackets=ibmpppLinkLastInRxPackets, ibmpppLinkRemoteQualityPeriod=ibmpppLinkRemoteQualityPeriod, ibmipxidpInReceives=ibmipxidpInReceives, ibmMainProcessorLoadTable=ibmMainProcessorLoadTable, ibmappnNnTgFRQuiescing=ibmappnNnTgFRQuiescing, ibmappnLocalEnTgModemClass=ibmappnLocalEnTgModemClass, ibmappnNodeLsGoodXids=ibmappnNodeLsGoodXids, ibmdlsRemoteNameFilterEntry=ibmdlsRemoteNameFilterEntry, ibmMainProcessorLoadEntry=ibmMainProcessorLoadEntry, ibmtbmacFiltIfIndex=ibmtbmacFiltIfIndex, ibmdlsCirLocalLinkAdpSendErr=ibmdlsCirLocalLinkAdpSendErr, ibmappnCosTgRowSecurityMax=ibmappnCosTgRowSecurityMax, ibmpppIPLinkNumber=ibmpppIPLinkNumber, ibmappnNnTgTopologyFRTable=ibmappnNnTgTopologyFRTable, ibmappnNnTgFRByteCost=ibmappnNnTgFRByteCost, ibmappnIsAcCtrUpTime=ibmappnIsAcCtrUpTime, ibmappnNodePortDlcTracMsgType=ibmappnNodePortDlcTracMsgType, ibmappnNnTgFRRsn=ibmappnNnTgFRRsn, ibmappnIsAcP2SFmdBytes=ibmappnIsAcP2SFmdBytes, ibmipxRouteMetric=ibmipxRouteMetric, ibmappnNnTgFRDestVirtual=ibmappnNnTgFRDestVirtual, ibmappnCosModeTable=ibmappnCosModeTable, ibmappnIsAcGlobeStatus=ibmappnIsAcGlobeStatus, ibmvRtCfgFltUses=ibmvRtCfgFltUses, ibmringFilterOutNumber=ibmringFilterOutNumber, ibmTrapThrottleId=ibmTrapThrottleId, ibmdlsRemoteNameFilterSrcAddress=ibmdlsRemoteNameFilterSrcAddress, ibmappnNodeDynLsBadXids=ibmappnNodeDynLsBadXids, ibmdecLANCircuitEntry=ibmdecLANCircuitEntry, ibmtbmacFiltInDestAddress=ibmtbmacFiltInDestAddress, ibmdlsCirLocalLinkDataPktResent=ibmdlsCirLocalLinkDataPktResent, ibmappnNnTgByteCost=ibmappnNnTgByteCost, ibmvifInPkts=ibmvifInPkts, ibmappnNodePortIpPortNum=ibmappnNodePortIpPortNum, ibmappcInMdAltCode=ibmappcInMdAltCode, ibmappnMemorySize=ibmappnMemorySize, ibmappnLocalEnTgOrigin=ibmappnLocalEnTgOrigin, ibmvNbrNetid=ibmvNbrNetid, ibmdot1dTpPortTable=ibmdot1dTpPortTable, ibmdlsDefaultNBDestEntry=ibmdlsDefaultNBDestEntry, ibmdlsStationSrcAddress=ibmdlsStationSrcAddress, ibmappcInSsSendPacingType=ibmappcInSsSendPacingType, ibmipFilterTable=ibmipFilterTable, ibmappnIsAcBufNumber=ibmappnIsAcBufNumber, ibmpppLinkMagicNumber=ibmpppLinkMagicNumber, ibmpppLCPInEchoReps=ibmpppLCPInEchoReps, ibmbridgeSNAPFilters=ibmbridgeSNAPFilters, ibmappnNnTgDest=ibmappnNnTgDest, ibmringFilterIfIndex=ibmringFilterIfIndex, ibmappnXidInformation=ibmappnXidInformation, ibmappnNodeLsMaxSendBtuSize=ibmappnNodeLsMaxSendBtuSize, ibmvFltUses=ibmvFltUses, ibmappnNodeLsStatusXidLocalSense=ibmappnNodeLsStatusXidLocalSense, ibmappnIsInGlobeRscvTime=ibmappnIsInGlobeRscvTime, ibmappcInMdAutoActLimit=ibmappcInMdAutoActLimit, ibmtbwinFiltOutOffsetStart=ibmtbwinFiltOutOffsetStart, ibmdlsFrameFilterType=ibmdlsFrameFilterType, ibmappnNodeNegotLs=ibmappnNodeNegotLs, ibmappnPortInformation=ibmappnPortInformation, ibmappnNnUniqueInfoAndCaps=ibmappnNnUniqueInfoAndCaps, ibmappcInSsPaceType=ibmappcInSsPaceType, ibmappnNnNodeIsr=ibmappnNnNodeIsr, ibmappnNodePortLsRole=ibmappnNodePortLsRole, ibmvRtCfgFltNum=ibmvRtCfgFltNum, ibmfrErrData=ibmfrErrData, ibmtbEthTypeFiltInIfIndex=ibmtbEthTypeFiltInIfIndex, ibmappnNodeLsDlsTable=ibmappnNodeLsDlsTable, ibmappcInSsStatusTable=ibmappcInSsStatusTable, ibmvARP=ibmvARP, ibmSelectNetFilterNetStart=ibmSelectNetFilterNetStart, ibmappcInSsEnhanceSecSup=ibmappcInSsEnhanceSecSup, ibmringFilterInTable=ibmringFilterInTable, ibmsysRealMemFree=ibmsysRealMemFree, ibmappcInMdMinCwinLimit=ibmappcInMdMinCwinLimit, ibmxnsErrTTLExpired=ibmxnsErrTTLExpired, ibmappnNodeLsTargetPacingCount=ibmappnNodeLsTargetPacingCount, ibmipPtyQueueDefault=ibmipPtyQueueDefault, ibmappnNnTgFROperational=ibmappnNnTgFROperational, ibmappnIsAcBtypeCheckPts=ibmappnIsAcBtypeCheckPts, ibmappcInLtpTpName=ibmappcInLtpTpName, ibmvarpQueryReqs=ibmvarpQueryReqs, ibmRIFFilterOutRouteDesignator=ibmRIFFilterOutRouteDesignator, ibmappnNnTgUsr1=ibmappnNnTgUsr1, ibmappnSnmpOutNoSuchNames=ibmappnSnmpOutNoSuchNames, ibmbridgeSAPFilters=ibmbridgeSAPFilters, ibmdlsCirLocalLinkSubState=ibmdlsCirLocalLinkSubState, ibmdlsVirtualRingSegmentNumber=ibmdlsVirtualRingSegmentNumber, ibmxnsidpTooSmall=ibmxnsidpTooSmall, ibmvrtpReqSents=ibmvrtpReqSents, ibmdlsDefaultNBDestName=ibmdlsDefaultNBDestName, ibmappnIsAcTimeMgrTimeValid=ibmappnIsAcTimeMgrTimeValid, ibmTG=ibmTG, ibmRIFFilterInFilterType=ibmRIFFilterInFilterType, ibmChipSetIntel=ibmChipSetIntel, ibmappcInMdSessLimit=ibmappcInMdSessLimit, ibmappnNodePortName=ibmappnNodePortName, ibmappcInMdRecvPacWinSz=ibmappcInMdRecvPacWinSz, ibmappnNnNodeFRQuiescing=ibmappnNnNodeFRQuiescing, ibmappnIsAcTimeEntry=ibmappnIsAcTimeEntry, ibmappnNnNodeFRFrsn=ibmappnNnNodeFRFrsn, ibmappnNnTgDelay=ibmappnNnTgDelay, cylinkClockSource=cylinkClockSource)
