#
# PySNMP MIB module IBMBNA-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/IBMBNA-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 19:39:55 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, OctetString, Integer = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "OctetString", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
SingleValueConstraint, ValueRangeConstraint, ConstraintsIntersection, ValueSizeConstraint, ConstraintsUnion = mibBuilder.importSymbols("ASN1-REFINEMENT", "SingleValueConstraint", "ValueRangeConstraint", "ConstraintsIntersection", "ValueSizeConstraint", "ConstraintsUnion")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
TimeTicks, Counter64, Bits, MibScalar, MibTable, MibTableRow, MibTableColumn, Unsigned32, iso, ObjectIdentity, ModuleIdentity, Counter32, enterprises, IpAddress, MibIdentifier, Gauge32, NotificationType, Integer32 = mibBuilder.importSymbols("SNMPv2-SMI", "TimeTicks", "Counter64", "Bits", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Unsigned32", "iso", "ObjectIdentity", "ModuleIdentity", "Counter32", "enterprises", "IpAddress", "MibIdentifier", "Gauge32", "NotificationType", "Integer32")
DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention")
class TruthValue(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2))
    namedValues = NamedValues(("true", 1), ("false", 2))

ibm = MibIdentifier((1, 3, 6, 1, 4, 1, 2))
ibmArchitecture = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 5))
ibmBna = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 5, 21))
ibmBnaObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 5, 21, 1))
ibmBnaConformance = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 5, 21, 2))
ibmBnaLocalTgTable = MibTable((1, 3, 6, 1, 4, 1, 2, 5, 21, 1, 1), )
if mibBuilder.loadTexts: ibmBnaLocalTgTable.setStatus('mandatory')
ibmBnaLocalTgEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2, 5, 21, 1, 1, 1), ).setIndexNames((0, "IBMBNA-MIB", "ibmBnaLocalTgDest"), (0, "IBMBNA-MIB", "ibmBnaLocalTgNum"))
if mibBuilder.loadTexts: ibmBnaLocalTgEntry.setStatus('mandatory')
ibmBnaLocalTgDest = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 5, 21, 1, 1, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(3, 17))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmBnaLocalTgDest.setStatus('mandatory')
ibmBnaLocalTgNum = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 5, 21, 1, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmBnaLocalTgNum.setStatus('mandatory')
ibmBnaLocalTgLinkType = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 5, 21, 1, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 255))).clone(namedValues=NamedValues(("other", 1), ("uplink", 2), ("downlink", 3), ("downlinkToBranchNetworkNode", 4), ("unknown", 255)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmBnaLocalTgLinkType.setStatus('mandatory')
ibmBnaNnTopologyFRTable = MibTable((1, 3, 6, 1, 4, 1, 2, 5, 21, 1, 2), )
if mibBuilder.loadTexts: ibmBnaNnTopologyFRTable.setStatus('mandatory')
ibmBnaNnTopologyFREntry = MibTableRow((1, 3, 6, 1, 4, 1, 2, 5, 21, 1, 2, 1), ).setIndexNames((0, "IBMBNA-MIB", "ibmBnaNnNodeFRFrsn"), (0, "IBMBNA-MIB", "ibmBnaNnNodeFRName"))
if mibBuilder.loadTexts: ibmBnaNnTopologyFREntry.setStatus('mandatory')
ibmBnaNnNodeFRFrsn = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 5, 21, 1, 2, 1, 1), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmBnaNnNodeFRFrsn.setStatus('mandatory')
ibmBnaNnNodeFRName = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 5, 21, 1, 2, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(3, 17))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmBnaNnNodeFRName.setStatus('mandatory')
ibmBnaNnNodeFRBranchAwareness = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 5, 21, 1, 2, 1, 3), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmBnaNnNodeFRBranchAwareness.setStatus('mandatory')
ibmBnaNnTgTopologyFRTable = MibTable((1, 3, 6, 1, 4, 1, 2, 5, 21, 1, 3), )
if mibBuilder.loadTexts: ibmBnaNnTgTopologyFRTable.setStatus('mandatory')
ibmBnaNnTgTopologyFREntry = MibTableRow((1, 3, 6, 1, 4, 1, 2, 5, 21, 1, 3, 1), ).setIndexNames((0, "IBMBNA-MIB", "ibmBnaNnTgFRFrsn"), (0, "IBMBNA-MIB", "ibmBnaNnTgFROwner"), (0, "IBMBNA-MIB", "ibmBnaNnTgFRDest"), (0, "IBMBNA-MIB", "ibmBnaNnTgFRNum"))
if mibBuilder.loadTexts: ibmBnaNnTgTopologyFREntry.setStatus('mandatory')
ibmBnaNnTgFRFrsn = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 5, 21, 1, 3, 1, 1), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmBnaNnTgFRFrsn.setStatus('mandatory')
ibmBnaNnTgFROwner = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 5, 21, 1, 3, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(3, 17))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmBnaNnTgFROwner.setStatus('mandatory')
ibmBnaNnTgFRDest = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 5, 21, 1, 3, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(3, 17))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmBnaNnTgFRDest.setStatus('mandatory')
ibmBnaNnTgFRNum = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 5, 21, 1, 3, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmBnaNnTgFRNum.setStatus('mandatory')
ibmBnaNnTgFRBranchTg = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 5, 21, 1, 3, 1, 5), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmBnaNnTgFRBranchTg.setStatus('mandatory')
ibmBnaDirTable = MibTable((1, 3, 6, 1, 4, 1, 2, 5, 21, 1, 4), )
if mibBuilder.loadTexts: ibmBnaDirTable.setStatus('mandatory')
ibmBnaDirEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2, 5, 21, 1, 4, 1), ).setIndexNames((0, "IBMBNA-MIB", "ibmBnaDirLuName"))
if mibBuilder.loadTexts: ibmBnaDirEntry.setStatus('mandatory')
ibmBnaDirLuName = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 5, 21, 1, 4, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 17))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmBnaDirLuName.setStatus('mandatory')
ibmBnaDirApparentLuOwnerName = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 5, 21, 1, 4, 1, 2), DisplayString().subtype(subtypeSpec=ConstraintsUnion(ValueSizeConstraint(0, 0), ValueSizeConstraint(3, 17), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmBnaDirApparentLuOwnerName.setStatus('mandatory')
ibmBnaCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 5, 21, 2, 1))
ibmBnaConfGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 5, 21, 2, 2))
mibBuilder.exportSymbols("IBMBNA-MIB", ibmBnaNnNodeFRFrsn=ibmBnaNnNodeFRFrsn, ibmBnaCompliances=ibmBnaCompliances, ibmBnaDirTable=ibmBnaDirTable, ibmBnaNnNodeFRBranchAwareness=ibmBnaNnNodeFRBranchAwareness, ibmBnaNnTopologyFREntry=ibmBnaNnTopologyFREntry, ibmBnaNnTgFRDest=ibmBnaNnTgFRDest, ibm=ibm, ibmBnaDirEntry=ibmBnaDirEntry, ibmBnaNnTgFRFrsn=ibmBnaNnTgFRFrsn, ibmBnaNnTgTopologyFRTable=ibmBnaNnTgTopologyFRTable, ibmBnaNnTgTopologyFREntry=ibmBnaNnTgTopologyFREntry, ibmBnaLocalTgNum=ibmBnaLocalTgNum, ibmBnaObjects=ibmBnaObjects, ibmBnaNnTgFROwner=ibmBnaNnTgFROwner, ibmBnaDirLuName=ibmBnaDirLuName, ibmBnaNnTgFRBranchTg=ibmBnaNnTgFRBranchTg, TruthValue=TruthValue, ibmBnaConfGroups=ibmBnaConfGroups, ibmBnaConformance=ibmBnaConformance, ibmBnaDirApparentLuOwnerName=ibmBnaDirApparentLuOwnerName, ibmBnaNnTgFRNum=ibmBnaNnTgFRNum, ibmBnaLocalTgDest=ibmBnaLocalTgDest, ibmBna=ibmBna, ibmBnaNnTopologyFRTable=ibmBnaNnTopologyFRTable, ibmBnaLocalTgLinkType=ibmBnaLocalTgLinkType, ibmBnaNnNodeFRName=ibmBnaNnNodeFRName, ibmBnaLocalTgEntry=ibmBnaLocalTgEntry, ibmBnaLocalTgTable=ibmBnaLocalTgTable, ibmArchitecture=ibmArchitecture)
