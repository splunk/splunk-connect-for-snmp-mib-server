#
# PySNMP MIB module HP-ICF-MAD-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/HP-ICF-MAD-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 19:22:05 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, ObjectIdentifier, Integer = mibBuilder.importSymbols("ASN1", "OctetString", "ObjectIdentifier", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsIntersection, ValueSizeConstraint, SingleValueConstraint, ValueRangeConstraint, ConstraintsUnion = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsIntersection", "ValueSizeConstraint", "SingleValueConstraint", "ValueRangeConstraint", "ConstraintsUnion")
hpSwitch, = mibBuilder.importSymbols("HP-ICF-OID", "hpSwitch")
InterfaceIndex, = mibBuilder.importSymbols("IF-MIB", "InterfaceIndex")
ModuleCompliance, NotificationGroup, ObjectGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup", "ObjectGroup")
MibIdentifier, Bits, iso, IpAddress, Integer32, Counter32, ModuleIdentity, Counter64, ObjectIdentity, TimeTicks, Unsigned32, Gauge32, MibScalar, MibTable, MibTableRow, MibTableColumn, NotificationType = mibBuilder.importSymbols("SNMPv2-SMI", "MibIdentifier", "Bits", "iso", "IpAddress", "Integer32", "Counter32", "ModuleIdentity", "Counter64", "ObjectIdentity", "TimeTicks", "Unsigned32", "Gauge32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "NotificationType")
TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString")
hpicfMadMIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 95))
hpicfMadMIB.setRevisions(('2012-12-12 00:00',))
if mibBuilder.loadTexts: hpicfMadMIB.setLastUpdated('201212120000Z')
if mibBuilder.loadTexts: hpicfMadMIB.setOrganization(' HP Networking')
hpicfMadNotifications = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 95, 0))
hpicfMadObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 95, 1))
hpicfMadConformance = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 95, 2))
hpicfMadLacpAggObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 95, 1, 1))
hpicfMadLacpAggTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 95, 1, 1, 1), )
if mibBuilder.loadTexts: hpicfMadLacpAggTable.setStatus('current')
hpicfMadLacpAggEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 95, 1, 1, 1, 1), ).setIndexNames((0, "HP-ICF-MAD-MIB", "hpicfMadLacpAggTrunkId"))
if mibBuilder.loadTexts: hpicfMadLacpAggEntry.setStatus('current')
hpicfMadLacpAggTrunkId = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 95, 1, 1, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535)))
if mibBuilder.loadTexts: hpicfMadLacpAggTrunkId.setStatus('current')
hpicfMadPassthroughLacpAggAdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 95, 1, 1, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpicfMadPassthroughLacpAggAdminStatus.setStatus('current')
hpicfMadLacpAggPortStatsTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 95, 1, 1, 2), )
if mibBuilder.loadTexts: hpicfMadLacpAggPortStatsTable.setStatus('current')
hpicfMadLacpAggPortStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 95, 1, 1, 2, 1), ).setIndexNames((0, "HP-ICF-MAD-MIB", "hpicfMadLacpAggPortIndex"))
if mibBuilder.loadTexts: hpicfMadLacpAggPortStatsEntry.setStatus('current')
hpicfMadLacpAggPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 95, 1, 1, 2, 1, 1), InterfaceIndex())
if mibBuilder.loadTexts: hpicfMadLacpAggPortIndex.setStatus('current')
hpicfMadPassthroughLacpAggPDUsRx = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 95, 1, 1, 2, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpicfMadPassthroughLacpAggPDUsRx.setStatus('current')
hpicfMadPassthroughLacpAggPDUsTx = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 95, 1, 1, 2, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpicfMadPassthroughLacpAggPDUsTx.setStatus('current')
hpicfMadPassthroughLacpAggPDUsDropped = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 95, 1, 1, 2, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpicfMadPassthroughLacpAggPDUsDropped.setStatus('current')
hpicfMadLacpAggGoups = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 95, 2, 1))
hpicfMadLacpAggCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 95, 2, 2))
hpicfMadLacpAggCompliance1 = ModuleCompliance((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 95, 2, 2, 1)).setObjects(("HP-ICF-MAD-MIB", "hpicfMadLacpAggConfigGroup"), ("HP-ICF-MAD-MIB", "hpicfMadLacpAggStatisticsGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hpicfMadLacpAggCompliance1 = hpicfMadLacpAggCompliance1.setStatus('current')
hpicfMadLacpAggConfigGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 95, 2, 1, 1)).setObjects(("HP-ICF-MAD-MIB", "hpicfMadPassthroughLacpAggAdminStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hpicfMadLacpAggConfigGroup = hpicfMadLacpAggConfigGroup.setStatus('current')
hpicfMadLacpAggStatisticsGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 95, 2, 1, 2)).setObjects(("HP-ICF-MAD-MIB", "hpicfMadPassthroughLacpAggPDUsRx"), ("HP-ICF-MAD-MIB", "hpicfMadPassthroughLacpAggPDUsTx"), ("HP-ICF-MAD-MIB", "hpicfMadPassthroughLacpAggPDUsDropped"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hpicfMadLacpAggStatisticsGroup = hpicfMadLacpAggStatisticsGroup.setStatus('current')
mibBuilder.exportSymbols("HP-ICF-MAD-MIB", hpicfMadLacpAggTable=hpicfMadLacpAggTable, hpicfMadLacpAggObjects=hpicfMadLacpAggObjects, hpicfMadPassthroughLacpAggPDUsTx=hpicfMadPassthroughLacpAggPDUsTx, PYSNMP_MODULE_ID=hpicfMadMIB, hpicfMadConformance=hpicfMadConformance, hpicfMadLacpAggEntry=hpicfMadLacpAggEntry, hpicfMadLacpAggCompliance1=hpicfMadLacpAggCompliance1, hpicfMadPassthroughLacpAggPDUsDropped=hpicfMadPassthroughLacpAggPDUsDropped, hpicfMadLacpAggGoups=hpicfMadLacpAggGoups, hpicfMadLacpAggPortIndex=hpicfMadLacpAggPortIndex, hpicfMadLacpAggCompliances=hpicfMadLacpAggCompliances, hpicfMadLacpAggStatisticsGroup=hpicfMadLacpAggStatisticsGroup, hpicfMadObjects=hpicfMadObjects, hpicfMadLacpAggConfigGroup=hpicfMadLacpAggConfigGroup, hpicfMadLacpAggTrunkId=hpicfMadLacpAggTrunkId, hpicfMadMIB=hpicfMadMIB, hpicfMadPassthroughLacpAggPDUsRx=hpicfMadPassthroughLacpAggPDUsRx, hpicfMadPassthroughLacpAggAdminStatus=hpicfMadPassthroughLacpAggAdminStatus, hpicfMadLacpAggPortStatsTable=hpicfMadLacpAggPortStatsTable, hpicfMadLacpAggPortStatsEntry=hpicfMadLacpAggPortStatsEntry, hpicfMadNotifications=hpicfMadNotifications)
