#
# PySNMP MIB module LANTRONIX-SLC-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/LANTRONIX-SLC-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 19:55:17 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, ObjectIdentifier, Integer = mibBuilder.importSymbols("ASN1", "OctetString", "ObjectIdentifier", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsIntersection, ValueRangeConstraint, SingleValueConstraint, ValueSizeConstraint, ConstraintsUnion = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsIntersection", "ValueRangeConstraint", "SingleValueConstraint", "ValueSizeConstraint", "ConstraintsUnion")
Ipv6Address, = mibBuilder.importSymbols("IPV6-TC", "Ipv6Address")
products, = mibBuilder.importSymbols("LANTRONIX-MIB", "products")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
Bits, ObjectIdentity, Unsigned32, iso, IpAddress, MibIdentifier, Counter32, NotificationType, Integer32, TimeTicks, Counter64, ModuleIdentity, MibScalar, MibTable, MibTableRow, MibTableColumn, Gauge32 = mibBuilder.importSymbols("SNMPv2-SMI", "Bits", "ObjectIdentity", "Unsigned32", "iso", "IpAddress", "MibIdentifier", "Counter32", "NotificationType", "Integer32", "TimeTicks", "Counter64", "ModuleIdentity", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Gauge32")
MacAddress, DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "MacAddress", "DisplayString", "TextualConvention")
slc = ModuleIdentity((1, 3, 6, 1, 4, 1, 244, 1, 1))
slc.setRevisions(('2016-04-17 00:00', '2015-02-24 00:00', '2014-07-10 00:00', '2013-12-06 00:00', '2013-02-20 00:00', '2010-04-07 00:00', '2010-01-19 00:00', '2009-12-09 00:00', '2008-01-09 00:00', '2007-06-25 00:00', '2007-02-20 00:00', '2007-02-07 00:00', '2006-10-20 00:00', '2006-07-14 00:00', '2006-05-12 00:00', '2006-02-13 00:00', '2005-10-03 00:00', '2005-06-09 00:00', '2004-12-13 00:00',))
if mibBuilder.loadTexts: slc.setLastUpdated('201604170000Z')
if mibBuilder.loadTexts: slc.setOrganization('Lantronix, Inc.')
class EnabledState(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2))
    namedValues = NamedValues(("disabled", 1), ("enabled", 2))

class AuthOrder(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ValueRangeConstraint(0, 6)

class SyslogLevel(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))
    namedValues = NamedValues(("off", 1), ("info", 2), ("warning", 3), ("error", 4), ("debug", 5))

class UserGroup(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))
    namedValues = NamedValues(("default", 1), ("power", 2), ("administrators", 3), ("custom", 4))

class UserRights(TextualConvention, OctetString):
    status = 'current'
    subtypeSpec = OctetString.subtypeSpec + ValueSizeConstraint(0, 255)

class TimeoutDataDirection(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3))
    namedValues = NamedValues(("incomingNetwork", 1), ("outgoingNetwork", 2), ("bothDirections", 3))

class RPMTowerIndex(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ValueRangeConstraint(1, 2)

class RPMOutletIndex(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ValueRangeConstraint(1, 60)

slcNetwork = MibIdentifier((1, 3, 6, 1, 4, 1, 244, 1, 1, 1))
slcServices = MibIdentifier((1, 3, 6, 1, 4, 1, 244, 1, 1, 2))
slcAuth = MibIdentifier((1, 3, 6, 1, 4, 1, 244, 1, 1, 3))
slcDevices = MibIdentifier((1, 3, 6, 1, 4, 1, 244, 1, 1, 4))
slcConnections = MibIdentifier((1, 3, 6, 1, 4, 1, 244, 1, 1, 5))
slcSystem = MibIdentifier((1, 3, 6, 1, 4, 1, 244, 1, 1, 6))
slcNetEth = MibIdentifier((1, 3, 6, 1, 4, 1, 244, 1, 1, 1, 1))
slcNetEthIfNumber = MibScalar((1, 3, 6, 1, 4, 1, 244, 1, 1, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slcNetEthIfNumber.setStatus('current')
slcNetEthIfTable = MibTable((1, 3, 6, 1, 4, 1, 244, 1, 1, 1, 1, 2), )
if mibBuilder.loadTexts: slcNetEthIfTable.setStatus('current')
slcNetEthIfEntry = MibTableRow((1, 3, 6, 1, 4, 1, 244, 1, 1, 1, 1, 2, 1), ).setIndexNames((0, "LANTRONIX-SLC-MIB", "slcNetEthIfIndex"))
if mibBuilder.loadTexts: slcNetEthIfEntry.setStatus('current')
slcNetEthIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 244, 1, 1, 1, 1, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slcNetEthIfIndex.setStatus('current')
slcNetEthIfSource = MibTableColumn((1, 3, 6, 1, 4, 1, 244, 1, 1, 1, 1, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("disabled", 1), ("dhcp", 2), ("bootp", 3), ("static", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slcNetEthIfSource.setStatus('current')
slcNetEthIfMode = MibTableColumn((1, 3, 6, 1, 4, 1, 244, 1, 1, 1, 1, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("autoNegotiate", 1), ("halfDuplex10mbit", 2), ("fullDuplex10mbit", 3), ("halfDuplex100mbit", 4), ("fullDuplex100mbit", 5), ("halfDuplex1000mbit", 6), ("fullDuplex1000mbit", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slcNetEthIfMode.setStatus('current')
slcNetEthIfIPv6Addr = MibTableColumn((1, 3, 6, 1, 4, 1, 244, 1, 1, 1, 1, 2, 1, 4), Ipv6Address()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slcNetEthIfIPv6Addr.setStatus('current')
slcNetEthIfIPv6PrefixLength = MibTableColumn((1, 3, 6, 1, 4, 1, 244, 1, 1, 1, 1, 2, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 128)))
if mibBuilder.loadTexts: slcNetEthIfIPv6PrefixLength.setStatus('current')
slcNetEthIfMTU = MibTableColumn((1, 3, 6, 1, 4, 1, 244, 1, 1, 1, 1, 2, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slcNetEthIfMTU.setStatus('current')
slcNetEthIfMacAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 244, 1, 1, 1, 1, 2, 1, 7), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slcNetEthIfMacAddress.setStatus('current')
slcNetEthGateway = MibScalar((1, 3, 6, 1, 4, 1, 244, 1, 1, 1, 1, 3), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slcNetEthGateway.setStatus('current')
slcNetEthGatewayPrecedence = MibScalar((1, 3, 6, 1, 4, 1, 244, 1, 1, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("dhcp", 1), ("default", 2), ("gprs", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slcNetEthGatewayPrecedence.setStatus('current')
slcNetEthKeepaliveStartProbes = MibScalar((1, 3, 6, 1, 4, 1, 244, 1, 1, 1, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 99999))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slcNetEthKeepaliveStartProbes.setStatus('current')
slcNetEthKeepaliveNumberOfProbes = MibScalar((1, 3, 6, 1, 4, 1, 244, 1, 1, 1, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 20))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slcNetEthKeepaliveNumberOfProbes.setStatus('current')
slcNetEthKeepaliveInterval = MibScalar((1, 3, 6, 1, 4, 1, 244, 1, 1, 1, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 9999))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slcNetEthKeepaliveInterval.setStatus('current')
slcNetEthIPForwarding = MibScalar((1, 3, 6, 1, 4, 1, 244, 1, 1, 1, 1, 8), EnabledState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slcNetEthIPForwarding.setStatus('current')
slcNetEthDNS1 = MibScalar((1, 3, 6, 1, 4, 1, 244, 1, 1, 1, 1, 9), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slcNetEthDNS1.setStatus('current')
slcNetEthDNS2 = MibScalar((1, 3, 6, 1, 4, 1, 244, 1, 1, 1, 1, 10), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slcNetEthDNS2.setStatus('current')
slcNetEthDNS3 = MibScalar((1, 3, 6, 1, 4, 1, 244, 1, 1, 1, 1, 11), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slcNetEthDNS3.setStatus('current')
slcNetEthDomain = MibScalar((1, 3, 6, 1, 4, 1, 244, 1, 1, 1, 1, 12), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slcNetEthDomain.setStatus('current')
slcNetEthAlternateGateway = MibScalar((1, 3, 6, 1, 4, 1, 244, 1, 1, 1, 1, 13), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slcNetEthAlternateGateway.setStatus('current')
slcNetEthPingIPAddress = MibScalar((1, 3, 6, 1, 4, 1, 244, 1, 1, 1, 1, 14), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slcNetEthPingIPAddress.setStatus('current')
slcNetEthPingInterface = MibScalar((1, 3, 6, 1, 4, 1, 244, 1, 1, 1, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("ethernet1", 1), ("ethernet2", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slcNetEthPingInterface.setStatus('current')
slcNetEthPingDelay = MibScalar((1, 3, 6, 1, 4, 1, 244, 1, 1, 1, 1, 16), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 250))).setUnits('seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: slcNetEthPingDelay.setStatus('current')
slcNetEthPingFailed = MibScalar((1, 3, 6, 1, 4, 1, 244, 1, 1, 1, 1, 17), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 250))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slcNetEthPingFailed.setStatus('current')
slcNetEthBonding = MibScalar((1, 3, 6, 1, 4, 1, 244, 1, 1, 1, 1, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("disabled", 1), ("activeBackup", 2), ("aggregation", 3), ("adaptiveLoadBalancing", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slcNetEthBonding.setStatus('current')
slcNetEthIPv6 = MibScalar((1, 3, 6, 1, 4, 1, 244, 1, 1, 1, 1, 19), EnabledState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slcNetEthIPv6.setStatus('current')
slcNetEthGatewayIPv6 = MibScalar((1, 3, 6, 1, 4, 1, 244, 1, 1, 1, 1, 20), Ipv6Address()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slcNetEthGatewayIPv6.setStatus('current')
slcNetEthDNS1IPv6 = MibScalar((1, 3, 6, 1, 4, 1, 244, 1, 1, 1, 1, 21), Ipv6Address()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slcNetEthDNS1IPv6.setStatus('current')
slcNetEthDNS2IPv6 = MibScalar((1, 3, 6, 1, 4, 1, 244, 1, 1, 1, 1, 22), Ipv6Address()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slcNetEthDNS2IPv6.setStatus('current')
slcNetEthDNS3IPv6 = MibScalar((1, 3, 6, 1, 4, 1, 244, 1, 1, 1, 1, 23), Ipv6Address()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slcNetEthDNS3IPv6.setStatus('current')
slcNetEthPreferIPv4DNS = MibScalar((1, 3, 6, 1, 4, 1, 244, 1, 1, 1, 1, 24), EnabledState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slcNetEthPreferIPv4DNS.setStatus('current')
slcNetFirewall = MibIdentifier((1, 3, 6, 1, 4, 1, 244, 1, 1, 1, 2))
slcNetFirewallState = MibScalar((1, 3, 6, 1, 4, 1, 244, 1, 1, 1, 2, 1), EnabledState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slcNetFirewallState.setStatus('current')
slcNetFirewallReject = MibScalar((1, 3, 6, 1, 4, 1, 244, 1, 1, 1, 2, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("return", 1), ("ignore", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slcNetFirewallReject.setStatus('obsolete')
slcNetFirewallPing = MibScalar((1, 3, 6, 1, 4, 1, 244, 1, 1, 1, 2, 3), EnabledState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slcNetFirewallPing.setStatus('obsolete')
slcNetFirewallSSH = MibScalar((1, 3, 6, 1, 4, 1, 244, 1, 1, 1, 2, 4), EnabledState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slcNetFirewallSSH.setStatus('obsolete')
slcNetFirewallTelnet = MibScalar((1, 3, 6, 1, 4, 1, 244, 1, 1, 1, 2, 5), EnabledState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slcNetFirewallTelnet.setStatus('obsolete')
slcNetFirewallHTTP = MibScalar((1, 3, 6, 1, 4, 1, 244, 1, 1, 1, 2, 6), EnabledState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slcNetFirewallHTTP.setStatus('obsolete')
slcNetFirewallHTTPS = MibScalar((1, 3, 6, 1, 4, 1, 244, 1, 1, 1, 2, 7), EnabledState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slcNetFirewallHTTPS.setStatus('obsolete')
slcNetFirewallSMBCIFS = MibScalar((1, 3, 6, 1, 4, 1, 244, 1, 1, 1, 2, 8), EnabledState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slcNetFirewallSMBCIFS.setStatus('obsolete')
slcNetFirewallRulesetNumber = MibScalar((1, 3, 6, 1, 4, 1, 244, 1, 1, 1, 2, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slcNetFirewallRulesetNumber.setStatus('current')
slcNetFirewallRulesetTable = MibTable((1, 3, 6, 1, 4, 1, 244, 1, 1, 1, 2, 10), )
if mibBuilder.loadTexts: slcNetFirewallRulesetTable.setStatus('current')
slcNetFirewallRulesetEntry = MibTableRow((1, 3, 6, 1, 4, 1, 244, 1, 1, 1, 2, 10, 1), ).setIndexNames((0, "LANTRONIX-SLC-MIB", "slcNetFirewallRulesetIndex"))
if mibBuilder.loadTexts: slcNetFirewallRulesetEntry.setStatus('current')
slcNetFirewallRulesetIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 244, 1, 1, 1, 2, 10, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slcNetFirewallRulesetIndex.setStatus('current')
slcNetFirewallRulesetName = MibTableColumn((1, 3, 6, 1, 4, 1, 244, 1, 1, 1, 2, 10, 1, 2), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slcNetFirewallRulesetName.setStatus('current')
slcNetFirewallRulesetNumRules = MibTableColumn((1, 3, 6, 1, 4, 1, 244, 1, 1, 1, 2, 10, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slcNetFirewallRulesetNumRules.setStatus('current')
slcNetFirewallRulesetRules = MibTableColumn((1, 3, 6, 1, 4, 1, 244, 1, 1, 1, 2, 10, 1, 4), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slcNetFirewallRulesetRules.setStatus('current')
slcNetFirewallMappingNumber = MibScalar((1, 3, 6, 1, 4, 1, 244, 1, 1, 1, 2, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slcNetFirewallMappingNumber.setStatus('current')
slcNetFirewallMappingTable = MibTable((1, 3, 6, 1, 4, 1, 244, 1, 1, 1, 2, 12), )
if mibBuilder.loadTexts: slcNetFirewallMappingTable.setStatus('current')
slcNetFirewallMappingEntry = MibTableRow((1, 3, 6, 1, 4, 1, 244, 1, 1, 1, 2, 12, 1), ).setIndexNames((0, "LANTRONIX-SLC-MIB", "slcNetFirewallMappingIndex"))
if mibBuilder.loadTexts: slcNetFirewallMappingEntry.setStatus('current')
slcNetFirewallMappingIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 244, 1, 1, 1, 2, 12, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slcNetFirewallMappingIndex.setStatus('current')
slcNetFirewallMappingIfac = MibTableColumn((1, 3, 6, 1, 4, 1, 244, 1, 1, 1, 2, 12, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("ethernet1", 1), ("ethernet2", 2), ("upperPCCard", 3), ("lowerPCCard", 4), ("devicePort", 5), ("usbPort", 6), ("internalModem", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slcNetFirewallMappingIfac.setStatus('current')
slcNetFirewallMappingIfacId = MibTableColumn((1, 3, 6, 1, 4, 1, 244, 1, 1, 1, 2, 12, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 48))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slcNetFirewallMappingIfacId.setStatus('current')
slcNetFirewallMappingRuleset = MibTableColumn((1, 3, 6, 1, 4, 1, 244, 1, 1, 1, 2, 12, 1, 4), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slcNetFirewallMappingRuleset.setStatus('current')
slcNetRouting = MibIdentifier((1, 3, 6, 1, 4, 1, 244, 1, 1, 1, 3))
slcNetRouteRIPState = MibScalar((1, 3, 6, 1, 4, 1, 244, 1, 1, 1, 3, 1), EnabledState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slcNetRouteRIPState.setStatus('current')
slcNetRouteRIPVersion = MibScalar((1, 3, 6, 1, 4, 1, 244, 1, 1, 1, 3, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("one", 1), ("two", 2), ("oneAndTwo", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slcNetRouteRIPVersion.setStatus('current')
slcNetRouteStaticState = MibScalar((1, 3, 6, 1, 4, 1, 244, 1, 1, 1, 3, 3), EnabledState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slcNetRouteStaticState.setStatus('current')
slcNetRouteStaticNumber = MibScalar((1, 3, 6, 1, 4, 1, 244, 1, 1, 1, 3, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slcNetRouteStaticNumber.setStatus('current')
slcNetRouteStaticTable = MibTable((1, 3, 6, 1, 4, 1, 244, 1, 1, 1, 3, 5), )
if mibBuilder.loadTexts: slcNetRouteStaticTable.setStatus('current')
slcNetRouteStaticEntry = MibTableRow((1, 3, 6, 1, 4, 1, 244, 1, 1, 1, 3, 5, 1), ).setIndexNames((0, "LANTRONIX-SLC-MIB", "slcNetRouteStaticIndex"))
if mibBuilder.loadTexts: slcNetRouteStaticEntry.setStatus('current')
slcNetRouteStaticIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 244, 1, 1, 1, 3, 5, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slcNetRouteStaticIndex.setStatus('current')
slcNetRouteStaticIP = MibTableColumn((1, 3, 6, 1, 4, 1, 244, 1, 1, 1, 3, 5, 1, 2), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slcNetRouteStaticIP.setStatus('current')
slcNetRouteStaticMask = MibTableColumn((1, 3, 6, 1, 4, 1, 244, 1, 1, 1, 3, 5, 1, 3), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slcNetRouteStaticMask.setStatus('current')
slcNetRouteStaticGateway = MibTableColumn((1, 3, 6, 1, 4, 1, 244, 1, 1, 1, 3, 5, 1, 4), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slcNetRouteStaticGateway.setStatus('current')
slcNetVPN = MibIdentifier((1, 3, 6, 1, 4, 1, 244, 1, 1, 1, 4))
slcNetVPNTunnel = MibScalar((1, 3, 6, 1, 4, 1, 244, 1, 1, 1, 4, 1), EnabledState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slcNetVPNTunnel.setStatus('current')
slcNetVPNStatus = MibScalar((1, 3, 6, 1, 4, 1, 244, 1, 1, 1, 4, 2), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slcNetVPNStatus.setStatus('current')
slcNetVPNName = MibScalar((1, 3, 6, 1, 4, 1, 244, 1, 1, 1, 4, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slcNetVPNName.setStatus('current')
slcNetVPNEthPort = MibScalar((1, 3, 6, 1, 4, 1, 244, 1, 1, 1, 4, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("ethernet1", 1), ("ethernet2", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slcNetVPNEthPort.setStatus('current')
slcNetVPNRemoteHost = MibScalar((1, 3, 6, 1, 4, 1, 244, 1, 1, 1, 4, 5), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slcNetVPNRemoteHost.setStatus('current')
slcNetVPNRemoteId = MibScalar((1, 3, 6, 1, 4, 1, 244, 1, 1, 1, 4, 6), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slcNetVPNRemoteId.setStatus('current')
slcNetVPNRemoteHop = MibScalar((1, 3, 6, 1, 4, 1, 244, 1, 1, 1, 4, 7), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slcNetVPNRemoteHop.setStatus('current')
slcNetVPNRemoteSubnet = MibScalar((1, 3, 6, 1, 4, 1, 244, 1, 1, 1, 4, 8), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slcNetVPNRemoteSubnet.setStatus('current')
slcNetVPNLocalId = MibScalar((1, 3, 6, 1, 4, 1, 244, 1, 1, 1, 4, 9), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slcNetVPNLocalId.setStatus('current')
slcNetVPNLocalHop = MibScalar((1, 3, 6, 1, 4, 1, 244, 1, 1, 1, 4, 10), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slcNetVPNLocalHop.setStatus('current')
slcNetVPNLocalSubnet = MibScalar((1, 3, 6, 1, 4, 1, 244, 1, 1, 1, 4, 11), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slcNetVPNLocalSubnet.setStatus('current')
slcNetVPNIKENegotiation = MibScalar((1, 3, 6, 1, 4, 1, 244, 1, 1, 1, 4, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("main", 1), ("aggressive", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slcNetVPNIKENegotiation.setStatus('current')
slcNetVPNIKEEncryption = MibScalar((1, 3, 6, 1, 4, 1, 244, 1, 1, 1, 4, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("any", 1), ("tripledes", 2), ("aes", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slcNetVPNIKEEncryption.setStatus('current')
slcNetVPNIKEAuthentication = MibScalar((1, 3, 6, 1, 4, 1, 244, 1, 1, 1, 4, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("any", 1), ("sha1", 2), ("md5", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slcNetVPNIKEAuthentication.setStatus('current')
slcNetVPNIKEDHGroup = MibScalar((1, 3, 6, 1, 4, 1, 244, 1, 1, 1, 4, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("any", 1), ("dhg2", 2), ("dhg5", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slcNetVPNIKEDHGroup.setStatus('current')
slcNetVPNESPEncryption = MibScalar((1, 3, 6, 1, 4, 1, 244, 1, 1, 1, 4, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("any", 1), ("tripledes", 2), ("aes", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slcNetVPNESPEncryption.setStatus('current')
slcNetVPNESPAuthentication = MibScalar((1, 3, 6, 1, 4, 1, 244, 1, 1, 1, 4, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("any", 1), ("sha1", 2), ("md5", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slcNetVPNESPAuthentication.setStatus('current')
slcNetVPNESPDHGroup = MibScalar((1, 3, 6, 1, 4, 1, 244, 1, 1, 1, 4, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("any", 1), ("dhg2", 2), ("dhg5", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slcNetVPNESPDHGroup.setStatus('current')
slcNetVPNAuthentication = MibScalar((1, 3, 6, 1, 4, 1, 244, 1, 1, 1, 4, 19), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("rsaPublicKey", 1), ("preSharedKey", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slcNetVPNAuthentication.setStatus('current')
slcNetVPNPerfectForwardSecrecy = MibScalar((1, 3, 6, 1, 4, 1, 244, 1, 1, 1, 4, 20), EnabledState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slcNetVPNPerfectForwardSecrecy.setStatus('current')
slcNetVPNModeConfigClient = MibScalar((1, 3, 6, 1, 4, 1, 244, 1, 1, 1, 4, 21), EnabledState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slcNetVPNModeConfigClient.setStatus('current')
slcNetVPNXAUTHClient = MibScalar((1, 3, 6, 1, 4, 1, 244, 1, 1, 1, 4, 22), EnabledState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slcNetVPNXAUTHClient.setStatus('current')
slcNetVPNXAUTHClientLogin = MibScalar((1, 3, 6, 1, 4, 1, 244, 1, 1, 1, 4, 23), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slcNetVPNXAUTHClientLogin.setStatus('current')
slcNetSecurity = MibIdentifier((1, 3, 6, 1, 4, 1, 244, 1, 1, 1, 5))
slcNetSecurityFIPSMode = MibScalar((1, 3, 6, 1, 4, 1, 244, 1, 1, 1, 5, 1), EnabledState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slcNetSecurityFIPSMode.setStatus('current')
slcServNTP = MibIdentifier((1, 3, 6, 1, 4, 1, 244, 1, 1, 2, 1))
slcServNTPState = MibScalar((1, 3, 6, 1, 4, 1, 244, 1, 1, 2, 1, 1), EnabledState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slcServNTPState.setStatus('current')
slcServNTPSynchronize = MibScalar((1, 3, 6, 1, 4, 1, 244, 1, 1, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("broadcast", 1), ("poll", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slcServNTPSynchronize.setStatus('current')
slcServNTPPoll = MibScalar((1, 3, 6, 1, 4, 1, 244, 1, 1, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("local", 1), ("public", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slcServNTPPoll.setStatus('current')
slcServNTPServer = MibScalar((1, 3, 6, 1, 4, 1, 244, 1, 1, 2, 1, 4), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slcServNTPServer.setStatus('current')
slcServNTPLocalServer2 = MibScalar((1, 3, 6, 1, 4, 1, 244, 1, 1, 2, 1, 5), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slcServNTPLocalServer2.setStatus('current')
slcServNTPLocalServer3 = MibScalar((1, 3, 6, 1, 4, 1, 244, 1, 1, 2, 1, 6), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slcServNTPLocalServer3.setStatus('current')
slcServNTPServerIPv6 = MibScalar((1, 3, 6, 1, 4, 1, 244, 1, 1, 2, 1, 7), Ipv6Address()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slcServNTPServerIPv6.setStatus('current')
slcServNTPLocalServer2IPv6 = MibScalar((1, 3, 6, 1, 4, 1, 244, 1, 1, 2, 1, 8), Ipv6Address()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slcServNTPLocalServer2IPv6.setStatus('current')
slcServNTPLocalServer3IPv6 = MibScalar((1, 3, 6, 1, 4, 1, 244, 1, 1, 2, 1, 9), Ipv6Address()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slcServNTPLocalServer3IPv6.setStatus('current')
slcServSyslog = MibIdentifier((1, 3, 6, 1, 4, 1, 244, 1, 1, 2, 2))
slcServSysNetworkLevel = MibScalar((1, 3, 6, 1, 4, 1, 244, 1, 1, 2, 2, 1), SyslogLevel()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slcServSysNetworkLevel.setStatus('current')
slcServSysServicesLevel = MibScalar((1, 3, 6, 1, 4, 1, 244, 1, 1, 2, 2, 2), SyslogLevel()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slcServSysServicesLevel.setStatus('current')
slcServSysAuthLevel = MibScalar((1, 3, 6, 1, 4, 1, 244, 1, 1, 2, 2, 3), SyslogLevel()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slcServSysAuthLevel.setStatus('current')
slcServSysDevPortLevel = MibScalar((1, 3, 6, 1, 4, 1, 244, 1, 1, 2, 2, 4), SyslogLevel()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slcServSysDevPortLevel.setStatus('current')
slcServSysDiagLevel = MibScalar((1, 3, 6, 1, 4, 1, 244, 1, 1, 2, 2, 5), SyslogLevel()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slcServSysDiagLevel.setStatus('current')
slcServSysGeneralLevel = MibScalar((1, 3, 6, 1, 4, 1, 244, 1, 1, 2, 2, 6), SyslogLevel()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slcServSysGeneralLevel.setStatus('current')
slcServSysRemoteServer = MibScalar((1, 3, 6, 1, 4, 1, 244, 1, 1, 2, 2, 7), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slcServSysRemoteServer.setStatus('current')
slcServSysRemoteServer2 = MibScalar((1, 3, 6, 1, 4, 1, 244, 1, 1, 2, 2, 8), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slcServSysRemoteServer2.setStatus('current')
slcServSysRemoteServerIPv6 = MibScalar((1, 3, 6, 1, 4, 1, 244, 1, 1, 2, 2, 9), Ipv6Address()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slcServSysRemoteServerIPv6.setStatus('current')
slcServSysRemoteServer2IPv6 = MibScalar((1, 3, 6, 1, 4, 1, 244, 1, 1, 2, 2, 10), Ipv6Address()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slcServSysRemoteServer2IPv6.setStatus('current')
slcServSysRPMLogSize = MibScalar((1, 3, 6, 1, 4, 1, 244, 1, 1, 2, 2, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(5, 40))).setUnits('Kilobytes').setMaxAccess("readonly")
if mibBuilder.loadTexts: slcServSysRPMLogSize.setStatus('current')
slcServSysOtherLogSize = MibScalar((1, 3, 6, 1, 4, 1, 244, 1, 1, 2, 2, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(5, 40))).setUnits('Kilobytes').setMaxAccess("readonly")
if mibBuilder.loadTexts: slcServSysOtherLogSize.setStatus('current')
slcServAuditLog = MibIdentifier((1, 3, 6, 1, 4, 1, 244, 1, 1, 2, 3))
slcServAuditState = MibScalar((1, 3, 6, 1, 4, 1, 244, 1, 1, 2, 3, 1), EnabledState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slcServAuditState.setStatus('current')
slcServAuditSize = MibScalar((1, 3, 6, 1, 4, 1, 244, 1, 1, 2, 3, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(5, 500))).setUnits('Kilobytes').setMaxAccess("readonly")
if mibBuilder.loadTexts: slcServAuditSize.setStatus('current')
slcServAuditIncludeCLI = MibScalar((1, 3, 6, 1, 4, 1, 244, 1, 1, 2, 3, 3), EnabledState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slcServAuditIncludeCLI.setStatus('current')
slcServAuditInSystemLog = MibScalar((1, 3, 6, 1, 4, 1, 244, 1, 1, 2, 3, 4), EnabledState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slcServAuditInSystemLog.setStatus('current')
slcServSSH = MibIdentifier((1, 3, 6, 1, 4, 1, 244, 1, 1, 2, 4))
slcServSSHState = MibScalar((1, 3, 6, 1, 4, 1, 244, 1, 1, 2, 4, 1), EnabledState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slcServSSHState.setStatus('current')
slcServSSHTimeout = MibScalar((1, 3, 6, 1, 4, 1, 244, 1, 1, 2, 4, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 30))).setUnits('minutes').setMaxAccess("readonly")
if mibBuilder.loadTexts: slcServSSHTimeout.setStatus('current')
slcServSSHWebSSH = MibScalar((1, 3, 6, 1, 4, 1, 244, 1, 1, 2, 4, 3), EnabledState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slcServSSHWebSSH.setStatus('current')
slcServSSHPort = MibScalar((1, 3, 6, 1, 4, 1, 244, 1, 1, 2, 4, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slcServSSHPort.setStatus('current')
slcServSSHV1Incoming = MibScalar((1, 3, 6, 1, 4, 1, 244, 1, 1, 2, 4, 5), EnabledState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slcServSSHV1Incoming.setStatus('current')
slcServSSHTimeoutDataDirection = MibScalar((1, 3, 6, 1, 4, 1, 244, 1, 1, 2, 4, 6), TimeoutDataDirection()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slcServSSHTimeoutDataDirection.setStatus('current')
slcServSSHDSAKeys = MibScalar((1, 3, 6, 1, 4, 1, 244, 1, 1, 2, 4, 7), EnabledState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slcServSSHDSAKeys.setStatus('current')
slcServTelnet = MibIdentifier((1, 3, 6, 1, 4, 1, 244, 1, 1, 2, 5))
slcServTelnetState = MibScalar((1, 3, 6, 1, 4, 1, 244, 1, 1, 2, 5, 1), EnabledState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slcServTelnetState.setStatus('current')
slcServTelnetTimeout = MibScalar((1, 3, 6, 1, 4, 1, 244, 1, 1, 2, 5, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 30))).setUnits('minutes').setMaxAccess("readonly")
if mibBuilder.loadTexts: slcServTelnetTimeout.setStatus('current')
slcServTelnetWebTelnet = MibScalar((1, 3, 6, 1, 4, 1, 244, 1, 1, 2, 5, 3), EnabledState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slcServTelnetWebTelnet.setStatus('current')
slcServTelnetTelnetOut = MibScalar((1, 3, 6, 1, 4, 1, 244, 1, 1, 2, 5, 4), EnabledState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slcServTelnetTelnetOut.setStatus('current')
slcServTelnetTimeoutDataDirection = MibScalar((1, 3, 6, 1, 4, 1, 244, 1, 1, 2, 5, 5), TimeoutDataDirection()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slcServTelnetTimeoutDataDirection.setStatus('current')
slcServSNMP = MibIdentifier((1, 3, 6, 1, 4, 1, 244, 1, 1, 2, 6))
slcServSNMPState = MibScalar((1, 3, 6, 1, 4, 1, 244, 1, 1, 2, 6, 1), EnabledState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slcServSNMPState.setStatus('current')
slcServSNMPTraps = MibScalar((1, 3, 6, 1, 4, 1, 244, 1, 1, 2, 6, 2), EnabledState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slcServSNMPTraps.setStatus('current')
slcServSNMPNMS = MibScalar((1, 3, 6, 1, 4, 1, 244, 1, 1, 2, 6, 3), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slcServSNMPNMS.setStatus('current')
slcServSNMPLocation = MibScalar((1, 3, 6, 1, 4, 1, 244, 1, 1, 2, 6, 4), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slcServSNMPLocation.setStatus('current')
slcServSNMPContact = MibScalar((1, 3, 6, 1, 4, 1, 244, 1, 1, 2, 6, 5), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slcServSNMPContact.setStatus('current')
slcServSNMPv3User = MibScalar((1, 3, 6, 1, 4, 1, 244, 1, 1, 2, 6, 6), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slcServSNMPv3User.setStatus('current')
slcServSNMPReadOnlyCommunity = MibScalar((1, 3, 6, 1, 4, 1, 244, 1, 1, 2, 6, 7), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slcServSNMPReadOnlyCommunity.setStatus('current')
slcServSNMPReadWriteCommunity = MibScalar((1, 3, 6, 1, 4, 1, 244, 1, 1, 2, 6, 8), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slcServSNMPReadWriteCommunity.setStatus('current')
slcServSNMPTrapCommunity = MibScalar((1, 3, 6, 1, 4, 1, 244, 1, 1, 2, 6, 9), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slcServSNMPTrapCommunity.setStatus('current')
slcServSNMPAlarmDelay = MibScalar((1, 3, 6, 1, 4, 1, 244, 1, 1, 2, 6, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slcServSNMPAlarmDelay.setStatus('current')
slcServSNMPv3ReadWriteUser = MibScalar((1, 3, 6, 1, 4, 1, 244, 1, 1, 2, 6, 11), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slcServSNMPv3ReadWriteUser.setStatus('current')
slcServSNMPv3Security = MibScalar((1, 3, 6, 1, 4, 1, 244, 1, 1, 2, 6, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("noAuthNoEncrypt", 1), ("authNoEncrypt", 2), ("authEncrypt", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slcServSNMPv3Security.setStatus('current')
slcServSNMPv3Authentication = MibScalar((1, 3, 6, 1, 4, 1, 244, 1, 1, 2, 6, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("md5", 1), ("sha", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slcServSNMPv3Authentication.setStatus('current')
slcServSNMPv3Encryption = MibScalar((1, 3, 6, 1, 4, 1, 244, 1, 1, 2, 6, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("des", 1), ("aes", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slcServSNMPv3Encryption.setStatus('current')
slcServSNMPv1v2 = MibScalar((1, 3, 6, 1, 4, 1, 244, 1, 1, 2, 6, 15), EnabledState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slcServSNMPv1v2.setStatus('current')
slcServSNMPNMS2 = MibScalar((1, 3, 6, 1, 4, 1, 244, 1, 1, 2, 6, 16), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slcServSNMPNMS2.setStatus('current')
slcServSNMPNMSIPv6 = MibScalar((1, 3, 6, 1, 4, 1, 244, 1, 1, 2, 6, 17), Ipv6Address()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slcServSNMPNMSIPv6.setStatus('current')
slcServSNMPNMS2IPv6 = MibScalar((1, 3, 6, 1, 4, 1, 244, 1, 1, 2, 6, 18), Ipv6Address()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slcServSNMPNMS2IPv6.setStatus('current')
slcServSMTP = MibIdentifier((1, 3, 6, 1, 4, 1, 244, 1, 1, 2, 7))
slcServSMTPServer = MibScalar((1, 3, 6, 1, 4, 1, 244, 1, 1, 2, 7, 1), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slcServSMTPServer.setStatus('current')
slcServSMTPSender = MibScalar((1, 3, 6, 1, 4, 1, 244, 1, 1, 2, 7, 2), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slcServSMTPSender.setStatus('current')
slcServNFS = MibIdentifier((1, 3, 6, 1, 4, 1, 244, 1, 1, 2, 8))
slcServNFSMountTable = MibTable((1, 3, 6, 1, 4, 1, 244, 1, 1, 2, 8, 1), )
if mibBuilder.loadTexts: slcServNFSMountTable.setStatus('current')
slcServNFSMountEntry = MibTableRow((1, 3, 6, 1, 4, 1, 244, 1, 1, 2, 8, 1, 1), ).setIndexNames((0, "LANTRONIX-SLC-MIB", "slcServNFSMountIndex"))
if mibBuilder.loadTexts: slcServNFSMountEntry.setStatus('current')
slcServNFSMountIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 244, 1, 1, 2, 8, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 3))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slcServNFSMountIndex.setStatus('current')
slcServNFSMountRemoteDir = MibTableColumn((1, 3, 6, 1, 4, 1, 244, 1, 1, 2, 8, 1, 1, 2), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slcServNFSMountRemoteDir.setStatus('current')
slcServNFSMountLocalDir = MibTableColumn((1, 3, 6, 1, 4, 1, 244, 1, 1, 2, 8, 1, 1, 3), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slcServNFSMountLocalDir.setStatus('current')
slcServNFSMountReadWrite = MibTableColumn((1, 3, 6, 1, 4, 1, 244, 1, 1, 2, 8, 1, 1, 4), EnabledState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slcServNFSMountReadWrite.setStatus('current')
slcServNFSMountMount = MibTableColumn((1, 3, 6, 1, 4, 1, 244, 1, 1, 2, 8, 1, 1, 5), EnabledState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slcServNFSMountMount.setStatus('current')
slcServCIFS = MibIdentifier((1, 3, 6, 1, 4, 1, 244, 1, 1, 2, 9))
slcServCIFSState = MibScalar((1, 3, 6, 1, 4, 1, 244, 1, 1, 2, 9, 1), EnabledState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slcServCIFSState.setStatus('current')
slcServCIFSEth1 = MibScalar((1, 3, 6, 1, 4, 1, 244, 1, 1, 2, 9, 2), EnabledState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slcServCIFSEth1.setStatus('current')
slcServCIFSEth2 = MibScalar((1, 3, 6, 1, 4, 1, 244, 1, 1, 2, 9, 3), EnabledState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slcServCIFSEth2.setStatus('current')
slcServCIFSWorkgroup = MibScalar((1, 3, 6, 1, 4, 1, 244, 1, 1, 2, 9, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 15))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slcServCIFSWorkgroup.setStatus('current')
slcServSLCNetwork = MibIdentifier((1, 3, 6, 1, 4, 1, 244, 1, 1, 2, 10))
slcServSLCNetSearch = MibScalar((1, 3, 6, 1, 4, 1, 244, 1, 1, 2, 10, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("both", 1), ("subnet", 2), ("manual", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slcServSLCNetSearch.setStatus('current')
slcServSLCNetNumber = MibScalar((1, 3, 6, 1, 4, 1, 244, 1, 1, 2, 10, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 200))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slcServSLCNetNumber.setStatus('current')
slcServSLCNetTable = MibTable((1, 3, 6, 1, 4, 1, 244, 1, 1, 2, 10, 3), )
if mibBuilder.loadTexts: slcServSLCNetTable.setStatus('current')
slcServSLCNetEntry = MibTableRow((1, 3, 6, 1, 4, 1, 244, 1, 1, 2, 10, 3, 1), ).setIndexNames((0, "LANTRONIX-SLC-MIB", "slcServSLCNetIndex"))
if mibBuilder.loadTexts: slcServSLCNetEntry.setStatus('current')
slcServSLCNetIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 244, 1, 1, 2, 10, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 200))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slcServSLCNetIndex.setStatus('current')
slcServSLCNetIP = MibTableColumn((1, 3, 6, 1, 4, 1, 244, 1, 1, 2, 10, 3, 1, 2), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slcServSLCNetIP.setStatus('current')
slcServPhoneHome = MibIdentifier((1, 3, 6, 1, 4, 1, 244, 1, 1, 2, 11))
slcServPhoneHomeState = MibScalar((1, 3, 6, 1, 4, 1, 244, 1, 1, 2, 11, 1), EnabledState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slcServPhoneHomeState.setStatus('current')
slcServPhoneHomeIP = MibScalar((1, 3, 6, 1, 4, 1, 244, 1, 1, 2, 11, 2), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slcServPhoneHomeIP.setStatus('current')
slcServHostList = MibIdentifier((1, 3, 6, 1, 4, 1, 244, 1, 1, 2, 12))
slcServHostListNumber = MibScalar((1, 3, 6, 1, 4, 1, 244, 1, 1, 2, 12, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 50))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slcServHostListNumber.setStatus('current')
slcServHostListTable = MibTable((1, 3, 6, 1, 4, 1, 244, 1, 1, 2, 12, 2), )
if mibBuilder.loadTexts: slcServHostListTable.setStatus('current')
slcServHostListEntry = MibTableRow((1, 3, 6, 1, 4, 1, 244, 1, 1, 2, 12, 2, 1), ).setIndexNames((0, "LANTRONIX-SLC-MIB", "slcServHostListIndex"))
if mibBuilder.loadTexts: slcServHostListEntry.setStatus('current')
slcServHostListIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 244, 1, 1, 2, 12, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 50))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slcServHostListIndex.setStatus('current')
slcServHostListName = MibTableColumn((1, 3, 6, 1, 4, 1, 244, 1, 1, 2, 12, 2, 1, 2), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slcServHostListName.setStatus('current')
slcServHostListRetryCount = MibTableColumn((1, 3, 6, 1, 4, 1, 244, 1, 1, 2, 12, 2, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slcServHostListRetryCount.setStatus('current')
slcServHostListAuth = MibTableColumn((1, 3, 6, 1, 4, 1, 244, 1, 1, 2, 12, 2, 1, 4), EnabledState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slcServHostListAuth.setStatus('current')
slcServHostListNumHosts = MibTableColumn((1, 3, 6, 1, 4, 1, 244, 1, 1, 2, 12, 2, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 10))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slcServHostListNumHosts.setStatus('current')
slcServHostListHosts = MibTableColumn((1, 3, 6, 1, 4, 1, 244, 1, 1, 2, 12, 2, 1, 6), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slcServHostListHosts.setStatus('current')
slcServWebTerm = MibIdentifier((1, 3, 6, 1, 4, 1, 244, 1, 1, 2, 13))
slcServWebTermDeployment = MibScalar((1, 3, 6, 1, 4, 1, 244, 1, 1, 2, 13, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("javaWebStart", 1), ("applet", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slcServWebTermDeployment.setStatus('current')
slcServWebTermBufSize = MibScalar((1, 3, 6, 1, 4, 1, 244, 1, 1, 2, 13, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(24, 5000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slcServWebTermBufSize.setStatus('current')
slcServSite = MibIdentifier((1, 3, 6, 1, 4, 1, 244, 1, 1, 2, 14))
slcServSiteNumber = MibScalar((1, 3, 6, 1, 4, 1, 244, 1, 1, 2, 14, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 20))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slcServSiteNumber.setStatus('current')
slcServSiteTable = MibTable((1, 3, 6, 1, 4, 1, 244, 1, 1, 2, 14, 2), )
if mibBuilder.loadTexts: slcServSiteTable.setStatus('current')
slcServSiteEntry = MibTableRow((1, 3, 6, 1, 4, 1, 244, 1, 1, 2, 14, 2, 1), ).setIndexNames((0, "LANTRONIX-SLC-MIB", "slcServSiteIndex"))
if mibBuilder.loadTexts: slcServSiteEntry.setStatus('current')
slcServSiteIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 244, 1, 1, 2, 14, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 50))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slcServSiteIndex.setStatus('current')
slcServSiteName = MibTableColumn((1, 3, 6, 1, 4, 1, 244, 1, 1, 2, 14, 2, 1, 2), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slcServSiteName.setStatus('current')
slcServSitePort = MibTableColumn((1, 3, 6, 1, 4, 1, 244, 1, 1, 2, 14, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("none", 1), ("devicePort", 2), ("upperPCCard", 3), ("lowerPCCard", 4), ("usbPort", 5), ("internalModem", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slcServSitePort.setStatus('current')
slcServSitePortId = MibTableColumn((1, 3, 6, 1, 4, 1, 244, 1, 1, 2, 14, 2, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 48))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slcServSitePortId.setStatus('current')
slcServSiteLoginHost = MibTableColumn((1, 3, 6, 1, 4, 1, 244, 1, 1, 2, 14, 2, 1, 5), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slcServSiteLoginHost.setStatus('current')
slcServSiteCHAPSecret = MibTableColumn((1, 3, 6, 1, 4, 1, 244, 1, 1, 2, 14, 2, 1, 6), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slcServSiteCHAPSecret.setStatus('current')
slcServSiteTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 244, 1, 1, 2, 14, 2, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 30))).setUnits('minutes').setMaxAccess("readonly")
if mibBuilder.loadTexts: slcServSiteTimeout.setStatus('current')
slcServSiteLocalIP = MibTableColumn((1, 3, 6, 1, 4, 1, 244, 1, 1, 2, 14, 2, 1, 8), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slcServSiteLocalIP.setStatus('current')
slcServSiteRemoteIP = MibTableColumn((1, 3, 6, 1, 4, 1, 244, 1, 1, 2, 14, 2, 1, 9), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slcServSiteRemoteIP.setStatus('current')
slcServSiteStaticRouteIP = MibTableColumn((1, 3, 6, 1, 4, 1, 244, 1, 1, 2, 14, 2, 1, 10), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slcServSiteStaticRouteIP.setStatus('current')
slcServSiteStaticRouteMask = MibTableColumn((1, 3, 6, 1, 4, 1, 244, 1, 1, 2, 14, 2, 1, 11), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slcServSiteStaticRouteMask.setStatus('current')
slcServSiteStaticRouteGateway = MibTableColumn((1, 3, 6, 1, 4, 1, 244, 1, 1, 2, 14, 2, 1, 12), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slcServSiteStaticRouteGateway.setStatus('current')
slcServSiteDialoutNum = MibTableColumn((1, 3, 6, 1, 4, 1, 244, 1, 1, 2, 14, 2, 1, 13), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slcServSiteDialoutNum.setStatus('current')
slcServSiteDialoutLogin = MibTableColumn((1, 3, 6, 1, 4, 1, 244, 1, 1, 2, 14, 2, 1, 14), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slcServSiteDialoutLogin.setStatus('current')
slcServSiteDialback = MibTableColumn((1, 3, 6, 1, 4, 1, 244, 1, 1, 2, 14, 2, 1, 15), EnabledState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slcServSiteDialback.setStatus('current')
slcServSiteDialbackNum = MibTableColumn((1, 3, 6, 1, 4, 1, 244, 1, 1, 2, 14, 2, 1, 16), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slcServSiteDialbackNum.setStatus('current')
slcServSiteDialbackDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 244, 1, 1, 2, 14, 2, 1, 17), Integer32()).setUnits('seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: slcServSiteDialbackDelay.setStatus('current')
slcServSiteIdleTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 244, 1, 1, 2, 14, 2, 1, 18), Integer32()).setUnits('seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: slcServSiteIdleTimeout.setStatus('current')
slcServSiteRestartDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 244, 1, 1, 2, 14, 2, 1, 19), Integer32()).setUnits('seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: slcServSiteRestartDelay.setStatus('current')
slcServSiteCBCPServerAllowNoCallback = MibTableColumn((1, 3, 6, 1, 4, 1, 244, 1, 1, 2, 14, 2, 1, 20), EnabledState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slcServSiteCBCPServerAllowNoCallback.setStatus('current')
slcServSiteNATState = MibTableColumn((1, 3, 6, 1, 4, 1, 244, 1, 1, 2, 14, 2, 1, 21), EnabledState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slcServSiteNATState.setStatus('current')
slcServSiteDialbackRetries = MibTableColumn((1, 3, 6, 1, 4, 1, 244, 1, 1, 2, 14, 2, 1, 22), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slcServSiteDialbackRetries.setStatus('current')
slcAuthLocal = MibIdentifier((1, 3, 6, 1, 4, 1, 244, 1, 1, 3, 1))
slcAuthLocalNumber = MibScalar((1, 3, 6, 1, 4, 1, 244, 1, 1, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 128))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slcAuthLocalNumber.setStatus('current')
slcAuthLocalUsersTable = MibTable((1, 3, 6, 1, 4, 1, 244, 1, 1, 3, 1, 2), )
if mibBuilder.loadTexts: slcAuthLocalUsersTable.setStatus('current')
slcAuthLocalUserEntry = MibTableRow((1, 3, 6, 1, 4, 1, 244, 1, 1, 3, 1, 2, 1), ).setIndexNames((0, "LANTRONIX-SLC-MIB", "slcAuthLocalUserIndex"))
if mibBuilder.loadTexts: slcAuthLocalUserEntry.setStatus('current')
slcAuthLocalUserIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 244, 1, 1, 3, 1, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 128))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slcAuthLocalUserIndex.setStatus('current')
slcAuthLocalUserLogin = MibTableColumn((1, 3, 6, 1, 4, 1, 244, 1, 1, 3, 1, 2, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 33))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slcAuthLocalUserLogin.setStatus('current')
slcAuthLocalUserUID = MibTableColumn((1, 3, 6, 1, 4, 1, 244, 1, 1, 3, 1, 2, 1, 3), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slcAuthLocalUserUID.setStatus('current')
slcAuthLocalUserListenPorts = MibTableColumn((1, 3, 6, 1, 4, 1, 244, 1, 1, 3, 1, 2, 1, 4), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slcAuthLocalUserListenPorts.setStatus('current')
slcAuthLocalUserDataPorts = MibTableColumn((1, 3, 6, 1, 4, 1, 244, 1, 1, 3, 1, 2, 1, 5), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slcAuthLocalUserDataPorts.setStatus('current')
slcAuthLocalUserClearPorts = MibTableColumn((1, 3, 6, 1, 4, 1, 244, 1, 1, 3, 1, 2, 1, 6), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slcAuthLocalUserClearPorts.setStatus('current')
slcAuthLocalUserEscapeSeq = MibTableColumn((1, 3, 6, 1, 4, 1, 244, 1, 1, 3, 1, 2, 1, 7), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slcAuthLocalUserEscapeSeq.setStatus('current')
slcAuthLocalUserBreakSeq = MibTableColumn((1, 3, 6, 1, 4, 1, 244, 1, 1, 3, 1, 2, 1, 8), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slcAuthLocalUserBreakSeq.setStatus('current')
slcAuthLocalUserMenu = MibTableColumn((1, 3, 6, 1, 4, 1, 244, 1, 1, 3, 1, 2, 1, 9), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slcAuthLocalUserMenu.setStatus('current')
slcAuthLocalUserDialback = MibTableColumn((1, 3, 6, 1, 4, 1, 244, 1, 1, 3, 1, 2, 1, 10), EnabledState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slcAuthLocalUserDialback.setStatus('current')
slcAuthLocalUserDialbackNum = MibTableColumn((1, 3, 6, 1, 4, 1, 244, 1, 1, 3, 1, 2, 1, 11), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slcAuthLocalUserDialbackNum.setStatus('current')
slcAuthLocalUserGroup = MibTableColumn((1, 3, 6, 1, 4, 1, 244, 1, 1, 3, 1, 2, 1, 12), UserGroup()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slcAuthLocalUserGroup.setStatus('current')
slcAuthLocalUserRights = MibTableColumn((1, 3, 6, 1, 4, 1, 244, 1, 1, 3, 1, 2, 1, 13), UserRights()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slcAuthLocalUserRights.setStatus('current')
slcAuthLocalUserPwdExpires = MibTableColumn((1, 3, 6, 1, 4, 1, 244, 1, 1, 3, 1, 2, 1, 14), EnabledState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slcAuthLocalUserPwdExpires.setStatus('current')
slcAuthLocalUserChangePwd = MibTableColumn((1, 3, 6, 1, 4, 1, 244, 1, 1, 3, 1, 2, 1, 15), EnabledState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slcAuthLocalUserChangePwd.setStatus('current')
slcAuthLocalUserChangePwdNextLogin = MibTableColumn((1, 3, 6, 1, 4, 1, 244, 1, 1, 3, 1, 2, 1, 16), EnabledState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slcAuthLocalUserChangePwdNextLogin.setStatus('current')
slcAuthLocalState = MibScalar((1, 3, 6, 1, 4, 1, 244, 1, 1, 3, 1, 3), EnabledState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slcAuthLocalState.setStatus('current')
slcAuthLocalOrder = MibScalar((1, 3, 6, 1, 4, 1, 244, 1, 1, 3, 1, 4), AuthOrder()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slcAuthLocalOrder.setStatus('current')
slcAuthLocalComplexPasswords = MibScalar((1, 3, 6, 1, 4, 1, 244, 1, 1, 3, 1, 5), EnabledState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slcAuthLocalComplexPasswords.setStatus('current')
slcAuthLocalUseNextMethod = MibScalar((1, 3, 6, 1, 4, 1, 244, 1, 1, 3, 1, 6), EnabledState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slcAuthLocalUseNextMethod.setStatus('current')
slcAuthLocalAllowReuse = MibScalar((1, 3, 6, 1, 4, 1, 244, 1, 1, 3, 1, 7), EnabledState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slcAuthLocalAllowReuse.setStatus('current')
slcAuthLocalReuseHistory = MibScalar((1, 3, 6, 1, 4, 1, 244, 1, 1, 3, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 8))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slcAuthLocalReuseHistory.setStatus('current')
slcAuthLocalPasswordLifetime = MibScalar((1, 3, 6, 1, 4, 1, 244, 1, 1, 3, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 365))).setUnits('days').setMaxAccess("readonly")
if mibBuilder.loadTexts: slcAuthLocalPasswordLifetime.setStatus('current')
slcAuthLocalWarningPeriod = MibScalar((1, 3, 6, 1, 4, 1, 244, 1, 1, 3, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 90))).setUnits('days').setMaxAccess("readonly")
if mibBuilder.loadTexts: slcAuthLocalWarningPeriod.setStatus('current')
slcAuthLocalMaxLoginAttempts = MibScalar((1, 3, 6, 1, 4, 1, 244, 1, 1, 3, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 8))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slcAuthLocalMaxLoginAttempts.setStatus('current')
slcAuthLocalLockoutPeriod = MibScalar((1, 3, 6, 1, 4, 1, 244, 1, 1, 3, 1, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 90))).setUnits('minutes').setMaxAccess("readonly")
if mibBuilder.loadTexts: slcAuthLocalLockoutPeriod.setStatus('current')
slcAuthLocalMultipleSysadminLogins = MibScalar((1, 3, 6, 1, 4, 1, 244, 1, 1, 3, 1, 13), EnabledState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slcAuthLocalMultipleSysadminLogins.setStatus('current')
slcAuthLocalSysadminConsoleOnly = MibScalar((1, 3, 6, 1, 4, 1, 244, 1, 1, 3, 1, 14), EnabledState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slcAuthLocalSysadminConsoleOnly.setStatus('current')
slcAuthNIS = MibIdentifier((1, 3, 6, 1, 4, 1, 244, 1, 1, 3, 2))
slcAuthNISState = MibScalar((1, 3, 6, 1, 4, 1, 244, 1, 1, 3, 2, 1), EnabledState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slcAuthNISState.setStatus('current')
slcAuthNISOrder = MibScalar((1, 3, 6, 1, 4, 1, 244, 1, 1, 3, 2, 2), AuthOrder()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slcAuthNISOrder.setStatus('current')
slcAuthNISDomain = MibScalar((1, 3, 6, 1, 4, 1, 244, 1, 1, 3, 2, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slcAuthNISDomain.setStatus('current')
slcAuthNISBroadcast = MibScalar((1, 3, 6, 1, 4, 1, 244, 1, 1, 3, 2, 4), EnabledState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slcAuthNISBroadcast.setStatus('current')
slcAuthNISMaster = MibScalar((1, 3, 6, 1, 4, 1, 244, 1, 1, 3, 2, 5), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slcAuthNISMaster.setStatus('current')
slcAuthNISSlave1 = MibScalar((1, 3, 6, 1, 4, 1, 244, 1, 1, 3, 2, 6), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slcAuthNISSlave1.setStatus('current')
slcAuthNISSlave2 = MibScalar((1, 3, 6, 1, 4, 1, 244, 1, 1, 3, 2, 7), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slcAuthNISSlave2.setStatus('current')
slcAuthNISSlave3 = MibScalar((1, 3, 6, 1, 4, 1, 244, 1, 1, 3, 2, 8), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slcAuthNISSlave3.setStatus('current')
slcAuthNISGroup = MibScalar((1, 3, 6, 1, 4, 1, 244, 1, 1, 3, 2, 9), UserGroup()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slcAuthNISGroup.setStatus('current')
slcAuthNISRights = MibScalar((1, 3, 6, 1, 4, 1, 244, 1, 1, 3, 2, 10), UserRights()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slcAuthNISRights.setStatus('current')
slcAuthNISMenu = MibScalar((1, 3, 6, 1, 4, 1, 244, 1, 1, 3, 2, 11), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slcAuthNISMenu.setStatus('current')
slcAuthNISListenPorts = MibScalar((1, 3, 6, 1, 4, 1, 244, 1, 1, 3, 2, 12), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slcAuthNISListenPorts.setStatus('current')
slcAuthNISDataPorts = MibScalar((1, 3, 6, 1, 4, 1, 244, 1, 1, 3, 2, 13), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slcAuthNISDataPorts.setStatus('current')
slcAuthNISClearPorts = MibScalar((1, 3, 6, 1, 4, 1, 244, 1, 1, 3, 2, 14), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slcAuthNISClearPorts.setStatus('current')
slcAuthNISSlave4 = MibScalar((1, 3, 6, 1, 4, 1, 244, 1, 1, 3, 2, 15), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slcAuthNISSlave4.setStatus('current')
slcAuthNISSlave5 = MibScalar((1, 3, 6, 1, 4, 1, 244, 1, 1, 3, 2, 16), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slcAuthNISSlave5.setStatus('current')
slcAuthNISEscapeSeq = MibScalar((1, 3, 6, 1, 4, 1, 244, 1, 1, 3, 2, 17), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slcAuthNISEscapeSeq.setStatus('current')
slcAuthNISBreakSeq = MibScalar((1, 3, 6, 1, 4, 1, 244, 1, 1, 3, 2, 18), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slcAuthNISBreakSeq.setStatus('current')
slcAuthNISDialback = MibScalar((1, 3, 6, 1, 4, 1, 244, 1, 1, 3, 2, 19), EnabledState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slcAuthNISDialback.setStatus('current')
slcAuthNISDialbackNum = MibScalar((1, 3, 6, 1, 4, 1, 244, 1, 1, 3, 2, 20), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slcAuthNISDialbackNum.setStatus('current')
slcAuthLDAP = MibIdentifier((1, 3, 6, 1, 4, 1, 244, 1, 1, 3, 3))
slcAuthLDAPState = MibScalar((1, 3, 6, 1, 4, 1, 244, 1, 1, 3, 3, 1), EnabledState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slcAuthLDAPState.setStatus('current')
slcAuthLDAPOrder = MibScalar((1, 3, 6, 1, 4, 1, 244, 1, 1, 3, 3, 2), AuthOrder()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slcAuthLDAPOrder.setStatus('current')
slcAuthLDAPServer = MibScalar((1, 3, 6, 1, 4, 1, 244, 1, 1, 3, 3, 3), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slcAuthLDAPServer.setStatus('current')
slcAuthLDAPBase = MibScalar((1, 3, 6, 1, 4, 1, 244, 1, 1, 3, 3, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slcAuthLDAPBase.setStatus('current')
slcAuthLDAPBindName = MibScalar((1, 3, 6, 1, 4, 1, 244, 1, 1, 3, 3, 5), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slcAuthLDAPBindName.setStatus('current')
slcAuthLDAPPort = MibScalar((1, 3, 6, 1, 4, 1, 244, 1, 1, 3, 3, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slcAuthLDAPPort.setStatus('current')
slcAuthLDAPADSupport = MibScalar((1, 3, 6, 1, 4, 1, 244, 1, 1, 3, 3, 7), EnabledState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slcAuthLDAPADSupport.setStatus('current')
slcAuthLDAPGroup = MibScalar((1, 3, 6, 1, 4, 1, 244, 1, 1, 3, 3, 8), UserGroup()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slcAuthLDAPGroup.setStatus('current')
slcAuthLDAPRights = MibScalar((1, 3, 6, 1, 4, 1, 244, 1, 1, 3, 3, 9), UserRights()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slcAuthLDAPRights.setStatus('current')
slcAuthLDAPMenu = MibScalar((1, 3, 6, 1, 4, 1, 244, 1, 1, 3, 3, 10), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slcAuthLDAPMenu.setStatus('current')
slcAuthLDAPListenPorts = MibScalar((1, 3, 6, 1, 4, 1, 244, 1, 1, 3, 3, 11), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slcAuthLDAPListenPorts.setStatus('current')
slcAuthLDAPDataPorts = MibScalar((1, 3, 6, 1, 4, 1, 244, 1, 1, 3, 3, 12), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slcAuthLDAPDataPorts.setStatus('current')
slcAuthLDAPClearPorts = MibScalar((1, 3, 6, 1, 4, 1, 244, 1, 1, 3, 3, 13), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slcAuthLDAPClearPorts.setStatus('current')
slcAuthLDAPEncrypt = MibScalar((1, 3, 6, 1, 4, 1, 244, 1, 1, 3, 3, 14), EnabledState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slcAuthLDAPEncrypt.setStatus('current')
slcAuthLDAPEscapeSeq = MibScalar((1, 3, 6, 1, 4, 1, 244, 1, 1, 3, 3, 15), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slcAuthLDAPEscapeSeq.setStatus('current')
slcAuthLDAPBreakSeq = MibScalar((1, 3, 6, 1, 4, 1, 244, 1, 1, 3, 3, 16), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slcAuthLDAPBreakSeq.setStatus('current')
slcAuthLDAPBindWithLogin = MibScalar((1, 3, 6, 1, 4, 1, 244, 1, 1, 3, 3, 17), EnabledState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slcAuthLDAPBindWithLogin.setStatus('current')
slcAuthLDAPUseLDAPSchema = MibScalar((1, 3, 6, 1, 4, 1, 244, 1, 1, 3, 3, 18), EnabledState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slcAuthLDAPUseLDAPSchema.setStatus('current')
slcAuthLDAPDialback = MibScalar((1, 3, 6, 1, 4, 1, 244, 1, 1, 3, 3, 19), EnabledState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slcAuthLDAPDialback.setStatus('current')
slcAuthLDAPDialbackNum = MibScalar((1, 3, 6, 1, 4, 1, 244, 1, 1, 3, 3, 20), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slcAuthLDAPDialbackNum.setStatus('current')
slcAuthLDAPUserFilter = MibScalar((1, 3, 6, 1, 4, 1, 244, 1, 1, 3, 3, 21), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slcAuthLDAPUserFilter.setStatus('current')
slcAuthLDAPGroupFilter = MibScalar((1, 3, 6, 1, 4, 1, 244, 1, 1, 3, 3, 22), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slcAuthLDAPGroupFilter.setStatus('current')
slcAuthLDAPGroupMembershipAttr = MibScalar((1, 3, 6, 1, 4, 1, 244, 1, 1, 3, 3, 23), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slcAuthLDAPGroupMembershipAttr.setStatus('current')
slcAuthLDAPGroupMembershipDN = MibScalar((1, 3, 6, 1, 4, 1, 244, 1, 1, 3, 3, 24), EnabledState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slcAuthLDAPGroupMembershipDN.setStatus('current')
slcAuthLDAPServer2 = MibScalar((1, 3, 6, 1, 4, 1, 244, 1, 1, 3, 3, 25), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slcAuthLDAPServer2.setStatus('current')
slcAuthLDAPServerIPv6 = MibScalar((1, 3, 6, 1, 4, 1, 244, 1, 1, 3, 3, 26), Ipv6Address()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slcAuthLDAPServerIPv6.setStatus('current')
slcAuthLDAPServer2IPv6 = MibScalar((1, 3, 6, 1, 4, 1, 244, 1, 1, 3, 3, 27), Ipv6Address()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slcAuthLDAPServer2IPv6.setStatus('current')
slcAuthRADIUS = MibIdentifier((1, 3, 6, 1, 4, 1, 244, 1, 1, 3, 4))
slcAuthRADIUSState = MibScalar((1, 3, 6, 1, 4, 1, 244, 1, 1, 3, 4, 1), EnabledState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slcAuthRADIUSState.setStatus('current')
slcAuthRADIUSOrder = MibScalar((1, 3, 6, 1, 4, 1, 244, 1, 1, 3, 4, 2), AuthOrder()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slcAuthRADIUSOrder.setStatus('current')
slcAuthRADIUSTimeout = MibScalar((1, 3, 6, 1, 4, 1, 244, 1, 1, 3, 4, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 30))).setUnits('seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: slcAuthRADIUSTimeout.setStatus('current')
slcAuthRADIUSServerTable = MibTable((1, 3, 6, 1, 4, 1, 244, 1, 1, 3, 4, 4), )
if mibBuilder.loadTexts: slcAuthRADIUSServerTable.setStatus('current')
slcAuthRADIUSServerEntry = MibTableRow((1, 3, 6, 1, 4, 1, 244, 1, 1, 3, 4, 4, 1), ).setIndexNames((0, "LANTRONIX-SLC-MIB", "slcAuthRADIUSServerIndex"))
if mibBuilder.loadTexts: slcAuthRADIUSServerEntry.setStatus('current')
slcAuthRADIUSServerIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 244, 1, 1, 3, 4, 4, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slcAuthRADIUSServerIndex.setStatus('current')
slcAuthRADIUSServer = MibTableColumn((1, 3, 6, 1, 4, 1, 244, 1, 1, 3, 4, 4, 1, 2), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slcAuthRADIUSServer.setStatus('current')
slcAuthRADIUSPort = MibTableColumn((1, 3, 6, 1, 4, 1, 244, 1, 1, 3, 4, 4, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slcAuthRADIUSPort.setStatus('current')
slcAuthRADIUSServerIPv6 = MibTableColumn((1, 3, 6, 1, 4, 1, 244, 1, 1, 3, 4, 4, 1, 4), Ipv6Address()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slcAuthRADIUSServerIPv6.setStatus('current')
slcAuthRADIUSGroup = MibScalar((1, 3, 6, 1, 4, 1, 244, 1, 1, 3, 4, 5), UserGroup()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slcAuthRADIUSGroup.setStatus('current')
slcAuthRADIUSRights = MibScalar((1, 3, 6, 1, 4, 1, 244, 1, 1, 3, 4, 6), UserRights()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slcAuthRADIUSRights.setStatus('current')
slcAuthRADIUSMenu = MibScalar((1, 3, 6, 1, 4, 1, 244, 1, 1, 3, 4, 7), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slcAuthRADIUSMenu.setStatus('current')
slcAuthRADIUSListenPorts = MibScalar((1, 3, 6, 1, 4, 1, 244, 1, 1, 3, 4, 8), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slcAuthRADIUSListenPorts.setStatus('current')
slcAuthRADIUSDataPorts = MibScalar((1, 3, 6, 1, 4, 1, 244, 1, 1, 3, 4, 9), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slcAuthRADIUSDataPorts.setStatus('current')
slcAuthRADIUSClearPorts = MibScalar((1, 3, 6, 1, 4, 1, 244, 1, 1, 3, 4, 10), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slcAuthRADIUSClearPorts.setStatus('current')
slcAuthRADIUSEscapeSeq = MibScalar((1, 3, 6, 1, 4, 1, 244, 1, 1, 3, 4, 11), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slcAuthRADIUSEscapeSeq.setStatus('current')
slcAuthRADIUSBreakSeq = MibScalar((1, 3, 6, 1, 4, 1, 244, 1, 1, 3, 4, 12), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slcAuthRADIUSBreakSeq.setStatus('current')
slcAuthRADIUSDialback = MibScalar((1, 3, 6, 1, 4, 1, 244, 1, 1, 3, 4, 13), EnabledState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slcAuthRADIUSDialback.setStatus('current')
slcAuthRADIUSDialbackNum = MibScalar((1, 3, 6, 1, 4, 1, 244, 1, 1, 3, 4, 14), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slcAuthRADIUSDialbackNum.setStatus('current')
slcAuthRADIUSUseVSA = MibScalar((1, 3, 6, 1, 4, 1, 244, 1, 1, 3, 4, 15), EnabledState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slcAuthRADIUSUseVSA.setStatus('current')
slcAuthKerberos = MibIdentifier((1, 3, 6, 1, 4, 1, 244, 1, 1, 3, 5))
slcAuthKerbState = MibScalar((1, 3, 6, 1, 4, 1, 244, 1, 1, 3, 5, 1), EnabledState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slcAuthKerbState.setStatus('current')
slcAuthKerbOrder = MibScalar((1, 3, 6, 1, 4, 1, 244, 1, 1, 3, 5, 2), AuthOrder()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slcAuthKerbOrder.setStatus('current')
slcAuthKerbRealm = MibScalar((1, 3, 6, 1, 4, 1, 244, 1, 1, 3, 5, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 256))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slcAuthKerbRealm.setStatus('current')
slcAuthKerbKDC = MibScalar((1, 3, 6, 1, 4, 1, 244, 1, 1, 3, 5, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 256))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slcAuthKerbKDC.setStatus('current')
slcAuthKerbKDCIP = MibScalar((1, 3, 6, 1, 4, 1, 244, 1, 1, 3, 5, 5), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slcAuthKerbKDCIP.setStatus('current')
slcAuthKerbKDCPort = MibScalar((1, 3, 6, 1, 4, 1, 244, 1, 1, 3, 5, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slcAuthKerbKDCPort.setStatus('current')
slcAuthKerbUseLDAP = MibScalar((1, 3, 6, 1, 4, 1, 244, 1, 1, 3, 5, 7), EnabledState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slcAuthKerbUseLDAP.setStatus('current')
slcAuthKerbGroup = MibScalar((1, 3, 6, 1, 4, 1, 244, 1, 1, 3, 5, 8), UserGroup()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slcAuthKerbGroup.setStatus('current')
slcAuthKerbRights = MibScalar((1, 3, 6, 1, 4, 1, 244, 1, 1, 3, 5, 9), UserRights()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slcAuthKerbRights.setStatus('current')
slcAuthKerbMenu = MibScalar((1, 3, 6, 1, 4, 1, 244, 1, 1, 3, 5, 10), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slcAuthKerbMenu.setStatus('current')
slcAuthKerbListenPorts = MibScalar((1, 3, 6, 1, 4, 1, 244, 1, 1, 3, 5, 11), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slcAuthKerbListenPorts.setStatus('current')
slcAuthKerbDataPorts = MibScalar((1, 3, 6, 1, 4, 1, 244, 1, 1, 3, 5, 12), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slcAuthKerbDataPorts.setStatus('current')
slcAuthKerbClearPorts = MibScalar((1, 3, 6, 1, 4, 1, 244, 1, 1, 3, 5, 13), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slcAuthKerbClearPorts.setStatus('current')
slcAuthKerbEscapeSeq = MibScalar((1, 3, 6, 1, 4, 1, 244, 1, 1, 3, 5, 14), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slcAuthKerbEscapeSeq.setStatus('current')
slcAuthKerbBreakSeq = MibScalar((1, 3, 6, 1, 4, 1, 244, 1, 1, 3, 5, 15), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slcAuthKerbBreakSeq.setStatus('current')
slcAuthKerbDialback = MibScalar((1, 3, 6, 1, 4, 1, 244, 1, 1, 3, 5, 16), EnabledState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slcAuthKerbDialback.setStatus('current')
slcAuthKerbDialbackNum = MibScalar((1, 3, 6, 1, 4, 1, 244, 1, 1, 3, 5, 17), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slcAuthKerbDialbackNum.setStatus('current')
slcAuthKerbKDCIPv6 = MibScalar((1, 3, 6, 1, 4, 1, 244, 1, 1, 3, 5, 18), Ipv6Address()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slcAuthKerbKDCIPv6.setStatus('current')
slcAuthTACACS = MibIdentifier((1, 3, 6, 1, 4, 1, 244, 1, 1, 3, 6))
slcAuthTACACSState = MibScalar((1, 3, 6, 1, 4, 1, 244, 1, 1, 3, 6, 1), EnabledState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slcAuthTACACSState.setStatus('current')
slcAuthTACACSOrder = MibScalar((1, 3, 6, 1, 4, 1, 244, 1, 1, 3, 6, 2), AuthOrder()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slcAuthTACACSOrder.setStatus('current')
slcAuthTACACSServer = MibScalar((1, 3, 6, 1, 4, 1, 244, 1, 1, 3, 6, 3), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slcAuthTACACSServer.setStatus('current')
slcAuthTACACSEncrypt = MibScalar((1, 3, 6, 1, 4, 1, 244, 1, 1, 3, 6, 4), EnabledState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slcAuthTACACSEncrypt.setStatus('current')
slcAuthTACACSGroup = MibScalar((1, 3, 6, 1, 4, 1, 244, 1, 1, 3, 6, 5), UserGroup()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slcAuthTACACSGroup.setStatus('current')
slcAuthTACACSRights = MibScalar((1, 3, 6, 1, 4, 1, 244, 1, 1, 3, 6, 6), UserRights()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slcAuthTACACSRights.setStatus('current')
slcAuthTACACSMenu = MibScalar((1, 3, 6, 1, 4, 1, 244, 1, 1, 3, 6, 7), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slcAuthTACACSMenu.setStatus('current')
slcAuthTACACSListenPorts = MibScalar((1, 3, 6, 1, 4, 1, 244, 1, 1, 3, 6, 8), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slcAuthTACACSListenPorts.setStatus('current')
slcAuthTACACSDataPorts = MibScalar((1, 3, 6, 1, 4, 1, 244, 1, 1, 3, 6, 9), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slcAuthTACACSDataPorts.setStatus('current')
slcAuthTACACSClearPorts = MibScalar((1, 3, 6, 1, 4, 1, 244, 1, 1, 3, 6, 10), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slcAuthTACACSClearPorts.setStatus('current')
slcAuthTACACSServer2 = MibScalar((1, 3, 6, 1, 4, 1, 244, 1, 1, 3, 6, 11), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slcAuthTACACSServer2.setStatus('current')
slcAuthTACACSServer3 = MibScalar((1, 3, 6, 1, 4, 1, 244, 1, 1, 3, 6, 12), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slcAuthTACACSServer3.setStatus('current')
slcAuthTACACSEscapeSeq = MibScalar((1, 3, 6, 1, 4, 1, 244, 1, 1, 3, 6, 13), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slcAuthTACACSEscapeSeq.setStatus('current')
slcAuthTACACSBreakSeq = MibScalar((1, 3, 6, 1, 4, 1, 244, 1, 1, 3, 6, 14), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slcAuthTACACSBreakSeq.setStatus('current')
slcAuthTACACSDialback = MibScalar((1, 3, 6, 1, 4, 1, 244, 1, 1, 3, 6, 15), EnabledState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slcAuthTACACSDialback.setStatus('current')
slcAuthTACACSDialbackNum = MibScalar((1, 3, 6, 1, 4, 1, 244, 1, 1, 3, 6, 16), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slcAuthTACACSDialbackNum.setStatus('current')
slcAuthTACACSAuthService = MibScalar((1, 3, 6, 1, 4, 1, 244, 1, 1, 3, 6, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("pppPAP", 1), ("pppCHAP", 2), ("asciiLogin", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slcAuthTACACSAuthService.setStatus('current')
slcAuthTACACSServerIPv6 = MibScalar((1, 3, 6, 1, 4, 1, 244, 1, 1, 3, 6, 18), Ipv6Address()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slcAuthTACACSServerIPv6.setStatus('current')
slcAuthTACACSServer2IPv6 = MibScalar((1, 3, 6, 1, 4, 1, 244, 1, 1, 3, 6, 19), Ipv6Address()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slcAuthTACACSServer2IPv6.setStatus('current')
slcAuthTACACSServer3IPv6 = MibScalar((1, 3, 6, 1, 4, 1, 244, 1, 1, 3, 6, 20), Ipv6Address()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slcAuthTACACSServer3IPv6.setStatus('current')
slcAuthRemote = MibIdentifier((1, 3, 6, 1, 4, 1, 244, 1, 1, 3, 7))
slcAuthRemoteNumber = MibScalar((1, 3, 6, 1, 4, 1, 244, 1, 1, 3, 7, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 128))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slcAuthRemoteNumber.setStatus('current')
slcAuthRemoteUsersTable = MibTable((1, 3, 6, 1, 4, 1, 244, 1, 1, 3, 7, 2), )
if mibBuilder.loadTexts: slcAuthRemoteUsersTable.setStatus('current')
slcAuthRemoteUserEntry = MibTableRow((1, 3, 6, 1, 4, 1, 244, 1, 1, 3, 7, 2, 1), ).setIndexNames((0, "LANTRONIX-SLC-MIB", "slcAuthRemoteUserIndex"))
if mibBuilder.loadTexts: slcAuthRemoteUserEntry.setStatus('current')
slcAuthRemoteUserIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 244, 1, 1, 3, 7, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 128))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slcAuthRemoteUserIndex.setStatus('current')
slcAuthRemoteUserLogin = MibTableColumn((1, 3, 6, 1, 4, 1, 244, 1, 1, 3, 7, 2, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slcAuthRemoteUserLogin.setStatus('current')
slcAuthRemoteUserGroup = MibTableColumn((1, 3, 6, 1, 4, 1, 244, 1, 1, 3, 7, 2, 1, 3), UserGroup()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slcAuthRemoteUserGroup.setStatus('current')
slcAuthRemoteUserRights = MibTableColumn((1, 3, 6, 1, 4, 1, 244, 1, 1, 3, 7, 2, 1, 4), UserRights()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slcAuthRemoteUserRights.setStatus('current')
slcAuthRemoteUserListenPorts = MibTableColumn((1, 3, 6, 1, 4, 1, 244, 1, 1, 3, 7, 2, 1, 5), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slcAuthRemoteUserListenPorts.setStatus('current')
slcAuthRemoteUserDataPorts = MibTableColumn((1, 3, 6, 1, 4, 1, 244, 1, 1, 3, 7, 2, 1, 6), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slcAuthRemoteUserDataPorts.setStatus('current')
slcAuthRemoteUserClearPorts = MibTableColumn((1, 3, 6, 1, 4, 1, 244, 1, 1, 3, 7, 2, 1, 7), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slcAuthRemoteUserClearPorts.setStatus('current')
slcAuthRemoteUserEscapeSeq = MibTableColumn((1, 3, 6, 1, 4, 1, 244, 1, 1, 3, 7, 2, 1, 8), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slcAuthRemoteUserEscapeSeq.setStatus('current')
slcAuthRemoteUserBreakSeq = MibTableColumn((1, 3, 6, 1, 4, 1, 244, 1, 1, 3, 7, 2, 1, 9), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slcAuthRemoteUserBreakSeq.setStatus('current')
slcAuthRemoteUserMenu = MibTableColumn((1, 3, 6, 1, 4, 1, 244, 1, 1, 3, 7, 2, 1, 10), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slcAuthRemoteUserMenu.setStatus('current')
slcAuthRemoteUserLocked = MibTableColumn((1, 3, 6, 1, 4, 1, 244, 1, 1, 3, 7, 2, 1, 11), EnabledState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slcAuthRemoteUserLocked.setStatus('current')
slcAuthRemoteUserDialback = MibTableColumn((1, 3, 6, 1, 4, 1, 244, 1, 1, 3, 7, 2, 1, 12), EnabledState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slcAuthRemoteUserDialback.setStatus('current')
slcAuthRemoteUserDialbackNum = MibTableColumn((1, 3, 6, 1, 4, 1, 244, 1, 1, 3, 7, 2, 1, 13), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slcAuthRemoteUserDialbackNum.setStatus('current')
slcAuthRemoteAuthListOnly = MibScalar((1, 3, 6, 1, 4, 1, 244, 1, 1, 3, 7, 3), EnabledState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slcAuthRemoteAuthListOnly.setStatus('current')
slcAuthGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 244, 1, 1, 3, 8))
slcAuthGroupsNumber = MibScalar((1, 3, 6, 1, 4, 1, 244, 1, 1, 3, 8, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 20))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slcAuthGroupsNumber.setStatus('current')
slcAuthGroupsTable = MibTable((1, 3, 6, 1, 4, 1, 244, 1, 1, 3, 8, 2), )
if mibBuilder.loadTexts: slcAuthGroupsTable.setStatus('current')
slcAuthGroupEntry = MibTableRow((1, 3, 6, 1, 4, 1, 244, 1, 1, 3, 8, 2, 1), ).setIndexNames((0, "LANTRONIX-SLC-MIB", "slcAuthGroupIndex"))
if mibBuilder.loadTexts: slcAuthGroupEntry.setStatus('current')
slcAuthGroupIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 244, 1, 1, 3, 8, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 128))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slcAuthGroupIndex.setStatus('current')
slcAuthGroupName = MibTableColumn((1, 3, 6, 1, 4, 1, 244, 1, 1, 3, 8, 2, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slcAuthGroupName.setStatus('current')
slcAuthGroupRights = MibTableColumn((1, 3, 6, 1, 4, 1, 244, 1, 1, 3, 8, 2, 1, 3), UserRights()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slcAuthGroupRights.setStatus('current')
slcAuthGroupListenPorts = MibTableColumn((1, 3, 6, 1, 4, 1, 244, 1, 1, 3, 8, 2, 1, 4), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slcAuthGroupListenPorts.setStatus('current')
slcAuthGroupDataPorts = MibTableColumn((1, 3, 6, 1, 4, 1, 244, 1, 1, 3, 8, 2, 1, 5), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slcAuthGroupDataPorts.setStatus('current')
slcAuthGroupClearPorts = MibTableColumn((1, 3, 6, 1, 4, 1, 244, 1, 1, 3, 8, 2, 1, 6), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slcAuthGroupClearPorts.setStatus('current')
slcAuthGroupEscapeSeq = MibTableColumn((1, 3, 6, 1, 4, 1, 244, 1, 1, 3, 8, 2, 1, 7), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slcAuthGroupEscapeSeq.setStatus('current')
slcAuthGroupBreakSeq = MibTableColumn((1, 3, 6, 1, 4, 1, 244, 1, 1, 3, 8, 2, 1, 8), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slcAuthGroupBreakSeq.setStatus('current')
slcAuthGroupMenu = MibTableColumn((1, 3, 6, 1, 4, 1, 244, 1, 1, 3, 8, 2, 1, 9), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slcAuthGroupMenu.setStatus('current')
slcAuthGroupDialback = MibTableColumn((1, 3, 6, 1, 4, 1, 244, 1, 1, 3, 8, 2, 1, 10), EnabledState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slcAuthGroupDialback.setStatus('current')
slcAuthGroupDialbackNum = MibTableColumn((1, 3, 6, 1, 4, 1, 244, 1, 1, 3, 8, 2, 1, 11), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slcAuthGroupDialbackNum.setStatus('current')
slcDevConsolePort = MibIdentifier((1, 3, 6, 1, 4, 1, 244, 1, 1, 4, 1))
slcDevConBaud = MibScalar((1, 3, 6, 1, 4, 1, 244, 1, 1, 4, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(300, 300), ValueRangeConstraint(600, 600), ValueRangeConstraint(1200, 1200), ValueRangeConstraint(2400, 2400), ValueRangeConstraint(4800, 4800), ValueRangeConstraint(9600, 9600), ValueRangeConstraint(19200, 19200), ValueRangeConstraint(38400, 38400), ValueRangeConstraint(57600, 57600), ValueRangeConstraint(115200, 115200), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slcDevConBaud.setStatus('current')
slcDevConDataBits = MibScalar((1, 3, 6, 1, 4, 1, 244, 1, 1, 4, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(7, 7), ValueRangeConstraint(8, 8), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slcDevConDataBits.setStatus('current')
slcDevConStopBits = MibScalar((1, 3, 6, 1, 4, 1, 244, 1, 1, 4, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(1, 1), ValueRangeConstraint(2, 2), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slcDevConStopBits.setStatus('current')
slcDevConParity = MibScalar((1, 3, 6, 1, 4, 1, 244, 1, 1, 4, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("none", 1), ("odd", 2), ("even", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slcDevConParity.setStatus('current')
slcDevConFlowControl = MibScalar((1, 3, 6, 1, 4, 1, 244, 1, 1, 4, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("none", 1), ("xonxoff", 2), ("rtscts", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slcDevConFlowControl.setStatus('current')
slcDevConTimeout = MibScalar((1, 3, 6, 1, 4, 1, 244, 1, 1, 4, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 30))).setUnits('minutes').setMaxAccess("readonly")
if mibBuilder.loadTexts: slcDevConTimeout.setStatus('current')
slcDevConShowLines = MibScalar((1, 3, 6, 1, 4, 1, 244, 1, 1, 4, 1, 7), EnabledState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slcDevConShowLines.setStatus('current')
slcDevConNumberShowLines = MibScalar((1, 3, 6, 1, 4, 1, 244, 1, 1, 4, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 50))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slcDevConNumberShowLines.setStatus('current')
slcDevConGroup = MibScalar((1, 3, 6, 1, 4, 1, 244, 1, 1, 4, 1, 9), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slcDevConGroup.setStatus('current')
slcDevDevicePorts = MibIdentifier((1, 3, 6, 1, 4, 1, 244, 1, 1, 4, 2))
slcDevPortGlobal = MibIdentifier((1, 3, 6, 1, 4, 1, 244, 1, 1, 4, 2, 1))
slcDevGlobalListenPorts = MibScalar((1, 3, 6, 1, 4, 1, 244, 1, 1, 4, 2, 1, 1), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slcDevGlobalListenPorts.setStatus('obsolete')
slcDevGlobalDataPorts = MibScalar((1, 3, 6, 1, 4, 1, 244, 1, 1, 4, 2, 1, 2), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slcDevGlobalDataPorts.setStatus('obsolete')
slcDevGlobalClearPorts = MibScalar((1, 3, 6, 1, 4, 1, 244, 1, 1, 4, 2, 1, 3), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slcDevGlobalClearPorts.setStatus('obsolete')
slcDevGlobalStartTelnetPort = MibScalar((1, 3, 6, 1, 4, 1, 244, 1, 1, 4, 2, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slcDevGlobalStartTelnetPort.setStatus('current')
slcDevGlobalStartSSHPort = MibScalar((1, 3, 6, 1, 4, 1, 244, 1, 1, 4, 2, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slcDevGlobalStartSSHPort.setStatus('current')
slcDevGlobalStartTCPPort = MibScalar((1, 3, 6, 1, 4, 1, 244, 1, 1, 4, 2, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slcDevGlobalStartTCPPort.setStatus('current')
slcDevGlobalMaxDirect = MibScalar((1, 3, 6, 1, 4, 1, 244, 1, 1, 4, 2, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 10))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slcDevGlobalMaxDirect.setStatus('obsolete')
slcDevPortConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 244, 1, 1, 4, 2, 2))
slcDevPortCfgNumber = MibScalar((1, 3, 6, 1, 4, 1, 244, 1, 1, 4, 2, 2, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(8, 8), ValueRangeConstraint(16, 16), ValueRangeConstraint(24, 24), ValueRangeConstraint(32, 32), ValueRangeConstraint(40, 40), ValueRangeConstraint(48, 48), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slcDevPortCfgNumber.setStatus('current')
slcDevPortCfgTable = MibTable((1, 3, 6, 1, 4, 1, 244, 1, 1, 4, 2, 2, 2), )
if mibBuilder.loadTexts: slcDevPortCfgTable.setStatus('current')
slcDevPortCfgEntry = MibTableRow((1, 3, 6, 1, 4, 1, 244, 1, 1, 4, 2, 2, 2, 1), ).setIndexNames((0, "LANTRONIX-SLC-MIB", "slcDevPortId"))
if mibBuilder.loadTexts: slcDevPortCfgEntry.setStatus('current')
slcDevPortId = MibTableColumn((1, 3, 6, 1, 4, 1, 244, 1, 1, 4, 2, 2, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 48))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slcDevPortId.setStatus('current')
slcDevPortCfgName = MibTableColumn((1, 3, 6, 1, 4, 1, 244, 1, 1, 4, 2, 2, 2, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 30))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slcDevPortCfgName.setStatus('current')
slcDevPortCfgDevice = MibTableColumn((1, 3, 6, 1, 4, 1, 244, 1, 1, 4, 2, 2, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10))).clone(namedValues=NamedValues(("none", 1), ("slp8", 2), ("slp16", 3), ("slp8Exp8", 4), ("slp8Exp16", 5), ("slp16Exp8", 6), ("slp16Exp16", 7), ("sensorsoft", 8), ("servertech", 9), ("rpm", 10)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slcDevPortCfgDevice.setStatus('current')
slcDevPortCfgDevLogin = MibTableColumn((1, 3, 6, 1, 4, 1, 244, 1, 1, 4, 2, 2, 2, 1, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slcDevPortCfgDevLogin.setStatus('current')
slcDevPortCfgBreakSeq = MibTableColumn((1, 3, 6, 1, 4, 1, 244, 1, 1, 4, 2, 2, 2, 1, 5), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slcDevPortCfgBreakSeq.setStatus('current')
slcDevPortCfgTelnetState = MibTableColumn((1, 3, 6, 1, 4, 1, 244, 1, 1, 4, 2, 2, 2, 1, 6), EnabledState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slcDevPortCfgTelnetState.setStatus('current')
slcDevPortCfgTelnetPort = MibTableColumn((1, 3, 6, 1, 4, 1, 244, 1, 1, 4, 2, 2, 2, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1025, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slcDevPortCfgTelnetPort.setStatus('current')
slcDevPortCfgTelnetAuth = MibTableColumn((1, 3, 6, 1, 4, 1, 244, 1, 1, 4, 2, 2, 2, 1, 8), EnabledState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slcDevPortCfgTelnetAuth.setStatus('current')
slcDevPortCfgSSHState = MibTableColumn((1, 3, 6, 1, 4, 1, 244, 1, 1, 4, 2, 2, 2, 1, 9), EnabledState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slcDevPortCfgSSHState.setStatus('current')
slcDevPortCfgSSHPort = MibTableColumn((1, 3, 6, 1, 4, 1, 244, 1, 1, 4, 2, 2, 2, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1025, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slcDevPortCfgSSHPort.setStatus('current')
slcDevPortCfgSSHAuth = MibTableColumn((1, 3, 6, 1, 4, 1, 244, 1, 1, 4, 2, 2, 2, 1, 11), EnabledState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slcDevPortCfgSSHAuth.setStatus('current')
slcDevPortCfgTCPState = MibTableColumn((1, 3, 6, 1, 4, 1, 244, 1, 1, 4, 2, 2, 2, 1, 12), EnabledState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slcDevPortCfgTCPState.setStatus('current')
slcDevPortCfgTCPPort = MibTableColumn((1, 3, 6, 1, 4, 1, 244, 1, 1, 4, 2, 2, 2, 1, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1025, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slcDevPortCfgTCPPort.setStatus('current')
slcDevPortCfgTCPAuth = MibTableColumn((1, 3, 6, 1, 4, 1, 244, 1, 1, 4, 2, 2, 2, 1, 14), EnabledState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slcDevPortCfgTCPAuth.setStatus('current')
slcDevPortCfgIP = MibTableColumn((1, 3, 6, 1, 4, 1, 244, 1, 1, 4, 2, 2, 2, 1, 15), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slcDevPortCfgIP.setStatus('current')
slcDevPortCfgBaud = MibTableColumn((1, 3, 6, 1, 4, 1, 244, 1, 1, 4, 2, 2, 2, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(300, 300), ValueRangeConstraint(600, 600), ValueRangeConstraint(1200, 1200), ValueRangeConstraint(2400, 2400), ValueRangeConstraint(4800, 4800), ValueRangeConstraint(9600, 9600), ValueRangeConstraint(19200, 19200), ValueRangeConstraint(38400, 38400), ValueRangeConstraint(57600, 57600), ValueRangeConstraint(115200, 115200), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slcDevPortCfgBaud.setStatus('current')
slcDevPortCfgDataBits = MibTableColumn((1, 3, 6, 1, 4, 1, 244, 1, 1, 4, 2, 2, 2, 1, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(7, 7), ValueRangeConstraint(8, 8), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slcDevPortCfgDataBits.setStatus('current')
slcDevPortCfgStopBits = MibTableColumn((1, 3, 6, 1, 4, 1, 244, 1, 1, 4, 2, 2, 2, 1, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(1, 1), ValueRangeConstraint(2, 2), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slcDevPortCfgStopBits.setStatus('current')
slcDevPortCfgParity = MibTableColumn((1, 3, 6, 1, 4, 1, 244, 1, 1, 4, 2, 2, 2, 1, 19), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("none", 1), ("odd", 2), ("even", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slcDevPortCfgParity.setStatus('current')
slcDevPortCfgFlowControl = MibTableColumn((1, 3, 6, 1, 4, 1, 244, 1, 1, 4, 2, 2, 2, 1, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("none", 1), ("xonxoff", 2), ("rtscts", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slcDevPortCfgFlowControl.setStatus('current')
slcDevPortCfgLogins = MibTableColumn((1, 3, 6, 1, 4, 1, 244, 1, 1, 4, 2, 2, 2, 1, 21), EnabledState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slcDevPortCfgLogins.setStatus('current')
slcDevPortCfgConnectDSR = MibTableColumn((1, 3, 6, 1, 4, 1, 244, 1, 1, 4, 2, 2, 2, 1, 22), EnabledState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slcDevPortCfgConnectDSR.setStatus('current')
slcDevPortCfgDisconnectDSR = MibTableColumn((1, 3, 6, 1, 4, 1, 244, 1, 1, 4, 2, 2, 2, 1, 23), EnabledState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slcDevPortCfgDisconnectDSR.setStatus('current')
slcDevPortCfgModemState = MibTableColumn((1, 3, 6, 1, 4, 1, 244, 1, 1, 4, 2, 2, 2, 1, 24), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9))).clone(namedValues=NamedValues(("disabled", 1), ("dialout", 2), ("dialin", 3), ("dialback", 4), ("dialondemand", 5), ("dialinAndDialondemand", 6), ("dialinHostList", 7), ("cbcpServer", 8), ("cbcpClient", 9)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slcDevPortCfgModemState.setStatus('current')
slcDevPortCfgModemMode = MibTableColumn((1, 3, 6, 1, 4, 1, 244, 1, 1, 4, 2, 2, 2, 1, 25), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("ppp", 1), ("text", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slcDevPortCfgModemMode.setStatus('current')
slcDevPortCfgLocalIP = MibTableColumn((1, 3, 6, 1, 4, 1, 244, 1, 1, 4, 2, 2, 2, 1, 26), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slcDevPortCfgLocalIP.setStatus('current')
slcDevPortCfgRemoteIP = MibTableColumn((1, 3, 6, 1, 4, 1, 244, 1, 1, 4, 2, 2, 2, 1, 27), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slcDevPortCfgRemoteIP.setStatus('current')
slcDevPortCfgAuth = MibTableColumn((1, 3, 6, 1, 4, 1, 244, 1, 1, 4, 2, 2, 2, 1, 28), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("pap", 1), ("chap", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slcDevPortCfgAuth.setStatus('current')
slcDevPortCfgCHAPHost = MibTableColumn((1, 3, 6, 1, 4, 1, 244, 1, 1, 4, 2, 2, 2, 1, 29), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slcDevPortCfgCHAPHost.setStatus('current')
slcDevPortCfgInitScript = MibTableColumn((1, 3, 6, 1, 4, 1, 244, 1, 1, 4, 2, 2, 2, 1, 30), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slcDevPortCfgInitScript.setStatus('current')
slcDevPortCfgTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 244, 1, 1, 4, 2, 2, 2, 1, 31), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 30))).setUnits('minutes').setMaxAccess("readonly")
if mibBuilder.loadTexts: slcDevPortCfgTimeout.setStatus('current')
slcDevPortCfgDialoutNum = MibTableColumn((1, 3, 6, 1, 4, 1, 244, 1, 1, 4, 2, 2, 2, 1, 32), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slcDevPortCfgDialoutNum.setStatus('current')
slcDevPortCfgDialoutLogin = MibTableColumn((1, 3, 6, 1, 4, 1, 244, 1, 1, 4, 2, 2, 2, 1, 33), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slcDevPortCfgDialoutLogin.setStatus('current')
slcDevPortCfgDialbackMode = MibTableColumn((1, 3, 6, 1, 4, 1, 244, 1, 1, 4, 2, 2, 2, 1, 34), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("usernumber", 1), ("fixed", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slcDevPortCfgDialbackMode.setStatus('current')
slcDevPortCfgDialbackNum = MibTableColumn((1, 3, 6, 1, 4, 1, 244, 1, 1, 4, 2, 2, 2, 1, 35), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slcDevPortCfgDialbackNum.setStatus('current')
slcDevPortCfgNATState = MibTableColumn((1, 3, 6, 1, 4, 1, 244, 1, 1, 4, 2, 2, 2, 1, 36), EnabledState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slcDevPortCfgNATState.setStatus('current')
slcDevPortCfgLocalState = MibTableColumn((1, 3, 6, 1, 4, 1, 244, 1, 1, 4, 2, 2, 2, 1, 37), EnabledState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slcDevPortCfgLocalState.setStatus('current')
slcDevPortCfgNFSFileState = MibTableColumn((1, 3, 6, 1, 4, 1, 244, 1, 1, 4, 2, 2, 2, 1, 38), EnabledState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slcDevPortCfgNFSFileState.setStatus('current')
slcDevPortCfgNFSDir = MibTableColumn((1, 3, 6, 1, 4, 1, 244, 1, 1, 4, 2, 2, 2, 1, 39), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slcDevPortCfgNFSDir.setStatus('current')
slcDevPortCfgNFSMaxFiles = MibTableColumn((1, 3, 6, 1, 4, 1, 244, 1, 1, 4, 2, 2, 2, 1, 40), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slcDevPortCfgNFSMaxFiles.setStatus('current')
slcDevPortCfgNFSMaxSize = MibTableColumn((1, 3, 6, 1, 4, 1, 244, 1, 1, 4, 2, 2, 2, 1, 41), Integer32()).setUnits('bytes').setMaxAccess("readonly")
if mibBuilder.loadTexts: slcDevPortCfgNFSMaxSize.setStatus('current')
slcDevPortCfgEmailState = MibTableColumn((1, 3, 6, 1, 4, 1, 244, 1, 1, 4, 2, 2, 2, 1, 42), EnabledState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slcDevPortCfgEmailState.setStatus('current')
slcDevPortCfgEmailTrigger = MibTableColumn((1, 3, 6, 1, 4, 1, 244, 1, 1, 4, 2, 2, 2, 1, 43), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("bytecnt", 1), ("textstring", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slcDevPortCfgEmailTrigger.setStatus('current')
slcDevPortCfgEmailByteThresh = MibTableColumn((1, 3, 6, 1, 4, 1, 244, 1, 1, 4, 2, 2, 2, 1, 44), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slcDevPortCfgEmailByteThresh.setStatus('current')
slcDevPortCfgEmailDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 244, 1, 1, 4, 2, 2, 2, 1, 45), Integer32()).setUnits('seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: slcDevPortCfgEmailDelay.setStatus('current')
slcDevPortCfgEmailRestartDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 244, 1, 1, 4, 2, 2, 2, 1, 46), Integer32()).setUnits('seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: slcDevPortCfgEmailRestartDelay.setStatus('current')
slcDevPortCfgEmailTextString = MibTableColumn((1, 3, 6, 1, 4, 1, 244, 1, 1, 4, 2, 2, 2, 1, 47), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slcDevPortCfgEmailTextString.setStatus('current')
slcDevPortCfgEmailTo = MibTableColumn((1, 3, 6, 1, 4, 1, 244, 1, 1, 4, 2, 2, 2, 1, 48), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slcDevPortCfgEmailTo.setStatus('current')
slcDevPortCfgEmailSubject = MibTableColumn((1, 3, 6, 1, 4, 1, 244, 1, 1, 4, 2, 2, 2, 1, 49), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slcDevPortCfgEmailSubject.setStatus('current')
slcDevPortCfgPCCardState = MibTableColumn((1, 3, 6, 1, 4, 1, 244, 1, 1, 4, 2, 2, 2, 1, 50), EnabledState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slcDevPortCfgPCCardState.setStatus('current')
slcDevPortCfgPCCardLogTo = MibTableColumn((1, 3, 6, 1, 4, 1, 244, 1, 1, 4, 2, 2, 2, 1, 51), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("upperSlot", 1), ("lowerSlot", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slcDevPortCfgPCCardLogTo.setStatus('current')
slcDevPortCfgPCCardMaxFiles = MibTableColumn((1, 3, 6, 1, 4, 1, 244, 1, 1, 4, 2, 2, 2, 1, 52), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slcDevPortCfgPCCardMaxFiles.setStatus('current')
slcDevPortCfgPCCardMaxSize = MibTableColumn((1, 3, 6, 1, 4, 1, 244, 1, 1, 4, 2, 2, 2, 1, 53), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slcDevPortCfgPCCardMaxSize.setStatus('current')
slcDevPortCfgAction = MibTableColumn((1, 3, 6, 1, 4, 1, 244, 1, 1, 4, 2, 2, 2, 1, 54), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("noAction", 1), ("zeroPortCounters", 2), ("clearLocalLog", 3), ("terminateConnections", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: slcDevPortCfgAction.setStatus('current')
slcDevPortCfgEmailSend = MibTableColumn((1, 3, 6, 1, 4, 1, 244, 1, 1, 4, 2, 2, 2, 1, 55), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("email", 1), ("snmptrap", 2), ("both", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slcDevPortCfgEmailSend.setStatus('current')
slcDevPortCfgBanner = MibTableColumn((1, 3, 6, 1, 4, 1, 244, 1, 1, 4, 2, 2, 2, 1, 56), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slcDevPortCfgBanner.setStatus('current')
slcDevPortCfgIdleTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 244, 1, 1, 4, 2, 2, 2, 1, 57), Integer32()).setUnits('seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: slcDevPortCfgIdleTimeout.setStatus('current')
slcDevPortCfgRestartDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 244, 1, 1, 4, 2, 2, 2, 1, 58), Integer32()).setUnits('seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: slcDevPortCfgRestartDelay.setStatus('current')
slcDevPortCfgCallerIdLogging = MibTableColumn((1, 3, 6, 1, 4, 1, 244, 1, 1, 4, 2, 2, 2, 1, 59), EnabledState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slcDevPortCfgCallerIdLogging.setStatus('current')
slcDevPortCfgCallerIdATCmd = MibTableColumn((1, 3, 6, 1, 4, 1, 244, 1, 1, 4, 2, 2, 2, 1, 60), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slcDevPortCfgCallerIdATCmd.setStatus('current')
slcDevPortCfgDODAuth = MibTableColumn((1, 3, 6, 1, 4, 1, 244, 1, 1, 4, 2, 2, 2, 1, 61), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("pap", 1), ("chap", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slcDevPortCfgDODAuth.setStatus('current')
slcDevPortCfgDODCHAPHost = MibTableColumn((1, 3, 6, 1, 4, 1, 244, 1, 1, 4, 2, 2, 2, 1, 62), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slcDevPortCfgDODCHAPHost.setStatus('current')
slcDevPortCfgSLMLoggingState = MibTableColumn((1, 3, 6, 1, 4, 1, 244, 1, 1, 4, 2, 2, 2, 1, 63), EnabledState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slcDevPortCfgSLMLoggingState.setStatus('current')
slcDevPortCfgSLMNMS = MibTableColumn((1, 3, 6, 1, 4, 1, 244, 1, 1, 4, 2, 2, 2, 1, 64), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slcDevPortCfgSLMNMS.setStatus('current')
slcDevPortCfgSLMByteThresh = MibTableColumn((1, 3, 6, 1, 4, 1, 244, 1, 1, 4, 2, 2, 2, 1, 65), Integer32()).setUnits('bytes').setMaxAccess("readonly")
if mibBuilder.loadTexts: slcDevPortCfgSLMByteThresh.setStatus('current')
slcDevPortCfgSLMTimeFrame = MibTableColumn((1, 3, 6, 1, 4, 1, 244, 1, 1, 4, 2, 2, 2, 1, 66), Integer32()).setUnits('seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: slcDevPortCfgSLMTimeFrame.setStatus('current')
slcDevPortCfgWebColumns = MibTableColumn((1, 3, 6, 1, 4, 1, 244, 1, 1, 4, 2, 2, 2, 1, 67), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slcDevPortCfgWebColumns.setStatus('current')
slcDevPortCfgWebRows = MibTableColumn((1, 3, 6, 1, 4, 1, 244, 1, 1, 4, 2, 2, 2, 1, 68), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slcDevPortCfgWebRows.setStatus('current')
slcDevPortCfgSyslogState = MibTableColumn((1, 3, 6, 1, 4, 1, 244, 1, 1, 4, 2, 2, 2, 1, 69), EnabledState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slcDevPortCfgSyslogState.setStatus('current')
slcDevPortCfgHostList = MibTableColumn((1, 3, 6, 1, 4, 1, 244, 1, 1, 4, 2, 2, 2, 1, 70), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slcDevPortCfgHostList.setStatus('current')
slcDevPortCfgDevLowTemp = MibTableColumn((1, 3, 6, 1, 4, 1, 244, 1, 1, 4, 2, 2, 2, 1, 71), Integer32()).setUnits('Celsius').setMaxAccess("readonly")
if mibBuilder.loadTexts: slcDevPortCfgDevLowTemp.setStatus('current')
slcDevPortCfgDevHighTemp = MibTableColumn((1, 3, 6, 1, 4, 1, 244, 1, 1, 4, 2, 2, 2, 1, 72), Integer32()).setUnits('Celsius').setMaxAccess("readonly")
if mibBuilder.loadTexts: slcDevPortCfgDevHighTemp.setStatus('current')
slcDevPortCfgDevTemperature = MibTableColumn((1, 3, 6, 1, 4, 1, 244, 1, 1, 4, 2, 2, 2, 1, 73), OctetString()).setUnits('Celsius').setMaxAccess("readonly")
if mibBuilder.loadTexts: slcDevPortCfgDevTemperature.setStatus('current')
slcDevPortCfgDevLowHumidity = MibTableColumn((1, 3, 6, 1, 4, 1, 244, 1, 1, 4, 2, 2, 2, 1, 74), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slcDevPortCfgDevLowHumidity.setStatus('current')
slcDevPortCfgDevHighHumidity = MibTableColumn((1, 3, 6, 1, 4, 1, 244, 1, 1, 4, 2, 2, 2, 1, 75), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slcDevPortCfgDevHighHumidity.setStatus('current')
slcDevPortCfgDevHumidity = MibTableColumn((1, 3, 6, 1, 4, 1, 244, 1, 1, 4, 2, 2, 2, 1, 76), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slcDevPortCfgDevHumidity.setStatus('current')
slcDevPortCfgDevTraps = MibTableColumn((1, 3, 6, 1, 4, 1, 244, 1, 1, 4, 2, 2, 2, 1, 77), EnabledState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slcDevPortCfgDevTraps.setStatus('current')
slcDevPortCfgShowLines = MibTableColumn((1, 3, 6, 1, 4, 1, 244, 1, 1, 4, 2, 2, 2, 1, 78), EnabledState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slcDevPortCfgShowLines.setStatus('current')
slcDevPortCfgNumberShowLines = MibTableColumn((1, 3, 6, 1, 4, 1, 244, 1, 1, 4, 2, 2, 2, 1, 79), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 50))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slcDevPortCfgNumberShowLines.setStatus('current')
slcDevPortCfgViewPortLog = MibTableColumn((1, 3, 6, 1, 4, 1, 244, 1, 1, 4, 2, 2, 2, 1, 80), EnabledState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slcDevPortCfgViewPortLog.setStatus('current')
slcDevPortCfgPortLogSeq = MibTableColumn((1, 3, 6, 1, 4, 1, 244, 1, 1, 4, 2, 2, 2, 1, 81), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slcDevPortCfgPortLogSeq.setStatus('current')
slcDevPortCfgMaxDirectConnects = MibTableColumn((1, 3, 6, 1, 4, 1, 244, 1, 1, 4, 2, 2, 2, 1, 82), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slcDevPortCfgMaxDirectConnects.setStatus('current')
slcDevPortCfgTelnetTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 244, 1, 1, 4, 2, 2, 2, 1, 83), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1800))).setUnits('seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: slcDevPortCfgTelnetTimeout.setStatus('current')
slcDevPortCfgSSHTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 244, 1, 1, 4, 2, 2, 2, 1, 84), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1800))).setUnits('seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: slcDevPortCfgSSHTimeout.setStatus('current')
slcDevPortCfgTCPTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 244, 1, 1, 4, 2, 2, 2, 1, 85), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1800))).setUnits('seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: slcDevPortCfgTCPTimeout.setStatus('current')
slcDevPortCfgCBCPClientType = MibTableColumn((1, 3, 6, 1, 4, 1, 244, 1, 1, 4, 2, 2, 2, 1, 86), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("adminDefined", 1), ("userDefined", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slcDevPortCfgCBCPClientType.setStatus('current')
slcDevPortCfgCBCPServerAllowNoCallback = MibTableColumn((1, 3, 6, 1, 4, 1, 244, 1, 1, 4, 2, 2, 2, 1, 87), EnabledState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slcDevPortCfgCBCPServerAllowNoCallback.setStatus('current')
slcDevPortCfgDialbackDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 244, 1, 1, 4, 2, 2, 2, 1, 88), Integer32()).setUnits('seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: slcDevPortCfgDialbackDelay.setStatus('current')
slcDevPortCfgUSBState = MibTableColumn((1, 3, 6, 1, 4, 1, 244, 1, 1, 4, 2, 2, 2, 1, 89), EnabledState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slcDevPortCfgUSBState.setStatus('current')
slcDevPortCfgUSBLogTo = MibTableColumn((1, 3, 6, 1, 4, 1, 244, 1, 1, 4, 2, 2, 2, 1, 90), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slcDevPortCfgUSBLogTo.setStatus('current')
slcDevPortCfgUSBMaxFiles = MibTableColumn((1, 3, 6, 1, 4, 1, 244, 1, 1, 4, 2, 2, 2, 1, 91), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slcDevPortCfgUSBMaxFiles.setStatus('current')
slcDevPortCfgUSBMaxSize = MibTableColumn((1, 3, 6, 1, 4, 1, 244, 1, 1, 4, 2, 2, 2, 1, 92), Integer32()).setUnits('bytes').setMaxAccess("readonly")
if mibBuilder.loadTexts: slcDevPortCfgUSBMaxSize.setStatus('current')
slcDevPortCfgCHAPAuthLocalUsers = MibTableColumn((1, 3, 6, 1, 4, 1, 244, 1, 1, 4, 2, 2, 2, 1, 93), EnabledState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slcDevPortCfgCHAPAuthLocalUsers.setStatus('current')
slcDevPortCfgUseSites = MibTableColumn((1, 3, 6, 1, 4, 1, 244, 1, 1, 4, 2, 2, 2, 1, 94), EnabledState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slcDevPortCfgUseSites.setStatus('current')
slcDevPortCfgDialbackRetries = MibTableColumn((1, 3, 6, 1, 4, 1, 244, 1, 1, 4, 2, 2, 2, 1, 95), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slcDevPortCfgDialbackRetries.setStatus('current')
slcDevPortCfgGroup = MibTableColumn((1, 3, 6, 1, 4, 1, 244, 1, 1, 4, 2, 2, 2, 1, 96), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slcDevPortCfgGroup.setStatus('current')
slcDevPortCfgIPMask = MibTableColumn((1, 3, 6, 1, 4, 1, 244, 1, 1, 4, 2, 2, 2, 1, 97), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slcDevPortCfgIPMask.setStatus('current')
slcDevPortCfgDevPrompt = MibTableColumn((1, 3, 6, 1, 4, 1, 244, 1, 1, 4, 2, 2, 2, 1, 98), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slcDevPortCfgDevPrompt.setStatus('current')
slcDevPortCfgDevNumOutlets = MibTableColumn((1, 3, 6, 1, 4, 1, 244, 1, 1, 4, 2, 2, 2, 1, 99), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slcDevPortCfgDevNumOutlets.setStatus('current')
slcDevPortCfgDevNumExpOutlets = MibTableColumn((1, 3, 6, 1, 4, 1, 244, 1, 1, 4, 2, 2, 2, 1, 100), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slcDevPortCfgDevNumExpOutlets.setStatus('current')
slcDevPortCfgReversePinout = MibTableColumn((1, 3, 6, 1, 4, 1, 244, 1, 1, 4, 2, 2, 2, 1, 101), EnabledState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slcDevPortCfgReversePinout.setStatus('current')
slcDevPortCfgUSBVBUS = MibTableColumn((1, 3, 6, 1, 4, 1, 244, 1, 1, 4, 2, 2, 2, 1, 102), EnabledState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slcDevPortCfgUSBVBUS.setStatus('current')
slcDevPortCfgAssertDTR = MibTableColumn((1, 3, 6, 1, 4, 1, 244, 1, 1, 4, 2, 2, 2, 1, 103), EnabledState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slcDevPortCfgAssertDTR.setStatus('current')
slcDevPortCfgPortType = MibTableColumn((1, 3, 6, 1, 4, 1, 244, 1, 1, 4, 2, 2, 2, 1, 104), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("rj45", 1), ("usb", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slcDevPortCfgPortType.setStatus('current')
slcDevPortCfgTelnetTimeoutDataDirection = MibTableColumn((1, 3, 6, 1, 4, 1, 244, 1, 1, 4, 2, 2, 2, 1, 105), TimeoutDataDirection()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slcDevPortCfgTelnetTimeoutDataDirection.setStatus('current')
slcDevPortCfgSSHTimeoutDataDirection = MibTableColumn((1, 3, 6, 1, 4, 1, 244, 1, 1, 4, 2, 2, 2, 1, 106), TimeoutDataDirection()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slcDevPortCfgSSHTimeoutDataDirection.setStatus('current')
slcDevPortCfgTCPTimeoutDataDirection = MibTableColumn((1, 3, 6, 1, 4, 1, 244, 1, 1, 4, 2, 2, 2, 1, 107), TimeoutDataDirection()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slcDevPortCfgTCPTimeoutDataDirection.setStatus('current')
slcDevPortCfgIdleTimeoutMessage = MibTableColumn((1, 3, 6, 1, 4, 1, 244, 1, 1, 4, 2, 2, 2, 1, 108), EnabledState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slcDevPortCfgIdleTimeoutMessage.setStatus('current')
slcDevPortCfgNumberOfSessionsMessage = MibTableColumn((1, 3, 6, 1, 4, 1, 244, 1, 1, 4, 2, 2, 2, 1, 109), EnabledState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slcDevPortCfgNumberOfSessionsMessage.setStatus('current')
slcDevPortCfgMinimizeLatency = MibTableColumn((1, 3, 6, 1, 4, 1, 244, 1, 1, 4, 2, 2, 2, 1, 110), EnabledState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slcDevPortCfgMinimizeLatency.setStatus('current')
slcDevPortCfgTelnetSoftIAC = MibTableColumn((1, 3, 6, 1, 4, 1, 244, 1, 1, 4, 2, 2, 2, 1, 111), EnabledState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slcDevPortCfgTelnetSoftIAC.setStatus('current')
slcDevPortCfgSendTermString = MibTableColumn((1, 3, 6, 1, 4, 1, 244, 1, 1, 4, 2, 2, 2, 1, 112), EnabledState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slcDevPortCfgSendTermString.setStatus('current')
slcDevPortCfgTerminationString = MibTableColumn((1, 3, 6, 1, 4, 1, 244, 1, 1, 4, 2, 2, 2, 1, 113), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slcDevPortCfgTerminationString.setStatus('current')
slcDevPortCfgPowerManagementSeq = MibTableColumn((1, 3, 6, 1, 4, 1, 244, 1, 1, 4, 2, 2, 2, 1, 114), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slcDevPortCfgPowerManagementSeq.setStatus('current')
slcDevPortCfgPowerSupplies = MibTableColumn((1, 3, 6, 1, 4, 1, 244, 1, 1, 4, 2, 2, 2, 1, 115), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slcDevPortCfgPowerSupplies.setStatus('current')
slcDevPortCfgToggleDTR = MibTableColumn((1, 3, 6, 1, 4, 1, 244, 1, 1, 4, 2, 2, 2, 1, 116), EnabledState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slcDevPortCfgToggleDTR.setStatus('current')
slcDevPortCfgTokenAction = MibTableColumn((1, 3, 6, 1, 4, 1, 244, 1, 1, 4, 2, 2, 2, 1, 117), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slcDevPortCfgTokenAction.setStatus('current')
slcDevPortCfgTokenSendString = MibTableColumn((1, 3, 6, 1, 4, 1, 244, 1, 1, 4, 2, 2, 2, 1, 118), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slcDevPortCfgTokenSendString.setStatus('current')
slcDevPortCfgTokenPowerSupply = MibTableColumn((1, 3, 6, 1, 4, 1, 244, 1, 1, 4, 2, 2, 2, 1, 119), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slcDevPortCfgTokenPowerSupply.setStatus('current')
slcDevPortCfgTokenPowerAction = MibTableColumn((1, 3, 6, 1, 4, 1, 244, 1, 1, 4, 2, 2, 2, 1, 120), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("turnOff", 1), ("turnOn", 2), ("cyclePower", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slcDevPortCfgTokenPowerAction.setStatus('current')
slcDevPortState = MibIdentifier((1, 3, 6, 1, 4, 1, 244, 1, 1, 4, 2, 3))
slcDevPortStateNumber = MibScalar((1, 3, 6, 1, 4, 1, 244, 1, 1, 4, 2, 3, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(8, 8), ValueRangeConstraint(16, 16), ValueRangeConstraint(24, 24), ValueRangeConstraint(32, 32), ValueRangeConstraint(40, 40), ValueRangeConstraint(48, 48), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slcDevPortStateNumber.setStatus('current')
slcDevPortStateTable = MibTable((1, 3, 6, 1, 4, 1, 244, 1, 1, 4, 2, 3, 2), )
if mibBuilder.loadTexts: slcDevPortStateTable.setStatus('current')
slcDevPortStateEntry = MibTableRow((1, 3, 6, 1, 4, 1, 244, 1, 1, 4, 2, 3, 2, 1), ).setIndexNames((0, "LANTRONIX-SLC-MIB", "slcDevPortStateIndex"))
if mibBuilder.loadTexts: slcDevPortStateEntry.setStatus('current')
slcDevPortStateIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 244, 1, 1, 4, 2, 3, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 48))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slcDevPortStateIndex.setStatus('current')
slcDevPortStateBytesInput = MibTableColumn((1, 3, 6, 1, 4, 1, 244, 1, 1, 4, 2, 3, 2, 1, 2), Integer32()).setUnits('bytes').setMaxAccess("readonly")
if mibBuilder.loadTexts: slcDevPortStateBytesInput.setStatus('current')
slcDevPortStateBytesOutput = MibTableColumn((1, 3, 6, 1, 4, 1, 244, 1, 1, 4, 2, 3, 2, 1, 3), Integer32()).setUnits('bytes').setMaxAccess("readonly")
if mibBuilder.loadTexts: slcDevPortStateBytesOutput.setStatus('current')
slcDevPortStateFramingErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 244, 1, 1, 4, 2, 3, 2, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slcDevPortStateFramingErrors.setStatus('current')
slcDevPortStateParityErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 244, 1, 1, 4, 2, 3, 2, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slcDevPortStateParityErrors.setStatus('current')
slcDevPortStateOverrunErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 244, 1, 1, 4, 2, 3, 2, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slcDevPortStateOverrunErrors.setStatus('current')
slcDevPortStateFlowControlViolations = MibTableColumn((1, 3, 6, 1, 4, 1, 244, 1, 1, 4, 2, 3, 2, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slcDevPortStateFlowControlViolations.setStatus('current')
slcDevPortStateDSR = MibTableColumn((1, 3, 6, 1, 4, 1, 244, 1, 1, 4, 2, 3, 2, 1, 8), EnabledState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slcDevPortStateDSR.setStatus('current')
slcDevPortStateDTR = MibTableColumn((1, 3, 6, 1, 4, 1, 244, 1, 1, 4, 2, 3, 2, 1, 9), EnabledState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slcDevPortStateDTR.setStatus('current')
slcDevPortStateCTS = MibTableColumn((1, 3, 6, 1, 4, 1, 244, 1, 1, 4, 2, 3, 2, 1, 10), EnabledState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slcDevPortStateCTS.setStatus('current')
slcDevPortStateRTS = MibTableColumn((1, 3, 6, 1, 4, 1, 244, 1, 1, 4, 2, 3, 2, 1, 11), EnabledState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slcDevPortStateRTS.setStatus('current')
slcDevPortStateCD = MibTableColumn((1, 3, 6, 1, 4, 1, 244, 1, 1, 4, 2, 3, 2, 1, 12), EnabledState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slcDevPortStateCD.setStatus('current')
slcDevPCCard = MibIdentifier((1, 3, 6, 1, 4, 1, 244, 1, 1, 4, 3))
slcPCCardCfgTable = MibTable((1, 3, 6, 1, 4, 1, 244, 1, 1, 4, 3, 1), )
if mibBuilder.loadTexts: slcPCCardCfgTable.setStatus('current')
slcPCCardCfgEntry = MibTableRow((1, 3, 6, 1, 4, 1, 244, 1, 1, 4, 3, 1, 1), ).setIndexNames((0, "LANTRONIX-SLC-MIB", "slcPCCardCfgIndex"))
if mibBuilder.loadTexts: slcPCCardCfgEntry.setStatus('current')
slcPCCardCfgIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 244, 1, 1, 4, 3, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slcPCCardCfgIndex.setStatus('current')
slcPCCardCfgCardType = MibTableColumn((1, 3, 6, 1, 4, 1, 244, 1, 1, 4, 3, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("none", 1), ("storage", 2), ("modem", 3), ("isdn", 4), ("wireless", 5), ("gsmmodem", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slcPCCardCfgCardType.setStatus('current')
slcPCCardCfgCardId = MibTableColumn((1, 3, 6, 1, 4, 1, 244, 1, 1, 4, 3, 1, 1, 3), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slcPCCardCfgCardId.setStatus('current')
slcPCCardCfgBaud = MibTableColumn((1, 3, 6, 1, 4, 1, 244, 1, 1, 4, 3, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(300, 300), ValueRangeConstraint(600, 600), ValueRangeConstraint(1200, 1200), ValueRangeConstraint(2400, 2400), ValueRangeConstraint(4800, 4800), ValueRangeConstraint(9600, 9600), ValueRangeConstraint(19200, 19200), ValueRangeConstraint(38400, 38400), ValueRangeConstraint(57600, 57600), ValueRangeConstraint(115200, 115200), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slcPCCardCfgBaud.setStatus('current')
slcPCCardCfgDataBits = MibTableColumn((1, 3, 6, 1, 4, 1, 244, 1, 1, 4, 3, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(7, 7), ValueRangeConstraint(8, 8), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slcPCCardCfgDataBits.setStatus('current')
slcPCCardCfgStopBits = MibTableColumn((1, 3, 6, 1, 4, 1, 244, 1, 1, 4, 3, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(1, 1), ValueRangeConstraint(2, 2), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slcPCCardCfgStopBits.setStatus('current')
slcPCCardCfgParity = MibTableColumn((1, 3, 6, 1, 4, 1, 244, 1, 1, 4, 3, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("none", 1), ("odd", 2), ("even", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slcPCCardCfgParity.setStatus('current')
slcPCCardCfgFlowControl = MibTableColumn((1, 3, 6, 1, 4, 1, 244, 1, 1, 4, 3, 1, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("none", 1), ("xonxoff", 2), ("rtscts", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slcPCCardCfgFlowControl.setStatus('current')
slcPCCardCfgModemState = MibTableColumn((1, 3, 6, 1, 4, 1, 244, 1, 1, 4, 3, 1, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9))).clone(namedValues=NamedValues(("disabled", 1), ("dialout", 2), ("dialin", 3), ("dialback", 4), ("dialondemand", 5), ("dialinAndDialondemand", 6), ("dialinHostList", 7), ("cbcpServer", 8), ("cbcpClient", 9)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slcPCCardCfgModemState.setStatus('current')
slcPCCardCfgModemMode = MibTableColumn((1, 3, 6, 1, 4, 1, 244, 1, 1, 4, 3, 1, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("ppp", 1), ("text", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slcPCCardCfgModemMode.setStatus('current')
slcPCCardCfgLocalIP = MibTableColumn((1, 3, 6, 1, 4, 1, 244, 1, 1, 4, 3, 1, 1, 11), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slcPCCardCfgLocalIP.setStatus('current')
slcPCCardCfgRemoteIP = MibTableColumn((1, 3, 6, 1, 4, 1, 244, 1, 1, 4, 3, 1, 1, 12), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slcPCCardCfgRemoteIP.setStatus('current')
slcPCCardCfgAuth = MibTableColumn((1, 3, 6, 1, 4, 1, 244, 1, 1, 4, 3, 1, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("pap", 1), ("chap", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slcPCCardCfgAuth.setStatus('current')
slcPCCardCfgCHAPHost = MibTableColumn((1, 3, 6, 1, 4, 1, 244, 1, 1, 4, 3, 1, 1, 14), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slcPCCardCfgCHAPHost.setStatus('current')
slcPCCardCfgInitScript = MibTableColumn((1, 3, 6, 1, 4, 1, 244, 1, 1, 4, 3, 1, 1, 15), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slcPCCardCfgInitScript.setStatus('current')
slcPCCardCfgTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 244, 1, 1, 4, 3, 1, 1, 16), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 30))).setUnits('minutes').setMaxAccess("readonly")
if mibBuilder.loadTexts: slcPCCardCfgTimeout.setStatus('current')
slcPCCardCfgDialoutNum = MibTableColumn((1, 3, 6, 1, 4, 1, 244, 1, 1, 4, 3, 1, 1, 17), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slcPCCardCfgDialoutNum.setStatus('current')
slcPCCardCfgDialoutLogin = MibTableColumn((1, 3, 6, 1, 4, 1, 244, 1, 1, 4, 3, 1, 1, 18), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slcPCCardCfgDialoutLogin.setStatus('current')
slcPCCardCfgDialbackMode = MibTableColumn((1, 3, 6, 1, 4, 1, 244, 1, 1, 4, 3, 1, 1, 19), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("usernumber", 1), ("fixed", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slcPCCardCfgDialbackMode.setStatus('current')
slcPCCardCfgDialbackNum = MibTableColumn((1, 3, 6, 1, 4, 1, 244, 1, 1, 4, 3, 1, 1, 20), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slcPCCardCfgDialbackNum.setStatus('current')
slcPCCardCfgNATState = MibTableColumn((1, 3, 6, 1, 4, 1, 244, 1, 1, 4, 3, 1, 1, 21), EnabledState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slcPCCardCfgNATState.setStatus('current')
slcPCCardCfgStorageFS = MibTableColumn((1, 3, 6, 1, 4, 1, 244, 1, 1, 4, 3, 1, 1, 22), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("notmounted", 1), ("ext2", 2), ("fat", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slcPCCardCfgStorageFS.setStatus('current')
slcPCCardCfgISDNChannel = MibTableColumn((1, 3, 6, 1, 4, 1, 244, 1, 1, 4, 3, 1, 1, 23), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slcPCCardCfgISDNChannel.setStatus('current')
slcPCCardCfgISDNChannelNum = MibTableColumn((1, 3, 6, 1, 4, 1, 244, 1, 1, 4, 3, 1, 1, 24), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slcPCCardCfgISDNChannelNum.setStatus('current')
slcPCCardCfgTelnetState = MibTableColumn((1, 3, 6, 1, 4, 1, 244, 1, 1, 4, 3, 1, 1, 25), EnabledState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slcPCCardCfgTelnetState.setStatus('current')
slcPCCardCfgTelnetPort = MibTableColumn((1, 3, 6, 1, 4, 1, 244, 1, 1, 4, 3, 1, 1, 26), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1025, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slcPCCardCfgTelnetPort.setStatus('current')
slcPCCardCfgTelnetAuth = MibTableColumn((1, 3, 6, 1, 4, 1, 244, 1, 1, 4, 3, 1, 1, 27), EnabledState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slcPCCardCfgTelnetAuth.setStatus('current')
slcPCCardCfgSSHState = MibTableColumn((1, 3, 6, 1, 4, 1, 244, 1, 1, 4, 3, 1, 1, 28), EnabledState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slcPCCardCfgSSHState.setStatus('current')
slcPCCardCfgSSHPort = MibTableColumn((1, 3, 6, 1, 4, 1, 244, 1, 1, 4, 3, 1, 1, 29), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1025, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slcPCCardCfgSSHPort.setStatus('current')
slcPCCardCfgSSHAuth = MibTableColumn((1, 3, 6, 1, 4, 1, 244, 1, 1, 4, 3, 1, 1, 30), EnabledState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slcPCCardCfgSSHAuth.setStatus('current')
slcPCCardCfgTCPState = MibTableColumn((1, 3, 6, 1, 4, 1, 244, 1, 1, 4, 3, 1, 1, 31), EnabledState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slcPCCardCfgTCPState.setStatus('current')
slcPCCardCfgTCPPort = MibTableColumn((1, 3, 6, 1, 4, 1, 244, 1, 1, 4, 3, 1, 1, 32), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1025, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slcPCCardCfgTCPPort.setStatus('current')
slcPCCardCfgTCPAuth = MibTableColumn((1, 3, 6, 1, 4, 1, 244, 1, 1, 4, 3, 1, 1, 33), EnabledState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slcPCCardCfgTCPAuth.setStatus('current')
slcPCCardCfgGSMPIN = MibTableColumn((1, 3, 6, 1, 4, 1, 244, 1, 1, 4, 3, 1, 1, 34), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slcPCCardCfgGSMPIN.setStatus('current')
slcPCCardCfgGSMNetworkName = MibTableColumn((1, 3, 6, 1, 4, 1, 244, 1, 1, 4, 3, 1, 1, 35), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slcPCCardCfgGSMNetworkName.setStatus('obsolete')
slcPCCardCfgGSMPPPCompression = MibTableColumn((1, 3, 6, 1, 4, 1, 244, 1, 1, 4, 3, 1, 1, 36), EnabledState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slcPCCardCfgGSMPPPCompression.setStatus('current')
slcPCCardCfgGSMAutoAcquireDNS = MibTableColumn((1, 3, 6, 1, 4, 1, 244, 1, 1, 4, 3, 1, 1, 37), EnabledState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slcPCCardCfgGSMAutoAcquireDNS.setStatus('current')
slcPCCardCfgGSMDialoutMode = MibTableColumn((1, 3, 6, 1, 4, 1, 244, 1, 1, 4, 3, 1, 1, 38), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("gprs", 1), ("gsm", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slcPCCardCfgGSMDialoutMode.setStatus('current')
slcPCCardCfgGSMContextID = MibTableColumn((1, 3, 6, 1, 4, 1, 244, 1, 1, 4, 3, 1, 1, 39), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slcPCCardCfgGSMContextID.setStatus('current')
slcPCCardCfgGSMBearerService = MibTableColumn((1, 3, 6, 1, 4, 1, 244, 1, 1, 4, 3, 1, 1, 40), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slcPCCardCfgGSMBearerService.setStatus('current')
slcPCCardCfgIdleTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 244, 1, 1, 4, 3, 1, 1, 41), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slcPCCardCfgIdleTimeout.setStatus('current')
slcPCCardCfgRestartDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 244, 1, 1, 4, 3, 1, 1, 42), Integer32()).setUnits('seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: slcPCCardCfgRestartDelay.setStatus('current')
slcPCCardCfgCallerIdLogging = MibTableColumn((1, 3, 6, 1, 4, 1, 244, 1, 1, 4, 3, 1, 1, 43), EnabledState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slcPCCardCfgCallerIdLogging.setStatus('current')
slcPCCardCfgCallerIdATCmd = MibTableColumn((1, 3, 6, 1, 4, 1, 244, 1, 1, 4, 3, 1, 1, 44), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slcPCCardCfgCallerIdATCmd.setStatus('current')
slcPCCardCfgDODAuth = MibTableColumn((1, 3, 6, 1, 4, 1, 244, 1, 1, 4, 3, 1, 1, 45), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("pap", 1), ("chap", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slcPCCardCfgDODAuth.setStatus('current')
slcPCCardCfgDODCHAPHost = MibTableColumn((1, 3, 6, 1, 4, 1, 244, 1, 1, 4, 3, 1, 1, 46), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slcPCCardCfgDODCHAPHost.setStatus('current')
slcPCCardCfgHostList = MibTableColumn((1, 3, 6, 1, 4, 1, 244, 1, 1, 4, 3, 1, 1, 47), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slcPCCardCfgHostList.setStatus('current')
slcPCCardCfgCBCPClientType = MibTableColumn((1, 3, 6, 1, 4, 1, 244, 1, 1, 4, 3, 1, 1, 48), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("adminDefined", 1), ("userDefined", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slcPCCardCfgCBCPClientType.setStatus('current')
slcPCCardCfgCBCPServerAllowNoCallback = MibTableColumn((1, 3, 6, 1, 4, 1, 244, 1, 1, 4, 3, 1, 1, 49), EnabledState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slcPCCardCfgCBCPServerAllowNoCallback.setStatus('current')
slcPCCardCfgDialbackDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 244, 1, 1, 4, 3, 1, 1, 50), Integer32()).setUnits('seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: slcPCCardCfgDialbackDelay.setStatus('current')
slcPCCardCfgCHAPAuthLocalUsers = MibTableColumn((1, 3, 6, 1, 4, 1, 244, 1, 1, 4, 3, 1, 1, 51), EnabledState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slcPCCardCfgCHAPAuthLocalUsers.setStatus('current')
slcPCCardCfgUseSites = MibTableColumn((1, 3, 6, 1, 4, 1, 244, 1, 1, 4, 3, 1, 1, 52), EnabledState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slcPCCardCfgUseSites.setStatus('current')
slcPCCardCfgDialbackRetries = MibTableColumn((1, 3, 6, 1, 4, 1, 244, 1, 1, 4, 3, 1, 1, 53), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slcPCCardCfgDialbackRetries.setStatus('current')
slcPCCardCfgGroup = MibTableColumn((1, 3, 6, 1, 4, 1, 244, 1, 1, 4, 3, 1, 1, 54), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slcPCCardCfgGroup.setStatus('current')
slcDevPowerSupply = MibIdentifier((1, 3, 6, 1, 4, 1, 244, 1, 1, 4, 4))
slcDevPowerSupplyType = MibScalar((1, 3, 6, 1, 4, 1, 244, 1, 1, 4, 4, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("acOnePowerSupply", 1), ("acTwoPowerSupplies", 2), ("dcTwoPowerSupplies", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slcDevPowerSupplyType.setStatus('current')
slcDevPowerSupplyA = MibScalar((1, 3, 6, 1, 4, 1, 244, 1, 1, 4, 4, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("up", 1), ("down", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slcDevPowerSupplyA.setStatus('current')
slcDevPowerSupplyB = MibScalar((1, 3, 6, 1, 4, 1, 244, 1, 1, 4, 4, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("up", 1), ("down", 2), ("notInstalled", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slcDevPowerSupplyB.setStatus('current')
slcDevUSB = MibIdentifier((1, 3, 6, 1, 4, 1, 244, 1, 1, 4, 5))
slcDevUSBState = MibScalar((1, 3, 6, 1, 4, 1, 244, 1, 1, 4, 5, 1), EnabledState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slcDevUSBState.setStatus('current')
slcDevUSBCfgTable = MibTable((1, 3, 6, 1, 4, 1, 244, 1, 1, 4, 5, 2), )
if mibBuilder.loadTexts: slcDevUSBCfgTable.setStatus('current')
slcDevUSBCfgEntry = MibTableRow((1, 3, 6, 1, 4, 1, 244, 1, 1, 4, 5, 2, 1), ).setIndexNames((0, "LANTRONIX-SLC-MIB", "slcDevUSBId"))
if mibBuilder.loadTexts: slcDevUSBCfgEntry.setStatus('current')
slcDevUSBId = MibTableColumn((1, 3, 6, 1, 4, 1, 244, 1, 1, 4, 5, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slcDevUSBId.setStatus('current')
slcDevUSBCfgCardType = MibTableColumn((1, 3, 6, 1, 4, 1, 244, 1, 1, 4, 5, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("none", 1), ("storage", 2), ("modem", 3), ("isdn", 4), ("wireless", 5), ("gsmmodem", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slcDevUSBCfgCardType.setStatus('current')
slcDevUSBCfgCardId = MibTableColumn((1, 3, 6, 1, 4, 1, 244, 1, 1, 4, 5, 2, 1, 3), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slcDevUSBCfgCardId.setStatus('current')
slcDevUSBCfgStorageFS = MibTableColumn((1, 3, 6, 1, 4, 1, 244, 1, 1, 4, 5, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("notmounted", 1), ("ext2", 2), ("fat", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slcDevUSBCfgStorageFS.setStatus('current')
slcDevUSBCfgBaud = MibTableColumn((1, 3, 6, 1, 4, 1, 244, 1, 1, 4, 5, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(300, 300), ValueRangeConstraint(600, 600), ValueRangeConstraint(1200, 1200), ValueRangeConstraint(2400, 2400), ValueRangeConstraint(4800, 4800), ValueRangeConstraint(9600, 9600), ValueRangeConstraint(19200, 19200), ValueRangeConstraint(38400, 38400), ValueRangeConstraint(57600, 57600), ValueRangeConstraint(115200, 115200), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slcDevUSBCfgBaud.setStatus('current')
slcDevUSBCfgDataBits = MibTableColumn((1, 3, 6, 1, 4, 1, 244, 1, 1, 4, 5, 2, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(7, 7), ValueRangeConstraint(8, 8), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slcDevUSBCfgDataBits.setStatus('current')
slcDevUSBCfgStopBits = MibTableColumn((1, 3, 6, 1, 4, 1, 244, 1, 1, 4, 5, 2, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(1, 1), ValueRangeConstraint(2, 2), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slcDevUSBCfgStopBits.setStatus('current')
slcDevUSBCfgParity = MibTableColumn((1, 3, 6, 1, 4, 1, 244, 1, 1, 4, 5, 2, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("none", 1), ("odd", 2), ("even", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slcDevUSBCfgParity.setStatus('current')
slcDevUSBCfgFlowControl = MibTableColumn((1, 3, 6, 1, 4, 1, 244, 1, 1, 4, 5, 2, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("none", 1), ("xonxoff", 2), ("rtscts", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slcDevUSBCfgFlowControl.setStatus('current')
slcDevUSBCfgModemState = MibTableColumn((1, 3, 6, 1, 4, 1, 244, 1, 1, 4, 5, 2, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9))).clone(namedValues=NamedValues(("disabled", 1), ("dialout", 2), ("dialin", 3), ("dialback", 4), ("dialondemand", 5), ("dialinAndDialondemand", 6), ("dialinHostList", 7), ("cbcpServer", 8), ("cbcpClient", 9)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slcDevUSBCfgModemState.setStatus('current')
slcDevUSBCfgModemMode = MibTableColumn((1, 3, 6, 1, 4, 1, 244, 1, 1, 4, 5, 2, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("ppp", 1), ("text", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slcDevUSBCfgModemMode.setStatus('current')
slcDevUSBCfgLocalIP = MibTableColumn((1, 3, 6, 1, 4, 1, 244, 1, 1, 4, 5, 2, 1, 12), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slcDevUSBCfgLocalIP.setStatus('current')
slcDevUSBCfgRemoteIP = MibTableColumn((1, 3, 6, 1, 4, 1, 244, 1, 1, 4, 5, 2, 1, 13), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slcDevUSBCfgRemoteIP.setStatus('current')
slcDevUSBCfgAuth = MibTableColumn((1, 3, 6, 1, 4, 1, 244, 1, 1, 4, 5, 2, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("pap", 1), ("chap", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slcDevUSBCfgAuth.setStatus('current')
slcDevUSBCfgCHAPHost = MibTableColumn((1, 3, 6, 1, 4, 1, 244, 1, 1, 4, 5, 2, 1, 15), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slcDevUSBCfgCHAPHost.setStatus('current')
slcDevUSBCfgDODAuth = MibTableColumn((1, 3, 6, 1, 4, 1, 244, 1, 1, 4, 5, 2, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("pap", 1), ("chap", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slcDevUSBCfgDODAuth.setStatus('current')
slcDevUSBCfgDODCHAPHost = MibTableColumn((1, 3, 6, 1, 4, 1, 244, 1, 1, 4, 5, 2, 1, 17), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slcDevUSBCfgDODCHAPHost.setStatus('current')
slcDevUSBCfgInitScript = MibTableColumn((1, 3, 6, 1, 4, 1, 244, 1, 1, 4, 5, 2, 1, 18), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slcDevUSBCfgInitScript.setStatus('current')
slcDevUSBCfgTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 244, 1, 1, 4, 5, 2, 1, 19), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 30))).setUnits('minutes').setMaxAccess("readonly")
if mibBuilder.loadTexts: slcDevUSBCfgTimeout.setStatus('current')
slcDevUSBCfgDialoutNum = MibTableColumn((1, 3, 6, 1, 4, 1, 244, 1, 1, 4, 5, 2, 1, 20), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slcDevUSBCfgDialoutNum.setStatus('current')
slcDevUSBCfgDialoutLogin = MibTableColumn((1, 3, 6, 1, 4, 1, 244, 1, 1, 4, 5, 2, 1, 21), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slcDevUSBCfgDialoutLogin.setStatus('current')
slcDevUSBCfgDialbackMode = MibTableColumn((1, 3, 6, 1, 4, 1, 244, 1, 1, 4, 5, 2, 1, 22), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("usernumber", 1), ("fixed", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slcDevUSBCfgDialbackMode.setStatus('current')
slcDevUSBCfgDialbackNum = MibTableColumn((1, 3, 6, 1, 4, 1, 244, 1, 1, 4, 5, 2, 1, 23), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slcDevUSBCfgDialbackNum.setStatus('current')
slcDevUSBCfgDialbackDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 244, 1, 1, 4, 5, 2, 1, 24), Integer32()).setUnits('seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: slcDevUSBCfgDialbackDelay.setStatus('current')
slcDevUSBCfgNATState = MibTableColumn((1, 3, 6, 1, 4, 1, 244, 1, 1, 4, 5, 2, 1, 25), EnabledState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slcDevUSBCfgNATState.setStatus('current')
slcDevUSBCfgIdleTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 244, 1, 1, 4, 5, 2, 1, 26), Integer32()).setUnits('seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: slcDevUSBCfgIdleTimeout.setStatus('current')
slcDevUSBCfgRestartDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 244, 1, 1, 4, 5, 2, 1, 27), Integer32()).setUnits('seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: slcDevUSBCfgRestartDelay.setStatus('current')
slcDevUSBCfgCallerIdLogging = MibTableColumn((1, 3, 6, 1, 4, 1, 244, 1, 1, 4, 5, 2, 1, 28), EnabledState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slcDevUSBCfgCallerIdLogging.setStatus('current')
slcDevUSBCfgCallerIdATCmd = MibTableColumn((1, 3, 6, 1, 4, 1, 244, 1, 1, 4, 5, 2, 1, 29), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slcDevUSBCfgCallerIdATCmd.setStatus('current')
slcDevUSBCfgHostList = MibTableColumn((1, 3, 6, 1, 4, 1, 244, 1, 1, 4, 5, 2, 1, 30), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slcDevUSBCfgHostList.setStatus('current')
slcDevUSBCfgCBCPClientType = MibTableColumn((1, 3, 6, 1, 4, 1, 244, 1, 1, 4, 5, 2, 1, 31), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("adminDefined", 1), ("userDefined", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slcDevUSBCfgCBCPClientType.setStatus('current')
slcDevUSBCfgCBCPServerAllowNoCallback = MibTableColumn((1, 3, 6, 1, 4, 1, 244, 1, 1, 4, 5, 2, 1, 32), EnabledState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slcDevUSBCfgCBCPServerAllowNoCallback.setStatus('current')
slcDevUSBCfgTelnetState = MibTableColumn((1, 3, 6, 1, 4, 1, 244, 1, 1, 4, 5, 2, 1, 33), EnabledState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slcDevUSBCfgTelnetState.setStatus('current')
slcDevUSBCfgTelnetPort = MibTableColumn((1, 3, 6, 1, 4, 1, 244, 1, 1, 4, 5, 2, 1, 34), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1025, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slcDevUSBCfgTelnetPort.setStatus('current')
slcDevUSBCfgTelnetAuth = MibTableColumn((1, 3, 6, 1, 4, 1, 244, 1, 1, 4, 5, 2, 1, 35), EnabledState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slcDevUSBCfgTelnetAuth.setStatus('current')
slcDevUSBCfgSSHState = MibTableColumn((1, 3, 6, 1, 4, 1, 244, 1, 1, 4, 5, 2, 1, 36), EnabledState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slcDevUSBCfgSSHState.setStatus('current')
slcDevUSBCfgSSHPort = MibTableColumn((1, 3, 6, 1, 4, 1, 244, 1, 1, 4, 5, 2, 1, 37), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1025, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slcDevUSBCfgSSHPort.setStatus('current')
slcDevUSBCfgSSHAuth = MibTableColumn((1, 3, 6, 1, 4, 1, 244, 1, 1, 4, 5, 2, 1, 38), EnabledState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slcDevUSBCfgSSHAuth.setStatus('current')
slcDevUSBCfgTCPState = MibTableColumn((1, 3, 6, 1, 4, 1, 244, 1, 1, 4, 5, 2, 1, 39), EnabledState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slcDevUSBCfgTCPState.setStatus('current')
slcDevUSBCfgTCPPort = MibTableColumn((1, 3, 6, 1, 4, 1, 244, 1, 1, 4, 5, 2, 1, 40), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1025, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slcDevUSBCfgTCPPort.setStatus('current')
slcDevUSBCfgTCPAuth = MibTableColumn((1, 3, 6, 1, 4, 1, 244, 1, 1, 4, 5, 2, 1, 41), EnabledState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slcDevUSBCfgTCPAuth.setStatus('current')
slcDevUSBCfgGSMPIN = MibTableColumn((1, 3, 6, 1, 4, 1, 244, 1, 1, 4, 5, 2, 1, 42), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slcDevUSBCfgGSMPIN.setStatus('current')
slcDevUSBCfgGSMPPPCompression = MibTableColumn((1, 3, 6, 1, 4, 1, 244, 1, 1, 4, 5, 2, 1, 43), EnabledState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slcDevUSBCfgGSMPPPCompression.setStatus('current')
slcDevUSBCfgGSMAutoAcquireDNS = MibTableColumn((1, 3, 6, 1, 4, 1, 244, 1, 1, 4, 5, 2, 1, 44), EnabledState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slcDevUSBCfgGSMAutoAcquireDNS.setStatus('current')
slcDevUSBCfgGSMDialoutMode = MibTableColumn((1, 3, 6, 1, 4, 1, 244, 1, 1, 4, 5, 2, 1, 45), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("gprs", 1), ("gsm", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slcDevUSBCfgGSMDialoutMode.setStatus('current')
slcDevUSBCfgGSMContextID = MibTableColumn((1, 3, 6, 1, 4, 1, 244, 1, 1, 4, 5, 2, 1, 46), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slcDevUSBCfgGSMContextID.setStatus('current')
slcDevUSBCfgGSMBearerService = MibTableColumn((1, 3, 6, 1, 4, 1, 244, 1, 1, 4, 5, 2, 1, 47), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slcDevUSBCfgGSMBearerService.setStatus('current')
slcDevUSBCfgCHAPAuthLocalUsers = MibTableColumn((1, 3, 6, 1, 4, 1, 244, 1, 1, 4, 5, 2, 1, 48), EnabledState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slcDevUSBCfgCHAPAuthLocalUsers.setStatus('current')
slcDevUSBCfgUseSites = MibTableColumn((1, 3, 6, 1, 4, 1, 244, 1, 1, 4, 5, 2, 1, 49), EnabledState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slcDevUSBCfgUseSites.setStatus('current')
slcDevUSBCfgDialbackRetries = MibTableColumn((1, 3, 6, 1, 4, 1, 244, 1, 1, 4, 5, 2, 1, 50), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slcDevUSBCfgDialbackRetries.setStatus('current')
slcDevUSBCfgDialtoneCheck = MibTableColumn((1, 3, 6, 1, 4, 1, 244, 1, 1, 4, 5, 2, 1, 51), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 600))).setUnits('minutes').setMaxAccess("readonly")
if mibBuilder.loadTexts: slcDevUSBCfgDialtoneCheck.setStatus('current')
slcDevUSBCfgGroup = MibTableColumn((1, 3, 6, 1, 4, 1, 244, 1, 1, 4, 5, 2, 1, 52), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slcDevUSBCfgGroup.setStatus('current')
slcDevIntModem = MibIdentifier((1, 3, 6, 1, 4, 1, 244, 1, 1, 4, 6))
slcDevIntModemModemState = MibScalar((1, 3, 6, 1, 4, 1, 244, 1, 1, 4, 6, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("disabled", 1), ("dialout", 2), ("dialin", 3), ("dialback", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slcDevIntModemModemState.setStatus('current')
slcDevIntModemModemMode = MibScalar((1, 3, 6, 1, 4, 1, 244, 1, 1, 4, 6, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("ppp", 1), ("text", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slcDevIntModemModemMode.setStatus('current')
slcDevIntModemLocalIP = MibScalar((1, 3, 6, 1, 4, 1, 244, 1, 1, 4, 6, 3), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slcDevIntModemLocalIP.setStatus('current')
slcDevIntModemRemoteIP = MibScalar((1, 3, 6, 1, 4, 1, 244, 1, 1, 4, 6, 4), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slcDevIntModemRemoteIP.setStatus('current')
slcDevIntModemAuth = MibScalar((1, 3, 6, 1, 4, 1, 244, 1, 1, 4, 6, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("pap", 1), ("chap", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slcDevIntModemAuth.setStatus('current')
slcDevIntModemCHAPHost = MibScalar((1, 3, 6, 1, 4, 1, 244, 1, 1, 4, 6, 6), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slcDevIntModemCHAPHost.setStatus('current')
slcDevIntModemInitScript = MibScalar((1, 3, 6, 1, 4, 1, 244, 1, 1, 4, 6, 7), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slcDevIntModemInitScript.setStatus('current')
slcDevIntModemTimeout = MibScalar((1, 3, 6, 1, 4, 1, 244, 1, 1, 4, 6, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 30))).setUnits('minutes').setMaxAccess("readonly")
if mibBuilder.loadTexts: slcDevIntModemTimeout.setStatus('current')
slcDevIntModemDialoutNum = MibScalar((1, 3, 6, 1, 4, 1, 244, 1, 1, 4, 6, 9), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slcDevIntModemDialoutNum.setStatus('current')
slcDevIntModemDialoutLogin = MibScalar((1, 3, 6, 1, 4, 1, 244, 1, 1, 4, 6, 10), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slcDevIntModemDialoutLogin.setStatus('current')
slcDevIntModemDialbackMode = MibScalar((1, 3, 6, 1, 4, 1, 244, 1, 1, 4, 6, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("usernumber", 1), ("fixed", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slcDevIntModemDialbackMode.setStatus('current')
slcDevIntModemDialbackNum = MibScalar((1, 3, 6, 1, 4, 1, 244, 1, 1, 4, 6, 12), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slcDevIntModemDialbackNum.setStatus('current')
slcDevIntModemDialbackRetries = MibScalar((1, 3, 6, 1, 4, 1, 244, 1, 1, 4, 6, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slcDevIntModemDialbackRetries.setStatus('current')
slcDevIntModemDialbackDelay = MibScalar((1, 3, 6, 1, 4, 1, 244, 1, 1, 4, 6, 14), Integer32()).setUnits('seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: slcDevIntModemDialbackDelay.setStatus('current')
slcDevIntModemCallerIdLogging = MibScalar((1, 3, 6, 1, 4, 1, 244, 1, 1, 4, 6, 15), EnabledState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slcDevIntModemCallerIdLogging.setStatus('current')
slcDevIntModemCallerIdATCmd = MibScalar((1, 3, 6, 1, 4, 1, 244, 1, 1, 4, 6, 16), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slcDevIntModemCallerIdATCmd.setStatus('current')
slcDevIntModemUseSites = MibScalar((1, 3, 6, 1, 4, 1, 244, 1, 1, 4, 6, 17), EnabledState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slcDevIntModemUseSites.setStatus('current')
slcDevIntModemGroup = MibScalar((1, 3, 6, 1, 4, 1, 244, 1, 1, 4, 6, 18), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slcDevIntModemGroup.setStatus('current')
slcDevIntModemIdleTimeout = MibScalar((1, 3, 6, 1, 4, 1, 244, 1, 1, 4, 6, 19), Integer32()).setUnits('seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: slcDevIntModemIdleTimeout.setStatus('current')
slcDevIntModemRestartDelay = MibScalar((1, 3, 6, 1, 4, 1, 244, 1, 1, 4, 6, 20), Integer32()).setUnits('seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: slcDevIntModemRestartDelay.setStatus('current')
slcDevIntModemNATState = MibScalar((1, 3, 6, 1, 4, 1, 244, 1, 1, 4, 6, 21), EnabledState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slcDevIntModemNATState.setStatus('current')
slcDevIntModemDialtoneCheck = MibScalar((1, 3, 6, 1, 4, 1, 244, 1, 1, 4, 6, 22), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 600))).setUnits('minutes').setMaxAccess("readonly")
if mibBuilder.loadTexts: slcDevIntModemDialtoneCheck.setStatus('current')
slcDevRPM = MibIdentifier((1, 3, 6, 1, 4, 1, 244, 1, 1, 4, 7))
slcDevRPMCfgTable = MibTable((1, 3, 6, 1, 4, 1, 244, 1, 1, 4, 7, 1), )
if mibBuilder.loadTexts: slcDevRPMCfgTable.setStatus('current')
slcDevRPMCfgEntry = MibTableRow((1, 3, 6, 1, 4, 1, 244, 1, 1, 4, 7, 1, 1), ).setIndexNames((0, "LANTRONIX-SLC-MIB", "slcDevRPMId"))
if mibBuilder.loadTexts: slcDevRPMCfgEntry.setStatus('current')
slcDevRPMId = MibTableColumn((1, 3, 6, 1, 4, 1, 244, 1, 1, 4, 7, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slcDevRPMId.setStatus('current')
slcDevRPMName = MibTableColumn((1, 3, 6, 1, 4, 1, 244, 1, 1, 4, 7, 1, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 20))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slcDevRPMName.setStatus('current')
slcDevRPMVendorModel = MibTableColumn((1, 3, 6, 1, 4, 1, 244, 1, 1, 4, 7, 1, 1, 3), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slcDevRPMVendorModel.setStatus('current')
slcDevRPMManagedVia = MibTableColumn((1, 3, 6, 1, 4, 1, 244, 1, 1, 4, 7, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("serial", 1), ("network", 2), ("snmp", 3), ("usb", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slcDevRPMManagedVia.setStatus('current')
slcDevRPMIPAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 244, 1, 1, 4, 7, 1, 1, 5), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slcDevRPMIPAddress.setStatus('current')
slcDevRPMPort = MibTableColumn((1, 3, 6, 1, 4, 1, 244, 1, 1, 4, 7, 1, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slcDevRPMPort.setStatus('current')
slcDevRPMDriverOpts = MibTableColumn((1, 3, 6, 1, 4, 1, 244, 1, 1, 4, 7, 1, 1, 7), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slcDevRPMDriverOpts.setStatus('current')
slcDevRPMStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 244, 1, 1, 4, 7, 1, 1, 8), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slcDevRPMStatus.setStatus('current')
slcDevRPMFirmwareVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 244, 1, 1, 4, 7, 1, 1, 9), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slcDevRPMFirmwareVersion.setStatus('current')
slcDevRPMSerialNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 244, 1, 1, 4, 7, 1, 1, 10), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slcDevRPMSerialNumber.setStatus('current')
slcDevRPMMACAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 244, 1, 1, 4, 7, 1, 1, 11), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slcDevRPMMACAddress.setStatus('current')
slcDevRPMNumOutlets = MibTableColumn((1, 3, 6, 1, 4, 1, 244, 1, 1, 4, 7, 1, 1, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 120))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slcDevRPMNumOutlets.setStatus('current')
slcDevRPMOutletsOn = MibTableColumn((1, 3, 6, 1, 4, 1, 244, 1, 1, 4, 7, 1, 1, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 120))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slcDevRPMOutletsOn.setStatus('current')
slcDevRPMSNMPReadComm = MibTableColumn((1, 3, 6, 1, 4, 1, 244, 1, 1, 4, 7, 1, 1, 14), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 20))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slcDevRPMSNMPReadComm.setStatus('current')
slcDevRPMAdminLogin = MibTableColumn((1, 3, 6, 1, 4, 1, 244, 1, 1, 4, 7, 1, 1, 15), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 20))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slcDevRPMAdminLogin.setStatus('current')
slcDevRPMLogStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 244, 1, 1, 4, 7, 1, 1, 16), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 60))).setUnits('minutes').setMaxAccess("readonly")
if mibBuilder.loadTexts: slcDevRPMLogStatus.setStatus('current')
slcDevRPMCriticalSNMPTraps = MibTableColumn((1, 3, 6, 1, 4, 1, 244, 1, 1, 4, 7, 1, 1, 17), EnabledState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slcDevRPMCriticalSNMPTraps.setStatus('current')
slcDevRPMCriticalEmails = MibTableColumn((1, 3, 6, 1, 4, 1, 244, 1, 1, 4, 7, 1, 1, 18), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slcDevRPMCriticalEmails.setStatus('current')
slcDevRPMProvidesSLCPower = MibTableColumn((1, 3, 6, 1, 4, 1, 244, 1, 1, 4, 7, 1, 1, 19), EnabledState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slcDevRPMProvidesSLCPower.setStatus('current')
slcDevRPMOnLowBattery = MibTableColumn((1, 3, 6, 1, 4, 1, 244, 1, 1, 4, 7, 1, 1, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("shutdownThisUPS", 1), ("shutdownAllUPS", 2), ("allowBatteryToFail", 3), ("shutdownSLCUPS", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slcDevRPMOnLowBattery.setStatus('current')
slcDevRPMShutdownOrder = MibTableColumn((1, 3, 6, 1, 4, 1, 244, 1, 1, 4, 7, 1, 1, 21), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 50))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slcDevRPMShutdownOrder.setStatus('current')
slcDevRPMLoad = MibTableColumn((1, 3, 6, 1, 4, 1, 244, 1, 1, 4, 7, 1, 1, 22), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 1000))).setUnits('tenths of a percent').setMaxAccess("readonly")
if mibBuilder.loadTexts: slcDevRPMLoad.setStatus('current')
slcDevRPMLoadOverThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 244, 1, 1, 4, 7, 1, 1, 23), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 1000))).setUnits('tenths of a percent').setMaxAccess("readonly")
if mibBuilder.loadTexts: slcDevRPMLoadOverThreshold.setStatus('current')
slcDevRPMBatteryCharge = MibTableColumn((1, 3, 6, 1, 4, 1, 244, 1, 1, 4, 7, 1, 1, 24), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 1000))).setUnits('tenths of a percent').setMaxAccess("readonly")
if mibBuilder.loadTexts: slcDevRPMBatteryCharge.setStatus('current')
slcDevRPMBatteryRuntime = MibTableColumn((1, 3, 6, 1, 4, 1, 244, 1, 1, 4, 7, 1, 1, 25), TimeTicks()).setUnits('hundredths of seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: slcDevRPMBatteryRuntime.setStatus('current')
slcDevRPMBeeperStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 244, 1, 1, 4, 7, 1, 1, 26), EnabledState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slcDevRPMBeeperStatus.setStatus('current')
slcDevRPMTemperature = MibTableColumn((1, 3, 6, 1, 4, 1, 244, 1, 1, 4, 7, 1, 1, 27), Integer32()).setUnits('Celsius').setMaxAccess("readonly")
if mibBuilder.loadTexts: slcDevRPMTemperature.setStatus('current')
slcDevRPMUptime = MibTableColumn((1, 3, 6, 1, 4, 1, 244, 1, 1, 4, 7, 1, 1, 28), TimeTicks()).setUnits('hundredths of seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: slcDevRPMUptime.setStatus('current')
slcDevRPMStatusTable = MibTable((1, 3, 6, 1, 4, 1, 244, 1, 1, 4, 7, 2), )
if mibBuilder.loadTexts: slcDevRPMStatusTable.setStatus('current')
slcDevRPMStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 244, 1, 1, 4, 7, 2, 1), ).setIndexNames((0, "LANTRONIX-SLC-MIB", "slcDevRPMId"), (0, "LANTRONIX-SLC-MIB", "RPMTowerIndex"))
if mibBuilder.loadTexts: slcDevRPMStatusEntry.setStatus('current')
slcDevRPMCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 244, 1, 1, 4, 7, 2, 1, 1), Integer32()).setUnits('tenths of Amps').setMaxAccess("readonly")
if mibBuilder.loadTexts: slcDevRPMCurrent.setStatus('current')
slcDevRPMInputVoltage = MibTableColumn((1, 3, 6, 1, 4, 1, 244, 1, 1, 4, 7, 2, 1, 2), Integer32()).setUnits('tenths of Volts').setMaxAccess("readonly")
if mibBuilder.loadTexts: slcDevRPMInputVoltage.setStatus('current')
slcDevRPMApparentPower = MibTableColumn((1, 3, 6, 1, 4, 1, 244, 1, 1, 4, 7, 2, 1, 3), Integer32()).setUnits('tenths of Volt-Amps').setMaxAccess("readonly")
if mibBuilder.loadTexts: slcDevRPMApparentPower.setStatus('current')
slcDevRPMNominalApparentPower = MibTableColumn((1, 3, 6, 1, 4, 1, 244, 1, 1, 4, 7, 2, 1, 4), Integer32()).setUnits('tenths of Volt-Amps').setMaxAccess("readonly")
if mibBuilder.loadTexts: slcDevRPMNominalApparentPower.setStatus('current')
slcDevRPMRealPower = MibTableColumn((1, 3, 6, 1, 4, 1, 244, 1, 1, 4, 7, 2, 1, 5), Integer32()).setUnits('tenths of Watts').setMaxAccess("readonly")
if mibBuilder.loadTexts: slcDevRPMRealPower.setStatus('current')
slcDevRPMNominalRealPower = MibTableColumn((1, 3, 6, 1, 4, 1, 244, 1, 1, 4, 7, 2, 1, 6), Integer32()).setUnits('tenths of Watts').setMaxAccess("readonly")
if mibBuilder.loadTexts: slcDevRPMNominalRealPower.setStatus('current')
slcDevRPMOutletTable = MibTable((1, 3, 6, 1, 4, 1, 244, 1, 1, 4, 7, 3), )
if mibBuilder.loadTexts: slcDevRPMOutletTable.setStatus('current')
slcDevRPMOutletEntry = MibTableRow((1, 3, 6, 1, 4, 1, 244, 1, 1, 4, 7, 3, 1), ).setIndexNames((0, "LANTRONIX-SLC-MIB", "slcDevRPMId"), (0, "LANTRONIX-SLC-MIB", "RPMOutletIndex"))
if mibBuilder.loadTexts: slcDevRPMOutletEntry.setStatus('current')
slcDevRPMOutletName = MibTableColumn((1, 3, 6, 1, 4, 1, 244, 1, 1, 4, 7, 3, 1, 1), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slcDevRPMOutletName.setStatus('current')
slcDevRPMOutletState = MibTableColumn((1, 3, 6, 1, 4, 1, 244, 1, 1, 4, 7, 3, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("unknown", 1), ("off", 2), ("on", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slcDevRPMOutletState.setStatus('current')
slcDevRPMOutletCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 244, 1, 1, 4, 7, 3, 1, 3), Integer32()).setUnits('tenths of Amps').setMaxAccess("readonly")
if mibBuilder.loadTexts: slcDevRPMOutletCurrent.setStatus('current')
slcDevRPMOutletAction = MibTableColumn((1, 3, 6, 1, 4, 1, 244, 1, 1, 4, 7, 3, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("noAction", 1), ("turnOff", 2), ("turnOn", 3), ("cyclePower", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: slcDevRPMOutletAction.setStatus('current')
slcConnNumber = MibScalar((1, 3, 6, 1, 4, 1, 244, 1, 1, 5, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slcConnNumber.setStatus('current')
slcConnTable = MibTable((1, 3, 6, 1, 4, 1, 244, 1, 1, 5, 2), )
if mibBuilder.loadTexts: slcConnTable.setStatus('current')
slcConnEntry = MibTableRow((1, 3, 6, 1, 4, 1, 244, 1, 1, 5, 2, 1), ).setIndexNames((0, "LANTRONIX-SLC-MIB", "slcConnIndex"))
if mibBuilder.loadTexts: slcConnEntry.setStatus('current')
slcConnIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 244, 1, 1, 5, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 512))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slcConnIndex.setStatus('current')
slcConnEndPt1 = MibTableColumn((1, 3, 6, 1, 4, 1, 244, 1, 1, 5, 2, 1, 2), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slcConnEndPt1.setStatus('current')
slcConnEndPt2 = MibTableColumn((1, 3, 6, 1, 4, 1, 244, 1, 1, 5, 2, 1, 3), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slcConnEndPt2.setStatus('current')
slcConnFlow = MibTableColumn((1, 3, 6, 1, 4, 1, 244, 1, 1, 5, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("bidirectional", 1), ("endpt1toendpt2", 2), ("endpt2toendpt1", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slcConnFlow.setStatus('current')
slcConnUser = MibTableColumn((1, 3, 6, 1, 4, 1, 244, 1, 1, 5, 2, 1, 5), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slcConnUser.setStatus('current')
slcConnDuration = MibTableColumn((1, 3, 6, 1, 4, 1, 244, 1, 1, 5, 2, 1, 6), Integer32()).setUnits('seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: slcConnDuration.setStatus('current')
slcConnDurationStr = MibTableColumn((1, 3, 6, 1, 4, 1, 244, 1, 1, 5, 2, 1, 7), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slcConnDurationStr.setStatus('current')
slcConnIdle = MibTableColumn((1, 3, 6, 1, 4, 1, 244, 1, 1, 5, 2, 1, 8), Integer32()).setUnits('seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: slcConnIdle.setStatus('current')
slcConnIdleStr = MibTableColumn((1, 3, 6, 1, 4, 1, 244, 1, 1, 5, 2, 1, 9), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slcConnIdleStr.setStatus('current')
slcConnSourceIP = MibTableColumn((1, 3, 6, 1, 4, 1, 244, 1, 1, 5, 2, 1, 10), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slcConnSourceIP.setStatus('current')
slcSystemModel = MibScalar((1, 3, 6, 1, 4, 1, 244, 1, 1, 6, 1), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slcSystemModel.setStatus('current')
slcSystemSerialNo = MibScalar((1, 3, 6, 1, 4, 1, 244, 1, 1, 6, 2), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slcSystemSerialNo.setStatus('current')
slcSystemFWRev = MibScalar((1, 3, 6, 1, 4, 1, 244, 1, 1, 6, 3), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slcSystemFWRev.setStatus('current')
slcSystemLoadVia = MibScalar((1, 3, 6, 1, 4, 1, 244, 1, 1, 6, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("ftp", 1), ("tftp", 2), ("sftp", 3), ("slm", 4), ("https", 5), ("nfs", 6), ("pccard", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slcSystemLoadVia.setStatus('current')
slcSystemFTPServer = MibScalar((1, 3, 6, 1, 4, 1, 244, 1, 1, 6, 5), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slcSystemFTPServer.setStatus('current')
slcSystemFTPPath = MibScalar((1, 3, 6, 1, 4, 1, 244, 1, 1, 6, 6), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slcSystemFTPPath.setStatus('current')
slcSystemKeypadLock = MibScalar((1, 3, 6, 1, 4, 1, 244, 1, 1, 6, 7), EnabledState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slcSystemKeypadLock.setStatus('current')
slcSystemTimeZone = MibScalar((1, 3, 6, 1, 4, 1, 244, 1, 1, 6, 8), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slcSystemTimeZone.setStatus('current')
slcSystemWelcomeBanner = MibScalar((1, 3, 6, 1, 4, 1, 244, 1, 1, 6, 9), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slcSystemWelcomeBanner.setStatus('current')
slcSystemLoginBanner = MibScalar((1, 3, 6, 1, 4, 1, 244, 1, 1, 6, 10), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slcSystemLoginBanner.setStatus('current')
slcSystemLogoutBanner = MibScalar((1, 3, 6, 1, 4, 1, 244, 1, 1, 6, 11), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slcSystemLogoutBanner.setStatus('current')
slcSystemWebTimeout = MibScalar((1, 3, 6, 1, 4, 1, 244, 1, 1, 6, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(5, 120), ))).setUnits('minutes').setMaxAccess("readonly")
if mibBuilder.loadTexts: slcSystemWebTimeout.setStatus('current')
slcSystemWebGadget = MibScalar((1, 3, 6, 1, 4, 1, 244, 1, 1, 6, 13), EnabledState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slcSystemWebGadget.setStatus('current')
slcSystemAction = MibScalar((1, 3, 6, 1, 4, 1, 244, 1, 1, 6, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("noAction", 1), ("rebootSLC", 2), ("shutdownSLC", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: slcSystemAction.setStatus('current')
slcSystemSSHPreAuthBanner = MibScalar((1, 3, 6, 1, 4, 1, 244, 1, 1, 6, 15), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slcSystemSSHPreAuthBanner.setStatus('current')
slcSystemSiteRackRow = MibScalar((1, 3, 6, 1, 4, 1, 244, 1, 1, 6, 16), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 999))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slcSystemSiteRackRow.setStatus('current')
slcSystemSiteRackCluster = MibScalar((1, 3, 6, 1, 4, 1, 244, 1, 1, 6, 17), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 999))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slcSystemSiteRackCluster.setStatus('current')
slcSystemSiteRack = MibScalar((1, 3, 6, 1, 4, 1, 244, 1, 1, 6, 18), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 999))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slcSystemSiteRack.setStatus('current')
slcSystemLCDScreens = MibScalar((1, 3, 6, 1, 4, 1, 244, 1, 1, 6, 19), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slcSystemLCDScreens.setStatus('current')
slcSystemLCDUserStrLine1 = MibScalar((1, 3, 6, 1, 4, 1, 244, 1, 1, 6, 20), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slcSystemLCDUserStrLine1.setStatus('current')
slcSystemLCDUserStrLine2 = MibScalar((1, 3, 6, 1, 4, 1, 244, 1, 1, 6, 21), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slcSystemLCDUserStrLine2.setStatus('current')
slcSystemLCDScrolling = MibScalar((1, 3, 6, 1, 4, 1, 244, 1, 1, 6, 22), EnabledState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slcSystemLCDScrolling.setStatus('current')
slcSystemLCDScrollDelay = MibScalar((1, 3, 6, 1, 4, 1, 244, 1, 1, 6, 23), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 60))).setUnits('seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: slcSystemLCDScrollDelay.setStatus('current')
slcSystemLCDIdleDelay = MibScalar((1, 3, 6, 1, 4, 1, 244, 1, 1, 6, 24), Integer32().subtype(subtypeSpec=ValueRangeConstraint(5, 60))).setUnits('seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: slcSystemLCDIdleDelay.setStatus('current')
slcSystemInternalTemp = MibScalar((1, 3, 6, 1, 4, 1, 244, 1, 1, 6, 25), Integer32()).setUnits('Celsius').setMaxAccess("readonly")
if mibBuilder.loadTexts: slcSystemInternalTemp.setStatus('current')
slcSystemWebProtocol = MibScalar((1, 3, 6, 1, 4, 1, 244, 1, 1, 6, 26), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("tlsv1SSLv3", 1), ("tlsv1SSLv3SSLv2", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slcSystemWebProtocol.setStatus('current')
slcSystemWebCipher = MibScalar((1, 3, 6, 1, 4, 1, 244, 1, 1, 6, 27), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("highMedium", 1), ("highMediumLow", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slcSystemWebCipher.setStatus('current')
slcSystemModelString = MibScalar((1, 3, 6, 1, 4, 1, 244, 1, 1, 6, 28), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slcSystemModelString.setStatus('current')
slcSystemWebGroup = MibScalar((1, 3, 6, 1, 4, 1, 244, 1, 1, 6, 29), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slcSystemWebGroup.setStatus('current')
slcSystemWebInterface = MibScalar((1, 3, 6, 1, 4, 1, 244, 1, 1, 6, 30), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slcSystemWebInterface.setStatus('current')
slcSystemWebBanner = MibScalar((1, 3, 6, 1, 4, 1, 244, 1, 1, 6, 31), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slcSystemWebBanner.setStatus('current')
slcSystemInternalTempLow = MibScalar((1, 3, 6, 1, 4, 1, 244, 1, 1, 6, 32), Integer32()).setUnits('Celsius').setMaxAccess("readonly")
if mibBuilder.loadTexts: slcSystemInternalTempLow.setStatus('current')
slcSystemInternalTempHigh = MibScalar((1, 3, 6, 1, 4, 1, 244, 1, 1, 6, 33), Integer32()).setUnits('Celsius').setMaxAccess("readonly")
if mibBuilder.loadTexts: slcSystemInternalTempHigh.setStatus('current')
slcSystemCalibrateTemp = MibScalar((1, 3, 6, 1, 4, 1, 244, 1, 1, 6, 34), Integer32()).setUnits('Celsius').setMaxAccess("readonly")
if mibBuilder.loadTexts: slcSystemCalibrateTemp.setStatus('current')
slcSystemWebServer = MibScalar((1, 3, 6, 1, 4, 1, 244, 1, 1, 6, 35), EnabledState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slcSystemWebServer.setStatus('current')
slcEvents = MibIdentifier((1, 3, 6, 1, 4, 1, 244, 1, 1, 0))
slcEventObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 244, 1, 1, 7))
slcPowerSupplyId = MibScalar((1, 3, 6, 1, 4, 1, 244, 1, 1, 7, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("powerSupplyA", 1), ("powerSupplyB", 2), ("primaryInlet", 3), ("secondaryInlet", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slcPowerSupplyId.setStatus('current')
slcPowerSupplyAction = MibScalar((1, 3, 6, 1, 4, 1, 244, 1, 1, 7, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("powerSupplyFailed", 1), ("powerSupplyRestored", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slcPowerSupplyAction.setStatus('current')
slcDevPortNumBytes = MibScalar((1, 3, 6, 1, 4, 1, 244, 1, 1, 7, 3), Integer32()).setUnits('bytes').setMaxAccess("readonly")
if mibBuilder.loadTexts: slcDevPortNumBytes.setStatus('current')
slcDevPortData = MibScalar((1, 3, 6, 1, 4, 1, 244, 1, 1, 7, 4), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slcDevPortData.setStatus('current')
slcDevPortStartByte = MibScalar((1, 3, 6, 1, 4, 1, 244, 1, 1, 7, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slcDevPortStartByte.setStatus('current')
slcDevPortTimeFrame = MibScalar((1, 3, 6, 1, 4, 1, 244, 1, 1, 7, 6), Integer32()).setUnits('seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: slcDevPortTimeFrame.setStatus('current')
slcDevPortDeviceErrorStatus = MibScalar((1, 3, 6, 1, 4, 1, 244, 1, 1, 7, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("lowPower", 1), ("damageOrTamper", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slcDevPortDeviceErrorStatus.setStatus('current')
slcHostname = MibScalar((1, 3, 6, 1, 4, 1, 244, 1, 1, 7, 8), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slcHostname.setStatus('current')
slcPCCardSlot = MibScalar((1, 3, 6, 1, 4, 1, 244, 1, 1, 7, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("upperSlot", 1), ("lowerSlot", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slcPCCardSlot.setStatus('current')
slcPCCardAction = MibScalar((1, 3, 6, 1, 4, 1, 244, 1, 1, 7, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("cardInserted", 1), ("cardRemoved", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slcPCCardAction.setStatus('current')
slcPCCardType = MibScalar((1, 3, 6, 1, 4, 1, 244, 1, 1, 7, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("none", 1), ("storage", 2), ("modem", 3), ("isdn", 4), ("wireless", 5), ("gsmmodem", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slcPCCardType.setStatus('current')
slcUSBAction = MibScalar((1, 3, 6, 1, 4, 1, 244, 1, 1, 7, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("deviceInserted", 1), ("deviceRemoved", 2), ("noModemDialTone", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slcUSBAction.setStatus('current')
slcUSBType = MibScalar((1, 3, 6, 1, 4, 1, 244, 1, 1, 7, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("none", 1), ("storage", 2), ("modem", 3), ("isdn", 4), ("wireless", 5), ("gsmmodem", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slcUSBType.setStatus('current')
slcDevPortErrorStatus = MibScalar((1, 3, 6, 1, 4, 1, 244, 1, 1, 7, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("dataDrop", 1), ("invalidIOConfiguration", 2), ("errorIOModules", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slcDevPortErrorStatus.setStatus('current')
slcSDCardAction = MibScalar((1, 3, 6, 1, 4, 1, 244, 1, 1, 7, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("deviceInserted", 1), ("deviceRemoved", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slcSDCardAction.setStatus('current')
slcRPMAction = MibScalar((1, 3, 6, 1, 4, 1, 244, 1, 1, 7, 16), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slcRPMAction.setStatus('current')
slcEventHost = MibScalar((1, 3, 6, 1, 4, 1, 244, 1, 1, 7, 17), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slcEventHost.setStatus('current')
slcEventPowerSupply = NotificationType((1, 3, 6, 1, 4, 1, 244, 1, 1, 0, 1)).setObjects(("LANTRONIX-SLC-MIB", "slcPowerSupplyId"), ("LANTRONIX-SLC-MIB", "slcPowerSupplyAction"))
if mibBuilder.loadTexts: slcEventPowerSupply.setStatus('current')
slcEventSysadminPassword = NotificationType((1, 3, 6, 1, 4, 1, 244, 1, 1, 0, 2))
if mibBuilder.loadTexts: slcEventSysadminPassword.setStatus('current')
slcEventSLCShutdown = NotificationType((1, 3, 6, 1, 4, 1, 244, 1, 1, 0, 3))
if mibBuilder.loadTexts: slcEventSLCShutdown.setStatus('current')
slcEventDevicePortData = NotificationType((1, 3, 6, 1, 4, 1, 244, 1, 1, 0, 4)).setObjects(("LANTRONIX-SLC-MIB", "slcDevPortId"), ("LANTRONIX-SLC-MIB", "slcDevPortNumBytes"), ("LANTRONIX-SLC-MIB", "slcDevPortData"), ("LANTRONIX-SLC-MIB", "slcDevPortCfgEmailTextString"), ("LANTRONIX-SLC-MIB", "slcHostname"))
if mibBuilder.loadTexts: slcEventDevicePortData.setStatus('current')
slcEventDevicePortSLMData = NotificationType((1, 3, 6, 1, 4, 1, 244, 1, 1, 0, 5)).setObjects(("LANTRONIX-SLC-MIB", "slcDevPortId"), ("LANTRONIX-SLC-MIB", "slcDevPortNumBytes"), ("LANTRONIX-SLC-MIB", "slcDevPortStartByte"))
if mibBuilder.loadTexts: slcEventDevicePortSLMData.setStatus('current')
slcEventDevicePortSLMConfig = NotificationType((1, 3, 6, 1, 4, 1, 244, 1, 1, 0, 6)).setObjects(("LANTRONIX-SLC-MIB", "slcDevPortId"), ("LANTRONIX-SLC-MIB", "slcDevPortNumBytes"), ("LANTRONIX-SLC-MIB", "slcDevPortTimeFrame"))
if mibBuilder.loadTexts: slcEventDevicePortSLMConfig.setStatus('current')
slcEventDevicePortDeviceLowTemp = NotificationType((1, 3, 6, 1, 4, 1, 244, 1, 1, 0, 7)).setObjects(("LANTRONIX-SLC-MIB", "slcDevPortId"), ("LANTRONIX-SLC-MIB", "slcDevPortCfgDevTemperature"), ("LANTRONIX-SLC-MIB", "slcDevPortCfgDevLowTemp"))
if mibBuilder.loadTexts: slcEventDevicePortDeviceLowTemp.setStatus('current')
slcEventDevicePortDeviceHighTemp = NotificationType((1, 3, 6, 1, 4, 1, 244, 1, 1, 0, 8)).setObjects(("LANTRONIX-SLC-MIB", "slcDevPortId"), ("LANTRONIX-SLC-MIB", "slcDevPortCfgDevTemperature"), ("LANTRONIX-SLC-MIB", "slcDevPortCfgDevHighTemp"))
if mibBuilder.loadTexts: slcEventDevicePortDeviceHighTemp.setStatus('current')
slcEventDevicePortDeviceLowHumidity = NotificationType((1, 3, 6, 1, 4, 1, 244, 1, 1, 0, 9)).setObjects(("LANTRONIX-SLC-MIB", "slcDevPortId"), ("LANTRONIX-SLC-MIB", "slcDevPortCfgDevHumidity"), ("LANTRONIX-SLC-MIB", "slcDevPortCfgDevLowHumidity"))
if mibBuilder.loadTexts: slcEventDevicePortDeviceLowHumidity.setStatus('current')
slcEventDevicePortDeviceHighHumidity = NotificationType((1, 3, 6, 1, 4, 1, 244, 1, 1, 0, 10)).setObjects(("LANTRONIX-SLC-MIB", "slcDevPortId"), ("LANTRONIX-SLC-MIB", "slcDevPortCfgDevHumidity"), ("LANTRONIX-SLC-MIB", "slcDevPortCfgDevHighHumidity"))
if mibBuilder.loadTexts: slcEventDevicePortDeviceHighHumidity.setStatus('current')
slcEventDevicePortDeviceError = NotificationType((1, 3, 6, 1, 4, 1, 244, 1, 1, 0, 11)).setObjects(("LANTRONIX-SLC-MIB", "slcDevPortId"), ("LANTRONIX-SLC-MIB", "slcDevPortDeviceErrorStatus"))
if mibBuilder.loadTexts: slcEventDevicePortDeviceError.setStatus('current')
slcEventPCCardAction = NotificationType((1, 3, 6, 1, 4, 1, 244, 1, 1, 0, 12)).setObjects(("LANTRONIX-SLC-MIB", "slcPCCardSlot"), ("LANTRONIX-SLC-MIB", "slcPCCardAction"), ("LANTRONIX-SLC-MIB", "slcPCCardType"))
if mibBuilder.loadTexts: slcEventPCCardAction.setStatus('current')
slcEventSLCInternalTemp = NotificationType((1, 3, 6, 1, 4, 1, 244, 1, 1, 0, 13)).setObjects(("LANTRONIX-SLC-MIB", "slcSystemInternalTemp"))
if mibBuilder.loadTexts: slcEventSLCInternalTemp.setStatus('current')
slcEventUSBAction = NotificationType((1, 3, 6, 1, 4, 1, 244, 1, 1, 0, 14)).setObjects(("LANTRONIX-SLC-MIB", "slcDevUSBId"), ("LANTRONIX-SLC-MIB", "slcUSBAction"), ("LANTRONIX-SLC-MIB", "slcUSBType"))
if mibBuilder.loadTexts: slcEventUSBAction.setStatus('current')
slcEventDevicePortError = NotificationType((1, 3, 6, 1, 4, 1, 244, 1, 1, 0, 15)).setObjects(("LANTRONIX-SLC-MIB", "slcDevPortId"), ("LANTRONIX-SLC-MIB", "slcDevPortErrorStatus"))
if mibBuilder.loadTexts: slcEventDevicePortError.setStatus('current')
slcEventSDCardAction = NotificationType((1, 3, 6, 1, 4, 1, 244, 1, 1, 0, 16)).setObjects(("LANTRONIX-SLC-MIB", "slcSDCardAction"))
if mibBuilder.loadTexts: slcEventSDCardAction.setStatus('current')
slcEventNoDialToneAlarm = NotificationType((1, 3, 6, 1, 4, 1, 244, 1, 1, 0, 17))
if mibBuilder.loadTexts: slcEventNoDialToneAlarm.setStatus('current')
slcEventRPMAction = NotificationType((1, 3, 6, 1, 4, 1, 244, 1, 1, 0, 18)).setObjects(("LANTRONIX-SLC-MIB", "slcDevRPMName"), ("LANTRONIX-SLC-MIB", "slcRPMAction"))
if mibBuilder.loadTexts: slcEventRPMAction.setStatus('current')
slcEventPingHostFails = NotificationType((1, 3, 6, 1, 4, 1, 244, 1, 1, 0, 19)).setObjects(("LANTRONIX-SLC-MIB", "slcEventHost"))
if mibBuilder.loadTexts: slcEventPingHostFails.setStatus('current')
mibBuilder.exportSymbols("LANTRONIX-SLC-MIB", slcAuthLocalUserUID=slcAuthLocalUserUID, slcAuthRADIUSServerIPv6=slcAuthRADIUSServerIPv6, slcNetEthIfIPv6PrefixLength=slcNetEthIfIPv6PrefixLength, slcServSLCNetIndex=slcServSLCNetIndex, slcServSitePortId=slcServSitePortId, slcServSLCNetIP=slcServSLCNetIP, slcServSiteLoginHost=slcServSiteLoginHost, slcConnDuration=slcConnDuration, slcNetFirewallSMBCIFS=slcNetFirewallSMBCIFS, slcServSSHTimeout=slcServSSHTimeout, slcDevUSBCfgNATState=slcDevUSBCfgNATState, slcDevPortTimeFrame=slcDevPortTimeFrame, slcSystemWebInterface=slcSystemWebInterface, slcEventSLCShutdown=slcEventSLCShutdown, slcDevPortCfgDODAuth=slcDevPortCfgDODAuth, slcNetEthIfTable=slcNetEthIfTable, slcDevRPMOutletEntry=slcDevRPMOutletEntry, slcPCCardCfgSSHAuth=slcPCCardCfgSSHAuth, slcDevRPM=slcDevRPM, slcAuthNISBroadcast=slcAuthNISBroadcast, slcDevPortCfgEmailSend=slcDevPortCfgEmailSend, slcDevUSBCfgHostList=slcDevUSBCfgHostList, slcAuthTACACSRights=slcAuthTACACSRights, slcAuthLocalLockoutPeriod=slcAuthLocalLockoutPeriod, slcServSNMPv3User=slcServSNMPv3User, slcNetEthGateway=slcNetEthGateway, slcSystemLoginBanner=slcSystemLoginBanner, slcConnIdle=slcConnIdle, slcPCCardCfgTelnetState=slcPCCardCfgTelnetState, slcAuthKerbDataPorts=slcAuthKerbDataPorts, slcAuthLDAPEncrypt=slcAuthLDAPEncrypt, slcAuthNISSlave4=slcAuthNISSlave4, slcDevPortCfgEmailState=slcDevPortCfgEmailState, slcDevPortCfgTCPTimeoutDataDirection=slcDevPortCfgTCPTimeoutDataDirection, slcServNFSMountLocalDir=slcServNFSMountLocalDir, slcAuthKerbOrder=slcAuthKerbOrder, slcDevIntModemDialbackNum=slcDevIntModemDialbackNum, slcAuthKerbEscapeSeq=slcAuthKerbEscapeSeq, slcDevRPMBeeperStatus=slcDevRPMBeeperStatus, slcAuthGroupBreakSeq=slcAuthGroupBreakSeq, slcDevPortCfgEmailDelay=slcDevPortCfgEmailDelay, slcNetRouteStaticTable=slcNetRouteStaticTable, slcSystemWebProtocol=slcSystemWebProtocol, slcDevPortCfgWebRows=slcDevPortCfgWebRows, slcSystemSiteRackRow=slcSystemSiteRackRow, slcDevUSBCfgModemMode=slcDevUSBCfgModemMode, slcNetRouteStaticIP=slcNetRouteStaticIP, slcDevPortStateDSR=slcDevPortStateDSR, slcAuthKerbClearPorts=slcAuthKerbClearPorts, slcAuthRADIUSOrder=slcAuthRADIUSOrder, slcEventDevicePortDeviceLowHumidity=slcEventDevicePortDeviceLowHumidity, slcAuthKerbKDC=slcAuthKerbKDC, slcDevPortStateEntry=slcDevPortStateEntry, slcNetFirewallRulesetEntry=slcNetFirewallRulesetEntry, slcServNFS=slcServNFS, slcDevPortStateCD=slcDevPortStateCD, slcServSNMPNMS2IPv6=slcServSNMPNMS2IPv6, slcDevUSBCfgFlowControl=slcDevUSBCfgFlowControl, slcNetVPNModeConfigClient=slcNetVPNModeConfigClient, slcDevPortCfgTelnetState=slcDevPortCfgTelnetState, slcSystemSSHPreAuthBanner=slcSystemSSHPreAuthBanner, slcUSBType=slcUSBType, slcAuthRADIUSServerEntry=slcAuthRADIUSServerEntry, slcAuthRemoteUserRights=slcAuthRemoteUserRights, slcAuthGroupEntry=slcAuthGroupEntry, slcDevPortCfgShowLines=slcDevPortCfgShowLines, slcServNTPState=slcServNTPState, slcPCCardCfgStopBits=slcPCCardCfgStopBits, slcDevUSBCfgInitScript=slcDevUSBCfgInitScript, slcNetFirewallMappingRuleset=slcNetFirewallMappingRuleset, slcPCCardCfgTimeout=slcPCCardCfgTimeout, slcServNFSMountMount=slcServNFSMountMount, slcDevPortCfgDialbackMode=slcDevPortCfgDialbackMode, slcDevUSBCfgCHAPHost=slcDevUSBCfgCHAPHost, slcPCCardCfgDialbackRetries=slcPCCardCfgDialbackRetries, slcAuthLocalUserListenPorts=slcAuthLocalUserListenPorts, slcPCCardCfgCallerIdLogging=slcPCCardCfgCallerIdLogging, slcDevPortCfgIdleTimeoutMessage=slcDevPortCfgIdleTimeoutMessage, slcPCCardCfgISDNChannelNum=slcPCCardCfgISDNChannelNum, slcSystemWebTimeout=slcSystemWebTimeout, slcNetFirewallMappingIfacId=slcNetFirewallMappingIfacId, slcAuthRADIUSBreakSeq=slcAuthRADIUSBreakSeq, slcNetFirewallRulesetRules=slcNetFirewallRulesetRules, slcConnEndPt2=slcConnEndPt2, slcNetVPN=slcNetVPN, slcDevIntModemDialbackRetries=slcDevIntModemDialbackRetries, slcDevPortNumBytes=slcDevPortNumBytes, slcAuthRemote=slcAuthRemote, slcDevUSBCfgModemState=slcDevUSBCfgModemState, slcServHostListHosts=slcServHostListHosts, slcNetVPNRemoteHost=slcNetVPNRemoteHost, slcAuthLocalState=slcAuthLocalState, slcPCCardCfgGSMPIN=slcPCCardCfgGSMPIN, slcAuthKerbUseLDAP=slcAuthKerbUseLDAP, slcAuthRADIUSState=slcAuthRADIUSState, slcPCCardCfgTable=slcPCCardCfgTable, slcPCCardCfgCBCPServerAllowNoCallback=slcPCCardCfgCBCPServerAllowNoCallback, slcAuthLocalUserMenu=slcAuthLocalUserMenu, slcServSSHWebSSH=slcServSSHWebSSH, slcDevPortCfgNFSMaxSize=slcDevPortCfgNFSMaxSize, slcDevRPMAdminLogin=slcDevRPMAdminLogin, slcAuthRADIUSGroup=slcAuthRADIUSGroup, EnabledState=EnabledState, slcNetEthDNS1=slcNetEthDNS1, slcNetRouteStaticNumber=slcNetRouteStaticNumber, slcNetRouteRIPState=slcNetRouteRIPState, slcNetVPNIKEAuthentication=slcNetVPNIKEAuthentication, slcAuthLocalUserLogin=slcAuthLocalUserLogin, slcServSiteDialbackNum=slcServSiteDialbackNum, slcAuthTACACSDataPorts=slcAuthTACACSDataPorts, slcAuthGroupsNumber=slcAuthGroupsNumber, slcDevPortCfgUSBMaxSize=slcDevPortCfgUSBMaxSize, slcDevPortStartByte=slcDevPortStartByte, slcAuthNISListenPorts=slcAuthNISListenPorts, slcAuthKerbKDCIPv6=slcAuthKerbKDCIPv6, slcAuthLocal=slcAuthLocal, slcServSiteLocalIP=slcServSiteLocalIP, slcServSNMPv3Encryption=slcServSNMPv3Encryption, slcDevPortCfgTelnetTimeoutDataDirection=slcDevPortCfgTelnetTimeoutDataDirection, slcAuthRemoteUsersTable=slcAuthRemoteUsersTable, slcDevRPMApparentPower=slcDevRPMApparentPower, slcServSNMPNMSIPv6=slcServSNMPNMSIPv6, slcDevUSBId=slcDevUSBId, slcDevPortCfgSSHPort=slcDevPortCfgSSHPort, slcNetEthKeepaliveNumberOfProbes=slcNetEthKeepaliveNumberOfProbes, slcDevUSBCfgDialbackDelay=slcDevUSBCfgDialbackDelay, slcDevUSBCfgGroup=slcDevUSBCfgGroup, slcDevPortCfgIdleTimeout=slcDevPortCfgIdleTimeout, slcNetVPNESPAuthentication=slcNetVPNESPAuthentication, slcAuthRADIUS=slcAuthRADIUS, slcAuthTACACSServer3=slcAuthTACACSServer3, slcNetEthDNS1IPv6=slcNetEthDNS1IPv6, slcServSNMPReadOnlyCommunity=slcServSNMPReadOnlyCommunity, slcPCCardCfgIdleTimeout=slcPCCardCfgIdleTimeout, slcDevPortCfgSSHState=slcDevPortCfgSSHState, slcNetEthDNS3IPv6=slcNetEthDNS3IPv6, slcServHostListNumHosts=slcServHostListNumHosts, slcDevGlobalClearPorts=slcDevGlobalClearPorts, slcDevPortCfgDialbackDelay=slcDevPortCfgDialbackDelay, slcSystemSerialNo=slcSystemSerialNo, slcServNFSMountRemoteDir=slcServNFSMountRemoteDir, slcDevPortCfgNumber=slcDevPortCfgNumber, slcPCCardSlot=slcPCCardSlot, slcNetEthGatewayPrecedence=slcNetEthGatewayPrecedence, slcDevPortId=slcDevPortId, slcDevPortCfgFlowControl=slcDevPortCfgFlowControl, slcAuthRADIUSRights=slcAuthRADIUSRights, slcAuthGroupEscapeSeq=slcAuthGroupEscapeSeq, slcServNTPServerIPv6=slcServNTPServerIPv6, slcNetFirewallMappingNumber=slcNetFirewallMappingNumber, slcSystemLCDScrollDelay=slcSystemLCDScrollDelay, slcDevUSBCfgGSMBearerService=slcDevUSBCfgGSMBearerService, slcDevPortCfgMaxDirectConnects=slcDevPortCfgMaxDirectConnects, slcDevPortCfgSLMLoggingState=slcDevPortCfgSLMLoggingState, slcDevPortCfgEmailTextString=slcDevPortCfgEmailTextString, slcAuthLDAPDialbackNum=slcAuthLDAPDialbackNum, slcAuthRADIUSServer=slcAuthRADIUSServer, slcNetVPNPerfectForwardSecrecy=slcNetVPNPerfectForwardSecrecy, slcServSLCNetEntry=slcServSLCNetEntry, slcNetEthPingInterface=slcNetEthPingInterface, slcDevUSBCfgCardId=slcDevUSBCfgCardId, slcSystemWebGroup=slcSystemWebGroup, slcNetEthIPForwarding=slcNetEthIPForwarding, slcAuthTACACSDialbackNum=slcAuthTACACSDialbackNum, slcAuthLDAPClearPorts=slcAuthLDAPClearPorts, slcDevRPMMACAddress=slcDevRPMMACAddress, slcDevUSBCfgCallerIdATCmd=slcDevUSBCfgCallerIdATCmd, slcConnIndex=slcConnIndex, slcAuthLDAPServer2IPv6=slcAuthLDAPServer2IPv6, slcDevPortCfgTCPAuth=slcDevPortCfgTCPAuth, slcDevPortCfgEmailTrigger=slcDevPortCfgEmailTrigger, slcNetEth=slcNetEth, slcAuthRADIUSServerIndex=slcAuthRADIUSServerIndex, slcPCCardCfgCallerIdATCmd=slcPCCardCfgCallerIdATCmd, slcServSNMPLocation=slcServSNMPLocation, slcConnIdleStr=slcConnIdleStr, slcDevConFlowControl=slcDevConFlowControl, slcServHostList=slcServHostList, slcServSitePort=slcServSitePort, slcAuthKerbRealm=slcAuthKerbRealm, slcDevPCCard=slcDevPCCard, slcServSysRPMLogSize=slcServSysRPMLogSize, slcPCCardCfgLocalIP=slcPCCardCfgLocalIP, slcDevUSBCfgGSMAutoAcquireDNS=slcDevUSBCfgGSMAutoAcquireDNS, slcEventPowerSupply=slcEventPowerSupply, slcDevRPMOutletsOn=slcDevRPMOutletsOn, slcServHostListTable=slcServHostListTable, slcDevPortCfgWebColumns=slcDevPortCfgWebColumns, slcServCIFSWorkgroup=slcServCIFSWorkgroup, slcDevPortCfgTelnetAuth=slcDevPortCfgTelnetAuth, slcNetEthKeepaliveStartProbes=slcNetEthKeepaliveStartProbes, slcServCIFSEth2=slcServCIFSEth2, slcNetVPNLocalHop=slcNetVPNLocalHop, slcServSysRemoteServer2=slcServSysRemoteServer2, RPMTowerIndex=RPMTowerIndex, slcDevGlobalStartTelnetPort=slcDevGlobalStartTelnetPort, slcDevPortCfgReversePinout=slcDevPortCfgReversePinout, slcDevPortCfgParity=slcDevPortCfgParity, slcEventDevicePortSLMConfig=slcEventDevicePortSLMConfig, slcServSSH=slcServSSH, slcDevRPMBatteryCharge=slcDevRPMBatteryCharge, slcDevPortStateBytesInput=slcDevPortStateBytesInput, slcDevUSB=slcDevUSB, slcNetSecurityFIPSMode=slcNetSecurityFIPSMode, slcDevPortCfgSSHTimeoutDataDirection=slcDevPortCfgSSHTimeoutDataDirection, slcDevRPMId=slcDevRPMId, slcSystemSiteRackCluster=slcSystemSiteRackCluster, slcServHostListAuth=slcServHostListAuth, slcDevPortCfgTable=slcDevPortCfgTable, slcAuthLDAPADSupport=slcAuthLDAPADSupport, slcServSNMPNMS2=slcServSNMPNMS2, slcConnections=slcConnections, slcDevUSBCfgParity=slcDevUSBCfgParity, slcDevGlobalDataPorts=slcDevGlobalDataPorts, slcNetVPNName=slcNetVPNName, slcPCCardCfgCBCPClientType=slcPCCardCfgCBCPClientType, slcServSSHV1Incoming=slcServSSHV1Incoming, slcNetFirewallMappingIndex=slcNetFirewallMappingIndex, slcNetFirewallTelnet=slcNetFirewallTelnet, slcHostname=slcHostname, slcAuthNISSlave3=slcAuthNISSlave3, slcEventDevicePortError=slcEventDevicePortError, slcAuthKerbBreakSeq=slcAuthKerbBreakSeq, slcAuthTACACSEscapeSeq=slcAuthTACACSEscapeSeq, slcNetFirewallRulesetTable=slcNetFirewallRulesetTable, slcPCCardCfgDialbackNum=slcPCCardCfgDialbackNum, slcDevIntModemUseSites=slcDevIntModemUseSites, slcServSysServicesLevel=slcServSysServicesLevel, slcAuthTACACSServer2=slcAuthTACACSServer2, slcSystemLCDUserStrLine2=slcSystemLCDUserStrLine2, slcDevPortCfgNFSMaxFiles=slcDevPortCfgNFSMaxFiles, slcDevPortCfgUSBMaxFiles=slcDevPortCfgUSBMaxFiles, slcDevPortCfgEntry=slcDevPortCfgEntry, slcServTelnetWebTelnet=slcServTelnetWebTelnet, slcDevUSBCfgDataBits=slcDevUSBCfgDataBits, slcDevPortCfgBanner=slcDevPortCfgBanner, slcAuthLocalMaxLoginAttempts=slcAuthLocalMaxLoginAttempts, slcNetVPNAuthentication=slcNetVPNAuthentication, slcDevPortCfgCBCPServerAllowNoCallback=slcDevPortCfgCBCPServerAllowNoCallback, slcAuthLocalMultipleSysadminLogins=slcAuthLocalMultipleSysadminLogins, slcAuthLDAPGroupMembershipDN=slcAuthLDAPGroupMembershipDN, slcPCCardCfgRemoteIP=slcPCCardCfgRemoteIP, slcAuthKerbState=slcAuthKerbState, slcAuth=slcAuth, slcServTelnetState=slcServTelnetState, slcAuthNISClearPorts=slcAuthNISClearPorts, slcDevPortCfgPortLogSeq=slcDevPortCfgPortLogSeq, slcDevIntModemIdleTimeout=slcDevIntModemIdleTimeout, slcAuthNISDomain=slcAuthNISDomain, slcDevIntModemNATState=slcDevIntModemNATState, slcServPhoneHome=slcServPhoneHome, slcDevPortCfgInitScript=slcDevPortCfgInitScript, slcDevUSBCfgStopBits=slcDevUSBCfgStopBits, slcAuthRADIUSDialbackNum=slcAuthRADIUSDialbackNum)
mibBuilder.exportSymbols("LANTRONIX-SLC-MIB", slcDevRPMOutletState=slcDevRPMOutletState, slcDevPortCfgTelnetSoftIAC=slcDevPortCfgTelnetSoftIAC, slcDevUSBCfgStorageFS=slcDevUSBCfgStorageFS, slcDevIntModemDialtoneCheck=slcDevIntModemDialtoneCheck, slcDevRPMIPAddress=slcDevRPMIPAddress, slcAuthLDAPUserFilter=slcAuthLDAPUserFilter, slcSystemInternalTempHigh=slcSystemInternalTempHigh, slcServPhoneHomeState=slcServPhoneHomeState, slcAuthGroupClearPorts=slcAuthGroupClearPorts, slcAuthLocalUserDialback=slcAuthLocalUserDialback, slcAuthRemoteUserIndex=slcAuthRemoteUserIndex, slcPCCardType=slcPCCardType, slcServSNMPReadWriteCommunity=slcServSNMPReadWriteCommunity, slcServNFSMountReadWrite=slcServNFSMountReadWrite, slcServSiteIndex=slcServSiteIndex, slcDevConDataBits=slcDevConDataBits, slcAuthLocalComplexPasswords=slcAuthLocalComplexPasswords, slcConnUser=slcConnUser, slcAuthKerberos=slcAuthKerberos, slcDevPortCfgDialbackRetries=slcDevPortCfgDialbackRetries, slcNetEthDNS2=slcNetEthDNS2, slcPCCardCfgDialbackDelay=slcPCCardCfgDialbackDelay, slcAuthTACACSServer2IPv6=slcAuthTACACSServer2IPv6, slcServSiteDialoutLogin=slcServSiteDialoutLogin, slc=slc, slcDevUSBCfgGSMContextID=slcDevUSBCfgGSMContextID, slcAuthLocalUserIndex=slcAuthLocalUserIndex, slcEventPCCardAction=slcEventPCCardAction, slcDevPortCfgNATState=slcDevPortCfgNATState, slcAuthKerbKDCPort=slcAuthKerbKDCPort, slcServSNMP=slcServSNMP, slcDevPortCfgAction=slcDevPortCfgAction, slcConnEndPt1=slcConnEndPt1, slcDevPortCfgDisconnectDSR=slcDevPortCfgDisconnectDSR, slcDevPortCfgCHAPHost=slcDevPortCfgCHAPHost, slcDevIntModemModemMode=slcDevIntModemModemMode, slcServHostListRetryCount=slcServHostListRetryCount, slcDevIntModemAuth=slcDevIntModemAuth, slcDevPortCfgEmailSubject=slcDevPortCfgEmailSubject, slcDevRPMShutdownOrder=slcDevRPMShutdownOrder, slcSystemWebServer=slcSystemWebServer, slcEventDevicePortSLMData=slcEventDevicePortSLMData, slcServHostListName=slcServHostListName, slcDevGlobalStartTCPPort=slcDevGlobalStartTCPPort, slcDevUSBCfgDialbackMode=slcDevUSBCfgDialbackMode, slcPCCardCfgSSHPort=slcPCCardCfgSSHPort, slcAuthLocalUserGroup=slcAuthLocalUserGroup, slcNetVPNIKENegotiation=slcNetVPNIKENegotiation, slcNetVPNXAUTHClient=slcNetVPNXAUTHClient, slcDevPortCfgUseSites=slcDevPortCfgUseSites, slcNetEthPreferIPv4DNS=slcNetEthPreferIPv4DNS, slcAuthTACACSMenu=slcAuthTACACSMenu, slcPCCardCfgGSMContextID=slcPCCardCfgGSMContextID, slcServSSHState=slcServSSHState, slcSystemWebGadget=slcSystemWebGadget, slcAuthNISMenu=slcAuthNISMenu, slcServSysRemoteServer=slcServSysRemoteServer, slcDevConTimeout=slcDevConTimeout, slcPCCardCfgGSMPPPCompression=slcPCCardCfgGSMPPPCompression, slcSystemModel=slcSystemModel, slcDevPortCfgDevLowHumidity=slcDevPortCfgDevLowHumidity, slcDevPortCfgLogins=slcDevPortCfgLogins, slcNetEthBonding=slcNetEthBonding, slcServHostListNumber=slcServHostListNumber, slcDevRPMRealPower=slcDevRPMRealPower, slcDevPortCfgEmailRestartDelay=slcDevPortCfgEmailRestartDelay, slcNetEthIPv6=slcNetEthIPv6, slcDevPortCfgTokenPowerSupply=slcDevPortCfgTokenPowerSupply, slcNetVPNIKEDHGroup=slcNetVPNIKEDHGroup, slcServAuditSize=slcServAuditSize, slcDevPortCfgPCCardLogTo=slcDevPortCfgPCCardLogTo, slcDevGlobalStartSSHPort=slcDevGlobalStartSSHPort, slcConnEntry=slcConnEntry, slcDevConNumberShowLines=slcDevConNumberShowLines, slcSystemSiteRack=slcSystemSiteRack, slcNetFirewallMappingEntry=slcNetFirewallMappingEntry, slcAuthGroupListenPorts=slcAuthGroupListenPorts, slcAuthNISOrder=slcAuthNISOrder, slcDevPortCfgName=slcDevPortCfgName, slcNetFirewallRulesetName=slcNetFirewallRulesetName, slcPCCardCfgDataBits=slcPCCardCfgDataBits, slcAuthTACACSClearPorts=slcAuthTACACSClearPorts, slcDevIntModem=slcDevIntModem, slcAuthLDAPGroupMembershipAttr=slcAuthLDAPGroupMembershipAttr, slcPowerSupplyId=slcPowerSupplyId, slcSystemWebCipher=slcSystemWebCipher, slcServNTPLocalServer2=slcServNTPLocalServer2, slcServAuditLog=slcServAuditLog, slcServWebTermDeployment=slcServWebTermDeployment, slcServSSHPort=slcServSSHPort, slcDevPortCfgNumberShowLines=slcDevPortCfgNumberShowLines, slcDevUSBCfgRemoteIP=slcDevUSBCfgRemoteIP, slcServSNMPv1v2=slcServSNMPv1v2, slcDevPortCfgPortType=slcDevPortCfgPortType, slcAuthLocalUserClearPorts=slcAuthLocalUserClearPorts, slcDevPortCfgTerminationString=slcDevPortCfgTerminationString, slcDevUSBState=slcDevUSBState, slcSystem=slcSystem, slcAuthTACACSGroup=slcAuthTACACSGroup, slcNetEthPingIPAddress=slcNetEthPingIPAddress, slcServNFSMountEntry=slcServNFSMountEntry, slcDevUSBCfgSSHAuth=slcDevUSBCfgSSHAuth, slcAuthGroupIndex=slcAuthGroupIndex, slcAuthTACACSDialback=slcAuthTACACSDialback, slcAuthRemoteUserDialback=slcAuthRemoteUserDialback, slcDevUSBCfgAuth=slcDevUSBCfgAuth, slcDevPortCfgDialoutNum=slcDevPortCfgDialoutNum, slcDevPortCfgDevPrompt=slcDevPortCfgDevPrompt, slcServSysRemoteServerIPv6=slcServSysRemoteServerIPv6, slcAuthKerbKDCIP=slcAuthKerbKDCIP, slcAuthRemoteAuthListOnly=slcAuthRemoteAuthListOnly, slcPCCardCfgInitScript=slcPCCardCfgInitScript, slcDevRPMSNMPReadComm=slcDevRPMSNMPReadComm, slcConnTable=slcConnTable, slcServAuditState=slcServAuditState, slcSystemLoadVia=slcSystemLoadVia, slcDevPortCfgDialbackNum=slcDevPortCfgDialbackNum, slcAuthTACACSServer3IPv6=slcAuthTACACSServer3IPv6, slcPCCardCfgIndex=slcPCCardCfgIndex, slcDevRPMLoadOverThreshold=slcDevRPMLoadOverThreshold, slcEventSysadminPassword=slcEventSysadminPassword, slcPCCardAction=slcPCCardAction, slcAuthRADIUSClearPorts=slcAuthRADIUSClearPorts, slcServSiteIdleTimeout=slcServSiteIdleTimeout, slcAuthRADIUSDataPorts=slcAuthRADIUSDataPorts, slcAuthRADIUSDialback=slcAuthRADIUSDialback, slcConnDurationStr=slcConnDurationStr, slcNetFirewallSSH=slcNetFirewallSSH, slcPCCardCfgTCPState=slcPCCardCfgTCPState, slcNetEthPingFailed=slcNetEthPingFailed, slcServWebTerm=slcServWebTerm, slcAuthLocalUserEntry=slcAuthLocalUserEntry, slcDevPowerSupplyB=slcDevPowerSupplyB, slcAuthLDAPGroupFilter=slcAuthLDAPGroupFilter, slcDevPortCfgBaud=slcDevPortCfgBaud, slcDevIntModemDialoutLogin=slcDevIntModemDialoutLogin, slcPCCardCfgCHAPAuthLocalUsers=slcPCCardCfgCHAPAuthLocalUsers, slcServCIFSEth1=slcServCIFSEth1, slcAuthLDAPMenu=slcAuthLDAPMenu, slcServTelnetTimeoutDataDirection=slcServTelnetTimeoutDataDirection, slcServSNMPv3Security=slcServSNMPv3Security, slcNetVPNLocalId=slcNetVPNLocalId, slcDevRPMUptime=slcDevRPMUptime, slcSystemLogoutBanner=slcSystemLogoutBanner, slcEventUSBAction=slcEventUSBAction, slcServTelnetTelnetOut=slcServTelnetTelnetOut, slcPCCardCfgGroup=slcPCCardCfgGroup, slcNetwork=slcNetwork, slcConnFlow=slcConnFlow, slcPCCardCfgCHAPHost=slcPCCardCfgCHAPHost, slcDevRPMOutletName=slcDevRPMOutletName, slcDevUSBCfgTelnetPort=slcDevUSBCfgTelnetPort, slcSystemFTPPath=slcSystemFTPPath, slcSystemKeypadLock=slcSystemKeypadLock, slcDevPortCfgPCCardMaxFiles=slcDevPortCfgPCCardMaxFiles, slcDevPortErrorStatus=slcDevPortErrorStatus, slcServSiteNATState=slcServSiteNATState, slcServSNMPNMS=slcServSNMPNMS, slcAuthGroupDialbackNum=slcAuthGroupDialbackNum, slcDevPortCfgDevTemperature=slcDevPortCfgDevTemperature, slcAuthNISSlave2=slcAuthNISSlave2, slcSystemLCDUserStrLine1=slcSystemLCDUserStrLine1, slcServNTPPoll=slcServNTPPoll, slcNetFirewallMappingTable=slcNetFirewallMappingTable, slcServSiteDialoutNum=slcServSiteDialoutNum, slcDevDevicePorts=slcDevDevicePorts, slcDevUSBCfgUseSites=slcDevUSBCfgUseSites, slcNetEthIfIPv6Addr=slcNetEthIfIPv6Addr, slcDevRPMNominalRealPower=slcDevRPMNominalRealPower, slcEventPingHostFails=slcEventPingHostFails, slcAuthLocalWarningPeriod=slcAuthLocalWarningPeriod, slcDevRPMStatusTable=slcDevRPMStatusTable, slcDevPortCfgTimeout=slcDevPortCfgTimeout, slcDevPortCfgAuth=slcDevPortCfgAuth, slcNetEthDNS2IPv6=slcNetEthDNS2IPv6, slcDevPortGlobal=slcDevPortGlobal, slcAuthKerbDialback=slcAuthKerbDialback, slcAuthGroups=slcAuthGroups, slcAuthKerbRights=slcAuthKerbRights, slcDevPortCfgDevLowTemp=slcDevPortCfgDevLowTemp, slcDevUSBCfgGSMDialoutMode=slcDevUSBCfgGSMDialoutMode, slcAuthLocalUsersTable=slcAuthLocalUsersTable, slcDevRPMBatteryRuntime=slcDevRPMBatteryRuntime, slcDevUSBCfgCBCPServerAllowNoCallback=slcDevUSBCfgCBCPServerAllowNoCallback, slcDevIntModemRemoteIP=slcDevIntModemRemoteIP, slcServSiteStaticRouteIP=slcServSiteStaticRouteIP, slcDevRPMTemperature=slcDevRPMTemperature, slcPCCardCfgGSMAutoAcquireDNS=slcPCCardCfgGSMAutoAcquireDNS, slcNetEthPingDelay=slcNetEthPingDelay, slcNetRouteStaticGateway=slcNetRouteStaticGateway, slcServSiteStaticRouteMask=slcServSiteStaticRouteMask, slcAuthTACACSAuthService=slcAuthTACACSAuthService, slcDevPortCfgHostList=slcDevPortCfgHostList, slcDevPortCfgViewPortLog=slcDevPortCfgViewPortLog, slcDevRPMVendorModel=slcDevRPMVendorModel, slcAuthNISRights=slcAuthNISRights, slcAuthRADIUSPort=slcAuthRADIUSPort, slcDevRPMName=slcDevRPMName, slcNetFirewallRulesetNumRules=slcNetFirewallRulesetNumRules, slcSystemModelString=slcSystemModelString, slcAuthTACACSServer=slcAuthTACACSServer, slcDevPortCfgTokenPowerAction=slcDevPortCfgTokenPowerAction, slcDevIntModemDialoutNum=slcDevIntModemDialoutNum, slcDevIntModemDialbackMode=slcDevIntModemDialbackMode, slcDevPortCfgSLMNMS=slcDevPortCfgSLMNMS, slcDevPortCfgNFSDir=slcDevPortCfgNFSDir, slcDevUSBCfgSSHPort=slcDevUSBCfgSSHPort, slcDevPortCfgMinimizeLatency=slcDevPortCfgMinimizeLatency, slcNetRouteStaticEntry=slcNetRouteStaticEntry, slcServSNMPv3ReadWriteUser=slcServSNMPv3ReadWriteUser, slcDevConShowLines=slcDevConShowLines, slcPCCardCfgAuth=slcPCCardCfgAuth, slcPCCardCfgModemMode=slcPCCardCfgModemMode, slcSystemTimeZone=slcSystemTimeZone, slcAuthRemoteUserLocked=slcAuthRemoteUserLocked, slcDevRPMLoad=slcDevRPMLoad, slcDevPortData=slcDevPortData, slcAuthNISDataPorts=slcAuthNISDataPorts, slcAuthRADIUSTimeout=slcAuthRADIUSTimeout, slcDevIntModemCallerIdATCmd=slcDevIntModemCallerIdATCmd, slcNetEthKeepaliveInterval=slcNetEthKeepaliveInterval, slcAuthLocalUserRights=slcAuthLocalUserRights, slcDevices=slcDevices, slcPCCardCfgStorageFS=slcPCCardCfgStorageFS, slcDevPortCfgSyslogState=slcDevPortCfgSyslogState, slcAuthLocalUserDialbackNum=slcAuthLocalUserDialbackNum, slcAuthRADIUSListenPorts=slcAuthRADIUSListenPorts, slcServTelnetTimeout=slcServTelnetTimeout, slcAuthTACACSListenPorts=slcAuthTACACSListenPorts, slcServSyslog=slcServSyslog, slcNetVPNRemoteHop=slcNetVPNRemoteHop, slcPCCardCfgEntry=slcPCCardCfgEntry, slcConnNumber=slcConnNumber, slcDevConParity=slcDevConParity, slcDevPortCfgDialoutLogin=slcDevPortCfgDialoutLogin, slcAuthGroupDataPorts=slcAuthGroupDataPorts, slcDevPortCfgRemoteIP=slcDevPortCfgRemoteIP, slcAuthLDAPServer2=slcAuthLDAPServer2, slcDevPortCfgSSHTimeout=slcDevPortCfgSSHTimeout, slcEventHost=slcEventHost, slcAuthLocalUseNextMethod=slcAuthLocalUseNextMethod, slcServSiteCBCPServerAllowNoCallback=slcServSiteCBCPServerAllowNoCallback, slcDevPortCfgConnectDSR=slcDevPortCfgConnectDSR, slcDevPortCfgTCPTimeout=slcDevPortCfgTCPTimeout, slcNetFirewallHTTP=slcNetFirewallHTTP, slcDevPortCfgSLMByteThresh=slcDevPortCfgSLMByteThresh, slcAuthLDAPBindName=slcAuthLDAPBindName, slcDevPortStateRTS=slcDevPortStateRTS, slcSystemLCDIdleDelay=slcSystemLCDIdleDelay, slcAuthLDAPDialback=slcAuthLDAPDialback, slcAuthLocalAllowReuse=slcAuthLocalAllowReuse, slcNetFirewallHTTPS=slcNetFirewallHTTPS, slcAuthLocalUserDataPorts=slcAuthLocalUserDataPorts, slcPCCardCfgSSHState=slcPCCardCfgSSHState)
mibBuilder.exportSymbols("LANTRONIX-SLC-MIB", slcDevUSBCfgTCPPort=slcDevUSBCfgTCPPort, slcPCCardCfgCardType=slcPCCardCfgCardType, PYSNMP_MODULE_ID=slc, slcDevUSBCfgDialoutLogin=slcDevUSBCfgDialoutLogin, slcServSiteDialbackDelay=slcServSiteDialbackDelay, slcDevPortCfgPCCardMaxSize=slcDevPortCfgPCCardMaxSize, slcNetVPNIKEEncryption=slcNetVPNIKEEncryption, slcEventDevicePortDeviceError=slcEventDevicePortDeviceError, slcDevRPMSerialNumber=slcDevRPMSerialNumber, slcServSMTP=slcServSMTP, slcAuthRADIUSEscapeSeq=slcAuthRADIUSEscapeSeq, slcDevConBaud=slcDevConBaud, slcDevPortCfgDevHighTemp=slcDevPortCfgDevHighTemp, slcAuthNISDialbackNum=slcAuthNISDialbackNum, slcAuthLocalSysadminConsoleOnly=slcAuthLocalSysadminConsoleOnly, slcDevPortCfgDevNumExpOutlets=slcDevPortCfgDevNumExpOutlets, slcDevPortCfgIP=slcDevPortCfgIP, slcAuthNISSlave5=slcAuthNISSlave5, slcAuthLocalPasswordLifetime=slcAuthLocalPasswordLifetime, slcAuthRADIUSUseVSA=slcAuthRADIUSUseVSA, slcServSSHDSAKeys=slcServSSHDSAKeys, slcSystemLCDScrolling=slcSystemLCDScrolling, slcServSiteRemoteIP=slcServSiteRemoteIP, slcEventRPMAction=slcEventRPMAction, slcDevRPMStatus=slcDevRPMStatus, slcAuthRemoteUserBreakSeq=slcAuthRemoteUserBreakSeq, slcDevPortCfgDevHighHumidity=slcDevPortCfgDevHighHumidity, slcDevUSBCfgEntry=slcDevUSBCfgEntry, slcDevIntModemCHAPHost=slcDevIntModemCHAPHost, slcPCCardCfgISDNChannel=slcPCCardCfgISDNChannel, slcDevGlobalListenPorts=slcDevGlobalListenPorts, slcAuthKerbListenPorts=slcAuthKerbListenPorts, slcSystemWelcomeBanner=slcSystemWelcomeBanner, slcSystemFTPServer=slcSystemFTPServer, slcDevPortCfgTelnetTimeout=slcDevPortCfgTelnetTimeout, slcAuthNISState=slcAuthNISState, slcServSite=slcServSite, slcPCCardCfgGSMBearerService=slcPCCardCfgGSMBearerService, slcAuthNISBreakSeq=slcAuthNISBreakSeq, slcNetVPNTunnel=slcNetVPNTunnel, slcServSLCNetNumber=slcServSLCNetNumber, slcDevPortCfgSSHAuth=slcDevPortCfgSSHAuth, slcEventObjects=slcEventObjects, slcServHostListIndex=slcServHostListIndex, slcPCCardCfgDODAuth=slcPCCardCfgDODAuth, slcDevPortStateNumber=slcDevPortStateNumber, slcAuthLocalUserBreakSeq=slcAuthLocalUserBreakSeq, slcDevPowerSupplyA=slcDevPowerSupplyA, slcDevRPMFirmwareVersion=slcDevRPMFirmwareVersion, slcAuthRemoteUserDataPorts=slcAuthRemoteUserDataPorts, slcEventDevicePortData=slcEventDevicePortData, slcDevPortCfgModemState=slcDevPortCfgModemState, slcDevPortCfgPCCardState=slcDevPortCfgPCCardState, slcAuthRADIUSServerTable=slcAuthRADIUSServerTable, slcAuthGroupDialback=slcAuthGroupDialback, slcNetVPNRemoteSubnet=slcNetVPNRemoteSubnet, slcDevPortCfgToggleDTR=slcDevPortCfgToggleDTR, slcDevUSBCfgDialbackNum=slcDevUSBCfgDialbackNum, slcNetEthDNS3=slcNetEthDNS3, slcAuthLDAPUseLDAPSchema=slcAuthLDAPUseLDAPSchema, slcDevPortCfgTCPPort=slcDevPortCfgTCPPort, slcDevUSBCfgDODCHAPHost=slcDevUSBCfgDODCHAPHost, slcDevUSBCfgTCPState=slcDevUSBCfgTCPState, slcDevRPMProvidesSLCPower=slcDevRPMProvidesSLCPower, slcAuthNISEscapeSeq=slcAuthNISEscapeSeq, slcServSysDiagLevel=slcServSysDiagLevel, slcDevUSBCfgTCPAuth=slcDevUSBCfgTCPAuth, slcAuthRemoteUserEscapeSeq=slcAuthRemoteUserEscapeSeq, slcDevPortCfgCallerIdATCmd=slcDevPortCfgCallerIdATCmd, slcPCCardCfgHostList=slcPCCardCfgHostList, slcAuthLocalUserEscapeSeq=slcAuthLocalUserEscapeSeq, slcAuthRemoteNumber=slcAuthRemoteNumber, slcAuthRemoteUserDialbackNum=slcAuthRemoteUserDialbackNum, slcPCCardCfgUseSites=slcPCCardCfgUseSites, slcAuthLDAPServer=slcAuthLDAPServer, slcDevUSBCfgGSMPIN=slcDevUSBCfgGSMPIN, slcDevPortCfgSendTermString=slcDevPortCfgSendTermString, slcDevPortStateTable=slcDevPortStateTable, slcDevConStopBits=slcDevConStopBits, slcUSBAction=slcUSBAction, slcDevUSBCfgBaud=slcDevUSBCfgBaud, TimeoutDataDirection=TimeoutDataDirection, slcDevUSBCfgDialoutNum=slcDevUSBCfgDialoutNum, slcNetFirewallRulesetIndex=slcNetFirewallRulesetIndex, slcNetFirewallState=slcNetFirewallState, slcDevUSBCfgDODAuth=slcDevUSBCfgDODAuth, slcDevRPMOutletAction=slcDevRPMOutletAction, slcDevPortCfgSLMTimeFrame=slcDevPortCfgSLMTimeFrame, slcEvents=slcEvents, slcDevUSBCfgTimeout=slcDevUSBCfgTimeout, slcDevUSBCfgSSHState=slcDevUSBCfgSSHState, slcServSysNetworkLevel=slcServSysNetworkLevel, slcServSiteEntry=slcServSiteEntry, slcDevRPMOnLowBattery=slcDevRPMOnLowBattery, slcDevRPMCfgTable=slcDevRPMCfgTable, slcDevPortCfgTelnetPort=slcDevPortCfgTelnetPort, slcDevPortCfgGroup=slcDevPortCfgGroup, slcDevConGroup=slcDevConGroup, slcDevRPMCfgEntry=slcDevRPMCfgEntry, slcDevRPMInputVoltage=slcDevRPMInputVoltage, slcServTelnet=slcServTelnet, slcSystemWebBanner=slcSystemWebBanner, slcServSiteNumber=slcServSiteNumber, slcSystemFWRev=slcSystemFWRev, slcAuthRemoteUserGroup=slcAuthRemoteUserGroup, slcNetVPNESPDHGroup=slcNetVPNESPDHGroup, slcDevPortCfgLocalState=slcDevPortCfgLocalState, slcNetFirewall=slcNetFirewall, slcServCIFSState=slcServCIFSState, slcDevRPMOutletTable=slcDevRPMOutletTable, slcServNTPLocalServer3IPv6=slcServNTPLocalServer3IPv6, slcAuthLDAPBindWithLogin=slcAuthLDAPBindWithLogin, slcDevPortCfgIPMask=slcDevPortCfgIPMask, slcNetVPNRemoteId=slcNetVPNRemoteId, slcServSysRemoteServer2IPv6=slcServSysRemoteServer2IPv6, slcDevPortCfgPowerManagementSeq=slcDevPortCfgPowerManagementSeq, slcPCCardCfgDialoutLogin=slcPCCardCfgDialoutLogin, slcPCCardCfgDialbackMode=slcPCCardCfgDialbackMode, slcDevRPMNumOutlets=slcDevRPMNumOutlets, slcSystemLCDScreens=slcSystemLCDScreens, slcAuthLocalOrder=slcAuthLocalOrder, slcNetEthIfNumber=slcNetEthIfNumber, slcAuthTACACS=slcAuthTACACS, slcAuthRemoteUserListenPorts=slcAuthRemoteUserListenPorts, slcDevRPMCriticalEmails=slcDevRPMCriticalEmails, slcDevRPMOutletCurrent=slcDevRPMOutletCurrent, slcDevRPMCriticalSNMPTraps=slcDevRPMCriticalSNMPTraps, slcAuthGroupsTable=slcAuthGroupsTable, slcDevIntModemLocalIP=slcDevIntModemLocalIP, slcServSiteStaticRouteGateway=slcServSiteStaticRouteGateway, AuthOrder=AuthOrder, slcNetRouteStaticIndex=slcNetRouteStaticIndex, slcNetEthIfSource=slcNetEthIfSource, slcServSNMPTraps=slcServSNMPTraps, slcServSysOtherLogSize=slcServSysOtherLogSize, slcServSNMPContact=slcServSNMPContact, slcAuthLDAPState=slcAuthLDAPState, slcAuthNISGroup=slcAuthNISGroup, slcPCCardCfgNATState=slcPCCardCfgNATState, slcServSiteDialback=slcServSiteDialback, slcDevPortCfgDODCHAPHost=slcDevPortCfgDODCHAPHost, slcPCCardCfgTCPAuth=slcPCCardCfgTCPAuth, slcServSLCNetwork=slcServSLCNetwork, slcServNTPLocalServer3=slcServNTPLocalServer3, slcDevPortCfgAssertDTR=slcDevPortCfgAssertDTR, slcPCCardCfgDialoutNum=slcPCCardCfgDialoutNum, slcAuthNISDialback=slcAuthNISDialback, slcNetVPNXAUTHClientLogin=slcNetVPNXAUTHClientLogin, slcDevPortCfgDevLogin=slcDevPortCfgDevLogin, slcNetVPNESPEncryption=slcNetVPNESPEncryption, slcPCCardCfgTelnetAuth=slcPCCardCfgTelnetAuth, slcServNTPLocalServer2IPv6=slcServNTPLocalServer2IPv6, slcAuthKerbGroup=slcAuthKerbGroup, slcDevPortState=slcDevPortState, slcAuthLDAPBase=slcAuthLDAPBase, slcEventNoDialToneAlarm=slcEventNoDialToneAlarm, slcAuthTACACSServerIPv6=slcAuthTACACSServerIPv6, slcNetEthIfMTU=slcNetEthIfMTU, slcNetFirewallRulesetNumber=slcNetFirewallRulesetNumber, slcNetEthIfEntry=slcNetEthIfEntry, slcNetRouteRIPVersion=slcNetRouteRIPVersion, slcServSiteTimeout=slcServSiteTimeout, slcAuthLDAPServerIPv6=slcAuthLDAPServerIPv6, slcDevUSBCfgLocalIP=slcDevUSBCfgLocalIP, slcPowerSupplyAction=slcPowerSupplyAction, slcPCCardCfgGSMDialoutMode=slcPCCardCfgGSMDialoutMode, slcAuthRemoteUserMenu=slcAuthRemoteUserMenu, slcDevPortStateIndex=slcDevPortStateIndex, slcDevUSBCfgCardType=slcDevUSBCfgCardType, slcDevUSBCfgCHAPAuthLocalUsers=slcDevUSBCfgCHAPAuthLocalUsers, slcDevIntModemRestartDelay=slcDevIntModemRestartDelay, UserRights=UserRights, slcAuthLDAPGroup=slcAuthLDAPGroup, slcAuthRemoteUserClearPorts=slcAuthRemoteUserClearPorts, slcPCCardCfgBaud=slcPCCardCfgBaud, slcDevPortCfgDataBits=slcDevPortCfgDataBits, slcDevPortCfgEmailTo=slcDevPortCfgEmailTo, slcServWebTermBufSize=slcServWebTermBufSize, slcServAuditIncludeCLI=slcServAuditIncludeCLI, slcServNFSMountTable=slcServNFSMountTable, slcDevPortStateFlowControlViolations=slcDevPortStateFlowControlViolations, slcDevPortCfgTokenAction=slcDevPortCfgTokenAction, slcSDCardAction=slcSDCardAction, slcConnSourceIP=slcConnSourceIP, slcNetRouteStaticMask=slcNetRouteStaticMask, slcServPhoneHomeIP=slcServPhoneHomeIP, slcNetEthDomain=slcNetEthDomain, slcNetVPNLocalSubnet=slcNetVPNLocalSubnet, slcNetEthIfIndex=slcNetEthIfIndex, slcServHostListEntry=slcServHostListEntry, slcEventDevicePortDeviceLowTemp=slcEventDevicePortDeviceLowTemp, slcDevPortCfgDevHumidity=slcDevPortCfgDevHumidity, slcDevUSBCfgRestartDelay=slcDevUSBCfgRestartDelay, slcNetEthIfMacAddress=slcNetEthIfMacAddress, slcServSiteCHAPSecret=slcServSiteCHAPSecret, slcAuthLocalUserChangePwdNextLogin=slcAuthLocalUserChangePwdNextLogin, slcDevPortCfgRestartDelay=slcDevPortCfgRestartDelay, slcServNTP=slcServNTP, slcDevPortCfgEmailByteThresh=slcDevPortCfgEmailByteThresh, slcDevPortStateFramingErrors=slcDevPortStateFramingErrors, slcAuthGroupRights=slcAuthGroupRights, slcDevIntModemGroup=slcDevIntModemGroup, slcDevRPMCurrent=slcDevRPMCurrent, RPMOutletIndex=RPMOutletIndex, slcNetRouteStaticState=slcNetRouteStaticState, slcDevPortConfig=slcDevPortConfig, slcDevPortStateParityErrors=slcDevPortStateParityErrors, slcDevIntModemInitScript=slcDevIntModemInitScript, UserGroup=UserGroup, slcPCCardCfgFlowControl=slcPCCardCfgFlowControl, slcDevPowerSupplyType=slcDevPowerSupplyType, slcNetFirewallPing=slcNetFirewallPing, slcNetEthGatewayIPv6=slcNetEthGatewayIPv6, slcServSMTPSender=slcServSMTPSender, slcDevPortCfgLocalIP=slcDevPortCfgLocalIP, slcDevUSBCfgTable=slcDevUSBCfgTable, slcDevPortCfgPowerSupplies=slcDevPortCfgPowerSupplies, slcPCCardCfgDODCHAPHost=slcPCCardCfgDODCHAPHost, slcAuthLocalUserPwdExpires=slcAuthLocalUserPwdExpires, slcAuthRemoteUserLogin=slcAuthRemoteUserLogin, slcDevPortCfgTokenSendString=slcDevPortCfgTokenSendString, slcDevPortStateOverrunErrors=slcDevPortStateOverrunErrors, slcDevPowerSupply=slcDevPowerSupply, slcPCCardCfgParity=slcPCCardCfgParity, slcDevPortCfgModemMode=slcDevPortCfgModemMode, slcPCCardCfgTelnetPort=slcPCCardCfgTelnetPort, slcNetVPNEthPort=slcNetVPNEthPort, slcDevPortStateDTR=slcDevPortStateDTR, slcServSLCNetTable=slcServSLCNetTable, slcAuthTACACSState=slcAuthTACACSState, slcDevPortCfgTCPState=slcDevPortCfgTCPState, slcSystemInternalTemp=slcSystemInternalTemp, slcDevPortCfgDevNumOutlets=slcDevPortCfgDevNumOutlets, slcPCCardCfgRestartDelay=slcPCCardCfgRestartDelay, slcAuthLocalUserChangePwd=slcAuthLocalUserChangePwd, slcAuthNIS=slcAuthNIS, slcDevPortCfgCHAPAuthLocalUsers=slcDevPortCfgCHAPAuthLocalUsers, slcDevUSBCfgTelnetAuth=slcDevUSBCfgTelnetAuth, slcServNFSMountIndex=slcServNFSMountIndex, slcServSSHTimeoutDataDirection=slcServSSHTimeoutDataDirection, slcDevIntModemTimeout=slcDevIntModemTimeout, slcDevPortCfgBreakSeq=slcDevPortCfgBreakSeq, slcEventSDCardAction=slcEventSDCardAction, slcDevPortCfgDevTraps=slcDevPortCfgDevTraps, slcDevPortStateCTS=slcDevPortStateCTS, slcDevConsolePort=slcDevConsolePort, slcServSNMPAlarmDelay=slcServSNMPAlarmDelay, slcAuthRADIUSMenu=slcAuthRADIUSMenu, slcDevUSBCfgDialbackRetries=slcDevUSBCfgDialbackRetries, slcDevGlobalMaxDirect=slcDevGlobalMaxDirect, slcDevUSBCfgTelnetState=slcDevUSBCfgTelnetState, slcDevPortCfgNumberOfSessionsMessage=slcDevPortCfgNumberOfSessionsMessage, slcDevUSBCfgDialtoneCheck=slcDevUSBCfgDialtoneCheck, slcDevPortCfgUSBState=slcDevPortCfgUSBState)
mibBuilder.exportSymbols("LANTRONIX-SLC-MIB", slcDevRPMStatusEntry=slcDevRPMStatusEntry, SyslogLevel=SyslogLevel, slcServSiteTable=slcServSiteTable, slcDevUSBCfgGSMPPPCompression=slcDevUSBCfgGSMPPPCompression, slcServNTPSynchronize=slcServNTPSynchronize, slcDevRPMPort=slcDevRPMPort, slcDevPortCfgUSBLogTo=slcDevPortCfgUSBLogTo, slcDevPortStateBytesOutput=slcDevPortStateBytesOutput, slcServSiteRestartDelay=slcServSiteRestartDelay, slcDevIntModemModemState=slcDevIntModemModemState, slcServAuditInSystemLog=slcServAuditInSystemLog, slcAuthLocalNumber=slcAuthLocalNumber, slcServSysGeneralLevel=slcServSysGeneralLevel, slcAuthKerbDialbackNum=slcAuthKerbDialbackNum, slcAuthLDAPListenPorts=slcAuthLDAPListenPorts, slcDevRPMLogStatus=slcDevRPMLogStatus, slcEventDevicePortDeviceHighHumidity=slcEventDevicePortDeviceHighHumidity, slcServSysAuthLevel=slcServSysAuthLevel, slcServSiteDialbackRetries=slcServSiteDialbackRetries, slcAuthNISMaster=slcAuthNISMaster, slcDevPortCfgStopBits=slcDevPortCfgStopBits, slcServices=slcServices, slcAuthKerbMenu=slcAuthKerbMenu, slcAuthTACACSOrder=slcAuthTACACSOrder, slcServSiteName=slcServSiteName, slcRPMAction=slcRPMAction, slcAuthLDAP=slcAuthLDAP, slcPCCardCfgTCPPort=slcPCCardCfgTCPPort, slcNetRouting=slcNetRouting, slcAuthLDAPPort=slcAuthLDAPPort, slcDevRPMDriverOpts=slcDevRPMDriverOpts, slcDevRPMManagedVia=slcDevRPMManagedVia, slcEventSLCInternalTemp=slcEventSLCInternalTemp, slcServSysDevPortLevel=slcServSysDevPortLevel, slcDevRPMNominalApparentPower=slcDevRPMNominalApparentPower, slcDevPortDeviceErrorStatus=slcDevPortDeviceErrorStatus, slcAuthGroupMenu=slcAuthGroupMenu, slcServSLCNetSearch=slcServSLCNetSearch, slcAuthLDAPEscapeSeq=slcAuthLDAPEscapeSeq, slcAuthLDAPDataPorts=slcAuthLDAPDataPorts, slcSystemAction=slcSystemAction, slcDevPortCfgCallerIdLogging=slcDevPortCfgCallerIdLogging, slcDevUSBCfgCallerIdLogging=slcDevUSBCfgCallerIdLogging, slcAuthLDAPRights=slcAuthLDAPRights, slcDevPortCfgNFSFileState=slcDevPortCfgNFSFileState, slcAuthNISSlave1=slcAuthNISSlave1, slcAuthLocalReuseHistory=slcAuthLocalReuseHistory, slcAuthTACACSEncrypt=slcAuthTACACSEncrypt, slcNetFirewallReject=slcNetFirewallReject, slcAuthGroupName=slcAuthGroupName, slcPCCardCfgCardId=slcPCCardCfgCardId, slcDevIntModemDialbackDelay=slcDevIntModemDialbackDelay, slcPCCardCfgGSMNetworkName=slcPCCardCfgGSMNetworkName, slcNetEthAlternateGateway=slcNetEthAlternateGateway, slcNetFirewallMappingIfac=slcNetFirewallMappingIfac, slcServSNMPState=slcServSNMPState, slcDevUSBCfgIdleTimeout=slcDevUSBCfgIdleTimeout, slcNetVPNStatus=slcNetVPNStatus, slcNetSecurity=slcNetSecurity, slcServSNMPTrapCommunity=slcServSNMPTrapCommunity, slcAuthLDAPOrder=slcAuthLDAPOrder, slcNetEthIfMode=slcNetEthIfMode, slcAuthLDAPBreakSeq=slcAuthLDAPBreakSeq, slcSystemCalibrateTemp=slcSystemCalibrateTemp, slcDevPortCfgCBCPClientType=slcDevPortCfgCBCPClientType, slcServSMTPServer=slcServSMTPServer, slcServSNMPv3Authentication=slcServSNMPv3Authentication, slcSystemInternalTempLow=slcSystemInternalTempLow, slcDevUSBCfgCBCPClientType=slcDevUSBCfgCBCPClientType, slcDevPortCfgDevice=slcDevPortCfgDevice, slcServCIFS=slcServCIFS, slcDevPortCfgUSBVBUS=slcDevPortCfgUSBVBUS, slcDevIntModemCallerIdLogging=slcDevIntModemCallerIdLogging, slcPCCardCfgModemState=slcPCCardCfgModemState, slcEventDevicePortDeviceHighTemp=slcEventDevicePortDeviceHighTemp, slcAuthTACACSBreakSeq=slcAuthTACACSBreakSeq, slcAuthRemoteUserEntry=slcAuthRemoteUserEntry, slcServNTPServer=slcServNTPServer)
