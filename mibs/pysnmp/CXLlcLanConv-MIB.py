#
# PySNMP MIB module CXLlcLanConv-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/CXLlcLanConv-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 18:17:30 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, Integer, OctetString = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "Integer", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsIntersection, ConstraintsUnion, ValueRangeConstraint, ValueSizeConstraint, SingleValueConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsIntersection", "ConstraintsUnion", "ValueRangeConstraint", "ValueSizeConstraint", "SingleValueConstraint")
SapIndex, cxLlcLanConv, Alias = mibBuilder.importSymbols("CXProduct-SMI", "SapIndex", "cxLlcLanConv", "Alias")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
Unsigned32, IpAddress, Gauge32, Integer32, ObjectIdentity, Counter64, NotificationType, Bits, MibIdentifier, iso, TimeTicks, ModuleIdentity, MibScalar, MibTable, MibTableRow, MibTableColumn, Counter32 = mibBuilder.importSymbols("SNMPv2-SMI", "Unsigned32", "IpAddress", "Gauge32", "Integer32", "ObjectIdentity", "Counter64", "NotificationType", "Bits", "MibIdentifier", "iso", "TimeTicks", "ModuleIdentity", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Counter32")
DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention")
class MacAddress(OctetString):
    subtypeSpec = OctetString.subtypeSpec + ValueSizeConstraint(6, 6)
    fixedLength = 6

llcLanSapTable = MibTable((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 47, 10), )
if mibBuilder.loadTexts: llcLanSapTable.setStatus('mandatory')
llcLanSapEntry = MibTableRow((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 47, 10, 1), ).setIndexNames((0, "CXLlcLanConv-MIB", "llcLanSapNumber"))
if mibBuilder.loadTexts: llcLanSapEntry.setStatus('mandatory')
llcLanSapNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 47, 10, 1, 1), SapIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: llcLanSapNumber.setStatus('mandatory')
llcLanSapRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 47, 10, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("invalid", 1), ("valid", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: llcLanSapRowStatus.setStatus('mandatory')
llcLanSapAlias = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 47, 10, 1, 3), Alias()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: llcLanSapAlias.setStatus('mandatory')
llcLanSapCompanionAlias = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 47, 10, 1, 4), Alias()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: llcLanSapCompanionAlias.setStatus('mandatory')
llcLanSapRemoteAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 47, 10, 1, 5), MacAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: llcLanSapRemoteAddress.setStatus('mandatory')
llcLanSapSrcLlcSap = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 47, 10, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(2, 254)).clone(4)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: llcLanSapSrcLlcSap.setStatus('mandatory')
llcLanSapDstLlcSap = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 47, 10, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(2, 254)).clone(4)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: llcLanSapDstLlcSap.setStatus('mandatory')
llcLanSapControl = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 47, 10, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("clearStats", 1), ("releaseRemoteAddress", 2)))).setMaxAccess("writeonly")
if mibBuilder.loadTexts: llcLanSapControl.setStatus('mandatory')
llcLanSapState = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 47, 10, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: llcLanSapState.setStatus('mandatory')
llcLanSapTxFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 47, 10, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: llcLanSapTxFrames.setStatus('mandatory')
llcLanSapRxFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 47, 10, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: llcLanSapRxFrames.setStatus('mandatory')
llcLanSapTxOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 47, 10, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: llcLanSapTxOctets.setStatus('mandatory')
llcLanSapRxOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 47, 10, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: llcLanSapRxOctets.setStatus('mandatory')
llcLanSapLocalAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 47, 10, 1, 19), MacAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: llcLanSapLocalAddress.setStatus('mandatory')
llcLanSapPhysicalInterface = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 47, 10, 1, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("ethernet", 1), ("tokenring", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: llcLanSapPhysicalInterface.setStatus('mandatory')
cxLlcLanConvMibLevel = MibScalar((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 47, 20), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cxLlcLanConvMibLevel.setStatus('mandatory')
mibBuilder.exportSymbols("CXLlcLanConv-MIB", llcLanSapPhysicalInterface=llcLanSapPhysicalInterface, llcLanSapNumber=llcLanSapNumber, llcLanSapCompanionAlias=llcLanSapCompanionAlias, llcLanSapTxFrames=llcLanSapTxFrames, llcLanSapLocalAddress=llcLanSapLocalAddress, llcLanSapSrcLlcSap=llcLanSapSrcLlcSap, llcLanSapAlias=llcLanSapAlias, llcLanSapTable=llcLanSapTable, llcLanSapRowStatus=llcLanSapRowStatus, cxLlcLanConvMibLevel=cxLlcLanConvMibLevel, llcLanSapControl=llcLanSapControl, llcLanSapDstLlcSap=llcLanSapDstLlcSap, llcLanSapTxOctets=llcLanSapTxOctets, MacAddress=MacAddress, llcLanSapRxOctets=llcLanSapRxOctets, llcLanSapRxFrames=llcLanSapRxFrames, llcLanSapState=llcLanSapState, llcLanSapRemoteAddress=llcLanSapRemoteAddress, llcLanSapEntry=llcLanSapEntry)
