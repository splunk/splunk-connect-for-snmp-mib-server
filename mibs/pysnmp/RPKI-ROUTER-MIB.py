#
# PySNMP MIB module RPKI-ROUTER-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/RPKI-ROUTER-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 20:50:12 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, Integer, OctetString = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "Integer", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsIntersection, SingleValueConstraint, ValueRangeConstraint, ConstraintsUnion, ValueSizeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsIntersection", "SingleValueConstraint", "ValueRangeConstraint", "ConstraintsUnion", "ValueSizeConstraint")
InetAddressPrefixLength, InetPortNumber, InetAutonomousSystemNumber, InetAddressType, InetAddress = mibBuilder.importSymbols("INET-ADDRESS-MIB", "InetAddressPrefixLength", "InetPortNumber", "InetAutonomousSystemNumber", "InetAddressType", "InetAddress")
ObjectGroup, NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "ObjectGroup", "NotificationGroup", "ModuleCompliance")
Counter64, Integer32, Bits, MibIdentifier, IpAddress, MibScalar, MibTable, MibTableRow, MibTableColumn, Counter32, ObjectIdentity, iso, mib_2, NotificationType, Gauge32, Unsigned32, ModuleIdentity, TimeTicks = mibBuilder.importSymbols("SNMPv2-SMI", "Counter64", "Integer32", "Bits", "MibIdentifier", "IpAddress", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Counter32", "ObjectIdentity", "iso", "mib-2", "NotificationType", "Gauge32", "Unsigned32", "ModuleIdentity", "TimeTicks")
TimeStamp, DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "TimeStamp", "DisplayString", "TextualConvention")
LongUtf8String, = mibBuilder.importSymbols("SYSAPPL-MIB", "LongUtf8String")
rpkiRtrMIB = ModuleIdentity((1, 3, 6, 1, 2, 1, 218))
rpkiRtrMIB.setRevisions(('2013-05-01 00:00',))
if mibBuilder.loadTexts: rpkiRtrMIB.setLastUpdated('201305010000Z')
if mibBuilder.loadTexts: rpkiRtrMIB.setOrganization('IETF Secure Inter-Domain Routing (SIDR) Working Group ')
rpkiRtrNotifications = MibIdentifier((1, 3, 6, 1, 2, 1, 218, 0))
rpkiRtrObjects = MibIdentifier((1, 3, 6, 1, 2, 1, 218, 1))
rpkiRtrConformance = MibIdentifier((1, 3, 6, 1, 2, 1, 218, 2))
class RpkiRtrConnectionType(TextualConvention, Integer32):
    reference = 'The RPKI-Router Protocol, RFC 6810, Section 7'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))
    namedValues = NamedValues(("ssh", 1), ("tls", 2), ("tcpMD5", 3), ("tcpAO", 4), ("tcp", 5), ("ipsec", 6), ("other", 7))

rpkiRtrDiscontinuityTimer = MibScalar((1, 3, 6, 1, 2, 1, 218, 1, 1), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rpkiRtrDiscontinuityTimer.setStatus('current')
rpkiRtrCacheServerTable = MibTable((1, 3, 6, 1, 2, 1, 218, 1, 2), )
if mibBuilder.loadTexts: rpkiRtrCacheServerTable.setStatus('current')
rpkiRtrCacheServerTableEntry = MibTableRow((1, 3, 6, 1, 2, 1, 218, 1, 2, 1), ).setIndexNames((0, "RPKI-ROUTER-MIB", "rpkiRtrCacheServerRemoteAddressType"), (0, "RPKI-ROUTER-MIB", "rpkiRtrCacheServerRemoteAddress"), (0, "RPKI-ROUTER-MIB", "rpkiRtrCacheServerRemotePort"))
if mibBuilder.loadTexts: rpkiRtrCacheServerTableEntry.setStatus('current')
rpkiRtrCacheServerRemoteAddressType = MibTableColumn((1, 3, 6, 1, 2, 1, 218, 1, 2, 1, 1), InetAddressType())
if mibBuilder.loadTexts: rpkiRtrCacheServerRemoteAddressType.setStatus('current')
rpkiRtrCacheServerRemoteAddress = MibTableColumn((1, 3, 6, 1, 2, 1, 218, 1, 2, 1, 2), InetAddress())
if mibBuilder.loadTexts: rpkiRtrCacheServerRemoteAddress.setStatus('current')
rpkiRtrCacheServerRemotePort = MibTableColumn((1, 3, 6, 1, 2, 1, 218, 1, 2, 1, 3), InetPortNumber().subtype(subtypeSpec=ValueRangeConstraint(1, 65535)))
if mibBuilder.loadTexts: rpkiRtrCacheServerRemotePort.setStatus('current')
rpkiRtrCacheServerLocalAddressType = MibTableColumn((1, 3, 6, 1, 2, 1, 218, 1, 2, 1, 4), InetAddressType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rpkiRtrCacheServerLocalAddressType.setStatus('current')
rpkiRtrCacheServerLocalAddress = MibTableColumn((1, 3, 6, 1, 2, 1, 218, 1, 2, 1, 5), InetAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rpkiRtrCacheServerLocalAddress.setStatus('current')
rpkiRtrCacheServerLocalPort = MibTableColumn((1, 3, 6, 1, 2, 1, 218, 1, 2, 1, 6), InetPortNumber().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rpkiRtrCacheServerLocalPort.setStatus('current')
rpkiRtrCacheServerPreference = MibTableColumn((1, 3, 6, 1, 2, 1, 218, 1, 2, 1, 7), Unsigned32().clone(4294967295)).setMaxAccess("readonly")
if mibBuilder.loadTexts: rpkiRtrCacheServerPreference.setStatus('current')
rpkiRtrCacheServerConnectionType = MibTableColumn((1, 3, 6, 1, 2, 1, 218, 1, 2, 1, 8), RpkiRtrConnectionType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rpkiRtrCacheServerConnectionType.setStatus('current')
rpkiRtrCacheServerConnectionStatus = MibTableColumn((1, 3, 6, 1, 2, 1, 218, 1, 2, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("up", 1), ("down", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rpkiRtrCacheServerConnectionStatus.setStatus('current')
rpkiRtrCacheServerDescription = MibTableColumn((1, 3, 6, 1, 2, 1, 218, 1, 2, 1, 10), LongUtf8String()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rpkiRtrCacheServerDescription.setStatus('current')
rpkiRtrCacheServerMsgsReceived = MibTableColumn((1, 3, 6, 1, 2, 1, 218, 1, 2, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rpkiRtrCacheServerMsgsReceived.setStatus('current')
rpkiRtrCacheServerMsgsSent = MibTableColumn((1, 3, 6, 1, 2, 1, 218, 1, 2, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rpkiRtrCacheServerMsgsSent.setStatus('current')
rpkiRtrCacheServerV4ActiveRecords = MibTableColumn((1, 3, 6, 1, 2, 1, 218, 1, 2, 1, 13), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rpkiRtrCacheServerV4ActiveRecords.setStatus('current')
rpkiRtrCacheServerV4Announcements = MibTableColumn((1, 3, 6, 1, 2, 1, 218, 1, 2, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rpkiRtrCacheServerV4Announcements.setStatus('current')
rpkiRtrCacheServerV4Withdrawals = MibTableColumn((1, 3, 6, 1, 2, 1, 218, 1, 2, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rpkiRtrCacheServerV4Withdrawals.setStatus('current')
rpkiRtrCacheServerV6ActiveRecords = MibTableColumn((1, 3, 6, 1, 2, 1, 218, 1, 2, 1, 16), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rpkiRtrCacheServerV6ActiveRecords.setStatus('current')
rpkiRtrCacheServerV6Announcements = MibTableColumn((1, 3, 6, 1, 2, 1, 218, 1, 2, 1, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rpkiRtrCacheServerV6Announcements.setStatus('current')
rpkiRtrCacheServerV6Withdrawals = MibTableColumn((1, 3, 6, 1, 2, 1, 218, 1, 2, 1, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rpkiRtrCacheServerV6Withdrawals.setStatus('current')
rpkiRtrCacheServerLatestSerial = MibTableColumn((1, 3, 6, 1, 2, 1, 218, 1, 2, 1, 19), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rpkiRtrCacheServerLatestSerial.setStatus('current')
rpkiRtrCacheServerSessionID = MibTableColumn((1, 3, 6, 1, 2, 1, 218, 1, 2, 1, 20), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rpkiRtrCacheServerSessionID.setStatus('current')
rpkiRtrCacheServerRefreshTimer = MibTableColumn((1, 3, 6, 1, 2, 1, 218, 1, 2, 1, 21), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(60, 7200))).setUnits('seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: rpkiRtrCacheServerRefreshTimer.setStatus('current')
rpkiRtrCacheServerTimeToRefresh = MibTableColumn((1, 3, 6, 1, 2, 1, 218, 1, 2, 1, 22), Integer32()).setUnits('seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: rpkiRtrCacheServerTimeToRefresh.setStatus('current')
rpkiRtrCacheServerId = MibTableColumn((1, 3, 6, 1, 2, 1, 218, 1, 2, 1, 23), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rpkiRtrCacheServerId.setStatus('current')
rpkiRtrCacheServerErrorsTable = MibTable((1, 3, 6, 1, 2, 1, 218, 1, 3), )
if mibBuilder.loadTexts: rpkiRtrCacheServerErrorsTable.setStatus('current')
rpkiRtrCacheServerErrorsTableEntry = MibTableRow((1, 3, 6, 1, 2, 1, 218, 1, 3, 1), )
rpkiRtrCacheServerTableEntry.registerAugmentions(("RPKI-ROUTER-MIB", "rpkiRtrCacheServerErrorsTableEntry"))
rpkiRtrCacheServerErrorsTableEntry.setIndexNames(*rpkiRtrCacheServerTableEntry.getIndexNames())
if mibBuilder.loadTexts: rpkiRtrCacheServerErrorsTableEntry.setStatus('current')
rpkiRtrCacheServerErrorsCorruptData = MibTableColumn((1, 3, 6, 1, 2, 1, 218, 1, 3, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rpkiRtrCacheServerErrorsCorruptData.setStatus('current')
rpkiRtrCacheServerErrorsInternalError = MibTableColumn((1, 3, 6, 1, 2, 1, 218, 1, 3, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rpkiRtrCacheServerErrorsInternalError.setStatus('current')
rpkiRtrCacheServerErrorsNoData = MibTableColumn((1, 3, 6, 1, 2, 1, 218, 1, 3, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rpkiRtrCacheServerErrorsNoData.setStatus('current')
rpkiRtrCacheServerErrorsInvalidRequest = MibTableColumn((1, 3, 6, 1, 2, 1, 218, 1, 3, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rpkiRtrCacheServerErrorsInvalidRequest.setStatus('current')
rpkiRtrCacheServerErrorsUnsupportedVersion = MibTableColumn((1, 3, 6, 1, 2, 1, 218, 1, 3, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rpkiRtrCacheServerErrorsUnsupportedVersion.setStatus('current')
rpkiRtrCacheServerErrorsUnsupportedPdu = MibTableColumn((1, 3, 6, 1, 2, 1, 218, 1, 3, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rpkiRtrCacheServerErrorsUnsupportedPdu.setStatus('current')
rpkiRtrCacheServerErrorsWithdrawalUnknown = MibTableColumn((1, 3, 6, 1, 2, 1, 218, 1, 3, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rpkiRtrCacheServerErrorsWithdrawalUnknown.setStatus('current')
rpkiRtrCacheServerErrorsDuplicateAnnounce = MibTableColumn((1, 3, 6, 1, 2, 1, 218, 1, 3, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rpkiRtrCacheServerErrorsDuplicateAnnounce.setStatus('current')
rpkiRtrPrefixOriginTable = MibTable((1, 3, 6, 1, 2, 1, 218, 1, 4), )
if mibBuilder.loadTexts: rpkiRtrPrefixOriginTable.setStatus('current')
rpkiRtrPrefixOriginTableEntry = MibTableRow((1, 3, 6, 1, 2, 1, 218, 1, 4, 1), ).setIndexNames((0, "RPKI-ROUTER-MIB", "rpkiRtrPrefixOriginAddressType"), (0, "RPKI-ROUTER-MIB", "rpkiRtrPrefixOriginAddress"), (0, "RPKI-ROUTER-MIB", "rpkiRtrPrefixOriginMinLength"), (0, "RPKI-ROUTER-MIB", "rpkiRtrPrefixOriginMaxLength"), (0, "RPKI-ROUTER-MIB", "rpkiRtrPrefixOriginASN"), (0, "RPKI-ROUTER-MIB", "rpkiRtrPrefixOriginCacheServerId"))
if mibBuilder.loadTexts: rpkiRtrPrefixOriginTableEntry.setStatus('current')
rpkiRtrPrefixOriginAddressType = MibTableColumn((1, 3, 6, 1, 2, 1, 218, 1, 4, 1, 1), InetAddressType())
if mibBuilder.loadTexts: rpkiRtrPrefixOriginAddressType.setStatus('current')
rpkiRtrPrefixOriginAddress = MibTableColumn((1, 3, 6, 1, 2, 1, 218, 1, 4, 1, 2), InetAddress())
if mibBuilder.loadTexts: rpkiRtrPrefixOriginAddress.setStatus('current')
rpkiRtrPrefixOriginMinLength = MibTableColumn((1, 3, 6, 1, 2, 1, 218, 1, 4, 1, 3), InetAddressPrefixLength())
if mibBuilder.loadTexts: rpkiRtrPrefixOriginMinLength.setStatus('current')
rpkiRtrPrefixOriginMaxLength = MibTableColumn((1, 3, 6, 1, 2, 1, 218, 1, 4, 1, 4), InetAddressPrefixLength())
if mibBuilder.loadTexts: rpkiRtrPrefixOriginMaxLength.setStatus('current')
rpkiRtrPrefixOriginASN = MibTableColumn((1, 3, 6, 1, 2, 1, 218, 1, 4, 1, 5), InetAutonomousSystemNumber().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295)))
if mibBuilder.loadTexts: rpkiRtrPrefixOriginASN.setStatus('current')
rpkiRtrPrefixOriginCacheServerId = MibTableColumn((1, 3, 6, 1, 2, 1, 218, 1, 4, 1, 6), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rpkiRtrPrefixOriginCacheServerId.setStatus('current')
rpkiRtrCacheServerConnectionStateChange = NotificationType((1, 3, 6, 1, 2, 1, 218, 0, 1)).setObjects(("RPKI-ROUTER-MIB", "rpkiRtrCacheServerConnectionStatus"), ("RPKI-ROUTER-MIB", "rpkiRtrCacheServerLatestSerial"), ("RPKI-ROUTER-MIB", "rpkiRtrCacheServerSessionID"))
if mibBuilder.loadTexts: rpkiRtrCacheServerConnectionStateChange.setStatus('current')
rpkiRtrCacheServerConnectionToGoStale = NotificationType((1, 3, 6, 1, 2, 1, 218, 0, 2)).setObjects(("RPKI-ROUTER-MIB", "rpkiRtrCacheServerV4ActiveRecords"), ("RPKI-ROUTER-MIB", "rpkiRtrCacheServerV6ActiveRecords"), ("RPKI-ROUTER-MIB", "rpkiRtrCacheServerLatestSerial"), ("RPKI-ROUTER-MIB", "rpkiRtrCacheServerSessionID"), ("RPKI-ROUTER-MIB", "rpkiRtrCacheServerRefreshTimer"), ("RPKI-ROUTER-MIB", "rpkiRtrCacheServerTimeToRefresh"))
if mibBuilder.loadTexts: rpkiRtrCacheServerConnectionToGoStale.setStatus('current')
rpkiRtrCompliances = MibIdentifier((1, 3, 6, 1, 2, 1, 218, 2, 1))
rpkiRtrGroups = MibIdentifier((1, 3, 6, 1, 2, 1, 218, 2, 2))
rpkiRtrRFC6945ReadOnlyCompliance = ModuleCompliance((1, 3, 6, 1, 2, 1, 218, 2, 1, 1)).setObjects(("RPKI-ROUTER-MIB", "rpkiRtrCacheServerGroup"), ("RPKI-ROUTER-MIB", "rpkiRtrPrefixOriginGroup"), ("RPKI-ROUTER-MIB", "rpkiRtrNotificationsGroup"), ("RPKI-ROUTER-MIB", "rpkiRtrCacheServerErrorsGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    rpkiRtrRFC6945ReadOnlyCompliance = rpkiRtrRFC6945ReadOnlyCompliance.setStatus('current')
rpkiRtrCacheServerGroup = ObjectGroup((1, 3, 6, 1, 2, 1, 218, 2, 2, 1)).setObjects(("RPKI-ROUTER-MIB", "rpkiRtrDiscontinuityTimer"), ("RPKI-ROUTER-MIB", "rpkiRtrCacheServerLocalAddressType"), ("RPKI-ROUTER-MIB", "rpkiRtrCacheServerLocalAddress"), ("RPKI-ROUTER-MIB", "rpkiRtrCacheServerLocalPort"), ("RPKI-ROUTER-MIB", "rpkiRtrCacheServerPreference"), ("RPKI-ROUTER-MIB", "rpkiRtrCacheServerConnectionType"), ("RPKI-ROUTER-MIB", "rpkiRtrCacheServerConnectionStatus"), ("RPKI-ROUTER-MIB", "rpkiRtrCacheServerDescription"), ("RPKI-ROUTER-MIB", "rpkiRtrCacheServerMsgsReceived"), ("RPKI-ROUTER-MIB", "rpkiRtrCacheServerMsgsSent"), ("RPKI-ROUTER-MIB", "rpkiRtrCacheServerV4ActiveRecords"), ("RPKI-ROUTER-MIB", "rpkiRtrCacheServerV4Announcements"), ("RPKI-ROUTER-MIB", "rpkiRtrCacheServerV4Withdrawals"), ("RPKI-ROUTER-MIB", "rpkiRtrCacheServerV6ActiveRecords"), ("RPKI-ROUTER-MIB", "rpkiRtrCacheServerV6Announcements"), ("RPKI-ROUTER-MIB", "rpkiRtrCacheServerV6Withdrawals"), ("RPKI-ROUTER-MIB", "rpkiRtrCacheServerLatestSerial"), ("RPKI-ROUTER-MIB", "rpkiRtrCacheServerSessionID"), ("RPKI-ROUTER-MIB", "rpkiRtrCacheServerRefreshTimer"), ("RPKI-ROUTER-MIB", "rpkiRtrCacheServerTimeToRefresh"), ("RPKI-ROUTER-MIB", "rpkiRtrCacheServerId"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    rpkiRtrCacheServerGroup = rpkiRtrCacheServerGroup.setStatus('current')
rpkiRtrCacheServerErrorsGroup = ObjectGroup((1, 3, 6, 1, 2, 1, 218, 2, 2, 2)).setObjects(("RPKI-ROUTER-MIB", "rpkiRtrCacheServerErrorsCorruptData"), ("RPKI-ROUTER-MIB", "rpkiRtrCacheServerErrorsInternalError"), ("RPKI-ROUTER-MIB", "rpkiRtrCacheServerErrorsNoData"), ("RPKI-ROUTER-MIB", "rpkiRtrCacheServerErrorsInvalidRequest"), ("RPKI-ROUTER-MIB", "rpkiRtrCacheServerErrorsUnsupportedVersion"), ("RPKI-ROUTER-MIB", "rpkiRtrCacheServerErrorsUnsupportedPdu"), ("RPKI-ROUTER-MIB", "rpkiRtrCacheServerErrorsWithdrawalUnknown"), ("RPKI-ROUTER-MIB", "rpkiRtrCacheServerErrorsDuplicateAnnounce"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    rpkiRtrCacheServerErrorsGroup = rpkiRtrCacheServerErrorsGroup.setStatus('current')
rpkiRtrPrefixOriginGroup = ObjectGroup((1, 3, 6, 1, 2, 1, 218, 2, 2, 3)).setObjects(("RPKI-ROUTER-MIB", "rpkiRtrPrefixOriginCacheServerId"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    rpkiRtrPrefixOriginGroup = rpkiRtrPrefixOriginGroup.setStatus('current')
rpkiRtrNotificationsGroup = NotificationGroup((1, 3, 6, 1, 2, 1, 218, 2, 2, 4)).setObjects(("RPKI-ROUTER-MIB", "rpkiRtrCacheServerConnectionStateChange"), ("RPKI-ROUTER-MIB", "rpkiRtrCacheServerConnectionToGoStale"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    rpkiRtrNotificationsGroup = rpkiRtrNotificationsGroup.setStatus('current')
mibBuilder.exportSymbols("RPKI-ROUTER-MIB", rpkiRtrNotificationsGroup=rpkiRtrNotificationsGroup, rpkiRtrCacheServerV6Withdrawals=rpkiRtrCacheServerV6Withdrawals, rpkiRtrCacheServerV4Withdrawals=rpkiRtrCacheServerV4Withdrawals, rpkiRtrCacheServerDescription=rpkiRtrCacheServerDescription, rpkiRtrPrefixOriginCacheServerId=rpkiRtrPrefixOriginCacheServerId, rpkiRtrCacheServerRemotePort=rpkiRtrCacheServerRemotePort, rpkiRtrCacheServerMsgsSent=rpkiRtrCacheServerMsgsSent, rpkiRtrCacheServerV4ActiveRecords=rpkiRtrCacheServerV4ActiveRecords, rpkiRtrRFC6945ReadOnlyCompliance=rpkiRtrRFC6945ReadOnlyCompliance, PYSNMP_MODULE_ID=rpkiRtrMIB, rpkiRtrCacheServerLocalAddressType=rpkiRtrCacheServerLocalAddressType, RpkiRtrConnectionType=RpkiRtrConnectionType, rpkiRtrCacheServerErrorsTable=rpkiRtrCacheServerErrorsTable, rpkiRtrDiscontinuityTimer=rpkiRtrDiscontinuityTimer, rpkiRtrObjects=rpkiRtrObjects, rpkiRtrPrefixOriginMinLength=rpkiRtrPrefixOriginMinLength, rpkiRtrCacheServerTableEntry=rpkiRtrCacheServerTableEntry, rpkiRtrPrefixOriginGroup=rpkiRtrPrefixOriginGroup, rpkiRtrCacheServerConnectionStatus=rpkiRtrCacheServerConnectionStatus, rpkiRtrCacheServerSessionID=rpkiRtrCacheServerSessionID, rpkiRtrPrefixOriginASN=rpkiRtrPrefixOriginASN, rpkiRtrCacheServerErrorsGroup=rpkiRtrCacheServerErrorsGroup, rpkiRtrCacheServerPreference=rpkiRtrCacheServerPreference, rpkiRtrCacheServerConnectionStateChange=rpkiRtrCacheServerConnectionStateChange, rpkiRtrPrefixOriginAddressType=rpkiRtrPrefixOriginAddressType, rpkiRtrCacheServerLatestSerial=rpkiRtrCacheServerLatestSerial, rpkiRtrPrefixOriginMaxLength=rpkiRtrPrefixOriginMaxLength, rpkiRtrCacheServerErrorsInvalidRequest=rpkiRtrCacheServerErrorsInvalidRequest, rpkiRtrConformance=rpkiRtrConformance, rpkiRtrPrefixOriginTableEntry=rpkiRtrPrefixOriginTableEntry, rpkiRtrCacheServerErrorsTableEntry=rpkiRtrCacheServerErrorsTableEntry, rpkiRtrPrefixOriginAddress=rpkiRtrPrefixOriginAddress, rpkiRtrCacheServerRefreshTimer=rpkiRtrCacheServerRefreshTimer, rpkiRtrGroups=rpkiRtrGroups, rpkiRtrCacheServerGroup=rpkiRtrCacheServerGroup, rpkiRtrCacheServerErrorsDuplicateAnnounce=rpkiRtrCacheServerErrorsDuplicateAnnounce, rpkiRtrMIB=rpkiRtrMIB, rpkiRtrNotifications=rpkiRtrNotifications, rpkiRtrCacheServerMsgsReceived=rpkiRtrCacheServerMsgsReceived, rpkiRtrCacheServerV6Announcements=rpkiRtrCacheServerV6Announcements, rpkiRtrCacheServerErrorsInternalError=rpkiRtrCacheServerErrorsInternalError, rpkiRtrCacheServerConnectionType=rpkiRtrCacheServerConnectionType, rpkiRtrCacheServerErrorsWithdrawalUnknown=rpkiRtrCacheServerErrorsWithdrawalUnknown, rpkiRtrCacheServerConnectionToGoStale=rpkiRtrCacheServerConnectionToGoStale, rpkiRtrCompliances=rpkiRtrCompliances, rpkiRtrCacheServerV4Announcements=rpkiRtrCacheServerV4Announcements, rpkiRtrCacheServerV6ActiveRecords=rpkiRtrCacheServerV6ActiveRecords, rpkiRtrCacheServerErrorsUnsupportedPdu=rpkiRtrCacheServerErrorsUnsupportedPdu, rpkiRtrCacheServerRemoteAddressType=rpkiRtrCacheServerRemoteAddressType, rpkiRtrCacheServerRemoteAddress=rpkiRtrCacheServerRemoteAddress, rpkiRtrCacheServerLocalAddress=rpkiRtrCacheServerLocalAddress, rpkiRtrCacheServerErrorsCorruptData=rpkiRtrCacheServerErrorsCorruptData, rpkiRtrCacheServerLocalPort=rpkiRtrCacheServerLocalPort, rpkiRtrCacheServerErrorsNoData=rpkiRtrCacheServerErrorsNoData, rpkiRtrCacheServerErrorsUnsupportedVersion=rpkiRtrCacheServerErrorsUnsupportedVersion, rpkiRtrPrefixOriginTable=rpkiRtrPrefixOriginTable, rpkiRtrCacheServerId=rpkiRtrCacheServerId, rpkiRtrCacheServerTimeToRefresh=rpkiRtrCacheServerTimeToRefresh, rpkiRtrCacheServerTable=rpkiRtrCacheServerTable)
