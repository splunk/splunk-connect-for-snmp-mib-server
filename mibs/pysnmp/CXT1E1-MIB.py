#
# PySNMP MIB module CXT1E1-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/CXT1E1-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 18:17:56 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, OctetString, Integer = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "OctetString", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsUnion, ValueRangeConstraint, ValueSizeConstraint, ConstraintsIntersection, SingleValueConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsUnion", "ValueRangeConstraint", "ValueSizeConstraint", "ConstraintsIntersection", "SingleValueConstraint")
cxT1E1, = mibBuilder.importSymbols("CXProduct-SMI", "cxT1E1")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
MibScalar, MibTable, MibTableRow, MibTableColumn, iso, Counter32, ObjectIdentity, ModuleIdentity, MibIdentifier, Unsigned32, Gauge32, IpAddress, Bits, Counter64, Integer32, NotificationType, TimeTicks = mibBuilder.importSymbols("SNMPv2-SMI", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "iso", "Counter32", "ObjectIdentity", "ModuleIdentity", "MibIdentifier", "Unsigned32", "Gauge32", "IpAddress", "Bits", "Counter64", "Integer32", "NotificationType", "TimeTicks")
TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString")
t1e1CfgTable = MibTable((1, 3, 6, 1, 4, 1, 495, 2, 1, 8, 2, 10), )
if mibBuilder.loadTexts: t1e1CfgTable.setStatus('mandatory')
t1e1CfgEntry = MibTableRow((1, 3, 6, 1, 4, 1, 495, 2, 1, 8, 2, 10, 1), ).setIndexNames((0, "CXT1E1-MIB", "t1e1CfgLinkIndex"))
if mibBuilder.loadTexts: t1e1CfgEntry.setStatus('mandatory')
t1e1CfgLinkIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 8, 2, 10, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2))).setMaxAccess("readonly")
if mibBuilder.loadTexts: t1e1CfgLinkIndex.setStatus('mandatory')
t1e1CfgDebounce = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 8, 2, 10, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255)).clone(2)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: t1e1CfgDebounce.setStatus('mandatory')
t1e1CfgJitterAttenuator = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 8, 2, 10, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("t1e1NoJitterAttenuator", 1), ("t1e1RxAttenuator32Bits", 2), ("t1e1RxAttenuator128Bits", 3), ("t1e1TxAttenuator32Bits", 4), ("t1e1TxAttenuator128Bits", 5))).clone('t1e1NoJitterAttenuator')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: t1e1CfgJitterAttenuator.setStatus('mandatory')
t1e1CfgSyncCriteria = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 8, 2, 10, 1, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2)).clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: t1e1CfgSyncCriteria.setStatus('mandatory')
t1e1CfgT1RxEqualizerGainLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 8, 2, 10, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("t1e1EGLLow", 1), ("t1e1EGLHigh", 2))).clone('t1e1EGLLow')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: t1e1CfgT1RxEqualizerGainLimit.setStatus('mandatory')
t1e1CfgT1RxLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 8, 2, 10, 1, 50), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4))).setMaxAccess("readonly")
if mibBuilder.loadTexts: t1e1CfgT1RxLevel.setStatus('mandatory')
t1e1CfgT1FrameAlignmentChange = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 8, 2, 10, 1, 51), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: t1e1CfgT1FrameAlignmentChange.setStatus('mandatory')
t1e1CfgT1JitterAttenuatorTrip = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 8, 2, 10, 1, 52), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: t1e1CfgT1JitterAttenuatorTrip.setStatus('mandatory')
mibBuilder.exportSymbols("CXT1E1-MIB", t1e1CfgJitterAttenuator=t1e1CfgJitterAttenuator, t1e1CfgLinkIndex=t1e1CfgLinkIndex, t1e1CfgT1JitterAttenuatorTrip=t1e1CfgT1JitterAttenuatorTrip, t1e1CfgTable=t1e1CfgTable, t1e1CfgT1FrameAlignmentChange=t1e1CfgT1FrameAlignmentChange, t1e1CfgDebounce=t1e1CfgDebounce, t1e1CfgT1RxEqualizerGainLimit=t1e1CfgT1RxEqualizerGainLimit, t1e1CfgT1RxLevel=t1e1CfgT1RxLevel, t1e1CfgEntry=t1e1CfgEntry, t1e1CfgSyncCriteria=t1e1CfgSyncCriteria)
