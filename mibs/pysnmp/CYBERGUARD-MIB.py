#
# PySNMP MIB module CYBERGUARD-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/CYBERGUARD-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 18:18:42 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, OctetString, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "Integer", "OctetString", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueSizeConstraint, ConstraintsIntersection, SingleValueConstraint, ConstraintsUnion, ValueRangeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueSizeConstraint", "ConstraintsIntersection", "SingleValueConstraint", "ConstraintsUnion", "ValueRangeConstraint")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
ModuleIdentity, NotificationType, NotificationType, Gauge32, IpAddress, Counter32, Counter64, MibIdentifier, TimeTicks, MibScalar, MibTable, MibTableRow, MibTableColumn, ObjectIdentity, Integer32, enterprises, Unsigned32, Bits, iso = mibBuilder.importSymbols("SNMPv2-SMI", "ModuleIdentity", "NotificationType", "NotificationType", "Gauge32", "IpAddress", "Counter32", "Counter64", "MibIdentifier", "TimeTicks", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "ObjectIdentity", "Integer32", "enterprises", "Unsigned32", "Bits", "iso")
TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString")
class DisplayString(OctetString):
    pass

novell = MibIdentifier((1, 3, 6, 1, 4, 1, 23))
products = MibIdentifier((1, 3, 6, 1, 4, 1, 23, 1))
unixWare = MibIdentifier((1, 3, 6, 1, 4, 1, 23, 1, 13))
cyberGuard = MibIdentifier((1, 3, 6, 1, 4, 1, 23, 1, 13, 25))
cgfwMIB = MibIdentifier((1, 3, 6, 1, 4, 1, 23, 1, 13, 25, 1))
cgfwEvent = MibIdentifier((1, 3, 6, 1, 4, 1, 23, 1, 13, 25, 1, 2))
cgAccessDeny = MibScalar((1, 3, 6, 1, 4, 1, 23, 1, 13, 25, 1, 2, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cgAccessDeny.setStatus('mandatory')
cgAccessGrant = MibScalar((1, 3, 6, 1, 4, 1, 23, 1, 13, 25, 1, 2, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cgAccessGrant.setStatus('mandatory')
cgDiskSpace = MibScalar((1, 3, 6, 1, 4, 1, 23, 1, 13, 25, 1, 2, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cgDiskSpace.setStatus('mandatory')
cgFailedLogin = MibScalar((1, 3, 6, 1, 4, 1, 23, 1, 13, 25, 1, 2, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cgFailedLogin.setStatus('mandatory')
cgHostLimit = MibScalar((1, 3, 6, 1, 4, 1, 23, 1, 13, 25, 1, 2, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cgHostLimit.setStatus('mandatory')
cgForwardAttack = MibScalar((1, 3, 6, 1, 4, 1, 23, 1, 13, 25, 1, 2, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cgForwardAttack.setStatus('mandatory')
cgLandAttack = MibScalar((1, 3, 6, 1, 4, 1, 23, 1, 13, 25, 1, 2, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cgLandAttack.setStatus('mandatory')
cgPingOfDeath = MibScalar((1, 3, 6, 1, 4, 1, 23, 1, 13, 25, 1, 2, 8), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cgPingOfDeath.setStatus('mandatory')
cgTcpSynFlood = MibScalar((1, 3, 6, 1, 4, 1, 23, 1, 13, 25, 1, 2, 9), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cgTcpSynFlood.setStatus('mandatory')
cgIntfSpoof = MibScalar((1, 3, 6, 1, 4, 1, 23, 1, 13, 25, 1, 2, 10), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cgIntfSpoof.setStatus('mandatory')
cgMacViolation = MibScalar((1, 3, 6, 1, 4, 1, 23, 1, 13, 25, 1, 2, 11), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cgMacViolation.setStatus('mandatory')
cgPortScan = MibScalar((1, 3, 6, 1, 4, 1, 23, 1, 13, 25, 1, 2, 12), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cgPortScan.setStatus('mandatory')
cgBlockedFile = MibScalar((1, 3, 6, 1, 4, 1, 23, 1, 13, 25, 1, 2, 13), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cgBlockedFile.setStatus('mandatory')
cgHaTransition = MibScalar((1, 3, 6, 1, 4, 1, 23, 1, 13, 25, 1, 2, 14), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cgHaTransition.setStatus('mandatory')
cgHaNoHB = MibScalar((1, 3, 6, 1, 4, 1, 23, 1, 13, 25, 1, 2, 15), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cgHaNoHB.setStatus('mandatory')
cgSwUpdate = MibScalar((1, 3, 6, 1, 4, 1, 23, 1, 13, 25, 1, 2, 16), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cgSwUpdate.setStatus('mandatory')
cgPlatformSensor = MibScalar((1, 3, 6, 1, 4, 1, 23, 1, 13, 25, 1, 2, 17), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cgPlatformSensor.setStatus('mandatory')
cgAuditArchive = MibScalar((1, 3, 6, 1, 4, 1, 23, 1, 13, 25, 1, 2, 18), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cgAuditArchive.setStatus('mandatory')
mibBuilder.exportSymbols("CYBERGUARD-MIB", cgMacViolation=cgMacViolation, cgLandAttack=cgLandAttack, cgDiskSpace=cgDiskSpace, cgHostLimit=cgHostLimit, cgTcpSynFlood=cgTcpSynFlood, cgHaNoHB=cgHaNoHB, cgPingOfDeath=cgPingOfDeath, cgBlockedFile=cgBlockedFile, cgAccessDeny=cgAccessDeny, cgFailedLogin=cgFailedLogin, cgfwEvent=cgfwEvent, cgSwUpdate=cgSwUpdate, cyberGuard=cyberGuard, novell=novell, cgHaTransition=cgHaTransition, products=products, DisplayString=DisplayString, cgForwardAttack=cgForwardAttack, cgfwMIB=cgfwMIB, unixWare=unixWare, cgAccessGrant=cgAccessGrant, cgPlatformSensor=cgPlatformSensor, cgIntfSpoof=cgIntfSpoof, cgAuditArchive=cgAuditArchive, cgPortScan=cgPortScan)
