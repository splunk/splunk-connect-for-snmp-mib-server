#
# PySNMP MIB module SWITCH-ATM-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/SWITCH-ATM-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 21:05:31 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, Integer, OctetString = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "Integer", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueSizeConstraint, SingleValueConstraint, ConstraintsUnion, ConstraintsIntersection, ValueRangeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueSizeConstraint", "SingleValueConstraint", "ConstraintsUnion", "ConstraintsIntersection", "ValueRangeConstraint")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
MibScalar, MibTable, MibTableRow, MibTableColumn, IpAddress, Gauge32, TimeTicks, NotificationType, Bits, Counter64, Counter32, ObjectIdentity, ModuleIdentity, iso, MibIdentifier, Integer32, Unsigned32 = mibBuilder.importSymbols("SNMPv2-SMI", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "IpAddress", "Gauge32", "TimeTicks", "NotificationType", "Bits", "Counter64", "Counter32", "ObjectIdentity", "ModuleIdentity", "iso", "MibIdentifier", "Integer32", "Unsigned32")
MacAddress, DisplayString, RowStatus, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "MacAddress", "DisplayString", "RowStatus", "TextualConvention")
atmModule, = mibBuilder.importSymbols("TELESYN-ATI-TC", "atmModule")
switchAtmMib = ModuleIdentity((1, 3, 6, 1, 4, 1, 207, 8, 9, 2, 1, 1))
switchAtmMib.setRevisions(('1997-06-20 19:00', '1996-10-29 19:00',))
if mibBuilder.loadTexts: switchAtmMib.setLastUpdated('9706201900Z')
if mibBuilder.loadTexts: switchAtmMib.setOrganization('')
class IfIndexOrZero(TextualConvention, Integer32):
    status = 'current'
    displayHint = 'd'
    subtypeSpec = Integer32.subtypeSpec + ValueRangeConstraint(0, 2147483647)

class AtmAddress(TextualConvention, OctetString):
    status = 'current'
    displayHint = '1x'
    subtypeSpec = OctetString.subtypeSpec + ConstraintsUnion(ValueSizeConstraint(0, 0), ValueSizeConstraint(20, 20), )
class AtmPortIndex(TextualConvention, Integer32):
    status = 'current'
    displayHint = 'd'
    subtypeSpec = Integer32.subtypeSpec + ValueRangeConstraint(1, 10)

class AtmVpi(TextualConvention, Integer32):
    status = 'current'
    displayHint = 'd'
    subtypeSpec = Integer32.subtypeSpec + ValueRangeConstraint(0, 0)

class AtmVci(TextualConvention, Integer32):
    status = 'current'
    displayHint = 'd'
    subtypeSpec = Integer32.subtypeSpec + ValueRangeConstraint(0, 1023)

class AtmClientVci(TextualConvention, Integer32):
    status = 'current'
    displayHint = 'd'
    subtypeSpec = Integer32.subtypeSpec + ValueRangeConstraint(32, 1023)

class AtmLecIndex(TextualConvention, Integer32):
    status = 'current'
    displayHint = 'd'
    subtypeSpec = Integer32.subtypeSpec + ValueRangeConstraint(1, 32)

class AtmCipIndex(TextualConvention, Integer32):
    status = 'current'
    displayHint = 'd'
    subtypeSpec = Integer32.subtypeSpec + ValueRangeConstraint(1, 16)

class AtmAdminStatus(TextualConvention, Integer32):
    status = 'current'
    displayHint = 'd'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2))
    namedValues = NamedValues(("disable", 1), ("enable", 2))

class AtmOperStatus(TextualConvention, Integer32):
    status = 'current'
    displayHint = 'd'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))
    namedValues = NamedValues(("other", 1), ("inactive", 2), ("active", 3), ("loopBack", 4))

class AtmConnectionOperStatusCodes(TextualConvention, Integer32):
    status = 'current'
    displayHint = 'd'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3))
    namedValues = NamedValues(("unknown", 1), ("up", 2), ("down", 3))

class AtmTransmissionTypes(TextualConvention, Integer32):
    status = 'current'
    displayHint = 'd'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2))
    namedValues = NamedValues(("unknown", 1), ("sonetSTS3c", 2))

class AtmMediaTypes(TextualConvention, Integer32):
    status = 'current'
    displayHint = 'd'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))
    namedValues = NamedValues(("unknown", 1), ("coaxCable", 2), ("singleModeFiber", 3), ("multiModeFiber", 4), ("utp", 5))

class AtmQosClass(TextualConvention, Integer32):
    status = 'current'
    displayHint = 'd'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))
    namedValues = NamedValues(("unspecified", 1), ("class1", 2), ("class2", 3), ("class3", 4), ("class4", 5))

class AtmClearStats(TextualConvention, Integer32):
    status = 'current'
    displayHint = 'd'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2))
    namedValues = NamedValues(("noOp", 1), ("clearStats", 2))

class AtmxArpEntryType(TextualConvention, Integer32):
    status = 'current'
    displayHint = 'd'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))
    namedValues = NamedValues(("other", 1), ("learnedViaArp", 2), ("learnedViaData", 3), ("staticVolatile", 4), ("staticNonVolatile", 5))

class AtmxVlanRange(TextualConvention, Integer32):
    status = 'current'
    displayHint = 'd'
    subtypeSpec = Integer32.subtypeSpec + ValueRangeConstraint(1, 65535)

atmxPortGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 207, 8, 9, 2, 1, 1, 1))
atmxLecGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 207, 8, 9, 2, 1, 1, 2))
atmxCipGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 207, 8, 9, 2, 1, 1, 3))
atmxLayerStatsGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 207, 8, 9, 2, 1, 1, 4))
atmxVccStatsGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 207, 8, 9, 2, 1, 1, 5))
atmxLecStatsGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 207, 8, 9, 2, 1, 1, 6))
atmxCipStatsGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 207, 8, 9, 2, 1, 1, 7))
atmxSscopStatsGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 207, 8, 9, 2, 1, 1, 8))
atmxIlmiStatsGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 207, 8, 9, 2, 1, 1, 9))
atmxVccGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 207, 8, 9, 2, 1, 1, 10))
atmxAddressGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 207, 8, 9, 2, 1, 1, 11))
atmxCipArpGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 207, 8, 9, 2, 1, 1, 12))
atmxLecArpGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 207, 8, 9, 2, 1, 1, 13))
atmxPtToPtGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 207, 8, 9, 2, 1, 1, 14))
atmxTrunkGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 207, 8, 9, 2, 1, 1, 15))
atmxPortTable = MibTable((1, 3, 6, 1, 4, 1, 207, 8, 9, 2, 1, 1, 1, 1), )
if mibBuilder.loadTexts: atmxPortTable.setStatus('current')
atmxPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 207, 8, 9, 2, 1, 1, 1, 1, 1), ).setIndexNames((0, "SWITCH-ATM-MIB", "atmxPortIndex"))
if mibBuilder.loadTexts: atmxPortEntry.setStatus('current')
atmxPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 9, 2, 1, 1, 1, 1, 1, 1), AtmPortIndex())
if mibBuilder.loadTexts: atmxPortIndex.setStatus('current')
atmxPortDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 9, 2, 1, 1, 1, 1, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 31))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmxPortDescription.setStatus('current')
atmxPortTransmissionType = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 9, 2, 1, 1, 1, 1, 1, 3), AtmTransmissionTypes()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmxPortTransmissionType.setStatus('current')
atmxPortMediaType = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 9, 2, 1, 1, 1, 1, 1, 4), AtmMediaTypes()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmxPortMediaType.setStatus('current')
atmxPortOperStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 9, 2, 1, 1, 1, 1, 1, 5), AtmOperStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmxPortOperStatus.setStatus('current')
atmxPortMaxVCCs = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 9, 2, 1, 1, 1, 1, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1023))).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmxPortMaxVCCs.setStatus('current')
atmxPortMaxVciBits = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 9, 2, 1, 1, 1, 1, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 10))).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmxPortMaxVciBits.setStatus('current')
atmxPortAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 9, 2, 1, 1, 1, 1, 1, 8), AtmAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmxPortAddress.setStatus('current')
atmxPortSignalingVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 9, 2, 1, 1, 1, 1, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("ver30", 1), ("ver31", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmxPortSignalingVersion.setStatus('current')
atmxPortSignalingVci = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 9, 2, 1, 1, 1, 1, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(5, 5))).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmxPortSignalingVci.setStatus('current')
atmxPortILMIVci = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 9, 2, 1, 1, 1, 1, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(16, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmxPortILMIVci.setStatus('current')
atmxPortEnableIlmi = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 9, 2, 1, 1, 1, 1, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("false", 1), ("true", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmxPortEnableIlmi.setStatus('current')
atmxPortEnableIlmiPoll = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 9, 2, 1, 1, 1, 1, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("false", 1), ("true", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmxPortEnableIlmiPoll.setStatus('current')
atmxPortEnablePlScramble = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 9, 2, 1, 1, 1, 1, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("false", 1), ("true", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmxPortEnablePlScramble.setStatus('current')
atmxPortClock = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 9, 2, 1, 1, 1, 1, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("local", 1), ("loopTimed", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmxPortClock.setStatus('current')
atmxPortMacAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 9, 2, 1, 1, 1, 1, 1, 16), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmxPortMacAddress.setStatus('current')
atmxPortAdaptorRamSize = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 9, 2, 1, 1, 1, 1, 1, 17), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmxPortAdaptorRamSize.setStatus('current')
atmxPortIlmiStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 9, 2, 1, 1, 1, 1, 1, 18), AtmConnectionOperStatusCodes()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmxPortIlmiStatus.setStatus('current')
atmxPortSignalingStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 9, 2, 1, 1, 1, 1, 1, 19), AtmConnectionOperStatusCodes()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmxPortSignalingStatus.setStatus('current')
atmxPortSignalingMode = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 9, 2, 1, 1, 1, 1, 1, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("pvc", 1), ("svc", 2))).clone('pvc')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmxPortSignalingMode.setStatus('current')
atmxLecTable = MibTable((1, 3, 6, 1, 4, 1, 207, 8, 9, 2, 1, 1, 2, 1), )
if mibBuilder.loadTexts: atmxLecTable.setStatus('current')
atmxLecEntry = MibTableRow((1, 3, 6, 1, 4, 1, 207, 8, 9, 2, 1, 1, 2, 1, 1), ).setIndexNames((0, "SWITCH-ATM-MIB", "atmxLecIndex"))
if mibBuilder.loadTexts: atmxLecEntry.setStatus('current')
atmxLecIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 9, 2, 1, 1, 2, 1, 1, 1), AtmLecIndex())
if mibBuilder.loadTexts: atmxLecIndex.setStatus('current')
atmxLecDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 9, 2, 1, 1, 2, 1, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 31))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: atmxLecDescription.setStatus('current')
atmxElanName = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 9, 2, 1, 1, 2, 1, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 31))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: atmxElanName.setStatus('current')
atmxLecConfigMode = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 9, 2, 1, 1, 2, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("auto", 1), ("manual", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: atmxLecConfigMode.setStatus('current')
atmxLecServerAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 9, 2, 1, 1, 2, 1, 1, 5), AtmAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: atmxLecServerAddress.setStatus('current')
atmxLecUnicastMacAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 9, 2, 1, 1, 2, 1, 1, 6), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmxLecUnicastMacAddress.setStatus('obsolete')
atmxLecMaxUnknownFrameCount = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 9, 2, 1, 1, 2, 1, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 10))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: atmxLecMaxUnknownFrameCount.setStatus('current')
atmxLecMaxArpRetryCount = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 9, 2, 1, 1, 2, 1, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: atmxLecMaxArpRetryCount.setStatus('current')
atmxLecArpRespTime = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 9, 2, 1, 1, 2, 1, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 30))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: atmxLecArpRespTime.setStatus('current')
atmxLecMaxUnknownFrameTime = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 9, 2, 1, 1, 2, 1, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 60))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: atmxLecMaxUnknownFrameTime.setStatus('current')
atmxLecControlTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 9, 2, 1, 1, 2, 1, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(10, 300))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: atmxLecControlTimeout.setStatus('current')
atmxLecVccTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 9, 2, 1, 1, 2, 1, 1, 12), Unsigned32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: atmxLecVccTimeout.setStatus('current')
atmxLecAgeingTime = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 9, 2, 1, 1, 2, 1, 1, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(10, 300))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: atmxLecAgeingTime.setStatus('current')
atmxLecFlushTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 9, 2, 1, 1, 2, 1, 1, 14), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: atmxLecFlushTimeout.setStatus('current')
atmxLecVPortNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 9, 2, 1, 1, 2, 1, 1, 15), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 256))).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmxLecVPortNumber.setStatus('deprecated')
atmxLecProtocolState = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 9, 2, 1, 1, 2, 1, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12))).clone(namedValues=NamedValues(("inActive", 0), ("ctrlDirConReq", 1), ("ctrlDistConRsp", 2), ("mcastSndConReq", 3), ("mcastSndFwdConRsp", 4), ("mcastSndFwdConCfm", 5), ("mcastSndConCfm", 6), ("mcastFwdConRsp", 7), ("busArpReq", 8), ("cfgReq", 9), ("joinReq", 10), ("active", 11), ("cfgDirConReq", 12)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmxLecProtocolState.setStatus('current')
atmxLecRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 9, 2, 1, 1, 2, 1, 1, 17), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: atmxLecRowStatus.setStatus('current')
atmxLecIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 9, 2, 1, 1, 2, 1, 1, 18), IfIndexOrZero()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmxLecIfIndex.setStatus('current')
atmxLecId = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 9, 2, 1, 1, 2, 1, 1, 19), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 32767))).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmxLecId.setStatus('current')
atmxLecControlDirectVcc = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 9, 2, 1, 1, 2, 1, 1, 20), AtmVci()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmxLecControlDirectVcc.setStatus('current')
atmxLecControlDistributeVcc = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 9, 2, 1, 1, 2, 1, 1, 21), AtmVci()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmxLecControlDistributeVcc.setStatus('current')
atmxLecMulticastSendVcc = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 9, 2, 1, 1, 2, 1, 1, 22), AtmVci()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmxLecMulticastSendVcc.setStatus('current')
atmxLecMulticastForwardVcc = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 9, 2, 1, 1, 2, 1, 1, 23), AtmVci()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmxLecMulticastForwardVcc.setStatus('current')
atmxLecVlanNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 9, 2, 1, 1, 2, 1, 1, 24), AtmxVlanRange()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: atmxLecVlanNumber.setStatus('current')
atmxCipTable = MibTable((1, 3, 6, 1, 4, 1, 207, 8, 9, 2, 1, 1, 3, 1), )
if mibBuilder.loadTexts: atmxCipTable.setStatus('current')
atmxCipEntry = MibTableRow((1, 3, 6, 1, 4, 1, 207, 8, 9, 2, 1, 1, 3, 1, 1), ).setIndexNames((0, "SWITCH-ATM-MIB", "atmxCipIndex"))
if mibBuilder.loadTexts: atmxCipEntry.setStatus('current')
atmxCipIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 9, 2, 1, 1, 3, 1, 1, 1), AtmCipIndex())
if mibBuilder.loadTexts: atmxCipIndex.setStatus('current')
atmxCipDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 9, 2, 1, 1, 3, 1, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 31))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: atmxCipDescription.setStatus('current')
atmxCipIPAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 9, 2, 1, 1, 3, 1, 1, 3), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: atmxCipIPAddress.setStatus('current')
atmxCipIPSubnetMask = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 9, 2, 1, 1, 3, 1, 1, 4), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: atmxCipIPSubnetMask.setStatus('current')
atmxCipConnectionType = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 9, 2, 1, 1, 3, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("pvc", 1), ("svc", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: atmxCipConnectionType.setStatus('current')
atmxCipVci = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 9, 2, 1, 1, 3, 1, 1, 6), AtmVci()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: atmxCipVci.setStatus('obsolete')
atmxCipServerAtmAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 9, 2, 1, 1, 3, 1, 1, 7), AtmAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: atmxCipServerAtmAddress.setStatus('current')
atmxCipMtuSize = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 9, 2, 1, 1, 3, 1, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(64, 9180)).clone(9160)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: atmxCipMtuSize.setStatus('current')
atmxCipIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 9, 2, 1, 1, 3, 1, 1, 9), IfIndexOrZero()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmxCipIfIndex.setStatus('current')
atmxCipProtocolState = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 9, 2, 1, 1, 3, 1, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("inactive", 0), ("arpConReq", 1), ("active", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmxCipProtocolState.setStatus('current')
atmxCipAdmStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 9, 2, 1, 1, 3, 1, 1, 11), AtmAdminStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: atmxCipAdmStatus.setStatus('current')
atmxCipOperStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 9, 2, 1, 1, 3, 1, 1, 12), AtmOperStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmxCipOperStatus.setStatus('current')
atmxCipRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 9, 2, 1, 1, 3, 1, 1, 13), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: atmxCipRowStatus.setStatus('current')
atmxCipRipMode = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 9, 2, 1, 1, 3, 1, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("silent", 1), ("active", 2), ("deaf", 3), ("inactive", 4))).clone('silent')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: atmxCipRipMode.setStatus('current')
atmxCipVciTable = MibTable((1, 3, 6, 1, 4, 1, 207, 8, 9, 2, 1, 1, 3, 2), )
if mibBuilder.loadTexts: atmxCipVciTable.setStatus('current')
atmxCipVciEntry = MibTableRow((1, 3, 6, 1, 4, 1, 207, 8, 9, 2, 1, 1, 3, 2, 1), ).setIndexNames((0, "SWITCH-ATM-MIB", "atmxCipIndex"), (0, "SWITCH-ATM-MIB", "atmxCipVciId"))
if mibBuilder.loadTexts: atmxCipVciEntry.setStatus('current')
atmxCipVciId = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 9, 2, 1, 1, 3, 2, 1, 1), AtmClientVci())
if mibBuilder.loadTexts: atmxCipVciId.setStatus('current')
atmxCipVciRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 9, 2, 1, 1, 3, 2, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: atmxCipVciRowStatus.setStatus('current')
atmxLayerStatsTable = MibTable((1, 3, 6, 1, 4, 1, 207, 8, 9, 2, 1, 1, 4, 1), )
if mibBuilder.loadTexts: atmxLayerStatsTable.setStatus('current')
atmxLayerStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 207, 8, 9, 2, 1, 1, 4, 1, 1), ).setIndexNames((0, "SWITCH-ATM-MIB", "atmxPortIndex"))
if mibBuilder.loadTexts: atmxLayerStatsEntry.setStatus('current')
atmxLayerStatsTxCells = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 9, 2, 1, 1, 4, 1, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmxLayerStatsTxCells.setStatus('current')
atmxLayerStatsRxCells = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 9, 2, 1, 1, 4, 1, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmxLayerStatsRxCells.setStatus('current')
atmxLayerStatsTxCellDiscards = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 9, 2, 1, 1, 4, 1, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmxLayerStatsTxCellDiscards.setStatus('current')
atmxLayerStatsRxCellDiscards = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 9, 2, 1, 1, 4, 1, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmxLayerStatsRxCellDiscards.setStatus('current')
atmxLayerStatsClear = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 9, 2, 1, 1, 4, 1, 1, 6), AtmClearStats()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmxLayerStatsClear.setStatus('current')
atmxLayerStatsClearTime = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 9, 2, 1, 1, 4, 1, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmxLayerStatsClearTime.setStatus('current')
aal5LayerStatsTable = MibTable((1, 3, 6, 1, 4, 1, 207, 8, 9, 2, 1, 1, 4, 2), )
if mibBuilder.loadTexts: aal5LayerStatsTable.setStatus('current')
aal5LayerStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 207, 8, 9, 2, 1, 1, 4, 2, 1), ).setIndexNames((0, "SWITCH-ATM-MIB", "atmxPortIndex"))
if mibBuilder.loadTexts: aal5LayerStatsEntry.setStatus('current')
aal5LayerTxOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 9, 2, 1, 1, 4, 2, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aal5LayerTxOctets.setStatus('current')
aal5LayerTxCells = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 9, 2, 1, 1, 4, 2, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aal5LayerTxCells.setStatus('current')
aal5LayerTxSDUs = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 9, 2, 1, 1, 4, 2, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aal5LayerTxSDUs.setStatus('current')
aal5LayerTxSDUDiscards = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 9, 2, 1, 1, 4, 2, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aal5LayerTxSDUDiscards.setStatus('current')
aal5LayerTxErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 9, 2, 1, 1, 4, 2, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aal5LayerTxErrors.setStatus('current')
aal5LayerRxOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 9, 2, 1, 1, 4, 2, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aal5LayerRxOctets.setStatus('current')
aal5LayerRxCells = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 9, 2, 1, 1, 4, 2, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aal5LayerRxCells.setStatus('current')
aal5LayerRxSDUs = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 9, 2, 1, 1, 4, 2, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aal5LayerRxSDUs.setStatus('current')
aal5LayerRxSDUDiscards = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 9, 2, 1, 1, 4, 2, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aal5LayerRxSDUDiscards.setStatus('current')
aal5LayerRxErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 9, 2, 1, 1, 4, 2, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aal5LayerRxErrors.setStatus('current')
aal5LayerRxSarTimeouts = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 9, 2, 1, 1, 4, 2, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aal5LayerRxSarTimeouts.setStatus('current')
aal5LayerRxCrcErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 9, 2, 1, 1, 4, 2, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aal5LayerRxCrcErrors.setStatus('current')
aal5LayerRxSDUInvalidSz = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 9, 2, 1, 1, 4, 2, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aal5LayerRxSDUInvalidSz.setStatus('current')
aal5LayerClearStats = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 9, 2, 1, 1, 4, 2, 1, 15), AtmClearStats()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aal5LayerClearStats.setStatus('current')
aal5LayerStatsClearTime = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 9, 2, 1, 1, 4, 2, 1, 16), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: aal5LayerStatsClearTime.setStatus('current')
atmxVccStatsTable = MibTable((1, 3, 6, 1, 4, 1, 207, 8, 9, 2, 1, 1, 5, 1), )
if mibBuilder.loadTexts: atmxVccStatsTable.setStatus('current')
atmxVccStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 207, 8, 9, 2, 1, 1, 5, 1, 1), ).setIndexNames((0, "SWITCH-ATM-MIB", "atmxPortIndex"), (0, "SWITCH-ATM-MIB", "atmxVccVci"))
if mibBuilder.loadTexts: atmxVccStatsEntry.setStatus('current')
atmxVccStatsTxSDUs = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 9, 2, 1, 1, 5, 1, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmxVccStatsTxSDUs.setStatus('current')
atmxVccStatsTxCells = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 9, 2, 1, 1, 5, 1, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmxVccStatsTxCells.setStatus('current')
atmxVccStatsTxOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 9, 2, 1, 1, 5, 1, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmxVccStatsTxOctets.setStatus('current')
atmxVccStatsRxSDUs = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 9, 2, 1, 1, 5, 1, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmxVccStatsRxSDUs.setStatus('current')
atmxVccStatsRxCells = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 9, 2, 1, 1, 5, 1, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmxVccStatsRxCells.setStatus('current')
atmxVccStatsRxOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 9, 2, 1, 1, 5, 1, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmxVccStatsRxOctets.setStatus('current')
atmxVccStatsTxSDUDiscards = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 9, 2, 1, 1, 5, 1, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmxVccStatsTxSDUDiscards.setStatus('current')
atmxVccStatsTxErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 9, 2, 1, 1, 5, 1, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmxVccStatsTxErrors.setStatus('current')
atmxVccStatsRxSDUDiscards = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 9, 2, 1, 1, 5, 1, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmxVccStatsRxSDUDiscards.setStatus('current')
atmxVccStatsRxErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 9, 2, 1, 1, 5, 1, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmxVccStatsRxErrors.setStatus('current')
atmxVccStatsRxSarTimeouts = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 9, 2, 1, 1, 5, 1, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmxVccStatsRxSarTimeouts.setStatus('current')
atmxVccStatsRxCrcErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 9, 2, 1, 1, 5, 1, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmxVccStatsRxCrcErrors.setStatus('current')
atmxVccStatsRxOversizedSdus = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 9, 2, 1, 1, 5, 1, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmxVccStatsRxOversizedSdus.setStatus('current')
atmxVccStatsConnCreateTime = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 9, 2, 1, 1, 5, 1, 1, 16), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmxVccStatsConnCreateTime.setStatus('current')
atmxVccStatsConnInIdleTime = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 9, 2, 1, 1, 5, 1, 1, 17), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmxVccStatsConnInIdleTime.setStatus('current')
atmxVccStatsConnOutIdleTime = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 9, 2, 1, 1, 5, 1, 1, 18), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmxVccStatsConnOutIdleTime.setStatus('current')
atmxVccStatsConnModifiedTime = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 9, 2, 1, 1, 5, 1, 1, 19), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmxVccStatsConnModifiedTime.setStatus('current')
atmxLecStatsTable = MibTable((1, 3, 6, 1, 4, 1, 207, 8, 9, 2, 1, 1, 6, 1), )
if mibBuilder.loadTexts: atmxLecStatsTable.setStatus('current')
atmxLecStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 207, 8, 9, 2, 1, 1, 6, 1, 1), ).setIndexNames((0, "SWITCH-ATM-MIB", "atmxLecIndex"))
if mibBuilder.loadTexts: atmxLecStatsEntry.setStatus('current')
atmxLecStatsTxArpReq = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 9, 2, 1, 1, 6, 1, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmxLecStatsTxArpReq.setStatus('current')
atmxLecStatsTxArpRsp = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 9, 2, 1, 1, 6, 1, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmxLecStatsTxArpRsp.setStatus('current')
atmxLecStatsTxControlPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 9, 2, 1, 1, 6, 1, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmxLecStatsTxControlPkts.setStatus('current')
atmxLecStatsTxUnicastPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 9, 2, 1, 1, 6, 1, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmxLecStatsTxUnicastPkts.setStatus('current')
atmxLecStatsTxMulticastPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 9, 2, 1, 1, 6, 1, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmxLecStatsTxMulticastPkts.setStatus('current')
atmxLecStatsTxBroadcastPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 9, 2, 1, 1, 6, 1, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmxLecStatsTxBroadcastPkts.setStatus('current')
atmxLecStatsTxDiscardPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 9, 2, 1, 1, 6, 1, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmxLecStatsTxDiscardPkts.setStatus('current')
atmxLecStatsRxArpReq = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 9, 2, 1, 1, 6, 1, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmxLecStatsRxArpReq.setStatus('current')
atmxLecStatsRxArpRsp = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 9, 2, 1, 1, 6, 1, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmxLecStatsRxArpRsp.setStatus('current')
atmxLecStatsRxControlPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 9, 2, 1, 1, 6, 1, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmxLecStatsRxControlPkts.setStatus('current')
atmxLecStatsRxUnicastPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 9, 2, 1, 1, 6, 1, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmxLecStatsRxUnicastPkts.setStatus('current')
atmxLecStatsRxMulticastPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 9, 2, 1, 1, 6, 1, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmxLecStatsRxMulticastPkts.setStatus('current')
atmxLecStatsRxBroadcastPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 9, 2, 1, 1, 6, 1, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmxLecStatsRxBroadcastPkts.setStatus('current')
atmxLecStatsRxDiscardPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 9, 2, 1, 1, 6, 1, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmxLecStatsRxDiscardPkts.setStatus('current')
atmxCipStatsTable = MibTable((1, 3, 6, 1, 4, 1, 207, 8, 9, 2, 1, 1, 7, 1), )
if mibBuilder.loadTexts: atmxCipStatsTable.setStatus('current')
atmxCipStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 207, 8, 9, 2, 1, 1, 7, 1, 1), ).setIndexNames((0, "SWITCH-ATM-MIB", "atmxCipIndex"))
if mibBuilder.loadTexts: atmxCipStatsEntry.setStatus('current')
atmxCipStatsPktsFromOtherLIS = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 9, 2, 1, 1, 7, 1, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmxCipStatsPktsFromOtherLIS.setStatus('current')
atmxCipStatsTxArpReq = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 9, 2, 1, 1, 7, 1, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmxCipStatsTxArpReq.setStatus('current')
atmxCipStatsTxArpRsp = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 9, 2, 1, 1, 7, 1, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmxCipStatsTxArpRsp.setStatus('current')
atmxCipStatsTxInArpReq = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 9, 2, 1, 1, 7, 1, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmxCipStatsTxInArpReq.setStatus('current')
atmxCipStatsTxInArpRsp = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 9, 2, 1, 1, 7, 1, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmxCipStatsTxInArpRsp.setStatus('current')
atmxCipStatsTxDiscards = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 9, 2, 1, 1, 7, 1, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmxCipStatsTxDiscards.setStatus('current')
atmxCipStatsRxArpReq = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 9, 2, 1, 1, 7, 1, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmxCipStatsRxArpReq.setStatus('current')
atmxCipStatsRxArpRsp = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 9, 2, 1, 1, 7, 1, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmxCipStatsRxArpRsp.setStatus('current')
atmxCipStatsRxInArpReq = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 9, 2, 1, 1, 7, 1, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmxCipStatsRxInArpReq.setStatus('current')
atmxCipStatsRxInArpRsp = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 9, 2, 1, 1, 7, 1, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmxCipStatsRxInArpRsp.setStatus('current')
atmxCipStatsRxDiscards = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 9, 2, 1, 1, 7, 1, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmxCipStatsRxDiscards.setStatus('current')
atmxSscopStatsTable = MibTable((1, 3, 6, 1, 4, 1, 207, 8, 9, 2, 1, 1, 8, 1), )
if mibBuilder.loadTexts: atmxSscopStatsTable.setStatus('current')
atmxSscopStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 207, 8, 9, 2, 1, 1, 8, 1, 1), ).setIndexNames((0, "SWITCH-ATM-MIB", "atmxPortIndex"))
if mibBuilder.loadTexts: atmxSscopStatsEntry.setStatus('current')
atmxSscopStatsTxTotalPdus = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 9, 2, 1, 1, 8, 1, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmxSscopStatsTxTotalPdus.setStatus('current')
atmxSscopStatsTxDiscardSdus = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 9, 2, 1, 1, 8, 1, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmxSscopStatsTxDiscardSdus.setStatus('current')
atmxSscopStatsTxDiscardPdus = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 9, 2, 1, 1, 8, 1, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmxSscopStatsTxDiscardPdus.setStatus('current')
atmxSscopStatsTxErrorPdus = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 9, 2, 1, 1, 8, 1, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmxSscopStatsTxErrorPdus.setStatus('current')
atmxSscopStatsTxBufferInUseCtr = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 9, 2, 1, 1, 8, 1, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmxSscopStatsTxBufferInUseCtr.setStatus('current')
atmxSscopStatsTxBufferInUseGauge = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 9, 2, 1, 1, 8, 1, 1, 6), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmxSscopStatsTxBufferInUseGauge.setStatus('current')
atmxSscopStatsRxTotalPdus = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 9, 2, 1, 1, 8, 1, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmxSscopStatsRxTotalPdus.setStatus('current')
atmxSscopStatsRxDiscardPdus = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 9, 2, 1, 1, 8, 1, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmxSscopStatsRxDiscardPdus.setStatus('current')
atmxSscopStatsRxErrorPdus = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 9, 2, 1, 1, 8, 1, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmxSscopStatsRxErrorPdus.setStatus('current')
atmxSscopStatsRxBufferInUseCtr = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 9, 2, 1, 1, 8, 1, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmxSscopStatsRxBufferInUseCtr.setStatus('current')
atmxSscopStatsRxBufferInUseGauge = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 9, 2, 1, 1, 8, 1, 1, 11), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmxSscopStatsRxBufferInUseGauge.setStatus('current')
atmxIlmiStatsTable = MibTable((1, 3, 6, 1, 4, 1, 207, 8, 9, 2, 1, 1, 9, 1), )
if mibBuilder.loadTexts: atmxIlmiStatsTable.setStatus('current')
atmxIlmiStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 207, 8, 9, 2, 1, 1, 9, 1, 1), ).setIndexNames((0, "SWITCH-ATM-MIB", "atmxPortIndex"))
if mibBuilder.loadTexts: atmxIlmiStatsEntry.setStatus('current')
atmxIlmiTxPDUs = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 9, 2, 1, 1, 9, 1, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmxIlmiTxPDUs.setStatus('current')
atmxIlmiRxPDUs = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 9, 2, 1, 1, 9, 1, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmxIlmiRxPDUs.setStatus('current')
atmxIlmiRxDiscardPDUs = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 9, 2, 1, 1, 9, 1, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmxIlmiRxDiscardPDUs.setStatus('current')
atmxVccTable = MibTable((1, 3, 6, 1, 4, 1, 207, 8, 9, 2, 1, 1, 10, 1), )
if mibBuilder.loadTexts: atmxVccTable.setStatus('current')
atmxVccEntry = MibTableRow((1, 3, 6, 1, 4, 1, 207, 8, 9, 2, 1, 1, 10, 1, 1), ).setIndexNames((0, "SWITCH-ATM-MIB", "atmxPortIndex"), (0, "SWITCH-ATM-MIB", "atmxVccVci"))
if mibBuilder.loadTexts: atmxVccEntry.setStatus('current')
atmxVccVpi = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 9, 2, 1, 1, 10, 1, 1, 2), AtmVpi()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmxVccVpi.setStatus('current')
atmxVccVci = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 9, 2, 1, 1, 10, 1, 1, 3), AtmVci())
if mibBuilder.loadTexts: atmxVccVci.setStatus('current')
atmxVccCircuitType = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 9, 2, 1, 1, 10, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("pvc", 1), ("svc", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: atmxVccCircuitType.setStatus('current')
atmxVccOperStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 9, 2, 1, 1, 10, 1, 1, 5), AtmConnectionOperStatusCodes()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmxVccOperStatus.setStatus('current')
atmxVccUpTime = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 9, 2, 1, 1, 10, 1, 1, 6), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmxVccUpTime.setStatus('current')
atmxVccTxQosClass = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 9, 2, 1, 1, 10, 1, 1, 7), AtmQosClass()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: atmxVccTxQosClass.setStatus('current')
atmxVccTxBestEffort = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 9, 2, 1, 1, 10, 1, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("false", 1), ("true", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: atmxVccTxBestEffort.setStatus('current')
atmxVccTxPeakCellRate = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 9, 2, 1, 1, 10, 1, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(192, 20000))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: atmxVccTxPeakCellRate.setStatus('current')
atmxVccRxQosClass = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 9, 2, 1, 1, 10, 1, 1, 10), AtmQosClass()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: atmxVccRxQosClass.setStatus('current')
atmxVccRxBestEffort = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 9, 2, 1, 1, 10, 1, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("false", 1), ("true", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: atmxVccRxBestEffort.setStatus('current')
atmxVccRxPeakCellRate = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 9, 2, 1, 1, 10, 1, 1, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(192, 20000))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: atmxVccRxPeakCellRate.setStatus('current')
atmxVccRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 9, 2, 1, 1, 10, 1, 1, 13), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: atmxVccRowStatus.setStatus('current')
atmxVccServiceType = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 9, 2, 1, 1, 10, 1, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("sscop", 1), ("ilmi", 2), ("lec", 3), ("cip", 4), ("oam", 5), ("pt-pt", 6), ("trunk", 7), ("csr", 8)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: atmxVccServiceType.setStatus('current')
atmxLecArpTable = MibTable((1, 3, 6, 1, 4, 1, 207, 8, 9, 2, 1, 1, 13, 1), )
if mibBuilder.loadTexts: atmxLecArpTable.setStatus('current')
atmxLecArpEntry = MibTableRow((1, 3, 6, 1, 4, 1, 207, 8, 9, 2, 1, 1, 13, 1, 1), ).setIndexNames((0, "SWITCH-ATM-MIB", "atmxLecIndex"), (0, "SWITCH-ATM-MIB", "atmxLecArpMacAddress"))
if mibBuilder.loadTexts: atmxLecArpEntry.setStatus('current')
atmxLecArpMacAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 9, 2, 1, 1, 13, 1, 1, 2), MacAddress())
if mibBuilder.loadTexts: atmxLecArpMacAddress.setStatus('current')
atmxLecArpAtmAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 9, 2, 1, 1, 13, 1, 1, 3), AtmAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: atmxLecArpAtmAddress.setStatus('current')
atmxLecArpVci = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 9, 2, 1, 1, 13, 1, 1, 4), AtmVci()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: atmxLecArpVci.setStatus('current')
atmxLecArpTimeToLive = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 9, 2, 1, 1, 13, 1, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 15))).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmxLecArpTimeToLive.setStatus('current')
atmxLecArpSource = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 9, 2, 1, 1, 13, 1, 1, 6), AtmxArpEntryType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmxLecArpSource.setStatus('current')
atmxLecArpRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 9, 2, 1, 1, 13, 1, 1, 7), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: atmxLecArpRowStatus.setStatus('current')
atmxCipArpTable = MibTable((1, 3, 6, 1, 4, 1, 207, 8, 9, 2, 1, 1, 12, 1), )
if mibBuilder.loadTexts: atmxCipArpTable.setStatus('current')
atmxCipArpEntry = MibTableRow((1, 3, 6, 1, 4, 1, 207, 8, 9, 2, 1, 1, 12, 1, 1), ).setIndexNames((0, "SWITCH-ATM-MIB", "atmxCipIndex"), (0, "SWITCH-ATM-MIB", "atmxCipArpIPAddress"))
if mibBuilder.loadTexts: atmxCipArpEntry.setStatus('current')
atmxCipArpIPAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 9, 2, 1, 1, 12, 1, 1, 2), IpAddress())
if mibBuilder.loadTexts: atmxCipArpIPAddress.setStatus('current')
atmxCipArpAtmAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 9, 2, 1, 1, 12, 1, 1, 3), AtmAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: atmxCipArpAtmAddress.setStatus('current')
atmxCipArpVci = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 9, 2, 1, 1, 12, 1, 1, 4), AtmClientVci()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: atmxCipArpVci.setStatus('current')
atmxCipArpTimeToLive = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 9, 2, 1, 1, 12, 1, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 15))).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmxCipArpTimeToLive.setStatus('current')
atmxCipArpSource = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 9, 2, 1, 1, 12, 1, 1, 6), AtmxArpEntryType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: atmxCipArpSource.setStatus('current')
atmxCipArpRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 9, 2, 1, 1, 12, 1, 1, 7), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: atmxCipArpRowStatus.setStatus('current')
atmxPtToPtTable = MibTable((1, 3, 6, 1, 4, 1, 207, 8, 9, 2, 1, 1, 14, 1), )
if mibBuilder.loadTexts: atmxPtToPtTable.setStatus('current')
atmxPtToPtEntry = MibTableRow((1, 3, 6, 1, 4, 1, 207, 8, 9, 2, 1, 1, 14, 1, 1), ).setIndexNames((0, "SWITCH-ATM-MIB", "atmxPtToPtIndex"))
if mibBuilder.loadTexts: atmxPtToPtEntry.setStatus('current')
atmxPtToPtIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 9, 2, 1, 1, 14, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 32)))
if mibBuilder.loadTexts: atmxPtToPtIndex.setStatus('current')
atmxPtToPtDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 9, 2, 1, 1, 14, 1, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 31))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: atmxPtToPtDescription.setStatus('current')
atmxPtToPtEncap = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 9, 2, 1, 1, 14, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("rfc1483", 1), ("private", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: atmxPtToPtEncap.setStatus('current')
atmxPtToPtConnType = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 9, 2, 1, 1, 14, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("pvc", 1), ("svc", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: atmxPtToPtConnType.setStatus('current')
atmxPtToPtVci = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 9, 2, 1, 1, 14, 1, 1, 5), AtmClientVci()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: atmxPtToPtVci.setStatus('current')
atmxPtToPtDestAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 9, 2, 1, 1, 14, 1, 1, 6), AtmAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: atmxPtToPtDestAddr.setStatus('current')
atmxPtToPtRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 9, 2, 1, 1, 14, 1, 1, 7), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: atmxPtToPtRowStatus.setStatus('current')
atmxPtToPtIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 9, 2, 1, 1, 14, 1, 1, 8), IfIndexOrZero()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmxPtToPtIfIndex.setStatus('current')
atmxPtToPtVlanNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 9, 2, 1, 1, 14, 1, 1, 9), AtmxVlanRange()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: atmxPtToPtVlanNumber.setStatus('current')
atmxPtToPtAdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 9, 2, 1, 1, 14, 1, 1, 10), AtmAdminStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: atmxPtToPtAdminStatus.setStatus('current')
atmxPtToPtOperStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 9, 2, 1, 1, 14, 1, 1, 11), AtmConnectionOperStatusCodes()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmxPtToPtOperStatus.setStatus('current')
atmxPtToPtStatsTable = MibTable((1, 3, 6, 1, 4, 1, 207, 8, 9, 2, 1, 1, 14, 2), )
if mibBuilder.loadTexts: atmxPtToPtStatsTable.setStatus('current')
atmxPtToPtStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 207, 8, 9, 2, 1, 1, 14, 2, 1), ).setIndexNames((0, "SWITCH-ATM-MIB", "atmxPtToPtIndex"))
if mibBuilder.loadTexts: atmxPtToPtStatsEntry.setStatus('current')
atmxPtToPtStatsTotalTxPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 9, 2, 1, 1, 14, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmxPtToPtStatsTotalTxPkts.setStatus('current')
atmxPtToPtStatsTotalRxPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 9, 2, 1, 1, 14, 2, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmxPtToPtStatsTotalRxPkts.setStatus('current')
atmxPtToPtStatsTotalTxDiscards = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 9, 2, 1, 1, 14, 2, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmxPtToPtStatsTotalTxDiscards.setStatus('current')
atmxPtToPtStatsTotalRxDiscards = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 9, 2, 1, 1, 14, 2, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmxPtToPtStatsTotalRxDiscards.setStatus('current')
atmxTrunkTable = MibTable((1, 3, 6, 1, 4, 1, 207, 8, 9, 2, 1, 1, 15, 1), )
if mibBuilder.loadTexts: atmxTrunkTable.setStatus('current')
atmxTrunkEntry = MibTableRow((1, 3, 6, 1, 4, 1, 207, 8, 9, 2, 1, 1, 15, 1, 1), ).setIndexNames((0, "SWITCH-ATM-MIB", "atmxTrunkIndex"))
if mibBuilder.loadTexts: atmxTrunkEntry.setStatus('current')
atmxTrunkIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 9, 2, 1, 1, 15, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 32)))
if mibBuilder.loadTexts: atmxTrunkIndex.setStatus('current')
atmxTrunkDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 9, 2, 1, 1, 15, 1, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 31))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: atmxTrunkDescription.setStatus('current')
atmxTrunkConnType = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 9, 2, 1, 1, 15, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("pvc", 1), ("svc", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: atmxTrunkConnType.setStatus('current')
atmxTrunkVci = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 9, 2, 1, 1, 15, 1, 1, 4), AtmClientVci()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: atmxTrunkVci.setStatus('current')
atmxTrunkDestAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 9, 2, 1, 1, 15, 1, 1, 5), AtmAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: atmxTrunkDestAddr.setStatus('current')
atmxTrunkRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 9, 2, 1, 1, 15, 1, 1, 6), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: atmxTrunkRowStatus.setStatus('current')
atmxTrunkAdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 9, 2, 1, 1, 15, 1, 1, 7), AtmAdminStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: atmxTrunkAdminStatus.setStatus('current')
atmxTrunkOperStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 9, 2, 1, 1, 15, 1, 1, 8), AtmConnectionOperStatusCodes()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmxTrunkOperStatus.setStatus('current')
atmxTrunkVlanTable = MibTable((1, 3, 6, 1, 4, 1, 207, 8, 9, 2, 1, 1, 15, 2), )
if mibBuilder.loadTexts: atmxTrunkVlanTable.setStatus('current')
atmxTrunkVlanEntry = MibTableRow((1, 3, 6, 1, 4, 1, 207, 8, 9, 2, 1, 1, 15, 2, 1), ).setIndexNames((0, "SWITCH-ATM-MIB", "atmxTrunkIndex"), (0, "SWITCH-ATM-MIB", "atmxTrunkVlanNumber"))
if mibBuilder.loadTexts: atmxTrunkVlanEntry.setStatus('current')
atmxTrunkVlanNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 9, 2, 1, 1, 15, 2, 1, 1), AtmxVlanRange())
if mibBuilder.loadTexts: atmxTrunkVlanNumber.setStatus('current')
atmxTrunkVlanIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 9, 2, 1, 1, 15, 2, 1, 2), IfIndexOrZero()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmxTrunkVlanIfIndex.setStatus('current')
atmxTrunkVlanRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 9, 2, 1, 1, 15, 2, 1, 3), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: atmxTrunkVlanRowStatus.setStatus('current')
atmxTrunkStatsTable = MibTable((1, 3, 6, 1, 4, 1, 207, 8, 9, 2, 1, 1, 15, 3), )
if mibBuilder.loadTexts: atmxTrunkStatsTable.setStatus('current')
atmxTrunkStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 207, 8, 9, 2, 1, 1, 15, 3, 1), ).setIndexNames((0, "SWITCH-ATM-MIB", "atmxTrunkIndex"))
if mibBuilder.loadTexts: atmxTrunkStatsEntry.setStatus('current')
atmxTrunkStatsTotalTxPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 9, 2, 1, 1, 15, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmxTrunkStatsTotalTxPkts.setStatus('current')
atmxTrunkStatsTotalRxPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 9, 2, 1, 1, 15, 3, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmxTrunkStatsTotalRxPkts.setStatus('current')
atmxTrunkStatsTotalTxDiscards = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 9, 2, 1, 1, 15, 3, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmxTrunkStatsTotalTxDiscards.setStatus('current')
atmxTrunkStatsTotalRxDiscards = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 9, 2, 1, 1, 15, 3, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmxTrunkStatsTotalRxDiscards.setStatus('current')
mibBuilder.exportSymbols("SWITCH-ATM-MIB", atmxPortEntry=atmxPortEntry, atmxLecMulticastForwardVcc=atmxLecMulticastForwardVcc, aal5LayerRxSarTimeouts=aal5LayerRxSarTimeouts, atmxLecStatsRxUnicastPkts=atmxLecStatsRxUnicastPkts, atmxVccStatsEntry=atmxVccStatsEntry, atmxLecFlushTimeout=atmxLecFlushTimeout, atmxSscopStatsRxBufferInUseCtr=atmxSscopStatsRxBufferInUseCtr, atmxIlmiTxPDUs=atmxIlmiTxPDUs, atmxPortSignalingVci=atmxPortSignalingVci, AtmOperStatus=AtmOperStatus, aal5LayerStatsTable=aal5LayerStatsTable, atmxCipIndex=atmxCipIndex, atmxCipVciTable=atmxCipVciTable, atmxLecVccTimeout=atmxLecVccTimeout, atmxSscopStatsTxTotalPdus=atmxSscopStatsTxTotalPdus, atmxCipArpGroup=atmxCipArpGroup, atmxSscopStatsGroup=atmxSscopStatsGroup, atmxPortSignalingVersion=atmxPortSignalingVersion, atmxCipAdmStatus=atmxCipAdmStatus, aal5LayerTxCells=aal5LayerTxCells, aal5LayerTxErrors=aal5LayerTxErrors, atmxLecStatsTxBroadcastPkts=atmxLecStatsTxBroadcastPkts, atmxLecArpSource=atmxLecArpSource, atmxCipGroup=atmxCipGroup, atmxLayerStatsTable=atmxLayerStatsTable, atmxLecStatsRxDiscardPkts=atmxLecStatsRxDiscardPkts, atmxPtToPtIndex=atmxPtToPtIndex, atmxCipArpIPAddress=atmxCipArpIPAddress, atmxPortOperStatus=atmxPortOperStatus, atmxLecStatsRxControlPkts=atmxLecStatsRxControlPkts, atmxLecArpGroup=atmxLecArpGroup, atmxLecIndex=atmxLecIndex, atmxLecTable=atmxLecTable, aal5LayerRxErrors=aal5LayerRxErrors, atmxVccServiceType=atmxVccServiceType, atmxPtToPtOperStatus=atmxPtToPtOperStatus, atmxPortSignalingStatus=atmxPortSignalingStatus, AtmxVlanRange=AtmxVlanRange, aal5LayerStatsEntry=aal5LayerStatsEntry, atmxLecGroup=atmxLecGroup, atmxSscopStatsTxDiscardSdus=atmxSscopStatsTxDiscardSdus, AtmLecIndex=AtmLecIndex, atmxIlmiRxDiscardPDUs=atmxIlmiRxDiscardPDUs, atmxPortMediaType=atmxPortMediaType, atmxCipStatsTxArpRsp=atmxCipStatsTxArpRsp, atmxCipArpEntry=atmxCipArpEntry, atmxTrunkVlanNumber=atmxTrunkVlanNumber, atmxVccStatsTxErrors=atmxVccStatsTxErrors, atmxVccStatsRxCrcErrors=atmxVccStatsRxCrcErrors, IfIndexOrZero=IfIndexOrZero, atmxVccStatsTxSDUDiscards=atmxVccStatsTxSDUDiscards, atmxPortGroup=atmxPortGroup, atmxPortSignalingMode=atmxPortSignalingMode, atmxCipProtocolState=atmxCipProtocolState, atmxVccVci=atmxVccVci, atmxSscopStatsTxErrorPdus=atmxSscopStatsTxErrorPdus, atmxTrunkDestAddr=atmxTrunkDestAddr, atmxTrunkOperStatus=atmxTrunkOperStatus, atmxPortMaxVCCs=atmxPortMaxVCCs, atmxAddressGroup=atmxAddressGroup, atmxTrunkEntry=atmxTrunkEntry, atmxTrunkVlanIfIndex=atmxTrunkVlanIfIndex, atmxTrunkStatsTotalTxPkts=atmxTrunkStatsTotalTxPkts, atmxTrunkStatsEntry=atmxTrunkStatsEntry, atmxLecStatsTxArpReq=atmxLecStatsTxArpReq, atmxCipArpSource=atmxCipArpSource, atmxTrunkIndex=atmxTrunkIndex, atmxSscopStatsTxBufferInUseGauge=atmxSscopStatsTxBufferInUseGauge, atmxSscopStatsRxErrorPdus=atmxSscopStatsRxErrorPdus, aal5LayerRxCells=aal5LayerRxCells, atmxLecArpVci=atmxLecArpVci, atmxTrunkRowStatus=atmxTrunkRowStatus, atmxCipVciRowStatus=atmxCipVciRowStatus, atmxTrunkStatsTotalTxDiscards=atmxTrunkStatsTotalTxDiscards, atmxCipStatsRxArpReq=atmxCipStatsRxArpReq, atmxCipVci=atmxCipVci, atmxVccRxQosClass=atmxVccRxQosClass, atmxVccTable=atmxVccTable, atmxPtToPtStatsTotalRxDiscards=atmxPtToPtStatsTotalRxDiscards, atmxPortTable=atmxPortTable, aal5LayerClearStats=aal5LayerClearStats, atmxCipStatsPktsFromOtherLIS=atmxCipStatsPktsFromOtherLIS, aal5LayerRxSDUDiscards=aal5LayerRxSDUDiscards, atmxVccStatsRxOversizedSdus=atmxVccStatsRxOversizedSdus, atmxVccOperStatus=atmxVccOperStatus, atmxCipArpTimeToLive=atmxCipArpTimeToLive, AtmxArpEntryType=AtmxArpEntryType, atmxCipStatsGroup=atmxCipStatsGroup, atmxSscopStatsTable=atmxSscopStatsTable, atmxVccStatsRxSDUs=atmxVccStatsRxSDUs, atmxTrunkVci=atmxTrunkVci, atmxVccStatsGroup=atmxVccStatsGroup, atmxVccVpi=atmxVccVpi, aal5LayerTxSDUDiscards=aal5LayerTxSDUDiscards, atmxPortAdaptorRamSize=atmxPortAdaptorRamSize, atmxElanName=atmxElanName, atmxLayerStatsRxCellDiscards=atmxLayerStatsRxCellDiscards, atmxTrunkDescription=atmxTrunkDescription, atmxVccRxBestEffort=atmxVccRxBestEffort, atmxTrunkStatsTotalRxDiscards=atmxTrunkStatsTotalRxDiscards, atmxLecUnicastMacAddress=atmxLecUnicastMacAddress, atmxLayerStatsGroup=atmxLayerStatsGroup, atmxPortDescription=atmxPortDescription, AtmQosClass=AtmQosClass, atmxCipIPSubnetMask=atmxCipIPSubnetMask, atmxPtToPtStatsTotalTxPkts=atmxPtToPtStatsTotalTxPkts, atmxPortEnablePlScramble=atmxPortEnablePlScramble, AtmCipIndex=AtmCipIndex, atmxLecDescription=atmxLecDescription, atmxLecProtocolState=atmxLecProtocolState, atmxLecStatsTxMulticastPkts=atmxLecStatsTxMulticastPkts, aal5LayerTxOctets=aal5LayerTxOctets, aal5LayerRxOctets=aal5LayerRxOctets, atmxPtToPtIfIndex=atmxPtToPtIfIndex, switchAtmMib=switchAtmMib, atmxLecStatsRxArpRsp=atmxLecStatsRxArpRsp, atmxCipArpAtmAddress=atmxCipArpAtmAddress, atmxLecEntry=atmxLecEntry, atmxVccStatsConnInIdleTime=atmxVccStatsConnInIdleTime, atmxCipOperStatus=atmxCipOperStatus, atmxVccStatsConnModifiedTime=atmxVccStatsConnModifiedTime, atmxCipConnectionType=atmxCipConnectionType, atmxCipStatsTxInArpRsp=atmxCipStatsTxInArpRsp, atmxCipStatsRxArpRsp=atmxCipStatsRxArpRsp, atmxVccRowStatus=atmxVccRowStatus, atmxVccStatsRxSDUDiscards=atmxVccStatsRxSDUDiscards, atmxVccTxPeakCellRate=atmxVccTxPeakCellRate, atmxLecVlanNumber=atmxLecVlanNumber, atmxCipStatsEntry=atmxCipStatsEntry, atmxVccRxPeakCellRate=atmxVccRxPeakCellRate, atmxPtToPtDescription=atmxPtToPtDescription, atmxLecId=atmxLecId, atmxLayerStatsEntry=atmxLayerStatsEntry, aal5LayerRxSDUInvalidSz=aal5LayerRxSDUInvalidSz, atmxSscopStatsTxDiscardPdus=atmxSscopStatsTxDiscardPdus, atmxPortEnableIlmiPoll=atmxPortEnableIlmiPoll, atmxLayerStatsTxCellDiscards=atmxLayerStatsTxCellDiscards, atmxLayerStatsClearTime=atmxLayerStatsClearTime, atmxTrunkVlanRowStatus=atmxTrunkVlanRowStatus, atmxLecControlTimeout=atmxLecControlTimeout, atmxLayerStatsRxCells=atmxLayerStatsRxCells, atmxCipRowStatus=atmxCipRowStatus, atmxVccStatsRxOctets=atmxVccStatsRxOctets, atmxTrunkGroup=atmxTrunkGroup, atmxPtToPtConnType=atmxPtToPtConnType, atmxVccStatsRxCells=atmxVccStatsRxCells, atmxSscopStatsEntry=atmxSscopStatsEntry, atmxCipVciEntry=atmxCipVciEntry, atmxCipArpRowStatus=atmxCipArpRowStatus, atmxIlmiStatsGroup=atmxIlmiStatsGroup, atmxVccStatsTxOctets=atmxVccStatsTxOctets, atmxPtToPtVci=atmxPtToPtVci, atmxVccTxBestEffort=atmxVccTxBestEffort, atmxTrunkVlanEntry=atmxTrunkVlanEntry, atmxLecAgeingTime=atmxLecAgeingTime, atmxLecMaxUnknownFrameCount=atmxLecMaxUnknownFrameCount, atmxLecStatsEntry=atmxLecStatsEntry, atmxLecArpRespTime=atmxLecArpRespTime, atmxLecStatsTxArpRsp=atmxLecStatsTxArpRsp, atmxPtToPtGroup=atmxPtToPtGroup, atmxLayerStatsTxCells=atmxLayerStatsTxCells, atmxPtToPtStatsTotalRxPkts=atmxPtToPtStatsTotalRxPkts, atmxPortEnableIlmi=atmxPortEnableIlmi, atmxCipStatsTxInArpReq=atmxCipStatsTxInArpReq, AtmMediaTypes=AtmMediaTypes, atmxPortIlmiStatus=atmxPortIlmiStatus, atmxCipIfIndex=atmxCipIfIndex, atmxVccTxQosClass=atmxVccTxQosClass, atmxIlmiRxPDUs=atmxIlmiRxPDUs, atmxLecMulticastSendVcc=atmxLecMulticastSendVcc, AtmVpi=AtmVpi, atmxLecStatsRxArpReq=atmxLecStatsRxArpReq, AtmVci=AtmVci, AtmAddress=AtmAddress, atmxCipStatsRxInArpRsp=atmxCipStatsRxInArpRsp, atmxPtToPtDestAddr=atmxPtToPtDestAddr, atmxTrunkConnType=atmxTrunkConnType, atmxTrunkVlanTable=atmxTrunkVlanTable, aal5LayerTxSDUs=aal5LayerTxSDUs, AtmPortIndex=AtmPortIndex, atmxCipStatsRxDiscards=atmxCipStatsRxDiscards, atmxSscopStatsRxTotalPdus=atmxSscopStatsRxTotalPdus, AtmAdminStatus=AtmAdminStatus, atmxVccCircuitType=atmxVccCircuitType, AtmClientVci=AtmClientVci, atmxLayerStatsClear=atmxLayerStatsClear, atmxPortILMIVci=atmxPortILMIVci, atmxSscopStatsRxBufferInUseGauge=atmxSscopStatsRxBufferInUseGauge, atmxLecMaxUnknownFrameTime=atmxLecMaxUnknownFrameTime, atmxVccUpTime=atmxVccUpTime, atmxLecArpMacAddress=atmxLecArpMacAddress, atmxCipRipMode=atmxCipRipMode, aal5LayerRxCrcErrors=aal5LayerRxCrcErrors, atmxCipServerAtmAddress=atmxCipServerAtmAddress, atmxPortClock=atmxPortClock, atmxPtToPtVlanNumber=atmxPtToPtVlanNumber, atmxCipTable=atmxCipTable, AtmClearStats=AtmClearStats, atmxPtToPtStatsEntry=atmxPtToPtStatsEntry, atmxCipDescription=atmxCipDescription, atmxLecStatsTxDiscardPkts=atmxLecStatsTxDiscardPkts, atmxPtToPtStatsTable=atmxPtToPtStatsTable, atmxTrunkTable=atmxTrunkTable, atmxVccStatsTable=atmxVccStatsTable, atmxCipArpTable=atmxCipArpTable, atmxLecArpTable=atmxLecArpTable, atmxPtToPtEncap=atmxPtToPtEncap, atmxLecMaxArpRetryCount=atmxLecMaxArpRetryCount, atmxIlmiStatsTable=atmxIlmiStatsTable, atmxPortAddress=atmxPortAddress, atmxLecArpEntry=atmxLecArpEntry, atmxLecServerAddress=atmxLecServerAddress, atmxPtToPtTable=atmxPtToPtTable, atmxLecRowStatus=atmxLecRowStatus, atmxCipMtuSize=atmxCipMtuSize, atmxVccStatsRxErrors=atmxVccStatsRxErrors, atmxLecStatsRxMulticastPkts=atmxLecStatsRxMulticastPkts, atmxPortTransmissionType=atmxPortTransmissionType, atmxPtToPtStatsTotalTxDiscards=atmxPtToPtStatsTotalTxDiscards, atmxVccStatsTxSDUs=atmxVccStatsTxSDUs, atmxTrunkStatsTable=atmxTrunkStatsTable, atmxPortMacAddress=atmxPortMacAddress, aal5LayerRxSDUs=aal5LayerRxSDUs, atmxLecStatsTxUnicastPkts=atmxLecStatsTxUnicastPkts, PYSNMP_MODULE_ID=switchAtmMib, atmxLecIfIndex=atmxLecIfIndex, atmxCipIPAddress=atmxCipIPAddress, atmxCipArpVci=atmxCipArpVci, atmxLecStatsTxControlPkts=atmxLecStatsTxControlPkts, atmxVccStatsConnOutIdleTime=atmxVccStatsConnOutIdleTime, atmxVccStatsRxSarTimeouts=atmxVccStatsRxSarTimeouts, atmxCipVciId=atmxCipVciId, atmxSscopStatsTxBufferInUseCtr=atmxSscopStatsTxBufferInUseCtr, atmxPtToPtRowStatus=atmxPtToPtRowStatus, atmxVccStatsTxCells=atmxVccStatsTxCells, AtmConnectionOperStatusCodes=AtmConnectionOperStatusCodes, atmxPtToPtAdminStatus=atmxPtToPtAdminStatus, atmxSscopStatsRxDiscardPdus=atmxSscopStatsRxDiscardPdus, atmxCipStatsTable=atmxCipStatsTable, atmxTrunkAdminStatus=atmxTrunkAdminStatus, atmxVccGroup=atmxVccGroup, atmxVccEntry=atmxVccEntry, atmxLecStatsTable=atmxLecStatsTable, atmxCipStatsTxDiscards=atmxCipStatsTxDiscards, aal5LayerStatsClearTime=aal5LayerStatsClearTime, atmxLecArpRowStatus=atmxLecArpRowStatus, atmxPortIndex=atmxPortIndex, atmxLecConfigMode=atmxLecConfigMode, atmxVccStatsConnCreateTime=atmxVccStatsConnCreateTime, atmxLecStatsRxBroadcastPkts=atmxLecStatsRxBroadcastPkts, atmxPtToPtEntry=atmxPtToPtEntry, atmxTrunkStatsTotalRxPkts=atmxTrunkStatsTotalRxPkts, atmxLecVPortNumber=atmxLecVPortNumber, atmxLecControlDirectVcc=atmxLecControlDirectVcc)
mibBuilder.exportSymbols("SWITCH-ATM-MIB", AtmTransmissionTypes=AtmTransmissionTypes, atmxLecArpAtmAddress=atmxLecArpAtmAddress, atmxCipStatsRxInArpReq=atmxCipStatsRxInArpReq, atmxIlmiStatsEntry=atmxIlmiStatsEntry, atmxLecArpTimeToLive=atmxLecArpTimeToLive, atmxCipStatsTxArpReq=atmxCipStatsTxArpReq, atmxCipEntry=atmxCipEntry, atmxLecControlDistributeVcc=atmxLecControlDistributeVcc, atmxPortMaxVciBits=atmxPortMaxVciBits, atmxLecStatsGroup=atmxLecStatsGroup)
