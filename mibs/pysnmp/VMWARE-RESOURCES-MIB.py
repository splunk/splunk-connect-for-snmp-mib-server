#
# PySNMP MIB module VMWARE-RESOURCES-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/VMWARE-RESOURCES-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 21:27:55 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, OctetString, Integer = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "OctetString", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueSizeConstraint, SingleValueConstraint, ConstraintsUnion, ConstraintsIntersection, ValueRangeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueSizeConstraint", "SingleValueConstraint", "ConstraintsUnion", "ConstraintsIntersection", "ValueRangeConstraint")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
ModuleIdentity, IpAddress, Counter32, TimeTicks, NotificationType, MibScalar, MibTable, MibTableRow, MibTableColumn, Bits, Unsigned32, MibIdentifier, Integer32, Gauge32, iso, ObjectIdentity, Counter64 = mibBuilder.importSymbols("SNMPv2-SMI", "ModuleIdentity", "IpAddress", "Counter32", "TimeTicks", "NotificationType", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Bits", "Unsigned32", "MibIdentifier", "Integer32", "Gauge32", "iso", "ObjectIdentity", "Counter64")
DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention")
vmwResources, = mibBuilder.importSymbols("VMWARE-ROOT-MIB", "vmwResources")
vmwCPU = MibIdentifier((1, 3, 6, 1, 4, 1, 6876, 3, 1))
numCPUs = MibScalar((1, 3, 6, 1, 4, 1, 6876, 3, 1, 1), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: numCPUs.setStatus('mandatory')
cpuTable = MibTable((1, 3, 6, 1, 4, 1, 6876, 3, 1, 2), )
if mibBuilder.loadTexts: cpuTable.setStatus('mandatory')
cpuEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6876, 3, 1, 2, 1), ).setIndexNames((0, "VMWARE-RESOURCES-MIB", "cpuVMID"))
if mibBuilder.loadTexts: cpuEntry.setStatus('mandatory')
cpuVMID = MibTableColumn((1, 3, 6, 1, 4, 1, 6876, 3, 1, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1023))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpuVMID.setStatus('mandatory')
cpuShares = MibTableColumn((1, 3, 6, 1, 4, 1, 6876, 3, 1, 2, 1, 2), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpuShares.setStatus('mandatory')
cpuUtil = MibTableColumn((1, 3, 6, 1, 4, 1, 6876, 3, 1, 2, 1, 3), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpuUtil.setStatus('mandatory')
vmwMemory = MibIdentifier((1, 3, 6, 1, 4, 1, 6876, 3, 2))
memSize = MibScalar((1, 3, 6, 1, 4, 1, 6876, 3, 2, 1), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: memSize.setStatus('mandatory')
memCOS = MibScalar((1, 3, 6, 1, 4, 1, 6876, 3, 2, 2), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: memCOS.setStatus('mandatory')
memAvail = MibScalar((1, 3, 6, 1, 4, 1, 6876, 3, 2, 3), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: memAvail.setStatus('mandatory')
memTable = MibTable((1, 3, 6, 1, 4, 1, 6876, 3, 2, 4), )
if mibBuilder.loadTexts: memTable.setStatus('mandatory')
memEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6876, 3, 2, 4, 1), ).setIndexNames((0, "VMWARE-RESOURCES-MIB", "memVMID"))
if mibBuilder.loadTexts: memEntry.setStatus('mandatory')
memVMID = MibTableColumn((1, 3, 6, 1, 4, 1, 6876, 3, 2, 4, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1023))).setMaxAccess("readonly")
if mibBuilder.loadTexts: memVMID.setStatus('mandatory')
memShares = MibTableColumn((1, 3, 6, 1, 4, 1, 6876, 3, 2, 4, 1, 2), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: memShares.setStatus('mandatory')
memConfigured = MibTableColumn((1, 3, 6, 1, 4, 1, 6876, 3, 2, 4, 1, 3), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: memConfigured.setStatus('mandatory')
memUtil = MibTableColumn((1, 3, 6, 1, 4, 1, 6876, 3, 2, 4, 1, 4), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: memUtil.setStatus('mandatory')
vmwHBATable = MibTable((1, 3, 6, 1, 4, 1, 6876, 3, 3), )
if mibBuilder.loadTexts: vmwHBATable.setStatus('mandatory')
hbaEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6876, 3, 3, 1), ).setIndexNames((0, "VMWARE-RESOURCES-MIB", "hbaIdx"))
if mibBuilder.loadTexts: hbaEntry.setStatus('mandatory')
hbaIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 6876, 3, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hbaIdx.setStatus('mandatory')
hbaName = MibTableColumn((1, 3, 6, 1, 4, 1, 6876, 3, 3, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hbaName.setStatus('mandatory')
hbaVMID = MibTableColumn((1, 3, 6, 1, 4, 1, 6876, 3, 3, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hbaVMID.setStatus('mandatory')
diskShares = MibTableColumn((1, 3, 6, 1, 4, 1, 6876, 3, 3, 1, 4), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: diskShares.setStatus('mandatory')
numReads = MibTableColumn((1, 3, 6, 1, 4, 1, 6876, 3, 3, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: numReads.setStatus('mandatory')
kbRead = MibTableColumn((1, 3, 6, 1, 4, 1, 6876, 3, 3, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: kbRead.setStatus('mandatory')
numWrites = MibTableColumn((1, 3, 6, 1, 4, 1, 6876, 3, 3, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: numWrites.setStatus('mandatory')
kbWritten = MibTableColumn((1, 3, 6, 1, 4, 1, 6876, 3, 3, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: kbWritten.setStatus('mandatory')
vmwNetTable = MibTable((1, 3, 6, 1, 4, 1, 6876, 3, 4), )
if mibBuilder.loadTexts: vmwNetTable.setStatus('mandatory')
netEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6876, 3, 4, 1), ).setIndexNames((0, "VMWARE-RESOURCES-MIB", "netIdx"))
if mibBuilder.loadTexts: netEntry.setStatus('mandatory')
netIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 6876, 3, 4, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: netIdx.setStatus('mandatory')
netName = MibTableColumn((1, 3, 6, 1, 4, 1, 6876, 3, 4, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: netName.setStatus('mandatory')
netVMID = MibTableColumn((1, 3, 6, 1, 4, 1, 6876, 3, 4, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: netVMID.setStatus('mandatory')
ifAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 6876, 3, 4, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ifAddr.setStatus('mandatory')
netShares = MibTableColumn((1, 3, 6, 1, 4, 1, 6876, 3, 4, 1, 5), Gauge32())
if mibBuilder.loadTexts: netShares.setStatus('mandatory')
pktsTx = MibTableColumn((1, 3, 6, 1, 4, 1, 6876, 3, 4, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pktsTx.setStatus('mandatory')
kbTx = MibTableColumn((1, 3, 6, 1, 4, 1, 6876, 3, 4, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: kbTx.setStatus('mandatory')
pktsRx = MibTableColumn((1, 3, 6, 1, 4, 1, 6876, 3, 4, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pktsRx.setStatus('mandatory')
kbRx = MibTableColumn((1, 3, 6, 1, 4, 1, 6876, 3, 4, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: kbRx.setStatus('mandatory')
mibBuilder.exportSymbols("VMWARE-RESOURCES-MIB", memConfigured=memConfigured, hbaIdx=hbaIdx, cpuEntry=cpuEntry, memAvail=memAvail, pktsTx=pktsTx, ifAddr=ifAddr, memSize=memSize, netEntry=netEntry, kbRx=kbRx, kbWritten=kbWritten, numReads=numReads, memTable=memTable, memEntry=memEntry, cpuVMID=cpuVMID, diskShares=diskShares, hbaName=hbaName, netName=netName, vmwNetTable=vmwNetTable, netVMID=netVMID, netShares=netShares, cpuShares=cpuShares, vmwMemory=vmwMemory, netIdx=netIdx, numCPUs=numCPUs, kbRead=kbRead, hbaEntry=hbaEntry, memCOS=memCOS, vmwCPU=vmwCPU, memVMID=memVMID, pktsRx=pktsRx, numWrites=numWrites, vmwHBATable=vmwHBATable, cpuTable=cpuTable, memUtil=memUtil, memShares=memShares, hbaVMID=hbaVMID, kbTx=kbTx, cpuUtil=cpuUtil)
