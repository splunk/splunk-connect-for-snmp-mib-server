#
# PySNMP MIB module CISCO-IEEE8021-CFM-EXT-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/CISCO-IEEE8021-CFM-EXT-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 17:42:50 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, ObjectIdentifier, OctetString = mibBuilder.importSymbols("ASN1", "Integer", "ObjectIdentifier", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsIntersection, ConstraintsUnion, ValueRangeConstraint, SingleValueConstraint, ValueSizeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsIntersection", "ConstraintsUnion", "ValueRangeConstraint", "SingleValueConstraint", "ValueSizeConstraint")
ciscoMgmt, = mibBuilder.importSymbols("CISCO-SMI", "ciscoMgmt")
Dot1agCfmMpDirection, dot1agCfmMaIndex, dot1agCfmMdIndex = mibBuilder.importSymbols("IEEE8021-CFM-MIB", "Dot1agCfmMpDirection", "dot1agCfmMaIndex", "dot1agCfmMdIndex")
InterfaceIndex, = mibBuilder.importSymbols("IF-MIB", "InterfaceIndex")
VlanId, = mibBuilder.importSymbols("Q-BRIDGE-MIB", "VlanId")
NotificationGroup, ModuleCompliance, ObjectGroup = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance", "ObjectGroup")
TimeTicks, IpAddress, Unsigned32, Counter32, iso, MibScalar, MibTable, MibTableRow, MibTableColumn, Bits, ObjectIdentity, MibIdentifier, Gauge32, NotificationType, ModuleIdentity, Integer32, Counter64 = mibBuilder.importSymbols("SNMPv2-SMI", "TimeTicks", "IpAddress", "Unsigned32", "Counter32", "iso", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Bits", "ObjectIdentity", "MibIdentifier", "Gauge32", "NotificationType", "ModuleIdentity", "Integer32", "Counter64")
StorageType, RowStatus, TextualConvention, MacAddress, TruthValue, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "StorageType", "RowStatus", "TextualConvention", "MacAddress", "TruthValue", "DisplayString")
ciscoIeee8021CfmExtMIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 9, 9, 679))
ciscoIeee8021CfmExtMIB.setRevisions(('2008-11-13 00:00',))
if mibBuilder.loadTexts: ciscoIeee8021CfmExtMIB.setLastUpdated('200811130000Z')
if mibBuilder.loadTexts: ciscoIeee8021CfmExtMIB.setOrganization('Cisco Systems, Inc.')
cIeeeCfmExtMIBNotifs = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 679, 0))
cIeeeCfmExtMIBObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 679, 1))
cIeeeCfmExtMIBConformance = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 679, 2))
ciceCfmGlobal = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 679, 1, 1))
ciceCfmLtr = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 679, 1, 2))
ciceCfmMa = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 679, 1, 3))
ciceCfmIfObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 679, 1, 4))
ciceCfmMep = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 679, 1, 5))
ciceCfmEnable = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 679, 1, 1, 1), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ciceCfmEnable.setStatus('current')
ciceCfmMaxMdLevel = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 679, 1, 1, 2), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ciceCfmMaxMdLevel.setStatus('current')
ciceCfmBrainAddress = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 679, 1, 1, 3), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ciceCfmBrainAddress.setStatus('current')
ciceCfmCcMulticastAddress = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 679, 1, 1, 4), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ciceCfmCcMulticastAddress.setStatus('current')
ciceCfmLtmMulticastAddress = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 679, 1, 1, 5), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ciceCfmLtmMulticastAddress.setStatus('current')
ciceCfmEnableFaultAlarm = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 679, 1, 1, 6), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ciceCfmEnableFaultAlarm.setStatus('current')
ciceCfmLtrEnable = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 679, 1, 2, 1), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ciceCfmLtrEnable.setStatus('current')
ciceCfmLtrHoldTime = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 679, 1, 2, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 4294967295))).setUnits('minutes').setMaxAccess("readwrite")
if mibBuilder.loadTexts: ciceCfmLtrHoldTime.setStatus('current')
ciceCfmLtrSize = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 679, 1, 2, 3), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ciceCfmLtrSize.setStatus('current')
ciceCfmMaNetTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 679, 1, 3, 1), )
if mibBuilder.loadTexts: ciceCfmMaNetTable.setStatus('current')
ciceCfmMaNetEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 679, 1, 3, 1, 1), ).setIndexNames((0, "IEEE8021-CFM-MIB", "dot1agCfmMdIndex"), (0, "IEEE8021-CFM-MIB", "dot1agCfmMaIndex"))
if mibBuilder.loadTexts: ciceCfmMaNetEntry.setStatus('current')
ciceCfmMaNetCciEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 679, 1, 3, 1, 1, 1), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ciceCfmMaNetCciEnable.setStatus('current')
ciceCfmMaNetCciDirection = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 679, 1, 3, 1, 1, 2), Dot1agCfmMpDirection()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ciceCfmMaNetCciDirection.setStatus('current')
ciceCfmMaNetLossThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 679, 1, 3, 1, 1, 3), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ciceCfmMaNetLossThreshold.setStatus('current')
ciceCfmInterfaceTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 679, 1, 4, 1), )
if mibBuilder.loadTexts: ciceCfmInterfaceTable.setStatus('current')
ciceCfmInterfaceEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 679, 1, 4, 1, 1), ).setIndexNames((0, "CISCO-IEEE8021-CFM-EXT-MIB", "ciceCfmIfIndex"))
if mibBuilder.loadTexts: ciceCfmInterfaceEntry.setStatus('current')
ciceCfmIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 679, 1, 4, 1, 1, 1), InterfaceIndex())
if mibBuilder.loadTexts: ciceCfmIfIndex.setStatus('current')
ciceCfmIfState = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 679, 1, 4, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2), ("transparent", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ciceCfmIfState.setStatus('current')
ciceCfmMipTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 679, 1, 4, 2), )
if mibBuilder.loadTexts: ciceCfmMipTable.setStatus('current')
ciceCfmMipEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 679, 1, 4, 2, 1), ).setIndexNames((0, "CISCO-IEEE8021-CFM-EXT-MIB", "ciceCfmIfIndex"), (0, "CISCO-IEEE8021-CFM-EXT-MIB", "ciceCfmMipVlanIndex"))
if mibBuilder.loadTexts: ciceCfmMipEntry.setStatus('current')
ciceCfmMipVlanIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 679, 1, 4, 2, 1, 1), VlanId())
if mibBuilder.loadTexts: ciceCfmMipVlanIndex.setStatus('current')
ciceCfmMipMdLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 679, 1, 4, 2, 1, 2), Unsigned32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ciceCfmMipMdLevel.setStatus('current')
ciceCfmMipStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 679, 1, 4, 2, 1, 3), StorageType().clone('nonVolatile')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ciceCfmMipStorageType.setStatus('current')
ciceCfmMipRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 679, 1, 4, 2, 1, 4), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ciceCfmMipRowStatus.setStatus('current')
ciceCfmMacEnableIfTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 679, 1, 4, 3), )
if mibBuilder.loadTexts: ciceCfmMacEnableIfTable.setStatus('current')
ciceCfmMacEnableIfEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 679, 1, 4, 3, 1), ).setIndexNames((0, "CISCO-IEEE8021-CFM-EXT-MIB", "ciceCfmIfIndex"), (0, "CISCO-IEEE8021-CFM-EXT-MIB", "ciceCfmMacEnableVlanIndex"))
if mibBuilder.loadTexts: ciceCfmMacEnableIfEntry.setStatus('current')
ciceCfmMacEnableVlanIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 679, 1, 4, 3, 1, 1), VlanId())
if mibBuilder.loadTexts: ciceCfmMacEnableVlanIndex.setStatus('current')
ciceCfmMacEnableStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 679, 1, 4, 3, 1, 2), StorageType().clone('nonVolatile')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ciceCfmMacEnableStorageType.setStatus('current')
ciceCfmMacEnableRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 679, 1, 4, 3, 1, 3), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ciceCfmMacEnableRowStatus.setStatus('current')
ciceCfmMIBCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 679, 2, 1))
ciceCfmMIBGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 679, 2, 2))
ciceCfmMIBCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 9, 9, 679, 2, 1, 1)).setObjects(("CISCO-IEEE8021-CFM-EXT-MIB", "ciceCfmGlobalObjectsGroup"), ("CISCO-IEEE8021-CFM-EXT-MIB", "ciceCfmInterfaceGroup"), ("CISCO-IEEE8021-CFM-EXT-MIB", "ciceCfmLtrConfigGroup"), ("CISCO-IEEE8021-CFM-EXT-MIB", "ciceCfmMaNetGroup"), ("CISCO-IEEE8021-CFM-EXT-MIB", "ciceCfmMipGroup"), ("CISCO-IEEE8021-CFM-EXT-MIB", "ciceCfmMacEnableGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciceCfmMIBCompliance = ciceCfmMIBCompliance.setStatus('current')
ciceCfmGlobalObjectsGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 679, 2, 2, 1)).setObjects(("CISCO-IEEE8021-CFM-EXT-MIB", "ciceCfmEnable"), ("CISCO-IEEE8021-CFM-EXT-MIB", "ciceCfmMaxMdLevel"), ("CISCO-IEEE8021-CFM-EXT-MIB", "ciceCfmBrainAddress"), ("CISCO-IEEE8021-CFM-EXT-MIB", "ciceCfmCcMulticastAddress"), ("CISCO-IEEE8021-CFM-EXT-MIB", "ciceCfmLtmMulticastAddress"), ("CISCO-IEEE8021-CFM-EXT-MIB", "ciceCfmEnableFaultAlarm"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciceCfmGlobalObjectsGroup = ciceCfmGlobalObjectsGroup.setStatus('current')
ciceCfmLtrConfigGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 679, 2, 2, 2)).setObjects(("CISCO-IEEE8021-CFM-EXT-MIB", "ciceCfmLtrEnable"), ("CISCO-IEEE8021-CFM-EXT-MIB", "ciceCfmLtrHoldTime"), ("CISCO-IEEE8021-CFM-EXT-MIB", "ciceCfmLtrSize"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciceCfmLtrConfigGroup = ciceCfmLtrConfigGroup.setStatus('current')
ciceCfmMaNetGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 679, 2, 2, 3)).setObjects(("CISCO-IEEE8021-CFM-EXT-MIB", "ciceCfmMaNetCciEnable"), ("CISCO-IEEE8021-CFM-EXT-MIB", "ciceCfmMaNetCciDirection"), ("CISCO-IEEE8021-CFM-EXT-MIB", "ciceCfmMaNetLossThreshold"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciceCfmMaNetGroup = ciceCfmMaNetGroup.setStatus('current')
ciceCfmInterfaceGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 679, 2, 2, 4)).setObjects(("CISCO-IEEE8021-CFM-EXT-MIB", "ciceCfmIfState"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciceCfmInterfaceGroup = ciceCfmInterfaceGroup.setStatus('current')
ciceCfmMipGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 679, 2, 2, 5)).setObjects(("CISCO-IEEE8021-CFM-EXT-MIB", "ciceCfmMipMdLevel"), ("CISCO-IEEE8021-CFM-EXT-MIB", "ciceCfmMipStorageType"), ("CISCO-IEEE8021-CFM-EXT-MIB", "ciceCfmMipRowStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciceCfmMipGroup = ciceCfmMipGroup.setStatus('current')
ciceCfmMacEnableGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 679, 2, 2, 6)).setObjects(("CISCO-IEEE8021-CFM-EXT-MIB", "ciceCfmMacEnableStorageType"), ("CISCO-IEEE8021-CFM-EXT-MIB", "ciceCfmMacEnableRowStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciceCfmMacEnableGroup = ciceCfmMacEnableGroup.setStatus('current')
mibBuilder.exportSymbols("CISCO-IEEE8021-CFM-EXT-MIB", cIeeeCfmExtMIBConformance=cIeeeCfmExtMIBConformance, ciceCfmInterfaceGroup=ciceCfmInterfaceGroup, ciceCfmMipRowStatus=ciceCfmMipRowStatus, ciceCfmEnable=ciceCfmEnable, ciceCfmMacEnableGroup=ciceCfmMacEnableGroup, ciceCfmBrainAddress=ciceCfmBrainAddress, ciceCfmMaxMdLevel=ciceCfmMaxMdLevel, ciceCfmIfObjects=ciceCfmIfObjects, ciceCfmInterfaceEntry=ciceCfmInterfaceEntry, ciceCfmMacEnableIfTable=ciceCfmMacEnableIfTable, ciceCfmMaNetGroup=ciceCfmMaNetGroup, ciceCfmLtrHoldTime=ciceCfmLtrHoldTime, ciceCfmMaNetCciDirection=ciceCfmMaNetCciDirection, ciscoIeee8021CfmExtMIB=ciscoIeee8021CfmExtMIB, ciceCfmLtmMulticastAddress=ciceCfmLtmMulticastAddress, ciceCfmGlobal=ciceCfmGlobal, ciceCfmMaNetCciEnable=ciceCfmMaNetCciEnable, ciceCfmMacEnableIfEntry=ciceCfmMacEnableIfEntry, ciceCfmIfIndex=ciceCfmIfIndex, ciceCfmEnableFaultAlarm=ciceCfmEnableFaultAlarm, cIeeeCfmExtMIBObjects=cIeeeCfmExtMIBObjects, ciceCfmLtrEnable=ciceCfmLtrEnable, ciceCfmMa=ciceCfmMa, ciceCfmMipMdLevel=ciceCfmMipMdLevel, ciceCfmInterfaceTable=ciceCfmInterfaceTable, ciceCfmLtr=ciceCfmLtr, ciceCfmMIBGroups=ciceCfmMIBGroups, ciceCfmMipGroup=ciceCfmMipGroup, ciceCfmMIBCompliance=ciceCfmMIBCompliance, ciceCfmMipTable=ciceCfmMipTable, ciceCfmGlobalObjectsGroup=ciceCfmGlobalObjectsGroup, ciceCfmCcMulticastAddress=ciceCfmCcMulticastAddress, ciceCfmIfState=ciceCfmIfState, PYSNMP_MODULE_ID=ciscoIeee8021CfmExtMIB, ciceCfmMipStorageType=ciceCfmMipStorageType, ciceCfmMacEnableStorageType=ciceCfmMacEnableStorageType, cIeeeCfmExtMIBNotifs=cIeeeCfmExtMIBNotifs, ciceCfmMaNetLossThreshold=ciceCfmMaNetLossThreshold, ciceCfmMaNetEntry=ciceCfmMaNetEntry, ciceCfmMacEnableRowStatus=ciceCfmMacEnableRowStatus, ciceCfmLtrSize=ciceCfmLtrSize, ciceCfmMep=ciceCfmMep, ciceCfmMacEnableVlanIndex=ciceCfmMacEnableVlanIndex, ciceCfmLtrConfigGroup=ciceCfmLtrConfigGroup, ciceCfmMIBCompliances=ciceCfmMIBCompliances, ciceCfmMaNetTable=ciceCfmMaNetTable, ciceCfmMipEntry=ciceCfmMipEntry, ciceCfmMipVlanIndex=ciceCfmMipVlanIndex)
