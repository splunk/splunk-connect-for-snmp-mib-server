#
# PySNMP MIB module CHIPAGENT-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/CHIPAGENT-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 17:31:19 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, Integer, OctetString = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "Integer", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsUnion, SingleValueConstraint, ValueRangeConstraint, ValueSizeConstraint, ConstraintsIntersection = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsUnion", "SingleValueConstraint", "ValueRangeConstraint", "ValueSizeConstraint", "ConstraintsIntersection")
DisplayString, = mibBuilder.importSymbols("RFC1155-SMI", "DisplayString")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
ObjectIdentity, enterprises, iso, Gauge32, Unsigned32, Counter64, Bits, IpAddress, MibScalar, MibTable, MibTableRow, MibTableColumn, NotificationType, TimeTicks, ModuleIdentity, Counter32, Integer32, MibIdentifier = mibBuilder.importSymbols("SNMPv2-SMI", "ObjectIdentity", "enterprises", "iso", "Gauge32", "Unsigned32", "Counter64", "Bits", "IpAddress", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "NotificationType", "TimeTicks", "ModuleIdentity", "Counter32", "Integer32", "MibIdentifier")
TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString")
chipcom = MibIdentifier((1, 3, 6, 1, 4, 1, 49))
chipmib02 = MibIdentifier((1, 3, 6, 1, 4, 1, 49, 2))
chipGen = MibIdentifier((1, 3, 6, 1, 4, 1, 49, 2, 1))
chipEcho = MibIdentifier((1, 3, 6, 1, 4, 1, 49, 2, 2))
chipProducts = MibIdentifier((1, 3, 6, 1, 4, 1, 49, 2, 3))
chipExperiment = MibIdentifier((1, 3, 6, 1, 4, 1, 49, 2, 4))
chipTTY = MibIdentifier((1, 3, 6, 1, 4, 1, 49, 2, 5))
chipTFTP = MibIdentifier((1, 3, 6, 1, 4, 1, 49, 2, 6))
chipDownload = MibIdentifier((1, 3, 6, 1, 4, 1, 49, 2, 7))
online = MibIdentifier((1, 3, 6, 1, 4, 1, 49, 2, 3, 1))
oebm = MibIdentifier((1, 3, 6, 1, 4, 1, 49, 2, 3, 2))
midnight = MibIdentifier((1, 3, 6, 1, 4, 1, 49, 2, 3, 3))
workGroupHub = MibIdentifier((1, 3, 6, 1, 4, 1, 49, 2, 3, 4))
emm = MibIdentifier((1, 3, 6, 1, 4, 1, 49, 2, 3, 5))
chipBridge = MibIdentifier((1, 3, 6, 1, 4, 1, 49, 2, 3, 6))
trmm = MibIdentifier((1, 3, 6, 1, 4, 1, 49, 2, 3, 7))
fmm = MibIdentifier((1, 3, 6, 1, 4, 1, 49, 2, 3, 8))
focus1 = MibIdentifier((1, 3, 6, 1, 4, 1, 49, 2, 3, 9))
oeim = MibIdentifier((1, 3, 6, 1, 4, 1, 49, 2, 3, 10))
chipExpTokenRing = MibIdentifier((1, 3, 6, 1, 4, 1, 49, 2, 4, 1))
dot1dBridge = MibIdentifier((1, 3, 6, 1, 4, 1, 49, 2, 4, 14))
dot5 = MibIdentifier((1, 3, 6, 1, 4, 1, 49, 2, 4, 1, 1))
olAgents = MibIdentifier((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 1))
olConc = MibIdentifier((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 2))
olEnv = MibIdentifier((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 3))
olModules = MibIdentifier((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4))
olNets = MibIdentifier((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 5))
olGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 6))
olAlarm = MibIdentifier((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 7))
olSpecMods = MibIdentifier((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4))
ol50nnMCTL = MibIdentifier((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 3))
ol51nnMMGT = MibIdentifier((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 4))
ol51nnMFIB = MibIdentifier((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 5))
ol51nnMUTP = MibIdentifier((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 6))
ol51nnMTP = MibIdentifier((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 7))
ol51nnMBNC = MibIdentifier((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 8))
ol51nnBEE = MibIdentifier((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 9))
ol51nnRES = MibIdentifier((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 10))
ol51nnREE = MibIdentifier((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 11))
ol51nnMAUIF = MibIdentifier((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 12))
ol51nnMAUIM = MibIdentifier((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 13))
ol5208MTP = MibIdentifier((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 14))
ol51nnMFP = MibIdentifier((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 15))
ol51nnMFBP = MibIdentifier((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 16))
ol51nnMTPL = MibIdentifier((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 17))
ol51nnMTPPL = MibIdentifier((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 18))
ol52nnMTP = MibIdentifier((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 19))
ol52nnMFR = MibIdentifier((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 20))
ol51nnMTS = MibIdentifier((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 21))
ol51nnMFL = MibIdentifier((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 22))
ol50nnMRCTL = MibIdentifier((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 23))
ol51nnMFB = MibIdentifier((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 24))
ol53nnMMGT = MibIdentifier((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 25))
ol53nnMFBMIC = MibIdentifier((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 26))
ol53nnMFIBST = MibIdentifier((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 27))
ol53nnMSTP = MibIdentifier((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 28))
ol51nnMTPCL = MibIdentifier((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 29))
ol52nnBTT = MibIdentifier((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 30))
ol51nnIx = MibIdentifier((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 31))
ol52nnMMGT = MibIdentifier((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 32))
ol50nnMHCTL = MibIdentifier((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 33))
olNet = MibIdentifier((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 5, 1))
olEnet = MibIdentifier((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 5, 2))
olTRnet = MibIdentifier((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 5, 3))
olFDDInet = MibIdentifier((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 5, 4))
hubSysGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 49, 2, 3, 4, 1))
hardwareGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 49, 2, 3, 4, 2))
softwareGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 49, 2, 3, 4, 3))
hubGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 49, 2, 3, 4, 4))
boardGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 49, 2, 3, 4, 5))
portGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 49, 2, 3, 4, 6))
alarmGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 49, 2, 3, 4, 7))
olThresh = MibIdentifier((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 7, 1))
olThreshControl = MibIdentifier((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 7, 1, 1))
chipGenProduct = MibScalar((1, 3, 6, 1, 4, 1, 49, 2, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 7))).clone(namedValues=NamedValues(("product-5100M-MGT", 1), ("product-5102B-EE", 2), ("product-8383B", 3), ("product-5112H-UTP", 4), ("product-5300M-MGT", 5), ("product-5200M-MGT", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: chipGenProduct.setStatus('mandatory')
chipGenServiceDate = MibScalar((1, 3, 6, 1, 4, 1, 49, 2, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(6, 6)).setFixedLength(6)).setMaxAccess("readonly")
if mibBuilder.loadTexts: chipGenServiceDate.setStatus('mandatory')
chipGenNetman = MibScalar((1, 3, 6, 1, 4, 1, 49, 2, 1, 3), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: chipGenNetman.setStatus('mandatory')
chipGenDiagnostics = MibScalar((1, 3, 6, 1, 4, 1, 49, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("passed", 1), ("failed", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: chipGenDiagnostics.setStatus('mandatory')
chipGenSerial = MibScalar((1, 3, 6, 1, 4, 1, 49, 2, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 128))).setMaxAccess("readonly")
if mibBuilder.loadTexts: chipGenSerial.setStatus('mandatory')
chipGenID = MibScalar((1, 3, 6, 1, 4, 1, 49, 2, 1, 6), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: chipGenID.setStatus('mandatory')
chipGenVers = MibScalar((1, 3, 6, 1, 4, 1, 49, 2, 1, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: chipGenVers.setStatus('mandatory')
chipGenAuthFailureAddr = MibScalar((1, 3, 6, 1, 4, 1, 49, 2, 1, 8), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: chipGenAuthFailureAddr.setStatus('mandatory')
chipGenTimeLastChanged = MibScalar((1, 3, 6, 1, 4, 1, 49, 2, 1, 9), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: chipGenTimeLastChanged.setStatus('mandatory')
chipEchoStart = MibScalar((1, 3, 6, 1, 4, 1, 49, 2, 2, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("noEcho", 1), ("startEcho", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: chipEchoStart.setStatus('mandatory')
chipEchoAddr = MibScalar((1, 3, 6, 1, 4, 1, 49, 2, 2, 2), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: chipEchoAddr.setStatus('mandatory')
chipEchoPattern = MibScalar((1, 3, 6, 1, 4, 1, 49, 2, 2, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("zeroes", 1), ("ones", 2), ("mixed", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: chipEchoPattern.setStatus('mandatory')
chipEchoNumber = MibScalar((1, 3, 6, 1, 4, 1, 49, 2, 2, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: chipEchoNumber.setStatus('mandatory')
chipEchoSize = MibScalar((1, 3, 6, 1, 4, 1, 49, 2, 2, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(64, 1500))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: chipEchoSize.setStatus('mandatory')
chipEchoResponseCounts = MibScalar((1, 3, 6, 1, 4, 1, 49, 2, 2, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: chipEchoResponseCounts.setStatus('mandatory')
chipTTYNumber = MibScalar((1, 3, 6, 1, 4, 1, 49, 2, 5, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: chipTTYNumber.setStatus('mandatory')
chipTTYTable = MibTable((1, 3, 6, 1, 4, 1, 49, 2, 5, 2), )
if mibBuilder.loadTexts: chipTTYTable.setStatus('mandatory')
chipTTYEntry = MibTableRow((1, 3, 6, 1, 4, 1, 49, 2, 5, 2, 1), ).setIndexNames((0, "CHIPAGENT-MIB", "chipTTYIndex"))
if mibBuilder.loadTexts: chipTTYEntry.setStatus('mandatory')
chipTTYIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 5, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: chipTTYIndex.setStatus('mandatory')
chipTTYBaud = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 5, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(110, 300, 1200, 2400, 4800, 9600, 19200, 38400))).clone(namedValues=NamedValues(("one-hundred-ten", 110), ("three-hundred", 300), ("twelve-hundred", 1200), ("twenty-four-hundred", 2400), ("forty-eight-hundred", 4800), ("ninety-six-hundred", 9600), ("nineteen-two-hundred", 19200), ("thirty-eight-thousand-four-hundred", 38400)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: chipTTYBaud.setStatus('mandatory')
chipTTYParity = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 5, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("odd", 1), ("even", 2), ("none", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: chipTTYParity.setStatus('mandatory')
chipTTYStop = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 5, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("one", 1), ("two", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: chipTTYStop.setStatus('mandatory')
chipTTYData = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 5, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(7, 8))).clone(namedValues=NamedValues(("seven", 7), ("eight", 8)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: chipTTYData.setStatus('mandatory')
chipTTYTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 5, 2, 1, 6), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: chipTTYTimeout.setStatus('mandatory')
chipTTYPrompt = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 5, 2, 1, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 15))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: chipTTYPrompt.setStatus('mandatory')
chipTTYDTR = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 5, 2, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("asserted", 1), ("deasserted", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: chipTTYDTR.setStatus('mandatory')
chipTTYTerminalType = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 5, 2, 1, 9), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 40))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: chipTTYTerminalType.setStatus('mandatory')
chipTFTPStart = MibScalar((1, 3, 6, 1, 4, 1, 49, 2, 6, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("tftpNoTransfer", 1), ("tftpGet", 2), ("tftpPut", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: chipTFTPStart.setStatus('mandatory')
chipTFTPSlot = MibScalar((1, 3, 6, 1, 4, 1, 49, 2, 6, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 255))).clone(namedValues=NamedValues(("slot-1", 1), ("slot-2", 2), ("slot-3", 3), ("slot-4", 4), ("slot-5", 5), ("slot-6", 6), ("slot-7", 7), ("slot-8", 8), ("slot-9", 9), ("slot-10", 10), ("slot-11", 11), ("slot-12", 12), ("slot-13", 13), ("slot-14", 14), ("slot-15", 15), ("slot-16", 16), ("slot-17", 17), ("agent-slot", 255)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: chipTFTPSlot.setStatus('mandatory')
chipTFTPIpAddress = MibScalar((1, 3, 6, 1, 4, 1, 49, 2, 6, 3), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: chipTFTPIpAddress.setStatus('mandatory')
chipTFTPFileName = MibScalar((1, 3, 6, 1, 4, 1, 49, 2, 6, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: chipTFTPFileName.setStatus('mandatory')
chipTFTPFileType = MibScalar((1, 3, 6, 1, 4, 1, 49, 2, 6, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("flashCode", 1), ("bootCode", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: chipTFTPFileType.setStatus('mandatory')
chipTFTPResult = MibScalar((1, 3, 6, 1, 4, 1, 49, 2, 6, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17))).clone(namedValues=NamedValues(("clear", 1), ("xferInProgress", 2), ("okay", 3), ("otherTFTPError", 4), ("fileNotFound", 5), ("accessError", 6), ("diskFull", 7), ("illegalTFTPOperation", 8), ("invalidTFTPTransactionID", 9), ("noResponse", 10), ("invalidDownloadKey", 11), ("invalidSlot", 12), ("invalidNetwork", 13), ("fepromErase", 14), ("fepromProg", 15), ("xferError", 16), ("decodeError", 17)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: chipTFTPResult.setStatus('mandatory')
chipDownloadUDKSerial = MibScalar((1, 3, 6, 1, 4, 1, 49, 2, 7, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 8))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: chipDownloadUDKSerial.setStatus('mandatory')
chipDownloadKey = MibScalar((1, 3, 6, 1, 4, 1, 49, 2, 7, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 8))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: chipDownloadKey.setStatus('mandatory')
chipDownloadDateTime = MibScalar((1, 3, 6, 1, 4, 1, 49, 2, 7, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readonly")
if mibBuilder.loadTexts: chipDownloadDateTime.setStatus('mandatory')
mibBuilder.exportSymbols("CHIPAGENT-MIB", chipTFTPFileType=chipTFTPFileType, chipmib02=chipmib02, chipTTYEntry=chipTTYEntry, workGroupHub=workGroupHub, ol52nnMTP=ol52nnMTP, dot5=dot5, chipTTYData=chipTTYData, online=online, chipTTYTimeout=chipTTYTimeout, ol51nnMFB=ol51nnMFB, chipExpTokenRing=chipExpTokenRing, emm=emm, ol53nnMMGT=ol53nnMMGT, chipTTYBaud=chipTTYBaud, ol52nnMFR=ol52nnMFR, boardGroup=boardGroup, chipTTYDTR=chipTTYDTR, chipTFTP=chipTFTP, chipTTYIndex=chipTTYIndex, chipTFTPIpAddress=chipTFTPIpAddress, ol51nnIx=ol51nnIx, olTRnet=olTRnet, chipDownloadKey=chipDownloadKey, chipEchoResponseCounts=chipEchoResponseCounts, chipDownloadDateTime=chipDownloadDateTime, chipEchoAddr=chipEchoAddr, chipTFTPResult=chipTFTPResult, olNet=olNet, ol51nnBEE=ol51nnBEE, chipProducts=chipProducts, olModules=olModules, chipEchoStart=chipEchoStart, chipBridge=chipBridge, olThreshControl=olThreshControl, chipGenNetman=chipGenNetman, ol51nnMTS=ol51nnMTS, ol50nnMHCTL=ol50nnMHCTL, ol51nnMFBP=ol51nnMFBP, chipGenServiceDate=chipGenServiceDate, portGroup=portGroup, chipTTYStop=chipTTYStop, chipTTYPrompt=chipTTYPrompt, ol51nnRES=ol51nnRES, chipTFTPSlot=chipTFTPSlot, chipGenProduct=chipGenProduct, olThresh=olThresh, chipDownloadUDKSerial=chipDownloadUDKSerial, chipTTYTerminalType=chipTTYTerminalType, ol51nnMTPPL=ol51nnMTPPL, dot1dBridge=dot1dBridge, ol51nnMFL=ol51nnMFL, olSpecMods=olSpecMods, ol51nnMAUIM=ol51nnMAUIM, ol52nnBTT=ol52nnBTT, chipGenTimeLastChanged=chipGenTimeLastChanged, chipTFTPStart=chipTFTPStart, olEnet=olEnet, chipTTYNumber=chipTTYNumber, ol53nnMSTP=ol53nnMSTP, chipDownload=chipDownload, chipGenID=chipGenID, ol50nnMCTL=ol50nnMCTL, olConc=olConc, chipTTYTable=chipTTYTable, ol5208MTP=ol5208MTP, ol51nnMFIB=ol51nnMFIB, ol51nnREE=ol51nnREE, ol53nnMFIBST=ol53nnMFIBST, ol51nnMMGT=ol51nnMMGT, olGroups=olGroups, chipExperiment=chipExperiment, olEnv=olEnv, ol52nnMMGT=ol52nnMMGT, olNets=olNets, midnight=midnight, fmm=fmm, chipGenSerial=chipGenSerial, ol50nnMRCTL=ol50nnMRCTL, hubSysGroup=hubSysGroup, oebm=oebm, olAlarm=olAlarm, focus1=focus1, chipGen=chipGen, olFDDInet=olFDDInet, ol51nnMTP=ol51nnMTP, ol51nnMAUIF=ol51nnMAUIF, trmm=trmm, ol51nnMUTP=ol51nnMUTP, ol51nnMBNC=ol51nnMBNC, chipcom=chipcom, chipGenAuthFailureAddr=chipGenAuthFailureAddr, chipEchoNumber=chipEchoNumber, hardwareGroup=hardwareGroup, chipEchoSize=chipEchoSize, oeim=oeim, chipTFTPFileName=chipTFTPFileName, olAgents=olAgents, chipGenVers=chipGenVers, alarmGroup=alarmGroup, ol51nnMTPCL=ol51nnMTPCL, chipGenDiagnostics=chipGenDiagnostics, chipEchoPattern=chipEchoPattern, hubGroup=hubGroup, ol51nnMTPL=ol51nnMTPL, chipEcho=chipEcho, chipTTY=chipTTY, ol51nnMFP=ol51nnMFP, softwareGroup=softwareGroup, chipTTYParity=chipTTYParity, ol53nnMFBMIC=ol53nnMFBMIC)
