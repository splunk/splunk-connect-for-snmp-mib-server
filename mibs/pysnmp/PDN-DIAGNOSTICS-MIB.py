#
# PySNMP MIB module PDN-DIAGNOSTICS-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/PDN-DIAGNOSTICS-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 20:29:29 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, OctetString, Integer = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "OctetString", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueSizeConstraint, ConstraintsUnion, SingleValueConstraint, ValueRangeConstraint, ConstraintsIntersection = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueSizeConstraint", "ConstraintsUnion", "SingleValueConstraint", "ValueRangeConstraint", "ConstraintsIntersection")
ifTestId, ifIndex = mibBuilder.importSymbols("IF-MIB", "ifTestId", "ifIndex")
pdn_diagnostics, = mibBuilder.importSymbols("PDN-HEADER-MIB", "pdn-diagnostics")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
iso, NotificationType, NotificationType, Gauge32, ModuleIdentity, Counter64, IpAddress, MibScalar, MibTable, MibTableRow, MibTableColumn, Counter32, Integer32, TimeTicks, ObjectIdentity, MibIdentifier, Bits, Unsigned32 = mibBuilder.importSymbols("SNMPv2-SMI", "iso", "NotificationType", "NotificationType", "Gauge32", "ModuleIdentity", "Counter64", "IpAddress", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Counter32", "Integer32", "TimeTicks", "ObjectIdentity", "MibIdentifier", "Bits", "Unsigned32")
AutonomousType, TextualConvention, DisplayString, RowStatus = mibBuilder.importSymbols("SNMPv2-TC", "AutonomousType", "TextualConvention", "DisplayString", "RowStatus")
diagTestMIBObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 1795, 2, 24, 2, 16, 1))
diagTestMIBTraps = MibIdentifier((1, 3, 6, 1, 4, 1, 1795, 2, 24, 2, 16, 2))
diagIfTest = MibIdentifier((1, 3, 6, 1, 4, 1, 1795, 2, 24, 2, 16, 1, 1))
diagApplTest = MibIdentifier((1, 3, 6, 1, 4, 1, 1795, 2, 24, 2, 16, 1, 2))
diagTest = MibIdentifier((1, 3, 6, 1, 4, 1, 1795, 2, 24, 2, 16, 1, 3))
ifLoopbackTestTable = MibTable((1, 3, 6, 1, 4, 1, 1795, 2, 24, 2, 16, 1, 1, 1), )
if mibBuilder.loadTexts: ifLoopbackTestTable.setStatus('mandatory')
ifLoopbackTestEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1795, 2, 24, 2, 16, 1, 1, 1, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: ifLoopbackTestEntry.setStatus('mandatory')
loopbackTestInputNumCycles = MibTableColumn((1, 3, 6, 1, 4, 1, 1795, 2, 24, 2, 16, 1, 1, 1, 1, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: loopbackTestInputNumCycles.setStatus('mandatory')
loopbackTestResultsPktsSent = MibTableColumn((1, 3, 6, 1, 4, 1, 1795, 2, 24, 2, 16, 1, 1, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: loopbackTestResultsPktsSent.setStatus('mandatory')
loopbackTestResultsPktsRcvdOK = MibTableColumn((1, 3, 6, 1, 4, 1, 1795, 2, 24, 2, 16, 1, 1, 1, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: loopbackTestResultsPktsRcvdOK.setStatus('mandatory')
loopbackTestResultsPktsRcvdErr = MibTableColumn((1, 3, 6, 1, 4, 1, 1795, 2, 24, 2, 16, 1, 1, 1, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: loopbackTestResultsPktsRcvdErr.setStatus('mandatory')
loopbackTestResultsPktsNotRcvd = MibTableColumn((1, 3, 6, 1, 4, 1, 1795, 2, 24, 2, 16, 1, 1, 1, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: loopbackTestResultsPktsNotRcvd.setStatus('mandatory')
loopbackTestResultsPktErrorRate = MibTableColumn((1, 3, 6, 1, 4, 1, 1795, 2, 24, 2, 16, 1, 1, 1, 1, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: loopbackTestResultsPktErrorRate.setStatus('mandatory')
loopbackTestResultsErrSecs = MibTableColumn((1, 3, 6, 1, 4, 1, 1795, 2, 24, 2, 16, 1, 1, 1, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: loopbackTestResultsErrSecs.setStatus('mandatory')
loopbackTestResultsSvrErrSecs = MibTableColumn((1, 3, 6, 1, 4, 1, 1795, 2, 24, 2, 16, 1, 1, 1, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: loopbackTestResultsSvrErrSecs.setStatus('mandatory')
loopbackTestResultsElpTime = MibTableColumn((1, 3, 6, 1, 4, 1, 1795, 2, 24, 2, 16, 1, 1, 1, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: loopbackTestResultsElpTime.setStatus('mandatory')
ifBERTObjectsTable = MibTable((1, 3, 6, 1, 4, 1, 1795, 2, 24, 2, 16, 1, 1, 2), )
if mibBuilder.loadTexts: ifBERTObjectsTable.setStatus('mandatory')
ifBERTObjectsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1795, 2, 24, 2, 16, 1, 1, 2, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: ifBERTObjectsEntry.setStatus('mandatory')
ifBERTTestDuration = MibTableColumn((1, 3, 6, 1, 4, 1, 1795, 2, 24, 2, 16, 1, 1, 2, 1, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ifBERTTestDuration.setStatus('mandatory')
ifBERTElapsedTime = MibTableColumn((1, 3, 6, 1, 4, 1, 1795, 2, 24, 2, 16, 1, 1, 2, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ifBERTElapsedTime.setStatus('mandatory')
ifBERTDownSyncUP = MibTableColumn((1, 3, 6, 1, 4, 1, 1795, 2, 24, 2, 16, 1, 1, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ifBERTDownSyncUP.setStatus('mandatory')
ifBERTUpSyncUP = MibTableColumn((1, 3, 6, 1, 4, 1, 1795, 2, 24, 2, 16, 1, 1, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ifBERTUpSyncUP.setStatus('mandatory')
ifBERTSegmentsSent = MibTableColumn((1, 3, 6, 1, 4, 1, 1795, 2, 24, 2, 16, 1, 1, 2, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ifBERTSegmentsSent.setStatus('mandatory')
ifBERTDownMBitsRcvd = MibTableColumn((1, 3, 6, 1, 4, 1, 1795, 2, 24, 2, 16, 1, 1, 2, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ifBERTDownMBitsRcvd.setStatus('mandatory')
ifBERTUpMBitsRcvd = MibTableColumn((1, 3, 6, 1, 4, 1, 1795, 2, 24, 2, 16, 1, 1, 2, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ifBERTUpMBitsRcvd.setStatus('mandatory')
ifBERTDownBitErrDetected = MibTableColumn((1, 3, 6, 1, 4, 1, 1795, 2, 24, 2, 16, 1, 1, 2, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ifBERTDownBitErrDetected.setStatus('mandatory')
ifBERTUpBitErrDetected = MibTableColumn((1, 3, 6, 1, 4, 1, 1795, 2, 24, 2, 16, 1, 1, 2, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ifBERTUpBitErrDetected.setStatus('mandatory')
ifBERTDownBitErrRate = MibTableColumn((1, 3, 6, 1, 4, 1, 1795, 2, 24, 2, 16, 1, 1, 2, 1, 10), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ifBERTDownBitErrRate.setStatus('mandatory')
ifBERTUpBitErrRate = MibTableColumn((1, 3, 6, 1, 4, 1, 1795, 2, 24, 2, 16, 1, 1, 2, 1, 11), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ifBERTUpBitErrRate.setStatus('mandatory')
ifBERTDownErroredSecs = MibTableColumn((1, 3, 6, 1, 4, 1, 1795, 2, 24, 2, 16, 1, 1, 2, 1, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ifBERTDownErroredSecs.setStatus('mandatory')
ifBERTUpErroredSecs = MibTableColumn((1, 3, 6, 1, 4, 1, 1795, 2, 24, 2, 16, 1, 1, 2, 1, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ifBERTUpErroredSecs.setStatus('mandatory')
ifBERTDownLineRate = MibTableColumn((1, 3, 6, 1, 4, 1, 1795, 2, 24, 2, 16, 1, 1, 2, 1, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ifBERTDownLineRate.setStatus('mandatory')
ifBERTUpLineRate = MibTableColumn((1, 3, 6, 1, 4, 1, 1795, 2, 24, 2, 16, 1, 1, 2, 1, 15), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ifBERTUpLineRate.setStatus('mandatory')
ifBERTDownMargin = MibTableColumn((1, 3, 6, 1, 4, 1, 1795, 2, 24, 2, 16, 1, 1, 2, 1, 16), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ifBERTDownMargin.setStatus('mandatory')
ifBERTUpMargin = MibTableColumn((1, 3, 6, 1, 4, 1, 1795, 2, 24, 2, 16, 1, 1, 2, 1, 17), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ifBERTUpMargin.setStatus('mandatory')
applMaxNumberOfTests = MibScalar((1, 3, 6, 1, 4, 1, 1795, 2, 24, 2, 16, 1, 2, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: applMaxNumberOfTests.setStatus('mandatory')
applCurrentNumberOfTests = MibScalar((1, 3, 6, 1, 4, 1, 1795, 2, 24, 2, 16, 1, 2, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: applCurrentNumberOfTests.setStatus('mandatory')
applStopAllTests = MibScalar((1, 3, 6, 1, 4, 1, 1795, 2, 24, 2, 16, 1, 2, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("noOp", 1), ("stop", 2), ("stopAndClear", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: applStopAllTests.setStatus('mandatory')
applNewTestId = MibScalar((1, 3, 6, 1, 4, 1, 1795, 2, 24, 2, 16, 1, 2, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: applNewTestId.setStatus('mandatory')
applTestStatusTable = MibTable((1, 3, 6, 1, 4, 1, 1795, 2, 24, 2, 16, 1, 2, 5), )
if mibBuilder.loadTexts: applTestStatusTable.setStatus('mandatory')
applTestStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1795, 2, 24, 2, 16, 1, 2, 5, 1), ).setIndexNames((0, "PDN-DIAGNOSTICS-MIB", "applTestId"))
if mibBuilder.loadTexts: applTestStatusEntry.setStatus('mandatory')
applTestId = MibTableColumn((1, 3, 6, 1, 4, 1, 1795, 2, 24, 2, 16, 1, 2, 5, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: applTestId.setStatus('mandatory')
applTestType = MibTableColumn((1, 3, 6, 1, 4, 1, 1795, 2, 24, 2, 16, 1, 2, 5, 1, 2), AutonomousType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: applTestType.setStatus('mandatory')
applTestStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1795, 2, 24, 2, 16, 1, 2, 5, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("none", 1), ("inProgress", 2), ("success", 3), ("failed", 4), ("abort", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: applTestStatus.setStatus('mandatory')
applTestErrorCode = MibTableColumn((1, 3, 6, 1, 4, 1, 1795, 2, 24, 2, 16, 1, 2, 5, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("none", 1), ("timeout", 2), ("icmpError", 3), ("systemError", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: applTestErrorCode.setStatus('mandatory')
applTestOwner = MibTableColumn((1, 3, 6, 1, 4, 1, 1795, 2, 24, 2, 16, 1, 2, 5, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 40))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: applTestOwner.setStatus('mandatory')
applTestRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1795, 2, 24, 2, 16, 1, 2, 5, 1, 6), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: applTestRowStatus.setStatus('mandatory')
applPingTestTable = MibTable((1, 3, 6, 1, 4, 1, 1795, 2, 24, 2, 16, 1, 2, 6), )
if mibBuilder.loadTexts: applPingTestTable.setStatus('mandatory')
applPingTestEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1795, 2, 24, 2, 16, 1, 2, 6, 1), ).setIndexNames((0, "PDN-DIAGNOSTICS-MIB", "applPingTestId"))
if mibBuilder.loadTexts: applPingTestEntry.setStatus('mandatory')
applPingTestId = MibTableColumn((1, 3, 6, 1, 4, 1, 1795, 2, 24, 2, 16, 1, 2, 6, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: applPingTestId.setStatus('mandatory')
applPingTestIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 1795, 2, 24, 2, 16, 1, 2, 6, 1, 2), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: applPingTestIpAddress.setStatus('mandatory')
applPingTestSourceIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 1795, 2, 24, 2, 16, 1, 2, 6, 1, 3), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: applPingTestSourceIpAddr.setStatus('mandatory')
applPingTestPacketSize = MibTableColumn((1, 3, 6, 1, 4, 1, 1795, 2, 24, 2, 16, 1, 2, 6, 1, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: applPingTestPacketSize.setStatus('mandatory')
applPingTestTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 1795, 2, 24, 2, 16, 1, 2, 6, 1, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: applPingTestTimeout.setStatus('mandatory')
applPingTestMaxPings = MibTableColumn((1, 3, 6, 1, 4, 1, 1795, 2, 24, 2, 16, 1, 2, 6, 1, 6), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: applPingTestMaxPings.setStatus('mandatory')
applPingTestPktsSent = MibTableColumn((1, 3, 6, 1, 4, 1, 1795, 2, 24, 2, 16, 1, 2, 6, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: applPingTestPktsSent.setStatus('mandatory')
applPingTestPktsRecv = MibTableColumn((1, 3, 6, 1, 4, 1, 1795, 2, 24, 2, 16, 1, 2, 6, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: applPingTestPktsRecv.setStatus('mandatory')
applPingTestMinTime = MibTableColumn((1, 3, 6, 1, 4, 1, 1795, 2, 24, 2, 16, 1, 2, 6, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: applPingTestMinTime.setStatus('mandatory')
applPingTestMaxTime = MibTableColumn((1, 3, 6, 1, 4, 1, 1795, 2, 24, 2, 16, 1, 2, 6, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: applPingTestMaxTime.setStatus('mandatory')
applPingTestAvgTime = MibTableColumn((1, 3, 6, 1, 4, 1, 1795, 2, 24, 2, 16, 1, 2, 6, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: applPingTestAvgTime.setStatus('mandatory')
applPingTestDomain = MibTableColumn((1, 3, 6, 1, 4, 1, 1795, 2, 24, 2, 16, 1, 2, 6, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("noop", 1), ("mgmt", 2), ("service", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: applPingTestDomain.setStatus('mandatory')
applPingTestIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1795, 2, 24, 2, 16, 1, 2, 6, 1, 13), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: applPingTestIfIndex.setStatus('mandatory')
applTracerouteConfigTable = MibTable((1, 3, 6, 1, 4, 1, 1795, 2, 24, 2, 16, 1, 2, 7), )
if mibBuilder.loadTexts: applTracerouteConfigTable.setStatus('mandatory')
applTracerouteConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1795, 2, 24, 2, 16, 1, 2, 7, 1), ).setIndexNames((0, "PDN-DIAGNOSTICS-MIB", "applTracerouteTestId"))
if mibBuilder.loadTexts: applTracerouteConfigEntry.setStatus('mandatory')
applTracerouteTestId = MibTableColumn((1, 3, 6, 1, 4, 1, 1795, 2, 24, 2, 16, 1, 2, 7, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: applTracerouteTestId.setStatus('mandatory')
applTracerouteIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 1795, 2, 24, 2, 16, 1, 2, 7, 1, 2), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: applTracerouteIpAddress.setStatus('mandatory')
applTracerouteSourceIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 1795, 2, 24, 2, 16, 1, 2, 7, 1, 3), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: applTracerouteSourceIpAddr.setStatus('mandatory')
applTraceroutePktsSize = MibTableColumn((1, 3, 6, 1, 4, 1, 1795, 2, 24, 2, 16, 1, 2, 7, 1, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: applTraceroutePktsSize.setStatus('mandatory')
applTracerouteTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 1795, 2, 24, 2, 16, 1, 2, 7, 1, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: applTracerouteTimeout.setStatus('mandatory')
applTracerouteMaxHops = MibTableColumn((1, 3, 6, 1, 4, 1, 1795, 2, 24, 2, 16, 1, 2, 7, 1, 6), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: applTracerouteMaxHops.setStatus('mandatory')
applTracerouteDomain = MibTableColumn((1, 3, 6, 1, 4, 1, 1795, 2, 24, 2, 16, 1, 2, 7, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("noop", 1), ("mgmt", 2), ("service", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: applTracerouteDomain.setStatus('mandatory')
applTracerouteIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1795, 2, 24, 2, 16, 1, 2, 7, 1, 8), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: applTracerouteIfIndex.setStatus('mandatory')
applTracerouteResultTable = MibTable((1, 3, 6, 1, 4, 1, 1795, 2, 24, 2, 16, 1, 2, 8), )
if mibBuilder.loadTexts: applTracerouteResultTable.setStatus('mandatory')
applTracerouteResultEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1795, 2, 24, 2, 16, 1, 2, 8, 1), ).setIndexNames((0, "PDN-DIAGNOSTICS-MIB", "applTracerouteResultTestId"), (0, "PDN-DIAGNOSTICS-MIB", "applTracerouteHopCount"))
if mibBuilder.loadTexts: applTracerouteResultEntry.setStatus('mandatory')
applTracerouteResultTestId = MibTableColumn((1, 3, 6, 1, 4, 1, 1795, 2, 24, 2, 16, 1, 2, 8, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: applTracerouteResultTestId.setStatus('mandatory')
applTracerouteHopCount = MibTableColumn((1, 3, 6, 1, 4, 1, 1795, 2, 24, 2, 16, 1, 2, 8, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: applTracerouteHopCount.setStatus('mandatory')
applTracerouteIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 1795, 2, 24, 2, 16, 1, 2, 8, 1, 3), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: applTracerouteIpAddr.setStatus('mandatory')
applTraceroutePktSize = MibTableColumn((1, 3, 6, 1, 4, 1, 1795, 2, 24, 2, 16, 1, 2, 8, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: applTraceroutePktSize.setStatus('mandatory')
applTracerouteProbe1RTT = MibTableColumn((1, 3, 6, 1, 4, 1, 1795, 2, 24, 2, 16, 1, 2, 8, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: applTracerouteProbe1RTT.setStatus('mandatory')
applTracerouteProbe2RTT = MibTableColumn((1, 3, 6, 1, 4, 1, 1795, 2, 24, 2, 16, 1, 2, 8, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: applTracerouteProbe2RTT.setStatus('mandatory')
applTracerouteProbe3RTT = MibTableColumn((1, 3, 6, 1, 4, 1, 1795, 2, 24, 2, 16, 1, 2, 8, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: applTracerouteProbe3RTT.setStatus('mandatory')
diagTestTrapEnable = MibScalar((1, 3, 6, 1, 4, 1, 1795, 2, 24, 2, 16, 1, 3, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: diagTestTrapEnable.setStatus('mandatory')
diagApplTestStart = NotificationType((1, 3, 6, 1, 4, 1, 1795, 2, 24, 2, 16, 2) + (0,1)).setObjects(("IF-MIB", "ifIndex"), ("PDN-DIAGNOSTICS-MIB", "applTestId"), ("PDN-DIAGNOSTICS-MIB", "applTestType"))
diagApplTestStop = NotificationType((1, 3, 6, 1, 4, 1, 1795, 2, 24, 2, 16, 2) + (0,101)).setObjects(("IF-MIB", "ifIndex"), ("PDN-DIAGNOSTICS-MIB", "applTestId"), ("PDN-DIAGNOSTICS-MIB", "applTestType"), ("PDN-DIAGNOSTICS-MIB", "applTestStatus"))
diagIfTestStart = NotificationType((1, 3, 6, 1, 4, 1, 1795, 2, 24, 2, 16, 2) + (0,2)).setObjects(("IF-MIB", "ifTestId"))
diagIfTestOver = NotificationType((1, 3, 6, 1, 4, 1, 1795, 2, 24, 2, 16, 2) + (0,102)).setObjects(("IF-MIB", "ifTestId"))
mibBuilder.exportSymbols("PDN-DIAGNOSTICS-MIB", applPingTestSourceIpAddr=applPingTestSourceIpAddr, ifBERTElapsedTime=ifBERTElapsedTime, ifBERTUpBitErrDetected=ifBERTUpBitErrDetected, applStopAllTests=applStopAllTests, ifBERTDownSyncUP=ifBERTDownSyncUP, applCurrentNumberOfTests=applCurrentNumberOfTests, applTracerouteConfigEntry=applTracerouteConfigEntry, applMaxNumberOfTests=applMaxNumberOfTests, applTracerouteProbe1RTT=applTracerouteProbe1RTT, applTraceroutePktsSize=applTraceroutePktsSize, applTracerouteTimeout=applTracerouteTimeout, ifBERTUpMBitsRcvd=ifBERTUpMBitsRcvd, loopbackTestResultsPktErrorRate=loopbackTestResultsPktErrorRate, diagTest=diagTest, diagIfTest=diagIfTest, applPingTestTimeout=applPingTestTimeout, applPingTestMaxTime=applPingTestMaxTime, ifLoopbackTestEntry=ifLoopbackTestEntry, ifBERTDownBitErrDetected=ifBERTDownBitErrDetected, ifBERTDownErroredSecs=ifBERTDownErroredSecs, loopbackTestResultsPktsSent=loopbackTestResultsPktsSent, applPingTestPktsRecv=applPingTestPktsRecv, applTracerouteProbe2RTT=applTracerouteProbe2RTT, ifLoopbackTestTable=ifLoopbackTestTable, applTracerouteHopCount=applTracerouteHopCount, applTestStatusEntry=applTestStatusEntry, applNewTestId=applNewTestId, applPingTestId=applPingTestId, applTracerouteIpAddr=applTracerouteIpAddr, ifBERTDownBitErrRate=ifBERTDownBitErrRate, ifBERTSegmentsSent=ifBERTSegmentsSent, loopbackTestResultsPktsRcvdErr=loopbackTestResultsPktsRcvdErr, applTracerouteProbe3RTT=applTracerouteProbe3RTT, applPingTestDomain=applPingTestDomain, diagApplTestStop=diagApplTestStop, ifBERTObjectsEntry=ifBERTObjectsEntry, applPingTestPacketSize=applPingTestPacketSize, loopbackTestResultsPktsRcvdOK=loopbackTestResultsPktsRcvdOK, loopbackTestResultsElpTime=loopbackTestResultsElpTime, applTestStatus=applTestStatus, applTraceroutePktSize=applTraceroutePktSize, diagTestMIBTraps=diagTestMIBTraps, applTracerouteSourceIpAddr=applTracerouteSourceIpAddr, ifBERTTestDuration=ifBERTTestDuration, ifBERTUpBitErrRate=ifBERTUpBitErrRate, applPingTestIfIndex=applPingTestIfIndex, diagTestTrapEnable=diagTestTrapEnable, ifBERTDownMBitsRcvd=ifBERTDownMBitsRcvd, applPingTestMaxPings=applPingTestMaxPings, applTracerouteResultTestId=applTracerouteResultTestId, applPingTestTable=applPingTestTable, applTracerouteIpAddress=applTracerouteIpAddress, applTestErrorCode=applTestErrorCode, applTracerouteConfigTable=applTracerouteConfigTable, applTracerouteResultEntry=applTracerouteResultEntry, ifBERTDownMargin=ifBERTDownMargin, applTestOwner=applTestOwner, ifBERTUpErroredSecs=ifBERTUpErroredSecs, loopbackTestResultsPktsNotRcvd=loopbackTestResultsPktsNotRcvd, ifBERTDownLineRate=ifBERTDownLineRate, applTracerouteTestId=applTracerouteTestId, applPingTestPktsSent=applPingTestPktsSent, applTestId=applTestId, loopbackTestInputNumCycles=loopbackTestInputNumCycles, applPingTestEntry=applPingTestEntry, ifBERTUpSyncUP=ifBERTUpSyncUP, diagIfTestOver=diagIfTestOver, ifBERTUpMargin=ifBERTUpMargin, applTracerouteDomain=applTracerouteDomain, diagApplTestStart=diagApplTestStart, applTestType=applTestType, applTracerouteIfIndex=applTracerouteIfIndex, ifBERTObjectsTable=ifBERTObjectsTable, diagApplTest=diagApplTest, ifBERTUpLineRate=ifBERTUpLineRate, applTestRowStatus=applTestRowStatus, applTracerouteResultTable=applTracerouteResultTable, applPingTestAvgTime=applPingTestAvgTime, applPingTestMinTime=applPingTestMinTime, diagIfTestStart=diagIfTestStart, applPingTestIpAddress=applPingTestIpAddress, applTestStatusTable=applTestStatusTable, loopbackTestResultsErrSecs=loopbackTestResultsErrSecs, diagTestMIBObjects=diagTestMIBObjects, loopbackTestResultsSvrErrSecs=loopbackTestResultsSvrErrSecs, applTracerouteMaxHops=applTracerouteMaxHops)
