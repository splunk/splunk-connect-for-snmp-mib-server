#
# PySNMP MIB module DTRConcentratorMIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/DTRConcentratorMIB
# Produced by pysmi-0.3.4 at Mon Apr 29 18:40:03 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, ObjectIdentifier, Integer = mibBuilder.importSymbols("ASN1", "OctetString", "ObjectIdentifier", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
SingleValueConstraint, ValueSizeConstraint, ConstraintsUnion, ConstraintsIntersection, ValueRangeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "SingleValueConstraint", "ValueSizeConstraint", "ConstraintsUnion", "ConstraintsIntersection", "ValueRangeConstraint")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
MibIdentifier, Gauge32, Integer32, iso, Bits, Unsigned32, enterprises, TimeTicks, NotificationType, ModuleIdentity, Counter64, ObjectIdentity, MibScalar, MibTable, MibTableRow, MibTableColumn, Counter32, IpAddress = mibBuilder.importSymbols("SNMPv2-SMI", "MibIdentifier", "Gauge32", "Integer32", "iso", "Bits", "Unsigned32", "enterprises", "TimeTicks", "NotificationType", "ModuleIdentity", "Counter64", "ObjectIdentity", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Counter32", "IpAddress")
DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention")
ibm = MibIdentifier((1, 3, 6, 1, 4, 1, 2))
ibmProd = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 6))
ibm8272 = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 6, 66))
ibm8272Ts = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 6, 66, 1))
ibm8272TsExpMIBs = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 6, 66, 1, 3))
dtrMIBs = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 6, 66, 1, 3, 1))
dtrConcMIB = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 6, 66, 1, 3, 1, 1))
dtrMacMIB = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 6, 66, 1, 3, 1, 2))
dtrExt = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 6, 66, 1, 3, 1, 3))
dtrConcMIBObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 6, 66, 1, 3, 1, 1, 1))
dtrConcMIBBase = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 6, 66, 1, 3, 1, 1, 1, 1))
dtrConcMIBSpTree = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 6, 66, 1, 3, 1, 1, 1, 2))
dtrConcMIBForwarding = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 6, 66, 1, 3, 1, 1, 1, 3))
dtrConcMIBMRI = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 6, 66, 1, 3, 1, 1, 1, 4))
dtrConcMIBStats = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 6, 66, 1, 3, 1, 1, 1, 5))
class Counter32(Counter32):
    pass

class Integer32(Integer32):
    pass

class RowStatus(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))
    namedValues = NamedValues(("active", 1), ("notInService", 2), ("notReady", 3), ("createAndGo", 4), ("createAndWait", 5), ("destroy", 6))

class MacAddress(OctetString):
    subtypeSpec = OctetString.subtypeSpec + ValueSizeConstraint(6, 6)
    fixedLength = 6

class InterfaceIndex(Integer32):
    pass

class IANAifType(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54))
    namedValues = NamedValues(("other", 1), ("regular1822", 2), ("hdh1822", 3), ("ddnX25", 4), ("rfc877x25", 5), ("ethernetCsmacd", 6), ("iso88023Csmacd", 7), ("iso88024TokenBus", 8), ("iso88025TokenRing", 9), ("iso88026Man", 10), ("starLan", 11), ("proteon10Mbit", 12), ("proteon80Mbit", 13), ("hyperchannel", 14), ("fddi", 15), ("lapb", 16), ("sdlc", 17), ("ds1", 18), ("e1", 19), ("basicISDN", 20), ("primaryISDN", 21), ("propPointToPointSerial", 22), ("ppp", 23), ("softwareLoopback", 24), ("eon", 25), ("ethernet3Mbit", 26), ("nsip", 27), ("slip", 28), ("ultra", 29), ("ds3", 30), ("sip", 31), ("frameRelay", 32), ("rs232", 33), ("para", 34), ("arcnet", 35), ("arcnetPlus", 36), ("atm", 37), ("miox25", 38), ("sonet", 39), ("x25ple", 40), ("iso88022llc", 41), ("localTalk", 42), ("smdsDxi", 43), ("frameRelayService", 44), ("v35", 45), ("hssi", 46), ("hippi", 47), ("modem", 48), ("aal5", 49), ("sonetPath", 50), ("sonetVT", 51), ("smdsIcip", 52), ("propVirtual", 53), ("propMultiplexor", 54))

class BridgeId(OctetString):
    subtypeSpec = OctetString.subtypeSpec + ValueSizeConstraint(8, 8)
    fixedLength = 8

class DynamicFdbStatus(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))
    namedValues = NamedValues(("other", 1), ("invalid", 2), ("learned", 3), ("self", 4), ("mgmt", 5))

class StaticFdbStatus(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))
    namedValues = NamedValues(("other", 1), ("invalid", 2), ("permanent", 3), ("deleteOnReset", 4))

class PortId(OctetString):
    subtypeSpec = OctetString.subtypeSpec + ValueSizeConstraint(2, 2)
    fixedLength = 2

class RouteDescriptor(OctetString):
    subtypeSpec = OctetString.subtypeSpec + ValueSizeConstraint(3, 3)
    fixedLength = 3

class Timeout(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ValueRangeConstraint(0, 65535)

dtrConcentratorAddress = MibScalar((1, 3, 6, 1, 4, 1, 2, 6, 66, 1, 3, 1, 1, 1, 1, 1), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dtrConcentratorAddress.setStatus('mandatory')
dtrOperNumberOfCrfs = MibScalar((1, 3, 6, 1, 4, 1, 2, 6, 66, 1, 3, 1, 1, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dtrOperNumberOfCrfs.setStatus('mandatory')
dtrOperNumberOfBridgeRelays = MibScalar((1, 3, 6, 1, 4, 1, 2, 6, 66, 1, 3, 1, 1, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(1, 1), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dtrOperNumberOfBridgeRelays.setStatus('mandatory')
dtrCRFTable = MibTable((1, 3, 6, 1, 4, 1, 2, 6, 66, 1, 3, 1, 1, 1, 1, 6), )
if mibBuilder.loadTexts: dtrCRFTable.setStatus('mandatory')
dtrCRFEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2, 6, 66, 1, 3, 1, 1, 1, 1, 6, 1), ).setIndexNames((0, "DTRConcentratorMIB", "dtrCRFIndex"))
if mibBuilder.loadTexts: dtrCRFEntry.setStatus('mandatory')
dtrCRFIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 66, 1, 3, 1, 1, 1, 1, 6, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dtrCRFIndex.setStatus('mandatory')
dtrCRFNumberOfPorts = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 66, 1, 3, 1, 1, 1, 1, 6, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dtrCRFNumberOfPorts.setStatus('mandatory')
dtrCRFPortMask = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 66, 1, 3, 1, 1, 1, 1, 6, 1, 3), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dtrCRFPortMask.setStatus('mandatory')
dtrCRFName = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 66, 1, 3, 1, 1, 1, 1, 6, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dtrCRFName.setStatus('mandatory')
dtrCRFMaxInfo = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 66, 1, 3, 1, 1, 1, 1, 6, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1500, 18200))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dtrCRFMaxInfo.setStatus('mandatory')
dtrCRFMacAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 66, 1, 3, 1, 1, 1, 1, 6, 1, 6), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dtrCRFMacAddress.setStatus('mandatory')
dtrCRFLocalLanId = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 66, 1, 3, 1, 1, 1, 1, 6, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dtrCRFLocalLanId.setStatus('mandatory')
dtrCRFFdbAgingTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 66, 1, 3, 1, 1, 1, 1, 6, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 9999)).clone(300)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dtrCRFFdbAgingTime.setStatus('mandatory')
dtrCRFMRIEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 66, 1, 3, 1, 1, 1, 1, 6, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dtrCRFMRIEnable.setStatus('mandatory')
dtrCRFLearnedEntryDiscards = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 66, 1, 3, 1, 1, 1, 1, 6, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dtrCRFLearnedEntryDiscards.setStatus('mandatory')
dtrCRFPortTable = MibTable((1, 3, 6, 1, 4, 1, 2, 6, 66, 1, 3, 1, 1, 1, 1, 7), )
if mibBuilder.loadTexts: dtrCRFPortTable.setStatus('mandatory')
dtrCRFPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2, 6, 66, 1, 3, 1, 1, 1, 1, 7, 1), ).setIndexNames((0, "DTRConcentratorMIB", "dtrCRFPortCRFIndex"), (0, "DTRConcentratorMIB", "dtrCRFPortNumber"))
if mibBuilder.loadTexts: dtrCRFPortEntry.setStatus('mandatory')
dtrCRFPortCRFIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 66, 1, 3, 1, 1, 1, 1, 7, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dtrCRFPortCRFIndex.setStatus('mandatory')
dtrCRFPortNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 66, 1, 3, 1, 1, 1, 1, 7, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dtrCRFPortNumber.setStatus('mandatory')
dtrCRFPortifIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 66, 1, 3, 1, 1, 1, 1, 7, 1, 3), InterfaceIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dtrCRFPortifIndex.setStatus('mandatory')
dtrCRFPortEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 66, 1, 3, 1, 1, 1, 1, 7, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dtrCRFPortEnable.setStatus('mandatory')
dtrCRFOperPortType = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 66, 1, 3, 1, 1, 1, 1, 7, 1, 5), IANAifType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dtrCRFOperPortType.setStatus('mandatory')
dtrCRFPortMtuExceededDiscards = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 66, 1, 3, 1, 1, 1, 1, 7, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dtrCRFPortMtuExceededDiscards.setStatus('mandatory')
dtrCRFPortDelayExceededDiscards = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 66, 1, 3, 1, 1, 1, 1, 7, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dtrCRFPortDelayExceededDiscards.setStatus('mandatory')
dtrSpanningTreeHoldTime = MibScalar((1, 3, 6, 1, 4, 1, 2, 6, 66, 1, 3, 1, 1, 1, 2, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dtrSpanningTreeHoldTime.setStatus('mandatory')
dtrSpanningTreeProtocolSpecification = MibScalar((1, 3, 6, 1, 4, 1, 2, 6, 66, 1, 3, 1, 1, 1, 2, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 3))).clone(namedValues=NamedValues(("unknown", 1), ("ieee8021d", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dtrSpanningTreeProtocolSpecification.setStatus('mandatory')
dtrSpanningTreeTimeSinceTopoChange = MibScalar((1, 3, 6, 1, 4, 1, 2, 6, 66, 1, 3, 1, 1, 1, 2, 3), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dtrSpanningTreeTimeSinceTopoChange.setStatus('mandatory')
dtrSpanningTreeTopologyChanges = MibScalar((1, 3, 6, 1, 4, 1, 2, 6, 66, 1, 3, 1, 1, 1, 2, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dtrSpanningTreeTopologyChanges.setStatus('mandatory')
dtrSpanningTreeBridgeForwardDelay = MibScalar((1, 3, 6, 1, 4, 1, 2, 6, 66, 1, 3, 1, 1, 1, 2, 5), Timeout().subtype(subtypeSpec=ValueRangeConstraint(400, 3000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dtrSpanningTreeBridgeForwardDelay.setStatus('mandatory')
dtrSpanningTreeBridgeHelloTime = MibScalar((1, 3, 6, 1, 4, 1, 2, 6, 66, 1, 3, 1, 1, 1, 2, 6), Timeout().subtype(subtypeSpec=ValueRangeConstraint(100, 1000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dtrSpanningTreeBridgeHelloTime.setStatus('mandatory')
dtrSpanningTreeTreeBridgeMaxAge = MibScalar((1, 3, 6, 1, 4, 1, 2, 6, 66, 1, 3, 1, 1, 1, 2, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(600, 4000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dtrSpanningTreeTreeBridgeMaxAge.setStatus('mandatory')
dtrCRFSpTreeTable = MibTable((1, 3, 6, 1, 4, 1, 2, 6, 66, 1, 3, 1, 1, 1, 2, 9), )
if mibBuilder.loadTexts: dtrCRFSpTreeTable.setStatus('mandatory')
dtrCRFSpTreeEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2, 6, 66, 1, 3, 1, 1, 1, 2, 9, 1), ).setIndexNames((0, "DTRConcentratorMIB", "dtrCRFSpTreeCRFIndex"))
if mibBuilder.loadTexts: dtrCRFSpTreeEntry.setStatus('mandatory')
dtrCRFSpTreeCRFIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 66, 1, 3, 1, 1, 1, 2, 9, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dtrCRFSpTreeCRFIndex.setStatus('mandatory')
dtrCRFSpTreePriority = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 66, 1, 3, 1, 1, 1, 2, 9, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dtrCRFSpTreePriority.setStatus('mandatory')
dtrCRFSpTreeDesignatedRoot = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 66, 1, 3, 1, 1, 1, 2, 9, 1, 3), BridgeId()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dtrCRFSpTreeDesignatedRoot.setStatus('mandatory')
dtrCRFSpTreeRootCost = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 66, 1, 3, 1, 1, 1, 2, 9, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dtrCRFSpTreeRootCost.setStatus('mandatory')
dtrCRFSpTreeRootPort = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 66, 1, 3, 1, 1, 1, 2, 9, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dtrCRFSpTreeRootPort.setStatus('mandatory')
dtrCRFSpTreeMaxAge = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 66, 1, 3, 1, 1, 1, 2, 9, 1, 6), Timeout()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dtrCRFSpTreeMaxAge.setStatus('mandatory')
dtrCRFSpTreeHelloTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 66, 1, 3, 1, 1, 1, 2, 9, 1, 7), Timeout()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dtrCRFSpTreeHelloTime.setStatus('mandatory')
dtrCRFSpTreeForwardDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 66, 1, 3, 1, 1, 1, 2, 9, 1, 8), Timeout()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dtrCRFSpTreeForwardDelay.setStatus('mandatory')
dtrCRFPortSpTreeTable = MibTable((1, 3, 6, 1, 4, 1, 2, 6, 66, 1, 3, 1, 1, 1, 2, 10), )
if mibBuilder.loadTexts: dtrCRFPortSpTreeTable.setStatus('mandatory')
dtrCRFPortSpTreeEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2, 6, 66, 1, 3, 1, 1, 1, 2, 10, 1), ).setIndexNames((0, "DTRConcentratorMIB", "dtrCRFPortSpTreeCRFIndex"), (0, "DTRConcentratorMIB", "dtrCRFPortSpTreeNumber"))
if mibBuilder.loadTexts: dtrCRFPortSpTreeEntry.setStatus('mandatory')
dtrCRFPortSpTreeCRFIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 66, 1, 3, 1, 1, 1, 2, 10, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dtrCRFPortSpTreeCRFIndex.setStatus('mandatory')
dtrCRFPortSpTreeNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 66, 1, 3, 1, 1, 1, 2, 10, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dtrCRFPortSpTreeNumber.setStatus('mandatory')
dtrCRFPortSpTreePriority = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 66, 1, 3, 1, 1, 1, 2, 10, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dtrCRFPortSpTreePriority.setStatus('mandatory')
dtrCRFPortSpTreeState = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 66, 1, 3, 1, 1, 1, 2, 10, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("disabled", 1), ("blocking", 2), ("listening", 3), ("learning", 4), ("forwarding", 5), ("broken", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dtrCRFPortSpTreeState.setStatus('mandatory')
dtrCRFPortSpTreePathCost = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 66, 1, 3, 1, 1, 1, 2, 10, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dtrCRFPortSpTreePathCost.setStatus('mandatory')
dtrCRFPortSpTreeDesignatedRoot = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 66, 1, 3, 1, 1, 1, 2, 10, 1, 6), BridgeId()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dtrCRFPortSpTreeDesignatedRoot.setStatus('mandatory')
dtrCRFPortSpTreeDesignatedCost = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 66, 1, 3, 1, 1, 1, 2, 10, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dtrCRFPortSpTreeDesignatedCost.setStatus('mandatory')
dtrCRFPortSpTreeDesignatedBridge = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 66, 1, 3, 1, 1, 1, 2, 10, 1, 8), BridgeId()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dtrCRFPortSpTreeDesignatedBridge.setStatus('mandatory')
dtrCRFPortSpTreeDesignatedPort = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 66, 1, 3, 1, 1, 1, 2, 10, 1, 9), OctetString().subtype(subtypeSpec=ValueSizeConstraint(2, 2)).setFixedLength(2)).setMaxAccess("readonly")
if mibBuilder.loadTexts: dtrCRFPortSpTreeDesignatedPort.setStatus('mandatory')
dtrCRFPortSpTreeForwardTransitions = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 66, 1, 3, 1, 1, 1, 2, 10, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dtrCRFPortSpTreeForwardTransitions.setStatus('mandatory')
dtrFdbDynamicAddrTable = MibTable((1, 3, 6, 1, 4, 1, 2, 6, 66, 1, 3, 1, 1, 1, 3, 1), )
if mibBuilder.loadTexts: dtrFdbDynamicAddrTable.setStatus('mandatory')
dtrFdbDynamicAddrEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2, 6, 66, 1, 3, 1, 1, 1, 3, 1, 1), ).setIndexNames((0, "DTRConcentratorMIB", "dtrFdbDynamicAddrCRFIndex"), (0, "DTRConcentratorMIB", "dtrFdbDynamicAddrStnAddress"))
if mibBuilder.loadTexts: dtrFdbDynamicAddrEntry.setStatus('mandatory')
dtrFdbDynamicAddrCRFIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 66, 1, 3, 1, 1, 1, 3, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dtrFdbDynamicAddrCRFIndex.setStatus('mandatory')
dtrFdbDynamicAddrStnAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 66, 1, 3, 1, 1, 1, 3, 1, 1, 2), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dtrFdbDynamicAddrStnAddress.setStatus('mandatory')
dtrFdbDynamicAddrPortNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 66, 1, 3, 1, 1, 1, 3, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dtrFdbDynamicAddrPortNumber.setStatus('mandatory')
dtrFdbDynamicAddrStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 66, 1, 3, 1, 1, 1, 3, 1, 1, 4), DynamicFdbStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dtrFdbDynamicAddrStatus.setStatus('mandatory')
dtrFdbStaticAddrTable = MibTable((1, 3, 6, 1, 4, 1, 2, 6, 66, 1, 3, 1, 1, 1, 3, 2), )
if mibBuilder.loadTexts: dtrFdbStaticAddrTable.setStatus('mandatory')
dtrFdbStaticAddrEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2, 6, 66, 1, 3, 1, 1, 1, 3, 2, 1), ).setIndexNames((0, "DTRConcentratorMIB", "dtrFdbStaticAddrCRFIndex"), (0, "DTRConcentratorMIB", "dtrFdbStaticAddrStnAddress"))
if mibBuilder.loadTexts: dtrFdbStaticAddrEntry.setStatus('mandatory')
dtrFdbStaticAddrCRFIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 66, 1, 3, 1, 1, 1, 3, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dtrFdbStaticAddrCRFIndex.setStatus('mandatory')
dtrFdbStaticAddrStnAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 66, 1, 3, 1, 1, 1, 3, 2, 1, 2), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dtrFdbStaticAddrStnAddress.setStatus('mandatory')
dtrFdbStaticAddrRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 66, 1, 3, 1, 1, 1, 3, 2, 1, 3), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dtrFdbStaticAddrRowStatus.setStatus('mandatory')
dtrFdbStaticAddrInMask = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 66, 1, 3, 1, 1, 1, 3, 2, 1, 4), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dtrFdbStaticAddrInMask.setStatus('mandatory')
dtrFdbStaticAddrOutMask = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 66, 1, 3, 1, 1, 1, 3, 2, 1, 5), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dtrFdbStaticAddrOutMask.setStatus('mandatory')
dtrFdbStaticAddrStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 66, 1, 3, 1, 1, 1, 3, 2, 1, 6), StaticFdbStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dtrFdbStaticAddrStatus.setStatus('mandatory')
dtrFdbDynamicRDTable = MibTable((1, 3, 6, 1, 4, 1, 2, 6, 66, 1, 3, 1, 1, 1, 3, 3), )
if mibBuilder.loadTexts: dtrFdbDynamicRDTable.setStatus('mandatory')
dtrFdbDynamicRDEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2, 6, 66, 1, 3, 1, 1, 1, 3, 3, 1), ).setIndexNames((0, "DTRConcentratorMIB", "dtrFdbDynamicRDCRFIndex"), (0, "DTRConcentratorMIB", "dtrFdbDynamicRDRouteDesc"))
if mibBuilder.loadTexts: dtrFdbDynamicRDEntry.setStatus('mandatory')
dtrFdbDynamicRDCRFIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 66, 1, 3, 1, 1, 1, 3, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dtrFdbDynamicRDCRFIndex.setStatus('mandatory')
dtrFdbDynamicRDRouteDesc = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 66, 1, 3, 1, 1, 1, 3, 3, 1, 2), RouteDescriptor()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dtrFdbDynamicRDRouteDesc.setStatus('mandatory')
dtrFdbDynamicRDPortNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 66, 1, 3, 1, 1, 1, 3, 3, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dtrFdbDynamicRDPortNumber.setStatus('mandatory')
dtrFdbDynamicRDStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 66, 1, 3, 1, 1, 1, 3, 3, 1, 4), DynamicFdbStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dtrFdbDynamicRDStatus.setStatus('mandatory')
dtrFdbStaticRDTable = MibTable((1, 3, 6, 1, 4, 1, 2, 6, 66, 1, 3, 1, 1, 1, 3, 5), )
if mibBuilder.loadTexts: dtrFdbStaticRDTable.setStatus('mandatory')
dtrFdbStaticRDEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2, 6, 66, 1, 3, 1, 1, 1, 3, 5, 1), ).setIndexNames((0, "DTRConcentratorMIB", "dtrFdbStaticRDCRFIndex"), (0, "DTRConcentratorMIB", "dtrFdbStaticRDRouteDesc"))
if mibBuilder.loadTexts: dtrFdbStaticRDEntry.setStatus('mandatory')
dtrFdbStaticRDCRFIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 66, 1, 3, 1, 1, 1, 3, 5, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dtrFdbStaticRDCRFIndex.setStatus('mandatory')
dtrFdbStaticRDRouteDesc = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 66, 1, 3, 1, 1, 1, 3, 5, 1, 2), RouteDescriptor()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dtrFdbStaticRDRouteDesc.setStatus('mandatory')
dtrFdbStaticRDRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 66, 1, 3, 1, 1, 1, 3, 5, 1, 3), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dtrFdbStaticRDRowStatus.setStatus('mandatory')
dtrFdbStaticRDPortNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 66, 1, 3, 1, 1, 1, 3, 5, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dtrFdbStaticRDPortNumber.setStatus('mandatory')
dtrFdbStaticRDStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 66, 1, 3, 1, 1, 1, 3, 5, 1, 5), StaticFdbStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dtrFdbStaticRDStatus.setStatus('mandatory')
dtrMRITable = MibTable((1, 3, 6, 1, 4, 1, 2, 6, 66, 1, 3, 1, 1, 1, 4, 1), )
if mibBuilder.loadTexts: dtrMRITable.setStatus('mandatory')
dtrMRIEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2, 6, 66, 1, 3, 1, 1, 1, 4, 1, 1), ).setIndexNames((0, "DTRConcentratorMIB", "dtrMRICRFIndex"), (0, "DTRConcentratorMIB", "dtrMRIMgmtType"))
if mibBuilder.loadTexts: dtrMRIEntry.setStatus('mandatory')
dtrMRICRFIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 66, 1, 3, 1, 1, 1, 4, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dtrMRICRFIndex.setStatus('mandatory')
dtrMRIMgmtType = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 66, 1, 3, 1, 1, 1, 4, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 15))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dtrMRIMgmtType.setStatus('mandatory')
dtrMRIOutMask = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 66, 1, 3, 1, 1, 1, 4, 1, 1, 3), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dtrMRIOutMask.setStatus('mandatory')
dtrCRFPortStatsTable = MibTable((1, 3, 6, 1, 4, 1, 2, 6, 66, 1, 3, 1, 1, 1, 5, 1), )
if mibBuilder.loadTexts: dtrCRFPortStatsTable.setStatus('mandatory')
dtrCRFPortStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2, 6, 66, 1, 3, 1, 1, 1, 5, 1, 1), ).setIndexNames((0, "DTRConcentratorMIB", "dtrCRFPortStatsCRFIndex"), (0, "DTRConcentratorMIB", "dtrCRFPortStatsPortNumber"))
if mibBuilder.loadTexts: dtrCRFPortStatsEntry.setStatus('mandatory')
dtrCRFPortStatsCRFIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 66, 1, 3, 1, 1, 1, 5, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dtrCRFPortStatsCRFIndex.setStatus('mandatory')
dtrCRFPortStatsPortNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 66, 1, 3, 1, 1, 1, 5, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dtrCRFPortStatsPortNumber.setStatus('mandatory')
dtrCRFPortStatsAreInFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 66, 1, 3, 1, 1, 1, 5, 1, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dtrCRFPortStatsAreInFrames.setStatus('mandatory')
dtrCRFPortStatsAreOutFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 66, 1, 3, 1, 1, 1, 5, 1, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dtrCRFPortStatsAreOutFrames.setStatus('mandatory')
dtrCRFPortStatsInFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 66, 1, 3, 1, 1, 1, 5, 1, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dtrCRFPortStatsInFrames.setStatus('mandatory')
dtrCRFPortStatsOutFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 66, 1, 3, 1, 1, 1, 5, 1, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dtrCRFPortStatsOutFrames.setStatus('mandatory')
dtrCRFPortStatsSrfInFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 66, 1, 3, 1, 1, 1, 5, 1, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dtrCRFPortStatsSrfInFrames.setStatus('mandatory')
dtrCRFPortStatsSrfOutFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 66, 1, 3, 1, 1, 1, 5, 1, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dtrCRFPortStatsSrfOutFrames.setStatus('mandatory')
dtrCRFPortStatsSteInFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 66, 1, 3, 1, 1, 1, 5, 1, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dtrCRFPortStatsSteInFrames.setStatus('mandatory')
dtrCRFPortStatsSteOutFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 66, 1, 3, 1, 1, 1, 5, 1, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dtrCRFPortStatsSteOutFrames.setStatus('mandatory')
dtrCRFPortStatsInvalidRI = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 66, 1, 3, 1, 1, 1, 5, 1, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dtrCRFPortStatsInvalidRI.setStatus('mandatory')
dtrCRFPortStatsInMisdirected = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 66, 1, 3, 1, 1, 1, 5, 1, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dtrCRFPortStatsInMisdirected.setStatus('mandatory')
dtrCRFPortStatsInDiscards = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 66, 1, 3, 1, 1, 1, 5, 1, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dtrCRFPortStatsInDiscards.setStatus('mandatory')
dtrExSrbGlobal = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 6, 66, 1, 3, 1, 3, 1))
dtrExSrbStp = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 6, 66, 1, 3, 1, 3, 2))
dtrExSrbStpGlobal = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 6, 66, 1, 3, 1, 3, 2, 1))
dtrExSrbBridgeNumber = MibScalar((1, 3, 6, 1, 4, 1, 2, 6, 66, 1, 3, 1, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 15))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dtrExSrbBridgeNumber.setStatus('mandatory')
dtrExSrbBridgeNumberOfCrfs = MibScalar((1, 3, 6, 1, 4, 1, 2, 6, 66, 1, 3, 1, 3, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(2, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dtrExSrbBridgeNumberOfCrfs.setStatus('mandatory')
dtrExSrbStpPriority = MibScalar((1, 3, 6, 1, 4, 1, 2, 6, 66, 1, 3, 1, 3, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dtrExSrbStpPriority.setStatus('mandatory')
dtrExSrbStpAddress = MibScalar((1, 3, 6, 1, 4, 1, 2, 6, 66, 1, 3, 1, 3, 2, 1, 2), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dtrExSrbStpAddress.setStatus('mandatory')
dtrExSrbStpBridgeMaxAge = MibScalar((1, 3, 6, 1, 4, 1, 2, 6, 66, 1, 3, 1, 3, 2, 1, 3), Timeout().subtype(subtypeSpec=ValueRangeConstraint(600, 4000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dtrExSrbStpBridgeMaxAge.setStatus('mandatory')
dtrExSrbStpBridgeHelloTime = MibScalar((1, 3, 6, 1, 4, 1, 2, 6, 66, 1, 3, 1, 3, 2, 1, 4), Timeout().subtype(subtypeSpec=ValueRangeConstraint(100, 1000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dtrExSrbStpBridgeHelloTime.setStatus('mandatory')
dtrExSrbStpBridgeForwardDelay = MibScalar((1, 3, 6, 1, 4, 1, 2, 6, 66, 1, 3, 1, 3, 2, 1, 5), Timeout().subtype(subtypeSpec=ValueRangeConstraint(400, 3000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dtrExSrbStpBridgeForwardDelay.setStatus('mandatory')
dtrExSrbStpDesignatedRoot = MibScalar((1, 3, 6, 1, 4, 1, 2, 6, 66, 1, 3, 1, 3, 2, 1, 6), BridgeId()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dtrExSrbStpDesignatedRoot.setStatus('mandatory')
dtrExSrbStpRootCost = MibScalar((1, 3, 6, 1, 4, 1, 2, 6, 66, 1, 3, 1, 3, 2, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dtrExSrbStpRootCost.setStatus('mandatory')
dtrExSrbStpRootPort = MibScalar((1, 3, 6, 1, 4, 1, 2, 6, 66, 1, 3, 1, 3, 2, 1, 8), PortId()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dtrExSrbStpRootPort.setStatus('mandatory')
dtrExSrbStpMaxAge = MibScalar((1, 3, 6, 1, 4, 1, 2, 6, 66, 1, 3, 1, 3, 2, 1, 9), Timeout().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dtrExSrbStpMaxAge.setStatus('mandatory')
dtrExSrbStpHelloTime = MibScalar((1, 3, 6, 1, 4, 1, 2, 6, 66, 1, 3, 1, 3, 2, 1, 10), Timeout().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dtrExSrbStpHelloTime.setStatus('mandatory')
dtrExSrbStpHoldTime = MibScalar((1, 3, 6, 1, 4, 1, 2, 6, 66, 1, 3, 1, 3, 2, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dtrExSrbStpHoldTime.setStatus('mandatory')
dtrExSrbStpForwardDelay = MibScalar((1, 3, 6, 1, 4, 1, 2, 6, 66, 1, 3, 1, 3, 2, 1, 12), Timeout().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dtrExSrbStpForwardDelay.setStatus('mandatory')
dtrExSrbStpMode = MibScalar((1, 3, 6, 1, 4, 1, 2, 6, 66, 1, 3, 1, 3, 2, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("manual", 0), ("automatic", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dtrExSrbStpMode.setStatus('mandatory')
dtrExSrbPortStpTable = MibTable((1, 3, 6, 1, 4, 1, 2, 6, 66, 1, 3, 1, 3, 2, 2), )
if mibBuilder.loadTexts: dtrExSrbPortStpTable.setStatus('mandatory')
dtrExSrbPortStpEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2, 6, 66, 1, 3, 1, 3, 2, 2, 1), ).setIndexNames((0, "DTRConcentratorMIB", "dtrExSrbPortStpCRFIndex"), (0, "DTRConcentratorMIB", "dtrExSrbPortStpPort"))
if mibBuilder.loadTexts: dtrExSrbPortStpEntry.setStatus('mandatory')
dtrExSrbPortStpCRFIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 66, 1, 3, 1, 3, 2, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dtrExSrbPortStpCRFIndex.setStatus('mandatory')
dtrExSrbPortStpPort = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 66, 1, 3, 1, 3, 2, 2, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(500, 563))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dtrExSrbPortStpPort.setStatus('mandatory')
dtrExSrbPortStpPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 66, 1, 3, 1, 3, 2, 2, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 0))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dtrExSrbPortStpPriority.setStatus('mandatory')
dtrExSrbPortStpState = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 66, 1, 3, 1, 3, 2, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("disabled", 1), ("blocking", 2), ("listening", 3), ("forwarding", 4), ("broken", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dtrExSrbPortStpState.setStatus('mandatory')
dtrExSrbPortStpPathCost = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 66, 1, 3, 1, 3, 2, 2, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dtrExSrbPortStpPathCost.setStatus('mandatory')
dtrExSrbPortStpDesignatedRoot = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 66, 1, 3, 1, 3, 2, 2, 1, 6), BridgeId()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dtrExSrbPortStpDesignatedRoot.setStatus('mandatory')
dtrExSrbPortStpDesignatedCost = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 66, 1, 3, 1, 3, 2, 2, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dtrExSrbPortStpDesignatedCost.setStatus('mandatory')
dtrExSrbPortStpDesignatedBridge = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 66, 1, 3, 1, 3, 2, 2, 1, 8), BridgeId()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dtrExSrbPortStpDesignatedBridge.setStatus('mandatory')
dtrExSrbPortStpDesignatedPort = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 66, 1, 3, 1, 3, 2, 2, 1, 9), PortId()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dtrExSrbPortStpDesignatedPort.setStatus('mandatory')
dtrExSrbPortStpForwardTrans = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 66, 1, 3, 1, 3, 2, 2, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dtrExSrbPortStpForwardTrans.setStatus('mandatory')
dtrExSrbPortHopTable = MibTable((1, 3, 6, 1, 4, 1, 2, 6, 66, 1, 3, 1, 3, 3), )
if mibBuilder.loadTexts: dtrExSrbPortHopTable.setStatus('mandatory')
dtrExSrbPortHopEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2, 6, 66, 1, 3, 1, 3, 3, 1), ).setIndexNames((0, "DTRConcentratorMIB", "dtrExSrbPortHopCRFIndex"), (0, "DTRConcentratorMIB", "dtrExSrbPortHopPort"))
if mibBuilder.loadTexts: dtrExSrbPortHopEntry.setStatus('mandatory')
dtrExSrbPortHopCRFIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 66, 1, 3, 1, 3, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dtrExSrbPortHopCRFIndex.setStatus('mandatory')
dtrExSrbPortHopPort = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 66, 1, 3, 1, 3, 3, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(500, 563))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dtrExSrbPortHopPort.setStatus('mandatory')
dtrExSrbPortHopAreRcvMax = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 66, 1, 3, 1, 3, 3, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 13))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dtrExSrbPortHopAreRcvMax.setStatus('mandatory')
dtrExSrbPortHopAreXmtMax = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 66, 1, 3, 1, 3, 3, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 13))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dtrExSrbPortHopAreXmtMax.setStatus('mandatory')
dtrExSrbPortHopSteRcvMax = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 66, 1, 3, 1, 3, 3, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 13))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dtrExSrbPortHopSteRcvMax.setStatus('mandatory')
dtrExSrbPortHopSteXmtMax = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 66, 1, 3, 1, 3, 3, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 13))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dtrExSrbPortHopSteXmtMax.setStatus('mandatory')
mibBuilder.exportSymbols("DTRConcentratorMIB", dtrCRFSpTreeCRFIndex=dtrCRFSpTreeCRFIndex, dtrMRIMgmtType=dtrMRIMgmtType, dtrExSrbPortHopSteRcvMax=dtrExSrbPortHopSteRcvMax, dtrCRFTable=dtrCRFTable, dtrConcMIBStats=dtrConcMIBStats, dtrCRFPortStatsSteInFrames=dtrCRFPortStatsSteInFrames, dtrCRFSpTreeRootCost=dtrCRFSpTreeRootCost, dtrCRFOperPortType=dtrCRFOperPortType, dtrExSrbStpRootPort=dtrExSrbStpRootPort, dtrCRFPortSpTreeState=dtrCRFPortSpTreeState, dtrExSrbStpBridgeMaxAge=dtrExSrbStpBridgeMaxAge, dtrCRFSpTreeForwardDelay=dtrCRFSpTreeForwardDelay, dtrFdbDynamicRDTable=dtrFdbDynamicRDTable, dtrFdbDynamicAddrEntry=dtrFdbDynamicAddrEntry, dtrExSrbStpBridgeForwardDelay=dtrExSrbStpBridgeForwardDelay, ibm=ibm, dtrSpanningTreeTopologyChanges=dtrSpanningTreeTopologyChanges, dtrMIBs=dtrMIBs, dtrFdbStaticRDEntry=dtrFdbStaticRDEntry, dtrCRFPortSpTreeNumber=dtrCRFPortSpTreeNumber, dtrSpanningTreeProtocolSpecification=dtrSpanningTreeProtocolSpecification, dtrCRFPortStatsEntry=dtrCRFPortStatsEntry, dtrExSrbPortStpPathCost=dtrExSrbPortStpPathCost, dtrConcMIBBase=dtrConcMIBBase, Timeout=Timeout, dtrCRFPortSpTreePriority=dtrCRFPortSpTreePriority, dtrCRFPortSpTreeDesignatedPort=dtrCRFPortSpTreeDesignatedPort, dtrMRITable=dtrMRITable, dtrFdbStaticAddrEntry=dtrFdbStaticAddrEntry, dtrExSrbStpAddress=dtrExSrbStpAddress, dtrFdbStaticAddrRowStatus=dtrFdbStaticAddrRowStatus, dtrMRIOutMask=dtrMRIOutMask, dtrExSrbPortStpDesignatedBridge=dtrExSrbPortStpDesignatedBridge, dtrFdbDynamicRDCRFIndex=dtrFdbDynamicRDCRFIndex, dtrConcMIBMRI=dtrConcMIBMRI, dtrExSrbStpHelloTime=dtrExSrbStpHelloTime, dtrConcMIBSpTree=dtrConcMIBSpTree, dtrSpanningTreeBridgeForwardDelay=dtrSpanningTreeBridgeForwardDelay, InterfaceIndex=InterfaceIndex, dtrExSrbPortHopTable=dtrExSrbPortHopTable, dtrExSrbPortHopCRFIndex=dtrExSrbPortHopCRFIndex, dtrCRFPortSpTreeCRFIndex=dtrCRFPortSpTreeCRFIndex, dtrExSrbPortStpPriority=dtrExSrbPortStpPriority, dtrFdbDynamicRDRouteDesc=dtrFdbDynamicRDRouteDesc, dtrExSrbBridgeNumber=dtrExSrbBridgeNumber, dtrExSrbPortStpState=dtrExSrbPortStpState, dtrExSrbStpMode=dtrExSrbStpMode, dtrFdbDynamicRDStatus=dtrFdbDynamicRDStatus, dtrCRFMacAddress=dtrCRFMacAddress, IANAifType=IANAifType, dtrCRFPortSpTreeTable=dtrCRFPortSpTreeTable, dtrExSrbPortStpEntry=dtrExSrbPortStpEntry, dtrCRFSpTreeEntry=dtrCRFSpTreeEntry, dtrExSrbStpHoldTime=dtrExSrbStpHoldTime, dtrCRFPortStatsInFrames=dtrCRFPortStatsInFrames, RouteDescriptor=RouteDescriptor, dtrExSrbStpMaxAge=dtrExSrbStpMaxAge, dtrCRFPortMask=dtrCRFPortMask, PortId=PortId, dtrFdbStaticRDPortNumber=dtrFdbStaticRDPortNumber, dtrFdbDynamicRDPortNumber=dtrFdbDynamicRDPortNumber, dtrCRFPortEntry=dtrCRFPortEntry, dtrOperNumberOfBridgeRelays=dtrOperNumberOfBridgeRelays, dtrConcMIBForwarding=dtrConcMIBForwarding, ibm8272Ts=ibm8272Ts, dtrExSrbPortStpTable=dtrExSrbPortStpTable, dtrCRFIndex=dtrCRFIndex, dtrCRFSpTreeTable=dtrCRFSpTreeTable, dtrExSrbStpDesignatedRoot=dtrExSrbStpDesignatedRoot, dtrFdbStaticAddrStatus=dtrFdbStaticAddrStatus, dtrFdbStaticRDRouteDesc=dtrFdbStaticRDRouteDesc, dtrFdbDynamicAddrStatus=dtrFdbDynamicAddrStatus, dtrFdbDynamicAddrCRFIndex=dtrFdbDynamicAddrCRFIndex, Integer32=Integer32, dtrConcentratorAddress=dtrConcentratorAddress, dtrFdbDynamicAddrPortNumber=dtrFdbDynamicAddrPortNumber, dtrCRFPortSpTreeDesignatedBridge=dtrCRFPortSpTreeDesignatedBridge, dtrSpanningTreeHoldTime=dtrSpanningTreeHoldTime, dtrExSrbPortStpPort=dtrExSrbPortStpPort, MacAddress=MacAddress, dtrExSrbStpGlobal=dtrExSrbStpGlobal, dtrExSrbStpForwardDelay=dtrExSrbStpForwardDelay, Counter32=Counter32, dtrExSrbPortHopSteXmtMax=dtrExSrbPortHopSteXmtMax, dtrExSrbStpBridgeHelloTime=dtrExSrbStpBridgeHelloTime, dtrExSrbPortStpDesignatedPort=dtrExSrbPortStpDesignatedPort, dtrExSrbPortStpForwardTrans=dtrExSrbPortStpForwardTrans, dtrCRFSpTreeDesignatedRoot=dtrCRFSpTreeDesignatedRoot, dtrCRFPortStatsInDiscards=dtrCRFPortStatsInDiscards, dtrCRFSpTreeRootPort=dtrCRFSpTreeRootPort, dtrFdbStaticAddrOutMask=dtrFdbStaticAddrOutMask, StaticFdbStatus=StaticFdbStatus, dtrCRFSpTreeMaxAge=dtrCRFSpTreeMaxAge, dtrCRFPortSpTreePathCost=dtrCRFPortSpTreePathCost, dtrCRFPortStatsOutFrames=dtrCRFPortStatsOutFrames, dtrExSrbPortHopAreRcvMax=dtrExSrbPortHopAreRcvMax, dtrCRFEntry=dtrCRFEntry, dtrFdbStaticRDTable=dtrFdbStaticRDTable, dtrCRFPortStatsAreInFrames=dtrCRFPortStatsAreInFrames, dtrMRIEntry=dtrMRIEntry, dtrExSrbBridgeNumberOfCrfs=dtrExSrbBridgeNumberOfCrfs, dtrCRFPortSpTreeForwardTransitions=dtrCRFPortSpTreeForwardTransitions, dtrCRFPortStatsCRFIndex=dtrCRFPortStatsCRFIndex, dtrSpanningTreeTreeBridgeMaxAge=dtrSpanningTreeTreeBridgeMaxAge, BridgeId=BridgeId, DynamicFdbStatus=DynamicFdbStatus, dtrCRFName=dtrCRFName, dtrExt=dtrExt, dtrCRFPortifIndex=dtrCRFPortifIndex, dtrCRFPortStatsSrfInFrames=dtrCRFPortStatsSrfInFrames, dtrExSrbPortHopEntry=dtrExSrbPortHopEntry, dtrExSrbPortStpCRFIndex=dtrExSrbPortStpCRFIndex, dtrFdbStaticAddrTable=dtrFdbStaticAddrTable, dtrExSrbGlobal=dtrExSrbGlobal, ibmProd=ibmProd, dtrCRFPortStatsInMisdirected=dtrCRFPortStatsInMisdirected, ibm8272TsExpMIBs=ibm8272TsExpMIBs, dtrExSrbStpRootCost=dtrExSrbStpRootCost, dtrCRFPortSpTreeEntry=dtrCRFPortSpTreeEntry, dtrFdbStaticAddrCRFIndex=dtrFdbStaticAddrCRFIndex, dtrFdbDynamicRDEntry=dtrFdbDynamicRDEntry, dtrExSrbPortHopAreXmtMax=dtrExSrbPortHopAreXmtMax, dtrFdbStaticRDStatus=dtrFdbStaticRDStatus, dtrCRFPortCRFIndex=dtrCRFPortCRFIndex, ibm8272=ibm8272, dtrCRFSpTreeHelloTime=dtrCRFSpTreeHelloTime, dtrFdbDynamicAddrTable=dtrFdbDynamicAddrTable, dtrCRFLearnedEntryDiscards=dtrCRFLearnedEntryDiscards, dtrMRICRFIndex=dtrMRICRFIndex, dtrCRFSpTreePriority=dtrCRFSpTreePriority, dtrFdbStaticAddrInMask=dtrFdbStaticAddrInMask, dtrCRFPortStatsSrfOutFrames=dtrCRFPortStatsSrfOutFrames, dtrCRFLocalLanId=dtrCRFLocalLanId, dtrExSrbPortStpDesignatedRoot=dtrExSrbPortStpDesignatedRoot, dtrCRFPortDelayExceededDiscards=dtrCRFPortDelayExceededDiscards, dtrCRFPortSpTreeDesignatedRoot=dtrCRFPortSpTreeDesignatedRoot, dtrCRFPortStatsTable=dtrCRFPortStatsTable, dtrExSrbStpPriority=dtrExSrbStpPriority, dtrCRFPortStatsPortNumber=dtrCRFPortStatsPortNumber, dtrCRFPortTable=dtrCRFPortTable, dtrCRFPortStatsInvalidRI=dtrCRFPortStatsInvalidRI, dtrCRFPortMtuExceededDiscards=dtrCRFPortMtuExceededDiscards, dtrFdbDynamicAddrStnAddress=dtrFdbDynamicAddrStnAddress, dtrCRFNumberOfPorts=dtrCRFNumberOfPorts, dtrCRFPortSpTreeDesignatedCost=dtrCRFPortSpTreeDesignatedCost, dtrCRFPortStatsAreOutFrames=dtrCRFPortStatsAreOutFrames, dtrMacMIB=dtrMacMIB, dtrExSrbPortHopPort=dtrExSrbPortHopPort, dtrConcMIBObjects=dtrConcMIBObjects, dtrExSrbStp=dtrExSrbStp, dtrOperNumberOfCrfs=dtrOperNumberOfCrfs, dtrFdbStaticRDCRFIndex=dtrFdbStaticRDCRFIndex, dtrCRFMaxInfo=dtrCRFMaxInfo, dtrCRFPortStatsSteOutFrames=dtrCRFPortStatsSteOutFrames, dtrCRFMRIEnable=dtrCRFMRIEnable, dtrSpanningTreeTimeSinceTopoChange=dtrSpanningTreeTimeSinceTopoChange, dtrCRFFdbAgingTime=dtrCRFFdbAgingTime, dtrCRFPortNumber=dtrCRFPortNumber, dtrCRFPortEnable=dtrCRFPortEnable, RowStatus=RowStatus, dtrExSrbPortStpDesignatedCost=dtrExSrbPortStpDesignatedCost, dtrFdbStaticRDRowStatus=dtrFdbStaticRDRowStatus, dtrSpanningTreeBridgeHelloTime=dtrSpanningTreeBridgeHelloTime, dtrFdbStaticAddrStnAddress=dtrFdbStaticAddrStnAddress, dtrConcMIB=dtrConcMIB)
