#
# PySNMP MIB module NOKIA-ALCHEMYOS-CLUSTER-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/NOKIA-ALCHEMYOS-CLUSTER-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 20:13:34 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, ObjectIdentifier, OctetString = mibBuilder.importSymbols("ASN1", "Integer", "ObjectIdentifier", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsUnion, SingleValueConstraint, ValueRangeConstraint, ConstraintsIntersection, ValueSizeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsUnion", "SingleValueConstraint", "ValueRangeConstraint", "ConstraintsIntersection", "ValueSizeConstraint")
cryptoCluster, alchemyOSModules, alchemyOSTraps = mibBuilder.importSymbols("NOKIA-ALCHEMYOS-MIB", "cryptoCluster", "alchemyOSModules", "alchemyOSTraps")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
Gauge32, ModuleIdentity, MibIdentifier, TimeTicks, NotificationType, Bits, Counter32, iso, Counter64, Unsigned32, ObjectIdentity, MibScalar, MibTable, MibTableRow, MibTableColumn, IpAddress, Integer32 = mibBuilder.importSymbols("SNMPv2-SMI", "Gauge32", "ModuleIdentity", "MibIdentifier", "TimeTicks", "NotificationType", "Bits", "Counter32", "iso", "Counter64", "Unsigned32", "ObjectIdentity", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "IpAddress", "Integer32")
DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention")
nokiaAlchemyOSClusterMIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 94, 1, 45, 5, 2))
nokiaAlchemyOSClusterMIB.setRevisions(('2001-01-18 00:00',))
if mibBuilder.loadTexts: nokiaAlchemyOSClusterMIB.setLastUpdated('200101180000Z')
if mibBuilder.loadTexts: nokiaAlchemyOSClusterMIB.setOrganization('Nokia Internet Communications.')
clusterInfoName = MibScalar((1, 3, 6, 1, 4, 1, 94, 1, 45, 2, 1, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: clusterInfoName.setStatus('current')
clusterMemberInfoNumMembers = MibScalar((1, 3, 6, 1, 4, 1, 94, 1, 45, 2, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: clusterMemberInfoNumMembers.setStatus('current')
clusterAddrTable = MibTable((1, 3, 6, 1, 4, 1, 94, 1, 45, 2, 1, 3), )
if mibBuilder.loadTexts: clusterAddrTable.setStatus('current')
clusterAddrEntry = MibTableRow((1, 3, 6, 1, 4, 1, 94, 1, 45, 2, 1, 3, 1), ).setIndexNames((0, "NOKIA-ALCHEMYOS-CLUSTER-MIB", "clusterAddrIndex"))
if mibBuilder.loadTexts: clusterAddrEntry.setStatus('current')
clusterAddrIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 94, 1, 45, 2, 1, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: clusterAddrIndex.setStatus('current')
clusterInfoAddrs = MibTableColumn((1, 3, 6, 1, 4, 1, 94, 1, 45, 2, 1, 3, 1, 2), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: clusterInfoAddrs.setStatus('current')
clusterMemberTable = MibTable((1, 3, 6, 1, 4, 1, 94, 1, 45, 2, 1, 4), )
if mibBuilder.loadTexts: clusterMemberTable.setStatus('current')
clusterMemberEntry = MibTableRow((1, 3, 6, 1, 4, 1, 94, 1, 45, 2, 1, 4, 1), ).setIndexNames((0, "NOKIA-ALCHEMYOS-CLUSTER-MIB", "clusterMemberIndex"))
if mibBuilder.loadTexts: clusterMemberEntry.setStatus('current')
clusterMemberIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 94, 1, 45, 2, 1, 4, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: clusterMemberIndex.setStatus('current')
clusterMemberPrimaryIPAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 94, 1, 45, 2, 1, 4, 1, 2), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: clusterMemberPrimaryIPAddr.setStatus('current')
clusterMemberWorkload = MibTableColumn((1, 3, 6, 1, 4, 1, 94, 1, 45, 2, 1, 4, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: clusterMemberWorkload.setStatus('current')
clusterMemberMaster = MibTableColumn((1, 3, 6, 1, 4, 1, 94, 1, 45, 2, 1, 4, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("no", 0), ("yes", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: clusterMemberMaster.setStatus('current')
clusterMemberSecondaryIPAddrTable = MibTable((1, 3, 6, 1, 4, 1, 94, 1, 45, 2, 1, 5), )
if mibBuilder.loadTexts: clusterMemberSecondaryIPAddrTable.setStatus('current')
clusterMemberSecondaryIPAddrEntry = MibTableRow((1, 3, 6, 1, 4, 1, 94, 1, 45, 2, 1, 5, 1), ).setIndexNames((0, "NOKIA-ALCHEMYOS-CLUSTER-MIB", "clusterMemberIndex"), (0, "NOKIA-ALCHEMYOS-CLUSTER-MIB", "clusterMemberSecondaryIPAddrIndex"))
if mibBuilder.loadTexts: clusterMemberSecondaryIPAddrEntry.setStatus('current')
clusterMemberSecondaryIPAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 94, 1, 45, 2, 1, 5, 1, 1), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: clusterMemberSecondaryIPAddr.setStatus('current')
clusterMemberSecondaryIPAddrIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 94, 1, 45, 2, 1, 5, 1, 2), Integer32())
if mibBuilder.loadTexts: clusterMemberSecondaryIPAddrIndex.setStatus('current')
processTable = MibTable((1, 3, 6, 1, 4, 1, 94, 1, 45, 2, 1, 6), )
if mibBuilder.loadTexts: processTable.setStatus('current')
processEntry = MibTableRow((1, 3, 6, 1, 4, 1, 94, 1, 45, 2, 1, 6, 1), ).setIndexNames((0, "NOKIA-ALCHEMYOS-CLUSTER-MIB", "processIndex"))
if mibBuilder.loadTexts: processEntry.setStatus('current')
processIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 94, 1, 45, 2, 1, 6, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: processIndex.setStatus('current')
processName = MibTableColumn((1, 3, 6, 1, 4, 1, 94, 1, 45, 2, 1, 6, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: processName.setStatus('current')
externalIPAddress = MibScalar((1, 3, 6, 1, 4, 1, 94, 1, 45, 2, 1, 7), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: externalIPAddress.setStatus('current')
alchemyOSTrap0 = ObjectIdentity((1, 3, 6, 1, 4, 1, 94, 1, 45, 6, 0))
if mibBuilder.loadTexts: alchemyOSTrap0.setStatus('current')
clusterMemberJoin = NotificationType((1, 3, 6, 1, 4, 1, 94, 1, 45, 6, 0, 1))
if mibBuilder.loadTexts: clusterMemberJoin.setStatus('current')
clusterMemberLeft = NotificationType((1, 3, 6, 1, 4, 1, 94, 1, 45, 6, 0, 2))
if mibBuilder.loadTexts: clusterMemberLeft.setStatus('current')
clusterMemberBecameMaster = NotificationType((1, 3, 6, 1, 4, 1, 94, 1, 45, 6, 0, 3))
if mibBuilder.loadTexts: clusterMemberBecameMaster.setStatus('current')
cpuUtilExceeded = NotificationType((1, 3, 6, 1, 4, 1, 94, 1, 45, 6, 0, 4))
if mibBuilder.loadTexts: cpuUtilExceeded.setStatus('current')
ioLoadExceeded = NotificationType((1, 3, 6, 1, 4, 1, 94, 1, 45, 6, 0, 5))
if mibBuilder.loadTexts: ioLoadExceeded.setStatus('current')
droppedUdpPacketsExceeded = NotificationType((1, 3, 6, 1, 4, 1, 94, 1, 45, 6, 0, 6))
if mibBuilder.loadTexts: droppedUdpPacketsExceeded.setStatus('current')
memUsageExceeded = NotificationType((1, 3, 6, 1, 4, 1, 94, 1, 45, 6, 0, 7))
if mibBuilder.loadTexts: memUsageExceeded.setStatus('current')
droppedIpPacketsExceeded = NotificationType((1, 3, 6, 1, 4, 1, 94, 1, 45, 6, 0, 8))
if mibBuilder.loadTexts: droppedIpPacketsExceeded.setStatus('current')
gatedConfigError = NotificationType((1, 3, 6, 1, 4, 1, 94, 1, 45, 6, 0, 9))
if mibBuilder.loadTexts: gatedConfigError.setStatus('current')
informAddress = NotificationType((1, 3, 6, 1, 4, 1, 94, 1, 45, 6, 0, 10)).setObjects(("NOKIA-ALCHEMYOS-CLUSTER-MIB", "externalIPAddress"))
if mibBuilder.loadTexts: informAddress.setStatus('current')
mibBuilder.exportSymbols("NOKIA-ALCHEMYOS-CLUSTER-MIB", clusterMemberInfoNumMembers=clusterMemberInfoNumMembers, clusterMemberMaster=clusterMemberMaster, processEntry=processEntry, droppedIpPacketsExceeded=droppedIpPacketsExceeded, clusterMemberSecondaryIPAddrIndex=clusterMemberSecondaryIPAddrIndex, clusterMemberSecondaryIPAddrEntry=clusterMemberSecondaryIPAddrEntry, clusterMemberSecondaryIPAddrTable=clusterMemberSecondaryIPAddrTable, clusterMemberLeft=clusterMemberLeft, droppedUdpPacketsExceeded=droppedUdpPacketsExceeded, processIndex=processIndex, clusterMemberEntry=clusterMemberEntry, processName=processName, clusterMemberWorkload=clusterMemberWorkload, clusterMemberTable=clusterMemberTable, PYSNMP_MODULE_ID=nokiaAlchemyOSClusterMIB, nokiaAlchemyOSClusterMIB=nokiaAlchemyOSClusterMIB, gatedConfigError=gatedConfigError, clusterInfoAddrs=clusterInfoAddrs, clusterMemberBecameMaster=clusterMemberBecameMaster, memUsageExceeded=memUsageExceeded, cpuUtilExceeded=cpuUtilExceeded, clusterMemberSecondaryIPAddr=clusterMemberSecondaryIPAddr, clusterMemberJoin=clusterMemberJoin, informAddress=informAddress, externalIPAddress=externalIPAddress, clusterMemberIndex=clusterMemberIndex, processTable=processTable, clusterInfoName=clusterInfoName, clusterAddrTable=clusterAddrTable, clusterAddrEntry=clusterAddrEntry, ioLoadExceeded=ioLoadExceeded, alchemyOSTrap0=alchemyOSTrap0, clusterAddrIndex=clusterAddrIndex, clusterMemberPrimaryIPAddr=clusterMemberPrimaryIPAddr)
