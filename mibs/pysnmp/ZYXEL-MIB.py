#
# PySNMP MIB module ZYXEL-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/ZYXEL-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 21:44:47 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, ObjectIdentifier, OctetString = mibBuilder.importSymbols("ASN1", "Integer", "ObjectIdentifier", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
SingleValueConstraint, ConstraintsUnion, ValueRangeConstraint, ValueSizeConstraint, ConstraintsIntersection = mibBuilder.importSymbols("ASN1-REFINEMENT", "SingleValueConstraint", "ConstraintsUnion", "ValueRangeConstraint", "ValueSizeConstraint", "ConstraintsIntersection")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
Counter64, NotificationType, Gauge32, ObjectIdentity, MibIdentifier, Integer32, Unsigned32, NotificationType, Counter32, iso, ModuleIdentity, Bits, enterprises, IpAddress, TimeTicks, MibScalar, MibTable, MibTableRow, MibTableColumn = mibBuilder.importSymbols("SNMPv2-SMI", "Counter64", "NotificationType", "Gauge32", "ObjectIdentity", "MibIdentifier", "Integer32", "Unsigned32", "NotificationType", "Counter32", "iso", "ModuleIdentity", "Bits", "enterprises", "IpAddress", "TimeTicks", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn")
DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention")
class DisplayString(OctetString):
    pass

zyxel = MibIdentifier((1, 3, 6, 1, 4, 1, 890))
products = MibIdentifier((1, 3, 6, 1, 4, 1, 890, 1))
prestige = MibIdentifier((1, 3, 6, 1, 4, 1, 890, 1, 2))
pSysVariables = MibIdentifier((1, 3, 6, 1, 4, 1, 890, 1, 2, 1))
pBRIVariables = MibIdentifier((1, 3, 6, 1, 4, 1, 890, 1, 2, 2))
pIPXVariables = MibIdentifier((1, 3, 6, 1, 4, 1, 890, 1, 2, 3))
pAPTVariables = MibIdentifier((1, 3, 6, 1, 4, 1, 890, 1, 2, 4))
pBRGVariables = MibIdentifier((1, 3, 6, 1, 4, 1, 890, 1, 2, 5))
pDialInVariables = MibIdentifier((1, 3, 6, 1, 4, 1, 890, 1, 2, 6))
pRemoteNodeVariables = MibIdentifier((1, 3, 6, 1, 4, 1, 890, 1, 2, 7))
pRemoteUserVariables = MibIdentifier((1, 3, 6, 1, 4, 1, 890, 1, 2, 8))
zyxelTraps = MibIdentifier((1, 3, 6, 1, 4, 1, 890, 1, 2, 9))
whyReboot = MibScalar((1, 3, 6, 1, 4, 1, 890, 1, 2, 9, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: whyReboot.setStatus('mandatory')
pSysRasSWVersion = MibScalar((1, 3, 6, 1, 4, 1, 890, 1, 2, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pSysRasSWVersion.setStatus('mandatory')
pSysIsdnFWVersion = MibScalar((1, 3, 6, 1, 4, 1, 890, 1, 2, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pSysIsdnFWVersion.setStatus('mandatory')
pSysRouteIP = MibScalar((1, 3, 6, 1, 4, 1, 890, 1, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pSysRouteIP.setStatus('mandatory')
pSysRouteIPX = MibScalar((1, 3, 6, 1, 4, 1, 890, 1, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("no", 1), ("yes", 2), ("na", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pSysRouteIPX.setStatus('mandatory')
pSysRouteAPT = MibScalar((1, 3, 6, 1, 4, 1, 890, 1, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("no", 1), ("yes", 2), ("na", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pSysRouteAPT.setStatus('mandatory')
pSysBridge = MibScalar((1, 3, 6, 1, 4, 1, 890, 1, 2, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pSysBridge.setStatus('mandatory')
pBRISwitchType = MibScalar((1, 3, 6, 1, 4, 1, 890, 1, 2, 2, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10))).clone(namedValues=NamedValues(("nortelcustom", 1), ("at-tni-1", 2), ("dss1", 3), ("ltr6", 4), ("at-tp2p", 5), ("at-tp2m", 6), ("nortelni-1", 7), ("at-tni-1", 8), ("at-tp2m", 9), ("nortelni-1", 10)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pBRISwitchType.setStatus('mandatory')
pBChannelUsage = MibScalar((1, 3, 6, 1, 4, 1, 890, 1, 2, 2, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("switch-unused", 1), ("switch-switch", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pBChannelUsage.setStatus('mandatory')
p1stPhoneNumber = MibScalar((1, 3, 6, 1, 4, 1, 890, 1, 2, 2, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: p1stPhoneNumber.setStatus('mandatory')
p1stSpidNumber = MibScalar((1, 3, 6, 1, 4, 1, 890, 1, 2, 2, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: p1stSpidNumber.setStatus('mandatory')
p1stAnalogCall = MibScalar((1, 3, 6, 1, 4, 1, 890, 1, 2, 2, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("none", 1), ("modem", 2), ("voice", 3), ("data", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: p1stAnalogCall.setStatus('mandatory')
p2ndPhoneNumber = MibScalar((1, 3, 6, 1, 4, 1, 890, 1, 2, 2, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: p2ndPhoneNumber.setStatus('mandatory')
p2ndSpidNumber = MibScalar((1, 3, 6, 1, 4, 1, 890, 1, 2, 2, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: p2ndSpidNumber.setStatus('mandatory')
p2ndAnalogCall = MibScalar((1, 3, 6, 1, 4, 1, 890, 1, 2, 2, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("none", 1), ("modem", 2), ("voice", 3), ("data", 4), ("na", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: p2ndAnalogCall.setStatus('mandatory')
pFrameType8022 = MibScalar((1, 3, 6, 1, 4, 1, 890, 1, 2, 3, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pFrameType8022.setStatus('mandatory')
pSeedRouter8022 = MibScalar((1, 3, 6, 1, 4, 1, 890, 1, 2, 3, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("no", 1), ("yes", 2), ("na", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pSeedRouter8022.setStatus('mandatory')
pNetworkNumber8022 = MibScalar((1, 3, 6, 1, 4, 1, 890, 1, 2, 3, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pNetworkNumber8022.setStatus('mandatory')
pFrameType8023 = MibScalar((1, 3, 6, 1, 4, 1, 890, 1, 2, 3, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pFrameType8023.setStatus('mandatory')
pSeedRouter8023 = MibScalar((1, 3, 6, 1, 4, 1, 890, 1, 2, 3, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("no", 1), ("yes", 2), ("na", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pSeedRouter8023.setStatus('mandatory')
pNetworkNumber8023 = MibScalar((1, 3, 6, 1, 4, 1, 890, 1, 2, 3, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pNetworkNumber8023.setStatus('mandatory')
pFrameTypeEthernetII = MibScalar((1, 3, 6, 1, 4, 1, 890, 1, 2, 3, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pFrameTypeEthernetII.setStatus('mandatory')
pSeedRouterEthernetII = MibScalar((1, 3, 6, 1, 4, 1, 890, 1, 2, 3, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("no", 1), ("yes", 2), ("na", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pSeedRouterEthernetII.setStatus('mandatory')
pNetworkNumberEthernetII = MibScalar((1, 3, 6, 1, 4, 1, 890, 1, 2, 3, 9), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pNetworkNumberEthernetII.setStatus('mandatory')
pFrameTypeSnap = MibScalar((1, 3, 6, 1, 4, 1, 890, 1, 2, 3, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pFrameTypeSnap.setStatus('mandatory')
pSeedRouterSnap = MibScalar((1, 3, 6, 1, 4, 1, 890, 1, 2, 3, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("no", 1), ("yes", 2), ("na", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pSeedRouterSnap.setStatus('mandatory')
pNetworkNumberSnap = MibScalar((1, 3, 6, 1, 4, 1, 890, 1, 2, 3, 12), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pNetworkNumberSnap.setStatus('mandatory')
pIPXRouteTable = MibTable((1, 3, 6, 1, 4, 1, 890, 1, 2, 3, 13), )
if mibBuilder.loadTexts: pIPXRouteTable.setStatus('mandatory')
pipxRouteEntry = MibTableRow((1, 3, 6, 1, 4, 1, 890, 1, 2, 3, 13, 1), ).setIndexNames((0, "ZYXEL-MIB", "pIpxRtIndex"))
if mibBuilder.loadTexts: pipxRouteEntry.setStatus('mandatory')
pIpxRtIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 890, 1, 2, 3, 13, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pIpxRtIndex.setStatus('mandatory')
pIpxRtServerName = MibTableColumn((1, 3, 6, 1, 4, 1, 890, 1, 2, 3, 13, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pIpxRtServerName.setStatus('mandatory')
pIpxRtActive = MibTableColumn((1, 3, 6, 1, 4, 1, 890, 1, 2, 3, 13, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pIpxRtActive.setStatus('mandatory')
pIpxRtNetworkNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 890, 1, 2, 3, 13, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pIpxRtNetworkNumber.setStatus('mandatory')
pIpxRtNodeNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 890, 1, 2, 3, 13, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pIpxRtNodeNumber.setStatus('mandatory')
pIpxRtSocketNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 890, 1, 2, 3, 13, 1, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pIpxRtSocketNumber.setStatus('mandatory')
pIpxRtTypeNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 890, 1, 2, 3, 13, 1, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pIpxRtTypeNumber.setStatus('mandatory')
pIpxRtHopCount = MibTableColumn((1, 3, 6, 1, 4, 1, 890, 1, 2, 3, 13, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pIpxRtHopCount.setStatus('mandatory')
pIpxRtTickCount = MibTableColumn((1, 3, 6, 1, 4, 1, 890, 1, 2, 3, 13, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pIpxRtTickCount.setStatus('mandatory')
pIpxRtGatewayNode = MibTableColumn((1, 3, 6, 1, 4, 1, 890, 1, 2, 3, 13, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pIpxRtGatewayNode.setStatus('mandatory')
pAPTSeedRouter = MibScalar((1, 3, 6, 1, 4, 1, 890, 1, 2, 4, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pAPTSeedRouter.setStatus('mandatory')
pAPTNetworkMin = MibScalar((1, 3, 6, 1, 4, 1, 890, 1, 2, 4, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(65536))).clone(namedValues=NamedValues(("na", 65536)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pAPTNetworkMin.setStatus('mandatory')
pAPTNetworkMax = MibScalar((1, 3, 6, 1, 4, 1, 890, 1, 2, 4, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(65536))).clone(namedValues=NamedValues(("na", 65536)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pAPTNetworkMax.setStatus('mandatory')
pAPT1stZoneName = MibScalar((1, 3, 6, 1, 4, 1, 890, 1, 2, 4, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pAPT1stZoneName.setStatus('mandatory')
pAPT2ndZoneName = MibScalar((1, 3, 6, 1, 4, 1, 890, 1, 2, 4, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pAPT2ndZoneName.setStatus('mandatory')
pAPTZipTimeout = MibScalar((1, 3, 6, 1, 4, 1, 890, 1, 2, 4, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pAPTZipTimeout.setStatus('mandatory')
pAPTRouteTable = MibTable((1, 3, 6, 1, 4, 1, 890, 1, 2, 4, 7), )
if mibBuilder.loadTexts: pAPTRouteTable.setStatus('mandatory')
paptRouteEntry = MibTableRow((1, 3, 6, 1, 4, 1, 890, 1, 2, 4, 7, 1), ).setIndexNames((0, "ZYXEL-MIB", "pAptRtIndex"))
if mibBuilder.loadTexts: paptRouteEntry.setStatus('mandatory')
pAptRtIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 890, 1, 2, 4, 7, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pAptRtIndex.setStatus('mandatory')
pAptRt1stZoneName = MibTableColumn((1, 3, 6, 1, 4, 1, 890, 1, 2, 4, 7, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pAptRt1stZoneName.setStatus('mandatory')
pAptRt2ndZoneName = MibTableColumn((1, 3, 6, 1, 4, 1, 890, 1, 2, 4, 7, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pAptRt2ndZoneName.setStatus('mandatory')
pAptRtNetworkMin = MibTableColumn((1, 3, 6, 1, 4, 1, 890, 1, 2, 4, 7, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pAptRtNetworkMin.setStatus('mandatory')
pAptRtNetworkMax = MibTableColumn((1, 3, 6, 1, 4, 1, 890, 1, 2, 4, 7, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pAptRtNetworkMax.setStatus('mandatory')
pAptRtActive = MibTableColumn((1, 3, 6, 1, 4, 1, 890, 1, 2, 4, 7, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pAptRtActive.setStatus('mandatory')
pAptRtMetric = MibTableColumn((1, 3, 6, 1, 4, 1, 890, 1, 2, 4, 7, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pAptRtMetric.setStatus('mandatory')
pAptRtGatewayNode = MibTableColumn((1, 3, 6, 1, 4, 1, 890, 1, 2, 4, 7, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pAptRtGatewayNode.setStatus('mandatory')
pBRGHandleIpx = MibScalar((1, 3, 6, 1, 4, 1, 890, 1, 2, 5, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("none", 1), ("client", 2), ("server", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pBRGHandleIpx.setStatus('mandatory')
pBRGRouteTable = MibTable((1, 3, 6, 1, 4, 1, 890, 1, 2, 5, 2), )
if mibBuilder.loadTexts: pBRGRouteTable.setStatus('mandatory')
pbrgRouteEntry = MibTableRow((1, 3, 6, 1, 4, 1, 890, 1, 2, 5, 2, 1), ).setIndexNames((0, "ZYXEL-MIB", "pBrgRtIndex"))
if mibBuilder.loadTexts: pbrgRouteEntry.setStatus('mandatory')
pBrgRtIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 890, 1, 2, 5, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pBrgRtIndex.setStatus('mandatory')
pBrgRtRouteName = MibTableColumn((1, 3, 6, 1, 4, 1, 890, 1, 2, 5, 2, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pBrgRtRouteName.setStatus('mandatory')
pBrgRtActive = MibTableColumn((1, 3, 6, 1, 4, 1, 890, 1, 2, 5, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pBrgRtActive.setStatus('mandatory')
pBrgRtEtherAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 890, 1, 2, 5, 2, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pBrgRtEtherAddress.setStatus('mandatory')
pBrgRtIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 890, 1, 2, 5, 2, 1, 5), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pBrgRtIpAddress.setStatus('mandatory')
pBrgRtGatewayNode = MibTableColumn((1, 3, 6, 1, 4, 1, 890, 1, 2, 5, 2, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pBrgRtGatewayNode.setStatus('mandatory')
pDIClidAuthen = MibScalar((1, 3, 6, 1, 4, 1, 890, 1, 2, 6, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("none", 1), ("required", 2), ("preferred", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pDIClidAuthen.setStatus('mandatory')
pDIRecvAuthen = MibScalar((1, 3, 6, 1, 4, 1, 890, 1, 2, 6, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("chap-pap", 1), ("chap", 2), ("pap", 3), ("none", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pDIRecvAuthen.setStatus('mandatory')
pDILinkCompression = MibScalar((1, 3, 6, 1, 4, 1, 890, 1, 2, 6, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("none", 1), ("stac", 2), ("v42bis", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pDILinkCompression.setStatus('mandatory')
pDIMaxTransferRate = MibScalar((1, 3, 6, 1, 4, 1, 890, 1, 2, 6, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("speed-128k", 1), ("speed-64k", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pDIMaxTransferRate.setStatus('mandatory')
pDIIdleTimeout = MibScalar((1, 3, 6, 1, 4, 1, 890, 1, 2, 6, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pDIIdleTimeout.setStatus('mandatory')
pDIIpAddressSupply = MibScalar((1, 3, 6, 1, 4, 1, 890, 1, 2, 6, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("user", 1), ("pool", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pDIIpAddressSupply.setStatus('mandatory')
pDIIpPoolStartAddress = MibScalar((1, 3, 6, 1, 4, 1, 890, 1, 2, 6, 7), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pDIIpPoolStartAddress.setStatus('mandatory')
pDIIpPoolCount = MibScalar((1, 3, 6, 1, 4, 1, 890, 1, 2, 6, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1000))).clone(namedValues=NamedValues(("na", 1000)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pDIIpPoolCount.setStatus('mandatory')
pDIIpxPool = MibScalar((1, 3, 6, 1, 4, 1, 890, 1, 2, 6, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pDIIpxPool.setStatus('mandatory')
pDIIpxPoolStartNetNumber = MibScalar((1, 3, 6, 1, 4, 1, 890, 1, 2, 6, 10), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pDIIpxPoolStartNetNumber.setStatus('mandatory')
pDIIpxPoolCount = MibScalar((1, 3, 6, 1, 4, 1, 890, 1, 2, 6, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1000))).clone(namedValues=NamedValues(("na", 1000)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pDIIpxPoolCount.setStatus('mandatory')
pRemoteNodeTable = MibTable((1, 3, 6, 1, 4, 1, 890, 1, 2, 7, 1), )
if mibBuilder.loadTexts: pRemoteNodeTable.setStatus('mandatory')
premoteNodeEntry = MibTableRow((1, 3, 6, 1, 4, 1, 890, 1, 2, 7, 1, 1), ).setIndexNames((0, "ZYXEL-MIB", "pRNIndex"))
if mibBuilder.loadTexts: premoteNodeEntry.setStatus('mandatory')
pRNIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 890, 1, 2, 7, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pRNIndex.setStatus('mandatory')
pRNName = MibTableColumn((1, 3, 6, 1, 4, 1, 890, 1, 2, 7, 1, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pRNName.setStatus('mandatory')
pRNActive = MibTableColumn((1, 3, 6, 1, 4, 1, 890, 1, 2, 7, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pRNActive.setStatus('mandatory')
pRNCallDirection = MibTableColumn((1, 3, 6, 1, 4, 1, 890, 1, 2, 7, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("both", 1), ("incoming", 2), ("outgoing", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pRNCallDirection.setStatus('mandatory')
pRNRemLogin = MibTableColumn((1, 3, 6, 1, 4, 1, 890, 1, 2, 7, 1, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pRNRemLogin.setStatus('mandatory')
pRNRemClid = MibTableColumn((1, 3, 6, 1, 4, 1, 890, 1, 2, 7, 1, 1, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pRNRemClid.setStatus('mandatory')
pRNCallBack = MibTableColumn((1, 3, 6, 1, 4, 1, 890, 1, 2, 7, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("no", 1), ("yes", 2), ("na", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pRNCallBack.setStatus('mandatory')
pRNMyLogin = MibTableColumn((1, 3, 6, 1, 4, 1, 890, 1, 2, 7, 1, 1, 8), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pRNMyLogin.setStatus('mandatory')
pRN1stPhoneNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 890, 1, 2, 7, 1, 1, 9), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pRN1stPhoneNumber.setStatus('mandatory')
pRN2ndPhoneNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 890, 1, 2, 7, 1, 1, 10), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pRN2ndPhoneNumber.setStatus('mandatory')
pRNRouteType = MibTableColumn((1, 3, 6, 1, 4, 1, 890, 1, 2, 7, 1, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("none", 1), ("ip", 2), ("ipx", 3), ("appletalk", 4), ("ip-ipx", 5), ("ip-appletalk", 6), ("ipx-appletalk", 7), ("ip-ipx-appletalk", 8)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pRNRouteType.setStatus('mandatory')
pRNBridgeEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 890, 1, 2, 7, 1, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pRNBridgeEnabled.setStatus('mandatory')
pRNEncapsulation = MibTableColumn((1, 3, 6, 1, 4, 1, 890, 1, 2, 7, 1, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("ppp", 1), ("ascend", 2), ("microsoft", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pRNEncapsulation.setStatus('mandatory')
pRNIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 890, 1, 2, 7, 1, 1, 14), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pRNIpAddress.setStatus('mandatory')
pRNTransferRate = MibTableColumn((1, 3, 6, 1, 4, 1, 890, 1, 2, 7, 1, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("speed-2-2M", 1), ("speed-56k-only", 2), ("speed-Modem", 3), ("speed-64k", 4), ("speed-128k", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pRNTransferRate.setStatus('mandatory')
pRNIdleTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 890, 1, 2, 7, 1, 1, 16), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pRNIdleTimeout.setStatus('mandatory')
pRemoteUserTable = MibTable((1, 3, 6, 1, 4, 1, 890, 1, 2, 8, 1), )
if mibBuilder.loadTexts: pRemoteUserTable.setStatus('mandatory')
premoteUserEntry = MibTableRow((1, 3, 6, 1, 4, 1, 890, 1, 2, 8, 1, 1), ).setIndexNames((0, "ZYXEL-MIB", "pRUIndex"))
if mibBuilder.loadTexts: premoteUserEntry.setStatus('mandatory')
pRUIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 890, 1, 2, 8, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pRUIndex.setStatus('mandatory')
pRUName = MibTableColumn((1, 3, 6, 1, 4, 1, 890, 1, 2, 8, 1, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pRUName.setStatus('mandatory')
pRUActive = MibTableColumn((1, 3, 6, 1, 4, 1, 890, 1, 2, 8, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pRUActive.setStatus('mandatory')
pRUCallBack = MibTableColumn((1, 3, 6, 1, 4, 1, 890, 1, 2, 8, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pRUCallBack.setStatus('mandatory')
pRUCallBackNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 890, 1, 2, 8, 1, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pRUCallBackNumber.setStatus('mandatory')
pRUCallBackOverride = MibTableColumn((1, 3, 6, 1, 4, 1, 890, 1, 2, 8, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pRUCallBackOverride.setStatus('mandatory')
pRUClid = MibTableColumn((1, 3, 6, 1, 4, 1, 890, 1, 2, 8, 1, 1, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pRUClid.setStatus('mandatory')
pRUIdleTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 890, 1, 2, 8, 1, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pRUIdleTimeout.setStatus('mandatory')
reboot = NotificationType((1, 3, 6, 1, 4, 1, 890) + (0,1)).setObjects(("ZYXEL-MIB", "whyReboot"))
mibBuilder.exportSymbols("ZYXEL-MIB", pRUActive=pRUActive, pRUCallBackNumber=pRUCallBackNumber, pDIIpxPoolStartNetNumber=pDIIpxPoolStartNetNumber, pRNCallDirection=pRNCallDirection, pRUClid=pRUClid, p1stAnalogCall=p1stAnalogCall, pDIIpPoolCount=pDIIpPoolCount, premoteUserEntry=premoteUserEntry, pRUIdleTimeout=pRUIdleTimeout, pAPT1stZoneName=pAPT1stZoneName, pNetworkNumber8023=pNetworkNumber8023, pBrgRtRouteName=pBrgRtRouteName, pDIIpAddressSupply=pDIIpAddressSupply, pAPTNetworkMin=pAPTNetworkMin, pAPTVariables=pAPTVariables, pRNBridgeEnabled=pRNBridgeEnabled, pSysRasSWVersion=pSysRasSWVersion, zyxelTraps=zyxelTraps, pRNEncapsulation=pRNEncapsulation, paptRouteEntry=paptRouteEntry, pRN1stPhoneNumber=pRN1stPhoneNumber, pAptRtIndex=pAptRtIndex, pDialInVariables=pDialInVariables, pSysIsdnFWVersion=pSysIsdnFWVersion, pRemoteUserVariables=pRemoteUserVariables, prestige=prestige, pRNName=pRNName, pAPTZipTimeout=pAPTZipTimeout, DisplayString=DisplayString, pSysRouteIP=pSysRouteIP, pRNMyLogin=pRNMyLogin, pRUName=pRUName, zyxel=zyxel, reboot=reboot, pBRGRouteTable=pBRGRouteTable, pRNIndex=pRNIndex, pIpxRtSocketNumber=pIpxRtSocketNumber, pBRGVariables=pBRGVariables, pAPTRouteTable=pAPTRouteTable, pRNIpAddress=pRNIpAddress, pDIIpxPoolCount=pDIIpxPoolCount, pSeedRouter8022=pSeedRouter8022, pRN2ndPhoneNumber=pRN2ndPhoneNumber, pBRIVariables=pBRIVariables, pIpxRtGatewayNode=pIpxRtGatewayNode, p2ndSpidNumber=p2ndSpidNumber, pBRGHandleIpx=pBRGHandleIpx, pAPTSeedRouter=pAPTSeedRouter, pRNIdleTimeout=pRNIdleTimeout, pDIMaxTransferRate=pDIMaxTransferRate, pSeedRouter8023=pSeedRouter8023, pRUCallBackOverride=pRUCallBackOverride, pNetworkNumberSnap=pNetworkNumberSnap, pAPT2ndZoneName=pAPT2ndZoneName, p2ndAnalogCall=p2ndAnalogCall, pBrgRtIpAddress=pBrgRtIpAddress, whyReboot=whyReboot, pIpxRtIndex=pIpxRtIndex, pSeedRouterSnap=pSeedRouterSnap, pRNTransferRate=pRNTransferRate, pIPXRouteTable=pIPXRouteTable, p1stPhoneNumber=p1stPhoneNumber, pIpxRtNetworkNumber=pIpxRtNetworkNumber, pDIIpxPool=pDIIpxPool, pFrameType8022=pFrameType8022, pAptRt2ndZoneName=pAptRt2ndZoneName, pRNRemLogin=pRNRemLogin, pIpxRtTypeNumber=pIpxRtTypeNumber, pBrgRtEtherAddress=pBrgRtEtherAddress, pDIIpPoolStartAddress=pDIIpPoolStartAddress, pFrameTypeEthernetII=pFrameTypeEthernetII, pNetworkNumberEthernetII=pNetworkNumberEthernetII, pipxRouteEntry=pipxRouteEntry, pBrgRtIndex=pBrgRtIndex, p1stSpidNumber=p1stSpidNumber, pRNRemClid=pRNRemClid, pRNRouteType=pRNRouteType, pRUIndex=pRUIndex, pFrameType8023=pFrameType8023, pIpxRtNodeNumber=pIpxRtNodeNumber, pAptRtActive=pAptRtActive, pSysRouteIPX=pSysRouteIPX, pAPTNetworkMax=pAPTNetworkMax, pIpxRtActive=pIpxRtActive, pAptRtNetworkMax=pAptRtNetworkMax, pSysRouteAPT=pSysRouteAPT, pAptRtMetric=pAptRtMetric, pRemoteNodeTable=pRemoteNodeTable, pBrgRtActive=pBrgRtActive, pSeedRouterEthernetII=pSeedRouterEthernetII, p2ndPhoneNumber=p2ndPhoneNumber, pDIClidAuthen=pDIClidAuthen, pIPXVariables=pIPXVariables, pDIRecvAuthen=pDIRecvAuthen, pNetworkNumber8022=pNetworkNumber8022, pAptRtNetworkMin=pAptRtNetworkMin, pRemoteUserTable=pRemoteUserTable, pRUCallBack=pRUCallBack, pRemoteNodeVariables=pRemoteNodeVariables, pFrameTypeSnap=pFrameTypeSnap, pbrgRouteEntry=pbrgRouteEntry, pIpxRtHopCount=pIpxRtHopCount, pAptRtGatewayNode=pAptRtGatewayNode, pSysVariables=pSysVariables, pRNActive=pRNActive, pDIIdleTimeout=pDIIdleTimeout, pAptRt1stZoneName=pAptRt1stZoneName, premoteNodeEntry=premoteNodeEntry, pSysBridge=pSysBridge, pBrgRtGatewayNode=pBrgRtGatewayNode, pBRISwitchType=pBRISwitchType, pIpxRtTickCount=pIpxRtTickCount, pRNCallBack=pRNCallBack, products=products, pDILinkCompression=pDILinkCompression, pIpxRtServerName=pIpxRtServerName, pBChannelUsage=pBChannelUsage)
