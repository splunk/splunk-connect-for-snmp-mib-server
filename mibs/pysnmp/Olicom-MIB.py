#
# PySNMP MIB module Olicom-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/Olicom-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 20:26:40 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, OctetString, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "Integer", "OctetString", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
SingleValueConstraint, ValueRangeConstraint, ConstraintsIntersection, ValueSizeConstraint, ConstraintsUnion = mibBuilder.importSymbols("ASN1-REFINEMENT", "SingleValueConstraint", "ValueRangeConstraint", "ConstraintsIntersection", "ValueSizeConstraint", "ConstraintsUnion")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
Counter32, Unsigned32, Integer32, Gauge32, ModuleIdentity, ObjectIdentity, NotificationType, MibScalar, MibTable, MibTableRow, MibTableColumn, NotificationType, iso, MibIdentifier, enterprises, Bits, TimeTicks, IpAddress, Counter64 = mibBuilder.importSymbols("SNMPv2-SMI", "Counter32", "Unsigned32", "Integer32", "Gauge32", "ModuleIdentity", "ObjectIdentity", "NotificationType", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "NotificationType", "iso", "MibIdentifier", "enterprises", "Bits", "TimeTicks", "IpAddress", "Counter64")
DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention")
class MacAddress(OctetString):
    subtypeSpec = OctetString.subtypeSpec + ValueSizeConstraint(6, 6)
    fixedLength = 6

class IPXAddress(OctetString):
    subtypeSpec = OctetString.subtypeSpec + ValueSizeConstraint(12, 12)
    fixedLength = 12

class RowStatus(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))
    namedValues = NamedValues(("active", 1), ("notInService", 2), ("notReady", 3), ("createAndGo", 4), ("createAndWait", 5), ("destroy", 6))

olicom = MibIdentifier((1, 3, 6, 1, 4, 1, 285))
info = MibIdentifier((1, 3, 6, 1, 4, 1, 285, 1))
ocmibs = MibIdentifier((1, 3, 6, 1, 4, 1, 285, 2))
temporary = MibIdentifier((1, 3, 6, 1, 4, 1, 285, 3))
inet = MibIdentifier((1, 3, 6, 1, 4, 1, 285, 4))
control = MibIdentifier((1, 3, 6, 1, 4, 1, 285, 5))
obm = MibIdentifier((1, 3, 6, 1, 4, 1, 285, 6))
management = MibIdentifier((1, 3, 6, 1, 4, 1, 285, 7))
frontpanel = MibIdentifier((1, 3, 6, 1, 4, 1, 285, 8))
products = MibIdentifier((1, 3, 6, 1, 4, 1, 285, 9))
errorlog = MibIdentifier((1, 3, 6, 1, 4, 1, 285, 10))
trconfig = MibIdentifier((1, 3, 6, 1, 4, 1, 285, 11))
infoHardwareProductId = MibScalar((1, 3, 6, 1, 4, 1, 285, 1, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: infoHardwareProductId.setStatus('mandatory')
infoHardwareVersion = MibScalar((1, 3, 6, 1, 4, 1, 285, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: infoHardwareVersion.setStatus('mandatory')
infoHardwareECOLevel = MibScalar((1, 3, 6, 1, 4, 1, 285, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: infoHardwareECOLevel.setStatus('mandatory')
infoHardwareSerialNumber = MibScalar((1, 3, 6, 1, 4, 1, 285, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: infoHardwareSerialNumber.setStatus('mandatory')
infoHardwareOptionTable = MibTable((1, 3, 6, 1, 4, 1, 285, 1, 5), )
if mibBuilder.loadTexts: infoHardwareOptionTable.setStatus('mandatory')
infoHardwareOptionTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 285, 1, 5, 1), ).setIndexNames((0, "Olicom-MIB", "infoHardwareOptionNo"))
if mibBuilder.loadTexts: infoHardwareOptionTableEntry.setStatus('mandatory')
infoHardwareOptionNo = MibTableColumn((1, 3, 6, 1, 4, 1, 285, 1, 5, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: infoHardwareOptionNo.setStatus('mandatory')
infoHardwareOption = MibTableColumn((1, 3, 6, 1, 4, 1, 285, 1, 5, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: infoHardwareOption.setStatus('mandatory')
infoSoftwareProductId = MibScalar((1, 3, 6, 1, 4, 1, 285, 1, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: infoSoftwareProductId.setStatus('mandatory')
infoSoftwareVersion = MibScalar((1, 3, 6, 1, 4, 1, 285, 1, 7), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: infoSoftwareVersion.setStatus('mandatory')
infoSoftwareECOLevel = MibScalar((1, 3, 6, 1, 4, 1, 285, 1, 8), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: infoSoftwareECOLevel.setStatus('mandatory')
infoSoftwareOptionTable = MibTable((1, 3, 6, 1, 4, 1, 285, 1, 9), )
if mibBuilder.loadTexts: infoSoftwareOptionTable.setStatus('mandatory')
infoSoftwareOptionTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 285, 1, 9, 1), ).setIndexNames((0, "Olicom-MIB", "infoSoftwareOptionNo"))
if mibBuilder.loadTexts: infoSoftwareOptionTableEntry.setStatus('mandatory')
infoSoftwareOptionNo = MibTableColumn((1, 3, 6, 1, 4, 1, 285, 1, 9, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: infoSoftwareOptionNo.setStatus('mandatory')
infoSoftwareOption = MibTableColumn((1, 3, 6, 1, 4, 1, 285, 1, 9, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: infoSoftwareOption.setStatus('mandatory')
infoSoftwareMIBsTable = MibTable((1, 3, 6, 1, 4, 1, 285, 1, 10), )
if mibBuilder.loadTexts: infoSoftwareMIBsTable.setStatus('mandatory')
infoSoftwareMIBsTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 285, 1, 10, 1), ).setIndexNames((0, "Olicom-MIB", "infoSoftwareMIBsNo"))
if mibBuilder.loadTexts: infoSoftwareMIBsTableEntry.setStatus('mandatory')
infoSoftwareMIBsNo = MibTableColumn((1, 3, 6, 1, 4, 1, 285, 1, 10, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: infoSoftwareMIBsNo.setStatus('mandatory')
infoSoftwareMIBsObjectID = MibTableColumn((1, 3, 6, 1, 4, 1, 285, 1, 10, 1, 2), ObjectIdentifier()).setMaxAccess("readonly")
if mibBuilder.loadTexts: infoSoftwareMIBsObjectID.setStatus('mandatory')
infoSoftwareMIBsDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 285, 1, 10, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: infoSoftwareMIBsDescription.setStatus('mandatory')
infoXtraSwTable = MibTable((1, 3, 6, 1, 4, 1, 285, 1, 11), )
if mibBuilder.loadTexts: infoXtraSwTable.setStatus('optional')
infoXtraSwEntry = MibTableRow((1, 3, 6, 1, 4, 1, 285, 1, 11, 1), ).setIndexNames((0, "Olicom-MIB", "infoXtraSwIndex"))
if mibBuilder.loadTexts: infoXtraSwEntry.setStatus('optional')
infoXtraSwIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 285, 1, 11, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: infoXtraSwIndex.setStatus('optional')
infoXtraSwFileUse = MibTableColumn((1, 3, 6, 1, 4, 1, 285, 1, 11, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: infoXtraSwFileUse.setStatus('optional')
infoXtraSwProductId = MibTableColumn((1, 3, 6, 1, 4, 1, 285, 1, 11, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: infoXtraSwProductId.setStatus('optional')
infoXtraSwVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 285, 1, 11, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: infoXtraSwVersion.setStatus('optional')
infoXtraSwEcoLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 285, 1, 11, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: infoXtraSwEcoLevel.setStatus('optional')
infoXtraSwSerialNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 285, 1, 11, 1, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: infoXtraSwSerialNumber.setStatus('optional')
infoXtraSwOptions = MibTableColumn((1, 3, 6, 1, 4, 1, 285, 1, 11, 1, 7), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: infoXtraSwOptions.setStatus('optional')
infoModuleTable = MibTable((1, 3, 6, 1, 4, 1, 285, 1, 12), )
if mibBuilder.loadTexts: infoModuleTable.setStatus('mandatory')
infoModuleEntry = MibTableRow((1, 3, 6, 1, 4, 1, 285, 1, 12, 1), ).setIndexNames((0, "Olicom-MIB", "infoModuleIndex"))
if mibBuilder.loadTexts: infoModuleEntry.setStatus('mandatory')
infoModuleIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 285, 1, 12, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: infoModuleIndex.setStatus('mandatory')
infoModuleHwProductId = MibTableColumn((1, 3, 6, 1, 4, 1, 285, 1, 12, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: infoModuleHwProductId.setStatus('mandatory')
infoModuleHwVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 285, 1, 12, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: infoModuleHwVersion.setStatus('mandatory')
infoModuleHwSerialNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 285, 1, 12, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: infoModuleHwSerialNumber.setStatus('mandatory')
infoModuleBootpromVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 285, 1, 12, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: infoModuleBootpromVersion.setStatus('mandatory')
infoSwImageTable = MibTable((1, 3, 6, 1, 4, 1, 285, 1, 13), )
if mibBuilder.loadTexts: infoSwImageTable.setStatus('mandatory')
infoSwImageEntry = MibTableRow((1, 3, 6, 1, 4, 1, 285, 1, 13, 1), ).setIndexNames((0, "Olicom-MIB", "infoSwImageModuleIndex"), (0, "Olicom-MIB", "infoSwImageNo"))
if mibBuilder.loadTexts: infoSwImageEntry.setStatus('mandatory')
infoSwImageModuleIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 285, 1, 13, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: infoSwImageModuleIndex.setStatus('mandatory')
infoSwImageNo = MibTableColumn((1, 3, 6, 1, 4, 1, 285, 1, 13, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: infoSwImageNo.setStatus('mandatory')
infoSwImageProductId = MibTableColumn((1, 3, 6, 1, 4, 1, 285, 1, 13, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: infoSwImageProductId.setStatus('mandatory')
infoSwImageVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 285, 1, 13, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: infoSwImageVersion.setStatus('mandatory')
infoSwImageDownloadTime = MibTableColumn((1, 3, 6, 1, 4, 1, 285, 1, 13, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: infoSwImageDownloadTime.setStatus('mandatory')
ocmibsBridgeMIB = MibIdentifier((1, 3, 6, 1, 4, 1, 285, 2, 1))
ocmibsCauMIB = MibIdentifier((1, 3, 6, 1, 4, 1, 285, 2, 2))
ocmibsCamMIB = MibIdentifier((1, 3, 6, 1, 4, 1, 285, 2, 3))
ocmibsEhubMIB = MibIdentifier((1, 3, 6, 1, 4, 1, 285, 2, 4))
ocmibsOc8100MIB = MibIdentifier((1, 3, 6, 1, 4, 1, 285, 2, 5))
ocmibsCrossfireAtmMIB = MibIdentifier((1, 3, 6, 1, 4, 1, 285, 2, 6))
ocmibsOc8200MIB = MibIdentifier((1, 3, 6, 1, 4, 1, 285, 2, 7))
ocmibsOc8600MIB = MibIdentifier((1, 3, 6, 1, 4, 1, 285, 2, 8))
ocmibsOc84x0MIB = MibIdentifier((1, 3, 6, 1, 4, 1, 285, 2, 9))
ocmibsLanSwitchMIB = MibIdentifier((1, 3, 6, 1, 4, 1, 285, 2, 10))
ocmibsVlanMIB = MibIdentifier((1, 3, 6, 1, 4, 1, 285, 2, 11))
ocmibsSmartStatusMIB = MibIdentifier((1, 3, 6, 1, 4, 1, 285, 2, 12))
ocmibsCf871xMIB = MibIdentifier((1, 3, 6, 1, 4, 1, 285, 2, 13))
atmUplinkMIB = MibIdentifier((1, 3, 6, 1, 4, 1, 285, 2, 14))
lmpMib = MibIdentifier((1, 3, 6, 1, 4, 1, 285, 3, 1))
inetMacAddrForm = MibScalar((1, 3, 6, 1, 4, 1, 285, 4, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("canonical", 1), ("non-canonical", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: inetMacAddrForm.setStatus('mandatory')
inetEnableRwho = MibScalar((1, 3, 6, 1, 4, 1, 285, 4, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: inetEnableRwho.setStatus('mandatory')
inetEnableRIP = MibScalar((1, 3, 6, 1, 4, 1, 285, 4, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: inetEnableRIP.setStatus('mandatory')
inetCommunityMaxEntries = MibScalar((1, 3, 6, 1, 4, 1, 285, 4, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: inetCommunityMaxEntries.setStatus('mandatory')
inetCommunityTable = MibTable((1, 3, 6, 1, 4, 1, 285, 4, 5), )
if mibBuilder.loadTexts: inetCommunityTable.setStatus('mandatory')
inetCommunityTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 285, 4, 5, 1), ).setIndexNames((0, "Olicom-MIB", "inetCommunityNo"))
if mibBuilder.loadTexts: inetCommunityTableEntry.setStatus('mandatory')
inetCommunityNo = MibTableColumn((1, 3, 6, 1, 4, 1, 285, 4, 5, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: inetCommunityNo.setStatus('mandatory')
inetCommunityName = MibTableColumn((1, 3, 6, 1, 4, 1, 285, 4, 5, 1, 2), DisplayString()).setMaxAccess("writeonly")
if mibBuilder.loadTexts: inetCommunityName.setStatus('mandatory')
inetCommunityIPAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 285, 4, 5, 1, 3), IpAddress()).setMaxAccess("writeonly")
if mibBuilder.loadTexts: inetCommunityIPAddress.setStatus('mandatory')
inetCommunityAccess = MibTableColumn((1, 3, 6, 1, 4, 1, 285, 4, 5, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("readOnly", 1), ("readWrite", 2)))).setMaxAccess("writeonly")
if mibBuilder.loadTexts: inetCommunityAccess.setStatus('mandatory')
inetCommunityDelete = MibTableColumn((1, 3, 6, 1, 4, 1, 285, 4, 5, 1, 5), Integer32()).setMaxAccess("writeonly")
if mibBuilder.loadTexts: inetCommunityDelete.setStatus('mandatory')
inetCommunityIPXAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 285, 4, 5, 1, 6), IPXAddress()).setMaxAccess("writeonly")
if mibBuilder.loadTexts: inetCommunityIPXAddress.setStatus('mandatory')
inetCommunityTransportProtocols = MibTableColumn((1, 3, 6, 1, 4, 1, 285, 4, 5, 1, 7), Integer32()).setMaxAccess("writeonly")
if mibBuilder.loadTexts: inetCommunityTransportProtocols.setStatus('mandatory')
inetCommunityMACAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 285, 4, 5, 1, 8), MacAddress()).setMaxAccess("writeonly")
if mibBuilder.loadTexts: inetCommunityMACAddress.setStatus('mandatory')
inetTrapMaxEntries = MibScalar((1, 3, 6, 1, 4, 1, 285, 4, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: inetTrapMaxEntries.setStatus('mandatory')
inetTrapTable = MibTable((1, 3, 6, 1, 4, 1, 285, 4, 7), )
if mibBuilder.loadTexts: inetTrapTable.setStatus('mandatory')
inetTrapTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 285, 4, 7, 1), ).setIndexNames((0, "Olicom-MIB", "inetTrapIndex"))
if mibBuilder.loadTexts: inetTrapTableEntry.setStatus('mandatory')
inetTrapCommunity = MibTableColumn((1, 3, 6, 1, 4, 1, 285, 4, 7, 1, 1), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: inetTrapCommunity.setStatus('mandatory')
inetTrapDestIPAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 285, 4, 7, 1, 2), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: inetTrapDestIPAddress.setStatus('mandatory')
inetTrapEventDisableMask = MibTableColumn((1, 3, 6, 1, 4, 1, 285, 4, 7, 1, 3), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: inetTrapEventDisableMask.setStatus('deprecated')
inetTrapDelete = MibTableColumn((1, 3, 6, 1, 4, 1, 285, 4, 7, 1, 4), Integer32()).setMaxAccess("writeonly")
if mibBuilder.loadTexts: inetTrapDelete.setStatus('mandatory')
inetTrapDestUDPPort = MibTableColumn((1, 3, 6, 1, 4, 1, 285, 4, 7, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65536))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: inetTrapDestUDPPort.setStatus('mandatory')
inetTrapIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 285, 4, 7, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: inetTrapIndex.setStatus('mandatory')
inetTrapDestIPXAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 285, 4, 7, 1, 7), IPXAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: inetTrapDestIPXAddress.setStatus('mandatory')
inetTrapTransportProtocols = MibTableColumn((1, 3, 6, 1, 4, 1, 285, 4, 7, 1, 8), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: inetTrapTransportProtocols.setStatus('mandatory')
inetTrapIPEncapsulation = MibTableColumn((1, 3, 6, 1, 4, 1, 285, 4, 7, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("ethernet", 1), ("ieee8022", 2), ("snap", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: inetTrapIPEncapsulation.setStatus('mandatory')
inetTrapIPXEncapsulation = MibTableColumn((1, 3, 6, 1, 4, 1, 285, 4, 7, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("ethernet", 1), ("ieee8022", 2), ("snap", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: inetTrapIPXEncapsulation.setStatus('mandatory')
inetDefaultIPEncapsulation = MibScalar((1, 3, 6, 1, 4, 1, 285, 4, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("ethernet", 1), ("ieee8022", 2), ("snap", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: inetDefaultIPEncapsulation.setStatus('mandatory')
inetDefaultIPXEncapsulation = MibScalar((1, 3, 6, 1, 4, 1, 285, 4, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("ethernet", 1), ("ieee8022", 2), ("snap", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: inetDefaultIPXEncapsulation.setStatus('mandatory')
inetIPAddressTable = MibTable((1, 3, 6, 1, 4, 1, 285, 4, 10), )
if mibBuilder.loadTexts: inetIPAddressTable.setStatus('mandatory')
inetIPAddressEntry = MibTableRow((1, 3, 6, 1, 4, 1, 285, 4, 10, 1), ).setIndexNames((0, "Olicom-MIB", "inetIPAddressIfNumber"))
if mibBuilder.loadTexts: inetIPAddressEntry.setStatus('mandatory')
inetIPAddressIfNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 285, 4, 10, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: inetIPAddressIfNumber.setStatus('mandatory')
inetIPAddressIPAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 285, 4, 10, 1, 2), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: inetIPAddressIPAddress.setStatus('mandatory')
inetIPAddressNetmask = MibTableColumn((1, 3, 6, 1, 4, 1, 285, 4, 10, 1, 3), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: inetIPAddressNetmask.setStatus('mandatory')
inetIPAddressDefaultGateway = MibTableColumn((1, 3, 6, 1, 4, 1, 285, 4, 10, 1, 4), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: inetIPAddressDefaultGateway.setStatus('mandatory')
inetIPAddressEnableRwho = MibTableColumn((1, 3, 6, 1, 4, 1, 285, 4, 10, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: inetIPAddressEnableRwho.setStatus('optional')
inetIPAddressEnableRIP = MibTableColumn((1, 3, 6, 1, 4, 1, 285, 4, 10, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: inetIPAddressEnableRIP.setStatus('optional')
inetIPAddressIPEncapsulation = MibTableColumn((1, 3, 6, 1, 4, 1, 285, 4, 10, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 3, 4))).clone(namedValues=NamedValues(("ethernet", 1), ("snap", 3), ("media-default", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: inetIPAddressIPEncapsulation.setStatus('mandatory')
inetSlipBaudrate = MibScalar((1, 3, 6, 1, 4, 1, 285, 4, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("b1200", 1), ("b2400", 2), ("b4800", 3), ("b9600", 4), ("b19200", 5), ("b38400", 6)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: inetSlipBaudrate.setStatus('optional')
inetSlipParity = MibScalar((1, 3, 6, 1, 4, 1, 285, 4, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("none", 1), ("even", 2), ("odd", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: inetSlipParity.setStatus('optional')
inetSlipStopbits = MibScalar((1, 3, 6, 1, 4, 1, 285, 4, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("one", 1), ("two", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: inetSlipStopbits.setStatus('optional')
inetSlipModemInit = MibScalar((1, 3, 6, 1, 4, 1, 285, 4, 14), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: inetSlipModemInit.setStatus('optional')
inetSlipHeaderCompressionEnabled = MibScalar((1, 3, 6, 1, 4, 1, 285, 4, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: inetSlipHeaderCompressionEnabled.setStatus('optional')
inetSlipMaxMtuSize = MibScalar((1, 3, 6, 1, 4, 1, 285, 4, 16), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: inetSlipMaxMtuSize.setStatus('optional')
inetSlipMaxMruSize = MibScalar((1, 3, 6, 1, 4, 1, 285, 4, 17), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: inetSlipMaxMruSize.setStatus('optional')
sCallbackEnable = MibScalar((1, 3, 6, 1, 4, 1, 285, 4, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sCallbackEnable.setStatus('deprecated')
sCallbackPhoneNumber = MibScalar((1, 3, 6, 1, 4, 1, 285, 4, 19), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 30))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sCallbackPhoneNumber.setStatus('deprecated')
sCalloutEnable = MibScalar((1, 3, 6, 1, 4, 1, 285, 4, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sCalloutEnable.setStatus('deprecated')
sCalloutPhoneNumber = MibScalar((1, 3, 6, 1, 4, 1, 285, 4, 21), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 30))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sCalloutPhoneNumber.setStatus('deprecated')
controlRestart = MibScalar((1, 3, 6, 1, 4, 1, 285, 5, 1), Integer32()).setMaxAccess("writeonly")
if mibBuilder.loadTexts: controlRestart.setStatus('mandatory')
controlConfigChangeCounter = MibScalar((1, 3, 6, 1, 4, 1, 285, 5, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: controlConfigChangeCounter.setStatus('mandatory')
controlTrapTable = MibTable((1, 3, 6, 1, 4, 1, 285, 5, 3), )
if mibBuilder.loadTexts: controlTrapTable.setStatus('mandatory')
controlTrapTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 285, 5, 3, 1), ).setIndexNames((0, "Olicom-MIB", "controlTrapIndex"), (0, "Olicom-MIB", "controlTrapMIBIndex"), (0, "Olicom-MIB", "controlTrapNumber"))
if mibBuilder.loadTexts: controlTrapTableEntry.setStatus('mandatory')
controlTrapIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 285, 5, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: controlTrapIndex.setStatus('mandatory')
controlTrapMIBIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 285, 5, 3, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: controlTrapMIBIndex.setStatus('mandatory')
controlTrapNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 285, 5, 3, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: controlTrapNumber.setStatus('mandatory')
controlTrapDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 285, 5, 3, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: controlTrapDescription.setStatus('mandatory')
controlTrapGeneration = MibTableColumn((1, 3, 6, 1, 4, 1, 285, 5, 3, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("never", 1), ("always", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: controlTrapGeneration.setStatus('mandatory')
controlLoadProtocol = MibScalar((1, 3, 6, 1, 4, 1, 285, 5, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("ibm-rpl", 1), ("ibm-hlm", 2), ("bootp-tftp", 3), ("olicom-rpl", 4), ("olicom-remote-software-update", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: controlLoadProtocol.setStatus('mandatory')
controlLoadFilename = MibScalar((1, 3, 6, 1, 4, 1, 285, 5, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: controlLoadFilename.setStatus('mandatory')
controlLoadServerMACAddress = MibScalar((1, 3, 6, 1, 4, 1, 285, 5, 6), MacAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: controlLoadServerMACAddress.setStatus('optional')
controlLoadServerIPAddress = MibScalar((1, 3, 6, 1, 4, 1, 285, 5, 7), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: controlLoadServerIPAddress.setStatus('optional')
controlLoadServerIPXAddress = MibScalar((1, 3, 6, 1, 4, 1, 285, 5, 8), IPXAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: controlLoadServerIPXAddress.setStatus('optional')
controlLoadStart = MibScalar((1, 3, 6, 1, 4, 1, 285, 5, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("notInitiated", 1), ("starting", 2), ("inProgress", 3), ("finishing", 4), ("completed", 5), ("protocolFailure", 6), ("flashFailure", 7), ("badFile", 8)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: controlLoadStart.setStatus('mandatory')
controlTime = MibScalar((1, 3, 6, 1, 4, 1, 285, 5, 10), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: controlTime.setStatus('mandatory')
controlEnableRmon = MibScalar((1, 3, 6, 1, 4, 1, 285, 5, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: controlEnableRmon.setStatus('optional')
controlAutoRestart = MibScalar((1, 3, 6, 1, 4, 1, 285, 5, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: controlAutoRestart.setStatus('optional')
controlSwAdminStatus = MibScalar((1, 3, 6, 1, 4, 1, 285, 5, 13), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: controlSwAdminStatus.setStatus('optional')
controlFlashConfigSize = MibScalar((1, 3, 6, 1, 4, 1, 285, 5, 15), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: controlFlashConfigSize.setStatus('optional')
controlFlashConfigFree = MibScalar((1, 3, 6, 1, 4, 1, 285, 5, 16), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: controlFlashConfigFree.setStatus('optional')
controlFlashConfigState = MibScalar((1, 3, 6, 1, 4, 1, 285, 5, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("normal", 1), ("default", 2), ("corrupted", 3), ("temporary", 4), ("testTemporary", 5), ("acceptTemporary", 6), ("rejectTemporary", 7), ("rewrite", 8)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: controlFlashConfigState.setStatus('optional')
controlDelayedRestart = MibScalar((1, 3, 6, 1, 4, 1, 285, 5, 18), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: controlDelayedRestart.setStatus('mandatory')
controlLoadProggress = MibScalar((1, 3, 6, 1, 4, 1, 285, 5, 19), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: controlLoadProggress.setStatus('mandatory')
controlLoadFileSize = MibScalar((1, 3, 6, 1, 4, 1, 285, 5, 20), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: controlLoadFileSize.setStatus('mandatory')
controlTftpClient = MibIdentifier((1, 3, 6, 1, 4, 1, 285, 5, 21))
controlTftpMaxSessions = MibScalar((1, 3, 6, 1, 4, 1, 285, 5, 21, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: controlTftpMaxSessions.setStatus('optional')
controlTftpNextSessionIndex = MibScalar((1, 3, 6, 1, 4, 1, 285, 5, 21, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: controlTftpNextSessionIndex.setStatus('optional')
controlTftpSessionTable = MibTable((1, 3, 6, 1, 4, 1, 285, 5, 21, 3), )
if mibBuilder.loadTexts: controlTftpSessionTable.setStatus('optional')
controlTftpSessionEntry = MibTableRow((1, 3, 6, 1, 4, 1, 285, 5, 21, 3, 1), ).setIndexNames((0, "Olicom-MIB", "controlTftpSessionIndex"))
if mibBuilder.loadTexts: controlTftpSessionEntry.setStatus('mandatory')
controlTftpSessionIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 285, 5, 21, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: controlTftpSessionIndex.setStatus('mandatory')
controlTftpSessionRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 285, 5, 21, 3, 1, 2), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: controlTftpSessionRowStatus.setStatus('mandatory')
controlTftpSessionDirection = MibTableColumn((1, 3, 6, 1, 4, 1, 285, 5, 21, 3, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("download", 1), ("upload", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: controlTftpSessionDirection.setStatus('mandatory')
controlTftpSessionServerAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 285, 5, 21, 3, 1, 4), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: controlTftpSessionServerAddress.setStatus('mandatory')
controlTftpSessionServerFile = MibTableColumn((1, 3, 6, 1, 4, 1, 285, 5, 21, 3, 1, 5), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: controlTftpSessionServerFile.setStatus('mandatory')
controlTftpSessionLocalFile = MibTableColumn((1, 3, 6, 1, 4, 1, 285, 5, 21, 3, 1, 6), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: controlTftpSessionLocalFile.setStatus('mandatory')
controlTftpSessionStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 285, 5, 21, 3, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("notInitiated", 1), ("starting", 2), ("inProgress", 3), ("finishing", 4), ("completed", 5), ("protocolFailure", 6), ("flashFailure", 7), ("badFile", 8)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: controlTftpSessionStatus.setStatus('mandatory')
controlTftpSessionProgress = MibTableColumn((1, 3, 6, 1, 4, 1, 285, 5, 21, 3, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: controlTftpSessionProgress.setStatus('mandatory')
controlTftpSessionFileSize = MibTableColumn((1, 3, 6, 1, 4, 1, 285, 5, 21, 3, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: controlTftpSessionFileSize.setStatus('mandatory')
controlRestartType = MibScalar((1, 3, 6, 1, 4, 1, 285, 5, 22), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("soft", 1), ("default", 2))).clone('soft')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: controlRestartType.setStatus('mandatory')
obmEnable = MibScalar((1, 3, 6, 1, 4, 1, 285, 6, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: obmEnable.setStatus('mandatory')
obmPassword = MibScalar((1, 3, 6, 1, 4, 1, 285, 6, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 7))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: obmPassword.setStatus('mandatory')
obmBaudrate = MibScalar((1, 3, 6, 1, 4, 1, 285, 6, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12))).clone(namedValues=NamedValues(("b1200", 1), ("b2400", 2), ("b4800", 3), ("b9600", 4), ("b19200", 5), ("b38400", 6), ("b57600", 7), ("b115200", 8), ("b230400", 9), ("b460800", 10), ("b921600", 11), ("auto", 12)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: obmBaudrate.setStatus('mandatory')
obmParity = MibScalar((1, 3, 6, 1, 4, 1, 285, 6, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("none", 1), ("even", 2), ("odd", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: obmParity.setStatus('mandatory')
obmStopbits = MibScalar((1, 3, 6, 1, 4, 1, 285, 6, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("one", 1), ("two", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: obmStopbits.setStatus('mandatory')
obmModemInit = MibScalar((1, 3, 6, 1, 4, 1, 285, 6, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: obmModemInit.setStatus('mandatory')
obmCallbackEnable = MibScalar((1, 3, 6, 1, 4, 1, 285, 6, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: obmCallbackEnable.setStatus('mandatory')
obmCallbackPhoneNumber = MibScalar((1, 3, 6, 1, 4, 1, 285, 6, 8), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 30))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: obmCallbackPhoneNumber.setStatus('mandatory')
obmCalloutEnable = MibScalar((1, 3, 6, 1, 4, 1, 285, 6, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: obmCalloutEnable.setStatus('mandatory')
obmCalloutPhoneNumber = MibScalar((1, 3, 6, 1, 4, 1, 285, 6, 10), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 30))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: obmCalloutPhoneNumber.setStatus('mandatory')
obmCalloutTriggerEvent = MibScalar((1, 3, 6, 1, 4, 1, 285, 6, 11), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: obmCalloutTriggerEvent.setStatus('mandatory')
obmCalloutRetries = MibScalar((1, 3, 6, 1, 4, 1, 285, 6, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: obmCalloutRetries.setStatus('mandatory')
obmCalloutRetryTimer = MibScalar((1, 3, 6, 1, 4, 1, 285, 6, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: obmCalloutRetryTimer.setStatus('mandatory')
obmDelayedRecovery = MibScalar((1, 3, 6, 1, 4, 1, 285, 6, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: obmDelayedRecovery.setStatus('mandatory')
obmEnableTelnet = MibScalar((1, 3, 6, 1, 4, 1, 285, 6, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: obmEnableTelnet.setStatus('optional')
obmConnectTimeout = MibScalar((1, 3, 6, 1, 4, 1, 285, 6, 16), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: obmConnectTimeout.setStatus('optional')
obmDefaultOperationalMode = MibScalar((1, 3, 6, 1, 4, 1, 285, 6, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("autoSense", 1), ("serialConsole", 2), ("asyncPPP", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: obmDefaultOperationalMode.setStatus('optional')
obmInactivityTimeout = MibScalar((1, 3, 6, 1, 4, 1, 285, 6, 18), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: obmInactivityTimeout.setStatus('mandatory')
obmDialType = MibScalar((1, 3, 6, 1, 4, 1, 285, 6, 19), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("pulse", 1), ("tone", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: obmDialType.setStatus('mandatory')
obmPasswordRead = MibScalar((1, 3, 6, 1, 4, 1, 285, 6, 20), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 7))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: obmPasswordRead.setStatus('mandatory')
obmXonXoffHandshake = MibScalar((1, 3, 6, 1, 4, 1, 285, 6, 21), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: obmXonXoffHandshake.setStatus('mandatory')
obmRtsCtsHandshake = MibScalar((1, 3, 6, 1, 4, 1, 285, 6, 22), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: obmRtsCtsHandshake.setStatus('mandatory')
obmDatabits = MibScalar((1, 3, 6, 1, 4, 1, 285, 6, 23), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: obmDatabits.setStatus('mandatory')
managementTable = MibTable((1, 3, 6, 1, 4, 1, 285, 7, 1), )
if mibBuilder.loadTexts: managementTable.setStatus('mandatory')
managementTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 285, 7, 1, 1), ).setIndexNames((0, "Olicom-MIB", "managementNo"))
if mibBuilder.loadTexts: managementTableEntry.setStatus('mandatory')
managementNo = MibTableColumn((1, 3, 6, 1, 4, 1, 285, 7, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: managementNo.setStatus('mandatory')
managementDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 285, 7, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: managementDescription.setStatus('mandatory')
managementAssociationState = MibTableColumn((1, 3, 6, 1, 4, 1, 285, 7, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("associated", 1), ("not-associated", 2), ("na-association", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: managementAssociationState.setStatus('mandatory')
managementPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 285, 7, 1, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: managementPriority.setStatus('mandatory')
managementSnmpAccessLogTable = MibTable((1, 3, 6, 1, 4, 1, 285, 7, 2), )
if mibBuilder.loadTexts: managementSnmpAccessLogTable.setStatus('optional')
managementSnmpAccessLogEntry = MibTableRow((1, 3, 6, 1, 4, 1, 285, 7, 2, 1), ).setIndexNames((0, "Olicom-MIB", "managementSnmpAccessLogIndex"))
if mibBuilder.loadTexts: managementSnmpAccessLogEntry.setStatus('optional')
managementSnmpAccessLogIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 285, 7, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 10))).setMaxAccess("readonly")
if mibBuilder.loadTexts: managementSnmpAccessLogIndex.setStatus('optional')
managementSnmpAccessLogTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 285, 7, 2, 1, 2), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: managementSnmpAccessLogTimeStamp.setStatus('optional')
managementSnmpAccessLogIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 285, 7, 2, 1, 3), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: managementSnmpAccessLogIpAddress.setStatus('optional')
managementSnmpAccessLogAccessRights = MibTableColumn((1, 3, 6, 1, 4, 1, 285, 7, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("readOnly", 1), ("readWrite", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: managementSnmpAccessLogAccessRights.setStatus('optional')
managementSnmpAccessLogCount = MibTableColumn((1, 3, 6, 1, 4, 1, 285, 7, 2, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: managementSnmpAccessLogCount.setStatus('optional')
managementSnmpLastErrorReason = MibScalar((1, 3, 6, 1, 4, 1, 285, 7, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: managementSnmpLastErrorReason.setStatus('mandatory')
frontpanelDisplay = MibScalar((1, 3, 6, 1, 4, 1, 285, 8, 1), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: frontpanelDisplay.setStatus('optional')
frontpanelKeyboardAccess = MibScalar((1, 3, 6, 1, 4, 1, 285, 8, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("enabled", 1), ("status-only", 2), ("disabled", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: frontpanelKeyboardAccess.setStatus('optional')
frontpanelErrorcode = MibScalar((1, 3, 6, 1, 4, 1, 285, 8, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: frontpanelErrorcode.setStatus('optional')
frontpanelErrorLED = MibScalar((1, 3, 6, 1, 4, 1, 285, 8, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("led-unknown", 1), ("led-off", 2), ("led-on-steady", 3), ("led-flashing", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: frontpanelErrorLED.setStatus('optional')
frontpanelDefaultDisplay = MibScalar((1, 3, 6, 1, 4, 1, 285, 8, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: frontpanelDefaultDisplay.setStatus('optional')
frontpanelKeyPress = MibScalar((1, 3, 6, 1, 4, 1, 285, 8, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(400, 401, 402, 403, 404))).clone(namedValues=NamedValues(("key-enter", 400), ("key-up", 401), ("key-down", 402), ("key-left", 403), ("key-right", 404)))).setMaxAccess("writeonly")
if mibBuilder.loadTexts: frontpanelKeyPress.setStatus('optional')
frontpanelDisplayLogTable = MibTable((1, 3, 6, 1, 4, 1, 285, 8, 7), )
if mibBuilder.loadTexts: frontpanelDisplayLogTable.setStatus('optional')
frontpanelDisplayLogEntry = MibTableRow((1, 3, 6, 1, 4, 1, 285, 8, 7, 1), ).setIndexNames((0, "Olicom-MIB", "frontpanelDisplayLogIndex"))
if mibBuilder.loadTexts: frontpanelDisplayLogEntry.setStatus('optional')
frontpanelDisplayLogIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 285, 8, 7, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frontpanelDisplayLogIndex.setStatus('optional')
frontpanelDisplayLogTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 285, 8, 7, 1, 2), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frontpanelDisplayLogTimeStamp.setStatus('optional')
frontpanelDisplayLogDisplayText = MibTableColumn((1, 3, 6, 1, 4, 1, 285, 8, 7, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frontpanelDisplayLogDisplayText.setStatus('optional')
tokenRingBridgeSR = MibIdentifier((1, 3, 6, 1, 4, 1, 285, 9, 1))
controlledAccessUnit = MibIdentifier((1, 3, 6, 1, 4, 1, 285, 9, 2))
controlledAttachmentModule = MibIdentifier((1, 3, 6, 1, 4, 1, 285, 9, 3))
etherNetAttachmentHUB = MibIdentifier((1, 3, 6, 1, 4, 1, 285, 9, 4))
tokenRingRemoteBridgeAndCAM = MibIdentifier((1, 3, 6, 1, 4, 1, 285, 9, 5))
tokenRingMultiPortBridge = MibIdentifier((1, 3, 6, 1, 4, 1, 285, 9, 6))
desktopManagementAgent = MibIdentifier((1, 3, 6, 1, 4, 1, 285, 9, 7))
localPCBridge = MibIdentifier((1, 3, 6, 1, 4, 1, 285, 9, 8))
remoteDOSPCBridge = MibIdentifier((1, 3, 6, 1, 4, 1, 285, 9, 9))
remoteOS2PCBridge = MibIdentifier((1, 3, 6, 1, 4, 1, 285, 9, 10))
tokenRingSwitchOc8100 = MibIdentifier((1, 3, 6, 1, 4, 1, 285, 9, 11))
crossfireAtmSwitch = MibIdentifier((1, 3, 6, 1, 4, 1, 285, 9, 12))
ethernetSwitchOc8200 = MibIdentifier((1, 3, 6, 1, 4, 1, 285, 9, 13))
tokenRingSwitchOc8600 = MibIdentifier((1, 3, 6, 1, 4, 1, 285, 9, 14))
tokenRingSwitchOc8007 = MibIdentifier((1, 3, 6, 1, 4, 1, 285, 9, 15))
crossfireAtmSwitchOc8008 = MibIdentifier((1, 3, 6, 1, 4, 1, 285, 9, 16))
fastEthernetSwitchOc8400 = MibIdentifier((1, 3, 6, 1, 4, 1, 285, 9, 17))
fastEthernetSwitchOc8420 = MibIdentifier((1, 3, 6, 1, 4, 1, 285, 9, 18))
lanscoutOc5020 = MibIdentifier((1, 3, 6, 1, 4, 1, 285, 9, 19))
crossfireAtmSwitchCf9200 = MibIdentifier((1, 3, 6, 1, 4, 1, 285, 9, 20))
crossfireRouterCf7100 = MibIdentifier((1, 3, 6, 1, 4, 1, 285, 9, 21))
tokenRingSwitchCf8500 = MibIdentifier((1, 3, 6, 1, 4, 1, 285, 9, 22))
ethernetSwitchCf8711 = MibIdentifier((1, 3, 6, 1, 4, 1, 285, 9, 23))
ethernetSwitchCf8720 = MibIdentifier((1, 3, 6, 1, 4, 1, 285, 9, 24))
ethernetSwitchCf8810 = MibIdentifier((1, 3, 6, 1, 4, 1, 285, 9, 25))
errorlogTable = MibTable((1, 3, 6, 1, 4, 1, 285, 10, 1), )
if mibBuilder.loadTexts: errorlogTable.setStatus('optional')
errorlogEntry = MibTableRow((1, 3, 6, 1, 4, 1, 285, 10, 1, 1), ).setIndexNames((0, "Olicom-MIB", "errorlogNumber"))
if mibBuilder.loadTexts: errorlogEntry.setStatus('optional')
errorlogNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 285, 10, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: errorlogNumber.setStatus('optional')
errorlogTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 285, 10, 1, 1, 2), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: errorlogTimeStamp.setStatus('optional')
errorlogErrorDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 285, 10, 1, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: errorlogErrorDescription.setStatus('optional')
errorlogErrorData = MibTableColumn((1, 3, 6, 1, 4, 1, 285, 10, 1, 1, 4), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: errorlogErrorData.setStatus('optional')
errorlogTime = MibTableColumn((1, 3, 6, 1, 4, 1, 285, 10, 1, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: errorlogTime.setStatus('optional')
errorlogTimeRemoved = MibTableColumn((1, 3, 6, 1, 4, 1, 285, 10, 1, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: errorlogTimeRemoved.setStatus('optional')
errorlogCategory = MibTableColumn((1, 3, 6, 1, 4, 1, 285, 10, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("bootload", 1), ("startup", 2), ("operational", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: errorlogCategory.setStatus('optional')
errorlogSeverity = MibTableColumn((1, 3, 6, 1, 4, 1, 285, 10, 1, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9))).clone(namedValues=NamedValues(("information", 1), ("notice", 2), ("warning", 3), ("error", 4), ("critical", 5), ("alert", 6), ("panic", 7), ("debug", 8), ("fatal", 9)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: errorlogSeverity.setStatus('optional')
errorlogPhysicalIf = MibTableColumn((1, 3, 6, 1, 4, 1, 285, 10, 1, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: errorlogPhysicalIf.setStatus('optional')
errorlogVirtualIf = MibTableColumn((1, 3, 6, 1, 4, 1, 285, 10, 1, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: errorlogVirtualIf.setStatus('optional')
errorlogTraceControl = MibScalar((1, 3, 6, 1, 4, 1, 285, 10, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("log-empty", 1), ("log-present", 2), ("save-log", 3), ("erase-log", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: errorlogTraceControl.setStatus('optional')
errorlogTraceMaskCurrent = MibScalar((1, 3, 6, 1, 4, 1, 285, 10, 3), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: errorlogTraceMaskCurrent.setStatus('optional')
errorlogTraceMaskInitial = MibScalar((1, 3, 6, 1, 4, 1, 285, 10, 4), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: errorlogTraceMaskInitial.setStatus('optional')
errorlogTraceMaskOperational = MibScalar((1, 3, 6, 1, 4, 1, 285, 10, 5), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: errorlogTraceMaskOperational.setStatus('optional')
errorlogTraceLogSize = MibScalar((1, 3, 6, 1, 4, 1, 285, 10, 6), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: errorlogTraceLogSize.setStatus('optional')
errorlogTraceSliceTable = MibTable((1, 3, 6, 1, 4, 1, 285, 10, 7), )
if mibBuilder.loadTexts: errorlogTraceSliceTable.setStatus('optional')
errorlogTraceSliceTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 285, 10, 7, 1), ).setIndexNames((0, "Olicom-MIB", "errorlogTraceSliceNumber"), (0, "Olicom-MIB", "errorlogTraceSliceSize"))
if mibBuilder.loadTexts: errorlogTraceSliceTableEntry.setStatus('optional')
errorlogTraceSliceNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 285, 10, 7, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: errorlogTraceSliceNumber.setStatus('optional')
errorlogTraceSliceSize = MibTableColumn((1, 3, 6, 1, 4, 1, 285, 10, 7, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2048))).setMaxAccess("readonly")
if mibBuilder.loadTexts: errorlogTraceSliceSize.setStatus('optional')
errorlogTraceSliceData = MibTableColumn((1, 3, 6, 1, 4, 1, 285, 10, 7, 1, 3), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: errorlogTraceSliceData.setStatus('optional')
errorlogStoredSeverityLevel = MibScalar((1, 3, 6, 1, 4, 1, 285, 10, 8), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: errorlogStoredSeverityLevel.setStatus('optional')
trconfigTable = MibTable((1, 3, 6, 1, 4, 1, 285, 11, 1), )
if mibBuilder.loadTexts: trconfigTable.setStatus('optional')
trconfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 285, 11, 1, 1), ).setIndexNames((0, "Olicom-MIB", "trconfigIfNumber"))
if mibBuilder.loadTexts: trconfigEntry.setStatus('optional')
trconfigIfNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 285, 11, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: trconfigIfNumber.setStatus('optional')
trconfigBurntInAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 285, 11, 1, 1, 2), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: trconfigBurntInAddress.setStatus('optional')
trconfigLocalAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 285, 11, 1, 1, 3), MacAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: trconfigLocalAddress.setStatus('optional')
trconfigEarlyTokenRelease = MibTableColumn((1, 3, 6, 1, 4, 1, 285, 11, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: trconfigEarlyTokenRelease.setStatus('optional')
obmCallback = NotificationType((1, 3, 6, 1, 4, 1, 285) + (0,1)).setObjects(("Olicom-MIB", "obmCallbackPhoneNumber"))
obmCallout = NotificationType((1, 3, 6, 1, 4, 1, 285) + (0,2)).setObjects(("Olicom-MIB", "obmCalloutPhoneNumber"), ("Olicom-MIB", "obmCalloutTriggerEvent"))
mibBuilder.exportSymbols("Olicom-MIB", controlTftpMaxSessions=controlTftpMaxSessions, obmBaudrate=obmBaudrate, trconfig=trconfig, inetSlipBaudrate=inetSlipBaudrate, controlLoadStart=controlLoadStart, controlledAttachmentModule=controlledAttachmentModule, errorlogStoredSeverityLevel=errorlogStoredSeverityLevel, infoSwImageTable=infoSwImageTable, obmDelayedRecovery=obmDelayedRecovery, infoSoftwareVersion=infoSoftwareVersion, infoModuleTable=infoModuleTable, obmModemInit=obmModemInit, controlTrapGeneration=controlTrapGeneration, lanscoutOc5020=lanscoutOc5020, tokenRingSwitchCf8500=tokenRingSwitchCf8500, temporary=temporary, trconfigIfNumber=trconfigIfNumber, inetCommunityNo=inetCommunityNo, inetTrapEventDisableMask=inetTrapEventDisableMask, infoSoftwareMIBsTableEntry=infoSoftwareMIBsTableEntry, errorlogTraceSliceData=errorlogTraceSliceData, frontpanelErrorcode=frontpanelErrorcode, tokenRingBridgeSR=tokenRingBridgeSR, infoModuleIndex=infoModuleIndex, inetEnableRwho=inetEnableRwho, controlFlashConfigFree=controlFlashConfigFree, controlTftpSessionServerAddress=controlTftpSessionServerAddress, obmPasswordRead=obmPasswordRead, inetTrapDestIPXAddress=inetTrapDestIPXAddress, managementTable=managementTable, inetIPAddressTable=inetIPAddressTable, controlTftpSessionDirection=controlTftpSessionDirection, obmDialType=obmDialType, olicom=olicom, obmCalloutTriggerEvent=obmCalloutTriggerEvent, ocmibsEhubMIB=ocmibsEhubMIB, infoSoftwareOptionTableEntry=infoSoftwareOptionTableEntry, inetTrapTransportProtocols=inetTrapTransportProtocols, obmCalloutPhoneNumber=obmCalloutPhoneNumber, errorlogSeverity=errorlogSeverity, infoSwImageVersion=infoSwImageVersion, errorlogTimeStamp=errorlogTimeStamp, frontpanelDisplay=frontpanelDisplay, ocmibsOc8200MIB=ocmibsOc8200MIB, errorlogCategory=errorlogCategory, inetIPAddressEnableRwho=inetIPAddressEnableRwho, MacAddress=MacAddress, infoHardwareOptionTableEntry=infoHardwareOptionTableEntry, infoHardwareOptionNo=infoHardwareOptionNo, infoModuleHwProductId=infoModuleHwProductId, infoXtraSwVersion=infoXtraSwVersion, sCallbackPhoneNumber=sCallbackPhoneNumber, controlTftpSessionLocalFile=controlTftpSessionLocalFile, inetCommunityDelete=inetCommunityDelete, controlTime=controlTime, controlRestartType=controlRestartType, sCalloutPhoneNumber=sCalloutPhoneNumber, atmUplinkMIB=atmUplinkMIB, IPXAddress=IPXAddress, managementSnmpAccessLogEntry=managementSnmpAccessLogEntry, localPCBridge=localPCBridge, obmCallbackEnable=obmCallbackEnable, frontpanelKeyboardAccess=frontpanelKeyboardAccess, inetCommunityIPAddress=inetCommunityIPAddress, errorlogTraceMaskInitial=errorlogTraceMaskInitial, controlFlashConfigSize=controlFlashConfigSize, tokenRingRemoteBridgeAndCAM=tokenRingRemoteBridgeAndCAM, remoteDOSPCBridge=remoteDOSPCBridge, errorlogErrorData=errorlogErrorData, infoSoftwareECOLevel=infoSoftwareECOLevel, errorlogTraceSliceSize=errorlogTraceSliceSize, tokenRingSwitchOc8100=tokenRingSwitchOc8100, errorlogTraceSliceNumber=errorlogTraceSliceNumber, ethernetSwitchOc8200=ethernetSwitchOc8200, controlTrapNumber=controlTrapNumber, trconfigEarlyTokenRelease=trconfigEarlyTokenRelease, ocmibsVlanMIB=ocmibsVlanMIB, controlLoadFilename=controlLoadFilename, controlTftpNextSessionIndex=controlTftpNextSessionIndex, errorlogVirtualIf=errorlogVirtualIf, infoSwImageNo=infoSwImageNo, desktopManagementAgent=desktopManagementAgent, errorlogErrorDescription=errorlogErrorDescription, errorlogEntry=errorlogEntry, frontpanel=frontpanel, etherNetAttachmentHUB=etherNetAttachmentHUB, errorlogNumber=errorlogNumber, inetSlipMaxMtuSize=inetSlipMaxMtuSize, obmStopbits=obmStopbits, managementDescription=managementDescription, inetCommunityName=inetCommunityName, obmCallbackPhoneNumber=obmCallbackPhoneNumber, ocmibsOc84x0MIB=ocmibsOc84x0MIB, crossfireAtmSwitchOc8008=crossfireAtmSwitchOc8008, controlTftpSessionEntry=controlTftpSessionEntry, infoSoftwareMIBsObjectID=infoSoftwareMIBsObjectID, managementSnmpAccessLogIpAddress=managementSnmpAccessLogIpAddress, infoXtraSwProductId=infoXtraSwProductId, obmPassword=obmPassword, infoHardwareVersion=infoHardwareVersion, inetIPAddressEnableRIP=inetIPAddressEnableRIP, infoSwImageModuleIndex=infoSwImageModuleIndex, controlRestart=controlRestart, inetCommunityTransportProtocols=inetCommunityTransportProtocols, ocmibsSmartStatusMIB=ocmibsSmartStatusMIB, controlTrapTable=controlTrapTable, obmParity=obmParity, inetTrapMaxEntries=inetTrapMaxEntries, frontpanelDefaultDisplay=frontpanelDefaultDisplay, frontpanelKeyPress=frontpanelKeyPress, remoteOS2PCBridge=remoteOS2PCBridge, fastEthernetSwitchOc8400=fastEthernetSwitchOc8400, controlTrapIndex=controlTrapIndex, ethernetSwitchCf8810=ethernetSwitchCf8810, lmpMib=lmpMib, obmDefaultOperationalMode=obmDefaultOperationalMode, controlLoadServerMACAddress=controlLoadServerMACAddress, controlTrapDescription=controlTrapDescription, ethernetSwitchCf8720=ethernetSwitchCf8720, controlTftpSessionIndex=controlTftpSessionIndex, infoXtraSwOptions=infoXtraSwOptions, inetTrapIPEncapsulation=inetTrapIPEncapsulation, trconfigLocalAddress=trconfigLocalAddress, frontpanelDisplayLogEntry=frontpanelDisplayLogEntry, inetIPAddressIPEncapsulation=inetIPAddressIPEncapsulation, infoXtraSwIndex=infoXtraSwIndex, controlFlashConfigState=controlFlashConfigState, controlTftpSessionTable=controlTftpSessionTable, ocmibsOc8100MIB=ocmibsOc8100MIB, tokenRingSwitchOc8600=tokenRingSwitchOc8600, inetSlipModemInit=inetSlipModemInit, managementSnmpAccessLogAccessRights=managementSnmpAccessLogAccessRights, errorlog=errorlog, obmEnable=obmEnable, infoSwImageEntry=infoSwImageEntry, errorlogTable=errorlogTable, inetTrapIndex=inetTrapIndex, obmRtsCtsHandshake=obmRtsCtsHandshake, inetIPAddressDefaultGateway=inetIPAddressDefaultGateway, infoHardwareECOLevel=infoHardwareECOLevel, infoXtraSwEcoLevel=infoXtraSwEcoLevel, controlLoadProggress=controlLoadProggress, inetCommunityMaxEntries=inetCommunityMaxEntries, infoSoftwareMIBsTable=infoSoftwareMIBsTable, controlTftpSessionProgress=controlTftpSessionProgress, inetDefaultIPXEncapsulation=inetDefaultIPXEncapsulation, errorlogTraceMaskOperational=errorlogTraceMaskOperational, ocmibsLanSwitchMIB=ocmibsLanSwitchMIB, infoModuleEntry=infoModuleEntry, inetIPAddressNetmask=inetIPAddressNetmask, inetSlipMaxMruSize=inetSlipMaxMruSize, controlTftpSessionRowStatus=controlTftpSessionRowStatus, obm=obm, controlTrapMIBIndex=controlTrapMIBIndex, infoModuleBootpromVersion=infoModuleBootpromVersion, obmCalloutEnable=obmCalloutEnable, infoSwImageProductId=infoSwImageProductId, managementAssociationState=managementAssociationState, infoSoftwareOptionNo=infoSoftwareOptionNo, infoHardwareOption=infoHardwareOption, ocmibs=ocmibs, inetMacAddrForm=inetMacAddrForm, obmCalloutRetries=obmCalloutRetries, errorlogTimeRemoved=errorlogTimeRemoved, errorlogPhysicalIf=errorlogPhysicalIf, ocmibsBridgeMIB=ocmibsBridgeMIB, inetEnableRIP=inetEnableRIP, infoSwImageDownloadTime=infoSwImageDownloadTime, sCalloutEnable=sCalloutEnable, obmCalloutRetryTimer=obmCalloutRetryTimer, inetTrapIPXEncapsulation=inetTrapIPXEncapsulation, crossfireAtmSwitchCf9200=crossfireAtmSwitchCf9200, infoSoftwareOptionTable=infoSoftwareOptionTable, control=control, ocmibsCamMIB=ocmibsCamMIB, inetIPAddressEntry=inetIPAddressEntry, crossfireAtmSwitch=crossfireAtmSwitch, controlTftpSessionFileSize=controlTftpSessionFileSize, obmCallout=obmCallout, infoModuleHwSerialNumber=infoModuleHwSerialNumber, controlLoadServerIPAddress=controlLoadServerIPAddress, errorlogTraceSliceTableEntry=errorlogTraceSliceTableEntry, ocmibsOc8600MIB=ocmibsOc8600MIB, obmXonXoffHandshake=obmXonXoffHandshake, inetSlipHeaderCompressionEnabled=inetSlipHeaderCompressionEnabled, controlLoadFileSize=controlLoadFileSize, controlTftpClient=controlTftpClient, inetTrapDelete=inetTrapDelete, controlSwAdminStatus=controlSwAdminStatus, inetCommunityAccess=inetCommunityAccess, managementSnmpLastErrorReason=managementSnmpLastErrorReason, infoXtraSwTable=infoXtraSwTable, inetCommunityTableEntry=inetCommunityTableEntry, frontpanelDisplayLogIndex=frontpanelDisplayLogIndex, infoXtraSwFileUse=infoXtraSwFileUse, controlEnableRmon=controlEnableRmon, errorlogTraceControl=errorlogTraceControl, obmCallback=obmCallback, products=products, controlledAccessUnit=controlledAccessUnit, infoHardwareProductId=infoHardwareProductId, infoHardwareSerialNumber=infoHardwareSerialNumber, controlAutoRestart=controlAutoRestart, ocmibsCf871xMIB=ocmibsCf871xMIB, tokenRingMultiPortBridge=tokenRingMultiPortBridge, managementNo=managementNo, inetTrapTable=inetTrapTable, inetIPAddressIPAddress=inetIPAddressIPAddress, inetSlipStopbits=inetSlipStopbits, inetTrapCommunity=inetTrapCommunity, inetCommunityTable=inetCommunityTable, inetIPAddressIfNumber=inetIPAddressIfNumber, controlDelayedRestart=controlDelayedRestart, managementSnmpAccessLogCount=managementSnmpAccessLogCount, errorlogTraceSliceTable=errorlogTraceSliceTable, controlLoadServerIPXAddress=controlLoadServerIPXAddress, controlTftpSessionServerFile=controlTftpSessionServerFile, managementSnmpAccessLogTimeStamp=managementSnmpAccessLogTimeStamp, controlTftpSessionStatus=controlTftpSessionStatus, managementPriority=managementPriority, frontpanelDisplayLogDisplayText=frontpanelDisplayLogDisplayText, management=management, managementSnmpAccessLogTable=managementSnmpAccessLogTable, controlConfigChangeCounter=controlConfigChangeCounter, controlTrapTableEntry=controlTrapTableEntry, crossfireRouterCf7100=crossfireRouterCf7100, fastEthernetSwitchOc8420=fastEthernetSwitchOc8420, inetTrapDestUDPPort=inetTrapDestUDPPort, infoHardwareOptionTable=infoHardwareOptionTable, controlLoadProtocol=controlLoadProtocol, obmInactivityTimeout=obmInactivityTimeout, obmConnectTimeout=obmConnectTimeout, errorlogTraceMaskCurrent=errorlogTraceMaskCurrent, sCallbackEnable=sCallbackEnable, inet=inet, inetCommunityIPXAddress=inetCommunityIPXAddress, obmDatabits=obmDatabits, ocmibsCauMIB=ocmibsCauMIB, inetTrapDestIPAddress=inetTrapDestIPAddress, errorlogTraceLogSize=errorlogTraceLogSize, info=info, infoSoftwareOption=infoSoftwareOption, inetCommunityMACAddress=inetCommunityMACAddress, frontpanelDisplayLogTimeStamp=frontpanelDisplayLogTimeStamp, infoModuleHwVersion=infoModuleHwVersion, infoSoftwareMIBsDescription=infoSoftwareMIBsDescription, infoXtraSwEntry=infoXtraSwEntry, infoXtraSwSerialNumber=infoXtraSwSerialNumber, obmEnableTelnet=obmEnableTelnet, trconfigEntry=trconfigEntry, managementSnmpAccessLogIndex=managementSnmpAccessLogIndex, errorlogTime=errorlogTime, inetSlipParity=inetSlipParity, managementTableEntry=managementTableEntry)
mibBuilder.exportSymbols("Olicom-MIB", trconfigBurntInAddress=trconfigBurntInAddress, ocmibsCrossfireAtmMIB=ocmibsCrossfireAtmMIB, infoSoftwareMIBsNo=infoSoftwareMIBsNo, tokenRingSwitchOc8007=tokenRingSwitchOc8007, infoSoftwareProductId=infoSoftwareProductId, frontpanelErrorLED=frontpanelErrorLED, RowStatus=RowStatus, frontpanelDisplayLogTable=frontpanelDisplayLogTable, inetTrapTableEntry=inetTrapTableEntry, ethernetSwitchCf8711=ethernetSwitchCf8711, trconfigTable=trconfigTable, inetDefaultIPEncapsulation=inetDefaultIPEncapsulation)
