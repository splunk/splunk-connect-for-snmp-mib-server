#
# PySNMP MIB module ExaltComProducts (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/ExaltComProducts
# Produced by pysmi-0.3.4 at Mon Apr 29 18:52:37 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, ObjectIdentifier, Integer = mibBuilder.importSymbols("ASN1", "OctetString", "ObjectIdentifier", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsIntersection, SingleValueConstraint, ValueSizeConstraint, ValueRangeConstraint, ConstraintsUnion = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsIntersection", "SingleValueConstraint", "ValueSizeConstraint", "ValueRangeConstraint", "ConstraintsUnion")
Te1LoopBackModeT, VlanGroupT, FileTransferTypeT, FileTransferStartT, Te1LboT, Te1StatusT, exaltcommunications, EthMainStatusT, AuxNmsMode, EthAuxStatusT, AlarmLevelT, ExaltEnableT, NtpClientEnableT, EthPortMode, VlanStatusT, EnableStatusT, Led4ColorT, Te1LineCodeT, AcmModulationT, TimeZoneT = mibBuilder.importSymbols("ExaltComm", "Te1LoopBackModeT", "VlanGroupT", "FileTransferTypeT", "FileTransferStartT", "Te1LboT", "Te1StatusT", "exaltcommunications", "EthMainStatusT", "AuxNmsMode", "EthAuxStatusT", "AlarmLevelT", "ExaltEnableT", "NtpClientEnableT", "EthPortMode", "VlanStatusT", "EnableStatusT", "Led4ColorT", "Te1LineCodeT", "AcmModulationT", "TimeZoneT")
NotificationGroup, ObjectGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ObjectGroup", "ModuleCompliance")
TimeTicks, MibIdentifier, Counter32, Unsigned32, ObjectIdentity, Bits, Gauge32, Counter64, iso, Integer32, MibScalar, MibTable, MibTableRow, MibTableColumn, NotificationType, IpAddress, ModuleIdentity = mibBuilder.importSymbols("SNMPv2-SMI", "TimeTicks", "MibIdentifier", "Counter32", "Unsigned32", "ObjectIdentity", "Bits", "Gauge32", "Counter64", "iso", "Integer32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "NotificationType", "IpAddress", "ModuleIdentity")
TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString")
productsMIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 25651, 1))
productsMIB.setRevisions(('2013-04-29 10:21',))
if mibBuilder.loadTexts: productsMIB.setLastUpdated('201304291021Z')
if mibBuilder.loadTexts: productsMIB.setOrganization('Exalt')
class PwType(TextualConvention, OctetString):
    status = 'current'
    displayHint = '255a'
    subtypeSpec = OctetString.subtypeSpec + ValueSizeConstraint(8, 16)

productsMIBNotifications = MibIdentifier((1, 3, 6, 1, 4, 1, 25651, 1, 1))
productsMIBObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 25651, 1, 2))
radioInfo = ObjectIdentity((1, 3, 6, 1, 4, 1, 25651, 1, 2, 1))
if mibBuilder.loadTexts: radioInfo.setStatus('current')
modelName = MibScalar((1, 3, 6, 1, 4, 1, 25651, 1, 2, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readonly")
if mibBuilder.loadTexts: modelName.setStatus('current')
partNumber = MibScalar((1, 3, 6, 1, 4, 1, 25651, 1, 2, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readonly")
if mibBuilder.loadTexts: partNumber.setStatus('current')
serialNumber = MibScalar((1, 3, 6, 1, 4, 1, 25651, 1, 2, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readonly")
if mibBuilder.loadTexts: serialNumber.setStatus('current')
interfaceType = MibScalar((1, 3, 6, 1, 4, 1, 25651, 1, 2, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 30))).setMaxAccess("readonly")
if mibBuilder.loadTexts: interfaceType.setStatus('current')
firmwareVersion = MibScalar((1, 3, 6, 1, 4, 1, 25651, 1, 2, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: firmwareVersion.setStatus('current')
bootVersion = MibScalar((1, 3, 6, 1, 4, 1, 25651, 1, 2, 1, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: bootVersion.setStatus('current')
rdkDbVer = MibScalar((1, 3, 6, 1, 4, 1, 25651, 1, 2, 1, 11), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rdkDbVer.setStatus('current')
txFreqRange = MibScalar((1, 3, 6, 1, 4, 1, 25651, 1, 2, 1, 12), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: txFreqRange.setStatus('current')
rxFreqRange = MibScalar((1, 3, 6, 1, 4, 1, 25651, 1, 2, 1, 13), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rxFreqRange.setStatus('current')
rfFreqBand = MibScalar((1, 3, 6, 1, 4, 1, 25651, 1, 2, 1, 14), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rfFreqBand.setStatus('current')
hwId = MibScalar((1, 3, 6, 1, 4, 1, 25651, 1, 2, 1, 15), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwId.setStatus('current')
modelNumber = MibScalar((1, 3, 6, 1, 4, 1, 25651, 1, 2, 1, 16), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: modelNumber.setStatus('current')
radioAdmin = ObjectIdentity((1, 3, 6, 1, 4, 1, 25651, 1, 2, 2))
if mibBuilder.loadTexts: radioAdmin.setStatus('current')
sysDate = MibScalar((1, 3, 6, 1, 4, 1, 25651, 1, 2, 2, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(10, 10)).setFixedLength(10)).setUnits('MM/DD/YYYY').setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysDate.setStatus('current')
sysTime = MibScalar((1, 3, 6, 1, 4, 1, 25651, 1, 2, 2, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(8, 8)).setFixedLength(8)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysTime.setStatus('current')
radioName = MibIdentifier((1, 3, 6, 1, 4, 1, 25651, 1, 2, 2, 3))
rnLocal = MibScalar((1, 3, 6, 1, 4, 1, 25651, 1, 2, 2, 3, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rnLocal.setStatus('current')
rnRemote = MibScalar((1, 3, 6, 1, 4, 1, 25651, 1, 2, 2, 3, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rnRemote.setStatus('current')
linkName = MibScalar((1, 3, 6, 1, 4, 1, 25651, 1, 2, 2, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: linkName.setStatus('current')
linkSecKey = MibScalar((1, 3, 6, 1, 4, 1, 25651, 1, 2, 2, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(12, 12)).setFixedLength(12)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: linkSecKey.setStatus('current')
adminPassword = MibScalar((1, 3, 6, 1, 4, 1, 25651, 1, 2, 2, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: adminPassword.setStatus('current')
userPassword = MibScalar((1, 3, 6, 1, 4, 1, 25651, 1, 2, 2, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: userPassword.setStatus('current')
ipAddress = MibIdentifier((1, 3, 6, 1, 4, 1, 25651, 1, 2, 2, 8))
ipLocal = MibScalar((1, 3, 6, 1, 4, 1, 25651, 1, 2, 2, 8, 1), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipLocal.setStatus('current')
ipRemote = MibScalar((1, 3, 6, 1, 4, 1, 25651, 1, 2, 2, 8, 2), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipRemote.setStatus('current')
subnetMask = MibScalar((1, 3, 6, 1, 4, 1, 25651, 1, 2, 2, 9), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: subnetMask.setStatus('current')
ipAddressNetmask = MibScalar((1, 3, 6, 1, 4, 1, 25651, 1, 2, 2, 10), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(9, 18))).setUnits('IP/NN Where NN=00 To 32').setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipAddressNetmask.setStatus('current')
defaultGateway = MibScalar((1, 3, 6, 1, 4, 1, 25651, 1, 2, 2, 11), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: defaultGateway.setStatus('current')
aesEnable = MibScalar((1, 3, 6, 1, 4, 1, 25651, 1, 2, 2, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("aesDisable", 0), ("aesEnable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aesEnable.setStatus('current')
aesKey = MibScalar((1, 3, 6, 1, 4, 1, 25651, 1, 2, 2, 13), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 64))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aesKey.setStatus('current')
licKey = MibScalar((1, 3, 6, 1, 4, 1, 25651, 1, 2, 2, 14), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: licKey.setStatus('current')
snmpConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 25651, 1, 2, 2, 17))
trapIpaddr = MibScalar((1, 3, 6, 1, 4, 1, 25651, 1, 2, 2, 17, 1), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: trapIpaddr.setStatus('current')
trapAuth = MibScalar((1, 3, 6, 1, 4, 1, 25651, 1, 2, 2, 17, 2), EnableStatusT()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: trapAuth.setStatus('current')
trapReboot = MibScalar((1, 3, 6, 1, 4, 1, 25651, 1, 2, 2, 17, 3), EnableStatusT()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: trapReboot.setStatus('current')
trapLocLinkStat = MibScalar((1, 3, 6, 1, 4, 1, 25651, 1, 2, 2, 17, 4), EnableStatusT()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: trapLocLinkStat.setStatus('current')
trapLocAlarmStat = MibScalar((1, 3, 6, 1, 4, 1, 25651, 1, 2, 2, 17, 5), EnableStatusT()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: trapLocAlarmStat.setStatus('current')
trapRemAlarmStat = MibScalar((1, 3, 6, 1, 4, 1, 25651, 1, 2, 2, 17, 6), EnableStatusT()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: trapRemAlarmStat.setStatus('current')
trapLocRslStat = MibScalar((1, 3, 6, 1, 4, 1, 25651, 1, 2, 2, 17, 7), EnableStatusT()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: trapLocRslStat.setStatus('current')
trapLocTempStat = MibScalar((1, 3, 6, 1, 4, 1, 25651, 1, 2, 2, 17, 8), EnableStatusT()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: trapLocTempStat.setStatus('current')
trapLocRslThreshold = MibScalar((1, 3, 6, 1, 4, 1, 25651, 1, 2, 2, 17, 9), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: trapLocRslThreshold.setStatus('current')
trapv1Enable = MibScalar((1, 3, 6, 1, 4, 1, 25651, 1, 2, 2, 17, 10), EnableStatusT()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: trapv1Enable.setStatus('current')
trapv2cEnable = MibScalar((1, 3, 6, 1, 4, 1, 25651, 1, 2, 2, 17, 11), EnableStatusT()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: trapv2cEnable.setStatus('current')
trapv3Enable = MibScalar((1, 3, 6, 1, 4, 1, 25651, 1, 2, 2, 17, 12), EnableStatusT()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: trapv3Enable.setStatus('current')
ntp = ObjectIdentity((1, 3, 6, 1, 4, 1, 25651, 1, 2, 2, 18))
if mibBuilder.loadTexts: ntp.setStatus('current')
ntpClientEnable = MibScalar((1, 3, 6, 1, 4, 1, 25651, 1, 2, 2, 18, 1), NtpClientEnableT()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ntpClientEnable.setStatus('current')
ntpServer1IpAddr = MibScalar((1, 3, 6, 1, 4, 1, 25651, 1, 2, 2, 18, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(7, 15))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ntpServer1IpAddr.setStatus('current')
ntpServer2IpAddr = MibScalar((1, 3, 6, 1, 4, 1, 25651, 1, 2, 2, 18, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(7, 15))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ntpServer2IpAddr.setStatus('current')
ntpServer3IpAddr = MibScalar((1, 3, 6, 1, 4, 1, 25651, 1, 2, 2, 18, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(7, 15))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ntpServer3IpAddr.setStatus('current')
ntpServer4IpAddr = MibScalar((1, 3, 6, 1, 4, 1, 25651, 1, 2, 2, 18, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(7, 15))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ntpServer4IpAddr.setStatus('current')
ntpTimeZoneSelect = MibScalar((1, 3, 6, 1, 4, 1, 25651, 1, 2, 2, 18, 6), TimeZoneT()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ntpTimeZoneSelect.setStatus('current')
commitNtpSettings = MibScalar((1, 3, 6, 1, 4, 1, 25651, 1, 2, 2, 18, 1000), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(4, 200))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: commitNtpSettings.setStatus('current')
commitAdminSettings = MibScalar((1, 3, 6, 1, 4, 1, 25651, 1, 2, 2, 1000), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(4, 200))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: commitAdminSettings.setStatus('current')
radioConfig = ObjectIdentity((1, 3, 6, 1, 4, 1, 25651, 1, 2, 3))
if mibBuilder.loadTexts: radioConfig.setStatus('current')
systemConfig = ObjectIdentity((1, 3, 6, 1, 4, 1, 25651, 1, 2, 3, 1))
if mibBuilder.loadTexts: systemConfig.setStatus('current')
commitSystemSettings = MibScalar((1, 3, 6, 1, 4, 1, 25651, 1, 2, 3, 1, 1000), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: commitSystemSettings.setStatus('current')
interface = ObjectIdentity((1, 3, 6, 1, 4, 1, 25651, 1, 2, 3, 2))
if mibBuilder.loadTexts: interface.setStatus('current')
te1 = ObjectIdentity((1, 3, 6, 1, 4, 1, 25651, 1, 2, 3, 2, 2))
if mibBuilder.loadTexts: te1.setStatus('current')
te1NumChannels = MibScalar((1, 3, 6, 1, 4, 1, 25651, 1, 2, 3, 2, 2, 1), Gauge32()).setUnits('channels').setMaxAccess("readonly")
if mibBuilder.loadTexts: te1NumChannels.setStatus('current')
te1NumActiveChannels = MibScalar((1, 3, 6, 1, 4, 1, 25651, 1, 2, 3, 2, 2, 2), Gauge32()).setUnits('channels').setMaxAccess("readonly")
if mibBuilder.loadTexts: te1NumActiveChannels.setStatus('current')
selectT1orE1 = MibScalar((1, 3, 6, 1, 4, 1, 25651, 1, 2, 3, 2, 2, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("t1", 0), ("e1", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: selectT1orE1.setStatus('current')
te1Interfaces = MibTable((1, 3, 6, 1, 4, 1, 25651, 1, 2, 3, 2, 2, 4), )
if mibBuilder.loadTexts: te1Interfaces.setStatus('current')
te1Interface = MibTableRow((1, 3, 6, 1, 4, 1, 25651, 1, 2, 3, 2, 2, 4, 1), ).setIndexNames((0, "ExaltComProducts", "te1Status"), (0, "ExaltComProducts", "t1LBO"), (0, "ExaltComProducts", "te1AIS"), (0, "ExaltComProducts", "t1LineCode"), (0, "ExaltComProducts", "te1LoopBackMode"))
if mibBuilder.loadTexts: te1Interface.setStatus('current')
te1Status = MibTableColumn((1, 3, 6, 1, 4, 1, 25651, 1, 2, 3, 2, 2, 4, 1, 1), Te1StatusT()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: te1Status.setStatus('current')
t1LBO = MibTableColumn((1, 3, 6, 1, 4, 1, 25651, 1, 2, 3, 2, 2, 4, 1, 2), Te1LboT()).setUnits('feet').setMaxAccess("readwrite")
if mibBuilder.loadTexts: t1LBO.setStatus('current')
te1AIS = MibTableColumn((1, 3, 6, 1, 4, 1, 25651, 1, 2, 3, 2, 2, 4, 1, 3), Te1StatusT()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: te1AIS.setStatus('current')
t1LineCode = MibTableColumn((1, 3, 6, 1, 4, 1, 25651, 1, 2, 3, 2, 2, 4, 1, 4), Te1LineCodeT()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: t1LineCode.setStatus('current')
te1LoopBackMode = MibTableColumn((1, 3, 6, 1, 4, 1, 25651, 1, 2, 3, 2, 2, 4, 1, 5), Te1LoopBackModeT()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: te1LoopBackMode.setStatus('current')
commitTe1Settings = MibScalar((1, 3, 6, 1, 4, 1, 25651, 1, 2, 3, 2, 2, 1000), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(4, 200))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: commitTe1Settings.setStatus('current')
fileManagement = ObjectIdentity((1, 3, 6, 1, 4, 1, 25651, 1, 2, 3, 3))
if mibBuilder.loadTexts: fileManagement.setStatus('current')
currentFwFilename = MibScalar((1, 3, 6, 1, 4, 1, 25651, 1, 2, 3, 3, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: currentFwFilename.setStatus('current')
alternateFwFilename = MibScalar((1, 3, 6, 1, 4, 1, 25651, 1, 2, 3, 3, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alternateFwFilename.setStatus('current')
swapFWimage = MibScalar((1, 3, 6, 1, 4, 1, 25651, 1, 2, 3, 3, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 200))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swapFWimage.setStatus('current')
fileTransfer = ObjectIdentity((1, 3, 6, 1, 4, 1, 25651, 1, 2, 3, 3, 4))
if mibBuilder.loadTexts: fileTransfer.setStatus('current')
factoryFwFilename = MibScalar((1, 3, 6, 1, 4, 1, 25651, 1, 2, 3, 3, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: factoryFwFilename.setStatus('current')
tftpServerIp = MibScalar((1, 3, 6, 1, 4, 1, 25651, 1, 2, 3, 3, 4, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(7, 15))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tftpServerIp.setStatus('current')
uploadFilename = MibScalar((1, 3, 6, 1, 4, 1, 25651, 1, 2, 3, 3, 4, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 127))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: uploadFilename.setStatus('current')
transferType = MibScalar((1, 3, 6, 1, 4, 1, 25651, 1, 2, 3, 3, 4, 3), FileTransferTypeT()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: transferType.setStatus('current')
transferStart = MibScalar((1, 3, 6, 1, 4, 1, 25651, 1, 2, 3, 3, 4, 4), FileTransferStartT()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: transferStart.setStatus('current')
transferStatus = MibScalar((1, 3, 6, 1, 4, 1, 25651, 1, 2, 3, 3, 4, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 127))).setMaxAccess("readonly")
if mibBuilder.loadTexts: transferStatus.setStatus('current')
radioMonitor = ObjectIdentity((1, 3, 6, 1, 4, 1, 25651, 1, 2, 4))
if mibBuilder.loadTexts: radioMonitor.setStatus('current')
alarms = MibIdentifier((1, 3, 6, 1, 4, 1, 25651, 1, 2, 4, 2))
almLocal = MibIdentifier((1, 3, 6, 1, 4, 1, 25651, 1, 2, 4, 2, 3))
locSysAlarms = MibIdentifier((1, 3, 6, 1, 4, 1, 25651, 1, 2, 4, 2, 3, 1))
locEthAlarms = MibIdentifier((1, 3, 6, 1, 4, 1, 25651, 1, 2, 4, 2, 3, 2))
locTe1Alarms = MibIdentifier((1, 3, 6, 1, 4, 1, 25651, 1, 2, 4, 2, 3, 3))
locLinkState = MibScalar((1, 3, 6, 1, 4, 1, 25651, 1, 2, 4, 2, 3, 1, 1), AlarmLevelT()).setMaxAccess("readonly")
if mibBuilder.loadTexts: locLinkState.setStatus('current')
locTempAlarm = MibScalar((1, 3, 6, 1, 4, 1, 25651, 1, 2, 4, 2, 3, 1, 2), AlarmLevelT()).setMaxAccess("readonly")
if mibBuilder.loadTexts: locTempAlarm.setStatus('current')
locCurrentTemp = MibScalar((1, 3, 6, 1, 4, 1, 25651, 1, 2, 4, 2, 3, 1, 3), Integer32()).setUnits('C').setMaxAccess("readonly")
if mibBuilder.loadTexts: locCurrentTemp.setStatus('current')
locCurrentTempS = MibScalar((1, 3, 6, 1, 4, 1, 25651, 1, 2, 4, 2, 3, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: locCurrentTempS.setStatus('current')
locLinkSecMismatch = MibScalar((1, 3, 6, 1, 4, 1, 25651, 1, 2, 4, 2, 3, 1, 9), AlarmLevelT()).setMaxAccess("readonly")
if mibBuilder.loadTexts: locLinkSecMismatch.setStatus('current')
locLinkStateV = MibScalar((1, 3, 6, 1, 4, 1, 25651, 1, 2, 4, 2, 3, 1, 15), AlarmLevelT()).setMaxAccess("readonly")
if mibBuilder.loadTexts: locLinkStateV.setStatus('current')
locLinkStateH = MibScalar((1, 3, 6, 1, 4, 1, 25651, 1, 2, 4, 2, 3, 1, 16), AlarmLevelT()).setMaxAccess("readonly")
if mibBuilder.loadTexts: locLinkStateH.setStatus('current')
locTe1LinkSummary = MibScalar((1, 3, 6, 1, 4, 1, 25651, 1, 2, 4, 2, 3, 3, 1), Led4ColorT()).setMaxAccess("readonly")
if mibBuilder.loadTexts: locTe1LinkSummary.setStatus('current')
locTE1Alarms = MibTable((1, 3, 6, 1, 4, 1, 25651, 1, 2, 4, 2, 3, 3, 2), )
if mibBuilder.loadTexts: locTE1Alarms.setStatus('current')
locTe1AlarmsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 25651, 1, 2, 4, 2, 3, 3, 2, 1), ).setIndexNames((0, "ExaltComProducts", "locTe1Alarm"))
if mibBuilder.loadTexts: locTe1AlarmsEntry.setStatus('current')
locTe1Alarm = MibTableColumn((1, 3, 6, 1, 4, 1, 25651, 1, 2, 4, 2, 3, 3, 2, 1, 1), AlarmLevelT()).setMaxAccess("readonly")
if mibBuilder.loadTexts: locTe1Alarm.setStatus('current')
almRemote = MibIdentifier((1, 3, 6, 1, 4, 1, 25651, 1, 2, 4, 2, 4))
remSysAlarms = MibIdentifier((1, 3, 6, 1, 4, 1, 25651, 1, 2, 4, 2, 4, 1))
remEthAlarms = MibIdentifier((1, 3, 6, 1, 4, 1, 25651, 1, 2, 4, 2, 4, 2))
remTe1Alarms = MibIdentifier((1, 3, 6, 1, 4, 1, 25651, 1, 2, 4, 2, 4, 3))
remLinkState = MibScalar((1, 3, 6, 1, 4, 1, 25651, 1, 2, 4, 2, 4, 1, 1), AlarmLevelT()).setMaxAccess("readonly")
if mibBuilder.loadTexts: remLinkState.setStatus('current')
remTempAlarm = MibScalar((1, 3, 6, 1, 4, 1, 25651, 1, 2, 4, 2, 4, 1, 2), AlarmLevelT()).setMaxAccess("readonly")
if mibBuilder.loadTexts: remTempAlarm.setStatus('current')
remCurrentTemp = MibScalar((1, 3, 6, 1, 4, 1, 25651, 1, 2, 4, 2, 4, 1, 3), Integer32()).setUnits('C').setMaxAccess("readonly")
if mibBuilder.loadTexts: remCurrentTemp.setStatus('current')
remCurrentTempS = MibScalar((1, 3, 6, 1, 4, 1, 25651, 1, 2, 4, 2, 4, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: remCurrentTempS.setStatus('current')
remLinkSecMismatch = MibScalar((1, 3, 6, 1, 4, 1, 25651, 1, 2, 4, 2, 4, 1, 9), AlarmLevelT()).setMaxAccess("readonly")
if mibBuilder.loadTexts: remLinkSecMismatch.setStatus('current')
remLinkStateV = MibScalar((1, 3, 6, 1, 4, 1, 25651, 1, 2, 4, 2, 4, 1, 15), AlarmLevelT()).setMaxAccess("readonly")
if mibBuilder.loadTexts: remLinkStateV.setStatus('current')
remLinkStateH = MibScalar((1, 3, 6, 1, 4, 1, 25651, 1, 2, 4, 2, 4, 1, 16), AlarmLevelT()).setMaxAccess("readonly")
if mibBuilder.loadTexts: remLinkStateH.setStatus('current')
remTe1LinkSummary = MibScalar((1, 3, 6, 1, 4, 1, 25651, 1, 2, 4, 2, 4, 3, 1), Led4ColorT()).setMaxAccess("readonly")
if mibBuilder.loadTexts: remTe1LinkSummary.setStatus('current')
remTE1Alarms = MibTable((1, 3, 6, 1, 4, 1, 25651, 1, 2, 4, 2, 4, 3, 2), )
if mibBuilder.loadTexts: remTE1Alarms.setStatus('current')
remTe1AlarmsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 25651, 1, 2, 4, 2, 4, 3, 2, 1), ).setIndexNames((0, "ExaltComProducts", "remTe1Alarm"))
if mibBuilder.loadTexts: remTe1AlarmsEntry.setStatus('current')
remTe1Alarm = MibTableColumn((1, 3, 6, 1, 4, 1, 25651, 1, 2, 4, 2, 4, 3, 2, 1, 1), AlarmLevelT()).setMaxAccess("readonly")
if mibBuilder.loadTexts: remTe1Alarm.setStatus('current')
performance = MibIdentifier((1, 3, 6, 1, 4, 1, 25651, 1, 2, 4, 3))
perfLocal = MibIdentifier((1, 3, 6, 1, 4, 1, 25651, 1, 2, 4, 3, 1))
perfRemote = MibIdentifier((1, 3, 6, 1, 4, 1, 25651, 1, 2, 4, 3, 2))
locCurrentBER = MibScalar((1, 3, 6, 1, 4, 1, 25651, 1, 2, 4, 3, 1, 1), Integer32()).setUnits('BER * 1000000.0').setMaxAccess("readonly")
if mibBuilder.loadTexts: locCurrentBER.setStatus('current')
locCurrentBERstr = MibScalar((1, 3, 6, 1, 4, 1, 25651, 1, 2, 4, 3, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: locCurrentBERstr.setStatus('current')
locCurrentRSL = MibScalar((1, 3, 6, 1, 4, 1, 25651, 1, 2, 4, 3, 1, 3), Integer32()).setUnits('dBm').setMaxAccess("readonly")
if mibBuilder.loadTexts: locCurrentRSL.setStatus('current')
locCurrentRSLstr = MibScalar((1, 3, 6, 1, 4, 1, 25651, 1, 2, 4, 3, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: locCurrentRSLstr.setStatus('current')
locErrorDuration = MibScalar((1, 3, 6, 1, 4, 1, 25651, 1, 2, 4, 3, 1, 5), Integer32()).setUnits('Seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: locErrorDuration.setStatus('current')
locErrorDurationStr = MibScalar((1, 3, 6, 1, 4, 1, 25651, 1, 2, 4, 3, 1, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: locErrorDurationStr.setStatus('current')
locUnavailDuration = MibScalar((1, 3, 6, 1, 4, 1, 25651, 1, 2, 4, 3, 1, 7), Integer32()).setUnits('Seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: locUnavailDuration.setStatus('current')
locUnavailDurationStr = MibScalar((1, 3, 6, 1, 4, 1, 25651, 1, 2, 4, 3, 1, 8), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: locUnavailDurationStr.setStatus('current')
locMinRSL = MibScalar((1, 3, 6, 1, 4, 1, 25651, 1, 2, 4, 3, 1, 9), Integer32()).setUnits('dBm').setMaxAccess("readonly")
if mibBuilder.loadTexts: locMinRSL.setStatus('current')
locMinRSLstr = MibScalar((1, 3, 6, 1, 4, 1, 25651, 1, 2, 4, 3, 1, 10), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: locMinRSLstr.setStatus('current')
locMinRSLtimestamp = MibScalar((1, 3, 6, 1, 4, 1, 25651, 1, 2, 4, 3, 1, 11), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: locMinRSLtimestamp.setStatus('current')
locMaxRSL = MibScalar((1, 3, 6, 1, 4, 1, 25651, 1, 2, 4, 3, 1, 12), Integer32()).setUnits('dBm').setMaxAccess("readonly")
if mibBuilder.loadTexts: locMaxRSL.setStatus('current')
locMaxRSLstr = MibScalar((1, 3, 6, 1, 4, 1, 25651, 1, 2, 4, 3, 1, 13), DisplayString()).setUnits('dBm').setMaxAccess("readonly")
if mibBuilder.loadTexts: locMaxRSLstr.setStatus('current')
locSampleDuration = MibScalar((1, 3, 6, 1, 4, 1, 25651, 1, 2, 4, 3, 1, 14), Integer32()).setUnits('Seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: locSampleDuration.setStatus('current')
locSampleDurationStr = MibScalar((1, 3, 6, 1, 4, 1, 25651, 1, 2, 4, 3, 1, 15), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: locSampleDurationStr.setStatus('current')
locEthPerfInterfaces = MibTable((1, 3, 6, 1, 4, 1, 25651, 1, 2, 4, 3, 1, 16), )
if mibBuilder.loadTexts: locEthPerfInterfaces.setStatus('current')
locEthPerfInterfacesEntry = MibTableRow((1, 3, 6, 1, 4, 1, 25651, 1, 2, 4, 3, 1, 16, 1), ).setIndexNames((0, "ExaltComProducts", "locEthUtilizationIn"), (0, "ExaltComProducts", "locEthUtilizationOut"))
if mibBuilder.loadTexts: locEthPerfInterfacesEntry.setStatus('current')
locEthUtilizationIn = MibTableColumn((1, 3, 6, 1, 4, 1, 25651, 1, 2, 4, 3, 1, 16, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: locEthUtilizationIn.setStatus('current')
locEthUtilizationOut = MibTableColumn((1, 3, 6, 1, 4, 1, 25651, 1, 2, 4, 3, 1, 16, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: locEthUtilizationOut.setStatus('current')
locEthUtilizationWatermarkEnabled = MibScalar((1, 3, 6, 1, 4, 1, 25651, 1, 2, 4, 3, 1, 17), ExaltEnableT()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: locEthUtilizationWatermarkEnabled.setStatus('current')
locEthUtilizationWatermark = MibScalar((1, 3, 6, 1, 4, 1, 25651, 1, 2, 4, 3, 1, 18), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: locEthUtilizationWatermark.setStatus('current')
locEthUtilizationWatermarkTrapEnabled = MibScalar((1, 3, 6, 1, 4, 1, 25651, 1, 2, 4, 3, 1, 19), ExaltEnableT()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: locEthUtilizationWatermarkTrapEnabled.setStatus('current')
locEthUtilizationWatermarkTrapDuration = MibScalar((1, 3, 6, 1, 4, 1, 25651, 1, 2, 4, 3, 1, 20), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1440))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: locEthUtilizationWatermarkTrapDuration.setStatus('current')
locMaximumTxModulation = MibScalar((1, 3, 6, 1, 4, 1, 25651, 1, 2, 4, 3, 1, 100), AcmModulationT()).setMaxAccess("readonly")
if mibBuilder.loadTexts: locMaximumTxModulation.setStatus('current')
locActiveTxModulation = MibScalar((1, 3, 6, 1, 4, 1, 25651, 1, 2, 4, 3, 1, 101), AcmModulationT()).setMaxAccess("readonly")
if mibBuilder.loadTexts: locActiveTxModulation.setStatus('current')
locMinimumTxModulation = MibScalar((1, 3, 6, 1, 4, 1, 25651, 1, 2, 4, 3, 1, 102), AcmModulationT()).setMaxAccess("readonly")
if mibBuilder.loadTexts: locMinimumTxModulation.setStatus('current')
locMaximumRxModulation = MibScalar((1, 3, 6, 1, 4, 1, 25651, 1, 2, 4, 3, 1, 103), AcmModulationT()).setMaxAccess("readonly")
if mibBuilder.loadTexts: locMaximumRxModulation.setStatus('current')
locActiveRxModulation = MibScalar((1, 3, 6, 1, 4, 1, 25651, 1, 2, 4, 3, 1, 104), AcmModulationT()).setMaxAccess("readonly")
if mibBuilder.loadTexts: locActiveRxModulation.setStatus('current')
locMinimumRxModulation = MibScalar((1, 3, 6, 1, 4, 1, 25651, 1, 2, 4, 3, 1, 105), AcmModulationT()).setMaxAccess("readonly")
if mibBuilder.loadTexts: locMinimumRxModulation.setStatus('current')
locMaximumTxEthernetThroughput = MibScalar((1, 3, 6, 1, 4, 1, 25651, 1, 2, 4, 3, 1, 106), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: locMaximumTxEthernetThroughput.setStatus('current')
locActiveTxEthernetThroughput = MibScalar((1, 3, 6, 1, 4, 1, 25651, 1, 2, 4, 3, 1, 107), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: locActiveTxEthernetThroughput.setStatus('current')
locMinimumTxEthernetThroughput = MibScalar((1, 3, 6, 1, 4, 1, 25651, 1, 2, 4, 3, 1, 108), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: locMinimumTxEthernetThroughput.setStatus('current')
locMaximumRxEthernetThroughput = MibScalar((1, 3, 6, 1, 4, 1, 25651, 1, 2, 4, 3, 1, 109), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: locMaximumRxEthernetThroughput.setStatus('current')
locActiveRxEthernetThroughput = MibScalar((1, 3, 6, 1, 4, 1, 25651, 1, 2, 4, 3, 1, 110), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: locActiveRxEthernetThroughput.setStatus('current')
locMinimumRxEthernetThroughput = MibScalar((1, 3, 6, 1, 4, 1, 25651, 1, 2, 4, 3, 1, 111), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: locMinimumRxEthernetThroughput.setStatus('current')
locResetStats = MibScalar((1, 3, 6, 1, 4, 1, 25651, 1, 2, 4, 3, 1, 1000), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: locResetStats.setStatus('current')
remCurrentBER = MibScalar((1, 3, 6, 1, 4, 1, 25651, 1, 2, 4, 3, 2, 1), Integer32()).setUnits('BER * 1000000.0').setMaxAccess("readonly")
if mibBuilder.loadTexts: remCurrentBER.setStatus('current')
remCurrentBERstr = MibScalar((1, 3, 6, 1, 4, 1, 25651, 1, 2, 4, 3, 2, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: remCurrentBERstr.setStatus('current')
remCurrentRSL = MibScalar((1, 3, 6, 1, 4, 1, 25651, 1, 2, 4, 3, 2, 3), Integer32()).setUnits('dBm').setMaxAccess("readonly")
if mibBuilder.loadTexts: remCurrentRSL.setStatus('current')
remCurrentRSLstr = MibScalar((1, 3, 6, 1, 4, 1, 25651, 1, 2, 4, 3, 2, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: remCurrentRSLstr.setStatus('current')
remErrorDuration = MibScalar((1, 3, 6, 1, 4, 1, 25651, 1, 2, 4, 3, 2, 5), Integer32()).setUnits('Seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: remErrorDuration.setStatus('current')
remErrorDurationStr = MibScalar((1, 3, 6, 1, 4, 1, 25651, 1, 2, 4, 3, 2, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: remErrorDurationStr.setStatus('current')
remUnavailDuration = MibScalar((1, 3, 6, 1, 4, 1, 25651, 1, 2, 4, 3, 2, 7), Integer32()).setUnits('Seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: remUnavailDuration.setStatus('current')
remUnavailDurationStr = MibScalar((1, 3, 6, 1, 4, 1, 25651, 1, 2, 4, 3, 2, 8), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: remUnavailDurationStr.setStatus('current')
remMinRSL = MibScalar((1, 3, 6, 1, 4, 1, 25651, 1, 2, 4, 3, 2, 9), Integer32()).setUnits('dBm').setMaxAccess("readonly")
if mibBuilder.loadTexts: remMinRSL.setStatus('current')
remMinRSLstr = MibScalar((1, 3, 6, 1, 4, 1, 25651, 1, 2, 4, 3, 2, 10), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: remMinRSLstr.setStatus('current')
remMinRSLtimestamp = MibScalar((1, 3, 6, 1, 4, 1, 25651, 1, 2, 4, 3, 2, 11), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: remMinRSLtimestamp.setStatus('current')
remMaxRSL = MibScalar((1, 3, 6, 1, 4, 1, 25651, 1, 2, 4, 3, 2, 12), Integer32()).setUnits('dBm').setMaxAccess("readonly")
if mibBuilder.loadTexts: remMaxRSL.setStatus('current')
remMaxRSLstr = MibScalar((1, 3, 6, 1, 4, 1, 25651, 1, 2, 4, 3, 2, 13), DisplayString()).setUnits('dBm').setMaxAccess("readonly")
if mibBuilder.loadTexts: remMaxRSLstr.setStatus('current')
remSampleDuration = MibScalar((1, 3, 6, 1, 4, 1, 25651, 1, 2, 4, 3, 2, 14), Integer32()).setUnits('Seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: remSampleDuration.setStatus('current')
remSampleDurationStr = MibScalar((1, 3, 6, 1, 4, 1, 25651, 1, 2, 4, 3, 2, 15), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: remSampleDurationStr.setStatus('current')
remResetStats = MibScalar((1, 3, 6, 1, 4, 1, 25651, 1, 2, 4, 3, 2, 1000), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: remResetStats.setStatus('current')
userThroughput = MibIdentifier((1, 3, 6, 1, 4, 1, 25651, 1, 2, 4, 5))
aggregateUserThroughput = MibScalar((1, 3, 6, 1, 4, 1, 25651, 1, 2, 4, 5, 1), DisplayString()).setUnits('MBit/s').setMaxAccess("readonly")
if mibBuilder.loadTexts: aggregateUserThroughput.setStatus('current')
inboundEthernetThroughput = MibScalar((1, 3, 6, 1, 4, 1, 25651, 1, 2, 4, 5, 2), DisplayString()).setUnits('MBit/s').setMaxAccess("readonly")
if mibBuilder.loadTexts: inboundEthernetThroughput.setStatus('current')
outboundEthernetThroughput = MibScalar((1, 3, 6, 1, 4, 1, 25651, 1, 2, 4, 5, 3), DisplayString()).setUnits('MBit/s').setMaxAccess("readonly")
if mibBuilder.loadTexts: outboundEthernetThroughput.setStatus('current')
fullDuplexEthernetThroughput = MibScalar((1, 3, 6, 1, 4, 1, 25651, 1, 2, 4, 5, 4), DisplayString()).setUnits('MBit/s').setMaxAccess("readonly")
if mibBuilder.loadTexts: fullDuplexEthernetThroughput.setStatus('current')
radioReboot = MibScalar((1, 3, 6, 1, 4, 1, 25651, 1, 2, 1000), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 100))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: radioReboot.setStatus('current')
productsMIBConformance = MibIdentifier((1, 3, 6, 1, 4, 1, 25651, 1, 3))
productsMIBCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 25651, 1, 3, 1))
productsMIBGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 25651, 1, 3, 2))
productsAllObjects = ObjectGroup((1, 3, 6, 1, 4, 1, 25651, 1, 3, 2, 1)).setObjects(("ExaltComProducts", "modelName"), ("ExaltComProducts", "partNumber"), ("ExaltComProducts", "serialNumber"), ("ExaltComProducts", "interfaceType"), ("ExaltComProducts", "firmwareVersion"), ("ExaltComProducts", "bootVersion"), ("ExaltComProducts", "rfFreqBand"), ("ExaltComProducts", "sysDate"), ("ExaltComProducts", "sysTime"), ("ExaltComProducts", "rnLocal"), ("ExaltComProducts", "rnRemote"), ("ExaltComProducts", "linkName"), ("ExaltComProducts", "linkSecKey"), ("ExaltComProducts", "adminPassword"), ("ExaltComProducts", "userPassword"), ("ExaltComProducts", "ipLocal"), ("ExaltComProducts", "ipRemote"), ("ExaltComProducts", "subnetMask"), ("ExaltComProducts", "ipAddressNetmask"), ("ExaltComProducts", "defaultGateway"), ("ExaltComProducts", "commitAdminSettings"), ("ExaltComProducts", "te1NumChannels"), ("ExaltComProducts", "te1NumActiveChannels"), ("ExaltComProducts", "selectT1orE1"), ("ExaltComProducts", "commitTe1Settings"), ("ExaltComProducts", "currentFwFilename"), ("ExaltComProducts", "alternateFwFilename"), ("ExaltComProducts", "swapFWimage"), ("ExaltComProducts", "locLinkState"), ("ExaltComProducts", "locLinkStateV"), ("ExaltComProducts", "locLinkStateH"), ("ExaltComProducts", "locTe1LinkSummary"), ("ExaltComProducts", "locTempAlarm"), ("ExaltComProducts", "locCurrentTemp"), ("ExaltComProducts", "locCurrentTempS"), ("ExaltComProducts", "locLinkSecMismatch"), ("ExaltComProducts", "remLinkState"), ("ExaltComProducts", "remLinkStateV"), ("ExaltComProducts", "remLinkStateH"), ("ExaltComProducts", "remTe1LinkSummary"), ("ExaltComProducts", "remTempAlarm"), ("ExaltComProducts", "remCurrentTemp"), ("ExaltComProducts", "remCurrentTempS"), ("ExaltComProducts", "remLinkSecMismatch"), ("ExaltComProducts", "locCurrentBER"), ("ExaltComProducts", "locCurrentBERstr"), ("ExaltComProducts", "locCurrentRSL"), ("ExaltComProducts", "locCurrentRSLstr"), ("ExaltComProducts", "locErrorDuration"), ("ExaltComProducts", "locErrorDurationStr"), ("ExaltComProducts", "locUnavailDuration"), ("ExaltComProducts", "locUnavailDurationStr"), ("ExaltComProducts", "locMinRSL"), ("ExaltComProducts", "locMinRSLstr"), ("ExaltComProducts", "locMinRSLtimestamp"), ("ExaltComProducts", "locMaxRSL"), ("ExaltComProducts", "locMaxRSLstr"), ("ExaltComProducts", "locSampleDuration"), ("ExaltComProducts", "locSampleDurationStr"), ("ExaltComProducts", "locResetStats"), ("ExaltComProducts", "remCurrentBER"), ("ExaltComProducts", "remCurrentBERstr"), ("ExaltComProducts", "remCurrentRSL"), ("ExaltComProducts", "remCurrentRSLstr"), ("ExaltComProducts", "remErrorDuration"), ("ExaltComProducts", "remErrorDurationStr"), ("ExaltComProducts", "remUnavailDuration"), ("ExaltComProducts", "remUnavailDurationStr"), ("ExaltComProducts", "remMinRSL"), ("ExaltComProducts", "remMinRSLstr"), ("ExaltComProducts", "remMinRSLtimestamp"), ("ExaltComProducts", "remMaxRSL"), ("ExaltComProducts", "remMaxRSLstr"), ("ExaltComProducts", "remSampleDuration"), ("ExaltComProducts", "remSampleDurationStr"), ("ExaltComProducts", "remResetStats"), ("ExaltComProducts", "radioReboot"), ("ExaltComProducts", "te1Status"), ("ExaltComProducts", "t1LBO"), ("ExaltComProducts", "te1AIS"), ("ExaltComProducts", "t1LineCode"), ("ExaltComProducts", "te1LoopBackMode"), ("ExaltComProducts", "locTe1Alarm"), ("ExaltComProducts", "remTe1Alarm"), ("ExaltComProducts", "aesEnable"), ("ExaltComProducts", "licKey"), ("ExaltComProducts", "aggregateUserThroughput"), ("ExaltComProducts", "inboundEthernetThroughput"), ("ExaltComProducts", "outboundEthernetThroughput"), ("ExaltComProducts", "fullDuplexEthernetThroughput"), ("ExaltComProducts", "locEthUtilizationIn"), ("ExaltComProducts", "locEthUtilizationOut"), ("ExaltComProducts", "locEthUtilizationWatermarkEnabled"), ("ExaltComProducts", "locEthUtilizationWatermark"), ("ExaltComProducts", "locEthUtilizationWatermarkTrapEnabled"), ("ExaltComProducts", "locEthUtilizationWatermarkTrapDuration"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    productsAllObjects = productsAllObjects.setStatus('current')
mibBuilder.exportSymbols("ExaltComProducts", ipRemote=ipRemote, alternateFwFilename=alternateFwFilename, aggregateUserThroughput=aggregateUserThroughput, locCurrentBER=locCurrentBER, locMaximumTxModulation=locMaximumTxModulation, locCurrentBERstr=locCurrentBERstr, remCurrentRSL=remCurrentRSL, productsMIB=productsMIB, locEthUtilizationWatermarkTrapEnabled=locEthUtilizationWatermarkTrapEnabled, linkName=linkName, locActiveRxEthernetThroughput=locActiveRxEthernetThroughput, locMinimumRxModulation=locMinimumRxModulation, trapRemAlarmStat=trapRemAlarmStat, hwId=hwId, te1LoopBackMode=te1LoopBackMode, locTempAlarm=locTempAlarm, te1Status=te1Status, remLinkSecMismatch=remLinkSecMismatch, te1=te1, trapLocAlarmStat=trapLocAlarmStat, alarms=alarms, remTe1Alarm=remTe1Alarm, rdkDbVer=rdkDbVer, remTempAlarm=remTempAlarm, ipLocal=ipLocal, te1Interface=te1Interface, locLinkStateV=locLinkStateV, uploadFilename=uploadFilename, remLinkState=remLinkState, locEthUtilizationWatermark=locEthUtilizationWatermark, locMaxRSL=locMaxRSL, locUnavailDurationStr=locUnavailDurationStr, currentFwFilename=currentFwFilename, remSampleDurationStr=remSampleDurationStr, perfRemote=perfRemote, trapIpaddr=trapIpaddr, locActiveRxModulation=locActiveRxModulation, remMinRSLstr=remMinRSLstr, locMinRSLstr=locMinRSLstr, rfFreqBand=rfFreqBand, ntpTimeZoneSelect=ntpTimeZoneSelect, locErrorDuration=locErrorDuration, linkSecKey=linkSecKey, remErrorDuration=remErrorDuration, te1Interfaces=te1Interfaces, firmwareVersion=firmwareVersion, commitNtpSettings=commitNtpSettings, factoryFwFilename=factoryFwFilename, transferType=transferType, locResetStats=locResetStats, locCurrentTempS=locCurrentTempS, rxFreqRange=rxFreqRange, locSysAlarms=locSysAlarms, locMaxRSLstr=locMaxRSLstr, systemConfig=systemConfig, aesEnable=aesEnable, ntpServer2IpAddr=ntpServer2IpAddr, ipAddress=ipAddress, PYSNMP_MODULE_ID=productsMIB, locMaximumRxModulation=locMaximumRxModulation, txFreqRange=txFreqRange, trapLocLinkStat=trapLocLinkStat, locEthAlarms=locEthAlarms, locTe1AlarmsEntry=locTe1AlarmsEntry, licKey=licKey, fullDuplexEthernetThroughput=fullDuplexEthernetThroughput, partNumber=partNumber, productsMIBNotifications=productsMIBNotifications, remLinkStateH=remLinkStateH, locEthUtilizationOut=locEthUtilizationOut, t1LBO=t1LBO, remTe1AlarmsEntry=remTe1AlarmsEntry, locTe1Alarm=locTe1Alarm, performance=performance, locUnavailDuration=locUnavailDuration, te1NumChannels=te1NumChannels, ntpServer3IpAddr=ntpServer3IpAddr, subnetMask=subnetMask, t1LineCode=t1LineCode, locSampleDurationStr=locSampleDurationStr, swapFWimage=swapFWimage, commitTe1Settings=commitTe1Settings, locCurrentRSLstr=locCurrentRSLstr, locMaximumRxEthernetThroughput=locMaximumRxEthernetThroughput, transferStatus=transferStatus, trapLocRslStat=trapLocRslStat, transferStart=transferStart, sysTime=sysTime, remEthAlarms=remEthAlarms, remUnavailDuration=remUnavailDuration, locEthUtilizationWatermarkTrapDuration=locEthUtilizationWatermarkTrapDuration, remMinRSL=remMinRSL, tftpServerIp=tftpServerIp, locErrorDurationStr=locErrorDurationStr, locMinRSLtimestamp=locMinRSLtimestamp, locActiveTxModulation=locActiveTxModulation, remSampleDuration=remSampleDuration, te1NumActiveChannels=te1NumActiveChannels, locEthUtilizationWatermarkEnabled=locEthUtilizationWatermarkEnabled, remSysAlarms=remSysAlarms, remCurrentTemp=remCurrentTemp, trapReboot=trapReboot, locCurrentTemp=locCurrentTemp, remTe1LinkSummary=remTe1LinkSummary, userThroughput=userThroughput, ipAddressNetmask=ipAddressNetmask, adminPassword=adminPassword, ntpClientEnable=ntpClientEnable, locEthUtilizationIn=locEthUtilizationIn, ntp=ntp, ntpServer1IpAddr=ntpServer1IpAddr, locTe1Alarms=locTe1Alarms, remCurrentTempS=remCurrentTempS, locMinimumTxEthernetThroughput=locMinimumTxEthernetThroughput, serialNumber=serialNumber, locCurrentRSL=locCurrentRSL, PwType=PwType, radioAdmin=radioAdmin, locLinkState=locLinkState, remUnavailDurationStr=remUnavailDurationStr, radioMonitor=radioMonitor, productsMIBCompliances=productsMIBCompliances, radioReboot=radioReboot, rnRemote=rnRemote, almRemote=almRemote, productsAllObjects=productsAllObjects, sysDate=sysDate, remCurrentBER=remCurrentBER, aesKey=aesKey, productsMIBConformance=productsMIBConformance, fileManagement=fileManagement, trapLocTempStat=trapLocTempStat, outboundEthernetThroughput=outboundEthernetThroughput, modelNumber=modelNumber, almLocal=almLocal, radioInfo=radioInfo, remCurrentRSLstr=remCurrentRSLstr, productsMIBGroups=productsMIBGroups, commitSystemSettings=commitSystemSettings, trapAuth=trapAuth, commitAdminSettings=commitAdminSettings, ntpServer4IpAddr=ntpServer4IpAddr, locActiveTxEthernetThroughput=locActiveTxEthernetThroughput, remErrorDurationStr=remErrorDurationStr, locLinkStateH=locLinkStateH, locTe1LinkSummary=locTe1LinkSummary, selectT1orE1=selectT1orE1, remLinkStateV=remLinkStateV, remCurrentBERstr=remCurrentBERstr, remTE1Alarms=remTE1Alarms, perfLocal=perfLocal, locMinimumTxModulation=locMinimumTxModulation, inboundEthernetThroughput=inboundEthernetThroughput, te1AIS=te1AIS, locEthPerfInterfaces=locEthPerfInterfaces, locTE1Alarms=locTE1Alarms, locMaximumTxEthernetThroughput=locMaximumTxEthernetThroughput, interface=interface, locEthPerfInterfacesEntry=locEthPerfInterfacesEntry, trapv2cEnable=trapv2cEnable, remMaxRSLstr=remMaxRSLstr, remMaxRSL=remMaxRSL, defaultGateway=defaultGateway, radioName=radioName, trapv1Enable=trapv1Enable, locSampleDuration=locSampleDuration, interfaceType=interfaceType, snmpConfig=snmpConfig, userPassword=userPassword, remTe1Alarms=remTe1Alarms, locMinRSL=locMinRSL, modelName=modelName, radioConfig=radioConfig, remResetStats=remResetStats, trapLocRslThreshold=trapLocRslThreshold, fileTransfer=fileTransfer, locLinkSecMismatch=locLinkSecMismatch, remMinRSLtimestamp=remMinRSLtimestamp, locMinimumRxEthernetThroughput=locMinimumRxEthernetThroughput, bootVersion=bootVersion, trapv3Enable=trapv3Enable, productsMIBObjects=productsMIBObjects, rnLocal=rnLocal)
