#
# PySNMP MIB module SDLC-OPT-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/SDLC-OPT-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 20:53:28 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, OctetString, Integer = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "OctetString", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
SingleValueConstraint, ValueSizeConstraint, ConstraintsUnion, ConstraintsIntersection, ValueRangeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "SingleValueConstraint", "ValueSizeConstraint", "ConstraintsUnion", "ConstraintsIntersection", "ValueRangeConstraint")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
ModuleIdentity, Gauge32, IpAddress, MibIdentifier, ObjectIdentity, Unsigned32, TimeTicks, enterprises, mgmt, Counter64, Integer32, Bits, MibScalar, MibTable, MibTableRow, MibTableColumn, iso, NotificationType, Counter32 = mibBuilder.importSymbols("SNMPv2-SMI", "ModuleIdentity", "Gauge32", "IpAddress", "MibIdentifier", "ObjectIdentity", "Unsigned32", "TimeTicks", "enterprises", "mgmt", "Counter64", "Integer32", "Bits", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "iso", "NotificationType", "Counter32")
DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention")
codex = MibIdentifier((1, 3, 6, 1, 4, 1, 449))
cdxProductSpecific = MibIdentifier((1, 3, 6, 1, 4, 1, 449, 2))
cdx6500 = MibIdentifier((1, 3, 6, 1, 4, 1, 449, 2, 1))
cdx6500Configuration = MibIdentifier((1, 3, 6, 1, 4, 1, 449, 2, 1, 2))
cdx6500CfgProtocolGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1))
cdx6500PCTPortProtocolGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 1))
cdx6500PCTStationProtocolGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 3))
cdx6500Statistics = MibIdentifier((1, 3, 6, 1, 4, 1, 449, 2, 1, 3))
cdx6500StatProtocolGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1))
cdx6500PSTPortProtocolGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1))
cdx6500PSTStationProtocolGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 3))
cdx6500Controls = MibIdentifier((1, 3, 6, 1, 4, 1, 449, 2, 1, 4))
cdx6500ContSDLC = MibIdentifier((1, 3, 6, 1, 4, 1, 449, 2, 1, 4, 5))
class Counter16(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ValueRangeConstraint(0, 65535)

class DisplayString(OctetString):
    pass

cdx6500PCTSDLCPortTable = MibTable((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 1, 12), )
if mibBuilder.loadTexts: cdx6500PCTSDLCPortTable.setStatus('mandatory')
cdx6500PCTSDLCPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 1, 12, 1), ).setIndexNames((0, "SDLC-OPT-MIB", "cdx6500sdlcpCfgPortNum"))
if mibBuilder.loadTexts: cdx6500PCTSDLCPortEntry.setStatus('mandatory')
cdx6500sdlcpCfgPortNum = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 1, 12, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 54))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500sdlcpCfgPortNum.setStatus('mandatory')
cdx6500sdlcpSubType = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 1, 12, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 50))).clone(namedValues=NamedValues(("hpad", 0), ("tpad", 1), ("newvalHpad", 50)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500sdlcpSubType.setStatus('mandatory')
cdx6500sdlcpTxCoding = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 1, 12, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 50))).clone(namedValues=NamedValues(("nrz", 0), ("nrzi", 1), ("newvalNrz", 50)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500sdlcpTxCoding.setStatus('mandatory')
cdx6500sdlcpLineType = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 1, 12, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 50))).clone(namedValues=NamedValues(("hdx", 0), ("fdx", 1), ("hdxdce", 2), ("newvalHdx", 50)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500sdlcpLineType.setStatus('mandatory')
cdx6500sdlcpTxType = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 1, 12, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 50))).clone(namedValues=NamedValues(("tws", 0), ("twa", 1), ("newvalTws", 50)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500sdlcpTxType.setStatus('mandatory')
cdx6500sdlcpSendSigDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 1, 12, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("deprecatedObj", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500sdlcpSendSigDelay.setStatus('deprecated')
cdx6500sdlcpClock = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 1, 12, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 50))).clone(namedValues=NamedValues(("int", 0), ("ext", 1), ("newvalInt", 50)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500sdlcpClock.setStatus('mandatory')
cdx6500sdlcpClockSpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 1, 12, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1200, 80000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500sdlcpClockSpeed.setStatus('mandatory')
cdx6500sdlcpNumControllers = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 1, 12, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500sdlcpNumControllers.setStatus('mandatory')
cdx6500sdlcpPollTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 1, 12, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500sdlcpPollTimer.setStatus('mandatory')
cdx6500sdlcpPollFrequency = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 1, 12, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(50, 250))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500sdlcpPollFrequency.setStatus('mandatory')
cdx6500sdlcpTries = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 1, 12, 1, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500sdlcpTries.setStatus('mandatory')
cdx6500sdlcpOptions = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 1, 12, 1, 13), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(3, 5))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500sdlcpOptions.setStatus('mandatory')
cdx6500sdlcpPortAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 1, 12, 1, 14), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 15))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500sdlcpPortAddress.setStatus('mandatory')
cdx6500sdlcpPortOptions = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 1, 12, 1, 15), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(2, 4))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500sdlcpPortOptions.setStatus('mandatory')
cdx6500sdlcpHPADResponseDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 1, 12, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 51, 100, 150, 200, 50))).clone(namedValues=NamedValues(("msec0", 0), ("msec50", 51), ("msec100", 100), ("msec150", 150), ("msec200", 200), ("newvalMsec0", 50)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500sdlcpHPADResponseDelay.setStatus('mandatory')
cdx6500sdlcpMaxFrameSize = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 1, 12, 1, 17), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4096))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500sdlcpMaxFrameSize.setStatus('mandatory')
cdx6500sdlcpRtsCtsDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 1, 12, 1, 18), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 250))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500sdlcpRtsCtsDelay.setStatus('mandatory')
cdx6500sdlcpElectricalInterfaceType = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 1, 12, 1, 19), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("v24", 1), ("v35", 2), ("v36", 3), ("x21", 4), ("none", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500sdlcpElectricalInterfaceType.setStatus('mandatory')
cdx6500sdlcpV24ElectricalInterfaceOption = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 1, 12, 1, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("ri", 1), ("tm", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500sdlcpV24ElectricalInterfaceOption.setStatus('mandatory')
cdx6500sdlcpHighSpeedElectricalInterfaceOption = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 1, 12, 1, 21), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("none", 1), ("xover", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500sdlcpHighSpeedElectricalInterfaceOption.setStatus('mandatory')
cdx6500PPSTSDLCPortTable = MibTable((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 12), )
if mibBuilder.loadTexts: cdx6500PPSTSDLCPortTable.setStatus('mandatory')
cdx6500PPSTSDLCPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 12, 1), ).setIndexNames((0, "SDLC-OPT-MIB", "cdx6500sdlcpStatsPortNum"))
if mibBuilder.loadTexts: cdx6500PPSTSDLCPortEntry.setStatus('mandatory')
cdx6500sdlcpStatsPortNum = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 12, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 54))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500sdlcpStatsPortNum.setStatus('mandatory')
cdx6500sdlcpPortStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 12, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 50))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1), ("busyout", 2), ("up", 3), ("down", 4), ("newvaldisabled", 50)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500sdlcpPortStatus.setStatus('mandatory')
cdx6500sdlcpPortSpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 12, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500sdlcpPortSpeed.setStatus('mandatory')
cdx6500sdlcpCharInTotal = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 12, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500sdlcpCharInTotal.setStatus('mandatory')
cdx6500sdlcpCharOutTotal = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 12, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500sdlcpCharOutTotal.setStatus('mandatory')
cdx6500sdlcpCharsInPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 12, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500sdlcpCharsInPerSec.setStatus('mandatory')
cdx6500sdlcpCharsOutPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 12, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500sdlcpCharsOutPerSec.setStatus('mandatory')
cdx6500sdlcpFrameInTotal = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 12, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500sdlcpFrameInTotal.setStatus('mandatory')
cdx6500sdlcpFrameOutTotal = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 12, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500sdlcpFrameOutTotal.setStatus('mandatory')
cdx6500sdlcpFramesInPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 12, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500sdlcpFramesInPerSec.setStatus('mandatory')
cdx6500sdlcpFramesOutPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 12, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500sdlcpFramesOutPerSec.setStatus('mandatory')
cdx6500sdlcpStateChange = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 12, 1, 12), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500sdlcpStateChange.setStatus('mandatory')
cdx6500sdlcpLinkDowns = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 12, 1, 13), Counter16()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500sdlcpLinkDowns.setStatus('mandatory')
cdx6500sdlcpUtilizationIn = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 12, 1, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500sdlcpUtilizationIn.setStatus('mandatory')
cdx6500sdlcpUtilizationOut = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 12, 1, 15), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500sdlcpUtilizationOut.setStatus('mandatory')
cdx6500sdlcpOverrunErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 12, 1, 16), Counter16()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500sdlcpOverrunErrors.setStatus('mandatory')
cdx6500sdlcpUnderrunErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 12, 1, 17), Counter16()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500sdlcpUnderrunErrors.setStatus('mandatory')
cdx6500sdlcpCRCErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 12, 1, 18), Counter16()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500sdlcpCRCErrors.setStatus('mandatory')
cdx6500sdlcpPacketsQueued = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 12, 1, 19), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500sdlcpPacketsQueued.setStatus('mandatory')
cdx6500sdlcpRRInFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 12, 1, 20), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500sdlcpRRInFrames.setStatus('mandatory')
cdx6500sdlcpRROutFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 12, 1, 21), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500sdlcpRROutFrames.setStatus('mandatory')
cdx6500sdlcpRNRInFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 12, 1, 22), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500sdlcpRNRInFrames.setStatus('mandatory')
cdx6500sdlcpRNROutFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 12, 1, 23), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500sdlcpRNROutFrames.setStatus('mandatory')
cdx6500sdlcpSNRMInFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 12, 1, 24), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500sdlcpSNRMInFrames.setStatus('mandatory')
cdx6500sdlcpSNRMOutFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 12, 1, 25), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500sdlcpSNRMOutFrames.setStatus('mandatory')
cdx6500sdlcpUAInFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 12, 1, 26), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500sdlcpUAInFrames.setStatus('mandatory')
cdx6500sdlcpUAOutFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 12, 1, 27), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500sdlcpUAOutFrames.setStatus('mandatory')
cdx6500sdlcpDMInFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 12, 1, 28), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500sdlcpDMInFrames.setStatus('mandatory')
cdx6500sdlcpDMOutFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 12, 1, 29), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500sdlcpDMOutFrames.setStatus('mandatory')
cdx6500sdlcpXIDInFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 12, 1, 30), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500sdlcpXIDInFrames.setStatus('mandatory')
cdx6500sdlcpXIDOutFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 12, 1, 31), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500sdlcpXIDOutFrames.setStatus('mandatory')
cdx6500sdlcpREJInFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 12, 1, 32), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500sdlcpREJInFrames.setStatus('mandatory')
cdx6500sdlcpREJOutFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 12, 1, 33), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500sdlcpREJOutFrames.setStatus('mandatory')
cdx6500sdlcpDISCInFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 12, 1, 34), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500sdlcpDISCInFrames.setStatus('mandatory')
cdx6500sdlcpDISCOutFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 12, 1, 35), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500sdlcpDISCOutFrames.setStatus('mandatory')
cdx6500sdlcpRDInFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 12, 1, 36), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500sdlcpRDInFrames.setStatus('mandatory')
cdx6500sdlcpRDOutFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 12, 1, 37), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500sdlcpRDOutFrames.setStatus('mandatory')
cdx6500sdlcpFRMRInFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 12, 1, 38), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500sdlcpFRMRInFrames.setStatus('mandatory')
cdx6500sdlcpFRMROutFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 12, 1, 39), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500sdlcpFRMROutFrames.setStatus('mandatory')
cdx6500sdlcpUPInFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 12, 1, 40), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500sdlcpUPInFrames.setStatus('mandatory')
cdx6500sdlcpUPOutFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 12, 1, 41), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500sdlcpUPOutFrames.setStatus('mandatory')
cdx6500sdlcpTESTInFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 12, 1, 42), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500sdlcpTESTInFrames.setStatus('mandatory')
cdx6500sdlcpTESTOutFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 12, 1, 43), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500sdlcpTESTOutFrames.setStatus('mandatory')
cdx6500sdlcpXIDNullInFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 12, 1, 44), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500sdlcpXIDNullInFrames.setStatus('mandatory')
cdx6500sdlcpXIDNullOutFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 12, 1, 45), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500sdlcpXIDNullOutFrames.setStatus('mandatory')
cdx6500sdlcpXID0InFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 12, 1, 46), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500sdlcpXID0InFrames.setStatus('mandatory')
cdx6500sdlcpXID0OutFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 12, 1, 47), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500sdlcpXID0OutFrames.setStatus('mandatory')
cdx6500sdlcpXID1InFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 12, 1, 48), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500sdlcpXID1InFrames.setStatus('mandatory')
cdx6500sdlcpXID1OutFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 12, 1, 49), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500sdlcpXID1OutFrames.setStatus('mandatory')
cdx6500sdlcpXID3InFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 12, 1, 50), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500sdlcpXID3InFrames.setStatus('mandatory')
cdx6500sdlcpXID3OutFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 12, 1, 51), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500sdlcpXID3OutFrames.setStatus('mandatory')
cdx6500SPCTSDLCStationTable = MibTable((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 3, 4), )
if mibBuilder.loadTexts: cdx6500SPCTSDLCStationTable.setStatus('mandatory')
cdx6500SPCTSDLCStationEntry = MibTableRow((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 3, 4, 1), ).setIndexNames((0, "SDLC-OPT-MIB", "cdx6500sdlcsCfgPortNum"), (0, "SDLC-OPT-MIB", "cdx6500sdlcsCfgStationNum"))
if mibBuilder.loadTexts: cdx6500SPCTSDLCStationEntry.setStatus('mandatory')
cdx6500sdlcsCfgPortNum = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 3, 4, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 54))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500sdlcsCfgPortNum.setStatus('mandatory')
cdx6500sdlcsCfgStationNum = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 3, 4, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500sdlcsCfgStationNum.setStatus('mandatory')
cdx6500sdlcsStationAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 3, 4, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 2))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500sdlcsStationAddr.setStatus('mandatory')
cdx6500sdlcsFrameWinSize = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 3, 4, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 7))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500sdlcsFrameWinSize.setStatus('mandatory')
cdx6500sdlcsAutocallMnem = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 3, 4, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500sdlcsAutocallMnem.setStatus('mandatory')
cdx6500sdlcsProtocolID = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 3, 4, 1, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 8))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500sdlcsProtocolID.setStatus('mandatory')
cdx6500sdlcsCUG = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 3, 4, 1, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(23, 23)).setFixedLength(23)).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500sdlcsCUG.setStatus('mandatory')
cdx6500sdlcsOptions = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 3, 4, 1, 8), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(3, 4))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500sdlcsOptions.setStatus('mandatory')
cdx6500sdlcsStationID = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 3, 4, 1, 9), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 14))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500sdlcsStationID.setStatus('mandatory')
cdx6500sdlcsBillingFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 3, 4, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 50))).clone(namedValues=NamedValues(("off", 0), ("on", 1), ("newvaloff", 50)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500sdlcsBillingFlag.setStatus('mandatory')
cdx6500sdlcsStnSubaddress = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 3, 4, 1, 11), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 3))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500sdlcsStnSubaddress.setStatus('mandatory')
cdx6500sdlcsGroupAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 3, 4, 1, 12), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 3))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500sdlcsGroupAddress.setStatus('mandatory')
cdx6500sdlcsX25Password = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 3, 4, 1, 13), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 24))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500sdlcsX25Password.setStatus('mandatory')
cdx6500sdlcsProtectionLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 3, 4, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 50))).clone(namedValues=NamedValues(("none", 0), ("cponly", 1), ("fulldcp", 2), ("newvalnone", 50)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500sdlcsProtectionLevel.setStatus('mandatory')
cdx6500sdlcsReconnectTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 3, 4, 1, 15), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 128))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500sdlcsReconnectTimeout.setStatus('mandatory')
cdx6500sdlcsReconnectLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 3, 4, 1, 16), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 127))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500sdlcsReconnectLimit.setStatus('mandatory')
cdx6500sdlcsTrafficPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 3, 4, 1, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 50))).clone(namedValues=NamedValues(("lowpriority", 0), ("medpriority", 1), ("hipriority", 2), ("xppriority", 3), ("newvallowpriority", 50)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500sdlcsTrafficPriority.setStatus('optional')
cdx6500sdlcsCallTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 3, 4, 1, 18), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 300))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500sdlcsCallTimer.setStatus('mandatory')
cdx6500sdlcsIdleTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 3, 4, 1, 19), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65534))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500sdlcsIdleTimer.setStatus('mandatory')
cdx6500sdlcsVerConnTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 3, 4, 1, 20), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65534))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500sdlcsVerConnTimer.setStatus('mandatory')
cdx6500sdlcsUnsusWaitTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 3, 4, 1, 21), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65534))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500sdlcsUnsusWaitTimer.setStatus('mandatory')
cdx6500sdlcsMaxCallAttempts = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 3, 4, 1, 22), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500sdlcsMaxCallAttempts.setStatus('mandatory')
cdx6500SPSTSDLCStationTable = MibTable((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 3, 4), )
if mibBuilder.loadTexts: cdx6500SPSTSDLCStationTable.setStatus('mandatory')
cdx6500SPSTSDLCStationEntry = MibTableRow((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 3, 4, 1), ).setIndexNames((0, "SDLC-OPT-MIB", "cdx6500sdlcsStatsPortNum"), (0, "SDLC-OPT-MIB", "cdx6500sdlcsStatsStationNum"))
if mibBuilder.loadTexts: cdx6500SPSTSDLCStationEntry.setStatus('mandatory')
cdx6500sdlcsStatsPortNum = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 3, 4, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 54))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500sdlcsStatsPortNum.setStatus('mandatory')
cdx6500sdlcsStatsStationNum = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 3, 4, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500sdlcsStatsStationNum.setStatus('mandatory')
cdx6500sdlcsStatsStationAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 3, 4, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500sdlcsStatsStationAddr.setStatus('mandatory')
cdx6500sdlcsQLLCState = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 3, 4, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500sdlcsQLLCState.setStatus('mandatory')
cdx6500sdlcsCharInTotal = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 3, 4, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500sdlcsCharInTotal.setStatus('mandatory')
cdx6500sdlcsCharOutTotal = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 3, 4, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500sdlcsCharOutTotal.setStatus('mandatory')
cdx6500sdlcsCharsInPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 3, 4, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500sdlcsCharsInPerSec.setStatus('mandatory')
cdx6500sdlcsCharsOutPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 3, 4, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500sdlcsCharsOutPerSec.setStatus('mandatory')
cdx6500sdlcsFrameInTotal = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 3, 4, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500sdlcsFrameInTotal.setStatus('mandatory')
cdx6500sdlcsFrameOutTotal = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 3, 4, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500sdlcsFrameOutTotal.setStatus('mandatory')
cdx6500sdlcsFramesInPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 3, 4, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500sdlcsFramesInPerSec.setStatus('mandatory')
cdx6500sdlcsFramesOutPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 3, 4, 1, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500sdlcsFramesOutPerSec.setStatus('mandatory')
cdx6500sdlcsQRRInTotal = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 3, 4, 1, 13), Counter16()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500sdlcsQRRInTotal.setStatus('mandatory')
cdx6500sdlcsQRROutTotal = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 3, 4, 1, 14), Counter16()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500sdlcsQRROutTotal.setStatus('mandatory')
cdx6500sdlcsUtilizationIn = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 3, 4, 1, 15), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500sdlcsUtilizationIn.setStatus('mandatory')
cdx6500sdlcsUtilizationOut = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 3, 4, 1, 16), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500sdlcsUtilizationOut.setStatus('mandatory')
cdx6500sdlcsPacketsQueued = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 3, 4, 1, 17), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500sdlcsPacketsQueued.setStatus('mandatory')
cdx6500sdlcsRRInFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 3, 4, 1, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500sdlcsRRInFrames.setStatus('mandatory')
cdx6500sdlcsRROutFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 3, 4, 1, 19), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500sdlcsRROutFrames.setStatus('mandatory')
cdx6500sdlcsRNRInFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 3, 4, 1, 20), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500sdlcsRNRInFrames.setStatus('mandatory')
cdx6500sdlcsRNROutFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 3, 4, 1, 21), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500sdlcsRNROutFrames.setStatus('mandatory')
cdx6500sdlcsSNRMInFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 3, 4, 1, 22), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500sdlcsSNRMInFrames.setStatus('mandatory')
cdx6500sdlcsSNRMOutFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 3, 4, 1, 23), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500sdlcsSNRMOutFrames.setStatus('mandatory')
cdx6500sdlcsUAInFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 3, 4, 1, 24), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500sdlcsUAInFrames.setStatus('mandatory')
cdx6500sdlcsUAOutFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 3, 4, 1, 25), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500sdlcsUAOutFrames.setStatus('mandatory')
cdx6500sdlcsDMInFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 3, 4, 1, 26), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500sdlcsDMInFrames.setStatus('mandatory')
cdx6500sdlcsDMOutFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 3, 4, 1, 27), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500sdlcsDMOutFrames.setStatus('mandatory')
cdx6500sdlcsXIDInFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 3, 4, 1, 28), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500sdlcsXIDInFrames.setStatus('mandatory')
cdx6500sdlcsXIDOutFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 3, 4, 1, 29), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500sdlcsXIDOutFrames.setStatus('mandatory')
cdx6500sdlcsREJInFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 3, 4, 1, 30), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500sdlcsREJInFrames.setStatus('mandatory')
cdx6500sdlcsREJOutFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 3, 4, 1, 31), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500sdlcsREJOutFrames.setStatus('mandatory')
cdx6500sdlcsDISCInFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 3, 4, 1, 32), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500sdlcsDISCInFrames.setStatus('mandatory')
cdx6500sdlcsDISCOutFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 3, 4, 1, 33), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500sdlcsDISCOutFrames.setStatus('mandatory')
cdx6500sdlcsRDInFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 3, 4, 1, 34), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500sdlcsRDInFrames.setStatus('mandatory')
cdx6500sdlcsRDOutFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 3, 4, 1, 35), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500sdlcsRDOutFrames.setStatus('mandatory')
cdx6500sdlcsFRMRInFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 3, 4, 1, 36), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500sdlcsFRMRInFrames.setStatus('mandatory')
cdx6500sdlcsFRMROutFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 3, 4, 1, 37), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500sdlcsFRMROutFrames.setStatus('mandatory')
cdx6500sdlcsUPInFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 3, 4, 1, 38), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500sdlcsUPInFrames.setStatus('mandatory')
cdx6500sdlcsUPOutFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 3, 4, 1, 39), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500sdlcsUPOutFrames.setStatus('mandatory')
cdx6500sdlcsTESTInFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 3, 4, 1, 40), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500sdlcsTESTInFrames.setStatus('mandatory')
cdx6500sdlcsTESTOutFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 3, 4, 1, 41), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500sdlcsTESTOutFrames.setStatus('mandatory')
cdx6500sdlcsQSMInFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 3, 4, 1, 42), Counter16()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500sdlcsQSMInFrames.setStatus('mandatory')
cdx6500sdlcsQSMOutFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 3, 4, 1, 43), Counter16()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500sdlcsQSMOutFrames.setStatus('mandatory')
cdx6500sdlcsQUAInFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 3, 4, 1, 44), Counter16()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500sdlcsQUAInFrames.setStatus('mandatory')
cdx6500sdlcsQUAOutFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 3, 4, 1, 45), Counter16()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500sdlcsQUAOutFrames.setStatus('mandatory')
cdx6500sdlcsQRDInFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 3, 4, 1, 46), Counter16()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500sdlcsQRDInFrames.setStatus('mandatory')
cdx6500sdlcsQRDOutFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 3, 4, 1, 47), Counter16()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500sdlcsQRDOutFrames.setStatus('mandatory')
cdx6500sdlcsQFRMRInFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 3, 4, 1, 48), Counter16()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500sdlcsQFRMRInFrames.setStatus('mandatory')
cdx6500sdlcsQFRMROutFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 3, 4, 1, 49), Counter16()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500sdlcsQFRMROutFrames.setStatus('mandatory')
cdx6500sdlcsQXIDInFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 3, 4, 1, 50), Counter16()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500sdlcsQXIDInFrames.setStatus('mandatory')
cdx6500sdlcsQXIDOutFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 3, 4, 1, 51), Counter16()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500sdlcsQXIDOutFrames.setStatus('mandatory')
cdx6500sdlcsQDCInFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 3, 4, 1, 52), Counter16()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500sdlcsQDCInFrames.setStatus('mandatory')
cdx6500sdlcsQDCOutFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 3, 4, 1, 53), Counter16()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500sdlcsQDCOutFrames.setStatus('mandatory')
cdx6500sdlcsQDMInFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 3, 4, 1, 54), Counter16()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500sdlcsQDMInFrames.setStatus('mandatory')
cdx6500sdlcsQDMOutFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 3, 4, 1, 55), Counter16()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500sdlcsQDMOutFrames.setStatus('mandatory')
cdx6500sdlcsQTESTInFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 3, 4, 1, 56), Counter16()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500sdlcsQTESTInFrames.setStatus('mandatory')
cdx6500sdlcsQTESTOutFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 3, 4, 1, 57), Counter16()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500sdlcsQTESTOutFrames.setStatus('mandatory')
cdx6500sdlcsQSSInFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 3, 4, 1, 58), Counter16()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500sdlcsQSSInFrames.setStatus('mandatory')
cdx6500sdlcsQSSOutFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 3, 4, 1, 59), Counter16()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500sdlcsQSSOutFrames.setStatus('mandatory')
cdx6500sdlcsQRSInFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 3, 4, 1, 60), Counter16()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500sdlcsQRSInFrames.setStatus('mandatory')
cdx6500sdlcsQRSOutFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 3, 4, 1, 61), Counter16()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500sdlcsQRSOutFrames.setStatus('mandatory')
cdx6500sdlcsXIDNullInFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 3, 4, 1, 62), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500sdlcsXIDNullInFrames.setStatus('mandatory')
cdx6500sdlcsXIDNullOutFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 3, 4, 1, 63), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500sdlcsXIDNullOutFrames.setStatus('mandatory')
cdx6500sdlcsXID0InFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 3, 4, 1, 64), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500sdlcsXID0InFrames.setStatus('mandatory')
cdx6500sdlcsXID0OutFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 3, 4, 1, 65), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500sdlcsXID0OutFrames.setStatus('mandatory')
cdx6500sdlcsXID1InFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 3, 4, 1, 66), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500sdlcsXID1InFrames.setStatus('mandatory')
cdx6500sdlcsXID1OutFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 3, 4, 1, 67), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500sdlcsXID1OutFrames.setStatus('mandatory')
cdx6500sdlcsXID3InFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 3, 4, 1, 68), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500sdlcsXID3InFrames.setStatus('mandatory')
cdx6500sdlcsXID3OutFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 3, 4, 1, 69), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500sdlcsXID3OutFrames.setStatus('mandatory')
cdx6500sdlcsVSNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 3, 4, 1, 70), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 8))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500sdlcsVSNumber.setStatus('mandatory')
cdx6500sdlcsVRNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 3, 4, 1, 71), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 8))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500sdlcsVRNumber.setStatus('mandatory')
cdx6500sdlcsNRNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 3, 4, 1, 72), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 8))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500sdlcsNRNumber.setStatus('mandatory')
cdx6500sdlcsNSNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 3, 4, 1, 73), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 8))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500sdlcsNSNumber.setStatus('mandatory')
cdx6500ContSDLCStationTable = MibTable((1, 3, 6, 1, 4, 1, 449, 2, 1, 4, 5, 1), )
if mibBuilder.loadTexts: cdx6500ContSDLCStationTable.setStatus('mandatory')
cdx6500ContSDLCStationEntry = MibTableRow((1, 3, 6, 1, 4, 1, 449, 2, 1, 4, 5, 1, 1), ).setIndexNames((0, "SDLC-OPT-MIB", "cdx6500sdlcsContPortNum"), (0, "SDLC-OPT-MIB", "cdx6500sdlcsContStationNum"))
if mibBuilder.loadTexts: cdx6500ContSDLCStationEntry.setStatus('mandatory')
cdx6500sdlcsContPortNum = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 4, 5, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 54)))
if mibBuilder.loadTexts: cdx6500sdlcsContPortNum.setStatus('mandatory')
cdx6500sdlcsContStationNum = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 4, 5, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 32)))
if mibBuilder.loadTexts: cdx6500sdlcsContStationNum.setStatus('mandatory')
cdx6500sdlcsContBootStation = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 4, 5, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("boot", 1), ("noboot", 2)))).setMaxAccess("writeonly")
if mibBuilder.loadTexts: cdx6500sdlcsContBootStation.setStatus('mandatory')
cdx6500sdlcsContDisableStation = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 4, 5, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disable", 1), ("nodisable", 2)))).setMaxAccess("writeonly")
if mibBuilder.loadTexts: cdx6500sdlcsContDisableStation.setStatus('mandatory')
cdx6500sdlcsContEnableStation = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 4, 5, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("noenable", 2)))).setMaxAccess("writeonly")
if mibBuilder.loadTexts: cdx6500sdlcsContEnableStation.setStatus('mandatory')
cdx6500sdlcsContBusyOutStation = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 4, 5, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("busyout", 1), ("nobusyout", 2)))).setMaxAccess("writeonly")
if mibBuilder.loadTexts: cdx6500sdlcsContBusyOutStation.setStatus('deprecated')
cdx6500sdlcsContResetStnStats = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 4, 5, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("reset", 1), ("noreset", 2)))).setMaxAccess("writeonly")
if mibBuilder.loadTexts: cdx6500sdlcsContResetStnStats.setStatus('mandatory')
mibBuilder.exportSymbols("SDLC-OPT-MIB", cdx6500PSTPortProtocolGroup=cdx6500PSTPortProtocolGroup, cdx6500sdlcpStateChange=cdx6500sdlcpStateChange, cdx6500sdlcpFramesInPerSec=cdx6500sdlcpFramesInPerSec, cdx6500sdlcsUAOutFrames=cdx6500sdlcsUAOutFrames, cdx6500sdlcpOptions=cdx6500sdlcpOptions, cdx6500sdlcpTries=cdx6500sdlcpTries, cdx6500sdlcsCfgStationNum=cdx6500sdlcsCfgStationNum, cdx6500sdlcsCharOutTotal=cdx6500sdlcsCharOutTotal, cdx6500sdlcpXID0OutFrames=cdx6500sdlcpXID0OutFrames, cdx6500sdlcpPacketsQueued=cdx6500sdlcpPacketsQueued, cdx6500sdlcpRDOutFrames=cdx6500sdlcpRDOutFrames, cdx6500sdlcpTxType=cdx6500sdlcpTxType, cdx6500sdlcpFramesOutPerSec=cdx6500sdlcpFramesOutPerSec, cdx6500sdlcsQFRMROutFrames=cdx6500sdlcsQFRMROutFrames, cdx6500sdlcsQUAOutFrames=cdx6500sdlcsQUAOutFrames, cdx6500sdlcpUnderrunErrors=cdx6500sdlcpUnderrunErrors, cdx6500sdlcpXID0InFrames=cdx6500sdlcpXID0InFrames, cdx6500sdlcsXID0InFrames=cdx6500sdlcsXID0InFrames, cdx6500sdlcpUtilizationIn=cdx6500sdlcpUtilizationIn, cdx6500sdlcsVerConnTimer=cdx6500sdlcsVerConnTimer, cdx6500sdlcpPollTimer=cdx6500sdlcpPollTimer, cdx6500sdlcsStatsStationAddr=cdx6500sdlcsStatsStationAddr, cdx6500sdlcsQDCOutFrames=cdx6500sdlcsQDCOutFrames, cdx6500sdlcsXID1OutFrames=cdx6500sdlcsXID1OutFrames, cdx6500sdlcsNSNumber=cdx6500sdlcsNSNumber, cdx6500sdlcsUPOutFrames=cdx6500sdlcsUPOutFrames, cdx6500sdlcsContBusyOutStation=cdx6500sdlcsContBusyOutStation, cdx6500sdlcpXIDOutFrames=cdx6500sdlcpXIDOutFrames, cdx6500sdlcsXIDInFrames=cdx6500sdlcsXIDInFrames, cdx6500sdlcsQDCInFrames=cdx6500sdlcsQDCInFrames, cdx6500sdlcpRtsCtsDelay=cdx6500sdlcpRtsCtsDelay, cdx6500sdlcsProtocolID=cdx6500sdlcsProtocolID, cdx6500sdlcsUtilizationOut=cdx6500sdlcsUtilizationOut, cdx6500sdlcsRRInFrames=cdx6500sdlcsRRInFrames, cdx6500sdlcsQRROutTotal=cdx6500sdlcsQRROutTotal, cdx6500sdlcpPollFrequency=cdx6500sdlcpPollFrequency, cdx6500sdlcpSNRMOutFrames=cdx6500sdlcpSNRMOutFrames, cdx6500sdlcsXID3OutFrames=cdx6500sdlcsXID3OutFrames, cdx6500sdlcpDMInFrames=cdx6500sdlcpDMInFrames, Counter16=Counter16, cdx6500sdlcpClockSpeed=cdx6500sdlcpClockSpeed, cdx6500sdlcsSNRMInFrames=cdx6500sdlcsSNRMInFrames, cdx6500CfgProtocolGroup=cdx6500CfgProtocolGroup, cdx6500sdlcpCRCErrors=cdx6500sdlcpCRCErrors, cdx6500sdlcsFrameInTotal=cdx6500sdlcsFrameInTotal, cdx6500sdlcpUPInFrames=cdx6500sdlcpUPInFrames, cdx6500sdlcpUAInFrames=cdx6500sdlcpUAInFrames, cdx6500sdlcpTESTOutFrames=cdx6500sdlcpTESTOutFrames, cdx6500sdlcpREJInFrames=cdx6500sdlcpREJInFrames, cdx6500sdlcsRDOutFrames=cdx6500sdlcsRDOutFrames, cdx6500sdlcpFRMROutFrames=cdx6500sdlcpFRMROutFrames, cdx6500sdlcsX25Password=cdx6500sdlcsX25Password, cdx6500sdlcpOverrunErrors=cdx6500sdlcpOverrunErrors, cdx6500sdlcsQXIDOutFrames=cdx6500sdlcsQXIDOutFrames, cdx6500sdlcsContEnableStation=cdx6500sdlcsContEnableStation, cdx6500sdlcsQLLCState=cdx6500sdlcsQLLCState, cdx6500sdlcsStatsPortNum=cdx6500sdlcsStatsPortNum, cdx6500sdlcsXID1InFrames=cdx6500sdlcsXID1InFrames, cdx6500sdlcsContBootStation=cdx6500sdlcsContBootStation, cdx6500sdlcpSendSigDelay=cdx6500sdlcpSendSigDelay, cdx6500sdlcpRNRInFrames=cdx6500sdlcpRNRInFrames, cdx6500sdlcsQDMOutFrames=cdx6500sdlcsQDMOutFrames, cdx6500sdlcsXIDNullOutFrames=cdx6500sdlcsXIDNullOutFrames, cdx6500sdlcsXID0OutFrames=cdx6500sdlcsXID0OutFrames, cdx6500sdlcsQSSOutFrames=cdx6500sdlcsQSSOutFrames, cdx6500sdlcsREJOutFrames=cdx6500sdlcsREJOutFrames, cdx6500sdlcpHighSpeedElectricalInterfaceOption=cdx6500sdlcpHighSpeedElectricalInterfaceOption, cdx6500StatProtocolGroup=cdx6500StatProtocolGroup, cdx6500sdlcsFrameWinSize=cdx6500sdlcsFrameWinSize, codex=codex, cdx6500sdlcsMaxCallAttempts=cdx6500sdlcsMaxCallAttempts, cdx6500sdlcsQDMInFrames=cdx6500sdlcsQDMInFrames, cdx6500PCTSDLCPortEntry=cdx6500PCTSDLCPortEntry, cdx6500sdlcpRDInFrames=cdx6500sdlcpRDInFrames, cdx6500sdlcsCharInTotal=cdx6500sdlcsCharInTotal, cdx6500sdlcpFrameInTotal=cdx6500sdlcpFrameInTotal, cdx6500sdlcsRROutFrames=cdx6500sdlcsRROutFrames, cdx6500sdlcsQRSInFrames=cdx6500sdlcsQRSInFrames, cdx6500sdlcsBillingFlag=cdx6500sdlcsBillingFlag, cdx6500sdlcpUPOutFrames=cdx6500sdlcpUPOutFrames, cdx6500sdlcsReconnectTimeout=cdx6500sdlcsReconnectTimeout, cdx6500sdlcsQRRInTotal=cdx6500sdlcsQRRInTotal, cdx6500sdlcpTxCoding=cdx6500sdlcpTxCoding, cdx6500sdlcsCharsOutPerSec=cdx6500sdlcsCharsOutPerSec, cdx6500sdlcsDISCOutFrames=cdx6500sdlcsDISCOutFrames, cdx6500sdlcsQRDInFrames=cdx6500sdlcsQRDInFrames, cdx6500ContSDLCStationEntry=cdx6500ContSDLCStationEntry, cdx6500sdlcsSNRMOutFrames=cdx6500sdlcsSNRMOutFrames, cdx6500ContSDLCStationTable=cdx6500ContSDLCStationTable, cdx6500sdlcsNRNumber=cdx6500sdlcsNRNumber, cdx6500sdlcsQTESTInFrames=cdx6500sdlcsQTESTInFrames, cdx6500sdlcsDISCInFrames=cdx6500sdlcsDISCInFrames, cdx6500sdlcsDMOutFrames=cdx6500sdlcsDMOutFrames, cdx6500sdlcpUtilizationOut=cdx6500sdlcpUtilizationOut, cdx6500sdlcpCfgPortNum=cdx6500sdlcpCfgPortNum, cdx6500sdlcsRDInFrames=cdx6500sdlcsRDInFrames, cdx6500sdlcsDMInFrames=cdx6500sdlcsDMInFrames, cdx6500sdlcpPortAddress=cdx6500sdlcpPortAddress, cdx6500sdlcsVSNumber=cdx6500sdlcsVSNumber, cdx6500PSTStationProtocolGroup=cdx6500PSTStationProtocolGroup, cdx6500sdlcsOptions=cdx6500sdlcsOptions, cdx6500sdlcsQRDOutFrames=cdx6500sdlcsQRDOutFrames, cdx6500sdlcpXIDNullInFrames=cdx6500sdlcpXIDNullInFrames, cdx6500PPSTSDLCPortTable=cdx6500PPSTSDLCPortTable, cdx6500sdlcsTESTOutFrames=cdx6500sdlcsTESTOutFrames, cdx6500ContSDLC=cdx6500ContSDLC, cdx6500sdlcpRRInFrames=cdx6500sdlcpRRInFrames, cdx6500SPSTSDLCStationTable=cdx6500SPSTSDLCStationTable, cdx6500sdlcpXIDInFrames=cdx6500sdlcpXIDInFrames, cdx6500=cdx6500, cdx6500sdlcsFramesInPerSec=cdx6500sdlcsFramesInPerSec, cdx6500sdlcpCharOutTotal=cdx6500sdlcpCharOutTotal, cdx6500sdlcsAutocallMnem=cdx6500sdlcsAutocallMnem, cdx6500sdlcsStationID=cdx6500sdlcsStationID, cdx6500sdlcsXIDNullInFrames=cdx6500sdlcsXIDNullInFrames, cdxProductSpecific=cdxProductSpecific, cdx6500sdlcpFrameOutTotal=cdx6500sdlcpFrameOutTotal, cdx6500sdlcsStnSubaddress=cdx6500sdlcsStnSubaddress, cdx6500sdlcsQUAInFrames=cdx6500sdlcsQUAInFrames, cdx6500sdlcpLinkDowns=cdx6500sdlcpLinkDowns, cdx6500Statistics=cdx6500Statistics, cdx6500SPSTSDLCStationEntry=cdx6500SPSTSDLCStationEntry, cdx6500sdlcsQTESTOutFrames=cdx6500sdlcsQTESTOutFrames, cdx6500sdlcsCallTimer=cdx6500sdlcsCallTimer, cdx6500Controls=cdx6500Controls, cdx6500SPCTSDLCStationEntry=cdx6500SPCTSDLCStationEntry, cdx6500sdlcsContPortNum=cdx6500sdlcsContPortNum, cdx6500PPSTSDLCPortEntry=cdx6500PPSTSDLCPortEntry, cdx6500sdlcsUnsusWaitTimer=cdx6500sdlcsUnsusWaitTimer, cdx6500sdlcsContResetStnStats=cdx6500sdlcsContResetStnStats, cdx6500sdlcsQXIDInFrames=cdx6500sdlcsQXIDInFrames, cdx6500sdlcpXID1OutFrames=cdx6500sdlcpXID1OutFrames, cdx6500sdlcpXIDNullOutFrames=cdx6500sdlcpXIDNullOutFrames, cdx6500sdlcsStationAddr=cdx6500sdlcsStationAddr, cdx6500sdlcpNumControllers=cdx6500sdlcpNumControllers, cdx6500sdlcsXIDOutFrames=cdx6500sdlcsXIDOutFrames, cdx6500sdlcsStatsStationNum=cdx6500sdlcsStatsStationNum, cdx6500sdlcsUPInFrames=cdx6500sdlcsUPInFrames, cdx6500sdlcsPacketsQueued=cdx6500sdlcsPacketsQueued, cdx6500sdlcpMaxFrameSize=cdx6500sdlcpMaxFrameSize, cdx6500sdlcsTESTInFrames=cdx6500sdlcsTESTInFrames, cdx6500sdlcsContStationNum=cdx6500sdlcsContStationNum, cdx6500PCTStationProtocolGroup=cdx6500PCTStationProtocolGroup, cdx6500sdlcpTESTInFrames=cdx6500sdlcpTESTInFrames, cdx6500sdlcpElectricalInterfaceType=cdx6500sdlcpElectricalInterfaceType, cdx6500sdlcsQRSOutFrames=cdx6500sdlcsQRSOutFrames, cdx6500sdlcsReconnectLimit=cdx6500sdlcsReconnectLimit, cdx6500sdlcsCfgPortNum=cdx6500sdlcsCfgPortNum, cdx6500sdlcsRNRInFrames=cdx6500sdlcsRNRInFrames, cdx6500sdlcpCharsOutPerSec=cdx6500sdlcpCharsOutPerSec, cdx6500sdlcpDMOutFrames=cdx6500sdlcpDMOutFrames, cdx6500sdlcpClock=cdx6500sdlcpClock, cdx6500PCTPortProtocolGroup=cdx6500PCTPortProtocolGroup, cdx6500sdlcpUAOutFrames=cdx6500sdlcpUAOutFrames, cdx6500sdlcsREJInFrames=cdx6500sdlcsREJInFrames, cdx6500sdlcsXID3InFrames=cdx6500sdlcsXID3InFrames, cdx6500sdlcpCharsInPerSec=cdx6500sdlcpCharsInPerSec, cdx6500sdlcsVRNumber=cdx6500sdlcsVRNumber, cdx6500sdlcpCharInTotal=cdx6500sdlcpCharInTotal, cdx6500sdlcsUtilizationIn=cdx6500sdlcsUtilizationIn, cdx6500sdlcpRROutFrames=cdx6500sdlcpRROutFrames, cdx6500sdlcsContDisableStation=cdx6500sdlcsContDisableStation, cdx6500sdlcsIdleTimer=cdx6500sdlcsIdleTimer, cdx6500sdlcpV24ElectricalInterfaceOption=cdx6500sdlcpV24ElectricalInterfaceOption, cdx6500sdlcpPortStatus=cdx6500sdlcpPortStatus, cdx6500sdlcsFRMRInFrames=cdx6500sdlcsFRMRInFrames, cdx6500sdlcsCharsInPerSec=cdx6500sdlcsCharsInPerSec, cdx6500sdlcsFramesOutPerSec=cdx6500sdlcsFramesOutPerSec, cdx6500sdlcpFRMRInFrames=cdx6500sdlcpFRMRInFrames, cdx6500sdlcpPortOptions=cdx6500sdlcpPortOptions, cdx6500SPCTSDLCStationTable=cdx6500SPCTSDLCStationTable, cdx6500sdlcpDISCOutFrames=cdx6500sdlcpDISCOutFrames, cdx6500PCTSDLCPortTable=cdx6500PCTSDLCPortTable, cdx6500sdlcsCUG=cdx6500sdlcsCUG, cdx6500sdlcsUAInFrames=cdx6500sdlcsUAInFrames, cdx6500sdlcsRNROutFrames=cdx6500sdlcsRNROutFrames, cdx6500sdlcpXID3InFrames=cdx6500sdlcpXID3InFrames, cdx6500sdlcpXID3OutFrames=cdx6500sdlcpXID3OutFrames, cdx6500sdlcpRNROutFrames=cdx6500sdlcpRNROutFrames, cdx6500sdlcpDISCInFrames=cdx6500sdlcpDISCInFrames, cdx6500sdlcpSubType=cdx6500sdlcpSubType, cdx6500sdlcsGroupAddress=cdx6500sdlcsGroupAddress, cdx6500sdlcpPortSpeed=cdx6500sdlcpPortSpeed, cdx6500sdlcpREJOutFrames=cdx6500sdlcpREJOutFrames, cdx6500sdlcsProtectionLevel=cdx6500sdlcsProtectionLevel, cdx6500sdlcsQSSInFrames=cdx6500sdlcsQSSInFrames, cdx6500sdlcpHPADResponseDelay=cdx6500sdlcpHPADResponseDelay, cdx6500sdlcsTrafficPriority=cdx6500sdlcsTrafficPriority, cdx6500Configuration=cdx6500Configuration, DisplayString=DisplayString, cdx6500sdlcsFRMROutFrames=cdx6500sdlcsFRMROutFrames, cdx6500sdlcsFrameOutTotal=cdx6500sdlcsFrameOutTotal, cdx6500sdlcsQFRMRInFrames=cdx6500sdlcsQFRMRInFrames, cdx6500sdlcpLineType=cdx6500sdlcpLineType, cdx6500sdlcsQSMInFrames=cdx6500sdlcsQSMInFrames, cdx6500sdlcpStatsPortNum=cdx6500sdlcpStatsPortNum, cdx6500sdlcpXID1InFrames=cdx6500sdlcpXID1InFrames, cdx6500sdlcpSNRMInFrames=cdx6500sdlcpSNRMInFrames, cdx6500sdlcsQSMOutFrames=cdx6500sdlcsQSMOutFrames)
