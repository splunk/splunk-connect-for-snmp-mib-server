#
# PySNMP MIB module RADLAN-ARPSPOOFING-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/RADLAN-ARPSPOOFING-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 20:36:42 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, ObjectIdentifier, Integer = mibBuilder.importSymbols("ASN1", "OctetString", "ObjectIdentifier", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsUnion, ValueRangeConstraint, ConstraintsIntersection, SingleValueConstraint, ValueSizeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsUnion", "ValueRangeConstraint", "ConstraintsIntersection", "SingleValueConstraint", "ValueSizeConstraint")
InterfaceIndex, InterfaceIndexOrZero = mibBuilder.importSymbols("IF-MIB", "InterfaceIndex", "InterfaceIndexOrZero")
rnd, = mibBuilder.importSymbols("RADLAN-MIB", "rnd")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
ModuleIdentity, ObjectIdentity, Counter32, MibScalar, MibTable, MibTableRow, MibTableColumn, Unsigned32, Integer32, Bits, NotificationType, Gauge32, TimeTicks, MibIdentifier, Counter64, iso, IpAddress = mibBuilder.importSymbols("SNMPv2-SMI", "ModuleIdentity", "ObjectIdentity", "Counter32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Unsigned32", "Integer32", "Bits", "NotificationType", "Gauge32", "TimeTicks", "MibIdentifier", "Counter64", "iso", "IpAddress")
RowStatus, TextualConvention, DisplayString, PhysAddress = mibBuilder.importSymbols("SNMPv2-TC", "RowStatus", "TextualConvention", "DisplayString", "PhysAddress")
rlArpSpoofing = ModuleIdentity((1, 3, 6, 1, 4, 1, 89, 60))
rlArpSpoofing.setRevisions(('2007-01-02 00:00',))
if mibBuilder.loadTexts: rlArpSpoofing.setLastUpdated('200701020000Z')
if mibBuilder.loadTexts: rlArpSpoofing.setOrganization('Radlan - a MARVELL company. Marvell Semiconductor, Inc.')
rlArpSpoofingMibVersion = MibScalar((1, 3, 6, 1, 4, 1, 89, 60, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rlArpSpoofingMibVersion.setStatus('current')
rlArpSpoofingTable = MibTable((1, 3, 6, 1, 4, 1, 89, 60, 2), )
if mibBuilder.loadTexts: rlArpSpoofingTable.setStatus('current')
rlArpSpoofingEntry = MibTableRow((1, 3, 6, 1, 4, 1, 89, 60, 2, 1), ).setIndexNames((0, "RADLAN-ARPSPOOFING-MIB", "rlArpSpoofingIfIndex"), (0, "RADLAN-ARPSPOOFING-MIB", "rlArpSpoofingLocalIpAddr"))
if mibBuilder.loadTexts: rlArpSpoofingEntry.setStatus('current')
rlArpSpoofingIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 60, 2, 1, 1), InterfaceIndex()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: rlArpSpoofingIfIndex.setStatus('current')
rlArpSpoofingLocalIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 60, 2, 1, 2), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: rlArpSpoofingLocalIpAddr.setStatus('current')
rlArpSpoofingMacAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 60, 2, 1, 3), PhysAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: rlArpSpoofingMacAddr.setStatus('current')
rlArpSpoofingRemoteIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 60, 2, 1, 4), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: rlArpSpoofingRemoteIpAddr.setStatus('current')
rlArpSpoofingOutPhysIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 60, 2, 1, 5), InterfaceIndexOrZero()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: rlArpSpoofingOutPhysIfIndex.setStatus('current')
rlArpSpoofingStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 60, 2, 1, 6), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: rlArpSpoofingStatus.setStatus('current')
mibBuilder.exportSymbols("RADLAN-ARPSPOOFING-MIB", rlArpSpoofingEntry=rlArpSpoofingEntry, rlArpSpoofingStatus=rlArpSpoofingStatus, rlArpSpoofingMibVersion=rlArpSpoofingMibVersion, rlArpSpoofingIfIndex=rlArpSpoofingIfIndex, PYSNMP_MODULE_ID=rlArpSpoofing, rlArpSpoofing=rlArpSpoofing, rlArpSpoofingMacAddr=rlArpSpoofingMacAddr, rlArpSpoofingLocalIpAddr=rlArpSpoofingLocalIpAddr, rlArpSpoofingTable=rlArpSpoofingTable, rlArpSpoofingRemoteIpAddr=rlArpSpoofingRemoteIpAddr, rlArpSpoofingOutPhysIfIndex=rlArpSpoofingOutPhysIfIndex)
