#
# PySNMP MIB module SCSI-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/SCSI-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 20:53:14 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, ObjectIdentifier, Integer = mibBuilder.importSymbols("ASN1", "OctetString", "ObjectIdentifier", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueSizeConstraint, SingleValueConstraint, ValueRangeConstraint, ConstraintsUnion, ConstraintsIntersection = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueSizeConstraint", "SingleValueConstraint", "ValueRangeConstraint", "ConstraintsUnion", "ConstraintsIntersection")
SnmpAdminString, = mibBuilder.importSymbols("SNMP-FRAMEWORK-MIB", "SnmpAdminString")
ModuleCompliance, NotificationGroup, ObjectGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup", "ObjectGroup")
ModuleIdentity, Counter32, iso, MibScalar, MibTable, MibTableRow, MibTableColumn, MibIdentifier, NotificationType, Bits, IpAddress, ObjectIdentity, mib_2, Integer32, TimeTicks, Gauge32, Counter64, Unsigned32 = mibBuilder.importSymbols("SNMPv2-SMI", "ModuleIdentity", "Counter32", "iso", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "MibIdentifier", "NotificationType", "Bits", "IpAddress", "ObjectIdentity", "mib-2", "Integer32", "TimeTicks", "Gauge32", "Counter64", "Unsigned32")
AutonomousType, TimeStamp, StorageType, TruthValue, RowPointer, RowStatus, DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "AutonomousType", "TimeStamp", "StorageType", "TruthValue", "RowPointer", "RowStatus", "DisplayString", "TextualConvention")
scsiMIB = ModuleIdentity((1, 3, 6, 1, 2, 1, 139))
scsiMIB.setRevisions(('2006-03-30 00:00',))
if mibBuilder.loadTexts: scsiMIB.setLastUpdated('200603300000Z')
if mibBuilder.loadTexts: scsiMIB.setOrganization('IETF')
class ScsiLUN(TextualConvention, OctetString):
    reference = 'SCSI Architecture Model-2 (SAM-2), ANSI INCITS 366-2003, T10 Project 1157-D, 12 September 2002 - Annex A [SAM2]'
    status = 'current'
    subtypeSpec = OctetString.subtypeSpec + ConstraintsUnion(ValueSizeConstraint(2, 2), ValueSizeConstraint(8, 8), )
class ScsiIndexValue(TextualConvention, Unsigned32):
    status = 'current'
    displayHint = 'd'
    subtypeSpec = Unsigned32.subtypeSpec + ValueRangeConstraint(1, 4294967295)

class ScsiPortIndexValueOrZero(TextualConvention, Unsigned32):
    status = 'current'
    displayHint = 'd'
    subtypeSpec = Unsigned32.subtypeSpec + ValueRangeConstraint(0, 4294967295)

class ScsiIndexValueOrZero(TextualConvention, Unsigned32):
    status = 'current'
    displayHint = 'd'
    subtypeSpec = Unsigned32.subtypeSpec + ValueRangeConstraint(0, 4294967295)

class ScsiIdentifier(TextualConvention, OctetString):
    reference = 'SCSI Architecture Model-2 (SAM-2), ANSI INCITS 366-2003, T10 Project 1157-D, 12 September 2002 - Annex A [SAM2]'
    status = 'current'
    subtypeSpec = OctetString.subtypeSpec + ValueSizeConstraint(0, 262)

class ScsiName(TextualConvention, OctetString):
    reference = 'SCSI Architecture Model-2 (SAM-2), ANSI INCITS 366-2003, T10 Project 1157-D, 12 September 2002 - Annex A [SAM2]'
    status = 'current'
    subtypeSpec = OctetString.subtypeSpec + ValueSizeConstraint(0, 262)

class ScsiLuNameOrZero(TextualConvention, OctetString):
    reference = 'SCSI Architecture Model-2 (SAM-2), ANSI INCITS 366-2003, T10 Project 1157-D, 12 September 2002 - Annex A [SAM2]'
    status = 'current'
    subtypeSpec = OctetString.subtypeSpec + ConstraintsUnion(ValueSizeConstraint(0, 0), ValueSizeConstraint(8, 8), )
class ScsiDeviceOrPort(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3))
    namedValues = NamedValues(("device", 1), ("port", 2), ("other", 3))

class ScsiIdCodeSet(TextualConvention, Unsigned32):
    reference = 'ANSI - SCSI Primary Commands - 2 (SPC-2), ANSI INCITS 351-2001, 11 July 2001 Chapter 8: section 8.4.4, Vital Product Data Parameters [SPC2]'
    status = 'current'
    displayHint = 'd'
    subtypeSpec = Unsigned32.subtypeSpec + ValueRangeConstraint(0, 15)

class ScsiIdAssociation(TextualConvention, Unsigned32):
    reference = 'ANSI - SCSI Primary Commands - 2 (SPC-2), ANSI INCITS 351-2001, 11 July 2001 Chapter 8: section 8.4.4, Vital Product Data Parameters [SPC2]'
    status = 'current'
    displayHint = 'd'
    subtypeSpec = Unsigned32.subtypeSpec + ValueRangeConstraint(0, 3)

class ScsiIdType(TextualConvention, Unsigned32):
    reference = 'ANSI - SCSI Primary Commands - 2 (SPC-2), ANSI INCITS 351-2001, 11 July 2001 Chapter 8: section 8.4.4, Vital Product Data Parameters [SPC2]'
    status = 'current'
    displayHint = 'd'
    subtypeSpec = Unsigned32.subtypeSpec + ValueRangeConstraint(0, 15)

class ScsiIdValue(TextualConvention, OctetString):
    reference = 'ANSI - SCSI Primary Commands - 2 (SPC-2), ANSI INCITS 351-2001, 11 July 2001 Chapter 8: section 8.4.4, Vital Product Data Parameters [SPC2]'
    status = 'current'
    subtypeSpec = OctetString.subtypeSpec + ValueSizeConstraint(0, 255)

class ScsiHrSWInstalledIndexOrZero(TextualConvention, Integer32):
    reference = 'hrSWInstalledTable is defined in the Host Resources MIB, [RFC2790].'
    status = 'current'
    displayHint = 'd'
    subtypeSpec = Integer32.subtypeSpec + ValueRangeConstraint(0, 2147483647)

scsiNotifications = MibIdentifier((1, 3, 6, 1, 2, 1, 139, 0))
scsiAdmin = MibIdentifier((1, 3, 6, 1, 2, 1, 139, 1))
scsiObjects = MibIdentifier((1, 3, 6, 1, 2, 1, 139, 2))
scsiConformance = MibIdentifier((1, 3, 6, 1, 2, 1, 139, 3))
scsiTransportTypes = MibIdentifier((1, 3, 6, 1, 2, 1, 139, 1, 1))
scsiGeneral = MibIdentifier((1, 3, 6, 1, 2, 1, 139, 2, 1))
scsiInitiatorDevice = MibIdentifier((1, 3, 6, 1, 2, 1, 139, 2, 2))
scsiTargetDevice = MibIdentifier((1, 3, 6, 1, 2, 1, 139, 2, 3))
scsiLogicalUnit = MibIdentifier((1, 3, 6, 1, 2, 1, 139, 2, 4))
scsiTransportOther = ObjectIdentity((1, 3, 6, 1, 2, 1, 139, 1, 1, 1))
if mibBuilder.loadTexts: scsiTransportOther.setStatus('current')
scsiTransportSPI = ObjectIdentity((1, 3, 6, 1, 2, 1, 139, 1, 1, 2))
if mibBuilder.loadTexts: scsiTransportSPI.setStatus('current')
scsiTransportFCP = ObjectIdentity((1, 3, 6, 1, 2, 1, 139, 1, 1, 3))
if mibBuilder.loadTexts: scsiTransportFCP.setStatus('current')
scsiTransportSRP = ObjectIdentity((1, 3, 6, 1, 2, 1, 139, 1, 1, 4))
if mibBuilder.loadTexts: scsiTransportSRP.setStatus('current')
scsiTransportISCSI = ObjectIdentity((1, 3, 6, 1, 2, 1, 139, 1, 1, 5))
if mibBuilder.loadTexts: scsiTransportISCSI.setStatus('current')
scsiTransportSBP = ObjectIdentity((1, 3, 6, 1, 2, 1, 139, 1, 1, 6))
if mibBuilder.loadTexts: scsiTransportSBP.setStatus('current')
scsiTransportSAS = ObjectIdentity((1, 3, 6, 1, 2, 1, 139, 1, 1, 7))
if mibBuilder.loadTexts: scsiTransportSAS.setStatus('current')
scsiInstanceTable = MibTable((1, 3, 6, 1, 2, 1, 139, 2, 1, 1), )
if mibBuilder.loadTexts: scsiInstanceTable.setStatus('current')
scsiInstanceEntry = MibTableRow((1, 3, 6, 1, 2, 1, 139, 2, 1, 1, 1), ).setIndexNames((0, "SCSI-MIB", "scsiInstIndex"))
if mibBuilder.loadTexts: scsiInstanceEntry.setStatus('current')
scsiInstIndex = MibTableColumn((1, 3, 6, 1, 2, 1, 139, 2, 1, 1, 1, 1), ScsiIndexValue())
if mibBuilder.loadTexts: scsiInstIndex.setStatus('current')
scsiInstAlias = MibTableColumn((1, 3, 6, 1, 2, 1, 139, 2, 1, 1, 1, 2), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 79))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: scsiInstAlias.setStatus('current')
scsiInstSoftwareIndex = MibTableColumn((1, 3, 6, 1, 2, 1, 139, 2, 1, 1, 1, 3), ScsiHrSWInstalledIndexOrZero()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scsiInstSoftwareIndex.setStatus('current')
scsiInstVendorVersion = MibTableColumn((1, 3, 6, 1, 2, 1, 139, 2, 1, 1, 1, 4), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scsiInstVendorVersion.setStatus('current')
scsiInstScsiNotificationsEnable = MibTableColumn((1, 3, 6, 1, 2, 1, 139, 2, 1, 1, 1, 5), TruthValue().clone('true')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: scsiInstScsiNotificationsEnable.setStatus('current')
scsiInstStorageType = MibTableColumn((1, 3, 6, 1, 2, 1, 139, 2, 1, 1, 1, 6), StorageType().clone('nonVolatile')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: scsiInstStorageType.setStatus('current')
scsiDeviceTable = MibTable((1, 3, 6, 1, 2, 1, 139, 2, 1, 2), )
if mibBuilder.loadTexts: scsiDeviceTable.setStatus('current')
scsiDeviceEntry = MibTableRow((1, 3, 6, 1, 2, 1, 139, 2, 1, 2, 1), ).setIndexNames((0, "SCSI-MIB", "scsiInstIndex"), (0, "SCSI-MIB", "scsiDeviceIndex"))
if mibBuilder.loadTexts: scsiDeviceEntry.setStatus('current')
scsiDeviceIndex = MibTableColumn((1, 3, 6, 1, 2, 1, 139, 2, 1, 2, 1, 1), ScsiIndexValue())
if mibBuilder.loadTexts: scsiDeviceIndex.setStatus('current')
scsiDeviceAlias = MibTableColumn((1, 3, 6, 1, 2, 1, 139, 2, 1, 2, 1, 2), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 79))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: scsiDeviceAlias.setStatus('current')
scsiDeviceRole = MibTableColumn((1, 3, 6, 1, 2, 1, 139, 2, 1, 2, 1, 3), Bits().clone(namedValues=NamedValues(("target", 0), ("initiator", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: scsiDeviceRole.setStatus('current')
scsiDevicePortNumber = MibTableColumn((1, 3, 6, 1, 2, 1, 139, 2, 1, 2, 1, 4), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scsiDevicePortNumber.setStatus('current')
scsiPortTable = MibTable((1, 3, 6, 1, 2, 1, 139, 2, 1, 3), )
if mibBuilder.loadTexts: scsiPortTable.setStatus('current')
scsiPortEntry = MibTableRow((1, 3, 6, 1, 2, 1, 139, 2, 1, 3, 1), ).setIndexNames((0, "SCSI-MIB", "scsiInstIndex"), (0, "SCSI-MIB", "scsiDeviceIndex"), (0, "SCSI-MIB", "scsiPortIndex"))
if mibBuilder.loadTexts: scsiPortEntry.setStatus('current')
scsiPortIndex = MibTableColumn((1, 3, 6, 1, 2, 1, 139, 2, 1, 3, 1, 1), ScsiIndexValue())
if mibBuilder.loadTexts: scsiPortIndex.setStatus('current')
scsiPortRole = MibTableColumn((1, 3, 6, 1, 2, 1, 139, 2, 1, 3, 1, 2), Bits().clone(namedValues=NamedValues(("target", 0), ("initiator", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: scsiPortRole.setStatus('current')
scsiPortTransportPtr = MibTableColumn((1, 3, 6, 1, 2, 1, 139, 2, 1, 3, 1, 3), RowPointer()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scsiPortTransportPtr.setStatus('current')
scsiPortBusyStatuses = MibTableColumn((1, 3, 6, 1, 2, 1, 139, 2, 1, 3, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scsiPortBusyStatuses.setStatus('current')
scsiTransportTable = MibTable((1, 3, 6, 1, 2, 1, 139, 2, 1, 5), )
if mibBuilder.loadTexts: scsiTransportTable.setStatus('current')
scsiTransportEntry = MibTableRow((1, 3, 6, 1, 2, 1, 139, 2, 1, 5, 1), ).setIndexNames((0, "SCSI-MIB", "scsiInstIndex"), (0, "SCSI-MIB", "scsiDeviceIndex"), (0, "SCSI-MIB", "scsiTransportIndex"))
if mibBuilder.loadTexts: scsiTransportEntry.setStatus('current')
scsiTransportIndex = MibTableColumn((1, 3, 6, 1, 2, 1, 139, 2, 1, 5, 1, 1), ScsiIndexValue())
if mibBuilder.loadTexts: scsiTransportIndex.setStatus('current')
scsiTransportType = MibTableColumn((1, 3, 6, 1, 2, 1, 139, 2, 1, 5, 1, 2), AutonomousType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scsiTransportType.setStatus('current')
scsiTransportPointer = MibTableColumn((1, 3, 6, 1, 2, 1, 139, 2, 1, 5, 1, 3), RowPointer()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scsiTransportPointer.setStatus('current')
scsiTransportDevName = MibTableColumn((1, 3, 6, 1, 2, 1, 139, 2, 1, 5, 1, 4), ScsiName()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scsiTransportDevName.setStatus('current')
scsiIntrDevTable = MibTable((1, 3, 6, 1, 2, 1, 139, 2, 2, 1), )
if mibBuilder.loadTexts: scsiIntrDevTable.setStatus('current')
scsiIntrDevEntry = MibTableRow((1, 3, 6, 1, 2, 1, 139, 2, 2, 1, 1), ).setIndexNames((0, "SCSI-MIB", "scsiInstIndex"), (0, "SCSI-MIB", "scsiDeviceIndex"))
if mibBuilder.loadTexts: scsiIntrDevEntry.setStatus('current')
scsiIntrDevTgtAccessMode = MibTableColumn((1, 3, 6, 1, 2, 1, 139, 2, 2, 1, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("unknown", 1), ("autoEnable", 2), ("manualEnable", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: scsiIntrDevTgtAccessMode.setStatus('current')
scsiIntrDevOutResets = MibTableColumn((1, 3, 6, 1, 2, 1, 139, 2, 2, 1, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scsiIntrDevOutResets.setStatus('current')
scsiIntrPortTable = MibTable((1, 3, 6, 1, 2, 1, 139, 2, 2, 2), )
if mibBuilder.loadTexts: scsiIntrPortTable.setStatus('current')
scsiIntrPortEntry = MibTableRow((1, 3, 6, 1, 2, 1, 139, 2, 2, 2, 1), ).setIndexNames((0, "SCSI-MIB", "scsiInstIndex"), (0, "SCSI-MIB", "scsiDeviceIndex"), (0, "SCSI-MIB", "scsiPortIndex"))
if mibBuilder.loadTexts: scsiIntrPortEntry.setStatus('current')
scsiIntrPortName = MibTableColumn((1, 3, 6, 1, 2, 1, 139, 2, 2, 2, 1, 1), ScsiName()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scsiIntrPortName.setStatus('current')
scsiIntrPortIdentifier = MibTableColumn((1, 3, 6, 1, 2, 1, 139, 2, 2, 2, 1, 2), ScsiIdentifier()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scsiIntrPortIdentifier.setStatus('current')
scsiIntrPortOutCommands = MibTableColumn((1, 3, 6, 1, 2, 1, 139, 2, 2, 2, 1, 3), Counter32()).setUnits('commands').setMaxAccess("readonly")
if mibBuilder.loadTexts: scsiIntrPortOutCommands.setStatus('current')
scsiIntrPortWrittenMegaBytes = MibTableColumn((1, 3, 6, 1, 2, 1, 139, 2, 2, 2, 1, 4), Counter32()).setUnits('Megabytes').setMaxAccess("readonly")
if mibBuilder.loadTexts: scsiIntrPortWrittenMegaBytes.setStatus('current')
scsiIntrPortReadMegaBytes = MibTableColumn((1, 3, 6, 1, 2, 1, 139, 2, 2, 2, 1, 5), Counter32()).setUnits('Megabytes').setMaxAccess("readonly")
if mibBuilder.loadTexts: scsiIntrPortReadMegaBytes.setStatus('current')
scsiIntrPortHSOutCommands = MibTableColumn((1, 3, 6, 1, 2, 1, 139, 2, 2, 2, 1, 6), Counter64()).setUnits('commands').setMaxAccess("readonly")
if mibBuilder.loadTexts: scsiIntrPortHSOutCommands.setStatus('current')
scsiRemoteTgtDev = MibIdentifier((1, 3, 6, 1, 2, 1, 139, 2, 2, 3))
scsiDscTgtTable = MibTable((1, 3, 6, 1, 2, 1, 139, 2, 2, 3, 1), )
if mibBuilder.loadTexts: scsiDscTgtTable.setStatus('current')
scsiDscTgtEntry = MibTableRow((1, 3, 6, 1, 2, 1, 139, 2, 2, 3, 1, 1), ).setIndexNames((0, "SCSI-MIB", "scsiInstIndex"), (0, "SCSI-MIB", "scsiDeviceIndex"), (0, "SCSI-MIB", "scsiDscTgtIntrPortIndex"), (0, "SCSI-MIB", "scsiDscTgtIndex"))
if mibBuilder.loadTexts: scsiDscTgtEntry.setStatus('current')
scsiDscTgtIntrPortIndex = MibTableColumn((1, 3, 6, 1, 2, 1, 139, 2, 2, 3, 1, 1, 1), ScsiPortIndexValueOrZero())
if mibBuilder.loadTexts: scsiDscTgtIntrPortIndex.setStatus('current')
scsiDscTgtIndex = MibTableColumn((1, 3, 6, 1, 2, 1, 139, 2, 2, 3, 1, 1, 2), ScsiIndexValue())
if mibBuilder.loadTexts: scsiDscTgtIndex.setStatus('current')
scsiDscTgtDevOrPort = MibTableColumn((1, 3, 6, 1, 2, 1, 139, 2, 2, 3, 1, 1, 3), ScsiDeviceOrPort()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: scsiDscTgtDevOrPort.setStatus('current')
scsiDscTgtName = MibTableColumn((1, 3, 6, 1, 2, 1, 139, 2, 2, 3, 1, 1, 4), ScsiName()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: scsiDscTgtName.setStatus('current')
scsiDscTgtConfigured = MibTableColumn((1, 3, 6, 1, 2, 1, 139, 2, 2, 3, 1, 1, 5), TruthValue().clone('true')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: scsiDscTgtConfigured.setStatus('current')
scsiDscTgtDiscovered = MibTableColumn((1, 3, 6, 1, 2, 1, 139, 2, 2, 3, 1, 1, 6), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scsiDscTgtDiscovered.setStatus('current')
scsiDscTgtInCommands = MibTableColumn((1, 3, 6, 1, 2, 1, 139, 2, 2, 3, 1, 1, 7), Counter32()).setUnits('commands').setMaxAccess("readonly")
if mibBuilder.loadTexts: scsiDscTgtInCommands.setStatus('current')
scsiDscTgtWrittenMegaBytes = MibTableColumn((1, 3, 6, 1, 2, 1, 139, 2, 2, 3, 1, 1, 8), Counter32()).setUnits('Megabytes').setMaxAccess("readonly")
if mibBuilder.loadTexts: scsiDscTgtWrittenMegaBytes.setStatus('current')
scsiDscTgtReadMegaBytes = MibTableColumn((1, 3, 6, 1, 2, 1, 139, 2, 2, 3, 1, 1, 9), Counter32()).setUnits('Megabytes').setMaxAccess("readonly")
if mibBuilder.loadTexts: scsiDscTgtReadMegaBytes.setStatus('current')
scsiDscTgtHSInCommands = MibTableColumn((1, 3, 6, 1, 2, 1, 139, 2, 2, 3, 1, 1, 10), Counter64()).setUnits('commands').setMaxAccess("readonly")
if mibBuilder.loadTexts: scsiDscTgtHSInCommands.setStatus('current')
scsiDscTgtLastCreation = MibTableColumn((1, 3, 6, 1, 2, 1, 139, 2, 2, 3, 1, 1, 11), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scsiDscTgtLastCreation.setStatus('current')
scsiDscTgtRowStatus = MibTableColumn((1, 3, 6, 1, 2, 1, 139, 2, 2, 3, 1, 1, 12), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: scsiDscTgtRowStatus.setStatus('current')
scsiDscLunTable = MibTable((1, 3, 6, 1, 2, 1, 139, 2, 2, 3, 2), )
if mibBuilder.loadTexts: scsiDscLunTable.setStatus('current')
scsiDscLunEntry = MibTableRow((1, 3, 6, 1, 2, 1, 139, 2, 2, 3, 2, 1), ).setIndexNames((0, "SCSI-MIB", "scsiInstIndex"), (0, "SCSI-MIB", "scsiDeviceIndex"), (0, "SCSI-MIB", "scsiDscTgtIntrPortIndex"), (0, "SCSI-MIB", "scsiDscTgtIndex"), (0, "SCSI-MIB", "scsiDscLunIndex"))
if mibBuilder.loadTexts: scsiDscLunEntry.setStatus('current')
scsiDscLunIndex = MibTableColumn((1, 3, 6, 1, 2, 1, 139, 2, 2, 3, 2, 1, 1), ScsiIndexValue())
if mibBuilder.loadTexts: scsiDscLunIndex.setStatus('current')
scsiDscLunLun = MibTableColumn((1, 3, 6, 1, 2, 1, 139, 2, 2, 3, 2, 1, 2), ScsiLUN()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scsiDscLunLun.setStatus('current')
scsiDscLunIdTable = MibTable((1, 3, 6, 1, 2, 1, 139, 2, 2, 3, 3), )
if mibBuilder.loadTexts: scsiDscLunIdTable.setStatus('current')
scsiDscLunIdEntry = MibTableRow((1, 3, 6, 1, 2, 1, 139, 2, 2, 3, 3, 1), ).setIndexNames((0, "SCSI-MIB", "scsiInstIndex"), (0, "SCSI-MIB", "scsiDeviceIndex"), (0, "SCSI-MIB", "scsiDscTgtIntrPortIndex"), (0, "SCSI-MIB", "scsiDscTgtIndex"), (0, "SCSI-MIB", "scsiDscLunIndex"), (0, "SCSI-MIB", "scsiDscLunIdIndex"))
if mibBuilder.loadTexts: scsiDscLunIdEntry.setStatus('current')
scsiDscLunIdIndex = MibTableColumn((1, 3, 6, 1, 2, 1, 139, 2, 2, 3, 3, 1, 1), ScsiIndexValue())
if mibBuilder.loadTexts: scsiDscLunIdIndex.setStatus('current')
scsiDscLunIdCodeSet = MibTableColumn((1, 3, 6, 1, 2, 1, 139, 2, 2, 3, 3, 1, 2), ScsiIdCodeSet()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scsiDscLunIdCodeSet.setStatus('current')
scsiDscLunIdAssociation = MibTableColumn((1, 3, 6, 1, 2, 1, 139, 2, 2, 3, 3, 1, 3), ScsiIdAssociation()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scsiDscLunIdAssociation.setStatus('current')
scsiDscLunIdType = MibTableColumn((1, 3, 6, 1, 2, 1, 139, 2, 2, 3, 3, 1, 4), ScsiIdType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scsiDscLunIdType.setStatus('current')
scsiDscLunIdValue = MibTableColumn((1, 3, 6, 1, 2, 1, 139, 2, 2, 3, 3, 1, 5), ScsiIdValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scsiDscLunIdValue.setStatus('current')
scsiAttTgtPortTable = MibTable((1, 3, 6, 1, 2, 1, 139, 2, 2, 3, 4), )
if mibBuilder.loadTexts: scsiAttTgtPortTable.setStatus('current')
scsiAttTgtPortEntry = MibTableRow((1, 3, 6, 1, 2, 1, 139, 2, 2, 3, 4, 1), ).setIndexNames((0, "SCSI-MIB", "scsiInstIndex"), (0, "SCSI-MIB", "scsiDeviceIndex"), (0, "SCSI-MIB", "scsiPortIndex"), (0, "SCSI-MIB", "scsiAttTgtPortIndex"))
if mibBuilder.loadTexts: scsiAttTgtPortEntry.setStatus('current')
scsiAttTgtPortIndex = MibTableColumn((1, 3, 6, 1, 2, 1, 139, 2, 2, 3, 4, 1, 1), ScsiIndexValue())
if mibBuilder.loadTexts: scsiAttTgtPortIndex.setStatus('current')
scsiAttTgtPortDscTgtIdx = MibTableColumn((1, 3, 6, 1, 2, 1, 139, 2, 2, 3, 4, 1, 2), ScsiIndexValueOrZero()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scsiAttTgtPortDscTgtIdx.setStatus('current')
scsiAttTgtPortName = MibTableColumn((1, 3, 6, 1, 2, 1, 139, 2, 2, 3, 4, 1, 3), ScsiName()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scsiAttTgtPortName.setStatus('current')
scsiAttTgtPortIdentifier = MibTableColumn((1, 3, 6, 1, 2, 1, 139, 2, 2, 3, 4, 1, 4), ScsiIdentifier()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scsiAttTgtPortIdentifier.setStatus('current')
scsiTgtDevTable = MibTable((1, 3, 6, 1, 2, 1, 139, 2, 3, 1), )
if mibBuilder.loadTexts: scsiTgtDevTable.setStatus('current')
scsiTgtDevEntry = MibTableRow((1, 3, 6, 1, 2, 1, 139, 2, 3, 1, 1), ).setIndexNames((0, "SCSI-MIB", "scsiInstIndex"), (0, "SCSI-MIB", "scsiDeviceIndex"))
if mibBuilder.loadTexts: scsiTgtDevEntry.setStatus('current')
scsiTgtDevNumberOfLUs = MibTableColumn((1, 3, 6, 1, 2, 1, 139, 2, 3, 1, 1, 1), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scsiTgtDevNumberOfLUs.setStatus('current')
scsiTgtDeviceStatus = MibTableColumn((1, 3, 6, 1, 2, 1, 139, 2, 3, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("unknown", 1), ("available", 2), ("broken", 3), ("readying", 4), ("abnormal", 5), ("nonAddrFailure", 6), ("nonAddrFailReadying", 7), ("nonAddrFailAbnormal", 8)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: scsiTgtDeviceStatus.setStatus('current')
scsiTgtDevNonAccessibleLUs = MibTableColumn((1, 3, 6, 1, 2, 1, 139, 2, 3, 1, 1, 3), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scsiTgtDevNonAccessibleLUs.setStatus('current')
scsiTgtDevResets = MibTableColumn((1, 3, 6, 1, 2, 1, 139, 2, 3, 1, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scsiTgtDevResets.setStatus('current')
scsiTgtPortTable = MibTable((1, 3, 6, 1, 2, 1, 139, 2, 3, 2), )
if mibBuilder.loadTexts: scsiTgtPortTable.setStatus('current')
scsiTgtPortEntry = MibTableRow((1, 3, 6, 1, 2, 1, 139, 2, 3, 2, 1), ).setIndexNames((0, "SCSI-MIB", "scsiInstIndex"), (0, "SCSI-MIB", "scsiDeviceIndex"), (0, "SCSI-MIB", "scsiPortIndex"))
if mibBuilder.loadTexts: scsiTgtPortEntry.setStatus('current')
scsiTgtPortName = MibTableColumn((1, 3, 6, 1, 2, 1, 139, 2, 3, 2, 1, 1), ScsiName()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scsiTgtPortName.setStatus('current')
scsiTgtPortIdentifier = MibTableColumn((1, 3, 6, 1, 2, 1, 139, 2, 3, 2, 1, 2), ScsiIdentifier()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scsiTgtPortIdentifier.setStatus('current')
scsiTgtPortInCommands = MibTableColumn((1, 3, 6, 1, 2, 1, 139, 2, 3, 2, 1, 3), Counter32()).setUnits('commands').setMaxAccess("readonly")
if mibBuilder.loadTexts: scsiTgtPortInCommands.setStatus('current')
scsiTgtPortWrittenMegaBytes = MibTableColumn((1, 3, 6, 1, 2, 1, 139, 2, 3, 2, 1, 4), Counter32()).setUnits('Megabytes').setMaxAccess("readonly")
if mibBuilder.loadTexts: scsiTgtPortWrittenMegaBytes.setStatus('current')
scsiTgtPortReadMegaBytes = MibTableColumn((1, 3, 6, 1, 2, 1, 139, 2, 3, 2, 1, 5), Counter32()).setUnits('Megabytes').setMaxAccess("readonly")
if mibBuilder.loadTexts: scsiTgtPortReadMegaBytes.setStatus('current')
scsiTgtPortHSInCommands = MibTableColumn((1, 3, 6, 1, 2, 1, 139, 2, 3, 2, 1, 6), Counter64()).setUnits('commands').setMaxAccess("readonly")
if mibBuilder.loadTexts: scsiTgtPortHSInCommands.setStatus('current')
scsiRemoteIntrDev = MibIdentifier((1, 3, 6, 1, 2, 1, 139, 2, 3, 3))
scsiAuthorizedIntrTable = MibTable((1, 3, 6, 1, 2, 1, 139, 2, 3, 3, 1), )
if mibBuilder.loadTexts: scsiAuthorizedIntrTable.setStatus('current')
scsiAuthorizedIntrEntry = MibTableRow((1, 3, 6, 1, 2, 1, 139, 2, 3, 3, 1, 1), ).setIndexNames((0, "SCSI-MIB", "scsiInstIndex"), (0, "SCSI-MIB", "scsiDeviceIndex"), (0, "SCSI-MIB", "scsiAuthIntrTgtPortIndex"), (0, "SCSI-MIB", "scsiAuthIntrIndex"))
if mibBuilder.loadTexts: scsiAuthorizedIntrEntry.setStatus('current')
scsiAuthIntrTgtPortIndex = MibTableColumn((1, 3, 6, 1, 2, 1, 139, 2, 3, 3, 1, 1, 1), ScsiPortIndexValueOrZero())
if mibBuilder.loadTexts: scsiAuthIntrTgtPortIndex.setStatus('current')
scsiAuthIntrIndex = MibTableColumn((1, 3, 6, 1, 2, 1, 139, 2, 3, 3, 1, 1, 2), ScsiIndexValue())
if mibBuilder.loadTexts: scsiAuthIntrIndex.setStatus('current')
scsiAuthIntrDevOrPort = MibTableColumn((1, 3, 6, 1, 2, 1, 139, 2, 3, 3, 1, 1, 3), ScsiDeviceOrPort()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: scsiAuthIntrDevOrPort.setStatus('current')
scsiAuthIntrName = MibTableColumn((1, 3, 6, 1, 2, 1, 139, 2, 3, 3, 1, 1, 4), ScsiName()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: scsiAuthIntrName.setStatus('current')
scsiAuthIntrLunMapIndex = MibTableColumn((1, 3, 6, 1, 2, 1, 139, 2, 3, 3, 1, 1, 5), ScsiIndexValueOrZero()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: scsiAuthIntrLunMapIndex.setStatus('current')
scsiAuthIntrAttachedTimes = MibTableColumn((1, 3, 6, 1, 2, 1, 139, 2, 3, 3, 1, 1, 6), Counter32()).setUnits('Times').setMaxAccess("readonly")
if mibBuilder.loadTexts: scsiAuthIntrAttachedTimes.setStatus('current')
scsiAuthIntrOutCommands = MibTableColumn((1, 3, 6, 1, 2, 1, 139, 2, 3, 3, 1, 1, 7), Counter32()).setUnits('commands').setMaxAccess("readonly")
if mibBuilder.loadTexts: scsiAuthIntrOutCommands.setStatus('current')
scsiAuthIntrReadMegaBytes = MibTableColumn((1, 3, 6, 1, 2, 1, 139, 2, 3, 3, 1, 1, 8), Counter32()).setUnits('Megabytes').setMaxAccess("readonly")
if mibBuilder.loadTexts: scsiAuthIntrReadMegaBytes.setStatus('current')
scsiAuthIntrWrittenMegaBytes = MibTableColumn((1, 3, 6, 1, 2, 1, 139, 2, 3, 3, 1, 1, 9), Counter32()).setUnits('Megabytes').setMaxAccess("readonly")
if mibBuilder.loadTexts: scsiAuthIntrWrittenMegaBytes.setStatus('current')
scsiAuthIntrHSOutCommands = MibTableColumn((1, 3, 6, 1, 2, 1, 139, 2, 3, 3, 1, 1, 10), Counter64()).setUnits('commands').setMaxAccess("readonly")
if mibBuilder.loadTexts: scsiAuthIntrHSOutCommands.setStatus('current')
scsiAuthIntrLastCreation = MibTableColumn((1, 3, 6, 1, 2, 1, 139, 2, 3, 3, 1, 1, 11), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scsiAuthIntrLastCreation.setStatus('current')
scsiAuthIntrRowStatus = MibTableColumn((1, 3, 6, 1, 2, 1, 139, 2, 3, 3, 1, 1, 12), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: scsiAuthIntrRowStatus.setStatus('current')
scsiAttIntrPortTable = MibTable((1, 3, 6, 1, 2, 1, 139, 2, 3, 3, 2), )
if mibBuilder.loadTexts: scsiAttIntrPortTable.setStatus('current')
scsiAttIntrPortEntry = MibTableRow((1, 3, 6, 1, 2, 1, 139, 2, 3, 3, 2, 1), ).setIndexNames((0, "SCSI-MIB", "scsiInstIndex"), (0, "SCSI-MIB", "scsiDeviceIndex"), (0, "SCSI-MIB", "scsiPortIndex"), (0, "SCSI-MIB", "scsiAttIntrPortIndex"))
if mibBuilder.loadTexts: scsiAttIntrPortEntry.setStatus('current')
scsiAttIntrPortIndex = MibTableColumn((1, 3, 6, 1, 2, 1, 139, 2, 3, 3, 2, 1, 1), ScsiIndexValue())
if mibBuilder.loadTexts: scsiAttIntrPortIndex.setStatus('current')
scsiAttIntrPortAuthIntrIdx = MibTableColumn((1, 3, 6, 1, 2, 1, 139, 2, 3, 3, 2, 1, 2), ScsiIndexValueOrZero()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scsiAttIntrPortAuthIntrIdx.setStatus('current')
scsiAttIntrPortName = MibTableColumn((1, 3, 6, 1, 2, 1, 139, 2, 3, 3, 2, 1, 3), ScsiName()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scsiAttIntrPortName.setStatus('current')
scsiAttIntrPortIdentifier = MibTableColumn((1, 3, 6, 1, 2, 1, 139, 2, 3, 3, 2, 1, 4), ScsiIdentifier()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scsiAttIntrPortIdentifier.setStatus('current')
scsiLuTable = MibTable((1, 3, 6, 1, 2, 1, 139, 2, 4, 1), )
if mibBuilder.loadTexts: scsiLuTable.setStatus('current')
scsiLuEntry = MibTableRow((1, 3, 6, 1, 2, 1, 139, 2, 4, 1, 1), ).setIndexNames((0, "SCSI-MIB", "scsiInstIndex"), (0, "SCSI-MIB", "scsiDeviceIndex"), (0, "SCSI-MIB", "scsiLuIndex"))
if mibBuilder.loadTexts: scsiLuEntry.setStatus('current')
scsiLuIndex = MibTableColumn((1, 3, 6, 1, 2, 1, 139, 2, 4, 1, 1, 1), ScsiIndexValue())
if mibBuilder.loadTexts: scsiLuIndex.setStatus('current')
scsiLuDefaultLun = MibTableColumn((1, 3, 6, 1, 2, 1, 139, 2, 4, 1, 1, 2), ScsiLUN()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scsiLuDefaultLun.setStatus('current')
scsiLuWwnName = MibTableColumn((1, 3, 6, 1, 2, 1, 139, 2, 4, 1, 1, 3), ScsiLuNameOrZero()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scsiLuWwnName.setStatus('current')
scsiLuVendorId = MibTableColumn((1, 3, 6, 1, 2, 1, 139, 2, 4, 1, 1, 4), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scsiLuVendorId.setStatus('current')
scsiLuProductId = MibTableColumn((1, 3, 6, 1, 2, 1, 139, 2, 4, 1, 1, 5), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scsiLuProductId.setStatus('current')
scsiLuRevisionId = MibTableColumn((1, 3, 6, 1, 2, 1, 139, 2, 4, 1, 1, 6), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scsiLuRevisionId.setStatus('current')
scsiLuPeripheralType = MibTableColumn((1, 3, 6, 1, 2, 1, 139, 2, 4, 1, 1, 7), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scsiLuPeripheralType.setStatus('current')
scsiLuStatus = MibTableColumn((1, 3, 6, 1, 2, 1, 139, 2, 4, 1, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("unknown", 1), ("available", 2), ("notAvailable", 3), ("broken", 4), ("readying", 5), ("abnormal", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: scsiLuStatus.setStatus('current')
scsiLuState = MibTableColumn((1, 3, 6, 1, 2, 1, 139, 2, 4, 1, 1, 9), Bits().clone(namedValues=NamedValues(("dataLost", 0), ("dynamicReconfigurationInProgress", 1), ("exposed", 2), ("fractionallyExposed", 3), ("partiallyExposed", 4), ("protectedRebuild", 5), ("protectionDisabled", 6), ("rebuild", 7), ("recalculate", 8), ("spareInUse", 9), ("verifyInProgress", 10)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: scsiLuState.setStatus('current')
scsiLuInCommands = MibTableColumn((1, 3, 6, 1, 2, 1, 139, 2, 4, 1, 1, 10), Counter32()).setUnits('commands').setMaxAccess("readonly")
if mibBuilder.loadTexts: scsiLuInCommands.setStatus('current')
scsiLuReadMegaBytes = MibTableColumn((1, 3, 6, 1, 2, 1, 139, 2, 4, 1, 1, 11), Counter32()).setUnits('Megabytes').setMaxAccess("readonly")
if mibBuilder.loadTexts: scsiLuReadMegaBytes.setStatus('current')
scsiLuWrittenMegaBytes = MibTableColumn((1, 3, 6, 1, 2, 1, 139, 2, 4, 1, 1, 12), Counter32()).setUnits('Megabytes').setMaxAccess("readonly")
if mibBuilder.loadTexts: scsiLuWrittenMegaBytes.setStatus('current')
scsiLuInResets = MibTableColumn((1, 3, 6, 1, 2, 1, 139, 2, 4, 1, 1, 13), Counter32()).setUnits('resets').setMaxAccess("readonly")
if mibBuilder.loadTexts: scsiLuInResets.setStatus('current')
scsiLuOutTaskSetFullStatus = MibTableColumn((1, 3, 6, 1, 2, 1, 139, 2, 4, 1, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scsiLuOutTaskSetFullStatus.setStatus('current')
scsiLuHSInCommands = MibTableColumn((1, 3, 6, 1, 2, 1, 139, 2, 4, 1, 1, 15), Counter64()).setUnits('commands').setMaxAccess("readonly")
if mibBuilder.loadTexts: scsiLuHSInCommands.setStatus('current')
scsiLuLastCreation = MibTableColumn((1, 3, 6, 1, 2, 1, 139, 2, 4, 1, 1, 16), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scsiLuLastCreation.setStatus('current')
scsiLuIdTable = MibTable((1, 3, 6, 1, 2, 1, 139, 2, 4, 2), )
if mibBuilder.loadTexts: scsiLuIdTable.setStatus('current')
scsiLuIdEntry = MibTableRow((1, 3, 6, 1, 2, 1, 139, 2, 4, 2, 1), ).setIndexNames((0, "SCSI-MIB", "scsiInstIndex"), (0, "SCSI-MIB", "scsiDeviceIndex"), (0, "SCSI-MIB", "scsiLuIndex"), (0, "SCSI-MIB", "scsiLuIdIndex"))
if mibBuilder.loadTexts: scsiLuIdEntry.setStatus('current')
scsiLuIdIndex = MibTableColumn((1, 3, 6, 1, 2, 1, 139, 2, 4, 2, 1, 1), ScsiIndexValue())
if mibBuilder.loadTexts: scsiLuIdIndex.setStatus('current')
scsiLuIdCodeSet = MibTableColumn((1, 3, 6, 1, 2, 1, 139, 2, 4, 2, 1, 2), ScsiIdCodeSet()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scsiLuIdCodeSet.setStatus('current')
scsiLuIdAssociation = MibTableColumn((1, 3, 6, 1, 2, 1, 139, 2, 4, 2, 1, 3), ScsiIdAssociation()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scsiLuIdAssociation.setStatus('current')
scsiLuIdType = MibTableColumn((1, 3, 6, 1, 2, 1, 139, 2, 4, 2, 1, 4), ScsiIdType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scsiLuIdType.setStatus('current')
scsiLuIdValue = MibTableColumn((1, 3, 6, 1, 2, 1, 139, 2, 4, 2, 1, 5), ScsiIdValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scsiLuIdValue.setStatus('current')
scsiLunMapTable = MibTable((1, 3, 6, 1, 2, 1, 139, 2, 4, 3), )
if mibBuilder.loadTexts: scsiLunMapTable.setStatus('current')
scsiLunMapEntry = MibTableRow((1, 3, 6, 1, 2, 1, 139, 2, 4, 3, 1), ).setIndexNames((0, "SCSI-MIB", "scsiInstIndex"), (0, "SCSI-MIB", "scsiDeviceIndex"), (0, "SCSI-MIB", "scsiLunMapIndex"), (0, "SCSI-MIB", "scsiLunMapLun"))
if mibBuilder.loadTexts: scsiLunMapEntry.setStatus('current')
scsiLunMapIndex = MibTableColumn((1, 3, 6, 1, 2, 1, 139, 2, 4, 3, 1, 1), ScsiIndexValue())
if mibBuilder.loadTexts: scsiLunMapIndex.setStatus('current')
scsiLunMapLun = MibTableColumn((1, 3, 6, 1, 2, 1, 139, 2, 4, 3, 1, 2), ScsiLUN())
if mibBuilder.loadTexts: scsiLunMapLun.setStatus('current')
scsiLunMapLuIndex = MibTableColumn((1, 3, 6, 1, 2, 1, 139, 2, 4, 3, 1, 3), ScsiIndexValue()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: scsiLunMapLuIndex.setStatus('current')
scsiLunMapRowStatus = MibTableColumn((1, 3, 6, 1, 2, 1, 139, 2, 4, 3, 1, 4), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: scsiLunMapRowStatus.setStatus('current')
scsiNotificationsPrefix = MibIdentifier((1, 3, 6, 1, 2, 1, 139, 0, 0))
scsiTgtDeviceStatusChanged = NotificationType((1, 3, 6, 1, 2, 1, 139, 0, 0, 1)).setObjects(("SCSI-MIB", "scsiTgtDeviceStatus"))
if mibBuilder.loadTexts: scsiTgtDeviceStatusChanged.setStatus('current')
scsiLuStatusChanged = NotificationType((1, 3, 6, 1, 2, 1, 139, 0, 0, 2)).setObjects(("SCSI-MIB", "scsiLuStatus"))
if mibBuilder.loadTexts: scsiLuStatusChanged.setStatus('current')
scsiCompliances = MibIdentifier((1, 3, 6, 1, 2, 1, 139, 3, 1))
scsiCompliance = ModuleCompliance((1, 3, 6, 1, 2, 1, 139, 3, 1, 1)).setObjects(("SCSI-MIB", "scsiDeviceGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    scsiCompliance = scsiCompliance.setStatus('current')
scsiGroups = MibIdentifier((1, 3, 6, 1, 2, 1, 139, 3, 2))
scsiDeviceGroup = ObjectGroup((1, 3, 6, 1, 2, 1, 139, 3, 2, 1)).setObjects(("SCSI-MIB", "scsiInstAlias"), ("SCSI-MIB", "scsiInstSoftwareIndex"), ("SCSI-MIB", "scsiInstVendorVersion"), ("SCSI-MIB", "scsiInstScsiNotificationsEnable"), ("SCSI-MIB", "scsiInstStorageType"), ("SCSI-MIB", "scsiDeviceAlias"), ("SCSI-MIB", "scsiDeviceRole"), ("SCSI-MIB", "scsiDevicePortNumber"), ("SCSI-MIB", "scsiPortRole"), ("SCSI-MIB", "scsiPortTransportPtr"), ("SCSI-MIB", "scsiTransportType"), ("SCSI-MIB", "scsiTransportPointer"), ("SCSI-MIB", "scsiTransportDevName"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    scsiDeviceGroup = scsiDeviceGroup.setStatus('current')
scsiInitiatorDeviceGroup = ObjectGroup((1, 3, 6, 1, 2, 1, 139, 3, 2, 2)).setObjects(("SCSI-MIB", "scsiIntrDevTgtAccessMode"), ("SCSI-MIB", "scsiIntrPortName"), ("SCSI-MIB", "scsiIntrPortIdentifier"), ("SCSI-MIB", "scsiAttTgtPortDscTgtIdx"), ("SCSI-MIB", "scsiAttTgtPortName"), ("SCSI-MIB", "scsiAttTgtPortIdentifier"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    scsiInitiatorDeviceGroup = scsiInitiatorDeviceGroup.setStatus('current')
scsiDiscoveryGroup = ObjectGroup((1, 3, 6, 1, 2, 1, 139, 3, 2, 3)).setObjects(("SCSI-MIB", "scsiDscTgtDevOrPort"), ("SCSI-MIB", "scsiDscTgtName"), ("SCSI-MIB", "scsiDscTgtConfigured"), ("SCSI-MIB", "scsiDscTgtDiscovered"), ("SCSI-MIB", "scsiDscTgtRowStatus"), ("SCSI-MIB", "scsiDscTgtLastCreation"), ("SCSI-MIB", "scsiDscLunLun"), ("SCSI-MIB", "scsiDscLunIdCodeSet"), ("SCSI-MIB", "scsiDscLunIdAssociation"), ("SCSI-MIB", "scsiDscLunIdType"), ("SCSI-MIB", "scsiDscLunIdValue"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    scsiDiscoveryGroup = scsiDiscoveryGroup.setStatus('current')
scsiTargetDeviceGroup = ObjectGroup((1, 3, 6, 1, 2, 1, 139, 3, 2, 4)).setObjects(("SCSI-MIB", "scsiTgtDevNumberOfLUs"), ("SCSI-MIB", "scsiTgtDeviceStatus"), ("SCSI-MIB", "scsiTgtDevNonAccessibleLUs"), ("SCSI-MIB", "scsiTgtPortName"), ("SCSI-MIB", "scsiTgtPortIdentifier"), ("SCSI-MIB", "scsiAttIntrPortAuthIntrIdx"), ("SCSI-MIB", "scsiAttIntrPortName"), ("SCSI-MIB", "scsiAttIntrPortIdentifier"), ("SCSI-MIB", "scsiLuDefaultLun"), ("SCSI-MIB", "scsiLuWwnName"), ("SCSI-MIB", "scsiLuVendorId"), ("SCSI-MIB", "scsiLuProductId"), ("SCSI-MIB", "scsiLuRevisionId"), ("SCSI-MIB", "scsiLuPeripheralType"), ("SCSI-MIB", "scsiLuStatus"), ("SCSI-MIB", "scsiLuState"), ("SCSI-MIB", "scsiLuLastCreation"), ("SCSI-MIB", "scsiLuIdCodeSet"), ("SCSI-MIB", "scsiLuIdAssociation"), ("SCSI-MIB", "scsiLuIdType"), ("SCSI-MIB", "scsiLuIdValue"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    scsiTargetDeviceGroup = scsiTargetDeviceGroup.setStatus('current')
scsiLunMapGroup = ObjectGroup((1, 3, 6, 1, 2, 1, 139, 3, 2, 5)).setObjects(("SCSI-MIB", "scsiLunMapLuIndex"), ("SCSI-MIB", "scsiLunMapRowStatus"), ("SCSI-MIB", "scsiAuthIntrDevOrPort"), ("SCSI-MIB", "scsiAuthIntrName"), ("SCSI-MIB", "scsiAuthIntrLunMapIndex"), ("SCSI-MIB", "scsiAuthIntrLastCreation"), ("SCSI-MIB", "scsiAuthIntrRowStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    scsiLunMapGroup = scsiLunMapGroup.setStatus('current')
scsiTargetDevStatsGroup = ObjectGroup((1, 3, 6, 1, 2, 1, 139, 3, 2, 6)).setObjects(("SCSI-MIB", "scsiTgtDevResets"), ("SCSI-MIB", "scsiTgtPortInCommands"), ("SCSI-MIB", "scsiTgtPortWrittenMegaBytes"), ("SCSI-MIB", "scsiTgtPortReadMegaBytes"), ("SCSI-MIB", "scsiLuInCommands"), ("SCSI-MIB", "scsiLuReadMegaBytes"), ("SCSI-MIB", "scsiLuWrittenMegaBytes"), ("SCSI-MIB", "scsiLuInResets"), ("SCSI-MIB", "scsiLuOutTaskSetFullStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    scsiTargetDevStatsGroup = scsiTargetDevStatsGroup.setStatus('current')
scsiTargetDevHSStatsGroup = ObjectGroup((1, 3, 6, 1, 2, 1, 139, 3, 2, 7)).setObjects(("SCSI-MIB", "scsiTgtPortHSInCommands"), ("SCSI-MIB", "scsiLuHSInCommands"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    scsiTargetDevHSStatsGroup = scsiTargetDevHSStatsGroup.setStatus('current')
scsiLunMapStatsGroup = ObjectGroup((1, 3, 6, 1, 2, 1, 139, 3, 2, 8)).setObjects(("SCSI-MIB", "scsiAuthIntrAttachedTimes"), ("SCSI-MIB", "scsiAuthIntrOutCommands"), ("SCSI-MIB", "scsiAuthIntrReadMegaBytes"), ("SCSI-MIB", "scsiAuthIntrWrittenMegaBytes"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    scsiLunMapStatsGroup = scsiLunMapStatsGroup.setStatus('current')
scsiLunMapHSStatsGroup = ObjectGroup((1, 3, 6, 1, 2, 1, 139, 3, 2, 9)).setObjects(("SCSI-MIB", "scsiAuthIntrHSOutCommands"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    scsiLunMapHSStatsGroup = scsiLunMapHSStatsGroup.setStatus('current')
scsiInitiatorDevStatsGroup = ObjectGroup((1, 3, 6, 1, 2, 1, 139, 3, 2, 10)).setObjects(("SCSI-MIB", "scsiIntrDevOutResets"), ("SCSI-MIB", "scsiIntrPortOutCommands"), ("SCSI-MIB", "scsiIntrPortWrittenMegaBytes"), ("SCSI-MIB", "scsiIntrPortReadMegaBytes"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    scsiInitiatorDevStatsGroup = scsiInitiatorDevStatsGroup.setStatus('current')
scsiInitiatorDevHSStatsGroup = ObjectGroup((1, 3, 6, 1, 2, 1, 139, 3, 2, 11)).setObjects(("SCSI-MIB", "scsiIntrPortHSOutCommands"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    scsiInitiatorDevHSStatsGroup = scsiInitiatorDevHSStatsGroup.setStatus('current')
scsiDiscoveryStatsGroup = ObjectGroup((1, 3, 6, 1, 2, 1, 139, 3, 2, 12)).setObjects(("SCSI-MIB", "scsiDscTgtInCommands"), ("SCSI-MIB", "scsiDscTgtReadMegaBytes"), ("SCSI-MIB", "scsiDscTgtWrittenMegaBytes"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    scsiDiscoveryStatsGroup = scsiDiscoveryStatsGroup.setStatus('current')
scsiDiscoveryHSStatsGroup = ObjectGroup((1, 3, 6, 1, 2, 1, 139, 3, 2, 13)).setObjects(("SCSI-MIB", "scsiDscTgtHSInCommands"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    scsiDiscoveryHSStatsGroup = scsiDiscoveryHSStatsGroup.setStatus('current')
scsiDeviceStatGroup = ObjectGroup((1, 3, 6, 1, 2, 1, 139, 3, 2, 14)).setObjects(("SCSI-MIB", "scsiPortBusyStatuses"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    scsiDeviceStatGroup = scsiDeviceStatGroup.setStatus('current')
scsiTgtDevLuNotificationsGroup = NotificationGroup((1, 3, 6, 1, 2, 1, 139, 3, 2, 15)).setObjects(("SCSI-MIB", "scsiTgtDeviceStatusChanged"), ("SCSI-MIB", "scsiLuStatusChanged"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    scsiTgtDevLuNotificationsGroup = scsiTgtDevLuNotificationsGroup.setStatus('current')
mibBuilder.exportSymbols("SCSI-MIB", scsiLunMapTable=scsiLunMapTable, scsiAuthIntrWrittenMegaBytes=scsiAuthIntrWrittenMegaBytes, scsiInitiatorDevStatsGroup=scsiInitiatorDevStatsGroup, scsiDevicePortNumber=scsiDevicePortNumber, scsiDscTgtName=scsiDscTgtName, scsiConformance=scsiConformance, scsiNotificationsPrefix=scsiNotificationsPrefix, scsiLuIndex=scsiLuIndex, scsiAuthIntrRowStatus=scsiAuthIntrRowStatus, scsiPortRole=scsiPortRole, scsiDeviceRole=scsiDeviceRole, ScsiDeviceOrPort=ScsiDeviceOrPort, scsiIntrPortTable=scsiIntrPortTable, scsiTgtPortEntry=scsiTgtPortEntry, scsiLuIdValue=scsiLuIdValue, scsiTransportSRP=scsiTransportSRP, scsiLuRevisionId=scsiLuRevisionId, scsiIntrPortWrittenMegaBytes=scsiIntrPortWrittenMegaBytes, scsiTgtPortIdentifier=scsiTgtPortIdentifier, scsiDscTgtRowStatus=scsiDscTgtRowStatus, scsiDscLunIdAssociation=scsiDscLunIdAssociation, scsiCompliances=scsiCompliances, scsiTransportDevName=scsiTransportDevName, scsiIntrPortIdentifier=scsiIntrPortIdentifier, scsiLunMapIndex=scsiLunMapIndex, scsiPortEntry=scsiPortEntry, scsiAuthIntrIndex=scsiAuthIntrIndex, scsiTransportFCP=scsiTransportFCP, scsiAttIntrPortName=scsiAttIntrPortName, scsiTransportSAS=scsiTransportSAS, scsiDeviceEntry=scsiDeviceEntry, scsiDeviceGroup=scsiDeviceGroup, scsiDscLunLun=scsiDscLunLun, ScsiIdValue=ScsiIdValue, scsiLunMapLuIndex=scsiLunMapLuIndex, scsiTransportType=scsiTransportType, scsiLunMapGroup=scsiLunMapGroup, scsiTgtDevNumberOfLUs=scsiTgtDevNumberOfLUs, scsiDeviceTable=scsiDeviceTable, scsiCompliance=scsiCompliance, scsiObjects=scsiObjects, scsiTgtDeviceStatus=scsiTgtDeviceStatus, scsiIntrDevOutResets=scsiIntrDevOutResets, scsiAuthIntrReadMegaBytes=scsiAuthIntrReadMegaBytes, scsiLuDefaultLun=scsiLuDefaultLun, scsiTargetDevice=scsiTargetDevice, scsiDscTgtWrittenMegaBytes=scsiDscTgtWrittenMegaBytes, scsiTgtDevNonAccessibleLUs=scsiTgtDevNonAccessibleLUs, scsiLuPeripheralType=scsiLuPeripheralType, scsiInstanceTable=scsiInstanceTable, scsiDscLunEntry=scsiDscLunEntry, scsiTgtDevResets=scsiTgtDevResets, scsiLuOutTaskSetFullStatus=scsiLuOutTaskSetFullStatus, scsiAuthIntrHSOutCommands=scsiAuthIntrHSOutCommands, scsiDeviceIndex=scsiDeviceIndex, scsiAttTgtPortDscTgtIdx=scsiAttTgtPortDscTgtIdx, scsiLunMapStatsGroup=scsiLunMapStatsGroup, scsiIntrPortEntry=scsiIntrPortEntry, ScsiPortIndexValueOrZero=ScsiPortIndexValueOrZero, scsiRemoteIntrDev=scsiRemoteIntrDev, scsiDscLunIdCodeSet=scsiDscLunIdCodeSet, scsiLogicalUnit=scsiLogicalUnit, scsiTransportEntry=scsiTransportEntry, ScsiIdAssociation=ScsiIdAssociation, scsiMIB=scsiMIB, scsiAuthIntrDevOrPort=scsiAuthIntrDevOrPort, scsiLunMapHSStatsGroup=scsiLunMapHSStatsGroup, scsiPortIndex=scsiPortIndex, scsiDscLunIndex=scsiDscLunIndex, scsiDeviceStatGroup=scsiDeviceStatGroup, scsiDscLunIdType=scsiDscLunIdType, scsiNotifications=scsiNotifications, scsiIntrPortOutCommands=scsiIntrPortOutCommands, scsiIntrPortReadMegaBytes=scsiIntrPortReadMegaBytes, scsiAdmin=scsiAdmin, scsiAttTgtPortName=scsiAttTgtPortName, scsiLuWwnName=scsiLuWwnName, scsiDiscoveryStatsGroup=scsiDiscoveryStatsGroup, scsiLuWrittenMegaBytes=scsiLuWrittenMegaBytes, scsiLuInCommands=scsiLuInCommands, scsiTransportOther=scsiTransportOther, scsiInstIndex=scsiInstIndex, scsiInstSoftwareIndex=scsiInstSoftwareIndex, scsiLuStatusChanged=scsiLuStatusChanged, scsiLuIdTable=scsiLuIdTable, scsiDscTgtTable=scsiDscTgtTable, scsiDscLunIdEntry=scsiDscLunIdEntry, scsiTgtDevEntry=scsiTgtDevEntry, scsiIntrPortName=scsiIntrPortName, scsiLunMapEntry=scsiLunMapEntry, scsiInstanceEntry=scsiInstanceEntry, scsiAuthorizedIntrTable=scsiAuthorizedIntrTable, scsiDscTgtEntry=scsiDscTgtEntry, scsiTgtDevTable=scsiTgtDevTable, scsiAttTgtPortIdentifier=scsiAttTgtPortIdentifier, scsiLuIdAssociation=scsiLuIdAssociation, ScsiHrSWInstalledIndexOrZero=ScsiHrSWInstalledIndexOrZero, scsiTgtPortInCommands=scsiTgtPortInCommands, PYSNMP_MODULE_ID=scsiMIB, scsiDscLunIdValue=scsiDscLunIdValue, scsiTransportTypes=scsiTransportTypes, scsiLunMapRowStatus=scsiLunMapRowStatus, scsiDscTgtDiscovered=scsiDscTgtDiscovered, scsiAttTgtPortTable=scsiAttTgtPortTable, scsiAuthIntrAttachedTimes=scsiAuthIntrAttachedTimes, scsiLuIdType=scsiLuIdType, scsiDscLunIdIndex=scsiDscLunIdIndex, scsiLuIdIndex=scsiLuIdIndex, ScsiIdType=ScsiIdType, scsiTransportSBP=scsiTransportSBP, scsiLuReadMegaBytes=scsiLuReadMegaBytes, scsiLunMapLun=scsiLunMapLun, scsiRemoteTgtDev=scsiRemoteTgtDev, scsiAttIntrPortIndex=scsiAttIntrPortIndex, scsiTransportTable=scsiTransportTable, scsiLuEntry=scsiLuEntry, scsiInitiatorDevice=scsiInitiatorDevice, scsiAttIntrPortIdentifier=scsiAttIntrPortIdentifier, scsiDiscoveryHSStatsGroup=scsiDiscoveryHSStatsGroup, scsiTgtPortTable=scsiTgtPortTable, scsiAuthIntrLastCreation=scsiAuthIntrLastCreation, scsiInitiatorDeviceGroup=scsiInitiatorDeviceGroup, ScsiIndexValue=ScsiIndexValue, scsiGeneral=scsiGeneral, scsiIntrDevTable=scsiIntrDevTable, scsiDscLunTable=scsiDscLunTable, scsiTargetDevStatsGroup=scsiTargetDevStatsGroup, scsiTgtPortWrittenMegaBytes=scsiTgtPortWrittenMegaBytes, ScsiIdentifier=ScsiIdentifier, scsiTransportPointer=scsiTransportPointer, scsiDscTgtDevOrPort=scsiDscTgtDevOrPort, scsiDscTgtInCommands=scsiDscTgtInCommands, ScsiIndexValueOrZero=ScsiIndexValueOrZero, scsiDscTgtIntrPortIndex=scsiDscTgtIntrPortIndex, scsiPortTable=scsiPortTable, scsiDscTgtConfigured=scsiDscTgtConfigured, scsiIntrDevEntry=scsiIntrDevEntry, scsiAuthIntrName=scsiAuthIntrName, scsiDeviceAlias=scsiDeviceAlias, scsiLuTable=scsiLuTable, scsiDscTgtHSInCommands=scsiDscTgtHSInCommands, ScsiLUN=ScsiLUN, scsiTgtDeviceStatusChanged=scsiTgtDeviceStatusChanged, scsiTargetDeviceGroup=scsiTargetDeviceGroup, scsiPortBusyStatuses=scsiPortBusyStatuses, scsiLuIdEntry=scsiLuIdEntry, scsiAttIntrPortAuthIntrIdx=scsiAttIntrPortAuthIntrIdx, scsiLuProductId=scsiLuProductId, scsiInstStorageType=scsiInstStorageType, scsiLuHSInCommands=scsiLuHSInCommands, scsiTargetDevHSStatsGroup=scsiTargetDevHSStatsGroup, scsiAuthIntrLunMapIndex=scsiAuthIntrLunMapIndex, scsiInstVendorVersion=scsiInstVendorVersion, scsiDscTgtIndex=scsiDscTgtIndex, ScsiIdCodeSet=ScsiIdCodeSet, scsiAttTgtPortIndex=scsiAttTgtPortIndex, scsiDscLunIdTable=scsiDscLunIdTable, scsiAuthorizedIntrEntry=scsiAuthorizedIntrEntry, ScsiLuNameOrZero=ScsiLuNameOrZero, scsiAttIntrPortTable=scsiAttIntrPortTable, scsiIntrPortHSOutCommands=scsiIntrPortHSOutCommands, scsiDscTgtLastCreation=scsiDscTgtLastCreation, scsiTgtPortName=scsiTgtPortName, scsiLuVendorId=scsiLuVendorId, scsiInstScsiNotificationsEnable=scsiInstScsiNotificationsEnable, scsiTransportIndex=scsiTransportIndex, scsiAuthIntrTgtPortIndex=scsiAuthIntrTgtPortIndex, scsiAttIntrPortEntry=scsiAttIntrPortEntry, scsiInitiatorDevHSStatsGroup=scsiInitiatorDevHSStatsGroup, scsiLuState=scsiLuState, scsiTransportSPI=scsiTransportSPI, scsiLuLastCreation=scsiLuLastCreation, scsiAuthIntrOutCommands=scsiAuthIntrOutCommands, ScsiName=ScsiName, scsiTgtPortHSInCommands=scsiTgtPortHSInCommands, scsiTgtPortReadMegaBytes=scsiTgtPortReadMegaBytes, scsiLuStatus=scsiLuStatus, scsiDiscoveryGroup=scsiDiscoveryGroup, scsiPortTransportPtr=scsiPortTransportPtr, scsiTgtDevLuNotificationsGroup=scsiTgtDevLuNotificationsGroup, scsiAttTgtPortEntry=scsiAttTgtPortEntry, scsiDscTgtReadMegaBytes=scsiDscTgtReadMegaBytes, scsiTransportISCSI=scsiTransportISCSI, scsiLuInResets=scsiLuInResets, scsiGroups=scsiGroups, scsiIntrDevTgtAccessMode=scsiIntrDevTgtAccessMode, scsiInstAlias=scsiInstAlias, scsiLuIdCodeSet=scsiLuIdCodeSet)
