#
# PySNMP MIB module CISCO-SRP-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/CISCO-SRP-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 17:56:06 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, ObjectIdentifier, Integer = mibBuilder.importSymbols("ASN1", "OctetString", "ObjectIdentifier", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsIntersection, ValueRangeConstraint, ConstraintsUnion, ValueSizeConstraint, SingleValueConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsIntersection", "ValueRangeConstraint", "ConstraintsUnion", "ValueSizeConstraint", "SingleValueConstraint")
ciscoExperiment, = mibBuilder.importSymbols("CISCO-SMI", "ciscoExperiment")
ifIndex, = mibBuilder.importSymbols("IF-MIB", "ifIndex")
ModuleCompliance, NotificationGroup, ObjectGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup", "ObjectGroup")
ModuleIdentity, iso, NotificationType, MibIdentifier, Bits, IpAddress, Unsigned32, TimeTicks, MibScalar, MibTable, MibTableRow, MibTableColumn, Gauge32, ObjectIdentity, Counter32, Counter64, Integer32 = mibBuilder.importSymbols("SNMPv2-SMI", "ModuleIdentity", "iso", "NotificationType", "MibIdentifier", "Bits", "IpAddress", "Unsigned32", "TimeTicks", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Gauge32", "ObjectIdentity", "Counter32", "Counter64", "Integer32")
MacAddress, TruthValue, TextualConvention, DisplayString, TimeStamp = mibBuilder.importSymbols("SNMPv2-TC", "MacAddress", "TruthValue", "TextualConvention", "DisplayString", "TimeStamp")
ciscosrpMIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 9, 10, 60))
ciscosrpMIB.setRevisions(('2005-12-19 00:00', '2001-03-28 00:00', '2000-04-17 00:00',))
if mibBuilder.loadTexts: ciscosrpMIB.setLastUpdated('200512190000Z')
if mibBuilder.loadTexts: ciscosrpMIB.setOrganization('Cisco Systems, Inc.')
class InterfaceSide(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2))
    namedValues = NamedValues(("sideA", 1), ("sideB", 2))

class IpsMode(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))
    namedValues = NamedValues(("noRequest", 1), ("waitToRestore", 2), ("manualSwitch", 3), ("signalDegrade", 4), ("signalFail", 5), ("forcedSwitch", 6))

class PerfCurrentCount64(TextualConvention, Counter64):
    status = 'current'

class PerfIntervalCount64(TextualConvention, Counter64):
    status = 'current'

srpMAC = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 10, 60, 1))
srpRingCounters = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 10, 60, 2))
srpHostCounters = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 10, 60, 3))
srpErrorsCounters = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 10, 60, 4))
srpTrapsNotificationsPrefix = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 10, 60, 5))
srpTrapsNotifications = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 10, 60, 5, 0))
srpConformance = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 10, 60, 6))
srpGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 10, 60, 6, 1))
srpCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 10, 60, 6, 2))
srpIfTable = MibTable((1, 3, 6, 1, 4, 1, 9, 10, 60, 1, 1), )
if mibBuilder.loadTexts: srpIfTable.setStatus('current')
srpIfEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 10, 60, 1, 1, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: srpIfEntry.setStatus('current')
srpMACAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 60, 1, 1, 1, 1), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: srpMACAddress.setStatus('current')
srpPriorityThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 60, 1, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: srpPriorityThreshold.setStatus('current')
srpNodesOnTheRing = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 60, 1, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 128))).setMaxAccess("readonly")
if mibBuilder.loadTexts: srpNodesOnTheRing.setStatus('current')
srpIpsState = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 60, 1, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("idle", 1), ("passThrough", 2), ("wrapped", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: srpIpsState.setStatus('current')
srpIpsLockedOut = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 60, 1, 1, 1, 5), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: srpIpsLockedOut.setStatus('current')
srpIpsWaitToRestoreTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 60, 1, 1, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(10, 600))).setUnits('seconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: srpIpsWaitToRestoreTimer.setStatus('current')
srpIfTimeElapsed = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 60, 1, 1, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 900))).setUnits('seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: srpIfTimeElapsed.setStatus('current')
srpIfValidIntervals = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 60, 1, 1, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 96))).setMaxAccess("readonly")
if mibBuilder.loadTexts: srpIfValidIntervals.setStatus('current')
srpMACSideTable = MibTable((1, 3, 6, 1, 4, 1, 9, 10, 60, 1, 2), )
if mibBuilder.loadTexts: srpMACSideTable.setStatus('current')
srpMACSideEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 10, 60, 1, 2, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "CISCO-SRP-MIB", "srpMACInterfaceSide"))
if mibBuilder.loadTexts: srpMACSideEntry.setStatus('current')
srpMACInterfaceSide = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 60, 1, 2, 1, 1), InterfaceSide())
if mibBuilder.loadTexts: srpMACInterfaceSide.setStatus('current')
srpMACNeighborAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 60, 1, 2, 1, 2), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: srpMACNeighborAddress.setStatus('current')
srpMACSideWrapped = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 60, 1, 2, 1, 3), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: srpMACSideWrapped.setStatus('current')
srpMACIpsMgmtRequestedMode = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 60, 1, 2, 1, 4), IpsMode()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: srpMACIpsMgmtRequestedMode.setStatus('current')
srpMACIpsAutoDetectMode = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 60, 1, 2, 1, 5), IpsMode()).setMaxAccess("readonly")
if mibBuilder.loadTexts: srpMACIpsAutoDetectMode.setStatus('current')
srpMACIpsRemoteMode = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 60, 1, 2, 1, 6), IpsMode()).setMaxAccess("readonly")
if mibBuilder.loadTexts: srpMACIpsRemoteMode.setStatus('current')
srpMACIpsRemoteType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 60, 1, 2, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("shortPath", 1), ("longPath", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: srpMACIpsRemoteType.setStatus('current')
srpMACIpsActiveMode = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 60, 1, 2, 1, 8), IpsMode()).setMaxAccess("readonly")
if mibBuilder.loadTexts: srpMACIpsActiveMode.setStatus('current')
srpMACIpsWrapCounter = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 60, 1, 2, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: srpMACIpsWrapCounter.setStatus('current')
srpMACIpsLastWrapTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 60, 1, 2, 1, 10), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: srpMACIpsLastWrapTimeStamp.setStatus('current')
srpMACIpsLastUnWrapTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 60, 1, 2, 1, 11), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: srpMACIpsLastUnWrapTimeStamp.setStatus('current')
srpMACClockSourceMode = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 60, 1, 2, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("internal", 1), ("line", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: srpMACClockSourceMode.setStatus('current')
srpMACTopologyTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 60, 1, 2, 1, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 600))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: srpMACTopologyTimer.setStatus('current')
srpRingTopologyMapTable = MibTable((1, 3, 6, 1, 4, 1, 9, 10, 60, 1, 3), )
if mibBuilder.loadTexts: srpRingTopologyMapTable.setStatus('current')
srpRingTopologyMapEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 10, 60, 1, 3, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "CISCO-SRP-MIB", "srpNodeHopsNumber"))
if mibBuilder.loadTexts: srpRingTopologyMapEntry.setStatus('current')
srpNodeHopsNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 60, 1, 3, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 128)))
if mibBuilder.loadTexts: srpNodeHopsNumber.setStatus('current')
srpNodeMACAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 60, 1, 3, 1, 2), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: srpNodeMACAddress.setStatus('current')
srpNodeWrapped = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 60, 1, 3, 1, 3), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: srpNodeWrapped.setStatus('current')
srpNodeName = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 60, 1, 3, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: srpNodeName.setStatus('current')
srpMACCountersTable = MibTable((1, 3, 6, 1, 4, 1, 9, 10, 60, 1, 6), )
if mibBuilder.loadTexts: srpMACCountersTable.setStatus('deprecated')
srpMACCountersEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 10, 60, 1, 6, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: srpMACCountersEntry.setStatus('deprecated')
srpMACCountPktsBySourceFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 60, 1, 6, 1, 1), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: srpMACCountPktsBySourceFlag.setStatus('deprecated')
srpMACCountPktsBySourceAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 60, 1, 6, 1, 2), MacAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: srpMACCountPktsBySourceAddress.setStatus('deprecated')
srpMACSourceDiscontTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 60, 1, 6, 1, 3), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: srpMACSourceDiscontTimeStamp.setStatus('deprecated')
srpMACCountPktsBySource = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 60, 1, 6, 1, 4), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: srpMACCountPktsBySource.setStatus('deprecated')
srpMACCountPktsByDestinationFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 60, 1, 6, 1, 5), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: srpMACCountPktsByDestinationFlag.setStatus('deprecated')
srpMACCountPktsByDestAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 60, 1, 6, 1, 6), MacAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: srpMACCountPktsByDestAddress.setStatus('deprecated')
srpMACDestDiscontTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 60, 1, 6, 1, 7), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: srpMACDestDiscontTimeStamp.setStatus('deprecated')
srpMACCountPktsByDest = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 60, 1, 6, 1, 8), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: srpMACCountPktsByDest.setStatus('deprecated')
srpMACRejectPktsBySourceFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 60, 1, 6, 1, 9), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: srpMACRejectPktsBySourceFlag.setStatus('deprecated')
srpMACRejectPktsBySourceAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 60, 1, 6, 1, 10), MacAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: srpMACRejectPktsBySourceAddress.setStatus('deprecated')
srpMACRejectPktsByDestFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 60, 1, 6, 1, 11), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: srpMACRejectPktsByDestFlag.setStatus('deprecated')
srpMACRejectPktsByDestAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 60, 1, 6, 1, 12), MacAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: srpMACRejectPktsByDestAddress.setStatus('deprecated')
srpRingCountersCurrentTable = MibTable((1, 3, 6, 1, 4, 1, 9, 10, 60, 2, 1), )
if mibBuilder.loadTexts: srpRingCountersCurrentTable.setStatus('current')
srpRingCountersCurrentEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 10, 60, 2, 1, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "CISCO-SRP-MIB", "srpRingInterfaceSide"))
if mibBuilder.loadTexts: srpRingCountersCurrentEntry.setStatus('current')
srpRingInterfaceSide = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 60, 2, 1, 1, 1), InterfaceSide())
if mibBuilder.loadTexts: srpRingInterfaceSide.setStatus('current')
srpRingCurUcastLowPriPktsIn = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 60, 2, 1, 1, 2), PerfCurrentCount64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: srpRingCurUcastLowPriPktsIn.setStatus('current')
srpRingCurUcastLowPriOctetsIn = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 60, 2, 1, 1, 3), PerfCurrentCount64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: srpRingCurUcastLowPriOctetsIn.setStatus('current')
srpRingCurMcastLowPriPktsIn = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 60, 2, 1, 1, 4), PerfCurrentCount64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: srpRingCurMcastLowPriPktsIn.setStatus('current')
srpRingCurMcastLowPriOctetsIn = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 60, 2, 1, 1, 5), PerfCurrentCount64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: srpRingCurMcastLowPriOctetsIn.setStatus('current')
srpRingCurUcastHighPriPktsIn = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 60, 2, 1, 1, 6), PerfCurrentCount64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: srpRingCurUcastHighPriPktsIn.setStatus('current')
srpRingCurUcastHighPriOctetsIn = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 60, 2, 1, 1, 7), PerfCurrentCount64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: srpRingCurUcastHighPriOctetsIn.setStatus('current')
srpRingCurMcastHighPriPktsIn = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 60, 2, 1, 1, 8), PerfCurrentCount64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: srpRingCurMcastHighPriPktsIn.setStatus('current')
srpRingCurMcastHighPriOctetsIn = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 60, 2, 1, 1, 9), PerfCurrentCount64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: srpRingCurMcastHighPriOctetsIn.setStatus('current')
srpRingCurUcastLowPriPktsOut = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 60, 2, 1, 1, 10), PerfCurrentCount64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: srpRingCurUcastLowPriPktsOut.setStatus('current')
srpRingCurUcastLowPriOctetsOut = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 60, 2, 1, 1, 11), PerfCurrentCount64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: srpRingCurUcastLowPriOctetsOut.setStatus('current')
srpRingCurMcastLowPriPktsOut = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 60, 2, 1, 1, 12), PerfCurrentCount64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: srpRingCurMcastLowPriPktsOut.setStatus('current')
srpRingCurMcastLowPriOctetsOut = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 60, 2, 1, 1, 13), PerfCurrentCount64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: srpRingCurMcastLowPriOctetsOut.setStatus('current')
srpRingCurUcastHighPriPktsOut = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 60, 2, 1, 1, 14), PerfCurrentCount64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: srpRingCurUcastHighPriPktsOut.setStatus('current')
srpRingCurUcastHighPriOctetsOut = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 60, 2, 1, 1, 15), PerfCurrentCount64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: srpRingCurUcastHighPriOctetsOut.setStatus('current')
srpRingCurMcastHighPriPktsOut = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 60, 2, 1, 1, 16), PerfCurrentCount64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: srpRingCurMcastHighPriPktsOut.setStatus('current')
srpRingCurMcastHighPriOctetsOut = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 60, 2, 1, 1, 17), PerfCurrentCount64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: srpRingCurMcastHighPriOctetsOut.setStatus('current')
srpRingCountersIntervalTable = MibTable((1, 3, 6, 1, 4, 1, 9, 10, 60, 2, 2), )
if mibBuilder.loadTexts: srpRingCountersIntervalTable.setStatus('current')
srpRingCountersIntervalEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 10, 60, 2, 2, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "CISCO-SRP-MIB", "srpRingIntInterfaceSide"), (0, "CISCO-SRP-MIB", "srpRingIntNumber"))
if mibBuilder.loadTexts: srpRingCountersIntervalEntry.setStatus('current')
srpRingIntInterfaceSide = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 60, 2, 2, 1, 1), InterfaceSide())
if mibBuilder.loadTexts: srpRingIntInterfaceSide.setStatus('current')
srpRingIntNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 60, 2, 2, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 96)))
if mibBuilder.loadTexts: srpRingIntNumber.setStatus('current')
srpRingIntWrapCounter = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 60, 2, 2, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: srpRingIntWrapCounter.setStatus('current')
srpRingIntUcastLowPriPktsIn = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 60, 2, 2, 1, 4), PerfIntervalCount64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: srpRingIntUcastLowPriPktsIn.setStatus('current')
srpRingIntUcastLowPriOctetsIn = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 60, 2, 2, 1, 5), PerfIntervalCount64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: srpRingIntUcastLowPriOctetsIn.setStatus('current')
srpRingIntMcastLowPriPktsIn = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 60, 2, 2, 1, 6), PerfIntervalCount64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: srpRingIntMcastLowPriPktsIn.setStatus('current')
srpRingIntMcastLowPriOctetsIn = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 60, 2, 2, 1, 7), PerfIntervalCount64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: srpRingIntMcastLowPriOctetsIn.setStatus('current')
srpRingIntUcastHighPriPktsIn = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 60, 2, 2, 1, 8), PerfIntervalCount64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: srpRingIntUcastHighPriPktsIn.setStatus('current')
srpRingIntUcastHighPriOctetsIn = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 60, 2, 2, 1, 9), PerfIntervalCount64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: srpRingIntUcastHighPriOctetsIn.setStatus('current')
srpRingIntMcastHighPriPktsIn = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 60, 2, 2, 1, 10), PerfIntervalCount64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: srpRingIntMcastHighPriPktsIn.setStatus('current')
srpRingIntMcastHighPriOctetsIn = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 60, 2, 2, 1, 11), PerfIntervalCount64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: srpRingIntMcastHighPriOctetsIn.setStatus('current')
srpRingIntUcastLowPriPktsOut = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 60, 2, 2, 1, 12), PerfIntervalCount64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: srpRingIntUcastLowPriPktsOut.setStatus('current')
srpRingIntUcastLowPriOctetsOut = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 60, 2, 2, 1, 13), PerfIntervalCount64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: srpRingIntUcastLowPriOctetsOut.setStatus('current')
srpRingIntMcastLowPriPktsOut = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 60, 2, 2, 1, 14), PerfIntervalCount64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: srpRingIntMcastLowPriPktsOut.setStatus('current')
srpRingIntMcastLowPriOctetsOut = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 60, 2, 2, 1, 15), PerfIntervalCount64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: srpRingIntMcastLowPriOctetsOut.setStatus('current')
srpRingIntUcastHighPriPktsOut = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 60, 2, 2, 1, 16), PerfIntervalCount64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: srpRingIntUcastHighPriPktsOut.setStatus('current')
srpRingIntUcastHighPriOctetsOut = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 60, 2, 2, 1, 17), PerfIntervalCount64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: srpRingIntUcastHighPriOctetsOut.setStatus('current')
srpRingIntMcastHighPriPktsOut = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 60, 2, 2, 1, 18), PerfIntervalCount64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: srpRingIntMcastHighPriPktsOut.setStatus('current')
srpRingIntMcastHighPriOctetsOut = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 60, 2, 2, 1, 19), PerfIntervalCount64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: srpRingIntMcastHighPriOctetsOut.setStatus('current')
srpHostCountersCurrentTable = MibTable((1, 3, 6, 1, 4, 1, 9, 10, 60, 3, 1), )
if mibBuilder.loadTexts: srpHostCountersCurrentTable.setStatus('current')
srpHostCountersCurrentEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 10, 60, 3, 1, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "CISCO-SRP-MIB", "srpHostInterfaceSide"))
if mibBuilder.loadTexts: srpHostCountersCurrentEntry.setStatus('current')
srpHostInterfaceSide = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 60, 3, 1, 1, 1), InterfaceSide())
if mibBuilder.loadTexts: srpHostInterfaceSide.setStatus('current')
srpHostCurUcastLowPriPktsIn = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 60, 3, 1, 1, 2), PerfCurrentCount64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: srpHostCurUcastLowPriPktsIn.setStatus('current')
srpHostCurUcastLowPriOctetsIn = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 60, 3, 1, 1, 3), PerfCurrentCount64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: srpHostCurUcastLowPriOctetsIn.setStatus('current')
srpHostCurMcastLowPriPktsIn = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 60, 3, 1, 1, 4), PerfCurrentCount64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: srpHostCurMcastLowPriPktsIn.setStatus('current')
srpHostCurMcastLowPriOctetsIn = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 60, 3, 1, 1, 5), PerfCurrentCount64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: srpHostCurMcastLowPriOctetsIn.setStatus('current')
srpHostCurUcastHighPriPktsIn = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 60, 3, 1, 1, 6), PerfCurrentCount64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: srpHostCurUcastHighPriPktsIn.setStatus('current')
srpHostCurUcastHighPriOctetsIn = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 60, 3, 1, 1, 7), PerfCurrentCount64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: srpHostCurUcastHighPriOctetsIn.setStatus('current')
srpHostCurMcastHighPriPktsIn = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 60, 3, 1, 1, 8), PerfCurrentCount64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: srpHostCurMcastHighPriPktsIn.setStatus('current')
srpHostCurMcastHighPriOctetsIn = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 60, 3, 1, 1, 9), PerfCurrentCount64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: srpHostCurMcastHighPriOctetsIn.setStatus('current')
srpHostCurUcastLowPriPktsOut = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 60, 3, 1, 1, 10), PerfCurrentCount64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: srpHostCurUcastLowPriPktsOut.setStatus('current')
srpHostCurUcastLowPriOctetsOut = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 60, 3, 1, 1, 11), PerfCurrentCount64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: srpHostCurUcastLowPriOctetsOut.setStatus('current')
srpHostCurMcastLowPriPktsOut = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 60, 3, 1, 1, 12), PerfCurrentCount64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: srpHostCurMcastLowPriPktsOut.setStatus('current')
srpHostCurMcastLowPriOctetsOut = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 60, 3, 1, 1, 13), PerfCurrentCount64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: srpHostCurMcastLowPriOctetsOut.setStatus('current')
srpHostCurUcastHighPriPktsOut = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 60, 3, 1, 1, 14), PerfCurrentCount64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: srpHostCurUcastHighPriPktsOut.setStatus('current')
srpHostCurUcastHighPriOctetsOut = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 60, 3, 1, 1, 15), PerfCurrentCount64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: srpHostCurUcastHighPriOctetsOut.setStatus('current')
srpHostCurMcastHighPriPktsOut = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 60, 3, 1, 1, 16), PerfCurrentCount64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: srpHostCurMcastHighPriPktsOut.setStatus('current')
srpHostCurMcastHighPriOctetsOut = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 60, 3, 1, 1, 17), PerfCurrentCount64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: srpHostCurMcastHighPriOctetsOut.setStatus('current')
srpHostCountersIntervalTable = MibTable((1, 3, 6, 1, 4, 1, 9, 10, 60, 3, 2), )
if mibBuilder.loadTexts: srpHostCountersIntervalTable.setStatus('current')
srpHostCountersIntervalEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 10, 60, 3, 2, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "CISCO-SRP-MIB", "srpHostIntInterfaceSide"), (0, "CISCO-SRP-MIB", "srpHostIntNumber"))
if mibBuilder.loadTexts: srpHostCountersIntervalEntry.setStatus('current')
srpHostIntInterfaceSide = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 60, 3, 2, 1, 1), InterfaceSide())
if mibBuilder.loadTexts: srpHostIntInterfaceSide.setStatus('current')
srpHostIntNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 60, 3, 2, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 96)))
if mibBuilder.loadTexts: srpHostIntNumber.setStatus('current')
srpHostIntUcastLowPriPktsIn = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 60, 3, 2, 1, 3), PerfIntervalCount64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: srpHostIntUcastLowPriPktsIn.setStatus('current')
srpHostIntUcastLowPriOctetsIn = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 60, 3, 2, 1, 4), PerfIntervalCount64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: srpHostIntUcastLowPriOctetsIn.setStatus('current')
srpHostIntMcastLowPriPktsIn = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 60, 3, 2, 1, 5), PerfIntervalCount64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: srpHostIntMcastLowPriPktsIn.setStatus('current')
srpHostIntMcastLowPriOctetsIn = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 60, 3, 2, 1, 6), PerfIntervalCount64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: srpHostIntMcastLowPriOctetsIn.setStatus('current')
srpHostIntUcastHighPriPktsIn = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 60, 3, 2, 1, 7), PerfIntervalCount64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: srpHostIntUcastHighPriPktsIn.setStatus('current')
srpHostIntUcastHighPriOctetsIn = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 60, 3, 2, 1, 8), PerfIntervalCount64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: srpHostIntUcastHighPriOctetsIn.setStatus('current')
srpHostIntMcastHighPriPktsIn = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 60, 3, 2, 1, 9), PerfIntervalCount64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: srpHostIntMcastHighPriPktsIn.setStatus('current')
srpHostIntMcastHighPriOctetsIn = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 60, 3, 2, 1, 10), PerfIntervalCount64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: srpHostIntMcastHighPriOctetsIn.setStatus('current')
srpHostIntUcastLowPriPktsOut = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 60, 3, 2, 1, 11), PerfIntervalCount64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: srpHostIntUcastLowPriPktsOut.setStatus('current')
srpHostIntUcastLowPriOctetsOut = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 60, 3, 2, 1, 12), PerfIntervalCount64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: srpHostIntUcastLowPriOctetsOut.setStatus('current')
srpHostIntMcastLowPriPktsOut = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 60, 3, 2, 1, 13), PerfIntervalCount64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: srpHostIntMcastLowPriPktsOut.setStatus('current')
srpHostIntMcastLowPriOctetsOut = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 60, 3, 2, 1, 14), PerfIntervalCount64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: srpHostIntMcastLowPriOctetsOut.setStatus('current')
srpHostIntUcastHighPriPktsOut = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 60, 3, 2, 1, 15), PerfIntervalCount64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: srpHostIntUcastHighPriPktsOut.setStatus('current')
srpHostIntUcastHighPriOctetsOut = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 60, 3, 2, 1, 16), PerfIntervalCount64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: srpHostIntUcastHighPriOctetsOut.setStatus('current')
srpHostIntMcastHighPriPktsOut = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 60, 3, 2, 1, 17), PerfIntervalCount64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: srpHostIntMcastHighPriPktsOut.setStatus('current')
srpHostIntMcastHighPriOctetsOut = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 60, 3, 2, 1, 18), PerfIntervalCount64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: srpHostIntMcastHighPriOctetsOut.setStatus('current')
srpErrorsCountersCurrentTable = MibTable((1, 3, 6, 1, 4, 1, 9, 10, 60, 4, 1), )
if mibBuilder.loadTexts: srpErrorsCountersCurrentTable.setStatus('deprecated')
srpErrorsCountersCurrentEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 10, 60, 4, 1, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "CISCO-SRP-MIB", "srpErrorsInterfaceSide"))
if mibBuilder.loadTexts: srpErrorsCountersCurrentEntry.setStatus('deprecated')
srpErrorsInterfaceSide = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 60, 4, 1, 1, 1), InterfaceSide())
if mibBuilder.loadTexts: srpErrorsInterfaceSide.setStatus('deprecated')
srpRingCurRxErrorsDataParity = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 60, 4, 1, 1, 2), PerfCurrentCount64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: srpRingCurRxErrorsDataParity.setStatus('deprecated')
srpRingCurRxErrorsShortPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 60, 4, 1, 1, 3), PerfCurrentCount64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: srpRingCurRxErrorsShortPackets.setStatus('deprecated')
srpRingCurRxErrorsGiantPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 60, 4, 1, 1, 4), PerfCurrentCount64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: srpRingCurRxErrorsGiantPackets.setStatus('deprecated')
srpRingCurRxErrorsSideBadPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 60, 4, 1, 1, 5), PerfCurrentCount64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: srpRingCurRxErrorsSideBadPackets.setStatus('deprecated')
srpRingCurRxErrorsCRC = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 60, 4, 1, 1, 6), PerfCurrentCount64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: srpRingCurRxErrorsCRC.setStatus('deprecated')
srpHostCurRxErrorsDataParity = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 60, 4, 1, 1, 7), PerfCurrentCount64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: srpHostCurRxErrorsDataParity.setStatus('deprecated')
srpHostCurRxErrorsShortPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 60, 4, 1, 1, 8), PerfCurrentCount64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: srpHostCurRxErrorsShortPackets.setStatus('deprecated')
srpHostCurRxErrorsGiantPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 60, 4, 1, 1, 9), PerfCurrentCount64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: srpHostCurRxErrorsGiantPackets.setStatus('deprecated')
srpHostCurRxErrorsSideBadPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 60, 4, 1, 1, 10), PerfCurrentCount64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: srpHostCurRxErrorsSideBadPackets.setStatus('deprecated')
srpErrorsCountersIntervalTable = MibTable((1, 3, 6, 1, 4, 1, 9, 10, 60, 4, 2), )
if mibBuilder.loadTexts: srpErrorsCountersIntervalTable.setStatus('deprecated')
srpErrorsCountersIntervalEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 10, 60, 4, 2, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "CISCO-SRP-MIB", "srpErrorsIntervalInterfaceSide"), (0, "CISCO-SRP-MIB", "srpErrorsIntervalNumber"))
if mibBuilder.loadTexts: srpErrorsCountersIntervalEntry.setStatus('deprecated')
srpErrorsIntervalInterfaceSide = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 60, 4, 2, 1, 1), InterfaceSide())
if mibBuilder.loadTexts: srpErrorsIntervalInterfaceSide.setStatus('deprecated')
srpErrorsIntervalNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 60, 4, 2, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 96)))
if mibBuilder.loadTexts: srpErrorsIntervalNumber.setStatus('deprecated')
srpRingIntRxErrorsDataParity = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 60, 4, 2, 1, 3), PerfIntervalCount64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: srpRingIntRxErrorsDataParity.setStatus('deprecated')
srpRingIntRxErrorsShortPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 60, 4, 2, 1, 4), PerfIntervalCount64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: srpRingIntRxErrorsShortPackets.setStatus('deprecated')
srpRingIntRxErrorsGiantPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 60, 4, 2, 1, 5), PerfIntervalCount64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: srpRingIntRxErrorsGiantPackets.setStatus('deprecated')
srpRingIntRxErrorsSideBadPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 60, 4, 2, 1, 6), PerfIntervalCount64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: srpRingIntRxErrorsSideBadPackets.setStatus('deprecated')
srpRingIntRxErrorsCRC = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 60, 4, 2, 1, 7), PerfIntervalCount64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: srpRingIntRxErrorsCRC.setStatus('deprecated')
srpHostIntRxErrorsDataParity = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 60, 4, 2, 1, 8), PerfIntervalCount64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: srpHostIntRxErrorsDataParity.setStatus('deprecated')
srpHostIntRxErrorsShortPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 60, 4, 2, 1, 9), PerfIntervalCount64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: srpHostIntRxErrorsShortPackets.setStatus('deprecated')
srpHostIntRxErrorsGiantPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 60, 4, 2, 1, 10), PerfIntervalCount64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: srpHostIntRxErrorsGiantPackets.setStatus('deprecated')
srpHostIntRxErrorsSideBadPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 60, 4, 2, 1, 11), PerfIntervalCount64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: srpHostIntRxErrorsSideBadPackets.setStatus('deprecated')
srpErrCntCurrTable = MibTable((1, 3, 6, 1, 4, 1, 9, 10, 60, 4, 3), )
if mibBuilder.loadTexts: srpErrCntCurrTable.setStatus('current')
srpErrCntCurrEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 10, 60, 4, 3, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "CISCO-SRP-MIB", "srpErrCntCurrInterfaceSide"))
if mibBuilder.loadTexts: srpErrCntCurrEntry.setStatus('current')
srpErrCntCurrInterfaceSide = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 60, 4, 3, 1, 1), InterfaceSide())
if mibBuilder.loadTexts: srpErrCntCurrInterfaceSide.setStatus('current')
srpErrCntCurrRingRxTtlExpPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 60, 4, 3, 1, 2), PerfCurrentCount64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: srpErrCntCurrRingRxTtlExpPkts.setStatus('current')
srpErrCntCurrRingRxShortPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 60, 4, 3, 1, 3), PerfCurrentCount64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: srpErrCntCurrRingRxShortPkts.setStatus('current')
srpErrCntCurrRingRxGiantPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 60, 4, 3, 1, 4), PerfCurrentCount64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: srpErrCntCurrRingRxGiantPkts.setStatus('current')
srpErrCntCurrRingRxAbortPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 60, 4, 3, 1, 5), PerfCurrentCount64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: srpErrCntCurrRingRxAbortPkts.setStatus('current')
srpErrCntCurrRingRxCRC = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 60, 4, 3, 1, 6), PerfCurrentCount64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: srpErrCntCurrRingRxCRC.setStatus('current')
srpErrCntCurrHostRxDiscardPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 60, 4, 3, 1, 7), PerfCurrentCount64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: srpErrCntCurrHostRxDiscardPkts.setStatus('current')
srpErrCntCurrHostRxShortPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 60, 4, 3, 1, 8), PerfCurrentCount64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: srpErrCntCurrHostRxShortPkts.setStatus('current')
srpErrCntCurrHostRxGiantPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 60, 4, 3, 1, 9), PerfCurrentCount64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: srpErrCntCurrHostRxGiantPkts.setStatus('current')
srpErrCntIntTable = MibTable((1, 3, 6, 1, 4, 1, 9, 10, 60, 4, 4), )
if mibBuilder.loadTexts: srpErrCntIntTable.setStatus('current')
srpErrCntIntEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 10, 60, 4, 4, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "CISCO-SRP-MIB", "srpErrCntIntInterfaceSide"), (0, "CISCO-SRP-MIB", "srpErrCntIntNumber"))
if mibBuilder.loadTexts: srpErrCntIntEntry.setStatus('current')
srpErrCntIntInterfaceSide = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 60, 4, 4, 1, 1), InterfaceSide())
if mibBuilder.loadTexts: srpErrCntIntInterfaceSide.setStatus('current')
srpErrCntIntNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 60, 4, 4, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 96)))
if mibBuilder.loadTexts: srpErrCntIntNumber.setStatus('current')
srpErrCntIntRingRxTtlExpPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 60, 4, 4, 1, 3), PerfIntervalCount64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: srpErrCntIntRingRxTtlExpPkts.setStatus('current')
srpErrCntIntRingRxShortPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 60, 4, 4, 1, 4), PerfIntervalCount64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: srpErrCntIntRingRxShortPkts.setStatus('current')
srpErrCntIntRingRxGiantPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 60, 4, 4, 1, 5), PerfIntervalCount64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: srpErrCntIntRingRxGiantPkts.setStatus('current')
srpErrCntIntRingRxAbortPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 60, 4, 4, 1, 6), PerfIntervalCount64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: srpErrCntIntRingRxAbortPkts.setStatus('current')
srpErrCntIntRingRxCRC = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 60, 4, 4, 1, 7), PerfIntervalCount64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: srpErrCntIntRingRxCRC.setStatus('current')
srpErrCntIntHostRxDiscardPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 60, 4, 4, 1, 8), PerfIntervalCount64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: srpErrCntIntHostRxDiscardPkts.setStatus('current')
srpErrCntIntHostRxShortPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 60, 4, 4, 1, 9), PerfIntervalCount64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: srpErrCntIntHostRxShortPkts.setStatus('current')
srpErrCntIntHostRxGiantPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 60, 4, 4, 1, 10), PerfIntervalCount64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: srpErrCntIntHostRxGiantPkts.setStatus('current')
srpTrapRingWrapped = NotificationType((1, 3, 6, 1, 4, 1, 9, 10, 60, 5, 0, 1)).setObjects(("IF-MIB", "ifIndex"), ("CISCO-SRP-MIB", "srpIpsState"), ("CISCO-SRP-MIB", "srpMACIpsAutoDetectMode"), ("CISCO-SRP-MIB", "srpMACIpsRemoteMode"), ("CISCO-SRP-MIB", "srpMACIpsRemoteType"), ("CISCO-SRP-MIB", "srpMACIpsActiveMode"), ("CISCO-SRP-MIB", "srpMACIpsWrapCounter"), ("CISCO-SRP-MIB", "srpMACIpsLastWrapTimeStamp"), ("CISCO-SRP-MIB", "srpMACIpsLastUnWrapTimeStamp"))
if mibBuilder.loadTexts: srpTrapRingWrapped.setStatus('current')
srpTrapRingRestored = NotificationType((1, 3, 6, 1, 4, 1, 9, 10, 60, 5, 0, 2)).setObjects(("IF-MIB", "ifIndex"), ("CISCO-SRP-MIB", "srpIpsState"), ("CISCO-SRP-MIB", "srpMACIpsAutoDetectMode"), ("CISCO-SRP-MIB", "srpMACIpsRemoteMode"), ("CISCO-SRP-MIB", "srpMACIpsRemoteType"), ("CISCO-SRP-MIB", "srpMACIpsActiveMode"), ("CISCO-SRP-MIB", "srpMACIpsWrapCounter"), ("CISCO-SRP-MIB", "srpMACIpsLastWrapTimeStamp"), ("CISCO-SRP-MIB", "srpMACIpsLastUnWrapTimeStamp"))
if mibBuilder.loadTexts: srpTrapRingRestored.setStatus('current')
srpIfGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 10, 60, 6, 1, 1)).setObjects(("CISCO-SRP-MIB", "srpMACAddress"), ("CISCO-SRP-MIB", "srpPriorityThreshold"), ("CISCO-SRP-MIB", "srpNodesOnTheRing"), ("CISCO-SRP-MIB", "srpIpsState"), ("CISCO-SRP-MIB", "srpIpsLockedOut"), ("CISCO-SRP-MIB", "srpIpsWaitToRestoreTimer"), ("CISCO-SRP-MIB", "srpIfTimeElapsed"), ("CISCO-SRP-MIB", "srpIfValidIntervals"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    srpIfGroup = srpIfGroup.setStatus('current')
srpMACSideGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 10, 60, 6, 1, 2)).setObjects(("CISCO-SRP-MIB", "srpMACNeighborAddress"), ("CISCO-SRP-MIB", "srpMACSideWrapped"), ("CISCO-SRP-MIB", "srpMACIpsMgmtRequestedMode"), ("CISCO-SRP-MIB", "srpMACIpsAutoDetectMode"), ("CISCO-SRP-MIB", "srpMACIpsRemoteMode"), ("CISCO-SRP-MIB", "srpMACIpsRemoteType"), ("CISCO-SRP-MIB", "srpMACIpsActiveMode"), ("CISCO-SRP-MIB", "srpMACIpsWrapCounter"), ("CISCO-SRP-MIB", "srpMACIpsLastWrapTimeStamp"), ("CISCO-SRP-MIB", "srpMACIpsLastUnWrapTimeStamp"), ("CISCO-SRP-MIB", "srpMACClockSourceMode"), ("CISCO-SRP-MIB", "srpMACTopologyTimer"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    srpMACSideGroup = srpMACSideGroup.setStatus('current')
srpRingTopologyMapGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 10, 60, 6, 1, 3)).setObjects(("CISCO-SRP-MIB", "srpNodeMACAddress"), ("CISCO-SRP-MIB", "srpNodeWrapped"), ("CISCO-SRP-MIB", "srpNodeName"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    srpRingTopologyMapGroup = srpRingTopologyMapGroup.setStatus('current')
srpMACCountersGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 10, 60, 6, 1, 4)).setObjects(("CISCO-SRP-MIB", "srpMACCountPktsBySourceFlag"), ("CISCO-SRP-MIB", "srpMACCountPktsBySourceAddress"), ("CISCO-SRP-MIB", "srpMACSourceDiscontTimeStamp"), ("CISCO-SRP-MIB", "srpMACCountPktsBySource"), ("CISCO-SRP-MIB", "srpMACCountPktsByDestinationFlag"), ("CISCO-SRP-MIB", "srpMACCountPktsByDestAddress"), ("CISCO-SRP-MIB", "srpMACDestDiscontTimeStamp"), ("CISCO-SRP-MIB", "srpMACCountPktsByDest"), ("CISCO-SRP-MIB", "srpMACRejectPktsBySourceFlag"), ("CISCO-SRP-MIB", "srpMACRejectPktsBySourceAddress"), ("CISCO-SRP-MIB", "srpMACRejectPktsByDestFlag"), ("CISCO-SRP-MIB", "srpMACRejectPktsByDestAddress"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    srpMACCountersGroup = srpMACCountersGroup.setStatus('deprecated')
srpRingCountersCurrentGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 10, 60, 6, 1, 5)).setObjects(("CISCO-SRP-MIB", "srpRingCurUcastLowPriPktsIn"), ("CISCO-SRP-MIB", "srpRingCurUcastLowPriOctetsIn"), ("CISCO-SRP-MIB", "srpRingCurMcastLowPriPktsIn"), ("CISCO-SRP-MIB", "srpRingCurMcastLowPriOctetsIn"), ("CISCO-SRP-MIB", "srpRingCurUcastHighPriPktsIn"), ("CISCO-SRP-MIB", "srpRingCurUcastHighPriOctetsIn"), ("CISCO-SRP-MIB", "srpRingCurMcastHighPriPktsIn"), ("CISCO-SRP-MIB", "srpRingCurMcastHighPriOctetsIn"), ("CISCO-SRP-MIB", "srpRingCurUcastLowPriPktsOut"), ("CISCO-SRP-MIB", "srpRingCurUcastLowPriOctetsOut"), ("CISCO-SRP-MIB", "srpRingCurMcastLowPriPktsOut"), ("CISCO-SRP-MIB", "srpRingCurMcastLowPriOctetsOut"), ("CISCO-SRP-MIB", "srpRingCurUcastHighPriPktsOut"), ("CISCO-SRP-MIB", "srpRingCurUcastHighPriOctetsOut"), ("CISCO-SRP-MIB", "srpRingCurMcastHighPriPktsOut"), ("CISCO-SRP-MIB", "srpRingCurMcastHighPriOctetsOut"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    srpRingCountersCurrentGroup = srpRingCountersCurrentGroup.setStatus('current')
srpRingCountersIntervalGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 10, 60, 6, 1, 6)).setObjects(("CISCO-SRP-MIB", "srpRingIntWrapCounter"), ("CISCO-SRP-MIB", "srpRingIntUcastLowPriPktsIn"), ("CISCO-SRP-MIB", "srpRingIntUcastLowPriOctetsIn"), ("CISCO-SRP-MIB", "srpRingIntMcastLowPriPktsIn"), ("CISCO-SRP-MIB", "srpRingIntMcastLowPriOctetsIn"), ("CISCO-SRP-MIB", "srpRingIntUcastHighPriPktsIn"), ("CISCO-SRP-MIB", "srpRingIntUcastHighPriOctetsIn"), ("CISCO-SRP-MIB", "srpRingIntMcastHighPriPktsIn"), ("CISCO-SRP-MIB", "srpRingIntMcastHighPriOctetsIn"), ("CISCO-SRP-MIB", "srpRingIntUcastLowPriPktsOut"), ("CISCO-SRP-MIB", "srpRingIntUcastLowPriOctetsOut"), ("CISCO-SRP-MIB", "srpRingIntMcastLowPriPktsOut"), ("CISCO-SRP-MIB", "srpRingIntMcastLowPriOctetsOut"), ("CISCO-SRP-MIB", "srpRingIntUcastHighPriPktsOut"), ("CISCO-SRP-MIB", "srpRingIntUcastHighPriOctetsOut"), ("CISCO-SRP-MIB", "srpRingIntMcastHighPriPktsOut"), ("CISCO-SRP-MIB", "srpRingIntMcastHighPriOctetsOut"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    srpRingCountersIntervalGroup = srpRingCountersIntervalGroup.setStatus('current')
srpHostCountersCurrentGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 10, 60, 6, 1, 7)).setObjects(("CISCO-SRP-MIB", "srpHostCurUcastLowPriPktsIn"), ("CISCO-SRP-MIB", "srpHostCurUcastLowPriOctetsIn"), ("CISCO-SRP-MIB", "srpHostCurMcastLowPriPktsIn"), ("CISCO-SRP-MIB", "srpHostCurMcastLowPriOctetsIn"), ("CISCO-SRP-MIB", "srpHostCurUcastHighPriPktsIn"), ("CISCO-SRP-MIB", "srpHostCurUcastHighPriOctetsIn"), ("CISCO-SRP-MIB", "srpHostCurMcastHighPriPktsIn"), ("CISCO-SRP-MIB", "srpHostCurMcastHighPriOctetsIn"), ("CISCO-SRP-MIB", "srpHostCurUcastLowPriPktsOut"), ("CISCO-SRP-MIB", "srpHostCurUcastLowPriOctetsOut"), ("CISCO-SRP-MIB", "srpHostCurMcastLowPriPktsOut"), ("CISCO-SRP-MIB", "srpHostCurMcastLowPriOctetsOut"), ("CISCO-SRP-MIB", "srpHostCurUcastHighPriPktsOut"), ("CISCO-SRP-MIB", "srpHostCurUcastHighPriOctetsOut"), ("CISCO-SRP-MIB", "srpHostCurMcastHighPriPktsOut"), ("CISCO-SRP-MIB", "srpHostCurMcastHighPriOctetsOut"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    srpHostCountersCurrentGroup = srpHostCountersCurrentGroup.setStatus('current')
srpHostCountersIntervalGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 10, 60, 6, 1, 8)).setObjects(("CISCO-SRP-MIB", "srpHostIntUcastLowPriPktsIn"), ("CISCO-SRP-MIB", "srpHostIntUcastLowPriOctetsIn"), ("CISCO-SRP-MIB", "srpHostIntMcastLowPriPktsIn"), ("CISCO-SRP-MIB", "srpHostIntMcastLowPriOctetsIn"), ("CISCO-SRP-MIB", "srpHostIntUcastHighPriPktsIn"), ("CISCO-SRP-MIB", "srpHostIntUcastHighPriOctetsIn"), ("CISCO-SRP-MIB", "srpHostIntMcastHighPriPktsIn"), ("CISCO-SRP-MIB", "srpHostIntMcastHighPriOctetsIn"), ("CISCO-SRP-MIB", "srpHostIntUcastLowPriPktsOut"), ("CISCO-SRP-MIB", "srpHostIntUcastLowPriOctetsOut"), ("CISCO-SRP-MIB", "srpHostIntMcastLowPriPktsOut"), ("CISCO-SRP-MIB", "srpHostIntMcastLowPriOctetsOut"), ("CISCO-SRP-MIB", "srpHostIntUcastHighPriPktsOut"), ("CISCO-SRP-MIB", "srpHostIntUcastHighPriOctetsOut"), ("CISCO-SRP-MIB", "srpHostIntMcastHighPriPktsOut"), ("CISCO-SRP-MIB", "srpHostIntMcastHighPriOctetsOut"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    srpHostCountersIntervalGroup = srpHostCountersIntervalGroup.setStatus('current')
srpErrorsCountersCurrentGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 10, 60, 6, 1, 9)).setObjects(("CISCO-SRP-MIB", "srpRingCurRxErrorsDataParity"), ("CISCO-SRP-MIB", "srpRingCurRxErrorsShortPackets"), ("CISCO-SRP-MIB", "srpRingCurRxErrorsGiantPackets"), ("CISCO-SRP-MIB", "srpRingCurRxErrorsSideBadPackets"), ("CISCO-SRP-MIB", "srpRingCurRxErrorsCRC"), ("CISCO-SRP-MIB", "srpHostCurRxErrorsDataParity"), ("CISCO-SRP-MIB", "srpHostCurRxErrorsShortPackets"), ("CISCO-SRP-MIB", "srpHostCurRxErrorsGiantPackets"), ("CISCO-SRP-MIB", "srpHostCurRxErrorsSideBadPackets"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    srpErrorsCountersCurrentGroup = srpErrorsCountersCurrentGroup.setStatus('deprecated')
srpErrorsCountersIntervalGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 10, 60, 6, 1, 10)).setObjects(("CISCO-SRP-MIB", "srpRingIntRxErrorsDataParity"), ("CISCO-SRP-MIB", "srpRingIntRxErrorsShortPackets"), ("CISCO-SRP-MIB", "srpRingIntRxErrorsGiantPackets"), ("CISCO-SRP-MIB", "srpRingIntRxErrorsSideBadPackets"), ("CISCO-SRP-MIB", "srpRingIntRxErrorsCRC"), ("CISCO-SRP-MIB", "srpHostIntRxErrorsDataParity"), ("CISCO-SRP-MIB", "srpHostIntRxErrorsShortPackets"), ("CISCO-SRP-MIB", "srpHostIntRxErrorsGiantPackets"), ("CISCO-SRP-MIB", "srpHostIntRxErrorsSideBadPackets"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    srpErrorsCountersIntervalGroup = srpErrorsCountersIntervalGroup.setStatus('deprecated')
srpErrCntCurrGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 10, 60, 6, 1, 11)).setObjects(("CISCO-SRP-MIB", "srpErrCntCurrRingRxTtlExpPkts"), ("CISCO-SRP-MIB", "srpErrCntCurrRingRxShortPkts"), ("CISCO-SRP-MIB", "srpErrCntCurrRingRxGiantPkts"), ("CISCO-SRP-MIB", "srpErrCntCurrRingRxAbortPkts"), ("CISCO-SRP-MIB", "srpErrCntCurrRingRxCRC"), ("CISCO-SRP-MIB", "srpErrCntCurrHostRxDiscardPkts"), ("CISCO-SRP-MIB", "srpErrCntCurrHostRxShortPkts"), ("CISCO-SRP-MIB", "srpErrCntCurrHostRxGiantPkts"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    srpErrCntCurrGroup = srpErrCntCurrGroup.setStatus('current')
srpErrCntIntGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 10, 60, 6, 1, 12)).setObjects(("CISCO-SRP-MIB", "srpErrCntIntRingRxTtlExpPkts"), ("CISCO-SRP-MIB", "srpErrCntIntRingRxShortPkts"), ("CISCO-SRP-MIB", "srpErrCntIntRingRxGiantPkts"), ("CISCO-SRP-MIB", "srpErrCntIntRingRxAbortPkts"), ("CISCO-SRP-MIB", "srpErrCntIntRingRxCRC"), ("CISCO-SRP-MIB", "srpErrCntIntHostRxDiscardPkts"), ("CISCO-SRP-MIB", "srpErrCntIntHostRxShortPkts"), ("CISCO-SRP-MIB", "srpErrCntIntHostRxGiantPkts"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    srpErrCntIntGroup = srpErrCntIntGroup.setStatus('current')
srpNotificationsGroup = NotificationGroup((1, 3, 6, 1, 4, 1, 9, 10, 60, 6, 1, 13)).setObjects(("CISCO-SRP-MIB", "srpTrapRingWrapped"), ("CISCO-SRP-MIB", "srpTrapRingRestored"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    srpNotificationsGroup = srpNotificationsGroup.setStatus('current')
srpCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 9, 10, 60, 6, 2, 1)).setObjects(("CISCO-SRP-MIB", "srpIfGroup"), ("CISCO-SRP-MIB", "srpMACSideGroup"), ("CISCO-SRP-MIB", "srpRingTopologyMapGroup"), ("CISCO-SRP-MIB", "srpRingCountersCurrentGroup"), ("CISCO-SRP-MIB", "srpRingCountersIntervalGroup"), ("CISCO-SRP-MIB", "srpHostCountersCurrentGroup"), ("CISCO-SRP-MIB", "srpHostCountersIntervalGroup"), ("CISCO-SRP-MIB", "srpErrCntCurrGroup"), ("CISCO-SRP-MIB", "srpErrCntIntGroup"), ("CISCO-SRP-MIB", "srpNotificationsGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    srpCompliance = srpCompliance.setStatus('current')
srpComplianceOld = ModuleCompliance((1, 3, 6, 1, 4, 1, 9, 10, 60, 6, 2, 2)).setObjects(("CISCO-SRP-MIB", "srpMACCountersGroup"), ("CISCO-SRP-MIB", "srpErrorsCountersCurrentGroup"), ("CISCO-SRP-MIB", "srpErrorsCountersIntervalGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    srpComplianceOld = srpComplianceOld.setStatus('deprecated')
mibBuilder.exportSymbols("CISCO-SRP-MIB", srpTrapsNotificationsPrefix=srpTrapsNotificationsPrefix, srpHostIntUcastLowPriPktsOut=srpHostIntUcastLowPriPktsOut, srpHostCurMcastLowPriOctetsIn=srpHostCurMcastLowPriOctetsIn, srpMACCountPktsBySource=srpMACCountPktsBySource, srpHostIntRxErrorsShortPackets=srpHostIntRxErrorsShortPackets, srpNodesOnTheRing=srpNodesOnTheRing, srpHostIntUcastLowPriOctetsOut=srpHostIntUcastLowPriOctetsOut, srpMACInterfaceSide=srpMACInterfaceSide, srpHostCurUcastHighPriOctetsIn=srpHostCurUcastHighPriOctetsIn, srpMACSideWrapped=srpMACSideWrapped, srpHostInterfaceSide=srpHostInterfaceSide, srpTrapsNotifications=srpTrapsNotifications, srpNodeMACAddress=srpNodeMACAddress, srpRingIntWrapCounter=srpRingIntWrapCounter, srpRingIntUcastHighPriOctetsIn=srpRingIntUcastHighPriOctetsIn, srpMACClockSourceMode=srpMACClockSourceMode, srpNodeWrapped=srpNodeWrapped, srpRingCountersIntervalEntry=srpRingCountersIntervalEntry, srpHostIntMcastLowPriOctetsOut=srpHostIntMcastLowPriOctetsOut, srpTrapRingWrapped=srpTrapRingWrapped, srpErrCntIntHostRxDiscardPkts=srpErrCntIntHostRxDiscardPkts, srpErrCntIntRingRxAbortPkts=srpErrCntIntRingRxAbortPkts, srpHostCurRxErrorsShortPackets=srpHostCurRxErrorsShortPackets, srpRingIntInterfaceSide=srpRingIntInterfaceSide, srpHostCurMcastHighPriOctetsOut=srpHostCurMcastHighPriOctetsOut, srpHostCurRxErrorsSideBadPackets=srpHostCurRxErrorsSideBadPackets, srpMACCountPktsBySourceAddress=srpMACCountPktsBySourceAddress, srpRingCountersIntervalGroup=srpRingCountersIntervalGroup, srpHostCurMcastLowPriPktsIn=srpHostCurMcastLowPriPktsIn, srpErrorsCountersCurrentGroup=srpErrorsCountersCurrentGroup, PYSNMP_MODULE_ID=ciscosrpMIB, srpErrCntCurrInterfaceSide=srpErrCntCurrInterfaceSide, srpErrCntCurrRingRxCRC=srpErrCntCurrRingRxCRC, srpMACTopologyTimer=srpMACTopologyTimer, srpMACIpsLastWrapTimeStamp=srpMACIpsLastWrapTimeStamp, srpHostCountersIntervalGroup=srpHostCountersIntervalGroup, srpRingCurUcastLowPriOctetsIn=srpRingCurUcastLowPriOctetsIn, srpHostIntMcastLowPriPktsIn=srpHostIntMcastLowPriPktsIn, srpRingIntMcastLowPriPktsIn=srpRingIntMcastLowPriPktsIn, srpErrCntIntRingRxShortPkts=srpErrCntIntRingRxShortPkts, srpMACRejectPktsBySourceAddress=srpMACRejectPktsBySourceAddress, srpMACCountPktsByDestinationFlag=srpMACCountPktsByDestinationFlag, srpRingIntUcastLowPriOctetsOut=srpRingIntUcastLowPriOctetsOut, srpHostCurUcastLowPriOctetsIn=srpHostCurUcastLowPriOctetsIn, srpIpsState=srpIpsState, srpIfEntry=srpIfEntry, srpRingCurRxErrorsShortPackets=srpRingCurRxErrorsShortPackets, srpTrapRingRestored=srpTrapRingRestored, srpHostCountersCurrentGroup=srpHostCountersCurrentGroup, srpErrorsCounters=srpErrorsCounters, srpRingCurMcastHighPriOctetsOut=srpRingCurMcastHighPriOctetsOut, srpRingTopologyMapTable=srpRingTopologyMapTable, srpErrorsInterfaceSide=srpErrorsInterfaceSide, srpMACCountPktsBySourceFlag=srpMACCountPktsBySourceFlag, IpsMode=IpsMode, srpHostCurUcastLowPriOctetsOut=srpHostCurUcastLowPriOctetsOut, srpMACDestDiscontTimeStamp=srpMACDestDiscontTimeStamp, srpErrCntCurrRingRxTtlExpPkts=srpErrCntCurrRingRxTtlExpPkts, srpMACSideEntry=srpMACSideEntry, srpRingIntMcastHighPriOctetsIn=srpRingIntMcastHighPriOctetsIn, srpRingCurUcastLowPriPktsOut=srpRingCurUcastLowPriPktsOut, srpRingIntUcastLowPriOctetsIn=srpRingIntUcastLowPriOctetsIn, srpErrCntIntHostRxGiantPkts=srpErrCntIntHostRxGiantPkts, ciscosrpMIB=ciscosrpMIB, srpMACAddress=srpMACAddress, srpRingIntUcastLowPriPktsIn=srpRingIntUcastLowPriPktsIn, srpNodeName=srpNodeName, srpHostCounters=srpHostCounters, srpRingInterfaceSide=srpRingInterfaceSide, srpHostIntMcastHighPriOctetsOut=srpHostIntMcastHighPriOctetsOut, srpRingIntNumber=srpRingIntNumber, srpErrCntCurrRingRxGiantPkts=srpErrCntCurrRingRxGiantPkts, srpHostCurUcastHighPriPktsOut=srpHostCurUcastHighPriPktsOut, srpRingCurUcastHighPriOctetsOut=srpRingCurUcastHighPriOctetsOut, srpMACIpsAutoDetectMode=srpMACIpsAutoDetectMode, srpHostIntMcastHighPriPktsOut=srpHostIntMcastHighPriPktsOut, srpHostCurUcastHighPriOctetsOut=srpHostCurUcastHighPriOctetsOut, srpMACCountersGroup=srpMACCountersGroup, srpMACIpsRemoteType=srpMACIpsRemoteType, srpHostCurMcastLowPriOctetsOut=srpHostCurMcastLowPriOctetsOut, srpRingCurMcastLowPriPktsIn=srpRingCurMcastLowPriPktsIn, srpErrCntIntRingRxCRC=srpErrCntIntRingRxCRC, srpHostIntInterfaceSide=srpHostIntInterfaceSide, srpHostIntUcastLowPriOctetsIn=srpHostIntUcastLowPriOctetsIn, srpRingCurUcastHighPriPktsIn=srpRingCurUcastHighPriPktsIn, srpMACRejectPktsByDestFlag=srpMACRejectPktsByDestFlag, srpErrorsCountersIntervalEntry=srpErrorsCountersIntervalEntry, srpErrCntIntRingRxTtlExpPkts=srpErrCntIntRingRxTtlExpPkts, srpHostCurMcastLowPriPktsOut=srpHostCurMcastLowPriPktsOut, srpRingCountersCurrentGroup=srpRingCountersCurrentGroup, srpErrCntIntRingRxGiantPkts=srpErrCntIntRingRxGiantPkts, srpHostIntMcastHighPriPktsIn=srpHostIntMcastHighPriPktsIn, srpMACIpsLastUnWrapTimeStamp=srpMACIpsLastUnWrapTimeStamp, srpMACIpsRemoteMode=srpMACIpsRemoteMode, srpRingCurUcastHighPriPktsOut=srpRingCurUcastHighPriPktsOut, srpMACCountPktsByDest=srpMACCountPktsByDest, srpRingCountersIntervalTable=srpRingCountersIntervalTable, srpErrorsCountersIntervalGroup=srpErrorsCountersIntervalGroup, srpCompliance=srpCompliance, srpHostIntNumber=srpHostIntNumber, srpRingCurRxErrorsSideBadPackets=srpRingCurRxErrorsSideBadPackets, srpRingCurMcastHighPriPktsOut=srpRingCurMcastHighPriPktsOut, PerfIntervalCount64=PerfIntervalCount64, srpErrCntCurrHostRxGiantPkts=srpErrCntCurrHostRxGiantPkts, srpRingCurMcastHighPriOctetsIn=srpRingCurMcastHighPriOctetsIn, srpErrCntIntTable=srpErrCntIntTable, srpRingTopologyMapGroup=srpRingTopologyMapGroup, srpHostIntUcastHighPriOctetsOut=srpHostIntUcastHighPriOctetsOut, srpRingCurRxErrorsDataParity=srpRingCurRxErrorsDataParity, srpPriorityThreshold=srpPriorityThreshold, srpErrCntIntGroup=srpErrCntIntGroup, srpHostCountersIntervalEntry=srpHostCountersIntervalEntry, srpErrorsCountersIntervalTable=srpErrorsCountersIntervalTable, srpHostIntMcastLowPriPktsOut=srpHostIntMcastLowPriPktsOut, InterfaceSide=InterfaceSide, srpRingCurRxErrorsCRC=srpRingCurRxErrorsCRC, srpRingTopologyMapEntry=srpRingTopologyMapEntry, srpHostIntRxErrorsSideBadPackets=srpHostIntRxErrorsSideBadPackets, srpErrCntCurrRingRxShortPkts=srpErrCntCurrRingRxShortPkts, srpHostIntUcastHighPriPktsOut=srpHostIntUcastHighPriPktsOut, srpErrCntIntInterfaceSide=srpErrCntIntInterfaceSide, srpRingIntMcastLowPriOctetsIn=srpRingIntMcastLowPriOctetsIn, srpErrCntCurrHostRxShortPkts=srpErrCntCurrHostRxShortPkts, srpRingIntMcastHighPriPktsIn=srpRingIntMcastHighPriPktsIn, PerfCurrentCount64=PerfCurrentCount64, srpHostCountersCurrentEntry=srpHostCountersCurrentEntry, srpRingIntMcastLowPriPktsOut=srpRingIntMcastLowPriPktsOut, srpIpsWaitToRestoreTimer=srpIpsWaitToRestoreTimer, srpRingCountersCurrentTable=srpRingCountersCurrentTable, srpHostCurMcastHighPriPktsOut=srpHostCurMcastHighPriPktsOut, srpHostCountersIntervalTable=srpHostCountersIntervalTable, srpErrCntCurrEntry=srpErrCntCurrEntry, srpMACNeighborAddress=srpMACNeighborAddress, srpErrCntIntHostRxShortPkts=srpErrCntIntHostRxShortPkts, srpHostIntMcastHighPriOctetsIn=srpHostIntMcastHighPriOctetsIn, srpErrorsIntervalInterfaceSide=srpErrorsIntervalInterfaceSide, srpRingIntUcastLowPriPktsOut=srpRingIntUcastLowPriPktsOut, srpMAC=srpMAC, srpIfGroup=srpIfGroup, srpHostIntRxErrorsDataParity=srpHostIntRxErrorsDataParity, srpMACSideTable=srpMACSideTable, srpErrCntCurrTable=srpErrCntCurrTable, srpRingCurMcastHighPriPktsIn=srpRingCurMcastHighPriPktsIn, srpIfTimeElapsed=srpIfTimeElapsed, srpMACCountersEntry=srpMACCountersEntry, srpRingCurUcastLowPriPktsIn=srpRingCurUcastLowPriPktsIn, srpRingCurMcastLowPriPktsOut=srpRingCurMcastLowPriPktsOut, srpHostCurMcastHighPriPktsIn=srpHostCurMcastHighPriPktsIn, srpRingIntRxErrorsSideBadPackets=srpRingIntRxErrorsSideBadPackets, srpMACIpsWrapCounter=srpMACIpsWrapCounter, srpHostIntUcastHighPriOctetsIn=srpHostIntUcastHighPriOctetsIn, srpMACCountPktsByDestAddress=srpMACCountPktsByDestAddress, srpHostCurUcastLowPriPktsIn=srpHostCurUcastLowPriPktsIn, srpMACCountersTable=srpMACCountersTable, srpHostCountersCurrentTable=srpHostCountersCurrentTable, srpHostIntRxErrorsGiantPackets=srpHostIntRxErrorsGiantPackets, srpHostCurUcastHighPriPktsIn=srpHostCurUcastHighPriPktsIn, srpMACRejectPktsBySourceFlag=srpMACRejectPktsBySourceFlag, srpMACIpsActiveMode=srpMACIpsActiveMode, srpRingIntRxErrorsShortPackets=srpRingIntRxErrorsShortPackets, srpComplianceOld=srpComplianceOld, srpNotificationsGroup=srpNotificationsGroup, srpRingCounters=srpRingCounters, srpIfValidIntervals=srpIfValidIntervals, srpErrCntCurrRingRxAbortPkts=srpErrCntCurrRingRxAbortPkts, srpHostIntMcastLowPriOctetsIn=srpHostIntMcastLowPriOctetsIn, srpErrCntCurrHostRxDiscardPkts=srpErrCntCurrHostRxDiscardPkts, srpRingCurUcastHighPriOctetsIn=srpRingCurUcastHighPriOctetsIn, srpErrCntIntEntry=srpErrCntIntEntry, srpConformance=srpConformance, srpMACSideGroup=srpMACSideGroup, srpHostIntUcastLowPriPktsIn=srpHostIntUcastLowPriPktsIn, srpRingIntUcastHighPriPktsIn=srpRingIntUcastHighPriPktsIn, srpErrCntIntNumber=srpErrCntIntNumber, srpErrorsIntervalNumber=srpErrorsIntervalNumber, srpRingIntMcastLowPriOctetsOut=srpRingIntMcastLowPriOctetsOut, srpCompliances=srpCompliances, srpHostCurUcastLowPriPktsOut=srpHostCurUcastLowPriPktsOut, srpRingIntMcastHighPriOctetsOut=srpRingIntMcastHighPriOctetsOut, srpRingCurMcastLowPriOctetsIn=srpRingCurMcastLowPriOctetsIn, srpIfTable=srpIfTable, srpRingCurRxErrorsGiantPackets=srpRingCurRxErrorsGiantPackets, srpHostCurRxErrorsGiantPackets=srpHostCurRxErrorsGiantPackets, srpRingIntRxErrorsGiantPackets=srpRingIntRxErrorsGiantPackets, srpNodeHopsNumber=srpNodeHopsNumber, srpRingCurUcastLowPriOctetsOut=srpRingCurUcastLowPriOctetsOut, srpRingIntRxErrorsDataParity=srpRingIntRxErrorsDataParity, srpMACRejectPktsByDestAddress=srpMACRejectPktsByDestAddress, srpMACIpsMgmtRequestedMode=srpMACIpsMgmtRequestedMode, srpRingCurMcastLowPriOctetsOut=srpRingCurMcastLowPriOctetsOut, srpRingIntUcastHighPriPktsOut=srpRingIntUcastHighPriPktsOut, srpRingIntMcastHighPriPktsOut=srpRingIntMcastHighPriPktsOut, srpHostIntUcastHighPriPktsIn=srpHostIntUcastHighPriPktsIn, srpMACSourceDiscontTimeStamp=srpMACSourceDiscontTimeStamp, srpErrorsCountersCurrentEntry=srpErrorsCountersCurrentEntry, srpIpsLockedOut=srpIpsLockedOut, srpHostCurRxErrorsDataParity=srpHostCurRxErrorsDataParity, srpHostCurMcastHighPriOctetsIn=srpHostCurMcastHighPriOctetsIn, srpRingIntRxErrorsCRC=srpRingIntRxErrorsCRC, srpGroups=srpGroups, srpErrCntCurrGroup=srpErrCntCurrGroup, srpErrorsCountersCurrentTable=srpErrorsCountersCurrentTable, srpRingCountersCurrentEntry=srpRingCountersCurrentEntry, srpRingIntUcastHighPriOctetsOut=srpRingIntUcastHighPriOctetsOut)
