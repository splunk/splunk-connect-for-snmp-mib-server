#
# PySNMP MIB module GDC7616-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/GDC7616-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 19:05:24 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, OctetString, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "Integer", "OctetString", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsIntersection, SingleValueConstraint, ValueSizeConstraint, ValueRangeConstraint, ConstraintsUnion = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsIntersection", "SingleValueConstraint", "ValueSizeConstraint", "ValueRangeConstraint", "ConstraintsUnion")
SCinstance, = mibBuilder.importSymbols("GDCMACRO-MIB", "SCinstance")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
TimeTicks, Counter32, IpAddress, Integer32, ObjectIdentity, Counter64, NotificationType, Gauge32, Unsigned32, iso, MibScalar, MibTable, MibTableRow, MibTableColumn, ModuleIdentity, MibIdentifier, enterprises, Bits = mibBuilder.importSymbols("SNMPv2-SMI", "TimeTicks", "Counter32", "IpAddress", "Integer32", "ObjectIdentity", "Counter64", "NotificationType", "Gauge32", "Unsigned32", "iso", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "ModuleIdentity", "MibIdentifier", "enterprises", "Bits")
DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention")
gdc = MibIdentifier((1, 3, 6, 1, 4, 1, 498))
bql2 = MibIdentifier((1, 3, 6, 1, 4, 1, 498, 12))
uas7616 = MibIdentifier((1, 3, 6, 1, 4, 1, 498, 12, 4))
uas7616MIBVersion = MibScalar((1, 3, 6, 1, 4, 1, 498, 12, 4, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(5, 5)).setFixedLength(5)).setMaxAccess("readonly")
if mibBuilder.loadTexts: uas7616MIBVersion.setStatus('mandatory')
uas7616WhatAreYouTable = MibTable((1, 3, 6, 1, 4, 1, 498, 12, 4, 2), )
if mibBuilder.loadTexts: uas7616WhatAreYouTable.setStatus('mandatory')
uas7616WhatAreYouEntry = MibTableRow((1, 3, 6, 1, 4, 1, 498, 12, 4, 2, 1), ).setIndexNames((0, "GDC7616-MIB", "uas7616WhatAreYouIndex"))
if mibBuilder.loadTexts: uas7616WhatAreYouEntry.setStatus('mandatory')
uas7616WhatAreYouIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 12, 4, 2, 1, 1), SCinstance()).setMaxAccess("readonly")
if mibBuilder.loadTexts: uas7616WhatAreYouIndex.setStatus('mandatory')
uas7616CodeRev = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 12, 4, 2, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(4, 4)).setFixedLength(4)).setMaxAccess("readonly")
if mibBuilder.loadTexts: uas7616CodeRev.setStatus('mandatory')
uas7616AlarmStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 12, 4, 2, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: uas7616AlarmStatus.setStatus('mandatory')
uas7616SystemTimingGenStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 12, 4, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("none", 1), ("clk8khz", 2), ("clk4mhz", 3), ("clk8khzand4mhz", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: uas7616SystemTimingGenStatus.setStatus('mandatory')
uas7616ConfigTable = MibTable((1, 3, 6, 1, 4, 1, 498, 12, 4, 3), )
if mibBuilder.loadTexts: uas7616ConfigTable.setStatus('mandatory')
uas7616ConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 498, 12, 4, 3, 1), ).setIndexNames((0, "GDC7616-MIB", "uas7616ConfigIndex"))
if mibBuilder.loadTexts: uas7616ConfigEntry.setStatus('mandatory')
uas7616ConfigIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 12, 4, 3, 1, 1), SCinstance()).setMaxAccess("readonly")
if mibBuilder.loadTexts: uas7616ConfigIndex.setStatus('mandatory')
uas7616TXClockSource = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 12, 4, 3, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("system", 1), ("recovered", 2), ("internal", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: uas7616TXClockSource.setStatus('mandatory')
uas7616TerminationType = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 12, 4, 3, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("nt", 1), ("lt", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: uas7616TerminationType.setStatus('mandatory')
uas7616ChADataRate = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 12, 4, 3, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("kbps64", 1), ("kbps128", 2), ("inhibit", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: uas7616ChADataRate.setStatus('mandatory')
uas7616ChBDataRate = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 12, 4, 3, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("kbps64", 1), ("inhibit", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: uas7616ChBDataRate.setStatus('mandatory')
uas7616ControlTable = MibTable((1, 3, 6, 1, 4, 1, 498, 12, 4, 5), )
if mibBuilder.loadTexts: uas7616ControlTable.setStatus('mandatory')
uas7616ControlEntry = MibTableRow((1, 3, 6, 1, 4, 1, 498, 12, 4, 5, 1), ).setIndexNames((0, "GDC7616-MIB", "uas7616ControlIndex"))
if mibBuilder.loadTexts: uas7616ControlEntry.setStatus('mandatory')
uas7616ControlIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 12, 4, 5, 1, 1), SCinstance()).setMaxAccess("readonly")
if mibBuilder.loadTexts: uas7616ControlIndex.setStatus('mandatory')
uas7616SoftReset = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 12, 4, 5, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("normal", 1), ("reset", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: uas7616SoftReset.setStatus('mandatory')
uas7616EraseConfig = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 12, 4, 5, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("normal", 1), ("erase", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: uas7616EraseConfig.setStatus('mandatory')
uas7616LEDStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 12, 4, 5, 1, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(3, 3)).setFixedLength(3)).setMaxAccess("readonly")
if mibBuilder.loadTexts: uas7616LEDStatus.setStatus('mandatory')
uas7616InterfaceType = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 12, 4, 5, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("diu", 1), ("niu", 2), ("notAssigned", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: uas7616InterfaceType.setStatus('mandatory')
uas7616SysTimingGen = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 12, 4, 5, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("none", 1), ("primary", 2), ("secondary", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: uas7616SysTimingGen.setStatus('mandatory')
uas7616ResetIntervals = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 12, 4, 5, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("reset", 1), ("normal", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: uas7616ResetIntervals.setStatus('mandatory')
uas7616SysUpTime = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 12, 4, 5, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: uas7616SysUpTime.setStatus('mandatory')
uas7616SetRealTime = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 12, 4, 5, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: uas7616SetRealTime.setStatus('mandatory')
uas7616ModuleClkSrc = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 12, 4, 5, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("system", 1), ("internal", 2), ("recovered", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: uas7616ModuleClkSrc.setStatus('mandatory')
uas7616ResetMajorAlarm = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 12, 4, 5, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("reset", 1), ("norm", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: uas7616ResetMajorAlarm.setStatus('mandatory')
uas7616ResetMinorAlarm = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 12, 4, 5, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("reset", 1), ("norm", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: uas7616ResetMinorAlarm.setStatus('mandatory')
uas7616DiagnosticTable = MibTable((1, 3, 6, 1, 4, 1, 498, 12, 4, 6), )
if mibBuilder.loadTexts: uas7616DiagnosticTable.setStatus('mandatory')
uas7616DiagnosticEntry = MibTableRow((1, 3, 6, 1, 4, 1, 498, 12, 4, 6, 1), ).setIndexNames((0, "GDC7616-MIB", "uas7616DiagnosticIndex"), (0, "GDC7616-MIB", "uas7616DiagnosticChnlIndex"))
if mibBuilder.loadTexts: uas7616DiagnosticEntry.setStatus('mandatory')
uas7616DiagnosticIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 12, 4, 6, 1, 1), SCinstance()).setMaxAccess("readonly")
if mibBuilder.loadTexts: uas7616DiagnosticIndex.setStatus('mandatory')
uas7616DiagnosticChnlIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 12, 4, 6, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("channelA", 1), ("channelB", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: uas7616DiagnosticChnlIndex.setStatus('mandatory')
uas7616DiagnosticTest = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 12, 4, 6, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("stopTest", 1), ("digitalLoopback", 2), ("patternGenTest", 3), ("unitTest", 4), ("rdl", 5), ("rdlSelfTest", 6)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: uas7616DiagnosticTest.setStatus('mandatory')
uas7616DiagnosticResetErrorCount = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 12, 4, 6, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("norm", 1), ("reset", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: uas7616DiagnosticResetErrorCount.setStatus('mandatory')
uas7616DiagnosticResults = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 12, 4, 6, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2097153))).setMaxAccess("readonly")
if mibBuilder.loadTexts: uas7616DiagnosticResults.setStatus('mandatory')
uas7616Alarm = MibIdentifier((1, 3, 6, 1, 4, 1, 498, 12, 13))
uas7616AlarmData = MibIdentifier((1, 3, 6, 1, 4, 1, 498, 12, 13, 1))
uas7616NoResponseAlm = MibIdentifier((1, 3, 6, 1, 4, 1, 498, 12, 13, 1, 1))
uas7616DiagRxErrAlm = MibIdentifier((1, 3, 6, 1, 4, 1, 498, 12, 13, 1, 2))
uas7616PowerUpAlm = MibIdentifier((1, 3, 6, 1, 4, 1, 498, 12, 13, 1, 3))
uas7616LossOfClockAlm = MibIdentifier((1, 3, 6, 1, 4, 1, 498, 12, 13, 1, 4))
uas7616LpOutofSyncAlm = MibIdentifier((1, 3, 6, 1, 4, 1, 498, 12, 13, 1, 5))
uas7616LpSealingCurrentNoContinuityAlm = MibIdentifier((1, 3, 6, 1, 4, 1, 498, 12, 13, 1, 6))
uas7616LpUnavailableSecondAlm = MibIdentifier((1, 3, 6, 1, 4, 1, 498, 12, 13, 1, 7))
uas7616LpSeverelyErroredSecondAlm = MibIdentifier((1, 3, 6, 1, 4, 1, 498, 12, 13, 1, 8))
uas7616LpErroredSecondAlm = MibIdentifier((1, 3, 6, 1, 4, 1, 498, 12, 13, 1, 9))
uas7616AlarmConfigTable = MibTable((1, 3, 6, 1, 4, 1, 498, 12, 13, 2), )
if mibBuilder.loadTexts: uas7616AlarmConfigTable.setStatus('mandatory')
uas7616AlarmConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 498, 12, 13, 2, 1), ).setIndexNames((0, "GDC7616-MIB", "uas7616AlarmConfigIndex"), (0, "GDC7616-MIB", "uas7616AlarmConfigIdentifier"))
if mibBuilder.loadTexts: uas7616AlarmConfigEntry.setStatus('mandatory')
uas7616AlarmConfigIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 12, 13, 2, 1, 1), SCinstance()).setMaxAccess("readonly")
if mibBuilder.loadTexts: uas7616AlarmConfigIndex.setStatus('mandatory')
uas7616AlarmConfigIdentifier = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 12, 13, 2, 1, 2), ObjectIdentifier()).setMaxAccess("readonly")
if mibBuilder.loadTexts: uas7616AlarmConfigIdentifier.setStatus('mandatory')
uas7616AlarmCountWindow = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 12, 13, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9))).clone(namedValues=NamedValues(("disabled", 1), ("last1sec", 2), ("last10secs", 3), ("last30secs", 4), ("last1min", 5), ("last15min", 6), ("last1hr", 7), ("last24hrs", 8), ("infinite", 9)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: uas7616AlarmCountWindow.setStatus('mandatory')
uas7616AlarmCountThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 12, 13, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("occurrence1x", 1), ("occurrence3x", 2), ("occurrence10x", 3), ("occurrence100x", 4), ("occurrence1Kx", 5), ("occurrence10Kx", 6)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: uas7616AlarmCountThreshold.setStatus('mandatory')
uas7616Current15MinTable = MibTable((1, 3, 6, 1, 4, 1, 498, 12, 4, 8), )
if mibBuilder.loadTexts: uas7616Current15MinTable.setStatus('mandatory')
uas7616Current15MinEntry = MibTableRow((1, 3, 6, 1, 4, 1, 498, 12, 4, 8, 1), ).setIndexNames((0, "GDC7616-MIB", "uas7616Current15MinIndex"))
if mibBuilder.loadTexts: uas7616Current15MinEntry.setStatus('mandatory')
uas7616Current15MinIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 12, 4, 8, 1, 1), SCinstance()).setMaxAccess("readonly")
if mibBuilder.loadTexts: uas7616Current15MinIndex.setStatus('mandatory')
uas7616Current15MinStat = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 12, 4, 8, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(10, 10)).setFixedLength(10)).setMaxAccess("readonly")
if mibBuilder.loadTexts: uas7616Current15MinStat.setStatus('mandatory')
uas7616IntervalTable = MibTable((1, 3, 6, 1, 4, 1, 498, 12, 4, 9), )
if mibBuilder.loadTexts: uas7616IntervalTable.setStatus('mandatory')
uas7616IntervalEntry = MibTableRow((1, 3, 6, 1, 4, 1, 498, 12, 4, 9, 1), ).setIndexNames((0, "GDC7616-MIB", "uas7616IntervalIndex"), (0, "GDC7616-MIB", "uas7616IntervalNumber"))
if mibBuilder.loadTexts: uas7616IntervalEntry.setStatus('mandatory')
uas7616IntervalIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 12, 4, 9, 1, 1), SCinstance()).setMaxAccess("readonly")
if mibBuilder.loadTexts: uas7616IntervalIndex.setStatus('mandatory')
uas7616IntervalNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 12, 4, 9, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: uas7616IntervalNumber.setStatus('mandatory')
uas7616IntervalStat = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 12, 4, 9, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(11, 11)).setFixedLength(11)).setMaxAccess("readonly")
if mibBuilder.loadTexts: uas7616IntervalStat.setStatus('mandatory')
uas7616Current24HrTable = MibTable((1, 3, 6, 1, 4, 1, 498, 12, 4, 10), )
if mibBuilder.loadTexts: uas7616Current24HrTable.setStatus('mandatory')
uas7616Current24HrEntry = MibTableRow((1, 3, 6, 1, 4, 1, 498, 12, 4, 10, 1), ).setIndexNames((0, "GDC7616-MIB", "uas7616Current24HrIndex"))
if mibBuilder.loadTexts: uas7616Current24HrEntry.setStatus('mandatory')
uas7616Current24HrIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 12, 4, 10, 1, 1), SCinstance()).setMaxAccess("readonly")
if mibBuilder.loadTexts: uas7616Current24HrIndex.setStatus('mandatory')
uas7616Current24HrStat = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 12, 4, 10, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(14, 14)).setFixedLength(14)).setMaxAccess("readonly")
if mibBuilder.loadTexts: uas7616Current24HrStat.setStatus('mandatory')
uas7616Recent24HrTable = MibTable((1, 3, 6, 1, 4, 1, 498, 12, 4, 11), )
if mibBuilder.loadTexts: uas7616Recent24HrTable.setStatus('mandatory')
uas7616Recent24HrEntry = MibTableRow((1, 3, 6, 1, 4, 1, 498, 12, 4, 11, 1), ).setIndexNames((0, "GDC7616-MIB", "uas7616Recent24HrIndex"))
if mibBuilder.loadTexts: uas7616Recent24HrEntry.setStatus('mandatory')
uas7616Recent24HrIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 12, 4, 11, 1, 1), SCinstance()).setMaxAccess("readonly")
if mibBuilder.loadTexts: uas7616Recent24HrIndex.setStatus('mandatory')
uas7616Recent24HrStat = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 12, 4, 11, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(14, 14)).setFixedLength(14)).setMaxAccess("readonly")
if mibBuilder.loadTexts: uas7616Recent24HrStat.setStatus('mandatory')
uas7616UnavailableTimeRegTable = MibTable((1, 3, 6, 1, 4, 1, 498, 12, 4, 12), )
if mibBuilder.loadTexts: uas7616UnavailableTimeRegTable.setStatus('mandatory')
uas7616UnavailableTimeRegEntry = MibTableRow((1, 3, 6, 1, 4, 1, 498, 12, 4, 12, 1), ).setIndexNames((0, "GDC7616-MIB", "uas7616UnavailableTimeRegIndex"), (0, "GDC7616-MIB", "uas7616UnavailableTimeRegNumber"))
if mibBuilder.loadTexts: uas7616UnavailableTimeRegEntry.setStatus('mandatory')
uas7616UnavailableTimeRegIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 12, 4, 12, 1, 1), SCinstance()).setMaxAccess("readonly")
if mibBuilder.loadTexts: uas7616UnavailableTimeRegIndex.setStatus('mandatory')
uas7616UnavailableTimeRegNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 12, 4, 12, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 6))).setMaxAccess("readonly")
if mibBuilder.loadTexts: uas7616UnavailableTimeRegNumber.setStatus('mandatory')
uas7616UnavailableTimeRegStart = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 12, 4, 12, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: uas7616UnavailableTimeRegStart.setStatus('mandatory')
uas7616UnavailableTimeRegStop = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 12, 4, 12, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: uas7616UnavailableTimeRegStop.setStatus('mandatory')
uas7616IntervalMaintenanceTable = MibTable((1, 3, 6, 1, 4, 1, 498, 12, 4, 13), )
if mibBuilder.loadTexts: uas7616IntervalMaintenanceTable.setStatus('mandatory')
uas7616IntervalMaintenanceEntry = MibTableRow((1, 3, 6, 1, 4, 1, 498, 12, 4, 13, 1), ).setIndexNames((0, "GDC7616-MIB", "uas7616IntervalMaintenanceIndex"))
if mibBuilder.loadTexts: uas7616IntervalMaintenanceEntry.setStatus('mandatory')
uas7616IntervalMaintenanceIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 12, 4, 13, 1, 1), SCinstance()).setMaxAccess("readonly")
if mibBuilder.loadTexts: uas7616IntervalMaintenanceIndex.setStatus('mandatory')
uas7616NumberofValidIntervals = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 12, 4, 13, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: uas7616NumberofValidIntervals.setStatus('mandatory')
uas7616LocalAlarmConfigTable = MibTable((1, 3, 6, 1, 4, 1, 498, 12, 4, 14), )
if mibBuilder.loadTexts: uas7616LocalAlarmConfigTable.setStatus('mandatory')
uas7616LocalAlarmConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 498, 12, 4, 14, 1), ).setIndexNames((0, "GDC7616-MIB", "uas7616LocalAlarmConfigIndex"))
if mibBuilder.loadTexts: uas7616LocalAlarmConfigEntry.setStatus('mandatory')
uas7616LocalAlarmConfigIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 12, 4, 14, 1, 1), SCinstance()).setMaxAccess("readonly")
if mibBuilder.loadTexts: uas7616LocalAlarmConfigIndex.setStatus('mandatory')
uas7616LocalLossOfClock = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 12, 4, 14, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("disabled", 1), ("enabledMajor", 2), ("enabledMinor", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: uas7616LocalLossOfClock.setStatus('mandatory')
uas7616LocalUAS = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 12, 4, 14, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("disabled", 1), ("enabledMajor", 2), ("enabledMinor", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: uas7616LocalUAS.setStatus('mandatory')
uas7616LocalSES = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 12, 4, 14, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("disabled", 1), ("enabledMajor", 2), ("enabledMinor", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: uas7616LocalSES.setStatus('mandatory')
uas7616LocalES = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 12, 4, 14, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("disabled", 1), ("enabledMajor", 2), ("enabledMinor", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: uas7616LocalES.setStatus('mandatory')
uas7616LocalOutOfSync = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 12, 4, 14, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("disabled", 1), ("enabledMajor", 2), ("enabledMinor", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: uas7616LocalOutOfSync.setStatus('mandatory')
uas7616LocalNoSealingCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 12, 4, 14, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("disabled", 1), ("enabledMajor", 2), ("enabledMinor", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: uas7616LocalNoSealingCurrent.setStatus('mandatory')
uas7616LPMajor = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 12, 4, 14, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("disabled", 1), ("enabledMajor", 2), ("enabledMinor", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: uas7616LPMajor.setStatus('mandatory')
uas7616LPMinor = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 12, 4, 14, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("disabled", 1), ("enabledMajor", 2), ("enabledMinor", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: uas7616LPMinor.setStatus('mandatory')
uas7616TSAssignTable = MibTable((1, 3, 6, 1, 4, 1, 498, 12, 4, 15), )
if mibBuilder.loadTexts: uas7616TSAssignTable.setStatus('mandatory')
uas7616TSAssignEntry = MibTableRow((1, 3, 6, 1, 4, 1, 498, 12, 4, 15, 1), ).setIndexNames((0, "GDC7616-MIB", "uas7616TSAssignIndex"), (0, "GDC7616-MIB", "uas7616ChannelIndex"))
if mibBuilder.loadTexts: uas7616TSAssignEntry.setStatus('mandatory')
uas7616TSAssignIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 12, 4, 15, 1, 1), SCinstance()).setMaxAccess("readonly")
if mibBuilder.loadTexts: uas7616TSAssignIndex.setStatus('mandatory')
uas7616ChannelIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 12, 4, 15, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("channelA", 1), ("channelB", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: uas7616ChannelIndex.setStatus('mandatory')
uas7616Highway = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 12, 4, 15, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("notAssigned", 1), ("highway1", 2), ("highway2", 3), ("highway3", 4), ("highway4", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: uas7616Highway.setStatus('mandatory')
uas7616TimeSlot = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 12, 4, 15, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 64))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: uas7616TimeSlot.setStatus('mandatory')
uas7616TSCircuitID = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 12, 4, 15, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(16, 16)).setFixedLength(16)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: uas7616TSCircuitID.setStatus('mandatory')
uas7616mAlarm = MibIdentifier((1, 3, 6, 1, 4, 1, 498, 12, 14))
uas7616mAlarmData = MibIdentifier((1, 3, 6, 1, 4, 1, 498, 12, 14, 1))
uas7616mNoResponseAlm = MibIdentifier((1, 3, 6, 1, 4, 1, 498, 12, 14, 1, 1))
uas7616mDiagRxErrAlm = MibIdentifier((1, 3, 6, 1, 4, 1, 498, 12, 14, 1, 2))
uas7616mPowerUpAlm = MibIdentifier((1, 3, 6, 1, 4, 1, 498, 12, 14, 1, 3))
uas7616mLossOfClockAlm = MibIdentifier((1, 3, 6, 1, 4, 1, 498, 12, 14, 1, 4))
uas7616mLpOutofSyncAlm = MibIdentifier((1, 3, 6, 1, 4, 1, 498, 12, 14, 1, 5))
uas7616mLpSealingCurrentNoContinuityAlm = MibIdentifier((1, 3, 6, 1, 4, 1, 498, 12, 14, 1, 6))
uas7616mLpUnavailableSecondAlm = MibIdentifier((1, 3, 6, 1, 4, 1, 498, 12, 14, 1, 7))
uas7616mLpErroredSecondAlm = MibIdentifier((1, 3, 6, 1, 4, 1, 498, 12, 14, 1, 8))
uas7616mLPMajorAlm = MibIdentifier((1, 3, 6, 1, 4, 1, 498, 12, 14, 1, 9))
uas7616mLPMinorAlm = MibIdentifier((1, 3, 6, 1, 4, 1, 498, 12, 14, 1, 10))
uas7616mAlarmConfigTable = MibTable((1, 3, 6, 1, 4, 1, 498, 12, 14, 2), )
if mibBuilder.loadTexts: uas7616mAlarmConfigTable.setStatus('mandatory')
uas7616mAlarmConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 498, 12, 14, 2, 1), ).setIndexNames((0, "GDC7616-MIB", "uas7616mAlarmConfigIndex"), (0, "GDC7616-MIB", "uas7616mAlarmConfigIdentifier"))
if mibBuilder.loadTexts: uas7616mAlarmConfigEntry.setStatus('mandatory')
uas7616mAlarmConfigIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 12, 14, 2, 1, 1), SCinstance()).setMaxAccess("readonly")
if mibBuilder.loadTexts: uas7616mAlarmConfigIndex.setStatus('mandatory')
uas7616mAlarmConfigIdentifier = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 12, 14, 2, 1, 2), ObjectIdentifier()).setMaxAccess("readonly")
if mibBuilder.loadTexts: uas7616mAlarmConfigIdentifier.setStatus('mandatory')
uas7616mAlarmCountThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 12, 14, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("thres10E03", 1), ("thres10E04", 2), ("thres10E05", 3), ("thres10E06", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: uas7616mAlarmCountThreshold.setStatus('mandatory')
mibBuilder.exportSymbols("GDC7616-MIB", uas7616LocalAlarmConfigIndex=uas7616LocalAlarmConfigIndex, uas7616UnavailableTimeRegStop=uas7616UnavailableTimeRegStop, uas7616DiagnosticChnlIndex=uas7616DiagnosticChnlIndex, uas7616Current15MinStat=uas7616Current15MinStat, uas7616UnavailableTimeRegEntry=uas7616UnavailableTimeRegEntry, uas7616UnavailableTimeRegIndex=uas7616UnavailableTimeRegIndex, uas7616IntervalNumber=uas7616IntervalNumber, uas7616ConfigTable=uas7616ConfigTable, uas7616Current15MinTable=uas7616Current15MinTable, uas7616LocalLossOfClock=uas7616LocalLossOfClock, uas7616DiagnosticIndex=uas7616DiagnosticIndex, uas7616LocalOutOfSync=uas7616LocalOutOfSync, uas7616DiagnosticResults=uas7616DiagnosticResults, bql2=bql2, uas7616UnavailableTimeRegNumber=uas7616UnavailableTimeRegNumber, uas7616mLpSealingCurrentNoContinuityAlm=uas7616mLpSealingCurrentNoContinuityAlm, uas7616Highway=uas7616Highway, uas7616IntervalMaintenanceTable=uas7616IntervalMaintenanceTable, uas7616mAlarmConfigIndex=uas7616mAlarmConfigIndex, uas7616LPMinor=uas7616LPMinor, uas7616ControlIndex=uas7616ControlIndex, uas7616SysTimingGen=uas7616SysTimingGen, uas7616LpSealingCurrentNoContinuityAlm=uas7616LpSealingCurrentNoContinuityAlm, uas7616IntervalIndex=uas7616IntervalIndex, uas7616Current24HrEntry=uas7616Current24HrEntry, uas7616TSCircuitID=uas7616TSCircuitID, uas7616Alarm=uas7616Alarm, uas7616mLossOfClockAlm=uas7616mLossOfClockAlm, uas7616mLpErroredSecondAlm=uas7616mLpErroredSecondAlm, uas7616TerminationType=uas7616TerminationType, uas7616IntervalMaintenanceEntry=uas7616IntervalMaintenanceEntry, uas7616AlarmStatus=uas7616AlarmStatus, uas7616DiagnosticTable=uas7616DiagnosticTable, uas7616Current24HrStat=uas7616Current24HrStat, uas7616Current24HrTable=uas7616Current24HrTable, uas7616DiagnosticEntry=uas7616DiagnosticEntry, uas7616AlarmConfigEntry=uas7616AlarmConfigEntry, uas7616LossOfClockAlm=uas7616LossOfClockAlm, uas7616IntervalStat=uas7616IntervalStat, uas7616AlarmCountWindow=uas7616AlarmCountWindow, uas7616LPMajor=uas7616LPMajor, uas7616ChADataRate=uas7616ChADataRate, uas7616SystemTimingGenStatus=uas7616SystemTimingGenStatus, uas7616ChBDataRate=uas7616ChBDataRate, uas7616Recent24HrEntry=uas7616Recent24HrEntry, uas7616mAlarmConfigTable=uas7616mAlarmConfigTable, uas7616Current15MinIndex=uas7616Current15MinIndex, uas7616mPowerUpAlm=uas7616mPowerUpAlm, uas7616UnavailableTimeRegTable=uas7616UnavailableTimeRegTable, uas7616LocalAlarmConfigEntry=uas7616LocalAlarmConfigEntry, uas7616NoResponseAlm=uas7616NoResponseAlm, uas7616mAlarmConfigIdentifier=uas7616mAlarmConfigIdentifier, uas7616UnavailableTimeRegStart=uas7616UnavailableTimeRegStart, uas7616mLPMajorAlm=uas7616mLPMajorAlm, uas7616NumberofValidIntervals=uas7616NumberofValidIntervals, uas7616ControlTable=uas7616ControlTable, uas7616mAlarmConfigEntry=uas7616mAlarmConfigEntry, uas7616TSAssignIndex=uas7616TSAssignIndex, uas7616SysUpTime=uas7616SysUpTime, uas7616AlarmConfigIndex=uas7616AlarmConfigIndex, uas7616EraseConfig=uas7616EraseConfig, uas7616TSAssignEntry=uas7616TSAssignEntry, uas7616SoftReset=uas7616SoftReset, uas7616ConfigEntry=uas7616ConfigEntry, uas7616LpErroredSecondAlm=uas7616LpErroredSecondAlm, uas7616ConfigIndex=uas7616ConfigIndex, uas7616mAlarmData=uas7616mAlarmData, uas7616LocalUAS=uas7616LocalUAS, uas7616ResetMinorAlarm=uas7616ResetMinorAlarm, uas7616=uas7616, uas7616LocalES=uas7616LocalES, uas7616LpUnavailableSecondAlm=uas7616LpUnavailableSecondAlm, uas7616mLPMinorAlm=uas7616mLPMinorAlm, uas7616IntervalMaintenanceIndex=uas7616IntervalMaintenanceIndex, uas7616Recent24HrIndex=uas7616Recent24HrIndex, uas7616LocalSES=uas7616LocalSES, uas7616mDiagRxErrAlm=uas7616mDiagRxErrAlm, uas7616InterfaceType=uas7616InterfaceType, uas7616LocalAlarmConfigTable=uas7616LocalAlarmConfigTable, uas7616ChannelIndex=uas7616ChannelIndex, uas7616ResetIntervals=uas7616ResetIntervals, uas7616TimeSlot=uas7616TimeSlot, uas7616mAlarmCountThreshold=uas7616mAlarmCountThreshold, uas7616mLpOutofSyncAlm=uas7616mLpOutofSyncAlm, uas7616MIBVersion=uas7616MIBVersion, uas7616WhatAreYouTable=uas7616WhatAreYouTable, uas7616ResetMajorAlarm=uas7616ResetMajorAlarm, uas7616DiagnosticResetErrorCount=uas7616DiagnosticResetErrorCount, uas7616IntervalTable=uas7616IntervalTable, uas7616ControlEntry=uas7616ControlEntry, uas7616LpOutofSyncAlm=uas7616LpOutofSyncAlm, uas7616LEDStatus=uas7616LEDStatus, uas7616mAlarm=uas7616mAlarm, uas7616DiagnosticTest=uas7616DiagnosticTest, uas7616AlarmConfigTable=uas7616AlarmConfigTable, uas7616AlarmData=uas7616AlarmData, uas7616DiagRxErrAlm=uas7616DiagRxErrAlm, uas7616IntervalEntry=uas7616IntervalEntry, uas7616LocalNoSealingCurrent=uas7616LocalNoSealingCurrent, uas7616Current15MinEntry=uas7616Current15MinEntry, uas7616AlarmCountThreshold=uas7616AlarmCountThreshold, uas7616WhatAreYouEntry=uas7616WhatAreYouEntry, uas7616TXClockSource=uas7616TXClockSource, uas7616Current24HrIndex=uas7616Current24HrIndex, uas7616Recent24HrStat=uas7616Recent24HrStat, uas7616WhatAreYouIndex=uas7616WhatAreYouIndex, uas7616Recent24HrTable=uas7616Recent24HrTable, uas7616SetRealTime=uas7616SetRealTime, uas7616PowerUpAlm=uas7616PowerUpAlm, uas7616LpSeverelyErroredSecondAlm=uas7616LpSeverelyErroredSecondAlm, uas7616CodeRev=uas7616CodeRev, gdc=gdc, uas7616mLpUnavailableSecondAlm=uas7616mLpUnavailableSecondAlm, uas7616mNoResponseAlm=uas7616mNoResponseAlm, uas7616TSAssignTable=uas7616TSAssignTable, uas7616AlarmConfigIdentifier=uas7616AlarmConfigIdentifier, uas7616ModuleClkSrc=uas7616ModuleClkSrc)
