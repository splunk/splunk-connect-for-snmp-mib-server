#
# PySNMP MIB module IPFILTER (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/IPFILTER
# Produced by pysmi-0.3.4 at Mon Apr 29 19:44:42 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, ObjectIdentifier, OctetString = mibBuilder.importSymbols("ASN1", "Integer", "ObjectIdentifier", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
SingleValueConstraint, ConstraintsUnion, ValueSizeConstraint, ConstraintsIntersection, ValueRangeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "SingleValueConstraint", "ConstraintsUnion", "ValueSizeConstraint", "ConstraintsIntersection", "ValueRangeConstraint")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
Bits, Unsigned32, Counter64, enterprises, iso, MibIdentifier, TimeTicks, ObjectIdentity, Counter32, MibScalar, MibTable, MibTableRow, MibTableColumn, ModuleIdentity, Gauge32, Integer32, NotificationType, IpAddress = mibBuilder.importSymbols("SNMPv2-SMI", "Bits", "Unsigned32", "Counter64", "enterprises", "iso", "MibIdentifier", "TimeTicks", "ObjectIdentity", "Counter32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "ModuleIdentity", "Gauge32", "Integer32", "NotificationType", "IpAddress")
TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString")
ucdExperimental, = mibBuilder.importSymbols("UCD-SNMP-MIB", "ucdExperimental")
ipFilter = MibIdentifier((1, 3, 6, 1, 4, 1, 2021, 13, 2))
ipfInTable = MibTable((1, 3, 6, 1, 4, 1, 2021, 13, 2, 1), )
if mibBuilder.loadTexts: ipfInTable.setStatus('mandatory')
ipfInEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2021, 13, 2, 1, 1), ).setIndexNames((0, "IPFILTER", "ipfInIndex"))
if mibBuilder.loadTexts: ipfInEntry.setStatus('mandatory')
ipfInIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2021, 13, 2, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipfInIndex.setStatus('mandatory')
ipfInRule = MibTableColumn((1, 3, 6, 1, 4, 1, 2021, 13, 2, 1, 1, 2), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipfInRule.setStatus('mandatory')
ipfInHits = MibTableColumn((1, 3, 6, 1, 4, 1, 2021, 13, 2, 1, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipfInHits.setStatus('mandatory')
ipfOutTable = MibTable((1, 3, 6, 1, 4, 1, 2021, 13, 2, 2), )
if mibBuilder.loadTexts: ipfOutTable.setStatus('mandatory')
ipfOutEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2021, 13, 2, 2, 1), ).setIndexNames((0, "IPFILTER", "ipfOutIndex"))
if mibBuilder.loadTexts: ipfOutEntry.setStatus('mandatory')
ipfOutIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2021, 13, 2, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipfOutIndex.setStatus('mandatory')
ipfOutRule = MibTableColumn((1, 3, 6, 1, 4, 1, 2021, 13, 2, 2, 1, 2), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipfOutRule.setStatus('mandatory')
ipfOutHits = MibTableColumn((1, 3, 6, 1, 4, 1, 2021, 13, 2, 2, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipfOutHits.setStatus('mandatory')
ipfAccInTable = MibTable((1, 3, 6, 1, 4, 1, 2021, 13, 2, 3), )
if mibBuilder.loadTexts: ipfAccInTable.setStatus('mandatory')
ipfAccInEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2021, 13, 2, 3, 1), ).setIndexNames((0, "IPFILTER", "ipfAccInIndex"))
if mibBuilder.loadTexts: ipfAccInEntry.setStatus('mandatory')
ipfAccInIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2021, 13, 2, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipfAccInIndex.setStatus('mandatory')
ipfAccInRule = MibTableColumn((1, 3, 6, 1, 4, 1, 2021, 13, 2, 3, 1, 2), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipfAccInRule.setStatus('mandatory')
ipfAccInHits = MibTableColumn((1, 3, 6, 1, 4, 1, 2021, 13, 2, 3, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipfAccInHits.setStatus('mandatory')
ipfAccInBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 2021, 13, 2, 3, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipfAccInBytes.setStatus('mandatory')
ipfAccOutTable = MibTable((1, 3, 6, 1, 4, 1, 2021, 13, 2, 4), )
if mibBuilder.loadTexts: ipfAccOutTable.setStatus('mandatory')
ipfAccOutEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2021, 13, 2, 4, 1), ).setIndexNames((0, "IPFILTER", "ipfAccOutIndex"))
if mibBuilder.loadTexts: ipfAccOutEntry.setStatus('mandatory')
ipfAccOutIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2021, 13, 2, 4, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipfAccOutIndex.setStatus('mandatory')
ipfAccOutRule = MibTableColumn((1, 3, 6, 1, 4, 1, 2021, 13, 2, 4, 1, 2), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipfAccOutRule.setStatus('mandatory')
ipfAccOutHits = MibTableColumn((1, 3, 6, 1, 4, 1, 2021, 13, 2, 4, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipfAccOutHits.setStatus('mandatory')
ipfAccOutBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 2021, 13, 2, 4, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipfAccOutBytes.setStatus('mandatory')
mibBuilder.exportSymbols("IPFILTER", ipfAccInHits=ipfAccInHits, ipfAccOutEntry=ipfAccOutEntry, ipfInIndex=ipfInIndex, ipfAccOutIndex=ipfAccOutIndex, ipfAccInRule=ipfAccInRule, ipfAccInEntry=ipfAccInEntry, ipfInRule=ipfInRule, ipfAccInIndex=ipfAccInIndex, ipfAccOutRule=ipfAccOutRule, ipfAccOutHits=ipfAccOutHits, ipfAccOutBytes=ipfAccOutBytes, ipfAccInBytes=ipfAccInBytes, ipfAccOutTable=ipfAccOutTable, ipfOutEntry=ipfOutEntry, ipfOutRule=ipfOutRule, ipfOutTable=ipfOutTable, ipfInEntry=ipfInEntry, ipfInTable=ipfInTable, ipfInHits=ipfInHits, ipfAccInTable=ipfAccInTable, ipfOutIndex=ipfOutIndex, ipFilter=ipFilter, ipfOutHits=ipfOutHits)
