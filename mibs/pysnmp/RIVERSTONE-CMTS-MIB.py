#
# PySNMP MIB module RIVERSTONE-CMTS-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/RIVERSTONE-CMTS-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 20:49:03 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, Integer, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "OctetString", "Integer", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueSizeConstraint, SingleValueConstraint, ConstraintsIntersection, ConstraintsUnion, ValueRangeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueSizeConstraint", "SingleValueConstraint", "ConstraintsIntersection", "ConstraintsUnion", "ValueRangeConstraint")
docsIfCmtsModIndex, docsIfCmtsModIntervalUsageCode = mibBuilder.importSymbols("DOCS-IF-MIB", "docsIfCmtsModIndex", "docsIfCmtsModIntervalUsageCode")
ifIndex, = mibBuilder.importSymbols("IF-MIB", "ifIndex")
riverstoneMibs, = mibBuilder.importSymbols("RSTONE-SMI-MIB", "riverstoneMibs")
NotificationGroup, ObjectGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ObjectGroup", "ModuleCompliance")
IpAddress, NotificationType, Counter32, Bits, Counter64, Unsigned32, MibIdentifier, MibScalar, MibTable, MibTableRow, MibTableColumn, Integer32, ModuleIdentity, iso, Gauge32, ObjectIdentity, TimeTicks = mibBuilder.importSymbols("SNMPv2-SMI", "IpAddress", "NotificationType", "Counter32", "Bits", "Counter64", "Unsigned32", "MibIdentifier", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Integer32", "ModuleIdentity", "iso", "Gauge32", "ObjectIdentity", "TimeTicks")
TruthValue, TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TruthValue", "TextualConvention", "DisplayString")
rsCmtsMib = ModuleIdentity((1, 3, 6, 1, 4, 1, 5567, 2, 11))
rsCmtsMib.setRevisions(('2000-07-08 00:00',))
if mibBuilder.loadTexts: rsCmtsMib.setLastUpdated('200007080000Z')
if mibBuilder.loadTexts: rsCmtsMib.setOrganization('Riverstone Networks, Inc')
class RsCmtsCmdStatus(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5))
    namedValues = NamedValues(("undefined", 0), ("active", 1), ("startup", 2), ("process", 3), ("success", 4), ("failed", 5))

rsCmtsBaseTable = MibTable((1, 3, 6, 1, 4, 1, 5567, 2, 11, 1), )
if mibBuilder.loadTexts: rsCmtsBaseTable.setStatus('current')
rsCmtsBaseEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5567, 2, 11, 1, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: rsCmtsBaseEntry.setStatus('current')
rsCmtsBaseBpduFilter = MibTableColumn((1, 3, 6, 1, 4, 1, 5567, 2, 11, 1, 1, 2), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rsCmtsBaseBpduFilter.setStatus('current')
rsCmtsBaseBpduFilterHits = MibTableColumn((1, 3, 6, 1, 4, 1, 5567, 2, 11, 1, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rsCmtsBaseBpduFilterHits.setStatus('current')
rsCmtsBaseNonIPFilter = MibTableColumn((1, 3, 6, 1, 4, 1, 5567, 2, 11, 1, 1, 4), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rsCmtsBaseNonIPFilter.setStatus('current')
rsCmtsBaseNonIPFilterHits = MibTableColumn((1, 3, 6, 1, 4, 1, 5567, 2, 11, 1, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rsCmtsBaseNonIPFilterHits.setStatus('current')
rsCmtsBaseMapLength = MibTableColumn((1, 3, 6, 1, 4, 1, 5567, 2, 11, 1, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2000))).setUnits('Microseconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: rsCmtsBaseMapLength.setStatus('current')
rsCmtsBaseMapLeadTime = MibTableColumn((1, 3, 6, 1, 4, 1, 5567, 2, 11, 1, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2000))).setUnits('Microseconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: rsCmtsBaseMapLeadTime.setStatus('current')
rsCmtsBaseInitMaintLength = MibTableColumn((1, 3, 6, 1, 4, 1, 5567, 2, 11, 1, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2000))).setUnits('Microseconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: rsCmtsBaseInitMaintLength.setStatus('current')
rsCmtsBase3137Config1 = MibTableColumn((1, 3, 6, 1, 4, 1, 5567, 2, 11, 1, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rsCmtsBase3137Config1.setStatus('current')
rsCmtsBase3137Config2 = MibTableColumn((1, 3, 6, 1, 4, 1, 5567, 2, 11, 1, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rsCmtsBase3137Config2.setStatus('current')
rsCmtsBaseConcatenation = MibTableColumn((1, 3, 6, 1, 4, 1, 5567, 2, 11, 1, 1, 11), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rsCmtsBaseConcatenation.setStatus('current')
rsCmtsBaseBpiHwAssist = MibTableColumn((1, 3, 6, 1, 4, 1, 5567, 2, 11, 1, 1, 12), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rsCmtsBaseBpiHwAssist.setStatus('current')
rsCmtsBaseGenericCmd = MibTableColumn((1, 3, 6, 1, 4, 1, 5567, 2, 11, 1, 1, 13), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rsCmtsBaseGenericCmd.setStatus('current')
rsCmtsBaseGenericCmdStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 5567, 2, 11, 1, 1, 14), RsCmtsCmdStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rsCmtsBaseGenericCmdStatus.setStatus('current')
rsCmtsBaseUccRetryInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 5567, 2, 11, 1, 1, 15), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1000000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rsCmtsBaseUccRetryInterval.setStatus('current')
rsCmtsBaseUccRetries = MibTableColumn((1, 3, 6, 1, 4, 1, 5567, 2, 11, 1, 1, 16), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rsCmtsBaseUccRetries.setStatus('current')
rsCmtsUpstreamTable = MibTable((1, 3, 6, 1, 4, 1, 5567, 2, 11, 2), )
if mibBuilder.loadTexts: rsCmtsUpstreamTable.setStatus('current')
rsCmtsUpstreamEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5567, 2, 11, 2, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: rsCmtsUpstreamEntry.setStatus('current')
rsCmtsUpstreamNominalRxPower = MibTableColumn((1, 3, 6, 1, 4, 1, 5567, 2, 11, 2, 1, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rsCmtsUpstreamNominalRxPower.setStatus('current')
rsCmtsUpstreamState = MibTableColumn((1, 3, 6, 1, 4, 1, 5567, 2, 11, 2, 1, 2), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rsCmtsUpstreamState.setStatus('current')
rsCmtsUpstreamPolicing = MibTableColumn((1, 3, 6, 1, 4, 1, 5567, 2, 11, 2, 1, 3), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rsCmtsUpstreamPolicing.setStatus('current')
rsCmtsUpstreamRangeInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 5567, 2, 11, 2, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 30000))).setUnits('Milliseconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: rsCmtsUpstreamRangeInterval.setStatus('current')
rsCmtsUpstreamRangeRetryInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 5567, 2, 11, 2, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 30000))).setUnits('Milliseconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: rsCmtsUpstreamRangeRetryInterval.setStatus('current')
rsCmtsUpstreamPowerThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 5567, 2, 11, 2, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 30000))).setUnits('Quarter DBmv').setMaxAccess("readwrite")
if mibBuilder.loadTexts: rsCmtsUpstreamPowerThreshold.setStatus('current')
rsCmtsUpstreamPowerAdjust = MibTableColumn((1, 3, 6, 1, 4, 1, 5567, 2, 11, 2, 1, 7), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rsCmtsUpstreamPowerAdjust.setStatus('current')
rsCmtsUpstreamTimingAdjust = MibTableColumn((1, 3, 6, 1, 4, 1, 5567, 2, 11, 2, 1, 8), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rsCmtsUpstreamTimingAdjust.setStatus('current')
rsCmtsUpstreamFreqencyAdjust = MibTableColumn((1, 3, 6, 1, 4, 1, 5567, 2, 11, 2, 1, 9), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rsCmtsUpstreamFreqencyAdjust.setStatus('current')
rsCmtsUpstreamTXCoefficients = MibTableColumn((1, 3, 6, 1, 4, 1, 5567, 2, 11, 2, 1, 10), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rsCmtsUpstreamTXCoefficients.setStatus('current')
rsCmtsUpstreamForceContinue = MibTableColumn((1, 3, 6, 1, 4, 1, 5567, 2, 11, 2, 1, 11), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rsCmtsUpstreamForceContinue.setStatus('current')
rsCmtsUpstreamQosConfirm = MibTableColumn((1, 3, 6, 1, 4, 1, 5567, 2, 11, 2, 1, 12), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rsCmtsUpstreamQosConfirm.setStatus('current')
rsCmtsUpstreamQosMaxBps = MibTableColumn((1, 3, 6, 1, 4, 1, 5567, 2, 11, 2, 1, 13), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rsCmtsUpstreamQosMaxBps.setStatus('current')
rsCmtsModulationTable = MibTable((1, 3, 6, 1, 4, 1, 5567, 2, 11, 3), )
if mibBuilder.loadTexts: rsCmtsModulationTable.setStatus('current')
rsCmtsModulationEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5567, 2, 11, 3, 1), ).setIndexNames((0, "DOCS-IF-MIB", "docsIfCmtsModIndex"), (0, "DOCS-IF-MIB", "docsIfCmtsModIntervalUsageCode"))
if mibBuilder.loadTexts: rsCmtsModulationEntry.setStatus('current')
rsCmtsModulationUWLength = MibTableColumn((1, 3, 6, 1, 4, 1, 5567, 2, 11, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 3)).clone(1)).setMaxAccess("readonly")
if mibBuilder.loadTexts: rsCmtsModulationUWLength.setStatus('current')
rsCmtsModulationDetectWindow = MibTableColumn((1, 3, 6, 1, 4, 1, 5567, 2, 11, 3, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rsCmtsModulationDetectWindow.setStatus('current')
rsCmtsModulationUWMismatch = MibTableColumn((1, 3, 6, 1, 4, 1, 5567, 2, 11, 3, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 3))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rsCmtsModulationUWMismatch.setStatus('current')
rsCmtsModulationEQSymbols = MibTableColumn((1, 3, 6, 1, 4, 1, 5567, 2, 11, 3, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 512))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rsCmtsModulationEQSymbols.setStatus('current')
rsCmtsDownstreamTable = MibTable((1, 3, 6, 1, 4, 1, 5567, 2, 11, 4), )
if mibBuilder.loadTexts: rsCmtsDownstreamTable.setStatus('current')
rsCmtsDownstreamEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5567, 2, 11, 4, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: rsCmtsDownstreamEntry.setStatus('current')
rsCmtsDownstreamState = MibTableColumn((1, 3, 6, 1, 4, 1, 5567, 2, 11, 4, 1, 1), TruthValue().clone('true')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rsCmtsDownstreamState.setStatus('current')
rsCmtsDownstreamModulation = MibTableColumn((1, 3, 6, 1, 4, 1, 5567, 2, 11, 4, 1, 2), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rsCmtsDownstreamModulation.setStatus('current')
rsCmtsConformance = MibIdentifier((1, 3, 6, 1, 4, 1, 5567, 2, 11, 6))
rsCmtsGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 5567, 2, 11, 6, 1))
rsCmtsCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 5567, 2, 11, 6, 2))
rsCmtsBaseGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 5567, 2, 11, 6, 1, 1)).setObjects(("RIVERSTONE-CMTS-MIB", "rsCmtsBaseBpduFilter"), ("RIVERSTONE-CMTS-MIB", "rsCmtsBaseBpduFilterHits"), ("RIVERSTONE-CMTS-MIB", "rsCmtsBaseNonIPFilter"), ("RIVERSTONE-CMTS-MIB", "rsCmtsBaseNonIPFilterHits"), ("RIVERSTONE-CMTS-MIB", "rsCmtsBaseMapLength"), ("RIVERSTONE-CMTS-MIB", "rsCmtsBaseMapLeadTime"), ("RIVERSTONE-CMTS-MIB", "rsCmtsBaseInitMaintLength"), ("RIVERSTONE-CMTS-MIB", "rsCmtsBase3137Config1"), ("RIVERSTONE-CMTS-MIB", "rsCmtsBase3137Config2"), ("RIVERSTONE-CMTS-MIB", "rsCmtsBaseConcatenation"), ("RIVERSTONE-CMTS-MIB", "rsCmtsBaseBpiHwAssist"), ("RIVERSTONE-CMTS-MIB", "rsCmtsBaseGenericCmd"), ("RIVERSTONE-CMTS-MIB", "rsCmtsBaseGenericCmdStatus"), ("RIVERSTONE-CMTS-MIB", "rsCmtsBaseUccRetryInterval"), ("RIVERSTONE-CMTS-MIB", "rsCmtsBaseUccRetries"), ("RIVERSTONE-CMTS-MIB", "rsCmtsUpstreamNominalRxPower"), ("RIVERSTONE-CMTS-MIB", "rsCmtsUpstreamState"), ("RIVERSTONE-CMTS-MIB", "rsCmtsUpstreamPolicing"), ("RIVERSTONE-CMTS-MIB", "rsCmtsUpstreamRangeInterval"), ("RIVERSTONE-CMTS-MIB", "rsCmtsUpstreamRangeRetryInterval"), ("RIVERSTONE-CMTS-MIB", "rsCmtsUpstreamPowerThreshold"), ("RIVERSTONE-CMTS-MIB", "rsCmtsUpstreamPowerAdjust"), ("RIVERSTONE-CMTS-MIB", "rsCmtsUpstreamTimingAdjust"), ("RIVERSTONE-CMTS-MIB", "rsCmtsUpstreamFreqencyAdjust"), ("RIVERSTONE-CMTS-MIB", "rsCmtsUpstreamTXCoefficients"), ("RIVERSTONE-CMTS-MIB", "rsCmtsUpstreamForceContinue"), ("RIVERSTONE-CMTS-MIB", "rsCmtsUpstreamQosConfirm"), ("RIVERSTONE-CMTS-MIB", "rsCmtsUpstreamQosMaxBps"), ("RIVERSTONE-CMTS-MIB", "rsCmtsModulationUWLength"), ("RIVERSTONE-CMTS-MIB", "rsCmtsModulationDetectWindow"), ("RIVERSTONE-CMTS-MIB", "rsCmtsModulationUWMismatch"), ("RIVERSTONE-CMTS-MIB", "rsCmtsModulationEQSymbols"), ("RIVERSTONE-CMTS-MIB", "rsCmtsDownstreamState"), ("RIVERSTONE-CMTS-MIB", "rsCmtsDownstreamModulation"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    rsCmtsBaseGroup = rsCmtsBaseGroup.setStatus('current')
rsCmtsMibCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 5567, 2, 11, 6, 2, 1)).setObjects(("RIVERSTONE-CMTS-MIB", "rsCmtsBaseGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    rsCmtsMibCompliance = rsCmtsMibCompliance.setStatus('current')
mibBuilder.exportSymbols("RIVERSTONE-CMTS-MIB", rsCmtsBase3137Config1=rsCmtsBase3137Config1, rsCmtsConformance=rsCmtsConformance, rsCmtsCompliances=rsCmtsCompliances, rsCmtsBaseGroup=rsCmtsBaseGroup, rsCmtsBaseGenericCmd=rsCmtsBaseGenericCmd, rsCmtsUpstreamPowerThreshold=rsCmtsUpstreamPowerThreshold, rsCmtsModulationUWLength=rsCmtsModulationUWLength, rsCmtsBaseUccRetries=rsCmtsBaseUccRetries, rsCmtsBaseBpduFilter=rsCmtsBaseBpduFilter, rsCmtsUpstreamState=rsCmtsUpstreamState, rsCmtsUpstreamRangeInterval=rsCmtsUpstreamRangeInterval, rsCmtsUpstreamEntry=rsCmtsUpstreamEntry, rsCmtsUpstreamPolicing=rsCmtsUpstreamPolicing, rsCmtsBase3137Config2=rsCmtsBase3137Config2, rsCmtsBaseGenericCmdStatus=rsCmtsBaseGenericCmdStatus, rsCmtsUpstreamQosConfirm=rsCmtsUpstreamQosConfirm, rsCmtsBaseMapLeadTime=rsCmtsBaseMapLeadTime, rsCmtsBaseInitMaintLength=rsCmtsBaseInitMaintLength, rsCmtsModulationDetectWindow=rsCmtsModulationDetectWindow, rsCmtsModulationUWMismatch=rsCmtsModulationUWMismatch, rsCmtsBaseNonIPFilter=rsCmtsBaseNonIPFilter, rsCmtsDownstreamModulation=rsCmtsDownstreamModulation, rsCmtsUpstreamFreqencyAdjust=rsCmtsUpstreamFreqencyAdjust, rsCmtsModulationEntry=rsCmtsModulationEntry, rsCmtsBaseBpduFilterHits=rsCmtsBaseBpduFilterHits, rsCmtsBaseEntry=rsCmtsBaseEntry, rsCmtsModulationEQSymbols=rsCmtsModulationEQSymbols, rsCmtsUpstreamTimingAdjust=rsCmtsUpstreamTimingAdjust, rsCmtsBaseTable=rsCmtsBaseTable, rsCmtsBaseBpiHwAssist=rsCmtsBaseBpiHwAssist, PYSNMP_MODULE_ID=rsCmtsMib, rsCmtsBaseConcatenation=rsCmtsBaseConcatenation, RsCmtsCmdStatus=RsCmtsCmdStatus, rsCmtsMibCompliance=rsCmtsMibCompliance, rsCmtsUpstreamPowerAdjust=rsCmtsUpstreamPowerAdjust, rsCmtsModulationTable=rsCmtsModulationTable, rsCmtsUpstreamTable=rsCmtsUpstreamTable, rsCmtsMib=rsCmtsMib, rsCmtsDownstreamTable=rsCmtsDownstreamTable, rsCmtsDownstreamEntry=rsCmtsDownstreamEntry, rsCmtsDownstreamState=rsCmtsDownstreamState, rsCmtsBaseNonIPFilterHits=rsCmtsBaseNonIPFilterHits, rsCmtsGroups=rsCmtsGroups, rsCmtsUpstreamTXCoefficients=rsCmtsUpstreamTXCoefficients, rsCmtsBaseUccRetryInterval=rsCmtsBaseUccRetryInterval, rsCmtsUpstreamQosMaxBps=rsCmtsUpstreamQosMaxBps, rsCmtsUpstreamNominalRxPower=rsCmtsUpstreamNominalRxPower, rsCmtsUpstreamRangeRetryInterval=rsCmtsUpstreamRangeRetryInterval, rsCmtsUpstreamForceContinue=rsCmtsUpstreamForceContinue, rsCmtsBaseMapLength=rsCmtsBaseMapLength)
