#
# PySNMP MIB module HH3C-IFQOS2-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/HH3C-IFQOS2-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 19:14:28 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, Integer, OctetString = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "Integer", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueSizeConstraint, ValueRangeConstraint, SingleValueConstraint, ConstraintsUnion, ConstraintsIntersection = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueSizeConstraint", "ValueRangeConstraint", "SingleValueConstraint", "ConstraintsUnion", "ConstraintsIntersection")
hh3cCommon, = mibBuilder.importSymbols("HH3C-OID-MIB", "hh3cCommon")
ifIndex, = mibBuilder.importSymbols("IF-MIB", "ifIndex")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
Unsigned32, Counter32, ModuleIdentity, ObjectIdentity, Integer32, Counter64, iso, Gauge32, TimeTicks, Bits, MibIdentifier, MibScalar, MibTable, MibTableRow, MibTableColumn, NotificationType, IpAddress = mibBuilder.importSymbols("SNMPv2-SMI", "Unsigned32", "Counter32", "ModuleIdentity", "ObjectIdentity", "Integer32", "Counter64", "iso", "Gauge32", "TimeTicks", "Bits", "MibIdentifier", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "NotificationType", "IpAddress")
RowStatus, TextualConvention, DisplayString, TruthValue = mibBuilder.importSymbols("SNMPv2-TC", "RowStatus", "TextualConvention", "DisplayString", "TruthValue")
hh3cIfQos2 = ModuleIdentity((1, 3, 6, 1, 4, 1, 25506, 2, 65, 1))
if mibBuilder.loadTexts: hh3cIfQos2.setLastUpdated('200812020000Z')
if mibBuilder.loadTexts: hh3cIfQos2.setOrganization('H3C Technologies Co.,Ltd.')
hh3cQos2 = MibIdentifier((1, 3, 6, 1, 4, 1, 25506, 2, 65))
class CarAction(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16))
    namedValues = NamedValues(("invalid", 0), ("pass", 1), ("continue", 2), ("discard", 3), ("remark", 4), ("remark-ip-continue", 5), ("remark-ip-pass", 6), ("remark-mplsexp-continue", 7), ("remark-mplsexp-pass", 8), ("remark-dscp-continue", 9), ("remark-dscp-pass", 10), ("remark-dot1p-continue", 11), ("remark-dot1p-pass", 12), ("remark-atm-clp-continue", 13), ("remark-atm-clp-pass", 14), ("remark-fr-de-continue", 15), ("remark-fr-de-pass", 16))

class PriorityQueue(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))
    namedValues = NamedValues(("top", 1), ("middle", 2), ("normal", 3), ("bottom", 4))

class Direction(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2))
    namedValues = NamedValues(("inbound", 1), ("outbound", 2))

hh3cIfQoSHardwareQueueObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 25506, 2, 65, 1, 1))
hh3cIfQoSHardwareQueueConfigGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 25506, 2, 65, 1, 1, 1))
hh3cIfQoSQSModeTable = MibTable((1, 3, 6, 1, 4, 1, 25506, 2, 65, 1, 1, 1, 1), )
if mibBuilder.loadTexts: hh3cIfQoSQSModeTable.setStatus('current')
hh3cIfQoSQSModeEntry = MibTableRow((1, 3, 6, 1, 4, 1, 25506, 2, 65, 1, 1, 1, 1, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: hh3cIfQoSQSModeEntry.setStatus('current')
hh3cIfQoSQSMode = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 65, 1, 1, 1, 1, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("sp", 1), ("sp0", 2), ("sp1", 3), ("sp2", 4), ("wrr", 5), ("hh3cfq", 6), ("wrr-sp", 7)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hh3cIfQoSQSMode.setStatus('current')
hh3cIfQoSQSWeightTable = MibTable((1, 3, 6, 1, 4, 1, 25506, 2, 65, 1, 1, 1, 2), )
if mibBuilder.loadTexts: hh3cIfQoSQSWeightTable.setStatus('current')
hh3cIfQoSQSWeightEntry = MibTableRow((1, 3, 6, 1, 4, 1, 25506, 2, 65, 1, 1, 1, 2, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "HH3C-IFQOS2-MIB", "hh3cIfQoSQueueID"))
if mibBuilder.loadTexts: hh3cIfQoSQSWeightEntry.setStatus('current')
hh3cIfQoSQueueID = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 65, 1, 1, 1, 2, 1, 1), Integer32())
if mibBuilder.loadTexts: hh3cIfQoSQueueID.setStatus('current')
hh3cIfQoSQueueGroupType = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 65, 1, 1, 1, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("group0", 1), ("group1", 2), ("group2", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hh3cIfQoSQueueGroupType.setStatus('current')
hh3cIfQoSQSType = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 65, 1, 1, 1, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("weight", 1), ("byte-count", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hh3cIfQoSQSType.setStatus('current')
hh3cIfQoSQSValue = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 65, 1, 1, 1, 2, 1, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hh3cIfQoSQSValue.setStatus('current')
hh3cIfQoSQSMaxDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 65, 1, 1, 1, 2, 1, 5), Integer32().clone(9)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hh3cIfQoSQSMaxDelay.setStatus('current')
hh3cIfQoSHardwareQueueRunInfoGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 25506, 2, 65, 1, 1, 2))
hh3cIfQoSHardwareQueueRunInfoTable = MibTable((1, 3, 6, 1, 4, 1, 25506, 2, 65, 1, 1, 2, 1), )
if mibBuilder.loadTexts: hh3cIfQoSHardwareQueueRunInfoTable.setStatus('current')
hh3cIfQoSHardwareQueueRunInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 25506, 2, 65, 1, 1, 2, 1, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "HH3C-IFQOS2-MIB", "hh3cIfQoSQueueID"))
if mibBuilder.loadTexts: hh3cIfQoSHardwareQueueRunInfoEntry.setStatus('current')
hh3cIfQoSPassPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 65, 1, 1, 2, 1, 1, 1), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cIfQoSPassPackets.setStatus('current')
hh3cIfQoSDropPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 65, 1, 1, 2, 1, 1, 2), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cIfQoSDropPackets.setStatus('current')
hh3cIfQoSPassBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 65, 1, 1, 2, 1, 1, 3), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cIfQoSPassBytes.setStatus('current')
hh3cIfQoSPassPPS = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 65, 1, 1, 2, 1, 1, 4), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cIfQoSPassPPS.setStatus('current')
hh3cIfQoSPassBPS = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 65, 1, 1, 2, 1, 1, 5), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cIfQoSPassBPS.setStatus('current')
hh3cIfQoSDropBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 65, 1, 1, 2, 1, 1, 6), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cIfQoSDropBytes.setStatus('current')
hh3cIfQoSQueueLengthInPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 65, 1, 1, 2, 1, 1, 7), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cIfQoSQueueLengthInPkts.setStatus('current')
hh3cIfQoSQueueLengthInBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 65, 1, 1, 2, 1, 1, 8), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cIfQoSQueueLengthInBytes.setStatus('current')
hh3cIfQoSCurQueuePkts = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 65, 1, 1, 2, 1, 1, 9), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cIfQoSCurQueuePkts.setStatus('current')
hh3cIfQoSCurQueueBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 65, 1, 1, 2, 1, 1, 10), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cIfQoSCurQueueBytes.setStatus('current')
hh3cIfQoSCurQueuePPS = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 65, 1, 1, 2, 1, 1, 11), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cIfQoSCurQueuePPS.setStatus('current')
hh3cIfQoSCurQueueBPS = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 65, 1, 1, 2, 1, 1, 12), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cIfQoSCurQueueBPS.setStatus('current')
hh3cIfQoSTailDropPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 65, 1, 1, 2, 1, 1, 13), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cIfQoSTailDropPkts.setStatus('current')
hh3cIfQoSTailDropBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 65, 1, 1, 2, 1, 1, 14), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cIfQoSTailDropBytes.setStatus('current')
hh3cIfQoSTailDropPPS = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 65, 1, 1, 2, 1, 1, 15), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cIfQoSTailDropPPS.setStatus('current')
hh3cIfQoSTailDropBPS = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 65, 1, 1, 2, 1, 1, 16), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cIfQoSTailDropBPS.setStatus('current')
hh3cIfQoSWredDropPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 65, 1, 1, 2, 1, 1, 17), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cIfQoSWredDropPkts.setStatus('current')
hh3cIfQoSWredDropBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 65, 1, 1, 2, 1, 1, 18), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cIfQoSWredDropBytes.setStatus('current')
hh3cIfQoSWredDropPPS = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 65, 1, 1, 2, 1, 1, 19), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cIfQoSWredDropPPS.setStatus('current')
hh3cIfQoSWredDropBPS = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 65, 1, 1, 2, 1, 1, 20), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cIfQoSWredDropBPS.setStatus('current')
hh3cIfQoSHQueueTcpRunInfoTable = MibTable((1, 3, 6, 1, 4, 1, 25506, 2, 65, 1, 1, 2, 2), )
if mibBuilder.loadTexts: hh3cIfQoSHQueueTcpRunInfoTable.setStatus('current')
hh3cIfQoSHQueueTcpRunInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 25506, 2, 65, 1, 1, 2, 2, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "HH3C-IFQOS2-MIB", "hh3cIfQoSQueueID"))
if mibBuilder.loadTexts: hh3cIfQoSHQueueTcpRunInfoEntry.setStatus('current')
hh3cIfQoSWredDropLPreNTcpPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 65, 1, 1, 2, 2, 1, 1), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cIfQoSWredDropLPreNTcpPkts.setStatus('current')
hh3cIfQoSWredDropLPreNTcpBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 65, 1, 1, 2, 2, 1, 2), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cIfQoSWredDropLPreNTcpBytes.setStatus('current')
hh3cIfQoSWredDropLPreNTcpPPS = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 65, 1, 1, 2, 2, 1, 3), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cIfQoSWredDropLPreNTcpPPS.setStatus('current')
hh3cIfQoSWredDropLPreNTcpBPS = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 65, 1, 1, 2, 2, 1, 4), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cIfQoSWredDropLPreNTcpBPS.setStatus('current')
hh3cIfQoSWredDropLPreTcpPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 65, 1, 1, 2, 2, 1, 5), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cIfQoSWredDropLPreTcpPkts.setStatus('current')
hh3cIfQoSWredDropLPreTcpBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 65, 1, 1, 2, 2, 1, 6), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cIfQoSWredDropLPreTcpBytes.setStatus('current')
hh3cIfQoSWredDropLPreTcpPPS = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 65, 1, 1, 2, 2, 1, 7), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cIfQoSWredDropLPreTcpPPS.setStatus('current')
hh3cIfQoSWredDropLPreTcpBPS = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 65, 1, 1, 2, 2, 1, 8), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cIfQoSWredDropLPreTcpBPS.setStatus('current')
hh3cIfQoSWredDropHPreNTcpPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 65, 1, 1, 2, 2, 1, 9), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cIfQoSWredDropHPreNTcpPkts.setStatus('current')
hh3cIfQoSWredDropHPreNTcpBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 65, 1, 1, 2, 2, 1, 10), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cIfQoSWredDropHPreNTcpBytes.setStatus('current')
hh3cIfQoSWredDropHPreNTcpPPS = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 65, 1, 1, 2, 2, 1, 11), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cIfQoSWredDropHPreNTcpPPS.setStatus('current')
hh3cIfQoSWredDropHPreNTcpBPS = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 65, 1, 1, 2, 2, 1, 12), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cIfQoSWredDropHPreNTcpBPS.setStatus('current')
hh3cIfQoSWredDropHPreTcpPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 65, 1, 1, 2, 2, 1, 13), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cIfQoSWredDropHPreTcpPkts.setStatus('current')
hh3cIfQoSWredDropHPreTcpBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 65, 1, 1, 2, 2, 1, 14), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cIfQoSWredDropHPreTcpBytes.setStatus('current')
hh3cIfQoSWredDropHPreTcpPPS = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 65, 1, 1, 2, 2, 1, 15), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cIfQoSWredDropHPreTcpPPS.setStatus('current')
hh3cIfQoSWredDropHPreTcpBPS = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 65, 1, 1, 2, 2, 1, 16), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cIfQoSWredDropHPreTcpBPS.setStatus('current')
hh3cIfQoSSoftwareQueueObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 25506, 2, 65, 1, 2))
hh3cIfQoSFIFOObject = MibIdentifier((1, 3, 6, 1, 4, 1, 25506, 2, 65, 1, 2, 1))
hh3cIfQoSFIFOConfigTable = MibTable((1, 3, 6, 1, 4, 1, 25506, 2, 65, 1, 2, 1, 1), )
if mibBuilder.loadTexts: hh3cIfQoSFIFOConfigTable.setStatus('current')
hh3cIfQoSFIFOConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 25506, 2, 65, 1, 2, 1, 1, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: hh3cIfQoSFIFOConfigEntry.setStatus('current')
hh3cIfQoSFIFOMaxQueueLen = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 65, 1, 2, 1, 1, 1, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hh3cIfQoSFIFOMaxQueueLen.setStatus('current')
hh3cIfQoSFIFORunInfoTable = MibTable((1, 3, 6, 1, 4, 1, 25506, 2, 65, 1, 2, 1, 2), )
if mibBuilder.loadTexts: hh3cIfQoSFIFORunInfoTable.setStatus('current')
hh3cIfQoSFIFORunInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 25506, 2, 65, 1, 2, 1, 2, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: hh3cIfQoSFIFORunInfoEntry.setStatus('current')
hh3cIfQoSFIFOSize = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 65, 1, 2, 1, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cIfQoSFIFOSize.setStatus('current')
hh3cIfQoSFIFODiscardPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 65, 1, 2, 1, 2, 1, 2), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cIfQoSFIFODiscardPackets.setStatus('current')
hh3cIfQoSPQObject = MibIdentifier((1, 3, 6, 1, 4, 1, 25506, 2, 65, 1, 2, 2))
hh3cIfQoSPQConfigGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 25506, 2, 65, 1, 2, 2, 1))
hh3cIfQoSPQDefaultTable = MibTable((1, 3, 6, 1, 4, 1, 25506, 2, 65, 1, 2, 2, 1, 1), )
if mibBuilder.loadTexts: hh3cIfQoSPQDefaultTable.setStatus('current')
hh3cIfQoSPQDefaultEntry = MibTableRow((1, 3, 6, 1, 4, 1, 25506, 2, 65, 1, 2, 2, 1, 1, 1), ).setIndexNames((0, "HH3C-IFQOS2-MIB", "hh3cIfQoSPQListNumber"))
if mibBuilder.loadTexts: hh3cIfQoSPQDefaultEntry.setStatus('current')
hh3cIfQoSPQListNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 65, 1, 2, 2, 1, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 16)))
if mibBuilder.loadTexts: hh3cIfQoSPQListNumber.setStatus('current')
hh3cIfQoSPQDefaultQueueType = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 65, 1, 2, 2, 1, 1, 1, 2), PriorityQueue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hh3cIfQoSPQDefaultQueueType.setStatus('current')
hh3cIfQoSPQQueueLengthTable = MibTable((1, 3, 6, 1, 4, 1, 25506, 2, 65, 1, 2, 2, 1, 2), )
if mibBuilder.loadTexts: hh3cIfQoSPQQueueLengthTable.setStatus('current')
hh3cIfQoSPQQueueLengthEntry = MibTableRow((1, 3, 6, 1, 4, 1, 25506, 2, 65, 1, 2, 2, 1, 2, 1), ).setIndexNames((0, "HH3C-IFQOS2-MIB", "hh3cIfQoSPQListNumber"), (0, "HH3C-IFQOS2-MIB", "hh3cIfQoSPQQueueLengthType"))
if mibBuilder.loadTexts: hh3cIfQoSPQQueueLengthEntry.setStatus('current')
hh3cIfQoSPQQueueLengthType = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 65, 1, 2, 2, 1, 2, 1, 1), PriorityQueue())
if mibBuilder.loadTexts: hh3cIfQoSPQQueueLengthType.setStatus('current')
hh3cIfQoSPQQueueLengthValue = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 65, 1, 2, 2, 1, 2, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1024))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hh3cIfQoSPQQueueLengthValue.setStatus('current')
hh3cIfQoSPQClassRuleTable = MibTable((1, 3, 6, 1, 4, 1, 25506, 2, 65, 1, 2, 2, 1, 3), )
if mibBuilder.loadTexts: hh3cIfQoSPQClassRuleTable.setStatus('current')
hh3cIfQoSPQClassRuleEntry = MibTableRow((1, 3, 6, 1, 4, 1, 25506, 2, 65, 1, 2, 2, 1, 3, 1), ).setIndexNames((0, "HH3C-IFQOS2-MIB", "hh3cIfQoSPQListNumber"), (0, "HH3C-IFQOS2-MIB", "hh3cIfQoSPQClassRuleType"), (0, "HH3C-IFQOS2-MIB", "hh3cIfQoSPQClassRuleValue"))
if mibBuilder.loadTexts: hh3cIfQoSPQClassRuleEntry.setStatus('current')
hh3cIfQoSPQClassRuleType = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 65, 1, 2, 2, 1, 3, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10))).clone(namedValues=NamedValues(("interface", 1), ("ipv4acl", 2), ("ipv6acl", 3), ("fragments", 4), ("greater-than", 5), ("less-than", 6), ("tcp", 7), ("udp", 8), ("ipall", 9), ("mpls", 10))))
if mibBuilder.loadTexts: hh3cIfQoSPQClassRuleType.setStatus('current')
hh3cIfQoSPQClassRuleValue = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 65, 1, 2, 2, 1, 3, 1, 2), Integer32())
if mibBuilder.loadTexts: hh3cIfQoSPQClassRuleValue.setStatus('current')
hh3cIfQoSPQClassRuleQueueType = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 65, 1, 2, 2, 1, 3, 1, 3), PriorityQueue()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cIfQoSPQClassRuleQueueType.setStatus('current')
hh3cIfQoSPQClassRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 65, 1, 2, 2, 1, 3, 1, 4), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cIfQoSPQClassRowStatus.setStatus('current')
hh3cIfQoSPQApplyTable = MibTable((1, 3, 6, 1, 4, 1, 25506, 2, 65, 1, 2, 2, 1, 4), )
if mibBuilder.loadTexts: hh3cIfQoSPQApplyTable.setStatus('current')
hh3cIfQoSPQApplyEntry = MibTableRow((1, 3, 6, 1, 4, 1, 25506, 2, 65, 1, 2, 2, 1, 4, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: hh3cIfQoSPQApplyEntry.setStatus('current')
hh3cIfQoSPQApplyListNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 65, 1, 2, 2, 1, 4, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 16))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cIfQoSPQApplyListNumber.setStatus('current')
hh3cIfQoSPQApplyRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 65, 1, 2, 2, 1, 4, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cIfQoSPQApplyRowStatus.setStatus('current')
hh3cIfQoSPQRunInfoGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 25506, 2, 65, 1, 2, 2, 2))
hh3cIfQoSPQRunInfoTable = MibTable((1, 3, 6, 1, 4, 1, 25506, 2, 65, 1, 2, 2, 2, 1), )
if mibBuilder.loadTexts: hh3cIfQoSPQRunInfoTable.setStatus('current')
hh3cIfQoSPQRunInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 25506, 2, 65, 1, 2, 2, 2, 1, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "HH3C-IFQOS2-MIB", "hh3cIfQoSPQType"))
if mibBuilder.loadTexts: hh3cIfQoSPQRunInfoEntry.setStatus('current')
hh3cIfQoSPQType = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 65, 1, 2, 2, 2, 1, 1, 1), PriorityQueue())
if mibBuilder.loadTexts: hh3cIfQoSPQType.setStatus('current')
hh3cIfQoSPQSize = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 65, 1, 2, 2, 2, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cIfQoSPQSize.setStatus('current')
hh3cIfQoSPQLength = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 65, 1, 2, 2, 2, 1, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cIfQoSPQLength.setStatus('current')
hh3cIfQoSPQDiscardPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 65, 1, 2, 2, 2, 1, 1, 4), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cIfQoSPQDiscardPackets.setStatus('current')
hh3cIfQoSCQObject = MibIdentifier((1, 3, 6, 1, 4, 1, 25506, 2, 65, 1, 2, 3))
hh3cIfQoSCQConfigGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 25506, 2, 65, 1, 2, 3, 1))
hh3cIfQoSCQDefaultTable = MibTable((1, 3, 6, 1, 4, 1, 25506, 2, 65, 1, 2, 3, 1, 1), )
if mibBuilder.loadTexts: hh3cIfQoSCQDefaultTable.setStatus('current')
hh3cIfQoSCQDefaultEntry = MibTableRow((1, 3, 6, 1, 4, 1, 25506, 2, 65, 1, 2, 3, 1, 1, 1), ).setIndexNames((0, "HH3C-IFQOS2-MIB", "hh3cIfQoSCQListNumber"))
if mibBuilder.loadTexts: hh3cIfQoSCQDefaultEntry.setStatus('current')
hh3cIfQoSCQListNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 65, 1, 2, 3, 1, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 16)))
if mibBuilder.loadTexts: hh3cIfQoSCQListNumber.setStatus('current')
hh3cIfQoSCQDefaultQueueID = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 65, 1, 2, 3, 1, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 16)).clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hh3cIfQoSCQDefaultQueueID.setStatus('current')
hh3cIfQoSCQQueueLengthTable = MibTable((1, 3, 6, 1, 4, 1, 25506, 2, 65, 1, 2, 3, 1, 2), )
if mibBuilder.loadTexts: hh3cIfQoSCQQueueLengthTable.setStatus('current')
hh3cIfQoSCQQueueLengthEntry = MibTableRow((1, 3, 6, 1, 4, 1, 25506, 2, 65, 1, 2, 3, 1, 2, 1), ).setIndexNames((0, "HH3C-IFQOS2-MIB", "hh3cIfQoSCQListNumber"), (0, "HH3C-IFQOS2-MIB", "hh3cIfQoSCQQueueID"))
if mibBuilder.loadTexts: hh3cIfQoSCQQueueLengthEntry.setStatus('current')
hh3cIfQoSCQQueueID = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 65, 1, 2, 3, 1, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 16)))
if mibBuilder.loadTexts: hh3cIfQoSCQQueueID.setStatus('current')
hh3cIfQoSCQQueueLength = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 65, 1, 2, 3, 1, 2, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1024)).clone(20)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hh3cIfQoSCQQueueLength.setStatus('current')
hh3cIfQoSCQQueueServing = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 65, 1, 2, 3, 1, 2, 1, 3), Integer32().clone(1500)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hh3cIfQoSCQQueueServing.setStatus('current')
hh3cIfQoSCQClassRuleTable = MibTable((1, 3, 6, 1, 4, 1, 25506, 2, 65, 1, 2, 3, 1, 3), )
if mibBuilder.loadTexts: hh3cIfQoSCQClassRuleTable.setStatus('current')
hh3cIfQoSCQClassRuleEntry = MibTableRow((1, 3, 6, 1, 4, 1, 25506, 2, 65, 1, 2, 3, 1, 3, 1), ).setIndexNames((0, "HH3C-IFQOS2-MIB", "hh3cIfQoSCQListNumber"), (0, "HH3C-IFQOS2-MIB", "hh3cIfQoSCQClassRuleType"), (0, "HH3C-IFQOS2-MIB", "hh3cIfQoSCQClassRuleValue"))
if mibBuilder.loadTexts: hh3cIfQoSCQClassRuleEntry.setStatus('current')
hh3cIfQoSCQClassRuleType = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 65, 1, 2, 3, 1, 3, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10))).clone(namedValues=NamedValues(("interface", 1), ("ipv4acl", 2), ("ipv6acl", 3), ("fragments", 4), ("greater-than", 5), ("less-than", 6), ("tcp", 7), ("udp", 8), ("ipall", 9), ("mpls", 10))))
if mibBuilder.loadTexts: hh3cIfQoSCQClassRuleType.setStatus('current')
hh3cIfQoSCQClassRuleValue = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 65, 1, 2, 3, 1, 3, 1, 2), Integer32())
if mibBuilder.loadTexts: hh3cIfQoSCQClassRuleValue.setStatus('current')
hh3cIfQoSCQClassRuleQueueID = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 65, 1, 2, 3, 1, 3, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 16))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cIfQoSCQClassRuleQueueID.setStatus('current')
hh3cIfQoSCQClassRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 65, 1, 2, 3, 1, 3, 1, 4), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cIfQoSCQClassRowStatus.setStatus('current')
hh3cIfQoSCQApplyTable = MibTable((1, 3, 6, 1, 4, 1, 25506, 2, 65, 1, 2, 3, 1, 4), )
if mibBuilder.loadTexts: hh3cIfQoSCQApplyTable.setStatus('current')
hh3cIfQoSCQApplyEntry = MibTableRow((1, 3, 6, 1, 4, 1, 25506, 2, 65, 1, 2, 3, 1, 4, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: hh3cIfQoSCQApplyEntry.setStatus('current')
hh3cIfQoSCQApplyListNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 65, 1, 2, 3, 1, 4, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 16))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cIfQoSCQApplyListNumber.setStatus('current')
hh3cIfQoSCQApplyRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 65, 1, 2, 3, 1, 4, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cIfQoSCQApplyRowStatus.setStatus('current')
hh3cIfQoSCQRunInfoGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 25506, 2, 65, 1, 2, 3, 2))
hh3cIfQoSCQRunInfoTable = MibTable((1, 3, 6, 1, 4, 1, 25506, 2, 65, 1, 2, 3, 2, 1), )
if mibBuilder.loadTexts: hh3cIfQoSCQRunInfoTable.setStatus('current')
hh3cIfQoSCQRunInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 25506, 2, 65, 1, 2, 3, 2, 1, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "HH3C-IFQOS2-MIB", "hh3cIfQoSCQQueueID"))
if mibBuilder.loadTexts: hh3cIfQoSCQRunInfoEntry.setStatus('current')
hh3cIfQoSCQRunInfoSize = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 65, 1, 2, 3, 2, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cIfQoSCQRunInfoSize.setStatus('current')
hh3cIfQoSCQRunInfoLength = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 65, 1, 2, 3, 2, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cIfQoSCQRunInfoLength.setStatus('current')
hh3cIfQoSCQRunInfoDiscardPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 65, 1, 2, 3, 2, 1, 1, 3), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cIfQoSCQRunInfoDiscardPackets.setStatus('current')
hh3cIfQoSWFQObject = MibIdentifier((1, 3, 6, 1, 4, 1, 25506, 2, 65, 1, 2, 4))
hh3cIfQoSWFQConfigGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 25506, 2, 65, 1, 2, 4, 1))
hh3cIfQoSWFQTable = MibTable((1, 3, 6, 1, 4, 1, 25506, 2, 65, 1, 2, 4, 1, 1), )
if mibBuilder.loadTexts: hh3cIfQoSWFQTable.setStatus('current')
hh3cIfQoSWFQEntry = MibTableRow((1, 3, 6, 1, 4, 1, 25506, 2, 65, 1, 2, 4, 1, 1, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: hh3cIfQoSWFQEntry.setStatus('current')
hh3cIfQoSWFQQueueLength = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 65, 1, 2, 4, 1, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1024)).clone(64)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cIfQoSWFQQueueLength.setStatus('current')
hh3cIfQoSWFQQueueNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 65, 1, 2, 4, 1, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9))).clone(namedValues=NamedValues(("size16", 1), ("size32", 2), ("size64", 3), ("size128", 4), ("size256", 5), ("size512", 6), ("size1024", 7), ("size2048", 8), ("size4096", 9))).clone(5)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cIfQoSWFQQueueNumber.setStatus('current')
hh3cIfQoSWFQRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 65, 1, 2, 4, 1, 1, 1, 3), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cIfQoSWFQRowStatus.setStatus('current')
hh3cIfQoSWFQType = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 65, 1, 2, 4, 1, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("ip-precedence", 1), ("dscp", 2))).clone(1)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cIfQoSWFQType.setStatus('current')
hh3cIfQoSWFQRunInfoGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 25506, 2, 65, 1, 2, 4, 2))
hh3cIfQoSWFQRunInfoTable = MibTable((1, 3, 6, 1, 4, 1, 25506, 2, 65, 1, 2, 4, 2, 1), )
if mibBuilder.loadTexts: hh3cIfQoSWFQRunInfoTable.setStatus('current')
hh3cIfQoSWFQRunInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 25506, 2, 65, 1, 2, 4, 2, 1, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: hh3cIfQoSWFQRunInfoEntry.setStatus('current')
hh3cIfQoSWFQSize = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 65, 1, 2, 4, 2, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cIfQoSWFQSize.setStatus('current')
hh3cIfQoSWFQLength = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 65, 1, 2, 4, 2, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cIfQoSWFQLength.setStatus('current')
hh3cIfQoSWFQDiscardPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 65, 1, 2, 4, 2, 1, 1, 3), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cIfQoSWFQDiscardPackets.setStatus('current')
hh3cIfQoSWFQHashedActiveQueues = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 65, 1, 2, 4, 2, 1, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cIfQoSWFQHashedActiveQueues.setStatus('current')
hh3cIfQoSWFQHashedMaxActiveQueues = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 65, 1, 2, 4, 2, 1, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cIfQoSWFQHashedMaxActiveQueues.setStatus('current')
hh3cIfQosWFQhashedTotalQueues = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 65, 1, 2, 4, 2, 1, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cIfQosWFQhashedTotalQueues.setStatus('current')
hh3cIfQoSBandwidthGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 25506, 2, 65, 1, 2, 5))
hh3cIfQoSBandwidthTable = MibTable((1, 3, 6, 1, 4, 1, 25506, 2, 65, 1, 2, 5, 1), )
if mibBuilder.loadTexts: hh3cIfQoSBandwidthTable.setStatus('current')
hh3cIfQoSBandwidthEntry = MibTableRow((1, 3, 6, 1, 4, 1, 25506, 2, 65, 1, 2, 5, 1, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: hh3cIfQoSBandwidthEntry.setStatus('current')
hh3cIfQoSMaxBandwidth = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 65, 1, 2, 5, 1, 1, 1), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cIfQoSMaxBandwidth.setStatus('current')
hh3cIfQoSReservedBandwidthPct = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 65, 1, 2, 5, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 100)).clone(75)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cIfQoSReservedBandwidthPct.setStatus('current')
hh3cIfQoSBandwidthRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 65, 1, 2, 5, 1, 1, 3), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cIfQoSBandwidthRowStatus.setStatus('current')
hh3cIfQoSQmtokenGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 25506, 2, 65, 1, 2, 6))
hh3cIfQoSQmtokenTable = MibTable((1, 3, 6, 1, 4, 1, 25506, 2, 65, 1, 2, 6, 1), )
if mibBuilder.loadTexts: hh3cIfQoSQmtokenTable.setStatus('current')
hh3cIfQoSQmtokenEntry = MibTableRow((1, 3, 6, 1, 4, 1, 25506, 2, 65, 1, 2, 6, 1, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: hh3cIfQoSQmtokenEntry.setStatus('current')
hh3cIfQoSQmtokenNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 65, 1, 2, 6, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 50))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cIfQoSQmtokenNumber.setStatus('current')
hh3cIfQoSQmtokenRosStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 65, 1, 2, 6, 1, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cIfQoSQmtokenRosStatus.setStatus('current')
hh3cIfQoSRTPQObject = MibIdentifier((1, 3, 6, 1, 4, 1, 25506, 2, 65, 1, 2, 7))
hh3cIfQoSRTPQConfigGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 25506, 2, 65, 1, 2, 7, 1))
hh3cIfQoSRTPQConfigTable = MibTable((1, 3, 6, 1, 4, 1, 25506, 2, 65, 1, 2, 7, 1, 1), )
if mibBuilder.loadTexts: hh3cIfQoSRTPQConfigTable.setStatus('current')
hh3cIfQoSRTPQConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 25506, 2, 65, 1, 2, 7, 1, 1, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: hh3cIfQoSRTPQConfigEntry.setStatus('current')
hh3cIfQoSRTPQStartPort = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 65, 1, 2, 7, 1, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(2000, 65535))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cIfQoSRTPQStartPort.setStatus('current')
hh3cIfQoSRTPQEndPort = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 65, 1, 2, 7, 1, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(2000, 65535))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cIfQoSRTPQEndPort.setStatus('current')
hh3cIfQoSRTPQReservedBandwidth = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 65, 1, 2, 7, 1, 1, 1, 3), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cIfQoSRTPQReservedBandwidth.setStatus('current')
hh3cIfQoSRTPQCbs = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 65, 1, 2, 7, 1, 1, 1, 4), Unsigned32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cIfQoSRTPQCbs.setStatus('current')
hh3cIfQoSRTPQRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 65, 1, 2, 7, 1, 1, 1, 5), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cIfQoSRTPQRowStatus.setStatus('current')
hh3cIfQoSRTPQRunInfoGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 25506, 2, 65, 1, 2, 7, 2))
hh3cIfQoSRTPQRunInfoTable = MibTable((1, 3, 6, 1, 4, 1, 25506, 2, 65, 1, 2, 7, 2, 1), )
if mibBuilder.loadTexts: hh3cIfQoSRTPQRunInfoTable.setStatus('current')
hh3cIfQoSRTPQRunInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 25506, 2, 65, 1, 2, 7, 2, 1, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: hh3cIfQoSRTPQRunInfoEntry.setStatus('current')
hh3cIfQoSRTPQPacketNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 65, 1, 2, 7, 2, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cIfQoSRTPQPacketNumber.setStatus('current')
hh3cIfQoSRTPQPacketSize = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 65, 1, 2, 7, 2, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cIfQoSRTPQPacketSize.setStatus('current')
hh3cIfQoSRTPQOutputPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 65, 1, 2, 7, 2, 1, 1, 3), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cIfQoSRTPQOutputPackets.setStatus('current')
hh3cIfQoSRTPQDiscardPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 65, 1, 2, 7, 2, 1, 1, 4), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cIfQoSRTPQDiscardPackets.setStatus('current')
hh3cIfQoSCarListObject = MibIdentifier((1, 3, 6, 1, 4, 1, 25506, 2, 65, 1, 2, 8))
hh3cIfQoCarListGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 25506, 2, 65, 1, 2, 8, 1))
hh3cIfQoSCarlTable = MibTable((1, 3, 6, 1, 4, 1, 25506, 2, 65, 1, 2, 8, 1, 1), )
if mibBuilder.loadTexts: hh3cIfQoSCarlTable.setStatus('current')
hh3cIfQoSCarlEntry = MibTableRow((1, 3, 6, 1, 4, 1, 25506, 2, 65, 1, 2, 8, 1, 1, 1), ).setIndexNames((0, "HH3C-IFQOS2-MIB", "hh3cIfQoSCarlListNum"))
if mibBuilder.loadTexts: hh3cIfQoSCarlEntry.setStatus('current')
hh3cIfQoSCarlListNum = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 65, 1, 2, 8, 1, 1, 1, 1), Integer32())
if mibBuilder.loadTexts: hh3cIfQoSCarlListNum.setStatus('current')
hh3cIfQoSCarlParaType = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 65, 1, 2, 8, 1, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("macAddress", 1), ("precMask", 2), ("dscpMask", 3)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cIfQoSCarlParaType.setStatus('current')
hh3cIfQoSCarlParaValue = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 65, 1, 2, 8, 1, 1, 1, 3), OctetString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cIfQoSCarlParaValue.setStatus('current')
hh3cIfQoSCarlRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 65, 1, 2, 8, 1, 1, 1, 4), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cIfQoSCarlRowStatus.setStatus('current')
hh3cIfQoSLineRateObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 25506, 2, 65, 1, 3))
hh3cIfQoSLRConfigTable = MibTable((1, 3, 6, 1, 4, 1, 25506, 2, 65, 1, 3, 1), )
if mibBuilder.loadTexts: hh3cIfQoSLRConfigTable.setStatus('current')
hh3cIfQoSLRConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 25506, 2, 65, 1, 3, 1, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "HH3C-IFQOS2-MIB", "hh3cIfQoSLRDirection"))
if mibBuilder.loadTexts: hh3cIfQoSLRConfigEntry.setStatus('current')
hh3cIfQoSLRDirection = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 65, 1, 3, 1, 1, 1), Direction())
if mibBuilder.loadTexts: hh3cIfQoSLRDirection.setStatus('current')
hh3cIfQoSLRCir = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 65, 1, 3, 1, 1, 2), Unsigned32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cIfQoSLRCir.setStatus('current')
hh3cIfQoSLRCbs = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 65, 1, 3, 1, 1, 3), Unsigned32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cIfQoSLRCbs.setStatus('current')
hh3cIfQoSLREbs = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 65, 1, 3, 1, 1, 4), Unsigned32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cIfQoSLREbs.setStatus('current')
hh3cIfQoSRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 65, 1, 3, 1, 1, 5), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cIfQoSRowStatus.setStatus('current')
hh3cIfQoSLRRunInfoTable = MibTable((1, 3, 6, 1, 4, 1, 25506, 2, 65, 1, 3, 2), )
if mibBuilder.loadTexts: hh3cIfQoSLRRunInfoTable.setStatus('current')
hh3cIfQoSLRRunInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 25506, 2, 65, 1, 3, 2, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "HH3C-IFQOS2-MIB", "hh3cIfQoSLRDirection"))
if mibBuilder.loadTexts: hh3cIfQoSLRRunInfoEntry.setStatus('current')
hh3cIfQoSLRRunInfoPassedPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 65, 1, 3, 2, 1, 1), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cIfQoSLRRunInfoPassedPackets.setStatus('current')
hh3cIfQoSLRRunInfoPassedBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 65, 1, 3, 2, 1, 2), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cIfQoSLRRunInfoPassedBytes.setStatus('current')
hh3cIfQoSLRRunInfoDelayedPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 65, 1, 3, 2, 1, 3), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cIfQoSLRRunInfoDelayedPackets.setStatus('current')
hh3cIfQoSLRRunInfoDelayedBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 65, 1, 3, 2, 1, 4), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cIfQoSLRRunInfoDelayedBytes.setStatus('current')
hh3cIfQoSLRRunInfoActiveShaping = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 65, 1, 3, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("active", 1), ("inactive", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cIfQoSLRRunInfoActiveShaping.setStatus('current')
hh3cIfQoSCARObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 25506, 2, 65, 1, 4))
hh3cIfQoSAggregativeCarGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 25506, 2, 65, 1, 4, 1))
hh3cIfQoSAggregativeCarNextIndex = MibScalar((1, 3, 6, 1, 4, 1, 25506, 2, 65, 1, 4, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cIfQoSAggregativeCarNextIndex.setStatus('current')
hh3cIfQoSAggregativeCarConfigTable = MibTable((1, 3, 6, 1, 4, 1, 25506, 2, 65, 1, 4, 1, 2), )
if mibBuilder.loadTexts: hh3cIfQoSAggregativeCarConfigTable.setStatus('current')
hh3cIfQoSAggregativeCarConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 25506, 2, 65, 1, 4, 1, 2, 1), ).setIndexNames((0, "HH3C-IFQOS2-MIB", "hh3cIfQoSAggregativeCarIndex"))
if mibBuilder.loadTexts: hh3cIfQoSAggregativeCarConfigEntry.setStatus('current')
hh3cIfQoSAggregativeCarIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 65, 1, 4, 1, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65534)))
if mibBuilder.loadTexts: hh3cIfQoSAggregativeCarIndex.setStatus('current')
hh3cIfQoSAggregativeCarName = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 65, 1, 4, 1, 2, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 31))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cIfQoSAggregativeCarName.setStatus('current')
hh3cIfQoSAggregativeCarCir = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 65, 1, 4, 1, 2, 1, 3), Unsigned32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cIfQoSAggregativeCarCir.setStatus('current')
hh3cIfQoSAggregativeCarCbs = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 65, 1, 4, 1, 2, 1, 4), Unsigned32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cIfQoSAggregativeCarCbs.setStatus('current')
hh3cIfQoSAggregativeCarEbs = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 65, 1, 4, 1, 2, 1, 5), Unsigned32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cIfQoSAggregativeCarEbs.setStatus('current')
hh3cIfQoSAggregativeCarPir = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 65, 1, 4, 1, 2, 1, 6), Unsigned32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cIfQoSAggregativeCarPir.setStatus('current')
hh3cIfQoSAggregativeCarGreenActionType = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 65, 1, 4, 1, 2, 1, 7), CarAction().clone('pass')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cIfQoSAggregativeCarGreenActionType.setStatus('current')
hh3cIfQoSAggregativeCarGreenActionValue = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 65, 1, 4, 1, 2, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 63), ValueRangeConstraint(255, 255), ))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cIfQoSAggregativeCarGreenActionValue.setStatus('current')
hh3cIfQoSAggregativeCarYellowActionType = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 65, 1, 4, 1, 2, 1, 9), CarAction()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cIfQoSAggregativeCarYellowActionType.setStatus('current')
hh3cIfQoSAggregativeCarYellowActionValue = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 65, 1, 4, 1, 2, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 63), ValueRangeConstraint(255, 255), ))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cIfQoSAggregativeCarYellowActionValue.setStatus('current')
hh3cIfQoSAggregativeCarRedActionType = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 65, 1, 4, 1, 2, 1, 11), CarAction()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cIfQoSAggregativeCarRedActionType.setStatus('current')
hh3cIfQoSAggregativeCarRedActionValue = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 65, 1, 4, 1, 2, 1, 12), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cIfQoSAggregativeCarRedActionValue.setStatus('current')
hh3cIfQoSAggregativeCarType = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 65, 1, 4, 1, 2, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("aggregative", 1), ("notAggregative", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cIfQoSAggregativeCarType.setStatus('current')
hh3cIfQoSAggregativeCarRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 65, 1, 4, 1, 2, 1, 14), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cIfQoSAggregativeCarRowStatus.setStatus('current')
hh3cIfQoSAggregativeCarApplyTable = MibTable((1, 3, 6, 1, 4, 1, 25506, 2, 65, 1, 4, 1, 3), )
if mibBuilder.loadTexts: hh3cIfQoSAggregativeCarApplyTable.setStatus('current')
hh3cIfQoSAggregativeCarApplyEntry = MibTableRow((1, 3, 6, 1, 4, 1, 25506, 2, 65, 1, 4, 1, 3, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "HH3C-IFQOS2-MIB", "hh3cIfQoSAggregativeCarApplyDirection"), (0, "HH3C-IFQOS2-MIB", "hh3cIfQoSAggregativeCarApplyRuleType"), (0, "HH3C-IFQOS2-MIB", "hh3cIfQoSAggregativeCarApplyRuleValue"))
if mibBuilder.loadTexts: hh3cIfQoSAggregativeCarApplyEntry.setStatus('current')
hh3cIfQoSAggregativeCarApplyDirection = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 65, 1, 4, 1, 3, 1, 1), Direction())
if mibBuilder.loadTexts: hh3cIfQoSAggregativeCarApplyDirection.setStatus('current')
hh3cIfQoSAggregativeCarApplyRuleType = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 65, 1, 4, 1, 3, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("ipv4acl", 1), ("ipv6acl", 2), ("carl", 3), ("any", 4))))
if mibBuilder.loadTexts: hh3cIfQoSAggregativeCarApplyRuleType.setStatus('current')
hh3cIfQoSAggregativeCarApplyRuleValue = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 65, 1, 4, 1, 3, 1, 3), Integer32())
if mibBuilder.loadTexts: hh3cIfQoSAggregativeCarApplyRuleValue.setStatus('current')
hh3cIfQoSAggregativeCarApplyCarIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 65, 1, 4, 1, 3, 1, 4), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cIfQoSAggregativeCarApplyCarIndex.setStatus('current')
hh3cIfQoSAggregativeCarApplyRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 65, 1, 4, 1, 3, 1, 5), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cIfQoSAggregativeCarApplyRowStatus.setStatus('current')
hh3cIfQoSAggregativeCarRunInfoTable = MibTable((1, 3, 6, 1, 4, 1, 25506, 2, 65, 1, 4, 1, 4), )
if mibBuilder.loadTexts: hh3cIfQoSAggregativeCarRunInfoTable.setStatus('current')
hh3cIfQoSAggregativeCarRunInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 25506, 2, 65, 1, 4, 1, 4, 1), ).setIndexNames((0, "HH3C-IFQOS2-MIB", "hh3cIfQoSAggregativeCarIndex"))
if mibBuilder.loadTexts: hh3cIfQoSAggregativeCarRunInfoEntry.setStatus('current')
hh3cIfQoSAggregativeCarGreenPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 65, 1, 4, 1, 4, 1, 1), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cIfQoSAggregativeCarGreenPackets.setStatus('current')
hh3cIfQoSAggregativeCarGreenBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 65, 1, 4, 1, 4, 1, 2), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cIfQoSAggregativeCarGreenBytes.setStatus('current')
hh3cIfQoSAggregativeCarYellowPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 65, 1, 4, 1, 4, 1, 3), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cIfQoSAggregativeCarYellowPackets.setStatus('current')
hh3cIfQoSAggregativeCarYellowBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 65, 1, 4, 1, 4, 1, 4), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cIfQoSAggregativeCarYellowBytes.setStatus('current')
hh3cIfQoSAggregativeCarRedPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 65, 1, 4, 1, 4, 1, 5), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cIfQoSAggregativeCarRedPackets.setStatus('current')
hh3cIfQoSAggregativeCarRedBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 65, 1, 4, 1, 4, 1, 6), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cIfQoSAggregativeCarRedBytes.setStatus('current')
hh3cIfQoSTricolorCarGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 25506, 2, 65, 1, 4, 2))
hh3cIfQoSTricolorCarConfigTable = MibTable((1, 3, 6, 1, 4, 1, 25506, 2, 65, 1, 4, 2, 1), )
if mibBuilder.loadTexts: hh3cIfQoSTricolorCarConfigTable.setStatus('current')
hh3cIfQoSTricolorCarConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 25506, 2, 65, 1, 4, 2, 1, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "HH3C-IFQOS2-MIB", "hh3cIfQoSTricolorCarDirection"), (0, "HH3C-IFQOS2-MIB", "hh3cIfQoSTricolorCarType"), (0, "HH3C-IFQOS2-MIB", "hh3cIfQoSTricolorCarValue"))
if mibBuilder.loadTexts: hh3cIfQoSTricolorCarConfigEntry.setStatus('current')
hh3cIfQoSTricolorCarDirection = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 65, 1, 4, 2, 1, 1, 1), Direction())
if mibBuilder.loadTexts: hh3cIfQoSTricolorCarDirection.setStatus('current')
hh3cIfQoSTricolorCarType = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 65, 1, 4, 2, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("ipv4acl", 1), ("ipv6acl", 2), ("carl", 3), ("any", 4))))
if mibBuilder.loadTexts: hh3cIfQoSTricolorCarType.setStatus('current')
hh3cIfQoSTricolorCarValue = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 65, 1, 4, 2, 1, 1, 3), Integer32())
if mibBuilder.loadTexts: hh3cIfQoSTricolorCarValue.setStatus('current')
hh3cIfQoSTricolorCarCir = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 65, 1, 4, 2, 1, 1, 4), Unsigned32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cIfQoSTricolorCarCir.setStatus('current')
hh3cIfQoSTricolorCarCbs = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 65, 1, 4, 2, 1, 1, 5), Unsigned32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cIfQoSTricolorCarCbs.setStatus('current')
hh3cIfQoSTricolorCarEbs = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 65, 1, 4, 2, 1, 1, 6), Unsigned32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cIfQoSTricolorCarEbs.setStatus('current')
hh3cIfQoSTricolorCarPir = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 65, 1, 4, 2, 1, 1, 7), Unsigned32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cIfQoSTricolorCarPir.setStatus('current')
hh3cIfQoSTricolorCarGreenActionType = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 65, 1, 4, 2, 1, 1, 8), CarAction().clone('pass')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cIfQoSTricolorCarGreenActionType.setStatus('current')
hh3cIfQoSTricolorCarGreenActionValue = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 65, 1, 4, 2, 1, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 63), ValueRangeConstraint(255, 255), ))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cIfQoSTricolorCarGreenActionValue.setStatus('current')
hh3cIfQoSTricolorCarYellowActionType = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 65, 1, 4, 2, 1, 1, 10), CarAction().clone('pass')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cIfQoSTricolorCarYellowActionType.setStatus('current')
hh3cIfQoSTricolorCarYellowActionValue = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 65, 1, 4, 2, 1, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 63), ValueRangeConstraint(255, 255), ))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cIfQoSTricolorCarYellowActionValue.setStatus('current')
hh3cIfQoSTricolorCarRedActionType = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 65, 1, 4, 2, 1, 1, 12), CarAction().clone('discard')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cIfQoSTricolorCarRedActionType.setStatus('current')
hh3cIfQoSTricolorCarRedActionValue = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 65, 1, 4, 2, 1, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 63), ValueRangeConstraint(255, 255), ))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cIfQoSTricolorCarRedActionValue.setStatus('current')
hh3cIfQoSTricolorCarRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 65, 1, 4, 2, 1, 1, 14), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cIfQoSTricolorCarRowStatus.setStatus('current')
hh3cIfQoSTricolorCarRunInfoTable = MibTable((1, 3, 6, 1, 4, 1, 25506, 2, 65, 1, 4, 2, 2), )
if mibBuilder.loadTexts: hh3cIfQoSTricolorCarRunInfoTable.setStatus('current')
hh3cIfQoSTricolorCarRunInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 25506, 2, 65, 1, 4, 2, 2, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "HH3C-IFQOS2-MIB", "hh3cIfQoSTricolorCarDirection"), (0, "HH3C-IFQOS2-MIB", "hh3cIfQoSTricolorCarType"), (0, "HH3C-IFQOS2-MIB", "hh3cIfQoSTricolorCarValue"))
if mibBuilder.loadTexts: hh3cIfQoSTricolorCarRunInfoEntry.setStatus('current')
hh3cIfQoSTricolorCarGreenPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 65, 1, 4, 2, 2, 1, 1), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cIfQoSTricolorCarGreenPackets.setStatus('current')
hh3cIfQoSTricolorCarGreenBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 65, 1, 4, 2, 2, 1, 2), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cIfQoSTricolorCarGreenBytes.setStatus('current')
hh3cIfQoSTricolorCarYellowPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 65, 1, 4, 2, 2, 1, 3), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cIfQoSTricolorCarYellowPackets.setStatus('current')
hh3cIfQoSTricolorCarYellowBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 65, 1, 4, 2, 2, 1, 4), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cIfQoSTricolorCarYellowBytes.setStatus('current')
hh3cIfQoSTricolorCarRedPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 65, 1, 4, 2, 2, 1, 5), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cIfQoSTricolorCarRedPackets.setStatus('current')
hh3cIfQoSTricolorCarRedBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 65, 1, 4, 2, 2, 1, 6), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cIfQoSTricolorCarRedBytes.setStatus('current')
hh3cIfQoSGTSObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 25506, 2, 65, 1, 5))
hh3cIfQoSGTSConfigTable = MibTable((1, 3, 6, 1, 4, 1, 25506, 2, 65, 1, 5, 1), )
if mibBuilder.loadTexts: hh3cIfQoSGTSConfigTable.setStatus('current')
hh3cIfQoSGTSConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 25506, 2, 65, 1, 5, 1, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "HH3C-IFQOS2-MIB", "hh3cIfQoSGTSClassRuleType"), (0, "HH3C-IFQOS2-MIB", "hh3cIfQoSGTSClassRuleValue"))
if mibBuilder.loadTexts: hh3cIfQoSGTSConfigEntry.setStatus('current')
hh3cIfQoSGTSClassRuleType = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 65, 1, 5, 1, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("any", 1), ("ipv4acl", 2), ("ipv6acl", 3), ("queue", 4))))
if mibBuilder.loadTexts: hh3cIfQoSGTSClassRuleType.setStatus('current')
hh3cIfQoSGTSClassRuleValue = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 65, 1, 5, 1, 1, 2), Integer32())
if mibBuilder.loadTexts: hh3cIfQoSGTSClassRuleValue.setStatus('current')
hh3cIfQoSGTSCir = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 65, 1, 5, 1, 1, 3), Unsigned32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cIfQoSGTSCir.setStatus('current')
hh3cIfQoSGTSCbs = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 65, 1, 5, 1, 1, 4), Unsigned32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cIfQoSGTSCbs.setStatus('current')
hh3cIfQoSGTSEbs = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 65, 1, 5, 1, 1, 5), Unsigned32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cIfQoSGTSEbs.setStatus('current')
hh3cIfQoSGTSQueueLength = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 65, 1, 5, 1, 1, 6), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cIfQoSGTSQueueLength.setStatus('current')
hh3cIfQoSGTSConfigRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 65, 1, 5, 1, 1, 7), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cIfQoSGTSConfigRowStatus.setStatus('current')
hh3cIfQoSGTSRunInfoTable = MibTable((1, 3, 6, 1, 4, 1, 25506, 2, 65, 1, 5, 2), )
if mibBuilder.loadTexts: hh3cIfQoSGTSRunInfoTable.setStatus('current')
hh3cIfQoSGTSRunInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 25506, 2, 65, 1, 5, 2, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "HH3C-IFQOS2-MIB", "hh3cIfQoSGTSClassRuleType"), (0, "HH3C-IFQOS2-MIB", "hh3cIfQoSGTSClassRuleValue"))
if mibBuilder.loadTexts: hh3cIfQoSGTSRunInfoEntry.setStatus('current')
hh3cIfQoSGTSQueueSize = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 65, 1, 5, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cIfQoSGTSQueueSize.setStatus('current')
hh3cIfQoSGTSPassedPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 65, 1, 5, 2, 1, 2), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cIfQoSGTSPassedPackets.setStatus('current')
hh3cIfQoSGTSPassedBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 65, 1, 5, 2, 1, 3), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cIfQoSGTSPassedBytes.setStatus('current')
hh3cIfQoSGTSDiscardPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 65, 1, 5, 2, 1, 4), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cIfQoSGTSDiscardPackets.setStatus('current')
hh3cIfQoSGTSDiscardBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 65, 1, 5, 2, 1, 5), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cIfQoSGTSDiscardBytes.setStatus('current')
hh3cIfQoSGTSDelayedPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 65, 1, 5, 2, 1, 6), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cIfQoSGTSDelayedPackets.setStatus('current')
hh3cIfQoSGTSDelayedBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 65, 1, 5, 2, 1, 7), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cIfQoSGTSDelayedBytes.setStatus('current')
hh3cIfQoSWREDObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 25506, 2, 65, 1, 6))
hh3cIfQoSWredGroupGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 25506, 2, 65, 1, 6, 1))
hh3cIfQoSWredGroupNextIndex = MibScalar((1, 3, 6, 1, 4, 1, 25506, 2, 65, 1, 6, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cIfQoSWredGroupNextIndex.setStatus('current')
hh3cIfQoSWredGroupTable = MibTable((1, 3, 6, 1, 4, 1, 25506, 2, 65, 1, 6, 1, 2), )
if mibBuilder.loadTexts: hh3cIfQoSWredGroupTable.setStatus('current')
hh3cIfQoSWredGroupEntry = MibTableRow((1, 3, 6, 1, 4, 1, 25506, 2, 65, 1, 6, 1, 2, 1), ).setIndexNames((0, "HH3C-IFQOS2-MIB", "hh3cIfQoSWredGroupIndex"))
if mibBuilder.loadTexts: hh3cIfQoSWredGroupEntry.setStatus('current')
hh3cIfQoSWredGroupIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 65, 1, 6, 1, 2, 1, 1), Integer32())
if mibBuilder.loadTexts: hh3cIfQoSWredGroupIndex.setStatus('current')
hh3cIfQoSWredGroupName = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 65, 1, 6, 1, 2, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 32))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cIfQoSWredGroupName.setStatus('current')
hh3cIfQoSWredGroupType = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 65, 1, 6, 1, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9))).clone(namedValues=NamedValues(("userdefined", 0), ("dot1p", 1), ("ippre", 2), ("dscp", 3), ("localpre", 4), ("atmclp", 5), ("frde", 6), ("exp", 7), ("queue", 8), ("dropLevel", 9)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cIfQoSWredGroupType.setStatus('current')
hh3cIfQoSWredGroupWeightingConstant = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 65, 1, 6, 1, 2, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 15)).clone(9)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cIfQoSWredGroupWeightingConstant.setStatus('current')
hh3cIfQoSWredGroupRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 65, 1, 6, 1, 2, 1, 6), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cIfQoSWredGroupRowStatus.setStatus('current')
hh3cIfQoSWredGroupContentTable = MibTable((1, 3, 6, 1, 4, 1, 25506, 2, 65, 1, 6, 1, 3), )
if mibBuilder.loadTexts: hh3cIfQoSWredGroupContentTable.setStatus('current')
hh3cIfQoSWredGroupContentEntry = MibTableRow((1, 3, 6, 1, 4, 1, 25506, 2, 65, 1, 6, 1, 3, 1), ).setIndexNames((0, "HH3C-IFQOS2-MIB", "hh3cIfQoSWredGroupIndex"), (0, "HH3C-IFQOS2-MIB", "hh3cIfQoSWredGroupContentIndex"), (0, "HH3C-IFQOS2-MIB", "hh3cIfQoSWredGroupContentSubIndex"))
if mibBuilder.loadTexts: hh3cIfQoSWredGroupContentEntry.setStatus('current')
hh3cIfQoSWredGroupContentIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 65, 1, 6, 1, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 63)))
if mibBuilder.loadTexts: hh3cIfQoSWredGroupContentIndex.setStatus('current')
hh3cIfQoSWredGroupContentSubIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 65, 1, 6, 1, 3, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 63)))
if mibBuilder.loadTexts: hh3cIfQoSWredGroupContentSubIndex.setStatus('current')
hh3cIfQoSWredLowLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 65, 1, 6, 1, 3, 1, 3), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cIfQoSWredLowLimit.setStatus('current')
hh3cIfQoSWredHighLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 65, 1, 6, 1, 3, 1, 4), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cIfQoSWredHighLimit.setStatus('current')
hh3cIfQoSWredDiscardProb = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 65, 1, 6, 1, 3, 1, 5), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cIfQoSWredDiscardProb.setStatus('current')
hh3cIfQoSWredGroupExponent = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 65, 1, 6, 1, 3, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 15)).clone(9)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cIfQoSWredGroupExponent.setStatus('current')
hh3cIfQoSWredRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 65, 1, 6, 1, 3, 1, 7), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cIfQoSWredRowStatus.setStatus('current')
hh3cIfQoSWredGroupApplyIfTable = MibTable((1, 3, 6, 1, 4, 1, 25506, 2, 65, 1, 6, 1, 4), )
if mibBuilder.loadTexts: hh3cIfQoSWredGroupApplyIfTable.setStatus('current')
hh3cIfQoSWredGroupApplyIfEntry = MibTableRow((1, 3, 6, 1, 4, 1, 25506, 2, 65, 1, 6, 1, 4, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: hh3cIfQoSWredGroupApplyIfEntry.setStatus('current')
hh3cIfQoSWredGroupApplyIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 65, 1, 6, 1, 4, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 256))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cIfQoSWredGroupApplyIndex.setStatus('current')
hh3cIfQoSWredGroupApplyName = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 65, 1, 6, 1, 4, 1, 2), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cIfQoSWredGroupApplyName.setStatus('current')
hh3cIfQoSWredGroupIfRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 65, 1, 6, 1, 4, 1, 3), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cIfQoSWredGroupIfRowStatus.setStatus('current')
hh3cIfQoSWredApplyIfRunInfoTable = MibTable((1, 3, 6, 1, 4, 1, 25506, 2, 65, 1, 6, 1, 5), )
if mibBuilder.loadTexts: hh3cIfQoSWredApplyIfRunInfoTable.setStatus('current')
hh3cIfQoSWredApplyIfRunInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 25506, 2, 65, 1, 6, 1, 5, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "HH3C-IFQOS2-MIB", "hh3cIfQoSWredGroupIndex"), (0, "HH3C-IFQOS2-MIB", "hh3cIfQoSWredGroupContentIndex"), (0, "HH3C-IFQOS2-MIB", "hh3cIfQoSWredGroupContentSubIndex"))
if mibBuilder.loadTexts: hh3cIfQoSWredApplyIfRunInfoEntry.setStatus('current')
hh3cIfQoSWredPreRandomDropNum = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 65, 1, 6, 1, 5, 1, 1), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cIfQoSWredPreRandomDropNum.setStatus('current')
hh3cIfQoSWredPreTailDropNum = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 65, 1, 6, 1, 5, 1, 2), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cIfQoSWredPreTailDropNum.setStatus('current')
hh3cIfQoSPortWredGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 25506, 2, 65, 1, 6, 2))
hh3cIfQoSPortWredWeightConstantTable = MibTable((1, 3, 6, 1, 4, 1, 25506, 2, 65, 1, 6, 2, 1), )
if mibBuilder.loadTexts: hh3cIfQoSPortWredWeightConstantTable.setStatus('current')
hh3cIfQoSPortWredWeightConstantEntry = MibTableRow((1, 3, 6, 1, 4, 1, 25506, 2, 65, 1, 6, 2, 1, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: hh3cIfQoSPortWredWeightConstantEntry.setStatus('current')
hh3cIfQoSPortWredEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 65, 1, 6, 2, 1, 1, 1), TruthValue()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cIfQoSPortWredEnable.setStatus('current')
hh3cIfQoSPortWredWeightConstant = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 65, 1, 6, 2, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 16))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cIfQoSPortWredWeightConstant.setStatus('current')
hh3cIfQoSPortWredWeightConstantRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 65, 1, 6, 2, 1, 1, 3), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cIfQoSPortWredWeightConstantRowStatus.setStatus('current')
hh3cIfQoSPortWredPreConfigTable = MibTable((1, 3, 6, 1, 4, 1, 25506, 2, 65, 1, 6, 2, 2), )
if mibBuilder.loadTexts: hh3cIfQoSPortWredPreConfigTable.setStatus('current')
hh3cIfQoSPortWredPreConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 25506, 2, 65, 1, 6, 2, 2, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "HH3C-IFQOS2-MIB", "hh3cIfQoSPortWredPreID"))
if mibBuilder.loadTexts: hh3cIfQoSPortWredPreConfigEntry.setStatus('current')
hh3cIfQoSPortWredPreID = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 65, 1, 6, 2, 2, 1, 1), Integer32())
if mibBuilder.loadTexts: hh3cIfQoSPortWredPreID.setStatus('current')
hh3cIfQoSPortWredPreLowLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 65, 1, 6, 2, 2, 1, 2), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cIfQoSPortWredPreLowLimit.setStatus('current')
hh3cIfQoSPortWredPreHighLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 65, 1, 6, 2, 2, 1, 3), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cIfQoSPortWredPreHighLimit.setStatus('current')
hh3cIfQoSPortWredPreDiscardProbability = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 65, 1, 6, 2, 2, 1, 4), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cIfQoSPortWredPreDiscardProbability.setStatus('current')
hh3cIfQoSPortWredPreRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 65, 1, 6, 2, 2, 1, 5), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cIfQoSPortWredPreRowStatus.setStatus('current')
hh3cIfQoSPortWredRunInfoTable = MibTable((1, 3, 6, 1, 4, 1, 25506, 2, 65, 1, 6, 2, 3), )
if mibBuilder.loadTexts: hh3cIfQoSPortWredRunInfoTable.setStatus('current')
hh3cIfQoSPortWredRunInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 25506, 2, 65, 1, 6, 2, 3, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "HH3C-IFQOS2-MIB", "hh3cIfQoSPortWredPreID"))
if mibBuilder.loadTexts: hh3cIfQoSPortWredRunInfoEntry.setStatus('current')
hh3cIfQoSWREDTailDropNum = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 65, 1, 6, 2, 3, 1, 1), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cIfQoSWREDTailDropNum.setStatus('current')
hh3cIfQoSWREDRandomDropNum = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 65, 1, 6, 2, 3, 1, 2), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cIfQoSWREDRandomDropNum.setStatus('current')
hh3cIfQoSPortPriorityObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 25506, 2, 65, 1, 7))
hh3cIfQoSPortPriorityConfigGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 25506, 2, 65, 1, 7, 1))
hh3cIfQoSPortPriorityTable = MibTable((1, 3, 6, 1, 4, 1, 25506, 2, 65, 1, 7, 1, 1), )
if mibBuilder.loadTexts: hh3cIfQoSPortPriorityTable.setStatus('current')
hh3cIfQoSPortPriorityEntry = MibTableRow((1, 3, 6, 1, 4, 1, 25506, 2, 65, 1, 7, 1, 1, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: hh3cIfQoSPortPriorityEntry.setStatus('current')
hh3cIfQoSPortPriorityValue = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 65, 1, 7, 1, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hh3cIfQoSPortPriorityValue.setStatus('current')
hh3cIfQoSPortPirorityTrustTable = MibTable((1, 3, 6, 1, 4, 1, 25506, 2, 65, 1, 7, 1, 2), )
if mibBuilder.loadTexts: hh3cIfQoSPortPirorityTrustTable.setStatus('current')
hh3cIfQoSPortPirorityTrustEntry = MibTableRow((1, 3, 6, 1, 4, 1, 25506, 2, 65, 1, 7, 1, 2, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: hh3cIfQoSPortPirorityTrustEntry.setStatus('current')
hh3cIfQoSPortPriorityTrustTrustType = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 65, 1, 7, 1, 2, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("untrust", 1), ("dot1p", 2), ("dscp", 3), ("exp", 4))).clone('untrust')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hh3cIfQoSPortPriorityTrustTrustType.setStatus('current')
hh3cIfQoSPortPriorityTrustOvercastType = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 65, 1, 7, 1, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("noOvercast", 1), ("overcastDSCP", 2), ("overcastCOS", 3))).clone('noOvercast')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hh3cIfQoSPortPriorityTrustOvercastType.setStatus('current')
hh3cIfQoSMapObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 25506, 2, 65, 1, 9))
hh3cIfQoSPriMapConfigGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 25506, 2, 65, 1, 9, 1))
hh3cIfQoSPriMapGroupNextIndex = MibScalar((1, 3, 6, 1, 4, 1, 25506, 2, 65, 1, 9, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cIfQoSPriMapGroupNextIndex.setStatus('current')
hh3cIfQoSPriMapGroupTable = MibTable((1, 3, 6, 1, 4, 1, 25506, 2, 65, 1, 9, 1, 2), )
if mibBuilder.loadTexts: hh3cIfQoSPriMapGroupTable.setStatus('current')
hh3cIfQoSPriMapGroupEntry = MibTableRow((1, 3, 6, 1, 4, 1, 25506, 2, 65, 1, 9, 1, 2, 1), ).setIndexNames((0, "HH3C-IFQOS2-MIB", "hh3cIfQoSPriMapGroupIndex"))
if mibBuilder.loadTexts: hh3cIfQoSPriMapGroupEntry.setStatus('current')
hh3cIfQoSPriMapGroupIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 65, 1, 9, 1, 2, 1, 1), Integer32())
if mibBuilder.loadTexts: hh3cIfQoSPriMapGroupIndex.setStatus('current')
hh3cIfQoSPriMapGroupType = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 65, 1, 9, 1, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10))).clone(namedValues=NamedValues(("userdefined", 1), ("dot1p-dp", 2), ("dot1p-dscp", 3), ("dot1p-lp", 4), ("dscp-dot1p", 5), ("dscp-dp", 6), ("dscp-dscp", 7), ("dscp-lp", 8), ("exp-dp", 9), ("exp-lp", 10)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cIfQoSPriMapGroupType.setStatus('current')
hh3cIfQoSPriMapGroupName = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 65, 1, 9, 1, 2, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 32))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cIfQoSPriMapGroupName.setStatus('current')
hh3cIfQoSPriMapGroupRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 65, 1, 9, 1, 2, 1, 4), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cIfQoSPriMapGroupRowStatus.setStatus('current')
hh3cIfQoSPriMapContentTable = MibTable((1, 3, 6, 1, 4, 1, 25506, 2, 65, 1, 9, 1, 3), )
if mibBuilder.loadTexts: hh3cIfQoSPriMapContentTable.setStatus('current')
hh3cIfQoSPriMapContentEntry = MibTableRow((1, 3, 6, 1, 4, 1, 25506, 2, 65, 1, 9, 1, 3, 1), ).setIndexNames((0, "HH3C-IFQOS2-MIB", "hh3cIfQoSPriMapGroupIndex"), (0, "HH3C-IFQOS2-MIB", "hh3cIfQoSPriMapGroupImportValue"))
if mibBuilder.loadTexts: hh3cIfQoSPriMapContentEntry.setStatus('current')
hh3cIfQoSPriMapGroupImportValue = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 65, 1, 9, 1, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 63)))
if mibBuilder.loadTexts: hh3cIfQoSPriMapGroupImportValue.setStatus('current')
hh3cIfQoSPriMapGroupExportValue = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 65, 1, 9, 1, 3, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 63))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cIfQoSPriMapGroupExportValue.setStatus('current')
hh3cIfQoSPriMapContentRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 65, 1, 9, 1, 3, 1, 3), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cIfQoSPriMapContentRowStatus.setStatus('current')
hh3cIfQoSL3PlusObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 25506, 2, 65, 1, 10))
hh3cIfQoSPortBindingGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 25506, 2, 65, 1, 10, 1))
hh3cIfQoSPortBindingTable = MibTable((1, 3, 6, 1, 4, 1, 25506, 2, 65, 1, 10, 1, 1), )
if mibBuilder.loadTexts: hh3cIfQoSPortBindingTable.setStatus('current')
hh3cIfQoSPortBindingEntry = MibTableRow((1, 3, 6, 1, 4, 1, 25506, 2, 65, 1, 10, 1, 1, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: hh3cIfQoSPortBindingEntry.setStatus('current')
hh3cIfQoSBindingIf = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 65, 1, 10, 1, 1, 1, 1), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cIfQoSBindingIf.setStatus('current')
hh3cIfQoSBindingRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 65, 1, 10, 1, 1, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cIfQoSBindingRowStatus.setStatus('current')
hh3cQoSTraStaObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 25506, 2, 65, 1, 11))
hh3cQoSTraStaConfigGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 25506, 2, 65, 1, 11, 1))
hh3cQoSIfTraStaConfigInfoTable = MibTable((1, 3, 6, 1, 4, 1, 25506, 2, 65, 1, 11, 1, 1), )
if mibBuilder.loadTexts: hh3cQoSIfTraStaConfigInfoTable.setStatus('current')
hh3cQoSIfTraStaConfigInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 25506, 2, 65, 1, 11, 1, 1, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "HH3C-IFQOS2-MIB", "hh3cQoSIfTraStaConfigDirection"))
if mibBuilder.loadTexts: hh3cQoSIfTraStaConfigInfoEntry.setStatus('current')
hh3cQoSIfTraStaConfigDirection = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 65, 1, 11, 1, 1, 1, 1), Direction())
if mibBuilder.loadTexts: hh3cQoSIfTraStaConfigDirection.setStatus('current')
hh3cQoSIfTraStaConfigQueue = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 65, 1, 11, 1, 1, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 1)).setFixedLength(1)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cQoSIfTraStaConfigQueue.setStatus('current')
hh3cQoSIfTraStaConfigDot1p = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 65, 1, 11, 1, 1, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 1)).setFixedLength(1)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cQoSIfTraStaConfigDot1p.setStatus('current')
hh3cQoSIfTraStaConfigDscp = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 65, 1, 11, 1, 1, 1, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(8, 8)).setFixedLength(8)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cQoSIfTraStaConfigDscp.setStatus('current')
hh3cQoSIfTraStaConfigVlan = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 65, 1, 11, 1, 1, 1, 5), OctetString().subtype(subtypeSpec=ValueSizeConstraint(512, 512)).setFixedLength(512)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cQoSIfTraStaConfigVlan.setStatus('current')
hh3cQoSIfTraStaConfigStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 65, 1, 11, 1, 1, 1, 6), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cQoSIfTraStaConfigStatus.setStatus('current')
hh3cQoSTraStaRunGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 25506, 2, 65, 1, 11, 2))
hh3cQoSIfTraStaRunInfoTable = MibTable((1, 3, 6, 1, 4, 1, 25506, 2, 65, 1, 11, 2, 1), )
if mibBuilder.loadTexts: hh3cQoSIfTraStaRunInfoTable.setStatus('current')
hh3cQoSIfTraStaRunInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 25506, 2, 65, 1, 11, 2, 1, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "HH3C-IFQOS2-MIB", "hh3cQoSIfTraStaRunObjectType"), (0, "HH3C-IFQOS2-MIB", "hh3cQoSIfTraStaRunObjectValue"), (0, "HH3C-IFQOS2-MIB", "hh3cQoSIfTraStaRunDirection"))
if mibBuilder.loadTexts: hh3cQoSIfTraStaRunInfoEntry.setStatus('current')
hh3cQoSIfTraStaRunObjectType = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 65, 1, 11, 2, 1, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("queue", 1), ("dot1p", 2), ("dscp", 3), ("vlanID", 4))))
if mibBuilder.loadTexts: hh3cQoSIfTraStaRunObjectType.setStatus('current')
hh3cQoSIfTraStaRunObjectValue = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 65, 1, 11, 2, 1, 1, 2), Integer32())
if mibBuilder.loadTexts: hh3cQoSIfTraStaRunObjectValue.setStatus('current')
hh3cQoSIfTraStaRunDirection = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 65, 1, 11, 2, 1, 1, 3), Direction())
if mibBuilder.loadTexts: hh3cQoSIfTraStaRunDirection.setStatus('current')
hh3cQoSIfTraStaRunPassPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 65, 1, 11, 2, 1, 1, 4), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cQoSIfTraStaRunPassPackets.setStatus('current')
hh3cQoSIfTraStaRunDropPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 65, 1, 11, 2, 1, 1, 5), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cQoSIfTraStaRunDropPackets.setStatus('current')
hh3cQoSIfTraStaRunPassBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 65, 1, 11, 2, 1, 1, 6), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cQoSIfTraStaRunPassBytes.setStatus('current')
hh3cQoSIfTraStaRunDropBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 65, 1, 11, 2, 1, 1, 7), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cQoSIfTraStaRunDropBytes.setStatus('current')
hh3cQoSIfTraStaRunPassPPS = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 65, 1, 11, 2, 1, 1, 8), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cQoSIfTraStaRunPassPPS.setStatus('current')
hh3cQoSIfTraStaRunPassBPS = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 65, 1, 11, 2, 1, 1, 9), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cQoSIfTraStaRunPassBPS.setStatus('current')
mibBuilder.exportSymbols("HH3C-IFQOS2-MIB", hh3cIfQoSWredGroupNextIndex=hh3cIfQoSWredGroupNextIndex, hh3cIfQoSCQDefaultEntry=hh3cIfQoSCQDefaultEntry, hh3cIfQoSWredGroupApplyIfEntry=hh3cIfQoSWredGroupApplyIfEntry, hh3cQoSIfTraStaRunInfoTable=hh3cQoSIfTraStaRunInfoTable, hh3cIfQoSWFQDiscardPackets=hh3cIfQoSWFQDiscardPackets, hh3cIfQoSPQClassRuleValue=hh3cIfQoSPQClassRuleValue, hh3cIfQoSCQDefaultTable=hh3cIfQoSCQDefaultTable, hh3cIfQoSFIFOSize=hh3cIfQoSFIFOSize, hh3cIfQoSMaxBandwidth=hh3cIfQoSMaxBandwidth, hh3cIfQoSQSType=hh3cIfQoSQSType, hh3cIfQoSQmtokenGroup=hh3cIfQoSQmtokenGroup, hh3cIfQoSWFQRunInfoTable=hh3cIfQoSWFQRunInfoTable, hh3cIfQoSTricolorCarConfigEntry=hh3cIfQoSTricolorCarConfigEntry, hh3cIfQoSRTPQRowStatus=hh3cIfQoSRTPQRowStatus, hh3cIfQoSPortPriorityTrustTrustType=hh3cIfQoSPortPriorityTrustTrustType, hh3cIfQoSCurQueueBytes=hh3cIfQoSCurQueueBytes, hh3cIfQoSWredDropPkts=hh3cIfQoSWredDropPkts, hh3cIfQoSGTSQueueLength=hh3cIfQoSGTSQueueLength, hh3cIfQoSGTSConfigEntry=hh3cIfQoSGTSConfigEntry, hh3cIfQoSFIFOConfigTable=hh3cIfQoSFIFOConfigTable, hh3cIfQoSAggregativeCarRunInfoEntry=hh3cIfQoSAggregativeCarRunInfoEntry, hh3cIfQoSPortWredWeightConstant=hh3cIfQoSPortWredWeightConstant, hh3cIfQoSCQApplyEntry=hh3cIfQoSCQApplyEntry, hh3cIfQoSAggregativeCarNextIndex=hh3cIfQoSAggregativeCarNextIndex, hh3cIfQoSPortWredWeightConstantRowStatus=hh3cIfQoSPortWredWeightConstantRowStatus, hh3cIfQoSWredDropHPreTcpBPS=hh3cIfQoSWredDropHPreTcpBPS, hh3cIfQoSPriMapGroupImportValue=hh3cIfQoSPriMapGroupImportValue, hh3cIfQoSGTSConfigRowStatus=hh3cIfQoSGTSConfigRowStatus, hh3cIfQoSTricolorCarRunInfoTable=hh3cIfQoSTricolorCarRunInfoTable, hh3cIfQoSPortWredWeightConstantEntry=hh3cIfQoSPortWredWeightConstantEntry, hh3cIfQoSWredDropLPreTcpPPS=hh3cIfQoSWredDropLPreTcpPPS, hh3cIfQoSTricolorCarEbs=hh3cIfQoSTricolorCarEbs, hh3cIfQoSPortWredPreRowStatus=hh3cIfQoSPortWredPreRowStatus, hh3cIfQoSAggregativeCarApplyDirection=hh3cIfQoSAggregativeCarApplyDirection, hh3cIfQoSCQClassRuleEntry=hh3cIfQoSCQClassRuleEntry, hh3cIfQoSPortBindingTable=hh3cIfQoSPortBindingTable, hh3cIfQoSTricolorCarCbs=hh3cIfQoSTricolorCarCbs, hh3cIfQoSAggregativeCarApplyRowStatus=hh3cIfQoSAggregativeCarApplyRowStatus, PriorityQueue=PriorityQueue, hh3cIfQoSBandwidthRowStatus=hh3cIfQoSBandwidthRowStatus, hh3cIfQoSTricolorCarRowStatus=hh3cIfQoSTricolorCarRowStatus, hh3cIfQoSPortPriorityTrustOvercastType=hh3cIfQoSPortPriorityTrustOvercastType, hh3cIfQoSCarlParaValue=hh3cIfQoSCarlParaValue, hh3cIfQoSWredGroupName=hh3cIfQoSWredGroupName, hh3cIfQoSTricolorCarYellowActionValue=hh3cIfQoSTricolorCarYellowActionValue, hh3cIfQoSPriMapGroupRowStatus=hh3cIfQoSPriMapGroupRowStatus, hh3cIfQoSAggregativeCarRedActionType=hh3cIfQoSAggregativeCarRedActionType, hh3cIfQoSWredGroupIndex=hh3cIfQoSWredGroupIndex, hh3cIfQoSPortPirorityTrustEntry=hh3cIfQoSPortPirorityTrustEntry, hh3cIfQoSPassPPS=hh3cIfQoSPassPPS, hh3cIfQoSDropPackets=hh3cIfQoSDropPackets, hh3cIfQoSWFQType=hh3cIfQoSWFQType, hh3cIfQoSCarlEntry=hh3cIfQoSCarlEntry, hh3cIfQoSTricolorCarCir=hh3cIfQoSTricolorCarCir, hh3cQoSIfTraStaRunPassBPS=hh3cQoSIfTraStaRunPassBPS, hh3cIfQoSHQueueTcpRunInfoTable=hh3cIfQoSHQueueTcpRunInfoTable, hh3cIfQoSLRCir=hh3cIfQoSLRCir, hh3cIfQoSWFQQueueLength=hh3cIfQoSWFQQueueLength, hh3cIfQoSAggregativeCarCbs=hh3cIfQoSAggregativeCarCbs, hh3cIfQoSWredGroupWeightingConstant=hh3cIfQoSWredGroupWeightingConstant, hh3cIfQoSTricolorCarPir=hh3cIfQoSTricolorCarPir, hh3cIfQoSPQClassRuleEntry=hh3cIfQoSPQClassRuleEntry, hh3cIfQoSWredDropHPreTcpPPS=hh3cIfQoSWredDropHPreTcpPPS, hh3cIfQoSWredDropHPreNTcpBytes=hh3cIfQoSWredDropHPreNTcpBytes, hh3cIfQoSCQClassRuleType=hh3cIfQoSCQClassRuleType, hh3cIfQosWFQhashedTotalQueues=hh3cIfQosWFQhashedTotalQueues, hh3cIfQoSQmtokenRosStatus=hh3cIfQoSQmtokenRosStatus, hh3cIfQoSWredGroupContentIndex=hh3cIfQoSWredGroupContentIndex, hh3cIfQoSWFQTable=hh3cIfQoSWFQTable, hh3cIfQoSPQRunInfoTable=hh3cIfQoSPQRunInfoTable, hh3cIfQoSAggregativeCarYellowActionType=hh3cIfQoSAggregativeCarYellowActionType, hh3cIfQoSPQListNumber=hh3cIfQoSPQListNumber, hh3cIfQoSFIFORunInfoTable=hh3cIfQoSFIFORunInfoTable, hh3cIfQoSWredDiscardProb=hh3cIfQoSWredDiscardProb, hh3cIfQoSAggregativeCarApplyRuleType=hh3cIfQoSAggregativeCarApplyRuleType, hh3cIfQoSHQueueTcpRunInfoEntry=hh3cIfQoSHQueueTcpRunInfoEntry, hh3cIfQoSPortWredWeightConstantTable=hh3cIfQoSPortWredWeightConstantTable, hh3cIfQoSCQRunInfoGroup=hh3cIfQoSCQRunInfoGroup, hh3cIfQoSCQQueueLengthTable=hh3cIfQoSCQQueueLengthTable, hh3cIfQoSTricolorCarYellowPackets=hh3cIfQoSTricolorCarYellowPackets, hh3cIfQoSPQConfigGroup=hh3cIfQoSPQConfigGroup, hh3cIfQoSPQRunInfoEntry=hh3cIfQoSPQRunInfoEntry, hh3cIfQoSPortBindingGroup=hh3cIfQoSPortBindingGroup, hh3cIfQoSCarListObject=hh3cIfQoSCarListObject, hh3cIfQoSGTSDiscardPackets=hh3cIfQoSGTSDiscardPackets, hh3cIfQoSTricolorCarYellowActionType=hh3cIfQoSTricolorCarYellowActionType, hh3cIfQoSWREDObjects=hh3cIfQoSWREDObjects, hh3cQoSIfTraStaConfigInfoEntry=hh3cQoSIfTraStaConfigInfoEntry, hh3cQoSTraStaRunGroup=hh3cQoSTraStaRunGroup, hh3cIfQoSRTPQStartPort=hh3cIfQoSRTPQStartPort, hh3cIfQoSTricolorCarYellowBytes=hh3cIfQoSTricolorCarYellowBytes, hh3cIfQoSWREDRandomDropNum=hh3cIfQoSWREDRandomDropNum, hh3cIfQoSPortWredPreHighLimit=hh3cIfQoSPortWredPreHighLimit, hh3cIfQoSTricolorCarRedActionValue=hh3cIfQoSTricolorCarRedActionValue, hh3cIfQoSPortPriorityObjects=hh3cIfQoSPortPriorityObjects, hh3cQoSIfTraStaRunPassPackets=hh3cQoSIfTraStaRunPassPackets, hh3cIfQoSWFQLength=hh3cIfQoSWFQLength, hh3cIfQoSPriMapGroupEntry=hh3cIfQoSPriMapGroupEntry, hh3cIfQoSQmtokenEntry=hh3cIfQoSQmtokenEntry, hh3cIfQoSWredDropBytes=hh3cIfQoSWredDropBytes, hh3cIfQoSWredDropLPreNTcpBytes=hh3cIfQoSWredDropLPreNTcpBytes, hh3cIfQoSCarlTable=hh3cIfQoSCarlTable, hh3cQoSIfTraStaRunDirection=hh3cQoSIfTraStaRunDirection, hh3cIfQoSPortWredPreLowLimit=hh3cIfQoSPortWredPreLowLimit, hh3cQoSIfTraStaRunPassBytes=hh3cQoSIfTraStaRunPassBytes, hh3cIfQoSCQClassRuleTable=hh3cIfQoSCQClassRuleTable, hh3cIfQoSAggregativeCarYellowPackets=hh3cIfQoSAggregativeCarYellowPackets, hh3cIfQoSLRConfigEntry=hh3cIfQoSLRConfigEntry, hh3cIfQoSCQClassRowStatus=hh3cIfQoSCQClassRowStatus, hh3cIfQoSCarlParaType=hh3cIfQoSCarlParaType, hh3cIfQoSTricolorCarRedPackets=hh3cIfQoSTricolorCarRedPackets, hh3cQoSIfTraStaConfigInfoTable=hh3cQoSIfTraStaConfigInfoTable, hh3cIfQoSTricolorCarType=hh3cIfQoSTricolorCarType, hh3cIfQoSAggregativeCarRedActionValue=hh3cIfQoSAggregativeCarRedActionValue, hh3cIfQoSWredLowLimit=hh3cIfQoSWredLowLimit, hh3cIfQoSGTSClassRuleValue=hh3cIfQoSGTSClassRuleValue, hh3cIfQoSCQListNumber=hh3cIfQoSCQListNumber, hh3cIfQoSCQRunInfoEntry=hh3cIfQoSCQRunInfoEntry, hh3cIfQoSGTSQueueSize=hh3cIfQoSGTSQueueSize, hh3cIfQoSTricolorCarGreenActionValue=hh3cIfQoSTricolorCarGreenActionValue, hh3cIfQoSHardwareQueueObjects=hh3cIfQoSHardwareQueueObjects, hh3cIfQoSPQApplyEntry=hh3cIfQoSPQApplyEntry, hh3cIfQoSAggregativeCarIndex=hh3cIfQoSAggregativeCarIndex, hh3cQoSIfTraStaConfigStatus=hh3cQoSIfTraStaConfigStatus, hh3cIfQoSWredGroupApplyIndex=hh3cIfQoSWredGroupApplyIndex, hh3cIfQoSWredRowStatus=hh3cIfQoSWredRowStatus, hh3cIfQoSTricolorCarRedActionType=hh3cIfQoSTricolorCarRedActionType, hh3cIfQoSLRRunInfoPassedBytes=hh3cIfQoSLRRunInfoPassedBytes, hh3cIfQoSLRConfigTable=hh3cIfQoSLRConfigTable, hh3cIfQoSCQApplyRowStatus=hh3cIfQoSCQApplyRowStatus, hh3cIfQoSRTPQObject=hh3cIfQoSRTPQObject, hh3cQoSIfTraStaRunObjectValue=hh3cQoSIfTraStaRunObjectValue, hh3cIfQoSPortBindingEntry=hh3cIfQoSPortBindingEntry, hh3cIfQoSFIFOConfigEntry=hh3cIfQoSFIFOConfigEntry, hh3cIfQoSGTSObjects=hh3cIfQoSGTSObjects, hh3cIfQoSRTPQPacketSize=hh3cIfQoSRTPQPacketSize, hh3cIfQoSPQApplyRowStatus=hh3cIfQoSPQApplyRowStatus, hh3cIfQoSGTSCbs=hh3cIfQoSGTSCbs, hh3cIfQoSWREDTailDropNum=hh3cIfQoSWREDTailDropNum, hh3cQoSTraStaConfigGroup=hh3cQoSTraStaConfigGroup, hh3cIfQoSCurQueuePPS=hh3cIfQoSCurQueuePPS, hh3cIfQoSPortWredPreID=hh3cIfQoSPortWredPreID, hh3cIfQos2=hh3cIfQos2, hh3cIfQoSRTPQConfigTable=hh3cIfQoSRTPQConfigTable, hh3cIfQoSAggregativeCarGreenActionValue=hh3cIfQoSAggregativeCarGreenActionValue, hh3cIfQoSPQClassRowStatus=hh3cIfQoSPQClassRowStatus, hh3cIfQoSWFQObject=hh3cIfQoSWFQObject, hh3cIfQoSBandwidthTable=hh3cIfQoSBandwidthTable, hh3cIfQoSWredGroupContentSubIndex=hh3cIfQoSWredGroupContentSubIndex, CarAction=CarAction, hh3cIfQoSRTPQEndPort=hh3cIfQoSRTPQEndPort, hh3cIfQoSTailDropBPS=hh3cIfQoSTailDropBPS, hh3cIfQoSAggregativeCarYellowBytes=hh3cIfQoSAggregativeCarYellowBytes, hh3cIfQoSCQClassRuleValue=hh3cIfQoSCQClassRuleValue, hh3cIfQoSWredApplyIfRunInfoEntry=hh3cIfQoSWredApplyIfRunInfoEntry, hh3cIfQoSHardwareQueueConfigGroup=hh3cIfQoSHardwareQueueConfigGroup, hh3cIfQoSPriMapGroupType=hh3cIfQoSPriMapGroupType, hh3cIfQoSQSModeEntry=hh3cIfQoSQSModeEntry, hh3cIfQoSGTSCir=hh3cIfQoSGTSCir, hh3cIfQoSPortWredGroup=hh3cIfQoSPortWredGroup, hh3cIfQoSQSMode=hh3cIfQoSQSMode, hh3cIfQoSPQObject=hh3cIfQoSPQObject, hh3cIfQoSPriMapConfigGroup=hh3cIfQoSPriMapConfigGroup, hh3cQos2=hh3cQos2, hh3cIfQoSPQSize=hh3cIfQoSPQSize, hh3cIfQoSRTPQOutputPackets=hh3cIfQoSRTPQOutputPackets, PYSNMP_MODULE_ID=hh3cIfQos2, hh3cQoSIfTraStaRunPassPPS=hh3cQoSIfTraStaRunPassPPS, hh3cIfQoSQueueLengthInBytes=hh3cIfQoSQueueLengthInBytes, hh3cIfQoSLRRunInfoEntry=hh3cIfQoSLRRunInfoEntry, hh3cIfQoSAggregativeCarApplyEntry=hh3cIfQoSAggregativeCarApplyEntry, hh3cIfQoSPortWredRunInfoTable=hh3cIfQoSPortWredRunInfoTable, hh3cIfQoSRTPQRunInfoTable=hh3cIfQoSRTPQRunInfoTable, hh3cIfQoSTricolorCarValue=hh3cIfQoSTricolorCarValue, hh3cIfQoSPassBytes=hh3cIfQoSPassBytes, hh3cIfQoSGTSRunInfoEntry=hh3cIfQoSGTSRunInfoEntry, hh3cIfQoSBindingIf=hh3cIfQoSBindingIf, hh3cIfQoSTailDropPkts=hh3cIfQoSTailDropPkts, hh3cIfQoSCQConfigGroup=hh3cIfQoSCQConfigGroup, hh3cIfQoSGTSDelayedBytes=hh3cIfQoSGTSDelayedBytes, hh3cIfQoSSoftwareQueueObjects=hh3cIfQoSSoftwareQueueObjects, hh3cIfQoSWredGroupGroup=hh3cIfQoSWredGroupGroup, hh3cIfQoSWFQRunInfoGroup=hh3cIfQoSWFQRunInfoGroup, hh3cIfQoSCARObjects=hh3cIfQoSCARObjects, hh3cIfQoSCQApplyTable=hh3cIfQoSCQApplyTable, hh3cIfQoSPQApplyListNumber=hh3cIfQoSPQApplyListNumber, hh3cIfQoSAggregativeCarYellowActionValue=hh3cIfQoSAggregativeCarYellowActionValue, hh3cQoSIfTraStaRunInfoEntry=hh3cQoSIfTraStaRunInfoEntry, hh3cIfQoSRTPQConfigEntry=hh3cIfQoSRTPQConfigEntry, hh3cIfQoSPortPriorityConfigGroup=hh3cIfQoSPortPriorityConfigGroup, hh3cIfQoSCQObject=hh3cIfQoSCQObject, hh3cIfQoSRTPQReservedBandwidth=hh3cIfQoSRTPQReservedBandwidth, hh3cIfQoSRowStatus=hh3cIfQoSRowStatus, hh3cIfQoSCQRunInfoDiscardPackets=hh3cIfQoSCQRunInfoDiscardPackets, hh3cQoSIfTraStaConfigDirection=hh3cQoSIfTraStaConfigDirection, hh3cIfQoSAggregativeCarGroup=hh3cIfQoSAggregativeCarGroup, hh3cIfQoSPassPackets=hh3cIfQoSPassPackets, hh3cIfQoSTricolorCarRedBytes=hh3cIfQoSTricolorCarRedBytes, hh3cIfQoSWredDropLPreNTcpBPS=hh3cIfQoSWredDropLPreNTcpBPS, hh3cIfQoSRTPQCbs=hh3cIfQoSRTPQCbs, hh3cIfQoSQmtokenNumber=hh3cIfQoSQmtokenNumber, hh3cIfQoSPQQueueLengthEntry=hh3cIfQoSPQQueueLengthEntry, hh3cIfQoSAggregativeCarConfigEntry=hh3cIfQoSAggregativeCarConfigEntry, hh3cIfQoSTricolorCarGroup=hh3cIfQoSTricolorCarGroup, hh3cIfQoSPortWredRunInfoEntry=hh3cIfQoSPortWredRunInfoEntry, hh3cIfQoSWredGroupApplyName=hh3cIfQoSWredGroupApplyName, hh3cIfQoSPriMapGroupNextIndex=hh3cIfQoSPriMapGroupNextIndex, hh3cQoSIfTraStaConfigVlan=hh3cQoSIfTraStaConfigVlan, hh3cIfQoSQSMaxDelay=hh3cIfQoSQSMaxDelay, hh3cIfQoSBandwidthGroup=hh3cIfQoSBandwidthGroup, hh3cIfQoSWredGroupContentTable=hh3cIfQoSWredGroupContentTable, hh3cIfQoSCQRunInfoTable=hh3cIfQoSCQRunInfoTable, hh3cIfQoSPQClassRuleTable=hh3cIfQoSPQClassRuleTable, hh3cIfQoSDropBytes=hh3cIfQoSDropBytes, hh3cIfQoSWFQHashedMaxActiveQueues=hh3cIfQoSWFQHashedMaxActiveQueues, hh3cIfQoSCurQueueBPS=hh3cIfQoSCurQueueBPS, hh3cIfQoSPQDefaultEntry=hh3cIfQoSPQDefaultEntry, hh3cIfQoSWredGroupExponent=hh3cIfQoSWredGroupExponent, hh3cIfQoSFIFORunInfoEntry=hh3cIfQoSFIFORunInfoEntry, hh3cIfQoSCarlListNum=hh3cIfQoSCarlListNum, hh3cIfQoSWredGroupRowStatus=hh3cIfQoSWredGroupRowStatus, hh3cIfQoSQueueID=hh3cIfQoSQueueID, hh3cIfQoSQueueLengthInPkts=hh3cIfQoSQueueLengthInPkts, hh3cIfQoSFIFOObject=hh3cIfQoSFIFOObject, hh3cIfQoSQueueGroupType=hh3cIfQoSQueueGroupType, hh3cIfQoSHardwareQueueRunInfoGroup=hh3cIfQoSHardwareQueueRunInfoGroup, hh3cQoSIfTraStaConfigDot1p=hh3cQoSIfTraStaConfigDot1p, hh3cIfQoSAggregativeCarRowStatus=hh3cIfQoSAggregativeCarRowStatus, hh3cIfQoSLRRunInfoPassedPackets=hh3cIfQoSLRRunInfoPassedPackets, hh3cIfQoSRTPQDiscardPackets=hh3cIfQoSRTPQDiscardPackets, hh3cIfQoSReservedBandwidthPct=hh3cIfQoSReservedBandwidthPct, hh3cIfQoSHardwareQueueRunInfoEntry=hh3cIfQoSHardwareQueueRunInfoEntry, hh3cIfQoSWredDropLPreNTcpPPS=hh3cIfQoSWredDropLPreNTcpPPS, hh3cIfQoSPortWredEnable=hh3cIfQoSPortWredEnable, hh3cIfQoSQSWeightEntry=hh3cIfQoSQSWeightEntry, hh3cIfQoSTricolorCarGreenActionType=hh3cIfQoSTricolorCarGreenActionType, hh3cIfQoSTricolorCarRunInfoEntry=hh3cIfQoSTricolorCarRunInfoEntry, hh3cIfQoSPQQueueLengthType=hh3cIfQoSPQQueueLengthType, hh3cIfQoSPQClassRuleType=hh3cIfQoSPQClassRuleType, hh3cIfQoSPortPriorityValue=hh3cIfQoSPortPriorityValue, hh3cIfQoSWredDropHPreNTcpBPS=hh3cIfQoSWredDropHPreNTcpBPS, hh3cIfQoSWFQSize=hh3cIfQoSWFQSize, hh3cIfQoSWredDropLPreNTcpPkts=hh3cIfQoSWredDropLPreNTcpPkts, hh3cIfQoSTricolorCarDirection=hh3cIfQoSTricolorCarDirection, hh3cIfQoSAggregativeCarRedBytes=hh3cIfQoSAggregativeCarRedBytes, hh3cIfQoSGTSPassedPackets=hh3cIfQoSGTSPassedPackets, hh3cIfQoSPQDefaultTable=hh3cIfQoSPQDefaultTable, hh3cIfQoSWFQEntry=hh3cIfQoSWFQEntry, hh3cIfQoSPQLength=hh3cIfQoSPQLength, hh3cIfQoSAggregativeCarGreenActionType=hh3cIfQoSAggregativeCarGreenActionType, hh3cIfQoSBindingRowStatus=hh3cIfQoSBindingRowStatus, hh3cIfQoSCQQueueServing=hh3cIfQoSCQQueueServing, hh3cIfQoSAggregativeCarApplyRuleValue=hh3cIfQoSAggregativeCarApplyRuleValue, hh3cIfQoSAggregativeCarType=hh3cIfQoSAggregativeCarType)
mibBuilder.exportSymbols("HH3C-IFQOS2-MIB", hh3cIfQoSRTPQPacketNumber=hh3cIfQoSRTPQPacketNumber, hh3cIfQoSPriMapContentEntry=hh3cIfQoSPriMapContentEntry, hh3cIfQoSPortWredPreConfigTable=hh3cIfQoSPortWredPreConfigTable, hh3cIfQoSWFQHashedActiveQueues=hh3cIfQoSWFQHashedActiveQueues, hh3cIfQoSWredPreTailDropNum=hh3cIfQoSWredPreTailDropNum, hh3cIfQoSWredDropHPreTcpBytes=hh3cIfQoSWredDropHPreTcpBytes, hh3cQoSIfTraStaRunDropBytes=hh3cQoSIfTraStaRunDropBytes, hh3cIfQoSWredGroupType=hh3cIfQoSWredGroupType, hh3cIfQoSRTPQRunInfoGroup=hh3cIfQoSRTPQRunInfoGroup, hh3cIfQoSAggregativeCarConfigTable=hh3cIfQoSAggregativeCarConfigTable, hh3cIfQoSTricolorCarGreenBytes=hh3cIfQoSTricolorCarGreenBytes, hh3cIfQoSWredGroupEntry=hh3cIfQoSWredGroupEntry, hh3cIfQoSWredDropHPreTcpPkts=hh3cIfQoSWredDropHPreTcpPkts, hh3cIfQoSPQApplyTable=hh3cIfQoSPQApplyTable, hh3cIfQoSPortPirorityTrustTable=hh3cIfQoSPortPirorityTrustTable, hh3cIfQoSPriMapContentRowStatus=hh3cIfQoSPriMapContentRowStatus, hh3cIfQoSPQRunInfoGroup=hh3cIfQoSPQRunInfoGroup, hh3cIfQoSWredGroupApplyIfTable=hh3cIfQoSWredGroupApplyIfTable, hh3cQoSIfTraStaRunObjectType=hh3cQoSIfTraStaRunObjectType, hh3cIfQoSGTSRunInfoTable=hh3cIfQoSGTSRunInfoTable, hh3cIfQoSPortPriorityTable=hh3cIfQoSPortPriorityTable, hh3cIfQoSAggregativeCarEbs=hh3cIfQoSAggregativeCarEbs, hh3cIfQoSPassBPS=hh3cIfQoSPassBPS, hh3cIfQoSCQDefaultQueueID=hh3cIfQoSCQDefaultQueueID, hh3cIfQoSLineRateObjects=hh3cIfQoSLineRateObjects, hh3cIfQoSAggregativeCarCir=hh3cIfQoSAggregativeCarCir, hh3cIfQoSPriMapGroupTable=hh3cIfQoSPriMapGroupTable, hh3cIfQoSPQDiscardPackets=hh3cIfQoSPQDiscardPackets, hh3cQoSIfTraStaConfigDscp=hh3cQoSIfTraStaConfigDscp, hh3cIfQoSWredGroupIfRowStatus=hh3cIfQoSWredGroupIfRowStatus, hh3cIfQoSTricolorCarConfigTable=hh3cIfQoSTricolorCarConfigTable, hh3cIfQoSGTSDiscardBytes=hh3cIfQoSGTSDiscardBytes, hh3cIfQoSWFQRowStatus=hh3cIfQoSWFQRowStatus, hh3cIfQoSFIFODiscardPackets=hh3cIfQoSFIFODiscardPackets, hh3cIfQoSFIFOMaxQueueLen=hh3cIfQoSFIFOMaxQueueLen, Direction=Direction, hh3cIfQoSAggregativeCarPir=hh3cIfQoSAggregativeCarPir, hh3cIfQoSPriMapContentTable=hh3cIfQoSPriMapContentTable, hh3cQoSIfTraStaRunDropPackets=hh3cQoSIfTraStaRunDropPackets, hh3cIfQoSPortWredPreConfigEntry=hh3cIfQoSPortWredPreConfigEntry, hh3cIfQoSL3PlusObjects=hh3cIfQoSL3PlusObjects, hh3cIfQoSMapObjects=hh3cIfQoSMapObjects, hh3cIfQoSHardwareQueueRunInfoTable=hh3cIfQoSHardwareQueueRunInfoTable, hh3cIfQoSLRRunInfoTable=hh3cIfQoSLRRunInfoTable, hh3cIfQoSWredDropPPS=hh3cIfQoSWredDropPPS, hh3cIfQoSWredPreRandomDropNum=hh3cIfQoSWredPreRandomDropNum, hh3cIfQoSQmtokenTable=hh3cIfQoSQmtokenTable, hh3cIfQoSPriMapGroupName=hh3cIfQoSPriMapGroupName, hh3cIfQoSWredGroupContentEntry=hh3cIfQoSWredGroupContentEntry, hh3cIfQoSWredDropLPreTcpBPS=hh3cIfQoSWredDropLPreTcpBPS, hh3cIfQoSCQRunInfoSize=hh3cIfQoSCQRunInfoSize, hh3cIfQoSWredDropLPreTcpBytes=hh3cIfQoSWredDropLPreTcpBytes, hh3cIfQoSLRRunInfoDelayedPackets=hh3cIfQoSLRRunInfoDelayedPackets, hh3cIfQoSLRDirection=hh3cIfQoSLRDirection, hh3cIfQoSAggregativeCarApplyCarIndex=hh3cIfQoSAggregativeCarApplyCarIndex, hh3cIfQoSPQQueueLengthValue=hh3cIfQoSPQQueueLengthValue, hh3cIfQoSCQQueueLengthEntry=hh3cIfQoSCQQueueLengthEntry, hh3cIfQoCarListGroup=hh3cIfQoCarListGroup, hh3cIfQoSRTPQRunInfoEntry=hh3cIfQoSRTPQRunInfoEntry, hh3cIfQoSTailDropPPS=hh3cIfQoSTailDropPPS, hh3cIfQoSLREbs=hh3cIfQoSLREbs, hh3cIfQoSCQRunInfoLength=hh3cIfQoSCQRunInfoLength, hh3cQoSTraStaObjects=hh3cQoSTraStaObjects, hh3cIfQoSWredDropLPreTcpPkts=hh3cIfQoSWredDropLPreTcpPkts, hh3cIfQoSCQQueueLength=hh3cIfQoSCQQueueLength, hh3cIfQoSAggregativeCarRunInfoTable=hh3cIfQoSAggregativeCarRunInfoTable, hh3cIfQoSLRRunInfoDelayedBytes=hh3cIfQoSLRRunInfoDelayedBytes, hh3cIfQoSGTSEbs=hh3cIfQoSGTSEbs, hh3cIfQoSCQApplyListNumber=hh3cIfQoSCQApplyListNumber, hh3cIfQoSGTSConfigTable=hh3cIfQoSGTSConfigTable, hh3cQoSIfTraStaConfigQueue=hh3cQoSIfTraStaConfigQueue, hh3cIfQoSAggregativeCarApplyTable=hh3cIfQoSAggregativeCarApplyTable, hh3cIfQoSWFQRunInfoEntry=hh3cIfQoSWFQRunInfoEntry, hh3cIfQoSWredHighLimit=hh3cIfQoSWredHighLimit, hh3cIfQoSWredGroupTable=hh3cIfQoSWredGroupTable, hh3cIfQoSPQType=hh3cIfQoSPQType, hh3cIfQoSQSWeightTable=hh3cIfQoSQSWeightTable, hh3cIfQoSAggregativeCarRedPackets=hh3cIfQoSAggregativeCarRedPackets, hh3cIfQoSTailDropBytes=hh3cIfQoSTailDropBytes, hh3cIfQoSWredDropBPS=hh3cIfQoSWredDropBPS, hh3cIfQoSLRRunInfoActiveShaping=hh3cIfQoSLRRunInfoActiveShaping, hh3cIfQoSPQQueueLengthTable=hh3cIfQoSPQQueueLengthTable, hh3cIfQoSPQDefaultQueueType=hh3cIfQoSPQDefaultQueueType, hh3cIfQoSWFQQueueNumber=hh3cIfQoSWFQQueueNumber, hh3cIfQoSAggregativeCarName=hh3cIfQoSAggregativeCarName, hh3cIfQoSRTPQConfigGroup=hh3cIfQoSRTPQConfigGroup, hh3cIfQoSPQClassRuleQueueType=hh3cIfQoSPQClassRuleQueueType, hh3cIfQoSGTSDelayedPackets=hh3cIfQoSGTSDelayedPackets, hh3cIfQoSQSValue=hh3cIfQoSQSValue, hh3cIfQoSPortWredPreDiscardProbability=hh3cIfQoSPortWredPreDiscardProbability, hh3cIfQoSQSModeTable=hh3cIfQoSQSModeTable, hh3cIfQoSWFQConfigGroup=hh3cIfQoSWFQConfigGroup, hh3cIfQoSLRCbs=hh3cIfQoSLRCbs, hh3cIfQoSTricolorCarGreenPackets=hh3cIfQoSTricolorCarGreenPackets, hh3cIfQoSCarlRowStatus=hh3cIfQoSCarlRowStatus, hh3cIfQoSAggregativeCarGreenPackets=hh3cIfQoSAggregativeCarGreenPackets, hh3cIfQoSCQQueueID=hh3cIfQoSCQQueueID, hh3cIfQoSGTSPassedBytes=hh3cIfQoSGTSPassedBytes, hh3cIfQoSBandwidthEntry=hh3cIfQoSBandwidthEntry, hh3cIfQoSAggregativeCarGreenBytes=hh3cIfQoSAggregativeCarGreenBytes, hh3cIfQoSGTSClassRuleType=hh3cIfQoSGTSClassRuleType, hh3cIfQoSWredDropHPreNTcpPkts=hh3cIfQoSWredDropHPreNTcpPkts, hh3cIfQoSPortPriorityEntry=hh3cIfQoSPortPriorityEntry, hh3cIfQoSPriMapGroupExportValue=hh3cIfQoSPriMapGroupExportValue, hh3cIfQoSPriMapGroupIndex=hh3cIfQoSPriMapGroupIndex, hh3cIfQoSCQClassRuleQueueID=hh3cIfQoSCQClassRuleQueueID, hh3cIfQoSWredApplyIfRunInfoTable=hh3cIfQoSWredApplyIfRunInfoTable, hh3cIfQoSCurQueuePkts=hh3cIfQoSCurQueuePkts, hh3cIfQoSWredDropHPreNTcpPPS=hh3cIfQoSWredDropHPreNTcpPPS)
