#
# PySNMP MIB module ALCATEL-IND1-TIMETRA-QOS-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/ALCATEL-IND1-TIMETRA-QOS-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 17:04:02 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
tmnxSRConfs, timetraSRMIBModules, tmnxSRObjs, tmnxSRNotifyPrefix = mibBuilder.importSymbols("ALCATEL-IND1-TIMETRA-GLOBAL-MIB", "tmnxSRConfs", "timetraSRMIBModules", "tmnxSRObjs", "tmnxSRNotifyPrefix")
TTcpUdpPortOperator, TFrameType, TFCName, IpAddressPrefixLength, TItemDescription, TCIRRate, TPolicyID, TPIRRate, TmnxEnabledDisabled, ServiceAccessPoint, TIngressQueueId, TWeight, TDSCPValue, TDSCPName, TLspExpValue, TNamedItemOrEmpty, TSapIngressPolicyID, TFCNameOrEmpty, TEgressQueueId, TNamedItem, TPortSchedulerCIR, TDSCPNameOrEmpty, TSapEgressPolicyID, TPortSchedulerPIR, TPIRRateOrZero, TQueueId, TIpProtocol, TTcpUdpPort, Dot1PPriority = mibBuilder.importSymbols("ALCATEL-IND1-TIMETRA-TC-MIB", "TTcpUdpPortOperator", "TFrameType", "TFCName", "IpAddressPrefixLength", "TItemDescription", "TCIRRate", "TPolicyID", "TPIRRate", "TmnxEnabledDisabled", "ServiceAccessPoint", "TIngressQueueId", "TWeight", "TDSCPValue", "TDSCPName", "TLspExpValue", "TNamedItemOrEmpty", "TSapIngressPolicyID", "TFCNameOrEmpty", "TEgressQueueId", "TNamedItem", "TPortSchedulerCIR", "TDSCPNameOrEmpty", "TSapEgressPolicyID", "TPortSchedulerPIR", "TPIRRateOrZero", "TQueueId", "TIpProtocol", "TTcpUdpPort", "Dot1PPriority")
Integer, ObjectIdentifier, OctetString = mibBuilder.importSymbols("ASN1", "Integer", "ObjectIdentifier", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueSizeConstraint, ValueRangeConstraint, ConstraintsUnion, SingleValueConstraint, ConstraintsIntersection = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueSizeConstraint", "ValueRangeConstraint", "ConstraintsUnion", "SingleValueConstraint", "ConstraintsIntersection")
AtmServiceCategory, AtmTrafficDescrParamIndex = mibBuilder.importSymbols("ATM-TC-MIB", "AtmServiceCategory", "AtmTrafficDescrParamIndex")
InetAddressPrefixLength, InetAddressIPv6, InetAddress, InetAddressType = mibBuilder.importSymbols("INET-ADDRESS-MIB", "InetAddressPrefixLength", "InetAddressIPv6", "InetAddress", "InetAddressType")
ObjectGroup, NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "ObjectGroup", "NotificationGroup", "ModuleCompliance")
NotificationType, ObjectIdentity, Integer32, ModuleIdentity, TimeTicks, Gauge32, Bits, MibScalar, MibTable, MibTableRow, MibTableColumn, Counter64, iso, MibIdentifier, IpAddress, Counter32, Unsigned32 = mibBuilder.importSymbols("SNMPv2-SMI", "NotificationType", "ObjectIdentity", "Integer32", "ModuleIdentity", "TimeTicks", "Gauge32", "Bits", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Counter64", "iso", "MibIdentifier", "IpAddress", "Counter32", "Unsigned32")
TextualConvention, RowStatus, TimeStamp, MacAddress, DisplayString, StorageType, TruthValue = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "RowStatus", "TimeStamp", "MacAddress", "DisplayString", "StorageType", "TruthValue")
timetraQosMIBModule = ModuleIdentity((1, 3, 6, 1, 4, 1, 6527, 1, 1, 3, 16))
timetraQosMIBModule.setRevisions(('1908-01-01 00:00', '1907-01-01 00:00', '1906-02-28 00:00', '1905-08-31 00:00', '1905-01-24 00:00', '1904-01-15 00:00', '1903-08-15 00:00', '2003-01-20 00:00', '2001-05-29 00:00',))
if mibBuilder.loadTexts: timetraQosMIBModule.setLastUpdated('0801010000Z')
if mibBuilder.loadTexts: timetraQosMIBModule.setOrganization('Alcatel')
tQosObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16))
tQosNotifyPrefix = MibIdentifier((1, 3, 6, 1, 4, 1, 6527, 3, 1, 3, 16))
tQosNotifications = MibIdentifier((1, 3, 6, 1, 4, 1, 6527, 3, 1, 3, 16, 0))
tmnxQosConformance = MibIdentifier((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 16))
tDSCPObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 1))
tFCObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 2))
tSapIngressObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 3))
tSapEgressObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 4))
tNetworkObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 5))
tNetworkQueueObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 6))
tSharedQueueObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 7))
tSlopeObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 10))
tSchedulerObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 12))
tQosTimeStampObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 20))
tAtmTdpObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 21))
tPoolObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 22))
class TNetworkPolicyID(TextualConvention, Unsigned32):
    status = 'current'
    subtypeSpec = Unsigned32.subtypeSpec + ValueRangeConstraint(1, 65535)

class TItemScope(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2))
    namedValues = NamedValues(("exclusive", 1), ("template", 2))

class TItemMatch(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3))
    namedValues = NamedValues(("off", 1), ("false", 2), ("true", 3))

class TPriority(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2))
    namedValues = NamedValues(("low", 1), ("high", 2))

class TPriorityOrDefault(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3))
    namedValues = NamedValues(("low", 1), ("high", 2), ("default", 3))

class TProfile(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2))
    namedValues = NamedValues(("in", 1), ("out", 2))

class TDEProfile(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3))
    namedValues = NamedValues(("in", 1), ("out", 2), ("de", 3))

class TProfileOrNone(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2))
    namedValues = NamedValues(("none", 0), ("in", 1), ("out", 2))

class TAdaptationRule(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3))
    namedValues = NamedValues(("max", 1), ("min", 2), ("closest", 3))

class TRemarkType(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3))
    namedValues = NamedValues(("none", 1), ("dscp", 2), ("precedence", 3))

class TPrecValue(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ValueRangeConstraint(0, 7)

class TPrecValueOrNone(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(ValueRangeConstraint(-1, -1), ValueRangeConstraint(0, 7), )
class TBurstSize(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(ValueRangeConstraint(-1, -1), ValueRangeConstraint(0, 131072), )
class TBurstPercent(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ValueRangeConstraint(0, 100)

class TBurstHundredthsOfPercent(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ValueRangeConstraint(0, 10000)

class TBurstPercentOrDefault(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(ValueRangeConstraint(-1, -1), ValueRangeConstraint(0, 100), )
class TRatePercent(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ValueRangeConstraint(0, 100)

class TPIRRatePercent(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ValueRangeConstraint(1, 100)

class TLevel(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ValueRangeConstraint(1, 8)

class TLevelOrDefault(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(1, 8), )
class TQueueMode(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2))
    namedValues = NamedValues(("priority", 1), ("profile", 2))

class TEntryIndicator(TextualConvention, Unsigned32):
    status = 'current'
    subtypeSpec = Unsigned32.subtypeSpec + ValueRangeConstraint(0, 65535)

class TEntryId(TextualConvention, Unsigned32):
    status = 'current'
    subtypeSpec = Unsigned32.subtypeSpec + ValueRangeConstraint(1, 65535)

class TMatchCriteria(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3))
    namedValues = NamedValues(("ip", 1), ("mac", 2), ("none", 3))

class TAtmTdpDescrType(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))
    namedValues = NamedValues(("clp0And1pcr", 0), ("clp0And1pcrPlusClp0And1scr", 1), ("clp0And1pcrPlusClp0scr", 2), ("clp0And1pcrPlusClp0scrTag", 3))

class TDEValue(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(ValueRangeConstraint(-1, -1), ValueRangeConstraint(0, 1), )
tDSCPNameTable = MibTable((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 1, 1), )
if mibBuilder.loadTexts: tDSCPNameTable.setStatus('current')
tDSCPNameEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 1, 1, 1), ).setIndexNames((0, "ALCATEL-IND1-TIMETRA-QOS-MIB", "tDSCPName"))
if mibBuilder.loadTexts: tDSCPNameEntry.setStatus('current')
tDSCPName = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 1, 1, 1, 1), TDSCPName())
if mibBuilder.loadTexts: tDSCPName.setStatus('current')
tDSCPNameRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 1, 1, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tDSCPNameRowStatus.setStatus('current')
tDSCPNameStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 1, 1, 1, 3), StorageType().clone('nonVolatile')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tDSCPNameStorageType.setStatus('current')
tDSCPNameDscpValue = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 1, 1, 1, 4), TDSCPValue()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tDSCPNameDscpValue.setStatus('current')
tDSCPNameLastChanged = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 1, 1, 1, 5), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tDSCPNameLastChanged.setStatus('current')
tFCNameTable = MibTable((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 2, 1), )
if mibBuilder.loadTexts: tFCNameTable.setStatus('current')
tFCNameEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 2, 1, 1), ).setIndexNames((0, "ALCATEL-IND1-TIMETRA-QOS-MIB", "tFCName"))
if mibBuilder.loadTexts: tFCNameEntry.setStatus('current')
tFCName = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 2, 1, 1, 1), TFCName())
if mibBuilder.loadTexts: tFCName.setStatus('current')
tFCRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 2, 1, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tFCRowStatus.setStatus('current')
tFCStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 2, 1, 1, 3), StorageType().clone('nonVolatile')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tFCStorageType.setStatus('current')
tFCValue = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 2, 1, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tFCValue.setStatus('current')
tFCNameLastChanged = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 2, 1, 1, 5), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tFCNameLastChanged.setStatus('current')
tSapIngressTable = MibTable((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 3, 1), )
if mibBuilder.loadTexts: tSapIngressTable.setStatus('current')
tSapIngressEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 3, 1, 1), ).setIndexNames((0, "ALCATEL-IND1-TIMETRA-QOS-MIB", "tSapIngressIndex"))
if mibBuilder.loadTexts: tSapIngressEntry.setStatus('current')
tSapIngressIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 3, 1, 1, 1), TSapIngressPolicyID().subtype(subtypeSpec=ValueRangeConstraint(1, 65535)))
if mibBuilder.loadTexts: tSapIngressIndex.setStatus('current')
tSapIngressRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 3, 1, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tSapIngressRowStatus.setStatus('current')
tSapIngressScope = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 3, 1, 1, 3), TItemScope().clone('template')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tSapIngressScope.setStatus('current')
tSapIngressDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 3, 1, 1, 4), TItemDescription().clone(hexValue="")).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tSapIngressDescription.setStatus('current')
tSapIngressDefaultFC = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 3, 1, 1, 5), TNamedItem().clone(hexValue="be")).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tSapIngressDefaultFC.setStatus('current')
tSapIngressDefaultFCPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 3, 1, 1, 6), TPriority().clone('low')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tSapIngressDefaultFCPriority.setStatus('current')
tSapIngressMatchCriteria = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 3, 1, 1, 7), TMatchCriteria()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tSapIngressMatchCriteria.setStatus('current')
tSapIngressLastChanged = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 3, 1, 1, 8), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tSapIngressLastChanged.setStatus('current')
tSapIngressQueueTable = MibTable((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 3, 2), )
if mibBuilder.loadTexts: tSapIngressQueueTable.setStatus('current')
tSapIngressQueueEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 3, 2, 1), ).setIndexNames((0, "ALCATEL-IND1-TIMETRA-QOS-MIB", "tSapIngressIndex"), (0, "ALCATEL-IND1-TIMETRA-QOS-MIB", "tSapIngressQueue"))
if mibBuilder.loadTexts: tSapIngressQueueEntry.setStatus('current')
tSapIngressQueue = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 3, 2, 1, 1), TIngressQueueId().subtype(subtypeSpec=ValueRangeConstraint(1, 32)))
if mibBuilder.loadTexts: tSapIngressQueue.setStatus('current')
tSapIngressQueueRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 3, 2, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tSapIngressQueueRowStatus.setStatus('current')
tSapIngressQueueParent = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 3, 2, 1, 3), TNamedItemOrEmpty().clone(hexValue="")).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tSapIngressQueueParent.setStatus('current')
tSapIngressQueueLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 3, 2, 1, 4), TLevel().clone(1)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tSapIngressQueueLevel.setStatus('current')
tSapIngressQueueWeight = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 3, 2, 1, 5), TWeight().clone(1)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tSapIngressQueueWeight.setStatus('current')
tSapIngressQueueCIRLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 3, 2, 1, 6), TLevelOrDefault()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tSapIngressQueueCIRLevel.setStatus('current')
tSapIngressQueueCIRWeight = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 3, 2, 1, 7), TWeight().clone(1)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tSapIngressQueueCIRWeight.setStatus('current')
tSapIngressQueueMCast = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 3, 2, 1, 8), TruthValue().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tSapIngressQueueMCast.setStatus('current')
tSapIngressQueueExpedite = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 3, 2, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("expedited", 1), ("auto-expedited", 2), ("non-expedited", 3))).clone('auto-expedited')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tSapIngressQueueExpedite.setStatus('current')
tSapIngressQueueCBS = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 3, 2, 1, 10), TBurstSize().clone(-1)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tSapIngressQueueCBS.setStatus('current')
tSapIngressQueueMBS = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 3, 2, 1, 11), TBurstSize().clone(-1)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tSapIngressQueueMBS.setStatus('current')
tSapIngressQueueHiPrioOnly = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 3, 2, 1, 12), TBurstPercentOrDefault().clone(-1)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tSapIngressQueueHiPrioOnly.setStatus('current')
tSapIngressQueuePIRAdaptation = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 3, 2, 1, 13), TAdaptationRule().clone('closest')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tSapIngressQueuePIRAdaptation.setStatus('current')
tSapIngressQueueCIRAdaptation = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 3, 2, 1, 14), TAdaptationRule().clone('closest')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tSapIngressQueueCIRAdaptation.setStatus('current')
tSapIngressQueueAdminPIR = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 3, 2, 1, 15), TPIRRate().clone(-1)).setUnits('kbps').setMaxAccess("readcreate")
if mibBuilder.loadTexts: tSapIngressQueueAdminPIR.setStatus('current')
tSapIngressQueueAdminCIR = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 3, 2, 1, 16), TCIRRate()).setUnits('kbps').setMaxAccess("readcreate")
if mibBuilder.loadTexts: tSapIngressQueueAdminCIR.setStatus('current')
tSapIngressQueueOperPIR = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 3, 2, 1, 17), TPIRRate()).setUnits('kbps').setMaxAccess("readonly")
if mibBuilder.loadTexts: tSapIngressQueueOperPIR.setStatus('obsolete')
tSapIngressQueueOperCIR = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 3, 2, 1, 18), TCIRRate()).setUnits('kbps').setMaxAccess("readonly")
if mibBuilder.loadTexts: tSapIngressQueueOperCIR.setStatus('obsolete')
tSapIngressQueueLastChanged = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 3, 2, 1, 19), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tSapIngressQueueLastChanged.setStatus('current')
tSapIngressQueuePoliced = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 3, 2, 1, 20), TruthValue().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tSapIngressQueuePoliced.setStatus('current')
tSapIngressQueueMode = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 3, 2, 1, 21), TQueueMode().clone('priority')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tSapIngressQueueMode.setStatus('current')
tSapIngressQueuePoolName = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 3, 2, 1, 22), TNamedItemOrEmpty().clone(hexValue="")).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tSapIngressQueuePoolName.setStatus('current')
tSapIngressDSCPTable = MibTable((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 3, 3), )
if mibBuilder.loadTexts: tSapIngressDSCPTable.setStatus('current')
tSapIngressDSCPEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 3, 3, 1), ).setIndexNames((0, "ALCATEL-IND1-TIMETRA-QOS-MIB", "tSapIngressIndex"), (0, "ALCATEL-IND1-TIMETRA-QOS-MIB", "tSapIngressDSCP"))
if mibBuilder.loadTexts: tSapIngressDSCPEntry.setStatus('current')
tSapIngressDSCP = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 3, 3, 1, 1), TDSCPName())
if mibBuilder.loadTexts: tSapIngressDSCP.setStatus('current')
tSapIngressDSCPRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 3, 3, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tSapIngressDSCPRowStatus.setStatus('current')
tSapIngressDSCPFC = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 3, 3, 1, 3), TNamedItemOrEmpty().clone(hexValue="")).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tSapIngressDSCPFC.setStatus('current')
tSapIngressDSCPPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 3, 3, 1, 4), TPriorityOrDefault().clone('default')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tSapIngressDSCPPriority.setStatus('current')
tSapIngressDSCPLastChanged = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 3, 3, 1, 5), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tSapIngressDSCPLastChanged.setStatus('current')
tSapIngressDot1pTable = MibTable((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 3, 4), )
if mibBuilder.loadTexts: tSapIngressDot1pTable.setStatus('current')
tSapIngressDot1pEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 3, 4, 1), ).setIndexNames((0, "ALCATEL-IND1-TIMETRA-QOS-MIB", "tSapIngressIndex"), (0, "ALCATEL-IND1-TIMETRA-QOS-MIB", "tSapIngressDot1pValue"))
if mibBuilder.loadTexts: tSapIngressDot1pEntry.setStatus('current')
tSapIngressDot1pValue = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 3, 4, 1, 1), Dot1PPriority().subtype(subtypeSpec=ValueRangeConstraint(0, 7)))
if mibBuilder.loadTexts: tSapIngressDot1pValue.setStatus('current')
tSapIngressDot1pRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 3, 4, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tSapIngressDot1pRowStatus.setStatus('current')
tSapIngressDot1pFC = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 3, 4, 1, 3), TNamedItemOrEmpty().clone(hexValue="")).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tSapIngressDot1pFC.setStatus('current')
tSapIngressDot1pPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 3, 4, 1, 4), TPriorityOrDefault().clone('default')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tSapIngressDot1pPriority.setStatus('current')
tSapIngressDot1pLastChanged = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 3, 4, 1, 5), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tSapIngressDot1pLastChanged.setStatus('current')
tSapIngressIPCriteriaTable = MibTable((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 3, 5), )
if mibBuilder.loadTexts: tSapIngressIPCriteriaTable.setStatus('current')
tSapIngressIPCriteriaEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 3, 5, 1), ).setIndexNames((0, "ALCATEL-IND1-TIMETRA-QOS-MIB", "tSapIngressIndex"), (0, "ALCATEL-IND1-TIMETRA-QOS-MIB", "tSapIngressIPCriteriaIndex"))
if mibBuilder.loadTexts: tSapIngressIPCriteriaEntry.setStatus('current')
tSapIngressIPCriteriaIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 3, 5, 1, 1), TEntryId())
if mibBuilder.loadTexts: tSapIngressIPCriteriaIndex.setStatus('current')
tSapIngressIPCriteriaRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 3, 5, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tSapIngressIPCriteriaRowStatus.setStatus('current')
tSapIngressIPCriteriaDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 3, 5, 1, 3), TItemDescription().clone(hexValue="")).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tSapIngressIPCriteriaDescription.setStatus('current')
tSapIngressIPCriteriaActionFC = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 3, 5, 1, 4), TNamedItemOrEmpty().clone(hexValue="")).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tSapIngressIPCriteriaActionFC.setStatus('current')
tSapIngressIPCriteriaActionPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 3, 5, 1, 5), TPriorityOrDefault().clone('default')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tSapIngressIPCriteriaActionPriority.setStatus('current')
tSapIngressIPCriteriaSourceIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 3, 5, 1, 6), IpAddress().clone(hexValue="00000000")).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tSapIngressIPCriteriaSourceIpAddr.setStatus('current')
tSapIngressIPCriteriaSourceIpMask = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 3, 5, 1, 7), IpAddressPrefixLength()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tSapIngressIPCriteriaSourceIpMask.setStatus('current')
tSapIngressIPCriteriaDestIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 3, 5, 1, 8), IpAddress().clone(hexValue="00000000")).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tSapIngressIPCriteriaDestIpAddr.setStatus('current')
tSapIngressIPCriteriaDestIpMask = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 3, 5, 1, 9), IpAddressPrefixLength()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tSapIngressIPCriteriaDestIpMask.setStatus('current')
tSapIngressIPCriteriaProtocol = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 3, 5, 1, 10), TIpProtocol().clone(-1)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tSapIngressIPCriteriaProtocol.setStatus('current')
tSapIngressIPCriteriaSourcePortValue1 = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 3, 5, 1, 11), TTcpUdpPort()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tSapIngressIPCriteriaSourcePortValue1.setStatus('current')
tSapIngressIPCriteriaSourcePortValue2 = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 3, 5, 1, 12), TTcpUdpPort()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tSapIngressIPCriteriaSourcePortValue2.setStatus('current')
tSapIngressIPCriteriaSourcePortOperator = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 3, 5, 1, 13), TTcpUdpPortOperator().clone('none')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tSapIngressIPCriteriaSourcePortOperator.setStatus('current')
tSapIngressIPCriteriaDestPortValue1 = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 3, 5, 1, 14), TTcpUdpPort()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tSapIngressIPCriteriaDestPortValue1.setStatus('current')
tSapIngressIPCriteriaDestPortValue2 = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 3, 5, 1, 15), TTcpUdpPort()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tSapIngressIPCriteriaDestPortValue2.setStatus('current')
tSapIngressIPCriteriaDestPortOperator = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 3, 5, 1, 16), TTcpUdpPortOperator().clone('none')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tSapIngressIPCriteriaDestPortOperator.setStatus('current')
tSapIngressIPCriteriaDSCP = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 3, 5, 1, 17), TDSCPNameOrEmpty().clone(hexValue="")).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tSapIngressIPCriteriaDSCP.setStatus('current')
tSapIngressIPCriteriaFragment = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 3, 5, 1, 19), TItemMatch().clone('off')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tSapIngressIPCriteriaFragment.setStatus('current')
tSapIngressIPCriteriaLastChanged = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 3, 5, 1, 20), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tSapIngressIPCriteriaLastChanged.setStatus('current')
tSapIngressMacCriteriaTable = MibTable((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 3, 6), )
if mibBuilder.loadTexts: tSapIngressMacCriteriaTable.setStatus('current')
tSapIngressMacCriteriaEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 3, 6, 1), ).setIndexNames((0, "ALCATEL-IND1-TIMETRA-QOS-MIB", "tSapIngressIndex"), (0, "ALCATEL-IND1-TIMETRA-QOS-MIB", "tSapIngressMacCriteriaIndex"))
if mibBuilder.loadTexts: tSapIngressMacCriteriaEntry.setStatus('current')
tSapIngressMacCriteriaIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 3, 6, 1, 1), TEntryId())
if mibBuilder.loadTexts: tSapIngressMacCriteriaIndex.setStatus('current')
tSapIngressMacCriteriaRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 3, 6, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tSapIngressMacCriteriaRowStatus.setStatus('current')
tSapIngressMacCriteriaDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 3, 6, 1, 3), TItemDescription().clone(hexValue="")).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tSapIngressMacCriteriaDescription.setStatus('current')
tSapIngressMacCriteriaActionFC = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 3, 6, 1, 4), TNamedItemOrEmpty()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tSapIngressMacCriteriaActionFC.setStatus('current')
tSapIngressMacCriteriaActionPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 3, 6, 1, 5), TPriorityOrDefault().clone('default')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tSapIngressMacCriteriaActionPriority.setStatus('current')
tSapIngressMacCriteriaFrameType = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 3, 6, 1, 6), TFrameType().clone('e802dot3')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tSapIngressMacCriteriaFrameType.setStatus('current')
tSapIngressMacCriteriaSrcMacAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 3, 6, 1, 8), MacAddress().clone(hexValue="000000000000")).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tSapIngressMacCriteriaSrcMacAddr.setStatus('current')
tSapIngressMacCriteriaSrcMacMask = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 3, 6, 1, 9), MacAddress().clone(hexValue="000000000000")).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tSapIngressMacCriteriaSrcMacMask.setStatus('current')
tSapIngressMacCriteriaDstMacAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 3, 6, 1, 10), MacAddress().clone(hexValue="000000000000")).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tSapIngressMacCriteriaDstMacAddr.setStatus('current')
tSapIngressMacCriteriaDstMacMask = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 3, 6, 1, 11), MacAddress().clone(hexValue="000000000000")).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tSapIngressMacCriteriaDstMacMask.setStatus('current')
tSapIngressMacCriteriaDot1PValue = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 3, 6, 1, 12), Dot1PPriority().clone(-1)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tSapIngressMacCriteriaDot1PValue.setStatus('current')
tSapIngressMacCriteriaDot1PMask = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 3, 6, 1, 13), Dot1PPriority()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tSapIngressMacCriteriaDot1PMask.setStatus('current')
tSapIngressMacCriteriaEthernetType = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 3, 6, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(-1, -1), ValueRangeConstraint(1536, 65535), )).clone(-1)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tSapIngressMacCriteriaEthernetType.setStatus('current')
tSapIngressMacCriteriaDSAP = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 3, 6, 1, 15), ServiceAccessPoint().clone(-1)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tSapIngressMacCriteriaDSAP.setStatus('current')
tSapIngressMacCriteriaDSAPMask = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 3, 6, 1, 16), ServiceAccessPoint().clone(-1)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tSapIngressMacCriteriaDSAPMask.setStatus('current')
tSapIngressMacCriteriaSSAP = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 3, 6, 1, 17), ServiceAccessPoint().clone(-1)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tSapIngressMacCriteriaSSAP.setStatus('current')
tSapIngressMacCriteriaSSAPMask = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 3, 6, 1, 18), ServiceAccessPoint().clone(-1)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tSapIngressMacCriteriaSSAPMask.setStatus('current')
tSapIngressMacCriteriaSnapPid = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 3, 6, 1, 19), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(-1, -1), ValueRangeConstraint(0, 65535), )).clone(-1)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tSapIngressMacCriteriaSnapPid.setStatus('current')
tSapIngressMacCriteriaSnapOui = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 3, 6, 1, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("off", 1), ("zero", 2), ("nonZero", 3))).clone('off')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tSapIngressMacCriteriaSnapOui.setStatus('current')
tSapIngressMacCriteriaLastChanged = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 3, 6, 1, 21), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tSapIngressMacCriteriaLastChanged.setStatus('current')
tSapIngressFCTable = MibTable((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 3, 7), )
if mibBuilder.loadTexts: tSapIngressFCTable.setStatus('current')
tSapIngressFCEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 3, 7, 1), ).setIndexNames((0, "ALCATEL-IND1-TIMETRA-QOS-MIB", "tSapIngressIndex"), (0, "ALCATEL-IND1-TIMETRA-QOS-MIB", "tSapIngressFCName"))
if mibBuilder.loadTexts: tSapIngressFCEntry.setStatus('current')
tSapIngressFCName = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 3, 7, 1, 1), TNamedItem())
if mibBuilder.loadTexts: tSapIngressFCName.setStatus('current')
tSapIngressFCRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 3, 7, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tSapIngressFCRowStatus.setStatus('current')
tSapIngressFCQueue = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 3, 7, 1, 3), TIngressQueueId()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tSapIngressFCQueue.setStatus('current')
tSapIngressFCMCastQueue = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 3, 7, 1, 4), TIngressQueueId()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tSapIngressFCMCastQueue.setStatus('current')
tSapIngressFCBCastQueue = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 3, 7, 1, 5), TIngressQueueId()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tSapIngressFCBCastQueue.setStatus('current')
tSapIngressFCUnknownQueue = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 3, 7, 1, 6), TIngressQueueId()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tSapIngressFCUnknownQueue.setStatus('current')
tSapIngressFCLastChanged = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 3, 7, 1, 7), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tSapIngressFCLastChanged.setStatus('current')
tSapIngressFCInProfRemark = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 3, 7, 1, 8), TRemarkType().clone('none')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tSapIngressFCInProfRemark.setStatus('current')
tSapIngressFCInProfDscp = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 3, 7, 1, 9), TNamedItemOrEmpty().clone(hexValue="")).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tSapIngressFCInProfDscp.setStatus('current')
tSapIngressFCInProfPrec = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 3, 7, 1, 10), TPrecValueOrNone().clone(-1)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tSapIngressFCInProfPrec.setStatus('current')
tSapIngressFCOutProfRemark = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 3, 7, 1, 11), TRemarkType().clone('none')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tSapIngressFCOutProfRemark.setStatus('current')
tSapIngressFCOutProfDscp = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 3, 7, 1, 12), TNamedItemOrEmpty().clone(hexValue="")).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tSapIngressFCOutProfDscp.setStatus('current')
tSapIngressFCOutProfPrec = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 3, 7, 1, 13), TPrecValueOrNone().clone(-1)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tSapIngressFCOutProfPrec.setStatus('current')
tSapIngressFCProfile = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 3, 7, 1, 14), TProfileOrNone().clone('none')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tSapIngressFCProfile.setStatus('current')
tSapIngressFCDE1OutOfProfile = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 3, 7, 1, 18), TruthValue().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tSapIngressFCDE1OutOfProfile.setStatus('current')
tSapIngressPrecTable = MibTable((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 3, 8), )
if mibBuilder.loadTexts: tSapIngressPrecTable.setStatus('current')
tSapIngressPrecEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 3, 8, 1), ).setIndexNames((0, "ALCATEL-IND1-TIMETRA-QOS-MIB", "tSapIngressIndex"), (0, "ALCATEL-IND1-TIMETRA-QOS-MIB", "tSapIngressPrecValue"))
if mibBuilder.loadTexts: tSapIngressPrecEntry.setStatus('current')
tSapIngressPrecValue = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 3, 8, 1, 1), TPrecValue())
if mibBuilder.loadTexts: tSapIngressPrecValue.setStatus('current')
tSapIngressPrecRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 3, 8, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tSapIngressPrecRowStatus.setStatus('current')
tSapIngressPrecFC = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 3, 8, 1, 3), TNamedItemOrEmpty().clone(hexValue="")).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tSapIngressPrecFC.setStatus('current')
tSapIngressPrecFCPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 3, 8, 1, 4), TPriorityOrDefault().clone('default')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tSapIngressPrecFCPriority.setStatus('current')
tSapIngressPrecLastChanged = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 3, 8, 1, 5), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tSapIngressPrecLastChanged.setStatus('current')
tSapIngressIPv6CriteriaTable = MibTable((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 3, 9), )
if mibBuilder.loadTexts: tSapIngressIPv6CriteriaTable.setStatus('current')
tSapIngressIPv6CriteriaEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 3, 9, 1), ).setIndexNames((0, "ALCATEL-IND1-TIMETRA-QOS-MIB", "tSapIngressIndex"), (0, "ALCATEL-IND1-TIMETRA-QOS-MIB", "tSapIngressIPv6CriteriaIndex"))
if mibBuilder.loadTexts: tSapIngressIPv6CriteriaEntry.setStatus('current')
tSapIngressIPv6CriteriaIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 3, 9, 1, 1), TEntryId())
if mibBuilder.loadTexts: tSapIngressIPv6CriteriaIndex.setStatus('current')
tSapIngressIPv6CriteriaRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 3, 9, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tSapIngressIPv6CriteriaRowStatus.setStatus('current')
tSapIngressIPv6CriteriaDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 3, 9, 1, 3), TItemDescription().clone(hexValue="")).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tSapIngressIPv6CriteriaDescription.setStatus('current')
tSapIngressIPv6CriteriaActionFC = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 3, 9, 1, 4), TNamedItemOrEmpty().clone(hexValue="")).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tSapIngressIPv6CriteriaActionFC.setStatus('current')
tSapIngressIPv6CriteriaActionPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 3, 9, 1, 5), TPriorityOrDefault().clone('default')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tSapIngressIPv6CriteriaActionPriority.setStatus('current')
tSapIngressIPv6CriteriaSourceIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 3, 9, 1, 6), InetAddressIPv6().clone(hexValue="00000000000000000000000000000000")).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tSapIngressIPv6CriteriaSourceIpAddr.setStatus('current')
tSapIngressIPv6CriteriaSourceIpMask = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 3, 9, 1, 7), InetAddressPrefixLength().subtype(subtypeSpec=ValueRangeConstraint(0, 128))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tSapIngressIPv6CriteriaSourceIpMask.setStatus('current')
tSapIngressIPv6CriteriaDestIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 3, 9, 1, 8), InetAddressIPv6().clone(hexValue="00000000000000000000000000000000")).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tSapIngressIPv6CriteriaDestIpAddr.setStatus('current')
tSapIngressIPv6CriteriaDestIpMask = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 3, 9, 1, 9), InetAddressPrefixLength().subtype(subtypeSpec=ValueRangeConstraint(0, 128))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tSapIngressIPv6CriteriaDestIpMask.setStatus('current')
tSapIngressIPv6CriteriaNextHeader = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 3, 9, 1, 10), TIpProtocol().clone(-1)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tSapIngressIPv6CriteriaNextHeader.setStatus('current')
tSapIngressIPv6CriteriaSourcePortValue1 = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 3, 9, 1, 11), TTcpUdpPort()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tSapIngressIPv6CriteriaSourcePortValue1.setStatus('current')
tSapIngressIPv6CriteriaSourcePortValue2 = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 3, 9, 1, 12), TTcpUdpPort()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tSapIngressIPv6CriteriaSourcePortValue2.setStatus('current')
tSapIngressIPv6CriteriaSourcePortOperator = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 3, 9, 1, 13), TTcpUdpPortOperator().clone('none')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tSapIngressIPv6CriteriaSourcePortOperator.setStatus('current')
tSapIngressIPv6CriteriaDestPortValue1 = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 3, 9, 1, 14), TTcpUdpPort()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tSapIngressIPv6CriteriaDestPortValue1.setStatus('current')
tSapIngressIPv6CriteriaDestPortValue2 = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 3, 9, 1, 15), TTcpUdpPort()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tSapIngressIPv6CriteriaDestPortValue2.setStatus('current')
tSapIngressIPv6CriteriaDestPortOperator = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 3, 9, 1, 16), TTcpUdpPortOperator().clone('none')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tSapIngressIPv6CriteriaDestPortOperator.setStatus('current')
tSapIngressIPv6CriteriaDSCP = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 3, 9, 1, 17), TDSCPNameOrEmpty().clone(hexValue="")).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tSapIngressIPv6CriteriaDSCP.setStatus('current')
tSapIngressIPv6CriteriaLastChanged = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 3, 9, 1, 20), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tSapIngressIPv6CriteriaLastChanged.setStatus('current')
tSapEgressTable = MibTable((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 4, 1), )
if mibBuilder.loadTexts: tSapEgressTable.setStatus('current')
tSapEgressEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 4, 1, 1), ).setIndexNames((0, "ALCATEL-IND1-TIMETRA-QOS-MIB", "tSapEgressIndex"))
if mibBuilder.loadTexts: tSapEgressEntry.setStatus('current')
tSapEgressIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 4, 1, 1, 1), TSapEgressPolicyID())
if mibBuilder.loadTexts: tSapEgressIndex.setStatus('current')
tSapEgressRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 4, 1, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tSapEgressRowStatus.setStatus('current')
tSapEgressScope = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 4, 1, 1, 3), TItemScope().clone('template')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tSapEgressScope.setStatus('current')
tSapEgressDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 4, 1, 1, 4), TItemDescription().clone(hexValue="")).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tSapEgressDescription.setStatus('current')
tSapEgressLastChanged = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 4, 1, 1, 5), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tSapEgressLastChanged.setStatus('current')
tSapEgressQueueTable = MibTable((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 4, 2), )
if mibBuilder.loadTexts: tSapEgressQueueTable.setStatus('current')
tSapEgressQueueEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 4, 2, 1), ).setIndexNames((0, "ALCATEL-IND1-TIMETRA-QOS-MIB", "tSapEgressIndex"), (0, "ALCATEL-IND1-TIMETRA-QOS-MIB", "tSapEgressQueueIndex"))
if mibBuilder.loadTexts: tSapEgressQueueEntry.setStatus('current')
tSapEgressQueueIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 4, 2, 1, 1), TEgressQueueId().subtype(subtypeSpec=ValueRangeConstraint(1, 8)))
if mibBuilder.loadTexts: tSapEgressQueueIndex.setStatus('current')
tSapEgressQueueRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 4, 2, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tSapEgressQueueRowStatus.setStatus('current')
tSapEgressQueueParent = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 4, 2, 1, 3), TNamedItemOrEmpty().clone(hexValue="")).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tSapEgressQueueParent.setStatus('current')
tSapEgressQueueLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 4, 2, 1, 4), TLevel().clone(1)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tSapEgressQueueLevel.setStatus('current')
tSapEgressQueueWeight = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 4, 2, 1, 5), TWeight().clone(1)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tSapEgressQueueWeight.setStatus('current')
tSapEgressQueueCIRLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 4, 2, 1, 6), TLevelOrDefault()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tSapEgressQueueCIRLevel.setStatus('current')
tSapEgressQueueCIRWeight = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 4, 2, 1, 7), TWeight().clone(1)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tSapEgressQueueCIRWeight.setStatus('current')
tSapEgressQueueExpedite = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 4, 2, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("expedited", 1), ("auto-expedited", 2), ("non-expedited", 3))).clone('auto-expedited')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tSapEgressQueueExpedite.setStatus('current')
tSapEgressQueueCBS = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 4, 2, 1, 9), TBurstSize().clone(-1)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tSapEgressQueueCBS.setStatus('current')
tSapEgressQueueMBS = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 4, 2, 1, 10), TBurstSize().clone(-1)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tSapEgressQueueMBS.setStatus('current')
tSapEgressQueueHiPrioOnly = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 4, 2, 1, 11), TBurstPercentOrDefault().clone(-1)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tSapEgressQueueHiPrioOnly.setStatus('current')
tSapEgressQueuePIRAdaptation = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 4, 2, 1, 12), TAdaptationRule().clone('closest')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tSapEgressQueuePIRAdaptation.setStatus('current')
tSapEgressQueueCIRAdaptation = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 4, 2, 1, 13), TAdaptationRule().clone('closest')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tSapEgressQueueCIRAdaptation.setStatus('current')
tSapEgressQueueAdminPIR = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 4, 2, 1, 14), TPIRRate().clone(-1)).setUnits('kbps').setMaxAccess("readcreate")
if mibBuilder.loadTexts: tSapEgressQueueAdminPIR.setStatus('current')
tSapEgressQueueAdminCIR = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 4, 2, 1, 15), TCIRRate()).setUnits('kbps').setMaxAccess("readcreate")
if mibBuilder.loadTexts: tSapEgressQueueAdminCIR.setStatus('current')
tSapEgressQueueOperPIR = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 4, 2, 1, 16), TPIRRate()).setUnits('kbps').setMaxAccess("readonly")
if mibBuilder.loadTexts: tSapEgressQueueOperPIR.setStatus('obsolete')
tSapEgressQueueOperCIR = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 4, 2, 1, 17), TCIRRate()).setUnits('kbps').setMaxAccess("readonly")
if mibBuilder.loadTexts: tSapEgressQueueOperCIR.setStatus('obsolete')
tSapEgressQueueLastChanged = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 4, 2, 1, 18), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tSapEgressQueueLastChanged.setStatus('current')
tSapEgressQueueUsePortParent = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 4, 2, 1, 19), TruthValue().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tSapEgressQueueUsePortParent.setStatus('current')
tSapEgressQueuePortLvl = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 4, 2, 1, 20), TLevel().clone(1)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tSapEgressQueuePortLvl.setStatus('current')
tSapEgressQueuePortWght = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 4, 2, 1, 21), TWeight().clone(1)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tSapEgressQueuePortWght.setStatus('current')
tSapEgressQueuePortCIRLvl = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 4, 2, 1, 22), TLevelOrDefault()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tSapEgressQueuePortCIRLvl.setStatus('current')
tSapEgressQueuePortCIRWght = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 4, 2, 1, 23), TWeight()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tSapEgressQueuePortCIRWght.setStatus('current')
tSapEgressQueuePortAvgOverhead = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 4, 2, 1, 24), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 10000))).setUnits('Hundredths of a percent').setMaxAccess("readcreate")
if mibBuilder.loadTexts: tSapEgressQueuePortAvgOverhead.setStatus('current')
tSapEgressQueuePoolName = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 4, 2, 1, 25), TNamedItemOrEmpty().clone(hexValue="")).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tSapEgressQueuePoolName.setStatus('current')
tSapEgressFCTable = MibTable((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 4, 3), )
if mibBuilder.loadTexts: tSapEgressFCTable.setStatus('current')
tSapEgressFCEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 4, 3, 1), ).setIndexNames((0, "ALCATEL-IND1-TIMETRA-QOS-MIB", "tSapEgressIndex"), (0, "ALCATEL-IND1-TIMETRA-QOS-MIB", "tSapEgressFCName"))
if mibBuilder.loadTexts: tSapEgressFCEntry.setStatus('current')
tSapEgressFCName = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 4, 3, 1, 1), TFCName())
if mibBuilder.loadTexts: tSapEgressFCName.setStatus('current')
tSapEgressFCRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 4, 3, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tSapEgressFCRowStatus.setStatus('current')
tSapEgressFCQueue = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 4, 3, 1, 3), TEgressQueueId()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tSapEgressFCQueue.setStatus('current')
tSapEgressFCDot1PValue = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 4, 3, 1, 4), Dot1PPriority().clone(-1)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tSapEgressFCDot1PValue.setStatus('obsolete')
tSapEgressFCLastChanged = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 4, 3, 1, 5), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tSapEgressFCLastChanged.setStatus('current')
tSapEgressFCDot1PInProfile = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 4, 3, 1, 8), Dot1PPriority().clone(-1)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tSapEgressFCDot1PInProfile.setStatus('current')
tSapEgressFCDot1POutProfile = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 4, 3, 1, 9), Dot1PPriority().clone(-1)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tSapEgressFCDot1POutProfile.setStatus('current')
tSapEgressFCForceDEValue = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 4, 3, 1, 10), TDEValue().clone(-1)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tSapEgressFCForceDEValue.setStatus('current')
tSapEgressFCDEMark = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 4, 3, 1, 11), TruthValue().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tSapEgressFCDEMark.setStatus('current')
tSapEgressFCInProfDscp = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 4, 3, 1, 12), TNamedItemOrEmpty().clone(hexValue="")).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tSapEgressFCInProfDscp.setStatus('current')
tSapEgressFCOutProfDscp = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 4, 3, 1, 13), TNamedItemOrEmpty().clone(hexValue="")).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tSapEgressFCOutProfDscp.setStatus('current')
tSapEgressFCInProfPrec = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 4, 3, 1, 14), TPrecValueOrNone().clone(-1)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tSapEgressFCInProfPrec.setStatus('current')
tSapEgressFCOutProfPrec = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 4, 3, 1, 15), TPrecValueOrNone().clone(-1)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tSapEgressFCOutProfPrec.setStatus('current')
tNetworkPolicyTable = MibTable((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 5, 1), )
if mibBuilder.loadTexts: tNetworkPolicyTable.setStatus('current')
tNetworkPolicyEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 5, 1, 1), ).setIndexNames((0, "ALCATEL-IND1-TIMETRA-QOS-MIB", "tNetworkPolicyIndex"))
if mibBuilder.loadTexts: tNetworkPolicyEntry.setStatus('current')
tNetworkPolicyIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 5, 1, 1, 1), TNetworkPolicyID())
if mibBuilder.loadTexts: tNetworkPolicyIndex.setStatus('current')
tNetworkPolicyRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 5, 1, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tNetworkPolicyRowStatus.setStatus('current')
tNetworkPolicyScope = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 5, 1, 1, 5), TItemScope().clone('template')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tNetworkPolicyScope.setStatus('current')
tNetworkPolicyDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 5, 1, 1, 6), TItemDescription().clone(hexValue="")).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tNetworkPolicyDescription.setStatus('current')
tNetworkPolicyIngressDefaultActionFC = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 5, 1, 1, 7), TFCName().clone(hexValue="be")).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tNetworkPolicyIngressDefaultActionFC.setStatus('current')
tNetworkPolicyIngressDefaultActionProfile = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 5, 1, 1, 8), TProfile().clone('out')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tNetworkPolicyIngressDefaultActionProfile.setStatus('current')
tNetworkPolicyEgressRemark = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 5, 1, 1, 9), TruthValue().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tNetworkPolicyEgressRemark.setStatus('current')
tNetworkPolicyLastChanged = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 5, 1, 1, 10), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tNetworkPolicyLastChanged.setStatus('current')
tNetworkPolicyIngressLerUseDscp = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 5, 1, 1, 11), TruthValue().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tNetworkPolicyIngressLerUseDscp.setStatus('current')
tNetworkIngressDSCPTable = MibTable((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 5, 2), )
if mibBuilder.loadTexts: tNetworkIngressDSCPTable.setStatus('current')
tNetworkIngressDSCPEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 5, 2, 1), ).setIndexNames((0, "ALCATEL-IND1-TIMETRA-QOS-MIB", "tNetworkPolicyIndex"), (0, "ALCATEL-IND1-TIMETRA-QOS-MIB", "tNetworkIngressDSCP"))
if mibBuilder.loadTexts: tNetworkIngressDSCPEntry.setStatus('current')
tNetworkIngressDSCP = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 5, 2, 1, 1), TDSCPName())
if mibBuilder.loadTexts: tNetworkIngressDSCP.setStatus('current')
tNetworkIngressDSCPRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 5, 2, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tNetworkIngressDSCPRowStatus.setStatus('current')
tNetworkIngressDSCPFC = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 5, 2, 1, 3), TFCNameOrEmpty().clone(hexValue="")).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tNetworkIngressDSCPFC.setStatus('current')
tNetworkIngressDSCPProfile = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 5, 2, 1, 4), TProfile()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tNetworkIngressDSCPProfile.setStatus('current')
tNetworkIngressDSCPLastChanged = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 5, 2, 1, 5), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tNetworkIngressDSCPLastChanged.setStatus('current')
tNetworkIngressDot1pTable = MibTable((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 5, 3), )
if mibBuilder.loadTexts: tNetworkIngressDot1pTable.setStatus('current')
tNetworkIngressDot1pEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 5, 3, 1), ).setIndexNames((0, "ALCATEL-IND1-TIMETRA-QOS-MIB", "tNetworkPolicyIndex"), (0, "ALCATEL-IND1-TIMETRA-QOS-MIB", "tNetworkIngressDot1pValue"))
if mibBuilder.loadTexts: tNetworkIngressDot1pEntry.setStatus('current')
tNetworkIngressDot1pValue = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 5, 3, 1, 1), Dot1PPriority().subtype(subtypeSpec=ValueRangeConstraint(0, 7)))
if mibBuilder.loadTexts: tNetworkIngressDot1pValue.setStatus('current')
tNetworkIngressDot1pRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 5, 3, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tNetworkIngressDot1pRowStatus.setStatus('current')
tNetworkIngressDot1pFC = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 5, 3, 1, 3), TFCNameOrEmpty().clone(hexValue="")).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tNetworkIngressDot1pFC.setStatus('current')
tNetworkIngressDot1pProfile = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 5, 3, 1, 4), TDEProfile()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tNetworkIngressDot1pProfile.setStatus('current')
tNetworkIngressDot1pLastChanged = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 5, 3, 1, 5), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tNetworkIngressDot1pLastChanged.setStatus('current')
tNetworkIngressLSPEXPTable = MibTable((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 5, 4), )
if mibBuilder.loadTexts: tNetworkIngressLSPEXPTable.setStatus('current')
tNetworkIngressLSPEXPEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 5, 4, 1), ).setIndexNames((0, "ALCATEL-IND1-TIMETRA-QOS-MIB", "tNetworkPolicyIndex"), (0, "ALCATEL-IND1-TIMETRA-QOS-MIB", "tNetworkIngressLSPEXP"))
if mibBuilder.loadTexts: tNetworkIngressLSPEXPEntry.setStatus('current')
tNetworkIngressLSPEXP = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 5, 4, 1, 1), TLspExpValue().subtype(subtypeSpec=ValueRangeConstraint(0, 7)))
if mibBuilder.loadTexts: tNetworkIngressLSPEXP.setStatus('current')
tNetworkIngressLSPEXPRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 5, 4, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tNetworkIngressLSPEXPRowStatus.setStatus('current')
tNetworkIngressLSPEXPFC = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 5, 4, 1, 3), TFCNameOrEmpty().clone(hexValue="")).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tNetworkIngressLSPEXPFC.setStatus('current')
tNetworkIngressLSPEXPProfile = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 5, 4, 1, 4), TProfile()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tNetworkIngressLSPEXPProfile.setStatus('current')
tNetworkIngressLSPEXPLastChanged = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 5, 4, 1, 5), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tNetworkIngressLSPEXPLastChanged.setStatus('current')
tNetworkEgressFCTable = MibTable((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 5, 7), )
if mibBuilder.loadTexts: tNetworkEgressFCTable.setStatus('current')
tNetworkEgressFCEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 5, 7, 1), ).setIndexNames((0, "ALCATEL-IND1-TIMETRA-QOS-MIB", "tNetworkPolicyIndex"), (0, "ALCATEL-IND1-TIMETRA-QOS-MIB", "tNetworkEgressFCName"))
if mibBuilder.loadTexts: tNetworkEgressFCEntry.setStatus('current')
tNetworkEgressFCName = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 5, 7, 1, 1), TFCName())
if mibBuilder.loadTexts: tNetworkEgressFCName.setStatus('current')
tNetworkEgressFCDSCPInProfile = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 5, 7, 1, 2), TDSCPNameOrEmpty()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tNetworkEgressFCDSCPInProfile.setStatus('current')
tNetworkEgressFCDSCPOutProfile = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 5, 7, 1, 3), TDSCPNameOrEmpty()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tNetworkEgressFCDSCPOutProfile.setStatus('current')
tNetworkEgressFCLspExpInProfile = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 5, 7, 1, 4), TLspExpValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tNetworkEgressFCLspExpInProfile.setStatus('current')
tNetworkEgressFCLspExpOutProfile = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 5, 7, 1, 5), TLspExpValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tNetworkEgressFCLspExpOutProfile.setStatus('current')
tNetworkEgressFCDot1pInProfile = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 5, 7, 1, 6), Dot1PPriority()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tNetworkEgressFCDot1pInProfile.setStatus('current')
tNetworkEgressFCDot1pOutProfile = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 5, 7, 1, 7), Dot1PPriority()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tNetworkEgressFCDot1pOutProfile.setStatus('current')
tNetworkEgressFCLastChanged = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 5, 7, 1, 8), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tNetworkEgressFCLastChanged.setStatus('current')
tNetworkEgressFCForceDEValue = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 5, 7, 1, 9), TDEValue().clone(-1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tNetworkEgressFCForceDEValue.setStatus('current')
tNetworkEgressFCDEMark = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 5, 7, 1, 10), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tNetworkEgressFCDEMark.setStatus('current')
tNetworkQueuePolicyTable = MibTable((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 6, 1), )
if mibBuilder.loadTexts: tNetworkQueuePolicyTable.setStatus('current')
tNetworkQueuePolicyEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 6, 1, 1), ).setIndexNames((0, "ALCATEL-IND1-TIMETRA-QOS-MIB", "tNetworkQueuePolicy"))
if mibBuilder.loadTexts: tNetworkQueuePolicyEntry.setStatus('current')
tNetworkQueuePolicy = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 6, 1, 1, 1), TNamedItem())
if mibBuilder.loadTexts: tNetworkQueuePolicy.setStatus('current')
tNetworkQueuePolicyRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 6, 1, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tNetworkQueuePolicyRowStatus.setStatus('current')
tNetworkQueuePolicyDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 6, 1, 1, 3), TItemDescription().clone(hexValue="")).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tNetworkQueuePolicyDescription.setStatus('current')
tNetworkQueuePolicyLastChanged = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 6, 1, 1, 8), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tNetworkQueuePolicyLastChanged.setStatus('current')
tNetworkQueueTable = MibTable((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 6, 2), )
if mibBuilder.loadTexts: tNetworkQueueTable.setStatus('current')
tNetworkQueueEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 6, 2, 1), ).setIndexNames((0, "ALCATEL-IND1-TIMETRA-QOS-MIB", "tNetworkQueuePolicy"), (0, "ALCATEL-IND1-TIMETRA-QOS-MIB", "tNetworkQueue"))
if mibBuilder.loadTexts: tNetworkQueueEntry.setStatus('current')
tNetworkQueue = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 6, 2, 1, 1), TQueueId().subtype(subtypeSpec=ValueRangeConstraint(1, 16)))
if mibBuilder.loadTexts: tNetworkQueue.setStatus('current')
tNetworkQueueRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 6, 2, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tNetworkQueueRowStatus.setStatus('current')
tNetworkQueuePoolName = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 6, 2, 1, 3), TNamedItemOrEmpty().clone(hexValue="")).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tNetworkQueuePoolName.setStatus('current')
tNetworkQueueParent = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 6, 2, 1, 4), TNamedItemOrEmpty().clone(hexValue="")).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tNetworkQueueParent.setStatus('current')
tNetworkQueueLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 6, 2, 1, 5), TLevel().clone(1)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tNetworkQueueLevel.setStatus('current')
tNetworkQueueWeight = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 6, 2, 1, 6), TWeight().clone(1)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tNetworkQueueWeight.setStatus('current')
tNetworkQueueCIRLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 6, 2, 1, 7), TLevelOrDefault()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tNetworkQueueCIRLevel.setStatus('current')
tNetworkQueueCIRWeight = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 6, 2, 1, 8), TWeight().clone(1)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tNetworkQueueCIRWeight.setStatus('current')
tNetworkQueueMCast = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 6, 2, 1, 9), TruthValue().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tNetworkQueueMCast.setStatus('current')
tNetworkQueueExpedite = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 6, 2, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("expedited", 1), ("auto-expedited", 2), ("non-expedited", 3))).clone('auto-expedited')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tNetworkQueueExpedite.setStatus('current')
tNetworkQueueCIR = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 6, 2, 1, 11), TRatePercent()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tNetworkQueueCIR.setStatus('current')
tNetworkQueuePIR = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 6, 2, 1, 12), TPIRRatePercent().clone(100)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tNetworkQueuePIR.setStatus('current')
tNetworkQueueCBS = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 6, 2, 1, 13), TBurstHundredthsOfPercent()).setUnits('Hundredths of a percent').setMaxAccess("readcreate")
if mibBuilder.loadTexts: tNetworkQueueCBS.setStatus('current')
tNetworkQueueMBS = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 6, 2, 1, 14), TBurstHundredthsOfPercent().clone(10000)).setUnits('Hundredths of a percent').setMaxAccess("readcreate")
if mibBuilder.loadTexts: tNetworkQueueMBS.setStatus('current')
tNetworkQueueHiPrioOnly = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 6, 2, 1, 15), TBurstPercentOrDefault().clone(-1)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tNetworkQueueHiPrioOnly.setStatus('current')
tNetworkQueueLastChanged = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 6, 2, 1, 16), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tNetworkQueueLastChanged.setStatus('current')
tNetworkQueueUsePortParent = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 6, 2, 1, 17), TruthValue().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tNetworkQueueUsePortParent.setStatus('current')
tNetworkQueuePortLvl = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 6, 2, 1, 18), TLevel().clone(1)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tNetworkQueuePortLvl.setStatus('current')
tNetworkQueuePortWght = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 6, 2, 1, 19), TWeight().clone(1)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tNetworkQueuePortWght.setStatus('current')
tNetworkQueuePortCIRLvl = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 6, 2, 1, 20), TLevelOrDefault()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tNetworkQueuePortCIRLvl.setStatus('current')
tNetworkQueuePortCIRWght = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 6, 2, 1, 21), TWeight()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tNetworkQueuePortCIRWght.setStatus('current')
tNetworkQueuePortAvgOverhead = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 6, 2, 1, 22), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 10000))).setUnits('Hundredths of a percent').setMaxAccess("readcreate")
if mibBuilder.loadTexts: tNetworkQueuePortAvgOverhead.setStatus('current')
tNetworkQueueCIRAdaptation = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 6, 2, 1, 23), TAdaptationRule().clone('closest')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tNetworkQueueCIRAdaptation.setStatus('current')
tNetworkQueuePIRAdaptation = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 6, 2, 1, 24), TAdaptationRule().clone('closest')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tNetworkQueuePIRAdaptation.setStatus('current')
tNetworkQueueFCTable = MibTable((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 6, 3), )
if mibBuilder.loadTexts: tNetworkQueueFCTable.setStatus('current')
tNetworkQueueFCEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 6, 3, 1), ).setIndexNames((0, "ALCATEL-IND1-TIMETRA-QOS-MIB", "tNetworkQueuePolicy"), (0, "ALCATEL-IND1-TIMETRA-QOS-MIB", "tNetworkQueueFCName"))
if mibBuilder.loadTexts: tNetworkQueueFCEntry.setStatus('current')
tNetworkQueueFCName = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 6, 3, 1, 1), TFCName())
if mibBuilder.loadTexts: tNetworkQueueFCName.setStatus('current')
tNetworkQueueFCRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 6, 3, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tNetworkQueueFCRowStatus.setStatus('current')
tNetworkQueueFC = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 6, 3, 1, 3), TQueueId().subtype(subtypeSpec=ValueRangeConstraint(1, 16)).clone(1)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tNetworkQueueFC.setStatus('current')
tNetworkQueueFCMCast = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 6, 3, 1, 4), TQueueId().subtype(subtypeSpec=ValueRangeConstraint(1, 16)).clone(9)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tNetworkQueueFCMCast.setStatus('current')
tNetworkQueueFCLastChanged = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 6, 3, 1, 7), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tNetworkQueueFCLastChanged.setStatus('current')
tSharedQueuePolicyTable = MibTable((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 7, 1), )
if mibBuilder.loadTexts: tSharedQueuePolicyTable.setStatus('current')
tSharedQueuePolicyEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 7, 1, 1), ).setIndexNames((0, "ALCATEL-IND1-TIMETRA-QOS-MIB", "tSharedQueuePolicy"))
if mibBuilder.loadTexts: tSharedQueuePolicyEntry.setStatus('current')
tSharedQueuePolicy = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 7, 1, 1, 1), TNamedItem())
if mibBuilder.loadTexts: tSharedQueuePolicy.setStatus('current')
tSharedQueuePolicyRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 7, 1, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tSharedQueuePolicyRowStatus.setStatus('current')
tSharedQueuePolicyLastChanged = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 7, 1, 1, 3), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tSharedQueuePolicyLastChanged.setStatus('current')
tSharedQueuePolicyDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 7, 1, 1, 4), TItemDescription().clone(hexValue="")).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tSharedQueuePolicyDescription.setStatus('current')
tSharedQueueTable = MibTable((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 7, 2), )
if mibBuilder.loadTexts: tSharedQueueTable.setStatus('current')
tSharedQueueEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 7, 2, 1), ).setIndexNames((0, "ALCATEL-IND1-TIMETRA-QOS-MIB", "tSharedQueuePolicy"), (0, "ALCATEL-IND1-TIMETRA-QOS-MIB", "tSharedQueueId"))
if mibBuilder.loadTexts: tSharedQueueEntry.setStatus('current')
tSharedQueueId = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 7, 2, 1, 1), TQueueId().subtype(subtypeSpec=ValueRangeConstraint(1, 32)))
if mibBuilder.loadTexts: tSharedQueueId.setStatus('current')
tSharedQueueRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 7, 2, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tSharedQueueRowStatus.setStatus('current')
tSharedQueueLastChanged = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 7, 2, 1, 3), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tSharedQueueLastChanged.setStatus('current')
tSharedQueuePoolName = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 7, 2, 1, 4), TNamedItemOrEmpty().clone(hexValue="")).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tSharedQueuePoolName.setStatus('current')
tSharedQueueParent = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 7, 2, 1, 5), TNamedItemOrEmpty().clone(hexValue="")).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tSharedQueueParent.setStatus('current')
tSharedQueueLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 7, 2, 1, 6), TLevel().clone(1)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tSharedQueueLevel.setStatus('current')
tSharedQueueWeight = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 7, 2, 1, 7), TWeight().clone(1)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tSharedQueueWeight.setStatus('current')
tSharedQueueCIRLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 7, 2, 1, 8), TLevelOrDefault()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tSharedQueueCIRLevel.setStatus('current')
tSharedQueueCIRWeight = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 7, 2, 1, 9), TWeight().clone(1)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tSharedQueueCIRWeight.setStatus('current')
tSharedQueueExpedite = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 7, 2, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("expedited", 1), ("auto-expedited", 2), ("non-expedited", 3))).clone('auto-expedited')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tSharedQueueExpedite.setStatus('current')
tSharedQueueCIR = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 7, 2, 1, 11), TRatePercent()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tSharedQueueCIR.setStatus('current')
tSharedQueuePIR = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 7, 2, 1, 12), TRatePercent().clone(100)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tSharedQueuePIR.setStatus('current')
tSharedQueueCBS = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 7, 2, 1, 13), TBurstPercent()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tSharedQueueCBS.setStatus('current')
tSharedQueueMBS = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 7, 2, 1, 14), TBurstPercent().clone(100)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tSharedQueueMBS.setStatus('current')
tSharedQueueHiPrioOnly = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 7, 2, 1, 15), TBurstPercentOrDefault().clone(-1)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tSharedQueueHiPrioOnly.setStatus('current')
tSharedQueueIsMultipoint = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 7, 2, 1, 16), TruthValue().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tSharedQueueIsMultipoint.setStatus('current')
tSharedQueueFCTable = MibTable((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 7, 3), )
if mibBuilder.loadTexts: tSharedQueueFCTable.setStatus('current')
tSharedQueueFCEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 7, 3, 1), ).setIndexNames((0, "ALCATEL-IND1-TIMETRA-QOS-MIB", "tSharedQueuePolicy"), (0, "ALCATEL-IND1-TIMETRA-QOS-MIB", "tSharedQueueFCName"))
if mibBuilder.loadTexts: tSharedQueueFCEntry.setStatus('current')
tSharedQueueFCName = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 7, 3, 1, 1), TFCName())
if mibBuilder.loadTexts: tSharedQueueFCName.setStatus('current')
tSharedQueueFCRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 7, 3, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tSharedQueueFCRowStatus.setStatus('current')
tSharedQueueFCLastChanged = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 7, 3, 1, 3), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tSharedQueueFCLastChanged.setStatus('current')
tSharedQueueFCQueue = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 7, 3, 1, 4), TQueueId().subtype(subtypeSpec=ValueRangeConstraint(1, 8)).clone(1)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tSharedQueueFCQueue.setStatus('current')
tSharedQueueFCMCastQueue = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 7, 3, 1, 5), TQueueId().subtype(subtypeSpec=ValueRangeConstraint(9, 16)).clone(9)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tSharedQueueFCMCastQueue.setStatus('current')
tSharedQueueFCBCastQueue = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 7, 3, 1, 6), TQueueId().subtype(subtypeSpec=ValueRangeConstraint(17, 24)).clone(17)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tSharedQueueFCBCastQueue.setStatus('current')
tSharedQueueFCUnknownQueue = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 7, 3, 1, 7), TQueueId().subtype(subtypeSpec=ValueRangeConstraint(25, 32)).clone(25)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tSharedQueueFCUnknownQueue.setStatus('current')
tSlopePolicyTable = MibTable((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 10, 1), )
if mibBuilder.loadTexts: tSlopePolicyTable.setStatus('current')
tSlopePolicyEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 10, 1, 1), ).setIndexNames((0, "ALCATEL-IND1-TIMETRA-QOS-MIB", "tSlopePolicy"))
if mibBuilder.loadTexts: tSlopePolicyEntry.setStatus('current')
tSlopePolicy = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 10, 1, 1, 1), TNamedItem())
if mibBuilder.loadTexts: tSlopePolicy.setStatus('current')
tSlopeRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 10, 1, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tSlopeRowStatus.setStatus('current')
tSlopeDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 10, 1, 1, 3), TItemDescription().clone(hexValue="")).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tSlopeDescription.setStatus('current')
tSlopeHiAdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 10, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("up", 1), ("down", 2))).clone('down')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tSlopeHiAdminStatus.setStatus('current')
tSlopeHiStartAverage = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 10, 1, 1, 5), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 100)).clone(70)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tSlopeHiStartAverage.setStatus('current')
tSlopeHiMaxAverage = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 10, 1, 1, 6), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 100)).clone(90)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tSlopeHiMaxAverage.setStatus('current')
tSlopeHiMaxProbability = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 10, 1, 1, 7), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 100)).clone(80)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tSlopeHiMaxProbability.setStatus('current')
tSlopeLoAdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 10, 1, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("up", 1), ("down", 2))).clone('down')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tSlopeLoAdminStatus.setStatus('current')
tSlopeLoStartAverage = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 10, 1, 1, 9), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 100)).clone(50)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tSlopeLoStartAverage.setStatus('current')
tSlopeLoMaxAverage = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 10, 1, 1, 10), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 100)).clone(75)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tSlopeLoMaxAverage.setStatus('current')
tSlopeLoMaxProbability = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 10, 1, 1, 11), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 100)).clone(80)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tSlopeLoMaxProbability.setStatus('current')
tSlopeTimeAvgFactor = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 10, 1, 1, 12), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 15)).clone(7)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tSlopeTimeAvgFactor.setStatus('current')
tSlopeLastChanged = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 10, 1, 1, 13), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tSlopeLastChanged.setStatus('current')
tSchedulerPolicyTable = MibTable((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 12, 1), )
if mibBuilder.loadTexts: tSchedulerPolicyTable.setStatus('current')
tSchedulerPolicyEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 12, 1, 1), ).setIndexNames((1, "ALCATEL-IND1-TIMETRA-QOS-MIB", "tSchedulerPolicyName"))
if mibBuilder.loadTexts: tSchedulerPolicyEntry.setStatus('current')
tSchedulerPolicyName = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 12, 1, 1, 1), TNamedItem())
if mibBuilder.loadTexts: tSchedulerPolicyName.setStatus('current')
tSchedulerPolicyRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 12, 1, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tSchedulerPolicyRowStatus.setStatus('current')
tSchedulerPolicyDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 12, 1, 1, 3), TItemDescription().clone(hexValue="")).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tSchedulerPolicyDescription.setStatus('current')
tSchedulerPolicyLastChanged = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 12, 1, 1, 4), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tSchedulerPolicyLastChanged.setStatus('current')
tSchedulerPolicyFrameBasedAccnt = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 12, 1, 1, 5), TruthValue().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tSchedulerPolicyFrameBasedAccnt.setStatus('current')
tVirtualSchedulerTable = MibTable((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 12, 2), )
if mibBuilder.loadTexts: tVirtualSchedulerTable.setStatus('current')
tVirtualSchedulerEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 12, 2, 1), ).setIndexNames((0, "ALCATEL-IND1-TIMETRA-QOS-MIB", "tSchedulerPolicyName"), (0, "ALCATEL-IND1-TIMETRA-QOS-MIB", "tVirtualSchedulerTier"), (1, "ALCATEL-IND1-TIMETRA-QOS-MIB", "tVirtualSchedulerName"))
if mibBuilder.loadTexts: tVirtualSchedulerEntry.setStatus('current')
tVirtualSchedulerTier = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 12, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 3)))
if mibBuilder.loadTexts: tVirtualSchedulerTier.setStatus('current')
tVirtualSchedulerName = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 12, 2, 1, 2), TNamedItem())
if mibBuilder.loadTexts: tVirtualSchedulerName.setStatus('current')
tVirtualSchedulerRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 12, 2, 1, 3), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tVirtualSchedulerRowStatus.setStatus('current')
tVirtualSchedulerDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 12, 2, 1, 4), TItemDescription().clone(hexValue="")).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tVirtualSchedulerDescription.setStatus('current')
tVirtualSchedulerParent = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 12, 2, 1, 5), TNamedItemOrEmpty().clone(hexValue="")).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tVirtualSchedulerParent.setStatus('current')
tVirtualSchedulerLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 12, 2, 1, 6), TLevel().clone(1)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tVirtualSchedulerLevel.setStatus('current')
tVirtualSchedulerWeight = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 12, 2, 1, 7), TWeight().clone(1)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tVirtualSchedulerWeight.setStatus('current')
tVirtualSchedulerCIRLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 12, 2, 1, 8), TLevelOrDefault()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tVirtualSchedulerCIRLevel.setStatus('current')
tVirtualSchedulerCIRWeight = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 12, 2, 1, 9), TWeight().clone(1)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tVirtualSchedulerCIRWeight.setStatus('current')
tVirtualSchedulerPIR = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 12, 2, 1, 10), TPIRRate().clone(-1)).setUnits('kbps').setMaxAccess("readcreate")
if mibBuilder.loadTexts: tVirtualSchedulerPIR.setStatus('current')
tVirtualSchedulerCIR = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 12, 2, 1, 11), TCIRRate()).setUnits('kbps').setMaxAccess("readcreate")
if mibBuilder.loadTexts: tVirtualSchedulerCIR.setStatus('current')
tVirtualSchedulerSummedCIR = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 12, 2, 1, 12), TruthValue().clone('true')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tVirtualSchedulerSummedCIR.setStatus('current')
tVirtualSchedulerLastChanged = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 12, 2, 1, 13), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tVirtualSchedulerLastChanged.setStatus('current')
tVirtualSchedulerUsePortParent = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 12, 2, 1, 14), TruthValue().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tVirtualSchedulerUsePortParent.setStatus('current')
tVirtualSchedulerPortLvl = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 12, 2, 1, 15), TLevel().clone(1)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tVirtualSchedulerPortLvl.setStatus('current')
tVirtualSchedulerPortWght = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 12, 2, 1, 16), TWeight().clone(1)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tVirtualSchedulerPortWght.setStatus('current')
tVirtualSchedulerPortCIRLvl = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 12, 2, 1, 17), TLevelOrDefault()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tVirtualSchedulerPortCIRLvl.setStatus('current')
tVirtualSchedulerPortCIRWght = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 12, 2, 1, 18), TWeight()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tVirtualSchedulerPortCIRWght.setStatus('current')
tPortSchedulerPlcyTable = MibTable((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 12, 3), )
if mibBuilder.loadTexts: tPortSchedulerPlcyTable.setStatus('current')
tPortSchedulerPlcyEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 12, 3, 1), ).setIndexNames((1, "ALCATEL-IND1-TIMETRA-QOS-MIB", "tPortSchedulerPlcyName"))
if mibBuilder.loadTexts: tPortSchedulerPlcyEntry.setStatus('current')
tPortSchedulerPlcyName = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 12, 3, 1, 1), TNamedItem())
if mibBuilder.loadTexts: tPortSchedulerPlcyName.setStatus('current')
tPortSchedulerPlcyRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 12, 3, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tPortSchedulerPlcyRowStatus.setStatus('current')
tPortSchedulerPlcyDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 12, 3, 1, 3), TItemDescription()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tPortSchedulerPlcyDescription.setStatus('current')
tPortSchedulerPlcyLastChanged = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 12, 3, 1, 4), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tPortSchedulerPlcyLastChanged.setStatus('current')
tPortSchedulerPlcyMaxRate = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 12, 3, 1, 5), TPortSchedulerPIR().clone(-1)).setUnits('kbps').setMaxAccess("readcreate")
if mibBuilder.loadTexts: tPortSchedulerPlcyMaxRate.setStatus('current')
tPortSchedulerPlcyLvl1PIR = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 12, 3, 1, 6), TPortSchedulerPIR().clone(-1)).setUnits('kbps').setMaxAccess("readcreate")
if mibBuilder.loadTexts: tPortSchedulerPlcyLvl1PIR.setStatus('current')
tPortSchedulerPlcyLvl1CIR = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 12, 3, 1, 7), TPortSchedulerCIR().clone(-1)).setUnits('kbps').setMaxAccess("readcreate")
if mibBuilder.loadTexts: tPortSchedulerPlcyLvl1CIR.setStatus('current')
tPortSchedulerPlcyLvl2PIR = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 12, 3, 1, 8), TPortSchedulerPIR().clone(-1)).setUnits('kbps').setMaxAccess("readcreate")
if mibBuilder.loadTexts: tPortSchedulerPlcyLvl2PIR.setStatus('current')
tPortSchedulerPlcyLvl2CIR = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 12, 3, 1, 9), TPortSchedulerCIR().clone(-1)).setUnits('kbps').setMaxAccess("readcreate")
if mibBuilder.loadTexts: tPortSchedulerPlcyLvl2CIR.setStatus('current')
tPortSchedulerPlcyLvl3PIR = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 12, 3, 1, 10), TPortSchedulerPIR().clone(-1)).setUnits('kbps').setMaxAccess("readcreate")
if mibBuilder.loadTexts: tPortSchedulerPlcyLvl3PIR.setStatus('current')
tPortSchedulerPlcyLvl3CIR = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 12, 3, 1, 11), TPortSchedulerCIR().clone(-1)).setUnits('kbps').setMaxAccess("readcreate")
if mibBuilder.loadTexts: tPortSchedulerPlcyLvl3CIR.setStatus('current')
tPortSchedulerPlcyLvl4PIR = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 12, 3, 1, 12), TPortSchedulerPIR().clone(-1)).setUnits('kbps').setMaxAccess("readcreate")
if mibBuilder.loadTexts: tPortSchedulerPlcyLvl4PIR.setStatus('current')
tPortSchedulerPlcyLvl4CIR = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 12, 3, 1, 13), TPortSchedulerCIR().clone(-1)).setUnits('kbps').setMaxAccess("readcreate")
if mibBuilder.loadTexts: tPortSchedulerPlcyLvl4CIR.setStatus('current')
tPortSchedulerPlcyLvl5PIR = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 12, 3, 1, 14), TPortSchedulerPIR().clone(-1)).setUnits('kbps').setMaxAccess("readcreate")
if mibBuilder.loadTexts: tPortSchedulerPlcyLvl5PIR.setStatus('current')
tPortSchedulerPlcyLvl5CIR = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 12, 3, 1, 15), TPortSchedulerCIR().clone(-1)).setUnits('kbps').setMaxAccess("readcreate")
if mibBuilder.loadTexts: tPortSchedulerPlcyLvl5CIR.setStatus('current')
tPortSchedulerPlcyLvl6PIR = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 12, 3, 1, 16), TPortSchedulerPIR().clone(-1)).setUnits('kbps').setMaxAccess("readcreate")
if mibBuilder.loadTexts: tPortSchedulerPlcyLvl6PIR.setStatus('current')
tPortSchedulerPlcyLvl6CIR = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 12, 3, 1, 17), TPortSchedulerCIR().clone(-1)).setUnits('kbps').setMaxAccess("readcreate")
if mibBuilder.loadTexts: tPortSchedulerPlcyLvl6CIR.setStatus('current')
tPortSchedulerPlcyLvl7PIR = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 12, 3, 1, 18), TPortSchedulerPIR().clone(-1)).setUnits('kbps').setMaxAccess("readcreate")
if mibBuilder.loadTexts: tPortSchedulerPlcyLvl7PIR.setStatus('current')
tPortSchedulerPlcyLvl7CIR = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 12, 3, 1, 19), TPortSchedulerCIR().clone(-1)).setUnits('kbps').setMaxAccess("readcreate")
if mibBuilder.loadTexts: tPortSchedulerPlcyLvl7CIR.setStatus('current')
tPortSchedulerPlcyLvl8PIR = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 12, 3, 1, 20), TPortSchedulerPIR().clone(-1)).setUnits('kbps').setMaxAccess("readcreate")
if mibBuilder.loadTexts: tPortSchedulerPlcyLvl8PIR.setStatus('current')
tPortSchedulerPlcyLvl8CIR = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 12, 3, 1, 21), TPortSchedulerCIR().clone(-1)).setUnits('kbps').setMaxAccess("readcreate")
if mibBuilder.loadTexts: tPortSchedulerPlcyLvl8CIR.setStatus('current')
tPortSchedulerPlcyOrphanLvl = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 12, 3, 1, 22), TLevel().clone(1)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tPortSchedulerPlcyOrphanLvl.setStatus('current')
tPortSchedulerPlcyOrphanWeight = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 12, 3, 1, 23), TWeight()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tPortSchedulerPlcyOrphanWeight.setStatus('current')
tPortSchedulerPlcyOrphanCIRLvl = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 12, 3, 1, 24), TLevelOrDefault()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tPortSchedulerPlcyOrphanCIRLvl.setStatus('current')
tPortSchedulerPlcyOrphanCIRWght = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 12, 3, 1, 25), TWeight()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tPortSchedulerPlcyOrphanCIRWght.setStatus('current')
tQosDomainLastChanged = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 20, 1), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tQosDomainLastChanged.setStatus('current')
tDSCPNameTableLastChanged = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 20, 5), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tDSCPNameTableLastChanged.setStatus('current')
tFCNameTableLastChanged = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 20, 10), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tFCNameTableLastChanged.setStatus('current')
tSapIngressTableLastChanged = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 20, 20), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tSapIngressTableLastChanged.setStatus('current')
tSapIngressQueueTableLastChanged = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 20, 21), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tSapIngressQueueTableLastChanged.setStatus('current')
tSapIngressDSCPTableLastChanged = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 20, 22), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tSapIngressDSCPTableLastChanged.setStatus('current')
tSapIngressDot1pTableLastChanged = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 20, 23), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tSapIngressDot1pTableLastChanged.setStatus('current')
tSapIngressIPCriteriaTableLastChanged = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 20, 24), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tSapIngressIPCriteriaTableLastChanged.setStatus('current')
tSapIngressMacCriteriaTableLastChanged = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 20, 25), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tSapIngressMacCriteriaTableLastChanged.setStatus('current')
tSapIngressFCTableLastChanged = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 20, 26), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tSapIngressFCTableLastChanged.setStatus('current')
tSapIngressPrecTableLastChanged = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 20, 27), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tSapIngressPrecTableLastChanged.setStatus('current')
tSapEgressTableLastChanged = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 20, 30), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tSapEgressTableLastChanged.setStatus('current')
tSapEgressQueueTableLastChanged = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 20, 31), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tSapEgressQueueTableLastChanged.setStatus('current')
tSapEgressFCTableLastChanged = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 20, 32), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tSapEgressFCTableLastChanged.setStatus('current')
tNetworkPolicyTableLastChanged = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 20, 40), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tNetworkPolicyTableLastChanged.setStatus('current')
tNetworkIngressDSCPTableLastChanged = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 20, 41), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tNetworkIngressDSCPTableLastChanged.setStatus('current')
tNetworkIngressLSPEXPTableLastChanged = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 20, 42), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tNetworkIngressLSPEXPTableLastChanged.setStatus('current')
tNetworkEgressFCTableLastChanged = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 20, 43), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tNetworkEgressFCTableLastChanged.setStatus('current')
tNetworkIngressDot1pTableLastChanged = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 20, 44), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tNetworkIngressDot1pTableLastChanged.setStatus('current')
tNetworkQueuePolicyTableLastChanged = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 20, 50), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tNetworkQueuePolicyTableLastChanged.setStatus('current')
tNetworkQueueTableLastChanged = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 20, 51), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tNetworkQueueTableLastChanged.setStatus('current')
tNetworkQueueFCTableLastChanged = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 20, 52), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tNetworkQueueFCTableLastChanged.setStatus('current')
tSlopePolicyTableLastChanged = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 20, 55), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tSlopePolicyTableLastChanged.setStatus('current')
tSchedulerPolicyTableLastChanged = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 20, 60), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tSchedulerPolicyTableLastChanged.setStatus('current')
tVirtualSchedulerTableLastChanged = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 20, 61), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tVirtualSchedulerTableLastChanged.setStatus('current')
tAtmTdpTableLastChanged = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 20, 62), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tAtmTdpTableLastChanged.setStatus('current')
tSharedQueuePolicyTableLastChanged = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 20, 63), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tSharedQueuePolicyTableLastChanged.setStatus('current')
tSharedQueueTableLastChanged = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 20, 64), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tSharedQueueTableLastChanged.setStatus('current')
tSharedQueueFCTableLastChanged = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 20, 65), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tSharedQueueFCTableLastChanged.setStatus('current')
tSapIngressIPv6CriteriaTableLastChanged = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 20, 66), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tSapIngressIPv6CriteriaTableLastChanged.setStatus('current')
tNamedPoolPolicyTableLastChanged = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 20, 73), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tNamedPoolPolicyTableLastChanged.setStatus('current')
tQ1NamedPoolTableLastChanged = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 20, 74), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tQ1NamedPoolTableLastChanged.setStatus('current')
tAtmTdpTable = MibTable((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 21, 1), )
if mibBuilder.loadTexts: tAtmTdpTable.setStatus('current')
tAtmTdpEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 21, 1, 1), ).setIndexNames((0, "ALCATEL-IND1-TIMETRA-QOS-MIB", "tAtmTdpIndex"))
if mibBuilder.loadTexts: tAtmTdpEntry.setStatus('current')
tAtmTdpIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 21, 1, 1, 1), AtmTrafficDescrParamIndex().subtype(subtypeSpec=ValueRangeConstraint(1, 1000)))
if mibBuilder.loadTexts: tAtmTdpIndex.setStatus('current')
tAtmTdpSir = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 21, 1, 1, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tAtmTdpSir.setStatus('current')
tAtmTdpPir = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 21, 1, 1, 3), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tAtmTdpPir.setStatus('current')
tAtmTdpMbs = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 21, 1, 1, 4), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tAtmTdpMbs.setStatus('current')
tAtmTdpMir = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 21, 1, 1, 5), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tAtmTdpMir.setStatus('current')
tAtmTdpShaping = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 21, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tAtmTdpShaping.setStatus('current')
tAtmTdpServCat = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 21, 1, 1, 7), AtmServiceCategory().clone('ubr')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tAtmTdpServCat.setStatus('current')
tAtmTdpDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 21, 1, 1, 8), TItemDescription()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tAtmTdpDescription.setStatus('current')
tAtmTdpLastChanged = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 21, 1, 1, 9), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tAtmTdpLastChanged.setStatus('current')
tAtmTdpRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 21, 1, 1, 10), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tAtmTdpRowStatus.setStatus('current')
tAtmTdpDescrType = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 21, 1, 1, 11), TAtmTdpDescrType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tAtmTdpDescrType.setStatus('current')
tAtmTdpCdvt = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 21, 1, 1, 12), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tAtmTdpCdvt.setStatus('current')
tAtmTdpPolicing = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 21, 1, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tAtmTdpPolicing.setStatus('current')
tAtmTdpCLPTagging = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 21, 1, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1))).clone('disabled')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tAtmTdpCLPTagging.setStatus('current')
tNamedPoolPolicyTable = MibTable((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 22, 1), )
if mibBuilder.loadTexts: tNamedPoolPolicyTable.setStatus('current')
tNamedPoolPolicyEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 22, 1, 1), ).setIndexNames((0, "ALCATEL-IND1-TIMETRA-QOS-MIB", "tNamedPoolPolicyName"))
if mibBuilder.loadTexts: tNamedPoolPolicyEntry.setStatus('current')
tNamedPoolPolicyName = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 22, 1, 1, 1), TNamedItem())
if mibBuilder.loadTexts: tNamedPoolPolicyName.setStatus('current')
tNamedPoolPolicyRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 22, 1, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tNamedPoolPolicyRowStatus.setStatus('current')
tNamedPoolPolicyLastChanged = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 22, 1, 1, 3), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tNamedPoolPolicyLastChanged.setStatus('current')
tNamedPoolPolicyDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 22, 1, 1, 4), TItemDescription()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tNamedPoolPolicyDescription.setStatus('current')
tNamedPoolPolicyQ1DefaultWeight = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 22, 1, 1, 5), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 100)).clone(50)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tNamedPoolPolicyQ1DefaultWeight.setStatus('current')
tNamedPoolPolicyQ1MdaWeight = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 22, 1, 1, 6), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 100)).clone(50)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tNamedPoolPolicyQ1MdaWeight.setStatus('current')
tNamedPoolPolicyQ1PortWeight = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 22, 1, 1, 7), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 100)).clone(50)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tNamedPoolPolicyQ1PortWeight.setStatus('current')
tQ1NamedPoolTable = MibTable((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 22, 2), )
if mibBuilder.loadTexts: tQ1NamedPoolTable.setStatus('current')
tQ1NamedPoolEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 22, 2, 1), ).setIndexNames((0, "ALCATEL-IND1-TIMETRA-QOS-MIB", "tQ1NamedPoolPolicyName"), (0, "ALCATEL-IND1-TIMETRA-QOS-MIB", "tQ1NamedPoolName"))
if mibBuilder.loadTexts: tQ1NamedPoolEntry.setStatus('current')
tQ1NamedPoolPolicyName = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 22, 2, 1, 1), TNamedItem())
if mibBuilder.loadTexts: tQ1NamedPoolPolicyName.setStatus('current')
tQ1NamedPoolName = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 22, 2, 1, 2), TNamedItem())
if mibBuilder.loadTexts: tQ1NamedPoolName.setStatus('current')
tQ1NamedPoolRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 22, 2, 1, 3), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tQ1NamedPoolRowStatus.setStatus('current')
tQ1NamedPoolLastChanged = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 22, 2, 1, 4), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tQ1NamedPoolLastChanged.setStatus('current')
tQ1NamedPoolDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 22, 2, 1, 5), TItemDescription()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tQ1NamedPoolDescription.setStatus('current')
tQ1NamedPoolNetworkAllocWeight = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 22, 2, 1, 6), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 100)).clone(50)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tQ1NamedPoolNetworkAllocWeight.setStatus('current')
tQ1NamedPoolAccessAllocWeight = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 22, 2, 1, 7), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 100)).clone(50)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tQ1NamedPoolAccessAllocWeight.setStatus('current')
tQ1NamedPoolSlopePolicy = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 22, 2, 1, 8), TNamedItemOrEmpty().clone(hexValue="")).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tQ1NamedPoolSlopePolicy.setStatus('current')
tQ1NamedPoolReservedCbs = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 22, 2, 1, 9), Integer32().clone(30)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tQ1NamedPoolReservedCbs.setStatus('current')
tAtmTdpIndexNext = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 21, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tAtmTdpIndexNext.setStatus('current')
tAtmTdpsMaxSupported = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 21, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tAtmTdpsMaxSupported.setStatus('current')
tAtmTdpsCurrentlyConfigured = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 16, 21, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tAtmTdpsCurrentlyConfigured.setStatus('current')
tmnxQosCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 16, 1))
tmnxQosGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 16, 2))
tmnxQos7450V4v0Compliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 16, 1, 4)).setObjects(("ALCATEL-IND1-TIMETRA-QOS-MIB", "tmnxQosGlobalGroup"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tmnxQosDSCPGroup"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tmnxQosFCGroup"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tmnxQosSapIngressV4v0Group"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tmnxQosSapEgressR2r1Group"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tmnxQosNetworkR2r1Group"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tmnxQosSlopeGroup"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tmnxQosSchedulerGroup"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tmnxQosQueueV4v0Group"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxQos7450V4v0Compliance = tmnxQos7450V4v0Compliance.setStatus('obsolete')
tmnxQos7750V4v0Compliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 16, 1, 5)).setObjects(("ALCATEL-IND1-TIMETRA-QOS-MIB", "tmnxQosGlobalGroup"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tmnxQosDSCPGroup"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tmnxQosFCGroup"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tmnxQosSapIngressV4v0Group"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tmnxQosSapEgressR2r1Group"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tmnxQosNetworkR2r1Group"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tmnxQosSlopeGroup"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tmnxQosSchedulerGroup"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tmnxQosAtmTdpV3v0Group"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tmnxQosQueueV4v0Group"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tmnxQosSapIpv6FilterR4r0Group"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxQos7750V4v0Compliance = tmnxQos7750V4v0Compliance.setStatus('obsolete')
tmnxQos7450V5v0Compliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 16, 1, 6)).setObjects(("ALCATEL-IND1-TIMETRA-QOS-MIB", "tmnxQosGlobalGroup"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tmnxQosDSCPGroup"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tmnxQosFCGroup"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tmnxQosSapIngressV4v0Group"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tmnxQosSapEgressV5v0Group"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tmnxQosNetworkV5v0Group"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tmnxQosSlopeGroup"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tmnxQosSchedulerV5v0Group"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tmnxQosQueueV4v0Group"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxQos7450V5v0Compliance = tmnxQos7450V5v0Compliance.setStatus('obsolete')
tmnxQos7750V5v0Compliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 16, 1, 7)).setObjects(("ALCATEL-IND1-TIMETRA-QOS-MIB", "tmnxQosGlobalGroup"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tmnxQosDSCPGroup"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tmnxQosFCGroup"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tmnxQosSapIngressV4v0Group"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tmnxQosSapEgressV5v0Group"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tmnxQosNetworkV5v0Group"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tmnxQosSlopeGroup"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tmnxQosSchedulerV5v0Group"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tmnxQosAtmTdpV5v0Group"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tmnxQosQueueV4v0Group"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tmnxQosSapIpv6FilterR4r0Group"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxQos7750V5v0Compliance = tmnxQos7750V5v0Compliance.setStatus('obsolete')
tmnxQos7450V6v0Compliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 16, 1, 8)).setObjects(("ALCATEL-IND1-TIMETRA-QOS-MIB", "tmnxQosGlobalGroup"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tmnxQosDSCPGroup"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tmnxQosFCGroup"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tmnxQosSapIngressV6v0Group"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tmnxQosSapEgressV6v0Group"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tmnxQosNetworkV6v0Group"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tmnxQosSlopeGroup"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tmnxQosSchedulerV5v0Group"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tmnxQosQueueV4v0Group"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tmnxQosFrameBasedV6v0Group"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tmnxQosNamedPoolPolicyV6v0Group"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxQos7450V6v0Compliance = tmnxQos7450V6v0Compliance.setStatus('current')
tmnxQos7750V6v0Compliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 16, 1, 9)).setObjects(("ALCATEL-IND1-TIMETRA-QOS-MIB", "tmnxQosGlobalGroup"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tmnxQosDSCPGroup"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tmnxQosFCGroup"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tmnxQosSapIngressV6v0Group"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tmnxQosSapEgressV6v0Group"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tmnxQosNetworkV6v0Group"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tmnxQosSlopeGroup"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tmnxQosSchedulerV5v0Group"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tmnxQosAtmTdpV5v0Group"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tmnxQosQueueV4v0Group"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tmnxQosSapIpv6FilterR4r0Group"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tmnxQosFrameBasedV6v0Group"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tmnxQosNamedPoolPolicyV6v0Group"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxQos7750V6v0Compliance = tmnxQos7750V6v0Compliance.setStatus('current')
tmnxQosGlobalGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 16, 2, 1)).setObjects(("ALCATEL-IND1-TIMETRA-QOS-MIB", "tQosDomainLastChanged"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxQosGlobalGroup = tmnxQosGlobalGroup.setStatus('current')
tmnxQosDSCPGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 16, 2, 2)).setObjects(("ALCATEL-IND1-TIMETRA-QOS-MIB", "tDSCPNameRowStatus"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tDSCPNameStorageType"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tDSCPNameDscpValue"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tDSCPNameLastChanged"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tDSCPNameTableLastChanged"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxQosDSCPGroup = tmnxQosDSCPGroup.setStatus('current')
tmnxQosFCGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 16, 2, 3)).setObjects(("ALCATEL-IND1-TIMETRA-QOS-MIB", "tFCRowStatus"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tFCStorageType"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tFCValue"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tFCNameLastChanged"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tFCNameTableLastChanged"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxQosFCGroup = tmnxQosFCGroup.setStatus('current')
tmnxQosSlopeGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 16, 2, 7)).setObjects(("ALCATEL-IND1-TIMETRA-QOS-MIB", "tSlopeRowStatus"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tSlopeDescription"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tSlopeHiAdminStatus"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tSlopeHiStartAverage"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tSlopeHiMaxAverage"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tSlopeHiMaxProbability"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tSlopeLoAdminStatus"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tSlopeLoStartAverage"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tSlopeLoMaxAverage"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tSlopeLoMaxProbability"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tSlopeTimeAvgFactor"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tSlopeLastChanged"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tSlopePolicyTableLastChanged"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxQosSlopeGroup = tmnxQosSlopeGroup.setStatus('current')
tmnxQosSchedulerGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 16, 2, 8)).setObjects(("ALCATEL-IND1-TIMETRA-QOS-MIB", "tSchedulerPolicyRowStatus"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tSchedulerPolicyDescription"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tSchedulerPolicyLastChanged"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tSchedulerPolicyTableLastChanged"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tVirtualSchedulerRowStatus"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tVirtualSchedulerDescription"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tVirtualSchedulerParent"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tVirtualSchedulerLevel"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tVirtualSchedulerWeight"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tVirtualSchedulerCIRLevel"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tVirtualSchedulerCIRWeight"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tVirtualSchedulerPIR"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tVirtualSchedulerCIR"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tVirtualSchedulerSummedCIR"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tVirtualSchedulerLastChanged"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tVirtualSchedulerTableLastChanged"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxQosSchedulerGroup = tmnxQosSchedulerGroup.setStatus('obsolete')
tQosObsoleteObjectsGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 16, 2, 10)).setObjects(("ALCATEL-IND1-TIMETRA-QOS-MIB", "tSapIngressQueueOperPIR"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tSapIngressQueueOperCIR"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tSapEgressQueueOperPIR"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tSapEgressQueueOperCIR"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tQosObsoleteObjectsGroup = tQosObsoleteObjectsGroup.setStatus('current')
tmnxQosSapEgressR2r1Group = ObjectGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 16, 2, 12)).setObjects(("ALCATEL-IND1-TIMETRA-QOS-MIB", "tSapEgressRowStatus"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tSapEgressScope"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tSapEgressDescription"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tSapEgressLastChanged"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tSapEgressTableLastChanged"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tSapEgressQueueRowStatus"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tSapEgressQueueParent"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tSapEgressQueueLevel"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tSapEgressQueueWeight"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tSapEgressQueueCIRLevel"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tSapEgressQueueCIRWeight"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tSapEgressQueueExpedite"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tSapEgressQueueCBS"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tSapEgressQueueMBS"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tSapEgressQueueHiPrioOnly"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tSapEgressQueueCIRAdaptation"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tSapEgressQueuePIRAdaptation"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tSapEgressQueueAdminPIR"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tSapEgressQueueAdminCIR"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tSapEgressQueueLastChanged"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tSapEgressQueueTableLastChanged"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tSapEgressFCRowStatus"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tSapEgressFCQueue"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tSapEgressFCDot1PValue"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tSapEgressFCLastChanged"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tSapEgressFCTableLastChanged"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxQosSapEgressR2r1Group = tmnxQosSapEgressR2r1Group.setStatus('obsolete')
tmnxQosNetworkR2r1Group = ObjectGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 16, 2, 13)).setObjects(("ALCATEL-IND1-TIMETRA-QOS-MIB", "tNetworkPolicyRowStatus"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tNetworkPolicyScope"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tNetworkPolicyDescription"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tNetworkPolicyIngressDefaultActionFC"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tNetworkPolicyIngressDefaultActionProfile"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tNetworkPolicyEgressRemark"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tNetworkPolicyLastChanged"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tNetworkPolicyIngressLerUseDscp"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tNetworkPolicyTableLastChanged"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tNetworkIngressDSCPRowStatus"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tNetworkIngressDSCPFC"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tNetworkIngressDSCPProfile"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tNetworkIngressDSCPLastChanged"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tNetworkIngressDSCPTableLastChanged"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tNetworkIngressDot1pRowStatus"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tNetworkIngressDot1pFC"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tNetworkIngressDot1pProfile"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tNetworkIngressDot1pLastChanged"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tNetworkIngressDot1pTableLastChanged"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tNetworkIngressLSPEXPRowStatus"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tNetworkIngressLSPEXPFC"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tNetworkIngressLSPEXPProfile"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tNetworkIngressLSPEXPLastChanged"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tNetworkIngressLSPEXPTableLastChanged"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tNetworkEgressFCDSCPInProfile"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tNetworkEgressFCDSCPOutProfile"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tNetworkEgressFCLspExpInProfile"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tNetworkEgressFCLspExpOutProfile"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tNetworkEgressFCDot1pInProfile"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tNetworkEgressFCDot1pOutProfile"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tNetworkEgressFCLastChanged"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tNetworkEgressFCTableLastChanged"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tNetworkQueuePolicyRowStatus"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tNetworkQueuePolicyDescription"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tNetworkQueuePolicyLastChanged"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tNetworkQueuePolicyTableLastChanged"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tNetworkQueueRowStatus"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tNetworkQueuePoolName"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tNetworkQueueParent"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tNetworkQueueLevel"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tNetworkQueueWeight"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tNetworkQueueCIRLevel"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tNetworkQueueCIRWeight"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tNetworkQueueMCast"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tNetworkQueueExpedite"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tNetworkQueueCIR"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tNetworkQueuePIR"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tNetworkQueueCBS"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tNetworkQueueMBS"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tNetworkQueueHiPrioOnly"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tNetworkQueueLastChanged"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tNetworkQueueTableLastChanged"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tNetworkQueueFCRowStatus"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tNetworkQueueFC"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tNetworkQueueFCMCast"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tNetworkQueueFCLastChanged"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tNetworkQueueFCTableLastChanged"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxQosNetworkR2r1Group = tmnxQosNetworkR2r1Group.setStatus('obsolete')
tmnxQosAtmTdpV3v0Group = ObjectGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 16, 2, 15)).setObjects(("ALCATEL-IND1-TIMETRA-QOS-MIB", "tAtmTdpSir"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tAtmTdpPir"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tAtmTdpMbs"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tAtmTdpMir"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tAtmTdpShaping"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tAtmTdpServCat"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tAtmTdpLastChanged"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tAtmTdpDescription"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tAtmTdpRowStatus"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tAtmTdpDescrType"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tAtmTdpCdvt"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tAtmTdpPolicing"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tAtmTdpIndexNext"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tAtmTdpsMaxSupported"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tAtmTdpsCurrentlyConfigured"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tAtmTdpTableLastChanged"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxQosAtmTdpV3v0Group = tmnxQosAtmTdpV3v0Group.setStatus('obsolete')
tmnxQosSapIpv6FilterR4r0Group = ObjectGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 16, 2, 16)).setObjects(("ALCATEL-IND1-TIMETRA-QOS-MIB", "tSapIngressIPv6CriteriaRowStatus"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tSapIngressIPv6CriteriaDescription"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tSapIngressIPv6CriteriaActionFC"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tSapIngressIPv6CriteriaActionPriority"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tSapIngressIPv6CriteriaSourceIpAddr"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tSapIngressIPv6CriteriaSourceIpMask"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tSapIngressIPv6CriteriaDestIpAddr"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tSapIngressIPv6CriteriaDestIpMask"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tSapIngressIPv6CriteriaNextHeader"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tSapIngressIPv6CriteriaSourcePortValue1"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tSapIngressIPv6CriteriaSourcePortValue2"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tSapIngressIPv6CriteriaSourcePortOperator"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tSapIngressIPv6CriteriaDestPortValue1"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tSapIngressIPv6CriteriaDestPortValue2"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tSapIngressIPv6CriteriaDestPortOperator"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tSapIngressIPv6CriteriaDSCP"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tSapIngressIPv6CriteriaLastChanged"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tSapIngressIPv6CriteriaTableLastChanged"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxQosSapIpv6FilterR4r0Group = tmnxQosSapIpv6FilterR4r0Group.setStatus('current')
tmnxQosQueueV4v0Group = ObjectGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 16, 2, 18)).setObjects(("ALCATEL-IND1-TIMETRA-QOS-MIB", "tSharedQueuePolicyRowStatus"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tSharedQueuePolicyDescription"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tSharedQueuePolicyLastChanged"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tSharedQueuePolicyTableLastChanged"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tSharedQueueRowStatus"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tSharedQueuePoolName"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tSharedQueueParent"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tSharedQueueLevel"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tSharedQueueWeight"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tSharedQueueCIRLevel"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tSharedQueueCIRWeight"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tSharedQueueExpedite"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tSharedQueueCIR"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tSharedQueuePIR"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tSharedQueueCBS"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tSharedQueueMBS"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tSharedQueueHiPrioOnly"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tSharedQueueLastChanged"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tSharedQueueIsMultipoint"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tSharedQueueTableLastChanged"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tSharedQueueFCRowStatus"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tSharedQueueFCQueue"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tSharedQueueFCLastChanged"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tSharedQueueFCTableLastChanged"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tSharedQueueFCMCastQueue"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tSharedQueueFCBCastQueue"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tSharedQueueFCUnknownQueue"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxQosQueueV4v0Group = tmnxQosQueueV4v0Group.setStatus('current')
tmnxQosSapIngressV4v0Group = ObjectGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 16, 2, 19)).setObjects(("ALCATEL-IND1-TIMETRA-QOS-MIB", "tSapIngressRowStatus"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tSapIngressScope"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tSapIngressDescription"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tSapIngressDefaultFC"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tSapIngressDefaultFCPriority"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tSapIngressMatchCriteria"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tSapIngressLastChanged"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tSapIngressTableLastChanged"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tSapIngressQueueRowStatus"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tSapIngressQueueParent"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tSapIngressQueueLevel"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tSapIngressQueueWeight"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tSapIngressQueueCIRLevel"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tSapIngressQueueCIRWeight"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tSapIngressQueueMCast"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tSapIngressQueueExpedite"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tSapIngressQueueCBS"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tSapIngressQueueMBS"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tSapIngressQueueHiPrioOnly"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tSapIngressQueueCIRAdaptation"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tSapIngressQueuePIRAdaptation"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tSapIngressQueueAdminPIR"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tSapIngressQueueAdminCIR"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tSapIngressQueueLastChanged"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tSapIngressQueueMode"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tSapIngressQueueTableLastChanged"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tSapIngressQueuePoliced"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tSapIngressDSCPRowStatus"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tSapIngressDSCPFC"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tSapIngressDSCPPriority"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tSapIngressDSCPLastChanged"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tSapIngressDSCPTableLastChanged"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tSapIngressDot1pRowStatus"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tSapIngressDot1pFC"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tSapIngressDot1pPriority"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tSapIngressDot1pLastChanged"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tSapIngressDot1pTableLastChanged"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tSapIngressIPCriteriaRowStatus"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tSapIngressIPCriteriaDescription"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tSapIngressIPCriteriaActionFC"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tSapIngressIPCriteriaActionPriority"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tSapIngressIPCriteriaSourceIpAddr"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tSapIngressIPCriteriaSourceIpMask"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tSapIngressIPCriteriaDestIpAddr"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tSapIngressIPCriteriaDestIpMask"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tSapIngressIPCriteriaProtocol"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tSapIngressIPCriteriaSourcePortValue1"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tSapIngressIPCriteriaSourcePortValue2"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tSapIngressIPCriteriaSourcePortOperator"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tSapIngressIPCriteriaDestPortValue1"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tSapIngressIPCriteriaDestPortValue2"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tSapIngressIPCriteriaDestPortOperator"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tSapIngressIPCriteriaDSCP"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tSapIngressIPCriteriaFragment"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tSapIngressIPCriteriaLastChanged"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tSapIngressIPCriteriaTableLastChanged"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tSapIngressMacCriteriaRowStatus"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tSapIngressMacCriteriaDescription"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tSapIngressMacCriteriaActionFC"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tSapIngressMacCriteriaActionPriority"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tSapIngressMacCriteriaFrameType"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tSapIngressMacCriteriaSrcMacAddr"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tSapIngressMacCriteriaSrcMacMask"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tSapIngressMacCriteriaDstMacAddr"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tSapIngressMacCriteriaDstMacMask"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tSapIngressMacCriteriaDot1PValue"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tSapIngressMacCriteriaDot1PMask"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tSapIngressMacCriteriaEthernetType"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tSapIngressMacCriteriaDSAP"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tSapIngressMacCriteriaDSAPMask"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tSapIngressMacCriteriaSSAP"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tSapIngressMacCriteriaSSAPMask"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tSapIngressMacCriteriaSnapPid"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tSapIngressMacCriteriaSnapOui"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tSapIngressMacCriteriaLastChanged"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tSapIngressMacCriteriaTableLastChanged"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tSapIngressFCRowStatus"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tSapIngressFCQueue"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tSapIngressFCMCastQueue"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tSapIngressFCBCastQueue"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tSapIngressFCUnknownQueue"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tSapIngressFCLastChanged"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tSapIngressFCInProfRemark"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tSapIngressFCInProfDscp"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tSapIngressFCInProfPrec"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tSapIngressFCOutProfRemark"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tSapIngressFCOutProfDscp"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tSapIngressFCOutProfPrec"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tSapIngressFCProfile"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tSapIngressFCTableLastChanged"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tSapIngressPrecRowStatus"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tSapIngressPrecFC"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tSapIngressPrecFCPriority"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tSapIngressPrecLastChanged"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tSapIngressPrecTableLastChanged"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxQosSapIngressV4v0Group = tmnxQosSapIngressV4v0Group.setStatus('obsolete')
tmnxQosSchedulerV5v0Group = ObjectGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 16, 2, 20)).setObjects(("ALCATEL-IND1-TIMETRA-QOS-MIB", "tSchedulerPolicyRowStatus"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tSchedulerPolicyDescription"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tSchedulerPolicyLastChanged"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tSchedulerPolicyTableLastChanged"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tVirtualSchedulerRowStatus"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tVirtualSchedulerDescription"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tVirtualSchedulerParent"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tVirtualSchedulerLevel"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tVirtualSchedulerWeight"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tVirtualSchedulerCIRLevel"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tVirtualSchedulerCIRWeight"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tVirtualSchedulerPIR"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tVirtualSchedulerCIR"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tVirtualSchedulerSummedCIR"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tVirtualSchedulerLastChanged"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tVirtualSchedulerUsePortParent"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tVirtualSchedulerPortLvl"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tVirtualSchedulerPortWght"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tVirtualSchedulerPortCIRLvl"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tVirtualSchedulerPortCIRWght"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tVirtualSchedulerTableLastChanged"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tPortSchedulerPlcyRowStatus"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tPortSchedulerPlcyDescription"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tPortSchedulerPlcyLastChanged"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tPortSchedulerPlcyMaxRate"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tPortSchedulerPlcyLvl1PIR"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tPortSchedulerPlcyLvl1CIR"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tPortSchedulerPlcyLvl2PIR"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tPortSchedulerPlcyLvl2CIR"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tPortSchedulerPlcyLvl3PIR"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tPortSchedulerPlcyLvl3CIR"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tPortSchedulerPlcyLvl4PIR"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tPortSchedulerPlcyLvl4CIR"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tPortSchedulerPlcyLvl5PIR"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tPortSchedulerPlcyLvl5CIR"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tPortSchedulerPlcyLvl6PIR"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tPortSchedulerPlcyLvl6CIR"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tPortSchedulerPlcyLvl7PIR"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tPortSchedulerPlcyLvl7CIR"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tPortSchedulerPlcyLvl8PIR"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tPortSchedulerPlcyLvl8CIR"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tPortSchedulerPlcyOrphanLvl"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tPortSchedulerPlcyOrphanWeight"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tPortSchedulerPlcyOrphanCIRLvl"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tPortSchedulerPlcyOrphanCIRWght"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxQosSchedulerV5v0Group = tmnxQosSchedulerV5v0Group.setStatus('current')
tmnxQosSapEgressV5v0Group = ObjectGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 16, 2, 21)).setObjects(("ALCATEL-IND1-TIMETRA-QOS-MIB", "tSapEgressRowStatus"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tSapEgressScope"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tSapEgressDescription"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tSapEgressLastChanged"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tSapEgressTableLastChanged"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tSapEgressQueueRowStatus"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tSapEgressQueueParent"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tSapEgressQueueLevel"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tSapEgressQueueWeight"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tSapEgressQueueCIRLevel"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tSapEgressQueueCIRWeight"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tSapEgressQueueExpedite"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tSapEgressQueueCBS"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tSapEgressQueueMBS"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tSapEgressQueueHiPrioOnly"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tSapEgressQueueCIRAdaptation"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tSapEgressQueuePIRAdaptation"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tSapEgressQueueAdminPIR"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tSapEgressQueueAdminCIR"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tSapEgressQueueLastChanged"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tSapEgressQueueTableLastChanged"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tSapEgressFCRowStatus"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tSapEgressFCQueue"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tSapEgressFCDot1PValue"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tSapEgressFCLastChanged"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tSapEgressFCTableLastChanged"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tSapEgressQueueUsePortParent"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tSapEgressQueuePortLvl"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tSapEgressQueuePortWght"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tSapEgressQueuePortCIRLvl"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tSapEgressQueuePortCIRWght"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tSapEgressQueuePortAvgOverhead"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxQosSapEgressV5v0Group = tmnxQosSapEgressV5v0Group.setStatus('obsolete')
tmnxQosNetworkV5v0Group = ObjectGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 16, 2, 22)).setObjects(("ALCATEL-IND1-TIMETRA-QOS-MIB", "tNetworkPolicyRowStatus"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tNetworkPolicyScope"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tNetworkPolicyDescription"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tNetworkPolicyIngressDefaultActionFC"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tNetworkPolicyIngressDefaultActionProfile"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tNetworkPolicyEgressRemark"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tNetworkPolicyLastChanged"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tNetworkPolicyIngressLerUseDscp"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tNetworkPolicyTableLastChanged"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tNetworkIngressDSCPRowStatus"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tNetworkIngressDSCPFC"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tNetworkIngressDSCPProfile"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tNetworkIngressDSCPLastChanged"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tNetworkIngressDSCPTableLastChanged"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tNetworkIngressDot1pRowStatus"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tNetworkIngressDot1pFC"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tNetworkIngressDot1pProfile"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tNetworkIngressDot1pLastChanged"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tNetworkIngressDot1pTableLastChanged"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tNetworkIngressLSPEXPRowStatus"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tNetworkIngressLSPEXPFC"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tNetworkIngressLSPEXPProfile"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tNetworkIngressLSPEXPLastChanged"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tNetworkIngressLSPEXPTableLastChanged"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tNetworkEgressFCDSCPInProfile"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tNetworkEgressFCDSCPOutProfile"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tNetworkEgressFCLspExpInProfile"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tNetworkEgressFCLspExpOutProfile"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tNetworkEgressFCDot1pInProfile"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tNetworkEgressFCDot1pOutProfile"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tNetworkEgressFCLastChanged"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tNetworkEgressFCTableLastChanged"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tNetworkQueuePolicyRowStatus"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tNetworkQueuePolicyDescription"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tNetworkQueuePolicyLastChanged"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tNetworkQueuePolicyTableLastChanged"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tNetworkQueueRowStatus"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tNetworkQueuePoolName"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tNetworkQueueParent"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tNetworkQueueLevel"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tNetworkQueueWeight"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tNetworkQueueCIRLevel"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tNetworkQueueCIRWeight"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tNetworkQueueMCast"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tNetworkQueueExpedite"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tNetworkQueueCIR"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tNetworkQueuePIR"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tNetworkQueueCBS"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tNetworkQueueMBS"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tNetworkQueueHiPrioOnly"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tNetworkQueueLastChanged"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tNetworkQueueUsePortParent"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tNetworkQueuePortLvl"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tNetworkQueuePortWght"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tNetworkQueuePortCIRLvl"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tNetworkQueuePortCIRWght"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tNetworkQueuePortAvgOverhead"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tNetworkQueuePIRAdaptation"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tNetworkQueueCIRAdaptation"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tNetworkQueueTableLastChanged"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tNetworkQueueFCRowStatus"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tNetworkQueueFC"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tNetworkQueueFCMCast"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tNetworkQueueFCLastChanged"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tNetworkQueueFCTableLastChanged"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxQosNetworkV5v0Group = tmnxQosNetworkV5v0Group.setStatus('obsolete')
tmnxQosAtmTdpV5v0Group = ObjectGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 16, 2, 24)).setObjects(("ALCATEL-IND1-TIMETRA-QOS-MIB", "tAtmTdpSir"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tAtmTdpPir"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tAtmTdpMbs"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tAtmTdpMir"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tAtmTdpShaping"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tAtmTdpServCat"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tAtmTdpLastChanged"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tAtmTdpDescription"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tAtmTdpRowStatus"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tAtmTdpDescrType"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tAtmTdpCdvt"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tAtmTdpPolicing"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tAtmTdpCLPTagging"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tAtmTdpIndexNext"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tAtmTdpsMaxSupported"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tAtmTdpsCurrentlyConfigured"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tAtmTdpTableLastChanged"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxQosAtmTdpV5v0Group = tmnxQosAtmTdpV5v0Group.setStatus('current')
tmnxQosSapIngressV6v0Group = ObjectGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 16, 2, 25)).setObjects(("ALCATEL-IND1-TIMETRA-QOS-MIB", "tSapIngressRowStatus"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tSapIngressScope"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tSapIngressDescription"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tSapIngressDefaultFC"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tSapIngressDefaultFCPriority"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tSapIngressMatchCriteria"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tSapIngressLastChanged"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tSapIngressTableLastChanged"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tSapIngressQueueRowStatus"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tSapIngressQueueParent"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tSapIngressQueueLevel"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tSapIngressQueueWeight"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tSapIngressQueueCIRLevel"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tSapIngressQueueCIRWeight"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tSapIngressQueueMCast"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tSapIngressQueueExpedite"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tSapIngressQueueCBS"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tSapIngressQueueMBS"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tSapIngressQueueHiPrioOnly"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tSapIngressQueueCIRAdaptation"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tSapIngressQueuePIRAdaptation"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tSapIngressQueueAdminPIR"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tSapIngressQueueAdminCIR"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tSapIngressQueueLastChanged"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tSapIngressQueueMode"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tSapIngressQueuePoolName"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tSapIngressQueueTableLastChanged"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tSapIngressQueuePoliced"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tSapIngressDSCPRowStatus"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tSapIngressDSCPFC"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tSapIngressDSCPPriority"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tSapIngressDSCPLastChanged"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tSapIngressDSCPTableLastChanged"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tSapIngressDot1pRowStatus"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tSapIngressDot1pFC"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tSapIngressDot1pPriority"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tSapIngressDot1pLastChanged"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tSapIngressDot1pTableLastChanged"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tSapIngressIPCriteriaRowStatus"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tSapIngressIPCriteriaDescription"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tSapIngressIPCriteriaActionFC"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tSapIngressIPCriteriaActionPriority"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tSapIngressIPCriteriaSourceIpAddr"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tSapIngressIPCriteriaSourceIpMask"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tSapIngressIPCriteriaDestIpAddr"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tSapIngressIPCriteriaDestIpMask"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tSapIngressIPCriteriaProtocol"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tSapIngressIPCriteriaSourcePortValue1"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tSapIngressIPCriteriaSourcePortValue2"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tSapIngressIPCriteriaSourcePortOperator"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tSapIngressIPCriteriaDestPortValue1"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tSapIngressIPCriteriaDestPortValue2"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tSapIngressIPCriteriaDestPortOperator"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tSapIngressIPCriteriaDSCP"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tSapIngressIPCriteriaFragment"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tSapIngressIPCriteriaLastChanged"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tSapIngressIPCriteriaTableLastChanged"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tSapIngressMacCriteriaRowStatus"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tSapIngressMacCriteriaDescription"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tSapIngressMacCriteriaActionFC"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tSapIngressMacCriteriaActionPriority"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tSapIngressMacCriteriaFrameType"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tSapIngressMacCriteriaSrcMacAddr"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tSapIngressMacCriteriaSrcMacMask"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tSapIngressMacCriteriaDstMacAddr"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tSapIngressMacCriteriaDstMacMask"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tSapIngressMacCriteriaDot1PValue"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tSapIngressMacCriteriaDot1PMask"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tSapIngressMacCriteriaEthernetType"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tSapIngressMacCriteriaDSAP"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tSapIngressMacCriteriaDSAPMask"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tSapIngressMacCriteriaSSAP"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tSapIngressMacCriteriaSSAPMask"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tSapIngressMacCriteriaSnapPid"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tSapIngressMacCriteriaSnapOui"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tSapIngressMacCriteriaLastChanged"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tSapIngressMacCriteriaTableLastChanged"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tSapIngressFCRowStatus"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tSapIngressFCQueue"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tSapIngressFCMCastQueue"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tSapIngressFCBCastQueue"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tSapIngressFCUnknownQueue"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tSapIngressFCLastChanged"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tSapIngressFCInProfRemark"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tSapIngressFCInProfDscp"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tSapIngressFCInProfPrec"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tSapIngressFCOutProfRemark"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tSapIngressFCOutProfDscp"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tSapIngressFCOutProfPrec"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tSapIngressFCProfile"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tSapIngressFCTableLastChanged"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tSapIngressPrecRowStatus"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tSapIngressPrecFC"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tSapIngressPrecFCPriority"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tSapIngressPrecLastChanged"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tSapIngressPrecTableLastChanged"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tSapIngressFCDE1OutOfProfile"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxQosSapIngressV6v0Group = tmnxQosSapIngressV6v0Group.setStatus('current')
tmnxQosSapEgressV6v0Group = ObjectGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 16, 2, 26)).setObjects(("ALCATEL-IND1-TIMETRA-QOS-MIB", "tSapEgressRowStatus"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tSapEgressScope"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tSapEgressDescription"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tSapEgressLastChanged"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tSapEgressTableLastChanged"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tSapEgressQueueRowStatus"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tSapEgressQueueParent"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tSapEgressQueueLevel"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tSapEgressQueueWeight"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tSapEgressQueueCIRLevel"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tSapEgressQueueCIRWeight"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tSapEgressQueueExpedite"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tSapEgressQueueCBS"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tSapEgressQueueMBS"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tSapEgressQueueHiPrioOnly"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tSapEgressQueueCIRAdaptation"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tSapEgressQueuePIRAdaptation"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tSapEgressQueueAdminPIR"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tSapEgressQueueAdminCIR"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tSapEgressQueueLastChanged"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tSapEgressQueueTableLastChanged"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tSapEgressFCRowStatus"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tSapEgressFCQueue"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tSapEgressFCLastChanged"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tSapEgressFCTableLastChanged"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tSapEgressFCDot1PInProfile"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tSapEgressFCDot1POutProfile"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tSapEgressFCForceDEValue"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tSapEgressFCDEMark"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tSapEgressFCInProfDscp"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tSapEgressFCOutProfDscp"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tSapEgressFCInProfPrec"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tSapEgressFCOutProfPrec"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tSapEgressQueueUsePortParent"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tSapEgressQueuePortLvl"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tSapEgressQueuePortWght"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tSapEgressQueuePortCIRLvl"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tSapEgressQueuePortCIRWght"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tSapEgressQueuePortAvgOverhead"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tSapEgressQueuePoolName"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxQosSapEgressV6v0Group = tmnxQosSapEgressV6v0Group.setStatus('current')
tmnxQosNetworkV6v0Group = ObjectGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 16, 2, 27)).setObjects(("ALCATEL-IND1-TIMETRA-QOS-MIB", "tNetworkPolicyRowStatus"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tNetworkPolicyScope"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tNetworkPolicyDescription"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tNetworkPolicyIngressDefaultActionFC"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tNetworkPolicyIngressDefaultActionProfile"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tNetworkPolicyEgressRemark"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tNetworkPolicyLastChanged"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tNetworkPolicyIngressLerUseDscp"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tNetworkPolicyTableLastChanged"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tNetworkIngressDSCPRowStatus"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tNetworkIngressDSCPFC"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tNetworkIngressDSCPProfile"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tNetworkIngressDSCPLastChanged"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tNetworkIngressDSCPTableLastChanged"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tNetworkIngressDot1pRowStatus"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tNetworkIngressDot1pFC"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tNetworkIngressDot1pProfile"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tNetworkIngressDot1pLastChanged"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tNetworkIngressDot1pTableLastChanged"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tNetworkIngressLSPEXPRowStatus"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tNetworkIngressLSPEXPFC"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tNetworkIngressLSPEXPProfile"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tNetworkIngressLSPEXPLastChanged"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tNetworkIngressLSPEXPTableLastChanged"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tNetworkEgressFCDSCPInProfile"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tNetworkEgressFCDSCPOutProfile"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tNetworkEgressFCLspExpInProfile"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tNetworkEgressFCLspExpOutProfile"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tNetworkEgressFCDot1pInProfile"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tNetworkEgressFCDot1pOutProfile"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tNetworkEgressFCLastChanged"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tNetworkEgressFCForceDEValue"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tNetworkEgressFCDEMark"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tNetworkEgressFCTableLastChanged"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tNetworkQueuePolicyRowStatus"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tNetworkQueuePolicyDescription"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tNetworkQueuePolicyLastChanged"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tNetworkQueuePolicyTableLastChanged"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tNetworkQueueRowStatus"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tNetworkQueuePoolName"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tNetworkQueueParent"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tNetworkQueueLevel"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tNetworkQueueWeight"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tNetworkQueueCIRLevel"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tNetworkQueueCIRWeight"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tNetworkQueueMCast"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tNetworkQueueExpedite"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tNetworkQueueCIR"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tNetworkQueuePIR"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tNetworkQueueCBS"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tNetworkQueueMBS"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tNetworkQueueHiPrioOnly"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tNetworkQueueLastChanged"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tNetworkQueueUsePortParent"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tNetworkQueuePortLvl"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tNetworkQueuePortWght"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tNetworkQueuePortCIRLvl"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tNetworkQueuePortCIRWght"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tNetworkQueuePortAvgOverhead"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tNetworkQueuePIRAdaptation"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tNetworkQueueCIRAdaptation"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tNetworkQueueTableLastChanged"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tNetworkQueueFCRowStatus"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tNetworkQueueFC"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tNetworkQueueFCMCast"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tNetworkQueueFCLastChanged"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tNetworkQueueFCTableLastChanged"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxQosNetworkV6v0Group = tmnxQosNetworkV6v0Group.setStatus('current')
tmnxQosFrameBasedV6v0Group = ObjectGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 16, 2, 28)).setObjects(("ALCATEL-IND1-TIMETRA-QOS-MIB", "tSchedulerPolicyFrameBasedAccnt"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxQosFrameBasedV6v0Group = tmnxQosFrameBasedV6v0Group.setStatus('current')
tmnxQosObsoletedV6v0Group = ObjectGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 16, 2, 29)).setObjects(("ALCATEL-IND1-TIMETRA-QOS-MIB", "tSapEgressFCDot1PValue"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxQosObsoletedV6v0Group = tmnxQosObsoletedV6v0Group.setStatus('current')
tmnxQosNamedPoolPolicyV6v0Group = ObjectGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 16, 2, 30)).setObjects(("ALCATEL-IND1-TIMETRA-QOS-MIB", "tNamedPoolPolicyTableLastChanged"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tNamedPoolPolicyRowStatus"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tNamedPoolPolicyLastChanged"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tNamedPoolPolicyDescription"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tNamedPoolPolicyQ1DefaultWeight"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tNamedPoolPolicyQ1MdaWeight"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tNamedPoolPolicyQ1PortWeight"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tQ1NamedPoolTableLastChanged"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tQ1NamedPoolRowStatus"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tQ1NamedPoolLastChanged"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tQ1NamedPoolDescription"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tQ1NamedPoolNetworkAllocWeight"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tQ1NamedPoolAccessAllocWeight"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tQ1NamedPoolSlopePolicy"), ("ALCATEL-IND1-TIMETRA-QOS-MIB", "tQ1NamedPoolReservedCbs"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxQosNamedPoolPolicyV6v0Group = tmnxQosNamedPoolPolicyV6v0Group.setStatus('current')
mibBuilder.exportSymbols("ALCATEL-IND1-TIMETRA-QOS-MIB", tSapEgressFCQueue=tSapEgressFCQueue, tSharedQueueFCMCastQueue=tSharedQueueFCMCastQueue, tAtmTdpLastChanged=tAtmTdpLastChanged, tSapEgressQueueHiPrioOnly=tSapEgressQueueHiPrioOnly, tSchedulerPolicyTable=tSchedulerPolicyTable, tNetworkQueuePolicyTableLastChanged=tNetworkQueuePolicyTableLastChanged, tmnxQosAtmTdpV3v0Group=tmnxQosAtmTdpV3v0Group, tSapIngressPrecValue=tSapIngressPrecValue, tFCObjects=tFCObjects, tSapIngressIPCriteriaDestPortValue2=tSapIngressIPCriteriaDestPortValue2, tQ1NamedPoolTableLastChanged=tQ1NamedPoolTableLastChanged, tSharedQueueObjects=tSharedQueueObjects, tmnxQosFCGroup=tmnxQosFCGroup, tNetworkPolicyLastChanged=tNetworkPolicyLastChanged, tSapEgressQueuePortLvl=tSapEgressQueuePortLvl, tQosTimeStampObjects=tQosTimeStampObjects, tNetworkEgressFCDSCPInProfile=tNetworkEgressFCDSCPInProfile, tSapIngressFCInProfDscp=tSapIngressFCInProfDscp, tSlopePolicyTable=tSlopePolicyTable, tNetworkQueueFCMCast=tNetworkQueueFCMCast, tSapIngressFCUnknownQueue=tSapIngressFCUnknownQueue, tVirtualSchedulerDescription=tVirtualSchedulerDescription, tQ1NamedPoolLastChanged=tQ1NamedPoolLastChanged, tSharedQueueCIR=tSharedQueueCIR, tSapIngressQueueMode=tSapIngressQueueMode, tNetworkQueuePortAvgOverhead=tNetworkQueuePortAvgOverhead, tSharedQueuePolicy=tSharedQueuePolicy, tSapEgressFCForceDEValue=tSapEgressFCForceDEValue, TPriorityOrDefault=TPriorityOrDefault, tPoolObjects=tPoolObjects, tSapIngressDSCPTable=tSapIngressDSCPTable, tSapIngressIPv6CriteriaSourcePortValue2=tSapIngressIPv6CriteriaSourcePortValue2, tSapIngressIPv6CriteriaLastChanged=tSapIngressIPv6CriteriaLastChanged, tSapIngressIPCriteriaActionPriority=tSapIngressIPCriteriaActionPriority, tNetworkIngressDSCPLastChanged=tNetworkIngressDSCPLastChanged, tSharedQueuePoolName=tSharedQueuePoolName, TBurstHundredthsOfPercent=TBurstHundredthsOfPercent, tSapIngressTableLastChanged=tSapIngressTableLastChanged, TPrecValueOrNone=TPrecValueOrNone, tNetworkEgressFCName=tNetworkEgressFCName, tSchedulerPolicyRowStatus=tSchedulerPolicyRowStatus, tSapIngressIPv6CriteriaSourceIpMask=tSapIngressIPv6CriteriaSourceIpMask, tNetworkQueuePortCIRWght=tNetworkQueuePortCIRWght, tVirtualSchedulerTable=tVirtualSchedulerTable, tQosObsoleteObjectsGroup=tQosObsoleteObjectsGroup, tSharedQueuePolicyEntry=tSharedQueuePolicyEntry, tNetworkPolicyIngressDefaultActionFC=tNetworkPolicyIngressDefaultActionFC, tPortSchedulerPlcyLvl8PIR=tPortSchedulerPlcyLvl8PIR, tQ1NamedPoolName=tQ1NamedPoolName, tNetworkQueueRowStatus=tNetworkQueueRowStatus, tNetworkQueueExpedite=tNetworkQueueExpedite, tNamedPoolPolicyQ1PortWeight=tNamedPoolPolicyQ1PortWeight, TMatchCriteria=TMatchCriteria, tSharedQueueId=tSharedQueueId, tNetworkEgressFCEntry=tNetworkEgressFCEntry, tSapIngressQueueAdminCIR=tSapIngressQueueAdminCIR, tSapIngressIPCriteriaEntry=tSapIngressIPCriteriaEntry, tVirtualSchedulerCIRWeight=tVirtualSchedulerCIRWeight, tSapIngressIPv6CriteriaSourceIpAddr=tSapIngressIPv6CriteriaSourceIpAddr, tPortSchedulerPlcyLvl8CIR=tPortSchedulerPlcyLvl8CIR, tSapIngressQueueMBS=tSapIngressQueueMBS, tSapIngressQueueTableLastChanged=tSapIngressQueueTableLastChanged, tSapEgressIndex=tSapEgressIndex, tPortSchedulerPlcyLvl4CIR=tPortSchedulerPlcyLvl4CIR, tSharedQueueCBS=tSharedQueueCBS, tNetworkQueueFCLastChanged=tNetworkQueueFCLastChanged, tSharedQueuePolicyLastChanged=tSharedQueuePolicyLastChanged, tNetworkQueueFCName=tNetworkQueueFCName, tSapIngressMacCriteriaLastChanged=tSapIngressMacCriteriaLastChanged, tAtmTdpMir=tAtmTdpMir, tSapEgressQueueTableLastChanged=tSapEgressQueueTableLastChanged, tNetworkEgressFCDot1pOutProfile=tNetworkEgressFCDot1pOutProfile, tSharedQueueLastChanged=tSharedQueueLastChanged, tSapIngressMacCriteriaSrcMacMask=tSapIngressMacCriteriaSrcMacMask, tPortSchedulerPlcyDescription=tPortSchedulerPlcyDescription, tNamedPoolPolicyTable=tNamedPoolPolicyTable, tSapIngressTable=tSapIngressTable, TProfileOrNone=TProfileOrNone, tNamedPoolPolicyRowStatus=tNamedPoolPolicyRowStatus, tSapIngressFCMCastQueue=tSapIngressFCMCastQueue, tSapEgressQueueCIRLevel=tSapEgressQueueCIRLevel, tSapEgressFCInProfDscp=tSapEgressFCInProfDscp, tNetworkIngressDot1pTableLastChanged=tNetworkIngressDot1pTableLastChanged, tSapIngressIPCriteriaFragment=tSapIngressIPCriteriaFragment, tNetworkQueueFCEntry=tNetworkQueueFCEntry, tFCNameLastChanged=tFCNameLastChanged, tNetworkPolicyEgressRemark=tNetworkPolicyEgressRemark, tNetworkQueueMCast=tNetworkQueueMCast, tSlopeHiMaxProbability=tSlopeHiMaxProbability, tNetworkQueueHiPrioOnly=tNetworkQueueHiPrioOnly, tNetworkQueuePolicy=tNetworkQueuePolicy, tSlopeRowStatus=tSlopeRowStatus, tDSCPNameTableLastChanged=tDSCPNameTableLastChanged, tSlopePolicy=tSlopePolicy, tNetworkIngressLSPEXPEntry=tNetworkIngressLSPEXPEntry, tSlopePolicyEntry=tSlopePolicyEntry, tmnxQosSapIngressV6v0Group=tmnxQosSapIngressV6v0Group, tNetworkIngressLSPEXPLastChanged=tNetworkIngressLSPEXPLastChanged, tQosDomainLastChanged=tQosDomainLastChanged, tFCRowStatus=tFCRowStatus, tAtmTdpPolicing=tAtmTdpPolicing, tDSCPNameRowStatus=tDSCPNameRowStatus, tSharedQueueTableLastChanged=tSharedQueueTableLastChanged, tSapIngressIPCriteriaSourceIpAddr=tSapIngressIPCriteriaSourceIpAddr, tNetworkEgressFCForceDEValue=tNetworkEgressFCForceDEValue, tmnxQosCompliances=tmnxQosCompliances, tSapEgressQueuePortCIRLvl=tSapEgressQueuePortCIRLvl, tSapIngressQueueParent=tSapIngressQueueParent, tDSCPNameEntry=tDSCPNameEntry, tSapEgressQueueCIRWeight=tSapEgressQueueCIRWeight, tPortSchedulerPlcyLvl2CIR=tPortSchedulerPlcyLvl2CIR, tAtmTdpShaping=tAtmTdpShaping, tmnxQosGlobalGroup=tmnxQosGlobalGroup, tSapIngressQueueCBS=tSapIngressQueueCBS, tSchedulerPolicyEntry=tSchedulerPolicyEntry, tPortSchedulerPlcyOrphanCIRWght=tPortSchedulerPlcyOrphanCIRWght, tPortSchedulerPlcyRowStatus=tPortSchedulerPlcyRowStatus, tSapEgressTable=tSapEgressTable, tNetworkQueueLastChanged=tNetworkQueueLastChanged, TEntryId=TEntryId, tSlopeLastChanged=tSlopeLastChanged, tDSCPName=tDSCPName, tPortSchedulerPlcyName=tPortSchedulerPlcyName, tQosNotifyPrefix=tQosNotifyPrefix, tSlopeLoAdminStatus=tSlopeLoAdminStatus, tNetworkEgressFCDEMark=tNetworkEgressFCDEMark, tPortSchedulerPlcyTable=tPortSchedulerPlcyTable, tSapEgressFCEntry=tSapEgressFCEntry, tSapEgressQueueCIRAdaptation=tSapEgressQueueCIRAdaptation, tNetworkQueuePortCIRLvl=tNetworkQueuePortCIRLvl, tAtmTdpEntry=tAtmTdpEntry, tFCValue=tFCValue, tSchedulerObjects=tSchedulerObjects, tmnxQosDSCPGroup=tmnxQosDSCPGroup, tSharedQueueLevel=tSharedQueueLevel, tSapIngressScope=tSapIngressScope, tSharedQueueFCEntry=tSharedQueueFCEntry, tmnxQos7450V4v0Compliance=tmnxQos7450V4v0Compliance, tmnxQosSapEgressV5v0Group=tmnxQosSapEgressV5v0Group, tmnxQosGroups=tmnxQosGroups, tNetworkQueueParent=tNetworkQueueParent, tNetworkQueueMBS=tNetworkQueueMBS, tSlopeHiStartAverage=tSlopeHiStartAverage, tNetworkQueuePIR=tNetworkQueuePIR, tNetworkPolicyEntry=tNetworkPolicyEntry, tmnxQosQueueV4v0Group=tmnxQosQueueV4v0Group, tSapEgressQueueMBS=tSapEgressQueueMBS, tSapIngressMacCriteriaRowStatus=tSapIngressMacCriteriaRowStatus, tVirtualSchedulerSummedCIR=tVirtualSchedulerSummedCIR, tSapIngressQueue=tSapIngressQueue, tVirtualSchedulerPIR=tVirtualSchedulerPIR, tSapIngressIPv6CriteriaDestPortValue2=tSapIngressIPv6CriteriaDestPortValue2, tSharedQueueFCLastChanged=tSharedQueueFCLastChanged, tSapEgressQueueCBS=tSapEgressQueueCBS, tPortSchedulerPlcyLvl2PIR=tPortSchedulerPlcyLvl2PIR, tNetworkQueuePoolName=tNetworkQueuePoolName, tSharedQueuePolicyTableLastChanged=tSharedQueuePolicyTableLastChanged, tQ1NamedPoolReservedCbs=tQ1NamedPoolReservedCbs, tDSCPNameLastChanged=tDSCPNameLastChanged, tSapEgressQueueLastChanged=tSapEgressQueueLastChanged, tSharedQueuePIR=tSharedQueuePIR, tSapIngressIPv6CriteriaRowStatus=tSapIngressIPv6CriteriaRowStatus, tPortSchedulerPlcyEntry=tPortSchedulerPlcyEntry, tSapEgressQueueLevel=tSapEgressQueueLevel, tAtmTdpTableLastChanged=tAtmTdpTableLastChanged, tNetworkQueueEntry=tNetworkQueueEntry, tSapIngressQueueOperCIR=tSapIngressQueueOperCIR, tFCName=tFCName, tSapEgressQueueParent=tSapEgressQueueParent, tQosNotifications=tQosNotifications, tSapEgressFCDEMark=tSapEgressFCDEMark, tVirtualSchedulerUsePortParent=tVirtualSchedulerUsePortParent, tQ1NamedPoolDescription=tQ1NamedPoolDescription, tSapEgressFCInProfPrec=tSapEgressFCInProfPrec, tNetworkQueueCIRLevel=tNetworkQueueCIRLevel, tNetworkQueueUsePortParent=tNetworkQueueUsePortParent, tNamedPoolPolicyName=tNamedPoolPolicyName, tSharedQueueParent=tSharedQueueParent, tSapIngressPrecTable=tSapIngressPrecTable, TRemarkType=TRemarkType, tSapEgressQueueWeight=tSapEgressQueueWeight, tSapEgressFCDot1PInProfile=tSapEgressFCDot1PInProfile, tSchedulerPolicyTableLastChanged=tSchedulerPolicyTableLastChanged, tSchedulerPolicyDescription=tSchedulerPolicyDescription, tNetworkIngressDot1pTable=tNetworkIngressDot1pTable, tSapEgressQueueTable=tSapEgressQueueTable, tSapIngressMacCriteriaDSAP=tSapIngressMacCriteriaDSAP, tSapIngressMacCriteriaTableLastChanged=tSapIngressMacCriteriaTableLastChanged, tNetworkIngressDSCPTableLastChanged=tNetworkIngressDSCPTableLastChanged, tSapIngressFCTableLastChanged=tSapIngressFCTableLastChanged, tAtmTdpDescrType=tAtmTdpDescrType, tSharedQueueTable=tSharedQueueTable, tNetworkPolicyIndex=tNetworkPolicyIndex, tNamedPoolPolicyDescription=tNamedPoolPolicyDescription, tSapIngressMacCriteriaDescription=tSapIngressMacCriteriaDescription, tSapIngressIPv6CriteriaDestPortValue1=tSapIngressIPv6CriteriaDestPortValue1, tSharedQueueMBS=tSharedQueueMBS, tPortSchedulerPlcyLvl1PIR=tPortSchedulerPlcyLvl1PIR, PYSNMP_MODULE_ID=timetraQosMIBModule, tVirtualSchedulerLevel=tVirtualSchedulerLevel, tSapIngressFCOutProfRemark=tSapIngressFCOutProfRemark, tPortSchedulerPlcyOrphanWeight=tPortSchedulerPlcyOrphanWeight, tSapIngressIPCriteriaDestIpAddr=tSapIngressIPCriteriaDestIpAddr, tNetworkIngressDot1pValue=tNetworkIngressDot1pValue, TLevelOrDefault=TLevelOrDefault, tSapIngressMatchCriteria=tSapIngressMatchCriteria, tSapIngressFCDE1OutOfProfile=tSapIngressFCDE1OutOfProfile, tSapEgressQueueEntry=tSapEgressQueueEntry, tNetworkQueueFC=tNetworkQueueFC, tSharedQueuePolicyTable=tSharedQueuePolicyTable, tNetworkQueuePortLvl=tNetworkQueuePortLvl, TItemMatch=TItemMatch, tQ1NamedPoolAccessAllocWeight=tQ1NamedPoolAccessAllocWeight, tSapIngressLastChanged=tSapIngressLastChanged, tSapIngressQueueLevel=tSapIngressQueueLevel, tNetworkIngressDot1pFC=tNetworkIngressDot1pFC, tSapIngressMacCriteriaDot1PMask=tSapIngressMacCriteriaDot1PMask, tQ1NamedPoolEntry=tQ1NamedPoolEntry, tmnxQosNamedPoolPolicyV6v0Group=tmnxQosNamedPoolPolicyV6v0Group, tPortSchedulerPlcyLvl5CIR=tPortSchedulerPlcyLvl5CIR, tSharedQueueExpedite=tSharedQueueExpedite, tmnxQosSapEgressR2r1Group=tmnxQosSapEgressR2r1Group, tNetworkPolicyTable=tNetworkPolicyTable, tSapIngressIPv6CriteriaDSCP=tSapIngressIPv6CriteriaDSCP, tmnxQos7750V6v0Compliance=tmnxQos7750V6v0Compliance, tSapIngressDefaultFCPriority=tSapIngressDefaultFCPriority, tSapIngressFCProfile=tSapIngressFCProfile, tSapIngressIPv6CriteriaDestPortOperator=tSapIngressIPv6CriteriaDestPortOperator, tSapIngressQueuePIRAdaptation=tSapIngressQueuePIRAdaptation, tSapEgressQueuePortCIRWght=tSapEgressQueuePortCIRWght, TQueueMode=TQueueMode, tVirtualSchedulerParent=tVirtualSchedulerParent, tNetworkQueuePortWght=tNetworkQueuePortWght, tSapIngressFCInProfPrec=tSapIngressFCInProfPrec, tSharedQueueFCRowStatus=tSharedQueueFCRowStatus, tFCNameEntry=tFCNameEntry, tSapEgressLastChanged=tSapEgressLastChanged, tPortSchedulerPlcyLvl6CIR=tPortSchedulerPlcyLvl6CIR, tNetworkIngressLSPEXPRowStatus=tNetworkIngressLSPEXPRowStatus, tNetworkPolicyDescription=tNetworkPolicyDescription, tSapEgressFCOutProfDscp=tSapEgressFCOutProfDscp, tNamedPoolPolicyLastChanged=tNamedPoolPolicyLastChanged, tSapIngressPrecEntry=tSapIngressPrecEntry, tmnxQosFrameBasedV6v0Group=tmnxQosFrameBasedV6v0Group, tSapIngressFCOutProfDscp=tSapIngressFCOutProfDscp, tNetworkQueueCIRWeight=tNetworkQueueCIRWeight, tSapIngressIPCriteriaDestPortOperator=tSapIngressIPCriteriaDestPortOperator, tSharedQueueCIRLevel=tSharedQueueCIRLevel, tSapIngressIPv6CriteriaDestIpMask=tSapIngressIPv6CriteriaDestIpMask, tVirtualSchedulerCIRLevel=tVirtualSchedulerCIRLevel, tSapIngressDot1pTable=tSapIngressDot1pTable, TBurstPercentOrDefault=TBurstPercentOrDefault, tSapEgressFCDot1POutProfile=tSapEgressFCDot1POutProfile, tSapIngressMacCriteriaIndex=tSapIngressMacCriteriaIndex)
mibBuilder.exportSymbols("ALCATEL-IND1-TIMETRA-QOS-MIB", tSapEgressObjects=tSapEgressObjects, tNamedPoolPolicyTableLastChanged=tNamedPoolPolicyTableLastChanged, tSapIngressIPv6CriteriaEntry=tSapIngressIPv6CriteriaEntry, tNetworkIngressDSCPEntry=tNetworkIngressDSCPEntry, tVirtualSchedulerEntry=tVirtualSchedulerEntry, tQ1NamedPoolPolicyName=tQ1NamedPoolPolicyName, tSapIngressQueueOperPIR=tSapIngressQueueOperPIR, tSapEgressQueueOperPIR=tSapEgressQueueOperPIR, tSapIngressFCEntry=tSapIngressFCEntry, tSapIngressIPv6CriteriaTable=tSapIngressIPv6CriteriaTable, tSharedQueueFCQueue=tSharedQueueFCQueue, tSlopeLoMaxAverage=tSlopeLoMaxAverage, tSapIngressMacCriteriaSSAP=tSapIngressMacCriteriaSSAP, tSapIngressDot1pLastChanged=tSapIngressDot1pLastChanged, tAtmTdpDescription=tAtmTdpDescription, tSapIngressIPCriteriaLastChanged=tSapIngressIPCriteriaLastChanged, tSapIngressQueueCIRAdaptation=tSapIngressQueueCIRAdaptation, tmnxQosNetworkR2r1Group=tmnxQosNetworkR2r1Group, tSapIngressPrecFCPriority=tSapIngressPrecFCPriority, tSapIngressIPCriteriaProtocol=tSapIngressIPCriteriaProtocol, timetraQosMIBModule=timetraQosMIBModule, tNetworkQueueCIRAdaptation=tNetworkQueueCIRAdaptation, tSchedulerPolicyFrameBasedAccnt=tSchedulerPolicyFrameBasedAccnt, tmnxQosSapIpv6FilterR4r0Group=tmnxQosSapIpv6FilterR4r0Group, tSapIngressFCInProfRemark=tSapIngressFCInProfRemark, tSapIngressMacCriteriaEthernetType=tSapIngressMacCriteriaEthernetType, tVirtualSchedulerWeight=tVirtualSchedulerWeight, tSapIngressIPv6CriteriaActionPriority=tSapIngressIPv6CriteriaActionPriority, TAdaptationRule=TAdaptationRule, TNetworkPolicyID=TNetworkPolicyID, tSapIngressIPCriteriaRowStatus=tSapIngressIPCriteriaRowStatus, tmnxQosNetworkV6v0Group=tmnxQosNetworkV6v0Group, tQ1NamedPoolRowStatus=tQ1NamedPoolRowStatus, tNamedPoolPolicyQ1DefaultWeight=tNamedPoolPolicyQ1DefaultWeight, tPortSchedulerPlcyLvl6PIR=tPortSchedulerPlcyLvl6PIR, tNetworkQueueCBS=tNetworkQueueCBS, tPortSchedulerPlcyLvl5PIR=tPortSchedulerPlcyLvl5PIR, tmnxQosNetworkV5v0Group=tmnxQosNetworkV5v0Group, tSapIngressDot1pFC=tSapIngressDot1pFC, tNetworkQueueFCTable=tNetworkQueueFCTable, tNetworkQueueFCRowStatus=tNetworkQueueFCRowStatus, tAtmTdpTable=tAtmTdpTable, tNetworkQueueLevel=tNetworkQueueLevel, tSharedQueueFCTableLastChanged=tSharedQueueFCTableLastChanged, tNetworkEgressFCTableLastChanged=tNetworkEgressFCTableLastChanged, tSapEgressQueueIndex=tSapEgressQueueIndex, tSapIngressFCQueue=tSapIngressFCQueue, tSapEgressScope=tSapEgressScope, tSapIngressIPv6CriteriaDestIpAddr=tSapIngressIPv6CriteriaDestIpAddr, tSharedQueueHiPrioOnly=tSharedQueueHiPrioOnly, tSapIngressDSCPPriority=tSapIngressDSCPPriority, tSapIngressIndex=tSapIngressIndex, tNetworkQueuePolicyDescription=tNetworkQueuePolicyDescription, tSapEgressQueuePIRAdaptation=tSapEgressQueuePIRAdaptation, tAtmTdpMbs=tAtmTdpMbs, tmnxQosSlopeGroup=tmnxQosSlopeGroup, tSapIngressIPv6CriteriaTableLastChanged=tSapIngressIPv6CriteriaTableLastChanged, tPortSchedulerPlcyLvl4PIR=tPortSchedulerPlcyLvl4PIR, tSapEgressQueueOperCIR=tSapEgressQueueOperCIR, tSchedulerPolicyLastChanged=tSchedulerPolicyLastChanged, tNetworkPolicyTableLastChanged=tNetworkPolicyTableLastChanged, tSapIngressPrecRowStatus=tSapIngressPrecRowStatus, tFCNameTable=tFCNameTable, tmnxQosAtmTdpV5v0Group=tmnxQosAtmTdpV5v0Group, tNetworkPolicyIngressLerUseDscp=tNetworkPolicyIngressLerUseDscp, tNetworkPolicyRowStatus=tNetworkPolicyRowStatus, tSapIngressMacCriteriaFrameType=tSapIngressMacCriteriaFrameType, tSapIngressDot1pRowStatus=tSapIngressDot1pRowStatus, tSharedQueueFCUnknownQueue=tSharedQueueFCUnknownQueue, tPortSchedulerPlcyLvl3PIR=tPortSchedulerPlcyLvl3PIR, tSlopeHiAdminStatus=tSlopeHiAdminStatus, tSharedQueuePolicyDescription=tSharedQueuePolicyDescription, tSapIngressFCName=tSapIngressFCName, tSapIngressIPCriteriaDestPortValue1=tSapIngressIPCriteriaDestPortValue1, tSapEgressQueuePoolName=tSapEgressQueuePoolName, tNamedPoolPolicyEntry=tNamedPoolPolicyEntry, tSapIngressMacCriteriaActionPriority=tSapIngressMacCriteriaActionPriority, tNetworkEgressFCLspExpOutProfile=tNetworkEgressFCLspExpOutProfile, tSapIngressIPCriteriaSourceIpMask=tSapIngressIPCriteriaSourceIpMask, tSapIngressPrecLastChanged=tSapIngressPrecLastChanged, TRatePercent=TRatePercent, tAtmTdpIndex=tAtmTdpIndex, tAtmTdpIndexNext=tAtmTdpIndexNext, tNetworkIngressDot1pLastChanged=tNetworkIngressDot1pLastChanged, tSapIngressMacCriteriaDstMacAddr=tSapIngressMacCriteriaDstMacAddr, tDSCPNameTable=tDSCPNameTable, tmnxQosSchedulerGroup=tmnxQosSchedulerGroup, tSlopeTimeAvgFactor=tSlopeTimeAvgFactor, tSapIngressQueueHiPrioOnly=tSapIngressQueueHiPrioOnly, tSharedQueuePolicyRowStatus=tSharedQueuePolicyRowStatus, tSapEgressFCTableLastChanged=tSapEgressFCTableLastChanged, tmnxQos7750V4v0Compliance=tmnxQos7750V4v0Compliance, tNetworkIngressDSCPTable=tNetworkIngressDSCPTable, tNetworkIngressDot1pProfile=tNetworkIngressDot1pProfile, tSapEgressQueueExpedite=tSapEgressQueueExpedite, tSapIngressFCTable=tSapIngressFCTable, tSapIngressDefaultFC=tSapIngressDefaultFC, tSapIngressIPCriteriaTableLastChanged=tSapIngressIPCriteriaTableLastChanged, tNetworkIngressLSPEXPFC=tNetworkIngressLSPEXPFC, tSapIngressMacCriteriaEntry=tSapIngressMacCriteriaEntry, tPortSchedulerPlcyLvl7CIR=tPortSchedulerPlcyLvl7CIR, tPortSchedulerPlcyLvl3CIR=tPortSchedulerPlcyLvl3CIR, TBurstPercent=TBurstPercent, tNetworkObjects=tNetworkObjects, tDSCPNameDscpValue=tDSCPNameDscpValue, tSapIngressMacCriteriaSnapPid=tSapIngressMacCriteriaSnapPid, tSapIngressFCOutProfPrec=tSapIngressFCOutProfPrec, tSapIngressDot1pTableLastChanged=tSapIngressDot1pTableLastChanged, tSapIngressIPv6CriteriaIndex=tSapIngressIPv6CriteriaIndex, tQosObjects=tQosObjects, tAtmTdpRowStatus=tAtmTdpRowStatus, tSharedQueueCIRWeight=tSharedQueueCIRWeight, tNetworkPolicyIngressDefaultActionProfile=tNetworkPolicyIngressDefaultActionProfile, tNetworkQueueTableLastChanged=tNetworkQueueTableLastChanged, tSlopeHiMaxAverage=tSlopeHiMaxAverage, tNetworkEgressFCDot1pInProfile=tNetworkEgressFCDot1pInProfile, tSapIngressMacCriteriaDot1PValue=tSapIngressMacCriteriaDot1PValue, tNetworkQueueFCTableLastChanged=tNetworkQueueFCTableLastChanged, tSapEgressQueueUsePortParent=tSapEgressQueueUsePortParent, tNetworkQueuePolicyLastChanged=tNetworkQueuePolicyLastChanged, tSapIngressPrecFC=tSapIngressPrecFC, tSapIngressMacCriteriaSSAPMask=tSapIngressMacCriteriaSSAPMask, TEntryIndicator=TEntryIndicator, tSapEgressEntry=tSapEgressEntry, TDEValue=TDEValue, tSapIngressQueueRowStatus=tSapIngressQueueRowStatus, tVirtualSchedulerTier=tVirtualSchedulerTier, tNetworkEgressFCDSCPOutProfile=tNetworkEgressFCDSCPOutProfile, tQ1NamedPoolSlopePolicy=tQ1NamedPoolSlopePolicy, tPortSchedulerPlcyLastChanged=tPortSchedulerPlcyLastChanged, tNetworkIngressLSPEXP=tNetworkIngressLSPEXP, tVirtualSchedulerTableLastChanged=tVirtualSchedulerTableLastChanged, tNetworkQueueCIR=tNetworkQueueCIR, tAtmTdpCdvt=tAtmTdpCdvt, tSapIngressDescription=tSapIngressDescription, tSapIngressIPv6CriteriaSourcePortValue1=tSapIngressIPv6CriteriaSourcePortValue1, tSapIngressQueueEntry=tSapIngressQueueEntry, tNetworkEgressFCLspExpInProfile=tNetworkEgressFCLspExpInProfile, tAtmTdpServCat=tAtmTdpServCat, tSapIngressFCRowStatus=tSapIngressFCRowStatus, tNetworkEgressFCTable=tNetworkEgressFCTable, tPortSchedulerPlcyOrphanLvl=tPortSchedulerPlcyOrphanLvl, tSapEgressFCLastChanged=tSapEgressFCLastChanged, tSlopePolicyTableLastChanged=tSlopePolicyTableLastChanged, tAtmTdpObjects=tAtmTdpObjects, tAtmTdpsCurrentlyConfigured=tAtmTdpsCurrentlyConfigured, tSapIngressMacCriteriaDSAPMask=tSapIngressMacCriteriaDSAPMask, tSapIngressIPCriteriaSourcePortValue2=tSapIngressIPCriteriaSourcePortValue2, tSapIngressIPv6CriteriaSourcePortOperator=tSapIngressIPv6CriteriaSourcePortOperator, tSlopeLoMaxProbability=tSlopeLoMaxProbability, tVirtualSchedulerPortLvl=tVirtualSchedulerPortLvl, tSapEgressQueueAdminPIR=tSapEgressQueueAdminPIR, tDSCPObjects=tDSCPObjects, tPortSchedulerPlcyMaxRate=tPortSchedulerPlcyMaxRate, tNetworkQueuePolicyEntry=tNetworkQueuePolicyEntry, tSapEgressFCName=tSapEgressFCName, tSapIngressFCBCastQueue=tSapIngressFCBCastQueue, TPrecValue=TPrecValue, tSapIngressDot1pPriority=tSapIngressDot1pPriority, tSharedQueueRowStatus=tSharedQueueRowStatus, tVirtualSchedulerPortCIRLvl=tVirtualSchedulerPortCIRLvl, tSapIngressIPv6CriteriaDescription=tSapIngressIPv6CriteriaDescription, tNetworkIngressLSPEXPProfile=tNetworkIngressLSPEXPProfile, tSapIngressQueueCIRWeight=tSapIngressQueueCIRWeight, tSlopeDescription=tSlopeDescription, tNetworkIngressDot1pEntry=tNetworkIngressDot1pEntry, tSapIngressDSCPFC=tSapIngressDSCPFC, tNetworkIngressDSCPRowStatus=tNetworkIngressDSCPRowStatus, tVirtualSchedulerPortCIRWght=tVirtualSchedulerPortCIRWght, tVirtualSchedulerName=tVirtualSchedulerName, tAtmTdpSir=tAtmTdpSir, tSapIngressDot1pEntry=tSapIngressDot1pEntry, tDSCPNameStorageType=tDSCPNameStorageType, tSharedQueueIsMultipoint=tSharedQueueIsMultipoint, TLevel=TLevel, tSapIngressMacCriteriaSnapOui=tSapIngressMacCriteriaSnapOui, tNetworkIngressDSCPProfile=tNetworkIngressDSCPProfile, tSapIngressIPv6CriteriaActionFC=tSapIngressIPv6CriteriaActionFC, tSapIngressDot1pValue=tSapIngressDot1pValue, tNetworkIngressLSPEXPTable=tNetworkIngressLSPEXPTable, tSapIngressEntry=tSapIngressEntry, tSapIngressQueueTable=tSapIngressQueueTable, tmnxQos7450V6v0Compliance=tmnxQos7450V6v0Compliance, tSapIngressQueueCIRLevel=tSapIngressQueueCIRLevel, tPortSchedulerPlcyLvl7PIR=tPortSchedulerPlcyLvl7PIR, tFCStorageType=tFCStorageType, tSapIngressDSCPTableLastChanged=tSapIngressDSCPTableLastChanged, tSchedulerPolicyName=tSchedulerPolicyName, tSapEgressQueueAdminCIR=tSapEgressQueueAdminCIR, tSapIngressMacCriteriaActionFC=tSapIngressMacCriteriaActionFC, tSharedQueueFCTable=tSharedQueueFCTable, tSapIngressQueuePoliced=tSapIngressQueuePoliced, tSapIngressQueueAdminPIR=tSapIngressQueueAdminPIR, tQ1NamedPoolNetworkAllocWeight=tQ1NamedPoolNetworkAllocWeight, tmnxQosObsoletedV6v0Group=tmnxQosObsoletedV6v0Group, tSharedQueueFCBCastQueue=tSharedQueueFCBCastQueue, tmnxQos7750V5v0Compliance=tmnxQos7750V5v0Compliance, tSapIngressIPCriteriaIndex=tSapIngressIPCriteriaIndex, tSapIngressMacCriteriaTable=tSapIngressMacCriteriaTable, tNetworkQueueObjects=tNetworkQueueObjects, TAtmTdpDescrType=TAtmTdpDescrType, tSapIngressQueueMCast=tSapIngressQueueMCast, tAtmTdpsMaxSupported=tAtmTdpsMaxSupported, tVirtualSchedulerCIR=tVirtualSchedulerCIR, tNetworkQueuePolicyTable=tNetworkQueuePolicyTable, tSapIngressDSCP=tSapIngressDSCP, tSharedQueueWeight=tSharedQueueWeight, TItemScope=TItemScope, tSlopeObjects=tSlopeObjects, tVirtualSchedulerPortWght=tVirtualSchedulerPortWght, tSapEgressRowStatus=tSapEgressRowStatus, tSharedQueueFCName=tSharedQueueFCName, tPortSchedulerPlcyOrphanCIRLvl=tPortSchedulerPlcyOrphanCIRLvl, tNetworkQueueTable=tNetworkQueueTable, tSapIngressQueuePoolName=tSapIngressQueuePoolName, tSapEgressQueuePortWght=tSapEgressQueuePortWght, tSapIngressPrecTableLastChanged=tSapIngressPrecTableLastChanged, tSapIngressQueueWeight=tSapIngressQueueWeight, tSapEgressQueuePortAvgOverhead=tSapEgressQueuePortAvgOverhead, tNetworkIngressLSPEXPTableLastChanged=tNetworkIngressLSPEXPTableLastChanged, tmnxQosSchedulerV5v0Group=tmnxQosSchedulerV5v0Group, tSapEgressDescription=tSapEgressDescription, tSapIngressIPv6CriteriaNextHeader=tSapIngressIPv6CriteriaNextHeader, tSapIngressDSCPLastChanged=tSapIngressDSCPLastChanged, tNetworkIngressDot1pRowStatus=tNetworkIngressDot1pRowStatus, tNetworkIngressDSCPFC=tNetworkIngressDSCPFC, tSapEgressTableLastChanged=tSapEgressTableLastChanged, tSapIngressDSCPEntry=tSapIngressDSCPEntry, tmnxQosConformance=tmnxQosConformance, tNetworkIngressDSCP=tNetworkIngressDSCP, tSapIngressRowStatus=tSapIngressRowStatus, tVirtualSchedulerLastChanged=tVirtualSchedulerLastChanged, tSapEgressFCDot1PValue=tSapEgressFCDot1PValue, TBurstSize=TBurstSize, tSharedQueueEntry=tSharedQueueEntry, tSapIngressMacCriteriaDstMacMask=tSapIngressMacCriteriaDstMacMask, tmnxQosSapIngressV4v0Group=tmnxQosSapIngressV4v0Group, tNetworkQueuePolicyRowStatus=tNetworkQueuePolicyRowStatus, tSapEgressFCRowStatus=tSapEgressFCRowStatus, tQ1NamedPoolTable=tQ1NamedPoolTable, tSapIngressIPCriteriaSourcePortOperator=tSapIngressIPCriteriaSourcePortOperator, tSapIngressQueueExpedite=tSapIngressQueueExpedite, tSapIngressIPCriteriaActionFC=tSapIngressIPCriteriaActionFC, TPIRRatePercent=TPIRRatePercent, tSapIngressQueueLastChanged=tSapIngressQueueLastChanged, tNetworkEgressFCLastChanged=tNetworkEgressFCLastChanged, tNamedPoolPolicyQ1MdaWeight=tNamedPoolPolicyQ1MdaWeight, tPortSchedulerPlcyLvl1CIR=tPortSchedulerPlcyLvl1CIR, tNetworkQueueWeight=tNetworkQueueWeight, tSapIngressIPCriteriaDestIpMask=tSapIngressIPCriteriaDestIpMask, tSapIngressIPCriteriaDescription=tSapIngressIPCriteriaDescription, tSapIngressIPCriteriaTable=tSapIngressIPCriteriaTable, tSapEgressFCOutProfPrec=tSapEgressFCOutProfPrec, tNetworkPolicyScope=tNetworkPolicyScope)
mibBuilder.exportSymbols("ALCATEL-IND1-TIMETRA-QOS-MIB", tSapIngressObjects=tSapIngressObjects, tmnxQosSapEgressV6v0Group=tmnxQosSapEgressV6v0Group, tFCNameTableLastChanged=tFCNameTableLastChanged, tSapIngressIPCriteriaSourcePortValue1=tSapIngressIPCriteriaSourcePortValue1, tSapEgressQueueRowStatus=tSapEgressQueueRowStatus, tNetworkQueue=tNetworkQueue, tNetworkQueuePIRAdaptation=tNetworkQueuePIRAdaptation, tSapIngressDSCPRowStatus=tSapIngressDSCPRowStatus, tAtmTdpPir=tAtmTdpPir, tSapIngressIPCriteriaDSCP=tSapIngressIPCriteriaDSCP, tSapIngressMacCriteriaSrcMacAddr=tSapIngressMacCriteriaSrcMacAddr, tSapEgressFCTable=tSapEgressFCTable, TDEProfile=TDEProfile, tSapIngressFCLastChanged=tSapIngressFCLastChanged, tVirtualSchedulerRowStatus=tVirtualSchedulerRowStatus, tmnxQos7450V5v0Compliance=tmnxQos7450V5v0Compliance, TPriority=TPriority, tAtmTdpCLPTagging=tAtmTdpCLPTagging, tSlopeLoStartAverage=tSlopeLoStartAverage, TProfile=TProfile)
