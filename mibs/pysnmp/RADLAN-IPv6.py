#
# PySNMP MIB module RADLAN-IPv6 (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/RADLAN-IPv6
# Produced by pysmi-0.3.4 at Mon Apr 29 20:38:45 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, OctetString, Integer = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "OctetString", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsUnion, ConstraintsIntersection, SingleValueConstraint, ValueRangeConstraint, ValueSizeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsUnion", "ConstraintsIntersection", "SingleValueConstraint", "ValueRangeConstraint", "ValueSizeConstraint")
IANAipRouteProtocol, = mibBuilder.importSymbols("IANA-RTPROTO-MIB", "IANAipRouteProtocol")
IANAtunnelType, = mibBuilder.importSymbols("IANAifType-MIB", "IANAtunnelType")
InterfaceIndexOrZero, InterfaceIndex = mibBuilder.importSymbols("IF-MIB", "InterfaceIndexOrZero", "InterfaceIndex")
InetAddress, InetAutonomousSystemNumber, InetAddressType, InetAddressPrefixLength = mibBuilder.importSymbols("INET-ADDRESS-MIB", "InetAddress", "InetAutonomousSystemNumber", "InetAddressType", "InetAddressPrefixLength")
inetCidrRouteEntry, = mibBuilder.importSymbols("IP-FORWARD-MIB", "inetCidrRouteEntry")
ipv6RouterAdvertEntry, ipNetToPhysicalEntry, ipAddressEntry, ipv6InterfaceEntry = mibBuilder.importSymbols("IP-MIB", "ipv6RouterAdvertEntry", "ipNetToPhysicalEntry", "ipAddressEntry", "ipv6InterfaceEntry")
ipSpec, = mibBuilder.importSymbols("RADLAN-IP", "ipSpec")
rnd, = mibBuilder.importSymbols("RADLAN-MIB", "rnd")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
Integer32, IpAddress, iso, zeroDotZero, MibIdentifier, mib_2, Unsigned32, ModuleIdentity, NotificationType, MibScalar, MibTable, MibTableRow, MibTableColumn, Bits, Counter64, TimeTicks, Counter32, ObjectIdentity, Gauge32 = mibBuilder.importSymbols("SNMPv2-SMI", "Integer32", "IpAddress", "iso", "zeroDotZero", "MibIdentifier", "mib-2", "Unsigned32", "ModuleIdentity", "NotificationType", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Bits", "Counter64", "TimeTicks", "Counter32", "ObjectIdentity", "Gauge32")
DisplayString, TextualConvention, RowStatus, TruthValue, TimeInterval = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention", "RowStatus", "TruthValue", "TimeInterval")
rlIPv6 = ModuleIdentity((1, 3, 6, 1, 4, 1, 89, 129))
rlIPv6.setRevisions(('2008-09-25 00:00',))
if mibBuilder.loadTexts: rlIPv6.setLastUpdated('200809250000Z')
if mibBuilder.loadTexts: rlIPv6.setOrganization('Marvell Semiconductor, Inc.')
rlIpAddressTable = MibTable((1, 3, 6, 1, 4, 1, 89, 26, 19), )
if mibBuilder.loadTexts: rlIpAddressTable.setStatus('current')
rlIpAddressEntry = MibTableRow((1, 3, 6, 1, 4, 1, 89, 26, 19, 1), )
ipAddressEntry.registerAugmentions(("RADLAN-IPv6", "rlIpAddressEntry"))
rlIpAddressEntry.setIndexNames(*ipAddressEntry.getIndexNames())
if mibBuilder.loadTexts: rlIpAddressEntry.setStatus('current')
rlIpAddressPrefixLength = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 26, 19, 1, 1), InetAddressPrefixLength().clone(64)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: rlIpAddressPrefixLength.setStatus('current')
rlIpAddressType = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 26, 19, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("unicast", 1), ("anycast", 2), ("broadcast", 3), ("multicast", 4))).clone('unicast')).setMaxAccess("readonly")
if mibBuilder.loadTexts: rlIpAddressType.setStatus('current')
rlipv6InterfaceTable = MibTable((1, 3, 6, 1, 4, 1, 89, 26, 20), )
if mibBuilder.loadTexts: rlipv6InterfaceTable.setStatus('current')
rlipv6InterfaceEntry = MibTableRow((1, 3, 6, 1, 4, 1, 89, 26, 20, 1), )
ipv6InterfaceEntry.registerAugmentions(("RADLAN-IPv6", "rlipv6InterfaceEntry"))
rlipv6InterfaceEntry.setIndexNames(*ipv6InterfaceEntry.getIndexNames())
if mibBuilder.loadTexts: rlipv6InterfaceEntry.setStatus('current')
rlipv6InterfaceNdDadAttemps = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 26, 20, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 600))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: rlipv6InterfaceNdDadAttemps.setStatus('current')
rlipv6InterfaceAutoconfigEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 26, 20, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('enable')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: rlipv6InterfaceAutoconfigEnable.setStatus('current')
rlipv6InterfaceIcmpUnreachSendEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 26, 20, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('enable')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: rlipv6InterfaceIcmpUnreachSendEnable.setStatus('current')
rlipv6InterfaceLinkMTU = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 26, 20, 1, 4), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1280, 65535)).clone(1500)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: rlipv6InterfaceLinkMTU.setStatus('current')
rlipv6InterfaceMLDVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 26, 20, 1, 5), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 2)).clone(2)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: rlipv6InterfaceMLDVersion.setStatus('current')
rlipv6InterfaceRetransmitTime = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 26, 20, 1, 6), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(1000, 3600000), ))).setUnits('milliseconds').setMaxAccess("readcreate")
if mibBuilder.loadTexts: rlipv6InterfaceRetransmitTime.setStatus('current')
rlipv6InterfaceIcmpRedirectSendEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 26, 20, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('enable')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: rlipv6InterfaceIcmpRedirectSendEnable.setStatus('current')
rlinetCidrRouteTable = MibTable((1, 3, 6, 1, 4, 1, 89, 26, 21), )
if mibBuilder.loadTexts: rlinetCidrRouteTable.setStatus('current')
rlinetCidrRouteEntry = MibTableRow((1, 3, 6, 1, 4, 1, 89, 26, 21, 1), )
inetCidrRouteEntry.registerAugmentions(("RADLAN-IPv6", "rlinetCidrRouteEntry"))
rlinetCidrRouteEntry.setIndexNames(*inetCidrRouteEntry.getIndexNames())
if mibBuilder.loadTexts: rlinetCidrRouteEntry.setStatus('current')
rlinetCidrRouteLifetime = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 26, 21, 1, 1), Unsigned32().clone(4294967295)).setUnits('seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: rlinetCidrRouteLifetime.setStatus('current')
rlinetCidrRouteInfo = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 26, 21, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4))).clone(namedValues=NamedValues(("none", 0), ("ospfIntraArea", 1), ("ospfInterArea", 2), ("ospfExternalType1", 3), ("ospfExternalType2", 4))).clone('none')).setMaxAccess("readonly")
if mibBuilder.loadTexts: rlinetCidrRouteInfo.setStatus('current')
rlipNetToPhysicalTable = MibTable((1, 3, 6, 1, 4, 1, 89, 26, 22), )
if mibBuilder.loadTexts: rlipNetToPhysicalTable.setStatus('current')
rlipNetToPhysicalEntry = MibTableRow((1, 3, 6, 1, 4, 1, 89, 26, 22, 1), )
ipNetToPhysicalEntry.registerAugmentions(("RADLAN-IPv6", "rlipNetToPhysicalEntry"))
rlipNetToPhysicalEntry.setIndexNames(*ipNetToPhysicalEntry.getIndexNames())
if mibBuilder.loadTexts: rlipNetToPhysicalEntry.setStatus('current')
rlipNetToPhysicalIsRouter = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 26, 22, 1, 1), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rlipNetToPhysicalIsRouter.setStatus('current')
rlipNetToPhysicalReachableConfirmed = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 26, 22, 1, 2), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rlipNetToPhysicalReachableConfirmed.setStatus('current')
rlipv6IcmpErrorRatelimitInterval = MibScalar((1, 3, 6, 1, 4, 1, 89, 129, 1), TimeInterval().clone(100)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rlipv6IcmpErrorRatelimitInterval.setStatus('current')
rlipv6IcmpErrorRatelimitBucketSize = MibScalar((1, 3, 6, 1, 4, 1, 89, 129, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 200)).clone(10)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rlipv6IcmpErrorRatelimitBucketSize.setStatus('current')
rlipv6LLDefaultZone = MibScalar((1, 3, 6, 1, 4, 1, 89, 129, 3), InterfaceIndexOrZero()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rlipv6LLDefaultZone.setStatus('current')
rlIpv6GeneralPrefixTable = MibTable((1, 3, 6, 1, 4, 1, 89, 129, 4), )
if mibBuilder.loadTexts: rlIpv6GeneralPrefixTable.setStatus('current')
rlIpv6GeneralPrefixEntry = MibTableRow((1, 3, 6, 1, 4, 1, 89, 129, 4, 1), ).setIndexNames((0, "RADLAN-IPv6", "rlIpv6GeneralPrefixName"))
if mibBuilder.loadTexts: rlIpv6GeneralPrefixEntry.setStatus('current')
rlIpv6GeneralPrefixName = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 129, 4, 1, 1), DisplayString())
if mibBuilder.loadTexts: rlIpv6GeneralPrefixName.setStatus('current')
rlIpv6GeneralPrefixInetAddrType = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 129, 4, 1, 2), InetAddressType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rlIpv6GeneralPrefixInetAddrType.setStatus('current')
rlIpv6GeneralPrefixInetAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 129, 4, 1, 3), InetAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rlIpv6GeneralPrefixInetAddr.setStatus('current')
rlIpv6GeneralPrefixInetAddrPrefixLength = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 129, 4, 1, 4), InetAddressPrefixLength()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rlIpv6GeneralPrefixInetAddrPrefixLength.setStatus('current')
rlIpv6GeneralPrefixInterfaceId = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 129, 4, 1, 5), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rlIpv6GeneralPrefixInterfaceId.setStatus('current')
rlIpv6GeneralPrefixRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 129, 4, 1, 6), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rlIpv6GeneralPrefixRowStatus.setStatus('current')
rlipv6MaximumHopsNumber = MibScalar((1, 3, 6, 1, 4, 1, 89, 129, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255)).clone(64)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rlipv6MaximumHopsNumber.setStatus('current')
rlIpv6RouterAdvertPrefixTable = MibTable((1, 3, 6, 1, 4, 1, 89, 129, 6), )
if mibBuilder.loadTexts: rlIpv6RouterAdvertPrefixTable.setStatus('current')
rlIpv6RouterAdvertPrefixEntry = MibTableRow((1, 3, 6, 1, 4, 1, 89, 129, 6, 1), ).setIndexNames((0, "RADLAN-IPv6", "rlIpv6RouterAdvertPrefixIfIndex"), (0, "RADLAN-IPv6", "rlIpv6RouterAdvertPrefixIsDefault"), (0, "RADLAN-IPv6", "rlIpv6RouterAdvertPrefixInetAddrType"), (0, "RADLAN-IPv6", "rlIpv6RouterAdvertPrefixInetAddr"), (0, "RADLAN-IPv6", "rlIpv6RouterAdvertPrefixInetAddrPrefixLength"))
if mibBuilder.loadTexts: rlIpv6RouterAdvertPrefixEntry.setStatus('current')
rlIpv6RouterAdvertPrefixIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 129, 6, 1, 1), InterfaceIndex())
if mibBuilder.loadTexts: rlIpv6RouterAdvertPrefixIfIndex.setStatus('current')
rlIpv6RouterAdvertPrefixIsDefault = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 129, 6, 1, 2), TruthValue())
if mibBuilder.loadTexts: rlIpv6RouterAdvertPrefixIsDefault.setStatus('current')
rlIpv6RouterAdvertPrefixInetAddrType = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 129, 6, 1, 3), InetAddressType())
if mibBuilder.loadTexts: rlIpv6RouterAdvertPrefixInetAddrType.setStatus('current')
rlIpv6RouterAdvertPrefixInetAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 129, 6, 1, 4), InetAddress())
if mibBuilder.loadTexts: rlIpv6RouterAdvertPrefixInetAddr.setStatus('current')
rlIpv6RouterAdvertPrefixInetAddrPrefixLength = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 129, 6, 1, 5), InetAddressPrefixLength())
if mibBuilder.loadTexts: rlIpv6RouterAdvertPrefixInetAddrPrefixLength.setStatus('current')
rlIpv6RouterAdvertPrefixAdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 129, 6, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('enable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rlIpv6RouterAdvertPrefixAdminStatus.setStatus('current')
rlIpv6RouterAdvertPrefixAdvertise = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 129, 6, 1, 7), TruthValue().clone('true')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rlIpv6RouterAdvertPrefixAdvertise.setStatus('current')
rlIpv6RouterAdvertPrefixOnLinkStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 129, 6, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("onlink", 1), ("not-onlink", 2), ("off-link", 3))).clone('onlink')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rlIpv6RouterAdvertPrefixOnLinkStatus.setStatus('current')
rlIpv6RouterAdvertPrefixAutonomousFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 129, 6, 1, 9), TruthValue().clone('true')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rlIpv6RouterAdvertPrefixAutonomousFlag.setStatus('current')
rlIpv6RouterAdvertPrefixAdvPreferredLifetime = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 129, 6, 1, 10), Unsigned32().clone(604800)).setUnits('seconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: rlIpv6RouterAdvertPrefixAdvPreferredLifetime.setStatus('current')
rlIpv6RouterAdvertPrefixAdvValidLifetime = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 129, 6, 1, 11), Unsigned32().clone(2592000)).setUnits('seconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: rlIpv6RouterAdvertPrefixAdvValidLifetime.setStatus('current')
rlIpv6RouterAdvertPrefixRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 129, 6, 1, 12), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rlIpv6RouterAdvertPrefixRowStatus.setStatus('current')
rlIpv6RouterAdvertTable = MibTable((1, 3, 6, 1, 4, 1, 89, 129, 7), )
if mibBuilder.loadTexts: rlIpv6RouterAdvertTable.setStatus('current')
rlIpv6RouterAdvertEntry = MibTableRow((1, 3, 6, 1, 4, 1, 89, 129, 7, 1), )
ipv6RouterAdvertEntry.registerAugmentions(("RADLAN-IPv6", "rlIpv6RouterAdvertEntry"))
rlIpv6RouterAdvertEntry.setIndexNames(*ipv6RouterAdvertEntry.getIndexNames())
if mibBuilder.loadTexts: rlIpv6RouterAdvertEntry.setStatus('current')
rlIpv6RouterAdvertAdvIntervalOption = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 129, 7, 1, 1), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rlIpv6RouterAdvertAdvIntervalOption.setStatus('current')
rlIpv6RouterAdvertRouterPreference = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 129, 7, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("low", 1), ("medium", 2), ("high", 3))).clone('medium')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: rlIpv6RouterAdvertRouterPreference.setStatus('current')
rlIpv6RouterAdvertIsCurHopLimitUserConfigured = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 129, 7, 1, 3), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rlIpv6RouterAdvertIsCurHopLimitUserConfigured.setStatus('current')
rlipv6InetCidrTableClear = MibScalar((1, 3, 6, 1, 4, 1, 89, 129, 8), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rlipv6InetCidrTableClear.setStatus('current')
rlIpv6PathMtuTable = MibTable((1, 3, 6, 1, 4, 1, 89, 129, 9), )
if mibBuilder.loadTexts: rlIpv6PathMtuTable.setStatus('current')
rlIpv6PathMtuEntry = MibTableRow((1, 3, 6, 1, 4, 1, 89, 129, 9, 1), ).setIndexNames((0, "RADLAN-IPv6", "rlIpv6PathMtuEntryInetDestAddrType"), (0, "RADLAN-IPv6", "rlIpv6PathMtuEntryInetDestAddr"))
if mibBuilder.loadTexts: rlIpv6PathMtuEntry.setStatus('current')
rlIpv6PathMtuEntryInetDestAddrType = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 129, 9, 1, 1), InetAddressType())
if mibBuilder.loadTexts: rlIpv6PathMtuEntryInetDestAddrType.setStatus('current')
rlIpv6PathMtuEntryInetDestAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 129, 9, 1, 2), InetAddress())
if mibBuilder.loadTexts: rlIpv6PathMtuEntryInetDestAddr.setStatus('current')
rlIpv6PathMtuEntryMtu = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 129, 9, 1, 3), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rlIpv6PathMtuEntryMtu.setStatus('current')
rlIpv6PathMtuEntryAge = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 129, 9, 1, 4), Unsigned32()).setUnits('seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: rlIpv6PathMtuEntryAge.setStatus('current')
rlInetStaticRouteTable = MibTable((1, 3, 6, 1, 4, 1, 89, 26, 28), )
if mibBuilder.loadTexts: rlInetStaticRouteTable.setStatus('current')
rlInetStaticRouteEntry = MibTableRow((1, 3, 6, 1, 4, 1, 89, 26, 28, 1), ).setIndexNames((0, "RADLAN-IPv6", "rlInetStaticRouteDestType"), (0, "RADLAN-IPv6", "rlInetStaticRouteDest"), (0, "RADLAN-IPv6", "rlInetStaticRoutePfxLen"), (0, "RADLAN-IPv6", "rlInetStaticRouteNextHopType"), (0, "RADLAN-IPv6", "rlInetStaticRouteNextHop"), (0, "RADLAN-IPv6", "rlInetStaticRouteIfIndex"))
if mibBuilder.loadTexts: rlInetStaticRouteEntry.setStatus('current')
rlInetStaticRouteDestType = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 26, 28, 1, 1), InetAddressType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rlInetStaticRouteDestType.setStatus('current')
rlInetStaticRouteDest = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 26, 28, 1, 2), InetAddress())
if mibBuilder.loadTexts: rlInetStaticRouteDest.setStatus('current')
rlInetStaticRoutePfxLen = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 26, 28, 1, 3), InetAddressPrefixLength())
if mibBuilder.loadTexts: rlInetStaticRoutePfxLen.setStatus('current')
rlInetStaticRouteNextHopType = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 26, 28, 1, 4), InetAddressType())
if mibBuilder.loadTexts: rlInetStaticRouteNextHopType.setStatus('current')
rlInetStaticRouteNextHop = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 26, 28, 1, 5), InetAddress())
if mibBuilder.loadTexts: rlInetStaticRouteNextHop.setStatus('current')
rlInetStaticRouteIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 26, 28, 1, 6), InterfaceIndexOrZero())
if mibBuilder.loadTexts: rlInetStaticRouteIfIndex.setStatus('current')
rlInetStaticRoutePathCost = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 26, 28, 1, 7), Unsigned32().clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rlInetStaticRoutePathCost.setStatus('current')
rlInetStaticRouteType = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 26, 28, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("reject", 2), ("local", 3), ("remote", 4), ("blackhole", 5), ("nd", 6))).clone('remote')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rlInetStaticRouteType.setStatus('current')
rlInetStaticRouteOwner = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 26, 28, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("static", 1), ("dhcp", 2), ("default", 3), ("icmp", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rlInetStaticRouteOwner.setStatus('current')
rlInetStaticRouteRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 26, 28, 1, 10), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rlInetStaticRouteRowStatus.setStatus('current')
rlInetStaticRouteForwardingStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 26, 28, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("active", 1), ("inactive", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rlInetStaticRouteForwardingStatus.setStatus('current')
rlIpNetToPhysicalTableClearTable = MibTable((1, 3, 6, 1, 4, 1, 89, 129, 10), )
if mibBuilder.loadTexts: rlIpNetToPhysicalTableClearTable.setStatus('current')
rlIpNetToPhysicalTableClearEntry = MibTableRow((1, 3, 6, 1, 4, 1, 89, 129, 10, 1), ).setIndexNames((0, "RADLAN-IPv6", "rlIpNetToPhysicalTableClearIfIndex"))
if mibBuilder.loadTexts: rlIpNetToPhysicalTableClearEntry.setStatus('current')
rlIpNetToPhysicalTableClearIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 129, 10, 1, 1), InterfaceIndexOrZero())
if mibBuilder.loadTexts: rlIpNetToPhysicalTableClearIfIndex.setStatus('current')
rlIpNetToPhysicalTableClearScope = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 129, 10, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("all", 1), ("dynamicOnly", 2), ("staticOnly", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rlIpNetToPhysicalTableClearScope.setStatus('current')
rlInetRoutingDistanceTable = MibTable((1, 3, 6, 1, 4, 1, 89, 26, 29), )
if mibBuilder.loadTexts: rlInetRoutingDistanceTable.setStatus('current')
rlInetRoutingDistanceEntry = MibTableRow((1, 3, 6, 1, 4, 1, 89, 26, 29, 1), ).setIndexNames((0, "RADLAN-IPv6", "rlInetRoutingDistanceType"))
if mibBuilder.loadTexts: rlInetRoutingDistanceEntry.setStatus('current')
rlInetRoutingDistanceType = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 26, 29, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("ipv4", 1), ("ipv6", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rlInetRoutingDistanceType.setStatus('current')
rlInetRoutingDistanceConnected = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 26, 29, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rlInetRoutingDistanceConnected.setStatus('current')
rlInetRoutingDistanceStatic = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 26, 29, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rlInetRoutingDistanceStatic.setStatus('current')
rlInetRoutingDistanceRip = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 26, 29, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rlInetRoutingDistanceRip.setStatus('current')
rlInetRoutingDistanceOspfInternal = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 26, 29, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rlInetRoutingDistanceOspfInternal.setStatus('current')
rlInetRoutingDistanceOspfExternal = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 26, 29, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rlInetRoutingDistanceOspfExternal.setStatus('current')
rlInternInetCidrRouteTable = MibTable((1, 3, 6, 1, 4, 1, 89, 26, 30), )
if mibBuilder.loadTexts: rlInternInetCidrRouteTable.setStatus('current')
rlInternInetCidrRouteEntry = MibTableRow((1, 3, 6, 1, 4, 1, 89, 26, 30, 1), ).setIndexNames((0, "RADLAN-IPv6", "rlInternInetCidrRouteDestType"), (0, "RADLAN-IPv6", "rlInternInetCidrRouteDest"), (0, "RADLAN-IPv6", "rlInternInetCidrRoutePfxLen"), (0, "RADLAN-IPv6", "rlInternInetCidrRoutePolicy"), (0, "RADLAN-IPv6", "rlInternInetCidrRouteNextHopType"), (0, "RADLAN-IPv6", "rlInternInetCidrRouteNextHop"))
if mibBuilder.loadTexts: rlInternInetCidrRouteEntry.setStatus('current')
rlInternInetCidrRouteDestType = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 26, 30, 1, 1), InetAddressType())
if mibBuilder.loadTexts: rlInternInetCidrRouteDestType.setStatus('current')
rlInternInetCidrRouteDest = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 26, 30, 1, 2), InetAddress())
if mibBuilder.loadTexts: rlInternInetCidrRouteDest.setStatus('current')
rlInternInetCidrRoutePfxLen = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 26, 30, 1, 3), InetAddressPrefixLength())
if mibBuilder.loadTexts: rlInternInetCidrRoutePfxLen.setStatus('current')
rlInternInetCidrRoutePolicy = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 26, 30, 1, 4), ObjectIdentifier())
if mibBuilder.loadTexts: rlInternInetCidrRoutePolicy.setStatus('current')
rlInternInetCidrRouteNextHopType = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 26, 30, 1, 5), InetAddressType())
if mibBuilder.loadTexts: rlInternInetCidrRouteNextHopType.setStatus('current')
rlInternInetCidrRouteNextHop = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 26, 30, 1, 6), InetAddress())
if mibBuilder.loadTexts: rlInternInetCidrRouteNextHop.setStatus('current')
rlInternInetCidrRouteIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 26, 30, 1, 7), InterfaceIndexOrZero())
if mibBuilder.loadTexts: rlInternInetCidrRouteIfIndex.setStatus('current')
rlInternInetCidrRouteType = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 26, 30, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("other", 1), ("reject", 2), ("local", 3), ("remote", 4), ("blackhole", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rlInternInetCidrRouteType.setStatus('current')
rlInternInetCidrRouteProto = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 26, 30, 1, 9), IANAipRouteProtocol()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rlInternInetCidrRouteProto.setStatus('current')
rlInternInetCidrRouteAge = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 26, 30, 1, 10), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rlInternInetCidrRouteAge.setStatus('current')
rlInternInetCidrRouteNextHopAS = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 26, 30, 1, 11), InetAutonomousSystemNumber()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rlInternInetCidrRouteNextHopAS.setStatus('current')
rlInternInetCidrRouteMetric1 = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 26, 30, 1, 12), Integer32().clone(-1)).setMaxAccess("readonly")
if mibBuilder.loadTexts: rlInternInetCidrRouteMetric1.setStatus('current')
rlInternInetCidrRouteMetric2 = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 26, 30, 1, 13), Integer32().clone(-1)).setMaxAccess("readonly")
if mibBuilder.loadTexts: rlInternInetCidrRouteMetric2.setStatus('current')
rlInternInetCidrRouteMetric3 = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 26, 30, 1, 14), Integer32().clone(-1)).setMaxAccess("readonly")
if mibBuilder.loadTexts: rlInternInetCidrRouteMetric3.setStatus('current')
rlInternInetCidrRouteMetric4 = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 26, 30, 1, 15), Integer32().clone(-1)).setMaxAccess("readonly")
if mibBuilder.loadTexts: rlInternInetCidrRouteMetric4.setStatus('current')
rlInternInetCidrRouteMetric5 = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 26, 30, 1, 16), Integer32().clone(-1)).setMaxAccess("readonly")
if mibBuilder.loadTexts: rlInternInetCidrRouteMetric5.setStatus('current')
rlInternInetCidrRouteStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 26, 30, 1, 17), RowStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rlInternInetCidrRouteStatus.setStatus('current')
rlInternInetCidrRouteLifetime = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 26, 30, 1, 18), Unsigned32().clone(4294967295)).setUnits('seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: rlInternInetCidrRouteLifetime.setStatus('current')
rlInternInetCidrRouteInfo = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 26, 30, 1, 19), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4))).clone(namedValues=NamedValues(("none", 0), ("ospfIntraArea", 1), ("ospfInterArea", 2), ("ospfExternalType1", 3), ("ospfExternalType2", 4))).clone('none')).setMaxAccess("readonly")
if mibBuilder.loadTexts: rlInternInetCidrRouteInfo.setStatus('current')
rlInternInetStaticRouteTable = MibTable((1, 3, 6, 1, 4, 1, 89, 26, 31), )
if mibBuilder.loadTexts: rlInternInetStaticRouteTable.setStatus('current')
rlInternInetStaticRouteEntry = MibTableRow((1, 3, 6, 1, 4, 1, 89, 26, 31, 1), ).setIndexNames((0, "RADLAN-IPv6", "rlInternInetStaticRouteDestType"), (0, "RADLAN-IPv6", "rlInternInetStaticRouteDest"), (0, "RADLAN-IPv6", "rlInternInetStaticRoutePfxLen"), (0, "RADLAN-IPv6", "rlInternInetStaticRouteNextHopType"), (0, "RADLAN-IPv6", "rlInternInetStaticRouteNextHop"), (0, "RADLAN-IPv6", "rlInternInetStaticRouteIfIndex"))
if mibBuilder.loadTexts: rlInternInetStaticRouteEntry.setStatus('current')
rlInternInetStaticRouteDestType = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 26, 31, 1, 1), InetAddressType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rlInternInetStaticRouteDestType.setStatus('current')
rlInternInetStaticRouteDest = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 26, 31, 1, 2), InetAddress())
if mibBuilder.loadTexts: rlInternInetStaticRouteDest.setStatus('current')
rlInternInetStaticRoutePfxLen = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 26, 31, 1, 3), InetAddressPrefixLength())
if mibBuilder.loadTexts: rlInternInetStaticRoutePfxLen.setStatus('current')
rlInternInetStaticRouteNextHopType = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 26, 31, 1, 4), InetAddressType())
if mibBuilder.loadTexts: rlInternInetStaticRouteNextHopType.setStatus('current')
rlInternInetStaticRouteNextHop = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 26, 31, 1, 5), InetAddress())
if mibBuilder.loadTexts: rlInternInetStaticRouteNextHop.setStatus('current')
rlInternInetStaticRouteIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 26, 31, 1, 6), InterfaceIndexOrZero())
if mibBuilder.loadTexts: rlInternInetStaticRouteIfIndex.setStatus('current')
rlInternInetStaticRoutePathCost = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 26, 31, 1, 7), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rlInternInetStaticRoutePathCost.setStatus('current')
rlInternInetStaticRouteType = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 26, 31, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("reject", 2), ("local", 3), ("remote", 4), ("blackhole", 5), ("nd", 6))).clone('remote')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rlInternInetStaticRouteType.setStatus('current')
rlInternInetStaticRouteOwner = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 26, 31, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("static", 1), ("dhcp", 2), ("default", 3), ("icmp", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rlInternInetStaticRouteOwner.setStatus('current')
rlInternInetStaticRouteRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 26, 31, 1, 10), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rlInternInetStaticRouteRowStatus.setStatus('current')
rlInternInetStaticRouteForwardingStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 26, 31, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("active", 1), ("inactive", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rlInternInetStaticRouteForwardingStatus.setStatus('current')
rlIpv6HostForwardingTable = MibTable((1, 3, 6, 1, 4, 1, 89, 129, 11), )
if mibBuilder.loadTexts: rlIpv6HostForwardingTable.setStatus('current')
rlIpv6HostForwardingEntry = MibTableRow((1, 3, 6, 1, 4, 1, 89, 129, 11, 1), ).setIndexNames((0, "RADLAN-IPv6", "rlIpv6HostForwardingDestType"), (0, "RADLAN-IPv6", "rlIpv6HostForwardingDest"), (0, "RADLAN-IPv6", "rlIpv6HostForwardingPfxLen"), (0, "RADLAN-IPv6", "rlIpv6HostForwardingNextHopType"), (0, "RADLAN-IPv6", "rlIpv6HostForwardingNextHop"), (0, "RADLAN-IPv6", "rlIpv6HostForwardingIfIndex"), (0, "RADLAN-IPv6", "rlIpv6HostForwardingType"))
if mibBuilder.loadTexts: rlIpv6HostForwardingEntry.setStatus('current')
rlIpv6HostForwardingDestType = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 129, 11, 1, 1), InetAddressType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rlIpv6HostForwardingDestType.setStatus('current')
rlIpv6HostForwardingDest = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 129, 11, 1, 2), InetAddress())
if mibBuilder.loadTexts: rlIpv6HostForwardingDest.setStatus('current')
rlIpv6HostForwardingPfxLen = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 129, 11, 1, 3), InetAddressPrefixLength())
if mibBuilder.loadTexts: rlIpv6HostForwardingPfxLen.setStatus('current')
rlIpv6HostForwardingNextHopType = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 129, 11, 1, 4), InetAddressType())
if mibBuilder.loadTexts: rlIpv6HostForwardingNextHopType.setStatus('current')
rlIpv6HostForwardingNextHop = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 129, 11, 1, 5), InetAddress())
if mibBuilder.loadTexts: rlIpv6HostForwardingNextHop.setStatus('current')
rlIpv6HostForwardingIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 129, 11, 1, 6), InterfaceIndexOrZero())
if mibBuilder.loadTexts: rlIpv6HostForwardingIfIndex.setStatus('current')
rlIpv6HostForwardingType = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 129, 11, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("redirect", 1), ("local", 2), ("nd", 3), ("remote-static", 4), ("remote-dynamic", 5))))
if mibBuilder.loadTexts: rlIpv6HostForwardingType.setStatus('current')
rlIpv6HostForwardingPathCost = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 129, 11, 1, 8), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rlIpv6HostForwardingPathCost.setStatus('current')
rlipv6EnabledByDefaultRemovedIfindex = MibScalar((1, 3, 6, 1, 4, 1, 89, 129, 12), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rlipv6EnabledByDefaultRemovedIfindex.setStatus('current')
rlManagementIpv6 = MibScalar((1, 3, 6, 1, 4, 1, 89, 129, 13), InetAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rlManagementIpv6.setStatus('current')
rlManagementIpv6Action = MibScalar((1, 3, 6, 1, 4, 1, 89, 129, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("clear", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rlManagementIpv6Action.setStatus('current')
rlIpv6TunnelToIPv6DbTable = MibTable((1, 3, 6, 1, 4, 1, 89, 129, 15), )
if mibBuilder.loadTexts: rlIpv6TunnelToIPv6DbTable.setStatus('current')
rlIpv6TunnelToIPv6DbEntry = MibTableRow((1, 3, 6, 1, 4, 1, 89, 129, 15, 1), ).setIndexNames((0, "RADLAN-IPv6", "rlIpv6TunnelToIPv6IfIndex"))
if mibBuilder.loadTexts: rlIpv6TunnelToIPv6DbEntry.setStatus('current')
rlIpv6TunnelToIPv6IfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 129, 15, 1, 1), InterfaceIndex())
if mibBuilder.loadTexts: rlIpv6TunnelToIPv6IfIndex.setStatus('current')
rlIpv6TunnelToIPv6Action = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 129, 15, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("createTunnel", 1), ("destroyTunnel", 2), ("addAddress", 3), ("deleteAddress", 4), ("updateAddresses", 5), ("six2fourCfgRestore", 6), ("six2fourCfgClear", 7)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rlIpv6TunnelToIPv6Action.setStatus('current')
rlIpv6TunnelToIPv6TunnelType = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 129, 15, 1, 3), IANAtunnelType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rlIpv6TunnelToIPv6TunnelType.setStatus('current')
rlIpv6TunnelToIPv6Address = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 129, 15, 1, 4), InetAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rlIpv6TunnelToIPv6Address.setStatus('current')
rlIpv6TunnelToIPv6PrefixLength = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 129, 15, 1, 5), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rlIpv6TunnelToIPv6PrefixLength.setStatus('current')
rlIpv6TunnelToIPv6Mtu = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 129, 15, 1, 6), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rlIpv6TunnelToIPv6Mtu.setStatus('current')
rlIpv6TunnelToIPv6MinRtrSolicitationInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 129, 15, 1, 7), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rlIpv6TunnelToIPv6MinRtrSolicitationInterval.setStatus('current')
rlIpv6TunnelToIPv6LinkLayerIPv4 = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 129, 15, 1, 8), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rlIpv6TunnelToIPv6LinkLayerIPv4.setStatus('current')
rlIpv6DefaultTC = MibScalar((1, 3, 6, 1, 4, 1, 89, 129, 16), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rlIpv6DefaultTC.setStatus('current')
rlIpv6DefaultUP = MibScalar((1, 3, 6, 1, 4, 1, 89, 129, 17), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rlIpv6DefaultUP.setStatus('current')
rlIpv6MtuSize = MibScalar((1, 3, 6, 1, 4, 1, 89, 129, 18), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rlIpv6MtuSize.setStatus('current')
mibBuilder.exportSymbols("RADLAN-IPv6", rlIpv6GeneralPrefixInetAddrType=rlIpv6GeneralPrefixInetAddrType, rlInternInetStaticRouteRowStatus=rlInternInetStaticRouteRowStatus, rlInternInetStaticRouteNextHopType=rlInternInetStaticRouteNextHopType, rlIpv6HostForwardingType=rlIpv6HostForwardingType, rlIpv6RouterAdvertIsCurHopLimitUserConfigured=rlIpv6RouterAdvertIsCurHopLimitUserConfigured, rlInetStaticRouteForwardingStatus=rlInetStaticRouteForwardingStatus, rlInternInetCidrRouteNextHopType=rlInternInetCidrRouteNextHopType, rlInetStaticRouteEntry=rlInetStaticRouteEntry, rlInetStaticRoutePathCost=rlInetStaticRoutePathCost, rlInetStaticRouteOwner=rlInetStaticRouteOwner, rlIpv6HostForwardingNextHopType=rlIpv6HostForwardingNextHopType, rlInetRoutingDistanceType=rlInetRoutingDistanceType, rlIpv6RouterAdvertPrefixInetAddrPrefixLength=rlIpv6RouterAdvertPrefixInetAddrPrefixLength, rlIpv6RouterAdvertPrefixEntry=rlIpv6RouterAdvertPrefixEntry, rlInetStaticRoutePfxLen=rlInetStaticRoutePfxLen, rlInternInetCidrRouteStatus=rlInternInetCidrRouteStatus, rlipv6InterfaceRetransmitTime=rlipv6InterfaceRetransmitTime, rlInternInetStaticRoutePathCost=rlInternInetStaticRoutePathCost, rlIpv6RouterAdvertPrefixAutonomousFlag=rlIpv6RouterAdvertPrefixAutonomousFlag, rlIpv6PathMtuEntryMtu=rlIpv6PathMtuEntryMtu, rlIpv6TunnelToIPv6IfIndex=rlIpv6TunnelToIPv6IfIndex, rlIpv6RouterAdvertAdvIntervalOption=rlIpv6RouterAdvertAdvIntervalOption, rlInetStaticRouteType=rlInetStaticRouteType, rlInternInetCidrRouteMetric4=rlInternInetCidrRouteMetric4, rlInetRoutingDistanceTable=rlInetRoutingDistanceTable, rlIpv6RouterAdvertEntry=rlIpv6RouterAdvertEntry, rlInetRoutingDistanceOspfInternal=rlInetRoutingDistanceOspfInternal, rlIpv6GeneralPrefixInetAddr=rlIpv6GeneralPrefixInetAddr, rlInetStaticRouteIfIndex=rlInetStaticRouteIfIndex, rlIpv6PathMtuEntryInetDestAddr=rlIpv6PathMtuEntryInetDestAddr, rlInternInetStaticRouteNextHop=rlInternInetStaticRouteNextHop, rlIpv6MtuSize=rlIpv6MtuSize, rlipv6IcmpErrorRatelimitBucketSize=rlipv6IcmpErrorRatelimitBucketSize, rlIpNetToPhysicalTableClearEntry=rlIpNetToPhysicalTableClearEntry, rlIpv6DefaultUP=rlIpv6DefaultUP, rlIpv6TunnelToIPv6LinkLayerIPv4=rlIpv6TunnelToIPv6LinkLayerIPv4, rlipNetToPhysicalTable=rlipNetToPhysicalTable, rlIpv6TunnelToIPv6Mtu=rlIpv6TunnelToIPv6Mtu, rlIpv6RouterAdvertPrefixTable=rlIpv6RouterAdvertPrefixTable, rlIpv6RouterAdvertPrefixAdminStatus=rlIpv6RouterAdvertPrefixAdminStatus, rlIpv6RouterAdvertTable=rlIpv6RouterAdvertTable, rlIpv6GeneralPrefixName=rlIpv6GeneralPrefixName, rlIpAddressType=rlIpAddressType, rlipv6InterfaceIcmpRedirectSendEnable=rlipv6InterfaceIcmpRedirectSendEnable, rlIpv6GeneralPrefixEntry=rlIpv6GeneralPrefixEntry, rlInetRoutingDistanceOspfExternal=rlInetRoutingDistanceOspfExternal, rlInetRoutingDistanceStatic=rlInetRoutingDistanceStatic, rlIpv6PathMtuEntryInetDestAddrType=rlIpv6PathMtuEntryInetDestAddrType, rlIPv6=rlIPv6, rlIpv6PathMtuEntryAge=rlIpv6PathMtuEntryAge, rlipv6LLDefaultZone=rlipv6LLDefaultZone, rlIpv6PathMtuEntry=rlIpv6PathMtuEntry, rlIpv6RouterAdvertPrefixInetAddrType=rlIpv6RouterAdvertPrefixInetAddrType, rlipv6InterfaceAutoconfigEnable=rlipv6InterfaceAutoconfigEnable, rlInternInetCidrRouteMetric3=rlInternInetCidrRouteMetric3, rlIpv6TunnelToIPv6MinRtrSolicitationInterval=rlIpv6TunnelToIPv6MinRtrSolicitationInterval, rlIpAddressEntry=rlIpAddressEntry, rlIpNetToPhysicalTableClearIfIndex=rlIpNetToPhysicalTableClearIfIndex, rlInternInetCidrRouteAge=rlInternInetCidrRouteAge, rlipv6InetCidrTableClear=rlipv6InetCidrTableClear, rlInetRoutingDistanceConnected=rlInetRoutingDistanceConnected, rlInternInetCidrRouteMetric1=rlInternInetCidrRouteMetric1, rlInternInetStaticRouteIfIndex=rlInternInetStaticRouteIfIndex, rlipv6InterfaceEntry=rlipv6InterfaceEntry, rlInternInetStaticRouteOwner=rlInternInetStaticRouteOwner, rlIpv6TunnelToIPv6Address=rlIpv6TunnelToIPv6Address, rlipv6InterfaceLinkMTU=rlipv6InterfaceLinkMTU, rlInternInetStaticRouteType=rlInternInetStaticRouteType, rlInternInetCidrRouteIfIndex=rlInternInetCidrRouteIfIndex, rlIpv6RouterAdvertPrefixAdvertise=rlIpv6RouterAdvertPrefixAdvertise, rlIpNetToPhysicalTableClearScope=rlIpNetToPhysicalTableClearScope, rlInetRoutingDistanceRip=rlInetRoutingDistanceRip, rlInternInetCidrRouteInfo=rlInternInetCidrRouteInfo, rlInternInetStaticRouteDest=rlInternInetStaticRouteDest, rlipv6MaximumHopsNumber=rlipv6MaximumHopsNumber, rlInternInetCidrRouteDestType=rlInternInetCidrRouteDestType, rlIpv6DefaultTC=rlIpv6DefaultTC, rlIpv6HostForwardingDestType=rlIpv6HostForwardingDestType, rlIpv6HostForwardingPfxLen=rlIpv6HostForwardingPfxLen, rlIpv6GeneralPrefixTable=rlIpv6GeneralPrefixTable, rlIpv6TunnelToIPv6DbTable=rlIpv6TunnelToIPv6DbTable, rlipv6InterfaceIcmpUnreachSendEnable=rlipv6InterfaceIcmpUnreachSendEnable, rlInternInetCidrRouteNextHopAS=rlInternInetCidrRouteNextHopAS, rlIpv6GeneralPrefixRowStatus=rlIpv6GeneralPrefixRowStatus, PYSNMP_MODULE_ID=rlIPv6, rlIpv6HostForwardingDest=rlIpv6HostForwardingDest, rlInetStaticRouteDest=rlInetStaticRouteDest, rlIpv6TunnelToIPv6TunnelType=rlIpv6TunnelToIPv6TunnelType, rlInternInetCidrRouteTable=rlInternInetCidrRouteTable, rlInetStaticRouteNextHopType=rlInetStaticRouteNextHopType, rlManagementIpv6Action=rlManagementIpv6Action, rlInternInetStaticRouteDestType=rlInternInetStaticRouteDestType, rlInternInetStaticRouteTable=rlInternInetStaticRouteTable, rlipv6InterfaceTable=rlipv6InterfaceTable, rlIpv6HostForwardingPathCost=rlIpv6HostForwardingPathCost, rlIpv6PathMtuTable=rlIpv6PathMtuTable, rlInternInetCidrRoutePolicy=rlInternInetCidrRoutePolicy, rlinetCidrRouteTable=rlinetCidrRouteTable, rlIpv6RouterAdvertPrefixAdvPreferredLifetime=rlIpv6RouterAdvertPrefixAdvPreferredLifetime, rlInternInetCidrRouteMetric5=rlInternInetCidrRouteMetric5, rlIpv6RouterAdvertPrefixInetAddr=rlIpv6RouterAdvertPrefixInetAddr, rlInetStaticRouteRowStatus=rlInetStaticRouteRowStatus, rlIpNetToPhysicalTableClearTable=rlIpNetToPhysicalTableClearTable, rlInternInetStaticRouteForwardingStatus=rlInternInetStaticRouteForwardingStatus, rlIpv6HostForwardingNextHop=rlIpv6HostForwardingNextHop, rlIpv6RouterAdvertRouterPreference=rlIpv6RouterAdvertRouterPreference, rlIpv6HostForwardingIfIndex=rlIpv6HostForwardingIfIndex, rlIpv6TunnelToIPv6DbEntry=rlIpv6TunnelToIPv6DbEntry, rlManagementIpv6=rlManagementIpv6, rlInetStaticRouteTable=rlInetStaticRouteTable, rlipv6EnabledByDefaultRemovedIfindex=rlipv6EnabledByDefaultRemovedIfindex, rlInternInetStaticRoutePfxLen=rlInternInetStaticRoutePfxLen, rlInternInetCidrRouteNextHop=rlInternInetCidrRouteNextHop, rlInternInetCidrRouteLifetime=rlInternInetCidrRouteLifetime, rlIpv6HostForwardingTable=rlIpv6HostForwardingTable, rlIpv6RouterAdvertPrefixIsDefault=rlIpv6RouterAdvertPrefixIsDefault, rlInternInetCidrRouteProto=rlInternInetCidrRouteProto, rlInternInetCidrRouteType=rlInternInetCidrRouteType, rlipNetToPhysicalIsRouter=rlipNetToPhysicalIsRouter, rlinetCidrRouteLifetime=rlinetCidrRouteLifetime, rlInternInetCidrRouteMetric2=rlInternInetCidrRouteMetric2, rlIpv6TunnelToIPv6PrefixLength=rlIpv6TunnelToIPv6PrefixLength, rlipv6IcmpErrorRatelimitInterval=rlipv6IcmpErrorRatelimitInterval, rlipv6InterfaceMLDVersion=rlipv6InterfaceMLDVersion, rlInetStaticRouteDestType=rlInetStaticRouteDestType, rlipNetToPhysicalEntry=rlipNetToPhysicalEntry, rlInternInetCidrRouteEntry=rlInternInetCidrRouteEntry, rlIpv6RouterAdvertPrefixAdvValidLifetime=rlIpv6RouterAdvertPrefixAdvValidLifetime, rlInetStaticRouteNextHop=rlInetStaticRouteNextHop, rlInternInetStaticRouteEntry=rlInternInetStaticRouteEntry, rlinetCidrRouteInfo=rlinetCidrRouteInfo, rlIpv6RouterAdvertPrefixOnLinkStatus=rlIpv6RouterAdvertPrefixOnLinkStatus, rlInternInetCidrRoutePfxLen=rlInternInetCidrRoutePfxLen, rlIpAddressTable=rlIpAddressTable, rlIpv6GeneralPrefixInetAddrPrefixLength=rlIpv6GeneralPrefixInetAddrPrefixLength, rlInetRoutingDistanceEntry=rlInetRoutingDistanceEntry, rlIpv6HostForwardingEntry=rlIpv6HostForwardingEntry, rlipNetToPhysicalReachableConfirmed=rlipNetToPhysicalReachableConfirmed, rlinetCidrRouteEntry=rlinetCidrRouteEntry, rlipv6InterfaceNdDadAttemps=rlipv6InterfaceNdDadAttemps, rlIpv6RouterAdvertPrefixIfIndex=rlIpv6RouterAdvertPrefixIfIndex, rlIpv6RouterAdvertPrefixRowStatus=rlIpv6RouterAdvertPrefixRowStatus, rlIpv6GeneralPrefixInterfaceId=rlIpv6GeneralPrefixInterfaceId, rlInternInetCidrRouteDest=rlInternInetCidrRouteDest, rlIpv6TunnelToIPv6Action=rlIpv6TunnelToIPv6Action, rlIpAddressPrefixLength=rlIpAddressPrefixLength)
