#
# PySNMP MIB module IPSECV1-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/IPSECV1-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 19:45:26 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, Integer, OctetString = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "Integer", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueRangeConstraint, ConstraintsIntersection, SingleValueConstraint, ValueSizeConstraint, ConstraintsUnion = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueRangeConstraint", "ConstraintsIntersection", "SingleValueConstraint", "ValueSizeConstraint", "ConstraintsUnion")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
NotificationType, TimeTicks, enterprises, Counter32, ModuleIdentity, Integer32, MibScalar, MibTable, MibTableRow, MibTableColumn, MibIdentifier, iso, IpAddress, ObjectIdentity, Gauge32, NotificationType, Bits, Counter64, Unsigned32 = mibBuilder.importSymbols("SNMPv2-SMI", "NotificationType", "TimeTicks", "enterprises", "Counter32", "ModuleIdentity", "Integer32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "MibIdentifier", "iso", "IpAddress", "ObjectIdentity", "Gauge32", "NotificationType", "Bits", "Counter64", "Unsigned32")
TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString")
class IPSIpAddress(OctetString):
    subtypeSpec = OctetString.subtypeSpec + ConstraintsUnion(ValueSizeConstraint(4, 4), ValueSizeConstraint(16, 16), )
ibmIROCroutingIpSec = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 9))
ipSecLevels = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 9, 1))
ipSecPhaseOne = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 9, 2))
ipSecPhaseTwo = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 9, 3))
ipSecHistory = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 9, 4))
ipSecTrapCntl = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 9, 5))
ipSecMibLevel = MibScalar((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 9, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipSecMibLevel.setStatus('mandatory')
ikeTunnelTable = MibTable((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 9, 2, 1), )
if mibBuilder.loadTexts: ikeTunnelTable.setStatus('mandatory')
ikeTunnelEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 9, 2, 1, 1), ).setIndexNames((0, "IPSECV1-MIB", "ikeTunnelIndex"))
if mibBuilder.loadTexts: ikeTunnelEntry.setStatus('mandatory')
ikeTunnelIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 9, 2, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ikeTunnelIndex.setStatus('mandatory')
ikeTunnelId = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 9, 2, 1, 1, 2), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ikeTunnelId.setStatus('mandatory')
ikeTunnelLocalAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 9, 2, 1, 1, 3), IPSIpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ikeTunnelLocalAddr.setStatus('mandatory')
ikeTunnelLocalName = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 9, 2, 1, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ikeTunnelLocalName.setStatus('mandatory')
ikeTunnelRemoteAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 9, 2, 1, 1, 5), IPSIpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ikeTunnelRemoteAddr.setStatus('mandatory')
ikeTunnelRemoteName = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 9, 2, 1, 1, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ikeTunnelRemoteName.setStatus('mandatory')
ikeTunnelNegoMode = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 9, 2, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("main", 1), ("aggressive", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ikeTunnelNegoMode.setStatus('mandatory')
ikeTunnelLifetime = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 9, 2, 1, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ikeTunnelLifetime.setStatus('mandatory')
ikeTunnelActiveTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 9, 2, 1, 1, 9), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ikeTunnelActiveTime.setStatus('mandatory')
ikeTunnelSaRefreshThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 9, 2, 1, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ikeTunnelSaRefreshThreshold.setStatus('mandatory')
ikeTunnelTotalRefreshes = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 9, 2, 1, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ikeTunnelTotalRefreshes.setStatus('mandatory')
ikeTunnelInOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 9, 2, 1, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ikeTunnelInOctets.setStatus('mandatory')
ikeTunnelInPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 9, 2, 1, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ikeTunnelInPkts.setStatus('mandatory')
ikeTunnelInDropPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 9, 2, 1, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ikeTunnelInDropPkts.setStatus('mandatory')
ikeTunnelInNotifys = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 9, 2, 1, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ikeTunnelInNotifys.setStatus('mandatory')
ikeTunnelInP2Proposals = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 9, 2, 1, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ikeTunnelInP2Proposals.setStatus('mandatory')
ikeTunnelInP2ProposalInvalids = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 9, 2, 1, 1, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ikeTunnelInP2ProposalInvalids.setStatus('mandatory')
ikeTunnelInP2ProposalRejects = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 9, 2, 1, 1, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ikeTunnelInP2ProposalRejects.setStatus('mandatory')
ikeTunnelInSaDeleteRequests = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 9, 2, 1, 1, 19), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ikeTunnelInSaDeleteRequests.setStatus('mandatory')
ikeTunnelOutOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 9, 2, 1, 1, 20), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ikeTunnelOutOctets.setStatus('mandatory')
ikeTunnelOutPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 9, 2, 1, 1, 21), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ikeTunnelOutPkts.setStatus('mandatory')
ikeTunnelOutDropPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 9, 2, 1, 1, 22), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ikeTunnelOutDropPkts.setStatus('mandatory')
ikeTunnelOutNotifys = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 9, 2, 1, 1, 23), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ikeTunnelOutNotifys.setStatus('mandatory')
ikeTunnelOutP2Proposals = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 9, 2, 1, 1, 24), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ikeTunnelOutP2Proposals.setStatus('mandatory')
ikeTunnelOutP2ProposalRejects = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 9, 2, 1, 1, 25), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ikeTunnelOutP2ProposalRejects.setStatus('mandatory')
ikeTunnelOutSaDeleteRequests = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 9, 2, 1, 1, 26), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ikeTunnelOutSaDeleteRequests.setStatus('mandatory')
ikeTunnelStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 9, 2, 1, 1, 27), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("active", 1), ("destroy", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ikeTunnelStatus.setStatus('mandatory')
ipSecGlobal = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 9, 3, 1))
ipSecGlobalActiveTunnels = MibScalar((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 9, 3, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipSecGlobalActiveTunnels.setStatus('mandatory')
ipSecGlobalPreviousTunnels = MibScalar((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 9, 3, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipSecGlobalPreviousTunnels.setStatus('mandatory')
ipSecGlobalInOctets = MibScalar((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 9, 3, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipSecGlobalInOctets.setStatus('mandatory')
ipSecGlobalInPkts = MibScalar((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 9, 3, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipSecGlobalInPkts.setStatus('mandatory')
ipSecGlobalInDrops = MibScalar((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 9, 3, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipSecGlobalInDrops.setStatus('mandatory')
ipSecGlobalInAuths = MibScalar((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 9, 3, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipSecGlobalInAuths.setStatus('mandatory')
ipSecGlobalInAuthFails = MibScalar((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 9, 3, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipSecGlobalInAuthFails.setStatus('mandatory')
ipSecGlobalInDecrypts = MibScalar((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 9, 3, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipSecGlobalInDecrypts.setStatus('mandatory')
ipSecGlobalInDecryptFails = MibScalar((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 9, 3, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipSecGlobalInDecryptFails.setStatus('mandatory')
ipSecGlobalOutOctets = MibScalar((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 9, 3, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipSecGlobalOutOctets.setStatus('mandatory')
ipSecGlobalOutPkts = MibScalar((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 9, 3, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipSecGlobalOutPkts.setStatus('mandatory')
ipSecGlobalOutDrops = MibScalar((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 9, 3, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipSecGlobalOutDrops.setStatus('mandatory')
ipSecGlobalOutAuths = MibScalar((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 9, 3, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipSecGlobalOutAuths.setStatus('mandatory')
ipSecGlobalOutAuthFails = MibScalar((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 9, 3, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipSecGlobalOutAuthFails.setStatus('mandatory')
ipSecGlobalOutEncrypts = MibScalar((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 9, 3, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipSecGlobalOutEncrypts.setStatus('mandatory')
ipSecGlobalOutEncryptFails = MibScalar((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 9, 3, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipSecGlobalOutEncryptFails.setStatus('mandatory')
ipSecGlobalInOctWraps = MibScalar((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 9, 3, 1, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipSecGlobalInOctWraps.setStatus('mandatory')
ipSecGlobalOutOctWraps = MibScalar((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 9, 3, 1, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipSecGlobalOutOctWraps.setStatus('mandatory')
ipSecTunnelTable = MibTable((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 9, 3, 2), )
if mibBuilder.loadTexts: ipSecTunnelTable.setStatus('mandatory')
ipSecTunnelEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 9, 3, 2, 1), ).setIndexNames((0, "IPSECV1-MIB", "ipSecTunnelIndex"))
if mibBuilder.loadTexts: ipSecTunnelEntry.setStatus('mandatory')
ipSecTunnelIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 9, 3, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipSecTunnelIndex.setStatus('mandatory')
ipSecTunnelId = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 9, 3, 2, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipSecTunnelId.setStatus('mandatory')
ipSecTunnelIkeTunnelIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 9, 3, 2, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipSecTunnelIkeTunnelIndex.setStatus('mandatory')
ipSecTunnelLocalAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 9, 3, 2, 1, 4), IPSIpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipSecTunnelLocalAddr.setStatus('mandatory')
ipSecTunnelRemoteAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 9, 3, 2, 1, 5), IPSIpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipSecTunnelRemoteAddr.setStatus('mandatory')
ipSecTunnelKeyType = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 9, 3, 2, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("ike", 1), ("manual", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipSecTunnelKeyType.setStatus('mandatory')
ipSecTunnelEncapMode = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 9, 3, 2, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("tunnel", 1), ("transport", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipSecTunnelEncapMode.setStatus('mandatory')
ipSecTunnelLifetime = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 9, 3, 2, 1, 8), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipSecTunnelLifetime.setStatus('mandatory')
ipSecTunnelActiveTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 9, 3, 2, 1, 9), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipSecTunnelActiveTime.setStatus('mandatory')
ipSecTunnelSaRefreshThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 9, 3, 2, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipSecTunnelSaRefreshThreshold.setStatus('mandatory')
ipSecTunnelTotalRefreshes = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 9, 3, 2, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipSecTunnelTotalRefreshes.setStatus('mandatory')
ipSecTunnelExpiredSaInstances = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 9, 3, 2, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipSecTunnelExpiredSaInstances.setStatus('mandatory')
ipSecTunnelCurrentSaInstances = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 9, 3, 2, 1, 13), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipSecTunnelCurrentSaInstances.setStatus('mandatory')
ipSecTunnelInSaEncrypt = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 9, 3, 2, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12))).clone(namedValues=NamedValues(("espNone", 1), ("espDesIv64", 2), ("espDes", 3), ("esp3Des", 4), ("espRc5", 5), ("espIdea", 6), ("espCast", 7), ("espBlowfish", 8), ("esp3iDes", 9), ("espDesIv32", 10), ("espRc4", 11), ("espCdmf", 12)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipSecTunnelInSaEncrypt.setStatus('mandatory')
ipSecTunnelInSaAuthAlgo = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 9, 3, 2, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("none", 1), ("hmacMd5", 2), ("hmacSha", 3), ("desMac", 4), ("kpdk", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipSecTunnelInSaAuthAlgo.setStatus('mandatory')
ipSecTunnelOutSaEncrypt = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 9, 3, 2, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12))).clone(namedValues=NamedValues(("espNone", 1), ("espDesIv64", 2), ("espDes", 3), ("esp3Des", 4), ("espRc5", 5), ("espIdea", 6), ("espCast", 7), ("espBlowfish", 8), ("esp3iDes", 9), ("espDesIv32", 10), ("espRc4", 11), ("espCdmf", 12)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipSecTunnelOutSaEncrypt.setStatus('mandatory')
ipSecTunnelOutSaAuthAlgo = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 9, 3, 2, 1, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("none", 1), ("hmacMd5", 2), ("hmacSha", 3), ("desMac", 4), ("kpdk", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipSecTunnelOutSaAuthAlgo.setStatus('mandatory')
ipSecTunnelInOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 9, 3, 2, 1, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipSecTunnelInOctets.setStatus('mandatory')
ipSecTunnelInDecompOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 9, 3, 2, 1, 19), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipSecTunnelInDecompOctets.setStatus('mandatory')
ipSecTunnelInPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 9, 3, 2, 1, 20), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipSecTunnelInPkts.setStatus('mandatory')
ipSecTunnelInDropPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 9, 3, 2, 1, 21), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipSecTunnelInDropPkts.setStatus('mandatory')
ipSecTunnelInAuths = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 9, 3, 2, 1, 22), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipSecTunnelInAuths.setStatus('mandatory')
ipSecTunnelInAuthFails = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 9, 3, 2, 1, 23), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipSecTunnelInAuthFails.setStatus('mandatory')
ipSecTunnelInDecrypts = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 9, 3, 2, 1, 24), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipSecTunnelInDecrypts.setStatus('mandatory')
ipSecTunnelInDecryptFails = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 9, 3, 2, 1, 25), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipSecTunnelInDecryptFails.setStatus('mandatory')
ipSecTunnelOutOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 9, 3, 2, 1, 26), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipSecTunnelOutOctets.setStatus('mandatory')
ipSecTunnelOutUncompOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 9, 3, 2, 1, 27), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipSecTunnelOutUncompOctets.setStatus('mandatory')
ipSecTunnelOutPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 9, 3, 2, 1, 28), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipSecTunnelOutPkts.setStatus('mandatory')
ipSecTunnelOutDropPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 9, 3, 2, 1, 29), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipSecTunnelOutDropPkts.setStatus('mandatory')
ipSecTunnelOutAuths = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 9, 3, 2, 1, 30), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipSecTunnelOutAuths.setStatus('mandatory')
ipSecTunnelOutAuthFails = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 9, 3, 2, 1, 31), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipSecTunnelOutAuthFails.setStatus('mandatory')
ipSecTunnelOutEncrypts = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 9, 3, 2, 1, 32), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipSecTunnelOutEncrypts.setStatus('mandatory')
ipSecTunnelOutEncryptFails = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 9, 3, 2, 1, 33), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipSecTunnelOutEncryptFails.setStatus('mandatory')
ipSecTunnelStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 9, 3, 2, 1, 34), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("active", 1), ("destroy", 2), ("disabled", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipSecTunnelStatus.setStatus('mandatory')
ipSecTunnelInOctWraps = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 9, 3, 2, 1, 35), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipSecTunnelInOctWraps.setStatus('mandatory')
ipSecTunnelInDecompOctWraps = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 9, 3, 2, 1, 36), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipSecTunnelInDecompOctWraps.setStatus('mandatory')
ipSecTunnelOutOctWraps = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 9, 3, 2, 1, 37), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipSecTunnelOutOctWraps.setStatus('mandatory')
ipSecTunnelOutUncompOctWraps = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 9, 3, 2, 1, 38), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipSecTunnelOutUncompOctWraps.setStatus('mandatory')
ipSecClientTable = MibTable((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 9, 3, 3), )
if mibBuilder.loadTexts: ipSecClientTable.setStatus('mandatory')
ipSecClientEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 9, 3, 3, 1), ).setIndexNames((0, "IPSECV1-MIB", "ipSecTunnelIndex"), (0, "IPSECV1-MIB", "ipSecClientIndex"))
if mibBuilder.loadTexts: ipSecClientEntry.setStatus('mandatory')
ipSecClientIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 9, 3, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipSecClientIndex.setStatus('mandatory')
ipSecClientLocalName = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 9, 3, 3, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipSecClientLocalName.setStatus('mandatory')
ipSecClientLocalType = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 9, 3, 3, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("ipAddrRangeEntry", 1), ("ipSubnetMaskEntry", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipSecClientLocalType.setStatus('mandatory')
ipSecClientLocalProtocol = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 9, 3, 3, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipSecClientLocalProtocol.setStatus('mandatory')
ipSecClientLocalSubnetMask = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 9, 3, 3, 1, 5), IPSIpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipSecClientLocalSubnetMask.setStatus('mandatory')
ipSecClientLocalHiAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 9, 3, 3, 1, 6), IPSIpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipSecClientLocalHiAddr.setStatus('mandatory')
ipSecClientLocalLoAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 9, 3, 3, 1, 7), IPSIpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipSecClientLocalLoAddr.setStatus('mandatory')
ipSecClientLocalPort = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 9, 3, 3, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipSecClientLocalPort.setStatus('mandatory')
ipSecClientRemoteName = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 9, 3, 3, 1, 9), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipSecClientRemoteName.setStatus('mandatory')
ipSecClientRemoteType = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 9, 3, 3, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("ipAddrRangeEntry", 1), ("ipSubnetMaskEntry", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipSecClientRemoteType.setStatus('mandatory')
ipSecClientRemoteProtocol = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 9, 3, 3, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipSecClientRemoteProtocol.setStatus('mandatory')
ipSecClientRemoteSubnetMask = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 9, 3, 3, 1, 12), IPSIpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipSecClientRemoteSubnetMask.setStatus('mandatory')
ipSecClientRemoteHiAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 9, 3, 3, 1, 13), IPSIpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipSecClientRemoteHiAddr.setStatus('mandatory')
ipSecClientRemoteLoAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 9, 3, 3, 1, 14), IPSIpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipSecClientRemoteLoAddr.setStatus('mandatory')
ipSecClientRemotePort = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 9, 3, 3, 1, 15), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipSecClientRemotePort.setStatus('mandatory')
ipSecSpiTable = MibTable((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 9, 3, 4), )
if mibBuilder.loadTexts: ipSecSpiTable.setStatus('mandatory')
ipSecSpiEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 9, 3, 4, 1), ).setIndexNames((0, "IPSECV1-MIB", "ipSecTunnelIndex"), (0, "IPSECV1-MIB", "ipSecSpiIndex"))
if mibBuilder.loadTexts: ipSecSpiEntry.setStatus('mandatory')
ipSecSpiIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 9, 3, 4, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipSecSpiIndex.setStatus('mandatory')
ipSecSpiDirection = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 9, 3, 4, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("in", 1), ("out", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipSecSpiDirection.setStatus('mandatory')
ipSecSpiValue = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 9, 3, 4, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipSecSpiValue.setStatus('mandatory')
ipSecSpiProtocol = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 9, 3, 4, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("ah", 1), ("esp", 2), ("ipcomp", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipSecSpiProtocol.setStatus('mandatory')
ipSecSpiStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 9, 3, 4, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("active", 1), ("expiring", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipSecSpiStatus.setStatus('mandatory')
ipSecTunnelHistTable = MibTable((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 9, 4, 2), )
if mibBuilder.loadTexts: ipSecTunnelHistTable.setStatus('mandatory')
ipSecTunnelHistEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 9, 4, 2, 1), ).setIndexNames((0, "IPSECV1-MIB", "ipSecTunnelHistIndex"))
if mibBuilder.loadTexts: ipSecTunnelHistEntry.setStatus('mandatory')
ipSecTunnelHistIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 9, 4, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipSecTunnelHistIndex.setStatus('mandatory')
ipSecTunnelHistId = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 9, 4, 2, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipSecTunnelHistId.setStatus('mandatory')
ipSecTunnelHistLocalAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 9, 4, 2, 1, 3), IPSIpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipSecTunnelHistLocalAddr.setStatus('mandatory')
ipSecTunnelHistRemoteAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 9, 4, 2, 1, 4), IPSIpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipSecTunnelHistRemoteAddr.setStatus('mandatory')
ipSecTunnelHistActiveTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 9, 4, 2, 1, 5), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipSecTunnelHistActiveTime.setStatus('mandatory')
ipSecTunnelHistTotalRefreshes = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 9, 4, 2, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipSecTunnelHistTotalRefreshes.setStatus('mandatory')
ipSecTunnelHistTotalSas = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 9, 4, 2, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipSecTunnelHistTotalSas.setStatus('mandatory')
ipSecTunnelHistInOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 9, 4, 2, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipSecTunnelHistInOctets.setStatus('mandatory')
ipSecTunnelHistInDecompOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 9, 4, 2, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipSecTunnelHistInDecompOctets.setStatus('mandatory')
ipSecTunnelHistInPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 9, 4, 2, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipSecTunnelHistInPkts.setStatus('mandatory')
ipSecTunnelHistInDropPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 9, 4, 2, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipSecTunnelHistInDropPkts.setStatus('mandatory')
ipSecTunnelHistInAuths = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 9, 4, 2, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipSecTunnelHistInAuths.setStatus('mandatory')
ipSecTunnelHistInAuthFails = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 9, 4, 2, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipSecTunnelHistInAuthFails.setStatus('mandatory')
ipSecTunnelHistInDecrypts = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 9, 4, 2, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipSecTunnelHistInDecrypts.setStatus('mandatory')
ipSecTunnelHistInDecryptFails = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 9, 4, 2, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipSecTunnelHistInDecryptFails.setStatus('mandatory')
ipSecTunnelHistOutOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 9, 4, 2, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipSecTunnelHistOutOctets.setStatus('mandatory')
ipSecTunnelHistOutUncompOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 9, 4, 2, 1, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipSecTunnelHistOutUncompOctets.setStatus('mandatory')
ipSecTunnelHistOutPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 9, 4, 2, 1, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipSecTunnelHistOutPkts.setStatus('mandatory')
ipSecTunnelHistOutDropPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 9, 4, 2, 1, 19), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipSecTunnelHistOutDropPkts.setStatus('mandatory')
ipSecTunnelHistOutAuths = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 9, 4, 2, 1, 20), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipSecTunnelHistOutAuths.setStatus('mandatory')
ipSecTunnelHistOutAuthFails = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 9, 4, 2, 1, 21), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipSecTunnelHistOutAuthFails.setStatus('mandatory')
ipSecTunnelHistOutEncrypts = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 9, 4, 2, 1, 22), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipSecTunnelHistOutEncrypts.setStatus('mandatory')
ipSecTunnelHistOutEncryptFails = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 9, 4, 2, 1, 23), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipSecTunnelHistOutEncryptFails.setStatus('mandatory')
ipSecTunnelHistInOctWraps = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 9, 4, 2, 1, 24), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipSecTunnelHistInOctWraps.setStatus('mandatory')
ipSecTunnelHistInDecompOctWraps = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 9, 4, 2, 1, 25), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipSecTunnelHistInDecompOctWraps.setStatus('mandatory')
ipSecTunnelHistOutOctWraps = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 9, 4, 2, 1, 26), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipSecTunnelHistOutOctWraps.setStatus('mandatory')
ipSecTunnelHistOutUncompOctWraps = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 9, 4, 2, 1, 27), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipSecTunnelHistOutUncompOctWraps.setStatus('mandatory')
ipSecFailTable = MibTable((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 9, 4, 3), )
if mibBuilder.loadTexts: ipSecFailTable.setStatus('mandatory')
ipSecFailEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 9, 4, 3, 1), ).setIndexNames((0, "IPSECV1-MIB", "ipSecFailIndex"))
if mibBuilder.loadTexts: ipSecFailEntry.setStatus('mandatory')
ipSecFailIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 9, 4, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipSecFailIndex.setStatus('mandatory')
ipSecFailReason = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 9, 4, 3, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("other", 1), ("sendAuthentication", 2), ("recvAuthentication", 3), ("decryption", 4), ("encryption", 5), ("compression", 6), ("decompression", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipSecFailReason.setStatus('mandatory')
ipSecFailTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 9, 4, 3, 1, 3), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipSecFailTime.setStatus('mandatory')
ipSecFailTunnelIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 9, 4, 3, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipSecFailTunnelIndex.setStatus('mandatory')
ipSecFailTunnelId = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 9, 4, 3, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipSecFailTunnelId.setStatus('mandatory')
ipSecFailSaSpi = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 9, 4, 3, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipSecFailSaSpi.setStatus('mandatory')
ipSecFailPktSrcAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 9, 4, 3, 1, 7), IPSIpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipSecFailPktSrcAddr.setStatus('mandatory')
ipSecFailPktDstAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 9, 4, 3, 1, 8), IPSIpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipSecFailPktDstAddr.setStatus('mandatory')
ipSecTrapCntlIkeTunnelStart = MibScalar((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 9, 5, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('enabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipSecTrapCntlIkeTunnelStart.setStatus('mandatory')
ipSecTrapCntlIkeTunnelStop = MibScalar((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 9, 5, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('enabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipSecTrapCntlIkeTunnelStop.setStatus('mandatory')
ipSecTrapCntlP2TunnelStart = MibScalar((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 9, 5, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('enabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipSecTrapCntlP2TunnelStart.setStatus('mandatory')
ipSecTrapCntlP2TunnelStop = MibScalar((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 9, 5, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('enabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipSecTrapCntlP2TunnelStop.setStatus('mandatory')
ipSecTrapCntlAuthFail = MibScalar((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 9, 5, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('enabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipSecTrapCntlAuthFail.setStatus('mandatory')
ipSecTrapCntlDecryptFail = MibScalar((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 9, 5, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('enabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipSecTrapCntlDecryptFail.setStatus('mandatory')
ikeTunnelStart = NotificationType((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 9) + (0,1)).setObjects(("IPSECV1-MIB", "ikeTunnelIndex"), ("IPSECV1-MIB", "ikeTunnelId"))
ikeTunnelStop = NotificationType((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 9) + (0,2)).setObjects(("IPSECV1-MIB", "ikeTunnelIndex"), ("IPSECV1-MIB", "ikeTunnelId"), ("IPSECV1-MIB", "ikeTunnelActiveTime"))
ipSecTunnelStart = NotificationType((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 9) + (0,3)).setObjects(("IPSECV1-MIB", "ipSecTunnelIndex"), ("IPSECV1-MIB", "ipSecTunnelId"))
ipSecTunnelStop = NotificationType((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 9) + (0,4)).setObjects(("IPSECV1-MIB", "ipSecTunnelIndex"), ("IPSECV1-MIB", "ipSecTunnelId"), ("IPSECV1-MIB", "ipSecTunnelActiveTime"))
ipSecAuthFail = NotificationType((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 9) + (0,5)).setObjects(("IPSECV1-MIB", "ipSecTunnelIndex"), ("IPSECV1-MIB", "ipSecTunnelId"), ("IPSECV1-MIB", "ipSecFailTime"), ("IPSECV1-MIB", "ipSecFailPktSrcAddr"), ("IPSECV1-MIB", "ipSecFailPktDstAddr"))
ipSecDecryptFail = NotificationType((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 9) + (0,6)).setObjects(("IPSECV1-MIB", "ipSecTunnelIndex"), ("IPSECV1-MIB", "ipSecTunnelId"), ("IPSECV1-MIB", "ipSecFailTime"), ("IPSECV1-MIB", "ipSecFailPktSrcAddr"), ("IPSECV1-MIB", "ipSecFailPktDstAddr"))
mibBuilder.exportSymbols("IPSECV1-MIB", ipSecTunnelInDropPkts=ipSecTunnelInDropPkts, ipSecTunnelHistInDecrypts=ipSecTunnelHistInDecrypts, ipSecGlobalInAuthFails=ipSecGlobalInAuthFails, ikeTunnelNegoMode=ikeTunnelNegoMode, ipSecSpiProtocol=ipSecSpiProtocol, ikeTunnelRemoteName=ikeTunnelRemoteName, ipSecTunnelOutUncompOctWraps=ipSecTunnelOutUncompOctWraps, ipSecTunnelHistOutOctWraps=ipSecTunnelHistOutOctWraps, ipSecTunnelHistOutAuths=ipSecTunnelHistOutAuths, ipSecGlobalOutAuthFails=ipSecGlobalOutAuthFails, ikeTunnelInNotifys=ikeTunnelInNotifys, ipSecClientLocalPort=ipSecClientLocalPort, ipSecTunnelHistOutDropPkts=ipSecTunnelHistOutDropPkts, ipSecTunnelHistInDecompOctets=ipSecTunnelHistInDecompOctets, ikeTunnelInPkts=ikeTunnelInPkts, ipSecTunnelOutDropPkts=ipSecTunnelOutDropPkts, ipSecTunnelInSaAuthAlgo=ipSecTunnelInSaAuthAlgo, ipSecTunnelOutAuths=ipSecTunnelOutAuths, ipSecGlobalOutAuths=ipSecGlobalOutAuths, ipSecTunnelId=ipSecTunnelId, ipSecMibLevel=ipSecMibLevel, ipSecClientRemoteLoAddr=ipSecClientRemoteLoAddr, ikeTunnelLocalAddr=ikeTunnelLocalAddr, ipSecSpiDirection=ipSecSpiDirection, ikeTunnelOutSaDeleteRequests=ikeTunnelOutSaDeleteRequests, ipSecTrapCntlAuthFail=ipSecTrapCntlAuthFail, IPSIpAddress=IPSIpAddress, ipSecTunnelStatus=ipSecTunnelStatus, ipSecTunnelOutAuthFails=ipSecTunnelOutAuthFails, ipSecTunnelHistInOctets=ipSecTunnelHistInOctets, ipSecClientLocalLoAddr=ipSecClientLocalLoAddr, ikeTunnelInP2ProposalRejects=ikeTunnelInP2ProposalRejects, ipSecClientEntry=ipSecClientEntry, ipSecTunnelOutSaEncrypt=ipSecTunnelOutSaEncrypt, ipSecTunnelOutOctets=ipSecTunnelOutOctets, ipSecClientLocalHiAddr=ipSecClientLocalHiAddr, ikeTunnelOutNotifys=ikeTunnelOutNotifys, ipSecTrapCntlIkeTunnelStop=ipSecTrapCntlIkeTunnelStop, ikeTunnelInP2ProposalInvalids=ikeTunnelInP2ProposalInvalids, ikeTunnelLifetime=ikeTunnelLifetime, ipSecTunnelHistInAuthFails=ipSecTunnelHistInAuthFails, ipSecGlobalOutOctets=ipSecGlobalOutOctets, ipSecTunnelHistIndex=ipSecTunnelHistIndex, ipSecTunnelHistTotalRefreshes=ipSecTunnelHistTotalRefreshes, ikeTunnelTotalRefreshes=ikeTunnelTotalRefreshes, ipSecPhaseOne=ipSecPhaseOne, ipSecClientRemoteProtocol=ipSecClientRemoteProtocol, ipSecGlobalInOctWraps=ipSecGlobalInOctWraps, ikeTunnelInDropPkts=ikeTunnelInDropPkts, ipSecTunnelHistOutPkts=ipSecTunnelHistOutPkts, ipSecTunnelStart=ipSecTunnelStart, ipSecGlobalOutOctWraps=ipSecGlobalOutOctWraps, ikeTunnelInOctets=ikeTunnelInOctets, ipSecTunnelHistOutEncrypts=ipSecTunnelHistOutEncrypts, ipSecFailEntry=ipSecFailEntry, ipSecFailPktDstAddr=ipSecFailPktDstAddr, ipSecTunnelInOctets=ipSecTunnelInOctets, ipSecGlobalInDrops=ipSecGlobalInDrops, ipSecGlobalInAuths=ipSecGlobalInAuths, ipSecTrapCntlP2TunnelStop=ipSecTrapCntlP2TunnelStop, ikeTunnelStart=ikeTunnelStart, ipSecTrapCntlDecryptFail=ipSecTrapCntlDecryptFail, ikeTunnelId=ikeTunnelId, ipSecTunnelOutEncrypts=ipSecTunnelOutEncrypts, ipSecGlobalOutPkts=ipSecGlobalOutPkts, ipSecFailTunnelId=ipSecFailTunnelId, ipSecTunnelHistInPkts=ipSecTunnelHistInPkts, ipSecGlobalInPkts=ipSecGlobalInPkts, ipSecTunnelHistInDecryptFails=ipSecTunnelHistInDecryptFails, ipSecTunnelHistOutUncompOctets=ipSecTunnelHistOutUncompOctets, ipSecGlobalInDecrypts=ipSecGlobalInDecrypts, ikeTunnelOutP2ProposalRejects=ikeTunnelOutP2ProposalRejects, ipSecTunnelCurrentSaInstances=ipSecTunnelCurrentSaInstances, ikeTunnelOutP2Proposals=ikeTunnelOutP2Proposals, ipSecTunnelInAuthFails=ipSecTunnelInAuthFails, ipSecTunnelInAuths=ipSecTunnelInAuths, ikeTunnelOutPkts=ikeTunnelOutPkts, ipSecTunnelHistRemoteAddr=ipSecTunnelHistRemoteAddr, ipSecGlobalActiveTunnels=ipSecGlobalActiveTunnels, ipSecTunnelLifetime=ipSecTunnelLifetime, ipSecClientIndex=ipSecClientIndex, ipSecTunnelHistInDropPkts=ipSecTunnelHistInDropPkts, ipSecClientRemotePort=ipSecClientRemotePort, ipSecTunnelHistTotalSas=ipSecTunnelHistTotalSas, ipSecSpiIndex=ipSecSpiIndex, ipSecSpiValue=ipSecSpiValue, ipSecPhaseTwo=ipSecPhaseTwo, ipSecTunnelIndex=ipSecTunnelIndex, ipSecSpiStatus=ipSecSpiStatus, ipSecTunnelHistInDecompOctWraps=ipSecTunnelHistInDecompOctWraps, ipSecTunnelInDecryptFails=ipSecTunnelInDecryptFails, ipSecTunnelOutEncryptFails=ipSecTunnelOutEncryptFails, ipSecTrapCntlIkeTunnelStart=ipSecTrapCntlIkeTunnelStart, ipSecTunnelRemoteAddr=ipSecTunnelRemoteAddr, ipSecTunnelTable=ipSecTunnelTable, ikeTunnelIndex=ikeTunnelIndex, ipSecFailIndex=ipSecFailIndex, ipSecTunnelOutOctWraps=ipSecTunnelOutOctWraps, ipSecTunnelHistInAuths=ipSecTunnelHistInAuths, ikeTunnelInP2Proposals=ikeTunnelInP2Proposals, ipSecTunnelExpiredSaInstances=ipSecTunnelExpiredSaInstances, ipSecTunnelInSaEncrypt=ipSecTunnelInSaEncrypt, ipSecTunnelInPkts=ipSecTunnelInPkts, ipSecTunnelHistOutAuthFails=ipSecTunnelHistOutAuthFails, ipSecClientRemoteHiAddr=ipSecClientRemoteHiAddr, ipSecClientRemoteName=ipSecClientRemoteName, ipSecTunnelOutPkts=ipSecTunnelOutPkts, ipSecTunnelEntry=ipSecTunnelEntry, ipSecGlobalOutDrops=ipSecGlobalOutDrops, ipSecGlobalPreviousTunnels=ipSecGlobalPreviousTunnels, ipSecGlobal=ipSecGlobal, ipSecTunnelOutSaAuthAlgo=ipSecTunnelOutSaAuthAlgo, ipSecTunnelHistOutEncryptFails=ipSecTunnelHistOutEncryptFails, ipSecTunnelInOctWraps=ipSecTunnelInOctWraps, ipSecFailTime=ipSecFailTime, ipSecTunnelHistOutOctets=ipSecTunnelHistOutOctets, ipSecTunnelHistId=ipSecTunnelHistId, ipSecTunnelHistTable=ipSecTunnelHistTable, ipSecTunnelHistEntry=ipSecTunnelHistEntry, ipSecTunnelTotalRefreshes=ipSecTunnelTotalRefreshes, ipSecGlobalOutEncrypts=ipSecGlobalOutEncrypts, ipSecTrapCntlP2TunnelStart=ipSecTrapCntlP2TunnelStart, ipSecTunnelInDecompOctWraps=ipSecTunnelInDecompOctWraps, ipSecClientTable=ipSecClientTable, ipSecTunnelKeyType=ipSecTunnelKeyType, ipSecLevels=ipSecLevels, ipSecFailPktSrcAddr=ipSecFailPktSrcAddr, ipSecTunnelSaRefreshThreshold=ipSecTunnelSaRefreshThreshold, ibmIROCroutingIpSec=ibmIROCroutingIpSec, ipSecFailTable=ipSecFailTable, ikeTunnelEntry=ikeTunnelEntry, ipSecClientLocalSubnetMask=ipSecClientLocalSubnetMask, ipSecTunnelHistLocalAddr=ipSecTunnelHistLocalAddr, ipSecClientRemoteType=ipSecClientRemoteType, ikeTunnelTable=ikeTunnelTable, ipSecTunnelInDecompOctets=ipSecTunnelInDecompOctets, ipSecTunnelEncapMode=ipSecTunnelEncapMode, ipSecHistory=ipSecHistory, ikeTunnelOutDropPkts=ikeTunnelOutDropPkts, ipSecTunnelIkeTunnelIndex=ipSecTunnelIkeTunnelIndex, ipSecClientLocalType=ipSecClientLocalType, ikeTunnelRemoteAddr=ikeTunnelRemoteAddr, ipSecTunnelOutUncompOctets=ipSecTunnelOutUncompOctets, ipSecGlobalInDecryptFails=ipSecGlobalInDecryptFails, ikeTunnelSaRefreshThreshold=ikeTunnelSaRefreshThreshold, ipSecGlobalOutEncryptFails=ipSecGlobalOutEncryptFails, ipSecFailSaSpi=ipSecFailSaSpi, ipSecTunnelActiveTime=ipSecTunnelActiveTime, ipSecTunnelLocalAddr=ipSecTunnelLocalAddr, ipSecTunnelHistOutUncompOctWraps=ipSecTunnelHistOutUncompOctWraps, ikeTunnelActiveTime=ikeTunnelActiveTime, ikeTunnelOutOctets=ikeTunnelOutOctets, ipSecFailReason=ipSecFailReason, ipSecGlobalInOctets=ipSecGlobalInOctets, ipSecSpiEntry=ipSecSpiEntry, ipSecFailTunnelIndex=ipSecFailTunnelIndex, ikeTunnelInSaDeleteRequests=ikeTunnelInSaDeleteRequests, ipSecTunnelInDecrypts=ipSecTunnelInDecrypts, ipSecClientLocalProtocol=ipSecClientLocalProtocol, ipSecClientLocalName=ipSecClientLocalName, ipSecTunnelHistActiveTime=ipSecTunnelHistActiveTime, ipSecAuthFail=ipSecAuthFail, ikeTunnelStop=ikeTunnelStop, ipSecClientRemoteSubnetMask=ipSecClientRemoteSubnetMask, ipSecTrapCntl=ipSecTrapCntl, ikeTunnelLocalName=ikeTunnelLocalName, ikeTunnelStatus=ikeTunnelStatus, ipSecSpiTable=ipSecSpiTable, ipSecTunnelStop=ipSecTunnelStop, ipSecTunnelHistInOctWraps=ipSecTunnelHistInOctWraps, ipSecDecryptFail=ipSecDecryptFail)
