#
# PySNMP MIB module ALCATEL-IND1-PARTITIONED-MGR-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/ALCATEL-IND1-PARTITIONED-MGR-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 17:03:12 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
softentIND1Partmgr, = mibBuilder.importSymbols("ALCATEL-IND1-BASE", "softentIND1Partmgr")
Integer, OctetString, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "Integer", "OctetString", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueRangeConstraint, SingleValueConstraint, ConstraintsUnion, ConstraintsIntersection, ValueSizeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueRangeConstraint", "SingleValueConstraint", "ConstraintsUnion", "ConstraintsIntersection", "ValueSizeConstraint")
VlanId, = mibBuilder.importSymbols("Q-BRIDGE-MIB", "VlanId")
SnmpAdminString, = mibBuilder.importSymbols("SNMP-FRAMEWORK-MIB", "SnmpAdminString")
NotificationGroup, ObjectGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ObjectGroup", "ModuleCompliance")
ModuleIdentity, Unsigned32, MibScalar, MibTable, MibTableRow, MibTableColumn, Bits, ObjectIdentity, Gauge32, Counter32, IpAddress, NotificationType, MibIdentifier, iso, Integer32, Counter64, TimeTicks = mibBuilder.importSymbols("SNMPv2-SMI", "ModuleIdentity", "Unsigned32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Bits", "ObjectIdentity", "Gauge32", "Counter32", "IpAddress", "NotificationType", "MibIdentifier", "iso", "Integer32", "Counter64", "TimeTicks")
DisplayString, RowStatus, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "RowStatus", "TextualConvention")
alcatelIND1PartitionedMgrMIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 25, 1))
if mibBuilder.loadTexts: alcatelIND1PartitionedMgrMIB.setLastUpdated('200704030000Z')
if mibBuilder.loadTexts: alcatelIND1PartitionedMgrMIB.setOrganization('Alcatel-Lucent')
alcatelIND1PartitionedMgrMIBObjects = ObjectIdentity((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 25, 1, 1))
if mibBuilder.loadTexts: alcatelIND1PartitionedMgrMIBObjects.setStatus('current')
alcatelIND1PartitionedMgrMIBConformance = ObjectIdentity((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 25, 1, 2))
if mibBuilder.loadTexts: alcatelIND1PartitionedMgrMIBConformance.setStatus('current')
alcatelIND1PartitionedMgrMIBGroups = ObjectIdentity((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 25, 1, 2, 1))
if mibBuilder.loadTexts: alcatelIND1PartitionedMgrMIBGroups.setStatus('current')
alcatelIND1PartitionedMgrMIBCompliances = ObjectIdentity((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 25, 1, 2, 2))
if mibBuilder.loadTexts: alcatelIND1PartitionedMgrMIBCompliances.setStatus('current')
endUserProfileMgrMIB = MibIdentifier((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 25, 1, 1, 1))
class EndUserPortList(TextualConvention, Bits):
    status = 'current'
    namedValues = NamedValues(("port1", 0), ("port2", 1), ("port3", 2), ("port4", 3), ("port5", 4), ("port6", 5), ("port7", 6), ("port8", 7), ("port9", 8), ("port10", 9), ("port11", 10), ("port12", 11), ("port13", 12), ("port14", 13), ("port15", 14), ("port16", 15), ("port17", 16), ("port18", 17), ("port19", 18), ("port20", 19), ("port21", 20), ("port22", 21), ("port23", 22), ("port24", 23), ("port25", 24), ("port26", 25), ("port27", 26), ("port28", 27), ("port29", 28), ("port30", 29), ("port31", 30), ("port32", 31), ("port33", 32), ("port34", 33), ("port35", 34), ("port36", 35), ("port37", 36), ("port38", 37), ("port39", 38), ("port40", 39), ("port41", 40), ("port42", 41), ("port43", 42), ("port44", 43), ("port45", 44), ("port46", 45), ("port47", 46), ("port48", 47), ("port49", 48), ("port50", 49), ("port51", 50), ("port52", 51), ("port53", 52), ("port54", 53), ("port55", 54), ("port56", 55), ("port57", 56), ("port58", 57), ("port59", 58), ("port60", 59), ("port61", 60), ("port62", 61), ("port63", 62), ("port64", 63))

class EndUserProfileArea(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3))
    namedValues = NamedValues(("disable", 1), ("readOnly", 2), ("readWrite", 3))

endUserProfileTable = MibTable((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 25, 1, 1, 1, 1), )
if mibBuilder.loadTexts: endUserProfileTable.setStatus('current')
endUserProfileEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 25, 1, 1, 1, 1, 1), ).setIndexNames((1, "ALCATEL-IND1-PARTITIONED-MGR-MIB", "endUserProfileName"))
if mibBuilder.loadTexts: endUserProfileEntry.setStatus('current')
endUserProfileName = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 25, 1, 1, 1, 1, 1, 1), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(1, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: endUserProfileName.setStatus('current')
endUserProfileAreaPhysical = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 25, 1, 1, 1, 1, 1, 2), EndUserProfileArea().clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: endUserProfileAreaPhysical.setStatus('current')
endUserProfileAreaVlanTable = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 25, 1, 1, 1, 1, 1, 3), EndUserProfileArea().clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: endUserProfileAreaVlanTable.setStatus('current')
endUserProfileAreaBasicIpRouting = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 25, 1, 1, 1, 1, 1, 4), EndUserProfileArea().clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: endUserProfileAreaBasicIpRouting.setStatus('current')
endUserProfileAreaIpRoutesTable = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 25, 1, 1, 1, 1, 1, 5), EndUserProfileArea().clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: endUserProfileAreaIpRoutesTable.setStatus('current')
endUserProfileAreaMacFilteringTable = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 25, 1, 1, 1, 1, 1, 6), EndUserProfileArea().clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: endUserProfileAreaMacFilteringTable.setStatus('current')
endUserProfileAreaSpantree = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 25, 1, 1, 1, 1, 1, 7), EndUserProfileArea().clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: endUserProfileAreaSpantree.setStatus('current')
endUserProfileRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 25, 1, 1, 1, 1, 1, 8), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: endUserProfileRowStatus.setStatus('current')
endUserProfileSlotPortTable = MibTable((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 25, 1, 1, 1, 2), )
if mibBuilder.loadTexts: endUserProfileSlotPortTable.setStatus('current')
endUserProfileSlotPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 25, 1, 1, 1, 2, 1), ).setIndexNames((0, "ALCATEL-IND1-PARTITIONED-MGR-MIB", "endUserProfileSlotNumber"), (1, "ALCATEL-IND1-PARTITIONED-MGR-MIB", "endUserProfileName"))
if mibBuilder.loadTexts: endUserProfileSlotPortEntry.setStatus('current')
endUserProfileSlotNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 25, 1, 1, 1, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: endUserProfileSlotNumber.setStatus('current')
endUserProfilePortList = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 25, 1, 1, 1, 2, 1, 2), EndUserPortList()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: endUserProfilePortList.setStatus('current')
endUserProfileSlotPortRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 25, 1, 1, 1, 2, 1, 3), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: endUserProfileSlotPortRowStatus.setStatus('current')
endUserProfileVlanIdTable = MibTable((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 25, 1, 1, 1, 3), )
if mibBuilder.loadTexts: endUserProfileVlanIdTable.setStatus('current')
endUserProfileVlanIdEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 25, 1, 1, 1, 3, 1), ).setIndexNames((0, "ALCATEL-IND1-PARTITIONED-MGR-MIB", "endUserProfileVlanIdStart"), (1, "ALCATEL-IND1-PARTITIONED-MGR-MIB", "endUserProfileName"))
if mibBuilder.loadTexts: endUserProfileVlanIdEntry.setStatus('current')
endUserProfileVlanIdStart = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 25, 1, 1, 1, 3, 1, 1), VlanId()).setMaxAccess("readonly")
if mibBuilder.loadTexts: endUserProfileVlanIdStart.setStatus('current')
endUserProfileVlanIdEnd = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 25, 1, 1, 1, 3, 1, 2), VlanId()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: endUserProfileVlanIdEnd.setStatus('current')
endUserProfileVlanIdRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 25, 1, 1, 1, 3, 1, 3), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: endUserProfileVlanIdRowStatus.setStatus('current')
alcatelIND1PartitionedMgrMIBCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 25, 1, 2, 2, 1)).setObjects(("ALCATEL-IND1-PARTITIONED-MGR-MIB", "endUserProfileGroup"), ("ALCATEL-IND1-PARTITIONED-MGR-MIB", "endUserProfileSlotPortGroup"), ("ALCATEL-IND1-PARTITIONED-MGR-MIB", "endUserProfileVlanIdGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    alcatelIND1PartitionedMgrMIBCompliance = alcatelIND1PartitionedMgrMIBCompliance.setStatus('current')
endUserProfileGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 25, 1, 2, 1, 1)).setObjects(("ALCATEL-IND1-PARTITIONED-MGR-MIB", "endUserProfileName"), ("ALCATEL-IND1-PARTITIONED-MGR-MIB", "endUserProfileAreaPhysical"), ("ALCATEL-IND1-PARTITIONED-MGR-MIB", "endUserProfileAreaVlanTable"), ("ALCATEL-IND1-PARTITIONED-MGR-MIB", "endUserProfileAreaBasicIpRouting"), ("ALCATEL-IND1-PARTITIONED-MGR-MIB", "endUserProfileAreaIpRoutesTable"), ("ALCATEL-IND1-PARTITIONED-MGR-MIB", "endUserProfileAreaMacFilteringTable"), ("ALCATEL-IND1-PARTITIONED-MGR-MIB", "endUserProfileAreaSpantree"), ("ALCATEL-IND1-PARTITIONED-MGR-MIB", "endUserProfileRowStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    endUserProfileGroup = endUserProfileGroup.setStatus('current')
endUserProfileSlotPortGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 25, 1, 2, 1, 2)).setObjects(("ALCATEL-IND1-PARTITIONED-MGR-MIB", "endUserProfileSlotNumber"), ("ALCATEL-IND1-PARTITIONED-MGR-MIB", "endUserProfilePortList"), ("ALCATEL-IND1-PARTITIONED-MGR-MIB", "endUserProfileSlotPortRowStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    endUserProfileSlotPortGroup = endUserProfileSlotPortGroup.setStatus('current')
endUserProfileVlanIdGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 25, 1, 2, 1, 3)).setObjects(("ALCATEL-IND1-PARTITIONED-MGR-MIB", "endUserProfileVlanIdStart"), ("ALCATEL-IND1-PARTITIONED-MGR-MIB", "endUserProfileVlanIdEnd"), ("ALCATEL-IND1-PARTITIONED-MGR-MIB", "endUserProfileVlanIdRowStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    endUserProfileVlanIdGroup = endUserProfileVlanIdGroup.setStatus('current')
mibBuilder.exportSymbols("ALCATEL-IND1-PARTITIONED-MGR-MIB", endUserProfileEntry=endUserProfileEntry, endUserProfileSlotPortGroup=endUserProfileSlotPortGroup, endUserProfileTable=endUserProfileTable, endUserProfileSlotPortTable=endUserProfileSlotPortTable, PYSNMP_MODULE_ID=alcatelIND1PartitionedMgrMIB, endUserProfileAreaBasicIpRouting=endUserProfileAreaBasicIpRouting, alcatelIND1PartitionedMgrMIBCompliance=alcatelIND1PartitionedMgrMIBCompliance, alcatelIND1PartitionedMgrMIBObjects=alcatelIND1PartitionedMgrMIBObjects, EndUserProfileArea=EndUserProfileArea, endUserProfileRowStatus=endUserProfileRowStatus, endUserProfileVlanIdEnd=endUserProfileVlanIdEnd, endUserProfileGroup=endUserProfileGroup, endUserProfilePortList=endUserProfilePortList, endUserProfileAreaSpantree=endUserProfileAreaSpantree, alcatelIND1PartitionedMgrMIBConformance=alcatelIND1PartitionedMgrMIBConformance, endUserProfileSlotPortEntry=endUserProfileSlotPortEntry, endUserProfileAreaPhysical=endUserProfileAreaPhysical, EndUserPortList=EndUserPortList, endUserProfileVlanIdEntry=endUserProfileVlanIdEntry, alcatelIND1PartitionedMgrMIBGroups=alcatelIND1PartitionedMgrMIBGroups, endUserProfileAreaMacFilteringTable=endUserProfileAreaMacFilteringTable, alcatelIND1PartitionedMgrMIBCompliances=alcatelIND1PartitionedMgrMIBCompliances, endUserProfileVlanIdRowStatus=endUserProfileVlanIdRowStatus, endUserProfileVlanIdTable=endUserProfileVlanIdTable, endUserProfileVlanIdGroup=endUserProfileVlanIdGroup, endUserProfileName=endUserProfileName, endUserProfileSlotPortRowStatus=endUserProfileSlotPortRowStatus, alcatelIND1PartitionedMgrMIB=alcatelIND1PartitionedMgrMIB, endUserProfileAreaVlanTable=endUserProfileAreaVlanTable, endUserProfileVlanIdStart=endUserProfileVlanIdStart, endUserProfileAreaIpRoutesTable=endUserProfileAreaIpRoutesTable, endUserProfileSlotNumber=endUserProfileSlotNumber, endUserProfileMgrMIB=endUserProfileMgrMIB)
