#
# PySNMP MIB module SYMBOL-DSSS-ENTERPRISE-PRIVATE-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/SYMBOL-DSSS-ENTERPRISE-PRIVATE-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 21:06:23 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, OctetString, Integer = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "OctetString", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueRangeConstraint, SingleValueConstraint, ConstraintsUnion, ValueSizeConstraint, ConstraintsIntersection = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueRangeConstraint", "SingleValueConstraint", "ConstraintsUnion", "ValueSizeConstraint", "ConstraintsIntersection")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
snmp, = mibBuilder.importSymbols("SNMPv2-MIB", "snmp")
Counter32, iso, MibIdentifier, NotificationType, Bits, Counter64, enterprises, Gauge32, MibScalar, MibTable, MibTableRow, MibTableColumn, ModuleIdentity, TimeTicks, Integer32, Unsigned32, IpAddress, NotificationType, ObjectIdentity = mibBuilder.importSymbols("SNMPv2-SMI", "Counter32", "iso", "MibIdentifier", "NotificationType", "Bits", "Counter64", "enterprises", "Gauge32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "ModuleIdentity", "TimeTicks", "Integer32", "Unsigned32", "IpAddress", "NotificationType", "ObjectIdentity")
DisplayString, TextualConvention, PhysAddress = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention", "PhysAddress")
symbol = MibIdentifier((1, 3, 6, 1, 4, 1, 388))
spectrum24 = MibIdentifier((1, 3, 6, 1, 4, 1, 388, 1))
dsap = MibIdentifier((1, 3, 6, 1, 4, 1, 388, 1, 5))
apConfigMgmt = MibIdentifier((1, 3, 6, 1, 4, 1, 388, 1, 5, 1))
apPerformMgmt = MibIdentifier((1, 3, 6, 1, 4, 1, 388, 1, 5, 2))
apFaultMgmt = MibIdentifier((1, 3, 6, 1, 4, 1, 388, 1, 5, 3))
apSecurityMgmt = MibIdentifier((1, 3, 6, 1, 4, 1, 388, 1, 5, 4))
apManufactureInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 388, 1, 5, 1, 1))
apSystemConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 388, 1, 5, 1, 2))
apSNMPInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 388, 1, 5, 1, 3))
apRFConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 388, 1, 5, 1, 4))
apSerialPortConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 388, 1, 5, 1, 5))
apEthernetStatistics = MibIdentifier((1, 3, 6, 1, 4, 1, 388, 1, 5, 2, 3))
apRFStatistics = MibIdentifier((1, 3, 6, 1, 4, 1, 388, 1, 5, 2, 4))
apSerialPortStatistics = MibIdentifier((1, 3, 6, 1, 4, 1, 388, 1, 5, 2, 6))
apWNMPStatistics = MibIdentifier((1, 3, 6, 1, 4, 1, 388, 1, 5, 2, 7))
apMUInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 388, 1, 5, 2, 8))
apFilterStatistics = MibIdentifier((1, 3, 6, 1, 4, 1, 388, 1, 5, 2, 10))
apWLAPInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 388, 1, 5, 2, 11))
apMobileIPStatistics = MibIdentifier((1, 3, 6, 1, 4, 1, 388, 1, 5, 2, 14))
class WEPKeytype128b(OctetString):
    subtypeSpec = OctetString.subtypeSpec + ValueSizeConstraint(13, 13)
    fixedLength = 13

coldStart = NotificationType((1, 3, 6, 1, 2, 1, 11) + (0,0)).setObjects(("SYMBOL-DSSS-ENTERPRISE-PRIVATE-MIB", "apMyMacAddr"))
authenticationFailure = NotificationType((1, 3, 6, 1, 2, 1, 11) + (0,4)).setObjects(("SYMBOL-DSSS-ENTERPRISE-PRIVATE-MIB", "apMyMacAddr"), ("SYMBOL-DSSS-ENTERPRISE-PRIVATE-MIB", "apAPMacAddr"))
apDSAPRFStartUpTrap = NotificationType((1, 3, 6, 1, 4, 1, 388, 1, 5) + (0,101)).setObjects(("SYMBOL-DSSS-ENTERPRISE-PRIVATE-MIB", "apMyMacAddr"))
apDSAPACLViolationTrap = NotificationType((1, 3, 6, 1, 4, 1, 388, 1, 5) + (0,102)).setObjects(("SYMBOL-DSSS-ENTERPRISE-PRIVATE-MIB", "apMyMacAddr"), ("SYMBOL-DSSS-ENTERPRISE-PRIVATE-MIB", "muMacAddr"))
apDSAPMUAssocTrap = NotificationType((1, 3, 6, 1, 4, 1, 388, 1, 5) + (0,111)).setObjects(("SYMBOL-DSSS-ENTERPRISE-PRIVATE-MIB", "apMyMacAddr"), ("SYMBOL-DSSS-ENTERPRISE-PRIVATE-MIB", "muMacAddr"), ("SYMBOL-DSSS-ENTERPRISE-PRIVATE-MIB", "apCurrentMUs"))
apDSAPMUUnAssocTrap = NotificationType((1, 3, 6, 1, 4, 1, 388, 1, 5) + (0,112)).setObjects(("SYMBOL-DSSS-ENTERPRISE-PRIVATE-MIB", "apMyMacAddr"), ("SYMBOL-DSSS-ENTERPRISE-PRIVATE-MIB", "muMacAddr"), ("SYMBOL-DSSS-ENTERPRISE-PRIVATE-MIB", "apCurrentMUs"))
apDSAPMUMaxAssocTrap = NotificationType((1, 3, 6, 1, 4, 1, 388, 1, 5) + (0,116)).setObjects(("SYMBOL-DSSS-ENTERPRISE-PRIVATE-MIB", "apMyMacAddr"), ("SYMBOL-DSSS-ENTERPRISE-PRIVATE-MIB", "apCurrentMUs"))
apDSRootWLAPUpTrap = NotificationType((1, 3, 6, 1, 4, 1, 388, 1, 5) + (0,121)).setObjects(("SYMBOL-DSSS-ENTERPRISE-PRIVATE-MIB", "apMyMacAddr"), ("SYMBOL-DSSS-ENTERPRISE-PRIVATE-MIB", "apAPMacAddr"), ("SYMBOL-DSSS-ENTERPRISE-PRIVATE-MIB", "apNbrOfWLAPItfs"))
apDSRootWLAPLostTrap = NotificationType((1, 3, 6, 1, 4, 1, 388, 1, 5) + (0,122)).setObjects(("SYMBOL-DSSS-ENTERPRISE-PRIVATE-MIB", "apMyMacAddr"), ("SYMBOL-DSSS-ENTERPRISE-PRIVATE-MIB", "apAPMacAddr"), ("SYMBOL-DSSS-ENTERPRISE-PRIVATE-MIB", "apNbrOfWLAPItfs"))
apDSDsgntedWLAPUpTrap = NotificationType((1, 3, 6, 1, 4, 1, 388, 1, 5) + (0,123)).setObjects(("SYMBOL-DSSS-ENTERPRISE-PRIVATE-MIB", "apMyMacAddr"), ("SYMBOL-DSSS-ENTERPRISE-PRIVATE-MIB", "apAPMacAddr"), ("SYMBOL-DSSS-ENTERPRISE-PRIVATE-MIB", "apNbrOfWLAPItfs"))
apDSDsgnatedWLAPLostTrap = NotificationType((1, 3, 6, 1, 4, 1, 388, 1, 5) + (0,124)).setObjects(("SYMBOL-DSSS-ENTERPRISE-PRIVATE-MIB", "apMyMacAddr"), ("SYMBOL-DSSS-ENTERPRISE-PRIVATE-MIB", "apAPMacAddr"), ("SYMBOL-DSSS-ENTERPRISE-PRIVATE-MIB", "apNbrOfWLAPItfs"))
apDSAPDHCPConfigChgTrap = NotificationType((1, 3, 6, 1, 4, 1, 388, 1, 5) + (0,130)).setObjects(("SYMBOL-DSSS-ENTERPRISE-PRIVATE-MIB", "apMyMacAddr"))
apDSAPDHCPLeaseUpTrap = NotificationType((1, 3, 6, 1, 4, 1, 388, 1, 5) + (0,131)).setObjects(("SYMBOL-DSSS-ENTERPRISE-PRIVATE-MIB", "apMyMacAddr"))
apModelnumber = MibScalar((1, 3, 6, 1, 4, 1, 388, 1, 5, 1, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: apModelnumber.setStatus('mandatory')
apSerialnumber = MibScalar((1, 3, 6, 1, 4, 1, 388, 1, 5, 1, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: apSerialnumber.setStatus('mandatory')
apHardwareRev = MibScalar((1, 3, 6, 1, 4, 1, 388, 1, 5, 1, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 8))).setMaxAccess("readonly")
if mibBuilder.loadTexts: apHardwareRev.setStatus('mandatory')
apMyMacAddr = MibScalar((1, 3, 6, 1, 4, 1, 388, 1, 5, 1, 1, 4), PhysAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apMyMacAddr.setStatus('mandatory')
apAPFirmwareRev = MibScalar((1, 3, 6, 1, 4, 1, 388, 1, 5, 1, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: apAPFirmwareRev.setStatus('mandatory')
apRFFirmwareRev = MibScalar((1, 3, 6, 1, 4, 1, 388, 1, 5, 1, 1, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: apRFFirmwareRev.setStatus('mandatory')
apMfgDate = MibScalar((1, 3, 6, 1, 4, 1, 388, 1, 5, 1, 1, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: apMfgDate.setStatus('mandatory')
apHTMLFileRev = MibScalar((1, 3, 6, 1, 4, 1, 388, 1, 5, 1, 1, 8), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 8))).setMaxAccess("readonly")
if mibBuilder.loadTexts: apHTMLFileRev.setStatus('mandatory')
apVendorID = MibScalar((1, 3, 6, 1, 4, 1, 388, 1, 5, 1, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(5, 6, 8, 9))).clone(namedValues=NamedValues(("symbol", 5), ("threeCom", 6), ("ericsson", 8), ("intel", 9)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: apVendorID.setStatus('mandatory')
apUnitName = MibScalar((1, 3, 6, 1, 4, 1, 388, 1, 5, 1, 2, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 31))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apUnitName.setStatus('mandatory')
apMyIPAddr = MibScalar((1, 3, 6, 1, 4, 1, 388, 1, 5, 1, 2, 2), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apMyIPAddr.setStatus('mandatory')
apSubnetMask = MibScalar((1, 3, 6, 1, 4, 1, 388, 1, 5, 1, 2, 3), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apSubnetMask.setStatus('mandatory')
apGatewayIPAddr = MibScalar((1, 3, 6, 1, 4, 1, 388, 1, 5, 1, 2, 4), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apGatewayIPAddr.setStatus('mandatory')
apDefaultInterface = MibScalar((1, 3, 6, 1, 4, 1, 388, 1, 5, 1, 2, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("ethernet", 1), ("ppp", 2), ("wlap", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apDefaultInterface.setStatus('mandatory')
apEnetPortState = MibScalar((1, 3, 6, 1, 4, 1, 388, 1, 5, 1, 2, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("up", 1), ("down", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apEnetPortState.setStatus('mandatory')
apEthernetTimeOut = MibScalar((1, 3, 6, 1, 4, 1, 388, 1, 5, 1, 2, 7), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apEthernetTimeOut.setStatus('mandatory')
apTelnetEnable = MibScalar((1, 3, 6, 1, 4, 1, 388, 1, 5, 1, 2, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apTelnetEnable.setStatus('mandatory')
apAccCtrlEnable = MibScalar((1, 3, 6, 1, 4, 1, 388, 1, 5, 1, 2, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apAccCtrlEnable.setStatus('mandatory')
apTypeFilterEnable = MibScalar((1, 3, 6, 1, 4, 1, 388, 1, 5, 1, 2, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("disabled", 1), ("forward", 2), ("discard", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apTypeFilterEnable.setStatus('mandatory')
apWNMPEnable = MibScalar((1, 3, 6, 1, 4, 1, 388, 1, 5, 1, 2, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apWNMPEnable.setStatus('mandatory')
apAPStateXchgEnable = MibScalar((1, 3, 6, 1, 4, 1, 388, 1, 5, 1, 2, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apAPStateXchgEnable.setStatus('mandatory')
apS24MobileIPEnable = MibScalar((1, 3, 6, 1, 4, 1, 388, 1, 5, 1, 2, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apS24MobileIPEnable.setStatus('mandatory')
apAgentAdInterval = MibScalar((1, 3, 6, 1, 4, 1, 388, 1, 5, 1, 2, 16), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1200))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apAgentAdInterval.setStatus('mandatory')
apWebServerEnable = MibScalar((1, 3, 6, 1, 4, 1, 388, 1, 5, 1, 2, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apWebServerEnable.setStatus('mandatory')
apMobileHomeMD5Key = MibScalar((1, 3, 6, 1, 4, 1, 388, 1, 5, 1, 2, 18), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 13))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apMobileHomeMD5Key.setStatus('mandatory')
apAdditionalGatewaysTable = MibTable((1, 3, 6, 1, 4, 1, 388, 1, 5, 1, 2, 19), )
if mibBuilder.loadTexts: apAdditionalGatewaysTable.setStatus('mandatory')
apAdditionalGatewaysEntry = MibTableRow((1, 3, 6, 1, 4, 1, 388, 1, 5, 1, 2, 19, 1), ).setIndexNames((0, "SYMBOL-DSSS-ENTERPRISE-PRIVATE-MIB", "additionalGatewaysIndex"))
if mibBuilder.loadTexts: apAdditionalGatewaysEntry.setStatus('mandatory')
additionalGatewaysIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 1, 5, 1, 2, 19, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 8))).setMaxAccess("readonly")
if mibBuilder.loadTexts: additionalGatewaysIndex.setStatus('mandatory')
apAdditionalGatewaysIPAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 1, 5, 1, 2, 19, 1, 2), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apAdditionalGatewaysIPAddr.setStatus('mandatory')
apMUMUDisallowed = MibScalar((1, 3, 6, 1, 4, 1, 388, 1, 5, 1, 2, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("on", 1), ("off", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apMUMUDisallowed.setStatus('mandatory')
apEncryptAdmin = MibScalar((1, 3, 6, 1, 4, 1, 388, 1, 5, 1, 2, 21), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("serial", 1), ("any", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: apEncryptAdmin.setStatus('mandatory')
apSNMPMode = MibScalar((1, 3, 6, 1, 4, 1, 388, 1, 5, 1, 3, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("disabled", 1), ("readonly", 2), ("readwrite", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apSNMPMode.setStatus('mandatory')
apROCommunityName = MibScalar((1, 3, 6, 1, 4, 1, 388, 1, 5, 1, 3, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 31))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apROCommunityName.setStatus('mandatory')
apRWCommunityName = MibScalar((1, 3, 6, 1, 4, 1, 388, 1, 5, 1, 3, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 13))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apRWCommunityName.setStatus('mandatory')
apTrapHost1IpAdr = MibScalar((1, 3, 6, 1, 4, 1, 388, 1, 5, 1, 3, 4), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apTrapHost1IpAdr.setStatus('mandatory')
apAllTrapsEnable = MibScalar((1, 3, 6, 1, 4, 1, 388, 1, 5, 1, 3, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apAllTrapsEnable.setStatus('mandatory')
apColdBootTrapEnable = MibScalar((1, 3, 6, 1, 4, 1, 388, 1, 5, 1, 3, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("disabled", 1), ("trapHost1", 2), ("trapHost2", 3), ("all-TrapHosts", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apColdBootTrapEnable.setStatus('mandatory')
apAuthenFailureTrapEnable = MibScalar((1, 3, 6, 1, 4, 1, 388, 1, 5, 1, 3, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("disabled", 1), ("trapHost1", 2), ("trapHost2", 3), ("all-TrapHosts", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apAuthenFailureTrapEnable.setStatus('mandatory')
apRFTrapEnable = MibScalar((1, 3, 6, 1, 4, 1, 388, 1, 5, 1, 3, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("disabled", 1), ("trapHost1", 2), ("trapHost2", 3), ("all-TrapHosts", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apRFTrapEnable.setStatus('mandatory')
apACLTrapEnable = MibScalar((1, 3, 6, 1, 4, 1, 388, 1, 5, 1, 3, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("disabled", 1), ("trapHost1", 2), ("trapHost2", 3), ("all-TrapHosts", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apACLTrapEnable.setStatus('mandatory')
apMUStateChngTrapEnable = MibScalar((1, 3, 6, 1, 4, 1, 388, 1, 5, 1, 3, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("disabled", 1), ("trapHost1", 2), ("trapHost2", 3), ("all-TrapHosts", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apMUStateChngTrapEnable.setStatus('mandatory')
apWLAPConnChngTrapEnable = MibScalar((1, 3, 6, 1, 4, 1, 388, 1, 5, 1, 3, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("disabled", 1), ("trapHost1", 2), ("trapHost2", 3), ("all-TrapHosts", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apWLAPConnChngTrapEnable.setStatus('mandatory')
apDHCPChangeEnable = MibScalar((1, 3, 6, 1, 4, 1, 388, 1, 5, 1, 3, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("disabled", 1), ("trapHost1", 2), ("trapHost2", 3), ("all-TrapHosts", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apDHCPChangeEnable.setStatus('mandatory')
apSNMPRequests = MibScalar((1, 3, 6, 1, 4, 1, 388, 1, 5, 1, 3, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apSNMPRequests.setStatus('mandatory')
apSNMPTraps = MibScalar((1, 3, 6, 1, 4, 1, 388, 1, 5, 1, 3, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apSNMPTraps.setStatus('mandatory')
apTrapHost2IpAdr = MibScalar((1, 3, 6, 1, 4, 1, 388, 1, 5, 1, 3, 15), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apTrapHost2IpAdr.setStatus('mandatory')
apRFPortState = MibScalar((1, 3, 6, 1, 4, 1, 388, 1, 5, 1, 4, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("up", 1), ("down", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apRFPortState.setStatus('mandatory')
apNetID = MibScalar((1, 3, 6, 1, 4, 1, 388, 1, 5, 1, 4, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apNetID.setStatus('mandatory')
apCountryName = MibScalar((1, 3, 6, 1, 4, 1, 388, 1, 5, 1, 4, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apCountryName.setStatus('mandatory')
apAntennaSelect = MibScalar((1, 3, 6, 1, 4, 1, 388, 1, 5, 1, 4, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("primary-only", 1), ("diversity-On", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apAntennaSelect.setStatus('mandatory')
apBCMCQMax = MibScalar((1, 3, 6, 1, 4, 1, 388, 1, 5, 1, 4, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apBCMCQMax.setStatus('mandatory')
apReassemblyTimeOut = MibScalar((1, 3, 6, 1, 4, 1, 388, 1, 5, 1, 4, 9), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apReassemblyTimeOut.setStatus('mandatory')
apMaxRetries = MibScalar((1, 3, 6, 1, 4, 1, 388, 1, 5, 1, 4, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apMaxRetries.setStatus('mandatory')
apMulticastMask = MibScalar((1, 3, 6, 1, 4, 1, 388, 1, 5, 1, 4, 11), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 4))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apMulticastMask.setStatus('mandatory')
apAcceptBCESSID = MibScalar((1, 3, 6, 1, 4, 1, 388, 1, 5, 1, 4, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apAcceptBCESSID.setStatus('mandatory')
apMUInactivityTimeOut = MibScalar((1, 3, 6, 1, 4, 1, 388, 1, 5, 1, 4, 15), Integer32().subtype(subtypeSpec=ValueRangeConstraint(3, 600))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apMUInactivityTimeOut.setStatus('mandatory')
apWLAPMode = MibScalar((1, 3, 6, 1, 4, 1, 388, 1, 5, 1, 4, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2), ("link-required", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apWLAPMode.setStatus('mandatory')
apWLAPPriority = MibScalar((1, 3, 6, 1, 4, 1, 388, 1, 5, 1, 4, 17), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 2))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apWLAPPriority.setStatus('mandatory')
apWLAPManualBSSID = MibScalar((1, 3, 6, 1, 4, 1, 388, 1, 5, 1, 4, 18), PhysAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apWLAPManualBSSID.setStatus('mandatory')
apWLAPHelloTime = MibScalar((1, 3, 6, 1, 4, 1, 388, 1, 5, 1, 4, 19), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apWLAPHelloTime.setStatus('mandatory')
apWLAPMaxAge = MibScalar((1, 3, 6, 1, 4, 1, 388, 1, 5, 1, 4, 20), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apWLAPMaxAge.setStatus('mandatory')
apWLAPFwdDelay = MibScalar((1, 3, 6, 1, 4, 1, 388, 1, 5, 1, 4, 21), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apWLAPFwdDelay.setStatus('mandatory')
apMaxMUTrigger = MibScalar((1, 3, 6, 1, 4, 1, 388, 1, 5, 1, 4, 24), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apMaxMUTrigger.setStatus('mandatory')
apMaxRetriesVoice = MibScalar((1, 3, 6, 1, 4, 1, 388, 1, 5, 1, 4, 25), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apMaxRetriesVoice.setStatus('mandatory')
apMcastMaskVoice = MibScalar((1, 3, 6, 1, 4, 1, 388, 1, 5, 1, 4, 26), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 4))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apMcastMaskVoice.setStatus('mandatory')
apWEPAlgorithm = MibScalar((1, 3, 6, 1, 4, 1, 388, 1, 5, 1, 4, 30), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("wep-128b-Key", 1), ("wep-40b-Key", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apWEPAlgorithm.setStatus('mandatory')
apRFRate11Mb = MibScalar((1, 3, 6, 1, 4, 1, 388, 1, 5, 1, 4, 31), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("optional", 1), ("not-used", 2), ("required", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apRFRate11Mb.setStatus('mandatory')
apRFRate5_5Mb = MibScalar((1, 3, 6, 1, 4, 1, 388, 1, 5, 1, 4, 32), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("optional", 1), ("not-used", 2), ("required", 3)))).setLabel("apRFRate5-5Mb").setMaxAccess("readwrite")
if mibBuilder.loadTexts: apRFRate5_5Mb.setStatus('mandatory')
apRFRate2Mb = MibScalar((1, 3, 6, 1, 4, 1, 388, 1, 5, 1, 4, 33), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("optional", 1), ("not-used", 2), ("required", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apRFRate2Mb.setStatus('mandatory')
apRFRate1Mb = MibScalar((1, 3, 6, 1, 4, 1, 388, 1, 5, 1, 4, 34), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("optional", 1), ("not-used", 2), ("required", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apRFRate1Mb.setStatus('mandatory')
apRFPreamble = MibScalar((1, 3, 6, 1, 4, 1, 388, 1, 5, 1, 4, 35), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apRFPreamble.setStatus('mandatory')
apRadioType = MibScalar((1, 3, 6, 1, 4, 1, 388, 1, 5, 1, 4, 36), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("ds11-V2", 1), ("ds11-v1", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: apRadioType.setStatus('mandatory')
apPPPState = MibScalar((1, 3, 6, 1, 4, 1, 388, 1, 5, 1, 5, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("up", 1), ("down", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apPPPState.setStatus('mandatory')
apSerialPortUse = MibScalar((1, 3, 6, 1, 4, 1, 388, 1, 5, 1, 5, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("ppp", 1), ("ui", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apSerialPortUse.setStatus('mandatory')
apModemConnected = MibScalar((1, 3, 6, 1, 4, 1, 388, 1, 5, 1, 5, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apModemConnected.setStatus('mandatory')
apConnectMode = MibScalar((1, 3, 6, 1, 4, 1, 388, 1, 5, 1, 5, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("originate", 1), ("answer", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apConnectMode.setStatus('mandatory')
apDialOutNumber = MibScalar((1, 3, 6, 1, 4, 1, 388, 1, 5, 1, 5, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apDialOutNumber.setStatus('mandatory')
apDialOutMode = MibScalar((1, 3, 6, 1, 4, 1, 388, 1, 5, 1, 5, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("auto", 1), ("manual", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apDialOutMode.setStatus('mandatory')
apAnswerWaitTime = MibScalar((1, 3, 6, 1, 4, 1, 388, 1, 5, 1, 5, 7), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apAnswerWaitTime.setStatus('mandatory')
apModemSpeaker = MibScalar((1, 3, 6, 1, 4, 1, 388, 1, 5, 1, 5, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("on", 1), ("off", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apModemSpeaker.setStatus('mandatory')
apInactivityTimeout = MibScalar((1, 3, 6, 1, 4, 1, 388, 1, 5, 1, 5, 9), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apInactivityTimeout.setStatus('mandatory')
apPPPTimeout = MibScalar((1, 3, 6, 1, 4, 1, 388, 1, 5, 1, 5, 10), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apPPPTimeout.setStatus('mandatory')
apPPPTerminates = MibScalar((1, 3, 6, 1, 4, 1, 388, 1, 5, 1, 5, 11), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apPPPTerminates.setStatus('mandatory')
apAddrFilterTable = MibTable((1, 3, 6, 1, 4, 1, 388, 1, 5, 1, 6), )
if mibBuilder.loadTexts: apAddrFilterTable.setStatus('mandatory')
apAddrFilterEntry = MibTableRow((1, 3, 6, 1, 4, 1, 388, 1, 5, 1, 6, 1), ).setIndexNames((0, "SYMBOL-DSSS-ENTERPRISE-PRIVATE-MIB", "disallowedIndex"))
if mibBuilder.loadTexts: apAddrFilterEntry.setStatus('mandatory')
disallowedIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 1, 5, 1, 6, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 512))).setMaxAccess("readonly")
if mibBuilder.loadTexts: disallowedIndex.setStatus('mandatory')
disallowedMU = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 1, 5, 1, 6, 1, 2), PhysAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: disallowedMU.setStatus('mandatory')
apTypeFilterTable = MibTable((1, 3, 6, 1, 4, 1, 388, 1, 5, 1, 7), )
if mibBuilder.loadTexts: apTypeFilterTable.setStatus('mandatory')
apTypeFilterEntry = MibTableRow((1, 3, 6, 1, 4, 1, 388, 1, 5, 1, 7, 1), ).setIndexNames((0, "SYMBOL-DSSS-ENTERPRISE-PRIVATE-MIB", "typeIndex"))
if mibBuilder.loadTexts: apTypeFilterEntry.setStatus('mandatory')
typeIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 1, 5, 1, 7, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: typeIndex.setStatus('mandatory')
etherType = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 1, 5, 1, 7, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 2))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: etherType.setStatus('mandatory')
ap128bWEPKeyTable = MibTable((1, 3, 6, 1, 4, 1, 388, 1, 5, 1, 8), )
if mibBuilder.loadTexts: ap128bWEPKeyTable.setStatus('mandatory')
apWEPKeyEntry = MibTableRow((1, 3, 6, 1, 4, 1, 388, 1, 5, 1, 8, 1), ).setIndexNames((0, "SYMBOL-DSSS-ENTERPRISE-PRIVATE-MIB", "ap128bWepkeyIndex"))
if mibBuilder.loadTexts: apWEPKeyEntry.setStatus('mandatory')
ap128bWepkeyIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 1, 5, 1, 8, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ap128bWepkeyIndex.setStatus('mandatory')
ap128bWepKeyValue = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 1, 5, 1, 8, 1, 2), WEPKeytype128b()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ap128bWepKeyValue.setStatus('mandatory')
apTrafficMatrixTable = MibTable((1, 3, 6, 1, 4, 1, 388, 1, 5, 2, 1), )
if mibBuilder.loadTexts: apTrafficMatrixTable.setStatus('mandatory')
apTrafficMatrixEntry = MibTableRow((1, 3, 6, 1, 4, 1, 388, 1, 5, 2, 1, 1), ).setIndexNames((0, "SYMBOL-DSSS-ENTERPRISE-PRIVATE-MIB", "apTMTableIndex"))
if mibBuilder.loadTexts: apTrafficMatrixEntry.setStatus('mandatory')
apTMTableIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 1, 5, 2, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 5))).setMaxAccess("readonly")
if mibBuilder.loadTexts: apTMTableIndex.setStatus('mandatory')
apProtoItfName = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 1, 5, 2, 1, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 12))).setMaxAccess("readonly")
if mibBuilder.loadTexts: apProtoItfName.setStatus('mandatory')
apNPktsToEnets = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 1, 5, 2, 1, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apNPktsToEnets.setStatus('mandatory')
apNPktsToPpps = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 1, 5, 2, 1, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apNPktsToPpps.setStatus('mandatory')
apNPktsToRfs = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 1, 5, 2, 1, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apNPktsToRfs.setStatus('mandatory')
apNPktsToAPStks = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 1, 5, 2, 1, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apNPktsToAPStks.setStatus('mandatory')
apItfStatTable = MibTable((1, 3, 6, 1, 4, 1, 388, 1, 5, 2, 2), )
if mibBuilder.loadTexts: apItfStatTable.setStatus('mandatory')
apItfStatEntry = MibTableRow((1, 3, 6, 1, 4, 1, 388, 1, 5, 2, 2, 1), ).setIndexNames((0, "SYMBOL-DSSS-ENTERPRISE-PRIVATE-MIB", "apItfStatIndex"))
if mibBuilder.loadTexts: apItfStatEntry.setStatus('mandatory')
apItfStatIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 1, 5, 2, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4))).setMaxAccess("readonly")
if mibBuilder.loadTexts: apItfStatIndex.setStatus('mandatory')
apInterfaceName = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 1, 5, 2, 2, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 12))).setMaxAccess("readonly")
if mibBuilder.loadTexts: apInterfaceName.setStatus('mandatory')
apPacketsIns = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 1, 5, 2, 2, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apPacketsIns.setStatus('mandatory')
apPacketsOuts = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 1, 5, 2, 2, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apPacketsOuts.setStatus('mandatory')
apOctetsIns = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 1, 5, 2, 2, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apOctetsIns.setStatus('mandatory')
apOctetsOuts = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 1, 5, 2, 2, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apOctetsOuts.setStatus('mandatory')
apPktsInPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 1, 5, 2, 2, 1, 7), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apPktsInPerSec.setStatus('mandatory')
apPktsOutPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 1, 5, 2, 2, 1, 8), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apPktsOutPerSec.setStatus('mandatory')
apOctInPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 1, 5, 2, 2, 1, 9), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apOctInPerSec.setStatus('mandatory')
apOctOutPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 1, 5, 2, 2, 1, 10), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apOctOutPerSec.setStatus('mandatory')
apEPktsSeens = MibScalar((1, 3, 6, 1, 4, 1, 388, 1, 5, 2, 3, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apEPktsSeens.setStatus('mandatory')
apEPktsForwardeds = MibScalar((1, 3, 6, 1, 4, 1, 388, 1, 5, 2, 3, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apEPktsForwardeds.setStatus('mandatory')
apEPktsDiscNoMatchs = MibScalar((1, 3, 6, 1, 4, 1, 388, 1, 5, 2, 3, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apEPktsDiscNoMatchs.setStatus('mandatory')
apEPktsDiscForceds = MibScalar((1, 3, 6, 1, 4, 1, 388, 1, 5, 2, 3, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apEPktsDiscForceds.setStatus('mandatory')
apEPktsDiscBuffers = MibScalar((1, 3, 6, 1, 4, 1, 388, 1, 5, 2, 3, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apEPktsDiscBuffers.setStatus('mandatory')
apEPktsDiscCRCs = MibScalar((1, 3, 6, 1, 4, 1, 388, 1, 5, 2, 3, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apEPktsDiscCRCs.setStatus('mandatory')
apEPktsSents = MibScalar((1, 3, 6, 1, 4, 1, 388, 1, 5, 2, 3, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apEPktsSents.setStatus('mandatory')
apEAnyCollisions = MibScalar((1, 3, 6, 1, 4, 1, 388, 1, 5, 2, 3, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apEAnyCollisions.setStatus('mandatory')
apE1orMoreColls = MibScalar((1, 3, 6, 1, 4, 1, 388, 1, 5, 2, 3, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apE1orMoreColls.setStatus('mandatory')
apEMaxCollisions = MibScalar((1, 3, 6, 1, 4, 1, 388, 1, 5, 2, 3, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apEMaxCollisions.setStatus('mandatory')
apELateCollisions = MibScalar((1, 3, 6, 1, 4, 1, 388, 1, 5, 2, 3, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apELateCollisions.setStatus('mandatory')
apEPktsDefers = MibScalar((1, 3, 6, 1, 4, 1, 388, 1, 5, 2, 3, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apEPktsDefers.setStatus('mandatory')
apEBcMcPkts = MibScalar((1, 3, 6, 1, 4, 1, 388, 1, 5, 2, 3, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apEBcMcPkts.setStatus('mandatory')
apEIndividualAddrs = MibScalar((1, 3, 6, 1, 4, 1, 388, 1, 5, 2, 3, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apEIndividualAddrs.setStatus('mandatory')
rfBcMcPktsSents = MibScalar((1, 3, 6, 1, 4, 1, 388, 1, 5, 2, 4, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rfBcMcPktsSents.setStatus('mandatory')
rfBcMcPktsRcvds = MibScalar((1, 3, 6, 1, 4, 1, 388, 1, 5, 2, 4, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rfBcMcPktsRcvds.setStatus('mandatory')
rfBcMcOctSents = MibScalar((1, 3, 6, 1, 4, 1, 388, 1, 5, 2, 4, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rfBcMcOctSents.setStatus('mandatory')
rfBcMcOctRcvds = MibScalar((1, 3, 6, 1, 4, 1, 388, 1, 5, 2, 4, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rfBcMcOctRcvds.setStatus('mandatory')
rfSysPktsSents = MibScalar((1, 3, 6, 1, 4, 1, 388, 1, 5, 2, 4, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rfSysPktsSents.setStatus('mandatory')
rfSysPktsRcvds = MibScalar((1, 3, 6, 1, 4, 1, 388, 1, 5, 2, 4, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rfSysPktsRcvds.setStatus('mandatory')
rfSBcMcPktsSents = MibScalar((1, 3, 6, 1, 4, 1, 388, 1, 5, 2, 4, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rfSBcMcPktsSents.setStatus('mandatory')
rfSBcMcPktsRcvds = MibScalar((1, 3, 6, 1, 4, 1, 388, 1, 5, 2, 4, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rfSBcMcPktsRcvds.setStatus('mandatory')
rfSuccFragPkts = MibScalar((1, 3, 6, 1, 4, 1, 388, 1, 5, 2, 4, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rfSuccFragPkts.setStatus('mandatory')
rfUnsuccFragPkts = MibScalar((1, 3, 6, 1, 4, 1, 388, 1, 5, 2, 4, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rfUnsuccFragPkts.setStatus('mandatory')
rfTotalFragSents = MibScalar((1, 3, 6, 1, 4, 1, 388, 1, 5, 2, 4, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rfTotalFragSents.setStatus('mandatory')
rfTotalFragRcvds = MibScalar((1, 3, 6, 1, 4, 1, 388, 1, 5, 2, 4, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rfTotalFragRcvds.setStatus('mandatory')
rfSuccReassPkts = MibScalar((1, 3, 6, 1, 4, 1, 388, 1, 5, 2, 4, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rfSuccReassPkts.setStatus('mandatory')
rfUnsuccReassPkts = MibScalar((1, 3, 6, 1, 4, 1, 388, 1, 5, 2, 4, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rfUnsuccReassPkts.setStatus('mandatory')
rfAssocMUs = MibScalar((1, 3, 6, 1, 4, 1, 388, 1, 5, 2, 4, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rfAssocMUs.setStatus('mandatory')
rfRcvdCRCErrors = MibScalar((1, 3, 6, 1, 4, 1, 388, 1, 5, 2, 4, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rfRcvdCRCErrors.setStatus('mandatory')
rfRcvdDupPkts = MibScalar((1, 3, 6, 1, 4, 1, 388, 1, 5, 2, 4, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rfRcvdDupPkts.setStatus('mandatory')
rfTotalCollisions = MibScalar((1, 3, 6, 1, 4, 1, 388, 1, 5, 2, 4, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rfTotalCollisions.setStatus('mandatory')
rfPktsWithoutColls = MibScalar((1, 3, 6, 1, 4, 1, 388, 1, 5, 2, 4, 19), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rfPktsWithoutColls.setStatus('mandatory')
rfPktsWithMaxColls = MibScalar((1, 3, 6, 1, 4, 1, 388, 1, 5, 2, 4, 20), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rfPktsWithMaxColls.setStatus('mandatory')
rfPktsWithColls = MibScalar((1, 3, 6, 1, 4, 1, 388, 1, 5, 2, 4, 21), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rfPktsWithColls.setStatus('mandatory')
rfDataPktsSents = MibScalar((1, 3, 6, 1, 4, 1, 388, 1, 5, 2, 4, 22), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rfDataPktsSents.setStatus('mandatory')
rfDataPktsRcvds = MibScalar((1, 3, 6, 1, 4, 1, 388, 1, 5, 2, 4, 23), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rfDataPktsRcvds.setStatus('mandatory')
rfDataOctetsSents = MibScalar((1, 3, 6, 1, 4, 1, 388, 1, 5, 2, 4, 24), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rfDataOctetsSents.setStatus('mandatory')
rfDataOctetsRcvds = MibScalar((1, 3, 6, 1, 4, 1, 388, 1, 5, 2, 4, 25), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rfDataOctetsRcvds.setStatus('mandatory')
rfEncrypPktsSents = MibScalar((1, 3, 6, 1, 4, 1, 388, 1, 5, 2, 4, 26), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rfEncrypPktsSents.setStatus('mandatory')
rfEncrypPktsRcvds = MibScalar((1, 3, 6, 1, 4, 1, 388, 1, 5, 2, 4, 27), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rfEncrypPktsRcvds.setStatus('mandatory')
apNbrOfDialouts = MibScalar((1, 3, 6, 1, 4, 1, 388, 1, 5, 2, 6, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apNbrOfDialouts.setStatus('mandatory')
apDialoutFailures = MibScalar((1, 3, 6, 1, 4, 1, 388, 1, 5, 2, 6, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apDialoutFailures.setStatus('mandatory')
apNbrOfAnswers = MibScalar((1, 3, 6, 1, 4, 1, 388, 1, 5, 2, 6, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apNbrOfAnswers.setStatus('mandatory')
apCurrCallTime = MibScalar((1, 3, 6, 1, 4, 1, 388, 1, 5, 2, 6, 4), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apCurrCallTime.setStatus('mandatory')
apLastCallTime = MibScalar((1, 3, 6, 1, 4, 1, 388, 1, 5, 2, 6, 5), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apLastCallTime.setStatus('mandatory')
apWNMPCfgPkts = MibScalar((1, 3, 6, 1, 4, 1, 388, 1, 5, 2, 7, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apWNMPCfgPkts.setStatus('mandatory')
wEchoRequests = MibScalar((1, 3, 6, 1, 4, 1, 388, 1, 5, 2, 7, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wEchoRequests.setStatus('mandatory')
wPingRequests = MibScalar((1, 3, 6, 1, 4, 1, 388, 1, 5, 2, 7, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wPingRequests.setStatus('mandatory')
wPktsFromNVs = MibScalar((1, 3, 6, 1, 4, 1, 388, 1, 5, 2, 7, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wPktsFromNVs.setStatus('mandatory')
wPPktsToNVs = MibScalar((1, 3, 6, 1, 4, 1, 388, 1, 5, 2, 7, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wPPktsToNVs.setStatus('mandatory')
wPassThruEchoes = MibScalar((1, 3, 6, 1, 4, 1, 388, 1, 5, 2, 7, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wPassThruEchoes.setStatus('mandatory')
apCurrentMUs = MibScalar((1, 3, 6, 1, 4, 1, 388, 1, 5, 2, 8, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apCurrentMUs.setStatus('mandatory')
apMaxMUs = MibScalar((1, 3, 6, 1, 4, 1, 388, 1, 5, 2, 8, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apMaxMUs.setStatus('mandatory')
apTotalAssocs = MibScalar((1, 3, 6, 1, 4, 1, 388, 1, 5, 2, 8, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apTotalAssocs.setStatus('mandatory')
apMUTable = MibTable((1, 3, 6, 1, 4, 1, 388, 1, 5, 2, 8, 4), )
if mibBuilder.loadTexts: apMUTable.setStatus('mandatory')
apMUEntry = MibTableRow((1, 3, 6, 1, 4, 1, 388, 1, 5, 2, 8, 4, 1), ).setIndexNames((0, "SYMBOL-DSSS-ENTERPRISE-PRIVATE-MIB", "muIndex"))
if mibBuilder.loadTexts: apMUEntry.setStatus('mandatory')
muIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 1, 5, 2, 8, 4, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 127))).setMaxAccess("readonly")
if mibBuilder.loadTexts: muIndex.setStatus('mandatory')
muMacAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 1, 5, 2, 8, 4, 1, 2), PhysAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: muMacAddr.setStatus('mandatory')
muInterface = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 1, 5, 2, 8, 4, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("ethernet", 1), ("ppp", 2), ("rf", 3), ("apstack", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: muInterface.setStatus('mandatory')
muState = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 1, 5, 2, 8, 4, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(3, 4))).clone(namedValues=NamedValues(("associated", 3), ("not-associated", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: muState.setStatus('mandatory')
muPowerMode = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 1, 5, 2, 8, 4, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("cam", 1), ("psp", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: muPowerMode.setStatus('mandatory')
muStationID = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 1, 5, 2, 8, 4, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: muStationID.setStatus('mandatory')
muLastAPAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 1, 5, 2, 8, 4, 1, 7), PhysAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: muLastAPAddr.setStatus('mandatory')
muTotalAssoc = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 1, 5, 2, 8, 4, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: muTotalAssoc.setStatus('mandatory')
muAssocStart = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 1, 5, 2, 8, 4, 1, 9), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: muAssocStart.setStatus('mandatory')
muLstAssStrt = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 1, 5, 2, 8, 4, 1, 10), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: muLstAssStrt.setStatus('mandatory')
muLastAssEnd = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 1, 5, 2, 8, 4, 1, 11), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: muLastAssEnd.setStatus('mandatory')
muNPktsSents = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 1, 5, 2, 8, 4, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: muNPktsSents.setStatus('mandatory')
muNPktsRcvds = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 1, 5, 2, 8, 4, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: muNPktsRcvds.setStatus('mandatory')
muNBytesSents = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 1, 5, 2, 8, 4, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: muNBytesSents.setStatus('mandatory')
muNBytesRcvds = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 1, 5, 2, 8, 4, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: muNBytesRcvds.setStatus('mandatory')
muNDiscdPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 1, 5, 2, 8, 4, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: muNDiscdPkts.setStatus('mandatory')
muTmLastData = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 1, 5, 2, 8, 4, 1, 17), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: muTmLastData.setStatus('mandatory')
muPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 1, 5, 2, 8, 4, 1, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("voice", 1), ("normal", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: muPriority.setStatus('mandatory')
muSupportedRates = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 1, 5, 2, 8, 4, 1, 19), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15))).clone(namedValues=NamedValues(("one-Mb", 1), ("two-Mb", 2), ("one-and-two-Mb", 3), ("five-half-Mb", 4), ("one-and-five-half-Mb", 5), ("two-and-five-half-Mb", 6), ("one-and-two-and-five-half-Mb", 7), ("eleven-Mb", 8), ("one-and-eleven-Mb", 9), ("two-and-eleven-Mb", 10), ("one-and-two-and-eleven-Mb", 11), ("five-half-and-eleven-Mb", 12), ("one-and-five-half-and-eleven-Mb", 13), ("two-and-five-half-and-eleven-Mb", 14), ("one-and-two-and-five-half-and-eleven-Mb", 15)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: muSupportedRates.setStatus('mandatory')
muCurrentXmtRate = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 1, 5, 2, 8, 4, 1, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("one-Megabit", 1), ("two-Megabit", 2), ("five-half-Megabit", 3), ("eleven-Megabit", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: muCurrentXmtRate.setStatus('mandatory')
muLastActivity = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 1, 5, 2, 8, 4, 1, 21), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: muLastActivity.setStatus('mandatory')
apMUHmAgTable = MibTable((1, 3, 6, 1, 4, 1, 388, 1, 5, 2, 8, 5), )
if mibBuilder.loadTexts: apMUHmAgTable.setStatus('mandatory')
apMUHATEntry = MibTableRow((1, 3, 6, 1, 4, 1, 388, 1, 5, 2, 8, 5, 1), ).setIndexNames((0, "SYMBOL-DSSS-ENTERPRISE-PRIVATE-MIB", "muHATMUIpAddr"))
if mibBuilder.loadTexts: apMUHATEntry.setStatus('mandatory')
muHATMUIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 1, 5, 2, 8, 5, 1, 1), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: muHATMUIpAddr.setStatus('mandatory')
muHATFrAgIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 1, 5, 2, 8, 5, 1, 2), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: muHATFrAgIpAddr.setStatus('mandatory')
apMUFrAgTable = MibTable((1, 3, 6, 1, 4, 1, 388, 1, 5, 2, 8, 6), )
if mibBuilder.loadTexts: apMUFrAgTable.setStatus('mandatory')
apMUFATEntry = MibTableRow((1, 3, 6, 1, 4, 1, 388, 1, 5, 2, 8, 6, 1), ).setIndexNames((0, "SYMBOL-DSSS-ENTERPRISE-PRIVATE-MIB", "muFATMUIpAddr"))
if mibBuilder.loadTexts: apMUFATEntry.setStatus('mandatory')
muFATMUIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 1, 5, 2, 8, 6, 1, 1), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: muFATMUIpAddr.setStatus('mandatory')
muFATHmAgIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 1, 5, 2, 8, 6, 1, 2), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: muFATHmAgIpAddr.setStatus('mandatory')
apKnownAPsTable = MibTable((1, 3, 6, 1, 4, 1, 388, 1, 5, 2, 9), )
if mibBuilder.loadTexts: apKnownAPsTable.setStatus('mandatory')
apKnownAPsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 388, 1, 5, 2, 9, 1), ).setIndexNames((0, "SYMBOL-DSSS-ENTERPRISE-PRIVATE-MIB", "apAPMacAddr"))
if mibBuilder.loadTexts: apKnownAPsEntry.setStatus('mandatory')
apAPMacAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 1, 5, 2, 9, 1, 1), PhysAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apAPMacAddr.setStatus('mandatory')
apAPIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 1, 5, 2, 9, 1, 2), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apAPIpAddr.setStatus('mandatory')
apHoppingSet = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 1, 5, 2, 9, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apHoppingSet.setStatus('mandatory')
apHoppingSeq = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 1, 5, 2, 9, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apHoppingSeq.setStatus('mandatory')
apNbrOfMUs = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 1, 5, 2, 9, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apNbrOfMUs.setStatus('mandatory')
apKBIOS = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 1, 5, 2, 9, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apKBIOS.setStatus('mandatory')
apAway = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 1, 5, 2, 9, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: apAway.setStatus('mandatory')
ap802dot11Protocol = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 1, 5, 2, 9, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ap802dot11Protocol.setStatus('mandatory')
apFwVer = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 1, 5, 2, 9, 1, 9), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: apFwVer.setStatus('mandatory')
apDSchannel = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 1, 5, 2, 9, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apDSchannel.setStatus('mandatory')
apAdrViolations = MibScalar((1, 3, 6, 1, 4, 1, 388, 1, 5, 2, 10, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apAdrViolations.setStatus('mandatory')
apTypeViolations = MibScalar((1, 3, 6, 1, 4, 1, 388, 1, 5, 2, 10, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apTypeViolations.setStatus('mandatory')
apNbrOfWLAPItfs = MibScalar((1, 3, 6, 1, 4, 1, 388, 1, 5, 2, 11, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apNbrOfWLAPItfs.setStatus('mandatory')
apWLAPState = MibScalar((1, 3, 6, 1, 4, 1, 388, 1, 5, 2, 11, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 10, 12, 14, 15, 16))).clone(namedValues=NamedValues(("initializing", 1), ("send-probe", 2), ("send-assoc-req", 3), ("send-cfg-bpdu", 4), ("wait-for-probe", 5), ("send-probe-rsp", 6), ("send-assoc-rsp", 7), ("send-cfg-rsp", 8), ("receive-root-rsp", 10), ("root-ap-lost", 12), ("disabled", 14), ("functional", 15), ("wlap-lost-on-ethernet", 16)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: apWLAPState.setStatus('mandatory')
apWLAPHopSequence = MibScalar((1, 3, 6, 1, 4, 1, 388, 1, 5, 2, 11, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apWLAPHopSequence.setStatus('mandatory')
apRootInterface = MibScalar((1, 3, 6, 1, 4, 1, 388, 1, 5, 2, 11, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apRootInterface.setStatus('mandatory')
apRootWLAPID = MibScalar((1, 3, 6, 1, 4, 1, 388, 1, 5, 2, 11, 5), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 8))).setMaxAccess("readonly")
if mibBuilder.loadTexts: apRootWLAPID.setStatus('mandatory')
apRootPathCost = MibScalar((1, 3, 6, 1, 4, 1, 388, 1, 5, 2, 11, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apRootPathCost.setStatus('mandatory')
apWLAPID = MibScalar((1, 3, 6, 1, 4, 1, 388, 1, 5, 2, 11, 7), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 8))).setMaxAccess("readonly")
if mibBuilder.loadTexts: apWLAPID.setStatus('mandatory')
apWLAPItfTable = MibTable((1, 3, 6, 1, 4, 1, 388, 1, 5, 2, 11, 8), )
if mibBuilder.loadTexts: apWLAPItfTable.setStatus('mandatory')
apWLAPItfEntry = MibTableRow((1, 3, 6, 1, 4, 1, 388, 1, 5, 2, 11, 8, 1), ).setIndexNames((0, "SYMBOL-DSSS-ENTERPRISE-PRIVATE-MIB", "apWLAPItfID"))
if mibBuilder.loadTexts: apWLAPItfEntry.setStatus('mandatory')
apWLAPItfID = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 1, 5, 2, 11, 8, 1, 1), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 2))).setMaxAccess("readonly")
if mibBuilder.loadTexts: apWLAPItfID.setStatus('mandatory')
apWLAPItfAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 1, 5, 2, 11, 8, 1, 2), PhysAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apWLAPItfAddr.setStatus('mandatory')
apWLAPItfState = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 1, 5, 2, 11, 8, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("disabled", 1), ("listening", 2), ("learning", 3), ("forwarding", 4), ("blocking", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: apWLAPItfState.setStatus('mandatory')
apWLAPPathCost = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 1, 5, 2, 11, 8, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apWLAPPathCost.setStatus('mandatory')
apDsgnatedRoot = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 1, 5, 2, 11, 8, 1, 5), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 8))).setMaxAccess("readonly")
if mibBuilder.loadTexts: apDsgnatedRoot.setStatus('mandatory')
apDsgnatedCost = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 1, 5, 2, 11, 8, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apDsgnatedCost.setStatus('mandatory')
apDsgnatedWLAP = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 1, 5, 2, 11, 8, 1, 7), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 8))).setMaxAccess("readonly")
if mibBuilder.loadTexts: apDsgnatedWLAP.setStatus('mandatory')
apDsgnatedItf = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 1, 5, 2, 11, 8, 1, 8), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 2))).setMaxAccess("readonly")
if mibBuilder.loadTexts: apDsgnatedItf.setStatus('mandatory')
apRetryHistogramTable = MibTable((1, 3, 6, 1, 4, 1, 388, 1, 5, 2, 12), )
if mibBuilder.loadTexts: apRetryHistogramTable.setStatus('mandatory')
apRetryHistogramEntry = MibTableRow((1, 3, 6, 1, 4, 1, 388, 1, 5, 2, 12, 1), ).setIndexNames((0, "SYMBOL-DSSS-ENTERPRISE-PRIVATE-MIB", "apRetryHistogramIndex"))
if mibBuilder.loadTexts: apRetryHistogramEntry.setStatus('mandatory')
apRetryHistogramIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 1, 5, 2, 12, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: apRetryHistogramIndex.setStatus('mandatory')
apNumberOfRetries = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 1, 5, 2, 12, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 15))).setMaxAccess("readonly")
if mibBuilder.loadTexts: apNumberOfRetries.setStatus('mandatory')
apPacketsHistogramCounts = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 1, 5, 2, 12, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apPacketsHistogramCounts.setStatus('mandatory')
apDSPerFreqStatTable = MibTable((1, 3, 6, 1, 4, 1, 388, 1, 5, 2, 13), )
if mibBuilder.loadTexts: apDSPerFreqStatTable.setStatus('mandatory')
apDSPerFreqStatEntry = MibTableRow((1, 3, 6, 1, 4, 1, 388, 1, 5, 2, 13, 1), ).setIndexNames((0, "SYMBOL-DSSS-ENTERPRISE-PRIVATE-MIB", "rfDSFrequency"))
if mibBuilder.loadTexts: apDSPerFreqStatEntry.setStatus('mandatory')
rfDSFrequency = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 1, 5, 2, 13, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rfDSFrequency.setStatus('mandatory')
rfDSPerFqPktsSents = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 1, 5, 2, 13, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rfDSPerFqPktsSents.setStatus('mandatory')
rfDSPerFqPktsRcvds = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 1, 5, 2, 13, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rfDSPerFqPktsRcvds.setStatus('mandatory')
rfDSPerFqRetries = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 1, 5, 2, 13, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rfDSPerFqRetries.setStatus('mandatory')
apAgentAdSents = MibScalar((1, 3, 6, 1, 4, 1, 388, 1, 5, 2, 14, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apAgentAdSents.setStatus('mandatory')
apRegRequestRcvds = MibScalar((1, 3, 6, 1, 4, 1, 388, 1, 5, 2, 14, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apRegRequestRcvds.setStatus('mandatory')
apRegReplySents = MibScalar((1, 3, 6, 1, 4, 1, 388, 1, 5, 2, 14, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apRegReplySents.setStatus('mandatory')
apClrAllStatistics = MibScalar((1, 3, 6, 1, 4, 1, 388, 1, 5, 3, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apClrAllStatistics.setStatus('mandatory')
apClrMUTable = MibScalar((1, 3, 6, 1, 4, 1, 388, 1, 5, 3, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apClrMUTable.setStatus('mandatory')
apClrACL = MibScalar((1, 3, 6, 1, 4, 1, 388, 1, 5, 3, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apClrACL.setStatus('mandatory')
apClrACLRangeTable = MibScalar((1, 3, 6, 1, 4, 1, 388, 1, 5, 3, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apClrACLRangeTable.setStatus('mandatory')
apClrAddrFilterTbl = MibScalar((1, 3, 6, 1, 4, 1, 388, 1, 5, 3, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apClrAddrFilterTbl.setStatus('mandatory')
apLdACLFrMUList = MibScalar((1, 3, 6, 1, 4, 1, 388, 1, 5, 3, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apLdACLFrMUList.setStatus('mandatory')
apModemDialOut = MibScalar((1, 3, 6, 1, 4, 1, 388, 1, 5, 3, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apModemDialOut.setStatus('mandatory')
apModemHangUp = MibScalar((1, 3, 6, 1, 4, 1, 388, 1, 5, 3, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apModemHangUp.setStatus('mandatory')
apUpdateFirmware = MibScalar((1, 3, 6, 1, 4, 1, 388, 1, 5, 3, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apUpdateFirmware.setStatus('mandatory')
apDnLdFileName = MibScalar((1, 3, 6, 1, 4, 1, 388, 1, 5, 3, 10), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 50))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apDnLdFileName.setStatus('mandatory')
apTFTPServer = MibScalar((1, 3, 6, 1, 4, 1, 388, 1, 5, 3, 11), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apTFTPServer.setStatus('mandatory')
apResetAP = MibScalar((1, 3, 6, 1, 4, 1, 388, 1, 5, 3, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apResetAP.setStatus('mandatory')
apHTMLFileName = MibScalar((1, 3, 6, 1, 4, 1, 388, 1, 5, 3, 13), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 50))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apHTMLFileName.setStatus('mandatory')
apUpdateHTMLFile = MibScalar((1, 3, 6, 1, 4, 1, 388, 1, 5, 3, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apUpdateHTMLFile.setStatus('mandatory')
apDHCPEnable = MibScalar((1, 3, 6, 1, 4, 1, 388, 1, 5, 3, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apDHCPEnable.setStatus('mandatory')
apUpdAllAPsFirmware = MibScalar((1, 3, 6, 1, 4, 1, 388, 1, 5, 3, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apUpdAllAPsFirmware.setStatus('mandatory')
apUpdAllAPsHTMLFile = MibScalar((1, 3, 6, 1, 4, 1, 388, 1, 5, 3, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apUpdAllAPsHTMLFile.setStatus('mandatory')
apTFTPUpdBothFiles = MibScalar((1, 3, 6, 1, 4, 1, 388, 1, 5, 3, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apTFTPUpdBothFiles.setStatus('mandatory')
apHelpURL = MibScalar((1, 3, 6, 1, 4, 1, 388, 1, 5, 3, 19), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 40))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apHelpURL.setStatus('mandatory')
apFileUpdateStatus = MibScalar((1, 3, 6, 1, 4, 1, 388, 1, 5, 3, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16))).clone(namedValues=NamedValues(("download-successful", 1), ("too-many-XMODEM-errors", 2), ("xmodem-transfer-cancelled", 3), ("xmodem-packets-out-of-order", 4), ("tftp-server-unreachable", 5), ("no-ARP-response-from-server", 6), ("no-TFTP-service-on-server", 7), ("firmware-file-not-found", 8), ("html-file-not-found", 9), ("bad-permissions-for-firmware-file", 10), ("unable-to-open-firmware-file", 11), ("unable-to-open-HTML-file", 12), ("error-during-TFTP-download", 13), ("too-many-TFTP-retries", 14), ("corrupted-firmware-file", 15), ("general-download-failure", 16)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: apFileUpdateStatus.setStatus('mandatory')
apFlashLEDs = MibScalar((1, 3, 6, 1, 4, 1, 388, 1, 5, 3, 21), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apFlashLEDs.setStatus('mandatory')
apACLViolations = MibScalar((1, 3, 6, 1, 4, 1, 388, 1, 5, 4, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apACLViolations.setStatus('mandatory')
apSaveConfig = MibScalar((1, 3, 6, 1, 4, 1, 388, 1, 5, 4, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apSaveConfig.setStatus('mandatory')
apAccCtrlTable = MibTable((1, 3, 6, 1, 4, 1, 388, 1, 5, 4, 3), )
if mibBuilder.loadTexts: apAccCtrlTable.setStatus('mandatory')
apAccCtrlEntry = MibTableRow((1, 3, 6, 1, 4, 1, 388, 1, 5, 4, 3, 1), ).setIndexNames((0, "SYMBOL-DSSS-ENTERPRISE-PRIVATE-MIB", "allowedIndex"))
if mibBuilder.loadTexts: apAccCtrlEntry.setStatus('mandatory')
allowedIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 1, 5, 4, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 512))).setMaxAccess("readonly")
if mibBuilder.loadTexts: allowedIndex.setStatus('mandatory')
allowedMU = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 1, 5, 4, 3, 1, 2), PhysAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: allowedMU.setStatus('mandatory')
apACLRangeTable = MibTable((1, 3, 6, 1, 4, 1, 388, 1, 5, 4, 4), )
if mibBuilder.loadTexts: apACLRangeTable.setStatus('mandatory')
apACLRangeEntry = MibTableRow((1, 3, 6, 1, 4, 1, 388, 1, 5, 4, 4, 1), ).setIndexNames((0, "SYMBOL-DSSS-ENTERPRISE-PRIVATE-MIB", "apACLRangeIndex"))
if mibBuilder.loadTexts: apACLRangeEntry.setStatus('mandatory')
apACLRangeIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 1, 5, 4, 4, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 8))).setMaxAccess("readonly")
if mibBuilder.loadTexts: apACLRangeIndex.setStatus('mandatory')
lowMacAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 1, 5, 4, 4, 1, 2), PhysAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lowMacAddr.setStatus('mandatory')
highMacAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 1, 5, 4, 4, 1, 3), PhysAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: highMacAddr.setStatus('mandatory')
apSaveConfigAllAPs = MibScalar((1, 3, 6, 1, 4, 1, 388, 1, 5, 4, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apSaveConfigAllAPs.setStatus('mandatory')
apWEPLicenseKey = MibScalar((1, 3, 6, 1, 4, 1, 388, 1, 5, 4, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 20))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apWEPLicenseKey.setStatus('mandatory')
ap128bWEPFlag = MibScalar((1, 3, 6, 1, 4, 1, 388, 1, 5, 4, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ap128bWEPFlag.setStatus('mandatory')
mibBuilder.exportSymbols("SYMBOL-DSSS-ENTERPRISE-PRIVATE-MIB", apSerialPortStatistics=apSerialPortStatistics, apWLAPID=apWLAPID, apWLAPItfAddr=apWLAPItfAddr, wPktsFromNVs=wPktsFromNVs, apPerformMgmt=apPerformMgmt, apDHCPChangeEnable=apDHCPChangeEnable, disallowedIndex=disallowedIndex, apRFRate1Mb=apRFRate1Mb, muHATFrAgIpAddr=muHATFrAgIpAddr, apHTMLFileName=apHTMLFileName, apOctOutPerSec=apOctOutPerSec, apNPktsToAPStks=apNPktsToAPStks, apUpdateFirmware=apUpdateFirmware, apWEPAlgorithm=apWEPAlgorithm, apWLAPItfEntry=apWLAPItfEntry, apFlashLEDs=apFlashLEDs, apRadioType=apRadioType, muIndex=muIndex, rfSuccFragPkts=rfSuccFragPkts, apPPPState=apPPPState, apProtoItfName=apProtoItfName, apDSRootWLAPLostTrap=apDSRootWLAPLostTrap, apSerialnumber=apSerialnumber, apModemDialOut=apModemDialOut, apPacketsHistogramCounts=apPacketsHistogramCounts, muLastAssEnd=muLastAssEnd, apWLAPManualBSSID=apWLAPManualBSSID, muNPktsRcvds=muNPktsRcvds, apRFRate11Mb=apRFRate11Mb, apDefaultInterface=apDefaultInterface, additionalGatewaysIndex=additionalGatewaysIndex, rfBcMcPktsSents=rfBcMcPktsSents, apKnownAPsEntry=apKnownAPsEntry, rfSBcMcPktsSents=rfSBcMcPktsSents, apMaxRetriesVoice=apMaxRetriesVoice, rfBcMcOctSents=rfBcMcOctSents, apRootWLAPID=apRootWLAPID, rfBcMcPktsRcvds=rfBcMcPktsRcvds, apConfigMgmt=apConfigMgmt, apTypeFilterEnable=apTypeFilterEnable, apWLAPFwdDelay=apWLAPFwdDelay, apRWCommunityName=apRWCommunityName, apEPktsForwardeds=apEPktsForwardeds, apItfStatTable=apItfStatTable, apUpdAllAPsHTMLFile=apUpdAllAPsHTMLFile, apAllTrapsEnable=apAllTrapsEnable, apVendorID=apVendorID, apRegRequestRcvds=apRegRequestRcvds, muNBytesRcvds=muNBytesRcvds, rfDataOctetsRcvds=rfDataOctetsRcvds, apDHCPEnable=apDHCPEnable, apResetAP=apResetAP, typeIndex=typeIndex, apMUHmAgTable=apMUHmAgTable, apEBcMcPkts=apEBcMcPkts, apEnetPortState=apEnetPortState, apTrapHost2IpAdr=apTrapHost2IpAdr, apACLRangeTable=apACLRangeTable, rfUnsuccReassPkts=rfUnsuccReassPkts, apMyIPAddr=apMyIPAddr, apRFConfig=apRFConfig, apMyMacAddr=apMyMacAddr, apItfStatIndex=apItfStatIndex, symbol=symbol, apEthernetStatistics=apEthernetStatistics, apRootPathCost=apRootPathCost, apDSAPRFStartUpTrap=apDSAPRFStartUpTrap, apAgentAdSents=apAgentAdSents, apHelpURL=apHelpURL, apNetID=apNetID, apLdACLFrMUList=apLdACLFrMUList, apWLAPInfo=apWLAPInfo, apAnswerWaitTime=apAnswerWaitTime, apRegReplySents=apRegReplySents, apMUInactivityTimeOut=apMUInactivityTimeOut, apWLAPConnChngTrapEnable=apWLAPConnChngTrapEnable, wEchoRequests=wEchoRequests, apMUHATEntry=apMUHATEntry, authenticationFailure=authenticationFailure, rfPktsWithMaxColls=rfPktsWithMaxColls, apDialOutNumber=apDialOutNumber, apNPktsToPpps=apNPktsToPpps, rfSuccReassPkts=rfSuccReassPkts, apWLAPPathCost=apWLAPPathCost, apTFTPUpdBothFiles=apTFTPUpdBothFiles, apPPPTimeout=apPPPTimeout, rfPktsWithColls=rfPktsWithColls, apRFPreamble=apRFPreamble, apMUTable=apMUTable, apSystemConfig=apSystemConfig, apTypeFilterEntry=apTypeFilterEntry, apColdBootTrapEnable=apColdBootTrapEnable, apMUStateChngTrapEnable=apMUStateChngTrapEnable, rfEncrypPktsRcvds=rfEncrypPktsRcvds, apRFPortState=apRFPortState, rfDSFrequency=rfDSFrequency, apKnownAPsTable=apKnownAPsTable, apRFStatistics=apRFStatistics, apClrACLRangeTable=apClrACLRangeTable, rfBcMcOctRcvds=rfBcMcOctRcvds, apDSDsgntedWLAPUpTrap=apDSDsgntedWLAPUpTrap, apDSAPDHCPConfigChgTrap=apDSAPDHCPConfigChgTrap, WEPKeytype128b=WEPKeytype128b, apNbrOfMUs=apNbrOfMUs, apUpdAllAPsFirmware=apUpdAllAPsFirmware, apTrafficMatrixEntry=apTrafficMatrixEntry, apWEPLicenseKey=apWEPLicenseKey, apUnitName=apUnitName, apModemHangUp=apModemHangUp, apInterfaceName=apInterfaceName, muLstAssStrt=muLstAssStrt, apMUInfo=apMUInfo, apELateCollisions=apELateCollisions, highMacAddr=highMacAddr, apNPktsToRfs=apNPktsToRfs, apMcastMaskVoice=apMcastMaskVoice, apSerialPortConfig=apSerialPortConfig, apSNMPMode=apSNMPMode, apClrACL=apClrACL, apWLAPPriority=apWLAPPriority, apAntennaSelect=apAntennaSelect, apRootInterface=apRootInterface, apReassemblyTimeOut=apReassemblyTimeOut, apMUFrAgTable=apMUFrAgTable, muHATMUIpAddr=muHATMUIpAddr, apPacketsIns=apPacketsIns, apRetryHistogramEntry=apRetryHistogramEntry, apRetryHistogramTable=apRetryHistogramTable, muMacAddr=muMacAddr, apModemSpeaker=apModemSpeaker, apRFRate2Mb=apRFRate2Mb, apLastCallTime=apLastCallTime, rfDSPerFqRetries=rfDSPerFqRetries, apOctetsIns=apOctetsIns, apAdditionalGatewaysTable=apAdditionalGatewaysTable, apWLAPMaxAge=apWLAPMaxAge, muStationID=muStationID, apInactivityTimeout=apInactivityTimeout, apEPktsDiscNoMatchs=apEPktsDiscNoMatchs, apNbrOfAnswers=apNbrOfAnswers, rfDSPerFqPktsRcvds=rfDSPerFqPktsRcvds, apDsgnatedRoot=apDsgnatedRoot, muFATHmAgIpAddr=muFATHmAgIpAddr, apEPktsDiscCRCs=apEPktsDiscCRCs, apAdditionalGatewaysIPAddr=apAdditionalGatewaysIPAddr, apACLViolations=apACLViolations, apPktsOutPerSec=apPktsOutPerSec, apUpdateHTMLFile=apUpdateHTMLFile, apSNMPRequests=apSNMPRequests, apSNMPInfo=apSNMPInfo, apFilterStatistics=apFilterStatistics, apAPIpAddr=apAPIpAddr, apDsgnatedItf=apDsgnatedItf, apEPktsDiscBuffers=apEPktsDiscBuffers, apWebServerEnable=apWebServerEnable, apGatewayIPAddr=apGatewayIPAddr, rfTotalFragSents=rfTotalFragSents, apModemConnected=apModemConnected, apDSAPMUUnAssocTrap=apDSAPMUUnAssocTrap, apWNMPEnable=apWNMPEnable, apEPktsDiscForceds=apEPktsDiscForceds, rfTotalCollisions=rfTotalCollisions, apSaveConfigAllAPs=apSaveConfigAllAPs, apDSAPMUAssocTrap=apDSAPMUAssocTrap, apBCMCQMax=apBCMCQMax, apPPPTerminates=apPPPTerminates, rfTotalFragRcvds=rfTotalFragRcvds, apTypeViolations=apTypeViolations, apTFTPServer=apTFTPServer, apACLTrapEnable=apACLTrapEnable, apMfgDate=apMfgDate, apHoppingSeq=apHoppingSeq, apEPktsSeens=apEPktsSeens, rfDataPktsRcvds=rfDataPktsRcvds, apClrAddrFilterTbl=apClrAddrFilterTbl, apPacketsOuts=apPacketsOuts, apPktsInPerSec=apPktsInPerSec, apConnectMode=apConnectMode, muNDiscdPkts=muNDiscdPkts, apWNMPStatistics=apWNMPStatistics, apRetryHistogramIndex=apRetryHistogramIndex, apAddrFilterTable=apAddrFilterTable, apAgentAdInterval=apAgentAdInterval, apAPStateXchgEnable=apAPStateXchgEnable, apACLRangeIndex=apACLRangeIndex, apEthernetTimeOut=apEthernetTimeOut, apAPMacAddr=apAPMacAddr, muPriority=muPriority, apMUEntry=apMUEntry, apWLAPItfState=apWLAPItfState, apMUMUDisallowed=apMUMUDisallowed, apWLAPItfID=apWLAPItfID, apAdrViolations=apAdrViolations, apSaveConfig=apSaveConfig, apTotalAssocs=apTotalAssocs, apRFRate5_5Mb=apRFRate5_5Mb, muFATMUIpAddr=muFATMUIpAddr, apHardwareRev=apHardwareRev, apKBIOS=apKBIOS, rfSysPktsRcvds=rfSysPktsRcvds, apModelnumber=apModelnumber, rfDataOctetsSents=rfDataOctetsSents, muPowerMode=muPowerMode, muTmLastData=muTmLastData, etherType=etherType, rfRcvdDupPkts=rfRcvdDupPkts, rfPktsWithoutColls=rfPktsWithoutColls, apEPktsDefers=apEPktsDefers, muState=muState, apROCommunityName=apROCommunityName, muCurrentXmtRate=muCurrentXmtRate, apAdditionalGatewaysEntry=apAdditionalGatewaysEntry, dsap=dsap, apHTMLFileRev=apHTMLFileRev, apAway=apAway, apDialoutFailures=apDialoutFailures, muLastActivity=muLastActivity, apSubnetMask=apSubnetMask, apDSDsgnatedWLAPLostTrap=apDSDsgnatedWLAPLostTrap, spectrum24=spectrum24, apAPFirmwareRev=apAPFirmwareRev, rfRcvdCRCErrors=rfRcvdCRCErrors, apDSAPMUMaxAssocTrap=apDSAPMUMaxAssocTrap, apTrafficMatrixTable=apTrafficMatrixTable, wPassThruEchoes=wPassThruEchoes, apNPktsToEnets=apNPktsToEnets, wPPktsToNVs=wPPktsToNVs, apWLAPMode=apWLAPMode, apDSRootWLAPUpTrap=apDSRootWLAPUpTrap, apTMTableIndex=apTMTableIndex, rfSBcMcPktsRcvds=rfSBcMcPktsRcvds, apAcceptBCESSID=apAcceptBCESSID, apWLAPHopSequence=apWLAPHopSequence, wPingRequests=wPingRequests, apTypeFilterTable=apTypeFilterTable, apNumberOfRetries=apNumberOfRetries, apClrAllStatistics=apClrAllStatistics, ap802dot11Protocol=ap802dot11Protocol, apMaxMUTrigger=apMaxMUTrigger, rfUnsuccFragPkts=rfUnsuccFragPkts, apAccCtrlEntry=apAccCtrlEntry, muAssocStart=muAssocStart, apWLAPItfTable=apWLAPItfTable, rfDataPktsSents=rfDataPktsSents, apTelnetEnable=apTelnetEnable, apSecurityMgmt=apSecurityMgmt, apOctInPerSec=apOctInPerSec, rfDSPerFqPktsSents=rfDSPerFqPktsSents, apSNMPTraps=apSNMPTraps, muSupportedRates=muSupportedRates, apFaultMgmt=apFaultMgmt, apEMaxCollisions=apEMaxCollisions, apMobileIPStatistics=apMobileIPStatistics, apWLAPHelloTime=apWLAPHelloTime)
mibBuilder.exportSymbols("SYMBOL-DSSS-ENTERPRISE-PRIVATE-MIB", apE1orMoreColls=apE1orMoreColls, apCountryName=apCountryName, disallowedMU=disallowedMU, muNPktsSents=muNPktsSents, apManufactureInfo=apManufactureInfo, apSerialPortUse=apSerialPortUse, apEIndividualAddrs=apEIndividualAddrs, rfEncrypPktsSents=rfEncrypPktsSents, apDsgnatedWLAP=apDsgnatedWLAP, apWEPKeyEntry=apWEPKeyEntry, apTrapHost1IpAdr=apTrapHost1IpAdr, apAccCtrlTable=apAccCtrlTable, apRFTrapEnable=apRFTrapEnable, apFileUpdateStatus=apFileUpdateStatus, apNbrOfDialouts=apNbrOfDialouts, apDsgnatedCost=apDsgnatedCost, apEncryptAdmin=apEncryptAdmin, apDialOutMode=apDialOutMode, apClrMUTable=apClrMUTable, apACLRangeEntry=apACLRangeEntry, muNBytesSents=muNBytesSents, allowedIndex=allowedIndex, allowedMU=allowedMU, apAccCtrlEnable=apAccCtrlEnable, apDSchannel=apDSchannel, apWNMPCfgPkts=apWNMPCfgPkts, apDSPerFreqStatEntry=apDSPerFreqStatEntry, apMaxMUs=apMaxMUs, lowMacAddr=lowMacAddr, muLastAPAddr=muLastAPAddr, apItfStatEntry=apItfStatEntry, apDnLdFileName=apDnLdFileName, apEAnyCollisions=apEAnyCollisions, apCurrentMUs=apCurrentMUs, apEPktsSents=apEPktsSents, ap128bWEPFlag=ap128bWEPFlag, apCurrCallTime=apCurrCallTime, apOctetsOuts=apOctetsOuts, apHoppingSet=apHoppingSet, rfSysPktsSents=rfSysPktsSents, apAuthenFailureTrapEnable=apAuthenFailureTrapEnable, apMUFATEntry=apMUFATEntry, apWLAPState=apWLAPState, apDSAPDHCPLeaseUpTrap=apDSAPDHCPLeaseUpTrap, apNbrOfWLAPItfs=apNbrOfWLAPItfs, apFwVer=apFwVer, apRFFirmwareRev=apRFFirmwareRev, apMobileHomeMD5Key=apMobileHomeMD5Key, ap128bWepKeyValue=ap128bWepKeyValue, coldStart=coldStart, apAddrFilterEntry=apAddrFilterEntry, muInterface=muInterface, rfAssocMUs=rfAssocMUs, apDSPerFreqStatTable=apDSPerFreqStatTable, apMulticastMask=apMulticastMask, ap128bWEPKeyTable=ap128bWEPKeyTable, apDSAPACLViolationTrap=apDSAPACLViolationTrap, apMaxRetries=apMaxRetries, muTotalAssoc=muTotalAssoc, ap128bWepkeyIndex=ap128bWepkeyIndex, apS24MobileIPEnable=apS24MobileIPEnable)
