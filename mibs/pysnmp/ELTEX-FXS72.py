#
# PySNMP MIB module ELTEX-FXS72 (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/ELTEX-FXS72
# Produced by pysmi-0.3.4 at Mon Apr 29 18:45:47 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, ObjectIdentifier, OctetString = mibBuilder.importSymbols("ASN1", "Integer", "ObjectIdentifier", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsIntersection, ValueRangeConstraint, ValueSizeConstraint, ConstraintsUnion, SingleValueConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsIntersection", "ValueRangeConstraint", "ValueSizeConstraint", "ConstraintsUnion", "SingleValueConstraint")
elHardware, = mibBuilder.importSymbols("ELTEX-SMI-ACTUAL", "elHardware")
ObjectGroup, ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ObjectGroup", "ModuleCompliance", "NotificationGroup")
ModuleIdentity, MibIdentifier, Integer32, MibScalar, MibTable, MibTableRow, MibTableColumn, Bits, Counter32, IpAddress, Unsigned32, TimeTicks, ObjectIdentity, iso, Counter64, Gauge32, NotificationType = mibBuilder.importSymbols("SNMPv2-SMI", "ModuleIdentity", "MibIdentifier", "Integer32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Bits", "Counter32", "IpAddress", "Unsigned32", "TimeTicks", "ObjectIdentity", "iso", "Counter64", "Gauge32", "NotificationType")
TextualConvention, TimeStamp, TimeInterval, DisplayString, TruthValue, RowStatus = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "TimeStamp", "TimeInterval", "DisplayString", "TruthValue", "RowStatus")
fxs72 = ModuleIdentity((1, 3, 6, 1, 4, 1, 35265, 1, 9))
fxs72.setRevisions(('2009-10-19 00:00',))
if mibBuilder.loadTexts: fxs72.setLastUpdated('200910190000Z')
if mibBuilder.loadTexts: fxs72.setOrganization('Eltex Co')
class SSwStatusConv(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2))
    namedValues = NamedValues(("undefined", 0), ("connected", 1), ("disconnected", 2))

class VoltageMode(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3))
    namedValues = NamedValues(("high", 1), ("normal", 2), ("low", 3))

class FXSFanState(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1))
    namedValues = NamedValues(("off", 0), ("on", 1))

class BoolValue(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1))
    namedValues = NamedValues(("false", 0), ("true", 1))

class DevTypeString(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(16, 17, 33, 50))
    namedValues = NamedValues(("fxs72", 16), ("tau72", 17), ("tau36", 33), ("tau32m", 50))

class FxsPortState(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 255))
    namedValues = NamedValues(("hangdown", 0), ("hangup", 1), ("dial", 2), ("calling", 3), ("ringback", 4), ("ringing", 5), ("talking", 6), ("busy", 7), ("hold", 8), ("holdDial", 9), ("dvo", 10), ("test", 11), ("blocked", 12), ("preCalling", 13), ("conference3way", 14), ("void", 15), ("fxoHangdown", 16), ("fxoHangup", 17), ("disabled", 255))

class PortMegacoState(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 255))
    namedValues = NamedValues(("hangdown", 0), ("hangup", 1), ("dial", 2), ("calling", 3), ("ringback", 4), ("ringing", 5), ("talking", 6), ("busy", 7), ("hold", 8), ("holdDial", 9), ("holdDvo", 10), ("transfer", 11), ("unattended", 12), ("blocked", 13), ("ready", 14), ("notInited", 15), ("disabled", 16), ("absent", 17), ("noActualData", 255))

class PortMegacoJitter(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))
    namedValues = NamedValues(("ok", 0), ("leakageCurrent", 1), ("overheating", 2), ("dissipatedPower", 3))

class SipConnectState(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2))
    namedValues = NamedValues(("off", 0), ("ok", 1), ("failed", 2))

class FxsDialPlanType(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))
    namedValues = NamedValues(("h323GateKeeper", 1), ("sipProxy", 2), ("h323DirectIP", 3), ("sipDirectIP", 4), ("siptDirectIP", 5), ("pickupGroup", 6))

class FxsAON(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4))
    namedValues = NamedValues(("off", 0), ("aonRus", 1), ("dtmf", 2), ("fskBell202", 3), ("fskV23", 4))

class FxsGroupSerialType(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2))
    namedValues = NamedValues(("group", 0), ("serial", 1), ("cyclic", 2))

class FxoGroupType(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(3, 4))
    namedValues = NamedValues(("fxoFirstFree", 3), ("fxoAround", 4))

class FxsGroupBusyType(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1))
    namedValues = NamedValues(("clearOnBusy", 0), ("waitFirstFree", 1))

class FxsGroupSerialEnableType(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2))
    namedValues = NamedValues(("true", 1), ("false", 2))

class FxsTaxophoneType(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))
    namedValues = NamedValues(("off", 0), ("polarity", 1), ("kHz16", 2), ("kHz12", 3))

class FxsDialPlanNatureType(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))
    namedValues = NamedValues(("unknown", 0), ("subscriber", 1), ("national", 2), ("international", 3))

class FxsProcessFlashType(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4))
    namedValues = NamedValues(("transmitFlash", 0), ("attendedCT", 1), ("unattendedCT", 2), ("noDetectFlash", 3), ("localCT", 4))

class TauDialProtocolType(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2))
    namedValues = NamedValues(("sip", 1), ("h323", 2))

class ProxyMode(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2))
    namedValues = NamedValues(("off", 0), ("parking", 1), ("homing", 2))

class OptionsHomeServerTest(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2))
    namedValues = NamedValues(("invite", 0), ("options", 1), ("register", 2))

class AuthenticationType(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2))
    namedValues = NamedValues(("off", 0), ("global", 1), ("userDefined", 2))

class CwRingbackRingbackAtCallwaiting(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1))
    namedValues = NamedValues(("ring180Ringing", 0), ("ring182Queued", 1))

class RemoteRingback(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2))
    namedValues = NamedValues(("dontSendRingbackInRTP", 0), ("ringbackWith180Ringing", 1), ("ringbackWith183Progress", 2))

class DTMFMIMEType(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2))
    namedValues = NamedValues(("applicationDtmfRelay", 0), ("applicationDtmf", 1), ("audioTelephoneEvent", 2))

class HookFlashMIMEType(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))
    namedValues = NamedValues(("asDTMF", 0), ("applicationHookFlash", 1), ("applicationBroadsoft", 2), ("applicationSscc", 3))

class TypeTransport(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))
    namedValues = NamedValues(("udpPrefferedOrTcp", 0), ("tcpPrefferedOrUdp", 1), ("udpOnly", 2), ("tcpOnly", 3))

class Type100rel(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2))
    namedValues = NamedValues(("supported", 0), ("required", 1), ("off", 2))

class OutboundType(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2))
    namedValues = NamedValues(("off", 0), ("on", 1), ("withBusyTone", 2))

class FxoDialingType(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2))
    namedValues = NamedValues(("dtmf", 1), ("pulse", 2))

class FxsToneParametrs(TextualConvention, OctetString):
    status = 'current'
    subtypeSpec = OctetString.subtypeSpec + ValueSizeConstraint(0, 64)

class TauDtmfTransferType(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2))
    namedValues = NamedValues(("inband", 0), ("rfc2833", 1), ("info", 2))

class TauFlashTransferType(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2))
    namedValues = NamedValues(("disabled", 0), ("rfc2833", 1), ("info", 2))

class TauFaxDirectionType(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))
    namedValues = NamedValues(("both", 0), ("caller", 1), ("callee", 2), ("none", 3))

class TauFaxTransferType(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2))
    namedValues = NamedValues(("g711a", 0), ("g711u", 1), ("t38", 2))

class TauFaxTransferSlaveType(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))
    namedValues = NamedValues(("g711a", 0), ("g711u", 1), ("t38", 2), ("none", 3))

class TauModemTransferType(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6))
    namedValues = NamedValues(("g711aVbd", 0), ("g711uVbd", 1), ("g711aRfc3108", 2), ("g711uRfc3108", 3), ("off", 4), ("g711aNse", 5), ("g711uNse", 6))

class TauVoiceModeType(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1))
    namedValues = NamedValues(("fixed", 0), ("adaptive", 1))

class TauvoiceDeletionModeType(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1))
    namedValues = NamedValues(("hard", 0), ("soft", 1))

class TauTrapVersion(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2))
    namedValues = NamedValues(("v1", 1), ("v2", 2))

class TauMegacoTrapVersion(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2))
    namedValues = NamedValues(("inform", 0), ("trapV1", 1), ("trapV2", 2))

class TauUserViewType(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2))
    namedValues = NamedValues(("readOnly", 1), ("readWrite", 2))

class FxoGroupBusyType(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1))
    namedValues = NamedValues(("clearOnBusy", 0), ("waitFirstFree", 1))

class FxsNetworkAutoupdateSourceType(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4))
    namedValues = NamedValues(("dhcp", 0), ("dhcpVlan1", 1), ("dhcpVlan2", 2), ("dhcpVlan3", 3), ("noDhcp", 4))

class SipLogLevel(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(-1, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9))
    namedValues = NamedValues(("none", -1), ("fatalErrors", 0), ("criticalErrors", 1), ("nonCriticalErrors", 2), ("warnings", 3), ("verbose1", 4), ("signalProtocol", 5), ("verbose2", 6), ("mediaProtocol", 7), ("verobse3", 8), ("everything", 9))

class H323LogLevel(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6))
    namedValues = NamedValues(("none", 0), ("errors", 1), ("warnings", 2), ("info", 3), ("debugA", 4), ("debugB", 5), ("debugC", 6))

class VapiLibLogLevel(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6))
    namedValues = NamedValues(("none", 0), ("api", 1), ("apiPacket", 2), ("vapiInfo", 3), ("vapiGtlInfo", 4), ("vapiUt", 5), ("allInfo", 6))

class VapiAppLogLevel(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(5, 4, 3, 2, 1))
    namedValues = NamedValues(("none", 5), ("warnings", 4), ("packet", 3), ("debug", 2), ("info", 1))

class FxsPortTestStatus(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2, 255))
    namedValues = NamedValues(("idle", 0), ("requested", 1), ("completed", 2), ("disabled", 255))

class FxsPortTestFlag(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(-1, 0, 1, 2, 3, 4, 5, 255))
    namedValues = NamedValues(("unknown", -1), ("ok", 0), ("overheat", 1), ("leakageCurrent", 2), ("resistanceNotMeasured", 3), ("capacitanceNotMeasured", 4), ("testingUnavailable", 5), ("testFailure", 255))

class KeepAliveMode(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))
    namedValues = NamedValues(("off", 0), ("options", 1), ("notify", 2), ("clrf", 3))

class ConferenceMode(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1))
    namedValues = NamedValues(("local", 0), ("remote", 1))

class GroupRegistrationState(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2))
    namedValues = NamedValues(("off", 0), ("ok", 1), ("failed", 2))

class FirewallProtocol(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))
    namedValues = NamedValues(("any", 0), ("udp", 1), ("tcp", 2), ("icmp", 3))

class TypeOfMessageICMP(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36))
    namedValues = NamedValues(("any", 0), ("echoReply", 1), ("destinationUnreachable", 2), ("networkUnreachable", 3), ("hostUnreachable", 4), ("protocolUnreachable", 5), ("portUnreachable", 6), ("fragmentationNeeded", 7), ("sourceRouteFailed", 8), ("networkUnknown", 9), ("hostUnknown", 10), ("networkProhibited", 11), ("hostProhibited", 12), ("tosNetworkUnreachable", 13), ("tosHostUnreachable", 14), ("communicationProhibited", 15), ("hostPrecedenceViolation", 16), ("precedenceCutoff", 17), ("sourceQuench", 18), ("redirect", 19), ("networkRedirect", 20), ("hostRedirect", 21), ("tosNetworkRedirect", 22), ("tosHostRedirect", 23), ("echoRequest", 24), ("routerAdvertisement", 25), ("routerSolicitation", 26), ("timeExceeded", 27), ("ttlZeroDuringTransit", 28), ("ttlZeroDuringReassembly", 29), ("parameterProblem", 30), ("ipHeaderBad", 31), ("requiredOptionMissing", 32), ("timestampRequest", 33), ("timestampReply", 34), ("addressMaskRequest", 35), ("addressMaskReply", 36))

class FirewallTarget(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2))
    namedValues = NamedValues(("drop", 0), ("accept", 1), ("reject", 2))

class ReversalPolarityAction(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2))
    namedValues = NamedValues(("ignore", 0), ("release", 1), ("answer", 2))

class CallLimitType(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1))
    namedValues = NamedValues(("proxyGk", 0), ("host", 1))

class PowerMode(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1))
    namedValues = NamedValues(("normal", 0), ("extendedRange", 1))

class DRSubscriberProfilesType(TextualConvention, OctetString):
    status = 'current'
    subtypeSpec = OctetString.subtypeSpec + ValueSizeConstraint(1, 1)
    fixedLength = 1

class PstnActivityType(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))
    namedValues = NamedValues(("off", 0), ("releaseAtPstnReversalPolarityDetection", 1), ("answerAtPstnReversalPolarityDetection", 2), ("pstnAnswerDetection", 3))

class IMSMode(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2))
    namedValues = NamedValues(("off", 0), ("implicit", 1), ("explicit", 2))

class AutoupdateProtocolType(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))
    namedValues = NamedValues(("tftp", 0), ("ftp", 1), ("http", 2), ("https", 3))

class SipProfileChangeoverType(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1))
    namedValues = NamedValues(("changeoverOnFailureOfInviteOrRegisterRequest", 0), ("changeoverOnFailureOfRegisterRequest", 1))

class DevPowerType(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2))
    namedValues = NamedValues(("ac", 1), ("dc", 2))

fxsDevName = MibScalar((1, 3, 6, 1, 4, 1, 35265, 1, 9, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fxsDevName.setStatus('current')
fxsDevType = MibScalar((1, 3, 6, 1, 4, 1, 35265, 1, 9, 2), DevTypeString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fxsDevType.setStatus('current')
fxsDevCfgBuild = MibScalar((1, 3, 6, 1, 4, 1, 35265, 1, 9, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fxsDevCfgBuild.setStatus('current')
fxsFreeSpace = MibScalar((1, 3, 6, 1, 4, 1, 35265, 1, 9, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fxsFreeSpace.setStatus('current')
fxsFreeRam = MibScalar((1, 3, 6, 1, 4, 1, 35265, 1, 9, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fxsFreeRam.setStatus('current')
fxsSSwStatus = MibScalar((1, 3, 6, 1, 4, 1, 35265, 1, 9, 6), SSwStatusConv()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fxsSSwStatus.setStatus('current')
fxsSSwStatusTime = MibScalar((1, 3, 6, 1, 4, 1, 35265, 1, 9, 7), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fxsSSwStatusTime.setStatus('current')
fxsCpuUsage = MibScalar((1, 3, 6, 1, 4, 1, 35265, 1, 9, 8), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fxsCpuUsage.setStatus('current')
fxsMonitoring = MibIdentifier((1, 3, 6, 1, 4, 1, 35265, 1, 9, 10))
fxsMonitoringVMode = MibScalar((1, 3, 6, 1, 4, 1, 35265, 1, 9, 10, 1), VoltageMode()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fxsMonitoringVMode.setStatus('current')
fxsMonitoringVBat = MibScalar((1, 3, 6, 1, 4, 1, 35265, 1, 9, 10, 2), Integer32()).setUnits('V').setMaxAccess("readonly")
if mibBuilder.loadTexts: fxsMonitoringVBat.setStatus('current')
fxsMonitoringVRing1 = MibScalar((1, 3, 6, 1, 4, 1, 35265, 1, 9, 10, 3), Integer32()).setUnits('V').setMaxAccess("readonly")
if mibBuilder.loadTexts: fxsMonitoringVRing1.setStatus('current')
fxsMonitoringVRing2 = MibScalar((1, 3, 6, 1, 4, 1, 35265, 1, 9, 10, 4), Integer32()).setUnits('V').setMaxAccess("readonly")
if mibBuilder.loadTexts: fxsMonitoringVRing2.setStatus('current')
fxsMonitoringTemp1 = MibScalar((1, 3, 6, 1, 4, 1, 35265, 1, 9, 10, 5), Integer32()).setUnits('Ã\x82Â°C').setMaxAccess("readonly")
if mibBuilder.loadTexts: fxsMonitoringTemp1.setStatus('current')
fxsMonitoringTemp2 = MibScalar((1, 3, 6, 1, 4, 1, 35265, 1, 9, 10, 6), Integer32()).setUnits('Ã\x82Â°C').setMaxAccess("readonly")
if mibBuilder.loadTexts: fxsMonitoringTemp2.setStatus('current')
fxsMonitoringTemp3 = MibScalar((1, 3, 6, 1, 4, 1, 35265, 1, 9, 10, 7), Integer32()).setUnits('Ã\x82Â°C').setMaxAccess("readonly")
if mibBuilder.loadTexts: fxsMonitoringTemp3.setStatus('current')
fxsMonitoringTemp4 = MibScalar((1, 3, 6, 1, 4, 1, 35265, 1, 9, 10, 8), Integer32()).setUnits('Ã\x82Â°C').setMaxAccess("readonly")
if mibBuilder.loadTexts: fxsMonitoringTemp4.setStatus('current')
fxsMonitoringFanState = MibScalar((1, 3, 6, 1, 4, 1, 35265, 1, 9, 10, 9), FXSFanState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fxsMonitoringFanState.setStatus('current')
fxsMonitoringFan1Rotate = MibScalar((1, 3, 6, 1, 4, 1, 35265, 1, 9, 10, 10), BoolValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fxsMonitoringFan1Rotate.setStatus('current')
fxsMonitoringFan2Rotate = MibScalar((1, 3, 6, 1, 4, 1, 35265, 1, 9, 10, 11), BoolValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fxsMonitoringFan2Rotate.setStatus('current')
fxsMonitoringSubCooling = MibScalar((1, 3, 6, 1, 4, 1, 35265, 1, 9, 10, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fxsMonitoringSubCooling.setStatus('current')
fxsMonitoringVinput = MibScalar((1, 3, 6, 1, 4, 1, 35265, 1, 9, 10, 13), Integer32()).setUnits('V').setMaxAccess("readonly")
if mibBuilder.loadTexts: fxsMonitoringVinput.setStatus('current')
fxsMonitoringDevicePower = MibScalar((1, 3, 6, 1, 4, 1, 35265, 1, 9, 10, 14), DevPowerType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fxsMonitoringDevicePower.setStatus('current')
fxsPortsMIBBoundary = MibScalar((1, 3, 6, 1, 4, 1, 35265, 1, 9, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fxsPortsMIBBoundary.setStatus('current')
fxsPorts = MibIdentifier((1, 3, 6, 1, 4, 1, 35265, 1, 9, 12))
fxsPortsMonitoringTable = MibTable((1, 3, 6, 1, 4, 1, 35265, 1, 9, 12, 1), )
if mibBuilder.loadTexts: fxsPortsMonitoringTable.setStatus('current')
fxsPortsMonitoringEntry = MibTableRow((1, 3, 6, 1, 4, 1, 35265, 1, 9, 12, 1, 1), ).setIndexNames((0, "ELTEX-FXS72", "fxsPortNumber"))
if mibBuilder.loadTexts: fxsPortsMonitoringEntry.setStatus('current')
fxsPortNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 9, 12, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 72)))
if mibBuilder.loadTexts: fxsPortNumber.setStatus('current')
fxsPortPhoneNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 9, 12, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fxsPortPhoneNumber.setStatus('current')
fxsPortState = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 9, 12, 1, 1, 3), FxsPortState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fxsPortState.setStatus('current')
fxsPortUserName = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 9, 12, 1, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fxsPortUserName.setStatus('current')
fxsPortTalkingNum = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 9, 12, 1, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fxsPortTalkingNum.setStatus('current')
fxsPortTalkingStartTime = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 9, 12, 1, 1, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fxsPortTalkingStartTime.setStatus('current')
fxsPortSipConnected = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 9, 12, 1, 1, 7), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fxsPortSipConnected.setStatus('current')
fxsPortH323Connected = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 9, 12, 1, 1, 8), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fxsPortH323Connected.setStatus('current')
fxsPortSipConnecteNext = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 9, 12, 1, 1, 9), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fxsPortSipConnecteNext.setStatus('current')
fxsPortSipConnecteState = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 9, 12, 1, 1, 10), SipConnectState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fxsPortSipConnecteState.setStatus('current')
fxsPortSipConnectHost = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 9, 12, 1, 1, 11), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fxsPortSipConnectHost.setStatus('current')
fxsPortsConfigTable = MibTable((1, 3, 6, 1, 4, 1, 35265, 1, 9, 12, 2), )
if mibBuilder.loadTexts: fxsPortsConfigTable.setStatus('current')
fxsPortsConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 35265, 1, 9, 12, 2, 1), ).setIndexNames((0, "ELTEX-FXS72", "fxsPortNumber"))
if mibBuilder.loadTexts: fxsPortsConfigEntry.setStatus('current')
fxsPortConfigPhone = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 9, 12, 2, 1, 1), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fxsPortConfigPhone.setStatus('current')
fxsPortConfigUserName = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 9, 12, 2, 1, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fxsPortConfigUserName.setStatus('current')
fxsPortConfigAuthName = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 9, 12, 2, 1, 3), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fxsPortConfigAuthName.setStatus('current')
fxsPortConfigAuthPass = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 9, 12, 2, 1, 4), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fxsPortConfigAuthPass.setStatus('current')
fxsPortConfigCustom = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 9, 12, 2, 1, 5), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fxsPortConfigCustom.setStatus('current')
fxsPortConfigPlaymoh = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 9, 12, 2, 1, 6), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fxsPortConfigPlaymoh.setStatus('current')
fxsPortConfigAON = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 9, 12, 2, 1, 7), FxsAON()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fxsPortConfigAON.setStatus('current')
fxsPortConfigAONHideDate = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 9, 12, 2, 1, 8), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fxsPortConfigAONHideDate.setStatus('current')
fxsPortConfigAONHideName = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 9, 12, 2, 1, 9), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fxsPortConfigAONHideName.setStatus('current')
fxsPortConfigTaxophone = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 9, 12, 2, 1, 10), FxsTaxophoneType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fxsPortConfigTaxophone.setStatus('current')
fxsPortConfigMinFlashtime = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 9, 12, 2, 1, 11), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fxsPortConfigMinFlashtime.setStatus('current')
fxsPortConfigMaxFlashtime = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 9, 12, 2, 1, 12), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fxsPortConfigMaxFlashtime.setStatus('current')
fxsPortConfigGainr = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 9, 12, 2, 1, 13), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fxsPortConfigGainr.setStatus('current')
fxsPortConfigGaint = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 9, 12, 2, 1, 14), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fxsPortConfigGaint.setStatus('current')
fxsPortConfigCategory = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 9, 12, 2, 1, 15), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fxsPortConfigCategory.setStatus('current')
fxsPortConfigCallTransfer = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 9, 12, 2, 1, 16), FxsProcessFlashType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fxsPortConfigCallTransfer.setStatus('current')
fxsPortConfigCallWaiting = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 9, 12, 2, 1, 17), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fxsPortConfigCallWaiting.setStatus('current')
fxsPortConfigHotLine = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 9, 12, 2, 1, 18), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fxsPortConfigHotLine.setStatus('current')
fxsPortConfigHotNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 9, 12, 2, 1, 19), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fxsPortConfigHotNumber.setStatus('current')
fxsPortConfigHotTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 9, 12, 2, 1, 20), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fxsPortConfigHotTimeout.setStatus('current')
fxsPortConfigDisabled = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 9, 12, 2, 1, 21), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fxsPortConfigDisabled.setStatus('current')
fxsPortConfigCtBusy = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 9, 12, 2, 1, 22), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fxsPortConfigCtBusy.setStatus('current')
fxsPortConfigCtUnconditional = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 9, 12, 2, 1, 23), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fxsPortConfigCtUnconditional.setStatus('current')
fxsPortConfigCtNoanswer = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 9, 12, 2, 1, 24), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fxsPortConfigCtNoanswer.setStatus('current')
fxsPortConfigCtNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 9, 12, 2, 1, 25), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fxsPortConfigCtNumber.setStatus('obsolete')
fxsPortConfigCtTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 9, 12, 2, 1, 26), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fxsPortConfigCtTimeout.setStatus('current')
fxsPortConfigClir = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 9, 12, 2, 1, 27), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fxsPortConfigClir.setStatus('current')
fxsPortConfigStopDial = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 9, 12, 2, 1, 28), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fxsPortConfigStopDial.setStatus('current')
fxsPortConfigAltNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 9, 12, 2, 1, 29), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fxsPortConfigAltNumber.setStatus('current')
fxsPortConfigUseAltNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 9, 12, 2, 1, 30), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fxsPortConfigUseAltNumber.setStatus('current')
fxsPortConfigPickUp = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 9, 12, 2, 1, 31), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fxsPortConfigPickUp.setStatus('current')
fxsPortConfigSipPort = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 9, 12, 2, 1, 32), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fxsPortConfigSipPort.setStatus('current')
fxsPortConfigCfgPriOverCw = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 9, 12, 2, 1, 33), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fxsPortConfigCfgPriOverCw.setStatus('current')
fxsPortConfigRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 9, 12, 2, 1, 34), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: fxsPortConfigRowStatus.setStatus('current')
fxsPortConfigDvoCwEn = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 9, 12, 2, 1, 35), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fxsPortConfigDvoCwEn.setStatus('current')
fxsPortConfigDvoCtAttendedEn = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 9, 12, 2, 1, 36), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fxsPortConfigDvoCtAttendedEn.setStatus('current')
fxsPortConfigDvoCtUnattendedEn = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 9, 12, 2, 1, 37), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fxsPortConfigDvoCtUnattendedEn.setStatus('current')
fxsPortConfigDvoUnconditionalEn = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 9, 12, 2, 1, 38), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fxsPortConfigDvoUnconditionalEn.setStatus('current')
fxsPortConfigDvoCfBusyEn = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 9, 12, 2, 1, 39), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fxsPortConfigDvoCfBusyEn.setStatus('current')
fxsPortConfigDvoCfAnswerEn = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 9, 12, 2, 1, 40), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fxsPortConfigDvoCfAnswerEn.setStatus('current')
fxsPortConfigDvoCfServiceEn = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 9, 12, 2, 1, 41), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fxsPortConfigDvoCfServiceEn.setStatus('current')
fxsPortConfigDvoDoDisturbEn = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 9, 12, 2, 1, 42), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fxsPortConfigDvoDoDisturbEn.setStatus('current')
fxsPortConfigCtOutofservice = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 9, 12, 2, 1, 43), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fxsPortConfigCtOutofservice.setStatus('current')
fxsPortConfigCfuNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 9, 12, 2, 1, 44), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fxsPortConfigCfuNumber.setStatus('current')
fxsPortConfigCfbNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 9, 12, 2, 1, 45), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fxsPortConfigCfbNumber.setStatus('current')
fxsPortConfigCfnrNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 9, 12, 2, 1, 46), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fxsPortConfigCfnrNumber.setStatus('current')
fxsPortConfigCfoosNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 9, 12, 2, 1, 47), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fxsPortConfigCfoosNumber.setStatus('current')
fxsPortConfigDnd = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 9, 12, 2, 1, 48), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fxsPortConfigDnd.setStatus('current')
fxsPortConfigFxoFlashTime = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 9, 12, 2, 1, 49), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fxsPortConfigFxoFlashTime.setStatus('current')
fxsPortConfigFxoDelTdm = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 9, 12, 2, 1, 50), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fxsPortConfigFxoDelTdm.setStatus('current')
fxsPortConfigFxoRingtdm = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 9, 12, 2, 1, 51), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fxsPortConfigFxoRingtdm.setStatus('current')
fxsPortConfigPstnNumberprefix = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 9, 12, 2, 1, 52), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fxsPortConfigPstnNumberprefix.setStatus('current')
fxsPortConfigPstnNameprefix = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 9, 12, 2, 1, 53), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fxsPortConfigPstnNameprefix.setStatus('current')
fxsPortConfigUsePstnCid = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 9, 12, 2, 1, 54), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fxsPortConfigUsePstnCid.setStatus('current')
fxsPortConfigtdmhotline = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 9, 12, 2, 1, 55), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fxsPortConfigtdmhotline.setStatus('current')
fxsPortConfigtdmhottimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 9, 12, 2, 1, 56), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fxsPortConfigtdmhottimeout.setStatus('current')
fxsPortConfigtdmhotnumber = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 9, 12, 2, 1, 57), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fxsPortConfigtdmhotnumber.setStatus('current')
fxsPortConfigEnableCpc = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 9, 12, 2, 1, 58), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fxsPortConfigEnableCpc.setStatus('current')
fxsPortConfigCpcTime = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 9, 12, 2, 1, 59), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fxsPortConfigCpcTime.setStatus('current')
fxsPortConfigDontDetectDT = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 9, 12, 2, 1, 60), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fxsPortConfigDontDetectDT.setStatus('current')
fxsPortConfigDelayDialingTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 9, 12, 2, 1, 61), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fxsPortConfigDelayDialingTimeout.setStatus('current')
fxsPortType = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 9, 12, 2, 1, 62), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fxsPortType.setStatus('current')
fxsPortConfigDialing = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 9, 12, 2, 1, 63), FxoDialingType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fxsPortConfigDialing.setStatus('current')
fxsPortConfigTransmitNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 9, 12, 2, 1, 64), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fxsPortConfigTransmitNumber.setStatus('current')
fxsPortConfigDontTransmitPrefix = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 9, 12, 2, 1, 65), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fxsPortConfigDontTransmitPrefix.setStatus('current')
fxsPortConfigPortProfileID = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 9, 12, 2, 1, 66), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fxsPortConfigPortProfileID.setStatus('current')
fxsPortConfigSipProfileID = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 9, 12, 2, 1, 67), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fxsPortConfigSipProfileID.setStatus('current')
fxsPortConfigDialToneDetectionParameters = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 9, 12, 2, 1, 68), FxsToneParametrs()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fxsPortConfigDialToneDetectionParameters.setStatus('current')
fxsPortConfigRingBackToneDetectionParameters = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 9, 12, 2, 1, 69), FxsToneParametrs()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fxsPortConfigRingBackToneDetectionParameters.setStatus('current')
fxsPortConfigBusyToneDetectionParameters = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 9, 12, 2, 1, 70), FxsToneParametrs()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fxsPortConfigBusyToneDetectionParameters.setStatus('current')
fxsPortConfigDtDetectTime = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 9, 12, 2, 1, 71), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fxsPortConfigDtDetectTime.setStatus('current')
fxsPortConfigDecadePulseTime = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 9, 12, 2, 1, 72), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fxsPortConfigDecadePulseTime.setStatus('current')
fxsPortConfigDecadePauseTime = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 9, 12, 2, 1, 73), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fxsPortConfigDecadePauseTime.setStatus('current')
fxsPortConfigNoOffhookAtRinging = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 9, 12, 2, 1, 74), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fxsPortConfigNoOffhookAtRinging.setStatus('current')
fxsPortConfigFxoCallBusy = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 9, 12, 2, 1, 75), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fxsPortConfigFxoCallBusy.setStatus('current')
fxsPortConfigCpcRus = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 9, 12, 2, 1, 76), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 10))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fxsPortConfigCpcRus.setStatus('current')
fxsPortConfigReversalPolarityAction = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 9, 12, 2, 1, 77), ReversalPolarityAction()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fxsPortConfigReversalPolarityAction.setStatus('obsolete')
fxsPortConfigPstnActivity = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 9, 12, 2, 1, 78), PstnActivityType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fxsPortConfigPstnActivity.setStatus('current')
fxsPortConfigPstnRbDetectTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 9, 12, 2, 1, 79), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 60))).setUnits('sec').setMaxAccess("readwrite")
if mibBuilder.loadTexts: fxsPortConfigPstnRbDetectTimeout.setStatus('current')
fxsPortConfigDetectFxoLinePresence = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 9, 12, 2, 1, 80), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fxsPortConfigDetectFxoLinePresence.setStatus('current')
fxsPortConfigBlockFxoLineInOutgoingDirection = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 9, 12, 2, 1, 81), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fxsPortConfigBlockFxoLineInOutgoingDirection.setStatus('current')
fxsPortConfigFxoMinLevelDetect = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 9, 12, 2, 1, 82), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fxsPortConfigFxoMinLevelDetect.setStatus('current')
fxsPortConfigUseAltNumberAsContact = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 9, 12, 2, 1, 83), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fxsPortConfigUseAltNumberAsContact.setStatus('current')
fxsPortConfigModifier = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 9, 12, 2, 1, 84), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fxsPortConfigModifier.setStatus('current')
fxsPortConfigMwiDialtone = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 9, 12, 2, 1, 85), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fxsPortConfigMwiDialtone.setStatus('current')
fxsPortsConfigCommon = MibIdentifier((1, 3, 6, 1, 4, 1, 35265, 1, 9, 12, 3))
fxsPortConfigCommonPlaymoh = MibScalar((1, 3, 6, 1, 4, 1, 35265, 1, 9, 12, 3, 1), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fxsPortConfigCommonPlaymoh.setStatus('obsolete')
fxsPortConfigCommonAON = MibScalar((1, 3, 6, 1, 4, 1, 35265, 1, 9, 12, 3, 2), FxsAON()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fxsPortConfigCommonAON.setStatus('obsolete')
fxsPortConfigCommonAONHideDate = MibScalar((1, 3, 6, 1, 4, 1, 35265, 1, 9, 12, 3, 3), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fxsPortConfigCommonAONHideDate.setStatus('obsolete')
fxsPortConfigCommonAONHideName = MibScalar((1, 3, 6, 1, 4, 1, 35265, 1, 9, 12, 3, 4), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fxsPortConfigCommonAONHideName.setStatus('obsolete')
fxsPortConfigCommonTaxophone = MibScalar((1, 3, 6, 1, 4, 1, 35265, 1, 9, 12, 3, 5), FxsTaxophoneType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fxsPortConfigCommonTaxophone.setStatus('obsolete')
fxsPortConfigCommonMinFlashtime = MibScalar((1, 3, 6, 1, 4, 1, 35265, 1, 9, 12, 3, 6), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fxsPortConfigCommonMinFlashtime.setStatus('obsolete')
fxsPortConfigCommonMaxFlashtime = MibScalar((1, 3, 6, 1, 4, 1, 35265, 1, 9, 12, 3, 7), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fxsPortConfigCommonMaxFlashtime.setStatus('obsolete')
fxsPortConfigCommonGainr = MibScalar((1, 3, 6, 1, 4, 1, 35265, 1, 9, 12, 3, 8), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fxsPortConfigCommonGainr.setStatus('obsolete')
fxsPortConfigCommonGaint = MibScalar((1, 3, 6, 1, 4, 1, 35265, 1, 9, 12, 3, 9), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fxsPortConfigCommonGaint.setStatus('obsolete')
fxsPortConfigCommonCategory = MibScalar((1, 3, 6, 1, 4, 1, 35265, 1, 9, 12, 3, 10), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fxsPortConfigCommonCategory.setStatus('obsolete')
fxsPortConfigCommonCallTransfer = MibScalar((1, 3, 6, 1, 4, 1, 35265, 1, 9, 12, 3, 11), FxsProcessFlashType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fxsPortConfigCommonCallTransfer.setStatus('obsolete')
fxsPortConfigCommonCallWaiting = MibScalar((1, 3, 6, 1, 4, 1, 35265, 1, 9, 12, 3, 12), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fxsPortConfigCommonCallWaiting.setStatus('obsolete')
fxsPortConfigCommonCfgPriOverCw = MibScalar((1, 3, 6, 1, 4, 1, 35265, 1, 9, 12, 3, 13), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fxsPortConfigCommonCfgPriOverCw.setStatus('obsolete')
fxsPortConfigCommonFxoFlashTime = MibScalar((1, 3, 6, 1, 4, 1, 35265, 1, 9, 12, 3, 14), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fxsPortConfigCommonFxoFlashTime.setStatus('obsolete')
fxsPortConfigCommonFxoDelTdm = MibScalar((1, 3, 6, 1, 4, 1, 35265, 1, 9, 12, 3, 15), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fxsPortConfigCommonFxoDelTdm.setStatus('obsolete')
fxsPortConfigCommonFxoRingtdm = MibScalar((1, 3, 6, 1, 4, 1, 35265, 1, 9, 12, 3, 16), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fxsPortConfigCommonFxoRingtdm.setStatus('obsolete')
fxsPortConfigCommonPstnNumberprefix = MibScalar((1, 3, 6, 1, 4, 1, 35265, 1, 9, 12, 3, 17), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fxsPortConfigCommonPstnNumberprefix.setStatus('obsolete')
fxsPortConfigCommonPstnNameprefix = MibScalar((1, 3, 6, 1, 4, 1, 35265, 1, 9, 12, 3, 18), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fxsPortConfigCommonPstnNameprefix.setStatus('obsolete')
fxsPortConfigCommonUsePstnCid = MibScalar((1, 3, 6, 1, 4, 1, 35265, 1, 9, 12, 3, 19), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fxsPortConfigCommonUsePstnCid.setStatus('obsolete')
fxsPortConfigCommonEnableCpc = MibScalar((1, 3, 6, 1, 4, 1, 35265, 1, 9, 12, 3, 20), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fxsPortConfigCommonEnableCpc.setStatus('obsolete')
fxsPortConfigCommonCpcTime = MibScalar((1, 3, 6, 1, 4, 1, 35265, 1, 9, 12, 3, 21), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fxsPortConfigCommonCpcTime.setStatus('obsolete')
fxsPortConfigCommonDontDetectDT = MibScalar((1, 3, 6, 1, 4, 1, 35265, 1, 9, 12, 3, 22), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fxsPortConfigCommonDontDetectDT.setStatus('obsolete')
fxsPortConfigCommonDelayDialingTimeout = MibScalar((1, 3, 6, 1, 4, 1, 35265, 1, 9, 12, 3, 23), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fxsPortConfigCommonDelayDialingTimeout.setStatus('obsolete')
fxsPortConfigCommonDialing = MibScalar((1, 3, 6, 1, 4, 1, 35265, 1, 9, 12, 3, 24), FxoDialingType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fxsPortConfigCommonDialing.setStatus('obsolete')
fxsPortConfigCommonTransmitNumber = MibScalar((1, 3, 6, 1, 4, 1, 35265, 1, 9, 12, 3, 25), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fxsPortConfigCommonTransmitNumber.setStatus('obsolete')
fxsPortConfigCommonDontTransmitPrefix = MibScalar((1, 3, 6, 1, 4, 1, 35265, 1, 9, 12, 3, 26), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fxsPortConfigCommonDontTransmitPrefix.setStatus('obsolete')
megacoPortsMonitoringTable = MibTable((1, 3, 6, 1, 4, 1, 35265, 1, 9, 12, 4), )
if mibBuilder.loadTexts: megacoPortsMonitoringTable.setStatus('current')
megacoPortsMonitoringEntry = MibTableRow((1, 3, 6, 1, 4, 1, 35265, 1, 9, 12, 4, 1), ).setIndexNames((0, "ELTEX-FXS72", "megacoPortNumber"))
if mibBuilder.loadTexts: megacoPortsMonitoringEntry.setStatus('current')
megacoPortNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 9, 12, 4, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 72)))
if mibBuilder.loadTexts: megacoPortNumber.setStatus('current')
megacoPortTerminationID = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 9, 12, 4, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: megacoPortTerminationID.setStatus('current')
megacoPortComments = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 9, 12, 4, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: megacoPortComments.setStatus('current')
megacoPortState = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 9, 12, 4, 1, 4), PortMegacoState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: megacoPortState.setStatus('current')
megacoPortStateStartTime = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 9, 12, 4, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: megacoPortStateStartTime.setStatus('current')
megacoPortStateDuration = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 9, 12, 4, 1, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: megacoPortStateDuration.setStatus('current')
megacoPortJitter = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 9, 12, 4, 1, 7), PortMegacoJitter()).setMaxAccess("readonly")
if mibBuilder.loadTexts: megacoPortJitter.setStatus('current')
megacoPortTelNo = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 9, 12, 4, 1, 8), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: megacoPortTelNo.setStatus('current')
fxsDialMIBBoundary = MibScalar((1, 3, 6, 1, 4, 1, 35265, 1, 9, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fxsDialMIBBoundary.setStatus('current')
fxsDial = MibIdentifier((1, 3, 6, 1, 4, 1, 35265, 1, 9, 14))
fxsDialPlanTable = MibTable((1, 3, 6, 1, 4, 1, 35265, 1, 9, 14, 1), )
if mibBuilder.loadTexts: fxsDialPlanTable.setStatus('obsolete')
fxsDialPlanEntry = MibTableRow((1, 3, 6, 1, 4, 1, 35265, 1, 9, 14, 1, 1), ).setIndexNames((0, "ELTEX-FXS72", "fxsDialPlanNumber"))
if mibBuilder.loadTexts: fxsDialPlanEntry.setStatus('obsolete')
fxsDialPlanHost = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 9, 14, 1, 1, 1), DisplayString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: fxsDialPlanHost.setStatus('obsolete')
fxsDialPlanDigits = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 9, 14, 1, 1, 2), DisplayString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: fxsDialPlanDigits.setStatus('obsolete')
fxsDialPlanTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 9, 14, 1, 1, 3), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: fxsDialPlanTimeout.setStatus('obsolete')
fxsDialPlanMinDigits = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 9, 14, 1, 1, 4), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: fxsDialPlanMinDigits.setStatus('obsolete')
fxsDialPlanType = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 9, 14, 1, 1, 5), FxsDialPlanType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: fxsDialPlanType.setStatus('obsolete')
fxsDialPlanAccessMask = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 9, 14, 1, 1, 6), DisplayString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: fxsDialPlanAccessMask.setStatus('obsolete')
fxsDialPlanDialtone = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 9, 14, 1, 1, 7), TruthValue()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: fxsDialPlanDialtone.setStatus('obsolete')
fxsDialPlanModifier = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 9, 14, 1, 1, 8), DisplayString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: fxsDialPlanModifier.setStatus('obsolete')
fxsDialPlanNature = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 9, 14, 1, 1, 9), FxsDialPlanNatureType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: fxsDialPlanNature.setStatus('obsolete')
fxsDialPlanDelnum = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 9, 14, 1, 1, 10), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: fxsDialPlanDelnum.setStatus('obsolete')
fxsDialPlanPtime = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 9, 14, 1, 1, 11), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: fxsDialPlanPtime.setStatus('obsolete')
fxsDialRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 9, 14, 1, 1, 12), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: fxsDialRowStatus.setStatus('obsolete')
fxsDialPlanNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 9, 14, 1, 1, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 300)))
if mibBuilder.loadTexts: fxsDialPlanNumber.setStatus('obsolete')
fxsDialPlanNext = MibScalar((1, 3, 6, 1, 4, 1, 35265, 1, 9, 14, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fxsDialPlanNext.setStatus('obsolete')
tauDialPlansRegExp = MibIdentifier((1, 3, 6, 1, 4, 1, 35265, 1, 9, 14, 3))
tauDialRegularOn = MibScalar((1, 3, 6, 1, 4, 1, 35265, 1, 9, 14, 3, 1), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tauDialRegularOn.setStatus('obsolete')
tauDialRegularProtocol = MibScalar((1, 3, 6, 1, 4, 1, 35265, 1, 9, 14, 3, 2), TauDialProtocolType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tauDialRegularProtocol.setStatus('obsolete')
tauDialRegularText = MibScalar((1, 3, 6, 1, 4, 1, 35265, 1, 9, 14, 3, 3), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tauDialRegularText.setStatus('obsolete')
fxsConfigSave = MibScalar((1, 3, 6, 1, 4, 1, 35265, 1, 9, 15), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fxsConfigSave.setStatus('current')
fxsConfigApply = MibScalar((1, 3, 6, 1, 4, 1, 35265, 1, 9, 16), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fxsConfigApply.setStatus('obsolete')
fxsSerialGroupsMIBBoundary = MibScalar((1, 3, 6, 1, 4, 1, 35265, 1, 9, 17), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fxsSerialGroupsMIBBoundary.setStatus('current')
fxsSerialGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 35265, 1, 9, 18))
fxsSerialGroupsTable = MibTable((1, 3, 6, 1, 4, 1, 35265, 1, 9, 18, 1), )
if mibBuilder.loadTexts: fxsSerialGroupsTable.setStatus('current')
fxsSerialGroupsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 35265, 1, 9, 18, 1, 1), ).setIndexNames((0, "ELTEX-FXS72", "fxsDialPlanNumber"))
if mibBuilder.loadTexts: fxsSerialGroupsEntry.setStatus('current')
fxsSerialGroupsPhone = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 9, 18, 1, 1, 1), DisplayString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: fxsSerialGroupsPhone.setStatus('current')
fxsSerialGroupsEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 9, 18, 1, 1, 2), FxsGroupSerialEnableType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: fxsSerialGroupsEnabled.setStatus('current')
fxsSerialGroupsSerialType = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 9, 18, 1, 1, 3), FxsGroupSerialType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: fxsSerialGroupsSerialType.setStatus('current')
fxsSerialGroupsBusyType = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 9, 18, 1, 1, 4), FxsGroupBusyType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: fxsSerialGroupsBusyType.setStatus('current')
fxsSerialGroupsTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 9, 18, 1, 1, 5), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: fxsSerialGroupsTimeout.setStatus('current')
fxsSerialGroupsSipPort = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 9, 18, 1, 1, 6), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: fxsSerialGroupsSipPort.setStatus('current')
fxsSerialGroupsAuthName = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 9, 18, 1, 1, 7), DisplayString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: fxsSerialGroupsAuthName.setStatus('current')
fxsSerialGroupsAuthPass = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 9, 18, 1, 1, 8), DisplayString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: fxsSerialGroupsAuthPass.setStatus('current')
fxsSerialGroupsPorts = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 9, 18, 1, 1, 9), DisplayString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: fxsSerialGroupsPorts.setStatus('current')
fxsSerialGroupsSipProfile = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 9, 18, 1, 1, 10), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: fxsSerialGroupsSipProfile.setStatus('current')
fxsSerialGroupsRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 9, 18, 1, 1, 11), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: fxsSerialGroupsRowStatus.setStatus('current')
fxsSerialGroupsNextEmpty = MibScalar((1, 3, 6, 1, 4, 1, 35265, 1, 9, 18, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fxsSerialGroupsNextEmpty.setStatus('current')
fxsReboot = MibScalar((1, 3, 6, 1, 4, 1, 35265, 1, 9, 19), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fxsReboot.setStatus('current')
tauVoipDvo = MibIdentifier((1, 3, 6, 1, 4, 1, 35265, 1, 9, 20))
tauVoipDvoCallwaiting = MibScalar((1, 3, 6, 1, 4, 1, 35265, 1, 9, 20, 1), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tauVoipDvoCallwaiting.setStatus('current')
tauVoipDvoCtAttended = MibScalar((1, 3, 6, 1, 4, 1, 35265, 1, 9, 20, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tauVoipDvoCtAttended.setStatus('current')
tauVoipDvoCtUnattended = MibScalar((1, 3, 6, 1, 4, 1, 35265, 1, 9, 20, 3), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tauVoipDvoCtUnattended.setStatus('current')
tauVoipDvoCfUnconditional = MibScalar((1, 3, 6, 1, 4, 1, 35265, 1, 9, 20, 4), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tauVoipDvoCfUnconditional.setStatus('current')
tauVoipDvoCfBusy = MibScalar((1, 3, 6, 1, 4, 1, 35265, 1, 9, 20, 5), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tauVoipDvoCfBusy.setStatus('current')
tauVoipDvoCfNoanswer = MibScalar((1, 3, 6, 1, 4, 1, 35265, 1, 9, 20, 6), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tauVoipDvoCfNoanswer.setStatus('current')
tauVoipDvoCfService = MibScalar((1, 3, 6, 1, 4, 1, 35265, 1, 9, 20, 7), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tauVoipDvoCfService.setStatus('current')
tauVoipDvoDoDisturb = MibScalar((1, 3, 6, 1, 4, 1, 35265, 1, 9, 20, 8), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tauVoipDvoDoDisturb.setStatus('current')
tauSipConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 35265, 1, 9, 21))
sipEnablesip = MibScalar((1, 3, 6, 1, 4, 1, 35265, 1, 9, 21, 1), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sipEnablesip.setStatus('obsolete')
sipObtimeout = MibScalar((1, 3, 6, 1, 4, 1, 35265, 1, 9, 21, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sipObtimeout.setStatus('obsolete')
sipMode = MibScalar((1, 3, 6, 1, 4, 1, 35265, 1, 9, 21, 3), ProxyMode()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sipMode.setStatus('obsolete')
sipOptions = MibScalar((1, 3, 6, 1, 4, 1, 35265, 1, 9, 21, 4), OptionsHomeServerTest()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sipOptions.setStatus('obsolete')
sipKeepalivet = MibScalar((1, 3, 6, 1, 4, 1, 35265, 1, 9, 21, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sipKeepalivet.setStatus('obsolete')
sipDomainToReg = MibScalar((1, 3, 6, 1, 4, 1, 35265, 1, 9, 21, 6), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sipDomainToReg.setStatus('obsolete')
sipDomain = MibScalar((1, 3, 6, 1, 4, 1, 35265, 1, 9, 21, 7), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sipDomain.setStatus('obsolete')
sipRegisterRetryInterval = MibScalar((1, 3, 6, 1, 4, 1, 35265, 1, 9, 21, 8), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sipRegisterRetryInterval.setStatus('obsolete')
sipOutbound = MibScalar((1, 3, 6, 1, 4, 1, 35265, 1, 9, 21, 9), OutboundType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sipOutbound.setStatus('obsolete')
sipInboundProxy = MibScalar((1, 3, 6, 1, 4, 1, 35265, 1, 9, 21, 10), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sipInboundProxy.setStatus('obsolete')
sipExpires = MibScalar((1, 3, 6, 1, 4, 1, 35265, 1, 9, 21, 11), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sipExpires.setStatus('obsolete')
sipAuthentication = MibScalar((1, 3, 6, 1, 4, 1, 35265, 1, 9, 21, 12), AuthenticationType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sipAuthentication.setStatus('obsolete')
sipUsername = MibScalar((1, 3, 6, 1, 4, 1, 35265, 1, 9, 21, 13), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sipUsername.setStatus('obsolete')
sipPassword = MibScalar((1, 3, 6, 1, 4, 1, 35265, 1, 9, 21, 14), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sipPassword.setStatus('obsolete')
sipProxy0 = MibScalar((1, 3, 6, 1, 4, 1, 35265, 1, 9, 21, 15), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sipProxy0.setStatus('obsolete')
sipRegrar0 = MibScalar((1, 3, 6, 1, 4, 1, 35265, 1, 9, 21, 16), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sipRegrar0.setStatus('obsolete')
sipRegistration0 = MibScalar((1, 3, 6, 1, 4, 1, 35265, 1, 9, 21, 17), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sipRegistration0.setStatus('obsolete')
sipProxy1 = MibScalar((1, 3, 6, 1, 4, 1, 35265, 1, 9, 21, 18), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sipProxy1.setStatus('obsolete')
sipRegrar1 = MibScalar((1, 3, 6, 1, 4, 1, 35265, 1, 9, 21, 19), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sipRegrar1.setStatus('obsolete')
sipProxy2 = MibScalar((1, 3, 6, 1, 4, 1, 35265, 1, 9, 21, 20), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sipProxy2.setStatus('obsolete')
sipRegrar2 = MibScalar((1, 3, 6, 1, 4, 1, 35265, 1, 9, 21, 21), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sipRegrar2.setStatus('obsolete')
sipProxy3 = MibScalar((1, 3, 6, 1, 4, 1, 35265, 1, 9, 21, 22), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sipProxy3.setStatus('obsolete')
sipRegrar3 = MibScalar((1, 3, 6, 1, 4, 1, 35265, 1, 9, 21, 23), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sipRegrar3.setStatus('obsolete')
sipProxy4 = MibScalar((1, 3, 6, 1, 4, 1, 35265, 1, 9, 21, 24), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sipProxy4.setStatus('obsolete')
sipRegrar4 = MibScalar((1, 3, 6, 1, 4, 1, 35265, 1, 9, 21, 25), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sipRegrar4.setStatus('obsolete')
sipDtmfmime = MibScalar((1, 3, 6, 1, 4, 1, 35265, 1, 9, 21, 26), DTMFMIMEType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sipDtmfmime.setStatus('obsolete')
sipHfmime = MibScalar((1, 3, 6, 1, 4, 1, 35265, 1, 9, 21, 27), HookFlashMIMEType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sipHfmime.setStatus('obsolete')
sipCtWithReplaces = MibScalar((1, 3, 6, 1, 4, 1, 35265, 1, 9, 21, 28), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sipCtWithReplaces.setStatus('obsolete')
sipShortmode = MibScalar((1, 3, 6, 1, 4, 1, 35265, 1, 9, 21, 29), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sipShortmode.setStatus('obsolete')
sipTransport = MibScalar((1, 3, 6, 1, 4, 1, 35265, 1, 9, 21, 30), TypeTransport()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sipTransport.setStatus('obsolete')
sipSipMtu = MibScalar((1, 3, 6, 1, 4, 1, 35265, 1, 9, 21, 31), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sipSipMtu.setStatus('obsolete')
sip100Rel = MibScalar((1, 3, 6, 1, 4, 1, 35265, 1, 9, 21, 32), Type100rel()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sip100Rel.setStatus('obsolete')
sipUserPhone = MibScalar((1, 3, 6, 1, 4, 1, 35265, 1, 9, 21, 33), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sipUserPhone.setStatus('obsolete')
sipUriEscapeHash = MibScalar((1, 3, 6, 1, 4, 1, 35265, 1, 9, 21, 34), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sipUriEscapeHash.setStatus('obsolete')
sipInviteTotalT = MibScalar((1, 3, 6, 1, 4, 1, 35265, 1, 9, 21, 35), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sipInviteTotalT.setStatus('obsolete')
sipInviteInitT = MibScalar((1, 3, 6, 1, 4, 1, 35265, 1, 9, 21, 36), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sipInviteInitT.setStatus('obsolete')
sipCwRingback = MibScalar((1, 3, 6, 1, 4, 1, 35265, 1, 9, 21, 37), CwRingbackRingbackAtCallwaiting()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sipCwRingback.setStatus('obsolete')
sipRingbackSdp = MibScalar((1, 3, 6, 1, 4, 1, 35265, 1, 9, 21, 38), RemoteRingback()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sipRingbackSdp.setStatus('obsolete')
sipRingback = MibScalar((1, 3, 6, 1, 4, 1, 35265, 1, 9, 21, 39), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sipRingback.setStatus('obsolete')
sipRegistration1 = MibScalar((1, 3, 6, 1, 4, 1, 35265, 1, 9, 21, 40), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sipRegistration1.setStatus('obsolete')
sipRegistration2 = MibScalar((1, 3, 6, 1, 4, 1, 35265, 1, 9, 21, 41), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sipRegistration2.setStatus('obsolete')
sipRegistration3 = MibScalar((1, 3, 6, 1, 4, 1, 35265, 1, 9, 21, 42), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sipRegistration3.setStatus('obsolete')
sipRegistration4 = MibScalar((1, 3, 6, 1, 4, 1, 35265, 1, 9, 21, 43), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sipRegistration4.setStatus('obsolete')
sipPRTPstat = MibScalar((1, 3, 6, 1, 4, 1, 35265, 1, 9, 21, 44), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sipPRTPstat.setStatus('obsolete')
fxsStatTable = MibTable((1, 3, 6, 1, 4, 1, 35265, 1, 9, 23), )
if mibBuilder.loadTexts: fxsStatTable.setStatus('current')
fxsStatEntry = MibTableRow((1, 3, 6, 1, 4, 1, 35265, 1, 9, 23, 1), ).setIndexNames((0, "ELTEX-FXS72", "fxsPortNumber"))
if mibBuilder.loadTexts: fxsStatEntry.setStatus('current')
termID = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 9, 23, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: termID.setStatus('current')
currentState = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 9, 23, 1, 2), FxsPortState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: currentState.setStatus('current')
totalCallCount = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 9, 23, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: totalCallCount.setStatus('current')
lastCallPhone = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 9, 23, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lastCallPhone.setStatus('current')
peakJitter = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 9, 23, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: peakJitter.setStatus('current')
lostPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 9, 23, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lostPackets.setStatus('current')
numTxPack = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 9, 23, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: numTxPack.setStatus('current')
numTxOct = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 9, 23, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: numTxOct.setStatus('current')
numRxPack = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 9, 23, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: numRxPack.setStatus('current')
numRxOct = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 9, 23, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: numRxOct.setStatus('current')
fxsUpdateFw = MibScalar((1, 3, 6, 1, 4, 1, 35265, 1, 9, 25), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fxsUpdateFw.setStatus('current')
fxsProfiles = MibIdentifier((1, 3, 6, 1, 4, 1, 35265, 1, 9, 30))
profilesSip = MibIdentifier((1, 3, 6, 1, 4, 1, 35265, 1, 9, 30, 1))
profilesSipCommon = MibIdentifier((1, 3, 6, 1, 4, 1, 35265, 1, 9, 30, 1, 1))
sipCommonEnablesip = MibScalar((1, 3, 6, 1, 4, 1, 35265, 1, 9, 30, 1, 1, 1), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sipCommonEnablesip.setStatus('current')
sipCommonShortmode = MibScalar((1, 3, 6, 1, 4, 1, 35265, 1, 9, 30, 1, 1, 2), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sipCommonShortmode.setStatus('current')
sipCommonTransport = MibScalar((1, 3, 6, 1, 4, 1, 35265, 1, 9, 30, 1, 1, 3), TypeTransport()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sipCommonTransport.setStatus('current')
sipCommonSipMtu = MibScalar((1, 3, 6, 1, 4, 1, 35265, 1, 9, 30, 1, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1300, 1450))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sipCommonSipMtu.setStatus('current')
sipCommonInviteTotalT = MibScalar((1, 3, 6, 1, 4, 1, 35265, 1, 9, 30, 1, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1000, 39000))).setUnits('ms').setMaxAccess("readwrite")
if mibBuilder.loadTexts: sipCommonInviteTotalT.setStatus('current')
sipCommonInviteInitT = MibScalar((1, 3, 6, 1, 4, 1, 35265, 1, 9, 30, 1, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(100, 1000))).setUnits('ms').setMaxAccess("readwrite")
if mibBuilder.loadTexts: sipCommonInviteInitT.setStatus('current')
sipCommonPortRegistrationDelay = MibScalar((1, 3, 6, 1, 4, 1, 35265, 1, 9, 30, 1, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 5000)).clone(500)).setUnits('ms').setMaxAccess("readwrite")
if mibBuilder.loadTexts: sipCommonPortRegistrationDelay.setStatus('current')
stunEnable = MibScalar((1, 3, 6, 1, 4, 1, 35265, 1, 9, 30, 1, 1, 8), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: stunEnable.setStatus('current')
stunServer = MibScalar((1, 3, 6, 1, 4, 1, 35265, 1, 9, 30, 1, 1, 9), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: stunServer.setStatus('current')
stunInterval = MibScalar((1, 3, 6, 1, 4, 1, 35265, 1, 9, 30, 1, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(10, 1800))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: stunInterval.setStatus('current')
sipPublicIp = MibScalar((1, 3, 6, 1, 4, 1, 35265, 1, 9, 30, 1, 1, 11), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sipPublicIp.setStatus('current')
profilesSipMIBBoundary = MibScalar((1, 3, 6, 1, 4, 1, 35265, 1, 9, 30, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: profilesSipMIBBoundary.setStatus('current')
profilesSipTable = MibTable((1, 3, 6, 1, 4, 1, 35265, 1, 9, 30, 1, 3), )
if mibBuilder.loadTexts: profilesSipTable.setStatus('current')
profilesSipEntry = MibTableRow((1, 3, 6, 1, 4, 1, 35265, 1, 9, 30, 1, 3, 1), ).setIndexNames((0, "ELTEX-FXS72", "profileNumber"))
if mibBuilder.loadTexts: profilesSipEntry.setStatus('current')
profileNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 9, 30, 1, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 8))).setMaxAccess("readonly")
if mibBuilder.loadTexts: profileNumber.setStatus('current')
sipProfileObtimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 9, 30, 1, 3, 1, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sipProfileObtimeout.setStatus('current')
sipProfileMode = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 9, 30, 1, 3, 1, 3), ProxyMode()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sipProfileMode.setStatus('current')
sipProfileOptions = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 9, 30, 1, 3, 1, 4), OptionsHomeServerTest()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sipProfileOptions.setStatus('current')
sipProfileKeepalivet = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 9, 30, 1, 3, 1, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sipProfileKeepalivet.setStatus('current')
sipProfileDomainToReg = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 9, 30, 1, 3, 1, 6), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sipProfileDomainToReg.setStatus('current')
sipProfileDomain = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 9, 30, 1, 3, 1, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sipProfileDomain.setStatus('current')
sipProfileRegisterRetryInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 9, 30, 1, 3, 1, 8), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sipProfileRegisterRetryInterval.setStatus('current')
sipProfileOutbound = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 9, 30, 1, 3, 1, 9), OutboundType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sipProfileOutbound.setStatus('current')
sipProfileInboundProxy = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 9, 30, 1, 3, 1, 10), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sipProfileInboundProxy.setStatus('current')
sipProfileExpires = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 9, 30, 1, 3, 1, 11), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sipProfileExpires.setStatus('current')
sipProfileAuthentication = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 9, 30, 1, 3, 1, 12), AuthenticationType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sipProfileAuthentication.setStatus('current')
sipProfileUsername = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 9, 30, 1, 3, 1, 13), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sipProfileUsername.setStatus('current')
sipProfilePassword = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 9, 30, 1, 3, 1, 14), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sipProfilePassword.setStatus('current')
sipProfileProxy0 = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 9, 30, 1, 3, 1, 15), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sipProfileProxy0.setStatus('current')
sipProfileRegrar0 = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 9, 30, 1, 3, 1, 16), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sipProfileRegrar0.setStatus('current')
sipProfileRegistration0 = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 9, 30, 1, 3, 1, 17), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sipProfileRegistration0.setStatus('current')
sipProfileProxy1 = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 9, 30, 1, 3, 1, 18), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sipProfileProxy1.setStatus('current')
sipProfileRegrar1 = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 9, 30, 1, 3, 1, 19), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sipProfileRegrar1.setStatus('current')
sipProfileProxy2 = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 9, 30, 1, 3, 1, 20), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sipProfileProxy2.setStatus('current')
sipProfileRegrar2 = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 9, 30, 1, 3, 1, 21), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sipProfileRegrar2.setStatus('current')
sipProfileProxy3 = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 9, 30, 1, 3, 1, 22), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sipProfileProxy3.setStatus('current')
sipProfileRegrar3 = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 9, 30, 1, 3, 1, 23), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sipProfileRegrar3.setStatus('current')
sipProfileProxy4 = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 9, 30, 1, 3, 1, 24), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sipProfileProxy4.setStatus('current')
sipProfileRegrar4 = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 9, 30, 1, 3, 1, 25), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sipProfileRegrar4.setStatus('current')
sipProfileDtmfmime = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 9, 30, 1, 3, 1, 26), DTMFMIMEType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sipProfileDtmfmime.setStatus('current')
sipProfileHfmime = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 9, 30, 1, 3, 1, 27), HookFlashMIMEType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sipProfileHfmime.setStatus('current')
sipProfileCtWithReplaces = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 9, 30, 1, 3, 1, 28), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sipProfileCtWithReplaces.setStatus('current')
sipProfile100Rel = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 9, 30, 1, 3, 1, 32), Type100rel()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sipProfile100Rel.setStatus('current')
sipProfileUserPhone = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 9, 30, 1, 3, 1, 33), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sipProfileUserPhone.setStatus('current')
sipProfileUriEscapeHash = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 9, 30, 1, 3, 1, 34), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sipProfileUriEscapeHash.setStatus('current')
sipProfileCwRingback = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 9, 30, 1, 3, 1, 37), CwRingbackRingbackAtCallwaiting()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sipProfileCwRingback.setStatus('current')
sipProfileRingbackSdp = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 9, 30, 1, 3, 1, 38), RemoteRingback()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sipProfileRingbackSdp.setStatus('current')
sipProfileRingback = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 9, 30, 1, 3, 1, 39), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sipProfileRingback.setStatus('current')
sipProfileRegistration1 = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 9, 30, 1, 3, 1, 40), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sipProfileRegistration1.setStatus('current')
sipProfileRegistration2 = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 9, 30, 1, 3, 1, 41), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sipProfileRegistration2.setStatus('current')
sipProfileRegistration3 = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 9, 30, 1, 3, 1, 42), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sipProfileRegistration3.setStatus('current')
sipProfileRegistration4 = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 9, 30, 1, 3, 1, 43), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sipProfileRegistration4.setStatus('current')
sipProfilePRTPstat = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 9, 30, 1, 3, 1, 44), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sipProfilePRTPstat.setStatus('current')
sipProfileRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 9, 30, 1, 3, 1, 45), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: sipProfileRowStatus.setStatus('current')
sipProfileEnableTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 9, 30, 1, 3, 1, 46), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sipProfileEnableTimer.setStatus('current')
sipProfileMinSE = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 9, 30, 1, 3, 1, 47), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sipProfileMinSE.setStatus('current')
sipProfileSessionExpires = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 9, 30, 1, 3, 1, 48), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sipProfileSessionExpires.setStatus('current')
sipProfileRemoveInactiveMedia = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 9, 30, 1, 3, 1, 49), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sipProfileRemoveInactiveMedia.setStatus('current')
sipProfileKeepAliveInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 9, 30, 1, 3, 1, 50), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sipProfileKeepAliveInterval.setStatus('current')
sipProfileKeepAliveMode = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 9, 30, 1, 3, 1, 51), KeepAliveMode()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sipProfileKeepAliveMode.setStatus('current')
sipProfileConferenceMode = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 9, 30, 1, 3, 1, 52), ConferenceMode()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sipProfileConferenceMode.setStatus('current')
sipProfileConferenceServer = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 9, 30, 1, 3, 1, 53), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sipProfileConferenceServer.setStatus('current')
sipProfileEnableIMS = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 9, 30, 1, 3, 1, 54), IMSMode()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sipProfileEnableIMS.setStatus('current')
sipProfileXCAPNameForThreePartyConference = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 9, 30, 1, 3, 1, 55), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sipProfileXCAPNameForThreePartyConference.setStatus('current')
sipProfileXCAPNameForHotline = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 9, 30, 1, 3, 1, 56), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sipProfileXCAPNameForHotline.setStatus('current')
sipProfileXCAPNameForCallWaiting = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 9, 30, 1, 3, 1, 57), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sipProfileXCAPNameForCallWaiting.setStatus('current')
sipProfileXCAPNameForCallHold = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 9, 30, 1, 3, 1, 58), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sipProfileXCAPNameForCallHold.setStatus('current')
sipProfileXCAPNameForExplicitCallTransfer = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 9, 30, 1, 3, 1, 59), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sipProfileXCAPNameForExplicitCallTransfer.setStatus('current')
sipProfileUseAlertInfo = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 9, 30, 1, 3, 1, 60), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sipProfileUseAlertInfo.setStatus('current')
sipProfileFullRuriCompliance = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 9, 30, 1, 3, 1, 61), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sipProfileFullRuriCompliance.setStatus('current')
sipProfileChangeover = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 9, 30, 1, 3, 1, 62), SipProfileChangeoverType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sipProfileChangeover.setStatus('current')
profilesSipAlertInfoMIBBoundary = MibScalar((1, 3, 6, 1, 4, 1, 35265, 1, 9, 30, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: profilesSipAlertInfoMIBBoundary.setStatus('current')
profilesSipAlertInfoTable = MibTable((1, 3, 6, 1, 4, 1, 35265, 1, 9, 30, 1, 5), )
if mibBuilder.loadTexts: profilesSipAlertInfoTable.setStatus('current')
profilesSipAlertInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 35265, 1, 9, 30, 1, 5, 1), ).setIndexNames((0, "ELTEX-FXS72", "profileNumber"), (0, "ELTEX-FXS72", "cadenceNumber"))
if mibBuilder.loadTexts: profilesSipAlertInfoEntry.setStatus('current')
cadenceNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 9, 30, 1, 5, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 16)))
if mibBuilder.loadTexts: cadenceNumber.setStatus('current')
cadenceName = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 9, 30, 1, 5, 1, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cadenceName.setStatus('current')
cadenceRingRule = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 9, 30, 1, 5, 1, 3), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cadenceRingRule.setStatus('current')
cadenceRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 9, 30, 1, 5, 1, 4), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cadenceRowStatus.setStatus('current')
profilesPortsMIBBoundary = MibScalar((1, 3, 6, 1, 4, 1, 35265, 1, 9, 30, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: profilesPortsMIBBoundary.setStatus('current')
profilesPorts = MibIdentifier((1, 3, 6, 1, 4, 1, 35265, 1, 9, 30, 3))
profilesPortsTable = MibTable((1, 3, 6, 1, 4, 1, 35265, 1, 9, 30, 3, 1), )
if mibBuilder.loadTexts: profilesPortsTable.setStatus('current')
profilesPortsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 35265, 1, 9, 30, 3, 1, 1), ).setIndexNames((0, "ELTEX-FXS72", "profileNumber"))
if mibBuilder.loadTexts: profilesPortsEntry.setStatus('current')
profilePortsPlaymoh = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 9, 30, 3, 1, 1, 1), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: profilePortsPlaymoh.setStatus('current')
profilePortsAON = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 9, 30, 3, 1, 1, 2), FxsAON()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: profilePortsAON.setStatus('current')
profilePortsAONHideDate = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 9, 30, 3, 1, 1, 3), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: profilePortsAONHideDate.setStatus('current')
profilePortsAONHideName = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 9, 30, 3, 1, 1, 4), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: profilePortsAONHideName.setStatus('current')
profilePortsTaxophone = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 9, 30, 3, 1, 1, 5), FxsTaxophoneType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: profilePortsTaxophone.setStatus('current')
profilePortsMinFlashtime = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 9, 30, 3, 1, 1, 6), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: profilePortsMinFlashtime.setStatus('current')
profilePortsMaxFlashtime = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 9, 30, 3, 1, 1, 7), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: profilePortsMaxFlashtime.setStatus('current')
profilePortsGainr = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 9, 30, 3, 1, 1, 8), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: profilePortsGainr.setStatus('current')
profilePortsGaint = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 9, 30, 3, 1, 1, 9), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: profilePortsGaint.setStatus('current')
profilePortsCategory = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 9, 30, 3, 1, 1, 10), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: profilePortsCategory.setStatus('current')
profilePortsCallTransfer = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 9, 30, 3, 1, 1, 11), FxsProcessFlashType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: profilePortsCallTransfer.setStatus('obsolete')
profilePortsCallWaiting = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 9, 30, 3, 1, 1, 12), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: profilePortsCallWaiting.setStatus('obsolete')
profilePortsCfgPriOverCw = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 9, 30, 3, 1, 1, 13), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: profilePortsCfgPriOverCw.setStatus('current')
profilePortsFxoFlashTime = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 9, 30, 3, 1, 1, 14), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: profilePortsFxoFlashTime.setStatus('current')
profilePortsFxoDelTdm = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 9, 30, 3, 1, 1, 15), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: profilePortsFxoDelTdm.setStatus('current')
profilePortsFxoRingtdm = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 9, 30, 3, 1, 1, 16), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: profilePortsFxoRingtdm.setStatus('current')
profilePortsPstnNumberprefix = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 9, 30, 3, 1, 1, 17), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: profilePortsPstnNumberprefix.setStatus('current')
profilePortsPstnNameprefix = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 9, 30, 3, 1, 1, 18), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: profilePortsPstnNameprefix.setStatus('current')
profilePortsUsePstnCid = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 9, 30, 3, 1, 1, 19), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: profilePortsUsePstnCid.setStatus('current')
profilePortsEnableCpc = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 9, 30, 3, 1, 1, 20), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: profilePortsEnableCpc.setStatus('current')
profilePortsCpcTime = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 9, 30, 3, 1, 1, 21), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: profilePortsCpcTime.setStatus('current')
profilePortsDontDetectDT = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 9, 30, 3, 1, 1, 22), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: profilePortsDontDetectDT.setStatus('current')
profilePortsDelayDialingTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 9, 30, 3, 1, 1, 23), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: profilePortsDelayDialingTimeout.setStatus('current')
profilePortsDialing = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 9, 30, 3, 1, 1, 24), FxoDialingType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: profilePortsDialing.setStatus('current')
profilePortsTransmitNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 9, 30, 3, 1, 1, 25), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: profilePortsTransmitNumber.setStatus('current')
profilePortsDontTransmitPrefix = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 9, 30, 3, 1, 1, 26), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: profilePortsDontTransmitPrefix.setStatus('current')
profilePortsRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 9, 30, 3, 1, 1, 27), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: profilePortsRowStatus.setStatus('current')
profilePortsDialToneDetectionParameters = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 9, 30, 3, 1, 1, 28), FxsToneParametrs()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: profilePortsDialToneDetectionParameters.setStatus('current')
profilePortsRingBackToneDetectionParameters = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 9, 30, 3, 1, 1, 29), FxsToneParametrs()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: profilePortsRingBackToneDetectionParameters.setStatus('current')
profilePortsBusyToneDetectionParameters = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 9, 30, 3, 1, 1, 30), FxsToneParametrs()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: profilePortsBusyToneDetectionParameters.setStatus('current')
profilePortsDtDetectTime = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 9, 30, 3, 1, 1, 31), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: profilePortsDtDetectTime.setStatus('current')
profilePortsDecadePulseTime = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 9, 30, 3, 1, 1, 32), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: profilePortsDecadePulseTime.setStatus('current')
profilePortsDecadePauseTime = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 9, 30, 3, 1, 1, 33), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: profilePortsDecadePauseTime.setStatus('current')
profilePortsFxoCallBusy = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 9, 30, 3, 1, 1, 34), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: profilePortsFxoCallBusy.setStatus('current')
profilePortsCpcRus = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 9, 30, 3, 1, 1, 35), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: profilePortsCpcRus.setStatus('current')
profilePortsReversalPolarityAction = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 9, 30, 3, 1, 1, 36), ReversalPolarityAction()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: profilePortsReversalPolarityAction.setStatus('obsolete')
profilePortsPstnActivity = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 9, 30, 3, 1, 1, 37), PstnActivityType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: profilePortsPstnActivity.setStatus('current')
profilePortsPstnRbDetectTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 9, 30, 3, 1, 1, 38), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 60))).setUnits('sec').setMaxAccess("readwrite")
if mibBuilder.loadTexts: profilePortsPstnRbDetectTimeout.setStatus('current')
profilePortsDetectFxoLinePresence = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 9, 30, 3, 1, 1, 39), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: profilePortsDetectFxoLinePresence.setStatus('current')
profilePortsBlockFxoLineInOutgoingDirection = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 9, 30, 3, 1, 1, 40), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: profilePortsBlockFxoLineInOutgoingDirection.setStatus('current')
profilePortsStopDial = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 9, 30, 3, 1, 1, 41), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: profilePortsStopDial.setStatus('current')
profilePortsFxoMinLevelDetect = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 9, 30, 3, 1, 1, 42), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: profilePortsFxoMinLevelDetect.setStatus('current')
profilePortsModifier = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 9, 30, 3, 1, 1, 43), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: profilePortsModifier.setStatus('current')
profilesDialPlansMIBBoundary = MibScalar((1, 3, 6, 1, 4, 1, 35265, 1, 9, 30, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: profilesDialPlansMIBBoundary.setStatus('current')
profilesDialPlans = MibIdentifier((1, 3, 6, 1, 4, 1, 35265, 1, 9, 30, 5))
profilesDialPlansTable = MibTable((1, 3, 6, 1, 4, 1, 35265, 1, 9, 30, 5, 1), )
if mibBuilder.loadTexts: profilesDialPlansTable.setStatus('current')
profilesDialPlansEntry = MibTableRow((1, 3, 6, 1, 4, 1, 35265, 1, 9, 30, 5, 1, 1), ).setIndexNames((0, "ELTEX-FXS72", "profileNumber"), (0, "ELTEX-FXS72", "profileDialPlanNumber"))
if mibBuilder.loadTexts: profilesDialPlansEntry.setStatus('current')
profileDialPlanHost = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 9, 30, 5, 1, 1, 1), DisplayString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: profileDialPlanHost.setStatus('current')
profileDialPlanDigits = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 9, 30, 5, 1, 1, 2), DisplayString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: profileDialPlanDigits.setStatus('current')
profileDialPlanTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 9, 30, 5, 1, 1, 3), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: profileDialPlanTimeout.setStatus('current')
profileDialPlanMinDigits = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 9, 30, 5, 1, 1, 4), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: profileDialPlanMinDigits.setStatus('current')
profileDialPlanType = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 9, 30, 5, 1, 1, 5), FxsDialPlanType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: profileDialPlanType.setStatus('current')
profileDialPlanAccessMask = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 9, 30, 5, 1, 1, 6), DisplayString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: profileDialPlanAccessMask.setStatus('current')
profileDialPlanDialtone = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 9, 30, 5, 1, 1, 7), TruthValue()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: profileDialPlanDialtone.setStatus('current')
profileDialPlanModifier = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 9, 30, 5, 1, 1, 8), DisplayString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: profileDialPlanModifier.setStatus('current')
profileDialPlanNature = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 9, 30, 5, 1, 1, 9), FxsDialPlanNatureType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: profileDialPlanNature.setStatus('current')
profileDialPlanDelnum = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 9, 30, 5, 1, 1, 10), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: profileDialPlanDelnum.setStatus('current')
profileDialPlanPtime = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 9, 30, 5, 1, 1, 11), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: profileDialPlanPtime.setStatus('current')
profileDialRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 9, 30, 5, 1, 1, 12), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: profileDialRowStatus.setStatus('current')
profileDialPlanNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 9, 30, 5, 1, 1, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 300)))
if mibBuilder.loadTexts: profileDialPlanNumber.setStatus('current')
profilesRegExpDPTableMIBBoundary = MibScalar((1, 3, 6, 1, 4, 1, 35265, 1, 9, 30, 5, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: profilesRegExpDPTableMIBBoundary.setStatus('current')
profilesRegExpDPTable = MibTable((1, 3, 6, 1, 4, 1, 35265, 1, 9, 30, 5, 3), )
if mibBuilder.loadTexts: profilesRegExpDPTable.setStatus('current')
profilesRegExpDPEntry = MibTableRow((1, 3, 6, 1, 4, 1, 35265, 1, 9, 30, 5, 3, 1), ).setIndexNames((0, "ELTEX-FXS72", "profileNumber"))
if mibBuilder.loadTexts: profilesRegExpDPEntry.setStatus('current')
profileRegExpDialOn = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 9, 30, 5, 3, 1, 1), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: profileRegExpDialOn.setStatus('current')
profileRegExpDialProtocol = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 9, 30, 5, 3, 1, 2), TauDialProtocolType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: profileRegExpDialProtocol.setStatus('current')
profileRegExpDialText = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 9, 30, 5, 3, 1, 3), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: profileRegExpDialText.setStatus('current')
profileRegExpDialRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 9, 30, 5, 3, 1, 4), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: profileRegExpDialRowStatus.setStatus('current')
profilesCodecs = MibIdentifier((1, 3, 6, 1, 4, 1, 35265, 1, 9, 30, 7))
profilesCodecsTable = MibTable((1, 3, 6, 1, 4, 1, 35265, 1, 9, 30, 7, 1), )
if mibBuilder.loadTexts: profilesCodecsTable.setStatus('current')
profilesCodecsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 35265, 1, 9, 30, 7, 1, 1), ).setIndexNames((0, "ELTEX-FXS72", "profileNumber"))
if mibBuilder.loadTexts: profilesCodecsEntry.setStatus('current')
useG711A = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 9, 30, 7, 1, 1, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: useG711A.setStatus('current')
useG711U = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 9, 30, 7, 1, 1, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: useG711U.setStatus('current')
useG726to32 = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 9, 30, 7, 1, 1, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: useG726to32.setStatus('current')
useG723 = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 9, 30, 7, 1, 1, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: useG723.setStatus('current')
useG729B = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 9, 30, 7, 1, 1, 6), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: useG729B.setStatus('current')
useG729A = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 9, 30, 7, 1, 1, 7), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: useG729A.setStatus('current')
g711Ptime = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 9, 30, 7, 1, 1, 8), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: g711Ptime.setStatus('current')
g729Ptime = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 9, 30, 7, 1, 1, 9), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: g729Ptime.setStatus('current')
g723Ptime = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 9, 30, 7, 1, 1, 10), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: g723Ptime.setStatus('current')
g726to32Ptime = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 9, 30, 7, 1, 1, 11), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: g726to32Ptime.setStatus('current')
g726to32PT = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 9, 30, 7, 1, 1, 12), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: g726to32PT.setStatus('current')
dtmfTransfer = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 9, 30, 7, 1, 1, 13), TauDtmfTransferType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dtmfTransfer.setStatus('current')
flashTransfer = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 9, 30, 7, 1, 1, 14), TauFlashTransferType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: flashTransfer.setStatus('current')
faxDetectDirection = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 9, 30, 7, 1, 1, 15), TauFaxDirectionType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: faxDetectDirection.setStatus('current')
faxTransferCodec = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 9, 30, 7, 1, 1, 16), TauFaxTransferType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: faxTransferCodec.setStatus('current')
slaveFaxTransferCodec = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 9, 30, 7, 1, 1, 17), TauFaxTransferSlaveType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: slaveFaxTransferCodec.setStatus('current')
modemTransfer = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 9, 30, 7, 1, 1, 18), TauModemTransferType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: modemTransfer.setStatus('current')
rfc2833PT = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 9, 30, 7, 1, 1, 19), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rfc2833PT.setStatus('current')
silenceSuppression = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 9, 30, 7, 1, 1, 20), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: silenceSuppression.setStatus('current')
echoCanceller = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 9, 30, 7, 1, 1, 21), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: echoCanceller.setStatus('current')
nlpDisable = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 9, 30, 7, 1, 1, 22), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nlpDisable.setStatus('current')
comfortNoise = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 9, 30, 7, 1, 1, 23), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: comfortNoise.setStatus('current')
rtcpTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 9, 30, 7, 1, 1, 24), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rtcpTimer.setStatus('current')
rtcpControlPeriod = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 9, 30, 7, 1, 1, 25), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rtcpControlPeriod.setStatus('current')
ciscoNsePT = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 9, 30, 7, 1, 1, 26), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ciscoNsePT.setStatus('current')
t38MaxDatagramSize = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 9, 30, 7, 1, 1, 27), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: t38MaxDatagramSize.setStatus('current')
t38Bitrate = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 9, 30, 7, 1, 1, 28), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: t38Bitrate.setStatus('current')
modemFaxDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 9, 30, 7, 1, 1, 29), Integer32()).setUnits('ms').setMaxAccess("readwrite")
if mibBuilder.loadTexts: modemFaxDelay.setStatus('current')
voiceMode = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 9, 30, 7, 1, 1, 30), TauVoiceModeType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: voiceMode.setStatus('current')
voiceDelayMin = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 9, 30, 7, 1, 1, 31), Integer32()).setUnits('ms').setMaxAccess("readwrite")
if mibBuilder.loadTexts: voiceDelayMin.setStatus('current')
voiceDelayMax = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 9, 30, 7, 1, 1, 32), Integer32()).setUnits('ms').setMaxAccess("readwrite")
if mibBuilder.loadTexts: voiceDelayMax.setStatus('current')
voiceDeletionThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 9, 30, 7, 1, 1, 33), Integer32()).setUnits('ms').setMaxAccess("readwrite")
if mibBuilder.loadTexts: voiceDeletionThreshold.setStatus('current')
voiceDeletionMode = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 9, 30, 7, 1, 1, 34), TauvoiceDeletionModeType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: voiceDeletionMode.setStatus('current')
profilesCodecsRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 9, 30, 7, 1, 1, 35), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: profilesCodecsRowStatus.setStatus('current')
rtcpXR = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 9, 30, 7, 1, 1, 36), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rtcpXR.setStatus('current')
rfc3264PtCommon = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 9, 30, 7, 1, 1, 37), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rfc3264PtCommon.setStatus('current')
tauSnmpConfiguration = MibIdentifier((1, 3, 6, 1, 4, 1, 35265, 1, 9, 31))
tauTrapSink = MibScalar((1, 3, 6, 1, 4, 1, 35265, 1, 9, 31, 1), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tauTrapSink.setStatus('current')
tauTrapType = MibScalar((1, 3, 6, 1, 4, 1, 35265, 1, 9, 31, 2), TauTrapVersion()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tauTrapType.setStatus('current')
tauSysName = MibScalar((1, 3, 6, 1, 4, 1, 35265, 1, 9, 31, 3), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tauSysName.setStatus('current')
tauSysContact = MibScalar((1, 3, 6, 1, 4, 1, 35265, 1, 9, 31, 4), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tauSysContact.setStatus('current')
tauSysLocation = MibScalar((1, 3, 6, 1, 4, 1, 35265, 1, 9, 31, 5), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tauSysLocation.setStatus('current')
tauRoCommunity = MibScalar((1, 3, 6, 1, 4, 1, 35265, 1, 9, 31, 6), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tauRoCommunity.setStatus('current')
tauRwCommunity = MibScalar((1, 3, 6, 1, 4, 1, 35265, 1, 9, 31, 7), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tauRwCommunity.setStatus('current')
tauTrapCommunity = MibScalar((1, 3, 6, 1, 4, 1, 35265, 1, 9, 31, 8), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tauTrapCommunity.setStatus('current')
tauUserV3Name = MibScalar((1, 3, 6, 1, 4, 1, 35265, 1, 9, 31, 9), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tauUserV3Name.setStatus('current')
tauUserV3Password = MibScalar((1, 3, 6, 1, 4, 1, 35265, 1, 9, 31, 10), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tauUserV3Password.setStatus('current')
tauViewV3Type = MibScalar((1, 3, 6, 1, 4, 1, 35265, 1, 9, 31, 11), TauUserViewType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tauViewV3Type.setStatus('current')
tauRestartSnmp = MibScalar((1, 3, 6, 1, 4, 1, 35265, 1, 9, 31, 12), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tauRestartSnmp.setStatus('current')
tauMegacoTrapsTable = MibTable((1, 3, 6, 1, 4, 1, 35265, 1, 9, 32), )
if mibBuilder.loadTexts: tauMegacoTrapsTable.setStatus('current')
tauMegacoTrapsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 35265, 1, 9, 32, 1), ).setIndexNames((0, "ELTEX-FXS72", "tauMegacoTrapId"))
if mibBuilder.loadTexts: tauMegacoTrapsEntry.setStatus('current')
tauMegacoTrapId = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 9, 32, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 100)))
if mibBuilder.loadTexts: tauMegacoTrapId.setStatus('current')
tauMegacoTrapType = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 9, 32, 1, 2), TauMegacoTrapVersion()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tauMegacoTrapType.setStatus('current')
tauMegacoTrapHost = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 9, 32, 1, 3), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tauMegacoTrapHost.setStatus('current')
tauMegacoTrapCommunity = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 9, 32, 1, 4), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tauMegacoTrapCommunity.setStatus('current')
tauMegacoTrapPort = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 9, 32, 1, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tauMegacoTrapPort.setStatus('current')
tauMegacoTrapRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 9, 32, 1, 6), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tauMegacoTrapRowStatus.setStatus('current')
fxoSerialGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 35265, 1, 9, 34))
fxoSerialGroupsTable = MibTable((1, 3, 6, 1, 4, 1, 35265, 1, 9, 34, 1), )
if mibBuilder.loadTexts: fxoSerialGroupsTable.setStatus('current')
fxoSerialGroupsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 35265, 1, 9, 34, 1, 1), ).setIndexNames((0, "ELTEX-FXS72", "fxsDialPlanNumber"))
if mibBuilder.loadTexts: fxoSerialGroupsEntry.setStatus('current')
fxoSerialGroupsPhone = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 9, 34, 1, 1, 1), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fxoSerialGroupsPhone.setStatus('current')
fxoSerialGroupsEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 9, 34, 1, 1, 2), FxsGroupSerialEnableType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fxoSerialGroupsEnabled.setStatus('current')
fxoSerialGroupsBusyType = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 9, 34, 1, 1, 3), FxoGroupBusyType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fxoSerialGroupsBusyType.setStatus('current')
fxoSerialGroupsSipPort = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 9, 34, 1, 1, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fxoSerialGroupsSipPort.setStatus('current')
fxoSerialGroupsAuthName = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 9, 34, 1, 1, 5), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fxoSerialGroupsAuthName.setStatus('current')
fxoSerialGroupsAuthPass = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 9, 34, 1, 1, 6), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fxoSerialGroupsAuthPass.setStatus('current')
fxoSerialGroupsPorts = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 9, 34, 1, 1, 7), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fxoSerialGroupsPorts.setStatus('current')
fxoSerialGroupsSipProfile = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 9, 34, 1, 1, 8), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fxoSerialGroupsSipProfile.setStatus('current')
fxoSerialGroupsTransmitNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 9, 34, 1, 1, 9), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fxoSerialGroupsTransmitNumber.setStatus('current')
fxoSerialGroupsDontTransmitPrefix = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 9, 34, 1, 1, 10), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fxoSerialGroupsDontTransmitPrefix.setStatus('current')
fxoSerialGroupsRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 9, 34, 1, 1, 11), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: fxoSerialGroupsRowStatus.setStatus('current')
fxoSerialGroupsSend503OnBusy = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 9, 34, 1, 1, 12), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fxoSerialGroupsSend503OnBusy.setStatus('current')
fxoSerialGroupsType = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 9, 34, 1, 1, 13), FxoGroupType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fxoSerialGroupsType.setStatus('current')
fxsNetwork = MibIdentifier((1, 3, 6, 1, 4, 1, 35265, 1, 9, 35))
fxsAutoupdateSettings = MibIdentifier((1, 3, 6, 1, 4, 1, 35265, 1, 9, 35, 1))
fxsEnableAutoupdate = MibScalar((1, 3, 6, 1, 4, 1, 35265, 1, 9, 35, 1, 1), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fxsEnableAutoupdate.setStatus('current')
fxsSource = MibScalar((1, 3, 6, 1, 4, 1, 35265, 1, 9, 35, 1, 2), FxsNetworkAutoupdateSourceType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fxsSource.setStatus('current')
fxsTFTPServer = MibScalar((1, 3, 6, 1, 4, 1, 35265, 1, 9, 35, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fxsTFTPServer.setStatus('current')
fxsConfigurationFile = MibScalar((1, 3, 6, 1, 4, 1, 35265, 1, 9, 35, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fxsConfigurationFile.setStatus('current')
fxsFirmwareVersion = MibScalar((1, 3, 6, 1, 4, 1, 35265, 1, 9, 35, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fxsFirmwareVersion.setStatus('current')
fxsConfigurationUpdateInterval = MibScalar((1, 3, 6, 1, 4, 1, 35265, 1, 9, 35, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(60, 65535), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fxsConfigurationUpdateInterval.setStatus('current')
fxsFirmwareUpdateInterval = MibScalar((1, 3, 6, 1, 4, 1, 35265, 1, 9, 35, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(60, 65535), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fxsFirmwareUpdateInterval.setStatus('current')
autoupdateProtocol = MibScalar((1, 3, 6, 1, 4, 1, 35265, 1, 9, 35, 1, 8), AutoupdateProtocolType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: autoupdateProtocol.setStatus('current')
autoupdateAuth = MibScalar((1, 3, 6, 1, 4, 1, 35265, 1, 9, 35, 1, 9), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: autoupdateAuth.setStatus('current')
autoupdateUser = MibScalar((1, 3, 6, 1, 4, 1, 35265, 1, 9, 35, 1, 10), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: autoupdateUser.setStatus('current')
autoupdatePassword = MibScalar((1, 3, 6, 1, 4, 1, 35265, 1, 9, 35, 1, 11), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: autoupdatePassword.setStatus('current')
fxsVoipGeneral = MibIdentifier((1, 3, 6, 1, 4, 1, 35265, 1, 9, 37))
fansForceEnable = MibScalar((1, 3, 6, 1, 4, 1, 35265, 1, 9, 37, 1), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fansForceEnable.setStatus('current')
fansThresholdTemperature = MibScalar((1, 3, 6, 1, 4, 1, 35265, 1, 9, 37, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(35, 55))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fansThresholdTemperature.setStatus('current')
deviceName = MibScalar((1, 3, 6, 1, 4, 1, 35265, 1, 9, 37, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: deviceName.setStatus('current')
startTimer = MibScalar((1, 3, 6, 1, 4, 1, 35265, 1, 9, 37, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: startTimer.setStatus('current')
durationTimer = MibScalar((1, 3, 6, 1, 4, 1, 35265, 1, 9, 37, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: durationTimer.setStatus('current')
waitAnswerTimer = MibScalar((1, 3, 6, 1, 4, 1, 35265, 1, 9, 37, 6), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: waitAnswerTimer.setStatus('current')
powerMode = MibScalar((1, 3, 6, 1, 4, 1, 35265, 1, 9, 37, 7), PowerMode()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: powerMode.setStatus('current')
siptUsePrefix = MibScalar((1, 3, 6, 1, 4, 1, 35265, 1, 9, 37, 8), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: siptUsePrefix.setStatus('current')
siptPrefix = MibScalar((1, 3, 6, 1, 4, 1, 35265, 1, 9, 37, 9), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: siptPrefix.setStatus('current')
fxsSyslog = MibIdentifier((1, 3, 6, 1, 4, 1, 35265, 1, 9, 38))
runSyslog = MibScalar((1, 3, 6, 1, 4, 1, 35265, 1, 9, 38, 1), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: runSyslog.setStatus('current')
syslogAddr = MibScalar((1, 3, 6, 1, 4, 1, 35265, 1, 9, 38, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: syslogAddr.setStatus('current')
syslogPort = MibScalar((1, 3, 6, 1, 4, 1, 35265, 1, 9, 38, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: syslogPort.setStatus('current')
appAlarm = MibScalar((1, 3, 6, 1, 4, 1, 35265, 1, 9, 38, 13), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: appAlarm.setStatus('current')
appErr = MibScalar((1, 3, 6, 1, 4, 1, 35265, 1, 9, 38, 4), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: appErr.setStatus('current')
appWarn = MibScalar((1, 3, 6, 1, 4, 1, 35265, 1, 9, 38, 5), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: appWarn.setStatus('current')
appInfo = MibScalar((1, 3, 6, 1, 4, 1, 35265, 1, 9, 38, 6), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: appInfo.setStatus('current')
appDbg = MibScalar((1, 3, 6, 1, 4, 1, 35265, 1, 9, 38, 7), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: appDbg.setStatus('current')
sipLevel = MibScalar((1, 3, 6, 1, 4, 1, 35265, 1, 9, 38, 8), SipLogLevel()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sipLevel.setStatus('current')
h323Level = MibScalar((1, 3, 6, 1, 4, 1, 35265, 1, 9, 38, 9), H323LogLevel()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: h323Level.setStatus('current')
vapiEnabled = MibScalar((1, 3, 6, 1, 4, 1, 35265, 1, 9, 38, 10), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vapiEnabled.setStatus('current')
vapiLibLevel = MibScalar((1, 3, 6, 1, 4, 1, 35265, 1, 9, 38, 11), VapiLibLogLevel()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vapiLibLevel.setStatus('current')
vapiAppLevel = MibScalar((1, 3, 6, 1, 4, 1, 35265, 1, 9, 38, 12), VapiAppLogLevel()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vapiAppLevel.setStatus('current')
testPortsTable = MibTable((1, 3, 6, 1, 4, 1, 35265, 1, 9, 39), )
if mibBuilder.loadTexts: testPortsTable.setStatus('current')
testPortsTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 35265, 1, 9, 39, 1), ).setIndexNames((0, "ELTEX-FXS72", "fxsPortNumber"))
if mibBuilder.loadTexts: testPortsTableEntry.setStatus('current')
portTestTestStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 9, 39, 1, 1), FxsPortTestStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: portTestTestStatus.setStatus('current')
portTestTestStartTime = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 9, 39, 1, 2), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: portTestTestStartTime.setStatus('current')
portTestLastTestStartTime = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 9, 39, 1, 3), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: portTestLastTestStartTime.setStatus('current')
portTestLastTestEndTime = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 9, 39, 1, 4), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: portTestLastTestEndTime.setStatus('current')
portTestResultFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 9, 39, 1, 5), FxsPortTestFlag()).setMaxAccess("readonly")
if mibBuilder.loadTexts: portTestResultFlag.setStatus('current')
portTestRingU = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 9, 39, 1, 6), DisplayString()).setUnits('V').setMaxAccess("readonly")
if mibBuilder.loadTexts: portTestRingU.setStatus('current')
portTestTipU = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 9, 39, 1, 7), DisplayString()).setUnits('V').setMaxAccess("readonly")
if mibBuilder.loadTexts: portTestTipU.setStatus('current')
portTestShortVbat = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 9, 39, 1, 8), DisplayString()).setUnits('V').setMaxAccess("readonly")
if mibBuilder.loadTexts: portTestShortVbat.setStatus('current')
portTestResistTr = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 9, 39, 1, 9), DisplayString()).setUnits('kOhm').setMaxAccess("readonly")
if mibBuilder.loadTexts: portTestResistTr.setStatus('current')
portTestResistTg = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 9, 39, 1, 10), DisplayString()).setUnits('kOhm').setMaxAccess("readonly")
if mibBuilder.loadTexts: portTestResistTg.setStatus('current')
portTestResistRg = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 9, 39, 1, 11), DisplayString()).setUnits('kOhm').setMaxAccess("readonly")
if mibBuilder.loadTexts: portTestResistRg.setStatus('current')
portTestCapacityTr = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 9, 39, 1, 12), DisplayString()).setUnits('uF').setMaxAccess("readonly")
if mibBuilder.loadTexts: portTestCapacityTr.setStatus('current')
portTestCapacityTg = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 9, 39, 1, 13), DisplayString()).setUnits('uF').setMaxAccess("readonly")
if mibBuilder.loadTexts: portTestCapacityTg.setStatus('current')
portTestCapacityRg = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 9, 39, 1, 14), DisplayString()).setUnits('uF').setMaxAccess("readonly")
if mibBuilder.loadTexts: portTestCapacityRg.setStatus('current')
portTestRunTest = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 9, 39, 1, 15), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portTestRunTest.setStatus('current')
monitorSerialGroupsMIBBoundary = MibScalar((1, 3, 6, 1, 4, 1, 35265, 1, 9, 40), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: monitorSerialGroupsMIBBoundary.setStatus('current')
monitorSerialGroupsTable = MibTable((1, 3, 6, 1, 4, 1, 35265, 1, 9, 41), )
if mibBuilder.loadTexts: monitorSerialGroupsTable.setStatus('current')
monitorSerialGroupsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 35265, 1, 9, 41, 1), ).setIndexNames((0, "ELTEX-FXS72", "serialGroupNumber"))
if mibBuilder.loadTexts: monitorSerialGroupsEntry.setStatus('current')
serialGroupNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 9, 41, 1, 1), Unsigned32())
if mibBuilder.loadTexts: serialGroupNumber.setStatus('current')
serialGroupPhone = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 9, 41, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: serialGroupPhone.setStatus('current')
serialGroupRegistrationState = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 9, 41, 1, 3), GroupRegistrationState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: serialGroupRegistrationState.setStatus('current')
serialGroupRegistrationHost = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 9, 41, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: serialGroupRegistrationHost.setStatus('current')
serialGroupLastRegistrationAt = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 9, 41, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: serialGroupLastRegistrationAt.setStatus('current')
serialGroupNextRegistrationAfter = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 9, 41, 1, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: serialGroupNextRegistrationAfter.setStatus('current')
serialGroupH323GK = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 9, 41, 1, 7), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: serialGroupH323GK.setStatus('current')
monitorFxoGroupsTable = MibTable((1, 3, 6, 1, 4, 1, 35265, 1, 9, 42), )
if mibBuilder.loadTexts: monitorFxoGroupsTable.setStatus('current')
monitorFxoGroupsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 35265, 1, 9, 42, 1), ).setIndexNames((0, "ELTEX-FXS72", "fxoGroupNumber"))
if mibBuilder.loadTexts: monitorFxoGroupsEntry.setStatus('current')
fxoGroupNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 9, 42, 1, 1), Unsigned32())
if mibBuilder.loadTexts: fxoGroupNumber.setStatus('current')
fxoGroupPhone = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 9, 42, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fxoGroupPhone.setStatus('current')
fxoGroupRegistrationState = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 9, 42, 1, 3), GroupRegistrationState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fxoGroupRegistrationState.setStatus('current')
fxoGroupRegistrationHost = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 9, 42, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fxoGroupRegistrationHost.setStatus('current')
fxoGroupLastRegistrationAt = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 9, 42, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fxoGroupLastRegistrationAt.setStatus('current')
fxoGroupNextRegistrationAfter = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 9, 42, 1, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fxoGroupNextRegistrationAfter.setStatus('current')
fxoGroupH323GK = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 9, 42, 1, 7), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fxoGroupH323GK.setStatus('current')
firewallTableMIBBoundary = MibScalar((1, 3, 6, 1, 4, 1, 35265, 1, 9, 43), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: firewallTableMIBBoundary.setStatus('current')
firewallConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 35265, 1, 9, 44))
firewallTable = MibTable((1, 3, 6, 1, 4, 1, 35265, 1, 9, 44, 1), )
if mibBuilder.loadTexts: firewallTable.setStatus('current')
firewallEntry = MibTableRow((1, 3, 6, 1, 4, 1, 35265, 1, 9, 44, 1, 1), ).setIndexNames((0, "ELTEX-FXS72", "ruleNumber"))
if mibBuilder.loadTexts: firewallEntry.setStatus('current')
ruleNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 9, 44, 1, 1, 1), Unsigned32())
if mibBuilder.loadTexts: ruleNumber.setStatus('current')
startingSourceIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 9, 44, 1, 1, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: startingSourceIpAddress.setStatus('current')
numberOfSourceIpAddresses = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 9, 44, 1, 1, 3), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: numberOfSourceIpAddresses.setStatus('current')
allSourceIpAddresses = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 9, 44, 1, 1, 4), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: allSourceIpAddresses.setStatus('current')
ruleprotocol = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 9, 44, 1, 1, 5), FirewallProtocol()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ruleprotocol.setStatus('current')
typeOfMessageICMP = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 9, 44, 1, 1, 6), TypeOfMessageICMP()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: typeOfMessageICMP.setStatus('current')
startingSourcePort = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 9, 44, 1, 1, 7), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: startingSourcePort.setStatus('current')
numberOfSourcePorts = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 9, 44, 1, 1, 8), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: numberOfSourcePorts.setStatus('current')
allSourcePorts = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 9, 44, 1, 1, 9), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: allSourcePorts.setStatus('current')
startingDestinationPort = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 9, 44, 1, 1, 10), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: startingDestinationPort.setStatus('current')
numberOfDestinationPorts = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 9, 44, 1, 1, 11), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: numberOfDestinationPorts.setStatus('current')
allDestinationPorts = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 9, 44, 1, 1, 12), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: allDestinationPorts.setStatus('current')
ruleTarget = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 9, 44, 1, 1, 13), FirewallTarget()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ruleTarget.setStatus('current')
ruleMoveTo = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 9, 44, 1, 1, 14), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ruleMoveTo.setStatus('current')
ruleRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 9, 44, 1, 1, 15), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ruleRowStatus.setStatus('current')
firewallApply = MibScalar((1, 3, 6, 1, 4, 1, 35265, 1, 9, 44, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: firewallApply.setStatus('current')
firewallConfirm = MibScalar((1, 3, 6, 1, 4, 1, 35265, 1, 9, 44, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: firewallConfirm.setStatus('current')
configTcpIp = MibIdentifier((1, 3, 6, 1, 4, 1, 35265, 1, 9, 45))
rtpSipMin = MibScalar((1, 3, 6, 1, 4, 1, 35265, 1, 9, 45, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1024, 65500)).clone(23000)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rtpSipMin.setStatus('current')
rtpSipMax = MibScalar((1, 3, 6, 1, 4, 1, 35265, 1, 9, 45, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1024, 65500)).clone(23896)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rtpSipMax.setStatus('current')
interceptPortMin = MibScalar((1, 3, 6, 1, 4, 1, 35265, 1, 9, 45, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1024, 65500)).clone(50000)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: interceptPortMin.setStatus('current')
interceptPortMax = MibScalar((1, 3, 6, 1, 4, 1, 35265, 1, 9, 45, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1024, 65500)).clone(50100)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: interceptPortMax.setStatus('current')
diffservForSip = MibScalar((1, 3, 6, 1, 4, 1, 35265, 1, 9, 45, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255)).clone(104)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: diffservForSip.setStatus('current')
diffservForRtp = MibScalar((1, 3, 6, 1, 4, 1, 35265, 1, 9, 45, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255)).clone(184)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: diffservForRtp.setStatus('current')
verifyRemoteMediaAddress = MibScalar((1, 3, 6, 1, 4, 1, 35265, 1, 9, 45, 7), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: verifyRemoteMediaAddress.setStatus('current')
callLimitTable = MibTable((1, 3, 6, 1, 4, 1, 35265, 1, 9, 46), )
if mibBuilder.loadTexts: callLimitTable.setStatus('current')
callLimitEntry = MibTableRow((1, 3, 6, 1, 4, 1, 35265, 1, 9, 46, 1), ).setIndexNames((0, "ELTEX-FXS72", "clIndex"))
if mibBuilder.loadTexts: callLimitEntry.setStatus('current')
clIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 9, 46, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 30)))
if mibBuilder.loadTexts: clIndex.setStatus('current')
clType = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 9, 46, 1, 2), CallLimitType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: clType.setStatus('current')
clHostOfNeighbourGateway = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 9, 46, 1, 3), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: clHostOfNeighbourGateway.setStatus('current')
clSimultaneousCallsCount = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 9, 46, 1, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: clSimultaneousCallsCount.setStatus('current')
clRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 9, 46, 1, 5), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: clRowStatus.setStatus('current')
distinctiveRingTable = MibTable((1, 3, 6, 1, 4, 1, 35265, 1, 9, 47), )
if mibBuilder.loadTexts: distinctiveRingTable.setStatus('current')
distinctiveRingEntry = MibTableRow((1, 3, 6, 1, 4, 1, 35265, 1, 9, 47, 1), ).setIndexNames((0, "ELTEX-FXS72", "drId"))
if mibBuilder.loadTexts: distinctiveRingEntry.setStatus('current')
drId = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 9, 47, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 32)))
if mibBuilder.loadTexts: drId.setStatus('current')
drRule = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 9, 47, 1, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: drRule.setStatus('current')
drRing = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 9, 47, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(2, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: drRing.setStatus('current')
drPause = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 9, 47, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(2, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: drPause.setStatus('current')
drSubscriberProfiles = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 9, 47, 1, 5), DRSubscriberProfilesType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: drSubscriberProfiles.setStatus('current')
drRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 9, 47, 1, 6), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: drRowStatus.setStatus('current')
modifiersTable = MibTable((1, 3, 6, 1, 4, 1, 35265, 1, 9, 48), )
if mibBuilder.loadTexts: modifiersTable.setStatus('current')
modifiersEntry = MibTableRow((1, 3, 6, 1, 4, 1, 35265, 1, 9, 48, 1), ).setIndexNames((0, "ELTEX-FXS72", "modifierNumber"), (0, "ELTEX-FXS72", "modifierRule"))
if mibBuilder.loadTexts: modifiersEntry.setStatus('current')
modifierNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 9, 48, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 16)))
if mibBuilder.loadTexts: modifierNumber.setStatus('current')
modifierRule = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 9, 48, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 32)))
if mibBuilder.loadTexts: modifierRule.setStatus('current')
modifierDialedNumberRegexpRule = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 9, 48, 1, 3), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: modifierDialedNumberRegexpRule.setStatus('current')
modifierDialedNumberModification = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 9, 48, 1, 4), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: modifierDialedNumberModification.setStatus('current')
modifierCallingNumberModification = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 9, 48, 1, 5), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: modifierCallingNumberModification.setStatus('current')
modifierRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 9, 48, 1, 6), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: modifierRowStatus.setStatus('current')
tauSubtypes = MibIdentifier((1, 3, 6, 1, 4, 1, 35265, 1, 9, 90))
tau72sip = MibIdentifier((1, 3, 6, 1, 4, 1, 35265, 1, 9, 90, 1))
tau36sip = MibIdentifier((1, 3, 6, 1, 4, 1, 35265, 1, 9, 90, 2))
tau32Msip = MibIdentifier((1, 3, 6, 1, 4, 1, 35265, 1, 9, 90, 3))
tau72megaco = MibIdentifier((1, 3, 6, 1, 4, 1, 35265, 1, 9, 90, 4))
tau72v30sip = MibIdentifier((1, 3, 6, 1, 4, 1, 35265, 1, 9, 90, 5))
tau36v30sip = MibIdentifier((1, 3, 6, 1, 4, 1, 35265, 1, 9, 90, 6))
fxs72sip = MibIdentifier((1, 3, 6, 1, 4, 1, 35265, 1, 9, 90, 7))
tau36megaco = MibIdentifier((1, 3, 6, 1, 4, 1, 35265, 1, 9, 90, 8))
tau72v30megaco = MibIdentifier((1, 3, 6, 1, 4, 1, 35265, 1, 9, 90, 9))
tau36v30megaco = MibIdentifier((1, 3, 6, 1, 4, 1, 35265, 1, 9, 90, 10))
fxs72megaco = MibIdentifier((1, 3, 6, 1, 4, 1, 35265, 1, 9, 90, 11))
fxs72v21 = MibIdentifier((1, 3, 6, 1, 4, 1, 35265, 1, 9, 90, 12))
tau72v40sip = MibIdentifier((1, 3, 6, 1, 4, 1, 35265, 1, 9, 90, 13))
tau36v40sip = MibIdentifier((1, 3, 6, 1, 4, 1, 35265, 1, 9, 90, 14))
tau72v40megaco = MibIdentifier((1, 3, 6, 1, 4, 1, 35265, 1, 9, 90, 15))
tau36v40megaco = MibIdentifier((1, 3, 6, 1, 4, 1, 35265, 1, 9, 90, 16))
tau32MrevBsip = MibIdentifier((1, 3, 6, 1, 4, 1, 35265, 1, 9, 90, 17))
tau32Mmegaco = MibIdentifier((1, 3, 6, 1, 4, 1, 35265, 1, 9, 90, 18))
tau32MrevBmegaco = MibIdentifier((1, 3, 6, 1, 4, 1, 35265, 1, 9, 90, 19))
tau16sip = MibIdentifier((1, 3, 6, 1, 4, 1, 35265, 1, 9, 90, 20))
tau24sip = MibIdentifier((1, 3, 6, 1, 4, 1, 35265, 1, 9, 90, 21))
tau16megaco = MibIdentifier((1, 3, 6, 1, 4, 1, 35265, 1, 9, 90, 22))
tau24megaco = MibIdentifier((1, 3, 6, 1, 4, 1, 35265, 1, 9, 90, 23))
fxsGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 35265, 1, 9, 200))
for _fxsGroup_obj in [[("ELTEX-FXS72", "fxsDevName"), ("ELTEX-FXS72", "fxsDevType"), ("ELTEX-FXS72", "fxsDevCfgBuild"), ("ELTEX-FXS72", "fxsFreeSpace"), ("ELTEX-FXS72", "fxsFreeRam"), ("ELTEX-FXS72", "fxsSSwStatus"), ("ELTEX-FXS72", "fxsSSwStatusTime"), ("ELTEX-FXS72", "fxsCpuUsage"), ("ELTEX-FXS72", "fxsMonitoringVMode"), ("ELTEX-FXS72", "fxsMonitoringVBat"), ("ELTEX-FXS72", "fxsMonitoringVRing1"), ("ELTEX-FXS72", "fxsMonitoringVRing2"), ("ELTEX-FXS72", "fxsMonitoringTemp1"), ("ELTEX-FXS72", "fxsMonitoringTemp2"), ("ELTEX-FXS72", "fxsMonitoringTemp3"), ("ELTEX-FXS72", "fxsMonitoringTemp4"), ("ELTEX-FXS72", "fxsMonitoringFanState"), ("ELTEX-FXS72", "fxsMonitoringFan1Rotate"), ("ELTEX-FXS72", "fxsMonitoringFan2Rotate"), ("ELTEX-FXS72", "fxsMonitoringSubCooling"), ("ELTEX-FXS72", "fxsMonitoringVinput"), ("ELTEX-FXS72", "fxsMonitoringDevicePower"), ("ELTEX-FXS72", "fxsPortsMIBBoundary"), ("ELTEX-FXS72", "fxsPortPhoneNumber"), ("ELTEX-FXS72", "fxsPortState"), ("ELTEX-FXS72", "fxsPortUserName"), ("ELTEX-FXS72", "fxsPortTalkingNum"), ("ELTEX-FXS72", "fxsPortTalkingStartTime"), ("ELTEX-FXS72", "fxsPortSipConnected"), ("ELTEX-FXS72", "fxsPortH323Connected"), ("ELTEX-FXS72", "fxsPortSipConnecteNext"), ("ELTEX-FXS72", "fxsPortSipConnecteState"), ("ELTEX-FXS72", "fxsPortSipConnectHost"), ("ELTEX-FXS72", "fxsPortConfigPhone"), ("ELTEX-FXS72", "fxsPortConfigUserName"), ("ELTEX-FXS72", "fxsPortConfigAuthName"), ("ELTEX-FXS72", "fxsPortConfigAuthPass"), ("ELTEX-FXS72", "fxsPortConfigCustom"), ("ELTEX-FXS72", "fxsPortConfigPlaymoh"), ("ELTEX-FXS72", "fxsPortConfigAON"), ("ELTEX-FXS72", "fxsPortConfigAONHideDate"), ("ELTEX-FXS72", "fxsPortConfigAONHideName"), ("ELTEX-FXS72", "fxsPortConfigTaxophone"), ("ELTEX-FXS72", "fxsPortConfigMinFlashtime"), ("ELTEX-FXS72", "fxsPortConfigMaxFlashtime"), ("ELTEX-FXS72", "fxsPortConfigGainr"), ("ELTEX-FXS72", "fxsPortConfigGaint"), ("ELTEX-FXS72", "fxsPortConfigCategory"), ("ELTEX-FXS72", "fxsPortConfigCallTransfer"), ("ELTEX-FXS72", "fxsPortConfigCallWaiting"), ("ELTEX-FXS72", "fxsPortConfigHotLine"), ("ELTEX-FXS72", "fxsPortConfigHotNumber"), ("ELTEX-FXS72", "fxsPortConfigHotTimeout"), ("ELTEX-FXS72", "fxsPortConfigDisabled"), ("ELTEX-FXS72", "fxsPortConfigCtBusy"), ("ELTEX-FXS72", "fxsPortConfigCtUnconditional"), ("ELTEX-FXS72", "fxsPortConfigCtNoanswer"), ("ELTEX-FXS72", "fxsPortConfigCtTimeout"), ("ELTEX-FXS72", "fxsPortConfigClir"), ("ELTEX-FXS72", "fxsPortConfigStopDial"), ("ELTEX-FXS72", "fxsPortConfigAltNumber"), ("ELTEX-FXS72", "fxsPortConfigUseAltNumber"), ("ELTEX-FXS72", "fxsPortConfigPickUp"), ("ELTEX-FXS72", "fxsPortConfigSipPort"), ("ELTEX-FXS72", "fxsPortConfigCfgPriOverCw"), ("ELTEX-FXS72", "fxsPortConfigRowStatus"), ("ELTEX-FXS72", "fxsPortConfigDvoCwEn"), ("ELTEX-FXS72", "fxsPortConfigDvoCtAttendedEn"), ("ELTEX-FXS72", "fxsPortConfigDvoCtUnattendedEn"), ("ELTEX-FXS72", "fxsPortConfigDvoUnconditionalEn"), ("ELTEX-FXS72", "fxsPortConfigDvoCfBusyEn"), ("ELTEX-FXS72", "fxsPortConfigDvoCfAnswerEn"), ("ELTEX-FXS72", "fxsPortConfigDvoCfServiceEn"), ("ELTEX-FXS72", "fxsPortConfigDvoDoDisturbEn"), ("ELTEX-FXS72", "fxsPortConfigCtOutofservice"), ("ELTEX-FXS72", "fxsPortConfigCfuNumber"), ("ELTEX-FXS72", "fxsPortConfigCfbNumber"), ("ELTEX-FXS72", "fxsPortConfigCfnrNumber"), ("ELTEX-FXS72", "fxsPortConfigCfoosNumber"), ("ELTEX-FXS72", "fxsPortConfigDnd"), ("ELTEX-FXS72", "fxsPortConfigCtNumber"), ("ELTEX-FXS72", "fxsPortConfigEnableCpc"), ("ELTEX-FXS72", "fxsPortConfigCpcTime"), ("ELTEX-FXS72", "fxsPortConfigFxoFlashTime"), ("ELTEX-FXS72", "fxsPortConfigFxoDelTdm"), ("ELTEX-FXS72", "fxsPortConfigFxoRingtdm"), ("ELTEX-FXS72", "fxsPortConfigPstnNumberprefix"), ("ELTEX-FXS72", "fxsPortConfigPstnNameprefix"), ("ELTEX-FXS72", "fxsPortConfigUsePstnCid"), ("ELTEX-FXS72", "fxsPortConfigtdmhotline"), ("ELTEX-FXS72", "fxsPortConfigtdmhottimeout"), ("ELTEX-FXS72", "fxsPortConfigtdmhotnumber"), ("ELTEX-FXS72", "fxsPortConfigDontDetectDT"), ("ELTEX-FXS72", "fxsPortConfigDelayDialingTimeout"), ("ELTEX-FXS72", "fxsPortType"), ("ELTEX-FXS72", "fxsPortConfigDialing"), ("ELTEX-FXS72", "fxsPortConfigTransmitNumber"), ("ELTEX-FXS72", "fxsPortConfigDontTransmitPrefix"), ("ELTEX-FXS72", "fxsPortConfigPortProfileID"), ("ELTEX-FXS72", "fxsPortConfigSipProfileID"), ("ELTEX-FXS72", "fxsPortConfigDialToneDetectionParameters"), ("ELTEX-FXS72", "fxsPortConfigRingBackToneDetectionParameters"), ("ELTEX-FXS72", "fxsPortConfigBusyToneDetectionParameters"), ("ELTEX-FXS72", "fxsPortConfigDtDetectTime"), ("ELTEX-FXS72", "fxsPortConfigDecadePulseTime"), ("ELTEX-FXS72", "fxsPortConfigDecadePauseTime"), ("ELTEX-FXS72", "fxsPortConfigNoOffhookAtRinging"), ("ELTEX-FXS72", "fxsPortConfigFxoCallBusy"), ("ELTEX-FXS72", "fxsPortConfigCpcRus"), ("ELTEX-FXS72", "fxsPortConfigReversalPolarityAction"), ("ELTEX-FXS72", "fxsPortConfigPstnActivity"), ("ELTEX-FXS72", "fxsPortConfigPstnRbDetectTimeout"), ("ELTEX-FXS72", "fxsPortConfigDetectFxoLinePresence"), ("ELTEX-FXS72", "fxsPortConfigBlockFxoLineInOutgoingDirection"), ("ELTEX-FXS72", "fxsPortConfigFxoMinLevelDetect"), ("ELTEX-FXS72", "fxsPortConfigUseAltNumberAsContact"), ("ELTEX-FXS72", "fxsPortConfigModifier"), ("ELTEX-FXS72", "fxsPortConfigMwiDialtone"), ("ELTEX-FXS72", "fxsPortConfigCommonPlaymoh"), ("ELTEX-FXS72", "fxsPortConfigCommonAON"), ("ELTEX-FXS72", "fxsPortConfigCommonAONHideDate"), ("ELTEX-FXS72", "fxsPortConfigCommonAONHideName"), ("ELTEX-FXS72", "fxsPortConfigCommonTaxophone"), ("ELTEX-FXS72", "fxsPortConfigCommonMinFlashtime"), ("ELTEX-FXS72", "fxsPortConfigCommonMaxFlashtime"), ("ELTEX-FXS72", "fxsPortConfigCommonGainr"), ("ELTEX-FXS72", "fxsPortConfigCommonGaint"), ("ELTEX-FXS72", "fxsPortConfigCommonCategory"), ("ELTEX-FXS72", "fxsPortConfigCommonCallTransfer"), ("ELTEX-FXS72", "fxsPortConfigCommonCallWaiting"), ("ELTEX-FXS72", "fxsPortConfigCommonCfgPriOverCw"), ("ELTEX-FXS72", "fxsPortConfigCommonFxoFlashTime"), ("ELTEX-FXS72", "fxsPortConfigCommonFxoDelTdm"), ("ELTEX-FXS72", "fxsPortConfigCommonFxoRingtdm"), ("ELTEX-FXS72", "fxsPortConfigCommonPstnNumberprefix"), ("ELTEX-FXS72", "fxsPortConfigCommonPstnNameprefix"), ("ELTEX-FXS72", "fxsPortConfigCommonUsePstnCid"), ("ELTEX-FXS72", "fxsPortConfigCommonEnableCpc"), ("ELTEX-FXS72", "fxsPortConfigCommonCpcTime"), ("ELTEX-FXS72", "fxsPortConfigCommonDontDetectDT"), ("ELTEX-FXS72", "fxsPortConfigCommonDelayDialingTimeout"), ("ELTEX-FXS72", "fxsPortConfigCommonDialing"), ("ELTEX-FXS72", "fxsPortConfigCommonTransmitNumber"), ("ELTEX-FXS72", "fxsPortConfigCommonDontTransmitPrefix"), ("ELTEX-FXS72", "fxsDialMIBBoundary"), ("ELTEX-FXS72", "fxsDialPlanHost"), ("ELTEX-FXS72", "fxsDialPlanDigits"), ("ELTEX-FXS72", "fxsDialPlanTimeout"), ("ELTEX-FXS72", "fxsDialPlanMinDigits"), ("ELTEX-FXS72", "fxsDialPlanType"), ("ELTEX-FXS72", "fxsDialPlanAccessMask"), ("ELTEX-FXS72", "fxsDialPlanDialtone"), ("ELTEX-FXS72", "fxsDialPlanModifier"), ("ELTEX-FXS72", "fxsDialPlanNature"), ("ELTEX-FXS72", "fxsDialPlanDelnum"), ("ELTEX-FXS72", "fxsDialPlanPtime"), ("ELTEX-FXS72", "fxsDialRowStatus"), ("ELTEX-FXS72", "fxsDialPlanNext"), ("ELTEX-FXS72", "tauDialRegularOn"), ("ELTEX-FXS72", "tauDialRegularProtocol"), ("ELTEX-FXS72", "tauDialRegularText"), ("ELTEX-FXS72", "fxsConfigSave"), ("ELTEX-FXS72", "fxsConfigApply"), ("ELTEX-FXS72", "fxsSerialGroupsMIBBoundary"), ("ELTEX-FXS72", "fxsSerialGroupsPhone"), ("ELTEX-FXS72", "fxsSerialGroupsEnabled"), ("ELTEX-FXS72", "fxsSerialGroupsSerialType"), ("ELTEX-FXS72", "fxsSerialGroupsBusyType"), ("ELTEX-FXS72", "fxsSerialGroupsTimeout"), ("ELTEX-FXS72", "fxsSerialGroupsSipPort"), ("ELTEX-FXS72", "fxsSerialGroupsAuthName"), ("ELTEX-FXS72", "fxsSerialGroupsAuthPass"), ("ELTEX-FXS72", "fxsSerialGroupsPorts"), ("ELTEX-FXS72", "fxsSerialGroupsRowStatus"), ("ELTEX-FXS72", "fxsSerialGroupsSipProfile"), ("ELTEX-FXS72", "fxsSerialGroupsNextEmpty"), ("ELTEX-FXS72", "fxsReboot"), ("ELTEX-FXS72", "tauVoipDvoCallwaiting"), ("ELTEX-FXS72", "tauVoipDvoCtAttended"), ("ELTEX-FXS72", "tauVoipDvoCtUnattended"), ("ELTEX-FXS72", "tauVoipDvoCfUnconditional"), ("ELTEX-FXS72", "tauVoipDvoCfBusy"), ("ELTEX-FXS72", "tauVoipDvoCfNoanswer"), ("ELTEX-FXS72", "tauVoipDvoCfService"), ("ELTEX-FXS72", "tauVoipDvoDoDisturb"), ("ELTEX-FXS72", "sipEnablesip"), ("ELTEX-FXS72", "sipObtimeout"), ("ELTEX-FXS72", "sipMode"), ("ELTEX-FXS72", "sipOptions"), ("ELTEX-FXS72", "sipKeepalivet"), ("ELTEX-FXS72", "sipDomainToReg"), ("ELTEX-FXS72", "sipDomain"), ("ELTEX-FXS72", "sipRegisterRetryInterval"), ("ELTEX-FXS72", "sipOutbound"), ("ELTEX-FXS72", "sipInboundProxy"), ("ELTEX-FXS72", "sipExpires"), ("ELTEX-FXS72", "sipAuthentication"), ("ELTEX-FXS72", "sipUsername"), ("ELTEX-FXS72", "sipPassword"), ("ELTEX-FXS72", "sipProxy0"), ("ELTEX-FXS72", "sipRegrar0"), ("ELTEX-FXS72", "sipRegistration0"), ("ELTEX-FXS72", "sipProxy1"), ("ELTEX-FXS72", "sipRegrar1"), ("ELTEX-FXS72", "sipProxy2"), ("ELTEX-FXS72", "sipRegrar2"), ("ELTEX-FXS72", "sipProxy3"), ("ELTEX-FXS72", "sipRegrar3"), ("ELTEX-FXS72", "sipProxy4"), ("ELTEX-FXS72", "sipRegrar4"), ("ELTEX-FXS72", "sipDtmfmime"), ("ELTEX-FXS72", "sipHfmime"), ("ELTEX-FXS72", "sipCtWithReplaces"), ("ELTEX-FXS72", "sipShortmode"), ("ELTEX-FXS72", "sipTransport"), ("ELTEX-FXS72", "sipSipMtu"), ("ELTEX-FXS72", "sip100Rel"), ("ELTEX-FXS72", "sipUserPhone"), ("ELTEX-FXS72", "sipUriEscapeHash"), ("ELTEX-FXS72", "sipInviteTotalT"), ("ELTEX-FXS72", "sipInviteInitT"), ("ELTEX-FXS72", "sipCwRingback"), ("ELTEX-FXS72", "sipRingbackSdp"), ("ELTEX-FXS72", "sipRingback"), ("ELTEX-FXS72", "sipRegistration1"), ("ELTEX-FXS72", "sipRegistration2"), ("ELTEX-FXS72", "sipRegistration3"), ("ELTEX-FXS72", "sipRegistration4"), ("ELTEX-FXS72", "sipPRTPstat"), ("ELTEX-FXS72", "termID"), ("ELTEX-FXS72", "currentState"), ("ELTEX-FXS72", "totalCallCount"), ("ELTEX-FXS72", "lastCallPhone"), ("ELTEX-FXS72", "peakJitter"), ("ELTEX-FXS72", "lostPackets"), ("ELTEX-FXS72", "numTxPack"), ("ELTEX-FXS72", "numTxOct"), ("ELTEX-FXS72", "numRxPack"), ("ELTEX-FXS72", "numRxOct"), ("ELTEX-FXS72", "fxsUpdateFw"), ("ELTEX-FXS72", "sipCommonEnablesip"), ("ELTEX-FXS72", "sipCommonShortmode"), ("ELTEX-FXS72", "sipCommonTransport"), ("ELTEX-FXS72", "sipCommonSipMtu"), ("ELTEX-FXS72", "sipCommonInviteTotalT"), ("ELTEX-FXS72", "sipCommonInviteInitT"), ("ELTEX-FXS72", "sipCommonPortRegistrationDelay"), ("ELTEX-FXS72", "profilesSipMIBBoundary"), ("ELTEX-FXS72", "profileNumber"), ("ELTEX-FXS72", "sipProfileObtimeout"), ("ELTEX-FXS72", "sipProfileMode"), ("ELTEX-FXS72", "sipProfileOptions"), ("ELTEX-FXS72", "sipProfileKeepalivet"), ("ELTEX-FXS72", "sipProfileDomainToReg"), ("ELTEX-FXS72", "sipProfileRegisterRetryInterval")], [("ELTEX-FXS72", "sipProfileOutbound"), ("ELTEX-FXS72", "sipProfileInboundProxy"), ("ELTEX-FXS72", "sipProfileExpires"), ("ELTEX-FXS72", "sipProfileAuthentication"), ("ELTEX-FXS72", "sipProfileUsername"), ("ELTEX-FXS72", "sipProfilePassword"), ("ELTEX-FXS72", "sipProfileProxy0"), ("ELTEX-FXS72", "sipProfileRegrar0"), ("ELTEX-FXS72", "sipProfileRegistration0"), ("ELTEX-FXS72", "sipProfileProxy1"), ("ELTEX-FXS72", "sipProfileRegrar1"), ("ELTEX-FXS72", "sipProfileProxy2"), ("ELTEX-FXS72", "sipProfileRegrar2"), ("ELTEX-FXS72", "sipProfileProxy3"), ("ELTEX-FXS72", "sipProfileRegrar3"), ("ELTEX-FXS72", "sipProfileProxy4"), ("ELTEX-FXS72", "sipProfileRegrar4"), ("ELTEX-FXS72", "sipProfileDtmfmime"), ("ELTEX-FXS72", "sipProfileHfmime"), ("ELTEX-FXS72", "sipProfileCtWithReplaces"), ("ELTEX-FXS72", "sipProfile100Rel"), ("ELTEX-FXS72", "sipProfileUserPhone"), ("ELTEX-FXS72", "sipProfileUriEscapeHash"), ("ELTEX-FXS72", "sipProfileCwRingback"), ("ELTEX-FXS72", "sipProfileRingbackSdp"), ("ELTEX-FXS72", "sipProfileRingback"), ("ELTEX-FXS72", "sipProfileRegistration1"), ("ELTEX-FXS72", "sipProfileRegistration2"), ("ELTEX-FXS72", "sipProfileRegistration3"), ("ELTEX-FXS72", "sipProfileRegistration4"), ("ELTEX-FXS72", "sipProfilePRTPstat"), ("ELTEX-FXS72", "sipProfileRowStatus"), ("ELTEX-FXS72", "sipProfileDomain"), ("ELTEX-FXS72", "sipProfileEnableTimer"), ("ELTEX-FXS72", "sipProfileMinSE"), ("ELTEX-FXS72", "sipProfileSessionExpires"), ("ELTEX-FXS72", "sipProfileRemoveInactiveMedia"), ("ELTEX-FXS72", "sipProfileKeepAliveInterval"), ("ELTEX-FXS72", "sipProfileKeepAliveMode"), ("ELTEX-FXS72", "sipProfileConferenceMode"), ("ELTEX-FXS72", "sipProfileConferenceServer"), ("ELTEX-FXS72", "sipProfileEnableIMS"), ("ELTEX-FXS72", "sipProfileXCAPNameForThreePartyConference"), ("ELTEX-FXS72", "sipProfileXCAPNameForHotline"), ("ELTEX-FXS72", "sipProfileXCAPNameForCallWaiting"), ("ELTEX-FXS72", "sipProfileXCAPNameForCallHold"), ("ELTEX-FXS72", "sipProfileXCAPNameForExplicitCallTransfer"), ("ELTEX-FXS72", "sipProfileUseAlertInfo"), ("ELTEX-FXS72", "sipProfileFullRuriCompliance"), ("ELTEX-FXS72", "sipProfileChangeover"), ("ELTEX-FXS72", "profilesPortsMIBBoundary"), ("ELTEX-FXS72", "profilePortsPlaymoh"), ("ELTEX-FXS72", "profilePortsAON"), ("ELTEX-FXS72", "profilePortsAONHideDate"), ("ELTEX-FXS72", "profilePortsAONHideName"), ("ELTEX-FXS72", "profilePortsTaxophone"), ("ELTEX-FXS72", "profilePortsMinFlashtime"), ("ELTEX-FXS72", "profilePortsMaxFlashtime"), ("ELTEX-FXS72", "profilePortsGainr"), ("ELTEX-FXS72", "profilePortsGaint"), ("ELTEX-FXS72", "profilePortsCategory"), ("ELTEX-FXS72", "profilePortsCallTransfer"), ("ELTEX-FXS72", "profilePortsCallWaiting"), ("ELTEX-FXS72", "profilePortsCfgPriOverCw"), ("ELTEX-FXS72", "profilePortsFxoFlashTime"), ("ELTEX-FXS72", "profilePortsFxoDelTdm"), ("ELTEX-FXS72", "profilePortsFxoRingtdm"), ("ELTEX-FXS72", "profilePortsPstnNumberprefix"), ("ELTEX-FXS72", "profilePortsPstnNameprefix"), ("ELTEX-FXS72", "profilePortsUsePstnCid"), ("ELTEX-FXS72", "profilePortsEnableCpc"), ("ELTEX-FXS72", "profilePortsCpcTime"), ("ELTEX-FXS72", "profilePortsDontDetectDT"), ("ELTEX-FXS72", "profilePortsDelayDialingTimeout"), ("ELTEX-FXS72", "profilePortsDialing"), ("ELTEX-FXS72", "profilePortsTransmitNumber"), ("ELTEX-FXS72", "profilePortsDontTransmitPrefix"), ("ELTEX-FXS72", "profilePortsRowStatus"), ("ELTEX-FXS72", "profilePortsDialToneDetectionParameters"), ("ELTEX-FXS72", "profilePortsRingBackToneDetectionParameters"), ("ELTEX-FXS72", "profilePortsBusyToneDetectionParameters"), ("ELTEX-FXS72", "profilePortsDtDetectTime"), ("ELTEX-FXS72", "profilePortsDecadePulseTime"), ("ELTEX-FXS72", "profilePortsDecadePauseTime"), ("ELTEX-FXS72", "profilePortsFxoCallBusy"), ("ELTEX-FXS72", "profilePortsCpcRus"), ("ELTEX-FXS72", "profilePortsReversalPolarityAction"), ("ELTEX-FXS72", "profilePortsPstnActivity"), ("ELTEX-FXS72", "profilePortsPstnRbDetectTimeout"), ("ELTEX-FXS72", "profilePortsDetectFxoLinePresence"), ("ELTEX-FXS72", "profilePortsBlockFxoLineInOutgoingDirection"), ("ELTEX-FXS72", "profilePortsStopDial"), ("ELTEX-FXS72", "profilePortsFxoMinLevelDetect"), ("ELTEX-FXS72", "profilePortsModifier"), ("ELTEX-FXS72", "profilesDialPlansMIBBoundary"), ("ELTEX-FXS72", "profileDialPlanHost"), ("ELTEX-FXS72", "profileDialPlanDigits"), ("ELTEX-FXS72", "profileDialPlanTimeout"), ("ELTEX-FXS72", "profileDialPlanMinDigits"), ("ELTEX-FXS72", "profileDialPlanType"), ("ELTEX-FXS72", "profileDialPlanAccessMask"), ("ELTEX-FXS72", "profileDialPlanDialtone"), ("ELTEX-FXS72", "profileDialPlanModifier"), ("ELTEX-FXS72", "profileDialPlanNature"), ("ELTEX-FXS72", "profileDialPlanDelnum"), ("ELTEX-FXS72", "profileDialPlanPtime"), ("ELTEX-FXS72", "profileDialRowStatus"), ("ELTEX-FXS72", "profilesRegExpDPTableMIBBoundary"), ("ELTEX-FXS72", "profileRegExpDialOn"), ("ELTEX-FXS72", "profileRegExpDialProtocol"), ("ELTEX-FXS72", "profileRegExpDialText"), ("ELTEX-FXS72", "profileRegExpDialRowStatus"), ("ELTEX-FXS72", "useG711A"), ("ELTEX-FXS72", "useG711U"), ("ELTEX-FXS72", "useG726to32"), ("ELTEX-FXS72", "useG723"), ("ELTEX-FXS72", "useG729B"), ("ELTEX-FXS72", "useG729A"), ("ELTEX-FXS72", "g711Ptime"), ("ELTEX-FXS72", "g729Ptime"), ("ELTEX-FXS72", "g723Ptime"), ("ELTEX-FXS72", "g726to32Ptime"), ("ELTEX-FXS72", "g726to32PT"), ("ELTEX-FXS72", "dtmfTransfer"), ("ELTEX-FXS72", "flashTransfer"), ("ELTEX-FXS72", "faxDetectDirection"), ("ELTEX-FXS72", "faxTransferCodec"), ("ELTEX-FXS72", "slaveFaxTransferCodec"), ("ELTEX-FXS72", "modemTransfer"), ("ELTEX-FXS72", "rfc2833PT"), ("ELTEX-FXS72", "silenceSuppression"), ("ELTEX-FXS72", "echoCanceller"), ("ELTEX-FXS72", "nlpDisable"), ("ELTEX-FXS72", "comfortNoise"), ("ELTEX-FXS72", "rtcpTimer"), ("ELTEX-FXS72", "rtcpControlPeriod"), ("ELTEX-FXS72", "ciscoNsePT"), ("ELTEX-FXS72", "t38MaxDatagramSize"), ("ELTEX-FXS72", "t38Bitrate"), ("ELTEX-FXS72", "modemFaxDelay"), ("ELTEX-FXS72", "voiceMode"), ("ELTEX-FXS72", "voiceDelayMin"), ("ELTEX-FXS72", "voiceDelayMax"), ("ELTEX-FXS72", "voiceDeletionThreshold"), ("ELTEX-FXS72", "voiceDeletionMode"), ("ELTEX-FXS72", "profilesCodecsRowStatus"), ("ELTEX-FXS72", "rtcpXR"), ("ELTEX-FXS72", "rfc3264PtCommon"), ("ELTEX-FXS72", "tauTrapSink"), ("ELTEX-FXS72", "tauTrapType"), ("ELTEX-FXS72", "tauSysName"), ("ELTEX-FXS72", "tauSysContact"), ("ELTEX-FXS72", "tauSysLocation"), ("ELTEX-FXS72", "tauRoCommunity"), ("ELTEX-FXS72", "tauRwCommunity"), ("ELTEX-FXS72", "tauTrapCommunity"), ("ELTEX-FXS72", "tauUserV3Name"), ("ELTEX-FXS72", "tauUserV3Password"), ("ELTEX-FXS72", "tauViewV3Type"), ("ELTEX-FXS72", "tauRestartSnmp"), ("ELTEX-FXS72", "tauMegacoTrapType"), ("ELTEX-FXS72", "tauMegacoTrapHost"), ("ELTEX-FXS72", "tauMegacoTrapCommunity"), ("ELTEX-FXS72", "tauMegacoTrapPort"), ("ELTEX-FXS72", "tauMegacoTrapRowStatus"), ("ELTEX-FXS72", "fxoSerialGroupsPhone"), ("ELTEX-FXS72", "fxoSerialGroupsEnabled"), ("ELTEX-FXS72", "fxoSerialGroupsBusyType"), ("ELTEX-FXS72", "fxoSerialGroupsSipPort"), ("ELTEX-FXS72", "fxoSerialGroupsAuthName"), ("ELTEX-FXS72", "fxoSerialGroupsAuthPass"), ("ELTEX-FXS72", "fxoSerialGroupsPorts"), ("ELTEX-FXS72", "fxoSerialGroupsSipProfile"), ("ELTEX-FXS72", "fxoSerialGroupsTransmitNumber"), ("ELTEX-FXS72", "fxoSerialGroupsDontTransmitPrefix"), ("ELTEX-FXS72", "fxoSerialGroupsRowStatus"), ("ELTEX-FXS72", "fxoSerialGroupsSend503OnBusy"), ("ELTEX-FXS72", "fxoSerialGroupsType"), ("ELTEX-FXS72", "fxsEnableAutoupdate"), ("ELTEX-FXS72", "fxsSource"), ("ELTEX-FXS72", "fxsTFTPServer"), ("ELTEX-FXS72", "fxsConfigurationFile"), ("ELTEX-FXS72", "fxsFirmwareVersion"), ("ELTEX-FXS72", "fxsConfigurationUpdateInterval"), ("ELTEX-FXS72", "fxsFirmwareUpdateInterval"), ("ELTEX-FXS72", "autoupdateProtocol"), ("ELTEX-FXS72", "autoupdateAuth"), ("ELTEX-FXS72", "autoupdateUser"), ("ELTEX-FXS72", "autoupdatePassword"), ("ELTEX-FXS72", "fansForceEnable"), ("ELTEX-FXS72", "fansThresholdTemperature"), ("ELTEX-FXS72", "runSyslog"), ("ELTEX-FXS72", "syslogAddr"), ("ELTEX-FXS72", "syslogPort"), ("ELTEX-FXS72", "appAlarm"), ("ELTEX-FXS72", "appErr"), ("ELTEX-FXS72", "appWarn"), ("ELTEX-FXS72", "appInfo"), ("ELTEX-FXS72", "appDbg"), ("ELTEX-FXS72", "sipLevel"), ("ELTEX-FXS72", "h323Level"), ("ELTEX-FXS72", "vapiEnabled"), ("ELTEX-FXS72", "vapiLibLevel"), ("ELTEX-FXS72", "vapiAppLevel"), ("ELTEX-FXS72", "portTestTestStatus"), ("ELTEX-FXS72", "portTestTestStartTime"), ("ELTEX-FXS72", "portTestLastTestStartTime"), ("ELTEX-FXS72", "portTestLastTestEndTime"), ("ELTEX-FXS72", "portTestResultFlag"), ("ELTEX-FXS72", "portTestRingU"), ("ELTEX-FXS72", "portTestTipU"), ("ELTEX-FXS72", "portTestShortVbat"), ("ELTEX-FXS72", "portTestResistTr"), ("ELTEX-FXS72", "portTestResistTg"), ("ELTEX-FXS72", "portTestResistRg"), ("ELTEX-FXS72", "portTestCapacityTr"), ("ELTEX-FXS72", "portTestCapacityTg"), ("ELTEX-FXS72", "portTestCapacityRg"), ("ELTEX-FXS72", "portTestRunTest"), ("ELTEX-FXS72", "monitorSerialGroupsMIBBoundary"), ("ELTEX-FXS72", "serialGroupPhone"), ("ELTEX-FXS72", "serialGroupRegistrationState"), ("ELTEX-FXS72", "serialGroupRegistrationHost"), ("ELTEX-FXS72", "serialGroupLastRegistrationAt"), ("ELTEX-FXS72", "serialGroupNextRegistrationAfter"), ("ELTEX-FXS72", "serialGroupH323GK"), ("ELTEX-FXS72", "fxoGroupPhone"), ("ELTEX-FXS72", "fxoGroupRegistrationState"), ("ELTEX-FXS72", "fxoGroupRegistrationHost"), ("ELTEX-FXS72", "fxoGroupLastRegistrationAt"), ("ELTEX-FXS72", "fxoGroupNextRegistrationAfter"), ("ELTEX-FXS72", "fxoGroupH323GK"), ("ELTEX-FXS72", "firewallTableMIBBoundary"), ("ELTEX-FXS72", "startingSourceIpAddress"), ("ELTEX-FXS72", "numberOfSourceIpAddresses"), ("ELTEX-FXS72", "allSourceIpAddresses"), ("ELTEX-FXS72", "ruleprotocol"), ("ELTEX-FXS72", "typeOfMessageICMP"), ("ELTEX-FXS72", "startingSourcePort"), ("ELTEX-FXS72", "numberOfSourcePorts"), ("ELTEX-FXS72", "allSourcePorts"), ("ELTEX-FXS72", "startingDestinationPort"), ("ELTEX-FXS72", "numberOfDestinationPorts"), ("ELTEX-FXS72", "allDestinationPorts"), ("ELTEX-FXS72", "ruleTarget"), ("ELTEX-FXS72", "ruleMoveTo"), ("ELTEX-FXS72", "ruleRowStatus"), ("ELTEX-FXS72", "firewallApply"), ("ELTEX-FXS72", "firewallConfirm"), ("ELTEX-FXS72", "megacoPortTerminationID"), ("ELTEX-FXS72", "megacoPortState"), ("ELTEX-FXS72", "megacoPortComments"), ("ELTEX-FXS72", "megacoPortStateStartTime"), ("ELTEX-FXS72", "megacoPortStateDuration"), ("ELTEX-FXS72", "megacoPortJitter")], [("ELTEX-FXS72", "megacoPortTelNo"), ("ELTEX-FXS72", "deviceName"), ("ELTEX-FXS72", "startTimer"), ("ELTEX-FXS72", "durationTimer"), ("ELTEX-FXS72", "waitAnswerTimer"), ("ELTEX-FXS72", "powerMode"), ("ELTEX-FXS72", "siptUsePrefix"), ("ELTEX-FXS72", "siptPrefix"), ("ELTEX-FXS72", "rtpSipMin"), ("ELTEX-FXS72", "rtpSipMax"), ("ELTEX-FXS72", "interceptPortMin"), ("ELTEX-FXS72", "interceptPortMax"), ("ELTEX-FXS72", "diffservForSip"), ("ELTEX-FXS72", "diffservForRtp"), ("ELTEX-FXS72", "verifyRemoteMediaAddress"), ("ELTEX-FXS72", "clType"), ("ELTEX-FXS72", "clHostOfNeighbourGateway"), ("ELTEX-FXS72", "clSimultaneousCallsCount"), ("ELTEX-FXS72", "clRowStatus"), ("ELTEX-FXS72", "drRule"), ("ELTEX-FXS72", "drRing"), ("ELTEX-FXS72", "drPause"), ("ELTEX-FXS72", "drSubscriberProfiles"), ("ELTEX-FXS72", "drRowStatus"), ("ELTEX-FXS72", "profilesSipAlertInfoMIBBoundary"), ("ELTEX-FXS72", "cadenceName"), ("ELTEX-FXS72", "cadenceRingRule"), ("ELTEX-FXS72", "cadenceRowStatus"), ("ELTEX-FXS72", "stunEnable"), ("ELTEX-FXS72", "stunServer"), ("ELTEX-FXS72", "stunInterval"), ("ELTEX-FXS72", "sipPublicIp"), ("ELTEX-FXS72", "modifierDialedNumberRegexpRule"), ("ELTEX-FXS72", "modifierDialedNumberModification"), ("ELTEX-FXS72", "modifierCallingNumberModification"), ("ELTEX-FXS72", "modifierRowStatus")]]:
    if getattr(mibBuilder, 'version', 0) < (4, 4, 2):
        # WARNING: leading objects get lost here!
        fxsGroup = fxsGroup.setObjects(*_fxsGroup_obj)
    else:
        fxsGroup = fxsGroup.setObjects(*_fxsGroup_obj, **dict(append=True))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    fxsGroup = fxsGroup.setStatus('current')
mibBuilder.exportSymbols("ELTEX-FXS72", fxsPortConfigRowStatus=fxsPortConfigRowStatus, fxsPortConfigCommonGainr=fxsPortConfigCommonGainr, fxsPortConfigCommonCfgPriOverCw=fxsPortConfigCommonCfgPriOverCw, FxsToneParametrs=FxsToneParametrs, profilesDialPlans=profilesDialPlans, ruleNumber=ruleNumber, fxsPortConfigCommonCallWaiting=fxsPortConfigCommonCallWaiting, voiceDelayMin=voiceDelayMin, tauVoipDvoCfService=tauVoipDvoCfService, powerMode=powerMode, sipProfileRegrar1=sipProfileRegrar1, sipDtmfmime=sipDtmfmime, fxsDialPlanPtime=fxsDialPlanPtime, DRSubscriberProfilesType=DRSubscriberProfilesType, sipProfileKeepalivet=sipProfileKeepalivet, OutboundType=OutboundType, profilePortsMinFlashtime=profilePortsMinFlashtime, fxsPortsConfigEntry=fxsPortsConfigEntry, fxsPortTalkingNum=fxsPortTalkingNum, profileNumber=profileNumber, fxsConfigSave=fxsConfigSave, profilesDialPlansTable=profilesDialPlansTable, megacoPortTelNo=megacoPortTelNo, serialGroupNumber=serialGroupNumber, sipExpires=sipExpires, sipCommonShortmode=sipCommonShortmode, appWarn=appWarn, megacoPortsMonitoringTable=megacoPortsMonitoringTable, fxsSerialGroupsSerialType=fxsSerialGroupsSerialType, tauDialRegularProtocol=tauDialRegularProtocol, fxsPortConfigCustom=fxsPortConfigCustom, firewallApply=firewallApply, sipUsername=sipUsername, diffservForSip=diffservForSip, tau72sip=tau72sip, portTestLastTestEndTime=portTestLastTestEndTime, sipCtWithReplaces=sipCtWithReplaces, fxsPortConfigCpcTime=fxsPortConfigCpcTime, cadenceNumber=cadenceNumber, runSyslog=runSyslog, profilePortsEnableCpc=profilePortsEnableCpc, fxsSerialGroupsMIBBoundary=fxsSerialGroupsMIBBoundary, fxsPortConfigGaint=fxsPortConfigGaint, fxsDialPlanHost=fxsDialPlanHost, sipProfileExpires=sipProfileExpires, ciscoNsePT=ciscoNsePT, fxsPortConfigUsePstnCid=fxsPortConfigUsePstnCid, appErr=appErr, profileDialPlanHost=profileDialPlanHost, megacoPortNumber=megacoPortNumber, fxsPortConfigDvoCfBusyEn=fxsPortConfigDvoCfBusyEn, clIndex=clIndex, tauSubtypes=tauSubtypes, sipProfileRingback=sipProfileRingback, monitorSerialGroupsTable=monitorSerialGroupsTable, sipRegrar3=sipRegrar3, distinctiveRingEntry=distinctiveRingEntry, KeepAliveMode=KeepAliveMode, sipProfileEnableIMS=sipProfileEnableIMS, allSourceIpAddresses=allSourceIpAddresses, profilesRegExpDPTableMIBBoundary=profilesRegExpDPTableMIBBoundary, tauTrapType=tauTrapType, tauVoipDvoCfUnconditional=tauVoipDvoCfUnconditional, tauVoipDvo=tauVoipDvo, profilePortsCallTransfer=profilePortsCallTransfer, fxsPortConfigCommonCallTransfer=fxsPortConfigCommonCallTransfer, sipPublicIp=sipPublicIp, tauSnmpConfiguration=tauSnmpConfiguration, profilePortsGainr=profilePortsGainr, fxoSerialGroupsEntry=fxoSerialGroupsEntry, configTcpIp=configTcpIp, TauDialProtocolType=TauDialProtocolType, CallLimitType=CallLimitType, fxsPortConfigUserName=fxsPortConfigUserName, fxsMonitoringTemp1=fxsMonitoringTemp1, fxoGroupRegistrationHost=fxoGroupRegistrationHost, tau36megaco=tau36megaco, sipProfileDomain=sipProfileDomain, sipProfileRegrar3=sipProfileRegrar3, fxsPortSipConnected=fxsPortSipConnected, fxsPortsConfigTable=fxsPortsConfigTable, sipProfileRowStatus=sipProfileRowStatus, profilesCodecsEntry=profilesCodecsEntry, profileRegExpDialRowStatus=profileRegExpDialRowStatus, vapiAppLevel=vapiAppLevel, sipRegistration4=sipRegistration4, tauVoipDvoCallwaiting=tauVoipDvoCallwaiting, TypeOfMessageICMP=TypeOfMessageICMP, AuthenticationType=AuthenticationType, fxsDialPlanAccessMask=fxsDialPlanAccessMask, FxsPortTestFlag=FxsPortTestFlag, sipProxy0=sipProxy0, fxsDialPlanNumber=fxsDialPlanNumber, monitorSerialGroupsEntry=monitorSerialGroupsEntry, useG729B=useG729B, fxsPortConfigPstnNumberprefix=fxsPortConfigPstnNumberprefix, tau72v40megaco=tau72v40megaco, tauSysContact=tauSysContact, fxsPortConfigStopDial=fxsPortConfigStopDial, sipDomainToReg=sipDomainToReg, g726to32Ptime=g726to32Ptime, sipProfileMode=sipProfileMode, slaveFaxTransferCodec=slaveFaxTransferCodec, sipProfileOutbound=sipProfileOutbound, sipCommonInviteInitT=sipCommonInviteInitT, profilesSipAlertInfoMIBBoundary=profilesSipAlertInfoMIBBoundary, sipAuthentication=sipAuthentication, fxsSerialGroupsAuthName=fxsSerialGroupsAuthName, fxsDialMIBBoundary=fxsDialMIBBoundary, SipConnectState=SipConnectState, fxsPortConfigHotTimeout=fxsPortConfigHotTimeout, tau36v40megaco=tau36v40megaco, SipLogLevel=SipLogLevel, TauVoiceModeType=TauVoiceModeType, fxsPortUserName=fxsPortUserName, interceptPortMin=interceptPortMin, PstnActivityType=PstnActivityType, termID=termID, fxoGroupRegistrationState=fxoGroupRegistrationState, profileDialPlanAccessMask=profileDialPlanAccessMask, tauMegacoTrapCommunity=tauMegacoTrapCommunity, fxsFreeRam=fxsFreeRam, fxsPortConfigHotLine=fxsPortConfigHotLine, sipProfileRegistration0=sipProfileRegistration0, sipProfileConferenceMode=sipProfileConferenceMode, sipProfileChangeover=sipProfileChangeover, profilePortsDialing=profilePortsDialing, sipRingback=sipRingback, fxsPortNumber=fxsPortNumber, tauMegacoTrapPort=tauMegacoTrapPort, profileDialPlanMinDigits=profileDialPlanMinDigits, serialGroupNextRegistrationAfter=serialGroupNextRegistrationAfter, TauUserViewType=TauUserViewType, vapiLibLevel=vapiLibLevel, FxsNetworkAutoupdateSourceType=FxsNetworkAutoupdateSourceType, modifierDialedNumberModification=modifierDialedNumberModification, sipProfileXCAPNameForCallWaiting=sipProfileXCAPNameForCallWaiting, fxoGroupNumber=fxoGroupNumber, sipProfileUserPhone=sipProfileUserPhone, sipRegrar1=sipRegrar1, stunServer=stunServer, portTestResistTr=portTestResistTr, fxsMonitoringVRing2=fxsMonitoringVRing2, profileRegExpDialOn=profileRegExpDialOn, sipCommonSipMtu=sipCommonSipMtu, fxsPortConfigCommonDialing=fxsPortConfigCommonDialing, fxsPortConfigCfuNumber=fxsPortConfigCfuNumber, fxsPortConfigDecadePauseTime=fxsPortConfigDecadePauseTime, fxsConfigurationFile=fxsConfigurationFile, DevTypeString=DevTypeString, sipRegistration0=sipRegistration0, fxoSerialGroupsPorts=fxoSerialGroupsPorts, fxsPortConfigDontDetectDT=fxsPortConfigDontDetectDT, profileDialPlanDelnum=profileDialPlanDelnum, modifiersEntry=modifiersEntry, profilePortsPstnRbDetectTimeout=profilePortsPstnRbDetectTimeout, sipOutbound=sipOutbound, tauTrapCommunity=tauTrapCommunity, sipEnablesip=sipEnablesip, profileDialPlanPtime=profileDialPlanPtime, numRxPack=numRxPack, profilePortsFxoMinLevelDetect=profilePortsFxoMinLevelDetect, dtmfTransfer=dtmfTransfer, fxsPortConfigEnableCpc=fxsPortConfigEnableCpc, sipLevel=sipLevel, profileDialRowStatus=profileDialRowStatus, voiceMode=voiceMode, fxsPortConfigCtNumber=fxsPortConfigCtNumber, profileDialPlanType=profileDialPlanType, megacoPortComments=megacoPortComments, tau36sip=tau36sip, profilePortsDialToneDetectionParameters=profilePortsDialToneDetectionParameters, SipProfileChangeoverType=SipProfileChangeoverType, autoupdateUser=autoupdateUser, sipProfileRemoveInactiveMedia=sipProfileRemoveInactiveMedia, fxsTFTPServer=fxsTFTPServer, durationTimer=durationTimer, fxoGroupNextRegistrationAfter=fxoGroupNextRegistrationAfter, profilePortsBlockFxoLineInOutgoingDirection=profilePortsBlockFxoLineInOutgoingDirection, appAlarm=appAlarm, sipProfileXCAPNameForCallHold=sipProfileXCAPNameForCallHold, fxsPortConfigCommonDelayDialingTimeout=fxsPortConfigCommonDelayDialingTimeout, tauVoipDvoCtUnattended=tauVoipDvoCtUnattended, verifyRemoteMediaAddress=verifyRemoteMediaAddress, sipProfileXCAPNameForThreePartyConference=sipProfileXCAPNameForThreePartyConference, ruleTarget=ruleTarget, ProxyMode=ProxyMode, TauFlashTransferType=TauFlashTransferType, voiceDeletionThreshold=voiceDeletionThreshold, fxoSerialGroupsEnabled=fxoSerialGroupsEnabled, megacoPortStateStartTime=megacoPortStateStartTime, VoltageMode=VoltageMode, profilePortsBusyToneDetectionParameters=profilePortsBusyToneDetectionParameters, fxsMonitoringFan1Rotate=fxsMonitoringFan1Rotate, fxsPortConfigCtBusy=fxsPortConfigCtBusy, drId=drId, tauVoipDvoDoDisturb=tauVoipDvoDoDisturb, fxoSerialGroupsTransmitNumber=fxoSerialGroupsTransmitNumber, fxsFirmwareUpdateInterval=fxsFirmwareUpdateInterval, sipProfileProxy0=sipProfileProxy0, tauMegacoTrapsEntry=tauMegacoTrapsEntry, BoolValue=BoolValue, profilePortsCpcRus=profilePortsCpcRus, fxsDialPlanDialtone=fxsDialPlanDialtone, tauDialRegularText=tauDialRegularText, profilePortsTaxophone=profilePortsTaxophone, sipProfileRegisterRetryInterval=sipProfileRegisterRetryInterval, TypeTransport=TypeTransport, FxsPortState=FxsPortState, sipProfileCtWithReplaces=sipProfileCtWithReplaces, tau32Msip=tau32Msip, fxsPortConfigPlaymoh=fxsPortConfigPlaymoh, sipProfileDtmfmime=sipProfileDtmfmime, fxoSerialGroupsBusyType=fxoSerialGroupsBusyType, fxsPortConfigDvoCtUnattendedEn=fxsPortConfigDvoCtUnattendedEn, fxsDialPlanNext=fxsDialPlanNext, sipRegisterRetryInterval=sipRegisterRetryInterval, portTestTestStartTime=portTestTestStartTime, fxsSerialGroupsAuthPass=fxsSerialGroupsAuthPass, sipCommonInviteTotalT=sipCommonInviteTotalT, FxsDialPlanType=FxsDialPlanType, fxsPortType=fxsPortType, sipProfilePRTPstat=sipProfilePRTPstat, TauMegacoTrapVersion=TauMegacoTrapVersion, sipProfileEnableTimer=sipProfileEnableTimer, fxsGroup=fxsGroup, modemTransfer=modemTransfer, fxsPortTalkingStartTime=fxsPortTalkingStartTime, rtpSipMax=rtpSipMax, fxoGroupLastRegistrationAt=fxoGroupLastRegistrationAt, fxsMonitoringTemp3=fxsMonitoringTemp3, tauMegacoTrapId=tauMegacoTrapId, sipHfmime=sipHfmime, clSimultaneousCallsCount=clSimultaneousCallsCount, fxsMonitoringSubCooling=fxsMonitoringSubCooling, profilesDialPlansEntry=profilesDialPlansEntry, profileDialPlanNumber=profileDialPlanNumber, profileDialPlanDialtone=profileDialPlanDialtone, fxsPortConfigCommonAON=fxsPortConfigCommonAON, DevPowerType=DevPowerType, profilePortsFxoFlashTime=profilePortsFxoFlashTime, fxsPortConfigAuthName=fxsPortConfigAuthName, FxoGroupType=FxoGroupType, FxoGroupBusyType=FxoGroupBusyType, sipProfileXCAPNameForHotline=sipProfileXCAPNameForHotline, fxsPortConfigMaxFlashtime=fxsPortConfigMaxFlashtime, fxsEnableAutoupdate=fxsEnableAutoupdate, profilePortsMaxFlashtime=profilePortsMaxFlashtime, profilePortsFxoCallBusy=profilePortsFxoCallBusy, sipProxy1=sipProxy1, numRxOct=numRxOct, fxoSerialGroupsPhone=fxoSerialGroupsPhone, sipProfileDomainToReg=sipProfileDomainToReg, profilePortsFxoRingtdm=profilePortsFxoRingtdm)
mibBuilder.exportSymbols("ELTEX-FXS72", fxsPortConfigPickUp=fxsPortConfigPickUp, profileDialPlanTimeout=profileDialPlanTimeout, FxsPortTestStatus=FxsPortTestStatus, fxsPortConfigCommonPstnNameprefix=fxsPortConfigCommonPstnNameprefix, sipRegistration3=sipRegistration3, fxsSerialGroupsPorts=fxsSerialGroupsPorts, siptUsePrefix=siptUsePrefix, serialGroupPhone=serialGroupPhone, allSourcePorts=allSourcePorts, tauVoipDvoCtAttended=tauVoipDvoCtAttended, profileDialPlanDigits=profileDialPlanDigits, fxsPortH323Connected=fxsPortH323Connected, fxsPortConfigModifier=fxsPortConfigModifier, interceptPortMax=interceptPortMax, fxsPortConfigCfoosNumber=fxsPortConfigCfoosNumber, waitAnswerTimer=waitAnswerTimer, sipCommonEnablesip=sipCommonEnablesip, sipProfileRegrar0=sipProfileRegrar0, Type100rel=Type100rel, megacoPortJitter=megacoPortJitter, profilePortsCpcTime=profilePortsCpcTime, sipProfileXCAPNameForExplicitCallTransfer=sipProfileXCAPNameForExplicitCallTransfer, fxsSSwStatusTime=fxsSSwStatusTime, tauRwCommunity=tauRwCommunity, fansThresholdTemperature=fansThresholdTemperature, profilePortsGaint=profilePortsGaint, sipPassword=sipPassword, fxsPortConfigCommonAONHideDate=fxsPortConfigCommonAONHideDate, rtpSipMin=rtpSipMin, profilePortsCategory=profilePortsCategory, fxsAutoupdateSettings=fxsAutoupdateSettings, totalCallCount=totalCallCount, t38Bitrate=t38Bitrate, sipProfilePassword=sipProfilePassword, sipProfileRegistration4=sipProfileRegistration4, portTestCapacityRg=portTestCapacityRg, portTestResultFlag=portTestResultFlag, profilePortsPlaymoh=profilePortsPlaymoh, autoupdatePassword=autoupdatePassword, fxsPortConfigDnd=fxsPortConfigDnd, fxsUpdateFw=fxsUpdateFw, SSwStatusConv=SSwStatusConv, fxsPortConfigCommonDontDetectDT=fxsPortConfigCommonDontDetectDT, tauSysLocation=tauSysLocation, sipProfileRegistration1=sipProfileRegistration1, TauFaxTransferType=TauFaxTransferType, fxsSerialGroupsRowStatus=fxsSerialGroupsRowStatus, sipRegrar4=sipRegrar4, fxsPortsMIBBoundary=fxsPortsMIBBoundary, fxsSerialGroupsPhone=fxsSerialGroupsPhone, fxsProfiles=fxsProfiles, profilesCodecsTable=profilesCodecsTable, profilePortsDecadePulseTime=profilePortsDecadePulseTime, profilePortsUsePstnCid=profilePortsUsePstnCid, fxoGroupPhone=fxoGroupPhone, monitorSerialGroupsMIBBoundary=monitorSerialGroupsMIBBoundary, fxsStatEntry=fxsStatEntry, fxsPortConfigDialToneDetectionParameters=fxsPortConfigDialToneDetectionParameters, useG711U=useG711U, fxsPortConfigGainr=fxsPortConfigGainr, sipProfileOptions=sipProfileOptions, profilePortsFxoDelTdm=profilePortsFxoDelTdm, g726to32PT=g726to32PT, sipRingbackSdp=sipRingbackSdp, TauModemTransferType=TauModemTransferType, TauFaxTransferSlaveType=TauFaxTransferSlaveType, fxsPortConfigtdmhottimeout=fxsPortConfigtdmhottimeout, modifierRowStatus=modifierRowStatus, monitorFxoGroupsEntry=monitorFxoGroupsEntry, startingSourceIpAddress=startingSourceIpAddress, portTestCapacityTr=portTestCapacityTr, tau16megaco=tau16megaco, drSubscriberProfiles=drSubscriberProfiles, fxoSerialGroupsSipProfile=fxoSerialGroupsSipProfile, megacoPortState=megacoPortState, FxsAON=FxsAON, fxsPortConfigFxoRingtdm=fxsPortConfigFxoRingtdm, fxsPortConfigCommonCpcTime=fxsPortConfigCommonCpcTime, sipProfileRingbackSdp=sipProfileRingbackSdp, fxsPortConfigUseAltNumber=fxsPortConfigUseAltNumber, sipProfileHfmime=sipProfileHfmime, fxsDialPlanModifier=fxsDialPlanModifier, profilesSipEntry=profilesSipEntry, fxoSerialGroupsAuthPass=fxoSerialGroupsAuthPass, fxsPortConfigCallWaiting=fxsPortConfigCallWaiting, ruleMoveTo=ruleMoveTo, profileRegExpDialText=profileRegExpDialText, sipProfileUseAlertInfo=sipProfileUseAlertInfo, testPortsTableEntry=testPortsTableEntry, fxsPortConfigPhone=fxsPortConfigPhone, fxsPortConfigCommonTaxophone=fxsPortConfigCommonTaxophone, portTestResistRg=portTestResistRg, fxsMonitoringVRing1=fxsMonitoringVRing1, tauUserV3Password=tauUserV3Password, serialGroupRegistrationState=serialGroupRegistrationState, numberOfDestinationPorts=numberOfDestinationPorts, sipProfileSessionExpires=sipProfileSessionExpires, fxsPortConfigDvoCfServiceEn=fxsPortConfigDvoCfServiceEn, fxsPortConfigCommonFxoDelTdm=fxsPortConfigCommonFxoDelTdm, profilePortsReversalPolarityAction=profilePortsReversalPolarityAction, FirewallTarget=FirewallTarget, tauViewV3Type=tauViewV3Type, useG729A=useG729A, tau72megaco=tau72megaco, megacoPortTerminationID=megacoPortTerminationID, currentState=currentState, serialGroupLastRegistrationAt=serialGroupLastRegistrationAt, profilePortsCallWaiting=profilePortsCallWaiting, profilesPortsTable=profilesPortsTable, sipOptions=sipOptions, ruleRowStatus=ruleRowStatus, fxsPortConfigCtNoanswer=fxsPortConfigCtNoanswer, h323Level=h323Level, fxsPortConfigCallTransfer=fxsPortConfigCallTransfer, fxsDialPlanDigits=fxsDialPlanDigits, firewallConfig=firewallConfig, sipProfileCwRingback=sipProfileCwRingback, cadenceRingRule=cadenceRingRule, modifierDialedNumberRegexpRule=modifierDialedNumberRegexpRule, tauMegacoTrapHost=tauMegacoTrapHost, RemoteRingback=RemoteRingback, fxoSerialGroupsRowStatus=fxoSerialGroupsRowStatus, cadenceRowStatus=cadenceRowStatus, fxsPortConfigDvoUnconditionalEn=fxsPortConfigDvoUnconditionalEn, fxsCpuUsage=fxsCpuUsage, fxsPortConfigCategory=fxsPortConfigCategory, fxsPortConfigCommonAONHideName=fxsPortConfigCommonAONHideName, fxsVoipGeneral=fxsVoipGeneral, sip100Rel=sip100Rel, fxoSerialGroupsAuthName=fxoSerialGroupsAuthName, sipKeepalivet=sipKeepalivet, modifierCallingNumberModification=modifierCallingNumberModification, portTestTestStatus=portTestTestStatus, sipProfileProxy2=sipProfileProxy2, typeOfMessageICMP=typeOfMessageICMP, fxsPortSipConnecteState=fxsPortSipConnecteState, sipSipMtu=sipSipMtu, rfc3264PtCommon=rfc3264PtCommon, PortMegacoJitter=PortMegacoJitter, fxoSerialGroupsSipPort=fxoSerialGroupsSipPort, fxsPortConfigDecadePulseTime=fxsPortConfigDecadePulseTime, callLimitTable=callLimitTable, cadenceName=cadenceName, FxsProcessFlashType=FxsProcessFlashType, TauFaxDirectionType=TauFaxDirectionType, fxsPortConfigCommonCategory=fxsPortConfigCommonCategory, sipRegrar2=sipRegrar2, fxsPortsMonitoringEntry=fxsPortsMonitoringEntry, testPortsTable=testPortsTable, serialGroupRegistrationHost=serialGroupRegistrationHost, fxsDialPlanEntry=fxsDialPlanEntry, tau16sip=tau16sip, fxsConfigApply=fxsConfigApply, autoupdateProtocol=autoupdateProtocol, sipProfileAuthentication=sipProfileAuthentication, fxsReboot=fxsReboot, drRule=drRule, tauRoCommunity=tauRoCommunity, fxsDevName=fxsDevName, sipCwRingback=sipCwRingback, fxsMonitoringTemp4=fxsMonitoringTemp4, fxsPortConfigCommonFxoRingtdm=fxsPortConfigCommonFxoRingtdm, sipProxy3=sipProxy3, fxsPortConfigCfgPriOverCw=fxsPortConfigCfgPriOverCw, fxsDialPlanDelnum=fxsDialPlanDelnum, sipProxy2=sipProxy2, tau32Mmegaco=tau32Mmegaco, fxsPortConfigCfbNumber=fxsPortConfigCfbNumber, profilesRegExpDPTable=profilesRegExpDPTable, fxsMonitoringFan2Rotate=fxsMonitoringFan2Rotate, megacoPortStateDuration=megacoPortStateDuration, tau36v30megaco=tau36v30megaco, faxDetectDirection=faxDetectDirection, profilePortsStopDial=profilePortsStopDial, profilesCodecs=profilesCodecs, fxsSerialGroupsNextEmpty=fxsSerialGroupsNextEmpty, PortMegacoState=PortMegacoState, sipProfileProxy1=sipProfileProxy1, fxsPortConfigAuthPass=fxsPortConfigAuthPass, profilePortsDecadePauseTime=profilePortsDecadePauseTime, useG723=useG723, fxsPortConfigPstnActivity=fxsPortConfigPstnActivity, fxsPortConfigDvoCwEn=fxsPortConfigDvoCwEn, fxsPortConfigTransmitNumber=fxsPortConfigTransmitNumber, serialGroupH323GK=serialGroupH323GK, fxsSerialGroupsTimeout=fxsSerialGroupsTimeout, stunInterval=stunInterval, profilePortsDtDetectTime=profilePortsDtDetectTime, profileDialPlanNature=profileDialPlanNature, sipCommonPortRegistrationDelay=sipCommonPortRegistrationDelay, fxoSerialGroupsTable=fxoSerialGroupsTable, peakJitter=peakJitter, autoupdateAuth=autoupdateAuth, sipProxy4=sipProxy4, startingSourcePort=startingSourcePort, fxsPortConfigCommonPlaymoh=fxsPortConfigCommonPlaymoh, GroupRegistrationState=GroupRegistrationState, numberOfSourcePorts=numberOfSourcePorts, fxsDialPlanTable=fxsDialPlanTable, fxsPortPhoneNumber=fxsPortPhoneNumber, profilePortsDontTransmitPrefix=profilePortsDontTransmitPrefix, drPause=drPause, fxsPortConfigTaxophone=fxsPortConfigTaxophone, ConferenceMode=ConferenceMode, sipRegrar0=sipRegrar0, profilesRegExpDPEntry=profilesRegExpDPEntry, VapiLibLogLevel=VapiLibLogLevel, FxoDialingType=FxoDialingType, appDbg=appDbg, IMSMode=IMSMode, fxsPortConfigDvoCtAttendedEn=fxsPortConfigDvoCtAttendedEn, numTxPack=numTxPack, useG726to32=useG726to32, fxsPortConfigReversalPolarityAction=fxsPortConfigReversalPolarityAction, fxsSerialGroupsBusyType=fxsSerialGroupsBusyType, sipShortmode=sipShortmode, fxsPortConfigAON=fxsPortConfigAON, fxsPortConfigCtUnconditional=fxsPortConfigCtUnconditional, syslogAddr=syslogAddr, fxsFirmwareVersion=fxsFirmwareVersion, fxsSerialGroupsEnabled=fxsSerialGroupsEnabled, fxs72=fxs72, sipMode=sipMode, fxsPortsMonitoringTable=fxsPortsMonitoringTable, tau36v40sip=tau36v40sip, clRowStatus=clRowStatus, sipDomain=sipDomain, fxsPortConfigAltNumber=fxsPortConfigAltNumber, fxsPortConfigCtOutofservice=fxsPortConfigCtOutofservice, modifierRule=modifierRule, TauTrapVersion=TauTrapVersion, fxsPortConfigDvoCfAnswerEn=fxsPortConfigDvoCfAnswerEn, fxsPortConfigFxoMinLevelDetect=fxsPortConfigFxoMinLevelDetect, fxsPortConfigPstnRbDetectTimeout=fxsPortConfigPstnRbDetectTimeout, sipUriEscapeHash=sipUriEscapeHash, profileDialPlanModifier=profileDialPlanModifier, fxsPortConfigCpcRus=fxsPortConfigCpcRus, fxoSerialGroupsType=fxoSerialGroupsType, tauSipConfig=tauSipConfig, profilesSipAlertInfoEntry=profilesSipAlertInfoEntry, ruleprotocol=ruleprotocol, tau36v30sip=tau36v30sip, fxsPortConfigCommonMaxFlashtime=fxsPortConfigCommonMaxFlashtime, portTestCapacityTg=portTestCapacityTg, clType=clType, profilesSipAlertInfoTable=profilesSipAlertInfoTable, tauSysName=tauSysName, fxsPortConfigCommonGaint=fxsPortConfigCommonGaint, profilePortsDelayDialingTimeout=profilePortsDelayDialingTimeout, syslogPort=syslogPort, FxsGroupBusyType=FxsGroupBusyType, profilePortsPstnNameprefix=profilePortsPstnNameprefix, fxsMonitoringFanState=fxsMonitoringFanState, fxsDialRowStatus=fxsDialRowStatus)
mibBuilder.exportSymbols("ELTEX-FXS72", fxsSerialGroupsSipProfile=fxsSerialGroupsSipProfile, fxsPortConfigDontTransmitPrefix=fxsPortConfigDontTransmitPrefix, fxsDialPlanNature=fxsDialPlanNature, diffservForRtp=diffservForRtp, profileRegExpDialProtocol=profileRegExpDialProtocol, fxoSerialGroupsSend503OnBusy=fxoSerialGroupsSend503OnBusy, comfortNoise=comfortNoise, fxsSyslog=fxsSyslog, startTimer=startTimer, tau72v30megaco=tau72v30megaco, profilePortsModifier=profilePortsModifier, monitorFxoGroupsTable=monitorFxoGroupsTable, fxs72v21=fxs72v21, FxsDialPlanNatureType=FxsDialPlanNatureType, fxsPortConfigFxoFlashTime=fxsPortConfigFxoFlashTime, fxsPortConfigCommonFxoFlashTime=fxsPortConfigCommonFxoFlashTime, fxsPortSipConnectHost=fxsPortSipConnectHost, tauDialPlansRegExp=tauDialPlansRegExp, clHostOfNeighbourGateway=clHostOfNeighbourGateway, fxsDialPlanTimeout=fxsDialPlanTimeout, fxsNetwork=fxsNetwork, sipInviteInitT=sipInviteInitT, FXSFanState=FXSFanState, fxsSerialGroupsTable=fxsSerialGroupsTable, fxsSource=fxsSource, allDestinationPorts=allDestinationPorts, fxsPortConfigBlockFxoLineInOutgoingDirection=fxsPortConfigBlockFxoLineInOutgoingDirection, fxsPortConfigSipPort=fxsPortConfigSipPort, sipTransport=sipTransport, tau32MrevBsip=tau32MrevBsip, fxsPortConfigDisabled=fxsPortConfigDisabled, sipPRTPstat=sipPRTPstat, sipProfileRegistration2=sipProfileRegistration2, tau72v30sip=tau72v30sip, AutoupdateProtocolType=AutoupdateProtocolType, fxs72megaco=fxs72megaco, fxsPortState=fxsPortState, sipProfileUsername=sipProfileUsername, flashTransfer=flashTransfer, PYSNMP_MODULE_ID=fxs72, fxsPortConfigSipProfileID=fxsPortConfigSipProfileID, megacoPortsMonitoringEntry=megacoPortsMonitoringEntry, fxs72sip=fxs72sip, lastCallPhone=lastCallPhone, siptPrefix=siptPrefix, fxsConfigurationUpdateInterval=fxsConfigurationUpdateInterval, nlpDisable=nlpDisable, sipProfileProxy4=sipProfileProxy4, fxsPortConfigMinFlashtime=fxsPortConfigMinFlashtime, fxsPortsConfigCommon=fxsPortsConfigCommon, vapiEnabled=vapiEnabled, sipProfileKeepAliveMode=sipProfileKeepAliveMode, firewallEntry=firewallEntry, profilesSipCommon=profilesSipCommon, tauDialRegularOn=tauDialRegularOn, FxsGroupSerialType=FxsGroupSerialType, fxsPortConfigFxoCallBusy=fxsPortConfigFxoCallBusy, sipProfileKeepAliveInterval=sipProfileKeepAliveInterval, sipProfileFullRuriCompliance=sipProfileFullRuriCompliance, profilesSipTable=profilesSipTable, HookFlashMIMEType=HookFlashMIMEType, H323LogLevel=H323LogLevel, fxsPortConfigCommonDontTransmitPrefix=fxsPortConfigCommonDontTransmitPrefix, fxsMonitoring=fxsMonitoring, firewallTableMIBBoundary=firewallTableMIBBoundary, fxsMonitoringVBat=fxsMonitoringVBat, fxsPortSipConnecteNext=fxsPortSipConnecteNext, portTestRingU=portTestRingU, echoCanceller=echoCanceller, fxsPortConfigNoOffhookAtRinging=fxsPortConfigNoOffhookAtRinging, fxsPortConfigPstnNameprefix=fxsPortConfigPstnNameprefix, fxsFreeSpace=fxsFreeSpace, profilesPortsEntry=profilesPortsEntry, tauRestartSnmp=tauRestartSnmp, fxsDialPlanMinDigits=fxsDialPlanMinDigits, sipProfileUriEscapeHash=sipProfileUriEscapeHash, fxoSerialGroupsDontTransmitPrefix=fxoSerialGroupsDontTransmitPrefix, fxsPortConfigCtTimeout=fxsPortConfigCtTimeout, fxsPortConfigFxoDelTdm=fxsPortConfigFxoDelTdm, FxsTaxophoneType=FxsTaxophoneType, tauVoipDvoCfNoanswer=tauVoipDvoCfNoanswer, fxsSerialGroups=fxsSerialGroups, tau32MrevBmegaco=tau32MrevBmegaco, tau24sip=tau24sip, sipProfileConferenceServer=sipProfileConferenceServer, rtcpXR=rtcpXR, fxsPortConfigUseAltNumberAsContact=fxsPortConfigUseAltNumberAsContact, fxsPortConfigDialing=fxsPortConfigDialing, fxsPortConfigtdmhotnumber=fxsPortConfigtdmhotnumber, sipRegistration2=sipRegistration2, appInfo=appInfo, callLimitEntry=callLimitEntry, fxsSerialGroupsEntry=fxsSerialGroupsEntry, useG711A=useG711A, g723Ptime=g723Ptime, fxsPortConfigDelayDialingTimeout=fxsPortConfigDelayDialingTimeout, fxsDevType=fxsDevType, tauUserV3Name=tauUserV3Name, tauMegacoTrapsTable=tauMegacoTrapsTable, fxsDialPlanType=fxsDialPlanType, sipProfileRegrar4=sipProfileRegrar4, FirewallProtocol=FirewallProtocol, fxsPortConfigCommonTransmitNumber=fxsPortConfigCommonTransmitNumber, startingDestinationPort=startingDestinationPort, sipInboundProxy=sipInboundProxy, rtcpControlPeriod=rtcpControlPeriod, sipProfileMinSE=sipProfileMinSE, ReversalPolarityAction=ReversalPolarityAction, voiceDeletionMode=voiceDeletionMode, fxsPortConfigDvoDoDisturbEn=fxsPortConfigDvoDoDisturbEn, sipProfileInboundProxy=sipProfileInboundProxy, fxsMonitoringDevicePower=fxsMonitoringDevicePower, firewallConfirm=firewallConfirm, sipCommonTransport=sipCommonTransport, fxsPortConfigCommonMinFlashtime=fxsPortConfigCommonMinFlashtime, OptionsHomeServerTest=OptionsHomeServerTest, fxsPortConfigRingBackToneDetectionParameters=fxsPortConfigRingBackToneDetectionParameters, fxsPortConfigDetectFxoLinePresence=fxsPortConfigDetectFxoLinePresence, profilePortsDontDetectDT=profilePortsDontDetectDT, fxsDevCfgBuild=fxsDevCfgBuild, fxsPortConfigCommonUsePstnCid=fxsPortConfigCommonUsePstnCid, sipProfileRegrar2=sipProfileRegrar2, sipRegistration1=sipRegistration1, portTestResistTg=portTestResistTg, fxsPortConfigAONHideDate=fxsPortConfigAONHideDate, fxsPortConfigPortProfileID=fxsPortConfigPortProfileID, profilesPortsMIBBoundary=profilesPortsMIBBoundary, rtcpTimer=rtcpTimer, profilesCodecsRowStatus=profilesCodecsRowStatus, fxoGroupH323GK=fxoGroupH323GK, fxsSSwStatus=fxsSSwStatus, PowerMode=PowerMode, profilePortsDetectFxoLinePresence=profilePortsDetectFxoLinePresence, numTxOct=numTxOct, fxsPortConfigCommonPstnNumberprefix=fxsPortConfigCommonPstnNumberprefix, TauvoiceDeletionModeType=TauvoiceDeletionModeType, profilePortsCfgPriOverCw=profilePortsCfgPriOverCw, profilePortsTransmitNumber=profilePortsTransmitNumber, profilePortsPstnActivity=profilePortsPstnActivity, profilesSip=profilesSip, sipProfileRegistration3=sipProfileRegistration3, profilesSipMIBBoundary=profilesSipMIBBoundary, fxsPortConfigAONHideName=fxsPortConfigAONHideName, fxsPortConfigDtDetectTime=fxsPortConfigDtDetectTime, lostPackets=lostPackets, portTestTipU=portTestTipU, fxsPortConfigBusyToneDetectionParameters=fxsPortConfigBusyToneDetectionParameters, stunEnable=stunEnable, tauVoipDvoCfBusy=tauVoipDvoCfBusy, FxsGroupSerialEnableType=FxsGroupSerialEnableType, fxsPortConfigCommonEnableCpc=fxsPortConfigCommonEnableCpc, fxsPortConfigCfnrNumber=fxsPortConfigCfnrNumber, fxsSerialGroupsSipPort=fxsSerialGroupsSipPort, sipProfileObtimeout=sipProfileObtimeout, portTestLastTestStartTime=portTestLastTestStartTime, fxsMonitoringVMode=fxsMonitoringVMode, drRowStatus=drRowStatus, tau24megaco=tau24megaco, fxsPortConfigMwiDialtone=fxsPortConfigMwiDialtone, tau72v40sip=tau72v40sip, sipObtimeout=sipObtimeout, sipInviteTotalT=sipInviteTotalT, firewallTable=firewallTable, fxsPorts=fxsPorts, profilesDialPlansMIBBoundary=profilesDialPlansMIBBoundary, modifierNumber=modifierNumber, fxsDial=fxsDial, profilePortsPstnNumberprefix=profilePortsPstnNumberprefix, fxsMonitoringTemp2=fxsMonitoringTemp2, numberOfSourceIpAddresses=numberOfSourceIpAddresses, CwRingbackRingbackAtCallwaiting=CwRingbackRingbackAtCallwaiting, VapiAppLogLevel=VapiAppLogLevel, fxsPortConfigtdmhotline=fxsPortConfigtdmhotline, tauMegacoTrapRowStatus=tauMegacoTrapRowStatus, sipProfileProxy3=sipProfileProxy3, tauMegacoTrapType=tauMegacoTrapType, fxsStatTable=fxsStatTable, sipProfile100Rel=sipProfile100Rel, profilePortsAON=profilePortsAON, fxsMonitoringVinput=fxsMonitoringVinput, g729Ptime=g729Ptime, tauTrapSink=tauTrapSink, fxsPortConfigHotNumber=fxsPortConfigHotNumber, distinctiveRingTable=distinctiveRingTable, silenceSuppression=silenceSuppression, fxsPortConfigClir=fxsPortConfigClir, profilesPorts=profilesPorts, t38MaxDatagramSize=t38MaxDatagramSize, sipUserPhone=sipUserPhone, DTMFMIMEType=DTMFMIMEType, profilePortsAONHideDate=profilePortsAONHideDate, voiceDelayMax=voiceDelayMax, g711Ptime=g711Ptime, modemFaxDelay=modemFaxDelay, fxoSerialGroups=fxoSerialGroups, TauDtmfTransferType=TauDtmfTransferType, faxTransferCodec=faxTransferCodec, deviceName=deviceName, portTestShortVbat=portTestShortVbat, profilePortsAONHideName=profilePortsAONHideName, fansForceEnable=fansForceEnable, rfc2833PT=rfc2833PT, modifiersTable=modifiersTable, profilePortsRowStatus=profilePortsRowStatus, profilePortsRingBackToneDetectionParameters=profilePortsRingBackToneDetectionParameters, portTestRunTest=portTestRunTest, drRing=drRing)
