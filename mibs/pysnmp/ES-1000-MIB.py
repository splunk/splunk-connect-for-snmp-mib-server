#
# PySNMP MIB module ES-1000-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/ES-1000-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 18:52:05 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, OctetString, Integer = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "OctetString", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsUnion, ValueRangeConstraint, SingleValueConstraint, ValueSizeConstraint, ConstraintsIntersection = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsUnion", "ValueRangeConstraint", "SingleValueConstraint", "ValueSizeConstraint", "ConstraintsIntersection")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
Gauge32, Counter64, Bits, TimeTicks, ModuleIdentity, IpAddress, ObjectIdentity, iso, Integer32, MibIdentifier, enterprises, Unsigned32, NotificationType, Counter32, MibScalar, MibTable, MibTableRow, MibTableColumn, NotificationType = mibBuilder.importSymbols("SNMPv2-SMI", "Gauge32", "Counter64", "Bits", "TimeTicks", "ModuleIdentity", "IpAddress", "ObjectIdentity", "iso", "Integer32", "MibIdentifier", "enterprises", "Unsigned32", "NotificationType", "Counter32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "NotificationType")
DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention")
mcData = MibIdentifier((1, 3, 6, 1, 4, 1, 289))
commDev = MibIdentifier((1, 3, 6, 1, 4, 1, 289, 2))
fibreChannel = MibIdentifier((1, 3, 6, 1, 4, 1, 289, 2, 1))
fcSwitch = MibIdentifier((1, 3, 6, 1, 4, 1, 289, 2, 1, 1))
es_1000 = MibIdentifier((1, 3, 6, 1, 4, 1, 289, 2, 1, 1, 3)).setLabel("es-1000")
class TruthValue(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2))
    namedValues = NamedValues(("yes", 1), ("no", 2))

class Es1000SysOperStatus(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))
    namedValues = NamedValues(("operational", 1), ("redundant-failure", 2), ("minor-failure", 3), ("major-failure", 4), ("not-operational", 5))

class Es1000SysState(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))
    namedValues = NamedValues(("online", 1), ("coming-online", 2), ("offline", 3), ("going-offline", 4))

class Es1000CompCode(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(2, 5, 6, 13, 16, 17, 18, 19, 20, 21, 22, 23))
    namedValues = NamedValues(("comp-ctp", 2), ("comp-fan", 5), ("comp-power", 6), ("comp-thermal", 13), ("comp-gbic-none", 16), ("comp-gbic-cu-db9", 17), ("comp-gbic-cu-hssdc", 18), ("comp-gbic-opt-lw-1g", 19), ("comp-gbic-serial-id", 20), ("comp-gbic-opt-sw-1g", 21), ("comp-gbic-opt-lw-2g", 22), ("comp-gbic-opt-sw-2g", 23))

class Es1000CompPosition(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ValueRangeConstraint(1, 9)

class Es1000CompStatus(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3))
    namedValues = NamedValues(("active", 1), ("update-busy", 2), ("failed", 3))

class Es1000PortCount(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ValueRangeConstraint(1, 9)

class Es1000PortIndex(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ValueRangeConstraint(1, 9)

class Es1000PortNumber(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ValueRangeConstraint(0, 8)

class Es1000PortPhyState(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25))
    namedValues = NamedValues(("psNotInstalled", 1), ("psAvailable", 2), ("psBlocked", 3), ("psUnavailable", 4), ("psLinkFailure", 5), ("psLinkFailLOL", 6), ("psIntDiags", 7), ("psExtLoop", 8), ("psPortFail", 9), ("psSR", 10), ("psLR", 11), ("psPortBypassedLipF7", 12), ("psPortBypassedLipF8", 13), ("psPortBypassedOSError", 14), ("psPortBypassedCRCError", 15), ("psLinkFailLOSync", 16), ("psLinkFailLOSignal", 17), ("psTxFault", 18), ("psTimeout", 19), ("psProtocolError", 20), ("psRxOLS", 21), ("psRxNOS", 22), ("psRxLR", 23), ("psBBCredit", 24), ("psFatalError", 25))

class Es1000PortStatus(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))
    namedValues = NamedValues(("online", 1), ("offline", 2), ("testing", 3), ("faulty", 4))

class Es1000PortAdmStatus(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3))
    namedValues = NamedValues(("online", 1), ("offline", 2), ("testing", 3))

class Es1000LoopStatus(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12))
    namedValues = NamedValues(("loop-DOWN", 1), ("loop-LIP", 2), ("loop-LISM", 3), ("loop-LIFA", 4), ("loop-LIPA", 5), ("loop-LIHA", 6), ("loop-LISA", 7), ("loop-LIRP", 8), ("loop-LILP", 9), ("loop-FAN", 10), ("loop-ACTIVE", 11), ("loop-READY", 12))

class Es1000LoopMasterWWN(OctetString):
    subtypeSpec = OctetString.subtypeSpec + ValueSizeConstraint(8, 8)
    fixedLength = 8

class Es1000LoopPortALPA(OctetString):
    subtypeSpec = OctetString.subtypeSpec + ValueSizeConstraint(0, 126)

es1000Sys = MibIdentifier((1, 3, 6, 1, 4, 1, 289, 2, 1, 1, 3, 1))
es1000Comp = MibIdentifier((1, 3, 6, 1, 4, 1, 289, 2, 1, 1, 3, 2))
es1000Port = MibIdentifier((1, 3, 6, 1, 4, 1, 289, 2, 1, 1, 3, 3))
es1000Loop = MibIdentifier((1, 3, 6, 1, 4, 1, 289, 2, 1, 1, 3, 4))
es1000Acct = MibIdentifier((1, 3, 6, 1, 4, 1, 289, 2, 1, 1, 3, 5))
es1000SysCurrentDate = MibScalar((1, 3, 6, 1, 4, 1, 289, 2, 1, 1, 3, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: es1000SysCurrentDate.setStatus('mandatory')
es1000SysBootDate = MibScalar((1, 3, 6, 1, 4, 1, 289, 2, 1, 1, 3, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: es1000SysBootDate.setStatus('mandatory')
es1000SysFirmwareVersion = MibScalar((1, 3, 6, 1, 4, 1, 289, 2, 1, 1, 3, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: es1000SysFirmwareVersion.setStatus('mandatory')
es1000SysTypeNum = MibScalar((1, 3, 6, 1, 4, 1, 289, 2, 1, 1, 3, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: es1000SysTypeNum.setStatus('mandatory')
es1000SysModelNum = MibScalar((1, 3, 6, 1, 4, 1, 289, 2, 1, 1, 3, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: es1000SysModelNum.setStatus('mandatory')
es1000SysMfg = MibScalar((1, 3, 6, 1, 4, 1, 289, 2, 1, 1, 3, 1, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: es1000SysMfg.setStatus('mandatory')
es1000SysPlantOfMfg = MibScalar((1, 3, 6, 1, 4, 1, 289, 2, 1, 1, 3, 1, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: es1000SysPlantOfMfg.setStatus('mandatory')
es1000SysSeqNum = MibScalar((1, 3, 6, 1, 4, 1, 289, 2, 1, 1, 3, 1, 8), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: es1000SysSeqNum.setStatus('mandatory')
es1000SysEcLevel = MibScalar((1, 3, 6, 1, 4, 1, 289, 2, 1, 1, 3, 1, 9), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: es1000SysEcLevel.setStatus('mandatory')
es1000SysOemSerialNum = MibScalar((1, 3, 6, 1, 4, 1, 289, 2, 1, 1, 3, 1, 10), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: es1000SysOemSerialNum.setStatus('mandatory')
es1000SysOperStatus = MibScalar((1, 3, 6, 1, 4, 1, 289, 2, 1, 1, 3, 1, 11), Es1000SysOperStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: es1000SysOperStatus.setStatus('mandatory')
es1000SysState = MibScalar((1, 3, 6, 1, 4, 1, 289, 2, 1, 1, 3, 1, 12), Es1000SysState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: es1000SysState.setStatus('mandatory')
es1000SysAdmStatus = MibScalar((1, 3, 6, 1, 4, 1, 289, 2, 1, 1, 3, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("online", 1), ("offline", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: es1000SysAdmStatus.setStatus('mandatory')
es1000CompTable = MibTable((1, 3, 6, 1, 4, 1, 289, 2, 1, 1, 3, 2, 1), )
if mibBuilder.loadTexts: es1000CompTable.setStatus('mandatory')
es1000CompEntry = MibTableRow((1, 3, 6, 1, 4, 1, 289, 2, 1, 1, 3, 2, 1, 1), ).setIndexNames((0, "ES-1000-MIB", "es1000CompCode"), (0, "ES-1000-MIB", "es1000CompPosition"))
if mibBuilder.loadTexts: es1000CompEntry.setStatus('mandatory')
es1000CompCode = MibTableColumn((1, 3, 6, 1, 4, 1, 289, 2, 1, 1, 3, 2, 1, 1, 1), Es1000CompCode()).setMaxAccess("readonly")
if mibBuilder.loadTexts: es1000CompCode.setStatus('mandatory')
es1000CompPosition = MibTableColumn((1, 3, 6, 1, 4, 1, 289, 2, 1, 1, 3, 2, 1, 1, 2), Es1000CompPosition()).setMaxAccess("readonly")
if mibBuilder.loadTexts: es1000CompPosition.setStatus('mandatory')
es1000CompStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 289, 2, 1, 1, 3, 2, 1, 1, 3), Es1000CompStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: es1000CompStatus.setStatus('mandatory')
es1000PortBportCount = MibScalar((1, 3, 6, 1, 4, 1, 289, 2, 1, 1, 3, 3, 1), Es1000PortCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: es1000PortBportCount.setStatus('mandatory')
es1000PortHportCount = MibScalar((1, 3, 6, 1, 4, 1, 289, 2, 1, 1, 3, 3, 2), Es1000PortCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: es1000PortHportCount.setStatus('mandatory')
es1000PortBportTable = MibTable((1, 3, 6, 1, 4, 1, 289, 2, 1, 1, 3, 3, 3), )
if mibBuilder.loadTexts: es1000PortBportTable.setStatus('mandatory')
es1000PortBportEntry = MibTableRow((1, 3, 6, 1, 4, 1, 289, 2, 1, 1, 3, 3, 3, 1), ).setIndexNames((0, "ES-1000-MIB", "es1000PortBportIndex"))
if mibBuilder.loadTexts: es1000PortBportEntry.setStatus('mandatory')
es1000PortBportIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 289, 2, 1, 1, 3, 3, 3, 1, 1), Es1000PortIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: es1000PortBportIndex.setStatus('mandatory')
es1000PortBportNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 289, 2, 1, 1, 3, 3, 3, 1, 2), Es1000PortNumber()).setMaxAccess("readonly")
if mibBuilder.loadTexts: es1000PortBportNumber.setStatus('mandatory')
es1000PortBportPhyState = MibTableColumn((1, 3, 6, 1, 4, 1, 289, 2, 1, 1, 3, 3, 3, 1, 3), Es1000PortPhyState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: es1000PortBportPhyState.setStatus('mandatory')
es1000PortBportOpStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 289, 2, 1, 1, 3, 3, 3, 1, 4), Es1000PortStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: es1000PortBportOpStatus.setStatus('mandatory')
es1000PortBportAdmStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 289, 2, 1, 1, 3, 3, 3, 1, 5), Es1000PortAdmStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: es1000PortBportAdmStatus.setStatus('mandatory')
es1000PortBportName = MibTableColumn((1, 3, 6, 1, 4, 1, 289, 2, 1, 1, 3, 3, 3, 1, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 24))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: es1000PortBportName.setStatus('mandatory')
es1000PortBportBlockedState = MibTableColumn((1, 3, 6, 1, 4, 1, 289, 2, 1, 1, 3, 3, 3, 1, 7), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: es1000PortBportBlockedState.setStatus('mandatory')
es1000PortHportTable = MibTable((1, 3, 6, 1, 4, 1, 289, 2, 1, 1, 3, 3, 4), )
if mibBuilder.loadTexts: es1000PortHportTable.setStatus('mandatory')
es1000PortHportEntry = MibTableRow((1, 3, 6, 1, 4, 1, 289, 2, 1, 1, 3, 3, 4, 1), ).setIndexNames((0, "ES-1000-MIB", "es1000PortHportIndex"))
if mibBuilder.loadTexts: es1000PortHportEntry.setStatus('mandatory')
es1000PortHportIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 289, 2, 1, 1, 3, 3, 4, 1, 1), Es1000PortIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: es1000PortHportIndex.setStatus('mandatory')
es1000PortHportNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 289, 2, 1, 1, 3, 3, 4, 1, 2), Es1000PortNumber()).setMaxAccess("readonly")
if mibBuilder.loadTexts: es1000PortHportNumber.setStatus('mandatory')
es1000PortHportPhyState = MibTableColumn((1, 3, 6, 1, 4, 1, 289, 2, 1, 1, 3, 3, 4, 1, 3), Es1000PortPhyState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: es1000PortHportPhyState.setStatus('mandatory')
es1000PortHportOpStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 289, 2, 1, 1, 3, 3, 4, 1, 4), Es1000PortStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: es1000PortHportOpStatus.setStatus('mandatory')
es1000PortHportAdmStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 289, 2, 1, 1, 3, 3, 4, 1, 5), Es1000PortAdmStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: es1000PortHportAdmStatus.setStatus('mandatory')
es1000PortHportName = MibTableColumn((1, 3, 6, 1, 4, 1, 289, 2, 1, 1, 3, 3, 4, 1, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 24))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: es1000PortHportName.setStatus('mandatory')
es1000PortHportBypassedState = MibTableColumn((1, 3, 6, 1, 4, 1, 289, 2, 1, 1, 3, 3, 4, 1, 7), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: es1000PortHportBypassedState.setStatus('mandatory')
es1000PortHportValidation = MibTableColumn((1, 3, 6, 1, 4, 1, 289, 2, 1, 1, 3, 3, 4, 1, 8), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: es1000PortHportValidation.setStatus('mandatory')
es1000PortHportLipOnInsertion = MibTableColumn((1, 3, 6, 1, 4, 1, 289, 2, 1, 1, 3, 3, 4, 1, 9), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: es1000PortHportLipOnInsertion.setStatus('mandatory')
es1000LoopStatus = MibScalar((1, 3, 6, 1, 4, 1, 289, 2, 1, 1, 3, 4, 1), Es1000LoopStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: es1000LoopStatus.setStatus('mandatory')
es1000LoopMasterWWN = MibScalar((1, 3, 6, 1, 4, 1, 289, 2, 1, 1, 3, 4, 2), Es1000LoopMasterWWN()).setMaxAccess("readonly")
if mibBuilder.loadTexts: es1000LoopMasterWWN.setStatus('mandatory')
es1000LoopSwitched = MibScalar((1, 3, 6, 1, 4, 1, 289, 2, 1, 1, 3, 4, 3), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: es1000LoopSwitched.setStatus('mandatory')
es1000LoopPrincipal = MibScalar((1, 3, 6, 1, 4, 1, 289, 2, 1, 1, 3, 4, 4), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: es1000LoopPrincipal.setStatus('mandatory')
es1000LoopPortTable = MibTable((1, 3, 6, 1, 4, 1, 289, 2, 1, 1, 3, 4, 5), )
if mibBuilder.loadTexts: es1000LoopPortTable.setStatus('mandatory')
es1000LoopPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 289, 2, 1, 1, 3, 4, 5, 1), ).setIndexNames((0, "ES-1000-MIB", "es1000LoopPortIndex"))
if mibBuilder.loadTexts: es1000LoopPortEntry.setStatus('mandatory')
es1000LoopPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 289, 2, 1, 1, 3, 4, 5, 1, 1), Es1000PortIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: es1000LoopPortIndex.setStatus('mandatory')
es1000LoopPortNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 289, 2, 1, 1, 3, 4, 5, 1, 2), Es1000PortNumber()).setMaxAccess("readonly")
if mibBuilder.loadTexts: es1000LoopPortNumber.setStatus('mandatory')
es1000LoopPortALPA = MibTableColumn((1, 3, 6, 1, 4, 1, 289, 2, 1, 1, 3, 4, 5, 1, 3), Es1000LoopPortALPA()).setMaxAccess("readonly")
if mibBuilder.loadTexts: es1000LoopPortALPA.setStatus('mandatory')
es1000AcctBportTable = MibTable((1, 3, 6, 1, 4, 1, 289, 2, 1, 1, 3, 5, 1), )
if mibBuilder.loadTexts: es1000AcctBportTable.setStatus('mandatory')
es1000AcctBportEntry = MibTableRow((1, 3, 6, 1, 4, 1, 289, 2, 1, 1, 3, 5, 1, 1), ).setIndexNames((0, "ES-1000-MIB", "es1000AcctBportIndex"))
if mibBuilder.loadTexts: es1000AcctBportEntry.setStatus('mandatory')
es1000AcctBportIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 289, 2, 1, 1, 3, 5, 1, 1, 1), Es1000PortIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: es1000AcctBportIndex.setStatus('mandatory')
es1000AcctBportNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 289, 2, 1, 1, 3, 5, 1, 1, 2), Es1000PortNumber()).setMaxAccess("readonly")
if mibBuilder.loadTexts: es1000AcctBportNumber.setStatus('mandatory')
es1000AcctBportLinkFailures = MibTableColumn((1, 3, 6, 1, 4, 1, 289, 2, 1, 1, 3, 5, 1, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: es1000AcctBportLinkFailures.setStatus('mandatory')
es1000AcctBportSyncLosses = MibTableColumn((1, 3, 6, 1, 4, 1, 289, 2, 1, 1, 3, 5, 1, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: es1000AcctBportSyncLosses.setStatus('mandatory')
es1000AcctBportSigLosses = MibTableColumn((1, 3, 6, 1, 4, 1, 289, 2, 1, 1, 3, 5, 1, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: es1000AcctBportSigLosses.setStatus('mandatory')
es1000AcctBportPrimSeqProtoErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 289, 2, 1, 1, 3, 5, 1, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: es1000AcctBportPrimSeqProtoErrors.setStatus('mandatory')
es1000AcctBportInvalidTxWords = MibTableColumn((1, 3, 6, 1, 4, 1, 289, 2, 1, 1, 3, 5, 1, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: es1000AcctBportInvalidTxWords.setStatus('mandatory')
es1000AcctBportInvalidCrcs = MibTableColumn((1, 3, 6, 1, 4, 1, 289, 2, 1, 1, 3, 5, 1, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: es1000AcctBportInvalidCrcs.setStatus('mandatory')
es1000AcctBportLinkResetIns = MibTableColumn((1, 3, 6, 1, 4, 1, 289, 2, 1, 1, 3, 5, 1, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: es1000AcctBportLinkResetIns.setStatus('mandatory')
es1000AcctBportLinkResetOuts = MibTableColumn((1, 3, 6, 1, 4, 1, 289, 2, 1, 1, 3, 5, 1, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: es1000AcctBportLinkResetOuts.setStatus('mandatory')
es1000AcctBportOlsIns = MibTableColumn((1, 3, 6, 1, 4, 1, 289, 2, 1, 1, 3, 5, 1, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: es1000AcctBportOlsIns.setStatus('mandatory')
es1000AcctBportOlsOuts = MibTableColumn((1, 3, 6, 1, 4, 1, 289, 2, 1, 1, 3, 5, 1, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: es1000AcctBportOlsOuts.setStatus('mandatory')
es1000AcctBportC2InFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 289, 2, 1, 1, 3, 5, 1, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: es1000AcctBportC2InFrames.setStatus('mandatory')
es1000AcctBportC2OutFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 289, 2, 1, 1, 3, 5, 1, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: es1000AcctBportC2OutFrames.setStatus('mandatory')
es1000AcctBportC2Discards = MibTableColumn((1, 3, 6, 1, 4, 1, 289, 2, 1, 1, 3, 5, 1, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: es1000AcctBportC2Discards.setStatus('mandatory')
es1000AcctBportC2InOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 289, 2, 1, 1, 3, 5, 1, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: es1000AcctBportC2InOctets.setStatus('mandatory')
es1000AcctBportC2OutOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 289, 2, 1, 1, 3, 5, 1, 1, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: es1000AcctBportC2OutOctets.setStatus('mandatory')
es1000AcctBportC3InFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 289, 2, 1, 1, 3, 5, 1, 1, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: es1000AcctBportC3InFrames.setStatus('mandatory')
es1000AcctBportC3OutFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 289, 2, 1, 1, 3, 5, 1, 1, 19), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: es1000AcctBportC3OutFrames.setStatus('mandatory')
es1000AcctBportC3InOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 289, 2, 1, 1, 3, 5, 1, 1, 20), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: es1000AcctBportC3InOctets.setStatus('mandatory')
es1000AcctBportC3OutOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 289, 2, 1, 1, 3, 5, 1, 1, 21), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: es1000AcctBportC3OutOctets.setStatus('mandatory')
es1000AcctBportC3Discards = MibTableColumn((1, 3, 6, 1, 4, 1, 289, 2, 1, 1, 3, 5, 1, 1, 22), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: es1000AcctBportC3Discards.setStatus('mandatory')
es1000AcctBportRxWords = MibTableColumn((1, 3, 6, 1, 4, 1, 289, 2, 1, 1, 3, 5, 1, 1, 23), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: es1000AcctBportRxWords.setStatus('mandatory')
es1000AcctBportTxWords = MibTableColumn((1, 3, 6, 1, 4, 1, 289, 2, 1, 1, 3, 5, 1, 1, 24), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: es1000AcctBportTxWords.setStatus('mandatory')
es1000AcctBportRxFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 289, 2, 1, 1, 3, 5, 1, 1, 25), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: es1000AcctBportRxFrames.setStatus('mandatory')
es1000AcctBportTxFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 289, 2, 1, 1, 3, 5, 1, 1, 26), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: es1000AcctBportTxFrames.setStatus('mandatory')
es1000AcctBportInvalidOrderedSets = MibTableColumn((1, 3, 6, 1, 4, 1, 289, 2, 1, 1, 3, 5, 1, 1, 27), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: es1000AcctBportInvalidOrderedSets.setStatus('mandatory')
es1000AcctBportFramesTooLong = MibTableColumn((1, 3, 6, 1, 4, 1, 289, 2, 1, 1, 3, 5, 1, 1, 28), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: es1000AcctBportFramesTooLong.setStatus('mandatory')
es1000AcctBportFramesTooShort = MibTableColumn((1, 3, 6, 1, 4, 1, 289, 2, 1, 1, 3, 5, 1, 1, 29), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: es1000AcctBportFramesTooShort.setStatus('mandatory')
es1000AcctBportTxThroughput = MibTableColumn((1, 3, 6, 1, 4, 1, 289, 2, 1, 1, 3, 5, 1, 1, 30), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: es1000AcctBportTxThroughput.setStatus('mandatory')
es1000AcctBportRxThroughput = MibTableColumn((1, 3, 6, 1, 4, 1, 289, 2, 1, 1, 3, 5, 1, 1, 31), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: es1000AcctBportRxThroughput.setStatus('mandatory')
es1000AcctBportAddressErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 289, 2, 1, 1, 3, 5, 1, 1, 32), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: es1000AcctBportAddressErrors.setStatus('mandatory')
es1000AcctBportC2FbsyFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 289, 2, 1, 1, 3, 5, 1, 1, 33), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: es1000AcctBportC2FbsyFrames.setStatus('mandatory')
es1000AcctBportC2FrjtFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 289, 2, 1, 1, 3, 5, 1, 1, 34), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: es1000AcctBportC2FrjtFrames.setStatus('mandatory')
es1000AcctBportCFInFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 289, 2, 1, 1, 3, 5, 1, 1, 35), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: es1000AcctBportCFInFrames.setStatus('mandatory')
es1000AcctBportFramesDiscarded = MibTableColumn((1, 3, 6, 1, 4, 1, 289, 2, 1, 1, 3, 5, 1, 1, 36), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: es1000AcctBportFramesDiscarded.setStatus('mandatory')
es1000AcctBportInvalidClassofFrame = MibTableColumn((1, 3, 6, 1, 4, 1, 289, 2, 1, 1, 3, 5, 1, 1, 37), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: es1000AcctBportInvalidClassofFrame.setStatus('mandatory')
es1000AcctBportC2RxWords = MibTableColumn((1, 3, 6, 1, 4, 1, 289, 2, 1, 1, 3, 5, 1, 1, 38), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: es1000AcctBportC2RxWords.setStatus('mandatory')
es1000AcctBportC2TxWords = MibTableColumn((1, 3, 6, 1, 4, 1, 289, 2, 1, 1, 3, 5, 1, 1, 39), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: es1000AcctBportC2TxWords.setStatus('mandatory')
es1000AcctBportC3RxWords = MibTableColumn((1, 3, 6, 1, 4, 1, 289, 2, 1, 1, 3, 5, 1, 1, 40), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: es1000AcctBportC3RxWords.setStatus('mandatory')
es1000AcctBportC3TxWords = MibTableColumn((1, 3, 6, 1, 4, 1, 289, 2, 1, 1, 3, 5, 1, 1, 41), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: es1000AcctBportC3TxWords.setStatus('mandatory')
es1000AcctBportTxThroughputPercent = MibTableColumn((1, 3, 6, 1, 4, 1, 289, 2, 1, 1, 3, 5, 1, 1, 42), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: es1000AcctBportTxThroughputPercent.setStatus('mandatory')
es1000AcctBportRxThroughputPercent = MibTableColumn((1, 3, 6, 1, 4, 1, 289, 2, 1, 1, 3, 5, 1, 1, 43), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: es1000AcctBportRxThroughputPercent.setStatus('mandatory')
es1000AcctBportLinkDown = MibTableColumn((1, 3, 6, 1, 4, 1, 289, 2, 1, 1, 3, 5, 1, 1, 44), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: es1000AcctBportLinkDown.setStatus('mandatory')
es1000AcctHportTable = MibTable((1, 3, 6, 1, 4, 1, 289, 2, 1, 1, 3, 5, 2), )
if mibBuilder.loadTexts: es1000AcctHportTable.setStatus('mandatory')
es1000AcctHportEntry = MibTableRow((1, 3, 6, 1, 4, 1, 289, 2, 1, 1, 3, 5, 2, 1), ).setIndexNames((0, "ES-1000-MIB", "es1000AcctHportIndex"))
if mibBuilder.loadTexts: es1000AcctHportEntry.setStatus('mandatory')
es1000AcctHportIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 289, 2, 1, 1, 3, 5, 2, 1, 1), Es1000PortIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: es1000AcctHportIndex.setStatus('mandatory')
es1000AcctHportNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 289, 2, 1, 1, 3, 5, 2, 1, 2), Es1000PortNumber()).setMaxAccess("readonly")
if mibBuilder.loadTexts: es1000AcctHportNumber.setStatus('mandatory')
es1000AcctHportLinkFailures = MibTableColumn((1, 3, 6, 1, 4, 1, 289, 2, 1, 1, 3, 5, 2, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: es1000AcctHportLinkFailures.setStatus('mandatory')
es1000AcctHportSyncLosses = MibTableColumn((1, 3, 6, 1, 4, 1, 289, 2, 1, 1, 3, 5, 2, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: es1000AcctHportSyncLosses.setStatus('mandatory')
es1000AcctHportSigLosses = MibTableColumn((1, 3, 6, 1, 4, 1, 289, 2, 1, 1, 3, 5, 2, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: es1000AcctHportSigLosses.setStatus('mandatory')
es1000AcctHportInvalidTxWords = MibTableColumn((1, 3, 6, 1, 4, 1, 289, 2, 1, 1, 3, 5, 2, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: es1000AcctHportInvalidTxWords.setStatus('mandatory')
es1000AcctHportInvalidCrcs = MibTableColumn((1, 3, 6, 1, 4, 1, 289, 2, 1, 1, 3, 5, 2, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: es1000AcctHportInvalidCrcs.setStatus('mandatory')
es1000AcctHportC2InFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 289, 2, 1, 1, 3, 5, 2, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: es1000AcctHportC2InFrames.setStatus('mandatory')
es1000AcctHportC2OutFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 289, 2, 1, 1, 3, 5, 2, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: es1000AcctHportC2OutFrames.setStatus('mandatory')
es1000AcctHportC2InOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 289, 2, 1, 1, 3, 5, 2, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: es1000AcctHportC2InOctets.setStatus('mandatory')
es1000AcctHportC2OutOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 289, 2, 1, 1, 3, 5, 2, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: es1000AcctHportC2OutOctets.setStatus('mandatory')
es1000AcctHportC3InFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 289, 2, 1, 1, 3, 5, 2, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: es1000AcctHportC3InFrames.setStatus('mandatory')
es1000AcctHportC3OutFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 289, 2, 1, 1, 3, 5, 2, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: es1000AcctHportC3OutFrames.setStatus('mandatory')
es1000AcctHportC3InOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 289, 2, 1, 1, 3, 5, 2, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: es1000AcctHportC3InOctets.setStatus('mandatory')
es1000AcctHportC3OutOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 289, 2, 1, 1, 3, 5, 2, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: es1000AcctHportC3OutOctets.setStatus('mandatory')
es1000AcctHportRxWords = MibTableColumn((1, 3, 6, 1, 4, 1, 289, 2, 1, 1, 3, 5, 2, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: es1000AcctHportRxWords.setStatus('mandatory')
es1000AcctHportTxWords = MibTableColumn((1, 3, 6, 1, 4, 1, 289, 2, 1, 1, 3, 5, 2, 1, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: es1000AcctHportTxWords.setStatus('mandatory')
es1000AcctHportRxFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 289, 2, 1, 1, 3, 5, 2, 1, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: es1000AcctHportRxFrames.setStatus('mandatory')
es1000AcctHportTxFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 289, 2, 1, 1, 3, 5, 2, 1, 19), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: es1000AcctHportTxFrames.setStatus('mandatory')
es1000AcctHportTxThroughput = MibTableColumn((1, 3, 6, 1, 4, 1, 289, 2, 1, 1, 3, 5, 2, 1, 20), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: es1000AcctHportTxThroughput.setStatus('mandatory')
es1000AcctHportRxThroughput = MibTableColumn((1, 3, 6, 1, 4, 1, 289, 2, 1, 1, 3, 5, 2, 1, 21), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: es1000AcctHportRxThroughput.setStatus('mandatory')
es1000AcctHportC2RxWords = MibTableColumn((1, 3, 6, 1, 4, 1, 289, 2, 1, 1, 3, 5, 2, 1, 22), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: es1000AcctHportC2RxWords.setStatus('mandatory')
es1000AcctHportC2TxWords = MibTableColumn((1, 3, 6, 1, 4, 1, 289, 2, 1, 1, 3, 5, 2, 1, 23), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: es1000AcctHportC2TxWords.setStatus('mandatory')
es1000AcctHportC3RxWords = MibTableColumn((1, 3, 6, 1, 4, 1, 289, 2, 1, 1, 3, 5, 2, 1, 24), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: es1000AcctHportC3RxWords.setStatus('mandatory')
es1000AcctHportC3TxWords = MibTableColumn((1, 3, 6, 1, 4, 1, 289, 2, 1, 1, 3, 5, 2, 1, 25), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: es1000AcctHportC3TxWords.setStatus('mandatory')
es1000AcctHportTxThroughputPercent = MibTableColumn((1, 3, 6, 1, 4, 1, 289, 2, 1, 1, 3, 5, 2, 1, 26), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: es1000AcctHportTxThroughputPercent.setStatus('mandatory')
es1000AcctHportRxThroughputPercent = MibTableColumn((1, 3, 6, 1, 4, 1, 289, 2, 1, 1, 3, 5, 2, 1, 27), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: es1000AcctHportRxThroughputPercent.setStatus('mandatory')
es1000AcctHportLIPCount = MibTableColumn((1, 3, 6, 1, 4, 1, 289, 2, 1, 1, 3, 5, 2, 1, 28), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: es1000AcctHportLIPCount.setStatus('mandatory')
es1000AcctHportConnectionsMade = MibTableColumn((1, 3, 6, 1, 4, 1, 289, 2, 1, 1, 3, 5, 2, 1, 29), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: es1000AcctHportConnectionsMade.setStatus('mandatory')
es1000AcctHportConnectionsStalled = MibTableColumn((1, 3, 6, 1, 4, 1, 289, 2, 1, 1, 3, 5, 2, 1, 30), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: es1000AcctHportConnectionsStalled.setStatus('mandatory')
es1000AcctHportConnectionsAborted = MibTableColumn((1, 3, 6, 1, 4, 1, 289, 2, 1, 1, 3, 5, 2, 1, 31), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: es1000AcctHportConnectionsAborted.setStatus('mandatory')
es1000AcctHportConnectionsAccepted = MibTableColumn((1, 3, 6, 1, 4, 1, 289, 2, 1, 1, 3, 5, 2, 1, 32), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: es1000AcctHportConnectionsAccepted.setStatus('mandatory')
es1000PortBportScn = NotificationType((1, 3, 6, 1, 4, 1, 289) + (0,1)).setObjects(("ES-1000-MIB", "es1000PortBportOpStatus"))
es1000PortHportScn = NotificationType((1, 3, 6, 1, 4, 1, 289) + (0,2)).setObjects(("ES-1000-MIB", "es1000PortHportOpStatus"))
es1000CompScn = NotificationType((1, 3, 6, 1, 4, 1, 289) + (0,3)).setObjects(("ES-1000-MIB", "es1000CompStatus"))
mibBuilder.exportSymbols("ES-1000-MIB", es1000AcctHportC3InOctets=es1000AcctHportC3InOctets, es1000PortHportPhyState=es1000PortHportPhyState, Es1000CompCode=Es1000CompCode, es1000CompCode=es1000CompCode, es1000LoopPortALPA=es1000LoopPortALPA, es1000AcctHportC3OutFrames=es1000AcctHportC3OutFrames, es1000AcctHportC3TxWords=es1000AcctHportC3TxWords, es1000AcctBportC2Discards=es1000AcctBportC2Discards, es1000AcctBportSyncLosses=es1000AcctBportSyncLosses, TruthValue=TruthValue, es1000AcctBportInvalidTxWords=es1000AcctBportInvalidTxWords, es1000AcctBportC3OutOctets=es1000AcctBportC3OutOctets, es1000PortHportOpStatus=es1000PortHportOpStatus, es1000AcctBportC2OutFrames=es1000AcctBportC2OutFrames, es1000AcctBportTxThroughput=es1000AcctBportTxThroughput, es1000AcctBportCFInFrames=es1000AcctBportCFInFrames, es1000AcctBportSigLosses=es1000AcctBportSigLosses, es1000AcctHportEntry=es1000AcctHportEntry, es1000AcctHportConnectionsStalled=es1000AcctHportConnectionsStalled, es1000PortHportBypassedState=es1000PortHportBypassedState, es1000AcctHportRxFrames=es1000AcctHportRxFrames, es1000AcctBportC2FbsyFrames=es1000AcctBportC2FbsyFrames, es1000AcctBportAddressErrors=es1000AcctBportAddressErrors, es1000AcctHportLIPCount=es1000AcctHportLIPCount, es1000SysOperStatus=es1000SysOperStatus, es1000Comp=es1000Comp, es1000AcctBportOlsOuts=es1000AcctBportOlsOuts, commDev=commDev, es1000AcctBportInvalidOrderedSets=es1000AcctBportInvalidOrderedSets, es1000AcctBportInvalidClassofFrame=es1000AcctBportInvalidClassofFrame, Es1000PortNumber=Es1000PortNumber, es1000AcctHportInvalidCrcs=es1000AcctHportInvalidCrcs, mcData=mcData, Es1000PortAdmStatus=Es1000PortAdmStatus, es1000CompPosition=es1000CompPosition, es1000PortBportCount=es1000PortBportCount, es1000AcctBportTxFrames=es1000AcctBportTxFrames, es1000AcctHportC3OutOctets=es1000AcctHportC3OutOctets, es1000AcctBportEntry=es1000AcctBportEntry, es1000AcctBportC3InFrames=es1000AcctBportC3InFrames, es1000AcctHportLinkFailures=es1000AcctHportLinkFailures, es1000CompStatus=es1000CompStatus, es1000AcctHportC2InFrames=es1000AcctHportC2InFrames, es_1000=es_1000, es1000AcctBportLinkResetOuts=es1000AcctBportLinkResetOuts, es1000AcctBportRxThroughput=es1000AcctBportRxThroughput, es1000AcctHportTable=es1000AcctHportTable, es1000AcctBportTxWords=es1000AcctBportTxWords, Es1000SysOperStatus=Es1000SysOperStatus, es1000AcctHportNumber=es1000AcctHportNumber, es1000AcctHportC2OutOctets=es1000AcctHportC2OutOctets, es1000AcctBportFramesDiscarded=es1000AcctBportFramesDiscarded, es1000LoopPortTable=es1000LoopPortTable, Es1000LoopStatus=Es1000LoopStatus, Es1000LoopPortALPA=Es1000LoopPortALPA, es1000SysSeqNum=es1000SysSeqNum, es1000AcctBportRxFrames=es1000AcctBportRxFrames, Es1000SysState=Es1000SysState, es1000Loop=es1000Loop, es1000SysModelNum=es1000SysModelNum, es1000AcctBportC2FrjtFrames=es1000AcctBportC2FrjtFrames, es1000PortBportName=es1000PortBportName, es1000AcctBportPrimSeqProtoErrors=es1000AcctBportPrimSeqProtoErrors, es1000AcctBportC3Discards=es1000AcctBportC3Discards, es1000AcctHportConnectionsMade=es1000AcctHportConnectionsMade, fibreChannel=fibreChannel, es1000AcctBportOlsIns=es1000AcctBportOlsIns, es1000AcctBportTable=es1000AcctBportTable, es1000SysPlantOfMfg=es1000SysPlantOfMfg, es1000AcctHportInvalidTxWords=es1000AcctHportInvalidTxWords, es1000AcctHportSigLosses=es1000AcctHportSigLosses, es1000AcctHportTxWords=es1000AcctHportTxWords, es1000LoopPortNumber=es1000LoopPortNumber, es1000AcctBportNumber=es1000AcctBportNumber, es1000Acct=es1000Acct, es1000AcctHportC2OutFrames=es1000AcctHportC2OutFrames, es1000AcctHportConnectionsAccepted=es1000AcctHportConnectionsAccepted, es1000AcctBportRxWords=es1000AcctBportRxWords, es1000AcctHportRxThroughput=es1000AcctHportRxThroughput, es1000SysTypeNum=es1000SysTypeNum, es1000AcctHportC2TxWords=es1000AcctHportC2TxWords, Es1000CompStatus=Es1000CompStatus, es1000PortBportEntry=es1000PortBportEntry, es1000PortHportNumber=es1000PortHportNumber, es1000LoopPortEntry=es1000LoopPortEntry, es1000AcctHportC2RxWords=es1000AcctHportC2RxWords, es1000PortHportValidation=es1000PortHportValidation, es1000SysOemSerialNum=es1000SysOemSerialNum, es1000SysBootDate=es1000SysBootDate, Es1000CompPosition=Es1000CompPosition, es1000Port=es1000Port, es1000AcctBportIndex=es1000AcctBportIndex, es1000AcctBportFramesTooShort=es1000AcctBportFramesTooShort, Es1000PortIndex=Es1000PortIndex, es1000Sys=es1000Sys, es1000AcctBportTxThroughputPercent=es1000AcctBportTxThroughputPercent, es1000AcctHportTxThroughput=es1000AcctHportTxThroughput, es1000AcctHportTxThroughputPercent=es1000AcctHportTxThroughputPercent, es1000AcctBportC2InOctets=es1000AcctBportC2InOctets, es1000AcctBportC3RxWords=es1000AcctBportC3RxWords, es1000SysMfg=es1000SysMfg, es1000LoopPrincipal=es1000LoopPrincipal, es1000AcctBportC3OutFrames=es1000AcctBportC3OutFrames, es1000AcctHportC2InOctets=es1000AcctHportC2InOctets, es1000PortHportEntry=es1000PortHportEntry, es1000LoopStatus=es1000LoopStatus, es1000AcctBportC2InFrames=es1000AcctBportC2InFrames, es1000AcctHportIndex=es1000AcctHportIndex, es1000LoopSwitched=es1000LoopSwitched, Es1000PortCount=Es1000PortCount, es1000SysAdmStatus=es1000SysAdmStatus, es1000AcctHportRxThroughputPercent=es1000AcctHportRxThroughputPercent, es1000SysCurrentDate=es1000SysCurrentDate, es1000PortBportPhyState=es1000PortBportPhyState, fcSwitch=fcSwitch, es1000PortBportTable=es1000PortBportTable, es1000PortBportOpStatus=es1000PortBportOpStatus, es1000AcctHportC3InFrames=es1000AcctHportC3InFrames, es1000SysEcLevel=es1000SysEcLevel, es1000PortBportScn=es1000PortBportScn, es1000CompTable=es1000CompTable, es1000AcctBportRxThroughputPercent=es1000AcctBportRxThroughputPercent, es1000AcctBportC2TxWords=es1000AcctBportC2TxWords, es1000PortBportAdmStatus=es1000PortBportAdmStatus, es1000PortHportName=es1000PortHportName, es1000AcctHportRxWords=es1000AcctHportRxWords, es1000CompScn=es1000CompScn, es1000AcctHportConnectionsAborted=es1000AcctHportConnectionsAborted, es1000PortBportIndex=es1000PortBportIndex, Es1000PortStatus=Es1000PortStatus, es1000AcctBportInvalidCrcs=es1000AcctBportInvalidCrcs, es1000AcctBportLinkFailures=es1000AcctBportLinkFailures, es1000PortHportTable=es1000PortHportTable, es1000PortHportAdmStatus=es1000PortHportAdmStatus, Es1000PortPhyState=Es1000PortPhyState, Es1000LoopMasterWWN=Es1000LoopMasterWWN, es1000AcctHportTxFrames=es1000AcctHportTxFrames, es1000SysState=es1000SysState, es1000PortBportBlockedState=es1000PortBportBlockedState, es1000PortHportCount=es1000PortHportCount, es1000PortHportScn=es1000PortHportScn, es1000CompEntry=es1000CompEntry, es1000AcctBportLinkResetIns=es1000AcctBportLinkResetIns, es1000AcctBportC3InOctets=es1000AcctBportC3InOctets, es1000PortBportNumber=es1000PortBportNumber, es1000AcctBportC2OutOctets=es1000AcctBportC2OutOctets, es1000AcctBportC3TxWords=es1000AcctBportC3TxWords, es1000AcctBportFramesTooLong=es1000AcctBportFramesTooLong, es1000AcctHportSyncLosses=es1000AcctHportSyncLosses, es1000PortHportIndex=es1000PortHportIndex, es1000LoopMasterWWN=es1000LoopMasterWWN, es1000PortHportLipOnInsertion=es1000PortHportLipOnInsertion, es1000LoopPortIndex=es1000LoopPortIndex, es1000AcctBportLinkDown=es1000AcctBportLinkDown, es1000AcctHportC3RxWords=es1000AcctHportC3RxWords, es1000AcctBportC2RxWords=es1000AcctBportC2RxWords, es1000SysFirmwareVersion=es1000SysFirmwareVersion)
