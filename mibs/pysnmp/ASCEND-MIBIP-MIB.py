#
# PySNMP MIB module ASCEND-MIBIP-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/ASCEND-MIBIP-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 17:11:27 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
configuration, = mibBuilder.importSymbols("ASCEND-MIB", "configuration")
Integer, ObjectIdentifier, OctetString = mibBuilder.importSymbols("ASN1", "Integer", "ObjectIdentifier", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsUnion, ValueRangeConstraint, ValueSizeConstraint, ConstraintsIntersection, SingleValueConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsUnion", "ValueRangeConstraint", "ValueSizeConstraint", "ConstraintsIntersection", "SingleValueConstraint")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
Unsigned32, Bits, MibScalar, MibTable, MibTableRow, MibTableColumn, iso, Integer32, Counter32, ObjectIdentity, TimeTicks, MibIdentifier, IpAddress, Counter64, ModuleIdentity, Gauge32, NotificationType = mibBuilder.importSymbols("SNMPv2-SMI", "Unsigned32", "Bits", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "iso", "Integer32", "Counter32", "ObjectIdentity", "TimeTicks", "MibIdentifier", "IpAddress", "Counter64", "ModuleIdentity", "Gauge32", "NotificationType")
TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString")
class DisplayString(OctetString):
    pass

mibipInterfaceProfile = MibIdentifier((1, 3, 6, 1, 4, 1, 529, 23, 82))
mibipGlobalProfile = MibIdentifier((1, 3, 6, 1, 4, 1, 529, 23, 83))
mibipInterfaceProfileTable = MibTable((1, 3, 6, 1, 4, 1, 529, 23, 82, 1), )
if mibBuilder.loadTexts: mibipInterfaceProfileTable.setStatus('mandatory')
mibipInterfaceProfileEntry = MibTableRow((1, 3, 6, 1, 4, 1, 529, 23, 82, 1, 1), ).setIndexNames((0, "ASCEND-MIBIP-MIB", "ipInterfaceProfile-Shelf-o"), (0, "ASCEND-MIBIP-MIB", "ipInterfaceProfile-Slot-o"), (0, "ASCEND-MIBIP-MIB", "ipInterfaceProfile-Item-o"), (0, "ASCEND-MIBIP-MIB", "ipInterfaceProfile-LogicalItem-o"))
if mibBuilder.loadTexts: mibipInterfaceProfileEntry.setStatus('mandatory')
ipInterfaceProfile_Shelf_o = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 82, 1, 1, 1), Integer32()).setLabel("ipInterfaceProfile-Shelf-o").setMaxAccess("readonly")
if mibBuilder.loadTexts: ipInterfaceProfile_Shelf_o.setStatus('mandatory')
ipInterfaceProfile_Slot_o = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 82, 1, 1, 2), Integer32()).setLabel("ipInterfaceProfile-Slot-o").setMaxAccess("readonly")
if mibBuilder.loadTexts: ipInterfaceProfile_Slot_o.setStatus('mandatory')
ipInterfaceProfile_Item_o = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 82, 1, 1, 3), Integer32()).setLabel("ipInterfaceProfile-Item-o").setMaxAccess("readonly")
if mibBuilder.loadTexts: ipInterfaceProfile_Item_o.setStatus('mandatory')
ipInterfaceProfile_LogicalItem_o = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 82, 1, 1, 4), Integer32()).setLabel("ipInterfaceProfile-LogicalItem-o").setMaxAccess("readonly")
if mibBuilder.loadTexts: ipInterfaceProfile_LogicalItem_o.setStatus('mandatory')
ipInterfaceProfile_InterfaceAddress_PhysicalAddress_Shelf = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 82, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10))).clone(namedValues=NamedValues(("anyShelf", 1), ("shelf1", 2), ("shelf2", 3), ("shelf3", 4), ("shelf4", 5), ("shelf5", 6), ("shelf6", 7), ("shelf7", 8), ("shelf8", 9), ("shelf9", 10)))).setLabel("ipInterfaceProfile-InterfaceAddress-PhysicalAddress-Shelf").setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipInterfaceProfile_InterfaceAddress_PhysicalAddress_Shelf.setStatus('mandatory')
ipInterfaceProfile_InterfaceAddress_PhysicalAddress_Slot = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 82, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 55, 56, 57, 58, 49, 50, 42, 53, 54, 45, 46, 51, 59))).clone(namedValues=NamedValues(("anySlot", 1), ("slot1", 2), ("slot2", 3), ("slot3", 4), ("slot4", 5), ("slot5", 6), ("slot6", 7), ("slot7", 8), ("slot8", 9), ("slot9", 10), ("slot10", 11), ("slot11", 12), ("slot12", 13), ("slot13", 14), ("slot14", 15), ("slot15", 16), ("slot16", 17), ("slot17", 18), ("slot18", 19), ("slot19", 20), ("slot20", 21), ("slot21", 22), ("slot22", 23), ("slot23", 24), ("slot24", 25), ("slot25", 26), ("slot26", 27), ("slot27", 28), ("slot28", 29), ("slot29", 30), ("slot30", 31), ("slot31", 32), ("slot32", 33), ("slot33", 34), ("slot34", 35), ("slot35", 36), ("slot36", 37), ("slot37", 38), ("slot38", 39), ("slot39", 40), ("slot40", 41), ("aLim", 55), ("bLim", 56), ("cLim", 57), ("dLim", 58), ("leftController", 49), ("rightController", 50), ("controller", 42), ("firstControlModule", 53), ("secondControlModule", 54), ("trunkModule1", 45), ("trunkModule2", 46), ("controlModule", 51), ("slotPrimary", 59)))).setLabel("ipInterfaceProfile-InterfaceAddress-PhysicalAddress-Slot").setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipInterfaceProfile_InterfaceAddress_PhysicalAddress_Slot.setStatus('mandatory')
ipInterfaceProfile_InterfaceAddress_PhysicalAddress_ItemNumber = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 82, 1, 1, 7), Integer32()).setLabel("ipInterfaceProfile-InterfaceAddress-PhysicalAddress-ItemNumber").setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipInterfaceProfile_InterfaceAddress_PhysicalAddress_ItemNumber.setStatus('mandatory')
ipInterfaceProfile_InterfaceAddress_LogicalItem = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 82, 1, 1, 8), Integer32()).setLabel("ipInterfaceProfile-InterfaceAddress-LogicalItem").setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipInterfaceProfile_InterfaceAddress_LogicalItem.setStatus('mandatory')
ipInterfaceProfile_IpAddress = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 82, 1, 1, 9), IpAddress()).setLabel("ipInterfaceProfile-IpAddress").setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipInterfaceProfile_IpAddress.setStatus('mandatory')
ipInterfaceProfile_Netmask = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 82, 1, 1, 43), IpAddress()).setLabel("ipInterfaceProfile-Netmask").setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipInterfaceProfile_Netmask.setStatus('mandatory')
ipInterfaceProfile_o2ndIpAddress = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 82, 1, 1, 10), IpAddress()).setLabel("ipInterfaceProfile-o2ndIpAddress").setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipInterfaceProfile_o2ndIpAddress.setStatus('mandatory')
ipInterfaceProfile_Netmask2 = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 82, 1, 1, 44), IpAddress()).setLabel("ipInterfaceProfile-Netmask2").setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipInterfaceProfile_Netmask2.setStatus('mandatory')
ipInterfaceProfile_ProxyMode = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 82, 1, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("off", 1), ("active", 2), ("inactive", 3), ("always", 4)))).setLabel("ipInterfaceProfile-ProxyMode").setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipInterfaceProfile_ProxyMode.setStatus('mandatory')
ipInterfaceProfile_RipMode = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 82, 1, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("routingOff", 1), ("routingSendOnly", 2), ("routingRecvOnly", 3), ("routingSendAndRecv", 4), ("routingSendOnlyV2", 5), ("routingRecvOnlyV2", 6), ("routingSendAndRecvV2", 7)))).setLabel("ipInterfaceProfile-RipMode").setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipInterfaceProfile_RipMode.setStatus('mandatory')
ipInterfaceProfile_o2ndRipMode = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 82, 1, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("routingOff", 1), ("routingSendOnly", 2), ("routingRecvOnly", 3), ("routingSendAndRecv", 4), ("routingSendOnlyV2", 5), ("routingRecvOnlyV2", 6), ("routingSendAndRecvV2", 7)))).setLabel("ipInterfaceProfile-o2ndRipMode").setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipInterfaceProfile_o2ndRipMode.setStatus('mandatory')
ipInterfaceProfile_RouteFilter = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 82, 1, 1, 14), DisplayString()).setLabel("ipInterfaceProfile-RouteFilter").setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipInterfaceProfile_RouteFilter.setStatus('mandatory')
ipInterfaceProfile_Rip2UseMulticast = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 82, 1, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setLabel("ipInterfaceProfile-Rip2UseMulticast").setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipInterfaceProfile_Rip2UseMulticast.setStatus('mandatory')
ipInterfaceProfile_Ospf_Active = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 82, 1, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setLabel("ipInterfaceProfile-Ospf-Active").setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipInterfaceProfile_Ospf_Active.setStatus('mandatory')
ipInterfaceProfile_Ospf_Area = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 82, 1, 1, 17), IpAddress()).setLabel("ipInterfaceProfile-Ospf-Area").setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipInterfaceProfile_Ospf_Area.setStatus('mandatory')
ipInterfaceProfile_Ospf_AreaType = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 82, 1, 1, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("normal", 1), ("stub", 2), ("nSSA", 3)))).setLabel("ipInterfaceProfile-Ospf-AreaType").setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipInterfaceProfile_Ospf_AreaType.setStatus('mandatory')
ipInterfaceProfile_Ospf_HelloInterval = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 82, 1, 1, 19), Integer32()).setLabel("ipInterfaceProfile-Ospf-HelloInterval").setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipInterfaceProfile_Ospf_HelloInterval.setStatus('mandatory')
ipInterfaceProfile_Ospf_DeadInterval = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 82, 1, 1, 20), Integer32()).setLabel("ipInterfaceProfile-Ospf-DeadInterval").setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipInterfaceProfile_Ospf_DeadInterval.setStatus('mandatory')
ipInterfaceProfile_Ospf_Priority = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 82, 1, 1, 21), Integer32()).setLabel("ipInterfaceProfile-Ospf-Priority").setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipInterfaceProfile_Ospf_Priority.setStatus('mandatory')
ipInterfaceProfile_Ospf_AuthenType = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 82, 1, 1, 22), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("none", 1), ("simple", 2), ("md5", 3)))).setLabel("ipInterfaceProfile-Ospf-AuthenType").setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipInterfaceProfile_Ospf_AuthenType.setStatus('mandatory')
ipInterfaceProfile_Ospf_AuthKey = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 82, 1, 1, 23), DisplayString()).setLabel("ipInterfaceProfile-Ospf-AuthKey").setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipInterfaceProfile_Ospf_AuthKey.setStatus('mandatory')
ipInterfaceProfile_Ospf_KeyId = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 82, 1, 1, 24), Integer32()).setLabel("ipInterfaceProfile-Ospf-KeyId").setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipInterfaceProfile_Ospf_KeyId.setStatus('mandatory')
ipInterfaceProfile_Ospf_Cost = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 82, 1, 1, 25), Integer32()).setLabel("ipInterfaceProfile-Ospf-Cost").setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipInterfaceProfile_Ospf_Cost.setStatus('mandatory')
ipInterfaceProfile_Ospf_DownCost = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 82, 1, 1, 26), Integer32()).setLabel("ipInterfaceProfile-Ospf-DownCost").setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipInterfaceProfile_Ospf_DownCost.setStatus('mandatory')
ipInterfaceProfile_Ospf_AseType = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 82, 1, 1, 27), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("type1", 1), ("type2", 2)))).setLabel("ipInterfaceProfile-Ospf-AseType").setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipInterfaceProfile_Ospf_AseType.setStatus('mandatory')
ipInterfaceProfile_Ospf_AseTag = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 82, 1, 1, 28), DisplayString()).setLabel("ipInterfaceProfile-Ospf-AseTag").setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipInterfaceProfile_Ospf_AseTag.setStatus('mandatory')
ipInterfaceProfile_Ospf_TransitDelay = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 82, 1, 1, 29), Integer32()).setLabel("ipInterfaceProfile-Ospf-TransitDelay").setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipInterfaceProfile_Ospf_TransitDelay.setStatus('mandatory')
ipInterfaceProfile_Ospf_RetransmitInterval = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 82, 1, 1, 30), Integer32()).setLabel("ipInterfaceProfile-Ospf-RetransmitInterval").setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipInterfaceProfile_Ospf_RetransmitInterval.setStatus('mandatory')
ipInterfaceProfile_Ospf_NonMulticast = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 82, 1, 1, 31), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setLabel("ipInterfaceProfile-Ospf-NonMulticast").setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipInterfaceProfile_Ospf_NonMulticast.setStatus('mandatory')
ipInterfaceProfile_Ospf_NetworkType = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 82, 1, 1, 32), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3, 4))).clone(namedValues=NamedValues(("broadcast", 2), ("nonBroadcast", 3), ("pointToPoint", 4)))).setLabel("ipInterfaceProfile-Ospf-NetworkType").setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipInterfaceProfile_Ospf_NetworkType.setStatus('mandatory')
ipInterfaceProfile_Ospf_PollInterval = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 82, 1, 1, 33), Integer32()).setLabel("ipInterfaceProfile-Ospf-PollInterval").setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipInterfaceProfile_Ospf_PollInterval.setStatus('mandatory')
ipInterfaceProfile_Ospf_Md5AuthKey = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 82, 1, 1, 34), DisplayString()).setLabel("ipInterfaceProfile-Ospf-Md5AuthKey").setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipInterfaceProfile_Ospf_Md5AuthKey.setStatus('mandatory')
ipInterfaceProfile_MulticastAllowed = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 82, 1, 1, 35), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setLabel("ipInterfaceProfile-MulticastAllowed").setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipInterfaceProfile_MulticastAllowed.setStatus('mandatory')
ipInterfaceProfile_MulticastRateLimit = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 82, 1, 1, 36), Integer32()).setLabel("ipInterfaceProfile-MulticastRateLimit").setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipInterfaceProfile_MulticastRateLimit.setStatus('mandatory')
ipInterfaceProfile_MulticastGroupLeaveDelay = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 82, 1, 1, 37), Integer32()).setLabel("ipInterfaceProfile-MulticastGroupLeaveDelay").setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipInterfaceProfile_MulticastGroupLeaveDelay.setStatus('mandatory')
ipInterfaceProfile_DirectedBroadcastAllowed = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 82, 1, 1, 38), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setLabel("ipInterfaceProfile-DirectedBroadcastAllowed").setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipInterfaceProfile_DirectedBroadcastAllowed.setStatus('mandatory')
ipInterfaceProfile_Vrouter = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 82, 1, 1, 39), DisplayString()).setLabel("ipInterfaceProfile-Vrouter").setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipInterfaceProfile_Vrouter.setStatus('mandatory')
ipInterfaceProfile_ManagementOnlyInterface = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 82, 1, 1, 40), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setLabel("ipInterfaceProfile-ManagementOnlyInterface").setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipInterfaceProfile_ManagementOnlyInterface.setStatus('mandatory')
ipInterfaceProfile_DhcpClientEnabled = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 82, 1, 1, 41), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setLabel("ipInterfaceProfile-DhcpClientEnabled").setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipInterfaceProfile_DhcpClientEnabled.setStatus('mandatory')
ipInterfaceProfile_NatProfileName = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 82, 1, 1, 45), DisplayString()).setLabel("ipInterfaceProfile-NatProfileName").setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipInterfaceProfile_NatProfileName.setStatus('mandatory')
ipInterfaceProfile_AddressRealm = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 82, 1, 1, 46), Integer32()).setLabel("ipInterfaceProfile-AddressRealm").setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipInterfaceProfile_AddressRealm.setStatus('mandatory')
ipInterfaceProfile_VlanEnabled = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 82, 1, 1, 47), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setLabel("ipInterfaceProfile-VlanEnabled").setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipInterfaceProfile_VlanEnabled.setStatus('mandatory')
ipInterfaceProfile_Action_o = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 82, 1, 1, 42), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("noAction", 1), ("createProfile", 2), ("deleteProfile", 3)))).setLabel("ipInterfaceProfile-Action-o").setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipInterfaceProfile_Action_o.setStatus('mandatory')
mibipGlobalProfileTable = MibTable((1, 3, 6, 1, 4, 1, 529, 23, 83, 1), )
if mibBuilder.loadTexts: mibipGlobalProfileTable.setStatus('mandatory')
mibipGlobalProfileEntry = MibTableRow((1, 3, 6, 1, 4, 1, 529, 23, 83, 1, 1), ).setIndexNames((0, "ASCEND-MIBIP-MIB", "ipGlobalProfile-Index-o"))
if mibBuilder.loadTexts: mibipGlobalProfileEntry.setStatus('mandatory')
ipGlobalProfile_Index_o = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 83, 1, 1, 1), Integer32()).setLabel("ipGlobalProfile-Index-o").setMaxAccess("readonly")
if mibBuilder.loadTexts: ipGlobalProfile_Index_o.setStatus('mandatory')
ipGlobalProfile_DomainName = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 83, 1, 1, 2), DisplayString()).setLabel("ipGlobalProfile-DomainName").setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipGlobalProfile_DomainName.setStatus('mandatory')
ipGlobalProfile_DnsPrimaryServer = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 83, 1, 1, 3), IpAddress()).setLabel("ipGlobalProfile-DnsPrimaryServer").setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipGlobalProfile_DnsPrimaryServer.setStatus('mandatory')
ipGlobalProfile_DhcpServer_Active = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 83, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setLabel("ipGlobalProfile-DhcpServer-Active").setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipGlobalProfile_DhcpServer_Active.setStatus('mandatory')
ipGlobalProfile_DhcpServer_LeaseDuration = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 83, 1, 1, 5), Integer32()).setLabel("ipGlobalProfile-DhcpServer-LeaseDuration").setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipGlobalProfile_DhcpServer_LeaseDuration.setStatus('mandatory')
ipGlobalProfile_DhcpServer_DefaultPool = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 83, 1, 1, 6), Integer32()).setLabel("ipGlobalProfile-DhcpServer-DefaultPool").setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipGlobalProfile_DhcpServer_DefaultPool.setStatus('mandatory')
ipGlobalProfile_DhcpServer_DefaultMaxLease = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 83, 1, 1, 7), Integer32()).setLabel("ipGlobalProfile-DhcpServer-DefaultMaxLease").setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipGlobalProfile_DhcpServer_DefaultMaxLease.setStatus('mandatory')
ipGlobalProfile_DhcpServer_DefaultLeaseDuration = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 83, 1, 1, 8), Integer32()).setLabel("ipGlobalProfile-DhcpServer-DefaultLeaseDuration").setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipGlobalProfile_DhcpServer_DefaultLeaseDuration.setStatus('mandatory')
ipGlobalProfile_DhcpServer_TftpHostName = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 83, 1, 1, 9), DisplayString()).setLabel("ipGlobalProfile-DhcpServer-TftpHostName").setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipGlobalProfile_DhcpServer_TftpHostName.setStatus('mandatory')
ipGlobalProfile_DhcpServer_BootFilePath = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 83, 1, 1, 10), DisplayString()).setLabel("ipGlobalProfile-DhcpServer-BootFilePath").setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipGlobalProfile_DhcpServer_BootFilePath.setStatus('mandatory')
ipGlobalProfile_DhcpServer_ServerAddress = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 83, 1, 1, 11), IpAddress()).setLabel("ipGlobalProfile-DhcpServer-ServerAddress").setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipGlobalProfile_DhcpServer_ServerAddress.setStatus('mandatory')
ipGlobalProfile_DnsSecondaryServer = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 83, 1, 1, 12), IpAddress()).setLabel("ipGlobalProfile-DnsSecondaryServer").setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipGlobalProfile_DnsSecondaryServer.setStatus('mandatory')
ipGlobalProfile_DnsServerQueryType = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 83, 1, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("udp", 1), ("udpIgnoreTcBit", 2), ("tcp", 3), ("tcpKeepOpen", 4)))).setLabel("ipGlobalProfile-DnsServerQueryType").setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipGlobalProfile_DnsServerQueryType.setStatus('mandatory')
ipGlobalProfile_SystemIpAddr = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 83, 1, 1, 14), IpAddress()).setLabel("ipGlobalProfile-SystemIpAddr").setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipGlobalProfile_SystemIpAddr.setStatus('mandatory')
ipGlobalProfile_NetbiosPrimaryNs = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 83, 1, 1, 15), IpAddress()).setLabel("ipGlobalProfile-NetbiosPrimaryNs").setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipGlobalProfile_NetbiosPrimaryNs.setStatus('mandatory')
ipGlobalProfile_NetbiosSecondaryNs = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 83, 1, 1, 16), IpAddress()).setLabel("ipGlobalProfile-NetbiosSecondaryNs").setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipGlobalProfile_NetbiosSecondaryNs.setStatus('mandatory')
ipGlobalProfile_MustAcceptAddressAssign = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 83, 1, 1, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setLabel("ipGlobalProfile-MustAcceptAddressAssign").setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipGlobalProfile_MustAcceptAddressAssign.setStatus('mandatory')
ipGlobalProfile_PoolSummary = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 83, 1, 1, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setLabel("ipGlobalProfile-PoolSummary").setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipGlobalProfile_PoolSummary.setStatus('mandatory')
ipGlobalProfile_PoolChaining = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 83, 1, 1, 19), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setLabel("ipGlobalProfile-PoolChaining").setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipGlobalProfile_PoolChaining.setStatus('mandatory')
ipGlobalProfile_PoolOspfAdvType = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 83, 1, 1, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("type1", 1), ("type2", 2), ("internal", 3)))).setLabel("ipGlobalProfile-PoolOspfAdvType").setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipGlobalProfile_PoolOspfAdvType.setStatus('mandatory')
ipGlobalProfile_RipPolicy = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 83, 1, 1, 21), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("splitHorzn", 1), ("poisonRvrs", 2)))).setLabel("ipGlobalProfile-RipPolicy").setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipGlobalProfile_RipPolicy.setStatus('mandatory')
ipGlobalProfile_RipOptions_MaxMultipathOrBackupRoutes = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 83, 1, 1, 93), Integer32()).setLabel("ipGlobalProfile-RipOptions-MaxMultipathOrBackupRoutes").setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipGlobalProfile_RipOptions_MaxMultipathOrBackupRoutes.setStatus('mandatory')
ipGlobalProfile_SummarizeRipRoutes = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 83, 1, 1, 22), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setLabel("ipGlobalProfile-SummarizeRipRoutes").setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipGlobalProfile_SummarizeRipRoutes.setStatus('mandatory')
ipGlobalProfile_RipTrigger = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 83, 1, 1, 23), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setLabel("ipGlobalProfile-RipTrigger").setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipGlobalProfile_RipTrigger.setStatus('mandatory')
ipGlobalProfile_MinRipTriggerDelay = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 83, 1, 1, 85), Integer32()).setLabel("ipGlobalProfile-MinRipTriggerDelay").setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipGlobalProfile_MinRipTriggerDelay.setStatus('mandatory')
ipGlobalProfile_MaxRipTriggerDelay = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 83, 1, 1, 86), Integer32()).setLabel("ipGlobalProfile-MaxRipTriggerDelay").setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipGlobalProfile_MaxRipTriggerDelay.setStatus('mandatory')
ipGlobalProfile_BootpEnabled = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 83, 1, 1, 24), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setLabel("ipGlobalProfile-BootpEnabled").setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipGlobalProfile_BootpEnabled.setStatus('mandatory')
ipGlobalProfile_BootpRelay_Active = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 83, 1, 1, 25), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setLabel("ipGlobalProfile-BootpRelay-Active").setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipGlobalProfile_BootpRelay_Active.setStatus('mandatory')
ipGlobalProfile_DropSourceRoutedIpPackets = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 83, 1, 1, 26), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setLabel("ipGlobalProfile-DropSourceRoutedIpPackets").setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipGlobalProfile_DropSourceRoutedIpPackets.setStatus('mandatory')
ipGlobalProfile_IgnoreDefRoute = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 83, 1, 1, 27), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setLabel("ipGlobalProfile-IgnoreDefRoute").setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipGlobalProfile_IgnoreDefRoute.setStatus('mandatory')
ipGlobalProfile_RarpEnabled = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 83, 1, 1, 28), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setLabel("ipGlobalProfile-RarpEnabled").setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipGlobalProfile_RarpEnabled.setStatus('mandatory')
ipGlobalProfile_UdpCksum = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 83, 1, 1, 29), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setLabel("ipGlobalProfile-UdpCksum").setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipGlobalProfile_UdpCksum.setStatus('mandatory')
ipGlobalProfile_TcpTimeout = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 83, 1, 1, 30), Integer32()).setLabel("ipGlobalProfile-TcpTimeout").setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipGlobalProfile_TcpTimeout.setStatus('mandatory')
ipGlobalProfile_DialoutPoison = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 83, 1, 1, 31), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setLabel("ipGlobalProfile-DialoutPoison").setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipGlobalProfile_DialoutPoison.setStatus('mandatory')
ipGlobalProfile_TelnetPassword = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 83, 1, 1, 32), DisplayString()).setLabel("ipGlobalProfile-TelnetPassword").setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipGlobalProfile_TelnetPassword.setStatus('mandatory')
ipGlobalProfile_UserProfile = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 83, 1, 1, 33), DisplayString()).setLabel("ipGlobalProfile-UserProfile").setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipGlobalProfile_UserProfile.setStatus('mandatory')
ipGlobalProfile_SharedProf = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 83, 1, 1, 34), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setLabel("ipGlobalProfile-SharedProf").setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipGlobalProfile_SharedProf.setStatus('mandatory')
ipGlobalProfile_DnsListAttempt = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 83, 1, 1, 35), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setLabel("ipGlobalProfile-DnsListAttempt").setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipGlobalProfile_DnsListAttempt.setStatus('mandatory')
ipGlobalProfile_StaticPref = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 83, 1, 1, 36), Integer32()).setLabel("ipGlobalProfile-StaticPref").setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipGlobalProfile_StaticPref.setStatus('mandatory')
ipGlobalProfile_RipPref = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 83, 1, 1, 37), Integer32()).setLabel("ipGlobalProfile-RipPref").setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipGlobalProfile_RipPref.setStatus('mandatory')
ipGlobalProfile_RipQueueDepth = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 83, 1, 1, 38), Integer32()).setLabel("ipGlobalProfile-RipQueueDepth").setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipGlobalProfile_RipQueueDepth.setStatus('mandatory')
ipGlobalProfile_OspfPref = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 83, 1, 1, 39), Integer32()).setLabel("ipGlobalProfile-OspfPref").setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipGlobalProfile_OspfPref.setStatus('mandatory')
ipGlobalProfile_OspfAsePref = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 83, 1, 1, 40), Integer32()).setLabel("ipGlobalProfile-OspfAsePref").setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipGlobalProfile_OspfAsePref.setStatus('mandatory')
ipGlobalProfile_OspfGlobal_Enable = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 83, 1, 1, 41), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setLabel("ipGlobalProfile-OspfGlobal-Enable").setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipGlobalProfile_OspfGlobal_Enable.setStatus('mandatory')
ipGlobalProfile_OspfGlobal_AsBoundaryRouter = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 83, 1, 1, 42), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setLabel("ipGlobalProfile-OspfGlobal-AsBoundaryRouter").setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipGlobalProfile_OspfGlobal_AsBoundaryRouter.setStatus('mandatory')
ipGlobalProfile_OspfGlobal_OspfMaxLsa = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 83, 1, 1, 43), Integer32()).setLabel("ipGlobalProfile-OspfGlobal-OspfMaxLsa").setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipGlobalProfile_OspfGlobal_OspfMaxLsa.setStatus('mandatory')
ipGlobalProfile_RipTag = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 83, 1, 1, 44), DisplayString()).setLabel("ipGlobalProfile-RipTag").setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipGlobalProfile_RipTag.setStatus('mandatory')
ipGlobalProfile_RipAseType = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 83, 1, 1, 45), Integer32()).setLabel("ipGlobalProfile-RipAseType").setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipGlobalProfile_RipAseType.setStatus('mandatory')
ipGlobalProfile_IprouteCacheEnable = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 83, 1, 1, 46), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setLabel("ipGlobalProfile-IprouteCacheEnable").setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipGlobalProfile_IprouteCacheEnable.setStatus('mandatory')
ipGlobalProfile_IprouteCacheSize = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 83, 1, 1, 47), Integer32()).setLabel("ipGlobalProfile-IprouteCacheSize").setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipGlobalProfile_IprouteCacheSize.setStatus('mandatory')
ipGlobalProfile_IpportCacheEnable = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 83, 1, 1, 48), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setLabel("ipGlobalProfile-IpportCacheEnable").setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipGlobalProfile_IpportCacheEnable.setStatus('mandatory')
ipGlobalProfile_SuppressHostRoutes = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 83, 1, 1, 49), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setLabel("ipGlobalProfile-SuppressHostRoutes").setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipGlobalProfile_SuppressHostRoutes.setStatus('mandatory')
ipGlobalProfile_SntpInfo_Enabled = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 83, 1, 1, 50), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("sntpDisabled", 1), ("sntpEnabled", 2), ("sntpPassive", 3)))).setLabel("ipGlobalProfile-SntpInfo-Enabled").setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipGlobalProfile_SntpInfo_Enabled.setStatus('mandatory')
ipGlobalProfile_SntpInfo_oGMTOffset = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 83, 1, 1, 51), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(-41399, -39599, -37799, -35999, -34199, -32399, -30599, -28799, -26999, -25199, -23399, -21599, -19799, -17999, -16199, -14399, -12599, -10799, -8999, -7199, -5399, -3599, -1799, 1, 1801, 3601, 5401, 7201, 9001, 10801, 12601, 14401, 16201, 18001, 19801, 21601, 23401, 25201, 27001, 28801, 30601, 32401, 34201, 36001, 37801, 39601, 41401, 43201, 45001, 46801))).clone(namedValues=NamedValues(("utc1130", -41399), ("utc1100", -39599), ("utc1030", -37799), ("utc1000", -35999), ("utc0930", -34199), ("utc0900", -32399), ("utc0830", -30599), ("utc0800", -28799), ("utc0730", -26999), ("utc0700", -25199), ("utc0630", -23399), ("utc0600", -21599), ("utc0530", -19799), ("utc0500", -17999), ("utc0430", -16199), ("utc0400", -14399), ("utc0330", -12599), ("utc0300", -10799), ("utc0230", -8999), ("utc0200", -7199), ("utc0130", -5399), ("utc0100", -3599), ("utc0030", -1799), ("utc-plus-0000", 1), ("utc-plus-0030", 1801), ("utc-plus-0100", 3601), ("utc-plus-0130", 5401), ("utc-plus-0200", 7201), ("utc-plus-0230", 9001), ("utc-plus-0300", 10801), ("utc-plus-0330", 12601), ("utc-plus-0400", 14401), ("utc-plus-0430", 16201), ("utc-plus-0500", 18001), ("utc-plus-0530", 19801), ("utc-plus-0600", 21601), ("utc-plus-0630", 23401), ("utc-plus-0700", 25201), ("utc-plus-0730", 27001), ("utc-plus-0800", 28801), ("utc-plus-0830", 30601), ("utc-plus-0900", 32401), ("utc-plus-0930", 34201), ("utc-plus-1000", 36001), ("utc-plus-1030", 37801), ("utc-plus-1100", 39601), ("utc-plus-1130", 41401), ("utc-plus-1200", 43201), ("utc-plus-1230", 45001), ("utc-plus-1300", 46801)))).setLabel("ipGlobalProfile-SntpInfo-oGMTOffset").setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipGlobalProfile_SntpInfo_oGMTOffset.setStatus('mandatory')
ipGlobalProfile_SntpInfo_UpdateThreshold = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 83, 1, 1, 52), Integer32()).setLabel("ipGlobalProfile-SntpInfo-UpdateThreshold").setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipGlobalProfile_SntpInfo_UpdateThreshold.setStatus('mandatory')
ipGlobalProfile_SntpInfo_UpdateInterval = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 83, 1, 1, 87), Integer32()).setLabel("ipGlobalProfile-SntpInfo-UpdateInterval").setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipGlobalProfile_SntpInfo_UpdateInterval.setStatus('mandatory')
ipGlobalProfile_DnsListSize = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 83, 1, 1, 53), Integer32()).setLabel("ipGlobalProfile-DnsListSize").setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipGlobalProfile_DnsListSize.setStatus('mandatory')
ipGlobalProfile_ClientPrimaryDnsServer = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 83, 1, 1, 54), IpAddress()).setLabel("ipGlobalProfile-ClientPrimaryDnsServer").setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipGlobalProfile_ClientPrimaryDnsServer.setStatus('mandatory')
ipGlobalProfile_ClientSecondaryDnsServer = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 83, 1, 1, 55), IpAddress()).setLabel("ipGlobalProfile-ClientSecondaryDnsServer").setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipGlobalProfile_ClientSecondaryDnsServer.setStatus('mandatory')
ipGlobalProfile_AllowAsClientDnsInfo = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 83, 1, 1, 56), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("false", 1), ("true", 2)))).setLabel("ipGlobalProfile-AllowAsClientDnsInfo").setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipGlobalProfile_AllowAsClientDnsInfo.setStatus('mandatory')
ipGlobalProfile_DnsLocalTable_Enabled = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 83, 1, 1, 57), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setLabel("ipGlobalProfile-DnsLocalTable-Enabled").setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipGlobalProfile_DnsLocalTable_Enabled.setStatus('mandatory')
ipGlobalProfile_DnsLocalTable_AutoUpdate = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 83, 1, 1, 58), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setLabel("ipGlobalProfile-DnsLocalTable-AutoUpdate").setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipGlobalProfile_DnsLocalTable_AutoUpdate.setStatus('mandatory')
ipGlobalProfile_MulticastForwarding = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 83, 1, 1, 59), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setLabel("ipGlobalProfile-MulticastForwarding").setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipGlobalProfile_MulticastForwarding.setStatus('mandatory')
ipGlobalProfile_MboneProfile = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 83, 1, 1, 60), DisplayString()).setLabel("ipGlobalProfile-MboneProfile").setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipGlobalProfile_MboneProfile.setStatus('mandatory')
ipGlobalProfile_MboneLanInterface_PhysicalAddress_Shelf = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 83, 1, 1, 61), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10))).clone(namedValues=NamedValues(("anyShelf", 1), ("shelf1", 2), ("shelf2", 3), ("shelf3", 4), ("shelf4", 5), ("shelf5", 6), ("shelf6", 7), ("shelf7", 8), ("shelf8", 9), ("shelf9", 10)))).setLabel("ipGlobalProfile-MboneLanInterface-PhysicalAddress-Shelf").setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipGlobalProfile_MboneLanInterface_PhysicalAddress_Shelf.setStatus('mandatory')
ipGlobalProfile_MboneLanInterface_PhysicalAddress_Slot = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 83, 1, 1, 62), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 55, 56, 57, 58, 49, 50, 42, 53, 54, 45, 46, 51, 59))).clone(namedValues=NamedValues(("anySlot", 1), ("slot1", 2), ("slot2", 3), ("slot3", 4), ("slot4", 5), ("slot5", 6), ("slot6", 7), ("slot7", 8), ("slot8", 9), ("slot9", 10), ("slot10", 11), ("slot11", 12), ("slot12", 13), ("slot13", 14), ("slot14", 15), ("slot15", 16), ("slot16", 17), ("slot17", 18), ("slot18", 19), ("slot19", 20), ("slot20", 21), ("slot21", 22), ("slot22", 23), ("slot23", 24), ("slot24", 25), ("slot25", 26), ("slot26", 27), ("slot27", 28), ("slot28", 29), ("slot29", 30), ("slot30", 31), ("slot31", 32), ("slot32", 33), ("slot33", 34), ("slot34", 35), ("slot35", 36), ("slot36", 37), ("slot37", 38), ("slot38", 39), ("slot39", 40), ("slot40", 41), ("aLim", 55), ("bLim", 56), ("cLim", 57), ("dLim", 58), ("leftController", 49), ("rightController", 50), ("controller", 42), ("firstControlModule", 53), ("secondControlModule", 54), ("trunkModule1", 45), ("trunkModule2", 46), ("controlModule", 51), ("slotPrimary", 59)))).setLabel("ipGlobalProfile-MboneLanInterface-PhysicalAddress-Slot").setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipGlobalProfile_MboneLanInterface_PhysicalAddress_Slot.setStatus('mandatory')
ipGlobalProfile_MboneLanInterface_PhysicalAddress_ItemNumber = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 83, 1, 1, 63), Integer32()).setLabel("ipGlobalProfile-MboneLanInterface-PhysicalAddress-ItemNumber").setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipGlobalProfile_MboneLanInterface_PhysicalAddress_ItemNumber.setStatus('mandatory')
ipGlobalProfile_MboneLanInterface_LogicalItem = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 83, 1, 1, 64), Integer32()).setLabel("ipGlobalProfile-MboneLanInterface-LogicalItem").setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipGlobalProfile_MboneLanInterface_LogicalItem.setStatus('mandatory')
ipGlobalProfile_MulticastHbeatAddr = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 83, 1, 1, 65), IpAddress()).setLabel("ipGlobalProfile-MulticastHbeatAddr").setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipGlobalProfile_MulticastHbeatAddr.setStatus('mandatory')
ipGlobalProfile_MulticastHbeatPort = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 83, 1, 1, 66), Integer32()).setLabel("ipGlobalProfile-MulticastHbeatPort").setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipGlobalProfile_MulticastHbeatPort.setStatus('mandatory')
ipGlobalProfile_MulticastHbeatSlotTime = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 83, 1, 1, 67), Integer32()).setLabel("ipGlobalProfile-MulticastHbeatSlotTime").setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipGlobalProfile_MulticastHbeatSlotTime.setStatus('mandatory')
ipGlobalProfile_MulticastHbeatNumberSlot = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 83, 1, 1, 68), Integer32()).setLabel("ipGlobalProfile-MulticastHbeatNumberSlot").setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipGlobalProfile_MulticastHbeatNumberSlot.setStatus('mandatory')
ipGlobalProfile_MulticastHbeatAlarmThreshold = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 83, 1, 1, 69), Integer32()).setLabel("ipGlobalProfile-MulticastHbeatAlarmThreshold").setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipGlobalProfile_MulticastHbeatAlarmThreshold.setStatus('mandatory')
ipGlobalProfile_MulticastHbeatSrcAddr = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 83, 1, 1, 70), IpAddress()).setLabel("ipGlobalProfile-MulticastHbeatSrcAddr").setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipGlobalProfile_MulticastHbeatSrcAddr.setStatus('mandatory')
ipGlobalProfile_MulticastHbeatSrcAddrMask = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 83, 1, 1, 71), IpAddress()).setLabel("ipGlobalProfile-MulticastHbeatSrcAddrMask").setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipGlobalProfile_MulticastHbeatSrcAddrMask.setStatus('mandatory')
ipGlobalProfile_SecDomainName = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 83, 1, 1, 72), DisplayString()).setLabel("ipGlobalProfile-SecDomainName").setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipGlobalProfile_SecDomainName.setStatus('mandatory')
ipGlobalProfile_MulticastMemberTimeout = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 83, 1, 1, 73), Integer32()).setLabel("ipGlobalProfile-MulticastMemberTimeout").setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipGlobalProfile_MulticastMemberTimeout.setStatus('mandatory')
ipGlobalProfile_Finger = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 83, 1, 1, 74), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setLabel("ipGlobalProfile-Finger").setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipGlobalProfile_Finger.setStatus('mandatory')
ipGlobalProfile_IgnoreIcmpRedirects = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 83, 1, 1, 75), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setLabel("ipGlobalProfile-IgnoreIcmpRedirects").setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipGlobalProfile_IgnoreIcmpRedirects.setStatus('mandatory')
ipGlobalProfile_IcmpReplyDirectedBcast = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 83, 1, 1, 76), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setLabel("ipGlobalProfile-IcmpReplyDirectedBcast").setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipGlobalProfile_IcmpReplyDirectedBcast.setStatus('mandatory')
ipGlobalProfile_SendIcmpDestUnreachable = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 83, 1, 1, 77), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setLabel("ipGlobalProfile-SendIcmpDestUnreachable").setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipGlobalProfile_SendIcmpDestUnreachable.setStatus('mandatory')
ipGlobalProfile_GlobalVrouter = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 83, 1, 1, 78), DisplayString()).setLabel("ipGlobalProfile-GlobalVrouter").setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipGlobalProfile_GlobalVrouter.setStatus('mandatory')
ipGlobalProfile_RouterId = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 83, 1, 1, 79), IpAddress()).setLabel("ipGlobalProfile-RouterId").setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipGlobalProfile_RouterId.setStatus('mandatory')
ipGlobalProfile_DefaultFilterCacheTime = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 83, 1, 1, 80), Integer32()).setLabel("ipGlobalProfile-DefaultFilterCacheTime").setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipGlobalProfile_DefaultFilterCacheTime.setStatus('mandatory')
ipGlobalProfile_DefaultPrtCacheTime = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 83, 1, 1, 81), Integer32()).setLabel("ipGlobalProfile-DefaultPrtCacheTime").setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipGlobalProfile_DefaultPrtCacheTime.setStatus('mandatory')
ipGlobalProfile_TcpSynFloodProtect = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 83, 1, 1, 82), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setLabel("ipGlobalProfile-TcpSynFloodProtect").setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipGlobalProfile_TcpSynFloodProtect.setStatus('mandatory')
ipGlobalProfile_ThrottleNoPortMatchUdpTrafficOnSlot = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 83, 1, 1, 83), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setLabel("ipGlobalProfile-ThrottleNoPortMatchUdpTrafficOnSlot").setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipGlobalProfile_ThrottleNoPortMatchUdpTrafficOnSlot.setStatus('mandatory')
ipGlobalProfile_IpsecOptions_Enabled = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 83, 1, 1, 88), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setLabel("ipGlobalProfile-IpsecOptions-Enabled").setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipGlobalProfile_IpsecOptions_Enabled.setStatus('mandatory')
ipGlobalProfile_IpsecOptions_SecurityPolicyDatabase = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 83, 1, 1, 89), DisplayString()).setLabel("ipGlobalProfile-IpsecOptions-SecurityPolicyDatabase").setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipGlobalProfile_IpsecOptions_SecurityPolicyDatabase.setStatus('mandatory')
ipGlobalProfile_DnsCacheEnable = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 83, 1, 1, 90), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setLabel("ipGlobalProfile-DnsCacheEnable").setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipGlobalProfile_DnsCacheEnable.setStatus('mandatory')
ipGlobalProfile_DnsAutoUpdateInterval = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 83, 1, 1, 91), Integer32()).setLabel("ipGlobalProfile-DnsAutoUpdateInterval").setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipGlobalProfile_DnsAutoUpdateInterval.setStatus('mandatory')
ipGlobalProfile_MboneTimeout = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 83, 1, 1, 92), Integer32()).setLabel("ipGlobalProfile-MboneTimeout").setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipGlobalProfile_MboneTimeout.setStatus('mandatory')
ipGlobalProfile_Action_o = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 83, 1, 1, 84), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("noAction", 1), ("createProfile", 2), ("deleteProfile", 3)))).setLabel("ipGlobalProfile-Action-o").setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipGlobalProfile_Action_o.setStatus('mandatory')
mibipGlobalProfile_MboneBackupTable = MibTable((1, 3, 6, 1, 4, 1, 529, 23, 83, 9), ).setLabel("mibipGlobalProfile-MboneBackupTable")
if mibBuilder.loadTexts: mibipGlobalProfile_MboneBackupTable.setStatus('mandatory')
mibipGlobalProfile_MboneBackupEntry = MibTableRow((1, 3, 6, 1, 4, 1, 529, 23, 83, 9, 1), ).setLabel("mibipGlobalProfile-MboneBackupEntry").setIndexNames((0, "ASCEND-MIBIP-MIB", "ipGlobalProfile-MboneBackup-Index-o"), (0, "ASCEND-MIBIP-MIB", "ipGlobalProfile-MboneBackup-Index1-o"))
if mibBuilder.loadTexts: mibipGlobalProfile_MboneBackupEntry.setStatus('mandatory')
ipGlobalProfile_MboneBackup_Index_o = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 83, 9, 1, 1), Integer32()).setLabel("ipGlobalProfile-MboneBackup-Index-o").setMaxAccess("readonly")
if mibBuilder.loadTexts: ipGlobalProfile_MboneBackup_Index_o.setStatus('mandatory')
ipGlobalProfile_MboneBackup_Index1_o = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 83, 9, 1, 2), Integer32()).setLabel("ipGlobalProfile-MboneBackup-Index1-o").setMaxAccess("readonly")
if mibBuilder.loadTexts: ipGlobalProfile_MboneBackup_Index1_o.setStatus('mandatory')
ipGlobalProfile_MboneBackup_Enabled = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 83, 9, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setLabel("ipGlobalProfile-MboneBackup-Enabled").setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipGlobalProfile_MboneBackup_Enabled.setStatus('mandatory')
ipGlobalProfile_MboneBackup_MboneProfile = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 83, 9, 1, 4), DisplayString()).setLabel("ipGlobalProfile-MboneBackup-MboneProfile").setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipGlobalProfile_MboneBackup_MboneProfile.setStatus('mandatory')
ipGlobalProfile_MboneBackup_MboneLanInterface_PhysicalAddress_Shelf = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 83, 9, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10))).clone(namedValues=NamedValues(("anyShelf", 1), ("shelf1", 2), ("shelf2", 3), ("shelf3", 4), ("shelf4", 5), ("shelf5", 6), ("shelf6", 7), ("shelf7", 8), ("shelf8", 9), ("shelf9", 10)))).setLabel("ipGlobalProfile-MboneBackup-MboneLanInterface-PhysicalAddress-Shelf").setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipGlobalProfile_MboneBackup_MboneLanInterface_PhysicalAddress_Shelf.setStatus('mandatory')
ipGlobalProfile_MboneBackup_MboneLanInterface_PhysicalAddress_Slot = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 83, 9, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 55, 56, 57, 58, 49, 50, 42, 53, 54, 45, 46, 51, 59))).clone(namedValues=NamedValues(("anySlot", 1), ("slot1", 2), ("slot2", 3), ("slot3", 4), ("slot4", 5), ("slot5", 6), ("slot6", 7), ("slot7", 8), ("slot8", 9), ("slot9", 10), ("slot10", 11), ("slot11", 12), ("slot12", 13), ("slot13", 14), ("slot14", 15), ("slot15", 16), ("slot16", 17), ("slot17", 18), ("slot18", 19), ("slot19", 20), ("slot20", 21), ("slot21", 22), ("slot22", 23), ("slot23", 24), ("slot24", 25), ("slot25", 26), ("slot26", 27), ("slot27", 28), ("slot28", 29), ("slot29", 30), ("slot30", 31), ("slot31", 32), ("slot32", 33), ("slot33", 34), ("slot34", 35), ("slot35", 36), ("slot36", 37), ("slot37", 38), ("slot38", 39), ("slot39", 40), ("slot40", 41), ("aLim", 55), ("bLim", 56), ("cLim", 57), ("dLim", 58), ("leftController", 49), ("rightController", 50), ("controller", 42), ("firstControlModule", 53), ("secondControlModule", 54), ("trunkModule1", 45), ("trunkModule2", 46), ("controlModule", 51), ("slotPrimary", 59)))).setLabel("ipGlobalProfile-MboneBackup-MboneLanInterface-PhysicalAddress-Slot").setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipGlobalProfile_MboneBackup_MboneLanInterface_PhysicalAddress_Slot.setStatus('mandatory')
ipGlobalProfile_MboneBackup_MboneLanInterface_PhysicalAddress_ItemNumber = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 83, 9, 1, 7), Integer32()).setLabel("ipGlobalProfile-MboneBackup-MboneLanInterface-PhysicalAddress-ItemNumber").setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipGlobalProfile_MboneBackup_MboneLanInterface_PhysicalAddress_ItemNumber.setStatus('mandatory')
ipGlobalProfile_MboneBackup_MboneLanInterface_LogicalItem = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 83, 9, 1, 8), Integer32()).setLabel("ipGlobalProfile-MboneBackup-MboneLanInterface-LogicalItem").setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipGlobalProfile_MboneBackup_MboneLanInterface_LogicalItem.setStatus('mandatory')
ipGlobalProfile_MboneBackup_MboneTimeout = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 83, 9, 1, 9), Integer32()).setLabel("ipGlobalProfile-MboneBackup-MboneTimeout").setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipGlobalProfile_MboneBackup_MboneTimeout.setStatus('mandatory')
mibipGlobalProfile_DnsLocalTable_TableConfigTable = MibTable((1, 3, 6, 1, 4, 1, 529, 23, 83, 2), ).setLabel("mibipGlobalProfile-DnsLocalTable-TableConfigTable")
if mibBuilder.loadTexts: mibipGlobalProfile_DnsLocalTable_TableConfigTable.setStatus('mandatory')
mibipGlobalProfile_DnsLocalTable_TableConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 529, 23, 83, 2, 1), ).setLabel("mibipGlobalProfile-DnsLocalTable-TableConfigEntry").setIndexNames((0, "ASCEND-MIBIP-MIB", "ipGlobalProfile-DnsLocalTable-TableConfig-Index-o"), (0, "ASCEND-MIBIP-MIB", "ipGlobalProfile-DnsLocalTable-TableConfig-Index1-o"))
if mibBuilder.loadTexts: mibipGlobalProfile_DnsLocalTable_TableConfigEntry.setStatus('mandatory')
ipGlobalProfile_DnsLocalTable_TableConfig_Index_o = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 83, 2, 1, 1), Integer32()).setLabel("ipGlobalProfile-DnsLocalTable-TableConfig-Index-o").setMaxAccess("readonly")
if mibBuilder.loadTexts: ipGlobalProfile_DnsLocalTable_TableConfig_Index_o.setStatus('mandatory')
ipGlobalProfile_DnsLocalTable_TableConfig_Index1_o = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 83, 2, 1, 2), Integer32()).setLabel("ipGlobalProfile-DnsLocalTable-TableConfig-Index1-o").setMaxAccess("readonly")
if mibBuilder.loadTexts: ipGlobalProfile_DnsLocalTable_TableConfig_Index1_o.setStatus('mandatory')
ipGlobalProfile_DnsLocalTable_TableConfig_HostName = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 83, 2, 1, 3), DisplayString()).setLabel("ipGlobalProfile-DnsLocalTable-TableConfig-HostName").setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipGlobalProfile_DnsLocalTable_TableConfig_HostName.setStatus('mandatory')
ipGlobalProfile_DnsLocalTable_TableConfig_IpAddress = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 83, 2, 1, 4), IpAddress()).setLabel("ipGlobalProfile-DnsLocalTable-TableConfig-IpAddress").setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipGlobalProfile_DnsLocalTable_TableConfig_IpAddress.setStatus('mandatory')
mibipGlobalProfile_SntpInfo_HostTable = MibTable((1, 3, 6, 1, 4, 1, 529, 23, 83, 3), ).setLabel("mibipGlobalProfile-SntpInfo-HostTable")
if mibBuilder.loadTexts: mibipGlobalProfile_SntpInfo_HostTable.setStatus('mandatory')
mibipGlobalProfile_SntpInfo_HostEntry = MibTableRow((1, 3, 6, 1, 4, 1, 529, 23, 83, 3, 1), ).setLabel("mibipGlobalProfile-SntpInfo-HostEntry").setIndexNames((0, "ASCEND-MIBIP-MIB", "ipGlobalProfile-SntpInfo-Host-Index-o"), (0, "ASCEND-MIBIP-MIB", "ipGlobalProfile-SntpInfo-Host-Index1-o"))
if mibBuilder.loadTexts: mibipGlobalProfile_SntpInfo_HostEntry.setStatus('mandatory')
ipGlobalProfile_SntpInfo_Host_Index_o = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 83, 3, 1, 1), Integer32()).setLabel("ipGlobalProfile-SntpInfo-Host-Index-o").setMaxAccess("readonly")
if mibBuilder.loadTexts: ipGlobalProfile_SntpInfo_Host_Index_o.setStatus('mandatory')
ipGlobalProfile_SntpInfo_Host_Index1_o = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 83, 3, 1, 2), Integer32()).setLabel("ipGlobalProfile-SntpInfo-Host-Index1-o").setMaxAccess("readonly")
if mibBuilder.loadTexts: ipGlobalProfile_SntpInfo_Host_Index1_o.setStatus('mandatory')
ipGlobalProfile_SntpInfo_Host = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 83, 3, 1, 3), IpAddress()).setLabel("ipGlobalProfile-SntpInfo-Host").setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipGlobalProfile_SntpInfo_Host.setStatus('mandatory')
mibipGlobalProfile_BootpRelay_BootpServersTable = MibTable((1, 3, 6, 1, 4, 1, 529, 23, 83, 4), ).setLabel("mibipGlobalProfile-BootpRelay-BootpServersTable")
if mibBuilder.loadTexts: mibipGlobalProfile_BootpRelay_BootpServersTable.setStatus('mandatory')
mibipGlobalProfile_BootpRelay_BootpServersEntry = MibTableRow((1, 3, 6, 1, 4, 1, 529, 23, 83, 4, 1), ).setLabel("mibipGlobalProfile-BootpRelay-BootpServersEntry").setIndexNames((0, "ASCEND-MIBIP-MIB", "ipGlobalProfile-BootpRelay-BootpServers-Index-o"), (0, "ASCEND-MIBIP-MIB", "ipGlobalProfile-BootpRelay-BootpServers-Index1-o"))
if mibBuilder.loadTexts: mibipGlobalProfile_BootpRelay_BootpServersEntry.setStatus('mandatory')
ipGlobalProfile_BootpRelay_BootpServers_Index_o = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 83, 4, 1, 1), Integer32()).setLabel("ipGlobalProfile-BootpRelay-BootpServers-Index-o").setMaxAccess("readonly")
if mibBuilder.loadTexts: ipGlobalProfile_BootpRelay_BootpServers_Index_o.setStatus('mandatory')
ipGlobalProfile_BootpRelay_BootpServers_Index1_o = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 83, 4, 1, 2), Integer32()).setLabel("ipGlobalProfile-BootpRelay-BootpServers-Index1-o").setMaxAccess("readonly")
if mibBuilder.loadTexts: ipGlobalProfile_BootpRelay_BootpServers_Index1_o.setStatus('mandatory')
ipGlobalProfile_BootpRelay_BootpServers = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 83, 4, 1, 3), IpAddress()).setLabel("ipGlobalProfile-BootpRelay-BootpServers").setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipGlobalProfile_BootpRelay_BootpServers.setStatus('mandatory')
mibipGlobalProfile_PoolNameTable = MibTable((1, 3, 6, 1, 4, 1, 529, 23, 83, 5), ).setLabel("mibipGlobalProfile-PoolNameTable")
if mibBuilder.loadTexts: mibipGlobalProfile_PoolNameTable.setStatus('mandatory')
mibipGlobalProfile_PoolNameEntry = MibTableRow((1, 3, 6, 1, 4, 1, 529, 23, 83, 5, 1), ).setLabel("mibipGlobalProfile-PoolNameEntry").setIndexNames((0, "ASCEND-MIBIP-MIB", "ipGlobalProfile-PoolName-Index-o"), (0, "ASCEND-MIBIP-MIB", "ipGlobalProfile-PoolName-Index1-o"))
if mibBuilder.loadTexts: mibipGlobalProfile_PoolNameEntry.setStatus('mandatory')
ipGlobalProfile_PoolName_Index_o = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 83, 5, 1, 1), Integer32()).setLabel("ipGlobalProfile-PoolName-Index-o").setMaxAccess("readonly")
if mibBuilder.loadTexts: ipGlobalProfile_PoolName_Index_o.setStatus('mandatory')
ipGlobalProfile_PoolName_Index1_o = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 83, 5, 1, 2), Integer32()).setLabel("ipGlobalProfile-PoolName-Index1-o").setMaxAccess("readonly")
if mibBuilder.loadTexts: ipGlobalProfile_PoolName_Index1_o.setStatus('mandatory')
ipGlobalProfile_PoolName = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 83, 5, 1, 3), DisplayString()).setLabel("ipGlobalProfile-PoolName").setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipGlobalProfile_PoolName.setStatus('mandatory')
mibipGlobalProfile_AssignCountTable = MibTable((1, 3, 6, 1, 4, 1, 529, 23, 83, 6), ).setLabel("mibipGlobalProfile-AssignCountTable")
if mibBuilder.loadTexts: mibipGlobalProfile_AssignCountTable.setStatus('mandatory')
mibipGlobalProfile_AssignCountEntry = MibTableRow((1, 3, 6, 1, 4, 1, 529, 23, 83, 6, 1), ).setLabel("mibipGlobalProfile-AssignCountEntry").setIndexNames((0, "ASCEND-MIBIP-MIB", "ipGlobalProfile-AssignCount-Index-o"), (0, "ASCEND-MIBIP-MIB", "ipGlobalProfile-AssignCount-Index1-o"))
if mibBuilder.loadTexts: mibipGlobalProfile_AssignCountEntry.setStatus('mandatory')
ipGlobalProfile_AssignCount_Index_o = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 83, 6, 1, 1), Integer32()).setLabel("ipGlobalProfile-AssignCount-Index-o").setMaxAccess("readonly")
if mibBuilder.loadTexts: ipGlobalProfile_AssignCount_Index_o.setStatus('mandatory')
ipGlobalProfile_AssignCount_Index1_o = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 83, 6, 1, 2), Integer32()).setLabel("ipGlobalProfile-AssignCount-Index1-o").setMaxAccess("readonly")
if mibBuilder.loadTexts: ipGlobalProfile_AssignCount_Index1_o.setStatus('mandatory')
ipGlobalProfile_AssignCount = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 83, 6, 1, 3), Integer32()).setLabel("ipGlobalProfile-AssignCount").setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipGlobalProfile_AssignCount.setStatus('mandatory')
mibipGlobalProfile_PoolBaseAddressTable = MibTable((1, 3, 6, 1, 4, 1, 529, 23, 83, 7), ).setLabel("mibipGlobalProfile-PoolBaseAddressTable")
if mibBuilder.loadTexts: mibipGlobalProfile_PoolBaseAddressTable.setStatus('mandatory')
mibipGlobalProfile_PoolBaseAddressEntry = MibTableRow((1, 3, 6, 1, 4, 1, 529, 23, 83, 7, 1), ).setLabel("mibipGlobalProfile-PoolBaseAddressEntry").setIndexNames((0, "ASCEND-MIBIP-MIB", "ipGlobalProfile-PoolBaseAddress-Index-o"), (0, "ASCEND-MIBIP-MIB", "ipGlobalProfile-PoolBaseAddress-Index1-o"))
if mibBuilder.loadTexts: mibipGlobalProfile_PoolBaseAddressEntry.setStatus('mandatory')
ipGlobalProfile_PoolBaseAddress_Index_o = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 83, 7, 1, 1), Integer32()).setLabel("ipGlobalProfile-PoolBaseAddress-Index-o").setMaxAccess("readonly")
if mibBuilder.loadTexts: ipGlobalProfile_PoolBaseAddress_Index_o.setStatus('mandatory')
ipGlobalProfile_PoolBaseAddress_Index1_o = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 83, 7, 1, 2), Integer32()).setLabel("ipGlobalProfile-PoolBaseAddress-Index1-o").setMaxAccess("readonly")
if mibBuilder.loadTexts: ipGlobalProfile_PoolBaseAddress_Index1_o.setStatus('mandatory')
ipGlobalProfile_PoolBaseAddress = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 83, 7, 1, 3), IpAddress()).setLabel("ipGlobalProfile-PoolBaseAddress").setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipGlobalProfile_PoolBaseAddress.setStatus('mandatory')
mibipGlobalProfile_DhcpServer_StaticAddressTable = MibTable((1, 3, 6, 1, 4, 1, 529, 23, 83, 8), ).setLabel("mibipGlobalProfile-DhcpServer-StaticAddressTable")
if mibBuilder.loadTexts: mibipGlobalProfile_DhcpServer_StaticAddressTable.setStatus('mandatory')
mibipGlobalProfile_DhcpServer_StaticAddressEntry = MibTableRow((1, 3, 6, 1, 4, 1, 529, 23, 83, 8, 1), ).setLabel("mibipGlobalProfile-DhcpServer-StaticAddressEntry").setIndexNames((0, "ASCEND-MIBIP-MIB", "ipGlobalProfile-DhcpServer-StaticAddress-Index-o"), (0, "ASCEND-MIBIP-MIB", "ipGlobalProfile-DhcpServer-StaticAddress-Index1-o"))
if mibBuilder.loadTexts: mibipGlobalProfile_DhcpServer_StaticAddressEntry.setStatus('mandatory')
ipGlobalProfile_DhcpServer_StaticAddress_Index_o = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 83, 8, 1, 1), Integer32()).setLabel("ipGlobalProfile-DhcpServer-StaticAddress-Index-o").setMaxAccess("readonly")
if mibBuilder.loadTexts: ipGlobalProfile_DhcpServer_StaticAddress_Index_o.setStatus('mandatory')
ipGlobalProfile_DhcpServer_StaticAddress_Index1_o = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 83, 8, 1, 2), Integer32()).setLabel("ipGlobalProfile-DhcpServer-StaticAddress-Index1-o").setMaxAccess("readonly")
if mibBuilder.loadTexts: ipGlobalProfile_DhcpServer_StaticAddress_Index1_o.setStatus('mandatory')
ipGlobalProfile_DhcpServer_StaticAddress_IpAddress = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 83, 8, 1, 3), IpAddress()).setLabel("ipGlobalProfile-DhcpServer-StaticAddress-IpAddress").setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipGlobalProfile_DhcpServer_StaticAddress_IpAddress.setStatus('mandatory')
ipGlobalProfile_DhcpServer_StaticAddress_EthernetAddress = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 83, 8, 1, 4), DisplayString()).setLabel("ipGlobalProfile-DhcpServer-StaticAddress-EthernetAddress").setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipGlobalProfile_DhcpServer_StaticAddress_EthernetAddress.setStatus('mandatory')
mibBuilder.exportSymbols("ASCEND-MIBIP-MIB", ipGlobalProfile_SuppressHostRoutes=ipGlobalProfile_SuppressHostRoutes, ipGlobalProfile_IcmpReplyDirectedBcast=ipGlobalProfile_IcmpReplyDirectedBcast, ipInterfaceProfile_Action_o=ipInterfaceProfile_Action_o, ipGlobalProfile_ThrottleNoPortMatchUdpTrafficOnSlot=ipGlobalProfile_ThrottleNoPortMatchUdpTrafficOnSlot, ipInterfaceProfile_Ospf_AseType=ipInterfaceProfile_Ospf_AseType, ipGlobalProfile_MulticastHbeatPort=ipGlobalProfile_MulticastHbeatPort, ipGlobalProfile_MboneBackup_MboneTimeout=ipGlobalProfile_MboneBackup_MboneTimeout, ipGlobalProfile_GlobalVrouter=ipGlobalProfile_GlobalVrouter, ipGlobalProfile_PoolName_Index1_o=ipGlobalProfile_PoolName_Index1_o, mibipInterfaceProfileTable=mibipInterfaceProfileTable, ipGlobalProfile_Finger=ipGlobalProfile_Finger, ipGlobalProfile_RipPref=ipGlobalProfile_RipPref, ipGlobalProfile_SntpInfo_Enabled=ipGlobalProfile_SntpInfo_Enabled, ipInterfaceProfile_Ospf_HelloInterval=ipInterfaceProfile_Ospf_HelloInterval, ipGlobalProfile_MustAcceptAddressAssign=ipGlobalProfile_MustAcceptAddressAssign, ipGlobalProfile_RipOptions_MaxMultipathOrBackupRoutes=ipGlobalProfile_RipOptions_MaxMultipathOrBackupRoutes, ipGlobalProfile_DnsLocalTable_TableConfig_HostName=ipGlobalProfile_DnsLocalTable_TableConfig_HostName, ipInterfaceProfile_IpAddress=ipInterfaceProfile_IpAddress, ipGlobalProfile_Index_o=ipGlobalProfile_Index_o, ipGlobalProfile_ClientPrimaryDnsServer=ipGlobalProfile_ClientPrimaryDnsServer, ipGlobalProfile_DhcpServer_BootFilePath=ipGlobalProfile_DhcpServer_BootFilePath, ipInterfaceProfile_Ospf_NetworkType=ipInterfaceProfile_Ospf_NetworkType, ipGlobalProfile_DhcpServer_Active=ipGlobalProfile_DhcpServer_Active, ipInterfaceProfile_LogicalItem_o=ipInterfaceProfile_LogicalItem_o, mibipInterfaceProfile=mibipInterfaceProfile, ipGlobalProfile_DomainName=ipGlobalProfile_DomainName, ipGlobalProfile_MboneLanInterface_PhysicalAddress_Slot=ipGlobalProfile_MboneLanInterface_PhysicalAddress_Slot, ipInterfaceProfile_Ospf_DownCost=ipInterfaceProfile_Ospf_DownCost, ipInterfaceProfile_Ospf_Cost=ipInterfaceProfile_Ospf_Cost, ipGlobalProfile_DnsServerQueryType=ipGlobalProfile_DnsServerQueryType, ipGlobalProfile_MboneBackup_MboneLanInterface_PhysicalAddress_Slot=ipGlobalProfile_MboneBackup_MboneLanInterface_PhysicalAddress_Slot, mibipGlobalProfile_PoolBaseAddressTable=mibipGlobalProfile_PoolBaseAddressTable, ipInterfaceProfile_NatProfileName=ipInterfaceProfile_NatProfileName, ipGlobalProfile_DhcpServer_ServerAddress=ipGlobalProfile_DhcpServer_ServerAddress, ipInterfaceProfile_InterfaceAddress_PhysicalAddress_ItemNumber=ipInterfaceProfile_InterfaceAddress_PhysicalAddress_ItemNumber, ipGlobalProfile_RipTrigger=ipGlobalProfile_RipTrigger, DisplayString=DisplayString, ipGlobalProfile_UdpCksum=ipGlobalProfile_UdpCksum, ipGlobalProfile_MboneBackup_MboneLanInterface_PhysicalAddress_Shelf=ipGlobalProfile_MboneBackup_MboneLanInterface_PhysicalAddress_Shelf, ipGlobalProfile_DnsListSize=ipGlobalProfile_DnsListSize, mibipGlobalProfile_MboneBackupEntry=mibipGlobalProfile_MboneBackupEntry, ipGlobalProfile_DnsLocalTable_TableConfig_Index_o=ipGlobalProfile_DnsLocalTable_TableConfig_Index_o, mibipGlobalProfile=mibipGlobalProfile, ipGlobalProfile_OspfGlobal_AsBoundaryRouter=ipGlobalProfile_OspfGlobal_AsBoundaryRouter, ipInterfaceProfile_InterfaceAddress_PhysicalAddress_Slot=ipInterfaceProfile_InterfaceAddress_PhysicalAddress_Slot, ipGlobalProfile_ClientSecondaryDnsServer=ipGlobalProfile_ClientSecondaryDnsServer, ipInterfaceProfile_Ospf_Area=ipInterfaceProfile_Ospf_Area, ipInterfaceProfile_MulticastAllowed=ipInterfaceProfile_MulticastAllowed, ipGlobalProfile_DialoutPoison=ipGlobalProfile_DialoutPoison, ipInterfaceProfile_DirectedBroadcastAllowed=ipInterfaceProfile_DirectedBroadcastAllowed, ipGlobalProfile_DnsLocalTable_TableConfig_IpAddress=ipGlobalProfile_DnsLocalTable_TableConfig_IpAddress, ipGlobalProfile_PoolName=ipGlobalProfile_PoolName, ipGlobalProfile_OspfPref=ipGlobalProfile_OspfPref, mibipGlobalProfileEntry=mibipGlobalProfileEntry, ipInterfaceProfile_RipMode=ipInterfaceProfile_RipMode, mibipGlobalProfileTable=mibipGlobalProfileTable, ipInterfaceProfile_Ospf_PollInterval=ipInterfaceProfile_Ospf_PollInterval, ipGlobalProfile_IgnoreIcmpRedirects=ipGlobalProfile_IgnoreIcmpRedirects, ipGlobalProfile_PoolName_Index_o=ipGlobalProfile_PoolName_Index_o, ipGlobalProfile_DhcpServer_StaticAddress_Index_o=ipGlobalProfile_DhcpServer_StaticAddress_Index_o, ipInterfaceProfile_Vrouter=ipInterfaceProfile_Vrouter, ipGlobalProfile_SntpInfo_oGMTOffset=ipGlobalProfile_SntpInfo_oGMTOffset, mibipGlobalProfile_DnsLocalTable_TableConfigTable=mibipGlobalProfile_DnsLocalTable_TableConfigTable, ipGlobalProfile_SendIcmpDestUnreachable=ipGlobalProfile_SendIcmpDestUnreachable, ipGlobalProfile_MboneBackup_Index1_o=ipGlobalProfile_MboneBackup_Index1_o, ipGlobalProfile_DhcpServer_DefaultPool=ipGlobalProfile_DhcpServer_DefaultPool, ipGlobalProfile_MulticastHbeatAlarmThreshold=ipGlobalProfile_MulticastHbeatAlarmThreshold, mibipGlobalProfile_DnsLocalTable_TableConfigEntry=mibipGlobalProfile_DnsLocalTable_TableConfigEntry, ipGlobalProfile_IpportCacheEnable=ipGlobalProfile_IpportCacheEnable, ipInterfaceProfile_Slot_o=ipInterfaceProfile_Slot_o, mibipGlobalProfile_BootpRelay_BootpServersEntry=mibipGlobalProfile_BootpRelay_BootpServersEntry, ipGlobalProfile_Action_o=ipGlobalProfile_Action_o, ipInterfaceProfile_Shelf_o=ipInterfaceProfile_Shelf_o, ipGlobalProfile_RipPolicy=ipGlobalProfile_RipPolicy, ipInterfaceProfile_Ospf_NonMulticast=ipInterfaceProfile_Ospf_NonMulticast, mibipGlobalProfile_PoolBaseAddressEntry=mibipGlobalProfile_PoolBaseAddressEntry, ipGlobalProfile_AllowAsClientDnsInfo=ipGlobalProfile_AllowAsClientDnsInfo, ipInterfaceProfile_o2ndIpAddress=ipInterfaceProfile_o2ndIpAddress, ipGlobalProfile_OspfGlobal_Enable=ipGlobalProfile_OspfGlobal_Enable, mibipGlobalProfile_AssignCountEntry=mibipGlobalProfile_AssignCountEntry, ipGlobalProfile_DhcpServer_TftpHostName=ipGlobalProfile_DhcpServer_TftpHostName, ipGlobalProfile_MboneTimeout=ipGlobalProfile_MboneTimeout, ipGlobalProfile_MboneLanInterface_PhysicalAddress_ItemNumber=ipGlobalProfile_MboneLanInterface_PhysicalAddress_ItemNumber, ipGlobalProfile_DefaultFilterCacheTime=ipGlobalProfile_DefaultFilterCacheTime, mibipGlobalProfile_PoolNameEntry=mibipGlobalProfile_PoolNameEntry, ipGlobalProfile_DnsListAttempt=ipGlobalProfile_DnsListAttempt, ipInterfaceProfile_ManagementOnlyInterface=ipInterfaceProfile_ManagementOnlyInterface, ipInterfaceProfile_DhcpClientEnabled=ipInterfaceProfile_DhcpClientEnabled, ipGlobalProfile_DhcpServer_DefaultLeaseDuration=ipGlobalProfile_DhcpServer_DefaultLeaseDuration, ipGlobalProfile_SntpInfo_Host=ipGlobalProfile_SntpInfo_Host, ipInterfaceProfile_Ospf_Active=ipInterfaceProfile_Ospf_Active, ipGlobalProfile_MaxRipTriggerDelay=ipGlobalProfile_MaxRipTriggerDelay, ipGlobalProfile_AssignCount_Index_o=ipGlobalProfile_AssignCount_Index_o, mibipGlobalProfile_SntpInfo_HostEntry=mibipGlobalProfile_SntpInfo_HostEntry, ipGlobalProfile_RipAseType=ipGlobalProfile_RipAseType, ipGlobalProfile_DhcpServer_LeaseDuration=ipGlobalProfile_DhcpServer_LeaseDuration, ipGlobalProfile_OspfAsePref=ipGlobalProfile_OspfAsePref, ipGlobalProfile_MulticastHbeatSrcAddrMask=ipGlobalProfile_MulticastHbeatSrcAddrMask, ipGlobalProfile_SntpInfo_Host_Index1_o=ipGlobalProfile_SntpInfo_Host_Index1_o, mibipGlobalProfile_MboneBackupTable=mibipGlobalProfile_MboneBackupTable, ipGlobalProfile_DnsAutoUpdateInterval=ipGlobalProfile_DnsAutoUpdateInterval, ipGlobalProfile_MboneProfile=ipGlobalProfile_MboneProfile, ipGlobalProfile_MulticastHbeatAddr=ipGlobalProfile_MulticastHbeatAddr, ipGlobalProfile_RipQueueDepth=ipGlobalProfile_RipQueueDepth, ipInterfaceProfile_RouteFilter=ipInterfaceProfile_RouteFilter, ipGlobalProfile_DnsLocalTable_AutoUpdate=ipGlobalProfile_DnsLocalTable_AutoUpdate, mibipGlobalProfile_SntpInfo_HostTable=mibipGlobalProfile_SntpInfo_HostTable, ipGlobalProfile_SntpInfo_UpdateInterval=ipGlobalProfile_SntpInfo_UpdateInterval, ipGlobalProfile_AssignCount=ipGlobalProfile_AssignCount, ipInterfaceProfile_o2ndRipMode=ipInterfaceProfile_o2ndRipMode, ipGlobalProfile_AssignCount_Index1_o=ipGlobalProfile_AssignCount_Index1_o, ipGlobalProfile_MinRipTriggerDelay=ipGlobalProfile_MinRipTriggerDelay, ipGlobalProfile_BootpRelay_BootpServers=ipGlobalProfile_BootpRelay_BootpServers, ipInterfaceProfile_Ospf_KeyId=ipInterfaceProfile_Ospf_KeyId, ipGlobalProfile_PoolSummary=ipGlobalProfile_PoolSummary, ipGlobalProfile_TcpTimeout=ipGlobalProfile_TcpTimeout, ipGlobalProfile_RouterId=ipGlobalProfile_RouterId, ipInterfaceProfile_Item_o=ipInterfaceProfile_Item_o, ipGlobalProfile_MboneBackup_MboneProfile=ipGlobalProfile_MboneBackup_MboneProfile, ipInterfaceProfile_Ospf_AreaType=ipInterfaceProfile_Ospf_AreaType, ipGlobalProfile_MboneLanInterface_PhysicalAddress_Shelf=ipGlobalProfile_MboneLanInterface_PhysicalAddress_Shelf, ipGlobalProfile_BootpRelay_Active=ipGlobalProfile_BootpRelay_Active, ipGlobalProfile_RipTag=ipGlobalProfile_RipTag, ipGlobalProfile_SummarizeRipRoutes=ipGlobalProfile_SummarizeRipRoutes, ipGlobalProfile_PoolBaseAddress=ipGlobalProfile_PoolBaseAddress, ipGlobalProfile_BootpRelay_BootpServers_Index1_o=ipGlobalProfile_BootpRelay_BootpServers_Index1_o, ipGlobalProfile_PoolBaseAddress_Index1_o=ipGlobalProfile_PoolBaseAddress_Index1_o, ipGlobalProfile_NetbiosSecondaryNs=ipGlobalProfile_NetbiosSecondaryNs, ipGlobalProfile_DnsCacheEnable=ipGlobalProfile_DnsCacheEnable, ipGlobalProfile_PoolBaseAddress_Index_o=ipGlobalProfile_PoolBaseAddress_Index_o, ipInterfaceProfile_Ospf_RetransmitInterval=ipInterfaceProfile_Ospf_RetransmitInterval, ipGlobalProfile_IgnoreDefRoute=ipGlobalProfile_IgnoreDefRoute, ipGlobalProfile_TcpSynFloodProtect=ipGlobalProfile_TcpSynFloodProtect, ipInterfaceProfile_Rip2UseMulticast=ipInterfaceProfile_Rip2UseMulticast, ipGlobalProfile_BootpEnabled=ipGlobalProfile_BootpEnabled, ipGlobalProfile_OspfGlobal_OspfMaxLsa=ipGlobalProfile_OspfGlobal_OspfMaxLsa, mibipInterfaceProfileEntry=mibipInterfaceProfileEntry, ipGlobalProfile_DnsLocalTable_TableConfig_Index1_o=ipGlobalProfile_DnsLocalTable_TableConfig_Index1_o, ipGlobalProfile_DnsSecondaryServer=ipGlobalProfile_DnsSecondaryServer, ipGlobalProfile_SystemIpAddr=ipGlobalProfile_SystemIpAddr, ipInterfaceProfile_AddressRealm=ipInterfaceProfile_AddressRealm, ipGlobalProfile_TelnetPassword=ipGlobalProfile_TelnetPassword, ipInterfaceProfile_Ospf_AuthKey=ipInterfaceProfile_Ospf_AuthKey, ipGlobalProfile_MulticastHbeatSrcAddr=ipGlobalProfile_MulticastHbeatSrcAddr, ipGlobalProfile_DnsLocalTable_Enabled=ipGlobalProfile_DnsLocalTable_Enabled, ipInterfaceProfile_VlanEnabled=ipInterfaceProfile_VlanEnabled, mibipGlobalProfile_PoolNameTable=mibipGlobalProfile_PoolNameTable, ipGlobalProfile_SntpInfo_Host_Index_o=ipGlobalProfile_SntpInfo_Host_Index_o, mibipGlobalProfile_DhcpServer_StaticAddressTable=mibipGlobalProfile_DhcpServer_StaticAddressTable, ipGlobalProfile_IpsecOptions_Enabled=ipGlobalProfile_IpsecOptions_Enabled, ipInterfaceProfile_Ospf_TransitDelay=ipInterfaceProfile_Ospf_TransitDelay, ipInterfaceProfile_Ospf_DeadInterval=ipInterfaceProfile_Ospf_DeadInterval, ipGlobalProfile_MboneBackup_Index_o=ipGlobalProfile_MboneBackup_Index_o, ipInterfaceProfile_ProxyMode=ipInterfaceProfile_ProxyMode, ipGlobalProfile_MulticastMemberTimeout=ipGlobalProfile_MulticastMemberTimeout, ipGlobalProfile_NetbiosPrimaryNs=ipGlobalProfile_NetbiosPrimaryNs, ipGlobalProfile_SntpInfo_UpdateThreshold=ipGlobalProfile_SntpInfo_UpdateThreshold, ipGlobalProfile_MulticastHbeatSlotTime=ipGlobalProfile_MulticastHbeatSlotTime, ipGlobalProfile_SharedProf=ipGlobalProfile_SharedProf, ipGlobalProfile_IprouteCacheEnable=ipGlobalProfile_IprouteCacheEnable, ipGlobalProfile_SecDomainName=ipGlobalProfile_SecDomainName, ipGlobalProfile_MulticastForwarding=ipGlobalProfile_MulticastForwarding, ipGlobalProfile_IprouteCacheSize=ipGlobalProfile_IprouteCacheSize, ipInterfaceProfile_Netmask=ipInterfaceProfile_Netmask, ipGlobalProfile_MboneBackup_Enabled=ipGlobalProfile_MboneBackup_Enabled, ipGlobalProfile_UserProfile=ipGlobalProfile_UserProfile, ipGlobalProfile_DhcpServer_StaticAddress_IpAddress=ipGlobalProfile_DhcpServer_StaticAddress_IpAddress, ipGlobalProfile_DhcpServer_DefaultMaxLease=ipGlobalProfile_DhcpServer_DefaultMaxLease, ipGlobalProfile_RarpEnabled=ipGlobalProfile_RarpEnabled, ipGlobalProfile_DhcpServer_StaticAddress_EthernetAddress=ipGlobalProfile_DhcpServer_StaticAddress_EthernetAddress, ipInterfaceProfile_InterfaceAddress_PhysicalAddress_Shelf=ipInterfaceProfile_InterfaceAddress_PhysicalAddress_Shelf, ipGlobalProfile_PoolChaining=ipGlobalProfile_PoolChaining, mibipGlobalProfile_BootpRelay_BootpServersTable=mibipGlobalProfile_BootpRelay_BootpServersTable, ipInterfaceProfile_Ospf_Priority=ipInterfaceProfile_Ospf_Priority, ipInterfaceProfile_Netmask2=ipInterfaceProfile_Netmask2, ipGlobalProfile_MulticastHbeatNumberSlot=ipGlobalProfile_MulticastHbeatNumberSlot, ipInterfaceProfile_MulticastRateLimit=ipInterfaceProfile_MulticastRateLimit, ipGlobalProfile_DhcpServer_StaticAddress_Index1_o=ipGlobalProfile_DhcpServer_StaticAddress_Index1_o, ipGlobalProfile_PoolOspfAdvType=ipGlobalProfile_PoolOspfAdvType, ipGlobalProfile_StaticPref=ipGlobalProfile_StaticPref, mibipGlobalProfile_AssignCountTable=mibipGlobalProfile_AssignCountTable, ipGlobalProfile_IpsecOptions_SecurityPolicyDatabase=ipGlobalProfile_IpsecOptions_SecurityPolicyDatabase, mibipGlobalProfile_DhcpServer_StaticAddressEntry=mibipGlobalProfile_DhcpServer_StaticAddressEntry, ipInterfaceProfile_MulticastGroupLeaveDelay=ipInterfaceProfile_MulticastGroupLeaveDelay, ipGlobalProfile_DefaultPrtCacheTime=ipGlobalProfile_DefaultPrtCacheTime, ipGlobalProfile_DnsPrimaryServer=ipGlobalProfile_DnsPrimaryServer, ipGlobalProfile_DropSourceRoutedIpPackets=ipGlobalProfile_DropSourceRoutedIpPackets, ipInterfaceProfile_InterfaceAddress_LogicalItem=ipInterfaceProfile_InterfaceAddress_LogicalItem, ipInterfaceProfile_Ospf_AuthenType=ipInterfaceProfile_Ospf_AuthenType, ipInterfaceProfile_Ospf_Md5AuthKey=ipInterfaceProfile_Ospf_Md5AuthKey, ipGlobalProfile_MboneBackup_MboneLanInterface_PhysicalAddress_ItemNumber=ipGlobalProfile_MboneBackup_MboneLanInterface_PhysicalAddress_ItemNumber, ipGlobalProfile_MboneLanInterface_LogicalItem=ipGlobalProfile_MboneLanInterface_LogicalItem, ipGlobalProfile_BootpRelay_BootpServers_Index_o=ipGlobalProfile_BootpRelay_BootpServers_Index_o, ipGlobalProfile_MboneBackup_MboneLanInterface_LogicalItem=ipGlobalProfile_MboneBackup_MboneLanInterface_LogicalItem, ipInterfaceProfile_Ospf_AseTag=ipInterfaceProfile_Ospf_AseTag)
