#
# PySNMP MIB module HP-LOADBALANCE-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/HP-LOADBALANCE-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 19:23:35 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, Integer, OctetString = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "Integer", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueRangeConstraint, ValueSizeConstraint, SingleValueConstraint, ConstraintsUnion, ConstraintsIntersection = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueRangeConstraint", "ValueSizeConstraint", "SingleValueConstraint", "ConstraintsUnion", "ConstraintsIntersection")
hpSwitch, = mibBuilder.importSymbols("HP-ICF-OID", "hpSwitch")
InterfaceIndex, ifIndex = mibBuilder.importSymbols("IF-MIB", "InterfaceIndex", "ifIndex")
InetAddressType, InetAddress = mibBuilder.importSymbols("INET-ADDRESS-MIB", "InetAddressType", "InetAddress")
ObjectGroup, NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "ObjectGroup", "NotificationGroup", "ModuleCompliance")
iso, NotificationType, Bits, TimeTicks, ModuleIdentity, Counter32, MibScalar, MibTable, MibTableRow, MibTableColumn, Unsigned32, Integer32, Gauge32, MibIdentifier, ObjectIdentity, Counter64, IpAddress = mibBuilder.importSymbols("SNMPv2-SMI", "iso", "NotificationType", "Bits", "TimeTicks", "ModuleIdentity", "Counter32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Unsigned32", "Integer32", "Gauge32", "MibIdentifier", "ObjectIdentity", "Counter64", "IpAddress")
TextualConvention, MacAddress, RowStatus, TruthValue, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "MacAddress", "RowStatus", "TruthValue", "DisplayString")
hpicfLoadBalanceMod = ModuleIdentity((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 76))
hpicfLoadBalanceMod.setRevisions(('2011-03-22 22:22', '2010-06-22 22:22',))
if mibBuilder.loadTexts: hpicfLoadBalanceMod.setLastUpdated('201103222222Z')
if mibBuilder.loadTexts: hpicfLoadBalanceMod.setOrganization('HP Networking')
hpicfLoadBalanceNotifications = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 76, 0))
hpicfLoadBalanceMethodMod = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 76, 1))
hpicfLoadBalanceConformance = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 76, 2))
hpicfTrunkLoadBalanceMethod = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 76, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("l3based", 1), ("l4based", 2), ("l2based", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpicfTrunkLoadBalanceMethod.setStatus('current')
hpicfTrunkClearStatsTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 76, 1, 2), )
if mibBuilder.loadTexts: hpicfTrunkClearStatsTable.setStatus('current')
hpicfTrunkClearStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 76, 1, 2, 1), ).setIndexNames((0, "HP-LOADBALANCE-MIB", "hpicfTrunkId"))
if mibBuilder.loadTexts: hpicfTrunkClearStatsEntry.setStatus('current')
hpicfTrunkId = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 76, 1, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535)))
if mibBuilder.loadTexts: hpicfTrunkId.setStatus('current')
hpicfTrunkStatsClear = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 76, 1, 2, 1, 2), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpicfTrunkStatsClear.setStatus('current')
hpicfTrunkStatsTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 76, 1, 3), )
if mibBuilder.loadTexts: hpicfTrunkStatsTable.setStatus('current')
hpicfTrunkStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 76, 1, 3, 1), ).setIndexNames((0, "HP-LOADBALANCE-MIB", "hpicfTrunkId"))
if mibBuilder.loadTexts: hpicfTrunkStatsEntry.setStatus('current')
hpicfTrunkUpTime = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 76, 1, 3, 1, 1), Unsigned32()).setUnits('minutes').setMaxAccess("readonly")
if mibBuilder.loadTexts: hpicfTrunkUpTime.setStatus('current')
hpicfTrunkTotalBytesRx = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 76, 1, 3, 1, 2), Counter64()).setUnits('Bytes').setMaxAccess("readonly")
if mibBuilder.loadTexts: hpicfTrunkTotalBytesRx.setStatus('current')
hpicfTrunkTotalBytesTx = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 76, 1, 3, 1, 3), Counter64()).setUnits('Bytes').setMaxAccess("readonly")
if mibBuilder.loadTexts: hpicfTrunkTotalBytesTx.setStatus('current')
hpicfTrunkTotalFramesRx = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 76, 1, 3, 1, 4), Counter64()).setUnits('Frames').setMaxAccess("readonly")
if mibBuilder.loadTexts: hpicfTrunkTotalFramesRx.setStatus('current')
hpicfTrunkTotalFramesTx = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 76, 1, 3, 1, 5), Counter64()).setUnits('Frames').setMaxAccess("readonly")
if mibBuilder.loadTexts: hpicfTrunkTotalFramesTx.setStatus('current')
hpicfTrunkTotalDropsTx = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 76, 1, 3, 1, 6), Counter64()).setUnits('Frames').setMaxAccess("readonly")
if mibBuilder.loadTexts: hpicfTrunkTotalDropsTx.setStatus('current')
hpicfTrunkPortStatsTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 76, 1, 4), )
if mibBuilder.loadTexts: hpicfTrunkPortStatsTable.setStatus('current')
hpicfTrunkPortStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 76, 1, 4, 1), ).setIndexNames((0, "HP-LOADBALANCE-MIB", "hpicfTrunkId"), (0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: hpicfTrunkPortStatsEntry.setStatus('current')
hpicfTrunkPortBytesRx = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 76, 1, 4, 1, 1), Counter64()).setUnits('Bytes').setMaxAccess("readonly")
if mibBuilder.loadTexts: hpicfTrunkPortBytesRx.setStatus('current')
hpicfTrunkPortBytesTx = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 76, 1, 4, 1, 2), Counter64()).setUnits('Bytes').setMaxAccess("readonly")
if mibBuilder.loadTexts: hpicfTrunkPortBytesTx.setStatus('current')
hpicfTrunkPortFramesRx = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 76, 1, 4, 1, 3), Counter64()).setUnits('Frames').setMaxAccess("readonly")
if mibBuilder.loadTexts: hpicfTrunkPortFramesRx.setStatus('current')
hpicfTrunkPortFramesTx = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 76, 1, 4, 1, 4), Counter64()).setUnits('Frames').setMaxAccess("readonly")
if mibBuilder.loadTexts: hpicfTrunkPortFramesTx.setStatus('current')
hpicfTrunkPortFramesDropTx = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 76, 1, 4, 1, 5), Counter64()).setUnits('Frames').setMaxAccess("readonly")
if mibBuilder.loadTexts: hpicfTrunkPortFramesDropTx.setStatus('current')
hpicfTrunkPortRxFramePercent = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 76, 1, 4, 1, 6), Unsigned32()).setUnits('Percent').setMaxAccess("readonly")
if mibBuilder.loadTexts: hpicfTrunkPortRxFramePercent.setStatus('current')
hpicfTrunkPortTxFramePercent = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 76, 1, 4, 1, 7), Unsigned32()).setUnits('Percent').setMaxAccess("readonly")
if mibBuilder.loadTexts: hpicfTrunkPortTxFramePercent.setStatus('current')
hpicfTrunkPortDropTxFramePercent = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 76, 1, 4, 1, 8), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpicfTrunkPortDropTxFramePercent.setStatus('current')
hpicfLoadBalanceObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 76, 1, 5))
hpicfLoadBalanceTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 76, 1, 5, 1), )
if mibBuilder.loadTexts: hpicfLoadBalanceTable.setStatus('current')
hpicfLoadBalanceEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 76, 1, 5, 1, 1), ).setIndexNames((0, "HP-LOADBALANCE-MIB", "hpicfLoadBalanceIndex"))
if mibBuilder.loadTexts: hpicfLoadBalanceEntry.setStatus('current')
hpicfLoadBalanceIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 76, 1, 5, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535)))
if mibBuilder.loadTexts: hpicfLoadBalanceIndex.setStatus('current')
hpicfLoadBalanceTrunkId = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 76, 1, 5, 1, 1, 2), InterfaceIndex()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpicfLoadBalanceTrunkId.setStatus('current')
hpicfLoadBalanceSourceMacAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 76, 1, 5, 1, 1, 3), MacAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpicfLoadBalanceSourceMacAddr.setStatus('current')
hpicfLoadBalanceDestMacAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 76, 1, 5, 1, 1, 4), MacAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpicfLoadBalanceDestMacAddr.setStatus('current')
hpicfLoadBalanceIPSourceAddrType = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 76, 1, 5, 1, 1, 5), InetAddressType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpicfLoadBalanceIPSourceAddrType.setStatus('current')
hpicfLoadBalanceIPSourceAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 76, 1, 5, 1, 1, 6), InetAddress().subtype(subtypeSpec=ValueSizeConstraint(0, 48))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpicfLoadBalanceIPSourceAddr.setStatus('current')
hpicfLoadBalanceIPDestAddrType = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 76, 1, 5, 1, 1, 7), InetAddressType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpicfLoadBalanceIPDestAddrType.setStatus('current')
hpicfLoadBalanceIPDestAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 76, 1, 5, 1, 1, 8), InetAddress().subtype(subtypeSpec=ValueSizeConstraint(0, 48))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpicfLoadBalanceIPDestAddr.setStatus('current')
hpicfLoadBalanceSourcePort = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 76, 1, 5, 1, 1, 9), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpicfLoadBalanceSourcePort.setStatus('current')
hpicfLoadBalanceDestPort = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 76, 1, 5, 1, 1, 10), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpicfLoadBalanceDestPort.setStatus('current')
hpicfLoadBalanceEtherType = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 76, 1, 5, 1, 1, 11), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpicfLoadBalanceEtherType.setStatus('current')
hpicfLoadBalanceInboundVlan = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 76, 1, 5, 1, 1, 12), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpicfLoadBalanceInboundVlan.setStatus('current')
hpicfLoadBalanceInboundPort = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 76, 1, 5, 1, 1, 13), InterfaceIndex()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpicfLoadBalanceInboundPort.setStatus('current')
hpicfLoadBalanceOutboundPort = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 76, 1, 5, 1, 1, 14), InterfaceIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpicfLoadBalanceOutboundPort.setStatus('current')
hpicfLoadBalanceStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 76, 1, 5, 1, 1, 15), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpicfLoadBalanceStatus.setStatus('current')
hpicfLoadBalanceCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 76, 2, 1))
hpicfLoadBalanceGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 76, 2, 2))
hpicfLoadBalanceCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 76, 2, 1, 1)).setObjects(("HP-LOADBALANCE-MIB", "hpicfLoadBalanceGroup"), ("HP-LOADBALANCE-MIB", "hpicfLoadBalanceGroup5"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hpicfLoadBalanceCompliance = hpicfLoadBalanceCompliance.setStatus('current')
hpicfTrunkStatsCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 76, 2, 1, 2)).setObjects(("HP-LOADBALANCE-MIB", "hpicfTrunkStatsClearGroup"), ("HP-LOADBALANCE-MIB", "hpicfTrunkStatsGroup"), ("HP-LOADBALANCE-MIB", "hpicfTrunkPortStatsGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hpicfTrunkStatsCompliance = hpicfTrunkStatsCompliance.setStatus('current')
hpicfLoadBalanceGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 76, 2, 2, 1)).setObjects(("HP-LOADBALANCE-MIB", "hpicfTrunkLoadBalanceMethod"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hpicfLoadBalanceGroup = hpicfLoadBalanceGroup.setStatus('current')
hpicfTrunkStatsClearGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 76, 2, 2, 2)).setObjects(("HP-LOADBALANCE-MIB", "hpicfTrunkStatsClear"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hpicfTrunkStatsClearGroup = hpicfTrunkStatsClearGroup.setStatus('current')
hpicfTrunkStatsGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 76, 2, 2, 3)).setObjects(("HP-LOADBALANCE-MIB", "hpicfTrunkUpTime"), ("HP-LOADBALANCE-MIB", "hpicfTrunkTotalBytesRx"), ("HP-LOADBALANCE-MIB", "hpicfTrunkTotalBytesTx"), ("HP-LOADBALANCE-MIB", "hpicfTrunkTotalFramesTx"), ("HP-LOADBALANCE-MIB", "hpicfTrunkTotalFramesRx"), ("HP-LOADBALANCE-MIB", "hpicfTrunkTotalDropsTx"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hpicfTrunkStatsGroup = hpicfTrunkStatsGroup.setStatus('current')
hpicfTrunkPortStatsGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 76, 2, 2, 4)).setObjects(("HP-LOADBALANCE-MIB", "hpicfTrunkPortBytesRx"), ("HP-LOADBALANCE-MIB", "hpicfTrunkPortBytesTx"), ("HP-LOADBALANCE-MIB", "hpicfTrunkPortFramesRx"), ("HP-LOADBALANCE-MIB", "hpicfTrunkPortFramesTx"), ("HP-LOADBALANCE-MIB", "hpicfTrunkPortFramesDropTx"), ("HP-LOADBALANCE-MIB", "hpicfTrunkPortRxFramePercent"), ("HP-LOADBALANCE-MIB", "hpicfTrunkPortTxFramePercent"), ("HP-LOADBALANCE-MIB", "hpicfTrunkPortDropTxFramePercent"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hpicfTrunkPortStatsGroup = hpicfTrunkPortStatsGroup.setStatus('current')
hpicfLoadBalanceGroup5 = ObjectGroup((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 76, 2, 2, 5)).setObjects(("HP-LOADBALANCE-MIB", "hpicfLoadBalanceTrunkId"), ("HP-LOADBALANCE-MIB", "hpicfLoadBalanceSourceMacAddr"), ("HP-LOADBALANCE-MIB", "hpicfLoadBalanceDestMacAddr"), ("HP-LOADBALANCE-MIB", "hpicfLoadBalanceIPSourceAddrType"), ("HP-LOADBALANCE-MIB", "hpicfLoadBalanceIPSourceAddr"), ("HP-LOADBALANCE-MIB", "hpicfLoadBalanceIPDestAddrType"), ("HP-LOADBALANCE-MIB", "hpicfLoadBalanceIPDestAddr"), ("HP-LOADBALANCE-MIB", "hpicfLoadBalanceSourcePort"), ("HP-LOADBALANCE-MIB", "hpicfLoadBalanceDestPort"), ("HP-LOADBALANCE-MIB", "hpicfLoadBalanceEtherType"), ("HP-LOADBALANCE-MIB", "hpicfLoadBalanceInboundVlan"), ("HP-LOADBALANCE-MIB", "hpicfLoadBalanceInboundPort"), ("HP-LOADBALANCE-MIB", "hpicfLoadBalanceOutboundPort"), ("HP-LOADBALANCE-MIB", "hpicfLoadBalanceStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hpicfLoadBalanceGroup5 = hpicfLoadBalanceGroup5.setStatus('current')
mibBuilder.exportSymbols("HP-LOADBALANCE-MIB", hpicfTrunkStatsClear=hpicfTrunkStatsClear, hpicfLoadBalanceConformance=hpicfLoadBalanceConformance, PYSNMP_MODULE_ID=hpicfLoadBalanceMod, hpicfLoadBalanceGroup=hpicfLoadBalanceGroup, hpicfLoadBalanceNotifications=hpicfLoadBalanceNotifications, hpicfTrunkPortRxFramePercent=hpicfTrunkPortRxFramePercent, hpicfTrunkStatsClearGroup=hpicfTrunkStatsClearGroup, hpicfTrunkTotalFramesTx=hpicfTrunkTotalFramesTx, hpicfTrunkUpTime=hpicfTrunkUpTime, hpicfLoadBalanceMethodMod=hpicfLoadBalanceMethodMod, hpicfLoadBalanceEntry=hpicfLoadBalanceEntry, hpicfLoadBalanceInboundVlan=hpicfLoadBalanceInboundVlan, hpicfLoadBalanceTable=hpicfLoadBalanceTable, hpicfLoadBalanceGroup5=hpicfLoadBalanceGroup5, hpicfTrunkLoadBalanceMethod=hpicfTrunkLoadBalanceMethod, hpicfTrunkPortBytesRx=hpicfTrunkPortBytesRx, hpicfLoadBalanceIPDestAddrType=hpicfLoadBalanceIPDestAddrType, hpicfLoadBalanceObjects=hpicfLoadBalanceObjects, hpicfLoadBalanceIPDestAddr=hpicfLoadBalanceIPDestAddr, hpicfTrunkTotalBytesTx=hpicfTrunkTotalBytesTx, hpicfTrunkPortFramesDropTx=hpicfTrunkPortFramesDropTx, hpicfLoadBalanceIPSourceAddr=hpicfLoadBalanceIPSourceAddr, hpicfLoadBalanceCompliance=hpicfLoadBalanceCompliance, hpicfTrunkClearStatsTable=hpicfTrunkClearStatsTable, hpicfLoadBalanceMod=hpicfLoadBalanceMod, hpicfTrunkStatsCompliance=hpicfTrunkStatsCompliance, hpicfTrunkPortFramesTx=hpicfTrunkPortFramesTx, hpicfTrunkStatsGroup=hpicfTrunkStatsGroup, hpicfTrunkTotalFramesRx=hpicfTrunkTotalFramesRx, hpicfLoadBalanceIndex=hpicfLoadBalanceIndex, hpicfLoadBalanceInboundPort=hpicfLoadBalanceInboundPort, hpicfTrunkPortDropTxFramePercent=hpicfTrunkPortDropTxFramePercent, hpicfTrunkStatsTable=hpicfTrunkStatsTable, hpicfLoadBalanceDestMacAddr=hpicfLoadBalanceDestMacAddr, hpicfLoadBalanceGroups=hpicfLoadBalanceGroups, hpicfTrunkPortFramesRx=hpicfTrunkPortFramesRx, hpicfLoadBalanceTrunkId=hpicfLoadBalanceTrunkId, hpicfLoadBalanceIPSourceAddrType=hpicfLoadBalanceIPSourceAddrType, hpicfTrunkPortStatsGroup=hpicfTrunkPortStatsGroup, hpicfLoadBalanceOutboundPort=hpicfLoadBalanceOutboundPort, hpicfTrunkStatsEntry=hpicfTrunkStatsEntry, hpicfTrunkId=hpicfTrunkId, hpicfTrunkTotalBytesRx=hpicfTrunkTotalBytesRx, hpicfLoadBalanceSourceMacAddr=hpicfLoadBalanceSourceMacAddr, hpicfLoadBalanceDestPort=hpicfLoadBalanceDestPort, hpicfLoadBalanceCompliances=hpicfLoadBalanceCompliances, hpicfTrunkPortBytesTx=hpicfTrunkPortBytesTx, hpicfLoadBalanceEtherType=hpicfLoadBalanceEtherType, hpicfTrunkPortStatsEntry=hpicfTrunkPortStatsEntry, hpicfTrunkPortTxFramePercent=hpicfTrunkPortTxFramePercent, hpicfTrunkPortStatsTable=hpicfTrunkPortStatsTable, hpicfLoadBalanceStatus=hpicfLoadBalanceStatus, hpicfLoadBalanceSourcePort=hpicfLoadBalanceSourcePort, hpicfTrunkTotalDropsTx=hpicfTrunkTotalDropsTx, hpicfTrunkClearStatsEntry=hpicfTrunkClearStatsEntry)
