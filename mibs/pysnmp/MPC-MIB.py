#
# PySNMP MIB module MPC-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/MPC-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 20:03:51 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, ObjectIdentifier, OctetString = mibBuilder.importSymbols("ASN1", "Integer", "ObjectIdentifier", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsUnion, ConstraintsIntersection, SingleValueConstraint, ValueSizeConstraint, ValueRangeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsUnion", "ConstraintsIntersection", "SingleValueConstraint", "ValueSizeConstraint", "ValueRangeConstraint")
AtmAddr, = mibBuilder.importSymbols("ATM-TC-MIB", "AtmAddr")
lecIndex, = mibBuilder.importSymbols("LAN-EMULATION-CLIENT-MIB", "lecIndex")
ObjectGroup, ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ObjectGroup", "ModuleCompliance", "NotificationGroup")
Counter32, MibScalar, MibTable, MibTableRow, MibTableColumn, Integer32, iso, ModuleIdentity, Bits, Unsigned32, Gauge32, ObjectIdentity, NotificationType, enterprises, IpAddress, Counter64, TimeTicks, MibIdentifier = mibBuilder.importSymbols("SNMPv2-SMI", "Counter32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Integer32", "iso", "ModuleIdentity", "Bits", "Unsigned32", "Gauge32", "ObjectIdentity", "NotificationType", "enterprises", "IpAddress", "Counter64", "TimeTicks", "MibIdentifier")
TextualConvention, TruthValue, RowStatus, TimeStamp, TimeInterval, MacAddress, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "TruthValue", "RowStatus", "TimeStamp", "TimeInterval", "MacAddress", "DisplayString")
class AtmAddr(OctetString):
    subtypeSpec = OctetString.subtypeSpec + ConstraintsUnion(ValueSizeConstraint(0, 0), ValueSizeConstraint(8, 8), ValueSizeConstraint(13, 13), ValueSizeConstraint(20, 20), )
mpoaMIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 353, 5, 8, 1))
mpoaMIB.setRevisions(('1998-11-09 00:00', '1998-05-22 00:00', '1998-02-25 00:00',))
if mibBuilder.loadTexts: mpoaMIB.setLastUpdated('9811090000Z')
if mibBuilder.loadTexts: mpoaMIB.setOrganization('ATM Forum LANE/MPOA Working Group')
atmForum = MibIdentifier((1, 3, 6, 1, 4, 1, 353))
atmForumNetworkManagement = MibIdentifier((1, 3, 6, 1, 4, 1, 353, 5))
atmfMpoa = MibIdentifier((1, 3, 6, 1, 4, 1, 353, 5, 8))
class LecIndex(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ValueRangeConstraint(1, 2147483647)

class AtmConfigAddr(TextualConvention, OctetString):
    status = 'current'
    subtypeSpec = OctetString.subtypeSpec + ConstraintsUnion(ValueSizeConstraint(1, 1), ValueSizeConstraint(8, 8), ValueSizeConstraint(20, 20), )
class InternetworkAddrType(TextualConvention, Integer32):
    reference = 'Assigned Numbers, RFC1700, ADDRESS FAMILY NUMBERS'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15))
    namedValues = NamedValues(("other", 0), ("ipV4", 1), ("ipV6", 2), ("nsap", 3), ("hdlc", 4), ("bbn1822", 5), ("ieee802", 6), ("e163", 7), ("e164", 8), ("f69", 9), ("x121", 10), ("ipx", 11), ("appleTalk", 12), ("decnetIV", 13), ("banyanVines", 14), ("e164WithNsap", 15))

class InternetworkAddr(TextualConvention, OctetString):
    status = 'current'
    subtypeSpec = OctetString.subtypeSpec + ValueSizeConstraint(0, 60)

class MpcIndex(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ValueRangeConstraint(1, 2147483647)

class MpsIndex(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ValueRangeConstraint(1, 2147483647)

mpoaMIBObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 353, 5, 8, 1, 1))
mpoaCommonObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 353, 5, 8, 1, 1, 1))
mpcObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 353, 5, 8, 1, 1, 2))
mpcNextIndex = MibScalar((1, 3, 6, 1, 4, 1, 353, 5, 8, 1, 1, 2, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mpcNextIndex.setStatus('current')
mpcConfigTable = MibTable((1, 3, 6, 1, 4, 1, 353, 5, 8, 1, 1, 2, 2), )
if mibBuilder.loadTexts: mpcConfigTable.setStatus('current')
mpcConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 353, 5, 8, 1, 1, 2, 2, 1), ).setIndexNames((0, "MPC-MIB", "mpcIndex"))
if mibBuilder.loadTexts: mpcConfigEntry.setStatus('current')
mpcIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 5, 8, 1, 1, 2, 2, 1, 1), MpcIndex())
if mibBuilder.loadTexts: mpcIndex.setStatus('current')
mpcRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 5, 8, 1, 1, 2, 2, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: mpcRowStatus.setStatus('current')
mpcConfigMode = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 5, 8, 1, 1, 2, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("automatic", 1), ("manual", 2))).clone('automatic')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: mpcConfigMode.setStatus('current')
mpcCtrlAtmAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 5, 8, 1, 1, 2, 2, 1, 4), AtmConfigAddr()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: mpcCtrlAtmAddr.setStatus('current')
mpcSCSetupFrameCount = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 5, 8, 1, 1, 2, 2, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535)).clone(10)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: mpcSCSetupFrameCount.setStatus('current')
mpcSCSetupFrameTime = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 5, 8, 1, 1, 2, 2, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 60)).clone(1)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: mpcSCSetupFrameTime.setStatus('current')
mpcInitialRetryTime = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 5, 8, 1, 1, 2, 2, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 300)).clone(5)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: mpcInitialRetryTime.setStatus('current')
mpcRetryTimeMaximum = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 5, 8, 1, 1, 2, 2, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(10, 300)).clone(40)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: mpcRetryTimeMaximum.setStatus('current')
mpcHoldDownTime = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 5, 8, 1, 1, 2, 2, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(30, 1200)).clone(160)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: mpcHoldDownTime.setStatus('current')
mpcActualTable = MibTable((1, 3, 6, 1, 4, 1, 353, 5, 8, 1, 1, 2, 3), )
if mibBuilder.loadTexts: mpcActualTable.setStatus('current')
mpcActualEntry = MibTableRow((1, 3, 6, 1, 4, 1, 353, 5, 8, 1, 1, 2, 3, 1), )
mpcConfigEntry.registerAugmentions(("MPC-MIB", "mpcActualEntry"))
mpcActualEntry.setIndexNames(*mpcConfigEntry.getIndexNames())
if mibBuilder.loadTexts: mpcActualEntry.setStatus('current')
mpcActualState = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 5, 8, 1, 1, 2, 3, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("unknown", 1), ("initialState", 2), ("up", 3), ("down", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpcActualState.setStatus('current')
mpcDiscontinuityTime = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 5, 8, 1, 1, 2, 3, 1, 2), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpcDiscontinuityTime.setStatus('current')
mpcActualConfigMode = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 5, 8, 1, 1, 2, 3, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("automatic", 1), ("manual", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpcActualConfigMode.setStatus('current')
mpcActualSCSetupFrameCount = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 5, 8, 1, 1, 2, 3, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpcActualSCSetupFrameCount.setStatus('current')
mpcActualSCSetupFrameTime = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 5, 8, 1, 1, 2, 3, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 60))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpcActualSCSetupFrameTime.setStatus('current')
mpcActualInitialRetryTime = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 5, 8, 1, 1, 2, 3, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 300))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpcActualInitialRetryTime.setStatus('current')
mpcActualRetryTimeMaximum = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 5, 8, 1, 1, 2, 3, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(30, 300))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpcActualRetryTimeMaximum.setStatus('current')
mpcActualHoldDownTime = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 5, 8, 1, 1, 2, 3, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(30, 1200))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpcActualHoldDownTime.setStatus('current')
mpcStatisticsTable = MibTable((1, 3, 6, 1, 4, 1, 353, 5, 8, 1, 1, 2, 5), )
if mibBuilder.loadTexts: mpcStatisticsTable.setStatus('current')
mpcStatisticsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 353, 5, 8, 1, 1, 2, 5, 1), )
mpcConfigEntry.registerAugmentions(("MPC-MIB", "mpcStatisticsEntry"))
mpcStatisticsEntry.setIndexNames(*mpcConfigEntry.getIndexNames())
if mibBuilder.loadTexts: mpcStatisticsEntry.setStatus('current')
mpcStatTxMpoaResolveRequests = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 5, 8, 1, 1, 2, 5, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpcStatTxMpoaResolveRequests.setStatus('current')
mpcStatRxMpoaResolveReplyAcks = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 5, 8, 1, 1, 2, 5, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpcStatRxMpoaResolveReplyAcks.setStatus('current')
mpcStatRxMpoaResolveReplyInsufECResources = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 5, 8, 1, 1, 2, 5, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpcStatRxMpoaResolveReplyInsufECResources.setStatus('current')
mpcStatRxMpoaResolveReplyInsufSCResources = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 5, 8, 1, 1, 2, 5, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpcStatRxMpoaResolveReplyInsufSCResources.setStatus('current')
mpcStatRxMpoaResolveReplyInsufEitherResources = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 5, 8, 1, 1, 2, 5, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpcStatRxMpoaResolveReplyInsufEitherResources.setStatus('current')
mpcStatRxMpoaResolveReplyUnsupportedInetProt = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 5, 8, 1, 1, 2, 5, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpcStatRxMpoaResolveReplyUnsupportedInetProt.setStatus('current')
mpcStatRxMpoaResolveReplyUnsupportedMacEncaps = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 5, 8, 1, 1, 2, 5, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpcStatRxMpoaResolveReplyUnsupportedMacEncaps.setStatus('current')
mpcStatRxMpoaResolveReplyUnspecifiedOther = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 5, 8, 1, 1, 2, 5, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpcStatRxMpoaResolveReplyUnspecifiedOther.setStatus('current')
mpcStatRxMpoaImpRequests = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 5, 8, 1, 1, 2, 5, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpcStatRxMpoaImpRequests.setStatus('current')
mpcStatTxMpoaImpReplyAcks = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 5, 8, 1, 1, 2, 5, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpcStatTxMpoaImpReplyAcks.setStatus('current')
mpcStatTxMpoaImpReplyInsufECResources = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 5, 8, 1, 1, 2, 5, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpcStatTxMpoaImpReplyInsufECResources.setStatus('current')
mpcStatTxMpoaImpReplyInsufSCResources = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 5, 8, 1, 1, 2, 5, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpcStatTxMpoaImpReplyInsufSCResources.setStatus('current')
mpcStatTxMpoaImpReplyInsufEitherResources = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 5, 8, 1, 1, 2, 5, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpcStatTxMpoaImpReplyInsufEitherResources.setStatus('current')
mpcStatTxMpoaImpReplyUnsupportedInetProt = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 5, 8, 1, 1, 2, 5, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpcStatTxMpoaImpReplyUnsupportedInetProt.setStatus('current')
mpcStatTxMpoaImpReplyUnsupportedMacEncaps = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 5, 8, 1, 1, 2, 5, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpcStatTxMpoaImpReplyUnsupportedMacEncaps.setStatus('current')
mpcStatTxMpoaImpReplyUnspecifiedOther = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 5, 8, 1, 1, 2, 5, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpcStatTxMpoaImpReplyUnspecifiedOther.setStatus('current')
mpcStatTxMpoaEgressCachePurgeRequests = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 5, 8, 1, 1, 2, 5, 1, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpcStatTxMpoaEgressCachePurgeRequests.setStatus('current')
mpcStatRxMpoaEgressCachePurgeReplies = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 5, 8, 1, 1, 2, 5, 1, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpcStatRxMpoaEgressCachePurgeReplies.setStatus('current')
mpcStatRxMpoaKeepAlives = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 5, 8, 1, 1, 2, 5, 1, 19), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpcStatRxMpoaKeepAlives.setStatus('current')
mpcStatRxMpoaTriggers = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 5, 8, 1, 1, 2, 5, 1, 20), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpcStatRxMpoaTriggers.setStatus('current')
mpcStatRxMpoaDataPlanePurges = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 5, 8, 1, 1, 2, 5, 1, 21), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpcStatRxMpoaDataPlanePurges.setStatus('current')
mpcStatTxMpoaDataPlanePurges = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 5, 8, 1, 1, 2, 5, 1, 22), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpcStatTxMpoaDataPlanePurges.setStatus('current')
mpcStatRxNhrpPurgeRequests = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 5, 8, 1, 1, 2, 5, 1, 23), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpcStatRxNhrpPurgeRequests.setStatus('current')
mpcStatTxNhrpPurgeReplies = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 5, 8, 1, 1, 2, 5, 1, 24), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpcStatTxNhrpPurgeReplies.setStatus('current')
mpcStatRxErrUnrecognizedExtensions = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 5, 8, 1, 1, 2, 5, 1, 25), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpcStatRxErrUnrecognizedExtensions.setStatus('current')
mpcStatRxErrLoopDetecteds = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 5, 8, 1, 1, 2, 5, 1, 26), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpcStatRxErrLoopDetecteds.setStatus('current')
mpcStatRxErrProtoAddrUnreachables = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 5, 8, 1, 1, 2, 5, 1, 27), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpcStatRxErrProtoAddrUnreachables.setStatus('current')
mpcStatRxErrProtoErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 5, 8, 1, 1, 2, 5, 1, 28), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpcStatRxErrProtoErrors.setStatus('current')
mpcStatRxErrSduSizeExceededs = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 5, 8, 1, 1, 2, 5, 1, 29), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpcStatRxErrSduSizeExceededs.setStatus('current')
mpcStatRxErrInvalidExtensions = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 5, 8, 1, 1, 2, 5, 1, 30), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpcStatRxErrInvalidExtensions.setStatus('current')
mpcStatRxErrInvalidReplies = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 5, 8, 1, 1, 2, 5, 1, 31), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpcStatRxErrInvalidReplies.setStatus('current')
mpcStatRxErrAuthenticationFailures = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 5, 8, 1, 1, 2, 5, 1, 32), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpcStatRxErrAuthenticationFailures.setStatus('current')
mpcStatRxErrHopCountExceededs = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 5, 8, 1, 1, 2, 5, 1, 33), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpcStatRxErrHopCountExceededs.setStatus('current')
mpcMpsTable = MibTable((1, 3, 6, 1, 4, 1, 353, 5, 8, 1, 1, 2, 8), )
if mibBuilder.loadTexts: mpcMpsTable.setStatus('current')
mpcMpsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 353, 5, 8, 1, 1, 2, 8, 1), ).setIndexNames((0, "MPC-MIB", "mpcMpsIndex"))
if mibBuilder.loadTexts: mpcMpsEntry.setStatus('current')
mpcMpsIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 5, 8, 1, 1, 2, 8, 1, 1), MpsIndex())
if mibBuilder.loadTexts: mpcMpsIndex.setStatus('current')
mpcMpsAtmAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 5, 8, 1, 1, 2, 8, 1, 2), AtmAddr()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpcMpsAtmAddr.setStatus('current')
mpcIngressCacheTable = MibTable((1, 3, 6, 1, 4, 1, 353, 5, 8, 1, 1, 2, 12), )
if mibBuilder.loadTexts: mpcIngressCacheTable.setStatus('current')
mpcIngressCacheEntry = MibTableRow((1, 3, 6, 1, 4, 1, 353, 5, 8, 1, 1, 2, 12, 1), ).setIndexNames((0, "MPC-MIB", "mpcIngressCacheDestInetworkAddrType"), (0, "MPC-MIB", "mpcIngressCacheDestAddr"), (0, "MPC-MIB", "mpcIndex"), (0, "MPC-MIB", "mpcMpsIndex"))
if mibBuilder.loadTexts: mpcIngressCacheEntry.setStatus('current')
mpcIngressCacheDestInetworkAddrType = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 5, 8, 1, 1, 2, 12, 1, 1), InternetworkAddrType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpcIngressCacheDestInetworkAddrType.setStatus('current')
mpcIngressCacheDestAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 5, 8, 1, 1, 2, 12, 1, 2), InternetworkAddr()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpcIngressCacheDestAddr.setStatus('current')
mpcIngressCachePrefixLen = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 5, 8, 1, 1, 2, 12, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpcIngressCachePrefixLen.setStatus('current')
mpcIngressCacheDestAtmAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 5, 8, 1, 1, 2, 12, 1, 4), AtmAddr()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpcIngressCacheDestAtmAddr.setStatus('current')
mpcIngressCacheSrcAtmAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 5, 8, 1, 1, 2, 12, 1, 5), AtmAddr()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpcIngressCacheSrcAtmAddr.setStatus('current')
mpcIngressCacheEntryState = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 5, 8, 1, 1, 2, 12, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("doesNotExist", 1), ("inactive", 2), ("active", 3), ("negative", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpcIngressCacheEntryState.setStatus('current')
mpcIngressCacheEgressCacheTagValid = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 5, 8, 1, 1, 2, 12, 1, 7), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpcIngressCacheEgressCacheTagValid.setStatus('current')
mpcIngressCacheEgressCacheTag = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 5, 8, 1, 1, 2, 12, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpcIngressCacheEgressCacheTag.setStatus('current')
mpcIngressCacheLastNhrpCieCode = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 5, 8, 1, 1, 2, 12, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpcIngressCacheLastNhrpCieCode.setStatus('current')
mpcIngressCacheSigErrCode = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 5, 8, 1, 1, 2, 12, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpcIngressCacheSigErrCode.setStatus('current')
mpcIngressCacheRetries = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 5, 8, 1, 1, 2, 12, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpcIngressCacheRetries.setStatus('current')
mpcIngressCacheTimeUntilNextResolutionRequest = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 5, 8, 1, 1, 2, 12, 1, 12), TimeInterval()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpcIngressCacheTimeUntilNextResolutionRequest.setStatus('current')
mpcIngressCacheHoldingTime = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 5, 8, 1, 1, 2, 12, 1, 13), TimeInterval()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpcIngressCacheHoldingTime.setStatus('current')
mpcIngressCacheServiceCategory = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 5, 8, 1, 1, 2, 12, 1, 14), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpcIngressCacheServiceCategory.setStatus('current')
mpcEgressCacheTable = MibTable((1, 3, 6, 1, 4, 1, 353, 5, 8, 1, 1, 2, 15), )
if mibBuilder.loadTexts: mpcEgressCacheTable.setStatus('current')
mpcEgressCacheEntry = MibTableRow((1, 3, 6, 1, 4, 1, 353, 5, 8, 1, 1, 2, 15, 1), ).setIndexNames((0, "MPC-MIB", "mpcEgressCacheId"), (0, "MPC-MIB", "mpcIndex"), (0, "MPC-MIB", "mpcMpsIndex"))
if mibBuilder.loadTexts: mpcEgressCacheEntry.setStatus('current')
mpcEgressCacheId = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 5, 8, 1, 1, 2, 15, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpcEgressCacheId.setStatus('current')
mpcEgressCacheInetworkAddrType = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 5, 8, 1, 1, 2, 15, 1, 2), InternetworkAddrType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpcEgressCacheInetworkAddrType.setStatus('current')
mpcEgressCacheIDestAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 5, 8, 1, 1, 2, 15, 1, 3), InternetworkAddr()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpcEgressCacheIDestAddr.setStatus('current')
mpcEgressCachePrefixLen = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 5, 8, 1, 1, 2, 15, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpcEgressCachePrefixLen.setStatus('current')
mpcEgressCacheEntryState = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 5, 8, 1, 1, 2, 15, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("doesNotExist", 1), ("inactive", 2), ("active", 3), ("negative", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpcEgressCacheEntryState.setStatus('current')
mpcEgressCacheEgressCacheTagValid = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 5, 8, 1, 1, 2, 15, 1, 6), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpcEgressCacheEgressCacheTagValid.setStatus('current')
mpcEgressCacheEgressCacheTag = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 5, 8, 1, 1, 2, 15, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpcEgressCacheEgressCacheTag.setStatus('current')
mpcEgressCacheHoldTime = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 5, 8, 1, 1, 2, 15, 1, 8), TimeInterval()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpcEgressCacheHoldTime.setStatus('current')
mpcEgressCacheDataLinkHeader = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 5, 8, 1, 1, 2, 15, 1, 9), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpcEgressCacheDataLinkHeader.setStatus('current')
mpcEgressCacheIngressMpcDataAtmAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 5, 8, 1, 1, 2, 15, 1, 10), AtmAddr()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpcEgressCacheIngressMpcDataAtmAddr.setStatus('current')
mpcEgressCacheLecIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 5, 8, 1, 1, 2, 15, 1, 11), LecIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpcEgressCacheLecIndex.setStatus('current')
mpcEgressCacheServiceCategory = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 5, 8, 1, 1, 2, 15, 1, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpcEgressCacheServiceCategory.setStatus('current')
mpcMpsObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 353, 5, 8, 1, 1, 2, 16))
mpoaMIBConformance = MibIdentifier((1, 3, 6, 1, 4, 1, 353, 5, 8, 1, 2))
mpoaMIBGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 353, 5, 8, 1, 2, 1))
mpoaMIBCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 353, 5, 8, 1, 2, 2))
mibBuilder.exportSymbols("MPC-MIB", AtmConfigAddr=AtmConfigAddr, mpcDiscontinuityTime=mpcDiscontinuityTime, mpcStatRxMpoaResolveReplyUnspecifiedOther=mpcStatRxMpoaResolveReplyUnspecifiedOther, mpcIngressCacheDestInetworkAddrType=mpcIngressCacheDestInetworkAddrType, mpcEgressCacheIngressMpcDataAtmAddr=mpcEgressCacheIngressMpcDataAtmAddr, mpcIngressCacheEgressCacheTagValid=mpcIngressCacheEgressCacheTagValid, mpcStatRxMpoaResolveReplyAcks=mpcStatRxMpoaResolveReplyAcks, mpcEgressCacheIDestAddr=mpcEgressCacheIDestAddr, mpcRetryTimeMaximum=mpcRetryTimeMaximum, mpcStatRxMpoaResolveReplyInsufECResources=mpcStatRxMpoaResolveReplyInsufECResources, mpcCtrlAtmAddr=mpcCtrlAtmAddr, mpcStatRxErrAuthenticationFailures=mpcStatRxErrAuthenticationFailures, mpcEgressCacheHoldTime=mpcEgressCacheHoldTime, mpcActualConfigMode=mpcActualConfigMode, mpcSCSetupFrameTime=mpcSCSetupFrameTime, mpcConfigTable=mpcConfigTable, mpoaMIBObjects=mpoaMIBObjects, mpcIngressCacheDestAddr=mpcIngressCacheDestAddr, mpoaMIBConformance=mpoaMIBConformance, AtmAddr=AtmAddr, mpcStatRxMpoaResolveReplyUnsupportedMacEncaps=mpcStatRxMpoaResolveReplyUnsupportedMacEncaps, mpcStatRxErrHopCountExceededs=mpcStatRxErrHopCountExceededs, mpcIngressCacheLastNhrpCieCode=mpcIngressCacheLastNhrpCieCode, mpcActualInitialRetryTime=mpcActualInitialRetryTime, mpcStatTxMpoaImpReplyUnsupportedMacEncaps=mpcStatTxMpoaImpReplyUnsupportedMacEncaps, mpcStatTxMpoaImpReplyInsufECResources=mpcStatTxMpoaImpReplyInsufECResources, mpcStatTxMpoaDataPlanePurges=mpcStatTxMpoaDataPlanePurges, mpcIngressCacheHoldingTime=mpcIngressCacheHoldingTime, mpcMpsAtmAddr=mpcMpsAtmAddr, mpcIngressCachePrefixLen=mpcIngressCachePrefixLen, mpcStatTxMpoaImpReplyAcks=mpcStatTxMpoaImpReplyAcks, mpcActualHoldDownTime=mpcActualHoldDownTime, mpcIngressCacheEgressCacheTag=mpcIngressCacheEgressCacheTag, mpoaMIB=mpoaMIB, mpcActualSCSetupFrameTime=mpcActualSCSetupFrameTime, mpcNextIndex=mpcNextIndex, mpcStatTxNhrpPurgeReplies=mpcStatTxNhrpPurgeReplies, mpcEgressCacheLecIndex=mpcEgressCacheLecIndex, mpcStatRxMpoaResolveReplyInsufSCResources=mpcStatRxMpoaResolveReplyInsufSCResources, mpcActualState=mpcActualState, mpcStatRxErrInvalidExtensions=mpcStatRxErrInvalidExtensions, mpcIngressCacheSrcAtmAddr=mpcIngressCacheSrcAtmAddr, mpcMpsIndex=mpcMpsIndex, MpcIndex=MpcIndex, mpcStatTxMpoaImpReplyInsufEitherResources=mpcStatTxMpoaImpReplyInsufEitherResources, mpcConfigMode=mpcConfigMode, mpcStatRxMpoaResolveReplyInsufEitherResources=mpcStatRxMpoaResolveReplyInsufEitherResources, mpcIndex=mpcIndex, mpcEgressCacheEntry=mpcEgressCacheEntry, InternetworkAddr=InternetworkAddr, mpcStatRxErrSduSizeExceededs=mpcStatRxErrSduSizeExceededs, mpcEgressCacheEntryState=mpcEgressCacheEntryState, mpcStatRxErrProtoAddrUnreachables=mpcStatRxErrProtoAddrUnreachables, mpcStatRxErrInvalidReplies=mpcStatRxErrInvalidReplies, mpcStatRxMpoaTriggers=mpcStatRxMpoaTriggers, mpcMpsTable=mpcMpsTable, mpcObjects=mpcObjects, mpcIngressCacheTimeUntilNextResolutionRequest=mpcIngressCacheTimeUntilNextResolutionRequest, mpcStatRxErrProtoErrors=mpcStatRxErrProtoErrors, mpcStatTxMpoaResolveRequests=mpcStatTxMpoaResolveRequests, mpcStatisticsEntry=mpcStatisticsEntry, mpcIngressCacheDestAtmAddr=mpcIngressCacheDestAtmAddr, mpcEgressCachePrefixLen=mpcEgressCachePrefixLen, mpcEgressCacheEgressCacheTag=mpcEgressCacheEgressCacheTag, mpcMpsEntry=mpcMpsEntry, mpcStatRxMpoaEgressCachePurgeReplies=mpcStatRxMpoaEgressCachePurgeReplies, mpoaMIBGroups=mpoaMIBGroups, mpcIngressCacheTable=mpcIngressCacheTable, mpoaMIBCompliances=mpoaMIBCompliances, mpcIngressCacheEntry=mpcIngressCacheEntry, mpcStatRxMpoaResolveReplyUnsupportedInetProt=mpcStatRxMpoaResolveReplyUnsupportedInetProt, mpcStatTxMpoaEgressCachePurgeRequests=mpcStatTxMpoaEgressCachePurgeRequests, mpcInitialRetryTime=mpcInitialRetryTime, mpcEgressCacheServiceCategory=mpcEgressCacheServiceCategory, mpcStatRxNhrpPurgeRequests=mpcStatRxNhrpPurgeRequests, mpcActualEntry=mpcActualEntry, mpcStatTxMpoaImpReplyInsufSCResources=mpcStatTxMpoaImpReplyInsufSCResources, LecIndex=LecIndex, mpcEgressCacheId=mpcEgressCacheId, mpoaCommonObjects=mpoaCommonObjects, mpcActualRetryTimeMaximum=mpcActualRetryTimeMaximum, atmForumNetworkManagement=atmForumNetworkManagement, mpcRowStatus=mpcRowStatus, mpcStatisticsTable=mpcStatisticsTable, mpcStatRxErrLoopDetecteds=mpcStatRxErrLoopDetecteds, mpcStatTxMpoaImpReplyUnspecifiedOther=mpcStatTxMpoaImpReplyUnspecifiedOther, mpcEgressCacheTable=mpcEgressCacheTable, mpcEgressCacheEgressCacheTagValid=mpcEgressCacheEgressCacheTagValid, mpcStatRxMpoaImpRequests=mpcStatRxMpoaImpRequests, mpcIngressCacheEntryState=mpcIngressCacheEntryState, mpcIngressCacheRetries=mpcIngressCacheRetries, MpsIndex=MpsIndex, mpcHoldDownTime=mpcHoldDownTime, PYSNMP_MODULE_ID=mpoaMIB, mpcActualSCSetupFrameCount=mpcActualSCSetupFrameCount, mpcStatRxMpoaDataPlanePurges=mpcStatRxMpoaDataPlanePurges, InternetworkAddrType=InternetworkAddrType, mpcActualTable=mpcActualTable, mpcIngressCacheSigErrCode=mpcIngressCacheSigErrCode, mpcConfigEntry=mpcConfigEntry, mpcEgressCacheDataLinkHeader=mpcEgressCacheDataLinkHeader, mpcIngressCacheServiceCategory=mpcIngressCacheServiceCategory, mpcMpsObjects=mpcMpsObjects, atmForum=atmForum, mpcStatRxMpoaKeepAlives=mpcStatRxMpoaKeepAlives, atmfMpoa=atmfMpoa, mpcSCSetupFrameCount=mpcSCSetupFrameCount, mpcStatRxErrUnrecognizedExtensions=mpcStatRxErrUnrecognizedExtensions, mpcStatTxMpoaImpReplyUnsupportedInetProt=mpcStatTxMpoaImpReplyUnsupportedInetProt, mpcEgressCacheInetworkAddrType=mpcEgressCacheInetworkAddrType)
