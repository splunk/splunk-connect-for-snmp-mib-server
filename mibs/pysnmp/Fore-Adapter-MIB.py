#
# PySNMP MIB module Fore-Adapter-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/Fore-Adapter-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 19:03:10 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, OctetString, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "Integer", "OctetString", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsIntersection, SingleValueConstraint, ValueSizeConstraint, ValueRangeConstraint, ConstraintsUnion = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsIntersection", "SingleValueConstraint", "ValueSizeConstraint", "ValueRangeConstraint", "ConstraintsUnion")
systems, NsapAddr, SpansAddress, EntryStatus = mibBuilder.importSymbols("Fore-Common-MIB", "systems", "NsapAddr", "SpansAddress", "EntryStatus")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
Bits, Counter32, iso, ObjectIdentity, TimeTicks, Counter64, ModuleIdentity, Unsigned32, NotificationType, Integer32, IpAddress, Gauge32, MibScalar, MibTable, MibTableRow, MibTableColumn, MibIdentifier = mibBuilder.importSymbols("SNMPv2-SMI", "Bits", "Counter32", "iso", "ObjectIdentity", "TimeTicks", "Counter64", "ModuleIdentity", "Unsigned32", "NotificationType", "Integer32", "IpAddress", "Gauge32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "MibIdentifier")
TextualConvention, DisplayString, RowStatus = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString", "RowStatus")
atmAdapter = ModuleIdentity((1, 3, 6, 1, 4, 1, 326, 2, 1))
if mibBuilder.loadTexts: atmAdapter.setLastUpdated('9911050000Z')
if mibBuilder.loadTexts: atmAdapter.setOrganization('FORE')
adapterGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 326, 2, 1, 1))
phyLayerGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 326, 2, 1, 2))
atmLayerGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 326, 2, 1, 3))
aalGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 326, 2, 1, 4))
connGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 326, 2, 1, 5))
sonetGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 326, 2, 1, 6))
sonetAdapterConfGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 326, 2, 1, 6, 1))
sonetAdapterStatsGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 326, 2, 1, 6, 2))
statsGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 326, 2, 1, 7))
atmIpGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 326, 2, 1, 8))
atmarpGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 326, 2, 1, 8, 1))
classicalIpGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 326, 2, 1, 8, 2))
ipFilterGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 326, 2, 1, 8, 3))
ipFilterConfGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 326, 2, 1, 8, 3, 1))
ipFilterStatsGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 326, 2, 1, 8, 3, 2))
adapterTable = MibTable((1, 3, 6, 1, 4, 1, 326, 2, 1, 1, 1), )
if mibBuilder.loadTexts: adapterTable.setStatus('current')
adapterEntry = MibTableRow((1, 3, 6, 1, 4, 1, 326, 2, 1, 1, 1, 1), ).setIndexNames((0, "Fore-Adapter-MIB", "adapterInterface"))
if mibBuilder.loadTexts: adapterEntry.setStatus('current')
adapterInterface = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 1, 1, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adapterInterface.setStatus('current')
adapterSerialNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 1, 1, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adapterSerialNumber.setStatus('current')
adapterHardwareVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 1, 1, 1, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adapterHardwareVersion.setStatus('current')
adapterHardwareSpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 1, 1, 1, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adapterHardwareSpeed.setStatus('current')
adapterFirmwareVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 1, 1, 1, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adapterFirmwareVersion.setStatus('current')
adapterSoftwareVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 1, 1, 1, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adapterSoftwareVersion.setStatus('current')
adapterTransmitBufferSize = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 1, 1, 1, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adapterTransmitBufferSize.setStatus('current')
adapterTransmitQueueLength = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 1, 1, 1, 1, 8), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adapterTransmitQueueLength.setStatus('current')
adapterReceiveBufferSize = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 1, 1, 1, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adapterReceiveBufferSize.setStatus('current')
adapterReceiveQueueLength = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 1, 1, 1, 1, 10), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adapterReceiveQueueLength.setStatus('current')
adapterOperStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 1, 1, 1, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("enabled", 2), ("disabled", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: adapterOperStatus.setStatus('current')
adapterCarrier = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 1, 1, 1, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("carrier", 1), ("noCarrier", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: adapterCarrier.setStatus('current')
adapterAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 1, 1, 1, 1, 13), SpansAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adapterAddress.setStatus('current')
adapterUptime = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 1, 1, 1, 1, 14), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adapterUptime.setStatus('current')
adapterPhyLayer = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 1, 1, 1, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11))).clone(namedValues=NamedValues(("phy-4B5B-MMODE-100", 1), ("phy-4B5B-MMODE-140", 2), ("phy-ASX-100", 3), ("phy-OC3-MMODE-ST", 4), ("phy-OC3-MMODE-SC", 5), ("phy-4B5B-SMODE-100", 6), ("phy-4B5B-SMODE-140", 7), ("phy-OC3-SMODE-SHORT", 8), ("phy-OC3-SMODE-LONG", 9), ("phy-UTP5-SONET", 10), ("phy-STP1-SONET", 11)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: adapterPhyLayer.setStatus('current')
adapterType = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 1, 1, 1, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22))).clone(namedValues=NamedValues(("type-SBA-100", 1), ("type-GIA-100", 2), ("type-TCA-100", 3), ("type-NXA-100", 4), ("type-ASX-100", 5), ("type-SBA-200", 6), ("type-VMA-200", 7), ("type-ESA-200", 8), ("type-MCA-200", 9), ("type-ASX-200", 10), ("type-HPA-200", 11), ("type-ESA-200PC", 12), ("type-NBA-200", 13), ("type-PCA-200", 14), ("type-GIA-200", 15), ("type-SBA-200e", 16), ("type-ESA-200e", 17), ("type-GIA-200e", 18), ("type-PCA-200e", 19), ("type-LANNET", 20), ("type-VMA-200e", 21), ("type-MCA-200e", 22)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: adapterType.setStatus('current')
adapterFirmwareVersionText = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 1, 1, 1, 1, 17), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adapterFirmwareVersionText.setStatus('current')
adapterSoftwareVersionText = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 1, 1, 1, 1, 18), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adapterSoftwareVersionText.setStatus('current')
phyLayerTable = MibTable((1, 3, 6, 1, 4, 1, 326, 2, 1, 2, 1), )
if mibBuilder.loadTexts: phyLayerTable.setStatus('current')
phyLayerEntry = MibTableRow((1, 3, 6, 1, 4, 1, 326, 2, 1, 2, 1, 1), ).setIndexNames((0, "Fore-Adapter-MIB", "phyLayerInterface"))
if mibBuilder.loadTexts: phyLayerEntry.setStatus('current')
phyLayerInterface = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 1, 2, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: phyLayerInterface.setStatus('current')
phyLayerFramingErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 1, 2, 1, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: phyLayerFramingErrors.setStatus('current')
phyLayerHeaderCRCErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 1, 2, 1, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: phyLayerHeaderCRCErrors.setStatus('current')
atmLayerTable = MibTable((1, 3, 6, 1, 4, 1, 326, 2, 1, 3, 1), )
if mibBuilder.loadTexts: atmLayerTable.setStatus('current')
atmLayerEntry = MibTableRow((1, 3, 6, 1, 4, 1, 326, 2, 1, 3, 1, 1), ).setIndexNames((0, "Fore-Adapter-MIB", "atmInterface"))
if mibBuilder.loadTexts: atmLayerEntry.setStatus('current')
atmInterface = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 1, 3, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmInterface.setStatus('current')
atmTransmittedCells = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 1, 3, 1, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmTransmittedCells.setStatus('current')
atmReceivedCells = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 1, 3, 1, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmReceivedCells.setStatus('current')
atmOutOfRangeVPIs = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 1, 3, 1, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmOutOfRangeVPIs.setStatus('current')
atmUnconnectedVPIs = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 1, 3, 1, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmUnconnectedVPIs.setStatus('current')
atmOutOfRangeVCIs = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 1, 3, 1, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmOutOfRangeVCIs.setStatus('current')
atmUnconnectedVCIs = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 1, 3, 1, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmUnconnectedVCIs.setStatus('current')
aal4Table = MibTable((1, 3, 6, 1, 4, 1, 326, 2, 1, 4, 1), )
if mibBuilder.loadTexts: aal4Table.setStatus('current')
aal4Entry = MibTableRow((1, 3, 6, 1, 4, 1, 326, 2, 1, 4, 1, 1), ).setIndexNames((0, "Fore-Adapter-MIB", "aal4Interface"))
if mibBuilder.loadTexts: aal4Entry.setStatus('current')
aal4Interface = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 1, 4, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aal4Interface.setStatus('current')
aal4TransmittedCells = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 1, 4, 1, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aal4TransmittedCells.setStatus('current')
aal4ReceivedCells = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 1, 4, 1, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aal4ReceivedCells.setStatus('current')
aal4TransmittedPDUs = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 1, 4, 1, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aal4TransmittedPDUs.setStatus('current')
aal4ReceivedPDUs = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 1, 4, 1, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aal4ReceivedPDUs.setStatus('current')
aal4PayloadCRCErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 1, 4, 1, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aal4PayloadCRCErrors.setStatus('current')
aal4SARProtocolErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 1, 4, 1, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aal4SARProtocolErrors.setStatus('current')
aal4CSProtocolErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 1, 4, 1, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aal4CSProtocolErrors.setStatus('current')
aal4CellsDiscards = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 1, 4, 1, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aal4CellsDiscards.setStatus('current')
aal4PDUsDiscards = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 1, 4, 1, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aal4PDUsDiscards.setStatus('current')
aal5Table = MibTable((1, 3, 6, 1, 4, 1, 326, 2, 1, 4, 2), )
if mibBuilder.loadTexts: aal5Table.setStatus('current')
aal5Entry = MibTableRow((1, 3, 6, 1, 4, 1, 326, 2, 1, 4, 2, 1), ).setIndexNames((0, "Fore-Adapter-MIB", "aal5Interface"))
if mibBuilder.loadTexts: aal5Entry.setStatus('current')
aal5Interface = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 1, 4, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aal5Interface.setStatus('current')
aal5TransmittedCells = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 1, 4, 2, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aal5TransmittedCells.setStatus('current')
aal5ReceivedCells = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 1, 4, 2, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aal5ReceivedCells.setStatus('current')
aal5TransmittedPDUs = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 1, 4, 2, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aal5TransmittedPDUs.setStatus('current')
aal5ReceivedPDUs = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 1, 4, 2, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aal5ReceivedPDUs.setStatus('current')
aal5CRCErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 1, 4, 2, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aal5CRCErrors.setStatus('current')
aal5CSProtocolErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 1, 4, 2, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aal5CSProtocolErrors.setStatus('current')
aal5CellsDiscards = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 1, 4, 2, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aal5CellsDiscards.setStatus('current')
aal5PDUsDiscards = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 1, 4, 2, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aal5PDUsDiscards.setStatus('current')
aal0Table = MibTable((1, 3, 6, 1, 4, 1, 326, 2, 1, 4, 3), )
if mibBuilder.loadTexts: aal0Table.setStatus('current')
aal0Entry = MibTableRow((1, 3, 6, 1, 4, 1, 326, 2, 1, 4, 3, 1), ).setIndexNames((0, "Fore-Adapter-MIB", "aal0Interface"))
if mibBuilder.loadTexts: aal0Entry.setStatus('current')
aal0Interface = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 1, 4, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aal0Interface.setStatus('current')
aal0TransmittedCells = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 1, 4, 3, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aal0TransmittedCells.setStatus('current')
aal0ReceivedCells = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 1, 4, 3, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aal0ReceivedCells.setStatus('current')
aal0CellsDiscards = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 1, 4, 3, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aal0CellsDiscards.setStatus('current')
connTable = MibTable((1, 3, 6, 1, 4, 1, 326, 2, 1, 5, 1), )
if mibBuilder.loadTexts: connTable.setStatus('current')
connEntry = MibTableRow((1, 3, 6, 1, 4, 1, 326, 2, 1, 5, 1, 1), ).setIndexNames((0, "Fore-Adapter-MIB", "connInterface"), (0, "Fore-Adapter-MIB", "connDirection"), (0, "Fore-Adapter-MIB", "connVPI"), (0, "Fore-Adapter-MIB", "connVCI"))
if mibBuilder.loadTexts: connEntry.setStatus('current')
connInterface = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 1, 5, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: connInterface.setStatus('current')
connDirection = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 1, 5, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("incoming", 1), ("outgoing", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: connDirection.setStatus('current')
connVPI = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 1, 5, 1, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: connVPI.setStatus('current')
connVCI = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 1, 5, 1, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: connVCI.setStatus('current')
connLocalSAP = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 1, 5, 1, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: connLocalSAP.setStatus('current')
connRemoteSAP = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 1, 5, 1, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: connRemoteSAP.setStatus('current')
connRemoteAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 1, 5, 1, 1, 7), SpansAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: connRemoteAddress.setStatus('current')
connPeakBandwidth = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 1, 5, 1, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: connPeakBandwidth.setStatus('current')
connMeanBandwidth = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 1, 5, 1, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: connMeanBandwidth.setStatus('current')
connMeanBurst = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 1, 5, 1, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: connMeanBurst.setStatus('current')
connUptime = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 1, 5, 1, 1, 11), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: connUptime.setStatus('current')
atmarpFlushTable = MibScalar((1, 3, 6, 1, 4, 1, 326, 2, 1, 8, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disable", 1), ("enable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmarpFlushTable.setStatus('current')
atmarpTable = MibTable((1, 3, 6, 1, 4, 1, 326, 2, 1, 8, 1, 2), )
if mibBuilder.loadTexts: atmarpTable.setStatus('current')
atmarpEntry = MibTableRow((1, 3, 6, 1, 4, 1, 326, 2, 1, 8, 1, 2, 1), ).setIndexNames((0, "Fore-Adapter-MIB", "atmarpIpAddress"))
if mibBuilder.loadTexts: atmarpEntry.setStatus('current')
atmarpIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 1, 8, 1, 2, 1, 1), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmarpIpAddress.setStatus('current')
atmarpInterface = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 1, 8, 1, 2, 1, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmarpInterface.setStatus('current')
atmarpSpansAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 1, 8, 1, 2, 1, 3), SpansAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmarpSpansAddress.setStatus('current')
atmarpNsapAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 1, 8, 1, 2, 1, 4), NsapAddr()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmarpNsapAddress.setStatus('current')
atmarpVPI = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 1, 8, 1, 2, 1, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmarpVPI.setStatus('current')
atmarpVCI = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 1, 8, 1, 2, 1, 6), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmarpVCI.setStatus('current')
atmarpConnType = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 1, 8, 1, 2, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("foreIpPVC", 1), ("foreIpSVC", 2), ("classicalIpPVC", 3), ("classicalIpSVC", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmarpConnType.setStatus('current')
atmarpAALType = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 1, 8, 1, 2, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("aal34", 1), ("aal5", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmarpAALType.setStatus('current')
atmarpPeakBandwidth = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 1, 8, 1, 2, 1, 9), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmarpPeakBandwidth.setStatus('current')
atmarpConnDirection = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 1, 8, 1, 2, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("outgoing", 1), ("bidirectional", 2), ("pending", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmarpConnDirection.setStatus('current')
atmarpEntryValidity = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 1, 8, 1, 2, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("valid", 1), ("invalid", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmarpEntryValidity.setStatus('current')
atmarpEntryType = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 1, 8, 1, 2, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("dynamic", 1), ("static", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmarpEntryType.setStatus('current')
atmarpEntryStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 1, 8, 1, 2, 1, 13), EntryStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmarpEntryStatus.setStatus('current')
classicalIpArpTable = MibTable((1, 3, 6, 1, 4, 1, 326, 2, 1, 8, 2, 1), )
if mibBuilder.loadTexts: classicalIpArpTable.setStatus('current')
classicalIpArpEntry = MibTableRow((1, 3, 6, 1, 4, 1, 326, 2, 1, 8, 2, 1, 1), ).setIndexNames((0, "Fore-Adapter-MIB", "classicalIpArpIfIndex"), (0, "Fore-Adapter-MIB", "classicalIpArpServerIndex"))
if mibBuilder.loadTexts: classicalIpArpEntry.setStatus('current')
classicalIpArpIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 1, 8, 2, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: classicalIpArpIfIndex.setStatus('current')
classicalIpArpServerIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 1, 8, 2, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: classicalIpArpServerIndex.setStatus('current')
classicalIpArpServer = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 1, 8, 2, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disable", 1), ("enable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: classicalIpArpServer.setStatus('current')
classicalIpArpServerConfigType = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 1, 8, 2, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("manualConfig", 1), ("wellKnown", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: classicalIpArpServerConfigType.setStatus('current')
classicalIpWellKnownArpServerAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 1, 8, 2, 1, 1, 5), NsapAddr()).setMaxAccess("readonly")
if mibBuilder.loadTexts: classicalIpWellKnownArpServerAddr.setStatus('current')
classicalIpManualConfigArpServerAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 1, 8, 2, 1, 1, 6), NsapAddr()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: classicalIpManualConfigArpServerAddr.setStatus('current')
class IpHeader(OctetString):
    subtypeSpec = OctetString.subtypeSpec + ValueSizeConstraint(64, 64)
    fixedLength = 64

ipFilterTable = MibTable((1, 3, 6, 1, 4, 1, 326, 2, 1, 8, 3, 1, 1), )
if mibBuilder.loadTexts: ipFilterTable.setStatus('current')
ipFilterEntry = MibTableRow((1, 3, 6, 1, 4, 1, 326, 2, 1, 8, 3, 1, 1, 1), ).setIndexNames((0, "Fore-Adapter-MIB", "ipFilterIpAddress"), (0, "Fore-Adapter-MIB", "ipFilterMask"))
if mibBuilder.loadTexts: ipFilterEntry.setStatus('current')
ipFilterIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 1, 8, 3, 1, 1, 1, 1), IpAddress())
if mibBuilder.loadTexts: ipFilterIpAddress.setStatus('current')
ipFilterMask = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 1, 8, 3, 1, 1, 1, 2), IpAddress())
if mibBuilder.loadTexts: ipFilterMask.setStatus('current')
ipFilterRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 1, 8, 3, 1, 1, 1, 3), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipFilterRowStatus.setStatus('current')
ipFilterNoSSR = MibScalar((1, 3, 6, 1, 4, 1, 326, 2, 1, 8, 3, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipFilterNoSSR.setStatus('current')
ipFilterNoLSR = MibScalar((1, 3, 6, 1, 4, 1, 326, 2, 1, 8, 3, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipFilterNoLSR.setStatus('current')
ipFilterNoInBand = MibScalar((1, 3, 6, 1, 4, 1, 326, 2, 1, 8, 3, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipFilterNoInBand.setStatus('current')
ipFilterStatsIpHeader = MibScalar((1, 3, 6, 1, 4, 1, 326, 2, 1, 8, 3, 2, 1), IpHeader()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipFilterStatsIpHeader.setStatus('current')
ipFilterStatsTimeOccured = MibScalar((1, 3, 6, 1, 4, 1, 326, 2, 1, 8, 3, 2, 2), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipFilterStatsTimeOccured.setStatus('current')
ipFilterStatsViolations = MibScalar((1, 3, 6, 1, 4, 1, 326, 2, 1, 8, 3, 2, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipFilterStatsViolations.setStatus('current')
ipFilterStatsVPI = MibScalar((1, 3, 6, 1, 4, 1, 326, 2, 1, 8, 3, 2, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipFilterStatsVPI.setStatus('current')
ipFilterStatsVCI = MibScalar((1, 3, 6, 1, 4, 1, 326, 2, 1, 8, 3, 2, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipFilterStatsVCI.setStatus('current')
ipFilterStatsIfName = MibScalar((1, 3, 6, 1, 4, 1, 326, 2, 1, 8, 3, 2, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipFilterStatsIfName.setStatus('current')
ipFilterStatsReasonText = MibScalar((1, 3, 6, 1, 4, 1, 326, 2, 1, 8, 3, 2, 7), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipFilterStatsReasonText.setStatus('current')
ipFilterStatsSrcIpAddr = MibScalar((1, 3, 6, 1, 4, 1, 326, 2, 1, 8, 3, 2, 8), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipFilterStatsSrcIpAddr.setStatus('current')
mibBuilder.exportSymbols("Fore-Adapter-MIB", sonetAdapterConfGroup=sonetAdapterConfGroup, classicalIpArpTable=classicalIpArpTable, connGroup=connGroup, sonetAdapterStatsGroup=sonetAdapterStatsGroup, aal5ReceivedCells=aal5ReceivedCells, statsGroup=statsGroup, connVCI=connVCI, adapterHardwareVersion=adapterHardwareVersion, atmarpAALType=atmarpAALType, aal4Entry=aal4Entry, aal5ReceivedPDUs=aal5ReceivedPDUs, connEntry=connEntry, atmOutOfRangeVPIs=atmOutOfRangeVPIs, classicalIpWellKnownArpServerAddr=classicalIpWellKnownArpServerAddr, ipFilterTable=ipFilterTable, adapterGroup=adapterGroup, sonetGroup=sonetGroup, aal0TransmittedCells=aal0TransmittedCells, aal5CRCErrors=aal5CRCErrors, adapterUptime=adapterUptime, aal4Table=aal4Table, adapterAddress=adapterAddress, atmLayerGroup=atmLayerGroup, connMeanBandwidth=connMeanBandwidth, connRemoteAddress=connRemoteAddress, atmarpNsapAddress=atmarpNsapAddress, ipFilterStatsTimeOccured=ipFilterStatsTimeOccured, aal0Table=aal0Table, adapterTransmitQueueLength=adapterTransmitQueueLength, adapterType=adapterType, phyLayerGroup=phyLayerGroup, aal5TransmittedPDUs=aal5TransmittedPDUs, aal5CSProtocolErrors=aal5CSProtocolErrors, ipFilterMask=ipFilterMask, atmReceivedCells=atmReceivedCells, phyLayerFramingErrors=phyLayerFramingErrors, aal4ReceivedPDUs=aal4ReceivedPDUs, connLocalSAP=connLocalSAP, atmarpEntryValidity=atmarpEntryValidity, aal4PDUsDiscards=aal4PDUsDiscards, atmarpEntryStatus=atmarpEntryStatus, adapterOperStatus=adapterOperStatus, aal4Interface=aal4Interface, aal5Table=aal5Table, atmarpEntryType=atmarpEntryType, adapterTable=adapterTable, adapterInterface=adapterInterface, phyLayerHeaderCRCErrors=phyLayerHeaderCRCErrors, classicalIpManualConfigArpServerAddr=classicalIpManualConfigArpServerAddr, ipFilterStatsIfName=ipFilterStatsIfName, ipFilterNoSSR=ipFilterNoSSR, aal0CellsDiscards=aal0CellsDiscards, atmarpVPI=atmarpVPI, ipFilterStatsSrcIpAddr=ipFilterStatsSrcIpAddr, aal4ReceivedCells=aal4ReceivedCells, aal5PDUsDiscards=aal5PDUsDiscards, classicalIpArpEntry=classicalIpArpEntry, atmAdapter=atmAdapter, adapterPhyLayer=adapterPhyLayer, atmUnconnectedVCIs=atmUnconnectedVCIs, classicalIpArpServerIndex=classicalIpArpServerIndex, adapterFirmwareVersion=adapterFirmwareVersion, adapterSoftwareVersionText=adapterSoftwareVersionText, ipFilterNoLSR=ipFilterNoLSR, classicalIpGroup=classicalIpGroup, atmUnconnectedVPIs=atmUnconnectedVPIs, atmLayerTable=atmLayerTable, classicalIpArpServer=classicalIpArpServer, atmarpGroup=atmarpGroup, aal4SARProtocolErrors=aal4SARProtocolErrors, ipFilterNoInBand=ipFilterNoInBand, atmIpGroup=atmIpGroup, adapterFirmwareVersionText=adapterFirmwareVersionText, adapterTransmitBufferSize=adapterTransmitBufferSize, adapterSoftwareVersion=adapterSoftwareVersion, atmarpConnDirection=atmarpConnDirection, atmarpTable=atmarpTable, PYSNMP_MODULE_ID=atmAdapter, aal4PayloadCRCErrors=aal4PayloadCRCErrors, adapterCarrier=adapterCarrier, connRemoteSAP=connRemoteSAP, phyLayerInterface=phyLayerInterface, atmarpEntry=atmarpEntry, atmarpIpAddress=atmarpIpAddress, aal0Interface=aal0Interface, atmarpFlushTable=atmarpFlushTable, aal0Entry=aal0Entry, connMeanBurst=connMeanBurst, connDirection=connDirection, ipFilterStatsIpHeader=ipFilterStatsIpHeader, ipFilterRowStatus=ipFilterRowStatus, ipFilterStatsGroup=ipFilterStatsGroup, phyLayerTable=phyLayerTable, adapterSerialNumber=adapterSerialNumber, connTable=connTable, ipFilterConfGroup=ipFilterConfGroup, aal5TransmittedCells=aal5TransmittedCells, ipFilterStatsViolations=ipFilterStatsViolations, aalGroup=aalGroup, connPeakBandwidth=connPeakBandwidth, ipFilterStatsVCI=ipFilterStatsVCI, adapterEntry=adapterEntry, atmTransmittedCells=atmTransmittedCells, classicalIpArpServerConfigType=classicalIpArpServerConfigType, classicalIpArpIfIndex=classicalIpArpIfIndex, connInterface=connInterface, ipFilterGroup=ipFilterGroup, aal5Entry=aal5Entry, aal4TransmittedPDUs=aal4TransmittedPDUs, atmarpVCI=atmarpVCI, aal4CSProtocolErrors=aal4CSProtocolErrors, IpHeader=IpHeader, atmInterface=atmInterface, adapterReceiveQueueLength=adapterReceiveQueueLength, aal5CellsDiscards=aal5CellsDiscards, adapterHardwareSpeed=adapterHardwareSpeed, atmarpPeakBandwidth=atmarpPeakBandwidth, aal5Interface=aal5Interface, ipFilterEntry=ipFilterEntry, atmLayerEntry=atmLayerEntry, aal4CellsDiscards=aal4CellsDiscards, phyLayerEntry=phyLayerEntry, aal0ReceivedCells=aal0ReceivedCells, atmarpSpansAddress=atmarpSpansAddress, connUptime=connUptime, ipFilterStatsVPI=ipFilterStatsVPI, ipFilterIpAddress=ipFilterIpAddress, atmOutOfRangeVCIs=atmOutOfRangeVCIs, adapterReceiveBufferSize=adapterReceiveBufferSize, connVPI=connVPI, aal4TransmittedCells=aal4TransmittedCells, atmarpInterface=atmarpInterface, atmarpConnType=atmarpConnType, ipFilterStatsReasonText=ipFilterStatsReasonText)
