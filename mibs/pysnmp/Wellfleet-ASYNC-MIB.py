#
# PySNMP MIB module Wellfleet-ASYNC-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/Wellfleet-ASYNC-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 21:32:42 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, ObjectIdentifier, Integer = mibBuilder.importSymbols("ASN1", "OctetString", "ObjectIdentifier", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
SingleValueConstraint, ConstraintsIntersection, ValueSizeConstraint, ConstraintsUnion, ValueRangeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "SingleValueConstraint", "ConstraintsIntersection", "ValueSizeConstraint", "ConstraintsUnion", "ValueRangeConstraint")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
Unsigned32, enterprises, mgmt, Gauge32, ModuleIdentity, NotificationType, NotificationType, Counter64, iso, ObjectIdentity, Counter32, Bits, IpAddress, MibIdentifier, Integer32, Opaque, TimeTicks, mib_2, MibScalar, MibTable, MibTableRow, MibTableColumn = mibBuilder.importSymbols("SNMPv2-SMI", "Unsigned32", "enterprises", "mgmt", "Gauge32", "ModuleIdentity", "NotificationType", "NotificationType", "Counter64", "iso", "ObjectIdentity", "Counter32", "Bits", "IpAddress", "MibIdentifier", "Integer32", "Opaque", "TimeTicks", "mib-2", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn")
DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention")
wfLine, = mibBuilder.importSymbols("Wellfleet-COMMON-MIB", "wfLine")
wfAsyncTable = MibTable((1, 3, 6, 1, 4, 1, 18, 3, 4, 3), )
if mibBuilder.loadTexts: wfAsyncTable.setStatus('mandatory')
wfAsyncEntry = MibTableRow((1, 3, 6, 1, 4, 1, 18, 3, 4, 3, 1), ).setIndexNames((0, "Wellfleet-ASYNC-MIB", "wfAsyncSlot"), (0, "Wellfleet-ASYNC-MIB", "wfAsyncConnector"))
if mibBuilder.loadTexts: wfAsyncEntry.setStatus('mandatory')
wfAsyncDelete = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 3, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("created", 1), ("deleted", 2))).clone('created')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfAsyncDelete.setStatus('mandatory')
wfAsyncDisable = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 3, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('enabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfAsyncDisable.setStatus('mandatory')
wfAsyncState = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 3, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("up", 1), ("down", 2), ("init", 3), ("notpresent", 4), ("dsrwait", 5))).clone('notpresent')).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfAsyncState.setStatus('mandatory')
wfAsyncSlot = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 3, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfAsyncSlot.setStatus('mandatory')
wfAsyncConnector = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 3, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("one", 1), ("two", 2), ("three", 3), ("four", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfAsyncConnector.setStatus('mandatory')
wfAsyncCct = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 3, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1023))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfAsyncCct.setStatus('mandatory')
wfAsyncMtu = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 3, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(3, 1580)).clone(1000)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfAsyncMtu.setStatus('mandatory')
wfAsyncMadr = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 3, 1, 8), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfAsyncMadr.setStatus('mandatory')
wfAsyncStartProtocol = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 3, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("loop", 1), ("originate", 2), ("answer", 3))).clone('answer')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfAsyncStartProtocol.setStatus('mandatory')
wfAsyncRxOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 3, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfAsyncRxOctets.setStatus('mandatory')
wfAsyncTxOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 3, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfAsyncTxOctets.setStatus('mandatory')
wfAsyncRxErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 3, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfAsyncRxErrors.setStatus('mandatory')
wfAsyncTxErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 3, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfAsyncTxErrors.setStatus('mandatory')
wfAsyncRxLackRescs = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 3, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfAsyncRxLackRescs.setStatus('mandatory')
wfAsyncTxLackRescs = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 3, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfAsyncTxLackRescs.setStatus('mandatory')
wfAsyncTxUnderFlows = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 3, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfAsyncTxUnderFlows.setStatus('mandatory')
wfAsyncTxRejects = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 3, 1, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfAsyncTxRejects.setStatus('mandatory')
wfAsyncRxRejects = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 3, 1, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfAsyncRxRejects.setStatus('mandatory')
wfAsyncRxOverFlows = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 3, 1, 19), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfAsyncRxOverFlows.setStatus('mandatory')
wfAsyncRxBadOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 3, 1, 20), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfAsyncRxBadOctets.setStatus('mandatory')
wfAsyncRxRunts = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 3, 1, 21), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfAsyncRxRunts.setStatus('mandatory')
wfAsyncTxQueueLength = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 3, 1, 22), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfAsyncTxQueueLength.setStatus('mandatory')
wfAsyncRxQueueLength = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 3, 1, 23), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfAsyncRxQueueLength.setStatus('mandatory')
wfAsyncRxReplenMisses = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 3, 1, 24), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfAsyncRxReplenMisses.setStatus('mandatory')
wfAsyncLineNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 3, 1, 25), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfAsyncLineNumber.setStatus('mandatory')
wfAsyncRemoteAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 3, 1, 26), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfAsyncRemoteAddress.setStatus('mandatory')
wfAsyncRemotePort = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 3, 1, 27), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(7))).clone(namedValues=NamedValues(("port", 7))).clone('port')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfAsyncRemotePort.setStatus('mandatory')
wfAsyncLocalPort = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 3, 1, 28), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2100))).clone(namedValues=NamedValues(("default", 2100))).clone('default')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfAsyncLocalPort.setStatus('mandatory')
wfAsyncBaud = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 3, 1, 29), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(300, 1200, 2400, 4800, 9600, 19200))).clone(namedValues=NamedValues(("r300", 300), ("r1200", 1200), ("r2400", 2400), ("r4800", 4800), ("r9600", 9600), ("r19200", 19200))).clone('r9600')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfAsyncBaud.setStatus('mandatory')
wfAsyncIdleTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 3, 1, 30), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 300)).clone(20)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfAsyncIdleTimer.setStatus('mandatory')
wfAsyncRxWindow = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 3, 1, 31), Integer32().subtype(subtypeSpec=ValueRangeConstraint(512, 65535)).clone(4096)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfAsyncRxWindow.setStatus('mandatory')
wfAsyncMinRxWindows = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 3, 1, 32), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfAsyncMinRxWindows.setStatus('mandatory')
wfASyncSecTxQmaxs = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 3, 1, 33), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfASyncSecTxQmaxs.setStatus('mandatory')
wfASyncSecTxQlens = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 3, 1, 34), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfASyncSecTxQlens.setStatus('mandatory')
wfAsyncTCPKeepalive = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 3, 1, 35), Integer32().subtype(subtypeSpec=ValueRangeConstraint(3, 180)).clone(8)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfAsyncTCPKeepalive.setStatus('mandatory')
wfAsyncTCPInactivityLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 3, 1, 36), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-65536, 65535)).clone(300)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfAsyncTCPInactivityLimit.setStatus('mandatory')
wfAsyncCfgTxQueueLength = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 3, 1, 37), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfAsyncCfgTxQueueLength.setStatus('mandatory')
wfAsyncCfgRxQueueLength = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 3, 1, 38), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfAsyncCfgRxQueueLength.setStatus('mandatory')
mibBuilder.exportSymbols("Wellfleet-ASYNC-MIB", wfAsyncBaud=wfAsyncBaud, wfAsyncTxOctets=wfAsyncTxOctets, wfAsyncConnector=wfAsyncConnector, wfAsyncTxLackRescs=wfAsyncTxLackRescs, wfAsyncTxRejects=wfAsyncTxRejects, wfAsyncCct=wfAsyncCct, wfAsyncEntry=wfAsyncEntry, wfAsyncRxBadOctets=wfAsyncRxBadOctets, wfAsyncRxRunts=wfAsyncRxRunts, wfAsyncCfgTxQueueLength=wfAsyncCfgTxQueueLength, wfAsyncMadr=wfAsyncMadr, wfAsyncRxWindow=wfAsyncRxWindow, wfAsyncDisable=wfAsyncDisable, wfAsyncRxReplenMisses=wfAsyncRxReplenMisses, wfAsyncTxErrors=wfAsyncTxErrors, wfAsyncTxQueueLength=wfAsyncTxQueueLength, wfAsyncStartProtocol=wfAsyncStartProtocol, wfAsyncRemoteAddress=wfAsyncRemoteAddress, wfAsyncIdleTimer=wfAsyncIdleTimer, wfAsyncTCPKeepalive=wfAsyncTCPKeepalive, wfAsyncRxOverFlows=wfAsyncRxOverFlows, wfAsyncRxOctets=wfAsyncRxOctets, wfAsyncRxQueueLength=wfAsyncRxQueueLength, wfAsyncLocalPort=wfAsyncLocalPort, wfAsyncRemotePort=wfAsyncRemotePort, wfASyncSecTxQlens=wfASyncSecTxQlens, wfAsyncState=wfAsyncState, wfAsyncTxUnderFlows=wfAsyncTxUnderFlows, wfAsyncRxLackRescs=wfAsyncRxLackRescs, wfAsyncDelete=wfAsyncDelete, wfAsyncLineNumber=wfAsyncLineNumber, wfAsyncMinRxWindows=wfAsyncMinRxWindows, wfAsyncTCPInactivityLimit=wfAsyncTCPInactivityLimit, wfAsyncCfgRxQueueLength=wfAsyncCfgRxQueueLength, wfASyncSecTxQmaxs=wfASyncSecTxQmaxs, wfAsyncRxRejects=wfAsyncRxRejects, wfAsyncMtu=wfAsyncMtu, wfAsyncSlot=wfAsyncSlot, wfAsyncRxErrors=wfAsyncRxErrors, wfAsyncTable=wfAsyncTable)
