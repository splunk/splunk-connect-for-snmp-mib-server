#
# PySNMP MIB module VINA-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/VINA-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 21:27:25 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, OctetString, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "Integer", "OctetString", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
SingleValueConstraint, ConstraintsIntersection, ValueRangeConstraint, ValueSizeConstraint, ConstraintsUnion = mibBuilder.importSymbols("ASN1-REFINEMENT", "SingleValueConstraint", "ConstraintsIntersection", "ValueRangeConstraint", "ValueSizeConstraint", "ConstraintsUnion")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
IpAddress, NotificationType, Counter64, TimeTicks, ModuleIdentity, Counter32, MibScalar, MibTable, MibTableRow, MibTableColumn, MibIdentifier, enterprises, iso, Integer32, NotificationType, Bits, Gauge32, Unsigned32, transmission, ObjectIdentity = mibBuilder.importSymbols("SNMPv2-SMI", "IpAddress", "NotificationType", "Counter64", "TimeTicks", "ModuleIdentity", "Counter32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "MibIdentifier", "enterprises", "iso", "Integer32", "NotificationType", "Bits", "Gauge32", "Unsigned32", "transmission", "ObjectIdentity")
TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString")
vina = MibIdentifier((1, 3, 6, 1, 4, 1, 2186))
vinaSys = MibIdentifier((1, 3, 6, 1, 4, 1, 2186, 1))
operatingSystem = MibIdentifier((1, 3, 6, 1, 4, 1, 2186, 1, 1))
vxworks = MibIdentifier((1, 3, 6, 1, 4, 1, 2186, 1, 1, 1))
snmpd = MibIdentifier((1, 3, 6, 1, 4, 1, 2186, 1, 2))
vinaTraps = MibIdentifier((1, 3, 6, 1, 4, 1, 2186, 2))
agentVersion = MibScalar((1, 3, 6, 1, 4, 1, 2186, 1, 2, 1), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentVersion.setStatus('mandatory')
portVersion = MibScalar((1, 3, 6, 1, 4, 1, 2186, 1, 2, 2), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: portVersion.setStatus('mandatory')
taskPriority = MibScalar((1, 3, 6, 1, 4, 1, 2186, 1, 2, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: taskPriority.setStatus('mandatory')
idle = MibIdentifier((1, 3, 6, 1, 4, 1, 2186, 1, 3))
currentIdle = MibScalar((1, 3, 6, 1, 4, 1, 2186, 1, 3, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: currentIdle.setStatus('mandatory')
tenSecondIdle = MibScalar((1, 3, 6, 1, 4, 1, 2186, 1, 3, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tenSecondIdle.setStatus('mandatory')
sixtySecondIdle = MibScalar((1, 3, 6, 1, 4, 1, 2186, 1, 3, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sixtySecondIdle.setStatus('mandatory')
userIdle = MibScalar((1, 3, 6, 1, 4, 1, 2186, 1, 3, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: userIdle.setStatus('mandatory')
userInterval = MibScalar((1, 3, 6, 1, 4, 1, 2186, 1, 3, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1024))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: userInterval.setStatus('mandatory')
calibration = MibScalar((1, 3, 6, 1, 4, 1, 2186, 1, 3, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: calibration.setStatus('mandatory')
historySize = MibScalar((1, 3, 6, 1, 4, 1, 2186, 1, 3, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: historySize.setStatus('mandatory')
historyValid = MibScalar((1, 3, 6, 1, 4, 1, 2186, 1, 3, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: historyValid.setStatus('mandatory')
vina_system = MibIdentifier((1, 3, 6, 1, 4, 1, 2186, 1, 4)).setLabel("vina-system")
reboot = MibScalar((1, 3, 6, 1, 4, 1, 2186, 1, 4, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: reboot.setStatus('mandatory')
rebootVME = MibScalar((1, 3, 6, 1, 4, 1, 2186, 1, 4, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rebootVME.setStatus('mandatory')
abortReboot = MibScalar((1, 3, 6, 1, 4, 1, 2186, 1, 4, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: abortReboot.setStatus('mandatory')
silent = MibScalar((1, 3, 6, 1, 4, 1, 2186, 1, 4, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: silent.setStatus('mandatory')
spuriousInts = MibScalar((1, 3, 6, 1, 4, 1, 2186, 1, 4, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: spuriousInts.setStatus('mandatory')
vinaSla = MibIdentifier((1, 3, 6, 1, 4, 1, 2186, 1, 5))
vinaSlaConfigVars = MibIdentifier((1, 3, 6, 1, 4, 1, 2186, 1, 5, 1))
vinaSlaNumValidIntervals = MibScalar((1, 3, 6, 1, 4, 1, 2186, 1, 5, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vinaSlaNumValidIntervals.setStatus('mandatory')
vinaSlaCurrentTable = MibTable((1, 3, 6, 1, 4, 1, 2186, 1, 5, 2), )
if mibBuilder.loadTexts: vinaSlaCurrentTable.setStatus('mandatory')
vinaSlaCurrentEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2186, 1, 5, 2, 1), ).setIndexNames((0, "VINA-MIB", "vinaSlaCurrentPvcNumber"))
if mibBuilder.loadTexts: vinaSlaCurrentEntry.setStatus('mandatory')
vinaSlaCurrentPvcNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2186, 1, 5, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 30))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vinaSlaCurrentPvcNumber.setStatus('mandatory')
vinaSlaCurrentEndToEndAveLatency = MibTableColumn((1, 3, 6, 1, 4, 1, 2186, 1, 5, 2, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 60000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vinaSlaCurrentEndToEndAveLatency.setStatus('mandatory')
vinaSlaCurrentEndToEndPeakLatency = MibTableColumn((1, 3, 6, 1, 4, 1, 2186, 1, 5, 2, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 60000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vinaSlaCurrentEndToEndPeakLatency.setStatus('mandatory')
vinaSlaCurrentDdrAboveCir = MibTableColumn((1, 3, 6, 1, 4, 1, 2186, 1, 5, 2, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 10000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vinaSlaCurrentDdrAboveCir.setStatus('mandatory')
vinaSlaCurrentDdrBelowCir = MibTableColumn((1, 3, 6, 1, 4, 1, 2186, 1, 5, 2, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 10000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vinaSlaCurrentDdrBelowCir.setStatus('mandatory')
vinaSlaCurrentPvcDowntime = MibTableColumn((1, 3, 6, 1, 4, 1, 2186, 1, 5, 2, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 900000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vinaSlaCurrentPvcDowntime.setStatus('mandatory')
vinaSlaCurrentPvcUptime = MibTableColumn((1, 3, 6, 1, 4, 1, 2186, 1, 5, 2, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 900000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vinaSlaCurrentPvcUptime.setStatus('mandatory')
vinaSlaCurrentPvcNumTimesDown = MibTableColumn((1, 3, 6, 1, 4, 1, 2186, 1, 5, 2, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 10000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vinaSlaCurrentPvcNumTimesDown.setStatus('mandatory')
vinaSlaIntervalTable = MibTable((1, 3, 6, 1, 4, 1, 2186, 1, 5, 3), )
if mibBuilder.loadTexts: vinaSlaIntervalTable.setStatus('mandatory')
vinaSlaIntervalEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2186, 1, 5, 3, 1), ).setIndexNames((0, "VINA-MIB", "vinaSlaIntervalPvcNumber"), (0, "VINA-MIB", "vinaSlaIntervalNumber"))
if mibBuilder.loadTexts: vinaSlaIntervalEntry.setStatus('mandatory')
vinaSlaIntervalPvcNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2186, 1, 5, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 30))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vinaSlaIntervalPvcNumber.setStatus('mandatory')
vinaSlaIntervalNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2186, 1, 5, 3, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 96))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vinaSlaIntervalNumber.setStatus('mandatory')
vinaSlaIntervalEndToEndAveLatency = MibTableColumn((1, 3, 6, 1, 4, 1, 2186, 1, 5, 3, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 60000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vinaSlaIntervalEndToEndAveLatency.setStatus('mandatory')
vinaSlaIntervalEndToEndPeakLatency = MibTableColumn((1, 3, 6, 1, 4, 1, 2186, 1, 5, 3, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 60000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vinaSlaIntervalEndToEndPeakLatency.setStatus('mandatory')
vinaSlaIntervalDdrAboveCir = MibTableColumn((1, 3, 6, 1, 4, 1, 2186, 1, 5, 3, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 10000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vinaSlaIntervalDdrAboveCir.setStatus('mandatory')
vinaSlaIntervalDdrBelowCir = MibTableColumn((1, 3, 6, 1, 4, 1, 2186, 1, 5, 3, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 10000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vinaSlaIntervalDdrBelowCir.setStatus('mandatory')
vinaSlaIntervalPvcDowntime = MibTableColumn((1, 3, 6, 1, 4, 1, 2186, 1, 5, 3, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 900000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vinaSlaIntervalPvcDowntime.setStatus('mandatory')
vinaSlaIntervalPvcUptime = MibTableColumn((1, 3, 6, 1, 4, 1, 2186, 1, 5, 3, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 900000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vinaSlaIntervalPvcUptime.setStatus('mandatory')
vinaSlaIntervalPvcNumTimesDown = MibTableColumn((1, 3, 6, 1, 4, 1, 2186, 1, 5, 3, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 10000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vinaSlaIntervalPvcNumTimesDown.setStatus('mandatory')
vxMemory = MibIdentifier((1, 3, 6, 1, 4, 1, 2186, 1, 1, 1, 1))
currentMemory = MibIdentifier((1, 3, 6, 1, 4, 1, 2186, 1, 1, 1, 1, 2))
currentMemorybytes = MibScalar((1, 3, 6, 1, 4, 1, 2186, 1, 1, 1, 1, 2, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: currentMemorybytes.setStatus('mandatory')
currentMemoryblocks = MibScalar((1, 3, 6, 1, 4, 1, 2186, 1, 1, 1, 1, 2, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: currentMemoryblocks.setStatus('mandatory')
currentMemoryavgerage = MibScalar((1, 3, 6, 1, 4, 1, 2186, 1, 1, 1, 1, 2, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: currentMemoryavgerage.setStatus('mandatory')
currentMemorymaximum = MibScalar((1, 3, 6, 1, 4, 1, 2186, 1, 1, 1, 1, 2, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: currentMemorymaximum.setStatus('mandatory')
freeMemory = MibIdentifier((1, 3, 6, 1, 4, 1, 2186, 1, 1, 1, 1, 3))
freeMemorybytes = MibScalar((1, 3, 6, 1, 4, 1, 2186, 1, 1, 1, 1, 3, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: freeMemorybytes.setStatus('mandatory')
freeMemoryblocks = MibScalar((1, 3, 6, 1, 4, 1, 2186, 1, 1, 1, 1, 3, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: freeMemoryblocks.setStatus('mandatory')
freeMemoryaverage = MibScalar((1, 3, 6, 1, 4, 1, 2186, 1, 1, 1, 1, 3, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: freeMemoryaverage.setStatus('mandatory')
cumulativeMemory = MibIdentifier((1, 3, 6, 1, 4, 1, 2186, 1, 1, 1, 1, 4))
cumulativebytes = MibScalar((1, 3, 6, 1, 4, 1, 2186, 1, 1, 1, 1, 4, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cumulativebytes.setStatus('mandatory')
cumulativeblocks = MibScalar((1, 3, 6, 1, 4, 1, 2186, 1, 1, 1, 1, 4, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cumulativeblocks.setStatus('mandatory')
cumulativeaverage = MibScalar((1, 3, 6, 1, 4, 1, 2186, 1, 1, 1, 1, 4, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cumulativeaverage.setStatus('mandatory')
vxNetwork = MibIdentifier((1, 3, 6, 1, 4, 1, 2186, 1, 1, 1, 2))
vxTcp = MibIdentifier((1, 3, 6, 1, 4, 1, 2186, 1, 1, 1, 2, 1))
vxTask = MibIdentifier((1, 3, 6, 1, 4, 1, 2186, 1, 1, 1, 3))
vxNumTasks = MibScalar((1, 3, 6, 1, 4, 1, 2186, 1, 1, 1, 3, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vxNumTasks.setStatus('mandatory')
vxTaskTable = MibTable((1, 3, 6, 1, 4, 1, 2186, 1, 1, 1, 3, 2), )
if mibBuilder.loadTexts: vxTaskTable.setStatus('deprecated')
vxTaskEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2186, 1, 1, 1, 3, 2, 1), ).setIndexNames((0, "VINA-MIB", "taskID"))
if mibBuilder.loadTexts: vxTaskEntry.setStatus('deprecated')
name = MibTableColumn((1, 3, 6, 1, 4, 1, 2186, 1, 1, 1, 3, 2, 1, 1), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: name.setStatus('deprecated')
entryPoint = MibTableColumn((1, 3, 6, 1, 4, 1, 2186, 1, 1, 1, 3, 2, 1, 2), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: entryPoint.setStatus('deprecated')
taskID = MibTableColumn((1, 3, 6, 1, 4, 1, 2186, 1, 1, 1, 3, 2, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: taskID.setStatus('deprecated')
priority = MibTableColumn((1, 3, 6, 1, 4, 1, 2186, 1, 1, 1, 3, 2, 1, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: priority.setStatus('deprecated')
status = MibTableColumn((1, 3, 6, 1, 4, 1, 2186, 1, 1, 1, 3, 2, 1, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: status.setStatus('deprecated')
programCounter = MibTableColumn((1, 3, 6, 1, 4, 1, 2186, 1, 1, 1, 3, 2, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: programCounter.setStatus('deprecated')
stackPointer = MibTableColumn((1, 3, 6, 1, 4, 1, 2186, 1, 1, 1, 3, 2, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stackPointer.setStatus('deprecated')
errno = MibTableColumn((1, 3, 6, 1, 4, 1, 2186, 1, 1, 1, 3, 2, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: errno.setStatus('deprecated')
delay = MibTableColumn((1, 3, 6, 1, 4, 1, 2186, 1, 1, 1, 3, 2, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: delay.setStatus('deprecated')
vxBootParams = MibIdentifier((1, 3, 6, 1, 4, 1, 2186, 1, 1, 1, 4))
bootDev = MibScalar((1, 3, 6, 1, 4, 1, 2186, 1, 1, 1, 4, 1), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bootDev.setStatus('mandatory')
hostName = MibScalar((1, 3, 6, 1, 4, 1, 2186, 1, 1, 1, 4, 2), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hostName.setStatus('mandatory')
targetName = MibScalar((1, 3, 6, 1, 4, 1, 2186, 1, 1, 1, 4, 3), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: targetName.setStatus('mandatory')
ethernetAddr = MibScalar((1, 3, 6, 1, 4, 1, 2186, 1, 1, 1, 4, 4), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ethernetAddr.setStatus('mandatory')
backplaneAddr = MibScalar((1, 3, 6, 1, 4, 1, 2186, 1, 1, 1, 4, 5), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: backplaneAddr.setStatus('mandatory')
hostAddr = MibScalar((1, 3, 6, 1, 4, 1, 2186, 1, 1, 1, 4, 6), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hostAddr.setStatus('mandatory')
gatewayAddr = MibScalar((1, 3, 6, 1, 4, 1, 2186, 1, 1, 1, 4, 7), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gatewayAddr.setStatus('mandatory')
bootFile = MibScalar((1, 3, 6, 1, 4, 1, 2186, 1, 1, 1, 4, 8), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bootFile.setStatus('mandatory')
startupScript = MibScalar((1, 3, 6, 1, 4, 1, 2186, 1, 1, 1, 4, 9), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: startupScript.setStatus('mandatory')
userName = MibScalar((1, 3, 6, 1, 4, 1, 2186, 1, 1, 1, 4, 10), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: userName.setStatus('mandatory')
password = MibScalar((1, 3, 6, 1, 4, 1, 2186, 1, 1, 1, 4, 11), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: password.setStatus('mandatory')
other = MibScalar((1, 3, 6, 1, 4, 1, 2186, 1, 1, 1, 4, 12), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: other.setStatus('mandatory')
processorNumber = MibScalar((1, 3, 6, 1, 4, 1, 2186, 1, 1, 1, 4, 13), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: processorNumber.setStatus('mandatory')
flags = MibScalar((1, 3, 6, 1, 4, 1, 2186, 1, 1, 1, 4, 14), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: flags.setStatus('mandatory')
vxKernel = MibIdentifier((1, 3, 6, 1, 4, 1, 2186, 1, 1, 1, 5))
vxClock = MibIdentifier((1, 3, 6, 1, 4, 1, 2186, 1, 1, 1, 5, 1))
sysClkRate = MibScalar((1, 3, 6, 1, 4, 1, 2186, 1, 1, 1, 5, 1, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysClkRate.setStatus('mandatory')
ticks = MibScalar((1, 3, 6, 1, 4, 1, 2186, 1, 1, 1, 5, 1, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ticks.setStatus('mandatory')
frame_relay = MibIdentifier((1, 3, 6, 1, 2, 1, 10, 32)).setLabel("frame-relay")
class Index(Integer32):
    pass

class DLCI(Integer32):
    pass

frDlcmiTable = MibTable((1, 3, 6, 1, 2, 1, 10, 32, 1), )
if mibBuilder.loadTexts: frDlcmiTable.setStatus('mandatory')
frDlcmiEntry = MibTableRow((1, 3, 6, 1, 2, 1, 10, 32, 1, 1), ).setIndexNames((0, "VINA-MIB", "frDlcmiIfIndex"))
if mibBuilder.loadTexts: frDlcmiEntry.setStatus('mandatory')
frDlcmiIfIndex = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 32, 1, 1, 1), Index()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frDlcmiIfIndex.setStatus('mandatory')
frDlcmiState = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 32, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("noLmiConfigured", 1), ("lmiRev1", 2), ("ansiT1-617-D", 3), ("ansiT1-617-B", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: frDlcmiState.setStatus('mandatory')
frDlcmiAddress = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 32, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("q921", 1), ("q922March90", 2), ("q922November90", 3), ("q922", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: frDlcmiAddress.setStatus('mandatory')
frDlcmiAddressLen = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 32, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3, 4))).clone(namedValues=NamedValues(("two-octets", 2), ("three-octets", 3), ("four-octets", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: frDlcmiAddressLen.setStatus('mandatory')
frDlcmiPollingInterval = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 32, 1, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(5, 30)).clone(10)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: frDlcmiPollingInterval.setStatus('mandatory')
frDlcmiFullEnquiryInterval = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 32, 1, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255)).clone(6)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: frDlcmiFullEnquiryInterval.setStatus('mandatory')
frDlcmiErrorThreshold = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 32, 1, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 10)).clone(3)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: frDlcmiErrorThreshold.setStatus('mandatory')
frDlcmiMonitoredEvents = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 32, 1, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 10)).clone(4)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: frDlcmiMonitoredEvents.setStatus('mandatory')
frDlcmiMaxSupportedVCs = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 32, 1, 1, 9), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: frDlcmiMaxSupportedVCs.setStatus('mandatory')
frDlcmiMulticast = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 32, 1, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("nonBroadcast", 1), ("broadcast", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: frDlcmiMulticast.setStatus('mandatory')
frCircuitTable = MibTable((1, 3, 6, 1, 2, 1, 10, 32, 2), )
if mibBuilder.loadTexts: frCircuitTable.setStatus('mandatory')
frCircuitEntry = MibTableRow((1, 3, 6, 1, 2, 1, 10, 32, 2, 1), ).setIndexNames((0, "VINA-MIB", "frCircuitIfIndex"), (0, "VINA-MIB", "frCircuitDlci"))
if mibBuilder.loadTexts: frCircuitEntry.setStatus('mandatory')
frCircuitIfIndex = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 32, 2, 1, 1), Index()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frCircuitIfIndex.setStatus('mandatory')
frCircuitDlci = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 32, 2, 1, 2), DLCI()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frCircuitDlci.setStatus('mandatory')
frCircuitState = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 32, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("invalid", 1), ("active", 2), ("inactive", 3))).clone('active')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: frCircuitState.setStatus('mandatory')
frCircuitReceivedFECNs = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 32, 2, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frCircuitReceivedFECNs.setStatus('mandatory')
frCircuitReceivedBECNs = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 32, 2, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frCircuitReceivedBECNs.setStatus('mandatory')
frCircuitSentFrames = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 32, 2, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frCircuitSentFrames.setStatus('mandatory')
frCircuitSentOctets = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 32, 2, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frCircuitSentOctets.setStatus('mandatory')
frCircuitReceivedFrames = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 32, 2, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frCircuitReceivedFrames.setStatus('mandatory')
frCircuitReceivedOctets = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 32, 2, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frCircuitReceivedOctets.setStatus('mandatory')
frCircuitCreationTime = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 32, 2, 1, 10), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frCircuitCreationTime.setStatus('mandatory')
frCircuitLastTimeChange = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 32, 2, 1, 11), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frCircuitLastTimeChange.setStatus('mandatory')
frCircuitCommittedBurst = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 32, 2, 1, 12), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: frCircuitCommittedBurst.setStatus('mandatory')
frCircuitExcessBurst = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 32, 2, 1, 13), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: frCircuitExcessBurst.setStatus('mandatory')
frCircuitThroughput = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 32, 2, 1, 14), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: frCircuitThroughput.setStatus('mandatory')
frErrTable = MibTable((1, 3, 6, 1, 2, 1, 10, 32, 3), )
if mibBuilder.loadTexts: frErrTable.setStatus('mandatory')
frErrEntry = MibTableRow((1, 3, 6, 1, 2, 1, 10, 32, 3, 1), ).setIndexNames((0, "VINA-MIB", "frErrIfIndex"))
if mibBuilder.loadTexts: frErrEntry.setStatus('mandatory')
frErrIfIndex = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 32, 3, 1, 1), Index()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frErrIfIndex.setStatus('mandatory')
frErrType = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 32, 3, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10))).clone(namedValues=NamedValues(("unknownError", 1), ("receiveShort", 2), ("receiveLong", 3), ("illegalDLCI", 4), ("unknownDLCI", 5), ("dlcmiProtoErr", 6), ("dlcmiUnknownIE", 7), ("dlcmiSequenceErr", 8), ("dlcmiUnknownRpt", 9), ("noErrorSinceReset", 10)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: frErrType.setStatus('mandatory')
frErrData = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 32, 3, 1, 3), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frErrData.setStatus('mandatory')
frErrTime = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 32, 3, 1, 4), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frErrTime.setStatus('mandatory')
frame_relay_globals = MibIdentifier((1, 3, 6, 1, 2, 1, 10, 32, 4)).setLabel("frame-relay-globals")
frTrapState = MibScalar((1, 3, 6, 1, 2, 1, 10, 32, 4, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: frTrapState.setStatus('mandatory')
frDLCIStatusChange = NotificationType((1, 3, 6, 1, 2, 1, 10, 32) + (0,1)).setObjects(("VINA-MIB", "frCircuitIfIndex"), ("VINA-MIB", "frCircuitDlci"), ("VINA-MIB", "frCircuitState"))
mibBuilder.exportSymbols("VINA-MIB", freeMemoryaverage=freeMemoryaverage, frDlcmiIfIndex=frDlcmiIfIndex, Index=Index, flags=flags, vinaSlaCurrentDdrAboveCir=vinaSlaCurrentDdrAboveCir, frCircuitState=frCircuitState, frErrEntry=frErrEntry, cumulativebytes=cumulativebytes, frCircuitReceivedFECNs=frCircuitReceivedFECNs, frErrTime=frErrTime, vinaSlaCurrentEndToEndAveLatency=vinaSlaCurrentEndToEndAveLatency, vinaSlaCurrentPvcNumber=vinaSlaCurrentPvcNumber, vinaSlaIntervalNumber=vinaSlaIntervalNumber, currentMemory=currentMemory, vinaSlaIntervalDdrAboveCir=vinaSlaIntervalDdrAboveCir, currentMemoryavgerage=currentMemoryavgerage, userIdle=userIdle, vxClock=vxClock, programCounter=programCounter, priority=priority, cumulativeMemory=cumulativeMemory, bootFile=bootFile, frDlcmiMonitoredEvents=frDlcmiMonitoredEvents, vinaSlaCurrentPvcNumTimesDown=vinaSlaCurrentPvcNumTimesDown, frErrTable=frErrTable, frCircuitThroughput=frCircuitThroughput, freeMemory=freeMemory, vinaSlaIntervalTable=vinaSlaIntervalTable, errno=errno, vinaTraps=vinaTraps, vinaSlaCurrentEntry=vinaSlaCurrentEntry, vxBootParams=vxBootParams, frDlcmiState=frDlcmiState, frDlcmiEntry=frDlcmiEntry, frErrData=frErrData, vinaSlaIntervalPvcNumber=vinaSlaIntervalPvcNumber, reboot=reboot, userInterval=userInterval, frDlcmiAddress=frDlcmiAddress, currentMemoryblocks=currentMemoryblocks, idle=idle, vxTaskEntry=vxTaskEntry, name=name, vxTaskTable=vxTaskTable, vinaSla=vinaSla, tenSecondIdle=tenSecondIdle, calibration=calibration, vxworks=vxworks, userName=userName, vinaSlaIntervalPvcUptime=vinaSlaIntervalPvcUptime, delay=delay, entryPoint=entryPoint, sysClkRate=sysClkRate, vinaSlaIntervalEndToEndAveLatency=vinaSlaIntervalEndToEndAveLatency, stackPointer=stackPointer, frCircuitIfIndex=frCircuitIfIndex, freeMemorybytes=freeMemorybytes, processorNumber=processorNumber, frCircuitSentOctets=frCircuitSentOctets, frCircuitCreationTime=frCircuitCreationTime, frTrapState=frTrapState, vinaSlaIntervalDdrBelowCir=vinaSlaIntervalDdrBelowCir, currentIdle=currentIdle, frDlcmiErrorThreshold=frDlcmiErrorThreshold, abortReboot=abortReboot, vinaSlaCurrentEndToEndPeakLatency=vinaSlaCurrentEndToEndPeakLatency, silent=silent, taskPriority=taskPriority, historySize=historySize, frCircuitSentFrames=frCircuitSentFrames, vinaSys=vinaSys, vinaSlaCurrentPvcDowntime=vinaSlaCurrentPvcDowntime, DLCI=DLCI, frErrType=frErrType, vinaSlaIntervalPvcNumTimesDown=vinaSlaIntervalPvcNumTimesDown, vxKernel=vxKernel, vinaSlaCurrentTable=vinaSlaCurrentTable, frame_relay=frame_relay, password=password, snmpd=snmpd, taskID=taskID, frCircuitEntry=frCircuitEntry, vinaSlaConfigVars=vinaSlaConfigVars, startupScript=startupScript, ticks=ticks, frame_relay_globals=frame_relay_globals, frDlcmiFullEnquiryInterval=frDlcmiFullEnquiryInterval, frCircuitDlci=frCircuitDlci, frCircuitReceivedFrames=frCircuitReceivedFrames, vxTask=vxTask, spuriousInts=spuriousInts, portVersion=portVersion, vinaSlaIntervalPvcDowntime=vinaSlaIntervalPvcDowntime, vinaSlaIntervalEndToEndPeakLatency=vinaSlaIntervalEndToEndPeakLatency, frDlcmiMaxSupportedVCs=frDlcmiMaxSupportedVCs, vxNumTasks=vxNumTasks, frDlcmiMulticast=frDlcmiMulticast, vinaSlaCurrentPvcUptime=vinaSlaCurrentPvcUptime, currentMemorybytes=currentMemorybytes, cumulativeaverage=cumulativeaverage, frErrIfIndex=frErrIfIndex, vinaSlaNumValidIntervals=vinaSlaNumValidIntervals, currentMemorymaximum=currentMemorymaximum, frCircuitLastTimeChange=frCircuitLastTimeChange, agentVersion=agentVersion, vinaSlaIntervalEntry=vinaSlaIntervalEntry, status=status, frDLCIStatusChange=frDLCIStatusChange, operatingSystem=operatingSystem, freeMemoryblocks=freeMemoryblocks, vxMemory=vxMemory, hostName=hostName, vxTcp=vxTcp, frDlcmiAddressLen=frDlcmiAddressLen, ethernetAddr=ethernetAddr, vina_system=vina_system, hostAddr=hostAddr, frCircuitCommittedBurst=frCircuitCommittedBurst, other=other, frDlcmiTable=frDlcmiTable, cumulativeblocks=cumulativeblocks, frCircuitExcessBurst=frCircuitExcessBurst, frCircuitTable=frCircuitTable, historyValid=historyValid, gatewayAddr=gatewayAddr, sixtySecondIdle=sixtySecondIdle, frDlcmiPollingInterval=frDlcmiPollingInterval, vxNetwork=vxNetwork, frCircuitReceivedOctets=frCircuitReceivedOctets, targetName=targetName, vinaSlaCurrentDdrBelowCir=vinaSlaCurrentDdrBelowCir, rebootVME=rebootVME, bootDev=bootDev, backplaneAddr=backplaneAddr, vina=vina, frCircuitReceivedBECNs=frCircuitReceivedBECNs)
