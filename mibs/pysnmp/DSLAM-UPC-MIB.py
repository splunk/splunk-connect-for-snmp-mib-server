#
# PySNMP MIB module DSLAM-UPC-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/DSLAM-UPC-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 18:39:50 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, Integer, OctetString = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "Integer", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueRangeConstraint, SingleValueConstraint, ConstraintsUnion, ValueSizeConstraint, ConstraintsIntersection = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueRangeConstraint", "SingleValueConstraint", "ConstraintsUnion", "ValueSizeConstraint", "ConstraintsIntersection")
atmVclVci, atmVclVpi, atmVplVpi = mibBuilder.importSymbols("ATM-MIB", "atmVclVci", "atmVclVpi", "atmVplVpi")
ifIndex, = mibBuilder.importSymbols("IF-MIB", "ifIndex")
pgainDSLAM, = mibBuilder.importSymbols("PAIRGAIN-COMMON-HD-MIB", "pgainDSLAM")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
ObjectIdentity, Unsigned32, IpAddress, NotificationType, TimeTicks, Counter32, Gauge32, MibIdentifier, iso, enterprises, Bits, Integer32, MibScalar, MibTable, MibTableRow, MibTableColumn, ModuleIdentity, Counter64 = mibBuilder.importSymbols("SNMPv2-SMI", "ObjectIdentity", "Unsigned32", "IpAddress", "NotificationType", "TimeTicks", "Counter32", "Gauge32", "MibIdentifier", "iso", "enterprises", "Bits", "Integer32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "ModuleIdentity", "Counter64")
TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString")
pgUpcMIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 927, 1, 9, 11))
if mibBuilder.loadTexts: pgUpcMIB.setLastUpdated('9911081200Z')
if mibBuilder.loadTexts: pgUpcMIB.setOrganization('PairGain Technologies, Inc.')
pgUpcObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 927, 1, 9, 11, 1))
pgAtmUpcPortTable = MibTable((1, 3, 6, 1, 4, 1, 927, 1, 9, 11, 1, 1), )
if mibBuilder.loadTexts: pgAtmUpcPortTable.setStatus('mandatory')
pgAtmUpcPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 927, 1, 9, 11, 1, 1, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: pgAtmUpcPortEntry.setStatus('mandatory')
pgAtmUpcPortAdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 927, 1, 9, 11, 1, 1, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pgAtmUpcPortAdminStatus.setStatus('mandatory')
pgAtmUpcVplTable = MibTable((1, 3, 6, 1, 4, 1, 927, 1, 9, 11, 1, 2), )
if mibBuilder.loadTexts: pgAtmUpcVplTable.setStatus('mandatory')
pgAtmUpcVplEntry = MibTableRow((1, 3, 6, 1, 4, 1, 927, 1, 9, 11, 1, 2, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "ATM-MIB", "atmVplVpi"))
if mibBuilder.loadTexts: pgAtmUpcVplEntry.setStatus('mandatory')
pgAtmUpcVplAdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 927, 1, 9, 11, 1, 2, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pgAtmUpcVplAdminStatus.setStatus('mandatory')
pgAtmUpcVclTable = MibTable((1, 3, 6, 1, 4, 1, 927, 1, 9, 11, 1, 3), )
if mibBuilder.loadTexts: pgAtmUpcVclTable.setStatus('mandatory')
pgAtmUpcVclEntry = MibTableRow((1, 3, 6, 1, 4, 1, 927, 1, 9, 11, 1, 3, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "ATM-MIB", "atmVclVpi"), (0, "ATM-MIB", "atmVclVci"))
if mibBuilder.loadTexts: pgAtmUpcVclEntry.setStatus('mandatory')
pgAtmUpcVclAdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 927, 1, 9, 11, 1, 3, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pgAtmUpcVclAdminStatus.setStatus('mandatory')
pgAtmVplStatTable = MibTable((1, 3, 6, 1, 4, 1, 927, 1, 9, 11, 1, 4), )
if mibBuilder.loadTexts: pgAtmVplStatTable.setStatus('mandatory')
pgAtmVplStatEntry = MibTableRow((1, 3, 6, 1, 4, 1, 927, 1, 9, 11, 1, 4, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "ATM-MIB", "atmVplVpi"))
if mibBuilder.loadTexts: pgAtmVplStatEntry.setStatus('mandatory')
pgAtmVplStatTotalCellIns = MibTableColumn((1, 3, 6, 1, 4, 1, 927, 1, 9, 11, 1, 4, 1, 1), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pgAtmVplStatTotalCellIns.setStatus('mandatory')
pgAtmVplStatClp0CellIns = MibTableColumn((1, 3, 6, 1, 4, 1, 927, 1, 9, 11, 1, 4, 1, 2), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pgAtmVplStatClp0CellIns.setStatus('mandatory')
pgAtmVplStatTotalDiscards = MibTableColumn((1, 3, 6, 1, 4, 1, 927, 1, 9, 11, 1, 4, 1, 3), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pgAtmVplStatTotalDiscards.setStatus('mandatory')
pgAtmVplStatClp0Discards = MibTableColumn((1, 3, 6, 1, 4, 1, 927, 1, 9, 11, 1, 4, 1, 4), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pgAtmVplStatClp0Discards.setStatus('mandatory')
pgAtmVplStatTotalCellOuts = MibTableColumn((1, 3, 6, 1, 4, 1, 927, 1, 9, 11, 1, 4, 1, 5), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pgAtmVplStatTotalCellOuts.setStatus('mandatory')
pgAtmVplStatClp0CellOuts = MibTableColumn((1, 3, 6, 1, 4, 1, 927, 1, 9, 11, 1, 4, 1, 6), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pgAtmVplStatClp0CellOuts.setStatus('mandatory')
pgAtmVplStatTaggedOuts = MibTableColumn((1, 3, 6, 1, 4, 1, 927, 1, 9, 11, 1, 4, 1, 7), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pgAtmVplStatTaggedOuts.setStatus('mandatory')
pgAtmVplStatTotalNonConforming = MibTableColumn((1, 3, 6, 1, 4, 1, 927, 1, 9, 11, 1, 4, 1, 8), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pgAtmVplStatTotalNonConforming.setStatus('mandatory')
pgAtmVplStatClearCounters = MibTableColumn((1, 3, 6, 1, 4, 1, 927, 1, 9, 11, 1, 4, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("clear", 1)))).setMaxAccess("writeonly")
if mibBuilder.loadTexts: pgAtmVplStatClearCounters.setStatus('mandatory')
pgAtmVplStatAllClearCounters = MibScalar((1, 3, 6, 1, 4, 1, 927, 1, 9, 11, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("clear", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pgAtmVplStatAllClearCounters.setStatus('mandatory')
pgAtmVclStatTable = MibTable((1, 3, 6, 1, 4, 1, 927, 1, 9, 11, 1, 6), )
if mibBuilder.loadTexts: pgAtmVclStatTable.setStatus('mandatory')
pgAtmVclStatEntry = MibTableRow((1, 3, 6, 1, 4, 1, 927, 1, 9, 11, 1, 6, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "ATM-MIB", "atmVclVpi"), (0, "ATM-MIB", "atmVclVci"))
if mibBuilder.loadTexts: pgAtmVclStatEntry.setStatus('mandatory')
pgAtmVclStatTotalCellIns = MibTableColumn((1, 3, 6, 1, 4, 1, 927, 1, 9, 11, 1, 6, 1, 1), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pgAtmVclStatTotalCellIns.setStatus('mandatory')
pgAtmVclStatClp0CellIns = MibTableColumn((1, 3, 6, 1, 4, 1, 927, 1, 9, 11, 1, 6, 1, 2), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pgAtmVclStatClp0CellIns.setStatus('mandatory')
pgAtmVclStatTotalDiscards = MibTableColumn((1, 3, 6, 1, 4, 1, 927, 1, 9, 11, 1, 6, 1, 3), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pgAtmVclStatTotalDiscards.setStatus('mandatory')
pgAtmVclStatClp0Discards = MibTableColumn((1, 3, 6, 1, 4, 1, 927, 1, 9, 11, 1, 6, 1, 4), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pgAtmVclStatClp0Discards.setStatus('mandatory')
pgAtmVclStatTotalCellOuts = MibTableColumn((1, 3, 6, 1, 4, 1, 927, 1, 9, 11, 1, 6, 1, 5), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pgAtmVclStatTotalCellOuts.setStatus('mandatory')
pgAtmVclStatClp0CellOuts = MibTableColumn((1, 3, 6, 1, 4, 1, 927, 1, 9, 11, 1, 6, 1, 6), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pgAtmVclStatClp0CellOuts.setStatus('mandatory')
pgAtmVclStatTaggedOuts = MibTableColumn((1, 3, 6, 1, 4, 1, 927, 1, 9, 11, 1, 6, 1, 7), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pgAtmVclStatTaggedOuts.setStatus('mandatory')
pgAtmVclStatTotalNonConforming = MibTableColumn((1, 3, 6, 1, 4, 1, 927, 1, 9, 11, 1, 6, 1, 8), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pgAtmVclStatTotalNonConforming.setStatus('mandatory')
pgAtmVclStatClearCounters = MibTableColumn((1, 3, 6, 1, 4, 1, 927, 1, 9, 11, 1, 6, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("clear", 1)))).setMaxAccess("writeonly")
if mibBuilder.loadTexts: pgAtmVclStatClearCounters.setStatus('mandatory')
pgAtmVclStatAllClearCounters = MibScalar((1, 3, 6, 1, 4, 1, 927, 1, 9, 11, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("clear", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pgAtmVclStatAllClearCounters.setStatus('mandatory')
mibBuilder.exportSymbols("DSLAM-UPC-MIB", pgAtmUpcPortEntry=pgAtmUpcPortEntry, pgAtmVclStatEntry=pgAtmVclStatEntry, pgAtmVplStatTotalDiscards=pgAtmVplStatTotalDiscards, pgAtmVplStatTotalCellIns=pgAtmVplStatTotalCellIns, pgAtmVplStatTaggedOuts=pgAtmVplStatTaggedOuts, pgAtmUpcVclAdminStatus=pgAtmUpcVclAdminStatus, pgAtmVclStatAllClearCounters=pgAtmVclStatAllClearCounters, pgAtmVclStatClp0CellOuts=pgAtmVclStatClp0CellOuts, PYSNMP_MODULE_ID=pgUpcMIB, pgAtmVclStatTotalCellIns=pgAtmVclStatTotalCellIns, pgAtmVclStatTotalCellOuts=pgAtmVclStatTotalCellOuts, pgAtmVclStatTotalDiscards=pgAtmVclStatTotalDiscards, pgUpcObjects=pgUpcObjects, pgAtmVclStatClp0Discards=pgAtmVclStatClp0Discards, pgUpcMIB=pgUpcMIB, pgAtmVplStatClp0Discards=pgAtmVplStatClp0Discards, pgAtmVclStatTotalNonConforming=pgAtmVclStatTotalNonConforming, pgAtmVplStatClp0CellIns=pgAtmVplStatClp0CellIns, pgAtmUpcVplEntry=pgAtmUpcVplEntry, pgAtmVplStatTotalNonConforming=pgAtmVplStatTotalNonConforming, pgAtmUpcVplTable=pgAtmUpcVplTable, pgAtmVplStatTable=pgAtmVplStatTable, pgAtmVclStatClearCounters=pgAtmVclStatClearCounters, pgAtmVclStatClp0CellIns=pgAtmVclStatClp0CellIns, pgAtmVplStatEntry=pgAtmVplStatEntry, pgAtmVplStatClearCounters=pgAtmVplStatClearCounters, pgAtmUpcVplAdminStatus=pgAtmUpcVplAdminStatus, pgAtmUpcVclEntry=pgAtmUpcVclEntry, pgAtmVplStatClp0CellOuts=pgAtmVplStatClp0CellOuts, pgAtmVclStatTaggedOuts=pgAtmVclStatTaggedOuts, pgAtmVplStatAllClearCounters=pgAtmVplStatAllClearCounters, pgAtmVplStatTotalCellOuts=pgAtmVplStatTotalCellOuts, pgAtmVclStatTable=pgAtmVclStatTable, pgAtmUpcPortTable=pgAtmUpcPortTable, pgAtmUpcPortAdminStatus=pgAtmUpcPortAdminStatus, pgAtmUpcVclTable=pgAtmUpcVclTable)
