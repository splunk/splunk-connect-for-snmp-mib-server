#
# PySNMP MIB module APTIS-CONFIG-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/APTIS-CONFIG-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 17:08:41 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
aptis_config, Boolean = mibBuilder.importSymbols("APTIS-MIB", "aptis-config", "Boolean")
aptis_modules, = mibBuilder.importSymbols("APTIS-REG-MIB", "aptis-modules")
OctetString, ObjectIdentifier, Integer = mibBuilder.importSymbols("ASN1", "OctetString", "ObjectIdentifier", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsUnion, ValueSizeConstraint, ConstraintsIntersection, SingleValueConstraint, ValueRangeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsUnion", "ValueSizeConstraint", "ConstraintsIntersection", "SingleValueConstraint", "ValueRangeConstraint")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
ObjectIdentity, MibScalar, MibTable, MibTableRow, MibTableColumn, Integer32, ModuleIdentity, Gauge32, Counter64, Counter32, NotificationType, IpAddress, Unsigned32, MibIdentifier, Bits, iso, TimeTicks = mibBuilder.importSymbols("SNMPv2-SMI", "ObjectIdentity", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Integer32", "ModuleIdentity", "Gauge32", "Counter64", "Counter32", "NotificationType", "IpAddress", "Unsigned32", "MibIdentifier", "Bits", "iso", "TimeTicks")
RowStatus, DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "RowStatus", "DisplayString", "TextualConvention")
aptisConfigModule = ModuleIdentity((1, 3, 6, 1, 4, 1, 2637, 1, 1, 3))
if mibBuilder.loadTexts: aptisConfigModule.setLastUpdated('0004140000Z')
if mibBuilder.loadTexts: aptisConfigModule.setOrganization('Nortel Networks')
callInfoTable = MibTable((1, 3, 6, 1, 4, 1, 2637, 2, 1, 4002), )
if mibBuilder.loadTexts: callInfoTable.setStatus('current')
callInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2637, 2, 1, 4002, 1), ).setIndexNames((0, "APTIS-CONFIG-MIB", "callInfoPathString"))
if mibBuilder.loadTexts: callInfoEntry.setStatus('current')
callInfoPathString = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 4002, 1, 1), DisplayString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: callInfoPathString.setStatus('current')
callInfoRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 4002, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: callInfoRowStatus.setStatus('current')
callInfoKeyValue = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 4002, 1, 3), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: callInfoKeyValue.setStatus('current')
callInfoShelf = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 4002, 1, 11), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: callInfoShelf.setStatus('current')
callInfoSlot = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 4002, 1, 12), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: callInfoSlot.setStatus('current')
callInfoPort = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 4002, 1, 13), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: callInfoPort.setStatus('current')
callInfoDs0 = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 4002, 1, 14), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: callInfoDs0.setStatus('current')
callInfoVpopId = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 4002, 1, 15), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: callInfoVpopId.setStatus('current')
callInfoCallType = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 4002, 1, 20), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: callInfoCallType.setStatus('current')
callInfoFeature = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 4002, 1, 21), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: callInfoFeature.setStatus('current')
callInfoCallingNumberType = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 4002, 1, 30), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: callInfoCallingNumberType.setStatus('current')
callInfoCallingNumberPlan = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 4002, 1, 31), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: callInfoCallingNumberPlan.setStatus('current')
callInfoCallingOptions = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 4002, 1, 32), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: callInfoCallingOptions.setStatus('current')
callInfoCallingNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 4002, 1, 33), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 40))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: callInfoCallingNumber.setStatus('current')
callInfoCallingSubaddressType = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 4002, 1, 34), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: callInfoCallingSubaddressType.setStatus('current')
callInfoCallingSubaddress = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 4002, 1, 35), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 40))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: callInfoCallingSubaddress.setStatus('current')
callInfoCalledNumberType = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 4002, 1, 40), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: callInfoCalledNumberType.setStatus('current')
callInfoCalledNumberPlan = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 4002, 1, 41), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: callInfoCalledNumberPlan.setStatus('current')
callInfoCalledOptions = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 4002, 1, 42), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: callInfoCalledOptions.setStatus('current')
callInfoCalledNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 4002, 1, 43), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 40))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: callInfoCalledNumber.setStatus('current')
callInfoCalledSubaddressType = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 4002, 1, 44), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: callInfoCalledSubaddressType.setStatus('current')
callInfoCalledSubaddress = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 4002, 1, 45), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 40))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: callInfoCalledSubaddress.setStatus('current')
callInfoCallBearerType = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 4002, 1, 46), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: callInfoCallBearerType.setStatus('current')
callInfoCallBearerRate = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 4002, 1, 47), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: callInfoCallBearerRate.setStatus('current')
casConfigTable = MibTable((1, 3, 6, 1, 4, 1, 2637, 2, 1, 2507), )
if mibBuilder.loadTexts: casConfigTable.setStatus('current')
casConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2637, 2, 1, 2507, 1), ).setIndexNames((0, "APTIS-CONFIG-MIB", "casConfigPathString"))
if mibBuilder.loadTexts: casConfigEntry.setStatus('current')
casConfigPathString = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 2507, 1, 1), DisplayString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: casConfigPathString.setStatus('current')
casConfigRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 2507, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: casConfigRowStatus.setStatus('current')
casConfigKeyValue = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 2507, 1, 3), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: casConfigKeyValue.setStatus('current')
casConfigSigBitType = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 2507, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("ccitt", 1))).clone('ccitt')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: casConfigSigBitType.setStatus('current')
casConfigR2Type = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 2507, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16))).clone(namedValues=NamedValues(("ccitt", 1), ("brazil", 2), ("stmartin", 3), ("nzealand", 4), ("china", 5), ("mexico", 6), ("argentina", 7), ("korea", 8), ("philippines", 9), ("thailand", 10), ("malaysia", 11), ("indonesia", 12), ("israel", 13), ("macau", 14), ("india", 15), ("venezuela", 16))).clone('ccitt')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: casConfigR2Type.setStatus('current')
casConfigMaxCalledDigits = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 2507, 1, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 32)).clone(16)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: casConfigMaxCalledDigits.setStatus('current')
casConfigMaxCallingDigits = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 2507, 1, 14), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 32)).clone(10)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: casConfigMaxCallingDigits.setStatus('current')
casConfigReqCallingNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 2507, 1, 15), Boolean().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: casConfigReqCallingNumber.setStatus('current')
casConfigCallingNumberMandatory = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 2507, 1, 16), Boolean().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: casConfigCallingNumberMandatory.setStatus('current')
casConfigRingBack = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 2507, 1, 17), Boolean().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: casConfigRingBack.setStatus('current')
casConfigCdBits = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 2507, 1, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("cd01", 1), ("cd11", 2))).clone('cd01')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: casConfigCdBits.setStatus('current')
casConfigAssumeAcceptCall = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 2507, 1, 19), Boolean().clone('true')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: casConfigAssumeAcceptCall.setStatus('current')
casConfigOOS = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 2507, 1, 20), Boolean().clone('true')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: casConfigOOS.setStatus('current')
casConfigBusyOutOOS = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 2507, 1, 21), Boolean().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: casConfigBusyOutOOS.setStatus('current')
casConfigWinkAfterAnswer = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 2507, 1, 22), Boolean().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: casConfigWinkAfterAnswer.setStatus('current')
casConfigSkipCategoryRequest = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 2507, 1, 23), Boolean().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: casConfigSkipCategoryRequest.setStatus('current')
casTimersTable = MibTable((1, 3, 6, 1, 4, 1, 2637, 2, 1, 2508), )
if mibBuilder.loadTexts: casTimersTable.setStatus('current')
casTimersEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2637, 2, 1, 2508, 1), ).setIndexNames((0, "APTIS-CONFIG-MIB", "casTimersPathString"))
if mibBuilder.loadTexts: casTimersEntry.setStatus('current')
casTimersPathString = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 2508, 1, 1), DisplayString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: casTimersPathString.setStatus('current')
casTimersRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 2508, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: casTimersRowStatus.setStatus('current')
casTimersKeyValue = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 2508, 1, 3), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: casTimersKeyValue.setStatus('current')
casTimersHitThresh = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 2508, 1, 11), Integer32().clone(40)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: casTimersHitThresh.setStatus('current')
casTimersInSeizeHold = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 2508, 1, 12), Integer32().clone(30)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: casTimersInSeizeHold.setStatus('current')
casTimersOutSeizeHold = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 2508, 1, 13), Integer32().clone(20)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: casTimersOutSeizeHold.setStatus('current')
casTimersOutWaitSeizeAck = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 2508, 1, 14), Integer32().clone(1000)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: casTimersOutWaitSeizeAck.setStatus('current')
casTimersOutWaitConnect = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 2508, 1, 15), Integer32().clone(30000)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: casTimersOutWaitConnect.setStatus('current')
casTimersOutConnectHold = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 2508, 1, 16), Integer32().clone(200)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: casTimersOutConnectHold.setStatus('current')
casTimersLocalRelease = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 2508, 1, 17), Integer32().clone(30000)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: casTimersLocalRelease.setStatus('current')
casTimersLineRelease = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 2508, 1, 18), Integer32().clone(10000)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: casTimersLineRelease.setStatus('current')
casTimersLineReleaseHold = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 2508, 1, 19), Integer32().clone(100)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: casTimersLineReleaseHold.setStatus('current')
casTimersRecover = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 2508, 1, 20), Integer32().clone(100)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: casTimersRecover.setStatus('current')
casTimersWaitR2Digit = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 2508, 1, 21), Integer32().clone(20000)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: casTimersWaitR2Digit.setStatus('current')
casTimersInWaitAccept = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 2508, 1, 22), Integer32().clone(800)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: casTimersInWaitAccept.setStatus('current')
casTimersInWaitAnswer = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 2508, 1, 23), Integer32().clone(30000)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: casTimersInWaitAnswer.setStatus('current')
casTimersOutWaitAnswer = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 2508, 1, 24), Integer32().clone(30000)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: casTimersOutWaitAnswer.setStatus('current')
casTimersInCongestionPulseDuration = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 2508, 1, 25), Integer32().clone(160)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: casTimersInCongestionPulseDuration.setStatus('current')
casTimersInSetupCompleteHold = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 2508, 1, 26), Integer32().clone(75)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: casTimersInSetupCompleteHold.setStatus('current')
casTimersInAnswerToWinkDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 2508, 1, 27), Integer32().clone(1000)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: casTimersInAnswerToWinkDelay.setStatus('current')
casTimersInAfterAnswerWinkPulse = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 2508, 1, 28), Integer32().clone(200)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: casTimersInAfterAnswerWinkPulse.setStatus('current')
casTimersOutLineAbnormalReleaseHold = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 2508, 1, 29), Integer32().clone(1000)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: casTimersOutLineAbnormalReleaseHold.setStatus('current')
casTimersOutLocalReleaseDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 2508, 1, 30), Integer32().clone(700)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: casTimersOutLocalReleaseDelay.setStatus('current')
clockRecoveryTable = MibTable((1, 3, 6, 1, 4, 1, 2637, 2, 1, 2900), )
if mibBuilder.loadTexts: clockRecoveryTable.setStatus('current')
clockRecoveryEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2637, 2, 1, 2900, 1), ).setIndexNames((0, "APTIS-CONFIG-MIB", "clockRecoveryPathString"))
if mibBuilder.loadTexts: clockRecoveryEntry.setStatus('current')
clockRecoveryPathString = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 2900, 1, 1), DisplayString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: clockRecoveryPathString.setStatus('current')
clockRecoveryRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 2900, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: clockRecoveryRowStatus.setStatus('current')
clockRecoveryKeyValue = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 2900, 1, 3), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: clockRecoveryKeyValue.setStatus('current')
clockRecoveryPrimarySlot = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 2900, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 11, 12, 13, 14, 15, 16, 17, 18))).clone(namedValues=NamedValues(("disabled", 0), ("slot1", 1), ("slot2", 2), ("slot3", 3), ("slot4", 4), ("slot5", 5), ("slot6", 6), ("slot7", 7), ("slot8", 8), ("slot11", 11), ("slot12", 12), ("slot13", 13), ("slot14", 14), ("slot15", 15), ("slot16", 16), ("slot17", 17), ("slot18", 18))).clone('disabled')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: clockRecoveryPrimarySlot.setStatus('current')
clockRecoveryPrimaryPort = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 2900, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 97, 98, 99, 255))).clone(namedValues=NamedValues(("ds11", 0), ("ds12", 1), ("ds13", 2), ("ds14", 3), ("ds15", 4), ("ds16", 5), ("ds17", 6), ("ds18", 7), ("ds19", 8), ("ds110", 9), ("ds111", 10), ("ds112", 11), ("ds113", 12), ("ds114", 13), ("ds115", 14), ("ds116", 15), ("ds117", 16), ("ds118", 17), ("ds119", 18), ("ds120", 19), ("ds121", 20), ("ds122", 21), ("ds123", 22), ("ds124", 23), ("ds125", 24), ("ds126", 25), ("ds127", 26), ("ds128", 27), ("ds129", 28), ("ds130", 29), ("ds131", 30), ("ds132", 31), ("ds133", 32), ("ds134", 33), ("ds135", 34), ("ds136", 35), ("ds137", 36), ("ds138", 37), ("ds139", 38), ("ds140", 39), ("ds141", 40), ("ds142", 41), ("ds143", 42), ("ds144", 43), ("ds145", 44), ("ds146", 45), ("ds147", 46), ("ds148", 47), ("ds149", 48), ("ds150", 49), ("ds151", 50), ("ds152", 51), ("ds153", 52), ("ds154", 53), ("ds155", 54), ("ds156", 55), ("external", 97), ("revertive", 98), ("nonRevertive", 99), ("disabled", 255))).clone('disabled')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: clockRecoveryPrimaryPort.setStatus('current')
clockRecoverySecondarySlot = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 2900, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 11, 12, 13, 14, 15, 16, 17, 18))).clone(namedValues=NamedValues(("disabled", 0), ("slot1", 1), ("slot2", 2), ("slot3", 3), ("slot4", 4), ("slot5", 5), ("slot6", 6), ("slot7", 7), ("slot8", 8), ("slot11", 11), ("slot12", 12), ("slot13", 13), ("slot14", 14), ("slot15", 15), ("slot16", 16), ("slot17", 17), ("slot18", 18))).clone('disabled')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: clockRecoverySecondarySlot.setStatus('current')
clockRecoverySecondaryPort = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 2900, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 97, 98, 99, 255))).clone(namedValues=NamedValues(("ds11", 0), ("ds12", 1), ("ds13", 2), ("ds14", 3), ("ds15", 4), ("ds16", 5), ("ds17", 6), ("ds18", 7), ("ds19", 8), ("ds110", 9), ("ds111", 10), ("ds112", 11), ("ds113", 12), ("ds114", 13), ("ds115", 14), ("ds116", 15), ("ds117", 16), ("ds118", 17), ("ds119", 18), ("ds120", 19), ("ds121", 20), ("ds122", 21), ("ds123", 22), ("ds124", 23), ("ds125", 24), ("ds126", 25), ("ds127", 26), ("ds128", 27), ("ds129", 28), ("ds130", 29), ("ds131", 30), ("ds132", 31), ("ds133", 32), ("ds134", 33), ("ds135", 34), ("ds136", 35), ("ds137", 36), ("ds138", 37), ("ds139", 38), ("ds140", 39), ("ds141", 40), ("ds142", 41), ("ds143", 42), ("ds144", 43), ("ds145", 44), ("ds146", 45), ("ds147", 46), ("ds148", 47), ("ds149", 48), ("ds150", 49), ("ds151", 50), ("ds152", 51), ("ds153", 52), ("ds154", 53), ("ds155", 54), ("ds156", 55), ("external", 97), ("revertive", 98), ("nonRevertive", 99), ("disabled", 255))).clone('disabled')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: clockRecoverySecondaryPort.setStatus('current')
clockRecoveryPrimaryT3 = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 2900, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("t31", 0), ("t32", 1))).clone('t31')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: clockRecoveryPrimaryT3.setStatus('current')
clockRecoverySecondaryT3 = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 2900, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("t31", 0), ("t32", 1))).clone('t31')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: clockRecoverySecondaryT3.setStatus('current')
ds0ConfigTable = MibTable((1, 3, 6, 1, 4, 1, 2637, 2, 1, 2111), )
if mibBuilder.loadTexts: ds0ConfigTable.setStatus('current')
ds0ConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2637, 2, 1, 2111, 1), ).setIndexNames((0, "APTIS-CONFIG-MIB", "ds0ConfigPathString"))
if mibBuilder.loadTexts: ds0ConfigEntry.setStatus('current')
ds0ConfigPathString = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 2111, 1, 1), DisplayString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ds0ConfigPathString.setStatus('current')
ds0ConfigRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 2111, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ds0ConfigRowStatus.setStatus('current')
ds0ConfigKeyValue = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 2111, 1, 3), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ds0ConfigKeyValue.setStatus('current')
ds0ConfigAdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 2111, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2), ("pendingDisable", 3))).clone('enabled')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ds0ConfigAdminState.setStatus('current')
e1ConfigTable = MibTable((1, 3, 6, 1, 4, 1, 2637, 2, 1, 2501), )
if mibBuilder.loadTexts: e1ConfigTable.setStatus('current')
e1ConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2637, 2, 1, 2501, 1), ).setIndexNames((0, "APTIS-CONFIG-MIB", "e1ConfigPathString"))
if mibBuilder.loadTexts: e1ConfigEntry.setStatus('current')
e1ConfigPathString = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 2501, 1, 1), DisplayString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: e1ConfigPathString.setStatus('current')
e1ConfigRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 2501, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: e1ConfigRowStatus.setStatus('current')
e1ConfigKeyValue = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 2501, 1, 3), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: e1ConfigKeyValue.setStatus('current')
e1ConfigAdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 2501, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2), ("pendingDisable", 3), ("transmitAis", 4))).clone('enabled')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: e1ConfigAdminState.setStatus('current')
e1ConfigLineFraming = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 2501, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("e1", 1), ("e1Crc", 2), ("e1CrcNoE", 3))).clone('e1Crc')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: e1ConfigLineFraming.setStatus('current')
e1ConfigLineCode = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 2501, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("hdb3", 1), ("ami", 2))).clone('hdb3')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: e1ConfigLineCode.setStatus('current')
e1ConfigLineBuildout = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 2501, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("shortHaul", 1), ("longHaul", 2))).clone('shortHaul')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: e1ConfigLineBuildout.setStatus('current')
e1ConfigSignaling = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 2501, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3, 4))).clone(namedValues=NamedValues(("isdn", 2), ("cas", 3), ("ss7", 4))).clone('isdn')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: e1ConfigSignaling.setStatus('current')
e1ConfigClockingPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 2501, 1, 17), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 9)).clone(1)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: e1ConfigClockingPriority.setStatus('current')
e1ConfigLoopBack = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 2501, 1, 19), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("none", 1), ("line", 2))).clone('none')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: e1ConfigLoopBack.setStatus('current')
e1ConfigDefaultNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 2501, 1, 20), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: e1ConfigDefaultNumber.setStatus('current')
e1ConfigOverrideNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 2501, 1, 21), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: e1ConfigOverrideNumber.setStatus('current')
e1ConfigCircuitID = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 2501, 1, 22), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: e1ConfigCircuitID.setStatus('current')
e1ConfigAlarmCriteria = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 2501, 1, 23), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3))).clone(namedValues=NamedValues(("iTUT", 2), ("iTUTNet", 3))).clone('iTUT')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: e1ConfigAlarmCriteria.setStatus('current')
e1TrunkconfigTable = MibTable((1, 3, 6, 1, 4, 1, 2637, 2, 1, 2505), )
if mibBuilder.loadTexts: e1TrunkconfigTable.setStatus('current')
e1TrunkconfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2637, 2, 1, 2505, 1), ).setIndexNames((0, "APTIS-CONFIG-MIB", "e1TrunkconfigPathString"))
if mibBuilder.loadTexts: e1TrunkconfigEntry.setStatus('current')
e1TrunkconfigPathString = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 2505, 1, 1), DisplayString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: e1TrunkconfigPathString.setStatus('current')
e1TrunkconfigRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 2505, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: e1TrunkconfigRowStatus.setStatus('current')
e1TrunkconfigKeyValue = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 2505, 1, 3), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: e1TrunkconfigKeyValue.setStatus('current')
e1TrunkconfigAdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 2505, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2), ("pendingDisable", 3))).clone('enabled')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: e1TrunkconfigAdminState.setStatus('current')
e1TrunkconfigClockSource = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 2505, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 100, 101))).clone(namedValues=NamedValues(("port1", 1), ("port2", 2), ("port3", 3), ("port4", 4), ("port5", 5), ("port6", 6), ("port7", 7), ("port8", 8), ("local", 100), ("recover", 101))).clone('recover')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: e1TrunkconfigClockSource.setStatus('current')
e1TrunkconfigLineFraming = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 2505, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("e1", 1), ("e1Crc", 2), ("e1CrcNoE", 3))).clone('e1Crc')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: e1TrunkconfigLineFraming.setStatus('current')
e1TrunkconfigLineCode = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 2505, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("hdb3", 1), ("ami", 2))).clone('hdb3')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: e1TrunkconfigLineCode.setStatus('current')
e1TrunkconfigLineBuildout = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 2505, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("shortHaul", 1), ("longHaul", 2))).clone('shortHaul')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: e1TrunkconfigLineBuildout.setStatus('current')
e1liuConfigTable = MibTable((1, 3, 6, 1, 4, 1, 2637, 2, 1, 2510), )
if mibBuilder.loadTexts: e1liuConfigTable.setStatus('current')
e1liuConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2637, 2, 1, 2510, 1), ).setIndexNames((0, "APTIS-CONFIG-MIB", "e1liuConfigPathString"))
if mibBuilder.loadTexts: e1liuConfigEntry.setStatus('current')
e1liuConfigPathString = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 2510, 1, 1), DisplayString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: e1liuConfigPathString.setStatus('current')
e1liuConfigRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 2510, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: e1liuConfigRowStatus.setStatus('current')
e1liuConfigKeyValue = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 2510, 1, 3), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: e1liuConfigKeyValue.setStatus('current')
e1liuConfigAdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 2510, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2), ("pendingDisable", 3))).clone('enabled')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: e1liuConfigAdminState.setStatus('current')
e1liuConfigCircuitID = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 2510, 1, 12), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: e1liuConfigCircuitID.setStatus('current')
hdlcConfigTable = MibTable((1, 3, 6, 1, 4, 1, 2637, 2, 1, 1452), )
if mibBuilder.loadTexts: hdlcConfigTable.setStatus('current')
hdlcConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2637, 2, 1, 1452, 1), ).setIndexNames((0, "APTIS-CONFIG-MIB", "hdlcConfigPathString"))
if mibBuilder.loadTexts: hdlcConfigEntry.setStatus('current')
hdlcConfigPathString = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 1452, 1, 1), DisplayString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hdlcConfigPathString.setStatus('current')
hdlcConfigRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 1452, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hdlcConfigRowStatus.setStatus('current')
hdlcConfigKeyValue = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 1452, 1, 3), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hdlcConfigKeyValue.setStatus('current')
hdlcConfigStrategy = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 1452, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("x64K", 1), ("x56K", 2), ("x64K56K", 3), ("x56K64K", 4))).clone('x64K56K')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hdlcConfigStrategy.setStatus('current')
hdlcConfigConnectTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 1452, 1, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(250, 10000)).clone(500)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hdlcConfigConnectTimeout.setStatus('current')
hSSIConfigTable = MibTable((1, 3, 6, 1, 4, 1, 2637, 2, 1, 3151), )
if mibBuilder.loadTexts: hSSIConfigTable.setStatus('current')
hSSIConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2637, 2, 1, 3151, 1), ).setIndexNames((0, "APTIS-CONFIG-MIB", "hSSIConfigPathString"))
if mibBuilder.loadTexts: hSSIConfigEntry.setStatus('current')
hSSIConfigPathString = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 3151, 1, 1), DisplayString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hSSIConfigPathString.setStatus('current')
hSSIConfigRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 3151, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hSSIConfigRowStatus.setStatus('current')
hSSIConfigKeyValue = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 3151, 1, 3), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hSSIConfigKeyValue.setStatus('current')
hSSIConfigHSSIPhyPort = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 3151, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hSSIConfigHSSIPhyPort.setStatus('current')
hSSIConfigHSSIEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 3151, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disable", 1), ("enable", 2))).clone('disable')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hSSIConfigHSSIEnable.setStatus('current')
hSSIConfigHSSIName = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 3151, 1, 13), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hSSIConfigHSSIName.setStatus('current')
hSSIConfigHSSIDelineation = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 3151, 1, 14), Boolean().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hSSIConfigHSSIDelineation.setStatus('current')
hSSIConfigHSSICRCType = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 3151, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("crcNone", 0), ("crc16", 1), ("crc32", 2))).clone('crc16')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hSSIConfigHSSICRCType.setStatus('current')
hSSIConfigHSSIIdle = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 3151, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("flagBytes", 0), ("hdlcIdle", 1))).clone('flagBytes')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hSSIConfigHSSIIdle.setStatus('current')
hSSIConfigHSSILoopback = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 3151, 1, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disable", 1), ("enable", 2))).clone('disable')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hSSIConfigHSSILoopback.setStatus('current')
hSSIConfigHSSIClock = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 3151, 1, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("internal", 1), ("external", 2))).clone('external')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hSSIConfigHSSIClock.setStatus('current')
hSSIConfigHSSIQueueDepth = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 3151, 1, 19), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1000)).clone(100)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hSSIConfigHSSIQueueDepth.setStatus('current')
cHdlcTable = MibTable((1, 3, 6, 1, 4, 1, 2637, 2, 1, 1210), )
if mibBuilder.loadTexts: cHdlcTable.setStatus('current')
cHdlcEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2637, 2, 1, 1210, 1), ).setIndexNames((0, "APTIS-CONFIG-MIB", "cHdlcPathString"))
if mibBuilder.loadTexts: cHdlcEntry.setStatus('current')
cHdlcPathString = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 1210, 1, 1), DisplayString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cHdlcPathString.setStatus('current')
cHdlcRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 1210, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cHdlcRowStatus.setStatus('current')
cHdlcKeyValue = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 1210, 1, 3), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cHdlcKeyValue.setStatus('current')
cHdlcIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 1210, 1, 11), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cHdlcIpAddr.setStatus('current')
cHdlcIpMask = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 1210, 1, 12), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cHdlcIpMask.setStatus('current')
cHdlcMaxMissedKeepalives = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 1210, 1, 13), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cHdlcMaxMissedKeepalives.setStatus('current')
cHdlcMaxLoopCount = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 1210, 1, 14), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cHdlcMaxLoopCount.setStatus('current')
ipCleartcpTable = MibTable((1, 3, 6, 1, 4, 1, 2637, 2, 1, 1230), )
if mibBuilder.loadTexts: ipCleartcpTable.setStatus('current')
ipCleartcpEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2637, 2, 1, 1230, 1), ).setIndexNames((0, "APTIS-CONFIG-MIB", "ipCleartcpPathString"))
if mibBuilder.loadTexts: ipCleartcpEntry.setStatus('current')
ipCleartcpPathString = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 1230, 1, 1), DisplayString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ipCleartcpPathString.setStatus('current')
ipCleartcpRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 1230, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ipCleartcpRowStatus.setStatus('current')
ipCleartcpKeyValue = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 1230, 1, 3), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ipCleartcpKeyValue.setStatus('current')
ipCleartcpLocalIp = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 1230, 1, 11), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ipCleartcpLocalIp.setStatus('current')
ipCleartcpLocalPort = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 1230, 1, 12), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ipCleartcpLocalPort.setStatus('current')
ipCleartcpLocalPortAllocated = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 1230, 1, 13), Boolean().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ipCleartcpLocalPortAllocated.setStatus('current')
ipCleartcpRemoteHostname = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 1230, 1, 14), DisplayString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ipCleartcpRemoteHostname.setStatus('current')
ipCleartcpRemotePort = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 1230, 1, 15), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ipCleartcpRemotePort.setStatus('current')
ipCleartcpConnectType = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 1230, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("telnet", 1), ("rlogin", 2), ("cleartcp", 3), ("shell", 4))).clone('cleartcp')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ipCleartcpConnectType.setStatus('current')
ipCleartcpTcpConnectTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 1230, 1, 17), Integer32().clone(10)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ipCleartcpTcpConnectTimeout.setStatus('current')
ipCleartcpHostIpCount = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 1230, 1, 20), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 32))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ipCleartcpHostIpCount.setStatus('current')
ipCleartcpHostIpList = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 1230, 1, 21), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ipCleartcpHostIpList.setStatus('current')
ipRtrConfigTable = MibTable((1, 3, 6, 1, 4, 1, 2637, 2, 1, 1006), )
if mibBuilder.loadTexts: ipRtrConfigTable.setStatus('current')
ipRtrConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2637, 2, 1, 1006, 1), ).setIndexNames((0, "APTIS-CONFIG-MIB", "ipRtrConfigPathString"))
if mibBuilder.loadTexts: ipRtrConfigEntry.setStatus('current')
ipRtrConfigPathString = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 1006, 1, 1), DisplayString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ipRtrConfigPathString.setStatus('current')
ipRtrConfigRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 1006, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ipRtrConfigRowStatus.setStatus('current')
ipRtrConfigKeyValue = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 1006, 1, 3), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ipRtrConfigKeyValue.setStatus('current')
ipRtrConfigRoutingEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 1006, 1, 11), Boolean().clone('true')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ipRtrConfigRoutingEnabled.setStatus('current')
ipRtrConfigMulticastEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 1006, 1, 12), Boolean().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ipRtrConfigMulticastEnabled.setStatus('current')
ipRtrConfigDefaultTtl = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 1006, 1, 13), Integer32().clone(255)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ipRtrConfigDefaultTtl.setStatus('current')
ipRtrConfigArpTtl = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 1006, 1, 14), Integer32().clone(14400)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ipRtrConfigArpTtl.setStatus('current')
ipRtrConfigSpoofCheckEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 1006, 1, 15), Boolean().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ipRtrConfigSpoofCheckEnabled.setStatus('current')
ipRtrConfigChecksumEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 1006, 1, 17), Boolean().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ipRtrConfigChecksumEnabled.setStatus('current')
ipRtrConfigSourceRouteEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 1006, 1, 18), Boolean().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ipRtrConfigSourceRouteEnabled.setStatus('current')
ipRtrConfigRouterDiscovery = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 1006, 1, 19), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("disabled", 0), ("onRequest", 1), ("enabled", 2))).clone('enabled')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ipRtrConfigRouterDiscovery.setStatus('current')
ipRtrConfigSnmpSysDesc = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 1006, 1, 110), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 200))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ipRtrConfigSnmpSysDesc.setStatus('current')
ipRtrConfigSnmpContactName = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 1006, 1, 111), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 200))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ipRtrConfigSnmpContactName.setStatus('current')
ipRtrConfigSnmpSysName = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 1006, 1, 112), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 200))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ipRtrConfigSnmpSysName.setStatus('current')
ipRtrConfigSnmpSysLocation = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 1006, 1, 113), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 200))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ipRtrConfigSnmpSysLocation.setStatus('current')
ipRtrConfigSessionUnwindsMax = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 1006, 1, 116), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 100)).clone(5)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ipRtrConfigSessionUnwindsMax.setStatus('current')
ipRtrConfigTrunkUnwindsMax = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 1006, 1, 117), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 100)).clone(5)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ipRtrConfigTrunkUnwindsMax.setStatus('current')
ipRtrConfigRouteCacheEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 1006, 1, 118), Boolean().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ipRtrConfigRouteCacheEnabled.setStatus('current')
ipMulticastConfigTable = MibTable((1, 3, 6, 1, 4, 1, 2637, 2, 1, 1007), )
if mibBuilder.loadTexts: ipMulticastConfigTable.setStatus('current')
ipMulticastConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2637, 2, 1, 1007, 1), ).setIndexNames((0, "APTIS-CONFIG-MIB", "ipMulticastConfigPathString"))
if mibBuilder.loadTexts: ipMulticastConfigEntry.setStatus('current')
ipMulticastConfigPathString = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 1007, 1, 1), DisplayString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ipMulticastConfigPathString.setStatus('current')
ipMulticastConfigRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 1007, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ipMulticastConfigRowStatus.setStatus('current')
ipMulticastConfigKeyValue = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 1007, 1, 3), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ipMulticastConfigKeyValue.setStatus('current')
ipMulticastConfigTrunkRoutingEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 1007, 1, 11), Boolean().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ipMulticastConfigTrunkRoutingEnabled.setStatus('current')
ipMulticastConfigHeartbeatEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 1007, 1, 20), Boolean().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ipMulticastConfigHeartbeatEnabled.setStatus('current')
ipMulticastConfigHeartbeatGroup = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 1007, 1, 21), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ipMulticastConfigHeartbeatGroup.setStatus('current')
ipMulticastConfigHeartbeatPort = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 1007, 1, 22), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ipMulticastConfigHeartbeatPort.setStatus('current')
ipMulticastConfigHeartbeatTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 1007, 1, 23), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ipMulticastConfigHeartbeatTimeout.setStatus('current')
ipMulticastConfigHeartbeatSource = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 1007, 1, 24), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ipMulticastConfigHeartbeatSource.setStatus('current')
ipMulticastConfigHeartbeatSourceMask = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 1007, 1, 25), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ipMulticastConfigHeartbeatSourceMask.setStatus('current')
ipMulticastConfigHeartbeatThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 1007, 1, 26), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 10000))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ipMulticastConfigHeartbeatThreshold.setStatus('current')
ipMulticastConfigHeartbeatPeriod = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 1007, 1, 27), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 10000))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ipMulticastConfigHeartbeatPeriod.setStatus('current')
ipVrouterConfigTable = MibTable((1, 3, 6, 1, 4, 1, 2637, 2, 1, 1016), )
if mibBuilder.loadTexts: ipVrouterConfigTable.setStatus('current')
ipVrouterConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2637, 2, 1, 1016, 1), ).setIndexNames((0, "APTIS-CONFIG-MIB", "ipVrouterConfigPathString"))
if mibBuilder.loadTexts: ipVrouterConfigEntry.setStatus('current')
ipVrouterConfigPathString = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 1016, 1, 1), DisplayString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ipVrouterConfigPathString.setStatus('current')
ipVrouterConfigRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 1016, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ipVrouterConfigRowStatus.setStatus('current')
ipVrouterConfigKeyValue = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 1016, 1, 3), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ipVrouterConfigKeyValue.setStatus('current')
ipVrouterConfigRouterType = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 1016, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0))).clone(namedValues=NamedValues(("local", 0))).clone('local')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ipVrouterConfigRouterType.setStatus('current')
ipVrouterConfigTrunkingType = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 1016, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("shared", 0), ("dedicated", 1))).clone('shared')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ipVrouterConfigTrunkingType.setStatus('current')
ipPolicyEntryTable = MibTable((1, 3, 6, 1, 4, 1, 2637, 2, 1, 1017), )
if mibBuilder.loadTexts: ipPolicyEntryTable.setStatus('current')
ipPolicyEntryEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2637, 2, 1, 1017, 1), ).setIndexNames((0, "APTIS-CONFIG-MIB", "ipPolicyEntryPathString"))
if mibBuilder.loadTexts: ipPolicyEntryEntry.setStatus('current')
ipPolicyEntryPathString = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 1017, 1, 1), DisplayString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ipPolicyEntryPathString.setStatus('current')
ipPolicyEntryRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 1017, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ipPolicyEntryRowStatus.setStatus('current')
ipPolicyEntryKeyValue = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 1017, 1, 3), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ipPolicyEntryKeyValue.setStatus('current')
ipPolicyEntryAccessList = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 1017, 1, 11), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ipPolicyEntryAccessList.setStatus('current')
ipPolicyEntryForceVrouterId = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 1017, 1, 12), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ipPolicyEntryForceVrouterId.setStatus('current')
ipPolicyEntryForceDestinationIp = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 1017, 1, 13), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ipPolicyEntryForceDestinationIp.setStatus('current')
ipRipTrustedTable = MibTable((1, 3, 6, 1, 4, 1, 2637, 2, 1, 1031), )
if mibBuilder.loadTexts: ipRipTrustedTable.setStatus('current')
ipRipTrustedEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2637, 2, 1, 1031, 1), ).setIndexNames((0, "APTIS-CONFIG-MIB", "ipRipTrustedPathString"))
if mibBuilder.loadTexts: ipRipTrustedEntry.setStatus('current')
ipRipTrustedPathString = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 1031, 1, 1), DisplayString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ipRipTrustedPathString.setStatus('current')
ipRipTrustedRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 1031, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ipRipTrustedRowStatus.setStatus('current')
ipRipTrustedKeyValue = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 1031, 1, 3), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ipRipTrustedKeyValue.setStatus('current')
ipRipTrustedTrustedHost = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 1031, 1, 11), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ipRipTrustedTrustedHost.setStatus('current')
ipRipTable = MibTable((1, 3, 6, 1, 4, 1, 2637, 2, 1, 1030), )
if mibBuilder.loadTexts: ipRipTable.setStatus('current')
ipRipEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2637, 2, 1, 1030, 1), ).setIndexNames((0, "APTIS-CONFIG-MIB", "ipRipPathString"))
if mibBuilder.loadTexts: ipRipEntry.setStatus('current')
ipRipPathString = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 1030, 1, 1), DisplayString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ipRipPathString.setStatus('current')
ipRipRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 1030, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ipRipRowStatus.setStatus('current')
ipRipKeyValue = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 1030, 1, 3), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ipRipKeyValue.setStatus('current')
ipRipProtoV1Enabled = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 1030, 1, 11), Boolean().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ipRipProtoV1Enabled.setStatus('current')
ipRipProtoV2Enabled = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 1030, 1, 12), Boolean().clone('true')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ipRipProtoV2Enabled.setStatus('current')
ipRipTriggeredUpdatesEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 1030, 1, 13), Boolean().clone('true')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ipRipTriggeredUpdatesEnabled.setStatus('current')
ipRipAuthType = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 1030, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("none", 0), ("text", 1), ("md5", 2))).clone('none')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ipRipAuthType.setStatus('current')
ipRipAuthKey = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 1030, 1, 15), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ipRipAuthKey.setStatus('current')
ipOspfAreaTable = MibTable((1, 3, 6, 1, 4, 1, 2637, 2, 1, 1041), )
if mibBuilder.loadTexts: ipOspfAreaTable.setStatus('current')
ipOspfAreaEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2637, 2, 1, 1041, 1), ).setIndexNames((0, "APTIS-CONFIG-MIB", "ipOspfAreaPathString"))
if mibBuilder.loadTexts: ipOspfAreaEntry.setStatus('current')
ipOspfAreaPathString = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 1041, 1, 1), DisplayString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ipOspfAreaPathString.setStatus('current')
ipOspfAreaRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 1041, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ipOspfAreaRowStatus.setStatus('current')
ipOspfAreaKeyValue = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 1041, 1, 3), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ipOspfAreaKeyValue.setStatus('current')
ipOspfAreaAreaId = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 1041, 1, 11), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ipOspfAreaAreaId.setStatus('current')
ipOspfAreaStubAreaEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 1041, 1, 12), Boolean().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ipOspfAreaStubAreaEnabled.setStatus('current')
ipOspfAreaNotSoStubbyAreaEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 1041, 1, 13), Boolean().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ipOspfAreaNotSoStubbyAreaEnabled.setStatus('current')
ipOspfAreaStubAreaDefaultCost = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 1041, 1, 14), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ipOspfAreaStubAreaDefaultCost.setStatus('current')
ipOspfAreaStubAreaNoSummaryEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 1041, 1, 15), Boolean().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ipOspfAreaStubAreaNoSummaryEnabled.setStatus('current')
ipOspfVirtualLinkTable = MibTable((1, 3, 6, 1, 4, 1, 2637, 2, 1, 1042), )
if mibBuilder.loadTexts: ipOspfVirtualLinkTable.setStatus('current')
ipOspfVirtualLinkEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2637, 2, 1, 1042, 1), ).setIndexNames((0, "APTIS-CONFIG-MIB", "ipOspfVirtualLinkPathString"))
if mibBuilder.loadTexts: ipOspfVirtualLinkEntry.setStatus('current')
ipOspfVirtualLinkPathString = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 1042, 1, 1), DisplayString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ipOspfVirtualLinkPathString.setStatus('current')
ipOspfVirtualLinkRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 1042, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ipOspfVirtualLinkRowStatus.setStatus('current')
ipOspfVirtualLinkKeyValue = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 1042, 1, 3), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ipOspfVirtualLinkKeyValue.setStatus('current')
ipOspfVirtualLinkAreaId = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 1042, 1, 11), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ipOspfVirtualLinkAreaId.setStatus('current')
ipOspfVirtualLinkRouterId = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 1042, 1, 12), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ipOspfVirtualLinkRouterId.setStatus('current')
ipOspfVirtualLinkIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 1042, 1, 13), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ipOspfVirtualLinkIpAddress.setStatus('current')
ipOspfVirtualLinkNextRouteripAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 1042, 1, 14), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ipOspfVirtualLinkNextRouteripAddress.setStatus('current')
ipOspfVirtualLinkTransitAreaId = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 1042, 1, 15), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ipOspfVirtualLinkTransitAreaId.setStatus('current')
ipOspfVirtualLinkHelloInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 1042, 1, 16), Integer32().clone(10)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ipOspfVirtualLinkHelloInterval.setStatus('current')
ipOspfVirtualLinkDeadInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 1042, 1, 17), Integer32().clone(40)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ipOspfVirtualLinkDeadInterval.setStatus('current')
ipOspfVirtualLinkRetransmitInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 1042, 1, 18), Integer32().clone(5)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ipOspfVirtualLinkRetransmitInterval.setStatus('current')
ipOspfVirtualLinkTransmitDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 1042, 1, 19), Integer32().clone(1)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ipOspfVirtualLinkTransmitDelay.setStatus('current')
ipOspfVirtualLinkAuthType = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 1042, 1, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("none", 1), ("simple", 2), ("md5", 3))).clone('none')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ipOspfVirtualLinkAuthType.setStatus('current')
ipOspfVirtualLinkAuthKey = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 1042, 1, 21), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 8))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ipOspfVirtualLinkAuthKey.setStatus('current')
ipOspfRangeTable = MibTable((1, 3, 6, 1, 4, 1, 2637, 2, 1, 1045), )
if mibBuilder.loadTexts: ipOspfRangeTable.setStatus('current')
ipOspfRangeEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2637, 2, 1, 1045, 1), ).setIndexNames((0, "APTIS-CONFIG-MIB", "ipOspfRangePathString"))
if mibBuilder.loadTexts: ipOspfRangeEntry.setStatus('current')
ipOspfRangePathString = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 1045, 1, 1), DisplayString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ipOspfRangePathString.setStatus('current')
ipOspfRangeRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 1045, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ipOspfRangeRowStatus.setStatus('current')
ipOspfRangeKeyValue = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 1045, 1, 3), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ipOspfRangeKeyValue.setStatus('current')
ipOspfRangeAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 1045, 1, 11), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ipOspfRangeAddress.setStatus('current')
ipOspfRangeMask = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 1045, 1, 12), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ipOspfRangeMask.setStatus('current')
ipOspfRangeAreaId = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 1045, 1, 13), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ipOspfRangeAreaId.setStatus('current')
ipOspfRangeAdvertise = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 1045, 1, 14), Boolean().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ipOspfRangeAdvertise.setStatus('current')
ipOspfRangeType = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 1045, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(3, 7))).clone(namedValues=NamedValues(("type3", 3), ("type7", 7))).clone('type3')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ipOspfRangeType.setStatus('current')
ipOspfTable = MibTable((1, 3, 6, 1, 4, 1, 2637, 2, 1, 1040), )
if mibBuilder.loadTexts: ipOspfTable.setStatus('current')
ipOspfEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2637, 2, 1, 1040, 1), ).setIndexNames((0, "APTIS-CONFIG-MIB", "ipOspfPathString"))
if mibBuilder.loadTexts: ipOspfEntry.setStatus('current')
ipOspfPathString = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 1040, 1, 1), DisplayString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ipOspfPathString.setStatus('current')
ipOspfRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 1040, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ipOspfRowStatus.setStatus('current')
ipOspfKeyValue = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 1040, 1, 3), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ipOspfKeyValue.setStatus('current')
ipOspfRouterId = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 1040, 1, 11), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ipOspfRouterId.setStatus('current')
ipOspfAutoVirtualLinkEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 1040, 1, 12), Boolean().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ipOspfAutoVirtualLinkEnabled.setStatus('current')
ipOspfTosEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 1040, 1, 13), Boolean().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ipOspfTosEnabled.setStatus('current')
ipOspfAsBorderEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 1040, 1, 14), Boolean().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ipOspfAsBorderEnabled.setStatus('current')
ipOspfMaxPaths = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 1040, 1, 15), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 5)).clone(2)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ipOspfMaxPaths.setStatus('current')
ipOspfSpfDelayBeforeRecalc = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 1040, 1, 16), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ipOspfSpfDelayBeforeRecalc.setStatus('current')
ipOspfSpfHoldtimeMinBetweenRecalc = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 1040, 1, 17), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ipOspfSpfHoldtimeMinBetweenRecalc.setStatus('current')
ipOspfGenerateDefaultEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 1040, 1, 18), Boolean().clone('true')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ipOspfGenerateDefaultEnabled.setStatus('current')
ipOspfGenerateDefaultMetric = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 1040, 1, 19), Boolean().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ipOspfGenerateDefaultMetric.setStatus('current')
ipOspfGenerateDefaultMetricType = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 1040, 1, 20), Boolean().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ipOspfGenerateDefaultMetricType.setStatus('current')
ipOspfStrategy = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 1040, 1, 21), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("none", 0), ("loadSharing", 1), ("loadSpreading", 2))).clone('none')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ipOspfStrategy.setStatus('current')
ipVpnGroupDestTable = MibTable((1, 3, 6, 1, 4, 1, 2637, 2, 1, 1060), )
if mibBuilder.loadTexts: ipVpnGroupDestTable.setStatus('current')
ipVpnGroupDestEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2637, 2, 1, 1060, 1), ).setIndexNames((0, "APTIS-CONFIG-MIB", "ipVpnGroupDestPathString"))
if mibBuilder.loadTexts: ipVpnGroupDestEntry.setStatus('current')
ipVpnGroupDestPathString = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 1060, 1, 1), DisplayString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ipVpnGroupDestPathString.setStatus('current')
ipVpnGroupDestRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 1060, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ipVpnGroupDestRowStatus.setStatus('current')
ipVpnGroupDestKeyValue = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 1060, 1, 3), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ipVpnGroupDestKeyValue.setStatus('current')
ipVpnGroupDestVpnId = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 1060, 1, 11), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ipVpnGroupDestVpnId.setStatus('current')
ipVpnGroupDestDlci = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 1060, 1, 12), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ipVpnGroupDestDlci.setStatus('current')
ipVpnGroupDestIpPrefix = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 1060, 1, 13), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ipVpnGroupDestIpPrefix.setStatus('current')
ipVpnGroupDestIpMask = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 1060, 1, 14), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ipVpnGroupDestIpMask.setStatus('current')
ipVpnGroupTable = MibTable((1, 3, 6, 1, 4, 1, 2637, 2, 1, 1061), )
if mibBuilder.loadTexts: ipVpnGroupTable.setStatus('current')
ipVpnGroupEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2637, 2, 1, 1061, 1), ).setIndexNames((0, "APTIS-CONFIG-MIB", "ipVpnGroupPathString"))
if mibBuilder.loadTexts: ipVpnGroupEntry.setStatus('current')
ipVpnGroupPathString = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 1061, 1, 1), DisplayString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ipVpnGroupPathString.setStatus('current')
ipVpnGroupRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 1061, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ipVpnGroupRowStatus.setStatus('current')
ipVpnGroupKeyValue = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 1061, 1, 3), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ipVpnGroupKeyValue.setStatus('current')
ipVpnGroupType = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 1061, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("fr", 1), ("ppp", 2))).clone('fr')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ipVpnGroupType.setStatus('current')
ipVpnGroupVpnId = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 1061, 1, 12), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ipVpnGroupVpnId.setStatus('current')
ipVpnGroupFrDlciMapCount = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 1061, 1, 13), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ipVpnGroupFrDlciMapCount.setStatus('current')
ipVpnGroupFrDlciMap1 = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 1061, 1, 14), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ipVpnGroupFrDlciMap1.setStatus('current')
ipVpnGroupFrDlciMap2 = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 1061, 1, 15), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ipVpnGroupFrDlciMap2.setStatus('current')
ipVpnGroupFrDlciMap3 = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 1061, 1, 16), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ipVpnGroupFrDlciMap3.setStatus('current')
ipVpnGroupFrDlciMap4 = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 1061, 1, 17), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ipVpnGroupFrDlciMap4.setStatus('current')
ipVpnGroupFrDlciMap5 = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 1061, 1, 18), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ipVpnGroupFrDlciMap5.setStatus('current')
ipAccessListTable = MibTable((1, 3, 6, 1, 4, 1, 2637, 2, 1, 1065), )
if mibBuilder.loadTexts: ipAccessListTable.setStatus('current')
ipAccessListEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2637, 2, 1, 1065, 1), ).setIndexNames((0, "APTIS-CONFIG-MIB", "ipAccessListPathString"))
if mibBuilder.loadTexts: ipAccessListEntry.setStatus('current')
ipAccessListPathString = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 1065, 1, 1), DisplayString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ipAccessListPathString.setStatus('current')
ipAccessListRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 1065, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ipAccessListRowStatus.setStatus('current')
ipAccessListKeyValue = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 1065, 1, 3), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ipAccessListKeyValue.setStatus('current')
ipAccessListId = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 1065, 1, 11), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ipAccessListId.setStatus('current')
ipAccessListMode = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 1065, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("permit", 1), ("deny", 2))).clone('permit')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ipAccessListMode.setStatus('current')
ipAccessListProtocol = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 1065, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 6, 17, 89))).clone(namedValues=NamedValues(("any", 0), ("icmp", 1), ("igmp", 2), ("tcp", 6), ("udp", 17), ("ospf", 89))).clone('any')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ipAccessListProtocol.setStatus('current')
ipAccessListSourceIp = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 1065, 1, 20), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ipAccessListSourceIp.setStatus('current')
ipAccessListSourceMask = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 1065, 1, 21), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ipAccessListSourceMask.setStatus('current')
ipAccessListDestinationIp = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 1065, 1, 22), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ipAccessListDestinationIp.setStatus('current')
ipAccessListDestinationMask = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 1065, 1, 23), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ipAccessListDestinationMask.setStatus('current')
ipAccessListCompare = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 1065, 1, 30), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("none", 0), ("eq", 1), ("gt", 2), ("lt", 3))).clone('none')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ipAccessListCompare.setStatus('current')
ipAccessListDestinationPort = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 1065, 1, 31), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ipAccessListDestinationPort.setStatus('current')
ipAccessListIcmpType = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 1065, 1, 32), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ipAccessListIcmpType.setStatus('current')
ipAccessListIcmpCode = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 1065, 1, 33), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ipAccessListIcmpCode.setStatus('current')
ipAccessListIgmpType = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 1065, 1, 34), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ipAccessListIgmpType.setStatus('current')
ipAccessListTcpFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 1065, 1, 35), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("none", 0), ("any", 1), ("established", 2))).clone('none')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ipAccessListTcpFlag.setStatus('current')
ipFilterListTable = MibTable((1, 3, 6, 1, 4, 1, 2637, 2, 1, 1066), )
if mibBuilder.loadTexts: ipFilterListTable.setStatus('current')
ipFilterListEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2637, 2, 1, 1066, 1), ).setIndexNames((0, "APTIS-CONFIG-MIB", "ipFilterListPathString"))
if mibBuilder.loadTexts: ipFilterListEntry.setStatus('current')
ipFilterListPathString = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 1066, 1, 1), DisplayString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ipFilterListPathString.setStatus('current')
ipFilterListRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 1066, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ipFilterListRowStatus.setStatus('current')
ipFilterListKeyValue = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 1066, 1, 3), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ipFilterListKeyValue.setStatus('current')
ipFilterListName = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 1066, 1, 11), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 256))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ipFilterListName.setStatus('current')
ipFilterListInputAccessListId = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 1066, 1, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ipFilterListInputAccessListId.setStatus('current')
ipFilterListOutputAccessListId = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 1066, 1, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ipFilterListOutputAccessListId.setStatus('current')
ipIfnumberTable = MibTable((1, 3, 6, 1, 4, 1, 2637, 2, 1, 1072), )
if mibBuilder.loadTexts: ipIfnumberTable.setStatus('current')
ipIfnumberEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2637, 2, 1, 1072, 1), ).setIndexNames((0, "APTIS-CONFIG-MIB", "ipIfnumberPathString"))
if mibBuilder.loadTexts: ipIfnumberEntry.setStatus('current')
ipIfnumberPathString = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 1072, 1, 1), DisplayString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ipIfnumberPathString.setStatus('current')
ipIfnumberRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 1072, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ipIfnumberRowStatus.setStatus('current')
ipIfnumberKeyValue = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 1072, 1, 3), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ipIfnumberKeyValue.setStatus('current')
ipIfnumberIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 1072, 1, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ipIfnumberIfIndex.setStatus('current')
ipIfnumberClass = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 1072, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("driver", 1), ("protocol", 2), ("filter", 3))).clone('driver')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ipIfnumberClass.setStatus('current')
ipIfnumberSubclass = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 1072, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(100, 101, 103, 104, 200, 201, 203))).clone(namedValues=NamedValues(("ethernet", 100), ("hssi", 101), ("hdlc", 103), ("loopback", 104), ("ppp", 200), ("fr", 201), ("ip", 203))).clone('ethernet')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ipIfnumberSubclass.setStatus('current')
ipIfnumberInstance = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 1072, 1, 15), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ipIfnumberInstance.setStatus('current')
ipCircuitTable = MibTable((1, 3, 6, 1, 4, 1, 2637, 2, 1, 1073), )
if mibBuilder.loadTexts: ipCircuitTable.setStatus('current')
ipCircuitEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2637, 2, 1, 1073, 1), ).setIndexNames((0, "APTIS-CONFIG-MIB", "ipCircuitPathString"))
if mibBuilder.loadTexts: ipCircuitEntry.setStatus('current')
ipCircuitPathString = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 1073, 1, 1), DisplayString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ipCircuitPathString.setStatus('current')
ipCircuitRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 1073, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ipCircuitRowStatus.setStatus('current')
ipCircuitKeyValue = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 1073, 1, 3), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ipCircuitKeyValue.setStatus('current')
ipCircuitType = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 1073, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("static", 1), ("session", 2))).clone('static')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ipCircuitType.setStatus('current')
ipCircuitIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 1073, 1, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ipCircuitIfIndex.setStatus('current')
ipCircuitDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 1073, 1, 16), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 256))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ipCircuitDescription.setStatus('current')
ipCircuitMtu = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 1073, 1, 17), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ipCircuitMtu.setStatus('current')
ipCircuitSpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 1073, 1, 18), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ipCircuitSpeed.setStatus('current')
ipCircuitNumbered = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 1073, 1, 19), Boolean().clone('true')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ipCircuitNumbered.setStatus('current')
ipCircuitIpLocal = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 1073, 1, 20), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ipCircuitIpLocal.setStatus('current')
ipCircuitIpRemote = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 1073, 1, 21), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ipCircuitIpRemote.setStatus('current')
ipCircuitIpMask = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 1073, 1, 22), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ipCircuitIpMask.setStatus('current')
ipCircuitArpResponseEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 1073, 1, 23), Boolean().clone('true')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ipCircuitArpResponseEnabled.setStatus('current')
ipCircuitArpProxyEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 1073, 1, 24), Boolean().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ipCircuitArpProxyEnabled.setStatus('current')
ipCircuitAdvertiseRoute = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 1073, 1, 25), Boolean().clone('true')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ipCircuitAdvertiseRoute.setStatus('current')
ipCircuitOutputQueueMaxDepth = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 1073, 1, 26), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ipCircuitOutputQueueMaxDepth.setStatus('current')
ipCircuitOutputEnqueueStyle = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 1073, 1, 27), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("tailDrop", 1), ("rED", 2))).clone('tailDrop')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ipCircuitOutputEnqueueStyle.setStatus('current')
ipCircuitOutputDequeueStyle = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 1073, 1, 28), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("single", 1), ("strict", 2), ("fSQ", 3))).clone('single')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ipCircuitOutputDequeueStyle.setStatus('current')
ipCircuitRipV1Enabled = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 1073, 1, 30), Boolean().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ipCircuitRipV1Enabled.setStatus('current')
ipCircuitRipV2Enabled = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 1073, 1, 31), Boolean().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ipCircuitRipV2Enabled.setStatus('current')
ipCircuitRipSendEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 1073, 1, 32), Boolean().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ipCircuitRipSendEnabled.setStatus('current')
ipCircuitRipRecvEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 1073, 1, 33), Boolean().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ipCircuitRipRecvEnabled.setStatus('current')
ipCircuitRipPoisonReverseEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 1073, 1, 34), Boolean().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ipCircuitRipPoisonReverseEnabled.setStatus('current')
ipCircuitRipInflateMetric = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 1073, 1, 35), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ipCircuitRipInflateMetric.setStatus('current')
ipCircuitRipSendAccessListId = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 1073, 1, 36), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ipCircuitRipSendAccessListId.setStatus('current')
ipCircuitOspfEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 1073, 1, 40), Boolean().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ipCircuitOspfEnabled.setStatus('current')
ipCircuitOspfAreaId = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 1073, 1, 41), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ipCircuitOspfAreaId.setStatus('current')
ipCircuitOspfCost = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 1073, 1, 42), Integer32().clone(10)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ipCircuitOspfCost.setStatus('current')
ipCircuitOspfPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 1073, 1, 43), Integer32().clone(1)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ipCircuitOspfPriority.setStatus('current')
ipCircuitOspfHelloInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 1073, 1, 44), Integer32().clone(10)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ipCircuitOspfHelloInterval.setStatus('current')
ipCircuitOspfDeadInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 1073, 1, 45), Integer32().clone(40)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ipCircuitOspfDeadInterval.setStatus('current')
ipCircuitOspfRetransmitInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 1073, 1, 46), Integer32().clone(5)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ipCircuitOspfRetransmitInterval.setStatus('current')
ipCircuitOspfTransmitDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 1073, 1, 47), Integer32().clone(1)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ipCircuitOspfTransmitDelay.setStatus('current')
ipCircuitOspfPollInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 1073, 1, 48), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ipCircuitOspfPollInterval.setStatus('current')
ipCircuitOspfAuthType = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 1073, 1, 49), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("none", 1), ("simple", 2), ("md5", 3))).clone('none')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ipCircuitOspfAuthType.setStatus('current')
ipCircuitOspfAuthKey = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 1073, 1, 50), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ipCircuitOspfAuthKey.setStatus('current')
ipCircuitMulticastEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 1073, 1, 60), Boolean().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ipCircuitMulticastEnabled.setStatus('current')
ipCircuitMulticastProtocol = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 1073, 1, 61), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("none", 0), ("host", 1), ("dvmrp", 2))).clone('none')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ipCircuitMulticastProtocol.setStatus('current')
ipCircuitInverseArpEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 1073, 1, 62), Boolean().clone('true')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ipCircuitInverseArpEnabled.setStatus('current')
ipCircuitGratuitousArpEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 1073, 1, 63), Boolean().clone('true')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ipCircuitGratuitousArpEnabled.setStatus('current')
ipRouteTable = MibTable((1, 3, 6, 1, 4, 1, 2637, 2, 1, 1074), )
if mibBuilder.loadTexts: ipRouteTable.setStatus('current')
ipRouteEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2637, 2, 1, 1074, 1), ).setIndexNames((0, "APTIS-CONFIG-MIB", "ipRoutePathString"))
if mibBuilder.loadTexts: ipRouteEntry.setStatus('current')
ipRoutePathString = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 1074, 1, 1), DisplayString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ipRoutePathString.setStatus('current')
ipRouteRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 1074, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ipRouteRowStatus.setStatus('current')
ipRouteKeyValue = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 1074, 1, 3), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ipRouteKeyValue.setStatus('current')
ipRoutePrefix = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 1074, 1, 11), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ipRoutePrefix.setStatus('current')
ipRouteMask = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 1074, 1, 12), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ipRouteMask.setStatus('current')
ipRouteLocalGateway = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 1074, 1, 13), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ipRouteLocalGateway.setStatus('current')
ipRouteLocalIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 1074, 1, 14), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ipRouteLocalIfIndex.setStatus('current')
ipRouteDefaultFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 1074, 1, 15), Boolean().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ipRouteDefaultFlag.setStatus('current')
ipRoutePrivateFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 1074, 1, 16), Boolean().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ipRoutePrivateFlag.setStatus('current')
ipRouteRipCost = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 1074, 1, 17), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 16)).clone(1)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ipRouteRipCost.setStatus('current')
ipRoutePreference = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 1074, 1, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("low", 1), ("high", 2))).clone('low')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ipRoutePreference.setStatus('current')
ipRouteStrategy = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 1074, 1, 19), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("none", 0), ("loadSharing", 1), ("loadSpreading", 2))).clone('none')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ipRouteStrategy.setStatus('current')
ipArpTable = MibTable((1, 3, 6, 1, 4, 1, 2637, 2, 1, 1075), )
if mibBuilder.loadTexts: ipArpTable.setStatus('current')
ipArpEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2637, 2, 1, 1075, 1), ).setIndexNames((0, "APTIS-CONFIG-MIB", "ipArpPathString"))
if mibBuilder.loadTexts: ipArpEntry.setStatus('current')
ipArpPathString = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 1075, 1, 1), DisplayString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ipArpPathString.setStatus('current')
ipArpRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 1075, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ipArpRowStatus.setStatus('current')
ipArpKeyValue = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 1075, 1, 3), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ipArpKeyValue.setStatus('current')
ipArpIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 1075, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ipArpIfIndex.setStatus('current')
ipArpIpDestination = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 1075, 1, 12), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ipArpIpDestination.setStatus('current')
ipArpPhysDest = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 1075, 1, 13), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ipArpPhysDest.setStatus('current')
ipArpPublishFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 1075, 1, 14), Boolean().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ipArpPublishFlag.setStatus('current')
ipAccessGroupTable = MibTable((1, 3, 6, 1, 4, 1, 2637, 2, 1, 1078), )
if mibBuilder.loadTexts: ipAccessGroupTable.setStatus('current')
ipAccessGroupEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2637, 2, 1, 1078, 1), ).setIndexNames((0, "APTIS-CONFIG-MIB", "ipAccessGroupPathString"))
if mibBuilder.loadTexts: ipAccessGroupEntry.setStatus('current')
ipAccessGroupPathString = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 1078, 1, 1), DisplayString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ipAccessGroupPathString.setStatus('current')
ipAccessGroupRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 1078, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ipAccessGroupRowStatus.setStatus('current')
ipAccessGroupKeyValue = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 1078, 1, 3), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ipAccessGroupKeyValue.setStatus('current')
ipAccessGroupIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 1078, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ipAccessGroupIfIndex.setStatus('current')
ipAccessGroupAccessListId = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 1078, 1, 12), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ipAccessGroupAccessListId.setStatus('current')
ipAccessGroupDirection = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 1078, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("in", 1), ("out", 2))).clone('in')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ipAccessGroupDirection.setStatus('current')
ipOspfNbNeighborTable = MibTable((1, 3, 6, 1, 4, 1, 2637, 2, 1, 1076), )
if mibBuilder.loadTexts: ipOspfNbNeighborTable.setStatus('current')
ipOspfNbNeighborEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2637, 2, 1, 1076, 1), ).setIndexNames((0, "APTIS-CONFIG-MIB", "ipOspfNbNeighborPathString"))
if mibBuilder.loadTexts: ipOspfNbNeighborEntry.setStatus('current')
ipOspfNbNeighborPathString = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 1076, 1, 1), DisplayString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ipOspfNbNeighborPathString.setStatus('current')
ipOspfNbNeighborRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 1076, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ipOspfNbNeighborRowStatus.setStatus('current')
ipOspfNbNeighborKeyValue = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 1076, 1, 3), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ipOspfNbNeighborKeyValue.setStatus('current')
ipOspfNbNeighborIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 1076, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ipOspfNbNeighborIfIndex.setStatus('current')
ipOspfNbNeighborIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 1076, 1, 12), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ipOspfNbNeighborIpAddress.setStatus('current')
ipOspfNbNeighborDrEligibleEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 1076, 1, 13), Boolean().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ipOspfNbNeighborDrEligibleEnabled.setStatus('current')
ipOspfMd5KeyTable = MibTable((1, 3, 6, 1, 4, 1, 2637, 2, 1, 1044), )
if mibBuilder.loadTexts: ipOspfMd5KeyTable.setStatus('current')
ipOspfMd5KeyEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2637, 2, 1, 1044, 1), ).setIndexNames((0, "APTIS-CONFIG-MIB", "ipOspfMd5KeyPathString"))
if mibBuilder.loadTexts: ipOspfMd5KeyEntry.setStatus('current')
ipOspfMd5KeyPathString = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 1044, 1, 1), DisplayString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ipOspfMd5KeyPathString.setStatus('current')
ipOspfMd5KeyRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 1044, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ipOspfMd5KeyRowStatus.setStatus('current')
ipOspfMd5KeyKeyValue = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 1044, 1, 3), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ipOspfMd5KeyKeyValue.setStatus('current')
ipOspfMd5KeyIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 1044, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ipOspfMd5KeyIfIndex.setStatus('current')
ipOspfMd5KeyAreaId = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 1044, 1, 12), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ipOspfMd5KeyAreaId.setStatus('current')
ipOspfMd5KeyMd5KeyId = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 1044, 1, 13), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ipOspfMd5KeyMd5KeyId.setStatus('current')
ipOspfMd5KeyMd5Key = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 1044, 1, 14), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 34))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ipOspfMd5KeyMd5Key.setStatus('current')
ipFrMapTable = MibTable((1, 3, 6, 1, 4, 1, 2637, 2, 1, 1077), )
if mibBuilder.loadTexts: ipFrMapTable.setStatus('current')
ipFrMapEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2637, 2, 1, 1077, 1), ).setIndexNames((0, "APTIS-CONFIG-MIB", "ipFrMapPathString"))
if mibBuilder.loadTexts: ipFrMapEntry.setStatus('current')
ipFrMapPathString = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 1077, 1, 1), DisplayString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ipFrMapPathString.setStatus('current')
ipFrMapRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 1077, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ipFrMapRowStatus.setStatus('current')
ipFrMapKeyValue = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 1077, 1, 3), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ipFrMapKeyValue.setStatus('current')
ipFrMapIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 1077, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ipFrMapIfIndex.setStatus('current')
ipFrMapIpDestination = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 1077, 1, 12), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ipFrMapIpDestination.setStatus('current')
ipFrMapDlci = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 1077, 1, 13), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ipFrMapDlci.setStatus('current')
ipFrMapInterfaceFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 1077, 1, 14), Boolean().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ipFrMapInterfaceFlag.setStatus('current')
ipFrMapBroadcastFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 1077, 1, 15), Boolean().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ipFrMapBroadcastFlag.setStatus('current')
ipFrMapMulticastFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 1077, 1, 16), Boolean().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ipFrMapMulticastFlag.setStatus('current')
ipServicesConfigTable = MibTable((1, 3, 6, 1, 4, 1, 2637, 2, 1, 1002), )
if mibBuilder.loadTexts: ipServicesConfigTable.setStatus('current')
ipServicesConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2637, 2, 1, 1002, 1), ).setIndexNames((0, "APTIS-CONFIG-MIB", "ipServicesConfigPathString"))
if mibBuilder.loadTexts: ipServicesConfigEntry.setStatus('current')
ipServicesConfigPathString = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 1002, 1, 1), DisplayString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ipServicesConfigPathString.setStatus('current')
ipServicesConfigRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 1002, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ipServicesConfigRowStatus.setStatus('current')
ipServicesConfigKeyValue = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 1002, 1, 3), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ipServicesConfigKeyValue.setStatus('current')
ipServicesConfigMgmtAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 1002, 1, 11), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ipServicesConfigMgmtAddr.setStatus('current')
ipServicesConfigAccessListId = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 1002, 1, 12), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ipServicesConfigAccessListId.setStatus('current')
ipServicesConfigAuthMethod = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 1002, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("remoteOnly", 1), ("localOnly", 2), ("remoteFirst", 3), ("localFirst", 4), ("none", 5))).clone('localOnly')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ipServicesConfigAuthMethod.setStatus('current')
ipServicesConfigDefaultLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 1002, 1, 14), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 3))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ipServicesConfigDefaultLevel.setStatus('current')
ipServicesConfigDefaultModifyUserEntries = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 1002, 1, 15), Boolean().clone('true')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ipServicesConfigDefaultModifyUserEntries.setStatus('current')
ipServicesConfigDefaultModifyConfig = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 1002, 1, 16), Boolean().clone('true')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ipServicesConfigDefaultModifyConfig.setStatus('current')
ipServicesConfigDefaultAllowFTP = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 1002, 1, 17), Boolean().clone('true')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ipServicesConfigDefaultAllowFTP.setStatus('current')
ipServicesConfigDefaultAllowTelnet = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 1002, 1, 18), Boolean().clone('true')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ipServicesConfigDefaultAllowTelnet.setStatus('current')
ipServicesConfigDefaultLevel0DisconnectUsers = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 1002, 1, 19), Boolean().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ipServicesConfigDefaultLevel0DisconnectUsers.setStatus('current')
ipServicesConfigUseIPSvcDefaults = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 1002, 1, 20), Boolean().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ipServicesConfigUseIPSvcDefaults.setStatus('current')
ipServicesConfigModifyPasswords = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 1002, 1, 21), Boolean().clone('true')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ipServicesConfigModifyPasswords.setStatus('current')
ipServicesConfigDefaultAllowRLogin = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 1002, 1, 22), Boolean().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ipServicesConfigDefaultAllowRLogin.setStatus('current')
ipServicesConfigDefaultAllowRSh = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 1002, 1, 23), Boolean().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ipServicesConfigDefaultAllowRSh.setStatus('current')
ipSvcEntryTable = MibTable((1, 3, 6, 1, 4, 1, 2637, 2, 1, 1101), )
if mibBuilder.loadTexts: ipSvcEntryTable.setStatus('current')
ipSvcEntryEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2637, 2, 1, 1101, 1), ).setIndexNames((0, "APTIS-CONFIG-MIB", "ipSvcEntryPathString"))
if mibBuilder.loadTexts: ipSvcEntryEntry.setStatus('current')
ipSvcEntryPathString = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 1101, 1, 1), DisplayString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ipSvcEntryPathString.setStatus('current')
ipSvcEntryRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 1101, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ipSvcEntryRowStatus.setStatus('current')
ipSvcEntryKeyValue = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 1101, 1, 3), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ipSvcEntryKeyValue.setStatus('current')
ipSvcEntryService = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 1101, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23))).clone(namedValues=NamedValues(("dnsClient", 1), ("aaaClient", 2), ("syslogClient", 3), ("bootpClient", 4), ("tftpServer", 10), ("ftpServer", 11), ("telnetServer", 12), ("httpServer", 13), ("snmpServer", 14), ("shellServer", 15), ("trapServer", 16), ("dsmccServer", 17), ("sntpClient", 18), ("sgcpServer", 19), ("rloginServer", 20), ("rshServer", 21), ("ipdcServer", 22), ("ssServer", 23))).clone('dnsClient')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ipSvcEntryService.setStatus('current')
ipSvcEntryAdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 1101, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('enabled')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ipSvcEntryAdminStatus.setStatus('current')
ipSvcEntryRestricted = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 1101, 1, 13), Boolean().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ipSvcEntryRestricted.setStatus('current')
ipSvcAuthEntryTable = MibTable((1, 3, 6, 1, 4, 1, 2637, 2, 1, 1111), )
if mibBuilder.loadTexts: ipSvcAuthEntryTable.setStatus('current')
ipSvcAuthEntryEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2637, 2, 1, 1111, 1), ).setIndexNames((0, "APTIS-CONFIG-MIB", "ipSvcAuthEntryPathString"))
if mibBuilder.loadTexts: ipSvcAuthEntryEntry.setStatus('current')
ipSvcAuthEntryPathString = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 1111, 1, 1), DisplayString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ipSvcAuthEntryPathString.setStatus('current')
ipSvcAuthEntryRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 1111, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ipSvcAuthEntryRowStatus.setStatus('current')
ipSvcAuthEntryKeyValue = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 1111, 1, 3), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ipSvcAuthEntryKeyValue.setStatus('current')
ipSvcAuthEntryUsername = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 1111, 1, 11), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ipSvcAuthEntryUsername.setStatus('current')
ipSvcAuthEntryPassword = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 1111, 1, 12), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ipSvcAuthEntryPassword.setStatus('current')
ipSvcAuthEntryLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 1111, 1, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 3))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ipSvcAuthEntryLevel.setStatus('current')
ipSvcAuthEntryModifyUserEntries = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 1111, 1, 15), Boolean().clone('true')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ipSvcAuthEntryModifyUserEntries.setStatus('current')
ipSvcAuthEntryModifyConfig = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 1111, 1, 16), Boolean().clone('true')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ipSvcAuthEntryModifyConfig.setStatus('current')
ipSvcAuthEntryAllowFTP = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 1111, 1, 17), Boolean().clone('true')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ipSvcAuthEntryAllowFTP.setStatus('current')
ipSvcAuthEntryAllowTelnet = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 1111, 1, 18), Boolean().clone('true')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ipSvcAuthEntryAllowTelnet.setStatus('current')
ipSvcAuthEntryLevel0DisconnectUsers = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 1111, 1, 19), Boolean().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ipSvcAuthEntryLevel0DisconnectUsers.setStatus('current')
ipSvcAuthEntryModifyPasswords = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 1111, 1, 20), Boolean().clone('true')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ipSvcAuthEntryModifyPasswords.setStatus('current')
ipSvcAuthEntryAllowRLogin = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 1111, 1, 21), Boolean().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ipSvcAuthEntryAllowRLogin.setStatus('current')
ipSvcAuthEntryAllowRSh = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 1111, 1, 22), Boolean().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ipSvcAuthEntryAllowRSh.setStatus('current')
ipAaaGroupConfigTable = MibTable((1, 3, 6, 1, 4, 1, 2637, 2, 1, 1125), )
if mibBuilder.loadTexts: ipAaaGroupConfigTable.setStatus('current')
ipAaaGroupConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2637, 2, 1, 1125, 1), ).setIndexNames((0, "APTIS-CONFIG-MIB", "ipAaaGroupConfigPathString"))
if mibBuilder.loadTexts: ipAaaGroupConfigEntry.setStatus('current')
ipAaaGroupConfigPathString = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 1125, 1, 1), DisplayString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ipAaaGroupConfigPathString.setStatus('current')
ipAaaGroupConfigRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 1125, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ipAaaGroupConfigRowStatus.setStatus('current')
ipAaaGroupConfigKeyValue = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 1125, 1, 3), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ipAaaGroupConfigKeyValue.setStatus('current')
ipAaaGroupConfigName = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 1125, 1, 11), DisplayString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ipAaaGroupConfigName.setStatus('current')
ipAaaGroupConfigParallelServers = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 1125, 1, 12), Boolean().clone('true')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ipAaaGroupConfigParallelServers.setStatus('current')
ipAaaSetConfigTable = MibTable((1, 3, 6, 1, 4, 1, 2637, 2, 1, 1126), )
if mibBuilder.loadTexts: ipAaaSetConfigTable.setStatus('current')
ipAaaSetConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2637, 2, 1, 1126, 1), ).setIndexNames((0, "APTIS-CONFIG-MIB", "ipAaaSetConfigPathString"))
if mibBuilder.loadTexts: ipAaaSetConfigEntry.setStatus('current')
ipAaaSetConfigPathString = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 1126, 1, 1), DisplayString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ipAaaSetConfigPathString.setStatus('current')
ipAaaSetConfigRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 1126, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ipAaaSetConfigRowStatus.setStatus('current')
ipAaaSetConfigKeyValue = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 1126, 1, 3), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ipAaaSetConfigKeyValue.setStatus('current')
ipAaaSetConfigName = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 1126, 1, 11), DisplayString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ipAaaSetConfigName.setStatus('current')
ipAaaSetConfigMode = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 1126, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("failover", 1), ("monitor", 2), ("roundRobin", 3))).clone('failover')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ipAaaSetConfigMode.setStatus('current')
ipAaaSetConfigFakeResponse = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 1126, 1, 13), Boolean().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ipAaaSetConfigFakeResponse.setStatus('current')
ipAaaServerTable = MibTable((1, 3, 6, 1, 4, 1, 2637, 2, 1, 1115), )
if mibBuilder.loadTexts: ipAaaServerTable.setStatus('current')
ipAaaServerEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2637, 2, 1, 1115, 1), ).setIndexNames((0, "APTIS-CONFIG-MIB", "ipAaaServerPathString"))
if mibBuilder.loadTexts: ipAaaServerEntry.setStatus('current')
ipAaaServerPathString = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 1115, 1, 1), DisplayString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ipAaaServerPathString.setStatus('current')
ipAaaServerRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 1115, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ipAaaServerRowStatus.setStatus('current')
ipAaaServerKeyValue = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 1115, 1, 3), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ipAaaServerKeyValue.setStatus('current')
ipAaaServerIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 1115, 1, 11), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ipAaaServerIndex.setStatus('current')
ipAaaServerType = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 1115, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("radius", 1))).clone('radius')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ipAaaServerType.setStatus('current')
ipAaaServerIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 1115, 1, 13), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ipAaaServerIpAddr.setStatus('current')
ipAaaServerIpPort = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 1115, 1, 14), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ipAaaServerIpPort.setStatus('current')
ipAaaServerTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 1115, 1, 15), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 60)).clone(3)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ipAaaServerTimeout.setStatus('current')
ipAaaServerRetries = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 1115, 1, 16), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1000)).clone(3)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ipAaaServerRetries.setStatus('current')
ipAaaServerKey = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 1115, 1, 17), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ipAaaServerKey.setStatus('current')
ipAaaServerTrace = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 1115, 1, 18), Boolean().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ipAaaServerTrace.setStatus('current')
ipAaaServerMonitorTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 1115, 1, 21), Integer32().subtype(subtypeSpec=ValueRangeConstraint(10, 3600)).clone(30)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ipAaaServerMonitorTimeout.setStatus('current')
ipAaaServerMonitorType = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 1115, 1, 22), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("accessRequest", 1), ("statusServer", 2), ("acctStop", 3))).clone('accessRequest')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ipAaaServerMonitorType.setStatus('current')
ipAaaServerMonitorUsername = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 1115, 1, 23), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 31))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ipAaaServerMonitorUsername.setStatus('current')
ipAaaServerMonitorPassword = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 1115, 1, 24), DisplayString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ipAaaServerMonitorPassword.setStatus('current')
ipAaaClientPortTable = MibTable((1, 3, 6, 1, 4, 1, 2637, 2, 1, 1116), )
if mibBuilder.loadTexts: ipAaaClientPortTable.setStatus('current')
ipAaaClientPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2637, 2, 1, 1116, 1), ).setIndexNames((0, "APTIS-CONFIG-MIB", "ipAaaClientPortPathString"))
if mibBuilder.loadTexts: ipAaaClientPortEntry.setStatus('current')
ipAaaClientPortPathString = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 1116, 1, 1), DisplayString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ipAaaClientPortPathString.setStatus('current')
ipAaaClientPortRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 1116, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ipAaaClientPortRowStatus.setStatus('current')
ipAaaClientPortKeyValue = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 1116, 1, 3), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ipAaaClientPortKeyValue.setStatus('current')
ipAaaClientPortStartingPort = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 1116, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535)).clone(2048)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ipAaaClientPortStartingPort.setStatus('current')
ipAaaClientPortPortCount = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 1116, 1, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 10)).clone(1)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ipAaaClientPortPortCount.setStatus('current')
ipAaaRadiusConfigTable = MibTable((1, 3, 6, 1, 4, 1, 2637, 2, 1, 1119), )
if mibBuilder.loadTexts: ipAaaRadiusConfigTable.setStatus('current')
ipAaaRadiusConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2637, 2, 1, 1119, 1), ).setIndexNames((0, "APTIS-CONFIG-MIB", "ipAaaRadiusConfigPathString"))
if mibBuilder.loadTexts: ipAaaRadiusConfigEntry.setStatus('current')
ipAaaRadiusConfigPathString = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 1119, 1, 1), DisplayString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ipAaaRadiusConfigPathString.setStatus('current')
ipAaaRadiusConfigRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 1119, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ipAaaRadiusConfigRowStatus.setStatus('current')
ipAaaRadiusConfigKeyValue = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 1119, 1, 3), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ipAaaRadiusConfigKeyValue.setStatus('current')
ipAaaRadiusConfigNasId = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 1119, 1, 11), DisplayString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ipAaaRadiusConfigNasId.setStatus('current')
ipAaaRadiusConfigNasPortStyle = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 1119, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("x16Bit", 1), ("x32Bit", 2))).clone('x16Bit')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ipAaaRadiusConfigNasPortStyle.setStatus('current')
ipAaaRadiusConfigSessionIdStyle = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 1119, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("binary", 0), ("hex", 1), ("dec", 2))).clone('binary')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ipAaaRadiusConfigSessionIdStyle.setStatus('current')
ipAaaRadiusConfigSessionIdSize = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 1119, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("x32Bit", 1), ("x64Bit", 2))).clone('x64Bit')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ipAaaRadiusConfigSessionIdSize.setStatus('current')
ipAaaRadiusConfigVendorSpecId = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 1119, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('enable')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ipAaaRadiusConfigVendorSpecId.setStatus('current')
ipAaaRadiusConfigVendorSpecMultilink = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 1119, 1, 16), Boolean().clone('true')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ipAaaRadiusConfigVendorSpecMultilink.setStatus('current')
ipAaaRadiusConfigAdditionalAuthEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 1119, 1, 17), Boolean().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ipAaaRadiusConfigAdditionalAuthEnabled.setStatus('current')
ipAaaRadiusConfigModemAcctEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 1119, 1, 18), Boolean().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ipAaaRadiusConfigModemAcctEnabled.setStatus('current')
ipAaaRadiusConfigTerminateComponentEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 1119, 1, 19), Boolean().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ipAaaRadiusConfigTerminateComponentEnabled.setStatus('current')
ipAaaRadiusConfigTier1Enable = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 1119, 1, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('disable')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ipAaaRadiusConfigTier1Enable.setStatus('current')
ipDnsTable = MibTable((1, 3, 6, 1, 4, 1, 2637, 2, 1, 1120), )
if mibBuilder.loadTexts: ipDnsTable.setStatus('current')
ipDnsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2637, 2, 1, 1120, 1), ).setIndexNames((0, "APTIS-CONFIG-MIB", "ipDnsPathString"))
if mibBuilder.loadTexts: ipDnsEntry.setStatus('current')
ipDnsPathString = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 1120, 1, 1), DisplayString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ipDnsPathString.setStatus('current')
ipDnsRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 1120, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ipDnsRowStatus.setStatus('current')
ipDnsKeyValue = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 1120, 1, 3), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ipDnsKeyValue.setStatus('current')
ipDnsDefDomain = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 1120, 1, 11), DisplayString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ipDnsDefDomain.setStatus('current')
ipDnsTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 1120, 1, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(2, 60)).clone(3)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ipDnsTimeout.setStatus('current')
ipDnsRetry = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 1120, 1, 13), Integer32().clone(3)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ipDnsRetry.setStatus('current')
ipDnsNsTable = MibTable((1, 3, 6, 1, 4, 1, 2637, 2, 1, 1121), )
if mibBuilder.loadTexts: ipDnsNsTable.setStatus('current')
ipDnsNsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2637, 2, 1, 1121, 1), ).setIndexNames((0, "APTIS-CONFIG-MIB", "ipDnsNsPathString"))
if mibBuilder.loadTexts: ipDnsNsEntry.setStatus('current')
ipDnsNsPathString = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 1121, 1, 1), DisplayString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ipDnsNsPathString.setStatus('current')
ipDnsNsRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 1121, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ipDnsNsRowStatus.setStatus('current')
ipDnsNsKeyValue = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 1121, 1, 3), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ipDnsNsKeyValue.setStatus('current')
ipDnsNsIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 1121, 1, 11), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ipDnsNsIpAddr.setStatus('current')
ipSyslogTable = MibTable((1, 3, 6, 1, 4, 1, 2637, 2, 1, 1130), )
if mibBuilder.loadTexts: ipSyslogTable.setStatus('current')
ipSyslogEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2637, 2, 1, 1130, 1), ).setIndexNames((0, "APTIS-CONFIG-MIB", "ipSyslogPathString"))
if mibBuilder.loadTexts: ipSyslogEntry.setStatus('current')
ipSyslogPathString = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 1130, 1, 1), DisplayString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ipSyslogPathString.setStatus('current')
ipSyslogRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 1130, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ipSyslogRowStatus.setStatus('current')
ipSyslogKeyValue = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 1130, 1, 3), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ipSyslogKeyValue.setStatus('current')
ipSyslogDebugFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 1130, 1, 11), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ipSyslogDebugFlag.setStatus('current')
ipSyslogIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 1130, 1, 12), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ipSyslogIpAddr.setStatus('current')
ipSyslogIpPort = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 1130, 1, 13), Integer32().clone(514)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ipSyslogIpPort.setStatus('current')
ipSyslogPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 1130, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9))).clone(namedValues=NamedValues(("map", 0), ("emerg", 1), ("alert", 2), ("crit", 3), ("err", 4), ("warning", 5), ("notice", 6), ("info", 7), ("debug", 8), ("disabled", 9))).clone('map')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ipSyslogPriority.setStatus('current')
ipSyslogFacility = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 1130, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(16, 17, 18, 19, 20, 21, 22, 23))).clone(namedValues=NamedValues(("local0", 16), ("local1", 17), ("local2", 18), ("local3", 19), ("local4", 20), ("local5", 21), ("local6", 22), ("local7", 23))).clone('local0')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ipSyslogFacility.setStatus('current')
ipSyslogFilterLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 1130, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("disabled", 0), ("emerg", 1), ("alert", 2), ("crit", 3), ("err", 4), ("warning", 5), ("notice", 6), ("info", 7), ("debug", 8))).clone('notice')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ipSyslogFilterLevel.setStatus('current')
ipSntpTable = MibTable((1, 3, 6, 1, 4, 1, 2637, 2, 1, 1193), )
if mibBuilder.loadTexts: ipSntpTable.setStatus('current')
ipSntpEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2637, 2, 1, 1193, 1), ).setIndexNames((0, "APTIS-CONFIG-MIB", "ipSntpPathString"))
if mibBuilder.loadTexts: ipSntpEntry.setStatus('current')
ipSntpPathString = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 1193, 1, 1), DisplayString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ipSntpPathString.setStatus('current')
ipSntpRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 1193, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ipSntpRowStatus.setStatus('current')
ipSntpKeyValue = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 1193, 1, 3), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ipSntpKeyValue.setStatus('current')
ipSntpUpdateFrequency = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 1193, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(16, 16384)).clone(3600)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ipSntpUpdateFrequency.setStatus('current')
ipSntpMasterClockAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 1193, 1, 12), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ipSntpMasterClockAddr.setStatus('current')
ipSntpAdjustment = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 1193, 1, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 720))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ipSntpAdjustment.setStatus('current')
ipSntpAdjSign = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 1193, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("add", 0), ("subtract", 1))).clone('add')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ipSntpAdjSign.setStatus('current')
ipShellTable = MibTable((1, 3, 6, 1, 4, 1, 2637, 2, 1, 1162), )
if mibBuilder.loadTexts: ipShellTable.setStatus('current')
ipShellEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2637, 2, 1, 1162, 1), ).setIndexNames((0, "APTIS-CONFIG-MIB", "ipShellPathString"))
if mibBuilder.loadTexts: ipShellEntry.setStatus('current')
ipShellPathString = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 1162, 1, 1), DisplayString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ipShellPathString.setStatus('current')
ipShellRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 1162, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ipShellRowStatus.setStatus('current')
ipShellKeyValue = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 1162, 1, 3), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ipShellKeyValue.setStatus('current')
ipShellBannerMsg = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 1162, 1, 13), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ipShellBannerMsg.setStatus('current')
ipShellBasePrompt = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 1162, 1, 14), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 40))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ipShellBasePrompt.setStatus('current')
ipShellLoginPrompt = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 1162, 1, 15), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 40))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ipShellLoginPrompt.setStatus('current')
ipShellPasswdPrompt = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 1162, 1, 16), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 40))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ipShellPasswdPrompt.setStatus('current')
ipShellBadPasswdMsg = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 1162, 1, 17), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ipShellBadPasswdMsg.setStatus('current')
ipSnmpTable = MibTable((1, 3, 6, 1, 4, 1, 2637, 2, 1, 1180), )
if mibBuilder.loadTexts: ipSnmpTable.setStatus('current')
ipSnmpEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2637, 2, 1, 1180, 1), ).setIndexNames((0, "APTIS-CONFIG-MIB", "ipSnmpPathString"))
if mibBuilder.loadTexts: ipSnmpEntry.setStatus('current')
ipSnmpPathString = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 1180, 1, 1), DisplayString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ipSnmpPathString.setStatus('current')
ipSnmpRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 1180, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ipSnmpRowStatus.setStatus('current')
ipSnmpKeyValue = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 1180, 1, 3), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ipSnmpKeyValue.setStatus('current')
ipSnmpDebugFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 1180, 1, 11), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ipSnmpDebugFlag.setStatus('current')
ipSnmpLogFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 1180, 1, 12), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ipSnmpLogFlag.setStatus('current')
ipSnmpReadCommunity = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 1180, 1, 13), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ipSnmpReadCommunity.setStatus('current')
ipSnmpWriteEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 1180, 1, 14), Boolean().clone('true')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ipSnmpWriteEnabled.setStatus('current')
ipSnmpWriteCommunity = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 1180, 1, 15), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ipSnmpWriteCommunity.setStatus('current')
ipSnmpMaxSnmpLoad = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 1180, 1, 16), Integer32().clone(100)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ipSnmpMaxSnmpLoad.setStatus('current')
ipTrapCfgTable = MibTable((1, 3, 6, 1, 4, 1, 2637, 2, 1, 1191), )
if mibBuilder.loadTexts: ipTrapCfgTable.setStatus('current')
ipTrapCfgEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2637, 2, 1, 1191, 1), ).setIndexNames((0, "APTIS-CONFIG-MIB", "ipTrapCfgPathString"))
if mibBuilder.loadTexts: ipTrapCfgEntry.setStatus('current')
ipTrapCfgPathString = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 1191, 1, 1), DisplayString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ipTrapCfgPathString.setStatus('current')
ipTrapCfgRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 1191, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ipTrapCfgRowStatus.setStatus('current')
ipTrapCfgKeyValue = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 1191, 1, 3), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ipTrapCfgKeyValue.setStatus('current')
ipTrapCfgPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 1191, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(7, 6, 5, 4, 3, 2, 1, 0))).clone(namedValues=NamedValues(("fatal", 7), ("emerg", 6), ("alert", 5), ("crit", 4), ("err", 3), ("warning", 2), ("notice", 1), ("info", 0))).clone('warning')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ipTrapCfgPriority.setStatus('current')
ipTrapCfgIpPort = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 1191, 1, 12), Integer32().clone(162)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ipTrapCfgIpPort.setStatus('current')
ipTrapCfgIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 1191, 1, 13), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ipTrapCfgIpAddr.setStatus('current')
ipTrapCfgCommunityStr = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 1191, 1, 14), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 256))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ipTrapCfgCommunityStr.setStatus('current')
ipTrapCfgVerTrapType = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 1191, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("v1", 1), ("v2", 2))).clone('v1')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ipTrapCfgVerTrapType.setStatus('current')
ipTrapCfgAuthTrapStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 1191, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('enable')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ipTrapCfgAuthTrapStatus.setStatus('current')
ipTrapCfgMacModemsThresholdTrapStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 1191, 1, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('enable')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ipTrapCfgMacModemsThresholdTrapStatus.setStatus('current')
ipTrapCfgTotalModemsThresholdTrapStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 1191, 1, 21), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('enable')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ipTrapCfgTotalModemsThresholdTrapStatus.setStatus('current')
ipTrapCfgLocalPswdChangeTrapStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 1191, 1, 22), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('enable')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ipTrapCfgLocalPswdChangeTrapStatus.setStatus('current')
ipTrapCfgAcctServerTrapStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 1191, 1, 23), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('enable')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ipTrapCfgAcctServerTrapStatus.setStatus('current')
ipTrapCfgSs7GatewayTrapStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 1191, 1, 24), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('enable')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ipTrapCfgSs7GatewayTrapStatus.setStatus('current')
ipTrapCfgTunnelTrapStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 1191, 1, 25), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('enable')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ipTrapCfgTunnelTrapStatus.setStatus('current')
ipTrapCfgDs3FailoverTrapStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 1191, 1, 26), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('enable')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ipTrapCfgDs3FailoverTrapStatus.setStatus('current')
ipTrapCfgSccFailoverTrapStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 1191, 1, 27), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('enable')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ipTrapCfgSccFailoverTrapStatus.setStatus('current')
ipTrapCfgEthernetPortTrapStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 1191, 1, 28), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('enable')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ipTrapCfgEthernetPortTrapStatus.setStatus('current')
ipTrapCfgHssiPortTrapStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 1191, 1, 29), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('enable')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ipTrapCfgHssiPortTrapStatus.setStatus('current')
ipTrapCfgRemoteAuthTrapStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 1191, 1, 30), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('enable')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ipTrapCfgRemoteAuthTrapStatus.setStatus('current')
ipTrapCfgLocalAuthFailThresholdTrapStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 1191, 1, 31), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('enable')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ipTrapCfgLocalAuthFailThresholdTrapStatus.setStatus('current')
ipTrapCfgRemoteAuthPacketDiscardTrapStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 1191, 1, 32), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('enable')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ipTrapCfgRemoteAuthPacketDiscardTrapStatus.setStatus('current')
ipTrapCfgIsdnTrapStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 1191, 1, 33), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('enable')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ipTrapCfgIsdnTrapStatus.setStatus('current')
ipTrapCfgFilterErrorTrapStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 1191, 1, 34), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('enable')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ipTrapCfgFilterErrorTrapStatus.setStatus('current')
ipTrapCfgDhcpTrapStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 1191, 1, 35), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('enable')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ipTrapCfgDhcpTrapStatus.setStatus('current')
ipTrapCfgSccTrapStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 1191, 1, 36), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('enable')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ipTrapCfgSccTrapStatus.setStatus('current')
ipTrapCfgGenericLinkTrapStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 1191, 1, 37), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('enable')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ipTrapCfgGenericLinkTrapStatus.setStatus('current')
ipTrapCfgRadiusdTrapStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 1191, 1, 38), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('enable')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ipTrapCfgRadiusdTrapStatus.setStatus('current')
ipDsmccTable = MibTable((1, 3, 6, 1, 4, 1, 2637, 2, 1, 1192), )
if mibBuilder.loadTexts: ipDsmccTable.setStatus('current')
ipDsmccEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2637, 2, 1, 1192, 1), ).setIndexNames((0, "APTIS-CONFIG-MIB", "ipDsmccPathString"))
if mibBuilder.loadTexts: ipDsmccEntry.setStatus('current')
ipDsmccPathString = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 1192, 1, 1), DisplayString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ipDsmccPathString.setStatus('current')
ipDsmccRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 1192, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ipDsmccRowStatus.setStatus('current')
ipDsmccKeyValue = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 1192, 1, 3), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ipDsmccKeyValue.setStatus('current')
ipDsmccDebugFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 1192, 1, 11), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ipDsmccDebugFlag.setStatus('current')
ipDsmccLogFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 1192, 1, 12), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ipDsmccLogFlag.setStatus('current')
ipSgcpTable = MibTable((1, 3, 6, 1, 4, 1, 2637, 2, 1, 1194), )
if mibBuilder.loadTexts: ipSgcpTable.setStatus('current')
ipSgcpEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2637, 2, 1, 1194, 1), ).setIndexNames((0, "APTIS-CONFIG-MIB", "ipSgcpPathString"))
if mibBuilder.loadTexts: ipSgcpEntry.setStatus('current')
ipSgcpPathString = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 1194, 1, 1), DisplayString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ipSgcpPathString.setStatus('current')
ipSgcpRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 1194, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ipSgcpRowStatus.setStatus('current')
ipSgcpKeyValue = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 1194, 1, 3), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ipSgcpKeyValue.setStatus('current')
ipSgcpDebugFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 1194, 1, 11), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ipSgcpDebugFlag.setStatus('current')
ipSgcpLogFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 1194, 1, 12), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ipSgcpLogFlag.setStatus('current')
ipIpdcTable = MibTable((1, 3, 6, 1, 4, 1, 2637, 2, 1, 1197), )
if mibBuilder.loadTexts: ipIpdcTable.setStatus('current')
ipIpdcEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2637, 2, 1, 1197, 1), ).setIndexNames((0, "APTIS-CONFIG-MIB", "ipIpdcPathString"))
if mibBuilder.loadTexts: ipIpdcEntry.setStatus('current')
ipIpdcPathString = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 1197, 1, 1), DisplayString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ipIpdcPathString.setStatus('current')
ipIpdcRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 1197, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ipIpdcRowStatus.setStatus('current')
ipIpdcKeyValue = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 1197, 1, 3), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ipIpdcKeyValue.setStatus('current')
ipIpdcDebugFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 1197, 1, 11), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ipIpdcDebugFlag.setStatus('current')
ipIpdcLogFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 1197, 1, 12), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ipIpdcLogFlag.setStatus('current')
ipSsTable = MibTable((1, 3, 6, 1, 4, 1, 2637, 2, 1, 1198), )
if mibBuilder.loadTexts: ipSsTable.setStatus('current')
ipSsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2637, 2, 1, 1198, 1), ).setIndexNames((0, "APTIS-CONFIG-MIB", "ipSsPathString"))
if mibBuilder.loadTexts: ipSsEntry.setStatus('current')
ipSsPathString = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 1198, 1, 1), DisplayString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ipSsPathString.setStatus('current')
ipSsRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 1198, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ipSsRowStatus.setStatus('current')
ipSsKeyValue = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 1198, 1, 3), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ipSsKeyValue.setStatus('current')
ipSsDebugFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 1198, 1, 11), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ipSsDebugFlag.setStatus('current')
ipSsLogFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 1198, 1, 12), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ipSsLogFlag.setStatus('current')
ipRshellConfigTable = MibTable((1, 3, 6, 1, 4, 1, 2637, 2, 1, 1176), )
if mibBuilder.loadTexts: ipRshellConfigTable.setStatus('current')
ipRshellConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2637, 2, 1, 1176, 1), ).setIndexNames((0, "APTIS-CONFIG-MIB", "ipRshellConfigPathString"))
if mibBuilder.loadTexts: ipRshellConfigEntry.setStatus('current')
ipRshellConfigPathString = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 1176, 1, 1), DisplayString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ipRshellConfigPathString.setStatus('current')
ipRshellConfigRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 1176, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ipRshellConfigRowStatus.setStatus('current')
ipRshellConfigKeyValue = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 1176, 1, 3), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ipRshellConfigKeyValue.setStatus('current')
ipRshellConfigForceAddressValidation = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 1176, 1, 11), Boolean().clone('true')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ipRshellConfigForceAddressValidation.setStatus('current')
ipRhostEntryTable = MibTable((1, 3, 6, 1, 4, 1, 2637, 2, 1, 1177), )
if mibBuilder.loadTexts: ipRhostEntryTable.setStatus('current')
ipRhostEntryEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2637, 2, 1, 1177, 1), ).setIndexNames((0, "APTIS-CONFIG-MIB", "ipRhostEntryPathString"))
if mibBuilder.loadTexts: ipRhostEntryEntry.setStatus('current')
ipRhostEntryPathString = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 1177, 1, 1), DisplayString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ipRhostEntryPathString.setStatus('current')
ipRhostEntryRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 1177, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ipRhostEntryRowStatus.setStatus('current')
ipRhostEntryKeyValue = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 1177, 1, 3), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ipRhostEntryKeyValue.setStatus('current')
ipRhostEntryLocalUser = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 1177, 1, 11), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ipRhostEntryLocalUser.setStatus('current')
ipRhostEntryRemoteUser = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 1177, 1, 12), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ipRhostEntryRemoteUser.setStatus('current')
ipRhostEntryRemoteHost = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 1177, 1, 13), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 256))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ipRhostEntryRemoteHost.setStatus('current')
ipRhostEntryAllowRsh = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 1177, 1, 14), Boolean().clone('true')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ipRhostEntryAllowRsh.setStatus('current')
ipRhostEntryAllowRlogin = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 1177, 1, 15), Boolean().clone('true')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ipRhostEntryAllowRlogin.setStatus('current')
ipRloginTable = MibTable((1, 3, 6, 1, 4, 1, 2637, 2, 1, 1178), )
if mibBuilder.loadTexts: ipRloginTable.setStatus('current')
ipRloginEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2637, 2, 1, 1178, 1), ).setIndexNames((0, "APTIS-CONFIG-MIB", "ipRloginPathString"))
if mibBuilder.loadTexts: ipRloginEntry.setStatus('current')
ipRloginPathString = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 1178, 1, 1), DisplayString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ipRloginPathString.setStatus('current')
ipRloginRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 1178, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ipRloginRowStatus.setStatus('current')
ipRloginKeyValue = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 1178, 1, 3), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ipRloginKeyValue.setStatus('current')
ipRloginTcpPort = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 1178, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(512, 1023)).clone(513)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ipRloginTcpPort.setStatus('current')
ipRshTable = MibTable((1, 3, 6, 1, 4, 1, 2637, 2, 1, 1179), )
if mibBuilder.loadTexts: ipRshTable.setStatus('current')
ipRshEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2637, 2, 1, 1179, 1), ).setIndexNames((0, "APTIS-CONFIG-MIB", "ipRshPathString"))
if mibBuilder.loadTexts: ipRshEntry.setStatus('current')
ipRshPathString = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 1179, 1, 1), DisplayString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ipRshPathString.setStatus('current')
ipRshRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 1179, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ipRshRowStatus.setStatus('current')
ipRshKeyValue = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 1179, 1, 3), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ipRshKeyValue.setStatus('current')
ipRshTcpPort = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 1179, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(512, 1023)).clone(514)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ipRshTcpPort.setStatus('current')
ipAaaRadiusdConfigTable = MibTable((1, 3, 6, 1, 4, 1, 2637, 2, 1, 1128), )
if mibBuilder.loadTexts: ipAaaRadiusdConfigTable.setStatus('current')
ipAaaRadiusdConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2637, 2, 1, 1128, 1), ).setIndexNames((0, "APTIS-CONFIG-MIB", "ipAaaRadiusdConfigPathString"))
if mibBuilder.loadTexts: ipAaaRadiusdConfigEntry.setStatus('current')
ipAaaRadiusdConfigPathString = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 1128, 1, 1), DisplayString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ipAaaRadiusdConfigPathString.setStatus('current')
ipAaaRadiusdConfigRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 1128, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ipAaaRadiusdConfigRowStatus.setStatus('current')
ipAaaRadiusdConfigKeyValue = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 1128, 1, 3), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ipAaaRadiusdConfigKeyValue.setStatus('current')
ipAaaRadiusdConfigStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 1128, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('enable')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ipAaaRadiusdConfigStatus.setStatus('current')
ipAaaRadiusdConfigPort = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 1128, 1, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535)).clone(1700)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ipAaaRadiusdConfigPort.setStatus('current')
ipAaaRadiusClientTable = MibTable((1, 3, 6, 1, 4, 1, 2637, 2, 1, 1129), )
if mibBuilder.loadTexts: ipAaaRadiusClientTable.setStatus('current')
ipAaaRadiusClientEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2637, 2, 1, 1129, 1), ).setIndexNames((0, "APTIS-CONFIG-MIB", "ipAaaRadiusClientPathString"))
if mibBuilder.loadTexts: ipAaaRadiusClientEntry.setStatus('current')
ipAaaRadiusClientPathString = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 1129, 1, 1), DisplayString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ipAaaRadiusClientPathString.setStatus('current')
ipAaaRadiusClientRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 1129, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ipAaaRadiusClientRowStatus.setStatus('current')
ipAaaRadiusClientKeyValue = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 1129, 1, 3), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ipAaaRadiusClientKeyValue.setStatus('current')
ipAaaRadiusClientIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 1129, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1024)).clone(1)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ipAaaRadiusClientIndex.setStatus('current')
ipAaaRadiusClientIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 1129, 1, 12), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ipAaaRadiusClientIpAddr.setStatus('current')
ipAaaRadiusClientVpopId = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 1129, 1, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 10240))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ipAaaRadiusClientVpopId.setStatus('current')
ipAaaRadiusClientSecret = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 1129, 1, 14), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ipAaaRadiusClientSecret.setStatus('current')
ipAaaRadiusClientStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 1129, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('enable')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ipAaaRadiusClientStatus.setStatus('current')
ipAaaRadiusClientTrace = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 1129, 1, 16), Boolean().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ipAaaRadiusClientTrace.setStatus('current')
ipAaaRadiusClientRequiredAttribute = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 1129, 1, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("sessionId", 1), ("all", 2))).clone('sessionId')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ipAaaRadiusClientRequiredAttribute.setStatus('current')
inboundPolicyTable = MibTable((1, 3, 6, 1, 4, 1, 2637, 2, 1, 1603), )
if mibBuilder.loadTexts: inboundPolicyTable.setStatus('current')
inboundPolicyEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2637, 2, 1, 1603, 1), ).setIndexNames((0, "APTIS-CONFIG-MIB", "inboundPolicyPathString"))
if mibBuilder.loadTexts: inboundPolicyEntry.setStatus('current')
inboundPolicyPathString = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 1603, 1, 1), DisplayString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: inboundPolicyPathString.setStatus('current')
inboundPolicyRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 1603, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: inboundPolicyRowStatus.setStatus('current')
inboundPolicyKeyValue = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 1603, 1, 3), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: inboundPolicyKeyValue.setStatus('current')
inboundPolicyCommit = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 1603, 1, 11), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: inboundPolicyCommit.setStatus('current')
inboundPolicyPolicy = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 1603, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("protected", 1), ("notProtected", 2), ("ipsecDisabled", 3))).clone('notProtected')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: inboundPolicyPolicy.setStatus('current')
outboundPolicyTable = MibTable((1, 3, 6, 1, 4, 1, 2637, 2, 1, 1604), )
if mibBuilder.loadTexts: outboundPolicyTable.setStatus('current')
outboundPolicyEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2637, 2, 1, 1604, 1), ).setIndexNames((0, "APTIS-CONFIG-MIB", "outboundPolicyPathString"))
if mibBuilder.loadTexts: outboundPolicyEntry.setStatus('current')
outboundPolicyPathString = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 1604, 1, 1), DisplayString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: outboundPolicyPathString.setStatus('current')
outboundPolicyRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 1604, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: outboundPolicyRowStatus.setStatus('current')
outboundPolicyKeyValue = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 1604, 1, 3), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: outboundPolicyKeyValue.setStatus('current')
outboundPolicyCommit = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 1604, 1, 11), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: outboundPolicyCommit.setStatus('current')
outboundPolicyPolicy = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 1604, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("protected", 1), ("notProtected", 2), ("ipsecDisabled", 3))).clone('notProtected')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: outboundPolicyPolicy.setStatus('current')
inboundSpdbTable = MibTable((1, 3, 6, 1, 4, 1, 2637, 2, 1, 1606), )
if mibBuilder.loadTexts: inboundSpdbTable.setStatus('current')
inboundSpdbEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2637, 2, 1, 1606, 1), ).setIndexNames((0, "APTIS-CONFIG-MIB", "inboundSpdbPathString"))
if mibBuilder.loadTexts: inboundSpdbEntry.setStatus('current')
inboundSpdbPathString = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 1606, 1, 1), DisplayString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: inboundSpdbPathString.setStatus('current')
inboundSpdbRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 1606, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: inboundSpdbRowStatus.setStatus('current')
inboundSpdbKeyValue = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 1606, 1, 3), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: inboundSpdbKeyValue.setStatus('current')
inboundSpdbCommit = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 1606, 1, 11), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: inboundSpdbCommit.setStatus('current')
inboundSpdbSelector = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 1606, 1, 12), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: inboundSpdbSelector.setStatus('current')
inboundSpdbPolicy = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 1606, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("applyIPSec", 1), ("bypassIPSec", 2), ("discard", 3))).clone('bypassIPSec')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: inboundSpdbPolicy.setStatus('current')
inboundSpdbIpsecGwAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 1606, 1, 14), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: inboundSpdbIpsecGwAddr.setStatus('current')
inboundSpdbSpi = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 1606, 1, 15), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: inboundSpdbSpi.setStatus('current')
inboundSpdbIpsecProtocol = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 1606, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("ah", 1), ("esp", 2))).clone('esp')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: inboundSpdbIpsecProtocol.setStatus('current')
outboundSpdbTable = MibTable((1, 3, 6, 1, 4, 1, 2637, 2, 1, 1607), )
if mibBuilder.loadTexts: outboundSpdbTable.setStatus('current')
outboundSpdbEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2637, 2, 1, 1607, 1), ).setIndexNames((0, "APTIS-CONFIG-MIB", "outboundSpdbPathString"))
if mibBuilder.loadTexts: outboundSpdbEntry.setStatus('current')
outboundSpdbPathString = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 1607, 1, 1), DisplayString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: outboundSpdbPathString.setStatus('current')
outboundSpdbRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 1607, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: outboundSpdbRowStatus.setStatus('current')
outboundSpdbKeyValue = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 1607, 1, 3), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: outboundSpdbKeyValue.setStatus('current')
outboundSpdbCommit = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 1607, 1, 11), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: outboundSpdbCommit.setStatus('current')
outboundSpdbSelector = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 1607, 1, 12), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: outboundSpdbSelector.setStatus('current')
outboundSpdbPolicy = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 1607, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("applyIPSec", 1), ("bypassIPSec", 2), ("discard", 3))).clone('bypassIPSec')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: outboundSpdbPolicy.setStatus('current')
outboundSpdbIpsecGwAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 1607, 1, 14), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: outboundSpdbIpsecGwAddr.setStatus('current')
outboundSpdbSpi = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 1607, 1, 15), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: outboundSpdbSpi.setStatus('current')
outboundSpdbIpsecProtocol = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 1607, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("ah", 1), ("esp", 2))).clone('esp')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: outboundSpdbIpsecProtocol.setStatus('current')
inboundSadbTable = MibTable((1, 3, 6, 1, 4, 1, 2637, 2, 1, 1609), )
if mibBuilder.loadTexts: inboundSadbTable.setStatus('current')
inboundSadbEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2637, 2, 1, 1609, 1), ).setIndexNames((0, "APTIS-CONFIG-MIB", "inboundSadbPathString"))
if mibBuilder.loadTexts: inboundSadbEntry.setStatus('current')
inboundSadbPathString = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 1609, 1, 1), DisplayString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: inboundSadbPathString.setStatus('current')
inboundSadbRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 1609, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: inboundSadbRowStatus.setStatus('current')
inboundSadbKeyValue = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 1609, 1, 3), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: inboundSadbKeyValue.setStatus('current')
inboundSadbCommit = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 1609, 1, 11), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: inboundSadbCommit.setStatus('current')
inboundSadbIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 1609, 1, 12), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: inboundSadbIpAddr.setStatus('current')
inboundSadbSpi = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 1609, 1, 13), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: inboundSadbSpi.setStatus('current')
inboundSadbIpsecProtocol = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 1609, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("ah", 1), ("esp", 2))).clone('esp')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: inboundSadbIpsecProtocol.setStatus('current')
inboundSadbAhMacAlg = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 1609, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("hmacmd5", 1), ("hmacsha1", 2))).clone('hmacmd5')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: inboundSadbAhMacAlg.setStatus('current')
inboundSadbAhMacLength = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 1609, 1, 16), Integer32().clone(12)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: inboundSadbAhMacLength.setStatus('current')
inboundSadbAhMacKeyLength = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 1609, 1, 17), Integer32().clone(16)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: inboundSadbAhMacKeyLength.setStatus('current')
inboundSadbAhMacKey = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 1609, 1, 18), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 256))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: inboundSadbAhMacKey.setStatus('current')
inboundSadbEspMacAlg = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 1609, 1, 19), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("hmacmd5", 1), ("hmacsha1", 2), ("espNoAuth", 3))).clone('hmacmd5')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: inboundSadbEspMacAlg.setStatus('current')
inboundSadbEspMacLength = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 1609, 1, 20), Integer32().clone(12)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: inboundSadbEspMacLength.setStatus('current')
inboundSadbEspMacKeyLength = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 1609, 1, 21), Integer32().clone(16)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: inboundSadbEspMacKeyLength.setStatus('current')
inboundSadbEspMacKey = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 1609, 1, 22), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 256))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: inboundSadbEspMacKey.setStatus('current')
inboundSadbEspEncAlg = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 1609, 1, 23), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("espDesCbc", 1), ("esp3desCbc", 2), ("nullCipher", 3))).clone('espDesCbc')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: inboundSadbEspEncAlg.setStatus('current')
inboundSadbEspEncKeyLength = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 1609, 1, 24), Integer32().clone(8)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: inboundSadbEspEncKeyLength.setStatus('current')
inboundSadbEspEncKey = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 1609, 1, 25), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 256))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: inboundSadbEspEncKey.setStatus('current')
inboundSadbIpsecMode = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 1609, 1, 26), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("tunnel", 1), ("transport", 2))).clone('tunnel')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: inboundSadbIpsecMode.setStatus('current')
inboundSadbNextEncapIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 1609, 1, 27), IpAddress().clone(127)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: inboundSadbNextEncapIpAddr.setStatus('current')
inboundSadbNextEncapSpi = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 1609, 1, 28), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: inboundSadbNextEncapSpi.setStatus('current')
inboundSadbNextEncapIpsecProtocol = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 1609, 1, 29), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("ah", 1), ("esp", 2))).clone('esp')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: inboundSadbNextEncapIpsecProtocol.setStatus('current')
outboundSadbTable = MibTable((1, 3, 6, 1, 4, 1, 2637, 2, 1, 1610), )
if mibBuilder.loadTexts: outboundSadbTable.setStatus('current')
outboundSadbEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2637, 2, 1, 1610, 1), ).setIndexNames((0, "APTIS-CONFIG-MIB", "outboundSadbPathString"))
if mibBuilder.loadTexts: outboundSadbEntry.setStatus('current')
outboundSadbPathString = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 1610, 1, 1), DisplayString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: outboundSadbPathString.setStatus('current')
outboundSadbRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 1610, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: outboundSadbRowStatus.setStatus('current')
outboundSadbKeyValue = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 1610, 1, 3), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: outboundSadbKeyValue.setStatus('current')
outboundSadbCommit = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 1610, 1, 11), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: outboundSadbCommit.setStatus('current')
outboundSadbIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 1610, 1, 12), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: outboundSadbIpAddr.setStatus('current')
outboundSadbSpi = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 1610, 1, 13), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: outboundSadbSpi.setStatus('current')
outboundSadbIpsecProtocol = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 1610, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("ah", 1), ("esp", 2))).clone('esp')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: outboundSadbIpsecProtocol.setStatus('current')
outboundSadbAhMacAlg = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 1610, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("hmacmd5", 1), ("hmacsha1", 2))).clone('hmacmd5')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: outboundSadbAhMacAlg.setStatus('current')
outboundSadbAhMacLength = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 1610, 1, 16), Integer32().clone(12)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: outboundSadbAhMacLength.setStatus('current')
outboundSadbAhMacKeyLength = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 1610, 1, 17), Integer32().clone(16)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: outboundSadbAhMacKeyLength.setStatus('current')
outboundSadbAhMacKey = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 1610, 1, 18), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 256))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: outboundSadbAhMacKey.setStatus('current')
outboundSadbEspMacAlg = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 1610, 1, 19), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("hmacmd5", 1), ("hmacsha1", 2), ("espNoAuth", 3))).clone('hmacmd5')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: outboundSadbEspMacAlg.setStatus('current')
outboundSadbEspMacLength = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 1610, 1, 20), Integer32().clone(12)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: outboundSadbEspMacLength.setStatus('current')
outboundSadbEspMacKeyLength = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 1610, 1, 21), Integer32().clone(16)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: outboundSadbEspMacKeyLength.setStatus('current')
outboundSadbEspMacKey = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 1610, 1, 22), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 256))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: outboundSadbEspMacKey.setStatus('current')
outboundSadbEspEncAlg = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 1610, 1, 23), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("espDesCbc", 1), ("esp3desCbc", 2), ("nullCipher", 3))).clone('espDesCbc')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: outboundSadbEspEncAlg.setStatus('current')
outboundSadbEspEncKeyLength = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 1610, 1, 24), Integer32().clone(8)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: outboundSadbEspEncKeyLength.setStatus('current')
outboundSadbEspEncKey = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 1610, 1, 25), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 256))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: outboundSadbEspEncKey.setStatus('current')
outboundSadbIpsecMode = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 1610, 1, 26), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("tunnel", 1), ("transport", 2))).clone('tunnel')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: outboundSadbIpsecMode.setStatus('current')
outboundSadbNextEncapIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 1610, 1, 27), IpAddress().clone(127)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: outboundSadbNextEncapIpAddr.setStatus('current')
outboundSadbNextEncapSpi = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 1610, 1, 28), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: outboundSadbNextEncapSpi.setStatus('current')
outboundSadbNextEncapIpsecProtocol = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 1610, 1, 29), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("ah", 1), ("esp", 2))).clone('esp')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: outboundSadbNextEncapIpsecProtocol.setStatus('current')
statsDummyTable = MibTable((1, 3, 6, 1, 4, 1, 2637, 2, 1, 1613), )
if mibBuilder.loadTexts: statsDummyTable.setStatus('current')
statsDummyEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2637, 2, 1, 1613, 1), ).setIndexNames((0, "APTIS-CONFIG-MIB", "statsDummyPathString"))
if mibBuilder.loadTexts: statsDummyEntry.setStatus('current')
statsDummyPathString = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 1613, 1, 1), DisplayString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: statsDummyPathString.setStatus('current')
statsDummyRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 1613, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: statsDummyRowStatus.setStatus('current')
statsDummyKeyValue = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 1613, 1, 3), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: statsDummyKeyValue.setStatus('current')
statsDummyCommit = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 1613, 1, 11), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: statsDummyCommit.setStatus('current')
vmsConfigTable = MibTable((1, 3, 6, 1, 4, 1, 2637, 2, 1, 1614), )
if mibBuilder.loadTexts: vmsConfigTable.setStatus('current')
vmsConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2637, 2, 1, 1614, 1), ).setIndexNames((0, "APTIS-CONFIG-MIB", "vmsConfigPathString"))
if mibBuilder.loadTexts: vmsConfigEntry.setStatus('current')
vmsConfigPathString = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 1614, 1, 1), DisplayString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: vmsConfigPathString.setStatus('current')
vmsConfigRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 1614, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: vmsConfigRowStatus.setStatus('current')
vmsConfigKeyValue = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 1614, 1, 3), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: vmsConfigKeyValue.setStatus('current')
vmsConfigCommit = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 1614, 1, 11), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: vmsConfigCommit.setStatus('current')
vmsConfigChipStateMask = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 1614, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3, 4, 5))).clone(namedValues=NamedValues(("disabled", 2), ("noEnc", 3), ("no3des", 4), ("fullCapabilities", 5))).clone('fullCapabilities')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: vmsConfigChipStateMask.setStatus('current')
ipDsbyteTable = MibTable((1, 3, 6, 1, 4, 1, 2637, 2, 1, 1224), )
if mibBuilder.loadTexts: ipDsbyteTable.setStatus('current')
ipDsbyteEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2637, 2, 1, 1224, 1), ).setIndexNames((0, "APTIS-CONFIG-MIB", "ipDsbytePathString"))
if mibBuilder.loadTexts: ipDsbyteEntry.setStatus('current')
ipDsbytePathString = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 1224, 1, 1), DisplayString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ipDsbytePathString.setStatus('current')
ipDsbyteRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 1224, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ipDsbyteRowStatus.setStatus('current')
ipDsbyteKeyValue = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 1224, 1, 3), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ipDsbyteKeyValue.setStatus('current')
ipDsbyteDSByteEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 1224, 1, 11), Boolean().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ipDsbyteDSByteEnabled.setStatus('current')
ipDsbyteDSByteValue = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 1224, 1, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ipDsbyteDSByteValue.setStatus('current')
ipPoolConfigTable = MibTable((1, 3, 6, 1, 4, 1, 2637, 2, 1, 1242), )
if mibBuilder.loadTexts: ipPoolConfigTable.setStatus('current')
ipPoolConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2637, 2, 1, 1242, 1), ).setIndexNames((0, "APTIS-CONFIG-MIB", "ipPoolConfigPathString"))
if mibBuilder.loadTexts: ipPoolConfigEntry.setStatus('current')
ipPoolConfigPathString = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 1242, 1, 1), DisplayString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ipPoolConfigPathString.setStatus('current')
ipPoolConfigRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 1242, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ipPoolConfigRowStatus.setStatus('current')
ipPoolConfigKeyValue = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 1242, 1, 3), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ipPoolConfigKeyValue.setStatus('current')
ipPoolConfigPrivate = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 1242, 1, 11), Boolean().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ipPoolConfigPrivate.setStatus('current')
ipAddressBlockTable = MibTable((1, 3, 6, 1, 4, 1, 2637, 2, 1, 1241), )
if mibBuilder.loadTexts: ipAddressBlockTable.setStatus('current')
ipAddressBlockEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2637, 2, 1, 1241, 1), ).setIndexNames((0, "APTIS-CONFIG-MIB", "ipAddressBlockPathString"))
if mibBuilder.loadTexts: ipAddressBlockEntry.setStatus('current')
ipAddressBlockPathString = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 1241, 1, 1), DisplayString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ipAddressBlockPathString.setStatus('current')
ipAddressBlockRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 1241, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ipAddressBlockRowStatus.setStatus('current')
ipAddressBlockKeyValue = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 1241, 1, 3), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ipAddressBlockKeyValue.setStatus('current')
ipAddressBlockStart = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 1241, 1, 11), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ipAddressBlockStart.setStatus('current')
ipAddressBlockCount = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 1241, 1, 12), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ipAddressBlockCount.setStatus('current')
ipAddressBlockMask = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 1241, 1, 13), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ipAddressBlockMask.setStatus('current')
ipAddressBlockRangeInUse = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 1241, 1, 14), Boolean().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ipAddressBlockRangeInUse.setStatus('current')
ipAddressBlockAdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 1241, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('enabled')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ipAddressBlockAdminStatus.setStatus('current')
iSDNConfigTable = MibTable((1, 3, 6, 1, 4, 1, 2637, 2, 1, 2201), )
if mibBuilder.loadTexts: iSDNConfigTable.setStatus('current')
iSDNConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2637, 2, 1, 2201, 1), ).setIndexNames((0, "APTIS-CONFIG-MIB", "iSDNConfigPathString"))
if mibBuilder.loadTexts: iSDNConfigEntry.setStatus('current')
iSDNConfigPathString = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 2201, 1, 1), DisplayString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: iSDNConfigPathString.setStatus('current')
iSDNConfigRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 2201, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: iSDNConfigRowStatus.setStatus('current')
iSDNConfigKeyValue = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 2201, 1, 3), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: iSDNConfigKeyValue.setStatus('current')
iSDNConfigDirection = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 2201, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("userSide", 1), ("networkSide", 2))).clone('userSide')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: iSDNConfigDirection.setStatus('current')
iSDNConfigSwitchType = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 2201, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9))).clone(namedValues=NamedValues(("att4ess", 1), ("att5ess", 2), ("ntiDms", 3), ("ni2", 4), ("etsi", 5), ("ntt", 6), ("cr33", 7), ("me0200", 8), ("external", 9))).clone('ntiDms')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: iSDNConfigSwitchType.setStatus('current')
iSDNConfigNFAS = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 2201, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("disabled", 0), ("master", 1), ("slave", 2), ("backup", 3))).clone('disabled')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: iSDNConfigNFAS.setStatus('current')
iSDNConfigNFASInterface = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 2201, 1, 14), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 56)).clone(1)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: iSDNConfigNFASInterface.setStatus('current')
iSDNConfigNFASID = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 2201, 1, 15), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 55))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: iSDNConfigNFASID.setStatus('current')
iSDNConfigSendService = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 2201, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("default", 0), ("enable", 1), ("disable", 2))).clone('default')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: iSDNConfigSendService.setStatus('current')
iSDNConfigForceService = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 2201, 1, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("normal", 0), ("zealous", 1))).clone('normal')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: iSDNConfigForceService.setStatus('current')
iSDNConfigIIDEncoding = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 2201, 1, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("default", 1), ("explicit", 2))).clone('default')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: iSDNConfigIIDEncoding.setStatus('current')
iSDNLayer2TimersTable = MibTable((1, 3, 6, 1, 4, 1, 2637, 2, 1, 2202), )
if mibBuilder.loadTexts: iSDNLayer2TimersTable.setStatus('current')
iSDNLayer2TimersEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2637, 2, 1, 2202, 1), ).setIndexNames((0, "APTIS-CONFIG-MIB", "iSDNLayer2TimersPathString"))
if mibBuilder.loadTexts: iSDNLayer2TimersEntry.setStatus('current')
iSDNLayer2TimersPathString = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 2202, 1, 1), DisplayString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: iSDNLayer2TimersPathString.setStatus('current')
iSDNLayer2TimersRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 2202, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: iSDNLayer2TimersRowStatus.setStatus('current')
iSDNLayer2TimersKeyValue = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 2202, 1, 3), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: iSDNLayer2TimersKeyValue.setStatus('current')
iSDNLayer2TimersT200 = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 2202, 1, 11), Integer32().clone(1000)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: iSDNLayer2TimersT200.setStatus('current')
iSDNLayer2TimersT203 = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 2202, 1, 12), Integer32().clone(10000)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: iSDNLayer2TimersT203.setStatus('current')
iSDNLayer2TimersT204 = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 2202, 1, 13), Integer32().clone(2000)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: iSDNLayer2TimersT204.setStatus('current')
iSDNLayer2TimersN201 = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 2202, 1, 14), Integer32().clone(260)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: iSDNLayer2TimersN201.setStatus('current')
iSDNLayer2TimersN204 = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 2202, 1, 15), Integer32().clone(3)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: iSDNLayer2TimersN204.setStatus('current')
iSDNLayer2TimersK = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 2202, 1, 16), Integer32().clone(7)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: iSDNLayer2TimersK.setStatus('current')
iSDNLayer2TimersAtt5essTable = MibTable((1, 3, 6, 1, 4, 1, 2637, 2, 1, 2211), )
if mibBuilder.loadTexts: iSDNLayer2TimersAtt5essTable.setStatus('current')
iSDNLayer2TimersAtt5essEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2637, 2, 1, 2211, 1), ).setIndexNames((0, "APTIS-CONFIG-MIB", "iSDNLayer2TimersAtt5essPathString"))
if mibBuilder.loadTexts: iSDNLayer2TimersAtt5essEntry.setStatus('current')
iSDNLayer2TimersAtt5essPathString = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 2211, 1, 1), DisplayString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: iSDNLayer2TimersAtt5essPathString.setStatus('current')
iSDNLayer2TimersAtt5essRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 2211, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: iSDNLayer2TimersAtt5essRowStatus.setStatus('current')
iSDNLayer2TimersAtt5essKeyValue = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 2211, 1, 3), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: iSDNLayer2TimersAtt5essKeyValue.setStatus('current')
iSDNLayer2TimersAtt5essT200 = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 2211, 1, 11), Integer32().clone(1000)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: iSDNLayer2TimersAtt5essT200.setStatus('current')
iSDNLayer2TimersAtt5essT203 = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 2211, 1, 12), Integer32().clone(30000)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: iSDNLayer2TimersAtt5essT203.setStatus('current')
iSDNLayer2TimersAtt5essT204 = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 2211, 1, 13), Integer32().clone(2000)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: iSDNLayer2TimersAtt5essT204.setStatus('current')
iSDNLayer2TimersAtt5essN201 = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 2211, 1, 14), Integer32().clone(260)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: iSDNLayer2TimersAtt5essN201.setStatus('current')
iSDNLayer2TimersAtt5essN204 = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 2211, 1, 15), Integer32().clone(3)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: iSDNLayer2TimersAtt5essN204.setStatus('current')
iSDNLayer2TimersAtt5essK = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 2211, 1, 16), Integer32().clone(7)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: iSDNLayer2TimersAtt5essK.setStatus('current')
iSDNLayer3TimersTable = MibTable((1, 3, 6, 1, 4, 1, 2637, 2, 1, 2203), )
if mibBuilder.loadTexts: iSDNLayer3TimersTable.setStatus('current')
iSDNLayer3TimersEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2637, 2, 1, 2203, 1), ).setIndexNames((0, "APTIS-CONFIG-MIB", "iSDNLayer3TimersPathString"))
if mibBuilder.loadTexts: iSDNLayer3TimersEntry.setStatus('current')
iSDNLayer3TimersPathString = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 2203, 1, 1), DisplayString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: iSDNLayer3TimersPathString.setStatus('current')
iSDNLayer3TimersRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 2203, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: iSDNLayer3TimersRowStatus.setStatus('current')
iSDNLayer3TimersKeyValue = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 2203, 1, 3), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: iSDNLayer3TimersKeyValue.setStatus('current')
iSDNLayer3TimersT302 = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 2203, 1, 11), Integer32().clone(15000)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: iSDNLayer3TimersT302.setStatus('current')
iSDNLayer3TimersT303 = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 2203, 1, 12), Integer32().clone(4000)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: iSDNLayer3TimersT303.setStatus('current')
iSDNLayer3TimersT304 = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 2203, 1, 13), Integer32().clone(30000)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: iSDNLayer3TimersT304.setStatus('current')
iSDNLayer3TimersT305 = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 2203, 1, 14), Integer32().clone(30000)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: iSDNLayer3TimersT305.setStatus('current')
iSDNLayer3TimersT306 = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 2203, 1, 15), Integer32().clone(30000)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: iSDNLayer3TimersT306.setStatus('current')
iSDNLayer3TimersT308 = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 2203, 1, 16), Integer32().clone(4000)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: iSDNLayer3TimersT308.setStatus('current')
iSDNLayer3TimersT309 = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 2203, 1, 17), Integer32().clone(90000)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: iSDNLayer3TimersT309.setStatus('current')
iSDNLayer3TimersT310 = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 2203, 1, 18), Integer32().clone(10000)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: iSDNLayer3TimersT310.setStatus('current')
iSDNLayer3TimersT312 = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 2203, 1, 19), Integer32().clone(6000)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: iSDNLayer3TimersT312.setStatus('current')
iSDNLayer3TimersT313 = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 2203, 1, 20), Integer32().clone(4000)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: iSDNLayer3TimersT313.setStatus('current')
iSDNLayer3TimersT316 = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 2203, 1, 21), Integer32().clone(120000)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: iSDNLayer3TimersT316.setStatus('current')
iSDNLayer3TimersT318 = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 2203, 1, 22), Integer32().clone(4000)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: iSDNLayer3TimersT318.setStatus('current')
iSDNLayer3TimersT319 = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 2203, 1, 23), Integer32().clone(4000)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: iSDNLayer3TimersT319.setStatus('current')
iSDNLayer3TimersT321 = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 2203, 1, 24), Integer32().clone(30000)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: iSDNLayer3TimersT321.setStatus('current')
iSDNLayer3TimersT322 = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 2203, 1, 25), Integer32().clone(4000)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: iSDNLayer3TimersT322.setStatus('current')
iSDNLayer3TimersT3m1 = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 2203, 1, 26), Integer32().clone(40000)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: iSDNLayer3TimersT3m1.setStatus('current')
iSDNLayer3TimersAtt4essTable = MibTable((1, 3, 6, 1, 4, 1, 2637, 2, 1, 2220), )
if mibBuilder.loadTexts: iSDNLayer3TimersAtt4essTable.setStatus('current')
iSDNLayer3TimersAtt4essEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2637, 2, 1, 2220, 1), ).setIndexNames((0, "APTIS-CONFIG-MIB", "iSDNLayer3TimersAtt4essPathString"))
if mibBuilder.loadTexts: iSDNLayer3TimersAtt4essEntry.setStatus('current')
iSDNLayer3TimersAtt4essPathString = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 2220, 1, 1), DisplayString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: iSDNLayer3TimersAtt4essPathString.setStatus('current')
iSDNLayer3TimersAtt4essRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 2220, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: iSDNLayer3TimersAtt4essRowStatus.setStatus('current')
iSDNLayer3TimersAtt4essKeyValue = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 2220, 1, 3), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: iSDNLayer3TimersAtt4essKeyValue.setStatus('current')
iSDNLayer3TimersAtt4essT302 = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 2220, 1, 11), Integer32().clone(18000)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: iSDNLayer3TimersAtt4essT302.setStatus('current')
iSDNLayer3TimersAtt4essT303 = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 2220, 1, 12), Integer32().clone(4000)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: iSDNLayer3TimersAtt4essT303.setStatus('current')
iSDNLayer3TimersAtt4essT304 = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 2220, 1, 13), Integer32().clone(4000)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: iSDNLayer3TimersAtt4essT304.setStatus('current')
iSDNLayer3TimersAtt4essT305 = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 2220, 1, 14), Integer32().clone(4000)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: iSDNLayer3TimersAtt4essT305.setStatus('current')
iSDNLayer3TimersAtt4essT306 = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 2220, 1, 15), Integer32().clone(15000)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: iSDNLayer3TimersAtt4essT306.setStatus('current')
iSDNLayer3TimersAtt4essT308 = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 2220, 1, 16), Integer32().clone(4000)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: iSDNLayer3TimersAtt4essT308.setStatus('current')
iSDNLayer3TimersAtt4essT309 = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 2220, 1, 17), Integer32().clone(90000)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: iSDNLayer3TimersAtt4essT309.setStatus('current')
iSDNLayer3TimersAtt4essT310 = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 2220, 1, 18), Integer32().clone(10000)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: iSDNLayer3TimersAtt4essT310.setStatus('current')
iSDNLayer3TimersAtt4essT312 = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 2220, 1, 19), Integer32().clone(4500)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: iSDNLayer3TimersAtt4essT312.setStatus('current')
iSDNLayer3TimersAtt4essT313 = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 2220, 1, 20), Integer32().clone(4000)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: iSDNLayer3TimersAtt4essT313.setStatus('current')
iSDNLayer3TimersAtt4essT316 = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 2220, 1, 21), Integer32().clone(120000)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: iSDNLayer3TimersAtt4essT316.setStatus('current')
iSDNLayer3TimersAtt4essT318 = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 2220, 1, 22), Integer32().clone(4000)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: iSDNLayer3TimersAtt4essT318.setStatus('current')
iSDNLayer3TimersAtt4essT319 = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 2220, 1, 23), Integer32().clone(4000)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: iSDNLayer3TimersAtt4essT319.setStatus('current')
iSDNLayer3TimersAtt4essT321 = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 2220, 1, 24), Integer32().clone(30000)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: iSDNLayer3TimersAtt4essT321.setStatus('current')
iSDNLayer3TimersAtt4essT322 = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 2220, 1, 25), Integer32().clone(4000)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: iSDNLayer3TimersAtt4essT322.setStatus('current')
iSDNLayer3TimersAtt4essT3m1 = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 2220, 1, 26), Integer32().clone(40000)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: iSDNLayer3TimersAtt4essT3m1.setStatus('current')
iSDNLayer3TimersAtt5essTable = MibTable((1, 3, 6, 1, 4, 1, 2637, 2, 1, 2221), )
if mibBuilder.loadTexts: iSDNLayer3TimersAtt5essTable.setStatus('current')
iSDNLayer3TimersAtt5essEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2637, 2, 1, 2221, 1), ).setIndexNames((0, "APTIS-CONFIG-MIB", "iSDNLayer3TimersAtt5essPathString"))
if mibBuilder.loadTexts: iSDNLayer3TimersAtt5essEntry.setStatus('current')
iSDNLayer3TimersAtt5essPathString = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 2221, 1, 1), DisplayString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: iSDNLayer3TimersAtt5essPathString.setStatus('current')
iSDNLayer3TimersAtt5essRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 2221, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: iSDNLayer3TimersAtt5essRowStatus.setStatus('current')
iSDNLayer3TimersAtt5essKeyValue = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 2221, 1, 3), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: iSDNLayer3TimersAtt5essKeyValue.setStatus('current')
iSDNLayer3TimersAtt5essT302 = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 2221, 1, 11), Integer32().clone(10000)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: iSDNLayer3TimersAtt5essT302.setStatus('current')
iSDNLayer3TimersAtt5essT303 = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 2221, 1, 12), Integer32().clone(4000)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: iSDNLayer3TimersAtt5essT303.setStatus('current')
iSDNLayer3TimersAtt5essT304 = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 2221, 1, 13), Integer32().clone(30000)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: iSDNLayer3TimersAtt5essT304.setStatus('current')
iSDNLayer3TimersAtt5essT305 = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 2221, 1, 14), Integer32().clone(30000)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: iSDNLayer3TimersAtt5essT305.setStatus('current')
iSDNLayer3TimersAtt5essT306 = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 2221, 1, 15), Integer32().clone(30000)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: iSDNLayer3TimersAtt5essT306.setStatus('current')
iSDNLayer3TimersAtt5essT308 = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 2221, 1, 16), Integer32().clone(4000)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: iSDNLayer3TimersAtt5essT308.setStatus('current')
iSDNLayer3TimersAtt5essT309 = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 2221, 1, 17), Integer32().clone(90000)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: iSDNLayer3TimersAtt5essT309.setStatus('current')
iSDNLayer3TimersAtt5essT310 = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 2221, 1, 18), Integer32().clone(10000)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: iSDNLayer3TimersAtt5essT310.setStatus('current')
iSDNLayer3TimersAtt5essT312 = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 2221, 1, 19), Integer32().clone(6000)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: iSDNLayer3TimersAtt5essT312.setStatus('current')
iSDNLayer3TimersAtt5essT313 = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 2221, 1, 20), Integer32().clone(4000)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: iSDNLayer3TimersAtt5essT313.setStatus('current')
iSDNLayer3TimersAtt5essT316 = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 2221, 1, 21), Integer32().clone(120000)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: iSDNLayer3TimersAtt5essT316.setStatus('current')
iSDNLayer3TimersAtt5essT318 = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 2221, 1, 22), Integer32().clone(4000)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: iSDNLayer3TimersAtt5essT318.setStatus('current')
iSDNLayer3TimersAtt5essT319 = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 2221, 1, 23), Integer32().clone(4000)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: iSDNLayer3TimersAtt5essT319.setStatus('current')
iSDNLayer3TimersAtt5essT321 = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 2221, 1, 24), Integer32().clone(30000)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: iSDNLayer3TimersAtt5essT321.setStatus('current')
iSDNLayer3TimersAtt5essT322 = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 2221, 1, 25), Integer32().clone(4000)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: iSDNLayer3TimersAtt5essT322.setStatus('current')
iSDNLayer3TimersAtt5essT3m1 = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 2221, 1, 26), Integer32().clone(40000)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: iSDNLayer3TimersAtt5essT3m1.setStatus('current')
iSDNLayer3TimersNtiDmsTable = MibTable((1, 3, 6, 1, 4, 1, 2637, 2, 1, 2222), )
if mibBuilder.loadTexts: iSDNLayer3TimersNtiDmsTable.setStatus('current')
iSDNLayer3TimersNtiDmsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2637, 2, 1, 2222, 1), ).setIndexNames((0, "APTIS-CONFIG-MIB", "iSDNLayer3TimersNtiDmsPathString"))
if mibBuilder.loadTexts: iSDNLayer3TimersNtiDmsEntry.setStatus('current')
iSDNLayer3TimersNtiDmsPathString = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 2222, 1, 1), DisplayString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: iSDNLayer3TimersNtiDmsPathString.setStatus('current')
iSDNLayer3TimersNtiDmsRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 2222, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: iSDNLayer3TimersNtiDmsRowStatus.setStatus('current')
iSDNLayer3TimersNtiDmsKeyValue = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 2222, 1, 3), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: iSDNLayer3TimersNtiDmsKeyValue.setStatus('current')
iSDNLayer3TimersNtiDmsT302 = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 2222, 1, 11), Integer32().clone(15000)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: iSDNLayer3TimersNtiDmsT302.setStatus('current')
iSDNLayer3TimersNtiDmsT303 = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 2222, 1, 12), Integer32().clone(4000)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: iSDNLayer3TimersNtiDmsT303.setStatus('current')
iSDNLayer3TimersNtiDmsT304 = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 2222, 1, 13), Integer32().clone(30000)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: iSDNLayer3TimersNtiDmsT304.setStatus('current')
iSDNLayer3TimersNtiDmsT305 = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 2222, 1, 14), Integer32().clone(30000)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: iSDNLayer3TimersNtiDmsT305.setStatus('current')
iSDNLayer3TimersNtiDmsT306 = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 2222, 1, 15), Integer32().clone(30000)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: iSDNLayer3TimersNtiDmsT306.setStatus('current')
iSDNLayer3TimersNtiDmsT308 = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 2222, 1, 16), Integer32().clone(4000)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: iSDNLayer3TimersNtiDmsT308.setStatus('current')
iSDNLayer3TimersNtiDmsT309 = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 2222, 1, 17), Integer32().clone(90000)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: iSDNLayer3TimersNtiDmsT309.setStatus('current')
iSDNLayer3TimersNtiDmsT310 = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 2222, 1, 18), Integer32().clone(10000)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: iSDNLayer3TimersNtiDmsT310.setStatus('current')
iSDNLayer3TimersNtiDmsT312 = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 2222, 1, 19), Integer32().clone(6000)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: iSDNLayer3TimersNtiDmsT312.setStatus('current')
iSDNLayer3TimersNtiDmsT313 = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 2222, 1, 20), Integer32().clone(4000)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: iSDNLayer3TimersNtiDmsT313.setStatus('current')
iSDNLayer3TimersNtiDmsT316 = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 2222, 1, 21), Integer32().clone(120000)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: iSDNLayer3TimersNtiDmsT316.setStatus('current')
iSDNLayer3TimersNtiDmsT318 = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 2222, 1, 22), Integer32().clone(4000)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: iSDNLayer3TimersNtiDmsT318.setStatus('current')
iSDNLayer3TimersNtiDmsT319 = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 2222, 1, 23), Integer32().clone(4000)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: iSDNLayer3TimersNtiDmsT319.setStatus('current')
iSDNLayer3TimersNtiDmsT321 = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 2222, 1, 24), Integer32().clone(30000)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: iSDNLayer3TimersNtiDmsT321.setStatus('current')
iSDNLayer3TimersNtiDmsT322 = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 2222, 1, 25), Integer32().clone(4000)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: iSDNLayer3TimersNtiDmsT322.setStatus('current')
iSDNLayer3TimersNtiDmsT3m1 = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 2222, 1, 26), Integer32().clone(40000)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: iSDNLayer3TimersNtiDmsT3m1.setStatus('current')
iSDNLayer3TimersNet5Table = MibTable((1, 3, 6, 1, 4, 1, 2637, 2, 1, 2223), )
if mibBuilder.loadTexts: iSDNLayer3TimersNet5Table.setStatus('current')
iSDNLayer3TimersNet5Entry = MibTableRow((1, 3, 6, 1, 4, 1, 2637, 2, 1, 2223, 1), ).setIndexNames((0, "APTIS-CONFIG-MIB", "iSDNLayer3TimersNet5PathString"))
if mibBuilder.loadTexts: iSDNLayer3TimersNet5Entry.setStatus('current')
iSDNLayer3TimersNet5PathString = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 2223, 1, 1), DisplayString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: iSDNLayer3TimersNet5PathString.setStatus('current')
iSDNLayer3TimersNet5RowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 2223, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: iSDNLayer3TimersNet5RowStatus.setStatus('current')
iSDNLayer3TimersNet5KeyValue = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 2223, 1, 3), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: iSDNLayer3TimersNet5KeyValue.setStatus('current')
iSDNLayer3TimersNet5T302 = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 2223, 1, 11), Integer32().clone(15000)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: iSDNLayer3TimersNet5T302.setStatus('current')
iSDNLayer3TimersNet5T303 = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 2223, 1, 12), Integer32().clone(4000)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: iSDNLayer3TimersNet5T303.setStatus('current')
iSDNLayer3TimersNet5T304 = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 2223, 1, 13), Integer32().clone(15000)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: iSDNLayer3TimersNet5T304.setStatus('current')
iSDNLayer3TimersNet5T305 = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 2223, 1, 14), Integer32().clone(30000)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: iSDNLayer3TimersNet5T305.setStatus('current')
iSDNLayer3TimersNet5T306 = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 2223, 1, 15), Integer32().clone(30000)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: iSDNLayer3TimersNet5T306.setStatus('current')
iSDNLayer3TimersNet5T308 = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 2223, 1, 16), Integer32().clone(4000)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: iSDNLayer3TimersNet5T308.setStatus('current')
iSDNLayer3TimersNet5T309 = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 2223, 1, 17), Integer32().clone(90000)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: iSDNLayer3TimersNet5T309.setStatus('current')
iSDNLayer3TimersNet5T310 = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 2223, 1, 18), Integer32().clone(10000)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: iSDNLayer3TimersNet5T310.setStatus('current')
iSDNLayer3TimersNet5T312 = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 2223, 1, 19), Integer32().clone(6000)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: iSDNLayer3TimersNet5T312.setStatus('current')
iSDNLayer3TimersNet5T313 = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 2223, 1, 20), Integer32().clone(4000)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: iSDNLayer3TimersNet5T313.setStatus('current')
iSDNLayer3TimersNet5T316 = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 2223, 1, 21), Integer32().clone(120000)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: iSDNLayer3TimersNet5T316.setStatus('current')
iSDNLayer3TimersNet5T318 = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 2223, 1, 22), Integer32().clone(4000)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: iSDNLayer3TimersNet5T318.setStatus('current')
iSDNLayer3TimersNet5T319 = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 2223, 1, 23), Integer32().clone(4000)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: iSDNLayer3TimersNet5T319.setStatus('current')
iSDNLayer3TimersNet5T321 = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 2223, 1, 24), Integer32().clone(30000)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: iSDNLayer3TimersNet5T321.setStatus('current')
iSDNLayer3TimersNet5T322 = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 2223, 1, 25), Integer32().clone(4000)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: iSDNLayer3TimersNet5T322.setStatus('current')
iSDNLayer3TimersNet5T3m1 = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 2223, 1, 26), Integer32().clone(40000)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: iSDNLayer3TimersNet5T3m1.setStatus('current')
iSDNLayer3TimersNttTable = MibTable((1, 3, 6, 1, 4, 1, 2637, 2, 1, 2224), )
if mibBuilder.loadTexts: iSDNLayer3TimersNttTable.setStatus('current')
iSDNLayer3TimersNttEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2637, 2, 1, 2224, 1), ).setIndexNames((0, "APTIS-CONFIG-MIB", "iSDNLayer3TimersNttPathString"))
if mibBuilder.loadTexts: iSDNLayer3TimersNttEntry.setStatus('current')
iSDNLayer3TimersNttPathString = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 2224, 1, 1), DisplayString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: iSDNLayer3TimersNttPathString.setStatus('current')
iSDNLayer3TimersNttRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 2224, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: iSDNLayer3TimersNttRowStatus.setStatus('current')
iSDNLayer3TimersNttKeyValue = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 2224, 1, 3), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: iSDNLayer3TimersNttKeyValue.setStatus('current')
iSDNLayer3TimersNttT302 = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 2224, 1, 11), Integer32().clone(15000)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: iSDNLayer3TimersNttT302.setStatus('current')
iSDNLayer3TimersNttT303 = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 2224, 1, 12), Integer32().clone(4000)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: iSDNLayer3TimersNttT303.setStatus('current')
iSDNLayer3TimersNttT304 = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 2224, 1, 13), Integer32().clone(30000)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: iSDNLayer3TimersNttT304.setStatus('current')
iSDNLayer3TimersNttT305 = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 2224, 1, 14), Integer32().clone(4000)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: iSDNLayer3TimersNttT305.setStatus('current')
iSDNLayer3TimersNttT306 = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 2224, 1, 15), Integer32().clone(30000)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: iSDNLayer3TimersNttT306.setStatus('current')
iSDNLayer3TimersNttT308 = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 2224, 1, 16), Integer32().clone(4000)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: iSDNLayer3TimersNttT308.setStatus('current')
iSDNLayer3TimersNttT309 = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 2224, 1, 17), Integer32().clone(90000)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: iSDNLayer3TimersNttT309.setStatus('current')
iSDNLayer3TimersNttT310 = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 2224, 1, 18), Integer32().clone(40000)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: iSDNLayer3TimersNttT310.setStatus('current')
iSDNLayer3TimersNttT312 = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 2224, 1, 19), Integer32().clone(6000)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: iSDNLayer3TimersNttT312.setStatus('current')
iSDNLayer3TimersNttT313 = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 2224, 1, 20), Integer32().clone(4000)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: iSDNLayer3TimersNttT313.setStatus('current')
iSDNLayer3TimersNttT316 = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 2224, 1, 21), Integer32().clone(120000)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: iSDNLayer3TimersNttT316.setStatus('current')
iSDNLayer3TimersNttT318 = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 2224, 1, 22), Integer32().clone(4000)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: iSDNLayer3TimersNttT318.setStatus('current')
iSDNLayer3TimersNttT319 = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 2224, 1, 23), Integer32().clone(4000)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: iSDNLayer3TimersNttT319.setStatus('current')
iSDNLayer3TimersNttT321 = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 2224, 1, 24), Integer32().clone(30000)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: iSDNLayer3TimersNttT321.setStatus('current')
iSDNLayer3TimersNttT322 = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 2224, 1, 25), Integer32().clone(4000)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: iSDNLayer3TimersNttT322.setStatus('current')
iSDNLayer3TimersNttT3m1 = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 2224, 1, 26), Integer32().clone(40000)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: iSDNLayer3TimersNttT3m1.setStatus('current')
l2FHomeGatewayTable = MibTable((1, 3, 6, 1, 4, 1, 2637, 2, 1, 1350), )
if mibBuilder.loadTexts: l2FHomeGatewayTable.setStatus('current')
l2FHomeGatewayEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2637, 2, 1, 1350, 1), ).setIndexNames((0, "APTIS-CONFIG-MIB", "l2FHomeGatewayPathString"))
if mibBuilder.loadTexts: l2FHomeGatewayEntry.setStatus('current')
l2FHomeGatewayPathString = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 1350, 1, 1), DisplayString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: l2FHomeGatewayPathString.setStatus('current')
l2FHomeGatewayRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 1350, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: l2FHomeGatewayRowStatus.setStatus('current')
l2FHomeGatewayKeyValue = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 1350, 1, 3), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: l2FHomeGatewayKeyValue.setStatus('current')
l2FHomeGatewayIPAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 1350, 1, 11), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: l2FHomeGatewayIPAddress.setStatus('current')
l2FHomeGatewayHostName = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 1350, 1, 12), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: l2FHomeGatewayHostName.setStatus('current')
l2FHomeGatewaySendName = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 1350, 1, 211), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: l2FHomeGatewaySendName.setStatus('current')
l2FHomeGatewaySendPassword = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 1350, 1, 212), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: l2FHomeGatewaySendPassword.setStatus('current')
l2FHomeGatewayReceiveName = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 1350, 1, 213), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: l2FHomeGatewayReceiveName.setStatus('current')
l2FHomeGatewayReceivePassword = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 1350, 1, 214), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: l2FHomeGatewayReceivePassword.setStatus('current')
l2FHomeGatewaySendChecksum = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 1350, 1, 313), Boolean().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: l2FHomeGatewaySendChecksum.setStatus('current')
l2FHomeGatewayCheckChecksum = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 1350, 1, 314), Boolean().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: l2FHomeGatewayCheckChecksum.setStatus('current')
l2FHomeGatewaySendUDPChecksum = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 1350, 1, 315), Boolean().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: l2FHomeGatewaySendUDPChecksum.setStatus('current')
l2FHomeGatewayEchoInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 1350, 1, 411), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 60)).clone(10)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: l2FHomeGatewayEchoInterval.setStatus('current')
l2FHomeGatewayEchoRetries = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 1350, 1, 412), Integer32().subtype(subtypeSpec=ValueRangeConstraint(2, 10)).clone(3)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: l2FHomeGatewayEchoRetries.setStatus('current')
l2TPLNSTable = MibTable((1, 3, 6, 1, 4, 1, 2637, 2, 1, 1503), )
if mibBuilder.loadTexts: l2TPLNSTable.setStatus('current')
l2TPLNSEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2637, 2, 1, 1503, 1), ).setIndexNames((0, "APTIS-CONFIG-MIB", "l2TPLNSPathString"))
if mibBuilder.loadTexts: l2TPLNSEntry.setStatus('current')
l2TPLNSPathString = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 1503, 1, 1), DisplayString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: l2TPLNSPathString.setStatus('current')
l2TPLNSRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 1503, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: l2TPLNSRowStatus.setStatus('current')
l2TPLNSKeyValue = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 1503, 1, 3), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: l2TPLNSKeyValue.setStatus('current')
l2TPLNSIPAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 1503, 1, 11), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: l2TPLNSIPAddress.setStatus('current')
l2TPLNSSourceIPAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 1503, 1, 12), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: l2TPLNSSourceIPAddress.setStatus('current')
l2TPLNSSendName = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 1503, 1, 212), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: l2TPLNSSendName.setStatus('current')
l2TPLNSSharedSecret = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 1503, 1, 214), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: l2TPLNSSharedSecret.setStatus('current')
l2TPLNSEnableUDPChecksum = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 1503, 1, 311), Boolean().clone('true')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: l2TPLNSEnableUDPChecksum.setStatus('current')
l2TPLNSHelloInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 1503, 1, 411), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 3600)).clone(60)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: l2TPLNSHelloInterval.setStatus('current')
l2TPLNSInitialAckTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 1503, 1, 412), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 15)).clone(1)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: l2TPLNSInitialAckTimeout.setStatus('current')
l2TPLNSMaxAckTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 1503, 1, 413), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 60)).clone(8)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: l2TPLNSMaxAckTimeout.setStatus('current')
l2TPLNSCtrlMsgRetries = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 1503, 1, 414), Integer32().subtype(subtypeSpec=ValueRangeConstraint(2, 10)).clone(5)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: l2TPLNSCtrlMsgRetries.setStatus('current')
l2TPLNSCtrlMsgRxWindow = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 1503, 1, 415), Integer32().subtype(subtypeSpec=ValueRangeConstraint(2, 100)).clone(40)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: l2TPLNSCtrlMsgRxWindow.setStatus('current')
leasedLineConfigTable = MibTable((1, 3, 6, 1, 4, 1, 2637, 2, 1, 2301), )
if mibBuilder.loadTexts: leasedLineConfigTable.setStatus('current')
leasedLineConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2637, 2, 1, 2301, 1), ).setIndexNames((0, "APTIS-CONFIG-MIB", "leasedLineConfigPathString"))
if mibBuilder.loadTexts: leasedLineConfigEntry.setStatus('current')
leasedLineConfigPathString = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 2301, 1, 1), DisplayString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: leasedLineConfigPathString.setStatus('current')
leasedLineConfigRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 2301, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: leasedLineConfigRowStatus.setStatus('current')
leasedLineConfigKeyValue = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 2301, 1, 3), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: leasedLineConfigKeyValue.setStatus('current')
leasedLineConfigAdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 2301, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2), ("pendingDisable", 3))).clone('enabled')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: leasedLineConfigAdminState.setStatus('current')
virtualLinkConfigTable = MibTable((1, 3, 6, 1, 4, 1, 2637, 2, 1, 2303), )
if mibBuilder.loadTexts: virtualLinkConfigTable.setStatus('current')
virtualLinkConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2637, 2, 1, 2303, 1), ).setIndexNames((0, "APTIS-CONFIG-MIB", "virtualLinkConfigPathString"))
if mibBuilder.loadTexts: virtualLinkConfigEntry.setStatus('current')
virtualLinkConfigPathString = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 2303, 1, 1), DisplayString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: virtualLinkConfigPathString.setStatus('current')
virtualLinkConfigRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 2303, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: virtualLinkConfigRowStatus.setStatus('current')
virtualLinkConfigKeyValue = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 2303, 1, 3), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: virtualLinkConfigKeyValue.setStatus('current')
virtualLinkConfigChannelPhyLink = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 2303, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 56)).clone(1)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: virtualLinkConfigChannelPhyLink.setStatus('current')
virtualLinkConfigChannelEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 2303, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disable", 1), ("enable", 2))).clone('disable')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: virtualLinkConfigChannelEnable.setStatus('current')
virtualLinkConfigChannelName = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 2303, 1, 13), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: virtualLinkConfigChannelName.setStatus('current')
virtualLinkConfigChannelMap = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 2303, 1, 14), Integer32().clone(16777215)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: virtualLinkConfigChannelMap.setStatus('current')
virtualLinkConfigChannelDelineation = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 2303, 1, 15), Boolean().clone('true')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: virtualLinkConfigChannelDelineation.setStatus('current')
virtualLinkConfigChannelCRCType = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 2303, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("crcNone", 0), ("crc16", 1), ("crc32", 2))).clone('crc16')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: virtualLinkConfigChannelCRCType.setStatus('current')
virtualLinkConfigChannelIdle = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 2303, 1, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("flagBytes", 0), ("hdlcIdle", 1))).clone('flagBytes')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: virtualLinkConfigChannelIdle.setStatus('current')
virtualLinkConfigChannelFCSInvert = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 2303, 1, 18), Boolean().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: virtualLinkConfigChannelFCSInvert.setStatus('current')
virtualLinkConfigChannelDataInvert = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 2303, 1, 19), Boolean().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: virtualLinkConfigChannelDataInvert.setStatus('current')
virtualLinkConfigChannelChannelisedLink = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 2303, 1, 20), Boolean().clone('true')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: virtualLinkConfigChannelChannelisedLink.setStatus('current')
virtualLinkConfigChannelByteSyncLink = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 2303, 1, 22), Boolean().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: virtualLinkConfigChannelByteSyncLink.setStatus('current')
virtualLinkConfigChannelRate = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 2303, 1, 23), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("chan56k", 0), ("chan64k", 1))).clone('chan64k')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: virtualLinkConfigChannelRate.setStatus('current')
virtualLinkConfigChannelQueueDepth = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 2303, 1, 24), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1000)).clone(40)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: virtualLinkConfigChannelQueueDepth.setStatus('current')
macConfigTable = MibTable((1, 3, 6, 1, 4, 1, 2637, 2, 1, 1401), )
if mibBuilder.loadTexts: macConfigTable.setStatus('current')
macConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2637, 2, 1, 1401, 1), ).setIndexNames((0, "APTIS-CONFIG-MIB", "macConfigPathString"))
if mibBuilder.loadTexts: macConfigEntry.setStatus('current')
macConfigPathString = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 1401, 1, 1), DisplayString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: macConfigPathString.setStatus('current')
macConfigRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 1401, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: macConfigRowStatus.setStatus('current')
macConfigKeyValue = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 1401, 1, 3), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: macConfigKeyValue.setStatus('current')
macConfigAdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 1401, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2), ("pendingDisable", 3))).clone('enabled')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: macConfigAdminState.setStatus('current')
iopConfigTable = MibTable((1, 3, 6, 1, 4, 1, 2637, 2, 1, 1431), )
if mibBuilder.loadTexts: iopConfigTable.setStatus('current')
iopConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2637, 2, 1, 1431, 1), ).setIndexNames((0, "APTIS-CONFIG-MIB", "iopConfigPathString"))
if mibBuilder.loadTexts: iopConfigEntry.setStatus('current')
iopConfigPathString = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 1431, 1, 1), DisplayString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: iopConfigPathString.setStatus('current')
iopConfigRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 1431, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: iopConfigRowStatus.setStatus('current')
iopConfigKeyValue = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 1431, 1, 3), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: iopConfigKeyValue.setStatus('current')
iopConfigAdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 1431, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2), ("pendingDisable", 3))).clone('enabled')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: iopConfigAdminState.setStatus('current')
iopConfigIOPImageName = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 1431, 1, 112), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: iopConfigIOPImageName.setStatus('current')
iopConfigModemImageName = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 1431, 1, 113), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: iopConfigModemImageName.setStatus('current')
dmmAdminConfigTable = MibTable((1, 3, 6, 1, 4, 1, 2637, 2, 1, 1441), )
if mibBuilder.loadTexts: dmmAdminConfigTable.setStatus('current')
dmmAdminConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2637, 2, 1, 1441, 1), ).setIndexNames((0, "APTIS-CONFIG-MIB", "dmmAdminConfigPathString"))
if mibBuilder.loadTexts: dmmAdminConfigEntry.setStatus('current')
dmmAdminConfigPathString = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 1441, 1, 1), DisplayString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: dmmAdminConfigPathString.setStatus('current')
dmmAdminConfigRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 1441, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: dmmAdminConfigRowStatus.setStatus('current')
dmmAdminConfigKeyValue = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 1441, 1, 3), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: dmmAdminConfigKeyValue.setStatus('current')
dmmAdminConfigAdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 1441, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2), ("pendingDisable", 3))).clone('enabled')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: dmmAdminConfigAdminState.setStatus('current')
packAdminConfigTable = MibTable((1, 3, 6, 1, 4, 1, 2637, 2, 1, 1461), )
if mibBuilder.loadTexts: packAdminConfigTable.setStatus('current')
packAdminConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2637, 2, 1, 1461, 1), ).setIndexNames((0, "APTIS-CONFIG-MIB", "packAdminConfigPathString"))
if mibBuilder.loadTexts: packAdminConfigEntry.setStatus('current')
packAdminConfigPathString = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 1461, 1, 1), DisplayString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: packAdminConfigPathString.setStatus('current')
packAdminConfigRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 1461, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: packAdminConfigRowStatus.setStatus('current')
packAdminConfigKeyValue = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 1461, 1, 3), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: packAdminConfigKeyValue.setStatus('current')
packAdminConfigAdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 1461, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2), ("pendingDisable", 3))).clone('enabled')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: packAdminConfigAdminState.setStatus('current')
modemAdminConfigTable = MibTable((1, 3, 6, 1, 4, 1, 2637, 2, 1, 1471), )
if mibBuilder.loadTexts: modemAdminConfigTable.setStatus('current')
modemAdminConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2637, 2, 1, 1471, 1), ).setIndexNames((0, "APTIS-CONFIG-MIB", "modemAdminConfigPathString"))
if mibBuilder.loadTexts: modemAdminConfigEntry.setStatus('current')
modemAdminConfigPathString = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 1471, 1, 1), DisplayString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: modemAdminConfigPathString.setStatus('current')
modemAdminConfigRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 1471, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: modemAdminConfigRowStatus.setStatus('current')
modemAdminConfigKeyValue = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 1471, 1, 3), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: modemAdminConfigKeyValue.setStatus('current')
modemAdminConfigAdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 1471, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2), ("pendingDisable", 3))).clone('enabled')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: modemAdminConfigAdminState.setStatus('current')
modemConfigTable = MibTable((1, 3, 6, 1, 4, 1, 2637, 2, 1, 1421), )
if mibBuilder.loadTexts: modemConfigTable.setStatus('current')
modemConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2637, 2, 1, 1421, 1), ).setIndexNames((0, "APTIS-CONFIG-MIB", "modemConfigPathString"))
if mibBuilder.loadTexts: modemConfigEntry.setStatus('current')
modemConfigPathString = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 1421, 1, 1), DisplayString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: modemConfigPathString.setStatus('current')
modemConfigRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 1421, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: modemConfigRowStatus.setStatus('current')
modemConfigKeyValue = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 1421, 1, 3), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: modemConfigKeyValue.setStatus('current')
modemConfigAnswerString = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 1421, 1, 111), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: modemConfigAnswerString.setStatus('current')
modemConfigCallString = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 1421, 1, 112), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: modemConfigCallString.setStatus('current')
modemConfigPhoneNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 1421, 1, 113), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: modemConfigPhoneNumber.setStatus('current')
modemConfigMinConnectSpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 1421, 1, 211), Integer32().subtype(subtypeSpec=ValueRangeConstraint(300, 56000)).clone(9600)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: modemConfigMinConnectSpeed.setStatus('current')
modemConfigMaxConnectSpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 1421, 1, 212), Integer32().subtype(subtypeSpec=ValueRangeConstraint(300, 56000)).clone(56000)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: modemConfigMaxConnectSpeed.setStatus('current')
modemConfigFlowControl = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 1421, 1, 311), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("none", 0), ("hardware", 1), ("software", 2))).clone('hardware')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: modemConfigFlowControl.setStatus('current')
modemConfigConnectTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 1421, 1, 411), Integer32().subtype(subtypeSpec=ValueRangeConstraint(10000, 120000)).clone(60000)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: modemConfigConnectTimeout.setStatus('current')
modemConfigDetectProtocol = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 1421, 1, 511), Boolean().clone('true')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: modemConfigDetectProtocol.setStatus('current')
modemConfigDetectDefault = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 1421, 1, 512), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("ppp", 1), ("shell", 2))).clone('shell')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: modemConfigDetectDefault.setStatus('current')
modemConfigDetectTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 1421, 1, 513), Integer32().subtype(subtypeSpec=ValueRangeConstraint(500, 30000)).clone(3500)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: modemConfigDetectTimeout.setStatus('current')
modemConfigVoicePcmCoding = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 1421, 1, 711), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("alaw", 0), ("ulaw", 1))).clone('ulaw')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: modemConfigVoicePcmCoding.setStatus('current')
modemConfigVoiceSilenceHandling = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 1421, 1, 712), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("comfort", 0), ("silence", 1))).clone('comfort')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: modemConfigVoiceSilenceHandling.setStatus('current')
modemConfigVoiceFrameGeneration = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 1421, 1, 713), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 0))).clone(namedValues=NamedValues(("disable", 1), ("enable", 0))).clone('enable')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: modemConfigVoiceFrameGeneration.setStatus('current')
modemConfigVoiceG723Rate = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 1421, 1, 714), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("high", 0), ("low", 1))).clone('high')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: modemConfigVoiceG723Rate.setStatus('current')
modemConfigVoiceAdaptivePostfilter = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 1421, 1, 715), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1))).clone('enable')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: modemConfigVoiceAdaptivePostfilter.setStatus('current')
modemConfigVoiceActivityDetect = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 1421, 1, 716), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1), ("pt13", 2), ("nosilence", 3))).clone('enable')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: modemConfigVoiceActivityDetect.setStatus('current')
modemConfigVoicePacketInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 1421, 1, 717), Integer32().subtype(subtypeSpec=ValueRangeConstraint(5, 200)).clone(20)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: modemConfigVoicePacketInterval.setStatus('current')
modemConfigVoiceDtmfVoice = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 1421, 1, 718), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1))).clone('enable')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: modemConfigVoiceDtmfVoice.setStatus('current')
modemConfigVoiceDtmfPayloads = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 1421, 1, 719), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1))).clone('disable')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: modemConfigVoiceDtmfPayloads.setStatus('current')
modemConfigVoiceDtmfPayloadType = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 1421, 1, 720), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255)).clone(96)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: modemConfigVoiceDtmfPayloadType.setStatus('current')
modemConfigVoiceDtmfRedundantType = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 1421, 1, 721), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255)).clone(97)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: modemConfigVoiceDtmfRedundantType.setStatus('current')
modemConfigVoiceDgainPackettoPCM = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 1421, 1, 722), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: modemConfigVoiceDgainPackettoPCM.setStatus('current')
modemConfigVoiceDgainPCMtoPacket = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 1421, 1, 723), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: modemConfigVoiceDgainPCMtoPacket.setStatus('current')
modemConfigVoiceEchoTail = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 1421, 1, 724), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 128)).clone(64)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: modemConfigVoiceEchoTail.setStatus('current')
modemConfigVoiceEchoRxMute = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 1421, 1, 725), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("normal", 0), ("mute", 1))).clone('normal')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: modemConfigVoiceEchoRxMute.setStatus('current')
modemConfigVoiceEchoTxMute = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 1421, 1, 726), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("normal", 0), ("mute", 1))).clone('normal')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: modemConfigVoiceEchoTxMute.setStatus('current')
modemConfigVoiceEchoTxFixedGain = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 1421, 1, 727), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("nlp", 0), ("fixed", 1))).clone('nlp')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: modemConfigVoiceEchoTxFixedGain.setStatus('current')
modemConfigVoiceEchoCoeffFreeze = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 1421, 1, 728), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("update", 0), ("freeze", 1))).clone('update')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: modemConfigVoiceEchoCoeffFreeze.setStatus('current')
modemConfigVoiceEchoReset = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 1421, 1, 729), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1))).clone('enable')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: modemConfigVoiceEchoReset.setStatus('current')
modemConfigVoiceEchoDisable = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 1421, 1, 730), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 0))).clone(namedValues=NamedValues(("disable", 1), ("enable", 0))).clone('enable')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: modemConfigVoiceEchoDisable.setStatus('current')
modemConfigVoiceEchoMasterEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 1421, 1, 731), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1))).clone('enable')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: modemConfigVoiceEchoMasterEnable.setStatus('current')
modemConfigVoiceLatePacketMax = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 1421, 1, 732), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 200)).clone(200)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: modemConfigVoiceLatePacketMax.setStatus('current')
modemConfigVoiceLatePacketMin = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 1421, 1, 733), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 200)).clone(20)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: modemConfigVoiceLatePacketMin.setStatus('current')
modemConfigVoiceLatePacketWin = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 1421, 1, 734), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 200)).clone(20)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: modemConfigVoiceLatePacketWin.setStatus('current')
modemConfigVoiceLatePacketRatio = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 1421, 1, 735), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: modemConfigVoiceLatePacketRatio.setStatus('current')
modemConfigVoiceFaxModemAutoswitch = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 1421, 1, 736), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1))).clone('enable')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: modemConfigVoiceFaxModemAutoswitch.setStatus('current')
modemConfigVoicePayloadTypeAutoswitch = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 1421, 1, 737), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1))).clone('disable')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: modemConfigVoicePayloadTypeAutoswitch.setStatus('current')
modemConfigVoiceAutoswitchPacketSize = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 1421, 1, 738), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 200)).clone(100)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: modemConfigVoiceAutoswitchPacketSize.setStatus('current')
modemConfigVoiceNoPathTeardown = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 1421, 1, 739), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100000))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: modemConfigVoiceNoPathTeardown.setStatus('current')
modemConfigVoiceRtcpPeriod = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 1421, 1, 740), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100000))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: modemConfigVoiceRtcpPeriod.setStatus('current')
modemConfigVoiceStatsPeriod = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 1421, 1, 741), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100000))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: modemConfigVoiceStatsPeriod.setStatus('current')
modemConfigVoiceDspPatch = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 1421, 1, 750), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1))).clone('disable')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: modemConfigVoiceDspPatch.setStatus('current')
modemConfigVoiceDspPatchString = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 1421, 1, 751), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 512))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: modemConfigVoiceDspPatchString.setStatus('current')
udlConfigTable = MibTable((1, 3, 6, 1, 4, 1, 2637, 2, 1, 4053), )
if mibBuilder.loadTexts: udlConfigTable.setStatus('current')
udlConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2637, 2, 1, 4053, 1), ).setIndexNames((0, "APTIS-CONFIG-MIB", "udlConfigPathString"))
if mibBuilder.loadTexts: udlConfigEntry.setStatus('current')
udlConfigPathString = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 4053, 1, 1), DisplayString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: udlConfigPathString.setStatus('current')
udlConfigRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 4053, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: udlConfigRowStatus.setStatus('current')
udlConfigKeyValue = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 4053, 1, 3), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: udlConfigKeyValue.setStatus('current')
udlConfigEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 4053, 1, 11), Boolean().clone('true')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: udlConfigEnabled.setStatus('current')
udlConfigIpaddress = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 4053, 1, 12), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: udlConfigIpaddress.setStatus('current')
udlConfigIpmask = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 4053, 1, 13), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: udlConfigIpmask.setStatus('current')
udlConfigDumpserver = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 4053, 1, 14), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: udlConfigDumpserver.setStatus('current')
udlConfigDumpfile = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 4053, 1, 15), DisplayString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: udlConfigDumpfile.setStatus('current')
pppConfigTable = MibTable((1, 3, 6, 1, 4, 1, 2637, 2, 1, 1313), )
if mibBuilder.loadTexts: pppConfigTable.setStatus('current')
pppConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2637, 2, 1, 1313, 1), ).setIndexNames((0, "APTIS-CONFIG-MIB", "pppConfigPathString"))
if mibBuilder.loadTexts: pppConfigEntry.setStatus('current')
pppConfigPathString = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 1313, 1, 1), DisplayString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pppConfigPathString.setStatus('current')
pppConfigRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 1313, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pppConfigRowStatus.setStatus('current')
pppConfigKeyValue = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 1313, 1, 3), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pppConfigKeyValue.setStatus('current')
pppConfigEstablishTimeLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 1313, 1, 111), Integer32().subtype(subtypeSpec=ValueRangeConstraint(10000, 300000)).clone(120000)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pppConfigEstablishTimeLimit.setStatus('current')
pppConfigConnectLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 1313, 1, 112), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pppConfigConnectLimit.setStatus('current')
pppConfigInactivityLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 1313, 1, 113), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 120))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pppConfigInactivityLimit.setStatus('current')
pppConfigMonitorTxActivity = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 1313, 1, 114), Boolean().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pppConfigMonitorTxActivity.setStatus('current')
pppConfigMonitorRxActivity = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 1313, 1, 115), Boolean().clone('true')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pppConfigMonitorRxActivity.setStatus('current')
pppConfigCountRIP = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 1313, 1, 116), Boolean().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pppConfigCountRIP.setStatus('current')
pppConfigCountPings = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 1313, 1, 117), Boolean().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pppConfigCountPings.setStatus('current')
pppConfigCountIGMP = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 1313, 1, 118), Boolean().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pppConfigCountIGMP.setStatus('current')
pppConfigUseEchoes = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 1313, 1, 211), Boolean().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pppConfigUseEchoes.setStatus('current')
pppConfigSendID = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 1313, 1, 212), Boolean().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pppConfigSendID.setStatus('current')
pppConfigSendTimeRemaining = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 1313, 1, 213), Boolean().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pppConfigSendTimeRemaining.setStatus('current')
pppConfigSendMRU = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 1313, 1, 311), Boolean().clone('true')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pppConfigSendMRU.setStatus('current')
pppConfigSendACCM = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 1313, 1, 312), Boolean().clone('true')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pppConfigSendACCM.setStatus('current')
pppConfigSendMagic = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 1313, 1, 313), Boolean().clone('true')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pppConfigSendMagic.setStatus('current')
pppConfigSendPFC = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 1313, 1, 314), Boolean().clone('true')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pppConfigSendPFC.setStatus('current')
pppConfigSendACFC = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 1313, 1, 315), Boolean().clone('true')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pppConfigSendACFC.setStatus('current')
pppConfigSendShortSeq = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 1313, 1, 316), Boolean().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pppConfigSendShortSeq.setStatus('current')
pppConfigSendEndpointDisc = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 1313, 1, 317), Boolean().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pppConfigSendEndpointDisc.setStatus('current')
pppConfigAllowMRU = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 1313, 1, 321), Boolean().clone('true')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pppConfigAllowMRU.setStatus('current')
pppConfigAllowACCM = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 1313, 1, 322), Boolean().clone('true')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pppConfigAllowACCM.setStatus('current')
pppConfigAllowMagic = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 1313, 1, 323), Boolean().clone('true')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pppConfigAllowMagic.setStatus('current')
pppConfigAllowPFC = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 1313, 1, 324), Boolean().clone('true')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pppConfigAllowPFC.setStatus('current')
pppConfigAllowACFC = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 1313, 1, 325), Boolean().clone('true')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pppConfigAllowACFC.setStatus('current')
pppConfigAllowShortSeq = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 1313, 1, 326), Boolean().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pppConfigAllowShortSeq.setStatus('current')
pppConfigAllowEndpointDisc = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 1313, 1, 327), Boolean().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pppConfigAllowEndpointDisc.setStatus('current')
pppConfigLCPMaxConfigure = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 1313, 1, 411), Integer32().subtype(subtypeSpec=ValueRangeConstraint(4, 20)).clone(10)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pppConfigLCPMaxConfigure.setStatus('current')
pppConfigLCPRestartTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 1313, 1, 412), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1000, 10000)).clone(3000)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pppConfigLCPRestartTimer.setStatus('current')
pppConfigPassiveLCP = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 1313, 1, 413), Boolean().clone('true')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pppConfigPassiveLCP.setStatus('current')
pppConfigPassiveLCPTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 1313, 1, 414), Integer32().subtype(subtypeSpec=ValueRangeConstraint(50, 3000)).clone(150)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pppConfigPassiveLCPTimeout.setStatus('current')
pppConfigMinRemoteMRU = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 1313, 1, 511), Integer32().subtype(subtypeSpec=ValueRangeConstraint(576, 1518)).clone(1500)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pppConfigMinRemoteMRU.setStatus('current')
pppConfigMinLocalMRU = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 1313, 1, 512), Integer32().subtype(subtypeSpec=ValueRangeConstraint(576, 1500)).clone(1500)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pppConfigMinLocalMRU.setStatus('current')
pppConfigDesiredLocalMRU = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 1313, 1, 513), Integer32().subtype(subtypeSpec=ValueRangeConstraint(576, 1536)).clone(1500)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pppConfigDesiredLocalMRU.setStatus('current')
pppConfigTransmitACCM = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 1313, 1, 514), Integer32().clone(655360)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pppConfigTransmitACCM.setStatus('current')
pppConfigReceiveACCM = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 1313, 1, 515), Integer32().clone(655360)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pppConfigReceiveACCM.setStatus('current')
pppConfigMinRemoteMRRU = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 1313, 1, 516), Integer32().subtype(subtypeSpec=ValueRangeConstraint(576, 1518)).clone(1500)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pppConfigMinRemoteMRRU.setStatus('current')
pppConfigDesiredRemoteMRRU = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 1313, 1, 517), Integer32().subtype(subtypeSpec=ValueRangeConstraint(576, 1518)).clone(1506)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pppConfigDesiredRemoteMRRU.setStatus('current')
pppConfigMinLocalMRRU = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 1313, 1, 518), Integer32().subtype(subtypeSpec=ValueRangeConstraint(576, 1518)).clone(1500)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pppConfigMinLocalMRRU.setStatus('current')
pppConfigDesiredLocalMRRU = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 1313, 1, 519), Integer32().subtype(subtypeSpec=ValueRangeConstraint(576, 1518)).clone(1506)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pppConfigDesiredLocalMRRU.setStatus('current')
pppConfigLCPEchoRetries = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 1313, 1, 520), Integer32().clone(5)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pppConfigLCPEchoRetries.setStatus('current')
pppConfigLCPEchoTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 1313, 1, 521), Integer32().subtype(subtypeSpec=ValueRangeConstraint(30000, 600000)).clone(60000)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pppConfigLCPEchoTimeout.setStatus('current')
pppConfigLCPEchoErrorTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 1313, 1, 522), Integer32().subtype(subtypeSpec=ValueRangeConstraint(10000, 60000)).clone(15000)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pppConfigLCPEchoErrorTimeout.setStatus('current')
pppConfigTimeRemainingInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 1313, 1, 523), Integer32().subtype(subtypeSpec=ValueRangeConstraint(300000, 1200000)).clone(300000)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pppConfigTimeRemainingInterval.setStatus('current')
pppConfigIDText = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 1313, 1, 524), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pppConfigIDText.setStatus('current')
pppConfigAuthRequire = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 1313, 1, 611), Boolean().clone('true')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pppConfigAuthRequire.setStatus('current')
pppConfigAuthAllow = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 1313, 1, 612), Boolean().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pppConfigAuthAllow.setStatus('current')
pppConfigAuthServerProtocol1 = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 1313, 1, 620), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 49699, 49187))).clone(namedValues=NamedValues(("none", 0), ("chap", 49699), ("pap", 49187))).clone('chap')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pppConfigAuthServerProtocol1.setStatus('current')
pppConfigAuthServerProtocol2 = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 1313, 1, 621), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 49699, 49187))).clone(namedValues=NamedValues(("none", 0), ("chap", 49699), ("pap", 49187))).clone('none')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pppConfigAuthServerProtocol2.setStatus('current')
pppConfigAuthServerProtocol3 = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 1313, 1, 622), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 49699, 49187))).clone(namedValues=NamedValues(("none", 0), ("chap", 49699), ("pap", 49187))).clone('none')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pppConfigAuthServerProtocol3.setStatus('current')
pppConfigAuthServerProtocol4 = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 1313, 1, 623), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 49699, 49187))).clone(namedValues=NamedValues(("none", 0), ("chap", 49699), ("pap", 49187))).clone('none')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pppConfigAuthServerProtocol4.setStatus('current')
pppConfigAuthClientProtocol1 = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 1313, 1, 631), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 49699, 49187))).clone(namedValues=NamedValues(("none", 0), ("chap", 49699), ("pap", 49187))).clone('chap')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pppConfigAuthClientProtocol1.setStatus('current')
pppConfigAuthClientProtocol2 = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 1313, 1, 632), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 49699, 49187))).clone(namedValues=NamedValues(("none", 0), ("chap", 49699), ("pap", 49187))).clone('none')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pppConfigAuthClientProtocol2.setStatus('current')
pppConfigAuthClientProtocol3 = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 1313, 1, 633), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 49699, 49187))).clone(namedValues=NamedValues(("none", 0), ("chap", 49699), ("pap", 49187))).clone('none')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pppConfigAuthClientProtocol3.setStatus('current')
pppConfigAuthClientProtocol4 = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 1313, 1, 634), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 49699, 49187))).clone(namedValues=NamedValues(("none", 0), ("chap", 49699), ("pap", 49187))).clone('none')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pppConfigAuthClientProtocol4.setStatus('current')
pppConfigPAPClientRetries = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 1313, 1, 641), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 10)).clone(5)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pppConfigPAPClientRetries.setStatus('current')
pppConfigPAPClientTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 1313, 1, 642), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1000, 10000)).clone(3000)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pppConfigPAPClientTimeout.setStatus('current')
pppConfigPAPServerRetries = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 1313, 1, 643), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 10)).clone(1)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pppConfigPAPServerRetries.setStatus('current')
pppConfigPAPServerTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 1313, 1, 644), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1000, 10000)).clone(3000)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pppConfigPAPServerTimeout.setStatus('current')
pppConfigCHAPClientRetries = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 1313, 1, 651), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 10)).clone(5)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pppConfigCHAPClientRetries.setStatus('current')
pppConfigCHAPClientTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 1313, 1, 652), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1000, 10000)).clone(3000)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pppConfigCHAPClientTimeout.setStatus('current')
pppConfigCHAPServerRetries = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 1313, 1, 653), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 10)).clone(1)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pppConfigCHAPServerRetries.setStatus('current')
pppConfigCHAPServerChallenges = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 1313, 1, 654), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 10)).clone(5)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pppConfigCHAPServerChallenges.setStatus('current')
pppConfigCHAPServerTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 1313, 1, 655), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1000, 10000)).clone(3000)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pppConfigCHAPServerTimeout.setStatus('current')
pppConfigCHAPValueLength = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 1313, 1, 656), Integer32().subtype(subtypeSpec=ValueRangeConstraint(16, 64)).clone(16)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pppConfigCHAPValueLength.setStatus('current')
pppConfigAuthFailureRenegotiatesLCP = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 1313, 1, 657), Boolean().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pppConfigAuthFailureRenegotiatesLCP.setStatus('current')
pppConfigUserName = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 1313, 1, 661), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pppConfigUserName.setStatus('current')
pppConfigPassword = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 1313, 1, 662), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pppConfigPassword.setStatus('current')
pppConfigIPCPEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 1313, 1, 711), Boolean().clone('true')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pppConfigIPCPEnabled.setStatus('current')
pppConfigLocalIPAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 1313, 1, 712), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pppConfigLocalIPAddress.setStatus('current')
pppConfigRemoteIPAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 1313, 1, 713), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pppConfigRemoteIPAddress.setStatus('current')
pppConfigAllowPeerIPAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 1313, 1, 714), Boolean().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pppConfigAllowPeerIPAddress.setStatus('current')
pppConfigVJEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 1313, 1, 715), Boolean().clone('true')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pppConfigVJEnabled.setStatus('current')
pppConfigVJSlots = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 1313, 1, 716), Integer32().subtype(subtypeSpec=ValueRangeConstraint(4, 32)).clone(16)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pppConfigVJSlots.setStatus('current')
pppConfigSendDNS = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 1313, 1, 717), Boolean().clone('true')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pppConfigSendDNS.setStatus('current')
pppConfigSendNBNS = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 1313, 1, 718), Boolean().clone('true')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pppConfigSendNBNS.setStatus('current')
pppConfigIPCPMaxConfigure = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 1313, 1, 719), Integer32().subtype(subtypeSpec=ValueRangeConstraint(4, 20)).clone(10)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pppConfigIPCPMaxConfigure.setStatus('current')
pppConfigIPCPRestartTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 1313, 1, 720), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1000, 10000)).clone(3000)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pppConfigIPCPRestartTimer.setStatus('current')
pppConfigPassiveIPCP = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 1313, 1, 721), Boolean().clone('true')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pppConfigPassiveIPCP.setStatus('current')
pppConfigPassiveIPCPTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 1313, 1, 722), Integer32().subtype(subtypeSpec=ValueRangeConstraint(50, 3000)).clone(150)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pppConfigPassiveIPCPTimeout.setStatus('current')
pppConfigDNS1 = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 1313, 1, 723), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pppConfigDNS1.setStatus('current')
pppConfigDNS2 = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 1313, 1, 724), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pppConfigDNS2.setStatus('current')
pppConfigNBNS1 = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 1313, 1, 725), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pppConfigNBNS1.setStatus('current')
pppConfigNBNS2 = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 1313, 1, 726), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pppConfigNBNS2.setStatus('current')
pppConfigSendLocalIPAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 1313, 1, 727), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("never", 0), ("requested", 1), ("always", 2))).clone('requested')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pppConfigSendLocalIPAddress.setStatus('current')
pppConfigPeerNSStrategy = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 1313, 1, 729), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("ignore", 0), ("ack", 1), ("reject", 2))).clone('ignore')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pppConfigPeerNSStrategy.setStatus('current')
pppConfigMLPEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 1313, 1, 811), Boolean().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pppConfigMLPEnabled.setStatus('current')
pppConfigMLPMaxLinks = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 1313, 1, 812), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 8)).clone(2)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pppConfigMLPMaxLinks.setStatus('current')
pppConfigMLPFragmentSize = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 1313, 1, 813), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1500)).clone(42)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pppConfigMLPFragmentSize.setStatus('current')
pppConfigMLPMaxFragments = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 1313, 1, 814), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4)).clone(2)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pppConfigMLPMaxFragments.setStatus('current')
pppConfigMLPScaleFragments = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 1313, 1, 815), Boolean().clone('true')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pppConfigMLPScaleFragments.setStatus('current')
pppConfigMLPSendNullFragments = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 1313, 1, 816), Boolean().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pppConfigMLPSendNullFragments.setStatus('current')
pppConfigMLPNullFragmentTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 1313, 1, 817), Integer32().subtype(subtypeSpec=ValueRangeConstraint(10, 3600)).clone(120)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pppConfigMLPNullFragmentTimeout.setStatus('current')
pppConfigMLPEndpointDisc = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 1313, 1, 818), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("mACAddress", 0), ("groupNumber", 1))).clone('mACAddress')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pppConfigMLPEndpointDisc.setStatus('current')
pppConfigMLPGroupNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 1313, 1, 819), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 999999))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pppConfigMLPGroupNumber.setStatus('current')
pppConfigLogEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 1313, 1, 911), Boolean().clone('true')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pppConfigLogEnabled.setStatus('current')
pppConfigLogDump = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 1313, 1, 912), Boolean().clone('true')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pppConfigLogDump.setStatus('current')
pppConfigLogSize = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 1313, 1, 920), Integer32().subtype(subtypeSpec=ValueRangeConstraint(64, 1024)).clone(128)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pppConfigLogSize.setStatus('current')
pppConfigLogControlFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 1313, 1, 921), Boolean().clone('true')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pppConfigLogControlFrames.setStatus('current')
pppConfigLogProtocolFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 1313, 1, 922), Boolean().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pppConfigLogProtocolFrames.setStatus('current')
pppConfigLogOptions = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 1313, 1, 923), Boolean().clone('true')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pppConfigLogOptions.setStatus('current')
pppConfigLogStates = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 1313, 1, 924), Boolean().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pppConfigLogStates.setStatus('current')
pppConfigLogCompression = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 1313, 1, 925), Boolean().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pppConfigLogCompression.setStatus('current')
pppConfigLogMLP = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 1313, 1, 926), Boolean().clone('true')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pppConfigLogMLP.setStatus('current')
pppConfigLogVJ = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 1313, 1, 927), Boolean().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pppConfigLogVJ.setStatus('current')
pppConfigCCPEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 1313, 1, 1011), Boolean().clone('true')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pppConfigCCPEnabled.setStatus('current')
pppConfigCompressFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 1313, 1, 1012), Boolean().clone('true')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pppConfigCompressFrames.setStatus('current')
pppConfigStac3Enabled = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 1313, 1, 1013), Boolean().clone('true')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pppConfigStac3Enabled.setStatus('current')
pppConfigStac4Enabled = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 1313, 1, 1014), Boolean().clone('true')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pppConfigStac4Enabled.setStatus('current')
pppConfigMPPCEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 1313, 1, 1015), Boolean().clone('true')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pppConfigMPPCEnabled.setStatus('current')
pppConfigStacPerformance = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 1313, 1, 1016), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255)).clone(3)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pppConfigStacPerformance.setStatus('current')
pppConfigStacMode = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 1313, 1, 1017), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pppConfigStacMode.setStatus('current')
pppConfigIPXCPEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 1313, 1, 1111), Boolean().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pppConfigIPXCPEnabled.setStatus('current')
pppConfigIPXNetworkNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 1313, 1, 1112), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pppConfigIPXNetworkNumber.setStatus('current')
pppConfigIPXNodeNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 1313, 1, 1113), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pppConfigIPXNodeNumber.setStatus('current')
pppModemConfigTable = MibTable((1, 3, 6, 1, 4, 1, 2637, 2, 1, 1314), )
if mibBuilder.loadTexts: pppModemConfigTable.setStatus('current')
pppModemConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2637, 2, 1, 1314, 1), ).setIndexNames((0, "APTIS-CONFIG-MIB", "pppModemConfigPathString"))
if mibBuilder.loadTexts: pppModemConfigEntry.setStatus('current')
pppModemConfigPathString = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 1314, 1, 1), DisplayString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pppModemConfigPathString.setStatus('current')
pppModemConfigRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 1314, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pppModemConfigRowStatus.setStatus('current')
pppModemConfigKeyValue = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 1314, 1, 3), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pppModemConfigKeyValue.setStatus('current')
pppModemConfigEstablishTimeLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 1314, 1, 111), Integer32().subtype(subtypeSpec=ValueRangeConstraint(10000, 300000)).clone(120000)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pppModemConfigEstablishTimeLimit.setStatus('current')
pppModemConfigConnectLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 1314, 1, 112), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pppModemConfigConnectLimit.setStatus('current')
pppModemConfigInactivityLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 1314, 1, 113), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 120))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pppModemConfigInactivityLimit.setStatus('current')
pppModemConfigMonitorTxActivity = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 1314, 1, 114), Boolean().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pppModemConfigMonitorTxActivity.setStatus('current')
pppModemConfigMonitorRxActivity = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 1314, 1, 115), Boolean().clone('true')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pppModemConfigMonitorRxActivity.setStatus('current')
pppModemConfigCountRIP = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 1314, 1, 116), Boolean().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pppModemConfigCountRIP.setStatus('current')
pppModemConfigCountPings = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 1314, 1, 117), Boolean().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pppModemConfigCountPings.setStatus('current')
pppModemConfigCountIGMP = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 1314, 1, 118), Boolean().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pppModemConfigCountIGMP.setStatus('current')
pppModemConfigUseEchoes = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 1314, 1, 211), Boolean().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pppModemConfigUseEchoes.setStatus('current')
pppModemConfigSendID = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 1314, 1, 212), Boolean().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pppModemConfigSendID.setStatus('current')
pppModemConfigSendTimeRemaining = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 1314, 1, 213), Boolean().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pppModemConfigSendTimeRemaining.setStatus('current')
pppModemConfigSendMRU = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 1314, 1, 311), Boolean().clone('true')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pppModemConfigSendMRU.setStatus('current')
pppModemConfigSendACCM = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 1314, 1, 312), Boolean().clone('true')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pppModemConfigSendACCM.setStatus('current')
pppModemConfigSendMagic = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 1314, 1, 313), Boolean().clone('true')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pppModemConfigSendMagic.setStatus('current')
pppModemConfigSendPFC = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 1314, 1, 314), Boolean().clone('true')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pppModemConfigSendPFC.setStatus('current')
pppModemConfigSendACFC = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 1314, 1, 315), Boolean().clone('true')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pppModemConfigSendACFC.setStatus('current')
pppModemConfigSendShortSeq = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 1314, 1, 316), Boolean().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pppModemConfigSendShortSeq.setStatus('current')
pppModemConfigSendEndpointDisc = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 1314, 1, 317), Boolean().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pppModemConfigSendEndpointDisc.setStatus('current')
pppModemConfigAllowMRU = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 1314, 1, 321), Boolean().clone('true')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pppModemConfigAllowMRU.setStatus('current')
pppModemConfigAllowACCM = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 1314, 1, 322), Boolean().clone('true')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pppModemConfigAllowACCM.setStatus('current')
pppModemConfigAllowMagic = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 1314, 1, 323), Boolean().clone('true')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pppModemConfigAllowMagic.setStatus('current')
pppModemConfigAllowPFC = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 1314, 1, 324), Boolean().clone('true')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pppModemConfigAllowPFC.setStatus('current')
pppModemConfigAllowACFC = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 1314, 1, 325), Boolean().clone('true')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pppModemConfigAllowACFC.setStatus('current')
pppModemConfigAllowShortSeq = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 1314, 1, 326), Boolean().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pppModemConfigAllowShortSeq.setStatus('current')
pppModemConfigAllowEndpointDisc = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 1314, 1, 327), Boolean().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pppModemConfigAllowEndpointDisc.setStatus('current')
pppModemConfigLCPMaxConfigure = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 1314, 1, 411), Integer32().subtype(subtypeSpec=ValueRangeConstraint(4, 20)).clone(10)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pppModemConfigLCPMaxConfigure.setStatus('current')
pppModemConfigLCPRestartTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 1314, 1, 412), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1000, 10000)).clone(3000)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pppModemConfigLCPRestartTimer.setStatus('current')
pppModemConfigPassiveLCP = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 1314, 1, 413), Boolean().clone('true')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pppModemConfigPassiveLCP.setStatus('current')
pppModemConfigPassiveLCPTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 1314, 1, 414), Integer32().subtype(subtypeSpec=ValueRangeConstraint(50, 3000)).clone(150)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pppModemConfigPassiveLCPTimeout.setStatus('current')
pppModemConfigMinRemoteMRU = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 1314, 1, 511), Integer32().subtype(subtypeSpec=ValueRangeConstraint(576, 1518)).clone(1500)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pppModemConfigMinRemoteMRU.setStatus('current')
pppModemConfigMinLocalMRU = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 1314, 1, 512), Integer32().subtype(subtypeSpec=ValueRangeConstraint(576, 1500)).clone(1500)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pppModemConfigMinLocalMRU.setStatus('current')
pppModemConfigDesiredLocalMRU = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 1314, 1, 513), Integer32().subtype(subtypeSpec=ValueRangeConstraint(576, 1536)).clone(1500)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pppModemConfigDesiredLocalMRU.setStatus('current')
pppModemConfigTransmitACCM = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 1314, 1, 514), Integer32().clone(655360)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pppModemConfigTransmitACCM.setStatus('current')
pppModemConfigReceiveACCM = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 1314, 1, 515), Integer32().clone(655360)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pppModemConfigReceiveACCM.setStatus('current')
pppModemConfigMinRemoteMRRU = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 1314, 1, 516), Integer32().subtype(subtypeSpec=ValueRangeConstraint(576, 1518)).clone(1500)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pppModemConfigMinRemoteMRRU.setStatus('current')
pppModemConfigDesiredRemoteMRRU = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 1314, 1, 517), Integer32().subtype(subtypeSpec=ValueRangeConstraint(576, 1518)).clone(1506)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pppModemConfigDesiredRemoteMRRU.setStatus('current')
pppModemConfigMinLocalMRRU = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 1314, 1, 518), Integer32().subtype(subtypeSpec=ValueRangeConstraint(576, 1518)).clone(1500)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pppModemConfigMinLocalMRRU.setStatus('current')
pppModemConfigDesiredLocalMRRU = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 1314, 1, 519), Integer32().subtype(subtypeSpec=ValueRangeConstraint(576, 1518)).clone(1506)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pppModemConfigDesiredLocalMRRU.setStatus('current')
pppModemConfigLCPEchoRetries = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 1314, 1, 520), Integer32().clone(5)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pppModemConfigLCPEchoRetries.setStatus('current')
pppModemConfigLCPEchoTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 1314, 1, 521), Integer32().subtype(subtypeSpec=ValueRangeConstraint(30000, 600000)).clone(60000)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pppModemConfigLCPEchoTimeout.setStatus('current')
pppModemConfigLCPEchoErrorTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 1314, 1, 522), Integer32().subtype(subtypeSpec=ValueRangeConstraint(10000, 60000)).clone(15000)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pppModemConfigLCPEchoErrorTimeout.setStatus('current')
pppModemConfigTimeRemainingInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 1314, 1, 523), Integer32().subtype(subtypeSpec=ValueRangeConstraint(300000, 1200000)).clone(300000)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pppModemConfigTimeRemainingInterval.setStatus('current')
pppModemConfigIDText = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 1314, 1, 524), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pppModemConfigIDText.setStatus('current')
pppModemConfigAuthRequire = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 1314, 1, 611), Boolean().clone('true')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pppModemConfigAuthRequire.setStatus('current')
pppModemConfigAuthAllow = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 1314, 1, 612), Boolean().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pppModemConfigAuthAllow.setStatus('current')
pppModemConfigAuthServerProtocol1 = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 1314, 1, 620), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 49699, 49187))).clone(namedValues=NamedValues(("none", 0), ("chap", 49699), ("pap", 49187))).clone('chap')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pppModemConfigAuthServerProtocol1.setStatus('current')
pppModemConfigAuthServerProtocol2 = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 1314, 1, 621), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 49699, 49187))).clone(namedValues=NamedValues(("none", 0), ("chap", 49699), ("pap", 49187))).clone('none')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pppModemConfigAuthServerProtocol2.setStatus('current')
pppModemConfigAuthServerProtocol3 = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 1314, 1, 622), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 49699, 49187))).clone(namedValues=NamedValues(("none", 0), ("chap", 49699), ("pap", 49187))).clone('none')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pppModemConfigAuthServerProtocol3.setStatus('current')
pppModemConfigAuthServerProtocol4 = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 1314, 1, 623), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 49699, 49187))).clone(namedValues=NamedValues(("none", 0), ("chap", 49699), ("pap", 49187))).clone('none')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pppModemConfigAuthServerProtocol4.setStatus('current')
pppModemConfigAuthClientProtocol1 = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 1314, 1, 631), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 49699, 49187))).clone(namedValues=NamedValues(("none", 0), ("chap", 49699), ("pap", 49187))).clone('chap')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pppModemConfigAuthClientProtocol1.setStatus('current')
pppModemConfigAuthClientProtocol2 = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 1314, 1, 632), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 49699, 49187))).clone(namedValues=NamedValues(("none", 0), ("chap", 49699), ("pap", 49187))).clone('none')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pppModemConfigAuthClientProtocol2.setStatus('current')
pppModemConfigAuthClientProtocol3 = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 1314, 1, 633), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 49699, 49187))).clone(namedValues=NamedValues(("none", 0), ("chap", 49699), ("pap", 49187))).clone('none')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pppModemConfigAuthClientProtocol3.setStatus('current')
pppModemConfigAuthClientProtocol4 = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 1314, 1, 634), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 49699, 49187))).clone(namedValues=NamedValues(("none", 0), ("chap", 49699), ("pap", 49187))).clone('none')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pppModemConfigAuthClientProtocol4.setStatus('current')
pppModemConfigPAPClientRetries = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 1314, 1, 641), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 10)).clone(5)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pppModemConfigPAPClientRetries.setStatus('current')
pppModemConfigPAPClientTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 1314, 1, 642), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1000, 10000)).clone(3000)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pppModemConfigPAPClientTimeout.setStatus('current')
pppModemConfigPAPServerRetries = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 1314, 1, 643), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 10)).clone(1)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pppModemConfigPAPServerRetries.setStatus('current')
pppModemConfigPAPServerTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 1314, 1, 644), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1000, 10000)).clone(3000)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pppModemConfigPAPServerTimeout.setStatus('current')
pppModemConfigCHAPClientRetries = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 1314, 1, 651), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 10)).clone(5)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pppModemConfigCHAPClientRetries.setStatus('current')
pppModemConfigCHAPClientTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 1314, 1, 652), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1000, 10000)).clone(3000)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pppModemConfigCHAPClientTimeout.setStatus('current')
pppModemConfigCHAPServerRetries = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 1314, 1, 653), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 10)).clone(1)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pppModemConfigCHAPServerRetries.setStatus('current')
pppModemConfigCHAPServerChallenges = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 1314, 1, 654), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 10)).clone(5)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pppModemConfigCHAPServerChallenges.setStatus('current')
pppModemConfigCHAPServerTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 1314, 1, 655), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1000, 10000)).clone(3000)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pppModemConfigCHAPServerTimeout.setStatus('current')
pppModemConfigCHAPValueLength = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 1314, 1, 656), Integer32().subtype(subtypeSpec=ValueRangeConstraint(16, 64)).clone(16)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pppModemConfigCHAPValueLength.setStatus('current')
pppModemConfigAuthFailureRenegotiatesLCP = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 1314, 1, 657), Boolean().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pppModemConfigAuthFailureRenegotiatesLCP.setStatus('current')
pppModemConfigUserName = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 1314, 1, 661), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pppModemConfigUserName.setStatus('current')
pppModemConfigPassword = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 1314, 1, 662), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pppModemConfigPassword.setStatus('current')
pppModemConfigIPCPEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 1314, 1, 711), Boolean().clone('true')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pppModemConfigIPCPEnabled.setStatus('current')
pppModemConfigLocalIPAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 1314, 1, 712), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pppModemConfigLocalIPAddress.setStatus('current')
pppModemConfigRemoteIPAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 1314, 1, 713), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pppModemConfigRemoteIPAddress.setStatus('current')
pppModemConfigAllowPeerIPAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 1314, 1, 714), Boolean().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pppModemConfigAllowPeerIPAddress.setStatus('current')
pppModemConfigVJEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 1314, 1, 715), Boolean().clone('true')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pppModemConfigVJEnabled.setStatus('current')
pppModemConfigVJSlots = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 1314, 1, 716), Integer32().subtype(subtypeSpec=ValueRangeConstraint(4, 32)).clone(16)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pppModemConfigVJSlots.setStatus('current')
pppModemConfigSendDNS = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 1314, 1, 717), Boolean().clone('true')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pppModemConfigSendDNS.setStatus('current')
pppModemConfigSendNBNS = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 1314, 1, 718), Boolean().clone('true')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pppModemConfigSendNBNS.setStatus('current')
pppModemConfigIPCPMaxConfigure = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 1314, 1, 719), Integer32().subtype(subtypeSpec=ValueRangeConstraint(4, 20)).clone(10)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pppModemConfigIPCPMaxConfigure.setStatus('current')
pppModemConfigIPCPRestartTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 1314, 1, 720), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1000, 10000)).clone(3000)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pppModemConfigIPCPRestartTimer.setStatus('current')
pppModemConfigPassiveIPCP = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 1314, 1, 721), Boolean().clone('true')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pppModemConfigPassiveIPCP.setStatus('current')
pppModemConfigPassiveIPCPTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 1314, 1, 722), Integer32().subtype(subtypeSpec=ValueRangeConstraint(50, 3000)).clone(150)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pppModemConfigPassiveIPCPTimeout.setStatus('current')
pppModemConfigDNS1 = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 1314, 1, 723), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pppModemConfigDNS1.setStatus('current')
pppModemConfigDNS2 = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 1314, 1, 724), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pppModemConfigDNS2.setStatus('current')
pppModemConfigNBNS1 = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 1314, 1, 725), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pppModemConfigNBNS1.setStatus('current')
pppModemConfigNBNS2 = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 1314, 1, 726), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pppModemConfigNBNS2.setStatus('current')
pppModemConfigSendLocalIPAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 1314, 1, 727), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("never", 0), ("requested", 1), ("always", 2))).clone('requested')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pppModemConfigSendLocalIPAddress.setStatus('current')
pppModemConfigPeerNSStrategy = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 1314, 1, 729), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("ignore", 0), ("ack", 1), ("reject", 2))).clone('ignore')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pppModemConfigPeerNSStrategy.setStatus('current')
pppModemConfigMLPEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 1314, 1, 811), Boolean().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pppModemConfigMLPEnabled.setStatus('current')
pppModemConfigMLPMaxLinks = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 1314, 1, 812), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 8)).clone(2)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pppModemConfigMLPMaxLinks.setStatus('current')
pppModemConfigMLPFragmentSize = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 1314, 1, 813), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1500)).clone(42)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pppModemConfigMLPFragmentSize.setStatus('current')
pppModemConfigMLPMaxFragments = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 1314, 1, 814), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4)).clone(2)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pppModemConfigMLPMaxFragments.setStatus('current')
pppModemConfigMLPScaleFragments = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 1314, 1, 815), Boolean().clone('true')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pppModemConfigMLPScaleFragments.setStatus('current')
pppModemConfigMLPSendNullFragments = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 1314, 1, 816), Boolean().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pppModemConfigMLPSendNullFragments.setStatus('current')
pppModemConfigMLPNullFragmentTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 1314, 1, 817), Integer32().subtype(subtypeSpec=ValueRangeConstraint(10, 3600)).clone(120)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pppModemConfigMLPNullFragmentTimeout.setStatus('current')
pppModemConfigMLPEndpointDisc = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 1314, 1, 818), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("mACAddress", 0), ("groupNumber", 1))).clone('mACAddress')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pppModemConfigMLPEndpointDisc.setStatus('current')
pppModemConfigMLPGroupNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 1314, 1, 819), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 999999))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pppModemConfigMLPGroupNumber.setStatus('current')
pppModemConfigLogEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 1314, 1, 911), Boolean().clone('true')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pppModemConfigLogEnabled.setStatus('current')
pppModemConfigLogDump = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 1314, 1, 912), Boolean().clone('true')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pppModemConfigLogDump.setStatus('current')
pppModemConfigLogSize = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 1314, 1, 920), Integer32().subtype(subtypeSpec=ValueRangeConstraint(64, 1024)).clone(128)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pppModemConfigLogSize.setStatus('current')
pppModemConfigLogControlFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 1314, 1, 921), Boolean().clone('true')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pppModemConfigLogControlFrames.setStatus('current')
pppModemConfigLogProtocolFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 1314, 1, 922), Boolean().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pppModemConfigLogProtocolFrames.setStatus('current')
pppModemConfigLogOptions = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 1314, 1, 923), Boolean().clone('true')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pppModemConfigLogOptions.setStatus('current')
pppModemConfigLogStates = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 1314, 1, 924), Boolean().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pppModemConfigLogStates.setStatus('current')
pppModemConfigLogCompression = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 1314, 1, 925), Boolean().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pppModemConfigLogCompression.setStatus('current')
pppModemConfigLogMLP = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 1314, 1, 926), Boolean().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pppModemConfigLogMLP.setStatus('current')
pppModemConfigLogVJ = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 1314, 1, 927), Boolean().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pppModemConfigLogVJ.setStatus('current')
pppModemConfigCCPEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 1314, 1, 1011), Boolean().clone('true')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pppModemConfigCCPEnabled.setStatus('current')
pppModemConfigCompressFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 1314, 1, 1012), Boolean().clone('true')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pppModemConfigCompressFrames.setStatus('current')
pppModemConfigStac3Enabled = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 1314, 1, 1013), Boolean().clone('true')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pppModemConfigStac3Enabled.setStatus('current')
pppModemConfigStac4Enabled = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 1314, 1, 1014), Boolean().clone('true')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pppModemConfigStac4Enabled.setStatus('current')
pppModemConfigMPPCEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 1314, 1, 1015), Boolean().clone('true')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pppModemConfigMPPCEnabled.setStatus('current')
pppModemConfigStacPerformance = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 1314, 1, 1016), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255)).clone(3)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pppModemConfigStacPerformance.setStatus('current')
pppModemConfigStacMode = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 1314, 1, 1017), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pppModemConfigStacMode.setStatus('current')
pppModemConfigIPXCPEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 1314, 1, 1111), Boolean().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pppModemConfigIPXCPEnabled.setStatus('current')
pppModemConfigIPXNetworkNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 1314, 1, 1112), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pppModemConfigIPXNetworkNumber.setStatus('current')
pppModemConfigIPXNodeNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 1314, 1, 1113), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pppModemConfigIPXNodeNumber.setStatus('current')
pppIsdnConfigTable = MibTable((1, 3, 6, 1, 4, 1, 2637, 2, 1, 1315), )
if mibBuilder.loadTexts: pppIsdnConfigTable.setStatus('current')
pppIsdnConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2637, 2, 1, 1315, 1), ).setIndexNames((0, "APTIS-CONFIG-MIB", "pppIsdnConfigPathString"))
if mibBuilder.loadTexts: pppIsdnConfigEntry.setStatus('current')
pppIsdnConfigPathString = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 1315, 1, 1), DisplayString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pppIsdnConfigPathString.setStatus('current')
pppIsdnConfigRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 1315, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pppIsdnConfigRowStatus.setStatus('current')
pppIsdnConfigKeyValue = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 1315, 1, 3), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pppIsdnConfigKeyValue.setStatus('current')
pppIsdnConfigEstablishTimeLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 1315, 1, 111), Integer32().subtype(subtypeSpec=ValueRangeConstraint(10000, 300000)).clone(120000)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pppIsdnConfigEstablishTimeLimit.setStatus('current')
pppIsdnConfigConnectLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 1315, 1, 112), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pppIsdnConfigConnectLimit.setStatus('current')
pppIsdnConfigInactivityLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 1315, 1, 113), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 120))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pppIsdnConfigInactivityLimit.setStatus('current')
pppIsdnConfigMonitorTxActivity = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 1315, 1, 114), Boolean().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pppIsdnConfigMonitorTxActivity.setStatus('current')
pppIsdnConfigMonitorRxActivity = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 1315, 1, 115), Boolean().clone('true')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pppIsdnConfigMonitorRxActivity.setStatus('current')
pppIsdnConfigCountRIP = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 1315, 1, 116), Boolean().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pppIsdnConfigCountRIP.setStatus('current')
pppIsdnConfigCountPings = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 1315, 1, 117), Boolean().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pppIsdnConfigCountPings.setStatus('current')
pppIsdnConfigCountIGMP = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 1315, 1, 118), Boolean().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pppIsdnConfigCountIGMP.setStatus('current')
pppIsdnConfigUseEchoes = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 1315, 1, 211), Boolean().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pppIsdnConfigUseEchoes.setStatus('current')
pppIsdnConfigSendID = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 1315, 1, 212), Boolean().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pppIsdnConfigSendID.setStatus('current')
pppIsdnConfigSendTimeRemaining = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 1315, 1, 213), Boolean().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pppIsdnConfigSendTimeRemaining.setStatus('current')
pppIsdnConfigSendMRU = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 1315, 1, 311), Boolean().clone('true')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pppIsdnConfigSendMRU.setStatus('current')
pppIsdnConfigSendACCM = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 1315, 1, 312), Boolean().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pppIsdnConfigSendACCM.setStatus('current')
pppIsdnConfigSendMagic = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 1315, 1, 313), Boolean().clone('true')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pppIsdnConfigSendMagic.setStatus('current')
pppIsdnConfigSendPFC = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 1315, 1, 314), Boolean().clone('true')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pppIsdnConfigSendPFC.setStatus('current')
pppIsdnConfigSendACFC = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 1315, 1, 315), Boolean().clone('true')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pppIsdnConfigSendACFC.setStatus('current')
pppIsdnConfigSendShortSeq = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 1315, 1, 316), Boolean().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pppIsdnConfigSendShortSeq.setStatus('current')
pppIsdnConfigSendEndpointDisc = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 1315, 1, 317), Boolean().clone('true')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pppIsdnConfigSendEndpointDisc.setStatus('current')
pppIsdnConfigAllowMRU = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 1315, 1, 321), Boolean().clone('true')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pppIsdnConfigAllowMRU.setStatus('current')
pppIsdnConfigAllowACCM = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 1315, 1, 322), Boolean().clone('true')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pppIsdnConfigAllowACCM.setStatus('current')
pppIsdnConfigAllowMagic = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 1315, 1, 323), Boolean().clone('true')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pppIsdnConfigAllowMagic.setStatus('current')
pppIsdnConfigAllowPFC = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 1315, 1, 324), Boolean().clone('true')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pppIsdnConfigAllowPFC.setStatus('current')
pppIsdnConfigAllowACFC = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 1315, 1, 325), Boolean().clone('true')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pppIsdnConfigAllowACFC.setStatus('current')
pppIsdnConfigAllowShortSeq = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 1315, 1, 326), Boolean().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pppIsdnConfigAllowShortSeq.setStatus('current')
pppIsdnConfigAllowEndpointDisc = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 1315, 1, 327), Boolean().clone('true')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pppIsdnConfigAllowEndpointDisc.setStatus('current')
pppIsdnConfigLCPMaxConfigure = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 1315, 1, 411), Integer32().subtype(subtypeSpec=ValueRangeConstraint(4, 20)).clone(10)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pppIsdnConfigLCPMaxConfigure.setStatus('current')
pppIsdnConfigLCPRestartTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 1315, 1, 412), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1000, 10000)).clone(1500)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pppIsdnConfigLCPRestartTimer.setStatus('current')
pppIsdnConfigPassiveLCP = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 1315, 1, 413), Boolean().clone('true')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pppIsdnConfigPassiveLCP.setStatus('current')
pppIsdnConfigPassiveLCPTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 1315, 1, 414), Integer32().subtype(subtypeSpec=ValueRangeConstraint(50, 3000)).clone(300)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pppIsdnConfigPassiveLCPTimeout.setStatus('current')
pppIsdnConfigMinRemoteMRU = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 1315, 1, 511), Integer32().subtype(subtypeSpec=ValueRangeConstraint(576, 1518)).clone(1500)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pppIsdnConfigMinRemoteMRU.setStatus('current')
pppIsdnConfigMinLocalMRU = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 1315, 1, 512), Integer32().subtype(subtypeSpec=ValueRangeConstraint(576, 1500)).clone(1500)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pppIsdnConfigMinLocalMRU.setStatus('current')
pppIsdnConfigDesiredLocalMRU = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 1315, 1, 513), Integer32().subtype(subtypeSpec=ValueRangeConstraint(576, 1536)).clone(1500)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pppIsdnConfigDesiredLocalMRU.setStatus('current')
pppIsdnConfigTransmitACCM = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 1315, 1, 514), Integer32().clone(655360)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pppIsdnConfigTransmitACCM.setStatus('current')
pppIsdnConfigReceiveACCM = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 1315, 1, 515), Integer32().clone(655360)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pppIsdnConfigReceiveACCM.setStatus('current')
pppIsdnConfigMinRemoteMRRU = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 1315, 1, 516), Integer32().subtype(subtypeSpec=ValueRangeConstraint(576, 1518)).clone(1500)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pppIsdnConfigMinRemoteMRRU.setStatus('current')
pppIsdnConfigDesiredRemoteMRRU = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 1315, 1, 517), Integer32().subtype(subtypeSpec=ValueRangeConstraint(576, 1518)).clone(1506)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pppIsdnConfigDesiredRemoteMRRU.setStatus('current')
pppIsdnConfigMinLocalMRRU = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 1315, 1, 518), Integer32().subtype(subtypeSpec=ValueRangeConstraint(576, 1518)).clone(1500)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pppIsdnConfigMinLocalMRRU.setStatus('current')
pppIsdnConfigDesiredLocalMRRU = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 1315, 1, 519), Integer32().subtype(subtypeSpec=ValueRangeConstraint(576, 1518)).clone(1506)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pppIsdnConfigDesiredLocalMRRU.setStatus('current')
pppIsdnConfigLCPEchoRetries = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 1315, 1, 520), Integer32().clone(5)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pppIsdnConfigLCPEchoRetries.setStatus('current')
pppIsdnConfigLCPEchoTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 1315, 1, 521), Integer32().subtype(subtypeSpec=ValueRangeConstraint(30000, 600000)).clone(60000)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pppIsdnConfigLCPEchoTimeout.setStatus('current')
pppIsdnConfigLCPEchoErrorTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 1315, 1, 522), Integer32().subtype(subtypeSpec=ValueRangeConstraint(10000, 60000)).clone(15000)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pppIsdnConfigLCPEchoErrorTimeout.setStatus('current')
pppIsdnConfigTimeRemainingInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 1315, 1, 523), Integer32().subtype(subtypeSpec=ValueRangeConstraint(300000, 1200000)).clone(300000)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pppIsdnConfigTimeRemainingInterval.setStatus('current')
pppIsdnConfigIDText = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 1315, 1, 524), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pppIsdnConfigIDText.setStatus('current')
pppIsdnConfigAuthRequire = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 1315, 1, 611), Boolean().clone('true')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pppIsdnConfigAuthRequire.setStatus('current')
pppIsdnConfigAuthAllow = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 1315, 1, 612), Boolean().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pppIsdnConfigAuthAllow.setStatus('current')
pppIsdnConfigAuthServerProtocol1 = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 1315, 1, 620), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 49699, 49187))).clone(namedValues=NamedValues(("none", 0), ("chap", 49699), ("pap", 49187))).clone('chap')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pppIsdnConfigAuthServerProtocol1.setStatus('current')
pppIsdnConfigAuthServerProtocol2 = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 1315, 1, 621), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 49699, 49187))).clone(namedValues=NamedValues(("none", 0), ("chap", 49699), ("pap", 49187))).clone('none')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pppIsdnConfigAuthServerProtocol2.setStatus('current')
pppIsdnConfigAuthServerProtocol3 = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 1315, 1, 622), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 49699, 49187))).clone(namedValues=NamedValues(("none", 0), ("chap", 49699), ("pap", 49187))).clone('none')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pppIsdnConfigAuthServerProtocol3.setStatus('current')
pppIsdnConfigAuthServerProtocol4 = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 1315, 1, 623), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 49699, 49187))).clone(namedValues=NamedValues(("none", 0), ("chap", 49699), ("pap", 49187))).clone('none')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pppIsdnConfigAuthServerProtocol4.setStatus('current')
pppIsdnConfigAuthClientProtocol1 = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 1315, 1, 631), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 49699, 49187))).clone(namedValues=NamedValues(("none", 0), ("chap", 49699), ("pap", 49187))).clone('chap')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pppIsdnConfigAuthClientProtocol1.setStatus('current')
pppIsdnConfigAuthClientProtocol2 = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 1315, 1, 632), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 49699, 49187))).clone(namedValues=NamedValues(("none", 0), ("chap", 49699), ("pap", 49187))).clone('none')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pppIsdnConfigAuthClientProtocol2.setStatus('current')
pppIsdnConfigAuthClientProtocol3 = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 1315, 1, 633), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 49699, 49187))).clone(namedValues=NamedValues(("none", 0), ("chap", 49699), ("pap", 49187))).clone('none')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pppIsdnConfigAuthClientProtocol3.setStatus('current')
pppIsdnConfigAuthClientProtocol4 = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 1315, 1, 634), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 49699, 49187))).clone(namedValues=NamedValues(("none", 0), ("chap", 49699), ("pap", 49187))).clone('none')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pppIsdnConfigAuthClientProtocol4.setStatus('current')
pppIsdnConfigPAPClientRetries = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 1315, 1, 641), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 10)).clone(5)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pppIsdnConfigPAPClientRetries.setStatus('current')
pppIsdnConfigPAPClientTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 1315, 1, 642), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1000, 10000)).clone(3000)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pppIsdnConfigPAPClientTimeout.setStatus('current')
pppIsdnConfigPAPServerRetries = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 1315, 1, 643), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 10)).clone(1)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pppIsdnConfigPAPServerRetries.setStatus('current')
pppIsdnConfigPAPServerTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 1315, 1, 644), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1000, 10000)).clone(3000)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pppIsdnConfigPAPServerTimeout.setStatus('current')
pppIsdnConfigCHAPClientRetries = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 1315, 1, 651), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 10)).clone(5)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pppIsdnConfigCHAPClientRetries.setStatus('current')
pppIsdnConfigCHAPClientTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 1315, 1, 652), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1000, 10000)).clone(3000)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pppIsdnConfigCHAPClientTimeout.setStatus('current')
pppIsdnConfigCHAPServerRetries = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 1315, 1, 653), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 10)).clone(1)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pppIsdnConfigCHAPServerRetries.setStatus('current')
pppIsdnConfigCHAPServerChallenges = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 1315, 1, 654), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 10)).clone(5)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pppIsdnConfigCHAPServerChallenges.setStatus('current')
pppIsdnConfigCHAPServerTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 1315, 1, 655), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1000, 10000)).clone(3000)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pppIsdnConfigCHAPServerTimeout.setStatus('current')
pppIsdnConfigCHAPValueLength = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 1315, 1, 656), Integer32().subtype(subtypeSpec=ValueRangeConstraint(16, 64)).clone(16)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pppIsdnConfigCHAPValueLength.setStatus('current')
pppIsdnConfigAuthFailureRenegotiatesLCP = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 1315, 1, 657), Boolean().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pppIsdnConfigAuthFailureRenegotiatesLCP.setStatus('current')
pppIsdnConfigUserName = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 1315, 1, 661), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pppIsdnConfigUserName.setStatus('current')
pppIsdnConfigPassword = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 1315, 1, 662), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pppIsdnConfigPassword.setStatus('current')
pppIsdnConfigIPCPEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 1315, 1, 711), Boolean().clone('true')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pppIsdnConfigIPCPEnabled.setStatus('current')
pppIsdnConfigLocalIPAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 1315, 1, 712), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pppIsdnConfigLocalIPAddress.setStatus('current')
pppIsdnConfigRemoteIPAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 1315, 1, 713), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pppIsdnConfigRemoteIPAddress.setStatus('current')
pppIsdnConfigAllowPeerIPAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 1315, 1, 714), Boolean().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pppIsdnConfigAllowPeerIPAddress.setStatus('current')
pppIsdnConfigVJEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 1315, 1, 715), Boolean().clone('true')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pppIsdnConfigVJEnabled.setStatus('current')
pppIsdnConfigVJSlots = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 1315, 1, 716), Integer32().subtype(subtypeSpec=ValueRangeConstraint(4, 32)).clone(16)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pppIsdnConfigVJSlots.setStatus('current')
pppIsdnConfigSendDNS = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 1315, 1, 717), Boolean().clone('true')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pppIsdnConfigSendDNS.setStatus('current')
pppIsdnConfigSendNBNS = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 1315, 1, 718), Boolean().clone('true')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pppIsdnConfigSendNBNS.setStatus('current')
pppIsdnConfigIPCPMaxConfigure = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 1315, 1, 719), Integer32().subtype(subtypeSpec=ValueRangeConstraint(4, 20)).clone(10)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pppIsdnConfigIPCPMaxConfigure.setStatus('current')
pppIsdnConfigIPCPRestartTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 1315, 1, 720), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1000, 10000)).clone(1500)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pppIsdnConfigIPCPRestartTimer.setStatus('current')
pppIsdnConfigPassiveIPCP = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 1315, 1, 721), Boolean().clone('true')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pppIsdnConfigPassiveIPCP.setStatus('current')
pppIsdnConfigPassiveIPCPTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 1315, 1, 722), Integer32().subtype(subtypeSpec=ValueRangeConstraint(50, 3000)).clone(150)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pppIsdnConfigPassiveIPCPTimeout.setStatus('current')
pppIsdnConfigDNS1 = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 1315, 1, 723), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pppIsdnConfigDNS1.setStatus('current')
pppIsdnConfigDNS2 = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 1315, 1, 724), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pppIsdnConfigDNS2.setStatus('current')
pppIsdnConfigNBNS1 = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 1315, 1, 725), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pppIsdnConfigNBNS1.setStatus('current')
pppIsdnConfigNBNS2 = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 1315, 1, 726), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pppIsdnConfigNBNS2.setStatus('current')
pppIsdnConfigSendLocalIPAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 1315, 1, 727), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("never", 0), ("requested", 1), ("always", 2))).clone('requested')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pppIsdnConfigSendLocalIPAddress.setStatus('current')
pppIsdnConfigPeerNSStrategy = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 1315, 1, 729), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("ignore", 0), ("ack", 1), ("reject", 2))).clone('ignore')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pppIsdnConfigPeerNSStrategy.setStatus('current')
pppIsdnConfigMLPEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 1315, 1, 811), Boolean().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pppIsdnConfigMLPEnabled.setStatus('current')
pppIsdnConfigMLPMaxLinks = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 1315, 1, 812), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 8)).clone(2)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pppIsdnConfigMLPMaxLinks.setStatus('current')
pppIsdnConfigMLPFragmentSize = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 1315, 1, 813), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1500)).clone(42)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pppIsdnConfigMLPFragmentSize.setStatus('current')
pppIsdnConfigMLPMaxFragments = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 1315, 1, 814), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4)).clone(2)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pppIsdnConfigMLPMaxFragments.setStatus('current')
pppIsdnConfigMLPScaleFragments = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 1315, 1, 815), Boolean().clone('true')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pppIsdnConfigMLPScaleFragments.setStatus('current')
pppIsdnConfigMLPSendNullFragments = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 1315, 1, 816), Boolean().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pppIsdnConfigMLPSendNullFragments.setStatus('current')
pppIsdnConfigMLPNullFragmentTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 1315, 1, 817), Integer32().subtype(subtypeSpec=ValueRangeConstraint(10, 3600)).clone(120)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pppIsdnConfigMLPNullFragmentTimeout.setStatus('current')
pppIsdnConfigMLPEndpointDisc = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 1315, 1, 818), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("mACAddress", 0), ("groupNumber", 1))).clone('mACAddress')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pppIsdnConfigMLPEndpointDisc.setStatus('current')
pppIsdnConfigMLPGroupNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 1315, 1, 819), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 999999))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pppIsdnConfigMLPGroupNumber.setStatus('current')
pppIsdnConfigLogEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 1315, 1, 911), Boolean().clone('true')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pppIsdnConfigLogEnabled.setStatus('current')
pppIsdnConfigLogDump = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 1315, 1, 912), Boolean().clone('true')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pppIsdnConfigLogDump.setStatus('current')
pppIsdnConfigLogSize = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 1315, 1, 920), Integer32().subtype(subtypeSpec=ValueRangeConstraint(64, 1024)).clone(128)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pppIsdnConfigLogSize.setStatus('current')
pppIsdnConfigLogControlFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 1315, 1, 921), Boolean().clone('true')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pppIsdnConfigLogControlFrames.setStatus('current')
pppIsdnConfigLogProtocolFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 1315, 1, 922), Boolean().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pppIsdnConfigLogProtocolFrames.setStatus('current')
pppIsdnConfigLogOptions = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 1315, 1, 923), Boolean().clone('true')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pppIsdnConfigLogOptions.setStatus('current')
pppIsdnConfigLogStates = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 1315, 1, 924), Boolean().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pppIsdnConfigLogStates.setStatus('current')
pppIsdnConfigLogCompression = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 1315, 1, 925), Boolean().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pppIsdnConfigLogCompression.setStatus('current')
pppIsdnConfigLogMLP = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 1315, 1, 926), Boolean().clone('true')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pppIsdnConfigLogMLP.setStatus('current')
pppIsdnConfigLogVJ = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 1315, 1, 927), Boolean().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pppIsdnConfigLogVJ.setStatus('current')
pppIsdnConfigCCPEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 1315, 1, 1011), Boolean().clone('true')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pppIsdnConfigCCPEnabled.setStatus('current')
pppIsdnConfigCompressFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 1315, 1, 1012), Boolean().clone('true')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pppIsdnConfigCompressFrames.setStatus('current')
pppIsdnConfigStac3Enabled = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 1315, 1, 1013), Boolean().clone('true')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pppIsdnConfigStac3Enabled.setStatus('current')
pppIsdnConfigStac4Enabled = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 1315, 1, 1014), Boolean().clone('true')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pppIsdnConfigStac4Enabled.setStatus('current')
pppIsdnConfigMPPCEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 1315, 1, 1015), Boolean().clone('true')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pppIsdnConfigMPPCEnabled.setStatus('current')
pppIsdnConfigStacPerformance = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 1315, 1, 1016), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255)).clone(3)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pppIsdnConfigStacPerformance.setStatus('current')
pppIsdnConfigStacMode = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 1315, 1, 1017), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pppIsdnConfigStacMode.setStatus('current')
pppIsdnConfigIPXCPEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 1315, 1, 1111), Boolean().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pppIsdnConfigIPXCPEnabled.setStatus('current')
pppIsdnConfigIPXNetworkNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 1315, 1, 1112), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pppIsdnConfigIPXNetworkNumber.setStatus('current')
pppIsdnConfigIPXNodeNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 1315, 1, 1113), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pppIsdnConfigIPXNodeNumber.setStatus('current')
cLITable = MibTable((1, 3, 6, 1, 4, 1, 2637, 2, 1, 2800), )
if mibBuilder.loadTexts: cLITable.setStatus('current')
cLIEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2637, 2, 1, 2800, 1), ).setIndexNames((0, "APTIS-CONFIG-MIB", "cLIPathString"))
if mibBuilder.loadTexts: cLIEntry.setStatus('current')
cLIPathString = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 2800, 1, 1), DisplayString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cLIPathString.setStatus('current')
cLIRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 2800, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cLIRowStatus.setStatus('current')
cLIKeyValue = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 2800, 1, 3), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cLIKeyValue.setStatus('current')
cLIPrompt = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 2800, 1, 11), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cLIPrompt.setStatus('current')
cLIFEPLog = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 2800, 1, 12), Boolean().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cLIFEPLog.setStatus('current')
cLISyncLog = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 2800, 1, 13), Boolean().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cLISyncLog.setStatus('current')
cLIWarningTemp = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 2800, 1, 14), Integer32().subtype(subtypeSpec=ValueRangeConstraint(20, 200)).clone(55)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cLIWarningTemp.setStatus('current')
cLIHoldTempShutdownCardsInReset = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 2800, 1, 15), Boolean().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cLIHoldTempShutdownCardsInReset.setStatus('current')
cLIShutdownTemperature = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 2800, 1, 16), Integer32().subtype(subtypeSpec=ValueRangeConstraint(20, 200)).clone(70)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cLIShutdownTemperature.setStatus('current')
oosTable = MibTable((1, 3, 6, 1, 4, 1, 2637, 2, 1, 198), )
if mibBuilder.loadTexts: oosTable.setStatus('current')
oosEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2637, 2, 1, 198, 1), ).setIndexNames((0, "APTIS-CONFIG-MIB", "oosPathString"))
if mibBuilder.loadTexts: oosEntry.setStatus('current')
oosPathString = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 198, 1, 1), DisplayString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: oosPathString.setStatus('current')
oosRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 198, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: oosRowStatus.setStatus('current')
oosKeyValue = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 198, 1, 3), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: oosKeyValue.setStatus('current')
oosOosValue = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 198, 1, 11), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: oosOosValue.setStatus('current')
metaContainerTable = MibTable((1, 3, 6, 1, 4, 1, 2637, 2, 1, 1), )
if mibBuilder.loadTexts: metaContainerTable.setStatus('current')
metaContainerEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2637, 2, 1, 1, 1), ).setIndexNames((0, "APTIS-CONFIG-MIB", "metaContainerPathString"))
if mibBuilder.loadTexts: metaContainerEntry.setStatus('current')
metaContainerPathString = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 1, 1, 1), DisplayString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: metaContainerPathString.setStatus('current')
metaContainerRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 1, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: metaContainerRowStatus.setStatus('current')
metaContainerKeyValue = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 1, 1, 3), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: metaContainerKeyValue.setStatus('current')
metaContainerCmlid = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 1, 1, 4), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: metaContainerCmlid.setStatus('current')
metaContainerCmlname = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 1, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: metaContainerCmlname.setStatus('current')
coredumpConfigTable = MibTable((1, 3, 6, 1, 4, 1, 2637, 2, 1, 13), )
if mibBuilder.loadTexts: coredumpConfigTable.setStatus('current')
coredumpConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2637, 2, 1, 13, 1), ).setIndexNames((0, "APTIS-CONFIG-MIB", "coredumpConfigPathString"))
if mibBuilder.loadTexts: coredumpConfigEntry.setStatus('current')
coredumpConfigPathString = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 13, 1, 1), DisplayString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: coredumpConfigPathString.setStatus('current')
coredumpConfigRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 13, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: coredumpConfigRowStatus.setStatus('current')
coredumpConfigKeyValue = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 13, 1, 3), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: coredumpConfigKeyValue.setStatus('current')
coredumpConfigDumpSCC = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 13, 1, 11), Boolean().clone('true')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: coredumpConfigDumpSCC.setStatus('current')
coredumpConfigDumpMAC = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 13, 1, 12), Boolean().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: coredumpConfigDumpMAC.setStatus('current')
coredumpConfigDumpDAC = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 13, 1, 13), Boolean().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: coredumpConfigDumpDAC.setStatus('current')
coredumpConfigOutputMode = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 13, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("overwrite", 0), ("cumulative", 1))).clone('overwrite')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: coredumpConfigOutputMode.setStatus('current')
coredumpConfigOutputDrive = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 13, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("c", 0), ("d", 1))).clone('c')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: coredumpConfigOutputDrive.setStatus('current')
eventConfigTable = MibTable((1, 3, 6, 1, 4, 1, 2637, 2, 1, 14), )
if mibBuilder.loadTexts: eventConfigTable.setStatus('current')
eventConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2637, 2, 1, 14, 1), ).setIndexNames((0, "APTIS-CONFIG-MIB", "eventConfigPathString"))
if mibBuilder.loadTexts: eventConfigEntry.setStatus('current')
eventConfigPathString = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 14, 1, 1), DisplayString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: eventConfigPathString.setStatus('current')
eventConfigRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 14, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: eventConfigRowStatus.setStatus('current')
eventConfigKeyValue = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 14, 1, 3), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: eventConfigKeyValue.setStatus('current')
eventConfigDefaultLogLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 14, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7)).clone(1)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: eventConfigDefaultLogLevel.setStatus('current')
shellConfigTable = MibTable((1, 3, 6, 1, 4, 1, 2637, 2, 1, 1481), )
if mibBuilder.loadTexts: shellConfigTable.setStatus('current')
shellConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2637, 2, 1, 1481, 1), ).setIndexNames((0, "APTIS-CONFIG-MIB", "shellConfigPathString"))
if mibBuilder.loadTexts: shellConfigEntry.setStatus('current')
shellConfigPathString = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 1481, 1, 1), DisplayString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: shellConfigPathString.setStatus('current')
shellConfigRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 1481, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: shellConfigRowStatus.setStatus('current')
shellConfigKeyValue = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 1481, 1, 3), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: shellConfigKeyValue.setStatus('current')
shellConfigConnectTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 1481, 1, 111), Integer32().subtype(subtypeSpec=ValueRangeConstraint(10000, 300000)).clone(120000)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: shellConfigConnectTimeout.setStatus('current')
shellConfigRetryCount = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 1481, 1, 112), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 10)).clone(3)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: shellConfigRetryCount.setStatus('current')
shellConfigEchoName = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 1481, 1, 211), Boolean().clone('true')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: shellConfigEchoName.setStatus('current')
shellConfigEchoPassword = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 1481, 1, 212), Boolean().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: shellConfigEchoPassword.setStatus('current')
shellConfigEchoCommands = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 1481, 1, 213), Boolean().clone('true')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: shellConfigEchoCommands.setStatus('current')
shellConfigCtrlDAborts = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 1481, 1, 215), Boolean().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: shellConfigCtrlDAborts.setStatus('current')
shellConfigShellCommand = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 1481, 1, 311), Boolean().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: shellConfigShellCommand.setStatus('current')
shellConfigPPPCommand = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 1481, 1, 312), Boolean().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: shellConfigPPPCommand.setStatus('current')
shellConfigTelnetCommand = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 1481, 1, 313), Boolean().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: shellConfigTelnetCommand.setStatus('current')
shellConfigRloginCommand = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 1481, 1, 314), Boolean().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: shellConfigRloginCommand.setStatus('current')
shellConfigBannerText = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 1481, 1, 411), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 256))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: shellConfigBannerText.setStatus('current')
shellConfigExtraLoginText = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 1481, 1, 412), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: shellConfigExtraLoginText.setStatus('current')
shellConfigNamePrompt = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 1481, 1, 413), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: shellConfigNamePrompt.setStatus('current')
shellConfigPasswordPrompt = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 1481, 1, 414), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: shellConfigPasswordPrompt.setStatus('current')
shellConfigWaitText = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 1481, 1, 415), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: shellConfigWaitText.setStatus('current')
shellConfigAuthenticatedText = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 1481, 1, 416), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: shellConfigAuthenticatedText.setStatus('current')
shellConfigFailureText = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 1481, 1, 417), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: shellConfigFailureText.setStatus('current')
shellConfigCommandPrompt = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 1481, 1, 418), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: shellConfigCommandPrompt.setStatus('current')
shellConfigHangupText = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 1481, 1, 419), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: shellConfigHangupText.setStatus('current')
shellConfigTimeoutText = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 1481, 1, 420), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: shellConfigTimeoutText.setStatus('current')
sessionConfigTable = MibTable((1, 3, 6, 1, 4, 1, 2637, 2, 1, 250), )
if mibBuilder.loadTexts: sessionConfigTable.setStatus('current')
sessionConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2637, 2, 1, 250, 1), ).setIndexNames((0, "APTIS-CONFIG-MIB", "sessionConfigPathString"))
if mibBuilder.loadTexts: sessionConfigEntry.setStatus('current')
sessionConfigPathString = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 250, 1, 1), DisplayString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: sessionConfigPathString.setStatus('current')
sessionConfigRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 250, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: sessionConfigRowStatus.setStatus('current')
sessionConfigKeyValue = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 250, 1, 3), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: sessionConfigKeyValue.setStatus('current')
sessionConfigDefaultVpopEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 250, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("true", 1), ("false", 2))).clone('true')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: sessionConfigDefaultVpopEnable.setStatus('current')
sessionConfigPreAuth = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 250, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("none", 1), ("radius", 2), ("inc", 3))).clone('none')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: sessionConfigPreAuth.setStatus('current')
sessionConfigPreAuthPassword = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 250, 1, 13), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 68))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: sessionConfigPreAuthPassword.setStatus('current')
sessionConfigPreAuthTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 250, 1, 14), Integer32().subtype(subtypeSpec=ValueRangeConstraint(4, 30)).clone(10)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: sessionConfigPreAuthTimeout.setStatus('current')
sessionConfigPreAuthTimeoutAction = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 250, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("accept", 1), ("reject", 2))).clone('accept')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: sessionConfigPreAuthTimeoutAction.setStatus('current')
sessionConfigCheckpointTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 250, 1, 16), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 15))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: sessionConfigCheckpointTime.setStatus('current')
sessionConfigTerminateEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 250, 1, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1))).clone('disabled')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: sessionConfigTerminateEnable.setStatus('current')
sessionConfigTerminateSecret = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 250, 1, 18), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: sessionConfigTerminateSecret.setStatus('current')
sessionConfigLogEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 250, 1, 19), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("true", 1), ("false", 2))).clone('true')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: sessionConfigLogEnable.setStatus('current')
sessionConfigPreAuthAAAGroup = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 250, 1, 20), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: sessionConfigPreAuthAAAGroup.setStatus('current')
sessionConfigDS0DiscTimeOut = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 250, 1, 21), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 900)).clone(120)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: sessionConfigDS0DiscTimeOut.setStatus('current')
sessionConfigAcctReportFailedSessions = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 250, 1, 22), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("true", 1), ("false", 2))).clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: sessionConfigAcctReportFailedSessions.setStatus('current')
signalingConfigTable = MibTable((1, 3, 6, 1, 4, 1, 2637, 2, 1, 253), )
if mibBuilder.loadTexts: signalingConfigTable.setStatus('current')
signalingConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2637, 2, 1, 253, 1), ).setIndexNames((0, "APTIS-CONFIG-MIB", "signalingConfigPathString"))
if mibBuilder.loadTexts: signalingConfigEntry.setStatus('current')
signalingConfigPathString = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 253, 1, 1), DisplayString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: signalingConfigPathString.setStatus('current')
signalingConfigRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 253, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: signalingConfigRowStatus.setStatus('current')
signalingConfigKeyValue = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 253, 1, 3), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: signalingConfigKeyValue.setStatus('current')
signalingConfigSs7Mode = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 253, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('disabled')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: signalingConfigSs7Mode.setStatus('current')
signalingConfigDsmccTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 253, 1, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1000, 100000)).clone(2000)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: signalingConfigDsmccTimeout.setStatus('current')
signalingConfigDsmccHoldTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 253, 1, 13), Integer32().clone(18000)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: signalingConfigDsmccHoldTime.setStatus('current')
signalingConfigDsmccRetries = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 253, 1, 14), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 50)).clone(3)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: signalingConfigDsmccRetries.setStatus('current')
signalingConfigConfigPPP = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 253, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("allowed", 1), ("notAllowed", 2))).clone('notAllowed')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: signalingConfigConfigPPP.setStatus('current')
signalingConfigDebugMode = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 253, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('disabled')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: signalingConfigDebugMode.setStatus('current')
signalingConfigSs7Gateway = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 253, 1, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("ssg", 1), ("softSwitch", 2), ("ipdc", 3))).clone('ssg')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: signalingConfigSs7Gateway.setStatus('current')
ipdcConfigTable = MibTable((1, 3, 6, 1, 4, 1, 2637, 2, 1, 254), )
if mibBuilder.loadTexts: ipdcConfigTable.setStatus('current')
ipdcConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2637, 2, 1, 254, 1), ).setIndexNames((0, "APTIS-CONFIG-MIB", "ipdcConfigPathString"))
if mibBuilder.loadTexts: ipdcConfigEntry.setStatus('current')
ipdcConfigPathString = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 254, 1, 1), DisplayString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ipdcConfigPathString.setStatus('current')
ipdcConfigRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 254, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ipdcConfigRowStatus.setStatus('current')
ipdcConfigKeyValue = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 254, 1, 3), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ipdcConfigKeyValue.setStatus('current')
ipdcConfigPrimarySwitchIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 254, 1, 11), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ipdcConfigPrimarySwitchIpAddr.setStatus('current')
ipdcConfigPrimarySwitchPort = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 254, 1, 12), Integer32().clone(513)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ipdcConfigPrimarySwitchPort.setStatus('current')
ipdcConfigSecondarySwitchIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 254, 1, 13), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ipdcConfigSecondarySwitchIpAddr.setStatus('current')
ipdcConfigSecondarySwitchPort = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 254, 1, 14), Integer32().clone(513)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ipdcConfigSecondarySwitchPort.setStatus('current')
ipdcConfigBayNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 254, 1, 15), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 8))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ipdcConfigBayNumber.setStatus('current')
ipdcConfigSystemType = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 254, 1, 16), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 24))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ipdcConfigSystemType.setStatus('current')
ipdcConfigSystemID = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 254, 1, 17), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ipdcConfigSystemID.setStatus('current')
ipdcConfigTxTone = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 254, 1, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("high", 0), ("low", 1))).clone('high')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ipdcConfigTxTone.setStatus('current')
ipdcConfigRxTone = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 254, 1, 19), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("high", 0), ("low", 1))).clone('low')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ipdcConfigRxTone.setStatus('current')
softswitchConfigTable = MibTable((1, 3, 6, 1, 4, 1, 2637, 2, 1, 255), )
if mibBuilder.loadTexts: softswitchConfigTable.setStatus('current')
softswitchConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2637, 2, 1, 255, 1), ).setIndexNames((0, "APTIS-CONFIG-MIB", "softswitchConfigPathString"))
if mibBuilder.loadTexts: softswitchConfigEntry.setStatus('current')
softswitchConfigPathString = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 255, 1, 1), DisplayString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: softswitchConfigPathString.setStatus('current')
softswitchConfigRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 255, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: softswitchConfigRowStatus.setStatus('current')
softswitchConfigKeyValue = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 255, 1, 3), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: softswitchConfigKeyValue.setStatus('current')
softswitchConfigSoftswitchEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 255, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("true", 1), ("false", 2))).clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: softswitchConfigSoftswitchEnable.setStatus('current')
softswitchConfigIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 255, 1, 12), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: softswitchConfigIpAddr.setStatus('current')
softswitchConfigPort = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 255, 1, 13), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: softswitchConfigPort.setStatus('current')
sessionTableFormatTable = MibTable((1, 3, 6, 1, 4, 1, 2637, 2, 1, 251), )
if mibBuilder.loadTexts: sessionTableFormatTable.setStatus('current')
sessionTableFormatEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2637, 2, 1, 251, 1), ).setIndexNames((0, "APTIS-CONFIG-MIB", "sessionTableFormatPathString"))
if mibBuilder.loadTexts: sessionTableFormatEntry.setStatus('current')
sessionTableFormatPathString = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 251, 1, 1), DisplayString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: sessionTableFormatPathString.setStatus('current')
sessionTableFormatRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 251, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: sessionTableFormatRowStatus.setStatus('current')
sessionTableFormatKeyValue = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 251, 1, 3), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: sessionTableFormatKeyValue.setStatus('current')
sessionTableFormatUseDefault = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 251, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("custom", 1), ("default", 2), ("counters", 3), ("hardware", 4), ("ip", 5), ("postMortem", 6), ("hub", 7))).clone('default')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: sessionTableFormatUseDefault.setStatus('current')
sessionTableFormatHeading1 = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 251, 1, 12), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: sessionTableFormatHeading1.setStatus('current')
sessionTableFormatWidth1 = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 251, 1, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 31)).clone(8)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: sessionTableFormatWidth1.setStatus('current')
sessionTableFormatParam1 = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 251, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83))).clone(namedValues=NamedValues(("none", 0), ("index", 1), ("sessionID", 2), ("state", 3), ("permanentFlag", 10), ("vpop", 11), ("name", 12), ("remoteIP", 13), ("remoteIPMask", 14), ("localIP", 15), ("localIPMask", 16), ("linkService", 17), ("serviceMode", 18), ("startTime", 19), ("stopTime", 20), ("timeOfModemSync", 21), ("timeOfService", 22), ("terminatingComponent", 23), ("terminationCause", 24), ("lastComponent", 25), ("layer1Slot", 26), ("layer2Slot", 27), ("calledNumber", 28), ("callingNumber", 29), ("originateMode", 30), ("octetsIn", 31), ("octetsOut", 32), ("packetsIn", 33), ("packetsOut", 34), ("multiLinkId", 35), ("port", 36), ("timeslot", 37), ("linkCount", 38), ("txStartDataRate", 39), ("rxStartDataRate", 40), ("txEndDataRate", 41), ("rxEndDataRate", 42), ("txMinDataRate", 43), ("rxMinDataRate", 44), ("txMaxDataRate", 45), ("rxMaxDataRate", 46), ("iop", 47), ("dmm", 48), ("pack", 49), ("device", 50), ("tdmStream", 51), ("tdmTimeSlot", 52), ("terminationReason", 53), ("duration", 54), ("durationHMS", 55), ("ss7SessionId", 56), ("modemNumber", 57), ("tunnelType", 58), ("tunnelMediumType", 59), ("tunnelServerAddress", 60), ("callClass", 61), ("tandemPort", 62), ("tandemTimeslot", 63), ("callClassArray", 64), ("callClassLen", 65), ("actualAuthMethod", 66), ("modemModulation", 67), ("modemErrorCorrection", 68), ("modemDataCompression", 69), ("modemTxBlocks", 70), ("modemRetransmits", 71), ("modemSNR", 72), ("modemLocalRetrains", 73), ("modemRemoteRetrains", 74), ("modemLocalRenegotiations", 75), ("modemRemoteRenegotiations", 76), ("modemReceiveLineLevel", 77), ("remoteIPXNetwork", 78), ("remoteIPXNode", 79), ("cleartcpRemoteIP", 80), ("cleartcpRemotePort", 81), ("tunnelId", 82), ("linkId", 83))).clone('sessionID')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: sessionTableFormatParam1.setStatus('current')
sessionTableFormatHeading2 = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 251, 1, 15), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: sessionTableFormatHeading2.setStatus('current')
sessionTableFormatWidth2 = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 251, 1, 16), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 31)).clone(2)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: sessionTableFormatWidth2.setStatus('current')
sessionTableFormatParam2 = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 251, 1, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83))).clone(namedValues=NamedValues(("none", 0), ("index", 1), ("sessionID", 2), ("state", 3), ("permanentFlag", 10), ("vpop", 11), ("name", 12), ("remoteIP", 13), ("remoteIPMask", 14), ("localIP", 15), ("localIPMask", 16), ("linkService", 17), ("serviceMode", 18), ("startTime", 19), ("stopTime", 20), ("timeOfModemSync", 21), ("timeOfService", 22), ("terminatingComponent", 23), ("terminationCause", 24), ("lastComponent", 25), ("layer1Slot", 26), ("layer2Slot", 27), ("calledNumber", 28), ("callingNumber", 29), ("originateMode", 30), ("octetsIn", 31), ("octetsOut", 32), ("packetsIn", 33), ("packetsOut", 34), ("multiLinkId", 35), ("port", 36), ("timeslot", 37), ("linkCount", 38), ("txStartDataRate", 39), ("rxStartDataRate", 40), ("txEndDataRate", 41), ("rxEndDataRate", 42), ("txMinDataRate", 43), ("rxMinDataRate", 44), ("txMaxDataRate", 45), ("rxMaxDataRate", 46), ("iop", 47), ("dmm", 48), ("pack", 49), ("device", 50), ("tdmStream", 51), ("tdmTimeSlot", 52), ("terminationReason", 53), ("duration", 54), ("durationHMS", 55), ("ss7SessionId", 56), ("modemNumber", 57), ("tunnelType", 58), ("tunnelMediumType", 59), ("tunnelServerAddress", 60), ("callClass", 61), ("tandemPort", 62), ("tandemTimeslot", 63), ("callClassArray", 64), ("callClassLen", 65), ("actualAuthMethod", 66), ("modemModulation", 67), ("modemErrorCorrection", 68), ("modemDataCompression", 69), ("modemTxBlocks", 70), ("modemRetransmits", 71), ("modemSNR", 72), ("modemLocalRetrains", 73), ("modemRemoteRetrains", 74), ("modemLocalRenegotiations", 75), ("modemRemoteRenegotiations", 76), ("modemReceiveLineLevel", 77), ("remoteIPXNetwork", 78), ("remoteIPXNode", 79), ("cleartcpRemoteIP", 80), ("cleartcpRemotePort", 81), ("tunnelId", 82), ("linkId", 83))).clone('layer1Slot')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: sessionTableFormatParam2.setStatus('current')
sessionTableFormatHeading3 = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 251, 1, 18), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: sessionTableFormatHeading3.setStatus('current')
sessionTableFormatWidth3 = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 251, 1, 19), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 31)).clone(3)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: sessionTableFormatWidth3.setStatus('current')
sessionTableFormatParam3 = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 251, 1, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83))).clone(namedValues=NamedValues(("none", 0), ("index", 1), ("sessionID", 2), ("state", 3), ("permanentFlag", 10), ("vpop", 11), ("name", 12), ("remoteIP", 13), ("remoteIPMask", 14), ("localIP", 15), ("localIPMask", 16), ("linkService", 17), ("serviceMode", 18), ("startTime", 19), ("stopTime", 20), ("timeOfModemSync", 21), ("timeOfService", 22), ("terminatingComponent", 23), ("terminationCause", 24), ("lastComponent", 25), ("layer1Slot", 26), ("layer2Slot", 27), ("calledNumber", 28), ("callingNumber", 29), ("originateMode", 30), ("octetsIn", 31), ("octetsOut", 32), ("packetsIn", 33), ("packetsOut", 34), ("multiLinkId", 35), ("port", 36), ("timeslot", 37), ("linkCount", 38), ("txStartDataRate", 39), ("rxStartDataRate", 40), ("txEndDataRate", 41), ("rxEndDataRate", 42), ("txMinDataRate", 43), ("rxMinDataRate", 44), ("txMaxDataRate", 45), ("rxMaxDataRate", 46), ("iop", 47), ("dmm", 48), ("pack", 49), ("device", 50), ("tdmStream", 51), ("tdmTimeSlot", 52), ("terminationReason", 53), ("duration", 54), ("durationHMS", 55), ("ss7SessionId", 56), ("modemNumber", 57), ("tunnelType", 58), ("tunnelMediumType", 59), ("tunnelServerAddress", 60), ("callClass", 61), ("tandemPort", 62), ("tandemTimeslot", 63), ("callClassArray", 64), ("callClassLen", 65), ("actualAuthMethod", 66), ("modemModulation", 67), ("modemErrorCorrection", 68), ("modemDataCompression", 69), ("modemTxBlocks", 70), ("modemRetransmits", 71), ("modemSNR", 72), ("modemLocalRetrains", 73), ("modemRemoteRetrains", 74), ("modemLocalRenegotiations", 75), ("modemRemoteRenegotiations", 76), ("modemReceiveLineLevel", 77), ("remoteIPXNetwork", 78), ("remoteIPXNode", 79), ("cleartcpRemoteIP", 80), ("cleartcpRemotePort", 81), ("tunnelId", 82), ("linkId", 83))).clone('port')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: sessionTableFormatParam3.setStatus('current')
sessionTableFormatHeading4 = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 251, 1, 21), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: sessionTableFormatHeading4.setStatus('current')
sessionTableFormatWidth4 = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 251, 1, 22), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 31)).clone(3)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: sessionTableFormatWidth4.setStatus('current')
sessionTableFormatParam4 = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 251, 1, 23), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83))).clone(namedValues=NamedValues(("none", 0), ("index", 1), ("sessionID", 2), ("state", 3), ("permanentFlag", 10), ("vpop", 11), ("name", 12), ("remoteIP", 13), ("remoteIPMask", 14), ("localIP", 15), ("localIPMask", 16), ("linkService", 17), ("serviceMode", 18), ("startTime", 19), ("stopTime", 20), ("timeOfModemSync", 21), ("timeOfService", 22), ("terminatingComponent", 23), ("terminationCause", 24), ("lastComponent", 25), ("layer1Slot", 26), ("layer2Slot", 27), ("calledNumber", 28), ("callingNumber", 29), ("originateMode", 30), ("octetsIn", 31), ("octetsOut", 32), ("packetsIn", 33), ("packetsOut", 34), ("multiLinkId", 35), ("port", 36), ("timeslot", 37), ("linkCount", 38), ("txStartDataRate", 39), ("rxStartDataRate", 40), ("txEndDataRate", 41), ("rxEndDataRate", 42), ("txMinDataRate", 43), ("rxMinDataRate", 44), ("txMaxDataRate", 45), ("rxMaxDataRate", 46), ("iop", 47), ("dmm", 48), ("pack", 49), ("device", 50), ("tdmStream", 51), ("tdmTimeSlot", 52), ("terminationReason", 53), ("duration", 54), ("durationHMS", 55), ("ss7SessionId", 56), ("modemNumber", 57), ("tunnelType", 58), ("tunnelMediumType", 59), ("tunnelServerAddress", 60), ("callClass", 61), ("tandemPort", 62), ("tandemTimeslot", 63), ("callClassArray", 64), ("callClassLen", 65), ("actualAuthMethod", 66), ("modemModulation", 67), ("modemErrorCorrection", 68), ("modemDataCompression", 69), ("modemTxBlocks", 70), ("modemRetransmits", 71), ("modemSNR", 72), ("modemLocalRetrains", 73), ("modemRemoteRetrains", 74), ("modemLocalRenegotiations", 75), ("modemRemoteRenegotiations", 76), ("modemReceiveLineLevel", 77), ("remoteIPXNetwork", 78), ("remoteIPXNode", 79), ("cleartcpRemoteIP", 80), ("cleartcpRemotePort", 81), ("tunnelId", 82), ("linkId", 83))).clone('timeslot')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: sessionTableFormatParam4.setStatus('current')
sessionTableFormatHeading5 = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 251, 1, 24), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: sessionTableFormatHeading5.setStatus('current')
sessionTableFormatWidth5 = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 251, 1, 25), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 31)).clone(2)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: sessionTableFormatWidth5.setStatus('current')
sessionTableFormatParam5 = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 251, 1, 26), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83))).clone(namedValues=NamedValues(("none", 0), ("index", 1), ("sessionID", 2), ("state", 3), ("permanentFlag", 10), ("vpop", 11), ("name", 12), ("remoteIP", 13), ("remoteIPMask", 14), ("localIP", 15), ("localIPMask", 16), ("linkService", 17), ("serviceMode", 18), ("startTime", 19), ("stopTime", 20), ("timeOfModemSync", 21), ("timeOfService", 22), ("terminatingComponent", 23), ("terminationCause", 24), ("lastComponent", 25), ("layer1Slot", 26), ("layer2Slot", 27), ("calledNumber", 28), ("callingNumber", 29), ("originateMode", 30), ("octetsIn", 31), ("octetsOut", 32), ("packetsIn", 33), ("packetsOut", 34), ("multiLinkId", 35), ("port", 36), ("timeslot", 37), ("linkCount", 38), ("txStartDataRate", 39), ("rxStartDataRate", 40), ("txEndDataRate", 41), ("rxEndDataRate", 42), ("txMinDataRate", 43), ("rxMinDataRate", 44), ("txMaxDataRate", 45), ("rxMaxDataRate", 46), ("iop", 47), ("dmm", 48), ("pack", 49), ("device", 50), ("tdmStream", 51), ("tdmTimeSlot", 52), ("terminationReason", 53), ("duration", 54), ("durationHMS", 55), ("ss7SessionId", 56), ("modemNumber", 57), ("tunnelType", 58), ("tunnelMediumType", 59), ("tunnelServerAddress", 60), ("callClass", 61), ("tandemPort", 62), ("tandemTimeslot", 63), ("callClassArray", 64), ("callClassLen", 65), ("actualAuthMethod", 66), ("modemModulation", 67), ("modemErrorCorrection", 68), ("modemDataCompression", 69), ("modemTxBlocks", 70), ("modemRetransmits", 71), ("modemSNR", 72), ("modemLocalRetrains", 73), ("modemRemoteRetrains", 74), ("modemLocalRenegotiations", 75), ("modemRemoteRenegotiations", 76), ("modemReceiveLineLevel", 77), ("remoteIPXNetwork", 78), ("remoteIPXNode", 79), ("cleartcpRemoteIP", 80), ("cleartcpRemotePort", 81), ("tunnelId", 82), ("linkId", 83))).clone('layer2Slot')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: sessionTableFormatParam5.setStatus('current')
sessionTableFormatHeading6 = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 251, 1, 27), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: sessionTableFormatHeading6.setStatus('current')
sessionTableFormatWidth6 = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 251, 1, 28), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 31)).clone(12)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: sessionTableFormatWidth6.setStatus('current')
sessionTableFormatParam6 = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 251, 1, 29), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83))).clone(namedValues=NamedValues(("none", 0), ("index", 1), ("sessionID", 2), ("state", 3), ("permanentFlag", 10), ("vpop", 11), ("name", 12), ("remoteIP", 13), ("remoteIPMask", 14), ("localIP", 15), ("localIPMask", 16), ("linkService", 17), ("serviceMode", 18), ("startTime", 19), ("stopTime", 20), ("timeOfModemSync", 21), ("timeOfService", 22), ("terminatingComponent", 23), ("terminationCause", 24), ("lastComponent", 25), ("layer1Slot", 26), ("layer2Slot", 27), ("calledNumber", 28), ("callingNumber", 29), ("originateMode", 30), ("octetsIn", 31), ("octetsOut", 32), ("packetsIn", 33), ("packetsOut", 34), ("multiLinkId", 35), ("port", 36), ("timeslot", 37), ("linkCount", 38), ("txStartDataRate", 39), ("rxStartDataRate", 40), ("txEndDataRate", 41), ("rxEndDataRate", 42), ("txMinDataRate", 43), ("rxMinDataRate", 44), ("txMaxDataRate", 45), ("rxMaxDataRate", 46), ("iop", 47), ("dmm", 48), ("pack", 49), ("device", 50), ("tdmStream", 51), ("tdmTimeSlot", 52), ("terminationReason", 53), ("duration", 54), ("durationHMS", 55), ("ss7SessionId", 56), ("modemNumber", 57), ("tunnelType", 58), ("tunnelMediumType", 59), ("tunnelServerAddress", 60), ("callClass", 61), ("tandemPort", 62), ("tandemTimeslot", 63), ("callClassArray", 64), ("callClassLen", 65), ("actualAuthMethod", 66), ("modemModulation", 67), ("modemErrorCorrection", 68), ("modemDataCompression", 69), ("modemTxBlocks", 70), ("modemRetransmits", 71), ("modemSNR", 72), ("modemLocalRetrains", 73), ("modemRemoteRetrains", 74), ("modemLocalRenegotiations", 75), ("modemRemoteRenegotiations", 76), ("modemReceiveLineLevel", 77), ("remoteIPXNetwork", 78), ("remoteIPXNode", 79), ("cleartcpRemoteIP", 80), ("cleartcpRemotePort", 81), ("tunnelId", 82), ("linkId", 83))).clone('linkService')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: sessionTableFormatParam6.setStatus('current')
sessionTableFormatHeading7 = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 251, 1, 30), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: sessionTableFormatHeading7.setStatus('current')
sessionTableFormatWidth7 = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 251, 1, 31), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 31)).clone(8)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: sessionTableFormatWidth7.setStatus('current')
sessionTableFormatParam7 = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 251, 1, 32), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83))).clone(namedValues=NamedValues(("none", 0), ("index", 1), ("sessionID", 2), ("state", 3), ("permanentFlag", 10), ("vpop", 11), ("name", 12), ("remoteIP", 13), ("remoteIPMask", 14), ("localIP", 15), ("localIPMask", 16), ("linkService", 17), ("serviceMode", 18), ("startTime", 19), ("stopTime", 20), ("timeOfModemSync", 21), ("timeOfService", 22), ("terminatingComponent", 23), ("terminationCause", 24), ("lastComponent", 25), ("layer1Slot", 26), ("layer2Slot", 27), ("calledNumber", 28), ("callingNumber", 29), ("originateMode", 30), ("octetsIn", 31), ("octetsOut", 32), ("packetsIn", 33), ("packetsOut", 34), ("multiLinkId", 35), ("port", 36), ("timeslot", 37), ("linkCount", 38), ("txStartDataRate", 39), ("rxStartDataRate", 40), ("txEndDataRate", 41), ("rxEndDataRate", 42), ("txMinDataRate", 43), ("rxMinDataRate", 44), ("txMaxDataRate", 45), ("rxMaxDataRate", 46), ("iop", 47), ("dmm", 48), ("pack", 49), ("device", 50), ("tdmStream", 51), ("tdmTimeSlot", 52), ("terminationReason", 53), ("duration", 54), ("durationHMS", 55), ("ss7SessionId", 56), ("modemNumber", 57), ("tunnelType", 58), ("tunnelMediumType", 59), ("tunnelServerAddress", 60), ("callClass", 61), ("tandemPort", 62), ("tandemTimeslot", 63), ("callClassArray", 64), ("callClassLen", 65), ("actualAuthMethod", 66), ("modemModulation", 67), ("modemErrorCorrection", 68), ("modemDataCompression", 69), ("modemTxBlocks", 70), ("modemRetransmits", 71), ("modemSNR", 72), ("modemLocalRetrains", 73), ("modemRemoteRetrains", 74), ("modemLocalRenegotiations", 75), ("modemRemoteRenegotiations", 76), ("modemReceiveLineLevel", 77), ("remoteIPXNetwork", 78), ("remoteIPXNode", 79), ("cleartcpRemoteIP", 80), ("cleartcpRemotePort", 81), ("tunnelId", 82), ("linkId", 83))).clone('state')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: sessionTableFormatParam7.setStatus('current')
sessionTableFormatHeading8 = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 251, 1, 33), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: sessionTableFormatHeading8.setStatus('current')
sessionTableFormatWidth8 = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 251, 1, 34), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 31)).clone(15)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: sessionTableFormatWidth8.setStatus('current')
sessionTableFormatParam8 = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 251, 1, 35), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83))).clone(namedValues=NamedValues(("none", 0), ("index", 1), ("sessionID", 2), ("state", 3), ("permanentFlag", 10), ("vpop", 11), ("name", 12), ("remoteIP", 13), ("remoteIPMask", 14), ("localIP", 15), ("localIPMask", 16), ("linkService", 17), ("serviceMode", 18), ("startTime", 19), ("stopTime", 20), ("timeOfModemSync", 21), ("timeOfService", 22), ("terminatingComponent", 23), ("terminationCause", 24), ("lastComponent", 25), ("layer1Slot", 26), ("layer2Slot", 27), ("calledNumber", 28), ("callingNumber", 29), ("originateMode", 30), ("octetsIn", 31), ("octetsOut", 32), ("packetsIn", 33), ("packetsOut", 34), ("multiLinkId", 35), ("port", 36), ("timeslot", 37), ("linkCount", 38), ("txStartDataRate", 39), ("rxStartDataRate", 40), ("txEndDataRate", 41), ("rxEndDataRate", 42), ("txMinDataRate", 43), ("rxMinDataRate", 44), ("txMaxDataRate", 45), ("rxMaxDataRate", 46), ("iop", 47), ("dmm", 48), ("pack", 49), ("device", 50), ("tdmStream", 51), ("tdmTimeSlot", 52), ("terminationReason", 53), ("duration", 54), ("durationHMS", 55), ("ss7SessionId", 56), ("modemNumber", 57), ("tunnelType", 58), ("tunnelMediumType", 59), ("tunnelServerAddress", 60), ("callClass", 61), ("tandemPort", 62), ("tandemTimeslot", 63), ("callClassArray", 64), ("callClassLen", 65), ("actualAuthMethod", 66), ("modemModulation", 67), ("modemErrorCorrection", 68), ("modemDataCompression", 69), ("modemTxBlocks", 70), ("modemRetransmits", 71), ("modemSNR", 72), ("modemLocalRetrains", 73), ("modemRemoteRetrains", 74), ("modemLocalRenegotiations", 75), ("modemRemoteRenegotiations", 76), ("modemReceiveLineLevel", 77), ("remoteIPXNetwork", 78), ("remoteIPXNode", 79), ("cleartcpRemoteIP", 80), ("cleartcpRemotePort", 81), ("tunnelId", 82), ("linkId", 83))).clone('remoteIP')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: sessionTableFormatParam8.setStatus('current')
sessionTableFormatHeading9 = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 251, 1, 36), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: sessionTableFormatHeading9.setStatus('current')
sessionTableFormatWidth9 = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 251, 1, 37), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 31)).clone(7)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: sessionTableFormatWidth9.setStatus('current')
sessionTableFormatParam9 = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 251, 1, 38), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83))).clone(namedValues=NamedValues(("none", 0), ("index", 1), ("sessionID", 2), ("state", 3), ("permanentFlag", 10), ("vpop", 11), ("name", 12), ("remoteIP", 13), ("remoteIPMask", 14), ("localIP", 15), ("localIPMask", 16), ("linkService", 17), ("serviceMode", 18), ("startTime", 19), ("stopTime", 20), ("timeOfModemSync", 21), ("timeOfService", 22), ("terminatingComponent", 23), ("terminationCause", 24), ("lastComponent", 25), ("layer1Slot", 26), ("layer2Slot", 27), ("calledNumber", 28), ("callingNumber", 29), ("originateMode", 30), ("octetsIn", 31), ("octetsOut", 32), ("packetsIn", 33), ("packetsOut", 34), ("multiLinkId", 35), ("port", 36), ("timeslot", 37), ("linkCount", 38), ("txStartDataRate", 39), ("rxStartDataRate", 40), ("txEndDataRate", 41), ("rxEndDataRate", 42), ("txMinDataRate", 43), ("rxMinDataRate", 44), ("txMaxDataRate", 45), ("rxMaxDataRate", 46), ("iop", 47), ("dmm", 48), ("pack", 49), ("device", 50), ("tdmStream", 51), ("tdmTimeSlot", 52), ("terminationReason", 53), ("duration", 54), ("durationHMS", 55), ("ss7SessionId", 56), ("modemNumber", 57), ("tunnelType", 58), ("tunnelMediumType", 59), ("tunnelServerAddress", 60), ("callClass", 61), ("tandemPort", 62), ("tandemTimeslot", 63), ("callClassArray", 64), ("callClassLen", 65), ("actualAuthMethod", 66), ("modemModulation", 67), ("modemErrorCorrection", 68), ("modemDataCompression", 69), ("modemTxBlocks", 70), ("modemRetransmits", 71), ("modemSNR", 72), ("modemLocalRetrains", 73), ("modemRemoteRetrains", 74), ("modemLocalRenegotiations", 75), ("modemRemoteRenegotiations", 76), ("modemReceiveLineLevel", 77), ("remoteIPXNetwork", 78), ("remoteIPXNode", 79), ("cleartcpRemoteIP", 80), ("cleartcpRemotePort", 81), ("tunnelId", 82), ("linkId", 83))).clone('calledNumber')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: sessionTableFormatParam9.setStatus('current')
sessionTableFormatHeading10 = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 251, 1, 39), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: sessionTableFormatHeading10.setStatus('current')
sessionTableFormatWidth10 = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 251, 1, 40), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 31)).clone(11)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: sessionTableFormatWidth10.setStatus('current')
sessionTableFormatParam10 = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 251, 1, 41), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83))).clone(namedValues=NamedValues(("none", 0), ("index", 1), ("sessionID", 2), ("state", 3), ("permanentFlag", 10), ("vpop", 11), ("name", 12), ("remoteIP", 13), ("remoteIPMask", 14), ("localIP", 15), ("localIPMask", 16), ("linkService", 17), ("serviceMode", 18), ("startTime", 19), ("stopTime", 20), ("timeOfModemSync", 21), ("timeOfService", 22), ("terminatingComponent", 23), ("terminationCause", 24), ("lastComponent", 25), ("layer1Slot", 26), ("layer2Slot", 27), ("calledNumber", 28), ("callingNumber", 29), ("originateMode", 30), ("octetsIn", 31), ("octetsOut", 32), ("packetsIn", 33), ("packetsOut", 34), ("multiLinkId", 35), ("port", 36), ("timeslot", 37), ("linkCount", 38), ("txStartDataRate", 39), ("rxStartDataRate", 40), ("txEndDataRate", 41), ("rxEndDataRate", 42), ("txMinDataRate", 43), ("rxMinDataRate", 44), ("txMaxDataRate", 45), ("rxMaxDataRate", 46), ("iop", 47), ("dmm", 48), ("pack", 49), ("device", 50), ("tdmStream", 51), ("tdmTimeSlot", 52), ("terminationReason", 53), ("duration", 54), ("durationHMS", 55), ("ss7SessionId", 56), ("modemNumber", 57), ("tunnelType", 58), ("tunnelMediumType", 59), ("tunnelServerAddress", 60), ("callClass", 61), ("tandemPort", 62), ("tandemTimeslot", 63), ("callClassArray", 64), ("callClassLen", 65), ("actualAuthMethod", 66), ("modemModulation", 67), ("modemErrorCorrection", 68), ("modemDataCompression", 69), ("modemTxBlocks", 70), ("modemRetransmits", 71), ("modemSNR", 72), ("modemLocalRetrains", 73), ("modemRemoteRetrains", 74), ("modemLocalRenegotiations", 75), ("modemRemoteRenegotiations", 76), ("modemReceiveLineLevel", 77), ("remoteIPXNetwork", 78), ("remoteIPXNode", 79), ("cleartcpRemoteIP", 80), ("cleartcpRemotePort", 81), ("tunnelId", 82), ("linkId", 83))).clone('name')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: sessionTableFormatParam10.setStatus('current')
policyConfigTable = MibTable((1, 3, 6, 1, 4, 1, 2637, 2, 1, 252), )
if mibBuilder.loadTexts: policyConfigTable.setStatus('current')
policyConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2637, 2, 1, 252, 1), ).setIndexNames((0, "APTIS-CONFIG-MIB", "policyConfigPathString"))
if mibBuilder.loadTexts: policyConfigEntry.setStatus('current')
policyConfigPathString = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 252, 1, 1), DisplayString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: policyConfigPathString.setStatus('current')
policyConfigRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 252, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: policyConfigRowStatus.setStatus('current')
policyConfigKeyValue = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 252, 1, 3), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: policyConfigKeyValue.setStatus('current')
policyConfigModemAllocationPolicy = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 252, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("loadBalance", 1), ("bestModem", 2), ("testMode", 3), ("combined", 4))).clone('combined')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: policyConfigModemAllocationPolicy.setStatus('current')
policyConfigModemReviveTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 252, 1, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 240)).clone(5)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: policyConfigModemReviveTimeout.setStatus('current')
policyConfigModemFailCount = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 252, 1, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 31)).clone(16)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: policyConfigModemFailCount.setStatus('current')
policyConfigModemFailSample = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 252, 1, 14), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 31)).clone(24)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: policyConfigModemFailSample.setStatus('current')
policyConfigReuseBadModems = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 252, 1, 15), Boolean().clone('true')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: policyConfigReuseBadModems.setStatus('current')
policyConfigDoSS7Resourcing = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 252, 1, 16), Boolean().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: policyConfigDoSS7Resourcing.setStatus('current')
policyConfigDefaultModemRPI = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 252, 1, 17), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 100)).clone(99)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: policyConfigDefaultModemRPI.setStatus('current')
policyConfigModemSleepTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 252, 1, 18), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 600)).clone(15)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: policyConfigModemSleepTimeout.setStatus('current')
policyConfigDNISMatchPolicy = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 252, 1, 19), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("best", 1), ("first", 2), ("any", 3))).clone('any')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: policyConfigDNISMatchPolicy.setStatus('current')
policyConfigDS1AllocationPolicy = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 252, 1, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("balance", 1), ("first", 2))).clone('first')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: policyConfigDS1AllocationPolicy.setStatus('current')
policyConfigDS0AllocationPolicy = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 252, 1, 21), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("random", 1), ("first", 2))).clone('first')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: policyConfigDS0AllocationPolicy.setStatus('current')
policyConfigChassisModemThresholdWarning = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 252, 1, 23), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 3468))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: policyConfigChassisModemThresholdWarning.setStatus('current')
policyConfigSlotModemThresholdWarning = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 252, 1, 24), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 204))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: policyConfigSlotModemThresholdWarning.setStatus('current')
policyConfigActionBacklog = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 252, 1, 25), Integer32().subtype(subtypeSpec=ValueRangeConstraint(5, 100)).clone(40)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: policyConfigActionBacklog.setStatus('current')
slotConfigTable = MibTable((1, 3, 6, 1, 4, 1, 2637, 2, 1, 202), )
if mibBuilder.loadTexts: slotConfigTable.setStatus('current')
slotConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2637, 2, 1, 202, 1), ).setIndexNames((0, "APTIS-CONFIG-MIB", "slotConfigPathString"))
if mibBuilder.loadTexts: slotConfigEntry.setStatus('current')
slotConfigPathString = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 202, 1, 1), DisplayString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: slotConfigPathString.setStatus('current')
slotConfigRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 202, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: slotConfigRowStatus.setStatus('current')
slotConfigKeyValue = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 202, 1, 3), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: slotConfigKeyValue.setStatus('current')
slotConfigAdminServiceModule = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 202, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("smEmpty", 0), ("smScc", 1), ("smMac", 2), ("smDac", 3))).clone('smEmpty')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: slotConfigAdminServiceModule.setStatus('current')
slotConfigAdminLineTerminationModule = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 202, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 820121, 820131, 820322, 820323, 820324, 820325, 820326, 820327, 820328, 820329))).clone(namedValues=NamedValues(("ltmEmpty", 0), ("dS3", 820121), ("dS3R", 820131), ("t1", 820322), ("e1", 820323), ("t1x24", 820324), ("e1x24", 820325), ("dS3x2", 820326), ("dS3x2R", 820327), ("dS3x2P", 820328), ("dS3x2PR", 820329))).clone('ltmEmpty')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: slotConfigAdminLineTerminationModule.setStatus('current')
t1ConfigTable = MibTable((1, 3, 6, 1, 4, 1, 2637, 2, 1, 2101), )
if mibBuilder.loadTexts: t1ConfigTable.setStatus('current')
t1ConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2637, 2, 1, 2101, 1), ).setIndexNames((0, "APTIS-CONFIG-MIB", "t1ConfigPathString"))
if mibBuilder.loadTexts: t1ConfigEntry.setStatus('current')
t1ConfigPathString = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 2101, 1, 1), DisplayString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: t1ConfigPathString.setStatus('current')
t1ConfigRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 2101, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: t1ConfigRowStatus.setStatus('current')
t1ConfigKeyValue = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 2101, 1, 3), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: t1ConfigKeyValue.setStatus('current')
t1ConfigAdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 2101, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2), ("pendingDisable", 3), ("transmitAis", 4))).clone('enabled')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: t1ConfigAdminState.setStatus('current')
t1ConfigLineFraming = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 2101, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("esf", 1), ("sf", 2))).clone('esf')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: t1ConfigLineFraming.setStatus('current')
t1ConfigLineCode = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 2101, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("b8zs", 1), ("ami", 2))).clone('b8zs')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: t1ConfigLineCode.setStatus('current')
t1ConfigLineBuildout = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 2101, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10))).clone(namedValues=NamedValues(("x225", 1), ("x150", 2), ("x75", 3), ("x00", 4), ("x06", 5), ("x12", 6), ("x18", 7), ("x24", 8), ("x30", 9), ("e1", 10))).clone('x00')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: t1ConfigLineBuildout.setStatus('current')
t1ConfigSignaling = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 2101, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3, 4))).clone(namedValues=NamedValues(("isdn", 2), ("rbs", 3), ("ss7", 4))).clone('isdn')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: t1ConfigSignaling.setStatus('current')
t1ConfigClockingPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 2101, 1, 17), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 9)).clone(1)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: t1ConfigClockingPriority.setStatus('current')
t1ConfigYellowAlarm = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 2101, 1, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("northAmerica", 1), ("japan", 2))).clone('northAmerica')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: t1ConfigYellowAlarm.setStatus('current')
t1ConfigLoopBack = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 2101, 1, 19), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("none", 1), ("line", 2), ("payload", 3), ("farEndUp", 4), ("farEndDown", 5))).clone('none')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: t1ConfigLoopBack.setStatus('current')
t1ConfigDefaultNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 2101, 1, 20), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: t1ConfigDefaultNumber.setStatus('current')
t1ConfigOverrideNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 2101, 1, 21), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: t1ConfigOverrideNumber.setStatus('current')
t1ConfigCircuitID = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 2101, 1, 22), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: t1ConfigCircuitID.setStatus('current')
t1ConfigAlarmCriteria = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 2101, 1, 23), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("aNSI", 1), ("iTUT", 2), ("iTUTNet", 3))).clone('aNSI')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: t1ConfigAlarmCriteria.setStatus('current')
t1NumberTable = MibTable((1, 3, 6, 1, 4, 1, 2637, 2, 1, 2107), )
if mibBuilder.loadTexts: t1NumberTable.setStatus('current')
t1NumberEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2637, 2, 1, 2107, 1), ).setIndexNames((0, "APTIS-CONFIG-MIB", "t1NumberPathString"))
if mibBuilder.loadTexts: t1NumberEntry.setStatus('current')
t1NumberPathString = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 2107, 1, 1), DisplayString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: t1NumberPathString.setStatus('current')
t1NumberRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 2107, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: t1NumberRowStatus.setStatus('current')
t1NumberKeyValue = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 2107, 1, 3), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: t1NumberKeyValue.setStatus('current')
t1NumberNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 2107, 1, 11), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: t1NumberNumber.setStatus('current')
t1TrunkconfigTable = MibTable((1, 3, 6, 1, 4, 1, 2637, 2, 1, 2105), )
if mibBuilder.loadTexts: t1TrunkconfigTable.setStatus('current')
t1TrunkconfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2637, 2, 1, 2105, 1), ).setIndexNames((0, "APTIS-CONFIG-MIB", "t1TrunkconfigPathString"))
if mibBuilder.loadTexts: t1TrunkconfigEntry.setStatus('current')
t1TrunkconfigPathString = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 2105, 1, 1), DisplayString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: t1TrunkconfigPathString.setStatus('current')
t1TrunkconfigRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 2105, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: t1TrunkconfigRowStatus.setStatus('current')
t1TrunkconfigKeyValue = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 2105, 1, 3), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: t1TrunkconfigKeyValue.setStatus('current')
t1TrunkconfigAdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 2105, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2), ("pendingDisable", 3))).clone('enabled')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: t1TrunkconfigAdminState.setStatus('current')
t1TrunkconfigClockSource = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 2105, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 100, 101))).clone(namedValues=NamedValues(("port1", 1), ("port2", 2), ("port3", 3), ("port4", 4), ("port5", 5), ("port6", 6), ("port7", 7), ("port8", 8), ("local", 100), ("recover", 101))).clone('recover')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: t1TrunkconfigClockSource.setStatus('current')
t1TrunkconfigLineFraming = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 2105, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("esf", 1), ("sf", 2))).clone('esf')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: t1TrunkconfigLineFraming.setStatus('current')
t1TrunkconfigLineCode = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 2105, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("b8zs", 1), ("ami", 2))).clone('b8zs')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: t1TrunkconfigLineCode.setStatus('current')
t1TrunkconfigLineBuildout = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 2105, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10))).clone(namedValues=NamedValues(("x225", 1), ("x150", 2), ("x75", 3), ("x00", 4), ("x06", 5), ("x12", 6), ("x18", 7), ("x24", 8), ("x30", 9), ("e1", 10))).clone('x00')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: t1TrunkconfigLineBuildout.setStatus('current')
dS3TrunkconfigTable = MibTable((1, 3, 6, 1, 4, 1, 2637, 2, 1, 2011), )
if mibBuilder.loadTexts: dS3TrunkconfigTable.setStatus('current')
dS3TrunkconfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2637, 2, 1, 2011, 1), ).setIndexNames((0, "APTIS-CONFIG-MIB", "dS3TrunkconfigPathString"))
if mibBuilder.loadTexts: dS3TrunkconfigEntry.setStatus('current')
dS3TrunkconfigPathString = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 2011, 1, 1), DisplayString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: dS3TrunkconfigPathString.setStatus('current')
dS3TrunkconfigRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 2011, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: dS3TrunkconfigRowStatus.setStatus('current')
dS3TrunkconfigKeyValue = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 2011, 1, 3), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: dS3TrunkconfigKeyValue.setStatus('current')
dS3TrunkconfigAdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 2011, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('disabled')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: dS3TrunkconfigAdminState.setStatus('current')
dS3TrunkconfigLineFraming = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 2011, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("m13", 1), ("cBitParity", 2))).clone('cBitParity')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: dS3TrunkconfigLineFraming.setStatus('current')
dS3TrunkconfigLineBuildout = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 2011, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("short", 1), ("long", 2))).clone('short')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: dS3TrunkconfigLineBuildout.setStatus('current')
dS3TrunkconfigTiming = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 2011, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("loop", 1), ("local", 2))).clone('local')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: dS3TrunkconfigTiming.setStatus('current')
t1liuConfigTable = MibTable((1, 3, 6, 1, 4, 1, 2637, 2, 1, 2007), )
if mibBuilder.loadTexts: t1liuConfigTable.setStatus('current')
t1liuConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2637, 2, 1, 2007, 1), ).setIndexNames((0, "APTIS-CONFIG-MIB", "t1liuConfigPathString"))
if mibBuilder.loadTexts: t1liuConfigEntry.setStatus('current')
t1liuConfigPathString = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 2007, 1, 1), DisplayString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: t1liuConfigPathString.setStatus('current')
t1liuConfigRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 2007, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: t1liuConfigRowStatus.setStatus('current')
t1liuConfigKeyValue = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 2007, 1, 3), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: t1liuConfigKeyValue.setStatus('current')
t1liuConfigAdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 2007, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2), ("pendingDisable", 3))).clone('enabled')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: t1liuConfigAdminState.setStatus('current')
t1liuConfigCircuitID = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 2007, 1, 12), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: t1liuConfigCircuitID.setStatus('current')
t3ConfigTable = MibTable((1, 3, 6, 1, 4, 1, 2637, 2, 1, 2005), )
if mibBuilder.loadTexts: t3ConfigTable.setStatus('current')
t3ConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2637, 2, 1, 2005, 1), ).setIndexNames((0, "APTIS-CONFIG-MIB", "t3ConfigPathString"))
if mibBuilder.loadTexts: t3ConfigEntry.setStatus('current')
t3ConfigPathString = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 2005, 1, 1), DisplayString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: t3ConfigPathString.setStatus('current')
t3ConfigRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 2005, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: t3ConfigRowStatus.setStatus('current')
t3ConfigKeyValue = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 2005, 1, 3), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: t3ConfigKeyValue.setStatus('current')
t3ConfigAdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 2005, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2), ("pendingDisable", 3), ("transmitAis", 4))).clone('enabled')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: t3ConfigAdminState.setStatus('current')
t3ConfigLineFraming = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 2005, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("m13", 1), ("cBitParity", 2))).clone('m13')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: t3ConfigLineFraming.setStatus('current')
t3ConfigLineCode = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 2005, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("b3zs", 1), ("notB3zs", 2))).clone('b3zs')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: t3ConfigLineCode.setStatus('current')
t3ConfigLineBuildout = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 2005, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("short", 1), ("long", 2))).clone('short')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: t3ConfigLineBuildout.setStatus('current')
t3ConfigTiming = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 2005, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("loop", 1), ("local", 2))).clone('local')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: t3ConfigTiming.setStatus('current')
t3ConfigLoopBack = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 2005, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("none", 0), ("local", 1), ("remote", 2))).clone('none')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: t3ConfigLoopBack.setStatus('current')
t3ConfigCircuitID = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 2005, 1, 17), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: t3ConfigCircuitID.setStatus('current')
signalingGatewayTable = MibTable((1, 3, 6, 1, 4, 1, 2637, 2, 1, 511), )
if mibBuilder.loadTexts: signalingGatewayTable.setStatus('current')
signalingGatewayEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2637, 2, 1, 511, 1), ).setIndexNames((0, "APTIS-CONFIG-MIB", "signalingGatewayPathString"))
if mibBuilder.loadTexts: signalingGatewayEntry.setStatus('current')
signalingGatewayPathString = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 511, 1, 1), DisplayString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: signalingGatewayPathString.setStatus('current')
signalingGatewayRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 511, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: signalingGatewayRowStatus.setStatus('current')
signalingGatewayKeyValue = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 511, 1, 3), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: signalingGatewayKeyValue.setStatus('current')
signalingGatewayIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 511, 1, 13), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: signalingGatewayIpAddr.setStatus('current')
dacConfigTable = MibTable((1, 3, 6, 1, 4, 1, 2637, 2, 1, 2001), )
if mibBuilder.loadTexts: dacConfigTable.setStatus('current')
dacConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2637, 2, 1, 2001, 1), ).setIndexNames((0, "APTIS-CONFIG-MIB", "dacConfigPathString"))
if mibBuilder.loadTexts: dacConfigEntry.setStatus('current')
dacConfigPathString = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 2001, 1, 1), DisplayString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: dacConfigPathString.setStatus('current')
dacConfigRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 2001, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: dacConfigRowStatus.setStatus('current')
dacConfigKeyValue = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 2001, 1, 3), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: dacConfigKeyValue.setStatus('current')
dacConfigAdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 2001, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2), ("pendingDisable", 3))).clone('enabled')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: dacConfigAdminState.setStatus('current')
tunnelGroupConfigTable = MibTable((1, 3, 6, 1, 4, 1, 2637, 2, 1, 1502), )
if mibBuilder.loadTexts: tunnelGroupConfigTable.setStatus('current')
tunnelGroupConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2637, 2, 1, 1502, 1), ).setIndexNames((0, "APTIS-CONFIG-MIB", "tunnelGroupConfigPathString"))
if mibBuilder.loadTexts: tunnelGroupConfigEntry.setStatus('current')
tunnelGroupConfigPathString = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 1502, 1, 1), DisplayString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tunnelGroupConfigPathString.setStatus('current')
tunnelGroupConfigRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 1502, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tunnelGroupConfigRowStatus.setStatus('current')
tunnelGroupConfigKeyValue = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 1502, 1, 3), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tunnelGroupConfigKeyValue.setStatus('current')
tunnelGroupConfigTunnelProtocol = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 1502, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4))).clone(namedValues=NamedValues(("none", 0), ("l2F", 1), ("l2TP", 2), ("dVS", 3), ("aTMP", 4))).clone('none')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tunnelGroupConfigTunnelProtocol.setStatus('current')
tunnelGroupConfigTunnelStrategy = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 1502, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("none", 0), ("loadBalance", 1))).clone('none')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tunnelGroupConfigTunnelStrategy.setStatus('current')
frInterfaceConfigTable = MibTable((1, 3, 6, 1, 4, 1, 2637, 2, 1, 3001), )
if mibBuilder.loadTexts: frInterfaceConfigTable.setStatus('current')
frInterfaceConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2637, 2, 1, 3001, 1), ).setIndexNames((0, "APTIS-CONFIG-MIB", "frInterfaceConfigPathString"))
if mibBuilder.loadTexts: frInterfaceConfigEntry.setStatus('current')
frInterfaceConfigPathString = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 3001, 1, 1), DisplayString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: frInterfaceConfigPathString.setStatus('current')
frInterfaceConfigRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 3001, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: frInterfaceConfigRowStatus.setStatus('current')
frInterfaceConfigKeyValue = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 3001, 1, 3), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: frInterfaceConfigKeyValue.setStatus('current')
frInterfaceConfigFrDlcmiIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 3001, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 8))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: frInterfaceConfigFrDlcmiIfIndex.setStatus('current')
frInterfaceConfigFrDlcmiLMIType = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 3001, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("lmiNone", 1), ("lmiRev1", 2), ("annexD", 3), ("annexB", 4), ("iTU933A", 5))).clone('annexD')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: frInterfaceConfigFrDlcmiLMIType.setStatus('current')
frInterfaceConfigFrDlcmiAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 3001, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("q921", 1), ("q922March90", 2), ("q922November90", 3), ("q922", 4))).clone('q922')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: frInterfaceConfigFrDlcmiAddress.setStatus('current')
frInterfaceConfigFrDlcmiAddressLen = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 3001, 1, 14), Integer32().subtype(subtypeSpec=ValueRangeConstraint(2, 4)).clone(2)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: frInterfaceConfigFrDlcmiAddressLen.setStatus('current')
frInterfaceConfigFrDlcmiPollingInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 3001, 1, 15), Integer32().subtype(subtypeSpec=ValueRangeConstraint(5, 30)).clone(10)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: frInterfaceConfigFrDlcmiPollingInterval.setStatus('current')
frInterfaceConfigFrDlcmiFullEnquiryInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 3001, 1, 16), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255)).clone(6)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: frInterfaceConfigFrDlcmiFullEnquiryInterval.setStatus('current')
frInterfaceConfigFrDlcmiErrorThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 3001, 1, 17), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 10)).clone(3)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: frInterfaceConfigFrDlcmiErrorThreshold.setStatus('current')
frInterfaceConfigFrDlcmiMonitoredEvents = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 3001, 1, 18), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 10)).clone(4)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: frInterfaceConfigFrDlcmiMonitoredEvents.setStatus('current')
frInterfaceConfigFrDlcmiMaxSupportedVCs = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 3001, 1, 19), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 976)).clone(100)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: frInterfaceConfigFrDlcmiMaxSupportedVCs.setStatus('current')
frInterfaceConfigFrDlcmiMulticast = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 3001, 1, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("nonBroadcast", 1), ("broadcast", 2))).clone('broadcast')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: frInterfaceConfigFrDlcmiMulticast.setStatus('current')
frInterfaceConfigFrDlcmiLinkType = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 3001, 1, 21), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("uniDce", 1), ("uniDte", 2), ("nni", 3))).clone('uniDte')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: frInterfaceConfigFrDlcmiLinkType.setStatus('current')
frInterfaceConfigFrDlcmiMaxLogIntf = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 3001, 1, 22), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 976)).clone(10)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: frInterfaceConfigFrDlcmiMaxLogIntf.setStatus('current')
frInterfaceConfigFrDlcmiLinkEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 3001, 1, 23), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disable", 1), ("enable", 2))).clone('enable')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: frInterfaceConfigFrDlcmiLinkEnable.setStatus('current')
frInterfaceConfigFrDlcmiLMIFlowControl = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 3001, 1, 24), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disable", 1), ("enable", 2))).clone('disable')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: frInterfaceConfigFrDlcmiLMIFlowControl.setStatus('current')
frInterfaceConfigFrDlcmiBECNFlowControl = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 3001, 1, 25), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disable", 1), ("enable", 2))).clone('disable')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: frInterfaceConfigFrDlcmiBECNFlowControl.setStatus('current')
frInterfaceConfigFrDlcmiLMIBandwidthControl = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 3001, 1, 26), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disable", 1), ("enable", 2))).clone('disable')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: frInterfaceConfigFrDlcmiLMIBandwidthControl.setStatus('current')
frInterfaceConfigFrDlcmiInjectionManagement = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 3001, 1, 27), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("forced", 1), ("buffered", 2), ("standard", 3))).clone('forced')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: frInterfaceConfigFrDlcmiInjectionManagement.setStatus('current')
frInterfaceConfigFrDlcmiMaxFrameSize = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 3001, 1, 28), Integer32().clone(1600)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: frInterfaceConfigFrDlcmiMaxFrameSize.setStatus('current')
frInterfaceConfigFrDlcmiName = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 3001, 1, 29), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: frInterfaceConfigFrDlcmiName.setStatus('current')
frInterfaceConfigFrDlcmiLmiDlci = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 3001, 1, 30), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1023))).clone(namedValues=NamedValues(("dlci0", 0), ("dlci1023", 1023))).clone('dlci0')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: frInterfaceConfigFrDlcmiLmiDlci.setStatus('current')
frInterfaceConfigFrDlcmiDceErrorThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 3001, 1, 31), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 10)).clone(3)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: frInterfaceConfigFrDlcmiDceErrorThreshold.setStatus('current')
frInterfaceConfigFrDlcmiDceMonitoredEvents = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 3001, 1, 32), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 10)).clone(4)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: frInterfaceConfigFrDlcmiDceMonitoredEvents.setStatus('current')
frLogicalIFConfigTable = MibTable((1, 3, 6, 1, 4, 1, 2637, 2, 1, 3003), )
if mibBuilder.loadTexts: frLogicalIFConfigTable.setStatus('current')
frLogicalIFConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2637, 2, 1, 3003, 1), ).setIndexNames((0, "APTIS-CONFIG-MIB", "frLogicalIFConfigPathString"))
if mibBuilder.loadTexts: frLogicalIFConfigEntry.setStatus('current')
frLogicalIFConfigPathString = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 3003, 1, 1), DisplayString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: frLogicalIFConfigPathString.setStatus('current')
frLogicalIFConfigRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 3003, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: frLogicalIFConfigRowStatus.setStatus('current')
frLogicalIFConfigKeyValue = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 3003, 1, 3), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: frLogicalIFConfigKeyValue.setStatus('current')
frLogicalIFConfigFrLIFIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 3003, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 8))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: frLogicalIFConfigFrLIFIfIndex.setStatus('current')
frLogicalIFConfigFrLIFIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 3003, 1, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 976))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: frLogicalIFConfigFrLIFIndex.setStatus('current')
frLogicalIFConfigFrLIFEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 3003, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disable", 1), ("enable", 2))).clone('disable')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: frLogicalIFConfigFrLIFEnable.setStatus('current')
frLogicalIFConfigFrLIFName = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 3003, 1, 14), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: frLogicalIFConfigFrLIFName.setStatus('current')
frCircuitConfigTable = MibTable((1, 3, 6, 1, 4, 1, 2637, 2, 1, 3004), )
if mibBuilder.loadTexts: frCircuitConfigTable.setStatus('current')
frCircuitConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2637, 2, 1, 3004, 1), ).setIndexNames((0, "APTIS-CONFIG-MIB", "frCircuitConfigPathString"))
if mibBuilder.loadTexts: frCircuitConfigEntry.setStatus('current')
frCircuitConfigPathString = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 3004, 1, 1), DisplayString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: frCircuitConfigPathString.setStatus('current')
frCircuitConfigRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 3004, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: frCircuitConfigRowStatus.setStatus('current')
frCircuitConfigKeyValue = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 3004, 1, 3), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: frCircuitConfigKeyValue.setStatus('current')
frCircuitConfigFrCircuitIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 3004, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 8))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: frCircuitConfigFrCircuitIfIndex.setStatus('current')
frCircuitConfigFrCircuitLIFIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 3004, 1, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 976))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: frCircuitConfigFrCircuitLIFIndex.setStatus('current')
frCircuitConfigFrCircuitDlci = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 3004, 1, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(16, 991)).clone(16)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: frCircuitConfigFrCircuitDlci.setStatus('current')
frCircuitConfigFrCircuitCommittedBurst = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 3004, 1, 15), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: frCircuitConfigFrCircuitCommittedBurst.setStatus('current')
frCircuitConfigFrCircuitExcessBurst = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 3004, 1, 16), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: frCircuitConfigFrCircuitExcessBurst.setStatus('current')
frCircuitConfigFrCircuitThroughput = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 3004, 1, 17), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: frCircuitConfigFrCircuitThroughput.setStatus('current')
frCircuitConfigFrCircuitMulticast = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 3004, 1, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("unicast", 1), ("oneWay", 2), ("twoWay", 3), ("mcast", 4))).clone('unicast')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: frCircuitConfigFrCircuitMulticast.setStatus('current')
frCircuitConfigFrCircuitVCCEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 3004, 1, 21), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disable", 1), ("enable", 2))).clone('enable')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: frCircuitConfigFrCircuitVCCEnable.setStatus('current')
frCircuitConfigFrCircuitCommittedBurstMin = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 3004, 1, 22), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: frCircuitConfigFrCircuitCommittedBurstMin.setStatus('current')
frCircuitConfigFrCircuitCongestionMonitorPeriod = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 3004, 1, 23), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: frCircuitConfigFrCircuitCongestionMonitorPeriod.setStatus('current')
frCircuitConfigFrCircuitName = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 3004, 1, 24), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: frCircuitConfigFrCircuitName.setStatus('current')
ethernetConfigTable = MibTable((1, 3, 6, 1, 4, 1, 2637, 2, 1, 3051), )
if mibBuilder.loadTexts: ethernetConfigTable.setStatus('current')
ethernetConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2637, 2, 1, 3051, 1), ).setIndexNames((0, "APTIS-CONFIG-MIB", "ethernetConfigPathString"))
if mibBuilder.loadTexts: ethernetConfigEntry.setStatus('current')
ethernetConfigPathString = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 3051, 1, 1), DisplayString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ethernetConfigPathString.setStatus('current')
ethernetConfigRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 3051, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ethernetConfigRowStatus.setStatus('current')
ethernetConfigKeyValue = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 3051, 1, 3), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ethernetConfigKeyValue.setStatus('current')
ethernetConfigEthernetPhyPort = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 3051, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 5))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ethernetConfigEthernetPhyPort.setStatus('current')
ethernetConfigEthernetEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 3051, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disable", 1), ("enable", 2))).clone('disable')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ethernetConfigEthernetEnable.setStatus('current')
ethernetConfigEthernetTlen = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 3051, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(3, 4, 5, 6, 7, 8, 9))).clone(namedValues=NamedValues(("ringLen8", 3), ("ringLen16", 4), ("ringLen32", 5), ("ringLen64", 6), ("ringLen128", 7), ("ringLen256", 8), ("ringLen512", 9))).clone('ringLen128')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ethernetConfigEthernetTlen.setStatus('current')
ethernetConfigEthernetRlen = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 3051, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(3, 4, 5, 6, 7, 8, 9))).clone(namedValues=NamedValues(("ringLen8", 3), ("ringLen16", 4), ("ringLen32", 5), ("ringLen64", 6), ("ringLen128", 7), ("ringLen256", 8), ("ringLen512", 9))).clone('ringLen128')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ethernetConfigEthernetRlen.setStatus('current')
ethernetConfigEthernetAutoneg = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 3051, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("autonegOff", 0), ("autonegOn", 1))).clone('autonegOn')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ethernetConfigEthernetAutoneg.setStatus('current')
ethernetConfigEthernetPortspeed = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 3051, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("x10mbps", 0), ("x100mbps", 1))).clone('x10mbps')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ethernetConfigEthernetPortspeed.setStatus('current')
ethernetConfigEthernetFullduplex = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 3051, 1, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("fullduplexOff", 0), ("fullduplexOn", 1))).clone('fullduplexOn')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ethernetConfigEthernetFullduplex.setStatus('current')
ethernetConfigEthernetPromEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 3051, 1, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("promOff", 0), ("promOn", 1))).clone('promOff')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ethernetConfigEthernetPromEnable.setStatus('current')
ethernetConfigEthernetBcastControl = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 3051, 1, 19), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("bcastEnable", 0), ("bcastDisable", 1))).clone('bcastEnable')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ethernetConfigEthernetBcastControl.setStatus('current')
ethernetConfigEthernetFCSControl = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 3051, 1, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("fcsEnable", 0), ("fcsDisable", 1))).clone('fcsEnable')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ethernetConfigEthernetFCSControl.setStatus('current')
ethernetConfigEthernetLoopback = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 3051, 1, 21), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("noLoopback", 0), ("internalLoopback", 1), ("externalLoopback", 2), ("miiLoopback", 3))).clone('noLoopback')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ethernetConfigEthernetLoopback.setStatus('current')
ethernetConfigEthernetLinkTest = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 3051, 1, 22), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("ltEnable", 0), ("ltDisable", 1))).clone('ltEnable')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ethernetConfigEthernetLinkTest.setStatus('current')
ipWin32Table = MibTable((1, 3, 6, 1, 4, 1, 2637, 2, 1, 3052), )
if mibBuilder.loadTexts: ipWin32Table.setStatus('current')
ipWin32Entry = MibTableRow((1, 3, 6, 1, 4, 1, 2637, 2, 1, 3052, 1), ).setIndexNames((0, "APTIS-CONFIG-MIB", "ipWin32PathString"))
if mibBuilder.loadTexts: ipWin32Entry.setStatus('current')
ipWin32PathString = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 3052, 1, 1), DisplayString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ipWin32PathString.setStatus('current')
ipWin32RowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 3052, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ipWin32RowStatus.setStatus('current')
ipWin32KeyValue = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 3052, 1, 3), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ipWin32KeyValue.setStatus('current')
ipWin32Instance = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 3052, 1, 11), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ipWin32Instance.setStatus('current')
ipWin32Devname = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 3052, 1, 12), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ipWin32Devname.setStatus('current')
loopbackConfigTable = MibTable((1, 3, 6, 1, 4, 1, 2637, 2, 1, 3101), )
if mibBuilder.loadTexts: loopbackConfigTable.setStatus('current')
loopbackConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2637, 2, 1, 3101, 1), ).setIndexNames((0, "APTIS-CONFIG-MIB", "loopbackConfigPathString"))
if mibBuilder.loadTexts: loopbackConfigEntry.setStatus('current')
loopbackConfigPathString = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 3101, 1, 1), DisplayString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: loopbackConfigPathString.setStatus('current')
loopbackConfigRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 3101, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: loopbackConfigRowStatus.setStatus('current')
loopbackConfigKeyValue = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 3101, 1, 3), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: loopbackConfigKeyValue.setStatus('current')
loopbackConfigMode = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 3101, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("deliver", 0), ("discard", 1), ("reject", 2))).clone('deliver')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: loopbackConfigMode.setStatus('current')
loopbackConfigAdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 3101, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('disabled')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: loopbackConfigAdminState.setStatus('current')
rbsConfigTable = MibTable((1, 3, 6, 1, 4, 1, 2637, 2, 1, 2205), )
if mibBuilder.loadTexts: rbsConfigTable.setStatus('current')
rbsConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2637, 2, 1, 2205, 1), ).setIndexNames((0, "APTIS-CONFIG-MIB", "rbsConfigPathString"))
if mibBuilder.loadTexts: rbsConfigEntry.setStatus('current')
rbsConfigPathString = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 2205, 1, 1), DisplayString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: rbsConfigPathString.setStatus('current')
rbsConfigRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 2205, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: rbsConfigRowStatus.setStatus('current')
rbsConfigKeyValue = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 2205, 1, 3), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: rbsConfigKeyValue.setStatus('current')
rbsConfigMethod = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 2205, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9))).clone(namedValues=NamedValues(("emWinkStart", 1), ("emDdsdStart", 2), ("emImmediateStart", 3), ("fxoLoopStart", 4), ("fxsLoopStart", 5), ("fxoGroundStart", 6), ("fxsGroundStart", 7), ("featureGroupD", 8), ("taiwanMfr1", 9))).clone('emWinkStart')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: rbsConfigMethod.setStatus('current')
rbsConfigDid = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 2205, 1, 13), Boolean().clone('true')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: rbsConfigDid.setStatus('current')
rbsConfigAllowNoDigits = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 2205, 1, 14), Boolean().clone('true')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: rbsConfigAllowNoDigits.setStatus('current')
rbsConfigDod = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 2205, 1, 15), Boolean().clone('true')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: rbsConfigDod.setStatus('current')
rbsConfigGlareResolve = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 2205, 1, 17), Boolean().clone('true')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: rbsConfigGlareResolve.setStatus('current')
rbsConfigOOS = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 2205, 1, 19), Boolean().clone('true')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: rbsConfigOOS.setStatus('current')
rbsConfigBusyOutOOS = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 2205, 1, 20), Boolean().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: rbsConfigBusyOutOOS.setStatus('current')
rbsConfigDigitType = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 2205, 1, 21), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("dtmf", 1), ("mf", 2), ("pulse", 3))).clone('pulse')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: rbsConfigDigitType.setStatus('current')
rbsConfigMaxCalledDigits = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 2205, 1, 22), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 24)).clone(4)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: rbsConfigMaxCalledDigits.setStatus('current')
rbsConfigReqR1CallingNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 2205, 1, 23), Boolean().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: rbsConfigReqR1CallingNumber.setStatus('current')
rbsTimersTable = MibTable((1, 3, 6, 1, 4, 1, 2637, 2, 1, 2206), )
if mibBuilder.loadTexts: rbsTimersTable.setStatus('current')
rbsTimersEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2637, 2, 1, 2206, 1), ).setIndexNames((0, "APTIS-CONFIG-MIB", "rbsTimersPathString"))
if mibBuilder.loadTexts: rbsTimersEntry.setStatus('current')
rbsTimersPathString = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 2206, 1, 1), DisplayString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: rbsTimersPathString.setStatus('current')
rbsTimersRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 2206, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: rbsTimersRowStatus.setStatus('current')
rbsTimersKeyValue = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 2206, 1, 3), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: rbsTimersKeyValue.setStatus('current')
rbsTimersHitThresh = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 2206, 1, 11), Integer32().clone(40)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: rbsTimersHitThresh.setStatus('current')
rbsTimersInSeizeHold = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 2206, 1, 12), Integer32().clone(30)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: rbsTimersInSeizeHold.setStatus('current')
rbsTimersInPreWinkExtend = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 2206, 1, 13), Integer32().clone(3600)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: rbsTimersInPreWinkExtend.setStatus('current')
rbsTimersInMinWinkHold = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 2206, 1, 14), Integer32().clone(200)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: rbsTimersInMinWinkHold.setStatus('current')
rbsTimersInMaxWinkHold = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 2206, 1, 15), Integer32().clone(290)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: rbsTimersInMaxWinkHold.setStatus('current')
rbsTimersInPostWink = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 2206, 1, 16), Integer32().clone(70)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: rbsTimersInPostWink.setStatus('current')
rbsTimersInDigit = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 2206, 1, 17), Integer32().clone(30000)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: rbsTimersInDigit.setStatus('current')
rbsTimersAlerting = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 2206, 1, 18), Integer32().clone(30000)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: rbsTimersAlerting.setStatus('current')
rbsTimersOutSeizeHold = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 2206, 1, 19), Integer32().clone(215)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: rbsTimersOutSeizeHold.setStatus('current')
rbsTimersOutWinkWait = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 2206, 1, 20), Integer32().clone(5000)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: rbsTimersOutWinkWait.setStatus('current')
rbsTimersOutMaxWinkHold = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 2206, 1, 21), Integer32().clone(350)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: rbsTimersOutMaxWinkHold.setStatus('current')
rbsTimersOutMaxWinkGlare = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 2206, 1, 22), Integer32().clone(30000)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: rbsTimersOutMaxWinkGlare.setStatus('current')
rbsTimersOutWaitSeizeAck = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 2206, 1, 23), Integer32().clone(5000)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: rbsTimersOutWaitSeizeAck.setStatus('current')
rbsTimersOutPostWink = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 2206, 1, 24), Integer32().clone(70)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: rbsTimersOutPostWink.setStatus('current')
rbsTimersOutFirstDigit = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 2206, 1, 25), Integer32().clone(5000)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: rbsTimersOutFirstDigit.setStatus('current')
rbsTimersOutDigit = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 2206, 1, 26), Integer32().clone(15000)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: rbsTimersOutDigit.setStatus('current')
rbsTimersOutPostDigit = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 2206, 1, 27), Integer32().clone(2000)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: rbsTimersOutPostDigit.setStatus('current')
rbsTimersOutWaitConnect = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 2206, 1, 28), Integer32().clone(30000)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: rbsTimersOutWaitConnect.setStatus('current')
rbsTimersOutConnectHold = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 2206, 1, 29), Integer32().clone(200)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: rbsTimersOutConnectHold.setStatus('current')
rbsTimersLocalRelease = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 2206, 1, 30), Integer32().clone(30000)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: rbsTimersLocalRelease.setStatus('current')
rbsTimersLineRelease = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 2206, 1, 31), Integer32().clone(10000)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: rbsTimersLineRelease.setStatus('current')
rbsTimersLineReleaseHold = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 2206, 1, 32), Integer32().clone(200)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: rbsTimersLineReleaseHold.setStatus('current')
rbsTimersRecover = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 2206, 1, 33), Integer32().clone(1000)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: rbsTimersRecover.setStatus('current')
rbsTimersInWaitKP = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 2206, 1, 34), Integer32().clone(10000)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: rbsTimersInWaitKP.setStatus('current')
rbsTimersInPostDigitDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 2206, 1, 35), Integer32().clone(200)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: rbsTimersInPostDigitDelay.setStatus('current')
rbsTimersInToneDigitWait = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 2206, 1, 36), Integer32().clone(4000)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: rbsTimersInToneDigitWait.setStatus('current')
rbsTimersInKpAckDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 2206, 1, 37), Integer32().clone(100)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: rbsTimersInKpAckDelay.setStatus('current')
rbsTimersInKpDetectWait = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 2206, 1, 38), Integer32().clone(500)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: rbsTimersInKpDetectWait.setStatus('current')
rbsTimersInAniWaitKp = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 2206, 1, 39), Integer32().clone(5000)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: rbsTimersInAniWaitKp.setStatus('current')
rbsTimersInPreKpExtend = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 2206, 1, 40), Integer32().clone(12000)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: rbsTimersInPreKpExtend.setStatus('current')
rbsTimersOutPreDialQuietHold = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 2206, 1, 41), Integer32().clone(100)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: rbsTimersOutPreDialQuietHold.setStatus('current')
ipLocalSessionTable = MibTable((1, 3, 6, 1, 4, 1, 2637, 2, 1, 4010), )
if mibBuilder.loadTexts: ipLocalSessionTable.setStatus('current')
ipLocalSessionEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2637, 2, 1, 4010, 1), ).setIndexNames((0, "APTIS-CONFIG-MIB", "ipLocalSessionPathString"))
if mibBuilder.loadTexts: ipLocalSessionEntry.setStatus('current')
ipLocalSessionPathString = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 4010, 1, 1), DisplayString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ipLocalSessionPathString.setStatus('current')
ipLocalSessionRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 4010, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ipLocalSessionRowStatus.setStatus('current')
ipLocalSessionKeyValue = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 4010, 1, 3), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ipLocalSessionKeyValue.setStatus('current')
ipLocalSessionRemoteIp = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 4010, 1, 11), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ipLocalSessionRemoteIp.setStatus('current')
ipLocalSessionRemoteMask = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 4010, 1, 12), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ipLocalSessionRemoteMask.setStatus('current')
ipLocalSessionLocalIp = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 4010, 1, 13), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ipLocalSessionLocalIp.setStatus('current')
ipLocalSessionAcceptRip = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 4010, 1, 14), Boolean().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ipLocalSessionAcceptRip.setStatus('current')
ipLocalSessionFilterId = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 4010, 1, 15), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ipLocalSessionFilterId.setStatus('current')
ipLocalSessionMtu = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 4010, 1, 16), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ipLocalSessionMtu.setStatus('current')
ipLocalSessionPoolNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 4010, 1, 17), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ipLocalSessionPoolNumber.setStatus('current')
ipLocalSessionRouteMulticast = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 4010, 1, 18), Boolean().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ipLocalSessionRouteMulticast.setStatus('current')
ipLocalSessionRateLimitMulticast = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 4010, 1, 19), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ipLocalSessionRateLimitMulticast.setStatus('current')
ipLocalSessionFramedRouting = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 4010, 1, 20), Boolean().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ipLocalSessionFramedRouting.setStatus('current')
clearTcpLocalSessionTable = MibTable((1, 3, 6, 1, 4, 1, 2637, 2, 1, 4009), )
if mibBuilder.loadTexts: clearTcpLocalSessionTable.setStatus('current')
clearTcpLocalSessionEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2637, 2, 1, 4009, 1), ).setIndexNames((0, "APTIS-CONFIG-MIB", "clearTcpLocalSessionPathString"))
if mibBuilder.loadTexts: clearTcpLocalSessionEntry.setStatus('current')
clearTcpLocalSessionPathString = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 4009, 1, 1), DisplayString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: clearTcpLocalSessionPathString.setStatus('current')
clearTcpLocalSessionRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 4009, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: clearTcpLocalSessionRowStatus.setStatus('current')
clearTcpLocalSessionKeyValue = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 4009, 1, 3), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: clearTcpLocalSessionKeyValue.setStatus('current')
clearTcpLocalSessionHostIpCount = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 4009, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 5))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: clearTcpLocalSessionHostIpCount.setStatus('current')
clearTcpLocalSessionHostIp1 = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 4009, 1, 12), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: clearTcpLocalSessionHostIp1.setStatus('current')
clearTcpLocalSessionHostIp2 = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 4009, 1, 13), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: clearTcpLocalSessionHostIp2.setStatus('current')
clearTcpLocalSessionHostIp3 = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 4009, 1, 14), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: clearTcpLocalSessionHostIp3.setStatus('current')
clearTcpLocalSessionHostIp4 = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 4009, 1, 15), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: clearTcpLocalSessionHostIp4.setStatus('current')
clearTcpLocalSessionHostIp5 = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 4009, 1, 16), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: clearTcpLocalSessionHostIp5.setStatus('current')
clearTcpLocalSessionConnectType = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 4009, 1, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("telnet", 1), ("rlogin", 2), ("cleartcp", 3))).clone('cleartcp')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: clearTcpLocalSessionConnectType.setStatus('current')
clearTcpLocalSessionRemotePort = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 4009, 1, 18), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: clearTcpLocalSessionRemotePort.setStatus('current')
clearTcpLocalSessionHostName = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 4009, 1, 19), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: clearTcpLocalSessionHostName.setStatus('current')
pppLocalSessionTable = MibTable((1, 3, 6, 1, 4, 1, 2637, 2, 1, 4008), )
if mibBuilder.loadTexts: pppLocalSessionTable.setStatus('current')
pppLocalSessionEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2637, 2, 1, 4008, 1), ).setIndexNames((0, "APTIS-CONFIG-MIB", "pppLocalSessionPathString"))
if mibBuilder.loadTexts: pppLocalSessionEntry.setStatus('current')
pppLocalSessionPathString = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 4008, 1, 1), DisplayString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pppLocalSessionPathString.setStatus('current')
pppLocalSessionRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 4008, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pppLocalSessionRowStatus.setStatus('current')
pppLocalSessionKeyValue = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 4008, 1, 3), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pppLocalSessionKeyValue.setStatus('current')
pppLocalSessionVJEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 4008, 1, 11), Boolean().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pppLocalSessionVJEnabled.setStatus('current')
pppLocalSessionConnectLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 4008, 1, 12), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pppLocalSessionConnectLimit.setStatus('current')
pppLocalSessionInactivityLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 4008, 1, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 120))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pppLocalSessionInactivityLimit.setStatus('current')
pppLocalSessionMLPMaxLinks = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 4008, 1, 14), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 8)).clone(2)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pppLocalSessionMLPMaxLinks.setStatus('current')
localUsersTable = MibTable((1, 3, 6, 1, 4, 1, 2637, 2, 1, 4011), )
if mibBuilder.loadTexts: localUsersTable.setStatus('current')
localUsersEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2637, 2, 1, 4011, 1), ).setIndexNames((0, "APTIS-CONFIG-MIB", "localUsersPathString"))
if mibBuilder.loadTexts: localUsersEntry.setStatus('current')
localUsersPathString = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 4011, 1, 1), DisplayString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: localUsersPathString.setStatus('current')
localUsersRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 4011, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: localUsersRowStatus.setStatus('current')
localUsersKeyValue = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 4011, 1, 3), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: localUsersKeyValue.setStatus('current')
localUsersUsername = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 4011, 1, 11), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 68))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: localUsersUsername.setStatus('current')
localUsersPassword = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 4011, 1, 12), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 68))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: localUsersPassword.setStatus('current')
localUsersUserInformation = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 4011, 1, 13), DisplayString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: localUsersUserInformation.setStatus('current')
ipSessionAccessListTable = MibTable((1, 3, 6, 1, 4, 1, 2637, 2, 1, 4012), )
if mibBuilder.loadTexts: ipSessionAccessListTable.setStatus('current')
ipSessionAccessListEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2637, 2, 1, 4012, 1), ).setIndexNames((0, "APTIS-CONFIG-MIB", "ipSessionAccessListPathString"))
if mibBuilder.loadTexts: ipSessionAccessListEntry.setStatus('current')
ipSessionAccessListPathString = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 4012, 1, 1), DisplayString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ipSessionAccessListPathString.setStatus('current')
ipSessionAccessListRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 4012, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ipSessionAccessListRowStatus.setStatus('current')
ipSessionAccessListKeyValue = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 4012, 1, 3), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ipSessionAccessListKeyValue.setStatus('current')
ipSessionAccessListFilterStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 4012, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('enabled')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ipSessionAccessListFilterStatus.setStatus('current')
ipSessionAccessListFilterType = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 4012, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("in", 1), ("out", 2))).clone('in')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ipSessionAccessListFilterType.setStatus('current')
ipSessionAccessListMode = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 4012, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("permit", 1), ("deny", 2))).clone('permit')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ipSessionAccessListMode.setStatus('current')
ipSessionAccessListProtocol = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 4012, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 6, 17, 89))).clone(namedValues=NamedValues(("any", 0), ("icmp", 1), ("igmp", 2), ("tcp", 6), ("udp", 17), ("ospf", 89))).clone('any')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ipSessionAccessListProtocol.setStatus('current')
ipSessionAccessListSourceIp = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 4012, 1, 20), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ipSessionAccessListSourceIp.setStatus('current')
ipSessionAccessListSourceMask = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 4012, 1, 21), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ipSessionAccessListSourceMask.setStatus('current')
ipSessionAccessListDestinationIp = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 4012, 1, 22), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ipSessionAccessListDestinationIp.setStatus('current')
ipSessionAccessListDestinationMask = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 4012, 1, 23), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ipSessionAccessListDestinationMask.setStatus('current')
ipSessionAccessListCompare = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 4012, 1, 30), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4))).clone(namedValues=NamedValues(("none", 0), ("eq", 1), ("ne", 2), ("lt", 3), ("gt", 4))).clone('none')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ipSessionAccessListCompare.setStatus('current')
ipSessionAccessListDestinationPort = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 4012, 1, 31), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 20, 21, 23, 25, 42, 53, 69, 70, 79, 80, 88, 101, 119, 123, 443, 512, 513, 514, 517))).clone(namedValues=NamedValues(("noPort", 0), ("ftpData", 20), ("ftp", 21), ("telnet", 23), ("smtp", 25), ("nameserver", 42), ("domain", 53), ("tftp", 69), ("gopher", 70), ("finger", 79), ("www", 80), ("kerberos", 88), ("hostname", 101), ("nntp", 119), ("ntp", 123), ("ssl", 443), ("exec", 512), ("login", 513), ("cmd", 514), ("talk", 517))).clone('noPort')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ipSessionAccessListDestinationPort.setStatus('current')
ipSessionAccessListIcmpType = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 4012, 1, 32), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ipSessionAccessListIcmpType.setStatus('current')
ipSessionAccessListIcmpCode = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 4012, 1, 33), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ipSessionAccessListIcmpCode.setStatus('current')
ipSessionAccessListIgmpType = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 4012, 1, 34), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ipSessionAccessListIgmpType.setStatus('current')
ipSessionAccessListTcpFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 4012, 1, 35), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("none", 0), ("any", 1), ("established", 2))).clone('none')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ipSessionAccessListTcpFlag.setStatus('current')
vpopConfigTable = MibTable((1, 3, 6, 1, 4, 1, 2637, 2, 1, 4005), )
if mibBuilder.loadTexts: vpopConfigTable.setStatus('current')
vpopConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2637, 2, 1, 4005, 1), ).setIndexNames((0, "APTIS-CONFIG-MIB", "vpopConfigPathString"))
if mibBuilder.loadTexts: vpopConfigEntry.setStatus('current')
vpopConfigPathString = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 4005, 1, 1), DisplayString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: vpopConfigPathString.setStatus('current')
vpopConfigRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 4005, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: vpopConfigRowStatus.setStatus('current')
vpopConfigKeyValue = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 4005, 1, 3), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: vpopConfigKeyValue.setStatus('current')
vpopConfigName = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 4005, 1, 11), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: vpopConfigName.setStatus('current')
vpopConfigAuthenticationServerGroup = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 4005, 1, 20), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: vpopConfigAuthenticationServerGroup.setStatus('current')
vpopConfigAuthorizationServerGroup = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 4005, 1, 21), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: vpopConfigAuthorizationServerGroup.setStatus('current')
vpopConfigAccountingServerGroup = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 4005, 1, 22), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: vpopConfigAccountingServerGroup.setStatus('current')
vpopConfigPrivateFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 4005, 1, 28), Boolean().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: vpopConfigPrivateFlag.setStatus('current')
vpopConfigRouteAdvertise = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 4005, 1, 30), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("advertisePool", 1), ("advertiseHosts", 2))).clone('advertisePool')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: vpopConfigRouteAdvertise.setStatus('current')
vpopConfigMaxSessions = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 4005, 1, 31), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1344))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: vpopConfigMaxSessions.setStatus('current')
vpopConfigAddressMode = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 4005, 1, 32), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("remote", 1), ("local", 2), ("localonly", 3))).clone('remote')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: vpopConfigAddressMode.setStatus('current')
vpopConfigLocalAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 4005, 1, 33), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: vpopConfigLocalAddress.setStatus('current')
vpopConfigAOLAuthLocal = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 4005, 1, 34), Boolean().clone('true')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: vpopConfigAOLAuthLocal.setStatus('current')
vpopConfigTunnelGroup = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 4005, 1, 35), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1000))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: vpopConfigTunnelGroup.setStatus('current')
vpopConfigAuthMethod = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 4005, 1, 36), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("remoteOnly", 1), ("localOnly", 2), ("remoteFirst", 3), ("localFirst", 4))).clone('remoteOnly')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: vpopConfigAuthMethod.setStatus('current')
vpopConfigVrouterId = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 4005, 1, 40), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: vpopConfigVrouterId.setStatus('current')
vpopConfigMulticastClient = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 4005, 1, 41), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("defaultOn", 1), ("defaultOff", 2), ("disabled", 3))).clone('disabled')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: vpopConfigMulticastClient.setStatus('current')
vpopConfigAdvertiseRadiusRoutes = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 4005, 1, 42), Boolean().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: vpopConfigAdvertiseRadiusRoutes.setStatus('current')
vpopConfigVoiceMode = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 4005, 1, 43), Boolean().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: vpopConfigVoiceMode.setStatus('current')
vpopConfigGatewayType = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 4005, 1, 44), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("data", 1), ("voice", 2), ("tandem", 3), ("hub", 4), ("test", 5))).clone('data')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: vpopConfigGatewayType.setStatus('current')
vpopConfigSourceIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 4005, 1, 50), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: vpopConfigSourceIpAddress.setStatus('current')
vpopConfigMultilinkTunnelGroup = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 4005, 1, 51), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1000))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: vpopConfigMultilinkTunnelGroup.setStatus('current')
vpopConfigUseIPPoolFromOtherVPOP = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 4005, 1, 52), Boolean().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: vpopConfigUseIPPoolFromOtherVPOP.setStatus('current')
vpopConfigIPPoolVPOP = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 4005, 1, 53), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: vpopConfigIPPoolVPOP.setStatus('current')
vpopConfigPreserveTunnelInfo = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 4005, 1, 55), Boolean().clone('true')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: vpopConfigPreserveTunnelInfo.setStatus('current')
vpopConfigGratuitousArpEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 4005, 1, 56), Boolean().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: vpopConfigGratuitousArpEnabled.setStatus('current')
vpopConfigMLPSubsequentLinkAuth = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 4005, 1, 57), Boolean().clone('true')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: vpopConfigMLPSubsequentLinkAuth.setStatus('current')
vpopConfigSendIPHint = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 4005, 1, 59), Boolean().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: vpopConfigSendIPHint.setStatus('current')
vpopConfigFilterErrorEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 4005, 1, 60), Boolean().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: vpopConfigFilterErrorEnable.setStatus('current')
vpopConfigL2TPDefaultSendName = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 4005, 1, 70), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: vpopConfigL2TPDefaultSendName.setStatus('current')
vpopConfigL2TPDefaultSharedSecret = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 4005, 1, 71), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: vpopConfigL2TPDefaultSharedSecret.setStatus('current')
dialedNumberTable = MibTable((1, 3, 6, 1, 4, 1, 2637, 2, 1, 4004), )
if mibBuilder.loadTexts: dialedNumberTable.setStatus('current')
dialedNumberEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2637, 2, 1, 4004, 1), ).setIndexNames((0, "APTIS-CONFIG-MIB", "dialedNumberPathString"))
if mibBuilder.loadTexts: dialedNumberEntry.setStatus('current')
dialedNumberPathString = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 4004, 1, 1), DisplayString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: dialedNumberPathString.setStatus('current')
dialedNumberRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 4004, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: dialedNumberRowStatus.setStatus('current')
dialedNumberKeyValue = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 4004, 1, 3), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: dialedNumberKeyValue.setStatus('current')
dialedNumberNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 4004, 1, 11), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: dialedNumberNumber.setStatus('current')
dialedNumberVpop = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 4004, 1, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 10240))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: dialedNumberVpop.setStatus('current')
organizationNameTable = MibTable((1, 3, 6, 1, 4, 1, 2637, 2, 1, 4006), )
if mibBuilder.loadTexts: organizationNameTable.setStatus('current')
organizationNameEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2637, 2, 1, 4006, 1), ).setIndexNames((0, "APTIS-CONFIG-MIB", "organizationNamePathString"))
if mibBuilder.loadTexts: organizationNameEntry.setStatus('current')
organizationNamePathString = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 4006, 1, 1), DisplayString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: organizationNamePathString.setStatus('current')
organizationNameRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 4006, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: organizationNameRowStatus.setStatus('current')
organizationNameKeyValue = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 4006, 1, 3), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: organizationNameKeyValue.setStatus('current')
organizationNameOrganizationName = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 4006, 1, 11), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: organizationNameOrganizationName.setStatus('current')
organizationNameVPOP = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 4006, 1, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 10240))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: organizationNameVPOP.setStatus('current')
organizationNameTunnelGroup = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 4006, 1, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1000))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: organizationNameTunnelGroup.setStatus('current')
organizationNameInputStyle = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 4006, 1, 111), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("templateString", 0), ("nameAtOrg", 1), ("nameAtOrgDotDomain", 2), ("orgSlashName", 3), ("orgBslashName", 4), ("orgAnyslashName", 5))).clone('nameAtOrg')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: organizationNameInputStyle.setStatus('current')
organizationNameInputTemplateString = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 4006, 1, 112), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: organizationNameInputTemplateString.setStatus('current')
organizationNameOutputStyle = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 4006, 1, 211), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("templateString", 0), ("input", 1), ("name", 2), ("nameAtOrg", 3), ("nameAtOrgDotDomain", 4), ("orgSlashName", 5), ("orgBslashName", 6))).clone('input')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: organizationNameOutputStyle.setStatus('current')
organizationNameOutputTemplateString = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 4006, 1, 212), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: organizationNameOutputTemplateString.setStatus('current')
callTypeOverrideTable = MibTable((1, 3, 6, 1, 4, 1, 2637, 2, 1, 4013), )
if mibBuilder.loadTexts: callTypeOverrideTable.setStatus('current')
callTypeOverrideEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2637, 2, 1, 4013, 1), ).setIndexNames((0, "APTIS-CONFIG-MIB", "callTypeOverridePathString"))
if mibBuilder.loadTexts: callTypeOverrideEntry.setStatus('current')
callTypeOverridePathString = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 4013, 1, 1), DisplayString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: callTypeOverridePathString.setStatus('current')
callTypeOverrideRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 4013, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: callTypeOverrideRowStatus.setStatus('current')
callTypeOverrideKeyValue = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 4013, 1, 3), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: callTypeOverrideKeyValue.setStatus('current')
callTypeOverridePresentedCallType = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 4013, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19))).clone(namedValues=NamedValues(("all", 1), ("v110ASYNC600", 2), ("v110ASYNC1200", 3), ("v110ASYNC2400", 4), ("v110ASYNC4800", 5), ("v110ASYNC9600", 6), ("v110ASYNC19200", 7), ("v110ASYNC38400", 8), ("v110SYNC8000", 9), ("v110SYNC16000", 10), ("v110SYNC32000", 11), ("v110SYNC56000", 12), ("v12064K", 13), ("v12056K", 14), ("x64KData", 15), ("x56KData", 16), ("modem", 17), ("voice", 18), ("pIAFS", 19))).clone('all')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: callTypeOverridePresentedCallType.setStatus('current')
callTypeOverrideOverrideCallType = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 4013, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22))).clone(namedValues=NamedValues(("disabled", 1), ("v110ASYNC600", 2), ("v110ASYNC1200", 3), ("v110ASYNC2400", 4), ("v110ASYNC4800", 5), ("v110ASYNC9600", 6), ("v110ASYNC19200", 7), ("v110ASYNC38400", 8), ("v110SYNC8000", 9), ("v110SYNC16000", 10), ("v110SYNC32000", 11), ("v110SYNC56000", 12), ("v12064K", 13), ("v12056K", 14), ("x64KData", 15), ("x56KData", 16), ("modem", 17), ("voice", 18), ("aLAW", 19), ("disallow", 20), ("uLAW", 21), ("pIAFS", 22))).clone('disabled')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: callTypeOverrideOverrideCallType.setStatus('current')
dVSGatewayTable = MibTable((1, 3, 6, 1, 4, 1, 2637, 2, 1, 1504), )
if mibBuilder.loadTexts: dVSGatewayTable.setStatus('current')
dVSGatewayEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2637, 2, 1, 1504, 1), ).setIndexNames((0, "APTIS-CONFIG-MIB", "dVSGatewayPathString"))
if mibBuilder.loadTexts: dVSGatewayEntry.setStatus('current')
dVSGatewayPathString = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 1504, 1, 1), DisplayString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: dVSGatewayPathString.setStatus('current')
dVSGatewayRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 1504, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: dVSGatewayRowStatus.setStatus('current')
dVSGatewayKeyValue = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 1504, 1, 3), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: dVSGatewayKeyValue.setStatus('current')
dVSGatewayGatewayAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 1504, 1, 11), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: dVSGatewayGatewayAddress.setStatus('current')
dVSGatewayAuthenticationProtocol = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 1504, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("acp", 1), ("radius", 2))).clone('radius')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: dVSGatewayAuthenticationProtocol.setStatus('current')
dVSGatewayAccountingProtocol = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 1504, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("acp", 1), ("radius", 2))).clone('radius')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: dVSGatewayAccountingProtocol.setStatus('current')
dVSGatewayAuthenticationType = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 1504, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("none", 0), ("kmd5", 1))).clone('none')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: dVSGatewayAuthenticationType.setStatus('current')
dVSGatewayAuthenticationMode = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 1504, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("none", 0), ("prefsuffix", 1))).clone('none')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: dVSGatewayAuthenticationMode.setStatus('current')
dVSGatewayAuthenticationLocation = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 1504, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("none", 0), ("local", 1), ("remote", 2))).clone('remote')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: dVSGatewayAuthenticationLocation.setStatus('current')
dVSGatewayAuthenticationString = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 1504, 1, 17), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: dVSGatewayAuthenticationString.setStatus('current')
dVSGatewayRetransmitTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 1504, 1, 18), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 15)).clone(5)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: dVSGatewayRetransmitTimeout.setStatus('current')
dVSGatewayMaxRetransmits = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 1504, 1, 19), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 10)).clone(2)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: dVSGatewayMaxRetransmits.setStatus('current')
dVSGatewayRenewalTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 1504, 1, 20), Integer32().subtype(subtypeSpec=ValueRangeConstraint(60, 900)).clone(360)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: dVSGatewayRenewalTime.setStatus('current')
dVSGatewayTgHardwareType = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 1504, 1, 21), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("none", 0), ("serial", 1), ("ppp", 2), ("frelay", 3))).clone('frelay')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: dVSGatewayTgHardwareType.setStatus('current')
dVSGatewayTgHardwareAddressLength = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 1504, 1, 22), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 20))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: dVSGatewayTgHardwareAddressLength.setStatus('current')
dVSGatewayTgHardwareAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 1504, 1, 23), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: dVSGatewayTgHardwareAddress.setStatus('current')
dVSGatewayPrimaryAuthenticationServerAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 1504, 1, 24), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: dVSGatewayPrimaryAuthenticationServerAddress.setStatus('current')
dVSGatewayPrimaryAccountingServerAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 1504, 1, 25), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: dVSGatewayPrimaryAccountingServerAddress.setStatus('current')
dVSGatewaySecondaryAuthenticationServerAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 1504, 1, 26), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: dVSGatewaySecondaryAuthenticationServerAddress.setStatus('current')
dVSGatewaySecondaryAccountingServerAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 1504, 1, 27), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: dVSGatewaySecondaryAccountingServerAddress.setStatus('current')
dVSGatewayUserName = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 1504, 1, 28), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: dVSGatewayUserName.setStatus('current')
dVSGatewaySecurityParameterIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 1504, 1, 29), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: dVSGatewaySecurityParameterIndex.setStatus('current')
dVSGatewayIPTimeToLive = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 1504, 1, 30), Integer32().clone(32)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: dVSGatewayIPTimeToLive.setStatus('current')
dVSGatewayRipSourceAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 1504, 1, 31), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: dVSGatewayRipSourceAddress.setStatus('current')
dVSGatewayRipLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 1504, 1, 32), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: dVSGatewayRipLimit.setStatus('current')
dVSGatewayRipTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 1504, 1, 33), Integer32().subtype(subtypeSpec=ValueRangeConstraint(10, 360)).clone(30)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: dVSGatewayRipTimeout.setStatus('current')
dVSGatewayDhcpEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 1504, 1, 40), Boolean().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: dVSGatewayDhcpEnable.setStatus('current')
dVSGatewayDhcpPrefServerAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 1504, 1, 41), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: dVSGatewayDhcpPrefServerAddr.setStatus('current')
dVSGatewayDhcpPrefServerAddr2 = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 1, 1504, 1, 42), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: dVSGatewayDhcpPrefServerAddr2.setStatus('current')
mibBuilder.exportSymbols("APTIS-CONFIG-MIB", ipDsmccPathString=ipDsmccPathString, ipSyslogFilterLevel=ipSyslogFilterLevel, ipSvcAuthEntryLevel0DisconnectUsers=ipSvcAuthEntryLevel0DisconnectUsers, ipPoolConfigTable=ipPoolConfigTable, ipCircuitOutputDequeueStyle=ipCircuitOutputDequeueStyle, ipSnmpDebugFlag=ipSnmpDebugFlag, pppModemConfigEstablishTimeLimit=pppModemConfigEstablishTimeLimit, pppConfigAuthServerProtocol2=pppConfigAuthServerProtocol2, modemConfigVoiceFrameGeneration=modemConfigVoiceFrameGeneration, pppConfigSendID=pppConfigSendID, hSSIConfigEntry=hSSIConfigEntry, ipTrapCfgKeyValue=ipTrapCfgKeyValue, outboundSpdbPolicy=outboundSpdbPolicy, ipTrapCfgPriority=ipTrapCfgPriority, ipIpdcRowStatus=ipIpdcRowStatus, ipAddressBlockRangeInUse=ipAddressBlockRangeInUse, iopConfigTable=iopConfigTable, ipOspfRangePathString=ipOspfRangePathString, ipSvcAuthEntryModifyPasswords=ipSvcAuthEntryModifyPasswords, iSDNLayer3TimersNtiDmsKeyValue=iSDNLayer3TimersNtiDmsKeyValue, pppLocalSessionPathString=pppLocalSessionPathString, pppModemConfigAuthClientProtocol2=pppModemConfigAuthClientProtocol2, pppIsdnConfigIPXNetworkNumber=pppIsdnConfigIPXNetworkNumber, udlConfigDumpfile=udlConfigDumpfile, ipOspfRangeKeyValue=ipOspfRangeKeyValue, pppConfigSendACFC=pppConfigSendACFC, pppModemConfigCHAPClientRetries=pppModemConfigCHAPClientRetries, ds0ConfigAdminState=ds0ConfigAdminState, cHdlcEntry=cHdlcEntry, pppConfigRowStatus=pppConfigRowStatus, ipOspfRangeEntry=ipOspfRangeEntry, frInterfaceConfigFrDlcmiMonitoredEvents=frInterfaceConfigFrDlcmiMonitoredEvents, frCircuitConfigFrCircuitName=frCircuitConfigFrCircuitName, pppModemConfigMinLocalMRU=pppModemConfigMinLocalMRU, ipAaaGroupConfigRowStatus=ipAaaGroupConfigRowStatus, ipFrMapTable=ipFrMapTable, signalingConfigDsmccTimeout=signalingConfigDsmccTimeout, casConfigRingBack=casConfigRingBack, ipRouteLocalIfIndex=ipRouteLocalIfIndex, frInterfaceConfigFrDlcmiMulticast=frInterfaceConfigFrDlcmiMulticast, ipIfnumberKeyValue=ipIfnumberKeyValue, casTimersLineReleaseHold=casTimersLineReleaseHold, ipAaaClientPortRowStatus=ipAaaClientPortRowStatus, ipShellKeyValue=ipShellKeyValue, pppModemConfigAllowPeerIPAddress=pppModemConfigAllowPeerIPAddress, pppIsdnConfigMLPMaxFragments=pppIsdnConfigMLPMaxFragments, coredumpConfigPathString=coredumpConfigPathString, modemConfigVoicePayloadTypeAutoswitch=modemConfigVoicePayloadTypeAutoswitch, iSDNLayer3TimersNttPathString=iSDNLayer3TimersNttPathString, vmsConfigTable=vmsConfigTable, ipDsbyteDSByteValue=ipDsbyteDSByteValue, ipSvcAuthEntryUsername=ipSvcAuthEntryUsername, pppConfigConnectLimit=pppConfigConnectLimit, callInfoCalledNumberPlan=callInfoCalledNumberPlan, loopbackConfigTable=loopbackConfigTable, dialedNumberTable=dialedNumberTable, frCircuitConfigFrCircuitVCCEnable=frCircuitConfigFrCircuitVCCEnable, iSDNLayer3TimersNtiDmsT310=iSDNLayer3TimersNtiDmsT310, ipRshellConfigForceAddressValidation=ipRshellConfigForceAddressValidation, rbsConfigKeyValue=rbsConfigKeyValue, ipSnmpMaxSnmpLoad=ipSnmpMaxSnmpLoad, outboundSpdbEntry=outboundSpdbEntry, pppIsdnConfigInactivityLimit=pppIsdnConfigInactivityLimit, casTimersLocalRelease=casTimersLocalRelease, pppIsdnConfigPAPServerRetries=pppIsdnConfigPAPServerRetries, ipLocalSessionPoolNumber=ipLocalSessionPoolNumber, leasedLineConfigKeyValue=leasedLineConfigKeyValue, outboundPolicyTable=outboundPolicyTable, shellConfigPPPCommand=shellConfigPPPCommand, pppConfigSendNBNS=pppConfigSendNBNS, ipSvcAuthEntryRowStatus=ipSvcAuthEntryRowStatus, frLogicalIFConfigFrLIFEnable=frLogicalIFConfigFrLIFEnable, ipAaaRadiusClientSecret=ipAaaRadiusClientSecret, e1TrunkconfigLineCode=e1TrunkconfigLineCode, modemConfigPathString=modemConfigPathString, ipAaaRadiusConfigNasId=ipAaaRadiusConfigNasId, l2TPLNSSharedSecret=l2TPLNSSharedSecret, ipVpnGroupDestKeyValue=ipVpnGroupDestKeyValue, cHdlcRowStatus=cHdlcRowStatus, iSDNLayer3TimersNet5T321=iSDNLayer3TimersNet5T321, pppModemConfigLogControlFrames=pppModemConfigLogControlFrames, ipRtrConfigTable=ipRtrConfigTable, iSDNLayer3TimersNttT316=iSDNLayer3TimersNttT316, sessionConfigLogEnable=sessionConfigLogEnable, sessionTableFormatWidth3=sessionTableFormatWidth3, ipAccessListIgmpType=ipAccessListIgmpType, frLogicalIFConfigFrLIFIfIndex=frLogicalIFConfigFrLIFIfIndex, dialedNumberKeyValue=dialedNumberKeyValue, ipRloginRowStatus=ipRloginRowStatus, ipTrapCfgEthernetPortTrapStatus=ipTrapCfgEthernetPortTrapStatus, inboundSadbAhMacKey=inboundSadbAhMacKey, pppConfigAllowMagic=pppConfigAllowMagic, ipdcConfigPrimarySwitchPort=ipdcConfigPrimarySwitchPort, modemConfigVoiceEchoTxFixedGain=modemConfigVoiceEchoTxFixedGain, statsDummyPathString=statsDummyPathString, dVSGatewayRowStatus=dVSGatewayRowStatus, ipIfnumberSubclass=ipIfnumberSubclass, dVSGatewayPrimaryAuthenticationServerAddress=dVSGatewayPrimaryAuthenticationServerAddress, iSDNLayer3TimersT305=iSDNLayer3TimersT305, pppModemConfigUseEchoes=pppModemConfigUseEchoes, pppModemConfigLogStates=pppModemConfigLogStates, callInfoPort=callInfoPort, ipWin32Entry=ipWin32Entry, pppModemConfigIPCPMaxConfigure=pppModemConfigIPCPMaxConfigure, callInfoShelf=callInfoShelf, dS3TrunkconfigTiming=dS3TrunkconfigTiming, ipAaaServerMonitorType=ipAaaServerMonitorType, ipOspfAreaAreaId=ipOspfAreaAreaId, clockRecoverySecondarySlot=clockRecoverySecondarySlot, pppIsdnConfigIPXNodeNumber=pppIsdnConfigIPXNodeNumber, iSDNLayer2TimersT204=iSDNLayer2TimersT204, iSDNLayer3TimersAtt4essPathString=iSDNLayer3TimersAtt4essPathString, ipSnmpTable=ipSnmpTable, signalingConfigDsmccRetries=signalingConfigDsmccRetries, rbsTimersRowStatus=rbsTimersRowStatus, rbsTimersHitThresh=rbsTimersHitThresh, ipLocalSessionPathString=ipLocalSessionPathString, iSDNLayer2TimersPathString=iSDNLayer2TimersPathString, organizationNameOutputTemplateString=organizationNameOutputTemplateString, iSDNLayer3TimersAtt4essT304=iSDNLayer3TimersAtt4essT304, casConfigPathString=casConfigPathString, e1liuConfigKeyValue=e1liuConfigKeyValue, iSDNConfigKeyValue=iSDNConfigKeyValue, ipAaaServerTrace=ipAaaServerTrace, ipSessionAccessListCompare=ipSessionAccessListCompare, pppModemConfigLCPEchoErrorTimeout=pppModemConfigLCPEchoErrorTimeout, pppIsdnConfigDNS2=pppIsdnConfigDNS2, pppConfigLogDump=pppConfigLogDump, sessionConfigTerminateEnable=sessionConfigTerminateEnable, pppConfigInactivityLimit=pppConfigInactivityLimit, clearTcpLocalSessionTable=clearTcpLocalSessionTable, ipCircuitType=ipCircuitType, ipAaaRadiusConfigKeyValue=ipAaaRadiusConfigKeyValue, ipTrapCfgIsdnTrapStatus=ipTrapCfgIsdnTrapStatus, ipOspfVirtualLinkEntry=ipOspfVirtualLinkEntry, pppIsdnConfigCHAPClientRetries=pppIsdnConfigCHAPClientRetries, iSDNLayer3TimersT316=iSDNLayer3TimersT316, ipServicesConfigUseIPSvcDefaults=ipServicesConfigUseIPSvcDefaults, casTimersOutConnectHold=casTimersOutConnectHold, t1NumberRowStatus=t1NumberRowStatus, ipMulticastConfigTable=ipMulticastConfigTable, iSDNLayer3TimersNttT309=iSDNLayer3TimersNttT309, vmsConfigPathString=vmsConfigPathString, pppConfigDNS1=pppConfigDNS1, l2FHomeGatewayEchoInterval=l2FHomeGatewayEchoInterval, ipRoutePrivateFlag=ipRoutePrivateFlag, outboundSadbIpAddr=outboundSadbIpAddr, rbsTimersInWaitKP=rbsTimersInWaitKP, pppLocalSessionTable=pppLocalSessionTable, pppModemConfigMLPGroupNumber=pppModemConfigMLPGroupNumber, ipCleartcpHostIpCount=ipCleartcpHostIpCount, ipOspfAreaStubAreaEnabled=ipOspfAreaStubAreaEnabled, dVSGatewayPathString=dVSGatewayPathString, pppIsdnConfigUseEchoes=pppIsdnConfigUseEchoes, pppIsdnConfigSendACFC=pppIsdnConfigSendACFC, hSSIConfigHSSIIdle=hSSIConfigHSSIIdle, iSDNLayer3TimersNttRowStatus=iSDNLayer3TimersNttRowStatus, ipIpdcKeyValue=ipIpdcKeyValue, hdlcConfigTable=hdlcConfigTable, clockRecoveryTable=clockRecoveryTable, metaContainerTable=metaContainerTable, dVSGatewayUserName=dVSGatewayUserName, iSDNLayer3TimersNtiDmsTable=iSDNLayer3TimersNtiDmsTable, ipAccessGroupPathString=ipAccessGroupPathString, ipSgcpKeyValue=ipSgcpKeyValue, oosKeyValue=oosKeyValue, ipMulticastConfigEntry=ipMulticastConfigEntry, pppConfigIPXNetworkNumber=pppConfigIPXNetworkNumber, ipCircuitArpProxyEnabled=ipCircuitArpProxyEnabled, shellConfigTelnetCommand=shellConfigTelnetCommand, iSDNLayer3TimersNtiDmsT309=iSDNLayer3TimersNtiDmsT309, frInterfaceConfigFrDlcmiLMIFlowControl=frInterfaceConfigFrDlcmiLMIFlowControl, pppConfigSendEndpointDisc=pppConfigSendEndpointDisc, dVSGatewaySecurityParameterIndex=dVSGatewaySecurityParameterIndex, dmmAdminConfigPathString=dmmAdminConfigPathString, organizationNameRowStatus=organizationNameRowStatus, ipOspfNbNeighborIfIndex=ipOspfNbNeighborIfIndex, dVSGatewayAuthenticationType=dVSGatewayAuthenticationType, ipCleartcpHostIpList=ipCleartcpHostIpList, cLIWarningTemp=cLIWarningTemp, slotConfigAdminLineTerminationModule=slotConfigAdminLineTerminationModule, pppModemConfigLogMLP=pppModemConfigLogMLP, ipVpnGroupFrDlciMap4=ipVpnGroupFrDlciMap4, pppIsdnConfigMLPNullFragmentTimeout=pppIsdnConfigMLPNullFragmentTimeout, t3ConfigTable=t3ConfigTable, t1ConfigCircuitID=t1ConfigCircuitID, ipAddressBlockTable=ipAddressBlockTable, iSDNLayer2TimersT200=iSDNLayer2TimersT200, ipOspfGenerateDefaultMetric=ipOspfGenerateDefaultMetric, ipOspfNbNeighborDrEligibleEnabled=ipOspfNbNeighborDrEligibleEnabled, frInterfaceConfigFrDlcmiFullEnquiryInterval=frInterfaceConfigFrDlcmiFullEnquiryInterval, pppModemConfigLogCompression=pppModemConfigLogCompression, iSDNLayer2TimersEntry=iSDNLayer2TimersEntry, pppModemConfigLogSize=pppModemConfigLogSize, t1TrunkconfigTable=t1TrunkconfigTable, pppModemConfigPAPClientTimeout=pppModemConfigPAPClientTimeout, iSDNLayer3TimersAtt5essT318=iSDNLayer3TimersAtt5essT318, ipOspfMd5KeyMd5Key=ipOspfMd5KeyMd5Key, pppConfigCountPings=pppConfigCountPings, ipIpdcDebugFlag=ipIpdcDebugFlag, pppModemConfigIPXCPEnabled=pppModemConfigIPXCPEnabled, ipAaaRadiusConfigAdditionalAuthEnabled=ipAaaRadiusConfigAdditionalAuthEnabled, pppModemConfigDNS2=pppModemConfigDNS2, ipOspfKeyValue=ipOspfKeyValue, ipOspfMd5KeyEntry=ipOspfMd5KeyEntry, ipRloginPathString=ipRloginPathString, rbsTimersOutConnectHold=rbsTimersOutConnectHold, modemConfigVoiceStatsPeriod=modemConfigVoiceStatsPeriod, outboundSpdbCommit=outboundSpdbCommit, pppIsdnConfigSendDNS=pppIsdnConfigSendDNS, callTypeOverridePresentedCallType=callTypeOverridePresentedCallType, ipOspfRouterId=ipOspfRouterId, l2FHomeGatewaySendChecksum=l2FHomeGatewaySendChecksum, inboundSpdbCommit=inboundSpdbCommit, clearTcpLocalSessionRowStatus=clearTcpLocalSessionRowStatus, clearTcpLocalSessionHostIp1=clearTcpLocalSessionHostIp1, ipWin32Table=ipWin32Table, casTimersOutLineAbnormalReleaseHold=casTimersOutLineAbnormalReleaseHold, pppModemConfigAuthFailureRenegotiatesLCP=pppModemConfigAuthFailureRenegotiatesLCP, ipTrapCfgAcctServerTrapStatus=ipTrapCfgAcctServerTrapStatus, vpopConfigAdvertiseRadiusRoutes=vpopConfigAdvertiseRadiusRoutes, sessionTableFormatHeading8=sessionTableFormatHeading8, loopbackConfigRowStatus=loopbackConfigRowStatus, ipAccessGroupDirection=ipAccessGroupDirection, inboundSpdbIpsecGwAddr=inboundSpdbIpsecGwAddr, ipAaaServerTimeout=ipAaaServerTimeout, ipLocalSessionRemoteMask=ipLocalSessionRemoteMask, sessionConfigDS0DiscTimeOut=sessionConfigDS0DiscTimeOut, tunnelGroupConfigPathString=tunnelGroupConfigPathString, pppConfigLogMLP=pppConfigLogMLP, pppConfigIPXNodeNumber=pppConfigIPXNodeNumber, pppModemConfigLogVJ=pppModemConfigLogVJ, pppModemConfigCountRIP=pppModemConfigCountRIP, vpopConfigFilterErrorEnable=vpopConfigFilterErrorEnable, ipOspfNbNeighborEntry=ipOspfNbNeighborEntry, modemConfigVoiceLatePacketRatio=modemConfigVoiceLatePacketRatio, ipSessionAccessListIgmpType=ipSessionAccessListIgmpType, l2FHomeGatewayTable=l2FHomeGatewayTable, ipRipProtoV1Enabled=ipRipProtoV1Enabled, clearTcpLocalSessionRemotePort=clearTcpLocalSessionRemotePort, ipFrMapKeyValue=ipFrMapKeyValue, ipMulticastConfigHeartbeatEnabled=ipMulticastConfigHeartbeatEnabled, e1ConfigLineBuildout=e1ConfigLineBuildout, coredumpConfigKeyValue=coredumpConfigKeyValue, rbsTimersOutMaxWinkGlare=rbsTimersOutMaxWinkGlare, iSDNLayer3TimersNet5T318=iSDNLayer3TimersNet5T318, rbsConfigBusyOutOOS=rbsConfigBusyOutOOS, softswitchConfigEntry=softswitchConfigEntry, ipOspfVirtualLinkRowStatus=ipOspfVirtualLinkRowStatus, pppConfigDNS2=pppConfigDNS2, ipSvcEntryEntry=ipSvcEntryEntry, softswitchConfigIpAddr=softswitchConfigIpAddr, pppModemConfigIPCPRestartTimer=pppModemConfigIPCPRestartTimer, ds0ConfigRowStatus=ds0ConfigRowStatus)
mibBuilder.exportSymbols("APTIS-CONFIG-MIB", dacConfigTable=dacConfigTable, inboundSpdbIpsecProtocol=inboundSpdbIpsecProtocol, iSDNLayer3TimersT318=iSDNLayer3TimersT318, ipAaaRadiusClientEntry=ipAaaRadiusClientEntry, rbsTimersInMinWinkHold=rbsTimersInMinWinkHold, ipTrapCfgFilterErrorTrapStatus=ipTrapCfgFilterErrorTrapStatus, ipCircuitInverseArpEnabled=ipCircuitInverseArpEnabled, iSDNLayer3TimersNet5T322=iSDNLayer3TimersNet5T322, dmmAdminConfigEntry=dmmAdminConfigEntry, iSDNConfigRowStatus=iSDNConfigRowStatus, dS3TrunkconfigEntry=dS3TrunkconfigEntry, dVSGatewayAuthenticationProtocol=dVSGatewayAuthenticationProtocol, modemConfigMaxConnectSpeed=modemConfigMaxConnectSpeed, outboundSadbSpi=outboundSadbSpi, ipServicesConfigPathString=ipServicesConfigPathString, ipCircuitOspfAuthKey=ipCircuitOspfAuthKey, l2TPLNSCtrlMsgRetries=l2TPLNSCtrlMsgRetries, loopbackConfigEntry=loopbackConfigEntry, sessionConfigKeyValue=sessionConfigKeyValue, t1ConfigAdminState=t1ConfigAdminState, eventConfigRowStatus=eventConfigRowStatus, virtualLinkConfigChannelChannelisedLink=virtualLinkConfigChannelChannelisedLink, coredumpConfigDumpMAC=coredumpConfigDumpMAC, ipOspfNbNeighborTable=ipOspfNbNeighborTable, iSDNLayer3TimersNet5T305=iSDNLayer3TimersNet5T305, pppConfigAuthClientProtocol3=pppConfigAuthClientProtocol3, ipVpnGroupFrDlciMap3=ipVpnGroupFrDlciMap3, ipServicesConfigRowStatus=ipServicesConfigRowStatus, callInfoFeature=callInfoFeature, coredumpConfigDumpDAC=coredumpConfigDumpDAC, dVSGatewayRipLimit=dVSGatewayRipLimit, pppIsdnConfigLCPEchoErrorTimeout=pppIsdnConfigLCPEchoErrorTimeout, dVSGatewayDhcpPrefServerAddr2=dVSGatewayDhcpPrefServerAddr2, macConfigAdminState=macConfigAdminState, e1ConfigTable=e1ConfigTable, udlConfigEnabled=udlConfigEnabled, ipFilterListTable=ipFilterListTable, pppModemConfigAuthClientProtocol3=pppModemConfigAuthClientProtocol3, iSDNLayer3TimersAtt5essPathString=iSDNLayer3TimersAtt5essPathString, pppConfigAllowMRU=pppConfigAllowMRU, udlConfigIpmask=udlConfigIpmask, ipRoutePathString=ipRoutePathString, ipRloginEntry=ipRloginEntry, policyConfigDefaultModemRPI=policyConfigDefaultModemRPI, iSDNLayer3TimersT303=iSDNLayer3TimersT303, pppIsdnConfigCountIGMP=pppIsdnConfigCountIGMP, casTimersInSeizeHold=casTimersInSeizeHold, ipCleartcpLocalPort=ipCleartcpLocalPort, pppIsdnConfigNBNS2=pppIsdnConfigNBNS2, ipOspfVirtualLinkTable=ipOspfVirtualLinkTable, ipRtrConfigArpTtl=ipRtrConfigArpTtl, iSDNLayer3TimersAtt5essT313=iSDNLayer3TimersAtt5essT313, ipRshRowStatus=ipRshRowStatus, pppModemConfigCHAPServerTimeout=pppModemConfigCHAPServerTimeout, localUsersEntry=localUsersEntry, inboundPolicyCommit=inboundPolicyCommit, rbsTimersLocalRelease=rbsTimersLocalRelease, ipFrMapDlci=ipFrMapDlci, iSDNLayer2TimersAtt5essT204=iSDNLayer2TimersAtt5essT204, ipAaaRadiusConfigSessionIdStyle=ipAaaRadiusConfigSessionIdStyle, ipCircuitOspfTransmitDelay=ipCircuitOspfTransmitDelay, pppIsdnConfigLCPMaxConfigure=pppIsdnConfigLCPMaxConfigure, iSDNLayer3TimersNtiDmsT303=iSDNLayer3TimersNtiDmsT303, pppModemConfigCHAPValueLength=pppModemConfigCHAPValueLength, udlConfigEntry=udlConfigEntry, ipSvcEntryTable=ipSvcEntryTable, modemConfigMinConnectSpeed=modemConfigMinConnectSpeed, dVSGatewayIPTimeToLive=dVSGatewayIPTimeToLive, pppModemConfigVJEnabled=pppModemConfigVJEnabled, ipWin32Instance=ipWin32Instance, ipAaaServerTable=ipAaaServerTable, signalingConfigPathString=signalingConfigPathString, vpopConfigTunnelGroup=vpopConfigTunnelGroup, pppIsdnConfigPathString=pppIsdnConfigPathString, ipRshellConfigTable=ipRshellConfigTable, softswitchConfigRowStatus=softswitchConfigRowStatus, udlConfigPathString=udlConfigPathString, pppConfigMLPSendNullFragments=pppConfigMLPSendNullFragments, rbsTimersOutPostWink=rbsTimersOutPostWink, ipAccessListSourceIp=ipAccessListSourceIp, pppConfigDesiredLocalMRRU=pppConfigDesiredLocalMRRU, dVSGatewayAuthenticationString=dVSGatewayAuthenticationString, hSSIConfigRowStatus=hSSIConfigRowStatus, modemConfigFlowControl=modemConfigFlowControl, ipServicesConfigTable=ipServicesConfigTable, loopbackConfigAdminState=loopbackConfigAdminState, frInterfaceConfigFrDlcmiErrorThreshold=frInterfaceConfigFrDlcmiErrorThreshold, dVSGatewayTgHardwareType=dVSGatewayTgHardwareType, pppModemConfigTable=pppModemConfigTable, signalingConfigConfigPPP=signalingConfigConfigPPP, inboundSpdbTable=inboundSpdbTable, inboundSadbCommit=inboundSadbCommit, virtualLinkConfigChannelByteSyncLink=virtualLinkConfigChannelByteSyncLink, ipOspfMd5KeyKeyValue=ipOspfMd5KeyKeyValue, pppIsdnConfigAllowPeerIPAddress=pppIsdnConfigAllowPeerIPAddress, rbsTimersInDigit=rbsTimersInDigit, frInterfaceConfigFrDlcmiLinkType=frInterfaceConfigFrDlcmiLinkType, ipdcConfigSecondarySwitchPort=ipdcConfigSecondarySwitchPort, vpopConfigSourceIpAddress=vpopConfigSourceIpAddress, ipPolicyEntryAccessList=ipPolicyEntryAccessList, pppConfigPassiveLCPTimeout=pppConfigPassiveLCPTimeout, ipServicesConfigDefaultModifyUserEntries=ipServicesConfigDefaultModifyUserEntries, frLogicalIFConfigFrLIFIndex=frLogicalIFConfigFrLIFIndex, ipSsKeyValue=ipSsKeyValue, ipAddressBlockStart=ipAddressBlockStart, ethernetConfigKeyValue=ethernetConfigKeyValue, l2TPLNSCtrlMsgRxWindow=l2TPLNSCtrlMsgRxWindow, pppConfigSendShortSeq=pppConfigSendShortSeq, rbsTimersOutFirstDigit=rbsTimersOutFirstDigit, pppIsdnConfigStacPerformance=pppIsdnConfigStacPerformance, l2FHomeGatewayPathString=l2FHomeGatewayPathString, oosRowStatus=oosRowStatus, ipAaaSetConfigTable=ipAaaSetConfigTable, pppConfigLCPMaxConfigure=pppConfigLCPMaxConfigure, inboundSadbEspMacKey=inboundSadbEspMacKey, iSDNLayer3TimersRowStatus=iSDNLayer3TimersRowStatus, ipAaaGroupConfigName=ipAaaGroupConfigName, ds0ConfigTable=ds0ConfigTable, pppIsdnConfigAuthClientProtocol4=pppIsdnConfigAuthClientProtocol4, pppModemConfigCHAPServerChallenges=pppModemConfigCHAPServerChallenges, ipLocalSessionKeyValue=ipLocalSessionKeyValue, ipTrapCfgTable=ipTrapCfgTable, t1liuConfigPathString=t1liuConfigPathString, pppIsdnConfigPAPClientTimeout=pppIsdnConfigPAPClientTimeout, outboundSadbEspMacAlg=outboundSadbEspMacAlg, ipRshTcpPort=ipRshTcpPort, sessionTableFormatHeading3=sessionTableFormatHeading3, e1ConfigPathString=e1ConfigPathString, ipRtrConfigSpoofCheckEnabled=ipRtrConfigSpoofCheckEnabled, pppConfigMLPMaxFragments=pppConfigMLPMaxFragments, iSDNConfigNFASInterface=iSDNConfigNFASInterface, t1ConfigRowStatus=t1ConfigRowStatus, iSDNLayer3TimersNttT319=iSDNLayer3TimersNttT319, pppModemConfigStac3Enabled=pppModemConfigStac3Enabled, pppModemConfigPAPClientRetries=pppModemConfigPAPClientRetries, pppModemConfigAllowACFC=pppModemConfigAllowACFC, ipAaaServerIpPort=ipAaaServerIpPort, pppConfigLCPRestartTimer=pppConfigLCPRestartTimer, e1TrunkconfigKeyValue=e1TrunkconfigKeyValue, tunnelGroupConfigTunnelStrategy=tunnelGroupConfigTunnelStrategy, ipIpdcPathString=ipIpdcPathString, ipShellBadPasswdMsg=ipShellBadPasswdMsg, ipAaaSetConfigFakeResponse=ipAaaSetConfigFakeResponse, ipPoolConfigRowStatus=ipPoolConfigRowStatus, cLIPrompt=cLIPrompt, inboundSpdbPolicy=inboundSpdbPolicy, coredumpConfigRowStatus=coredumpConfigRowStatus, casConfigSigBitType=casConfigSigBitType, callInfoCallingNumber=callInfoCallingNumber, pppIsdnConfigCountPings=pppIsdnConfigCountPings, iSDNLayer3TimersNttKeyValue=iSDNLayer3TimersNttKeyValue, iSDNConfigNFASID=iSDNConfigNFASID, iSDNLayer3TimersAtt4essT305=iSDNLayer3TimersAtt4essT305, modemConfigVoiceActivityDetect=modemConfigVoiceActivityDetect, sessionConfigPreAuthTimeout=sessionConfigPreAuthTimeout, ipFrMapEntry=ipFrMapEntry, ipSvcEntryRestricted=ipSvcEntryRestricted, ipdcConfigPathString=ipdcConfigPathString, frLogicalIFConfigFrLIFName=frLogicalIFConfigFrLIFName, ipOspfAreaRowStatus=ipOspfAreaRowStatus, rbsTimersOutDigit=rbsTimersOutDigit, pppModemConfigDesiredLocalMRRU=pppModemConfigDesiredLocalMRRU, vpopConfigEntry=vpopConfigEntry, leasedLineConfigAdminState=leasedLineConfigAdminState, ipAccessListSourceMask=ipAccessListSourceMask, ipCircuitOspfCost=ipCircuitOspfCost, rbsTimersLineRelease=rbsTimersLineRelease, modemConfigAnswerString=modemConfigAnswerString, pppConfigMinRemoteMRRU=pppConfigMinRemoteMRRU, iopConfigIOPImageName=iopConfigIOPImageName, pppIsdnConfigMinRemoteMRU=pppIsdnConfigMinRemoteMRU, vmsConfigRowStatus=vmsConfigRowStatus, pppIsdnConfigStac3Enabled=pppIsdnConfigStac3Enabled, clearTcpLocalSessionHostIp2=clearTcpLocalSessionHostIp2, virtualLinkConfigChannelIdle=virtualLinkConfigChannelIdle, ipVpnGroupRowStatus=ipVpnGroupRowStatus, dVSGatewayAuthenticationLocation=dVSGatewayAuthenticationLocation, e1ConfigCircuitID=e1ConfigCircuitID, ipDnsPathString=ipDnsPathString, ipSsDebugFlag=ipSsDebugFlag, pppModemConfigAuthServerProtocol3=pppModemConfigAuthServerProtocol3, ethernetConfigEthernetPhyPort=ethernetConfigEthernetPhyPort, ipOspfMd5KeyTable=ipOspfMd5KeyTable, iopConfigPathString=iopConfigPathString, casTimersHitThresh=casTimersHitThresh, outboundSpdbIpsecProtocol=outboundSpdbIpsecProtocol, ipCircuitOutputEnqueueStyle=ipCircuitOutputEnqueueStyle, ipArpKeyValue=ipArpKeyValue, modemConfigVoiceLatePacketMin=modemConfigVoiceLatePacketMin, pppIsdnConfigReceiveACCM=pppIsdnConfigReceiveACCM, policyConfigChassisModemThresholdWarning=policyConfigChassisModemThresholdWarning, inboundSadbIpsecProtocol=inboundSadbIpsecProtocol, iSDNLayer3TimersNttT306=iSDNLayer3TimersNttT306, dialedNumberPathString=dialedNumberPathString, ipCircuitRipSendEnabled=ipCircuitRipSendEnabled, iSDNLayer3TimersNet5RowStatus=iSDNLayer3TimersNet5RowStatus, t1TrunkconfigAdminState=t1TrunkconfigAdminState, ipPoolConfigPrivate=ipPoolConfigPrivate, frCircuitConfigPathString=frCircuitConfigPathString, outboundSadbCommit=outboundSadbCommit, pppIsdnConfigSendID=pppIsdnConfigSendID, casConfigRowStatus=casConfigRowStatus, frInterfaceConfigFrDlcmiName=frInterfaceConfigFrDlcmiName, e1ConfigOverrideNumber=e1ConfigOverrideNumber, slotConfigKeyValue=slotConfigKeyValue, ipRloginKeyValue=ipRloginKeyValue, ipRoutePreference=ipRoutePreference, ipSessionAccessListEntry=ipSessionAccessListEntry, pppIsdnConfigSendNBNS=pppIsdnConfigSendNBNS, frInterfaceConfigFrDlcmiMaxLogIntf=frInterfaceConfigFrDlcmiMaxLogIntf, e1TrunkconfigClockSource=e1TrunkconfigClockSource, metaContainerEntry=metaContainerEntry, rbsTimersInToneDigitWait=rbsTimersInToneDigitWait, pppIsdnConfigCHAPClientTimeout=pppIsdnConfigCHAPClientTimeout, casTimersOutSeizeHold=casTimersOutSeizeHold, ipArpPathString=ipArpPathString, modemConfigVoiceEchoTxMute=modemConfigVoiceEchoTxMute, iSDNLayer3TimersT3m1=iSDNLayer3TimersT3m1, casConfigR2Type=casConfigR2Type, ipRipProtoV2Enabled=ipRipProtoV2Enabled, ipSessionAccessListRowStatus=ipSessionAccessListRowStatus, ipCleartcpTcpConnectTimeout=ipCleartcpTcpConnectTimeout, ipRshellConfigRowStatus=ipRshellConfigRowStatus, ipRtrConfigSourceRouteEnabled=ipRtrConfigSourceRouteEnabled, pppConfigPassiveIPCPTimeout=pppConfigPassiveIPCPTimeout, ipTrapCfgGenericLinkTrapStatus=ipTrapCfgGenericLinkTrapStatus, t3ConfigTiming=t3ConfigTiming, frInterfaceConfigFrDlcmiInjectionManagement=frInterfaceConfigFrDlcmiInjectionManagement, ipRipRowStatus=ipRipRowStatus, iSDNLayer3TimersNttEntry=iSDNLayer3TimersNttEntry, casTimersRowStatus=casTimersRowStatus, ipVrouterConfigRowStatus=ipVrouterConfigRowStatus, pppConfigSendPFC=pppConfigSendPFC, t1ConfigPathString=t1ConfigPathString, modemConfigTable=modemConfigTable, ipVpnGroupFrDlciMap5=ipVpnGroupFrDlciMap5, ipSvcEntryPathString=ipSvcEntryPathString, ipSntpTable=ipSntpTable, modemConfigDetectProtocol=modemConfigDetectProtocol, ipAccessGroupEntry=ipAccessGroupEntry, callInfoCallingSubaddress=callInfoCallingSubaddress, vpopConfigGatewayType=vpopConfigGatewayType, ipRtrConfigSnmpContactName=ipRtrConfigSnmpContactName, hSSIConfigHSSILoopback=hSSIConfigHSSILoopback, ipOspfNbNeighborRowStatus=ipOspfNbNeighborRowStatus, iSDNLayer3TimersNttT321=iSDNLayer3TimersNttT321, ipRouteEntry=ipRouteEntry, loopbackConfigKeyValue=loopbackConfigKeyValue, ipFilterListPathString=ipFilterListPathString, ipCleartcpRowStatus=ipCleartcpRowStatus, pppConfigPAPServerRetries=pppConfigPAPServerRetries, pppIsdnConfigLogControlFrames=pppIsdnConfigLogControlFrames, e1TrunkconfigLineBuildout=e1TrunkconfigLineBuildout, iSDNLayer3TimersAtt5essT3m1=iSDNLayer3TimersAtt5essT3m1)
mibBuilder.exportSymbols("APTIS-CONFIG-MIB", policyConfigEntry=policyConfigEntry, shellConfigKeyValue=shellConfigKeyValue, pppModemConfigAllowACCM=pppModemConfigAllowACCM, ipSyslogFacility=ipSyslogFacility, outboundSadbEspMacKeyLength=outboundSadbEspMacKeyLength, shellConfigEchoPassword=shellConfigEchoPassword, pppModemConfigMinRemoteMRRU=pppModemConfigMinRemoteMRRU, shellConfigRowStatus=shellConfigRowStatus, shellConfigHangupText=shellConfigHangupText, ipOspfNbNeighborIpAddress=ipOspfNbNeighborIpAddress, cHdlcPathString=cHdlcPathString, modemConfigVoiceLatePacketMax=modemConfigVoiceLatePacketMax, rbsTimersInAniWaitKp=rbsTimersInAniWaitKp, pppConfigAuthServerProtocol3=pppConfigAuthServerProtocol3, dVSGatewayPrimaryAccountingServerAddress=dVSGatewayPrimaryAccountingServerAddress, l2TPLNSHelloInterval=l2TPLNSHelloInterval, l2FHomeGatewayCheckChecksum=l2FHomeGatewayCheckChecksum, sessionTableFormatTable=sessionTableFormatTable, frCircuitConfigFrCircuitIfIndex=frCircuitConfigFrCircuitIfIndex, ipOspfAreaPathString=ipOspfAreaPathString, metaContainerKeyValue=metaContainerKeyValue, callInfoTable=callInfoTable, pppIsdnConfigCHAPValueLength=pppIsdnConfigCHAPValueLength, pppModemConfigLCPMaxConfigure=pppModemConfigLCPMaxConfigure, ds0ConfigPathString=ds0ConfigPathString, ipServicesConfigAuthMethod=ipServicesConfigAuthMethod, modemConfigVoiceDspPatch=modemConfigVoiceDspPatch, pppConfigSendMagic=pppConfigSendMagic, ipVpnGroupKeyValue=ipVpnGroupKeyValue, iSDNLayer3TimersNtiDmsPathString=iSDNLayer3TimersNtiDmsPathString, pppIsdnConfigPassiveLCP=pppIsdnConfigPassiveLCP, t1TrunkconfigPathString=t1TrunkconfigPathString, ipServicesConfigDefaultAllowFTP=ipServicesConfigDefaultAllowFTP, pppIsdnConfigAuthServerProtocol4=pppIsdnConfigAuthServerProtocol4, iSDNLayer3TimersNttT302=iSDNLayer3TimersNttT302, l2FHomeGatewayIPAddress=l2FHomeGatewayIPAddress, pppIsdnConfigVJEnabled=pppIsdnConfigVJEnabled, ipdcConfigRxTone=ipdcConfigRxTone, sessionTableFormatRowStatus=sessionTableFormatRowStatus, pppConfigUseEchoes=pppConfigUseEchoes, inboundSpdbRowStatus=inboundSpdbRowStatus, ipAaaRadiusClientRequiredAttribute=ipAaaRadiusClientRequiredAttribute, ipSvcAuthEntryModifyUserEntries=ipSvcAuthEntryModifyUserEntries, iSDNConfigSwitchType=iSDNConfigSwitchType, iSDNLayer2TimersAtt5essKeyValue=iSDNLayer2TimersAtt5essKeyValue, ipDsmccLogFlag=ipDsmccLogFlag, pppConfigAuthRequire=pppConfigAuthRequire, pppModemConfigCHAPClientTimeout=pppModemConfigCHAPClientTimeout, t1ConfigAlarmCriteria=t1ConfigAlarmCriteria, pppModemConfigMonitorRxActivity=pppModemConfigMonitorRxActivity, pppModemConfigMinRemoteMRU=pppModemConfigMinRemoteMRU, ipVrouterConfigPathString=ipVrouterConfigPathString, ethernetConfigEntry=ethernetConfigEntry, ipCircuitAdvertiseRoute=ipCircuitAdvertiseRoute, clearTcpLocalSessionConnectType=clearTcpLocalSessionConnectType, loopbackConfigPathString=loopbackConfigPathString, iSDNLayer3TimersAtt4essT302=iSDNLayer3TimersAtt4essT302, ipLocalSessionRemoteIp=ipLocalSessionRemoteIp, ipRtrConfigTrunkUnwindsMax=ipRtrConfigTrunkUnwindsMax, ipCircuitRipPoisonReverseEnabled=ipCircuitRipPoisonReverseEnabled, packAdminConfigPathString=packAdminConfigPathString, ipSgcpLogFlag=ipSgcpLogFlag, l2FHomeGatewayKeyValue=l2FHomeGatewayKeyValue, slotConfigEntry=slotConfigEntry, ipRipTrustedKeyValue=ipRipTrustedKeyValue, policyConfigDS0AllocationPolicy=policyConfigDS0AllocationPolicy, pppConfigPassword=pppConfigPassword, iSDNLayer3TimersAtt4essT3m1=iSDNLayer3TimersAtt4essT3m1, t1TrunkconfigRowStatus=t1TrunkconfigRowStatus, pppModemConfigDesiredLocalMRU=pppModemConfigDesiredLocalMRU, ipOspfSpfHoldtimeMinBetweenRecalc=ipOspfSpfHoldtimeMinBetweenRecalc, ipVpnGroupVpnId=ipVpnGroupVpnId, ipCircuitOspfEnabled=ipCircuitOspfEnabled, ipOspfAutoVirtualLinkEnabled=ipOspfAutoVirtualLinkEnabled, inboundPolicyPathString=inboundPolicyPathString, e1ConfigAdminState=e1ConfigAdminState, iSDNLayer3TimersAtt4essEntry=iSDNLayer3TimersAtt4essEntry, modemConfigVoiceG723Rate=modemConfigVoiceG723Rate, udlConfigKeyValue=udlConfigKeyValue, ipCircuitPathString=ipCircuitPathString, frInterfaceConfigFrDlcmiLinkEnable=frInterfaceConfigFrDlcmiLinkEnable, pppModemConfigPeerNSStrategy=pppModemConfigPeerNSStrategy, pppIsdnConfigPeerNSStrategy=pppIsdnConfigPeerNSStrategy, modemConfigRowStatus=modemConfigRowStatus, ipAaaGroupConfigPathString=ipAaaGroupConfigPathString, callInfoSlot=callInfoSlot, pppModemConfigLCPEchoTimeout=pppModemConfigLCPEchoTimeout, pppIsdnConfigLogStates=pppIsdnConfigLogStates, frCircuitConfigTable=frCircuitConfigTable, pppModemConfigLogEnabled=pppModemConfigLogEnabled, ipSvcAuthEntryLevel=ipSvcAuthEntryLevel, sessionConfigAcctReportFailedSessions=sessionConfigAcctReportFailedSessions, ipRtrConfigSessionUnwindsMax=ipRtrConfigSessionUnwindsMax, dacConfigPathString=dacConfigPathString, ipWin32KeyValue=ipWin32KeyValue, ipRtrConfigMulticastEnabled=ipRtrConfigMulticastEnabled, iSDNLayer3TimersAtt4essRowStatus=iSDNLayer3TimersAtt4essRowStatus, ipFrMapPathString=ipFrMapPathString, outboundPolicyPolicy=outboundPolicyPolicy, vpopConfigKeyValue=vpopConfigKeyValue, ipPolicyEntryPathString=ipPolicyEntryPathString, ipAaaRadiusClientIndex=ipAaaRadiusClientIndex, ethernetConfigEthernetBcastControl=ethernetConfigEthernetBcastControl, rbsTimersInSeizeHold=rbsTimersInSeizeHold, ipLocalSessionRowStatus=ipLocalSessionRowStatus, iSDNLayer2TimersAtt5essRowStatus=iSDNLayer2TimersAtt5essRowStatus, rbsTimersAlerting=rbsTimersAlerting, ipDnsNsKeyValue=ipDnsNsKeyValue, hSSIConfigTable=hSSIConfigTable, ipIfnumberInstance=ipIfnumberInstance, outboundSadbRowStatus=outboundSadbRowStatus, ipFilterListKeyValue=ipFilterListKeyValue, inboundSadbAhMacLength=inboundSadbAhMacLength, virtualLinkConfigTable=virtualLinkConfigTable, pppModemConfigAuthServerProtocol4=pppModemConfigAuthServerProtocol4, ipFilterListRowStatus=ipFilterListRowStatus, ipAaaRadiusClientRowStatus=ipAaaRadiusClientRowStatus, outboundSadbTable=outboundSadbTable, ipOspfMd5KeyIfIndex=ipOspfMd5KeyIfIndex, pppIsdnConfigVJSlots=pppIsdnConfigVJSlots, pppConfigMLPGroupNumber=pppConfigMLPGroupNumber, ipPolicyEntryEntry=ipPolicyEntryEntry, frLogicalIFConfigKeyValue=frLogicalIFConfigKeyValue, ipRipTrustedTable=ipRipTrustedTable, outboundSadbEspMacLength=outboundSadbEspMacLength, ipVpnGroupFrDlciMap2=ipVpnGroupFrDlciMap2, pppIsdnConfigAuthFailureRenegotiatesLCP=pppIsdnConfigAuthFailureRenegotiatesLCP, pppIsdnConfigAllowMRU=pppIsdnConfigAllowMRU, iSDNLayer3TimersNet5T312=iSDNLayer3TimersNet5T312, outboundSadbAhMacAlg=outboundSadbAhMacAlg, ipSntpMasterClockAddr=ipSntpMasterClockAddr, organizationNamePathString=organizationNamePathString, ipAccessListDestinationPort=ipAccessListDestinationPort, pppIsdnConfigMLPMaxLinks=pppIsdnConfigMLPMaxLinks, pppIsdnConfigAuthClientProtocol1=pppIsdnConfigAuthClientProtocol1, modemConfigVoiceDtmfPayloads=modemConfigVoiceDtmfPayloads, pppIsdnConfigMPPCEnabled=pppIsdnConfigMPPCEnabled, pppIsdnConfigMLPGroupNumber=pppIsdnConfigMLPGroupNumber, ipTrapCfgCommunityStr=ipTrapCfgCommunityStr, ipLocalSessionEntry=ipLocalSessionEntry, eventConfigTable=eventConfigTable, frInterfaceConfigFrDlcmiMaxFrameSize=frInterfaceConfigFrDlcmiMaxFrameSize, policyConfigModemFailSample=policyConfigModemFailSample, iSDNLayer3TimersAtt4essT308=iSDNLayer3TimersAtt4essT308, policyConfigModemSleepTimeout=policyConfigModemSleepTimeout, softswitchConfigPathString=softswitchConfigPathString, iSDNLayer3TimersAtt5essT321=iSDNLayer3TimersAtt5essT321, pppConfigAuthClientProtocol4=pppConfigAuthClientProtocol4, inboundSpdbSpi=inboundSpdbSpi, sessionTableFormatParam10=sessionTableFormatParam10, pppConfigCHAPClientRetries=pppConfigCHAPClientRetries, pppModemConfigSendMagic=pppModemConfigSendMagic, e1TrunkconfigPathString=e1TrunkconfigPathString, cHdlcMaxMissedKeepalives=cHdlcMaxMissedKeepalives, ethernetConfigPathString=ethernetConfigPathString, ipdcConfigRowStatus=ipdcConfigRowStatus, signalingConfigRowStatus=signalingConfigRowStatus, iSDNLayer3TimersNttT305=iSDNLayer3TimersNttT305, ipServicesConfigEntry=ipServicesConfigEntry, e1liuConfigCircuitID=e1liuConfigCircuitID, organizationNameTunnelGroup=organizationNameTunnelGroup, dialedNumberEntry=dialedNumberEntry, ipServicesConfigDefaultAllowRLogin=ipServicesConfigDefaultAllowRLogin, iopConfigEntry=iopConfigEntry, PYSNMP_MODULE_ID=aptisConfigModule, callInfoPathString=callInfoPathString, ipAaaRadiusdConfigEntry=ipAaaRadiusdConfigEntry, outboundSadbIpsecProtocol=outboundSadbIpsecProtocol, pppModemConfigLogDump=pppModemConfigLogDump, pppLocalSessionVJEnabled=pppLocalSessionVJEnabled, virtualLinkConfigPathString=virtualLinkConfigPathString, ipAaaRadiusConfigVendorSpecMultilink=ipAaaRadiusConfigVendorSpecMultilink, pppIsdnConfigLogVJ=pppIsdnConfigLogVJ, cLIKeyValue=cLIKeyValue, pppConfigLogControlFrames=pppConfigLogControlFrames, ipMulticastConfigHeartbeatPort=ipMulticastConfigHeartbeatPort, dmmAdminConfigAdminState=dmmAdminConfigAdminState, e1liuConfigPathString=e1liuConfigPathString, tunnelGroupConfigEntry=tunnelGroupConfigEntry, sessionTableFormatWidth2=sessionTableFormatWidth2, ipRhostEntryAllowRsh=ipRhostEntryAllowRsh, ipMulticastConfigHeartbeatSource=ipMulticastConfigHeartbeatSource, modemConfigDetectTimeout=modemConfigDetectTimeout, pppModemConfigLogProtocolFrames=pppModemConfigLogProtocolFrames, ipWin32Devname=ipWin32Devname, ipAaaRadiusClientPathString=ipAaaRadiusClientPathString, frCircuitConfigFrCircuitLIFIndex=frCircuitConfigFrCircuitLIFIndex, pppConfigIPCPRestartTimer=pppConfigIPCPRestartTimer, pppIsdnConfigCHAPServerChallenges=pppIsdnConfigCHAPServerChallenges, dialedNumberVpop=dialedNumberVpop, casConfigCdBits=casConfigCdBits, pppLocalSessionConnectLimit=pppLocalSessionConnectLimit, iSDNLayer3TimersT322=iSDNLayer3TimersT322, modemConfigVoiceEchoTail=modemConfigVoiceEchoTail, sessionTableFormatWidth4=sessionTableFormatWidth4, rbsConfigTable=rbsConfigTable, udlConfigIpaddress=udlConfigIpaddress, iSDNLayer3TimersNtiDmsT306=iSDNLayer3TimersNtiDmsT306, ipRtrConfigSnmpSysLocation=ipRtrConfigSnmpSysLocation, ipSessionAccessListDestinationPort=ipSessionAccessListDestinationPort, dVSGatewayTable=dVSGatewayTable, pppConfigUserName=pppConfigUserName, ipDnsNsIpAddr=ipDnsNsIpAddr, virtualLinkConfigChannelRate=virtualLinkConfigChannelRate, modemAdminConfigTable=modemAdminConfigTable, udlConfigTable=udlConfigTable, t3ConfigAdminState=t3ConfigAdminState, sessionTableFormatParam9=sessionTableFormatParam9, inboundSpdbEntry=inboundSpdbEntry, inboundSpdbKeyValue=inboundSpdbKeyValue, ipTrapCfgLocalPswdChangeTrapStatus=ipTrapCfgLocalPswdChangeTrapStatus, sessionTableFormatHeading2=sessionTableFormatHeading2, callInfoCalledSubaddress=callInfoCalledSubaddress, callInfoCallingNumberType=callInfoCallingNumberType, modemConfigPhoneNumber=modemConfigPhoneNumber, ipAaaRadiusClientStatus=ipAaaRadiusClientStatus, pppIsdnConfigTimeRemainingInterval=pppIsdnConfigTimeRemainingInterval, ipSntpAdjSign=ipSntpAdjSign, cLITable=cLITable, shellConfigPasswordPrompt=shellConfigPasswordPrompt, dialedNumberNumber=dialedNumberNumber, organizationNameKeyValue=organizationNameKeyValue, sessionTableFormatHeading6=sessionTableFormatHeading6, clockRecoveryEntry=clockRecoveryEntry, ipCleartcpTable=ipCleartcpTable, callInfoCallType=callInfoCallType, hSSIConfigHSSIQueueDepth=hSSIConfigHSSIQueueDepth, pppIsdnConfigMLPScaleFragments=pppIsdnConfigMLPScaleFragments, t1ConfigClockingPriority=t1ConfigClockingPriority, ipVpnGroupDestIpPrefix=ipVpnGroupDestIpPrefix, ipCircuitDescription=ipCircuitDescription, dVSGatewayRipTimeout=dVSGatewayRipTimeout, ipLocalSessionRouteMulticast=ipLocalSessionRouteMulticast, ipRtrConfigRowStatus=ipRtrConfigRowStatus, iSDNLayer3TimersAtt5essT303=iSDNLayer3TimersAtt5essT303, ipPolicyEntryForceDestinationIp=ipPolicyEntryForceDestinationIp, frInterfaceConfigFrDlcmiLMIType=frInterfaceConfigFrDlcmiLMIType, outboundSadbNextEncapIpAddr=outboundSadbNextEncapIpAddr, policyConfigActionBacklog=policyConfigActionBacklog, ipVpnGroupDestIpMask=ipVpnGroupDestIpMask, iSDNLayer3TimersNtiDmsT321=iSDNLayer3TimersNtiDmsT321, inboundPolicyPolicy=inboundPolicyPolicy, ipDsbyteTable=ipDsbyteTable, inboundPolicyRowStatus=inboundPolicyRowStatus, shellConfigEchoName=shellConfigEchoName, ipOspfMd5KeyAreaId=ipOspfMd5KeyAreaId, clearTcpLocalSessionEntry=clearTcpLocalSessionEntry, inboundSadbPathString=inboundSadbPathString, pppIsdnConfigSendMRU=pppIsdnConfigSendMRU, outboundSadbEspEncKey=outboundSadbEspEncKey, dVSGatewayMaxRetransmits=dVSGatewayMaxRetransmits, pppConfigAuthServerProtocol4=pppConfigAuthServerProtocol4, ipShellTable=ipShellTable, clearTcpLocalSessionPathString=clearTcpLocalSessionPathString)
mibBuilder.exportSymbols("APTIS-CONFIG-MIB", ipCircuitOspfHelloInterval=ipCircuitOspfHelloInterval, pppConfigAuthFailureRenegotiatesLCP=pppConfigAuthFailureRenegotiatesLCP, pppModemConfigStac4Enabled=pppModemConfigStac4Enabled, ipRipTrustedEntry=ipRipTrustedEntry, cHdlcIpMask=cHdlcIpMask, t1ConfigSignaling=t1ConfigSignaling, callInfoCalledSubaddressType=callInfoCalledSubaddressType, casTimersOutWaitSeizeAck=casTimersOutWaitSeizeAck, softswitchConfigPort=softswitchConfigPort, ipCleartcpRemoteHostname=ipCleartcpRemoteHostname, cHdlcKeyValue=cHdlcKeyValue, ipSnmpKeyValue=ipSnmpKeyValue, modemConfigCallString=modemConfigCallString, ipServicesConfigDefaultAllowRSh=ipServicesConfigDefaultAllowRSh, ipSvcAuthEntryAllowRLogin=ipSvcAuthEntryAllowRLogin, modemConfigVoiceAdaptivePostfilter=modemConfigVoiceAdaptivePostfilter, casConfigMaxCallingDigits=casConfigMaxCallingDigits, frInterfaceConfigPathString=frInterfaceConfigPathString, pppConfigAuthServerProtocol1=pppConfigAuthServerProtocol1, ipdcConfigSystemType=ipdcConfigSystemType, ipSessionAccessListMode=ipSessionAccessListMode, virtualLinkConfigKeyValue=virtualLinkConfigKeyValue, ipCleartcpEntry=ipCleartcpEntry, ipAaaServerPathString=ipAaaServerPathString, eventConfigPathString=eventConfigPathString, rbsConfigMaxCalledDigits=rbsConfigMaxCalledDigits, clockRecoveryPrimaryPort=clockRecoveryPrimaryPort, coredumpConfigOutputMode=coredumpConfigOutputMode, casConfigReqCallingNumber=casConfigReqCallingNumber, ipOspfGenerateDefaultMetricType=ipOspfGenerateDefaultMetricType, signalingGatewayPathString=signalingGatewayPathString, cLIRowStatus=cLIRowStatus, pppModemConfigLogOptions=pppModemConfigLogOptions, dacConfigKeyValue=dacConfigKeyValue, ipAaaServerIpAddr=ipAaaServerIpAddr, ipCleartcpRemotePort=ipCleartcpRemotePort, pppModemConfigStacPerformance=pppModemConfigStacPerformance, pppIsdnConfigLogMLP=pppIsdnConfigLogMLP, rbsTimersInPostWink=rbsTimersInPostWink, sessionConfigPathString=sessionConfigPathString, ipIfnumberPathString=ipIfnumberPathString, dialedNumberRowStatus=dialedNumberRowStatus, pppModemConfigMLPNullFragmentTimeout=pppModemConfigMLPNullFragmentTimeout, ipSvcAuthEntryAllowRSh=ipSvcAuthEntryAllowRSh, ipTrapCfgEntry=ipTrapCfgEntry, ipSvcAuthEntryTable=ipSvcAuthEntryTable, frCircuitConfigRowStatus=frCircuitConfigRowStatus, dS3TrunkconfigKeyValue=dS3TrunkconfigKeyValue, ipOspfAreaStubAreaDefaultCost=ipOspfAreaStubAreaDefaultCost, ipRipAuthKey=ipRipAuthKey, pppModemConfigCHAPServerRetries=pppModemConfigCHAPServerRetries, ipAddressBlockMask=ipAddressBlockMask, shellConfigRetryCount=shellConfigRetryCount, ipAaaRadiusClientKeyValue=ipAaaRadiusClientKeyValue, casTimersTable=casTimersTable, rbsConfigEntry=rbsConfigEntry, pppConfigNBNS1=pppConfigNBNS1, outboundSpdbPathString=outboundSpdbPathString, inboundSadbIpAddr=inboundSadbIpAddr, l2FHomeGatewayHostName=l2FHomeGatewayHostName, pppIsdnConfigIPCPMaxConfigure=pppIsdnConfigIPCPMaxConfigure, signalingConfigSs7Mode=signalingConfigSs7Mode, ipAccessListIcmpType=ipAccessListIcmpType, organizationNameInputStyle=organizationNameInputStyle, virtualLinkConfigChannelName=virtualLinkConfigChannelName, packAdminConfigEntry=packAdminConfigEntry, pppConfigLogOptions=pppConfigLogOptions, sessionConfigPreAuth=sessionConfigPreAuth, hSSIConfigHSSIPhyPort=hSSIConfigHSSIPhyPort, ipAccessListIcmpCode=ipAccessListIcmpCode, inboundSadbEspEncKey=inboundSadbEspEncKey, ipdcConfigKeyValue=ipdcConfigKeyValue, ipRouteKeyValue=ipRouteKeyValue, dacConfigAdminState=dacConfigAdminState, vpopConfigAuthMethod=vpopConfigAuthMethod, pppModemConfigAllowPFC=pppModemConfigAllowPFC, dmmAdminConfigRowStatus=dmmAdminConfigRowStatus, ethernetConfigEthernetRlen=ethernetConfigEthernetRlen, e1ConfigRowStatus=e1ConfigRowStatus, ipVrouterConfigTable=ipVrouterConfigTable, ipSnmpWriteEnabled=ipSnmpWriteEnabled, ethernetConfigEthernetPortspeed=ethernetConfigEthernetPortspeed, pppConfigPAPServerTimeout=pppConfigPAPServerTimeout, iSDNLayer3TimersAtt4essT312=iSDNLayer3TimersAtt4essT312, callInfoCalledNumber=callInfoCalledNumber, ethernetConfigTable=ethernetConfigTable, sessionConfigPreAuthTimeoutAction=sessionConfigPreAuthTimeoutAction, pppLocalSessionInactivityLimit=pppLocalSessionInactivityLimit, pppModemConfigSendACFC=pppModemConfigSendACFC, cHdlcIpAddr=cHdlcIpAddr, modemConfigVoiceEchoCoeffFreeze=modemConfigVoiceEchoCoeffFreeze, inboundSadbSpi=inboundSadbSpi, iSDNLayer3TimersAtt5essRowStatus=iSDNLayer3TimersAtt5essRowStatus, casTimersInSetupCompleteHold=casTimersInSetupCompleteHold, ipOspfAreaStubAreaNoSummaryEnabled=ipOspfAreaStubAreaNoSummaryEnabled, l2TPLNSSourceIPAddress=l2TPLNSSourceIPAddress, ipAaaGroupConfigEntry=ipAaaGroupConfigEntry, iSDNLayer3TimersNet5T3m1=iSDNLayer3TimersNet5T3m1, t1TrunkconfigKeyValue=t1TrunkconfigKeyValue, ipRhostEntryRemoteHost=ipRhostEntryRemoteHost, iSDNLayer3TimersAtt4essT309=iSDNLayer3TimersAtt4essT309, sessionConfigPreAuthAAAGroup=sessionConfigPreAuthAAAGroup, ipCircuitRipSendAccessListId=ipCircuitRipSendAccessListId, ipLocalSessionFilterId=ipLocalSessionFilterId, pppConfigStacMode=pppConfigStacMode, ipOspfNbNeighborKeyValue=ipOspfNbNeighborKeyValue, shellConfigCtrlDAborts=shellConfigCtrlDAborts, shellConfigEntry=shellConfigEntry, iSDNLayer3TimersNtiDmsT308=iSDNLayer3TimersNtiDmsT308, ipdcConfigSecondarySwitchIpAddr=ipdcConfigSecondarySwitchIpAddr, ipVrouterConfigRouterType=ipVrouterConfigRouterType, pppConfigMLPEndpointDisc=pppConfigMLPEndpointDisc, frInterfaceConfigTable=frInterfaceConfigTable, macConfigTable=macConfigTable, frCircuitConfigFrCircuitMulticast=frCircuitConfigFrCircuitMulticast, ipServicesConfigDefaultLevel=ipServicesConfigDefaultLevel, dS3TrunkconfigPathString=dS3TrunkconfigPathString, pppModemConfigMLPSendNullFragments=pppModemConfigMLPSendNullFragments, ipDnsNsTable=ipDnsNsTable, e1ConfigKeyValue=e1ConfigKeyValue, pppIsdnConfigMLPSendNullFragments=pppIsdnConfigMLPSendNullFragments, ipCircuitRipV1Enabled=ipCircuitRipV1Enabled, callInfoCallingNumberPlan=callInfoCallingNumberPlan, ds0ConfigEntry=ds0ConfigEntry, ipTrapCfgRemoteAuthPacketDiscardTrapStatus=ipTrapCfgRemoteAuthPacketDiscardTrapStatus, outboundSadbPathString=outboundSadbPathString, ipRipTrustedPathString=ipRipTrustedPathString, packAdminConfigAdminState=packAdminConfigAdminState, e1ConfigSignaling=e1ConfigSignaling, rbsConfigDid=rbsConfigDid, ipAaaServerKey=ipAaaServerKey, pppIsdnConfigStac4Enabled=pppIsdnConfigStac4Enabled, ipAccessGroupIfIndex=ipAccessGroupIfIndex, pppConfigMLPFragmentSize=pppConfigMLPFragmentSize, pppConfigMPPCEnabled=pppConfigMPPCEnabled, ipShellLoginPrompt=ipShellLoginPrompt, ipSessionAccessListSourceMask=ipSessionAccessListSourceMask, iSDNLayer3TimersNttT304=iSDNLayer3TimersNttT304, pppModemConfigAuthServerProtocol2=pppModemConfigAuthServerProtocol2, sessionTableFormatParam2=sessionTableFormatParam2, pppIsdnConfigAuthClientProtocol3=pppIsdnConfigAuthClientProtocol3, ipAaaRadiusClientVpopId=ipAaaRadiusClientVpopId, pppModemConfigSendMRU=pppModemConfigSendMRU, modemConfigVoiceDgainPackettoPCM=modemConfigVoiceDgainPackettoPCM, pppModemConfigLCPRestartTimer=pppModemConfigLCPRestartTimer, cHdlcTable=cHdlcTable, l2FHomeGatewaySendName=l2FHomeGatewaySendName, iSDNLayer3TimersAtt5essT316=iSDNLayer3TimersAtt5essT316, ipAccessListId=ipAccessListId, ipAaaGroupConfigKeyValue=ipAaaGroupConfigKeyValue, frLogicalIFConfigRowStatus=frLogicalIFConfigRowStatus, metaContainerCmlid=metaContainerCmlid, ipSyslogKeyValue=ipSyslogKeyValue, pppLocalSessionKeyValue=pppLocalSessionKeyValue, iSDNLayer3TimersNtiDmsT319=iSDNLayer3TimersNtiDmsT319, ipRipKeyValue=ipRipKeyValue, e1ConfigLineCode=e1ConfigLineCode, pppIsdnConfigLogProtocolFrames=pppIsdnConfigLogProtocolFrames, ipVpnGroupTable=ipVpnGroupTable, outboundSadbKeyValue=outboundSadbKeyValue, ipAccessListTable=ipAccessListTable, rbsTimersInPreWinkExtend=rbsTimersInPreWinkExtend, ipRtrConfigPathString=ipRtrConfigPathString, pppIsdnConfigIPXCPEnabled=pppIsdnConfigIPXCPEnabled, pppConfigIPCPMaxConfigure=pppConfigIPCPMaxConfigure, rbsTimersInKpAckDelay=rbsTimersInKpAckDelay, callInfoCallingOptions=callInfoCallingOptions, coredumpConfigTable=coredumpConfigTable, frCircuitConfigFrCircuitCommittedBurst=frCircuitConfigFrCircuitCommittedBurst, ipSsLogFlag=ipSsLogFlag, pppModemConfigAllowMRU=pppModemConfigAllowMRU, ipMulticastConfigKeyValue=ipMulticastConfigKeyValue, frInterfaceConfigFrDlcmiLMIBandwidthControl=frInterfaceConfigFrDlcmiLMIBandwidthControl, pppIsdnConfigEstablishTimeLimit=pppIsdnConfigEstablishTimeLimit, pppIsdnConfigPAPClientRetries=pppIsdnConfigPAPClientRetries, pppModemConfigSendACCM=pppModemConfigSendACCM, hdlcConfigConnectTimeout=hdlcConfigConnectTimeout, ipAaaRadiusdConfigPathString=ipAaaRadiusdConfigPathString, pppIsdnConfigAllowPFC=pppIsdnConfigAllowPFC, frInterfaceConfigFrDlcmiDceMonitoredEvents=frInterfaceConfigFrDlcmiDceMonitoredEvents, coredumpConfigDumpSCC=coredumpConfigDumpSCC, inboundPolicyTable=inboundPolicyTable, ipLocalSessionMtu=ipLocalSessionMtu, pppIsdnConfigAuthServerProtocol1=pppIsdnConfigAuthServerProtocol1, pppModemConfigAuthClientProtocol4=pppModemConfigAuthClientProtocol4, t1NumberNumber=t1NumberNumber, t3ConfigRowStatus=t3ConfigRowStatus, virtualLinkConfigEntry=virtualLinkConfigEntry, dVSGatewayTgHardwareAddressLength=dVSGatewayTgHardwareAddressLength, ipFrMapIpDestination=ipFrMapIpDestination, pppConfigLogStates=pppConfigLogStates, iSDNLayer2TimersAtt5essN201=iSDNLayer2TimersAtt5essN201, t1ConfigDefaultNumber=t1ConfigDefaultNumber, rbsConfigPathString=rbsConfigPathString, ipTrapCfgTotalModemsThresholdTrapStatus=ipTrapCfgTotalModemsThresholdTrapStatus, ethernetConfigEthernetFCSControl=ethernetConfigEthernetFCSControl, casConfigCallingNumberMandatory=casConfigCallingNumberMandatory, vpopConfigRouteAdvertise=vpopConfigRouteAdvertise, pppIsdnConfigStacMode=pppIsdnConfigStacMode, casConfigSkipCategoryRequest=casConfigSkipCategoryRequest, ipServicesConfigKeyValue=ipServicesConfigKeyValue, frInterfaceConfigEntry=frInterfaceConfigEntry, casConfigMaxCalledDigits=casConfigMaxCalledDigits, ipDsbytePathString=ipDsbytePathString, modemConfigVoiceEchoRxMute=modemConfigVoiceEchoRxMute, e1ConfigAlarmCriteria=e1ConfigAlarmCriteria, ipRtrConfigRouteCacheEnabled=ipRtrConfigRouteCacheEnabled, casTimersEntry=casTimersEntry, callInfoCallBearerType=callInfoCallBearerType, ipAaaSetConfigKeyValue=ipAaaSetConfigKeyValue, outboundSadbAhMacKey=outboundSadbAhMacKey, ipAccessListPathString=ipAccessListPathString, ipCircuitIpRemote=ipCircuitIpRemote, casConfigBusyOutOOS=casConfigBusyOutOOS, ipDsmccTable=ipDsmccTable, sessionConfigEntry=sessionConfigEntry, ipAaaRadiusConfigNasPortStyle=ipAaaRadiusConfigNasPortStyle, outboundPolicyKeyValue=outboundPolicyKeyValue, iSDNLayer3TimersNtiDmsT305=iSDNLayer3TimersNtiDmsT305, iSDNLayer3TimersNet5T303=iSDNLayer3TimersNet5T303, frCircuitConfigFrCircuitCommittedBurstMin=frCircuitConfigFrCircuitCommittedBurstMin, ipAaaClientPortPortCount=ipAaaClientPortPortCount, iSDNLayer3TimersAtt4essT306=iSDNLayer3TimersAtt4essT306, ipAaaClientPortEntry=ipAaaClientPortEntry, modemConfigConnectTimeout=modemConfigConnectTimeout, hSSIConfigHSSIClock=hSSIConfigHSSIClock, t1TrunkconfigLineFraming=t1TrunkconfigLineFraming, ipOspfSpfDelayBeforeRecalc=ipOspfSpfDelayBeforeRecalc, ipCircuitMtu=ipCircuitMtu, ipAaaRadiusConfigRowStatus=ipAaaRadiusConfigRowStatus, ipdcConfigEntry=ipdcConfigEntry, organizationNameEntry=organizationNameEntry, dVSGatewayRipSourceAddress=dVSGatewayRipSourceAddress, ipDnsKeyValue=ipDnsKeyValue, ipRhostEntryAllowRlogin=ipRhostEntryAllowRlogin, iSDNLayer2TimersTable=iSDNLayer2TimersTable, cLIHoldTempShutdownCardsInReset=cLIHoldTempShutdownCardsInReset, iSDNLayer3TimersAtt5essKeyValue=iSDNLayer3TimersAtt5essKeyValue, ipDsmccKeyValue=ipDsmccKeyValue, pppConfigStacPerformance=pppConfigStacPerformance, pppModemConfigCountIGMP=pppModemConfigCountIGMP, ipRtrConfigRouterDiscovery=ipRtrConfigRouterDiscovery, inboundSadbEspMacLength=inboundSadbEspMacLength, pppConfigAllowPFC=pppConfigAllowPFC, rbsTimersPathString=rbsTimersPathString, ipSntpKeyValue=ipSntpKeyValue, udlConfigRowStatus=udlConfigRowStatus, ipSnmpReadCommunity=ipSnmpReadCommunity, modemConfigVoiceSilenceHandling=modemConfigVoiceSilenceHandling, pppConfigDesiredRemoteMRRU=pppConfigDesiredRemoteMRRU, ipTrapCfgSccTrapStatus=ipTrapCfgSccTrapStatus, oosTable=oosTable, shellConfigExtraLoginText=shellConfigExtraLoginText, ipArpEntry=ipArpEntry)
mibBuilder.exportSymbols("APTIS-CONFIG-MIB", iSDNConfigIIDEncoding=iSDNConfigIIDEncoding, iSDNLayer3TimersNtiDmsT304=iSDNLayer3TimersNtiDmsT304, pppIsdnConfigDesiredLocalMRU=pppIsdnConfigDesiredLocalMRU, organizationNameVPOP=organizationNameVPOP, ipPoolConfigPathString=ipPoolConfigPathString, casConfigOOS=casConfigOOS, pppIsdnConfigMinRemoteMRRU=pppIsdnConfigMinRemoteMRRU, ipAccessListDestinationMask=ipAccessListDestinationMask, pppConfigPeerNSStrategy=pppConfigPeerNSStrategy, pppIsdnConfigAuthServerProtocol3=pppIsdnConfigAuthServerProtocol3, rbsTimersOutWaitSeizeAck=rbsTimersOutWaitSeizeAck, ipSessionAccessListPathString=ipSessionAccessListPathString, dS3TrunkconfigAdminState=dS3TrunkconfigAdminState, l2TPLNSTable=l2TPLNSTable, policyConfigDoSS7Resourcing=policyConfigDoSS7Resourcing, outboundSpdbTable=outboundSpdbTable, ipAccessListDestinationIp=ipAccessListDestinationIp, pppIsdnConfigIPCPRestartTimer=pppIsdnConfigIPCPRestartTimer, pppConfigCHAPClientTimeout=pppConfigCHAPClientTimeout, iSDNLayer2TimersN201=iSDNLayer2TimersN201, ipCircuitIpLocal=ipCircuitIpLocal, callTypeOverrideRowStatus=callTypeOverrideRowStatus, ipAaaRadiusdConfigPort=ipAaaRadiusdConfigPort, iSDNLayer3TimersNtiDmsT3m1=iSDNLayer3TimersNtiDmsT3m1, ipCleartcpLocalPortAllocated=ipCleartcpLocalPortAllocated, ipIfnumberIfIndex=ipIfnumberIfIndex, pppIsdnConfigSendMagic=pppIsdnConfigSendMagic, frInterfaceConfigRowStatus=frInterfaceConfigRowStatus, ipRshellConfigPathString=ipRshellConfigPathString, pppModemConfigUserName=pppModemConfigUserName, pppIsdnConfigMonitorRxActivity=pppIsdnConfigMonitorRxActivity, dacConfigEntry=dacConfigEntry, pppIsdnConfigRowStatus=pppIsdnConfigRowStatus, dS3TrunkconfigRowStatus=dS3TrunkconfigRowStatus, pppConfigEstablishTimeLimit=pppConfigEstablishTimeLimit, pppConfigPAPClientRetries=pppConfigPAPClientRetries, virtualLinkConfigChannelQueueDepth=virtualLinkConfigChannelQueueDepth, sessionTableFormatParam5=sessionTableFormatParam5, t3ConfigLineFraming=t3ConfigLineFraming, ipCircuitSpeed=ipCircuitSpeed, pppIsdnConfigKeyValue=pppIsdnConfigKeyValue, iSDNLayer3TimersAtt5essT310=iSDNLayer3TimersAtt5essT310, pppIsdnConfigAuthAllow=pppIsdnConfigAuthAllow, ipSvcEntryAdminStatus=ipSvcEntryAdminStatus, ipSntpUpdateFrequency=ipSntpUpdateFrequency, iSDNLayer2TimersAtt5essT203=iSDNLayer2TimersAtt5essT203, t1ConfigYellowAlarm=t1ConfigYellowAlarm, ipArpIpDestination=ipArpIpDestination, pppModemConfigCCPEnabled=pppModemConfigCCPEnabled, hSSIConfigHSSIEnable=hSSIConfigHSSIEnable, pppConfigCountIGMP=pppConfigCountIGMP, ipSgcpEntry=ipSgcpEntry, coredumpConfigOutputDrive=coredumpConfigOutputDrive, sessionTableFormatWidth7=sessionTableFormatWidth7, leasedLineConfigPathString=leasedLineConfigPathString, l2TPLNSIPAddress=l2TPLNSIPAddress, pppModemConfigAllowMagic=pppModemConfigAllowMagic, e1TrunkconfigAdminState=e1TrunkconfigAdminState, vpopConfigSendIPHint=vpopConfigSendIPHint, pppConfigAuthAllow=pppConfigAuthAllow, ipTrapCfgPathString=ipTrapCfgPathString, ipSyslogIpPort=ipSyslogIpPort, pppModemConfigMPPCEnabled=pppModemConfigMPPCEnabled, tunnelGroupConfigRowStatus=tunnelGroupConfigRowStatus, hdlcConfigPathString=hdlcConfigPathString, ipFrMapRowStatus=ipFrMapRowStatus, iSDNLayer3TimersAtt5essT312=iSDNLayer3TimersAtt5essT312, ipRtrConfigKeyValue=ipRtrConfigKeyValue, ipAddressBlockRowStatus=ipAddressBlockRowStatus, iSDNLayer3TimersNtiDmsT313=iSDNLayer3TimersNtiDmsT313, virtualLinkConfigChannelCRCType=virtualLinkConfigChannelCRCType, ipRshKeyValue=ipRshKeyValue, pppIsdnConfigAllowACFC=pppIsdnConfigAllowACFC, frCircuitConfigFrCircuitCongestionMonitorPeriod=frCircuitConfigFrCircuitCongestionMonitorPeriod, iSDNLayer3TimersNet5Table=iSDNLayer3TimersNet5Table, softswitchConfigTable=softswitchConfigTable, ipRipTable=ipRipTable, t1liuConfigKeyValue=t1liuConfigKeyValue, casTimersRecover=casTimersRecover, frCircuitConfigKeyValue=frCircuitConfigKeyValue, pppConfigPAPClientTimeout=pppConfigPAPClientTimeout, ipCircuitOspfAuthType=ipCircuitOspfAuthType, sessionTableFormatParam6=sessionTableFormatParam6, ipCircuitMulticastEnabled=ipCircuitMulticastEnabled, rbsTimersInKpDetectWait=rbsTimersInKpDetectWait, vpopConfigUseIPPoolFromOtherVPOP=vpopConfigUseIPPoolFromOtherVPOP, outboundSadbNextEncapIpsecProtocol=outboundSadbNextEncapIpsecProtocol, inboundSadbTable=inboundSadbTable, sessionConfigRowStatus=sessionConfigRowStatus, ipShellEntry=ipShellEntry, signalingGatewayKeyValue=signalingGatewayKeyValue, ipAaaServerRetries=ipAaaServerRetries, macConfigKeyValue=macConfigKeyValue, virtualLinkConfigChannelPhyLink=virtualLinkConfigChannelPhyLink, ipServicesConfigDefaultAllowTelnet=ipServicesConfigDefaultAllowTelnet, pppConfigDesiredLocalMRU=pppConfigDesiredLocalMRU, pppConfigSendACCM=pppConfigSendACCM, ipOspfVirtualLinkDeadInterval=ipOspfVirtualLinkDeadInterval, ipRhostEntryPathString=ipRhostEntryPathString, sessionTableFormatEntry=sessionTableFormatEntry, sessionTableFormatHeading7=sessionTableFormatHeading7, statsDummyCommit=statsDummyCommit, rbsTimersOutWinkWait=rbsTimersOutWinkWait, ipDnsRowStatus=ipDnsRowStatus, pppConfigPassiveIPCP=pppConfigPassiveIPCP, shellConfigTimeoutText=shellConfigTimeoutText, vpopConfigGratuitousArpEnabled=vpopConfigGratuitousArpEnabled, ipAaaSetConfigRowStatus=ipAaaSetConfigRowStatus, ipSsRowStatus=ipSsRowStatus, inboundSadbEspMacAlg=inboundSadbEspMacAlg, l2TPLNSInitialAckTimeout=l2TPLNSInitialAckTimeout, ipDsbyteEntry=ipDsbyteEntry, pppModemConfigPAPServerRetries=pppModemConfigPAPServerRetries, ipTrapCfgIpPort=ipTrapCfgIpPort, iSDNLayer3TimersNttT313=iSDNLayer3TimersNttT313, sessionConfigDefaultVpopEnable=sessionConfigDefaultVpopEnable, dacConfigRowStatus=dacConfigRowStatus, pppIsdnConfigDesiredLocalMRRU=pppIsdnConfigDesiredLocalMRRU, organizationNameTable=organizationNameTable, udlConfigDumpserver=udlConfigDumpserver, e1TrunkconfigLineFraming=e1TrunkconfigLineFraming, ipTrapCfgDhcpTrapStatus=ipTrapCfgDhcpTrapStatus, ipVpnGroupFrDlciMapCount=ipVpnGroupFrDlciMapCount, ipOspfVirtualLinkRetransmitInterval=ipOspfVirtualLinkRetransmitInterval, ipRouteTable=ipRouteTable, ipArpIfIndex=ipArpIfIndex, pppModemConfigAuthAllow=pppModemConfigAuthAllow, frCircuitConfigFrCircuitExcessBurst=frCircuitConfigFrCircuitExcessBurst, pppModemConfigPassiveIPCPTimeout=pppModemConfigPassiveIPCPTimeout, ipCircuitNumbered=ipCircuitNumbered, pppIsdnConfigSendACCM=pppIsdnConfigSendACCM, ipAccessGroupTable=ipAccessGroupTable, l2FHomeGatewaySendPassword=l2FHomeGatewaySendPassword, vpopConfigVrouterId=vpopConfigVrouterId, ipAccessListEntry=ipAccessListEntry, ipTrapCfgVerTrapType=ipTrapCfgVerTrapType, ipCleartcpKeyValue=ipCleartcpKeyValue, sessionConfigCheckpointTime=sessionConfigCheckpointTime, ipRouteDefaultFlag=ipRouteDefaultFlag, iSDNLayer3TimersAtt4essT303=iSDNLayer3TimersAtt4essT303, pppConfigLogProtocolFrames=pppConfigLogProtocolFrames, ipVpnGroupFrDlciMap1=ipVpnGroupFrDlciMap1, inboundSadbAhMacAlg=inboundSadbAhMacAlg, ipAaaServerIndex=ipAaaServerIndex, pppIsdnConfigIPCPEnabled=pppIsdnConfigIPCPEnabled, l2TPLNSPathString=l2TPLNSPathString, pppModemConfigVJSlots=pppModemConfigVJSlots, casTimersPathString=casTimersPathString, pppIsdnConfigPAPServerTimeout=pppIsdnConfigPAPServerTimeout, signalingGatewayEntry=signalingGatewayEntry, t1NumberKeyValue=t1NumberKeyValue, ipRhostEntryTable=ipRhostEntryTable, ipAaaRadiusdConfigKeyValue=ipAaaRadiusdConfigKeyValue, ipWin32RowStatus=ipWin32RowStatus, vpopConfigPreserveTunnelInfo=vpopConfigPreserveTunnelInfo, ipdcConfigBayNumber=ipdcConfigBayNumber, ipAccessListKeyValue=ipAccessListKeyValue, sessionTableFormatHeading9=sessionTableFormatHeading9, pppConfigLCPEchoRetries=pppConfigLCPEchoRetries, ipServicesConfigModifyPasswords=ipServicesConfigModifyPasswords, ipPolicyEntryTable=ipPolicyEntryTable, ipPoolConfigKeyValue=ipPoolConfigKeyValue, rbsTimersOutSeizeHold=rbsTimersOutSeizeHold, ipAaaRadiusConfigVendorSpecId=ipAaaRadiusConfigVendorSpecId, iSDNConfigTable=iSDNConfigTable, ipOspfAreaEntry=ipOspfAreaEntry, tunnelGroupConfigKeyValue=tunnelGroupConfigKeyValue, localUsersKeyValue=localUsersKeyValue, ipRloginTcpPort=ipRloginTcpPort, tunnelGroupConfigTable=tunnelGroupConfigTable, ipAddressBlockEntry=ipAddressBlockEntry, modemConfigVoiceNoPathTeardown=modemConfigVoiceNoPathTeardown, ipAaaSetConfigName=ipAaaSetConfigName, signalingGatewayRowStatus=signalingGatewayRowStatus, coredumpConfigEntry=coredumpConfigEntry, ipFilterListOutputAccessListId=ipFilterListOutputAccessListId, casTimersOutWaitConnect=casTimersOutWaitConnect, hSSIConfigKeyValue=hSSIConfigKeyValue, iSDNLayer2TimersAtt5essEntry=iSDNLayer2TimersAtt5essEntry, slotConfigRowStatus=slotConfigRowStatus, modemConfigKeyValue=modemConfigKeyValue, t1ConfigLineBuildout=t1ConfigLineBuildout, outboundSadbEspEncAlg=outboundSadbEspEncAlg, outboundSpdbSpi=outboundSpdbSpi, iSDNLayer3TimersNttT310=iSDNLayer3TimersNttT310, clockRecoveryPrimarySlot=clockRecoveryPrimarySlot, pppModemConfigPAPServerTimeout=pppModemConfigPAPServerTimeout, ipRloginTable=ipRloginTable, ipOspfVirtualLinkRouterId=ipOspfVirtualLinkRouterId, inboundPolicyKeyValue=inboundPolicyKeyValue, ipRtrConfigDefaultTtl=ipRtrConfigDefaultTtl, iSDNLayer3TimersNttT318=iSDNLayer3TimersNttT318, pppConfigStac4Enabled=pppConfigStac4Enabled, ipSgcpPathString=ipSgcpPathString, pppIsdnConfigAllowEndpointDisc=pppIsdnConfigAllowEndpointDisc, ipSsTable=ipSsTable, organizationNameInputTemplateString=organizationNameInputTemplateString, ipVpnGroupDestVpnId=ipVpnGroupDestVpnId, ipSessionAccessListTable=ipSessionAccessListTable, callTypeOverrideTable=callTypeOverrideTable, ipVpnGroupDestEntry=ipVpnGroupDestEntry, pppConfigStac3Enabled=pppConfigStac3Enabled, ipSessionAccessListFilterType=ipSessionAccessListFilterType, ipDsmccEntry=ipDsmccEntry, ipSntpPathString=ipSntpPathString, sessionTableFormatWidth5=sessionTableFormatWidth5, cLIEntry=cLIEntry, rbsConfigReqR1CallingNumber=rbsConfigReqR1CallingNumber, iSDNLayer3TimersNtiDmsT318=iSDNLayer3TimersNtiDmsT318, ipRhostEntryRowStatus=ipRhostEntryRowStatus, iSDNLayer3TimersNet5T308=iSDNLayer3TimersNet5T308, ipSessionAccessListDestinationIp=ipSessionAccessListDestinationIp, virtualLinkConfigChannelEnable=virtualLinkConfigChannelEnable, iSDNLayer3TimersNet5KeyValue=iSDNLayer3TimersNet5KeyValue, sessionTableFormatWidth9=sessionTableFormatWidth9, organizationNameOrganizationName=organizationNameOrganizationName, iSDNLayer3TimersNtiDmsEntry=iSDNLayer3TimersNtiDmsEntry, dVSGatewayRetransmitTimeout=dVSGatewayRetransmitTimeout, iSDNLayer3TimersAtt5essT306=iSDNLayer3TimersAtt5essT306, inboundSadbEspMacKeyLength=inboundSadbEspMacKeyLength, iopConfigRowStatus=iopConfigRowStatus, pppIsdnConfigCHAPServerTimeout=pppIsdnConfigCHAPServerTimeout, shellConfigAuthenticatedText=shellConfigAuthenticatedText, rbsTimersInMaxWinkHold=rbsTimersInMaxWinkHold, t3ConfigPathString=t3ConfigPathString, ipSgcpRowStatus=ipSgcpRowStatus, inboundSpdbPathString=inboundSpdbPathString, ipCircuitOspfAreaId=ipCircuitOspfAreaId, ipRtrConfigSnmpSysDesc=ipRtrConfigSnmpSysDesc, pppModemConfigTransmitACCM=pppModemConfigTransmitACCM, ipCircuitRipV2Enabled=ipCircuitRipV2Enabled, pppModemConfigDNS1=pppModemConfigDNS1, metaContainerCmlname=metaContainerCmlname, iSDNLayer3TimersEntry=iSDNLayer3TimersEntry, pppIsdnConfigEntry=pppIsdnConfigEntry, rbsTimersTable=rbsTimersTable, t3ConfigLoopBack=t3ConfigLoopBack, ipCircuitRipRecvEnabled=ipCircuitRipRecvEnabled, l2TPLNSRowStatus=l2TPLNSRowStatus, iSDNLayer2TimersK=iSDNLayer2TimersK, pppModemConfigReceiveACCM=pppModemConfigReceiveACCM, ipAaaRadiusConfigEntry=ipAaaRadiusConfigEntry, localUsersPassword=localUsersPassword, ipOspfVirtualLinkAreaId=ipOspfVirtualLinkAreaId, pppModemConfigDesiredRemoteMRRU=pppModemConfigDesiredRemoteMRRU, ipFrMapInterfaceFlag=ipFrMapInterfaceFlag, t3ConfigCircuitID=t3ConfigCircuitID, modemConfigVoiceDtmfRedundantType=modemConfigVoiceDtmfRedundantType, t1TrunkconfigLineBuildout=t1TrunkconfigLineBuildout, ipIpdcTable=ipIpdcTable, ipMulticastConfigHeartbeatGroup=ipMulticastConfigHeartbeatGroup, ipCircuitMulticastProtocol=ipCircuitMulticastProtocol, pppIsdnConfigTransmitACCM=pppIsdnConfigTransmitACCM, vmsConfigChipStateMask=vmsConfigChipStateMask)
mibBuilder.exportSymbols("APTIS-CONFIG-MIB", t1ConfigLineFraming=t1ConfigLineFraming, cLIShutdownTemperature=cLIShutdownTemperature, l2FHomeGatewayEntry=l2FHomeGatewayEntry, inboundSpdbSelector=inboundSpdbSelector, ipAccessGroupAccessListId=ipAccessGroupAccessListId, t1liuConfigCircuitID=t1liuConfigCircuitID, modemConfigVoiceDspPatchString=modemConfigVoiceDspPatchString, pppModemConfigKeyValue=pppModemConfigKeyValue, ipPolicyEntryKeyValue=ipPolicyEntryKeyValue, pppModemConfigMLPScaleFragments=pppModemConfigMLPScaleFragments, t1NumberEntry=t1NumberEntry, shellConfigBannerText=shellConfigBannerText, pppModemConfigPassiveLCPTimeout=pppModemConfigPassiveLCPTimeout, inboundSadbKeyValue=inboundSadbKeyValue, ipRouteRowStatus=ipRouteRowStatus, eventConfigEntry=eventConfigEntry, slotConfigAdminServiceModule=slotConfigAdminServiceModule, ipOspfRangeAreaId=ipOspfRangeAreaId, ipOspfNbNeighborPathString=ipOspfNbNeighborPathString, ipCleartcpConnectType=ipCleartcpConnectType, ipSvcAuthEntryEntry=ipSvcAuthEntryEntry, ipMulticastConfigHeartbeatThreshold=ipMulticastConfigHeartbeatThreshold, policyConfigModemAllocationPolicy=policyConfigModemAllocationPolicy, ipRoutePrefix=ipRoutePrefix, inboundSadbEntry=inboundSadbEntry, modemConfigVoiceAutoswitchPacketSize=modemConfigVoiceAutoswitchPacketSize, iSDNLayer3TimersNet5PathString=iSDNLayer3TimersNet5PathString, pppConfigMLPNullFragmentTimeout=pppConfigMLPNullFragmentTimeout, ipSessionAccessListDestinationMask=ipSessionAccessListDestinationMask, ipMulticastConfigTrunkRoutingEnabled=ipMulticastConfigTrunkRoutingEnabled, ipAccessListTcpFlag=ipAccessListTcpFlag, ipSyslogPriority=ipSyslogPriority, ipOspfEntry=ipOspfEntry, pppModemConfigPassiveLCP=pppModemConfigPassiveLCP, shellConfigConnectTimeout=shellConfigConnectTimeout, ipVpnGroupPathString=ipVpnGroupPathString, inboundSadbIpsecMode=inboundSadbIpsecMode, iSDNConfigPathString=iSDNConfigPathString, pppModemConfigAllowShortSeq=pppModemConfigAllowShortSeq, t1ConfigLineCode=t1ConfigLineCode, iSDNLayer2TimersT203=iSDNLayer2TimersT203, iSDNLayer3TimersNtiDmsT316=iSDNLayer3TimersNtiDmsT316, shellConfigCommandPrompt=shellConfigCommandPrompt, ipDnsDefDomain=ipDnsDefDomain, outboundSpdbSelector=outboundSpdbSelector, pppConfigAllowACCM=pppConfigAllowACCM, iSDNLayer3TimersNet5T306=iSDNLayer3TimersNet5T306, e1liuConfigTable=e1liuConfigTable, pppIsdnConfigLCPEchoTimeout=pppIsdnConfigLCPEchoTimeout, inboundSadbNextEncapIpAddr=inboundSadbNextEncapIpAddr, casTimersInAnswerToWinkDelay=casTimersInAnswerToWinkDelay, frLogicalIFConfigTable=frLogicalIFConfigTable, localUsersTable=localUsersTable, dVSGatewayEntry=dVSGatewayEntry, pppModemConfigEntry=pppModemConfigEntry, ipSgcpDebugFlag=ipSgcpDebugFlag, vmsConfigCommit=vmsConfigCommit, dS3TrunkconfigTable=dS3TrunkconfigTable, pppConfigCompressFrames=pppConfigCompressFrames, frInterfaceConfigFrDlcmiMaxSupportedVCs=frInterfaceConfigFrDlcmiMaxSupportedVCs, callInfoCallBearerRate=callInfoCallBearerRate, pppConfigMLPScaleFragments=pppConfigMLPScaleFragments, localUsersRowStatus=localUsersRowStatus, clearTcpLocalSessionHostIp4=clearTcpLocalSessionHostIp4, ipOspfAreaKeyValue=ipOspfAreaKeyValue, pppConfigMLPMaxLinks=pppConfigMLPMaxLinks, iSDNLayer3TimersT312=iSDNLayer3TimersT312, ipOspfTosEnabled=ipOspfTosEnabled, ipAaaSetConfigEntry=ipAaaSetConfigEntry, casTimersWaitR2Digit=casTimersWaitR2Digit, ethernetConfigEthernetFullduplex=ethernetConfigEthernetFullduplex, ipOspfRangeTable=ipOspfRangeTable, pppLocalSessionRowStatus=pppLocalSessionRowStatus, rbsTimersOutMaxWinkHold=rbsTimersOutMaxWinkHold, ipLocalSessionLocalIp=ipLocalSessionLocalIp, pppModemConfigSendDNS=pppModemConfigSendDNS, ipSntpRowStatus=ipSntpRowStatus, vpopConfigTable=vpopConfigTable, iSDNLayer3TimersT308=iSDNLayer3TimersT308, iSDNConfigSendService=iSDNConfigSendService, clockRecoveryKeyValue=clockRecoveryKeyValue, pppIsdnConfigPassiveIPCPTimeout=pppIsdnConfigPassiveIPCPTimeout, outboundSadbIpsecMode=outboundSadbIpsecMode, rbsTimersInPreKpExtend=rbsTimersInPreKpExtend, e1liuConfigRowStatus=e1liuConfigRowStatus, ipRipTrustedRowStatus=ipRipTrustedRowStatus, outboundPolicyEntry=outboundPolicyEntry, ipOspfVirtualLinkTransitAreaId=ipOspfVirtualLinkTransitAreaId, pppConfigMonitorRxActivity=pppConfigMonitorRxActivity, ipFrMapIfIndex=ipFrMapIfIndex, pppIsdnConfigMinLocalMRU=pppIsdnConfigMinLocalMRU, frLogicalIFConfigPathString=frLogicalIFConfigPathString, ipOspfAreaTable=ipOspfAreaTable, shellConfigPathString=shellConfigPathString, sessionTableFormatParam3=sessionTableFormatParam3, ipAaaRadiusConfigPathString=ipAaaRadiusConfigPathString, shellConfigFailureText=shellConfigFailureText, ethernetConfigEthernetTlen=ethernetConfigEthernetTlen, e1ConfigLineFraming=e1ConfigLineFraming, frInterfaceConfigFrDlcmiBECNFlowControl=frInterfaceConfigFrDlcmiBECNFlowControl, outboundSadbAhMacKeyLength=outboundSadbAhMacKeyLength, ipCircuitRipInflateMetric=ipCircuitRipInflateMetric, policyConfigDNISMatchPolicy=policyConfigDNISMatchPolicy, ipRhostEntryRemoteUser=ipRhostEntryRemoteUser, iSDNLayer3TimersT309=iSDNLayer3TimersT309, signalingConfigKeyValue=signalingConfigKeyValue, pppModemConfigNBNS1=pppModemConfigNBNS1, cHdlcMaxLoopCount=cHdlcMaxLoopCount, t1NumberPathString=t1NumberPathString, t3ConfigEntry=t3ConfigEntry, pppModemConfigLCPEchoRetries=pppModemConfigLCPEchoRetries, iSDNLayer3TimersAtt4essTable=iSDNLayer3TimersAtt4essTable, pppIsdnConfigSendPFC=pppIsdnConfigSendPFC, iSDNLayer3TimersAtt5essT319=iSDNLayer3TimersAtt5essT319, ipAaaServerType=ipAaaServerType, ipTrapCfgHssiPortTrapStatus=ipTrapCfgHssiPortTrapStatus, ipAaaServerKeyValue=ipAaaServerKeyValue, policyConfigPathString=policyConfigPathString, ipOspfAsBorderEnabled=ipOspfAsBorderEnabled, dVSGatewayAuthenticationMode=dVSGatewayAuthenticationMode, pppConfigIPXCPEnabled=pppConfigIPXCPEnabled, ipAaaRadiusConfigTerminateComponentEnabled=ipAaaRadiusConfigTerminateComponentEnabled, ipAaaRadiusdConfigTable=ipAaaRadiusdConfigTable, t3ConfigLineCode=t3ConfigLineCode, iSDNLayer2TimersAtt5essK=iSDNLayer2TimersAtt5essK, iSDNLayer3TimersKeyValue=iSDNLayer3TimersKeyValue, iSDNLayer3TimersNttTable=iSDNLayer3TimersNttTable, l2FHomeGatewayReceiveName=l2FHomeGatewayReceiveName, ipAaaSetConfigMode=ipAaaSetConfigMode, modemConfigVoiceEchoReset=modemConfigVoiceEchoReset, pppIsdnConfigLocalIPAddress=pppIsdnConfigLocalIPAddress, iSDNLayer3TimersNtiDmsT322=iSDNLayer3TimersNtiDmsT322, clearTcpLocalSessionHostIp3=clearTcpLocalSessionHostIp3, pppIsdnConfigRemoteIPAddress=pppIsdnConfigRemoteIPAddress, dVSGatewayDhcpEnable=dVSGatewayDhcpEnable, ipSnmpRowStatus=ipSnmpRowStatus, pppModemConfigIPCPEnabled=pppModemConfigIPCPEnabled, ipVpnGroupType=ipVpnGroupType, vpopConfigL2TPDefaultSendName=vpopConfigL2TPDefaultSendName, modemConfigVoiceEchoDisable=modemConfigVoiceEchoDisable, iSDNLayer3TimersPathString=iSDNLayer3TimersPathString, ipSessionAccessListIcmpCode=ipSessionAccessListIcmpCode, iSDNLayer2TimersKeyValue=iSDNLayer2TimersKeyValue, ipWin32PathString=ipWin32PathString, dVSGatewayRenewalTime=dVSGatewayRenewalTime, dVSGatewaySecondaryAccountingServerAddress=dVSGatewaySecondaryAccountingServerAddress, pppModemConfigMinLocalMRRU=pppModemConfigMinLocalMRRU, hSSIConfigHSSICRCType=hSSIConfigHSSICRCType, pppIsdnConfigCountRIP=pppIsdnConfigCountRIP, pppModemConfigNBNS2=pppModemConfigNBNS2, modemConfigVoiceRtcpPeriod=modemConfigVoiceRtcpPeriod, l2TPLNSSendName=l2TPLNSSendName, statsDummyEntry=statsDummyEntry, iSDNConfigEntry=iSDNConfigEntry, dmmAdminConfigTable=dmmAdminConfigTable, ipIfnumberEntry=ipIfnumberEntry, ipOspfMd5KeyMd5KeyId=ipOspfMd5KeyMd5KeyId, pppIsdnConfigNBNS1=pppIsdnConfigNBNS1, ipSvcAuthEntryAllowTelnet=ipSvcAuthEntryAllowTelnet, eventConfigKeyValue=eventConfigKeyValue, modemConfigVoicePcmCoding=modemConfigVoicePcmCoding, clearTcpLocalSessionHostIpCount=clearTcpLocalSessionHostIpCount, ipIfnumberClass=ipIfnumberClass, modemConfigVoiceFaxModemAutoswitch=modemConfigVoiceFaxModemAutoswitch, localUsersUserInformation=localUsersUserInformation, outboundSadbEspMacKey=outboundSadbEspMacKey, hdlcConfigRowStatus=hdlcConfigRowStatus, ipArpPhysDest=ipArpPhysDest, leasedLineConfigRowStatus=leasedLineConfigRowStatus, pppIsdnConfigCHAPServerRetries=pppIsdnConfigCHAPServerRetries, packAdminConfigTable=packAdminConfigTable, ipLocalSessionRateLimitMulticast=ipLocalSessionRateLimitMulticast, pppModemConfigPassiveIPCP=pppModemConfigPassiveIPCP, pppConfigAllowACFC=pppConfigAllowACFC, iSDNLayer3TimersAtt5essT308=iSDNLayer3TimersAtt5essT308, pppIsdnConfigSendShortSeq=pppIsdnConfigSendShortSeq, pppConfigReceiveACCM=pppConfigReceiveACCM, statsDummyTable=statsDummyTable, pppModemConfigPassword=pppModemConfigPassword, t1ConfigEntry=t1ConfigEntry, ipOspfGenerateDefaultEnabled=ipOspfGenerateDefaultEnabled, iSDNLayer2TimersAtt5essT200=iSDNLayer2TimersAtt5essT200, pppIsdnConfigAllowACCM=pppIsdnConfigAllowACCM, vmsConfigKeyValue=vmsConfigKeyValue, callTypeOverridePathString=callTypeOverridePathString, ipRipTrustedTrustedHost=ipRipTrustedTrustedHost, ipDsbyteRowStatus=ipDsbyteRowStatus, callTypeOverrideKeyValue=callTypeOverrideKeyValue, pppConfigCHAPServerChallenges=pppConfigCHAPServerChallenges, ipMulticastConfigHeartbeatSourceMask=ipMulticastConfigHeartbeatSourceMask, ipCircuitIpMask=ipCircuitIpMask, callInfoRowStatus=callInfoRowStatus, clockRecoveryPathString=clockRecoveryPathString, pppModemConfigMLPFragmentSize=pppModemConfigMLPFragmentSize, pppModemConfigMLPMaxFragments=pppModemConfigMLPMaxFragments, rbsTimersLineReleaseHold=rbsTimersLineReleaseHold, iSDNLayer3TimersAtt4essKeyValue=iSDNLayer3TimersAtt4essKeyValue, ethernetConfigEthernetEnable=ethernetConfigEthernetEnable, ipLocalSessionAcceptRip=ipLocalSessionAcceptRip, pppModemConfigTimeRemainingInterval=pppModemConfigTimeRemainingInterval, rbsTimersKeyValue=rbsTimersKeyValue, ipCleartcpPathString=ipCleartcpPathString, ipArpRowStatus=ipArpRowStatus, l2TPLNSEntry=l2TPLNSEntry, ipCircuitTable=ipCircuitTable, iopConfigModemImageName=iopConfigModemImageName, rbsConfigMethod=rbsConfigMethod, ipDnsNsPathString=ipDnsNsPathString, vpopConfigLocalAddress=vpopConfigLocalAddress, ipMulticastConfigHeartbeatTimeout=ipMulticastConfigHeartbeatTimeout, outboundSadbNextEncapSpi=outboundSadbNextEncapSpi, statsDummyRowStatus=statsDummyRowStatus, rbsTimersRecover=rbsTimersRecover, pppModemConfigAuthServerProtocol1=pppModemConfigAuthServerProtocol1, pppConfigAllowShortSeq=pppConfigAllowShortSeq, t1TrunkconfigLineCode=t1TrunkconfigLineCode, t3ConfigLineBuildout=t3ConfigLineBuildout, pppConfigPassiveLCP=pppConfigPassiveLCP, ipAaaServerMonitorPassword=ipAaaServerMonitorPassword, ipSyslogPathString=ipSyslogPathString, ipPoolConfigEntry=ipPoolConfigEntry, ipAaaRadiusClientIpAddr=ipAaaRadiusClientIpAddr, ipAaaClientPortTable=ipAaaClientPortTable, ipOspfTable=ipOspfTable, ipCircuitEntry=ipCircuitEntry, ipCircuitArpResponseEnabled=ipCircuitArpResponseEnabled, iSDNLayer3TimersAtt4essT322=iSDNLayer3TimersAtt4essT322, ipAaaRadiusdConfigStatus=ipAaaRadiusdConfigStatus, frCircuitConfigEntry=frCircuitConfigEntry, casTimersLineRelease=casTimersLineRelease, ipAccessListProtocol=ipAccessListProtocol, pppConfigLCPEchoErrorTimeout=pppConfigLCPEchoErrorTimeout, l2FHomeGatewayEchoRetries=l2FHomeGatewayEchoRetries, l2TPLNSKeyValue=l2TPLNSKeyValue, iSDNLayer3TimersNtiDmsT302=iSDNLayer3TimersNtiDmsT302, casTimersOutLocalReleaseDelay=casTimersOutLocalReleaseDelay, sessionTableFormatWidth6=sessionTableFormatWidth6, ipIfnumberTable=ipIfnumberTable, iSDNLayer3TimersNet5T302=iSDNLayer3TimersNet5T302, pppModemConfigIPXNodeNumber=pppModemConfigIPXNodeNumber, e1TrunkconfigTable=e1TrunkconfigTable, shellConfigWaitText=shellConfigWaitText, callInfoVpopId=callInfoVpopId, sessionTableFormatHeading1=sessionTableFormatHeading1, ipDsbyteKeyValue=ipDsbyteKeyValue, iSDNLayer3TimersNet5T313=iSDNLayer3TimersNet5T313, ipTrapCfgRadiusdTrapStatus=ipTrapCfgRadiusdTrapStatus, pppModemConfigSendTimeRemaining=pppModemConfigSendTimeRemaining, pppConfigCountRIP=pppConfigCountRIP, pppModemConfigAllowEndpointDisc=pppModemConfigAllowEndpointDisc, ipSessionAccessListProtocol=ipSessionAccessListProtocol, callInfoCallingSubaddressType=callInfoCallingSubaddressType, iSDNLayer3TimersAtt4essT319=iSDNLayer3TimersAtt4essT319, clearTcpLocalSessionKeyValue=clearTcpLocalSessionKeyValue)
mibBuilder.exportSymbols("APTIS-CONFIG-MIB", pppModemConfigIDText=pppModemConfigIDText, pppConfigLogEnabled=pppConfigLogEnabled, pppConfigSendMRU=pppConfigSendMRU, pppConfigPathString=pppConfigPathString, ipSessionAccessListFilterStatus=ipSessionAccessListFilterStatus, pppConfigLCPEchoTimeout=pppConfigLCPEchoTimeout, t1ConfigOverrideNumber=t1ConfigOverrideNumber, policyConfigModemReviveTimeout=policyConfigModemReviveTimeout, ipSvcAuthEntryAllowFTP=ipSvcAuthEntryAllowFTP, t1ConfigLoopBack=t1ConfigLoopBack, ipOspfRangeAddress=ipOspfRangeAddress, metaContainerRowStatus=metaContainerRowStatus, ipAaaRadiusClientTrace=ipAaaRadiusClientTrace, iSDNConfigForceService=iSDNConfigForceService, pppConfigMonitorTxActivity=pppConfigMonitorTxActivity, casTimersInWaitAnswer=casTimersInWaitAnswer, pppConfigCHAPServerRetries=pppConfigCHAPServerRetries, pppConfigTransmitACCM=pppConfigTransmitACCM, t1liuConfigRowStatus=t1liuConfigRowStatus, ipCircuitOutputQueueMaxDepth=ipCircuitOutputQueueMaxDepth, packAdminConfigKeyValue=packAdminConfigKeyValue, ipAaaRadiusdConfigRowStatus=ipAaaRadiusdConfigRowStatus, rbsTimersInPostDigitDelay=rbsTimersInPostDigitDelay, ipAddressBlockKeyValue=ipAddressBlockKeyValue, pppIsdnConfigSendTimeRemaining=pppIsdnConfigSendTimeRemaining, ipSessionAccessListIcmpType=ipSessionAccessListIcmpType, dVSGatewayTgHardwareAddress=dVSGatewayTgHardwareAddress, casTimersInAfterAnswerWinkPulse=casTimersInAfterAnswerWinkPulse, pppConfigSendLocalIPAddress=pppConfigSendLocalIPAddress, ipAaaClientPortStartingPort=ipAaaClientPortStartingPort, pppConfigVJEnabled=pppConfigVJEnabled, dVSGatewayAccountingProtocol=dVSGatewayAccountingProtocol, modemConfigVoiceLatePacketWin=modemConfigVoiceLatePacketWin, sessionTableFormatParam8=sessionTableFormatParam8, ipAaaRadiusConfigTable=ipAaaRadiusConfigTable, pppIsdnConfigTable=pppIsdnConfigTable, t1TrunkconfigEntry=t1TrunkconfigEntry, pppIsdnConfigLogEnabled=pppIsdnConfigLogEnabled, vpopConfigMaxSessions=vpopConfigMaxSessions, iSDNLayer3TimersAtt5essEntry=iSDNLayer3TimersAtt5essEntry, ipSvcEntryKeyValue=ipSvcEntryKeyValue, ipLocalSessionFramedRouting=ipLocalSessionFramedRouting, rbsTimersEntry=rbsTimersEntry, organizationNameOutputStyle=organizationNameOutputStyle, ipdcConfigTxTone=ipdcConfigTxTone, ipRhostEntryEntry=ipRhostEntryEntry, t1liuConfigTable=t1liuConfigTable, ipRtrConfigEntry=ipRtrConfigEntry, pppIsdnConfigAuthServerProtocol2=pppIsdnConfigAuthServerProtocol2, ipAaaSetConfigPathString=ipAaaSetConfigPathString, ipOspfMd5KeyRowStatus=ipOspfMd5KeyRowStatus, packAdminConfigRowStatus=packAdminConfigRowStatus, frInterfaceConfigFrDlcmiDceErrorThreshold=frInterfaceConfigFrDlcmiDceErrorThreshold, pppIsdnConfigConnectLimit=pppIsdnConfigConnectLimit, dVSGatewaySecondaryAuthenticationServerAddress=dVSGatewaySecondaryAuthenticationServerAddress, iSDNLayer3TimersNtiDmsT312=iSDNLayer3TimersNtiDmsT312, modemConfigEntry=modemConfigEntry, pppModemConfigLocalIPAddress=pppModemConfigLocalIPAddress, pppModemConfigConnectLimit=pppModemConfigConnectLimit, ipRshTable=ipRshTable, ipSyslogEntry=ipSyslogEntry, ipVpnGroupDestTable=ipVpnGroupDestTable, pppIsdnConfigMinLocalMRRU=pppIsdnConfigMinLocalMRRU, rbsTimersOutPreDialQuietHold=rbsTimersOutPreDialQuietHold, shellConfigNamePrompt=shellConfigNamePrompt, virtualLinkConfigChannelFCSInvert=virtualLinkConfigChannelFCSInvert, frCircuitConfigFrCircuitThroughput=frCircuitConfigFrCircuitThroughput, iSDNLayer3TimersNet5T304=iSDNLayer3TimersNet5T304, sessionTableFormatParam1=sessionTableFormatParam1, ipAaaServerRowStatus=ipAaaServerRowStatus, iSDNLayer2TimersN204=iSDNLayer2TimersN204, iSDNLayer3TimersT321=iSDNLayer3TimersT321, policyConfigKeyValue=policyConfigKeyValue, iSDNLayer2TimersRowStatus=iSDNLayer2TimersRowStatus, ipVpnGroupEntry=ipVpnGroupEntry, pppModemConfigSendID=pppModemConfigSendID, pppIsdnConfigMLPEndpointDisc=pppIsdnConfigMLPEndpointDisc, callInfoCalledOptions=callInfoCalledOptions, ipMulticastConfigRowStatus=ipMulticastConfigRowStatus, pppIsdnConfigSendLocalIPAddress=pppIsdnConfigSendLocalIPAddress, e1TrunkconfigEntry=e1TrunkconfigEntry, pppConfigAuthClientProtocol1=pppConfigAuthClientProtocol1, t1ConfigTable=t1ConfigTable, vpopConfigVoiceMode=vpopConfigVoiceMode, rbsTimersOutPostDigit=rbsTimersOutPostDigit, ipOspfMaxPaths=ipOspfMaxPaths, modemAdminConfigRowStatus=modemAdminConfigRowStatus, callInfoCalledNumberType=callInfoCalledNumberType, cLIPathString=cLIPathString, ipIpdcEntry=ipIpdcEntry, macConfigRowStatus=macConfigRowStatus, rbsTimersOutWaitConnect=rbsTimersOutWaitConnect, pppConfigCCPEnabled=pppConfigCCPEnabled, iopConfigKeyValue=iopConfigKeyValue, frInterfaceConfigFrDlcmiAddress=frInterfaceConfigFrDlcmiAddress, pppLocalSessionMLPMaxLinks=pppLocalSessionMLPMaxLinks, clockRecoveryPrimaryT3=clockRecoveryPrimaryT3, rbsConfigRowStatus=rbsConfigRowStatus, ipRshellConfigEntry=ipRshellConfigEntry, ipOspfVirtualLinkKeyValue=ipOspfVirtualLinkKeyValue, ipDnsNsEntry=ipDnsNsEntry, pppConfigMinRemoteMRU=pppConfigMinRemoteMRU, leasedLineConfigEntry=leasedLineConfigEntry, frInterfaceConfigFrDlcmiLmiDlci=frInterfaceConfigFrDlcmiLmiDlci, ipSnmpEntry=ipSnmpEntry, pppIsdnConfigCompressFrames=pppIsdnConfigCompressFrames, ipCircuitKeyValue=ipCircuitKeyValue, outboundPolicyCommit=outboundPolicyCommit, ipOspfVirtualLinkTransmitDelay=ipOspfVirtualLinkTransmitDelay, casTimersKeyValue=casTimersKeyValue, signalingConfigSs7Gateway=signalingConfigSs7Gateway, ipdcConfigTable=ipdcConfigTable, pppConfigLogCompression=pppConfigLogCompression, iSDNLayer3TimersT313=iSDNLayer3TimersT313, vpopConfigAddressMode=vpopConfigAddressMode, ipRipAuthType=ipRipAuthType, sessionTableFormatHeading5=sessionTableFormatHeading5, ipTrapCfgMacModemsThresholdTrapStatus=ipTrapCfgMacModemsThresholdTrapStatus, policyConfigReuseBadModems=policyConfigReuseBadModems, e1liuConfigAdminState=e1liuConfigAdminState, l2FHomeGatewayRowStatus=l2FHomeGatewayRowStatus, iSDNLayer3TimersT319=iSDNLayer3TimersT319, ipOspfVirtualLinkAuthKey=ipOspfVirtualLinkAuthKey, tunnelGroupConfigTunnelProtocol=tunnelGroupConfigTunnelProtocol, frInterfaceConfigFrDlcmiPollingInterval=frInterfaceConfigFrDlcmiPollingInterval, modemConfigVoicePacketInterval=modemConfigVoicePacketInterval, pppConfigTable=pppConfigTable, hdlcConfigStrategy=hdlcConfigStrategy, ipAaaRadiusClientTable=ipAaaRadiusClientTable, iSDNLayer3TimersNttT303=iSDNLayer3TimersNttT303, modemConfigVoiceEchoMasterEnable=modemConfigVoiceEchoMasterEnable, rbsConfigOOS=rbsConfigOOS, ipOspfVirtualLinkHelloInterval=ipOspfVirtualLinkHelloInterval, l2TPLNSMaxAckTimeout=l2TPLNSMaxAckTimeout, ethernetConfigEthernetLoopback=ethernetConfigEthernetLoopback, pppModemConfigCompressFrames=pppModemConfigCompressFrames, ipDnsEntry=ipDnsEntry, ipSessionAccessListKeyValue=ipSessionAccessListKeyValue, ipAddressBlockCount=ipAddressBlockCount, iSDNConfigNFAS=iSDNConfigNFAS, ipVrouterConfigKeyValue=ipVrouterConfigKeyValue, ipSvcAuthEntryPathString=ipSvcAuthEntryPathString, ipAaaServerMonitorTimeout=ipAaaServerMonitorTimeout, ipAddressBlockPathString=ipAddressBlockPathString, vpopConfigPrivateFlag=vpopConfigPrivateFlag, rbsConfigDod=rbsConfigDod, ipDnsRetry=ipDnsRetry, ipTrapCfgAuthTrapStatus=ipTrapCfgAuthTrapStatus, iSDNLayer3TimersAtt5essTable=iSDNLayer3TimersAtt5essTable, casConfigWinkAfterAnswer=casConfigWinkAfterAnswer, inboundPolicyEntry=inboundPolicyEntry, ipSvcEntryRowStatus=ipSvcEntryRowStatus, outboundPolicyRowStatus=outboundPolicyRowStatus, callInfoDs0=callInfoDs0, pppConfigKeyValue=pppConfigKeyValue, ipFrMapMulticastFlag=ipFrMapMulticastFlag, casTimersInWaitAccept=casTimersInWaitAccept, signalingConfigEntry=signalingConfigEntry, pppIsdnConfigLogSize=pppIsdnConfigLogSize, ipSntpEntry=ipSntpEntry, pppIsdnConfigPassiveLCPTimeout=pppIsdnConfigPassiveLCPTimeout, signalingConfigTable=signalingConfigTable, macConfigEntry=macConfigEntry, ipShellPasswdPrompt=ipShellPasswdPrompt, casConfigKeyValue=casConfigKeyValue, sessionTableFormatHeading10=sessionTableFormatHeading10, modemConfigVoiceDtmfVoice=modemConfigVoiceDtmfVoice, e1ConfigEntry=e1ConfigEntry, e1TrunkconfigRowStatus=e1TrunkconfigRowStatus, softswitchConfigKeyValue=softswitchConfigKeyValue, casConfigAssumeAcceptCall=casConfigAssumeAcceptCall, hdlcConfigKeyValue=hdlcConfigKeyValue, clearTcpLocalSessionHostIp5=clearTcpLocalSessionHostIp5, ipArpTable=ipArpTable, pppConfigLocalIPAddress=pppConfigLocalIPAddress, outboundSadbAhMacLength=outboundSadbAhMacLength, t3ConfigKeyValue=t3ConfigKeyValue, dVSGatewayGatewayAddress=dVSGatewayGatewayAddress, casTimersInCongestionPulseDuration=casTimersInCongestionPulseDuration, ipSsEntry=ipSsEntry, sessionTableFormatUseDefault=sessionTableFormatUseDefault, macConfigPathString=macConfigPathString, pppIsdnConfigAuthRequire=pppIsdnConfigAuthRequire, modemAdminConfigKeyValue=modemAdminConfigKeyValue, virtualLinkConfigRowStatus=virtualLinkConfigRowStatus, pppModemConfigAuthRequire=pppModemConfigAuthRequire, pppConfigMinLocalMRU=pppConfigMinLocalMRU, pppIsdnConfigSendEndpointDisc=pppIsdnConfigSendEndpointDisc, outboundSadbEspEncKeyLength=outboundSadbEspEncKeyLength, ipAaaGroupConfigParallelServers=ipAaaGroupConfigParallelServers, clockRecoverySecondaryT3=clockRecoverySecondaryT3, pppConfigRemoteIPAddress=pppConfigRemoteIPAddress, sessionTableFormatWidth10=sessionTableFormatWidth10, ipDsbyteDSByteEnabled=ipDsbyteDSByteEnabled, pppConfigAllowEndpointDisc=pppConfigAllowEndpointDisc, iSDNLayer2TimersAtt5essTable=iSDNLayer2TimersAtt5essTable, pppModemConfigCountPings=pppModemConfigCountPings, sessionTableFormatHeading4=sessionTableFormatHeading4, casTimersOutWaitAnswer=casTimersOutWaitAnswer, signalingConfigDebugMode=signalingConfigDebugMode, dmmAdminConfigKeyValue=dmmAdminConfigKeyValue, pppModemConfigMLPEnabled=pppModemConfigMLPEnabled, pppModemConfigInactivityLimit=pppModemConfigInactivityLimit, localUsersPathString=localUsersPathString, ipTrapCfgRowStatus=ipTrapCfgRowStatus, ipVpnGroupDestDlci=ipVpnGroupDestDlci, iSDNLayer3TimersNttT312=iSDNLayer3TimersNttT312, modemConfigDetectDefault=modemConfigDetectDefault, ipSyslogRowStatus=ipSyslogRowStatus, outboundSpdbRowStatus=outboundSpdbRowStatus, ipFilterListInputAccessListId=ipFilterListInputAccessListId, hdlcConfigEntry=hdlcConfigEntry, ipRipPathString=ipRipPathString, pppIsdnConfigPassiveIPCP=pppIsdnConfigPassiveIPCP, iSDNLayer3TimersT304=iSDNLayer3TimersT304, e1ConfigDefaultNumber=e1ConfigDefaultNumber, oosEntry=oosEntry, ipServicesConfigDefaultModifyConfig=ipServicesConfigDefaultModifyConfig, outboundSadbEntry=outboundSadbEntry, pppConfigLogSize=pppConfigLogSize, rbsConfigAllowNoDigits=rbsConfigAllowNoDigits, ipSessionAccessListTcpFlag=ipSessionAccessListTcpFlag, ipTrapCfgSs7GatewayTrapStatus=ipTrapCfgSs7GatewayTrapStatus, ipMulticastConfigPathString=ipMulticastConfigPathString, ipAaaRadiusConfigTier1Enable=ipAaaRadiusConfigTier1Enable, rbsConfigGlareResolve=rbsConfigGlareResolve, iSDNLayer3TimersNet5T310=iSDNLayer3TimersNet5T310, virtualLinkConfigChannelDelineation=virtualLinkConfigChannelDelineation, dVSGatewayKeyValue=dVSGatewayKeyValue, pppIsdnConfigMonitorTxActivity=pppIsdnConfigMonitorTxActivity, ipSvcEntryService=ipSvcEntryService, iSDNLayer3TimersNttT322=iSDNLayer3TimersNttT322, pppModemConfigRowStatus=pppModemConfigRowStatus, iSDNLayer3TimersAtt4essT316=iSDNLayer3TimersAtt4essT316, pppConfigEntry=pppConfigEntry, modemAdminConfigEntry=modemAdminConfigEntry, t1NumberTable=t1NumberTable, ipSyslogTable=ipSyslogTable, iSDNLayer3TimersNet5T309=iSDNLayer3TimersNet5T309, vpopConfigRowStatus=vpopConfigRowStatus, ipTrapCfgLocalAuthFailThresholdTrapStatus=ipTrapCfgLocalAuthFailThresholdTrapStatus, t1liuConfigAdminState=t1liuConfigAdminState, ipdcConfigPrimarySwitchIpAddr=ipdcConfigPrimarySwitchIpAddr, ipRshPathString=ipRshPathString, pppConfigLogVJ=pppConfigLogVJ, ipVpnGroupDestRowStatus=ipVpnGroupDestRowStatus, pppModemConfigMonitorTxActivity=pppModemConfigMonitorTxActivity, pppModemConfigSendLocalIPAddress=pppModemConfigSendLocalIPAddress, pppConfigMLPEnabled=pppConfigMLPEnabled, ipOspfRangeAdvertise=ipOspfRangeAdvertise, inboundSadbEspEncKeyLength=inboundSadbEspEncKeyLength, pppConfigNBNS2=pppConfigNBNS2, iSDNLayer3TimersT302=iSDNLayer3TimersT302, ipFilterListName=ipFilterListName)
mibBuilder.exportSymbols("APTIS-CONFIG-MIB", ipRouteMask=ipRouteMask, pppIsdnConfigDNS1=pppIsdnConfigDNS1, ipCleartcpLocalIp=ipCleartcpLocalIp, shellConfigEchoCommands=shellConfigEchoCommands, l2FHomeGatewayReceivePassword=l2FHomeGatewayReceivePassword, iSDNLayer3TimersT306=iSDNLayer3TimersT306, vpopConfigAOLAuthLocal=vpopConfigAOLAuthLocal, ipAaaGroupConfigTable=ipAaaGroupConfigTable, frInterfaceConfigFrDlcmiIfIndex=frInterfaceConfigFrDlcmiIfIndex, policyConfigSlotModemThresholdWarning=policyConfigSlotModemThresholdWarning, iSDNLayer3TimersAtt5essT322=iSDNLayer3TimersAtt5essT322, ipCircuitRowStatus=ipCircuitRowStatus, l2TPLNSEnableUDPChecksum=l2TPLNSEnableUDPChecksum, ipSvcAuthEntryPassword=ipSvcAuthEntryPassword, modemConfigVoiceDtmfPayloadType=modemConfigVoiceDtmfPayloadType, ipDsmccRowStatus=ipDsmccRowStatus, pppConfigAuthClientProtocol2=pppConfigAuthClientProtocol2, pppConfigMinLocalMRRU=pppConfigMinLocalMRRU, inboundSadbNextEncapSpi=inboundSadbNextEncapSpi, ipShellBannerMsg=ipShellBannerMsg, hSSIConfigHSSIName=hSSIConfigHSSIName, ipTrapCfgTunnelTrapStatus=ipTrapCfgTunnelTrapStatus, ipOspfAreaNotSoStubbyAreaEnabled=ipOspfAreaNotSoStubbyAreaEnabled, dS3TrunkconfigLineBuildout=dS3TrunkconfigLineBuildout, callTypeOverrideOverrideCallType=callTypeOverrideOverrideCallType, t1TrunkconfigClockSource=t1TrunkconfigClockSource, modemAdminConfigPathString=modemAdminConfigPathString, virtualLinkConfigChannelMap=virtualLinkConfigChannelMap, aptisConfigModule=aptisConfigModule, pppModemConfigIPXNetworkNumber=pppModemConfigIPXNetworkNumber, pppIsdnConfigIDText=pppIsdnConfigIDText, ipOspfRangeRowStatus=ipOspfRangeRowStatus, ipSnmpLogFlag=ipSnmpLogFlag, ipLocalSessionTable=ipLocalSessionTable, ipOspfVirtualLinkIpAddress=ipOspfVirtualLinkIpAddress, ipTrapCfgSccFailoverTrapStatus=ipTrapCfgSccFailoverTrapStatus, pppIsdnConfigLogCompression=pppIsdnConfigLogCompression, pppIsdnConfigAllowShortSeq=pppIsdnConfigAllowShortSeq, clearTcpLocalSessionHostName=clearTcpLocalSessionHostName, ipOspfVirtualLinkPathString=ipOspfVirtualLinkPathString, shellConfigTable=shellConfigTable, loopbackConfigMode=loopbackConfigMode, pppConfigCHAPServerTimeout=pppConfigCHAPServerTimeout, signalingGatewayIpAddr=signalingGatewayIpAddr, vpopConfigIPPoolVPOP=vpopConfigIPPoolVPOP, pppConfigSendTimeRemaining=pppConfigSendTimeRemaining, shellConfigShellCommand=shellConfigShellCommand, slotConfigPathString=slotConfigPathString, ipSvcAuthEntryModifyConfig=ipSvcAuthEntryModifyConfig, sessionTableFormatWidth1=sessionTableFormatWidth1, casConfigTable=casConfigTable, ipShellPathString=ipShellPathString, sessionTableFormatWidth8=sessionTableFormatWidth8, ipPolicyEntryForceVrouterId=ipPolicyEntryForceVrouterId, ipDnsNsRowStatus=ipDnsNsRowStatus, iSDNLayer3TimersTable=iSDNLayer3TimersTable, frLogicalIFConfigEntry=frLogicalIFConfigEntry, inboundSadbAhMacKeyLength=inboundSadbAhMacKeyLength, vpopConfigMultilinkTunnelGroup=vpopConfigMultilinkTunnelGroup, ipSnmpWriteCommunity=ipSnmpWriteCommunity, iSDNLayer3TimersAtt5essT302=iSDNLayer3TimersAtt5essT302, sessionConfigPreAuthPassword=sessionConfigPreAuthPassword, ipSsPathString=ipSsPathString, callTypeOverrideEntry=callTypeOverrideEntry, ipRhostEntryKeyValue=ipRhostEntryKeyValue, cLIFEPLog=cLIFEPLog, pppIsdnConfigMLPFragmentSize=pppIsdnConfigMLPFragmentSize, pppConfigAllowPeerIPAddress=pppConfigAllowPeerIPAddress, frInterfaceConfigKeyValue=frInterfaceConfigKeyValue, modemAdminConfigAdminState=modemAdminConfigAdminState, ipSyslogIpAddr=ipSyslogIpAddr, outboundSpdbIpsecGwAddr=outboundSpdbIpsecGwAddr, pppIsdnConfigDesiredRemoteMRRU=pppIsdnConfigDesiredRemoteMRRU, iSDNLayer3TimersAtt5essT309=iSDNLayer3TimersAtt5essT309, outboundPolicyPathString=outboundPolicyPathString, iSDNLayer3TimersT310=iSDNLayer3TimersT310, sessionTableFormatPathString=sessionTableFormatPathString, t1liuConfigEntry=t1liuConfigEntry, ipdcConfigSystemID=ipdcConfigSystemID, ipVpnGroupDestPathString=ipVpnGroupDestPathString, ipDsmccDebugFlag=ipDsmccDebugFlag, iSDNLayer3TimersNet5Entry=iSDNLayer3TimersNet5Entry, cLISyncLog=cLISyncLog, pppModemConfigAuthClientProtocol1=pppModemConfigAuthClientProtocol1, pppIsdnConfigLCPEchoRetries=pppIsdnConfigLCPEchoRetries, ipRtrConfigSnmpSysName=ipRtrConfigSnmpSysName, ipOspfVirtualLinkNextRouteripAddress=ipOspfVirtualLinkNextRouteripAddress, iSDNLayer3TimersAtt4essT321=iSDNLayer3TimersAtt4essT321, ipOspfRangeMask=ipOspfRangeMask, ipTrapCfgRemoteAuthTrapStatus=ipTrapCfgRemoteAuthTrapStatus, virtualLinkConfigChannelDataInvert=virtualLinkConfigChannelDataInvert, sessionTableFormatParam7=sessionTableFormatParam7, iSDNConfigDirection=iSDNConfigDirection, ipAddressBlockAdminStatus=ipAddressBlockAdminStatus, inboundSadbRowStatus=inboundSadbRowStatus, ipAaaServerMonitorUsername=ipAaaServerMonitorUsername, ipAaaRadiusConfigSessionIdSize=ipAaaRadiusConfigSessionIdSize, sessionConfigTerminateSecret=sessionConfigTerminateSecret, inboundSadbEspEncAlg=inboundSadbEspEncAlg, ipRouteStrategy=ipRouteStrategy, policyConfigModemFailCount=policyConfigModemFailCount, iSDNLayer3TimersAtt5essT304=iSDNLayer3TimersAtt5essT304, pppModemConfigSendNBNS=pppModemConfigSendNBNS, vpopConfigAuthenticationServerGroup=vpopConfigAuthenticationServerGroup, ipRhostEntryLocalUser=ipRhostEntryLocalUser, ipIpdcLogFlag=ipIpdcLogFlag, ipOspfVirtualLinkAuthType=ipOspfVirtualLinkAuthType, ipAccessGroupRowStatus=ipAccessGroupRowStatus, ipIfnumberRowStatus=ipIfnumberRowStatus, casConfigEntry=casConfigEntry, iSDNLayer2TimersAtt5essPathString=iSDNLayer2TimersAtt5essPathString, ipServicesConfigAccessListId=ipServicesConfigAccessListId, pppIsdnConfigPassword=pppIsdnConfigPassword, pppModemConfigMLPEndpointDisc=pppModemConfigMLPEndpointDisc, softswitchConfigSoftswitchEnable=softswitchConfigSoftswitchEnable, ipShellRowStatus=ipShellRowStatus, ipCircuitOspfPollInterval=ipCircuitOspfPollInterval, iSDNLayer3TimersNtiDmsRowStatus=iSDNLayer3TimersNtiDmsRowStatus, pppModemConfigRemoteIPAddress=pppModemConfigRemoteIPAddress, pppIsdnConfigCCPEnabled=pppIsdnConfigCCPEnabled, ipCircuitOspfDeadInterval=ipCircuitOspfDeadInterval, ipAaaClientPortPathString=ipAaaClientPortPathString, ipCircuitOspfPriority=ipCircuitOspfPriority, iSDNLayer2TimersAtt5essN204=iSDNLayer2TimersAtt5essN204, ipSessionAccessListSourceIp=ipSessionAccessListSourceIp, oosOosValue=oosOosValue, e1ConfigClockingPriority=e1ConfigClockingPriority, e1ConfigLoopBack=e1ConfigLoopBack, ipCircuitOspfRetransmitInterval=ipCircuitOspfRetransmitInterval, pppIsdnConfigAllowMagic=pppIsdnConfigAllowMagic, pppIsdnConfigUserName=pppIsdnConfigUserName, iSDNLayer3TimersAtt4essT310=iSDNLayer3TimersAtt4essT310, e1liuConfigEntry=e1liuConfigEntry, vpopConfigMulticastClient=vpopConfigMulticastClient, pppConfigIDText=pppConfigIDText, ipTrapCfgIpAddr=ipTrapCfgIpAddr, signalingConfigDsmccHoldTime=signalingConfigDsmccHoldTime, vpopConfigL2TPDefaultSharedSecret=vpopConfigL2TPDefaultSharedSecret, ipVrouterConfigEntry=ipVrouterConfigEntry, vmsConfigEntry=vmsConfigEntry, sessionTableFormatKeyValue=sessionTableFormatKeyValue, policyConfigTable=policyConfigTable, iSDNLayer3TimersAtt4essT318=iSDNLayer3TimersAtt4essT318, pppIsdnConfigLogDump=pppIsdnConfigLogDump, inboundSadbNextEncapIpsecProtocol=inboundSadbNextEncapIpsecProtocol, pppModemConfigSendShortSeq=pppModemConfigSendShortSeq, shellConfigRloginCommand=shellConfigRloginCommand, pppIsdnConfigLCPRestartTimer=pppIsdnConfigLCPRestartTimer, iSDNLayer3TimersAtt4essT313=iSDNLayer3TimersAtt4essT313, ethernetConfigRowStatus=ethernetConfigRowStatus, l2FHomeGatewaySendUDPChecksum=l2FHomeGatewaySendUDPChecksum, ipDnsTimeout=ipDnsTimeout, ipRouteLocalGateway=ipRouteLocalGateway, ipCircuitIfIndex=ipCircuitIfIndex, ds0ConfigKeyValue=ds0ConfigKeyValue, slotConfigTable=slotConfigTable, localUsersUsername=localUsersUsername, pppConfigSendDNS=pppConfigSendDNS, iSDNLayer3TimersNttT3m1=iSDNLayer3TimersNttT3m1, rbsConfigDigitType=rbsConfigDigitType, vpopConfigAccountingServerGroup=vpopConfigAccountingServerGroup, statsDummyKeyValue=statsDummyKeyValue, ipAccessListRowStatus=ipAccessListRowStatus, iopConfigAdminState=iopConfigAdminState, pppConfigCHAPValueLength=pppConfigCHAPValueLength, outboundSpdbKeyValue=outboundSpdbKeyValue, t1ConfigKeyValue=t1ConfigKeyValue, ipFrMapBroadcastFlag=ipFrMapBroadcastFlag, ipOspfMd5KeyPathString=ipOspfMd5KeyPathString, clockRecoveryRowStatus=clockRecoveryRowStatus, ipOspfPathString=ipOspfPathString, ipSnmpPathString=ipSnmpPathString, pppModemConfigStacMode=pppModemConfigStacMode, pppLocalSessionEntry=pppLocalSessionEntry, pppModemConfigPathString=pppModemConfigPathString, ipAaaRadiusConfigModemAcctEnabled=ipAaaRadiusConfigModemAcctEnabled, ipSyslogDebugFlag=ipSyslogDebugFlag, pppModemConfigSendEndpointDisc=pppModemConfigSendEndpointDisc, metaContainerPathString=metaContainerPathString, pppConfigIPCPEnabled=pppConfigIPCPEnabled, pppConfigTimeRemainingInterval=pppConfigTimeRemainingInterval, iSDNLayer3TimersAtt5essT305=iSDNLayer3TimersAtt5essT305, ipRtrConfigChecksumEnabled=ipRtrConfigChecksumEnabled, policyConfigDS1AllocationPolicy=policyConfigDS1AllocationPolicy, pppModemConfigMLPMaxLinks=pppModemConfigMLPMaxLinks, ipAaaClientPortKeyValue=ipAaaClientPortKeyValue, pppIsdnConfigLogOptions=pppIsdnConfigLogOptions, callInfoEntry=callInfoEntry, pppConfigVJSlots=pppConfigVJSlots, pppIsdnConfigMLPEnabled=pppIsdnConfigMLPEnabled, pppModemConfigSendPFC=pppModemConfigSendPFC, ipServicesConfigDefaultLevel0DisconnectUsers=ipServicesConfigDefaultLevel0DisconnectUsers, ipTrapCfgDs3FailoverTrapStatus=ipTrapCfgDs3FailoverTrapStatus, ipServicesConfigMgmtAddr=ipServicesConfigMgmtAddr, ipRshellConfigKeyValue=ipRshellConfigKeyValue, ethernetConfigEthernetPromEnable=ethernetConfigEthernetPromEnable, eventConfigDefaultLogLevel=eventConfigDefaultLogLevel, vpopConfigPathString=vpopConfigPathString, iSDNLayer3TimersNttT308=iSDNLayer3TimersNttT308, callInfoKeyValue=callInfoKeyValue, ipDnsTable=ipDnsTable, ipRipTriggeredUpdatesEnabled=ipRipTriggeredUpdatesEnabled, iSDNLayer3TimersNet5T319=iSDNLayer3TimersNet5T319, ipFilterListEntry=ipFilterListEntry, ethernetConfigEthernetAutoneg=ethernetConfigEthernetAutoneg, vpopConfigAuthorizationServerGroup=vpopConfigAuthorizationServerGroup, dS3TrunkconfigLineFraming=dS3TrunkconfigLineFraming, dVSGatewayDhcpPrefServerAddr=dVSGatewayDhcpPrefServerAddr, hSSIConfigHSSIDelineation=hSSIConfigHSSIDelineation, iSDNLayer3TimersNet5T316=iSDNLayer3TimersNet5T316, ipVrouterConfigTrunkingType=ipVrouterConfigTrunkingType, hSSIConfigPathString=hSSIConfigPathString, ipArpPublishFlag=ipArpPublishFlag, oosPathString=oosPathString, ipRtrConfigRoutingEnabled=ipRtrConfigRoutingEnabled, ipRipEntry=ipRipEntry, ipAccessListCompare=ipAccessListCompare, ethernetConfigEthernetLinkTest=ethernetConfigEthernetLinkTest, ipAccessGroupKeyValue=ipAccessGroupKeyValue, ipPolicyEntryRowStatus=ipPolicyEntryRowStatus, signalingGatewayTable=signalingGatewayTable, sessionConfigTable=sessionConfigTable, ipMulticastConfigHeartbeatPeriod=ipMulticastConfigHeartbeatPeriod, ipShellBasePrompt=ipShellBasePrompt, clockRecoverySecondaryPort=clockRecoverySecondaryPort, ipAccessListMode=ipAccessListMode, ipSntpAdjustment=ipSntpAdjustment, ipRshEntry=ipRshEntry, ipSgcpTable=ipSgcpTable, ipOspfRowStatus=ipOspfRowStatus, ipRouteRipCost=ipRouteRipCost, ipSvcAuthEntryKeyValue=ipSvcAuthEntryKeyValue, ipAaaServerEntry=ipAaaServerEntry, vpopConfigName=vpopConfigName, frCircuitConfigFrCircuitDlci=frCircuitConfigFrCircuitDlci, sessionTableFormatParam4=sessionTableFormatParam4, modemConfigVoiceDgainPCMtoPacket=modemConfigVoiceDgainPCMtoPacket, ipOspfStrategy=ipOspfStrategy, leasedLineConfigTable=leasedLineConfigTable, frInterfaceConfigFrDlcmiAddressLen=frInterfaceConfigFrDlcmiAddressLen, ipOspfRangeType=ipOspfRangeType, pppIsdnConfigAuthClientProtocol2=pppIsdnConfigAuthClientProtocol2, vpopConfigMLPSubsequentLinkAuth=vpopConfigMLPSubsequentLinkAuth, policyConfigRowStatus=policyConfigRowStatus, ipCircuitGratuitousArpEnabled=ipCircuitGratuitousArpEnabled)
