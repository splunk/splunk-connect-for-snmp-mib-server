#
# PySNMP MIB module OMNI-gx2RX1000-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/OMNI-gx2RX1000-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 20:24:27 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, Integer, OctetString = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "Integer", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueRangeConstraint, ConstraintsIntersection, ConstraintsUnion, SingleValueConstraint, ValueSizeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueRangeConstraint", "ConstraintsIntersection", "ConstraintsUnion", "SingleValueConstraint", "ValueSizeConstraint")
gx2Rx1000, = mibBuilder.importSymbols("GX2HFC-MIB", "gx2Rx1000")
gi, motproxies = mibBuilder.importSymbols("NLS-BBNIDENT-MIB", "gi", "motproxies")
trapChangedObjectId, trapNetworkElemAlarmStatus, trapNetworkElemAdminState, trapNetworkElemAvailStatus, trapText, trapChangedValueInteger, trapNetworkElemModelNumber, trapNetworkElemSerialNum, trapNetworkElemOperState, trapIdentifier, trapPerceivedSeverity, trapChangedValueDisplayString, trapNETrapLastTrapTimeStamp = mibBuilder.importSymbols("NLSBBN-TRAPS-MIB", "trapChangedObjectId", "trapNetworkElemAlarmStatus", "trapNetworkElemAdminState", "trapNetworkElemAvailStatus", "trapText", "trapChangedValueInteger", "trapNetworkElemModelNumber", "trapNetworkElemSerialNum", "trapNetworkElemOperState", "trapIdentifier", "trapPerceivedSeverity", "trapChangedValueDisplayString", "trapNETrapLastTrapTimeStamp")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
sysUpTime, = mibBuilder.importSymbols("SNMPv2-MIB", "sysUpTime")
Counter64, Bits, IpAddress, Counter32, ModuleIdentity, MibIdentifier, Integer32, NotificationType, Gauge32, ObjectIdentity, iso, TimeTicks, Unsigned32, MibScalar, MibTable, MibTableRow, MibTableColumn, NotificationType = mibBuilder.importSymbols("SNMPv2-SMI", "Counter64", "Bits", "IpAddress", "Counter32", "ModuleIdentity", "MibIdentifier", "Integer32", "NotificationType", "Gauge32", "ObjectIdentity", "iso", "TimeTicks", "Unsigned32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "NotificationType")
DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention")
class Float(Counter32):
    pass

gx2Rx1000Descriptor = MibIdentifier((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 9, 1))
gx2Rx1000AnalogTable = MibTable((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 9, 2), )
if mibBuilder.loadTexts: gx2Rx1000AnalogTable.setStatus('mandatory')
gx2Rx1000AnalogEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 9, 2, 1), ).setIndexNames((0, "OMNI-gx2RX1000-MIB", "fprgx2Rx1000AnalogTableIndex"))
if mibBuilder.loadTexts: gx2Rx1000AnalogEntry.setStatus('mandatory')
gx2Rx1000DigitalTable = MibTable((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 9, 3), )
if mibBuilder.loadTexts: gx2Rx1000DigitalTable.setStatus('mandatory')
gx2Rx1000DigitalEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 9, 3, 2), ).setIndexNames((0, "OMNI-gx2RX1000-MIB", "fprgx2Rx1000DigitalTableIndex"))
if mibBuilder.loadTexts: gx2Rx1000DigitalEntry.setStatus('mandatory')
gx2Rx1000StatusTable = MibTable((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 9, 4), )
if mibBuilder.loadTexts: gx2Rx1000StatusTable.setStatus('mandatory')
gx2Rx1000StatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 9, 4, 3), ).setIndexNames((0, "OMNI-gx2RX1000-MIB", "fprgx2Rx1000StatusTableIndex"))
if mibBuilder.loadTexts: gx2Rx1000StatusEntry.setStatus('mandatory')
gx2Rx1000FactoryTable = MibTable((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 9, 5), )
if mibBuilder.loadTexts: gx2Rx1000FactoryTable.setStatus('mandatory')
gx2Rx1000FactoryEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 9, 5, 4), ).setIndexNames((0, "OMNI-gx2RX1000-MIB", "fprgx2Rx1000FactoryTableIndex"))
if mibBuilder.loadTexts: gx2Rx1000FactoryEntry.setStatus('mandatory')
gx2Rx1000HoldTimeTable = MibTable((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 9, 6), )
if mibBuilder.loadTexts: gx2Rx1000HoldTimeTable.setStatus('mandatory')
gx2Rx1000HoldTimeEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 9, 6, 5), ).setIndexNames((0, "OMNI-gx2RX1000-MIB", "gx2Rx1000HoldTimeTableIndex"), (0, "OMNI-gx2RX1000-MIB", "gx2Rx1000HoldTimeSpecIndex"))
if mibBuilder.loadTexts: gx2Rx1000HoldTimeEntry.setStatus('mandatory')
fprgx2Rx1000AnalogTableIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 9, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fprgx2Rx1000AnalogTableIndex.setStatus('mandatory')
fprlabelOptPower = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 9, 2, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fprlabelOptPower.setStatus('optional')
fpruomOptPower = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 9, 2, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fpruomOptPower.setStatus('optional')
fprmajorHighOptPower = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 9, 2, 1, 4), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fprmajorHighOptPower.setStatus('mandatory')
fprmajorLowOptPower = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 9, 2, 1, 5), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fprmajorLowOptPower.setStatus('mandatory')
fprminorHighOptPower = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 9, 2, 1, 6), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fprminorHighOptPower.setStatus('mandatory')
fprminorLowOptPower = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 9, 2, 1, 7), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fprminorLowOptPower.setStatus('mandatory')
fprcurrentValueOptPower = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 9, 2, 1, 8), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fprcurrentValueOptPower.setStatus('mandatory')
fprstateFlagOptPower = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 9, 2, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("hidden", 1), ("read-only", 2), ("updateable", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fprstateFlagOptPower.setStatus('mandatory')
fprminValueOptPower = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 9, 2, 1, 10), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fprminValueOptPower.setStatus('mandatory')
fprmaxValueOptPower = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 9, 2, 1, 11), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fprmaxValueOptPower.setStatus('mandatory')
fpralarmStateOptPower = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 9, 2, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("noAlarm", 1), ("majorLowAlarm", 2), ("minorLowAlarm", 3), ("minorHighAlarm", 4), ("majorHighAlarm", 5), ("informational", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fpralarmStateOptPower.setStatus('mandatory')
fprlabelModTemp = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 9, 2, 1, 13), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fprlabelModTemp.setStatus('optional')
fpruomModTemp = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 9, 2, 1, 14), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fpruomModTemp.setStatus('optional')
fprmajorHighModTemp = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 9, 2, 1, 15), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fprmajorHighModTemp.setStatus('mandatory')
fprmajorLowModTemp = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 9, 2, 1, 16), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fprmajorLowModTemp.setStatus('mandatory')
fprminorHighModTemp = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 9, 2, 1, 17), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fprminorHighModTemp.setStatus('mandatory')
fprminorLowModTemp = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 9, 2, 1, 18), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fprminorLowModTemp.setStatus('mandatory')
fprcurrentValueModTemp = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 9, 2, 1, 19), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fprcurrentValueModTemp.setStatus('mandatory')
fprstateFlagModTemp = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 9, 2, 1, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("hidden", 1), ("read-only", 2), ("updateable", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fprstateFlagModTemp.setStatus('mandatory')
fprminValueModTemp = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 9, 2, 1, 21), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fprminValueModTemp.setStatus('mandatory')
fprmaxValueModTemp = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 9, 2, 1, 22), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fprmaxValueModTemp.setStatus('mandatory')
fpralarmStateModTemp = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 9, 2, 1, 23), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("noAlarm", 1), ("majorLowAlarm", 2), ("minorLowAlarm", 3), ("minorHighAlarm", 4), ("majorHighAlarm", 5), ("informational", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fpralarmStateModTemp.setStatus('mandatory')
fprlabelSinkTemp = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 9, 2, 1, 24), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fprlabelSinkTemp.setStatus('optional')
fpruomSinkTemp = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 9, 2, 1, 25), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fpruomSinkTemp.setStatus('optional')
fprmajorHighSinkTemp = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 9, 2, 1, 26), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fprmajorHighSinkTemp.setStatus('mandatory')
fprmajorLowSinkTemp = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 9, 2, 1, 27), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fprmajorLowSinkTemp.setStatus('mandatory')
fprminorHighSinkTemp = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 9, 2, 1, 28), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fprminorHighSinkTemp.setStatus('mandatory')
fprminorLowSinkTemp = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 9, 2, 1, 29), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fprminorLowSinkTemp.setStatus('mandatory')
fprcurrentValueSinkTemp = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 9, 2, 1, 30), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fprcurrentValueSinkTemp.setStatus('mandatory')
fprstateFlagSinkTemp = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 9, 2, 1, 31), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("hidden", 1), ("read-only", 2), ("updateable", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fprstateFlagSinkTemp.setStatus('mandatory')
fprminValueSinkTemp = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 9, 2, 1, 32), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fprminValueSinkTemp.setStatus('mandatory')
fprmaxValueSinkTemp = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 9, 2, 1, 33), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fprmaxValueSinkTemp.setStatus('mandatory')
fpralarmStateSinkTemp = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 9, 2, 1, 34), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("noAlarm", 1), ("majorLowAlarm", 2), ("minorLowAlarm", 3), ("minorHighAlarm", 4), ("majorHighAlarm", 5), ("informational", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fpralarmStateSinkTemp.setStatus('mandatory')
fprlabelFanCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 9, 2, 1, 35), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fprlabelFanCurrent.setStatus('optional')
fpruomFanCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 9, 2, 1, 36), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fpruomFanCurrent.setStatus('optional')
fprmajorHighFanCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 9, 2, 1, 37), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fprmajorHighFanCurrent.setStatus('mandatory')
fprmajorLowFanCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 9, 2, 1, 38), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fprmajorLowFanCurrent.setStatus('mandatory')
fprminorHighFanCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 9, 2, 1, 39), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fprminorHighFanCurrent.setStatus('mandatory')
fprminorLowFanCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 9, 2, 1, 40), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fprminorLowFanCurrent.setStatus('mandatory')
fprcurrentValueFanCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 9, 2, 1, 41), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fprcurrentValueFanCurrent.setStatus('mandatory')
fprstateFlagFanCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 9, 2, 1, 42), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("hidden", 1), ("read-only", 2), ("updateable", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fprstateFlagFanCurrent.setStatus('mandatory')
fprminValueFanCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 9, 2, 1, 43), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fprminValueFanCurrent.setStatus('mandatory')
fprmaxValueFanCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 9, 2, 1, 44), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fprmaxValueFanCurrent.setStatus('mandatory')
fpralarmStateFanCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 9, 2, 1, 45), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("noAlarm", 1), ("majorLowAlarm", 2), ("minorLowAlarm", 3), ("minorHighAlarm", 4), ("majorHighAlarm", 5), ("informational", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fpralarmStateFanCurrent.setStatus('mandatory')
fprlabel12Volt = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 9, 2, 1, 46), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fprlabel12Volt.setStatus('optional')
fpruom12Volt = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 9, 2, 1, 47), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fpruom12Volt.setStatus('optional')
fprmajorHigh12Volt = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 9, 2, 1, 48), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fprmajorHigh12Volt.setStatus('mandatory')
fprmajorLow12Volt = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 9, 2, 1, 49), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fprmajorLow12Volt.setStatus('mandatory')
fprminorHigh12Volt = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 9, 2, 1, 50), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fprminorHigh12Volt.setStatus('mandatory')
fprminorLow12Volt = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 9, 2, 1, 51), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fprminorLow12Volt.setStatus('mandatory')
fprcurrentValue12Volt = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 9, 2, 1, 52), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fprcurrentValue12Volt.setStatus('mandatory')
fprstateFlag12Volt = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 9, 2, 1, 53), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("hidden", 1), ("read-only", 2), ("updateable", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fprstateFlag12Volt.setStatus('mandatory')
fprminValue12Volt = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 9, 2, 1, 54), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fprminValue12Volt.setStatus('mandatory')
fprmaxValue12Volt = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 9, 2, 1, 55), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fprmaxValue12Volt.setStatus('mandatory')
fpralarmState12Volt = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 9, 2, 1, 56), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("noAlarm", 1), ("majorLowAlarm", 2), ("minorLowAlarm", 3), ("minorHighAlarm", 4), ("majorHighAlarm", 5), ("informational", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fpralarmState12Volt.setStatus('mandatory')
fprgx2Rx1000DigitalTableIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 9, 3, 2, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fprgx2Rx1000DigitalTableIndex.setStatus('mandatory')
fprlabelSlopeSetting = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 9, 3, 2, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fprlabelSlopeSetting.setStatus('optional')
fprenumSlopeSetting = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 9, 3, 2, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fprenumSlopeSetting.setStatus('optional')
fprvalueSlopeSetting = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 9, 3, 2, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fprvalueSlopeSetting.setStatus('mandatory')
fprstateFlagSlopeSetting = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 9, 3, 2, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("hidden", 1), ("read-only", 2), ("updateable", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fprstateFlagSlopeSetting.setStatus('mandatory')
fprlabelAttnSetting = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 9, 3, 2, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fprlabelAttnSetting.setStatus('optional')
fprenumAttnSetting = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 9, 3, 2, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fprenumAttnSetting.setStatus('optional')
fprvalueAttnSetting = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 9, 3, 2, 8), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fprvalueAttnSetting.setStatus('mandatory')
fprstateFlagAttnSetting = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 9, 3, 2, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("hidden", 1), ("read-only", 2), ("updateable", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fprstateFlagAttnSetting.setStatus('mandatory')
fprlabelWavelength = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 9, 3, 2, 10), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fprlabelWavelength.setStatus('optional')
fprenumWavelength = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 9, 3, 2, 11), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fprenumWavelength.setStatus('optional')
fprvalueWavelength = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 9, 3, 2, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("nM1310", 1), ("nM1550", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fprvalueWavelength.setStatus('mandatory')
fprstateFlagWavelength = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 9, 3, 2, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("hidden", 1), ("read-only", 2), ("updateable", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fprstateFlagWavelength.setStatus('mandatory')
fprlabelFactoryDefault = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 9, 3, 2, 14), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fprlabelFactoryDefault.setStatus('optional')
fprenumFactoryDefault = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 9, 3, 2, 15), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fprenumFactoryDefault.setStatus('optional')
fprvalueFactoryDefault = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 9, 3, 2, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("off", 1), ("on", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fprvalueFactoryDefault.setStatus('mandatory')
fprstateFlagFactoryDefault = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 9, 3, 2, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("hidden", 1), ("read-only", 2), ("updateable", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fprstateFlagFactoryDefault.setStatus('mandatory')
fprlabelSwModeThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 9, 3, 2, 18), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fprlabelSwModeThreshold.setStatus('optional')
fprenumSwModeThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 9, 3, 2, 19), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fprenumSwModeThreshold.setStatus('optional')
fprvalueSwModeThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 9, 3, 2, 20), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fprvalueSwModeThreshold.setStatus('mandatory')
fprstateFlagSwModeThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 9, 3, 2, 21), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("hidden", 1), ("read-only", 2), ("updateable", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fprstateFlagSwModeThreshold.setStatus('mandatory')
fprlabelSwModeSetting = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 9, 3, 2, 22), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fprlabelSwModeSetting.setStatus('optional')
fprenumSwModeSetting = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 9, 3, 2, 23), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fprenumSwModeSetting.setStatus('optional')
fprvalueSwModeSetting = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 9, 3, 2, 24), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("off", 1), ("alarm-only", 2), ("alarm-and-switch", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fprvalueSwModeSetting.setStatus('mandatory')
fprstateFlagSwModeSetting = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 9, 3, 2, 25), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("hidden", 1), ("read-only", 2), ("updateable", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fprstateFlagSwModeSetting.setStatus('mandatory')
fprgx2Rx1000StatusTableIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 9, 4, 3, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fprgx2Rx1000StatusTableIndex.setStatus('mandatory')
fprlabelBoot = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 9, 4, 3, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fprlabelBoot.setStatus('optional')
fprvalueBoot = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 9, 4, 3, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("ok", 1), ("undetermined", 2), ("warning", 3), ("minor", 4), ("major", 5), ("critical", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fprvalueBoot.setStatus('mandatory')
fprstateflagBoot = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 9, 4, 3, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("hidden", 1), ("read-only", 2), ("updateable", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fprstateflagBoot.setStatus('mandatory')
fprlabelFlash = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 9, 4, 3, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fprlabelFlash.setStatus('optional')
fprvalueFlash = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 9, 4, 3, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("ok", 1), ("undetermined", 2), ("warning", 3), ("minor", 4), ("major", 5), ("critical", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fprvalueFlash.setStatus('mandatory')
fprstateflagFlash = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 9, 4, 3, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("hidden", 1), ("read-only", 2), ("updateable", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fprstateflagFlash.setStatus('mandatory')
fprlabelFactoryDataCRC = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 9, 4, 3, 8), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fprlabelFactoryDataCRC.setStatus('optional')
fprvalueFactoryDataCRC = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 9, 4, 3, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("ok", 1), ("undetermined", 2), ("warning", 3), ("minor", 4), ("major", 5), ("critical", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fprvalueFactoryDataCRC.setStatus('mandatory')
fprstateflagFactoryDataCRC = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 9, 4, 3, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("hidden", 1), ("read-only", 2), ("updateable", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fprstateflagFactoryDataCRC.setStatus('mandatory')
fprlabelAlarmDataCRC = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 9, 4, 3, 11), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fprlabelAlarmDataCRC.setStatus('optional')
fprvalueAlarmDataCRC = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 9, 4, 3, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("ok", 1), ("undetermined", 2), ("warning", 3), ("minor", 4), ("major", 5), ("critical", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fprvalueAlarmDataCRC.setStatus('mandatory')
fprstateflagAlarmDataCRC = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 9, 4, 3, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("hidden", 1), ("read-only", 2), ("updateable", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fprstateflagAlarmDataCRC.setStatus('mandatory')
fprlabelCalibrationDataCRC = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 9, 4, 3, 14), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fprlabelCalibrationDataCRC.setStatus('optional')
fprvalueCalibrationDataCRC = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 9, 4, 3, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("ok", 1), ("undetermined", 2), ("warning", 3), ("minor", 4), ("major", 5), ("critical", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fprvalueCalibrationDataCRC.setStatus('mandatory')
fprstateflagCalibrationDataCRC = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 9, 4, 3, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("hidden", 1), ("read-only", 2), ("updateable", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fprstateflagCalibrationDataCRC.setStatus('mandatory')
fprlabelFacCalSettingCRC = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 9, 4, 3, 17), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fprlabelFacCalSettingCRC.setStatus('optional')
fprvalueFacCalSettingCRC = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 9, 4, 3, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("ok", 1), ("undetermined", 2), ("warning", 3), ("minor", 4), ("major", 5), ("critical", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fprvalueFacCalSettingCRC.setStatus('mandatory')
fprstateflagFacCalSettingCRC = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 9, 4, 3, 19), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("hidden", 1), ("read-only", 2), ("updateable", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fprstateflagFacCalSettingCRC.setStatus('mandatory')
fprlabelInputSig = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 9, 4, 3, 20), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fprlabelInputSig.setStatus('optional')
fprvalueInputSig = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 9, 4, 3, 21), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("ok", 1), ("undetermined", 2), ("warning", 3), ("minor", 4), ("major", 5), ("critical", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fprvalueInputSig.setStatus('mandatory')
fprstateflagInputSig = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 9, 4, 3, 22), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("hidden", 1), ("read-only", 2), ("updateable", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fprstateflagInputSig.setStatus('mandatory')
fprgx2Rx1000FactoryTableIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 9, 5, 4, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fprgx2Rx1000FactoryTableIndex.setStatus('mandatory')
fprbootControlByte = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 9, 5, 4, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fprbootControlByte.setStatus('mandatory')
fprbootStatusByte = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 9, 5, 4, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fprbootStatusByte.setStatus('mandatory')
fprbank0CRC = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 9, 5, 4, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fprbank0CRC.setStatus('mandatory')
fprbank1CRC = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 9, 5, 4, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fprbank1CRC.setStatus('mandatory')
fprprgEEPROMByte = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 9, 5, 4, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fprprgEEPROMByte.setStatus('mandatory')
fprfactoryCRC = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 9, 5, 4, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fprfactoryCRC.setStatus('mandatory')
fprcalculateCRC = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 9, 5, 4, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("factory", 1), ("calibration", 2), ("alarmdata", 3), ("calSetting", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fprcalculateCRC.setStatus('mandatory')
fprhourMeter = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 9, 5, 4, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fprhourMeter.setStatus('mandatory')
fprflashPrgCntA = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 9, 5, 4, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fprflashPrgCntA.setStatus('mandatory')
fprflashPrgCntB = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 9, 5, 4, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fprflashPrgCntB.setStatus('mandatory')
fprfwRev0 = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 9, 5, 4, 12), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fprfwRev0.setStatus('mandatory')
fprfwRev1 = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 9, 5, 4, 13), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fprfwRev1.setStatus('mandatory')
gx2Rx1000HoldTimeTableIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 9, 6, 5, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gx2Rx1000HoldTimeTableIndex.setStatus('mandatory')
gx2Rx1000HoldTimeSpecIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 9, 6, 5, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gx2Rx1000HoldTimeSpecIndex.setStatus('mandatory')
gx2Rx1000HoldTimeData = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 9, 6, 5, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gx2Rx1000HoldTimeData.setStatus('mandatory')
trapRX1000ConfigChangeInteger = NotificationType((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 9) + (0,1)).setObjects(("NLSBBN-TRAPS-MIB", "trapIdentifier"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemModelNumber"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemSerialNum"), ("NLSBBN-TRAPS-MIB", "trapPerceivedSeverity"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemOperState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAlarmStatus"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAdminState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAvailStatus"), ("NLSBBN-TRAPS-MIB", "trapText"), ("NLSBBN-TRAPS-MIB", "trapChangedObjectId"), ("NLSBBN-TRAPS-MIB", "trapChangedValueInteger"), ("NLSBBN-TRAPS-MIB", "trapNETrapLastTrapTimeStamp"))
trapRX1000ConfigChangeDisplayString = NotificationType((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 9) + (0,2)).setObjects(("NLSBBN-TRAPS-MIB", "trapIdentifier"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemModelNumber"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemSerialNum"), ("NLSBBN-TRAPS-MIB", "trapPerceivedSeverity"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemOperState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAlarmStatus"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAdminState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAvailStatus"), ("NLSBBN-TRAPS-MIB", "trapText"), ("NLSBBN-TRAPS-MIB", "trapChangedObjectId"), ("NLSBBN-TRAPS-MIB", "trapChangedValueDisplayString"), ("NLSBBN-TRAPS-MIB", "trapNETrapLastTrapTimeStamp"))
trapRX1000OpticalPowerAlarm = NotificationType((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 9) + (0,3)).setObjects(("NLSBBN-TRAPS-MIB", "trapIdentifier"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemModelNumber"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemSerialNum"), ("NLSBBN-TRAPS-MIB", "trapPerceivedSeverity"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemOperState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAlarmStatus"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAdminState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAvailStatus"), ("NLSBBN-TRAPS-MIB", "trapText"), ("NLSBBN-TRAPS-MIB", "trapChangedObjectId"), ("NLSBBN-TRAPS-MIB", "trapChangedValueInteger"), ("NLSBBN-TRAPS-MIB", "trapNETrapLastTrapTimeStamp"))
trapRX1000ModuleTemperatureAlarm = NotificationType((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 9) + (0,4)).setObjects(("NLSBBN-TRAPS-MIB", "trapIdentifier"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemModelNumber"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemSerialNum"), ("NLSBBN-TRAPS-MIB", "trapPerceivedSeverity"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemOperState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAlarmStatus"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAdminState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAvailStatus"), ("NLSBBN-TRAPS-MIB", "trapText"), ("NLSBBN-TRAPS-MIB", "trapChangedObjectId"), ("NLSBBN-TRAPS-MIB", "trapChangedValueInteger"), ("NLSBBN-TRAPS-MIB", "trapNETrapLastTrapTimeStamp"))
trapRX1000HeatSinkTemperatureAlarm = NotificationType((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 9) + (0,5)).setObjects(("NLSBBN-TRAPS-MIB", "trapIdentifier"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemModelNumber"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemSerialNum"), ("NLSBBN-TRAPS-MIB", "trapPerceivedSeverity"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemOperState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAlarmStatus"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAdminState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAvailStatus"), ("NLSBBN-TRAPS-MIB", "trapText"), ("NLSBBN-TRAPS-MIB", "trapChangedObjectId"), ("NLSBBN-TRAPS-MIB", "trapChangedValueInteger"), ("NLSBBN-TRAPS-MIB", "trapNETrapLastTrapTimeStamp"))
trapRX1000FanCurrentAlarm = NotificationType((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 9) + (0,6)).setObjects(("NLSBBN-TRAPS-MIB", "trapIdentifier"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemModelNumber"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemSerialNum"), ("NLSBBN-TRAPS-MIB", "trapPerceivedSeverity"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemOperState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAlarmStatus"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAdminState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAvailStatus"), ("NLSBBN-TRAPS-MIB", "trapText"), ("NLSBBN-TRAPS-MIB", "trapChangedObjectId"), ("NLSBBN-TRAPS-MIB", "trapChangedValueInteger"), ("NLSBBN-TRAPS-MIB", "trapNETrapLastTrapTimeStamp"))
trapRX1000Plus12CurrentAlarm = NotificationType((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 9) + (0,7)).setObjects(("NLSBBN-TRAPS-MIB", "trapIdentifier"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemModelNumber"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemSerialNum"), ("NLSBBN-TRAPS-MIB", "trapPerceivedSeverity"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemOperState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAlarmStatus"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAdminState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAvailStatus"), ("NLSBBN-TRAPS-MIB", "trapText"), ("NLSBBN-TRAPS-MIB", "trapChangedObjectId"), ("NLSBBN-TRAPS-MIB", "trapChangedValueInteger"), ("NLSBBN-TRAPS-MIB", "trapNETrapLastTrapTimeStamp"))
trapRX1000OpticalSwitchAlarm = NotificationType((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 9) + (0,8)).setObjects(("NLSBBN-TRAPS-MIB", "trapIdentifier"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemModelNumber"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemSerialNum"), ("NLSBBN-TRAPS-MIB", "trapPerceivedSeverity"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemOperState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAlarmStatus"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAdminState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAvailStatus"), ("NLSBBN-TRAPS-MIB", "trapText"), ("NLSBBN-TRAPS-MIB", "trapChangedObjectId"), ("NLSBBN-TRAPS-MIB", "trapChangedValueInteger"), ("NLSBBN-TRAPS-MIB", "trapNETrapLastTrapTimeStamp"))
trapRX1000Boot0Alarm = NotificationType((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 9) + (0,9)).setObjects(("NLSBBN-TRAPS-MIB", "trapIdentifier"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemModelNumber"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemSerialNum"), ("NLSBBN-TRAPS-MIB", "trapPerceivedSeverity"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemOperState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAlarmStatus"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAdminState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAvailStatus"), ("NLSBBN-TRAPS-MIB", "trapText"), ("NLSBBN-TRAPS-MIB", "trapChangedObjectId"), ("NLSBBN-TRAPS-MIB", "trapChangedValueInteger"), ("NLSBBN-TRAPS-MIB", "trapNETrapLastTrapTimeStamp"))
trapRX1000Boot1Alarm = NotificationType((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 9) + (0,10)).setObjects(("NLSBBN-TRAPS-MIB", "trapIdentifier"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemModelNumber"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemSerialNum"), ("NLSBBN-TRAPS-MIB", "trapPerceivedSeverity"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemOperState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAlarmStatus"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAdminState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAvailStatus"), ("NLSBBN-TRAPS-MIB", "trapText"), ("NLSBBN-TRAPS-MIB", "trapChangedObjectId"), ("NLSBBN-TRAPS-MIB", "trapChangedValueInteger"), ("NLSBBN-TRAPS-MIB", "trapNETrapLastTrapTimeStamp"))
trapRX1000FlashAlarm = NotificationType((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 9) + (0,11)).setObjects(("NLSBBN-TRAPS-MIB", "trapIdentifier"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemModelNumber"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemSerialNum"), ("NLSBBN-TRAPS-MIB", "trapPerceivedSeverity"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemOperState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAlarmStatus"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAdminState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAvailStatus"), ("NLSBBN-TRAPS-MIB", "trapText"), ("NLSBBN-TRAPS-MIB", "trapChangedObjectId"), ("NLSBBN-TRAPS-MIB", "trapChangedValueInteger"), ("NLSBBN-TRAPS-MIB", "trapNETrapLastTrapTimeStamp"))
trapRX1000AlarmDataCRCAlarm = NotificationType((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 9) + (0,12)).setObjects(("NLSBBN-TRAPS-MIB", "trapIdentifier"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemModelNumber"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemSerialNum"), ("NLSBBN-TRAPS-MIB", "trapPerceivedSeverity"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemOperState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAlarmStatus"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAdminState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAvailStatus"), ("NLSBBN-TRAPS-MIB", "trapText"), ("NLSBBN-TRAPS-MIB", "trapChangedObjectId"), ("NLSBBN-TRAPS-MIB", "trapChangedValueInteger"), ("NLSBBN-TRAPS-MIB", "trapNETrapLastTrapTimeStamp"))
trapRX1000FactoryDataCRCAlarm = NotificationType((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 9) + (0,13)).setObjects(("NLSBBN-TRAPS-MIB", "trapIdentifier"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemModelNumber"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemSerialNum"), ("NLSBBN-TRAPS-MIB", "trapPerceivedSeverity"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemOperState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAlarmStatus"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAdminState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAvailStatus"), ("NLSBBN-TRAPS-MIB", "trapText"), ("NLSBBN-TRAPS-MIB", "trapChangedObjectId"), ("NLSBBN-TRAPS-MIB", "trapChangedValueInteger"), ("NLSBBN-TRAPS-MIB", "trapNETrapLastTrapTimeStamp"))
trapRX1000CalDataCRCAlarm = NotificationType((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 9) + (0,14)).setObjects(("NLSBBN-TRAPS-MIB", "trapIdentifier"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemModelNumber"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemSerialNum"), ("NLSBBN-TRAPS-MIB", "trapPerceivedSeverity"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemOperState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAlarmStatus"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAdminState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAvailStatus"), ("NLSBBN-TRAPS-MIB", "trapText"), ("NLSBBN-TRAPS-MIB", "trapChangedObjectId"), ("NLSBBN-TRAPS-MIB", "trapChangedValueInteger"), ("NLSBBN-TRAPS-MIB", "trapNETrapLastTrapTimeStamp"))
trapRX1000ResetFacDefault = NotificationType((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 9) + (0,15)).setObjects(("NLSBBN-TRAPS-MIB", "trapIdentifier"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemModelNumber"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemSerialNum"), ("NLSBBN-TRAPS-MIB", "trapPerceivedSeverity"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemOperState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAlarmStatus"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAdminState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAvailStatus"), ("NLSBBN-TRAPS-MIB", "trapText"), ("NLSBBN-TRAPS-MIB", "trapChangedObjectId"), ("NLSBBN-TRAPS-MIB", "trapChangedValueInteger"), ("NLSBBN-TRAPS-MIB", "trapNETrapLastTrapTimeStamp"))
trapRX1000FacCalSettingCRCAlarm = NotificationType((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 9) + (0,16)).setObjects(("NLSBBN-TRAPS-MIB", "trapIdentifier"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemModelNumber"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemSerialNum"), ("NLSBBN-TRAPS-MIB", "trapPerceivedSeverity"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemOperState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAlarmStatus"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAdminState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAvailStatus"), ("NLSBBN-TRAPS-MIB", "trapText"), ("NLSBBN-TRAPS-MIB", "trapChangedObjectId"), ("NLSBBN-TRAPS-MIB", "trapChangedValueInteger"), ("NLSBBN-TRAPS-MIB", "trapNETrapLastTrapTimeStamp"))
mibBuilder.exportSymbols("OMNI-gx2RX1000-MIB", fprminValueSinkTemp=fprminValueSinkTemp, fprgx2Rx1000FactoryTableIndex=fprgx2Rx1000FactoryTableIndex, gx2Rx1000FactoryTable=gx2Rx1000FactoryTable, fprminValueFanCurrent=fprminValueFanCurrent, fprstateFlagAttnSetting=fprstateFlagAttnSetting, gx2Rx1000Descriptor=gx2Rx1000Descriptor, fprcurrentValue12Volt=fprcurrentValue12Volt, fprmajorLowModTemp=fprmajorLowModTemp, Float=Float, fprenumSwModeSetting=fprenumSwModeSetting, fprstateflagBoot=fprstateflagBoot, fprstateFlagSlopeSetting=fprstateFlagSlopeSetting, trapRX1000OpticalSwitchAlarm=trapRX1000OpticalSwitchAlarm, fprstateFlagOptPower=fprstateFlagOptPower, fprlabelSwModeThreshold=fprlabelSwModeThreshold, gx2Rx1000HoldTimeTable=gx2Rx1000HoldTimeTable, fprstateflagFacCalSettingCRC=fprstateflagFacCalSettingCRC, fprminorHighModTemp=fprminorHighModTemp, fprminorLowOptPower=fprminorLowOptPower, fprhourMeter=fprhourMeter, fprlabelBoot=fprlabelBoot, gx2Rx1000StatusEntry=gx2Rx1000StatusEntry, fprmajorHighOptPower=fprmajorHighOptPower, fprenumWavelength=fprenumWavelength, fprstateFlagModTemp=fprstateFlagModTemp, gx2Rx1000DigitalEntry=gx2Rx1000DigitalEntry, fprbootStatusByte=fprbootStatusByte, fprmajorLow12Volt=fprmajorLow12Volt, trapRX1000Boot1Alarm=trapRX1000Boot1Alarm, fprmajorHighFanCurrent=fprmajorHighFanCurrent, fprenumSwModeThreshold=fprenumSwModeThreshold, fprvalueInputSig=fprvalueInputSig, trapRX1000OpticalPowerAlarm=trapRX1000OpticalPowerAlarm, fprstateFlagSinkTemp=fprstateFlagSinkTemp, gx2Rx1000HoldTimeTableIndex=gx2Rx1000HoldTimeTableIndex, fprcurrentValueSinkTemp=fprcurrentValueSinkTemp, fprmajorHigh12Volt=fprmajorHigh12Volt, fprgx2Rx1000StatusTableIndex=fprgx2Rx1000StatusTableIndex, fprvalueCalibrationDataCRC=fprvalueCalibrationDataCRC, fprvalueFactoryDataCRC=fprvalueFactoryDataCRC, trapRX1000HeatSinkTemperatureAlarm=trapRX1000HeatSinkTemperatureAlarm, fprstateFlagSwModeThreshold=fprstateFlagSwModeThreshold, fprlabelFactoryDataCRC=fprlabelFactoryDataCRC, fprvalueSwModeThreshold=fprvalueSwModeThreshold, fprflashPrgCntB=fprflashPrgCntB, fprlabelSwModeSetting=fprlabelSwModeSetting, fprvalueFlash=fprvalueFlash, trapRX1000FlashAlarm=trapRX1000FlashAlarm, trapRX1000Plus12CurrentAlarm=trapRX1000Plus12CurrentAlarm, fprflashPrgCntA=fprflashPrgCntA, fprminorLow12Volt=fprminorLow12Volt, fpruomModTemp=fpruomModTemp, trapRX1000ConfigChangeInteger=trapRX1000ConfigChangeInteger, fprminValueOptPower=fprminValueOptPower, fpralarmStateSinkTemp=fpralarmStateSinkTemp, fprcurrentValueModTemp=fprcurrentValueModTemp, gx2Rx1000AnalogEntry=gx2Rx1000AnalogEntry, fprbootControlByte=fprbootControlByte, fpralarmStateFanCurrent=fpralarmStateFanCurrent, fprminorHigh12Volt=fprminorHigh12Volt, fprlabelFacCalSettingCRC=fprlabelFacCalSettingCRC, trapRX1000ResetFacDefault=trapRX1000ResetFacDefault, trapRX1000CalDataCRCAlarm=trapRX1000CalDataCRCAlarm, gx2Rx1000FactoryEntry=gx2Rx1000FactoryEntry, gx2Rx1000DigitalTable=gx2Rx1000DigitalTable, fprstateflagCalibrationDataCRC=fprstateflagCalibrationDataCRC, fprcalculateCRC=fprcalculateCRC, fprmajorLowOptPower=fprmajorLowOptPower, fprvalueFacCalSettingCRC=fprvalueFacCalSettingCRC, fprfwRev1=fprfwRev1, fprlabelWavelength=fprlabelWavelength, fprlabelModTemp=fprlabelModTemp, trapRX1000Boot0Alarm=trapRX1000Boot0Alarm, trapRX1000FactoryDataCRCAlarm=trapRX1000FactoryDataCRCAlarm, fpruom12Volt=fpruom12Volt, gx2Rx1000AnalogTable=gx2Rx1000AnalogTable, fprlabel12Volt=fprlabel12Volt, fprbank1CRC=fprbank1CRC, trapRX1000FacCalSettingCRCAlarm=trapRX1000FacCalSettingCRCAlarm, fpralarmStateOptPower=fpralarmStateOptPower, fprvalueAlarmDataCRC=fprvalueAlarmDataCRC, fprlabelFactoryDefault=fprlabelFactoryDefault, fprstateflagInputSig=fprstateflagInputSig, fprlabelAlarmDataCRC=fprlabelAlarmDataCRC, fprlabelSlopeSetting=fprlabelSlopeSetting, fpruomOptPower=fpruomOptPower, gx2Rx1000HoldTimeEntry=gx2Rx1000HoldTimeEntry, fpruomFanCurrent=fpruomFanCurrent, fprvalueSlopeSetting=fprvalueSlopeSetting, fprenumFactoryDefault=fprenumFactoryDefault, fprmajorLowSinkTemp=fprmajorLowSinkTemp, fprmaxValueFanCurrent=fprmaxValueFanCurrent, fprlabelCalibrationDataCRC=fprlabelCalibrationDataCRC, fprminorLowSinkTemp=fprminorLowSinkTemp, trapRX1000ConfigChangeDisplayString=trapRX1000ConfigChangeDisplayString, fprminValue12Volt=fprminValue12Volt, fprminValueModTemp=fprminValueModTemp, trapRX1000AlarmDataCRCAlarm=trapRX1000AlarmDataCRCAlarm, fprvalueWavelength=fprvalueWavelength, fprminorHighFanCurrent=fprminorHighFanCurrent, fprstateFlagFanCurrent=fprstateFlagFanCurrent, fprmaxValue12Volt=fprmaxValue12Volt, fprlabelAttnSetting=fprlabelAttnSetting, fpralarmState12Volt=fpralarmState12Volt, fprcurrentValueOptPower=fprcurrentValueOptPower, gx2Rx1000StatusTable=gx2Rx1000StatusTable, fprenumSlopeSetting=fprenumSlopeSetting, fprvalueAttnSetting=fprvalueAttnSetting, fprfactoryCRC=fprfactoryCRC, fprmajorHighSinkTemp=fprmajorHighSinkTemp, fprbank0CRC=fprbank0CRC, fprgx2Rx1000AnalogTableIndex=fprgx2Rx1000AnalogTableIndex, fprstateflagFlash=fprstateflagFlash, fprlabelInputSig=fprlabelInputSig, fprstateflagAlarmDataCRC=fprstateflagAlarmDataCRC, fprvalueBoot=fprvalueBoot, fpralarmStateModTemp=fpralarmStateModTemp, fprfwRev0=fprfwRev0, fprminorLowFanCurrent=fprminorLowFanCurrent, fprstateFlag12Volt=fprstateFlag12Volt, fprmaxValueSinkTemp=fprmaxValueSinkTemp, fprminorHighOptPower=fprminorHighOptPower, fprstateFlagFactoryDefault=fprstateFlagFactoryDefault, fprprgEEPROMByte=fprprgEEPROMByte, fprlabelFanCurrent=fprlabelFanCurrent, fprenumAttnSetting=fprenumAttnSetting, fprstateFlagWavelength=fprstateFlagWavelength, fprcurrentValueFanCurrent=fprcurrentValueFanCurrent, fpruomSinkTemp=fpruomSinkTemp, gx2Rx1000HoldTimeSpecIndex=gx2Rx1000HoldTimeSpecIndex, fprmaxValueOptPower=fprmaxValueOptPower, fprstateflagFactoryDataCRC=fprstateflagFactoryDataCRC, fprmajorLowFanCurrent=fprmajorLowFanCurrent, gx2Rx1000HoldTimeData=gx2Rx1000HoldTimeData, fprlabelOptPower=fprlabelOptPower, fprvalueSwModeSetting=fprvalueSwModeSetting, trapRX1000ModuleTemperatureAlarm=trapRX1000ModuleTemperatureAlarm, fprmaxValueModTemp=fprmaxValueModTemp, fprlabelSinkTemp=fprlabelSinkTemp, fprmajorHighModTemp=fprmajorHighModTemp, fprstateFlagSwModeSetting=fprstateFlagSwModeSetting, trapRX1000FanCurrentAlarm=trapRX1000FanCurrentAlarm, fprminorLowModTemp=fprminorLowModTemp, fprvalueFactoryDefault=fprvalueFactoryDefault, fprlabelFlash=fprlabelFlash, fprgx2Rx1000DigitalTableIndex=fprgx2Rx1000DigitalTableIndex, fprminorHighSinkTemp=fprminorHighSinkTemp)
