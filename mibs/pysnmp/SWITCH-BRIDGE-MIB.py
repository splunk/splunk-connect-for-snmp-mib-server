#
# PySNMP MIB module SWITCH-BRIDGE-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/SWITCH-BRIDGE-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 21:05:33 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, ObjectIdentifier, OctetString = mibBuilder.importSymbols("ASN1", "Integer", "ObjectIdentifier", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
SingleValueConstraint, ValueRangeConstraint, ConstraintsIntersection, ConstraintsUnion, ValueSizeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "SingleValueConstraint", "ValueRangeConstraint", "ConstraintsIntersection", "ConstraintsUnion", "ValueSizeConstraint")
InterfaceIndex, = mibBuilder.importSymbols("IF-MIB", "InterfaceIndex")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
TimeTicks, Gauge32, Counter64, NotificationType, IpAddress, Integer32, Unsigned32, MibScalar, MibTable, MibTableRow, MibTableColumn, ObjectIdentity, Bits, ModuleIdentity, Counter32, iso, MibIdentifier = mibBuilder.importSymbols("SNMPv2-SMI", "TimeTicks", "Gauge32", "Counter64", "NotificationType", "IpAddress", "Integer32", "Unsigned32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "ObjectIdentity", "Bits", "ModuleIdentity", "Counter32", "iso", "MibIdentifier")
TextualConvention, DisplayString, MacAddress = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString", "MacAddress")
vLanNumber, = mibBuilder.importSymbols("SWITCH-VLAN-MIB", "vLanNumber")
bridgeModule, = mibBuilder.importSymbols("TELESYN-ATI-TC", "bridgeModule")
switchBridgeMib = ModuleIdentity((1, 3, 6, 1, 4, 1, 207, 8, 9, 2, 2, 5))
switchBridgeMib.setRevisions(('1997-04-18 22:00', '1996-05-31 22:00',))
if mibBuilder.loadTexts: switchBridgeMib.setLastUpdated('9605312200Z')
if mibBuilder.loadTexts: switchBridgeMib.setOrganization('')
class BridgeId(TextualConvention, OctetString):
    status = 'current'
    displayHint = '1x'
    subtypeSpec = OctetString.subtypeSpec + ValueSizeConstraint(8, 8)
    fixedLength = 8

class Timeout(TextualConvention, Integer32):
    status = 'current'
    displayHint = 'd'

switchBridgeBase = MibIdentifier((1, 3, 6, 1, 4, 1, 207, 8, 9, 2, 2, 5, 1))
switchBridgeStp = MibIdentifier((1, 3, 6, 1, 4, 1, 207, 8, 9, 2, 2, 5, 2))
switchBridgeSr = MibIdentifier((1, 3, 6, 1, 4, 1, 207, 8, 9, 2, 2, 5, 3))
switchBridgeTp = MibIdentifier((1, 3, 6, 1, 4, 1, 207, 8, 9, 2, 2, 5, 4))
switchBridgeStatic = MibIdentifier((1, 3, 6, 1, 4, 1, 207, 8, 9, 2, 2, 5, 5))
switchBridgeTrapsGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 207, 8, 9, 2, 2, 5, 6))
switchBridgeTraps = MibIdentifier((1, 3, 6, 1, 4, 1, 207, 8, 9, 2, 2, 5, 6, 0))
switchBridgeBaseTable = MibTable((1, 3, 6, 1, 4, 1, 207, 8, 9, 2, 2, 5, 1, 1), )
if mibBuilder.loadTexts: switchBridgeBaseTable.setStatus('current')
switchBridgeBaseEntry = MibTableRow((1, 3, 6, 1, 4, 1, 207, 8, 9, 2, 2, 5, 1, 1, 1), ).setIndexNames((0, "SWITCH-VLAN-MIB", "vLanNumber"))
if mibBuilder.loadTexts: switchBridgeBaseEntry.setStatus('current')
switchBridgeBaseAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 9, 2, 2, 5, 1, 1, 1, 1), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: switchBridgeBaseAddress.setStatus('current')
switchBridgeBaseNumPorts = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 9, 2, 2, 5, 1, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: switchBridgeBaseNumPorts.setStatus('current')
switchBridgeBaseType = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 9, 2, 2, 5, 1, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("unknown", 1), ("transparentOnly", 2), ("sourceRouteOnly", 3), ("srt", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: switchBridgeBaseType.setStatus('current')
switchBridgeBasePortTable = MibTable((1, 3, 6, 1, 4, 1, 207, 8, 9, 2, 2, 5, 1, 2), )
if mibBuilder.loadTexts: switchBridgeBasePortTable.setStatus('current')
switchBridgeBasePortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 207, 8, 9, 2, 2, 5, 1, 2, 1), ).setIndexNames((0, "SWITCH-VLAN-MIB", "vLanNumber"), (0, "SWITCH-BRIDGE-MIB", "switchBridgeBasePort"))
if mibBuilder.loadTexts: switchBridgeBasePortEntry.setStatus('current')
switchBridgeBasePort = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 9, 2, 2, 5, 1, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 256)))
if mibBuilder.loadTexts: switchBridgeBasePort.setStatus('current')
switchBridgeBasePortIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 9, 2, 2, 5, 1, 2, 1, 2), InterfaceIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: switchBridgeBasePortIfIndex.setStatus('current')
switchBridgeBasePortCircuit = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 9, 2, 2, 5, 1, 2, 1, 3), ObjectIdentifier()).setMaxAccess("readonly")
if mibBuilder.loadTexts: switchBridgeBasePortCircuit.setStatus('current')
switchBridgeBasePortDelayExceededDiscards = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 9, 2, 2, 5, 1, 2, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: switchBridgeBasePortDelayExceededDiscards.setStatus('current')
switchBridgeBasePortMtuExceededDiscards = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 9, 2, 2, 5, 1, 2, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: switchBridgeBasePortMtuExceededDiscards.setStatus('current')
switchBridgeStpTable = MibTable((1, 3, 6, 1, 4, 1, 207, 8, 9, 2, 2, 5, 2, 1), )
if mibBuilder.loadTexts: switchBridgeStpTable.setStatus('current')
switchBridgeStpEntry = MibTableRow((1, 3, 6, 1, 4, 1, 207, 8, 9, 2, 2, 5, 2, 1, 1), ).setIndexNames((0, "SWITCH-VLAN-MIB", "vLanNumber"))
if mibBuilder.loadTexts: switchBridgeStpEntry.setStatus('current')
switchBridgeStpProtocolSpecification = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 9, 2, 2, 5, 2, 1, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("unknown", 1), ("decLb100", 2), ("ieee8021d", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: switchBridgeStpProtocolSpecification.setStatus('current')
switchBridgeStpPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 9, 2, 2, 5, 2, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: switchBridgeStpPriority.setStatus('current')
switchBridgeStpTimeSinceTopologyChange = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 9, 2, 2, 5, 2, 1, 1, 3), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: switchBridgeStpTimeSinceTopologyChange.setStatus('current')
switchBridgeStpTopChanges = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 9, 2, 2, 5, 2, 1, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: switchBridgeStpTopChanges.setStatus('current')
switchBridgeStpDesignatedRoot = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 9, 2, 2, 5, 2, 1, 1, 5), BridgeId()).setMaxAccess("readonly")
if mibBuilder.loadTexts: switchBridgeStpDesignatedRoot.setStatus('current')
switchBridgeStpRootCost = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 9, 2, 2, 5, 2, 1, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: switchBridgeStpRootCost.setStatus('current')
switchBridgeStpRootPort = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 9, 2, 2, 5, 2, 1, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: switchBridgeStpRootPort.setStatus('current')
switchBridgeStpMaxAge = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 9, 2, 2, 5, 2, 1, 1, 8), Timeout()).setMaxAccess("readonly")
if mibBuilder.loadTexts: switchBridgeStpMaxAge.setStatus('current')
switchBridgeStpHelloTime = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 9, 2, 2, 5, 2, 1, 1, 9), Timeout()).setMaxAccess("readonly")
if mibBuilder.loadTexts: switchBridgeStpHelloTime.setStatus('current')
switchBridgeStpHoldTime = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 9, 2, 2, 5, 2, 1, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: switchBridgeStpHoldTime.setStatus('current')
switchBridgeStpForwardDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 9, 2, 2, 5, 2, 1, 1, 11), Timeout()).setMaxAccess("readonly")
if mibBuilder.loadTexts: switchBridgeStpForwardDelay.setStatus('current')
switchBridgeStpBridgeMaxAge = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 9, 2, 2, 5, 2, 1, 1, 12), Timeout().subtype(subtypeSpec=ValueRangeConstraint(600, 4000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: switchBridgeStpBridgeMaxAge.setStatus('current')
switchBridgeStpBridgeHelloTime = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 9, 2, 2, 5, 2, 1, 1, 13), Timeout().subtype(subtypeSpec=ValueRangeConstraint(100, 1000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: switchBridgeStpBridgeHelloTime.setStatus('current')
switchBridgeStpBridgeForwardDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 9, 2, 2, 5, 2, 1, 1, 14), Timeout().subtype(subtypeSpec=ValueRangeConstraint(400, 3000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: switchBridgeStpBridgeForwardDelay.setStatus('current')
switchBridgeStpPortTable = MibTable((1, 3, 6, 1, 4, 1, 207, 8, 9, 2, 2, 5, 2, 15), )
if mibBuilder.loadTexts: switchBridgeStpPortTable.setStatus('current')
switchBridgeStpPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 207, 8, 9, 2, 2, 5, 2, 15, 1), ).setIndexNames((0, "SWITCH-VLAN-MIB", "vLanNumber"), (0, "SWITCH-BRIDGE-MIB", "switchBridgeStpPort"))
if mibBuilder.loadTexts: switchBridgeStpPortEntry.setStatus('current')
switchBridgeStpPort = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 9, 2, 2, 5, 2, 15, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 256)))
if mibBuilder.loadTexts: switchBridgeStpPort.setStatus('current')
switchBridgeStpPortPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 9, 2, 2, 5, 2, 15, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: switchBridgeStpPortPriority.setStatus('current')
switchBridgeStpPortState = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 9, 2, 2, 5, 2, 15, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("disabled", 1), ("blocking", 2), ("listening", 3), ("learning", 4), ("forwarding", 5), ("broken", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: switchBridgeStpPortState.setStatus('current')
switchBridgeStpPortEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 9, 2, 2, 5, 2, 15, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: switchBridgeStpPortEnable.setStatus('current')
switchBridgeStpPortPathCost = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 9, 2, 2, 5, 2, 15, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: switchBridgeStpPortPathCost.setStatus('current')
switchBridgeStpPortDesignatedRoot = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 9, 2, 2, 5, 2, 15, 1, 6), BridgeId()).setMaxAccess("readonly")
if mibBuilder.loadTexts: switchBridgeStpPortDesignatedRoot.setStatus('current')
switchBridgeStpPortDesignatedCost = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 9, 2, 2, 5, 2, 15, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: switchBridgeStpPortDesignatedCost.setStatus('current')
switchBridgeStpPortDesignatedBridge = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 9, 2, 2, 5, 2, 15, 1, 8), BridgeId()).setMaxAccess("readonly")
if mibBuilder.loadTexts: switchBridgeStpPortDesignatedBridge.setStatus('current')
switchBridgeStpPortDesignatedPort = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 9, 2, 2, 5, 2, 15, 1, 9), OctetString().subtype(subtypeSpec=ValueSizeConstraint(2, 2)).setFixedLength(2)).setMaxAccess("readonly")
if mibBuilder.loadTexts: switchBridgeStpPortDesignatedPort.setStatus('current')
switchBridgeStpPortForwardTransitions = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 9, 2, 2, 5, 2, 15, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: switchBridgeStpPortForwardTransitions.setStatus('current')
switchBridgeTpLearnedEntryDiscards = MibScalar((1, 3, 6, 1, 4, 1, 207, 8, 9, 2, 2, 5, 4, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: switchBridgeTpLearnedEntryDiscards.setStatus('current')
switchBridgeTpBaseTable = MibTable((1, 3, 6, 1, 4, 1, 207, 8, 9, 2, 2, 5, 4, 2), )
if mibBuilder.loadTexts: switchBridgeTpBaseTable.setStatus('current')
switchBridgeTpBaseEntry = MibTableRow((1, 3, 6, 1, 4, 1, 207, 8, 9, 2, 2, 5, 4, 2, 1), ).setIndexNames((0, "SWITCH-VLAN-MIB", "vLanNumber"))
if mibBuilder.loadTexts: switchBridgeTpBaseEntry.setStatus('current')
switchBridgeTpAgingTime = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 9, 2, 2, 5, 4, 2, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(10, 1000000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: switchBridgeTpAgingTime.setStatus('current')
switchBridgeTpFdbTable = MibTable((1, 3, 6, 1, 4, 1, 207, 8, 9, 2, 2, 5, 4, 3), )
if mibBuilder.loadTexts: switchBridgeTpFdbTable.setStatus('current')
switchBridgeTpFdbEntry = MibTableRow((1, 3, 6, 1, 4, 1, 207, 8, 9, 2, 2, 5, 4, 3, 1), ).setIndexNames((0, "SWITCH-BRIDGE-MIB", "switchBridgeStpPort"), (0, "SWITCH-BRIDGE-MIB", "switchBridgeTpFdbAddress"))
if mibBuilder.loadTexts: switchBridgeTpFdbEntry.setStatus('current')
switchBridgeTpFdbAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 9, 2, 2, 5, 4, 3, 1, 1), MacAddress())
if mibBuilder.loadTexts: switchBridgeTpFdbAddress.setStatus('current')
switchBridgeTpFdbPort = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 9, 2, 2, 5, 4, 3, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 256)))
if mibBuilder.loadTexts: switchBridgeTpFdbPort.setStatus('obsolete')
switchBridgeTpFdbStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 9, 2, 2, 5, 4, 3, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("other", 1), ("invalid", 2), ("learned", 3), ("self", 4), ("mgmt", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: switchBridgeTpFdbStatus.setStatus('current')
switchBridgeTpPortTable = MibTable((1, 3, 6, 1, 4, 1, 207, 8, 9, 2, 2, 5, 4, 4), )
if mibBuilder.loadTexts: switchBridgeTpPortTable.setStatus('current')
switchBridgeTpPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 207, 8, 9, 2, 2, 5, 4, 4, 1), ).setIndexNames((0, "SWITCH-VLAN-MIB", "vLanNumber"), (0, "SWITCH-BRIDGE-MIB", "switchBridgeTpPort"))
if mibBuilder.loadTexts: switchBridgeTpPortEntry.setStatus('current')
switchBridgeTpPort = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 9, 2, 2, 5, 4, 4, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 256)))
if mibBuilder.loadTexts: switchBridgeTpPort.setStatus('current')
switchBridgeTpPortMaxInfo = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 9, 2, 2, 5, 4, 4, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: switchBridgeTpPortMaxInfo.setStatus('current')
switchBridgeTpPortInFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 9, 2, 2, 5, 4, 4, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: switchBridgeTpPortInFrames.setStatus('current')
switchBridgeTpPortOutFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 9, 2, 2, 5, 4, 4, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: switchBridgeTpPortOutFrames.setStatus('current')
switchBridgeTpPortInDiscards = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 9, 2, 2, 5, 4, 4, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: switchBridgeTpPortInDiscards.setStatus('current')
switchBridgeStaticTable = MibTable((1, 3, 6, 1, 4, 1, 207, 8, 9, 2, 2, 5, 5, 1), )
if mibBuilder.loadTexts: switchBridgeStaticTable.setStatus('current')
switchBridgeStaticEntry = MibTableRow((1, 3, 6, 1, 4, 1, 207, 8, 9, 2, 2, 5, 5, 1, 1), ).setIndexNames((0, "SWITCH-BRIDGE-MIB", "switchBridgeStpPort"), (0, "SWITCH-BRIDGE-MIB", "switchBridgeStaticAddress"))
if mibBuilder.loadTexts: switchBridgeStaticEntry.setStatus('current')
switchBridgeStaticAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 9, 2, 2, 5, 5, 1, 1, 1), MacAddress())
if mibBuilder.loadTexts: switchBridgeStaticAddress.setStatus('current')
switchBridgeStaticReceivePort = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 9, 2, 2, 5, 5, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 256))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: switchBridgeStaticReceivePort.setStatus('obsolete')
switchBridgeStaticAllowedToGoTo = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 9, 2, 2, 5, 5, 1, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: switchBridgeStaticAllowedToGoTo.setStatus('current')
switchBridgeStaticStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 9, 2, 2, 5, 5, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("other", 1), ("invalid", 2), ("permanent", 3), ("deleteOnReset", 4), ("deleteOnTimeout", 5)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: switchBridgeStaticStatus.setStatus('current')
switchNewRoot = NotificationType((1, 3, 6, 1, 4, 1, 207, 8, 9, 2, 2, 5, 6, 0, 1)).setObjects(("SWITCH-BRIDGE-MIB", "switchBridgeStpDesignatedRoot"))
if mibBuilder.loadTexts: switchNewRoot.setStatus('current')
switchTopologyChange = NotificationType((1, 3, 6, 1, 4, 1, 207, 8, 9, 2, 2, 5, 6, 0, 2)).setObjects(("SWITCH-BRIDGE-MIB", "switchBridgeStpPortState"))
if mibBuilder.loadTexts: switchTopologyChange.setStatus('current')
mibBuilder.exportSymbols("SWITCH-BRIDGE-MIB", switchBridgeStpPortTable=switchBridgeStpPortTable, switchBridgeStaticStatus=switchBridgeStaticStatus, switchBridgeBasePortMtuExceededDiscards=switchBridgeBasePortMtuExceededDiscards, switchBridgeStpProtocolSpecification=switchBridgeStpProtocolSpecification, switchBridgeStpPortDesignatedRoot=switchBridgeStpPortDesignatedRoot, switchBridgeStpRootCost=switchBridgeStpRootCost, switchBridgeStpBridgeForwardDelay=switchBridgeStpBridgeForwardDelay, switchBridgeTpBaseEntry=switchBridgeTpBaseEntry, switchBridgeTpBaseTable=switchBridgeTpBaseTable, switchBridgeStpPortEntry=switchBridgeStpPortEntry, switchBridgeStpBridgeHelloTime=switchBridgeStpBridgeHelloTime, switchBridgeTpPortMaxInfo=switchBridgeTpPortMaxInfo, switchBridgeStpPriority=switchBridgeStpPriority, switchBridgeStpDesignatedRoot=switchBridgeStpDesignatedRoot, switchBridgeStpPortState=switchBridgeStpPortState, switchBridgeStpPortForwardTransitions=switchBridgeStpPortForwardTransitions, switchBridgeBaseTable=switchBridgeBaseTable, switchBridgeStpPortEnable=switchBridgeStpPortEnable, switchBridgeStp=switchBridgeStp, switchBridgeTpPort=switchBridgeTpPort, switchBridgeBaseNumPorts=switchBridgeBaseNumPorts, PYSNMP_MODULE_ID=switchBridgeMib, switchBridgeStatic=switchBridgeStatic, switchBridgeBasePort=switchBridgeBasePort, switchBridgeStpTopChanges=switchBridgeStpTopChanges, switchBridgeStpForwardDelay=switchBridgeStpForwardDelay, switchBridgeTpPortInDiscards=switchBridgeTpPortInDiscards, switchBridgeStaticEntry=switchBridgeStaticEntry, switchBridgeStpPortDesignatedBridge=switchBridgeStpPortDesignatedBridge, switchBridgeTp=switchBridgeTp, switchBridgeStpBridgeMaxAge=switchBridgeStpBridgeMaxAge, switchBridgeStaticAddress=switchBridgeStaticAddress, switchBridgeStaticTable=switchBridgeStaticTable, switchBridgeStaticReceivePort=switchBridgeStaticReceivePort, switchBridgeTpFdbEntry=switchBridgeTpFdbEntry, switchBridgeTpFdbPort=switchBridgeTpFdbPort, switchBridgeTpPortEntry=switchBridgeTpPortEntry, switchBridgeTrapsGroup=switchBridgeTrapsGroup, switchBridgeTpPortTable=switchBridgeTpPortTable, switchBridgeTpFdbStatus=switchBridgeTpFdbStatus, switchBridgeTpPortOutFrames=switchBridgeTpPortOutFrames, switchBridgeStpHelloTime=switchBridgeStpHelloTime, switchBridgeTpFdbTable=switchBridgeTpFdbTable, switchBridgeBaseEntry=switchBridgeBaseEntry, switchBridgeBasePortIfIndex=switchBridgeBasePortIfIndex, switchBridgeStpTimeSinceTopologyChange=switchBridgeStpTimeSinceTopologyChange, switchBridgeBasePortEntry=switchBridgeBasePortEntry, switchBridgeStpTable=switchBridgeStpTable, switchBridgeBasePortCircuit=switchBridgeBasePortCircuit, switchNewRoot=switchNewRoot, switchBridgeStpEntry=switchBridgeStpEntry, switchBridgeStpPortPathCost=switchBridgeStpPortPathCost, switchBridgeBaseAddress=switchBridgeBaseAddress, switchBridgeTpLearnedEntryDiscards=switchBridgeTpLearnedEntryDiscards, switchBridgeBasePortTable=switchBridgeBasePortTable, switchBridgeStpPortDesignatedCost=switchBridgeStpPortDesignatedCost, switchBridgeTpPortInFrames=switchBridgeTpPortInFrames, Timeout=Timeout, switchBridgeStpHoldTime=switchBridgeStpHoldTime, switchBridgeStpPortPriority=switchBridgeStpPortPriority, switchBridgeTpAgingTime=switchBridgeTpAgingTime, switchBridgeStpPortDesignatedPort=switchBridgeStpPortDesignatedPort, switchBridgeTpFdbAddress=switchBridgeTpFdbAddress, BridgeId=BridgeId, switchBridgeMib=switchBridgeMib, switchBridgeTraps=switchBridgeTraps, switchBridgeBasePortDelayExceededDiscards=switchBridgeBasePortDelayExceededDiscards, switchBridgeSr=switchBridgeSr, switchBridgeStaticAllowedToGoTo=switchBridgeStaticAllowedToGoTo, switchBridgeBase=switchBridgeBase, switchBridgeStpMaxAge=switchBridgeStpMaxAge, switchBridgeStpPort=switchBridgeStpPort, switchTopologyChange=switchTopologyChange, switchBridgeStpRootPort=switchBridgeStpRootPort, switchBridgeBaseType=switchBridgeBaseType)
