#
# PySNMP MIB module LANPLEX-OPT-FDDI-MIB-1-2-2 (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/LANPLEX-OPT-FDDI-MIB-1-2-2
# Produced by pysmi-0.3.4 at Mon Apr 29 19:55:14 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, Integer, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "OctetString", "Integer", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsUnion, ConstraintsIntersection, SingleValueConstraint, ValueSizeConstraint, ValueRangeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsUnion", "ConstraintsIntersection", "SingleValueConstraint", "ValueSizeConstraint", "ValueRangeConstraint")
fddimibMACUpstreamNbr, fddimibSMTPeerWrapFlag, fddimibMACNotCopiedCts, fddimibPORTRequestedPaths, fddimibMACFrameErrorFlag, fddimibPORTNeighborType, fddimibMACFrameCts, fddimibPORTLemCts, fddimibPORTCurrentPath, fddimibMACCopiedCts, fddimibMACCurrentPath, FddiTimeNano, fddimibMACFrameErrorRatio, fddimibPORTPCWithhold, fddimibPORTLerFlag, fddimibPORTConnectState, fddimibMACNotCopiedRatio, fddimibMACOldDownstreamNbr, fddimibMACLostCts, fddimibMACAvailablePaths, fddimibMACNotCopiedFlag, fddimibSMTStationId, fddimibMACDaFlag, fddimibMACUnaDaFlag, fddimibPORTLemRejectCts, fddimibPORTLerCutoff, fddimibPORTMyType, FddiSMTStationIdType, fddimibMACRequestedPaths, fddimibPORTLerEstimate, fddimibPORTAvailablePaths, fddimibMACErrorCts, fddimibMACOldUpstreamNbr, fddimibSMTCFState, fddimibMACDownstreamNbr, fddimibMACSMTAddress, fddimibPORTLerAlarm = mibBuilder.importSymbols("FDDI-SMT73-MIB", "fddimibMACUpstreamNbr", "fddimibSMTPeerWrapFlag", "fddimibMACNotCopiedCts", "fddimibPORTRequestedPaths", "fddimibMACFrameErrorFlag", "fddimibPORTNeighborType", "fddimibMACFrameCts", "fddimibPORTLemCts", "fddimibPORTCurrentPath", "fddimibMACCopiedCts", "fddimibMACCurrentPath", "FddiTimeNano", "fddimibMACFrameErrorRatio", "fddimibPORTPCWithhold", "fddimibPORTLerFlag", "fddimibPORTConnectState", "fddimibMACNotCopiedRatio", "fddimibMACOldDownstreamNbr", "fddimibMACLostCts", "fddimibMACAvailablePaths", "fddimibMACNotCopiedFlag", "fddimibSMTStationId", "fddimibMACDaFlag", "fddimibMACUnaDaFlag", "fddimibPORTLemRejectCts", "fddimibPORTLerCutoff", "fddimibPORTMyType", "FddiSMTStationIdType", "fddimibMACRequestedPaths", "fddimibPORTLerEstimate", "fddimibPORTAvailablePaths", "fddimibMACErrorCts", "fddimibMACOldUpstreamNbr", "fddimibSMTCFState", "fddimibMACDownstreamNbr", "fddimibMACSMTAddress", "fddimibPORTLerAlarm")
lanplex, = mibBuilder.importSymbols("LANPLEX-SYSTEMS-MIB-1-2-2", "lanplex")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
Bits, NotificationType, Integer32, Gauge32, TimeTicks, Counter32, MibScalar, MibTable, MibTableRow, MibTableColumn, NotificationType, IpAddress, Counter64, ObjectIdentity, Unsigned32, MibIdentifier, ModuleIdentity, iso = mibBuilder.importSymbols("SNMPv2-SMI", "Bits", "NotificationType", "Integer32", "Gauge32", "TimeTicks", "Counter32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "NotificationType", "IpAddress", "Counter64", "ObjectIdentity", "Unsigned32", "MibIdentifier", "ModuleIdentity", "iso")
TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString")
lanplexOptFddi = MibIdentifier((1, 3, 6, 1, 4, 1, 114, 1, 10))
lpOptSMT = MibIdentifier((1, 3, 6, 1, 4, 1, 114, 1, 10, 1))
lpOptMAC = MibIdentifier((1, 3, 6, 1, 4, 1, 114, 1, 10, 2))
lpOptPATH = MibIdentifier((1, 3, 6, 1, 4, 1, 114, 1, 10, 3))
lpOptPORT = MibIdentifier((1, 3, 6, 1, 4, 1, 114, 1, 10, 4))
lpOptSMTTable = MibTable((1, 3, 6, 1, 4, 1, 114, 1, 10, 1, 1), )
if mibBuilder.loadTexts: lpOptSMTTable.setStatus('mandatory')
lpOptSMTEntry = MibTableRow((1, 3, 6, 1, 4, 1, 114, 1, 10, 1, 1, 1), ).setIndexNames((0, "LANPLEX-OPT-FDDI-MIB-1-2-2", "lpOptSMTIndex"))
if mibBuilder.loadTexts: lpOptSMTEntry.setStatus('mandatory')
lpOptSMTIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 114, 1, 10, 1, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpOptSMTIndex.setStatus('mandatory')
lpOptSMTManufacturerOUI = MibTableColumn((1, 3, 6, 1, 4, 1, 114, 1, 10, 1, 1, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(3, 3)).setFixedLength(3)).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpOptSMTManufacturerOUI.setStatus('mandatory')
lpOptSMTManufacturerData = MibTableColumn((1, 3, 6, 1, 4, 1, 114, 1, 10, 1, 1, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(29, 29)).setFixedLength(29)).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpOptSMTManufacturerData.setStatus('mandatory')
lpOptSMTHoldState = MibTableColumn((1, 3, 6, 1, 4, 1, 114, 1, 10, 1, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("not-implemented", 1), ("not-holding", 2), ("holding-prm", 3), ("holding-sec", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpOptSMTHoldState.setStatus('mandatory')
lpOptSMTSetCount = MibTableColumn((1, 3, 6, 1, 4, 1, 114, 1, 10, 1, 1, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpOptSMTSetCount.setStatus('mandatory')
lpOptSMTLastSetStationId = MibTableColumn((1, 3, 6, 1, 4, 1, 114, 1, 10, 1, 1, 1, 6), FddiSMTStationIdType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpOptSMTLastSetStationId.setStatus('mandatory')
lpOptMACBridgeFunctionTable = MibTable((1, 3, 6, 1, 4, 1, 114, 1, 10, 2, 1), )
if mibBuilder.loadTexts: lpOptMACBridgeFunctionTable.setStatus('mandatory')
lpOptMACBridgeFunctionEntry = MibTableRow((1, 3, 6, 1, 4, 1, 114, 1, 10, 2, 1, 1), ).setIndexNames((0, "LANPLEX-OPT-FDDI-MIB-1-2-2", "lpOptMACBridgeFunctionSMTIndex"), (0, "LANPLEX-OPT-FDDI-MIB-1-2-2", "lpOptMACBridgeFunctionMACIndex"))
if mibBuilder.loadTexts: lpOptMACBridgeFunctionEntry.setStatus('mandatory')
lpOptMACBridgeFunctionSMTIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 114, 1, 10, 2, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpOptMACBridgeFunctionSMTIndex.setStatus('mandatory')
lpOptMACBridgeFunctionMACIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 114, 1, 10, 2, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpOptMACBridgeFunctionMACIndex.setStatus('mandatory')
lpOptMACBridgeFunctions = MibTableColumn((1, 3, 6, 1, 4, 1, 114, 1, 10, 2, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 7))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpOptMACBridgeFunctions.setStatus('mandatory')
lpOptMACTPriTable = MibTable((1, 3, 6, 1, 4, 1, 114, 1, 10, 2, 2), )
if mibBuilder.loadTexts: lpOptMACTPriTable.setStatus('mandatory')
lpOptMACTPriEntry = MibTableRow((1, 3, 6, 1, 4, 1, 114, 1, 10, 2, 2, 1), ).setIndexNames((0, "LANPLEX-OPT-FDDI-MIB-1-2-2", "lpOptMACTPriSMTIndex"), (0, "LANPLEX-OPT-FDDI-MIB-1-2-2", "lpOptMACTPriMACIndex"))
if mibBuilder.loadTexts: lpOptMACTPriEntry.setStatus('mandatory')
lpOptMACTPriSMTIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 114, 1, 10, 2, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpOptMACTPriSMTIndex.setStatus('mandatory')
lpOptMACTPriMACIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 114, 1, 10, 2, 2, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpOptMACTPriMACIndex.setStatus('mandatory')
lpOptMACTPri0 = MibTableColumn((1, 3, 6, 1, 4, 1, 114, 1, 10, 2, 2, 1, 3), FddiTimeNano()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpOptMACTPri0.setStatus('mandatory')
lpOptMACTPri1 = MibTableColumn((1, 3, 6, 1, 4, 1, 114, 1, 10, 2, 2, 1, 4), FddiTimeNano()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpOptMACTPri1.setStatus('mandatory')
lpOptMACTPri2 = MibTableColumn((1, 3, 6, 1, 4, 1, 114, 1, 10, 2, 2, 1, 5), FddiTimeNano()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpOptMACTPri2.setStatus('mandatory')
lpOptMACTPri3 = MibTableColumn((1, 3, 6, 1, 4, 1, 114, 1, 10, 2, 2, 1, 6), FddiTimeNano()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpOptMACTPri3.setStatus('mandatory')
lpOptMACTPri4 = MibTableColumn((1, 3, 6, 1, 4, 1, 114, 1, 10, 2, 2, 1, 7), FddiTimeNano()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpOptMACTPri4.setStatus('mandatory')
lpOptMACTPri5 = MibTableColumn((1, 3, 6, 1, 4, 1, 114, 1, 10, 2, 2, 1, 8), FddiTimeNano()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpOptMACTPri5.setStatus('mandatory')
lpOptMACTPri6 = MibTableColumn((1, 3, 6, 1, 4, 1, 114, 1, 10, 2, 2, 1, 9), FddiTimeNano()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpOptMACTPri6.setStatus('mandatory')
lpOptPATHRingTable = MibTable((1, 3, 6, 1, 4, 1, 114, 1, 10, 3, 1), )
if mibBuilder.loadTexts: lpOptPATHRingTable.setStatus('mandatory')
lpOptPATHRingEntry = MibTableRow((1, 3, 6, 1, 4, 1, 114, 1, 10, 3, 1, 1), ).setIndexNames((0, "LANPLEX-OPT-FDDI-MIB-1-2-2", "lpOptPATHRingSMTIndex"), (0, "LANPLEX-OPT-FDDI-MIB-1-2-2", "lpOptPATHRingPATHIndex"))
if mibBuilder.loadTexts: lpOptPATHRingEntry.setStatus('mandatory')
lpOptPATHRingSMTIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 114, 1, 10, 3, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpOptPATHRingSMTIndex.setStatus('mandatory')
lpOptPATHRingPATHIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 114, 1, 10, 3, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpOptPATHRingPATHIndex.setStatus('mandatory')
lpOptPATHRingLatency = MibTableColumn((1, 3, 6, 1, 4, 1, 114, 1, 10, 3, 1, 1, 3), FddiTimeNano()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lpOptPATHRingLatency.setStatus('mandatory')
lpOptPATHTraceStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 114, 1, 10, 3, 1, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 15))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpOptPATHTraceStatus.setStatus('mandatory')
lpOptPATHT_Rmode = MibScalar((1, 3, 6, 1, 4, 1, 114, 1, 10, 3, 1, 1, 5), FddiTimeNano()).setLabel("lpOptPATHT-Rmode").setMaxAccess("readwrite")
if mibBuilder.loadTexts: lpOptPATHT_Rmode.setStatus('mandatory')
lpOptPATHSbaTable = MibTable((1, 3, 6, 1, 4, 1, 114, 1, 10, 3, 2), )
if mibBuilder.loadTexts: lpOptPATHSbaTable.setStatus('mandatory')
lpOptPATHSbaEntry = MibTableRow((1, 3, 6, 1, 4, 1, 114, 1, 10, 3, 2, 1), ).setIndexNames((0, "LANPLEX-OPT-FDDI-MIB-1-2-2", "lpOptPATHSbaSMTIndex"), (0, "LANPLEX-OPT-FDDI-MIB-1-2-2", "lpOptPATHSbaPATHIndex"))
if mibBuilder.loadTexts: lpOptPATHSbaEntry.setStatus('mandatory')
lpOptPATHSbaSMTIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 114, 1, 10, 3, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpOptPATHSbaSMTIndex.setStatus('mandatory')
lpOptPATHSbaPATHIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 114, 1, 10, 3, 2, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpOptPATHSbaPATHIndex.setStatus('mandatory')
lpOptPATHSbaPayload = MibTableColumn((1, 3, 6, 1, 4, 1, 114, 1, 10, 3, 2, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1562))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lpOptPATHSbaPayload.setStatus('mandatory')
lpOptPATHSbaOverhead = MibTableColumn((1, 3, 6, 1, 4, 1, 114, 1, 10, 3, 2, 1, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lpOptPATHSbaOverhead.setStatus('mandatory')
lpOptPATHSbaAvailable = MibTableColumn((1, 3, 6, 1, 4, 1, 114, 1, 10, 3, 2, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 12500000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lpOptPATHSbaAvailable.setStatus('mandatory')
lpOptPORTTable = MibTable((1, 3, 6, 1, 4, 1, 114, 1, 10, 4, 1), )
if mibBuilder.loadTexts: lpOptPORTTable.setStatus('mandatory')
lpOptPORTEntry = MibTableRow((1, 3, 6, 1, 4, 1, 114, 1, 10, 4, 1, 1), ).setIndexNames((0, "LANPLEX-OPT-FDDI-MIB-1-2-2", "lpOptPORTSMTIndex"), (0, "LANPLEX-OPT-FDDI-MIB-1-2-2", "lpOptPORTIndex"))
if mibBuilder.loadTexts: lpOptPORTEntry.setStatus('mandatory')
lpOptPORTSMTIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 114, 1, 10, 4, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpOptPORTSMTIndex.setStatus('mandatory')
lpOptPORTIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 114, 1, 10, 4, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpOptPORTIndex.setStatus('mandatory')
lpOptPORTMACLoopTime = MibTableColumn((1, 3, 6, 1, 4, 1, 114, 1, 10, 4, 1, 1, 3), FddiTimeNano()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lpOptPORTMACLoopTime.setStatus('mandatory')
lpOptPORTEBErrorCt = MibTableColumn((1, 3, 6, 1, 4, 1, 114, 1, 10, 4, 1, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpOptPORTEBErrorCt.setStatus('mandatory')
lpOptPORTLSTable = MibTable((1, 3, 6, 1, 4, 1, 114, 1, 10, 4, 2), )
if mibBuilder.loadTexts: lpOptPORTLSTable.setStatus('mandatory')
lpOptPORTLSEntry = MibTableRow((1, 3, 6, 1, 4, 1, 114, 1, 10, 4, 2, 1), ).setIndexNames((0, "LANPLEX-OPT-FDDI-MIB-1-2-2", "lpOptPORTLSSMTIndex"), (0, "LANPLEX-OPT-FDDI-MIB-1-2-2", "lpOptPORTLSPORTIndex"))
if mibBuilder.loadTexts: lpOptPORTLSEntry.setStatus('mandatory')
lpOptPORTLSSMTIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 114, 1, 10, 4, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpOptPORTLSSMTIndex.setStatus('mandatory')
lpOptPORTLSPORTIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 114, 1, 10, 4, 2, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpOptPORTLSPORTIndex.setStatus('mandatory')
lpOptPORTMaintLS = MibTableColumn((1, 3, 6, 1, 4, 1, 114, 1, 10, 4, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("quiet", 1), ("idle", 2), ("master", 3), ("halt", 4), ("receive-active", 5), ("receive-unknown", 6), ("receive-noise", 7)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lpOptPORTMaintLS.setStatus('mandatory')
lpOptPORTPCLS = MibTableColumn((1, 3, 6, 1, 4, 1, 114, 1, 10, 4, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("quiet", 1), ("idle", 2), ("master", 3), ("halt", 4), ("receive-active", 5), ("receive-unknown", 6), ("receive-noise", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpOptPORTPCLS.setStatus('mandatory')
lpOptSMTHoldCondition = NotificationType((1, 3, 6, 1, 4, 1, 114, 1, 10) + (0,1)).setObjects(("FDDI-SMT73-MIB", "fddimibSMTStationId"), ("LANPLEX-OPT-FDDI-MIB-1-2-2", "lpOptSMTHoldState"))
lpOptSMTPeerWrapCondition = NotificationType((1, 3, 6, 1, 4, 1, 114, 1, 10) + (0,2)).setObjects(("FDDI-SMT73-MIB", "fddimibSMTStationId"), ("FDDI-SMT73-MIB", "fddimibSMTCFState"), ("FDDI-SMT73-MIB", "fddimibSMTPeerWrapFlag"))
lpOptMACDuplicateAddressCondition = NotificationType((1, 3, 6, 1, 4, 1, 114, 1, 10) + (0,3)).setObjects(("FDDI-SMT73-MIB", "fddimibSMTStationId"), ("FDDI-SMT73-MIB", "fddimibMACSMTAddress"), ("FDDI-SMT73-MIB", "fddimibMACUpstreamNbr"), ("FDDI-SMT73-MIB", "fddimibMACDaFlag"), ("FDDI-SMT73-MIB", "fddimibMACUnaDaFlag"))
lpOptMACFrameErrorCondition = NotificationType((1, 3, 6, 1, 4, 1, 114, 1, 10) + (0,4)).setObjects(("FDDI-SMT73-MIB", "fddimibSMTStationId"), ("FDDI-SMT73-MIB", "fddimibMACFrameErrorFlag"), ("FDDI-SMT73-MIB", "fddimibMACFrameCts"), ("FDDI-SMT73-MIB", "fddimibMACErrorCts"), ("FDDI-SMT73-MIB", "fddimibMACLostCts"), ("FDDI-SMT73-MIB", "fddimibMACFrameErrorRatio"))
lpOptMACNotCopiedCondition = NotificationType((1, 3, 6, 1, 4, 1, 114, 1, 10) + (0,5)).setObjects(("FDDI-SMT73-MIB", "fddimibSMTStationId"), ("FDDI-SMT73-MIB", "fddimibMACNotCopiedCts"), ("FDDI-SMT73-MIB", "fddimibMACCopiedCts"), ("FDDI-SMT73-MIB", "fddimibMACNotCopiedRatio"), ("FDDI-SMT73-MIB", "fddimibMACNotCopiedFlag"))
lpOptMACNeighborChangeEvent = NotificationType((1, 3, 6, 1, 4, 1, 114, 1, 10) + (0,6)).setObjects(("FDDI-SMT73-MIB", "fddimibSMTStationId"), ("FDDI-SMT73-MIB", "fddimibMACUpstreamNbr"), ("FDDI-SMT73-MIB", "fddimibMACOldUpstreamNbr"), ("FDDI-SMT73-MIB", "fddimibMACDownstreamNbr"), ("FDDI-SMT73-MIB", "fddimibMACOldDownstreamNbr"), ("FDDI-SMT73-MIB", "fddimibMACCurrentPath"), ("FDDI-SMT73-MIB", "fddimibMACSMTAddress"))
lpOptMACPathChangeEvent = NotificationType((1, 3, 6, 1, 4, 1, 114, 1, 10) + (0,7)).setObjects(("FDDI-SMT73-MIB", "fddimibSMTStationId"), ("FDDI-SMT73-MIB", "fddimibMACAvailablePaths"), ("FDDI-SMT73-MIB", "fddimibMACCurrentPath"), ("FDDI-SMT73-MIB", "fddimibMACRequestedPaths"))
lpOptPORTLerCondition = NotificationType((1, 3, 6, 1, 4, 1, 114, 1, 10) + (0,8)).setObjects(("FDDI-SMT73-MIB", "fddimibSMTStationId"), ("FDDI-SMT73-MIB", "fddimibPORTLerCutoff"), ("FDDI-SMT73-MIB", "fddimibPORTLerAlarm"), ("FDDI-SMT73-MIB", "fddimibPORTLerEstimate"), ("FDDI-SMT73-MIB", "fddimibPORTLemRejectCts"), ("FDDI-SMT73-MIB", "fddimibPORTLemCts"), ("FDDI-SMT73-MIB", "fddimibPORTLerFlag"))
lpOptPORTUndesiredConnAttemptEvent = NotificationType((1, 3, 6, 1, 4, 1, 114, 1, 10) + (0,9)).setObjects(("FDDI-SMT73-MIB", "fddimibSMTStationId"), ("FDDI-SMT73-MIB", "fddimibPORTMyType"), ("FDDI-SMT73-MIB", "fddimibPORTConnectState"), ("FDDI-SMT73-MIB", "fddimibPORTNeighborType"), ("FDDI-SMT73-MIB", "fddimibPORTPCWithhold"))
lpOptPORTEBErrorCondition = NotificationType((1, 3, 6, 1, 4, 1, 114, 1, 10) + (0,10)).setObjects(("FDDI-SMT73-MIB", "fddimibSMTStationId"), ("LANPLEX-OPT-FDDI-MIB-1-2-2", "lpOptPORTEBErrorCt"))
lpOptPORTPathChangeEvent = NotificationType((1, 3, 6, 1, 4, 1, 114, 1, 10) + (0,11)).setObjects(("FDDI-SMT73-MIB", "fddimibSMTStationId"), ("FDDI-SMT73-MIB", "fddimibPORTAvailablePaths"), ("FDDI-SMT73-MIB", "fddimibPORTCurrentPath"), ("FDDI-SMT73-MIB", "fddimibPORTRequestedPaths"), ("FDDI-SMT73-MIB", "fddimibPORTMyType"), ("FDDI-SMT73-MIB", "fddimibPORTNeighborType"))
mibBuilder.exportSymbols("LANPLEX-OPT-FDDI-MIB-1-2-2", lpOptPORTIndex=lpOptPORTIndex, lpOptPORT=lpOptPORT, lpOptSMTTable=lpOptSMTTable, lpOptMAC=lpOptMAC, lpOptPATHRingSMTIndex=lpOptPATHRingSMTIndex, lanplexOptFddi=lanplexOptFddi, lpOptPATHSbaSMTIndex=lpOptPATHSbaSMTIndex, lpOptPATHSbaPATHIndex=lpOptPATHSbaPATHIndex, lpOptSMTHoldCondition=lpOptSMTHoldCondition, lpOptMACDuplicateAddressCondition=lpOptMACDuplicateAddressCondition, lpOptMACTPri5=lpOptMACTPri5, lpOptMACTPriEntry=lpOptMACTPriEntry, lpOptMACFrameErrorCondition=lpOptMACFrameErrorCondition, lpOptMACTPri6=lpOptMACTPri6, lpOptSMTManufacturerOUI=lpOptSMTManufacturerOUI, lpOptPATHRingTable=lpOptPATHRingTable, lpOptSMTSetCount=lpOptSMTSetCount, lpOptMACBridgeFunctions=lpOptMACBridgeFunctions, lpOptMACTPri1=lpOptMACTPri1, lpOptSMTEntry=lpOptSMTEntry, lpOptPORTEntry=lpOptPORTEntry, lpOptPORTLSSMTIndex=lpOptPORTLSSMTIndex, lpOptPORTLerCondition=lpOptPORTLerCondition, lpOptMACTPri2=lpOptMACTPri2, lpOptMACBridgeFunctionEntry=lpOptMACBridgeFunctionEntry, lpOptPORTMaintLS=lpOptPORTMaintLS, lpOptPORTPCLS=lpOptPORTPCLS, lpOptMACPathChangeEvent=lpOptMACPathChangeEvent, lpOptMACTPriMACIndex=lpOptMACTPriMACIndex, lpOptPORTLSPORTIndex=lpOptPORTLSPORTIndex, lpOptMACTPri3=lpOptMACTPri3, lpOptPORTLSEntry=lpOptPORTLSEntry, lpOptPORTEBErrorCondition=lpOptPORTEBErrorCondition, lpOptPATHSbaTable=lpOptPATHSbaTable, lpOptPATHSbaAvailable=lpOptPATHSbaAvailable, lpOptSMTLastSetStationId=lpOptSMTLastSetStationId, lpOptPATHRingPATHIndex=lpOptPATHRingPATHIndex, lpOptPORTUndesiredConnAttemptEvent=lpOptPORTUndesiredConnAttemptEvent, lpOptPORTEBErrorCt=lpOptPORTEBErrorCt, lpOptSMTManufacturerData=lpOptSMTManufacturerData, lpOptPATHT_Rmode=lpOptPATHT_Rmode, lpOptPORTSMTIndex=lpOptPORTSMTIndex, lpOptMACTPri4=lpOptMACTPri4, lpOptPATHSbaOverhead=lpOptPATHSbaOverhead, lpOptMACTPri0=lpOptMACTPri0, lpOptPATHRingLatency=lpOptPATHRingLatency, lpOptSMTPeerWrapCondition=lpOptSMTPeerWrapCondition, lpOptMACNotCopiedCondition=lpOptMACNotCopiedCondition, lpOptMACBridgeFunctionSMTIndex=lpOptMACBridgeFunctionSMTIndex, lpOptPATH=lpOptPATH, lpOptSMTIndex=lpOptSMTIndex, lpOptMACTPriTable=lpOptMACTPriTable, lpOptMACTPriSMTIndex=lpOptMACTPriSMTIndex, lpOptPORTMACLoopTime=lpOptPORTMACLoopTime, lpOptPORTLSTable=lpOptPORTLSTable, lpOptPORTPathChangeEvent=lpOptPORTPathChangeEvent, lpOptSMTHoldState=lpOptSMTHoldState, lpOptMACBridgeFunctionTable=lpOptMACBridgeFunctionTable, lpOptMACBridgeFunctionMACIndex=lpOptMACBridgeFunctionMACIndex, lpOptPATHRingEntry=lpOptPATHRingEntry, lpOptPATHSbaPayload=lpOptPATHSbaPayload, lpOptSMT=lpOptSMT, lpOptMACNeighborChangeEvent=lpOptMACNeighborChangeEvent, lpOptPATHSbaEntry=lpOptPATHSbaEntry, lpOptPATHTraceStatus=lpOptPATHTraceStatus, lpOptPORTTable=lpOptPORTTable)
