#
# PySNMP MIB module DES-1210-52-CX (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/DES-1210-52-CX
# Produced by pysmi-0.3.4 at Mon Apr 29 18:23:46 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, ObjectIdentifier, Integer = mibBuilder.importSymbols("ASN1", "OctetString", "ObjectIdentifier", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsIntersection, ConstraintsUnion, ValueSizeConstraint, SingleValueConstraint, ValueRangeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsIntersection", "ConstraintsUnion", "ValueSizeConstraint", "SingleValueConstraint", "ValueRangeConstraint")
dot1dBridge, dot1dBasePort, dot1dBasePortEntry = mibBuilder.importSymbols("BRIDGE-MIB", "dot1dBridge", "dot1dBasePort", "dot1dBasePortEntry")
AddressFamilyNumbers, = mibBuilder.importSymbols("IANA-ADDRESS-FAMILY-NUMBERS-MIB", "AddressFamilyNumbers")
InterfaceIndexOrZero, InterfaceIndex, ifIndex = mibBuilder.importSymbols("IF-MIB", "InterfaceIndexOrZero", "InterfaceIndex", "ifIndex")
InetAddress, = mibBuilder.importSymbols("INET-ADDRESS-MIB", "InetAddress")
SnmpEngineID, SnmpSecurityLevel, SnmpAdminString = mibBuilder.importSymbols("SNMP-FRAMEWORK-MIB", "SnmpEngineID", "SnmpSecurityLevel", "SnmpAdminString")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
iso, ModuleIdentity, MibScalar, MibTable, MibTableRow, MibTableColumn, IpAddress, Counter64, enterprises, Unsigned32, Bits, Gauge32, ObjectIdentity, Counter32, MibIdentifier, TimeTicks, Integer32, NotificationType = mibBuilder.importSymbols("SNMPv2-SMI", "iso", "ModuleIdentity", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "IpAddress", "Counter64", "enterprises", "Unsigned32", "Bits", "Gauge32", "ObjectIdentity", "Counter32", "MibIdentifier", "TimeTicks", "Integer32", "NotificationType")
DisplayString, TextualConvention, TruthValue, MacAddress, RowStatus = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention", "TruthValue", "MacAddress", "RowStatus")
dlink = MibIdentifier((1, 3, 6, 1, 4, 1, 171))
dlink_products = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10)).setLabel("dlink-products")
dlink_DES1210SeriesProd = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 75)).setLabel("dlink-DES1210SeriesProd")
des_1210_52 = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 75, 20)).setLabel("des-1210-52")
des_1210_52_cx = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 75, 20, 1)).setLabel("des-1210-52-cx")
class VlanIndex(TextualConvention, Unsigned32):
    status = 'current'

class PortList(TextualConvention, OctetString):
    status = 'current'

class BridgeId(TextualConvention, OctetString):
    status = 'current'
    subtypeSpec = OctetString.subtypeSpec + ValueSizeConstraint(8, 8)
    fixedLength = 8

class Timeout(TextualConvention, Integer32):
    status = 'current'
    displayHint = 'd4'

class RmonStatus(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))
    namedValues = NamedValues(("valid", 1), ("createRequest", 2), ("underCreation", 3), ("invalid", 4))

class LldpManAddress(TextualConvention, OctetString):
    status = 'current'
    subtypeSpec = OctetString.subtypeSpec + ValueSizeConstraint(1, 31)

class Ipv6Address(TextualConvention, OctetString):
    status = 'current'
    displayHint = '2x:'
    subtypeSpec = OctetString.subtypeSpec + ValueSizeConstraint(16, 16)
    fixedLength = 16

companySystem = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 75, 20, 1, 1))
companyIpifGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 75, 20, 1, 2))
companyTftpGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 75, 20, 1, 3))
companyMiscGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 75, 20, 1, 4))
companyRSTP = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 75, 20, 1, 6))
companyDot1qVlanGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 75, 20, 1, 7))
companyLA = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 75, 20, 1, 8))
companyStaticMAC = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 75, 20, 1, 9))
companyIgsGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 75, 20, 1, 10))
companyQoSGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 75, 20, 1, 12))
companyTrafficMgmt = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 75, 20, 1, 13))
companySecurity = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 75, 20, 1, 14))
companyACLGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 75, 20, 1, 15))
companySyslog = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 75, 20, 1, 16))
companyLBD = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 75, 20, 1, 17))
companyMirror = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 75, 20, 1, 18))
companySNTPSetting = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 75, 20, 1, 20))
companyVoiceVlan = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 75, 20, 1, 21))
companyAuthGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 75, 20, 1, 23))
companyLLDPSetting = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 75, 20, 1, 24))
companySNMPV3 = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 75, 20, 1, 25))
companyAutoSurveillanceVlan = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 75, 20, 1, 26))
companyTraps = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 75, 20, 1, 27))
companyMulticastFilter = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 75, 20, 1, 28))
companyGreenSetting = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 75, 20, 1, 31))
companyTimeRangeMgmt = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 75, 20, 1, 32))
companyStaticMcast = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 75, 20, 1, 35))
companyCableDiagnostic = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 75, 20, 1, 37))
companyRMON = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 75, 20, 1, 47))
companyNeighbor = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 75, 20, 1, 50))
companydot3azEEE = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 75, 20, 1, 52))
companyDHCPRelay = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 75, 20, 1, 61))
companyDHCPLocalRelay = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 75, 20, 1, 62))
companyDHCPv6Relay = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 75, 20, 1, 63))
companyMldsGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 75, 20, 1, 88))
companyDoSCtrl = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 75, 20, 1, 99))
sysSwitchName = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 75, 20, 1, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 20))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysSwitchName.setStatus('current')
sysHardwareVersion = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 75, 20, 1, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 15))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysHardwareVersion.setStatus('current')
sysFirmwareVersion = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 75, 20, 1, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 15))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysFirmwareVersion.setStatus('current')
sysLoginTimeoutInterval = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 75, 20, 1, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(3, 30)).clone(5)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysLoginTimeoutInterval.setStatus('current')
sysLocationName = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 75, 20, 1, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 20))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysLocationName.setStatus('current')
sysSystemPassword = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 75, 20, 1, 1, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 20))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysSystemPassword.setStatus('current')
sysSafeGuardEnable = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 75, 20, 1, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('enable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysSafeGuardEnable.setStatus('current')
sysRestart = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 75, 20, 1, 1, 9), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysRestart.setStatus('current')
sysSave = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 75, 20, 1, 1, 10), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysSave.setStatus('current')
sysJumboFrameEnable = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 75, 20, 1, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysJumboFrameEnable.setStatus('current')
sysPortCtrlTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 75, 20, 1, 1, 13), )
if mibBuilder.loadTexts: sysPortCtrlTable.setStatus('current')
sysPortCtrlEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 75, 20, 1, 1, 13, 1), ).setIndexNames((0, "DES-1210-52-CX", "sysPortCtrlIndex"))
if mibBuilder.loadTexts: sysPortCtrlEntry.setStatus('current')
sysPortCtrlIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 20, 1, 1, 13, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysPortCtrlIndex.setStatus('current')
sysPortCtrlSpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 20, 1, 1, 13, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("rate1000MFull", 1), ("rate100MFull", 2), ("rate100MHalf", 3), ("rate10MFull", 4), ("rate10MHalf", 5), ("auto", 6), ("disable", 7)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysPortCtrlSpeed.setStatus('current')
sysPortCtrlOperStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 20, 1, 1, 13, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("down", 1), ("rate1000MFull", 2), ("rate100MFull", 3), ("rate100MHalf", 4), ("rate10MFull", 5), ("rate10MHalf", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysPortCtrlOperStatus.setStatus('current')
sysPortCtrlMDI = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 20, 1, 1, 13, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("auto", 1), ("mdi", 2), ("mdix", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysPortCtrlMDI.setStatus('current')
sysPortCtrlFlowControl = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 20, 1, 1, 13, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysPortCtrlFlowControl.setStatus('current')
sysPortCtrlFlowControlOper = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 20, 1, 1, 13, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysPortCtrlFlowControlOper.setStatus('current')
sysPortCtrlType = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 20, 1, 1, 13, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("fastethernet", 1), ("gigabitethernet", 2), ("fiberwith100BaseSFPModule", 3), ("fiberwith1000BaseSFPModule", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysPortCtrlType.setStatus('current')
sysDhcpAutoConfiguration = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 75, 20, 1, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysDhcpAutoConfiguration.setStatus('current')
sysPortDescriptionTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 75, 20, 1, 1, 16), )
if mibBuilder.loadTexts: sysPortDescriptionTable.setStatus('current')
sysPortDescriptionEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 75, 20, 1, 1, 16, 1), ).setIndexNames((0, "DES-1210-52-CX", "sysPortDescIndex"))
if mibBuilder.loadTexts: sysPortDescriptionEntry.setStatus('current')
sysPortDescIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 20, 1, 1, 16, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysPortDescIndex.setStatus('current')
sysPortDescString = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 20, 1, 1, 16, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysPortDescString.setStatus('current')
sysDdp = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 75, 20, 1, 1, 30))
sysDdpGlobalOnOff = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 75, 20, 1, 1, 30, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysDdpGlobalOnOff.setStatus('current')
sysDdpGeneralReportOnOff = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 75, 20, 1, 1, 30, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysDdpGeneralReportOnOff.setStatus('current')
sysDdpGeneralReportTimer = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 75, 20, 1, 1, 30, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(30, 60, 90, 120))).clone(namedValues=NamedValues(("time30seconds", 30), ("time60seconds", 60), ("time90seconds", 90), ("time120seconds", 120)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysDdpGeneralReportTimer.setStatus('current')
sysDdpProtStatusTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 75, 20, 1, 1, 30, 4), )
if mibBuilder.loadTexts: sysDdpProtStatusTable.setStatus('current')
sysDdpProtStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 75, 20, 1, 1, 30, 4, 1), ).setIndexNames((0, "DES-1210-52-CX", "sysDdpProtStatusIndex"))
if mibBuilder.loadTexts: sysDdpProtStatusEntry.setStatus('current')
sysDdpProtStatusIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 20, 1, 1, 30, 4, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysDdpProtStatusIndex.setStatus('current')
sysDdpProtStatusControl = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 20, 1, 1, 30, 4, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysDdpProtStatusControl.setStatus('current')
sysDhcpRetryTimes = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 75, 20, 1, 1, 31), Integer32().subtype(subtypeSpec=ValueRangeConstraint(5, 120)).clone(7)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysDhcpRetryTimes.setStatus('current')
dot3azEEEset = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 75, 20, 1, 52, 1))
dot3azTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 75, 20, 1, 52, 1, 1), )
if mibBuilder.loadTexts: dot3azTable.setStatus('current')
dot3azEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 75, 20, 1, 52, 1, 1, 1), ).setIndexNames((0, "DES-1210-52-CX", "portD3Index"))
if mibBuilder.loadTexts: dot3azEntry.setStatus('current')
portD3Index = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 20, 1, 52, 1, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: portD3Index.setStatus('current')
portD3State = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 20, 1, 52, 1, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2), ("notsupported", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portD3State.setStatus('current')
dhcpOption12Status = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 75, 20, 1, 2, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dhcpOption12Status.setStatus('current')
dhcpOption12HostName = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 75, 20, 1, 2, 7), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dhcpOption12HostName.setStatus('current')
ipifSupportV4V6Info = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 75, 20, 1, 2, 5))
sysIpAddrCfgMode = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 75, 20, 1, 2, 5, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("manual", 1), ("dhcp", 2), ("bootp", 3))).clone('manual')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysIpAddrCfgMode.setStatus('current')
sysIpAddr = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 75, 20, 1, 2, 5, 2), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysIpAddr.setStatus('current')
sysIpSubnetMask = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 75, 20, 1, 2, 5, 3), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysIpSubnetMask.setStatus('current')
sysGateway = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 75, 20, 1, 2, 5, 4), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysGateway.setStatus('current')
ipifName = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 75, 20, 1, 2, 5, 5), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipifName.setStatus('current')
ipifv6GlobalStatus = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 75, 20, 1, 2, 5, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ipifv6GlobalStatus.setStatus('current')
ipifv6DHCPStatus = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 75, 20, 1, 2, 5, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ipifv6DHCPStatus.setStatus('current')
ipifv6AutolinkloStatus = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 75, 20, 1, 2, 5, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ipifv6AutolinkloStatus.setStatus('current')
ipifv6NSRetransmitTime = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 75, 20, 1, 2, 5, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 3600))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ipifv6NSRetransmitTime.setStatus('current')
ipifv6DefaultGateway = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 75, 20, 1, 2, 5, 11), Ipv6Address()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ipifv6DefaultGateway.setStatus('current')
ipifV6AddressTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 75, 20, 1, 2, 5, 12), )
if mibBuilder.loadTexts: ipifV6AddressTable.setStatus('current')
ipifV6AddressEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 75, 20, 1, 2, 5, 12, 1), ).setIndexNames((0, "DES-1210-52-CX", "ipifV6AddressMainIndex"), (0, "DES-1210-52-CX", "ipifV6AddressIpAddr"), (0, "DES-1210-52-CX", "ipifV6AddressIpPrefix"))
if mibBuilder.loadTexts: ipifV6AddressEntry.setStatus('current')
ipifV6AddressMainIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 20, 1, 2, 5, 12, 1, 1), InterfaceIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipifV6AddressMainIndex.setStatus('current')
ipifV6AddressIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 20, 1, 2, 5, 12, 1, 2), Ipv6Address().clone(hexValue="00000000")).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipifV6AddressIpAddr.setStatus('current')
ipifV6AddressIpPrefix = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 20, 1, 2, 5, 12, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipifV6AddressIpPrefix.setStatus('current')
ipifV6AddressIpType = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 20, 1, 2, 5, 12, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("unicast", 1), ("anycast", 2), ("linklocal", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipifV6AddressIpType.setStatus('current')
ipifV6AddressRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 20, 1, 2, 5, 12, 1, 5), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ipifV6AddressRowStatus.setStatus('current')
tftpFwTargetGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 75, 20, 1, 3, 9))
tftpFwTargetServerIpAddress = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 75, 20, 1, 3, 9, 1), Ipv6Address()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tftpFwTargetServerIpAddress.setStatus('current')
tftpFwTargetServerIpType = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 75, 20, 1, 3, 9, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("iPv4", 1), ("iPv6", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tftpFwTargetServerIpType.setStatus('current')
tftpFwTargetInterfaceName = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 75, 20, 1, 3, 9, 3), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tftpFwTargetInterfaceName.setStatus('current')
tftpFwTargetImageFileName = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 75, 20, 1, 3, 9, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 64))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tftpFwTargetImageFileName.setStatus('current')
tftpFwTargetTftpOperation = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 75, 20, 1, 3, 9, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("none", 0), ("download", 1), ("upload", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tftpFwTargetTftpOperation.setStatus('current')
tftpFwTargetTftpOperationStatus = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 75, 20, 1, 3, 9, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4))).clone(namedValues=NamedValues(("none", 0), ("success", 1), ("fail", 2), ("progressing", 3), ("transmit", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tftpFwTargetTftpOperationStatus.setStatus('current')
tftpCfgTargetGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 75, 20, 1, 3, 10))
tftpCfgTargetServerIpAddress = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 75, 20, 1, 3, 10, 1), Ipv6Address()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tftpCfgTargetServerIpAddress.setStatus('current')
tftpCfgTargetServerIpType = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 75, 20, 1, 3, 10, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("iPv4", 1), ("iPv6", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tftpCfgTargetServerIpType.setStatus('current')
tftpCfgTargetInterfaceName = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 75, 20, 1, 3, 10, 3), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tftpCfgTargetInterfaceName.setStatus('current')
tftpCfgTargetImageFileName = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 75, 20, 1, 3, 10, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 64))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tftpCfgTargetImageFileName.setStatus('current')
tftpCfgTargetTftpOperation = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 75, 20, 1, 3, 10, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("none", 0), ("download", 1), ("upload", 2), ("progressing", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tftpCfgTargetTftpOperation.setStatus('current')
tftpCfgTargetTftpOperationStatus = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 75, 20, 1, 3, 10, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("none", 0), ("success", 1), ("fail", 2), ("progressing", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tftpCfgTargetTftpOperationStatus.setStatus('current')
miscReset = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 75, 20, 1, 4, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("reset", 1), ("noop", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: miscReset.setStatus('current')
miscStatisticsReset = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 75, 20, 1, 4, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("reset", 1), ("noop", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: miscStatisticsReset.setStatus('current')
securityIpMacPortBinding = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 75, 20, 1, 14, 10))
impbSettingTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 75, 20, 1, 14, 10, 1), )
if mibBuilder.loadTexts: impbSettingTable.setStatus('current')
impbSettingEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 75, 20, 1, 14, 10, 1, 1), ).setIndexNames((0, "DES-1210-52-CX", "impbPortIndex"))
if mibBuilder.loadTexts: impbSettingEntry.setStatus('current')
impbPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 20, 1, 14, 10, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: impbPortIndex.setStatus('current')
impbPortState = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 20, 1, 14, 10, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: impbPortState.setStatus('current')
impbInsIpPacPortState = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 20, 1, 14, 10, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 0))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 0)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: impbInsIpPacPortState.setStatus('current')
impbDHCPPortState = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 20, 1, 14, 10, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: impbDHCPPortState.setStatus('current')
impbSmartTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 75, 20, 1, 14, 10, 2), )
if mibBuilder.loadTexts: impbSmartTable.setStatus('current')
impbSmartEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 75, 20, 1, 14, 10, 2, 1), ).setIndexNames((0, "DES-1210-52-CX", "impbSmartMacAddress"), (0, "DES-1210-52-CX", "impbSmartPort"), (0, "DES-1210-52-CX", "impbSmartIpAddress"))
if mibBuilder.loadTexts: impbSmartEntry.setStatus('current')
impbSmartMacAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 20, 1, 14, 10, 2, 1, 1), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: impbSmartMacAddress.setStatus('current')
impbSmartPort = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 20, 1, 14, 10, 2, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: impbSmartPort.setStatus('current')
impbSmartIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 20, 1, 14, 10, 2, 1, 3), DisplayString().clone(hexValue="00000000")).setMaxAccess("readonly")
if mibBuilder.loadTexts: impbSmartIpAddress.setStatus('current')
impbSmartVlanId = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 20, 1, 14, 10, 2, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: impbSmartVlanId.setStatus('current')
impbSmartBinding = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 20, 1, 14, 10, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: impbSmartBinding.setStatus('current')
impbWhiteListTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 75, 20, 1, 14, 10, 3), )
if mibBuilder.loadTexts: impbWhiteListTable.setStatus('current')
impbWhiteListEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 75, 20, 1, 14, 10, 3, 1), ).setIndexNames((0, "DES-1210-52-CX", "impbWhiteListIpAddress"), (0, "DES-1210-52-CX", "impbWhiteListMacAddress"))
if mibBuilder.loadTexts: impbWhiteListEntry.setStatus('current')
impbWhiteListIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 20, 1, 14, 10, 3, 1, 1), DisplayString().clone(hexValue="00000000")).setMaxAccess("readonly")
if mibBuilder.loadTexts: impbWhiteListIpAddress.setStatus('current')
impbWhiteListMacAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 20, 1, 14, 10, 3, 1, 2), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: impbWhiteListMacAddress.setStatus('current')
impbWhiteListPort = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 20, 1, 14, 10, 3, 1, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: impbWhiteListPort.setStatus('current')
impbWhiteListRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 20, 1, 14, 10, 3, 1, 4), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: impbWhiteListRowStatus.setStatus('current')
impbBlackListTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 75, 20, 1, 14, 10, 4), )
if mibBuilder.loadTexts: impbBlackListTable.setStatus('current')
impbBlackListEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 75, 20, 1, 14, 10, 4, 1), ).setIndexNames((0, "DES-1210-52-CX", "impbBlackListMacAddress"), (0, "DES-1210-52-CX", "impbBlackListVlanId"), (0, "DES-1210-52-CX", "impbBlackListPort"))
if mibBuilder.loadTexts: impbBlackListEntry.setStatus('current')
impbBlackListMacAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 20, 1, 14, 10, 4, 1, 1), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: impbBlackListMacAddress.setStatus('current')
impbBlackListVlanId = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 20, 1, 14, 10, 4, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: impbBlackListVlanId.setStatus('current')
impbBlackListPort = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 20, 1, 14, 10, 4, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: impbBlackListPort.setStatus('current')
impbBlackListIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 20, 1, 14, 10, 4, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: impbBlackListIpAddress.setStatus('current')
impbBlackListStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 20, 1, 14, 10, 4, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("nothing", 0), ("deleted", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: impbBlackListStatus.setStatus('current')
impbAutoScanIpAddressFrom = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 75, 20, 1, 14, 10, 5), Ipv6Address().clone(hexValue="00000000")).setMaxAccess("readwrite")
if mibBuilder.loadTexts: impbAutoScanIpAddressFrom.setStatus('current')
impbAutoScanIpAddressTo = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 75, 20, 1, 14, 10, 6), Ipv6Address().clone(hexValue="00000000")).setMaxAccess("readwrite")
if mibBuilder.loadTexts: impbAutoScanIpAddressTo.setStatus('current')
impbAutoScanStatus = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 75, 20, 1, 14, 10, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("nothing", 0), ("scan", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: impbAutoScanStatus.setStatus('current')
stpGlobal = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 75, 20, 1, 6, 1))
rstpStatus = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 75, 20, 1, 6, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rstpStatus.setStatus('current')
stpVersion = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 75, 20, 1, 6, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 2))).clone(namedValues=NamedValues(("stpCompatible", 0), ("rstp", 2))).clone('rstp')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: stpVersion.setStatus('current')
stpPriority = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 75, 20, 1, 6, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 61440))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: stpPriority.setStatus('current')
stpTxHoldCount = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 75, 20, 1, 6, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 10)).clone(6)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: stpTxHoldCount.setStatus('current')
stpProtocolSpecification = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 75, 20, 1, 6, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("unknown", 1), ("decLb100", 2), ("ieee8021d", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: stpProtocolSpecification.setStatus('current')
stpTimeSinceTopologyChange = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 75, 20, 1, 6, 1, 6), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stpTimeSinceTopologyChange.setStatus('current')
stpTopChanges = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 75, 20, 1, 6, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stpTopChanges.setStatus('current')
stpDesignatedRoot = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 75, 20, 1, 6, 1, 8), BridgeId()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stpDesignatedRoot.setStatus('current')
stpRootCost = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 75, 20, 1, 6, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stpRootCost.setStatus('current')
stpRootPort = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 75, 20, 1, 6, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stpRootPort.setStatus('current')
stpMaxAge = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 75, 20, 1, 6, 1, 11), Timeout()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stpMaxAge.setStatus('current')
stpHelloTime = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 75, 20, 1, 6, 1, 12), Timeout()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stpHelloTime.setStatus('current')
stpHoldTime = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 75, 20, 1, 6, 1, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stpHoldTime.setStatus('current')
stpForwardDelay = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 75, 20, 1, 6, 1, 14), Timeout()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stpForwardDelay.setStatus('current')
stpBridgeMaxAge = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 75, 20, 1, 6, 1, 15), Timeout().subtype(subtypeSpec=ValueRangeConstraint(600, 4000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: stpBridgeMaxAge.setStatus('current')
stpBridgeHelloTime = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 75, 20, 1, 6, 1, 16), Timeout().subtype(subtypeSpec=ValueRangeConstraint(100, 1000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: stpBridgeHelloTime.setStatus('current')
stpBridgeForwardDelay = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 75, 20, 1, 6, 1, 17), Timeout().subtype(subtypeSpec=ValueRangeConstraint(400, 3000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: stpBridgeForwardDelay.setStatus('current')
stpPortTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 75, 20, 1, 6, 2), )
if mibBuilder.loadTexts: stpPortTable.setStatus('current')
stpPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 75, 20, 1, 6, 2, 1), ).setIndexNames((0, "DES-1210-52-CX", "stpPort"))
if mibBuilder.loadTexts: stpPortEntry.setStatus('current')
stpPort = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 20, 1, 6, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: stpPort.setStatus('current')
stpPortPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 20, 1, 6, 2, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 240))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: stpPortPriority.setStatus('current')
stpPortState = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 20, 1, 6, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("disabled", 1), ("blocking", 2), ("listening", 3), ("learning", 4), ("forwarding", 5), ("broken", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: stpPortState.setStatus('current')
stpPortEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 20, 1, 6, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: stpPortEnable.setStatus('current')
stpAdminPortPathCost = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 20, 1, 6, 2, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 200000000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: stpAdminPortPathCost.setStatus('current')
stpPortPathCost = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 20, 1, 6, 2, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 200000000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: stpPortPathCost.setStatus('current')
stpPortDesignatedRoot = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 20, 1, 6, 2, 1, 7), BridgeId()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stpPortDesignatedRoot.setStatus('current')
stpPortDesignatedCost = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 20, 1, 6, 2, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stpPortDesignatedCost.setStatus('current')
stpPortDesignatedBridge = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 20, 1, 6, 2, 1, 9), BridgeId()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stpPortDesignatedBridge.setStatus('current')
stpPortDesignatedPort = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 20, 1, 6, 2, 1, 10), OctetString().subtype(subtypeSpec=ValueSizeConstraint(2, 2)).setFixedLength(2)).setMaxAccess("readonly")
if mibBuilder.loadTexts: stpPortDesignatedPort.setStatus('current')
stpPortForwardTransitions = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 20, 1, 6, 2, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stpPortForwardTransitions.setStatus('current')
stpPortProtocolMigration = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 20, 1, 6, 2, 1, 12), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: stpPortProtocolMigration.setStatus('current')
stpPortOperEdgePort = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 20, 1, 6, 2, 1, 13), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stpPortOperEdgePort.setStatus('current')
stpPortAdminPointToPoint = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 20, 1, 6, 2, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("forceTrue", 0), ("forceFalse", 1), ("auto", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: stpPortAdminPointToPoint.setStatus('current')
stpPortOperPointToPoint = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 20, 1, 6, 2, 1, 15), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stpPortOperPointToPoint.setStatus('current')
stpPortEdge = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 20, 1, 6, 2, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 0, 2))).clone(namedValues=NamedValues(("true", 1), ("false", 0), ("auto", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: stpPortEdge.setStatus('current')
stpPortRestrictedRole = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 20, 1, 6, 2, 1, 17), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: stpPortRestrictedRole.setStatus('current')
stpPortRestrictedTCN = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 20, 1, 6, 2, 1, 18), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: stpPortRestrictedTCN.setStatus('current')
staticMcastTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 75, 20, 1, 35, 1), )
if mibBuilder.loadTexts: staticMcastTable.setStatus('current')
staticMcastEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 75, 20, 1, 35, 1, 1), ).setIndexNames((0, "DES-1210-52-CX", "staticMcastVlanID"), (0, "DES-1210-52-CX", "staticMcastMac"), (0, "DES-1210-52-CX", "staticMcastEgressPorts"))
if mibBuilder.loadTexts: staticMcastEntry.setStatus('current')
staticMcastVlanID = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 20, 1, 35, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staticMcastVlanID.setStatus('current')
staticMcastMac = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 20, 1, 35, 1, 1, 2), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staticMcastMac.setStatus('current')
staticMcastEgressPorts = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 20, 1, 35, 1, 1, 3), PortList()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staticMcastEgressPorts.setStatus('current')
staticMcastStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 20, 1, 35, 1, 1, 4), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: staticMcastStatus.setStatus('current')
dot1qVlanManagementOnOff = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 75, 20, 1, 7, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dot1qVlanManagementOnOff.setStatus('current')
dot1qVlanManagementid = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 75, 20, 1, 7, 3), Integer32().clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dot1qVlanManagementid.setStatus('current')
dot1qVlanAsyOnOff = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 75, 20, 1, 7, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dot1qVlanAsyOnOff.setStatus('current')
dot1qVlanTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 75, 20, 1, 7, 6), )
if mibBuilder.loadTexts: dot1qVlanTable.setStatus('current')
dot1qVlanEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 75, 20, 1, 7, 6, 1), ).setIndexNames((0, "DES-1210-52-CX", "dot1qVlanName"))
if mibBuilder.loadTexts: dot1qVlanEntry.setStatus('current')
dot1qVlanName = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 20, 1, 7, 6, 1, 1), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: dot1qVlanName.setStatus('current')
dot1qVlanEgressPorts = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 20, 1, 7, 6, 1, 2), PortList()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: dot1qVlanEgressPorts.setStatus('current')
dot1qVlanUntaggedPorts = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 20, 1, 7, 6, 1, 4), PortList()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: dot1qVlanUntaggedPorts.setStatus('current')
dot1qVlanRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 20, 1, 7, 6, 1, 5), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: dot1qVlanRowStatus.setStatus('current')
dot1qVlanPortTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 75, 20, 1, 7, 7), )
if mibBuilder.loadTexts: dot1qVlanPortTable.setStatus('current')
dot1qVlanPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 75, 20, 1, 7, 7, 1), )
dot1dBasePortEntry.registerAugmentions(("DES-1210-52-CX", "dot1qVlanPortEntry"))
dot1qVlanPortEntry.setIndexNames(*dot1dBasePortEntry.getIndexNames())
if mibBuilder.loadTexts: dot1qVlanPortEntry.setStatus('current')
dot1qVlanPvid = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 20, 1, 7, 7, 1, 1), VlanIndex().clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dot1qVlanPvid.setStatus('current')
laSystem = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 75, 20, 1, 8, 1))
laPortControl = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 75, 20, 1, 8, 2))
class PortLaMode(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3))
    namedValues = NamedValues(("lacp", 1), ("static", 2), ("disable", 3))

class LacpKey(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ValueRangeConstraint(0, 65535)

laStatus = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 75, 20, 1, 8, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: laStatus.setStatus('current')
laPortChannelTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 75, 20, 1, 8, 1, 3), )
if mibBuilder.loadTexts: laPortChannelTable.setStatus('current')
laPortChannelEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 75, 20, 1, 8, 1, 3, 1), ).setIndexNames((0, "DES-1210-52-CX", "laPortChannelIfIndex"))
if mibBuilder.loadTexts: laPortChannelEntry.setStatus('current')
laPortChannelIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 20, 1, 8, 1, 3, 1, 1), InterfaceIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: laPortChannelIfIndex.setStatus('current')
laPortChannelMemberList = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 20, 1, 8, 1, 3, 1, 2), PortList()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: laPortChannelMemberList.setStatus('current')
laPortChannelMode = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 20, 1, 8, 1, 3, 1, 3), PortLaMode()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: laPortChannelMode.setStatus('current')
laPortControlTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 75, 20, 1, 8, 2, 1), )
if mibBuilder.loadTexts: laPortControlTable.setStatus('current')
laPortControlEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 75, 20, 1, 8, 2, 1, 1), ).setIndexNames((0, "DES-1210-52-CX", "laPortControlIndex"))
if mibBuilder.loadTexts: laPortControlEntry.setStatus('current')
laPortControlIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 20, 1, 8, 2, 1, 1, 1), InterfaceIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: laPortControlIndex.setStatus('current')
laPortActorActivity = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 20, 1, 8, 2, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("active", 1), ("passive", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: laPortActorActivity.setStatus('current')
laPortActorTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 20, 1, 8, 2, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("short", 1), ("long", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: laPortActorTimeout.setStatus('current')
staticDisableAutoLearn = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 75, 20, 1, 9, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("on", 1), ("off", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: staticDisableAutoLearn.setStatus('current')
staticAutoLearningList = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 75, 20, 1, 9, 2), PortList()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: staticAutoLearningList.setStatus('current')
staticTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 75, 20, 1, 9, 3), )
if mibBuilder.loadTexts: staticTable.setStatus('current')
staticEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 75, 20, 1, 9, 3, 1), ).setIndexNames((0, "DES-1210-52-CX", "staticVlanID"), (0, "DES-1210-52-CX", "staticMac"), (0, "DES-1210-52-CX", "staticPort"))
if mibBuilder.loadTexts: staticEntry.setStatus('current')
staticVlanID = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 20, 1, 9, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staticVlanID.setStatus('current')
staticMac = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 20, 1, 9, 3, 1, 2), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staticMac.setStatus('current')
staticPort = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 20, 1, 9, 3, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staticPort.setStatus('current')
staticStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 20, 1, 9, 3, 1, 4), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: staticStatus.setStatus('current')
igsSystem = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 75, 20, 1, 10, 1))
igsVlan = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 75, 20, 1, 10, 3))
igsStatus = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 75, 20, 1, 10, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone(2)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: igsStatus.setStatus('current')
igsRouterPortPurgeInterval = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 75, 20, 1, 10, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(60, 600)).clone(260)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: igsRouterPortPurgeInterval.setStatus('current')
igsHostPortPurgeInterval = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 75, 20, 1, 10, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(130, 153025)).clone(260)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: igsHostPortPurgeInterval.setStatus('current')
igsRobustnessValue = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 75, 20, 1, 10, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(2, 255)).clone(2)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: igsRobustnessValue.setStatus('current')
igsGrpQueryInterval = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 75, 20, 1, 10, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 25)).clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: igsGrpQueryInterval.setStatus('current')
igsQueryInterval = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 75, 20, 1, 10, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(60, 600)).clone(125)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: igsQueryInterval.setStatus('current')
igsQueryMaxResponseTime = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 75, 20, 1, 10, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(10, 25)).clone(10)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: igsQueryMaxResponseTime.setStatus('current')
igsReportToAllPort = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 75, 20, 1, 10, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone(2)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: igsReportToAllPort.setStatus('current')
igsVlanRouterTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 75, 20, 1, 10, 3, 3), )
if mibBuilder.loadTexts: igsVlanRouterTable.setStatus('current')
igsVlanRouterEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 75, 20, 1, 10, 3, 3, 1), ).setIndexNames((0, "DES-1210-52-CX", "igsVlanRouterVlanId"))
if mibBuilder.loadTexts: igsVlanRouterEntry.setStatus('current')
igsVlanRouterVlanId = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 20, 1, 10, 3, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4094))).setMaxAccess("readonly")
if mibBuilder.loadTexts: igsVlanRouterVlanId.setStatus('current')
igsVlanRouterPortList = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 20, 1, 10, 3, 3, 1, 2), PortList()).setMaxAccess("readonly")
if mibBuilder.loadTexts: igsVlanRouterPortList.setStatus('current')
igsVlanFilterTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 75, 20, 1, 10, 3, 4), )
if mibBuilder.loadTexts: igsVlanFilterTable.setStatus('current')
igsVlanFilterEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 75, 20, 1, 10, 3, 4, 1), ).setIndexNames((0, "DES-1210-52-CX", "igsVlanFilterVlanId"))
if mibBuilder.loadTexts: igsVlanFilterEntry.setStatus('current')
igsVlanFilterVlanId = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 20, 1, 10, 3, 4, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4094))).setMaxAccess("readonly")
if mibBuilder.loadTexts: igsVlanFilterVlanId.setStatus('current')
igsVlanSnoopStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 20, 1, 10, 3, 4, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: igsVlanSnoopStatus.setStatus('current')
igsVlanQuerier = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 20, 1, 10, 3, 4, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone(2)).setMaxAccess("readonly")
if mibBuilder.loadTexts: igsVlanQuerier.setStatus('current')
igsVlanCfgQuerier = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 20, 1, 10, 3, 4, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone(2)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: igsVlanCfgQuerier.setStatus('current')
igsVlanQueryInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 20, 1, 10, 3, 4, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(60, 600)).clone(125)).setMaxAccess("readonly")
if mibBuilder.loadTexts: igsVlanQueryInterval.setStatus('current')
igsVlanRtrPortList = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 20, 1, 10, 3, 4, 1, 6), PortList()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: igsVlanRtrPortList.setStatus('current')
igsVlanFastLeave = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 20, 1, 10, 3, 4, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone(2)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: igsVlanFastLeave.setStatus('current')
igsVlanMulticastGroupTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 75, 20, 1, 10, 3, 5), )
if mibBuilder.loadTexts: igsVlanMulticastGroupTable.setStatus('current')
igsVlanMulticastGroupEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 75, 20, 1, 10, 3, 5, 1), ).setIndexNames((0, "DES-1210-52-CX", "igsVlanMulticastGroupVlanId"), (0, "DES-1210-52-CX", "igsVlanMulticastGroupIpAddress"))
if mibBuilder.loadTexts: igsVlanMulticastGroupEntry.setStatus('current')
igsVlanMulticastGroupVlanId = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 20, 1, 10, 3, 5, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4094))).setMaxAccess("readonly")
if mibBuilder.loadTexts: igsVlanMulticastGroupVlanId.setStatus('current')
igsVlanMulticastGroupIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 20, 1, 10, 3, 5, 1, 2), InetAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: igsVlanMulticastGroupIpAddress.setStatus('current')
igsVlanMulticastGroupMacAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 20, 1, 10, 3, 5, 1, 3), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: igsVlanMulticastGroupMacAddress.setStatus('current')
igsVlanMulticastGroupPortList = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 20, 1, 10, 3, 5, 1, 4), PortList()).setMaxAccess("readonly")
if mibBuilder.loadTexts: igsVlanMulticastGroupPortList.setStatus('current')
mldsSystem = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 75, 20, 1, 88, 1))
mldsVlan = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 75, 20, 1, 88, 3))
mldsStatus = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 75, 20, 1, 88, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone(2)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mldsStatus.setStatus('current')
mldsRouterPortPurgeInterval = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 75, 20, 1, 88, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(60, 600)).clone(260)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mldsRouterPortPurgeInterval.setStatus('current')
mldsHostPortPurgeInterval = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 75, 20, 1, 88, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(130, 153025)).clone(260)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mldsHostPortPurgeInterval.setStatus('current')
mldsRobustnessValue = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 75, 20, 1, 88, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(2, 255)).clone(2)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mldsRobustnessValue.setStatus('current')
mldsGrpQueryInterval = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 75, 20, 1, 88, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 25)).clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mldsGrpQueryInterval.setStatus('current')
mldsQueryInterval = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 75, 20, 1, 88, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(60, 600)).clone(125)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mldsQueryInterval.setStatus('current')
mldsQueryMaxResponseTime = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 75, 20, 1, 88, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(10, 25)).clone(10)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mldsQueryMaxResponseTime.setStatus('current')
mldsVlanRouterTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 75, 20, 1, 88, 3, 3), )
if mibBuilder.loadTexts: mldsVlanRouterTable.setStatus('current')
mldsVlanRouterEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 75, 20, 1, 88, 3, 3, 1), ).setIndexNames((0, "DES-1210-52-CX", "mldsVlanRouterVlanId"))
if mibBuilder.loadTexts: mldsVlanRouterEntry.setStatus('current')
mldsVlanRouterVlanId = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 20, 1, 88, 3, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4094))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mldsVlanRouterVlanId.setStatus('current')
mldsVlanRouterPortList = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 20, 1, 88, 3, 3, 1, 2), PortList()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mldsVlanRouterPortList.setStatus('current')
mldsVlanFilterTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 75, 20, 1, 88, 3, 4), )
if mibBuilder.loadTexts: mldsVlanFilterTable.setStatus('current')
mldsVlanFilterEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 75, 20, 1, 88, 3, 4, 1), ).setIndexNames((0, "DES-1210-52-CX", "mldsVlanFilterVlanId"))
if mibBuilder.loadTexts: mldsVlanFilterEntry.setStatus('current')
mldsVlanFilterVlanId = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 20, 1, 88, 3, 4, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4094))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mldsVlanFilterVlanId.setStatus('current')
mldsVlanSnoopStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 20, 1, 88, 3, 4, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mldsVlanSnoopStatus.setStatus('current')
mldsVlanQuerier = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 20, 1, 88, 3, 4, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone(2)).setMaxAccess("readonly")
if mibBuilder.loadTexts: mldsVlanQuerier.setStatus('current')
mldsVlanCfgQuerier = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 20, 1, 88, 3, 4, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone(2)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mldsVlanCfgQuerier.setStatus('current')
mldsVlanQueryInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 20, 1, 88, 3, 4, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(60, 600)).clone(125)).setMaxAccess("readonly")
if mibBuilder.loadTexts: mldsVlanQueryInterval.setStatus('current')
mldsVlanRtrPortList = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 20, 1, 88, 3, 4, 1, 6), PortList()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mldsVlanRtrPortList.setStatus('current')
mldsVlanFastLeave = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 20, 1, 88, 3, 4, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone(2)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mldsVlanFastLeave.setStatus('current')
mldsVlanMulticastGroupTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 75, 20, 1, 88, 3, 5), )
if mibBuilder.loadTexts: mldsVlanMulticastGroupTable.setStatus('current')
mldsVlanMulticastGroupEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 75, 20, 1, 88, 3, 5, 1), ).setIndexNames((0, "DES-1210-52-CX", "mldsVlanMulticastGroupVlanId"), (0, "DES-1210-52-CX", "mldsVlanMulticastGroupIpAddress"))
if mibBuilder.loadTexts: mldsVlanMulticastGroupEntry.setStatus('current')
mldsVlanMulticastGroupVlanId = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 20, 1, 88, 3, 5, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4094))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mldsVlanMulticastGroupVlanId.setStatus('current')
mldsVlanMulticastGroupIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 20, 1, 88, 3, 5, 1, 2), InetAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mldsVlanMulticastGroupIpAddress.setStatus('current')
mldsVlanMulticastGroupMacAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 20, 1, 88, 3, 5, 1, 3), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mldsVlanMulticastGroupMacAddress.setStatus('current')
mldsVlanMulticastGroupPortList = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 20, 1, 88, 3, 5, 1, 4), PortList()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mldsVlanMulticastGroupPortList.setStatus('current')
swAuthenCtrl = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 75, 20, 1, 23, 1))
swAuthStatus = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 75, 20, 1, 23, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swAuthStatus.setStatus('current')
authProtocol = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 75, 20, 1, 23, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("authProtocolRadiusEap", 1), ("authProtocolLocal", 2))).clone('authProtocolRadiusEap')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: authProtocol.setStatus('current')
swAuthCtrlPktFwdMode = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 75, 20, 1, 23, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swAuthCtrlPktFwdMode.setStatus('current')
swAuthPortAccessCtrl = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 75, 20, 1, 23, 2))
swAuthPortAccessControlTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 75, 20, 1, 23, 2, 1), )
if mibBuilder.loadTexts: swAuthPortAccessControlTable.setStatus('current')
swAuthPortAccessControlEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 75, 20, 1, 23, 2, 1, 1), ).setIndexNames((0, "DES-1210-52-CX", "swAuthAuthConfigPortNumber"))
if mibBuilder.loadTexts: swAuthPortAccessControlEntry.setStatus('current')
swAuthAuthConfigPortNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 20, 1, 23, 2, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swAuthAuthConfigPortNumber.setStatus('current')
swAuthAuthQuietPeriod = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 20, 1, 23, 2, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535)).clone(60)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swAuthAuthQuietPeriod.setStatus('current')
swAuthAuthSuppTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 20, 1, 23, 2, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535)).clone(12)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swAuthAuthSuppTimeout.setStatus('current')
swAuthAuthServerTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 20, 1, 23, 2, 1, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535)).clone(16)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swAuthAuthServerTimeout.setStatus('current')
swAuthAuthMaxReq = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 20, 1, 23, 2, 1, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 10)).clone(2)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swAuthAuthMaxReq.setStatus('current')
swAuthAuthTxPeriod = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 20, 1, 23, 2, 1, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535)).clone(24)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swAuthAuthTxPeriod.setStatus('current')
swAuthAuthReAuthPeriod = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 20, 1, 23, 2, 1, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535)).clone(3600)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swAuthAuthReAuthPeriod.setStatus('current')
swAuthAuthReAuthentication = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 20, 1, 23, 2, 1, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swAuthAuthReAuthentication.setStatus('current')
swAuthAuthConfigPortControl = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 20, 1, 23, 2, 1, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("forceUnauthorized", 1), ("auto", 2), ("forceAuthorized", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swAuthAuthConfigPortControl.setStatus('current')
swAuthAuthCapability = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 20, 1, 23, 2, 1, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("authenticator", 1), ("none", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swAuthAuthCapability.setStatus('current')
swAuthAuthDirection = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 20, 1, 23, 2, 1, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("both", 0), ("in", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swAuthAuthDirection.setStatus('current')
swAuthUser = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 75, 20, 1, 23, 3))
swAuthUserTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 75, 20, 1, 23, 3, 1), )
if mibBuilder.loadTexts: swAuthUserTable.setStatus('current')
swAuthUserEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 75, 20, 1, 23, 3, 1, 1), ).setIndexNames((0, "DES-1210-52-CX", "swAuthUserName"))
if mibBuilder.loadTexts: swAuthUserEntry.setStatus('current')
swAuthUserName = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 20, 1, 23, 3, 1, 1, 1), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(1, 15))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swAuthUserName.setStatus('current')
swAuthUserPassword = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 20, 1, 23, 3, 1, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 15))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swAuthUserPassword.setStatus('current')
swAuthUserStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 20, 1, 23, 3, 1, 1, 3), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: swAuthUserStatus.setStatus('current')
swAuthRadiusServer = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 75, 20, 1, 23, 4))
swAuthRadiusServerTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 75, 20, 1, 23, 4, 2), )
if mibBuilder.loadTexts: swAuthRadiusServerTable.setStatus('current')
swAuthRadiusServerEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 75, 20, 1, 23, 4, 2, 1), ).setIndexNames((0, "DES-1210-52-CX", "swAuthRadiusServerIndex"))
if mibBuilder.loadTexts: swAuthRadiusServerEntry.setStatus('current')
swAuthRadiusServerIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 20, 1, 23, 4, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 3))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swAuthRadiusServerIndex.setStatus('current')
swAuthRadiusIPType = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 20, 1, 23, 4, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("iPv4", 1), ("iPv6", 2))).clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swAuthRadiusIPType.setStatus('current')
swAuthRadiusServerAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 20, 1, 23, 4, 2, 1, 3), Ipv6Address()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swAuthRadiusServerAddress.setStatus('current')
swAuthRadiusServerInterfaceName = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 20, 1, 23, 4, 2, 1, 4), OctetString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: swAuthRadiusServerInterfaceName.setStatus('current')
swAuthRadiusServerAuthenticationPort = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 20, 1, 23, 4, 2, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535)).clone(1812)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swAuthRadiusServerAuthenticationPort.setStatus('current')
swAuthRadiusServerAccountingPort = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 20, 1, 23, 4, 2, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535)).clone(1813)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swAuthRadiusServerAccountingPort.setStatus('current')
swAuthRadiusServerTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 20, 1, 23, 4, 2, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255)).clone(5)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swAuthRadiusServerTimeout.setStatus('current')
swAuthRadiusServerRetransmit = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 20, 1, 23, 4, 2, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255)).clone(2)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swAuthRadiusServerRetransmit.setStatus('current')
swAuthRadiusServerKey = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 20, 1, 23, 4, 2, 1, 9), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 15))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swAuthRadiusServerKey.setStatus('current')
swAuthRadiusServerStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 20, 1, 23, 4, 2, 1, 10), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: swAuthRadiusServerStatus.setStatus('current')
qosMode = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 75, 20, 1, 12, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("dot1p", 1), ("dscp", 2), ("tos", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qosMode.setStatus('current')
queuingMechanism = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 75, 20, 1, 12, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("strictPriority", 1), ("wrr", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: queuingMechanism.setStatus('current')
qosQ1p = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 75, 20, 1, 12, 3))
dot1pPortTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 75, 20, 1, 12, 3, 1), )
if mibBuilder.loadTexts: dot1pPortTable.setStatus('current')
dot1pPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 75, 20, 1, 12, 3, 1, 1), ).setIndexNames((0, "DES-1210-52-CX", "dot1pPortIndex"))
if mibBuilder.loadTexts: dot1pPortEntry.setStatus('current')
dot1pPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 20, 1, 12, 3, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot1pPortIndex.setStatus('current')
dot1pPortPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 20, 1, 12, 3, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dot1pPortPriority.setStatus('current')
qosDiffServ = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 75, 20, 1, 12, 4))
qosDiffServEnable = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 75, 20, 1, 12, 4, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: qosDiffServEnable.setStatus('current')
qosDiffServTypeGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 75, 20, 1, 12, 4, 2))
qosDiffServType00 = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 75, 20, 1, 12, 4, 2, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qosDiffServType00.setStatus('current')
qosDiffServType01 = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 75, 20, 1, 12, 4, 2, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qosDiffServType01.setStatus('current')
qosDiffServType02 = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 75, 20, 1, 12, 4, 2, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qosDiffServType02.setStatus('current')
qosDiffServType03 = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 75, 20, 1, 12, 4, 2, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qosDiffServType03.setStatus('current')
qosDiffServType04 = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 75, 20, 1, 12, 4, 2, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qosDiffServType04.setStatus('current')
qosDiffServType05 = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 75, 20, 1, 12, 4, 2, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qosDiffServType05.setStatus('current')
qosDiffServType06 = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 75, 20, 1, 12, 4, 2, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qosDiffServType06.setStatus('current')
qosDiffServType07 = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 75, 20, 1, 12, 4, 2, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qosDiffServType07.setStatus('current')
qosDiffServType08 = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 75, 20, 1, 12, 4, 2, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qosDiffServType08.setStatus('current')
qosDiffServType09 = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 75, 20, 1, 12, 4, 2, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qosDiffServType09.setStatus('current')
qosDiffServType10 = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 75, 20, 1, 12, 4, 2, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qosDiffServType10.setStatus('current')
qosDiffServType11 = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 75, 20, 1, 12, 4, 2, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qosDiffServType11.setStatus('current')
qosDiffServType12 = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 75, 20, 1, 12, 4, 2, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qosDiffServType12.setStatus('current')
qosDiffServType13 = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 75, 20, 1, 12, 4, 2, 14), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qosDiffServType13.setStatus('current')
qosDiffServType14 = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 75, 20, 1, 12, 4, 2, 15), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qosDiffServType14.setStatus('current')
qosDiffServType15 = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 75, 20, 1, 12, 4, 2, 16), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qosDiffServType15.setStatus('current')
qosDiffServType16 = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 75, 20, 1, 12, 4, 2, 17), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qosDiffServType16.setStatus('current')
qosDiffServType17 = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 75, 20, 1, 12, 4, 2, 18), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qosDiffServType17.setStatus('current')
qosDiffServType18 = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 75, 20, 1, 12, 4, 2, 19), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qosDiffServType18.setStatus('current')
qosDiffServType19 = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 75, 20, 1, 12, 4, 2, 20), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qosDiffServType19.setStatus('current')
qosDiffServType20 = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 75, 20, 1, 12, 4, 2, 21), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qosDiffServType20.setStatus('current')
qosDiffServType21 = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 75, 20, 1, 12, 4, 2, 22), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qosDiffServType21.setStatus('current')
qosDiffServType22 = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 75, 20, 1, 12, 4, 2, 23), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qosDiffServType22.setStatus('current')
qosDiffServType23 = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 75, 20, 1, 12, 4, 2, 24), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qosDiffServType23.setStatus('current')
qosDiffServType24 = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 75, 20, 1, 12, 4, 2, 25), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qosDiffServType24.setStatus('current')
qosDiffServType25 = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 75, 20, 1, 12, 4, 2, 26), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qosDiffServType25.setStatus('current')
qosDiffServType26 = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 75, 20, 1, 12, 4, 2, 27), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qosDiffServType26.setStatus('current')
qosDiffServType27 = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 75, 20, 1, 12, 4, 2, 28), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qosDiffServType27.setStatus('current')
qosDiffServType28 = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 75, 20, 1, 12, 4, 2, 29), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qosDiffServType28.setStatus('current')
qosDiffServType29 = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 75, 20, 1, 12, 4, 2, 30), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qosDiffServType29.setStatus('current')
qosDiffServType30 = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 75, 20, 1, 12, 4, 2, 31), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qosDiffServType30.setStatus('current')
qosDiffServType31 = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 75, 20, 1, 12, 4, 2, 32), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qosDiffServType31.setStatus('current')
qosDiffServType32 = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 75, 20, 1, 12, 4, 2, 33), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qosDiffServType32.setStatus('current')
qosDiffServType33 = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 75, 20, 1, 12, 4, 2, 34), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qosDiffServType33.setStatus('current')
qosDiffServType34 = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 75, 20, 1, 12, 4, 2, 35), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qosDiffServType34.setStatus('current')
qosDiffServType35 = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 75, 20, 1, 12, 4, 2, 36), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qosDiffServType35.setStatus('current')
qosDiffServType36 = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 75, 20, 1, 12, 4, 2, 37), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qosDiffServType36.setStatus('current')
qosDiffServType37 = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 75, 20, 1, 12, 4, 2, 38), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qosDiffServType37.setStatus('current')
qosDiffServType38 = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 75, 20, 1, 12, 4, 2, 39), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qosDiffServType38.setStatus('current')
qosDiffServType39 = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 75, 20, 1, 12, 4, 2, 40), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qosDiffServType39.setStatus('current')
qosDiffServType40 = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 75, 20, 1, 12, 4, 2, 41), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qosDiffServType40.setStatus('current')
qosDiffServType41 = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 75, 20, 1, 12, 4, 2, 42), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qosDiffServType41.setStatus('current')
qosDiffServType42 = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 75, 20, 1, 12, 4, 2, 43), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qosDiffServType42.setStatus('current')
qosDiffServType43 = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 75, 20, 1, 12, 4, 2, 44), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qosDiffServType43.setStatus('current')
qosDiffServType44 = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 75, 20, 1, 12, 4, 2, 45), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qosDiffServType44.setStatus('current')
qosDiffServType45 = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 75, 20, 1, 12, 4, 2, 46), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qosDiffServType45.setStatus('current')
qosDiffServType46 = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 75, 20, 1, 12, 4, 2, 47), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qosDiffServType46.setStatus('current')
qosDiffServType47 = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 75, 20, 1, 12, 4, 2, 48), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qosDiffServType47.setStatus('current')
qosDiffServType48 = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 75, 20, 1, 12, 4, 2, 49), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qosDiffServType48.setStatus('current')
qosDiffServType49 = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 75, 20, 1, 12, 4, 2, 50), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qosDiffServType49.setStatus('current')
qosDiffServType50 = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 75, 20, 1, 12, 4, 2, 51), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qosDiffServType50.setStatus('current')
qosDiffServType51 = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 75, 20, 1, 12, 4, 2, 52), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qosDiffServType51.setStatus('current')
qosDiffServType52 = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 75, 20, 1, 12, 4, 2, 53), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qosDiffServType52.setStatus('current')
qosDiffServType53 = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 75, 20, 1, 12, 4, 2, 54), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qosDiffServType53.setStatus('current')
qosDiffServType54 = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 75, 20, 1, 12, 4, 2, 55), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qosDiffServType54.setStatus('current')
qosDiffServType55 = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 75, 20, 1, 12, 4, 2, 56), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qosDiffServType55.setStatus('current')
qosDiffServType56 = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 75, 20, 1, 12, 4, 2, 57), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qosDiffServType56.setStatus('current')
qosDiffServType57 = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 75, 20, 1, 12, 4, 2, 58), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qosDiffServType57.setStatus('current')
qosDiffServType58 = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 75, 20, 1, 12, 4, 2, 59), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qosDiffServType58.setStatus('current')
qosDiffServType59 = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 75, 20, 1, 12, 4, 2, 60), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qosDiffServType59.setStatus('current')
qosDiffServType60 = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 75, 20, 1, 12, 4, 2, 61), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qosDiffServType60.setStatus('current')
qosDiffServType61 = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 75, 20, 1, 12, 4, 2, 62), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qosDiffServType61.setStatus('current')
qosDiffServType62 = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 75, 20, 1, 12, 4, 2, 63), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qosDiffServType62.setStatus('current')
qosDiffServType63 = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 75, 20, 1, 12, 4, 2, 64), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qosDiffServType63.setStatus('current')
qosTOS = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 75, 20, 1, 12, 5))
qosTOSEnable = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 75, 20, 1, 12, 5, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: qosTOSEnable.setStatus('current')
qosTOSGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 75, 20, 1, 12, 5, 2))
qosTOSType00 = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 75, 20, 1, 12, 5, 2, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qosTOSType00.setStatus('current')
qosTOSType01 = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 75, 20, 1, 12, 5, 2, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qosTOSType01.setStatus('current')
qosTOSType02 = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 75, 20, 1, 12, 5, 2, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qosTOSType02.setStatus('current')
qosTOSType03 = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 75, 20, 1, 12, 5, 2, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qosTOSType03.setStatus('current')
qosTOSType04 = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 75, 20, 1, 12, 5, 2, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qosTOSType04.setStatus('current')
qosTOSType05 = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 75, 20, 1, 12, 5, 2, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qosTOSType05.setStatus('current')
qosTOSType06 = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 75, 20, 1, 12, 5, 2, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qosTOSType06.setStatus('current')
qosTOSType07 = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 75, 20, 1, 12, 5, 2, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qosTOSType07.setStatus('current')
bandwidthCtrlSettings = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 75, 20, 1, 13, 1))
bandwidthCtrlTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 75, 20, 1, 13, 1, 2), )
if mibBuilder.loadTexts: bandwidthCtrlTable.setStatus('current')
bandwidthCtrlEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 75, 20, 1, 13, 1, 2, 1), ).setIndexNames((0, "DES-1210-52-CX", "bandwidthCtrlIndex"))
if mibBuilder.loadTexts: bandwidthCtrlEntry.setStatus('current')
bandwidthCtrlIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 20, 1, 13, 1, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bandwidthCtrlIndex.setStatus('current')
bandwidthCtrlTxThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 20, 1, 13, 1, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(64, 1024000), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bandwidthCtrlTxThreshold.setStatus('current')
bandwidthCtrlRxThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 20, 1, 13, 1, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(64, 1024000), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bandwidthCtrlRxThreshold.setStatus('current')
broadcastStormCtrlSettings = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 75, 20, 1, 13, 3))
broadcastStormCtrlGlobalOnOff = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 75, 20, 1, 13, 3, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: broadcastStormCtrlGlobalOnOff.setStatus('current')
broadcastStormCtrlLimitType = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 75, 20, 1, 13, 3, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("broadcastonly", 1), ("multicastAndbroadcast", 2), ("dlfMulticastAndbroadcast", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: broadcastStormCtrlLimitType.setStatus('current')
broadcastStormCtrlThreshold = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 75, 20, 1, 13, 3, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(64, 1024000), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: broadcastStormCtrlThreshold.setStatus('current')
securityTrustedHost = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 75, 20, 1, 14, 1))
trustedHostStatus = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 75, 20, 1, 14, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: trustedHostStatus.setStatus('current')
trustedHostTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 75, 20, 1, 14, 1, 3), )
if mibBuilder.loadTexts: trustedHostTable.setStatus('current')
trustedHostEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 75, 20, 1, 14, 1, 3, 1), ).setIndexNames((0, "DES-1210-52-CX", "trustedHostIPType"), (0, "DES-1210-52-CX", "trustedHostIpAddr"), (0, "DES-1210-52-CX", "trustedHostIpMask"))
if mibBuilder.loadTexts: trustedHostEntry.setStatus('current')
trustedHostIPType = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 20, 1, 14, 1, 3, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("iPv4", 1), ("iPv6", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: trustedHostIPType.setStatus('current')
trustedHostIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 20, 1, 14, 1, 3, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: trustedHostIpAddr.setStatus('current')
trustedHostIpMask = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 20, 1, 14, 1, 3, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: trustedHostIpMask.setStatus('current')
trustedHostRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 20, 1, 14, 1, 3, 1, 4), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: trustedHostRowStatus.setStatus('current')
securityARPSpoofPrevent = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 75, 20, 1, 14, 3))
aRPSpoofPreventTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 75, 20, 1, 14, 3, 1), )
if mibBuilder.loadTexts: aRPSpoofPreventTable.setStatus('current')
aRPSpoofPreventEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 75, 20, 1, 14, 3, 1, 1), ).setIndexNames((0, "DES-1210-52-CX", "aRPSpoofPreventIpAddr"))
if mibBuilder.loadTexts: aRPSpoofPreventEntry.setStatus('current')
aRPSpoofPreventIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 20, 1, 14, 3, 1, 1, 1), IpAddress())
if mibBuilder.loadTexts: aRPSpoofPreventIpAddr.setStatus('current')
aRPSpoofPreventMacAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 20, 1, 14, 3, 1, 1, 2), MacAddress().clone(hexValue="000102030405")).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aRPSpoofPreventMacAddress.setStatus('current')
aRPSpoofPreventPortList = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 20, 1, 14, 3, 1, 1, 3), PortList()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aRPSpoofPreventPortList.setStatus('current')
aRPSpoofPreventRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 20, 1, 14, 3, 1, 1, 4), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: aRPSpoofPreventRowStatus.setStatus('current')
securitySSL = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 75, 20, 1, 14, 5))
sslSecurityHttpStatus = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 75, 20, 1, 14, 5, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sslSecurityHttpStatus.setStatus('current')
sslCiphers = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 75, 20, 1, 14, 5, 2))
sslCipherSuiteList = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 75, 20, 1, 14, 5, 2, 1), Bits().clone(namedValues=NamedValues(("rsa-null-md5", 0), ("rsa-null-sha", 1), ("rsa-des-sha", 2), ("rsa-3des-sha", 3), ("dh-rsa-des-sha", 4), ("dh-rsa-3des-sha", 5), ("rsa-exp1024-des-sha", 6)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sslCipherSuiteList.setStatus('current')
securitySSH = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 75, 20, 1, 14, 8))
sshSecurityStatus = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 75, 20, 1, 14, 8, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sshSecurityStatus.setStatus('current')
sshMaxAuthFailAttempts = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 75, 20, 1, 14, 8, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(2, 20))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sshMaxAuthFailAttempts.setStatus('current')
sshSessionKeyRekeying = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 75, 20, 1, 14, 8, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("never", 0), ("ten-min", 1), ("thirty-min", 2), ("sixty-min", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sshSessionKeyRekeying.setStatus('current')
sshMaxSession = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 75, 20, 1, 14, 8, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sshMaxSession.setStatus('current')
sshConnectionTimeout = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 75, 20, 1, 14, 8, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(120, 600))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sshConnectionTimeout.setStatus('current')
sshAuthenMethodPassWordAdmin = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 75, 20, 1, 14, 8, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sshAuthenMethodPassWordAdmin.setStatus('current')
sshAuthenMethodPubKeyAdmin = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 75, 20, 1, 14, 8, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sshAuthenMethodPubKeyAdmin.setStatus('current')
sshAuthenMethodHostKeyAdmin = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 75, 20, 1, 14, 8, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sshAuthenMethodHostKeyAdmin.setStatus('current')
sshCipherSuiteList = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 75, 20, 1, 14, 8, 9), Bits().clone(namedValues=NamedValues(("tripleDESCBC", 0)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sshCipherSuiteList.setStatus('current')
sshMacSuiteList = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 75, 20, 1, 14, 8, 10), Bits().clone(namedValues=NamedValues(("hMAC-SHA1", 0), ("hMAC-MD5", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sshMacSuiteList.setStatus('current')
sshPublKeyRSAAdmin = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 75, 20, 1, 14, 8, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sshPublKeyRSAAdmin.setStatus('current')
sshUserInfoTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 75, 20, 1, 14, 8, 12), )
if mibBuilder.loadTexts: sshUserInfoTable.setStatus('current')
sshUserInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 75, 20, 1, 14, 8, 12, 1), ).setIndexNames((0, "DES-1210-52-CX", "sshUserInfoID"))
if mibBuilder.loadTexts: sshUserInfoEntry.setStatus('current')
sshUserInfoID = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 20, 1, 14, 8, 12, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sshUserInfoID.setStatus('current')
sshUserInfoUserName = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 20, 1, 14, 8, 12, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 20))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sshUserInfoUserName.setStatus('current')
sshUserInfoAuth = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 20, 1, 14, 8, 12, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(4, 2, 1))).clone(namedValues=NamedValues(("publickey", 4), ("password", 2), ("hostbased", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sshUserInfoAuth.setStatus('current')
sshUserInfoHostName = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 20, 1, 14, 8, 12, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 20))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sshUserInfoHostName.setStatus('current')
sshUserInfoHostIp = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 20, 1, 14, 8, 12, 1, 5), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sshUserInfoHostIp.setStatus('current')
sshUserInfoHostIpv6 = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 20, 1, 14, 8, 12, 1, 6), Ipv6Address()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sshUserInfoHostIpv6.setStatus('current')
securityPortSecurity = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 75, 20, 1, 14, 2))
portSecTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 75, 20, 1, 14, 2, 1), )
if mibBuilder.loadTexts: portSecTable.setStatus('current')
portSecEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 75, 20, 1, 14, 2, 1, 1), ).setIndexNames((0, "DES-1210-52-CX", "portSecIndex"))
if mibBuilder.loadTexts: portSecEntry.setStatus('current')
portSecIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 20, 1, 14, 2, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: portSecIndex.setStatus('current')
portSecState = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 20, 1, 14, 2, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portSecState.setStatus('current')
portSecMLA = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 20, 1, 14, 2, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 64))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portSecMLA.setStatus('current')
cableDiagTriggerIndex = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 75, 20, 1, 37, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cableDiagTriggerIndex.setStatus('current')
cableDiagPair1TestResult = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 75, 20, 1, 37, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("ok", 0), ("open", 1), ("short", 2), ("open-short", 3), ("crosstalk", 4), ("mismatch", 5), ("linedriver", 6), ("notAvailable", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cableDiagPair1TestResult.setStatus('current')
cableDiagPair1FaultDistance = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 75, 20, 1, 37, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cableDiagPair1FaultDistance.setStatus('current')
cableDiagPair2TestResult = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 75, 20, 1, 37, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("ok", 0), ("open", 1), ("short", 2), ("open-short", 3), ("crosstalk", 4), ("mismatch", 5), ("linedriver", 6), ("notAvailable", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cableDiagPair2TestResult.setStatus('current')
cableDiagPair2FaultDistance = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 75, 20, 1, 37, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cableDiagPair2FaultDistance.setStatus('current')
cableDiagPair3TestResult = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 75, 20, 1, 37, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("ok", 0), ("open", 1), ("short", 2), ("open-short", 3), ("crosstalk", 4), ("mismatch", 5), ("linedriver", 6), ("notAvailable", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cableDiagPair3TestResult.setStatus('current')
cableDiagPair3FaultDistance = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 75, 20, 1, 37, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cableDiagPair3FaultDistance.setStatus('current')
cableDiagPair4TestResult = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 75, 20, 1, 37, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("ok", 0), ("open", 1), ("short", 2), ("open-short", 3), ("crosstalk", 4), ("mismatch", 5), ("linedriver", 6), ("notAvailable", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cableDiagPair4TestResult.setStatus('current')
cableDiagPair4FaultDistance = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 75, 20, 1, 37, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cableDiagPair4FaultDistance.setStatus('current')
cableDiagLengthinRange = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 75, 20, 1, 37, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("less50", 1), ("from50to80", 2), ("from80to100", 3), ("from100to140", 4), ("notAvailable", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cableDiagLengthinRange.setStatus('current')
aclProfile = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 75, 20, 1, 15, 1))
aclProfileTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 75, 20, 1, 15, 1, 1), )
if mibBuilder.loadTexts: aclProfileTable.setStatus('current')
aclProfileEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 75, 20, 1, 15, 1, 1, 1), ).setIndexNames((0, "DES-1210-52-CX", "aclProfileNo"))
if mibBuilder.loadTexts: aclProfileEntry.setStatus('current')
aclProfileNo = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 20, 1, 15, 1, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 50))).setMaxAccess("readonly")
if mibBuilder.loadTexts: aclProfileNo.setStatus('current')
aclProfileName = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 20, 1, 15, 1, 1, 1, 2), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aclProfileName.setStatus('current')
aclProfileType = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 20, 1, 15, 1, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 13, 11))).clone(namedValues=NamedValues(("l2", 1), ("l3v4", 2), ("l3v4Ext", 13), ("l3v6", 11)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aclProfileType.setStatus('current')
aclProfileRuleCount = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 20, 1, 15, 1, 1, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: aclProfileRuleCount.setStatus('current')
aclProfileStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 20, 1, 15, 1, 1, 1, 14), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aclProfileStatus.setStatus('current')
aclL2Rule = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 75, 20, 1, 15, 2))
aclL2RuleTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 75, 20, 1, 15, 2, 1), )
if mibBuilder.loadTexts: aclL2RuleTable.setStatus('current')
aclL2RuleEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 75, 20, 1, 15, 2, 1, 1), ).setIndexNames((0, "DES-1210-52-CX", "aclL2ProfileID"), (0, "DES-1210-52-CX", "aclL2AccessID"))
if mibBuilder.loadTexts: aclL2RuleEntry.setStatus('current')
aclL2AccessID = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 20, 1, 15, 2, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: aclL2AccessID.setStatus('current')
aclL2ProfileID = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 20, 1, 15, 2, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 50)).clone(1)).setMaxAccess("readonly")
if mibBuilder.loadTexts: aclL2ProfileID.setStatus('current')
aclL2RuleEtherType = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 20, 1, 15, 2, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(-1, -1), ValueRangeConstraint(1501, 65535), )).clone(-1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aclL2RuleEtherType.setStatus('current')
aclL2RuleDstMacAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 20, 1, 15, 2, 1, 1, 4), MacAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aclL2RuleDstMacAddr.setStatus('current')
aclL2RuleSrcMacAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 20, 1, 15, 2, 1, 1, 5), MacAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aclL2RuleSrcMacAddr.setStatus('current')
aclL2RuleVlanId = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 20, 1, 15, 2, 1, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 4094)).clone(-1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aclL2RuleVlanId.setStatus('current')
aclL2Rule1pPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 20, 1, 15, 2, 1, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 7)).clone(-1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aclL2Rule1pPriority.setStatus('current')
aclL2RuleDstMacAddrMask = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 20, 1, 15, 2, 1, 1, 8), MacAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aclL2RuleDstMacAddrMask.setStatus('current')
aclL2RuleSrcMacAddrMask = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 20, 1, 15, 2, 1, 1, 9), MacAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aclL2RuleSrcMacAddrMask.setStatus('current')
aclL2RuleAction = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 20, 1, 15, 2, 1, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("allow", 1), ("drop", 2))).clone('allow')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aclL2RuleAction.setStatus('current')
aclL2RulePriority = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 20, 1, 15, 2, 1, 1, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 7)).clone(-1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aclL2RulePriority.setStatus('current')
aclL2RuleReplacePriority = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 20, 1, 15, 2, 1, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aclL2RuleReplacePriority.setStatus('current')
aclL2RuleStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 20, 1, 15, 2, 1, 1, 99), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aclL2RuleStatus.setStatus('current')
aclL3v4Rule = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 75, 20, 1, 15, 3))
aclL3v4RuleTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 75, 20, 1, 15, 3, 1), )
if mibBuilder.loadTexts: aclL3v4RuleTable.setStatus('current')
aclL3v4RuleEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 75, 20, 1, 15, 3, 1, 1), ).setIndexNames((0, "DES-1210-52-CX", "aclL3v4RuleProfileNo"), (0, "DES-1210-52-CX", "aclL3v4RuleAccessID"))
if mibBuilder.loadTexts: aclL3v4RuleEntry.setStatus('current')
aclL3v4RuleAccessID = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 20, 1, 15, 3, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: aclL3v4RuleAccessID.setStatus('current')
aclL3v4RuleProfileNo = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 20, 1, 15, 3, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 50))).setMaxAccess("readonly")
if mibBuilder.loadTexts: aclL3v4RuleProfileNo.setStatus('current')
aclL3v4RuleDstIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 20, 1, 15, 3, 1, 1, 3), IpAddress().clone(hexValue="00000000")).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aclL3v4RuleDstIpAddr.setStatus('current')
aclL3v4RuleSrcIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 20, 1, 15, 3, 1, 1, 4), IpAddress().clone(hexValue="00000000")).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aclL3v4RuleSrcIpAddr.setStatus('current')
aclL3v4RuleDstIpAddrMask = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 20, 1, 15, 3, 1, 1, 5), IpAddress().clone(hexValue="FFFFFFFF")).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aclL3v4RuleDstIpAddrMask.setStatus('current')
aclL3v4RuleSrcIpAddrMask = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 20, 1, 15, 3, 1, 1, 6), IpAddress().clone(hexValue="FFFFFFFF")).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aclL3v4RuleSrcIpAddrMask.setStatus('current')
aclL3v4RuleAction = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 20, 1, 15, 3, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("allow", 1), ("drop", 2))).clone('allow')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aclL3v4RuleAction.setStatus('current')
aclL3v4RulePriority = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 20, 1, 15, 3, 1, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 7)).clone(-1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aclL3v4RulePriority.setStatus('current')
aclL3v4RuleReplacePriority = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 20, 1, 15, 3, 1, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aclL3v4RuleReplacePriority.setStatus('current')
aclL3v4RuleStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 20, 1, 15, 3, 1, 1, 99), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aclL3v4RuleStatus.setStatus('current')
aclL3v4ExtRule = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 75, 20, 1, 15, 4))
aclL3v4ExtRuleTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 75, 20, 1, 15, 4, 1), )
if mibBuilder.loadTexts: aclL3v4ExtRuleTable.setStatus('current')
aclL3v4ExtRuleEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 75, 20, 1, 15, 4, 1, 1), ).setIndexNames((0, "DES-1210-52-CX", "aclL3v4ExtRuleProfileNo"), (0, "DES-1210-52-CX", "aclL3v4ExtRuleAccessID"))
if mibBuilder.loadTexts: aclL3v4ExtRuleEntry.setStatus('current')
aclL3v4ExtRuleAccessID = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 20, 1, 15, 4, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: aclL3v4ExtRuleAccessID.setStatus('current')
aclL3v4ExtRuleProfileNo = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 20, 1, 15, 4, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 50))).setMaxAccess("readonly")
if mibBuilder.loadTexts: aclL3v4ExtRuleProfileNo.setStatus('current')
aclL3v4ExtRuleProtocol = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 20, 1, 15, 4, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 6, 17, 24))).clone(namedValues=NamedValues(("none", 0), ("icmp", 1), ("igmp", 2), ("tcp", 6), ("udp", 17), ("protocolid", 24)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aclL3v4ExtRuleProtocol.setStatus('current')
aclL3v4ExtRuleICMPMessageType = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 20, 1, 15, 4, 1, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 255)).clone(-1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aclL3v4ExtRuleICMPMessageType.setStatus('current')
aclL3v4ExtRuleICMPMessageCode = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 20, 1, 15, 4, 1, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 255)).clone(-1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aclL3v4ExtRuleICMPMessageCode.setStatus('current')
aclL3v4ExtRuleDstIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 20, 1, 15, 4, 1, 1, 6), IpAddress().clone(hexValue="00000000")).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aclL3v4ExtRuleDstIpAddr.setStatus('current')
aclL3v4ExtRuleSrcIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 20, 1, 15, 4, 1, 1, 7), IpAddress().clone(hexValue="00000000")).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aclL3v4ExtRuleSrcIpAddr.setStatus('current')
aclL3v4ExtRuleDstIpAddrMask = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 20, 1, 15, 4, 1, 1, 8), IpAddress().clone(hexValue="FFFFFFFF")).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aclL3v4ExtRuleDstIpAddrMask.setStatus('current')
aclL3v4ExtRuleSrcIpAddrMask = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 20, 1, 15, 4, 1, 1, 9), IpAddress().clone(hexValue="FFFFFFFF")).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aclL3v4ExtRuleSrcIpAddrMask.setStatus('current')
aclL3v4ExtRuleTcpUdpDstPort = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 20, 1, 15, 4, 1, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 65535)).clone(-1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aclL3v4ExtRuleTcpUdpDstPort.setStatus('current')
aclL3v4ExtRuleTcpUdpSrcPort = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 20, 1, 15, 4, 1, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 65535)).clone(-1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aclL3v4ExtRuleTcpUdpSrcPort.setStatus('current')
aclL3v4ExtRuleTcpUdpDstPortMask = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 20, 1, 15, 4, 1, 1, 12), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aclL3v4ExtRuleTcpUdpDstPortMask.setStatus('current')
aclL3v4ExtRuleTcpUdpSrcPortMask = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 20, 1, 15, 4, 1, 1, 13), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aclL3v4ExtRuleTcpUdpSrcPortMask.setStatus('current')
aclL3v4ExtRuleDscp = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 20, 1, 15, 4, 1, 1, 20), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 63)).clone(-1)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: aclL3v4ExtRuleDscp.setStatus('current')
aclL3v4ExtRuleToS = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 20, 1, 15, 4, 1, 1, 21), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 15)).clone(-1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aclL3v4ExtRuleToS.setStatus('current')
aclL3v4ExtRuleIgmpType = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 20, 1, 15, 4, 1, 1, 22), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 255)).clone(-1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aclL3v4ExtRuleIgmpType.setStatus('current')
aclL3v4ExtRuleProtocolId = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 20, 1, 15, 4, 1, 1, 26), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aclL3v4ExtRuleProtocolId.setStatus('current')
aclL3v4ExtRuleAction = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 20, 1, 15, 4, 1, 1, 31), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("allow", 1), ("drop", 2))).clone('allow')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aclL3v4ExtRuleAction.setStatus('current')
aclL3v4ExtRulePriority = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 20, 1, 15, 4, 1, 1, 33), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 7)).clone(-1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aclL3v4ExtRulePriority.setStatus('current')
aclL3v4ExtRuleReplacePriority = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 20, 1, 15, 4, 1, 1, 34), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aclL3v4ExtRuleReplacePriority.setStatus('current')
aclL3v4ExtRuleStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 20, 1, 15, 4, 1, 1, 99), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aclL3v4ExtRuleStatus.setStatus('current')
aclL3v6Rule = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 75, 20, 1, 15, 5))
aclL3v6RuleTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 75, 20, 1, 15, 5, 1), )
if mibBuilder.loadTexts: aclL3v6RuleTable.setStatus('current')
aclL3v6RuleEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 75, 20, 1, 15, 5, 1, 1), ).setIndexNames((0, "DES-1210-52-CX", "aclL3v6RuleProfileNo"), (0, "DES-1210-52-CX", "aclL3v6RuleAccessID"))
if mibBuilder.loadTexts: aclL3v6RuleEntry.setStatus('current')
aclL3v6RuleAccessID = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 20, 1, 15, 5, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: aclL3v6RuleAccessID.setStatus('current')
aclL3v6RuleProfileNo = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 20, 1, 15, 5, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 50))).setMaxAccess("readonly")
if mibBuilder.loadTexts: aclL3v6RuleProfileNo.setStatus('current')
aclL3v6RuleTrafficClass = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 20, 1, 15, 5, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 255)).clone(-1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aclL3v6RuleTrafficClass.setStatus('current')
aclL3v6RuleProtocol = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 20, 1, 15, 5, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 6, 17, 24, 25))).clone(namedValues=NamedValues(("none", 0), ("tcp", 6), ("udp", 17), ("protocolid", 24), ("icmpv6", 25)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aclL3v6RuleProtocol.setStatus('current')
aclL3v6RuleProtocolId = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 20, 1, 15, 5, 1, 1, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aclL3v6RuleProtocolId.setStatus('current')
aclL3v6RuleTcpUdpDstPort = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 20, 1, 15, 5, 1, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 65535)).clone(-1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aclL3v6RuleTcpUdpDstPort.setStatus('current')
aclL3v6RuleTcpUdpSrcPort = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 20, 1, 15, 5, 1, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 65535)).clone(-1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aclL3v6RuleTcpUdpSrcPort.setStatus('current')
aclL3v6RuleTcpUdpDstPortMask = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 20, 1, 15, 5, 1, 1, 8), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aclL3v6RuleTcpUdpDstPortMask.setStatus('current')
aclL3v6RuleTcpUdpSrcPortMask = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 20, 1, 15, 5, 1, 1, 9), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aclL3v6RuleTcpUdpSrcPortMask.setStatus('current')
aclL3v6RuleICMPv6MessageType = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 20, 1, 15, 5, 1, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 255)).clone(-1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aclL3v6RuleICMPv6MessageType.setStatus('current')
aclL3v6RuleICMPv6MessageCode = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 20, 1, 15, 5, 1, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 255)).clone(-1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aclL3v6RuleICMPv6MessageCode.setStatus('current')
aclL3v6RuleDstIpv6Addr = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 20, 1, 15, 5, 1, 1, 12), Ipv6Address()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aclL3v6RuleDstIpv6Addr.setStatus('current')
aclL3v6RuleSrcIpv6Addr = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 20, 1, 15, 5, 1, 1, 13), Ipv6Address()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aclL3v6RuleSrcIpv6Addr.setStatus('current')
aclL3v6RuleDstIpv6AddrPrefixLen = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 20, 1, 15, 5, 1, 1, 14), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aclL3v6RuleDstIpv6AddrPrefixLen.setStatus('current')
aclL3v6RuleSrcIpv6AddrPrefixLen = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 20, 1, 15, 5, 1, 1, 15), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aclL3v6RuleSrcIpv6AddrPrefixLen.setStatus('current')
aclL3v6RuleAction = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 20, 1, 15, 5, 1, 1, 90), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("allow", 1), ("drop", 2))).clone('allow')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aclL3v6RuleAction.setStatus('current')
aclL3v6RulePriority = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 20, 1, 15, 5, 1, 1, 92), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 7)).clone(-1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aclL3v6RulePriority.setStatus('current')
aclL3v6RuleReplacePriority = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 20, 1, 15, 5, 1, 1, 93), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aclL3v6RuleReplacePriority.setStatus('current')
aclL3v6RuleStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 20, 1, 15, 5, 1, 1, 99), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aclL3v6RuleStatus.setStatus('current')
aclPortBindGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 75, 20, 1, 15, 6))
aclPortGroupTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 75, 20, 1, 15, 6, 1), )
if mibBuilder.loadTexts: aclPortGroupTable.setStatus('current')
aclPortGroupEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 75, 20, 1, 15, 6, 1, 1), ).setIndexNames((0, "DES-1210-52-CX", "aclPortIndex"))
if mibBuilder.loadTexts: aclPortGroupEntry.setStatus('current')
aclPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 20, 1, 15, 6, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: aclPortIndex.setStatus('current')
aclPortL2ProfileNo = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 20, 1, 15, 6, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 50))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aclPortL2ProfileNo.setStatus('current')
aclPortL3v4ProfileNo = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 20, 1, 15, 6, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 50))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aclPortL3v4ProfileNo.setStatus('current')
aclPortL3v6ProfileNo = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 20, 1, 15, 6, 1, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 50))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aclPortL3v6ProfileNo.setStatus('current')
aclHWResourceStatus = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 75, 20, 1, 15, 8))
aclHWResourceStatusTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 75, 20, 1, 15, 8, 1), )
if mibBuilder.loadTexts: aclHWResourceStatusTable.setStatus('current')
aclHWResourceStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 75, 20, 1, 15, 8, 1, 1), ).setIndexNames((0, "DES-1210-52-CX", "aclHWProfileIndex"))
if mibBuilder.loadTexts: aclHWResourceStatusEntry.setStatus('current')
aclHWProfileIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 20, 1, 15, 8, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 6))).setMaxAccess("readonly")
if mibBuilder.loadTexts: aclHWProfileIndex.setStatus('current')
aclAccessListNo = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 20, 1, 15, 8, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aclAccessListNo.setStatus('current')
aclResourceEntryCount = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 20, 1, 15, 8, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 128))).setMaxAccess("readonly")
if mibBuilder.loadTexts: aclResourceEntryCount.setStatus('current')
snmpGlobalState = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 75, 20, 1, 25, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snmpGlobalState.setStatus('current')
snmpV3User = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 75, 20, 1, 25, 2))
snmpV3Group = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 75, 20, 1, 25, 3))
snmpV3ViewTree = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 75, 20, 1, 25, 4))
snmpV3Community = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 75, 20, 1, 25, 5))
snmpV3Host = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 75, 20, 1, 25, 6))
snmpV3EngineID = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 75, 20, 1, 25, 7), SnmpEngineID()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snmpV3EngineID.setStatus('current')
snmpV3Trap = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 75, 20, 1, 25, 8))
snmpV3UserTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 75, 20, 1, 25, 2, 1), )
if mibBuilder.loadTexts: snmpV3UserTable.setStatus('current')
snmpV3UserEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 75, 20, 1, 25, 2, 1, 1), ).setIndexNames((0, "DES-1210-52-CX", "snmpV3UserName"), (0, "DES-1210-52-CX", "snmpV3UserVersion"))
if mibBuilder.loadTexts: snmpV3UserEntry.setStatus('current')
snmpV3UserName = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 20, 1, 25, 2, 1, 1, 1), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(1, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: snmpV3UserName.setStatus('current')
snmpV3UserVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 20, 1, 25, 2, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("v1", 1), ("v2c", 2), ("v3", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: snmpV3UserVersion.setStatus('current')
snmpV3UserGroupName = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 20, 1, 25, 2, 1, 1, 3), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(1, 32))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: snmpV3UserGroupName.setStatus('current')
snmpV3UserAuthProtocol = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 20, 1, 25, 2, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("none", 1), ("md5", 2), ("sha", 3)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: snmpV3UserAuthProtocol.setStatus('current')
snmpV3UserAuthProtocolPassword = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 20, 1, 25, 2, 1, 1, 5), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(1, 32))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: snmpV3UserAuthProtocolPassword.setStatus('current')
snmpV3UserPrivProtocol = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 20, 1, 25, 2, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("none", 1), ("des", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: snmpV3UserPrivProtocol.setStatus('current')
snmpV3UserPrivProtocolPassword = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 20, 1, 25, 2, 1, 1, 7), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(1, 32))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: snmpV3UserPrivProtocolPassword.setStatus('current')
snmpV3UserStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 20, 1, 25, 2, 1, 1, 8), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: snmpV3UserStatus.setStatus('current')
snmpV3GroupTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 75, 20, 1, 25, 3, 1), )
if mibBuilder.loadTexts: snmpV3GroupTable.setStatus('current')
snmpV3GroupEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 75, 20, 1, 25, 3, 1, 1), ).setIndexNames((0, "DES-1210-52-CX", "snmpV3GroupName"), (0, "DES-1210-52-CX", "snmpV3GroupSecurityModel"), (0, "DES-1210-52-CX", "snmpV3GroupSecurityLevel"))
if mibBuilder.loadTexts: snmpV3GroupEntry.setStatus('current')
snmpV3GroupName = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 20, 1, 25, 3, 1, 1, 1), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(1, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: snmpV3GroupName.setStatus('current')
snmpV3GroupSecurityModel = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 20, 1, 25, 3, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("v1", 1), ("v2c", 2), ("v3", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: snmpV3GroupSecurityModel.setStatus('current')
snmpV3GroupSecurityLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 20, 1, 25, 3, 1, 1, 3), SnmpSecurityLevel()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snmpV3GroupSecurityLevel.setStatus('current')
snmpV3GroupReadViewName = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 20, 1, 25, 3, 1, 1, 4), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: snmpV3GroupReadViewName.setStatus('current')
snmpV3GroupWriteViewName = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 20, 1, 25, 3, 1, 1, 5), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: snmpV3GroupWriteViewName.setStatus('current')
snmpV3GroupNotifyViewName = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 20, 1, 25, 3, 1, 1, 6), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: snmpV3GroupNotifyViewName.setStatus('current')
snmpV3GroupStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 20, 1, 25, 3, 1, 1, 7), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: snmpV3GroupStatus.setStatus('current')
snmpV3ViewTreeTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 75, 20, 1, 25, 4, 1), )
if mibBuilder.loadTexts: snmpV3ViewTreeTable.setStatus('current')
snmpV3ViewTreeEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 75, 20, 1, 25, 4, 1, 1), ).setIndexNames((0, "DES-1210-52-CX", "snmpV3viewTreeName"), (0, "DES-1210-52-CX", "snmpV3viewTreeSubtree"))
if mibBuilder.loadTexts: snmpV3ViewTreeEntry.setStatus('current')
snmpV3viewTreeName = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 20, 1, 25, 4, 1, 1, 1), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(1, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: snmpV3viewTreeName.setStatus('current')
snmpV3viewTreeSubtree = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 20, 1, 25, 4, 1, 1, 2), ObjectIdentifier()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snmpV3viewTreeSubtree.setStatus('current')
snmpV3viewTreeMask = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 20, 1, 25, 4, 1, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: snmpV3viewTreeMask.setStatus('current')
snmpV3viewTreeType = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 20, 1, 25, 4, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("included", 1), ("excluded", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: snmpV3viewTreeType.setStatus('current')
snmpV3viewTreeStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 20, 1, 25, 4, 1, 1, 5), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: snmpV3viewTreeStatus.setStatus('current')
snmpV3CommunityTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 75, 20, 1, 25, 5, 1), )
if mibBuilder.loadTexts: snmpV3CommunityTable.setStatus('current')
snmpV3CommunityEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 75, 20, 1, 25, 5, 1, 1), ).setIndexNames((0, "DES-1210-52-CX", "snmpV3CommunityName"))
if mibBuilder.loadTexts: snmpV3CommunityEntry.setStatus('current')
snmpV3CommunityName = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 20, 1, 25, 5, 1, 1, 1), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snmpV3CommunityName.setStatus('current')
snmpV3CommunityPolicy = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 20, 1, 25, 5, 1, 1, 2), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(1, 32))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: snmpV3CommunityPolicy.setStatus('current')
snmpV3CommunityStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 20, 1, 25, 5, 1, 1, 3), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: snmpV3CommunityStatus.setStatus('current')
snmpV3HostTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 75, 20, 1, 25, 6, 2), )
if mibBuilder.loadTexts: snmpV3HostTable.setStatus('current')
snmpV3HostEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 75, 20, 1, 25, 6, 2, 1), ).setIndexNames((0, "DES-1210-52-CX", "snmpV3HostAddress"), (0, "DES-1210-52-CX", "snmpV3IPType"))
if mibBuilder.loadTexts: snmpV3HostEntry.setStatus('current')
snmpV3HostAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 20, 1, 25, 6, 2, 1, 1), Ipv6Address()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snmpV3HostAddress.setStatus('current')
snmpV3IPType = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 20, 1, 25, 6, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("iPv4", 1), ("iPv6", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: snmpV3IPType.setStatus('current')
snmpV3HostCommunityName = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 20, 1, 25, 6, 2, 1, 3), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(1, 32))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: snmpV3HostCommunityName.setStatus('current')
snmpV3HostVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 20, 1, 25, 6, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("v1", 1), ("v2c", 2), ("v3NoAuthNoPriv", 3), ("v3AuthNoPriv", 4), ("v3AuthPriv", 5)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: snmpV3HostVersion.setStatus('current')
snmpV3HostInterfaceName = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 20, 1, 25, 6, 2, 1, 5), OctetString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: snmpV3HostInterfaceName.setStatus('current')
snmpV3HostStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 20, 1, 25, 6, 2, 1, 6), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: snmpV3HostStatus.setStatus('current')
snmpV3TrapSNMPAuthentication = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 75, 20, 1, 25, 8, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snmpV3TrapSNMPAuthentication.setStatus('current')
snmpV3TrapBootup = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 75, 20, 1, 25, 8, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snmpV3TrapBootup.setStatus('current')
snmpV3TrapPortLinkUpDown = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 75, 20, 1, 25, 8, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snmpV3TrapPortLinkUpDown.setStatus('current')
snmpV3TrapRSTPStateChange = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 75, 20, 1, 25, 8, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snmpV3TrapRSTPStateChange.setStatus('current')
snmpV3TrapFirmUpgrade = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 75, 20, 1, 25, 8, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snmpV3TrapFirmUpgrade.setStatus('current')
snmpV3TrapLBD = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 75, 20, 1, 25, 8, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snmpV3TrapLBD.setStatus('current')
traps = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 75, 20, 1, 27, 0))
topologyChange = NotificationType((1, 3, 6, 1, 4, 1, 171, 10, 75, 20, 1, 27, 0, 4)).setObjects(("IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: topologyChange.setStatus('current')
firmwareUpgradeSuccess = NotificationType((1, 3, 6, 1, 4, 1, 171, 10, 75, 20, 1, 27, 0, 8))
if mibBuilder.loadTexts: firmwareUpgradeSuccess.setStatus('current')
firmwareUpgradeFailure = NotificationType((1, 3, 6, 1, 4, 1, 171, 10, 75, 20, 1, 27, 0, 9))
if mibBuilder.loadTexts: firmwareUpgradeFailure.setStatus('current')
firmwareIllegalFile = NotificationType((1, 3, 6, 1, 4, 1, 171, 10, 75, 20, 1, 27, 0, 10))
if mibBuilder.loadTexts: firmwareIllegalFile.setStatus('current')
firmwareTransferError = NotificationType((1, 3, 6, 1, 4, 1, 171, 10, 75, 20, 1, 27, 0, 11))
if mibBuilder.loadTexts: firmwareTransferError.setStatus('current')
firmwareChecksumError = NotificationType((1, 3, 6, 1, 4, 1, 171, 10, 75, 20, 1, 27, 0, 12))
if mibBuilder.loadTexts: firmwareChecksumError.setStatus('current')
syslogGeneralGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 75, 20, 1, 16, 2))
syslogState = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 75, 20, 1, 16, 2, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: syslogState.setStatus('current')
syslogTimeStampOption = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 75, 20, 1, 16, 2, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('enable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: syslogTimeStampOption.setStatus('current')
syslogSrvSeverity = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 75, 20, 1, 16, 2, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(4, 6, 7))).clone(namedValues=NamedValues(("warning", 4), ("info", 6), ("all", 7)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: syslogSrvSeverity.setStatus('current')
syslogSrvFacility = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 75, 20, 1, 16, 2, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(128, 136, 144, 152, 160, 168, 176, 184))).clone(namedValues=NamedValues(("local0", 128), ("local1", 136), ("local2", 144), ("local3", 152), ("local4", 160), ("local5", 168), ("local6", 176), ("local7", 184)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: syslogSrvFacility.setStatus('current')
syslogSrvTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 75, 20, 1, 16, 2, 5), )
if mibBuilder.loadTexts: syslogSrvTable.setStatus('current')
syslogSrvEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 75, 20, 1, 16, 2, 5, 1), ).setIndexNames((0, "DES-1210-52-CX", "syslogSrvIPType"), (0, "DES-1210-52-CX", "syslogSrvIP"))
if mibBuilder.loadTexts: syslogSrvEntry.setStatus('current')
syslogSrvIPType = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 20, 1, 16, 2, 5, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("ipv4", 1), ("ipv6", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: syslogSrvIPType.setStatus('current')
syslogSrvIP = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 20, 1, 16, 2, 5, 1, 2), Ipv6Address()).setMaxAccess("readonly")
if mibBuilder.loadTexts: syslogSrvIP.setStatus('current')
syslogSrvPort = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 20, 1, 16, 2, 5, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535)).clone(514)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: syslogSrvPort.setStatus('current')
syslogInterfaceName = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 20, 1, 16, 2, 5, 1, 4), OctetString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: syslogInterfaceName.setStatus('current')
syslogSrvRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 20, 1, 16, 2, 5, 1, 5), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: syslogSrvRowStatus.setStatus('current')
sysLBDStateEnable = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 75, 20, 1, 17, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysLBDStateEnable.setStatus('current')
sysLBDMode = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 75, 20, 1, 17, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("port", 1), ("vlan", 2))).clone('port')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysLBDMode.setStatus('current')
sysLBDInterval = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 75, 20, 1, 17, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 32767)).clone(2)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysLBDInterval.setStatus('current')
sysLBDRecoverTime = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 75, 20, 1, 17, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(60, 1000000), )).clone(60)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysLBDRecoverTime.setStatus('current')
sysLBDCtrlTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 75, 20, 1, 17, 5), )
if mibBuilder.loadTexts: sysLBDCtrlTable.setStatus('current')
sysLBDCtrlEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 75, 20, 1, 17, 5, 1), ).setIndexNames((0, "DES-1210-52-CX", "sysLBDCtrlIndex"))
if mibBuilder.loadTexts: sysLBDCtrlEntry.setStatus('current')
sysLBDCtrlIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 20, 1, 17, 5, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysLBDCtrlIndex.setStatus('current')
sysLBDPortStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 20, 1, 17, 5, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysLBDPortStatus.setStatus('current')
sysLBDPortLoopStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 20, 1, 17, 5, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("normal", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysLBDPortLoopStatus.setStatus('current')
sysLBDVlanLoopTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 75, 20, 1, 17, 6), )
if mibBuilder.loadTexts: sysLBDVlanLoopTable.setStatus('current')
sysLBDVlanLoopEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 75, 20, 1, 17, 6, 1), ).setIndexNames((0, "DES-1210-52-CX", "sysLBDVlanLoopIndex"))
if mibBuilder.loadTexts: sysLBDVlanLoopEntry.setStatus('current')
sysLBDVlanLoopIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 20, 1, 17, 6, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysLBDVlanLoopIndex.setStatus('current')
sysLBDVlanLoopPorts = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 20, 1, 17, 6, 1, 2), PortList()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysLBDVlanLoopPorts.setStatus('current')
swLoopDetectEnabledVlanList = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 75, 20, 1, 17, 7), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swLoopDetectEnabledVlanList.setStatus('current')
sysMirrorStatus = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 75, 20, 1, 18, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysMirrorStatus.setStatus('current')
sysMirrorTargetPort = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 75, 20, 1, 18, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysMirrorTargetPort.setStatus('current')
sysMirrorCtrlIngressMirroring = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 75, 20, 1, 18, 3), PortList()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysMirrorCtrlIngressMirroring.setStatus('current')
sysMirrorCtrlEgressMirroring = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 75, 20, 1, 18, 4), PortList()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysMirrorCtrlEgressMirroring.setStatus('current')
sysSNTPServerTable = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 75, 20, 1, 20, 17))
sysSNTPTimeSeconds = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 75, 20, 1, 20, 17, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysSNTPTimeSeconds.setStatus('current')
sysSNTPFirstServer = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 75, 20, 1, 20, 17, 2), Ipv6Address()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysSNTPFirstServer.setStatus('current')
sysSNTPFirstType = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 75, 20, 1, 20, 17, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("iPv4", 1), ("iPv6", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysSNTPFirstType.setStatus('current')
sysSNTPFirstInterfaceName = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 75, 20, 1, 20, 17, 4), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysSNTPFirstInterfaceName.setStatus('current')
sysSNTPSecondServer = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 75, 20, 1, 20, 17, 5), Ipv6Address()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysSNTPSecondServer.setStatus('current')
sysSNTPSecondType = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 75, 20, 1, 20, 17, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("iPv4", 1), ("iPv6", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysSNTPSecondType.setStatus('current')
sysSNTPSecondInterfaceName = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 75, 20, 1, 20, 17, 7), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysSNTPSecondInterfaceName.setStatus('current')
sysSNTPPollInterval = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 75, 20, 1, 20, 17, 8), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysSNTPPollInterval.setStatus('current')
sysSNTPState = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 75, 20, 1, 20, 17, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("sntp", 1), ("local", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysSNTPState.setStatus('current')
sysSNTPDSTOffset = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 75, 20, 1, 20, 17, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(30, 60, 90, 120))).clone(namedValues=NamedValues(("offset30min", 30), ("offset60min", 60), ("offset90min", 90), ("offset120min", 120)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysSNTPDSTOffset.setStatus('current')
sysSNTPGMTMinutes = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 75, 20, 1, 20, 17, 11), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysSNTPGMTMinutes.setStatus('current')
sysSNTPDSTStartMon = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 75, 20, 1, 20, 17, 12), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysSNTPDSTStartMon.setStatus('current')
sysSNTPDSTStartDay = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 75, 20, 1, 20, 17, 13), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysSNTPDSTStartDay.setStatus('current')
sysSNTPDSTStartHour = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 75, 20, 1, 20, 17, 14), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysSNTPDSTStartHour.setStatus('current')
sysSNTPDSTStartMin = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 75, 20, 1, 20, 17, 15), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysSNTPDSTStartMin.setStatus('current')
sysSNTPDSTEndMon = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 75, 20, 1, 20, 17, 16), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysSNTPDSTEndMon.setStatus('current')
sysSNTPDSTEndDay = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 75, 20, 1, 20, 17, 17), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysSNTPDSTEndDay.setStatus('current')
sysSNTPDSTEndHour = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 75, 20, 1, 20, 17, 18), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysSNTPDSTEndHour.setStatus('current')
sysSNTPDSTEndMin = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 75, 20, 1, 20, 17, 19), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysSNTPDSTEndMin.setStatus('current')
sysSNTPDSTState = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 75, 20, 1, 20, 17, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("annual", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysSNTPDSTState.setStatus('current')
voicevlanSystem = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 75, 20, 1, 21, 1))
voicevlanOUI = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 75, 20, 1, 21, 2))
voicevlanDevice = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 75, 20, 1, 21, 3))
voiceVlanMode = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 75, 20, 1, 21, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: voiceVlanMode.setStatus('current')
voiceVlanId = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 75, 20, 1, 21, 1, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: voiceVlanId.setStatus('current')
voiceVlanTimeout = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 75, 20, 1, 21, 1, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: voiceVlanTimeout.setStatus('current')
voiceVlanPriority = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 75, 20, 1, 21, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: voiceVlanPriority.setStatus('current')
voicevlanPortControlTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 75, 20, 1, 21, 1, 6), )
if mibBuilder.loadTexts: voicevlanPortControlTable.setStatus('current')
voicevlanPortControlEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 75, 20, 1, 21, 1, 6, 1), ).setIndexNames((0, "DES-1210-52-CX", "voicevlanPortControlIndex"))
if mibBuilder.loadTexts: voicevlanPortControlEntry.setStatus('current')
voicevlanPortControlIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 20, 1, 21, 1, 6, 1, 1), InterfaceIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: voicevlanPortControlIndex.setStatus('current')
voicevlanPortAutoDetection = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 20, 1, 21, 1, 6, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: voicevlanPortAutoDetection.setStatus('current')
voicevlanPortManuTagMode = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 20, 1, 21, 1, 6, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("tag", 1), ("untag", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: voicevlanPortManuTagMode.setStatus('current')
voicevlanPortCurrentTagMode = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 20, 1, 21, 1, 6, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("tag", 1), ("untag", 2), ("none", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: voicevlanPortCurrentTagMode.setStatus('current')
voicevlanPortState = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 20, 1, 21, 1, 6, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("manual", 1), ("dynamic", 2), ("none", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: voicevlanPortState.setStatus('current')
voicevlanOUITable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 75, 20, 1, 21, 2, 1), )
if mibBuilder.loadTexts: voicevlanOUITable.setStatus('current')
voicevlanOUIEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 75, 20, 1, 21, 2, 1, 1), ).setIndexNames((0, "DES-1210-52-CX", "voicevlanOUITelephonyOUI"))
if mibBuilder.loadTexts: voicevlanOUIEntry.setStatus('current')
voicevlanOUITelephonyOUI = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 20, 1, 21, 2, 1, 1, 1), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: voicevlanOUITelephonyOUI.setStatus('current')
voicevlanOUIDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 20, 1, 21, 2, 1, 1, 2), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: voicevlanOUIDescription.setStatus('current')
voicevlanOUIMask = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 20, 1, 21, 2, 1, 1, 3), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: voicevlanOUIMask.setStatus('current')
voicevlanOUIStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 20, 1, 21, 2, 1, 1, 4), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: voicevlanOUIStatus.setStatus('current')
voicevlanDeviceTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 75, 20, 1, 21, 3, 1), )
if mibBuilder.loadTexts: voicevlanDeviceTable.setStatus('current')
voicevlanDeviceEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 75, 20, 1, 21, 3, 1, 1), ).setIndexNames((0, "DES-1210-52-CX", "voicevlanDeviceIndexMac"))
if mibBuilder.loadTexts: voicevlanDeviceEntry.setStatus('current')
voicevlanDeviceIndexMac = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 20, 1, 21, 3, 1, 1, 1), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: voicevlanDeviceIndexMac.setStatus('current')
voicevlanDevicePort = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 20, 1, 21, 3, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: voicevlanDevicePort.setStatus('current')
voicevlanDevicePriority = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 20, 1, 21, 3, 1, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: voicevlanDevicePriority.setStatus('current')
voicevlanDeviceTagType = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 20, 1, 21, 3, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("tag", 1), ("untag", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: voicevlanDeviceTagType.setStatus('current')
voicevlanDeviceStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 20, 1, 21, 3, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 6))).clone(namedValues=NamedValues(("active", 1), ("destroy", 6)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: voicevlanDeviceStatus.setStatus('current')
autoSurveillanceVlanSystem = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 75, 20, 1, 26, 1))
autoSurveillanceVlanOUI = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 75, 20, 1, 26, 2))
autoSurveillanceVlanMode = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 75, 20, 1, 26, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: autoSurveillanceVlanMode.setStatus('current')
autoSurveillanceVlanId = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 75, 20, 1, 26, 1, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: autoSurveillanceVlanId.setStatus('current')
autoSurveillanceVlanPriority = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 75, 20, 1, 26, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: autoSurveillanceVlanPriority.setStatus('current')
autoSurveillanceVlanTaggedUplinkDownlinkPort = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 75, 20, 1, 26, 1, 4), PortList()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: autoSurveillanceVlanTaggedUplinkDownlinkPort.setStatus('current')
autoSurveillanceVlanOUITable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 75, 20, 1, 26, 2, 1), )
if mibBuilder.loadTexts: autoSurveillanceVlanOUITable.setStatus('current')
autoSurveillanceVlanOUIEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 75, 20, 1, 26, 2, 1, 1), ).setIndexNames((0, "DES-1210-52-CX", "autoSurveillanceVlanOUISurveillanceOUI"))
if mibBuilder.loadTexts: autoSurveillanceVlanOUIEntry.setStatus('current')
autoSurveillanceVlanOUISurveillanceOUI = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 20, 1, 26, 2, 1, 1, 1), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: autoSurveillanceVlanOUISurveillanceOUI.setStatus('current')
autoSurveillanceVlanOUIDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 20, 1, 26, 2, 1, 1, 2), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: autoSurveillanceVlanOUIDescription.setStatus('current')
autoSurveillanceVlanOUIMask = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 20, 1, 26, 2, 1, 1, 3), MacAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: autoSurveillanceVlanOUIMask.setStatus('current')
autoSurveillanceVlanOUIComponentType = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 20, 1, 26, 2, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("video-Management-Server", 0), ("vMS-Client", 1), ("video-Encoder", 2), ("network-Storage", 3), ("other-IP-Surveillance-Devices", 4), ("d-Link-Surveillance-Device", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: autoSurveillanceVlanOUIComponentType.setStatus('current')
autoSurveillanceVlanOUIStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 20, 1, 26, 2, 1, 1, 5), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: autoSurveillanceVlanOUIStatus.setStatus('current')
swTimeRangeSettingTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 75, 20, 1, 32, 1), )
if mibBuilder.loadTexts: swTimeRangeSettingTable.setStatus('current')
swTimeRangeSettingEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 75, 20, 1, 32, 1, 1), ).setIndexNames((0, "DES-1210-52-CX", "swTimeRangeIndex"))
if mibBuilder.loadTexts: swTimeRangeSettingEntry.setStatus('current')
swTimeRangeIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 20, 1, 32, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 52))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swTimeRangeIndex.setStatus('current')
swTimeRangeName = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 20, 1, 32, 1, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 20))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swTimeRangeName.setStatus('current')
swTimeRangeDate = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 20, 1, 32, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swTimeRangeDate.setStatus('current')
swTimeRangeStartYear = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 20, 1, 32, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2009, 2010, 2011, 2012, 2013, 2014, 2015, 2016, 2017, 2018, 2019, 2020, 2021, 2022, 2023, 2024, 2025, 2026, 2027, 2028, 2029, 2030, 2031, 2032, 2033, 2034, 2035, 2036, 2037))).clone(namedValues=NamedValues(("y2009", 2009), ("y2010", 2010), ("y2011", 2011), ("y2012", 2012), ("y2013", 2013), ("y2014", 2014), ("y2015", 2015), ("y2016", 2016), ("y2017", 2017), ("y2018", 2018), ("y2019", 2019), ("y2020", 2020), ("y2021", 2021), ("y2022", 2022), ("y2023", 2023), ("y2024", 2024), ("y2025", 2025), ("y2026", 2026), ("y2027", 2027), ("y2028", 2028), ("y2029", 2029), ("y2030", 2030), ("y2031", 2031), ("y2032", 2032), ("y2033", 2033), ("y2034", 2034), ("y2035", 2035), ("y2036", 2036), ("y2037", 2037)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swTimeRangeStartYear.setStatus('current')
swTimeRangeStartMonth = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 20, 1, 32, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12))).clone(namedValues=NamedValues(("january", 1), ("february", 2), ("march", 3), ("april", 4), ("may", 5), ("june", 6), ("july", 7), ("august", 8), ("september", 9), ("october", 10), ("november", 11), ("december", 12)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swTimeRangeStartMonth.setStatus('current')
swTimeRangeStartDay = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 20, 1, 32, 1, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 31))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swTimeRangeStartDay.setStatus('current')
swTimeRangeStartHour = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 20, 1, 32, 1, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 23))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swTimeRangeStartHour.setStatus('current')
swTimeRangeStartMinute = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 20, 1, 32, 1, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 59))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swTimeRangeStartMinute.setStatus('current')
swTimeRangeEndYear = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 20, 1, 32, 1, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2009, 2010, 2011, 2012, 2013, 2014, 2015, 2016, 2017, 2018, 2019, 2020, 2021, 2022, 2023, 2024, 2025, 2026, 2027, 2028, 2029, 2030, 2031, 2032, 2033, 2034, 2035, 2036, 2037))).clone(namedValues=NamedValues(("y2009", 2009), ("y2010", 2010), ("y2011", 2011), ("y2012", 2012), ("y2013", 2013), ("y2014", 2014), ("y2015", 2015), ("y2016", 2016), ("y2017", 2017), ("y2018", 2018), ("y2019", 2019), ("y2020", 2020), ("y2021", 2021), ("y2022", 2022), ("y2023", 2023), ("y2024", 2024), ("y2025", 2025), ("y2026", 2026), ("y2027", 2027), ("y2028", 2028), ("y2029", 2029), ("y2030", 2030), ("y2031", 2031), ("y2032", 2032), ("y2033", 2033), ("y2034", 2034), ("y2035", 2035), ("y2036", 2036), ("y2037", 2037)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swTimeRangeEndYear.setStatus('current')
swTimeRangeEndMonth = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 20, 1, 32, 1, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12))).clone(namedValues=NamedValues(("january", 1), ("february", 2), ("march", 3), ("april", 4), ("may", 5), ("june", 6), ("july", 7), ("august", 8), ("september", 9), ("october", 10), ("november", 11), ("december", 12)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swTimeRangeEndMonth.setStatus('current')
swTimeRangeEndDay = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 20, 1, 32, 1, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 31))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swTimeRangeEndDay.setStatus('current')
swTimeRangeEndHour = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 20, 1, 32, 1, 1, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 23))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swTimeRangeEndHour.setStatus('current')
swTimeRangeEndMinute = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 20, 1, 32, 1, 1, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 59))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swTimeRangeEndMinute.setStatus('current')
swTimeRangeMonday = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 20, 1, 32, 1, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swTimeRangeMonday.setStatus('current')
swTimeRangeTuesday = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 20, 1, 32, 1, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swTimeRangeTuesday.setStatus('current')
swTimeRangeWednesday = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 20, 1, 32, 1, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swTimeRangeWednesday.setStatus('current')
swTimeRangeThursday = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 20, 1, 32, 1, 1, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swTimeRangeThursday.setStatus('current')
swTimeRangeFriday = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 20, 1, 32, 1, 1, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swTimeRangeFriday.setStatus('current')
swTimeRangeSaturday = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 20, 1, 32, 1, 1, 19), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swTimeRangeSaturday.setStatus('current')
swTimeRangeSunday = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 20, 1, 32, 1, 1, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swTimeRangeSunday.setStatus('current')
swTimeRangeRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 20, 1, 32, 1, 1, 21), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: swTimeRangeRowStatus.setStatus('current')
dlinklldpState = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 75, 20, 1, 24, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dlinklldpState.setStatus('current')
dlinklldpMsgHoldMultiplier = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 75, 20, 1, 24, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(2, 10))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dlinklldpMsgHoldMultiplier.setStatus('current')
dlinklldpMsgTxInterval = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 75, 20, 1, 24, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(5, 32768))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dlinklldpMsgTxInterval.setStatus('current')
dlinklldpReinitDelay = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 75, 20, 1, 24, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 10))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dlinklldpReinitDelay.setStatus('current')
dlinklldpTxDelay = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 75, 20, 1, 24, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 8192))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dlinklldpTxDelay.setStatus('current')
dlinklldpConfigManAddrTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 75, 20, 1, 24, 7), )
if mibBuilder.loadTexts: dlinklldpConfigManAddrTable.setStatus('current')
dlinklldpConfigManAddrEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 75, 20, 1, 24, 7, 1), ).setIndexNames((0, "DES-1210-52-CX", "dlinklldpLocManAddrSubtype"), (0, "DES-1210-52-CX", "dlinklldpLocManAddr"))
if mibBuilder.loadTexts: dlinklldpConfigManAddrEntry.setStatus('current')
dlinklldpLocManAddrSubtype = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 20, 1, 24, 7, 1, 1), AddressFamilyNumbers()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dlinklldpLocManAddrSubtype.setStatus('current')
dlinklldpLocManAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 20, 1, 24, 7, 1, 2), LldpManAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dlinklldpLocManAddr.setStatus('current')
dlinklldpConfigManAddrPortsTxEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 20, 1, 24, 7, 1, 3), PortList().clone(hexValue="")).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dlinklldpConfigManAddrPortsTxEnable.setStatus('current')
dlinkGreenLEDShutoff = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 75, 20, 1, 31, 1))
dlinkGreenPortShutoff = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 75, 20, 1, 31, 2))
dlinkGreenSystemHibernation = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 75, 20, 1, 31, 4))
dlinkGreenLEDShutoffPortList = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 75, 20, 1, 31, 1, 1), PortList()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dlinkGreenLEDShutoffPortList.setStatus('current')
dlinkGreenLEDShutoffState = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 75, 20, 1, 31, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dlinkGreenLEDShutoffState.setStatus('current')
dlinkGreenLEDShutoffTimeProfile1 = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 75, 20, 1, 31, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 20))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dlinkGreenLEDShutoffTimeProfile1.setStatus('current')
dlinkGreenLEDShutoffTimeProfile2 = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 75, 20, 1, 31, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 20))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dlinkGreenLEDShutoffTimeProfile2.setStatus('current')
dlinkGreenPortShutoffPortList = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 75, 20, 1, 31, 2, 1), PortList()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dlinkGreenPortShutoffPortList.setStatus('current')
dlinkGreenPortShutoffState = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 75, 20, 1, 31, 2, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dlinkGreenPortShutoffState.setStatus('current')
dlinkGreenPortShutoffTimeProfile1 = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 75, 20, 1, 31, 2, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 20))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dlinkGreenPortShutoffTimeProfile1.setStatus('current')
dlinkGreenPortShutoffTimeProfile2 = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 75, 20, 1, 31, 2, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 20))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dlinkGreenPortShutoffTimeProfile2.setStatus('current')
dlinkGreenSystemHibernationState = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 75, 20, 1, 31, 4, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dlinkGreenSystemHibernationState.setStatus('current')
dlinkGreenSystemHibernationTimeProfile1 = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 75, 20, 1, 31, 4, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 20))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dlinkGreenSystemHibernationTimeProfile1.setStatus('current')
dlinkGreenSystemHibernationTimeProfile2 = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 75, 20, 1, 31, 4, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 20))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dlinkGreenSystemHibernationTimeProfile2.setStatus('current')
dlinkPowerSavingGlobalSetting = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 75, 20, 1, 31, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dlinkPowerSavingGlobalSetting.setStatus('current')
securityDhcpServerScreen = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 75, 20, 1, 14, 7))
dhcpServerScreenEnablePortlist = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 75, 20, 1, 14, 7, 1), PortList()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dhcpServerScreenEnablePortlist.setStatus('current')
dhcpServerScreenTrustedServerTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 75, 20, 1, 14, 7, 3), )
if mibBuilder.loadTexts: dhcpServerScreenTrustedServerTable.setStatus('current')
dhcpServerScreenTrustedServerEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 75, 20, 1, 14, 7, 3, 1), ).setIndexNames((0, "DES-1210-52-CX", "dhcpServerScreenTrustedServerIndex"))
if mibBuilder.loadTexts: dhcpServerScreenTrustedServerEntry.setStatus('current')
dhcpServerScreenTrustedServerIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 20, 1, 14, 7, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 5))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dhcpServerScreenTrustedServerIndex.setStatus('current')
dhcpServerScreenTrustedServerAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 20, 1, 14, 7, 3, 1, 2), Ipv6Address()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dhcpServerScreenTrustedServerAddress.setStatus('current')
dhcpServerScreenIPType = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 20, 1, 14, 7, 3, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("iPv4", 1), ("iPv6", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dhcpServerScreenIPType.setStatus('current')
dhcpServerScreenTrustedServerStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 20, 1, 14, 7, 3, 1, 4), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: dhcpServerScreenTrustedServerStatus.setStatus('current')
securityTrafficSeg = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 75, 20, 1, 14, 9))
trafficSegStatus = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 75, 20, 1, 14, 9, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: trafficSegStatus.setStatus('current')
trafficSegTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 75, 20, 1, 14, 9, 2), )
if mibBuilder.loadTexts: trafficSegTable.setStatus('current')
trafficSegEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 75, 20, 1, 14, 9, 2, 1), ).setIndexNames((0, "DES-1210-52-CX", "trafficSegIfIndex"))
if mibBuilder.loadTexts: trafficSegEntry.setStatus('current')
trafficSegIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 20, 1, 14, 9, 2, 1, 1), InterfaceIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: trafficSegIfIndex.setStatus('current')
trafficSegMemberList = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 20, 1, 14, 9, 2, 1, 2), PortList()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: trafficSegMemberList.setStatus('current')
mcastFilterPortTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 75, 20, 1, 28, 1), )
if mibBuilder.loadTexts: mcastFilterPortTable.setStatus('current')
mcastFilterPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 75, 20, 1, 28, 1, 1), ).setIndexNames((0, "DES-1210-52-CX", "mcastFilterPortIndex"))
if mibBuilder.loadTexts: mcastFilterPortEntry.setStatus('current')
mcastFilterPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 20, 1, 28, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcastFilterPortIndex.setStatus('current')
mcastFilterPortType = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 20, 1, 28, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("forward-unregistered-groups", 1), ("filter-unregistered-groups", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mcastFilterPortType.setStatus('current')
doSCtrlState = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 75, 20, 1, 99, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: doSCtrlState.setStatus('current')
doSCtrlTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 75, 20, 1, 99, 2), )
if mibBuilder.loadTexts: doSCtrlTable.setStatus('current')
doSCtrlEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 75, 20, 1, 99, 2, 1), ).setIndexNames((0, "DES-1210-52-CX", "doSCtrlType"))
if mibBuilder.loadTexts: doSCtrlEntry.setStatus('current')
doSCtrlType = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 20, 1, 99, 2, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 4, 5, 6, 7))).clone(namedValues=NamedValues(("landattack", 1), ("blatattack", 2), ("tcpnullscan", 4), ("tcpxmascan", 5), ("tcpsynfin", 6), ("tcpsynsrcportless1024", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: doSCtrlType.setStatus('current')
doSCtrlDisplayState = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 20, 1, 99, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: doSCtrlDisplayState.setStatus('current')
rmonGlobalState = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 75, 20, 1, 47, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rmonGlobalState.setStatus('current')
rmonStatistics = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 75, 20, 1, 47, 2))
rmonHistory = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 75, 20, 1, 47, 3))
rmonAlarm = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 75, 20, 1, 47, 4))
rmonEvent = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 75, 20, 1, 47, 5))
rmonStatsTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 75, 20, 1, 47, 2, 1), )
if mibBuilder.loadTexts: rmonStatsTable.setStatus('current')
rmonStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 75, 20, 1, 47, 2, 1, 1), ).setIndexNames((0, "DES-1210-52-CX", "rmonStatsIndex"))
if mibBuilder.loadTexts: rmonStatsEntry.setStatus('current')
rmonStatsIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 20, 1, 47, 2, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rmonStatsIndex.setStatus('current')
rmonStatsDataSource = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 20, 1, 47, 2, 1, 1, 2), ObjectIdentifier()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: rmonStatsDataSource.setStatus('current')
rmonStatsOwner = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 20, 1, 47, 2, 1, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 32))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: rmonStatsOwner.setStatus('current')
rmonStatsStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 20, 1, 47, 2, 1, 1, 4), RmonStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: rmonStatsStatus.setStatus('current')
rmonHistoryTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 75, 20, 1, 47, 3, 1), )
if mibBuilder.loadTexts: rmonHistoryTable.setStatus('current')
rmonHistoryEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 75, 20, 1, 47, 3, 1, 1), ).setIndexNames((0, "DES-1210-52-CX", "rmonHistoryIndex"))
if mibBuilder.loadTexts: rmonHistoryEntry.setStatus('current')
rmonHistoryIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 20, 1, 47, 3, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rmonHistoryIndex.setStatus('current')
rmonHistoryDataSource = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 20, 1, 47, 3, 1, 1, 2), ObjectIdentifier()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: rmonHistoryDataSource.setStatus('current')
rmonHistoryBucketsRequested = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 20, 1, 47, 3, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535)).clone(50)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: rmonHistoryBucketsRequested.setStatus('current')
rmonHistoryInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 20, 1, 47, 3, 1, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 3600)).clone(1800)).setUnits('Seconds').setMaxAccess("readcreate")
if mibBuilder.loadTexts: rmonHistoryInterval.setStatus('current')
rmonHistoryOwner = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 20, 1, 47, 3, 1, 1, 5), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 32))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: rmonHistoryOwner.setStatus('current')
rmonHistoryStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 20, 1, 47, 3, 1, 1, 6), RmonStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: rmonHistoryStatus.setStatus('current')
rmonAlarmTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 75, 20, 1, 47, 4, 1), )
if mibBuilder.loadTexts: rmonAlarmTable.setStatus('current')
rmonAlarmEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 75, 20, 1, 47, 4, 1, 1), ).setIndexNames((0, "DES-1210-52-CX", "rmonAlarmIndex"))
if mibBuilder.loadTexts: rmonAlarmEntry.setStatus('current')
rmonAlarmIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 20, 1, 47, 4, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rmonAlarmIndex.setStatus('current')
rmonAlarmInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 20, 1, 47, 4, 1, 1, 2), Integer32()).setUnits('Seconds').setMaxAccess("readcreate")
if mibBuilder.loadTexts: rmonAlarmInterval.setStatus('current')
rmonAlarmVariable = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 20, 1, 47, 4, 1, 1, 3), ObjectIdentifier()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: rmonAlarmVariable.setStatus('current')
rmonAlarmSampleType = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 20, 1, 47, 4, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("absoluteValue", 1), ("deltaValue", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: rmonAlarmSampleType.setStatus('current')
rmonAlarmRisingThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 20, 1, 47, 4, 1, 1, 5), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: rmonAlarmRisingThreshold.setStatus('current')
rmonAlarmFallingThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 20, 1, 47, 4, 1, 1, 6), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: rmonAlarmFallingThreshold.setStatus('current')
rmonAlarmRisingEventIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 20, 1, 47, 4, 1, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: rmonAlarmRisingEventIndex.setStatus('current')
rmonAlarmFallingEventIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 20, 1, 47, 4, 1, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: rmonAlarmFallingEventIndex.setStatus('current')
rmonAlarmOwner = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 20, 1, 47, 4, 1, 1, 9), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 32))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: rmonAlarmOwner.setStatus('current')
rmonAlarmStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 20, 1, 47, 4, 1, 1, 10), RmonStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: rmonAlarmStatus.setStatus('current')
rmonEventTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 75, 20, 1, 47, 5, 1), )
if mibBuilder.loadTexts: rmonEventTable.setStatus('current')
rmonEventEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 75, 20, 1, 47, 5, 1, 1), ).setIndexNames((0, "DES-1210-52-CX", "rmonEventIndex"))
if mibBuilder.loadTexts: rmonEventEntry.setStatus('current')
rmonEventIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 20, 1, 47, 5, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rmonEventIndex.setStatus('current')
rmonEventDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 20, 1, 47, 5, 1, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 127))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: rmonEventDescription.setStatus('current')
rmonEventType = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 20, 1, 47, 5, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("none", 1), ("log", 2), ("snmptrap", 3), ("logandtrap", 4)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: rmonEventType.setStatus('current')
rmonEventCommunity = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 20, 1, 47, 5, 1, 1, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 32))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: rmonEventCommunity.setStatus('current')
rmonEventOwner = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 20, 1, 47, 5, 1, 1, 5), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 32))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: rmonEventOwner.setStatus('current')
rmonEventStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 20, 1, 47, 5, 1, 1, 6), RmonStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: rmonEventStatus.setStatus('current')
neighborTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 75, 20, 1, 50, 1), )
if mibBuilder.loadTexts: neighborTable.setStatus('current')
neighborEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 75, 20, 1, 50, 1, 1), ).setIndexNames((0, "DES-1210-52-CX", "neighborIfindex"), (0, "DES-1210-52-CX", "neighborIPv6Addr"), (0, "DES-1210-52-CX", "neighborMACAddr"))
if mibBuilder.loadTexts: neighborEntry.setStatus('current')
neighborIfindex = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 20, 1, 50, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: neighborIfindex.setStatus('current')
neighborIPv6Addr = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 20, 1, 50, 1, 1, 2), Ipv6Address()).setMaxAccess("readonly")
if mibBuilder.loadTexts: neighborIPv6Addr.setStatus('current')
neighborMACAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 20, 1, 50, 1, 1, 3), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: neighborMACAddr.setStatus('current')
neighborType = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 20, 1, 50, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("static", 1), ("dynamic", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: neighborType.setStatus('current')
neighborCacheState = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 20, 1, 50, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("static", 1), ("reachable", 2), ("incomplete", 3), ("stale", 4), ("delay", 5), ("probe", 6), ("notinservice", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: neighborCacheState.setStatus('current')
neighborRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 20, 1, 50, 1, 1, 7), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: neighborRowStatus.setStatus('current')
dhcpRelayControl = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 75, 20, 1, 61, 1))
dhcpRelayManagement = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 75, 20, 1, 61, 2))
dhcpRelayManagementOption82 = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 75, 20, 1, 61, 2, 2))
dhcpRelayState = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 75, 20, 1, 61, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dhcpRelayState.setStatus('current')
dhcpRelayHopCount = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 75, 20, 1, 61, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dhcpRelayHopCount.setStatus('current')
dhcpRelayTimeThreshold = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 75, 20, 1, 61, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dhcpRelayTimeThreshold.setStatus('current')
dhcpRelayInterfaceSettingsTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 75, 20, 1, 61, 2, 1), )
if mibBuilder.loadTexts: dhcpRelayInterfaceSettingsTable.setStatus('current')
dhcpRelayInterfaceSettingsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 75, 20, 1, 61, 2, 1, 1), ).setIndexNames((0, "DES-1210-52-CX", "dhcpRelayInterface"), (0, "DES-1210-52-CX", "dhcpRelayServerIP"))
if mibBuilder.loadTexts: dhcpRelayInterfaceSettingsEntry.setStatus('current')
dhcpRelayInterface = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 20, 1, 61, 2, 1, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 12))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dhcpRelayInterface.setStatus('current')
dhcpRelayServerIP = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 20, 1, 61, 2, 1, 1, 2), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dhcpRelayServerIP.setStatus('current')
dhcpRelayInterfaceSettingsRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 20, 1, 61, 2, 1, 1, 3), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: dhcpRelayInterfaceSettingsRowStatus.setStatus('current')
dhcpRelayOption82State = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 75, 20, 1, 61, 2, 2, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dhcpRelayOption82State.setStatus('current')
dhcpRelayOption82CheckState = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 75, 20, 1, 61, 2, 2, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dhcpRelayOption82CheckState.setStatus('current')
dhcpRelayOption82Policy = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 75, 20, 1, 61, 2, 2, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("replace", 1), ("drop", 2), ("keep", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dhcpRelayOption82Policy.setStatus('current')
dhcpRelayOption82RemoteIDType = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 75, 20, 1, 61, 2, 2, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("default", 1), ("userdefined", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dhcpRelayOption82RemoteIDType.setStatus('current')
dhcpRelayOption82RemoteID = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 75, 20, 1, 61, 2, 2, 5), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dhcpRelayOption82RemoteID.setStatus('current')
dhcpLocalRelayGlobalState = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 75, 20, 1, 62, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dhcpLocalRelayGlobalState.setStatus('current')
dhcpLocalRelayTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 75, 20, 1, 62, 2), )
if mibBuilder.loadTexts: dhcpLocalRelayTable.setStatus('current')
dhcpLocalRelayEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 75, 20, 1, 62, 2, 1), ).setIndexNames((0, "DES-1210-52-CX", "dhcpLocalRelaySettingsVLANID"))
if mibBuilder.loadTexts: dhcpLocalRelayEntry.setStatus('current')
dhcpLocalRelaySettingsVLANID = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 20, 1, 62, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4094))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dhcpLocalRelaySettingsVLANID.setStatus('current')
dhcpLocalRelaySettingsState = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 20, 1, 62, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dhcpLocalRelaySettingsState.setStatus('current')
dhcpv6RelayControl = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 75, 20, 1, 63, 1))
dhcpv6RelayManagement = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 75, 20, 1, 63, 2))
dhcpv6RelayOption37 = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 75, 20, 1, 63, 3))
dhcpv6RelayState = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 75, 20, 1, 63, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dhcpv6RelayState.setStatus('current')
dhcpv6RelayHopCount = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 75, 20, 1, 63, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dhcpv6RelayHopCount.setStatus('current')
dhcpv6RelayInterfaceSettingsTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 75, 20, 1, 63, 2, 1), )
if mibBuilder.loadTexts: dhcpv6RelayInterfaceSettingsTable.setStatus('current')
dhcpv6RelayInterfaceSettingsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 75, 20, 1, 63, 2, 1, 1), ).setIndexNames((0, "DES-1210-52-CX", "dhcpv6RelayInterface"), (0, "DES-1210-52-CX", "dhcpv6RelayServerIP"))
if mibBuilder.loadTexts: dhcpv6RelayInterfaceSettingsEntry.setStatus('current')
dhcpv6RelayInterface = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 20, 1, 63, 2, 1, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 12))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dhcpv6RelayInterface.setStatus('current')
dhcpv6RelayServerIP = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 20, 1, 63, 2, 1, 1, 2), Ipv6Address()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dhcpv6RelayServerIP.setStatus('current')
dhcpv6RelayInterfaceSettingsRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 75, 20, 1, 63, 2, 1, 1, 99), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: dhcpv6RelayInterfaceSettingsRowStatus.setStatus('current')
dhcpv6RelayOption37State = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 75, 20, 1, 63, 3, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dhcpv6RelayOption37State.setStatus('current')
dhcpv6RelayOption37CheckState = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 75, 20, 1, 63, 3, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dhcpv6RelayOption37CheckState.setStatus('current')
dhcpv6RelayOption37RemoteIDType = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 75, 20, 1, 63, 3, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("default", 0), ("cid-with-user-define", 1), ("user-define", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dhcpv6RelayOption37RemoteIDType.setStatus('current')
dhcpv6RelayOption37RemoteID = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 75, 20, 1, 63, 3, 4), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dhcpv6RelayOption37RemoteID.setStatus('current')
mibBuilder.exportSymbols("DES-1210-52-CX", qosTOSType04=qosTOSType04, mcastFilterPortType=mcastFilterPortType, impbAutoScanIpAddressTo=impbAutoScanIpAddressTo, aclProfileEntry=aclProfileEntry, companyNeighbor=companyNeighbor, qosDiffServType19=qosDiffServType19, snmpV3UserPrivProtocol=snmpV3UserPrivProtocol, sslSecurityHttpStatus=sslSecurityHttpStatus, snmpV3GroupReadViewName=snmpV3GroupReadViewName, snmpV3TrapLBD=snmpV3TrapLBD, snmpV3ViewTreeEntry=snmpV3ViewTreeEntry, sysSave=sysSave, autoSurveillanceVlanOUITable=autoSurveillanceVlanOUITable, qosDiffServType00=qosDiffServType00, swAuthAuthTxPeriod=swAuthAuthTxPeriod, rmonHistory=rmonHistory, aclProfileName=aclProfileName, sysSNTPFirstServer=sysSNTPFirstServer, swTimeRangeStartYear=swTimeRangeStartYear, stpPortDesignatedRoot=stpPortDesignatedRoot, aclL3v4ExtRuleIgmpType=aclL3v4ExtRuleIgmpType, sysFirmwareVersion=sysFirmwareVersion, companySystem=companySystem, cableDiagLengthinRange=cableDiagLengthinRange, swTimeRangeIndex=swTimeRangeIndex, snmpV3GroupTable=snmpV3GroupTable, snmpV3TrapSNMPAuthentication=snmpV3TrapSNMPAuthentication, swAuthRadiusServerTable=swAuthRadiusServerTable, dhcpv6RelayControl=dhcpv6RelayControl, aclL3v4ExtRuleTable=aclL3v4ExtRuleTable, companyLBD=companyLBD, aclL3v4ExtRuleTcpUdpSrcPort=aclL3v4ExtRuleTcpUdpSrcPort, sshUserInfoHostIpv6=sshUserInfoHostIpv6, qosQ1p=qosQ1p, swAuthRadiusServerAuthenticationPort=swAuthRadiusServerAuthenticationPort, mldsQueryMaxResponseTime=mldsQueryMaxResponseTime, aclL3v4ExtRuleTcpUdpDstPortMask=aclL3v4ExtRuleTcpUdpDstPortMask, voicevlanPortState=voicevlanPortState, qosDiffServType04=qosDiffServType04, snmpV3HostEntry=snmpV3HostEntry, rmonStatsEntry=rmonStatsEntry, rmonEventDescription=rmonEventDescription, aclL3v4ExtRuleSrcIpAddr=aclL3v4ExtRuleSrcIpAddr, dhcpServerScreenIPType=dhcpServerScreenIPType, dot1qVlanRowStatus=dot1qVlanRowStatus, sshUserInfoTable=sshUserInfoTable, dlinkGreenPortShutoffPortList=dlinkGreenPortShutoffPortList, qosDiffServType13=qosDiffServType13, trustedHostRowStatus=trustedHostRowStatus, aclL3v4ExtRuleEntry=aclL3v4ExtRuleEntry, laPortControlIndex=laPortControlIndex, igsVlanMulticastGroupEntry=igsVlanMulticastGroupEntry, sysPortCtrlFlowControlOper=sysPortCtrlFlowControlOper, sshUserInfoAuth=sshUserInfoAuth, snmpV3Community=snmpV3Community, qosDiffServType17=qosDiffServType17, securityTrafficSeg=securityTrafficSeg, stpRootPort=stpRootPort, stpBridgeForwardDelay=stpBridgeForwardDelay, dhcpServerScreenTrustedServerIndex=dhcpServerScreenTrustedServerIndex, des_1210_52_cx=des_1210_52_cx, mldsVlanRtrPortList=mldsVlanRtrPortList, sysLBDVlanLoopEntry=sysLBDVlanLoopEntry, impbBlackListIpAddress=impbBlackListIpAddress, aclL3v4ExtRuleProtocolId=aclL3v4ExtRuleProtocolId, rmonAlarm=rmonAlarm, swTimeRangeEndYear=swTimeRangeEndYear, rmonEvent=rmonEvent, autoSurveillanceVlanOUI=autoSurveillanceVlanOUI, qosDiffServType03=qosDiffServType03, voicevlanDevicePort=voicevlanDevicePort, mldsVlanFilterTable=mldsVlanFilterTable, snmpV3ViewTree=snmpV3ViewTree, qosMode=qosMode, cableDiagPair1FaultDistance=cableDiagPair1FaultDistance, autoSurveillanceVlanOUIEntry=autoSurveillanceVlanOUIEntry, companyMulticastFilter=companyMulticastFilter, impbWhiteListRowStatus=impbWhiteListRowStatus, dot1qVlanPortEntry=dot1qVlanPortEntry, dlinkGreenLEDShutoffTimeProfile2=dlinkGreenLEDShutoffTimeProfile2, neighborMACAddr=neighborMACAddr, igsVlanQueryInterval=igsVlanQueryInterval, sshAuthenMethodHostKeyAdmin=sshAuthenMethodHostKeyAdmin, qosDiffServType16=qosDiffServType16, mldsVlanRouterVlanId=mldsVlanRouterVlanId, qosTOSType01=qosTOSType01, qosDiffServType34=qosDiffServType34, snmpV3ViewTreeTable=snmpV3ViewTreeTable, sysSNTPDSTStartMon=sysSNTPDSTStartMon, aclResourceEntryCount=aclResourceEntryCount, dhcpServerScreenTrustedServerEntry=dhcpServerScreenTrustedServerEntry, Timeout=Timeout, aclL3v6RuleDstIpv6AddrPrefixLen=aclL3v6RuleDstIpv6AddrPrefixLen, neighborType=neighborType, sysDdp=sysDdp, igsVlanRouterVlanId=igsVlanRouterVlanId, dlinklldpConfigManAddrPortsTxEnable=dlinklldpConfigManAddrPortsTxEnable, qosDiffServType43=qosDiffServType43, ipifV6AddressIpType=ipifV6AddressIpType, stpPortPathCost=stpPortPathCost, tftpFwTargetTftpOperationStatus=tftpFwTargetTftpOperationStatus, igsVlanQuerier=igsVlanQuerier, qosDiffServType31=qosDiffServType31, aclL3v6RuleTcpUdpDstPortMask=aclL3v6RuleTcpUdpDstPortMask, snmpV3HostCommunityName=snmpV3HostCommunityName, dlinkGreenLEDShutoff=dlinkGreenLEDShutoff, sysDdpProtStatusEntry=sysDdpProtStatusEntry, mldsVlanFilterVlanId=mldsVlanFilterVlanId, companyStaticMAC=companyStaticMAC, dlinkGreenSystemHibernationTimeProfile2=dlinkGreenSystemHibernationTimeProfile2, dlinkPowerSavingGlobalSetting=dlinkPowerSavingGlobalSetting, dot1qVlanEntry=dot1qVlanEntry, sysSNTPDSTState=sysSNTPDSTState, snmpV3HostTable=snmpV3HostTable, sysSNTPSecondType=sysSNTPSecondType, autoSurveillanceVlanOUISurveillanceOUI=autoSurveillanceVlanOUISurveillanceOUI, sysLBDPortStatus=sysLBDPortStatus, dhcpv6RelayHopCount=dhcpv6RelayHopCount, mldsQueryInterval=mldsQueryInterval, securityIpMacPortBinding=securityIpMacPortBinding, stpPortEntry=stpPortEntry, qosDiffServType05=qosDiffServType05, portSecState=portSecState, mldsVlanFilterEntry=mldsVlanFilterEntry, qosDiffServType56=qosDiffServType56, syslogSrvFacility=syslogSrvFacility, bandwidthCtrlTxThreshold=bandwidthCtrlTxThreshold, sshUserInfoID=sshUserInfoID, swTimeRangeEndMonth=swTimeRangeEndMonth, qosDiffServType59=qosDiffServType59, dlinkGreenPortShutoffState=dlinkGreenPortShutoffState, stpPort=stpPort, companySNTPSetting=companySNTPSetting, dhcpRelayManagement=dhcpRelayManagement, sysJumboFrameEnable=sysJumboFrameEnable, autoSurveillanceVlanOUIMask=autoSurveillanceVlanOUIMask, stpMaxAge=stpMaxAge, stpPortPriority=stpPortPriority, mldsVlanMulticastGroupEntry=mldsVlanMulticastGroupEntry, sysDdpProtStatusControl=sysDdpProtStatusControl, dlinkGreenLEDShutoffState=dlinkGreenLEDShutoffState, aclL3v6RuleTcpUdpSrcPortMask=aclL3v6RuleTcpUdpSrcPortMask, dlinkGreenPortShutoffTimeProfile2=dlinkGreenPortShutoffTimeProfile2, dhcpRelayOption82Policy=dhcpRelayOption82Policy, securityARPSpoofPrevent=securityARPSpoofPrevent, sysLBDMode=sysLBDMode, aclL3v4ExtRuleStatus=aclL3v4ExtRuleStatus, igsQueryInterval=igsQueryInterval, tftpCfgTargetTftpOperationStatus=tftpCfgTargetTftpOperationStatus, igsVlanMulticastGroupVlanId=igsVlanMulticastGroupVlanId, swAuthRadiusServerAccountingPort=swAuthRadiusServerAccountingPort, impbAutoScanIpAddressFrom=impbAutoScanIpAddressFrom, dhcpRelayTimeThreshold=dhcpRelayTimeThreshold, ipifName=ipifName, qosDiffServType28=qosDiffServType28, syslogSrvRowStatus=syslogSrvRowStatus, voiceVlanId=voiceVlanId, mldsVlanMulticastGroupMacAddress=mldsVlanMulticastGroupMacAddress, dhcpRelayInterfaceSettingsTable=dhcpRelayInterfaceSettingsTable, swAuthRadiusServer=swAuthRadiusServer, swAuthRadiusServerEntry=swAuthRadiusServerEntry, qosDiffServType49=qosDiffServType49, aclL2RuleStatus=aclL2RuleStatus, qosDiffServType52=qosDiffServType52, dhcpRelayInterface=dhcpRelayInterface, dhcpRelayControl=dhcpRelayControl, stpHelloTime=stpHelloTime, aclHWResourceStatusEntry=aclHWResourceStatusEntry, bandwidthCtrlTable=bandwidthCtrlTable, sysLBDCtrlEntry=sysLBDCtrlEntry, rmonHistoryInterval=rmonHistoryInterval, sysLBDVlanLoopPorts=sysLBDVlanLoopPorts, rmonStatistics=rmonStatistics, snmpV3HostAddress=snmpV3HostAddress, dhcpRelayOption82CheckState=dhcpRelayOption82CheckState, staticMcastTable=staticMcastTable, broadcastStormCtrlThreshold=broadcastStormCtrlThreshold, sysSNTPSecondInterfaceName=sysSNTPSecondInterfaceName, dhcpv6RelayOption37RemoteIDType=dhcpv6RelayOption37RemoteIDType, qosDiffServType30=qosDiffServType30, stpProtocolSpecification=stpProtocolSpecification, swAuthAuthConfigPortNumber=swAuthAuthConfigPortNumber, igsGrpQueryInterval=igsGrpQueryInterval, trustedHostIPType=trustedHostIPType, qosTOSType02=qosTOSType02, mldsStatus=mldsStatus, aclL3v4ExtRuleTcpUdpDstPort=aclL3v4ExtRuleTcpUdpDstPort, cableDiagTriggerIndex=cableDiagTriggerIndex, staticTable=staticTable, dlinklldpLocManAddr=dlinklldpLocManAddr, stpBridgeMaxAge=stpBridgeMaxAge, rmonEventType=rmonEventType, aclL3v6RuleDstIpv6Addr=aclL3v6RuleDstIpv6Addr, trafficSegMemberList=trafficSegMemberList, sysLBDStateEnable=sysLBDStateEnable, impbBlackListVlanId=impbBlackListVlanId, sysSNTPTimeSeconds=sysSNTPTimeSeconds, rmonAlarmIndex=rmonAlarmIndex, ipifv6GlobalStatus=ipifv6GlobalStatus, snmpV3TrapPortLinkUpDown=snmpV3TrapPortLinkUpDown, impbSettingEntry=impbSettingEntry, rstpStatus=rstpStatus, staticDisableAutoLearn=staticDisableAutoLearn, doSCtrlEntry=doSCtrlEntry, laPortControlEntry=laPortControlEntry, LacpKey=LacpKey, aclL3v6RuleStatus=aclL3v6RuleStatus, voicevlanOUIDescription=voicevlanOUIDescription, firmwareUpgradeSuccess=firmwareUpgradeSuccess, sysPortCtrlMDI=sysPortCtrlMDI, mldsVlan=mldsVlan, aclPortL3v6ProfileNo=aclPortL3v6ProfileNo, mldsGrpQueryInterval=mldsGrpQueryInterval, aclL3v6RuleTrafficClass=aclL3v6RuleTrafficClass, qosDiffServType45=qosDiffServType45, snmpV3viewTreeSubtree=snmpV3viewTreeSubtree, companySNMPV3=companySNMPV3, stpPortTable=stpPortTable, syslogInterfaceName=syslogInterfaceName, aclL2RulePriority=aclL2RulePriority, companyCableDiagnostic=companyCableDiagnostic, sysDhcpAutoConfiguration=sysDhcpAutoConfiguration, dot1pPortPriority=dot1pPortPriority, aclPortL2ProfileNo=aclPortL2ProfileNo, sshAuthenMethodPubKeyAdmin=sshAuthenMethodPubKeyAdmin, swTimeRangeThursday=swTimeRangeThursday, voicevlanDeviceTable=voicevlanDeviceTable, neighborIPv6Addr=neighborIPv6Addr, aclProfileType=aclProfileType, sysSNTPFirstType=sysSNTPFirstType, aclL3v4RulePriority=aclL3v4RulePriority, aRPSpoofPreventRowStatus=aRPSpoofPreventRowStatus, sysPortDescriptionEntry=sysPortDescriptionEntry, snmpV3viewTreeName=snmpV3viewTreeName, dlinkGreenSystemHibernationTimeProfile1=dlinkGreenSystemHibernationTimeProfile1, companyDHCPv6Relay=companyDHCPv6Relay, aclL2RuleSrcMacAddrMask=aclL2RuleSrcMacAddrMask, qosDiffServType48=qosDiffServType48, swTimeRangeRowStatus=swTimeRangeRowStatus, rmonStatsStatus=rmonStatsStatus, impbWhiteListMacAddress=impbWhiteListMacAddress, companyRSTP=companyRSTP, aclL3v4ExtRuleSrcIpAddrMask=aclL3v4ExtRuleSrcIpAddrMask, tftpCfgTargetServerIpType=tftpCfgTargetServerIpType, snmpGlobalState=snmpGlobalState, swTimeRangeStartDay=swTimeRangeStartDay, dot1pPortEntry=dot1pPortEntry, impbBlackListPort=impbBlackListPort, broadcastStormCtrlGlobalOnOff=broadcastStormCtrlGlobalOnOff, sysPortCtrlSpeed=sysPortCtrlSpeed, ipifV6AddressRowStatus=ipifV6AddressRowStatus, qosTOSType00=qosTOSType00, dhcpv6RelayInterfaceSettingsEntry=dhcpv6RelayInterfaceSettingsEntry, firmwareChecksumError=firmwareChecksumError)
mibBuilder.exportSymbols("DES-1210-52-CX", aclPortIndex=aclPortIndex, qosDiffServType44=qosDiffServType44, snmpV3GroupSecurityModel=snmpV3GroupSecurityModel, cableDiagPair2TestResult=cableDiagPair2TestResult, rmonAlarmInterval=rmonAlarmInterval, laPortActorTimeout=laPortActorTimeout, stpPortForwardTransitions=stpPortForwardTransitions, doSCtrlType=doSCtrlType, qosDiffServType07=qosDiffServType07, dhcpv6RelayOption37RemoteID=dhcpv6RelayOption37RemoteID, stpPortProtocolMigration=stpPortProtocolMigration, igsRobustnessValue=igsRobustnessValue, impbSmartTable=impbSmartTable, aclL3v4RuleStatus=aclL3v4RuleStatus, swAuthAuthMaxReq=swAuthAuthMaxReq, impbBlackListMacAddress=impbBlackListMacAddress, qosDiffServType39=qosDiffServType39, snmpV3UserGroupName=snmpV3UserGroupName, impbWhiteListPort=impbWhiteListPort, aclL2ProfileID=aclL2ProfileID, syslogSrvPort=syslogSrvPort, dhcpLocalRelayTable=dhcpLocalRelayTable, igsVlanRouterEntry=igsVlanRouterEntry, dhcpRelayOption82State=dhcpRelayOption82State, RmonStatus=RmonStatus, swAuthRadiusServerTimeout=swAuthRadiusServerTimeout, voicevlanDevicePriority=voicevlanDevicePriority, dhcpRelayInterfaceSettingsEntry=dhcpRelayInterfaceSettingsEntry, mldsVlanCfgQuerier=mldsVlanCfgQuerier, sysLBDVlanLoopTable=sysLBDVlanLoopTable, companyStaticMcast=companyStaticMcast, swAuthenCtrl=swAuthenCtrl, syslogSrvIPType=syslogSrvIPType, aclL2RuleDstMacAddr=aclL2RuleDstMacAddr, qosDiffServType32=qosDiffServType32, dhcpv6RelayInterfaceSettingsTable=dhcpv6RelayInterfaceSettingsTable, qosDiffServType47=qosDiffServType47, swTimeRangeName=swTimeRangeName, dot3azTable=dot3azTable, dhcpRelayManagementOption82=dhcpRelayManagementOption82, aclL3v4ExtRuleDscp=aclL3v4ExtRuleDscp, tftpCfgTargetTftpOperation=tftpCfgTargetTftpOperation, rmonHistoryDataSource=rmonHistoryDataSource, companyTraps=companyTraps, impbBlackListEntry=impbBlackListEntry, impbSmartBinding=impbSmartBinding, igsVlan=igsVlan, companyTimeRangeMgmt=companyTimeRangeMgmt, dhcpv6RelayOption37State=dhcpv6RelayOption37State, companyLA=companyLA, stpPriority=stpPriority, aclL2RuleAction=aclL2RuleAction, aclL3v4ExtRuleProtocol=aclL3v4ExtRuleProtocol, companySyslog=companySyslog, qosDiffServType18=qosDiffServType18, autoSurveillanceVlanSystem=autoSurveillanceVlanSystem, laPortActorActivity=laPortActorActivity, companyGreenSetting=companyGreenSetting, qosDiffServType62=qosDiffServType62, rmonAlarmTable=rmonAlarmTable, dhcpv6RelayInterface=dhcpv6RelayInterface, ipifV6AddressIpAddr=ipifV6AddressIpAddr, aclL3v6RuleTcpUdpSrcPort=aclL3v6RuleTcpUdpSrcPort, securitySSH=securitySSH, snmpV3TrapFirmUpgrade=snmpV3TrapFirmUpgrade, rmonAlarmFallingThreshold=rmonAlarmFallingThreshold, dhcpLocalRelayGlobalState=dhcpLocalRelayGlobalState, swAuthStatus=swAuthStatus, stpAdminPortPathCost=stpAdminPortPathCost, dhcpRelayHopCount=dhcpRelayHopCount, sysDhcpRetryTimes=sysDhcpRetryTimes, swAuthPortAccessControlTable=swAuthPortAccessControlTable, qosDiffServEnable=qosDiffServEnable, voiceVlanTimeout=voiceVlanTimeout, cableDiagPair1TestResult=cableDiagPair1TestResult, aclL3v4RuleAction=aclL3v4RuleAction, ipifV6AddressMainIndex=ipifV6AddressMainIndex, voicevlanPortControlTable=voicevlanPortControlTable, stpPortDesignatedPort=stpPortDesignatedPort, dlinklldpMsgHoldMultiplier=dlinklldpMsgHoldMultiplier, qosDiffServType06=qosDiffServType06, qosDiffServType27=qosDiffServType27, sysSNTPFirstInterfaceName=sysSNTPFirstInterfaceName, qosDiffServType41=qosDiffServType41, queuingMechanism=queuingMechanism, dlinkGreenSystemHibernation=dlinkGreenSystemHibernation, swTimeRangeStartMonth=swTimeRangeStartMonth, dhcpServerScreenTrustedServerAddress=dhcpServerScreenTrustedServerAddress, aclHWResourceStatusTable=aclHWResourceStatusTable, sysPortCtrlFlowControl=sysPortCtrlFlowControl, snmpV3GroupNotifyViewName=snmpV3GroupNotifyViewName, dlink=dlink, stpPortOperEdgePort=stpPortOperEdgePort, cableDiagPair4TestResult=cableDiagPair4TestResult, qosDiffServType11=qosDiffServType11, trustedHostEntry=trustedHostEntry, aclPortGroupTable=aclPortGroupTable, mldsVlanMulticastGroupTable=mldsVlanMulticastGroupTable, firmwareIllegalFile=firmwareIllegalFile, staticStatus=staticStatus, aclL3v4RuleProfileNo=aclL3v4RuleProfileNo, aclL3v4ExtRuleProfileNo=aclL3v4ExtRuleProfileNo, aRPSpoofPreventEntry=aRPSpoofPreventEntry, rmonEventCommunity=rmonEventCommunity, sysMirrorCtrlIngressMirroring=sysMirrorCtrlIngressMirroring, aclL3v4ExtRulePriority=aclL3v4ExtRulePriority, aRPSpoofPreventMacAddress=aRPSpoofPreventMacAddress, aclL3v6RuleProfileNo=aclL3v6RuleProfileNo, sshPublKeyRSAAdmin=sshPublKeyRSAAdmin, sysIpAddrCfgMode=sysIpAddrCfgMode, securityTrustedHost=securityTrustedHost, sysMirrorTargetPort=sysMirrorTargetPort, doSCtrlState=doSCtrlState, qosDiffServType61=qosDiffServType61, trustedHostIpAddr=trustedHostIpAddr, voicevlanDeviceEntry=voicevlanDeviceEntry, trustedHostTable=trustedHostTable, igsVlanRouterTable=igsVlanRouterTable, swAuthRadiusServerInterfaceName=swAuthRadiusServerInterfaceName, mldsHostPortPurgeInterval=mldsHostPortPurgeInterval, snmpV3viewTreeType=snmpV3viewTreeType, igsVlanCfgQuerier=igsVlanCfgQuerier, swAuthCtrlPktFwdMode=swAuthCtrlPktFwdMode, stpPortRestrictedRole=stpPortRestrictedRole, aclL3v4ExtRuleAction=aclL3v4ExtRuleAction, swAuthAuthQuietPeriod=swAuthAuthQuietPeriod, dhcpLocalRelaySettingsVLANID=dhcpLocalRelaySettingsVLANID, sysSNTPDSTEndDay=sysSNTPDSTEndDay, aclL3v6RuleTable=aclL3v6RuleTable, aclL3v6RuleAccessID=aclL3v6RuleAccessID, voicevlanDevice=voicevlanDevice, impbPortIndex=impbPortIndex, aclL3v4ExtRuleICMPMessageCode=aclL3v4ExtRuleICMPMessageCode, bandwidthCtrlRxThreshold=bandwidthCtrlRxThreshold, sslCipherSuiteList=sslCipherSuiteList, dot1qVlanEgressPorts=dot1qVlanEgressPorts, staticMcastMac=staticMcastMac, swAuthUserEntry=swAuthUserEntry, swLoopDetectEnabledVlanList=swLoopDetectEnabledVlanList, aclProfileRuleCount=aclProfileRuleCount, qosDiffServType53=qosDiffServType53, voicevlanPortManuTagMode=voicevlanPortManuTagMode, sysSystemPassword=sysSystemPassword, stpPortDesignatedCost=stpPortDesignatedCost, dot1qVlanPvid=dot1qVlanPvid, qosDiffServType24=qosDiffServType24, voicevlanDeviceIndexMac=voicevlanDeviceIndexMac, trafficSegIfIndex=trafficSegIfIndex, impbAutoScanStatus=impbAutoScanStatus, snmpV3CommunityPolicy=snmpV3CommunityPolicy, rmonAlarmRisingEventIndex=rmonAlarmRisingEventIndex, dlinkGreenLEDShutoffTimeProfile1=dlinkGreenLEDShutoffTimeProfile1, dlinkGreenSystemHibernationState=dlinkGreenSystemHibernationState, aclL2RuleReplacePriority=aclL2RuleReplacePriority, companyDoSCtrl=companyDoSCtrl, voicevlanPortControlIndex=voicevlanPortControlIndex, sysLBDVlanLoopIndex=sysLBDVlanLoopIndex, sysIpSubnetMask=sysIpSubnetMask, aclL3v4ExtRuleReplacePriority=aclL3v4ExtRuleReplacePriority, aclL3v4ExtRuleTcpUdpSrcPortMask=aclL3v4ExtRuleTcpUdpSrcPortMask, sysSNTPDSTOffset=sysSNTPDSTOffset, snmpV3GroupEntry=snmpV3GroupEntry, firmwareTransferError=firmwareTransferError, tftpCfgTargetServerIpAddress=tftpCfgTargetServerIpAddress, igsReportToAllPort=igsReportToAllPort, staticMcastVlanID=staticMcastVlanID, swAuthPortAccessCtrl=swAuthPortAccessCtrl, aclHWResourceStatus=aclHWResourceStatus, rmonAlarmSampleType=rmonAlarmSampleType, rmonAlarmVariable=rmonAlarmVariable, aclProfileNo=aclProfileNo, aclL2RuleEntry=aclL2RuleEntry, qosDiffServType20=qosDiffServType20, snmpV3UserAuthProtocolPassword=snmpV3UserAuthProtocolPassword, aclL2AccessID=aclL2AccessID, rmonHistoryOwner=rmonHistoryOwner, ipifv6NSRetransmitTime=ipifv6NSRetransmitTime, snmpV3CommunityName=snmpV3CommunityName, snmpV3GroupStatus=snmpV3GroupStatus, qosDiffServType26=qosDiffServType26, qosDiffServType57=qosDiffServType57, companyMldsGroup=companyMldsGroup, tftpFwTargetGroup=tftpFwTargetGroup, portSecMLA=portSecMLA, neighborCacheState=neighborCacheState, companyRMON=companyRMON, impbDHCPPortState=impbDHCPPortState, snmpV3TrapBootup=snmpV3TrapBootup, snmpV3viewTreeStatus=snmpV3viewTreeStatus, sshSecurityStatus=sshSecurityStatus, sysPortDescriptionTable=sysPortDescriptionTable, sysLoginTimeoutInterval=sysLoginTimeoutInterval, sysSNTPSecondServer=sysSNTPSecondServer, dhcpRelayInterfaceSettingsRowStatus=dhcpRelayInterfaceSettingsRowStatus, laPortChannelEntry=laPortChannelEntry, tftpCfgTargetImageFileName=tftpCfgTargetImageFileName, cableDiagPair3FaultDistance=cableDiagPair3FaultDistance, snmpV3CommunityTable=snmpV3CommunityTable, dlinklldpState=dlinklldpState, trafficSegTable=trafficSegTable, companyAutoSurveillanceVlan=companyAutoSurveillanceVlan, rmonAlarmEntry=rmonAlarmEntry, aclL3v6RuleReplacePriority=aclL3v6RuleReplacePriority, dot1qVlanManagementid=dot1qVlanManagementid, neighborEntry=neighborEntry, snmpV3UserPrivProtocolPassword=snmpV3UserPrivProtocolPassword, dot1qVlanPortTable=dot1qVlanPortTable, igsVlanMulticastGroupTable=igsVlanMulticastGroupTable, voicevlanOUI=voicevlanOUI, aclPortBindGroup=aclPortBindGroup, qosTOSType03=qosTOSType03, aclL3v6RuleEntry=aclL3v6RuleEntry, sysSNTPServerTable=sysSNTPServerTable, swAuthAuthServerTimeout=swAuthAuthServerTimeout, PortList=PortList, ipifV6AddressIpPrefix=ipifV6AddressIpPrefix, dot3azEntry=dot3azEntry, syslogSrvIP=syslogSrvIP, stpBridgeHelloTime=stpBridgeHelloTime, impbSmartIpAddress=impbSmartIpAddress, stpTopChanges=stpTopChanges, syslogSrvSeverity=syslogSrvSeverity, snmpV3HostVersion=snmpV3HostVersion, dhcpv6RelayServerIP=dhcpv6RelayServerIP, stpForwardDelay=stpForwardDelay, dhcpOption12HostName=dhcpOption12HostName, dhcpLocalRelaySettingsState=dhcpLocalRelaySettingsState, dlinkGreenPortShutoffTimeProfile1=dlinkGreenPortShutoffTimeProfile1, igsVlanFilterVlanId=igsVlanFilterVlanId, staticMac=staticMac, voicevlanPortAutoDetection=voicevlanPortAutoDetection, aRPSpoofPreventTable=aRPSpoofPreventTable, impbInsIpPacPortState=impbInsIpPacPortState, qosDiffServType23=qosDiffServType23, staticPort=staticPort, dhcpOption12Status=dhcpOption12Status, impbWhiteListEntry=impbWhiteListEntry, laPortControl=laPortControl, companyACLGroup=companyACLGroup, qosDiffServType58=qosDiffServType58, swAuthAuthSuppTimeout=swAuthAuthSuppTimeout, snmpV3Group=snmpV3Group, swTimeRangeMonday=swTimeRangeMonday, qosDiffServType50=qosDiffServType50, snmpV3UserVersion=snmpV3UserVersion, voicevlanPortControlEntry=voicevlanPortControlEntry, laPortChannelMemberList=laPortChannelMemberList, igsVlanRouterPortList=igsVlanRouterPortList, swAuthRadiusServerStatus=swAuthRadiusServerStatus, ipifV6AddressEntry=ipifV6AddressEntry, trustedHostStatus=trustedHostStatus, swTimeRangeWednesday=swTimeRangeWednesday, qosDiffServType01=qosDiffServType01, sysIpAddr=sysIpAddr)
mibBuilder.exportSymbols("DES-1210-52-CX", qosDiffServType51=qosDiffServType51, voicevlanOUITelephonyOUI=voicevlanOUITelephonyOUI, ipifv6DefaultGateway=ipifv6DefaultGateway, aclL3v6Rule=aclL3v6Rule, cableDiagPair2FaultDistance=cableDiagPair2FaultDistance, aclL3v6RuleSrcIpv6AddrPrefixLen=aclL3v6RuleSrcIpv6AddrPrefixLen, dlinklldpConfigManAddrTable=dlinklldpConfigManAddrTable, autoSurveillanceVlanOUIComponentType=autoSurveillanceVlanOUIComponentType, swTimeRangeSaturday=swTimeRangeSaturday, dhcpServerScreenTrustedServerTable=dhcpServerScreenTrustedServerTable, LldpManAddress=LldpManAddress, rmonAlarmOwner=rmonAlarmOwner, voiceVlanPriority=voiceVlanPriority, swAuthUserTable=swAuthUserTable, rmonEventIndex=rmonEventIndex, swAuthRadiusServerRetransmit=swAuthRadiusServerRetransmit, swTimeRangeFriday=swTimeRangeFriday, stpRootCost=stpRootCost, mldsSystem=mldsSystem, staticMcastEgressPorts=staticMcastEgressPorts, tftpCfgTargetInterfaceName=tftpCfgTargetInterfaceName, stpTxHoldCount=stpTxHoldCount, sysPortDescString=sysPortDescString, impbSmartVlanId=impbSmartVlanId, portSecEntry=portSecEntry, qosDiffServType25=qosDiffServType25, mcastFilterPortTable=mcastFilterPortTable, broadcastStormCtrlLimitType=broadcastStormCtrlLimitType, qosDiffServType10=qosDiffServType10, laPortControlTable=laPortControlTable, qosDiffServTypeGroup=qosDiffServTypeGroup, qosDiffServType21=qosDiffServType21, rmonAlarmRisingThreshold=rmonAlarmRisingThreshold, qosDiffServType29=qosDiffServType29, companyVoiceVlan=companyVoiceVlan, miscStatisticsReset=miscStatisticsReset, sysMirrorCtrlEgressMirroring=sysMirrorCtrlEgressMirroring, sysRestart=sysRestart, mldsVlanMulticastGroupPortList=mldsVlanMulticastGroupPortList, igsVlanFilterEntry=igsVlanFilterEntry, qosDiffServType38=qosDiffServType38, dhcpv6RelayInterfaceSettingsRowStatus=dhcpv6RelayInterfaceSettingsRowStatus, rmonHistoryTable=rmonHistoryTable, sysSNTPDSTEndMon=sysSNTPDSTEndMon, snmpV3GroupWriteViewName=snmpV3GroupWriteViewName, mcastFilterPortEntry=mcastFilterPortEntry, dot1pPortIndex=dot1pPortIndex, mldsVlanRouterTable=mldsVlanRouterTable, neighborTable=neighborTable, dot1qVlanManagementOnOff=dot1qVlanManagementOnOff, voicevlanPortCurrentTagMode=voicevlanPortCurrentTagMode, snmpV3HostStatus=snmpV3HostStatus, qosDiffServType55=qosDiffServType55, sysSafeGuardEnable=sysSafeGuardEnable, qosDiffServType33=qosDiffServType33, qosDiffServType12=qosDiffServType12, dhcpv6RelayOption37=dhcpv6RelayOption37, qosDiffServType60=qosDiffServType60, swAuthUserStatus=swAuthUserStatus, qosDiffServType46=qosDiffServType46, swAuthUser=swAuthUser, igsVlanSnoopStatus=igsVlanSnoopStatus, dlink_DES1210SeriesProd=dlink_DES1210SeriesProd, swAuthRadiusServerAddress=swAuthRadiusServerAddress, aclL2Rule=aclL2Rule, voicevlanOUIMask=voicevlanOUIMask, dhcpServerScreenEnablePortlist=dhcpServerScreenEnablePortlist, snmpV3TrapRSTPStateChange=snmpV3TrapRSTPStateChange, autoSurveillanceVlanPriority=autoSurveillanceVlanPriority, securitySSL=securitySSL, sysGateway=sysGateway, stpDesignatedRoot=stpDesignatedRoot, sshMacSuiteList=sshMacSuiteList, aclL3v6RuleProtocol=aclL3v6RuleProtocol, doSCtrlDisplayState=doSCtrlDisplayState, dhcpv6RelayManagement=dhcpv6RelayManagement, dot1qVlanUntaggedPorts=dot1qVlanUntaggedPorts, qosDiffServType35=qosDiffServType35, snmpV3UserStatus=snmpV3UserStatus, companyMirror=companyMirror, companyQoSGroup=companyQoSGroup, snmpV3IPType=snmpV3IPType, sysSNTPDSTStartHour=sysSNTPDSTStartHour, autoSurveillanceVlanTaggedUplinkDownlinkPort=autoSurveillanceVlanTaggedUplinkDownlinkPort, tftpCfgTargetGroup=tftpCfgTargetGroup, portSecTable=portSecTable, dhcpRelayOption82RemoteIDType=dhcpRelayOption82RemoteIDType, cableDiagPair3TestResult=cableDiagPair3TestResult, dot3azEEEset=dot3azEEEset, topologyChange=topologyChange, syslogSrvEntry=syslogSrvEntry, staticAutoLearningList=staticAutoLearningList, stpPortDesignatedBridge=stpPortDesignatedBridge, igsVlanFilterTable=igsVlanFilterTable, bandwidthCtrlSettings=bandwidthCtrlSettings, swAuthAuthReAuthPeriod=swAuthAuthReAuthPeriod, bandwidthCtrlEntry=bandwidthCtrlEntry, aclL3v4ExtRuleICMPMessageType=aclL3v4ExtRuleICMPMessageType, ipifv6AutolinkloStatus=ipifv6AutolinkloStatus, sshAuthenMethodPassWordAdmin=sshAuthenMethodPassWordAdmin, aclProfileStatus=aclProfileStatus, tftpFwTargetServerIpType=tftpFwTargetServerIpType, qosTOSEnable=qosTOSEnable, aclL3v6RuleProtocolId=aclL3v6RuleProtocolId, aclL3v6RuleICMPv6MessageCode=aclL3v6RuleICMPv6MessageCode, snmpV3EngineID=snmpV3EngineID, swTimeRangeSunday=swTimeRangeSunday, mldsVlanRouterPortList=mldsVlanRouterPortList, qosDiffServType15=qosDiffServType15, dhcpRelayOption82RemoteID=dhcpRelayOption82RemoteID, dot1pPortTable=dot1pPortTable, sshUserInfoEntry=sshUserInfoEntry, qosTOSType07=qosTOSType07, mcastFilterPortIndex=mcastFilterPortIndex, sshConnectionTimeout=sshConnectionTimeout, swTimeRangeDate=swTimeRangeDate, rmonAlarmFallingEventIndex=rmonAlarmFallingEventIndex, VlanIndex=VlanIndex, tftpFwTargetServerIpAddress=tftpFwTargetServerIpAddress, dhcpv6RelayOption37CheckState=dhcpv6RelayOption37CheckState, qosDiffServType40=qosDiffServType40, sshUserInfoHostName=sshUserInfoHostName, mldsVlanSnoopStatus=mldsVlanSnoopStatus, swAuthAuthDirection=swAuthAuthDirection, aRPSpoofPreventPortList=aRPSpoofPreventPortList, aclL2RuleDstMacAddrMask=aclL2RuleDstMacAddrMask, securityDhcpServerScreen=securityDhcpServerScreen, PortLaMode=PortLaMode, syslogState=syslogState, qosDiffServType14=qosDiffServType14, tftpFwTargetInterfaceName=tftpFwTargetInterfaceName, stpPortAdminPointToPoint=stpPortAdminPointToPoint, companyDHCPRelay=companyDHCPRelay, sysPortCtrlType=sysPortCtrlType, sysDdpGeneralReportTimer=sysDdpGeneralReportTimer, aclL3v4Rule=aclL3v4Rule, aclL3v4ExtRuleAccessID=aclL3v4ExtRuleAccessID, sysSNTPDSTStartMin=sysSNTPDSTStartMin, swTimeRangeStartHour=swTimeRangeStartHour, swAuthAuthCapability=swAuthAuthCapability, dhcpServerScreenTrustedServerStatus=dhcpServerScreenTrustedServerStatus, qosDiffServType22=qosDiffServType22, qosDiffServ=qosDiffServ, sshUserInfoUserName=sshUserInfoUserName, qosTOSType05=qosTOSType05, dot1qVlanName=dot1qVlanName, companyIgsGroup=companyIgsGroup, sslCiphers=sslCiphers, aclHWProfileIndex=aclHWProfileIndex, impbWhiteListIpAddress=impbWhiteListIpAddress, aclL3v4ExtRule=aclL3v4ExtRule, companyLLDPSetting=companyLLDPSetting, snmpV3GroupSecurityLevel=snmpV3GroupSecurityLevel, mldsVlanRouterEntry=mldsVlanRouterEntry, impbWhiteListTable=impbWhiteListTable, snmpV3CommunityEntry=snmpV3CommunityEntry, syslogTimeStampOption=syslogTimeStampOption, sysSNTPState=sysSNTPState, swTimeRangeTuesday=swTimeRangeTuesday, trafficSegEntry=trafficSegEntry, autoSurveillanceVlanId=autoSurveillanceVlanId, companyTftpGroup=companyTftpGroup, aclAccessListNo=aclAccessListNo, igsVlanMulticastGroupIpAddress=igsVlanMulticastGroupIpAddress, rmonHistoryStatus=rmonHistoryStatus, snmpV3User=snmpV3User, sysSNTPDSTEndHour=sysSNTPDSTEndHour, impbPortState=impbPortState, dlinkGreenLEDShutoffPortList=dlinkGreenLEDShutoffPortList, snmpV3UserName=snmpV3UserName, aclL3v4RuleDstIpAddrMask=aclL3v4RuleDstIpAddrMask, aclL2RuleSrcMacAddr=aclL2RuleSrcMacAddr, rmonEventTable=rmonEventTable, traps=traps, aclL3v6RuleICMPv6MessageType=aclL3v6RuleICMPv6MessageType, des_1210_52=des_1210_52, snmpV3GroupName=snmpV3GroupName, voicevlanDeviceStatus=voicevlanDeviceStatus, igsStatus=igsStatus, autoSurveillanceVlanOUIDescription=autoSurveillanceVlanOUIDescription, rmonHistoryBucketsRequested=rmonHistoryBucketsRequested, aclL2RuleTable=aclL2RuleTable, aclL3v4RuleSrcIpAddrMask=aclL3v4RuleSrcIpAddrMask, dlinklldpLocManAddrSubtype=dlinklldpLocManAddrSubtype, portD3Index=portD3Index, sysLBDInterval=sysLBDInterval, aclL2RuleVlanId=aclL2RuleVlanId, stpPortRestrictedTCN=stpPortRestrictedTCN, aclL3v4ExtRuleDstIpAddrMask=aclL3v4ExtRuleDstIpAddrMask, impbSmartPort=impbSmartPort, broadcastStormCtrlSettings=broadcastStormCtrlSettings, dot1qVlanAsyOnOff=dot1qVlanAsyOnOff, qosDiffServType42=qosDiffServType42, companyMiscGroup=companyMiscGroup, swTimeRangeSettingTable=swTimeRangeSettingTable, igsVlanRtrPortList=igsVlanRtrPortList, aclL3v4RuleSrcIpAddr=aclL3v4RuleSrcIpAddr, laStatus=laStatus, aclL3v4RuleEntry=aclL3v4RuleEntry, igsVlanFastLeave=igsVlanFastLeave, voicevlanOUITable=voicevlanOUITable, aclL3v6RuleTcpUdpDstPort=aclL3v6RuleTcpUdpDstPort, snmpV3UserAuthProtocol=snmpV3UserAuthProtocol, sshSessionKeyRekeying=sshSessionKeyRekeying, impbBlackListStatus=impbBlackListStatus, authProtocol=authProtocol, bandwidthCtrlIndex=bandwidthCtrlIndex, aclProfile=aclProfile, aclL3v6RuleSrcIpv6Addr=aclL3v6RuleSrcIpv6Addr, sysLBDPortLoopStatus=sysLBDPortLoopStatus, rmonEventEntry=rmonEventEntry, sysSNTPGMTMinutes=sysSNTPGMTMinutes, swTimeRangeStartMinute=swTimeRangeStartMinute, companyAuthGroup=companyAuthGroup, qosDiffServType36=qosDiffServType36, stpPortEnable=stpPortEnable, impbSmartEntry=impbSmartEntry, staticMcastEntry=staticMcastEntry, mldsVlanMulticastGroupVlanId=mldsVlanMulticastGroupVlanId, sysPortCtrlTable=sysPortCtrlTable, sysPortDescIndex=sysPortDescIndex, igsRouterPortPurgeInterval=igsRouterPortPurgeInterval, sshCipherSuiteList=sshCipherSuiteList, sysDdpGlobalOnOff=sysDdpGlobalOnOff, qosTOSGroup=qosTOSGroup, aclProfileTable=aclProfileTable, sysPortCtrlEntry=sysPortCtrlEntry, stpPortEdge=stpPortEdge, dot1qVlanTable=dot1qVlanTable, voicevlanDeviceTagType=voicevlanDeviceTagType, mldsRouterPortPurgeInterval=mldsRouterPortPurgeInterval, companyTrafficMgmt=companyTrafficMgmt, aclL3v4RuleAccessID=aclL3v4RuleAccessID, impbSettingTable=impbSettingTable, aclL3v4RuleDstIpAddr=aclL3v4RuleDstIpAddr, aclPortL3v4ProfileNo=aclPortL3v4ProfileNo, snmpV3viewTreeMask=snmpV3viewTreeMask, Ipv6Address=Ipv6Address, sysMirrorStatus=sysMirrorStatus, voicevlanOUIStatus=voicevlanOUIStatus, stpHoldTime=stpHoldTime, dlinkGreenPortShutoff=dlinkGreenPortShutoff, aclPortGroupEntry=aclPortGroupEntry, qosTOS=qosTOS, sshUserInfoHostIp=sshUserInfoHostIp, igsVlanMulticastGroupMacAddress=igsVlanMulticastGroupMacAddress, aclL3v4RuleReplacePriority=aclL3v4RuleReplacePriority, neighborRowStatus=neighborRowStatus, swAuthAuthConfigPortControl=swAuthAuthConfigPortControl, igsHostPortPurgeInterval=igsHostPortPurgeInterval, igsQueryMaxResponseTime=igsQueryMaxResponseTime, trustedHostIpMask=trustedHostIpMask, sysLBDCtrlIndex=sysLBDCtrlIndex, aRPSpoofPreventIpAddr=aRPSpoofPreventIpAddr)
mibBuilder.exportSymbols("DES-1210-52-CX", qosTOSType06=qosTOSType06, staticEntry=staticEntry, sysLocationName=sysLocationName, sshMaxAuthFailAttempts=sshMaxAuthFailAttempts, aclL3v6RulePriority=aclL3v6RulePriority, sysSNTPDSTStartDay=sysSNTPDSTStartDay, qosDiffServType02=qosDiffServType02, swAuthUserPassword=swAuthUserPassword, companydot3azEEE=companydot3azEEE, igsVlanMulticastGroupPortList=igsVlanMulticastGroupPortList, dhcpRelayState=dhcpRelayState, laPortChannelMode=laPortChannelMode, sysPortCtrlIndex=sysPortCtrlIndex, swAuthRadiusServerIndex=swAuthRadiusServerIndex, aclL3v6RuleAction=aclL3v6RuleAction, stpVersion=stpVersion, doSCtrlTable=doSCtrlTable, rmonHistoryEntry=rmonHistoryEntry, qosDiffServType37=qosDiffServType37, qosDiffServType54=qosDiffServType54, dhcpLocalRelayEntry=dhcpLocalRelayEntry, ipifSupportV4V6Info=ipifSupportV4V6Info, aclL2RuleEtherType=aclL2RuleEtherType, swTimeRangeEndHour=swTimeRangeEndHour, sysDdpProtStatusTable=sysDdpProtStatusTable, companyDot1qVlanGroup=companyDot1qVlanGroup, dlinklldpMsgTxInterval=dlinklldpMsgTxInterval, dlinklldpConfigManAddrEntry=dlinklldpConfigManAddrEntry, aclL2Rule1pPriority=aclL2Rule1pPriority, sysLBDRecoverTime=sysLBDRecoverTime, rmonHistoryIndex=rmonHistoryIndex, ipifV6AddressTable=ipifV6AddressTable, staticMcastStatus=staticMcastStatus, swAuthRadiusServerKey=swAuthRadiusServerKey, staticVlanID=staticVlanID, rmonStatsIndex=rmonStatsIndex, ipifv6DHCPStatus=ipifv6DHCPStatus, portSecIndex=portSecIndex, sysSNTPPollInterval=sysSNTPPollInterval, dlinklldpReinitDelay=dlinklldpReinitDelay, snmpV3CommunityStatus=snmpV3CommunityStatus, qosDiffServType09=qosDiffServType09, stpPortOperPointToPoint=stpPortOperPointToPoint, snmpV3HostInterfaceName=snmpV3HostInterfaceName, securityPortSecurity=securityPortSecurity, impbSmartMacAddress=impbSmartMacAddress, rmonStatsTable=rmonStatsTable, sysSwitchName=sysSwitchName, laPortChannelIfIndex=laPortChannelIfIndex, rmonEventOwner=rmonEventOwner, snmpV3Host=snmpV3Host, sysHardwareVersion=sysHardwareVersion, companySecurity=companySecurity, rmonEventStatus=rmonEventStatus, rmonStatsOwner=rmonStatsOwner, firmwareUpgradeFailure=firmwareUpgradeFailure, swTimeRangeEndDay=swTimeRangeEndDay, autoSurveillanceVlanOUIStatus=autoSurveillanceVlanOUIStatus, sshMaxSession=sshMaxSession, aclL3v4ExtRuleDstIpAddr=aclL3v4ExtRuleDstIpAddr, syslogSrvTable=syslogSrvTable, dlinklldpTxDelay=dlinklldpTxDelay, dhcpv6RelayState=dhcpv6RelayState, tftpFwTargetImageFileName=tftpFwTargetImageFileName, BridgeId=BridgeId, qosDiffServType08=qosDiffServType08, qosDiffServType63=qosDiffServType63, swAuthAuthReAuthentication=swAuthAuthReAuthentication, swTimeRangeSettingEntry=swTimeRangeSettingEntry, cableDiagPair4FaultDistance=cableDiagPair4FaultDistance, companyIpifGroup=companyIpifGroup, aclL3v4ExtRuleToS=aclL3v4ExtRuleToS, dhcpRelayServerIP=dhcpRelayServerIP, voicevlanOUIEntry=voicevlanOUIEntry, miscReset=miscReset, stpTimeSinceTopologyChange=stpTimeSinceTopologyChange, sysSNTPDSTEndMin=sysSNTPDSTEndMin, sysDdpProtStatusIndex=sysDdpProtStatusIndex, impbBlackListTable=impbBlackListTable, voiceVlanMode=voiceVlanMode, stpPortState=stpPortState, mldsRobustnessValue=mldsRobustnessValue, rmonGlobalState=rmonGlobalState, sysDdpGeneralReportOnOff=sysDdpGeneralReportOnOff, swAuthPortAccessControlEntry=swAuthPortAccessControlEntry, rmonAlarmStatus=rmonAlarmStatus, laSystem=laSystem, mldsVlanQueryInterval=mldsVlanQueryInterval, igsSystem=igsSystem, rmonStatsDataSource=rmonStatsDataSource, mldsVlanMulticastGroupIpAddress=mldsVlanMulticastGroupIpAddress, snmpV3Trap=snmpV3Trap, aclL3v4RuleTable=aclL3v4RuleTable, voicevlanSystem=voicevlanSystem, laPortChannelTable=laPortChannelTable, swAuthRadiusIPType=swAuthRadiusIPType, swAuthUserName=swAuthUserName, portD3State=portD3State, tftpFwTargetTftpOperation=tftpFwTargetTftpOperation, companyDHCPLocalRelay=companyDHCPLocalRelay, snmpV3UserEntry=snmpV3UserEntry, trafficSegStatus=trafficSegStatus, neighborIfindex=neighborIfindex, mldsVlanQuerier=mldsVlanQuerier, stpGlobal=stpGlobal, mldsVlanFastLeave=mldsVlanFastLeave, snmpV3UserTable=snmpV3UserTable, sysLBDCtrlTable=sysLBDCtrlTable, sysPortCtrlOperStatus=sysPortCtrlOperStatus, swTimeRangeEndMinute=swTimeRangeEndMinute, syslogGeneralGroup=syslogGeneralGroup, autoSurveillanceVlanMode=autoSurveillanceVlanMode, dlink_products=dlink_products)
