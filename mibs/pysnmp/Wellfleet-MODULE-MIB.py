#
# PySNMP MIB module Wellfleet-MODULE-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/Wellfleet-MODULE-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 21:34:19 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, ObjectIdentifier, Integer = mibBuilder.importSymbols("ASN1", "OctetString", "ObjectIdentifier", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
SingleValueConstraint, ValueSizeConstraint, ValueRangeConstraint, ConstraintsIntersection, ConstraintsUnion = mibBuilder.importSymbols("ASN1-REFINEMENT", "SingleValueConstraint", "ValueSizeConstraint", "ValueRangeConstraint", "ConstraintsIntersection", "ConstraintsUnion")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
iso, Integer32, MibIdentifier, ObjectIdentity, MibScalar, MibTable, MibTableRow, MibTableColumn, IpAddress, ModuleIdentity, Counter32, Gauge32, Counter64, Unsigned32, TimeTicks, Bits, NotificationType = mibBuilder.importSymbols("SNMPv2-SMI", "iso", "Integer32", "MibIdentifier", "ObjectIdentity", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "IpAddress", "ModuleIdentity", "Counter32", "Gauge32", "Counter64", "Unsigned32", "TimeTicks", "Bits", "NotificationType")
DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention")
wfHwModuleGroup, = mibBuilder.importSymbols("Wellfleet-COMMON-MIB", "wfHwModuleGroup")
wfHwModuleTable = MibTable((1, 3, 6, 1, 4, 1, 18, 3, 1, 4, 1), )
if mibBuilder.loadTexts: wfHwModuleTable.setStatus('mandatory')
wfHwModuleEntry = MibTableRow((1, 3, 6, 1, 4, 1, 18, 3, 1, 4, 1, 1), ).setIndexNames((0, "Wellfleet-MODULE-MIB", "wfHwModuleSlot"), (0, "Wellfleet-MODULE-MIB", "wfHwModuleModule"))
if mibBuilder.loadTexts: wfHwModuleEntry.setStatus('mandatory')
wfHwModuleSlot = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 1, 4, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfHwModuleSlot.setStatus('mandatory')
wfHwModuleModule = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 1, 4, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfHwModuleModule.setStatus('mandatory')
wfHwModuleModIdOpt = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 1, 4, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(512, 768, 769, 1280, 1281, 1408, 1536, 1537, 1538, 1540, 1541, 1542, 1544, 1545, 1546, 1584, 1585, 1586, 1588, 1589, 1590, 1592, 1593, 1594, 1664, 1792, 1793, 1800, 1801, 1808, 1809, 1825, 1833, 1856, 1857, 1864, 1865, 1872, 1873, 1889, 1897, 2048, 2049, 2176, 2304, 2560, 2816, 2944, 3072, 3073, 3328, 3329, 3330, 3584, 8000, 8160, 8161, 8320, 8321, 8500, 8501, 8704, 8720, 8728, 8729, 8744, 8736, 8752, 8768, 8776, 8780, 8784, 8800, 8808, 8816, 8832, 8848, 8864, 8872, 8873, 8890, 8891, 8972, 8880, 8896, 8912, 8928, 8944, 8960, 8976, 16384, 16640, 16896, 16897, 16898, 16899, 17152, 17153, 17154, 17155, 17408, 17664, 17920, 18176, 18432, 18688, 18944, 524288, 524544))).clone(namedValues=NamedValues(("spex", 512), ("spexhss", 768), ("spexhsd", 769), ("denm", 1280), ("denmhwf", 1281), ("iqe", 1408), ("dsnmnn", 1536), ("dsnmn1", 1537), ("dsnmn2", 1538), ("dsnm1n", 1540), ("dsnm11", 1541), ("dsnm12", 1542), ("dsnm2n", 1544), ("dsnm21", 1545), ("dsnm22", 1546), ("dsnmnnisdn", 1584), ("dsnmn1isdn", 1585), ("dsnmn2isdn", 1586), ("dsnm1nisdn", 1588), ("dsnm11isdn", 1589), ("dsnm12isdn", 1590), ("dsnm2nisdn", 1592), ("dsnm21isdn", 1593), ("dsnm22isdn", 1594), ("qsyncnm", 1664), ("mmfsdsas", 1792), ("mmfsddas", 1793), ("smfsdsas", 1800), ("smfsddas", 1801), ("mmscsas", 1808), ("mmscdas", 1809), ("smammbdas", 1825), ("mmasmbdas", 1833), ("mmfsdsashwf", 1856), ("mmfsddashwf", 1857), ("smfsdsashwf", 1864), ("smfsddashwf", 1865), ("mmscsashwf", 1872), ("mmscdashwf", 1873), ("smammbdashwf", 1889), ("mmasmbdashwf", 1897), ("dtnm", 2048), ("cam", 2049), ("iqtok", 2176), ("se100nm", 2304), ("asnqbri", 2560), ("mce1nm", 2816), ("dmct1nm", 2944), ("hwcompnm32", 3072), ("hwcompnm128", 3073), ("ahwcompnm32", 3328), ("ahwcompnm128", 3329), ("ahwcompnm256", 3330), ("shssinm", 3584), ("fbrmbdfen", 8000), ("ds1e1atm", 8160), ("ds3e3atm", 8161), ("pmcdsync", 8320), ("pmcqsync", 8321), ("fvoippmcc", 8500), ("fvoipt1e1pmc", 8501), ("arnmbstr", 8704), ("arnmbsen", 8720), ("arnmbsfetx", 8728), ("arnmbsfefx", 8729), ("litembsfetx", 8744), ("arnssync", 8736), ("arnv34", 8752), ("arndcsu", 8768), ("arnft1", 8776), ("arnfe1", 8780), ("arnisdns", 8784), ("arnisdnu", 8800), ("arnisdb", 8808), ("arnstkrg", 8816), ("arnsenet", 8832), ("arntsync", 8848), ("arnentsync", 8864), ("arne7sync", 8872), ("arn7sync", 8873), ("arnvoice", 8890), ("arnvoicedsync", 8891), ("arnpbe7sx10", 8972), ("arntrtsync", 8880), ("arnmbenx10", 8896), ("arnmbtrx10", 8912), ("arnpbenx10", 8928), ("arnpbtrx10", 8944), ("arnpbtenx10", 8960), ("arnpbttrx10", 8976), ("snm10t16", 16384), ("snm100t2", 16640), ("snmatmoc31mm", 16896), ("snmatmoc31dmm", 16897), ("snmatmoc31sm", 16898), ("snmatmoc31dsm", 16899), ("snmfddismm", 17152), ("snmfddisms", 17153), ("snmfddissm", 17154), ("snmfddisss", 17155), ("snm10f8", 17408), ("snm100f2", 17664), ("snm10t16p4", 17920), ("snm100t2p4", 18176), ("snm10t14100t1", 18432), ("snm100t16", 18688), ("snm10t14100f1", 18944), ("atm5000ah", 524288), ("atm5000bh", 524544)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfHwModuleModIdOpt.setStatus('mandatory')
wfHwModuleModRev = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 1, 4, 1, 1, 4), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfHwModuleModRev.setStatus('mandatory')
wfHwModuleModSerialNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 1, 4, 1, 1, 5), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfHwModuleModSerialNumber.setStatus('mandatory')
wfHwModuleArtworkRev = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 1, 4, 1, 1, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfHwModuleArtworkRev.setStatus('mandatory')
wfHwModuleMemorySize1 = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 1, 4, 1, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfHwModuleMemorySize1.setStatus('mandatory')
wfHwModuleMemorySize2 = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 1, 4, 1, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfHwModuleMemorySize2.setStatus('mandatory')
wfHwModuleDaughterBdIdOpt = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 1, 4, 1, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfHwModuleDaughterBdIdOpt.setStatus('mandatory')
wfHwModuleLEDStatus1 = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 1, 4, 1, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfHwModuleLEDStatus1.setStatus('mandatory')
wfHwModuleLEDState1 = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 1, 4, 1, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfHwModuleLEDState1.setStatus('mandatory')
wfHwModuleLEDStatus2 = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 1, 4, 1, 1, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfHwModuleLEDStatus2.setStatus('mandatory')
wfHwModuleLEDState2 = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 1, 4, 1, 1, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfHwModuleLEDState2.setStatus('mandatory')
wfHwModuleLEDStatus3 = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 1, 4, 1, 1, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfHwModuleLEDStatus3.setStatus('mandatory')
wfHwModuleLEDState3 = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 1, 4, 1, 1, 15), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfHwModuleLEDState3.setStatus('mandatory')
wfModuleTable = MibTable((1, 3, 6, 1, 4, 1, 18, 3, 1, 4, 2), )
if mibBuilder.loadTexts: wfModuleTable.setStatus('mandatory')
wfModuleEntry = MibTableRow((1, 3, 6, 1, 4, 1, 18, 3, 1, 4, 2, 1), ).setIndexNames((0, "Wellfleet-MODULE-MIB", "wfModuleSlot"))
if mibBuilder.loadTexts: wfModuleEntry.setStatus('mandatory')
wfModuleDelete = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 1, 4, 2, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("created", 1), ("deleted", 2))).clone('created')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfModuleDelete.setStatus('mandatory')
wfModuleSlot = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 1, 4, 2, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfModuleSlot.setStatus('mandatory')
wfModuleTimerFrequency = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 1, 4, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("timerdefault", 1))).clone('timerdefault')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfModuleTimerFrequency.setStatus('mandatory')
wfModuleBufferBalance = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 1, 4, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("txrx", 1), ("none", 2), ("rx", 3), ("tx", 4))).clone('txrx')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfModuleBufferBalance.setStatus('mandatory')
wfModuleFddiWeight = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 1, 4, 2, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 10)).clone(6)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfModuleFddiWeight.setStatus('mandatory')
wfModuleTokenRingWeight = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 1, 4, 2, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 10)).clone(4)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfModuleTokenRingWeight.setStatus('mandatory')
wfModuleCsmacdWeight = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 1, 4, 2, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 10)).clone(3)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfModuleCsmacdWeight.setStatus('mandatory')
wfModuleSyncWeight = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 1, 4, 2, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 10)).clone(2)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfModuleSyncWeight.setStatus('mandatory')
wfModuleFreeBufferCredits = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 1, 4, 2, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfModuleFreeBufferCredits.setStatus('mandatory')
wfModuleTotalBufferCredits = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 1, 4, 2, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfModuleTotalBufferCredits.setStatus('mandatory')
wfModuleRestart = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 1, 4, 2, 1, 11), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfModuleRestart.setStatus('mandatory')
wfModuleCsmacd100Weight = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 1, 4, 2, 1, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 10)).clone(6)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfModuleCsmacd100Weight.setStatus('mandatory')
wfModuleBisyncWeight = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 1, 4, 2, 1, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 10)).clone(2)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfModuleBisyncWeight.setStatus('mandatory')
wfModuleHssiWeight = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 1, 4, 2, 1, 14), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 10)).clone(2)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfModuleHssiWeight.setStatus('mandatory')
mibBuilder.exportSymbols("Wellfleet-MODULE-MIB", wfHwModuleDaughterBdIdOpt=wfHwModuleDaughterBdIdOpt, wfModuleBufferBalance=wfModuleBufferBalance, wfHwModuleEntry=wfHwModuleEntry, wfHwModuleModSerialNumber=wfHwModuleModSerialNumber, wfModuleRestart=wfModuleRestart, wfHwModuleModIdOpt=wfHwModuleModIdOpt, wfHwModuleModule=wfHwModuleModule, wfModuleCsmacd100Weight=wfModuleCsmacd100Weight, wfHwModuleLEDState3=wfHwModuleLEDState3, wfModuleTokenRingWeight=wfModuleTokenRingWeight, wfHwModuleMemorySize2=wfHwModuleMemorySize2, wfHwModuleArtworkRev=wfHwModuleArtworkRev, wfModuleSlot=wfModuleSlot, wfModuleTable=wfModuleTable, wfModuleTotalBufferCredits=wfModuleTotalBufferCredits, wfHwModuleSlot=wfHwModuleSlot, wfModuleCsmacdWeight=wfModuleCsmacdWeight, wfHwModuleLEDStatus1=wfHwModuleLEDStatus1, wfModuleEntry=wfModuleEntry, wfModuleBisyncWeight=wfModuleBisyncWeight, wfModuleFreeBufferCredits=wfModuleFreeBufferCredits, wfHwModuleLEDStatus2=wfHwModuleLEDStatus2, wfModuleHssiWeight=wfModuleHssiWeight, wfHwModuleLEDState2=wfHwModuleLEDState2, wfHwModuleMemorySize1=wfHwModuleMemorySize1, wfModuleTimerFrequency=wfModuleTimerFrequency, wfHwModuleLEDState1=wfHwModuleLEDState1, wfHwModuleTable=wfHwModuleTable, wfHwModuleLEDStatus3=wfHwModuleLEDStatus3, wfModuleFddiWeight=wfModuleFddiWeight, wfModuleSyncWeight=wfModuleSyncWeight, wfHwModuleModRev=wfHwModuleModRev, wfModuleDelete=wfModuleDelete)
