#
# PySNMP MIB module INTELETHEREXPRESSTMPRO100BLANADAPTER-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/INTELETHEREXPRESSTMPRO100BLANADAPTER-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 19:44:02 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, Integer, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "OctetString", "Integer", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsUnion, ValueRangeConstraint, SingleValueConstraint, ValueSizeConstraint, ConstraintsIntersection = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsUnion", "ValueRangeConstraint", "SingleValueConstraint", "ValueSizeConstraint", "ConstraintsIntersection")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
Counter64, Gauge32, NotificationType, iso, ObjectIdentity, IpAddress, MibScalar, MibTable, MibTableRow, MibTableColumn, MibIdentifier, Unsigned32, Integer32, Bits, ModuleIdentity, enterprises, Counter32, TimeTicks = mibBuilder.importSymbols("SNMPv2-SMI", "Counter64", "Gauge32", "NotificationType", "iso", "ObjectIdentity", "IpAddress", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "MibIdentifier", "Unsigned32", "Integer32", "Bits", "ModuleIdentity", "enterprises", "Counter32", "TimeTicks")
TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString")
class DmiCounter(Counter32):
    pass

class DmiCounter64X(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ValueRangeConstraint(0, 18446744073709551615)

class DmiInteger(Integer32):
    pass

class DmiDisplaystring(DisplayString):
    pass

class DmiDateX(OctetString):
    subtypeSpec = OctetString.subtypeSpec + ValueSizeConstraint(28, 28)
    fixedLength = 28

class DmiComponentIndex(Integer32):
    pass

intel = MibIdentifier((1, 3, 6, 1, 4, 1, 343))
products = MibIdentifier((1, 3, 6, 1, 4, 1, 343, 2))
server_products = MibIdentifier((1, 3, 6, 1, 4, 1, 343, 2, 6)).setLabel("server-products")
nic = MibIdentifier((1, 3, 6, 1, 4, 1, 343, 2, 6, 4))
e100b = MibIdentifier((1, 3, 6, 1, 4, 1, 343, 2, 6, 4, 1))
dmtfGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 343, 2, 6, 4, 1, 1))
tComponentid = MibTable((1, 3, 6, 1, 4, 1, 343, 2, 6, 4, 1, 1, 1), )
if mibBuilder.loadTexts: tComponentid.setStatus('mandatory')
eComponentid = MibTableRow((1, 3, 6, 1, 4, 1, 343, 2, 6, 4, 1, 1, 1, 1), ).setIndexNames((0, "INTELETHEREXPRESSTMPRO100BLANADAPTER-MIB", "DmiComponentIndex"))
if mibBuilder.loadTexts: eComponentid.setStatus('mandatory')
a1Manufacturer = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 6, 4, 1, 1, 1, 1, 1), DmiDisplaystring()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a1Manufacturer.setStatus('mandatory')
a1Product = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 6, 4, 1, 1, 1, 1, 2), DmiDisplaystring()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a1Product.setStatus('mandatory')
a1Version = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 6, 4, 1, 1, 1, 1, 3), DmiDisplaystring())
if mibBuilder.loadTexts: a1Version.setStatus('mandatory')
a1SerialNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 6, 4, 1, 1, 1, 1, 4), DmiDisplaystring())
if mibBuilder.loadTexts: a1SerialNumber.setStatus('mandatory')
a1Installation = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 6, 4, 1, 1, 1, 1, 5), DmiDateX()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a1Installation.setStatus('mandatory')
a1Verify = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 6, 4, 1, 1, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("vAnErrorOccurredCheckStatusCode", 0), ("vThisComponentDoesNotExist", 1), ("vVerificationIsNotSupported", 2), ("vReserved", 3), ("vThisComponentExistsButTheFunctionalityI", 4), ("vThisComponentExistsButTheFunctionality1", 5), ("vThisComponentExistsAndIsNotFunctioningC", 6), ("vThisComponentExistsAndIsFunctioningCorr", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: a1Verify.setStatus('mandatory')
tSystemResourcesDescription = MibTable((1, 3, 6, 1, 4, 1, 343, 2, 6, 4, 1, 1, 2), )
if mibBuilder.loadTexts: tSystemResourcesDescription.setStatus('mandatory')
eSystemResourcesDescription = MibTableRow((1, 3, 6, 1, 4, 1, 343, 2, 6, 4, 1, 1, 2, 1), ).setIndexNames((0, "INTELETHEREXPRESSTMPRO100BLANADAPTER-MIB", "DmiComponentIndex"))
if mibBuilder.loadTexts: eSystemResourcesDescription.setStatus('mandatory')
a2DeviceCount = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 6, 4, 1, 1, 2, 1, 1), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a2DeviceCount.setStatus('mandatory')
a2SystemResourceCount = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 6, 4, 1, 1, 2, 1, 2), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a2SystemResourceCount.setStatus('mandatory')
tSystemResources = MibTable((1, 3, 6, 1, 4, 1, 343, 2, 6, 4, 1, 1, 3), )
if mibBuilder.loadTexts: tSystemResources.setStatus('mandatory')
eSystemResources = MibTableRow((1, 3, 6, 1, 4, 1, 343, 2, 6, 4, 1, 1, 3, 1), ).setIndexNames((0, "INTELETHEREXPRESSTMPRO100BLANADAPTER-MIB", "DmiComponentIndex"), (0, "INTELETHEREXPRESSTMPRO100BLANADAPTER-MIB", "a3DeviceId"), (0, "INTELETHEREXPRESSTMPRO100BLANADAPTER-MIB", "a3ResourceNumber"))
if mibBuilder.loadTexts: eSystemResources.setStatus('mandatory')
a3DeviceId = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 6, 4, 1, 1, 3, 1, 1), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a3DeviceId.setStatus('mandatory')
a3ResourceNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 6, 4, 1, 1, 3, 1, 2), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a3ResourceNumber.setStatus('mandatory')
a3ResourceType = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 6, 4, 1, 1, 3, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("vOther", 1), ("vUnknown", 2), ("vMemoryRange", 3), ("vIoPort", 4), ("vIrq", 5), ("vDma", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: a3ResourceType.setStatus('mandatory')
a3ResourceBase = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 6, 4, 1, 1, 3, 1, 4), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a3ResourceBase.setStatus('mandatory')
a3ResourceSize = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 6, 4, 1, 1, 3, 1, 5), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a3ResourceSize.setStatus('mandatory')
a3ResourceFlags = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 6, 4, 1, 1, 3, 1, 6), DmiInteger())
if mibBuilder.loadTexts: a3ResourceFlags.setStatus('mandatory')
a3GroupId = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 6, 4, 1, 1, 3, 1, 7), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a3GroupId.setStatus('mandatory')
tNetworkAdapter802PortGroup = MibTable((1, 3, 6, 1, 4, 1, 343, 2, 6, 4, 1, 1, 4), )
if mibBuilder.loadTexts: tNetworkAdapter802PortGroup.setStatus('mandatory')
eNetworkAdapter802PortGroup = MibTableRow((1, 3, 6, 1, 4, 1, 343, 2, 6, 4, 1, 1, 4, 1), ).setIndexNames((0, "INTELETHEREXPRESSTMPRO100BLANADAPTER-MIB", "DmiComponentIndex"), (0, "INTELETHEREXPRESSTMPRO100BLANADAPTER-MIB", "a4PortIndex"))
if mibBuilder.loadTexts: eNetworkAdapter802PortGroup.setStatus('mandatory')
a4PortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 6, 4, 1, 1, 4, 1, 1), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a4PortIndex.setStatus('mandatory')
a4PermanentNetworkAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 6, 4, 1, 1, 4, 1, 2), DmiDisplaystring()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a4PermanentNetworkAddress.setStatus('mandatory')
a4CurrentNetworkAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 6, 4, 1, 1, 4, 1, 3), DmiDisplaystring()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a4CurrentNetworkAddress.setStatus('mandatory')
a4ConnectorType = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 6, 4, 1, 1, 4, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10))).clone(namedValues=NamedValues(("vUnknown", 1), ("vAui", 2), ("vUtpCategory3", 3), ("vUtpCategory4", 4), ("vUtpCategory5", 5), ("vBnc", 6), ("vStpRj45", 7), ("vStpDb9", 8), ("vFiberMic", 9), ("vAppleAui", 10)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: a4ConnectorType.setStatus('mandatory')
a4DataRate = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 6, 4, 1, 1, 4, 1, 5), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a4DataRate.setStatus('mandatory')
a4TotalPacketsTransmitted = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 6, 4, 1, 1, 4, 1, 6), DmiCounter64X()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a4TotalPacketsTransmitted.setStatus('mandatory')
a4TotalBytesTransmitted = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 6, 4, 1, 1, 4, 1, 7), DmiCounter64X()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a4TotalBytesTransmitted.setStatus('mandatory')
a4TotalPacketsReceived = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 6, 4, 1, 1, 4, 1, 8), DmiCounter64X()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a4TotalPacketsReceived.setStatus('mandatory')
a4TotalBytesReceived = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 6, 4, 1, 1, 4, 1, 9), DmiCounter64X()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a4TotalBytesReceived.setStatus('mandatory')
a4TotalTransmitErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 6, 4, 1, 1, 4, 1, 10), DmiCounter64X()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a4TotalTransmitErrors.setStatus('mandatory')
a4TotalReceiveErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 6, 4, 1, 1, 4, 1, 11), DmiCounter64X()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a4TotalReceiveErrors.setStatus('mandatory')
a4TotalHostErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 6, 4, 1, 1, 4, 1, 12), DmiCounter64X()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a4TotalHostErrors.setStatus('mandatory')
a4TotalWireErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 6, 4, 1, 1, 4, 1, 13), DmiCounter64X()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a4TotalWireErrors.setStatus('mandatory')
t802AlternateAddressGroup = MibTable((1, 3, 6, 1, 4, 1, 343, 2, 6, 4, 1, 1, 5), )
if mibBuilder.loadTexts: t802AlternateAddressGroup.setStatus('mandatory')
e802AlternateAddressGroup = MibTableRow((1, 3, 6, 1, 4, 1, 343, 2, 6, 4, 1, 1, 5, 1), ).setIndexNames((0, "INTELETHEREXPRESSTMPRO100BLANADAPTER-MIB", "DmiComponentIndex"), (0, "INTELETHEREXPRESSTMPRO100BLANADAPTER-MIB", "a5AlternateAddressIndex"))
if mibBuilder.loadTexts: e802AlternateAddressGroup.setStatus('mandatory')
a5AlternateAddressIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 6, 4, 1, 1, 5, 1, 1), DmiInteger())
if mibBuilder.loadTexts: a5AlternateAddressIndex.setStatus('mandatory')
a5PortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 6, 4, 1, 1, 5, 1, 2), DmiInteger())
if mibBuilder.loadTexts: a5PortIndex.setStatus('mandatory')
a5AddressType = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 6, 4, 1, 1, 5, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("vMulticast", 1), ("vFunctional", 2), ("vGroup", 3))))
if mibBuilder.loadTexts: a5AddressType.setStatus('mandatory')
a5AlternateAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 6, 4, 1, 1, 5, 1, 4), DmiDisplaystring())
if mibBuilder.loadTexts: a5AlternateAddress.setStatus('mandatory')
tNetworkAdapterDriverGroup = MibTable((1, 3, 6, 1, 4, 1, 343, 2, 6, 4, 1, 1, 6), )
if mibBuilder.loadTexts: tNetworkAdapterDriverGroup.setStatus('mandatory')
eNetworkAdapterDriverGroup = MibTableRow((1, 3, 6, 1, 4, 1, 343, 2, 6, 4, 1, 1, 6, 1), ).setIndexNames((0, "INTELETHEREXPRESSTMPRO100BLANADAPTER-MIB", "DmiComponentIndex"), (0, "INTELETHEREXPRESSTMPRO100BLANADAPTER-MIB", "a6DriverIndex"))
if mibBuilder.loadTexts: eNetworkAdapterDriverGroup.setStatus('mandatory')
a6DriverIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 6, 4, 1, 1, 6, 1, 1), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a6DriverIndex.setStatus('mandatory')
a6DriverSoftwareName = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 6, 4, 1, 1, 6, 1, 2), DmiDisplaystring()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a6DriverSoftwareName.setStatus('mandatory')
a6DriverSoftwareVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 6, 4, 1, 1, 6, 1, 3), DmiDisplaystring()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a6DriverSoftwareVersion.setStatus('mandatory')
a6DriverSoftwareDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 6, 4, 1, 1, 6, 1, 4), DmiDisplaystring()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a6DriverSoftwareDescription.setStatus('mandatory')
a6DriverSize = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 6, 4, 1, 1, 6, 1, 5), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a6DriverSize.setStatus('mandatory')
a6DriverInterfaceType = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 6, 4, 1, 1, 6, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12))).clone(namedValues=NamedValues(("vOther", 1), ("vIpx", 2), ("vOdi", 3), ("vNdis", 4), ("vPacketDriver", 5), ("vLantastic", 6), ("vUnix", 7), ("vAppletalk", 8), ("vIbmLanSupportProgram", 9), ("vLlc", 10), ("vNetbios", 11), ("vPathworksDll", 12)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: a6DriverInterfaceType.setStatus('mandatory')
a6DriverInterfaceVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 6, 4, 1, 1, 6, 1, 7), DmiDisplaystring()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a6DriverInterfaceVersion.setStatus('mandatory')
a6DriverInterfaceDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 6, 4, 1, 1, 6, 1, 8), DmiDisplaystring()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a6DriverInterfaceDescription.setStatus('mandatory')
tNetworkAdapterHardwareGroup = MibTable((1, 3, 6, 1, 4, 1, 343, 2, 6, 4, 1, 1, 7), )
if mibBuilder.loadTexts: tNetworkAdapterHardwareGroup.setStatus('mandatory')
eNetworkAdapterHardwareGroup = MibTableRow((1, 3, 6, 1, 4, 1, 343, 2, 6, 4, 1, 1, 7, 1), ).setIndexNames((0, "INTELETHEREXPRESSTMPRO100BLANADAPTER-MIB", "DmiComponentIndex"))
if mibBuilder.loadTexts: eNetworkAdapterHardwareGroup.setStatus('mandatory')
a7NetworkTopology = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 6, 4, 1, 1, 7, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13))).clone(namedValues=NamedValues(("vOther", 1), ("v10MbpsEthernet", 2), ("v100MbpsEthernet", 3), ("v10010MbpsEthernet", 4), ("v100MbpsVgAnylan", 5), ("v4MbpsToken-ring", 6), ("v16MbpsToken-ring", 7), ("v164MbpsToken-ring", 8), ("v2MbpsArcnet", 9), ("v20MbpsArcnet", 10), ("vFddi", 11), ("vAtm", 12), ("vAppletalk1", 13)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: a7NetworkTopology.setStatus('mandatory')
a7TransmissionCapability = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 6, 4, 1, 1, 7, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("vNormal", 1), ("vFullDuplex", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: a7TransmissionCapability.setStatus('mandatory')
a7NetworkAdapterRamSize = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 6, 4, 1, 1, 7, 1, 3), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a7NetworkAdapterRamSize.setStatus('mandatory')
a7BusType = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 6, 4, 1, 1, 7, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 256))).clone(namedValues=NamedValues(("vOther", 1), ("vIsa", 2), ("vEisa", 3), ("vMca", 4), ("vPci", 5), ("vVl", 6), ("vPcmcia", 7), ("vParallel", 8), ("vNec98", 9), ("vMotherboard", 256)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: a7BusType.setStatus('mandatory')
a7BusWidth = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 6, 4, 1, 1, 7, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("vOther", 1), ("vUnknown", 2), ("v8BitCard", 3), ("v16BitCard", 4), ("v32BitCard", 5), ("v64BitCard", 6), ("v128BitCard", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: a7BusWidth.setStatus('mandatory')
tOperationalState = MibTable((1, 3, 6, 1, 4, 1, 343, 2, 6, 4, 1, 1, 8), )
if mibBuilder.loadTexts: tOperationalState.setStatus('mandatory')
eOperationalState = MibTableRow((1, 3, 6, 1, 4, 1, 343, 2, 6, 4, 1, 1, 8, 1), ).setIndexNames((0, "INTELETHEREXPRESSTMPRO100BLANADAPTER-MIB", "DmiComponentIndex"), (0, "INTELETHEREXPRESSTMPRO100BLANADAPTER-MIB", "a8OperationalStateInstanceIndex"))
if mibBuilder.loadTexts: eOperationalState.setStatus('mandatory')
a8OperationalStateInstanceIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 6, 4, 1, 1, 8, 1, 1), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a8OperationalStateInstanceIndex.setStatus('mandatory')
a8DeviceGroupIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 6, 4, 1, 1, 8, 1, 2), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a8DeviceGroupIndex.setStatus('mandatory')
a8OperationalStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 6, 4, 1, 1, 8, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("vOther", 1), ("vUnknown", 2), ("vEnabled", 3), ("vDisabled", 4), ("vNotApplicable", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: a8OperationalStatus.setStatus('mandatory')
a8UsageState = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 6, 4, 1, 1, 8, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("vOther", 1), ("vUnknown", 2), ("vIdle", 3), ("vActive", 4), ("vBusy", 5), ("vNotApplicable", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: a8UsageState.setStatus('mandatory')
a8AvailabilityStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 6, 4, 1, 1, 8, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13))).clone(namedValues=NamedValues(("vOther", 1), ("vUnknown", 2), ("vRunning", 3), ("vWarning", 4), ("vInTest", 5), ("vNotApplicable", 6), ("vPowerOff", 7), ("vOffLine", 8), ("vOffDuty", 9), ("vDegraded", 10), ("vNotInstalled", 11), ("vInstallError", 12), ("vPowerSave", 13)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: a8AvailabilityStatus.setStatus('mandatory')
a8AdministrativeState = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 6, 4, 1, 1, 8, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("vOther", 1), ("vUnknown", 2), ("vLocked", 3), ("vUnlocked", 4), ("vNotApplicable", 5), ("vShuttingDown", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: a8AdministrativeState.setStatus('mandatory')
a8FatalErrorCount = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 6, 4, 1, 1, 8, 1, 7), DmiCounter()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a8FatalErrorCount.setStatus('mandatory')
a8MajorErrorCount = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 6, 4, 1, 1, 8, 1, 8), DmiCounter()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a8MajorErrorCount.setStatus('mandatory')
a8WarningErrorCount = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 6, 4, 1, 1, 8, 1, 9), DmiCounter()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a8WarningErrorCount.setStatus('mandatory')
tFruTable = MibTable((1, 3, 6, 1, 4, 1, 343, 2, 6, 4, 1, 1, 9), )
if mibBuilder.loadTexts: tFruTable.setStatus('mandatory')
eFruTable = MibTableRow((1, 3, 6, 1, 4, 1, 343, 2, 6, 4, 1, 1, 9, 1), ).setIndexNames((0, "INTELETHEREXPRESSTMPRO100BLANADAPTER-MIB", "DmiComponentIndex"), (0, "INTELETHEREXPRESSTMPRO100BLANADAPTER-MIB", "a9FruIndex"))
if mibBuilder.loadTexts: eFruTable.setStatus('mandatory')
a9FruIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 6, 4, 1, 1, 9, 1, 1), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a9FruIndex.setStatus('mandatory')
a9DeviceGroupIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 6, 4, 1, 1, 9, 1, 2), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a9DeviceGroupIndex.setStatus('mandatory')
a9Description = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 6, 4, 1, 1, 9, 1, 3), DmiDisplaystring()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a9Description.setStatus('mandatory')
a9Manufacturer = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 6, 4, 1, 1, 9, 1, 4), DmiDisplaystring()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a9Manufacturer.setStatus('mandatory')
a9Model = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 6, 4, 1, 1, 9, 1, 5), DmiDisplaystring()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a9Model.setStatus('mandatory')
a9PartNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 6, 4, 1, 1, 9, 1, 6), DmiDisplaystring())
if mibBuilder.loadTexts: a9PartNumber.setStatus('mandatory')
a9FruSerialNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 6, 4, 1, 1, 9, 1, 7), DmiDisplaystring())
if mibBuilder.loadTexts: a9FruSerialNumber.setStatus('mandatory')
a9RevisionLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 6, 4, 1, 1, 9, 1, 8), DmiDisplaystring())
if mibBuilder.loadTexts: a9RevisionLevel.setStatus('mandatory')
a9WarrantyStartDate = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 6, 4, 1, 1, 9, 1, 9), DmiDateX()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a9WarrantyStartDate.setStatus('mandatory')
a9WarrantyDuration = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 6, 4, 1, 1, 9, 1, 10), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a9WarrantyDuration.setStatus('mandatory')
a9SupportPhoneNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 6, 4, 1, 1, 9, 1, 11), DmiDisplaystring()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a9SupportPhoneNumber.setStatus('mandatory')
tBootRomConfiguration = MibTable((1, 3, 6, 1, 4, 1, 343, 2, 6, 4, 1, 1, 10), )
if mibBuilder.loadTexts: tBootRomConfiguration.setStatus('mandatory')
eBootRomConfiguration = MibTableRow((1, 3, 6, 1, 4, 1, 343, 2, 6, 4, 1, 1, 10, 1), ).setIndexNames((0, "INTELETHEREXPRESSTMPRO100BLANADAPTER-MIB", "DmiComponentIndex"))
if mibBuilder.loadTexts: eBootRomConfiguration.setStatus('mandatory')
a10BootRomDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 6, 4, 1, 1, 10, 1, 1), DmiDisplaystring()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a10BootRomDescription.setStatus('mandatory')
a10BootRomVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 6, 4, 1, 1, 10, 1, 2), DmiDisplaystring()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a10BootRomVersion.setStatus('mandatory')
a10RemoteBootProtocolType = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 6, 4, 1, 1, 10, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("vOther", 1), ("vNone", 2), ("vRpl", 3), ("vBootp", 4), ("vDecMop", 5), ("vNativeNetware", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: a10RemoteBootProtocolType.setStatus('mandatory')
a10RemoteBootProtocolVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 6, 4, 1, 1, 10, 1, 4), DmiDisplaystring()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a10RemoteBootProtocolVersion.setStatus('mandatory')
tBootRomCapabilities = MibTable((1, 3, 6, 1, 4, 1, 343, 2, 6, 4, 1, 1, 11), )
if mibBuilder.loadTexts: tBootRomCapabilities.setStatus('mandatory')
eBootRomCapabilities = MibTableRow((1, 3, 6, 1, 4, 1, 343, 2, 6, 4, 1, 1, 11, 1), ).setIndexNames((0, "INTELETHEREXPRESSTMPRO100BLANADAPTER-MIB", "DmiComponentIndex"), (0, "INTELETHEREXPRESSTMPRO100BLANADAPTER-MIB", "a11CapabilityIndex"))
if mibBuilder.loadTexts: eBootRomCapabilities.setStatus('mandatory')
a11CapabilityIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 6, 4, 1, 1, 11, 1, 1), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a11CapabilityIndex.setStatus('mandatory')
a11CapabilityDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 6, 4, 1, 1, 11, 1, 2), DmiDisplaystring()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a11CapabilityDescription.setStatus('mandatory')
a11CapabilityStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 6, 4, 1, 1, 11, 1, 3), DmiDisplaystring()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a11CapabilityStatus.setStatus('mandatory')
tIntellanadapterextensionsgroup = MibTable((1, 3, 6, 1, 4, 1, 343, 2, 6, 4, 1, 1, 12), )
if mibBuilder.loadTexts: tIntellanadapterextensionsgroup.setStatus('mandatory')
eIntellanadapterextensionsgroup = MibTableRow((1, 3, 6, 1, 4, 1, 343, 2, 6, 4, 1, 1, 12, 1), ).setIndexNames((0, "INTELETHEREXPRESSTMPRO100BLANADAPTER-MIB", "DmiComponentIndex"))
if mibBuilder.loadTexts: eIntellanadapterextensionsgroup.setStatus('mandatory')
a12DriverFilename = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 6, 4, 1, 1, 12, 1, 1), DmiDisplaystring()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a12DriverFilename.setStatus('mandatory')
a12DriverDate = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 6, 4, 1, 1, 12, 1, 2), DmiDateX()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a12DriverDate.setStatus('mandatory')
a12MifAndInstrumentationFilename = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 6, 4, 1, 1, 12, 1, 3), DmiDisplaystring()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a12MifAndInstrumentationFilename.setStatus('mandatory')
a12InstrumentationVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 6, 4, 1, 1, 12, 1, 4), DmiDisplaystring()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a12InstrumentationVersion.setStatus('mandatory')
a12MifVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 6, 4, 1, 1, 12, 1, 5), DmiDisplaystring()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a12MifVersion.setStatus('mandatory')
tIndication_control_group = MibTable((1, 3, 6, 1, 4, 1, 343, 2, 6, 4, 1, 1, 151), )
if mibBuilder.loadTexts: tIndication_control_group.setStatus('mandatory')
eIndication_control_group = MibTableRow((1, 3, 6, 1, 4, 1, 343, 2, 6, 4, 1, 1, 151, 1), ).setIndexNames((0, "INTELETHEREXPRESSTMPRO100BLANADAPTER-MIB", "DmiComponentIndex"), (0, "INTELETHEREXPRESSTMPRO100BLANADAPTER-MIB", "a151PortIndex"))
if mibBuilder.loadTexts: eIndication_control_group.setStatus('mandatory')
a151PortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 6, 4, 1, 1, 151, 1, 1), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a151PortIndex.setStatus('mandatory')
a151IndicationEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 6, 4, 1, 1, 151, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("vOff", 0), ("vOn", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: a151IndicationEnable.setStatus('mandatory')
a151TotalTransmitIndicationEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 6, 4, 1, 1, 151, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("vOff", 0), ("vOn", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: a151TotalTransmitIndicationEnable.setStatus('mandatory')
a151TotalTransmitErrorsThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 6, 4, 1, 1, 151, 1, 4), DmiCounter64X()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: a151TotalTransmitErrorsThreshold.setStatus('mandatory')
a151TotalReceiveIndicationEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 6, 4, 1, 1, 151, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("vOff", 0), ("vOn", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: a151TotalReceiveIndicationEnable.setStatus('mandatory')
a151TotalReceiveErrorsThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 6, 4, 1, 1, 151, 1, 6), DmiCounter64X()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: a151TotalReceiveErrorsThreshold.setStatus('mandatory')
a151TotalHostIndicationEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 6, 4, 1, 1, 151, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("vOff", 0), ("vOn", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: a151TotalHostIndicationEnable.setStatus('mandatory')
a151TotalHostErrorsThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 6, 4, 1, 1, 151, 1, 8), DmiCounter64X()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: a151TotalHostErrorsThreshold.setStatus('mandatory')
a151TotalWireIndicationEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 6, 4, 1, 1, 151, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("vOff", 0), ("vOn", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: a151TotalWireIndicationEnable.setStatus('mandatory')
a151TotalWireErrorsThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 6, 4, 1, 1, 151, 1, 10), DmiCounter64X()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: a151TotalWireErrorsThreshold.setStatus('mandatory')
tErrorcontrol = MibTable((1, 3, 6, 1, 4, 1, 343, 2, 6, 4, 1, 1, 152), )
if mibBuilder.loadTexts: tErrorcontrol.setStatus('mandatory')
eErrorcontrol = MibTableRow((1, 3, 6, 1, 4, 1, 343, 2, 6, 4, 1, 1, 152, 1), ).setIndexNames((0, "INTELETHEREXPRESSTMPRO100BLANADAPTER-MIB", "DmiComponentIndex"), (0, "INTELETHEREXPRESSTMPRO100BLANADAPTER-MIB", "a152Selfid"))
if mibBuilder.loadTexts: eErrorcontrol.setStatus('mandatory')
a152Selfid = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 6, 4, 1, 1, 152, 1, 1), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a152Selfid.setStatus('mandatory')
a152Fatalcount = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 6, 4, 1, 1, 152, 1, 2), DmiCounter()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a152Fatalcount.setStatus('mandatory')
a152Majorcount = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 6, 4, 1, 1, 152, 1, 3), DmiCounter()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a152Majorcount.setStatus('mandatory')
a152Warningcount = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 6, 4, 1, 1, 152, 1, 4), DmiCounter()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a152Warningcount.setStatus('mandatory')
a152Errstatus = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 6, 4, 1, 1, 152, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4))).clone(namedValues=NamedValues(("vOk", 0), ("vWarning1", 1), ("vMajor", 2), ("vFatal", 3), ("vUnknown", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: a152Errstatus.setStatus('mandatory')
a152Errstatustype = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 6, 4, 1, 1, 152, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("vPost", 0), ("vRuntime", 1), ("vDiagnosticTest", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: a152Errstatustype.setStatus('mandatory')
tMiftomib = MibTable((1, 3, 6, 1, 4, 1, 343, 2, 6, 4, 1, 1, 153), )
if mibBuilder.loadTexts: tMiftomib.setStatus('mandatory')
eMiftomib = MibTableRow((1, 3, 6, 1, 4, 1, 343, 2, 6, 4, 1, 1, 153, 1), ).setIndexNames((0, "INTELETHEREXPRESSTMPRO100BLANADAPTER-MIB", "DmiComponentIndex"))
if mibBuilder.loadTexts: eMiftomib.setStatus('mandatory')
a153MibName = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 6, 4, 1, 1, 153, 1, 1), DmiDisplaystring()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a153MibName.setStatus('mandatory')
a153MibOid = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 6, 4, 1, 1, 153, 1, 2), DmiDisplaystring()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a153MibOid.setStatus('mandatory')
a153DisableTrap = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 6, 4, 1, 1, 153, 1, 3), DmiInteger()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: a153DisableTrap.setStatus('mandatory')
tTrapGroup = MibTable((1, 3, 6, 1, 4, 1, 343, 2, 6, 4, 1, 1, 9999), )
if mibBuilder.loadTexts: tTrapGroup.setStatus('mandatory')
eTrapGroup = MibTableRow((1, 3, 6, 1, 4, 1, 343, 2, 6, 4, 1, 1, 9999, 1), ).setIndexNames((0, "INTELETHEREXPRESSTMPRO100BLANADAPTER-MIB", "DmiComponentIndex"))
if mibBuilder.loadTexts: eTrapGroup.setStatus('mandatory')
a9999ErrorTime = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 6, 4, 1, 1, 9999, 1, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a9999ErrorTime.setStatus('mandatory')
a9999ErrorStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 6, 4, 1, 1, 9999, 1, 2), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a9999ErrorStatus.setStatus('mandatory')
a9999ErrorGroupId = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 6, 4, 1, 1, 9999, 1, 3), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a9999ErrorGroupId.setStatus('mandatory')
a9999ErrorInstanceId = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 6, 4, 1, 1, 9999, 1, 4), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a9999ErrorInstanceId.setStatus('mandatory')
a9999ComponentId = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 6, 4, 1, 1, 9999, 1, 5), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a9999ComponentId.setStatus('mandatory')
a9999GroupId = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 6, 4, 1, 1, 9999, 1, 6), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a9999GroupId.setStatus('mandatory')
a9999InstanceId = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 6, 4, 1, 1, 9999, 1, 7), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a9999InstanceId.setStatus('mandatory')
a9999VendorCode1 = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 6, 4, 1, 1, 9999, 1, 8), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a9999VendorCode1.setStatus('mandatory')
a9999VendorCode2 = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 6, 4, 1, 1, 9999, 1, 9), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a9999VendorCode2.setStatus('mandatory')
a9999VendorText = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 6, 4, 1, 1, 9999, 1, 10), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a9999VendorText.setStatus('mandatory')
a9999ParentGroupId = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 6, 4, 1, 1, 9999, 1, 11), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a9999ParentGroupId.setStatus('mandatory')
a9999ParentInstanceId = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 6, 4, 1, 1, 9999, 1, 12), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a9999ParentInstanceId.setStatus('mandatory')
e100bEventError = NotificationType((1, 3, 6, 1, 4, 1, 343, 2, 6, 4, 1, 1, 9999, 1) + (0,1)).setObjects(("INTELETHEREXPRESSTMPRO100BLANADAPTER-MIB", "a9999ErrorTime"), ("INTELETHEREXPRESSTMPRO100BLANADAPTER-MIB", "a9999ErrorStatus"), ("INTELETHEREXPRESSTMPRO100BLANADAPTER-MIB", "a9999ErrorGroupId"), ("INTELETHEREXPRESSTMPRO100BLANADAPTER-MIB", "a9999ErrorInstanceId"), ("INTELETHEREXPRESSTMPRO100BLANADAPTER-MIB", "a9999ComponentId"), ("INTELETHEREXPRESSTMPRO100BLANADAPTER-MIB", "a9999GroupId"), ("INTELETHEREXPRESSTMPRO100BLANADAPTER-MIB", "a9999InstanceId"), ("INTELETHEREXPRESSTMPRO100BLANADAPTER-MIB", "a9999VendorCode1"), ("INTELETHEREXPRESSTMPRO100BLANADAPTER-MIB", "a9999VendorCode2"), ("INTELETHEREXPRESSTMPRO100BLANADAPTER-MIB", "a9999VendorText"), ("INTELETHEREXPRESSTMPRO100BLANADAPTER-MIB", "a9999ParentGroupId"), ("INTELETHEREXPRESSTMPRO100BLANADAPTER-MIB", "a9999ParentInstanceId"))
mibBuilder.exportSymbols("INTELETHEREXPRESSTMPRO100BLANADAPTER-MIB", a12MifAndInstrumentationFilename=a12MifAndInstrumentationFilename, tTrapGroup=tTrapGroup, a9999ErrorTime=a9999ErrorTime, a5AddressType=a5AddressType, a3ResourceType=a3ResourceType, a9SupportPhoneNumber=a9SupportPhoneNumber, a3ResourceNumber=a3ResourceNumber, a152Errstatustype=a152Errstatustype, a8WarningErrorCount=a8WarningErrorCount, a4PortIndex=a4PortIndex, a152Selfid=a152Selfid, a6DriverInterfaceType=a6DriverInterfaceType, a9DeviceGroupIndex=a9DeviceGroupIndex, tFruTable=tFruTable, a4TotalHostErrors=a4TotalHostErrors, a9RevisionLevel=a9RevisionLevel, a3GroupId=a3GroupId, a5AlternateAddress=a5AlternateAddress, a153MibName=a153MibName, a6DriverInterfaceDescription=a6DriverInterfaceDescription, DmiInteger=DmiInteger, tOperationalState=tOperationalState, a2SystemResourceCount=a2SystemResourceCount, eNetworkAdapterHardwareGroup=eNetworkAdapterHardwareGroup, tSystemResources=tSystemResources, eBootRomCapabilities=eBootRomCapabilities, tSystemResourcesDescription=tSystemResourcesDescription, a4TotalWireErrors=a4TotalWireErrors, a4TotalPacketsReceived=a4TotalPacketsReceived, a5AlternateAddressIndex=a5AlternateAddressIndex, e100b=e100b, DmiComponentIndex=DmiComponentIndex, a152Fatalcount=a152Fatalcount, a4TotalTransmitErrors=a4TotalTransmitErrors, a9999VendorCode1=a9999VendorCode1, DmiDateX=DmiDateX, a9999ParentInstanceId=a9999ParentInstanceId, a10RemoteBootProtocolVersion=a10RemoteBootProtocolVersion, a3ResourceBase=a3ResourceBase, t802AlternateAddressGroup=t802AlternateAddressGroup, a5PortIndex=a5PortIndex, server_products=server_products, e802AlternateAddressGroup=e802AlternateAddressGroup, a1Version=a1Version, eSystemResourcesDescription=eSystemResourcesDescription, a6DriverIndex=a6DriverIndex, a9Manufacturer=a9Manufacturer, a7BusType=a7BusType, a8FatalErrorCount=a8FatalErrorCount, eIntellanadapterextensionsgroup=eIntellanadapterextensionsgroup, a151IndicationEnable=a151IndicationEnable, products=products, tBootRomCapabilities=tBootRomCapabilities, a2DeviceCount=a2DeviceCount, tIndication_control_group=tIndication_control_group, a8AvailabilityStatus=a8AvailabilityStatus, a4TotalBytesReceived=a4TotalBytesReceived, tNetworkAdapterHardwareGroup=tNetworkAdapterHardwareGroup, a4CurrentNetworkAddress=a4CurrentNetworkAddress, a9999ComponentId=a9999ComponentId, nic=nic, a6DriverInterfaceVersion=a6DriverInterfaceVersion, a1Installation=a1Installation, intel=intel, a12InstrumentationVersion=a12InstrumentationVersion, tErrorcontrol=tErrorcontrol, DmiDisplaystring=DmiDisplaystring, tMiftomib=tMiftomib, eTrapGroup=eTrapGroup, a9999VendorCode2=a9999VendorCode2, a9999InstanceId=a9999InstanceId, a8UsageState=a8UsageState, a1SerialNumber=a1SerialNumber, eFruTable=eFruTable, a9FruIndex=a9FruIndex, a9WarrantyStartDate=a9WarrantyStartDate, a3DeviceId=a3DeviceId, a6DriverSoftwareDescription=a6DriverSoftwareDescription, tBootRomConfiguration=tBootRomConfiguration, a151PortIndex=a151PortIndex, eIndication_control_group=eIndication_control_group, a151TotalTransmitErrorsThreshold=a151TotalTransmitErrorsThreshold, eErrorcontrol=eErrorcontrol, a1Verify=a1Verify, a12DriverFilename=a12DriverFilename, a151TotalHostErrorsThreshold=a151TotalHostErrorsThreshold, a9Description=a9Description, a9WarrantyDuration=a9WarrantyDuration, a9999ErrorGroupId=a9999ErrorGroupId, a10BootRomVersion=a10BootRomVersion, a9999GroupId=a9999GroupId, a11CapabilityIndex=a11CapabilityIndex, a3ResourceSize=a3ResourceSize, a4TotalBytesTransmitted=a4TotalBytesTransmitted, a4PermanentNetworkAddress=a4PermanentNetworkAddress, a9Model=a9Model, a11CapabilityDescription=a11CapabilityDescription, a12DriverDate=a12DriverDate, a153MibOid=a153MibOid, a8OperationalStateInstanceIndex=a8OperationalStateInstanceIndex, eComponentid=eComponentid, tComponentid=tComponentid, a8AdministrativeState=a8AdministrativeState, a151TotalTransmitIndicationEnable=a151TotalTransmitIndicationEnable, a151TotalReceiveIndicationEnable=a151TotalReceiveIndicationEnable, a1Product=a1Product, eSystemResources=eSystemResources, a4TotalPacketsTransmitted=a4TotalPacketsTransmitted, a6DriverSize=a6DriverSize, a10BootRomDescription=a10BootRomDescription, a152Errstatus=a152Errstatus, a151TotalHostIndicationEnable=a151TotalHostIndicationEnable, a151TotalWireIndicationEnable=a151TotalWireIndicationEnable, a153DisableTrap=a153DisableTrap, a3ResourceFlags=a3ResourceFlags, a8OperationalStatus=a8OperationalStatus, a9FruSerialNumber=a9FruSerialNumber, dmtfGroups=dmtfGroups, a10RemoteBootProtocolType=a10RemoteBootProtocolType, a12MifVersion=a12MifVersion, a4ConnectorType=a4ConnectorType, DmiCounter=DmiCounter, e100bEventError=e100bEventError, a11CapabilityStatus=a11CapabilityStatus, a9999VendorText=a9999VendorText, tNetworkAdapterDriverGroup=tNetworkAdapterDriverGroup, a152Warningcount=a152Warningcount, eNetworkAdapterDriverGroup=eNetworkAdapterDriverGroup, DmiCounter64X=DmiCounter64X, eBootRomConfiguration=eBootRomConfiguration, a1Manufacturer=a1Manufacturer, a9999ParentGroupId=a9999ParentGroupId, a6DriverSoftwareName=a6DriverSoftwareName, eOperationalState=eOperationalState, a8DeviceGroupIndex=a8DeviceGroupIndex, a151TotalReceiveErrorsThreshold=a151TotalReceiveErrorsThreshold, a152Majorcount=a152Majorcount, a7BusWidth=a7BusWidth, a7TransmissionCapability=a7TransmissionCapability, tNetworkAdapter802PortGroup=tNetworkAdapter802PortGroup, tIntellanadapterextensionsgroup=tIntellanadapterextensionsgroup, a151TotalWireErrorsThreshold=a151TotalWireErrorsThreshold, eNetworkAdapter802PortGroup=eNetworkAdapter802PortGroup, a4TotalReceiveErrors=a4TotalReceiveErrors, a4DataRate=a4DataRate, a9PartNumber=a9PartNumber, a7NetworkTopology=a7NetworkTopology, a8MajorErrorCount=a8MajorErrorCount, eMiftomib=eMiftomib, a9999ErrorStatus=a9999ErrorStatus, a6DriverSoftwareVersion=a6DriverSoftwareVersion, a9999ErrorInstanceId=a9999ErrorInstanceId, a7NetworkAdapterRamSize=a7NetworkAdapterRamSize)
