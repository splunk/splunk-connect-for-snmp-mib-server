#
# PySNMP MIB module OMNI-gx2dualdrr2x-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/OMNI-gx2dualdrr2x-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 20:24:40 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, OctetString, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "Integer", "OctetString", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueSizeConstraint, SingleValueConstraint, ConstraintsUnion, ConstraintsIntersection, ValueRangeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueSizeConstraint", "SingleValueConstraint", "ConstraintsUnion", "ConstraintsIntersection", "ValueRangeConstraint")
gx2DualDrr2x, = mibBuilder.importSymbols("GX2HFC-MIB", "gx2DualDrr2x")
trapNetworkElemSerialNum, trapPerceivedSeverity, trapText, trapChangedObjectId, trapNETrapLastTrapTimeStamp, trapNetworkElemAdminState, trapChangedValueDisplayString, trapNetworkElemAvailStatus, trapNetworkElemModelNumber, trapNetworkElemAlarmStatus, trapNetworkElemOperState, trapIdentifier, trapChangedValueInteger = mibBuilder.importSymbols("NLSBBN-TRAPS-MIB", "trapNetworkElemSerialNum", "trapPerceivedSeverity", "trapText", "trapChangedObjectId", "trapNETrapLastTrapTimeStamp", "trapNetworkElemAdminState", "trapChangedValueDisplayString", "trapNetworkElemAvailStatus", "trapNetworkElemModelNumber", "trapNetworkElemAlarmStatus", "trapNetworkElemOperState", "trapIdentifier", "trapChangedValueInteger")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
Counter64, Bits, ModuleIdentity, Unsigned32, TimeTicks, NotificationType, MibIdentifier, MibScalar, MibTable, MibTableRow, MibTableColumn, iso, IpAddress, NotificationType, Gauge32, Integer32, ObjectIdentity, Counter32 = mibBuilder.importSymbols("SNMPv2-SMI", "Counter64", "Bits", "ModuleIdentity", "Unsigned32", "TimeTicks", "NotificationType", "MibIdentifier", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "iso", "IpAddress", "NotificationType", "Gauge32", "Integer32", "ObjectIdentity", "Counter32")
DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention")
class Float(Counter32):
    pass

gx2dualdrr2xDescriptor = MibIdentifier((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 35, 1))
gx2dualdrr2xAnalogTable = MibTable((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 35, 2), )
if mibBuilder.loadTexts: gx2dualdrr2xAnalogTable.setStatus('mandatory')
gx2dualdrr2xAnalogEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 35, 2, 1), ).setIndexNames((0, "OMNI-gx2dualdrr2x-MIB", "gx2dualdrr2xAnalogTableIndex"))
if mibBuilder.loadTexts: gx2dualdrr2xAnalogEntry.setStatus('mandatory')
gx2dualdrr2xDigitalTable = MibTable((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 35, 3), )
if mibBuilder.loadTexts: gx2dualdrr2xDigitalTable.setStatus('mandatory')
gx2dualdrr2xDigitalEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 35, 3, 2), ).setIndexNames((0, "OMNI-gx2dualdrr2x-MIB", "gx2dualdrr2xDigitalTableIndex"))
if mibBuilder.loadTexts: gx2dualdrr2xDigitalEntry.setStatus('mandatory')
gx2dualdrr2xStatusTable = MibTable((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 35, 4), )
if mibBuilder.loadTexts: gx2dualdrr2xStatusTable.setStatus('mandatory')
gx2dualdrr2xStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 35, 4, 3), ).setIndexNames((0, "OMNI-gx2dualdrr2x-MIB", "gx2dualdrr2xStatusTableIndex"))
if mibBuilder.loadTexts: gx2dualdrr2xStatusEntry.setStatus('mandatory')
gx2dualdrr2xFactoryTable = MibTable((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 35, 5), )
if mibBuilder.loadTexts: gx2dualdrr2xFactoryTable.setStatus('mandatory')
gx2dualdrr2xFactoryEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 35, 5, 4), ).setIndexNames((0, "OMNI-gx2dualdrr2x-MIB", "gx2dualdrr2xFactoryTableIndex"))
if mibBuilder.loadTexts: gx2dualdrr2xFactoryEntry.setStatus('mandatory')
gx2dualdrr2xAnalogTableIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 35, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gx2dualdrr2xAnalogTableIndex.setStatus('mandatory')
dualdrr2xlabelRecdOptPwr1 = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 35, 2, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dualdrr2xlabelRecdOptPwr1.setStatus('optional')
dualdrr2xuomRecdOptPwr1 = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 35, 2, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dualdrr2xuomRecdOptPwr1.setStatus('optional')
dualdrr2xmajorHighRecdOptPwr1 = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 35, 2, 1, 4), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dualdrr2xmajorHighRecdOptPwr1.setStatus('obsolete')
dualdrr2xmajorLowRecdOptPwr1 = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 35, 2, 1, 5), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dualdrr2xmajorLowRecdOptPwr1.setStatus('obsolete')
dualdrr2xminorHighRecdOptPwr1 = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 35, 2, 1, 6), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dualdrr2xminorHighRecdOptPwr1.setStatus('obsolete')
dualdrr2xminorLowRecdOptPwr1 = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 35, 2, 1, 7), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dualdrr2xminorLowRecdOptPwr1.setStatus('obsolete')
dualdrr2xcurrentValueRecdOptPwr1 = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 35, 2, 1, 8), Float()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dualdrr2xcurrentValueRecdOptPwr1.setStatus('mandatory')
dualdrr2xstateFlagRecdOptPwr1 = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 35, 2, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("hidden", 1), ("read-only", 2), ("updateable", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dualdrr2xstateFlagRecdOptPwr1.setStatus('mandatory')
dualdrr2xminValueRecdOptPwr1 = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 35, 2, 1, 10), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dualdrr2xminValueRecdOptPwr1.setStatus('mandatory')
dualdrr2xmaxValueRecdOptPwr1 = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 35, 2, 1, 11), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dualdrr2xmaxValueRecdOptPwr1.setStatus('mandatory')
dualdrr2xalarmStateRecdOptPwr1 = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 35, 2, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("noAlarm", 1), ("majorLowAlarm", 2), ("minorLowAlarm", 3), ("minorHighAlarm", 4), ("majorHighAlarm", 5), ("informational", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dualdrr2xalarmStateRecdOptPwr1.setStatus('mandatory')
dualdrr2xlabelRecdOptPwr2 = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 35, 2, 1, 13), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dualdrr2xlabelRecdOptPwr2.setStatus('optional')
dualdrr2xuomRecdOptPwr2 = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 35, 2, 1, 14), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dualdrr2xuomRecdOptPwr2.setStatus('optional')
dualdrr2xmajorHighRecdOptPwr2 = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 35, 2, 1, 15), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dualdrr2xmajorHighRecdOptPwr2.setStatus('obsolete')
dualdrr2xmajorLowRecdOptPwr2 = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 35, 2, 1, 16), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dualdrr2xmajorLowRecdOptPwr2.setStatus('obsolete')
dualdrr2xminorHighRecdOptPwr2 = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 35, 2, 1, 17), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dualdrr2xminorHighRecdOptPwr2.setStatus('obsolete')
dualdrr2xminorLowRecdOptPwr2 = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 35, 2, 1, 18), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dualdrr2xminorLowRecdOptPwr2.setStatus('obsolete')
dualdrr2xcurrentValueRecdOptPwr2 = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 35, 2, 1, 19), Float()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dualdrr2xcurrentValueRecdOptPwr2.setStatus('mandatory')
dualdrr2xstateFlagRecdOptPwr2 = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 35, 2, 1, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("hidden", 1), ("read-only", 2), ("updateable", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dualdrr2xstateFlagRecdOptPwr2.setStatus('mandatory')
dualdrr2xminValueRecdOptPwr2 = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 35, 2, 1, 21), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dualdrr2xminValueRecdOptPwr2.setStatus('mandatory')
dualdrr2xmaxValueRecdOptPwr2 = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 35, 2, 1, 22), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dualdrr2xmaxValueRecdOptPwr2.setStatus('mandatory')
dualdrr2xalarmStateRecdOptPwr2 = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 35, 2, 1, 23), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("noAlarm", 1), ("majorLowAlarm", 2), ("minorLowAlarm", 3), ("minorHighAlarm", 4), ("majorHighAlarm", 5), ("informational", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dualdrr2xalarmStateRecdOptPwr2.setStatus('mandatory')
dualdrr2xlabelModTemp = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 35, 2, 1, 24), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dualdrr2xlabelModTemp.setStatus('optional')
dualdrr2xuomModTemp = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 35, 2, 1, 25), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dualdrr2xuomModTemp.setStatus('optional')
dualdrr2xmajorHighModTemp = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 35, 2, 1, 26), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dualdrr2xmajorHighModTemp.setStatus('mandatory')
dualdrr2xmajorLowModTemp = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 35, 2, 1, 27), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dualdrr2xmajorLowModTemp.setStatus('mandatory')
dualdrr2xminorHighModTemp = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 35, 2, 1, 28), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dualdrr2xminorHighModTemp.setStatus('mandatory')
dualdrr2xminorLowModTemp = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 35, 2, 1, 29), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dualdrr2xminorLowModTemp.setStatus('mandatory')
dualdrr2xcurrentValueModTemp = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 35, 2, 1, 30), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dualdrr2xcurrentValueModTemp.setStatus('mandatory')
dualdrr2xstateFlagModTemp = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 35, 2, 1, 31), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("hidden", 1), ("read-only", 2), ("updateable", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dualdrr2xstateFlagModTemp.setStatus('mandatory')
dualdrr2xminValueModTemp = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 35, 2, 1, 32), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dualdrr2xminValueModTemp.setStatus('mandatory')
dualdrr2xmaxValueModTemp = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 35, 2, 1, 33), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dualdrr2xmaxValueModTemp.setStatus('mandatory')
dualdrr2xalarmStateModTemp = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 35, 2, 1, 34), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("noAlarm", 1), ("majorLowAlarm", 2), ("minorLowAlarm", 3), ("minorHighAlarm", 4), ("majorHighAlarm", 5), ("informational", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dualdrr2xalarmStateModTemp.setStatus('mandatory')
dualdrr2xlabel12VCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 35, 2, 1, 35), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dualdrr2xlabel12VCurrent.setStatus('optional')
dualdrr2xuom12VCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 35, 2, 1, 36), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dualdrr2xuom12VCurrent.setStatus('optional')
dualdrr2xmajorHigh12VCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 35, 2, 1, 37), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dualdrr2xmajorHigh12VCurrent.setStatus('mandatory')
dualdrr2xmajorLow12VCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 35, 2, 1, 38), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dualdrr2xmajorLow12VCurrent.setStatus('mandatory')
dualdrr2xminorHigh12VCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 35, 2, 1, 39), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dualdrr2xminorHigh12VCurrent.setStatus('mandatory')
dualdrr2xminorLow12VCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 35, 2, 1, 40), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dualdrr2xminorLow12VCurrent.setStatus('mandatory')
dualdrr2xcurrentValue12VCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 35, 2, 1, 41), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dualdrr2xcurrentValue12VCurrent.setStatus('mandatory')
dualdrr2xstateFlag12VCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 35, 2, 1, 42), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("hidden", 1), ("read-only", 2), ("updateable", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dualdrr2xstateFlag12VCurrent.setStatus('mandatory')
dualdrr2xminValue12VCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 35, 2, 1, 43), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dualdrr2xminValue12VCurrent.setStatus('mandatory')
dualdrr2xmaxValue12VCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 35, 2, 1, 44), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dualdrr2xmaxValue12VCurrent.setStatus('mandatory')
dualdrr2xalarmState12VCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 35, 2, 1, 45), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("noAlarm", 1), ("majorLowAlarm", 2), ("minorLowAlarm", 3), ("minorHighAlarm", 4), ("majorHighAlarm", 5), ("informational", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dualdrr2xalarmState12VCurrent.setStatus('mandatory')
dualdrr2xlabelFanSpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 35, 2, 1, 46), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dualdrr2xlabelFanSpeed.setStatus('optional')
dualdrr2xuomFanSpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 35, 2, 1, 47), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dualdrr2xuomFanSpeed.setStatus('optional')
dualdrr2xmajorHighFanSpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 35, 2, 1, 48), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dualdrr2xmajorHighFanSpeed.setStatus('mandatory')
dualdrr2xmajorLowFanSpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 35, 2, 1, 49), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dualdrr2xmajorLowFanSpeed.setStatus('mandatory')
dualdrr2xminorHighFanSpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 35, 2, 1, 50), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dualdrr2xminorHighFanSpeed.setStatus('obsolete')
dualdrr2xminorLowFanSpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 35, 2, 1, 51), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dualdrr2xminorLowFanSpeed.setStatus('obsolete')
dualdrr2xcurrentValueFanSpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 35, 2, 1, 52), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dualdrr2xcurrentValueFanSpeed.setStatus('mandatory')
dualdrr2xstateFlagFanSpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 35, 2, 1, 53), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("hidden", 1), ("read-only", 2), ("updateable", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dualdrr2xstateFlagFanSpeed.setStatus('mandatory')
dualdrr2xminValueFanSpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 35, 2, 1, 54), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dualdrr2xminValueFanSpeed.setStatus('mandatory')
dualdrr2xmaxValueFanSpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 35, 2, 1, 55), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dualdrr2xmaxValueFanSpeed.setStatus('mandatory')
dualdrr2xalarmStateFanSpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 35, 2, 1, 56), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("noAlarm", 1), ("majorLowAlarm", 2), ("minorLowAlarm", 3), ("minorHighAlarm", 4), ("majorHighAlarm", 5), ("informational", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dualdrr2xalarmStateFanSpeed.setStatus('mandatory')
dualdrr2xlabelTx0SFPWave = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 35, 2, 1, 57), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dualdrr2xlabelTx0SFPWave.setStatus('optional')
dualdrr2xuomTx0SFPWave = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 35, 2, 1, 58), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dualdrr2xuomTx0SFPWave.setStatus('optional')
dualdrr2xmajorHighTx0SFPWave = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 35, 2, 1, 59), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dualdrr2xmajorHighTx0SFPWave.setStatus('mandatory')
dualdrr2xmajorLowTx0SFPWave = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 35, 2, 1, 60), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dualdrr2xmajorLowTx0SFPWave.setStatus('mandatory')
dualdrr2xminorHighTx0SFPWave = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 35, 2, 1, 61), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dualdrr2xminorHighTx0SFPWave.setStatus('obsolete')
dualdrr2xminorLowTx0SFPWave = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 35, 2, 1, 62), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dualdrr2xminorLowTx0SFPWave.setStatus('obsolete')
dualdrr2xcurrentValueTx0SFPWave = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 35, 2, 1, 63), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dualdrr2xcurrentValueTx0SFPWave.setStatus('mandatory')
dualdrr2xstateFlagTx0SFPWave = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 35, 2, 1, 64), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("hidden", 1), ("read-only", 2), ("updateable", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dualdrr2xstateFlagTx0SFPWave.setStatus('mandatory')
dualdrr2xminValueTx0SFPWave = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 35, 2, 1, 65), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dualdrr2xminValueTx0SFPWave.setStatus('mandatory')
dualdrr2xmaxValueTx0SFPWave = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 35, 2, 1, 66), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dualdrr2xmaxValueTx0SFPWave.setStatus('mandatory')
dualdrr2xalarmStateTx0SFPWave = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 35, 2, 1, 67), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("noAlarm", 1), ("majorLowAlarm", 2), ("minorLowAlarm", 3), ("minorHighAlarm", 4), ("majorHighAlarm", 5), ("informational", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dualdrr2xalarmStateTx0SFPWave.setStatus('mandatory')
dualdrr2xlabelTx0OptPwr = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 35, 2, 1, 68), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dualdrr2xlabelTx0OptPwr.setStatus('optional')
dualdrr2xuomTx0OptPwr = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 35, 2, 1, 69), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dualdrr2xuomTx0OptPwr.setStatus('optional')
dualdrr2xmajorHighTx0OptPwr = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 35, 2, 1, 70), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dualdrr2xmajorHighTx0OptPwr.setStatus('mandatory')
dualdrr2xmajorLowTx0OptPwr = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 35, 2, 1, 71), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dualdrr2xmajorLowTx0OptPwr.setStatus('mandatory')
dualdrr2xminorHighTx0OptPwr = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 35, 2, 1, 72), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dualdrr2xminorHighTx0OptPwr.setStatus('obsolete')
dualdrr2xminorLowTx0OptPwr = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 35, 2, 1, 73), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dualdrr2xminorLowTx0OptPwr.setStatus('obsolete')
dualdrr2xcurrentValueTx0OptPwr = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 35, 2, 1, 74), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dualdrr2xcurrentValueTx0OptPwr.setStatus('mandatory')
dualdrr2xstateFlagTx0OptPwr = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 35, 2, 1, 75), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("hidden", 1), ("read-only", 2), ("updateable", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dualdrr2xstateFlagTx0OptPwr.setStatus('mandatory')
dualdrr2xminValueTx0OptPwr = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 35, 2, 1, 76), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dualdrr2xminValueTx0OptPwr.setStatus('mandatory')
dualdrr2xmaxValueTx0OptPwr = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 35, 2, 1, 77), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dualdrr2xmaxValueTx0OptPwr.setStatus('mandatory')
dualdrr2xalarmStateTx0OptPwr = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 35, 2, 1, 78), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("noAlarm", 1), ("majorLowAlarm", 2), ("minorLowAlarm", 3), ("minorHighAlarm", 4), ("majorHighAlarm", 5), ("informational", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dualdrr2xalarmStateTx0OptPwr.setStatus('mandatory')
dualdrr2xlabelTx024vCurr = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 35, 2, 1, 79), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dualdrr2xlabelTx024vCurr.setStatus('optional')
dualdrr2xuomTx024vCurr = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 35, 2, 1, 80), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dualdrr2xuomTx024vCurr.setStatus('optional')
dualdrr2xmajorHighTx024vCurr = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 35, 2, 1, 81), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dualdrr2xmajorHighTx024vCurr.setStatus('mandatory')
dualdrr2xmajorLowTx024vCurr = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 35, 2, 1, 82), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dualdrr2xmajorLowTx024vCurr.setStatus('mandatory')
dualdrr2xminorHighTx024vCurr = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 35, 2, 1, 83), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dualdrr2xminorHighTx024vCurr.setStatus('obsolete')
dualdrr2xminorLowTx024vCurr = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 35, 2, 1, 84), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dualdrr2xminorLowTx024vCurr.setStatus('obsolete')
dualdrr2xcurrentValueTx024vCurr = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 35, 2, 1, 85), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dualdrr2xcurrentValueTx024vCurr.setStatus('mandatory')
dualdrr2xstateFlagTx024vCurr = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 35, 2, 1, 86), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("hidden", 1), ("read-only", 2), ("updateable", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dualdrr2xstateFlagTx024vCurr.setStatus('mandatory')
dualdrr2xminValueTx024vCurr = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 35, 2, 1, 87), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dualdrr2xminValueTx024vCurr.setStatus('mandatory')
dualdrr2xmaxValueTx024vCurr = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 35, 2, 1, 88), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dualdrr2xmaxValueTx024vCurr.setStatus('mandatory')
dualdrr2xalarmStateTx024vCurr = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 35, 2, 1, 89), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("noAlarm", 1), ("majorLowAlarm", 2), ("minorLowAlarm", 3), ("minorHighAlarm", 4), ("majorHighAlarm", 5), ("informational", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dualdrr2xalarmStateTx024vCurr.setStatus('mandatory')
dualdrr2xlabelTx024Volt = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 35, 2, 1, 90), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dualdrr2xlabelTx024Volt.setStatus('optional')
dualdrr2xuomTx024Volt = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 35, 2, 1, 91), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dualdrr2xuomTx024Volt.setStatus('optional')
dualdrr2xmajorHighTx024Volt = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 35, 2, 1, 92), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dualdrr2xmajorHighTx024Volt.setStatus('mandatory')
dualdrr2xmajorLowTx024Volt = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 35, 2, 1, 93), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dualdrr2xmajorLowTx024Volt.setStatus('mandatory')
dualdrr2xminorHighTx024Volt = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 35, 2, 1, 94), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dualdrr2xminorHighTx024Volt.setStatus('obsolete')
dualdrr2xminorLowTx024Volt = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 35, 2, 1, 95), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dualdrr2xminorLowTx024Volt.setStatus('obsolete')
dualdrr2xcurrentValueTx024Volt = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 35, 2, 1, 96), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dualdrr2xcurrentValueTx024Volt.setStatus('mandatory')
dualdrr2xstateFlagTx024Volt = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 35, 2, 1, 97), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("hidden", 1), ("read-only", 2), ("updateable", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dualdrr2xstateFlagTx024Volt.setStatus('mandatory')
dualdrr2xminValueTx024Volt = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 35, 2, 1, 98), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dualdrr2xminValueTx024Volt.setStatus('mandatory')
dualdrr2xmaxValueTx024Volt = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 35, 2, 1, 99), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dualdrr2xmaxValueTx024Volt.setStatus('mandatory')
dualdrr2xalarmStateTx024Volt = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 35, 2, 1, 100), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("noAlarm", 1), ("majorLowAlarm", 2), ("minorLowAlarm", 3), ("minorHighAlarm", 4), ("majorHighAlarm", 5), ("informational", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dualdrr2xalarmStateTx024Volt.setStatus('mandatory')
dualdrr2xlabelTx0ModTemp = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 35, 2, 1, 101), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dualdrr2xlabelTx0ModTemp.setStatus('optional')
dualdrr2xuomTx0ModTemp = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 35, 2, 1, 102), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dualdrr2xuomTx0ModTemp.setStatus('optional')
dualdrr2xmajorHighTx0ModTemp = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 35, 2, 1, 103), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dualdrr2xmajorHighTx0ModTemp.setStatus('mandatory')
dualdrr2xmajorLowTx0ModTemp = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 35, 2, 1, 104), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dualdrr2xmajorLowTx0ModTemp.setStatus('mandatory')
dualdrr2xminorHighTx0ModTemp = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 35, 2, 1, 105), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dualdrr2xminorHighTx0ModTemp.setStatus('obsolete')
dualdrr2xminorLowTx0ModTemp = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 35, 2, 1, 106), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dualdrr2xminorLowTx0ModTemp.setStatus('obsolete')
dualdrr2xcurrentValueTx0ModTemp = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 35, 2, 1, 107), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dualdrr2xcurrentValueTx0ModTemp.setStatus('mandatory')
dualdrr2xstateFlagTx0ModTemp = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 35, 2, 1, 108), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("hidden", 1), ("read-only", 2), ("updateable", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dualdrr2xstateFlagTx0ModTemp.setStatus('mandatory')
dualdrr2xminValueTx0ModTemp = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 35, 2, 1, 109), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dualdrr2xminValueTx0ModTemp.setStatus('mandatory')
dualdrr2xmaxValueTx0ModTemp = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 35, 2, 1, 110), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dualdrr2xmaxValueTx0ModTemp.setStatus('mandatory')
dualdrr2xalarmStateTx0ModTemp = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 35, 2, 1, 111), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("noAlarm", 1), ("majorLowAlarm", 2), ("minorLowAlarm", 3), ("minorHighAlarm", 4), ("majorHighAlarm", 5), ("informational", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dualdrr2xalarmStateTx0ModTemp.setStatus('mandatory')
dualdrr2xlabelTx1SFPWave = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 35, 2, 1, 112), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dualdrr2xlabelTx1SFPWave.setStatus('optional')
dualdrr2xuomTx1SFPWave = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 35, 2, 1, 113), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dualdrr2xuomTx1SFPWave.setStatus('optional')
dualdrr2xmajorHighTx1SFPWave = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 35, 2, 1, 114), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dualdrr2xmajorHighTx1SFPWave.setStatus('mandatory')
dualdrr2xmajorLowTx1SFPWave = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 35, 2, 1, 115), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dualdrr2xmajorLowTx1SFPWave.setStatus('mandatory')
dualdrr2xminorHighTx1SFPWave = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 35, 2, 1, 116), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dualdrr2xminorHighTx1SFPWave.setStatus('obsolete')
dualdrr2xminorLowTx1SFPWave = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 35, 2, 1, 117), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dualdrr2xminorLowTx1SFPWave.setStatus('obsolete')
dualdrr2xcurrentValueTx1SFPWave = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 35, 2, 1, 118), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dualdrr2xcurrentValueTx1SFPWave.setStatus('mandatory')
dualdrr2xstateFlagTx1SFPWave = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 35, 2, 1, 119), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("hidden", 1), ("read-only", 2), ("updateable", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dualdrr2xstateFlagTx1SFPWave.setStatus('mandatory')
dualdrr2xminValueTx1SFPWave = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 35, 2, 1, 120), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dualdrr2xminValueTx1SFPWave.setStatus('mandatory')
dualdrr2xmaxValueTx1SFPWave = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 35, 2, 1, 121), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dualdrr2xmaxValueTx1SFPWave.setStatus('mandatory')
dualdrr2xalarmStateTx1SFPWave = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 35, 2, 1, 122), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("noAlarm", 1), ("majorLowAlarm", 2), ("minorLowAlarm", 3), ("minorHighAlarm", 4), ("majorHighAlarm", 5), ("informational", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dualdrr2xalarmStateTx1SFPWave.setStatus('mandatory')
dualdrr2xlabelTx1OptPwr = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 35, 2, 1, 123), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dualdrr2xlabelTx1OptPwr.setStatus('optional')
dualdrr2xuomTx1OptPwr = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 35, 2, 1, 124), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dualdrr2xuomTx1OptPwr.setStatus('optional')
dualdrr2xmajorHighTx1OptPwr = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 35, 2, 1, 125), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dualdrr2xmajorHighTx1OptPwr.setStatus('mandatory')
dualdrr2xmajorLowTx1OptPwr = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 35, 2, 1, 126), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dualdrr2xmajorLowTx1OptPwr.setStatus('mandatory')
dualdrr2xminorHighTx1OptPwr = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 35, 2, 1, 127), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dualdrr2xminorHighTx1OptPwr.setStatus('obsolete')
dualdrr2xminorLowTx1OptPwr = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 35, 2, 1, 128), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dualdrr2xminorLowTx1OptPwr.setStatus('obsolete')
dualdrr2xcurrentValueTx1OptPwr = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 35, 2, 1, 129), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dualdrr2xcurrentValueTx1OptPwr.setStatus('mandatory')
dualdrr2xstateFlagTx1OptPwr = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 35, 2, 1, 130), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("hidden", 1), ("read-only", 2), ("updateable", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dualdrr2xstateFlagTx1OptPwr.setStatus('mandatory')
dualdrr2xminValueTx1OptPwr = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 35, 2, 1, 131), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dualdrr2xminValueTx1OptPwr.setStatus('mandatory')
dualdrr2xmaxValueTx1OptPwr = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 35, 2, 1, 132), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dualdrr2xmaxValueTx1OptPwr.setStatus('mandatory')
dualdrr2xalarmStateTx1OptPwr = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 35, 2, 1, 133), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("noAlarm", 1), ("majorLowAlarm", 2), ("minorLowAlarm", 3), ("minorHighAlarm", 4), ("majorHighAlarm", 5), ("informational", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dualdrr2xalarmStateTx1OptPwr.setStatus('mandatory')
dualdrr2xlabelTx124vCurr = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 35, 2, 1, 134), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dualdrr2xlabelTx124vCurr.setStatus('optional')
dualdrr2xuomTx124vCurr = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 35, 2, 1, 135), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dualdrr2xuomTx124vCurr.setStatus('optional')
dualdrr2xmajorHighTx124vCurr = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 35, 2, 1, 136), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dualdrr2xmajorHighTx124vCurr.setStatus('mandatory')
dualdrr2xmajorLowTx124vCurr = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 35, 2, 1, 137), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dualdrr2xmajorLowTx124vCurr.setStatus('mandatory')
dualdrr2xminorHighTx124vCurr = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 35, 2, 1, 138), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dualdrr2xminorHighTx124vCurr.setStatus('obsolete')
dualdrr2xminorLowTx124vCurr = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 35, 2, 1, 139), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dualdrr2xminorLowTx124vCurr.setStatus('obsolete')
dualdrr2xcurrentValueTx124vCurr = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 35, 2, 1, 140), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dualdrr2xcurrentValueTx124vCurr.setStatus('mandatory')
dualdrr2xstateFlagTx124vCurr = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 35, 2, 1, 141), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("hidden", 1), ("read-only", 2), ("updateable", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dualdrr2xstateFlagTx124vCurr.setStatus('mandatory')
dualdrr2xminValueTx124vCurr = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 35, 2, 1, 142), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dualdrr2xminValueTx124vCurr.setStatus('mandatory')
dualdrr2xmaxValueTx124vCurr = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 35, 2, 1, 143), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dualdrr2xmaxValueTx124vCurr.setStatus('mandatory')
dualdrr2xalarmStateTx124vCurr = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 35, 2, 1, 144), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("noAlarm", 1), ("majorLowAlarm", 2), ("minorLowAlarm", 3), ("minorHighAlarm", 4), ("majorHighAlarm", 5), ("informational", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dualdrr2xalarmStateTx124vCurr.setStatus('mandatory')
dualdrr2xlabelTx124Volt = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 35, 2, 1, 145), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dualdrr2xlabelTx124Volt.setStatus('optional')
dualdrr2xuomTx124Volt = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 35, 2, 1, 146), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dualdrr2xuomTx124Volt.setStatus('optional')
dualdrr2xmajorHighTx124Volt = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 35, 2, 1, 147), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dualdrr2xmajorHighTx124Volt.setStatus('mandatory')
dualdrr2xmajorLowTx124Volt = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 35, 2, 1, 148), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dualdrr2xmajorLowTx124Volt.setStatus('mandatory')
dualdrr2xminorHighTx124Volt = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 35, 2, 1, 149), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dualdrr2xminorHighTx124Volt.setStatus('obsolete')
dualdrr2xminorLowTx124Volt = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 35, 2, 1, 150), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dualdrr2xminorLowTx124Volt.setStatus('obsolete')
dualdrr2xcurrentValueTx124Volt = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 35, 2, 1, 151), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dualdrr2xcurrentValueTx124Volt.setStatus('mandatory')
dualdrr2xstateFlagTx124Volt = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 35, 2, 1, 152), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("hidden", 1), ("read-only", 2), ("updateable", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dualdrr2xstateFlagTx124Volt.setStatus('mandatory')
dualdrr2xminValueTx124Volt = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 35, 2, 1, 153), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dualdrr2xminValueTx124Volt.setStatus('mandatory')
dualdrr2xmaxValueTx124Volt = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 35, 2, 1, 154), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dualdrr2xmaxValueTx124Volt.setStatus('mandatory')
dualdrr2xalarmStateTx124Volt = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 35, 2, 1, 155), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("noAlarm", 1), ("majorLowAlarm", 2), ("minorLowAlarm", 3), ("minorHighAlarm", 4), ("majorHighAlarm", 5), ("informational", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dualdrr2xalarmStateTx124Volt.setStatus('mandatory')
dualdrr2xlabelTx1ModTemp = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 35, 2, 1, 156), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dualdrr2xlabelTx1ModTemp.setStatus('optional')
dualdrr2xuomTx1ModTemp = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 35, 2, 1, 157), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dualdrr2xuomTx1ModTemp.setStatus('optional')
dualdrr2xmajorHighTx1ModTemp = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 35, 2, 1, 158), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dualdrr2xmajorHighTx1ModTemp.setStatus('mandatory')
dualdrr2xmajorLowTx1ModTemp = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 35, 2, 1, 159), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dualdrr2xmajorLowTx1ModTemp.setStatus('mandatory')
dualdrr2xminorHighTx1ModTemp = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 35, 2, 1, 160), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dualdrr2xminorHighTx1ModTemp.setStatus('obsolete')
dualdrr2xminorLowTx1ModTemp = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 35, 2, 1, 161), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dualdrr2xminorLowTx1ModTemp.setStatus('obsolete')
dualdrr2xcurrentValueTx1ModTemp = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 35, 2, 1, 162), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dualdrr2xcurrentValueTx1ModTemp.setStatus('mandatory')
dualdrr2xstateFlagTx1ModTemp = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 35, 2, 1, 163), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("hidden", 1), ("read-only", 2), ("updateable", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dualdrr2xstateFlagTx1ModTemp.setStatus('mandatory')
dualdrr2xminValueTx1ModTemp = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 35, 2, 1, 164), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dualdrr2xminValueTx1ModTemp.setStatus('mandatory')
dualdrr2xmaxValueTx1ModTemp = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 35, 2, 1, 165), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dualdrr2xmaxValueTx1ModTemp.setStatus('mandatory')
dualdrr2xalarmStateTx1ModTemp = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 35, 2, 1, 166), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("noAlarm", 1), ("majorLowAlarm", 2), ("minorLowAlarm", 3), ("minorHighAlarm", 4), ("majorHighAlarm", 5), ("informational", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dualdrr2xalarmStateTx1ModTemp.setStatus('mandatory')
gx2dualdrr2xDigitalTableIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 35, 3, 2, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gx2dualdrr2xDigitalTableIndex.setStatus('mandatory')
dualdrr2xlabelTrippoint1Value = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 35, 3, 2, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dualdrr2xlabelTrippoint1Value.setStatus('optional')
dualdrr2xenumTrippoint1Value = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 35, 3, 2, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dualdrr2xenumTrippoint1Value.setStatus('optional')
dualdrr2xvalueTrippoint1Value = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 35, 3, 2, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dualdrr2xvalueTrippoint1Value.setStatus('mandatory')
dualdrr2xstateflagTrippoint1Value = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 35, 3, 2, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("hidden", 1), ("readOnly", 2), ("updateable", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dualdrr2xstateflagTrippoint1Value.setStatus('mandatory')
dualdrr2xlabelTrippoint1Mode = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 35, 3, 2, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dualdrr2xlabelTrippoint1Mode.setStatus('optional')
dualdrr2xenumTrippoint1Mode = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 35, 3, 2, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dualdrr2xenumTrippoint1Mode.setStatus('optional')
dualdrr2xvalueTrippoint1Mode = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 35, 3, 2, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("off", 1), ("alarmOnly", 2), ("alarm-and-Switch", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dualdrr2xvalueTrippoint1Mode.setStatus('mandatory')
dualdrr2xstateflagTrippoint1Mode = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 35, 3, 2, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("hidden", 1), ("readOnly", 2), ("updateable", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dualdrr2xstateflagTrippoint1Mode.setStatus('mandatory')
dualdrr2xlabelTrippoint2Value = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 35, 3, 2, 10), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dualdrr2xlabelTrippoint2Value.setStatus('optional')
dualdrr2xenumTrippoint2Value = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 35, 3, 2, 11), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dualdrr2xenumTrippoint2Value.setStatus('optional')
dualdrr2xvalueTrippoint2Value = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 35, 3, 2, 12), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dualdrr2xvalueTrippoint2Value.setStatus('mandatory')
dualdrr2xstateflagTrippoint2Value = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 35, 3, 2, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("hidden", 1), ("readOnly", 2), ("updateable", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dualdrr2xstateflagTrippoint2Value.setStatus('mandatory')
dualdrr2xlabelTrippoint2Mode = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 35, 3, 2, 14), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dualdrr2xlabelTrippoint2Mode.setStatus('optional')
dualdrr2xenumTrippoint2Mode = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 35, 3, 2, 15), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dualdrr2xenumTrippoint2Mode.setStatus('optional')
dualdrr2xvalueTrippoint2Mode = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 35, 3, 2, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("off", 1), ("alarmOnly", 2), ("alarm-and-Switch", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dualdrr2xvalueTrippoint2Mode.setStatus('mandatory')
dualdrr2xstateflagTrippoint2Mode = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 35, 3, 2, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("hidden", 1), ("readOnly", 2), ("updateable", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dualdrr2xstateflagTrippoint2Mode.setStatus('mandatory')
dualdrr2xlabelGainChannel1A = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 35, 3, 2, 18), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dualdrr2xlabelGainChannel1A.setStatus('optional')
dualdrr2xenumGainChannel1A = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 35, 3, 2, 19), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dualdrr2xenumGainChannel1A.setStatus('optional')
dualdrr2xvalueGainChannel1A = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 35, 3, 2, 20), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dualdrr2xvalueGainChannel1A.setStatus('mandatory')
dualdrr2xstateflagGainChannel1A = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 35, 3, 2, 21), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("hidden", 1), ("readOnly", 2), ("updateable", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dualdrr2xstateflagGainChannel1A.setStatus('mandatory')
dualdrr2xlabelGainChannel1B = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 35, 3, 2, 22), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dualdrr2xlabelGainChannel1B.setStatus('optional')
dualdrr2xenumGainChannel1B = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 35, 3, 2, 23), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dualdrr2xenumGainChannel1B.setStatus('optional')
dualdrr2xvalueGainChannel1B = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 35, 3, 2, 24), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dualdrr2xvalueGainChannel1B.setStatus('mandatory')
dualdrr2xstateflagGainChannel1B = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 35, 3, 2, 25), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("hidden", 1), ("readOnly", 2), ("updateable", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dualdrr2xstateflagGainChannel1B.setStatus('mandatory')
dualdrr2xlabelGainChannel2A = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 35, 3, 2, 26), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dualdrr2xlabelGainChannel2A.setStatus('optional')
dualdrr2xenumGainChannel2A = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 35, 3, 2, 27), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dualdrr2xenumGainChannel2A.setStatus('optional')
dualdrr2xvalueGainChannel2A = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 35, 3, 2, 28), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dualdrr2xvalueGainChannel2A.setStatus('mandatory')
dualdrr2xstateflagGainChannel2A = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 35, 3, 2, 29), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("hidden", 1), ("readOnly", 2), ("updateable", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dualdrr2xstateflagGainChannel2A.setStatus('mandatory')
dualdrr2xlabelGainChannel2B = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 35, 3, 2, 30), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dualdrr2xlabelGainChannel2B.setStatus('optional')
dualdrr2xenumGainChannel2B = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 35, 3, 2, 31), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dualdrr2xenumGainChannel2B.setStatus('optional')
dualdrr2xvalueGainChannel2B = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 35, 3, 2, 32), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dualdrr2xvalueGainChannel2B.setStatus('mandatory')
dualdrr2xstateflagGainChannel2B = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 35, 3, 2, 33), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("hidden", 1), ("readOnly", 2), ("updateable", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dualdrr2xstateflagGainChannel2B.setStatus('mandatory')
dualdrr2xlabelTestpointSelect = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 35, 3, 2, 34), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dualdrr2xlabelTestpointSelect.setStatus('optional')
dualdrr2xenumTestpointSelect = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 35, 3, 2, 35), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dualdrr2xenumTestpointSelect.setStatus('optional')
dualdrr2xvalueTestpointSelect = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 35, 3, 2, 36), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("one", 1), ("two", 2), ("three", 3), ("four", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dualdrr2xvalueTestpointSelect.setStatus('mandatory')
dualdrr2xstateflagTestpointSelect = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 35, 3, 2, 37), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("hidden", 1), ("readOnly", 2), ("updateable", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dualdrr2xstateflagTestpointSelect.setStatus('mandatory')
dualdrr2xlabelOpFrequency = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 35, 3, 2, 38), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dualdrr2xlabelOpFrequency.setStatus('optional')
dualdrr2xenumOpFrequency = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 35, 3, 2, 39), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dualdrr2xenumOpFrequency.setStatus('optional')
dualdrr2xvalueOpFrequency = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 35, 3, 2, 40), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("eightyfive", 1), ("sixtyfive", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dualdrr2xvalueOpFrequency.setStatus('mandatory')
dualdrr2xstateflagOpFrequency = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 35, 3, 2, 41), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("hidden", 1), ("readOnly", 2), ("updateable", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dualdrr2xstateflagOpFrequency.setStatus('mandatory')
dualdrr2xlabelActChanSelect = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 35, 3, 2, 42), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dualdrr2xlabelActChanSelect.setStatus('optional')
dualdrr2xenumActChanSelect = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 35, 3, 2, 43), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dualdrr2xenumActChanSelect.setStatus('optional')
dualdrr2xvalueActChanSelect = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 35, 3, 2, 44), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("none", 1), ("channel1", 2), ("channel2", 3), ("both", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dualdrr2xvalueActChanSelect.setStatus('mandatory')
dualdrr2xstateflagActChanSelect = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 35, 3, 2, 45), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("hidden", 1), ("readOnly", 2), ("updateable", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dualdrr2xstateflagActChanSelect.setStatus('mandatory')
dualdrr2xlabelFactoryDefaultReset = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 35, 3, 2, 46), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dualdrr2xlabelFactoryDefaultReset.setStatus('optional')
dualdrr2xenumFactoryDefaultReset = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 35, 3, 2, 47), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dualdrr2xenumFactoryDefaultReset.setStatus('optional')
dualdrr2xvalueFactoryDefaultReset = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 35, 3, 2, 48), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("off", 1), ("on", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dualdrr2xvalueFactoryDefaultReset.setStatus('mandatory')
dualdrr2xstateflagFactoryDefaultReset = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 35, 3, 2, 49), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("hidden", 1), ("read-only", 2), ("updateable", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dualdrr2xstateflagFactoryDefaultReset.setStatus('mandatory')
gx2dualdrr2xStatusTableIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 35, 4, 3, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gx2dualdrr2xStatusTableIndex.setStatus('mandatory')
dualdrr2xlabelBoot = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 35, 4, 3, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dualdrr2xlabelBoot.setStatus('optional')
dualdrr2xvalueBoot = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 35, 4, 3, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("ok", 1), ("undetermined", 2), ("warning", 3), ("minor", 4), ("major", 5), ("critical", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dualdrr2xvalueBoot.setStatus('mandatory')
dualdrr2xstateflagBoot = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 35, 4, 3, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("hidden", 1), ("read-only", 2), ("updateable", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dualdrr2xstateflagBoot.setStatus('mandatory')
dualdrr2xlabelFlash = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 35, 4, 3, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dualdrr2xlabelFlash.setStatus('optional')
dualdrr2xvalueFlash = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 35, 4, 3, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("ok", 1), ("undetermined", 2), ("warning", 3), ("minor", 4), ("major", 5), ("critical", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dualdrr2xvalueFlash.setStatus('mandatory')
dualdrr2xstateflagFlash = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 35, 4, 3, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("hidden", 1), ("read-only", 2), ("updateable", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dualdrr2xstateflagFlash.setStatus('mandatory')
dualdrr2xlabelFactoryDataCRC = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 35, 4, 3, 8), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dualdrr2xlabelFactoryDataCRC.setStatus('optional')
dualdrr2xvalueFactoryDataCRC = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 35, 4, 3, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("ok", 1), ("undetermined", 2), ("warning", 3), ("minor", 4), ("major", 5), ("critical", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dualdrr2xvalueFactoryDataCRC.setStatus('mandatory')
dualdrr2xstateflagFactoryDataCRC = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 35, 4, 3, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("hidden", 1), ("read-only", 2), ("updateable", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dualdrr2xstateflagFactoryDataCRC.setStatus('mandatory')
dualdrr2xlabelAlarmDataCrc = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 35, 4, 3, 11), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dualdrr2xlabelAlarmDataCrc.setStatus('optional')
dualdrr2xvalueAlarmDataCrc = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 35, 4, 3, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("ok", 1), ("undetermined", 2), ("warning", 3), ("minor", 4), ("major", 5), ("critical", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dualdrr2xvalueAlarmDataCrc.setStatus('mandatory')
dualdrr2xstateflagAlarmDataCrc = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 35, 4, 3, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("hidden", 1), ("read-only", 2), ("updateable", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dualdrr2xstateflagAlarmDataCrc.setStatus('mandatory')
dualdrr2xlabelCalibrationDataCrc = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 35, 4, 3, 14), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dualdrr2xlabelCalibrationDataCrc.setStatus('optional')
dualdrr2xvalueCalibrationDataCrc = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 35, 4, 3, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("ok", 1), ("undetermined", 2), ("warning", 3), ("minor", 4), ("major", 5), ("critical", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dualdrr2xvalueCalibrationDataCrc.setStatus('mandatory')
dualdrr2xstateflagCalibrationDataCrc = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 35, 4, 3, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("hidden", 1), ("read-only", 2), ("updateable", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dualdrr2xstateflagCalibrationDataCrc.setStatus('mandatory')
dualdrr2xlabelHardwareStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 35, 4, 3, 17), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dualdrr2xlabelHardwareStatus.setStatus('optional')
dualdrr2xvalueHardwareStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 35, 4, 3, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("ok", 1), ("undetermined", 2), ("warning", 3), ("minor", 4), ("major", 5), ("critical", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dualdrr2xvalueHardwareStatus.setStatus('mandatory')
dualdrr2xstateflagHardwareStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 35, 4, 3, 19), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("hidden", 1), ("read-only", 2), ("updateable", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dualdrr2xstateflagHardwareStatus.setStatus('mandatory')
dualdrr2xlabelCh1TripPointStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 35, 4, 3, 20), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dualdrr2xlabelCh1TripPointStatus.setStatus('optional')
dualdrr2xvalueCh1TripPointStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 35, 4, 3, 21), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("ok", 1), ("undetermined", 2), ("warning", 3), ("minor", 4), ("major", 5), ("critical", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dualdrr2xvalueCh1TripPointStatus.setStatus('mandatory')
dualdrr2xstateflagCh1TripPointStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 35, 4, 3, 22), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("hidden", 1), ("read-only", 2), ("updateable", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dualdrr2xstateflagCh1TripPointStatus.setStatus('mandatory')
dualdrr2xlabelLink1Status = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 35, 4, 3, 23), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dualdrr2xlabelLink1Status.setStatus('optional')
dualdrr2xvalueLink1Status = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 35, 4, 3, 24), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("ok", 1), ("undetermined", 2), ("warning", 3), ("minor", 4), ("major", 5), ("critical", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dualdrr2xvalueLink1Status.setStatus('mandatory')
dualdrr2xstateflagLink1Status = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 35, 4, 3, 25), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("hidden", 1), ("read-only", 2), ("updateable", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dualdrr2xstateflagLink1Status.setStatus('mandatory')
dualdrr2xlabelCh2TripPointStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 35, 4, 3, 26), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dualdrr2xlabelCh2TripPointStatus.setStatus('optional')
dualdrr2xvalueCh2TripPointStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 35, 4, 3, 27), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("ok", 1), ("undetermined", 2), ("warning", 3), ("minor", 4), ("major", 5), ("critical", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dualdrr2xvalueCh2TripPointStatus.setStatus('mandatory')
dualdrr2xstateflagCh2TripPointStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 35, 4, 3, 28), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("hidden", 1), ("read-only", 2), ("updateable", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dualdrr2xstateflagCh2TripPointStatus.setStatus('mandatory')
dualdrr2xlabelLink2Status = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 35, 4, 3, 29), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dualdrr2xlabelLink2Status.setStatus('optional')
dualdrr2xvalueLink2Status = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 35, 4, 3, 30), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("ok", 1), ("undetermined", 2), ("warning", 3), ("minor", 4), ("major", 5), ("critical", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dualdrr2xvalueLink2Status.setStatus('mandatory')
dualdrr2xstateflagLink2Status = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 35, 4, 3, 31), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("hidden", 1), ("read-only", 2), ("updateable", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dualdrr2xstateflagLink2Status.setStatus('mandatory')
dualdrr2xlabelDRT1Status = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 35, 4, 3, 32), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dualdrr2xlabelDRT1Status.setStatus('optional')
dualdrr2xvalueDRT1Status = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 35, 4, 3, 33), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("ok", 1), ("undetermined", 2), ("warning", 3), ("minor", 4), ("major", 5), ("critical", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dualdrr2xvalueDRT1Status.setStatus('mandatory')
dualdrr2xstateflagDRT1Status = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 35, 4, 3, 34), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("hidden", 1), ("read-only", 2), ("updateable", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dualdrr2xstateflagDRT1Status.setStatus('mandatory')
dualdrr2xlabelSFP0Status = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 35, 4, 3, 35), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dualdrr2xlabelSFP0Status.setStatus('optional')
dualdrr2xvalueSFP0Status = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 35, 4, 3, 36), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("ok", 1), ("undetermined", 2), ("warning", 3), ("minor", 4), ("major", 5), ("critical", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dualdrr2xvalueSFP0Status.setStatus('mandatory')
dualdrr2xstateflagSFP0Status = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 35, 4, 3, 37), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("hidden", 1), ("read-only", 2), ("updateable", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dualdrr2xstateflagSFP0Status.setStatus('mandatory')
dualdrr2xlabelDRT2Status = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 35, 4, 3, 38), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dualdrr2xlabelDRT2Status.setStatus('optional')
dualdrr2xvalueDRT2Status = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 35, 4, 3, 39), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("ok", 1), ("undetermined", 2), ("warning", 3), ("minor", 4), ("major", 5), ("critical", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dualdrr2xvalueDRT2Status.setStatus('mandatory')
dualdrr2xstateflagDRT2Status = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 35, 4, 3, 40), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("hidden", 1), ("read-only", 2), ("updateable", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dualdrr2xstateflagDRT2Status.setStatus('mandatory')
dualdrr2xlabelSFP1Status = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 35, 4, 3, 41), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dualdrr2xlabelSFP1Status.setStatus('optional')
dualdrr2xvalueSFP1Status = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 35, 4, 3, 42), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("ok", 1), ("undetermined", 2), ("warning", 3), ("minor", 4), ("major", 5), ("critical", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dualdrr2xvalueSFP1Status.setStatus('mandatory')
dualdrr2xstateflagSFP1Status = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 35, 4, 3, 43), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("hidden", 1), ("read-only", 2), ("updateable", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dualdrr2xstateflagSFP1Status.setStatus('mandatory')
gx2dualdrr2xFactoryTableIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 35, 5, 4, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gx2dualdrr2xFactoryTableIndex.setStatus('mandatory')
dualdrr2xbootControlByte = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 35, 5, 4, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dualdrr2xbootControlByte.setStatus('mandatory')
dualdrr2xbootStatusByte = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 35, 5, 4, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dualdrr2xbootStatusByte.setStatus('mandatory')
dualdrr2xbank1CRC = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 35, 5, 4, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dualdrr2xbank1CRC.setStatus('mandatory')
dualdrr2xbank2CRC = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 35, 5, 4, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dualdrr2xbank2CRC.setStatus('mandatory')
dualdrr2xprgEEPROMByte = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 35, 5, 4, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dualdrr2xprgEEPROMByte.setStatus('mandatory')
dualdrr2xfactoryCRC = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 35, 5, 4, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dualdrr2xfactoryCRC.setStatus('mandatory')
dualdrr2xcalculateCRC = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 35, 5, 4, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("factory", 1), ("alarm", 2), ("calibration", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dualdrr2xcalculateCRC.setStatus('mandatory')
dualdrr2xhourMeter = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 35, 5, 4, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dualdrr2xhourMeter.setStatus('mandatory')
dualdrr2xflashPrgCntA = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 35, 5, 4, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dualdrr2xflashPrgCntA.setStatus('mandatory')
dualdrr2xflashPrgCntB = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 35, 5, 4, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dualdrr2xflashPrgCntB.setStatus('mandatory')
dualdrr2xflashBankARev = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 35, 5, 4, 12), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dualdrr2xflashBankARev.setStatus('mandatory')
dualdrr2xflashBankBRev = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 35, 5, 4, 13), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dualdrr2xflashBankBRev.setStatus('mandatory')
dualdrr2xSubAgentRev = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 35, 5, 4, 14), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dualdrr2xSubAgentRev.setStatus('mandatory')
dualdrr2xFPGA0FwRev = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 35, 5, 4, 15), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dualdrr2xFPGA0FwRev.setStatus('mandatory')
dualdrr2xFPGA1FwRev = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 35, 5, 4, 16), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dualdrr2xFPGA1FwRev.setStatus('mandatory')
dualdrr2xDRT1SerialNo = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 35, 5, 4, 17), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dualdrr2xDRT1SerialNo.setStatus('mandatory')
dualdrr2xDRT1SFPSerialNo = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 35, 5, 4, 18), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dualdrr2xDRT1SFPSerialNo.setStatus('mandatory')
dualdrr2xDRT1SFPPartNo = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 35, 5, 4, 19), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dualdrr2xDRT1SFPPartNo.setStatus('mandatory')
dualdrr2xDRT1FwRev = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 35, 5, 4, 20), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dualdrr2xDRT1FwRev.setStatus('mandatory')
dualdrr2xDRT1FpgaFwRev = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 35, 5, 4, 21), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dualdrr2xDRT1FpgaFwRev.setStatus('mandatory')
dualdrr2xDRT2SerialNo = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 35, 5, 4, 22), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dualdrr2xDRT2SerialNo.setStatus('mandatory')
dualdrr2xDRT2SFPSerialNo = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 35, 5, 4, 23), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dualdrr2xDRT2SFPSerialNo.setStatus('mandatory')
dualdrr2xDRT2SFPPartNo = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 35, 5, 4, 24), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dualdrr2xDRT2SFPPartNo.setStatus('mandatory')
dualdrr2xDRT2FwRev = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 35, 5, 4, 25), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dualdrr2xDRT2FwRev.setStatus('mandatory')
dualdrr2xDRT2FpgaFwRev = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 35, 5, 4, 26), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dualdrr2xDRT2FpgaFwRev.setStatus('mandatory')
trapdualdrrConfigChangeInteger = NotificationType((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 35) + (0,1)).setObjects(("NLSBBN-TRAPS-MIB", "trapIdentifier"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemModelNumber"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemSerialNum"), ("NLSBBN-TRAPS-MIB", "trapPerceivedSeverity"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemOperState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAlarmStatus"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAdminState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAvailStatus"), ("NLSBBN-TRAPS-MIB", "trapText"), ("NLSBBN-TRAPS-MIB", "trapChangedObjectId"), ("NLSBBN-TRAPS-MIB", "trapChangedValueInteger"), ("NLSBBN-TRAPS-MIB", "trapNETrapLastTrapTimeStamp"))
trapdualdrrConfigChangeDisplayString = NotificationType((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 35) + (0,2)).setObjects(("NLSBBN-TRAPS-MIB", "trapIdentifier"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemModelNumber"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemSerialNum"), ("NLSBBN-TRAPS-MIB", "trapPerceivedSeverity"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemOperState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAlarmStatus"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAdminState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAvailStatus"), ("NLSBBN-TRAPS-MIB", "trapText"), ("NLSBBN-TRAPS-MIB", "trapChangedObjectId"), ("NLSBBN-TRAPS-MIB", "trapChangedValueDisplayString"), ("NLSBBN-TRAPS-MIB", "trapNETrapLastTrapTimeStamp"))
trapdualdrr12VCurrentAlarm = NotificationType((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 35) + (0,3)).setObjects(("NLSBBN-TRAPS-MIB", "trapIdentifier"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemModelNumber"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemSerialNum"), ("NLSBBN-TRAPS-MIB", "trapPerceivedSeverity"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemOperState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAlarmStatus"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAdminState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAvailStatus"), ("NLSBBN-TRAPS-MIB", "trapText"), ("NLSBBN-TRAPS-MIB", "trapChangedObjectId"), ("NLSBBN-TRAPS-MIB", "trapChangedValueInteger"), ("NLSBBN-TRAPS-MIB", "trapNETrapLastTrapTimeStamp"))
trapdualdrrModuleTempAlarm = NotificationType((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 35) + (0,4)).setObjects(("NLSBBN-TRAPS-MIB", "trapIdentifier"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemModelNumber"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemSerialNum"), ("NLSBBN-TRAPS-MIB", "trapPerceivedSeverity"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemOperState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAlarmStatus"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAdminState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAvailStatus"), ("NLSBBN-TRAPS-MIB", "trapText"), ("NLSBBN-TRAPS-MIB", "trapChangedObjectId"), ("NLSBBN-TRAPS-MIB", "trapChangedValueInteger"), ("NLSBBN-TRAPS-MIB", "trapNETrapLastTrapTimeStamp"))
trapdualdrrFanSpeedAlarm = NotificationType((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 35) + (0,5)).setObjects(("NLSBBN-TRAPS-MIB", "trapIdentifier"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemModelNumber"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemSerialNum"), ("NLSBBN-TRAPS-MIB", "trapPerceivedSeverity"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemOperState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAlarmStatus"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAdminState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAvailStatus"), ("NLSBBN-TRAPS-MIB", "trapText"), ("NLSBBN-TRAPS-MIB", "trapChangedObjectId"), ("NLSBBN-TRAPS-MIB", "trapChangedValueInteger"), ("NLSBBN-TRAPS-MIB", "trapNETrapLastTrapTimeStamp"))
trapdualdrrFlashAlarm = NotificationType((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 35) + (0,6)).setObjects(("NLSBBN-TRAPS-MIB", "trapIdentifier"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemModelNumber"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemSerialNum"), ("NLSBBN-TRAPS-MIB", "trapPerceivedSeverity"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemOperState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAlarmStatus"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAdminState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAvailStatus"), ("NLSBBN-TRAPS-MIB", "trapText"), ("NLSBBN-TRAPS-MIB", "trapChangedObjectId"), ("NLSBBN-TRAPS-MIB", "trapChangedValueInteger"), ("NLSBBN-TRAPS-MIB", "trapNETrapLastTrapTimeStamp"))
trapdualdrrBankBootAlarm = NotificationType((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 35) + (0,7)).setObjects(("NLSBBN-TRAPS-MIB", "trapIdentifier"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemModelNumber"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemSerialNum"), ("NLSBBN-TRAPS-MIB", "trapPerceivedSeverity"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemOperState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAlarmStatus"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAdminState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAvailStatus"), ("NLSBBN-TRAPS-MIB", "trapText"), ("NLSBBN-TRAPS-MIB", "trapChangedObjectId"), ("NLSBBN-TRAPS-MIB", "trapChangedValueInteger"), ("NLSBBN-TRAPS-MIB", "trapNETrapLastTrapTimeStamp"))
trapdualdrrAlarmDataCRCAlarm = NotificationType((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 35) + (0,8)).setObjects(("NLSBBN-TRAPS-MIB", "trapIdentifier"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemModelNumber"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemSerialNum"), ("NLSBBN-TRAPS-MIB", "trapPerceivedSeverity"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemOperState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAlarmStatus"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAdminState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAvailStatus"), ("NLSBBN-TRAPS-MIB", "trapText"), ("NLSBBN-TRAPS-MIB", "trapChangedObjectId"), ("NLSBBN-TRAPS-MIB", "trapChangedValueInteger"), ("NLSBBN-TRAPS-MIB", "trapNETrapLastTrapTimeStamp"))
trapdualdrrHardwareErrAlarm = NotificationType((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 35) + (0,9)).setObjects(("NLSBBN-TRAPS-MIB", "trapIdentifier"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemModelNumber"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemSerialNum"), ("NLSBBN-TRAPS-MIB", "trapPerceivedSeverity"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemOperState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAlarmStatus"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAdminState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAvailStatus"), ("NLSBBN-TRAPS-MIB", "trapText"), ("NLSBBN-TRAPS-MIB", "trapChangedObjectId"), ("NLSBBN-TRAPS-MIB", "trapChangedValueInteger"), ("NLSBBN-TRAPS-MIB", "trapNETrapLastTrapTimeStamp"))
trapdualdrrOpticalSignal1Alarm = NotificationType((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 35) + (0,10)).setObjects(("NLSBBN-TRAPS-MIB", "trapIdentifier"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemModelNumber"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemSerialNum"), ("NLSBBN-TRAPS-MIB", "trapPerceivedSeverity"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemOperState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAlarmStatus"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAdminState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAvailStatus"), ("NLSBBN-TRAPS-MIB", "trapText"), ("NLSBBN-TRAPS-MIB", "trapChangedObjectId"), ("NLSBBN-TRAPS-MIB", "trapChangedValueInteger"), ("NLSBBN-TRAPS-MIB", "trapNETrapLastTrapTimeStamp"))
trapdualdrrOpticalSignal2Alarm = NotificationType((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 35) + (0,11)).setObjects(("NLSBBN-TRAPS-MIB", "trapIdentifier"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemModelNumber"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemSerialNum"), ("NLSBBN-TRAPS-MIB", "trapPerceivedSeverity"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemOperState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAlarmStatus"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAdminState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAvailStatus"), ("NLSBBN-TRAPS-MIB", "trapText"), ("NLSBBN-TRAPS-MIB", "trapChangedObjectId"), ("NLSBBN-TRAPS-MIB", "trapChangedValueInteger"), ("NLSBBN-TRAPS-MIB", "trapNETrapLastTrapTimeStamp"))
trapdualdrrFactoryDataCRCAlarm = NotificationType((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 35) + (0,12)).setObjects(("NLSBBN-TRAPS-MIB", "trapIdentifier"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemModelNumber"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemSerialNum"), ("NLSBBN-TRAPS-MIB", "trapPerceivedSeverity"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemOperState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAlarmStatus"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAdminState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAvailStatus"), ("NLSBBN-TRAPS-MIB", "trapText"), ("NLSBBN-TRAPS-MIB", "trapChangedObjectId"), ("NLSBBN-TRAPS-MIB", "trapChangedValueInteger"), ("NLSBBN-TRAPS-MIB", "trapNETrapLastTrapTimeStamp"))
trapdualdrrResetFactoryDefaultAlarm = NotificationType((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 35) + (0,13)).setObjects(("NLSBBN-TRAPS-MIB", "trapIdentifier"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemModelNumber"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemSerialNum"), ("NLSBBN-TRAPS-MIB", "trapPerceivedSeverity"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemOperState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAlarmStatus"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAdminState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAvailStatus"), ("NLSBBN-TRAPS-MIB", "trapText"), ("NLSBBN-TRAPS-MIB", "trapChangedObjectId"), ("NLSBBN-TRAPS-MIB", "trapChangedValueInteger"), ("NLSBBN-TRAPS-MIB", "trapNETrapLastTrapTimeStamp"))
trapdualdrrTripPoint1Alarm = NotificationType((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 35) + (0,14)).setObjects(("NLSBBN-TRAPS-MIB", "trapIdentifier"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemModelNumber"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemSerialNum"), ("NLSBBN-TRAPS-MIB", "trapPerceivedSeverity"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemOperState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAlarmStatus"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAdminState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAvailStatus"), ("NLSBBN-TRAPS-MIB", "trapText"), ("NLSBBN-TRAPS-MIB", "trapChangedObjectId"), ("NLSBBN-TRAPS-MIB", "trapChangedValueInteger"), ("NLSBBN-TRAPS-MIB", "trapNETrapLastTrapTimeStamp"))
trapdualdrrTripPoint2Alarm = NotificationType((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 35) + (0,15)).setObjects(("NLSBBN-TRAPS-MIB", "trapIdentifier"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemModelNumber"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemSerialNum"), ("NLSBBN-TRAPS-MIB", "trapPerceivedSeverity"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemOperState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAlarmStatus"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAdminState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAvailStatus"), ("NLSBBN-TRAPS-MIB", "trapText"), ("NLSBBN-TRAPS-MIB", "trapChangedObjectId"), ("NLSBBN-TRAPS-MIB", "trapChangedValueInteger"), ("NLSBBN-TRAPS-MIB", "trapNETrapLastTrapTimeStamp"))
trapdualdrrLink1Alarm = NotificationType((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 35) + (0,16)).setObjects(("NLSBBN-TRAPS-MIB", "trapIdentifier"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemModelNumber"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemSerialNum"), ("NLSBBN-TRAPS-MIB", "trapPerceivedSeverity"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemOperState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAlarmStatus"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAdminState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAvailStatus"), ("NLSBBN-TRAPS-MIB", "trapText"), ("NLSBBN-TRAPS-MIB", "trapChangedObjectId"), ("NLSBBN-TRAPS-MIB", "trapChangedValueInteger"), ("NLSBBN-TRAPS-MIB", "trapNETrapLastTrapTimeStamp"))
trapdualdrrLink2Alarm = NotificationType((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 35) + (0,17)).setObjects(("NLSBBN-TRAPS-MIB", "trapIdentifier"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemModelNumber"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemSerialNum"), ("NLSBBN-TRAPS-MIB", "trapPerceivedSeverity"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemOperState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAlarmStatus"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAdminState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAvailStatus"), ("NLSBBN-TRAPS-MIB", "trapText"), ("NLSBBN-TRAPS-MIB", "trapChangedObjectId"), ("NLSBBN-TRAPS-MIB", "trapChangedValueInteger"), ("NLSBBN-TRAPS-MIB", "trapNETrapLastTrapTimeStamp"))
trapdualdrrCalibrationDataCRCAlarm = NotificationType((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 35) + (0,18)).setObjects(("NLSBBN-TRAPS-MIB", "trapIdentifier"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemModelNumber"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemSerialNum"), ("NLSBBN-TRAPS-MIB", "trapPerceivedSeverity"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemOperState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAlarmStatus"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAdminState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAvailStatus"), ("NLSBBN-TRAPS-MIB", "trapText"), ("NLSBBN-TRAPS-MIB", "trapChangedObjectId"), ("NLSBBN-TRAPS-MIB", "trapChangedValueInteger"), ("NLSBBN-TRAPS-MIB", "trapNETrapLastTrapTimeStamp"))
trapdualdrrSFP1OptPWRAlarm = NotificationType((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 35) + (0,19)).setObjects(("NLSBBN-TRAPS-MIB", "trapIdentifier"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemModelNumber"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemSerialNum"), ("NLSBBN-TRAPS-MIB", "trapPerceivedSeverity"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemOperState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAlarmStatus"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAdminState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAvailStatus"), ("NLSBBN-TRAPS-MIB", "trapText"), ("NLSBBN-TRAPS-MIB", "trapChangedObjectId"), ("NLSBBN-TRAPS-MIB", "trapChangedValueInteger"), ("NLSBBN-TRAPS-MIB", "trapNETrapLastTrapTimeStamp"))
trapdualdrrDRT1Cur24VAlarm = NotificationType((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 35) + (0,20)).setObjects(("NLSBBN-TRAPS-MIB", "trapIdentifier"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemModelNumber"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemSerialNum"), ("NLSBBN-TRAPS-MIB", "trapPerceivedSeverity"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemOperState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAlarmStatus"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAdminState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAvailStatus"), ("NLSBBN-TRAPS-MIB", "trapText"), ("NLSBBN-TRAPS-MIB", "trapChangedObjectId"), ("NLSBBN-TRAPS-MIB", "trapChangedValueInteger"), ("NLSBBN-TRAPS-MIB", "trapNETrapLastTrapTimeStamp"))
trapdualdrrDRT1ModTempAarm = NotificationType((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 35) + (0,21)).setObjects(("NLSBBN-TRAPS-MIB", "trapIdentifier"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemModelNumber"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemSerialNum"), ("NLSBBN-TRAPS-MIB", "trapPerceivedSeverity"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemOperState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAlarmStatus"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAdminState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAvailStatus"), ("NLSBBN-TRAPS-MIB", "trapText"), ("NLSBBN-TRAPS-MIB", "trapChangedObjectId"), ("NLSBBN-TRAPS-MIB", "trapChangedValueInteger"), ("NLSBBN-TRAPS-MIB", "trapNETrapLastTrapTimeStamp"))
trapdualdrrSFP2OptPWRAlarm = NotificationType((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 35) + (0,22)).setObjects(("NLSBBN-TRAPS-MIB", "trapIdentifier"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemModelNumber"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemSerialNum"), ("NLSBBN-TRAPS-MIB", "trapPerceivedSeverity"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemOperState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAlarmStatus"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAdminState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAvailStatus"), ("NLSBBN-TRAPS-MIB", "trapText"), ("NLSBBN-TRAPS-MIB", "trapChangedObjectId"), ("NLSBBN-TRAPS-MIB", "trapChangedValueInteger"), ("NLSBBN-TRAPS-MIB", "trapNETrapLastTrapTimeStamp"))
trapdualdrrDRT2Cur24VAlarm = NotificationType((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 35) + (0,23)).setObjects(("NLSBBN-TRAPS-MIB", "trapIdentifier"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemModelNumber"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemSerialNum"), ("NLSBBN-TRAPS-MIB", "trapPerceivedSeverity"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemOperState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAlarmStatus"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAdminState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAvailStatus"), ("NLSBBN-TRAPS-MIB", "trapText"), ("NLSBBN-TRAPS-MIB", "trapChangedObjectId"), ("NLSBBN-TRAPS-MIB", "trapChangedValueInteger"), ("NLSBBN-TRAPS-MIB", "trapNETrapLastTrapTimeStamp"))
trapdualdrrDRT2ModTempAarm = NotificationType((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 35) + (0,24)).setObjects(("NLSBBN-TRAPS-MIB", "trapIdentifier"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemModelNumber"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemSerialNum"), ("NLSBBN-TRAPS-MIB", "trapPerceivedSeverity"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemOperState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAlarmStatus"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAdminState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAvailStatus"), ("NLSBBN-TRAPS-MIB", "trapText"), ("NLSBBN-TRAPS-MIB", "trapChangedObjectId"), ("NLSBBN-TRAPS-MIB", "trapChangedValueInteger"), ("NLSBBN-TRAPS-MIB", "trapNETrapLastTrapTimeStamp"))
mibBuilder.exportSymbols("OMNI-gx2dualdrr2x-MIB", dualdrr2xmajorLowRecdOptPwr1=dualdrr2xmajorLowRecdOptPwr1, dualdrr2xlabelTx0ModTemp=dualdrr2xlabelTx0ModTemp, trapdualdrrTripPoint2Alarm=trapdualdrrTripPoint2Alarm, dualdrr2xminorLowTx0SFPWave=dualdrr2xminorLowTx0SFPWave, gx2dualdrr2xDescriptor=gx2dualdrr2xDescriptor, dualdrr2xstateflagCh2TripPointStatus=dualdrr2xstateflagCh2TripPointStatus, trapdualdrrModuleTempAlarm=trapdualdrrModuleTempAlarm, dualdrr2xenumGainChannel2A=dualdrr2xenumGainChannel2A, dualdrr2xvalueDRT2Status=dualdrr2xvalueDRT2Status, trapdualdrrBankBootAlarm=trapdualdrrBankBootAlarm, dualdrr2xmaxValueTx124vCurr=dualdrr2xmaxValueTx124vCurr, dualdrr2xcurrentValue12VCurrent=dualdrr2xcurrentValue12VCurrent, dualdrr2xlabelCh1TripPointStatus=dualdrr2xlabelCh1TripPointStatus, dualdrr2xstateFlagFanSpeed=dualdrr2xstateFlagFanSpeed, dualdrr2xlabelCalibrationDataCrc=dualdrr2xlabelCalibrationDataCrc, dualdrr2xmajorLowRecdOptPwr2=dualdrr2xmajorLowRecdOptPwr2, dualdrr2xmajorHighTx0ModTemp=dualdrr2xmajorHighTx0ModTemp, dualdrr2xvalueCh2TripPointStatus=dualdrr2xvalueCh2TripPointStatus, dualdrr2xenumTrippoint2Value=dualdrr2xenumTrippoint2Value, dualdrr2xminValueTx1OptPwr=dualdrr2xminValueTx1OptPwr, dualdrr2xuomTx1OptPwr=dualdrr2xuomTx1OptPwr, dualdrr2xmajorLowTx1OptPwr=dualdrr2xmajorLowTx1OptPwr, dualdrr2xDRT1FpgaFwRev=dualdrr2xDRT1FpgaFwRev, dualdrr2xminorLowTx124Volt=dualdrr2xminorLowTx124Volt, trapdualdrrConfigChangeDisplayString=trapdualdrrConfigChangeDisplayString, dualdrr2xminValueTx1ModTemp=dualdrr2xminValueTx1ModTemp, dualdrr2xvalueGainChannel1B=dualdrr2xvalueGainChannel1B, dualdrr2xminValue12VCurrent=dualdrr2xminValue12VCurrent, dualdrr2xcurrentValueTx124Volt=dualdrr2xcurrentValueTx124Volt, dualdrr2xlabelDRT1Status=dualdrr2xlabelDRT1Status, dualdrr2xflashPrgCntA=dualdrr2xflashPrgCntA, dualdrr2xminValueFanSpeed=dualdrr2xminValueFanSpeed, dualdrr2xlabelBoot=dualdrr2xlabelBoot, dualdrr2xcurrentValueTx1SFPWave=dualdrr2xcurrentValueTx1SFPWave, dualdrr2xvalueBoot=dualdrr2xvalueBoot, dualdrr2xvalueLink2Status=dualdrr2xvalueLink2Status, gx2dualdrr2xFactoryTableIndex=gx2dualdrr2xFactoryTableIndex, dualdrr2xminorHighFanSpeed=dualdrr2xminorHighFanSpeed, dualdrr2xenumFactoryDefaultReset=dualdrr2xenumFactoryDefaultReset, dualdrr2xuomTx124Volt=dualdrr2xuomTx124Volt, dualdrr2xstateFlagTx0OptPwr=dualdrr2xstateFlagTx0OptPwr, dualdrr2xlabelTx1OptPwr=dualdrr2xlabelTx1OptPwr, dualdrr2xstateflagAlarmDataCrc=dualdrr2xstateflagAlarmDataCrc, dualdrr2xmajorHighTx124Volt=dualdrr2xmajorHighTx124Volt, dualdrr2xlabelGainChannel1B=dualdrr2xlabelGainChannel1B, dualdrr2xstateflagFactoryDefaultReset=dualdrr2xstateflagFactoryDefaultReset, dualdrr2xminorLowTx024Volt=dualdrr2xminorLowTx024Volt, dualdrr2xstateflagTrippoint2Value=dualdrr2xstateflagTrippoint2Value, dualdrr2xstateflagHardwareStatus=dualdrr2xstateflagHardwareStatus, dualdrr2xstateflagDRT1Status=dualdrr2xstateflagDRT1Status, trapdualdrrDRT2ModTempAarm=trapdualdrrDRT2ModTempAarm, dualdrr2xvalueFactoryDefaultReset=dualdrr2xvalueFactoryDefaultReset, dualdrr2xlabelTrippoint1Mode=dualdrr2xlabelTrippoint1Mode, dualdrr2xalarmStateRecdOptPwr2=dualdrr2xalarmStateRecdOptPwr2, dualdrr2xlabelLink2Status=dualdrr2xlabelLink2Status, dualdrr2xvalueOpFrequency=dualdrr2xvalueOpFrequency, dualdrr2xstateflagDRT2Status=dualdrr2xstateflagDRT2Status, dualdrr2xmaxValueTx0OptPwr=dualdrr2xmaxValueTx0OptPwr, dualdrr2xenumOpFrequency=dualdrr2xenumOpFrequency, dualdrr2xlabelRecdOptPwr1=dualdrr2xlabelRecdOptPwr1, dualdrr2xalarmStateTx1OptPwr=dualdrr2xalarmStateTx1OptPwr, dualdrr2xstateflagBoot=dualdrr2xstateflagBoot, dualdrr2xminorHighRecdOptPwr2=dualdrr2xminorHighRecdOptPwr2, dualdrr2xmajorLowTx124vCurr=dualdrr2xmajorLowTx124vCurr, dualdrr2xalarmStateTx1ModTemp=dualdrr2xalarmStateTx1ModTemp, dualdrr2xminValueTx0ModTemp=dualdrr2xminValueTx0ModTemp, dualdrr2xminorLow12VCurrent=dualdrr2xminorLow12VCurrent, dualdrr2xstateflagSFP1Status=dualdrr2xstateflagSFP1Status, dualdrr2xmaxValueTx1OptPwr=dualdrr2xmaxValueTx1OptPwr, dualdrr2xstateFlagTx1OptPwr=dualdrr2xstateFlagTx1OptPwr, dualdrr2xvalueGainChannel2A=dualdrr2xvalueGainChannel2A, dualdrr2xenumGainChannel1B=dualdrr2xenumGainChannel1B, dualdrr2xFPGA0FwRev=dualdrr2xFPGA0FwRev, dualdrr2xstateFlagTx0SFPWave=dualdrr2xstateFlagTx0SFPWave, dualdrr2xbank1CRC=dualdrr2xbank1CRC, dualdrr2xmajorHighTx0OptPwr=dualdrr2xmajorHighTx0OptPwr, dualdrr2xminorHighTx0SFPWave=dualdrr2xminorHighTx0SFPWave, dualdrr2xDRT1SerialNo=dualdrr2xDRT1SerialNo, trapdualdrrDRT1Cur24VAlarm=trapdualdrrDRT1Cur24VAlarm, dualdrr2xstateFlagTx1ModTemp=dualdrr2xstateFlagTx1ModTemp, trapdualdrrDRT2Cur24VAlarm=trapdualdrrDRT2Cur24VAlarm, dualdrr2xbank2CRC=dualdrr2xbank2CRC, dualdrr2xmajorHighTx024vCurr=dualdrr2xmajorHighTx024vCurr, dualdrr2xmaxValueTx024Volt=dualdrr2xmaxValueTx024Volt, dualdrr2xmaxValueModTemp=dualdrr2xmaxValueModTemp, dualdrr2xminorHighModTemp=dualdrr2xminorHighModTemp, dualdrr2xstateflagActChanSelect=dualdrr2xstateflagActChanSelect, dualdrr2xstateFlagTx024vCurr=dualdrr2xstateFlagTx024vCurr, dualdrr2xminorLowTx1OptPwr=dualdrr2xminorLowTx1OptPwr, dualdrr2xmajorHighTx0SFPWave=dualdrr2xmajorHighTx0SFPWave, dualdrr2xminorHighTx0OptPwr=dualdrr2xminorHighTx0OptPwr, dualdrr2xvalueTrippoint2Mode=dualdrr2xvalueTrippoint2Mode, dualdrr2xprgEEPROMByte=dualdrr2xprgEEPROMByte, dualdrr2xenumActChanSelect=dualdrr2xenumActChanSelect, dualdrr2xvalueSFP1Status=dualdrr2xvalueSFP1Status, dualdrr2xlabelRecdOptPwr2=dualdrr2xlabelRecdOptPwr2, dualdrr2xlabelTestpointSelect=dualdrr2xlabelTestpointSelect, dualdrr2xlabel12VCurrent=dualdrr2xlabel12VCurrent, trapdualdrrSFP1OptPWRAlarm=trapdualdrrSFP1OptPWRAlarm, dualdrr2xvalueActChanSelect=dualdrr2xvalueActChanSelect, dualdrr2xcurrentValueModTemp=dualdrr2xcurrentValueModTemp, dualdrr2xlabelModTemp=dualdrr2xlabelModTemp, dualdrr2xuomTx0ModTemp=dualdrr2xuomTx0ModTemp, dualdrr2xuomModTemp=dualdrr2xuomModTemp, dualdrr2xminorHighTx1SFPWave=dualdrr2xminorHighTx1SFPWave, dualdrr2xstateflagCalibrationDataCrc=dualdrr2xstateflagCalibrationDataCrc, dualdrr2xvalueLink1Status=dualdrr2xvalueLink1Status, dualdrr2xenumTestpointSelect=dualdrr2xenumTestpointSelect, dualdrr2xvalueAlarmDataCrc=dualdrr2xvalueAlarmDataCrc, dualdrr2xcurrentValueTx0OptPwr=dualdrr2xcurrentValueTx0OptPwr, dualdrr2xstateflagLink2Status=dualdrr2xstateflagLink2Status, dualdrr2xFPGA1FwRev=dualdrr2xFPGA1FwRev, dualdrr2xminorLowFanSpeed=dualdrr2xminorLowFanSpeed, dualdrr2xminorLowRecdOptPwr1=dualdrr2xminorLowRecdOptPwr1, gx2dualdrr2xAnalogEntry=gx2dualdrr2xAnalogEntry, dualdrr2xlabelSFP0Status=dualdrr2xlabelSFP0Status, dualdrr2xmaxValueTx0ModTemp=dualdrr2xmaxValueTx0ModTemp, dualdrr2xbootStatusByte=dualdrr2xbootStatusByte, dualdrr2xuomTx1ModTemp=dualdrr2xuomTx1ModTemp, dualdrr2xminorLowTx124vCurr=dualdrr2xminorLowTx124vCurr, gx2dualdrr2xStatusTable=gx2dualdrr2xStatusTable, dualdrr2xstateFlagTx0ModTemp=dualdrr2xstateFlagTx0ModTemp, trapdualdrrOpticalSignal1Alarm=trapdualdrrOpticalSignal1Alarm, dualdrr2xenumGainChannel2B=dualdrr2xenumGainChannel2B, dualdrr2xminorHighTx0ModTemp=dualdrr2xminorHighTx0ModTemp, dualdrr2xlabelHardwareStatus=dualdrr2xlabelHardwareStatus, dualdrr2xalarmStateTx024vCurr=dualdrr2xalarmStateTx024vCurr, dualdrr2xstateFlagTx124vCurr=dualdrr2xstateFlagTx124vCurr, dualdrr2xvalueFactoryDataCRC=dualdrr2xvalueFactoryDataCRC, dualdrr2xvalueCh1TripPointStatus=dualdrr2xvalueCh1TripPointStatus, trapdualdrrDRT1ModTempAarm=trapdualdrrDRT1ModTempAarm, dualdrr2xmajorHighTx024Volt=dualdrr2xmajorHighTx024Volt, trapdualdrrLink1Alarm=trapdualdrrLink1Alarm, dualdrr2xlabelTx024vCurr=dualdrr2xlabelTx024vCurr, dualdrr2xlabelFlash=dualdrr2xlabelFlash, dualdrr2xhourMeter=dualdrr2xhourMeter, gx2dualdrr2xStatusTableIndex=gx2dualdrr2xStatusTableIndex, dualdrr2xlabelDRT2Status=dualdrr2xlabelDRT2Status, dualdrr2xuomTx024vCurr=dualdrr2xuomTx024vCurr, dualdrr2xstateflagSFP0Status=dualdrr2xstateflagSFP0Status, dualdrr2xuomTx1SFPWave=dualdrr2xuomTx1SFPWave, dualdrr2xlabelGainChannel1A=dualdrr2xlabelGainChannel1A, dualdrr2xalarmState12VCurrent=dualdrr2xalarmState12VCurrent, dualdrr2xDRT2SFPPartNo=dualdrr2xDRT2SFPPartNo, dualdrr2xmajorLowTx124Volt=dualdrr2xmajorLowTx124Volt, dualdrr2xmaxValueRecdOptPwr1=dualdrr2xmaxValueRecdOptPwr1, dualdrr2xuomTx0SFPWave=dualdrr2xuomTx0SFPWave, dualdrr2xDRT2FpgaFwRev=dualdrr2xDRT2FpgaFwRev, dualdrr2xvalueGainChannel1A=dualdrr2xvalueGainChannel1A, dualdrr2xalarmStateTx0OptPwr=dualdrr2xalarmStateTx0OptPwr, dualdrr2xminorLowModTemp=dualdrr2xminorLowModTemp, trapdualdrrHardwareErrAlarm=trapdualdrrHardwareErrAlarm, dualdrr2xlabelTx024Volt=dualdrr2xlabelTx024Volt, dualdrr2xmaxValueTx024vCurr=dualdrr2xmaxValueTx024vCurr, dualdrr2xuomTx024Volt=dualdrr2xuomTx024Volt, gx2dualdrr2xAnalogTableIndex=gx2dualdrr2xAnalogTableIndex, dualdrr2xstateflagTrippoint1Mode=dualdrr2xstateflagTrippoint1Mode, dualdrr2xlabelTx1ModTemp=dualdrr2xlabelTx1ModTemp, dualdrr2xvalueTrippoint2Value=dualdrr2xvalueTrippoint2Value, dualdrr2xminValueRecdOptPwr1=dualdrr2xminValueRecdOptPwr1, dualdrr2xlabelTx1SFPWave=dualdrr2xlabelTx1SFPWave, dualdrr2xvalueTrippoint1Mode=dualdrr2xvalueTrippoint1Mode, dualdrr2xmajorHighRecdOptPwr2=dualdrr2xmajorHighRecdOptPwr2, dualdrr2xuomTx0OptPwr=dualdrr2xuomTx0OptPwr, dualdrr2xalarmStateRecdOptPwr1=dualdrr2xalarmStateRecdOptPwr1, dualdrr2xmajorLowModTemp=dualdrr2xmajorLowModTemp, dualdrr2xmajorHighTx1OptPwr=dualdrr2xmajorHighTx1OptPwr, dualdrr2xalarmStateTx0SFPWave=dualdrr2xalarmStateTx0SFPWave, dualdrr2xlabelFactoryDataCRC=dualdrr2xlabelFactoryDataCRC, dualdrr2xstateFlag12VCurrent=dualdrr2xstateFlag12VCurrent, trapdualdrrTripPoint1Alarm=trapdualdrrTripPoint1Alarm, dualdrr2xlabelCh2TripPointStatus=dualdrr2xlabelCh2TripPointStatus, dualdrr2xcurrentValueTx0SFPWave=dualdrr2xcurrentValueTx0SFPWave, dualdrr2xlabelTrippoint2Mode=dualdrr2xlabelTrippoint2Mode, dualdrr2xcurrentValueTx1ModTemp=dualdrr2xcurrentValueTx1ModTemp, dualdrr2xmaxValueRecdOptPwr2=dualdrr2xmaxValueRecdOptPwr2, gx2dualdrr2xDigitalTableIndex=gx2dualdrr2xDigitalTableIndex, dualdrr2xstateflagGainChannel2A=dualdrr2xstateflagGainChannel2A, trapdualdrrConfigChangeInteger=trapdualdrrConfigChangeInteger, dualdrr2xlabelGainChannel2B=dualdrr2xlabelGainChannel2B, dualdrr2xstateFlagModTemp=dualdrr2xstateFlagModTemp, dualdrr2xbootControlByte=dualdrr2xbootControlByte, dualdrr2xminorLowRecdOptPwr2=dualdrr2xminorLowRecdOptPwr2, trapdualdrrAlarmDataCRCAlarm=trapdualdrrAlarmDataCRCAlarm, trapdualdrrFanSpeedAlarm=trapdualdrrFanSpeedAlarm, gx2dualdrr2xFactoryTable=gx2dualdrr2xFactoryTable, dualdrr2xstateflagGainChannel2B=dualdrr2xstateflagGainChannel2B, dualdrr2xcurrentValueRecdOptPwr1=dualdrr2xcurrentValueRecdOptPwr1, dualdrr2xmajorHighFanSpeed=dualdrr2xmajorHighFanSpeed, dualdrr2xmaxValue12VCurrent=dualdrr2xmaxValue12VCurrent, dualdrr2xmajorHighModTemp=dualdrr2xmajorHighModTemp, gx2dualdrr2xAnalogTable=gx2dualdrr2xAnalogTable, dualdrr2xstateflagLink1Status=dualdrr2xstateflagLink1Status, dualdrr2xflashPrgCntB=dualdrr2xflashPrgCntB, dualdrr2xcurrentValueRecdOptPwr2=dualdrr2xcurrentValueRecdOptPwr2, trapdualdrrResetFactoryDefaultAlarm=trapdualdrrResetFactoryDefaultAlarm, dualdrr2xenumGainChannel1A=dualdrr2xenumGainChannel1A, dualdrr2xDRT1SFPSerialNo=dualdrr2xDRT1SFPSerialNo, dualdrr2xuomRecdOptPwr1=dualdrr2xuomRecdOptPwr1, dualdrr2xminorLowTx1SFPWave=dualdrr2xminorLowTx1SFPWave, dualdrr2xenumTrippoint2Mode=dualdrr2xenumTrippoint2Mode, dualdrr2xcurrentValueTx124vCurr=dualdrr2xcurrentValueTx124vCurr, dualdrr2xminorLowTx1ModTemp=dualdrr2xminorLowTx1ModTemp, dualdrr2xDRT2SFPSerialNo=dualdrr2xDRT2SFPSerialNo, dualdrr2xmaxValueTx124Volt=dualdrr2xmaxValueTx124Volt, dualdrr2xenumTrippoint1Value=dualdrr2xenumTrippoint1Value, dualdrr2xminValueTx124vCurr=dualdrr2xminValueTx124vCurr, dualdrr2xalarmStateTx124vCurr=dualdrr2xalarmStateTx124vCurr, dualdrr2xminorLowTx0OptPwr=dualdrr2xminorLowTx0OptPwr, dualdrr2xmajorHigh12VCurrent=dualdrr2xmajorHigh12VCurrent, dualdrr2xstateflagTrippoint2Mode=dualdrr2xstateflagTrippoint2Mode, gx2dualdrr2xDigitalTable=gx2dualdrr2xDigitalTable, dualdrr2xmajorLowFanSpeed=dualdrr2xmajorLowFanSpeed, dualdrr2xcurrentValueTx024Volt=dualdrr2xcurrentValueTx024Volt, trapdualdrrCalibrationDataCRCAlarm=trapdualdrrCalibrationDataCRCAlarm, dualdrr2xalarmStateModTemp=dualdrr2xalarmStateModTemp, dualdrr2xminorHighRecdOptPwr1=dualdrr2xminorHighRecdOptPwr1, dualdrr2xstateFlagRecdOptPwr1=dualdrr2xstateFlagRecdOptPwr1, dualdrr2xlabelFanSpeed=dualdrr2xlabelFanSpeed, dualdrr2xminorHigh12VCurrent=dualdrr2xminorHigh12VCurrent, dualdrr2xminorHighTx024Volt=dualdrr2xminorHighTx024Volt, dualdrr2xmajorHighTx1ModTemp=dualdrr2xmajorHighTx1ModTemp, dualdrr2xlabelAlarmDataCrc=dualdrr2xlabelAlarmDataCrc, trapdualdrrFlashAlarm=trapdualdrrFlashAlarm, dualdrr2xminValueTx024vCurr=dualdrr2xminValueTx024vCurr, dualdrr2xlabelLink1Status=dualdrr2xlabelLink1Status, dualdrr2xfactoryCRC=dualdrr2xfactoryCRC, dualdrr2xminorLowTx024vCurr=dualdrr2xminorLowTx024vCurr, dualdrr2xstateflagGainChannel1B=dualdrr2xstateflagGainChannel1B, dualdrr2xvalueDRT1Status=dualdrr2xvalueDRT1Status, dualdrr2xminorHighTx1OptPwr=dualdrr2xminorHighTx1OptPwr, dualdrr2xflashBankARev=dualdrr2xflashBankARev, dualdrr2xminorHighTx1ModTemp=dualdrr2xminorHighTx1ModTemp, dualdrr2xmaxValueFanSpeed=dualdrr2xmaxValueFanSpeed, dualdrr2xvalueCalibrationDataCrc=dualdrr2xvalueCalibrationDataCrc, dualdrr2xstateflagFlash=dualdrr2xstateflagFlash, dualdrr2xstateflagCh1TripPointStatus=dualdrr2xstateflagCh1TripPointStatus, dualdrr2xmajorHighTx1SFPWave=dualdrr2xmajorHighTx1SFPWave, dualdrr2xminValueTx124Volt=dualdrr2xminValueTx124Volt, dualdrr2xmajorLowTx0ModTemp=dualdrr2xmajorLowTx0ModTemp, dualdrr2xlabelSFP1Status=dualdrr2xlabelSFP1Status, dualdrr2xuom12VCurrent=dualdrr2xuom12VCurrent, dualdrr2xvalueHardwareStatus=dualdrr2xvalueHardwareStatus, trapdualdrrSFP2OptPWRAlarm=trapdualdrrSFP2OptPWRAlarm, dualdrr2xminValueTx0OptPwr=dualdrr2xminValueTx0OptPwr, dualdrr2xminorLowTx0ModTemp=dualdrr2xminorLowTx0ModTemp, dualdrr2xlabelTrippoint1Value=dualdrr2xlabelTrippoint1Value, dualdrr2xstateflagGainChannel1A=dualdrr2xstateflagGainChannel1A, dualdrr2xvalueTrippoint1Value=dualdrr2xvalueTrippoint1Value, trapdualdrr12VCurrentAlarm=trapdualdrr12VCurrentAlarm, gx2dualdrr2xStatusEntry=gx2dualdrr2xStatusEntry, dualdrr2xlabelTx0OptPwr=dualdrr2xlabelTx0OptPwr, trapdualdrrFactoryDataCRCAlarm=trapdualdrrFactoryDataCRCAlarm, dualdrr2xlabelOpFrequency=dualdrr2xlabelOpFrequency)
mibBuilder.exportSymbols("OMNI-gx2dualdrr2x-MIB", dualdrr2xDRT2FwRev=dualdrr2xDRT2FwRev, dualdrr2xvalueTestpointSelect=dualdrr2xvalueTestpointSelect, trapdualdrrOpticalSignal2Alarm=trapdualdrrOpticalSignal2Alarm, dualdrr2xmajorLow12VCurrent=dualdrr2xmajorLow12VCurrent, dualdrr2xminValueRecdOptPwr2=dualdrr2xminValueRecdOptPwr2, dualdrr2xalarmStateTx024Volt=dualdrr2xalarmStateTx024Volt, dualdrr2xmajorLowTx0OptPwr=dualdrr2xmajorLowTx0OptPwr, dualdrr2xvalueFlash=dualdrr2xvalueFlash, dualdrr2xlabelGainChannel2A=dualdrr2xlabelGainChannel2A, dualdrr2xalarmStateFanSpeed=dualdrr2xalarmStateFanSpeed, dualdrr2xminValueTx1SFPWave=dualdrr2xminValueTx1SFPWave, dualdrr2xmajorLowTx024Volt=dualdrr2xmajorLowTx024Volt, dualdrr2xmajorLowTx024vCurr=dualdrr2xmajorLowTx024vCurr, dualdrr2xlabelTx124vCurr=dualdrr2xlabelTx124vCurr, gx2dualdrr2xFactoryEntry=gx2dualdrr2xFactoryEntry, dualdrr2xstateflagFactoryDataCRC=dualdrr2xstateflagFactoryDataCRC, dualdrr2xminorHighTx124Volt=dualdrr2xminorHighTx124Volt, dualdrr2xcurrentValueTx1OptPwr=dualdrr2xcurrentValueTx1OptPwr, dualdrr2xstateflagTestpointSelect=dualdrr2xstateflagTestpointSelect, dualdrr2xlabelTrippoint2Value=dualdrr2xlabelTrippoint2Value, dualdrr2xminValueTx0SFPWave=dualdrr2xminValueTx0SFPWave, dualdrr2xcurrentValueFanSpeed=dualdrr2xcurrentValueFanSpeed, dualdrr2xuomRecdOptPwr2=dualdrr2xuomRecdOptPwr2, dualdrr2xstateFlagTx1SFPWave=dualdrr2xstateFlagTx1SFPWave, dualdrr2xminValueTx024Volt=dualdrr2xminValueTx024Volt, dualdrr2xmaxValueTx1ModTemp=dualdrr2xmaxValueTx1ModTemp, dualdrr2xvalueSFP0Status=dualdrr2xvalueSFP0Status, dualdrr2xDRT1FwRev=dualdrr2xDRT1FwRev, trapdualdrrLink2Alarm=trapdualdrrLink2Alarm, dualdrr2xlabelTx124Volt=dualdrr2xlabelTx124Volt, Float=Float, dualdrr2xmajorHighRecdOptPwr1=dualdrr2xmajorHighRecdOptPwr1, dualdrr2xmajorLowTx1ModTemp=dualdrr2xmajorLowTx1ModTemp, dualdrr2xvalueGainChannel2B=dualdrr2xvalueGainChannel2B, dualdrr2xstateflagOpFrequency=dualdrr2xstateflagOpFrequency, dualdrr2xDRT2SerialNo=dualdrr2xDRT2SerialNo, dualdrr2xstateFlagRecdOptPwr2=dualdrr2xstateFlagRecdOptPwr2, dualdrr2xcurrentValueTx024vCurr=dualdrr2xcurrentValueTx024vCurr, dualdrr2xmajorHighTx124vCurr=dualdrr2xmajorHighTx124vCurr, dualdrr2xmajorLowTx1SFPWave=dualdrr2xmajorLowTx1SFPWave, dualdrr2xalarmStateTx1SFPWave=dualdrr2xalarmStateTx1SFPWave, dualdrr2xminorHighTx124vCurr=dualdrr2xminorHighTx124vCurr, dualdrr2xlabelFactoryDefaultReset=dualdrr2xlabelFactoryDefaultReset, dualdrr2xcurrentValueTx0ModTemp=dualdrr2xcurrentValueTx0ModTemp, dualdrr2xDRT1SFPPartNo=dualdrr2xDRT1SFPPartNo, dualdrr2xlabelTx0SFPWave=dualdrr2xlabelTx0SFPWave, dualdrr2xuomTx124vCurr=dualdrr2xuomTx124vCurr, dualdrr2xmaxValueTx0SFPWave=dualdrr2xmaxValueTx0SFPWave, dualdrr2xstateflagTrippoint1Value=dualdrr2xstateflagTrippoint1Value, dualdrr2xstateFlagTx124Volt=dualdrr2xstateFlagTx124Volt, dualdrr2xSubAgentRev=dualdrr2xSubAgentRev, dualdrr2xstateFlagTx024Volt=dualdrr2xstateFlagTx024Volt, dualdrr2xuomFanSpeed=dualdrr2xuomFanSpeed, dualdrr2xenumTrippoint1Mode=dualdrr2xenumTrippoint1Mode, dualdrr2xmaxValueTx1SFPWave=dualdrr2xmaxValueTx1SFPWave, dualdrr2xminorHighTx024vCurr=dualdrr2xminorHighTx024vCurr, dualdrr2xlabelActChanSelect=dualdrr2xlabelActChanSelect, dualdrr2xmajorLowTx0SFPWave=dualdrr2xmajorLowTx0SFPWave, dualdrr2xalarmStateTx124Volt=dualdrr2xalarmStateTx124Volt, gx2dualdrr2xDigitalEntry=gx2dualdrr2xDigitalEntry, dualdrr2xalarmStateTx0ModTemp=dualdrr2xalarmStateTx0ModTemp, dualdrr2xcalculateCRC=dualdrr2xcalculateCRC, dualdrr2xflashBankBRev=dualdrr2xflashBankBRev, dualdrr2xminValueModTemp=dualdrr2xminValueModTemp)
