#
# PySNMP MIB module PRIVAT-MultiLAN-Switch-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/PRIVAT-MultiLAN-Switch-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 20:33:15 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, Integer, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "OctetString", "Integer", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsUnion, ConstraintsIntersection, SingleValueConstraint, ValueSizeConstraint, ValueRangeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsUnion", "ConstraintsIntersection", "SingleValueConstraint", "ValueSizeConstraint", "ValueRangeConstraint")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
MibScalar, MibTable, MibTableRow, MibTableColumn, NotificationType, ObjectIdentity, ModuleIdentity, MibIdentifier, Integer32, IpAddress, Counter32, Unsigned32, Bits, iso, Gauge32, TimeTicks, NotificationType, Counter64 = mibBuilder.importSymbols("SNMPv2-SMI", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "NotificationType", "ObjectIdentity", "ModuleIdentity", "MibIdentifier", "Integer32", "IpAddress", "Counter32", "Unsigned32", "Bits", "iso", "Gauge32", "TimeTicks", "NotificationType", "Counter64")
DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention")
class MacAddress(OctetString):
    subtypeSpec = OctetString.subtypeSpec + ValueSizeConstraint(6, 6)
    fixedLength = 6

private = MibIdentifier((1, 3, 6, 1, 4))
enterprises = MibIdentifier((1, 3, 6, 1, 4, 1))
hirschmann = MibIdentifier((1, 3, 6, 1, 4, 1, 248))
multiLANSwitch = MibIdentifier((1, 3, 6, 1, 4, 1, 248, 2))
bridge1 = MibIdentifier((1, 3, 6, 1, 4, 1, 248, 2, 1))
bridgemgmt = MibIdentifier((1, 3, 6, 1, 4, 1, 248, 2, 1, 1))
hirmaMibhHandler = MibIdentifier((1, 3, 6, 1, 4, 1, 248, 2, 1, 2))
hirmaUserInterface = MibIdentifier((1, 3, 6, 1, 4, 1, 248, 2, 1, 3))
hirmaBasCapability = MibIdentifier((1, 3, 6, 1, 4, 1, 248, 2, 1, 1, 1))
hirmaSelfTestCapability = MibIdentifier((1, 3, 6, 1, 4, 1, 248, 2, 1, 1, 2))
hirmaFilterCapability = MibIdentifier((1, 3, 6, 1, 4, 1, 248, 2, 1, 1, 3))
hirmaAddrBTCapability = MibIdentifier((1, 3, 6, 1, 4, 1, 248, 2, 1, 1, 4))
hirmaLoadCapability = MibIdentifier((1, 3, 6, 1, 4, 1, 248, 2, 1, 1, 5))
hirmaFlashUpdate = MibIdentifier((1, 3, 6, 1, 4, 1, 248, 2, 1, 1, 5, 1))
hirmaLoadSaveConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 248, 2, 1, 1, 5, 2))
hirmaBasBridgeTable = MibIdentifier((1, 3, 6, 1, 4, 1, 248, 2, 1, 1, 1, 1))
hirmaBasBridgeGroupCapacity = MibScalar((1, 3, 6, 1, 4, 1, 248, 2, 1, 1, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hirmaBasBridgeGroupCapacity.setStatus('mandatory')
hirmaBasBridgeGroupMap = MibScalar((1, 3, 6, 1, 4, 1, 248, 2, 1, 1, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hirmaBasBridgeGroupMap.setStatus('mandatory')
hirmaBasBridgeSoftVersion = MibScalar((1, 3, 6, 1, 4, 1, 248, 2, 1, 1, 1, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hirmaBasBridgeSoftVersion.setStatus('mandatory')
hirmaBasBridgeHardVersion = MibScalar((1, 3, 6, 1, 4, 1, 248, 2, 1, 1, 1, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hirmaBasBridgeHardVersion.setStatus('mandatory')
hirmaBasBridgeMibVersion = MibScalar((1, 3, 6, 1, 4, 1, 248, 2, 1, 1, 1, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hirmaBasBridgeMibVersion.setStatus('mandatory')
hirmaBasBridgeSpanningTreeVersion = MibScalar((1, 3, 6, 1, 4, 1, 248, 2, 1, 1, 1, 1, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hirmaBasBridgeSpanningTreeVersion.setStatus('mandatory')
hirmaBasBridgeSwitches = MibScalar((1, 3, 6, 1, 4, 1, 248, 2, 1, 1, 1, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hirmaBasBridgeSwitches.setStatus('mandatory')
hirmaBasBridgePwrSplyState = MibScalar((1, 3, 6, 1, 4, 1, 248, 2, 1, 1, 1, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("ok", 1), ("error5V1", 2), ("error5V2", 3), ("error5V1and5V2", 4), ("error5V3", 5), ("error5V1and5V3", 6), ("error5V2and5v3", 7), ("error5v1and5v2and5v3", 8)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hirmaBasBridgePwrSplyState.setStatus('mandatory')
hirmaBasBridgeFanState = MibScalar((1, 3, 6, 1, 4, 1, 248, 2, 1, 1, 1, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("ok", 1), ("nofunction", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hirmaBasBridgeFanState.setStatus('mandatory')
hirmaBasBridgePwrAlarm = MibScalar((1, 3, 6, 1, 4, 1, 248, 2, 1, 1, 1, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hirmaBasBridgePwrAlarm.setStatus('mandatory')
hirmaBasBridgeHealthAlarm = MibScalar((1, 3, 6, 1, 4, 1, 248, 2, 1, 1, 1, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hirmaBasBridgeHealthAlarm.setStatus('mandatory')
hirmaBasBridgeSpanningTree = MibScalar((1, 3, 6, 1, 4, 1, 248, 2, 1, 1, 1, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hirmaBasBridgeSpanningTree.setStatus('mandatory')
hirmaBasBridgeHealthState = MibScalar((1, 3, 6, 1, 4, 1, 248, 2, 1, 1, 1, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("other", 1), ("ok", 2), ("generalFailure", 3), ("multiLANSwitchFailure", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hirmaBasBridgeHealthState.setStatus('mandatory')
hirmaBasBridgeHealthText = MibScalar((1, 3, 6, 1, 4, 1, 248, 2, 1, 1, 1, 1, 14), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hirmaBasBridgeHealthText.setStatus('mandatory')
hirmaBasBridgeHealthData = MibScalar((1, 3, 6, 1, 4, 1, 248, 2, 1, 1, 1, 1, 15), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hirmaBasBridgeHealthData.setStatus('mandatory')
hirmaBasBridgeCounterReset = MibScalar((1, 3, 6, 1, 4, 1, 248, 2, 1, 1, 1, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("reset", 1), ("no-reset", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hirmaBasBridgeCounterReset.setStatus('mandatory')
hirmaBasBridgeEventTable = MibTable((1, 3, 6, 1, 4, 1, 248, 2, 1, 1, 1, 2), )
if mibBuilder.loadTexts: hirmaBasBridgeEventTable.setStatus('mandatory')
hirmaBasBridgeEventEntry = MibTableRow((1, 3, 6, 1, 4, 1, 248, 2, 1, 1, 1, 2, 1), ).setIndexNames((0, "PRIVAT-MultiLAN-Switch-MIB", "hirmaBasBridgeMessageID"))
if mibBuilder.loadTexts: hirmaBasBridgeEventEntry.setStatus('mandatory')
hirmaBasBridgeMessageID = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 2, 1, 1, 1, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hirmaBasBridgeMessageID.setStatus('mandatory')
hirmaBasBridgeMessageIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 2, 1, 1, 1, 2, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hirmaBasBridgeMessageIfIndex.setStatus('mandatory')
hirmaBasBridgeMessage = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 2, 1, 1, 1, 2, 1, 3), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hirmaBasBridgeMessage.setStatus('mandatory')
hirmaBasBridgeMessageTime = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 2, 1, 1, 1, 2, 1, 4), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hirmaBasBridgeMessageTime.setStatus('mandatory')
hirmaBasGroupTable = MibTable((1, 3, 6, 1, 4, 1, 248, 2, 1, 1, 1, 3), )
if mibBuilder.loadTexts: hirmaBasGroupTable.setStatus('mandatory')
hirmaBasGroupEntry = MibTableRow((1, 3, 6, 1, 4, 1, 248, 2, 1, 1, 1, 3, 1), ).setIndexNames((0, "PRIVAT-MultiLAN-Switch-MIB", "hirmaBasGroupID"))
if mibBuilder.loadTexts: hirmaBasGroupEntry.setStatus('mandatory')
hirmaBasGroupID = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 2, 1, 1, 1, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hirmaBasGroupID.setStatus('mandatory')
hirmaBasGroupNumOfPorts = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 2, 1, 1, 1, 3, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hirmaBasGroupNumOfPorts.setStatus('mandatory')
hirmaBasGroupPortMap = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 2, 1, 1, 1, 3, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hirmaBasGroupPortMap.setStatus('mandatory')
hirmaBasGroupName = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 2, 1, 1, 1, 3, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hirmaBasGroupName.setStatus('mandatory')
hirmaBasPortTable = MibTable((1, 3, 6, 1, 4, 1, 248, 2, 1, 1, 1, 4), )
if mibBuilder.loadTexts: hirmaBasPortTable.setStatus('mandatory')
hirmaBasPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 248, 2, 1, 1, 1, 4, 1), ).setIndexNames((0, "PRIVAT-MultiLAN-Switch-MIB", "hirmaBasPortID"))
if mibBuilder.loadTexts: hirmaBasPortEntry.setStatus('mandatory')
hirmaBasPortID = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 2, 1, 1, 1, 4, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hirmaBasPortID.setStatus('mandatory')
hirmaBasPortGroupID = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 2, 1, 1, 1, 4, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hirmaBasPortGroupID.setStatus('mandatory')
hirmaBasPortLanType = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 2, 1, 1, 1, 4, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("ethernet", 1), ("fddi", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hirmaBasPortLanType.setStatus('mandatory')
hirmaBasPortType = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 2, 1, 1, 1, 4, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("aui", 1), ("optical-asynch-850", 2), ("optical-asynch-1300-16", 3), ("optical-asynch-1300-40", 4), ("unshielded-TP-10BaseT", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hirmaBasPortType.setStatus('mandatory')
hirmaBasPortShortDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 2, 1, 1, 1, 4, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("ieee802-3", 1), ("ethernet-switch", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hirmaBasPortShortDelay.setStatus('mandatory')
hirmaBasPortLearning = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 2, 1, 1, 1, 4, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hirmaBasPortLearning.setStatus('mandatory')
hirmaBasPortFiltering = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 2, 1, 1, 1, 4, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hirmaBasPortFiltering.setStatus('mandatory')
hirmaBasPortRelay = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 2, 1, 1, 1, 4, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hirmaBasPortRelay.setStatus('mandatory')
hirmaBasPortMode = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 2, 1, 1, 1, 4, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("half-duplex", 1), ("full-duplex", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hirmaBasPortMode.setStatus('mandatory')
hirmaBasPortCounterReset = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 2, 1, 1, 1, 4, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("reset", 1), ("no-reset", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hirmaBasPortCounterReset.setStatus('mandatory')
hirmaBasPortState = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 2, 1, 1, 1, 4, 1, 11), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hirmaBasPortState.setStatus('mandatory')
hirmaSelfTestBridgeReset = MibScalar((1, 3, 6, 1, 4, 1, 248, 2, 1, 1, 2, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("reset", 1), ("no-reset", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hirmaSelfTestBridgeReset.setStatus('mandatory')
hirmaSelfTestBridgeResetType = MibScalar((1, 3, 6, 1, 4, 1, 248, 2, 1, 1, 2, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("warm-start", 1), ("cold-start", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hirmaSelfTestBridgeResetType.setStatus('mandatory')
hirmaSelfTestBridgeSetDefaults = MibScalar((1, 3, 6, 1, 4, 1, 248, 2, 1, 1, 2, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("reset", 1), ("no-reset", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hirmaSelfTestBridgeSetDefaults.setStatus('mandatory')
hirmaSelfTestGroupTable = MibTable((1, 3, 6, 1, 4, 1, 248, 2, 1, 1, 2, 4), )
if mibBuilder.loadTexts: hirmaSelfTestGroupTable.setStatus('mandatory')
hirmaSelfTestGroupEntry = MibTableRow((1, 3, 6, 1, 4, 1, 248, 2, 1, 1, 2, 4, 1), ).setIndexNames((0, "PRIVAT-MultiLAN-Switch-MIB", "hirmaSelfTestGroupID"))
if mibBuilder.loadTexts: hirmaSelfTestGroupEntry.setStatus('mandatory')
hirmaSelfTestGroupID = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 2, 1, 1, 2, 4, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hirmaSelfTestGroupID.setStatus('mandatory')
hirmaSelfTestGroupDisplayTest = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 2, 1, 1, 2, 4, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("test", 1), ("no-test", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hirmaSelfTestGroupDisplayTest.setStatus('mandatory')
hirmaSelfTestGroupSQETest = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 2, 1, 1, 2, 4, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("enabled-ok", 1), ("disabled", 2), ("not-ok", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hirmaSelfTestGroupSQETest.setStatus('mandatory')
hirmaFilterMaxNumOfFilters = MibScalar((1, 3, 6, 1, 4, 1, 248, 2, 1, 1, 3, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hirmaFilterMaxNumOfFilters.setStatus('mandatory')
hirmaFilterTable = MibTable((1, 3, 6, 1, 4, 1, 248, 2, 1, 1, 3, 2), )
if mibBuilder.loadTexts: hirmaFilterTable.setStatus('mandatory')
hirmaFilterTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 248, 2, 1, 1, 3, 2, 1), ).setIndexNames((0, "PRIVAT-MultiLAN-Switch-MIB", "hirmaFilterID"))
if mibBuilder.loadTexts: hirmaFilterTableEntry.setStatus('mandatory')
hirmaFilterID = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 2, 1, 1, 3, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hirmaFilterID.setStatus('mandatory')
hirmaFilterMode = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 2, 1, 1, 3, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("forward", 1), ("disable", 2), ("discard", 3), ("alone", 4), ("channel", 5), ("delete", 6)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hirmaFilterMode.setStatus('mandatory')
hirmaFilterDest = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 2, 1, 1, 3, 2, 1, 3), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hirmaFilterDest.setStatus('mandatory')
hirmaFilterSrc = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 2, 1, 1, 3, 2, 1, 4), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hirmaFilterSrc.setStatus('mandatory')
hirmaFilterType = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 2, 1, 1, 3, 2, 1, 5), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hirmaFilterType.setStatus('mandatory')
hirmaFilterPortIn = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 2, 1, 1, 3, 2, 1, 6), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hirmaFilterPortIn.setStatus('mandatory')
hirmaFilterPortOut = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 2, 1, 1, 3, 2, 1, 7), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hirmaFilterPortOut.setStatus('mandatory')
hirmaAddrBTAddr = MibScalar((1, 3, 6, 1, 4, 1, 248, 2, 1, 1, 4, 1), MacAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hirmaAddrBTAddr.setStatus('mandatory')
hirmaAddrBTBlock = MibScalar((1, 3, 6, 1, 4, 1, 248, 2, 1, 1, 4, 2), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hirmaAddrBTBlock.setStatus('mandatory')
hirmaFlashUpdateIPAddr = MibScalar((1, 3, 6, 1, 4, 1, 248, 2, 1, 1, 5, 1, 1), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hirmaFlashUpdateIPAddr.setStatus('mandatory')
hirmaFlashUpdateName = MibScalar((1, 3, 6, 1, 4, 1, 248, 2, 1, 1, 5, 1, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hirmaFlashUpdateName.setStatus('mandatory')
hirmaFlashUpdateAction = MibScalar((1, 3, 6, 1, 4, 1, 248, 2, 1, 1, 5, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("program", 1), ("normal-mode", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hirmaFlashUpdateAction.setStatus('mandatory')
hirmaLoadSaveConIPAddr = MibScalar((1, 3, 6, 1, 4, 1, 248, 2, 1, 1, 5, 2, 1), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hirmaLoadSaveConIPAddr.setStatus('mandatory')
hirmaLoadSaveConName = MibScalar((1, 3, 6, 1, 4, 1, 248, 2, 1, 1, 5, 2, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hirmaLoadSaveConName.setStatus('mandatory')
hirmaLoadSaveConAction = MibScalar((1, 3, 6, 1, 4, 1, 248, 2, 1, 1, 5, 2, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("load", 1), ("normal-mode", 2), ("save", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hirmaLoadSaveConAction.setStatus('mandatory')
hirmaMibhCommTable = MibTable((1, 3, 6, 1, 4, 1, 248, 2, 1, 2, 1), )
if mibBuilder.loadTexts: hirmaMibhCommTable.setStatus('mandatory')
hirmaMibhCommEntry = MibTableRow((1, 3, 6, 1, 4, 1, 248, 2, 1, 2, 1, 1), ).setIndexNames((0, "PRIVAT-MultiLAN-Switch-MIB", "hirmaMibhCommIndex"))
if mibBuilder.loadTexts: hirmaMibhCommEntry.setStatus('mandatory')
hirmaMibhCommIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 2, 1, 2, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hirmaMibhCommIndex.setStatus('mandatory')
hirmaMibhCommCommunity = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 2, 1, 2, 1, 1, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hirmaMibhCommCommunity.setStatus('mandatory')
hirmaMibhCommAccess = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 2, 1, 2, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("not-accesible", 1), ("read-only", 2), ("read-write", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hirmaMibhCommAccess.setStatus('mandatory')
hirmaMibhAccessTable = MibTable((1, 3, 6, 1, 4, 1, 248, 2, 1, 2, 2), )
if mibBuilder.loadTexts: hirmaMibhAccessTable.setStatus('mandatory')
hirmaMibhAccessEntry = MibTableRow((1, 3, 6, 1, 4, 1, 248, 2, 1, 2, 2, 1), ).setIndexNames((0, "PRIVAT-MultiLAN-Switch-MIB", "hirmaMibhAccessCommIndex"), (0, "PRIVAT-MultiLAN-Switch-MIB", "hirmaMibhAccessIPAddr"), (0, "PRIVAT-MultiLAN-Switch-MIB", "hirmaMibhAccessPort"))
if mibBuilder.loadTexts: hirmaMibhAccessEntry.setStatus('mandatory')
hirmaMibhAccessCommIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 2, 1, 2, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hirmaMibhAccessCommIndex.setStatus('mandatory')
hirmaMibhAccessIPAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 2, 1, 2, 2, 1, 2), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hirmaMibhAccessIPAddr.setStatus('mandatory')
hirmaMibhAccessPort = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 2, 1, 2, 2, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hirmaMibhAccessPort.setStatus('mandatory')
hirmaMibhAccessCommunity = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 2, 1, 2, 2, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hirmaMibhAccessCommunity.setStatus('mandatory')
hirmaMibhAccessAccess = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 2, 1, 2, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 3))).clone(namedValues=NamedValues(("read-only", 1), ("read-write", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hirmaMibhAccessAccess.setStatus('mandatory')
hirmaMibhAccessState = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 2, 1, 2, 2, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2), ("deleted", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hirmaMibhAccessState.setStatus('mandatory')
hirmaMibhTrapTable = MibTable((1, 3, 6, 1, 4, 1, 248, 2, 1, 2, 3), )
if mibBuilder.loadTexts: hirmaMibhTrapTable.setStatus('mandatory')
hirmaMibhTrapEntry = MibTableRow((1, 3, 6, 1, 4, 1, 248, 2, 1, 2, 3, 1), ).setIndexNames((0, "PRIVAT-MultiLAN-Switch-MIB", "hirmaMibhTrapCommIndex"), (0, "PRIVAT-MultiLAN-Switch-MIB", "hirmaMibhTrapIPAddr"), (0, "PRIVAT-MultiLAN-Switch-MIB", "hirmaMibhTrapPort"))
if mibBuilder.loadTexts: hirmaMibhTrapEntry.setStatus('mandatory')
hirmaMibhTrapCommIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 2, 1, 2, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hirmaMibhTrapCommIndex.setStatus('mandatory')
hirmaMibhTrapIPAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 2, 1, 2, 3, 1, 2), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hirmaMibhTrapIPAddr.setStatus('mandatory')
hirmaMibhTrapPort = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 2, 1, 2, 3, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hirmaMibhTrapPort.setStatus('mandatory')
hirmaMibhTrapCommunity = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 2, 1, 2, 3, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hirmaMibhTrapCommunity.setStatus('mandatory')
hirmaMibhTrapState = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 2, 1, 2, 3, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2), ("deleted", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hirmaMibhTrapState.setStatus('mandatory')
hirmaLuiSystemTable = MibIdentifier((1, 3, 6, 1, 4, 1, 248, 2, 1, 3, 1))
hirmaLuiLocalIPAddr = MibScalar((1, 3, 6, 1, 4, 1, 248, 2, 1, 3, 1, 1), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hirmaLuiLocalIPAddr.setStatus('mandatory')
hirmaLuiGatewayIPAddr = MibScalar((1, 3, 6, 1, 4, 1, 248, 2, 1, 3, 1, 2), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hirmaLuiGatewayIPAddr.setStatus('mandatory')
hirmaLuiNetMask = MibScalar((1, 3, 6, 1, 4, 1, 248, 2, 1, 3, 1, 3), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hirmaLuiNetMask.setStatus('mandatory')
hirmaLuiUserTable = MibTable((1, 3, 6, 1, 4, 1, 248, 2, 1, 3, 2), )
if mibBuilder.loadTexts: hirmaLuiUserTable.setStatus('mandatory')
hirmaLuiUserEntry = MibTableRow((1, 3, 6, 1, 4, 1, 248, 2, 1, 3, 2, 1), ).setIndexNames((0, "PRIVAT-MultiLAN-Switch-MIB", "hirmaLuiUserID"))
if mibBuilder.loadTexts: hirmaLuiUserEntry.setStatus('mandatory')
hirmaLuiUserID = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 2, 1, 3, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hirmaLuiUserID.setStatus('mandatory')
hirmaLuiUserName = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 2, 1, 3, 2, 1, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hirmaLuiUserName.setStatus('mandatory')
hirmaLuiUserPasswd = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 2, 1, 3, 2, 1, 3), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hirmaLuiUserPasswd.setStatus('mandatory')
hirmaLuiUserCommunity = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 2, 1, 3, 2, 1, 4), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hirmaLuiUserCommunity.setStatus('mandatory')
bridgeHealth = NotificationType((1, 3, 6, 1, 4, 1, 248, 2, 1) + (0,1)).setObjects(("PRIVAT-MultiLAN-Switch-MIB", "hirmaBasBridgeHealthState"))
mibBuilder.exportSymbols("PRIVAT-MultiLAN-Switch-MIB", hirmaBasBridgeEventEntry=hirmaBasBridgeEventEntry, hirschmann=hirschmann, hirmaBasBridgeGroupCapacity=hirmaBasBridgeGroupCapacity, hirmaMibhTrapCommIndex=hirmaMibhTrapCommIndex, hirmaSelfTestGroupEntry=hirmaSelfTestGroupEntry, hirmaMibhTrapState=hirmaMibhTrapState, hirmaBasPortShortDelay=hirmaBasPortShortDelay, hirmaAddrBTBlock=hirmaAddrBTBlock, hirmaFilterMaxNumOfFilters=hirmaFilterMaxNumOfFilters, private=private, bridge1=bridge1, hirmaBasBridgeMibVersion=hirmaBasBridgeMibVersion, hirmaMibhAccessState=hirmaMibhAccessState, hirmaBasBridgeHealthData=hirmaBasBridgeHealthData, hirmaMibhCommEntry=hirmaMibhCommEntry, hirmaMibhAccessEntry=hirmaMibhAccessEntry, hirmaBasPortType=hirmaBasPortType, hirmaLoadCapability=hirmaLoadCapability, hirmaBasBridgeHardVersion=hirmaBasBridgeHardVersion, hirmaFlashUpdateIPAddr=hirmaFlashUpdateIPAddr, MacAddress=MacAddress, hirmaBasGroupPortMap=hirmaBasGroupPortMap, hirmaFlashUpdate=hirmaFlashUpdate, hirmaMibhAccessPort=hirmaMibhAccessPort, hirmaAddrBTAddr=hirmaAddrBTAddr, hirmaLuiNetMask=hirmaLuiNetMask, hirmaBasPortState=hirmaBasPortState, hirmaMibhAccessIPAddr=hirmaMibhAccessIPAddr, hirmaBasBridgeTable=hirmaBasBridgeTable, bridgeHealth=bridgeHealth, hirmaFilterMode=hirmaFilterMode, hirmaBasBridgeSwitches=hirmaBasBridgeSwitches, hirmaSelfTestGroupID=hirmaSelfTestGroupID, hirmaBasBridgeGroupMap=hirmaBasBridgeGroupMap, hirmaLuiUserPasswd=hirmaLuiUserPasswd, hirmaBasPortCounterReset=hirmaBasPortCounterReset, hirmaBasGroupNumOfPorts=hirmaBasGroupNumOfPorts, hirmaFilterTable=hirmaFilterTable, hirmaBasBridgeMessageIfIndex=hirmaBasBridgeMessageIfIndex, hirmaBasPortLanType=hirmaBasPortLanType, hirmaMibhTrapEntry=hirmaMibhTrapEntry, hirmaBasBridgeHealthState=hirmaBasBridgeHealthState, hirmaBasBridgeMessageTime=hirmaBasBridgeMessageTime, hirmaSelfTestBridgeSetDefaults=hirmaSelfTestBridgeSetDefaults, hirmaBasCapability=hirmaBasCapability, hirmaFilterType=hirmaFilterType, hirmaLoadSaveConIPAddr=hirmaLoadSaveConIPAddr, hirmaFilterCapability=hirmaFilterCapability, hirmaMibhTrapTable=hirmaMibhTrapTable, hirmaBasPortLearning=hirmaBasPortLearning, hirmaMibhCommTable=hirmaMibhCommTable, hirmaSelfTestGroupDisplayTest=hirmaSelfTestGroupDisplayTest, multiLANSwitch=multiLANSwitch, hirmaBasBridgeFanState=hirmaBasBridgeFanState, hirmaBasBridgeSpanningTreeVersion=hirmaBasBridgeSpanningTreeVersion, hirmaBasPortFiltering=hirmaBasPortFiltering, hirmaLuiUserTable=hirmaLuiUserTable, hirmaMibhAccessCommunity=hirmaMibhAccessCommunity, hirmaLuiUserEntry=hirmaLuiUserEntry, hirmaBasPortRelay=hirmaBasPortRelay, hirmaFilterDest=hirmaFilterDest, hirmaSelfTestBridgeReset=hirmaSelfTestBridgeReset, hirmaLuiLocalIPAddr=hirmaLuiLocalIPAddr, hirmaBasBridgePwrSplyState=hirmaBasBridgePwrSplyState, hirmaLoadSaveConName=hirmaLoadSaveConName, hirmaBasBridgeHealthText=hirmaBasBridgeHealthText, hirmaLuiUserID=hirmaLuiUserID, hirmaLuiUserCommunity=hirmaLuiUserCommunity, hirmaLoadSaveConfig=hirmaLoadSaveConfig, hirmaBasBridgeCounterReset=hirmaBasBridgeCounterReset, hirmaBasPortMode=hirmaBasPortMode, hirmaBasBridgeSpanningTree=hirmaBasBridgeSpanningTree, hirmaBasBridgeMessageID=hirmaBasBridgeMessageID, hirmaBasPortID=hirmaBasPortID, hirmaBasGroupID=hirmaBasGroupID, hirmaBasBridgeSoftVersion=hirmaBasBridgeSoftVersion, hirmaBasPortEntry=hirmaBasPortEntry, hirmaMibhTrapPort=hirmaMibhTrapPort, hirmaAddrBTCapability=hirmaAddrBTCapability, hirmaMibhCommCommunity=hirmaMibhCommCommunity, hirmaMibhHandler=hirmaMibhHandler, hirmaFlashUpdateAction=hirmaFlashUpdateAction, hirmaUserInterface=hirmaUserInterface, hirmaBasBridgeHealthAlarm=hirmaBasBridgeHealthAlarm, hirmaBasPortTable=hirmaBasPortTable, hirmaBasBridgePwrAlarm=hirmaBasBridgePwrAlarm, hirmaBasBridgeMessage=hirmaBasBridgeMessage, hirmaSelfTestGroupSQETest=hirmaSelfTestGroupSQETest, hirmaMibhCommIndex=hirmaMibhCommIndex, hirmaLuiSystemTable=hirmaLuiSystemTable, hirmaFilterPortOut=hirmaFilterPortOut, hirmaFlashUpdateName=hirmaFlashUpdateName, hirmaMibhCommAccess=hirmaMibhCommAccess, hirmaMibhAccessAccess=hirmaMibhAccessAccess, hirmaFilterTableEntry=hirmaFilterTableEntry, hirmaMibhTrapIPAddr=hirmaMibhTrapIPAddr, hirmaFilterID=hirmaFilterID, hirmaBasPortGroupID=hirmaBasPortGroupID, bridgemgmt=bridgemgmt, hirmaLoadSaveConAction=hirmaLoadSaveConAction, hirmaSelfTestGroupTable=hirmaSelfTestGroupTable, hirmaBasBridgeEventTable=hirmaBasBridgeEventTable, hirmaLuiUserName=hirmaLuiUserName, hirmaFilterSrc=hirmaFilterSrc, hirmaMibhTrapCommunity=hirmaMibhTrapCommunity, enterprises=enterprises, hirmaFilterPortIn=hirmaFilterPortIn, hirmaBasGroupEntry=hirmaBasGroupEntry, hirmaLuiGatewayIPAddr=hirmaLuiGatewayIPAddr, hirmaMibhAccessTable=hirmaMibhAccessTable, hirmaSelfTestBridgeResetType=hirmaSelfTestBridgeResetType, hirmaBasGroupTable=hirmaBasGroupTable, hirmaBasGroupName=hirmaBasGroupName, hirmaMibhAccessCommIndex=hirmaMibhAccessCommIndex, hirmaSelfTestCapability=hirmaSelfTestCapability)
