#
# PySNMP MIB module OVERLAND-NEXTGEN (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/OVERLAND-NEXTGEN
# Produced by pysmi-0.3.4 at Mon Apr 29 20:26:38 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, ObjectIdentifier, Integer = mibBuilder.importSymbols("ASN1", "OctetString", "ObjectIdentifier", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
SingleValueConstraint, ValueRangeConstraint, ConstraintsUnion, ValueSizeConstraint, ConstraintsIntersection = mibBuilder.importSymbols("ASN1-REFINEMENT", "SingleValueConstraint", "ValueRangeConstraint", "ConstraintsUnion", "ValueSizeConstraint", "ConstraintsIntersection")
ModuleCompliance, NotificationGroup, ObjectGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup", "ObjectGroup")
MibIdentifier, MibScalar, MibTable, MibTableRow, MibTableColumn, Counter64, NotificationType, Unsigned32, IpAddress, Integer32, Bits, ObjectIdentity, Counter32, Gauge32, ModuleIdentity, TimeTicks, iso = mibBuilder.importSymbols("SNMPv2-SMI", "MibIdentifier", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Counter64", "NotificationType", "Unsigned32", "IpAddress", "Integer32", "Bits", "ObjectIdentity", "Counter32", "Gauge32", "ModuleIdentity", "TimeTicks", "iso")
DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention")
overlandGlobalRegModule = ModuleIdentity((1, 3, 6, 1, 4, 1, 3351, 1, 1, 1, 1))
if mibBuilder.loadTexts: overlandGlobalRegModule.setLastUpdated('9807090845Z')
if mibBuilder.loadTexts: overlandGlobalRegModule.setOrganization('Overland Data, Inc.')
overlandRoot = MibIdentifier((1, 3, 6, 1, 4, 1, 3351, 1))
overlandReg = MibIdentifier((1, 3, 6, 1, 4, 1, 3351, 1, 1))
overlandGeneric = MibIdentifier((1, 3, 6, 1, 4, 1, 3351, 1, 2))
overlandProducts = MibIdentifier((1, 3, 6, 1, 4, 1, 3351, 1, 3))
overlandCaps = MibIdentifier((1, 3, 6, 1, 4, 1, 3351, 1, 4))
overlandReqs = MibIdentifier((1, 3, 6, 1, 4, 1, 3351, 1, 5))
overlandExpr = MibIdentifier((1, 3, 6, 1, 4, 1, 3351, 1, 6))
overlandModules = MibIdentifier((1, 3, 6, 1, 4, 1, 3351, 1, 1, 1))
overlandNextGen = MibIdentifier((1, 3, 6, 1, 4, 1, 3351, 1, 3, 2))
overlandNextGenActions = MibIdentifier((1, 3, 6, 1, 4, 1, 3351, 1, 3, 2, 1))
overlandNextGenStatistics = MibIdentifier((1, 3, 6, 1, 4, 1, 3351, 1, 3, 2, 2))
overlandNextGenState = MibIdentifier((1, 3, 6, 1, 4, 1, 3351, 1, 3, 2, 3))
overlandNextGenComponents = MibIdentifier((1, 3, 6, 1, 4, 1, 3351, 1, 3, 2, 4))
overlandNextGenAttributes = MibIdentifier((1, 3, 6, 1, 4, 1, 3351, 1, 3, 2, 5))
overlandNextGenEvents = MibIdentifier((1, 3, 6, 1, 4, 1, 3351, 1, 3, 2, 6))
overlandNextGenGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 3351, 1, 3, 2, 7))
overlandLoopback = MibScalar((1, 3, 6, 1, 4, 1, 3351, 1, 3, 2, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: overlandLoopback.setStatus('current')
overlandActionGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 3351, 1, 3, 2, 7, 1)).setObjects(("OVERLAND-NEXTGEN", "overlandLoopback"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    overlandActionGroup = overlandActionGroup.setStatus('current')
driveStatusTable = MibTable((1, 3, 6, 1, 4, 1, 3351, 1, 3, 2, 3, 1), )
if mibBuilder.loadTexts: driveStatusTable.setStatus('current')
driveStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3351, 1, 3, 2, 3, 1, 1), ).setIndexNames((0, "OVERLAND-NEXTGEN", "dstIndex"))
if mibBuilder.loadTexts: driveStatusEntry.setStatus('current')
dstRowValid = MibTableColumn((1, 3, 6, 1, 4, 1, 3351, 1, 3, 2, 3, 1, 1, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dstRowValid.setStatus('current')
dstIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3351, 1, 3, 2, 3, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dstIndex.setStatus('current')
dstState = MibTableColumn((1, 3, 6, 1, 4, 1, 3351, 1, 3, 2, 3, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4))).clone(namedValues=NamedValues(("initializedNoError", 0), ("initializedWithError", 1), ("notInitialized", 2), ("notInstalled", 3), ("notInserted", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dstState.setStatus('current')
dstMotion = MibTableColumn((1, 3, 6, 1, 4, 1, 3351, 1, 3, 2, 3, 1, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dstMotion.setStatus('current')
dstCodeRevDrive = MibTableColumn((1, 3, 6, 1, 4, 1, 3351, 1, 3, 2, 3, 1, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dstCodeRevDrive.setStatus('current')
dstCodeRevController = MibTableColumn((1, 3, 6, 1, 4, 1, 3351, 1, 3, 2, 3, 1, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dstCodeRevController.setStatus('current')
dstScsiId = MibTableColumn((1, 3, 6, 1, 4, 1, 3351, 1, 3, 2, 3, 1, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 15))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dstScsiId.setStatus('current')
dstSerialNum = MibTableColumn((1, 3, 6, 1, 4, 1, 3351, 1, 3, 2, 3, 1, 1, 8), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dstSerialNum.setStatus('current')
dstCleanRequested = MibTableColumn((1, 3, 6, 1, 4, 1, 3351, 1, 3, 2, 3, 1, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("cleanNotNeeded", 0), ("cleanNeeded", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dstCleanRequested.setStatus('current')
libraryStatusTable = MibTable((1, 3, 6, 1, 4, 1, 3351, 1, 3, 2, 3, 2), )
if mibBuilder.loadTexts: libraryStatusTable.setStatus('current')
libraryStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3351, 1, 3, 2, 3, 2, 1), ).setIndexNames((0, "OVERLAND-NEXTGEN", "lstIndex"))
if mibBuilder.loadTexts: libraryStatusEntry.setStatus('current')
lstIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3351, 1, 3, 2, 3, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lstIndex.setStatus('current')
lstConfig = MibTableColumn((1, 3, 6, 1, 4, 1, 3351, 1, 3, 2, 3, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("standalone", 0), ("multimodule", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lstConfig.setStatus('current')
lstScsiId = MibTableColumn((1, 3, 6, 1, 4, 1, 3351, 1, 3, 2, 3, 2, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 15))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lstScsiId.setStatus('current')
lstStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3351, 1, 3, 2, 3, 2, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lstStatus.setStatus('current')
lstChangerStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3351, 1, 3, 2, 3, 2, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lstChangerStatus.setStatus('current')
lstLibraryState = MibTableColumn((1, 3, 6, 1, 4, 1, 3351, 1, 3, 2, 3, 2, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("initializing", 0), ("online", 1), ("offline", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lstLibraryState.setStatus('current')
errorTable = MibTable((1, 3, 6, 1, 4, 1, 3351, 1, 3, 2, 3, 3), )
if mibBuilder.loadTexts: errorTable.setStatus('current')
errorEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3351, 1, 3, 2, 3, 3, 1), ).setIndexNames((0, "OVERLAND-NEXTGEN", "errIndex"))
if mibBuilder.loadTexts: errorEntry.setStatus('current')
errIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3351, 1, 3, 2, 3, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1))).setMaxAccess("readonly")
if mibBuilder.loadTexts: errIndex.setStatus('current')
errCode = MibTableColumn((1, 3, 6, 1, 4, 1, 3351, 1, 3, 2, 3, 3, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: errCode.setStatus('current')
errSeverity = MibTableColumn((1, 3, 6, 1, 4, 1, 3351, 1, 3, 2, 3, 3, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("informational", 0), ("mild", 1), ("hard", 2), ("severe", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: errSeverity.setStatus('current')
errMsg = MibTableColumn((1, 3, 6, 1, 4, 1, 3351, 1, 3, 2, 3, 3, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: errMsg.setStatus('current')
errActionMsg = MibTableColumn((1, 3, 6, 1, 4, 1, 3351, 1, 3, 2, 3, 3, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: errActionMsg.setStatus('current')
overlandStateGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 3351, 1, 3, 2, 7, 3)).setObjects(("OVERLAND-NEXTGEN", "errIndex"), ("OVERLAND-NEXTGEN", "errCode"), ("OVERLAND-NEXTGEN", "errSeverity"), ("OVERLAND-NEXTGEN", "errMsg"), ("OVERLAND-NEXTGEN", "errActionMsg"), ("OVERLAND-NEXTGEN", "dstRowValid"), ("OVERLAND-NEXTGEN", "dstIndex"), ("OVERLAND-NEXTGEN", "dstState"), ("OVERLAND-NEXTGEN", "dstMotion"), ("OVERLAND-NEXTGEN", "dstCodeRevDrive"), ("OVERLAND-NEXTGEN", "dstCodeRevController"), ("OVERLAND-NEXTGEN", "dstScsiId"), ("OVERLAND-NEXTGEN", "dstSerialNum"), ("OVERLAND-NEXTGEN", "dstCleanRequested"), ("OVERLAND-NEXTGEN", "lstIndex"), ("OVERLAND-NEXTGEN", "lstConfig"), ("OVERLAND-NEXTGEN", "lstScsiId"), ("OVERLAND-NEXTGEN", "lstStatus"), ("OVERLAND-NEXTGEN", "lstChangerStatus"), ("OVERLAND-NEXTGEN", "lstLibraryState"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    overlandStateGroup = overlandStateGroup.setStatus('current')
numModules = MibScalar((1, 3, 6, 1, 4, 1, 3351, 1, 3, 2, 5, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 256))).setMaxAccess("readonly")
if mibBuilder.loadTexts: numModules.setStatus('current')
numBins = MibScalar((1, 3, 6, 1, 4, 1, 3351, 1, 3, 2, 5, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 256))).setMaxAccess("readonly")
if mibBuilder.loadTexts: numBins.setStatus('current')
numDrives = MibScalar((1, 3, 6, 1, 4, 1, 3351, 1, 3, 2, 5, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 128))).setMaxAccess("readonly")
if mibBuilder.loadTexts: numDrives.setStatus('current')
numMailSlots = MibScalar((1, 3, 6, 1, 4, 1, 3351, 1, 3, 2, 5, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 15))).setMaxAccess("readonly")
if mibBuilder.loadTexts: numMailSlots.setStatus('current')
moduleGeometryTable = MibTable((1, 3, 6, 1, 4, 1, 3351, 1, 3, 2, 5, 5), )
if mibBuilder.loadTexts: moduleGeometryTable.setStatus('current')
moduleGeometryEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3351, 1, 3, 2, 5, 5, 1), ).setIndexNames((0, "OVERLAND-NEXTGEN", "modIndex"))
if mibBuilder.loadTexts: moduleGeometryEntry.setStatus('current')
modDesc = MibTableColumn((1, 3, 6, 1, 4, 1, 3351, 1, 3, 2, 5, 5, 1, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: modDesc.setStatus('current')
modIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3351, 1, 3, 2, 5, 5, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 7), ValueRangeConstraint(8, 8), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: modIndex.setStatus('current')
modAttached = MibTableColumn((1, 3, 6, 1, 4, 1, 3351, 1, 3, 2, 5, 5, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("isNotAttached", 0), ("isAttached", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: modAttached.setStatus('current')
modStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3351, 1, 3, 2, 5, 5, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: modStatus.setStatus('current')
modConfig = MibTableColumn((1, 3, 6, 1, 4, 1, 3351, 1, 3, 2, 5, 5, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("unknown", 0), ("lightning", 1), ("thunder", 2), ("invalid", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: modConfig.setStatus('current')
modFwRev = MibTableColumn((1, 3, 6, 1, 4, 1, 3351, 1, 3, 2, 5, 5, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: modFwRev.setStatus('current')
modNumBins = MibTableColumn((1, 3, 6, 1, 4, 1, 3351, 1, 3, 2, 5, 5, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: modNumBins.setStatus('current')
modNumDrives = MibTableColumn((1, 3, 6, 1, 4, 1, 3351, 1, 3, 2, 5, 5, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: modNumDrives.setStatus('current')
modNumMailSlots = MibTableColumn((1, 3, 6, 1, 4, 1, 3351, 1, 3, 2, 5, 5, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: modNumMailSlots.setStatus('current')
overlandAttributesGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 3351, 1, 3, 2, 7, 4)).setObjects(("OVERLAND-NEXTGEN", "numModules"), ("OVERLAND-NEXTGEN", "numBins"), ("OVERLAND-NEXTGEN", "numDrives"), ("OVERLAND-NEXTGEN", "numMailSlots"), ("OVERLAND-NEXTGEN", "modDesc"), ("OVERLAND-NEXTGEN", "modIndex"), ("OVERLAND-NEXTGEN", "modAttached"), ("OVERLAND-NEXTGEN", "modStatus"), ("OVERLAND-NEXTGEN", "modConfig"), ("OVERLAND-NEXTGEN", "modFwRev"), ("OVERLAND-NEXTGEN", "modNumBins"), ("OVERLAND-NEXTGEN", "modNumDrives"), ("OVERLAND-NEXTGEN", "modNumMailSlots"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    overlandAttributesGroup = overlandAttributesGroup.setStatus('current')
eventDoorOpen = NotificationType((1, 3, 6, 1, 4, 1, 3351, 1, 3, 2, 6, 1))
if mibBuilder.loadTexts: eventDoorOpen.setStatus('current')
eventMailSlotAccessed = NotificationType((1, 3, 6, 1, 4, 1, 3351, 1, 3, 2, 6, 2))
if mibBuilder.loadTexts: eventMailSlotAccessed.setStatus('current')
eventHardFault = NotificationType((1, 3, 6, 1, 4, 1, 3351, 1, 3, 2, 6, 3))
if mibBuilder.loadTexts: eventHardFault.setStatus('current')
eventSlaveFailed = NotificationType((1, 3, 6, 1, 4, 1, 3351, 1, 3, 2, 6, 4))
if mibBuilder.loadTexts: eventSlaveFailed.setStatus('current')
eventPowerSupplyFailed = NotificationType((1, 3, 6, 1, 4, 1, 3351, 1, 3, 2, 6, 5))
if mibBuilder.loadTexts: eventPowerSupplyFailed.setStatus('current')
eventRequestDriveClean = NotificationType((1, 3, 6, 1, 4, 1, 3351, 1, 3, 2, 6, 6))
if mibBuilder.loadTexts: eventRequestDriveClean.setStatus('current')
eventFanStalled = NotificationType((1, 3, 6, 1, 4, 1, 3351, 1, 3, 2, 6, 7))
if mibBuilder.loadTexts: eventFanStalled.setStatus('current')
eventDriveError = NotificationType((1, 3, 6, 1, 4, 1, 3351, 1, 3, 2, 6, 8))
if mibBuilder.loadTexts: eventDriveError.setStatus('current')
eventDriveRemoved = NotificationType((1, 3, 6, 1, 4, 1, 3351, 1, 3, 2, 6, 9))
if mibBuilder.loadTexts: eventDriveRemoved.setStatus('current')
eventSlaveRemoved = NotificationType((1, 3, 6, 1, 4, 1, 3351, 1, 3, 2, 6, 10))
if mibBuilder.loadTexts: eventSlaveRemoved.setStatus('current')
eventFailedOver = NotificationType((1, 3, 6, 1, 4, 1, 3351, 1, 3, 2, 6, 11))
if mibBuilder.loadTexts: eventFailedOver.setStatus('current')
eventLoaderRetriesExcessive = NotificationType((1, 3, 6, 1, 4, 1, 3351, 1, 3, 2, 6, 12))
if mibBuilder.loadTexts: eventLoaderRetriesExcessive.setStatus('current')
overlandNotificationGroup = NotificationGroup((1, 3, 6, 1, 4, 1, 3351, 1, 3, 2, 7, 7)).setObjects(("OVERLAND-NEXTGEN", "eventDoorOpen"), ("OVERLAND-NEXTGEN", "eventMailSlotAccessed"), ("OVERLAND-NEXTGEN", "eventHardFault"), ("OVERLAND-NEXTGEN", "eventSlaveFailed"), ("OVERLAND-NEXTGEN", "eventPowerSupplyFailed"), ("OVERLAND-NEXTGEN", "eventRequestDriveClean"), ("OVERLAND-NEXTGEN", "eventFanStalled"), ("OVERLAND-NEXTGEN", "eventDriveError"), ("OVERLAND-NEXTGEN", "eventDriveRemoved"), ("OVERLAND-NEXTGEN", "eventSlaveRemoved"), ("OVERLAND-NEXTGEN", "eventFailedOver"), ("OVERLAND-NEXTGEN", "eventLoaderRetriesExcessive"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    overlandNotificationGroup = overlandNotificationGroup.setStatus('current')
mibBuilder.exportSymbols("OVERLAND-NEXTGEN", dstIndex=dstIndex, overlandGeneric=overlandGeneric, overlandModules=overlandModules, overlandNextGenGroups=overlandNextGenGroups, driveStatusTable=driveStatusTable, libraryStatusTable=libraryStatusTable, lstStatus=lstStatus, errActionMsg=errActionMsg, dstRowValid=dstRowValid, modStatus=modStatus, moduleGeometryEntry=moduleGeometryEntry, overlandAttributesGroup=overlandAttributesGroup, eventFailedOver=eventFailedOver, eventSlaveRemoved=eventSlaveRemoved, errMsg=errMsg, errCode=errCode, eventPowerSupplyFailed=eventPowerSupplyFailed, overlandLoopback=overlandLoopback, lstScsiId=lstScsiId, overlandNextGenState=overlandNextGenState, lstLibraryState=lstLibraryState, modNumDrives=modNumDrives, eventDriveRemoved=eventDriveRemoved, dstScsiId=dstScsiId, dstCleanRequested=dstCleanRequested, overlandNextGenComponents=overlandNextGenComponents, numBins=numBins, errSeverity=errSeverity, overlandRoot=overlandRoot, eventHardFault=eventHardFault, eventDoorOpen=eventDoorOpen, overlandNextGenStatistics=overlandNextGenStatistics, overlandNotificationGroup=overlandNotificationGroup, modIndex=modIndex, lstChangerStatus=lstChangerStatus, dstSerialNum=dstSerialNum, libraryStatusEntry=libraryStatusEntry, overlandNextGenAttributes=overlandNextGenAttributes, modConfig=modConfig, dstState=dstState, lstConfig=lstConfig, modNumBins=modNumBins, lstIndex=lstIndex, overlandProducts=overlandProducts, numMailSlots=numMailSlots, eventDriveError=eventDriveError, overlandExpr=overlandExpr, modNumMailSlots=modNumMailSlots, errIndex=errIndex, eventSlaveFailed=eventSlaveFailed, eventFanStalled=eventFanStalled, errorEntry=errorEntry, numModules=numModules, overlandReg=overlandReg, PYSNMP_MODULE_ID=overlandGlobalRegModule, overlandGlobalRegModule=overlandGlobalRegModule, overlandNextGenActions=overlandNextGenActions, eventMailSlotAccessed=eventMailSlotAccessed, eventLoaderRetriesExcessive=eventLoaderRetriesExcessive, modAttached=modAttached, overlandReqs=overlandReqs, overlandStateGroup=overlandStateGroup, overlandNextGen=overlandNextGen, driveStatusEntry=driveStatusEntry, modFwRev=modFwRev, numDrives=numDrives, modDesc=modDesc, dstCodeRevController=dstCodeRevController, dstCodeRevDrive=dstCodeRevDrive, eventRequestDriveClean=eventRequestDriveClean, dstMotion=dstMotion, errorTable=errorTable, moduleGeometryTable=moduleGeometryTable, overlandNextGenEvents=overlandNextGenEvents, overlandActionGroup=overlandActionGroup, overlandCaps=overlandCaps)
