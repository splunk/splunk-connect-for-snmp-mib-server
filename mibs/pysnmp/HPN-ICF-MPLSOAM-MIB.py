#
# PySNMP MIB module HPN-ICF-MPLSOAM-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/HPN-ICF-MPLSOAM-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 19:28:12 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, OctetString, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "Integer", "OctetString", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
SingleValueConstraint, ValueSizeConstraint, ConstraintsIntersection, ConstraintsUnion, ValueRangeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "SingleValueConstraint", "ValueSizeConstraint", "ConstraintsIntersection", "ConstraintsUnion", "ValueRangeConstraint")
hpnicfCommon, = mibBuilder.importSymbols("HPN-ICF-OID-MIB", "hpnicfCommon")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
MibScalar, MibTable, MibTableRow, MibTableColumn, ObjectIdentity, Counter32, Unsigned32, ModuleIdentity, IpAddress, MibIdentifier, Gauge32, Bits, Integer32, NotificationType, iso, Counter64, TimeTicks = mibBuilder.importSymbols("SNMPv2-SMI", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "ObjectIdentity", "Counter32", "Unsigned32", "ModuleIdentity", "IpAddress", "MibIdentifier", "Gauge32", "Bits", "Integer32", "NotificationType", "iso", "Counter64", "TimeTicks")
DisplayString, TruthValue, RowStatus, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TruthValue", "RowStatus", "TextualConvention")
hpnicfMplsOam = ModuleIdentity((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 79))
if mibBuilder.loadTexts: hpnicfMplsOam.setLastUpdated('200703310000Z')
if mibBuilder.loadTexts: hpnicfMplsOam.setOrganization('')
class HpnicfMplsOAMDefectType(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11))
    namedValues = NamedValues(("dServer", 1), ("dPeerMe", 2), ("dLOCV", 3), ("dTTSIMismatch", 4), ("dTTSIMismerge", 5), ("dExcess", 6), ("dUnknown", 7), ("dRlsnDown", 8), ("dLspDown", 9), ("dME", 10), ("noDefect", 11))

class HpnicfMplsOAMDetectFreq(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))
    namedValues = NamedValues(("ffd10ms", 1), ("ffd20ms", 2), ("ffd50ms", 3), ("ffd100ms", 4), ("ffd200ms", 5), ("ffd500ms", 6), ("cv1000ms", 7))

hpnicfMplsOamScalarGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 79, 1))
hpnicfMplsOamCapability = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 79, 1, 1), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpnicfMplsOamCapability.setStatus('current')
hpnicfMplsOamTrapOpen = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 79, 1, 2), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpnicfMplsOamTrapOpen.setStatus('current')
hpnicfMplsOamTable = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 79, 2))
hpnicfMplsOamIgrTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 79, 2, 1), )
if mibBuilder.loadTexts: hpnicfMplsOamIgrTable.setStatus('current')
hpnicfMplsOamIgrEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 79, 2, 1, 1), ).setIndexNames((0, "HPN-ICF-MPLSOAM-MIB", "hpnicfMplsOamIgrIndex"))
if mibBuilder.loadTexts: hpnicfMplsOamIgrEntry.setStatus('current')
hpnicfMplsOamIgrIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 79, 2, 1, 1, 1), Unsigned32())
if mibBuilder.loadTexts: hpnicfMplsOamIgrIndex.setStatus('current')
hpnicfMplsOamIgrLspName = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 79, 2, 1, 1, 2), OctetString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfMplsOamIgrLspName.setStatus('current')
hpnicfMplsOamIgrDetectType = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 79, 2, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("cv", 1), ("ffd", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfMplsOamIgrDetectType.setStatus('current')
hpnicfMplsOamIgrDetectFreq = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 79, 2, 1, 1, 4), HpnicfMplsOAMDetectFreq()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfMplsOamIgrDetectFreq.setStatus('current')
hpnicfMplsOamIgrRevType = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 79, 2, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("private", 1), ("share", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfMplsOamIgrRevType.setStatus('current')
hpnicfMplsOamIgrRevLspName = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 79, 2, 1, 1, 6), OctetString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfMplsOamIgrRevLspName.setStatus('current')
hpnicfMplsOamIgrLspId = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 79, 2, 1, 1, 7), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfMplsOamIgrLspId.setStatus('current')
hpnicfMplsOamIgrEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 79, 2, 1, 1, 8), TruthValue().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfMplsOamIgrEnable.setStatus('current')
hpnicfMplsOamIgrDefectType = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 79, 2, 1, 1, 9), HpnicfMplsOAMDefectType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfMplsOamIgrDefectType.setStatus('current')
hpnicfMplsOamIgrRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 79, 2, 1, 1, 10), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfMplsOamIgrRowStatus.setStatus('current')
hpnicfMplsOamEgrTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 79, 2, 2), )
if mibBuilder.loadTexts: hpnicfMplsOamEgrTable.setStatus('current')
hpnicfMplsOamEgrEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 79, 2, 2, 1), ).setIndexNames((0, "HPN-ICF-MPLSOAM-MIB", "hpnicfMplsOamEgrIndex"))
if mibBuilder.loadTexts: hpnicfMplsOamEgrEntry.setStatus('current')
hpnicfMplsOamEgrIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 79, 2, 2, 1, 1), Unsigned32())
if mibBuilder.loadTexts: hpnicfMplsOamEgrIndex.setStatus('current')
hpnicfMplsOamEgrLspName = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 79, 2, 2, 1, 2), OctetString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfMplsOamEgrLspName.setStatus('current')
hpnicfMplsOamEgrDetectType = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 79, 2, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("cv", 1), ("ffd", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfMplsOamEgrDetectType.setStatus('current')
hpnicfMplsOamEgrDetectFreq = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 79, 2, 2, 1, 4), HpnicfMplsOAMDetectFreq()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfMplsOamEgrDetectFreq.setStatus('current')
hpnicfMplsOamEgrRevType = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 79, 2, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("private", 1), ("share", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfMplsOamEgrRevType.setStatus('current')
hpnicfMplsOamEgrRevLspName = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 79, 2, 2, 1, 6), OctetString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfMplsOamEgrRevLspName.setStatus('current')
hpnicfMplsOamEgrLsrId = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 79, 2, 2, 1, 7), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfMplsOamEgrLsrId.setStatus('current')
hpnicfMplsOamEgrLspId = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 79, 2, 2, 1, 8), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfMplsOamEgrLspId.setStatus('current')
hpnicfMplsOamEgrEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 79, 2, 2, 1, 9), TruthValue().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfMplsOamEgrEnable.setStatus('current')
hpnicfMplsOamEgrDefectType = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 79, 2, 2, 1, 10), HpnicfMplsOAMDefectType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfMplsOamEgrDefectType.setStatus('current')
hpnicfMplsOamEgrRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 79, 2, 2, 1, 11), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfMplsOamEgrRowStatus.setStatus('current')
hpnicfMplsOamNotifications = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 79, 3))
hpnicfMplsOamIgrLSPOutDefect = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 79, 3, 1)).setObjects(("HPN-ICF-MPLSOAM-MIB", "hpnicfMplsOamIgrLspName"), ("HPN-ICF-MPLSOAM-MIB", "hpnicfMplsOamIgrDefectType"))
if mibBuilder.loadTexts: hpnicfMplsOamIgrLSPOutDefect.setStatus('current')
hpnicfMplsOamIgrLSPInDefect = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 79, 3, 2)).setObjects(("HPN-ICF-MPLSOAM-MIB", "hpnicfMplsOamIgrLspName"), ("HPN-ICF-MPLSOAM-MIB", "hpnicfMplsOamIgrDefectType"))
if mibBuilder.loadTexts: hpnicfMplsOamIgrLSPInDefect.setStatus('current')
hpnicfMplsOamEgrLSPOutDefect = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 79, 3, 3)).setObjects(("HPN-ICF-MPLSOAM-MIB", "hpnicfMplsOamEgrLspName"), ("HPN-ICF-MPLSOAM-MIB", "hpnicfMplsOamEgrDefectType"))
if mibBuilder.loadTexts: hpnicfMplsOamEgrLSPOutDefect.setStatus('current')
hpnicfMplsOamEgrLSPInDefect = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 79, 3, 4)).setObjects(("HPN-ICF-MPLSOAM-MIB", "hpnicfMplsOamEgrLspName"), ("HPN-ICF-MPLSOAM-MIB", "hpnicfMplsOamEgrDefectType"))
if mibBuilder.loadTexts: hpnicfMplsOamEgrLSPInDefect.setStatus('current')
mibBuilder.exportSymbols("HPN-ICF-MPLSOAM-MIB", HpnicfMplsOAMDetectFreq=HpnicfMplsOAMDetectFreq, hpnicfMplsOamEgrTable=hpnicfMplsOamEgrTable, hpnicfMplsOamIgrLspId=hpnicfMplsOamIgrLspId, hpnicfMplsOamIgrRowStatus=hpnicfMplsOamIgrRowStatus, hpnicfMplsOamCapability=hpnicfMplsOamCapability, hpnicfMplsOamEgrDetectType=hpnicfMplsOamEgrDetectType, hpnicfMplsOamEgrDefectType=hpnicfMplsOamEgrDefectType, hpnicfMplsOamIgrRevLspName=hpnicfMplsOamIgrRevLspName, PYSNMP_MODULE_ID=hpnicfMplsOam, hpnicfMplsOamIgrTable=hpnicfMplsOamIgrTable, hpnicfMplsOamTrapOpen=hpnicfMplsOamTrapOpen, hpnicfMplsOamIgrRevType=hpnicfMplsOamIgrRevType, hpnicfMplsOamEgrDetectFreq=hpnicfMplsOamEgrDetectFreq, hpnicfMplsOam=hpnicfMplsOam, hpnicfMplsOamIgrDetectType=hpnicfMplsOamIgrDetectType, hpnicfMplsOamEgrEntry=hpnicfMplsOamEgrEntry, hpnicfMplsOamEgrRevLspName=hpnicfMplsOamEgrRevLspName, hpnicfMplsOamIgrDetectFreq=hpnicfMplsOamIgrDetectFreq, hpnicfMplsOamEgrLspName=hpnicfMplsOamEgrLspName, hpnicfMplsOamIgrLSPInDefect=hpnicfMplsOamIgrLSPInDefect, hpnicfMplsOamEgrEnable=hpnicfMplsOamEgrEnable, hpnicfMplsOamIgrLspName=hpnicfMplsOamIgrLspName, hpnicfMplsOamEgrLsrId=hpnicfMplsOamEgrLsrId, hpnicfMplsOamIgrEnable=hpnicfMplsOamIgrEnable, hpnicfMplsOamIgrIndex=hpnicfMplsOamIgrIndex, hpnicfMplsOamIgrEntry=hpnicfMplsOamIgrEntry, hpnicfMplsOamEgrLSPOutDefect=hpnicfMplsOamEgrLSPOutDefect, HpnicfMplsOAMDefectType=HpnicfMplsOAMDefectType, hpnicfMplsOamIgrDefectType=hpnicfMplsOamIgrDefectType, hpnicfMplsOamEgrRevType=hpnicfMplsOamEgrRevType, hpnicfMplsOamEgrIndex=hpnicfMplsOamEgrIndex, hpnicfMplsOamEgrLSPInDefect=hpnicfMplsOamEgrLSPInDefect, hpnicfMplsOamTable=hpnicfMplsOamTable, hpnicfMplsOamIgrLSPOutDefect=hpnicfMplsOamIgrLSPOutDefect, hpnicfMplsOamNotifications=hpnicfMplsOamNotifications, hpnicfMplsOamScalarGroup=hpnicfMplsOamScalarGroup, hpnicfMplsOamEgrRowStatus=hpnicfMplsOamEgrRowStatus, hpnicfMplsOamEgrLspId=hpnicfMplsOamEgrLspId)
