#
# PySNMP MIB module TUBS-IBR-LINUX-NETFILTER-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/TUBS-IBR-LINUX-NETFILTER-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 21:20:29 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, Integer, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "OctetString", "Integer", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueRangeConstraint, ConstraintsUnion, SingleValueConstraint, ValueSizeConstraint, ConstraintsIntersection = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueRangeConstraint", "ConstraintsUnion", "SingleValueConstraint", "ValueSizeConstraint", "ConstraintsIntersection")
InetAddress, InetAddressPrefixLength, InetAddressType = mibBuilder.importSymbols("INET-ADDRESS-MIB", "InetAddress", "InetAddressPrefixLength", "InetAddressType")
SnmpAdminString, = mibBuilder.importSymbols("SNMP-FRAMEWORK-MIB", "SnmpAdminString")
ModuleCompliance, NotificationGroup, ObjectGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup", "ObjectGroup")
Bits, MibScalar, MibTable, MibTableRow, MibTableColumn, Integer32, Counter64, Counter32, MibIdentifier, iso, Gauge32, Unsigned32, TimeTicks, ModuleIdentity, ObjectIdentity, NotificationType, IpAddress = mibBuilder.importSymbols("SNMPv2-SMI", "Bits", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Integer32", "Counter64", "Counter32", "MibIdentifier", "iso", "Gauge32", "Unsigned32", "TimeTicks", "ModuleIdentity", "ObjectIdentity", "NotificationType", "IpAddress")
TruthValue, DisplayString, TimeStamp, TextualConvention, RowStatus, StorageType = mibBuilder.importSymbols("SNMPv2-TC", "TruthValue", "DisplayString", "TimeStamp", "TextualConvention", "RowStatus", "StorageType")
ibr, = mibBuilder.importSymbols("TUBS-SMI", "ibr")
lnfMIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 1575, 1, 13))
lnfMIB.setRevisions(('2002-07-26 00:00',))
if mibBuilder.loadTexts: lnfMIB.setLastUpdated('200207230000Z')
if mibBuilder.loadTexts: lnfMIB.setOrganization('TU Braunschweig')
lnfObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 1575, 1, 13, 1))
lnfTraps = MibIdentifier((1, 3, 6, 1, 4, 1, 1575, 1, 13, 2))
lnfConformance = MibIdentifier((1, 3, 6, 1, 4, 1, 1575, 1, 13, 3))
class LnfTarget(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))
    namedValues = NamedValues(("none", 1), ("other", 2), ("drop", 3), ("accept", 4), ("queue", 5), ("return", 6), ("chain", 7))

lnfLastChange = MibScalar((1, 3, 6, 1, 4, 1, 1575, 1, 13, 1, 1), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lnfLastChange.setStatus('current')
lnfTableTable = MibTable((1, 3, 6, 1, 4, 1, 1575, 1, 13, 1, 2), )
if mibBuilder.loadTexts: lnfTableTable.setStatus('current')
lnfTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1575, 1, 13, 1, 2, 1), ).setIndexNames((0, "TUBS-IBR-LINUX-NETFILTER-MIB", "lnfTableAddressType"), (0, "TUBS-IBR-LINUX-NETFILTER-MIB", "lnfTableName"))
if mibBuilder.loadTexts: lnfTableEntry.setStatus('current')
lnfTableAddressType = MibTableColumn((1, 3, 6, 1, 4, 1, 1575, 1, 13, 1, 2, 1, 1), InetAddressType().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("ipv4", 1), ("ipv6", 2))))
if mibBuilder.loadTexts: lnfTableAddressType.setStatus('current')
lnfTableName = MibTableColumn((1, 3, 6, 1, 4, 1, 1575, 1, 13, 1, 2, 1, 2), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 32)))
if mibBuilder.loadTexts: lnfTableName.setStatus('current')
lnfTableLastChange = MibTableColumn((1, 3, 6, 1, 4, 1, 1575, 1, 13, 1, 2, 1, 3), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lnfTableLastChange.setStatus('current')
lnfChainTable = MibTable((1, 3, 6, 1, 4, 1, 1575, 1, 13, 1, 3), )
if mibBuilder.loadTexts: lnfChainTable.setStatus('current')
lnfChainEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1575, 1, 13, 1, 3, 1), ).setIndexNames((0, "TUBS-IBR-LINUX-NETFILTER-MIB", "lnfTableAddressType"), (0, "TUBS-IBR-LINUX-NETFILTER-MIB", "lnfTableName"), (0, "TUBS-IBR-LINUX-NETFILTER-MIB", "lnfChainName"))
if mibBuilder.loadTexts: lnfChainEntry.setStatus('current')
lnfChainName = MibTableColumn((1, 3, 6, 1, 4, 1, 1575, 1, 13, 1, 3, 1, 1), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 32)))
if mibBuilder.loadTexts: lnfChainName.setStatus('current')
lnfChainPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 1575, 1, 13, 1, 3, 1, 2), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lnfChainPackets.setStatus('current')
lnfChainOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 1575, 1, 13, 1, 3, 1, 3), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lnfChainOctets.setStatus('current')
lnfChainTarget = MibTableColumn((1, 3, 6, 1, 4, 1, 1575, 1, 13, 1, 3, 1, 4), LnfTarget().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(3, 4, 6))).clone(namedValues=NamedValues(("drop", 3), ("accept", 4), ("return", 6))).clone('return')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: lnfChainTarget.setStatus('current')
lnfChainLastChange = MibTableColumn((1, 3, 6, 1, 4, 1, 1575, 1, 13, 1, 3, 1, 5), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lnfChainLastChange.setStatus('current')
lnfChainStorage = MibTableColumn((1, 3, 6, 1, 4, 1, 1575, 1, 13, 1, 3, 1, 6), StorageType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: lnfChainStorage.setStatus('current')
lnfChainStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1575, 1, 13, 1, 3, 1, 7), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: lnfChainStatus.setStatus('current')
lnfRuleTable = MibTable((1, 3, 6, 1, 4, 1, 1575, 1, 13, 1, 4), )
if mibBuilder.loadTexts: lnfRuleTable.setStatus('current')
lnfRuleEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1575, 1, 13, 1, 4, 1), ).setIndexNames((0, "TUBS-IBR-LINUX-NETFILTER-MIB", "lnfTableAddressType"), (0, "TUBS-IBR-LINUX-NETFILTER-MIB", "lnfTableName"), (0, "TUBS-IBR-LINUX-NETFILTER-MIB", "lnfChainName"), (0, "TUBS-IBR-LINUX-NETFILTER-MIB", "lnfRuleIndex"))
if mibBuilder.loadTexts: lnfRuleEntry.setStatus('current')
lnfRuleIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1575, 1, 13, 1, 4, 1, 1), Unsigned32())
if mibBuilder.loadTexts: lnfRuleIndex.setStatus('current')
lnfRuleProtocol = MibTableColumn((1, 3, 6, 1, 4, 1, 1575, 1, 13, 1, 4, 1, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: lnfRuleProtocol.setStatus('current')
lnfRuleProtocolInv = MibTableColumn((1, 3, 6, 1, 4, 1, 1575, 1, 13, 1, 4, 1, 3), TruthValue().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: lnfRuleProtocolInv.setStatus('current')
lnfRuleSourceAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 1575, 1, 13, 1, 4, 1, 4), InetAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: lnfRuleSourceAddress.setStatus('current')
lnfRuleSourceAddressPrefixLength = MibTableColumn((1, 3, 6, 1, 4, 1, 1575, 1, 13, 1, 4, 1, 5), InetAddressPrefixLength()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: lnfRuleSourceAddressPrefixLength.setStatus('current')
lnfRuleSourceAddressInv = MibTableColumn((1, 3, 6, 1, 4, 1, 1575, 1, 13, 1, 4, 1, 6), TruthValue().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: lnfRuleSourceAddressInv.setStatus('current')
lnfRuleDestinationAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 1575, 1, 13, 1, 4, 1, 7), InetAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: lnfRuleDestinationAddress.setStatus('current')
lnfRuleDestinationAddressPrefixLength = MibTableColumn((1, 3, 6, 1, 4, 1, 1575, 1, 13, 1, 4, 1, 8), InetAddressPrefixLength()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: lnfRuleDestinationAddressPrefixLength.setStatus('current')
lnfRuleDestinationAddressInv = MibTableColumn((1, 3, 6, 1, 4, 1, 1575, 1, 13, 1, 4, 1, 9), TruthValue().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: lnfRuleDestinationAddressInv.setStatus('current')
lnfRuleInInterface = MibTableColumn((1, 3, 6, 1, 4, 1, 1575, 1, 13, 1, 4, 1, 10), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: lnfRuleInInterface.setStatus('current')
lnfRuleInInterfaceInv = MibTableColumn((1, 3, 6, 1, 4, 1, 1575, 1, 13, 1, 4, 1, 11), TruthValue().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: lnfRuleInInterfaceInv.setStatus('current')
lnfRuleOutInterface = MibTableColumn((1, 3, 6, 1, 4, 1, 1575, 1, 13, 1, 4, 1, 12), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: lnfRuleOutInterface.setStatus('current')
lnfRuleOutInterfaceInv = MibTableColumn((1, 3, 6, 1, 4, 1, 1575, 1, 13, 1, 4, 1, 13), TruthValue().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: lnfRuleOutInterfaceInv.setStatus('current')
lnfRuleFragment = MibTableColumn((1, 3, 6, 1, 4, 1, 1575, 1, 13, 1, 4, 1, 14), TruthValue().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: lnfRuleFragment.setStatus('current')
lnfRuleFragmentInv = MibTableColumn((1, 3, 6, 1, 4, 1, 1575, 1, 13, 1, 4, 1, 15), TruthValue().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: lnfRuleFragmentInv.setStatus('current')
lnfRulePackets = MibTableColumn((1, 3, 6, 1, 4, 1, 1575, 1, 13, 1, 4, 1, 16), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lnfRulePackets.setStatus('current')
lnfRuleOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 1575, 1, 13, 1, 4, 1, 17), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lnfRuleOctets.setStatus('current')
lnfRuleTarget = MibTableColumn((1, 3, 6, 1, 4, 1, 1575, 1, 13, 1, 4, 1, 18), LnfTarget().clone('none')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: lnfRuleTarget.setStatus('current')
lnfRuleTargetChain = MibTableColumn((1, 3, 6, 1, 4, 1, 1575, 1, 13, 1, 4, 1, 19), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: lnfRuleTargetChain.setStatus('current')
lnfRuleTrapEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 1575, 1, 13, 1, 4, 1, 20), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lnfRuleTrapEnable.setStatus('current')
lnfRuleLastChange = MibTableColumn((1, 3, 6, 1, 4, 1, 1575, 1, 13, 1, 4, 1, 21), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lnfRuleLastChange.setStatus('current')
lnfRuleStorage = MibTableColumn((1, 3, 6, 1, 4, 1, 1575, 1, 13, 1, 4, 1, 22), StorageType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: lnfRuleStorage.setStatus('current')
lnfRuleStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1575, 1, 13, 1, 4, 1, 23), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: lnfRuleStatus.setStatus('current')
lnfNotifications = MibIdentifier((1, 3, 6, 1, 4, 1, 1575, 1, 13, 2, 0))
lnfRuleMatch = NotificationType((1, 3, 6, 1, 4, 1, 1575, 1, 13, 2, 0, 1)).setObjects(("TUBS-IBR-LINUX-NETFILTER-MIB", "lnfRulePackets"), ("TUBS-IBR-LINUX-NETFILTER-MIB", "lnfRuleOctets"))
if mibBuilder.loadTexts: lnfRuleMatch.setStatus('current')
lnfCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 1575, 1, 13, 3, 1))
lnfGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 1575, 1, 13, 3, 2))
lnfCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 1575, 1, 13, 3, 1, 1)).setObjects(("TUBS-IBR-LINUX-NETFILTER-MIB", "lnfGeneralGroup"), ("TUBS-IBR-LINUX-NETFILTER-MIB", "lnfNotificationGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    lnfCompliance = lnfCompliance.setStatus('current')
lnfGeneralGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 1575, 1, 13, 3, 2, 1)).setObjects(("TUBS-IBR-LINUX-NETFILTER-MIB", "lnfLastChange"), ("TUBS-IBR-LINUX-NETFILTER-MIB", "lnfTableLastChange"), ("TUBS-IBR-LINUX-NETFILTER-MIB", "lnfChainPackets"), ("TUBS-IBR-LINUX-NETFILTER-MIB", "lnfChainOctets"), ("TUBS-IBR-LINUX-NETFILTER-MIB", "lnfChainTarget"), ("TUBS-IBR-LINUX-NETFILTER-MIB", "lnfChainLastChange"), ("TUBS-IBR-LINUX-NETFILTER-MIB", "lnfChainStorage"), ("TUBS-IBR-LINUX-NETFILTER-MIB", "lnfChainStatus"), ("TUBS-IBR-LINUX-NETFILTER-MIB", "lnfRuleProtocol"), ("TUBS-IBR-LINUX-NETFILTER-MIB", "lnfRuleProtocolInv"), ("TUBS-IBR-LINUX-NETFILTER-MIB", "lnfRuleSourceAddress"), ("TUBS-IBR-LINUX-NETFILTER-MIB", "lnfRuleSourceAddressPrefixLength"), ("TUBS-IBR-LINUX-NETFILTER-MIB", "lnfRuleSourceAddressInv"), ("TUBS-IBR-LINUX-NETFILTER-MIB", "lnfRuleDestinationAddress"), ("TUBS-IBR-LINUX-NETFILTER-MIB", "lnfRuleDestinationAddressPrefixLength"), ("TUBS-IBR-LINUX-NETFILTER-MIB", "lnfRuleDestinationAddressInv"), ("TUBS-IBR-LINUX-NETFILTER-MIB", "lnfRuleInInterface"), ("TUBS-IBR-LINUX-NETFILTER-MIB", "lnfRuleInInterfaceInv"), ("TUBS-IBR-LINUX-NETFILTER-MIB", "lnfRuleOutInterface"), ("TUBS-IBR-LINUX-NETFILTER-MIB", "lnfRuleOutInterfaceInv"), ("TUBS-IBR-LINUX-NETFILTER-MIB", "lnfRuleFragment"), ("TUBS-IBR-LINUX-NETFILTER-MIB", "lnfRuleFragmentInv"), ("TUBS-IBR-LINUX-NETFILTER-MIB", "lnfRulePackets"), ("TUBS-IBR-LINUX-NETFILTER-MIB", "lnfRuleOctets"), ("TUBS-IBR-LINUX-NETFILTER-MIB", "lnfRuleTarget"), ("TUBS-IBR-LINUX-NETFILTER-MIB", "lnfRuleTargetChain"), ("TUBS-IBR-LINUX-NETFILTER-MIB", "lnfRuleTrapEnable"), ("TUBS-IBR-LINUX-NETFILTER-MIB", "lnfRuleLastChange"), ("TUBS-IBR-LINUX-NETFILTER-MIB", "lnfRuleStorage"), ("TUBS-IBR-LINUX-NETFILTER-MIB", "lnfRuleStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    lnfGeneralGroup = lnfGeneralGroup.setStatus('current')
lnfNotificationGroup = NotificationGroup((1, 3, 6, 1, 4, 1, 1575, 1, 13, 3, 2, 2)).setObjects(("TUBS-IBR-LINUX-NETFILTER-MIB", "lnfRuleMatch"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    lnfNotificationGroup = lnfNotificationGroup.setStatus('current')
mibBuilder.exportSymbols("TUBS-IBR-LINUX-NETFILTER-MIB", lnfChainEntry=lnfChainEntry, lnfRuleOutInterface=lnfRuleOutInterface, lnfTableLastChange=lnfTableLastChange, lnfTableEntry=lnfTableEntry, lnfRuleEntry=lnfRuleEntry, lnfRuleDestinationAddress=lnfRuleDestinationAddress, lnfRuleProtocolInv=lnfRuleProtocolInv, LnfTarget=LnfTarget, lnfRuleTarget=lnfRuleTarget, lnfTableTable=lnfTableTable, lnfRuleProtocol=lnfRuleProtocol, lnfRuleSourceAddress=lnfRuleSourceAddress, lnfCompliances=lnfCompliances, lnfRuleOutInterfaceInv=lnfRuleOutInterfaceInv, lnfConformance=lnfConformance, lnfCompliance=lnfCompliance, lnfRuleStorage=lnfRuleStorage, lnfTableName=lnfTableName, lnfRuleInInterface=lnfRuleInInterface, lnfTraps=lnfTraps, lnfChainStatus=lnfChainStatus, lnfChainOctets=lnfChainOctets, lnfRuleOctets=lnfRuleOctets, lnfRuleTargetChain=lnfRuleTargetChain, lnfRuleSourceAddressPrefixLength=lnfRuleSourceAddressPrefixLength, lnfLastChange=lnfLastChange, lnfRuleTable=lnfRuleTable, lnfRuleSourceAddressInv=lnfRuleSourceAddressInv, lnfRuleFragment=lnfRuleFragment, lnfRuleStatus=lnfRuleStatus, lnfRuleMatch=lnfRuleMatch, lnfRulePackets=lnfRulePackets, lnfRuleTrapEnable=lnfRuleTrapEnable, lnfNotifications=lnfNotifications, lnfRuleInInterfaceInv=lnfRuleInInterfaceInv, lnfObjects=lnfObjects, lnfChainLastChange=lnfChainLastChange, lnfTableAddressType=lnfTableAddressType, lnfGeneralGroup=lnfGeneralGroup, lnfChainStorage=lnfChainStorage, lnfRuleDestinationAddressPrefixLength=lnfRuleDestinationAddressPrefixLength, lnfRuleDestinationAddressInv=lnfRuleDestinationAddressInv, lnfChainTarget=lnfChainTarget, lnfChainTable=lnfChainTable, lnfRuleLastChange=lnfRuleLastChange, PYSNMP_MODULE_ID=lnfMIB, lnfRuleFragmentInv=lnfRuleFragmentInv, lnfGroups=lnfGroups, lnfChainPackets=lnfChainPackets, lnfMIB=lnfMIB, lnfRuleIndex=lnfRuleIndex, lnfChainName=lnfChainName, lnfNotificationGroup=lnfNotificationGroup)
