#
# PySNMP MIB module FORE-BRIDGE-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/FORE-BRIDGE-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 19:00:49 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, ObjectIdentifier, OctetString = mibBuilder.importSymbols("ASN1", "Integer", "ObjectIdentifier", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsUnion, ValueSizeConstraint, ValueRangeConstraint, ConstraintsIntersection, SingleValueConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsUnion", "ValueSizeConstraint", "ValueRangeConstraint", "ConstraintsIntersection", "SingleValueConstraint")
BridgeId, = mibBuilder.importSymbols("BRIDGE-MIB", "BridgeId")
preDot1qVlanMIB, = mibBuilder.importSymbols("Fore-Common-MIB", "preDot1qVlanMIB")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
NotificationType, Counter64, MibScalar, MibTable, MibTableRow, MibTableColumn, iso, Unsigned32, ModuleIdentity, ObjectIdentity, TimeTicks, IpAddress, MibIdentifier, Bits, Counter32, Integer32, Gauge32 = mibBuilder.importSymbols("SNMPv2-SMI", "NotificationType", "Counter64", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "iso", "Unsigned32", "ModuleIdentity", "ObjectIdentity", "TimeTicks", "IpAddress", "MibIdentifier", "Bits", "Counter32", "Integer32", "Gauge32")
DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention")
foreBridgeExtensions = ModuleIdentity((1, 3, 6, 1, 4, 1, 326, 1, 8, 2))
if mibBuilder.loadTexts: foreBridgeExtensions.setLastUpdated('9911050000Z')
if mibBuilder.loadTexts: foreBridgeExtensions.setOrganization('FORE')
bridgeDataSource = MibScalar((1, 3, 6, 1, 4, 1, 326, 1, 8, 2, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bridgeDataSource.setStatus('current')
bridgeNumberOfEntities = MibScalar((1, 3, 6, 1, 4, 1, 326, 1, 8, 2, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bridgeNumberOfEntities.setStatus('current')
bridgeStpAtmPortTable = MibTable((1, 3, 6, 1, 4, 1, 326, 1, 8, 2, 3), )
if mibBuilder.loadTexts: bridgeStpAtmPortTable.setStatus('current')
bridgeStpAtmPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 326, 1, 8, 2, 3, 1), ).setIndexNames((0, "FORE-BRIDGE-MIB", "bridgeStpAtmPort"))
if mibBuilder.loadTexts: bridgeStpAtmPortEntry.setStatus('current')
bridgeStpAtmPort = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 1, 8, 2, 3, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 35))).setMaxAccess("readonly")
if mibBuilder.loadTexts: bridgeStpAtmPort.setStatus('current')
bridgeStpAtmPortPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 1, 8, 2, 3, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bridgeStpAtmPortPriority.setStatus('current')
bridgeStpAtmPortState = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 1, 8, 2, 3, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("disabled", 1), ("blocking", 2), ("listening", 3), ("learning", 4), ("forwarding", 5), ("broken", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: bridgeStpAtmPortState.setStatus('current')
bridgeStpAtmPortEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 1, 8, 2, 3, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bridgeStpAtmPortEnable.setStatus('current')
bridgeStpAtmPortPathCost = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 1, 8, 2, 3, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bridgeStpAtmPortPathCost.setStatus('current')
bridgeStpAtmPortDesignatedRoot = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 1, 8, 2, 3, 1, 6), BridgeId()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bridgeStpAtmPortDesignatedRoot.setStatus('current')
bridgeStpAtmPortDesignatedCost = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 1, 8, 2, 3, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: bridgeStpAtmPortDesignatedCost.setStatus('current')
bridgeStpAtmPortDesignatedBridge = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 1, 8, 2, 3, 1, 8), BridgeId()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bridgeStpAtmPortDesignatedBridge.setStatus('current')
bridgeStpAtmPortDesignatedPort = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 1, 8, 2, 3, 1, 9), OctetString().subtype(subtypeSpec=ValueSizeConstraint(2, 2)).setFixedLength(2)).setMaxAccess("readonly")
if mibBuilder.loadTexts: bridgeStpAtmPortDesignatedPort.setStatus('current')
bridgeStpAtmPortForwardTransitions = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 1, 8, 2, 3, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bridgeStpAtmPortForwardTransitions.setStatus('current')
bridgeStpEnable = MibScalar((1, 3, 6, 1, 4, 1, 326, 1, 8, 2, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bridgeStpEnable.setStatus('current')
mibBuilder.exportSymbols("FORE-BRIDGE-MIB", bridgeStpAtmPortEnable=bridgeStpAtmPortEnable, bridgeStpEnable=bridgeStpEnable, foreBridgeExtensions=foreBridgeExtensions, bridgeStpAtmPortDesignatedRoot=bridgeStpAtmPortDesignatedRoot, bridgeStpAtmPortDesignatedCost=bridgeStpAtmPortDesignatedCost, bridgeDataSource=bridgeDataSource, PYSNMP_MODULE_ID=foreBridgeExtensions, bridgeStpAtmPort=bridgeStpAtmPort, bridgeStpAtmPortPathCost=bridgeStpAtmPortPathCost, bridgeStpAtmPortDesignatedBridge=bridgeStpAtmPortDesignatedBridge, bridgeNumberOfEntities=bridgeNumberOfEntities, bridgeStpAtmPortTable=bridgeStpAtmPortTable, bridgeStpAtmPortEntry=bridgeStpAtmPortEntry, bridgeStpAtmPortState=bridgeStpAtmPortState, bridgeStpAtmPortPriority=bridgeStpAtmPortPriority, bridgeStpAtmPortDesignatedPort=bridgeStpAtmPortDesignatedPort, bridgeStpAtmPortForwardTransitions=bridgeStpAtmPortForwardTransitions)
