#
# PySNMP MIB module HH3C-LswMSTP-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/HH3C-LswMSTP-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 19:15:16 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, ObjectIdentifier, Integer = mibBuilder.importSymbols("ASN1", "OctetString", "ObjectIdentifier", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsUnion, ValueSizeConstraint, SingleValueConstraint, ConstraintsIntersection, ValueRangeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsUnion", "ValueSizeConstraint", "SingleValueConstraint", "ConstraintsIntersection", "ValueRangeConstraint")
dot1dStpPortEntry, dot1dStpPort = mibBuilder.importSymbols("BRIDGE-MIB", "dot1dStpPortEntry", "dot1dStpPort")
hh3clswCommon, = mibBuilder.importSymbols("HH3C-OID-MIB", "hh3clswCommon")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
IpAddress, MibScalar, MibTable, MibTableRow, MibTableColumn, Counter64, Counter32, MibIdentifier, NotificationType, Gauge32, ObjectIdentity, Unsigned32, ModuleIdentity, Integer32, TimeTicks, iso, Bits = mibBuilder.importSymbols("SNMPv2-SMI", "IpAddress", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Counter64", "Counter32", "MibIdentifier", "NotificationType", "Gauge32", "ObjectIdentity", "Unsigned32", "ModuleIdentity", "Integer32", "TimeTicks", "iso", "Bits")
TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString")
hh3cdot1sMstp = ModuleIdentity((1, 3, 6, 1, 4, 1, 25506, 8, 35, 14))
hh3cdot1sMstp.setRevisions(('2001-06-29 00:00',))
if mibBuilder.loadTexts: hh3cdot1sMstp.setLastUpdated('200106290000Z')
if mibBuilder.loadTexts: hh3cdot1sMstp.setOrganization('Hangzhou H3C Tech. Co., Ltd.')
class EnabledStatus(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2))
    namedValues = NamedValues(("enabled", 1), ("disabled", 2))

class BridgeId(OctetString):
    subtypeSpec = OctetString.subtypeSpec + ValueSizeConstraint(8, 8)
    fixedLength = 8

class Hh3cdot1sFormatStatus(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3))
    namedValues = NamedValues(("legacy", 1), ("dot1s", 2), ("auto", 3))

hh3cdot1sStpStatus = MibScalar((1, 3, 6, 1, 4, 1, 25506, 8, 35, 14, 1), EnabledStatus().clone(2)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hh3cdot1sStpStatus.setStatus('current')
hh3cdot1sStpForceVersion = MibScalar((1, 3, 6, 1, 4, 1, 25506, 8, 35, 14, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 2, 3))).clone(namedValues=NamedValues(("stp", 0), ("rstp", 2), ("mstp", 3))).clone('mstp')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hh3cdot1sStpForceVersion.setStatus('current')
hh3cdot1sStpDiameter = MibScalar((1, 3, 6, 1, 4, 1, 25506, 8, 35, 14, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(2, 7)).clone(7)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hh3cdot1sStpDiameter.setStatus('current')
hh3cdot1sMstBridgeMaxHops = MibScalar((1, 3, 6, 1, 4, 1, 25506, 8, 35, 14, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 40)).clone(20)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hh3cdot1sMstBridgeMaxHops.setStatus('current')
hh3cdot1sMstMasterBridgeID = MibScalar((1, 3, 6, 1, 4, 1, 25506, 8, 35, 14, 5), BridgeId()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cdot1sMstMasterBridgeID.setStatus('current')
hh3cdot1sMstMasterPathCost = MibScalar((1, 3, 6, 1, 4, 1, 25506, 8, 35, 14, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cdot1sMstMasterPathCost.setStatus('current')
hh3cdot1sMstBpduGuard = MibScalar((1, 3, 6, 1, 4, 1, 25506, 8, 35, 14, 7), EnabledStatus().clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hh3cdot1sMstBpduGuard.setStatus('current')
hh3cdot1sMstAdminFormatSelector = MibScalar((1, 3, 6, 1, 4, 1, 25506, 8, 35, 14, 8), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hh3cdot1sMstAdminFormatSelector.setStatus('current')
hh3cdot1sMstAdminRegionName = MibScalar((1, 3, 6, 1, 4, 1, 25506, 8, 35, 14, 9), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hh3cdot1sMstAdminRegionName.setStatus('current')
hh3cdot1sMstAdminRevisionLevel = MibScalar((1, 3, 6, 1, 4, 1, 25506, 8, 35, 14, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hh3cdot1sMstAdminRevisionLevel.setStatus('current')
hh3cdot1sMstOperFormatSelector = MibScalar((1, 3, 6, 1, 4, 1, 25506, 8, 35, 14, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cdot1sMstOperFormatSelector.setStatus('current')
hh3cdot1sMstOperRegionName = MibScalar((1, 3, 6, 1, 4, 1, 25506, 8, 35, 14, 12), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cdot1sMstOperRegionName.setStatus('current')
hh3cdot1sMstOperRevisionLevel = MibScalar((1, 3, 6, 1, 4, 1, 25506, 8, 35, 14, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cdot1sMstOperRevisionLevel.setStatus('current')
hh3cdot1sMstOperConfigDigest = MibScalar((1, 3, 6, 1, 4, 1, 25506, 8, 35, 14, 14), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cdot1sMstOperConfigDigest.setStatus('current')
hh3cdot1sMstRegionConfActive = MibScalar((1, 3, 6, 1, 4, 1, 25506, 8, 35, 14, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hh3cdot1sMstRegionConfActive.setStatus('current')
hh3cdot1sMstDefaultVlanAllo = MibScalar((1, 3, 6, 1, 4, 1, 25506, 8, 35, 14, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 65535))).clone(namedValues=NamedValues(("enable", 1), ("unused", 65535)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hh3cdot1sMstDefaultVlanAllo.setStatus('current')
hh3cdot1sMstDefaultRegionName = MibScalar((1, 3, 6, 1, 4, 1, 25506, 8, 35, 14, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 65535))).clone(namedValues=NamedValues(("enable", 1), ("unused", 65535)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hh3cdot1sMstDefaultRegionName.setStatus('current')
hh3cdot1sVIDAllocationTable = MibTable((1, 3, 6, 1, 4, 1, 25506, 8, 35, 14, 18), )
if mibBuilder.loadTexts: hh3cdot1sVIDAllocationTable.setStatus('current')
hh3cdot1sVIDAllocationEntry = MibTableRow((1, 3, 6, 1, 4, 1, 25506, 8, 35, 14, 18, 1), ).setIndexNames((0, "HH3C-LswMSTP-MIB", "hh3cdot1sMstVID"))
if mibBuilder.loadTexts: hh3cdot1sVIDAllocationEntry.setStatus('current')
hh3cdot1sMstVID = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 8, 35, 14, 18, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4094))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cdot1sMstVID.setStatus('current')
hh3cdot1sAdminMstID = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 8, 35, 14, 18, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 64))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hh3cdot1sAdminMstID.setStatus('current')
hh3cdot1sOperMstID = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 8, 35, 14, 18, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cdot1sOperMstID.setStatus('current')
hh3cdot1sInstanceTable = MibTable((1, 3, 6, 1, 4, 1, 25506, 8, 35, 14, 19), )
if mibBuilder.loadTexts: hh3cdot1sInstanceTable.setStatus('current')
hh3cdot1sInstanceEntry = MibTableRow((1, 3, 6, 1, 4, 1, 25506, 8, 35, 14, 19, 1), ).setIndexNames((0, "HH3C-LswMSTP-MIB", "hh3cdot1sInstanceID"))
if mibBuilder.loadTexts: hh3cdot1sInstanceEntry.setStatus('current')
hh3cdot1sInstanceID = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 8, 35, 14, 19, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cdot1sInstanceID.setStatus('current')
hh3cdot1sMstiBridgeID = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 8, 35, 14, 19, 1, 2), BridgeId()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cdot1sMstiBridgeID.setStatus('current')
hh3cdot1sMstiBridgePriority = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 8, 35, 14, 19, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 61440)).clone(32768)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hh3cdot1sMstiBridgePriority.setStatus('current')
hh3cdot1sMstiDesignedRoot = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 8, 35, 14, 19, 1, 4), BridgeId()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cdot1sMstiDesignedRoot.setStatus('current')
hh3cdot1sMstiRootPathCost = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 8, 35, 14, 19, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cdot1sMstiRootPathCost.setStatus('current')
hh3cdot1sMstiRootPort = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 8, 35, 14, 19, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cdot1sMstiRootPort.setStatus('current')
hh3cdot1sMstiRootType = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 8, 35, 14, 19, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("normal", 0), ("secondary", 1), ("primary", 2))).clone('normal')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hh3cdot1sMstiRootType.setStatus('current')
hh3cdot1sMstiRemainingHops = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 8, 35, 14, 19, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cdot1sMstiRemainingHops.setStatus('current')
hh3cdot1sMstiAdminMappedVlanListLow = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 8, 35, 14, 19, 1, 9), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 256))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cdot1sMstiAdminMappedVlanListLow.setStatus('current')
hh3cdot1sMstiAdminMappedVlanListHigh = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 8, 35, 14, 19, 1, 10), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 256))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cdot1sMstiAdminMappedVlanListHigh.setStatus('current')
hh3cdot1sMstiOperMappedVlanListLow = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 8, 35, 14, 19, 1, 11), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 256))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cdot1sMstiOperMappedVlanListLow.setStatus('current')
hh3cdot1sMstiOperMappedVlanListHigh = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 8, 35, 14, 19, 1, 12), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 256))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cdot1sMstiOperMappedVlanListHigh.setStatus('current')
hh3cdot1sPortTable = MibTable((1, 3, 6, 1, 4, 1, 25506, 8, 35, 14, 20), )
if mibBuilder.loadTexts: hh3cdot1sPortTable.setStatus('current')
hh3cdot1sPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 25506, 8, 35, 14, 20, 1), ).setIndexNames((0, "HH3C-LswMSTP-MIB", "hh3cdot1sInstanceID"), (0, "HH3C-LswMSTP-MIB", "hh3cdot1sMstiPortIndex"))
if mibBuilder.loadTexts: hh3cdot1sPortEntry.setStatus('current')
hh3cdot1sMstiPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 8, 35, 14, 20, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cdot1sMstiPortIndex.setStatus('current')
hh3cdot1sMstiState = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 8, 35, 14, 20, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 4, 5))).clone(namedValues=NamedValues(("disabled", 1), ("discarding", 2), ("learning", 4), ("forwarding", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cdot1sMstiState.setStatus('current')
hh3cdot1sMstiPortPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 8, 35, 14, 20, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 240)).clone(128)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hh3cdot1sMstiPortPriority.setStatus('current')
hh3cdot1sMstiPathCost = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 8, 35, 14, 20, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 200000000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hh3cdot1sMstiPathCost.setStatus('current')
hh3cdot1sMstiDesignatedRoot = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 8, 35, 14, 20, 1, 5), BridgeId()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cdot1sMstiDesignatedRoot.setStatus('current')
hh3cdot1sMstiDesignatedCost = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 8, 35, 14, 20, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cdot1sMstiDesignatedCost.setStatus('current')
hh3cdot1sMstiDesignatedBridge = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 8, 35, 14, 20, 1, 7), BridgeId()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cdot1sMstiDesignatedBridge.setStatus('current')
hh3cdot1sMstiDesignatedPort = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 8, 35, 14, 20, 1, 8), OctetString().subtype(subtypeSpec=ValueSizeConstraint(2, 2)).setFixedLength(2)).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cdot1sMstiDesignatedPort.setStatus('current')
hh3cdot1sMstiMasterBridgeID = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 8, 35, 14, 20, 1, 9), BridgeId()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cdot1sMstiMasterBridgeID.setStatus('current')
hh3cdot1sMstiMasterPortCost = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 8, 35, 14, 20, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cdot1sMstiMasterPortCost.setStatus('current')
hh3cdot1sMstiStpPortEdgeport = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 8, 35, 14, 20, 1, 11), EnabledStatus().clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hh3cdot1sMstiStpPortEdgeport.setStatus('current')
hh3cdot1sMstiStpPortPointToPoint = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 8, 35, 14, 20, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("forceTrue", 1), ("forceFalse", 2), ("auto", 3))).clone('auto')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hh3cdot1sMstiStpPortPointToPoint.setStatus('current')
hh3cdot1sMstiStpMcheck = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 8, 35, 14, 20, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 65535))).clone(namedValues=NamedValues(("enable", 1), ("unused", 65535)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hh3cdot1sMstiStpMcheck.setStatus('current')
hh3cdot1sMstiStpTransLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 8, 35, 14, 20, 1, 14), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255)).clone(3)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hh3cdot1sMstiStpTransLimit.setStatus('current')
hh3cdot1sMstiStpRXStpBPDU = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 8, 35, 14, 20, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cdot1sMstiStpRXStpBPDU.setStatus('current')
hh3cdot1sMstiStpTXStpBPDU = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 8, 35, 14, 20, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cdot1sMstiStpTXStpBPDU.setStatus('current')
hh3cdot1sMstiStpRXTCNBPDU = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 8, 35, 14, 20, 1, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cdot1sMstiStpRXTCNBPDU.setStatus('current')
hh3cdot1sMstiStpTXTCNBPDU = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 8, 35, 14, 20, 1, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cdot1sMstiStpTXTCNBPDU.setStatus('current')
hh3cdot1sMstiStpRXRSTPBPDU = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 8, 35, 14, 20, 1, 19), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cdot1sMstiStpRXRSTPBPDU.setStatus('current')
hh3cdot1sMstiStpTXRSTPBPDU = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 8, 35, 14, 20, 1, 20), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cdot1sMstiStpTXRSTPBPDU.setStatus('current')
hh3cdot1sMstiStpRXMSTPBPDU = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 8, 35, 14, 20, 1, 21), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cdot1sMstiStpRXMSTPBPDU.setStatus('current')
hh3cdot1sMstiStpTXMSTPBPDU = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 8, 35, 14, 20, 1, 22), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cdot1sMstiStpTXMSTPBPDU.setStatus('current')
hh3cdot1sMstiStpClearStatistics = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 8, 35, 14, 20, 1, 23), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 65535))).clone(namedValues=NamedValues(("clear", 1), ("unused", 65535)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hh3cdot1sMstiStpClearStatistics.setStatus('current')
hh3cdot1sMstiStpDefaultPortCost = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 8, 35, 14, 20, 1, 24), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 65535))).clone(namedValues=NamedValues(("enable", 1), ("unused", 65535)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hh3cdot1sMstiStpDefaultPortCost.setStatus('current')
hh3cdot1sMstiStpStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 8, 35, 14, 20, 1, 25), EnabledStatus().clone('enabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hh3cdot1sMstiStpStatus.setStatus('current')
hh3cdot1sMstiPortRootGuard = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 8, 35, 14, 20, 1, 26), EnabledStatus().clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hh3cdot1sMstiPortRootGuard.setStatus('current')
hh3cdot1sMstiPortLoopGuard = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 8, 35, 14, 20, 1, 27), EnabledStatus().clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hh3cdot1sMstiPortLoopGuard.setStatus('current')
hh3cdot1sMstiStpPortSendingBPDUType = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 8, 35, 14, 20, 1, 28), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("stp", 1), ("rstp", 2), ("mstp", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cdot1sMstiStpPortSendingBPDUType.setStatus('current')
hh3cdot1sMstiStpOperPortPointToPoint = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 8, 35, 14, 20, 1, 29), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("true", 1), ("false", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cdot1sMstiStpOperPortPointToPoint.setStatus('current')
hh3cdot1sMstiStpPortAdminBPDUFmt = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 8, 35, 14, 20, 1, 30), Hh3cdot1sFormatStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hh3cdot1sMstiStpPortAdminBPDUFmt.setStatus('current')
hh3cdot1sMstiStpPortOperBPDUFmt = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 8, 35, 14, 20, 1, 31), Hh3cdot1sFormatStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cdot1sMstiStpPortOperBPDUFmt.setStatus('current')
hh3cdot1sStpPathCostStandard = MibScalar((1, 3, 6, 1, 4, 1, 25506, 8, 35, 14, 21), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("legacy", 0), ("dot1d-1998", 1), ("dot1t", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hh3cdot1sStpPathCostStandard.setStatus('current')
hh3cMstpEventsV2 = ObjectIdentity((1, 3, 6, 1, 4, 1, 25506, 8, 35, 14, 0))
if mibBuilder.loadTexts: hh3cMstpEventsV2.setStatus('current')
hh3cPortMstiStateForwarding = NotificationType((1, 3, 6, 1, 4, 1, 25506, 8, 35, 14, 0, 1)).setObjects(("HH3C-LswMSTP-MIB", "hh3cdot1sInstanceID"), ("HH3C-LswMSTP-MIB", "hh3cdot1sMstiPortIndex"))
if mibBuilder.loadTexts: hh3cPortMstiStateForwarding.setStatus('current')
hh3cPortMstiStateDiscarding = NotificationType((1, 3, 6, 1, 4, 1, 25506, 8, 35, 14, 0, 2)).setObjects(("HH3C-LswMSTP-MIB", "hh3cdot1sInstanceID"), ("HH3C-LswMSTP-MIB", "hh3cdot1sMstiPortIndex"))
if mibBuilder.loadTexts: hh3cPortMstiStateDiscarding.setStatus('current')
hh3cBridgeLostRootPrimary = NotificationType((1, 3, 6, 1, 4, 1, 25506, 8, 35, 14, 0, 3)).setObjects(("HH3C-LswMSTP-MIB", "hh3cdot1sInstanceID"))
if mibBuilder.loadTexts: hh3cBridgeLostRootPrimary.setStatus('current')
hh3cPortMstiRootGuarded = NotificationType((1, 3, 6, 1, 4, 1, 25506, 8, 35, 14, 0, 4)).setObjects(("HH3C-LswMSTP-MIB", "hh3cdot1sInstanceID"), ("HH3C-LswMSTP-MIB", "hh3cdot1sMstiPortIndex"))
if mibBuilder.loadTexts: hh3cPortMstiRootGuarded.setStatus('current')
hh3cPortMstiBpduGuarded = NotificationType((1, 3, 6, 1, 4, 1, 25506, 8, 35, 14, 0, 5)).setObjects(("BRIDGE-MIB", "dot1dStpPort"))
if mibBuilder.loadTexts: hh3cPortMstiBpduGuarded.setStatus('current')
hh3cPortMstiLoopGuarded = NotificationType((1, 3, 6, 1, 4, 1, 25506, 8, 35, 14, 0, 6)).setObjects(("HH3C-LswMSTP-MIB", "hh3cdot1sInstanceID"), ("HH3C-LswMSTP-MIB", "hh3cdot1sMstiPortIndex"))
if mibBuilder.loadTexts: hh3cPortMstiLoopGuarded.setStatus('current')
mibBuilder.exportSymbols("HH3C-LswMSTP-MIB", hh3cdot1sPortTable=hh3cdot1sPortTable, hh3cPortMstiLoopGuarded=hh3cPortMstiLoopGuarded, hh3cdot1sOperMstID=hh3cdot1sOperMstID, hh3cdot1sMstiPathCost=hh3cdot1sMstiPathCost, hh3cdot1sMstiStpOperPortPointToPoint=hh3cdot1sMstiStpOperPortPointToPoint, hh3cdot1sMstAdminFormatSelector=hh3cdot1sMstAdminFormatSelector, hh3cPortMstiStateForwarding=hh3cPortMstiStateForwarding, hh3cMstpEventsV2=hh3cMstpEventsV2, hh3cdot1sMstiStpTXTCNBPDU=hh3cdot1sMstiStpTXTCNBPDU, hh3cdot1sMstiState=hh3cdot1sMstiState, hh3cdot1sMstBridgeMaxHops=hh3cdot1sMstBridgeMaxHops, hh3cdot1sMstRegionConfActive=hh3cdot1sMstRegionConfActive, hh3cdot1sAdminMstID=hh3cdot1sAdminMstID, hh3cdot1sMstAdminRegionName=hh3cdot1sMstAdminRegionName, hh3cdot1sInstanceID=hh3cdot1sInstanceID, hh3cdot1sMstp=hh3cdot1sMstp, hh3cdot1sMstiOperMappedVlanListHigh=hh3cdot1sMstiOperMappedVlanListHigh, hh3cdot1sMstiStpRXStpBPDU=hh3cdot1sMstiStpRXStpBPDU, hh3cPortMstiStateDiscarding=hh3cPortMstiStateDiscarding, hh3cdot1sStpPathCostStandard=hh3cdot1sStpPathCostStandard, hh3cBridgeLostRootPrimary=hh3cBridgeLostRootPrimary, hh3cdot1sMstiRemainingHops=hh3cdot1sMstiRemainingHops, hh3cdot1sMstiStpMcheck=hh3cdot1sMstiStpMcheck, hh3cdot1sMstiStpTXStpBPDU=hh3cdot1sMstiStpTXStpBPDU, hh3cdot1sMstiRootPort=hh3cdot1sMstiRootPort, hh3cdot1sMstiStpTXMSTPBPDU=hh3cdot1sMstiStpTXMSTPBPDU, hh3cdot1sMstiDesignatedPort=hh3cdot1sMstiDesignatedPort, hh3cdot1sPortEntry=hh3cdot1sPortEntry, hh3cdot1sMstiAdminMappedVlanListHigh=hh3cdot1sMstiAdminMappedVlanListHigh, hh3cdot1sMstiMasterBridgeID=hh3cdot1sMstiMasterBridgeID, hh3cdot1sMstAdminRevisionLevel=hh3cdot1sMstAdminRevisionLevel, hh3cdot1sVIDAllocationTable=hh3cdot1sVIDAllocationTable, hh3cdot1sMstiStpDefaultPortCost=hh3cdot1sMstiStpDefaultPortCost, hh3cdot1sMstVID=hh3cdot1sMstVID, EnabledStatus=EnabledStatus, hh3cdot1sVIDAllocationEntry=hh3cdot1sVIDAllocationEntry, hh3cdot1sStpDiameter=hh3cdot1sStpDiameter, hh3cdot1sMstiStpRXRSTPBPDU=hh3cdot1sMstiStpRXRSTPBPDU, hh3cdot1sMstiBridgePriority=hh3cdot1sMstiBridgePriority, hh3cdot1sMstiStpPortAdminBPDUFmt=hh3cdot1sMstiStpPortAdminBPDUFmt, Hh3cdot1sFormatStatus=Hh3cdot1sFormatStatus, hh3cdot1sMstOperFormatSelector=hh3cdot1sMstOperFormatSelector, hh3cdot1sMstiBridgeID=hh3cdot1sMstiBridgeID, hh3cdot1sMstBpduGuard=hh3cdot1sMstBpduGuard, hh3cdot1sMstiStpPortEdgeport=hh3cdot1sMstiStpPortEdgeport, hh3cdot1sInstanceEntry=hh3cdot1sInstanceEntry, hh3cdot1sMstiStpStatus=hh3cdot1sMstiStpStatus, hh3cdot1sMstiStpPortOperBPDUFmt=hh3cdot1sMstiStpPortOperBPDUFmt, hh3cdot1sMstiStpPortPointToPoint=hh3cdot1sMstiStpPortPointToPoint, hh3cdot1sMstiStpTransLimit=hh3cdot1sMstiStpTransLimit, hh3cdot1sMstiStpClearStatistics=hh3cdot1sMstiStpClearStatistics, hh3cdot1sMstiStpPortSendingBPDUType=hh3cdot1sMstiStpPortSendingBPDUType, hh3cdot1sMstiStpTXRSTPBPDU=hh3cdot1sMstiStpTXRSTPBPDU, hh3cdot1sMstiRootPathCost=hh3cdot1sMstiRootPathCost, PYSNMP_MODULE_ID=hh3cdot1sMstp, hh3cdot1sMstiPortPriority=hh3cdot1sMstiPortPriority, hh3cdot1sMstiPortRootGuard=hh3cdot1sMstiPortRootGuard, hh3cdot1sMstiOperMappedVlanListLow=hh3cdot1sMstiOperMappedVlanListLow, hh3cdot1sMstiPortIndex=hh3cdot1sMstiPortIndex, hh3cdot1sStpForceVersion=hh3cdot1sStpForceVersion, hh3cdot1sMstMasterPathCost=hh3cdot1sMstMasterPathCost, hh3cPortMstiRootGuarded=hh3cPortMstiRootGuarded, hh3cdot1sMstiStpRXMSTPBPDU=hh3cdot1sMstiStpRXMSTPBPDU, hh3cdot1sMstDefaultVlanAllo=hh3cdot1sMstDefaultVlanAllo, hh3cdot1sMstOperConfigDigest=hh3cdot1sMstOperConfigDigest, hh3cdot1sMstMasterBridgeID=hh3cdot1sMstMasterBridgeID, hh3cdot1sStpStatus=hh3cdot1sStpStatus, BridgeId=BridgeId, hh3cdot1sMstiDesignatedRoot=hh3cdot1sMstiDesignatedRoot, hh3cdot1sMstiPortLoopGuard=hh3cdot1sMstiPortLoopGuard, hh3cdot1sMstiAdminMappedVlanListLow=hh3cdot1sMstiAdminMappedVlanListLow, hh3cdot1sInstanceTable=hh3cdot1sInstanceTable, hh3cdot1sMstiDesignedRoot=hh3cdot1sMstiDesignedRoot, hh3cdot1sMstOperRevisionLevel=hh3cdot1sMstOperRevisionLevel, hh3cdot1sMstiDesignatedBridge=hh3cdot1sMstiDesignatedBridge, hh3cdot1sMstOperRegionName=hh3cdot1sMstOperRegionName, hh3cdot1sMstiMasterPortCost=hh3cdot1sMstiMasterPortCost, hh3cdot1sMstiDesignatedCost=hh3cdot1sMstiDesignatedCost, hh3cPortMstiBpduGuarded=hh3cPortMstiBpduGuarded, hh3cdot1sMstiStpRXTCNBPDU=hh3cdot1sMstiStpRXTCNBPDU, hh3cdot1sMstiRootType=hh3cdot1sMstiRootType, hh3cdot1sMstDefaultRegionName=hh3cdot1sMstDefaultRegionName)
