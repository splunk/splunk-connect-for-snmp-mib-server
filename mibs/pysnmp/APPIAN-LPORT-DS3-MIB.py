#
# PySNMP MIB module APPIAN-LPORT-DS3-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/APPIAN-LPORT-DS3-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 17:07:52 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
acChassisCurrentTime, acChassisRingId = mibBuilder.importSymbols("APPIAN-CHASSIS-MIB", "acChassisCurrentTime", "acChassisRingId")
acLport, AcNodeId, AcAdminStatus = mibBuilder.importSymbols("APPIAN-SMI-MIB", "acLport", "AcNodeId", "AcAdminStatus")
OctetString, Integer, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "OctetString", "Integer", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueRangeConstraint, ValueSizeConstraint, SingleValueConstraint, ConstraintsIntersection, ConstraintsUnion = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueRangeConstraint", "ValueSizeConstraint", "SingleValueConstraint", "ConstraintsIntersection", "ConstraintsUnion")
PerfIntervalCount, = mibBuilder.importSymbols("PerfHist-TC-MIB", "PerfIntervalCount")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
NotificationType, Integer32, ObjectIdentity, Bits, TimeTicks, Counter64, Gauge32, Unsigned32, Counter32, MibScalar, MibTable, MibTableRow, MibTableColumn, MibIdentifier, ModuleIdentity, IpAddress, iso = mibBuilder.importSymbols("SNMPv2-SMI", "NotificationType", "Integer32", "ObjectIdentity", "Bits", "TimeTicks", "Counter64", "Gauge32", "Unsigned32", "Counter32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "MibIdentifier", "ModuleIdentity", "IpAddress", "iso")
DisplayString, TruthValue, TextualConvention, TimeStamp = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TruthValue", "TextualConvention", "TimeStamp")
acLogicalDs3 = ModuleIdentity((1, 3, 6, 1, 4, 1, 2785, 2, 4, 3))
if mibBuilder.loadTexts: acLogicalDs3.setLastUpdated('0008210000Z')
if mibBuilder.loadTexts: acLogicalDs3.setOrganization('Appian Communications, Inc.')
acLogicalDs3ConfigTable = MibTable((1, 3, 6, 1, 4, 1, 2785, 2, 4, 3, 1), )
if mibBuilder.loadTexts: acLogicalDs3ConfigTable.setStatus('current')
acLogicalDs3ConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2785, 2, 4, 3, 1, 1), ).setIndexNames((0, "APPIAN-LPORT-DS3-MIB", "acLogicalDs3ConfigNodeId"), (0, "APPIAN-LPORT-DS3-MIB", "acLogicalDs3ConfigIndex"))
if mibBuilder.loadTexts: acLogicalDs3ConfigEntry.setStatus('current')
acLogicalDs3ConfigNodeId = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 4, 3, 1, 1, 1), AcNodeId()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: acLogicalDs3ConfigNodeId.setStatus('current')
acLogicalDs3ConfigIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 4, 3, 1, 1, 2), Integer32()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: acLogicalDs3ConfigIndex.setStatus('current')
acLogicalDs3ConfigAdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 4, 3, 1, 1, 3), AcAdminStatus().clone('inactivate')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: acLogicalDs3ConfigAdminStatus.setStatus('current')
acLogicalDs3ConfigTimeElapsedInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 4, 3, 1, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 899))).setMaxAccess("readonly")
if mibBuilder.loadTexts: acLogicalDs3ConfigTimeElapsedInterval.setStatus('current')
acLogicalDs3ConfigValidIntervals = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 4, 3, 1, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 96))).setMaxAccess("readonly")
if mibBuilder.loadTexts: acLogicalDs3ConfigValidIntervals.setStatus('current')
acLogicalDs3ConfigTimeElapsedDay = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 4, 3, 1, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 86399))).setMaxAccess("readonly")
if mibBuilder.loadTexts: acLogicalDs3ConfigTimeElapsedDay.setStatus('current')
acLogicalDs3ConfigValidDays = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 4, 3, 1, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 30))).setMaxAccess("readonly")
if mibBuilder.loadTexts: acLogicalDs3ConfigValidDays.setStatus('current')
acLogicalDs3ConfigTimeElapsedFarEndInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 4, 3, 1, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 899))).setMaxAccess("readonly")
if mibBuilder.loadTexts: acLogicalDs3ConfigTimeElapsedFarEndInterval.setStatus('current')
acLogicalDs3ConfigValidFarEndIntervals = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 4, 3, 1, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 96))).setMaxAccess("readonly")
if mibBuilder.loadTexts: acLogicalDs3ConfigValidFarEndIntervals.setStatus('current')
acLogicalDs3ConfigTimeElapsedFarEndDay = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 4, 3, 1, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 86399))).setMaxAccess("readonly")
if mibBuilder.loadTexts: acLogicalDs3ConfigTimeElapsedFarEndDay.setStatus('current')
acLogicalDs3ConfigValidFarEndDays = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 4, 3, 1, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 30))).setMaxAccess("readonly")
if mibBuilder.loadTexts: acLogicalDs3ConfigValidFarEndDays.setStatus('current')
acLogicalDs3ConfigSendCode = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 4, 3, 1, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("ds3SendNoCode", 1), ("ds3SendLineCode", 2), ("ds3SendPayloadCode", 3), ("ds3SendResetCode", 4), ("ds3SendTestPattern", 5))).clone('ds3SendNoCode')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: acLogicalDs3ConfigSendCode.setStatus('current')
acLogicalDs3ConfigCircuitIdentifier = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 4, 3, 1, 1, 13), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: acLogicalDs3ConfigCircuitIdentifier.setStatus('current')
acLogicalDs3ConfigLoopbackConfig = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 4, 3, 1, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("ds3NoLoop", 1), ("ds3PayloadLoop", 2), ("ds3LineLoop", 3), ("ds3OtherLoop", 4), ("ds3InwardLoop", 5))).clone('ds3NoLoop')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: acLogicalDs3ConfigLoopbackConfig.setStatus('current')
acLogicalDs3ConfigLineStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 4, 3, 1, 1, 15), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4095))).setMaxAccess("readonly")
if mibBuilder.loadTexts: acLogicalDs3ConfigLineStatus.setStatus('current')
acLogicalDs3ConfigTransmitClockSource = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 4, 3, 1, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("loopTiming", 1), ("localTiming", 2), ("throughTiming", 3))).clone('localTiming')).setMaxAccess("readonly")
if mibBuilder.loadTexts: acLogicalDs3ConfigTransmitClockSource.setStatus('current')
acLogicalDs3ConfigInvalidIntervals = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 4, 3, 1, 1, 17), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 96))).setMaxAccess("readonly")
if mibBuilder.loadTexts: acLogicalDs3ConfigInvalidIntervals.setStatus('current')
acLogicalDs3ConfigInvalidDays = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 4, 3, 1, 1, 18), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 30))).setMaxAccess("readonly")
if mibBuilder.loadTexts: acLogicalDs3ConfigInvalidDays.setStatus('current')
acLogicalDs3ConfigInvalidFarEndIntervals = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 4, 3, 1, 1, 19), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 96))).setMaxAccess("readonly")
if mibBuilder.loadTexts: acLogicalDs3ConfigInvalidFarEndIntervals.setStatus('current')
acLogicalDs3ConfigInvalidFarEndDays = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 4, 3, 1, 1, 20), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 30))).setMaxAccess("readonly")
if mibBuilder.loadTexts: acLogicalDs3ConfigInvalidFarEndDays.setStatus('current')
acLogicalDs3ConfigLineStatusLastChange = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 4, 3, 1, 1, 21), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acLogicalDs3ConfigLineStatusLastChange.setStatus('current')
acLogicalDs3ConfigLineStatusChangeTrapEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 4, 3, 1, 1, 22), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('disabled')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: acLogicalDs3ConfigLineStatusChangeTrapEnable.setStatus('current')
acLogicalDs3ConfigLoopbackStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 4, 3, 1, 1, 23), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 127)).clone(1)).setMaxAccess("readonly")
if mibBuilder.loadTexts: acLogicalDs3ConfigLoopbackStatus.setStatus('current')
acLogicalDs3ConfigFarEndEquipCode = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 4, 3, 1, 1, 24), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 10))).setMaxAccess("readonly")
if mibBuilder.loadTexts: acLogicalDs3ConfigFarEndEquipCode.setStatus('current')
acLogicalDs3ConfigFarEndLocationIDCode = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 4, 3, 1, 1, 25), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 11))).setMaxAccess("readonly")
if mibBuilder.loadTexts: acLogicalDs3ConfigFarEndLocationIDCode.setStatus('current')
acLogicalDs3ConfigFarEndFrameIDCode = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 4, 3, 1, 1, 26), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 10))).setMaxAccess("readonly")
if mibBuilder.loadTexts: acLogicalDs3ConfigFarEndFrameIDCode.setStatus('current')
acLogicalDs3ConfigFarEndUnitCode = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 4, 3, 1, 1, 27), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 6))).setMaxAccess("readonly")
if mibBuilder.loadTexts: acLogicalDs3ConfigFarEndUnitCode.setStatus('current')
acLogicalDs3ConfigFarEndFacilityIDCode = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 4, 3, 1, 1, 28), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 38))).setMaxAccess("readonly")
if mibBuilder.loadTexts: acLogicalDs3ConfigFarEndFacilityIDCode.setStatus('current')
acLogicalDs3IntervalTable = MibTable((1, 3, 6, 1, 4, 1, 2785, 2, 4, 3, 2), )
if mibBuilder.loadTexts: acLogicalDs3IntervalTable.setStatus('current')
acLogicalDs3IntervalEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2785, 2, 4, 3, 2, 1), ).setIndexNames((0, "APPIAN-LPORT-DS3-MIB", "acLogicalDs3IntervalNodeId"), (0, "APPIAN-LPORT-DS3-MIB", "acLogicalDs3IntervalIndex"), (0, "APPIAN-LPORT-DS3-MIB", "acLogicalDs3IntervalNumber"))
if mibBuilder.loadTexts: acLogicalDs3IntervalEntry.setStatus('current')
acLogicalDs3IntervalNodeId = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 4, 3, 2, 1, 1), AcNodeId()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: acLogicalDs3IntervalNodeId.setStatus('current')
acLogicalDs3IntervalIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 4, 3, 2, 1, 2), Integer32()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: acLogicalDs3IntervalIndex.setStatus('current')
acLogicalDs3IntervalNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 4, 3, 2, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 98))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: acLogicalDs3IntervalNumber.setStatus('current')
acLogicalDs3IntervalValidStats = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 4, 3, 2, 1, 4), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acLogicalDs3IntervalValidStats.setStatus('current')
acLogicalDs3IntervalResetStats = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 4, 3, 2, 1, 5), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acLogicalDs3IntervalResetStats.setStatus('current')
acLogicalDs3IntervalPESs = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 4, 3, 2, 1, 6), PerfIntervalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acLogicalDs3IntervalPESs.setStatus('current')
acLogicalDs3IntervalPSESs = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 4, 3, 2, 1, 7), PerfIntervalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acLogicalDs3IntervalPSESs.setStatus('current')
acLogicalDs3IntervalSEFSs = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 4, 3, 2, 1, 8), PerfIntervalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acLogicalDs3IntervalSEFSs.setStatus('current')
acLogicalDs3IntervalUASs = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 4, 3, 2, 1, 9), PerfIntervalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acLogicalDs3IntervalUASs.setStatus('current')
acLogicalDs3IntervalLCVs = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 4, 3, 2, 1, 10), PerfIntervalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acLogicalDs3IntervalLCVs.setStatus('current')
acLogicalDs3IntervalPCVs = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 4, 3, 2, 1, 11), PerfIntervalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acLogicalDs3IntervalPCVs.setStatus('current')
acLogicalDs3IntervalLESs = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 4, 3, 2, 1, 12), PerfIntervalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acLogicalDs3IntervalLESs.setStatus('current')
acLogicalDs3IntervalCCVs = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 4, 3, 2, 1, 13), PerfIntervalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acLogicalDs3IntervalCCVs.setStatus('current')
acLogicalDs3IntervalCESs = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 4, 3, 2, 1, 14), PerfIntervalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acLogicalDs3IntervalCESs.setStatus('current')
acLogicalDs3IntervalCSESs = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 4, 3, 2, 1, 15), PerfIntervalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acLogicalDs3IntervalCSESs.setStatus('current')
acLogicalDs3DayTable = MibTable((1, 3, 6, 1, 4, 1, 2785, 2, 4, 3, 3), )
if mibBuilder.loadTexts: acLogicalDs3DayTable.setStatus('current')
acLogicalDs3DayEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2785, 2, 4, 3, 3, 1), ).setIndexNames((0, "APPIAN-LPORT-DS3-MIB", "acLogicalDs3DayNodeId"), (0, "APPIAN-LPORT-DS3-MIB", "acLogicalDs3DayIndex"), (0, "APPIAN-LPORT-DS3-MIB", "acLogicalDs3DayNumber"))
if mibBuilder.loadTexts: acLogicalDs3DayEntry.setStatus('current')
acLogicalDs3DayNodeId = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 4, 3, 3, 1, 1), AcNodeId()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: acLogicalDs3DayNodeId.setStatus('current')
acLogicalDs3DayIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 4, 3, 3, 1, 2), Integer32()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: acLogicalDs3DayIndex.setStatus('current')
acLogicalDs3DayNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 4, 3, 3, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 31))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: acLogicalDs3DayNumber.setStatus('current')
acLogicalDs3DayValidStats = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 4, 3, 3, 1, 4), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acLogicalDs3DayValidStats.setStatus('current')
acLogicalDs3DayResetStats = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 4, 3, 3, 1, 5), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acLogicalDs3DayResetStats.setStatus('current')
acLogicalDs3DayPESs = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 4, 3, 3, 1, 6), PerfIntervalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acLogicalDs3DayPESs.setStatus('current')
acLogicalDs3DayPSESs = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 4, 3, 3, 1, 7), PerfIntervalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acLogicalDs3DayPSESs.setStatus('current')
acLogicalDs3DaySEFSs = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 4, 3, 3, 1, 8), PerfIntervalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acLogicalDs3DaySEFSs.setStatus('current')
acLogicalDs3DayUASs = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 4, 3, 3, 1, 9), PerfIntervalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acLogicalDs3DayUASs.setStatus('current')
acLogicalDs3DayLCVs = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 4, 3, 3, 1, 10), PerfIntervalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acLogicalDs3DayLCVs.setStatus('current')
acLogicalDs3DayPCVs = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 4, 3, 3, 1, 11), PerfIntervalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acLogicalDs3DayPCVs.setStatus('current')
acLogicalDs3DayLESs = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 4, 3, 3, 1, 12), PerfIntervalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acLogicalDs3DayLESs.setStatus('current')
acLogicalDs3DayCCVs = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 4, 3, 3, 1, 13), PerfIntervalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acLogicalDs3DayCCVs.setStatus('current')
acLogicalDs3DayCESs = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 4, 3, 3, 1, 14), PerfIntervalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acLogicalDs3DayCESs.setStatus('current')
acLogicalDs3DayCSESs = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 4, 3, 3, 1, 15), PerfIntervalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acLogicalDs3DayCSESs.setStatus('current')
acLogicalDs3FarEndIntervalTable = MibTable((1, 3, 6, 1, 4, 1, 2785, 2, 4, 3, 5), )
if mibBuilder.loadTexts: acLogicalDs3FarEndIntervalTable.setStatus('current')
acLogicalDs3FarEndIntervalEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2785, 2, 4, 3, 5, 1), ).setIndexNames((0, "APPIAN-LPORT-DS3-MIB", "acLogicalDs3FarEndIntervalNodeId"), (0, "APPIAN-LPORT-DS3-MIB", "acLogicalDs3FarEndIntervalIndex"), (0, "APPIAN-LPORT-DS3-MIB", "acLogicalDs3FarEndIntervalNumber"))
if mibBuilder.loadTexts: acLogicalDs3FarEndIntervalEntry.setStatus('current')
acLogicalDs3FarEndIntervalNodeId = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 4, 3, 5, 1, 1), AcNodeId()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: acLogicalDs3FarEndIntervalNodeId.setStatus('current')
acLogicalDs3FarEndIntervalIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 4, 3, 5, 1, 2), Integer32()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: acLogicalDs3FarEndIntervalIndex.setStatus('current')
acLogicalDs3FarEndIntervalNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 4, 3, 5, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 98))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: acLogicalDs3FarEndIntervalNumber.setStatus('current')
acLogicalDs3FarEndIntervalValidStats = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 4, 3, 5, 1, 4), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acLogicalDs3FarEndIntervalValidStats.setStatus('current')
acLogicalDs3FarEndIntervalResetStats = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 4, 3, 5, 1, 5), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acLogicalDs3FarEndIntervalResetStats.setStatus('current')
acLogicalDs3FarEndIntervalCESs = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 4, 3, 5, 1, 6), PerfIntervalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acLogicalDs3FarEndIntervalCESs.setStatus('current')
acLogicalDs3FarEndIntervalCSESs = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 4, 3, 5, 1, 7), PerfIntervalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acLogicalDs3FarEndIntervalCSESs.setStatus('current')
acLogicalDs3FarEndIntervalCCVs = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 4, 3, 5, 1, 8), PerfIntervalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acLogicalDs3FarEndIntervalCCVs.setStatus('current')
acLogicalDs3FarEndIntervalUASs = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 4, 3, 5, 1, 9), PerfIntervalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acLogicalDs3FarEndIntervalUASs.setStatus('current')
acLogicalDs3FarEndDayTable = MibTable((1, 3, 6, 1, 4, 1, 2785, 2, 4, 3, 6), )
if mibBuilder.loadTexts: acLogicalDs3FarEndDayTable.setStatus('current')
acLogicalDs3FarEndDayEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2785, 2, 4, 3, 6, 1), ).setIndexNames((0, "APPIAN-LPORT-DS3-MIB", "acLogicalDs3FarEndDayNodeId"), (0, "APPIAN-LPORT-DS3-MIB", "acLogicalDs3FarEndDayIndex"), (0, "APPIAN-LPORT-DS3-MIB", "acLogicalDs3FarEndDayNumber"))
if mibBuilder.loadTexts: acLogicalDs3FarEndDayEntry.setStatus('current')
acLogicalDs3FarEndDayNodeId = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 4, 3, 6, 1, 1), AcNodeId()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: acLogicalDs3FarEndDayNodeId.setStatus('current')
acLogicalDs3FarEndDayIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 4, 3, 6, 1, 2), Integer32()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: acLogicalDs3FarEndDayIndex.setStatus('current')
acLogicalDs3FarEndDayNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 4, 3, 6, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 31))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: acLogicalDs3FarEndDayNumber.setStatus('current')
acLogicalDs3FarEndDayValidStats = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 4, 3, 6, 1, 4), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acLogicalDs3FarEndDayValidStats.setStatus('current')
acLogicalDs3FarEndDayResetStats = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 4, 3, 6, 1, 5), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acLogicalDs3FarEndDayResetStats.setStatus('current')
acLogicalDs3FarEndDayCESs = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 4, 3, 6, 1, 6), PerfIntervalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acLogicalDs3FarEndDayCESs.setStatus('current')
acLogicalDs3FarEndDayCSESs = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 4, 3, 6, 1, 7), PerfIntervalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acLogicalDs3FarEndDayCSESs.setStatus('current')
acLogicalDs3FarEndDayCCVs = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 4, 3, 6, 1, 8), PerfIntervalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acLogicalDs3FarEndDayCCVs.setStatus('current')
acLogicalDs3FarEndDayUASs = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 4, 3, 6, 1, 9), PerfIntervalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acLogicalDs3FarEndDayUASs.setStatus('current')
acLogicalDs3ThresholdTable = MibTable((1, 3, 6, 1, 4, 1, 2785, 2, 4, 3, 7), )
if mibBuilder.loadTexts: acLogicalDs3ThresholdTable.setStatus('current')
acLogicalDs3ThresholdEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2785, 2, 4, 3, 7, 1), ).setIndexNames((0, "APPIAN-LPORT-DS3-MIB", "acLogicalDs3ThresholdNodeId"), (0, "APPIAN-LPORT-DS3-MIB", "acLogicalDs3ThresholdIndex"))
if mibBuilder.loadTexts: acLogicalDs3ThresholdEntry.setStatus('current')
acLogicalDs3ThresholdNodeId = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 4, 3, 7, 1, 1), AcNodeId()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: acLogicalDs3ThresholdNodeId.setStatus('current')
acLogicalDs3ThresholdIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 4, 3, 7, 1, 2), Integer32()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: acLogicalDs3ThresholdIndex.setStatus('current')
acLogicalDs3ThresholdNEIntervalPESs = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 4, 3, 7, 1, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acLogicalDs3ThresholdNEIntervalPESs.setStatus('current')
acLogicalDs3ThresholdNEIntervalPSESs = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 4, 3, 7, 1, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acLogicalDs3ThresholdNEIntervalPSESs.setStatus('current')
acLogicalDs3ThresholdNEIntervalSEFSs = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 4, 3, 7, 1, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acLogicalDs3ThresholdNEIntervalSEFSs.setStatus('current')
acLogicalDs3ThresholdNEIntervalUASs = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 4, 3, 7, 1, 6), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acLogicalDs3ThresholdNEIntervalUASs.setStatus('current')
acLogicalDs3ThresholdNEIntervalLCVs = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 4, 3, 7, 1, 7), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acLogicalDs3ThresholdNEIntervalLCVs.setStatus('current')
acLogicalDs3ThresholdNEIntervalPCVs = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 4, 3, 7, 1, 8), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acLogicalDs3ThresholdNEIntervalPCVs.setStatus('current')
acLogicalDs3ThresholdNEIntervalLESs = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 4, 3, 7, 1, 9), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acLogicalDs3ThresholdNEIntervalLESs.setStatus('current')
acLogicalDs3ThresholdNEIntervalCCVs = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 4, 3, 7, 1, 10), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acLogicalDs3ThresholdNEIntervalCCVs.setStatus('current')
acLogicalDs3ThresholdNEIntervalCESs = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 4, 3, 7, 1, 11), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acLogicalDs3ThresholdNEIntervalCESs.setStatus('current')
acLogicalDs3ThresholdNEIntervalCSESs = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 4, 3, 7, 1, 12), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acLogicalDs3ThresholdNEIntervalCSESs.setStatus('current')
acLogicalDs3ThresholdNEDayPESs = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 4, 3, 7, 1, 13), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acLogicalDs3ThresholdNEDayPESs.setStatus('current')
acLogicalDs3ThresholdNEDayPSESs = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 4, 3, 7, 1, 14), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acLogicalDs3ThresholdNEDayPSESs.setStatus('current')
acLogicalDs3ThresholdNEDaySEFSs = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 4, 3, 7, 1, 15), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acLogicalDs3ThresholdNEDaySEFSs.setStatus('current')
acLogicalDs3ThresholdNEDayUASs = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 4, 3, 7, 1, 16), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acLogicalDs3ThresholdNEDayUASs.setStatus('current')
acLogicalDs3ThresholdNEDayLCVs = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 4, 3, 7, 1, 17), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acLogicalDs3ThresholdNEDayLCVs.setStatus('current')
acLogicalDs3ThresholdNEDayPCVs = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 4, 3, 7, 1, 18), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acLogicalDs3ThresholdNEDayPCVs.setStatus('current')
acLogicalDs3ThresholdNEDayLESs = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 4, 3, 7, 1, 19), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acLogicalDs3ThresholdNEDayLESs.setStatus('current')
acLogicalDs3ThresholdNEDayCCVs = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 4, 3, 7, 1, 20), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acLogicalDs3ThresholdNEDayCCVs.setStatus('current')
acLogicalDs3ThresholdNEDayCESs = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 4, 3, 7, 1, 21), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acLogicalDs3ThresholdNEDayCESs.setStatus('current')
acLogicalDs3ThresholdNEDayCSESs = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 4, 3, 7, 1, 22), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acLogicalDs3ThresholdNEDayCSESs.setStatus('current')
acLogicalDs3ThresholdFEIntervalCESs = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 4, 3, 7, 1, 23), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acLogicalDs3ThresholdFEIntervalCESs.setStatus('current')
acLogicalDs3ThresholdFEIntervalCSESs = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 4, 3, 7, 1, 24), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acLogicalDs3ThresholdFEIntervalCSESs.setStatus('current')
acLogicalDs3ThresholdFEIntervalCCVs = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 4, 3, 7, 1, 25), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acLogicalDs3ThresholdFEIntervalCCVs.setStatus('current')
acLogicalDs3ThresholdFEIntervalUASs = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 4, 3, 7, 1, 26), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acLogicalDs3ThresholdFEIntervalUASs.setStatus('current')
acLogicalDs3ThresholdFEDayCESs = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 4, 3, 7, 1, 27), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acLogicalDs3ThresholdFEDayCESs.setStatus('current')
acLogicalDs3ThresholdFEDayCSESs = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 4, 3, 7, 1, 28), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acLogicalDs3ThresholdFEDayCSESs.setStatus('current')
acLogicalDs3ThresholdFEDayCCVs = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 4, 3, 7, 1, 29), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acLogicalDs3ThresholdFEDayCCVs.setStatus('current')
acLogicalDs3ThresholdFEDayUASs = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 4, 3, 7, 1, 30), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acLogicalDs3ThresholdFEDayUASs.setStatus('current')
acLogicalDs3Traps = MibIdentifier((1, 3, 6, 1, 4, 1, 2785, 2, 4, 3, 0))
acLogicalDs3LineStatusChangeTrap = NotificationType((1, 3, 6, 1, 4, 1, 2785, 2, 4, 3, 0, 1)).setObjects(("APPIAN-CHASSIS-MIB", "acChassisCurrentTime"), ("APPIAN-CHASSIS-MIB", "acChassisRingId"), ("APPIAN-LPORT-DS3-MIB", "acLogicalDs3ConfigNodeId"), ("APPIAN-LPORT-DS3-MIB", "acLogicalDs3ConfigIndex"), ("APPIAN-LPORT-DS3-MIB", "acLogicalDs3ConfigLineStatus"), ("APPIAN-LPORT-DS3-MIB", "acLogicalDs3ConfigLineStatusLastChange"))
if mibBuilder.loadTexts: acLogicalDs3LineStatusChangeTrap.setStatus('current')
acLogicalDs3StatsResetTrap = NotificationType((1, 3, 6, 1, 4, 1, 2785, 2, 4, 3, 0, 2)).setObjects(("APPIAN-CHASSIS-MIB", "acChassisCurrentTime"), ("APPIAN-CHASSIS-MIB", "acChassisRingId"), ("APPIAN-LPORT-DS3-MIB", "acLogicalDs3ConfigNodeId"), ("APPIAN-LPORT-DS3-MIB", "acLogicalDs3ConfigIndex"))
if mibBuilder.loadTexts: acLogicalDs3StatsResetTrap.setStatus('current')
acLogicalDs3CfgErrorTrap = NotificationType((1, 3, 6, 1, 4, 1, 2785, 2, 4, 3, 0, 3)).setObjects(("APPIAN-CHASSIS-MIB", "acChassisCurrentTime"), ("APPIAN-CHASSIS-MIB", "acChassisRingId"), ("APPIAN-LPORT-DS3-MIB", "acLogicalDs3ConfigNodeId"), ("APPIAN-LPORT-DS3-MIB", "acLogicalDs3ConfigIndex"))
if mibBuilder.loadTexts: acLogicalDs3CfgErrorTrap.setStatus('current')
acLogicalDs3LinkDownTrap = NotificationType((1, 3, 6, 1, 4, 1, 2785, 2, 4, 3, 0, 4)).setObjects(("APPIAN-CHASSIS-MIB", "acChassisCurrentTime"), ("APPIAN-CHASSIS-MIB", "acChassisRingId"), ("APPIAN-LPORT-DS3-MIB", "acLogicalDs3ConfigNodeId"), ("APPIAN-LPORT-DS3-MIB", "acLogicalDs3ConfigIndex"))
if mibBuilder.loadTexts: acLogicalDs3LinkDownTrap.setStatus('current')
acLogicalDs3LinkUpTrap = NotificationType((1, 3, 6, 1, 4, 1, 2785, 2, 4, 3, 0, 5)).setObjects(("APPIAN-CHASSIS-MIB", "acChassisCurrentTime"), ("APPIAN-CHASSIS-MIB", "acChassisRingId"), ("APPIAN-LPORT-DS3-MIB", "acLogicalDs3ConfigNodeId"), ("APPIAN-LPORT-DS3-MIB", "acLogicalDs3ConfigIndex"))
if mibBuilder.loadTexts: acLogicalDs3LinkUpTrap.setStatus('current')
acLogicalDs3ExceededThresholdNEIntervalPESsTrap = NotificationType((1, 3, 6, 1, 4, 1, 2785, 2, 4, 3, 0, 6)).setObjects(("APPIAN-CHASSIS-MIB", "acChassisCurrentTime"), ("APPIAN-CHASSIS-MIB", "acChassisRingId"), ("APPIAN-LPORT-DS3-MIB", "acLogicalDs3ThresholdNodeId"), ("APPIAN-LPORT-DS3-MIB", "acLogicalDs3ThresholdIndex"))
if mibBuilder.loadTexts: acLogicalDs3ExceededThresholdNEIntervalPESsTrap.setStatus('current')
acLogicalDs3ExceededThresholdNEIntervalPSESsTrap = NotificationType((1, 3, 6, 1, 4, 1, 2785, 2, 4, 3, 0, 7)).setObjects(("APPIAN-CHASSIS-MIB", "acChassisCurrentTime"), ("APPIAN-CHASSIS-MIB", "acChassisRingId"), ("APPIAN-LPORT-DS3-MIB", "acLogicalDs3ThresholdNodeId"), ("APPIAN-LPORT-DS3-MIB", "acLogicalDs3ThresholdIndex"))
if mibBuilder.loadTexts: acLogicalDs3ExceededThresholdNEIntervalPSESsTrap.setStatus('current')
acLogicalDs3ExceededThresholdNEIntervalSEFSsTrap = NotificationType((1, 3, 6, 1, 4, 1, 2785, 2, 4, 3, 0, 8)).setObjects(("APPIAN-CHASSIS-MIB", "acChassisCurrentTime"), ("APPIAN-CHASSIS-MIB", "acChassisRingId"), ("APPIAN-LPORT-DS3-MIB", "acLogicalDs3ThresholdNodeId"), ("APPIAN-LPORT-DS3-MIB", "acLogicalDs3ThresholdIndex"))
if mibBuilder.loadTexts: acLogicalDs3ExceededThresholdNEIntervalSEFSsTrap.setStatus('current')
acLogicalDs3ExceededThresholdNEIntervalUASsTrap = NotificationType((1, 3, 6, 1, 4, 1, 2785, 2, 4, 3, 0, 9)).setObjects(("APPIAN-CHASSIS-MIB", "acChassisCurrentTime"), ("APPIAN-CHASSIS-MIB", "acChassisRingId"), ("APPIAN-LPORT-DS3-MIB", "acLogicalDs3ThresholdNodeId"), ("APPIAN-LPORT-DS3-MIB", "acLogicalDs3ThresholdIndex"))
if mibBuilder.loadTexts: acLogicalDs3ExceededThresholdNEIntervalUASsTrap.setStatus('current')
acLogicalDs3ExceededThresholdNEIntervalLCVsTrap = NotificationType((1, 3, 6, 1, 4, 1, 2785, 2, 4, 3, 0, 10)).setObjects(("APPIAN-CHASSIS-MIB", "acChassisCurrentTime"), ("APPIAN-CHASSIS-MIB", "acChassisRingId"), ("APPIAN-LPORT-DS3-MIB", "acLogicalDs3ThresholdNodeId"), ("APPIAN-LPORT-DS3-MIB", "acLogicalDs3ThresholdIndex"))
if mibBuilder.loadTexts: acLogicalDs3ExceededThresholdNEIntervalLCVsTrap.setStatus('current')
acLogicalDs3ExceededThresholdNEIntervalPCVsTrap = NotificationType((1, 3, 6, 1, 4, 1, 2785, 2, 4, 3, 0, 11)).setObjects(("APPIAN-CHASSIS-MIB", "acChassisCurrentTime"), ("APPIAN-CHASSIS-MIB", "acChassisRingId"), ("APPIAN-LPORT-DS3-MIB", "acLogicalDs3ThresholdNodeId"), ("APPIAN-LPORT-DS3-MIB", "acLogicalDs3ThresholdIndex"))
if mibBuilder.loadTexts: acLogicalDs3ExceededThresholdNEIntervalPCVsTrap.setStatus('current')
acLogicalDs3ExceededThresholdNEIntervalLESsTrap = NotificationType((1, 3, 6, 1, 4, 1, 2785, 2, 4, 3, 0, 12)).setObjects(("APPIAN-CHASSIS-MIB", "acChassisCurrentTime"), ("APPIAN-CHASSIS-MIB", "acChassisRingId"), ("APPIAN-LPORT-DS3-MIB", "acLogicalDs3ThresholdNodeId"), ("APPIAN-LPORT-DS3-MIB", "acLogicalDs3ThresholdIndex"))
if mibBuilder.loadTexts: acLogicalDs3ExceededThresholdNEIntervalLESsTrap.setStatus('current')
acLogicalDs3ExceededThresholdNEIntervalCCVsTrap = NotificationType((1, 3, 6, 1, 4, 1, 2785, 2, 4, 3, 0, 13)).setObjects(("APPIAN-CHASSIS-MIB", "acChassisCurrentTime"), ("APPIAN-CHASSIS-MIB", "acChassisRingId"), ("APPIAN-LPORT-DS3-MIB", "acLogicalDs3ThresholdNodeId"), ("APPIAN-LPORT-DS3-MIB", "acLogicalDs3ThresholdIndex"))
if mibBuilder.loadTexts: acLogicalDs3ExceededThresholdNEIntervalCCVsTrap.setStatus('current')
acLogicalDs3ExceededThresholdNEIntervalCESsTrap = NotificationType((1, 3, 6, 1, 4, 1, 2785, 2, 4, 3, 0, 14)).setObjects(("APPIAN-CHASSIS-MIB", "acChassisCurrentTime"), ("APPIAN-CHASSIS-MIB", "acChassisRingId"), ("APPIAN-LPORT-DS3-MIB", "acLogicalDs3ThresholdNodeId"), ("APPIAN-LPORT-DS3-MIB", "acLogicalDs3ThresholdIndex"))
if mibBuilder.loadTexts: acLogicalDs3ExceededThresholdNEIntervalCESsTrap.setStatus('current')
acLogicalDs3ExceededThresholdNEIntervalCSESsTrap = NotificationType((1, 3, 6, 1, 4, 1, 2785, 2, 4, 3, 0, 15)).setObjects(("APPIAN-CHASSIS-MIB", "acChassisCurrentTime"), ("APPIAN-CHASSIS-MIB", "acChassisRingId"), ("APPIAN-LPORT-DS3-MIB", "acLogicalDs3ThresholdNodeId"), ("APPIAN-LPORT-DS3-MIB", "acLogicalDs3ThresholdIndex"))
if mibBuilder.loadTexts: acLogicalDs3ExceededThresholdNEIntervalCSESsTrap.setStatus('current')
acLogicalDs3ExceededThresholdNEDayPESsTrap = NotificationType((1, 3, 6, 1, 4, 1, 2785, 2, 4, 3, 0, 16)).setObjects(("APPIAN-CHASSIS-MIB", "acChassisCurrentTime"), ("APPIAN-CHASSIS-MIB", "acChassisRingId"), ("APPIAN-LPORT-DS3-MIB", "acLogicalDs3ThresholdNodeId"), ("APPIAN-LPORT-DS3-MIB", "acLogicalDs3ThresholdIndex"))
if mibBuilder.loadTexts: acLogicalDs3ExceededThresholdNEDayPESsTrap.setStatus('current')
acLogicalDs3ExceededThresholdNEDayPSESsTrap = NotificationType((1, 3, 6, 1, 4, 1, 2785, 2, 4, 3, 0, 17)).setObjects(("APPIAN-CHASSIS-MIB", "acChassisCurrentTime"), ("APPIAN-CHASSIS-MIB", "acChassisRingId"), ("APPIAN-LPORT-DS3-MIB", "acLogicalDs3ThresholdNodeId"), ("APPIAN-LPORT-DS3-MIB", "acLogicalDs3ThresholdIndex"))
if mibBuilder.loadTexts: acLogicalDs3ExceededThresholdNEDayPSESsTrap.setStatus('current')
acLogicalDs3ExceededThresholdNEDaySEFSsTrap = NotificationType((1, 3, 6, 1, 4, 1, 2785, 2, 4, 3, 0, 18)).setObjects(("APPIAN-CHASSIS-MIB", "acChassisCurrentTime"), ("APPIAN-CHASSIS-MIB", "acChassisRingId"), ("APPIAN-LPORT-DS3-MIB", "acLogicalDs3ThresholdNodeId"), ("APPIAN-LPORT-DS3-MIB", "acLogicalDs3ThresholdIndex"))
if mibBuilder.loadTexts: acLogicalDs3ExceededThresholdNEDaySEFSsTrap.setStatus('current')
acLogicalDs3ExceededThresholdNEDayUASsTrap = NotificationType((1, 3, 6, 1, 4, 1, 2785, 2, 4, 3, 0, 19)).setObjects(("APPIAN-CHASSIS-MIB", "acChassisCurrentTime"), ("APPIAN-CHASSIS-MIB", "acChassisRingId"), ("APPIAN-LPORT-DS3-MIB", "acLogicalDs3ThresholdNodeId"), ("APPIAN-LPORT-DS3-MIB", "acLogicalDs3ThresholdIndex"))
if mibBuilder.loadTexts: acLogicalDs3ExceededThresholdNEDayUASsTrap.setStatus('current')
acLogicalDs3ExceededThresholdNEDayLCVsTrap = NotificationType((1, 3, 6, 1, 4, 1, 2785, 2, 4, 3, 0, 20)).setObjects(("APPIAN-CHASSIS-MIB", "acChassisCurrentTime"), ("APPIAN-CHASSIS-MIB", "acChassisRingId"), ("APPIAN-LPORT-DS3-MIB", "acLogicalDs3ThresholdNodeId"), ("APPIAN-LPORT-DS3-MIB", "acLogicalDs3ThresholdIndex"))
if mibBuilder.loadTexts: acLogicalDs3ExceededThresholdNEDayLCVsTrap.setStatus('current')
acLogicalDs3ExceededThresholdNEDayPCVsTrap = NotificationType((1, 3, 6, 1, 4, 1, 2785, 2, 4, 3, 0, 21)).setObjects(("APPIAN-CHASSIS-MIB", "acChassisCurrentTime"), ("APPIAN-CHASSIS-MIB", "acChassisRingId"), ("APPIAN-LPORT-DS3-MIB", "acLogicalDs3ThresholdNodeId"), ("APPIAN-LPORT-DS3-MIB", "acLogicalDs3ThresholdIndex"))
if mibBuilder.loadTexts: acLogicalDs3ExceededThresholdNEDayPCVsTrap.setStatus('current')
acLogicalDs3ExceededThresholdNEDayLESsTrap = NotificationType((1, 3, 6, 1, 4, 1, 2785, 2, 4, 3, 0, 22)).setObjects(("APPIAN-CHASSIS-MIB", "acChassisCurrentTime"), ("APPIAN-CHASSIS-MIB", "acChassisRingId"), ("APPIAN-LPORT-DS3-MIB", "acLogicalDs3ThresholdNodeId"), ("APPIAN-LPORT-DS3-MIB", "acLogicalDs3ThresholdIndex"))
if mibBuilder.loadTexts: acLogicalDs3ExceededThresholdNEDayLESsTrap.setStatus('current')
acLogicalDs3ExceededThresholdNEDayCCVsTrap = NotificationType((1, 3, 6, 1, 4, 1, 2785, 2, 4, 3, 0, 23)).setObjects(("APPIAN-CHASSIS-MIB", "acChassisCurrentTime"), ("APPIAN-CHASSIS-MIB", "acChassisRingId"), ("APPIAN-LPORT-DS3-MIB", "acLogicalDs3ThresholdNodeId"), ("APPIAN-LPORT-DS3-MIB", "acLogicalDs3ThresholdIndex"))
if mibBuilder.loadTexts: acLogicalDs3ExceededThresholdNEDayCCVsTrap.setStatus('current')
acLogicalDs3ExceededThresholdNEDayCESsTrap = NotificationType((1, 3, 6, 1, 4, 1, 2785, 2, 4, 3, 0, 24)).setObjects(("APPIAN-CHASSIS-MIB", "acChassisCurrentTime"), ("APPIAN-CHASSIS-MIB", "acChassisRingId"), ("APPIAN-LPORT-DS3-MIB", "acLogicalDs3ThresholdNodeId"), ("APPIAN-LPORT-DS3-MIB", "acLogicalDs3ThresholdIndex"))
if mibBuilder.loadTexts: acLogicalDs3ExceededThresholdNEDayCESsTrap.setStatus('current')
acLogicalDs3ExceededThresholdNEDayCSESsTrap = NotificationType((1, 3, 6, 1, 4, 1, 2785, 2, 4, 3, 0, 25)).setObjects(("APPIAN-CHASSIS-MIB", "acChassisCurrentTime"), ("APPIAN-CHASSIS-MIB", "acChassisRingId"), ("APPIAN-LPORT-DS3-MIB", "acLogicalDs3ThresholdNodeId"), ("APPIAN-LPORT-DS3-MIB", "acLogicalDs3ThresholdIndex"))
if mibBuilder.loadTexts: acLogicalDs3ExceededThresholdNEDayCSESsTrap.setStatus('current')
acLogicalDs3ExceededThresholdFEIntervalCESsTrap = NotificationType((1, 3, 6, 1, 4, 1, 2785, 2, 4, 3, 0, 26)).setObjects(("APPIAN-CHASSIS-MIB", "acChassisCurrentTime"), ("APPIAN-CHASSIS-MIB", "acChassisRingId"), ("APPIAN-LPORT-DS3-MIB", "acLogicalDs3ThresholdNodeId"), ("APPIAN-LPORT-DS3-MIB", "acLogicalDs3ThresholdIndex"))
if mibBuilder.loadTexts: acLogicalDs3ExceededThresholdFEIntervalCESsTrap.setStatus('current')
acLogicalDs3ExceededThresholdFEIntervalCSESsTrap = NotificationType((1, 3, 6, 1, 4, 1, 2785, 2, 4, 3, 0, 27)).setObjects(("APPIAN-CHASSIS-MIB", "acChassisCurrentTime"), ("APPIAN-CHASSIS-MIB", "acChassisRingId"), ("APPIAN-LPORT-DS3-MIB", "acLogicalDs3ThresholdNodeId"), ("APPIAN-LPORT-DS3-MIB", "acLogicalDs3ThresholdIndex"))
if mibBuilder.loadTexts: acLogicalDs3ExceededThresholdFEIntervalCSESsTrap.setStatus('current')
acLogicalDs3ExceededThresholdFEIntervalCCVsTrap = NotificationType((1, 3, 6, 1, 4, 1, 2785, 2, 4, 3, 0, 28)).setObjects(("APPIAN-CHASSIS-MIB", "acChassisCurrentTime"), ("APPIAN-CHASSIS-MIB", "acChassisRingId"), ("APPIAN-LPORT-DS3-MIB", "acLogicalDs3ThresholdNodeId"), ("APPIAN-LPORT-DS3-MIB", "acLogicalDs3ThresholdIndex"))
if mibBuilder.loadTexts: acLogicalDs3ExceededThresholdFEIntervalCCVsTrap.setStatus('current')
acLogicalDs3ExceededThresholdFEIntervalUASsTrap = NotificationType((1, 3, 6, 1, 4, 1, 2785, 2, 4, 3, 0, 29)).setObjects(("APPIAN-CHASSIS-MIB", "acChassisCurrentTime"), ("APPIAN-CHASSIS-MIB", "acChassisRingId"), ("APPIAN-LPORT-DS3-MIB", "acLogicalDs3ThresholdNodeId"), ("APPIAN-LPORT-DS3-MIB", "acLogicalDs3ThresholdIndex"))
if mibBuilder.loadTexts: acLogicalDs3ExceededThresholdFEIntervalUASsTrap.setStatus('current')
acLogicalDs3ExceededThresholdFEDayCESsTrap = NotificationType((1, 3, 6, 1, 4, 1, 2785, 2, 4, 3, 0, 30)).setObjects(("APPIAN-CHASSIS-MIB", "acChassisCurrentTime"), ("APPIAN-CHASSIS-MIB", "acChassisRingId"), ("APPIAN-LPORT-DS3-MIB", "acLogicalDs3ThresholdNodeId"), ("APPIAN-LPORT-DS3-MIB", "acLogicalDs3ThresholdIndex"))
if mibBuilder.loadTexts: acLogicalDs3ExceededThresholdFEDayCESsTrap.setStatus('current')
acLogicalDs3ExceededThresholdFEDayCSESsTrap = NotificationType((1, 3, 6, 1, 4, 1, 2785, 2, 4, 3, 0, 31)).setObjects(("APPIAN-CHASSIS-MIB", "acChassisCurrentTime"), ("APPIAN-CHASSIS-MIB", "acChassisRingId"), ("APPIAN-LPORT-DS3-MIB", "acLogicalDs3ThresholdNodeId"), ("APPIAN-LPORT-DS3-MIB", "acLogicalDs3ThresholdIndex"))
if mibBuilder.loadTexts: acLogicalDs3ExceededThresholdFEDayCSESsTrap.setStatus('current')
acLogicalDs3ExceededThresholdFEDayCCVsTrap = NotificationType((1, 3, 6, 1, 4, 1, 2785, 2, 4, 3, 0, 32)).setObjects(("APPIAN-CHASSIS-MIB", "acChassisCurrentTime"), ("APPIAN-CHASSIS-MIB", "acChassisRingId"), ("APPIAN-LPORT-DS3-MIB", "acLogicalDs3ThresholdNodeId"), ("APPIAN-LPORT-DS3-MIB", "acLogicalDs3ThresholdIndex"))
if mibBuilder.loadTexts: acLogicalDs3ExceededThresholdFEDayCCVsTrap.setStatus('current')
acLogicalDs3ExceededThresholdFEDayUASsTrap = NotificationType((1, 3, 6, 1, 4, 1, 2785, 2, 4, 3, 0, 33)).setObjects(("APPIAN-CHASSIS-MIB", "acChassisCurrentTime"), ("APPIAN-CHASSIS-MIB", "acChassisRingId"), ("APPIAN-LPORT-DS3-MIB", "acLogicalDs3ThresholdNodeId"), ("APPIAN-LPORT-DS3-MIB", "acLogicalDs3ThresholdIndex"))
if mibBuilder.loadTexts: acLogicalDs3ExceededThresholdFEDayUASsTrap.setStatus('current')
mibBuilder.exportSymbols("APPIAN-LPORT-DS3-MIB", acLogicalDs3IntervalNodeId=acLogicalDs3IntervalNodeId, acLogicalDs3StatsResetTrap=acLogicalDs3StatsResetTrap, acLogicalDs3ExceededThresholdFEDayUASsTrap=acLogicalDs3ExceededThresholdFEDayUASsTrap, acLogicalDs3DayEntry=acLogicalDs3DayEntry, acLogicalDs3FarEndDayCSESs=acLogicalDs3FarEndDayCSESs, acLogicalDs3FarEndIntervalCESs=acLogicalDs3FarEndIntervalCESs, acLogicalDs3DayNumber=acLogicalDs3DayNumber, acLogicalDs3DayCCVs=acLogicalDs3DayCCVs, acLogicalDs3ThresholdNEDayCESs=acLogicalDs3ThresholdNEDayCESs, acLogicalDs3ThresholdNEDayPCVs=acLogicalDs3ThresholdNEDayPCVs, acLogicalDs3DayNodeId=acLogicalDs3DayNodeId, acLogicalDs3ExceededThresholdNEIntervalCCVsTrap=acLogicalDs3ExceededThresholdNEIntervalCCVsTrap, acLogicalDs3ThresholdFEDayCCVs=acLogicalDs3ThresholdFEDayCCVs, acLogicalDs3ExceededThresholdNEIntervalUASsTrap=acLogicalDs3ExceededThresholdNEIntervalUASsTrap, acLogicalDs3ExceededThresholdNEDayPSESsTrap=acLogicalDs3ExceededThresholdNEDayPSESsTrap, acLogicalDs3ConfigLineStatusLastChange=acLogicalDs3ConfigLineStatusLastChange, acLogicalDs3FarEndDayNodeId=acLogicalDs3FarEndDayNodeId, acLogicalDs3ConfigTable=acLogicalDs3ConfigTable, acLogicalDs3ConfigValidDays=acLogicalDs3ConfigValidDays, acLogicalDs3ThresholdFEIntervalUASs=acLogicalDs3ThresholdFEIntervalUASs, acLogicalDs3IntervalIndex=acLogicalDs3IntervalIndex, acLogicalDs3FarEndIntervalValidStats=acLogicalDs3FarEndIntervalValidStats, acLogicalDs3ThresholdNEIntervalPESs=acLogicalDs3ThresholdNEIntervalPESs, acLogicalDs3ExceededThresholdFEIntervalCSESsTrap=acLogicalDs3ExceededThresholdFEIntervalCSESsTrap, acLogicalDs3ConfigCircuitIdentifier=acLogicalDs3ConfigCircuitIdentifier, acLogicalDs3ConfigFarEndFacilityIDCode=acLogicalDs3ConfigFarEndFacilityIDCode, acLogicalDs3FarEndDayIndex=acLogicalDs3FarEndDayIndex, acLogicalDs3DayCSESs=acLogicalDs3DayCSESs, acLogicalDs3ConfigTransmitClockSource=acLogicalDs3ConfigTransmitClockSource, acLogicalDs3ConfigTimeElapsedFarEndDay=acLogicalDs3ConfigTimeElapsedFarEndDay, acLogicalDs3ExceededThresholdNEIntervalPCVsTrap=acLogicalDs3ExceededThresholdNEIntervalPCVsTrap, acLogicalDs3ExceededThresholdFEDayCESsTrap=acLogicalDs3ExceededThresholdFEDayCESsTrap, acLogicalDs3DaySEFSs=acLogicalDs3DaySEFSs, acLogicalDs3ConfigFarEndLocationIDCode=acLogicalDs3ConfigFarEndLocationIDCode, acLogicalDs3ConfigFarEndEquipCode=acLogicalDs3ConfigFarEndEquipCode, acLogicalDs3DayValidStats=acLogicalDs3DayValidStats, acLogicalDs3ConfigNodeId=acLogicalDs3ConfigNodeId, acLogicalDs3ExceededThresholdNEDayPCVsTrap=acLogicalDs3ExceededThresholdNEDayPCVsTrap, acLogicalDs3ConfigTimeElapsedDay=acLogicalDs3ConfigTimeElapsedDay, acLogicalDs3DayPCVs=acLogicalDs3DayPCVs, acLogicalDs3ExceededThresholdNEDayCCVsTrap=acLogicalDs3ExceededThresholdNEDayCCVsTrap, acLogicalDs3ThresholdNEIntervalLESs=acLogicalDs3ThresholdNEIntervalLESs, acLogicalDs3IntervalTable=acLogicalDs3IntervalTable, acLogicalDs3FarEndIntervalTable=acLogicalDs3FarEndIntervalTable, acLogicalDs3ExceededThresholdNEDayLESsTrap=acLogicalDs3ExceededThresholdNEDayLESsTrap, acLogicalDs3FarEndDayCCVs=acLogicalDs3FarEndDayCCVs, acLogicalDs3ThresholdNEIntervalPSESs=acLogicalDs3ThresholdNEIntervalPSESs, acLogicalDs3IntervalUASs=acLogicalDs3IntervalUASs, acLogicalDs3LinkDownTrap=acLogicalDs3LinkDownTrap, acLogicalDs3FarEndDayCESs=acLogicalDs3FarEndDayCESs, acLogicalDs3ConfigLoopbackConfig=acLogicalDs3ConfigLoopbackConfig, acLogicalDs3ConfigSendCode=acLogicalDs3ConfigSendCode, acLogicalDs3IntervalPESs=acLogicalDs3IntervalPESs, acLogicalDs3IntervalNumber=acLogicalDs3IntervalNumber, PYSNMP_MODULE_ID=acLogicalDs3, acLogicalDs3ExceededThresholdFEDayCSESsTrap=acLogicalDs3ExceededThresholdFEDayCSESsTrap, acLogicalDs3ThresholdNEIntervalCCVs=acLogicalDs3ThresholdNEIntervalCCVs, acLogicalDs3LinkUpTrap=acLogicalDs3LinkUpTrap, acLogicalDs3FarEndIntervalResetStats=acLogicalDs3FarEndIntervalResetStats, acLogicalDs3FarEndDayTable=acLogicalDs3FarEndDayTable, acLogicalDs3ExceededThresholdFEDayCCVsTrap=acLogicalDs3ExceededThresholdFEDayCCVsTrap, acLogicalDs3FarEndIntervalCCVs=acLogicalDs3FarEndIntervalCCVs, acLogicalDs3DayPSESs=acLogicalDs3DayPSESs, acLogicalDs3FarEndIntervalCSESs=acLogicalDs3FarEndIntervalCSESs, acLogicalDs3IntervalPSESs=acLogicalDs3IntervalPSESs, acLogicalDs3ExceededThresholdFEIntervalCESsTrap=acLogicalDs3ExceededThresholdFEIntervalCESsTrap, acLogicalDs3ConfigLineStatus=acLogicalDs3ConfigLineStatus, acLogicalDs3ThresholdNEDayPESs=acLogicalDs3ThresholdNEDayPESs, acLogicalDs3FarEndDayResetStats=acLogicalDs3FarEndDayResetStats, acLogicalDs3ThresholdFEDayCSESs=acLogicalDs3ThresholdFEDayCSESs, acLogicalDs3IntervalLESs=acLogicalDs3IntervalLESs, acLogicalDs3FarEndIntervalIndex=acLogicalDs3FarEndIntervalIndex, acLogicalDs3IntervalEntry=acLogicalDs3IntervalEntry, acLogicalDs3ThresholdIndex=acLogicalDs3ThresholdIndex, acLogicalDs3ConfigValidFarEndIntervals=acLogicalDs3ConfigValidFarEndIntervals, acLogicalDs3ThresholdTable=acLogicalDs3ThresholdTable, acLogicalDs3CfgErrorTrap=acLogicalDs3CfgErrorTrap, acLogicalDs3ConfigTimeElapsedInterval=acLogicalDs3ConfigTimeElapsedInterval, acLogicalDs3ExceededThresholdNEIntervalPESsTrap=acLogicalDs3ExceededThresholdNEIntervalPESsTrap, acLogicalDs3IntervalSEFSs=acLogicalDs3IntervalSEFSs, acLogicalDs3DayResetStats=acLogicalDs3DayResetStats, acLogicalDs3FarEndIntervalUASs=acLogicalDs3FarEndIntervalUASs, acLogicalDs3ThresholdNEDayCCVs=acLogicalDs3ThresholdNEDayCCVs, acLogicalDs3DayLESs=acLogicalDs3DayLESs, acLogicalDs3IntervalPCVs=acLogicalDs3IntervalPCVs, acLogicalDs3ThresholdNEIntervalSEFSs=acLogicalDs3ThresholdNEIntervalSEFSs, acLogicalDs3ThresholdNEDaySEFSs=acLogicalDs3ThresholdNEDaySEFSs, acLogicalDs3FarEndDayUASs=acLogicalDs3FarEndDayUASs, acLogicalDs3ConfigInvalidFarEndIntervals=acLogicalDs3ConfigInvalidFarEndIntervals, acLogicalDs3ExceededThresholdNEDaySEFSsTrap=acLogicalDs3ExceededThresholdNEDaySEFSsTrap, acLogicalDs3ThresholdNEDayLCVs=acLogicalDs3ThresholdNEDayLCVs, acLogicalDs3Traps=acLogicalDs3Traps, acLogicalDs3DayUASs=acLogicalDs3DayUASs, acLogicalDs3ExceededThresholdNEDayPESsTrap=acLogicalDs3ExceededThresholdNEDayPESsTrap, acLogicalDs3ThresholdNEIntervalCSESs=acLogicalDs3ThresholdNEIntervalCSESs, acLogicalDs3ConfigFarEndFrameIDCode=acLogicalDs3ConfigFarEndFrameIDCode, acLogicalDs3ExceededThresholdNEIntervalLCVsTrap=acLogicalDs3ExceededThresholdNEIntervalLCVsTrap, acLogicalDs3ExceededThresholdNEDayCESsTrap=acLogicalDs3ExceededThresholdNEDayCESsTrap, acLogicalDs3ExceededThresholdNEIntervalLESsTrap=acLogicalDs3ExceededThresholdNEIntervalLESsTrap, acLogicalDs3ThresholdFEIntervalCESs=acLogicalDs3ThresholdFEIntervalCESs, acLogicalDs3DayTable=acLogicalDs3DayTable, acLogicalDs3DayCESs=acLogicalDs3DayCESs, acLogicalDs3ConfigInvalidDays=acLogicalDs3ConfigInvalidDays, acLogicalDs3ExceededThresholdFEIntervalCCVsTrap=acLogicalDs3ExceededThresholdFEIntervalCCVsTrap, acLogicalDs3ConfigIndex=acLogicalDs3ConfigIndex, acLogicalDs3ThresholdNEIntervalPCVs=acLogicalDs3ThresholdNEIntervalPCVs, acLogicalDs3IntervalCCVs=acLogicalDs3IntervalCCVs, acLogicalDs3IntervalValidStats=acLogicalDs3IntervalValidStats, acLogicalDs3ThresholdNEDayLESs=acLogicalDs3ThresholdNEDayLESs, acLogicalDs3DayLCVs=acLogicalDs3DayLCVs, acLogicalDs3ConfigLoopbackStatus=acLogicalDs3ConfigLoopbackStatus, acLogicalDs3IntervalCESs=acLogicalDs3IntervalCESs, acLogicalDs3ThresholdNEDayCSESs=acLogicalDs3ThresholdNEDayCSESs, acLogicalDs3ConfigInvalidIntervals=acLogicalDs3ConfigInvalidIntervals, acLogicalDs3ExceededThresholdNEIntervalCSESsTrap=acLogicalDs3ExceededThresholdNEIntervalCSESsTrap, acLogicalDs3ExceededThresholdNEDayCSESsTrap=acLogicalDs3ExceededThresholdNEDayCSESsTrap, acLogicalDs3ThresholdEntry=acLogicalDs3ThresholdEntry, acLogicalDs3ExceededThresholdNEDayUASsTrap=acLogicalDs3ExceededThresholdNEDayUASsTrap, acLogicalDs3ThresholdFEDayUASs=acLogicalDs3ThresholdFEDayUASs, acLogicalDs3ExceededThresholdNEDayLCVsTrap=acLogicalDs3ExceededThresholdNEDayLCVsTrap, acLogicalDs3FarEndIntervalNodeId=acLogicalDs3FarEndIntervalNodeId, acLogicalDs3ThresholdNEIntervalUASs=acLogicalDs3ThresholdNEIntervalUASs, acLogicalDs3ConfigValidIntervals=acLogicalDs3ConfigValidIntervals, acLogicalDs3ConfigFarEndUnitCode=acLogicalDs3ConfigFarEndUnitCode, acLogicalDs3FarEndDayEntry=acLogicalDs3FarEndDayEntry, acLogicalDs3ConfigLineStatusChangeTrapEnable=acLogicalDs3ConfigLineStatusChangeTrapEnable, acLogicalDs3ConfigEntry=acLogicalDs3ConfigEntry, acLogicalDs3DayIndex=acLogicalDs3DayIndex, acLogicalDs3ConfigAdminStatus=acLogicalDs3ConfigAdminStatus, acLogicalDs3ThresholdNEDayPSESs=acLogicalDs3ThresholdNEDayPSESs, acLogicalDs3FarEndDayNumber=acLogicalDs3FarEndDayNumber, acLogicalDs3ExceededThresholdNEIntervalSEFSsTrap=acLogicalDs3ExceededThresholdNEIntervalSEFSsTrap, acLogicalDs3ConfigInvalidFarEndDays=acLogicalDs3ConfigInvalidFarEndDays, acLogicalDs3ThresholdNEIntervalLCVs=acLogicalDs3ThresholdNEIntervalLCVs, acLogicalDs3FarEndDayValidStats=acLogicalDs3FarEndDayValidStats, acLogicalDs3ExceededThresholdNEIntervalCESsTrap=acLogicalDs3ExceededThresholdNEIntervalCESsTrap, acLogicalDs3IntervalCSESs=acLogicalDs3IntervalCSESs, acLogicalDs3=acLogicalDs3, acLogicalDs3ThresholdNEDayUASs=acLogicalDs3ThresholdNEDayUASs, acLogicalDs3ThresholdNodeId=acLogicalDs3ThresholdNodeId, acLogicalDs3ConfigValidFarEndDays=acLogicalDs3ConfigValidFarEndDays, acLogicalDs3ConfigTimeElapsedFarEndInterval=acLogicalDs3ConfigTimeElapsedFarEndInterval, acLogicalDs3ThresholdFEIntervalCCVs=acLogicalDs3ThresholdFEIntervalCCVs, acLogicalDs3LineStatusChangeTrap=acLogicalDs3LineStatusChangeTrap, acLogicalDs3ThresholdFEIntervalCSESs=acLogicalDs3ThresholdFEIntervalCSESs, acLogicalDs3IntervalResetStats=acLogicalDs3IntervalResetStats, acLogicalDs3ExceededThresholdNEIntervalPSESsTrap=acLogicalDs3ExceededThresholdNEIntervalPSESsTrap, acLogicalDs3DayPESs=acLogicalDs3DayPESs, acLogicalDs3ThresholdFEDayCESs=acLogicalDs3ThresholdFEDayCESs, acLogicalDs3ExceededThresholdFEIntervalUASsTrap=acLogicalDs3ExceededThresholdFEIntervalUASsTrap, acLogicalDs3IntervalLCVs=acLogicalDs3IntervalLCVs, acLogicalDs3FarEndIntervalNumber=acLogicalDs3FarEndIntervalNumber, acLogicalDs3ThresholdNEIntervalCESs=acLogicalDs3ThresholdNEIntervalCESs, acLogicalDs3FarEndIntervalEntry=acLogicalDs3FarEndIntervalEntry)
