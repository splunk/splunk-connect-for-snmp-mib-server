#
# PySNMP MIB module IDS0-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/IDS0-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 19:40:25 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, OctetString, Integer = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "OctetString", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueRangeConstraint, ConstraintsIntersection, ValueSizeConstraint, SingleValueConstraint, ConstraintsUnion = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueRangeConstraint", "ConstraintsIntersection", "ValueSizeConstraint", "SingleValueConstraint", "ConstraintsUnion")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
Counter64, ModuleIdentity, Counter32, MibIdentifier, experimental, Bits, enterprises, TimeTicks, iso, Integer32, ObjectIdentity, Unsigned32, Gauge32, NotificationType, IpAddress, MibScalar, MibTable, MibTableRow, MibTableColumn = mibBuilder.importSymbols("SNMPv2-SMI", "Counter64", "ModuleIdentity", "Counter32", "MibIdentifier", "experimental", "Bits", "enterprises", "TimeTicks", "iso", "Integer32", "ObjectIdentity", "Unsigned32", "Gauge32", "NotificationType", "IpAddress", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn")
TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString")
usr = MibIdentifier((1, 3, 6, 1, 4, 1, 429))
nas = MibIdentifier((1, 3, 6, 1, 4, 1, 429, 1))
ids0 = MibIdentifier((1, 3, 6, 1, 4, 1, 429, 1, 16))
ids0CfgTable = MibTable((1, 3, 6, 1, 4, 1, 429, 1, 16, 1), )
if mibBuilder.loadTexts: ids0CfgTable.setStatus('mandatory')
ids0CfgEntry = MibTableRow((1, 3, 6, 1, 4, 1, 429, 1, 16, 1, 1), ).setIndexNames((0, "IDS0-MIB", "ids0CfgDs1Index"), (0, "IDS0-MIB", "ids0CfgDs0Index"))
if mibBuilder.loadTexts: ids0CfgEntry.setStatus('mandatory')
ids0CfgDs1Index = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 16, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ids0CfgDs1Index.setStatus('mandatory')
ids0CfgDs0Index = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 16, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ids0CfgDs0Index.setStatus('mandatory')
ids0CfgDs0Id = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 16, 1, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 40))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ids0CfgDs0Id.setStatus('mandatory')
ids0CfgBlockCallType = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 16, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("notSupported", 1), ("blockNone", 2), ("blockAnalog", 3), ("blockDigital", 4), ("blockAll", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ids0CfgBlockCallType.setStatus('mandatory')
ids0CfgDs0AssignedSlot = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 16, 1, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 17))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ids0CfgDs0AssignedSlot.setStatus('mandatory')
ids0CfgDs0AssignedChannel = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 16, 1, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 33))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ids0CfgDs0AssignedChannel.setStatus('mandatory')
ids0CfgDs0SrvcState = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 16, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("notSupported", 1), ("inService", 2), ("localOutOfService", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ids0CfgDs0SrvcState.setStatus('mandatory')
ids0CfgNailUpDs0 = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 16, 1, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("normal", 1), ("transparent", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ids0CfgNailUpDs0.setStatus('mandatory')
ids0StatTable = MibTable((1, 3, 6, 1, 4, 1, 429, 1, 16, 2), )
if mibBuilder.loadTexts: ids0StatTable.setStatus('mandatory')
ids0StatEntry = MibTableRow((1, 3, 6, 1, 4, 1, 429, 1, 16, 2, 1), ).setIndexNames((0, "IDS0-MIB", "ids0StatDs1Index"), (0, "IDS0-MIB", "ids0StatDs0Index"))
if mibBuilder.loadTexts: ids0StatEntry.setStatus('mandatory')
ids0StatDs1Index = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 16, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ids0StatDs1Index.setStatus('mandatory')
ids0StatDs0Index = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 16, 2, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ids0StatDs0Index.setStatus('mandatory')
ids0StatDs0 = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 16, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 22, 23, 24, 25, 26, 27))).clone(namedValues=NamedValues(("other", 1), ("idle", 2), ("dialingIn", 3), ("dialingOut", 4), ("connectedIn", 5), ("connectedOut", 6), ("ds0CallDisc", 22), ("ds0IsDchan", 23), ("ds0OutOfServ", 24), ("ds0InMaint", 25), ("ds0IsFchan", 26), ("ds0LclOutOfService", 27)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ids0StatDs0.setStatus('mandatory')
ids0StatDevConnTo = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 16, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("none", 1), ("isdnGateway", 2), ("quadModem", 3), ("quadIModem", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ids0StatDevConnTo.setStatus('mandatory')
ids0StatSlotConnTo = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 16, 2, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ids0StatSlotConnTo.setStatus('mandatory')
ids0StatChanConnTo = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 16, 2, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ids0StatChanConnTo.setStatus('mandatory')
ids0StatDs0SrvcState = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 16, 2, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("notSupported", 1), ("inService", 2), ("localOutOfService", 3), ("maintenance", 4), ("remoteOutOfService", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ids0StatDs0SrvcState.setStatus('mandatory')
ids0StatCallArrivalTime = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 16, 2, 1, 8), Integer32())
if mibBuilder.loadTexts: ids0StatCallArrivalTime.setStatus('mandatory')
ids0StatCallConnectTime = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 16, 2, 1, 9), Integer32())
if mibBuilder.loadTexts: ids0StatCallConnectTime.setStatus('mandatory')
ids0StatCallTerminateTime = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 16, 2, 1, 10), Integer32())
if mibBuilder.loadTexts: ids0StatCallTerminateTime.setStatus('mandatory')
ids0StatCallType = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 16, 2, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("analog", 1), ("digital", 2))))
if mibBuilder.loadTexts: ids0StatCallType.setStatus('mandatory')
ids0StatCallBlockState = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 16, 2, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("notSupported", 1), ("blockNone", 2), ("blockAnalog", 3), ("blockDigital", 4), ("blockAll", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ids0StatCallBlockState.setStatus('mandatory')
ids0StatCallDirn = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 16, 2, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("inbound", 1), ("outbound", 2))))
if mibBuilder.loadTexts: ids0StatCallDirn.setStatus('mandatory')
ids0CmdTable = MibTable((1, 3, 6, 1, 4, 1, 429, 1, 16, 3), )
if mibBuilder.loadTexts: ids0CmdTable.setStatus('mandatory')
ids0CmdEntry = MibTableRow((1, 3, 6, 1, 4, 1, 429, 1, 16, 3, 1), ).setIndexNames((0, "IDS0-MIB", "ids0CmdDs1Index"), (0, "IDS0-MIB", "ids0CmdDs0Index"))
if mibBuilder.loadTexts: ids0CmdEntry.setStatus('mandatory')
ids0CmdDs1Index = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 16, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ids0CmdDs1Index.setStatus('mandatory')
ids0CmdDs0Index = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 16, 3, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ids0CmdDs0Index.setStatus('mandatory')
ids0CmdMgtStationId = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 16, 3, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 8))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ids0CmdMgtStationId.setStatus('mandatory')
ids0CmdReqId = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 16, 3, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ids0CmdReqId.setStatus('mandatory')
ids0CmdFunction = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 16, 3, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("noCommand", 1), ("disconnect", 2), ("inService", 3), ("localOutofService", 4), ("blockAnalogCalls", 5), ("blockDigitalCalls", 6), ("blockAllCalls", 7), ("blockNoCalls", 8)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ids0CmdFunction.setStatus('mandatory')
ids0CmdForce = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 16, 3, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("force", 1), ("noForce", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ids0CmdForce.setStatus('mandatory')
ids0CmdParam = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 16, 3, 1, 7), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 24))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ids0CmdParam.setStatus('mandatory')
ids0CmdResult = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 16, 3, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("none", 1), ("success", 2), ("inProgress", 3), ("notSupported", 4), ("unAbleToRun", 5), ("aborted", 6), ("failed", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ids0CmdResult.setStatus('mandatory')
ids0CmdCode = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 16, 3, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 6, 8, 12, 20, 22, 73))).clone(namedValues=NamedValues(("noError", 1), ("unable", 2), ("unrecognizedCommand", 6), ("slotEmpty", 8), ("noResponse", 12), ("unsupportedCommand", 20), ("deviceDisabled", 22), ("pendingSoftwareDownload", 73)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ids0CmdCode.setStatus('mandatory')
ids0BulkAccessTable = MibTable((1, 3, 6, 1, 4, 1, 429, 1, 16, 4), )
if mibBuilder.loadTexts: ids0BulkAccessTable.setStatus('mandatory')
ids0BulkAccessEntry = MibTableRow((1, 3, 6, 1, 4, 1, 429, 1, 16, 4, 1), ).setIndexNames((0, "IDS0-MIB", "ids0BulkAccessDs1Index"))
if mibBuilder.loadTexts: ids0BulkAccessEntry.setStatus('mandatory')
ids0BulkAccessDs1Index = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 16, 4, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ids0BulkAccessDs1Index.setStatus('mandatory')
ids0BulkAccessStatDs0Mdm = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 16, 4, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ids0BulkAccessStatDs0Mdm.setStatus('mandatory')
mibBuilder.exportSymbols("IDS0-MIB", ids0CfgDs1Index=ids0CfgDs1Index, ids0CmdFunction=ids0CmdFunction, ids0CfgNailUpDs0=ids0CfgNailUpDs0, ids0StatTable=ids0StatTable, ids0StatSlotConnTo=ids0StatSlotConnTo, ids0CmdCode=ids0CmdCode, ids0CfgDs0Id=ids0CfgDs0Id, ids0CmdDs1Index=ids0CmdDs1Index, ids0CmdReqId=ids0CmdReqId, ids0CmdTable=ids0CmdTable, ids0CmdEntry=ids0CmdEntry, ids0CmdDs0Index=ids0CmdDs0Index, ids0StatDs0SrvcState=ids0StatDs0SrvcState, ids0BulkAccessEntry=ids0BulkAccessEntry, ids0StatDevConnTo=ids0StatDevConnTo, ids0CfgDs0AssignedSlot=ids0CfgDs0AssignedSlot, ids0StatDs0Index=ids0StatDs0Index, ids0CmdParam=ids0CmdParam, ids0=ids0, ids0CfgDs0SrvcState=ids0CfgDs0SrvcState, ids0BulkAccessTable=ids0BulkAccessTable, usr=usr, ids0CmdForce=ids0CmdForce, ids0StatCallArrivalTime=ids0StatCallArrivalTime, nas=nas, ids0CfgDs0AssignedChannel=ids0CfgDs0AssignedChannel, ids0StatCallType=ids0StatCallType, ids0StatCallTerminateTime=ids0StatCallTerminateTime, ids0BulkAccessDs1Index=ids0BulkAccessDs1Index, ids0StatDs0=ids0StatDs0, ids0StatEntry=ids0StatEntry, ids0CfgTable=ids0CfgTable, ids0BulkAccessStatDs0Mdm=ids0BulkAccessStatDs0Mdm, ids0CfgBlockCallType=ids0CfgBlockCallType, ids0StatCallConnectTime=ids0StatCallConnectTime, ids0StatCallDirn=ids0StatCallDirn, ids0CfgEntry=ids0CfgEntry, ids0CmdResult=ids0CmdResult, ids0CmdMgtStationId=ids0CmdMgtStationId, ids0StatDs1Index=ids0StatDs1Index, ids0CfgDs0Index=ids0CfgDs0Index, ids0StatCallBlockState=ids0StatCallBlockState, ids0StatChanConnTo=ids0StatChanConnTo)
