#
# PySNMP MIB module JUNIPER-Services-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/JUNIPER-Services-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 19:50:23 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, OctetString, Integer = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "OctetString", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueSizeConstraint, ValueRangeConstraint, SingleValueConstraint, ConstraintsIntersection, ConstraintsUnion = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueSizeConstraint", "ValueRangeConstraint", "SingleValueConstraint", "ConstraintsIntersection", "ConstraintsUnion")
ifIndex, = mibBuilder.importSymbols("IF-MIB", "ifIndex")
jnxMibs, = mibBuilder.importSymbols("JUNIPER-SMI", "jnxMibs")
ObjectGroup, NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "ObjectGroup", "NotificationGroup", "ModuleCompliance")
Unsigned32, Counter64, NotificationType, Gauge32, IpAddress, iso, ModuleIdentity, Bits, MibIdentifier, MibScalar, MibTable, MibTableRow, MibTableColumn, Counter32, TimeTicks, ObjectIdentity, Integer32 = mibBuilder.importSymbols("SNMPv2-SMI", "Unsigned32", "Counter64", "NotificationType", "Gauge32", "IpAddress", "iso", "ModuleIdentity", "Bits", "MibIdentifier", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Counter32", "TimeTicks", "ObjectIdentity", "Integer32")
TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString")
jnxServicesInfoMib = ModuleIdentity((1, 3, 6, 1, 4, 1, 2636, 3, 27))
jnxServicesInfoMib.setRevisions(('2004-01-30 00:00',))
if mibBuilder.loadTexts: jnxServicesInfoMib.setLastUpdated('200307182154Z')
if mibBuilder.loadTexts: jnxServicesInfoMib.setOrganization('Juniper Networks, Inc.')
jnxSvcFlowTableAggStatsTable = MibTable((1, 3, 6, 1, 4, 1, 2636, 3, 27, 1), )
if mibBuilder.loadTexts: jnxSvcFlowTableAggStatsTable.setStatus('current')
jnxSvcFlowTableAggStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2636, 3, 27, 1, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: jnxSvcFlowTableAggStatsEntry.setStatus('current')
jnxSvcAggFlow = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 27, 1, 1, 1), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxSvcAggFlow.setStatus('current')
jnxSvcAggFlowMaximum = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 27, 1, 1, 2), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxSvcAggFlowMaximum.setStatus('current')
jnxSvcAggFlowCreated = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 27, 1, 1, 3), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxSvcAggFlowCreated.setStatus('current')
jnxSvcAggFlowFreed = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 27, 1, 1, 4), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxSvcAggFlowFreed.setStatus('current')
jnxSvcAggFlowIdleFreed = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 27, 1, 1, 5), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxSvcAggFlowIdleFreed.setStatus('current')
jnxSvcAggFlowTcp = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 27, 1, 1, 6), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxSvcAggFlowTcp.setStatus('current')
jnxSvcAggFlowTcpMaximum = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 27, 1, 1, 7), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxSvcAggFlowTcpMaximum.setStatus('current')
jnxSvcAggFlowTcpCreated = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 27, 1, 1, 8), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxSvcAggFlowTcpCreated.setStatus('current')
jnxSvcAggFlowTcpFreed = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 27, 1, 1, 9), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxSvcAggFlowTcpFreed.setStatus('current')
jnxSvcAggFlowTcpIdleFreed = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 27, 1, 1, 10), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxSvcAggFlowTcpIdleFreed.setStatus('current')
jnxSvcAggFlowUdp = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 27, 1, 1, 11), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxSvcAggFlowUdp.setStatus('current')
jnxSvcAggFlowUdpMaximum = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 27, 1, 1, 12), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxSvcAggFlowUdpMaximum.setStatus('current')
jnxSvcAggFlowUdpCreated = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 27, 1, 1, 13), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxSvcAggFlowUdpCreated.setStatus('current')
jnxSvcAggFlowUdpFreed = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 27, 1, 1, 14), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxSvcAggFlowUdpFreed.setStatus('current')
jnxSvcAggFlowUdpIdleFreed = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 27, 1, 1, 15), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxSvcAggFlowUdpIdleFreed.setStatus('current')
jnxSvcAggFlowPkt = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 27, 1, 1, 16), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxSvcAggFlowPkt.setStatus('current')
jnxSvcAggFlowPktErr = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 27, 1, 1, 17), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxSvcAggFlowPktErr.setStatus('current')
jnxSvcAggFlowByte = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 27, 1, 1, 18), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxSvcAggFlowByte.setStatus('current')
jnxSvcAggFlowByteErr = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 27, 1, 1, 19), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxSvcAggFlowByteErr.setStatus('current')
jnxSvcAggFlowIcmpPkt = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 27, 1, 1, 20), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxSvcAggFlowIcmpPkt.setStatus('current')
jnxSvcAggFlowIcmpPktErr = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 27, 1, 1, 21), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxSvcAggFlowIcmpPktErr.setStatus('current')
jnxSvcAggFlowIcmpPktErrBadFlow = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 27, 1, 1, 22), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxSvcAggFlowIcmpPktErrBadFlow.setStatus('current')
jnxSvcAggFlowIcmpByte = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 27, 1, 1, 23), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxSvcAggFlowIcmpByte.setStatus('current')
jnxSvcAggFlowIcmpByteErr = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 27, 1, 1, 24), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxSvcAggFlowIcmpByteErr.setStatus('current')
jnxSvcAggFlowTcpPkt = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 27, 1, 1, 25), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxSvcAggFlowTcpPkt.setStatus('current')
jnxSvcAggFlowTcpPktErr = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 27, 1, 1, 26), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxSvcAggFlowTcpPktErr.setStatus('current')
jnxSvcAggFlowTcpPktErrBadFlow = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 27, 1, 1, 27), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxSvcAggFlowTcpPktErrBadFlow.setStatus('current')
jnxSvcAggFlowTcpByte = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 27, 1, 1, 28), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxSvcAggFlowTcpByte.setStatus('current')
jnxSvcAggFlowTcpByteErr = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 27, 1, 1, 29), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxSvcAggFlowTcpByteErr.setStatus('current')
jnxSvcAggFlowUdpPkt = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 27, 1, 1, 30), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxSvcAggFlowUdpPkt.setStatus('current')
jnxSvcAggFlowUdpPktErr = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 27, 1, 1, 31), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxSvcAggFlowUdpPktErr.setStatus('current')
jnxSvcAggFlowUdpPktErrBadFlow = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 27, 1, 1, 32), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxSvcAggFlowUdpPktErrBadFlow.setStatus('current')
jnxSvcAggFlowUdpByte = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 27, 1, 1, 33), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxSvcAggFlowUdpByte.setStatus('current')
jnxSvcAggFlowUdpByteErr = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 27, 1, 1, 34), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxSvcAggFlowUdpByteErr.setStatus('current')
jnxSvcServIdTable = MibTable((1, 3, 6, 1, 4, 1, 2636, 3, 27, 2), )
if mibBuilder.loadTexts: jnxSvcServIdTable.setStatus('current')
jnxSvcServIdTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2636, 3, 27, 2, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: jnxSvcServIdTableEntry.setStatus('current')
jnxSvcServIdPkt = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 27, 2, 1, 1), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxSvcServIdPkt.setStatus('current')
jnxSvcServIdByte = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 27, 2, 1, 2), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxSvcServIdByte.setStatus('current')
jnxSvcServIdErrPkt = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 27, 2, 1, 3), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxSvcServIdErrPkt.setStatus('current')
jnxSvcServIdErrByte = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 27, 2, 1, 4), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxSvcServIdErrByte.setStatus('current')
jnxSvcServIdHeadExPkt = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 27, 2, 1, 5), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxSvcServIdHeadExPkt.setStatus('current')
jnxSvcServIdHeadExByte = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 27, 2, 1, 6), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxSvcServIdHeadExByte.setStatus('current')
jnxSvcServIdHeadExFlow = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 27, 2, 1, 7), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxSvcServIdHeadExFlow.setStatus('current')
jnxSvcServIdHeadExFlowMtch = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 27, 2, 1, 8), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxSvcServIdHeadExFlowMtch.setStatus('current')
jnxSvcServIdHeadExProtoReq = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 27, 2, 1, 13), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxSvcServIdHeadExProtoReq.setStatus('current')
jnxSvcServIdHeadExHttpProtoReq = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 27, 2, 1, 14), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxSvcServIdHeadExHttpProtoReq.setStatus('current')
jnxSvcServIdHeadExWapProtoReq = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 27, 2, 1, 15), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxSvcServIdHeadExWapProtoReq.setStatus('current')
jnxSvcServIdProtFlow = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 27, 2, 1, 16), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxSvcServIdProtFlow.setStatus('current')
jnxSvcServIdProtInsPkt = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 27, 2, 1, 17), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxSvcServIdProtInsPkt.setStatus('current')
jnxSvcServIdProtInsByte = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 27, 2, 1, 18), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxSvcServIdProtInsByte.setStatus('current')
jnxSvcServIdProtInsFlowInsp = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 27, 2, 1, 19), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxSvcServIdProtInsFlowInsp.setStatus('current')
jnxSvcServIdProtInsFlowProtIdent = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 27, 2, 1, 20), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxSvcServIdProtInsFlowProtIdent.setStatus('current')
jnxSvcServIdProtInsHttpUri = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 27, 2, 1, 24), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxSvcServIdProtInsHttpUri.setStatus('current')
jnxSvcServIdProtInsHttpUriMtch = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 27, 2, 1, 25), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxSvcServIdProtInsHttpUriMtch.setStatus('current')
jnxSvcServIdProtInsWapUri = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 27, 2, 1, 26), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxSvcServIdProtInsWapUri.setStatus('current')
jnxSvcServIdProtInsWapUriMtch = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 27, 2, 1, 27), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxSvcServIdProtInsWapUriMtch.setStatus('current')
jnxSvcServIdPktTcpMalform = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 27, 2, 1, 28), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxSvcServIdPktTcpMalform.setStatus('current')
jnxSvcServIdWAPInvalidTxn = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 27, 2, 1, 29), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxSvcServIdWAPInvalidTxn.setStatus('current')
jnxSvcServIdErrWAPTxn = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 27, 2, 1, 30), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxSvcServIdErrWAPTxn.setStatus('current')
jnxSvcServIdErrHTTPTxn = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 27, 2, 1, 31), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxSvcServIdErrHTTPTxn.setStatus('current')
jnxSvcServIdHeadExFailCfgState = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 27, 2, 1, 32), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxSvcServIdHeadExFailCfgState.setStatus('current')
jnxSvcServIdProtInsFailCfgState = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 27, 2, 1, 33), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxSvcServIdProtInsFailCfgState.setStatus('current')
jnxSvcTransactionWapCreated = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 27, 2, 1, 34), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxSvcTransactionWapCreated.setStatus('current')
jnxSvcTransactionWapMaximum = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 27, 2, 1, 35), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxSvcTransactionWapMaximum.setStatus('current')
jnxSvcTransactionWapFreed = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 27, 2, 1, 36), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxSvcTransactionWapFreed.setStatus('current')
jnxSvcTransactionWapIdleFreed = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 27, 2, 1, 37), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxSvcTransactionWapIdleFreed.setStatus('current')
jnxSvcTransactionHttpCreated = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 27, 2, 1, 38), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxSvcTransactionHttpCreated.setStatus('current')
jnxSvcTransactionHttpMaximum = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 27, 2, 1, 39), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxSvcTransactionHttpMaximum.setStatus('current')
jnxSvcTransactionHttpFreed = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 27, 2, 1, 40), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxSvcTransactionHttpFreed.setStatus('current')
jnxSvcTransactionHttpIdleFreed = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 27, 2, 1, 41), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxSvcTransactionHttpIdleFreed.setStatus('current')
jnxSvcServidProtInsUriErrProcess = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 27, 2, 1, 42), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxSvcServidProtInsUriErrProcess.setStatus('current')
jnxSvcServidProtInsUriErrTooLong = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 27, 2, 1, 43), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxSvcServidProtInsUriErrTooLong.setStatus('current')
jnxSvcServidProtInsErrParseTx = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 27, 2, 1, 44), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxSvcServidProtInsErrParseTx.setStatus('current')
jnxSvcServidProtInsUriErrNoRes = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 27, 2, 1, 45), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxSvcServidProtInsUriErrNoRes.setStatus('current')
jnxSvcMIBConformance = MibIdentifier((1, 3, 6, 1, 4, 1, 2636, 3, 27, 20))
jnxSvcMIBCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 2636, 3, 27, 20, 1))
jnxSvcMIBGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 2636, 3, 27, 20, 2))
jnxSvcMIBCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 2636, 3, 27, 20, 1, 1)).setObjects(("JUNIPER-Services-MIB", "jnxSvcFlowTableAggStatsGroup"), ("JUNIPER-Services-MIB", "jnxSvcServIdiceGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    jnxSvcMIBCompliance = jnxSvcMIBCompliance.setStatus('current')
jnxSvcFlowTableAggStatsGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2636, 3, 27, 20, 2, 1)).setObjects(("JUNIPER-Services-MIB", "jnxSvcAggFlow"), ("JUNIPER-Services-MIB", "jnxSvcAggFlowMaximum"), ("JUNIPER-Services-MIB", "jnxSvcAggFlowCreated"), ("JUNIPER-Services-MIB", "jnxSvcAggFlowFreed"), ("JUNIPER-Services-MIB", "jnxSvcAggFlowIdleFreed"), ("JUNIPER-Services-MIB", "jnxSvcAggFlowTcp"), ("JUNIPER-Services-MIB", "jnxSvcAggFlowTcpMaximum"), ("JUNIPER-Services-MIB", "jnxSvcAggFlowTcpCreated"), ("JUNIPER-Services-MIB", "jnxSvcAggFlowTcpFreed"), ("JUNIPER-Services-MIB", "jnxSvcAggFlowTcpIdleFreed"), ("JUNIPER-Services-MIB", "jnxSvcAggFlowUdp"), ("JUNIPER-Services-MIB", "jnxSvcAggFlowUdpMaximum"), ("JUNIPER-Services-MIB", "jnxSvcAggFlowUdpCreated"), ("JUNIPER-Services-MIB", "jnxSvcAggFlowUdpFreed"), ("JUNIPER-Services-MIB", "jnxSvcAggFlowUdpIdleFreed"), ("JUNIPER-Services-MIB", "jnxSvcAggFlowPkt"), ("JUNIPER-Services-MIB", "jnxSvcAggFlowPktErr"), ("JUNIPER-Services-MIB", "jnxSvcAggFlowByte"), ("JUNIPER-Services-MIB", "jnxSvcAggFlowByteErr"), ("JUNIPER-Services-MIB", "jnxSvcAggFlowIcmpPkt"), ("JUNIPER-Services-MIB", "jnxSvcAggFlowIcmpPktErr"), ("JUNIPER-Services-MIB", "jnxSvcAggFlowIcmpPktErrBadFlow"), ("JUNIPER-Services-MIB", "jnxSvcAggFlowIcmpByte"), ("JUNIPER-Services-MIB", "jnxSvcAggFlowIcmpByteErr"), ("JUNIPER-Services-MIB", "jnxSvcAggFlowTcpPkt"), ("JUNIPER-Services-MIB", "jnxSvcAggFlowTcpPktErr"), ("JUNIPER-Services-MIB", "jnxSvcAggFlowTcpPktErrBadFlow"), ("JUNIPER-Services-MIB", "jnxSvcAggFlowTcpByte"), ("JUNIPER-Services-MIB", "jnxSvcAggFlowTcpByteErr"), ("JUNIPER-Services-MIB", "jnxSvcAggFlowUdpPkt"), ("JUNIPER-Services-MIB", "jnxSvcAggFlowUdpPktErr"), ("JUNIPER-Services-MIB", "jnxSvcAggFlowUdpPktErrBadFlow"), ("JUNIPER-Services-MIB", "jnxSvcAggFlowUdpByte"), ("JUNIPER-Services-MIB", "jnxSvcAggFlowUdpByteErr"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    jnxSvcFlowTableAggStatsGroup = jnxSvcFlowTableAggStatsGroup.setStatus('current')
jnxSvcServIdiceGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2636, 3, 27, 20, 2, 2)).setObjects(("JUNIPER-Services-MIB", "jnxSvcServIdPkt"), ("JUNIPER-Services-MIB", "jnxSvcServIdByte"), ("JUNIPER-Services-MIB", "jnxSvcServIdErrPkt"), ("JUNIPER-Services-MIB", "jnxSvcServIdErrByte"), ("JUNIPER-Services-MIB", "jnxSvcServIdHeadExPkt"), ("JUNIPER-Services-MIB", "jnxSvcServIdHeadExByte"), ("JUNIPER-Services-MIB", "jnxSvcServIdHeadExFlow"), ("JUNIPER-Services-MIB", "jnxSvcServIdHeadExFlowMtch"), ("JUNIPER-Services-MIB", "jnxSvcServIdHeadExProtoReq"), ("JUNIPER-Services-MIB", "jnxSvcServIdHeadExHttpProtoReq"), ("JUNIPER-Services-MIB", "jnxSvcServIdHeadExWapProtoReq"), ("JUNIPER-Services-MIB", "jnxSvcServIdProtFlow"), ("JUNIPER-Services-MIB", "jnxSvcServIdProtInsPkt"), ("JUNIPER-Services-MIB", "jnxSvcServIdProtInsByte"), ("JUNIPER-Services-MIB", "jnxSvcServIdProtInsFlowInsp"), ("JUNIPER-Services-MIB", "jnxSvcServIdProtInsFlowProtIdent"), ("JUNIPER-Services-MIB", "jnxSvcServIdProtInsHttpUri"), ("JUNIPER-Services-MIB", "jnxSvcServIdProtInsHttpUriMtch"), ("JUNIPER-Services-MIB", "jnxSvcServIdProtInsWapUri"), ("JUNIPER-Services-MIB", "jnxSvcServIdProtInsWapUriMtch"), ("JUNIPER-Services-MIB", "jnxSvcServIdPktTcpMalform"), ("JUNIPER-Services-MIB", "jnxSvcServIdWAPInvalidTxn"), ("JUNIPER-Services-MIB", "jnxSvcServIdErrWAPTxn"), ("JUNIPER-Services-MIB", "jnxSvcServIdErrHTTPTxn"), ("JUNIPER-Services-MIB", "jnxSvcServIdHeadExFailCfgState"), ("JUNIPER-Services-MIB", "jnxSvcServIdProtInsFailCfgState"), ("JUNIPER-Services-MIB", "jnxSvcTransactionWapCreated"), ("JUNIPER-Services-MIB", "jnxSvcTransactionWapMaximum"), ("JUNIPER-Services-MIB", "jnxSvcTransactionWapFreed"), ("JUNIPER-Services-MIB", "jnxSvcTransactionWapIdleFreed"), ("JUNIPER-Services-MIB", "jnxSvcTransactionHttpCreated"), ("JUNIPER-Services-MIB", "jnxSvcTransactionHttpMaximum"), ("JUNIPER-Services-MIB", "jnxSvcTransactionHttpFreed"), ("JUNIPER-Services-MIB", "jnxSvcTransactionHttpIdleFreed"), ("JUNIPER-Services-MIB", "jnxSvcServidProtInsUriErrProcess"), ("JUNIPER-Services-MIB", "jnxSvcServidProtInsUriErrTooLong"), ("JUNIPER-Services-MIB", "jnxSvcServidProtInsErrParseTx"), ("JUNIPER-Services-MIB", "jnxSvcServidProtInsUriErrNoRes"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    jnxSvcServIdiceGroup = jnxSvcServIdiceGroup.setStatus('current')
mibBuilder.exportSymbols("JUNIPER-Services-MIB", jnxSvcAggFlowMaximum=jnxSvcAggFlowMaximum, jnxSvcServIdProtInsHttpUriMtch=jnxSvcServIdProtInsHttpUriMtch, jnxSvcFlowTableAggStatsGroup=jnxSvcFlowTableAggStatsGroup, jnxSvcAggFlowTcpPktErrBadFlow=jnxSvcAggFlowTcpPktErrBadFlow, jnxSvcAggFlowUdpByte=jnxSvcAggFlowUdpByte, jnxSvcTransactionWapCreated=jnxSvcTransactionWapCreated, jnxSvcServIdHeadExPkt=jnxSvcServIdHeadExPkt, jnxSvcServIdProtInsHttpUri=jnxSvcServIdProtInsHttpUri, jnxSvcServIdProtInsWapUriMtch=jnxSvcServIdProtInsWapUriMtch, jnxSvcAggFlow=jnxSvcAggFlow, jnxSvcAggFlowIdleFreed=jnxSvcAggFlowIdleFreed, jnxSvcAggFlowTcpByte=jnxSvcAggFlowTcpByte, jnxSvcAggFlowByteErr=jnxSvcAggFlowByteErr, jnxSvcServIdProtInsFlowInsp=jnxSvcServIdProtInsFlowInsp, jnxSvcServIdErrWAPTxn=jnxSvcServIdErrWAPTxn, jnxSvcTransactionHttpIdleFreed=jnxSvcTransactionHttpIdleFreed, jnxSvcServIdHeadExWapProtoReq=jnxSvcServIdHeadExWapProtoReq, jnxSvcFlowTableAggStatsTable=jnxSvcFlowTableAggStatsTable, jnxSvcTransactionWapMaximum=jnxSvcTransactionWapMaximum, jnxSvcServIdHeadExByte=jnxSvcServIdHeadExByte, jnxSvcServIdTable=jnxSvcServIdTable, jnxSvcMIBCompliances=jnxSvcMIBCompliances, jnxSvcAggFlowUdpFreed=jnxSvcAggFlowUdpFreed, jnxSvcTransactionWapIdleFreed=jnxSvcTransactionWapIdleFreed, jnxSvcServIdHeadExFlow=jnxSvcServIdHeadExFlow, jnxSvcAggFlowTcpIdleFreed=jnxSvcAggFlowTcpIdleFreed, jnxSvcServIdPktTcpMalform=jnxSvcServIdPktTcpMalform, jnxSvcAggFlowIcmpPkt=jnxSvcAggFlowIcmpPkt, jnxSvcAggFlowUdpMaximum=jnxSvcAggFlowUdpMaximum, jnxSvcServIdTableEntry=jnxSvcServIdTableEntry, jnxSvcAggFlowTcpPktErr=jnxSvcAggFlowTcpPktErr, jnxSvcServIdHeadExHttpProtoReq=jnxSvcServIdHeadExHttpProtoReq, jnxSvcAggFlowUdpPkt=jnxSvcAggFlowUdpPkt, jnxSvcAggFlowTcpCreated=jnxSvcAggFlowTcpCreated, jnxSvcServIdProtInsPkt=jnxSvcServIdProtInsPkt, jnxSvcServIdProtFlow=jnxSvcServIdProtFlow, jnxSvcAggFlowUdp=jnxSvcAggFlowUdp, jnxSvcTransactionHttpMaximum=jnxSvcTransactionHttpMaximum, jnxServicesInfoMib=jnxServicesInfoMib, jnxSvcAggFlowIcmpPktErrBadFlow=jnxSvcAggFlowIcmpPktErrBadFlow, jnxSvcServIdProtInsFlowProtIdent=jnxSvcServIdProtInsFlowProtIdent, jnxSvcAggFlowUdpPktErrBadFlow=jnxSvcAggFlowUdpPktErrBadFlow, jnxSvcServIdProtInsWapUri=jnxSvcServIdProtInsWapUri, jnxSvcAggFlowFreed=jnxSvcAggFlowFreed, jnxSvcServIdPkt=jnxSvcServIdPkt, jnxSvcServIdProtInsByte=jnxSvcServIdProtInsByte, jnxSvcServIdErrPkt=jnxSvcServIdErrPkt, jnxSvcServIdErrByte=jnxSvcServIdErrByte, jnxSvcAggFlowTcp=jnxSvcAggFlowTcp, PYSNMP_MODULE_ID=jnxServicesInfoMib, jnxSvcServIdWAPInvalidTxn=jnxSvcServIdWAPInvalidTxn, jnxSvcMIBCompliance=jnxSvcMIBCompliance, jnxSvcServIdHeadExProtoReq=jnxSvcServIdHeadExProtoReq, jnxSvcTransactionWapFreed=jnxSvcTransactionWapFreed, jnxSvcMIBGroups=jnxSvcMIBGroups, jnxSvcAggFlowUdpIdleFreed=jnxSvcAggFlowUdpIdleFreed, jnxSvcServIdiceGroup=jnxSvcServIdiceGroup, jnxSvcServIdProtInsFailCfgState=jnxSvcServIdProtInsFailCfgState, jnxSvcAggFlowIcmpByteErr=jnxSvcAggFlowIcmpByteErr, jnxSvcAggFlowIcmpByte=jnxSvcAggFlowIcmpByte, jnxSvcAggFlowTcpPkt=jnxSvcAggFlowTcpPkt, jnxSvcServIdErrHTTPTxn=jnxSvcServIdErrHTTPTxn, jnxSvcAggFlowByte=jnxSvcAggFlowByte, jnxSvcServIdByte=jnxSvcServIdByte, jnxSvcServIdHeadExFailCfgState=jnxSvcServIdHeadExFailCfgState, jnxSvcServidProtInsErrParseTx=jnxSvcServidProtInsErrParseTx, jnxSvcAggFlowIcmpPktErr=jnxSvcAggFlowIcmpPktErr, jnxSvcAggFlowUdpCreated=jnxSvcAggFlowUdpCreated, jnxSvcAggFlowTcpMaximum=jnxSvcAggFlowTcpMaximum, jnxSvcAggFlowPktErr=jnxSvcAggFlowPktErr, jnxSvcTransactionHttpFreed=jnxSvcTransactionHttpFreed, jnxSvcServidProtInsUriErrNoRes=jnxSvcServidProtInsUriErrNoRes, jnxSvcAggFlowTcpByteErr=jnxSvcAggFlowTcpByteErr, jnxSvcAggFlowUdpByteErr=jnxSvcAggFlowUdpByteErr, jnxSvcAggFlowTcpFreed=jnxSvcAggFlowTcpFreed, jnxSvcServidProtInsUriErrTooLong=jnxSvcServidProtInsUriErrTooLong, jnxSvcMIBConformance=jnxSvcMIBConformance, jnxSvcAggFlowPkt=jnxSvcAggFlowPkt, jnxSvcServIdHeadExFlowMtch=jnxSvcServIdHeadExFlowMtch, jnxSvcTransactionHttpCreated=jnxSvcTransactionHttpCreated, jnxSvcFlowTableAggStatsEntry=jnxSvcFlowTableAggStatsEntry, jnxSvcServidProtInsUriErrProcess=jnxSvcServidProtInsUriErrProcess, jnxSvcAggFlowCreated=jnxSvcAggFlowCreated, jnxSvcAggFlowUdpPktErr=jnxSvcAggFlowUdpPktErr)
