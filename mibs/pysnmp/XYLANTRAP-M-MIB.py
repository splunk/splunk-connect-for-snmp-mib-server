#
# PySNMP MIB module XYLANTRAP-M-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/XYLANTRAP-M-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 21:39:27 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, OctetString, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "Integer", "OctetString", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsIntersection, SingleValueConstraint, ValueRangeConstraint, ConstraintsUnion, ValueSizeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsIntersection", "SingleValueConstraint", "ValueRangeConstraint", "ConstraintsUnion", "ValueSizeConstraint")
chasModuleOperStatus, chasControlSlot, chasControlState, chasPowerSupply1State, chasModuleSlot, chasModuleType, chasModuleSubUnit, chasPowerSupply2State = mibBuilder.importSymbols("CHASSIS-MIB", "chasModuleOperStatus", "chasControlSlot", "chasControlState", "chasPowerSupply1State", "chasModuleSlot", "chasModuleType", "chasModuleSubUnit", "chasPowerSupply2State")
fddimibSMTCFState, fddimibSMTIndex = mibBuilder.importSymbols("FDDI-SMT73-MIB", "fddimibSMTCFState", "fddimibSMTIndex")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
NotificationType, TimeTicks, iso, Unsigned32, Counter64, IpAddress, ObjectIdentity, Bits, MibIdentifier, Integer32, NotificationType, ModuleIdentity, Gauge32, MibScalar, MibTable, MibTableRow, MibTableColumn, Counter32 = mibBuilder.importSymbols("SNMPv2-SMI", "NotificationType", "TimeTicks", "iso", "Unsigned32", "Counter64", "IpAddress", "ObjectIdentity", "Bits", "MibIdentifier", "Integer32", "NotificationType", "ModuleIdentity", "Gauge32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Counter32")
DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention")
atmxPortPortIndex, atmxVccPortIndex, atmxServiceAdmStatus, atmxServiceSlotIndex, atmxVccVci, atmxVccAdmStatus, atmxPortSlotIndex, atmxVccSlotIndex, atmxServicePortIndex, atmxServiceNumber, atmxVccVpi, atmxPortEnableILMI = mibBuilder.importSymbols("XYLAN-ATM-MIB", "atmxPortPortIndex", "atmxVccPortIndex", "atmxServiceAdmStatus", "atmxServiceSlotIndex", "atmxVccVci", "atmxVccAdmStatus", "atmxPortSlotIndex", "atmxVccSlotIndex", "atmxServicePortIndex", "atmxServiceNumber", "atmxVccVpi", "atmxPortEnableILMI")
omniswitch5, xylan, xylanSwitchDevice, omniswitch9, pizzaSwitch, microSwitch = mibBuilder.importSymbols("XYLAN-BASE-MIB", "omniswitch5", "xylan", "xylanSwitchDevice", "omniswitch9", "pizzaSwitch", "microSwitch")
frxVcControlDlci, frxVcControlSlotIndex, frxVcControlPortIndex = mibBuilder.importSymbols("XYLAN-FRAME-RELAY-MIB", "frxVcControlDlci", "frxVcControlSlotIndex", "frxVcControlPortIndex")
healthThreshModTrapCount, healthThreshDevTrapData, healthThreshModTrapData = mibBuilder.importSymbols("XYLAN-HEALTH-MIB", "healthThreshModTrapCount", "healthThreshDevTrapData", "healthThreshModTrapData")
xylanIpAssocSlot, xylanIpAssocIntf, xylanIpAssocDupMac, xylanIpAssocDupIntf, xylanIpAssocAddr, xylanIpAssocDupSlot, xylanIpAssocMac = mibBuilder.importSymbols("XYLAN-IP-MIB", "xylanIpAssocSlot", "xylanIpAssocIntf", "xylanIpAssocDupMac", "xylanIpAssocDupIntf", "xylanIpAssocAddr", "xylanIpAssocDupSlot", "xylanIpAssocMac")
systemEventTrapNumber, = mibBuilder.importSymbols("XYLAN-MGMTSTN-MIB", "systemEventTrapNumber")
vportSlot, vportIF, vportFuncTypeInstance, vportAdmStatus, vportFuncType = mibBuilder.importSymbols("XYLAN-PORT-MIB", "vportSlot", "vportIF", "vportFuncTypeInstance", "vportAdmStatus", "vportFuncType")
atVLANId, atVLANAdminStatus, vDupMacMac, vDupMacTime, vDupMacSlot, atVLANGroupId, vDupMacIntf, vBrdgTpFdbAddress, vLanAdmStatus, vLanNumber = mibBuilder.importSymbols("XYLAN-VLAN-MIB", "atVLANId", "atVLANAdminStatus", "vDupMacMac", "vDupMacTime", "vDupMacSlot", "atVLANGroupId", "vDupMacIntf", "vBrdgTpFdbAddress", "vLanAdmStatus", "vLanNumber")
tempAlarmM = NotificationType((1, 3, 6, 1, 4, 1, 800, 3, 1, 1, 4) + (0,1))
moduleChangeM = NotificationType((1, 3, 6, 1, 4, 1, 800, 3, 1, 1, 4) + (0,2)).setObjects(("CHASSIS-MIB", "chasModuleSlot"), ("CHASSIS-MIB", "chasModuleSubUnit"), ("CHASSIS-MIB", "chasModuleType"))
powerEventM = NotificationType((1, 3, 6, 1, 4, 1, 800, 3, 1, 1, 4) + (0,3)).setObjects(("CHASSIS-MIB", "chasPowerSupply1State"), ("CHASSIS-MIB", "chasPowerSupply2State"))
controllerEventM = NotificationType((1, 3, 6, 1, 4, 1, 800, 3, 1, 1, 4) + (0,4)).setObjects(("CHASSIS-MIB", "chasControlSlot"), ("CHASSIS-MIB", "chasControlState"))
loginViolationM = NotificationType((1, 3, 6, 1, 4, 1, 800, 3, 1, 1, 4) + (0,5))
macVlanViolationM = NotificationType((1, 3, 6, 1, 4, 1, 800, 3, 1, 1, 4) + (0,6)).setObjects(("XYLAN-VLAN-MIB", "vBrdgTpFdbAddress"))
macDuplicatePortM = NotificationType((1, 3, 6, 1, 4, 1, 800, 3, 1, 1, 4) + (0,7)).setObjects(("XYLAN-VLAN-MIB", "vBrdgTpFdbAddress"))
portLinkUpEventM = NotificationType((1, 3, 6, 1, 4, 1, 800, 3, 1, 1, 4) + (0,8)).setObjects(("XYLAN-PORT-MIB", "vportSlot"), ("XYLAN-PORT-MIB", "vportIF"), ("XYLAN-PORT-MIB", "vportFuncType"), ("XYLAN-PORT-MIB", "vportFuncTypeInstance"))
portLinkDownEventM = NotificationType((1, 3, 6, 1, 4, 1, 800, 3, 1, 1, 4) + (0,9)).setObjects(("XYLAN-PORT-MIB", "vportSlot"), ("XYLAN-PORT-MIB", "vportIF"), ("XYLAN-PORT-MIB", "vportFuncType"), ("XYLAN-PORT-MIB", "vportFuncTypeInstance"))
portPartitionedM = NotificationType((1, 3, 6, 1, 4, 1, 800, 3, 1, 1, 4) + (0,10)).setObjects(("XYLAN-PORT-MIB", "vportSlot"), ("XYLAN-PORT-MIB", "vportIF"), ("XYLAN-PORT-MIB", "vportFuncType"), ("XYLAN-PORT-MIB", "vportFuncTypeInstance"))
portRecordMismatchM = NotificationType((1, 3, 6, 1, 4, 1, 800, 3, 1, 1, 4) + (0,11)).setObjects(("XYLAN-PORT-MIB", "vportSlot"), ("XYLAN-PORT-MIB", "vportIF"), ("XYLAN-PORT-MIB", "vportFuncType"), ("XYLAN-PORT-MIB", "vportFuncTypeInstance"))
groupChangeM = NotificationType((1, 3, 6, 1, 4, 1, 800, 3, 1, 1, 4) + (0,14)).setObjects(("XYLAN-VLAN-MIB", "vLanNumber"), ("XYLAN-VLAN-MIB", "vLanAdmStatus"))
vlanChangeM = NotificationType((1, 3, 6, 1, 4, 1, 800, 3, 1, 1, 4) + (0,15)).setObjects(("XYLAN-VLAN-MIB", "atVLANGroupId"), ("XYLAN-VLAN-MIB", "atVLANId"), ("XYLAN-VLAN-MIB", "atVLANAdminStatus"))
portMoveM = NotificationType((1, 3, 6, 1, 4, 1, 800, 3, 1, 1, 4) + (0,16)).setObjects(("XYLAN-PORT-MIB", "vportSlot"), ("XYLAN-PORT-MIB", "vportIF"), ("XYLAN-PORT-MIB", "vportFuncType"), ("XYLAN-PORT-MIB", "vportFuncTypeInstance"), ("XYLAN-PORT-MIB", "vportAdmStatus"))
moduleResetReloadM = NotificationType((1, 3, 6, 1, 4, 1, 800, 3, 1, 1, 4) + (0,17)).setObjects(("CHASSIS-MIB", "chasModuleSlot"), ("CHASSIS-MIB", "chasModuleSubUnit"), ("CHASSIS-MIB", "chasModuleType"), ("CHASSIS-MIB", "chasModuleOperStatus"))
systemEventM = NotificationType((1, 3, 6, 1, 4, 1, 800, 3, 1, 1, 4) + (0,18)).setObjects(("XYLAN-MGMTSTN-MIB", "systemEventTrapNumber"))
vlanRouteTableFullM = NotificationType((1, 3, 6, 1, 4, 1, 800, 3, 1, 1, 4) + (0,19))
sapTableFullM = NotificationType((1, 3, 6, 1, 4, 1, 800, 3, 1, 1, 4) + (0,20))
atmSSCOPstateM = NotificationType((1, 3, 6, 1, 4, 1, 800, 3, 1, 1, 4) + (0,21)).setObjects(("XYLAN-ATM-MIB", "atmxPortSlotIndex"), ("XYLAN-ATM-MIB", "atmxPortPortIndex"))
ilmiStateM = NotificationType((1, 3, 6, 1, 4, 1, 800, 3, 1, 1, 4) + (0,22)).setObjects(("XYLAN-ATM-MIB", "atmxPortSlotIndex"), ("XYLAN-ATM-MIB", "atmxPortPortIndex"), ("XYLAN-ATM-MIB", "atmxPortEnableILMI"))
atmConnectionM = NotificationType((1, 3, 6, 1, 4, 1, 800, 3, 1, 1, 4) + (0,23)).setObjects(("XYLAN-ATM-MIB", "atmxVccSlotIndex"), ("XYLAN-ATM-MIB", "atmxVccPortIndex"), ("XYLAN-ATM-MIB", "atmxVccVpi"), ("XYLAN-ATM-MIB", "atmxVccVci"), ("XYLAN-ATM-MIB", "atmxVccAdmStatus"))
atmServiceM = NotificationType((1, 3, 6, 1, 4, 1, 800, 3, 1, 1, 4) + (0,24)).setObjects(("XYLAN-ATM-MIB", "atmxServiceSlotIndex"), ("XYLAN-ATM-MIB", "atmxServicePortIndex"), ("XYLAN-ATM-MIB", "atmxServiceNumber"), ("XYLAN-ATM-MIB", "atmxServiceAdmStatus"))
dlciNewM = NotificationType((1, 3, 6, 1, 4, 1, 800, 3, 1, 1, 4) + (0,27)).setObjects(("XYLAN-FRAME-RELAY-MIB", "frxVcControlSlotIndex"), ("XYLAN-FRAME-RELAY-MIB", "frxVcControlPortIndex"), ("XYLAN-FRAME-RELAY-MIB", "frxVcControlDlci"))
dlciDelM = NotificationType((1, 3, 6, 1, 4, 1, 800, 3, 1, 1, 4) + (0,28)).setObjects(("XYLAN-FRAME-RELAY-MIB", "frxVcControlSlotIndex"), ("XYLAN-FRAME-RELAY-MIB", "frxVcControlPortIndex"), ("XYLAN-FRAME-RELAY-MIB", "frxVcControlDlci"))
dlciUpM = NotificationType((1, 3, 6, 1, 4, 1, 800, 3, 1, 1, 4) + (0,29)).setObjects(("XYLAN-FRAME-RELAY-MIB", "frxVcControlSlotIndex"), ("XYLAN-FRAME-RELAY-MIB", "frxVcControlPortIndex"), ("XYLAN-FRAME-RELAY-MIB", "frxVcControlDlci"))
dlciDnM = NotificationType((1, 3, 6, 1, 4, 1, 800, 3, 1, 1, 4) + (0,30)).setObjects(("XYLAN-FRAME-RELAY-MIB", "frxVcControlSlotIndex"), ("XYLAN-FRAME-RELAY-MIB", "frxVcControlPortIndex"), ("XYLAN-FRAME-RELAY-MIB", "frxVcControlDlci"))
portManualForwardingModeM = NotificationType((1, 3, 6, 1, 4, 1, 800, 3, 1, 1, 4) + (0,31)).setObjects(("XYLAN-PORT-MIB", "vportSlot"), ("XYLAN-PORT-MIB", "vportIF"), ("XYLAN-PORT-MIB", "vportFuncType"), ("XYLAN-PORT-MIB", "vportFuncTypeInstance"))
fddiCFStateChangeM = NotificationType((1, 3, 6, 1, 4, 1, 800, 3, 1, 1, 4) + (0,32)).setObjects(("FDDI-SMT73-MIB", "fddimibSMTIndex"), ("FDDI-SMT73-MIB", "fddimibSMTCFState"))
duplicateIPaddressM = NotificationType((1, 3, 6, 1, 4, 1, 800, 3, 1, 1, 4) + (0,35)).setObjects(("XYLAN-IP-MIB", "xylanIpAssocAddr"), ("XYLAN-IP-MIB", "xylanIpAssocMac"), ("XYLAN-IP-MIB", "xylanIpAssocSlot"), ("XYLAN-IP-MIB", "xylanIpAssocIntf"), ("XYLAN-IP-MIB", "xylanIpAssocDupMac"), ("XYLAN-IP-MIB", "xylanIpAssocDupSlot"), ("XYLAN-IP-MIB", "xylanIpAssocDupIntf"))
duplicateMACaddressM = NotificationType((1, 3, 6, 1, 4, 1, 800, 3, 1, 1, 4) + (0,36)).setObjects(("XYLAN-VLAN-MIB", "vDupMacMac"), ("XYLAN-VLAN-MIB", "vDupMacSlot"), ("XYLAN-VLAN-MIB", "vDupMacIntf"), ("XYLAN-VLAN-MIB", "vDupMacTime"))
healthThresholdRisingM = NotificationType((1, 3, 6, 1, 4, 1, 800, 3, 1, 1, 4) + (0,37))
healthThresholdFallingM = NotificationType((1, 3, 6, 1, 4, 1, 800, 3, 1, 1, 4) + (0,38))
healthThresholdDeviceM = NotificationType((1, 3, 6, 1, 4, 1, 800, 3, 1, 1, 4) + (0,39)).setObjects(("XYLAN-HEALTH-MIB", "healthThreshDevTrapData"))
healthThresholdModuleM = NotificationType((1, 3, 6, 1, 4, 1, 800, 3, 1, 1, 4) + (0,40)).setObjects(("XYLAN-HEALTH-MIB", "healthThreshModTrapCount"), ("XYLAN-HEALTH-MIB", "healthThreshModTrapData"))
pnniRouteConflictPortM = NotificationType((1, 3, 6, 1, 4, 1, 800, 3, 1, 1, 4) + (0,50))
pnniRouteConflictSamePGM = NotificationType((1, 3, 6, 1, 4, 1, 800, 3, 1, 1, 4) + (0,51))
mibBuilder.exportSymbols("XYLANTRAP-M-MIB", powerEventM=powerEventM, ilmiStateM=ilmiStateM, loginViolationM=loginViolationM, fddiCFStateChangeM=fddiCFStateChangeM, portLinkDownEventM=portLinkDownEventM, duplicateMACaddressM=duplicateMACaddressM, portRecordMismatchM=portRecordMismatchM, atmConnectionM=atmConnectionM, tempAlarmM=tempAlarmM, healthThresholdDeviceM=healthThresholdDeviceM, portMoveM=portMoveM, sapTableFullM=sapTableFullM, duplicateIPaddressM=duplicateIPaddressM, healthThresholdFallingM=healthThresholdFallingM, systemEventM=systemEventM, moduleChangeM=moduleChangeM, pnniRouteConflictPortM=pnniRouteConflictPortM, groupChangeM=groupChangeM, dlciNewM=dlciNewM, healthThresholdModuleM=healthThresholdModuleM, vlanRouteTableFullM=vlanRouteTableFullM, atmServiceM=atmServiceM, dlciDelM=dlciDelM, moduleResetReloadM=moduleResetReloadM, portLinkUpEventM=portLinkUpEventM, controllerEventM=controllerEventM, macVlanViolationM=macVlanViolationM, macDuplicatePortM=macDuplicatePortM, portManualForwardingModeM=portManualForwardingModeM, dlciUpM=dlciUpM, atmSSCOPstateM=atmSSCOPstateM, healthThresholdRisingM=healthThresholdRisingM, dlciDnM=dlciDnM, pnniRouteConflictSamePGM=pnniRouteConflictSamePGM, portPartitionedM=portPartitionedM, vlanChangeM=vlanChangeM)
