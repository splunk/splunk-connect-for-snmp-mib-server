#
# PySNMP MIB module MICOM-NAS-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/MICOM-NAS-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 20:02:10 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, Integer, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "OctetString", "Integer", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueRangeConstraint, ValueSizeConstraint, SingleValueConstraint, ConstraintsIntersection, ConstraintsUnion = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueRangeConstraint", "ValueSizeConstraint", "SingleValueConstraint", "ConstraintsIntersection", "ConstraintsUnion")
micom_oscar, = mibBuilder.importSymbols("MICOM-OSCAR-MIB", "micom-oscar")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
iso, Unsigned32, NotificationType, Bits, Counter64, MibIdentifier, MibScalar, MibTable, MibTableRow, MibTableColumn, IpAddress, Integer32, Counter32, NotificationType, Gauge32, ModuleIdentity, ObjectIdentity, TimeTicks = mibBuilder.importSymbols("SNMPv2-SMI", "iso", "Unsigned32", "NotificationType", "Bits", "Counter64", "MibIdentifier", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "IpAddress", "Integer32", "Counter32", "NotificationType", "Gauge32", "ModuleIdentity", "ObjectIdentity", "TimeTicks")
TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString")
micom_nas = MibIdentifier((1, 3, 6, 1, 4, 1, 335, 1, 4, 16)).setLabel("micom-nas")
nasBase = MibIdentifier((1, 3, 6, 1, 4, 1, 335, 1, 4, 16, 1))
nasStat = MibIdentifier((1, 3, 6, 1, 4, 1, 335, 1, 4, 16, 2))
nasOscar = MibIdentifier((1, 3, 6, 1, 4, 1, 335, 1, 4, 16, 3))
nasDn = MibIdentifier((1, 3, 6, 1, 4, 1, 335, 1, 4, 16, 4))
nasNvParam = MibIdentifier((1, 3, 6, 1, 4, 1, 335, 1, 4, 16, 5))
nasOSCARHelloTime = MibScalar((1, 3, 6, 1, 4, 1, 335, 1, 4, 16, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(60, 8000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nasOSCARHelloTime.setStatus('mandatory')
nasOSCARCntrZero = MibScalar((1, 3, 6, 1, 4, 1, 335, 1, 4, 16, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("reset", 1)))).setMaxAccess("writeonly")
if mibBuilder.loadTexts: nasOSCARCntrZero.setStatus('obsolete')
nasOSCARTableSize = MibScalar((1, 3, 6, 1, 4, 1, 335, 1, 4, 16, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nasOSCARTableSize.setStatus('mandatory')
nasDNDNAdbSize = MibScalar((1, 3, 6, 1, 4, 1, 335, 1, 4, 16, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nasDNDNAdbSize.setStatus('mandatory')
nasInDNARequests = MibScalar((1, 3, 6, 1, 4, 1, 335, 1, 4, 16, 2, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nasInDNARequests.setStatus('mandatory')
nasInDNAResolveds = MibScalar((1, 3, 6, 1, 4, 1, 335, 1, 4, 16, 2, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nasInDNAResolveds.setStatus('mandatory')
nasInDNAUnResolveds = MibScalar((1, 3, 6, 1, 4, 1, 335, 1, 4, 16, 2, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nasInDNAUnResolveds.setStatus('mandatory')
nasInNACHellos = MibScalar((1, 3, 6, 1, 4, 1, 335, 1, 4, 16, 2, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nasInNACHellos.setStatus('mandatory')
nasInRegisters = MibScalar((1, 3, 6, 1, 4, 1, 335, 1, 4, 16, 2, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nasInRegisters.setStatus('mandatory')
nasInUnknowns = MibScalar((1, 3, 6, 1, 4, 1, 335, 1, 4, 16, 2, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nasInUnknowns.setStatus('mandatory')
nasOSCARRegSuccess = MibScalar((1, 3, 6, 1, 4, 1, 335, 1, 4, 16, 2, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nasOSCARRegSuccess.setStatus('mandatory')
nasOSCARRegFails = MibScalar((1, 3, 6, 1, 4, 1, 335, 1, 4, 16, 2, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nasOSCARRegFails.setStatus('mandatory')
nasOSCARTimedOuts = MibScalar((1, 3, 6, 1, 4, 1, 335, 1, 4, 16, 2, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nasOSCARTimedOuts.setStatus('mandatory')
nasOutNASHellos = MibScalar((1, 3, 6, 1, 4, 1, 335, 1, 4, 16, 2, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nasOutNASHellos.setStatus('mandatory')
nasOutRegisterRequests = MibScalar((1, 3, 6, 1, 4, 1, 335, 1, 4, 16, 2, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nasOutRegisterRequests.setStatus('mandatory')
nasOSCARTable = MibTable((1, 3, 6, 1, 4, 1, 335, 1, 4, 16, 3, 1), )
if mibBuilder.loadTexts: nasOSCARTable.setStatus('mandatory')
nasOSCAREntry = MibTableRow((1, 3, 6, 1, 4, 1, 335, 1, 4, 16, 3, 1, 1), ).setIndexNames((0, "MICOM-NAS-MIB", "nasOSCARCustomerId"), (0, "MICOM-NAS-MIB", "nasOSCARDNADigits"))
if mibBuilder.loadTexts: nasOSCAREntry.setStatus('mandatory')
nasOSCARCustomerId = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 16, 3, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nasOSCARCustomerId.setStatus('mandatory')
nasOSCARDNADigits = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 16, 3, 1, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 48))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nasOSCARDNADigits.setStatus('mandatory')
nasOSCARState = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 16, 3, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("valid", 1), ("invalid", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nasOSCARState.setStatus('mandatory')
nasOSCARIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 16, 3, 1, 1, 4), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nasOSCARIpAddr.setStatus('mandatory')
nasOSCARSuppDns = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 16, 3, 1, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nasOSCARSuppDns.setStatus('mandatory')
nasDNTable = MibTable((1, 3, 6, 1, 4, 1, 335, 1, 4, 16, 4, 1), )
if mibBuilder.loadTexts: nasDNTable.setStatus('mandatory')
nasDNEntry = MibTableRow((1, 3, 6, 1, 4, 1, 335, 1, 4, 16, 4, 1, 1), ).setIndexNames((0, "MICOM-NAS-MIB", "nasDNCustomerId"), (0, "MICOM-NAS-MIB", "nasDNDigits"))
if mibBuilder.loadTexts: nasDNEntry.setStatus('mandatory')
nasDNCustomerId = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 16, 4, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nasDNCustomerId.setStatus('mandatory')
nasDNDigits = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 16, 4, 1, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 40))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nasDNDigits.setStatus('mandatory')
nasDNDNADigits = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 16, 4, 1, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 48))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nasDNDNADigits.setStatus('mandatory')
nasDNState = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 16, 4, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("valid", 1), ("invalid", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nasDNState.setStatus('mandatory')
nasNvOSCARHelloTime = MibScalar((1, 3, 6, 1, 4, 1, 335, 1, 4, 16, 5, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(60, 8000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nasNvOSCARHelloTime.setStatus('mandatory')
mibBuilder.exportSymbols("MICOM-NAS-MIB", nasOSCARHelloTime=nasOSCARHelloTime, nasOSCARDNADigits=nasOSCARDNADigits, nasOutRegisterRequests=nasOutRegisterRequests, nasDNDigits=nasDNDigits, nasInUnknowns=nasInUnknowns, nasOSCARTimedOuts=nasOSCARTimedOuts, nasInRegisters=nasInRegisters, nasInDNAUnResolveds=nasInDNAUnResolveds, nasBase=nasBase, nasOSCARRegFails=nasOSCARRegFails, nasDn=nasDn, nasDNEntry=nasDNEntry, nasDNDNAdbSize=nasDNDNAdbSize, nasInDNARequests=nasInDNARequests, nasOutNASHellos=nasOutNASHellos, nasOSCARTable=nasOSCARTable, nasOscar=nasOscar, nasDNState=nasDNState, nasOSCARCustomerId=nasOSCARCustomerId, nasDNCustomerId=nasDNCustomerId, nasOSCARSuppDns=nasOSCARSuppDns, nasNvParam=nasNvParam, nasStat=nasStat, nasOSCARRegSuccess=nasOSCARRegSuccess, nasDNDNADigits=nasDNDNADigits, nasOSCARTableSize=nasOSCARTableSize, nasOSCARIpAddr=nasOSCARIpAddr, nasOSCARState=nasOSCARState, micom_nas=micom_nas, nasOSCARCntrZero=nasOSCARCntrZero, nasNvOSCARHelloTime=nasNvOSCARHelloTime, nasOSCAREntry=nasOSCAREntry, nasDNTable=nasDNTable, nasInNACHellos=nasInNACHellos, nasInDNAResolveds=nasInDNAResolveds)
