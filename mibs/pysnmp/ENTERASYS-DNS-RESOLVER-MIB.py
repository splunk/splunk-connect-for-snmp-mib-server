#
# PySNMP MIB module ENTERASYS-DNS-RESOLVER-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/ENTERASYS-DNS-RESOLVER-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 18:48:53 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, ObjectIdentifier, Integer = mibBuilder.importSymbols("ASN1", "OctetString", "ObjectIdentifier", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueRangeConstraint, ConstraintsIntersection, ConstraintsUnion, SingleValueConstraint, ValueSizeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueRangeConstraint", "ConstraintsIntersection", "ConstraintsUnion", "SingleValueConstraint", "ValueSizeConstraint")
etsysModules, = mibBuilder.importSymbols("ENTERASYS-MIB-NAMES", "etsysModules")
InetAddress, InetAddressType, InetPortNumber = mibBuilder.importSymbols("INET-ADDRESS-MIB", "InetAddress", "InetAddressType", "InetPortNumber")
SnmpAdminString, = mibBuilder.importSymbols("SNMP-FRAMEWORK-MIB", "SnmpAdminString")
ObjectGroup, ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ObjectGroup", "ModuleCompliance", "NotificationGroup")
Unsigned32, ModuleIdentity, MibScalar, MibTable, MibTableRow, MibTableColumn, Counter32, iso, ObjectIdentity, Gauge32, IpAddress, MibIdentifier, TimeTicks, Counter64, Integer32, Bits, NotificationType = mibBuilder.importSymbols("SNMPv2-SMI", "Unsigned32", "ModuleIdentity", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Counter32", "iso", "ObjectIdentity", "Gauge32", "IpAddress", "MibIdentifier", "TimeTicks", "Counter64", "Integer32", "Bits", "NotificationType")
TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString")
etsysDnsResolverMIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 5624, 1, 2, 63))
etsysDnsResolverMIB.setRevisions(('2008-08-11 15:48', '2008-06-18 20:56',))
if mibBuilder.loadTexts: etsysDnsResolverMIB.setLastUpdated('200808111548Z')
if mibBuilder.loadTexts: etsysDnsResolverMIB.setOrganization('Enterasys Networks, Inc.')
etsysDnsResolverObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 5624, 1, 2, 63, 1))
etsysDnsResolverSystem = MibIdentifier((1, 3, 6, 1, 4, 1, 5624, 1, 2, 63, 1, 1))
etsysDnsResolverServiceType = MibScalar((1, 3, 6, 1, 4, 1, 5624, 1, 2, 63, 1, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("recursiveOnly", 1), ("iterativeOnly", 2), ("recursiveAndIterative", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: etsysDnsResolverServiceType.setStatus('current')
etsysDnsResolverDomainName = MibScalar((1, 3, 6, 1, 4, 1, 5624, 1, 2, 63, 1, 1, 2), SnmpAdminString().clone(hexValue="")).setMaxAccess("readwrite")
if mibBuilder.loadTexts: etsysDnsResolverDomainName.setStatus('current')
etsysDnsResolverPrimaryServerAddrType = MibScalar((1, 3, 6, 1, 4, 1, 5624, 1, 2, 63, 1, 1, 3), InetAddressType().clone('unknown')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: etsysDnsResolverPrimaryServerAddrType.setStatus('current')
etsysDnsResolverPrimaryServerAddr = MibScalar((1, 3, 6, 1, 4, 1, 5624, 1, 2, 63, 1, 1, 4), InetAddress().clone(hexValue="")).setMaxAccess("readwrite")
if mibBuilder.loadTexts: etsysDnsResolverPrimaryServerAddr.setStatus('current')
etsysDnsResolverSecondaryServerAddrType = MibScalar((1, 3, 6, 1, 4, 1, 5624, 1, 2, 63, 1, 1, 5), InetAddressType().clone('unknown')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: etsysDnsResolverSecondaryServerAddrType.setStatus('current')
etsysDnsResolverSecondaryServerAddr = MibScalar((1, 3, 6, 1, 4, 1, 5624, 1, 2, 63, 1, 1, 6), InetAddress().clone(hexValue="")).setMaxAccess("readwrite")
if mibBuilder.loadTexts: etsysDnsResolverSecondaryServerAddr.setStatus('current')
etsysDnsResolverTertiaryServerAddrType = MibScalar((1, 3, 6, 1, 4, 1, 5624, 1, 2, 63, 1, 1, 7), InetAddressType().clone('unknown')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: etsysDnsResolverTertiaryServerAddrType.setStatus('current')
etsysDnsResolverTertiaryServerAddr = MibScalar((1, 3, 6, 1, 4, 1, 5624, 1, 2, 63, 1, 1, 8), InetAddress().clone(hexValue="")).setMaxAccess("readwrite")
if mibBuilder.loadTexts: etsysDnsResolverTertiaryServerAddr.setStatus('current')
etsysDnsResolverQuaternaryServerAddrType = MibScalar((1, 3, 6, 1, 4, 1, 5624, 1, 2, 63, 1, 1, 9), InetAddressType().clone('unknown')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: etsysDnsResolverQuaternaryServerAddrType.setStatus('current')
etsysDnsResolverQuaternaryServerAddr = MibScalar((1, 3, 6, 1, 4, 1, 5624, 1, 2, 63, 1, 1, 10), InetAddress().clone(hexValue="")).setMaxAccess("readwrite")
if mibBuilder.loadTexts: etsysDnsResolverQuaternaryServerAddr.setStatus('current')
etsysDnsResolverIpv4DnsZone = MibScalar((1, 3, 6, 1, 4, 1, 5624, 1, 2, 63, 1, 1, 11), SnmpAdminString().clone('in-addr.arpa')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: etsysDnsResolverIpv4DnsZone.setStatus('current')
etsysDnsResolverIpv6DnsZone = MibScalar((1, 3, 6, 1, 4, 1, 5624, 1, 2, 63, 1, 1, 12), SnmpAdminString().clone('ip6.arpa')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: etsysDnsResolverIpv6DnsZone.setStatus('current')
etsysDnsResolverServerPortNumber = MibScalar((1, 3, 6, 1, 4, 1, 5624, 1, 2, 63, 1, 1, 13), InetPortNumber().clone(53)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: etsysDnsResolverServerPortNumber.setStatus('current')
etsysDnsResolverQueryTimeout = MibScalar((1, 3, 6, 1, 4, 1, 5624, 1, 2, 63, 1, 1, 14), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 100)).clone(10)).setUnits('seconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: etsysDnsResolverQueryTimeout.setStatus('current')
etsysDnsResolverQueryRetries = MibScalar((1, 3, 6, 1, 4, 1, 5624, 1, 2, 63, 1, 1, 15), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 10)).clone(2)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: etsysDnsResolverQueryRetries.setStatus('current')
etsysDnsResolverEnableStatus = MibScalar((1, 3, 6, 1, 4, 1, 5624, 1, 2, 63, 1, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('enabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: etsysDnsResolverEnableStatus.setStatus('current')
etsysDnsResolverConformance = MibIdentifier((1, 3, 6, 1, 4, 1, 5624, 1, 2, 63, 2))
etsysDnsResolverGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 5624, 1, 2, 63, 2, 1))
etsysDnsResolverCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 5624, 1, 2, 63, 2, 2))
etsysDnsResolverPrimaryGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 5624, 1, 2, 63, 2, 1, 1)).setObjects(("ENTERASYS-DNS-RESOLVER-MIB", "etsysDnsResolverServiceType"), ("ENTERASYS-DNS-RESOLVER-MIB", "etsysDnsResolverDomainName"), ("ENTERASYS-DNS-RESOLVER-MIB", "etsysDnsResolverPrimaryServerAddrType"), ("ENTERASYS-DNS-RESOLVER-MIB", "etsysDnsResolverPrimaryServerAddr"), ("ENTERASYS-DNS-RESOLVER-MIB", "etsysDnsResolverIpv4DnsZone"), ("ENTERASYS-DNS-RESOLVER-MIB", "etsysDnsResolverIpv6DnsZone"), ("ENTERASYS-DNS-RESOLVER-MIB", "etsysDnsResolverServerPortNumber"), ("ENTERASYS-DNS-RESOLVER-MIB", "etsysDnsResolverQueryTimeout"), ("ENTERASYS-DNS-RESOLVER-MIB", "etsysDnsResolverQueryRetries"), ("ENTERASYS-DNS-RESOLVER-MIB", "etsysDnsResolverEnableStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    etsysDnsResolverPrimaryGroup = etsysDnsResolverPrimaryGroup.setStatus('current')
etsysDnsResolverSecondaryGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 5624, 1, 2, 63, 2, 1, 2)).setObjects(("ENTERASYS-DNS-RESOLVER-MIB", "etsysDnsResolverSecondaryServerAddrType"), ("ENTERASYS-DNS-RESOLVER-MIB", "etsysDnsResolverSecondaryServerAddr"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    etsysDnsResolverSecondaryGroup = etsysDnsResolverSecondaryGroup.setStatus('current')
etsysDnsResolverTertiaryGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 5624, 1, 2, 63, 2, 1, 3)).setObjects(("ENTERASYS-DNS-RESOLVER-MIB", "etsysDnsResolverTertiaryServerAddrType"), ("ENTERASYS-DNS-RESOLVER-MIB", "etsysDnsResolverTertiaryServerAddr"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    etsysDnsResolverTertiaryGroup = etsysDnsResolverTertiaryGroup.setStatus('current')
etsysDnsResolverQuaternaryGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 5624, 1, 2, 63, 2, 1, 4)).setObjects(("ENTERASYS-DNS-RESOLVER-MIB", "etsysDnsResolverQuaternaryServerAddrType"), ("ENTERASYS-DNS-RESOLVER-MIB", "etsysDnsResolverQuaternaryServerAddr"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    etsysDnsResolverQuaternaryGroup = etsysDnsResolverQuaternaryGroup.setStatus('current')
etsysDnsResolverCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 5624, 1, 2, 63, 2, 2, 1)).setObjects(("ENTERASYS-DNS-RESOLVER-MIB", "etsysDnsResolverPrimaryGroup"), ("ENTERASYS-DNS-RESOLVER-MIB", "etsysDnsResolverSecondaryGroup"), ("ENTERASYS-DNS-RESOLVER-MIB", "etsysDnsResolverTertiaryGroup"), ("ENTERASYS-DNS-RESOLVER-MIB", "etsysDnsResolverQuaternaryGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    etsysDnsResolverCompliance = etsysDnsResolverCompliance.setStatus('current')
mibBuilder.exportSymbols("ENTERASYS-DNS-RESOLVER-MIB", etsysDnsResolverPrimaryGroup=etsysDnsResolverPrimaryGroup, etsysDnsResolverPrimaryServerAddr=etsysDnsResolverPrimaryServerAddr, etsysDnsResolverSecondaryServerAddr=etsysDnsResolverSecondaryServerAddr, PYSNMP_MODULE_ID=etsysDnsResolverMIB, etsysDnsResolverTertiaryGroup=etsysDnsResolverTertiaryGroup, etsysDnsResolverQueryTimeout=etsysDnsResolverQueryTimeout, etsysDnsResolverPrimaryServerAddrType=etsysDnsResolverPrimaryServerAddrType, etsysDnsResolverIpv6DnsZone=etsysDnsResolverIpv6DnsZone, etsysDnsResolverQuaternaryServerAddrType=etsysDnsResolverQuaternaryServerAddrType, etsysDnsResolverConformance=etsysDnsResolverConformance, etsysDnsResolverMIB=etsysDnsResolverMIB, etsysDnsResolverQuaternaryGroup=etsysDnsResolverQuaternaryGroup, etsysDnsResolverCompliances=etsysDnsResolverCompliances, etsysDnsResolverSecondaryGroup=etsysDnsResolverSecondaryGroup, etsysDnsResolverQueryRetries=etsysDnsResolverQueryRetries, etsysDnsResolverTertiaryServerAddrType=etsysDnsResolverTertiaryServerAddrType, etsysDnsResolverIpv4DnsZone=etsysDnsResolverIpv4DnsZone, etsysDnsResolverQuaternaryServerAddr=etsysDnsResolverQuaternaryServerAddr, etsysDnsResolverDomainName=etsysDnsResolverDomainName, etsysDnsResolverServiceType=etsysDnsResolverServiceType, etsysDnsResolverEnableStatus=etsysDnsResolverEnableStatus, etsysDnsResolverGroups=etsysDnsResolverGroups, etsysDnsResolverObjects=etsysDnsResolverObjects, etsysDnsResolverSystem=etsysDnsResolverSystem, etsysDnsResolverTertiaryServerAddr=etsysDnsResolverTertiaryServerAddr, etsysDnsResolverServerPortNumber=etsysDnsResolverServerPortNumber, etsysDnsResolverSecondaryServerAddrType=etsysDnsResolverSecondaryServerAddrType, etsysDnsResolverCompliance=etsysDnsResolverCompliance)
