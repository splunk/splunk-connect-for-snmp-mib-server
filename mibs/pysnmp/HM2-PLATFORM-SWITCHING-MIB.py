#
# PySNMP MIB module HM2-PLATFORM-SWITCHING-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/HM2-PLATFORM-SWITCHING-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 19:19:34 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, OctetString, Integer = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "OctetString", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsUnion, ValueRangeConstraint, ConstraintsIntersection, ValueSizeConstraint, SingleValueConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsUnion", "ValueRangeConstraint", "ConstraintsIntersection", "ValueSizeConstraint", "SingleValueConstraint")
dot1dBasePortEntry, = mibBuilder.importSymbols("BRIDGE-MIB", "dot1dBasePortEntry")
hm2PlatformMibs, HmEnabledStatus = mibBuilder.importSymbols("HM2-TC-MIB", "hm2PlatformMibs", "HmEnabledStatus")
ifIndex, InterfaceIndex, InterfaceIndexOrZero = mibBuilder.importSymbols("IF-MIB", "ifIndex", "InterfaceIndex", "InterfaceIndexOrZero")
InetAddress, InetAddressType = mibBuilder.importSymbols("INET-ADDRESS-MIB", "InetAddress", "InetAddressType")
dot1dPortGmrpEntry, = mibBuilder.importSymbols("P-BRIDGE-MIB", "dot1dPortGmrpEntry")
VlanId, PortList, dot1qPortVlanEntry, dot1qFdbId, VlanIndex, dot1qVlanIndex = mibBuilder.importSymbols("Q-BRIDGE-MIB", "VlanId", "PortList", "dot1qPortVlanEntry", "dot1qFdbId", "VlanIndex", "dot1qVlanIndex")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
ObjectIdentity, Counter64, Gauge32, Bits, Unsigned32, TimeTicks, Integer32, MibIdentifier, IpAddress, ModuleIdentity, MibScalar, MibTable, MibTableRow, MibTableColumn, iso, Counter32, NotificationType = mibBuilder.importSymbols("SNMPv2-SMI", "ObjectIdentity", "Counter64", "Gauge32", "Bits", "Unsigned32", "TimeTicks", "Integer32", "MibIdentifier", "IpAddress", "ModuleIdentity", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "iso", "Counter32", "NotificationType")
TruthValue, RowStatus, DisplayString, MacAddress, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "TruthValue", "RowStatus", "DisplayString", "MacAddress", "TextualConvention")
hm2PlatformSwitching = ModuleIdentity((1, 3, 6, 1, 4, 1, 248, 12, 1))
hm2PlatformSwitching.setRevisions(('2011-04-12 00:00',))
if mibBuilder.loadTexts: hm2PlatformSwitching.setLastUpdated('201104120000Z')
if mibBuilder.loadTexts: hm2PlatformSwitching.setOrganization('Hirschmann Automation and Control GmbH')
class Hm2AgentPortMask(TextualConvention, OctetString):
    status = 'current'

class LagList(TextualConvention, OctetString):
    status = 'current'

class VlanList(TextualConvention, OctetString):
    status = 'current'

class Ipv6Address(TextualConvention, OctetString):
    status = 'current'
    displayHint = '2x:'
    subtypeSpec = OctetString.subtypeSpec + ValueSizeConstraint(16, 16)
    fixedLength = 16

class Ipv6AddressPrefix(TextualConvention, OctetString):
    status = 'current'
    displayHint = '2x:'
    subtypeSpec = OctetString.subtypeSpec + ValueSizeConstraint(0, 16)

class Ipv6AddressIfIdentifier(TextualConvention, OctetString):
    status = 'current'
    displayHint = '2x:'
    subtypeSpec = OctetString.subtypeSpec + ValueSizeConstraint(0, 8)

class Ipv6IfIndex(TextualConvention, Integer32):
    status = 'current'
    displayHint = 'd'
    subtypeSpec = Integer32.subtypeSpec + ValueRangeConstraint(1, 2147483647)

class Ipv6IfIndexOrZero(TextualConvention, Integer32):
    status = 'current'
    displayHint = 'd'
    subtypeSpec = Integer32.subtypeSpec + ValueRangeConstraint(0, 2147483647)

hm2AgentConfigGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 248, 12, 1, 2))
hm2AgentLagConfigGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 248, 12, 1, 2, 2))
hm2AgentLagConfigCreate = MibScalar((1, 3, 6, 1, 4, 1, 248, 12, 1, 2, 2, 1), DisplayString().subtype(subtypeSpec=ConstraintsUnion(ValueSizeConstraint(0, 0), ValueSizeConstraint(1, 15), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hm2AgentLagConfigCreate.setStatus('current')
hm2AgentLagSummaryConfigTable = MibTable((1, 3, 6, 1, 4, 1, 248, 12, 1, 2, 2, 2), )
if mibBuilder.loadTexts: hm2AgentLagSummaryConfigTable.setStatus('current')
hm2AgentLagSummaryConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 248, 12, 1, 2, 2, 2, 1), ).setIndexNames((0, "HM2-PLATFORM-SWITCHING-MIB", "hm2AgentLagSummaryLagIndex"))
if mibBuilder.loadTexts: hm2AgentLagSummaryConfigEntry.setStatus('current')
hm2AgentLagSummaryLagIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 12, 1, 2, 2, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hm2AgentLagSummaryLagIndex.setStatus('current')
hm2AgentLagSummaryName = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 12, 1, 2, 2, 2, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 15))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hm2AgentLagSummaryName.setStatus('current')
hm2AgentLagSummaryFlushTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 12, 1, 2, 2, 2, 1, 3), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hm2AgentLagSummaryFlushTimer.setStatus('obsolete')
hm2AgentLagSummaryLinkTrap = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 12, 1, 2, 2, 2, 1, 4), HmEnabledStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hm2AgentLagSummaryLinkTrap.setStatus('current')
hm2AgentLagSummaryAdminMode = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 12, 1, 2, 2, 2, 1, 5), HmEnabledStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hm2AgentLagSummaryAdminMode.setStatus('current')
hm2AgentLagSummaryStpMode = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 12, 1, 2, 2, 2, 1, 6), HmEnabledStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hm2AgentLagSummaryStpMode.setStatus('current')
hm2AgentLagSummaryAddPort = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 12, 1, 2, 2, 2, 1, 7), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hm2AgentLagSummaryAddPort.setStatus('current')
hm2AgentLagSummaryDeletePort = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 12, 1, 2, 2, 2, 1, 8), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hm2AgentLagSummaryDeletePort.setStatus('current')
hm2AgentLagSummaryStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 12, 1, 2, 2, 2, 1, 9), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hm2AgentLagSummaryStatus.setStatus('current')
hm2AgentLagSummaryType = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 12, 1, 2, 2, 2, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("static", 1), ("dynamic", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hm2AgentLagSummaryType.setStatus('current')
hm2AgentLagSummaryStaticCapability = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 12, 1, 2, 2, 2, 1, 11), HmEnabledStatus().clone('disable')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hm2AgentLagSummaryStaticCapability.setStatus('current')
hm2AgentLagSummaryHashOption = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 12, 1, 2, 2, 2, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("sourceMacVlan", 1), ("destMacVlan", 2), ("sourceDestMacVlan", 3), ("sourceIPsourcePort", 4), ("destIPdestPort", 5), ("sourceDestIPPort", 6), ("enhanced", 7)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hm2AgentLagSummaryHashOption.setStatus('current')
hm2AgentLagSummaryMinimumActiveLinks = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 12, 1, 2, 2, 2, 1, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 8)).clone(1)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hm2AgentLagSummaryMinimumActiveLinks.setStatus('current')
hm2AgentLagSummaryMaxFrameSizeLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 12, 1, 2, 2, 2, 1, 248), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hm2AgentLagSummaryMaxFrameSizeLimit.setStatus('current')
hm2AgentLagSummaryMaxFrameSize = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 12, 1, 2, 2, 2, 1, 249), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hm2AgentLagSummaryMaxFrameSize.setStatus('current')
hm2AgentLagDetailedConfigTable = MibTable((1, 3, 6, 1, 4, 1, 248, 12, 1, 2, 2, 3), )
if mibBuilder.loadTexts: hm2AgentLagDetailedConfigTable.setStatus('current')
hm2AgentLagDetailedConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 248, 12, 1, 2, 2, 3, 1), ).setIndexNames((0, "HM2-PLATFORM-SWITCHING-MIB", "hm2AgentLagDetailedLagIndex"), (0, "HM2-PLATFORM-SWITCHING-MIB", "hm2AgentLagDetailedIfIndex"))
if mibBuilder.loadTexts: hm2AgentLagDetailedConfigEntry.setStatus('current')
hm2AgentLagDetailedLagIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 12, 1, 2, 2, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hm2AgentLagDetailedLagIndex.setStatus('current')
hm2AgentLagDetailedIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 12, 1, 2, 2, 3, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hm2AgentLagDetailedIfIndex.setStatus('current')
hm2AgentLagDetailedPortSpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 12, 1, 2, 2, 3, 1, 3), ObjectIdentifier()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hm2AgentLagDetailedPortSpeed.setStatus('current')
hm2AgentLagDetailedPortStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 12, 1, 2, 2, 3, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("active", 1), ("inactive", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hm2AgentLagDetailedPortStatus.setStatus('current')
hm2AgentLagConfigStaticCapability = MibScalar((1, 3, 6, 1, 4, 1, 248, 12, 1, 2, 2, 4), HmEnabledStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hm2AgentLagConfigStaticCapability.setStatus('obsolete')
hm2AgentLagConfigGroupHashOption = MibScalar((1, 3, 6, 1, 4, 1, 248, 12, 1, 2, 2, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("sourceMacVlan", 1), ("destMacVlan", 2), ("sourceDestMacVlan", 3), ("sourceIPsourcePort", 4), ("destIPdestPort", 5), ("sourceDestIPPort", 6), ("enhanced", 7)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hm2AgentLagConfigGroupHashOption.setStatus('current')
hm2AgentLagConfigGroupMaxNumPortsPerLag = MibScalar((1, 3, 6, 1, 4, 1, 248, 12, 1, 2, 2, 248), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hm2AgentLagConfigGroupMaxNumPortsPerLag.setStatus('current')
hm2AgentLagConfigGroupMaxNumOfLags = MibScalar((1, 3, 6, 1, 4, 1, 248, 12, 1, 2, 2, 249), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hm2AgentLagConfigGroupMaxNumOfLags.setStatus('current')
hm2AgentLagConfigGroupNumOfLagsConfigured = MibScalar((1, 3, 6, 1, 4, 1, 248, 12, 1, 2, 2, 250), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hm2AgentLagConfigGroupNumOfLagsConfigured.setStatus('current')
hm2AgentLagConfigGroupLagsConfigured = MibScalar((1, 3, 6, 1, 4, 1, 248, 12, 1, 2, 2, 251), LagList()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hm2AgentLagConfigGroupLagsConfigured.setStatus('current')
hm2AgentLagConfigSNMPExtensionGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 248, 12, 1, 2, 2, 260))
hm2AgentLagConfigGroupPortIsLagMemberErrorReturn = ObjectIdentity((1, 3, 6, 1, 4, 1, 248, 12, 1, 2, 2, 260, 1))
if mibBuilder.loadTexts: hm2AgentLagConfigGroupPortIsLagMemberErrorReturn.setStatus('current')
hm2AgentLagMirrorProbePortLagMemberErrorReturn = ObjectIdentity((1, 3, 6, 1, 4, 1, 248, 12, 1, 2, 2, 260, 2))
if mibBuilder.loadTexts: hm2AgentLagMirrorProbePortLagMemberErrorReturn.setStatus('current')
hm2AgentSwitchConfigGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 248, 12, 1, 2, 8))
hm2AgentSwitchAddressAgingTimeoutTable = MibTable((1, 3, 6, 1, 4, 1, 248, 12, 1, 2, 8, 4), )
if mibBuilder.loadTexts: hm2AgentSwitchAddressAgingTimeoutTable.setStatus('current')
hm2AgentSwitchAddressAgingTimeoutEntry = MibTableRow((1, 3, 6, 1, 4, 1, 248, 12, 1, 2, 8, 4, 1), ).setIndexNames((0, "Q-BRIDGE-MIB", "dot1qFdbId"))
if mibBuilder.loadTexts: hm2AgentSwitchAddressAgingTimeoutEntry.setStatus('current')
hm2AgentSwitchAddressAgingTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 12, 1, 2, 8, 4, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(10, 500000)).clone(30)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hm2AgentSwitchAddressAgingTimeout.setStatus('current')
hm2AgentSwitchStaticMacFilteringTable = MibTable((1, 3, 6, 1, 4, 1, 248, 12, 1, 2, 8, 5), )
if mibBuilder.loadTexts: hm2AgentSwitchStaticMacFilteringTable.setStatus('current')
hm2AgentSwitchStaticMacFilteringEntry = MibTableRow((1, 3, 6, 1, 4, 1, 248, 12, 1, 2, 8, 5, 1), ).setIndexNames((0, "HM2-PLATFORM-SWITCHING-MIB", "hm2AgentSwitchStaticMacFilteringVlanId"), (0, "HM2-PLATFORM-SWITCHING-MIB", "hm2AgentSwitchStaticMacFilteringAddress"))
if mibBuilder.loadTexts: hm2AgentSwitchStaticMacFilteringEntry.setStatus('current')
hm2AgentSwitchStaticMacFilteringVlanId = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 12, 1, 2, 8, 5, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hm2AgentSwitchStaticMacFilteringVlanId.setStatus('current')
hm2AgentSwitchStaticMacFilteringAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 12, 1, 2, 8, 5, 1, 2), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hm2AgentSwitchStaticMacFilteringAddress.setStatus('current')
hm2AgentSwitchStaticMacFilteringSourcePortMask = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 12, 1, 2, 8, 5, 1, 3), Hm2AgentPortMask()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hm2AgentSwitchStaticMacFilteringSourcePortMask.setStatus('current')
hm2AgentSwitchStaticMacFilteringDestPortMask = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 12, 1, 2, 8, 5, 1, 4), Hm2AgentPortMask()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hm2AgentSwitchStaticMacFilteringDestPortMask.setStatus('current')
hm2AgentSwitchStaticMacFilteringStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 12, 1, 2, 8, 5, 1, 5), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hm2AgentSwitchStaticMacFilteringStatus.setStatus('current')
hm2AgentSwitchSnoopingGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 248, 12, 1, 2, 8, 6))
hm2AgentSwitchSnoopingCfgTable = MibTable((1, 3, 6, 1, 4, 1, 248, 12, 1, 2, 8, 6, 1), )
if mibBuilder.loadTexts: hm2AgentSwitchSnoopingCfgTable.setStatus('current')
hm2AgentSwitchSnoopingCfgEntry = MibTableRow((1, 3, 6, 1, 4, 1, 248, 12, 1, 2, 8, 6, 1, 1), ).setIndexNames((0, "HM2-PLATFORM-SWITCHING-MIB", "hm2AgentSwitchSnoopingProtocol"))
if mibBuilder.loadTexts: hm2AgentSwitchSnoopingCfgEntry.setStatus('current')
hm2AgentSwitchSnoopingProtocol = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 12, 1, 2, 8, 6, 1, 1, 1), InetAddressType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hm2AgentSwitchSnoopingProtocol.setStatus('current')
hm2AgentSwitchSnoopingAdminMode = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 12, 1, 2, 8, 6, 1, 1, 2), HmEnabledStatus().clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hm2AgentSwitchSnoopingAdminMode.setStatus('current')
hm2AgentSwitchSnoopingPortMask = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 12, 1, 2, 8, 6, 1, 1, 3), Hm2AgentPortMask().clone(hexValue="000000000000")).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hm2AgentSwitchSnoopingPortMask.setStatus('current')
hm2AgentSwitchSnoopingMulticastControlFramesProcessed = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 12, 1, 2, 8, 6, 1, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hm2AgentSwitchSnoopingMulticastControlFramesProcessed.setStatus('current')
hm2AgentSwitchSnoopingIntfGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 248, 12, 1, 2, 8, 7))
hm2AgentSwitchSnoopingIntfTable = MibTable((1, 3, 6, 1, 4, 1, 248, 12, 1, 2, 8, 7, 1), )
if mibBuilder.loadTexts: hm2AgentSwitchSnoopingIntfTable.setStatus('current')
hm2AgentSwitchSnoopingIntfEntry = MibTableRow((1, 3, 6, 1, 4, 1, 248, 12, 1, 2, 8, 7, 1, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "HM2-PLATFORM-SWITCHING-MIB", "hm2AgentSwitchSnoopingProtocol"))
if mibBuilder.loadTexts: hm2AgentSwitchSnoopingIntfEntry.setStatus('current')
hm2AgentSwitchSnoopingIntfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 12, 1, 2, 8, 7, 1, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hm2AgentSwitchSnoopingIntfIndex.setStatus('current')
hm2AgentSwitchSnoopingIntfAdminMode = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 12, 1, 2, 8, 7, 1, 1, 2), HmEnabledStatus().clone('enable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hm2AgentSwitchSnoopingIntfAdminMode.setStatus('current')
hm2AgentSwitchSnoopingIntfGroupMembershipInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 12, 1, 2, 8, 7, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(2, 3600)).clone(260)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hm2AgentSwitchSnoopingIntfGroupMembershipInterval.setStatus('current')
hm2AgentSwitchSnoopingIntfMaxResponseTime = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 12, 1, 2, 8, 7, 1, 1, 4), Integer32().clone(10)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hm2AgentSwitchSnoopingIntfMaxResponseTime.setStatus('current')
hm2AgentSwitchSnoopingIntfMRPExpirationTime = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 12, 1, 2, 8, 7, 1, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 3600)).clone(260)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hm2AgentSwitchSnoopingIntfMRPExpirationTime.setStatus('current')
hm2AgentSwitchSnoopingIntfFastLeaveAdminMode = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 12, 1, 2, 8, 7, 1, 1, 6), HmEnabledStatus().clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hm2AgentSwitchSnoopingIntfFastLeaveAdminMode.setStatus('current')
hm2AgentSwitchSnoopingIntfMulticastRouterMode = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 12, 1, 2, 8, 7, 1, 1, 7), HmEnabledStatus().clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hm2AgentSwitchSnoopingIntfMulticastRouterMode.setStatus('current')
hm2AgentSwitchSnoopingIntfVlanIDs = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 12, 1, 2, 8, 7, 1, 1, 8), VlanList()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hm2AgentSwitchSnoopingIntfVlanIDs.setStatus('current')
hm2AgentSwitchSnoopingVlanGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 248, 12, 1, 2, 8, 8))
hm2AgentSwitchSnoopingVlanTable = MibTable((1, 3, 6, 1, 4, 1, 248, 12, 1, 2, 8, 8, 1), )
if mibBuilder.loadTexts: hm2AgentSwitchSnoopingVlanTable.setStatus('current')
hm2AgentSwitchSnoopingVlanEntry = MibTableRow((1, 3, 6, 1, 4, 1, 248, 12, 1, 2, 8, 8, 1, 1), ).setIndexNames((0, "Q-BRIDGE-MIB", "dot1qVlanIndex"), (0, "HM2-PLATFORM-SWITCHING-MIB", "hm2AgentSwitchSnoopingProtocol"))
if mibBuilder.loadTexts: hm2AgentSwitchSnoopingVlanEntry.setStatus('current')
hm2AgentSwitchSnoopingVlanAdminMode = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 12, 1, 2, 8, 8, 1, 1, 1), HmEnabledStatus().clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hm2AgentSwitchSnoopingVlanAdminMode.setStatus('current')
hm2AgentSwitchSnoopingVlanGroupMembershipInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 12, 1, 2, 8, 8, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(2, 3600)).clone(260)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hm2AgentSwitchSnoopingVlanGroupMembershipInterval.setStatus('current')
hm2AgentSwitchSnoopingVlanMaxResponseTime = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 12, 1, 2, 8, 8, 1, 1, 3), Integer32().clone(10)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hm2AgentSwitchSnoopingVlanMaxResponseTime.setStatus('current')
hm2AgentSwitchSnoopingVlanFastLeaveAdminMode = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 12, 1, 2, 8, 8, 1, 1, 4), HmEnabledStatus().clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hm2AgentSwitchSnoopingVlanFastLeaveAdminMode.setStatus('current')
hm2AgentSwitchSnoopingVlanMRPExpirationTime = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 12, 1, 2, 8, 8, 1, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 3600)).clone(260)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hm2AgentSwitchSnoopingVlanMRPExpirationTime.setStatus('current')
hm2AgentSwitchSnoopingVlanReportSuppMode = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 12, 1, 2, 8, 8, 1, 1, 6), HmEnabledStatus().clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hm2AgentSwitchSnoopingVlanReportSuppMode.setStatus('current')
hm2AgentSwitchVlanStaticMrouterGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 248, 12, 1, 2, 8, 9))
hm2AgentSwitchVlanStaticMrouterTable = MibTable((1, 3, 6, 1, 4, 1, 248, 12, 1, 2, 8, 9, 1), )
if mibBuilder.loadTexts: hm2AgentSwitchVlanStaticMrouterTable.setStatus('current')
hm2AgentSwitchVlanStaticMrouterEntry = MibTableRow((1, 3, 6, 1, 4, 1, 248, 12, 1, 2, 8, 9, 1, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "Q-BRIDGE-MIB", "dot1qVlanIndex"), (0, "HM2-PLATFORM-SWITCHING-MIB", "hm2AgentSwitchSnoopingProtocol"))
if mibBuilder.loadTexts: hm2AgentSwitchVlanStaticMrouterEntry.setStatus('current')
hm2AgentSwitchVlanStaticMrouterAdminMode = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 12, 1, 2, 8, 9, 1, 1, 1), HmEnabledStatus().clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hm2AgentSwitchVlanStaticMrouterAdminMode.setStatus('current')
hm2AgentSwitchMFDBGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 248, 12, 1, 2, 8, 10))
hm2AgentSwitchMFDBTable = MibTable((1, 3, 6, 1, 4, 1, 248, 12, 1, 2, 8, 10, 1), )
if mibBuilder.loadTexts: hm2AgentSwitchMFDBTable.setStatus('current')
hm2AgentSwitchMFDBEntry = MibTableRow((1, 3, 6, 1, 4, 1, 248, 12, 1, 2, 8, 10, 1, 1), ).setIndexNames((0, "HM2-PLATFORM-SWITCHING-MIB", "hm2AgentSwitchMFDBVlanId"), (0, "HM2-PLATFORM-SWITCHING-MIB", "hm2AgentSwitchMFDBMacAddress"), (0, "HM2-PLATFORM-SWITCHING-MIB", "hm2AgentSwitchMFDBProtocolType"))
if mibBuilder.loadTexts: hm2AgentSwitchMFDBEntry.setStatus('current')
hm2AgentSwitchMFDBVlanId = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 12, 1, 2, 8, 10, 1, 1, 1), VlanIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hm2AgentSwitchMFDBVlanId.setStatus('current')
hm2AgentSwitchMFDBMacAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 12, 1, 2, 8, 10, 1, 1, 2), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hm2AgentSwitchMFDBMacAddress.setStatus('current')
hm2AgentSwitchMFDBProtocolType = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 12, 1, 2, 8, 10, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 248))).clone(namedValues=NamedValues(("static", 1), ("gmrp", 2), ("igmp", 3), ("mld", 4), ("mrp-mmrp", 248)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hm2AgentSwitchMFDBProtocolType.setStatus('current')
hm2AgentSwitchMFDBType = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 12, 1, 2, 8, 10, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("static", 1), ("dynamic", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hm2AgentSwitchMFDBType.setStatus('current')
hm2AgentSwitchMFDBDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 12, 1, 2, 8, 10, 1, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hm2AgentSwitchMFDBDescription.setStatus('current')
hm2AgentSwitchMFDBForwardingPortMask = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 12, 1, 2, 8, 10, 1, 1, 6), Hm2AgentPortMask()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hm2AgentSwitchMFDBForwardingPortMask.setStatus('current')
hm2AgentSwitchMFDBFilteringPortMask = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 12, 1, 2, 8, 10, 1, 1, 7), Hm2AgentPortMask()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hm2AgentSwitchMFDBFilteringPortMask.setStatus('current')
hm2AgentSwitchMFDBSummaryTable = MibTable((1, 3, 6, 1, 4, 1, 248, 12, 1, 2, 8, 10, 2), )
if mibBuilder.loadTexts: hm2AgentSwitchMFDBSummaryTable.setStatus('current')
hm2AgentSwitchMFDBSummaryEntry = MibTableRow((1, 3, 6, 1, 4, 1, 248, 12, 1, 2, 8, 10, 2, 1), ).setIndexNames((0, "HM2-PLATFORM-SWITCHING-MIB", "hm2AgentSwitchMFDBSummaryVlanId"), (0, "HM2-PLATFORM-SWITCHING-MIB", "hm2AgentSwitchMFDBSummaryMacAddress"))
if mibBuilder.loadTexts: hm2AgentSwitchMFDBSummaryEntry.setStatus('current')
hm2AgentSwitchMFDBSummaryVlanId = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 12, 1, 2, 8, 10, 2, 1, 1), VlanIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hm2AgentSwitchMFDBSummaryVlanId.setStatus('current')
hm2AgentSwitchMFDBSummaryMacAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 12, 1, 2, 8, 10, 2, 1, 2), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hm2AgentSwitchMFDBSummaryMacAddress.setStatus('current')
hm2AgentSwitchMFDBSummaryForwardingPortMask = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 12, 1, 2, 8, 10, 2, 1, 3), Hm2AgentPortMask()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hm2AgentSwitchMFDBSummaryForwardingPortMask.setStatus('current')
hm2AgentSwitchMFDBMaxTableEntries = MibScalar((1, 3, 6, 1, 4, 1, 248, 12, 1, 2, 8, 10, 3), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hm2AgentSwitchMFDBMaxTableEntries.setStatus('current')
hm2AgentSwitchMFDBMostEntriesUsed = MibScalar((1, 3, 6, 1, 4, 1, 248, 12, 1, 2, 8, 10, 4), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hm2AgentSwitchMFDBMostEntriesUsed.setStatus('current')
hm2AgentSwitchMFDBCurrentEntries = MibScalar((1, 3, 6, 1, 4, 1, 248, 12, 1, 2, 8, 10, 5), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hm2AgentSwitchMFDBCurrentEntries.setStatus('current')
hm2AgentSwitchStaticMacStatsGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 248, 12, 1, 2, 8, 248))
hm2AgentSwitchStaticMacEntries = MibScalar((1, 3, 6, 1, 4, 1, 248, 12, 1, 2, 8, 248, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hm2AgentSwitchStaticMacEntries.setStatus('current')
hm2AgentSwitchGARPGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 248, 12, 1, 2, 8, 249))
hm2AgentSwitchGmrpUnknownMulticastFilterMode = MibScalar((1, 3, 6, 1, 4, 1, 248, 12, 1, 2, 8, 249, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("flood", 1), ("discard", 2))).clone('flood')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hm2AgentSwitchGmrpUnknownMulticastFilterMode.setStatus('current')
hm2AgentSwitchGmrpPortTable = MibTable((1, 3, 6, 1, 4, 1, 248, 12, 1, 2, 8, 249, 10), )
if mibBuilder.loadTexts: hm2AgentSwitchGmrpPortTable.setStatus('current')
hm2AgentSwitchGmrpPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 248, 12, 1, 2, 8, 249, 10, 1), )
dot1dBasePortEntry.registerAugmentions(("HM2-PLATFORM-SWITCHING-MIB", "hm2AgentSwitchGmrpPortEntry"))
hm2AgentSwitchGmrpPortEntry.setIndexNames(*dot1dBasePortEntry.getIndexNames())
if mibBuilder.loadTexts: hm2AgentSwitchGmrpPortEntry.setStatus('current')
hm2AgentSwitchGmrpPortPktRx = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 12, 1, 2, 8, 249, 10, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hm2AgentSwitchGmrpPortPktRx.setStatus('current')
hm2AgentSwitchGmrpPortPktTx = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 12, 1, 2, 8, 249, 10, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hm2AgentSwitchGmrpPortPktTx.setStatus('current')
hm2AgentSwitchGvrpPortTable = MibTable((1, 3, 6, 1, 4, 1, 248, 12, 1, 2, 8, 249, 15), )
if mibBuilder.loadTexts: hm2AgentSwitchGvrpPortTable.setStatus('current')
hm2AgentSwitchGvrpPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 248, 12, 1, 2, 8, 249, 15, 1), )
dot1dBasePortEntry.registerAugmentions(("HM2-PLATFORM-SWITCHING-MIB", "hm2AgentSwitchGvrpPortEntry"))
hm2AgentSwitchGvrpPortEntry.setIndexNames(*dot1dBasePortEntry.getIndexNames())
if mibBuilder.loadTexts: hm2AgentSwitchGvrpPortEntry.setStatus('current')
hm2AgentSwitchGvrpPortPktRx = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 12, 1, 2, 8, 249, 15, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hm2AgentSwitchGvrpPortPktRx.setStatus('current')
hm2AgentSwitchGvrpPortPktTx = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 12, 1, 2, 8, 249, 15, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hm2AgentSwitchGvrpPortPktTx.setStatus('current')
hm2AgentSwitchVlanMacAssociationGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 248, 12, 1, 2, 8, 17))
hm2AgentSwitchVlanMacAssociationTable = MibTable((1, 3, 6, 1, 4, 1, 248, 12, 1, 2, 8, 17, 1), )
if mibBuilder.loadTexts: hm2AgentSwitchVlanMacAssociationTable.setStatus('current')
hm2AgentSwitchVlanMacAssociationEntry = MibTableRow((1, 3, 6, 1, 4, 1, 248, 12, 1, 2, 8, 17, 1, 1), ).setIndexNames((0, "HM2-PLATFORM-SWITCHING-MIB", "hm2AgentSwitchVlanMacAssociationMacAddress"), (0, "HM2-PLATFORM-SWITCHING-MIB", "hm2AgentSwitchVlanMacAssociationVlanId"))
if mibBuilder.loadTexts: hm2AgentSwitchVlanMacAssociationEntry.setStatus('current')
hm2AgentSwitchVlanMacAssociationMacAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 12, 1, 2, 8, 17, 1, 1, 1), MacAddress())
if mibBuilder.loadTexts: hm2AgentSwitchVlanMacAssociationMacAddress.setStatus('current')
hm2AgentSwitchVlanMacAssociationVlanId = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 12, 1, 2, 8, 17, 1, 1, 2), VlanIndex())
if mibBuilder.loadTexts: hm2AgentSwitchVlanMacAssociationVlanId.setStatus('current')
hm2AgentSwitchVlanMacAssociationRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 12, 1, 2, 8, 17, 1, 1, 3), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hm2AgentSwitchVlanMacAssociationRowStatus.setStatus('current')
hm2AgentSwitchProtectedPortConfigGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 248, 12, 1, 2, 8, 18))
hm2AgentSwitchProtectedPortTable = MibTable((1, 3, 6, 1, 4, 1, 248, 12, 1, 2, 8, 18, 1), )
if mibBuilder.loadTexts: hm2AgentSwitchProtectedPortTable.setStatus('current')
hm2AgentSwitchProtectedPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 248, 12, 1, 2, 8, 18, 1, 1), ).setIndexNames((0, "HM2-PLATFORM-SWITCHING-MIB", "hm2AgentSwitchProtectedPortGroupId"))
if mibBuilder.loadTexts: hm2AgentSwitchProtectedPortEntry.setStatus('current')
hm2AgentSwitchProtectedPortGroupId = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 12, 1, 2, 8, 18, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647)))
if mibBuilder.loadTexts: hm2AgentSwitchProtectedPortGroupId.setStatus('current')
hm2AgentSwitchProtectedPortGroupName = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 12, 1, 2, 8, 18, 1, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hm2AgentSwitchProtectedPortGroupName.setStatus('current')
hm2AgentSwitchProtectedPortPortList = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 12, 1, 2, 8, 18, 1, 1, 3), PortList()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hm2AgentSwitchProtectedPortPortList.setStatus('current')
hm2AgentSwitchVlanSubnetAssociationGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 248, 12, 1, 2, 8, 19))
hm2AgentSwitchVlanSubnetAssociationTable = MibTable((1, 3, 6, 1, 4, 1, 248, 12, 1, 2, 8, 19, 1), )
if mibBuilder.loadTexts: hm2AgentSwitchVlanSubnetAssociationTable.setStatus('current')
hm2AgentSwitchVlanSubnetAssociationEntry = MibTableRow((1, 3, 6, 1, 4, 1, 248, 12, 1, 2, 8, 19, 1, 1), ).setIndexNames((0, "HM2-PLATFORM-SWITCHING-MIB", "hm2AgentSwitchVlanSubnetAssociationIPAddress"), (0, "HM2-PLATFORM-SWITCHING-MIB", "hm2AgentSwitchVlanSubnetAssociationSubnetMask"), (0, "HM2-PLATFORM-SWITCHING-MIB", "hm2AgentSwitchVlanSubnetAssociationVlanId"))
if mibBuilder.loadTexts: hm2AgentSwitchVlanSubnetAssociationEntry.setStatus('current')
hm2AgentSwitchVlanSubnetAssociationIPAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 12, 1, 2, 8, 19, 1, 1, 1), IpAddress())
if mibBuilder.loadTexts: hm2AgentSwitchVlanSubnetAssociationIPAddress.setStatus('current')
hm2AgentSwitchVlanSubnetAssociationSubnetMask = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 12, 1, 2, 8, 19, 1, 1, 2), IpAddress())
if mibBuilder.loadTexts: hm2AgentSwitchVlanSubnetAssociationSubnetMask.setStatus('current')
hm2AgentSwitchVlanSubnetAssociationVlanId = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 12, 1, 2, 8, 19, 1, 1, 3), VlanIndex())
if mibBuilder.loadTexts: hm2AgentSwitchVlanSubnetAssociationVlanId.setStatus('current')
hm2AgentSwitchVlanSubnetAssociationRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 12, 1, 2, 8, 19, 1, 1, 4), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hm2AgentSwitchVlanSubnetAssociationRowStatus.setStatus('current')
hm2AgentSwitchSnoopingQuerierGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 248, 12, 1, 2, 8, 20))
hm2AgentSwitchSnoopingQuerierCfgTable = MibTable((1, 3, 6, 1, 4, 1, 248, 12, 1, 2, 8, 20, 1), )
if mibBuilder.loadTexts: hm2AgentSwitchSnoopingQuerierCfgTable.setStatus('current')
hm2AgentSwitchSnoopingQuerierCfgEntry = MibTableRow((1, 3, 6, 1, 4, 1, 248, 12, 1, 2, 8, 20, 1, 1), ).setIndexNames((0, "HM2-PLATFORM-SWITCHING-MIB", "hm2AgentSwitchSnoopingProtocol"))
if mibBuilder.loadTexts: hm2AgentSwitchSnoopingQuerierCfgEntry.setStatus('current')
hm2AgentSwitchSnoopingQuerierAdminMode = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 12, 1, 2, 8, 20, 1, 1, 1), HmEnabledStatus().clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hm2AgentSwitchSnoopingQuerierAdminMode.setStatus('current')
hm2AgentSwitchSnoopingQuerierVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 12, 1, 2, 8, 20, 1, 1, 2), Integer32().clone(2)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hm2AgentSwitchSnoopingQuerierVersion.setStatus('current')
hm2AgentSwitchSnoopingQuerierQueryInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 12, 1, 2, 8, 20, 1, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1800)).clone(60)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hm2AgentSwitchSnoopingQuerierQueryInterval.setStatus('current')
hm2AgentSwitchSnoopingQuerierExpiryInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 12, 1, 2, 8, 20, 1, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(60, 300)).clone(125)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hm2AgentSwitchSnoopingQuerierExpiryInterval.setStatus('current')
hm2AgentSwitchSnoopingQuerierVlanTable = MibTable((1, 3, 6, 1, 4, 1, 248, 12, 1, 2, 8, 20, 2), )
if mibBuilder.loadTexts: hm2AgentSwitchSnoopingQuerierVlanTable.setStatus('current')
hm2AgentSwitchSnoopingQuerierVlanEntry = MibTableRow((1, 3, 6, 1, 4, 1, 248, 12, 1, 2, 8, 20, 2, 1), ).setIndexNames((0, "Q-BRIDGE-MIB", "dot1qVlanIndex"), (0, "HM2-PLATFORM-SWITCHING-MIB", "hm2AgentSwitchSnoopingProtocol"))
if mibBuilder.loadTexts: hm2AgentSwitchSnoopingQuerierVlanEntry.setStatus('current')
hm2AgentSwitchSnoopingQuerierVlanAdminMode = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 12, 1, 2, 8, 20, 2, 1, 1), HmEnabledStatus().clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hm2AgentSwitchSnoopingQuerierVlanAdminMode.setStatus('current')
hm2AgentSwitchSnoopingQuerierVlanOperMode = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 12, 1, 2, 8, 20, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("disabled", 0), ("querier", 1), ("non-querier", 2))).clone('disabled')).setMaxAccess("readonly")
if mibBuilder.loadTexts: hm2AgentSwitchSnoopingQuerierVlanOperMode.setStatus('current')
hm2AgentSwitchSnoopingQuerierElectionParticipateMode = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 12, 1, 2, 8, 20, 2, 1, 3), HmEnabledStatus().clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hm2AgentSwitchSnoopingQuerierElectionParticipateMode.setStatus('deprecated')
hm2AgentSwitchSnoopingQuerierVlanAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 12, 1, 2, 8, 20, 2, 1, 4), InetAddress().clone(hexValue="00000000")).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hm2AgentSwitchSnoopingQuerierVlanAddress.setStatus('current')
hm2AgentSwitchSnoopingQuerierOperVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 12, 1, 2, 8, 20, 2, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hm2AgentSwitchSnoopingQuerierOperVersion.setStatus('current')
hm2AgentSwitchSnoopingQuerierOperMaxResponseTime = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 12, 1, 2, 8, 20, 2, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(-1, -1), ValueRangeConstraint(0, 2147483647), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hm2AgentSwitchSnoopingQuerierOperMaxResponseTime.setStatus('current')
hm2AgentSwitchSnoopingQuerierLastQuerierAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 12, 1, 2, 8, 20, 2, 1, 7), InetAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hm2AgentSwitchSnoopingQuerierLastQuerierAddress.setStatus('current')
hm2AgentSwitchSnoopingQuerierLastQuerierVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 12, 1, 2, 8, 20, 2, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hm2AgentSwitchSnoopingQuerierLastQuerierVersion.setStatus('current')
hm2AgentPortMirroringGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 248, 12, 1, 2, 10))
hm2AgentPortMirrorTable = MibTable((1, 3, 6, 1, 4, 1, 248, 12, 1, 2, 10, 4), )
if mibBuilder.loadTexts: hm2AgentPortMirrorTable.setStatus('current')
hm2AgentPortMirrorEntry = MibTableRow((1, 3, 6, 1, 4, 1, 248, 12, 1, 2, 10, 4, 1), ).setIndexNames((0, "HM2-PLATFORM-SWITCHING-MIB", "hm2AgentPortMirrorSessionNum"))
if mibBuilder.loadTexts: hm2AgentPortMirrorEntry.setStatus('current')
hm2AgentPortMirrorSessionNum = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 12, 1, 2, 10, 4, 1, 1), Unsigned32())
if mibBuilder.loadTexts: hm2AgentPortMirrorSessionNum.setStatus('current')
hm2AgentPortMirrorDestinationPort = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 12, 1, 2, 10, 4, 1, 2), InterfaceIndexOrZero()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hm2AgentPortMirrorDestinationPort.setStatus('current')
hm2AgentPortMirrorSourcePortMask = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 12, 1, 2, 10, 4, 1, 3), Hm2AgentPortMask()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hm2AgentPortMirrorSourcePortMask.setStatus('current')
hm2AgentPortMirrorAdminMode = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 12, 1, 2, 10, 4, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hm2AgentPortMirrorAdminMode.setStatus('current')
hm2AgentPortMirrorSourceVlan = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 12, 1, 2, 10, 4, 1, 5), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4042))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hm2AgentPortMirrorSourceVlan.setStatus('current')
hm2AgentPortMirrorRemoteSourceVlan = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 12, 1, 2, 10, 4, 1, 6), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(2, 4042), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hm2AgentPortMirrorRemoteSourceVlan.setStatus('current')
hm2AgentPortMirrorRemoteDestinationVlan = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 12, 1, 2, 10, 4, 1, 7), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(2, 4042), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hm2AgentPortMirrorRemoteDestinationVlan.setStatus('current')
hm2AgentPortMirrorReflectorPort = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 12, 1, 2, 10, 4, 1, 8), InterfaceIndexOrZero()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hm2AgentPortMirrorReflectorPort.setStatus('current')
hm2AgentPortMirrorAllowMgmtMode = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 12, 1, 2, 10, 4, 1, 9), HmEnabledStatus().clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hm2AgentPortMirrorAllowMgmtMode.setStatus('current')
hm2AgentPortMirrorReset = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 12, 1, 2, 10, 4, 1, 248), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("other", 1), ("reset", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hm2AgentPortMirrorReset.setStatus('current')
hm2AgentPortMirrorTypeTable = MibTable((1, 3, 6, 1, 4, 1, 248, 12, 1, 2, 10, 5), )
if mibBuilder.loadTexts: hm2AgentPortMirrorTypeTable.setStatus('current')
hm2AgentPortMirrorTypeEntry = MibTableRow((1, 3, 6, 1, 4, 1, 248, 12, 1, 2, 10, 5, 1), ).setIndexNames((0, "HM2-PLATFORM-SWITCHING-MIB", "hm2AgentPortMirrorSessionNum"), (0, "HM2-PLATFORM-SWITCHING-MIB", "hm2AgentPortMirrorTypeSourcePort"))
if mibBuilder.loadTexts: hm2AgentPortMirrorTypeEntry.setStatus('current')
hm2AgentPortMirrorTypeSourcePort = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 12, 1, 2, 10, 5, 1, 1), Unsigned32())
if mibBuilder.loadTexts: hm2AgentPortMirrorTypeSourcePort.setStatus('current')
hm2AgentPortMirrorTypeType = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 12, 1, 2, 10, 5, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("none", 0), ("tx", 1), ("rx", 2), ("txrx", 3))).clone('none')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hm2AgentPortMirrorTypeType.setStatus('current')
hm2AgentPortMirrorRemoteVlan = MibScalar((1, 3, 6, 1, 4, 1, 248, 12, 1, 2, 10, 6), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hm2AgentPortMirrorRemoteVlan.setStatus('current')
hm2AgentPortMirrorSNMPExtensionGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 248, 12, 1, 2, 10, 248))
hm2AgentPortMirrorVlanMirrorPortConflict = ObjectIdentity((1, 3, 6, 1, 4, 1, 248, 12, 1, 2, 10, 248, 1))
if mibBuilder.loadTexts: hm2AgentPortMirrorVlanMirrorPortConflict.setStatus('current')
hm2AgentPortMirrorPortVlanMirrorConflict = ObjectIdentity((1, 3, 6, 1, 4, 1, 248, 12, 1, 2, 10, 248, 2))
if mibBuilder.loadTexts: hm2AgentPortMirrorPortVlanMirrorConflict.setStatus('current')
hm2AgentPortMirrorProbePortAlreadySet = ObjectIdentity((1, 3, 6, 1, 4, 1, 248, 12, 1, 2, 10, 248, 3))
if mibBuilder.loadTexts: hm2AgentPortMirrorProbePortAlreadySet.setStatus('current')
hm2AgentPortMirrorProbePortVlanConflict = ObjectIdentity((1, 3, 6, 1, 4, 1, 248, 12, 1, 2, 10, 248, 4))
if mibBuilder.loadTexts: hm2AgentPortMirrorProbePortVlanConflict.setStatus('current')
hm2AgentPortMirrorVlanNotCreated = ObjectIdentity((1, 3, 6, 1, 4, 1, 248, 12, 1, 2, 10, 248, 5))
if mibBuilder.loadTexts: hm2AgentPortMirrorVlanNotCreated.setStatus('current')
hm2AgentPortMirrorInvalidSourcePort = ObjectIdentity((1, 3, 6, 1, 4, 1, 248, 12, 1, 2, 10, 248, 6))
if mibBuilder.loadTexts: hm2AgentPortMirrorInvalidSourcePort.setStatus('current')
hm2AgentPortMirrorSourcePortDestinationPortConflict = ObjectIdentity((1, 3, 6, 1, 4, 1, 248, 12, 1, 2, 10, 248, 7))
if mibBuilder.loadTexts: hm2AgentPortMirrorSourcePortDestinationPortConflict.setStatus('current')
hm2AgentPortMirrorDestinationPortInvalid = ObjectIdentity((1, 3, 6, 1, 4, 1, 248, 12, 1, 2, 10, 248, 8))
if mibBuilder.loadTexts: hm2AgentPortMirrorDestinationPortInvalid.setStatus('current')
hm2AgentPortMirrorVlanRspanVlanConflict = ObjectIdentity((1, 3, 6, 1, 4, 1, 248, 12, 1, 2, 10, 248, 9))
if mibBuilder.loadTexts: hm2AgentPortMirrorVlanRspanVlanConflict.setStatus('current')
hm2AgentPortMirrorRemoteSourceRemoteDestinationConflict = ObjectIdentity((1, 3, 6, 1, 4, 1, 248, 12, 1, 2, 10, 248, 10))
if mibBuilder.loadTexts: hm2AgentPortMirrorRemoteSourceRemoteDestinationConflict.setStatus('current')
hm2AgentPortMirrorReflectorPortInvalid = ObjectIdentity((1, 3, 6, 1, 4, 1, 248, 12, 1, 2, 10, 248, 11))
if mibBuilder.loadTexts: hm2AgentPortMirrorReflectorPortInvalid.setStatus('current')
hm2AgentPortMirrorSourcePortReflectorPortConflict = ObjectIdentity((1, 3, 6, 1, 4, 1, 248, 12, 1, 2, 10, 248, 12))
if mibBuilder.loadTexts: hm2AgentPortMirrorSourcePortReflectorPortConflict.setStatus('current')
hm2AgentPortMirrorReflectorPortVlanConflict = ObjectIdentity((1, 3, 6, 1, 4, 1, 248, 12, 1, 2, 10, 248, 13))
if mibBuilder.loadTexts: hm2AgentPortMirrorReflectorPortVlanConflict.setStatus('current')
hm2AgentPortMirrorPrivateVlanConfigured = ObjectIdentity((1, 3, 6, 1, 4, 1, 248, 12, 1, 2, 10, 248, 14))
if mibBuilder.loadTexts: hm2AgentPortMirrorPrivateVlanConfigured.setStatus('current')
hm2AgentPortMirrorDestinationRemotePortNotSet = ObjectIdentity((1, 3, 6, 1, 4, 1, 248, 12, 1, 2, 10, 248, 15))
if mibBuilder.loadTexts: hm2AgentPortMirrorDestinationRemotePortNotSet.setStatus('current')
hm2AgentPortMirrorRspanVlanInconsistent = ObjectIdentity((1, 3, 6, 1, 4, 1, 248, 12, 1, 2, 10, 248, 16))
if mibBuilder.loadTexts: hm2AgentPortMirrorRspanVlanInconsistent.setStatus('current')
hm2AgentPortMirrorRspanVlanIdInvalid = ObjectIdentity((1, 3, 6, 1, 4, 1, 248, 12, 1, 2, 10, 248, 17))
if mibBuilder.loadTexts: hm2AgentPortMirrorRspanVlanIdInvalid.setStatus('current')
hm2AgentDot3adAggPortTable = MibTable((1, 3, 6, 1, 4, 1, 248, 12, 1, 2, 12), )
if mibBuilder.loadTexts: hm2AgentDot3adAggPortTable.setStatus('current')
hm2AgentDot3adAggPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 248, 12, 1, 2, 12, 1), ).setIndexNames((0, "HM2-PLATFORM-SWITCHING-MIB", "hm2AgentDot3adAggPort"))
if mibBuilder.loadTexts: hm2AgentDot3adAggPortEntry.setStatus('current')
hm2AgentDot3adAggPort = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 12, 1, 2, 12, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hm2AgentDot3adAggPort.setStatus('current')
hm2AgentDot3adAggPortLACPMode = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 12, 1, 2, 12, 1, 2), HmEnabledStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hm2AgentDot3adAggPortLACPMode.setStatus('current')
hm2AgentPortConfigTable = MibTable((1, 3, 6, 1, 4, 1, 248, 12, 1, 2, 13), )
if mibBuilder.loadTexts: hm2AgentPortConfigTable.setStatus('current')
hm2AgentPortConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 248, 12, 1, 2, 13, 1), ).setIndexNames((0, "HM2-PLATFORM-SWITCHING-MIB", "hm2AgentPortDot1dBasePort"))
if mibBuilder.loadTexts: hm2AgentPortConfigEntry.setStatus('current')
hm2AgentPortDot1dBasePort = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 12, 1, 2, 13, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hm2AgentPortDot1dBasePort.setStatus('current')
hm2AgentPortIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 12, 1, 2, 13, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hm2AgentPortIfIndex.setStatus('current')
hm2AgentPortClearStats = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 12, 1, 2, 13, 1, 10), HmEnabledStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hm2AgentPortClearStats.setStatus('current')
hm2AgentPortDot3FlowControlMode = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 12, 1, 2, 13, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("symmetric", 1), ("asymmetric", 2), ("disable", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hm2AgentPortDot3FlowControlMode.setStatus('current')
hm2AgentPortMaxFrameSizeLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 12, 1, 2, 13, 1, 18), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hm2AgentPortMaxFrameSizeLimit.setStatus('current')
hm2AgentPortMaxFrameSize = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 12, 1, 2, 13, 1, 19), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hm2AgentPortMaxFrameSize.setStatus('current')
hm2AgentPortBroadcastControlMode = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 12, 1, 2, 13, 1, 20), HmEnabledStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hm2AgentPortBroadcastControlMode.setStatus('current')
hm2AgentPortBroadcastControlThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 12, 1, 2, 13, 1, 21), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 14880000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hm2AgentPortBroadcastControlThreshold.setStatus('current')
hm2AgentPortMulticastControlMode = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 12, 1, 2, 13, 1, 22), HmEnabledStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hm2AgentPortMulticastControlMode.setStatus('current')
hm2AgentPortMulticastControlThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 12, 1, 2, 13, 1, 23), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 14880000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hm2AgentPortMulticastControlThreshold.setStatus('current')
hm2AgentPortUnicastControlMode = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 12, 1, 2, 13, 1, 24), HmEnabledStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hm2AgentPortUnicastControlMode.setStatus('current')
hm2AgentPortUnicastControlThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 12, 1, 2, 13, 1, 25), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 14880000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hm2AgentPortUnicastControlThreshold.setStatus('current')
hm2AgentPortBroadcastControlThresholdUnit = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 12, 1, 2, 13, 1, 26), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("percent", 1), ("pps", 2))).clone('percent')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hm2AgentPortBroadcastControlThresholdUnit.setStatus('current')
hm2AgentPortMulticastControlThresholdUnit = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 12, 1, 2, 13, 1, 27), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("percent", 1), ("pps", 2))).clone('percent')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hm2AgentPortMulticastControlThresholdUnit.setStatus('current')
hm2AgentPortUnicastControlThresholdUnit = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 12, 1, 2, 13, 1, 28), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("percent", 1), ("pps", 2))).clone('percent')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hm2AgentPortUnicastControlThresholdUnit.setStatus('current')
hm2AgentPortVoiceVlanMode = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 12, 1, 2, 13, 1, 29), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("none", 1), ("vlanid", 2), ("dot1p", 3), ("vlanidanddot1p", 4), ("untagged", 5), ("disable", 6)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hm2AgentPortVoiceVlanMode.setStatus('current')
hm2AgentPortVoiceVlanID = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 12, 1, 2, 13, 1, 30), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4093))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hm2AgentPortVoiceVlanID.setStatus('current')
hm2AgentPortVoiceVlanPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 12, 1, 2, 13, 1, 31), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 7), ValueRangeConstraint(255, 255), )).clone(255)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hm2AgentPortVoiceVlanPriority.setStatus('current')
hm2AgentPortVoiceVlanDataPriorityMode = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 12, 1, 2, 13, 1, 32), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("trust", 1), ("untrust", 2))).clone('trust')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hm2AgentPortVoiceVlanDataPriorityMode.setStatus('current')
hm2AgentPortVoiceVlanOperationalStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 12, 1, 2, 13, 1, 33), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hm2AgentPortVoiceVlanOperationalStatus.setStatus('current')
hm2AgentPortVoiceVlanUntagged = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 12, 1, 2, 13, 1, 34), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("false", 0), ("true", 1))).clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hm2AgentPortVoiceVlanUntagged.setStatus('current')
hm2AgentPortVoiceVlanNoneMode = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 12, 1, 2, 13, 1, 35), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("false", 0), ("true", 1))).clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hm2AgentPortVoiceVlanNoneMode.setStatus('current')
hm2AgentPortVoiceVlanDSCP = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 12, 1, 2, 13, 1, 36), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hm2AgentPortVoiceVlanDSCP.setStatus('current')
hm2AgentPortVoiceVlanAuthMode = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 12, 1, 2, 13, 1, 37), HmEnabledStatus().clone('enable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hm2AgentPortVoiceVlanAuthMode.setStatus('current')
hm2AgentPortDot3FlowControlOperStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 12, 1, 2, 13, 1, 38), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("active", 1), ("inactive", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hm2AgentPortDot3FlowControlOperStatus.setStatus('current')
hm2AgentPortSfpLinkLossAlert = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 12, 1, 2, 13, 1, 248), HmEnabledStatus().clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hm2AgentPortSfpLinkLossAlert.setStatus('current')
hm2AgentProtocolConfigGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 248, 12, 1, 2, 14))
hm2AgentProtocolGroupTable = MibTable((1, 3, 6, 1, 4, 1, 248, 12, 1, 2, 14, 2), )
if mibBuilder.loadTexts: hm2AgentProtocolGroupTable.setStatus('current')
hm2AgentProtocolGroupEntry = MibTableRow((1, 3, 6, 1, 4, 1, 248, 12, 1, 2, 14, 2, 1), ).setIndexNames((0, "HM2-PLATFORM-SWITCHING-MIB", "hm2AgentProtocolGroupId"))
if mibBuilder.loadTexts: hm2AgentProtocolGroupEntry.setStatus('current')
hm2AgentProtocolGroupId = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 12, 1, 2, 14, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647)))
if mibBuilder.loadTexts: hm2AgentProtocolGroupId.setStatus('current')
hm2AgentProtocolGroupName = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 12, 1, 2, 14, 2, 1, 2), DisplayString().subtype(subtypeSpec=ConstraintsUnion(ValueSizeConstraint(0, 0), ValueSizeConstraint(1, 16), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hm2AgentProtocolGroupName.setStatus('current')
hm2AgentProtocolGroupVlanId = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 12, 1, 2, 14, 2, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4093))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hm2AgentProtocolGroupVlanId.setStatus('current')
hm2AgentProtocolGroupStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 12, 1, 2, 14, 2, 1, 7), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hm2AgentProtocolGroupStatus.setStatus('current')
hm2AgentProtocolGroupPortTable = MibTable((1, 3, 6, 1, 4, 1, 248, 12, 1, 2, 14, 3), )
if mibBuilder.loadTexts: hm2AgentProtocolGroupPortTable.setStatus('current')
hm2AgentProtocolGroupPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 248, 12, 1, 2, 14, 3, 1), ).setIndexNames((0, "HM2-PLATFORM-SWITCHING-MIB", "hm2AgentProtocolGroupId"), (0, "HM2-PLATFORM-SWITCHING-MIB", "hm2AgentProtocolGroupPortIfIndex"))
if mibBuilder.loadTexts: hm2AgentProtocolGroupPortEntry.setStatus('current')
hm2AgentProtocolGroupPortIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 12, 1, 2, 14, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hm2AgentProtocolGroupPortIfIndex.setStatus('current')
hm2AgentProtocolGroupPortStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 12, 1, 2, 14, 3, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hm2AgentProtocolGroupPortStatus.setStatus('current')
hm2AgentProtocolGroupProtocolTable = MibTable((1, 3, 6, 1, 4, 1, 248, 12, 1, 2, 14, 4), )
if mibBuilder.loadTexts: hm2AgentProtocolGroupProtocolTable.setStatus('current')
hm2AgentProtocolGroupProtocolEntry = MibTableRow((1, 3, 6, 1, 4, 1, 248, 12, 1, 2, 14, 4, 1), ).setIndexNames((0, "HM2-PLATFORM-SWITCHING-MIB", "hm2AgentProtocolGroupId"), (0, "HM2-PLATFORM-SWITCHING-MIB", "hm2AgentProtocolGroupProtocolID"))
if mibBuilder.loadTexts: hm2AgentProtocolGroupProtocolEntry.setStatus('current')
hm2AgentProtocolGroupProtocolID = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 12, 1, 2, 14, 4, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1536, 65535)))
if mibBuilder.loadTexts: hm2AgentProtocolGroupProtocolID.setStatus('current')
hm2AgentProtocolGroupProtocolStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 12, 1, 2, 14, 4, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hm2AgentProtocolGroupProtocolStatus.setStatus('current')
hm2AgentStpSwitchConfigGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 248, 12, 1, 2, 15))
hm2AgentStpConfigDigestKey = MibScalar((1, 3, 6, 1, 4, 1, 248, 12, 1, 2, 15, 1), OctetString().subtype(subtypeSpec=ValueSizeConstraint(16, 16)).setFixedLength(16)).setMaxAccess("readonly")
if mibBuilder.loadTexts: hm2AgentStpConfigDigestKey.setStatus('current')
hm2AgentStpConfigFormatSelector = MibScalar((1, 3, 6, 1, 4, 1, 248, 12, 1, 2, 15, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hm2AgentStpConfigFormatSelector.setStatus('current')
hm2AgentStpConfigName = MibScalar((1, 3, 6, 1, 4, 1, 248, 12, 1, 2, 15, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hm2AgentStpConfigName.setStatus('current')
hm2AgentStpConfigRevision = MibScalar((1, 3, 6, 1, 4, 1, 248, 12, 1, 2, 15, 4), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535)).clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hm2AgentStpConfigRevision.setStatus('current')
hm2AgentStpForceVersion = MibScalar((1, 3, 6, 1, 4, 1, 248, 12, 1, 2, 15, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("stp", 1), ("rstp", 2), ("mstp", 3))).clone('rstp')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hm2AgentStpForceVersion.setStatus('current')
hm2AgentStpAdminMode = MibScalar((1, 3, 6, 1, 4, 1, 248, 12, 1, 2, 15, 6), HmEnabledStatus().clone('enable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hm2AgentStpAdminMode.setStatus('current')
hm2AgentStpPortTable = MibTable((1, 3, 6, 1, 4, 1, 248, 12, 1, 2, 15, 7), )
if mibBuilder.loadTexts: hm2AgentStpPortTable.setStatus('current')
hm2AgentStpPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 248, 12, 1, 2, 15, 7, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: hm2AgentStpPortEntry.setStatus('current')
hm2AgentStpPortState = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 12, 1, 2, 15, 7, 1, 1), HmEnabledStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hm2AgentStpPortState.setStatus('current')
hm2AgentStpPortStatsMstpBpduRx = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 12, 1, 2, 15, 7, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hm2AgentStpPortStatsMstpBpduRx.setStatus('current')
hm2AgentStpPortStatsMstpBpduTx = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 12, 1, 2, 15, 7, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hm2AgentStpPortStatsMstpBpduTx.setStatus('current')
hm2AgentStpPortStatsRstpBpduRx = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 12, 1, 2, 15, 7, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hm2AgentStpPortStatsRstpBpduRx.setStatus('current')
hm2AgentStpPortStatsRstpBpduTx = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 12, 1, 2, 15, 7, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hm2AgentStpPortStatsRstpBpduTx.setStatus('current')
hm2AgentStpPortStatsStpBpduRx = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 12, 1, 2, 15, 7, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hm2AgentStpPortStatsStpBpduRx.setStatus('current')
hm2AgentStpPortStatsStpBpduTx = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 12, 1, 2, 15, 7, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hm2AgentStpPortStatsStpBpduTx.setStatus('current')
hm2AgentStpPortUpTime = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 12, 1, 2, 15, 7, 1, 8), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hm2AgentStpPortUpTime.setStatus('current')
hm2AgentStpPortMigrationCheck = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 12, 1, 2, 15, 7, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("false", 0), ("true", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hm2AgentStpPortMigrationCheck.setStatus('current')
hm2AgentStpCstConfigGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 248, 12, 1, 2, 15, 8))
hm2AgentStpCstHelloTime = MibScalar((1, 3, 6, 1, 4, 1, 248, 12, 1, 2, 15, 8, 1), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hm2AgentStpCstHelloTime.setStatus('current')
hm2AgentStpCstMaxAge = MibScalar((1, 3, 6, 1, 4, 1, 248, 12, 1, 2, 15, 8, 2), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hm2AgentStpCstMaxAge.setStatus('current')
hm2AgentStpCstRegionalRootId = MibScalar((1, 3, 6, 1, 4, 1, 248, 12, 1, 2, 15, 8, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(8, 8)).setFixedLength(8)).setMaxAccess("readonly")
if mibBuilder.loadTexts: hm2AgentStpCstRegionalRootId.setStatus('current')
hm2AgentStpCstRegionalRootPathCost = MibScalar((1, 3, 6, 1, 4, 1, 248, 12, 1, 2, 15, 8, 4), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hm2AgentStpCstRegionalRootPathCost.setStatus('current')
hm2AgentStpCstRootFwdDelay = MibScalar((1, 3, 6, 1, 4, 1, 248, 12, 1, 2, 15, 8, 5), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hm2AgentStpCstRootFwdDelay.setStatus('current')
hm2AgentStpCstBridgeFwdDelay = MibScalar((1, 3, 6, 1, 4, 1, 248, 12, 1, 2, 15, 8, 6), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(4, 30)).clone(15)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hm2AgentStpCstBridgeFwdDelay.setStatus('current')
hm2AgentStpCstBridgeHelloTime = MibScalar((1, 3, 6, 1, 4, 1, 248, 12, 1, 2, 15, 8, 7), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 2)).clone(2)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hm2AgentStpCstBridgeHelloTime.setStatus('current')
hm2AgentStpCstBridgeHoldTime = MibScalar((1, 3, 6, 1, 4, 1, 248, 12, 1, 2, 15, 8, 8), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hm2AgentStpCstBridgeHoldTime.setStatus('current')
hm2AgentStpCstBridgeMaxAge = MibScalar((1, 3, 6, 1, 4, 1, 248, 12, 1, 2, 15, 8, 9), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(6, 40)).clone(20)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hm2AgentStpCstBridgeMaxAge.setStatus('current')
hm2AgentStpCstBridgeMaxHops = MibScalar((1, 3, 6, 1, 4, 1, 248, 12, 1, 2, 15, 8, 10), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(6, 40)).clone(20)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hm2AgentStpCstBridgeMaxHops.setStatus('current')
hm2AgentStpCstBridgePriority = MibScalar((1, 3, 6, 1, 4, 1, 248, 12, 1, 2, 15, 8, 11), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 61440)).clone(32768)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hm2AgentStpCstBridgePriority.setStatus('current')
hm2AgentStpCstBridgeHoldCount = MibScalar((1, 3, 6, 1, 4, 1, 248, 12, 1, 2, 15, 8, 12), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 40)).clone(10)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hm2AgentStpCstBridgeHoldCount.setStatus('current')
hm2AgentStpCstPortTable = MibTable((1, 3, 6, 1, 4, 1, 248, 12, 1, 2, 15, 9), )
if mibBuilder.loadTexts: hm2AgentStpCstPortTable.setStatus('current')
hm2AgentStpCstPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 248, 12, 1, 2, 15, 9, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: hm2AgentStpCstPortEntry.setStatus('current')
hm2AgentStpCstPortOperEdge = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 12, 1, 2, 15, 9, 1, 1), HmEnabledStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hm2AgentStpCstPortOperEdge.setStatus('current')
hm2AgentStpCstPortOperPointToPoint = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 12, 1, 2, 15, 9, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("true", 1), ("false", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hm2AgentStpCstPortOperPointToPoint.setStatus('current')
hm2AgentStpCstPortTopologyChangeAck = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 12, 1, 2, 15, 9, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("true", 1), ("false", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hm2AgentStpCstPortTopologyChangeAck.setStatus('current')
hm2AgentStpCstPortEdge = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 12, 1, 2, 15, 9, 1, 4), HmEnabledStatus().clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hm2AgentStpCstPortEdge.setStatus('current')
hm2AgentStpCstPortForwardingState = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 12, 1, 2, 15, 9, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("discarding", 1), ("learning", 2), ("forwarding", 3), ("disabled", 4), ("manualFwd", 5), ("notParticipate", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hm2AgentStpCstPortForwardingState.setStatus('current')
hm2AgentStpCstPortId = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 12, 1, 2, 15, 9, 1, 6), OctetString().subtype(subtypeSpec=ValueSizeConstraint(2, 2)).setFixedLength(2)).setMaxAccess("readonly")
if mibBuilder.loadTexts: hm2AgentStpCstPortId.setStatus('current')
hm2AgentStpCstPortPathCost = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 12, 1, 2, 15, 9, 1, 7), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 200000000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hm2AgentStpCstPortPathCost.setStatus('current')
hm2AgentStpCstPortPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 12, 1, 2, 15, 9, 1, 8), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 240)).clone(128)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hm2AgentStpCstPortPriority.setStatus('current')
hm2AgentStpCstDesignatedBridgeId = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 12, 1, 2, 15, 9, 1, 9), OctetString().subtype(subtypeSpec=ValueSizeConstraint(8, 8)).setFixedLength(8)).setMaxAccess("readonly")
if mibBuilder.loadTexts: hm2AgentStpCstDesignatedBridgeId.setStatus('current')
hm2AgentStpCstDesignatedCost = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 12, 1, 2, 15, 9, 1, 10), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hm2AgentStpCstDesignatedCost.setStatus('current')
hm2AgentStpCstDesignatedPortId = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 12, 1, 2, 15, 9, 1, 11), OctetString().subtype(subtypeSpec=ValueSizeConstraint(2, 2)).setFixedLength(2)).setMaxAccess("readonly")
if mibBuilder.loadTexts: hm2AgentStpCstDesignatedPortId.setStatus('current')
hm2AgentStpCstExtPortPathCost = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 12, 1, 2, 15, 9, 1, 12), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 200000000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hm2AgentStpCstExtPortPathCost.setStatus('current')
hm2AgentStpCstPortBpduGuardEffect = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 12, 1, 2, 15, 9, 1, 13), HmEnabledStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hm2AgentStpCstPortBpduGuardEffect.setStatus('current')
hm2AgentStpCstPortBpduFilter = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 12, 1, 2, 15, 9, 1, 14), HmEnabledStatus().clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hm2AgentStpCstPortBpduFilter.setStatus('current')
hm2AgentStpCstPortBpduFlood = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 12, 1, 2, 15, 9, 1, 15), HmEnabledStatus().clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hm2AgentStpCstPortBpduFlood.setStatus('current')
hm2AgentStpCstPortAutoEdge = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 12, 1, 2, 15, 9, 1, 16), HmEnabledStatus().clone('enable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hm2AgentStpCstPortAutoEdge.setStatus('current')
hm2AgentStpCstPortRootGuard = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 12, 1, 2, 15, 9, 1, 17), HmEnabledStatus().clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hm2AgentStpCstPortRootGuard.setStatus('current')
hm2AgentStpCstPortTCNGuard = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 12, 1, 2, 15, 9, 1, 18), HmEnabledStatus().clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hm2AgentStpCstPortTCNGuard.setStatus('current')
hm2AgentStpCstPortLoopGuard = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 12, 1, 2, 15, 9, 1, 19), HmEnabledStatus().clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hm2AgentStpCstPortLoopGuard.setStatus('current')
hm2AgentStpMstTable = MibTable((1, 3, 6, 1, 4, 1, 248, 12, 1, 2, 15, 10), )
if mibBuilder.loadTexts: hm2AgentStpMstTable.setStatus('current')
hm2AgentStpMstEntry = MibTableRow((1, 3, 6, 1, 4, 1, 248, 12, 1, 2, 15, 10, 1), ).setIndexNames((0, "HM2-PLATFORM-SWITCHING-MIB", "hm2AgentStpMstId"))
if mibBuilder.loadTexts: hm2AgentStpMstEntry.setStatus('current')
hm2AgentStpMstId = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 12, 1, 2, 15, 10, 1, 1), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hm2AgentStpMstId.setStatus('current')
hm2AgentStpMstBridgePriority = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 12, 1, 2, 15, 10, 1, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 61440)).clone(32768)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hm2AgentStpMstBridgePriority.setStatus('current')
hm2AgentStpMstBridgeIdentifier = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 12, 1, 2, 15, 10, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(8, 8)).setFixedLength(8)).setMaxAccess("readonly")
if mibBuilder.loadTexts: hm2AgentStpMstBridgeIdentifier.setStatus('current')
hm2AgentStpMstDesignatedRootId = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 12, 1, 2, 15, 10, 1, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(8, 8)).setFixedLength(8)).setMaxAccess("readonly")
if mibBuilder.loadTexts: hm2AgentStpMstDesignatedRootId.setStatus('current')
hm2AgentStpMstRootPathCost = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 12, 1, 2, 15, 10, 1, 5), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hm2AgentStpMstRootPathCost.setStatus('current')
hm2AgentStpMstRootPortId = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 12, 1, 2, 15, 10, 1, 6), OctetString().subtype(subtypeSpec=ValueSizeConstraint(2, 2)).setFixedLength(2)).setMaxAccess("readonly")
if mibBuilder.loadTexts: hm2AgentStpMstRootPortId.setStatus('current')
hm2AgentStpMstTimeSinceTopologyChange = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 12, 1, 2, 15, 10, 1, 7), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hm2AgentStpMstTimeSinceTopologyChange.setStatus('current')
hm2AgentStpMstTopologyChangeCount = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 12, 1, 2, 15, 10, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hm2AgentStpMstTopologyChangeCount.setStatus('current')
hm2AgentStpMstTopologyChangeParm = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 12, 1, 2, 15, 10, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("true", 1), ("false", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hm2AgentStpMstTopologyChangeParm.setStatus('current')
hm2AgentStpMstRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 12, 1, 2, 15, 10, 1, 10), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hm2AgentStpMstRowStatus.setStatus('current')
hm2AgentStpMstPortTable = MibTable((1, 3, 6, 1, 4, 1, 248, 12, 1, 2, 15, 11), )
if mibBuilder.loadTexts: hm2AgentStpMstPortTable.setStatus('current')
hm2AgentStpMstPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 248, 12, 1, 2, 15, 11, 1), ).setIndexNames((0, "HM2-PLATFORM-SWITCHING-MIB", "hm2AgentStpMstId"), (0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: hm2AgentStpMstPortEntry.setStatus('current')
hm2AgentStpMstPortForwardingState = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 12, 1, 2, 15, 11, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("discarding", 1), ("learning", 2), ("forwarding", 3), ("disabled", 4), ("manualFwd", 5), ("notParticipate", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hm2AgentStpMstPortForwardingState.setStatus('current')
hm2AgentStpMstPortId = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 12, 1, 2, 15, 11, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(2, 2)).setFixedLength(2)).setMaxAccess("readonly")
if mibBuilder.loadTexts: hm2AgentStpMstPortId.setStatus('current')
hm2AgentStpMstPortPathCost = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 12, 1, 2, 15, 11, 1, 3), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 200000000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hm2AgentStpMstPortPathCost.setStatus('current')
hm2AgentStpMstPortPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 12, 1, 2, 15, 11, 1, 4), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 240)).clone(128)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hm2AgentStpMstPortPriority.setStatus('current')
hm2AgentStpMstDesignatedBridgeId = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 12, 1, 2, 15, 11, 1, 5), OctetString().subtype(subtypeSpec=ValueSizeConstraint(8, 8)).setFixedLength(8)).setMaxAccess("readonly")
if mibBuilder.loadTexts: hm2AgentStpMstDesignatedBridgeId.setStatus('current')
hm2AgentStpMstDesignatedCost = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 12, 1, 2, 15, 11, 1, 6), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hm2AgentStpMstDesignatedCost.setStatus('current')
hm2AgentStpMstDesignatedPortId = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 12, 1, 2, 15, 11, 1, 7), OctetString().subtype(subtypeSpec=ValueSizeConstraint(2, 2)).setFixedLength(2)).setMaxAccess("readonly")
if mibBuilder.loadTexts: hm2AgentStpMstDesignatedPortId.setStatus('current')
hm2AgentStpMstPortLoopInconsistentState = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 12, 1, 2, 15, 11, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("false", 0), ("true", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hm2AgentStpMstPortLoopInconsistentState.setStatus('current')
hm2AgentStpMstPortTransitionsIntoLoopInconsistentState = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 12, 1, 2, 15, 11, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hm2AgentStpMstPortTransitionsIntoLoopInconsistentState.setStatus('current')
hm2AgentStpMstPortTransitionsOutOfLoopInconsistentState = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 12, 1, 2, 15, 11, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hm2AgentStpMstPortTransitionsOutOfLoopInconsistentState.setStatus('current')
hm2AgentStpMstPortRole = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 12, 1, 2, 15, 11, 1, 248), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("root", 1), ("alternate", 2), ("designated", 3), ("backup", 4), ("master", 5), ("disabled", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hm2AgentStpMstPortRole.setStatus('current')
hm2AgentStpCstAutoPortPathCost = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 12, 1, 2, 15, 11, 1, 249), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("false", 0), ("true", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hm2AgentStpCstAutoPortPathCost.setStatus('current')
hm2AgentStpMstPortReceivedBridgeId = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 12, 1, 2, 15, 11, 1, 250), OctetString().subtype(subtypeSpec=ValueSizeConstraint(8, 8)).setFixedLength(8)).setMaxAccess("readonly")
if mibBuilder.loadTexts: hm2AgentStpMstPortReceivedBridgeId.setStatus('current')
hm2AgentStpMstPortReceivedRPC = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 12, 1, 2, 15, 11, 1, 251), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hm2AgentStpMstPortReceivedRPC.setStatus('current')
hm2AgentStpMstPortReceivedPortId = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 12, 1, 2, 15, 11, 1, 252), OctetString().subtype(subtypeSpec=ValueSizeConstraint(2, 2)).setFixedLength(2)).setMaxAccess("readonly")
if mibBuilder.loadTexts: hm2AgentStpMstPortReceivedPortId.setStatus('current')
hm2AgentStpMstAutoPortPathCost = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 12, 1, 2, 15, 11, 1, 253), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("false", 0), ("true", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hm2AgentStpMstAutoPortPathCost.setStatus('current')
hm2AgentStpMstPortReceivedRegionalRPC = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 12, 1, 2, 15, 11, 1, 254), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hm2AgentStpMstPortReceivedRegionalRPC.setStatus('current')
hm2AgentStpMstVlanTable = MibTable((1, 3, 6, 1, 4, 1, 248, 12, 1, 2, 15, 12), )
if mibBuilder.loadTexts: hm2AgentStpMstVlanTable.setStatus('current')
hm2AgentStpMstVlanEntry = MibTableRow((1, 3, 6, 1, 4, 1, 248, 12, 1, 2, 15, 12, 1), ).setIndexNames((0, "HM2-PLATFORM-SWITCHING-MIB", "hm2AgentStpMstId"), (0, "Q-BRIDGE-MIB", "dot1qVlanIndex"))
if mibBuilder.loadTexts: hm2AgentStpMstVlanEntry.setStatus('current')
hm2AgentStpMstVlanRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 12, 1, 2, 15, 12, 1, 1), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hm2AgentStpMstVlanRowStatus.setStatus('current')
hm2AgentStpBpduGuardMode = MibScalar((1, 3, 6, 1, 4, 1, 248, 12, 1, 2, 15, 13), HmEnabledStatus().clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hm2AgentStpBpduGuardMode.setStatus('current')
hm2AgentStpBpduFilterDefault = MibScalar((1, 3, 6, 1, 4, 1, 248, 12, 1, 2, 15, 14), HmEnabledStatus().clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hm2AgentStpBpduFilterDefault.setStatus('current')
hm2AgentStpRingOnlyMode = MibScalar((1, 3, 6, 1, 4, 1, 248, 12, 1, 2, 15, 248), HmEnabledStatus().clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hm2AgentStpRingOnlyMode.setStatus('current')
hm2AgentStpRingOnlyModeIntfOne = MibScalar((1, 3, 6, 1, 4, 1, 248, 12, 1, 2, 15, 249), InterfaceIndexOrZero()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hm2AgentStpRingOnlyModeIntfOne.setStatus('current')
hm2AgentStpRingOnlyModeIntfTwo = MibScalar((1, 3, 6, 1, 4, 1, 248, 12, 1, 2, 15, 250), InterfaceIndexOrZero()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hm2AgentStpRingOnlyModeIntfTwo.setStatus('current')
hm2AgentStpMstSNMPExtensionGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 248, 12, 1, 2, 15, 260))
hm2AgentStpMstInstanceVlanErrorReturn = ObjectIdentity((1, 3, 6, 1, 4, 1, 248, 12, 1, 2, 15, 260, 1))
if mibBuilder.loadTexts: hm2AgentStpMstInstanceVlanErrorReturn.setStatus('current')
hm2AgentStpCstFwdDelayErrorReturn = ObjectIdentity((1, 3, 6, 1, 4, 1, 248, 12, 1, 2, 15, 260, 2))
if mibBuilder.loadTexts: hm2AgentStpCstFwdDelayErrorReturn.setStatus('current')
hm2AgentStpMstSwitchVersionConflict = ObjectIdentity((1, 3, 6, 1, 4, 1, 248, 12, 1, 2, 15, 260, 3))
if mibBuilder.loadTexts: hm2AgentStpMstSwitchVersionConflict.setStatus('current')
hm2AgentClassOfServiceGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 248, 12, 1, 2, 17))
hm2AgentClassOfServicePortTable = MibTable((1, 3, 6, 1, 4, 1, 248, 12, 1, 2, 17, 1), )
if mibBuilder.loadTexts: hm2AgentClassOfServicePortTable.setStatus('current')
hm2AgentClassOfServicePortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 248, 12, 1, 2, 17, 1, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "HM2-PLATFORM-SWITCHING-MIB", "hm2AgentClassOfServicePortPriority"))
if mibBuilder.loadTexts: hm2AgentClassOfServicePortEntry.setStatus('current')
hm2AgentClassOfServicePortPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 12, 1, 2, 17, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7)))
if mibBuilder.loadTexts: hm2AgentClassOfServicePortPriority.setStatus('current')
hm2AgentClassOfServicePortClass = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 12, 1, 2, 17, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hm2AgentClassOfServicePortClass.setStatus('current')
hm2AgentSystemGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 248, 12, 1, 3))
hm2AgentClearVlan = MibScalar((1, 3, 6, 1, 4, 1, 248, 12, 1, 3, 9), HmEnabledStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hm2AgentClearVlan.setStatus('current')
hm2AgentDaiConfigGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 248, 12, 1, 2, 8, 21))
hm2AgentDaiSrcMacValidate = MibScalar((1, 3, 6, 1, 4, 1, 248, 12, 1, 2, 8, 21, 1), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hm2AgentDaiSrcMacValidate.setStatus('current')
hm2AgentDaiDstMacValidate = MibScalar((1, 3, 6, 1, 4, 1, 248, 12, 1, 2, 8, 21, 2), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hm2AgentDaiDstMacValidate.setStatus('current')
hm2AgentDaiIPValidate = MibScalar((1, 3, 6, 1, 4, 1, 248, 12, 1, 2, 8, 21, 3), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hm2AgentDaiIPValidate.setStatus('current')
hm2AgentDaiVlanConfigTable = MibTable((1, 3, 6, 1, 4, 1, 248, 12, 1, 2, 8, 21, 4), )
if mibBuilder.loadTexts: hm2AgentDaiVlanConfigTable.setStatus('current')
hm2AgentDaiVlanConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 248, 12, 1, 2, 8, 21, 4, 1), ).setIndexNames((0, "HM2-PLATFORM-SWITCHING-MIB", "hm2AgentDaiVlanIndex"))
if mibBuilder.loadTexts: hm2AgentDaiVlanConfigEntry.setStatus('current')
hm2AgentDaiVlanIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 12, 1, 2, 8, 21, 4, 1, 1), VlanIndex())
if mibBuilder.loadTexts: hm2AgentDaiVlanIndex.setStatus('current')
hm2AgentDaiVlanDynArpInspEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 12, 1, 2, 8, 21, 4, 1, 2), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hm2AgentDaiVlanDynArpInspEnable.setStatus('current')
hm2AgentDaiVlanLoggingEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 12, 1, 2, 8, 21, 4, 1, 3), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hm2AgentDaiVlanLoggingEnable.setStatus('current')
hm2AgentDaiVlanArpAclName = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 12, 1, 2, 8, 21, 4, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 31))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hm2AgentDaiVlanArpAclName.setStatus('current')
hm2AgentDaiVlanArpAclStaticFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 12, 1, 2, 8, 21, 4, 1, 5), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hm2AgentDaiVlanArpAclStaticFlag.setStatus('current')
hm2AgentDaiVlanBindingCheckEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 12, 1, 2, 8, 21, 4, 1, 248), TruthValue().clone('true')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hm2AgentDaiVlanBindingCheckEnable.setStatus('current')
hm2AgentDaiStatsReset = MibScalar((1, 3, 6, 1, 4, 1, 248, 12, 1, 2, 8, 21, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("none", 0), ("reset", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hm2AgentDaiStatsReset.setStatus('current')
hm2AgentDaiVlanStatsTable = MibTable((1, 3, 6, 1, 4, 1, 248, 12, 1, 2, 8, 21, 6), )
if mibBuilder.loadTexts: hm2AgentDaiVlanStatsTable.setStatus('current')
hm2AgentDaiVlanStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 248, 12, 1, 2, 8, 21, 6, 1), ).setIndexNames((0, "HM2-PLATFORM-SWITCHING-MIB", "hm2AgentDaiVlanStatsIndex"))
if mibBuilder.loadTexts: hm2AgentDaiVlanStatsEntry.setStatus('current')
hm2AgentDaiVlanStatsIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 12, 1, 2, 8, 21, 6, 1, 1), VlanIndex())
if mibBuilder.loadTexts: hm2AgentDaiVlanStatsIndex.setStatus('current')
hm2AgentDaiVlanPktsForwarded = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 12, 1, 2, 8, 21, 6, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hm2AgentDaiVlanPktsForwarded.setStatus('current')
hm2AgentDaiVlanPktsDropped = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 12, 1, 2, 8, 21, 6, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hm2AgentDaiVlanPktsDropped.setStatus('current')
hm2AgentDaiVlanDhcpDrops = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 12, 1, 2, 8, 21, 6, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hm2AgentDaiVlanDhcpDrops.setStatus('current')
hm2AgentDaiVlanDhcpPermits = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 12, 1, 2, 8, 21, 6, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hm2AgentDaiVlanDhcpPermits.setStatus('current')
hm2AgentDaiVlanAclDrops = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 12, 1, 2, 8, 21, 6, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hm2AgentDaiVlanAclDrops.setStatus('current')
hm2AgentDaiVlanAclPermits = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 12, 1, 2, 8, 21, 6, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hm2AgentDaiVlanAclPermits.setStatus('current')
hm2AgentDaiVlanSrcMacFailures = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 12, 1, 2, 8, 21, 6, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hm2AgentDaiVlanSrcMacFailures.setStatus('current')
hm2AgentDaiVlanDstMacFailures = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 12, 1, 2, 8, 21, 6, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hm2AgentDaiVlanDstMacFailures.setStatus('current')
hm2AgentDaiVlanIpValidFailures = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 12, 1, 2, 8, 21, 6, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hm2AgentDaiVlanIpValidFailures.setStatus('current')
hm2AgentDaiIfConfigTable = MibTable((1, 3, 6, 1, 4, 1, 248, 12, 1, 2, 8, 21, 7), )
if mibBuilder.loadTexts: hm2AgentDaiIfConfigTable.setStatus('current')
hm2AgentDaiIfConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 248, 12, 1, 2, 8, 21, 7, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: hm2AgentDaiIfConfigEntry.setStatus('current')
hm2AgentDaiIfTrustEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 12, 1, 2, 8, 21, 7, 1, 1), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hm2AgentDaiIfTrustEnable.setStatus('current')
hm2AgentDaiIfRateLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 12, 1, 2, 8, 21, 7, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(-1, -1), ValueRangeConstraint(0, 300), )).clone(-1)).setUnits('packets per second').setMaxAccess("readwrite")
if mibBuilder.loadTexts: hm2AgentDaiIfRateLimit.setStatus('current')
hm2AgentDaiIfBurstInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 12, 1, 2, 8, 21, 7, 1, 3), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 15)).clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hm2AgentDaiIfBurstInterval.setStatus('current')
hm2AgentDaiIfAutoDisable = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 12, 1, 2, 8, 21, 7, 1, 248), TruthValue().clone('true')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hm2AgentDaiIfAutoDisable.setStatus('current')
hm2AgentArpAclGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 248, 12, 1, 2, 8, 22))
hm2AgentArpAclTable = MibTable((1, 3, 6, 1, 4, 1, 248, 12, 1, 2, 8, 22, 1), )
if mibBuilder.loadTexts: hm2AgentArpAclTable.setStatus('current')
hm2AgentArpAclEntry = MibTableRow((1, 3, 6, 1, 4, 1, 248, 12, 1, 2, 8, 22, 1, 1), ).setIndexNames((0, "HM2-PLATFORM-SWITCHING-MIB", "hm2AgentArpAclName"))
if mibBuilder.loadTexts: hm2AgentArpAclEntry.setStatus('current')
hm2AgentArpAclName = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 12, 1, 2, 8, 22, 1, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 31))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hm2AgentArpAclName.setStatus('current')
hm2AgentArpAclRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 12, 1, 2, 8, 22, 1, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hm2AgentArpAclRowStatus.setStatus('current')
hm2AgentArpAclRuleTable = MibTable((1, 3, 6, 1, 4, 1, 248, 12, 1, 2, 8, 22, 2), )
if mibBuilder.loadTexts: hm2AgentArpAclRuleTable.setStatus('current')
hm2AgentArpAclRuleEntry = MibTableRow((1, 3, 6, 1, 4, 1, 248, 12, 1, 2, 8, 22, 2, 1), ).setIndexNames((0, "HM2-PLATFORM-SWITCHING-MIB", "hm2AgentArpAclName"), (0, "HM2-PLATFORM-SWITCHING-MIB", "hm2AgentArpAclRuleMatchSenderIpAddr"), (0, "HM2-PLATFORM-SWITCHING-MIB", "hm2AgentArpAclRuleMatchSenderMacAddr"))
if mibBuilder.loadTexts: hm2AgentArpAclRuleEntry.setStatus('current')
hm2AgentArpAclRuleMatchSenderIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 12, 1, 2, 8, 22, 2, 1, 1), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hm2AgentArpAclRuleMatchSenderIpAddr.setStatus('current')
hm2AgentArpAclRuleMatchSenderMacAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 12, 1, 2, 8, 22, 2, 1, 2), MacAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hm2AgentArpAclRuleMatchSenderMacAddr.setStatus('current')
hm2AgentArpAclRuleRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 12, 1, 2, 8, 22, 2, 1, 3), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hm2AgentArpAclRuleRowStatus.setStatus('current')
hm2AgentDhcpSnoopingConfigGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 248, 12, 1, 2, 8, 23))
hm2AgentDhcpSnoopingAdminMode = MibScalar((1, 3, 6, 1, 4, 1, 248, 12, 1, 2, 8, 23, 1), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hm2AgentDhcpSnoopingAdminMode.setStatus('current')
hm2AgentDhcpSnoopingVerifyMac = MibScalar((1, 3, 6, 1, 4, 1, 248, 12, 1, 2, 8, 23, 2), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hm2AgentDhcpSnoopingVerifyMac.setStatus('current')
hm2AgentDhcpSnoopingVlanConfigTable = MibTable((1, 3, 6, 1, 4, 1, 248, 12, 1, 2, 8, 23, 3), )
if mibBuilder.loadTexts: hm2AgentDhcpSnoopingVlanConfigTable.setStatus('current')
hm2AgentDhcpSnoopingVlanConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 248, 12, 1, 2, 8, 23, 3, 1), ).setIndexNames((0, "HM2-PLATFORM-SWITCHING-MIB", "hm2AgentDhcpSnoopingVlanIndex"))
if mibBuilder.loadTexts: hm2AgentDhcpSnoopingVlanConfigEntry.setStatus('current')
hm2AgentDhcpSnoopingVlanIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 12, 1, 2, 8, 23, 3, 1, 1), VlanIndex())
if mibBuilder.loadTexts: hm2AgentDhcpSnoopingVlanIndex.setStatus('current')
hm2AgentDhcpSnoopingVlanEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 12, 1, 2, 8, 23, 3, 1, 2), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hm2AgentDhcpSnoopingVlanEnable.setStatus('current')
hm2AgentDhcpSnoopingIfConfigTable = MibTable((1, 3, 6, 1, 4, 1, 248, 12, 1, 2, 8, 23, 4), )
if mibBuilder.loadTexts: hm2AgentDhcpSnoopingIfConfigTable.setStatus('current')
hm2AgentDhcpSnoopingIfConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 248, 12, 1, 2, 8, 23, 4, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: hm2AgentDhcpSnoopingIfConfigEntry.setStatus('current')
hm2AgentDhcpSnoopingIfTrustEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 12, 1, 2, 8, 23, 4, 1, 1), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hm2AgentDhcpSnoopingIfTrustEnable.setStatus('current')
hm2AgentDhcpSnoopingIfLogEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 12, 1, 2, 8, 23, 4, 1, 2), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hm2AgentDhcpSnoopingIfLogEnable.setStatus('current')
hm2AgentDhcpSnoopingIfRateLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 12, 1, 2, 8, 23, 4, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(-1, -1), ValueRangeConstraint(0, 150), )).clone(-1)).setUnits('packets per second').setMaxAccess("readwrite")
if mibBuilder.loadTexts: hm2AgentDhcpSnoopingIfRateLimit.setStatus('current')
hm2AgentDhcpSnoopingIfBurstInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 12, 1, 2, 8, 23, 4, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 15)).clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hm2AgentDhcpSnoopingIfBurstInterval.setStatus('current')
hm2AgentDhcpSnoopingIfAutoDisable = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 12, 1, 2, 8, 23, 4, 1, 248), TruthValue().clone('true')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hm2AgentDhcpSnoopingIfAutoDisable.setStatus('current')
hm2AgentIpsgIfConfigTable = MibTable((1, 3, 6, 1, 4, 1, 248, 12, 1, 2, 8, 23, 5), )
if mibBuilder.loadTexts: hm2AgentIpsgIfConfigTable.setStatus('current')
hm2AgentIpsgIfConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 248, 12, 1, 2, 8, 23, 5, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: hm2AgentIpsgIfConfigEntry.setStatus('current')
hm2AgentIpsgIfVerifySource = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 12, 1, 2, 8, 23, 5, 1, 1), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hm2AgentIpsgIfVerifySource.setStatus('current')
hm2AgentIpsgIfPortSecurity = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 12, 1, 2, 8, 23, 5, 1, 2), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hm2AgentIpsgIfPortSecurity.setStatus('current')
hm2AgentDhcpSnoopingStatsReset = MibScalar((1, 3, 6, 1, 4, 1, 248, 12, 1, 2, 8, 23, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("none", 0), ("reset", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hm2AgentDhcpSnoopingStatsReset.setStatus('current')
hm2AgentDhcpSnoopingStatsTable = MibTable((1, 3, 6, 1, 4, 1, 248, 12, 1, 2, 8, 23, 7), )
if mibBuilder.loadTexts: hm2AgentDhcpSnoopingStatsTable.setStatus('current')
hm2AgentDhcpSnoopingStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 248, 12, 1, 2, 8, 23, 7, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: hm2AgentDhcpSnoopingStatsEntry.setStatus('current')
hm2AgentDhcpSnoopingMacVerifyFailures = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 12, 1, 2, 8, 23, 7, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hm2AgentDhcpSnoopingMacVerifyFailures.setStatus('current')
hm2AgentDhcpSnoopingInvalidClientMessages = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 12, 1, 2, 8, 23, 7, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hm2AgentDhcpSnoopingInvalidClientMessages.setStatus('current')
hm2AgentDhcpSnoopingInvalidServerMessages = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 12, 1, 2, 8, 23, 7, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hm2AgentDhcpSnoopingInvalidServerMessages.setStatus('current')
hm2AgentStaticIpsgBindingTable = MibTable((1, 3, 6, 1, 4, 1, 248, 12, 1, 2, 8, 23, 8), )
if mibBuilder.loadTexts: hm2AgentStaticIpsgBindingTable.setStatus('current')
hm2AgentStaticIpsgBindingEntry = MibTableRow((1, 3, 6, 1, 4, 1, 248, 12, 1, 2, 8, 23, 8, 1), ).setIndexNames((0, "HM2-PLATFORM-SWITCHING-MIB", "hm2AgentStaticIpsgBindingIfIndex"), (0, "HM2-PLATFORM-SWITCHING-MIB", "hm2AgentStaticIpsgBindingVlanId"), (0, "HM2-PLATFORM-SWITCHING-MIB", "hm2AgentStaticIpsgBindingMacAddr"), (0, "HM2-PLATFORM-SWITCHING-MIB", "hm2AgentStaticIpsgBindingIpAddr"))
if mibBuilder.loadTexts: hm2AgentStaticIpsgBindingEntry.setStatus('current')
hm2AgentStaticIpsgBindingIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 12, 1, 2, 8, 23, 8, 1, 1), InterfaceIndex()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hm2AgentStaticIpsgBindingIfIndex.setStatus('current')
hm2AgentStaticIpsgBindingVlanId = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 12, 1, 2, 8, 23, 8, 1, 2), VlanIndex()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hm2AgentStaticIpsgBindingVlanId.setStatus('current')
hm2AgentStaticIpsgBindingMacAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 12, 1, 2, 8, 23, 8, 1, 3), MacAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hm2AgentStaticIpsgBindingMacAddr.setStatus('current')
hm2AgentStaticIpsgBindingIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 12, 1, 2, 8, 23, 8, 1, 4), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hm2AgentStaticIpsgBindingIpAddr.setStatus('current')
hm2AgentStaticIpsgBindingRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 12, 1, 2, 8, 23, 8, 1, 5), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hm2AgentStaticIpsgBindingRowStatus.setStatus('current')
hm2AgentStaticIpsgBindingHwStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 12, 1, 2, 8, 23, 8, 1, 248), TruthValue().clone('false')).setMaxAccess("readonly")
if mibBuilder.loadTexts: hm2AgentStaticIpsgBindingHwStatus.setStatus('current')
hm2AgentDynamicIpsgBindingTable = MibTable((1, 3, 6, 1, 4, 1, 248, 12, 1, 2, 8, 23, 9), )
if mibBuilder.loadTexts: hm2AgentDynamicIpsgBindingTable.setStatus('current')
hm2AgentDynamicIpsgBindingEntry = MibTableRow((1, 3, 6, 1, 4, 1, 248, 12, 1, 2, 8, 23, 9, 1), ).setIndexNames((0, "HM2-PLATFORM-SWITCHING-MIB", "hm2AgentDynamicIpsgBindingIfIndex"), (0, "HM2-PLATFORM-SWITCHING-MIB", "hm2AgentDynamicIpsgBindingVlanId"), (0, "HM2-PLATFORM-SWITCHING-MIB", "hm2AgentDynamicIpsgBindingMacAddr"), (0, "HM2-PLATFORM-SWITCHING-MIB", "hm2AgentDynamicIpsgBindingIpAddr"))
if mibBuilder.loadTexts: hm2AgentDynamicIpsgBindingEntry.setStatus('current')
hm2AgentDynamicIpsgBindingIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 12, 1, 2, 8, 23, 9, 1, 1), InterfaceIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hm2AgentDynamicIpsgBindingIfIndex.setStatus('current')
hm2AgentDynamicIpsgBindingVlanId = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 12, 1, 2, 8, 23, 9, 1, 2), VlanIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hm2AgentDynamicIpsgBindingVlanId.setStatus('current')
hm2AgentDynamicIpsgBindingMacAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 12, 1, 2, 8, 23, 9, 1, 3), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hm2AgentDynamicIpsgBindingMacAddr.setStatus('current')
hm2AgentDynamicIpsgBindingIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 12, 1, 2, 8, 23, 9, 1, 4), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hm2AgentDynamicIpsgBindingIpAddr.setStatus('current')
hm2AgentDynamicIpsgBindingHwStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 12, 1, 2, 8, 23, 9, 1, 248), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hm2AgentDynamicIpsgBindingHwStatus.setStatus('current')
hm2AgentStaticDsBindingTable = MibTable((1, 3, 6, 1, 4, 1, 248, 12, 1, 2, 8, 23, 10), )
if mibBuilder.loadTexts: hm2AgentStaticDsBindingTable.setStatus('current')
hm2AgentStaticDsBindingEntry = MibTableRow((1, 3, 6, 1, 4, 1, 248, 12, 1, 2, 8, 23, 10, 1), ).setIndexNames((0, "HM2-PLATFORM-SWITCHING-MIB", "hm2AgentStaticDsBindingMacAddr"))
if mibBuilder.loadTexts: hm2AgentStaticDsBindingEntry.setStatus('current')
hm2AgentStaticDsBindingIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 12, 1, 2, 8, 23, 10, 1, 1), InterfaceIndexOrZero()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hm2AgentStaticDsBindingIfIndex.setStatus('current')
hm2AgentStaticDsBindingVlanId = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 12, 1, 2, 8, 23, 10, 1, 2), VlanId().clone(1)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hm2AgentStaticDsBindingVlanId.setStatus('current')
hm2AgentStaticDsBindingMacAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 12, 1, 2, 8, 23, 10, 1, 3), MacAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hm2AgentStaticDsBindingMacAddr.setStatus('current')
hm2AgentStaticDsBindingIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 12, 1, 2, 8, 23, 10, 1, 4), IpAddress().clone(hexValue="00000000")).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hm2AgentStaticDsBindingIpAddr.setStatus('current')
hm2AgentStaticDsBindingRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 12, 1, 2, 8, 23, 10, 1, 5), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hm2AgentStaticDsBindingRowStatus.setStatus('current')
hm2AgentDynamicDsBindingTable = MibTable((1, 3, 6, 1, 4, 1, 248, 12, 1, 2, 8, 23, 11), )
if mibBuilder.loadTexts: hm2AgentDynamicDsBindingTable.setStatus('current')
hm2AgentDynamicDsBindingEntry = MibTableRow((1, 3, 6, 1, 4, 1, 248, 12, 1, 2, 8, 23, 11, 1), ).setIndexNames((0, "HM2-PLATFORM-SWITCHING-MIB", "hm2AgentDynamicDsBindingMacAddr"))
if mibBuilder.loadTexts: hm2AgentDynamicDsBindingEntry.setStatus('current')
hm2AgentDynamicDsBindingIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 12, 1, 2, 8, 23, 11, 1, 1), InterfaceIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hm2AgentDynamicDsBindingIfIndex.setStatus('current')
hm2AgentDynamicDsBindingVlanId = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 12, 1, 2, 8, 23, 11, 1, 2), VlanIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hm2AgentDynamicDsBindingVlanId.setStatus('current')
hm2AgentDynamicDsBindingMacAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 12, 1, 2, 8, 23, 11, 1, 3), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hm2AgentDynamicDsBindingMacAddr.setStatus('current')
hm2AgentDynamicDsBindingIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 12, 1, 2, 8, 23, 11, 1, 4), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hm2AgentDynamicDsBindingIpAddr.setStatus('current')
hm2AgentDynamicDsBindingLeaseRemainingTime = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 12, 1, 2, 8, 23, 11, 1, 5), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hm2AgentDynamicDsBindingLeaseRemainingTime.setStatus('current')
hm2AgentDhcpSnoopingRemoteFileName = MibScalar((1, 3, 6, 1, 4, 1, 248, 12, 1, 2, 8, 23, 12), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hm2AgentDhcpSnoopingRemoteFileName.setStatus('current')
hm2AgentDhcpSnoopingRemoteIpAddr = MibScalar((1, 3, 6, 1, 4, 1, 248, 12, 1, 2, 8, 23, 13), IpAddress().clone(hexValue="00000000")).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hm2AgentDhcpSnoopingRemoteIpAddr.setStatus('current')
hm2AgentDhcpSnoopingStoreInterval = MibScalar((1, 3, 6, 1, 4, 1, 248, 12, 1, 2, 8, 23, 14), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(15, 86400)).clone(300)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hm2AgentDhcpSnoopingStoreInterval.setStatus('current')
hm2AgentDhcpL2RelayConfigGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 248, 12, 1, 2, 8, 24))
hm2AgentDhcpL2RelayAdminMode = MibScalar((1, 3, 6, 1, 4, 1, 248, 12, 1, 2, 8, 24, 1), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hm2AgentDhcpL2RelayAdminMode.setStatus('current')
hm2AgentDhcpL2RelayIfConfigTable = MibTable((1, 3, 6, 1, 4, 1, 248, 12, 1, 2, 8, 24, 2), )
if mibBuilder.loadTexts: hm2AgentDhcpL2RelayIfConfigTable.setStatus('current')
hm2AgentDhcpL2RelayIfConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 248, 12, 1, 2, 8, 24, 2, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: hm2AgentDhcpL2RelayIfConfigEntry.setStatus('current')
hm2AgentDhcpL2RelayIfEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 12, 1, 2, 8, 24, 2, 1, 1), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hm2AgentDhcpL2RelayIfEnable.setStatus('current')
hm2AgentDhcpL2RelayIfTrustEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 12, 1, 2, 8, 24, 2, 1, 2), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hm2AgentDhcpL2RelayIfTrustEnable.setStatus('current')
hm2AgentDhcpL2RelayVlanConfigTable = MibTable((1, 3, 6, 1, 4, 1, 248, 12, 1, 2, 8, 24, 3), )
if mibBuilder.loadTexts: hm2AgentDhcpL2RelayVlanConfigTable.setStatus('current')
hm2AgentDhcpL2RelayVlanConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 248, 12, 1, 2, 8, 24, 3, 1), ).setIndexNames((0, "HM2-PLATFORM-SWITCHING-MIB", "hm2AgentDhcpL2RelayVlanIndex"))
if mibBuilder.loadTexts: hm2AgentDhcpL2RelayVlanConfigEntry.setStatus('current')
hm2AgentDhcpL2RelayVlanIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 12, 1, 2, 8, 24, 3, 1, 1), VlanIndex())
if mibBuilder.loadTexts: hm2AgentDhcpL2RelayVlanIndex.setStatus('current')
hm2AgentDhcpL2RelayVlanEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 12, 1, 2, 8, 24, 3, 1, 2), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hm2AgentDhcpL2RelayVlanEnable.setStatus('current')
hm2AgentDhcpL2RelayCircuitIdVlanEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 12, 1, 2, 8, 24, 3, 1, 3), TruthValue().clone('true')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hm2AgentDhcpL2RelayCircuitIdVlanEnable.setStatus('current')
hm2AgentDhcpL2RelayRemoteIdVlanEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 12, 1, 2, 8, 24, 3, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hm2AgentDhcpL2RelayRemoteIdVlanEnable.setStatus('current')
hm2AgentDhcpL2RelayVlanRemoteIdType = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 12, 1, 2, 8, 24, 3, 1, 248), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("ip", 1), ("mac", 2), ("client-id", 3), ("other", 4))).clone('mac')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hm2AgentDhcpL2RelayVlanRemoteIdType.setStatus('current')
hm2AgentDhcpL2RelayStatsReset = MibScalar((1, 3, 6, 1, 4, 1, 248, 12, 1, 2, 8, 24, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("none", 0), ("reset", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hm2AgentDhcpL2RelayStatsReset.setStatus('current')
hm2AgentDhcpL2RelayStatsTable = MibTable((1, 3, 6, 1, 4, 1, 248, 12, 1, 2, 8, 24, 7), )
if mibBuilder.loadTexts: hm2AgentDhcpL2RelayStatsTable.setStatus('current')
hm2AgentDhcpL2RelayStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 248, 12, 1, 2, 8, 24, 7, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: hm2AgentDhcpL2RelayStatsEntry.setStatus('current')
hm2AgentDhcpL2RelayUntrustedSrvrMsgsWithOptn82 = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 12, 1, 2, 8, 24, 7, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hm2AgentDhcpL2RelayUntrustedSrvrMsgsWithOptn82.setStatus('current')
hm2AgentDhcpL2RelayUntrustedClntMsgsWithOptn82 = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 12, 1, 2, 8, 24, 7, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hm2AgentDhcpL2RelayUntrustedClntMsgsWithOptn82.setStatus('current')
hm2AgentDhcpL2RelayTrustedSrvrMsgsWithoutOptn82 = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 12, 1, 2, 8, 24, 7, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hm2AgentDhcpL2RelayTrustedSrvrMsgsWithoutOptn82.setStatus('current')
hm2AgentDhcpL2RelayTrustedClntMsgsWithoutOptn82 = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 12, 1, 2, 8, 24, 7, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hm2AgentDhcpL2RelayTrustedClntMsgsWithoutOptn82.setStatus('current')
hm2AgentSwitchVoiceVLANGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 248, 12, 1, 2, 8, 25))
hm2AgentSwitchVoiceVLANAdminMode = MibScalar((1, 3, 6, 1, 4, 1, 248, 12, 1, 2, 8, 25, 1), HmEnabledStatus().clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hm2AgentSwitchVoiceVLANAdminMode.setStatus('current')
hm2AgentSwitchVoiceVlanDeviceTable = MibTable((1, 3, 6, 1, 4, 1, 248, 12, 1, 2, 8, 25, 2), )
if mibBuilder.loadTexts: hm2AgentSwitchVoiceVlanDeviceTable.setStatus('current')
hm2AgentSwitchVoiceVlanDeviceEntry = MibTableRow((1, 3, 6, 1, 4, 1, 248, 12, 1, 2, 8, 25, 2, 1), ).setIndexNames((0, "HM2-PLATFORM-SWITCHING-MIB", "hm2AgentSwitchVoiceVlanInterfaceNum"), (0, "HM2-PLATFORM-SWITCHING-MIB", "hm2AgentSwitchVoiceVlanDeviceMacAddress"))
if mibBuilder.loadTexts: hm2AgentSwitchVoiceVlanDeviceEntry.setStatus('current')
hm2AgentSwitchVoiceVlanInterfaceNum = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 12, 1, 2, 8, 25, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hm2AgentSwitchVoiceVlanInterfaceNum.setStatus('current')
hm2AgentSwitchVoiceVlanDeviceMacAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 12, 1, 2, 8, 25, 2, 1, 2), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hm2AgentSwitchVoiceVlanDeviceMacAddress.setStatus('current')
hm2AgentSdmPreferConfigGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 248, 12, 1, 2, 8, 27))
hm2AgentSdmPreferCurrentTemplate = MibScalar((1, 3, 6, 1, 4, 1, 248, 12, 1, 2, 8, 27, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3, 10, 11))).clone(namedValues=NamedValues(("ipv4RoutingDefault", 2), ("ipv4DataCenter", 3), ("ipv4RoutingUnicast", 10), ("ipv4RoutingMulticast", 11)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hm2AgentSdmPreferCurrentTemplate.setStatus('current')
hm2AgentSdmPreferNextTemplate = MibScalar((1, 3, 6, 1, 4, 1, 248, 12, 1, 2, 8, 27, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 2, 3, 10, 11))).clone(namedValues=NamedValues(("default", 0), ("ipv4RoutingDefault", 2), ("ipv4DataCenter", 3), ("ipv4RoutingUnicast", 10), ("ipv4RoutingMulticast", 11)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hm2AgentSdmPreferNextTemplate.setStatus('current')
hm2AgentSdmTemplateSummaryTable = MibIdentifier((1, 3, 6, 1, 4, 1, 248, 12, 1, 2, 8, 28))
hm2AgentSdmTemplateTable = MibTable((1, 3, 6, 1, 4, 1, 248, 12, 1, 2, 8, 28, 1), )
if mibBuilder.loadTexts: hm2AgentSdmTemplateTable.setStatus('current')
hm2AgentSdmTemplateEntry = MibTableRow((1, 3, 6, 1, 4, 1, 248, 12, 1, 2, 8, 28, 1, 1), ).setIndexNames((0, "HM2-PLATFORM-SWITCHING-MIB", "hm2AgentSdmTemplateId"))
if mibBuilder.loadTexts: hm2AgentSdmTemplateEntry.setStatus('current')
hm2AgentSdmTemplateId = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 12, 1, 2, 8, 28, 1, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3, 10, 11))).clone(namedValues=NamedValues(("ipv4RoutingDefault", 2), ("ipv4DataCenter", 3), ("ipv4RoutingUnicast", 10), ("ipv4RoutingMulticast", 11))))
if mibBuilder.loadTexts: hm2AgentSdmTemplateId.setStatus('current')
hm2AgentArpEntries = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 12, 1, 2, 8, 28, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hm2AgentArpEntries.setStatus('current')
hm2AgentIPv4UnicastRoutes = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 12, 1, 2, 8, 28, 1, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hm2AgentIPv4UnicastRoutes.setStatus('current')
hm2AgentIPv6NdpEntries = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 12, 1, 2, 8, 28, 1, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hm2AgentIPv6NdpEntries.setStatus('current')
hm2AgentIPv6UnicastRoutes = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 12, 1, 2, 8, 28, 1, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hm2AgentIPv6UnicastRoutes.setStatus('current')
hm2AgentEcmpNextHops = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 12, 1, 2, 8, 28, 1, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hm2AgentEcmpNextHops.setStatus('current')
hm2AgentIPv4MulticastRoutes = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 12, 1, 2, 8, 28, 1, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hm2AgentIPv4MulticastRoutes.setStatus('current')
hm2AgentIPv6MulticastRoutes = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 12, 1, 2, 8, 28, 1, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hm2AgentIPv6MulticastRoutes.setStatus('current')
hm2PlatformSwitchingTraps = MibIdentifier((1, 3, 6, 1, 4, 1, 248, 12, 1, 0))
hm2PlatformStpInstanceNewRootTrap = NotificationType((1, 3, 6, 1, 4, 1, 248, 12, 1, 0, 10)).setObjects(("HM2-PLATFORM-SWITCHING-MIB", "hm2AgentStpMstId"))
if mibBuilder.loadTexts: hm2PlatformStpInstanceNewRootTrap.setStatus('current')
hm2PlatformStpInstanceTopologyChangeTrap = NotificationType((1, 3, 6, 1, 4, 1, 248, 12, 1, 0, 11)).setObjects(("HM2-PLATFORM-SWITCHING-MIB", "hm2AgentStpMstId"))
if mibBuilder.loadTexts: hm2PlatformStpInstanceTopologyChangeTrap.setStatus('current')
hm2PlatformDaiIntfErrorDisabledTrap = NotificationType((1, 3, 6, 1, 4, 1, 248, 12, 1, 0, 15)).setObjects(("IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: hm2PlatformDaiIntfErrorDisabledTrap.setStatus('current')
hm2PlatformStpInstanceLoopInconsistentStartTrap = NotificationType((1, 3, 6, 1, 4, 1, 248, 12, 1, 0, 16)).setObjects(("HM2-PLATFORM-SWITCHING-MIB", "hm2AgentStpMstId"), ("IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: hm2PlatformStpInstanceLoopInconsistentStartTrap.setStatus('current')
hm2PlatformStpInstanceLoopInconsistentEndTrap = NotificationType((1, 3, 6, 1, 4, 1, 248, 12, 1, 0, 17)).setObjects(("HM2-PLATFORM-SWITCHING-MIB", "hm2AgentStpMstId"), ("IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: hm2PlatformStpInstanceLoopInconsistentEndTrap.setStatus('current')
hm2PlatformDhcpSnoopingIntfErrorDisabledTrap = NotificationType((1, 3, 6, 1, 4, 1, 248, 12, 1, 0, 18)).setObjects(("IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: hm2PlatformDhcpSnoopingIntfErrorDisabledTrap.setStatus('current')
hm2PlatformStpCstBpduGuardTrap = NotificationType((1, 3, 6, 1, 4, 1, 248, 12, 1, 0, 248)).setObjects(("IF-MIB", "ifIndex"), ("HM2-PLATFORM-SWITCHING-MIB", "hm2AgentStpCstPortEdge"), ("HM2-PLATFORM-SWITCHING-MIB", "hm2AgentStpCstPortBpduGuardEffect"))
if mibBuilder.loadTexts: hm2PlatformStpCstBpduGuardTrap.setStatus('current')
mibBuilder.exportSymbols("HM2-PLATFORM-SWITCHING-MIB", hm2AgentStpSwitchConfigGroup=hm2AgentStpSwitchConfigGroup, Hm2AgentPortMask=Hm2AgentPortMask, hm2AgentProtocolGroupPortIfIndex=hm2AgentProtocolGroupPortIfIndex, hm2AgentSwitchProtectedPortGroupName=hm2AgentSwitchProtectedPortGroupName, hm2AgentSdmPreferConfigGroup=hm2AgentSdmPreferConfigGroup, hm2AgentDhcpL2RelayVlanRemoteIdType=hm2AgentDhcpL2RelayVlanRemoteIdType, hm2AgentSwitchSnoopingQuerierCfgTable=hm2AgentSwitchSnoopingQuerierCfgTable, hm2AgentStpMstTopologyChangeCount=hm2AgentStpMstTopologyChangeCount, hm2AgentDhcpL2RelayCircuitIdVlanEnable=hm2AgentDhcpL2RelayCircuitIdVlanEnable, hm2AgentSwitchMFDBType=hm2AgentSwitchMFDBType, hm2AgentSwitchProtectedPortPortList=hm2AgentSwitchProtectedPortPortList, hm2AgentDhcpSnoopingInvalidClientMessages=hm2AgentDhcpSnoopingInvalidClientMessages, hm2AgentClassOfServiceGroup=hm2AgentClassOfServiceGroup, hm2AgentProtocolGroupProtocolStatus=hm2AgentProtocolGroupProtocolStatus, hm2AgentPortMirrorRspanVlanIdInvalid=hm2AgentPortMirrorRspanVlanIdInvalid, hm2AgentIpsgIfPortSecurity=hm2AgentIpsgIfPortSecurity, hm2AgentSwitchSnoopingCfgEntry=hm2AgentSwitchSnoopingCfgEntry, hm2AgentDhcpSnoopingStatsReset=hm2AgentDhcpSnoopingStatsReset, hm2AgentSwitchStaticMacFilteringSourcePortMask=hm2AgentSwitchStaticMacFilteringSourcePortMask, hm2AgentStpPortStatsMstpBpduRx=hm2AgentStpPortStatsMstpBpduRx, hm2AgentDynamicDsBindingTable=hm2AgentDynamicDsBindingTable, hm2AgentSwitchMFDBGroup=hm2AgentSwitchMFDBGroup, hm2AgentDhcpL2RelayIfConfigTable=hm2AgentDhcpL2RelayIfConfigTable, hm2AgentSwitchMFDBFilteringPortMask=hm2AgentSwitchMFDBFilteringPortMask, hm2AgentDhcpL2RelayStatsEntry=hm2AgentDhcpL2RelayStatsEntry, hm2AgentStaticIpsgBindingIpAddr=hm2AgentStaticIpsgBindingIpAddr, hm2AgentStpMstTimeSinceTopologyChange=hm2AgentStpMstTimeSinceTopologyChange, hm2PlatformStpCstBpduGuardTrap=hm2PlatformStpCstBpduGuardTrap, hm2AgentDhcpSnoopingVlanIndex=hm2AgentDhcpSnoopingVlanIndex, hm2AgentPortMirrorTypeSourcePort=hm2AgentPortMirrorTypeSourcePort, hm2AgentProtocolGroupStatus=hm2AgentProtocolGroupStatus, hm2AgentPortMirrorInvalidSourcePort=hm2AgentPortMirrorInvalidSourcePort, hm2AgentSwitchMFDBCurrentEntries=hm2AgentSwitchMFDBCurrentEntries, hm2AgentDhcpL2RelayStatsReset=hm2AgentDhcpL2RelayStatsReset, hm2AgentLagSummaryAdminMode=hm2AgentLagSummaryAdminMode, hm2AgentStpCstPortForwardingState=hm2AgentStpCstPortForwardingState, hm2AgentPortMirrorProbePortAlreadySet=hm2AgentPortMirrorProbePortAlreadySet, hm2AgentClassOfServicePortTable=hm2AgentClassOfServicePortTable, hm2AgentStaticIpsgBindingVlanId=hm2AgentStaticIpsgBindingVlanId, hm2AgentArpAclRuleTable=hm2AgentArpAclRuleTable, hm2AgentArpEntries=hm2AgentArpEntries, hm2AgentLagConfigGroup=hm2AgentLagConfigGroup, hm2AgentStpConfigName=hm2AgentStpConfigName, hm2AgentStpRingOnlyModeIntfTwo=hm2AgentStpRingOnlyModeIntfTwo, hm2AgentStpMstPortReceivedRPC=hm2AgentStpMstPortReceivedRPC, hm2AgentDhcpSnoopingIfConfigEntry=hm2AgentDhcpSnoopingIfConfigEntry, hm2AgentDhcpL2RelayIfConfigEntry=hm2AgentDhcpL2RelayIfConfigEntry, hm2AgentLagSummaryDeletePort=hm2AgentLagSummaryDeletePort, hm2AgentSwitchVlanSubnetAssociationGroup=hm2AgentSwitchVlanSubnetAssociationGroup, hm2AgentStpMstSNMPExtensionGroup=hm2AgentStpMstSNMPExtensionGroup, hm2AgentStpCstBridgeHoldCount=hm2AgentStpCstBridgeHoldCount, hm2AgentPortMulticastControlThreshold=hm2AgentPortMulticastControlThreshold, hm2AgentDhcpSnoopingConfigGroup=hm2AgentDhcpSnoopingConfigGroup, hm2AgentSwitchProtectedPortEntry=hm2AgentSwitchProtectedPortEntry, hm2AgentSwitchStaticMacEntries=hm2AgentSwitchStaticMacEntries, hm2AgentDynamicDsBindingIfIndex=hm2AgentDynamicDsBindingIfIndex, hm2AgentStpCstPortEntry=hm2AgentStpCstPortEntry, hm2AgentLagSummaryStatus=hm2AgentLagSummaryStatus, hm2AgentSwitchProtectedPortGroupId=hm2AgentSwitchProtectedPortGroupId, hm2AgentLagSummaryConfigEntry=hm2AgentLagSummaryConfigEntry, hm2AgentSwitchVlanSubnetAssociationVlanId=hm2AgentSwitchVlanSubnetAssociationVlanId, hm2AgentStaticIpsgBindingEntry=hm2AgentStaticIpsgBindingEntry, hm2AgentArpAclGroup=hm2AgentArpAclGroup, hm2AgentDhcpSnoopingStoreInterval=hm2AgentDhcpSnoopingStoreInterval, hm2AgentSwitchSnoopingVlanMRPExpirationTime=hm2AgentSwitchSnoopingVlanMRPExpirationTime, hm2AgentSwitchMFDBSummaryTable=hm2AgentSwitchMFDBSummaryTable, hm2AgentStpCstPortBpduFilter=hm2AgentStpCstPortBpduFilter, hm2AgentPortMaxFrameSize=hm2AgentPortMaxFrameSize, hm2AgentSwitchStaticMacFilteringDestPortMask=hm2AgentSwitchStaticMacFilteringDestPortMask, hm2AgentDaiIfTrustEnable=hm2AgentDaiIfTrustEnable, hm2AgentLagDetailedConfigTable=hm2AgentLagDetailedConfigTable, hm2AgentSwitchAddressAgingTimeoutEntry=hm2AgentSwitchAddressAgingTimeoutEntry, hm2AgentStpMstPortReceivedBridgeId=hm2AgentStpMstPortReceivedBridgeId, hm2AgentDhcpL2RelayIfEnable=hm2AgentDhcpL2RelayIfEnable, hm2AgentDhcpL2RelayVlanIndex=hm2AgentDhcpL2RelayVlanIndex, hm2AgentSwitchSnoopingIntfMaxResponseTime=hm2AgentSwitchSnoopingIntfMaxResponseTime, hm2AgentSwitchProtectedPortConfigGroup=hm2AgentSwitchProtectedPortConfigGroup, hm2AgentDynamicIpsgBindingIpAddr=hm2AgentDynamicIpsgBindingIpAddr, hm2AgentStpMstPortPathCost=hm2AgentStpMstPortPathCost, hm2AgentSwitchSnoopingGroup=hm2AgentSwitchSnoopingGroup, hm2AgentStpConfigFormatSelector=hm2AgentStpConfigFormatSelector, hm2AgentStpCstBridgeMaxAge=hm2AgentStpCstBridgeMaxAge, hm2AgentDaiSrcMacValidate=hm2AgentDaiSrcMacValidate, hm2AgentSwitchSnoopingVlanTable=hm2AgentSwitchSnoopingVlanTable, hm2AgentSwitchGARPGroup=hm2AgentSwitchGARPGroup, hm2AgentArpAclRuleRowStatus=hm2AgentArpAclRuleRowStatus, hm2AgentDaiIfAutoDisable=hm2AgentDaiIfAutoDisable, hm2AgentStpMstPortTable=hm2AgentStpMstPortTable, hm2AgentLagDetailedLagIndex=hm2AgentLagDetailedLagIndex, hm2AgentSwitchMFDBProtocolType=hm2AgentSwitchMFDBProtocolType, hm2AgentLagDetailedPortSpeed=hm2AgentLagDetailedPortSpeed, hm2AgentStpCstPortTable=hm2AgentStpCstPortTable, hm2AgentStaticIpsgBindingIfIndex=hm2AgentStaticIpsgBindingIfIndex, hm2AgentSwitchSnoopingVlanEntry=hm2AgentSwitchSnoopingVlanEntry, hm2AgentSwitchStaticMacFilteringAddress=hm2AgentSwitchStaticMacFilteringAddress, hm2AgentStpForceVersion=hm2AgentStpForceVersion, hm2AgentDynamicIpsgBindingTable=hm2AgentDynamicIpsgBindingTable, hm2AgentClassOfServicePortEntry=hm2AgentClassOfServicePortEntry, hm2AgentDynamicIpsgBindingHwStatus=hm2AgentDynamicIpsgBindingHwStatus, hm2AgentPortVoiceVlanNoneMode=hm2AgentPortVoiceVlanNoneMode, hm2AgentPortMulticastControlMode=hm2AgentPortMulticastControlMode, hm2AgentStpCstAutoPortPathCost=hm2AgentStpCstAutoPortPathCost, hm2AgentPortMirrorTypeTable=hm2AgentPortMirrorTypeTable, hm2AgentDhcpSnoopingIfLogEnable=hm2AgentDhcpSnoopingIfLogEnable, hm2AgentStpPortStatsRstpBpduTx=hm2AgentStpPortStatsRstpBpduTx, hm2AgentDhcpSnoopingMacVerifyFailures=hm2AgentDhcpSnoopingMacVerifyFailures, Ipv6AddressPrefix=Ipv6AddressPrefix, hm2AgentSwitchSnoopingQuerierVlanEntry=hm2AgentSwitchSnoopingQuerierVlanEntry, hm2AgentProtocolConfigGroup=hm2AgentProtocolConfigGroup, hm2AgentStpMstRootPathCost=hm2AgentStpMstRootPathCost, hm2AgentSwitchVlanSubnetAssociationTable=hm2AgentSwitchVlanSubnetAssociationTable, hm2AgentStpCstRegionalRootId=hm2AgentStpCstRegionalRootId, hm2AgentSwitchSnoopingQuerierElectionParticipateMode=hm2AgentSwitchSnoopingQuerierElectionParticipateMode, hm2AgentStpCstBridgeFwdDelay=hm2AgentStpCstBridgeFwdDelay, hm2AgentPortMirrorReflectorPortInvalid=hm2AgentPortMirrorReflectorPortInvalid, hm2AgentPortMirrorSourcePortDestinationPortConflict=hm2AgentPortMirrorSourcePortDestinationPortConflict, hm2AgentPortDot3FlowControlMode=hm2AgentPortDot3FlowControlMode, hm2AgentStpMstDesignatedPortId=hm2AgentStpMstDesignatedPortId, hm2AgentProtocolGroupPortStatus=hm2AgentProtocolGroupPortStatus, hm2AgentProtocolGroupProtocolID=hm2AgentProtocolGroupProtocolID, hm2AgentSwitchVoiceVlanDeviceTable=hm2AgentSwitchVoiceVlanDeviceTable, hm2AgentDaiVlanLoggingEnable=hm2AgentDaiVlanLoggingEnable, hm2AgentSwitchSnoopingQuerierOperVersion=hm2AgentSwitchSnoopingQuerierOperVersion, hm2AgentDaiVlanSrcMacFailures=hm2AgentDaiVlanSrcMacFailures, hm2AgentPortIfIndex=hm2AgentPortIfIndex, hm2AgentStpMstPortLoopInconsistentState=hm2AgentStpMstPortLoopInconsistentState, hm2AgentSwitchMFDBMacAddress=hm2AgentSwitchMFDBMacAddress, hm2AgentSwitchSnoopingIntfIndex=hm2AgentSwitchSnoopingIntfIndex, hm2AgentDynamicDsBindingIpAddr=hm2AgentDynamicDsBindingIpAddr, hm2AgentPortVoiceVlanPriority=hm2AgentPortVoiceVlanPriority, hm2AgentPortConfigTable=hm2AgentPortConfigTable, hm2AgentSwitchStaticMacFilteringTable=hm2AgentSwitchStaticMacFilteringTable, hm2AgentSystemGroup=hm2AgentSystemGroup, hm2AgentSwitchSnoopingQuerierVlanOperMode=hm2AgentSwitchSnoopingQuerierVlanOperMode, hm2AgentSdmPreferNextTemplate=hm2AgentSdmPreferNextTemplate, hm2AgentSwitchSnoopingIntfVlanIDs=hm2AgentSwitchSnoopingIntfVlanIDs, hm2AgentSwitchSnoopingIntfTable=hm2AgentSwitchSnoopingIntfTable, hm2AgentDhcpL2RelayStatsTable=hm2AgentDhcpL2RelayStatsTable, hm2AgentStpMstId=hm2AgentStpMstId, hm2AgentStpCstPortLoopGuard=hm2AgentStpCstPortLoopGuard, hm2AgentProtocolGroupEntry=hm2AgentProtocolGroupEntry, hm2AgentPortMirrorSourcePortMask=hm2AgentPortMirrorSourcePortMask, hm2AgentDhcpSnoopingRemoteIpAddr=hm2AgentDhcpSnoopingRemoteIpAddr, hm2AgentDhcpSnoopingIfAutoDisable=hm2AgentDhcpSnoopingIfAutoDisable, hm2AgentStpMstRootPortId=hm2AgentStpMstRootPortId, hm2AgentStpMstPortPriority=hm2AgentStpMstPortPriority, hm2AgentPortMirrorPortVlanMirrorConflict=hm2AgentPortMirrorPortVlanMirrorConflict, hm2AgentPortVoiceVlanAuthMode=hm2AgentPortVoiceVlanAuthMode, hm2AgentSwitchVlanMacAssociationRowStatus=hm2AgentSwitchVlanMacAssociationRowStatus, hm2AgentDaiVlanPktsForwarded=hm2AgentDaiVlanPktsForwarded, hm2AgentSwitchSnoopingQuerierCfgEntry=hm2AgentSwitchSnoopingQuerierCfgEntry, hm2AgentSwitchSnoopingVlanAdminMode=hm2AgentSwitchSnoopingVlanAdminMode, hm2AgentStpCstPortTopologyChangeAck=hm2AgentStpCstPortTopologyChangeAck, hm2AgentPortMirrorReset=hm2AgentPortMirrorReset, hm2PlatformDaiIntfErrorDisabledTrap=hm2PlatformDaiIntfErrorDisabledTrap, hm2PlatformSwitchingTraps=hm2PlatformSwitchingTraps, hm2AgentArpAclRuleMatchSenderIpAddr=hm2AgentArpAclRuleMatchSenderIpAddr, hm2AgentPortMaxFrameSizeLimit=hm2AgentPortMaxFrameSizeLimit, hm2AgentStpMstPortId=hm2AgentStpMstPortId, hm2AgentStpCstDesignatedBridgeId=hm2AgentStpCstDesignatedBridgeId, hm2AgentDot3adAggPortEntry=hm2AgentDot3adAggPortEntry, hm2AgentSwitchSnoopingQuerierQueryInterval=hm2AgentSwitchSnoopingQuerierQueryInterval, hm2AgentStpCstPortId=hm2AgentStpCstPortId, hm2AgentPortMirrorAdminMode=hm2AgentPortMirrorAdminMode, hm2AgentSwitchSnoopingQuerierVlanAdminMode=hm2AgentSwitchSnoopingQuerierVlanAdminMode, hm2AgentArpAclRowStatus=hm2AgentArpAclRowStatus, hm2AgentSwitchGmrpPortPktRx=hm2AgentSwitchGmrpPortPktRx, hm2AgentStpMstAutoPortPathCost=hm2AgentStpMstAutoPortPathCost, hm2AgentPortVoiceVlanDSCP=hm2AgentPortVoiceVlanDSCP, hm2AgentStpPortMigrationCheck=hm2AgentStpPortMigrationCheck, hm2AgentDaiVlanDynArpInspEnable=hm2AgentDaiVlanDynArpInspEnable, hm2AgentSwitchVoiceVLANAdminMode=hm2AgentSwitchVoiceVLANAdminMode, hm2AgentStpCstBridgeHoldTime=hm2AgentStpCstBridgeHoldTime, hm2AgentStpConfigDigestKey=hm2AgentStpConfigDigestKey, hm2AgentSwitchGmrpUnknownMulticastFilterMode=hm2AgentSwitchGmrpUnknownMulticastFilterMode, Ipv6IfIndexOrZero=Ipv6IfIndexOrZero, hm2AgentDhcpL2RelayTrustedClntMsgsWithoutOptn82=hm2AgentDhcpL2RelayTrustedClntMsgsWithoutOptn82, hm2AgentSwitchSnoopingAdminMode=hm2AgentSwitchSnoopingAdminMode, hm2AgentSwitchVlanSubnetAssociationIPAddress=hm2AgentSwitchVlanSubnetAssociationIPAddress, hm2AgentPortSfpLinkLossAlert=hm2AgentPortSfpLinkLossAlert, hm2AgentStpConfigRevision=hm2AgentStpConfigRevision, hm2AgentStpMstTopologyChangeParm=hm2AgentStpMstTopologyChangeParm, hm2AgentPortVoiceVlanOperationalStatus=hm2AgentPortVoiceVlanOperationalStatus, hm2AgentDaiVlanDhcpDrops=hm2AgentDaiVlanDhcpDrops, hm2AgentSwitchSnoopingQuerierVlanAddress=hm2AgentSwitchSnoopingQuerierVlanAddress, hm2PlatformDhcpSnoopingIntfErrorDisabledTrap=hm2PlatformDhcpSnoopingIntfErrorDisabledTrap, hm2AgentPortVoiceVlanDataPriorityMode=hm2AgentPortVoiceVlanDataPriorityMode, hm2AgentStpMstPortRole=hm2AgentStpMstPortRole, hm2AgentSwitchVlanMacAssociationGroup=hm2AgentSwitchVlanMacAssociationGroup, hm2AgentSwitchAddressAgingTimeout=hm2AgentSwitchAddressAgingTimeout, hm2AgentDaiVlanArpAclStaticFlag=hm2AgentDaiVlanArpAclStaticFlag, hm2AgentDhcpSnoopingStatsEntry=hm2AgentDhcpSnoopingStatsEntry, hm2AgentStpPortState=hm2AgentStpPortState, hm2AgentPortMirrorSessionNum=hm2AgentPortMirrorSessionNum, hm2AgentDhcpL2RelayConfigGroup=hm2AgentDhcpL2RelayConfigGroup, hm2AgentSwitchSnoopingQuerierGroup=hm2AgentSwitchSnoopingQuerierGroup, hm2AgentSwitchMFDBTable=hm2AgentSwitchMFDBTable, hm2AgentPortMirrorDestinationPort=hm2AgentPortMirrorDestinationPort, hm2AgentDaiVlanPktsDropped=hm2AgentDaiVlanPktsDropped, hm2AgentPortMirrorSourcePortReflectorPortConflict=hm2AgentPortMirrorSourcePortReflectorPortConflict, hm2AgentDynamicIpsgBindingMacAddr=hm2AgentDynamicIpsgBindingMacAddr, hm2AgentSwitchVlanStaticMrouterTable=hm2AgentSwitchVlanStaticMrouterTable, hm2AgentStpMstPortEntry=hm2AgentStpMstPortEntry, hm2AgentSwitchMFDBSummaryVlanId=hm2AgentSwitchMFDBSummaryVlanId, hm2AgentDaiVlanAclDrops=hm2AgentDaiVlanAclDrops, hm2AgentStpMstPortReceivedPortId=hm2AgentStpMstPortReceivedPortId, hm2AgentPortBroadcastControlThresholdUnit=hm2AgentPortBroadcastControlThresholdUnit, hm2AgentSwitchVlanStaticMrouterAdminMode=hm2AgentSwitchVlanStaticMrouterAdminMode, hm2AgentStaticDsBindingEntry=hm2AgentStaticDsBindingEntry, hm2AgentLagDetailedIfIndex=hm2AgentLagDetailedIfIndex, hm2AgentArpAclRuleEntry=hm2AgentArpAclRuleEntry, hm2AgentSwitchSnoopingCfgTable=hm2AgentSwitchSnoopingCfgTable, hm2AgentSwitchSnoopingQuerierLastQuerierAddress=hm2AgentSwitchSnoopingQuerierLastQuerierAddress, LagList=LagList, hm2AgentSwitchMFDBEntry=hm2AgentSwitchMFDBEntry, hm2AgentIPv6NdpEntries=hm2AgentIPv6NdpEntries, hm2AgentStpCstPortOperPointToPoint=hm2AgentStpCstPortOperPointToPoint, hm2AgentStpMstRowStatus=hm2AgentStpMstRowStatus, Ipv6Address=Ipv6Address, hm2AgentStaticIpsgBindingRowStatus=hm2AgentStaticIpsgBindingRowStatus, hm2AgentPortMirrorEntry=hm2AgentPortMirrorEntry, hm2AgentStaticDsBindingRowStatus=hm2AgentStaticDsBindingRowStatus, hm2AgentSwitchSnoopingQuerierVlanTable=hm2AgentSwitchSnoopingQuerierVlanTable, hm2AgentSwitchSnoopingQuerierLastQuerierVersion=hm2AgentSwitchSnoopingQuerierLastQuerierVersion, hm2AgentStpCstRootFwdDelay=hm2AgentStpCstRootFwdDelay, hm2AgentStpCstDesignatedCost=hm2AgentStpCstDesignatedCost, hm2AgentProtocolGroupProtocolTable=hm2AgentProtocolGroupProtocolTable, hm2AgentLagSummaryConfigTable=hm2AgentLagSummaryConfigTable, hm2AgentSwitchSnoopingQuerierAdminMode=hm2AgentSwitchSnoopingQuerierAdminMode, hm2AgentSwitchSnoopingVlanGroup=hm2AgentSwitchSnoopingVlanGroup, VlanList=VlanList, hm2AgentSwitchVlanMacAssociationVlanId=hm2AgentSwitchVlanMacAssociationVlanId, hm2AgentSwitchVoiceVLANGroup=hm2AgentSwitchVoiceVLANGroup, hm2AgentSwitchGvrpPortPktTx=hm2AgentSwitchGvrpPortPktTx, hm2AgentSwitchSnoopingPortMask=hm2AgentSwitchSnoopingPortMask, hm2AgentPortVoiceVlanMode=hm2AgentPortVoiceVlanMode, hm2AgentStaticIpsgBindingMacAddr=hm2AgentStaticIpsgBindingMacAddr, hm2AgentPortBroadcastControlThreshold=hm2AgentPortBroadcastControlThreshold, hm2AgentSwitchSnoopingIntfMulticastRouterMode=hm2AgentSwitchSnoopingIntfMulticastRouterMode, hm2AgentSwitchStaticMacFilteringEntry=hm2AgentSwitchStaticMacFilteringEntry, hm2AgentSwitchMFDBSummaryForwardingPortMask=hm2AgentSwitchMFDBSummaryForwardingPortMask, hm2AgentDaiVlanStatsIndex=hm2AgentDaiVlanStatsIndex, hm2AgentStpCstPortTCNGuard=hm2AgentStpCstPortTCNGuard, hm2AgentSwitchSnoopingProtocol=hm2AgentSwitchSnoopingProtocol, hm2AgentPortMirrorVlanMirrorPortConflict=hm2AgentPortMirrorVlanMirrorPortConflict, hm2AgentDaiConfigGroup=hm2AgentDaiConfigGroup, hm2AgentLagSummaryStpMode=hm2AgentLagSummaryStpMode, hm2AgentDhcpSnoopingVlanConfigEntry=hm2AgentDhcpSnoopingVlanConfigEntry, hm2AgentIPv6MulticastRoutes=hm2AgentIPv6MulticastRoutes, hm2AgentLagConfigSNMPExtensionGroup=hm2AgentLagConfigSNMPExtensionGroup, hm2AgentClassOfServicePortPriority=hm2AgentClassOfServicePortPriority, hm2AgentSwitchSnoopingIntfAdminMode=hm2AgentSwitchSnoopingIntfAdminMode, hm2AgentSwitchGvrpPortPktRx=hm2AgentSwitchGvrpPortPktRx, hm2AgentStpMstPortForwardingState=hm2AgentStpMstPortForwardingState)
mibBuilder.exportSymbols("HM2-PLATFORM-SWITCHING-MIB", hm2AgentStpMstVlanTable=hm2AgentStpMstVlanTable, hm2AgentSdmTemplateSummaryTable=hm2AgentSdmTemplateSummaryTable, hm2AgentPortUnicastControlMode=hm2AgentPortUnicastControlMode, hm2AgentSwitchMFDBSummaryEntry=hm2AgentSwitchMFDBSummaryEntry, hm2AgentStpMstPortReceivedRegionalRPC=hm2AgentStpMstPortReceivedRegionalRPC, hm2AgentStaticDsBindingIpAddr=hm2AgentStaticDsBindingIpAddr, hm2AgentStaticDsBindingVlanId=hm2AgentStaticDsBindingVlanId, hm2AgentSwitchMFDBForwardingPortMask=hm2AgentSwitchMFDBForwardingPortMask, hm2AgentIpsgIfConfigEntry=hm2AgentIpsgIfConfigEntry, hm2AgentDaiVlanAclPermits=hm2AgentDaiVlanAclPermits, hm2AgentSwitchSnoopingIntfGroupMembershipInterval=hm2AgentSwitchSnoopingIntfGroupMembershipInterval, hm2AgentDaiIfConfigTable=hm2AgentDaiIfConfigTable, hm2AgentStpMstTable=hm2AgentStpMstTable, hm2AgentArpAclEntry=hm2AgentArpAclEntry, hm2AgentSwitchSnoopingVlanMaxResponseTime=hm2AgentSwitchSnoopingVlanMaxResponseTime, hm2AgentSwitchMFDBVlanId=hm2AgentSwitchMFDBVlanId, hm2AgentDhcpSnoopingStatsTable=hm2AgentDhcpSnoopingStatsTable, hm2AgentLagSummaryFlushTimer=hm2AgentLagSummaryFlushTimer, hm2AgentSdmTemplateId=hm2AgentSdmTemplateId, hm2AgentSwitchVlanSubnetAssociationEntry=hm2AgentSwitchVlanSubnetAssociationEntry, hm2PlatformSwitching=hm2PlatformSwitching, hm2AgentLagSummaryMinimumActiveLinks=hm2AgentLagSummaryMinimumActiveLinks, hm2AgentPortMirrorDestinationPortInvalid=hm2AgentPortMirrorDestinationPortInvalid, hm2AgentStpCstHelloTime=hm2AgentStpCstHelloTime, hm2AgentPortConfigEntry=hm2AgentPortConfigEntry, hm2AgentStpMstSwitchVersionConflict=hm2AgentStpMstSwitchVersionConflict, hm2AgentDaiVlanBindingCheckEnable=hm2AgentDaiVlanBindingCheckEnable, hm2AgentStpMstVlanRowStatus=hm2AgentStpMstVlanRowStatus, hm2AgentStpPortTable=hm2AgentStpPortTable, hm2AgentStpCstPortOperEdge=hm2AgentStpCstPortOperEdge, hm2AgentDynamicDsBindingEntry=hm2AgentDynamicDsBindingEntry, hm2AgentSwitchVlanMacAssociationTable=hm2AgentSwitchVlanMacAssociationTable, hm2AgentDhcpSnoopingInvalidServerMessages=hm2AgentDhcpSnoopingInvalidServerMessages, hm2AgentPortClearStats=hm2AgentPortClearStats, hm2AgentDaiDstMacValidate=hm2AgentDaiDstMacValidate, hm2AgentLagConfigGroupPortIsLagMemberErrorReturn=hm2AgentLagConfigGroupPortIsLagMemberErrorReturn, hm2AgentDhcpL2RelayUntrustedSrvrMsgsWithOptn82=hm2AgentDhcpL2RelayUntrustedSrvrMsgsWithOptn82, hm2AgentStpBpduFilterDefault=hm2AgentStpBpduFilterDefault, hm2AgentDaiVlanStatsEntry=hm2AgentDaiVlanStatsEntry, hm2AgentDhcpSnoopingVlanConfigTable=hm2AgentDhcpSnoopingVlanConfigTable, hm2AgentPortDot3FlowControlOperStatus=hm2AgentPortDot3FlowControlOperStatus, hm2AgentSwitchConfigGroup=hm2AgentSwitchConfigGroup, hm2AgentDynamicIpsgBindingIfIndex=hm2AgentDynamicIpsgBindingIfIndex, hm2AgentLagConfigCreate=hm2AgentLagConfigCreate, hm2PlatformStpInstanceTopologyChangeTrap=hm2PlatformStpInstanceTopologyChangeTrap, hm2AgentDaiVlanDhcpPermits=hm2AgentDaiVlanDhcpPermits, hm2AgentSwitchSnoopingQuerierVersion=hm2AgentSwitchSnoopingQuerierVersion, hm2AgentSwitchMFDBSummaryMacAddress=hm2AgentSwitchMFDBSummaryMacAddress, hm2AgentDaiIPValidate=hm2AgentDaiIPValidate, hm2AgentSwitchVlanStaticMrouterEntry=hm2AgentSwitchVlanStaticMrouterEntry, hm2AgentDhcpSnoopingIfBurstInterval=hm2AgentDhcpSnoopingIfBurstInterval, hm2AgentDhcpL2RelayRemoteIdVlanEnable=hm2AgentDhcpL2RelayRemoteIdVlanEnable, hm2AgentProtocolGroupPortTable=hm2AgentProtocolGroupPortTable, hm2AgentLagSummaryMaxFrameSize=hm2AgentLagSummaryMaxFrameSize, hm2AgentLagConfigGroupMaxNumPortsPerLag=hm2AgentLagConfigGroupMaxNumPortsPerLag, hm2AgentSdmTemplateEntry=hm2AgentSdmTemplateEntry, hm2AgentLagConfigGroupHashOption=hm2AgentLagConfigGroupHashOption, hm2PlatformStpInstanceLoopInconsistentStartTrap=hm2PlatformStpInstanceLoopInconsistentStartTrap, hm2AgentStpCstPortAutoEdge=hm2AgentStpCstPortAutoEdge, hm2AgentProtocolGroupPortEntry=hm2AgentProtocolGroupPortEntry, hm2AgentDhcpSnoopingIfTrustEnable=hm2AgentDhcpSnoopingIfTrustEnable, hm2AgentConfigGroup=hm2AgentConfigGroup, hm2AgentSwitchGmrpPortEntry=hm2AgentSwitchGmrpPortEntry, hm2AgentSwitchVoiceVlanInterfaceNum=hm2AgentSwitchVoiceVlanInterfaceNum, hm2AgentStpMstPortTransitionsOutOfLoopInconsistentState=hm2AgentStpMstPortTransitionsOutOfLoopInconsistentState, hm2AgentSwitchSnoopingIntfFastLeaveAdminMode=hm2AgentSwitchSnoopingIntfFastLeaveAdminMode, hm2AgentDynamicDsBindingMacAddr=hm2AgentDynamicDsBindingMacAddr, hm2AgentDhcpL2RelayVlanConfigTable=hm2AgentDhcpL2RelayVlanConfigTable, hm2AgentDhcpSnoopingRemoteFileName=hm2AgentDhcpSnoopingRemoteFileName, hm2AgentStpCstPortEdge=hm2AgentStpCstPortEdge, hm2AgentStaticIpsgBindingTable=hm2AgentStaticIpsgBindingTable, PYSNMP_MODULE_ID=hm2PlatformSwitching, hm2AgentStpCstRegionalRootPathCost=hm2AgentStpCstRegionalRootPathCost, hm2AgentLagConfigGroupNumOfLagsConfigured=hm2AgentLagConfigGroupNumOfLagsConfigured, hm2AgentIPv4MulticastRoutes=hm2AgentIPv4MulticastRoutes, hm2AgentPortMirrorPrivateVlanConfigured=hm2AgentPortMirrorPrivateVlanConfigured, hm2AgentPortMirrorRemoteVlan=hm2AgentPortMirrorRemoteVlan, hm2AgentPortMirrorRemoteDestinationVlan=hm2AgentPortMirrorRemoteDestinationVlan, hm2AgentDot3adAggPortTable=hm2AgentDot3adAggPortTable, hm2AgentClearVlan=hm2AgentClearVlan, hm2AgentDaiIfConfigEntry=hm2AgentDaiIfConfigEntry, hm2AgentSwitchVoiceVlanDeviceMacAddress=hm2AgentSwitchVoiceVlanDeviceMacAddress, hm2AgentPortMirrorDestinationRemotePortNotSet=hm2AgentPortMirrorDestinationRemotePortNotSet, hm2AgentArpAclRuleMatchSenderMacAddr=hm2AgentArpAclRuleMatchSenderMacAddr, hm2AgentDaiVlanIndex=hm2AgentDaiVlanIndex, hm2AgentSwitchGmrpPortTable=hm2AgentSwitchGmrpPortTable, hm2AgentProtocolGroupName=hm2AgentProtocolGroupName, hm2AgentDhcpL2RelayVlanConfigEntry=hm2AgentDhcpL2RelayVlanConfigEntry, hm2AgentIPv6UnicastRoutes=hm2AgentIPv6UnicastRoutes, hm2AgentStpMstDesignatedRootId=hm2AgentStpMstDesignatedRootId, hm2AgentDaiStatsReset=hm2AgentDaiStatsReset, hm2AgentSwitchAddressAgingTimeoutTable=hm2AgentSwitchAddressAgingTimeoutTable, hm2AgentProtocolGroupTable=hm2AgentProtocolGroupTable, hm2AgentStpMstPortTransitionsIntoLoopInconsistentState=hm2AgentStpMstPortTransitionsIntoLoopInconsistentState, hm2PlatformStpInstanceLoopInconsistentEndTrap=hm2PlatformStpInstanceLoopInconsistentEndTrap, hm2AgentIpsgIfVerifySource=hm2AgentIpsgIfVerifySource, hm2AgentStaticDsBindingIfIndex=hm2AgentStaticDsBindingIfIndex, hm2AgentPortMirrorReflectorPortVlanConflict=hm2AgentPortMirrorReflectorPortVlanConflict, hm2AgentDynamicIpsgBindingEntry=hm2AgentDynamicIpsgBindingEntry, hm2AgentPortUnicastControlThreshold=hm2AgentPortUnicastControlThreshold, hm2AgentSwitchGmrpPortPktTx=hm2AgentSwitchGmrpPortPktTx, hm2AgentDhcpSnoopingIfConfigTable=hm2AgentDhcpSnoopingIfConfigTable, hm2AgentPortMirrorRemoteSourceVlan=hm2AgentPortMirrorRemoteSourceVlan, hm2AgentIPv4UnicastRoutes=hm2AgentIPv4UnicastRoutes, hm2AgentSwitchStaticMacFilteringVlanId=hm2AgentSwitchStaticMacFilteringVlanId, hm2AgentPortMirrorVlanNotCreated=hm2AgentPortMirrorVlanNotCreated, hm2AgentSwitchSnoopingVlanReportSuppMode=hm2AgentSwitchSnoopingVlanReportSuppMode, hm2AgentDaiVlanConfigTable=hm2AgentDaiVlanConfigTable, hm2AgentPortUnicastControlThresholdUnit=hm2AgentPortUnicastControlThresholdUnit, hm2AgentStpCstPortPathCost=hm2AgentStpCstPortPathCost, hm2AgentSwitchVoiceVlanDeviceEntry=hm2AgentSwitchVoiceVlanDeviceEntry, hm2AgentDhcpL2RelayAdminMode=hm2AgentDhcpL2RelayAdminMode, hm2AgentPortMirrorSourceVlan=hm2AgentPortMirrorSourceVlan, hm2AgentSwitchMFDBMostEntriesUsed=hm2AgentSwitchMFDBMostEntriesUsed, hm2AgentStpCstBridgeMaxHops=hm2AgentStpCstBridgeMaxHops, hm2AgentStpCstBridgeHelloTime=hm2AgentStpCstBridgeHelloTime, hm2AgentSwitchVlanMacAssociationEntry=hm2AgentSwitchVlanMacAssociationEntry, hm2AgentDaiIfRateLimit=hm2AgentDaiIfRateLimit, hm2AgentSwitchGvrpPortEntry=hm2AgentSwitchGvrpPortEntry, hm2AgentPortMirroringGroup=hm2AgentPortMirroringGroup, Ipv6AddressIfIdentifier=Ipv6AddressIfIdentifier, hm2AgentStpCstFwdDelayErrorReturn=hm2AgentStpCstFwdDelayErrorReturn, hm2AgentSwitchVlanStaticMrouterGroup=hm2AgentSwitchVlanStaticMrouterGroup, hm2AgentProtocolGroupVlanId=hm2AgentProtocolGroupVlanId, hm2AgentStpAdminMode=hm2AgentStpAdminMode, hm2AgentSdmPreferCurrentTemplate=hm2AgentSdmPreferCurrentTemplate, hm2AgentDaiVlanDstMacFailures=hm2AgentDaiVlanDstMacFailures, hm2AgentDynamicDsBindingVlanId=hm2AgentDynamicDsBindingVlanId, hm2AgentLagSummaryName=hm2AgentLagSummaryName, hm2AgentSwitchStaticMacStatsGroup=hm2AgentSwitchStaticMacStatsGroup, hm2AgentStpCstMaxAge=hm2AgentStpCstMaxAge, hm2AgentStaticDsBindingTable=hm2AgentStaticDsBindingTable, hm2AgentStpPortUpTime=hm2AgentStpPortUpTime, hm2AgentLagMirrorProbePortLagMemberErrorReturn=hm2AgentLagMirrorProbePortLagMemberErrorReturn, hm2AgentPortMirrorAllowMgmtMode=hm2AgentPortMirrorAllowMgmtMode, hm2AgentSwitchGvrpPortTable=hm2AgentSwitchGvrpPortTable, hm2AgentStpCstConfigGroup=hm2AgentStpCstConfigGroup, hm2AgentStpCstPortPriority=hm2AgentStpCstPortPriority, hm2AgentClassOfServicePortClass=hm2AgentClassOfServicePortClass, hm2AgentStpPortStatsStpBpduTx=hm2AgentStpPortStatsStpBpduTx, hm2AgentSwitchProtectedPortTable=hm2AgentSwitchProtectedPortTable, hm2AgentLagDetailedConfigEntry=hm2AgentLagDetailedConfigEntry, hm2AgentDaiIfBurstInterval=hm2AgentDaiIfBurstInterval, hm2AgentLagConfigStaticCapability=hm2AgentLagConfigStaticCapability, hm2AgentStaticIpsgBindingHwStatus=hm2AgentStaticIpsgBindingHwStatus, hm2AgentPortMirrorReflectorPort=hm2AgentPortMirrorReflectorPort, Ipv6IfIndex=Ipv6IfIndex, hm2AgentLagSummaryStaticCapability=hm2AgentLagSummaryStaticCapability, hm2AgentDynamicDsBindingLeaseRemainingTime=hm2AgentDynamicDsBindingLeaseRemainingTime, hm2AgentDaiVlanStatsTable=hm2AgentDaiVlanStatsTable, hm2AgentSwitchSnoopingVlanGroupMembershipInterval=hm2AgentSwitchSnoopingVlanGroupMembershipInterval, hm2AgentStpCstBridgePriority=hm2AgentStpCstBridgePriority, hm2AgentDaiVlanIpValidFailures=hm2AgentDaiVlanIpValidFailures, hm2AgentStpBpduGuardMode=hm2AgentStpBpduGuardMode, hm2AgentStpMstInstanceVlanErrorReturn=hm2AgentStpMstInstanceVlanErrorReturn, hm2AgentDhcpL2RelayUntrustedClntMsgsWithOptn82=hm2AgentDhcpL2RelayUntrustedClntMsgsWithOptn82, hm2AgentLagSummaryMaxFrameSizeLimit=hm2AgentLagSummaryMaxFrameSizeLimit, hm2AgentPortMirrorRspanVlanInconsistent=hm2AgentPortMirrorRspanVlanInconsistent, hm2AgentDot3adAggPort=hm2AgentDot3adAggPort, hm2AgentSwitchSnoopingIntfGroup=hm2AgentSwitchSnoopingIntfGroup, hm2AgentStpRingOnlyMode=hm2AgentStpRingOnlyMode, hm2AgentPortMirrorProbePortVlanConflict=hm2AgentPortMirrorProbePortVlanConflict, hm2AgentStpPortStatsRstpBpduRx=hm2AgentStpPortStatsRstpBpduRx, hm2AgentLagSummaryLagIndex=hm2AgentLagSummaryLagIndex, hm2AgentPortMirrorSNMPExtensionGroup=hm2AgentPortMirrorSNMPExtensionGroup, hm2AgentStpCstPortBpduFlood=hm2AgentStpCstPortBpduFlood, hm2AgentSwitchSnoopingIntfEntry=hm2AgentSwitchSnoopingIntfEntry, hm2AgentPortDot1dBasePort=hm2AgentPortDot1dBasePort, hm2AgentPortMirrorVlanRspanVlanConflict=hm2AgentPortMirrorVlanRspanVlanConflict, hm2AgentStpPortStatsStpBpduRx=hm2AgentStpPortStatsStpBpduRx, hm2AgentProtocolGroupProtocolEntry=hm2AgentProtocolGroupProtocolEntry, hm2AgentStpPortStatsMstpBpduTx=hm2AgentStpPortStatsMstpBpduTx, hm2AgentSwitchSnoopingMulticastControlFramesProcessed=hm2AgentSwitchSnoopingMulticastControlFramesProcessed, hm2AgentDhcpSnoopingIfRateLimit=hm2AgentDhcpSnoopingIfRateLimit, hm2AgentStpMstVlanEntry=hm2AgentStpMstVlanEntry, hm2AgentSwitchMFDBDescription=hm2AgentSwitchMFDBDescription, hm2AgentSwitchMFDBMaxTableEntries=hm2AgentSwitchMFDBMaxTableEntries, hm2AgentLagSummaryType=hm2AgentLagSummaryType, hm2AgentDot3adAggPortLACPMode=hm2AgentDot3adAggPortLACPMode, hm2AgentEcmpNextHops=hm2AgentEcmpNextHops, hm2AgentDhcpL2RelayIfTrustEnable=hm2AgentDhcpL2RelayIfTrustEnable, hm2AgentStaticDsBindingMacAddr=hm2AgentStaticDsBindingMacAddr, hm2AgentDynamicIpsgBindingVlanId=hm2AgentDynamicIpsgBindingVlanId, hm2AgentStpCstDesignatedPortId=hm2AgentStpCstDesignatedPortId, hm2AgentStpCstPortRootGuard=hm2AgentStpCstPortRootGuard, hm2AgentStpMstDesignatedCost=hm2AgentStpMstDesignatedCost, hm2AgentArpAclTable=hm2AgentArpAclTable, hm2AgentDaiVlanConfigEntry=hm2AgentDaiVlanConfigEntry, hm2AgentSwitchVlanSubnetAssociationSubnetMask=hm2AgentSwitchVlanSubnetAssociationSubnetMask, hm2AgentStpRingOnlyModeIntfOne=hm2AgentStpRingOnlyModeIntfOne, hm2AgentLagSummaryAddPort=hm2AgentLagSummaryAddPort, hm2AgentSdmTemplateTable=hm2AgentSdmTemplateTable, hm2AgentSwitchSnoopingVlanFastLeaveAdminMode=hm2AgentSwitchSnoopingVlanFastLeaveAdminMode, hm2AgentStpCstPortBpduGuardEffect=hm2AgentStpCstPortBpduGuardEffect, hm2AgentStpMstBridgeIdentifier=hm2AgentStpMstBridgeIdentifier, hm2AgentPortVoiceVlanUntagged=hm2AgentPortVoiceVlanUntagged, hm2AgentSwitchStaticMacFilteringStatus=hm2AgentSwitchStaticMacFilteringStatus, hm2AgentSwitchSnoopingQuerierOperMaxResponseTime=hm2AgentSwitchSnoopingQuerierOperMaxResponseTime, hm2AgentStpPortEntry=hm2AgentStpPortEntry, hm2AgentStpMstBridgePriority=hm2AgentStpMstBridgePriority, hm2AgentDaiVlanArpAclName=hm2AgentDaiVlanArpAclName, hm2AgentLagSummaryLinkTrap=hm2AgentLagSummaryLinkTrap, hm2AgentSwitchVlanMacAssociationMacAddress=hm2AgentSwitchVlanMacAssociationMacAddress, hm2AgentPortMirrorTypeType=hm2AgentPortMirrorTypeType, hm2AgentSwitchVlanSubnetAssociationRowStatus=hm2AgentSwitchVlanSubnetAssociationRowStatus, hm2AgentDhcpL2RelayTrustedSrvrMsgsWithoutOptn82=hm2AgentDhcpL2RelayTrustedSrvrMsgsWithoutOptn82, hm2AgentPortVoiceVlanID=hm2AgentPortVoiceVlanID, hm2AgentLagConfigGroupMaxNumOfLags=hm2AgentLagConfigGroupMaxNumOfLags, hm2AgentStpMstEntry=hm2AgentStpMstEntry, hm2AgentStpMstDesignatedBridgeId=hm2AgentStpMstDesignatedBridgeId, hm2AgentLagConfigGroupLagsConfigured=hm2AgentLagConfigGroupLagsConfigured, hm2AgentLagSummaryHashOption=hm2AgentLagSummaryHashOption, hm2AgentSwitchSnoopingQuerierExpiryInterval=hm2AgentSwitchSnoopingQuerierExpiryInterval, hm2AgentLagDetailedPortStatus=hm2AgentLagDetailedPortStatus, hm2AgentPortMirrorTable=hm2AgentPortMirrorTable, hm2AgentPortMirrorRemoteSourceRemoteDestinationConflict=hm2AgentPortMirrorRemoteSourceRemoteDestinationConflict, hm2AgentDhcpSnoopingAdminMode=hm2AgentDhcpSnoopingAdminMode, hm2AgentArpAclName=hm2AgentArpAclName, hm2AgentDhcpSnoopingVlanEnable=hm2AgentDhcpSnoopingVlanEnable, hm2AgentDhcpSnoopingVerifyMac=hm2AgentDhcpSnoopingVerifyMac, hm2AgentStpCstExtPortPathCost=hm2AgentStpCstExtPortPathCost, hm2AgentSwitchSnoopingIntfMRPExpirationTime=hm2AgentSwitchSnoopingIntfMRPExpirationTime, hm2PlatformStpInstanceNewRootTrap=hm2PlatformStpInstanceNewRootTrap, hm2AgentPortMulticastControlThresholdUnit=hm2AgentPortMulticastControlThresholdUnit, hm2AgentProtocolGroupId=hm2AgentProtocolGroupId, hm2AgentDhcpL2RelayVlanEnable=hm2AgentDhcpL2RelayVlanEnable, hm2AgentPortBroadcastControlMode=hm2AgentPortBroadcastControlMode, hm2AgentIpsgIfConfigTable=hm2AgentIpsgIfConfigTable, hm2AgentPortMirrorTypeEntry=hm2AgentPortMirrorTypeEntry)
