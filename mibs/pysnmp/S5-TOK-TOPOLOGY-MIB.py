#
# PySNMP MIB module S5-TOK-TOPOLOGY-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/S5-TOK-TOPOLOGY-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 20:51:33 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, Integer, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "OctetString", "Integer", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueSizeConstraint, ConstraintsUnion, ValueRangeConstraint, ConstraintsIntersection, SingleValueConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueSizeConstraint", "ConstraintsUnion", "ValueRangeConstraint", "ConstraintsIntersection", "SingleValueConstraint")
s5TrTop, = mibBuilder.importSymbols("S5-ROOT-MIB", "s5TrTop")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
IpAddress, iso, Counter32, Counter64, NotificationType, MibIdentifier, Integer32, TimeTicks, Gauge32, ObjectIdentity, Unsigned32, MibScalar, MibTable, MibTableRow, MibTableColumn, ModuleIdentity, Bits = mibBuilder.importSymbols("SNMPv2-SMI", "IpAddress", "iso", "Counter32", "Counter64", "NotificationType", "MibIdentifier", "Integer32", "TimeTicks", "Gauge32", "ObjectIdentity", "Unsigned32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "ModuleIdentity", "Bits")
DisplayString, MacAddress, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "MacAddress", "TextualConvention")
SnpxChassisType, SnpxBackplaneType = mibBuilder.importSymbols("SYNOPTICS-ROOT-MIB", "SnpxChassisType", "SnpxBackplaneType")
s5TrTopIfTable = MibTable((1, 3, 6, 1, 4, 1, 45, 1, 6, 10, 1), )
if mibBuilder.loadTexts: s5TrTopIfTable.setStatus('mandatory')
s5TrTopIfEntry = MibTableRow((1, 3, 6, 1, 4, 1, 45, 1, 6, 10, 1, 1), ).setIndexNames((0, "S5-TOK-TOPOLOGY-MIB", "s5TrTopIfIpAddr"))
if mibBuilder.loadTexts: s5TrTopIfEntry.setStatus('mandatory')
s5TrTopIfIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 1, 6, 10, 1, 1, 1), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: s5TrTopIfIpAddr.setStatus('mandatory')
s5TrTopIfNum = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 1, 6, 10, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: s5TrTopIfNum.setStatus('mandatory')
s5TrTopIfStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 1, 6, 10, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("topOn", 1), ("topOff", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: s5TrTopIfStatus.setStatus('mandatory')
s5TrTopIfNmmLstChg = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 1, 6, 10, 1, 1, 4), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: s5TrTopIfNmmLstChg.setStatus('mandatory')
s5TrTopIfBdgLstChg = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 1, 6, 10, 1, 1, 5), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: s5TrTopIfBdgLstChg.setStatus('mandatory')
s5TrTopIfRingNmmLstChg = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 1, 6, 10, 1, 1, 6), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: s5TrTopIfRingNmmLstChg.setStatus('mandatory')
s5TrTopIfNmmMaxNum = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 1, 6, 10, 1, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: s5TrTopIfNmmMaxNum.setStatus('mandatory')
s5TrTopIfNmmCurNum = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 1, 6, 10, 1, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: s5TrTopIfNmmCurNum.setStatus('mandatory')
s5TrTopIfBdgMaxNum = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 1, 6, 10, 1, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: s5TrTopIfBdgMaxNum.setStatus('mandatory')
s5TrTopIfBdgCurNum = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 1, 6, 10, 1, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: s5TrTopIfBdgCurNum.setStatus('mandatory')
s5TrTopIfRingNmmMaxNum = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 1, 6, 10, 1, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: s5TrTopIfRingNmmMaxNum.setStatus('mandatory')
s5TrTopIfRingNmmCurNum = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 1, 6, 10, 1, 1, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: s5TrTopIfRingNmmCurNum.setStatus('mandatory')
s5TrTopIfTopSpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 1, 6, 10, 1, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("topFast", 2), ("topSlow", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: s5TrTopIfTopSpeed.setStatus('mandatory')
s5TrTopNmmTable = MibTable((1, 3, 6, 1, 4, 1, 45, 1, 6, 10, 2), )
if mibBuilder.loadTexts: s5TrTopNmmTable.setStatus('mandatory')
s5TrTopNmmEntry = MibTableRow((1, 3, 6, 1, 4, 1, 45, 1, 6, 10, 2, 1), ).setIndexNames((0, "S5-TOK-TOPOLOGY-MIB", "s5TrTopNmmIfIpAddr"), (0, "S5-TOK-TOPOLOGY-MIB", "s5TrTopNmmIpAddr"))
if mibBuilder.loadTexts: s5TrTopNmmEntry.setStatus('mandatory')
s5TrTopNmmIfIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 1, 6, 10, 2, 1, 1), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: s5TrTopNmmIfIpAddr.setStatus('mandatory')
s5TrTopNmmIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 1, 6, 10, 2, 1, 2), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: s5TrTopNmmIpAddr.setStatus('mandatory')
s5TrTopNmmRingNum = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 1, 6, 10, 2, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4095))).setMaxAccess("readonly")
if mibBuilder.loadTexts: s5TrTopNmmRingNum.setStatus('mandatory')
s5TrTopNmmRingMaster = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 1, 6, 10, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("normal", 1), ("master", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: s5TrTopNmmRingMaster.setStatus('mandatory')
s5TrTopNmmRingSpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 1, 6, 10, 2, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: s5TrTopNmmRingSpeed.setStatus('mandatory')
s5TrTopNmmBridgeGroupIdentifier = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 1, 6, 10, 2, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: s5TrTopNmmBridgeGroupIdentifier.setStatus('mandatory')
s5TrTopNmmSlotNum = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 1, 6, 10, 2, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: s5TrTopNmmSlotNum.setStatus('mandatory')
s5TrTopNmmPortNum = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 1, 6, 10, 2, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: s5TrTopNmmPortNum.setStatus('mandatory')
s5TrTopBdgTable = MibTable((1, 3, 6, 1, 4, 1, 45, 1, 6, 10, 3), )
if mibBuilder.loadTexts: s5TrTopBdgTable.setStatus('mandatory')
s5TrTopBdgEntry = MibTableRow((1, 3, 6, 1, 4, 1, 45, 1, 6, 10, 3, 1), ).setIndexNames((0, "S5-TOK-TOPOLOGY-MIB", "s5TrTopBdgIfIpAddr"), (0, "S5-TOK-TOPOLOGY-MIB", "s5TrTopBdgIndx"))
if mibBuilder.loadTexts: s5TrTopBdgEntry.setStatus('mandatory')
s5TrTopBdgIfIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 1, 6, 10, 3, 1, 1), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: s5TrTopBdgIfIpAddr.setStatus('mandatory')
s5TrTopBdgIndx = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 1, 6, 10, 3, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: s5TrTopBdgIndx.setStatus('mandatory')
s5TrTopBdgNum = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 1, 6, 10, 3, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 15))).setMaxAccess("readonly")
if mibBuilder.loadTexts: s5TrTopBdgNum.setStatus('mandatory')
s5TrTopBdgOwnRingNum = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 1, 6, 10, 3, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4095))).setMaxAccess("readonly")
if mibBuilder.loadTexts: s5TrTopBdgOwnRingNum.setStatus('mandatory')
s5TrTopBdgAdjRingNum = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 1, 6, 10, 3, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4095))).setMaxAccess("readonly")
if mibBuilder.loadTexts: s5TrTopBdgAdjRingNum.setStatus('mandatory')
s5TrTopBdgAdjMasterNmmIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 1, 6, 10, 3, 1, 6), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: s5TrTopBdgAdjMasterNmmIpAddr.setStatus('mandatory')
s5TrTopBdgMacAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 1, 6, 10, 3, 1, 7), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: s5TrTopBdgMacAddr.setStatus('mandatory')
s5TrTopBdgIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 1, 6, 10, 3, 1, 8), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: s5TrTopBdgIpAddr.setStatus('mandatory')
s5TrTopBdgType = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 1, 6, 10, 3, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("other", 1), ("t3522Syn2Port", 2), ("t2722Syn2Port", 3), ("tCenTillionTrSwitch", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: s5TrTopBdgType.setStatus('mandatory')
s5TrTopBdgSlotNum = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 1, 6, 10, 3, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: s5TrTopBdgSlotNum.setStatus('mandatory')
s5TrTopBdgPortNum = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 1, 6, 10, 3, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: s5TrTopBdgPortNum.setStatus('mandatory')
s5TrTopBdgNumPort = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 1, 6, 10, 3, 1, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: s5TrTopBdgNumPort.setStatus('mandatory')
s5TrTopBdgHelloPortNum = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 1, 6, 10, 3, 1, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: s5TrTopBdgHelloPortNum.setStatus('mandatory')
s5TrTopBdgHelloPortStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 1, 6, 10, 3, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9))).clone(namedValues=NamedValues(("other", 1), ("tranAct", 2), ("tranStnBy", 3), ("srSrsOn", 4), ("srSrsOff", 5), ("srSrsOnTranAct", 6), ("srSrsOffTranAct", 7), ("srSrsOnStnBy", 8), ("srSrsOffStnBy", 9)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: s5TrTopBdgHelloPortStatus.setStatus('mandatory')
s5TrTopBdgMonPortStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 1, 6, 10, 3, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("other", 1), ("phantomOff", 2), ("phantomOn", 3), ("phantomOffWrapped", 4), ("phantomOnWrapped", 5), ("wrongSpeedWrap", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: s5TrTopBdgMonPortStatus.setStatus('mandatory')
s5TrTopBdgHelloType = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 1, 6, 10, 3, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("synoptics", 2), ("ibm", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: s5TrTopBdgHelloType.setStatus('mandatory')
s5TrTopRingNmmTable = MibTable((1, 3, 6, 1, 4, 1, 45, 1, 6, 10, 4), )
if mibBuilder.loadTexts: s5TrTopRingNmmTable.setStatus('mandatory')
s5TrTopRingNmmEntry = MibTableRow((1, 3, 6, 1, 4, 1, 45, 1, 6, 10, 4, 1), ).setIndexNames((0, "S5-TOK-TOPOLOGY-MIB", "s5TrTopRingNmmIfIpAddr"), (0, "S5-TOK-TOPOLOGY-MIB", "s5TrTopRingNmmIpAddr"))
if mibBuilder.loadTexts: s5TrTopRingNmmEntry.setStatus('mandatory')
s5TrTopRingNmmIfIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 1, 6, 10, 4, 1, 1), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: s5TrTopRingNmmIfIpAddr.setStatus('mandatory')
s5TrTopRingNmmIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 1, 6, 10, 4, 1, 2), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: s5TrTopRingNmmIpAddr.setStatus('mandatory')
s5TrTopRingNmmMacAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 1, 6, 10, 4, 1, 3), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: s5TrTopRingNmmMacAddr.setStatus('mandatory')
s5TrTopRingNmmChassisType = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 1, 6, 10, 4, 1, 4), SnpxChassisType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: s5TrTopRingNmmChassisType.setStatus('mandatory')
s5TrTopRingNmmBkplType = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 1, 6, 10, 4, 1, 5), SnpxBackplaneType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: s5TrTopRingNmmBkplType.setStatus('mandatory')
s5TrTopRingNmmSlotNum = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 1, 6, 10, 4, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: s5TrTopRingNmmSlotNum.setStatus('mandatory')
s5TrTopRingNmmUnaIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 1, 6, 10, 4, 1, 7), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: s5TrTopRingNmmUnaIpAddr.setStatus('mandatory')
s5TrTopNmmEosSize = MibScalar((1, 3, 6, 1, 4, 1, 45, 1, 6, 10, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1400))).setMaxAccess("readonly")
if mibBuilder.loadTexts: s5TrTopNmmEosSize.setStatus('mandatory')
s5TrTopNmmEosTable = MibTable((1, 3, 6, 1, 4, 1, 45, 1, 6, 10, 6), )
if mibBuilder.loadTexts: s5TrTopNmmEosTable.setStatus('mandatory')
s5TrTopNmmEosEntry = MibTableRow((1, 3, 6, 1, 4, 1, 45, 1, 6, 10, 6, 1), ).setIndexNames((0, "S5-TOK-TOPOLOGY-MIB", "s5TrTopNmmIfIpAddr"), (0, "S5-TOK-TOPOLOGY-MIB", "s5TrTopNmmIpAddr"))
if mibBuilder.loadTexts: s5TrTopNmmEosEntry.setStatus('mandatory')
s5TrTopNmmEos = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 1, 6, 10, 6, 1, 1), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 1400))).setMaxAccess("readonly")
if mibBuilder.loadTexts: s5TrTopNmmEos.setStatus('mandatory')
s5TrTopBdgEosSize = MibScalar((1, 3, 6, 1, 4, 1, 45, 1, 6, 10, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1400))).setMaxAccess("readonly")
if mibBuilder.loadTexts: s5TrTopBdgEosSize.setStatus('mandatory')
s5TrTopBdgEosTable = MibTable((1, 3, 6, 1, 4, 1, 45, 1, 6, 10, 8), )
if mibBuilder.loadTexts: s5TrTopBdgEosTable.setStatus('mandatory')
s5TrTopBdgEosEntry = MibTableRow((1, 3, 6, 1, 4, 1, 45, 1, 6, 10, 8, 1), ).setIndexNames((0, "S5-TOK-TOPOLOGY-MIB", "s5TrTopBdgIfIpAddr"), (0, "S5-TOK-TOPOLOGY-MIB", "s5TrTopBdgIndx"))
if mibBuilder.loadTexts: s5TrTopBdgEosEntry.setStatus('mandatory')
s5TrTopBdgEos = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 1, 6, 10, 8, 1, 1), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 1400))).setMaxAccess("readonly")
if mibBuilder.loadTexts: s5TrTopBdgEos.setStatus('mandatory')
s5TrTopRingNmmEosSize = MibScalar((1, 3, 6, 1, 4, 1, 45, 1, 6, 10, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1400))).setMaxAccess("readonly")
if mibBuilder.loadTexts: s5TrTopRingNmmEosSize.setStatus('mandatory')
s5TrTopRingNmmEosTable = MibTable((1, 3, 6, 1, 4, 1, 45, 1, 6, 10, 10), )
if mibBuilder.loadTexts: s5TrTopRingNmmEosTable.setStatus('mandatory')
s5TrTopRingNmmEosEntry = MibTableRow((1, 3, 6, 1, 4, 1, 45, 1, 6, 10, 10, 1), ).setIndexNames((0, "S5-TOK-TOPOLOGY-MIB", "s5TrTopRingNmmIfIpAddr"), (0, "S5-TOK-TOPOLOGY-MIB", "s5TrTopRingNmmIpAddr"))
if mibBuilder.loadTexts: s5TrTopRingNmmEosEntry.setStatus('mandatory')
s5TrTopRingNmmEos = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 1, 6, 10, 10, 1, 1), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 1400))).setMaxAccess("readonly")
if mibBuilder.loadTexts: s5TrTopRingNmmEos.setStatus('mandatory')
mibBuilder.exportSymbols("S5-TOK-TOPOLOGY-MIB", s5TrTopIfBdgMaxNum=s5TrTopIfBdgMaxNum, s5TrTopBdgType=s5TrTopBdgType, s5TrTopNmmRingMaster=s5TrTopNmmRingMaster, s5TrTopNmmIfIpAddr=s5TrTopNmmIfIpAddr, s5TrTopBdgEosTable=s5TrTopBdgEosTable, s5TrTopBdgEosSize=s5TrTopBdgEosSize, s5TrTopRingNmmSlotNum=s5TrTopRingNmmSlotNum, s5TrTopBdgTable=s5TrTopBdgTable, s5TrTopNmmIpAddr=s5TrTopNmmIpAddr, s5TrTopNmmRingSpeed=s5TrTopNmmRingSpeed, s5TrTopIfNmmMaxNum=s5TrTopIfNmmMaxNum, s5TrTopBdgIndx=s5TrTopBdgIndx, s5TrTopNmmBridgeGroupIdentifier=s5TrTopNmmBridgeGroupIdentifier, s5TrTopIfRingNmmCurNum=s5TrTopIfRingNmmCurNum, s5TrTopBdgIpAddr=s5TrTopBdgIpAddr, s5TrTopIfBdgLstChg=s5TrTopIfBdgLstChg, s5TrTopBdgAdjMasterNmmIpAddr=s5TrTopBdgAdjMasterNmmIpAddr, s5TrTopRingNmmChassisType=s5TrTopRingNmmChassisType, s5TrTopIfNmmCurNum=s5TrTopIfNmmCurNum, s5TrTopRingNmmBkplType=s5TrTopRingNmmBkplType, s5TrTopRingNmmEosTable=s5TrTopRingNmmEosTable, s5TrTopRingNmmEosSize=s5TrTopRingNmmEosSize, s5TrTopBdgHelloType=s5TrTopBdgHelloType, s5TrTopIfStatus=s5TrTopIfStatus, s5TrTopIfIpAddr=s5TrTopIfIpAddr, s5TrTopIfTopSpeed=s5TrTopIfTopSpeed, s5TrTopBdgAdjRingNum=s5TrTopBdgAdjRingNum, s5TrTopNmmRingNum=s5TrTopNmmRingNum, s5TrTopRingNmmIfIpAddr=s5TrTopRingNmmIfIpAddr, s5TrTopBdgIfIpAddr=s5TrTopBdgIfIpAddr, s5TrTopBdgHelloPortStatus=s5TrTopBdgHelloPortStatus, s5TrTopBdgPortNum=s5TrTopBdgPortNum, s5TrTopNmmEosEntry=s5TrTopNmmEosEntry, s5TrTopIfEntry=s5TrTopIfEntry, s5TrTopBdgEntry=s5TrTopBdgEntry, s5TrTopRingNmmTable=s5TrTopRingNmmTable, s5TrTopBdgMonPortStatus=s5TrTopBdgMonPortStatus, s5TrTopIfNmmLstChg=s5TrTopIfNmmLstChg, s5TrTopNmmSlotNum=s5TrTopNmmSlotNum, s5TrTopBdgSlotNum=s5TrTopBdgSlotNum, s5TrTopBdgEos=s5TrTopBdgEos, s5TrTopRingNmmMacAddr=s5TrTopRingNmmMacAddr, s5TrTopRingNmmEos=s5TrTopRingNmmEos, s5TrTopRingNmmEntry=s5TrTopRingNmmEntry, s5TrTopBdgHelloPortNum=s5TrTopBdgHelloPortNum, s5TrTopRingNmmEosEntry=s5TrTopRingNmmEosEntry, s5TrTopIfBdgCurNum=s5TrTopIfBdgCurNum, s5TrTopIfRingNmmMaxNum=s5TrTopIfRingNmmMaxNum, s5TrTopNmmEos=s5TrTopNmmEos, s5TrTopNmmEosTable=s5TrTopNmmEosTable, s5TrTopBdgOwnRingNum=s5TrTopBdgOwnRingNum, s5TrTopIfNum=s5TrTopIfNum, s5TrTopNmmEosSize=s5TrTopNmmEosSize, s5TrTopBdgNumPort=s5TrTopBdgNumPort, s5TrTopBdgNum=s5TrTopBdgNum, s5TrTopIfTable=s5TrTopIfTable, s5TrTopBdgMacAddr=s5TrTopBdgMacAddr, s5TrTopRingNmmUnaIpAddr=s5TrTopRingNmmUnaIpAddr, s5TrTopNmmTable=s5TrTopNmmTable, s5TrTopIfRingNmmLstChg=s5TrTopIfRingNmmLstChg, s5TrTopNmmEntry=s5TrTopNmmEntry, s5TrTopBdgEosEntry=s5TrTopBdgEosEntry, s5TrTopRingNmmIpAddr=s5TrTopRingNmmIpAddr, s5TrTopNmmPortNum=s5TrTopNmmPortNum)
