#
# PySNMP MIB module ATM2-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/ATM2-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 17:15:33 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, OctetString, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "Integer", "OctetString", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueSizeConstraint, ConstraintsIntersection, ConstraintsUnion, ValueRangeConstraint, SingleValueConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueSizeConstraint", "ConstraintsIntersection", "ConstraintsUnion", "ValueRangeConstraint", "SingleValueConstraint")
atmVclVci, atmVclVpi, atmInterfaceConfEntry, atmMIBObjects, atmVplEntry, atmVcCrossConnectEntry, atmVpCrossConnectEntry, atmVclEntry, atmVplVpi = mibBuilder.importSymbols("ATM-MIB", "atmVclVci", "atmVclVpi", "atmInterfaceConfEntry", "atmMIBObjects", "atmVplEntry", "atmVcCrossConnectEntry", "atmVpCrossConnectEntry", "atmVclEntry", "atmVplVpi")
AtmTrafficDescrParamIndex, AtmVpIdentifier, AtmSigDescrParamIndex, AtmAddr, AtmInterfaceType, AtmIlmiNetworkPrefix, AtmVcIdentifier = mibBuilder.importSymbols("ATM-TC-MIB", "AtmTrafficDescrParamIndex", "AtmVpIdentifier", "AtmSigDescrParamIndex", "AtmAddr", "AtmInterfaceType", "AtmIlmiNetworkPrefix", "AtmVcIdentifier")
InterfaceIndexOrZero, ifIndex, InterfaceIndex = mibBuilder.importSymbols("IF-MIB", "InterfaceIndexOrZero", "ifIndex", "InterfaceIndex")
SnmpAdminString, = mibBuilder.importSymbols("SNMP-FRAMEWORK-MIB", "SnmpAdminString")
NotificationGroup, ObjectGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ObjectGroup", "ModuleCompliance")
Gauge32, Unsigned32, IpAddress, Counter64, MibScalar, MibTable, MibTableRow, MibTableColumn, NotificationType, MibIdentifier, Integer32, ObjectIdentity, iso, Bits, TimeTicks, Counter32, ModuleIdentity = mibBuilder.importSymbols("SNMPv2-SMI", "Gauge32", "Unsigned32", "IpAddress", "Counter64", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "NotificationType", "MibIdentifier", "Integer32", "ObjectIdentity", "iso", "Bits", "TimeTicks", "Counter32", "ModuleIdentity")
RowStatus, TruthValue, TextualConvention, DisplayString, TimeStamp = mibBuilder.importSymbols("SNMPv2-TC", "RowStatus", "TruthValue", "TextualConvention", "DisplayString", "TimeStamp")
atm2MIB = ModuleIdentity((1, 3, 6, 1, 2, 1, 37, 1, 14))
atm2MIB.setRevisions(('2003-09-23 00:00',))
if mibBuilder.loadTexts: atm2MIB.setLastUpdated('200309230000Z')
if mibBuilder.loadTexts: atm2MIB.setOrganization('IETF AToMMIB Working Group')
atm2MIBObjects = MibIdentifier((1, 3, 6, 1, 2, 1, 37, 1, 14, 1))
atm2MIBTraps = MibIdentifier((1, 3, 6, 1, 2, 1, 37, 1, 14, 2))
atmSvcVpCrossConnectTable = MibTable((1, 3, 6, 1, 2, 1, 37, 1, 14, 1, 1), )
if mibBuilder.loadTexts: atmSvcVpCrossConnectTable.setStatus('current')
atmSvcVpCrossConnectEntry = MibTableRow((1, 3, 6, 1, 2, 1, 37, 1, 14, 1, 1, 1), ).setIndexNames((0, "ATM2-MIB", "atmSvcVpCrossConnectIndex"), (0, "ATM2-MIB", "atmSvcVpCrossConnectLowIfIndex"), (0, "ATM2-MIB", "atmSvcVpCrossConnectLowVpi"), (0, "ATM2-MIB", "atmSvcVpCrossConnectHighIfIndex"), (0, "ATM2-MIB", "atmSvcVpCrossConnectHighVpi"))
if mibBuilder.loadTexts: atmSvcVpCrossConnectEntry.setStatus('current')
atmSvcVpCrossConnectIndex = MibTableColumn((1, 3, 6, 1, 2, 1, 37, 1, 14, 1, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647)))
if mibBuilder.loadTexts: atmSvcVpCrossConnectIndex.setStatus('current')
atmSvcVpCrossConnectLowIfIndex = MibTableColumn((1, 3, 6, 1, 2, 1, 37, 1, 14, 1, 1, 1, 2), InterfaceIndex())
if mibBuilder.loadTexts: atmSvcVpCrossConnectLowIfIndex.setStatus('current')
atmSvcVpCrossConnectLowVpi = MibTableColumn((1, 3, 6, 1, 2, 1, 37, 1, 14, 1, 1, 1, 3), AtmVpIdentifier())
if mibBuilder.loadTexts: atmSvcVpCrossConnectLowVpi.setStatus('current')
atmSvcVpCrossConnectHighIfIndex = MibTableColumn((1, 3, 6, 1, 2, 1, 37, 1, 14, 1, 1, 1, 4), InterfaceIndex())
if mibBuilder.loadTexts: atmSvcVpCrossConnectHighIfIndex.setStatus('current')
atmSvcVpCrossConnectHighVpi = MibTableColumn((1, 3, 6, 1, 2, 1, 37, 1, 14, 1, 1, 1, 5), AtmVpIdentifier())
if mibBuilder.loadTexts: atmSvcVpCrossConnectHighVpi.setStatus('current')
atmSvcVpCrossConnectCreationTime = MibTableColumn((1, 3, 6, 1, 2, 1, 37, 1, 14, 1, 1, 1, 6), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmSvcVpCrossConnectCreationTime.setStatus('current')
atmSvcVpCrossConnectRowStatus = MibTableColumn((1, 3, 6, 1, 2, 1, 37, 1, 14, 1, 1, 1, 7), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmSvcVpCrossConnectRowStatus.setStatus('current')
atmSvcVcCrossConnectTable = MibTable((1, 3, 6, 1, 2, 1, 37, 1, 14, 1, 2), )
if mibBuilder.loadTexts: atmSvcVcCrossConnectTable.setStatus('current')
atmSvcVcCrossConnectEntry = MibTableRow((1, 3, 6, 1, 2, 1, 37, 1, 14, 1, 2, 1), ).setIndexNames((0, "ATM2-MIB", "atmSvcVcCrossConnectIndex"), (0, "ATM2-MIB", "atmSvcVcCrossConnectLowIfIndex"), (0, "ATM2-MIB", "atmSvcVcCrossConnectLowVpi"), (0, "ATM2-MIB", "atmSvcVcCrossConnectLowVci"), (0, "ATM2-MIB", "atmSvcVcCrossConnectHighIfIndex"), (0, "ATM2-MIB", "atmSvcVcCrossConnectHighVpi"), (0, "ATM2-MIB", "atmSvcVcCrossConnectHighVci"))
if mibBuilder.loadTexts: atmSvcVcCrossConnectEntry.setStatus('current')
atmSvcVcCrossConnectIndex = MibTableColumn((1, 3, 6, 1, 2, 1, 37, 1, 14, 1, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647)))
if mibBuilder.loadTexts: atmSvcVcCrossConnectIndex.setStatus('current')
atmSvcVcCrossConnectLowIfIndex = MibTableColumn((1, 3, 6, 1, 2, 1, 37, 1, 14, 1, 2, 1, 2), InterfaceIndex())
if mibBuilder.loadTexts: atmSvcVcCrossConnectLowIfIndex.setStatus('current')
atmSvcVcCrossConnectLowVpi = MibTableColumn((1, 3, 6, 1, 2, 1, 37, 1, 14, 1, 2, 1, 3), AtmVpIdentifier())
if mibBuilder.loadTexts: atmSvcVcCrossConnectLowVpi.setStatus('current')
atmSvcVcCrossConnectLowVci = MibTableColumn((1, 3, 6, 1, 2, 1, 37, 1, 14, 1, 2, 1, 4), AtmVcIdentifier())
if mibBuilder.loadTexts: atmSvcVcCrossConnectLowVci.setStatus('current')
atmSvcVcCrossConnectHighIfIndex = MibTableColumn((1, 3, 6, 1, 2, 1, 37, 1, 14, 1, 2, 1, 5), InterfaceIndex())
if mibBuilder.loadTexts: atmSvcVcCrossConnectHighIfIndex.setStatus('current')
atmSvcVcCrossConnectHighVpi = MibTableColumn((1, 3, 6, 1, 2, 1, 37, 1, 14, 1, 2, 1, 6), AtmVpIdentifier())
if mibBuilder.loadTexts: atmSvcVcCrossConnectHighVpi.setStatus('current')
atmSvcVcCrossConnectHighVci = MibTableColumn((1, 3, 6, 1, 2, 1, 37, 1, 14, 1, 2, 1, 7), AtmVcIdentifier())
if mibBuilder.loadTexts: atmSvcVcCrossConnectHighVci.setStatus('current')
atmSvcVcCrossConnectCreationTime = MibTableColumn((1, 3, 6, 1, 2, 1, 37, 1, 14, 1, 2, 1, 8), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmSvcVcCrossConnectCreationTime.setStatus('current')
atmSvcVcCrossConnectRowStatus = MibTableColumn((1, 3, 6, 1, 2, 1, 37, 1, 14, 1, 2, 1, 9), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmSvcVcCrossConnectRowStatus.setStatus('current')
atmSigStatTable = MibTable((1, 3, 6, 1, 2, 1, 37, 1, 14, 1, 3), )
if mibBuilder.loadTexts: atmSigStatTable.setStatus('current')
atmSigStatEntry = MibTableRow((1, 3, 6, 1, 2, 1, 37, 1, 14, 1, 3, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: atmSigStatEntry.setStatus('current')
atmSigSSCOPConEvents = MibTableColumn((1, 3, 6, 1, 2, 1, 37, 1, 14, 1, 3, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmSigSSCOPConEvents.setStatus('current')
atmSigSSCOPErrdPdus = MibTableColumn((1, 3, 6, 1, 2, 1, 37, 1, 14, 1, 3, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmSigSSCOPErrdPdus.setStatus('current')
atmSigDetectSetupAttempts = MibTableColumn((1, 3, 6, 1, 2, 1, 37, 1, 14, 1, 3, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmSigDetectSetupAttempts.setStatus('current')
atmSigEmitSetupAttempts = MibTableColumn((1, 3, 6, 1, 2, 1, 37, 1, 14, 1, 3, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmSigEmitSetupAttempts.setStatus('current')
atmSigDetectUnavailRoutes = MibTableColumn((1, 3, 6, 1, 2, 1, 37, 1, 14, 1, 3, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmSigDetectUnavailRoutes.setStatus('current')
atmSigEmitUnavailRoutes = MibTableColumn((1, 3, 6, 1, 2, 1, 37, 1, 14, 1, 3, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmSigEmitUnavailRoutes.setStatus('current')
atmSigDetectUnavailResrcs = MibTableColumn((1, 3, 6, 1, 2, 1, 37, 1, 14, 1, 3, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmSigDetectUnavailResrcs.setStatus('current')
atmSigEmitUnavailResrcs = MibTableColumn((1, 3, 6, 1, 2, 1, 37, 1, 14, 1, 3, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmSigEmitUnavailResrcs.setStatus('current')
atmSigDetectCldPtyEvents = MibTableColumn((1, 3, 6, 1, 2, 1, 37, 1, 14, 1, 3, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmSigDetectCldPtyEvents.setStatus('current')
atmSigEmitCldPtyEvents = MibTableColumn((1, 3, 6, 1, 2, 1, 37, 1, 14, 1, 3, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmSigEmitCldPtyEvents.setStatus('current')
atmSigDetectMsgErrors = MibTableColumn((1, 3, 6, 1, 2, 1, 37, 1, 14, 1, 3, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmSigDetectMsgErrors.setStatus('current')
atmSigEmitMsgErrors = MibTableColumn((1, 3, 6, 1, 2, 1, 37, 1, 14, 1, 3, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmSigEmitMsgErrors.setStatus('current')
atmSigDetectClgPtyEvents = MibTableColumn((1, 3, 6, 1, 2, 1, 37, 1, 14, 1, 3, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmSigDetectClgPtyEvents.setStatus('current')
atmSigEmitClgPtyEvents = MibTableColumn((1, 3, 6, 1, 2, 1, 37, 1, 14, 1, 3, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmSigEmitClgPtyEvents.setStatus('current')
atmSigDetectTimerExpireds = MibTableColumn((1, 3, 6, 1, 2, 1, 37, 1, 14, 1, 3, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmSigDetectTimerExpireds.setStatus('current')
atmSigEmitTimerExpireds = MibTableColumn((1, 3, 6, 1, 2, 1, 37, 1, 14, 1, 3, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmSigEmitTimerExpireds.setStatus('current')
atmSigDetectRestarts = MibTableColumn((1, 3, 6, 1, 2, 1, 37, 1, 14, 1, 3, 1, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmSigDetectRestarts.setStatus('current')
atmSigEmitRestarts = MibTableColumn((1, 3, 6, 1, 2, 1, 37, 1, 14, 1, 3, 1, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmSigEmitRestarts.setStatus('current')
atmSigInEstabls = MibTableColumn((1, 3, 6, 1, 2, 1, 37, 1, 14, 1, 3, 1, 19), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmSigInEstabls.setStatus('current')
atmSigOutEstabls = MibTableColumn((1, 3, 6, 1, 2, 1, 37, 1, 14, 1, 3, 1, 20), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmSigOutEstabls.setStatus('current')
atmSigSupportTable = MibTable((1, 3, 6, 1, 2, 1, 37, 1, 14, 1, 4), )
if mibBuilder.loadTexts: atmSigSupportTable.setStatus('current')
atmSigSupportEntry = MibTableRow((1, 3, 6, 1, 2, 1, 37, 1, 14, 1, 4, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: atmSigSupportEntry.setStatus('current')
atmSigSupportClgPtyNumDel = MibTableColumn((1, 3, 6, 1, 2, 1, 37, 1, 14, 1, 4, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmSigSupportClgPtyNumDel.setStatus('current')
atmSigSupportClgPtySubAddr = MibTableColumn((1, 3, 6, 1, 2, 1, 37, 1, 14, 1, 4, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmSigSupportClgPtySubAddr.setStatus('current')
atmSigSupportCldPtySubAddr = MibTableColumn((1, 3, 6, 1, 2, 1, 37, 1, 14, 1, 4, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmSigSupportCldPtySubAddr.setStatus('current')
atmSigSupportHiLyrInfo = MibTableColumn((1, 3, 6, 1, 2, 1, 37, 1, 14, 1, 4, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmSigSupportHiLyrInfo.setStatus('current')
atmSigSupportLoLyrInfo = MibTableColumn((1, 3, 6, 1, 2, 1, 37, 1, 14, 1, 4, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmSigSupportLoLyrInfo.setStatus('current')
atmSigSupportBlliRepeatInd = MibTableColumn((1, 3, 6, 1, 2, 1, 37, 1, 14, 1, 4, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmSigSupportBlliRepeatInd.setStatus('current')
atmSigSupportAALInfo = MibTableColumn((1, 3, 6, 1, 2, 1, 37, 1, 14, 1, 4, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmSigSupportAALInfo.setStatus('current')
atmSigSupportPrefCarrier = MibTableColumn((1, 3, 6, 1, 2, 1, 37, 1, 14, 1, 4, 1, 8), OctetString().subtype(subtypeSpec=ConstraintsUnion(ValueSizeConstraint(0, 0), ValueSizeConstraint(4, 4), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmSigSupportPrefCarrier.setStatus('current')
atmSigDescrParamTable = MibTable((1, 3, 6, 1, 2, 1, 37, 1, 14, 1, 5), )
if mibBuilder.loadTexts: atmSigDescrParamTable.setStatus('current')
atmSigDescrParamEntry = MibTableRow((1, 3, 6, 1, 2, 1, 37, 1, 14, 1, 5, 1), ).setIndexNames((0, "ATM2-MIB", "atmSigDescrParamIndex"))
if mibBuilder.loadTexts: atmSigDescrParamEntry.setStatus('current')
atmSigDescrParamIndex = MibTableColumn((1, 3, 6, 1, 2, 1, 37, 1, 14, 1, 5, 1, 1), AtmSigDescrParamIndex())
if mibBuilder.loadTexts: atmSigDescrParamIndex.setStatus('current')
atmSigDescrParamAalType = MibTableColumn((1, 3, 6, 1, 2, 1, 37, 1, 14, 1, 5, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("other", 1), ("aal1", 2), ("aal34", 3), ("aal5", 4), ("userDefined", 5), ("aal2", 6))).clone('other')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: atmSigDescrParamAalType.setStatus('current')
atmSigDescrParamAalSscsType = MibTableColumn((1, 3, 6, 1, 2, 1, 37, 1, 14, 1, 5, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("other", 1), ("assured", 2), ("nonassured", 3), ("frameRelay", 4), ("null", 5))).clone('other')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: atmSigDescrParamAalSscsType.setStatus('current')
atmSigDescrParamBhliType = MibTableColumn((1, 3, 6, 1, 2, 1, 37, 1, 14, 1, 5, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("other", 1), ("iso", 2), ("user", 3), ("hiProfile", 4), ("vendorSpecific", 5))).clone('other')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: atmSigDescrParamBhliType.setStatus('current')
atmSigDescrParamBhliInfo = MibTableColumn((1, 3, 6, 1, 2, 1, 37, 1, 14, 1, 5, 1, 5), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 8)).clone(hexValue="")).setMaxAccess("readcreate")
if mibBuilder.loadTexts: atmSigDescrParamBhliInfo.setStatus('current')
atmSigDescrParamBbcConnConf = MibTableColumn((1, 3, 6, 1, 2, 1, 37, 1, 14, 1, 5, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("ptp", 1), ("ptmp", 2))).clone('ptp')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: atmSigDescrParamBbcConnConf.setStatus('current')
atmSigDescrParamBlliLayer2 = MibTableColumn((1, 3, 6, 1, 2, 1, 37, 1, 14, 1, 5, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14))).clone(namedValues=NamedValues(("other", 1), ("iso1745", 2), ("q921", 3), ("x25linklayer", 4), ("x25multilink", 5), ("lapb", 6), ("hdlcArm", 7), ("hdlcNrm", 8), ("hdlcAbm", 9), ("iso88022", 10), ("x75slp", 11), ("q922", 12), ("userDef", 13), ("iso7776", 14))).clone('other')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: atmSigDescrParamBlliLayer2.setStatus('current')
atmSigDescrParamBlliLayer3 = MibTableColumn((1, 3, 6, 1, 2, 1, 37, 1, 14, 1, 5, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("other", 1), ("x25pkt", 2), ("isoiec8208", 3), ("x223iso8878", 4), ("isoiec8473", 5), ("t70", 6), ("tr9577", 7), ("userDef", 8))).clone('other')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: atmSigDescrParamBlliLayer3.setStatus('current')
atmSigDescrParamBlliPktSize = MibTableColumn((1, 3, 6, 1, 2, 1, 37, 1, 14, 1, 5, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10))).clone(namedValues=NamedValues(("other", 1), ("s16", 2), ("s32", 3), ("s64", 4), ("s128", 5), ("s256", 6), ("s512", 7), ("s1024", 8), ("s2048", 9), ("s4096", 10))).clone('other')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: atmSigDescrParamBlliPktSize.setStatus('current')
atmSigDescrParamBlliSnapId = MibTableColumn((1, 3, 6, 1, 2, 1, 37, 1, 14, 1, 5, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("true", 2), ("false", 3))).clone('other')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: atmSigDescrParamBlliSnapId.setStatus('current')
atmSigDescrParamBlliOuiPid = MibTableColumn((1, 3, 6, 1, 2, 1, 37, 1, 14, 1, 5, 1, 11), OctetString().subtype(subtypeSpec=ConstraintsUnion(ValueSizeConstraint(0, 0), ValueSizeConstraint(5, 5), )).clone(hexValue="")).setMaxAccess("readcreate")
if mibBuilder.loadTexts: atmSigDescrParamBlliOuiPid.setStatus('current')
atmSigDescrParamRowStatus = MibTableColumn((1, 3, 6, 1, 2, 1, 37, 1, 14, 1, 5, 1, 12), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: atmSigDescrParamRowStatus.setStatus('current')
atmIfRegisteredAddrTable = MibTable((1, 3, 6, 1, 2, 1, 37, 1, 14, 1, 6), )
if mibBuilder.loadTexts: atmIfRegisteredAddrTable.setStatus('current')
atmIfRegisteredAddrEntry = MibTableRow((1, 3, 6, 1, 2, 1, 37, 1, 14, 1, 6, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "ATM2-MIB", "atmIfRegAddrAddress"))
if mibBuilder.loadTexts: atmIfRegisteredAddrEntry.setStatus('current')
atmIfRegAddrAddress = MibTableColumn((1, 3, 6, 1, 2, 1, 37, 1, 14, 1, 6, 1, 1), AtmAddr())
if mibBuilder.loadTexts: atmIfRegAddrAddress.setStatus('current')
atmIfRegAddrAddressSource = MibTableColumn((1, 3, 6, 1, 2, 1, 37, 1, 14, 1, 6, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("static", 2), ("dynamic", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmIfRegAddrAddressSource.setStatus('current')
atmIfRegAddrOrgScope = MibTableColumn((1, 3, 6, 1, 2, 1, 37, 1, 14, 1, 6, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15))).clone(namedValues=NamedValues(("localNetwork", 1), ("localNetworkPlusOne", 2), ("localNetworkPlusTwo", 3), ("siteMinusOne", 4), ("intraSite", 5), ("sitePlusOne", 6), ("organizationMinusOne", 7), ("intraOrganization", 8), ("organizationPlusOne", 9), ("communityMinusOne", 10), ("intraCommunity", 11), ("communityPlusOne", 12), ("regional", 13), ("interRegional", 14), ("global", 15)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: atmIfRegAddrOrgScope.setStatus('current')
atmIfRegAddrRowStatus = MibTableColumn((1, 3, 6, 1, 2, 1, 37, 1, 14, 1, 6, 1, 4), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: atmIfRegAddrRowStatus.setStatus('current')
atmVclAddrTable = MibTable((1, 3, 6, 1, 2, 1, 37, 1, 14, 1, 7), )
if mibBuilder.loadTexts: atmVclAddrTable.setStatus('current')
atmVclAddrEntry = MibTableRow((1, 3, 6, 1, 2, 1, 37, 1, 14, 1, 7, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "ATM-MIB", "atmVclVpi"), (0, "ATM-MIB", "atmVclVci"), (0, "ATM2-MIB", "atmVclAddrAddr"))
if mibBuilder.loadTexts: atmVclAddrEntry.setStatus('current')
atmVclAddrAddr = MibTableColumn((1, 3, 6, 1, 2, 1, 37, 1, 14, 1, 7, 1, 1), AtmAddr())
if mibBuilder.loadTexts: atmVclAddrAddr.setStatus('current')
atmVclAddrType = MibTableColumn((1, 3, 6, 1, 2, 1, 37, 1, 14, 1, 7, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("callingParty", 1), ("calledParty", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: atmVclAddrType.setStatus('current')
atmVclAddrRowStatus = MibTableColumn((1, 3, 6, 1, 2, 1, 37, 1, 14, 1, 7, 1, 3), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: atmVclAddrRowStatus.setStatus('current')
atmAddrVclTable = MibTable((1, 3, 6, 1, 2, 1, 37, 1, 14, 1, 8), )
if mibBuilder.loadTexts: atmAddrVclTable.setStatus('current')
atmAddrVclEntry = MibTableRow((1, 3, 6, 1, 2, 1, 37, 1, 14, 1, 8, 1), ).setIndexNames((0, "ATM2-MIB", "atmVclAddrAddr"), (0, "ATM2-MIB", "atmAddrVclAtmIfIndex"), (0, "ATM2-MIB", "atmAddrVclVpi"), (0, "ATM2-MIB", "atmAddrVclVci"))
if mibBuilder.loadTexts: atmAddrVclEntry.setStatus('current')
atmAddrVclAtmIfIndex = MibTableColumn((1, 3, 6, 1, 2, 1, 37, 1, 14, 1, 8, 1, 1), InterfaceIndex())
if mibBuilder.loadTexts: atmAddrVclAtmIfIndex.setStatus('current')
atmAddrVclVpi = MibTableColumn((1, 3, 6, 1, 2, 1, 37, 1, 14, 1, 8, 1, 2), AtmVpIdentifier())
if mibBuilder.loadTexts: atmAddrVclVpi.setStatus('current')
atmAddrVclVci = MibTableColumn((1, 3, 6, 1, 2, 1, 37, 1, 14, 1, 8, 1, 3), AtmVcIdentifier())
if mibBuilder.loadTexts: atmAddrVclVci.setStatus('current')
atmAddrVclAddrType = MibTableColumn((1, 3, 6, 1, 2, 1, 37, 1, 14, 1, 8, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("callingParty", 1), ("calledParty", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmAddrVclAddrType.setStatus('current')
atmVplStatTable = MibTable((1, 3, 6, 1, 2, 1, 37, 1, 14, 1, 9), )
if mibBuilder.loadTexts: atmVplStatTable.setStatus('current')
atmVplStatEntry = MibTableRow((1, 3, 6, 1, 2, 1, 37, 1, 14, 1, 9, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "ATM-MIB", "atmVplVpi"))
if mibBuilder.loadTexts: atmVplStatEntry.setStatus('current')
atmVplStatTotalCellIns = MibTableColumn((1, 3, 6, 1, 2, 1, 37, 1, 14, 1, 9, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmVplStatTotalCellIns.setStatus('current')
atmVplStatClp0CellIns = MibTableColumn((1, 3, 6, 1, 2, 1, 37, 1, 14, 1, 9, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmVplStatClp0CellIns.setStatus('current')
atmVplStatTotalDiscards = MibTableColumn((1, 3, 6, 1, 2, 1, 37, 1, 14, 1, 9, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmVplStatTotalDiscards.setStatus('current')
atmVplStatClp0Discards = MibTableColumn((1, 3, 6, 1, 2, 1, 37, 1, 14, 1, 9, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmVplStatClp0Discards.setStatus('current')
atmVplStatTotalCellOuts = MibTableColumn((1, 3, 6, 1, 2, 1, 37, 1, 14, 1, 9, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmVplStatTotalCellOuts.setStatus('current')
atmVplStatClp0CellOuts = MibTableColumn((1, 3, 6, 1, 2, 1, 37, 1, 14, 1, 9, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmVplStatClp0CellOuts.setStatus('current')
atmVplStatClp0Tagged = MibTableColumn((1, 3, 6, 1, 2, 1, 37, 1, 14, 1, 9, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmVplStatClp0Tagged.setStatus('current')
atmVplLogicalPortTable = MibTable((1, 3, 6, 1, 2, 1, 37, 1, 14, 1, 10), )
if mibBuilder.loadTexts: atmVplLogicalPortTable.setStatus('current')
atmVplLogicalPortEntry = MibTableRow((1, 3, 6, 1, 2, 1, 37, 1, 14, 1, 10, 1), )
atmVplEntry.registerAugmentions(("ATM2-MIB", "atmVplLogicalPortEntry"))
atmVplLogicalPortEntry.setIndexNames(*atmVplEntry.getIndexNames())
if mibBuilder.loadTexts: atmVplLogicalPortEntry.setStatus('current')
atmVplLogicalPortDef = MibTableColumn((1, 3, 6, 1, 2, 1, 37, 1, 14, 1, 10, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("notLogicalIf", 1), ("isLogicalIf", 2))).clone('notLogicalIf')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: atmVplLogicalPortDef.setStatus('current')
atmVplLogicalPortIndex = MibTableColumn((1, 3, 6, 1, 2, 1, 37, 1, 14, 1, 10, 1, 2), InterfaceIndexOrZero()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmVplLogicalPortIndex.setStatus('current')
atmVclStatTable = MibTable((1, 3, 6, 1, 2, 1, 37, 1, 14, 1, 11), )
if mibBuilder.loadTexts: atmVclStatTable.setStatus('current')
atmVclStatEntry = MibTableRow((1, 3, 6, 1, 2, 1, 37, 1, 14, 1, 11, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "ATM-MIB", "atmVclVpi"), (0, "ATM-MIB", "atmVclVci"))
if mibBuilder.loadTexts: atmVclStatEntry.setStatus('current')
atmVclStatTotalCellIns = MibTableColumn((1, 3, 6, 1, 2, 1, 37, 1, 14, 1, 11, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmVclStatTotalCellIns.setStatus('current')
atmVclStatClp0CellIns = MibTableColumn((1, 3, 6, 1, 2, 1, 37, 1, 14, 1, 11, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmVclStatClp0CellIns.setStatus('current')
atmVclStatTotalDiscards = MibTableColumn((1, 3, 6, 1, 2, 1, 37, 1, 14, 1, 11, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmVclStatTotalDiscards.setStatus('current')
atmVclStatClp0Discards = MibTableColumn((1, 3, 6, 1, 2, 1, 37, 1, 14, 1, 11, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmVclStatClp0Discards.setStatus('current')
atmVclStatTotalCellOuts = MibTableColumn((1, 3, 6, 1, 2, 1, 37, 1, 14, 1, 11, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmVclStatTotalCellOuts.setStatus('current')
atmVclStatClp0CellOuts = MibTableColumn((1, 3, 6, 1, 2, 1, 37, 1, 14, 1, 11, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmVclStatClp0CellOuts.setStatus('current')
atmVclStatClp0Tagged = MibTableColumn((1, 3, 6, 1, 2, 1, 37, 1, 14, 1, 11, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmVclStatClp0Tagged.setStatus('current')
atmAal5VclStatTable = MibTable((1, 3, 6, 1, 2, 1, 37, 1, 14, 1, 12), )
if mibBuilder.loadTexts: atmAal5VclStatTable.setStatus('current')
atmAal5VclStatEntry = MibTableRow((1, 3, 6, 1, 2, 1, 37, 1, 14, 1, 12, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "ATM-MIB", "atmVclVpi"), (0, "ATM-MIB", "atmVclVci"))
if mibBuilder.loadTexts: atmAal5VclStatEntry.setStatus('current')
atmAal5VclInPkts = MibTableColumn((1, 3, 6, 1, 2, 1, 37, 1, 14, 1, 12, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmAal5VclInPkts.setStatus('current')
atmAal5VclOutPkts = MibTableColumn((1, 3, 6, 1, 2, 1, 37, 1, 14, 1, 12, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmAal5VclOutPkts.setStatus('current')
atmAal5VclInOctets = MibTableColumn((1, 3, 6, 1, 2, 1, 37, 1, 14, 1, 12, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmAal5VclInOctets.setStatus('current')
atmAal5VclOutOctets = MibTableColumn((1, 3, 6, 1, 2, 1, 37, 1, 14, 1, 12, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmAal5VclOutOctets.setStatus('current')
atmVclGenTable = MibTable((1, 3, 6, 1, 2, 1, 37, 1, 14, 1, 13), )
if mibBuilder.loadTexts: atmVclGenTable.setStatus('current')
atmVclGenEntry = MibTableRow((1, 3, 6, 1, 2, 1, 37, 1, 14, 1, 13, 1), )
atmVclEntry.registerAugmentions(("ATM2-MIB", "atmVclGenEntry"))
atmVclGenEntry.setIndexNames(*atmVclEntry.getIndexNames())
if mibBuilder.loadTexts: atmVclGenEntry.setStatus('current')
atmVclGenSigDescrIndex = MibTableColumn((1, 3, 6, 1, 2, 1, 37, 1, 14, 1, 13, 1, 1), AtmSigDescrParamIndex()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: atmVclGenSigDescrIndex.setStatus('current')
atmInterfaceExtTable = MibTable((1, 3, 6, 1, 2, 1, 37, 1, 14, 1, 14), )
if mibBuilder.loadTexts: atmInterfaceExtTable.setStatus('current')
atmInterfaceExtEntry = MibTableRow((1, 3, 6, 1, 2, 1, 37, 1, 14, 1, 14, 1), )
atmInterfaceConfEntry.registerAugmentions(("ATM2-MIB", "atmInterfaceExtEntry"))
atmInterfaceExtEntry.setIndexNames(*atmInterfaceConfEntry.getIndexNames())
if mibBuilder.loadTexts: atmInterfaceExtEntry.setStatus('current')
atmIntfConfigType = MibTableColumn((1, 3, 6, 1, 2, 1, 37, 1, 14, 1, 14, 1, 1), AtmInterfaceType().clone('autoConfig')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmIntfConfigType.setStatus('current')
atmIntfActualType = MibTableColumn((1, 3, 6, 1, 2, 1, 37, 1, 14, 1, 14, 1, 2), AtmInterfaceType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmIntfActualType.setStatus('current')
atmIntfConfigSide = MibTableColumn((1, 3, 6, 1, 2, 1, 37, 1, 14, 1, 14, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("user", 2), ("network", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmIntfConfigSide.setStatus('current')
atmIntfActualSide = MibTableColumn((1, 3, 6, 1, 2, 1, 37, 1, 14, 1, 14, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("other", 1), ("user", 2), ("network", 3), ("symmetric", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmIntfActualSide.setStatus('current')
atmIntfIlmiAdminStatus = MibTableColumn((1, 3, 6, 1, 2, 1, 37, 1, 14, 1, 14, 1, 5), Bits().clone(namedValues=NamedValues(("ilmi", 0), ("ilmiAddressRegistration", 1), ("ilmiConnectivity", 2), ("ilmiPvcPvpMgmt", 3), ("ilmiSigVccParamNegotiation", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmIntfIlmiAdminStatus.setStatus('current')
atmIntfIlmiOperStatus = MibTableColumn((1, 3, 6, 1, 2, 1, 37, 1, 14, 1, 14, 1, 6), Bits().clone(namedValues=NamedValues(("ilmi", 0), ("ilmiAddressRegistration", 1), ("ilmiConnectivity", 2), ("ilmiPvcPvpMgmt", 3), ("ilmiSigVccParamNegotiation", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmIntfIlmiOperStatus.setStatus('current')
atmIntfIlmiFsmState = MibTableColumn((1, 3, 6, 1, 2, 1, 37, 1, 14, 1, 14, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9))).clone(namedValues=NamedValues(("stopped", 1), ("linkFailing", 2), ("establishing", 3), ("configuring", 4), ("retrievingNetworkPrefixes", 5), ("registeringNetworkPrefixes", 6), ("retrievingAddresses", 7), ("registeringAddresses", 8), ("verifying", 9)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmIntfIlmiFsmState.setStatus('current')
atmIntfIlmiEstablishConPollIntvl = MibTableColumn((1, 3, 6, 1, 2, 1, 37, 1, 14, 1, 14, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535)).clone(1)).setUnits('seconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmIntfIlmiEstablishConPollIntvl.setStatus('current')
atmIntfIlmiCheckConPollIntvl = MibTableColumn((1, 3, 6, 1, 2, 1, 37, 1, 14, 1, 14, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535)).clone(5)).setUnits('seconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmIntfIlmiCheckConPollIntvl.setStatus('current')
atmIntfIlmiConPollInactFactor = MibTableColumn((1, 3, 6, 1, 2, 1, 37, 1, 14, 1, 14, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535)).clone(4)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmIntfIlmiConPollInactFactor.setStatus('current')
atmIntfIlmiPublicPrivateIndctr = MibTableColumn((1, 3, 6, 1, 2, 1, 37, 1, 14, 1, 14, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("public", 2), ("private", 3))).clone('private')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmIntfIlmiPublicPrivateIndctr.setStatus('current')
atmInterfaceConfMaxSvpcVpi = MibTableColumn((1, 3, 6, 1, 2, 1, 37, 1, 14, 1, 14, 1, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4095))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmInterfaceConfMaxSvpcVpi.setStatus('current')
atmInterfaceCurrentMaxSvpcVpi = MibTableColumn((1, 3, 6, 1, 2, 1, 37, 1, 14, 1, 14, 1, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4095))).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmInterfaceCurrentMaxSvpcVpi.setStatus('current')
atmInterfaceConfMaxSvccVpi = MibTableColumn((1, 3, 6, 1, 2, 1, 37, 1, 14, 1, 14, 1, 14), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4095))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmInterfaceConfMaxSvccVpi.setStatus('current')
atmInterfaceCurrentMaxSvccVpi = MibTableColumn((1, 3, 6, 1, 2, 1, 37, 1, 14, 1, 14, 1, 15), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4095))).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmInterfaceCurrentMaxSvccVpi.setStatus('current')
atmInterfaceConfMinSvccVci = MibTableColumn((1, 3, 6, 1, 2, 1, 37, 1, 14, 1, 14, 1, 16), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmInterfaceConfMinSvccVci.setStatus('current')
atmInterfaceCurrentMinSvccVci = MibTableColumn((1, 3, 6, 1, 2, 1, 37, 1, 14, 1, 14, 1, 17), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmInterfaceCurrentMinSvccVci.setStatus('current')
atmIntfSigVccRxTrafficDescrIndex = MibTableColumn((1, 3, 6, 1, 2, 1, 37, 1, 14, 1, 14, 1, 18), AtmTrafficDescrParamIndex()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmIntfSigVccRxTrafficDescrIndex.setStatus('current')
atmIntfSigVccTxTrafficDescrIndex = MibTableColumn((1, 3, 6, 1, 2, 1, 37, 1, 14, 1, 14, 1, 19), AtmTrafficDescrParamIndex()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmIntfSigVccTxTrafficDescrIndex.setStatus('current')
atmIntfPvcFailures = MibTableColumn((1, 3, 6, 1, 2, 1, 37, 1, 14, 1, 14, 1, 20), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmIntfPvcFailures.setStatus('current')
atmIntfCurrentlyFailingPVpls = MibTableColumn((1, 3, 6, 1, 2, 1, 37, 1, 14, 1, 14, 1, 21), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmIntfCurrentlyFailingPVpls.setStatus('current')
atmIntfCurrentlyFailingPVcls = MibTableColumn((1, 3, 6, 1, 2, 1, 37, 1, 14, 1, 14, 1, 22), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmIntfCurrentlyFailingPVcls.setStatus('current')
atmIntfPvcFailuresTrapEnable = MibTableColumn((1, 3, 6, 1, 2, 1, 37, 1, 14, 1, 14, 1, 23), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmIntfPvcFailuresTrapEnable.setStatus('current')
atmIntfPvcNotificationInterval = MibTableColumn((1, 3, 6, 1, 2, 1, 37, 1, 14, 1, 14, 1, 24), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 3600)).clone(30)).setUnits('seconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmIntfPvcNotificationInterval.setStatus('current')
atmIntfLeafSetupFailures = MibTableColumn((1, 3, 6, 1, 2, 1, 37, 1, 14, 1, 14, 1, 25), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmIntfLeafSetupFailures.setStatus('current')
atmIntfLeafSetupRequests = MibTableColumn((1, 3, 6, 1, 2, 1, 37, 1, 14, 1, 14, 1, 26), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmIntfLeafSetupRequests.setStatus('current')
atmIlmiSrvcRegTable = MibTable((1, 3, 6, 1, 2, 1, 37, 1, 14, 1, 15), )
if mibBuilder.loadTexts: atmIlmiSrvcRegTable.setStatus('current')
atmIlmiSrvcRegEntry = MibTableRow((1, 3, 6, 1, 2, 1, 37, 1, 14, 1, 15, 1), ).setIndexNames((0, "ATM2-MIB", "atmIlmiSrvcRegIndex"), (0, "ATM2-MIB", "atmIlmiSrvcRegServiceID"), (0, "ATM2-MIB", "atmIlmiSrvcRegAddressIndex"))
if mibBuilder.loadTexts: atmIlmiSrvcRegEntry.setStatus('current')
atmIlmiSrvcRegIndex = MibTableColumn((1, 3, 6, 1, 2, 1, 37, 1, 14, 1, 15, 1, 1), InterfaceIndexOrZero())
if mibBuilder.loadTexts: atmIlmiSrvcRegIndex.setStatus('current')
atmIlmiSrvcRegServiceID = MibTableColumn((1, 3, 6, 1, 2, 1, 37, 1, 14, 1, 15, 1, 2), ObjectIdentifier())
if mibBuilder.loadTexts: atmIlmiSrvcRegServiceID.setStatus('current')
atmIlmiSrvcRegAddressIndex = MibTableColumn((1, 3, 6, 1, 2, 1, 37, 1, 14, 1, 15, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647)))
if mibBuilder.loadTexts: atmIlmiSrvcRegAddressIndex.setStatus('current')
atmIlmiSrvcRegATMAddress = MibTableColumn((1, 3, 6, 1, 2, 1, 37, 1, 14, 1, 15, 1, 4), AtmAddr()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: atmIlmiSrvcRegATMAddress.setStatus('current')
atmIlmiSrvcRegParm1 = MibTableColumn((1, 3, 6, 1, 2, 1, 37, 1, 14, 1, 15, 1, 5), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 255))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: atmIlmiSrvcRegParm1.setStatus('current')
atmIlmiSrvcRegRowStatus = MibTableColumn((1, 3, 6, 1, 2, 1, 37, 1, 14, 1, 15, 1, 6), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: atmIlmiSrvcRegRowStatus.setStatus('current')
atmIlmiNetworkPrefixTable = MibTable((1, 3, 6, 1, 2, 1, 37, 1, 14, 1, 16), )
if mibBuilder.loadTexts: atmIlmiNetworkPrefixTable.setStatus('current')
atmIlmiNetworkPrefixEntry = MibTableRow((1, 3, 6, 1, 2, 1, 37, 1, 14, 1, 16, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "ATM2-MIB", "atmIlmiNetPrefixPrefix"))
if mibBuilder.loadTexts: atmIlmiNetworkPrefixEntry.setStatus('current')
atmIlmiNetPrefixPrefix = MibTableColumn((1, 3, 6, 1, 2, 1, 37, 1, 14, 1, 16, 1, 1), AtmIlmiNetworkPrefix())
if mibBuilder.loadTexts: atmIlmiNetPrefixPrefix.setStatus('current')
atmIlmiNetPrefixRowStatus = MibTableColumn((1, 3, 6, 1, 2, 1, 37, 1, 14, 1, 16, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: atmIlmiNetPrefixRowStatus.setStatus('current')
atmSwitchAddressTable = MibTable((1, 3, 6, 1, 2, 1, 37, 1, 14, 1, 17), )
if mibBuilder.loadTexts: atmSwitchAddressTable.setStatus('current')
atmSwitchAddressEntry = MibTableRow((1, 3, 6, 1, 2, 1, 37, 1, 14, 1, 17, 1), ).setIndexNames((0, "ATM2-MIB", "atmSwitchAddressIndex"))
if mibBuilder.loadTexts: atmSwitchAddressEntry.setStatus('current')
atmSwitchAddressIndex = MibTableColumn((1, 3, 6, 1, 2, 1, 37, 1, 14, 1, 17, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535)))
if mibBuilder.loadTexts: atmSwitchAddressIndex.setStatus('current')
atmSwitchAddressAddress = MibTableColumn((1, 3, 6, 1, 2, 1, 37, 1, 14, 1, 17, 1, 2), OctetString().subtype(subtypeSpec=ConstraintsUnion(ValueSizeConstraint(13, 13), ValueSizeConstraint(20, 20), ))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: atmSwitchAddressAddress.setStatus('current')
atmSwitchAddressRowStatus = MibTableColumn((1, 3, 6, 1, 2, 1, 37, 1, 14, 1, 17, 1, 3), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: atmSwitchAddressRowStatus.setStatus('current')
atmVpCrossConnectXTable = MibTable((1, 3, 6, 1, 2, 1, 37, 1, 14, 1, 18), )
if mibBuilder.loadTexts: atmVpCrossConnectXTable.setStatus('current')
atmVpCrossConnectXEntry = MibTableRow((1, 3, 6, 1, 2, 1, 37, 1, 14, 1, 18, 1), )
atmVpCrossConnectEntry.registerAugmentions(("ATM2-MIB", "atmVpCrossConnectXEntry"))
atmVpCrossConnectXEntry.setIndexNames(*atmVpCrossConnectEntry.getIndexNames())
if mibBuilder.loadTexts: atmVpCrossConnectXEntry.setStatus('current')
atmVpCrossConnectUserName = MibTableColumn((1, 3, 6, 1, 2, 1, 37, 1, 14, 1, 18, 1, 1), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: atmVpCrossConnectUserName.setStatus('current')
atmVpCrossConnectProviderName = MibTableColumn((1, 3, 6, 1, 2, 1, 37, 1, 14, 1, 18, 1, 2), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmVpCrossConnectProviderName.setStatus('current')
atmVcCrossConnectXTable = MibTable((1, 3, 6, 1, 2, 1, 37, 1, 14, 1, 19), )
if mibBuilder.loadTexts: atmVcCrossConnectXTable.setStatus('current')
atmVcCrossConnectXEntry = MibTableRow((1, 3, 6, 1, 2, 1, 37, 1, 14, 1, 19, 1), )
atmVcCrossConnectEntry.registerAugmentions(("ATM2-MIB", "atmVcCrossConnectXEntry"))
atmVcCrossConnectXEntry.setIndexNames(*atmVcCrossConnectEntry.getIndexNames())
if mibBuilder.loadTexts: atmVcCrossConnectXEntry.setStatus('current')
atmVcCrossConnectUserName = MibTableColumn((1, 3, 6, 1, 2, 1, 37, 1, 14, 1, 19, 1, 1), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: atmVcCrossConnectUserName.setStatus('current')
atmVcCrossConnectProviderName = MibTableColumn((1, 3, 6, 1, 2, 1, 37, 1, 14, 1, 19, 1, 2), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmVcCrossConnectProviderName.setStatus('current')
atmCurrentlyFailingPVplTable = MibTable((1, 3, 6, 1, 2, 1, 37, 1, 14, 1, 20), )
if mibBuilder.loadTexts: atmCurrentlyFailingPVplTable.setStatus('current')
atmCurrentlyFailingPVplEntry = MibTableRow((1, 3, 6, 1, 2, 1, 37, 1, 14, 1, 20, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "ATM-MIB", "atmVplVpi"))
if mibBuilder.loadTexts: atmCurrentlyFailingPVplEntry.setStatus('current')
atmCurrentlyFailingPVplTimeStamp = MibTableColumn((1, 3, 6, 1, 2, 1, 37, 1, 14, 1, 20, 1, 1), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmCurrentlyFailingPVplTimeStamp.setStatus('current')
atmCurrentlyFailingPVclTable = MibTable((1, 3, 6, 1, 2, 1, 37, 1, 14, 1, 21), )
if mibBuilder.loadTexts: atmCurrentlyFailingPVclTable.setStatus('current')
atmCurrentlyFailingPVclEntry = MibTableRow((1, 3, 6, 1, 2, 1, 37, 1, 14, 1, 21, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "ATM-MIB", "atmVclVpi"), (0, "ATM-MIB", "atmVclVci"))
if mibBuilder.loadTexts: atmCurrentlyFailingPVclEntry.setStatus('current')
atmCurrentlyFailingPVclTimeStamp = MibTableColumn((1, 3, 6, 1, 2, 1, 37, 1, 14, 1, 21, 1, 1), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmCurrentlyFailingPVclTimeStamp.setStatus('current')
atmPvcTraps = MibIdentifier((1, 3, 6, 1, 2, 1, 37, 1, 14, 2, 1))
atmPvcTrapsPrefix = MibIdentifier((1, 3, 6, 1, 2, 1, 37, 1, 14, 2, 1, 0))
atmIntfPvcFailuresTrap = NotificationType((1, 3, 6, 1, 2, 1, 37, 1, 14, 2, 1, 0, 1)).setObjects(("IF-MIB", "ifIndex"), ("ATM2-MIB", "atmIntfPvcFailures"), ("ATM2-MIB", "atmIntfCurrentlyFailingPVpls"), ("ATM2-MIB", "atmIntfCurrentlyFailingPVcls"))
if mibBuilder.loadTexts: atmIntfPvcFailuresTrap.setStatus('current')
atm2MIBConformance = MibIdentifier((1, 3, 6, 1, 2, 1, 37, 1, 14, 3))
atm2MIBGroups = MibIdentifier((1, 3, 6, 1, 2, 1, 37, 1, 14, 3, 1))
atm2MIBCompliances = MibIdentifier((1, 3, 6, 1, 2, 1, 37, 1, 14, 3, 2))
atm2MIBCompliance = ModuleCompliance((1, 3, 6, 1, 2, 1, 37, 1, 14, 3, 2, 1)).setObjects(("ATM2-MIB", "atmCommonGroup"), ("ATM2-MIB", "atmCommonStatsGroup"), ("ATM2-MIB", "atmSwitchServcGroup"), ("ATM2-MIB", "atmSwitchServcSigGroup"), ("ATM2-MIB", "atmSwitchServcNotifGroup"), ("ATM2-MIB", "atmSwitchGroup"), ("ATM2-MIB", "atmServcGroup"), ("ATM2-MIB", "atmHostGroup"), ("ATM2-MIB", "atmHostSigDescrGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    atm2MIBCompliance = atm2MIBCompliance.setStatus('current')
atmCommonGroup = ObjectGroup((1, 3, 6, 1, 2, 1, 37, 1, 14, 3, 1, 1)).setObjects(("ATM2-MIB", "atmSigSSCOPConEvents"), ("ATM2-MIB", "atmSigSSCOPErrdPdus"), ("ATM2-MIB", "atmSigDetectSetupAttempts"), ("ATM2-MIB", "atmSigEmitSetupAttempts"), ("ATM2-MIB", "atmSigDetectUnavailRoutes"), ("ATM2-MIB", "atmSigEmitUnavailRoutes"), ("ATM2-MIB", "atmSigDetectUnavailResrcs"), ("ATM2-MIB", "atmSigEmitUnavailResrcs"), ("ATM2-MIB", "atmSigDetectCldPtyEvents"), ("ATM2-MIB", "atmSigEmitCldPtyEvents"), ("ATM2-MIB", "atmSigDetectMsgErrors"), ("ATM2-MIB", "atmSigEmitMsgErrors"), ("ATM2-MIB", "atmSigDetectClgPtyEvents"), ("ATM2-MIB", "atmSigEmitClgPtyEvents"), ("ATM2-MIB", "atmSigDetectTimerExpireds"), ("ATM2-MIB", "atmSigEmitTimerExpireds"), ("ATM2-MIB", "atmSigDetectRestarts"), ("ATM2-MIB", "atmSigEmitRestarts"), ("ATM2-MIB", "atmSigInEstabls"), ("ATM2-MIB", "atmSigOutEstabls"), ("ATM2-MIB", "atmVplLogicalPortDef"), ("ATM2-MIB", "atmVplLogicalPortIndex"), ("ATM2-MIB", "atmInterfaceConfMaxSvpcVpi"), ("ATM2-MIB", "atmInterfaceCurrentMaxSvpcVpi"), ("ATM2-MIB", "atmInterfaceConfMaxSvccVpi"), ("ATM2-MIB", "atmInterfaceCurrentMaxSvccVpi"), ("ATM2-MIB", "atmInterfaceConfMinSvccVci"), ("ATM2-MIB", "atmInterfaceCurrentMinSvccVci"), ("ATM2-MIB", "atmIntfSigVccRxTrafficDescrIndex"), ("ATM2-MIB", "atmIntfSigVccTxTrafficDescrIndex"), ("ATM2-MIB", "atmIntfPvcFailures"), ("ATM2-MIB", "atmIntfCurrentlyFailingPVpls"), ("ATM2-MIB", "atmIntfCurrentlyFailingPVcls"), ("ATM2-MIB", "atmIntfPvcNotificationInterval"), ("ATM2-MIB", "atmIntfPvcFailuresTrapEnable"), ("ATM2-MIB", "atmIntfLeafSetupFailures"), ("ATM2-MIB", "atmIntfLeafSetupRequests"), ("ATM2-MIB", "atmIntfConfigType"), ("ATM2-MIB", "atmIntfActualType"), ("ATM2-MIB", "atmIntfConfigSide"), ("ATM2-MIB", "atmIntfActualSide"), ("ATM2-MIB", "atmIntfIlmiAdminStatus"), ("ATM2-MIB", "atmIntfIlmiOperStatus"), ("ATM2-MIB", "atmIntfIlmiFsmState"), ("ATM2-MIB", "atmIntfIlmiEstablishConPollIntvl"), ("ATM2-MIB", "atmIntfIlmiCheckConPollIntvl"), ("ATM2-MIB", "atmIntfIlmiConPollInactFactor"), ("ATM2-MIB", "atmIntfIlmiPublicPrivateIndctr"), ("ATM2-MIB", "atmCurrentlyFailingPVplTimeStamp"), ("ATM2-MIB", "atmCurrentlyFailingPVclTimeStamp"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    atmCommonGroup = atmCommonGroup.setStatus('current')
atmCommonStatsGroup = ObjectGroup((1, 3, 6, 1, 2, 1, 37, 1, 14, 3, 1, 2)).setObjects(("ATM2-MIB", "atmVclStatTotalCellIns"), ("ATM2-MIB", "atmVclStatClp0CellIns"), ("ATM2-MIB", "atmVclStatTotalDiscards"), ("ATM2-MIB", "atmVclStatClp0Discards"), ("ATM2-MIB", "atmVclStatTotalCellOuts"), ("ATM2-MIB", "atmVclStatClp0CellOuts"), ("ATM2-MIB", "atmVclStatClp0Tagged"), ("ATM2-MIB", "atmVplStatTotalCellIns"), ("ATM2-MIB", "atmVplStatClp0CellIns"), ("ATM2-MIB", "atmVplStatTotalDiscards"), ("ATM2-MIB", "atmVplStatClp0Discards"), ("ATM2-MIB", "atmVplStatTotalCellOuts"), ("ATM2-MIB", "atmVplStatClp0CellOuts"), ("ATM2-MIB", "atmVplStatClp0Tagged"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    atmCommonStatsGroup = atmCommonStatsGroup.setStatus('current')
atmSwitchServcGroup = ObjectGroup((1, 3, 6, 1, 2, 1, 37, 1, 14, 3, 1, 3)).setObjects(("ATM2-MIB", "atmIlmiSrvcRegATMAddress"), ("ATM2-MIB", "atmIlmiSrvcRegParm1"), ("ATM2-MIB", "atmIlmiSrvcRegRowStatus"), ("ATM2-MIB", "atmIlmiNetPrefixRowStatus"), ("ATM2-MIB", "atmSvcVpCrossConnectCreationTime"), ("ATM2-MIB", "atmSvcVpCrossConnectRowStatus"), ("ATM2-MIB", "atmSvcVcCrossConnectCreationTime"), ("ATM2-MIB", "atmSvcVcCrossConnectRowStatus"), ("ATM2-MIB", "atmIfRegAddrAddressSource"), ("ATM2-MIB", "atmIfRegAddrOrgScope"), ("ATM2-MIB", "atmIfRegAddrRowStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    atmSwitchServcGroup = atmSwitchServcGroup.setStatus('current')
atmSwitchServcSigGroup = ObjectGroup((1, 3, 6, 1, 2, 1, 37, 1, 14, 3, 1, 4)).setObjects(("ATM2-MIB", "atmSigSupportClgPtyNumDel"), ("ATM2-MIB", "atmSigSupportClgPtySubAddr"), ("ATM2-MIB", "atmSigSupportCldPtySubAddr"), ("ATM2-MIB", "atmSigSupportHiLyrInfo"), ("ATM2-MIB", "atmSigSupportLoLyrInfo"), ("ATM2-MIB", "atmSigSupportBlliRepeatInd"), ("ATM2-MIB", "atmSigSupportAALInfo"), ("ATM2-MIB", "atmSigSupportPrefCarrier"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    atmSwitchServcSigGroup = atmSwitchServcSigGroup.setStatus('current')
atmSwitchServcNotifGroup = NotificationGroup((1, 3, 6, 1, 2, 1, 37, 1, 14, 3, 1, 5)).setObjects(("ATM2-MIB", "atmIntfPvcFailuresTrap"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    atmSwitchServcNotifGroup = atmSwitchServcNotifGroup.setStatus('current')
atmSwitchGroup = ObjectGroup((1, 3, 6, 1, 2, 1, 37, 1, 14, 3, 1, 6)).setObjects(("ATM2-MIB", "atmSwitchAddressAddress"), ("ATM2-MIB", "atmSwitchAddressRowStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    atmSwitchGroup = atmSwitchGroup.setStatus('current')
atmServcGroup = ObjectGroup((1, 3, 6, 1, 2, 1, 37, 1, 14, 3, 1, 7)).setObjects(("ATM2-MIB", "atmVpCrossConnectUserName"), ("ATM2-MIB", "atmVpCrossConnectProviderName"), ("ATM2-MIB", "atmVcCrossConnectUserName"), ("ATM2-MIB", "atmVcCrossConnectProviderName"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    atmServcGroup = atmServcGroup.setStatus('current')
atmHostGroup = ObjectGroup((1, 3, 6, 1, 2, 1, 37, 1, 14, 3, 1, 8)).setObjects(("ATM2-MIB", "atmAal5VclInPkts"), ("ATM2-MIB", "atmAal5VclOutPkts"), ("ATM2-MIB", "atmAal5VclInOctets"), ("ATM2-MIB", "atmAal5VclOutOctets"), ("ATM2-MIB", "atmVclAddrType"), ("ATM2-MIB", "atmVclAddrRowStatus"), ("ATM2-MIB", "atmAddrVclAddrType"), ("ATM2-MIB", "atmVclGenSigDescrIndex"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    atmHostGroup = atmHostGroup.setStatus('current')
atmHostSigDescrGroup = ObjectGroup((1, 3, 6, 1, 2, 1, 37, 1, 14, 3, 1, 9)).setObjects(("ATM2-MIB", "atmSigDescrParamAalType"), ("ATM2-MIB", "atmSigDescrParamAalSscsType"), ("ATM2-MIB", "atmSigDescrParamBhliType"), ("ATM2-MIB", "atmSigDescrParamBhliInfo"), ("ATM2-MIB", "atmSigDescrParamBbcConnConf"), ("ATM2-MIB", "atmSigDescrParamBlliLayer2"), ("ATM2-MIB", "atmSigDescrParamBlliLayer3"), ("ATM2-MIB", "atmSigDescrParamBlliPktSize"), ("ATM2-MIB", "atmSigDescrParamBlliSnapId"), ("ATM2-MIB", "atmSigDescrParamBlliOuiPid"), ("ATM2-MIB", "atmSigDescrParamRowStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    atmHostSigDescrGroup = atmHostSigDescrGroup.setStatus('current')
mibBuilder.exportSymbols("ATM2-MIB", atmSigDetectClgPtyEvents=atmSigDetectClgPtyEvents, PYSNMP_MODULE_ID=atm2MIB, atmSigDescrParamBbcConnConf=atmSigDescrParamBbcConnConf, atmSigSupportAALInfo=atmSigSupportAALInfo, atmAddrVclAddrType=atmAddrVclAddrType, atmSvcVcCrossConnectCreationTime=atmSvcVcCrossConnectCreationTime, atmVplStatTable=atmVplStatTable, atmSigSupportClgPtySubAddr=atmSigSupportClgPtySubAddr, atmIlmiNetPrefixRowStatus=atmIlmiNetPrefixRowStatus, atmSigDetectCldPtyEvents=atmSigDetectCldPtyEvents, atmVplStatTotalCellIns=atmVplStatTotalCellIns, atmVpCrossConnectUserName=atmVpCrossConnectUserName, atmSigSupportClgPtyNumDel=atmSigSupportClgPtyNumDel, atmIntfSigVccTxTrafficDescrIndex=atmIntfSigVccTxTrafficDescrIndex, atmVclAddrTable=atmVclAddrTable, atmIfRegAddrAddressSource=atmIfRegAddrAddressSource, atmVplLogicalPortIndex=atmVplLogicalPortIndex, atmAal5VclOutPkts=atmAal5VclOutPkts, atmAal5VclInPkts=atmAal5VclInPkts, atmVclStatClp0CellOuts=atmVclStatClp0CellOuts, atmSigDescrParamAalType=atmSigDescrParamAalType, atmAal5VclStatEntry=atmAal5VclStatEntry, atmSigOutEstabls=atmSigOutEstabls, atmVpCrossConnectProviderName=atmVpCrossConnectProviderName, atmIfRegAddrRowStatus=atmIfRegAddrRowStatus, atmVclAddrType=atmVclAddrType, atmSwitchAddressEntry=atmSwitchAddressEntry, atmSigDescrParamBhliInfo=atmSigDescrParamBhliInfo, atmSvcVcCrossConnectHighVpi=atmSvcVcCrossConnectHighVpi, atmVcCrossConnectXTable=atmVcCrossConnectXTable, atmAddrVclVci=atmAddrVclVci, atmVclStatEntry=atmVclStatEntry, atmSwitchServcNotifGroup=atmSwitchServcNotifGroup, atmIntfCurrentlyFailingPVpls=atmIntfCurrentlyFailingPVpls, atmSvcVcCrossConnectRowStatus=atmSvcVcCrossConnectRowStatus, atmVcCrossConnectProviderName=atmVcCrossConnectProviderName, atmSvcVpCrossConnectCreationTime=atmSvcVpCrossConnectCreationTime, atmSvcVpCrossConnectRowStatus=atmSvcVpCrossConnectRowStatus, atmIfRegisteredAddrEntry=atmIfRegisteredAddrEntry, atmVclStatClp0Discards=atmVclStatClp0Discards, atmSigDescrParamAalSscsType=atmSigDescrParamAalSscsType, atmAal5VclOutOctets=atmAal5VclOutOctets, atmIntfIlmiPublicPrivateIndctr=atmIntfIlmiPublicPrivateIndctr, atmPvcTrapsPrefix=atmPvcTrapsPrefix, atmSigDescrParamBlliLayer2=atmSigDescrParamBlliLayer2, atmSigDetectMsgErrors=atmSigDetectMsgErrors, atmSigDescrParamBlliSnapId=atmSigDescrParamBlliSnapId, atmIlmiNetworkPrefixTable=atmIlmiNetworkPrefixTable, atm2MIBGroups=atm2MIBGroups, atmVplStatEntry=atmVplStatEntry, atmServcGroup=atmServcGroup, atmVplStatClp0CellOuts=atmVplStatClp0CellOuts, atmIntfLeafSetupFailures=atmIntfLeafSetupFailures, atmSigSupportLoLyrInfo=atmSigSupportLoLyrInfo, atmIlmiNetPrefixPrefix=atmIlmiNetPrefixPrefix, atmIntfIlmiAdminStatus=atmIntfIlmiAdminStatus, atmVplStatClp0Discards=atmVplStatClp0Discards, atmInterfaceCurrentMaxSvpcVpi=atmInterfaceCurrentMaxSvpcVpi, atmVclAddrEntry=atmVclAddrEntry, atmInterfaceConfMaxSvccVpi=atmInterfaceConfMaxSvccVpi, atmIntfPvcNotificationInterval=atmIntfPvcNotificationInterval, atmSvcVcCrossConnectHighIfIndex=atmSvcVcCrossConnectHighIfIndex, atmIfRegAddrAddress=atmIfRegAddrAddress, atmPvcTraps=atmPvcTraps, atmSigDescrParamBlliLayer3=atmSigDescrParamBlliLayer3, atmVclGenTable=atmVclGenTable, atmSvcVcCrossConnectTable=atmSvcVcCrossConnectTable, atmHostSigDescrGroup=atmHostSigDescrGroup, atmIntfActualSide=atmIntfActualSide, atmSvcVcCrossConnectLowVpi=atmSvcVcCrossConnectLowVpi, atmVclStatClp0Tagged=atmVclStatClp0Tagged, atmSvcVpCrossConnectIndex=atmSvcVpCrossConnectIndex, atmInterfaceExtTable=atmInterfaceExtTable, atmIlmiSrvcRegAddressIndex=atmIlmiSrvcRegAddressIndex, atmIntfIlmiConPollInactFactor=atmIntfIlmiConPollInactFactor, atmSvcVcCrossConnectEntry=atmSvcVcCrossConnectEntry, atmSvcVcCrossConnectLowIfIndex=atmSvcVcCrossConnectLowIfIndex, atmVclStatTotalCellOuts=atmVclStatTotalCellOuts, atmCurrentlyFailingPVclTable=atmCurrentlyFailingPVclTable, atmCurrentlyFailingPVplTimeStamp=atmCurrentlyFailingPVplTimeStamp, atm2MIBObjects=atm2MIBObjects, atmInterfaceConfMinSvccVci=atmInterfaceConfMinSvccVci, atmSwitchGroup=atmSwitchGroup, atmSigDescrParamRowStatus=atmSigDescrParamRowStatus, atmCurrentlyFailingPVclTimeStamp=atmCurrentlyFailingPVclTimeStamp, atmIlmiSrvcRegTable=atmIlmiSrvcRegTable, atmVplStatClp0Tagged=atmVplStatClp0Tagged, atmIntfActualType=atmIntfActualType, atmIfRegAddrOrgScope=atmIfRegAddrOrgScope, atmSvcVcCrossConnectIndex=atmSvcVcCrossConnectIndex, atmSigEmitSetupAttempts=atmSigEmitSetupAttempts, atmVclStatTotalCellIns=atmVclStatTotalCellIns, atmAal5VclStatTable=atmAal5VclStatTable, atmIntfIlmiEstablishConPollIntvl=atmIntfIlmiEstablishConPollIntvl, atm2MIB=atm2MIB, atmSigSupportBlliRepeatInd=atmSigSupportBlliRepeatInd, atmIntfConfigSide=atmIntfConfigSide, atmIntfIlmiOperStatus=atmIntfIlmiOperStatus, atmSwitchAddressIndex=atmSwitchAddressIndex, atmCurrentlyFailingPVclEntry=atmCurrentlyFailingPVclEntry, atmAddrVclAtmIfIndex=atmAddrVclAtmIfIndex, atmCurrentlyFailingPVplTable=atmCurrentlyFailingPVplTable, atmIntfCurrentlyFailingPVcls=atmIntfCurrentlyFailingPVcls, atmSwitchServcGroup=atmSwitchServcGroup, atmIntfSigVccRxTrafficDescrIndex=atmIntfSigVccRxTrafficDescrIndex, atmVclGenSigDescrIndex=atmVclGenSigDescrIndex, atmSigStatTable=atmSigStatTable, atmInterfaceExtEntry=atmInterfaceExtEntry, atmIntfLeafSetupRequests=atmIntfLeafSetupRequests, atmSigDetectUnavailRoutes=atmSigDetectUnavailRoutes, atmIlmiSrvcRegServiceID=atmIlmiSrvcRegServiceID, atmVclStatClp0CellIns=atmVclStatClp0CellIns, atmIntfPvcFailures=atmIntfPvcFailures, atmSigSupportTable=atmSigSupportTable, atmSigSSCOPErrdPdus=atmSigSSCOPErrdPdus, atmSigStatEntry=atmSigStatEntry, atm2MIBConformance=atm2MIBConformance, atmInterfaceCurrentMaxSvccVpi=atmInterfaceCurrentMaxSvccVpi, atmSigEmitCldPtyEvents=atmSigEmitCldPtyEvents, atmVpCrossConnectXTable=atmVpCrossConnectXTable, atmIntfPvcFailuresTrap=atmIntfPvcFailuresTrap, atmSigDescrParamBhliType=atmSigDescrParamBhliType, atmIlmiSrvcRegEntry=atmIlmiSrvcRegEntry, atmSwitchAddressRowStatus=atmSwitchAddressRowStatus, atmSigDetectSetupAttempts=atmSigDetectSetupAttempts, atmVcCrossConnectUserName=atmVcCrossConnectUserName, atmSigInEstabls=atmSigInEstabls, atmIntfConfigType=atmIntfConfigType, atmIntfPvcFailuresTrapEnable=atmIntfPvcFailuresTrapEnable, atmSwitchAddressAddress=atmSwitchAddressAddress, atmSigDetectRestarts=atmSigDetectRestarts, atm2MIBTraps=atm2MIBTraps, atmSvcVpCrossConnectHighVpi=atmSvcVpCrossConnectHighVpi, atmAddrVclTable=atmAddrVclTable, atmSvcVpCrossConnectTable=atmSvcVpCrossConnectTable, atmIntfIlmiCheckConPollIntvl=atmIntfIlmiCheckConPollIntvl, atmInterfaceCurrentMinSvccVci=atmInterfaceCurrentMinSvccVci, atmVcCrossConnectXEntry=atmVcCrossConnectXEntry, atmVplLogicalPortEntry=atmVplLogicalPortEntry, atmSigEmitTimerExpireds=atmSigEmitTimerExpireds, atmVplLogicalPortDef=atmVplLogicalPortDef, atmVclAddrAddr=atmVclAddrAddr, atmVclStatTotalDiscards=atmVclStatTotalDiscards, atmSigEmitUnavailResrcs=atmSigEmitUnavailResrcs, atmSvcVpCrossConnectLowVpi=atmSvcVpCrossConnectLowVpi, atmVclAddrRowStatus=atmVclAddrRowStatus, atmSigSupportCldPtySubAddr=atmSigSupportCldPtySubAddr, atmSigDescrParamIndex=atmSigDescrParamIndex, atmSigEmitUnavailRoutes=atmSigEmitUnavailRoutes, atmSigSupportPrefCarrier=atmSigSupportPrefCarrier, atmVpCrossConnectXEntry=atmVpCrossConnectXEntry, atmIfRegisteredAddrTable=atmIfRegisteredAddrTable, atmVplStatTotalCellOuts=atmVplStatTotalCellOuts, atmHostGroup=atmHostGroup, atmVplStatClp0CellIns=atmVplStatClp0CellIns, atmCommonStatsGroup=atmCommonStatsGroup, atmIlmiNetworkPrefixEntry=atmIlmiNetworkPrefixEntry, atmVplStatTotalDiscards=atmVplStatTotalDiscards, atmIlmiSrvcRegIndex=atmIlmiSrvcRegIndex, atmSigDescrParamEntry=atmSigDescrParamEntry, atm2MIBCompliance=atm2MIBCompliance, atmSigEmitClgPtyEvents=atmSigEmitClgPtyEvents, atmAddrVclVpi=atmAddrVclVpi, atmVplLogicalPortTable=atmVplLogicalPortTable, atmSvcVcCrossConnectLowVci=atmSvcVcCrossConnectLowVci, atmCurrentlyFailingPVplEntry=atmCurrentlyFailingPVplEntry, atmAddrVclEntry=atmAddrVclEntry, atmSigDetectUnavailResrcs=atmSigDetectUnavailResrcs, atmSigDetectTimerExpireds=atmSigDetectTimerExpireds, atmSvcVcCrossConnectHighVci=atmSvcVcCrossConnectHighVci, atmSigEmitRestarts=atmSigEmitRestarts, atmIntfIlmiFsmState=atmIntfIlmiFsmState, atmSwitchAddressTable=atmSwitchAddressTable, atmSvcVpCrossConnectLowIfIndex=atmSvcVpCrossConnectLowIfIndex, atmSigSupportEntry=atmSigSupportEntry, atm2MIBCompliances=atm2MIBCompliances, atmSigDescrParamBlliPktSize=atmSigDescrParamBlliPktSize, atmVclStatTable=atmVclStatTable, atmSwitchServcSigGroup=atmSwitchServcSigGroup, atmAal5VclInOctets=atmAal5VclInOctets, atmIlmiSrvcRegParm1=atmIlmiSrvcRegParm1, atmSigSSCOPConEvents=atmSigSSCOPConEvents, atmCommonGroup=atmCommonGroup, atmIlmiSrvcRegRowStatus=atmIlmiSrvcRegRowStatus, atmSvcVpCrossConnectHighIfIndex=atmSvcVpCrossConnectHighIfIndex, atmInterfaceConfMaxSvpcVpi=atmInterfaceConfMaxSvpcVpi, atmSigDescrParamBlliOuiPid=atmSigDescrParamBlliOuiPid, atmIlmiSrvcRegATMAddress=atmIlmiSrvcRegATMAddress, atmSvcVpCrossConnectEntry=atmSvcVpCrossConnectEntry, atmSigEmitMsgErrors=atmSigEmitMsgErrors, atmSigDescrParamTable=atmSigDescrParamTable, atmVclGenEntry=atmVclGenEntry, atmSigSupportHiLyrInfo=atmSigSupportHiLyrInfo)
