#
# PySNMP MIB module MICOM-SYS-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/MICOM-SYS-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 20:01:53 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, Integer, OctetString = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "Integer", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsUnion, ValueSizeConstraint, ConstraintsIntersection, SingleValueConstraint, ValueRangeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsUnion", "ValueSizeConstraint", "ConstraintsIntersection", "SingleValueConstraint", "ValueRangeConstraint")
micom_oscar, = mibBuilder.importSymbols("MICOM-OSCAR-MIB", "micom-oscar")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
ObjectIdentity, MibScalar, MibTable, MibTableRow, MibTableColumn, NotificationType, Unsigned32, NotificationType, Counter32, Gauge32, IpAddress, Integer32, Counter64, ModuleIdentity, MibIdentifier, Bits, TimeTicks, iso = mibBuilder.importSymbols("SNMPv2-SMI", "ObjectIdentity", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "NotificationType", "Unsigned32", "NotificationType", "Counter32", "Gauge32", "IpAddress", "Integer32", "Counter64", "ModuleIdentity", "MibIdentifier", "Bits", "TimeTicks", "iso")
DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention")
micom_system = MibIdentifier((1, 3, 6, 1, 4, 1, 335, 1, 4, 1)).setLabel("micom-system")
sys_configuration = MibIdentifier((1, 3, 6, 1, 4, 1, 335, 1, 4, 1, 1)).setLabel("sys-configuration")
sys_control = MibIdentifier((1, 3, 6, 1, 4, 1, 335, 1, 4, 1, 2)).setLabel("sys-control")
sys_statistics = MibIdentifier((1, 3, 6, 1, 4, 1, 335, 1, 4, 1, 3)).setLabel("sys-statistics")
sys_trap = MibIdentifier((1, 3, 6, 1, 4, 1, 335, 1, 4, 1, 4)).setLabel("sys-trap")
mcmSysHWTypeGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 335, 1, 4, 1, 1, 1))
mcmSysHWTypeModelType = MibScalar((1, 3, 6, 1, 4, 1, 335, 1, 4, 1, 1, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(50, 50)).setFixedLength(50)).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmSysHWTypeModelType.setStatus('deprecated')
mcmSysHWTypeRevisionLevel = MibScalar((1, 3, 6, 1, 4, 1, 335, 1, 4, 1, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmSysHWTypeRevisionLevel.setStatus('mandatory')
mcmSysHWTypeManufRevDate = MibScalar((1, 3, 6, 1, 4, 1, 335, 1, 4, 1, 1, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(25, 25)).setFixedLength(25)).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmSysHWTypeManufRevDate.setStatus('mandatory')
mcmSysHWTypeSerialNumber = MibScalar((1, 3, 6, 1, 4, 1, 335, 1, 4, 1, 1, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(9, 9)).setFixedLength(9)).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmSysHWTypeSerialNumber.setStatus('mandatory')
mcmSysHWTypeModuleID = MibScalar((1, 3, 6, 1, 4, 1, 335, 1, 4, 1, 1, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmSysHWTypeModuleID.setStatus('mandatory')
mcmSysHWTypeMACAddress = MibScalar((1, 3, 6, 1, 4, 1, 335, 1, 4, 1, 1, 1, 6), OctetString().subtype(subtypeSpec=ValueSizeConstraint(6, 6)).setFixedLength(6)).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmSysHWTypeMACAddress.setStatus('mandatory')
mcmSysHWTypeCPUType = MibScalar((1, 3, 6, 1, 4, 1, 335, 1, 4, 1, 1, 1, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(50, 50)).setFixedLength(50)).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmSysHWTypeCPUType.setStatus('mandatory')
mcmSysHWTypeGenCfgType = MibScalar((1, 3, 6, 1, 4, 1, 335, 1, 4, 1, 1, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("reserved", 1), ("passport4400", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmSysHWTypeGenCfgType.setStatus('mandatory')
mcmSysCfgGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 335, 1, 4, 1, 1, 2))
mcmSysCfgCPUConfiguration = MibScalar((1, 3, 6, 1, 4, 1, 335, 1, 4, 1, 1, 2, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("base", 1), ("companion040", 2), ("companion060", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmSysCfgCPUConfiguration.setStatus('mandatory')
mcmSysCfgPrimaryWANPort = MibScalar((1, 3, 6, 1, 4, 1, 335, 1, 4, 1, 1, 2, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("present", 1), ("notPresent", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmSysCfgPrimaryWANPort.setStatus('mandatory')
mcmSysCfgPrimaryWANPortPhyMedia = MibScalar((1, 3, 6, 1, 4, 1, 335, 1, 4, 1, 1, 2, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("none", 1), ("unknown", 2), ("link56k", 3), ("generalserial", 4), ("t1e1", 5), ("isdn", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmSysCfgPrimaryWANPortPhyMedia.setStatus('mandatory')
mcmSysCfgDCESerialPortPhyMedia = MibScalar((1, 3, 6, 1, 4, 1, 335, 1, 4, 1, 1, 2, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("none", 1), ("unknown", 2), ("rs232", 3), ("v35", 4), ("v36", 5), ("x21", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmSysCfgDCESerialPortPhyMedia.setStatus('mandatory')
mcmSysCfgQUICCExpansionModule1 = MibScalar((1, 3, 6, 1, 4, 1, 335, 1, 4, 1, 1, 2, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("present", 1), ("notPresent", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmSysCfgQUICCExpansionModule1.setStatus('mandatory')
mcmSysCfgQUICCExpansionModule2 = MibScalar((1, 3, 6, 1, 4, 1, 335, 1, 4, 1, 1, 2, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("present", 1), ("notPresent", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmSysCfgQUICCExpansionModule2.setStatus('mandatory')
mcmSysCfgFeatureRTCBatteryStatus = MibScalar((1, 3, 6, 1, 4, 1, 335, 1, 4, 1, 1, 2, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("noBattery", 1), ("batteryLow", 2), ("batteryOK", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmSysCfgFeatureRTCBatteryStatus.setStatus('mandatory')
mcmSysCfgDRAMSize = MibScalar((1, 3, 6, 1, 4, 1, 335, 1, 4, 1, 1, 2, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("size4Mbytes", 1), ("size8Mbytes", 2), ("size16Mbytes", 3), ("size32Mbytes", 4), ("size64Mbytes", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmSysCfgDRAMSize.setStatus('mandatory')
mcmSysCfgFlashMemorySize = MibScalar((1, 3, 6, 1, 4, 1, 335, 1, 4, 1, 1, 2, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("size4Mbytes", 1), ("size8Mbytes", 2), ("size16Mbytes", 3), ("size32Mbytes", 4), ("size64Mbytes", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmSysCfgFlashMemorySize.setStatus('mandatory')
mcmSysLimTable = MibTable((1, 3, 6, 1, 4, 1, 335, 1, 4, 1, 1, 3), )
if mibBuilder.loadTexts: mcmSysLimTable.setStatus('mandatory')
mcmSysLimEntry = MibTableRow((1, 3, 6, 1, 4, 1, 335, 1, 4, 1, 1, 3, 1), ).setIndexNames((0, "MICOM-SYS-MIB", "mcmSysLimModuleAddress"))
if mibBuilder.loadTexts: mcmSysLimEntry.setStatus('mandatory')
mcmSysLimModuleAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 1, 1, 3, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9))).clone(namedValues=NamedValues(("limA", 1), ("lim1", 2), ("lim2", 3), ("lim3", 4), ("lim4", 5), ("limB", 6), ("limC", 7), ("limD", 8), ("limE", 9)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmSysLimModuleAddress.setStatus('mandatory')
mcmSysLimModuleName = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 1, 1, 3, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmSysLimModuleName.setStatus('mandatory')
mcmSysLimPcbPartNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 1, 1, 3, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmSysLimPcbPartNumber.setStatus('mandatory')
mcmSysLimPcbRelease = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 1, 1, 3, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 4))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmSysLimPcbRelease.setStatus('mandatory')
mcmSysLimSerialNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 1, 1, 3, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 13))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmSysLimSerialNumber.setStatus('mandatory')
mcmSysLimMfgDate = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 1, 1, 3, 1, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 7))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmSysLimMfgDate.setStatus('mandatory')
mcmSysPhysTable = MibTable((1, 3, 6, 1, 4, 1, 335, 1, 4, 1, 1, 16), )
if mibBuilder.loadTexts: mcmSysPhysTable.setStatus('mandatory')
mcmSysPhysEntry = MibTableRow((1, 3, 6, 1, 4, 1, 335, 1, 4, 1, 1, 16, 1), ).setIndexNames((0, "MICOM-SYS-MIB", "mcmSysPhysModuleAddress"))
if mibBuilder.loadTexts: mcmSysPhysEntry.setStatus('mandatory')
mcmSysPhysModuleAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 1, 1, 16, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 5))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmSysPhysModuleAddress.setStatus('mandatory')
mcmSysLogModuleAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 1, 1, 16, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10))).clone(namedValues=NamedValues(("limA", 1), ("lim1", 2), ("lim2", 3), ("lim3", 4), ("lim4", 5), ("limB", 6), ("limC", 7), ("limD", 8), ("limE", 9), ("none", 10)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmSysLogModuleAddress.setStatus('mandatory')
mcmSysChassisGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 335, 1, 4, 1, 1, 4))
mcmSysChassisNumberOfModules = MibScalar((1, 3, 6, 1, 4, 1, 335, 1, 4, 1, 1, 4, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("moduleThree", 1), ("moduleFive", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmSysChassisNumberOfModules.setStatus('mandatory')
mcmSysChassisCoolingFan = MibScalar((1, 3, 6, 1, 4, 1, 335, 1, 4, 1, 1, 4, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("running", 1), ("notRunning", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmSysChassisCoolingFan.setStatus('mandatory')
mcmSysChassisPowerSupplyType = MibScalar((1, 3, 6, 1, 4, 1, 335, 1, 4, 1, 1, 4, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("type-A", 1), ("type-B", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmSysChassisPowerSupplyType.setStatus('mandatory')
mcmSysChassisPowerSupplyStatus = MibScalar((1, 3, 6, 1, 4, 1, 335, 1, 4, 1, 1, 4, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("normal", 1), ("fault", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmSysChassisPowerSupplyStatus.setStatus('mandatory')
mcmSysChassisPowerSupplyModuleCount = MibScalar((1, 3, 6, 1, 4, 1, 335, 1, 4, 1, 1, 4, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 5))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmSysChassisPowerSupplyModuleCount.setStatus('mandatory')
mcmSysChassisPowerSupplyRedundant = MibScalar((1, 3, 6, 1, 4, 1, 335, 1, 4, 1, 1, 4, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmSysChassisPowerSupplyRedundant.setStatus('mandatory')
mcmSysTimeOfDayGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 335, 1, 4, 1, 1, 5))
mcmSysTimeOfDay = MibIdentifier((1, 3, 6, 1, 4, 1, 335, 1, 4, 1, 1, 5, 1))
mcmSysTimeOfDaySec = MibScalar((1, 3, 6, 1, 4, 1, 335, 1, 4, 1, 1, 5, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 59))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mcmSysTimeOfDaySec.setStatus('mandatory')
mcmSysTimeOfDayMin = MibScalar((1, 3, 6, 1, 4, 1, 335, 1, 4, 1, 1, 5, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 59))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mcmSysTimeOfDayMin.setStatus('mandatory')
mcmSysTimeOfDayHour = MibScalar((1, 3, 6, 1, 4, 1, 335, 1, 4, 1, 1, 5, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 23))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mcmSysTimeOfDayHour.setStatus('mandatory')
mcmSysTimeOfDayDay = MibScalar((1, 3, 6, 1, 4, 1, 335, 1, 4, 1, 1, 5, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("sunday", 1), ("monday", 2), ("tuesday", 3), ("wednesday", 4), ("thursday", 5), ("friday", 6), ("saturday", 7)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mcmSysTimeOfDayDay.setStatus('mandatory')
mcmSysTimeOfDayDate = MibScalar((1, 3, 6, 1, 4, 1, 335, 1, 4, 1, 1, 5, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 31))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mcmSysTimeOfDayDate.setStatus('mandatory')
mcmSysTimeOfDayMonth = MibScalar((1, 3, 6, 1, 4, 1, 335, 1, 4, 1, 1, 5, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 12))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mcmSysTimeOfDayMonth.setStatus('mandatory')
mcmSysTimeOfDayYear = MibScalar((1, 3, 6, 1, 4, 1, 335, 1, 4, 1, 1, 5, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1970, 2070))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mcmSysTimeOfDayYear.setStatus('mandatory')
mcmSysAsciiTimeOfDay = MibScalar((1, 3, 6, 1, 4, 1, 335, 1, 4, 1, 1, 5, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(20, 25))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmSysAsciiTimeOfDay.setStatus('mandatory')
mcmSysFirmwareGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 335, 1, 4, 1, 1, 6))
mcmSysOperationalType = MibScalar((1, 3, 6, 1, 4, 1, 335, 1, 4, 1, 1, 6, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("accessRouter", 1), ("accessRouterAndNAS", 2), ("nmCoreRouter", 3), ("concentratingRouter", 4), ("backboneRouter", 5), ("other", 6)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mcmSysOperationalType.setStatus('mandatory')
mcmSysFirmwareConfigCommitBank = MibScalar((1, 3, 6, 1, 4, 1, 335, 1, 4, 1, 1, 6, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("bank3", 1), ("bank4", 2), ("none", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mcmSysFirmwareConfigCommitBank.setStatus('mandatory')
mcmSysFirmwareConfigSaveBank = MibScalar((1, 3, 6, 1, 4, 1, 335, 1, 4, 1, 1, 6, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("bank3", 1), ("bank4", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mcmSysFirmwareConfigSaveBank.setStatus('mandatory')
mcmSysFirmwareConfigActiveBank = MibScalar((1, 3, 6, 1, 4, 1, 335, 1, 4, 1, 1, 6, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("bank3", 1), ("bank4", 2), ("none", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mcmSysFirmwareConfigActiveBank.setStatus('mandatory')
mcmSysFirmwareConfigReadBank = MibScalar((1, 3, 6, 1, 4, 1, 335, 1, 4, 1, 1, 6, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("bank3", 1), ("bank4", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmSysFirmwareConfigReadBank.setStatus('mandatory')
mcmSysFirmwareCodeReadBank = MibScalar((1, 3, 6, 1, 4, 1, 335, 1, 4, 1, 1, 6, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("bank1", 1), ("bank2", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmSysFirmwareCodeReadBank.setStatus('mandatory')
mcmSysFirmwareCodeCommitBank = MibScalar((1, 3, 6, 1, 4, 1, 335, 1, 4, 1, 1, 6, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("bank1", 1), ("bank2", 2), ("none", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mcmSysFirmwareCodeCommitBank.setStatus('mandatory')
mcmSysFirmwareVersion = MibScalar((1, 3, 6, 1, 4, 1, 335, 1, 4, 1, 1, 6, 8), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(64, 64)).setFixedLength(64)).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmSysFirmwareVersion.setStatus('mandatory')
mcmSysFirmwareConfigVersion = MibScalar((1, 3, 6, 1, 4, 1, 335, 1, 4, 1, 1, 6, 9), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(64, 64)).setFixedLength(64)).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmSysFirmwareConfigVersion.setStatus('mandatory')
mcmSysFirmwareImageTable = MibTable((1, 3, 6, 1, 4, 1, 335, 1, 4, 1, 1, 7), )
if mibBuilder.loadTexts: mcmSysFirmwareImageTable.setStatus('mandatory')
mcmSysFirmwareImageEntry = MibTableRow((1, 3, 6, 1, 4, 1, 335, 1, 4, 1, 1, 7, 1), ).setIndexNames((0, "MICOM-SYS-MIB", "mcmSysFirmwareImageIndex"))
if mibBuilder.loadTexts: mcmSysFirmwareImageEntry.setStatus('mandatory')
mcmSysFirmwareImageIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 1, 1, 7, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmSysFirmwareImageIndex.setStatus('mandatory')
mcmSysFirmwareImageBank = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 1, 1, 7, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("bank0", 1), ("bank1", 2), ("bank2", 3), ("bank3", 4), ("bank4", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmSysFirmwareImageBank.setStatus('mandatory')
mcmSysFirmwareImageSoftware = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 1, 1, 7, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("boot", 1), ("code", 2), ("config", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmSysFirmwareImageSoftware.setStatus('mandatory')
mcmSysFirmwareImageFilename = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 1, 1, 7, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmSysFirmwareImageFilename.setStatus('mandatory')
mcmSysFirmwareImageRevision = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 1, 1, 7, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmSysFirmwareImageRevision.setStatus('mandatory')
mcmSysFirmwareImageSize = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 1, 1, 7, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmSysFirmwareImageSize.setStatus('mandatory')
mcmSysFirmwareImageCommitStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 1, 1, 7, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("committed", 1), ("notCommitted", 2), ("committedAndActive", 3), ("committedAndNotActive", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmSysFirmwareImageCommitStatus.setStatus('mandatory')
mcmSysFirmwareImageBurnCount = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 1, 1, 7, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmSysFirmwareImageBurnCount.setStatus('mandatory')
mcmSysSmartCfgGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 335, 1, 4, 1, 1, 8))
mcmSysSmartCfgAction = MibScalar((1, 3, 6, 1, 4, 1, 335, 1, 4, 1, 1, 8, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("update", 1)))).setMaxAccess("writeonly")
if mibBuilder.loadTexts: mcmSysSmartCfgAction.setStatus('mandatory')
mcmSysSmartCfgStatus = MibScalar((1, 3, 6, 1, 4, 1, 335, 1, 4, 1, 1, 8, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("ok", 1), ("failed", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmSysSmartCfgStatus.setStatus('mandatory')
mcmSysCommunityStringTable = MibTable((1, 3, 6, 1, 4, 1, 335, 1, 4, 1, 1, 9), )
if mibBuilder.loadTexts: mcmSysCommunityStringTable.setStatus('mandatory')
mcmSysCommunityStringEntry = MibTableRow((1, 3, 6, 1, 4, 1, 335, 1, 4, 1, 1, 9, 1), ).setIndexNames((0, "MICOM-SYS-MIB", "mcmSysCommunityStringIndex"))
if mibBuilder.loadTexts: mcmSysCommunityStringEntry.setStatus('mandatory')
mcmSysCommunityStringIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 1, 1, 9, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("nSP-Configurator", 1), ("nSP-Operator", 2), ("nSP-Monitor", 3), ("customer-Configurator", 4), ("customer-Operator", 5), ("customer-Monitor", 6)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mcmSysCommunityStringIndex.setStatus('mandatory')
mcmSysCommunityStringCommunity = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 1, 1, 9, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 25))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mcmSysCommunityStringCommunity.setStatus('mandatory')
mcmSysValidateCommunityGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 335, 1, 4, 1, 1, 10))
mcmSysValidateCommunity = MibScalar((1, 3, 6, 1, 4, 1, 335, 1, 4, 1, 1, 10, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 25))).setMaxAccess("writeonly")
if mibBuilder.loadTexts: mcmSysValidateCommunity.setStatus('mandatory')
mcmSysLastCommunityPriviledgeLevel = MibScalar((1, 3, 6, 1, 4, 1, 335, 1, 4, 1, 1, 10, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("nspConfigurator", 1), ("nspOperator", 2), ("nspMonitor", 3), ("customerConfigurator", 4), ("customerOperator", 5), ("customerMonitor", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmSysLastCommunityPriviledgeLevel.setStatus('mandatory')
mcmSysConsolePortGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 335, 1, 4, 1, 1, 11))
mcmSysConsolePortBaudRate = MibScalar((1, 3, 6, 1, 4, 1, 335, 1, 4, 1, 1, 11, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("bps2400", 1), ("bps4800", 2), ("bps9600", 3), ("bps19200", 4), ("bps38400", 5))).clone(3)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mcmSysConsolePortBaudRate.setStatus('mandatory')
mcmSysConsolePortStopBits = MibScalar((1, 3, 6, 1, 4, 1, 335, 1, 4, 1, 1, 11, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2)).clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mcmSysConsolePortStopBits.setStatus('mandatory')
mcmSysConsolePortDataBits = MibScalar((1, 3, 6, 1, 4, 1, 335, 1, 4, 1, 1, 11, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(5, 8)).clone(8)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mcmSysConsolePortDataBits.setStatus('mandatory')
mcmSysConsolePortParity = MibScalar((1, 3, 6, 1, 4, 1, 335, 1, 4, 1, 1, 11, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("off", 1), ("even", 2), ("odd", 3))).clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mcmSysConsolePortParity.setStatus('mandatory')
mcmSysCommitTrackingGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 335, 1, 4, 1, 1, 12))
mcmSysCommitTrackingCounter = MibScalar((1, 3, 6, 1, 4, 1, 335, 1, 4, 1, 1, 12, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmSysCommitTrackingCounter.setStatus('mandatory')
mcmSysCommitTrackingSrcIPAddressOfLastCommit = MibScalar((1, 3, 6, 1, 4, 1, 335, 1, 4, 1, 1, 12, 2), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmSysCommitTrackingSrcIPAddressOfLastCommit.setStatus('mandatory')
mcmSysCommitTrackingCommunityOfLastCommit = MibScalar((1, 3, 6, 1, 4, 1, 335, 1, 4, 1, 1, 12, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmSysCommitTrackingCommunityOfLastCommit.setStatus('mandatory')
mcmSysCommitTrackingTimeOfLastCommit = MibScalar((1, 3, 6, 1, 4, 1, 335, 1, 4, 1, 1, 12, 4), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmSysCommitTrackingTimeOfLastCommit.setStatus('mandatory')
mcmSysIfExtTable = MibTable((1, 3, 6, 1, 4, 1, 335, 1, 4, 1, 1, 13), )
if mibBuilder.loadTexts: mcmSysIfExtTable.setStatus('mandatory')
mcmSysIfExtEntry = MibTableRow((1, 3, 6, 1, 4, 1, 335, 1, 4, 1, 1, 13, 1), ).setIndexNames((0, "MICOM-SYS-MIB", "mcmSysIfExtIfIndex"))
if mibBuilder.loadTexts: mcmSysIfExtEntry.setStatus('mandatory')
mcmSysIfExtIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 1, 1, 13, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmSysIfExtIfIndex.setStatus('mandatory')
mcmSysIfExtName = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 1, 1, 13, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(25, 25)).setFixedLength(25)).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmSysIfExtName.setStatus('mandatory')
mcmSysIfExtType = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 1, 1, 13, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 63, 75, 76, 77, 81))).clone(namedValues=NamedValues(("other", 1), ("regular1822", 2), ("hdh1822", 3), ("ddnX25", 4), ("rfc877x25", 5), ("ethernetCsmacd", 6), ("iso88023Csmacd", 7), ("iso88024TokenBus", 8), ("iso88025TokenRing", 9), ("iso88026Man", 10), ("starLan", 11), ("proteon10Mbit", 12), ("proteon80Mbit", 13), ("hyperchannel", 14), ("fddi", 15), ("lapb", 16), ("sdlc", 17), ("ds1", 18), ("e1", 19), ("basicISDN", 20), ("primaryISDN", 21), ("propPointToPointSerial", 22), ("ppp", 23), ("softwareLoopback", 24), ("eon", 25), ("ethernet3Mbit", 26), ("nsip", 27), ("slip", 28), ("ultra", 29), ("ds3", 30), ("sip", 31), ("frameRelay", 32), ("rs232", 33), ("para", 34), ("arcnet", 35), ("arcnetPlus", 36), ("atm", 37), ("miox25", 38), ("sonet", 39), ("x25ple", 40), ("iso88022llc", 41), ("localTalk", 42), ("smdsDxi", 43), ("frameRelayService", 44), ("v35", 45), ("hssi", 46), ("hippi", 47), ("modem", 48), ("aal5", 49), ("sonetPath", 50), ("sonetVT", 51), ("smdsIcip", 52), ("propVirtual", 53), ("propMultiplexor", 54), ("isdn", 63), ("isdns", 75), ("isdnu", 76), ("lapd", 77), ("ds0", 81)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmSysIfExtType.setStatus('mandatory')
mcmSysIfExtLinkUpDownTrapEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 1, 1, 13, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mcmSysIfExtLinkUpDownTrapEnable.setStatus('mandatory')
mcmSysIfExtConnectorPresent = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 1, 1, 13, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmSysIfExtConnectorPresent.setStatus('mandatory')
mcmSysIfExtPersistenceType = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 1, 1, 13, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("volatile", 1), ("non-volatile", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmSysIfExtPersistenceType.setStatus('mandatory')
mcmSysIfExtState = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 1, 1, 13, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("configured", 1), ("not-configured", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmSysIfExtState.setStatus('mandatory')
mcmSysIfExtPPA = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 1, 1, 13, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmSysIfExtPPA.setStatus('mandatory')
mcmSysIfExtModule = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 1, 1, 13, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9))).clone(namedValues=NamedValues(("limA", 1), ("lim1", 2), ("lim2", 3), ("lim3", 4), ("lim4", 5), ("limB", 6), ("limC", 7), ("limD", 8), ("limE", 9)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmSysIfExtModule.setStatus('mandatory')
mcmSysIfExtChannel = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 1, 1, 13, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmSysIfExtChannel.setStatus('mandatory')
mcmSysIfExtPPADeviceType = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 1, 1, 13, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46))).clone(namedValues=NamedValues(("wanDriver-FRDTE", 1), ("ethDriver", 2), ("loopDriver", 3), ("nullDevice", 4), ("noDevice", 5), ("frDevice-DTE", 6), ("wanConn", 7), ("isdn-B1-ch", 8), ("isdn-B2-ch", 9), ("isdn-D-ch", 10), ("isdn-conn", 11), ("voiceVP", 12), ("nmVP", 13), ("dataVP", 14), ("t1Net", 15), ("t1Loc", 16), ("t1Frac", 17), ("serialDevice", 18), ("euvmCh", 19), ("t1DP1", 20), ("t1DP2", 21), ("e1Net", 22), ("e1Loc", 23), ("e1Frac", 24), ("e1DP1", 25), ("e1DP2", 26), ("iuvmCh", 27), ("dvmCh", 28), ("frDevice-DCE", 29), ("wanDriver-FRDCE", 30), ("wanDriver-FRTDS", 31), ("dce-Conn", 32), ("csu-t1", 33), ("csu-56k", 34), ("isdn-LAPD", 35), ("isdn-BRI", 36), ("csu-e1", 37), ("panlDCE", 38), ("panlDTE", 39), ("standardFR", 40), ("voice-isdn-BRI-ch", 41), ("voice-isdn-BRI", 42), ("voice-isdn-LAPD", 43), ("voice-isdn-D-ch", 44), ("voice-isdn-B1-ch", 45), ("voice-isdn-B2-ch", 46)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmSysIfExtPPADeviceType.setStatus('mandatory')
mcmSysRollbackGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 335, 1, 4, 1, 1, 14))
mcmSysRollbackFeature = MibScalar((1, 3, 6, 1, 4, 1, 335, 1, 4, 1, 1, 14, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mcmSysRollbackFeature.setStatus('mandatory')
mcmSysRollbackStatus = MibScalar((1, 3, 6, 1, 4, 1, 335, 1, 4, 1, 1, 14, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("required", 1), ("not-required", 2), ("next-reset", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmSysRollbackStatus.setStatus('mandatory')
mcmSysRollbackConfirm = MibScalar((1, 3, 6, 1, 4, 1, 335, 1, 4, 1, 1, 14, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("confirm", 1)))).setMaxAccess("writeonly")
if mibBuilder.loadTexts: mcmSysRollbackConfirm.setStatus('mandatory')
nvmSysIfExtTable = MibTable((1, 3, 6, 1, 4, 1, 335, 1, 4, 1, 1, 15), )
if mibBuilder.loadTexts: nvmSysIfExtTable.setStatus('mandatory')
nvmSysIfExtEntry = MibTableRow((1, 3, 6, 1, 4, 1, 335, 1, 4, 1, 1, 15, 1), ).setIndexNames((0, "MICOM-SYS-MIB", "nvmSysIfExtIfIndex"))
if mibBuilder.loadTexts: nvmSysIfExtEntry.setStatus('mandatory')
nvmSysIfExtIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 1, 1, 15, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvmSysIfExtIfIndex.setStatus('mandatory')
nvmSysIfExtName = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 1, 1, 15, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(25, 25)).setFixedLength(25)).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvmSysIfExtName.setStatus('mandatory')
nvmSysIfExtType = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 1, 1, 15, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 63, 75, 76, 77, 81))).clone(namedValues=NamedValues(("other", 1), ("regular1822", 2), ("hdh1822", 3), ("ddnX25", 4), ("rfc877x25", 5), ("ethernetCsmacd", 6), ("iso88023Csmacd", 7), ("iso88024TokenBus", 8), ("iso88025TokenRing", 9), ("iso88026Man", 10), ("starLan", 11), ("proteon10Mbit", 12), ("proteon80Mbit", 13), ("hyperchannel", 14), ("fddi", 15), ("lapb", 16), ("sdlc", 17), ("ds1", 18), ("e1", 19), ("basicISDN", 20), ("primaryISDN", 21), ("propPointToPointSerial", 22), ("ppp", 23), ("softwareLoopback", 24), ("eon", 25), ("ethernet3Mbit", 26), ("nsip", 27), ("slip", 28), ("ultra", 29), ("ds3", 30), ("sip", 31), ("frameRelay", 32), ("rs232", 33), ("para", 34), ("arcnet", 35), ("arcnetPlus", 36), ("atm", 37), ("miox25", 38), ("sonet", 39), ("x25ple", 40), ("iso88022llc", 41), ("localTalk", 42), ("smdsDxi", 43), ("frameRelayService", 44), ("v35", 45), ("hssi", 46), ("hippi", 47), ("modem", 48), ("aal5", 49), ("sonetPath", 50), ("sonetVT", 51), ("smdsIcip", 52), ("propVirtual", 53), ("propMultiplexor", 54), ("isdn", 63), ("isdns", 75), ("isdnu", 76), ("lapd", 77), ("ds0", 81)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvmSysIfExtType.setStatus('mandatory')
nvmSysIfExtLinkUpDownTrapEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 1, 1, 15, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvmSysIfExtLinkUpDownTrapEnable.setStatus('mandatory')
nvmSysIfExtConnectorPresent = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 1, 1, 15, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvmSysIfExtConnectorPresent.setStatus('mandatory')
nvmSysIfExtPersistenceType = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 1, 1, 15, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("volatile", 1), ("non-volatile", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvmSysIfExtPersistenceType.setStatus('mandatory')
nvmSysIfExtState = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 1, 1, 15, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("configured", 1), ("not-configured", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvmSysIfExtState.setStatus('mandatory')
nvmSysIfExtPPA = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 1, 1, 15, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvmSysIfExtPPA.setStatus('mandatory')
nvmSysIfExtModule = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 1, 1, 15, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9))).clone(namedValues=NamedValues(("limA", 1), ("lim1", 2), ("lim2", 3), ("lim3", 4), ("lim4", 5), ("limB", 6), ("limC", 7), ("limD", 8), ("limE", 9)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvmSysIfExtModule.setStatus('mandatory')
nvmSysIfExtChannel = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 1, 1, 15, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvmSysIfExtChannel.setStatus('mandatory')
nvmSysIfExtPPADeviceType = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 1, 1, 15, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46))).clone(namedValues=NamedValues(("wanDriver-FRDTE", 1), ("ethDriver", 2), ("loopDriver", 3), ("nullDevice", 4), ("noDevice", 5), ("frDevice-DTE", 6), ("wanConn", 7), ("isdn-B1-ch", 8), ("isdn-B2-ch", 9), ("isdn-D-ch", 10), ("isdn-conn", 11), ("voiceVP", 12), ("nmVP", 13), ("dataVP", 14), ("t1Net", 15), ("t1Loc", 16), ("t1Frac", 17), ("serialDevice", 18), ("euvmCh", 19), ("t1DP1", 20), ("t1DP2", 21), ("e1Net", 22), ("e1Loc", 23), ("e1Frac", 24), ("e1DP1", 25), ("e1DP2", 26), ("iuvmCh", 27), ("dvmCh", 28), ("frDevice-DCE", 29), ("wanDriver-FRDCE", 30), ("wanDriver-FRTDS", 31), ("dce-Conn", 32), ("csu-t1", 33), ("csu-56k", 34), ("isdn-LAPD", 35), ("isdn-BRI", 36), ("csu-e1", 37), ("panlDCE", 38), ("panlDTE", 39), ("standardFR", 40), ("voice-isdn-BRI-ch", 41), ("voice-isdn-BRI", 42), ("voice-isdn-LAPD", 43), ("voice-isdn-D-ch", 44), ("voice-isdn-B1-ch", 45), ("voice-isdn-B2-ch", 46)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvmSysIfExtPPADeviceType.setStatus('mandatory')
mcmSysResetGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 335, 1, 4, 1, 2, 1))
mcmSysResetAction = MibScalar((1, 3, 6, 1, 4, 1, 335, 1, 4, 1, 2, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("cpu-only", 1), ("currentConfig", 2), ("factoryDefaults", 3)))).setMaxAccess("writeonly")
if mibBuilder.loadTexts: mcmSysResetAction.setStatus('mandatory')
mcmSysRestartReason = MibScalar((1, 3, 6, 1, 4, 1, 335, 1, 4, 1, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 8, 9, 11, 12, 13, 14, 15, 16, 17, 18, 19, 21, 22, 23, 24, 25, 26, 27, 28, 29, 31, 32, 33, 34, 35, 36, 37, 38, 39, 41, 42, 43, 48, 49, 51, 52, 58, 59))).clone(namedValues=NamedValues(("hwButtonCurrentReset", 1), ("cliCurrentReset", 2), ("hwButtonOrCLICPUReset", 3), ("watchdogTimer", 4), ("noQUICCClock", 5), ("doubleBusFault", 6), ("powerUp", 8), ("unknownHardwareFault", 9), ("switchCodeConfigHWButtonReset", 11), ("switchCodeConfigCLICurrReset", 12), ("switchCodeConfigCPUReset", 13), ("switchCodeConfigwatchdogTimer", 14), ("switchCodeConfigNoQUICCClock", 15), ("switchCodeConfigdoubleBusFault", 16), ("switchCodeConfigRollbackTimer", 17), ("switchCodeConfigPowerUp", 18), ("switchCodeConfigUnknownHWFault", 19), ("switchCodeHWButtonReset", 21), ("switchCodeCLICurrReset", 22), ("switchCodeCPUReset", 23), ("switchCodewatchdogTimer", 24), ("switchCodeNoQUICCClock", 25), ("switchCodedoubleBusFault", 26), ("switchCodeRollbackTimer", 27), ("switchCodePowerUp", 28), ("switchCodeUnknownHWFault", 29), ("switchConfigHWButtonReset", 31), ("switchConfigCLICurrReset", 32), ("switchConfigCPUReset", 33), ("switchConfigwatchdogTimer", 34), ("switchConfigNoQUICCClock", 35), ("switchConfigdoubleBusFault", 36), ("switchConfigRollbackTimer", 37), ("switchConfigPowerUp", 38), ("switchConfigUnknownHWFault", 39), ("hwButtonResetToDefault", 41), ("cliResetToDefault", 42), ("cpuResetWithCommittedCOnfig", 43), ("powerUpWithDefaultedConfig", 48), ("configDefaultUnknownHWFault", 49), ("hwButtonDefaultUnknownSWState", 51), ("cliDefaultResetUnknownSWState", 52), ("powerUpDefaultUnknownSWState", 58), ("configDefaultUnknownSWHWState", 59)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmSysRestartReason.setStatus('mandatory')
mcmSysTimeOfLastReset = MibScalar((1, 3, 6, 1, 4, 1, 335, 1, 4, 1, 2, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(20, 25))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmSysTimeOfLastReset.setStatus('mandatory')
mcmSysCfgLockGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 335, 1, 4, 1, 2, 2))
mcmSysCfgLock = MibScalar((1, 3, 6, 1, 4, 1, 335, 1, 4, 1, 2, 2, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mcmSysCfgLock.setStatus('mandatory')
mcmSysUtilGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 335, 1, 4, 1, 3, 1))
mcmSysCpuUtilization = MibScalar((1, 3, 6, 1, 4, 1, 335, 1, 4, 1, 3, 1, 1), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmSysCpuUtilization.setStatus('mandatory')
mcmSysLinkTransmitBandwidthUtilization = MibScalar((1, 3, 6, 1, 4, 1, 335, 1, 4, 1, 3, 1, 2), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmSysLinkTransmitBandwidthUtilization.setStatus('mandatory')
mcmSysInternalRAMUtilization = MibScalar((1, 3, 6, 1, 4, 1, 335, 1, 4, 1, 3, 1, 3), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmSysInternalRAMUtilization.setStatus('mandatory')
mcmSysLinkReceiveBandwidthUtilization = MibScalar((1, 3, 6, 1, 4, 1, 335, 1, 4, 1, 3, 1, 4), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmSysLinkReceiveBandwidthUtilization.setStatus('mandatory')
mcmSysTrapSubscriptionTable = MibTable((1, 3, 6, 1, 4, 1, 335, 1, 4, 1, 4, 1), )
if mibBuilder.loadTexts: mcmSysTrapSubscriptionTable.setStatus('mandatory')
mcmSysTrapSubscriptionEntry = MibTableRow((1, 3, 6, 1, 4, 1, 335, 1, 4, 1, 4, 1, 1), ).setIndexNames((0, "MICOM-SYS-MIB", "mcmSysTrapSubscriptionIPAddress"))
if mibBuilder.loadTexts: mcmSysTrapSubscriptionEntry.setStatus('mandatory')
mcmSysTrapSubscriptionIPAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 1, 4, 1, 1, 1), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mcmSysTrapSubscriptionIPAddress.setStatus('mandatory')
mcmSysTrapSubscriptionCommunityString = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 1, 4, 1, 1, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mcmSysTrapSubscriptionCommunityString.setStatus('mandatory')
mcmSysTrapSubscriptionAction = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 1, 4, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("subscribe", 1), ("cancel", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mcmSysTrapSubscriptionAction.setStatus('mandatory')
mcmSysTrapThresholdGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 335, 1, 4, 1, 4, 2))
mcmSysTrapCPUUtilThreshold = MibScalar((1, 3, 6, 1, 4, 1, 335, 1, 4, 1, 4, 2, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 100)).clone(90)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mcmSysTrapCPUUtilThreshold.setStatus('mandatory')
mcmSysTrapBandwidthUtilThreshold = MibScalar((1, 3, 6, 1, 4, 1, 335, 1, 4, 1, 4, 2, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 100)).clone(90)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mcmSysTrapBandwidthUtilThreshold.setStatus('mandatory')
mcmSysTrapRAMUtilThreshold = MibScalar((1, 3, 6, 1, 4, 1, 335, 1, 4, 1, 4, 2, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 100)).clone(90)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mcmSysTrapRAMUtilThreshold.setStatus('mandatory')
mcmSysMainPowerSupplyFailure = NotificationType((1, 3, 6, 1, 4, 1, 335, 1, 4, 1) + (0,1)).setObjects(("MICOM-SYS-MIB", "mcmSysAsciiTimeOfDay"))
mcmSysChassisFanFailure = NotificationType((1, 3, 6, 1, 4, 1, 335, 1, 4, 1) + (0,2)).setObjects(("MICOM-SYS-MIB", "mcmSysAsciiTimeOfDay"))
mcmSysSystemReset = NotificationType((1, 3, 6, 1, 4, 1, 335, 1, 4, 1) + (0,3)).setObjects(("MICOM-SYS-MIB", "mcmSysAsciiTimeOfDay"))
mcmSysBatteryLow = NotificationType((1, 3, 6, 1, 4, 1, 335, 1, 4, 1) + (0,4)).setObjects(("MICOM-SYS-MIB", "mcmSysAsciiTimeOfDay"))
mcmSysConfigChanged = NotificationType((1, 3, 6, 1, 4, 1, 335, 1, 4, 1) + (0,5)).setObjects(("MICOM-SYS-MIB", "mcmSysAsciiTimeOfDay"))
mcmSysCPUUtilExceeded = NotificationType((1, 3, 6, 1, 4, 1, 335, 1, 4, 1) + (0,6)).setObjects(("MICOM-SYS-MIB", "mcmSysAsciiTimeOfDay"))
mcmSysBandwidthUtilExceeded = NotificationType((1, 3, 6, 1, 4, 1, 335, 1, 4, 1) + (0,7)).setObjects(("MICOM-SYS-MIB", "mcmSysAsciiTimeOfDay"))
mcmSysRAMUtilExceeded = NotificationType((1, 3, 6, 1, 4, 1, 335, 1, 4, 1) + (0,8)).setObjects(("MICOM-SYS-MIB", "mcmSysAsciiTimeOfDay"))
mcmSysRollbackEnabled = NotificationType((1, 3, 6, 1, 4, 1, 335, 1, 4, 1) + (0,9)).setObjects(("MICOM-SYS-MIB", "mcmSysAsciiTimeOfDay"))
mcmSysRollbackDisabled = NotificationType((1, 3, 6, 1, 4, 1, 335, 1, 4, 1) + (0,10)).setObjects(("MICOM-SYS-MIB", "mcmSysAsciiTimeOfDay"))
mcmSysRollbackArmed = NotificationType((1, 3, 6, 1, 4, 1, 335, 1, 4, 1) + (0,11)).setObjects(("MICOM-SYS-MIB", "mcmSysAsciiTimeOfDay"))
mcmSysRollbackDisarmed = NotificationType((1, 3, 6, 1, 4, 1, 335, 1, 4, 1) + (0,12)).setObjects(("MICOM-SYS-MIB", "mcmSysAsciiTimeOfDay"))
mibBuilder.exportSymbols("MICOM-SYS-MIB", mcmSysCfgLock=mcmSysCfgLock, mcmSysUtilGroup=mcmSysUtilGroup, mcmSysLimModuleAddress=mcmSysLimModuleAddress, mcmSysFirmwareCodeReadBank=mcmSysFirmwareCodeReadBank, mcmSysRAMUtilExceeded=mcmSysRAMUtilExceeded, mcmSysIfExtEntry=mcmSysIfExtEntry, mcmSysIfExtTable=mcmSysIfExtTable, mcmSysResetAction=mcmSysResetAction, mcmSysRollbackArmed=mcmSysRollbackArmed, mcmSysChassisPowerSupplyStatus=mcmSysChassisPowerSupplyStatus, nvmSysIfExtType=nvmSysIfExtType, mcmSysRollbackDisabled=mcmSysRollbackDisabled, mcmSysTrapSubscriptionAction=mcmSysTrapSubscriptionAction, mcmSysRollbackStatus=mcmSysRollbackStatus, mcmSysConfigChanged=mcmSysConfigChanged, mcmSysPhysModuleAddress=mcmSysPhysModuleAddress, mcmSysHWTypeGroup=mcmSysHWTypeGroup, sys_configuration=sys_configuration, mcmSysRollbackFeature=mcmSysRollbackFeature, mcmSysCfgQUICCExpansionModule2=mcmSysCfgQUICCExpansionModule2, mcmSysRollbackGroup=mcmSysRollbackGroup, mcmSysLimMfgDate=mcmSysLimMfgDate, mcmSysFirmwareImageBank=mcmSysFirmwareImageBank, mcmSysConsolePortBaudRate=mcmSysConsolePortBaudRate, mcmSysConsolePortParity=mcmSysConsolePortParity, nvmSysIfExtLinkUpDownTrapEnable=nvmSysIfExtLinkUpDownTrapEnable, nvmSysIfExtPPA=nvmSysIfExtPPA, mcmSysCfgGroup=mcmSysCfgGroup, mcmSysTimeOfDayGroup=mcmSysTimeOfDayGroup, mcmSysLastCommunityPriviledgeLevel=mcmSysLastCommunityPriviledgeLevel, mcmSysHWTypeManufRevDate=mcmSysHWTypeManufRevDate, mcmSysCfgCPUConfiguration=mcmSysCfgCPUConfiguration, mcmSysHWTypeMACAddress=mcmSysHWTypeMACAddress, mcmSysHWTypeCPUType=mcmSysHWTypeCPUType, mcmSysTimeOfLastReset=mcmSysTimeOfLastReset, mcmSysCommunityStringTable=mcmSysCommunityStringTable, mcmSysIfExtChannel=mcmSysIfExtChannel, mcmSysHWTypeGenCfgType=mcmSysHWTypeGenCfgType, mcmSysFirmwareImageBurnCount=mcmSysFirmwareImageBurnCount, mcmSysChassisPowerSupplyModuleCount=mcmSysChassisPowerSupplyModuleCount, mcmSysIfExtLinkUpDownTrapEnable=mcmSysIfExtLinkUpDownTrapEnable, mcmSysMainPowerSupplyFailure=mcmSysMainPowerSupplyFailure, mcmSysLinkReceiveBandwidthUtilization=mcmSysLinkReceiveBandwidthUtilization, mcmSysLimSerialNumber=mcmSysLimSerialNumber, mcmSysFirmwareVersion=mcmSysFirmwareVersion, mcmSysChassisPowerSupplyType=mcmSysChassisPowerSupplyType, mcmSysCfgFeatureRTCBatteryStatus=mcmSysCfgFeatureRTCBatteryStatus, mcmSysFirmwareConfigCommitBank=mcmSysFirmwareConfigCommitBank, mcmSysConsolePortDataBits=mcmSysConsolePortDataBits, mcmSysFirmwareConfigActiveBank=mcmSysFirmwareConfigActiveBank, nvmSysIfExtState=nvmSysIfExtState, mcmSysLogModuleAddress=mcmSysLogModuleAddress, mcmSysCfgPrimaryWANPortPhyMedia=mcmSysCfgPrimaryWANPortPhyMedia, mcmSysInternalRAMUtilization=mcmSysInternalRAMUtilization, mcmSysAsciiTimeOfDay=mcmSysAsciiTimeOfDay, mcmSysIfExtPPA=mcmSysIfExtPPA, mcmSysFirmwareImageTable=mcmSysFirmwareImageTable, nvmSysIfExtPersistenceType=nvmSysIfExtPersistenceType, mcmSysCPUUtilExceeded=mcmSysCPUUtilExceeded, mcmSysCommunityStringIndex=mcmSysCommunityStringIndex, mcmSysIfExtState=mcmSysIfExtState, mcmSysPhysTable=mcmSysPhysTable, sys_control=sys_control, nvmSysIfExtTable=nvmSysIfExtTable, nvmSysIfExtModule=nvmSysIfExtModule, mcmSysChassisPowerSupplyRedundant=mcmSysChassisPowerSupplyRedundant, mcmSysCfgQUICCExpansionModule1=mcmSysCfgQUICCExpansionModule1, mcmSysTrapSubscriptionEntry=mcmSysTrapSubscriptionEntry, nvmSysIfExtName=nvmSysIfExtName, mcmSysTrapSubscriptionCommunityString=mcmSysTrapSubscriptionCommunityString, mcmSysFirmwareImageIndex=mcmSysFirmwareImageIndex, mcmSysTimeOfDayDate=mcmSysTimeOfDayDate, mcmSysIfExtType=mcmSysIfExtType, mcmSysRollbackDisarmed=mcmSysRollbackDisarmed, mcmSysFirmwareImageSoftware=mcmSysFirmwareImageSoftware, sys_trap=sys_trap, mcmSysBatteryLow=mcmSysBatteryLow, mcmSysCommitTrackingSrcIPAddressOfLastCommit=mcmSysCommitTrackingSrcIPAddressOfLastCommit, mcmSysLinkTransmitBandwidthUtilization=mcmSysLinkTransmitBandwidthUtilization, micom_system=micom_system, mcmSysLimModuleName=mcmSysLimModuleName, mcmSysIfExtIfIndex=mcmSysIfExtIfIndex, mcmSysTimeOfDayDay=mcmSysTimeOfDayDay, mcmSysFirmwareGroup=mcmSysFirmwareGroup, mcmSysSmartCfgGroup=mcmSysSmartCfgGroup, mcmSysFirmwareConfigReadBank=mcmSysFirmwareConfigReadBank, mcmSysCpuUtilization=mcmSysCpuUtilization, nvmSysIfExtIfIndex=nvmSysIfExtIfIndex, mcmSysCfgFlashMemorySize=mcmSysCfgFlashMemorySize, mcmSysCommitTrackingCommunityOfLastCommit=mcmSysCommitTrackingCommunityOfLastCommit, mcmSysChassisCoolingFan=mcmSysChassisCoolingFan, mcmSysFirmwareCodeCommitBank=mcmSysFirmwareCodeCommitBank, sys_statistics=sys_statistics, mcmSysCommitTrackingGroup=mcmSysCommitTrackingGroup, nvmSysIfExtEntry=nvmSysIfExtEntry, mcmSysCfgDRAMSize=mcmSysCfgDRAMSize, mcmSysRestartReason=mcmSysRestartReason, mcmSysTimeOfDay=mcmSysTimeOfDay, mcmSysRollbackConfirm=mcmSysRollbackConfirm, mcmSysIfExtConnectorPresent=mcmSysIfExtConnectorPresent, mcmSysTrapSubscriptionTable=mcmSysTrapSubscriptionTable, mcmSysFirmwareImageFilename=mcmSysFirmwareImageFilename, mcmSysCommitTrackingTimeOfLastCommit=mcmSysCommitTrackingTimeOfLastCommit, mcmSysIfExtModule=mcmSysIfExtModule, mcmSysTrapRAMUtilThreshold=mcmSysTrapRAMUtilThreshold, mcmSysIfExtPersistenceType=mcmSysIfExtPersistenceType, nvmSysIfExtPPADeviceType=nvmSysIfExtPPADeviceType, mcmSysCommunityStringCommunity=mcmSysCommunityStringCommunity, mcmSysIfExtPPADeviceType=mcmSysIfExtPPADeviceType, mcmSysTimeOfDayYear=mcmSysTimeOfDayYear, mcmSysFirmwareConfigVersion=mcmSysFirmwareConfigVersion, mcmSysHWTypeModuleID=mcmSysHWTypeModuleID, mcmSysSmartCfgAction=mcmSysSmartCfgAction, mcmSysFirmwareImageSize=mcmSysFirmwareImageSize, mcmSysTrapBandwidthUtilThreshold=mcmSysTrapBandwidthUtilThreshold, mcmSysLimPcbRelease=mcmSysLimPcbRelease, mcmSysHWTypeSerialNumber=mcmSysHWTypeSerialNumber, mcmSysCfgDCESerialPortPhyMedia=mcmSysCfgDCESerialPortPhyMedia, mcmSysChassisNumberOfModules=mcmSysChassisNumberOfModules, mcmSysCfgLockGroup=mcmSysCfgLockGroup, mcmSysHWTypeModelType=mcmSysHWTypeModelType, nvmSysIfExtChannel=nvmSysIfExtChannel, mcmSysTimeOfDaySec=mcmSysTimeOfDaySec, mcmSysLimPcbPartNumber=mcmSysLimPcbPartNumber, mcmSysChassisFanFailure=mcmSysChassisFanFailure, mcmSysFirmwareConfigSaveBank=mcmSysFirmwareConfigSaveBank, mcmSysPhysEntry=mcmSysPhysEntry, mcmSysTimeOfDayMin=mcmSysTimeOfDayMin, mcmSysTrapCPUUtilThreshold=mcmSysTrapCPUUtilThreshold, mcmSysFirmwareImageCommitStatus=mcmSysFirmwareImageCommitStatus, mcmSysValidateCommunity=mcmSysValidateCommunity, mcmSysTrapThresholdGroup=mcmSysTrapThresholdGroup, mcmSysSystemReset=mcmSysSystemReset, mcmSysHWTypeRevisionLevel=mcmSysHWTypeRevisionLevel, mcmSysBandwidthUtilExceeded=mcmSysBandwidthUtilExceeded, mcmSysTrapSubscriptionIPAddress=mcmSysTrapSubscriptionIPAddress, mcmSysRollbackEnabled=mcmSysRollbackEnabled, mcmSysSmartCfgStatus=mcmSysSmartCfgStatus, mcmSysValidateCommunityGroup=mcmSysValidateCommunityGroup, mcmSysTimeOfDayHour=mcmSysTimeOfDayHour, mcmSysCommunityStringEntry=mcmSysCommunityStringEntry, mcmSysConsolePortStopBits=mcmSysConsolePortStopBits, nvmSysIfExtConnectorPresent=nvmSysIfExtConnectorPresent, mcmSysFirmwareImageRevision=mcmSysFirmwareImageRevision, mcmSysCfgPrimaryWANPort=mcmSysCfgPrimaryWANPort, mcmSysFirmwareImageEntry=mcmSysFirmwareImageEntry, mcmSysCommitTrackingCounter=mcmSysCommitTrackingCounter, mcmSysTimeOfDayMonth=mcmSysTimeOfDayMonth, mcmSysIfExtName=mcmSysIfExtName, mcmSysLimEntry=mcmSysLimEntry, mcmSysChassisGroup=mcmSysChassisGroup, mcmSysOperationalType=mcmSysOperationalType, mcmSysResetGroup=mcmSysResetGroup, mcmSysConsolePortGroup=mcmSysConsolePortGroup, mcmSysLimTable=mcmSysLimTable)
