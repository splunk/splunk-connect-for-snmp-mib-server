#
# PySNMP MIB module PDN-ATMM4EXT-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/PDN-ATMM4EXT-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 20:29:08 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, Integer, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "OctetString", "Integer", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueRangeConstraint, SingleValueConstraint, ValueSizeConstraint, ConstraintsUnion, ConstraintsIntersection = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueRangeConstraint", "SingleValueConstraint", "ValueSizeConstraint", "ConstraintsUnion", "ConstraintsIntersection")
atmfM4VcTestEntry, atmfM4VpTestEntry, atmfM4TcProtoCurrEntry, atmfM4TcProtoHistEntry = mibBuilder.importSymbols("ATM-FORUM-SNMP-M4-MIB", "atmfM4VcTestEntry", "atmfM4VpTestEntry", "atmfM4TcProtoCurrEntry", "atmfM4TcProtoHistEntry")
ifIndex, = mibBuilder.importSymbols("IF-MIB", "ifIndex")
pdnAtm, = mibBuilder.importSymbols("PDN-HEADER-MIB", "pdnAtm")
ModuleCompliance, NotificationGroup, ObjectGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup", "ObjectGroup")
TimeTicks, Bits, iso, NotificationType, Unsigned32, Gauge32, Integer32, ObjectIdentity, ModuleIdentity, MibScalar, MibTable, MibTableRow, MibTableColumn, Counter64, MibIdentifier, Counter32, IpAddress = mibBuilder.importSymbols("SNMPv2-SMI", "TimeTicks", "Bits", "iso", "NotificationType", "Unsigned32", "Gauge32", "Integer32", "ObjectIdentity", "ModuleIdentity", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Counter64", "MibIdentifier", "Counter32", "IpAddress")
TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString")
pdnAtmfM4ExtMIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 1795, 2, 24, 2, 6, 11, 6))
pdnAtmfM4ExtMIB.setRevisions(('2002-08-15 00:00', '2001-03-08 00:00', '2000-09-26 00:00', '2000-09-22 00:00', '2000-09-21 00:00', '2000-09-08 00:00', '2000-06-29 00:00',))
if mibBuilder.loadTexts: pdnAtmfM4ExtMIB.setLastUpdated('200103080000Z')
if mibBuilder.loadTexts: pdnAtmfM4ExtMIB.setOrganization('Paradyne Corporation MIB Working Group')
pdnAtmfM4ExtObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 1795, 2, 24, 2, 6, 11, 6, 1))
pdnAtmfM4ExtTraps = MibIdentifier((1, 3, 6, 1, 4, 1, 1795, 2, 24, 2, 6, 11, 6, 2))
pdnAtmfM4ExtConformance = MibIdentifier((1, 3, 6, 1, 4, 1, 1795, 2, 24, 2, 6, 11, 6, 3))
pdnAtmfM4ExtTrapPrefix = MibIdentifier((1, 3, 6, 1, 4, 1, 1795, 2, 24, 2, 6, 11, 6, 2, 0))
class PdnAtmfM4TestErrorCode(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8))
    namedValues = NamedValues(("noError", 0), ("badIfIndex", 1), ("noVccFound", 2), ("notOwner", 3), ("noResourceAvailable", 4), ("noLoopbackAllocated", 5), ("testCompleted", 6), ("testTimeOut", 7), ("adminStatusDisabled", 8))

pdnAtmfM4TcProtoCurrExtTable = MibTable((1, 3, 6, 1, 4, 1, 1795, 2, 24, 2, 6, 11, 6, 1, 1), )
if mibBuilder.loadTexts: pdnAtmfM4TcProtoCurrExtTable.setStatus('current')
pdnAtmfM4TcProtoCurrExtEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1795, 2, 24, 2, 6, 11, 6, 1, 1, 1), )
atmfM4TcProtoCurrEntry.registerAugmentions(("PDN-ATMM4EXT-MIB", "pdnAtmfM4TcProtoCurrExtEntry"))
pdnAtmfM4TcProtoCurrExtEntry.setIndexNames(*atmfM4TcProtoCurrEntry.getIndexNames())
if mibBuilder.loadTexts: pdnAtmfM4TcProtoCurrExtEntry.setStatus('current')
pdnAtmfM4TcProtoCurrCellIns = MibTableColumn((1, 3, 6, 1, 4, 1, 1795, 2, 24, 2, 6, 11, 6, 1, 1, 1, 1), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pdnAtmfM4TcProtoCurrCellIns.setStatus('current')
pdnAtmfM4TcProtoCurrCellOuts = MibTableColumn((1, 3, 6, 1, 4, 1, 1795, 2, 24, 2, 6, 11, 6, 1, 1, 1, 2), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pdnAtmfM4TcProtoCurrCellOuts.setStatus('current')
pdnAtmfM4TcProtoCurrInDiscards = MibTableColumn((1, 3, 6, 1, 4, 1, 1795, 2, 24, 2, 6, 11, 6, 1, 1, 1, 3), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pdnAtmfM4TcProtoCurrInDiscards.setStatus('current')
pdnAtmfM4TcProtoCurrOutDiscards = MibTableColumn((1, 3, 6, 1, 4, 1, 1795, 2, 24, 2, 6, 11, 6, 1, 1, 1, 4), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pdnAtmfM4TcProtoCurrOutDiscards.setStatus('current')
pdnAtmfM4TcProtoCurrLCDEvents = MibTableColumn((1, 3, 6, 1, 4, 1, 1795, 2, 24, 2, 6, 11, 6, 1, 1, 1, 5), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pdnAtmfM4TcProtoCurrLCDEvents.setStatus('current')
pdnAtmfM4TcProtoCurrUnknownCells = MibTableColumn((1, 3, 6, 1, 4, 1, 1795, 2, 24, 2, 6, 11, 6, 1, 1, 1, 6), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pdnAtmfM4TcProtoCurrUnknownCells.setStatus('current')
pdnAtmfM4TcProtoCurrCorrectedHEC = MibTableColumn((1, 3, 6, 1, 4, 1, 1795, 2, 24, 2, 6, 11, 6, 1, 1, 1, 7), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pdnAtmfM4TcProtoCurrCorrectedHEC.setStatus('current')
pdnAtmfM4TcProtoHistExtTable = MibTable((1, 3, 6, 1, 4, 1, 1795, 2, 24, 2, 6, 11, 6, 1, 2), )
if mibBuilder.loadTexts: pdnAtmfM4TcProtoHistExtTable.setStatus('current')
pdnAtmfM4TcProtoHistExtEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1795, 2, 24, 2, 6, 11, 6, 1, 2, 1), )
atmfM4TcProtoHistEntry.registerAugmentions(("PDN-ATMM4EXT-MIB", "pdnAtmfM4TcProtoHistExtEntry"))
pdnAtmfM4TcProtoHistExtEntry.setIndexNames(*atmfM4TcProtoHistEntry.getIndexNames())
if mibBuilder.loadTexts: pdnAtmfM4TcProtoHistExtEntry.setStatus('current')
pdnAtmfM4TcProtoHistCellIns = MibTableColumn((1, 3, 6, 1, 4, 1, 1795, 2, 24, 2, 6, 11, 6, 1, 2, 1, 1), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pdnAtmfM4TcProtoHistCellIns.setStatus('current')
pdnAtmfM4TcProtoHistCellOuts = MibTableColumn((1, 3, 6, 1, 4, 1, 1795, 2, 24, 2, 6, 11, 6, 1, 2, 1, 2), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pdnAtmfM4TcProtoHistCellOuts.setStatus('current')
pdnAtmfM4TcProtoHistInDiscards = MibTableColumn((1, 3, 6, 1, 4, 1, 1795, 2, 24, 2, 6, 11, 6, 1, 2, 1, 3), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pdnAtmfM4TcProtoHistInDiscards.setStatus('current')
pdnAtmfM4TcProtoHistOutDiscards = MibTableColumn((1, 3, 6, 1, 4, 1, 1795, 2, 24, 2, 6, 11, 6, 1, 2, 1, 4), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pdnAtmfM4TcProtoHistOutDiscards.setStatus('current')
pdnAtmfM4TcProtoHistLCDEvents = MibTableColumn((1, 3, 6, 1, 4, 1, 1795, 2, 24, 2, 6, 11, 6, 1, 2, 1, 5), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pdnAtmfM4TcProtoHistLCDEvents.setStatus('current')
pdnAtmfM4TcProtoHistUnknownCells = MibTableColumn((1, 3, 6, 1, 4, 1, 1795, 2, 24, 2, 6, 11, 6, 1, 2, 1, 6), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pdnAtmfM4TcProtoHistUnknownCells.setStatus('current')
pdnAtmfM4TcProtoHistCorrectedHEC = MibTableColumn((1, 3, 6, 1, 4, 1, 1795, 2, 24, 2, 6, 11, 6, 1, 2, 1, 7), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pdnAtmfM4TcProtoHistCorrectedHEC.setStatus('current')
pdnAtmfM4TestTypes = MibIdentifier((1, 3, 6, 1, 4, 1, 1795, 2, 24, 2, 6, 11, 6, 1, 3))
pdnAtmfM4TestOAMLoopbackSegMultiCell = ObjectIdentity((1, 3, 6, 1, 4, 1, 1795, 2, 24, 2, 6, 11, 6, 1, 3, 1))
if mibBuilder.loadTexts: pdnAtmfM4TestOAMLoopbackSegMultiCell.setStatus('current')
pdnAtmfM4TestOAMLoopbackE2EMultiCell = ObjectIdentity((1, 3, 6, 1, 4, 1, 1795, 2, 24, 2, 6, 11, 6, 1, 3, 2))
if mibBuilder.loadTexts: pdnAtmfM4TestOAMLoopbackE2EMultiCell.setStatus('current')
pdnAtmfM4VcLoopbackTestTable = MibTable((1, 3, 6, 1, 4, 1, 1795, 2, 24, 2, 6, 11, 6, 1, 4), )
if mibBuilder.loadTexts: pdnAtmfM4VcLoopbackTestTable.setStatus('current')
pdnAtmfM4VcLoopbackTestEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1795, 2, 24, 2, 6, 11, 6, 1, 4, 1), )
atmfM4VcTestEntry.registerAugmentions(("PDN-ATMM4EXT-MIB", "pdnAtmfM4VcLoopbackTestEntry"))
pdnAtmfM4VcLoopbackTestEntry.setIndexNames(*atmfM4VcTestEntry.getIndexNames())
if mibBuilder.loadTexts: pdnAtmfM4VcLoopbackTestEntry.setStatus('current')
pdnAtmfM4VcLoopbackTestElpsTime = MibTableColumn((1, 3, 6, 1, 4, 1, 1795, 2, 24, 2, 6, 11, 6, 1, 4, 1, 1), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pdnAtmfM4VcLoopbackTestElpsTime.setStatus('current')
pdnAtmfM4VcLoopbackTestCellsSent = MibTableColumn((1, 3, 6, 1, 4, 1, 1795, 2, 24, 2, 6, 11, 6, 1, 4, 1, 2), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pdnAtmfM4VcLoopbackTestCellsSent.setStatus('current')
pdnAtmfM4VcLoopbackTestCellsRcvd = MibTableColumn((1, 3, 6, 1, 4, 1, 1795, 2, 24, 2, 6, 11, 6, 1, 4, 1, 3), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pdnAtmfM4VcLoopbackTestCellsRcvd.setStatus('current')
pdnAtmfM4VcLoopbackTestMinRTDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 1795, 2, 24, 2, 6, 11, 6, 1, 4, 1, 4), Gauge32()).setUnits('milliseconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: pdnAtmfM4VcLoopbackTestMinRTDelay.setStatus('current')
pdnAtmfM4VcLoopbackTestMaxRTDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 1795, 2, 24, 2, 6, 11, 6, 1, 4, 1, 5), Gauge32()).setUnits('milliseconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: pdnAtmfM4VcLoopbackTestMaxRTDelay.setStatus('current')
pdnAtmfM4VcLoopbackTestAvgRTDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 1795, 2, 24, 2, 6, 11, 6, 1, 4, 1, 6), Gauge32()).setUnits('milliseconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: pdnAtmfM4VcLoopbackTestAvgRTDelay.setStatus('current')
pdnAtmfM4VcLoopbackTestErrorCode = MibTableColumn((1, 3, 6, 1, 4, 1, 1795, 2, 24, 2, 6, 11, 6, 1, 4, 1, 7), PdnAtmfM4TestErrorCode()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pdnAtmfM4VcLoopbackTestErrorCode.setStatus('current')
pdnAtmfM4Vc1CellLoopTable = MibTable((1, 3, 6, 1, 4, 1, 1795, 2, 24, 2, 6, 11, 6, 1, 5), )
if mibBuilder.loadTexts: pdnAtmfM4Vc1CellLoopTable.setStatus('current')
pdnAtmfM4Vc1CellLoopEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1795, 2, 24, 2, 6, 11, 6, 1, 5, 1), )
atmfM4VcTestEntry.registerAugmentions(("PDN-ATMM4EXT-MIB", "pdnAtmfM4Vc1CellLoopEntry"))
pdnAtmfM4Vc1CellLoopEntry.setIndexNames(*atmfM4VcTestEntry.getIndexNames())
if mibBuilder.loadTexts: pdnAtmfM4Vc1CellLoopEntry.setStatus('current')
pdnAtmfM4Vc1CellLoopRTDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 1795, 2, 24, 2, 6, 11, 6, 1, 5, 1, 1), Gauge32()).setUnits('milliseconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: pdnAtmfM4Vc1CellLoopRTDelay.setStatus('current')
pdnAtmfM4Vc1CellLoopReportedLocation = MibTableColumn((1, 3, 6, 1, 4, 1, 1795, 2, 24, 2, 6, 11, 6, 1, 5, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(16, 16)).setFixedLength(16)).setMaxAccess("readonly")
if mibBuilder.loadTexts: pdnAtmfM4Vc1CellLoopReportedLocation.setStatus('current')
pdnAtmfM4Vc1CellLoopErrorCode = MibTableColumn((1, 3, 6, 1, 4, 1, 1795, 2, 24, 2, 6, 11, 6, 1, 5, 1, 3), PdnAtmfM4TestErrorCode()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pdnAtmfM4Vc1CellLoopErrorCode.setStatus('current')
pdnAtmfM4LoopbackLocationTable = MibTable((1, 3, 6, 1, 4, 1, 1795, 2, 24, 2, 6, 11, 6, 1, 6), )
if mibBuilder.loadTexts: pdnAtmfM4LoopbackLocationTable.setStatus('current')
pdnAtmfM4LoopbackLocationEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1795, 2, 24, 2, 6, 11, 6, 1, 6, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: pdnAtmfM4LoopbackLocationEntry.setStatus('current')
pdnAtmfM4LoopbackLocationCode = MibTableColumn((1, 3, 6, 1, 4, 1, 1795, 2, 24, 2, 6, 11, 6, 1, 6, 1, 1), OctetString().subtype(subtypeSpec=ValueSizeConstraint(16, 16)).setFixedLength(16)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pdnAtmfM4LoopbackLocationCode.setStatus('current')
pdnAtmfM4VpLoopbackTestTable = MibTable((1, 3, 6, 1, 4, 1, 1795, 2, 24, 2, 6, 11, 6, 1, 7), )
if mibBuilder.loadTexts: pdnAtmfM4VpLoopbackTestTable.setStatus('current')
pdnAtmfM4VpLoopbackTestEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1795, 2, 24, 2, 6, 11, 6, 1, 7, 1), )
atmfM4VpTestEntry.registerAugmentions(("PDN-ATMM4EXT-MIB", "pdnAtmfM4VpLoopbackTestEntry"))
pdnAtmfM4VpLoopbackTestEntry.setIndexNames(*atmfM4VpTestEntry.getIndexNames())
if mibBuilder.loadTexts: pdnAtmfM4VpLoopbackTestEntry.setStatus('current')
pdnAtmfM4VpLoopbackTestElpsTime = MibTableColumn((1, 3, 6, 1, 4, 1, 1795, 2, 24, 2, 6, 11, 6, 1, 7, 1, 1), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pdnAtmfM4VpLoopbackTestElpsTime.setStatus('current')
pdnAtmfM4VpLoopbackTestCellsSent = MibTableColumn((1, 3, 6, 1, 4, 1, 1795, 2, 24, 2, 6, 11, 6, 1, 7, 1, 2), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pdnAtmfM4VpLoopbackTestCellsSent.setStatus('current')
pdnAtmfM4VpLoopbackTestCellsRcvd = MibTableColumn((1, 3, 6, 1, 4, 1, 1795, 2, 24, 2, 6, 11, 6, 1, 7, 1, 3), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pdnAtmfM4VpLoopbackTestCellsRcvd.setStatus('current')
pdnAtmfM4VpLoopbackTestMinRTDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 1795, 2, 24, 2, 6, 11, 6, 1, 7, 1, 4), Gauge32()).setUnits('milliseconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: pdnAtmfM4VpLoopbackTestMinRTDelay.setStatus('current')
pdnAtmfM4VpLoopbackTestMaxRTDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 1795, 2, 24, 2, 6, 11, 6, 1, 7, 1, 5), Gauge32()).setUnits('milliseconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: pdnAtmfM4VpLoopbackTestMaxRTDelay.setStatus('current')
pdnAtmfM4VpLoopbackTestAvgRTDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 1795, 2, 24, 2, 6, 11, 6, 1, 7, 1, 6), Gauge32()).setUnits('milliseconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: pdnAtmfM4VpLoopbackTestAvgRTDelay.setStatus('current')
pdnAtmfM4VpLoopbackTestErrorCode = MibTableColumn((1, 3, 6, 1, 4, 1, 1795, 2, 24, 2, 6, 11, 6, 1, 7, 1, 7), PdnAtmfM4TestErrorCode()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pdnAtmfM4VpLoopbackTestErrorCode.setStatus('current')
pdnAtmfM4Groups = MibIdentifier((1, 3, 6, 1, 4, 1, 1795, 2, 24, 2, 6, 11, 6, 3, 1))
pdnAtmfM4Compliances = MibIdentifier((1, 3, 6, 1, 4, 1, 1795, 2, 24, 2, 6, 11, 6, 3, 2))
pdnAtmfM4Compliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 1795, 2, 24, 2, 6, 11, 6, 3, 2, 1)).setObjects(("PDN-ATMM4EXT-MIB", "pdnAtmfM4LoopbackLocationGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    pdnAtmfM4Compliance = pdnAtmfM4Compliance.setStatus('current')
pdnAtmfM4TcCurrGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 1795, 2, 24, 2, 6, 11, 6, 3, 1, 1)).setObjects(("PDN-ATMM4EXT-MIB", "pdnAtmfM4TcProtoCurrCellIns"), ("PDN-ATMM4EXT-MIB", "pdnAtmfM4TcProtoCurrCellOuts"), ("PDN-ATMM4EXT-MIB", "pdnAtmfM4TcProtoCurrInDiscards"), ("PDN-ATMM4EXT-MIB", "pdnAtmfM4TcProtoCurrOutDiscards"), ("PDN-ATMM4EXT-MIB", "pdnAtmfM4TcProtoCurrLCDEvents"), ("PDN-ATMM4EXT-MIB", "pdnAtmfM4TcProtoCurrUnknownCells"), ("PDN-ATMM4EXT-MIB", "pdnAtmfM4TcProtoCurrCorrectedHEC"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    pdnAtmfM4TcCurrGroup = pdnAtmfM4TcCurrGroup.setStatus('current')
pdnAtmfM4TcHistGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 1795, 2, 24, 2, 6, 11, 6, 3, 1, 2)).setObjects(("PDN-ATMM4EXT-MIB", "pdnAtmfM4TcProtoHistCellIns"), ("PDN-ATMM4EXT-MIB", "pdnAtmfM4TcProtoHistCellOuts"), ("PDN-ATMM4EXT-MIB", "pdnAtmfM4TcProtoHistInDiscards"), ("PDN-ATMM4EXT-MIB", "pdnAtmfM4TcProtoHistOutDiscards"), ("PDN-ATMM4EXT-MIB", "pdnAtmfM4TcProtoHistLCDEvents"), ("PDN-ATMM4EXT-MIB", "pdnAtmfM4TcProtoHistUnknownCells"), ("PDN-ATMM4EXT-MIB", "pdnAtmfM4TcProtoHistCorrectedHEC"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    pdnAtmfM4TcHistGroup = pdnAtmfM4TcHistGroup.setStatus('current')
pdnAtmfM4VcLoopbackTestGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 1795, 2, 24, 2, 6, 11, 6, 3, 1, 3)).setObjects(("PDN-ATMM4EXT-MIB", "pdnAtmfM4VcLoopbackTestElpsTime"), ("PDN-ATMM4EXT-MIB", "pdnAtmfM4VcLoopbackTestCellsSent"), ("PDN-ATMM4EXT-MIB", "pdnAtmfM4VcLoopbackTestCellsRcvd"), ("PDN-ATMM4EXT-MIB", "pdnAtmfM4VcLoopbackTestMinRTDelay"), ("PDN-ATMM4EXT-MIB", "pdnAtmfM4VcLoopbackTestMaxRTDelay"), ("PDN-ATMM4EXT-MIB", "pdnAtmfM4VcLoopbackTestAvgRTDelay"), ("PDN-ATMM4EXT-MIB", "pdnAtmfM4VcLoopbackTestErrorCode"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    pdnAtmfM4VcLoopbackTestGroup = pdnAtmfM4VcLoopbackTestGroup.setStatus('current')
pdnAtmfM4Vc1CellLoopGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 1795, 2, 24, 2, 6, 11, 6, 3, 1, 4)).setObjects(("PDN-ATMM4EXT-MIB", "pdnAtmfM4Vc1CellLoopRTDelay"), ("PDN-ATMM4EXT-MIB", "pdnAtmfM4Vc1CellLoopReportedLocation"), ("PDN-ATMM4EXT-MIB", "pdnAtmfM4Vc1CellLoopErrorCode"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    pdnAtmfM4Vc1CellLoopGroup = pdnAtmfM4Vc1CellLoopGroup.setStatus('current')
pdnAtmfM4LoopbackLocationGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 1795, 2, 24, 2, 6, 11, 6, 3, 1, 5)).setObjects(("PDN-ATMM4EXT-MIB", "pdnAtmfM4LoopbackLocationCode"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    pdnAtmfM4LoopbackLocationGroup = pdnAtmfM4LoopbackLocationGroup.setStatus('current')
pdnAtmfM4VpLoopbackTestGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 1795, 2, 24, 2, 6, 11, 6, 3, 1, 6)).setObjects(("PDN-ATMM4EXT-MIB", "pdnAtmfM4VpLoopbackTestElpsTime"), ("PDN-ATMM4EXT-MIB", "pdnAtmfM4VpLoopbackTestCellsSent"), ("PDN-ATMM4EXT-MIB", "pdnAtmfM4VpLoopbackTestCellsRcvd"), ("PDN-ATMM4EXT-MIB", "pdnAtmfM4VpLoopbackTestMinRTDelay"), ("PDN-ATMM4EXT-MIB", "pdnAtmfM4VpLoopbackTestMaxRTDelay"), ("PDN-ATMM4EXT-MIB", "pdnAtmfM4VpLoopbackTestAvgRTDelay"), ("PDN-ATMM4EXT-MIB", "pdnAtmfM4VpLoopbackTestErrorCode"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    pdnAtmfM4VpLoopbackTestGroup = pdnAtmfM4VpLoopbackTestGroup.setStatus('current')
mibBuilder.exportSymbols("PDN-ATMM4EXT-MIB", pdnAtmfM4Vc1CellLoopReportedLocation=pdnAtmfM4Vc1CellLoopReportedLocation, pdnAtmfM4Vc1CellLoopErrorCode=pdnAtmfM4Vc1CellLoopErrorCode, pdnAtmfM4VcLoopbackTestMinRTDelay=pdnAtmfM4VcLoopbackTestMinRTDelay, pdnAtmfM4VpLoopbackTestMaxRTDelay=pdnAtmfM4VpLoopbackTestMaxRTDelay, pdnAtmfM4VpLoopbackTestAvgRTDelay=pdnAtmfM4VpLoopbackTestAvgRTDelay, pdnAtmfM4TcProtoHistCellIns=pdnAtmfM4TcProtoHistCellIns, pdnAtmfM4TcProtoCurrInDiscards=pdnAtmfM4TcProtoCurrInDiscards, pdnAtmfM4TestOAMLoopbackE2EMultiCell=pdnAtmfM4TestOAMLoopbackE2EMultiCell, pdnAtmfM4VcLoopbackTestAvgRTDelay=pdnAtmfM4VcLoopbackTestAvgRTDelay, pdnAtmfM4TcProtoCurrExtEntry=pdnAtmfM4TcProtoCurrExtEntry, pdnAtmfM4TcProtoHistExtTable=pdnAtmfM4TcProtoHistExtTable, pdnAtmfM4LoopbackLocationCode=pdnAtmfM4LoopbackLocationCode, pdnAtmfM4TcProtoHistOutDiscards=pdnAtmfM4TcProtoHistOutDiscards, pdnAtmfM4VpLoopbackTestCellsSent=pdnAtmfM4VpLoopbackTestCellsSent, pdnAtmfM4Compliance=pdnAtmfM4Compliance, PYSNMP_MODULE_ID=pdnAtmfM4ExtMIB, pdnAtmfM4TcProtoCurrCellOuts=pdnAtmfM4TcProtoCurrCellOuts, pdnAtmfM4TcProtoHistCellOuts=pdnAtmfM4TcProtoHistCellOuts, pdnAtmfM4TcProtoCurrOutDiscards=pdnAtmfM4TcProtoCurrOutDiscards, pdnAtmfM4VcLoopbackTestMaxRTDelay=pdnAtmfM4VcLoopbackTestMaxRTDelay, pdnAtmfM4VcLoopbackTestErrorCode=pdnAtmfM4VcLoopbackTestErrorCode, pdnAtmfM4VpLoopbackTestMinRTDelay=pdnAtmfM4VpLoopbackTestMinRTDelay, pdnAtmfM4Compliances=pdnAtmfM4Compliances, pdnAtmfM4LoopbackLocationGroup=pdnAtmfM4LoopbackLocationGroup, pdnAtmfM4ExtConformance=pdnAtmfM4ExtConformance, pdnAtmfM4TcProtoCurrCellIns=pdnAtmfM4TcProtoCurrCellIns, pdnAtmfM4VcLoopbackTestCellsRcvd=pdnAtmfM4VcLoopbackTestCellsRcvd, pdnAtmfM4ExtObjects=pdnAtmfM4ExtObjects, pdnAtmfM4Vc1CellLoopRTDelay=pdnAtmfM4Vc1CellLoopRTDelay, pdnAtmfM4ExtMIB=pdnAtmfM4ExtMIB, pdnAtmfM4ExtTrapPrefix=pdnAtmfM4ExtTrapPrefix, PdnAtmfM4TestErrorCode=PdnAtmfM4TestErrorCode, pdnAtmfM4TcCurrGroup=pdnAtmfM4TcCurrGroup, pdnAtmfM4VpLoopbackTestElpsTime=pdnAtmfM4VpLoopbackTestElpsTime, pdnAtmfM4VpLoopbackTestErrorCode=pdnAtmfM4VpLoopbackTestErrorCode, pdnAtmfM4VcLoopbackTestEntry=pdnAtmfM4VcLoopbackTestEntry, pdnAtmfM4TcProtoHistCorrectedHEC=pdnAtmfM4TcProtoHistCorrectedHEC, pdnAtmfM4Vc1CellLoopGroup=pdnAtmfM4Vc1CellLoopGroup, pdnAtmfM4TcProtoCurrUnknownCells=pdnAtmfM4TcProtoCurrUnknownCells, pdnAtmfM4TcProtoCurrCorrectedHEC=pdnAtmfM4TcProtoCurrCorrectedHEC, pdnAtmfM4TcProtoHistInDiscards=pdnAtmfM4TcProtoHistInDiscards, pdnAtmfM4TcProtoCurrExtTable=pdnAtmfM4TcProtoCurrExtTable, pdnAtmfM4TcProtoHistLCDEvents=pdnAtmfM4TcProtoHistLCDEvents, pdnAtmfM4VcLoopbackTestCellsSent=pdnAtmfM4VcLoopbackTestCellsSent, pdnAtmfM4LoopbackLocationTable=pdnAtmfM4LoopbackLocationTable, pdnAtmfM4VpLoopbackTestEntry=pdnAtmfM4VpLoopbackTestEntry, pdnAtmfM4VcLoopbackTestGroup=pdnAtmfM4VcLoopbackTestGroup, pdnAtmfM4Vc1CellLoopTable=pdnAtmfM4Vc1CellLoopTable, pdnAtmfM4Vc1CellLoopEntry=pdnAtmfM4Vc1CellLoopEntry, pdnAtmfM4VpLoopbackTestTable=pdnAtmfM4VpLoopbackTestTable, pdnAtmfM4TcProtoHistUnknownCells=pdnAtmfM4TcProtoHistUnknownCells, pdnAtmfM4VpLoopbackTestCellsRcvd=pdnAtmfM4VpLoopbackTestCellsRcvd, pdnAtmfM4VpLoopbackTestGroup=pdnAtmfM4VpLoopbackTestGroup, pdnAtmfM4TestTypes=pdnAtmfM4TestTypes, pdnAtmfM4VcLoopbackTestTable=pdnAtmfM4VcLoopbackTestTable, pdnAtmfM4Groups=pdnAtmfM4Groups, pdnAtmfM4VcLoopbackTestElpsTime=pdnAtmfM4VcLoopbackTestElpsTime, pdnAtmfM4TcProtoCurrLCDEvents=pdnAtmfM4TcProtoCurrLCDEvents, pdnAtmfM4LoopbackLocationEntry=pdnAtmfM4LoopbackLocationEntry, pdnAtmfM4TcProtoHistExtEntry=pdnAtmfM4TcProtoHistExtEntry, pdnAtmfM4TestOAMLoopbackSegMultiCell=pdnAtmfM4TestOAMLoopbackSegMultiCell, pdnAtmfM4TcHistGroup=pdnAtmfM4TcHistGroup, pdnAtmfM4ExtTraps=pdnAtmfM4ExtTraps)
