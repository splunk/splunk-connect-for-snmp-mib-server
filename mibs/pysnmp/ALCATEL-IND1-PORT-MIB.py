#
# PySNMP MIB module ALCATEL-IND1-PORT-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/ALCATEL-IND1-PORT-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 17:03:23 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
softentIND1Port, = mibBuilder.importSymbols("ALCATEL-IND1-BASE", "softentIND1Port")
Integer, ObjectIdentifier, OctetString = mibBuilder.importSymbols("ASN1", "Integer", "ObjectIdentifier", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsIntersection, ConstraintsUnion, ValueSizeConstraint, ValueRangeConstraint, SingleValueConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsIntersection", "ConstraintsUnion", "ValueSizeConstraint", "ValueRangeConstraint", "SingleValueConstraint")
InterfaceIndex, ifEntry, ifInErrors, ifIndex, ifOutErrors = mibBuilder.importSymbols("IF-MIB", "InterfaceIndex", "ifEntry", "ifInErrors", "ifIndex", "ifOutErrors")
SnmpAdminString, = mibBuilder.importSymbols("SNMP-FRAMEWORK-MIB", "SnmpAdminString")
ModuleCompliance, ObjectGroup, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "ObjectGroup", "NotificationGroup")
iso, Unsigned32, MibScalar, MibTable, MibTableRow, MibTableColumn, ModuleIdentity, Counter32, Integer32, Gauge32, Bits, IpAddress, ObjectIdentity, MibIdentifier, Counter64, NotificationType, TimeTicks = mibBuilder.importSymbols("SNMPv2-SMI", "iso", "Unsigned32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "ModuleIdentity", "Counter32", "Integer32", "Gauge32", "Bits", "IpAddress", "ObjectIdentity", "MibIdentifier", "Counter64", "NotificationType", "TimeTicks")
DisplayString, TextualConvention, RowStatus, DateAndTime, MacAddress = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention", "RowStatus", "DateAndTime", "MacAddress")
alcatelIND1PortMIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 5, 1))
alcatelIND1PortMIB.setRevisions(('2013-11-22 00:00', '2010-05-13 00:00', '2007-04-03 00:00',))
if mibBuilder.loadTexts: alcatelIND1PortMIB.setLastUpdated('201311220000Z')
if mibBuilder.loadTexts: alcatelIND1PortMIB.setOrganization('Alcatel-Lucent')
alcatelIND1PortNotifications = MibIdentifier((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 5, 1, 0))
alcatelIND1PortMIBObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 5, 1, 1))
alcatelIND1PortMIBConformance = MibIdentifier((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 5, 1, 2))
esmConfTrap = MibIdentifier((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 5, 1, 1, 1))
physicalPort = MibIdentifier((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 5, 1, 1, 2))
ddmConfiguration = MibIdentifier((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 5, 1, 1, 4))
portViolations = MibIdentifier((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 5, 1, 1, 5))
csmConfTrap = MibIdentifier((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 5, 1, 1, 6))
esmDrvTrapDrops = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 5, 1, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: esmDrvTrapDrops.setStatus('current')
alaDyingGaspChassisId = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 5, 1, 1, 6, 1), Integer32()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: alaDyingGaspChassisId.setStatus('current')
alaDyingGaspPowerSupplyType = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 5, 1, 1, 6, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("primary", 1), ("backup", 2), ("saps", 3)))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: alaDyingGaspPowerSupplyType.setStatus('current')
alaDyingGaspTime = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 5, 1, 1, 6, 3), DateAndTime()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: alaDyingGaspTime.setStatus('current')
esmConfTable = MibTable((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 5, 1, 1, 2, 1), )
if mibBuilder.loadTexts: esmConfTable.setStatus('current')
esmConfEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 5, 1, 1, 2, 1, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: esmConfEntry.setStatus('current')
esmPortSlot = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 5, 1, 1, 2, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: esmPortSlot.setStatus('current')
esmPortIF = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 5, 1, 1, 2, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: esmPortIF.setStatus('current')
esmPortAutoSpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 5, 1, 1, 2, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("speed100", 1), ("speed10", 2), ("speedAuto", 3), ("unknown", 4), ("speed1000", 5), ("speed10000", 6), ("speed40000", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: esmPortAutoSpeed.setStatus('current')
esmPortAutoDuplexMode = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 5, 1, 1, 2, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("fullDuplex", 1), ("halfDuplex", 2), ("autoDuplex", 3), ("unknown", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: esmPortAutoDuplexMode.setStatus('current')
esmPortCfgSpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 5, 1, 1, 2, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 5, 6, 7, 8, 9))).clone(namedValues=NamedValues(("speed100", 1), ("speed10", 2), ("speedAuto", 3), ("speed1000", 5), ("speed10000", 6), ("speed40000", 7), ("speedMax100", 8), ("speedMax1000", 9)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: esmPortCfgSpeed.setStatus('current')
esmPortCfgDuplexMode = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 5, 1, 1, 2, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("fullDuplex", 1), ("halfDuplex", 2), ("autoDuplex", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: esmPortCfgDuplexMode.setStatus('current')
esmPortAdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 5, 1, 1, 2, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: esmPortAdminStatus.setStatus('current')
esmPortLinkUpDownTrapEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 5, 1, 1, 2, 1, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: esmPortLinkUpDownTrapEnable.setStatus('current')
esmPortCfgMaxFrameSize = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 5, 1, 1, 2, 1, 1, 11), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: esmPortCfgMaxFrameSize.setStatus('current')
esmPortAlias = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 5, 1, 1, 2, 1, 1, 12), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: esmPortAlias.setStatus('current')
esmPortCfgPause = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 5, 1, 1, 2, 1, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("disabled", 1), ("enabledXmit", 2), ("enabledRcv", 3), ("enabledXmitAndRcv", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: esmPortCfgPause.setStatus('current')
esmPortCfgAutoNegotiation = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 5, 1, 1, 2, 1, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: esmPortCfgAutoNegotiation.setStatus('current')
esmPortCfgCrossover = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 5, 1, 1, 2, 1, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("mdi", 1), ("mdix", 2), ("auto", 3), ("notapplicable", 4))).clone('auto')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: esmPortCfgCrossover.setStatus('current')
esmPortCfgHybridActiveType = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 5, 1, 1, 2, 1, 1, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("notapplicable", 0), ("fiber", 1), ("copper", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: esmPortCfgHybridActiveType.setStatus('current')
esmPortCfgHybridMode = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 5, 1, 1, 2, 1, 1, 19), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4))).clone(namedValues=NamedValues(("notapplicable", 0), ("preferredCopper", 1), ("forcedCopper", 2), ("preferredFiber", 3), ("forcedFiber", 4))).clone('preferredFiber')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: esmPortCfgHybridMode.setStatus('current')
esmPortOperationalHybridType = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 5, 1, 1, 2, 1, 1, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("none", 0), ("fiber", 1), ("copper", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: esmPortOperationalHybridType.setStatus('current')
esmPortBcastRateLimitEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 5, 1, 1, 2, 1, 1, 21), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('enable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: esmPortBcastRateLimitEnable.setStatus('current')
esmPortBcastRateLimitType = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 5, 1, 1, 2, 1, 1, 22), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("mbps", 1), ("percentage", 2), ("pps", 3))).clone('mbps')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: esmPortBcastRateLimitType.setStatus('current')
esmPortBcastRateLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 5, 1, 1, 2, 1, 1, 23), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: esmPortBcastRateLimit.setStatus('current')
esmPortMcastRateLimitEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 5, 1, 1, 2, 1, 1, 24), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('enable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: esmPortMcastRateLimitEnable.setStatus('current')
esmPortMcastRateLimitType = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 5, 1, 1, 2, 1, 1, 25), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("mbps", 1), ("percentage", 2), ("pps", 3))).clone('mbps')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: esmPortMcastRateLimitType.setStatus('current')
esmPortMcastRateLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 5, 1, 1, 2, 1, 1, 26), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: esmPortMcastRateLimit.setStatus('current')
esmPortUucastRateLimitEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 5, 1, 1, 2, 1, 1, 27), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('enable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: esmPortUucastRateLimitEnable.setStatus('current')
esmPortUucastRateLimitType = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 5, 1, 1, 2, 1, 1, 28), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("mbps", 1), ("percentage", 2), ("pps", 3))).clone('mbps')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: esmPortUucastRateLimitType.setStatus('current')
esmPortUucastRateLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 5, 1, 1, 2, 1, 1, 29), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: esmPortUucastRateLimit.setStatus('current')
esmPortIngressRateLimitEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 5, 1, 1, 2, 1, 1, 30), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('enable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: esmPortIngressRateLimitEnable.setStatus('current')
esmPortIngressRateLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 5, 1, 1, 2, 1, 1, 31), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: esmPortIngressRateLimit.setStatus('current')
esmPortIngressRateLimitBurst = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 5, 1, 1, 2, 1, 1, 32), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: esmPortIngressRateLimitBurst.setStatus('current')
esmPortEPPEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 5, 1, 1, 2, 1, 1, 33), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: esmPortEPPEnable.setStatus('current')
esmPortEEEEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 5, 1, 1, 2, 1, 1, 34), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: esmPortEEEEnable.setStatus('current')
esmPortIsFiberChannelCapable = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 5, 1, 1, 2, 1, 1, 35), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2))).clone('no')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: esmPortIsFiberChannelCapable.setStatus('current')
alcetherStatsTable = MibTable((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 5, 1, 1, 2, 2), )
if mibBuilder.loadTexts: alcetherStatsTable.setStatus('current')
alcetherStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 5, 1, 1, 2, 2, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: alcetherStatsEntry.setStatus('current')
alcetherClearStats = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 5, 1, 1, 2, 2, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("default", 0), ("reset", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: alcetherClearStats.setStatus('current')
alcetherLastClearStats = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 5, 1, 1, 2, 2, 1, 2), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alcetherLastClearStats.setStatus('current')
alcetherStatsCRCAlignErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 5, 1, 1, 2, 2, 1, 3), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alcetherStatsCRCAlignErrors.setStatus('current')
alcetherStatsRxUndersizePkts = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 5, 1, 1, 2, 2, 1, 4), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alcetherStatsRxUndersizePkts.setStatus('current')
alcetherStatsTxUndersizePkts = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 5, 1, 1, 2, 2, 1, 5), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alcetherStatsTxUndersizePkts.setStatus('current')
alcetherStatsTxOversizePkts = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 5, 1, 1, 2, 2, 1, 6), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alcetherStatsTxOversizePkts.setStatus('current')
alcetherStatsRxJabbers = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 5, 1, 1, 2, 2, 1, 7), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alcetherStatsRxJabbers.setStatus('current')
alcetherStatsRxCollisions = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 5, 1, 1, 2, 2, 1, 8), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alcetherStatsRxCollisions.setStatus('current')
alcetherStatsTxCollisions = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 5, 1, 1, 2, 2, 1, 9), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alcetherStatsTxCollisions.setStatus('current')
alcetherStatsPkts64Octets = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 5, 1, 1, 2, 2, 1, 10), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alcetherStatsPkts64Octets.setStatus('current')
alcetherStatsPkts65to127Octets = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 5, 1, 1, 2, 2, 1, 11), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alcetherStatsPkts65to127Octets.setStatus('current')
alcetherStatsPkts128to255Octets = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 5, 1, 1, 2, 2, 1, 12), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alcetherStatsPkts128to255Octets.setStatus('current')
alcetherStatsPkts256to511Octets = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 5, 1, 1, 2, 2, 1, 13), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alcetherStatsPkts256to511Octets.setStatus('current')
alcetherStatsPkts512to1023Octets = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 5, 1, 1, 2, 2, 1, 14), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alcetherStatsPkts512to1023Octets.setStatus('current')
alcetherStatsPkts1024to1518Octets = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 5, 1, 1, 2, 2, 1, 15), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alcetherStatsPkts1024to1518Octets.setStatus('current')
gigaEtherStatsPkts1519to4095Octets = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 5, 1, 1, 2, 2, 1, 16), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gigaEtherStatsPkts1519to4095Octets.setStatus('current')
gigaEtherStatsPkts4096to9215Octets = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 5, 1, 1, 2, 2, 1, 17), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gigaEtherStatsPkts4096to9215Octets.setStatus('current')
alcetherStatsPkts1519to2047Octets = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 5, 1, 1, 2, 2, 1, 18), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alcetherStatsPkts1519to2047Octets.setStatus('current')
alcetherStatsPkts2048to4095Octets = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 5, 1, 1, 2, 2, 1, 19), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alcetherStatsPkts2048to4095Octets.setStatus('current')
alcetherStatsPkts4096Octets = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 5, 1, 1, 2, 2, 1, 20), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alcetherStatsPkts4096Octets.setStatus('current')
alcetherStatsRxGiantPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 5, 1, 1, 2, 2, 1, 21), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alcetherStatsRxGiantPkts.setStatus('current')
alcetherStatsRxDribbleNibblePkts = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 5, 1, 1, 2, 2, 1, 22), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alcetherStatsRxDribbleNibblePkts.setStatus('current')
alcetherStatsRxLongEventPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 5, 1, 1, 2, 2, 1, 23), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alcetherStatsRxLongEventPkts.setStatus('current')
alcetherStatsRxVlanTagPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 5, 1, 1, 2, 2, 1, 24), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alcetherStatsRxVlanTagPkts.setStatus('current')
alcetherStatsRxControlPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 5, 1, 1, 2, 2, 1, 25), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alcetherStatsRxControlPkts.setStatus('current')
alcetherStatsRxLenChkErrPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 5, 1, 1, 2, 2, 1, 26), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alcetherStatsRxLenChkErrPkts.setStatus('current')
alcetherStatsRxCodeErrPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 5, 1, 1, 2, 2, 1, 27), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alcetherStatsRxCodeErrPkts.setStatus('current')
alcetherStatsRxDvEventPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 5, 1, 1, 2, 2, 1, 28), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alcetherStatsRxDvEventPkts.setStatus('current')
alcetherStatsRxPrevPktDropped = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 5, 1, 1, 2, 2, 1, 29), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alcetherStatsRxPrevPktDropped.setStatus('current')
alcetherStatsTx64Octets = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 5, 1, 1, 2, 2, 1, 30), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alcetherStatsTx64Octets.setStatus('current')
alcetherStatsTx65to127Octets = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 5, 1, 1, 2, 2, 1, 31), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alcetherStatsTx65to127Octets.setStatus('current')
alcetherStatsTx128to255Octets = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 5, 1, 1, 2, 2, 1, 32), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alcetherStatsTx128to255Octets.setStatus('current')
alcetherStatsTx256to511Octets = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 5, 1, 1, 2, 2, 1, 33), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alcetherStatsTx256to511Octets.setStatus('current')
alcetherStatsTx512to1023Octets = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 5, 1, 1, 2, 2, 1, 34), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alcetherStatsTx512to1023Octets.setStatus('current')
alcetherStatsTx1024to1518Octets = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 5, 1, 1, 2, 2, 1, 35), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alcetherStatsTx1024to1518Octets.setStatus('current')
alcetherStatsTx1519to2047Octets = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 5, 1, 1, 2, 2, 1, 36), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alcetherStatsTx1519to2047Octets.setStatus('current')
alcetherStatsTx2048to4095Octets = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 5, 1, 1, 2, 2, 1, 37), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alcetherStatsTx2048to4095Octets.setStatus('current')
alcetherStatsTx4096Octets = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 5, 1, 1, 2, 2, 1, 38), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alcetherStatsTx4096Octets.setStatus('current')
alcetherStatsTxRetryCount = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 5, 1, 1, 2, 2, 1, 39), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alcetherStatsTxRetryCount.setStatus('current')
alcetherStatsTxVlanTagPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 5, 1, 1, 2, 2, 1, 40), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alcetherStatsTxVlanTagPkts.setStatus('current')
alcetherStatsTxControlPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 5, 1, 1, 2, 2, 1, 41), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alcetherStatsTxControlPkts.setStatus('current')
alcetherStatsTxLatePkts = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 5, 1, 1, 2, 2, 1, 42), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alcetherStatsTxLatePkts.setStatus('current')
alcetherStatsTxTotalBytesOnWire = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 5, 1, 1, 2, 2, 1, 43), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alcetherStatsTxTotalBytesOnWire.setStatus('current')
alcetherStatsTxLenChkErrPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 5, 1, 1, 2, 2, 1, 44), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alcetherStatsTxLenChkErrPkts.setStatus('current')
alcetherStatsTxExcDeferPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 5, 1, 1, 2, 2, 1, 45), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alcetherStatsTxExcDeferPkts.setStatus('current')
esmHybridConfTable = MibTable((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 5, 1, 1, 2, 3), )
if mibBuilder.loadTexts: esmHybridConfTable.setStatus('current')
esmHybridConfEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 5, 1, 1, 2, 3, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: esmHybridConfEntry.setStatus('current')
esmHybridPortCfgSpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 5, 1, 1, 2, 3, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 5, 6, 8, 9))).clone(namedValues=NamedValues(("speed100", 1), ("speed10", 2), ("speedAuto", 3), ("speed1000", 5), ("speed10000", 6), ("speedMax100", 8), ("speedMax1000", 9)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: esmHybridPortCfgSpeed.setStatus('current')
esmHybridPortCfgDuplexMode = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 5, 1, 1, 2, 3, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("fullDuplex", 1), ("halfDuplex", 2), ("autoDuplex", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: esmHybridPortCfgDuplexMode.setStatus('current')
esmHybridPortCfgAutoNegotiation = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 5, 1, 1, 2, 3, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: esmHybridPortCfgAutoNegotiation.setStatus('current')
esmHybridPortCfgCrossover = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 5, 1, 1, 2, 3, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("mdi", 1), ("mdix", 2), ("auto", 3))).clone('auto')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: esmHybridPortCfgCrossover.setStatus('current')
esmHybridPortCfgFlow = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 5, 1, 1, 2, 3, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("disable", 1), ("enabledXmit", 2), ("enabledRcv", 3), ("enabledXmitAndRcv", 4))).clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: esmHybridPortCfgFlow.setStatus('current')
esmHybridPortCfgInactiveType = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 5, 1, 1, 2, 3, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("fiber", 1), ("copper", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: esmHybridPortCfgInactiveType.setStatus('current')
ddmConfig = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 5, 1, 1, 4, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ddmConfig.setStatus('current')
ddmTrapConfig = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 5, 1, 1, 4, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ddmTrapConfig.setStatus('current')
ddmNotificationType = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 5, 1, 1, 4, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("clearViolation", 1), ("highAlarm", 2), ("highWarning", 3), ("lowWarning", 4), ("lowAlarm", 5)))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: ddmNotificationType.setStatus('current')
ddmInfoTable = MibTable((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 5, 1, 1, 2, 5), )
if mibBuilder.loadTexts: ddmInfoTable.setStatus('deprecated')
ddmInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 5, 1, 1, 2, 5, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: ddmInfoEntry.setStatus('current')
ddmTemperature = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 5, 1, 1, 2, 5, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(-200000, -200000), ValueRangeConstraint(-150000, 150000), ))).setUnits('thousandth of a degree celcius').setMaxAccess("readonly")
if mibBuilder.loadTexts: ddmTemperature.setStatus('current')
ddmTempLowWarning = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 5, 1, 1, 2, 5, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(-200000, -200000), ValueRangeConstraint(-150000, 150000), ))).setUnits('thousandth of a degree celcius').setMaxAccess("readonly")
if mibBuilder.loadTexts: ddmTempLowWarning.setStatus('current')
ddmTempLowAlarm = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 5, 1, 1, 2, 5, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(-200000, -200000), ValueRangeConstraint(-150000, 150000), ))).setUnits('thousandth of a degree celcius').setMaxAccess("readonly")
if mibBuilder.loadTexts: ddmTempLowAlarm.setStatus('current')
ddmTempHiWarning = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 5, 1, 1, 2, 5, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(-200000, -200000), ValueRangeConstraint(-150000, 150000), ))).setUnits('thousandth of a degree celcius').setMaxAccess("readonly")
if mibBuilder.loadTexts: ddmTempHiWarning.setStatus('current')
ddmTempHiAlarm = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 5, 1, 1, 2, 5, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(-200000, -200000), ValueRangeConstraint(-150000, 150000), ))).setUnits('thousandth of a degree celcius').setMaxAccess("readonly")
if mibBuilder.loadTexts: ddmTempHiAlarm.setStatus('current')
ddmSupplyVoltage = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 5, 1, 1, 2, 5, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(-200000, -200000), ValueRangeConstraint(0, 10000), ))).setUnits('thousandth of a volt').setMaxAccess("readonly")
if mibBuilder.loadTexts: ddmSupplyVoltage.setStatus('current')
ddmSupplyVoltageLowWarning = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 5, 1, 1, 2, 5, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(-200000, -200000), ValueRangeConstraint(0, 10000), ))).setUnits('thousandth of a volt').setMaxAccess("readonly")
if mibBuilder.loadTexts: ddmSupplyVoltageLowWarning.setStatus('current')
ddmSupplyVoltageLowAlarm = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 5, 1, 1, 2, 5, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(-200000, -200000), ValueRangeConstraint(0, 10000), ))).setUnits('thousandth of a volt').setMaxAccess("readonly")
if mibBuilder.loadTexts: ddmSupplyVoltageLowAlarm.setStatus('current')
ddmSupplyVoltageHiWarning = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 5, 1, 1, 2, 5, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(-200000, -200000), ValueRangeConstraint(0, 10000), ))).setUnits('thousandth of a volt').setMaxAccess("readonly")
if mibBuilder.loadTexts: ddmSupplyVoltageHiWarning.setStatus('current')
ddmSupplyVoltageHiAlarm = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 5, 1, 1, 2, 5, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(-200000, -200000), ValueRangeConstraint(0, 10000), ))).setUnits('thousandth of a volt').setMaxAccess("readonly")
if mibBuilder.loadTexts: ddmSupplyVoltageHiAlarm.setStatus('current')
ddmTxBiasCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 5, 1, 1, 2, 5, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(-200000, -200000), ValueRangeConstraint(0, 10000), ))).setUnits('thousandth of a milli-Ampere').setMaxAccess("readonly")
if mibBuilder.loadTexts: ddmTxBiasCurrent.setStatus('current')
ddmTxBiasCurrentLowWarning = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 5, 1, 1, 2, 5, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(-200000, -200000), ValueRangeConstraint(0, 10000), ))).setUnits('thousandth of a milli-Ampere').setMaxAccess("readonly")
if mibBuilder.loadTexts: ddmTxBiasCurrentLowWarning.setStatus('current')
ddmTxBiasCurrentLowAlarm = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 5, 1, 1, 2, 5, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(-200000, -200000), ValueRangeConstraint(0, 10000), ))).setUnits('thousandth of a milli-Ampere').setMaxAccess("readonly")
if mibBuilder.loadTexts: ddmTxBiasCurrentLowAlarm.setStatus('current')
ddmTxBiasCurrentHiWarning = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 5, 1, 1, 2, 5, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(-200000, -200000), ValueRangeConstraint(0, 10000), ))).setUnits('thousandth of a milli-Ampere').setMaxAccess("readonly")
if mibBuilder.loadTexts: ddmTxBiasCurrentHiWarning.setStatus('current')
ddmTxBiasCurrentHiAlarm = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 5, 1, 1, 2, 5, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(-200000, -200000), ValueRangeConstraint(0, 10000), ))).setUnits('thousandth of a milli-Ampere').setMaxAccess("readonly")
if mibBuilder.loadTexts: ddmTxBiasCurrentHiAlarm.setStatus('current')
ddmTxOutputPower = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 5, 1, 1, 2, 5, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(-200000, -200000), ValueRangeConstraint(-40000, 10000), ))).setUnits('thousandth of a dBm').setMaxAccess("readonly")
if mibBuilder.loadTexts: ddmTxOutputPower.setStatus('current')
ddmTxOutputPowerLowWarning = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 5, 1, 1, 2, 5, 1, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(-200000, -200000), ValueRangeConstraint(-40000, 10000), ))).setUnits('thousandth of a dBm').setMaxAccess("readonly")
if mibBuilder.loadTexts: ddmTxOutputPowerLowWarning.setStatus('current')
ddmTxOutputPowerLowAlarm = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 5, 1, 1, 2, 5, 1, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(-200000, -200000), ValueRangeConstraint(-40000, 10000), ))).setUnits('thousandth of a dBm').setMaxAccess("readonly")
if mibBuilder.loadTexts: ddmTxOutputPowerLowAlarm.setStatus('current')
ddmTxOutputPowerHiWarning = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 5, 1, 1, 2, 5, 1, 19), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(-200000, -200000), ValueRangeConstraint(-40000, 10000), ))).setUnits('thousandth of a dBm').setMaxAccess("readonly")
if mibBuilder.loadTexts: ddmTxOutputPowerHiWarning.setStatus('current')
ddmTxOutputPowerHiAlarm = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 5, 1, 1, 2, 5, 1, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(-200000, -200000), ValueRangeConstraint(-40000, 10000), ))).setUnits('thousandth of a dBm').setMaxAccess("readonly")
if mibBuilder.loadTexts: ddmTxOutputPowerHiAlarm.setStatus('current')
ddmRxOpticalPower = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 5, 1, 1, 2, 5, 1, 21), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(-200000, -200000), ValueRangeConstraint(-40000, 10000), ))).setUnits('thousandth of a dBm').setMaxAccess("readonly")
if mibBuilder.loadTexts: ddmRxOpticalPower.setStatus('current')
ddmRxOpticalPowerLowWarning = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 5, 1, 1, 2, 5, 1, 22), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(-200000, -200000), ValueRangeConstraint(-40000, 10000), ))).setUnits('thousandth of a dBm').setMaxAccess("readonly")
if mibBuilder.loadTexts: ddmRxOpticalPowerLowWarning.setStatus('current')
ddmRxOpticalPowerLowAlarm = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 5, 1, 1, 2, 5, 1, 23), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(-200000, -200000), ValueRangeConstraint(-40000, 10000), ))).setUnits('thousandth of a dBm').setMaxAccess("readonly")
if mibBuilder.loadTexts: ddmRxOpticalPowerLowAlarm.setStatus('current')
ddmRxOpticalPowerHiWarning = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 5, 1, 1, 2, 5, 1, 24), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(-200000, -200000), ValueRangeConstraint(-40000, 10000), ))).setUnits('thousandth of a dBm').setMaxAccess("readonly")
if mibBuilder.loadTexts: ddmRxOpticalPowerHiWarning.setStatus('current')
ddmRxOpticalPowerHiAlarm = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 5, 1, 1, 2, 5, 1, 25), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(-200000, -200000), ValueRangeConstraint(-40000, 10000), ))).setUnits('thousandth of a dBm').setMaxAccess("readonly")
if mibBuilder.loadTexts: ddmRxOpticalPowerHiAlarm.setStatus('current')
ddmPortInfoTable = MibTable((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 5, 1, 1, 2, 6), )
if mibBuilder.loadTexts: ddmPortInfoTable.setStatus('current')
ddmPortInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 5, 1, 1, 2, 6, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "ALCATEL-IND1-PORT-MIB", "ddmPortChannel"))
if mibBuilder.loadTexts: ddmPortInfoEntry.setStatus('current')
ddmPortChannel = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 5, 1, 1, 2, 6, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4))).setUnits('QSFP/SFP channel number').setMaxAccess("readonly")
if mibBuilder.loadTexts: ddmPortChannel.setStatus('current')
ddmPortTemperature = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 5, 1, 1, 2, 6, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(-200000, -200000), ValueRangeConstraint(-150000, 150000), ))).setUnits('thousandth of a degree celcius').setMaxAccess("readonly")
if mibBuilder.loadTexts: ddmPortTemperature.setStatus('current')
ddmPortTempLowWarning = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 5, 1, 1, 2, 6, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(-200000, -200000), ValueRangeConstraint(-150000, 150000), ))).setUnits('thousandth of a degree celcius').setMaxAccess("readonly")
if mibBuilder.loadTexts: ddmPortTempLowWarning.setStatus('current')
ddmPortTempLowAlarm = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 5, 1, 1, 2, 6, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(-200000, -200000), ValueRangeConstraint(-150000, 150000), ))).setUnits('thousandth of a degree celcius').setMaxAccess("readonly")
if mibBuilder.loadTexts: ddmPortTempLowAlarm.setStatus('current')
ddmPortTempHiWarning = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 5, 1, 1, 2, 6, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(-200000, -200000), ValueRangeConstraint(-150000, 150000), ))).setUnits('thousandth of a degree celcius').setMaxAccess("readonly")
if mibBuilder.loadTexts: ddmPortTempHiWarning.setStatus('current')
ddmPortTempHiAlarm = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 5, 1, 1, 2, 6, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(-200000, -200000), ValueRangeConstraint(-150000, 150000), ))).setUnits('thousandth of a degree celcius').setMaxAccess("readonly")
if mibBuilder.loadTexts: ddmPortTempHiAlarm.setStatus('current')
ddmPortSupplyVoltage = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 5, 1, 1, 2, 6, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(-200000, -200000), ValueRangeConstraint(0, 10000), ))).setUnits('thousandth of a volt').setMaxAccess("readonly")
if mibBuilder.loadTexts: ddmPortSupplyVoltage.setStatus('current')
ddmPortSupplyVoltageLowWarning = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 5, 1, 1, 2, 6, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(-200000, -200000), ValueRangeConstraint(0, 10000), ))).setUnits('thousandth of a volt').setMaxAccess("readonly")
if mibBuilder.loadTexts: ddmPortSupplyVoltageLowWarning.setStatus('current')
ddmPortSupplyVoltageLowAlarm = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 5, 1, 1, 2, 6, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(-200000, -200000), ValueRangeConstraint(0, 10000), ))).setUnits('thousandth of a volt').setMaxAccess("readonly")
if mibBuilder.loadTexts: ddmPortSupplyVoltageLowAlarm.setStatus('current')
ddmPortSupplyVoltageHiWarning = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 5, 1, 1, 2, 6, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(-200000, -200000), ValueRangeConstraint(0, 10000), ))).setUnits('thousandth of a volt').setMaxAccess("readonly")
if mibBuilder.loadTexts: ddmPortSupplyVoltageHiWarning.setStatus('current')
ddmPortSupplyVoltageHiAlarm = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 5, 1, 1, 2, 6, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(-200000, -200000), ValueRangeConstraint(0, 10000), ))).setUnits('thousandth of a volt').setMaxAccess("readonly")
if mibBuilder.loadTexts: ddmPortSupplyVoltageHiAlarm.setStatus('current')
ddmPortTxBiasCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 5, 1, 1, 2, 6, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(-200000, -200000), ValueRangeConstraint(0, 10000), ))).setUnits('thousandth of a milli-Ampere').setMaxAccess("readonly")
if mibBuilder.loadTexts: ddmPortTxBiasCurrent.setStatus('current')
ddmPortTxBiasCurrentLowWarning = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 5, 1, 1, 2, 6, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(-200000, -200000), ValueRangeConstraint(0, 10000), ))).setUnits('thousandth of a milli-Ampere').setMaxAccess("readonly")
if mibBuilder.loadTexts: ddmPortTxBiasCurrentLowWarning.setStatus('current')
ddmPortTxBiasCurrentLowAlarm = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 5, 1, 1, 2, 6, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(-200000, -200000), ValueRangeConstraint(0, 10000), ))).setUnits('thousandth of a milli-Ampere').setMaxAccess("readonly")
if mibBuilder.loadTexts: ddmPortTxBiasCurrentLowAlarm.setStatus('current')
ddmPortTxBiasCurrentHiWarning = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 5, 1, 1, 2, 6, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(-200000, -200000), ValueRangeConstraint(0, 10000), ))).setUnits('thousandth of a milli-Ampere').setMaxAccess("readonly")
if mibBuilder.loadTexts: ddmPortTxBiasCurrentHiWarning.setStatus('current')
ddmPortTxBiasCurrentHiAlarm = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 5, 1, 1, 2, 6, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(-200000, -200000), ValueRangeConstraint(0, 10000), ))).setUnits('thousandth of a milli-Ampere').setMaxAccess("readonly")
if mibBuilder.loadTexts: ddmPortTxBiasCurrentHiAlarm.setStatus('current')
ddmPortTxOutputPower = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 5, 1, 1, 2, 6, 1, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(-200000, -200000), ValueRangeConstraint(-40000, 10000), ))).setUnits('thousandth of a dBm').setMaxAccess("readonly")
if mibBuilder.loadTexts: ddmPortTxOutputPower.setStatus('current')
ddmPortTxOutputPowerLowWarning = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 5, 1, 1, 2, 6, 1, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(-200000, -200000), ValueRangeConstraint(-40000, 10000), ))).setUnits('thousandth of a dBm').setMaxAccess("readonly")
if mibBuilder.loadTexts: ddmPortTxOutputPowerLowWarning.setStatus('current')
ddmPortTxOutputPowerLowAlarm = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 5, 1, 1, 2, 6, 1, 19), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(-200000, -200000), ValueRangeConstraint(-40000, 10000), ))).setUnits('thousandth of a dBm').setMaxAccess("readonly")
if mibBuilder.loadTexts: ddmPortTxOutputPowerLowAlarm.setStatus('current')
ddmPortTxOutputPowerHiWarning = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 5, 1, 1, 2, 6, 1, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(-200000, -200000), ValueRangeConstraint(-40000, 10000), ))).setUnits('thousandth of a dBm').setMaxAccess("readonly")
if mibBuilder.loadTexts: ddmPortTxOutputPowerHiWarning.setStatus('current')
ddmPortTxOutputPowerHiAlarm = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 5, 1, 1, 2, 6, 1, 21), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(-200000, -200000), ValueRangeConstraint(-40000, 10000), ))).setUnits('thousandth of a dBm').setMaxAccess("readonly")
if mibBuilder.loadTexts: ddmPortTxOutputPowerHiAlarm.setStatus('current')
ddmPortRxOpticalPower = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 5, 1, 1, 2, 6, 1, 22), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(-200000, -200000), ValueRangeConstraint(-40000, 10000), ))).setUnits('thousandth of a dBm').setMaxAccess("readonly")
if mibBuilder.loadTexts: ddmPortRxOpticalPower.setStatus('current')
ddmPortRxOpticalPowerLowWarning = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 5, 1, 1, 2, 6, 1, 23), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(-200000, -200000), ValueRangeConstraint(-40000, 10000), ))).setUnits('thousandth of a dBm').setMaxAccess("readonly")
if mibBuilder.loadTexts: ddmPortRxOpticalPowerLowWarning.setStatus('current')
ddmPortRxOpticalPowerLowAlarm = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 5, 1, 1, 2, 6, 1, 24), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(-200000, -200000), ValueRangeConstraint(-40000, 10000), ))).setUnits('thousandth of a dBm').setMaxAccess("readonly")
if mibBuilder.loadTexts: ddmPortRxOpticalPowerLowAlarm.setStatus('current')
ddmPortRxOpticalPowerHiWarning = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 5, 1, 1, 2, 6, 1, 25), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(-200000, -200000), ValueRangeConstraint(-40000, 10000), ))).setUnits('thousandth of a dBm').setMaxAccess("readonly")
if mibBuilder.loadTexts: ddmPortRxOpticalPowerHiWarning.setStatus('current')
ddmPortRxOpticalPowerHiAlarm = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 5, 1, 1, 2, 6, 1, 26), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(-200000, -200000), ValueRangeConstraint(-40000, 10000), ))).setUnits('thousandth of a dBm').setMaxAccess("readonly")
if mibBuilder.loadTexts: ddmPortRxOpticalPowerHiAlarm.setStatus('current')
alcfcStatsTable = MibTable((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 5, 1, 1, 2, 7), )
if mibBuilder.loadTexts: alcfcStatsTable.setStatus('current')
alcfcStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 5, 1, 1, 2, 7, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: alcfcStatsEntry.setStatus('current')
alcfcClearStats = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 5, 1, 1, 2, 7, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("default", 0), ("reset", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: alcfcClearStats.setStatus('current')
alcfcLastClearStats = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 5, 1, 1, 2, 7, 1, 2), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alcfcLastClearStats.setStatus('current')
alcfcStatsRxUndersizePkts = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 5, 1, 1, 2, 7, 1, 3), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alcfcStatsRxUndersizePkts.setStatus('current')
alcfcStatsTxBBCreditZeros = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 5, 1, 1, 2, 7, 1, 6), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alcfcStatsTxBBCreditZeros.setStatus('current')
alcfcStatsRxBBCreditZeros = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 5, 1, 1, 2, 7, 1, 7), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alcfcStatsRxBBCreditZeros.setStatus('current')
alcfcStatsLinkFailures = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 5, 1, 1, 2, 7, 1, 8), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alcfcStatsLinkFailures.setStatus('current')
alcfcStatsLossofSynchs = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 5, 1, 1, 2, 7, 1, 9), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alcfcStatsLossofSynchs.setStatus('current')
alcfcStatsLossofSignals = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 5, 1, 1, 2, 7, 1, 10), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alcfcStatsLossofSignals.setStatus('current')
alcfcStatsPrimSeqProtocolErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 5, 1, 1, 2, 7, 1, 11), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alcfcStatsPrimSeqProtocolErrors.setStatus('current')
alcfcStatsInvalidTxWords = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 5, 1, 1, 2, 7, 1, 12), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alcfcStatsInvalidTxWords.setStatus('current')
alcfcStatsInvalidCRCs = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 5, 1, 1, 2, 7, 1, 13), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alcfcStatsInvalidCRCs.setStatus('current')
alcfcStatsInvalidOrderedSets = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 5, 1, 1, 2, 7, 1, 14), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alcfcStatsInvalidOrderedSets.setStatus('current')
alcfcStatsFrameTooLongs = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 5, 1, 1, 2, 7, 1, 15), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alcfcStatsFrameTooLongs.setStatus('current')
alcfcStatsDelimiterErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 5, 1, 1, 2, 7, 1, 16), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alcfcStatsDelimiterErrors.setStatus('current')
alcfcStatsEncodingDisparityErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 5, 1, 1, 2, 7, 1, 17), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alcfcStatsEncodingDisparityErrors.setStatus('current')
alcfcStatsOtherErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 5, 1, 1, 2, 7, 1, 18), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alcfcStatsOtherErrors.setStatus('current')
esmDrvTrapDropsLink = NotificationType((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 5, 1, 0, 1)).setObjects(("ALCATEL-IND1-PORT-MIB", "esmPortSlot"), ("ALCATEL-IND1-PORT-MIB", "esmPortIF"), ("IF-MIB", "ifInErrors"), ("IF-MIB", "ifOutErrors"), ("ALCATEL-IND1-PORT-MIB", "esmDrvTrapDrops"))
if mibBuilder.loadTexts: esmDrvTrapDropsLink.setStatus('current')
ddmTemperatureThresholdViolated = NotificationType((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 5, 1, 0, 2)).setObjects(("IF-MIB", "ifIndex"), ("ALCATEL-IND1-PORT-MIB", "ddmNotificationType"), ("ALCATEL-IND1-PORT-MIB", "ddmTemperature"))
if mibBuilder.loadTexts: ddmTemperatureThresholdViolated.setStatus('current')
ddmVoltageThresholdViolated = NotificationType((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 5, 1, 0, 3)).setObjects(("IF-MIB", "ifIndex"), ("ALCATEL-IND1-PORT-MIB", "ddmNotificationType"), ("ALCATEL-IND1-PORT-MIB", "ddmSupplyVoltage"))
if mibBuilder.loadTexts: ddmVoltageThresholdViolated.setStatus('current')
ddmCurrentThresholdViolated = NotificationType((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 5, 1, 0, 4)).setObjects(("IF-MIB", "ifIndex"), ("ALCATEL-IND1-PORT-MIB", "ddmNotificationType"), ("ALCATEL-IND1-PORT-MIB", "ddmTxBiasCurrent"))
if mibBuilder.loadTexts: ddmCurrentThresholdViolated.setStatus('current')
ddmTxPowerThresholdViolated = NotificationType((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 5, 1, 0, 5)).setObjects(("IF-MIB", "ifIndex"), ("ALCATEL-IND1-PORT-MIB", "ddmNotificationType"), ("ALCATEL-IND1-PORT-MIB", "ddmTxOutputPower"))
if mibBuilder.loadTexts: ddmTxPowerThresholdViolated.setStatus('current')
ddmRxPowerThresholdViolated = NotificationType((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 5, 1, 0, 6)).setObjects(("IF-MIB", "ifIndex"), ("ALCATEL-IND1-PORT-MIB", "ddmNotificationType"), ("ALCATEL-IND1-PORT-MIB", "ddmRxOpticalPower"))
if mibBuilder.loadTexts: ddmRxPowerThresholdViolated.setStatus('current')
portViolationTable = MibTable((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 5, 1, 1, 5, 1), )
if mibBuilder.loadTexts: portViolationTable.setStatus('current')
portViolationEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 5, 1, 1, 5, 1, 1), ).setIndexNames((0, "ALCATEL-IND1-PORT-MIB", "portViolationIfIndex"), (0, "ALCATEL-IND1-PORT-MIB", "portViolationSource"), (0, "ALCATEL-IND1-PORT-MIB", "portViolationReason"))
if mibBuilder.loadTexts: portViolationEntry.setStatus('current')
portViolationIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 5, 1, 1, 5, 1, 1, 1), InterfaceIndex())
if mibBuilder.loadTexts: portViolationIfIndex.setStatus('current')
portViolationSource = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 5, 1, 1, 5, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 8, 9))).clone(namedValues=NamedValues(("srcLrn", 1), ("qos", 2), ("netsec", 3), ("udld", 4), ("nisup", 5), ("lfp", 8), ("lm", 9))))
if mibBuilder.loadTexts: portViolationSource.setStatus('current')
portViolationReason = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 5, 1, 1, 5, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 17))).clone(namedValues=NamedValues(("pvSLLpsShutDown", 1), ("pvSLLpsRestrict", 2), ("pvQosPolicy", 3), ("pvQosSpoofed", 4), ("pvQosBpdu", 5), ("pvQosBgp", 6), ("pvQosOspf", 7), ("pvQosRip", 8), ("pvQosVrrp", 9), ("pvQosDhcp", 10), ("pvQosPim", 11), ("pvQosDvmrp", 12), ("pvQosIsis", 13), ("pvQosDnsReply", 14), ("pvUdld", 15), ("pvLfpShutDown", 17))))
if mibBuilder.loadTexts: portViolationReason.setStatus('current')
portViolationAction = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 5, 1, 1, 5, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("portDown", 1), ("portAdminDown", 2), ("portTimerDown", 3), ("portTimerAdminDown", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: portViolationAction.setStatus('current')
portViolationTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 5, 1, 1, 5, 1, 1, 5), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: portViolationTimer.setStatus('current')
portViolationTimerAction = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 5, 1, 1, 5, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("portNoTimerAction", 0), ("portDownAfterTimer", 1), ("portUpAfterTimer", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: portViolationTimerAction.setStatus('current')
portViolationClearPort = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 5, 1, 1, 5, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("inactive", 0), ("set", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portViolationClearPort.setStatus('current')
alaLinkMonConfigTable = MibTable((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 5, 1, 1, 5, 2), )
if mibBuilder.loadTexts: alaLinkMonConfigTable.setStatus('current')
alaLinkMonConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 5, 1, 1, 5, 2, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: alaLinkMonConfigEntry.setStatus('current')
alaLinkMonStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 5, 1, 1, 5, 2, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: alaLinkMonStatus.setStatus('current')
alaLinkMonTimeWindow = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 5, 1, 1, 5, 2, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(10, 3600)).clone(300)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: alaLinkMonTimeWindow.setStatus('current')
alaLinkMonLinkFlapThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 5, 1, 1, 5, 2, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(2, 10)).clone(5)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: alaLinkMonLinkFlapThreshold.setStatus('current')
alaLinkMonLinkErrorThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 5, 1, 1, 5, 2, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 100)).clone(5)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: alaLinkMonLinkErrorThreshold.setStatus('current')
alaLinkMonWaitToRestoreTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 5, 1, 1, 5, 2, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 300))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: alaLinkMonWaitToRestoreTimer.setStatus('current')
alaLinkMonWaitToShutdownTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 5, 1, 1, 5, 2, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 3000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: alaLinkMonWaitToShutdownTimer.setStatus('current')
alaLinkMonStatsTable = MibTable((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 5, 1, 1, 5, 3), )
if mibBuilder.loadTexts: alaLinkMonStatsTable.setStatus('current')
alaLinkMonStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 5, 1, 1, 5, 3, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: alaLinkMonStatsEntry.setStatus('current')
alaLinkMonStatsClearStats = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 5, 1, 1, 5, 3, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("default", 1), ("reset", 2))).clone('default')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: alaLinkMonStatsClearStats.setStatus('current')
alaLinkMonStatsPortState = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 5, 1, 1, 5, 3, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("up", 1), ("down", 2), ("shutdown", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaLinkMonStatsPortState.setStatus('current')
alaLinkMonStatsCurrentLinkFlaps = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 5, 1, 1, 5, 3, 1, 3), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaLinkMonStatsCurrentLinkFlaps.setStatus('current')
alaLinkMonStatsCurrentErrorFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 5, 1, 1, 5, 3, 1, 4), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaLinkMonStatsCurrentErrorFrames.setStatus('current')
alaLinkMonStatsCurrentCRCErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 5, 1, 1, 5, 3, 1, 5), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaLinkMonStatsCurrentCRCErrors.setStatus('current')
alaLinkMonStatsCurrentLostFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 5, 1, 1, 5, 3, 1, 6), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaLinkMonStatsCurrentLostFrames.setStatus('current')
alaLinkMonStatsCurrentAlignErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 5, 1, 1, 5, 3, 1, 7), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaLinkMonStatsCurrentAlignErrors.setStatus('current')
alaLinkMonStatsCurrentLinkErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 5, 1, 1, 5, 3, 1, 8), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaLinkMonStatsCurrentLinkErrors.setStatus('current')
alaLinkMonStatsTotalLinkFlaps = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 5, 1, 1, 5, 3, 1, 9), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaLinkMonStatsTotalLinkFlaps.setStatus('current')
alaLinkMonStatsTotalLinkErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 5, 1, 1, 5, 3, 1, 10), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaLinkMonStatsTotalLinkErrors.setStatus('current')
alaLFPGroupTable = MibTable((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 5, 1, 1, 5, 4), )
if mibBuilder.loadTexts: alaLFPGroupTable.setStatus('current')
alaLFPGroupEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 5, 1, 1, 5, 4, 1), ).setIndexNames((0, "ALCATEL-IND1-PORT-MIB", "alaLFPGroupId"))
if mibBuilder.loadTexts: alaLFPGroupEntry.setStatus('current')
alaLFPGroupId = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 5, 1, 1, 5, 4, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 8))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: alaLFPGroupId.setStatus('current')
alaLFPGroupAdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 5, 1, 1, 5, 4, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('disable')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaLFPGroupAdminStatus.setStatus('current')
alaLFPGroupOperStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 5, 1, 1, 5, 4, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("up", 1), ("down", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaLFPGroupOperStatus.setStatus('current')
alaLFPGroupWaitToShutdown = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 5, 1, 1, 5, 4, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 300))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaLFPGroupWaitToShutdown.setStatus('current')
alaLFPGroupRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 5, 1, 1, 5, 4, 1, 5), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaLFPGroupRowStatus.setStatus('current')
alaLFPConfigTable = MibTable((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 5, 1, 1, 5, 5), )
if mibBuilder.loadTexts: alaLFPConfigTable.setStatus('current')
alaLFPConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 5, 1, 1, 5, 5, 1), ).setIndexNames((0, "ALCATEL-IND1-PORT-MIB", "alaLFPGroupId"), (0, "ALCATEL-IND1-PORT-MIB", "alaLFPConfigPort"))
if mibBuilder.loadTexts: alaLFPConfigEntry.setStatus('current')
alaLFPConfigPort = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 5, 1, 1, 5, 5, 1, 1), InterfaceIndex()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: alaLFPConfigPort.setStatus('current')
alaLFPConfigPortType = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 5, 1, 1, 5, 5, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("destination", 1), ("source", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaLFPConfigPortType.setStatus('current')
alaLFPConfigRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 5, 1, 1, 5, 5, 1, 3), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaLFPConfigRowStatus.setStatus('current')
portViolationTrap = NotificationType((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 5, 1, 0, 7)).setObjects(("IF-MIB", "ifIndex"), ("ALCATEL-IND1-PORT-MIB", "portViolationSource"), ("ALCATEL-IND1-PORT-MIB", "portViolationReason"))
if mibBuilder.loadTexts: portViolationTrap.setStatus('current')
portViolationNotificationTrap = NotificationType((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 5, 1, 0, 8)).setObjects(("IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: portViolationNotificationTrap.setStatus('current')
alaDyingGaspTrap = NotificationType((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 5, 1, 0, 9)).setObjects(("ALCATEL-IND1-PORT-MIB", "alaDyingGaspChassisId"), ("ALCATEL-IND1-PORT-MIB", "alaDyingGaspPowerSupplyType"), ("ALCATEL-IND1-PORT-MIB", "alaDyingGaspTime"))
if mibBuilder.loadTexts: alaDyingGaspTrap.setStatus('current')
alcatelIND1PortMIBCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 5, 1, 2, 1))
alcatelIND1PortMIBGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 5, 1, 2, 2))
esmConfPortCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 5, 1, 2, 1, 1)).setObjects(("ALCATEL-IND1-PORT-MIB", "esmConfMIBGroup"), ("ALCATEL-IND1-PORT-MIB", "esmDetectedConfMIBGroup"), ("ALCATEL-IND1-PORT-MIB", "ddmPortInfoGroup"), ("ALCATEL-IND1-PORT-MIB", "ddmConfigGroup"), ("ALCATEL-IND1-PORT-MIB", "ddmNotificationsGroup"), ("ALCATEL-IND1-PORT-MIB", "alaLinkMonConfigMIBGroup"), ("ALCATEL-IND1-PORT-MIB", "alaLFPGroupMIBGroup"), ("ALCATEL-IND1-PORT-MIB", "alaLFPConfigMIBGroup"), ("ALCATEL-IND1-PORT-MIB", "csmConfTrapGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    esmConfPortCompliance = esmConfPortCompliance.setStatus('current')
alcEtherStatsCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 5, 1, 2, 1, 2)).setObjects(("ALCATEL-IND1-PORT-MIB", "alcEtherStatsMIBGroup"), ("ALCATEL-IND1-PORT-MIB", "alaLinkMonStatsMIBGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    alcEtherStatsCompliance = alcEtherStatsCompliance.setStatus('current')
esmConfMIBGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 5, 1, 2, 2, 1)).setObjects(("ALCATEL-IND1-PORT-MIB", "esmPortCfgSpeed"), ("ALCATEL-IND1-PORT-MIB", "esmPortCfgDuplexMode"), ("ALCATEL-IND1-PORT-MIB", "esmPortCfgMaxFrameSize"), ("ALCATEL-IND1-PORT-MIB", "esmPortCfgAutoNegotiation"), ("ALCATEL-IND1-PORT-MIB", "esmPortCfgCrossover"), ("ALCATEL-IND1-PORT-MIB", "esmPortCfgPause"), ("ALCATEL-IND1-PORT-MIB", "esmPortBcastRateLimitEnable"), ("ALCATEL-IND1-PORT-MIB", "esmPortBcastRateLimitType"), ("ALCATEL-IND1-PORT-MIB", "esmPortBcastRateLimit"), ("ALCATEL-IND1-PORT-MIB", "esmPortMcastRateLimitEnable"), ("ALCATEL-IND1-PORT-MIB", "esmPortMcastRateLimitType"), ("ALCATEL-IND1-PORT-MIB", "esmPortMcastRateLimit"), ("ALCATEL-IND1-PORT-MIB", "esmPortUucastRateLimitEnable"), ("ALCATEL-IND1-PORT-MIB", "esmPortUucastRateLimitType"), ("ALCATEL-IND1-PORT-MIB", "esmPortUucastRateLimit"), ("ALCATEL-IND1-PORT-MIB", "esmPortIngressRateLimitEnable"), ("ALCATEL-IND1-PORT-MIB", "esmPortIngressRateLimit"), ("ALCATEL-IND1-PORT-MIB", "esmPortIngressRateLimitBurst"), ("ALCATEL-IND1-PORT-MIB", "esmPortEPPEnable"), ("ALCATEL-IND1-PORT-MIB", "esmPortEEEEnable"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    esmConfMIBGroup = esmConfMIBGroup.setStatus('current')
esmDetectedConfMIBGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 5, 1, 2, 2, 2)).setObjects(("ALCATEL-IND1-PORT-MIB", "esmPortAutoSpeed"), ("ALCATEL-IND1-PORT-MIB", "esmPortAutoDuplexMode"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    esmDetectedConfMIBGroup = esmDetectedConfMIBGroup.setStatus('current')
alcEtherStatsMIBGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 5, 1, 2, 2, 3)).setObjects(("ALCATEL-IND1-PORT-MIB", "alcetherClearStats"), ("ALCATEL-IND1-PORT-MIB", "alcetherLastClearStats"), ("ALCATEL-IND1-PORT-MIB", "alcetherStatsCRCAlignErrors"), ("ALCATEL-IND1-PORT-MIB", "alcetherStatsRxUndersizePkts"), ("ALCATEL-IND1-PORT-MIB", "alcetherStatsTxUndersizePkts"), ("ALCATEL-IND1-PORT-MIB", "alcetherStatsTxOversizePkts"), ("ALCATEL-IND1-PORT-MIB", "alcetherStatsRxJabbers"), ("ALCATEL-IND1-PORT-MIB", "alcetherStatsRxCollisions"), ("ALCATEL-IND1-PORT-MIB", "alcetherStatsTxCollisions"), ("ALCATEL-IND1-PORT-MIB", "alcetherStatsPkts64Octets"), ("ALCATEL-IND1-PORT-MIB", "alcetherStatsPkts65to127Octets"), ("ALCATEL-IND1-PORT-MIB", "alcetherStatsPkts128to255Octets"), ("ALCATEL-IND1-PORT-MIB", "alcetherStatsPkts256to511Octets"), ("ALCATEL-IND1-PORT-MIB", "alcetherStatsPkts512to1023Octets"), ("ALCATEL-IND1-PORT-MIB", "alcetherStatsPkts1024to1518Octets"), ("ALCATEL-IND1-PORT-MIB", "gigaEtherStatsPkts1519to4095Octets"), ("ALCATEL-IND1-PORT-MIB", "gigaEtherStatsPkts4096to9215Octets"), ("ALCATEL-IND1-PORT-MIB", "alcetherStatsPkts1519to2047Octets"), ("ALCATEL-IND1-PORT-MIB", "alcetherStatsPkts2048to4095Octets"), ("ALCATEL-IND1-PORT-MIB", "alcetherStatsPkts4096Octets"), ("ALCATEL-IND1-PORT-MIB", "alcetherStatsRxGiantPkts"), ("ALCATEL-IND1-PORT-MIB", "alcetherStatsRxDribbleNibblePkts"), ("ALCATEL-IND1-PORT-MIB", "alcetherStatsRxLongEventPkts"), ("ALCATEL-IND1-PORT-MIB", "alcetherStatsRxVlanTagPkts"), ("ALCATEL-IND1-PORT-MIB", "alcetherStatsRxControlPkts"), ("ALCATEL-IND1-PORT-MIB", "alcetherStatsRxLenChkErrPkts"), ("ALCATEL-IND1-PORT-MIB", "alcetherStatsRxCodeErrPkts"), ("ALCATEL-IND1-PORT-MIB", "alcetherStatsRxDvEventPkts"), ("ALCATEL-IND1-PORT-MIB", "alcetherStatsRxPrevPktDropped"), ("ALCATEL-IND1-PORT-MIB", "alcetherStatsTx64Octets"), ("ALCATEL-IND1-PORT-MIB", "alcetherStatsTx65to127Octets"), ("ALCATEL-IND1-PORT-MIB", "alcetherStatsTx128to255Octets"), ("ALCATEL-IND1-PORT-MIB", "alcetherStatsTx256to511Octets"), ("ALCATEL-IND1-PORT-MIB", "alcetherStatsTx512to1023Octets"), ("ALCATEL-IND1-PORT-MIB", "alcetherStatsTx1024to1518Octets"), ("ALCATEL-IND1-PORT-MIB", "alcetherStatsTx1519to2047Octets"), ("ALCATEL-IND1-PORT-MIB", "alcetherStatsTx2048to4095Octets"), ("ALCATEL-IND1-PORT-MIB", "alcetherStatsTx4096Octets"), ("ALCATEL-IND1-PORT-MIB", "alcetherStatsTxRetryCount"), ("ALCATEL-IND1-PORT-MIB", "alcetherStatsTxVlanTagPkts"), ("ALCATEL-IND1-PORT-MIB", "alcetherStatsTxControlPkts"), ("ALCATEL-IND1-PORT-MIB", "alcetherStatsTxLatePkts"), ("ALCATEL-IND1-PORT-MIB", "alcetherStatsTxTotalBytesOnWire"), ("ALCATEL-IND1-PORT-MIB", "alcetherStatsTxLenChkErrPkts"), ("ALCATEL-IND1-PORT-MIB", "alcetherStatsTxExcDeferPkts"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    alcEtherStatsMIBGroup = alcEtherStatsMIBGroup.setStatus('current')
alcPortNotificationGroup = NotificationGroup((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 5, 1, 2, 2, 4)).setObjects(("ALCATEL-IND1-PORT-MIB", "esmDrvTrapDropsLink"), ("ALCATEL-IND1-PORT-MIB", "portViolationTrap"), ("ALCATEL-IND1-PORT-MIB", "portViolationNotificationTrap"), ("ALCATEL-IND1-PORT-MIB", "alaDyingGaspTrap"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    alcPortNotificationGroup = alcPortNotificationGroup.setStatus('current')
ddmInfoGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 5, 1, 2, 2, 6)).setObjects(("ALCATEL-IND1-PORT-MIB", "ddmTemperature"), ("ALCATEL-IND1-PORT-MIB", "ddmTempLowWarning"), ("ALCATEL-IND1-PORT-MIB", "ddmTempLowAlarm"), ("ALCATEL-IND1-PORT-MIB", "ddmTempHiWarning"), ("ALCATEL-IND1-PORT-MIB", "ddmTempHiAlarm"), ("ALCATEL-IND1-PORT-MIB", "ddmSupplyVoltage"), ("ALCATEL-IND1-PORT-MIB", "ddmSupplyVoltageLowWarning"), ("ALCATEL-IND1-PORT-MIB", "ddmSupplyVoltageLowAlarm"), ("ALCATEL-IND1-PORT-MIB", "ddmSupplyVoltageHiWarning"), ("ALCATEL-IND1-PORT-MIB", "ddmSupplyVoltageHiAlarm"), ("ALCATEL-IND1-PORT-MIB", "ddmTxBiasCurrent"), ("ALCATEL-IND1-PORT-MIB", "ddmTxBiasCurrentLowWarning"), ("ALCATEL-IND1-PORT-MIB", "ddmTxBiasCurrentLowAlarm"), ("ALCATEL-IND1-PORT-MIB", "ddmTxBiasCurrentHiWarning"), ("ALCATEL-IND1-PORT-MIB", "ddmTxBiasCurrentHiAlarm"), ("ALCATEL-IND1-PORT-MIB", "ddmTxOutputPower"), ("ALCATEL-IND1-PORT-MIB", "ddmTxOutputPowerLowWarning"), ("ALCATEL-IND1-PORT-MIB", "ddmTxOutputPowerLowAlarm"), ("ALCATEL-IND1-PORT-MIB", "ddmTxOutputPowerHiWarning"), ("ALCATEL-IND1-PORT-MIB", "ddmTxOutputPowerHiAlarm"), ("ALCATEL-IND1-PORT-MIB", "ddmRxOpticalPower"), ("ALCATEL-IND1-PORT-MIB", "ddmRxOpticalPowerLowWarning"), ("ALCATEL-IND1-PORT-MIB", "ddmRxOpticalPowerLowAlarm"), ("ALCATEL-IND1-PORT-MIB", "ddmRxOpticalPowerHiWarning"), ("ALCATEL-IND1-PORT-MIB", "ddmRxOpticalPowerHiAlarm"), ("ALCATEL-IND1-PORT-MIB", "ddmPortChannel"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ddmInfoGroup = ddmInfoGroup.setStatus('current')
ddmConfigGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 5, 1, 2, 2, 7)).setObjects(("ALCATEL-IND1-PORT-MIB", "ddmConfig"), ("ALCATEL-IND1-PORT-MIB", "ddmTrapConfig"), ("ALCATEL-IND1-PORT-MIB", "ddmNotificationType"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ddmConfigGroup = ddmConfigGroup.setStatus('current')
ddmNotificationsGroup = NotificationGroup((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 5, 1, 2, 2, 8)).setObjects(("ALCATEL-IND1-PORT-MIB", "ddmTemperatureThresholdViolated"), ("ALCATEL-IND1-PORT-MIB", "ddmVoltageThresholdViolated"), ("ALCATEL-IND1-PORT-MIB", "ddmCurrentThresholdViolated"), ("ALCATEL-IND1-PORT-MIB", "ddmTxPowerThresholdViolated"), ("ALCATEL-IND1-PORT-MIB", "ddmRxPowerThresholdViolated"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ddmNotificationsGroup = ddmNotificationsGroup.setStatus('current')
esmConfTrapGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 5, 1, 2, 2, 9)).setObjects(("ALCATEL-IND1-PORT-MIB", "esmDrvTrapDrops"), ("ALCATEL-IND1-PORT-MIB", "alaDyingGaspChassisId"), ("ALCATEL-IND1-PORT-MIB", "alaDyingGaspPowerSupplyType"), ("ALCATEL-IND1-PORT-MIB", "alaDyingGaspTime"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    esmConfTrapGroup = esmConfTrapGroup.setStatus('current')
esmHybridConfEntryGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 5, 1, 2, 2, 10)).setObjects(("ALCATEL-IND1-PORT-MIB", "esmHybridPortCfgSpeed"), ("ALCATEL-IND1-PORT-MIB", "esmHybridPortCfgDuplexMode"), ("ALCATEL-IND1-PORT-MIB", "esmHybridPortCfgAutoNegotiation"), ("ALCATEL-IND1-PORT-MIB", "esmHybridPortCfgCrossover"), ("ALCATEL-IND1-PORT-MIB", "esmHybridPortCfgFlow"), ("ALCATEL-IND1-PORT-MIB", "esmHybridPortCfgInactiveType"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    esmHybridConfEntryGroup = esmHybridConfEntryGroup.setStatus('current')
esmConfEntryGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 5, 1, 2, 2, 11)).setObjects(("ALCATEL-IND1-PORT-MIB", "esmPortAdminStatus"), ("ALCATEL-IND1-PORT-MIB", "esmPortAlias"), ("ALCATEL-IND1-PORT-MIB", "esmPortCfgHybridActiveType"), ("ALCATEL-IND1-PORT-MIB", "esmPortCfgHybridMode"), ("ALCATEL-IND1-PORT-MIB", "esmPortIF"), ("ALCATEL-IND1-PORT-MIB", "esmPortLinkUpDownTrapEnable"), ("ALCATEL-IND1-PORT-MIB", "esmPortOperationalHybridType"), ("ALCATEL-IND1-PORT-MIB", "esmPortSlot"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    esmConfEntryGroup = esmConfEntryGroup.setStatus('current')
portViolationEntryGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 5, 1, 2, 2, 12)).setObjects(("ALCATEL-IND1-PORT-MIB", "portViolationAction"), ("ALCATEL-IND1-PORT-MIB", "portViolationTimer"), ("ALCATEL-IND1-PORT-MIB", "portViolationTimerAction"), ("ALCATEL-IND1-PORT-MIB", "portViolationClearPort"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    portViolationEntryGroup = portViolationEntryGroup.setStatus('current')
ddmPortInfoGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 5, 1, 2, 2, 13)).setObjects(("ALCATEL-IND1-PORT-MIB", "ddmPortTemperature"), ("ALCATEL-IND1-PORT-MIB", "ddmPortTempLowWarning"), ("ALCATEL-IND1-PORT-MIB", "ddmPortTempLowAlarm"), ("ALCATEL-IND1-PORT-MIB", "ddmPortTempHiWarning"), ("ALCATEL-IND1-PORT-MIB", "ddmPortTempHiAlarm"), ("ALCATEL-IND1-PORT-MIB", "ddmPortSupplyVoltage"), ("ALCATEL-IND1-PORT-MIB", "ddmPortSupplyVoltageLowWarning"), ("ALCATEL-IND1-PORT-MIB", "ddmPortSupplyVoltageLowAlarm"), ("ALCATEL-IND1-PORT-MIB", "ddmPortSupplyVoltageHiWarning"), ("ALCATEL-IND1-PORT-MIB", "ddmPortSupplyVoltageHiAlarm"), ("ALCATEL-IND1-PORT-MIB", "ddmPortTxBiasCurrent"), ("ALCATEL-IND1-PORT-MIB", "ddmPortTxBiasCurrentLowWarning"), ("ALCATEL-IND1-PORT-MIB", "ddmPortTxBiasCurrentLowAlarm"), ("ALCATEL-IND1-PORT-MIB", "ddmPortTxBiasCurrentHiWarning"), ("ALCATEL-IND1-PORT-MIB", "ddmPortTxBiasCurrentHiAlarm"), ("ALCATEL-IND1-PORT-MIB", "ddmPortTxOutputPower"), ("ALCATEL-IND1-PORT-MIB", "ddmPortTxOutputPowerLowWarning"), ("ALCATEL-IND1-PORT-MIB", "ddmPortTxOutputPowerLowAlarm"), ("ALCATEL-IND1-PORT-MIB", "ddmPortTxOutputPowerHiWarning"), ("ALCATEL-IND1-PORT-MIB", "ddmPortTxOutputPowerHiAlarm"), ("ALCATEL-IND1-PORT-MIB", "ddmPortRxOpticalPower"), ("ALCATEL-IND1-PORT-MIB", "ddmPortRxOpticalPowerLowWarning"), ("ALCATEL-IND1-PORT-MIB", "ddmPortRxOpticalPowerLowAlarm"), ("ALCATEL-IND1-PORT-MIB", "ddmPortRxOpticalPowerHiWarning"), ("ALCATEL-IND1-PORT-MIB", "ddmPortRxOpticalPowerHiAlarm"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ddmPortInfoGroup = ddmPortInfoGroup.setStatus('current')
alaLinkMonConfigMIBGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 5, 1, 2, 2, 14)).setObjects(("ALCATEL-IND1-PORT-MIB", "alaLinkMonStatus"), ("ALCATEL-IND1-PORT-MIB", "alaLinkMonTimeWindow"), ("ALCATEL-IND1-PORT-MIB", "alaLinkMonLinkFlapThreshold"), ("ALCATEL-IND1-PORT-MIB", "alaLinkMonLinkErrorThreshold"), ("ALCATEL-IND1-PORT-MIB", "alaLinkMonWaitToRestoreTimer"), ("ALCATEL-IND1-PORT-MIB", "alaLinkMonWaitToShutdownTimer"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    alaLinkMonConfigMIBGroup = alaLinkMonConfigMIBGroup.setStatus('current')
alaLinkMonStatsMIBGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 5, 1, 2, 2, 15)).setObjects(("ALCATEL-IND1-PORT-MIB", "alaLinkMonStatsClearStats"), ("ALCATEL-IND1-PORT-MIB", "alaLinkMonStatsPortState"), ("ALCATEL-IND1-PORT-MIB", "alaLinkMonStatsCurrentLinkFlaps"), ("ALCATEL-IND1-PORT-MIB", "alaLinkMonStatsCurrentErrorFrames"), ("ALCATEL-IND1-PORT-MIB", "alaLinkMonStatsCurrentCRCErrors"), ("ALCATEL-IND1-PORT-MIB", "alaLinkMonStatsCurrentLostFrames"), ("ALCATEL-IND1-PORT-MIB", "alaLinkMonStatsCurrentAlignErrors"), ("ALCATEL-IND1-PORT-MIB", "alaLinkMonStatsCurrentLinkErrors"), ("ALCATEL-IND1-PORT-MIB", "alaLinkMonStatsTotalLinkFlaps"), ("ALCATEL-IND1-PORT-MIB", "alaLinkMonStatsTotalLinkErrors"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    alaLinkMonStatsMIBGroup = alaLinkMonStatsMIBGroup.setStatus('current')
alaLFPGroupMIBGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 5, 1, 2, 2, 16)).setObjects(("ALCATEL-IND1-PORT-MIB", "alaLFPGroupId"), ("ALCATEL-IND1-PORT-MIB", "alaLFPGroupAdminStatus"), ("ALCATEL-IND1-PORT-MIB", "alaLFPGroupOperStatus"), ("ALCATEL-IND1-PORT-MIB", "alaLFPGroupWaitToShutdown"), ("ALCATEL-IND1-PORT-MIB", "alaLFPGroupRowStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    alaLFPGroupMIBGroup = alaLFPGroupMIBGroup.setStatus('current')
alaLFPConfigMIBGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 5, 1, 2, 2, 17)).setObjects(("ALCATEL-IND1-PORT-MIB", "alaLFPConfigPort"), ("ALCATEL-IND1-PORT-MIB", "alaLFPConfigPortType"), ("ALCATEL-IND1-PORT-MIB", "alaLFPConfigRowStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    alaLFPConfigMIBGroup = alaLFPConfigMIBGroup.setStatus('current')
csmConfTrapGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 5, 1, 2, 2, 18)).setObjects(("ALCATEL-IND1-PORT-MIB", "alaDyingGaspChassisId"), ("ALCATEL-IND1-PORT-MIB", "alaDyingGaspPowerSupplyType"), ("ALCATEL-IND1-PORT-MIB", "alaDyingGaspTime"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    csmConfTrapGroup = csmConfTrapGroup.setStatus('current')
mibBuilder.exportSymbols("ALCATEL-IND1-PORT-MIB", esmHybridPortCfgDuplexMode=esmHybridPortCfgDuplexMode, ddmRxPowerThresholdViolated=ddmRxPowerThresholdViolated, esmPortCfgHybridMode=esmPortCfgHybridMode, alcetherStatsTx65to127Octets=alcetherStatsTx65to127Octets, portViolationAction=portViolationAction, ddmNotificationsGroup=ddmNotificationsGroup, esmPortIF=esmPortIF, ddmRxOpticalPowerLowAlarm=ddmRxOpticalPowerLowAlarm, alcetherStatsPkts64Octets=alcetherStatsPkts64Octets, esmPortCfgAutoNegotiation=esmPortCfgAutoNegotiation, ddmTrapConfig=ddmTrapConfig, alcfcStatsTable=alcfcStatsTable, alaLinkMonLinkErrorThreshold=alaLinkMonLinkErrorThreshold, alaLFPConfigPort=alaLFPConfigPort, ddmInfoGroup=ddmInfoGroup, alcEtherStatsCompliance=alcEtherStatsCompliance, alcetherStatsTx128to255Octets=alcetherStatsTx128to255Octets, alcfcStatsFrameTooLongs=alcfcStatsFrameTooLongs, alcetherStatsTx512to1023Octets=alcetherStatsTx512to1023Octets, alaLFPConfigEntry=alaLFPConfigEntry, esmPortAutoDuplexMode=esmPortAutoDuplexMode, ddmPortTxOutputPowerHiAlarm=ddmPortTxOutputPowerHiAlarm, alcetherStatsTxVlanTagPkts=alcetherStatsTxVlanTagPkts, alcetherStatsRxPrevPktDropped=alcetherStatsRxPrevPktDropped, alcfcStatsRxBBCreditZeros=alcfcStatsRxBBCreditZeros, ddmTempHiWarning=ddmTempHiWarning, ddmTxPowerThresholdViolated=ddmTxPowerThresholdViolated, alaLFPConfigMIBGroup=alaLFPConfigMIBGroup, alcatelIND1PortMIBCompliances=alcatelIND1PortMIBCompliances, gigaEtherStatsPkts4096to9215Octets=gigaEtherStatsPkts4096to9215Octets, ddmTxBiasCurrentHiWarning=ddmTxBiasCurrentHiWarning, ddmTxOutputPowerHiAlarm=ddmTxOutputPowerHiAlarm, ddmPortTemperature=ddmPortTemperature, ddmSupplyVoltage=ddmSupplyVoltage, ddmPortTxBiasCurrent=ddmPortTxBiasCurrent, ddmPortSupplyVoltageHiAlarm=ddmPortSupplyVoltageHiAlarm, portViolationReason=portViolationReason, alaLinkMonStatsClearStats=alaLinkMonStatsClearStats, alaDyingGaspTime=alaDyingGaspTime, alcPortNotificationGroup=alcPortNotificationGroup, alaLFPConfigRowStatus=alaLFPConfigRowStatus, alcetherStatsTx1024to1518Octets=alcetherStatsTx1024to1518Octets, ddmPortInfoTable=ddmPortInfoTable, alcetherStatsPkts65to127Octets=alcetherStatsPkts65to127Octets, alcfcLastClearStats=alcfcLastClearStats, ddmConfiguration=ddmConfiguration, esmPortUucastRateLimit=esmPortUucastRateLimit, alaLinkMonStatsCurrentLostFrames=alaLinkMonStatsCurrentLostFrames, alaLFPGroupRowStatus=alaLFPGroupRowStatus, ddmInfoTable=ddmInfoTable, ddmTxOutputPowerLowAlarm=ddmTxOutputPowerLowAlarm, esmPortIngressRateLimit=esmPortIngressRateLimit, alcfcClearStats=alcfcClearStats, alcfcStatsInvalidTxWords=alcfcStatsInvalidTxWords, csmConfTrap=csmConfTrap, esmHybridConfTable=esmHybridConfTable, alcetherStatsTx64Octets=alcetherStatsTx64Octets, csmConfTrapGroup=csmConfTrapGroup, alaLinkMonStatsCurrentAlignErrors=alaLinkMonStatsCurrentAlignErrors, esmDrvTrapDropsLink=esmDrvTrapDropsLink, esmPortSlot=esmPortSlot, esmPortIngressRateLimitEnable=esmPortIngressRateLimitEnable, ddmPortTxBiasCurrentLowAlarm=ddmPortTxBiasCurrentLowAlarm, alcetherStatsPkts256to511Octets=alcetherStatsPkts256to511Octets, alcfcStatsLinkFailures=alcfcStatsLinkFailures, esmPortIsFiberChannelCapable=esmPortIsFiberChannelCapable, esmPortEPPEnable=esmPortEPPEnable, ddmRxOpticalPowerHiAlarm=ddmRxOpticalPowerHiAlarm, alcfcStatsInvalidOrderedSets=alcfcStatsInvalidOrderedSets, alcfcStatsPrimSeqProtocolErrors=alcfcStatsPrimSeqProtocolErrors, alaLinkMonConfigTable=alaLinkMonConfigTable, alcetherStatsRxUndersizePkts=alcetherStatsRxUndersizePkts, alcatelIND1PortMIBGroups=alcatelIND1PortMIBGroups, alcetherStatsRxLenChkErrPkts=alcetherStatsRxLenChkErrPkts, esmPortCfgMaxFrameSize=esmPortCfgMaxFrameSize, alcfcStatsOtherErrors=alcfcStatsOtherErrors, alaLinkMonStatsCurrentErrorFrames=alaLinkMonStatsCurrentErrorFrames, alaLinkMonStatsTotalLinkFlaps=alaLinkMonStatsTotalLinkFlaps, alcetherStatsPkts2048to4095Octets=alcetherStatsPkts2048to4095Octets, ddmTxBiasCurrentHiAlarm=ddmTxBiasCurrentHiAlarm, alcetherStatsRxDvEventPkts=alcetherStatsRxDvEventPkts, alcetherStatsTxLenChkErrPkts=alcetherStatsTxLenChkErrPkts, ddmPortTempHiAlarm=ddmPortTempHiAlarm, ddmVoltageThresholdViolated=ddmVoltageThresholdViolated, esmPortMcastRateLimit=esmPortMcastRateLimit, alcetherClearStats=alcetherClearStats, alcetherStatsTable=alcetherStatsTable, alaDyingGaspPowerSupplyType=alaDyingGaspPowerSupplyType, alaLFPGroupEntry=alaLFPGroupEntry, esmPortMcastRateLimitType=esmPortMcastRateLimitType, alcfcStatsTxBBCreditZeros=alcfcStatsTxBBCreditZeros, alcetherStatsRxCollisions=alcetherStatsRxCollisions, esmPortCfgCrossover=esmPortCfgCrossover, alaLFPGroupMIBGroup=alaLFPGroupMIBGroup, esmPortAutoSpeed=esmPortAutoSpeed, esmPortIngressRateLimitBurst=esmPortIngressRateLimitBurst, alcEtherStatsMIBGroup=alcEtherStatsMIBGroup, alcetherStatsPkts512to1023Octets=alcetherStatsPkts512to1023Octets, alcatelIND1PortMIBObjects=alcatelIND1PortMIBObjects, alcetherStatsPkts1519to2047Octets=alcetherStatsPkts1519to2047Octets, alcetherStatsEntry=alcetherStatsEntry, ddmSupplyVoltageHiWarning=ddmSupplyVoltageHiWarning, ddmTxBiasCurrentLowWarning=ddmTxBiasCurrentLowWarning, ddmConfigGroup=ddmConfigGroup, ddmPortTxOutputPowerHiWarning=ddmPortTxOutputPowerHiWarning, ddmSupplyVoltageLowAlarm=ddmSupplyVoltageLowAlarm, esmPortLinkUpDownTrapEnable=esmPortLinkUpDownTrapEnable, esmPortOperationalHybridType=esmPortOperationalHybridType, gigaEtherStatsPkts1519to4095Octets=gigaEtherStatsPkts1519to4095Octets, ddmPortRxOpticalPowerHiWarning=ddmPortRxOpticalPowerHiWarning, alaLinkMonConfigEntry=alaLinkMonConfigEntry, ddmSupplyVoltageLowWarning=ddmSupplyVoltageLowWarning, alaLFPGroupTable=alaLFPGroupTable, ddmTxOutputPower=ddmTxOutputPower, portViolationEntry=portViolationEntry, alaLinkMonTimeWindow=alaLinkMonTimeWindow, alaLinkMonStatsPortState=alaLinkMonStatsPortState, esmPortAdminStatus=esmPortAdminStatus, esmPortUucastRateLimitEnable=esmPortUucastRateLimitEnable, esmHybridPortCfgInactiveType=esmHybridPortCfgInactiveType, esmConfEntry=esmConfEntry, alcetherStatsRxLongEventPkts=alcetherStatsRxLongEventPkts, alaLFPGroupId=alaLFPGroupId, esmConfMIBGroup=esmConfMIBGroup, esmHybridPortCfgCrossover=esmHybridPortCfgCrossover, ddmPortRxOpticalPowerHiAlarm=ddmPortRxOpticalPowerHiAlarm, alcfcStatsLossofSynchs=alcfcStatsLossofSynchs, esmConfTrap=esmConfTrap, alaLFPGroupWaitToShutdown=alaLFPGroupWaitToShutdown, esmPortCfgDuplexMode=esmPortCfgDuplexMode, ddmTempHiAlarm=ddmTempHiAlarm, portViolationTrap=portViolationTrap, esmPortAlias=esmPortAlias, ddmRxOpticalPowerHiWarning=ddmRxOpticalPowerHiWarning, alaLinkMonStatsTotalLinkErrors=alaLinkMonStatsTotalLinkErrors, alcfcStatsEncodingDisparityErrors=alcfcStatsEncodingDisparityErrors, portViolationIfIndex=portViolationIfIndex, esmConfEntryGroup=esmConfEntryGroup, alcetherStatsTxControlPkts=alcetherStatsTxControlPkts, ddmPortTxBiasCurrentHiWarning=ddmPortTxBiasCurrentHiWarning, esmPortBcastRateLimit=esmPortBcastRateLimit, alcetherStatsTxOversizePkts=alcetherStatsTxOversizePkts, ddmPortSupplyVoltage=ddmPortSupplyVoltage, esmPortBcastRateLimitEnable=esmPortBcastRateLimitEnable, alcetherStatsTxCollisions=alcetherStatsTxCollisions, ddmRxOpticalPowerLowWarning=ddmRxOpticalPowerLowWarning, alaLinkMonStatsCurrentLinkErrors=alaLinkMonStatsCurrentLinkErrors, alcetherStatsTxExcDeferPkts=alcetherStatsTxExcDeferPkts, portViolationTimer=portViolationTimer, alcetherLastClearStats=alcetherLastClearStats, alcetherStatsPkts4096Octets=alcetherStatsPkts4096Octets, alcetherStatsTx4096Octets=alcetherStatsTx4096Octets, ddmPortSupplyVoltageHiWarning=ddmPortSupplyVoltageHiWarning, ddmTxOutputPowerLowWarning=ddmTxOutputPowerLowWarning, ddmCurrentThresholdViolated=ddmCurrentThresholdViolated, alaLFPGroupAdminStatus=alaLFPGroupAdminStatus, alaLinkMonConfigMIBGroup=alaLinkMonConfigMIBGroup, portViolationSource=portViolationSource, ddmPortTxBiasCurrentHiAlarm=ddmPortTxBiasCurrentHiAlarm, alcetherStatsTxTotalBytesOnWire=alcetherStatsTxTotalBytesOnWire, portViolationEntryGroup=portViolationEntryGroup, esmPortCfgPause=esmPortCfgPause, alcetherStatsRxJabbers=alcetherStatsRxJabbers, esmHybridPortCfgFlow=esmHybridPortCfgFlow, ddmPortTxOutputPowerLowAlarm=ddmPortTxOutputPowerLowAlarm, portViolationTable=portViolationTable, alaLinkMonStatsCurrentLinkFlaps=alaLinkMonStatsCurrentLinkFlaps, ddmTxBiasCurrentLowAlarm=ddmTxBiasCurrentLowAlarm, ddmPortTxOutputPowerLowWarning=ddmPortTxOutputPowerLowWarning, ddmTxOutputPowerHiWarning=ddmTxOutputPowerHiWarning, esmDetectedConfMIBGroup=esmDetectedConfMIBGroup, esmHybridConfEntryGroup=esmHybridConfEntryGroup, alcfcStatsDelimiterErrors=alcfcStatsDelimiterErrors, alaLinkMonLinkFlapThreshold=alaLinkMonLinkFlapThreshold, alcetherStatsRxCodeErrPkts=alcetherStatsRxCodeErrPkts, alcetherStatsRxDribbleNibblePkts=alcetherStatsRxDribbleNibblePkts, ddmRxOpticalPower=ddmRxOpticalPower, ddmTemperatureThresholdViolated=ddmTemperatureThresholdViolated, alcetherStatsTxRetryCount=alcetherStatsTxRetryCount, alaLinkMonStatsEntry=alaLinkMonStatsEntry, alaLFPConfigPortType=alaLFPConfigPortType, portViolations=portViolations, esmPortCfgHybridActiveType=esmPortCfgHybridActiveType, alcetherStatsRxVlanTagPkts=alcetherStatsRxVlanTagPkts, alcfcStatsRxUndersizePkts=alcfcStatsRxUndersizePkts, ddmPortTempHiWarning=ddmPortTempHiWarning, ddmPortInfoEntry=ddmPortInfoEntry, alcetherStatsRxControlPkts=alcetherStatsRxControlPkts, alaLFPGroupOperStatus=alaLFPGroupOperStatus, ddmConfig=ddmConfig, ddmTempLowAlarm=ddmTempLowAlarm, ddmTxBiasCurrent=ddmTxBiasCurrent, ddmInfoEntry=ddmInfoEntry, ddmPortTxOutputPower=ddmPortTxOutputPower, esmHybridPortCfgSpeed=esmHybridPortCfgSpeed, ddmPortRxOpticalPowerLowWarning=ddmPortRxOpticalPowerLowWarning, esmConfTable=esmConfTable, esmPortUucastRateLimitType=esmPortUucastRateLimitType, alcetherStatsTx1519to2047Octets=alcetherStatsTx1519to2047Octets, alcfcStatsLossofSignals=alcfcStatsLossofSignals, alaLinkMonWaitToShutdownTimer=alaLinkMonWaitToShutdownTimer, ddmPortRxOpticalPower=ddmPortRxOpticalPower, ddmTempLowWarning=ddmTempLowWarning, portViolationTimerAction=portViolationTimerAction, ddmNotificationType=ddmNotificationType, PYSNMP_MODULE_ID=alcatelIND1PortMIB, esmConfTrapGroup=esmConfTrapGroup, ddmPortSupplyVoltageLowAlarm=ddmPortSupplyVoltageLowAlarm, ddmPortInfoGroup=ddmPortInfoGroup, alaDyingGaspTrap=alaDyingGaspTrap, esmHybridPortCfgAutoNegotiation=esmHybridPortCfgAutoNegotiation, ddmPortTempLowAlarm=ddmPortTempLowAlarm, alcfcStatsInvalidCRCs=alcfcStatsInvalidCRCs, esmConfPortCompliance=esmConfPortCompliance, alcatelIND1PortMIBConformance=alcatelIND1PortMIBConformance, esmPortCfgSpeed=esmPortCfgSpeed, esmHybridConfEntry=esmHybridConfEntry, physicalPort=physicalPort, ddmPortTempLowWarning=ddmPortTempLowWarning, esmPortMcastRateLimitEnable=esmPortMcastRateLimitEnable, ddmPortRxOpticalPowerLowAlarm=ddmPortRxOpticalPowerLowAlarm, alcetherStatsRxGiantPkts=alcetherStatsRxGiantPkts, alcetherStatsPkts128to255Octets=alcetherStatsPkts128to255Octets, alaLinkMonStatsTable=alaLinkMonStatsTable, alcatelIND1PortNotifications=alcatelIND1PortNotifications, ddmPortSupplyVoltageLowWarning=ddmPortSupplyVoltageLowWarning, esmPortEEEEnable=esmPortEEEEnable, ddmSupplyVoltageHiAlarm=ddmSupplyVoltageHiAlarm, esmDrvTrapDrops=esmDrvTrapDrops, ddmTemperature=ddmTemperature, alcatelIND1PortMIB=alcatelIND1PortMIB, alcetherStatsPkts1024to1518Octets=alcetherStatsPkts1024to1518Octets, alaLinkMonStatus=alaLinkMonStatus, alaLFPConfigTable=alaLFPConfigTable, alcetherStatsTx2048to4095Octets=alcetherStatsTx2048to4095Octets, ddmPortTxBiasCurrentLowWarning=ddmPortTxBiasCurrentLowWarning, esmPortBcastRateLimitType=esmPortBcastRateLimitType, alaLinkMonWaitToRestoreTimer=alaLinkMonWaitToRestoreTimer, portViolationClearPort=portViolationClearPort, portViolationNotificationTrap=portViolationNotificationTrap, alcetherStatsTxUndersizePkts=alcetherStatsTxUndersizePkts, ddmPortChannel=ddmPortChannel, alaDyingGaspChassisId=alaDyingGaspChassisId, alcetherStatsTxLatePkts=alcetherStatsTxLatePkts, alaLinkMonStatsCurrentCRCErrors=alaLinkMonStatsCurrentCRCErrors, alaLinkMonStatsMIBGroup=alaLinkMonStatsMIBGroup, alcfcStatsEntry=alcfcStatsEntry, alcetherStatsTx256to511Octets=alcetherStatsTx256to511Octets, alcetherStatsCRCAlignErrors=alcetherStatsCRCAlignErrors)
