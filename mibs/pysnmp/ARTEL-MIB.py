#
# PySNMP MIB module ARTEL-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/ARTEL-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 17:09:42 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, Integer, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "OctetString", "Integer", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsUnion, ValueSizeConstraint, ConstraintsIntersection, SingleValueConstraint, ValueRangeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsUnion", "ValueSizeConstraint", "ConstraintsIntersection", "SingleValueConstraint", "ValueRangeConstraint")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
Bits, NotificationType, ObjectIdentity, MibIdentifier, MibScalar, MibTable, MibTableRow, MibTableColumn, Unsigned32, enterprises, Counter64, ModuleIdentity, IpAddress, Opaque, Integer32, Counter32, Gauge32, TimeTicks, iso = mibBuilder.importSymbols("SNMPv2-SMI", "Bits", "NotificationType", "ObjectIdentity", "MibIdentifier", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Unsigned32", "enterprises", "Counter64", "ModuleIdentity", "IpAddress", "Opaque", "Integer32", "Counter32", "Gauge32", "TimeTicks", "iso")
TextualConvention, PhysAddress, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "PhysAddress", "DisplayString")
artel = MibIdentifier((1, 3, 6, 1, 4, 1, 139))
node = MibIdentifier((1, 3, 6, 1, 4, 1, 139, 1))
galactica = MibIdentifier((1, 3, 6, 1, 4, 1, 139, 2))
artelTrap = MibIdentifier((1, 3, 6, 1, 4, 1, 139, 64))
board = MibIdentifier((1, 3, 6, 1, 4, 1, 139, 2, 1))
arcnet = MibIdentifier((1, 3, 6, 1, 4, 1, 139, 2, 2))
backplane = MibIdentifier((1, 3, 6, 1, 4, 1, 139, 2, 3))
bridge = MibIdentifier((1, 3, 6, 1, 4, 1, 139, 2, 4))
systemManagement = MibIdentifier((1, 3, 6, 1, 4, 1, 139, 2, 5))
starbridge = MibIdentifier((1, 3, 6, 1, 4, 1, 139, 2, 6))
fddi = MibIdentifier((1, 3, 6, 1, 4, 1, 139, 2, 7))
nodeName = MibScalar((1, 3, 6, 1, 4, 1, 139, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nodeName.setStatus('mandatory')
nodeMacSlotMap = MibScalar((1, 3, 6, 1, 4, 1, 139, 1, 2), Opaque()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nodeMacSlotMap.setStatus('mandatory')
nodeColdBoot = MibScalar((1, 3, 6, 1, 4, 1, 139, 1, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nodeColdBoot.setStatus('mandatory')
nodeResetNvRam = MibScalar((1, 3, 6, 1, 4, 1, 139, 1, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nodeResetNvRam.setStatus('mandatory')
nodeIpSlotTable = MibTable((1, 3, 6, 1, 4, 1, 139, 1, 5), )
if mibBuilder.loadTexts: nodeIpSlotTable.setStatus('mandatory')
nodeIpSlotEntry = MibTableRow((1, 3, 6, 1, 4, 1, 139, 1, 5, 1), ).setIndexNames((0, "ARTEL-MIB", "nodeIpSlotIndex"))
if mibBuilder.loadTexts: nodeIpSlotEntry.setStatus('mandatory')
nodeIpSlotIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 139, 1, 5, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 9))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nodeIpSlotIndex.setStatus('mandatory')
nodeIpSlotAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 139, 1, 5, 1, 2), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nodeIpSlotAddr.setStatus('mandatory')
boardIpAddr = MibScalar((1, 3, 6, 1, 4, 1, 139, 2, 1, 1), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: boardIpAddr.setStatus('mandatory')
boardReset = MibScalar((1, 3, 6, 1, 4, 1, 139, 2, 1, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: boardReset.setStatus('mandatory')
boardResetNvRam = MibScalar((1, 3, 6, 1, 4, 1, 139, 2, 1, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: boardResetNvRam.setStatus('mandatory')
boardLedStatus = MibScalar((1, 3, 6, 1, 4, 1, 139, 2, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: boardLedStatus.setStatus('mandatory')
boardSlotNum = MibScalar((1, 3, 6, 1, 4, 1, 139, 2, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: boardSlotNum.setStatus('mandatory')
boardClass = MibScalar((1, 3, 6, 1, 4, 1, 139, 2, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("system-management-board", 1), ("starbridge-board", 2), ("turbo", 3), ("fddi-board", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: boardClass.setStatus('mandatory')
boardResetCounts = MibScalar((1, 3, 6, 1, 4, 1, 139, 2, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: boardResetCounts.setStatus('mandatory')
boardSnmpMibVersion = MibScalar((1, 3, 6, 1, 4, 1, 139, 2, 1, 9), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: boardSnmpMibVersion.setStatus('mandatory')
arcnetBoardsPresent = MibScalar((1, 3, 6, 1, 4, 1, 139, 2, 2, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: arcnetBoardsPresent.setStatus('mandatory')
arcnetRxPkts = MibScalar((1, 3, 6, 1, 4, 1, 139, 2, 2, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: arcnetRxPkts.setStatus('mandatory')
arcnetTxPkts = MibScalar((1, 3, 6, 1, 4, 1, 139, 2, 2, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: arcnetTxPkts.setStatus('mandatory')
arcnetNakCnts = MibScalar((1, 3, 6, 1, 4, 1, 139, 2, 2, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: arcnetNakCnts.setStatus('mandatory')
arcnetMyReconfigCounts = MibScalar((1, 3, 6, 1, 4, 1, 139, 2, 2, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: arcnetMyReconfigCounts.setStatus('mandatory')
arcnetReconfigCounts = MibScalar((1, 3, 6, 1, 4, 1, 139, 2, 2, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: arcnetReconfigCounts.setStatus('mandatory')
arcnetTrashedRxMsgs = MibScalar((1, 3, 6, 1, 4, 1, 139, 2, 2, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: arcnetTrashedRxMsgs.setStatus('mandatory')
arcnetTrashedTxMsgs = MibScalar((1, 3, 6, 1, 4, 1, 139, 2, 2, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: arcnetTrashedTxMsgs.setStatus('mandatory')
bpStatsEnabled = MibScalar((1, 3, 6, 1, 4, 1, 139, 2, 3, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bpStatsEnabled.setStatus('mandatory')
bpStatsRxPkts = MibScalar((1, 3, 6, 1, 4, 1, 139, 2, 3, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bpStatsRxPkts.setStatus('mandatory')
bpStatsRxErrors = MibScalar((1, 3, 6, 1, 4, 1, 139, 2, 3, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bpStatsRxErrors.setStatus('mandatory')
bpStatsTxPkts = MibScalar((1, 3, 6, 1, 4, 1, 139, 2, 3, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bpStatsTxPkts.setStatus('mandatory')
bpStatsTxErrors = MibScalar((1, 3, 6, 1, 4, 1, 139, 2, 3, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bpStatsTxErrors.setStatus('mandatory')
bpStatsOperState = MibScalar((1, 3, 6, 1, 4, 1, 139, 2, 3, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: bpStatsOperState.setStatus('mandatory')
bpStatsInitialize = MibScalar((1, 3, 6, 1, 4, 1, 139, 2, 3, 7), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bpStatsInitialize.setStatus('mandatory')
bpStatsTxQOverErrors = MibScalar((1, 3, 6, 1, 4, 1, 139, 2, 3, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bpStatsTxQOverErrors.setStatus('mandatory')
bpStatsRxBusyTable = MibTable((1, 3, 6, 1, 4, 1, 139, 2, 3, 9), )
if mibBuilder.loadTexts: bpStatsRxBusyTable.setStatus('mandatory')
bpStatsRxBusyTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 139, 2, 3, 9, 1), ).setIndexNames((0, "ARTEL-MIB", "bpStatsRxBusyTableIndex"))
if mibBuilder.loadTexts: bpStatsRxBusyTableEntry.setStatus('mandatory')
bpStatsRxBusyTableIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 139, 2, 3, 9, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 9))).setMaxAccess("readonly")
if mibBuilder.loadTexts: bpStatsRxBusyTableIndex.setStatus('mandatory')
bpStatsRxBusyTableErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 139, 2, 3, 9, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bpStatsRxBusyTableErrors.setStatus('mandatory')
restrictedTable = MibTable((1, 3, 6, 1, 4, 1, 139, 2, 4, 1), )
if mibBuilder.loadTexts: restrictedTable.setStatus('mandatory')
restrictedEntry = MibTableRow((1, 3, 6, 1, 4, 1, 139, 2, 4, 1, 1), ).setIndexNames((0, "ARTEL-MIB", "restrictedAddr"))
if mibBuilder.loadTexts: restrictedEntry.setStatus('mandatory')
restrictedAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 139, 2, 4, 1, 1, 1), PhysAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: restrictedAddr.setStatus('mandatory')
restrictedStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 139, 2, 4, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("valid", 1), ("invalid", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: restrictedStatus.setStatus('mandatory')
bridgeAgeNow = MibScalar((1, 3, 6, 1, 4, 1, 139, 2, 4, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bridgeAgeNow.setStatus('mandatory')
bridgeDot1dEnable = MibScalar((1, 3, 6, 1, 4, 1, 139, 2, 4, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bridgeDot1dEnable.setStatus('mandatory')
bridgeDot1dResetDefaults = MibScalar((1, 3, 6, 1, 4, 1, 139, 2, 4, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bridgeDot1dResetDefaults.setStatus('mandatory')
bridgeResetPktSwCount = MibScalar((1, 3, 6, 1, 4, 1, 139, 2, 4, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bridgeResetPktSwCount.setStatus('mandatory')
bridgePktSwLastReset = MibScalar((1, 3, 6, 1, 4, 1, 139, 2, 4, 7), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bridgePktSwLastReset.setStatus('mandatory')
bridgeResetStatic = MibScalar((1, 3, 6, 1, 4, 1, 139, 2, 4, 8), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bridgeResetStatic.setStatus('mandatory')
bridgeRestrictedReset = MibScalar((1, 3, 6, 1, 4, 1, 139, 2, 4, 9), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bridgeRestrictedReset.setStatus('mandatory')
bridgeUdfTable = MibTable((1, 3, 6, 1, 4, 1, 139, 2, 4, 11), )
if mibBuilder.loadTexts: bridgeUdfTable.setStatus('mandatory')
bridgeUdfEntry = MibTableRow((1, 3, 6, 1, 4, 1, 139, 2, 4, 11, 1), ).setIndexNames((0, "ARTEL-MIB", "bridgeUdfPortIndex"), (0, "ARTEL-MIB", "bridgeUdfFilterIndex"))
if mibBuilder.loadTexts: bridgeUdfEntry.setStatus('mandatory')
bridgeUdfPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 139, 2, 4, 11, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 8))).setMaxAccess("readonly")
if mibBuilder.loadTexts: bridgeUdfPortIndex.setStatus('mandatory')
bridgeUdfFilterIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 139, 2, 4, 11, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 8))).setMaxAccess("readonly")
if mibBuilder.loadTexts: bridgeUdfFilterIndex.setStatus('mandatory')
bridgeUdfState = MibTableColumn((1, 3, 6, 1, 4, 1, 139, 2, 4, 11, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("disabled", 1), ("filter", 2), ("forward", 3), ("count", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bridgeUdfState.setStatus('mandatory')
bridgeUdfComment = MibTableColumn((1, 3, 6, 1, 4, 1, 139, 2, 4, 11, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bridgeUdfComment.setStatus('mandatory')
bridgeUdfMatchCounts = MibTableColumn((1, 3, 6, 1, 4, 1, 139, 2, 4, 11, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bridgeUdfMatchCounts.setStatus('mandatory')
bridgeUdfInitMatchCount = MibTableColumn((1, 3, 6, 1, 4, 1, 139, 2, 4, 11, 1, 6), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bridgeUdfInitMatchCount.setStatus('mandatory')
bridgeUdfAddressType = MibTableColumn((1, 3, 6, 1, 4, 1, 139, 2, 4, 11, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("source", 1), ("destination", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bridgeUdfAddressType.setStatus('mandatory')
bridgeUdfAddressValue = MibTableColumn((1, 3, 6, 1, 4, 1, 139, 2, 4, 11, 1, 8), PhysAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bridgeUdfAddressValue.setStatus('mandatory')
bridgeUdfAddressMask = MibTableColumn((1, 3, 6, 1, 4, 1, 139, 2, 4, 11, 1, 9), PhysAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bridgeUdfAddressMask.setStatus('mandatory')
bridgeUdfAddressOperand = MibTableColumn((1, 3, 6, 1, 4, 1, 139, 2, 4, 11, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("equal", 1), ("notequal", 2), ("lessthan", 3), ("lessthanorequal", 4), ("greaterthan", 5), ("greaterthanorequal", 6)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bridgeUdfAddressOperand.setStatus('mandatory')
bridgeUdfTypeValue = MibTableColumn((1, 3, 6, 1, 4, 1, 139, 2, 4, 11, 1, 11), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bridgeUdfTypeValue.setStatus('mandatory')
bridgeUdfTypeMask = MibTableColumn((1, 3, 6, 1, 4, 1, 139, 2, 4, 11, 1, 12), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bridgeUdfTypeMask.setStatus('mandatory')
bridgeUdfTypeOperand = MibTableColumn((1, 3, 6, 1, 4, 1, 139, 2, 4, 11, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("equal", 1), ("notequal", 2), ("lessthan", 3), ("lessthanorequal", 4), ("greaterthan", 5), ("greaterthanorequal", 6)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bridgeUdfTypeOperand.setStatus('mandatory')
bridgeUdfOffset1Offset = MibTableColumn((1, 3, 6, 1, 4, 1, 139, 2, 4, 11, 1, 14), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bridgeUdfOffset1Offset.setStatus('mandatory')
bridgeUdfOffset1Value = MibTableColumn((1, 3, 6, 1, 4, 1, 139, 2, 4, 11, 1, 15), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bridgeUdfOffset1Value.setStatus('mandatory')
bridgeUdfOffset1Mask = MibTableColumn((1, 3, 6, 1, 4, 1, 139, 2, 4, 11, 1, 16), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bridgeUdfOffset1Mask.setStatus('mandatory')
bridgeUdfOffset1Operand = MibTableColumn((1, 3, 6, 1, 4, 1, 139, 2, 4, 11, 1, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("equal", 1), ("notequal", 2), ("lessthan", 3), ("lessthanorequal", 4), ("greaterthan", 5), ("greaterthanorequal", 6)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bridgeUdfOffset1Operand.setStatus('mandatory')
bridgeUdfOffset2Offset = MibTableColumn((1, 3, 6, 1, 4, 1, 139, 2, 4, 11, 1, 18), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bridgeUdfOffset2Offset.setStatus('mandatory')
bridgeUdfOffset2Value = MibTableColumn((1, 3, 6, 1, 4, 1, 139, 2, 4, 11, 1, 19), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bridgeUdfOffset2Value.setStatus('mandatory')
bridgeUdfOffset2Mask = MibTableColumn((1, 3, 6, 1, 4, 1, 139, 2, 4, 11, 1, 20), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bridgeUdfOffset2Mask.setStatus('mandatory')
bridgeUdfOffset2Operand = MibTableColumn((1, 3, 6, 1, 4, 1, 139, 2, 4, 11, 1, 21), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("equal", 1), ("notequal", 2), ("lessthan", 3), ("lessthanorequal", 4), ("greaterthan", 5), ("greaterthanorequal", 6)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bridgeUdfOffset2Operand.setStatus('mandatory')
bridgeUdfOffset3Offset = MibTableColumn((1, 3, 6, 1, 4, 1, 139, 2, 4, 11, 1, 22), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bridgeUdfOffset3Offset.setStatus('mandatory')
bridgeUdfOffset3Value = MibTableColumn((1, 3, 6, 1, 4, 1, 139, 2, 4, 11, 1, 23), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bridgeUdfOffset3Value.setStatus('mandatory')
bridgeUdfOffset3Mask = MibTableColumn((1, 3, 6, 1, 4, 1, 139, 2, 4, 11, 1, 24), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bridgeUdfOffset3Mask.setStatus('mandatory')
bridgeUdfOffset3Operand = MibTableColumn((1, 3, 6, 1, 4, 1, 139, 2, 4, 11, 1, 25), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("equal", 1), ("notequal", 2), ("lessthan", 3), ("lessthanorequal", 4), ("greaterthan", 5), ("greaterthanorequal", 6)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bridgeUdfOffset3Operand.setStatus('mandatory')
bridgeUdfOffset4Offset = MibTableColumn((1, 3, 6, 1, 4, 1, 139, 2, 4, 11, 1, 26), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bridgeUdfOffset4Offset.setStatus('mandatory')
bridgeUdfOffset4Value = MibTableColumn((1, 3, 6, 1, 4, 1, 139, 2, 4, 11, 1, 27), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bridgeUdfOffset4Value.setStatus('mandatory')
bridgeUdfOffset4Mask = MibTableColumn((1, 3, 6, 1, 4, 1, 139, 2, 4, 11, 1, 28), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bridgeUdfOffset4Mask.setStatus('mandatory')
bridgeUdfOffset4Operand = MibTableColumn((1, 3, 6, 1, 4, 1, 139, 2, 4, 11, 1, 29), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("equal", 1), ("notequal", 2), ("lessthan", 3), ("lessthanorequal", 4), ("greaterthan", 5), ("greaterthanorequal", 6)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bridgeUdfOffset4Operand.setStatus('mandatory')
bridgeUdfInitCountTable = MibTable((1, 3, 6, 1, 4, 1, 139, 2, 4, 12), )
if mibBuilder.loadTexts: bridgeUdfInitCountTable.setStatus('mandatory')
bridgeUdfInitCountEntry = MibTableRow((1, 3, 6, 1, 4, 1, 139, 2, 4, 12, 1), ).setIndexNames((0, "ARTEL-MIB", "bridgeUdfCountPortIndex"))
if mibBuilder.loadTexts: bridgeUdfInitCountEntry.setStatus('mandatory')
bridgeUdfCountPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 139, 2, 4, 12, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 8))).setMaxAccess("readonly")
if mibBuilder.loadTexts: bridgeUdfCountPortIndex.setStatus('mandatory')
bridgeUdfCountInitMatchCount = MibTableColumn((1, 3, 6, 1, 4, 1, 139, 2, 4, 12, 1, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bridgeUdfCountInitMatchCount.setStatus('mandatory')
bridgePortGroupEnable = MibScalar((1, 3, 6, 1, 4, 1, 139, 2, 4, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bridgePortGroupEnable.setStatus('mandatory')
bridgePortGroupTable = MibTable((1, 3, 6, 1, 4, 1, 139, 2, 4, 14), )
if mibBuilder.loadTexts: bridgePortGroupTable.setStatus('mandatory')
bridgePortGroupEntry = MibTableRow((1, 3, 6, 1, 4, 1, 139, 2, 4, 14, 1), ).setIndexNames((0, "ARTEL-MIB", "bridgePortGroupTablePortIndex"), (0, "ARTEL-MIB", "bridgePortGroupTableGroupIndex"))
if mibBuilder.loadTexts: bridgePortGroupEntry.setStatus('mandatory')
bridgePortGroupTablePortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 139, 2, 4, 14, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 40))).setMaxAccess("readonly")
if mibBuilder.loadTexts: bridgePortGroupTablePortIndex.setStatus('mandatory')
bridgePortGroupTableGroupIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 139, 2, 4, 14, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: bridgePortGroupTableGroupIndex.setStatus('mandatory')
bridgePortGroupTableEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 139, 2, 4, 14, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bridgePortGroupTableEnable.setStatus('mandatory')
bridgePortGroupPortTable = MibTable((1, 3, 6, 1, 4, 1, 139, 2, 4, 15), )
if mibBuilder.loadTexts: bridgePortGroupPortTable.setStatus('mandatory')
bridgePortGroupPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 139, 2, 4, 15, 1), ).setIndexNames((0, "ARTEL-MIB", "bridgePortGroupPortIndex"))
if mibBuilder.loadTexts: bridgePortGroupPortEntry.setStatus('mandatory')
bridgePortGroupPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 139, 2, 4, 15, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 8))).setMaxAccess("readonly")
if mibBuilder.loadTexts: bridgePortGroupPortIndex.setStatus('mandatory')
bridgePortGroupPortDisplayString = MibTableColumn((1, 3, 6, 1, 4, 1, 139, 2, 4, 15, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: bridgePortGroupPortDisplayString.setStatus('mandatory')
bridgePortGroupGroupTable = MibTable((1, 3, 6, 1, 4, 1, 139, 2, 4, 16), )
if mibBuilder.loadTexts: bridgePortGroupGroupTable.setStatus('mandatory')
bridgePortGroupGroupEntry = MibTableRow((1, 3, 6, 1, 4, 1, 139, 2, 4, 16, 1), ).setIndexNames((0, "ARTEL-MIB", "bridgePortGroupGroupIndex"))
if mibBuilder.loadTexts: bridgePortGroupGroupEntry.setStatus('mandatory')
bridgePortGroupGroupIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 139, 2, 4, 16, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: bridgePortGroupGroupIndex.setStatus('mandatory')
bridgePortGroupGroupPortMap = MibTableColumn((1, 3, 6, 1, 4, 1, 139, 2, 4, 16, 1, 2), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bridgePortGroupGroupPortMap.setStatus('mandatory')
bridgePortGroupGroupComment = MibTableColumn((1, 3, 6, 1, 4, 1, 139, 2, 4, 16, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: bridgePortGroupGroupComment.setStatus('mandatory')
bridgeAddrFilterTable = MibTable((1, 3, 6, 1, 4, 1, 139, 2, 4, 17), )
if mibBuilder.loadTexts: bridgeAddrFilterTable.setStatus('mandatory')
bridgeAddrFilterEntry = MibTableRow((1, 3, 6, 1, 4, 1, 139, 2, 4, 17, 1), ).setIndexNames((0, "ARTEL-MIB", "bridgeAddrFilterBlockIndex"))
if mibBuilder.loadTexts: bridgeAddrFilterEntry.setStatus('mandatory')
bridgeAddrFilterBlockIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 139, 2, 4, 17, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 205))).setMaxAccess("readonly")
if mibBuilder.loadTexts: bridgeAddrFilterBlockIndex.setStatus('mandatory')
bridgeAddrFilterBlockData = MibTableColumn((1, 3, 6, 1, 4, 1, 139, 2, 4, 17, 1, 2), Opaque()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bridgeAddrFilterBlockData.setStatus('mandatory')
bridgedot1dTpFdbTable = MibTable((1, 3, 6, 1, 4, 1, 139, 2, 4, 18), )
if mibBuilder.loadTexts: bridgedot1dTpFdbTable.setStatus('mandatory')
bridgedot1dTpFdbEntry = MibTableRow((1, 3, 6, 1, 4, 1, 139, 2, 4, 18, 1), ).setIndexNames((0, "ARTEL-MIB", "bridgedot1dTpFdbAddress"))
if mibBuilder.loadTexts: bridgedot1dTpFdbEntry.setStatus('mandatory')
bridgedot1dTpFdbAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 139, 2, 4, 18, 1, 1), PhysAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bridgedot1dTpFdbAddress.setStatus('mandatory')
bridgedot1dTpFdbSlot = MibTableColumn((1, 3, 6, 1, 4, 1, 139, 2, 4, 18, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bridgedot1dTpFdbSlot.setStatus('mandatory')
bridgedot1dTpFdbPort = MibTableColumn((1, 3, 6, 1, 4, 1, 139, 2, 4, 18, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bridgedot1dTpFdbPort.setStatus('mandatory')
bridgedot1dTpFdbStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 139, 2, 4, 18, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("invalid", 1), ("learned", 2), ("static", 3), ("restrict", 4), ("spantree", 5), ("self", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: bridgedot1dTpFdbStatus.setStatus('mandatory')
bridgedot1dTpFdbAge = MibTableColumn((1, 3, 6, 1, 4, 1, 139, 2, 4, 18, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("invalid", 1), ("notaged", 2), ("onceaged", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: bridgedot1dTpFdbAge.setStatus('mandatory')
smConfiguration = MibIdentifier((1, 3, 6, 1, 4, 1, 139, 2, 5, 1))
smCfgManufactureDate = MibScalar((1, 3, 6, 1, 4, 1, 139, 2, 5, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: smCfgManufactureDate.setStatus('mandatory')
smCfgType = MibScalar((1, 3, 6, 1, 4, 1, 139, 2, 5, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("system-management-board", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: smCfgType.setStatus('mandatory')
smCfgHardwareRev = MibScalar((1, 3, 6, 1, 4, 1, 139, 2, 5, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: smCfgHardwareRev.setStatus('mandatory')
smCfgSerialNumber = MibScalar((1, 3, 6, 1, 4, 1, 139, 2, 5, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: smCfgSerialNumber.setStatus('mandatory')
smCfgMacAddr = MibScalar((1, 3, 6, 1, 4, 1, 139, 2, 5, 1, 5), PhysAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smCfgMacAddr.setStatus('mandatory')
smCfgFlashMemSize = MibScalar((1, 3, 6, 1, 4, 1, 139, 2, 5, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smCfgFlashMemSize.setStatus('mandatory')
smCfg68kRamSize = MibScalar((1, 3, 6, 1, 4, 1, 139, 2, 5, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smCfg68kRamSize.setStatus('mandatory')
smCfgBootRev = MibScalar((1, 3, 6, 1, 4, 1, 139, 2, 5, 1, 8), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: smCfgBootRev.setStatus('mandatory')
smCfg68kRev = MibScalar((1, 3, 6, 1, 4, 1, 139, 2, 5, 1, 9), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: smCfg68kRev.setStatus('mandatory')
smCfgModulePartNumber = MibScalar((1, 3, 6, 1, 4, 1, 139, 2, 5, 1, 10), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: smCfgModulePartNumber.setStatus('mandatory')
smCfgModuleSerialNumber = MibScalar((1, 3, 6, 1, 4, 1, 139, 2, 5, 1, 11), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: smCfgModuleSerialNumber.setStatus('mandatory')
smCfgStoreFlashRev = MibScalar((1, 3, 6, 1, 4, 1, 139, 2, 5, 1, 12), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: smCfgStoreFlashRev.setStatus('mandatory')
smCfgExecFlashRev = MibScalar((1, 3, 6, 1, 4, 1, 139, 2, 5, 1, 13), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: smCfgExecFlashRev.setStatus('mandatory')
smBackplane = MibIdentifier((1, 3, 6, 1, 4, 1, 139, 2, 5, 2))
smBpType = MibScalar((1, 3, 6, 1, 4, 1, 139, 2, 5, 2, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(5))).clone(namedValues=NamedValues(("five-Slot", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: smBpType.setStatus('mandatory')
smBpArbTimer = MibScalar((1, 3, 6, 1, 4, 1, 139, 2, 5, 2, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smBpArbTimer.setStatus('mandatory')
smBpMaxPktSize = MibScalar((1, 3, 6, 1, 4, 1, 139, 2, 5, 2, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smBpMaxPktSize.setStatus('mandatory')
smBpAsyncSlotsEnb = MibScalar((1, 3, 6, 1, 4, 1, 139, 2, 5, 2, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smBpAsyncSlotsEnb.setStatus('mandatory')
smBpSyncSlotsEnb = MibScalar((1, 3, 6, 1, 4, 1, 139, 2, 5, 2, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smBpSyncSlotsEnb.setStatus('mandatory')
smBpUtilization = MibScalar((1, 3, 6, 1, 4, 1, 139, 2, 5, 2, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smBpUtilization.setStatus('mandatory')
smBpTable = MibTable((1, 3, 6, 1, 4, 1, 139, 2, 5, 2, 7), )
if mibBuilder.loadTexts: smBpTable.setStatus('mandatory')
smBpEntry = MibTableRow((1, 3, 6, 1, 4, 1, 139, 2, 5, 2, 7, 1), ).setIndexNames((0, "ARTEL-MIB", "smBpIndex"))
if mibBuilder.loadTexts: smBpEntry.setStatus('mandatory')
smBpIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 139, 2, 5, 2, 7, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 9))).setMaxAccess("readonly")
if mibBuilder.loadTexts: smBpIndex.setStatus('mandatory')
smBpTableEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 139, 2, 5, 2, 7, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: smBpTableEnable.setStatus('mandatory')
smBpTableJabber = MibTableColumn((1, 3, 6, 1, 4, 1, 139, 2, 5, 2, 7, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("true", 1), ("false", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: smBpTableJabber.setStatus('mandatory')
smBpTableClearJabber = MibTableColumn((1, 3, 6, 1, 4, 1, 139, 2, 5, 2, 7, 1, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: smBpTableClearJabber.setStatus('mandatory')
smPowerSupply = MibIdentifier((1, 3, 6, 1, 4, 1, 139, 2, 5, 4))
smSupplyPresent = MibScalar((1, 3, 6, 1, 4, 1, 139, 2, 5, 4, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smSupplyPresent.setStatus('mandatory')
smSupplyType = MibScalar((1, 3, 6, 1, 4, 1, 139, 2, 5, 4, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smSupplyType.setStatus('mandatory')
smSupplyAcOk = MibScalar((1, 3, 6, 1, 4, 1, 139, 2, 5, 4, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smSupplyAcOk.setStatus('mandatory')
smSupplyDcOk = MibScalar((1, 3, 6, 1, 4, 1, 139, 2, 5, 4, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smSupplyDcOk.setStatus('mandatory')
smSupplyTable = MibTable((1, 3, 6, 1, 4, 1, 139, 2, 5, 4, 5), )
if mibBuilder.loadTexts: smSupplyTable.setStatus('mandatory')
smSupplyTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 139, 2, 5, 4, 5, 1), ).setIndexNames((0, "ARTEL-MIB", "smSupplyTableIndex"))
if mibBuilder.loadTexts: smSupplyTableEntry.setStatus('mandatory')
smSupplyTableIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 139, 2, 5, 4, 5, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4))).setMaxAccess("readonly")
if mibBuilder.loadTexts: smSupplyTableIndex.setStatus('mandatory')
smSupplyTableStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 139, 2, 5, 4, 5, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: smSupplyTableStatus.setStatus('mandatory')
smModem = MibIdentifier((1, 3, 6, 1, 4, 1, 139, 2, 5, 5))
smModemType = MibScalar((1, 3, 6, 1, 4, 1, 139, 2, 5, 5, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("internal-japan-2400-baud", 1), ("internal-usa-2400-baud", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: smModemType.setStatus('mandatory')
smModemCallBackEnable = MibScalar((1, 3, 6, 1, 4, 1, 139, 2, 5, 5, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: smModemCallBackEnable.setStatus('mandatory')
smModemCallBackNumber = MibScalar((1, 3, 6, 1, 4, 1, 139, 2, 5, 5, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: smModemCallBackNumber.setStatus('mandatory')
sbConfiguration = MibIdentifier((1, 3, 6, 1, 4, 1, 139, 2, 6, 1))
sbCfgManufactureDate = MibScalar((1, 3, 6, 1, 4, 1, 139, 2, 6, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sbCfgManufactureDate.setStatus('mandatory')
sbCfgType = MibScalar((1, 3, 6, 1, 4, 1, 139, 2, 6, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2))).clone(namedValues=NamedValues(("starbridge-board", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sbCfgType.setStatus('mandatory')
sbCfgHardwareRev = MibScalar((1, 3, 6, 1, 4, 1, 139, 2, 6, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sbCfgHardwareRev.setStatus('mandatory')
sbCfgSerialNumber = MibScalar((1, 3, 6, 1, 4, 1, 139, 2, 6, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sbCfgSerialNumber.setStatus('mandatory')
sbCfgNumberIfBoards = MibScalar((1, 3, 6, 1, 4, 1, 139, 2, 6, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sbCfgNumberIfBoards.setStatus('mandatory')
sbCfgIfBd1Type = MibScalar((1, 3, 6, 1, 4, 1, 139, 2, 6, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("thicknet-dte", 1), ("thicknet-dce", 2), ("thinnet", 3), ("twisted-pair", 4), ("foirl", 5), ("ten-base-f", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sbCfgIfBd1Type.setStatus('mandatory')
sbCfgIfBd1Rev = MibScalar((1, 3, 6, 1, 4, 1, 139, 2, 6, 1, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sbCfgIfBd1Rev.setStatus('mandatory')
sbCfgIfBd1SerialNum = MibScalar((1, 3, 6, 1, 4, 1, 139, 2, 6, 1, 8), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sbCfgIfBd1SerialNum.setStatus('mandatory')
sbCfgIfBd1NumPorts = MibScalar((1, 3, 6, 1, 4, 1, 139, 2, 6, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sbCfgIfBd1NumPorts.setStatus('mandatory')
sbCfgIfBd2Type = MibScalar((1, 3, 6, 1, 4, 1, 139, 2, 6, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("thicknet-dte", 1), ("thicknet-dce", 2), ("thinnet", 3), ("twisted-pair", 4), ("foirl", 5), ("ten-base-f", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sbCfgIfBd2Type.setStatus('mandatory')
sbCfgIfBd2Rev = MibScalar((1, 3, 6, 1, 4, 1, 139, 2, 6, 1, 11), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sbCfgIfBd2Rev.setStatus('mandatory')
sbCfgIfBd2SerialNum = MibScalar((1, 3, 6, 1, 4, 1, 139, 2, 6, 1, 12), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sbCfgIfBd2SerialNum.setStatus('mandatory')
sbCfgIfBd2NumPorts = MibScalar((1, 3, 6, 1, 4, 1, 139, 2, 6, 1, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sbCfgIfBd2NumPorts.setStatus('mandatory')
sbCfgFlashMemorySize = MibScalar((1, 3, 6, 1, 4, 1, 139, 2, 6, 1, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sbCfgFlashMemorySize.setStatus('mandatory')
sbCfg68kRamSize = MibScalar((1, 3, 6, 1, 4, 1, 139, 2, 6, 1, 15), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sbCfg68kRamSize.setStatus('mandatory')
sbCfg960RamSize = MibScalar((1, 3, 6, 1, 4, 1, 139, 2, 6, 1, 16), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sbCfg960RamSize.setStatus('mandatory')
sbCfgSonicRamSize = MibScalar((1, 3, 6, 1, 4, 1, 139, 2, 6, 1, 17), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sbCfgSonicRamSize.setStatus('mandatory')
sbCfgHasherCacheTagSize = MibScalar((1, 3, 6, 1, 4, 1, 139, 2, 6, 1, 18), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sbCfgHasherCacheTagSize.setStatus('mandatory')
sbCfgDualPortRamSize = MibScalar((1, 3, 6, 1, 4, 1, 139, 2, 6, 1, 19), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sbCfgDualPortRamSize.setStatus('mandatory')
sbCfgBootRev = MibScalar((1, 3, 6, 1, 4, 1, 139, 2, 6, 1, 20), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sbCfgBootRev.setStatus('mandatory')
sbCfg68kRev = MibScalar((1, 3, 6, 1, 4, 1, 139, 2, 6, 1, 21), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sbCfg68kRev.setStatus('mandatory')
sbCfg960Rev = MibScalar((1, 3, 6, 1, 4, 1, 139, 2, 6, 1, 22), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sbCfg960Rev.setStatus('mandatory')
sbCfgModulePartNumber = MibScalar((1, 3, 6, 1, 4, 1, 139, 2, 6, 1, 23), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sbCfgModulePartNumber.setStatus('mandatory')
sbCfgModuleSerialNumber = MibScalar((1, 3, 6, 1, 4, 1, 139, 2, 6, 1, 24), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sbCfgModuleSerialNumber.setStatus('mandatory')
sbCfgStoreFlashRev = MibScalar((1, 3, 6, 1, 4, 1, 139, 2, 6, 1, 25), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sbCfgStoreFlashRev.setStatus('mandatory')
sbCfgExecFlashRev = MibScalar((1, 3, 6, 1, 4, 1, 139, 2, 6, 1, 26), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sbCfgExecFlashRev.setStatus('mandatory')
sbPort = MibIdentifier((1, 3, 6, 1, 4, 1, 139, 2, 6, 3))
sbPortTable = MibTable((1, 3, 6, 1, 4, 1, 139, 2, 6, 3, 1), )
if mibBuilder.loadTexts: sbPortTable.setStatus('mandatory')
sbPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 139, 2, 6, 3, 1, 1), ).setIndexNames((0, "ARTEL-MIB", "sbPortIndex"))
if mibBuilder.loadTexts: sbPortEntry.setStatus('mandatory')
sbPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 139, 2, 6, 3, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 8))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sbPortIndex.setStatus('mandatory')
sbPortRxMulticastFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 139, 2, 6, 3, 1, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sbPortRxMulticastFrames.setStatus('mandatory')
sbPortRxBroadcastFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 139, 2, 6, 3, 1, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sbPortRxBroadcastFrames.setStatus('mandatory')
sbPortRxRuntErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 139, 2, 6, 3, 1, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sbPortRxRuntErrors.setStatus('mandatory')
sbPortRxBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 139, 2, 6, 3, 1, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sbPortRxBytes.setStatus('mandatory')
sbPortTxBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 139, 2, 6, 3, 1, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sbPortTxBytes.setStatus('mandatory')
sbPortRxBroadcastStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 139, 2, 6, 3, 1, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sbPortRxBroadcastStatus.setStatus('mandatory')
sbPortName = MibTableColumn((1, 3, 6, 1, 4, 1, 139, 2, 6, 3, 1, 1, 9), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sbPortName.setStatus('mandatory')
sbPortUtilization = MibTableColumn((1, 3, 6, 1, 4, 1, 139, 2, 6, 3, 1, 1, 10), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sbPortUtilization.setStatus('mandatory')
sbPortFramesPerSecond = MibTableColumn((1, 3, 6, 1, 4, 1, 139, 2, 6, 3, 1, 1, 11), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sbPortFramesPerSecond.setStatus('mandatory')
sbPortErrorRate = MibTableColumn((1, 3, 6, 1, 4, 1, 139, 2, 6, 3, 1, 1, 12), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sbPortErrorRate.setStatus('mandatory')
sbPortInitStats = MibTableColumn((1, 3, 6, 1, 4, 1, 139, 2, 6, 3, 1, 1, 13), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sbPortInitStats.setStatus('mandatory')
sbPortUnidirectTable = MibTable((1, 3, 6, 1, 4, 1, 139, 2, 6, 3, 2), )
if mibBuilder.loadTexts: sbPortUnidirectTable.setStatus('mandatory')
sbPortUnidirectEntry = MibTableRow((1, 3, 6, 1, 4, 1, 139, 2, 6, 3, 2, 1), ).setIndexNames((0, "ARTEL-MIB", "sbPortUnidirectIndex"))
if mibBuilder.loadTexts: sbPortUnidirectEntry.setStatus('mandatory')
sbPortUnidirectIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 139, 2, 6, 3, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sbPortUnidirectIndex.setStatus('mandatory')
sbPortUnidirectEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 139, 2, 6, 3, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sbPortUnidirectEnable.setStatus('mandatory')
fddiConfiguration = MibIdentifier((1, 3, 6, 1, 4, 1, 139, 2, 7, 1))
fddiCfgManufactureDate = MibScalar((1, 3, 6, 1, 4, 1, 139, 2, 7, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fddiCfgManufactureDate.setStatus('mandatory')
fddiCfgType = MibScalar((1, 3, 6, 1, 4, 1, 139, 2, 7, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(4))).clone(namedValues=NamedValues(("fddi-board", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fddiCfgType.setStatus('mandatory')
fddiCfgHardwareRev = MibScalar((1, 3, 6, 1, 4, 1, 139, 2, 7, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fddiCfgHardwareRev.setStatus('mandatory')
fddiCfgSerialNumber = MibScalar((1, 3, 6, 1, 4, 1, 139, 2, 7, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fddiCfgSerialNumber.setStatus('mandatory')
fddiCfgNumberFddiPorts = MibScalar((1, 3, 6, 1, 4, 1, 139, 2, 7, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fddiCfgNumberFddiPorts.setStatus('mandatory')
fddiCfgPPFType = MibScalar((1, 3, 6, 1, 4, 1, 139, 2, 7, 1, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fddiCfgPPFType.setStatus('mandatory')
fddiCfgPPFRev = MibScalar((1, 3, 6, 1, 4, 1, 139, 2, 7, 1, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fddiCfgPPFRev.setStatus('mandatory')
fddiCfgPPFSerialNumber = MibScalar((1, 3, 6, 1, 4, 1, 139, 2, 7, 1, 8), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fddiCfgPPFSerialNumber.setStatus('mandatory')
fddiCfgMediaType = MibScalar((1, 3, 6, 1, 4, 1, 139, 2, 7, 1, 9), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fddiCfgMediaType.setStatus('mandatory')
fddiCfgFlashMemorySize = MibScalar((1, 3, 6, 1, 4, 1, 139, 2, 7, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fddiCfgFlashMemorySize.setStatus('mandatory')
fddiCfg68kRamSize = MibScalar((1, 3, 6, 1, 4, 1, 139, 2, 7, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fddiCfg68kRamSize.setStatus('mandatory')
fddiCfg960RamSize = MibScalar((1, 3, 6, 1, 4, 1, 139, 2, 7, 1, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fddiCfg960RamSize.setStatus('mandatory')
fddiCfgSonicRamSize = MibScalar((1, 3, 6, 1, 4, 1, 139, 2, 7, 1, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fddiCfgSonicRamSize.setStatus('mandatory')
fddiCfgHasherCacheTagSize = MibScalar((1, 3, 6, 1, 4, 1, 139, 2, 7, 1, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fddiCfgHasherCacheTagSize.setStatus('mandatory')
fddiCfgDualPortRamSize = MibScalar((1, 3, 6, 1, 4, 1, 139, 2, 7, 1, 15), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fddiCfgDualPortRamSize.setStatus('mandatory')
fddiCfgBootRev = MibScalar((1, 3, 6, 1, 4, 1, 139, 2, 7, 1, 16), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fddiCfgBootRev.setStatus('mandatory')
fddiCfg68kRev = MibScalar((1, 3, 6, 1, 4, 1, 139, 2, 7, 1, 17), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fddiCfg68kRev.setStatus('mandatory')
fddiCfg960Rev = MibScalar((1, 3, 6, 1, 4, 1, 139, 2, 7, 1, 18), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fddiCfg960Rev.setStatus('mandatory')
fddiCfgPPFSoftwareRev = MibScalar((1, 3, 6, 1, 4, 1, 139, 2, 7, 1, 19), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fddiCfgPPFSoftwareRev.setStatus('mandatory')
fddiCfgModulePartNumber = MibScalar((1, 3, 6, 1, 4, 1, 139, 2, 7, 1, 20), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fddiCfgModulePartNumber.setStatus('mandatory')
fddiCfgModuleSerialNumber = MibScalar((1, 3, 6, 1, 4, 1, 139, 2, 7, 1, 21), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fddiCfgModuleSerialNumber.setStatus('mandatory')
fddiCfgStoreFlashRev = MibScalar((1, 3, 6, 1, 4, 1, 139, 2, 7, 1, 22), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fddiCfgStoreFlashRev.setStatus('mandatory')
fddiCfgExecFlashRev = MibScalar((1, 3, 6, 1, 4, 1, 139, 2, 7, 1, 23), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fddiCfgExecFlashRev.setStatus('mandatory')
fddiIpFragmentation = MibIdentifier((1, 3, 6, 1, 4, 1, 139, 2, 7, 2))
fddiIpFragEnabled = MibScalar((1, 3, 6, 1, 4, 1, 139, 2, 7, 2, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fddiIpFragEnabled.setStatus('mandatory')
fddiPort = MibIdentifier((1, 3, 6, 1, 4, 1, 139, 2, 7, 3))
fddiPortTable = MibTable((1, 3, 6, 1, 4, 1, 139, 2, 7, 3, 1), )
if mibBuilder.loadTexts: fddiPortTable.setStatus('mandatory')
fddiPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 139, 2, 7, 3, 1, 1), ).setIndexNames((0, "ARTEL-MIB", "fddiPortIndex"))
if mibBuilder.loadTexts: fddiPortEntry.setStatus('mandatory')
fddiPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 139, 2, 7, 3, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fddiPortIndex.setStatus('mandatory')
fddiPortRxMcastEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 139, 2, 7, 3, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fddiPortRxMcastEnabled.setStatus('mandatory')
fddiPortNotCopiedOffRingErrs = MibTableColumn((1, 3, 6, 1, 4, 1, 139, 2, 7, 3, 1, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fddiPortNotCopiedOffRingErrs.setStatus('mandatory')
fddiPortRingOpCounts = MibTableColumn((1, 3, 6, 1, 4, 1, 139, 2, 7, 3, 1, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fddiPortRingOpCounts.setStatus('mandatory')
fddiPortFrameCheckErrs = MibTableColumn((1, 3, 6, 1, 4, 1, 139, 2, 7, 3, 1, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fddiPortFrameCheckErrs.setStatus('mandatory')
artelTrapAddrTable = MibTable((1, 3, 6, 1, 4, 1, 139, 64, 1), )
if mibBuilder.loadTexts: artelTrapAddrTable.setStatus('mandatory')
artelTrapAddrEntry = MibTableRow((1, 3, 6, 1, 4, 1, 139, 64, 1, 1), ).setIndexNames((0, "ARTEL-MIB", "artelTrapAddrIpDest"), (0, "ARTEL-MIB", "artelTrapAddrXPortIndex"))
if mibBuilder.loadTexts: artelTrapAddrEntry.setStatus('mandatory')
artelTrapAddrIpDest = MibTableColumn((1, 3, 6, 1, 4, 1, 139, 64, 1, 1, 1), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: artelTrapAddrIpDest.setStatus('mandatory')
artelTrapAddrXPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 139, 64, 1, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(2, 2)).setFixedLength(2)).setMaxAccess("readonly")
if mibBuilder.loadTexts: artelTrapAddrXPortIndex.setStatus('mandatory')
artelTrapAddrUdpDest = MibTableColumn((1, 3, 6, 1, 4, 1, 139, 64, 1, 1, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: artelTrapAddrUdpDest.setStatus('mandatory')
artelTrapAddrCommunity = MibTableColumn((1, 3, 6, 1, 4, 1, 139, 64, 1, 1, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: artelTrapAddrCommunity.setStatus('mandatory')
artelTrapAddrStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 139, 64, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("other", 1), ("invalid", 2), ("permanent", 3), ("temporary", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: artelTrapAddrStatus.setStatus('mandatory')
artelTrapReportString = MibScalar((1, 3, 6, 1, 4, 1, 139, 64, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: artelTrapReportString.setStatus('mandatory')
mibBuilder.exportSymbols("ARTEL-MIB", nodeResetNvRam=nodeResetNvRam, smModemCallBackNumber=smModemCallBackNumber, sbCfgSerialNumber=sbCfgSerialNumber, arcnetTrashedTxMsgs=arcnetTrashedTxMsgs, smModemCallBackEnable=smModemCallBackEnable, bridgePortGroupGroupComment=bridgePortGroupGroupComment, bridgePortGroupGroupPortMap=bridgePortGroupGroupPortMap, fddiCfgNumberFddiPorts=fddiCfgNumberFddiPorts, backplane=backplane, bridgeUdfOffset3Offset=bridgeUdfOffset3Offset, fddiCfgModulePartNumber=fddiCfgModulePartNumber, bridgeUdfTable=bridgeUdfTable, restrictedTable=restrictedTable, sbCfgType=sbCfgType, bridgeUdfOffset1Offset=bridgeUdfOffset1Offset, bpStatsRxPkts=bpStatsRxPkts, bridgeUdfPortIndex=bridgeUdfPortIndex, bridgeAddrFilterEntry=bridgeAddrFilterEntry, sbCfgIfBd1Rev=sbCfgIfBd1Rev, artelTrap=artelTrap, arcnet=arcnet, fddiConfiguration=fddiConfiguration, boardSlotNum=boardSlotNum, fddiCfgMediaType=fddiCfgMediaType, bridgeUdfFilterIndex=bridgeUdfFilterIndex, arcnetMyReconfigCounts=arcnetMyReconfigCounts, restrictedStatus=restrictedStatus, sbPortEntry=sbPortEntry, bridgeDot1dResetDefaults=bridgeDot1dResetDefaults, bridgeUdfAddressType=bridgeUdfAddressType, bridgeUdfInitCountTable=bridgeUdfInitCountTable, sbCfgIfBd2Type=sbCfgIfBd2Type, sbPortRxBroadcastFrames=sbPortRxBroadcastFrames, bridgePktSwLastReset=bridgePktSwLastReset, smSupplyTableEntry=smSupplyTableEntry, bridgedot1dTpFdbAddress=bridgedot1dTpFdbAddress, bridgeRestrictedReset=bridgeRestrictedReset, fddiPortIndex=fddiPortIndex, smCfgFlashMemSize=smCfgFlashMemSize, nodeIpSlotAddr=nodeIpSlotAddr, sbPortTxBytes=sbPortTxBytes, smConfiguration=smConfiguration, fddiCfgPPFSerialNumber=fddiCfgPPFSerialNumber, sbCfgManufactureDate=sbCfgManufactureDate, artelTrapAddrEntry=artelTrapAddrEntry, bridgeUdfAddressValue=bridgeUdfAddressValue, sbPortTable=sbPortTable, bridgePortGroupGroupEntry=bridgePortGroupGroupEntry, smBpAsyncSlotsEnb=smBpAsyncSlotsEnb, sbCfgExecFlashRev=sbCfgExecFlashRev, bridgeUdfOffset4Offset=bridgeUdfOffset4Offset, smSupplyTableStatus=smSupplyTableStatus, sbConfiguration=sbConfiguration, sbPortRxMulticastFrames=sbPortRxMulticastFrames, bridgeAddrFilterTable=bridgeAddrFilterTable, artelTrapAddrIpDest=artelTrapAddrIpDest, bpStatsTxQOverErrors=bpStatsTxQOverErrors, sbPortInitStats=sbPortInitStats, smBpTable=smBpTable, sbCfgModuleSerialNumber=sbCfgModuleSerialNumber, sbPortRxRuntErrors=sbPortRxRuntErrors, arcnetTxPkts=arcnetTxPkts, sbPortErrorRate=sbPortErrorRate, bridgePortGroupEntry=bridgePortGroupEntry, bridgedot1dTpFdbSlot=bridgedot1dTpFdbSlot, bridgeAgeNow=bridgeAgeNow, fddiCfgType=fddiCfgType, smCfgBootRev=smCfgBootRev, bridgeUdfOffset3Value=bridgeUdfOffset3Value, sbCfg68kRamSize=sbCfg68kRamSize, bridgeUdfOffset1Operand=bridgeUdfOffset1Operand, sbPortUnidirectTable=sbPortUnidirectTable, sbPortUnidirectEntry=sbPortUnidirectEntry, smCfgExecFlashRev=smCfgExecFlashRev, boardReset=boardReset, bridgePortGroupPortTable=bridgePortGroupPortTable, sbCfgHardwareRev=sbCfgHardwareRev, sbPortUnidirectIndex=sbPortUnidirectIndex, sbPortUtilization=sbPortUtilization, fddiPort=fddiPort, smModemType=smModemType, fddiCfgFlashMemorySize=fddiCfgFlashMemorySize, arcnetRxPkts=arcnetRxPkts, smSupplyPresent=smSupplyPresent, bridgeAddrFilterBlockIndex=bridgeAddrFilterBlockIndex, boardResetCounts=boardResetCounts, fddiPortRxMcastEnabled=fddiPortRxMcastEnabled, artelTrapAddrStatus=artelTrapAddrStatus, smCfgType=smCfgType, bridgedot1dTpFdbPort=bridgedot1dTpFdbPort, bridgeUdfTypeValue=bridgeUdfTypeValue, sbPortIndex=sbPortIndex, restrictedAddr=restrictedAddr, arcnetTrashedRxMsgs=arcnetTrashedRxMsgs, artelTrapAddrTable=artelTrapAddrTable, sbCfgDualPortRamSize=sbCfgDualPortRamSize, bridgedot1dTpFdbStatus=bridgedot1dTpFdbStatus, sbCfgIfBd2NumPorts=sbCfgIfBd2NumPorts, sbCfgIfBd1SerialNum=sbCfgIfBd1SerialNum, smBpIndex=smBpIndex, sbCfg68kRev=sbCfg68kRev, sbCfgIfBd1Type=sbCfgIfBd1Type, fddiCfg960Rev=fddiCfg960Rev, artelTrapAddrCommunity=artelTrapAddrCommunity, bpStatsRxBusyTableEntry=bpStatsRxBusyTableEntry, artelTrapAddrUdpDest=artelTrapAddrUdpDest, bpStatsRxBusyTableIndex=bpStatsRxBusyTableIndex, bpStatsTxPkts=bpStatsTxPkts, bridgeUdfOffset3Mask=bridgeUdfOffset3Mask, starbridge=starbridge, bridgePortGroupPortDisplayString=bridgePortGroupPortDisplayString, fddiCfgPPFRev=fddiCfgPPFRev, bridgeUdfState=bridgeUdfState, boardClass=boardClass, smSupplyType=smSupplyType, fddiCfg68kRev=fddiCfg68kRev, smCfgModulePartNumber=smCfgModulePartNumber, smBpTableClearJabber=smBpTableClearJabber, sbPortName=sbPortName, nodeIpSlotTable=nodeIpSlotTable, smCfg68kRamSize=smCfg68kRamSize, smBpUtilization=smBpUtilization, nodeName=nodeName, bridgePortGroupTableEnable=bridgePortGroupTableEnable, sbCfgBootRev=sbCfgBootRev, bridgeUdfAddressMask=bridgeUdfAddressMask, bridgeUdfOffset4Operand=bridgeUdfOffset4Operand, bridgeDot1dEnable=bridgeDot1dEnable, arcnetBoardsPresent=arcnetBoardsPresent, smBackplane=smBackplane, sbCfgHasherCacheTagSize=sbCfgHasherCacheTagSize, sbCfgStoreFlashRev=sbCfgStoreFlashRev, smPowerSupply=smPowerSupply, smBpTableEnable=smBpTableEnable, artelTrapAddrXPortIndex=artelTrapAddrXPortIndex, bpStatsInitialize=bpStatsInitialize, fddiCfgPPFSoftwareRev=fddiCfgPPFSoftwareRev, fddiIpFragEnabled=fddiIpFragEnabled, sbCfgFlashMemorySize=sbCfgFlashMemorySize, boardSnmpMibVersion=boardSnmpMibVersion, sbCfgSonicRamSize=sbCfgSonicRamSize, fddiCfgHasherCacheTagSize=fddiCfgHasherCacheTagSize, restrictedEntry=restrictedEntry, fddiCfg68kRamSize=fddiCfg68kRamSize, smModem=smModem, smCfgManufactureDate=smCfgManufactureDate, fddiPortTable=fddiPortTable, sbPortFramesPerSecond=sbPortFramesPerSecond, boardIpAddr=boardIpAddr, board=board, bridgeUdfInitCountEntry=bridgeUdfInitCountEntry, sbCfgNumberIfBoards=sbCfgNumberIfBoards, bridgeUdfOffset1Value=bridgeUdfOffset1Value, bridgeUdfMatchCounts=bridgeUdfMatchCounts, fddiCfgSerialNumber=fddiCfgSerialNumber, arcnetNakCnts=arcnetNakCnts, bridgeUdfOffset2Value=bridgeUdfOffset2Value, nodeColdBoot=nodeColdBoot, bridgeUdfOffset2Operand=bridgeUdfOffset2Operand, smBpArbTimer=smBpArbTimer, smBpSyncSlotsEnb=smBpSyncSlotsEnb, artel=artel, bridgePortGroupPortIndex=bridgePortGroupPortIndex, bridgePortGroupGroupTable=bridgePortGroupGroupTable, fddiCfgSonicRamSize=fddiCfgSonicRamSize, sbCfgIfBd1NumPorts=sbCfgIfBd1NumPorts, bridgePortGroupPortEntry=bridgePortGroupPortEntry, bridgedot1dTpFdbAge=bridgedot1dTpFdbAge, smCfg68kRev=smCfg68kRev, fddiCfgHardwareRev=fddiCfgHardwareRev, fddiCfgPPFType=fddiCfgPPFType, node=node, bridgeUdfEntry=bridgeUdfEntry, bridgeUdfInitMatchCount=bridgeUdfInitMatchCount, smCfgStoreFlashRev=smCfgStoreFlashRev, nodeMacSlotMap=nodeMacSlotMap, fddiCfgStoreFlashRev=fddiCfgStoreFlashRev, fddiIpFragmentation=fddiIpFragmentation, fddi=fddi, bpStatsRxErrors=bpStatsRxErrors, bridgePortGroupTable=bridgePortGroupTable, fddiCfgBootRev=fddiCfgBootRev, smBpEntry=smBpEntry, fddiPortRingOpCounts=fddiPortRingOpCounts, bpStatsOperState=bpStatsOperState, fddiCfg960RamSize=fddiCfg960RamSize, fddiCfgExecFlashRev=fddiCfgExecFlashRev, bridgeUdfComment=bridgeUdfComment, bpStatsRxBusyTableErrors=bpStatsRxBusyTableErrors, nodeIpSlotEntry=nodeIpSlotEntry, arcnetReconfigCounts=arcnetReconfigCounts, bridgeUdfOffset1Mask=bridgeUdfOffset1Mask, fddiPortEntry=fddiPortEntry, bridgeUdfOffset4Mask=bridgeUdfOffset4Mask, bridge=bridge, bpStatsEnabled=bpStatsEnabled, smBpTableJabber=smBpTableJabber, bridgeResetPktSwCount=bridgeResetPktSwCount, bridgeUdfTypeOperand=bridgeUdfTypeOperand, bpStatsTxErrors=bpStatsTxErrors, sbCfgIfBd2SerialNum=sbCfgIfBd2SerialNum, fddiCfgManufactureDate=fddiCfgManufactureDate, smCfgSerialNumber=smCfgSerialNumber, smCfgHardwareRev=smCfgHardwareRev, smSupplyTable=smSupplyTable, bridgeUdfCountInitMatchCount=bridgeUdfCountInitMatchCount, fddiCfgModuleSerialNumber=fddiCfgModuleSerialNumber, bridgePortGroupTablePortIndex=bridgePortGroupTablePortIndex, bridgePortGroupGroupIndex=bridgePortGroupGroupIndex, bridgeAddrFilterBlockData=bridgeAddrFilterBlockData, bridgeUdfOffset4Value=bridgeUdfOffset4Value, bridgeUdfTypeMask=bridgeUdfTypeMask, boardResetNvRam=boardResetNvRam, bridgePortGroupEnable=bridgePortGroupEnable, bridgeUdfCountPortIndex=bridgeUdfCountPortIndex, smBpType=smBpType, smBpMaxPktSize=smBpMaxPktSize, sbCfgIfBd2Rev=sbCfgIfBd2Rev, bridgeUdfOffset2Offset=bridgeUdfOffset2Offset, fddiCfgDualPortRamSize=fddiCfgDualPortRamSize, sbCfg960RamSize=sbCfg960RamSize, fddiPortFrameCheckErrs=fddiPortFrameCheckErrs, boardLedStatus=boardLedStatus, bpStatsRxBusyTable=bpStatsRxBusyTable, bridgedot1dTpFdbEntry=bridgedot1dTpFdbEntry, bridgedot1dTpFdbTable=bridgedot1dTpFdbTable, bridgeUdfOffset3Operand=bridgeUdfOffset3Operand, bridgePortGroupTableGroupIndex=bridgePortGroupTableGroupIndex, smCfgModuleSerialNumber=smCfgModuleSerialNumber, smSupplyDcOk=smSupplyDcOk, sbPortRxBytes=sbPortRxBytes, sbPortUnidirectEnable=sbPortUnidirectEnable, sbPort=sbPort, sbPortRxBroadcastStatus=sbPortRxBroadcastStatus, smCfgMacAddr=smCfgMacAddr, smSupplyTableIndex=smSupplyTableIndex, artelTrapReportString=artelTrapReportString, smSupplyAcOk=smSupplyAcOk, sbCfg960Rev=sbCfg960Rev, sbCfgModulePartNumber=sbCfgModulePartNumber, fddiPortNotCopiedOffRingErrs=fddiPortNotCopiedOffRingErrs, nodeIpSlotIndex=nodeIpSlotIndex, bridgeResetStatic=bridgeResetStatic, bridgeUdfAddressOperand=bridgeUdfAddressOperand, galactica=galactica, bridgeUdfOffset2Mask=bridgeUdfOffset2Mask, systemManagement=systemManagement)
