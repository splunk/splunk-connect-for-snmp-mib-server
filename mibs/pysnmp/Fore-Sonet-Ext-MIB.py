#
# PySNMP MIB module Fore-Sonet-Ext-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/Fore-Sonet-Ext-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 19:03:56 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, ObjectIdentifier, Integer = mibBuilder.importSymbols("ASN1", "OctetString", "ObjectIdentifier", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsIntersection, SingleValueConstraint, ConstraintsUnion, ValueRangeConstraint, ValueSizeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsIntersection", "SingleValueConstraint", "ConstraintsUnion", "ValueRangeConstraint", "ValueSizeConstraint")
asx, = mibBuilder.importSymbols("Fore-Common-MIB", "asx")
trapLogIndex, = mibBuilder.importSymbols("Fore-TrapLog-MIB", "trapLogIndex")
ifName, ifIndex = mibBuilder.importSymbols("IF-MIB", "ifName", "ifIndex")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
Counter64, MibScalar, MibTable, MibTableRow, MibTableColumn, Bits, IpAddress, ObjectIdentity, TimeTicks, Gauge32, Integer32, Counter32, NotificationType, iso, MibIdentifier, ModuleIdentity, Unsigned32 = mibBuilder.importSymbols("SNMPv2-SMI", "Counter64", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Bits", "IpAddress", "ObjectIdentity", "TimeTicks", "Gauge32", "Integer32", "Counter32", "NotificationType", "iso", "MibIdentifier", "ModuleIdentity", "Unsigned32")
TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString")
sonetFarEndPathIntervalNumber, sonetFarEndVTIntervalNumber, sonetPathIntervalNumber, sonetFarEndLineIntervalNumber, sonetVTIntervalNumber, sonetLineIntervalNumber, sonetSectionIntervalNumber = mibBuilder.importSymbols("SONET-MIB", "sonetFarEndPathIntervalNumber", "sonetFarEndVTIntervalNumber", "sonetPathIntervalNumber", "sonetFarEndLineIntervalNumber", "sonetVTIntervalNumber", "sonetLineIntervalNumber", "sonetSectionIntervalNumber")
foreSonetMib = ModuleIdentity((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 1, 14))
if mibBuilder.loadTexts: foreSonetMib.setLastUpdated('9911050000Z')
if mibBuilder.loadTexts: foreSonetMib.setOrganization('FORE')
foreSonetMedium = MibIdentifier((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 1, 14, 1))
foreSonetSection = MibIdentifier((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 1, 14, 2))
foreSonetLine = MibIdentifier((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 1, 14, 3))
foreSonetPath = MibIdentifier((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 1, 14, 4))
foreSonetVT = MibIdentifier((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 1, 14, 5))
foreSonetSPE = MibIdentifier((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 1, 14, 6))
foreSonetFarEndLine = MibIdentifier((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 1, 14, 7))
foreSonetFarEndPath = MibIdentifier((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 1, 14, 8))
foreSonetFarEndVT = MibIdentifier((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 1, 14, 9))
foreSonetMediumConfigTable = MibTable((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 1, 14, 1, 1), )
if mibBuilder.loadTexts: foreSonetMediumConfigTable.setStatus('current')
foreSonetMediumConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 1, 14, 1, 1, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: foreSonetMediumConfigEntry.setStatus('current')
foreSonetMediumConfigLoopbackMode = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 1, 14, 1, 1, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("sonetNoLoop", 1), ("sonetLineLoop", 2), ("sonetDiagLoop", 3), ("sonetOtherLoop", 4))).clone('sonetNoLoop')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: foreSonetMediumConfigLoopbackMode.setStatus('current')
foreSonetMediumConfigTxClockSource = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 1, 14, 1, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("rxTiming", 1), ("localTiming", 2))).clone('localTiming')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: foreSonetMediumConfigTxClockSource.setStatus('current')
foreSonetSectionTotalTable = MibTable((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 1, 14, 2, 2), )
if mibBuilder.loadTexts: foreSonetSectionTotalTable.setStatus('current')
foreSonetSectionTotalEntry = MibTableRow((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 1, 14, 2, 2, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: foreSonetSectionTotalEntry.setStatus('current')
foreSonetSectionTotalBIPs = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 1, 14, 2, 2, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: foreSonetSectionTotalBIPs.setStatus('current')
foreSonetSectionTotalLOSs = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 1, 14, 2, 2, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: foreSonetSectionTotalLOSs.setStatus('current')
foreSonetSectionTotalLOFs = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 1, 14, 2, 2, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: foreSonetSectionTotalLOFs.setStatus('current')
foreSonetSectionDiagnosticsTable = MibTable((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 1, 14, 2, 3), )
if mibBuilder.loadTexts: foreSonetSectionDiagnosticsTable.setStatus('current')
foreSonetSectionDiagnosticsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 1, 14, 2, 3, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: foreSonetSectionDiagnosticsEntry.setStatus('current')
foreSonetSectionDiagnosticsFraming = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 1, 14, 2, 3, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("on", 1), ("off", 2), ("momentary", 3))).clone('off')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: foreSonetSectionDiagnosticsFraming.setStatus('current')
foreSonetSectionDiagnosticsB1 = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 1, 14, 2, 3, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("on", 1), ("off", 2), ("momentary", 3))).clone('off')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: foreSonetSectionDiagnosticsB1.setStatus('current')
foreSonetSectionDiagnosticsDisableTxScrambling = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 1, 14, 2, 3, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("on", 1), ("off", 2))).clone('off')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: foreSonetSectionDiagnosticsDisableTxScrambling.setStatus('current')
foreSonetSectionDiagnosticsDisableRxDescrambling = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 1, 14, 2, 3, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("on", 1), ("off", 2))).clone('off')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: foreSonetSectionDiagnosticsDisableRxDescrambling.setStatus('current')
foreSonetSectionDiagnosticsLOS = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 1, 14, 2, 3, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("on", 1), ("off", 2))).clone('off')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: foreSonetSectionDiagnosticsLOS.setStatus('current')
foreSonetSectionCurrentTable = MibTable((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 1, 14, 2, 4), )
if mibBuilder.loadTexts: foreSonetSectionCurrentTable.setStatus('current')
foreSonetSectionCurrentEntry = MibTableRow((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 1, 14, 2, 4, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: foreSonetSectionCurrentEntry.setStatus('current')
foreSonetSectionCurrentBBEs = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 1, 14, 2, 4, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: foreSonetSectionCurrentBBEs.setStatus('current')
foreSonetSectionIntervalTable = MibTable((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 1, 14, 2, 5), )
if mibBuilder.loadTexts: foreSonetSectionIntervalTable.setStatus('current')
foreSonetSectionIntervalEntry = MibTableRow((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 1, 14, 2, 5, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "SONET-MIB", "sonetSectionIntervalNumber"))
if mibBuilder.loadTexts: foreSonetSectionIntervalEntry.setStatus('current')
foreSonetSectionIntervalBBEs = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 1, 14, 2, 5, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: foreSonetSectionIntervalBBEs.setStatus('current')
foreSonetSectionIntervalESR = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 1, 14, 2, 5, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: foreSonetSectionIntervalESR.setStatus('current')
foreSonetSectionIntervalSESR = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 1, 14, 2, 5, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: foreSonetSectionIntervalSESR.setStatus('current')
foreSonetSectionIntervalBBER = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 1, 14, 2, 5, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: foreSonetSectionIntervalBBER.setStatus('current')
foreSonetLineCurrentTable = MibTable((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 1, 14, 3, 4), )
if mibBuilder.loadTexts: foreSonetLineCurrentTable.setStatus('current')
foreSonetLineCurrentEntry = MibTableRow((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 1, 14, 3, 4, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: foreSonetLineCurrentEntry.setStatus('current')
foreSonetLineCurrentBBEs = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 1, 14, 3, 4, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: foreSonetLineCurrentBBEs.setStatus('current')
foreSonetLineIntervalTable = MibTable((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 1, 14, 3, 5), )
if mibBuilder.loadTexts: foreSonetLineIntervalTable.setStatus('current')
foreSonetLineIntervalEntry = MibTableRow((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 1, 14, 3, 5, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "SONET-MIB", "sonetLineIntervalNumber"))
if mibBuilder.loadTexts: foreSonetLineIntervalEntry.setStatus('current')
foreSonetLineIntervalBBEs = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 1, 14, 3, 5, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: foreSonetLineIntervalBBEs.setStatus('current')
foreSonetLineIntervalESR = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 1, 14, 3, 5, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: foreSonetLineIntervalESR.setStatus('current')
foreSonetLineIntervalSESR = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 1, 14, 3, 5, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: foreSonetLineIntervalSESR.setStatus('current')
foreSonetLineIntervalBBER = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 1, 14, 3, 5, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: foreSonetLineIntervalBBER.setStatus('current')
foreSonetFarEndLineCurrentTable = MibTable((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 1, 14, 7, 1), )
if mibBuilder.loadTexts: foreSonetFarEndLineCurrentTable.setStatus('current')
foreSonetFarEndLineCurrentEntry = MibTableRow((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 1, 14, 7, 1, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: foreSonetFarEndLineCurrentEntry.setStatus('current')
foreSonetFarEndLineCurrentBBEs = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 1, 14, 7, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: foreSonetFarEndLineCurrentBBEs.setStatus('current')
foreSonetFarEndLineIntervalTable = MibTable((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 1, 14, 7, 2), )
if mibBuilder.loadTexts: foreSonetFarEndLineIntervalTable.setStatus('current')
foreSonetFarEndLineIntervalEntry = MibTableRow((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 1, 14, 7, 2, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "SONET-MIB", "sonetFarEndLineIntervalNumber"))
if mibBuilder.loadTexts: foreSonetFarEndLineIntervalEntry.setStatus('current')
foreSonetFarEndLineIntervalBBEs = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 1, 14, 7, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: foreSonetFarEndLineIntervalBBEs.setStatus('current')
foreSonetFarEndLineIntervalESR = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 1, 14, 7, 2, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: foreSonetFarEndLineIntervalESR.setStatus('current')
foreSonetFarEndLineIntervalSESR = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 1, 14, 7, 2, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: foreSonetFarEndLineIntervalSESR.setStatus('current')
foreSonetFarEndLineIntervalBBER = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 1, 14, 7, 2, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: foreSonetFarEndLineIntervalBBER.setStatus('current')
foreSonetPathIntervalTable = MibTable((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 1, 14, 4, 6), )
if mibBuilder.loadTexts: foreSonetPathIntervalTable.setStatus('current')
foreSonetPathIntervalEntry = MibTableRow((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 1, 14, 4, 6, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "SONET-MIB", "sonetPathIntervalNumber"))
if mibBuilder.loadTexts: foreSonetPathIntervalEntry.setStatus('current')
foreSonetPathIntervalBBEs = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 1, 14, 4, 6, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: foreSonetPathIntervalBBEs.setStatus('current')
foreSonetPathIntervalESR = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 1, 14, 4, 6, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: foreSonetPathIntervalESR.setStatus('current')
foreSonetPathIntervalSESR = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 1, 14, 4, 6, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: foreSonetPathIntervalSESR.setStatus('current')
foreSonetPathIntervalBBER = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 1, 14, 4, 6, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: foreSonetPathIntervalBBER.setStatus('current')
foreSonetFarEndPathCurrentTable = MibTable((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 1, 14, 8, 1), )
if mibBuilder.loadTexts: foreSonetFarEndPathCurrentTable.setStatus('current')
foreSonetFarEndPathCurrentEntry = MibTableRow((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 1, 14, 8, 1, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: foreSonetFarEndPathCurrentEntry.setStatus('current')
foreSonetFarEndPathCurrentBBEs = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 1, 14, 8, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: foreSonetFarEndPathCurrentBBEs.setStatus('current')
foreSonetFarEndPathIntervalTable = MibTable((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 1, 14, 8, 2), )
if mibBuilder.loadTexts: foreSonetFarEndPathIntervalTable.setStatus('current')
foreSonetFarEndPathIntervalEntry = MibTableRow((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 1, 14, 8, 2, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "SONET-MIB", "sonetFarEndPathIntervalNumber"))
if mibBuilder.loadTexts: foreSonetFarEndPathIntervalEntry.setStatus('current')
foreSonetFarEndPathIntervalBBEs = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 1, 14, 8, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: foreSonetFarEndPathIntervalBBEs.setStatus('current')
foreSonetFarEndPathIntervalESR = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 1, 14, 8, 2, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: foreSonetFarEndPathIntervalESR.setStatus('current')
foreSonetFarEndPathIntervalSESR = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 1, 14, 8, 2, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: foreSonetFarEndPathIntervalSESR.setStatus('current')
foreSonetFarEndPathIntervalBBER = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 1, 14, 8, 2, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: foreSonetFarEndPathIntervalBBER.setStatus('current')
foreSonetVTCurrentTable = MibTable((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 1, 14, 5, 4), )
if mibBuilder.loadTexts: foreSonetVTCurrentTable.setStatus('current')
foreSonetVTCurrentEntry = MibTableRow((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 1, 14, 5, 4, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: foreSonetVTCurrentEntry.setStatus('current')
foreSonetVTCurrentBBEs = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 1, 14, 5, 4, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: foreSonetVTCurrentBBEs.setStatus('current')
foreSonetVTIntervalTable = MibTable((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 1, 14, 5, 5), )
if mibBuilder.loadTexts: foreSonetVTIntervalTable.setStatus('current')
foreSonetVTIntervalEntry = MibTableRow((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 1, 14, 5, 5, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "SONET-MIB", "sonetVTIntervalNumber"))
if mibBuilder.loadTexts: foreSonetVTIntervalEntry.setStatus('current')
foreSonetVTIntervalBBEs = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 1, 14, 5, 5, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: foreSonetVTIntervalBBEs.setStatus('current')
foreSonetVTIntervalESR = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 1, 14, 5, 5, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: foreSonetVTIntervalESR.setStatus('current')
foreSonetVTIntervalSESR = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 1, 14, 5, 5, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: foreSonetVTIntervalSESR.setStatus('current')
foreSonetVTIntervalBBER = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 1, 14, 5, 5, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: foreSonetVTIntervalBBER.setStatus('current')
foreSonetFarEndVTCurrentTable = MibTable((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 1, 14, 9, 1), )
if mibBuilder.loadTexts: foreSonetFarEndVTCurrentTable.setStatus('current')
foreSonetFarEndVTCurrentEntry = MibTableRow((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 1, 14, 9, 1, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: foreSonetFarEndVTCurrentEntry.setStatus('current')
foreSonetFarEndVTCurrentBBEs = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 1, 14, 9, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: foreSonetFarEndVTCurrentBBEs.setStatus('current')
foreSonetFarEndVTIntervalTable = MibTable((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 1, 14, 9, 2), )
if mibBuilder.loadTexts: foreSonetFarEndVTIntervalTable.setStatus('current')
foreSonetFarEndVTIntervalEntry = MibTableRow((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 1, 14, 9, 2, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "SONET-MIB", "sonetFarEndVTIntervalNumber"))
if mibBuilder.loadTexts: foreSonetFarEndVTIntervalEntry.setStatus('current')
foreSonetFarEndVTIntervalBBEs = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 1, 14, 9, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: foreSonetFarEndVTIntervalBBEs.setStatus('current')
foreSonetFarEndVTIntervalESR = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 1, 14, 9, 2, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: foreSonetFarEndVTIntervalESR.setStatus('current')
foreSonetFarEndVTIntervalSESR = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 1, 14, 9, 2, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: foreSonetFarEndVTIntervalSESR.setStatus('current')
foreSonetFarEndVTIntervalBBER = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 1, 14, 9, 2, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: foreSonetFarEndVTIntervalBBER.setStatus('current')
foreSonetLineConfigTable = MibTable((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 1, 14, 3, 1), )
if mibBuilder.loadTexts: foreSonetLineConfigTable.setStatus('current')
foreSonetLineConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 1, 14, 3, 1, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: foreSonetLineConfigEntry.setStatus('current')
foreSonetLineBipThrSeconds = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 1, 14, 3, 1, 1, 2), Integer32().clone(10)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: foreSonetLineBipThrSeconds.setStatus('current')
foreSonetLineBipThrErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 1, 14, 3, 1, 1, 3), Integer32().clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: foreSonetLineBipThrErrors.setStatus('current')
foreSonetLineBipFailEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 1, 14, 3, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: foreSonetLineBipFailEnable.setStatus('current')
foreSonetLineSignalDegradeBer = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 1, 14, 3, 1, 1, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: foreSonetLineSignalDegradeBer.setStatus('current')
foreSonetLineSignalFailBer = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 1, 14, 3, 1, 1, 6), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: foreSonetLineSignalFailBer.setStatus('current')
foreSonetLineBerErrorModel = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 1, 14, 3, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("errorModelNone", 0), ("errorModelRandom", 1), ("errorModelBurst", 2))).clone('errorModelRandom')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: foreSonetLineBerErrorModel.setStatus('current')
foreSonetLineBerState = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 1, 14, 3, 1, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("berStateOk", 0), ("berStateSigDegrade", 1), ("berStateSigFail", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: foreSonetLineBerState.setStatus('current')
foreSonetLineTotalTable = MibTable((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 1, 14, 3, 2), )
if mibBuilder.loadTexts: foreSonetLineTotalTable.setStatus('current')
foreSonetLineTotalEntry = MibTableRow((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 1, 14, 3, 2, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: foreSonetLineTotalEntry.setStatus('current')
foreSonetLineTotalBIPs = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 1, 14, 3, 2, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: foreSonetLineTotalBIPs.setStatus('current')
foreSonetLineTotalFEBEs = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 1, 14, 3, 2, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: foreSonetLineTotalFEBEs.setStatus('current')
foreSonetLineTotalAISs = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 1, 14, 3, 2, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: foreSonetLineTotalAISs.setStatus('current')
foreSonetLineTotalRDIs = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 1, 14, 3, 2, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: foreSonetLineTotalRDIs.setStatus('current')
foreSonetLineDiagnosticsTable = MibTable((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 1, 14, 3, 3), )
if mibBuilder.loadTexts: foreSonetLineDiagnosticsTable.setStatus('current')
foreSonetLineDiagnosticsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 1, 14, 3, 3, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: foreSonetLineDiagnosticsEntry.setStatus('current')
foreSonetLineDiagnosticsLAIS = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 1, 14, 3, 3, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("on", 1), ("off", 2))).clone('off')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: foreSonetLineDiagnosticsLAIS.setStatus('current')
foreSonetLineDiagnosticsB2 = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 1, 14, 3, 3, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("on", 1), ("off", 2), ("momentary", 3))).clone('off')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: foreSonetLineDiagnosticsB2.setStatus('current')
foreSonetLineDiagnosticsAPS = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 1, 14, 3, 3, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("on", 1), ("off", 2))).clone('off')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: foreSonetLineDiagnosticsAPS.setStatus('current')
foreSonetLineDiagnosticsK1channel = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 1, 14, 3, 3, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15))).clone(namedValues=NamedValues(("null", 0), ("working1", 1), ("working2", 2), ("working3", 3), ("working4", 4), ("working5", 5), ("working6", 6), ("working7", 7), ("working8", 8), ("working9", 9), ("working10", 10), ("working11", 11), ("working12", 12), ("working13", 13), ("working14", 14), ("extraTraffic", 15))).clone('null')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: foreSonetLineDiagnosticsK1channel.setStatus('current')
foreSonetLineDiagnosticsK1request = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 1, 14, 3, 3, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(15, 14, 13, 12, 11, 10, 8, 6, 4, 2, 1, 0))).clone(namedValues=NamedValues(("lockout", 15), ("forcedsw", 14), ("sfhp", 13), ("sflp", 12), ("sdhp", 11), ("sdlp", 10), ("manualsw", 8), ("wtr", 6), ("exercise", 4), ("rr", 2), ("donotrevert", 1), ("noreq", 0))).clone('noreq')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: foreSonetLineDiagnosticsK1request.setStatus('current')
foreSonetLineDiagnosticsK2channel = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 1, 14, 3, 3, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15))).clone(namedValues=NamedValues(("null", 0), ("working1", 1), ("working2", 2), ("working3", 3), ("working4", 4), ("working5", 5), ("working6", 6), ("working7", 7), ("working8", 8), ("working9", 9), ("working10", 10), ("working11", 11), ("working12", 12), ("working13", 13), ("working14", 14), ("extraTraffic", 15))).clone('null')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: foreSonetLineDiagnosticsK2channel.setStatus('current')
foreSonetLineDiagnosticsK2Architecture = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 1, 14, 3, 3, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("oneplusone", 0), ("onen", 1))).clone('oneplusone')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: foreSonetLineDiagnosticsK2Architecture.setStatus('current')
foreSonetLineDiagnosticsK2Mode = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 1, 14, 3, 3, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(4, 5))).clone(namedValues=NamedValues(("unidirectional", 4), ("bidirectional", 5))).clone('unidirectional')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: foreSonetLineDiagnosticsK2Mode.setStatus('current')
foreSonetLineDiagnosticsLRDI = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 1, 14, 3, 3, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 4))).clone(namedValues=NamedValues(("on", 1), ("off", 2), ("auto", 4))).clone('auto')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: foreSonetLineDiagnosticsLRDI.setStatus('current')
foreSonetLineDiagnosticsLREI = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 1, 14, 3, 3, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 4))).clone(namedValues=NamedValues(("on", 1), ("off", 2), ("auto", 4))).clone('auto')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: foreSonetLineDiagnosticsLREI.setStatus('current')
foreSonetPathConfigTable = MibTable((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 1, 14, 4, 1), )
if mibBuilder.loadTexts: foreSonetPathConfigTable.setStatus('current')
foreSonetPathConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 1, 14, 4, 1, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: foreSonetPathConfigEntry.setStatus('current')
foreSonetPathRxSignalLabel = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 1, 14, 4, 1, 1, 2), Integer32().clone(19)).setMaxAccess("readonly")
if mibBuilder.loadTexts: foreSonetPathRxSignalLabel.setStatus('current')
foreSonetPathTxSignalLabel = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 1, 14, 4, 1, 1, 3), Integer32().clone(19)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: foreSonetPathTxSignalLabel.setStatus('current')
foreSonetPathLoopbackMode = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 1, 14, 4, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("sonetPathNoLoop", 1), ("sonetPathLineLoop", 2), ("sonetPathDiagLoop", 3), ("sonetPathOtherLoop", 4))).clone('sonetPathNoLoop')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: foreSonetPathLoopbackMode.setStatus('current')
foreSonetPathTotalTable = MibTable((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 1, 14, 4, 2), )
if mibBuilder.loadTexts: foreSonetPathTotalTable.setStatus('current')
foreSonetPathTotalEntry = MibTableRow((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 1, 14, 4, 2, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: foreSonetPathTotalEntry.setStatus('current')
foreSonetPathTotalBIPs = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 1, 14, 4, 2, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: foreSonetPathTotalBIPs.setStatus('current')
foreSonetPathTotalLOPs = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 1, 14, 4, 2, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: foreSonetPathTotalLOPs.setStatus('current')
foreSonetPathTotalAISs = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 1, 14, 4, 2, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: foreSonetPathTotalAISs.setStatus('current')
foreSonetPathTotalRDIs = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 1, 14, 4, 2, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: foreSonetPathTotalRDIs.setStatus('current')
foreSonetPathTotalUNEQs = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 1, 14, 4, 2, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: foreSonetPathTotalUNEQs.setStatus('current')
foreSonetPathTotalPLMs = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 1, 14, 4, 2, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: foreSonetPathTotalPLMs.setStatus('current')
foreSonetPathTotalFEBEs = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 1, 14, 4, 2, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: foreSonetPathTotalFEBEs.setStatus('current')
foreSonetPathCurrentTable = MibTable((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 1, 14, 4, 3), )
if mibBuilder.loadTexts: foreSonetPathCurrentTable.setStatus('current')
foreSonetPathCurrentEntry = MibTableRow((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 1, 14, 4, 3, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: foreSonetPathCurrentEntry.setStatus('current')
foreSonetPathCurrentStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 1, 14, 4, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: foreSonetPathCurrentStatus.setStatus('current')
foreSonetPathCurrentBBEs = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 1, 14, 4, 3, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: foreSonetPathCurrentBBEs.setStatus('current')
foreSonetPathDiagnosticsTable = MibTable((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 1, 14, 4, 4), )
if mibBuilder.loadTexts: foreSonetPathDiagnosticsTable.setStatus('current')
foreSonetPathDiagnosticsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 1, 14, 4, 4, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: foreSonetPathDiagnosticsEntry.setStatus('current')
foreSonetPathDiagnosticsC2 = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 1, 14, 4, 4, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("on", 1), ("off", 2))).clone('off')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: foreSonetPathDiagnosticsC2.setStatus('current')
foreSonetPathDiagnosticsC2Value = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 1, 14, 4, 4, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 18, 19, 20, 21, 22, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252))).clone(namedValues=NamedValues(("unequipped", 0), ("equippednonspecPL", 1), ("vtstructSTSSPE", 2), ("lockedVTmode", 3), ("asyncDS3mapping", 4), ("asyncDS4na", 18), ("atmmapping", 19), ("dqdbmapping", 20), ("asyncfddimapping", 21), ("hdlcwithscrambling", 22), ("sts1with1vtxPD", 225), ("sts1with2vtxPD", 226), ("sts1with3vtxPD", 227), ("sts1with4vtxPD", 228), ("sts1with5vtxPD", 229), ("sts1with6vtxPD", 230), ("sts1with7vtxPD", 231), ("sts1with8vtxPD", 232), ("sts1with9vtxPD", 233), ("sts1with10vtxPD", 234), ("sts1with11vtxPD", 235), ("sts1with12vtxPD", 236), ("sts1with13vtxPD", 237), ("sts1with14vtxPD", 238), ("sts1with15vtxPD", 239), ("sts1with16vtxPD", 240), ("sts1with17vtxPD", 241), ("sts1with18vtxPD", 242), ("sts1with19vtxPD", 243), ("sts1with20vtxPD", 244), ("sts1with21vtxPD", 245), ("sts1with22vtxPD", 246), ("sts1with23vtxPD", 247), ("sts1with24vtxPD", 248), ("sts1with25vtxPD", 249), ("sts1with26vtxPD", 250), ("sts1with27vtxPD", 251), ("payloaddefect", 252))).clone('equippednonspecPL')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: foreSonetPathDiagnosticsC2Value.setStatus('current')
foreSonetPathDiagnosticsB3 = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 1, 14, 4, 4, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("on", 1), ("off", 2), ("momentary", 3))).clone('off')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: foreSonetPathDiagnosticsB3.setStatus('current')
foreSonetPathDiagnosticsPREI = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 1, 14, 4, 4, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 4))).clone(namedValues=NamedValues(("on", 1), ("off", 2), ("auto", 4))).clone('auto')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: foreSonetPathDiagnosticsPREI.setStatus('current')
foreSonetPathDiagnosticsPAIS = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 1, 14, 4, 4, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("on", 1), ("off", 2))).clone('off')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: foreSonetPathDiagnosticsPAIS.setStatus('current')
foreSonetPathDiagnosticsPERDI = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 1, 14, 4, 4, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 4))).clone(namedValues=NamedValues(("on", 1), ("auto", 4))).clone('auto')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: foreSonetPathDiagnosticsPERDI.setStatus('current')
foreSonetPathDiagnosticsERDIValue = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 1, 14, 4, 4, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(4, 5, 6, 2, 1, 0))).clone(namedValues=NamedValues(("sonetPathERDIOnebitRDI", 4), ("sonetPathERDIserverDefect", 5), ("sonetPathERDIconnDefect", 6), ("sonetPathERDIpayloadDefect", 2), ("sonetPathERDInoDefect", 1), ("sonetPathERDInoPrionoDefect", 0))).clone('sonetPathERDInoDefect')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: foreSonetPathDiagnosticsERDIValue.setStatus('current')
foreSonetPathDiagnosticsLOP = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 1, 14, 4, 4, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("on", 1), ("off", 2))).clone('off')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: foreSonetPathDiagnosticsLOP.setStatus('current')
foreSonetPathGroupConfigTable = MibTable((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 1, 14, 4, 5), )
if mibBuilder.loadTexts: foreSonetPathGroupConfigTable.setStatus('current')
foreSonetPathGroupConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 1, 14, 4, 5, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "Fore-Sonet-Ext-MIB", "foreVTGroup"))
if mibBuilder.loadTexts: foreSonetPathGroupConfigEntry.setStatus('current')
foreVTGroup = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 1, 14, 4, 5, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: foreVTGroup.setStatus('current')
foreVTWidth = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 1, 14, 4, 5, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("vtWidth15VC11", 1), ("vtWidth2VC12", 2), ("vtWidth3", 3), ("vtWidth6VC2", 4), ("vtWidth6c", 5))).clone('vtWidth15VC11')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: foreVTWidth.setStatus('current')
foreSonetVTConfigTable = MibTable((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 1, 14, 5, 1), )
if mibBuilder.loadTexts: foreSonetVTConfigTable.setStatus('current')
foreSonetVTConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 1, 14, 5, 1, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: foreSonetVTConfigEntry.setStatus('current')
foreSonetVTLoopbackMode = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 1, 14, 5, 1, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("sonetVTNoLoop", 1), ("sonetVTLineLoop", 2), ("sonetVTDiagLoop", 3), ("sonetVTOtherLoop", 4))).clone('sonetVTNoLoop')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: foreSonetVTLoopbackMode.setStatus('current')
foreSonetVTTotalTable = MibTable((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 1, 14, 5, 2), )
if mibBuilder.loadTexts: foreSonetVTTotalTable.setStatus('current')
foreSonetVTTotalEntry = MibTableRow((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 1, 14, 5, 2, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: foreSonetVTTotalEntry.setStatus('current')
foreSonetVTTotalBIPs = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 1, 14, 5, 2, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: foreSonetVTTotalBIPs.setStatus('current')
foreSonetVTTotalREIs = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 1, 14, 5, 2, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: foreSonetVTTotalREIs.setStatus('current')
foreSonetVTTotalLOPs = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 1, 14, 5, 2, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: foreSonetVTTotalLOPs.setStatus('current')
foreSonetVTTotalAISs = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 1, 14, 5, 2, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: foreSonetVTTotalAISs.setStatus('current')
foreSonetVTTotalRDIs = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 1, 14, 5, 2, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: foreSonetVTTotalRDIs.setStatus('current')
foreSonetVTTotalUNEQs = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 1, 14, 5, 2, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: foreSonetVTTotalUNEQs.setStatus('current')
foreSonetVTTotalPLMs = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 1, 14, 5, 2, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: foreSonetVTTotalPLMs.setStatus('current')
foreSonetVTDiagnosticsTable = MibTable((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 1, 14, 5, 3), )
if mibBuilder.loadTexts: foreSonetVTDiagnosticsTable.setStatus('current')
foreSonetVTDiagnosticsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 1, 14, 5, 3, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: foreSonetVTDiagnosticsEntry.setStatus('current')
foreSonetVtDiagnosticsBIP = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 1, 14, 5, 3, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("on", 1), ("off", 2), ("momentary", 3))).clone('off')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: foreSonetVtDiagnosticsBIP.setStatus('current')
foreSonetVtDiagnosticsRDI = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 1, 14, 5, 3, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("on", 1), ("off", 2), ("momentary", 3), ("auto", 4))).clone('auto')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: foreSonetVtDiagnosticsRDI.setStatus('current')
foreSonetVtDiagnosticsRFI = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 1, 14, 5, 3, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("on", 1), ("off", 2), ("momentary", 3), ("auto", 4))).clone('auto')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: foreSonetVtDiagnosticsRFI.setStatus('current')
foreSonetVtDiagnosticsAIS = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 1, 14, 5, 3, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("on", 1), ("off", 2), ("momentary", 3), ("auto", 4))).clone('auto')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: foreSonetVtDiagnosticsAIS.setStatus('current')
foreSonetVtDiagnosticsLOP = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 1, 14, 5, 3, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("on", 1), ("off", 2), ("momentary", 3))).clone('off')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: foreSonetVtDiagnosticsLOP.setStatus('current')
foreSonetVtDiagnosticsLabel = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 1, 14, 5, 3, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("on", 1), ("off", 2))).clone('off')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: foreSonetVtDiagnosticsLabel.setStatus('current')
foreSonetVtDiagnosticsLabelValue = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 1, 14, 5, 3, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4))).clone(namedValues=NamedValues(("unequipped", 0), ("equippednonspec", 1), ("asynchronous", 2), ("bitsynchronous", 3), ("bytesynchronous", 4))).clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: foreSonetVtDiagnosticsLabelValue.setStatus('current')
foreSonetVtDiagnosticsREI = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 1, 14, 5, 3, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 4))).clone(namedValues=NamedValues(("on", 1), ("off", 2), ("auto", 4))).clone('auto')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: foreSonetVtDiagnosticsREI.setStatus('current')
foreSonetLOSDetected = NotificationType((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 1, 14, 0, 1)).setObjects(("IF-MIB", "ifIndex"), ("IF-MIB", "ifName"), ("Fore-TrapLog-MIB", "trapLogIndex"))
if mibBuilder.loadTexts: foreSonetLOSDetected.setStatus('current')
foreSonetLOSCleared = NotificationType((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 1, 14, 0, 2)).setObjects(("IF-MIB", "ifIndex"), ("IF-MIB", "ifName"), ("Fore-TrapLog-MIB", "trapLogIndex"))
if mibBuilder.loadTexts: foreSonetLOSCleared.setStatus('current')
foreSonetPathLabelDetected = NotificationType((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 1, 14, 0, 3)).setObjects(("IF-MIB", "ifIndex"), ("IF-MIB", "ifName"), ("Fore-TrapLog-MIB", "trapLogIndex"))
if mibBuilder.loadTexts: foreSonetPathLabelDetected.setStatus('current')
foreSonetPathLabelCleared = NotificationType((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 1, 14, 0, 4)).setObjects(("IF-MIB", "ifIndex"), ("IF-MIB", "ifName"), ("Fore-TrapLog-MIB", "trapLogIndex"))
if mibBuilder.loadTexts: foreSonetPathLabelCleared.setStatus('current')
foreSonetLineAISDetected = NotificationType((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 1, 14, 0, 5)).setObjects(("IF-MIB", "ifIndex"), ("IF-MIB", "ifName"), ("Fore-TrapLog-MIB", "trapLogIndex"))
if mibBuilder.loadTexts: foreSonetLineAISDetected.setStatus('current')
foreSonetLineAISCleared = NotificationType((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 1, 14, 0, 6)).setObjects(("IF-MIB", "ifIndex"), ("IF-MIB", "ifName"), ("Fore-TrapLog-MIB", "trapLogIndex"))
if mibBuilder.loadTexts: foreSonetLineAISCleared.setStatus('current')
foreSonetLOFDetected = NotificationType((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 1, 14, 0, 7)).setObjects(("IF-MIB", "ifIndex"), ("IF-MIB", "ifName"), ("Fore-TrapLog-MIB", "trapLogIndex"))
if mibBuilder.loadTexts: foreSonetLOFDetected.setStatus('current')
foreSonetLOFCleared = NotificationType((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 1, 14, 0, 8)).setObjects(("IF-MIB", "ifIndex"), ("IF-MIB", "ifName"), ("Fore-TrapLog-MIB", "trapLogIndex"))
if mibBuilder.loadTexts: foreSonetLOFCleared.setStatus('current')
foreSonetLineRDIDetected = NotificationType((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 1, 14, 0, 9)).setObjects(("IF-MIB", "ifIndex"), ("IF-MIB", "ifName"), ("Fore-TrapLog-MIB", "trapLogIndex"))
if mibBuilder.loadTexts: foreSonetLineRDIDetected.setStatus('current')
foreSonetLineRDICleared = NotificationType((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 1, 14, 0, 10)).setObjects(("IF-MIB", "ifIndex"), ("IF-MIB", "ifName"), ("Fore-TrapLog-MIB", "trapLogIndex"))
if mibBuilder.loadTexts: foreSonetLineRDICleared.setStatus('current')
foreSonetPathAISDetected = NotificationType((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 1, 14, 0, 11)).setObjects(("IF-MIB", "ifIndex"), ("IF-MIB", "ifName"), ("Fore-TrapLog-MIB", "trapLogIndex"))
if mibBuilder.loadTexts: foreSonetPathAISDetected.setStatus('current')
foreSonetPathAISCleared = NotificationType((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 1, 14, 0, 12)).setObjects(("IF-MIB", "ifIndex"), ("IF-MIB", "ifName"), ("Fore-TrapLog-MIB", "trapLogIndex"))
if mibBuilder.loadTexts: foreSonetPathAISCleared.setStatus('current')
foreSonetPathLOPDetected = NotificationType((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 1, 14, 0, 13)).setObjects(("IF-MIB", "ifIndex"), ("IF-MIB", "ifName"), ("Fore-TrapLog-MIB", "trapLogIndex"))
if mibBuilder.loadTexts: foreSonetPathLOPDetected.setStatus('current')
foreSonetPathLOPCleared = NotificationType((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 1, 14, 0, 14)).setObjects(("IF-MIB", "ifIndex"), ("IF-MIB", "ifName"), ("Fore-TrapLog-MIB", "trapLogIndex"))
if mibBuilder.loadTexts: foreSonetPathLOPCleared.setStatus('current')
foreSonetPathUNEQDetected = NotificationType((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 1, 14, 0, 15)).setObjects(("IF-MIB", "ifIndex"), ("IF-MIB", "ifName"), ("Fore-TrapLog-MIB", "trapLogIndex"))
if mibBuilder.loadTexts: foreSonetPathUNEQDetected.setStatus('current')
foreSonetPathUNEQCleared = NotificationType((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 1, 14, 0, 16)).setObjects(("IF-MIB", "ifIndex"), ("IF-MIB", "ifName"), ("Fore-TrapLog-MIB", "trapLogIndex"))
if mibBuilder.loadTexts: foreSonetPathUNEQCleared.setStatus('current')
foreSonetPathRDIDetected = NotificationType((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 1, 14, 0, 17)).setObjects(("IF-MIB", "ifIndex"), ("IF-MIB", "ifName"), ("Fore-TrapLog-MIB", "trapLogIndex"))
if mibBuilder.loadTexts: foreSonetPathRDIDetected.setStatus('current')
foreSonetPathRDICleared = NotificationType((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 1, 14, 0, 18)).setObjects(("IF-MIB", "ifIndex"), ("IF-MIB", "ifName"), ("Fore-TrapLog-MIB", "trapLogIndex"))
if mibBuilder.loadTexts: foreSonetPathRDICleared.setStatus('current')
foreSonetPathPDIDetected = NotificationType((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 1, 14, 0, 19)).setObjects(("IF-MIB", "ifIndex"), ("IF-MIB", "ifName"), ("Fore-TrapLog-MIB", "trapLogIndex"))
if mibBuilder.loadTexts: foreSonetPathPDIDetected.setStatus('current')
foreSonetPathPDICleared = NotificationType((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 1, 14, 0, 20)).setObjects(("IF-MIB", "ifIndex"), ("IF-MIB", "ifName"), ("Fore-TrapLog-MIB", "trapLogIndex"))
if mibBuilder.loadTexts: foreSonetPathPDICleared.setStatus('current')
foreSonetLineBIPDetected = NotificationType((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 1, 14, 0, 21)).setObjects(("IF-MIB", "ifIndex"), ("IF-MIB", "ifName"), ("Fore-TrapLog-MIB", "trapLogIndex"))
if mibBuilder.loadTexts: foreSonetLineBIPDetected.setStatus('current')
foreSonetLineBIPCleared = NotificationType((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 1, 14, 0, 22)).setObjects(("IF-MIB", "ifIndex"), ("IF-MIB", "ifName"), ("Fore-TrapLog-MIB", "trapLogIndex"))
if mibBuilder.loadTexts: foreSonetLineBIPCleared.setStatus('current')
foreSonetVtAISDetected = NotificationType((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 1, 14, 0, 23)).setObjects(("IF-MIB", "ifIndex"), ("IF-MIB", "ifName"), ("Fore-TrapLog-MIB", "trapLogIndex"))
if mibBuilder.loadTexts: foreSonetVtAISDetected.setStatus('current')
foreSonetVtAISCleared = NotificationType((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 1, 14, 0, 24)).setObjects(("IF-MIB", "ifIndex"), ("IF-MIB", "ifName"), ("Fore-TrapLog-MIB", "trapLogIndex"))
if mibBuilder.loadTexts: foreSonetVtAISCleared.setStatus('current')
foreSonetVtLOPDetected = NotificationType((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 1, 14, 0, 25)).setObjects(("IF-MIB", "ifIndex"), ("IF-MIB", "ifName"), ("Fore-TrapLog-MIB", "trapLogIndex"))
if mibBuilder.loadTexts: foreSonetVtLOPDetected.setStatus('current')
foreSonetVtLOPCleared = NotificationType((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 1, 14, 0, 26)).setObjects(("IF-MIB", "ifIndex"), ("IF-MIB", "ifName"), ("Fore-TrapLog-MIB", "trapLogIndex"))
if mibBuilder.loadTexts: foreSonetVtLOPCleared.setStatus('current')
foreSonetVtUNEQDetected = NotificationType((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 1, 14, 0, 27)).setObjects(("IF-MIB", "ifIndex"), ("IF-MIB", "ifName"), ("Fore-TrapLog-MIB", "trapLogIndex"))
if mibBuilder.loadTexts: foreSonetVtUNEQDetected.setStatus('current')
foreSonetVtUNEQCleared = NotificationType((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 1, 14, 0, 28)).setObjects(("IF-MIB", "ifIndex"), ("IF-MIB", "ifName"), ("Fore-TrapLog-MIB", "trapLogIndex"))
if mibBuilder.loadTexts: foreSonetVtUNEQCleared.setStatus('current')
foreSonetVtVILMDetected = NotificationType((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 1, 14, 0, 29)).setObjects(("IF-MIB", "ifIndex"), ("IF-MIB", "ifName"), ("Fore-TrapLog-MIB", "trapLogIndex"))
if mibBuilder.loadTexts: foreSonetVtVILMDetected.setStatus('current')
foreSonetVtVILMCleared = NotificationType((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 1, 14, 0, 30)).setObjects(("IF-MIB", "ifIndex"), ("IF-MIB", "ifName"), ("Fore-TrapLog-MIB", "trapLogIndex"))
if mibBuilder.loadTexts: foreSonetVtVILMCleared.setStatus('current')
foreSonetVtRDIDetected = NotificationType((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 1, 14, 0, 31)).setObjects(("IF-MIB", "ifIndex"), ("IF-MIB", "ifName"), ("Fore-TrapLog-MIB", "trapLogIndex"))
if mibBuilder.loadTexts: foreSonetVtRDIDetected.setStatus('current')
foreSonetVtRDICleared = NotificationType((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 1, 14, 0, 32)).setObjects(("IF-MIB", "ifIndex"), ("IF-MIB", "ifName"), ("Fore-TrapLog-MIB", "trapLogIndex"))
if mibBuilder.loadTexts: foreSonetVtRDICleared.setStatus('current')
foreSonetVtRFIDetected = NotificationType((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 1, 14, 0, 33)).setObjects(("IF-MIB", "ifIndex"), ("IF-MIB", "ifName"), ("Fore-TrapLog-MIB", "trapLogIndex"))
if mibBuilder.loadTexts: foreSonetVtRFIDetected.setStatus('current')
foreSonetVtRFICleared = NotificationType((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 1, 14, 0, 34)).setObjects(("IF-MIB", "ifIndex"), ("IF-MIB", "ifName"), ("Fore-TrapLog-MIB", "trapLogIndex"))
if mibBuilder.loadTexts: foreSonetVtRFICleared.setStatus('current')
mibBuilder.exportSymbols("Fore-Sonet-Ext-MIB", foreSonetPathGroupConfigEntry=foreSonetPathGroupConfigEntry, foreSonetLineConfigEntry=foreSonetLineConfigEntry, foreSonetSectionDiagnosticsDisableTxScrambling=foreSonetSectionDiagnosticsDisableTxScrambling, foreSonetFarEndPathCurrentEntry=foreSonetFarEndPathCurrentEntry, foreSonetFarEndPathCurrentTable=foreSonetFarEndPathCurrentTable, foreSonetPathCurrentStatus=foreSonetPathCurrentStatus, foreSonetPathLoopbackMode=foreSonetPathLoopbackMode, foreSonetVtVILMCleared=foreSonetVtVILMCleared, foreSonetMediumConfigTable=foreSonetMediumConfigTable, foreSonetMediumConfigLoopbackMode=foreSonetMediumConfigLoopbackMode, foreSonetLineSignalFailBer=foreSonetLineSignalFailBer, foreSonetPathIntervalESR=foreSonetPathIntervalESR, foreSonetVtDiagnosticsBIP=foreSonetVtDiagnosticsBIP, foreSonetVTIntervalESR=foreSonetVTIntervalESR, foreSonetVTTotalAISs=foreSonetVTTotalAISs, foreSonetPathPDIDetected=foreSonetPathPDIDetected, foreSonetPathIntervalBBER=foreSonetPathIntervalBBER, foreSonetPathGroupConfigTable=foreSonetPathGroupConfigTable, foreSonetVtRFICleared=foreSonetVtRFICleared, foreSonetVTTotalBIPs=foreSonetVTTotalBIPs, foreSonetFarEndLineIntervalSESR=foreSonetFarEndLineIntervalSESR, foreSonetPathIntervalTable=foreSonetPathIntervalTable, foreSonetVtUNEQDetected=foreSonetVtUNEQDetected, foreSonetPathIntervalEntry=foreSonetPathIntervalEntry, foreSonetFarEndVTIntervalBBER=foreSonetFarEndVTIntervalBBER, foreSonetLineIntervalBBEs=foreSonetLineIntervalBBEs, foreSonetFarEndPathIntervalESR=foreSonetFarEndPathIntervalESR, foreSonetLineTotalEntry=foreSonetLineTotalEntry, foreSonetLineBIPDetected=foreSonetLineBIPDetected, foreSonetFarEndVTIntervalTable=foreSonetFarEndVTIntervalTable, foreSonetSectionCurrentBBEs=foreSonetSectionCurrentBBEs, foreSonetVtVILMDetected=foreSonetVtVILMDetected, foreSonetVTConfigTable=foreSonetVTConfigTable, foreSonetFarEndPathCurrentBBEs=foreSonetFarEndPathCurrentBBEs, foreSonetSectionTotalBIPs=foreSonetSectionTotalBIPs, foreSonetLineCurrentBBEs=foreSonetLineCurrentBBEs, foreSonetLineBipThrSeconds=foreSonetLineBipThrSeconds, foreSonetVtDiagnosticsRDI=foreSonetVtDiagnosticsRDI, foreSonetMib=foreSonetMib, foreSonetPathDiagnosticsC2=foreSonetPathDiagnosticsC2, foreSonetLineRDIDetected=foreSonetLineRDIDetected, PYSNMP_MODULE_ID=foreSonetMib, foreSonetFarEndLineIntervalEntry=foreSonetFarEndLineIntervalEntry, foreSonetPathRxSignalLabel=foreSonetPathRxSignalLabel, foreSonetFarEndLineCurrentBBEs=foreSonetFarEndLineCurrentBBEs, foreSonetVTCurrentEntry=foreSonetVTCurrentEntry, foreSonetPathTotalEntry=foreSonetPathTotalEntry, foreSonetVTDiagnosticsEntry=foreSonetVTDiagnosticsEntry, foreSonetMediumConfigTxClockSource=foreSonetMediumConfigTxClockSource, foreSonetLineTotalAISs=foreSonetLineTotalAISs, foreSonetPathUNEQDetected=foreSonetPathUNEQDetected, foreSonetLineDiagnosticsB2=foreSonetLineDiagnosticsB2, foreSonetVTIntervalBBER=foreSonetVTIntervalBBER, foreSonetVtUNEQCleared=foreSonetVtUNEQCleared, foreSonetPathDiagnosticsPAIS=foreSonetPathDiagnosticsPAIS, foreSonetFarEndLineCurrentEntry=foreSonetFarEndLineCurrentEntry, foreSonetPathLabelDetected=foreSonetPathLabelDetected, foreSonetVTTotalLOPs=foreSonetVTTotalLOPs, foreSonetPathCurrentBBEs=foreSonetPathCurrentBBEs, foreSonetVTTotalEntry=foreSonetVTTotalEntry, foreSonetFarEndVTIntervalBBEs=foreSonetFarEndVTIntervalBBEs, foreSonetFarEndPathIntervalTable=foreSonetFarEndPathIntervalTable, foreSonetPathTotalLOPs=foreSonetPathTotalLOPs, foreSonetPathAISDetected=foreSonetPathAISDetected, foreSonetPathUNEQCleared=foreSonetPathUNEQCleared, foreSonetLineIntervalBBER=foreSonetLineIntervalBBER, foreSonetLineTotalRDIs=foreSonetLineTotalRDIs, foreSonetVtDiagnosticsREI=foreSonetVtDiagnosticsREI, foreSonetSectionDiagnosticsB1=foreSonetSectionDiagnosticsB1, foreSonetVtDiagnosticsLabelValue=foreSonetVtDiagnosticsLabelValue, foreSonetVTIntervalSESR=foreSonetVTIntervalSESR, foreSonetPathCurrentTable=foreSonetPathCurrentTable, foreSonetLineDiagnosticsLREI=foreSonetLineDiagnosticsLREI, foreSonetFarEndLineIntervalBBEs=foreSonetFarEndLineIntervalBBEs, foreSonetFarEndVTIntervalSESR=foreSonetFarEndVTIntervalSESR, foreSonetSectionDiagnosticsFraming=foreSonetSectionDiagnosticsFraming, foreSonetLineBerState=foreSonetLineBerState, foreSonetSectionIntervalBBEs=foreSonetSectionIntervalBBEs, foreSonetPathConfigTable=foreSonetPathConfigTable, foreSonetVTTotalPLMs=foreSonetVTTotalPLMs, foreSonetPathRDICleared=foreSonetPathRDICleared, foreSonetFarEndLineIntervalTable=foreSonetFarEndLineIntervalTable, foreSonetSectionTotalEntry=foreSonetSectionTotalEntry, foreSonetLineDiagnosticsLAIS=foreSonetLineDiagnosticsLAIS, foreSonetMedium=foreSonetMedium, foreSonetLineDiagnosticsK1channel=foreSonetLineDiagnosticsK1channel, foreSonetSection=foreSonetSection, foreSonetSectionDiagnosticsDisableRxDescrambling=foreSonetSectionDiagnosticsDisableRxDescrambling, foreSonetSectionIntervalSESR=foreSonetSectionIntervalSESR, foreSonetLineDiagnosticsAPS=foreSonetLineDiagnosticsAPS, foreSonetPathTotalTable=foreSonetPathTotalTable, foreSonetLineBipThrErrors=foreSonetLineBipThrErrors, foreSonetLineTotalBIPs=foreSonetLineTotalBIPs, foreSonetLOSCleared=foreSonetLOSCleared, foreSonetVTIntervalTable=foreSonetVTIntervalTable, foreSonetLineDiagnosticsK2Mode=foreSonetLineDiagnosticsK2Mode, foreVTWidth=foreVTWidth, foreSonetVTLoopbackMode=foreSonetVTLoopbackMode, foreSonetPathRDIDetected=foreSonetPathRDIDetected, foreSonetLineIntervalTable=foreSonetLineIntervalTable, foreSonetFarEndVTCurrentBBEs=foreSonetFarEndVTCurrentBBEs, foreSonetLOFDetected=foreSonetLOFDetected, foreSonetPathTotalPLMs=foreSonetPathTotalPLMs, foreSonetSectionDiagnosticsEntry=foreSonetSectionDiagnosticsEntry, foreSonetLineDiagnosticsK1request=foreSonetLineDiagnosticsK1request, foreSonetVtDiagnosticsRFI=foreSonetVtDiagnosticsRFI, foreSonetVtRDIDetected=foreSonetVtRDIDetected, foreSonetSPE=foreSonetSPE, foreSonetSectionTotalLOFs=foreSonetSectionTotalLOFs, foreSonetPathDiagnosticsTable=foreSonetPathDiagnosticsTable, foreSonetLineRDICleared=foreSonetLineRDICleared, foreSonetPathPDICleared=foreSonetPathPDICleared, foreSonetLineSignalDegradeBer=foreSonetLineSignalDegradeBer, foreSonetPathDiagnosticsLOP=foreSonetPathDiagnosticsLOP, foreSonetVtDiagnosticsLOP=foreSonetVtDiagnosticsLOP, foreSonetLOFCleared=foreSonetLOFCleared, foreSonetVtLOPDetected=foreSonetVtLOPDetected, foreSonetVtRFIDetected=foreSonetVtRFIDetected, foreSonetFarEndLineIntervalBBER=foreSonetFarEndLineIntervalBBER, foreSonetFarEndLineIntervalESR=foreSonetFarEndLineIntervalESR, foreSonetLineConfigTable=foreSonetLineConfigTable, foreSonetVtDiagnosticsAIS=foreSonetVtDiagnosticsAIS, foreSonetLineBipFailEnable=foreSonetLineBipFailEnable, foreSonetLineBIPCleared=foreSonetLineBIPCleared, foreSonetFarEndPath=foreSonetFarEndPath, foreSonetLineDiagnosticsTable=foreSonetLineDiagnosticsTable, foreSonetLineDiagnosticsK2Architecture=foreSonetLineDiagnosticsK2Architecture, foreSonetLineTotalTable=foreSonetLineTotalTable, foreSonetVTIntervalEntry=foreSonetVTIntervalEntry, foreSonetSectionTotalTable=foreSonetSectionTotalTable, foreSonetLineDiagnosticsLRDI=foreSonetLineDiagnosticsLRDI, foreSonetPathCurrentEntry=foreSonetPathCurrentEntry, foreSonetLineIntervalEntry=foreSonetLineIntervalEntry, foreSonetLineTotalFEBEs=foreSonetLineTotalFEBEs, foreSonetVtRDICleared=foreSonetVtRDICleared, foreSonetVTTotalTable=foreSonetVTTotalTable, foreSonetVTTotalREIs=foreSonetVTTotalREIs, foreSonetVTDiagnosticsTable=foreSonetVTDiagnosticsTable, foreSonetFarEndVTIntervalEntry=foreSonetFarEndVTIntervalEntry, foreSonetPathTotalAISs=foreSonetPathTotalAISs, foreSonetPathDiagnosticsEntry=foreSonetPathDiagnosticsEntry, foreSonetPathDiagnosticsB3=foreSonetPathDiagnosticsB3, foreSonetPathDiagnosticsPERDI=foreSonetPathDiagnosticsPERDI, foreSonetFarEndPathIntervalBBEs=foreSonetFarEndPathIntervalBBEs, foreSonetSectionTotalLOSs=foreSonetSectionTotalLOSs, foreSonetLineAISCleared=foreSonetLineAISCleared, foreSonetLine=foreSonetLine, foreSonetSectionIntervalEntry=foreSonetSectionIntervalEntry, foreSonetPathTotalFEBEs=foreSonetPathTotalFEBEs, foreSonetPathDiagnosticsC2Value=foreSonetPathDiagnosticsC2Value, foreVTGroup=foreVTGroup, foreSonetVtAISCleared=foreSonetVtAISCleared, foreSonetPathTotalRDIs=foreSonetPathTotalRDIs, foreSonetPathDiagnosticsERDIValue=foreSonetPathDiagnosticsERDIValue, foreSonetFarEndVT=foreSonetFarEndVT, foreSonetPathTxSignalLabel=foreSonetPathTxSignalLabel, foreSonetLineIntervalSESR=foreSonetLineIntervalSESR, foreSonetPathAISCleared=foreSonetPathAISCleared, foreSonetPathLOPCleared=foreSonetPathLOPCleared, foreSonetPathIntervalSESR=foreSonetPathIntervalSESR, foreSonetLineIntervalESR=foreSonetLineIntervalESR, foreSonetVtDiagnosticsLabel=foreSonetVtDiagnosticsLabel, foreSonetMediumConfigEntry=foreSonetMediumConfigEntry, foreSonetFarEndVTIntervalESR=foreSonetFarEndVTIntervalESR, foreSonetPathTotalBIPs=foreSonetPathTotalBIPs, foreSonetVT=foreSonetVT, foreSonetSectionIntervalESR=foreSonetSectionIntervalESR, foreSonetPathIntervalBBEs=foreSonetPathIntervalBBEs, foreSonetVTTotalRDIs=foreSonetVTTotalRDIs, foreSonetSectionCurrentTable=foreSonetSectionCurrentTable, foreSonetSectionIntervalBBER=foreSonetSectionIntervalBBER, foreSonetVTTotalUNEQs=foreSonetVTTotalUNEQs, foreSonetFarEndVTCurrentEntry=foreSonetFarEndVTCurrentEntry, foreSonetVTCurrentBBEs=foreSonetVTCurrentBBEs, foreSonetSectionDiagnosticsTable=foreSonetSectionDiagnosticsTable, foreSonetPathDiagnosticsPREI=foreSonetPathDiagnosticsPREI, foreSonetFarEndLineCurrentTable=foreSonetFarEndLineCurrentTable, foreSonetFarEndPathIntervalSESR=foreSonetFarEndPathIntervalSESR, foreSonetLineDiagnosticsEntry=foreSonetLineDiagnosticsEntry, foreSonetLineAISDetected=foreSonetLineAISDetected, foreSonetVtLOPCleared=foreSonetVtLOPCleared, foreSonetFarEndLine=foreSonetFarEndLine, foreSonetPathLOPDetected=foreSonetPathLOPDetected, foreSonetLOSDetected=foreSonetLOSDetected, foreSonetFarEndPathIntervalBBER=foreSonetFarEndPathIntervalBBER, foreSonetLineCurrentEntry=foreSonetLineCurrentEntry, foreSonetFarEndVTCurrentTable=foreSonetFarEndVTCurrentTable, foreSonetVTConfigEntry=foreSonetVTConfigEntry, foreSonetPathLabelCleared=foreSonetPathLabelCleared, foreSonetVtAISDetected=foreSonetVtAISDetected, foreSonetLineCurrentTable=foreSonetLineCurrentTable, foreSonetSectionDiagnosticsLOS=foreSonetSectionDiagnosticsLOS, foreSonetLineBerErrorModel=foreSonetLineBerErrorModel, foreSonetPathConfigEntry=foreSonetPathConfigEntry, foreSonetSectionCurrentEntry=foreSonetSectionCurrentEntry, foreSonetPath=foreSonetPath, foreSonetPathTotalUNEQs=foreSonetPathTotalUNEQs, foreSonetLineDiagnosticsK2channel=foreSonetLineDiagnosticsK2channel, foreSonetVTIntervalBBEs=foreSonetVTIntervalBBEs, foreSonetSectionIntervalTable=foreSonetSectionIntervalTable, foreSonetFarEndPathIntervalEntry=foreSonetFarEndPathIntervalEntry, foreSonetVTCurrentTable=foreSonetVTCurrentTable)
