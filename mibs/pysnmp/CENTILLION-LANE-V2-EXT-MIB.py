#
# PySNMP MIB module CENTILLION-LANE-V2-EXT-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/CENTILLION-LANE-V2-EXT-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 17:30:18 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, ObjectIdentifier, OctetString = mibBuilder.importSymbols("ASN1", "Integer", "ObjectIdentifier", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
SingleValueConstraint, ConstraintsIntersection, ValueSizeConstraint, ValueRangeConstraint, ConstraintsUnion = mibBuilder.importSymbols("ASN1-REFINEMENT", "SingleValueConstraint", "ConstraintsIntersection", "ValueSizeConstraint", "ValueRangeConstraint", "ConstraintsUnion")
atmLane, = mibBuilder.importSymbols("CENTILLION-ROOT-MIB", "atmLane")
AtmLaneAddress, = mibBuilder.importSymbols("LAN-EMULATION-CLIENT-MIB", "AtmLaneAddress")
lecsConfIndex, elanConfIndex = mibBuilder.importSymbols("LAN-EMULATION-ELAN-MIB", "lecsConfIndex", "elanConfIndex")
lesConfIndex, = mibBuilder.importSymbols("LAN-EMULATION-LES-MIB", "lesConfIndex")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
IpAddress, TimeTicks, Counter32, Counter64, Gauge32, MibScalar, MibTable, MibTableRow, MibTableColumn, ModuleIdentity, NotificationType, Integer32, Bits, MibIdentifier, Unsigned32, ObjectIdentity, iso = mibBuilder.importSymbols("SNMPv2-SMI", "IpAddress", "TimeTicks", "Counter32", "Counter64", "Gauge32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "ModuleIdentity", "NotificationType", "Integer32", "Bits", "MibIdentifier", "Unsigned32", "ObjectIdentity", "iso")
DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention")
TruthValue, = mibBuilder.importSymbols("SNMPv2-TC-v1", "TruthValue")
cnLesV2ExtnGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 930, 2, 2, 3, 7))
cnLecsV2ExtnGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 930, 2, 2, 3, 8))
cnElanV2ExtnGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 930, 2, 2, 3, 9))
class CnLesLecDataFrameSize(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(2, 3, 4, 5, 6))
    namedValues = NamedValues(("max1516", 2), ("max4544", 3), ("max9234", 4), ("max18190", 5), ("max1580", 6))

cnLesV2ExtnTable = MibTable((1, 3, 6, 1, 4, 1, 930, 2, 2, 3, 7, 1), )
if mibBuilder.loadTexts: cnLesV2ExtnTable.setStatus('mandatory')
cnLesV2ExtnEntry = MibTableRow((1, 3, 6, 1, 4, 1, 930, 2, 2, 3, 7, 1, 1), ).setIndexNames((0, "LAN-EMULATION-LES-MIB", "lesConfIndex"))
if mibBuilder.loadTexts: cnLesV2ExtnEntry.setStatus('mandatory')
cnLesV2ExtnV2Capable = MibTableColumn((1, 3, 6, 1, 4, 1, 930, 2, 2, 3, 7, 1, 1, 1), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cnLesV2ExtnV2Capable.setStatus('mandatory')
cnLesV2ExtnElanID = MibTableColumn((1, 3, 6, 1, 4, 1, 930, 2, 2, 3, 7, 1, 1, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cnLesV2ExtnElanID.setStatus('mandatory')
cnLesV2ExtnMaxFrameSize = MibTableColumn((1, 3, 6, 1, 4, 1, 930, 2, 2, 3, 7, 1, 1, 3), CnLesLecDataFrameSize()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cnLesV2ExtnMaxFrameSize.setStatus('mandatory')
cnLecsV2ExtnTable = MibTable((1, 3, 6, 1, 4, 1, 930, 2, 2, 3, 8, 1), )
if mibBuilder.loadTexts: cnLecsV2ExtnTable.setStatus('mandatory')
cnLecsV2ExtnEntry = MibTableRow((1, 3, 6, 1, 4, 1, 930, 2, 2, 3, 8, 1, 1), ).setIndexNames((0, "LAN-EMULATION-ELAN-MIB", "lecsConfIndex"))
if mibBuilder.loadTexts: cnLecsV2ExtnEntry.setStatus('mandatory')
cnLecsV2ExtnWellKnownAtmAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 930, 2, 2, 3, 8, 1, 1, 1), AtmLaneAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cnLecsV2ExtnWellKnownAtmAddress.setStatus('mandatory')
cnElanV2ExtnTable = MibTable((1, 3, 6, 1, 4, 1, 930, 2, 2, 3, 9, 1), )
if mibBuilder.loadTexts: cnElanV2ExtnTable.setStatus('mandatory')
cnElanV2ExtnEntry = MibTableRow((1, 3, 6, 1, 4, 1, 930, 2, 2, 3, 9, 1, 1), ).setIndexNames((0, "LAN-EMULATION-ELAN-MIB", "elanConfIndex"))
if mibBuilder.loadTexts: cnElanV2ExtnEntry.setStatus('mandatory')
cnElanV2ExtnV2Capable = MibTableColumn((1, 3, 6, 1, 4, 1, 930, 2, 2, 3, 9, 1, 1, 1), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cnElanV2ExtnV2Capable.setStatus('mandatory')
cnElanV2ExtnElanID = MibTableColumn((1, 3, 6, 1, 4, 1, 930, 2, 2, 3, 9, 1, 1, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cnElanV2ExtnElanID.setStatus('mandatory')
mibBuilder.exportSymbols("CENTILLION-LANE-V2-EXT-MIB", cnElanV2ExtnGroup=cnElanV2ExtnGroup, cnLecsV2ExtnGroup=cnLecsV2ExtnGroup, cnElanV2ExtnTable=cnElanV2ExtnTable, cnLesV2ExtnGroup=cnLesV2ExtnGroup, cnLesV2ExtnElanID=cnLesV2ExtnElanID, cnLesV2ExtnV2Capable=cnLesV2ExtnV2Capable, cnLesV2ExtnMaxFrameSize=cnLesV2ExtnMaxFrameSize, cnLecsV2ExtnTable=cnLecsV2ExtnTable, cnLecsV2ExtnEntry=cnLecsV2ExtnEntry, cnElanV2ExtnEntry=cnElanV2ExtnEntry, cnElanV2ExtnV2Capable=cnElanV2ExtnV2Capable, cnLesV2ExtnEntry=cnLesV2ExtnEntry, cnElanV2ExtnElanID=cnElanV2ExtnElanID, cnLecsV2ExtnWellKnownAtmAddress=cnLecsV2ExtnWellKnownAtmAddress, cnLesV2ExtnTable=cnLesV2ExtnTable, CnLesLecDataFrameSize=CnLesLecDataFrameSize)
