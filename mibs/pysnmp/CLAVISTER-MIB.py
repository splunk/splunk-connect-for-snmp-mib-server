#
# PySNMP MIB module CLAVISTER-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/CLAVISTER-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 18:09:04 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, OctetString, Integer = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "OctetString", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueRangeConstraint, SingleValueConstraint, ConstraintsIntersection, ValueSizeConstraint, ConstraintsUnion = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueRangeConstraint", "SingleValueConstraint", "ConstraintsIntersection", "ValueSizeConstraint", "ConstraintsUnion")
clavisterMibObjectGroups, clavisterOSStats, clavisterMibConfs, clavisterMibModules = mibBuilder.importSymbols("CLAVISTER-SMI", "clavisterMibObjectGroups", "clavisterOSStats", "clavisterMibConfs", "clavisterMibModules")
NotificationGroup, ObjectGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ObjectGroup", "ModuleCompliance")
ObjectIdentity, Gauge32, MibIdentifier, Counter32, MibScalar, MibTable, MibTableRow, MibTableColumn, Counter64, iso, Bits, NotificationType, TimeTicks, IpAddress, Unsigned32, Integer32, ModuleIdentity = mibBuilder.importSymbols("SNMPv2-SMI", "ObjectIdentity", "Gauge32", "MibIdentifier", "Counter32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Counter64", "iso", "Bits", "NotificationType", "TimeTicks", "IpAddress", "Unsigned32", "Integer32", "ModuleIdentity")
DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention")
clavisterStatsMibModule = ModuleIdentity((1, 3, 6, 1, 4, 1, 5089, 2, 1, 1))
clavisterStatsMibModule.setRevisions(('2008-11-18 16:05', '2008-10-14 12:27', '2008-03-06 10:18', '2007-08-16 10:19', '2007-05-28 08:00', '2007-02-13 09:00',))
if mibBuilder.loadTexts: clavisterStatsMibModule.setLastUpdated('200811181605Z')
if mibBuilder.loadTexts: clavisterStatsMibModule.setOrganization('Clavister AB')
clvSystem = MibIdentifier((1, 3, 6, 1, 4, 1, 5089, 1, 2, 1))
clvSysCpuLoad = MibScalar((1, 3, 6, 1, 4, 1, 5089, 1, 2, 1, 1), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: clvSysCpuLoad.setStatus('current')
clvSysForwardedBits = MibScalar((1, 3, 6, 1, 4, 1, 5089, 1, 2, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: clvSysForwardedBits.setStatus('current')
clvSysForwardedPackets = MibScalar((1, 3, 6, 1, 4, 1, 5089, 1, 2, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: clvSysForwardedPackets.setStatus('current')
clvSysBuffUse = MibScalar((1, 3, 6, 1, 4, 1, 5089, 1, 2, 1, 4), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: clvSysBuffUse.setStatus('current')
clvSysConns = MibScalar((1, 3, 6, 1, 4, 1, 5089, 1, 2, 1, 5), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: clvSysConns.setStatus('current')
clvSysPerStateCounters = MibIdentifier((1, 3, 6, 1, 4, 1, 5089, 1, 2, 1, 6))
clvSysPscTcpSyn = MibScalar((1, 3, 6, 1, 4, 1, 5089, 1, 2, 1, 6, 1), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: clvSysPscTcpSyn.setStatus('current')
clvSysPscTcpOpen = MibScalar((1, 3, 6, 1, 4, 1, 5089, 1, 2, 1, 6, 2), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: clvSysPscTcpOpen.setStatus('current')
clvSysPscTcpFin = MibScalar((1, 3, 6, 1, 4, 1, 5089, 1, 2, 1, 6, 3), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: clvSysPscTcpFin.setStatus('current')
clvSysPscUdp = MibScalar((1, 3, 6, 1, 4, 1, 5089, 1, 2, 1, 6, 4), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: clvSysPscUdp.setStatus('current')
clvSysPscIcmp = MibScalar((1, 3, 6, 1, 4, 1, 5089, 1, 2, 1, 6, 5), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: clvSysPscIcmp.setStatus('current')
clvSysPscOther = MibScalar((1, 3, 6, 1, 4, 1, 5089, 1, 2, 1, 6, 6), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: clvSysPscOther.setStatus('current')
clvIfStatsTable = MibTable((1, 3, 6, 1, 4, 1, 5089, 1, 2, 1, 7), )
if mibBuilder.loadTexts: clvIfStatsTable.setStatus('current')
clvIfStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5089, 1, 2, 1, 7, 1), ).setIndexNames((0, "CLAVISTER-MIB", "clvIfStatsIndex"))
if mibBuilder.loadTexts: clvIfStatsEntry.setStatus('current')
clvIfStatsIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 5089, 1, 2, 1, 7, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647)))
if mibBuilder.loadTexts: clvIfStatsIndex.setStatus('current')
clvIfName = MibTableColumn((1, 3, 6, 1, 4, 1, 5089, 1, 2, 1, 7, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: clvIfName.setStatus('current')
clvIfFragsIn = MibTableColumn((1, 3, 6, 1, 4, 1, 5089, 1, 2, 1, 7, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: clvIfFragsIn.setStatus('current')
clvIfFragReassOk = MibTableColumn((1, 3, 6, 1, 4, 1, 5089, 1, 2, 1, 7, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: clvIfFragReassOk.setStatus('current')
clvIfFragReassFail = MibTableColumn((1, 3, 6, 1, 4, 1, 5089, 1, 2, 1, 7, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: clvIfFragReassFail.setStatus('current')
clvIfPktsInCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 5089, 1, 2, 1, 7, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: clvIfPktsInCnt.setStatus('current')
clvIfPktsOutCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 5089, 1, 2, 1, 7, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: clvIfPktsOutCnt.setStatus('current')
clvIfBitsInCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 5089, 1, 2, 1, 7, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: clvIfBitsInCnt.setStatus('current')
clvIfBitsOutCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 5089, 1, 2, 1, 7, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: clvIfBitsOutCnt.setStatus('current')
clvIfPktsTotCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 5089, 1, 2, 1, 7, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: clvIfPktsTotCnt.setStatus('current')
clvIfBitsTotCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 5089, 1, 2, 1, 7, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: clvIfBitsTotCnt.setStatus('current')
clvIfRxRingTable = MibTable((1, 3, 6, 1, 4, 1, 5089, 1, 2, 1, 8), )
if mibBuilder.loadTexts: clvIfRxRingTable.setStatus('current')
clvIfRxRingEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5089, 1, 2, 1, 8, 1), ).setIndexNames((0, "CLAVISTER-MIB", "clvIfRxRingIndex"))
if mibBuilder.loadTexts: clvIfRxRingEntry.setStatus('current')
clvIfRxRingIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 5089, 1, 2, 1, 8, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647)))
if mibBuilder.loadTexts: clvIfRxRingIndex.setStatus('current')
clvIfRxRingFifoErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 5089, 1, 2, 1, 8, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: clvIfRxRingFifoErrors.setStatus('current')
clvIfRxDespools = MibTableColumn((1, 3, 6, 1, 4, 1, 5089, 1, 2, 1, 8, 1, 3), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: clvIfRxDespools.setStatus('current')
clvIfRxAvgUse = MibTableColumn((1, 3, 6, 1, 4, 1, 5089, 1, 2, 1, 8, 1, 4), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: clvIfRxAvgUse.setStatus('current')
clvIfRxRingSaturation = MibTableColumn((1, 3, 6, 1, 4, 1, 5089, 1, 2, 1, 8, 1, 5), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: clvIfRxRingSaturation.setStatus('current')
clvRxRingFlooded = MibTableColumn((1, 3, 6, 1, 4, 1, 5089, 1, 2, 1, 8, 1, 6), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: clvRxRingFlooded.setStatus('current')
clvIfTxRingTable = MibTable((1, 3, 6, 1, 4, 1, 5089, 1, 2, 1, 9), )
if mibBuilder.loadTexts: clvIfTxRingTable.setStatus('current')
clvIfTxRingEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5089, 1, 2, 1, 9, 1), ).setIndexNames((0, "CLAVISTER-MIB", "clvIfTxRingIndex"))
if mibBuilder.loadTexts: clvIfTxRingEntry.setStatus('current')
clvIfTxRingIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 5089, 1, 2, 1, 9, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647)))
if mibBuilder.loadTexts: clvIfTxRingIndex.setStatus('current')
clvIfTxDespools = MibTableColumn((1, 3, 6, 1, 4, 1, 5089, 1, 2, 1, 9, 1, 2), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: clvIfTxDespools.setStatus('current')
clvIfTxAvgUse = MibTableColumn((1, 3, 6, 1, 4, 1, 5089, 1, 2, 1, 9, 1, 3), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: clvIfTxAvgUse.setStatus('current')
clvIfTxRingSaturation = MibTableColumn((1, 3, 6, 1, 4, 1, 5089, 1, 2, 1, 9, 1, 4), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: clvIfTxRingSaturation.setStatus('current')
clvRxTingFlooded = MibTableColumn((1, 3, 6, 1, 4, 1, 5089, 1, 2, 1, 9, 1, 5), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: clvRxTingFlooded.setStatus('current')
clvIfVlanStatsTable = MibTable((1, 3, 6, 1, 4, 1, 5089, 1, 2, 1, 10), )
if mibBuilder.loadTexts: clvIfVlanStatsTable.setStatus('current')
clvIfVlanStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5089, 1, 2, 1, 10, 1), ).setIndexNames((0, "CLAVISTER-MIB", "clvIfVlanIndex"))
if mibBuilder.loadTexts: clvIfVlanStatsEntry.setStatus('current')
clvIfVlanIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 5089, 1, 2, 1, 10, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647)))
if mibBuilder.loadTexts: clvIfVlanIndex.setStatus('current')
clvIfVlanUntaggedInPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 5089, 1, 2, 1, 10, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: clvIfVlanUntaggedInPkts.setStatus('current')
clvIfVlanUntaggedOutPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 5089, 1, 2, 1, 10, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: clvIfVlanUntaggedOutPkts.setStatus('current')
clvIfVlanUntaggedTotPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 5089, 1, 2, 1, 10, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: clvIfVlanUntaggedTotPkts.setStatus('current')
clvIfVlanUntaggedInOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 5089, 1, 2, 1, 10, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: clvIfVlanUntaggedInOctets.setStatus('current')
clvIfVlanUntaggedOutOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 5089, 1, 2, 1, 10, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: clvIfVlanUntaggedOutOctets.setStatus('current')
clvIfVlanUntaggedTotOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 5089, 1, 2, 1, 10, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: clvIfVlanUntaggedTotOctets.setStatus('current')
clvHWSensorTable = MibTable((1, 3, 6, 1, 4, 1, 5089, 1, 2, 1, 11), )
if mibBuilder.loadTexts: clvHWSensorTable.setStatus('current')
clvHWSensorEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5089, 1, 2, 1, 11, 1), ).setIndexNames((0, "CLAVISTER-MIB", "clvHWSensorIndex"))
if mibBuilder.loadTexts: clvHWSensorEntry.setStatus('current')
clvHWSensorIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 5089, 1, 2, 1, 11, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647)))
if mibBuilder.loadTexts: clvHWSensorIndex.setStatus('current')
clvHWSensorName = MibTableColumn((1, 3, 6, 1, 4, 1, 5089, 1, 2, 1, 11, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: clvHWSensorName.setStatus('current')
clvHWSensorValue = MibTableColumn((1, 3, 6, 1, 4, 1, 5089, 1, 2, 1, 11, 1, 3), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: clvHWSensorValue.setStatus('current')
clvHWSensorUnit = MibTableColumn((1, 3, 6, 1, 4, 1, 5089, 1, 2, 1, 11, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: clvHWSensorUnit.setStatus('current')
clvSysMemUsage = MibScalar((1, 3, 6, 1, 4, 1, 5089, 1, 2, 1, 12), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: clvSysMemUsage.setStatus('current')
clvSysTCPUsage = MibIdentifier((1, 3, 6, 1, 4, 1, 5089, 1, 2, 1, 13))
clvSysTCPRecvSmall = MibScalar((1, 3, 6, 1, 4, 1, 5089, 1, 2, 1, 13, 1), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: clvSysTCPRecvSmall.setStatus('current')
clvSysTCPRecvLarge = MibScalar((1, 3, 6, 1, 4, 1, 5089, 1, 2, 1, 13, 2), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: clvSysTCPRecvLarge.setStatus('current')
clvSysTCPSendSmall = MibScalar((1, 3, 6, 1, 4, 1, 5089, 1, 2, 1, 13, 3), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: clvSysTCPSendSmall.setStatus('current')
clvSysTCPSendLarge = MibScalar((1, 3, 6, 1, 4, 1, 5089, 1, 2, 1, 13, 4), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: clvSysTCPSendLarge.setStatus('current')
clvSysTimerUsage = MibScalar((1, 3, 6, 1, 4, 1, 5089, 1, 2, 1, 14), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: clvSysTimerUsage.setStatus('current')
clvVPN = MibIdentifier((1, 3, 6, 1, 4, 1, 5089, 1, 2, 2))
clvIPsec = MibIdentifier((1, 3, 6, 1, 4, 1, 5089, 1, 2, 2, 1))
clvIPsecGlobal = MibIdentifier((1, 3, 6, 1, 4, 1, 5089, 1, 2, 2, 1, 1))
clvIPsecPhaseOneActive = MibScalar((1, 3, 6, 1, 4, 1, 5089, 1, 2, 2, 1, 1, 1), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: clvIPsecPhaseOneActive.setStatus('current')
clvIPsecPhaseOneAggrModeDone = MibScalar((1, 3, 6, 1, 4, 1, 5089, 1, 2, 2, 1, 1, 2), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: clvIPsecPhaseOneAggrModeDone.setStatus('current')
clvIPsecQuickModeActive = MibScalar((1, 3, 6, 1, 4, 1, 5089, 1, 2, 2, 1, 1, 3), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: clvIPsecQuickModeActive.setStatus('current')
clvIPsecPhaseOneDone = MibScalar((1, 3, 6, 1, 4, 1, 5089, 1, 2, 2, 1, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: clvIPsecPhaseOneDone.setStatus('current')
clvIPsecPhaseOneFailed = MibScalar((1, 3, 6, 1, 4, 1, 5089, 1, 2, 2, 1, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: clvIPsecPhaseOneFailed.setStatus('current')
clvIPsecPhaseOneRekeyed = MibScalar((1, 3, 6, 1, 4, 1, 5089, 1, 2, 2, 1, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: clvIPsecPhaseOneRekeyed.setStatus('current')
clvIPsecQuickModeDone = MibScalar((1, 3, 6, 1, 4, 1, 5089, 1, 2, 2, 1, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: clvIPsecQuickModeDone.setStatus('current')
clvIPsecQuickModeFailed = MibScalar((1, 3, 6, 1, 4, 1, 5089, 1, 2, 2, 1, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: clvIPsecQuickModeFailed.setStatus('current')
clvIPsecInfoDone = MibScalar((1, 3, 6, 1, 4, 1, 5089, 1, 2, 2, 1, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: clvIPsecInfoDone.setStatus('current')
clvIPsecInfoFailed = MibScalar((1, 3, 6, 1, 4, 1, 5089, 1, 2, 2, 1, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: clvIPsecInfoFailed.setStatus('current')
clvIPsecInOctetsComp = MibScalar((1, 3, 6, 1, 4, 1, 5089, 1, 2, 2, 1, 1, 11), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: clvIPsecInOctetsComp.setStatus('current')
clvIPsecInOctetsUncomp = MibScalar((1, 3, 6, 1, 4, 1, 5089, 1, 2, 2, 1, 1, 12), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: clvIPsecInOctetsUncomp.setStatus('current')
clvIPsecOutOctetsComp = MibScalar((1, 3, 6, 1, 4, 1, 5089, 1, 2, 2, 1, 1, 13), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: clvIPsecOutOctetsComp.setStatus('current')
clvIPsecOutOctetsUncomp = MibScalar((1, 3, 6, 1, 4, 1, 5089, 1, 2, 2, 1, 1, 14), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: clvIPsecOutOctetsUncomp.setStatus('current')
clvIPsecForwardedOctetsComp = MibScalar((1, 3, 6, 1, 4, 1, 5089, 1, 2, 2, 1, 1, 15), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: clvIPsecForwardedOctetsComp.setStatus('current')
clvIPsecForwardedOctetsUcomp = MibScalar((1, 3, 6, 1, 4, 1, 5089, 1, 2, 2, 1, 1, 16), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: clvIPsecForwardedOctetsUcomp.setStatus('current')
clvIPsecInPackets = MibScalar((1, 3, 6, 1, 4, 1, 5089, 1, 2, 2, 1, 1, 17), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: clvIPsecInPackets.setStatus('current')
clvIPsecOutPackets = MibScalar((1, 3, 6, 1, 4, 1, 5089, 1, 2, 2, 1, 1, 18), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: clvIPsecOutPackets.setStatus('current')
clvIPsecForwardedPackets = MibScalar((1, 3, 6, 1, 4, 1, 5089, 1, 2, 2, 1, 1, 19), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: clvIPsecForwardedPackets.setStatus('current')
clvIPsecActiveTransforms = MibScalar((1, 3, 6, 1, 4, 1, 5089, 1, 2, 2, 1, 1, 20), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: clvIPsecActiveTransforms.setStatus('current')
clvIPsecTotalTransforms = MibScalar((1, 3, 6, 1, 4, 1, 5089, 1, 2, 2, 1, 1, 21), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: clvIPsecTotalTransforms.setStatus('current')
clvIPsecOutOfTransforms = MibScalar((1, 3, 6, 1, 4, 1, 5089, 1, 2, 2, 1, 1, 22), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: clvIPsecOutOfTransforms.setStatus('current')
clvIPsecTotalRekeys = MibScalar((1, 3, 6, 1, 4, 1, 5089, 1, 2, 2, 1, 1, 23), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: clvIPsecTotalRekeys.setStatus('current')
clvRules = MibIdentifier((1, 3, 6, 1, 4, 1, 5089, 1, 2, 3))
clvRuleUseTable = MibTable((1, 3, 6, 1, 4, 1, 5089, 1, 2, 3, 2), )
if mibBuilder.loadTexts: clvRuleUseTable.setStatus('current')
clvRuleUseEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5089, 1, 2, 3, 2, 1), ).setIndexNames((0, "CLAVISTER-MIB", "clvRuleIndex"))
if mibBuilder.loadTexts: clvRuleUseEntry.setStatus('current')
clvRuleIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 5089, 1, 2, 3, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647)))
if mibBuilder.loadTexts: clvRuleIndex.setStatus('current')
clvRuleName = MibTableColumn((1, 3, 6, 1, 4, 1, 5089, 1, 2, 3, 2, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: clvRuleName.setStatus('current')
clvRuleUse = MibTableColumn((1, 3, 6, 1, 4, 1, 5089, 1, 2, 3, 2, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: clvRuleUse.setStatus('current')
clvIPPools = MibIdentifier((1, 3, 6, 1, 4, 1, 5089, 1, 2, 4))
clvIPPoolsNumber = MibScalar((1, 3, 6, 1, 4, 1, 5089, 1, 2, 4, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: clvIPPoolsNumber.setStatus('current')
clvIPPoolTable = MibTable((1, 3, 6, 1, 4, 1, 5089, 1, 2, 4, 2), )
if mibBuilder.loadTexts: clvIPPoolTable.setStatus('current')
clvIPPoolEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5089, 1, 2, 4, 2, 1), ).setIndexNames((0, "CLAVISTER-MIB", "clvIPPoolIndex"))
if mibBuilder.loadTexts: clvIPPoolEntry.setStatus('current')
clvIPPoolIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 5089, 1, 2, 4, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647)))
if mibBuilder.loadTexts: clvIPPoolIndex.setStatus('current')
clvIPPoolName = MibTableColumn((1, 3, 6, 1, 4, 1, 5089, 1, 2, 4, 2, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: clvIPPoolName.setStatus('current')
clvIPPoolPrepare = MibTableColumn((1, 3, 6, 1, 4, 1, 5089, 1, 2, 4, 2, 1, 3), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: clvIPPoolPrepare.setStatus('current')
clvIPPoolFree = MibTableColumn((1, 3, 6, 1, 4, 1, 5089, 1, 2, 4, 2, 1, 4), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: clvIPPoolFree.setStatus('current')
clvIPPoolMisses = MibTableColumn((1, 3, 6, 1, 4, 1, 5089, 1, 2, 4, 2, 1, 5), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: clvIPPoolMisses.setStatus('current')
clvIPPoolClientFails = MibTableColumn((1, 3, 6, 1, 4, 1, 5089, 1, 2, 4, 2, 1, 6), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: clvIPPoolClientFails.setStatus('current')
clvIPPoolUsed = MibTableColumn((1, 3, 6, 1, 4, 1, 5089, 1, 2, 4, 2, 1, 7), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: clvIPPoolUsed.setStatus('current')
clvDHCPServer = MibIdentifier((1, 3, 6, 1, 4, 1, 5089, 1, 2, 5))
clvDHCPTotalRejected = MibScalar((1, 3, 6, 1, 4, 1, 5089, 1, 2, 5, 1), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: clvDHCPTotalRejected.setStatus('current')
clvDHCPRuleTable = MibTable((1, 3, 6, 1, 4, 1, 5089, 1, 2, 5, 2), )
if mibBuilder.loadTexts: clvDHCPRuleTable.setStatus('current')
clvDHCPRuleEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5089, 1, 2, 5, 2, 1), ).setIndexNames((0, "CLAVISTER-MIB", "clvDHCPRuleIndex"))
if mibBuilder.loadTexts: clvDHCPRuleEntry.setStatus('current')
clvDHCPRuleIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 5089, 1, 2, 5, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647)))
if mibBuilder.loadTexts: clvDHCPRuleIndex.setStatus('current')
clvDHCPRuleName = MibTableColumn((1, 3, 6, 1, 4, 1, 5089, 1, 2, 5, 2, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: clvDHCPRuleName.setStatus('current')
clvDHCPRuleUsage = MibTableColumn((1, 3, 6, 1, 4, 1, 5089, 1, 2, 5, 2, 1, 3), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: clvDHCPRuleUsage.setStatus('current')
clvDHCPRuleUsagePercent = MibTableColumn((1, 3, 6, 1, 4, 1, 5089, 1, 2, 5, 2, 1, 4), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: clvDHCPRuleUsagePercent.setStatus('current')
clvDHCPActiveClients = MibTableColumn((1, 3, 6, 1, 4, 1, 5089, 1, 2, 5, 2, 1, 5), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: clvDHCPActiveClients.setStatus('current')
clvDHCPActiveClientsPercent = MibTableColumn((1, 3, 6, 1, 4, 1, 5089, 1, 2, 5, 2, 1, 6), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: clvDHCPActiveClientsPercent.setStatus('current')
clvDHCPRejectedRequests = MibTableColumn((1, 3, 6, 1, 4, 1, 5089, 1, 2, 5, 2, 1, 7), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: clvDHCPRejectedRequests.setStatus('current')
clvDHCPTotalLeases = MibTableColumn((1, 3, 6, 1, 4, 1, 5089, 1, 2, 5, 2, 1, 8), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: clvDHCPTotalLeases.setStatus('current')
clvUserAuth = MibIdentifier((1, 3, 6, 1, 4, 1, 5089, 1, 2, 6))
clvUserAuthHTTPUsers = MibScalar((1, 3, 6, 1, 4, 1, 5089, 1, 2, 6, 1), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: clvUserAuthHTTPUsers.setStatus('current')
clvUserAuthXAUTHUsers = MibScalar((1, 3, 6, 1, 4, 1, 5089, 1, 2, 6, 2), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: clvUserAuthXAUTHUsers.setStatus('current')
clvUserAuthHTTPSUsers = MibScalar((1, 3, 6, 1, 4, 1, 5089, 1, 2, 6, 3), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: clvUserAuthHTTPSUsers.setStatus('current')
clvUserAuthPPPUsers = MibScalar((1, 3, 6, 1, 4, 1, 5089, 1, 2, 6, 4), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: clvUserAuthPPPUsers.setStatus('current')
clvUserAuthEAPUsers = MibScalar((1, 3, 6, 1, 4, 1, 5089, 1, 2, 6, 5), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: clvUserAuthEAPUsers.setStatus('current')
clvUserAuthRuleUseTable = MibTable((1, 3, 6, 1, 4, 1, 5089, 1, 2, 6, 6), )
if mibBuilder.loadTexts: clvUserAuthRuleUseTable.setStatus('current')
clvUserAuthRuleUseEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5089, 1, 2, 6, 6, 1), ).setIndexNames((0, "CLAVISTER-MIB", "clvUserAuthRuleIndex"))
if mibBuilder.loadTexts: clvUserAuthRuleUseEntry.setStatus('current')
clvUserAuthRuleIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 5089, 1, 2, 6, 6, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647)))
if mibBuilder.loadTexts: clvUserAuthRuleIndex.setStatus('current')
clvUserAuthRuleName = MibTableColumn((1, 3, 6, 1, 4, 1, 5089, 1, 2, 6, 6, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: clvUserAuthRuleName.setStatus('current')
clvUserAuthRuleUse = MibTableColumn((1, 3, 6, 1, 4, 1, 5089, 1, 2, 6, 6, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: clvUserAuthRuleUse.setStatus('current')
clvLinkMonitor = MibIdentifier((1, 3, 6, 1, 4, 1, 5089, 1, 2, 7))
clvLinkMonGrp = MibScalar((1, 3, 6, 1, 4, 1, 5089, 1, 2, 7, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: clvLinkMonGrp.setStatus('current')
clvLinkMonGrpTable = MibTable((1, 3, 6, 1, 4, 1, 5089, 1, 2, 7, 2), )
if mibBuilder.loadTexts: clvLinkMonGrpTable.setStatus('current')
clvLinkMonGrpEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5089, 1, 2, 7, 2, 1), ).setIndexNames((0, "CLAVISTER-MIB", "clvLinkMonGrpIndex"))
if mibBuilder.loadTexts: clvLinkMonGrpEntry.setStatus('current')
clvLinkMonGrpIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 5089, 1, 2, 7, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647)))
if mibBuilder.loadTexts: clvLinkMonGrpIndex.setStatus('current')
clvLinkMonGrpName = MibTableColumn((1, 3, 6, 1, 4, 1, 5089, 1, 2, 7, 2, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: clvLinkMonGrpName.setStatus('current')
clvLinkMonGrpHostsUp = MibTableColumn((1, 3, 6, 1, 4, 1, 5089, 1, 2, 7, 2, 1, 3), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: clvLinkMonGrpHostsUp.setStatus('current')
clvLinkMonHostTable = MibTable((1, 3, 6, 1, 4, 1, 5089, 1, 2, 7, 3), )
if mibBuilder.loadTexts: clvLinkMonHostTable.setStatus('current')
clvLinkMonHostEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5089, 1, 2, 7, 3, 1), ).setIndexNames((0, "CLAVISTER-MIB", "clvLinkMonGrpIndex"), (0, "CLAVISTER-MIB", "clvLinkMonHostIndex"))
if mibBuilder.loadTexts: clvLinkMonHostEntry.setStatus('current')
clvLinkMonHostIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 5089, 1, 2, 7, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647)))
if mibBuilder.loadTexts: clvLinkMonHostIndex.setStatus('current')
clvLinkMonHostId = MibTableColumn((1, 3, 6, 1, 4, 1, 5089, 1, 2, 7, 3, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: clvLinkMonHostId.setStatus('current')
clvLinkMonHostShortTermLoss = MibTableColumn((1, 3, 6, 1, 4, 1, 5089, 1, 2, 7, 3, 1, 3), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: clvLinkMonHostShortTermLoss.setStatus('current')
clvLinkMonHostPacketsLost = MibTableColumn((1, 3, 6, 1, 4, 1, 5089, 1, 2, 7, 3, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: clvLinkMonHostPacketsLost.setStatus('current')
clvPipes = MibIdentifier((1, 3, 6, 1, 4, 1, 5089, 1, 2, 8))
clvPipeUsers = MibScalar((1, 3, 6, 1, 4, 1, 5089, 1, 2, 8, 1), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: clvPipeUsers.setStatus('current')
clvPipeTable = MibTable((1, 3, 6, 1, 4, 1, 5089, 1, 2, 8, 2), )
if mibBuilder.loadTexts: clvPipeTable.setStatus('current')
clvPipeEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5089, 1, 2, 8, 2, 1), ).setIndexNames((0, "CLAVISTER-MIB", "clvPipeIndex"))
if mibBuilder.loadTexts: clvPipeEntry.setStatus('current')
clvPipeIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 5089, 1, 2, 8, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647)))
if mibBuilder.loadTexts: clvPipeIndex.setStatus('current')
clvPipeName = MibTableColumn((1, 3, 6, 1, 4, 1, 5089, 1, 2, 8, 2, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: clvPipeName.setStatus('current')
clvPipeMinPrec = MibTableColumn((1, 3, 6, 1, 4, 1, 5089, 1, 2, 8, 2, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: clvPipeMinPrec.setStatus('current')
clvPipeMaxPrec = MibTableColumn((1, 3, 6, 1, 4, 1, 5089, 1, 2, 8, 2, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: clvPipeMaxPrec.setStatus('current')
clvPipeDefPrec = MibTableColumn((1, 3, 6, 1, 4, 1, 5089, 1, 2, 8, 2, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: clvPipeDefPrec.setStatus('current')
clvPipeNumPrec = MibTableColumn((1, 3, 6, 1, 4, 1, 5089, 1, 2, 8, 2, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: clvPipeNumPrec.setStatus('current')
clvPipeNumUsers = MibTableColumn((1, 3, 6, 1, 4, 1, 5089, 1, 2, 8, 2, 1, 7), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: clvPipeNumUsers.setStatus('current')
clvPipeCurrentBps = MibTableColumn((1, 3, 6, 1, 4, 1, 5089, 1, 2, 8, 2, 1, 8), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: clvPipeCurrentBps.setStatus('current')
clvPipeCurrentPps = MibTableColumn((1, 3, 6, 1, 4, 1, 5089, 1, 2, 8, 2, 1, 9), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: clvPipeCurrentPps.setStatus('current')
clvPipeDelayedPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 5089, 1, 2, 8, 2, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: clvPipeDelayedPackets.setStatus('current')
clvPipeDropedPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 5089, 1, 2, 8, 2, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: clvPipeDropedPackets.setStatus('current')
clvPipePrecTable = MibTable((1, 3, 6, 1, 4, 1, 5089, 1, 2, 8, 3), )
if mibBuilder.loadTexts: clvPipePrecTable.setStatus('current')
clvPipePrecEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5089, 1, 2, 8, 3, 1), ).setIndexNames((0, "CLAVISTER-MIB", "clvPipeIndex"), (0, "CLAVISTER-MIB", "clvPipePrecIndex"))
if mibBuilder.loadTexts: clvPipePrecEntry.setStatus('current')
clvPipePrecIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 5089, 1, 2, 8, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647)))
if mibBuilder.loadTexts: clvPipePrecIndex.setStatus('current')
clvPipePrec = MibTableColumn((1, 3, 6, 1, 4, 1, 5089, 1, 2, 8, 3, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: clvPipePrec.setStatus('current')
clvPipePrecBps = MibTableColumn((1, 3, 6, 1, 4, 1, 5089, 1, 2, 8, 3, 1, 3), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: clvPipePrecBps.setStatus('current')
clvPipePrecTotalPps = MibTableColumn((1, 3, 6, 1, 4, 1, 5089, 1, 2, 8, 3, 1, 4), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: clvPipePrecTotalPps.setStatus('current')
clvPipePrecReservedBps = MibTableColumn((1, 3, 6, 1, 4, 1, 5089, 1, 2, 8, 3, 1, 5), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: clvPipePrecReservedBps.setStatus('current')
clvPipePrecDynLimBps = MibTableColumn((1, 3, 6, 1, 4, 1, 5089, 1, 2, 8, 3, 1, 6), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: clvPipePrecDynLimBps.setStatus('current')
clvPipePrecDynUsrLimBps = MibTableColumn((1, 3, 6, 1, 4, 1, 5089, 1, 2, 8, 3, 1, 7), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: clvPipePrecDynUsrLimBps.setStatus('current')
clvPipePrecDelayedPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 5089, 1, 2, 8, 3, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: clvPipePrecDelayedPackets.setStatus('current')
clvPipePrecDropedPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 5089, 1, 2, 8, 3, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: clvPipePrecDropedPackets.setStatus('current')
clvALG = MibIdentifier((1, 3, 6, 1, 4, 1, 5089, 1, 2, 9))
clvAlgSessions = MibScalar((1, 3, 6, 1, 4, 1, 5089, 1, 2, 9, 1), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: clvAlgSessions.setStatus('current')
clvAlgConnections = MibScalar((1, 3, 6, 1, 4, 1, 5089, 1, 2, 9, 2), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: clvAlgConnections.setStatus('current')
clvAlgTCPStreams = MibScalar((1, 3, 6, 1, 4, 1, 5089, 1, 2, 9, 3), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: clvAlgTCPStreams.setStatus('current')
clvHttpAlg = MibIdentifier((1, 3, 6, 1, 4, 1, 5089, 1, 2, 9, 4))
clvHttpAlgTable = MibTable((1, 3, 6, 1, 4, 1, 5089, 1, 2, 9, 4, 1), )
if mibBuilder.loadTexts: clvHttpAlgTable.setStatus('current')
clvHttpAlgEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5089, 1, 2, 9, 4, 1, 1), ).setIndexNames((0, "CLAVISTER-MIB", "clvHttpAlgIndex"))
if mibBuilder.loadTexts: clvHttpAlgEntry.setStatus('current')
clvHttpAlgIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 5089, 1, 2, 9, 4, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647)))
if mibBuilder.loadTexts: clvHttpAlgIndex.setStatus('current')
clvHttpAlgName = MibTableColumn((1, 3, 6, 1, 4, 1, 5089, 1, 2, 9, 4, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: clvHttpAlgName.setStatus('current')
clvHttpAlgTotalRequested = MibTableColumn((1, 3, 6, 1, 4, 1, 5089, 1, 2, 9, 4, 1, 1, 3), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: clvHttpAlgTotalRequested.setStatus('current')
clvHttpAlgTotalAllowed = MibTableColumn((1, 3, 6, 1, 4, 1, 5089, 1, 2, 9, 4, 1, 1, 4), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: clvHttpAlgTotalAllowed.setStatus('current')
clvHttpAlgTotalBlocked = MibTableColumn((1, 3, 6, 1, 4, 1, 5089, 1, 2, 9, 4, 1, 1, 5), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: clvHttpAlgTotalBlocked.setStatus('current')
clvHttpAlgCntFltTable = MibTable((1, 3, 6, 1, 4, 1, 5089, 1, 2, 9, 4, 2), )
if mibBuilder.loadTexts: clvHttpAlgCntFltTable.setStatus('current')
clvHttpAlgCntFltEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5089, 1, 2, 9, 4, 2, 1), ).setIndexNames((0, "CLAVISTER-MIB", "clvHttpAlgIndex"), (0, "CLAVISTER-MIB", "clvHttpAlgCntFltIndex"))
if mibBuilder.loadTexts: clvHttpAlgCntFltEntry.setStatus('current')
clvHttpAlgCntFltIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 5089, 1, 2, 9, 4, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647)))
if mibBuilder.loadTexts: clvHttpAlgCntFltIndex.setStatus('current')
clvHttpAlgCntFltName = MibTableColumn((1, 3, 6, 1, 4, 1, 5089, 1, 2, 9, 4, 2, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: clvHttpAlgCntFltName.setStatus('current')
clvHttpAlgCntFltRequests = MibTableColumn((1, 3, 6, 1, 4, 1, 5089, 1, 2, 9, 4, 2, 1, 3), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: clvHttpAlgCntFltRequests.setStatus('current')
clvHttpAlgCntFltAllowed = MibTableColumn((1, 3, 6, 1, 4, 1, 5089, 1, 2, 9, 4, 2, 1, 4), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: clvHttpAlgCntFltAllowed.setStatus('current')
clvHttpAlgCntFltBlocked = MibTableColumn((1, 3, 6, 1, 4, 1, 5089, 1, 2, 9, 4, 2, 1, 5), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: clvHttpAlgCntFltBlocked.setStatus('current')
clvSmtpAlg = MibIdentifier((1, 3, 6, 1, 4, 1, 5089, 1, 2, 9, 5))
clvSmtpAlgTable = MibTable((1, 3, 6, 1, 4, 1, 5089, 1, 2, 9, 5, 1), )
if mibBuilder.loadTexts: clvSmtpAlgTable.setStatus('current')
clvSmtpAlgEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5089, 1, 2, 9, 5, 1, 1), ).setIndexNames((0, "CLAVISTER-MIB", "clvSmtpAlgIndex"))
if mibBuilder.loadTexts: clvSmtpAlgEntry.setStatus('current')
clvSmtpAlgIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 5089, 1, 2, 9, 5, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647)))
if mibBuilder.loadTexts: clvSmtpAlgIndex.setStatus('current')
clvSmtpAlgName = MibTableColumn((1, 3, 6, 1, 4, 1, 5089, 1, 2, 9, 5, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: clvSmtpAlgName.setStatus('current')
clvSmtpAlgTotCheckedSes = MibTableColumn((1, 3, 6, 1, 4, 1, 5089, 1, 2, 9, 5, 1, 1, 3), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: clvSmtpAlgTotCheckedSes.setStatus('current')
clvSmtpAlgTotSpamSes = MibTableColumn((1, 3, 6, 1, 4, 1, 5089, 1, 2, 9, 5, 1, 1, 4), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: clvSmtpAlgTotSpamSes.setStatus('current')
clvSmtpAlgTotDroppedSes = MibTableColumn((1, 3, 6, 1, 4, 1, 5089, 1, 2, 9, 5, 1, 1, 5), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: clvSmtpAlgTotDroppedSes.setStatus('current')
clvSmtpAlgDnsBlTable = MibTable((1, 3, 6, 1, 4, 1, 5089, 1, 2, 9, 5, 2), )
if mibBuilder.loadTexts: clvSmtpAlgDnsBlTable.setStatus('current')
clvSmtpAlgDnsBlEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5089, 1, 2, 9, 5, 2, 1), ).setIndexNames((0, "CLAVISTER-MIB", "clvSmtpAlgIndex"), (0, "CLAVISTER-MIB", "clvSmtpAlgDnsBlIndex"))
if mibBuilder.loadTexts: clvSmtpAlgDnsBlEntry.setStatus('current')
clvSmtpAlgDnsBlIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 5089, 1, 2, 9, 5, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647)))
if mibBuilder.loadTexts: clvSmtpAlgDnsBlIndex.setStatus('current')
clvSmtpAlgDnsBlName = MibTableColumn((1, 3, 6, 1, 4, 1, 5089, 1, 2, 9, 5, 2, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: clvSmtpAlgDnsBlName.setStatus('current')
clvSmtpAlgDnsBlChecked = MibTableColumn((1, 3, 6, 1, 4, 1, 5089, 1, 2, 9, 5, 2, 1, 3), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: clvSmtpAlgDnsBlChecked.setStatus('current')
clvSmtpAlgDnsBlMatched = MibTableColumn((1, 3, 6, 1, 4, 1, 5089, 1, 2, 9, 5, 2, 1, 4), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: clvSmtpAlgDnsBlMatched.setStatus('current')
clvSmtpAlgDnsBlFailChecks = MibTableColumn((1, 3, 6, 1, 4, 1, 5089, 1, 2, 9, 5, 2, 1, 5), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: clvSmtpAlgDnsBlFailChecks.setStatus('current')
clvDHCPRelay = MibIdentifier((1, 3, 6, 1, 4, 1, 5089, 1, 2, 11))
clvDHCPRelayCurClients = MibScalar((1, 3, 6, 1, 4, 1, 5089, 1, 2, 11, 1), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: clvDHCPRelayCurClients.setStatus('current')
clvDHCPRelayCurTrans = MibScalar((1, 3, 6, 1, 4, 1, 5089, 1, 2, 11, 2), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: clvDHCPRelayCurTrans.setStatus('current')
clvDHCPRelayRejected = MibScalar((1, 3, 6, 1, 4, 1, 5089, 1, 2, 11, 3), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: clvDHCPRelayRejected.setStatus('current')
clvDHCPRelayRuleTable = MibTable((1, 3, 6, 1, 4, 1, 5089, 1, 2, 11, 4), )
if mibBuilder.loadTexts: clvDHCPRelayRuleTable.setStatus('current')
clvDHCPRelayRuleEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5089, 1, 2, 11, 4, 1), ).setIndexNames((0, "CLAVISTER-MIB", "clvDHCPRelayRuleIndex"))
if mibBuilder.loadTexts: clvDHCPRelayRuleEntry.setStatus('current')
clvDHCPRelayRuleIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 5089, 1, 2, 11, 4, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647)))
if mibBuilder.loadTexts: clvDHCPRelayRuleIndex.setStatus('current')
clvDHCPRelayRuleName = MibTableColumn((1, 3, 6, 1, 4, 1, 5089, 1, 2, 11, 4, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: clvDHCPRelayRuleName.setStatus('current')
clvDHCPRelayRuleHits = MibTableColumn((1, 3, 6, 1, 4, 1, 5089, 1, 2, 11, 4, 1, 3), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: clvDHCPRelayRuleHits.setStatus('current')
clvDHCPRelayRuleCurClients = MibTableColumn((1, 3, 6, 1, 4, 1, 5089, 1, 2, 11, 4, 1, 4), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: clvDHCPRelayRuleCurClients.setStatus('current')
clvDHCPRelayRuleRejCliPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 5089, 1, 2, 11, 4, 1, 5), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: clvDHCPRelayRuleRejCliPkts.setStatus('current')
clvDHCPRelayRuleRejSrvPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 5089, 1, 2, 11, 4, 1, 6), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: clvDHCPRelayRuleRejSrvPkts.setStatus('current')
clvHA = MibIdentifier((1, 3, 6, 1, 4, 1, 5089, 1, 2, 12))
clvHASyncSendQueueLength = MibScalar((1, 3, 6, 1, 4, 1, 5089, 1, 2, 12, 1), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: clvHASyncSendQueueLength.setStatus('current')
clvHASyncSendQueueUsagePackets = MibScalar((1, 3, 6, 1, 4, 1, 5089, 1, 2, 12, 2), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: clvHASyncSendQueueUsagePackets.setStatus('current')
clvHASyncSendQueueUsageOctects = MibScalar((1, 3, 6, 1, 4, 1, 5089, 1, 2, 12, 3), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: clvHASyncSendQueueUsageOctects.setStatus('current')
clvHASyncSentPackets = MibScalar((1, 3, 6, 1, 4, 1, 5089, 1, 2, 12, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: clvHASyncSentPackets.setStatus('current')
clvHASyncSendResentPackets = MibScalar((1, 3, 6, 1, 4, 1, 5089, 1, 2, 12, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: clvHASyncSendResentPackets.setStatus('current')
clavisterStatsConformance = MibIdentifier((1, 3, 6, 1, 4, 1, 5089, 2, 2, 1))
clavisterStatsRegGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 5089, 2, 3, 1))
clvSystemObjectGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 5089, 2, 3, 1, 1)).setObjects(("CLAVISTER-MIB", "clvSysCpuLoad"), ("CLAVISTER-MIB", "clvSysForwardedBits"), ("CLAVISTER-MIB", "clvSysForwardedPackets"), ("CLAVISTER-MIB", "clvSysBuffUse"), ("CLAVISTER-MIB", "clvSysConns"), ("CLAVISTER-MIB", "clvHWSensorName"), ("CLAVISTER-MIB", "clvHWSensorValue"), ("CLAVISTER-MIB", "clvHWSensorUnit"), ("CLAVISTER-MIB", "clvSysMemUsage"), ("CLAVISTER-MIB", "clvSysTimerUsage"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    clvSystemObjectGroup = clvSystemObjectGroup.setStatus('current')
clvIPsecObjectGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 5089, 2, 3, 1, 2)).setObjects(("CLAVISTER-MIB", "clvIPsecPhaseOneActive"), ("CLAVISTER-MIB", "clvIPsecPhaseOneAggrModeDone"), ("CLAVISTER-MIB", "clvIPsecQuickModeActive"), ("CLAVISTER-MIB", "clvIPsecPhaseOneDone"), ("CLAVISTER-MIB", "clvIPsecPhaseOneFailed"), ("CLAVISTER-MIB", "clvIPsecPhaseOneRekeyed"), ("CLAVISTER-MIB", "clvIPsecQuickModeDone"), ("CLAVISTER-MIB", "clvIPsecQuickModeFailed"), ("CLAVISTER-MIB", "clvIPsecInfoDone"), ("CLAVISTER-MIB", "clvIPsecInfoFailed"), ("CLAVISTER-MIB", "clvIPsecInOctetsComp"), ("CLAVISTER-MIB", "clvIPsecInOctetsUncomp"), ("CLAVISTER-MIB", "clvIPsecOutOctetsComp"), ("CLAVISTER-MIB", "clvIPsecOutOctetsUncomp"), ("CLAVISTER-MIB", "clvIPsecForwardedOctetsComp"), ("CLAVISTER-MIB", "clvIPsecForwardedOctetsUcomp"), ("CLAVISTER-MIB", "clvIPsecInPackets"), ("CLAVISTER-MIB", "clvIPsecOutPackets"), ("CLAVISTER-MIB", "clvIPsecForwardedPackets"), ("CLAVISTER-MIB", "clvIPsecActiveTransforms"), ("CLAVISTER-MIB", "clvIPsecTotalTransforms"), ("CLAVISTER-MIB", "clvIPsecOutOfTransforms"), ("CLAVISTER-MIB", "clvIPsecTotalRekeys"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    clvIPsecObjectGroup = clvIPsecObjectGroup.setStatus('current')
clvStateCountersGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 5089, 2, 3, 1, 3)).setObjects(("CLAVISTER-MIB", "clvSysPscTcpSyn"), ("CLAVISTER-MIB", "clvSysPscTcpOpen"), ("CLAVISTER-MIB", "clvSysPscTcpFin"), ("CLAVISTER-MIB", "clvSysPscUdp"), ("CLAVISTER-MIB", "clvSysPscIcmp"), ("CLAVISTER-MIB", "clvSysPscOther"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    clvStateCountersGroup = clvStateCountersGroup.setStatus('current')
clvIPPoolGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 5089, 2, 3, 1, 4)).setObjects(("CLAVISTER-MIB", "clvIPPoolsNumber"), ("CLAVISTER-MIB", "clvIPPoolName"), ("CLAVISTER-MIB", "clvIPPoolPrepare"), ("CLAVISTER-MIB", "clvIPPoolFree"), ("CLAVISTER-MIB", "clvIPPoolMisses"), ("CLAVISTER-MIB", "clvIPPoolClientFails"), ("CLAVISTER-MIB", "clvIPPoolUsed"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    clvIPPoolGroup = clvIPPoolGroup.setStatus('current')
clvDHCPServerGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 5089, 2, 3, 1, 5)).setObjects(("CLAVISTER-MIB", "clvDHCPTotalRejected"), ("CLAVISTER-MIB", "clvDHCPRuleName"), ("CLAVISTER-MIB", "clvDHCPRuleUsage"), ("CLAVISTER-MIB", "clvDHCPRuleUsagePercent"), ("CLAVISTER-MIB", "clvDHCPActiveClients"), ("CLAVISTER-MIB", "clvDHCPActiveClientsPercent"), ("CLAVISTER-MIB", "clvDHCPRejectedRequests"), ("CLAVISTER-MIB", "clvDHCPTotalLeases"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    clvDHCPServerGroup = clvDHCPServerGroup.setStatus('current')
clvRuleUseGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 5089, 2, 3, 1, 6)).setObjects(("CLAVISTER-MIB", "clvRuleName"), ("CLAVISTER-MIB", "clvRuleUse"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    clvRuleUseGroup = clvRuleUseGroup.setStatus('current')
clvUserAuthGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 5089, 2, 3, 1, 7)).setObjects(("CLAVISTER-MIB", "clvUserAuthHTTPUsers"), ("CLAVISTER-MIB", "clvUserAuthXAUTHUsers"), ("CLAVISTER-MIB", "clvUserAuthHTTPSUsers"), ("CLAVISTER-MIB", "clvUserAuthPPPUsers"), ("CLAVISTER-MIB", "clvUserAuthEAPUsers"), ("CLAVISTER-MIB", "clvUserAuthRuleName"), ("CLAVISTER-MIB", "clvUserAuthRuleUse"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    clvUserAuthGroup = clvUserAuthGroup.setStatus('current')
clvIfStatsGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 5089, 2, 3, 1, 8)).setObjects(("CLAVISTER-MIB", "clvIfName"), ("CLAVISTER-MIB", "clvIfFragsIn"), ("CLAVISTER-MIB", "clvIfFragReassOk"), ("CLAVISTER-MIB", "clvIfFragReassFail"), ("CLAVISTER-MIB", "clvIfPktsInCnt"), ("CLAVISTER-MIB", "clvIfPktsOutCnt"), ("CLAVISTER-MIB", "clvIfBitsInCnt"), ("CLAVISTER-MIB", "clvIfBitsOutCnt"), ("CLAVISTER-MIB", "clvIfPktsTotCnt"), ("CLAVISTER-MIB", "clvIfBitsTotCnt"), ("CLAVISTER-MIB", "clvIfRxRingFifoErrors"), ("CLAVISTER-MIB", "clvIfRxDespools"), ("CLAVISTER-MIB", "clvIfRxAvgUse"), ("CLAVISTER-MIB", "clvIfRxRingSaturation"), ("CLAVISTER-MIB", "clvRxRingFlooded"), ("CLAVISTER-MIB", "clvIfTxDespools"), ("CLAVISTER-MIB", "clvIfTxAvgUse"), ("CLAVISTER-MIB", "clvIfTxRingSaturation"), ("CLAVISTER-MIB", "clvRxTingFlooded"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    clvIfStatsGroup = clvIfStatsGroup.setStatus('current')
clvLinkMonitorGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 5089, 2, 3, 1, 9)).setObjects(("CLAVISTER-MIB", "clvLinkMonGrp"), ("CLAVISTER-MIB", "clvLinkMonGrpName"), ("CLAVISTER-MIB", "clvLinkMonGrpHostsUp"), ("CLAVISTER-MIB", "clvLinkMonHostId"), ("CLAVISTER-MIB", "clvLinkMonHostShortTermLoss"), ("CLAVISTER-MIB", "clvLinkMonHostPacketsLost"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    clvLinkMonitorGroup = clvLinkMonitorGroup.setStatus('current')
clvPipesObjectGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 5089, 2, 3, 1, 10)).setObjects(("CLAVISTER-MIB", "clvPipeUsers"), ("CLAVISTER-MIB", "clvPipeName"), ("CLAVISTER-MIB", "clvPipeMinPrec"), ("CLAVISTER-MIB", "clvPipeMaxPrec"), ("CLAVISTER-MIB", "clvPipeDefPrec"), ("CLAVISTER-MIB", "clvPipeNumPrec"), ("CLAVISTER-MIB", "clvPipeNumUsers"), ("CLAVISTER-MIB", "clvPipeCurrentBps"), ("CLAVISTER-MIB", "clvPipeCurrentPps"), ("CLAVISTER-MIB", "clvPipeDelayedPackets"), ("CLAVISTER-MIB", "clvPipeDropedPackets"), ("CLAVISTER-MIB", "clvPipePrec"), ("CLAVISTER-MIB", "clvPipePrecBps"), ("CLAVISTER-MIB", "clvPipePrecTotalPps"), ("CLAVISTER-MIB", "clvPipePrecReservedBps"), ("CLAVISTER-MIB", "clvPipePrecDynLimBps"), ("CLAVISTER-MIB", "clvPipePrecDynUsrLimBps"), ("CLAVISTER-MIB", "clvPipePrecDelayedPackets"), ("CLAVISTER-MIB", "clvPipePrecDropedPackets"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    clvPipesObjectGroup = clvPipesObjectGroup.setStatus('current')
clvDHCPRelayObjectGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 5089, 2, 3, 1, 12)).setObjects(("CLAVISTER-MIB", "clvDHCPRelayCurClients"), ("CLAVISTER-MIB", "clvDHCPRelayCurTrans"), ("CLAVISTER-MIB", "clvDHCPRelayRejected"), ("CLAVISTER-MIB", "clvDHCPRelayRuleName"), ("CLAVISTER-MIB", "clvDHCPRelayRuleHits"), ("CLAVISTER-MIB", "clvDHCPRelayRuleCurClients"), ("CLAVISTER-MIB", "clvDHCPRelayRuleRejCliPkts"), ("CLAVISTER-MIB", "clvDHCPRelayRuleRejSrvPkts"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    clvDHCPRelayObjectGroup = clvDHCPRelayObjectGroup.setStatus('current')
clvAlgGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 5089, 2, 3, 1, 13)).setObjects(("CLAVISTER-MIB", "clvAlgSessions"), ("CLAVISTER-MIB", "clvAlgConnections"), ("CLAVISTER-MIB", "clvAlgTCPStreams"), ("CLAVISTER-MIB", "clvHttpAlgName"), ("CLAVISTER-MIB", "clvHttpAlgTotalRequested"), ("CLAVISTER-MIB", "clvHttpAlgTotalAllowed"), ("CLAVISTER-MIB", "clvHttpAlgTotalBlocked"), ("CLAVISTER-MIB", "clvHttpAlgCntFltName"), ("CLAVISTER-MIB", "clvHttpAlgCntFltRequests"), ("CLAVISTER-MIB", "clvHttpAlgCntFltAllowed"), ("CLAVISTER-MIB", "clvHttpAlgCntFltBlocked"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    clvAlgGroup = clvAlgGroup.setStatus('current')
clvHAGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 5089, 2, 3, 1, 14)).setObjects(("CLAVISTER-MIB", "clvHASyncSendQueueLength"), ("CLAVISTER-MIB", "clvHASyncSendQueueUsagePackets"), ("CLAVISTER-MIB", "clvHASyncSendQueueUsageOctects"), ("CLAVISTER-MIB", "clvHASyncSentPackets"), ("CLAVISTER-MIB", "clvHASyncSendResentPackets"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    clvHAGroup = clvHAGroup.setStatus('current')
clvIfVlanGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 5089, 2, 3, 1, 15)).setObjects(("CLAVISTER-MIB", "clvIfVlanUntaggedInPkts"), ("CLAVISTER-MIB", "clvIfVlanUntaggedOutPkts"), ("CLAVISTER-MIB", "clvIfVlanUntaggedTotPkts"), ("CLAVISTER-MIB", "clvIfVlanUntaggedInOctets"), ("CLAVISTER-MIB", "clvIfVlanUntaggedOutOctets"), ("CLAVISTER-MIB", "clvIfVlanUntaggedTotOctets"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    clvIfVlanGroup = clvIfVlanGroup.setStatus('current')
clvSmtpAlgGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 5089, 2, 3, 1, 16)).setObjects(("CLAVISTER-MIB", "clvSmtpAlgName"), ("CLAVISTER-MIB", "clvSmtpAlgTotCheckedSes"), ("CLAVISTER-MIB", "clvSmtpAlgTotSpamSes"), ("CLAVISTER-MIB", "clvSmtpAlgTotDroppedSes"), ("CLAVISTER-MIB", "clvSmtpAlgDnsBlName"), ("CLAVISTER-MIB", "clvSmtpAlgDnsBlChecked"), ("CLAVISTER-MIB", "clvSmtpAlgDnsBlMatched"), ("CLAVISTER-MIB", "clvSmtpAlgDnsBlFailChecks"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    clvSmtpAlgGroup = clvSmtpAlgGroup.setStatus('current')
clvSysTCPGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 5089, 2, 3, 1, 17)).setObjects(("CLAVISTER-MIB", "clvSysTCPRecvSmall"), ("CLAVISTER-MIB", "clvSysTCPRecvLarge"), ("CLAVISTER-MIB", "clvSysTCPSendSmall"), ("CLAVISTER-MIB", "clvSysTCPSendLarge"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    clvSysTCPGroup = clvSysTCPGroup.setStatus('current')
clavisterStatsCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 5089, 2, 2, 1, 1)).setObjects(("CLAVISTER-MIB", "clvSystemObjectGroup"), ("CLAVISTER-MIB", "clvIPsecObjectGroup"), ("CLAVISTER-MIB", "clvStateCountersGroup"), ("CLAVISTER-MIB", "clvIPPoolGroup"), ("CLAVISTER-MIB", "clvDHCPServerGroup"), ("CLAVISTER-MIB", "clvRuleUseGroup"), ("CLAVISTER-MIB", "clvUserAuthGroup"), ("CLAVISTER-MIB", "clvIfStatsGroup"), ("CLAVISTER-MIB", "clvLinkMonitorGroup"), ("CLAVISTER-MIB", "clvPipesObjectGroup"), ("CLAVISTER-MIB", "clvDHCPRelayObjectGroup"), ("CLAVISTER-MIB", "clvAlgGroup"), ("CLAVISTER-MIB", "clvHAGroup"), ("CLAVISTER-MIB", "clvIfVlanGroup"), ("CLAVISTER-MIB", "clvSmtpAlgGroup"), ("CLAVISTER-MIB", "clvSysTCPGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    clavisterStatsCompliance = clavisterStatsCompliance.setStatus('current')
mibBuilder.exportSymbols("CLAVISTER-MIB", clvLinkMonGrp=clvLinkMonGrp, clvIPPoolsNumber=clvIPPoolsNumber, clvPipeCurrentPps=clvPipeCurrentPps, clvDHCPRuleUsage=clvDHCPRuleUsage, clvSysTimerUsage=clvSysTimerUsage, clvIfName=clvIfName, clvIfTxRingSaturation=clvIfTxRingSaturation, clvDHCPRelayRuleRejCliPkts=clvDHCPRelayRuleRejCliPkts, clvHA=clvHA, clvSysTCPUsage=clvSysTCPUsage, clvIPsecInfoFailed=clvIPsecInfoFailed, clvIfStatsGroup=clvIfStatsGroup, clvPipeDelayedPackets=clvPipeDelayedPackets, clvLinkMonHostEntry=clvLinkMonHostEntry, clvPipeUsers=clvPipeUsers, clvDHCPRuleTable=clvDHCPRuleTable, clvPipePrecDelayedPackets=clvPipePrecDelayedPackets, clvPipeName=clvPipeName, clvIfVlanGroup=clvIfVlanGroup, clvIPsecOutPackets=clvIPsecOutPackets, clvDHCPRelayRuleTable=clvDHCPRelayRuleTable, clvIfRxDespools=clvIfRxDespools, clvIfVlanIndex=clvIfVlanIndex, clvSmtpAlgName=clvSmtpAlgName, clvIPPoolFree=clvIPPoolFree, clvIPsecPhaseOneFailed=clvIPsecPhaseOneFailed, clvAlgConnections=clvAlgConnections, clvIPsecPhaseOneActive=clvIPsecPhaseOneActive, clvSysPscTcpSyn=clvSysPscTcpSyn, clvPipeCurrentBps=clvPipeCurrentBps, clvVPN=clvVPN, clvSysTCPSendLarge=clvSysTCPSendLarge, clvIPsecObjectGroup=clvIPsecObjectGroup, clvIPPoolIndex=clvIPPoolIndex, clvSmtpAlgTotCheckedSes=clvSmtpAlgTotCheckedSes, clvPipeIndex=clvPipeIndex, clvIPsecTotalTransforms=clvIPsecTotalTransforms, clvIfBitsOutCnt=clvIfBitsOutCnt, clvLinkMonHostId=clvLinkMonHostId, clvLinkMonitorGroup=clvLinkMonitorGroup, clvALG=clvALG, clvIfVlanStatsEntry=clvIfVlanStatsEntry, clvPipePrecReservedBps=clvPipePrecReservedBps, clvDHCPRelayRuleIndex=clvDHCPRelayRuleIndex, clvPipePrecDynLimBps=clvPipePrecDynLimBps, clvSysPscOther=clvSysPscOther, clvIfStatsEntry=clvIfStatsEntry, clvIfVlanUntaggedTotOctets=clvIfVlanUntaggedTotOctets, clvDHCPTotalRejected=clvDHCPTotalRejected, clvPipePrecTable=clvPipePrecTable, clvIPsecPhaseOneRekeyed=clvIPsecPhaseOneRekeyed, clvDHCPRelayCurClients=clvDHCPRelayCurClients, clavisterStatsRegGroups=clavisterStatsRegGroups, clvRuleUseGroup=clvRuleUseGroup, clvRuleUseEntry=clvRuleUseEntry, clvRuleName=clvRuleName, clvIPsecQuickModeDone=clvIPsecQuickModeDone, clvSysPscIcmp=clvSysPscIcmp, clvSmtpAlg=clvSmtpAlg, clvIfFragsIn=clvIfFragsIn, clvIfRxRingIndex=clvIfRxRingIndex, clvIPsecOutOctetsUncomp=clvIPsecOutOctetsUncomp, clvPipePrecDropedPackets=clvPipePrecDropedPackets, clvHttpAlgTable=clvHttpAlgTable, clvSmtpAlgTotSpamSes=clvSmtpAlgTotSpamSes, clvIPPoolTable=clvIPPoolTable, clvSystemObjectGroup=clvSystemObjectGroup, clvIfPktsOutCnt=clvIfPktsOutCnt, clvPipePrecEntry=clvPipePrecEntry, clvPipePrecDynUsrLimBps=clvPipePrecDynUsrLimBps, clvHttpAlgCntFltBlocked=clvHttpAlgCntFltBlocked, clvLinkMonHostIndex=clvLinkMonHostIndex, clvUserAuthRuleName=clvUserAuthRuleName, clvIfRxRingSaturation=clvIfRxRingSaturation, clvIfTxAvgUse=clvIfTxAvgUse, clvHASyncSendQueueLength=clvHASyncSendQueueLength, clvIfStatsIndex=clvIfStatsIndex, clvDHCPRejectedRequests=clvDHCPRejectedRequests, clvPipeTable=clvPipeTable, clvSmtpAlgIndex=clvSmtpAlgIndex, clvIPsecForwardedPackets=clvIPsecForwardedPackets, clvPipeMinPrec=clvPipeMinPrec, clvHttpAlg=clvHttpAlg, clvIPsecInOctetsUncomp=clvIPsecInOctetsUncomp, clvDHCPRelayRuleEntry=clvDHCPRelayRuleEntry, clvUserAuthGroup=clvUserAuthGroup, clvSmtpAlgDnsBlFailChecks=clvSmtpAlgDnsBlFailChecks, clvDHCPRelayRejected=clvDHCPRelayRejected, clvPipePrec=clvPipePrec, clvIPsecOutOfTransforms=clvIPsecOutOfTransforms, clvHASyncSendQueueUsagePackets=clvHASyncSendQueueUsagePackets, clvIPsecOutOctetsComp=clvIPsecOutOctetsComp, clvHWSensorName=clvHWSensorName, clvHWSensorUnit=clvHWSensorUnit, clvLinkMonGrpEntry=clvLinkMonGrpEntry, clvIfVlanUntaggedInOctets=clvIfVlanUntaggedInOctets, clvSmtpAlgTable=clvSmtpAlgTable, clvSysBuffUse=clvSysBuffUse, clvLinkMonHostPacketsLost=clvLinkMonHostPacketsLost, clvDHCPRelayRuleHits=clvDHCPRelayRuleHits, clvUserAuthHTTPUsers=clvUserAuthHTTPUsers, clvDHCPRelayRuleRejSrvPkts=clvDHCPRelayRuleRejSrvPkts, clvIPPoolGroup=clvIPPoolGroup, clvIfRxRingFifoErrors=clvIfRxRingFifoErrors, clvIPPools=clvIPPools, clvUserAuthPPPUsers=clvUserAuthPPPUsers, clvPipeNumPrec=clvPipeNumPrec, clvIPsecForwardedOctetsUcomp=clvIPsecForwardedOctetsUcomp, clvRxTingFlooded=clvRxTingFlooded, clvSmtpAlgDnsBlMatched=clvSmtpAlgDnsBlMatched, clvIPsecPhaseOneDone=clvIPsecPhaseOneDone, clvDHCPRuleUsagePercent=clvDHCPRuleUsagePercent, clvUserAuthXAUTHUsers=clvUserAuthXAUTHUsers, clvDHCPActiveClientsPercent=clvDHCPActiveClientsPercent, clvRuleUse=clvRuleUse, clvHASyncSendQueueUsageOctects=clvHASyncSendQueueUsageOctects, clvHWSensorEntry=clvHWSensorEntry, clvIPsecInfoDone=clvIPsecInfoDone, clvHttpAlgCntFltTable=clvHttpAlgCntFltTable, clvIPsecPhaseOneAggrModeDone=clvIPsecPhaseOneAggrModeDone, clavisterStatsMibModule=clavisterStatsMibModule, clvHWSensorValue=clvHWSensorValue, clvIfFragReassOk=clvIfFragReassOk, clvIfTxDespools=clvIfTxDespools, clvDHCPTotalLeases=clvDHCPTotalLeases, clvLinkMonitor=clvLinkMonitor, clvPipeNumUsers=clvPipeNumUsers, clvIPsecInOctetsComp=clvIPsecInOctetsComp, clvIfVlanUntaggedOutPkts=clvIfVlanUntaggedOutPkts, clvSysTCPRecvLarge=clvSysTCPRecvLarge, clvIfVlanUntaggedTotPkts=clvIfVlanUntaggedTotPkts, clvAlgTCPStreams=clvAlgTCPStreams, clvRuleIndex=clvRuleIndex, PYSNMP_MODULE_ID=clavisterStatsMibModule, clvLinkMonGrpHostsUp=clvLinkMonGrpHostsUp, clvDHCPActiveClients=clvDHCPActiveClients, clvUserAuthRuleUseTable=clvUserAuthRuleUseTable, clvSysForwardedBits=clvSysForwardedBits, clvPipeMaxPrec=clvPipeMaxPrec, clvHWSensorIndex=clvHWSensorIndex, clvLinkMonHostTable=clvLinkMonHostTable, clvIfVlanUntaggedOutOctets=clvIfVlanUntaggedOutOctets, clvIfTxRingEntry=clvIfTxRingEntry, clvPipePrecTotalPps=clvPipePrecTotalPps, clvSmtpAlgEntry=clvSmtpAlgEntry, clvSmtpAlgTotDroppedSes=clvSmtpAlgTotDroppedSes, clvDHCPRelayRuleCurClients=clvDHCPRelayRuleCurClients, clvSysPscUdp=clvSysPscUdp, clvSysTCPRecvSmall=clvSysTCPRecvSmall, clvLinkMonGrpIndex=clvLinkMonGrpIndex, clvIfPktsTotCnt=clvIfPktsTotCnt, clvIPPoolName=clvIPPoolName, clvRxRingFlooded=clvRxRingFlooded, clvPipePrecIndex=clvPipePrecIndex, clvSmtpAlgDnsBlEntry=clvSmtpAlgDnsBlEntry, clvSysTCPSendSmall=clvSysTCPSendSmall, clvLinkMonHostShortTermLoss=clvLinkMonHostShortTermLoss, clvRules=clvRules, clvSysCpuLoad=clvSysCpuLoad, clvHttpAlgCntFltEntry=clvHttpAlgCntFltEntry, clvUserAuthHTTPSUsers=clvUserAuthHTTPSUsers, clvIfBitsTotCnt=clvIfBitsTotCnt, clvIfPktsInCnt=clvIfPktsInCnt, clvAlgGroup=clvAlgGroup, clvHWSensorTable=clvHWSensorTable, clvPipeEntry=clvPipeEntry, clvIPsecTotalRekeys=clvIPsecTotalRekeys, clvIPsecGlobal=clvIPsecGlobal, clvSystem=clvSystem, clvHAGroup=clvHAGroup, clvIPPoolUsed=clvIPPoolUsed, clvSmtpAlgDnsBlChecked=clvSmtpAlgDnsBlChecked, clvSmtpAlgGroup=clvSmtpAlgGroup, clvIfTxRingTable=clvIfTxRingTable, clvSysTCPGroup=clvSysTCPGroup, clvRuleUseTable=clvRuleUseTable, clvIfRxRingEntry=clvIfRxRingEntry, clvAlgSessions=clvAlgSessions, clvIfRxRingTable=clvIfRxRingTable, clvPipes=clvPipes, clvUserAuthRuleUseEntry=clvUserAuthRuleUseEntry, clvHttpAlgCntFltAllowed=clvHttpAlgCntFltAllowed, clavisterStatsCompliance=clavisterStatsCompliance, clvIPPoolPrepare=clvIPPoolPrepare, clvHASyncSentPackets=clvHASyncSentPackets, clvSmtpAlgDnsBlName=clvSmtpAlgDnsBlName, clvDHCPServer=clvDHCPServer, clvIfTxRingIndex=clvIfTxRingIndex, clvIPsecForwardedOctetsComp=clvIPsecForwardedOctetsComp, clvIPPoolClientFails=clvIPPoolClientFails, clvDHCPRelayObjectGroup=clvDHCPRelayObjectGroup, clvSysForwardedPackets=clvSysForwardedPackets, clvIPPoolMisses=clvIPPoolMisses, clvIfStatsTable=clvIfStatsTable, clvUserAuthRuleUse=clvUserAuthRuleUse, clvDHCPRelayRuleName=clvDHCPRelayRuleName, clavisterStatsConformance=clavisterStatsConformance, clvDHCPRuleName=clvDHCPRuleName, clvHttpAlgCntFltName=clvHttpAlgCntFltName, clvSysConns=clvSysConns, clvHttpAlgCntFltRequests=clvHttpAlgCntFltRequests, clvIfFragReassFail=clvIfFragReassFail, clvPipeDefPrec=clvPipeDefPrec, clvIPsecInPackets=clvIPsecInPackets, clvDHCPServerGroup=clvDHCPServerGroup, clvHttpAlgCntFltIndex=clvHttpAlgCntFltIndex, clvUserAuth=clvUserAuth, clvLinkMonGrpTable=clvLinkMonGrpTable, clvLinkMonGrpName=clvLinkMonGrpName, clvIfRxAvgUse=clvIfRxAvgUse, clvHttpAlgIndex=clvHttpAlgIndex, clvIfVlanUntaggedInPkts=clvIfVlanUntaggedInPkts, clvHttpAlgEntry=clvHttpAlgEntry, clvUserAuthRuleIndex=clvUserAuthRuleIndex, clvHASyncSendResentPackets=clvHASyncSendResentPackets, clvDHCPRelayCurTrans=clvDHCPRelayCurTrans, clvSysPerStateCounters=clvSysPerStateCounters, clvSysPscTcpFin=clvSysPscTcpFin, clvSmtpAlgDnsBlIndex=clvSmtpAlgDnsBlIndex, clvPipePrecBps=clvPipePrecBps, clvSmtpAlgDnsBlTable=clvSmtpAlgDnsBlTable, clvUserAuthEAPUsers=clvUserAuthEAPUsers, clvHttpAlgTotalRequested=clvHttpAlgTotalRequested, clvIPsec=clvIPsec, clvIPsecActiveTransforms=clvIPsecActiveTransforms, clvDHCPRuleEntry=clvDHCPRuleEntry, clvPipeDropedPackets=clvPipeDropedPackets, clvHttpAlgTotalBlocked=clvHttpAlgTotalBlocked, clvStateCountersGroup=clvStateCountersGroup, clvSysMemUsage=clvSysMemUsage, clvDHCPRelay=clvDHCPRelay, clvHttpAlgName=clvHttpAlgName, clvIfVlanStatsTable=clvIfVlanStatsTable, clvIPsecQuickModeActive=clvIPsecQuickModeActive, clvPipesObjectGroup=clvPipesObjectGroup, clvIPsecQuickModeFailed=clvIPsecQuickModeFailed, clvIPPoolEntry=clvIPPoolEntry, clvHttpAlgTotalAllowed=clvHttpAlgTotalAllowed, clvIfBitsInCnt=clvIfBitsInCnt, clvSysPscTcpOpen=clvSysPscTcpOpen, clvDHCPRuleIndex=clvDHCPRuleIndex)
