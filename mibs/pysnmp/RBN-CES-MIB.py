#
# PySNMP MIB module RBN-CES-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/RBN-CES-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 20:44:10 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, Integer, OctetString = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "Integer", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsUnion, SingleValueConstraint, ValueRangeConstraint, ConstraintsIntersection, ValueSizeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsUnion", "SingleValueConstraint", "ValueRangeConstraint", "ConstraintsIntersection", "ValueSizeConstraint")
InterfaceIndex, = mibBuilder.importSymbols("IF-MIB", "InterfaceIndex")
RbnAlarmId, = mibBuilder.importSymbols("RBN-ALARM-TC", "RbnAlarmId")
rbnMgmt, = mibBuilder.importSymbols("RBN-SMI", "rbnMgmt")
RbnPercentage, = mibBuilder.importSymbols("RBN-TC", "RbnPercentage")
ModuleCompliance, NotificationGroup, ObjectGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup", "ObjectGroup")
Counter32, Integer32, TimeTicks, IpAddress, MibScalar, MibTable, MibTableRow, MibTableColumn, ObjectIdentity, Counter64, iso, Gauge32, NotificationType, Unsigned32, MibIdentifier, Bits, ModuleIdentity = mibBuilder.importSymbols("SNMPv2-SMI", "Counter32", "Integer32", "TimeTicks", "IpAddress", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "ObjectIdentity", "Counter64", "iso", "Gauge32", "NotificationType", "Unsigned32", "MibIdentifier", "Bits", "ModuleIdentity")
TruthValue, RowStatus, DateAndTime, DisplayString, TimeInterval, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "TruthValue", "RowStatus", "DateAndTime", "DisplayString", "TimeInterval", "TextualConvention")
rbnCesMIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 2352, 2, 56))
rbnCesMIB.setRevisions(('2010-12-02 00:00',))
if mibBuilder.loadTexts: rbnCesMIB.setLastUpdated('201012020000Z')
if mibBuilder.loadTexts: rbnCesMIB.setOrganization('Ericsson AB.')
rbnCesMIBObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 2352, 2, 56, 1))
rbnCesMIBConformance = MibIdentifier((1, 3, 6, 1, 4, 1, 2352, 2, 56, 2))
rbnCesSlaInfoResetAll = MibScalar((1, 3, 6, 1, 4, 1, 2352, 2, 56, 1, 1), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rbnCesSlaInfoResetAll.setStatus('current')
rbnCesCfgTable = MibTable((1, 3, 6, 1, 4, 1, 2352, 2, 56, 1, 2), )
if mibBuilder.loadTexts: rbnCesCfgTable.setStatus('current')
rbnCesCfgEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2352, 2, 56, 1, 2, 1), ).setIndexNames((0, "RBN-CES-MIB", "rbnCesCfgIndex"))
if mibBuilder.loadTexts: rbnCesCfgEntry.setStatus('current')
rbnCesCfgIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2352, 2, 56, 1, 2, 1, 1), InterfaceIndex())
if mibBuilder.loadTexts: rbnCesCfgIndex.setStatus('current')
rbnCesCfgPktLatency = MibTableColumn((1, 3, 6, 1, 4, 1, 2352, 2, 56, 1, 2, 1, 2), Unsigned32().clone(1000)).setUnits('microseconds').setMaxAccess("readcreate")
if mibBuilder.loadTexts: rbnCesCfgPktLatency.setStatus('current')
rbnCesCfgJtrBfrDepth = MibTableColumn((1, 3, 6, 1, 4, 1, 2352, 2, 56, 1, 2, 1, 3), Unsigned32().clone(5000)).setUnits('microseconds').setMaxAccess("readcreate")
if mibBuilder.loadTexts: rbnCesCfgJtrBfrDepth.setStatus('current')
rbnCesCfgConsecPktsInSync = MibTableColumn((1, 3, 6, 1, 4, 1, 2352, 2, 56, 1, 2, 1, 4), Unsigned32().clone(10)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: rbnCesCfgConsecPktsInSync.setStatus('current')
rbnCesCfgConsecMissPktsOutSync = MibTableColumn((1, 3, 6, 1, 4, 1, 2352, 2, 56, 1, 2, 1, 5), Unsigned32().clone(1)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: rbnCesCfgConsecMissPktsOutSync.setStatus('current')
rbnCesCfgIdlePattern = MibTableColumn((1, 3, 6, 1, 4, 1, 2352, 2, 56, 1, 2, 1, 6), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 1)).setFixedLength(1).clone(hexValue="3F")).setMaxAccess("readcreate")
if mibBuilder.loadTexts: rbnCesCfgIdlePattern.setStatus('current')
rbnCesCfgTrunkCtl = MibTableColumn((1, 3, 6, 1, 4, 1, 2352, 2, 56, 1, 2, 1, 7), TruthValue().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: rbnCesCfgTrunkCtl.setStatus('current')
rbnCesCfgAdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2352, 2, 56, 1, 2, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("up", 1), ("down", 2))).clone('down')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: rbnCesCfgAdminStatus.setStatus('current')
rbnCesCfgRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2352, 2, 56, 1, 2, 1, 9), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: rbnCesCfgRowStatus.setStatus('current')
rbnCesStatsTable = MibTable((1, 3, 6, 1, 4, 1, 2352, 2, 56, 1, 3), )
if mibBuilder.loadTexts: rbnCesStatsTable.setStatus('current')
rbnCesStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2352, 2, 56, 1, 3, 1), )
rbnCesCfgEntry.registerAugmentions(("RBN-CES-MIB", "rbnCesStatsEntry"))
rbnCesStatsEntry.setIndexNames(*rbnCesCfgEntry.getIndexNames())
if mibBuilder.loadTexts: rbnCesStatsEntry.setStatus('current')
rbnCesStatsEgressOutOfBfrDroppedPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 2352, 2, 56, 1, 3, 1, 1), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rbnCesStatsEgressOutOfBfrDroppedPkts.setStatus('current')
rbnCesStatsEgressMissingPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 2352, 2, 56, 1, 3, 1, 2), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rbnCesStatsEgressMissingPkts.setStatus('current')
rbnCesStatsEgressMalformedPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 2352, 2, 56, 1, 3, 1, 3), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rbnCesStatsEgressMalformedPkts.setStatus('current')
rbnCesStatsEgressJtrBfrOverrunPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 2352, 2, 56, 1, 3, 1, 4), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rbnCesStatsEgressJtrBfrOverrunPkts.setStatus('current')
rbnCesStatsEgressJtrBfrUnderruns = MibTableColumn((1, 3, 6, 1, 4, 1, 2352, 2, 56, 1, 3, 1, 5), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rbnCesStatsEgressJtrBfrUnderruns.setStatus('current')
rbnCesStatsEgressMisOrderPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 2352, 2, 56, 1, 3, 1, 6), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rbnCesStatsEgressMisOrderPkts.setStatus('current')
rbnCesStatsEgressRemoteLossPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 2352, 2, 56, 1, 3, 1, 7), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rbnCesStatsEgressRemoteLossPkts.setStatus('current')
rbnCesStatsEgressWindowSwitchovers = MibTableColumn((1, 3, 6, 1, 4, 1, 2352, 2, 56, 1, 3, 1, 8), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rbnCesStatsEgressWindowSwitchovers.setStatus('current')
rbnCesStatsEgressRemoteAcDownPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 2352, 2, 56, 1, 3, 1, 9), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rbnCesStatsEgressRemoteAcDownPkts.setStatus('current')
rbnCesStatsEgressDuplicatePkts = MibTableColumn((1, 3, 6, 1, 4, 1, 2352, 2, 56, 1, 3, 1, 10), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rbnCesStatsEgressDuplicatePkts.setStatus('current')
rbnCesStatsEgressDeniedPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 2352, 2, 56, 1, 3, 1, 11), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rbnCesStatsEgressDeniedPkts.setStatus('current')
rbnCesStatsEgressErrorEvents = MibTableColumn((1, 3, 6, 1, 4, 1, 2352, 2, 56, 1, 3, 1, 12), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rbnCesStatsEgressErrorEvents.setStatus('current')
rbnCesStatsEgressErrorDataBlocks = MibTableColumn((1, 3, 6, 1, 4, 1, 2352, 2, 56, 1, 3, 1, 13), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rbnCesStatsEgressErrorDataBlocks.setStatus('current')
rbnCesStatsIngressOutOfBfrDroppedPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 2352, 2, 56, 1, 3, 1, 14), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rbnCesStatsIngressOutOfBfrDroppedPkts.setStatus('current')
rbnCesStatsIngressSizeViolationDroppedPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 2352, 2, 56, 1, 3, 1, 15), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rbnCesStatsIngressSizeViolationDroppedPkts.setStatus('current')
rbnCesStatsIngressTransmitDroppedPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 2352, 2, 56, 1, 3, 1, 16), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rbnCesStatsIngressTransmitDroppedPkts.setStatus('current')
rbnCesEplCfgTable = MibTable((1, 3, 6, 1, 4, 1, 2352, 2, 56, 1, 4), )
if mibBuilder.loadTexts: rbnCesEplCfgTable.setStatus('current')
rbnCesEplCfgEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2352, 2, 56, 1, 4, 1), ).setIndexNames((0, "RBN-CES-MIB", "rbnCesEplCfgIndex"))
if mibBuilder.loadTexts: rbnCesEplCfgEntry.setStatus('current')
rbnCesEplCfgIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2352, 2, 56, 1, 4, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647)))
if mibBuilder.loadTexts: rbnCesEplCfgIndex.setStatus('current')
rbnCesEplCfgThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 2352, 2, 56, 1, 4, 1, 2), RbnPercentage()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: rbnCesEplCfgThreshold.setStatus('current')
rbnCesEplCfgFaultDeclarationTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2352, 2, 56, 1, 4, 1, 3), Unsigned32().clone(2500)).setUnits('milliseconds').setMaxAccess("readcreate")
if mibBuilder.loadTexts: rbnCesEplCfgFaultDeclarationTime.setStatus('current')
rbnCesEplCfgClearingTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2352, 2, 56, 1, 4, 1, 4), Unsigned32().clone(10000)).setUnits('milliseconds').setMaxAccess("readcreate")
if mibBuilder.loadTexts: rbnCesEplCfgClearingTime.setStatus('current')
rbnCesEplCfgStatsResetAll = MibTableColumn((1, 3, 6, 1, 4, 1, 2352, 2, 56, 1, 4, 1, 5), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rbnCesEplCfgStatsResetAll.setStatus('current')
rbnCesEplCfgAdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2352, 2, 56, 1, 4, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("up", 1), ("down", 2))).clone('down')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: rbnCesEplCfgAdminStatus.setStatus('current')
rbnCesEplCfgRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2352, 2, 56, 1, 4, 1, 7), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: rbnCesEplCfgRowStatus.setStatus('current')
rbnCesEplStatsTable = MibTable((1, 3, 6, 1, 4, 1, 2352, 2, 56, 1, 5), )
if mibBuilder.loadTexts: rbnCesEplStatsTable.setStatus('current')
rbnCesEplStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2352, 2, 56, 1, 5, 1), ).setIndexNames((0, "RBN-CES-MIB", "rbnCesEplStatsIndex"))
if mibBuilder.loadTexts: rbnCesEplStatsEntry.setStatus('current')
rbnCesEplStatsIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2352, 2, 56, 1, 5, 1, 1), InterfaceIndex())
if mibBuilder.loadTexts: rbnCesEplStatsIndex.setStatus('current')
rbnCesEplStatsEntryTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2352, 2, 56, 1, 5, 1, 2), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rbnCesEplStatsEntryTime.setStatus('current')
rbnCesEplStatsEntryTotalPktLossTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2352, 2, 56, 1, 5, 1, 3), TimeInterval()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rbnCesEplStatsEntryTotalPktLossTime.setStatus('current')
rbnCesEplStatsExitTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2352, 2, 56, 1, 5, 1, 4), TimeInterval()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rbnCesEplStatsExitTime.setStatus('current')
rbnCesEplStatsExitTotalPktLossTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2352, 2, 56, 1, 5, 1, 5), TimeInterval()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rbnCesEplStatsExitTotalPktLossTime.setStatus('current')
rbnCesEplStatsCount = MibTableColumn((1, 3, 6, 1, 4, 1, 2352, 2, 56, 1, 5, 1, 6), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rbnCesEplStatsCount.setStatus('current')
rbnCesEplStatsTotalCircuitTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2352, 2, 56, 1, 5, 1, 7), TimeInterval()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rbnCesEplStatsTotalCircuitTime.setStatus('current')
rbnCesEplStatsTotalFailureRate = MibTableColumn((1, 3, 6, 1, 4, 1, 2352, 2, 56, 1, 5, 1, 8), RbnPercentage()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rbnCesEplStatsTotalFailureRate.setStatus('current')
rbnCesEplStatsReset = MibTableColumn((1, 3, 6, 1, 4, 1, 2352, 2, 56, 1, 5, 1, 9), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rbnCesEplStatsReset.setStatus('current')
rbnCesSlaInfoTable = MibTable((1, 3, 6, 1, 4, 1, 2352, 2, 56, 1, 6), )
if mibBuilder.loadTexts: rbnCesSlaInfoTable.setStatus('current')
rbnCesSlaInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2352, 2, 56, 1, 6, 1), ).setIndexNames((0, "RBN-CES-MIB", "rbnCesSlaInfoIndex"))
if mibBuilder.loadTexts: rbnCesSlaInfoEntry.setStatus('current')
rbnCesSlaInfoIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2352, 2, 56, 1, 6, 1, 1), InterfaceIndex())
if mibBuilder.loadTexts: rbnCesSlaInfoIndex.setStatus('current')
rbnCesSlaInfoLatestOutageTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2352, 2, 56, 1, 6, 1, 2), TimeInterval()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rbnCesSlaInfoLatestOutageTime.setStatus('current')
rbnCesSlaInfoEntryLatestOutage = MibTableColumn((1, 3, 6, 1, 4, 1, 2352, 2, 56, 1, 6, 1, 3), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rbnCesSlaInfoEntryLatestOutage.setStatus('current')
rbnCesSlaInfoExitLatestOutage = MibTableColumn((1, 3, 6, 1, 4, 1, 2352, 2, 56, 1, 6, 1, 4), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rbnCesSlaInfoExitLatestOutage.setStatus('current')
rbnCesSlaInfoLastOutageTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2352, 2, 56, 1, 6, 1, 5), TimeInterval()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rbnCesSlaInfoLastOutageTime.setStatus('current')
rbnCesSlaInfoLastUpTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2352, 2, 56, 1, 6, 1, 6), TimeInterval()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rbnCesSlaInfoLastUpTime.setStatus('current')
rbnCesSlaInfoTotalOutageTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2352, 2, 56, 1, 6, 1, 7), TimeInterval()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rbnCesSlaInfoTotalOutageTime.setStatus('current')
rbnCesSlaInfoTotalUpTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2352, 2, 56, 1, 6, 1, 8), TimeInterval()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rbnCesSlaInfoTotalUpTime.setStatus('current')
rbnCesSlaInfoOutageCount = MibTableColumn((1, 3, 6, 1, 4, 1, 2352, 2, 56, 1, 6, 1, 9), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rbnCesSlaInfoOutageCount.setStatus('current')
rbnCesSlaInfoReset = MibTableColumn((1, 3, 6, 1, 4, 1, 2352, 2, 56, 1, 6, 1, 10), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rbnCesSlaInfoReset.setStatus('current')
rbnCesCardAlarmTable = MibTable((1, 3, 6, 1, 4, 1, 2352, 2, 56, 1, 7), )
if mibBuilder.loadTexts: rbnCesCardAlarmTable.setStatus('current')
rbnCesCardAlarmEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2352, 2, 56, 1, 7, 1), ).setIndexNames((0, "RBN-CES-MIB", "rbnCesCardAlarmId"))
if mibBuilder.loadTexts: rbnCesCardAlarmEntry.setStatus('current')
rbnCesCardAlarmId = MibTableColumn((1, 3, 6, 1, 4, 1, 2352, 2, 56, 1, 7, 1, 1), RbnAlarmId())
if mibBuilder.loadTexts: rbnCesCardAlarmId.setStatus('current')
rbnCesCardAlarmNotificationEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 2352, 2, 56, 1, 7, 1, 2), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rbnCesCardAlarmNotificationEnable.setStatus('current')
rbnCesMIBCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 2352, 2, 56, 2, 1))
rbnCesMIBGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 2352, 2, 56, 2, 2))
rbnCesMIBCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 2352, 2, 56, 2, 1, 1)).setObjects(("RBN-CES-MIB", "rbnCesCfgGroup"), ("RBN-CES-MIB", "rbnCesStatsGroup"), ("RBN-CES-MIB", "rbnCesEplCfgGroup"), ("RBN-CES-MIB", "rbnCesEplStatsGroup"), ("RBN-CES-MIB", "rbnCesSlaInfoGroup"), ("RBN-CES-MIB", "rbnCesCardAlarmGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    rbnCesMIBCompliance = rbnCesMIBCompliance.setStatus('current')
rbnCesCfgGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2352, 2, 56, 2, 2, 1)).setObjects(("RBN-CES-MIB", "rbnCesSlaInfoResetAll"), ("RBN-CES-MIB", "rbnCesCfgPktLatency"), ("RBN-CES-MIB", "rbnCesCfgJtrBfrDepth"), ("RBN-CES-MIB", "rbnCesCfgConsecPktsInSync"), ("RBN-CES-MIB", "rbnCesCfgConsecMissPktsOutSync"), ("RBN-CES-MIB", "rbnCesCfgIdlePattern"), ("RBN-CES-MIB", "rbnCesCfgTrunkCtl"), ("RBN-CES-MIB", "rbnCesCfgAdminStatus"), ("RBN-CES-MIB", "rbnCesCfgRowStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    rbnCesCfgGroup = rbnCesCfgGroup.setStatus('current')
rbnCesStatsGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2352, 2, 56, 2, 2, 2)).setObjects(("RBN-CES-MIB", "rbnCesStatsEgressOutOfBfrDroppedPkts"), ("RBN-CES-MIB", "rbnCesStatsEgressMissingPkts"), ("RBN-CES-MIB", "rbnCesStatsEgressMalformedPkts"), ("RBN-CES-MIB", "rbnCesStatsEgressJtrBfrOverrunPkts"), ("RBN-CES-MIB", "rbnCesStatsEgressJtrBfrUnderruns"), ("RBN-CES-MIB", "rbnCesStatsEgressMisOrderPkts"), ("RBN-CES-MIB", "rbnCesStatsEgressRemoteLossPkts"), ("RBN-CES-MIB", "rbnCesStatsEgressWindowSwitchovers"), ("RBN-CES-MIB", "rbnCesStatsEgressRemoteAcDownPkts"), ("RBN-CES-MIB", "rbnCesStatsEgressDuplicatePkts"), ("RBN-CES-MIB", "rbnCesStatsEgressDeniedPkts"), ("RBN-CES-MIB", "rbnCesStatsEgressErrorEvents"), ("RBN-CES-MIB", "rbnCesStatsEgressErrorDataBlocks"), ("RBN-CES-MIB", "rbnCesStatsIngressOutOfBfrDroppedPkts"), ("RBN-CES-MIB", "rbnCesStatsIngressSizeViolationDroppedPkts"), ("RBN-CES-MIB", "rbnCesStatsIngressTransmitDroppedPkts"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    rbnCesStatsGroup = rbnCesStatsGroup.setStatus('current')
rbnCesEplCfgGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2352, 2, 56, 2, 2, 3)).setObjects(("RBN-CES-MIB", "rbnCesEplCfgThreshold"), ("RBN-CES-MIB", "rbnCesEplCfgFaultDeclarationTime"), ("RBN-CES-MIB", "rbnCesEplCfgClearingTime"), ("RBN-CES-MIB", "rbnCesEplCfgStatsResetAll"), ("RBN-CES-MIB", "rbnCesEplCfgAdminStatus"), ("RBN-CES-MIB", "rbnCesEplCfgRowStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    rbnCesEplCfgGroup = rbnCesEplCfgGroup.setStatus('current')
rbnCesEplStatsGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2352, 2, 56, 2, 2, 4)).setObjects(("RBN-CES-MIB", "rbnCesEplStatsEntryTime"), ("RBN-CES-MIB", "rbnCesEplStatsEntryTotalPktLossTime"), ("RBN-CES-MIB", "rbnCesEplStatsExitTime"), ("RBN-CES-MIB", "rbnCesEplStatsExitTotalPktLossTime"), ("RBN-CES-MIB", "rbnCesEplStatsCount"), ("RBN-CES-MIB", "rbnCesEplStatsTotalCircuitTime"), ("RBN-CES-MIB", "rbnCesEplStatsTotalFailureRate"), ("RBN-CES-MIB", "rbnCesEplStatsReset"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    rbnCesEplStatsGroup = rbnCesEplStatsGroup.setStatus('current')
rbnCesSlaInfoGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2352, 2, 56, 2, 2, 5)).setObjects(("RBN-CES-MIB", "rbnCesSlaInfoLatestOutageTime"), ("RBN-CES-MIB", "rbnCesSlaInfoEntryLatestOutage"), ("RBN-CES-MIB", "rbnCesSlaInfoExitLatestOutage"), ("RBN-CES-MIB", "rbnCesSlaInfoLastOutageTime"), ("RBN-CES-MIB", "rbnCesSlaInfoLastUpTime"), ("RBN-CES-MIB", "rbnCesSlaInfoTotalOutageTime"), ("RBN-CES-MIB", "rbnCesSlaInfoTotalUpTime"), ("RBN-CES-MIB", "rbnCesSlaInfoOutageCount"), ("RBN-CES-MIB", "rbnCesSlaInfoReset"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    rbnCesSlaInfoGroup = rbnCesSlaInfoGroup.setStatus('current')
rbnCesCardAlarmGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2352, 2, 56, 2, 2, 6)).setObjects(("RBN-CES-MIB", "rbnCesCardAlarmNotificationEnable"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    rbnCesCardAlarmGroup = rbnCesCardAlarmGroup.setStatus('current')
mibBuilder.exportSymbols("RBN-CES-MIB", rbnCesEplCfgClearingTime=rbnCesEplCfgClearingTime, rbnCesEplStatsIndex=rbnCesEplStatsIndex, rbnCesStatsGroup=rbnCesStatsGroup, rbnCesCfgPktLatency=rbnCesCfgPktLatency, rbnCesSlaInfoEntry=rbnCesSlaInfoEntry, rbnCesSlaInfoEntryLatestOutage=rbnCesSlaInfoEntryLatestOutage, rbnCesSlaInfoResetAll=rbnCesSlaInfoResetAll, rbnCesStatsEgressRemoteAcDownPkts=rbnCesStatsEgressRemoteAcDownPkts, rbnCesStatsEgressDeniedPkts=rbnCesStatsEgressDeniedPkts, rbnCesCardAlarmEntry=rbnCesCardAlarmEntry, rbnCesMIBCompliance=rbnCesMIBCompliance, rbnCesStatsEntry=rbnCesStatsEntry, rbnCesEplStatsCount=rbnCesEplStatsCount, rbnCesStatsEgressJtrBfrUnderruns=rbnCesStatsEgressJtrBfrUnderruns, rbnCesStatsEgressWindowSwitchovers=rbnCesStatsEgressWindowSwitchovers, rbnCesCfgConsecPktsInSync=rbnCesCfgConsecPktsInSync, rbnCesEplCfgFaultDeclarationTime=rbnCesEplCfgFaultDeclarationTime, rbnCesCfgGroup=rbnCesCfgGroup, rbnCesSlaInfoIndex=rbnCesSlaInfoIndex, rbnCesSlaInfoLatestOutageTime=rbnCesSlaInfoLatestOutageTime, rbnCesEplStatsEntryTotalPktLossTime=rbnCesEplStatsEntryTotalPktLossTime, rbnCesEplStatsTotalCircuitTime=rbnCesEplStatsTotalCircuitTime, rbnCesSlaInfoTotalOutageTime=rbnCesSlaInfoTotalOutageTime, rbnCesSlaInfoOutageCount=rbnCesSlaInfoOutageCount, rbnCesCfgIndex=rbnCesCfgIndex, rbnCesEplCfgThreshold=rbnCesEplCfgThreshold, rbnCesCfgAdminStatus=rbnCesCfgAdminStatus, rbnCesStatsEgressMalformedPkts=rbnCesStatsEgressMalformedPkts, rbnCesMIBObjects=rbnCesMIBObjects, rbnCesStatsEgressJtrBfrOverrunPkts=rbnCesStatsEgressJtrBfrOverrunPkts, rbnCesEplCfgAdminStatus=rbnCesEplCfgAdminStatus, rbnCesSlaInfoTotalUpTime=rbnCesSlaInfoTotalUpTime, rbnCesMIBConformance=rbnCesMIBConformance, rbnCesSlaInfoLastUpTime=rbnCesSlaInfoLastUpTime, rbnCesEplCfgIndex=rbnCesEplCfgIndex, rbnCesCfgIdlePattern=rbnCesCfgIdlePattern, rbnCesCfgRowStatus=rbnCesCfgRowStatus, rbnCesCfgConsecMissPktsOutSync=rbnCesCfgConsecMissPktsOutSync, rbnCesSlaInfoExitLatestOutage=rbnCesSlaInfoExitLatestOutage, rbnCesStatsEgressRemoteLossPkts=rbnCesStatsEgressRemoteLossPkts, rbnCesCardAlarmGroup=rbnCesCardAlarmGroup, rbnCesEplStatsReset=rbnCesEplStatsReset, rbnCesStatsEgressErrorEvents=rbnCesStatsEgressErrorEvents, rbnCesCardAlarmNotificationEnable=rbnCesCardAlarmNotificationEnable, rbnCesEplStatsEntryTime=rbnCesEplStatsEntryTime, rbnCesEplCfgGroup=rbnCesEplCfgGroup, rbnCesMIBCompliances=rbnCesMIBCompliances, rbnCesStatsTable=rbnCesStatsTable, rbnCesStatsEgressOutOfBfrDroppedPkts=rbnCesStatsEgressOutOfBfrDroppedPkts, rbnCesEplStatsExitTotalPktLossTime=rbnCesEplStatsExitTotalPktLossTime, rbnCesEplCfgRowStatus=rbnCesEplCfgRowStatus, rbnCesStatsIngressSizeViolationDroppedPkts=rbnCesStatsIngressSizeViolationDroppedPkts, rbnCesStatsIngressTransmitDroppedPkts=rbnCesStatsIngressTransmitDroppedPkts, rbnCesCfgTable=rbnCesCfgTable, rbnCesStatsEgressMisOrderPkts=rbnCesStatsEgressMisOrderPkts, rbnCesMIB=rbnCesMIB, rbnCesEplCfgStatsResetAll=rbnCesEplCfgStatsResetAll, rbnCesEplStatsEntry=rbnCesEplStatsEntry, rbnCesSlaInfoTable=rbnCesSlaInfoTable, rbnCesStatsIngressOutOfBfrDroppedPkts=rbnCesStatsIngressOutOfBfrDroppedPkts, rbnCesEplStatsExitTime=rbnCesEplStatsExitTime, rbnCesEplCfgTable=rbnCesEplCfgTable, rbnCesStatsEgressMissingPkts=rbnCesStatsEgressMissingPkts, rbnCesMIBGroups=rbnCesMIBGroups, rbnCesCfgJtrBfrDepth=rbnCesCfgJtrBfrDepth, rbnCesStatsEgressDuplicatePkts=rbnCesStatsEgressDuplicatePkts, rbnCesSlaInfoGroup=rbnCesSlaInfoGroup, rbnCesSlaInfoReset=rbnCesSlaInfoReset, PYSNMP_MODULE_ID=rbnCesMIB, rbnCesCfgTrunkCtl=rbnCesCfgTrunkCtl, rbnCesCardAlarmId=rbnCesCardAlarmId, rbnCesEplStatsGroup=rbnCesEplStatsGroup, rbnCesSlaInfoLastOutageTime=rbnCesSlaInfoLastOutageTime, rbnCesCfgEntry=rbnCesCfgEntry, rbnCesEplStatsTotalFailureRate=rbnCesEplStatsTotalFailureRate, rbnCesEplStatsTable=rbnCesEplStatsTable, rbnCesStatsEgressErrorDataBlocks=rbnCesStatsEgressErrorDataBlocks, rbnCesEplCfgEntry=rbnCesEplCfgEntry, rbnCesCardAlarmTable=rbnCesCardAlarmTable)
