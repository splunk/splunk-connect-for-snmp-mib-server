#
# PySNMP MIB module CISCO-FABRIC-HFR-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/CISCO-FABRIC-HFR-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 17:40:32 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, Integer, OctetString = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "Integer", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueSizeConstraint, ConstraintsIntersection, SingleValueConstraint, ConstraintsUnion, ValueRangeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueSizeConstraint", "ConstraintsIntersection", "SingleValueConstraint", "ConstraintsUnion", "ValueRangeConstraint")
ciscoMgmt, = mibBuilder.importSymbols("CISCO-SMI", "ciscoMgmt")
entPhysicalIndex, PhysicalIndex = mibBuilder.importSymbols("ENTITY-MIB", "entPhysicalIndex", "PhysicalIndex")
SnmpAdminString, = mibBuilder.importSymbols("SNMP-FRAMEWORK-MIB", "SnmpAdminString")
NotificationGroup, ObjectGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ObjectGroup", "ModuleCompliance")
IpAddress, Unsigned32, MibIdentifier, NotificationType, TimeTicks, ObjectIdentity, Counter32, Counter64, MibScalar, MibTable, MibTableRow, MibTableColumn, Gauge32, ModuleIdentity, Bits, iso, Integer32 = mibBuilder.importSymbols("SNMPv2-SMI", "IpAddress", "Unsigned32", "MibIdentifier", "NotificationType", "TimeTicks", "ObjectIdentity", "Counter32", "Counter64", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Gauge32", "ModuleIdentity", "Bits", "iso", "Integer32")
TimeStamp, TruthValue, DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "TimeStamp", "TruthValue", "DisplayString", "TextualConvention")
ciscoFabricHfrMIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 9, 9, 257))
ciscoFabricHfrMIB.setRevisions(('2009-04-14 00:00', '2006-01-01 00:00', '2003-06-09 00:00',))
if mibBuilder.loadTexts: ciscoFabricHfrMIB.setLastUpdated('200904140000Z')
if mibBuilder.loadTexts: ciscoFabricHfrMIB.setOrganization('Cisco Systems, Inc.')
cfhMIBNotifications = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 257, 0))
ciscoFabricHfrMIBObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 257, 1))
cfhGeneral = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 257, 1, 1))
cfhPlane = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 257, 1, 2))
cfhBundle = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 257, 1, 3))
cfhBundlePort = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 257, 1, 4))
cfhCard = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 257, 1, 5))
class CfhPlane(TextualConvention, Unsigned32):
    status = 'current'
    subtypeSpec = Unsigned32.subtypeSpec + ValueRangeConstraint(1, 4294967295)

class CfhBundle(TextualConvention, Unsigned32):
    status = 'current'
    subtypeSpec = Unsigned32.subtypeSpec + ValueRangeConstraint(1, 4294967295)

class CfhAdminState(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2))
    namedValues = NamedValues(("up", 1), ("down", 2))

class CfhScaledPercentage(TextualConvention, Gauge32):
    status = 'current'
    subtypeSpec = Gauge32.subtypeSpec + ValueRangeConstraint(0, 100000)

cfhGenPlaneStateTrapEnable = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 257, 1, 1, 1), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cfhGenPlaneStateTrapEnable.setStatus('current')
cfhGenBundleStateTrapEnable = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 257, 1, 1, 2), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cfhGenBundleStateTrapEnable.setStatus('current')
cfhGenBundleDownedLinkTrapEnable = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 257, 1, 1, 3), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cfhGenBundleDownedLinkTrapEnable.setStatus('current')
cfhPlaneTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 257, 1, 2, 1), )
if mibBuilder.loadTexts: cfhPlaneTable.setStatus('current')
cfhPlaneEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 257, 1, 2, 1, 1), ).setIndexNames((0, "CISCO-FABRIC-HFR-MIB", "cfhPlaneId"))
if mibBuilder.loadTexts: cfhPlaneEntry.setStatus('current')
cfhPlaneId = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 257, 1, 2, 1, 1, 1), CfhPlane())
if mibBuilder.loadTexts: cfhPlaneId.setStatus('current')
cfhPlaneAdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 257, 1, 2, 1, 1, 2), CfhAdminState()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cfhPlaneAdminStatus.setStatus('current')
cfhPlaneOperStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 257, 1, 2, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("up", 1), ("down", 2), ("mcastDown", 3), ("oos", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cfhPlaneOperStatus.setStatus('current')
cfhPlaneTotalBundles = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 257, 1, 2, 1, 1, 4), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cfhPlaneTotalBundles.setStatus('current')
cfhPlaneDownedBundles = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 257, 1, 2, 1, 1, 5), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cfhPlaneDownedBundles.setStatus('current')
cfhPlaneStatsTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 257, 1, 2, 2), )
if mibBuilder.loadTexts: cfhPlaneStatsTable.setStatus('current')
cfhPlaneStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 257, 1, 2, 2, 1), )
cfhPlaneEntry.registerAugmentions(("CISCO-FABRIC-HFR-MIB", "cfhPlaneStatsEntry"))
cfhPlaneStatsEntry.setIndexNames(*cfhPlaneEntry.getIndexNames())
if mibBuilder.loadTexts: cfhPlaneStatsEntry.setStatus('current')
cfhPlaneStatsRxDataCells = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 257, 1, 2, 2, 1, 1), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cfhPlaneStatsRxDataCells.setStatus('current')
cfhPlaneStatsTxDataCells = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 257, 1, 2, 2, 1, 2), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cfhPlaneStatsTxDataCells.setStatus('current')
cfhPlaneStatsRxCECells = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 257, 1, 2, 2, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cfhPlaneStatsRxCECells.setStatus('current')
cfhPlaneStatsRxUCECells = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 257, 1, 2, 2, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cfhPlaneStatsRxUCECells.setStatus('current')
cfhPlaneStatsRxPECells = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 257, 1, 2, 2, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cfhPlaneStatsRxPECells.setStatus('current')
cfhPlaneStatsUnicastLostCells = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 257, 1, 2, 2, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cfhPlaneStatsUnicastLostCells.setStatus('current')
cfhPlaneStatsMulticastLostCells = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 257, 1, 2, 2, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cfhPlaneStatsMulticastLostCells.setStatus('current')
cfhPlaneStatsCounterDiscTime = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 257, 1, 2, 2, 1, 8), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cfhPlaneStatsCounterDiscTime.setStatus('current')
cfhPlaneCapacityThreshold = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 257, 1, 2, 3), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cfhPlaneCapacityThreshold.setStatus('current')
cfhBundleTotal = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 257, 1, 3, 1), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cfhBundleTotal.setStatus('current')
cfhBundleDowned = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 257, 1, 3, 2), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cfhBundleDowned.setStatus('current')
cfhBundleTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 257, 1, 3, 3), )
if mibBuilder.loadTexts: cfhBundleTable.setStatus('current')
cfhBundleEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 257, 1, 3, 3, 1), ).setIndexNames((0, "CISCO-FABRIC-HFR-MIB", "cfhBundleId"))
if mibBuilder.loadTexts: cfhBundleEntry.setStatus('current')
cfhBundleId = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 257, 1, 3, 3, 1, 1), CfhBundle())
if mibBuilder.loadTexts: cfhBundleId.setStatus('current')
cfhBundleName = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 257, 1, 3, 3, 1, 2), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cfhBundleName.setStatus('current')
cfhBundlePlane = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 257, 1, 3, 3, 1, 3), CfhPlane()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cfhBundlePlane.setStatus('current')
cfhBundleOperStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 257, 1, 3, 3, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("up", 1), ("down", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cfhBundleOperStatus.setStatus('current')
cfhBundleTotalLinks = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 257, 1, 3, 3, 1, 5), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cfhBundleTotalLinks.setStatus('current')
cfhBundleDownedLinks = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 257, 1, 3, 3, 1, 6), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cfhBundleDownedLinks.setStatus('current')
cfhBundlePortLCRCardIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 257, 1, 3, 3, 1, 7), PhysicalIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cfhBundlePortLCRCardIndex.setStatus('current')
cfhBundlePortLCRId = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 257, 1, 3, 3, 1, 8), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cfhBundlePortLCRId.setStatus('current')
cfhBundlePortSecondCardIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 257, 1, 3, 3, 1, 9), PhysicalIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cfhBundlePortSecondCardIndex.setStatus('current')
cfhBundlePortSecondId = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 257, 1, 3, 3, 1, 10), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cfhBundlePortSecondId.setStatus('current')
cfhBundlePortTotalNumber = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 257, 1, 4, 1), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cfhBundlePortTotalNumber.setStatus('current')
cfhBundlePortTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 257, 1, 4, 2), )
if mibBuilder.loadTexts: cfhBundlePortTable.setStatus('current')
cfhBundlePortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 257, 1, 4, 2, 1), ).setIndexNames((0, "ENTITY-MIB", "entPhysicalIndex"), (0, "CISCO-FABRIC-HFR-MIB", "cfhBundlePortId"))
if mibBuilder.loadTexts: cfhBundlePortEntry.setStatus('current')
cfhBundlePortId = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 257, 1, 4, 2, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 4294967295)))
if mibBuilder.loadTexts: cfhBundlePortId.setStatus('current')
cfhBundlePortAdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 257, 1, 4, 2, 1, 3), CfhAdminState()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cfhBundlePortAdminState.setStatus('current')
cfhBundlePortOperState = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 257, 1, 4, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("unknown", 1), ("up", 2), ("down", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cfhBundlePortOperState.setStatus('current')
cfhBundlePortGrpId = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 257, 1, 4, 2, 1, 5), CfhBundle()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cfhBundlePortGrpId.setStatus('current')
cfhBundlePortStatsTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 257, 1, 4, 3), )
if mibBuilder.loadTexts: cfhBundlePortStatsTable.setStatus('current')
cfhBundlePortStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 257, 1, 4, 3, 1), )
cfhBundlePortEntry.registerAugmentions(("CISCO-FABRIC-HFR-MIB", "cfhBundlePortStatsEntry"))
cfhBundlePortStatsEntry.setIndexNames(*cfhBundlePortEntry.getIndexNames())
if mibBuilder.loadTexts: cfhBundlePortStatsEntry.setStatus('current')
cfhBundlePortStatsRxDataCells = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 257, 1, 4, 3, 1, 1), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cfhBundlePortStatsRxDataCells.setStatus('current')
cfhBundlePortStatsTxDataCells = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 257, 1, 4, 3, 1, 2), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cfhBundlePortStatsTxDataCells.setStatus('current')
cfhBundlePortStatsRxCECells = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 257, 1, 4, 3, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cfhBundlePortStatsRxCECells.setStatus('current')
cfhBundlePortStatsRxUCECells = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 257, 1, 4, 3, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cfhBundlePortStatsRxUCECells.setStatus('current')
cfhBundlePortStatsRxPECells = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 257, 1, 4, 3, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cfhBundlePortStatsRxPECells.setStatus('current')
cfhBundlePortStatsHighRxCECells = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 257, 1, 4, 3, 1, 6), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cfhBundlePortStatsHighRxCECells.setStatus('current')
cfhBundlePortStatsHighRxUCECells = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 257, 1, 4, 3, 1, 7), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cfhBundlePortStatsHighRxUCECells.setStatus('current')
cfhBundlePortStatsHighRxPECells = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 257, 1, 4, 3, 1, 8), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cfhBundlePortStatsHighRxPECells.setStatus('current')
cfhCardTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 257, 1, 5, 1), )
if mibBuilder.loadTexts: cfhCardTable.setStatus('current')
cfhCardEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 257, 1, 5, 1, 1), ).setIndexNames((0, "ENTITY-MIB", "entPhysicalIndex"))
if mibBuilder.loadTexts: cfhCardEntry.setStatus('current')
cfhCardFabInUse = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 257, 1, 5, 1, 1, 1), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cfhCardFabInUse.setStatus('current')
cfhCardFabUsage = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 257, 1, 5, 1, 1, 2), CfhScaledPercentage()).setUnits('thousandths of a percent').setMaxAccess("readonly")
if mibBuilder.loadTexts: cfhCardFabUsage.setStatus('current')
cfhCardFabInUseDiscTime = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 257, 1, 5, 1, 1, 3), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cfhCardFabInUseDiscTime.setStatus('current')
cfhCardPlaneTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 257, 1, 5, 2), )
if mibBuilder.loadTexts: cfhCardPlaneTable.setStatus('current')
cfhCardPlaneEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 257, 1, 5, 2, 1), ).setIndexNames((0, "ENTITY-MIB", "entPhysicalIndex"), (0, "CISCO-FABRIC-HFR-MIB", "cfhPlaneId"))
if mibBuilder.loadTexts: cfhCardPlaneEntry.setStatus('current')
cfhCardPlaneTxConnectivity = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 257, 1, 5, 2, 1, 1), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cfhCardPlaneTxConnectivity.setStatus('current')
cfhCardPlaneRxConnectivity = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 257, 1, 5, 2, 1, 2), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cfhCardPlaneRxConnectivity.setStatus('current')
cfhPlaneStateNotification = NotificationType((1, 3, 6, 1, 4, 1, 9, 9, 257, 0, 1)).setObjects(("CISCO-FABRIC-HFR-MIB", "cfhPlaneOperStatus"))
if mibBuilder.loadTexts: cfhPlaneStateNotification.setStatus('current')
cfhBundleStateNotification = NotificationType((1, 3, 6, 1, 4, 1, 9, 9, 257, 0, 2)).setObjects(("CISCO-FABRIC-HFR-MIB", "cfhBundleOperStatus"), ("CISCO-FABRIC-HFR-MIB", "cfhBundlePlane"), ("CISCO-FABRIC-HFR-MIB", "cfhBundleName"))
if mibBuilder.loadTexts: cfhBundleStateNotification.setStatus('current')
cfhBundleDownedLinkNotification = NotificationType((1, 3, 6, 1, 4, 1, 9, 9, 257, 0, 3)).setObjects(("CISCO-FABRIC-HFR-MIB", "cfhBundleOperStatus"), ("CISCO-FABRIC-HFR-MIB", "cfhBundlePlane"), ("CISCO-FABRIC-HFR-MIB", "cfhBundleDownedLinks"), ("CISCO-FABRIC-HFR-MIB", "cfhBundleName"))
if mibBuilder.loadTexts: cfhBundleDownedLinkNotification.setStatus('current')
cfhMIBConformance = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 257, 3))
cfhMIBCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 257, 3, 1))
cfhMIBGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 257, 3, 2))
cfhMIBCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 9, 9, 257, 3, 1, 1)).setObjects(("CISCO-FABRIC-HFR-MIB", "cfhGenInfoGroup"), ("CISCO-FABRIC-HFR-MIB", "cfhPlaneGroup"), ("CISCO-FABRIC-HFR-MIB", "cfhBundleGroup"), ("CISCO-FABRIC-HFR-MIB", "cfhBundlePortGroup"), ("CISCO-FABRIC-HFR-MIB", "cfhCardGroup"), ("CISCO-FABRIC-HFR-MIB", "cfhNotificationsGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cfhMIBCompliance = cfhMIBCompliance.setStatus('deprecated')
cfhMIBCompliance1 = ModuleCompliance((1, 3, 6, 1, 4, 1, 9, 9, 257, 3, 1, 2)).setObjects(("CISCO-FABRIC-HFR-MIB", "cfhGenInfoGroup"), ("CISCO-FABRIC-HFR-MIB", "cfhPlaneGroup"), ("CISCO-FABRIC-HFR-MIB", "cfhBundleGroup"), ("CISCO-FABRIC-HFR-MIB", "cfhBundlePortGroup"), ("CISCO-FABRIC-HFR-MIB", "cfhCardGroup"), ("CISCO-FABRIC-HFR-MIB", "cfhNotificationsGroup"), ("CISCO-FABRIC-HFR-MIB", "cfhFabricCapacityGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cfhMIBCompliance1 = cfhMIBCompliance1.setStatus('current')
cfhGenInfoGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 257, 3, 2, 1)).setObjects(("CISCO-FABRIC-HFR-MIB", "cfhGenPlaneStateTrapEnable"), ("CISCO-FABRIC-HFR-MIB", "cfhGenBundleStateTrapEnable"), ("CISCO-FABRIC-HFR-MIB", "cfhGenBundleDownedLinkTrapEnable"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cfhGenInfoGroup = cfhGenInfoGroup.setStatus('current')
cfhPlaneGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 257, 3, 2, 2)).setObjects(("CISCO-FABRIC-HFR-MIB", "cfhPlaneAdminStatus"), ("CISCO-FABRIC-HFR-MIB", "cfhPlaneOperStatus"), ("CISCO-FABRIC-HFR-MIB", "cfhPlaneTotalBundles"), ("CISCO-FABRIC-HFR-MIB", "cfhPlaneDownedBundles"), ("CISCO-FABRIC-HFR-MIB", "cfhPlaneStatsRxDataCells"), ("CISCO-FABRIC-HFR-MIB", "cfhPlaneStatsTxDataCells"), ("CISCO-FABRIC-HFR-MIB", "cfhPlaneStatsRxCECells"), ("CISCO-FABRIC-HFR-MIB", "cfhPlaneStatsRxUCECells"), ("CISCO-FABRIC-HFR-MIB", "cfhPlaneStatsRxPECells"), ("CISCO-FABRIC-HFR-MIB", "cfhPlaneStatsUnicastLostCells"), ("CISCO-FABRIC-HFR-MIB", "cfhPlaneStatsMulticastLostCells"), ("CISCO-FABRIC-HFR-MIB", "cfhPlaneStatsCounterDiscTime"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cfhPlaneGroup = cfhPlaneGroup.setStatus('current')
cfhBundleGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 257, 3, 2, 3)).setObjects(("CISCO-FABRIC-HFR-MIB", "cfhBundleTotal"), ("CISCO-FABRIC-HFR-MIB", "cfhBundleDowned"), ("CISCO-FABRIC-HFR-MIB", "cfhBundleName"), ("CISCO-FABRIC-HFR-MIB", "cfhBundlePlane"), ("CISCO-FABRIC-HFR-MIB", "cfhBundleOperStatus"), ("CISCO-FABRIC-HFR-MIB", "cfhBundleTotalLinks"), ("CISCO-FABRIC-HFR-MIB", "cfhBundleDownedLinks"), ("CISCO-FABRIC-HFR-MIB", "cfhBundlePortLCRCardIndex"), ("CISCO-FABRIC-HFR-MIB", "cfhBundlePortLCRId"), ("CISCO-FABRIC-HFR-MIB", "cfhBundlePortSecondCardIndex"), ("CISCO-FABRIC-HFR-MIB", "cfhBundlePortSecondId"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cfhBundleGroup = cfhBundleGroup.setStatus('current')
cfhBundlePortGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 257, 3, 2, 4)).setObjects(("CISCO-FABRIC-HFR-MIB", "cfhBundlePortTotalNumber"), ("CISCO-FABRIC-HFR-MIB", "cfhBundlePortAdminState"), ("CISCO-FABRIC-HFR-MIB", "cfhBundlePortOperState"), ("CISCO-FABRIC-HFR-MIB", "cfhBundlePortGrpId"), ("CISCO-FABRIC-HFR-MIB", "cfhBundlePortStatsRxDataCells"), ("CISCO-FABRIC-HFR-MIB", "cfhBundlePortStatsTxDataCells"), ("CISCO-FABRIC-HFR-MIB", "cfhBundlePortStatsRxCECells"), ("CISCO-FABRIC-HFR-MIB", "cfhBundlePortStatsRxUCECells"), ("CISCO-FABRIC-HFR-MIB", "cfhBundlePortStatsRxPECells"), ("CISCO-FABRIC-HFR-MIB", "cfhBundlePortStatsHighRxCECells"), ("CISCO-FABRIC-HFR-MIB", "cfhBundlePortStatsHighRxUCECells"), ("CISCO-FABRIC-HFR-MIB", "cfhBundlePortStatsHighRxPECells"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cfhBundlePortGroup = cfhBundlePortGroup.setStatus('current')
cfhCardGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 257, 3, 2, 5)).setObjects(("CISCO-FABRIC-HFR-MIB", "cfhCardFabInUse"), ("CISCO-FABRIC-HFR-MIB", "cfhCardFabUsage"), ("CISCO-FABRIC-HFR-MIB", "cfhCardFabInUseDiscTime"), ("CISCO-FABRIC-HFR-MIB", "cfhCardPlaneTxConnectivity"), ("CISCO-FABRIC-HFR-MIB", "cfhCardPlaneRxConnectivity"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cfhCardGroup = cfhCardGroup.setStatus('current')
cfhNotificationsGroup = NotificationGroup((1, 3, 6, 1, 4, 1, 9, 9, 257, 3, 2, 6)).setObjects(("CISCO-FABRIC-HFR-MIB", "cfhPlaneStateNotification"), ("CISCO-FABRIC-HFR-MIB", "cfhBundleStateNotification"), ("CISCO-FABRIC-HFR-MIB", "cfhBundleDownedLinkNotification"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cfhNotificationsGroup = cfhNotificationsGroup.setStatus('current')
cfhFabricCapacityGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 257, 3, 2, 7)).setObjects(("CISCO-FABRIC-HFR-MIB", "cfhPlaneCapacityThreshold"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cfhFabricCapacityGroup = cfhFabricCapacityGroup.setStatus('current')
mibBuilder.exportSymbols("CISCO-FABRIC-HFR-MIB", cfhGenPlaneStateTrapEnable=cfhGenPlaneStateTrapEnable, cfhPlaneStatsRxUCECells=cfhPlaneStatsRxUCECells, cfhBundlePortSecondId=cfhBundlePortSecondId, cfhBundlePortStatsRxUCECells=cfhBundlePortStatsRxUCECells, cfhBundleStateNotification=cfhBundleStateNotification, cfhGenBundleDownedLinkTrapEnable=cfhGenBundleDownedLinkTrapEnable, cfhPlaneGroup=cfhPlaneGroup, cfhBundlePortEntry=cfhBundlePortEntry, cfhCardFabInUseDiscTime=cfhCardFabInUseDiscTime, cfhBundleDowned=cfhBundleDowned, cfhBundlePortStatsTxDataCells=cfhBundlePortStatsTxDataCells, cfhMIBConformance=cfhMIBConformance, cfhCardPlaneTable=cfhCardPlaneTable, cfhBundleGroup=cfhBundleGroup, cfhPlaneCapacityThreshold=cfhPlaneCapacityThreshold, cfhBundleOperStatus=cfhBundleOperStatus, cfhBundlePortStatsRxCECells=cfhBundlePortStatsRxCECells, cfhPlaneId=cfhPlaneId, cfhBundlePortGrpId=cfhBundlePortGrpId, cfhMIBNotifications=cfhMIBNotifications, cfhBundleTotalLinks=cfhBundleTotalLinks, cfhBundleEntry=cfhBundleEntry, cfhBundlePlane=cfhBundlePlane, ciscoFabricHfrMIB=ciscoFabricHfrMIB, cfhBundlePortSecondCardIndex=cfhBundlePortSecondCardIndex, cfhBundleTable=cfhBundleTable, cfhMIBCompliances=cfhMIBCompliances, CfhAdminState=CfhAdminState, cfhBundlePortGroup=cfhBundlePortGroup, cfhPlaneDownedBundles=cfhPlaneDownedBundles, cfhPlaneStateNotification=cfhPlaneStateNotification, cfhBundleDownedLinks=cfhBundleDownedLinks, cfhGenInfoGroup=cfhGenInfoGroup, cfhCardPlaneEntry=cfhCardPlaneEntry, CfhScaledPercentage=CfhScaledPercentage, cfhPlaneTable=cfhPlaneTable, cfhFabricCapacityGroup=cfhFabricCapacityGroup, PYSNMP_MODULE_ID=ciscoFabricHfrMIB, CfhPlane=CfhPlane, cfhGenBundleStateTrapEnable=cfhGenBundleStateTrapEnable, cfhBundlePortTable=cfhBundlePortTable, cfhPlaneStatsTxDataCells=cfhPlaneStatsTxDataCells, cfhCardPlaneRxConnectivity=cfhCardPlaneRxConnectivity, cfhBundlePortStatsHighRxCECells=cfhBundlePortStatsHighRxCECells, cfhPlaneEntry=cfhPlaneEntry, cfhBundle=cfhBundle, cfhBundleDownedLinkNotification=cfhBundleDownedLinkNotification, cfhCardEntry=cfhCardEntry, cfhPlane=cfhPlane, cfhCardFabUsage=cfhCardFabUsage, cfhBundlePortTotalNumber=cfhBundlePortTotalNumber, cfhPlaneAdminStatus=cfhPlaneAdminStatus, cfhPlaneTotalBundles=cfhPlaneTotalBundles, cfhBundlePortStatsRxPECells=cfhBundlePortStatsRxPECells, cfhCard=cfhCard, cfhBundleTotal=cfhBundleTotal, cfhMIBCompliance=cfhMIBCompliance, cfhCardGroup=cfhCardGroup, cfhBundleId=cfhBundleId, cfhPlaneStatsRxCECells=cfhPlaneStatsRxCECells, cfhBundlePort=cfhBundlePort, cfhBundlePortStatsEntry=cfhBundlePortStatsEntry, cfhBundleName=cfhBundleName, cfhBundlePortOperState=cfhBundlePortOperState, cfhMIBCompliance1=cfhMIBCompliance1, cfhPlaneStatsUnicastLostCells=cfhPlaneStatsUnicastLostCells, cfhGeneral=cfhGeneral, ciscoFabricHfrMIBObjects=ciscoFabricHfrMIBObjects, cfhPlaneStatsRxDataCells=cfhPlaneStatsRxDataCells, cfhBundlePortLCRId=cfhBundlePortLCRId, cfhBundlePortStatsHighRxUCECells=cfhBundlePortStatsHighRxUCECells, cfhPlaneOperStatus=cfhPlaneOperStatus, CfhBundle=CfhBundle, cfhPlaneStatsRxPECells=cfhPlaneStatsRxPECells, cfhPlaneStatsTable=cfhPlaneStatsTable, cfhBundlePortStatsRxDataCells=cfhBundlePortStatsRxDataCells, cfhBundlePortStatsTable=cfhBundlePortStatsTable, cfhNotificationsGroup=cfhNotificationsGroup, cfhPlaneStatsMulticastLostCells=cfhPlaneStatsMulticastLostCells, cfhBundlePortId=cfhBundlePortId, cfhCardTable=cfhCardTable, cfhPlaneStatsCounterDiscTime=cfhPlaneStatsCounterDiscTime, cfhCardFabInUse=cfhCardFabInUse, cfhBundlePortStatsHighRxPECells=cfhBundlePortStatsHighRxPECells, cfhCardPlaneTxConnectivity=cfhCardPlaneTxConnectivity, cfhPlaneStatsEntry=cfhPlaneStatsEntry, cfhBundlePortAdminState=cfhBundlePortAdminState, cfhBundlePortLCRCardIndex=cfhBundlePortLCRCardIndex, cfhMIBGroups=cfhMIBGroups)
