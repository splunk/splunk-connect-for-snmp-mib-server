#
# PySNMP MIB module ASCEND-MIBROUTE-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/ASCEND-MIBROUTE-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 17:12:09 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
configuration, = mibBuilder.importSymbols("ASCEND-MIB", "configuration")
Integer, OctetString, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "Integer", "OctetString", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
SingleValueConstraint, ValueSizeConstraint, ConstraintsIntersection, ValueRangeConstraint, ConstraintsUnion = mibBuilder.importSymbols("ASN1-REFINEMENT", "SingleValueConstraint", "ValueSizeConstraint", "ConstraintsIntersection", "ValueRangeConstraint", "ConstraintsUnion")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
Counter64, Gauge32, ModuleIdentity, TimeTicks, Counter32, ObjectIdentity, Unsigned32, iso, NotificationType, MibScalar, MibTable, MibTableRow, MibTableColumn, Integer32, IpAddress, Bits, MibIdentifier = mibBuilder.importSymbols("SNMPv2-SMI", "Counter64", "Gauge32", "ModuleIdentity", "TimeTicks", "Counter32", "ObjectIdentity", "Unsigned32", "iso", "NotificationType", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Integer32", "IpAddress", "Bits", "MibIdentifier")
TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString")
class DisplayString(OctetString):
    pass

mibrouteProfile = MibIdentifier((1, 3, 6, 1, 4, 1, 529, 23, 105))
mibrouteProfileTable = MibTable((1, 3, 6, 1, 4, 1, 529, 23, 105, 1), )
if mibBuilder.loadTexts: mibrouteProfileTable.setStatus('mandatory')
mibrouteProfileEntry = MibTableRow((1, 3, 6, 1, 4, 1, 529, 23, 105, 1, 1), ).setIndexNames((0, "ASCEND-MIBROUTE-MIB", "routeProfile-Name"))
if mibBuilder.loadTexts: mibrouteProfileEntry.setStatus('mandatory')
routeProfile_Name = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 105, 1, 1, 1), DisplayString()).setLabel("routeProfile-Name").setMaxAccess("readonly")
if mibBuilder.loadTexts: routeProfile_Name.setStatus('mandatory')
routeProfile_DestAddress = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 105, 1, 1, 2), IpAddress()).setLabel("routeProfile-DestAddress").setMaxAccess("readwrite")
if mibBuilder.loadTexts: routeProfile_DestAddress.setStatus('mandatory')
routeProfile_Netmask = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 105, 1, 1, 16), IpAddress()).setLabel("routeProfile-Netmask").setMaxAccess("readwrite")
if mibBuilder.loadTexts: routeProfile_Netmask.setStatus('mandatory')
routeProfile_GatewayAddress = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 105, 1, 1, 3), IpAddress()).setLabel("routeProfile-GatewayAddress").setMaxAccess("readwrite")
if mibBuilder.loadTexts: routeProfile_GatewayAddress.setStatus('mandatory')
routeProfile_Metric = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 105, 1, 1, 4), Integer32()).setLabel("routeProfile-Metric").setMaxAccess("readwrite")
if mibBuilder.loadTexts: routeProfile_Metric.setStatus('mandatory')
routeProfile_Cost = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 105, 1, 1, 5), Integer32()).setLabel("routeProfile-Cost").setMaxAccess("readwrite")
if mibBuilder.loadTexts: routeProfile_Cost.setStatus('mandatory')
routeProfile_Preference = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 105, 1, 1, 6), Integer32()).setLabel("routeProfile-Preference").setMaxAccess("readwrite")
if mibBuilder.loadTexts: routeProfile_Preference.setStatus('mandatory')
routeProfile_ThirdParty = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 105, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setLabel("routeProfile-ThirdParty").setMaxAccess("readwrite")
if mibBuilder.loadTexts: routeProfile_ThirdParty.setStatus('mandatory')
routeProfile_AseType = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 105, 1, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("type1", 1), ("type2", 2)))).setLabel("routeProfile-AseType").setMaxAccess("readwrite")
if mibBuilder.loadTexts: routeProfile_AseType.setStatus('mandatory')
routeProfile_AseTag = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 105, 1, 1, 9), DisplayString()).setLabel("routeProfile-AseTag").setMaxAccess("readwrite")
if mibBuilder.loadTexts: routeProfile_AseTag.setStatus('mandatory')
routeProfile_PrivateRoute = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 105, 1, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setLabel("routeProfile-PrivateRoute").setMaxAccess("readwrite")
if mibBuilder.loadTexts: routeProfile_PrivateRoute.setStatus('mandatory')
routeProfile_ActiveRoute = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 105, 1, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setLabel("routeProfile-ActiveRoute").setMaxAccess("readwrite")
if mibBuilder.loadTexts: routeProfile_ActiveRoute.setStatus('mandatory')
routeProfile_Ase7Adv = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 105, 1, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("n-A", 1), ("advertise", 2), ("doNotAdvertise", 3)))).setLabel("routeProfile-Ase7Adv").setMaxAccess("readwrite")
if mibBuilder.loadTexts: routeProfile_Ase7Adv.setStatus('mandatory')
routeProfile_Vrouter = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 105, 1, 1, 13), DisplayString()).setLabel("routeProfile-Vrouter").setMaxAccess("readwrite")
if mibBuilder.loadTexts: routeProfile_Vrouter.setStatus('mandatory')
routeProfile_InterVrouter = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 105, 1, 1, 14), DisplayString()).setLabel("routeProfile-InterVrouter").setMaxAccess("readwrite")
if mibBuilder.loadTexts: routeProfile_InterVrouter.setStatus('mandatory')
routeProfile_Action_o = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 105, 1, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("noAction", 1), ("createProfile", 2), ("deleteProfile", 3)))).setLabel("routeProfile-Action-o").setMaxAccess("readwrite")
if mibBuilder.loadTexts: routeProfile_Action_o.setStatus('mandatory')
mibBuilder.exportSymbols("ASCEND-MIBROUTE-MIB", routeProfile_ActiveRoute=routeProfile_ActiveRoute, routeProfile_Action_o=routeProfile_Action_o, routeProfile_Netmask=routeProfile_Netmask, routeProfile_Ase7Adv=routeProfile_Ase7Adv, mibrouteProfileEntry=mibrouteProfileEntry, routeProfile_GatewayAddress=routeProfile_GatewayAddress, DisplayString=DisplayString, mibrouteProfileTable=mibrouteProfileTable, routeProfile_InterVrouter=routeProfile_InterVrouter, mibrouteProfile=mibrouteProfile, routeProfile_PrivateRoute=routeProfile_PrivateRoute, routeProfile_ThirdParty=routeProfile_ThirdParty, routeProfile_Vrouter=routeProfile_Vrouter, routeProfile_Cost=routeProfile_Cost, routeProfile_Name=routeProfile_Name, routeProfile_DestAddress=routeProfile_DestAddress, routeProfile_Metric=routeProfile_Metric, routeProfile_AseTag=routeProfile_AseTag, routeProfile_Preference=routeProfile_Preference, routeProfile_AseType=routeProfile_AseType)
