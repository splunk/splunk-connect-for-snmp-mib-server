#
# PySNMP MIB module PDN-DOMAIN-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/PDN-DOMAIN-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 20:29:32 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, Integer, OctetString = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "Integer", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
SingleValueConstraint, ConstraintsUnion, ConstraintsIntersection, ValueSizeConstraint, ValueRangeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "SingleValueConstraint", "ConstraintsUnion", "ConstraintsIntersection", "ValueSizeConstraint", "ValueRangeConstraint")
ifIndex, = mibBuilder.importSymbols("IF-MIB", "ifIndex")
pdn_domain, = mibBuilder.importSymbols("PDN-HEADER-MIB", "pdn-domain")
VnidTaggingState, SwitchState, VnidRange, ClientState = mibBuilder.importSymbols("PDN-TC", "VnidTaggingState", "SwitchState", "VnidRange", "ClientState")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
MibScalar, MibTable, MibTableRow, MibTableColumn, Unsigned32, Integer32, TimeTicks, Counter32, Gauge32, MibIdentifier, ModuleIdentity, NotificationType, ObjectIdentity, iso, IpAddress, Bits, Counter64, NotificationType = mibBuilder.importSymbols("SNMPv2-SMI", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Unsigned32", "Integer32", "TimeTicks", "Counter32", "Gauge32", "MibIdentifier", "ModuleIdentity", "NotificationType", "ObjectIdentity", "iso", "IpAddress", "Bits", "Counter64", "NotificationType")
DisplayString, RowStatus, MacAddress, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "RowStatus", "MacAddress", "TextualConvention")
pdnDomainMIBObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 1795, 2, 24, 2, 22, 1))
pdnDomainMIBTraps = MibIdentifier((1, 3, 6, 1, 4, 1, 1795, 2, 24, 2, 22, 2))
pdnCardGeneralParams = MibIdentifier((1, 3, 6, 1, 4, 1, 1795, 2, 24, 2, 22, 1, 1))
pdnCardConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 1795, 2, 24, 2, 22, 1, 2))
pdnClientConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 1795, 2, 24, 2, 22, 1, 3))
pdnPortConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 1795, 2, 24, 2, 22, 1, 4))
pdnCardGeneralParamsVNIDMode = MibScalar((1, 3, 6, 1, 4, 1, 1795, 2, 24, 2, 22, 1, 1, 1), VnidTaggingState()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pdnCardGeneralParamsVNIDMode.setStatus('mandatory')
pdnCardConfigTable = MibTable((1, 3, 6, 1, 4, 1, 1795, 2, 24, 2, 22, 1, 2, 1), )
if mibBuilder.loadTexts: pdnCardConfigTable.setStatus('mandatory')
pdnCardConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1795, 2, 24, 2, 22, 1, 2, 1, 1), ).setIndexNames((0, "PDN-DOMAIN-MIB", "pdnCardConfigVnidId"))
if mibBuilder.loadTexts: pdnCardConfigEntry.setStatus('mandatory')
pdnCardConfigVnidId = MibTableColumn((1, 3, 6, 1, 4, 1, 1795, 2, 24, 2, 22, 1, 2, 1, 1, 1), VnidRange()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pdnCardConfigVnidId.setStatus('mandatory')
pdnCardConfigDomainName = MibTableColumn((1, 3, 6, 1, 4, 1, 1795, 2, 24, 2, 22, 1, 2, 1, 1, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pdnCardConfigDomainName.setStatus('mandatory')
pdnCardConfigMuxFwd = MibTableColumn((1, 3, 6, 1, 4, 1, 1795, 2, 24, 2, 22, 1, 2, 1, 1, 3), SwitchState()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pdnCardConfigMuxFwd.setStatus('mandatory')
pdnCardConfigIPFiltering = MibTableColumn((1, 3, 6, 1, 4, 1, 1795, 2, 24, 2, 22, 1, 2, 1, 1, 4), SwitchState()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pdnCardConfigIPFiltering.setStatus('mandatory')
pdnCardConfigIPScoping = MibTableColumn((1, 3, 6, 1, 4, 1, 1795, 2, 24, 2, 22, 1, 2, 1, 1, 5), SwitchState()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pdnCardConfigIPScoping.setStatus('mandatory')
pdnCardConfigVnidAuth = MibTableColumn((1, 3, 6, 1, 4, 1, 1795, 2, 24, 2, 22, 1, 2, 1, 1, 6), SwitchState()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pdnCardConfigVnidAuth.setStatus('mandatory')
pdnCardConfigRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1795, 2, 24, 2, 22, 1, 2, 1, 1, 7), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pdnCardConfigRowStatus.setStatus('mandatory')
pdnPortConfigTable = MibTable((1, 3, 6, 1, 4, 1, 1795, 2, 24, 2, 22, 1, 4, 1), )
if mibBuilder.loadTexts: pdnPortConfigTable.setStatus('mandatory')
pdnPortConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1795, 2, 24, 2, 22, 1, 4, 1, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "PDN-DOMAIN-MIB", "pdnPortConfigVnidId"))
if mibBuilder.loadTexts: pdnPortConfigEntry.setStatus('mandatory')
pdnPortConfigVnidId = MibTableColumn((1, 3, 6, 1, 4, 1, 1795, 2, 24, 2, 22, 1, 4, 1, 1, 1), VnidRange()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pdnPortConfigVnidId.setStatus('mandatory')
pdnPortConfigCfg = MibTableColumn((1, 3, 6, 1, 4, 1, 1795, 2, 24, 2, 22, 1, 4, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("un-bind", 1), ("bind", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pdnPortConfigCfg.setStatus('mandatory')
pdnPortConfigDefNHR = MibTableColumn((1, 3, 6, 1, 4, 1, 1795, 2, 24, 2, 22, 1, 4, 1, 1, 3), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pdnPortConfigDefNHR.setStatus('mandatory')
pdnPortConfigOperStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1795, 2, 24, 2, 22, 1, 4, 1, 1, 4), SwitchState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pdnPortConfigOperStatus.setStatus('mandatory')
pdnClientConfigTable = MibTable((1, 3, 6, 1, 4, 1, 1795, 2, 24, 2, 22, 1, 3, 1), )
if mibBuilder.loadTexts: pdnClientConfigTable.setStatus('mandatory')
pdnClientConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1795, 2, 24, 2, 22, 1, 3, 1, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "PDN-DOMAIN-MIB", "pdnClientConfigAddr"), (0, "PDN-DOMAIN-MIB", "pdnClientConfigSubnetMask"), (0, "PDN-DOMAIN-MIB", "pdnClientConfigVnidId"))
if mibBuilder.loadTexts: pdnClientConfigEntry.setStatus('mandatory')
pdnClientConfigAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 1795, 2, 24, 2, 22, 1, 3, 1, 1, 1), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pdnClientConfigAddr.setStatus('mandatory')
pdnClientConfigSubnetMask = MibTableColumn((1, 3, 6, 1, 4, 1, 1795, 2, 24, 2, 22, 1, 3, 1, 1, 2), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pdnClientConfigSubnetMask.setStatus('mandatory')
pdnClientConfigVnidId = MibTableColumn((1, 3, 6, 1, 4, 1, 1795, 2, 24, 2, 22, 1, 3, 1, 1, 3), VnidRange()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pdnClientConfigVnidId.setStatus('mandatory')
pdnClientConfigNHR = MibTableColumn((1, 3, 6, 1, 4, 1, 1795, 2, 24, 2, 22, 1, 3, 1, 1, 4), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pdnClientConfigNHR.setStatus('mandatory')
pdnClientConfigType = MibTableColumn((1, 3, 6, 1, 4, 1, 1795, 2, 24, 2, 22, 1, 3, 1, 1, 5), ClientState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pdnClientConfigType.setStatus('mandatory')
pdnClientConfigLeaseTime = MibTableColumn((1, 3, 6, 1, 4, 1, 1795, 2, 24, 2, 22, 1, 3, 1, 1, 6), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pdnClientConfigLeaseTime.setStatus('mandatory')
pdnClientConfigLeaseRemainTime = MibTableColumn((1, 3, 6, 1, 4, 1, 1795, 2, 24, 2, 22, 1, 3, 1, 1, 7), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pdnClientConfigLeaseRemainTime.setStatus('mandatory')
pdnClientConfigMacAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 1795, 2, 24, 2, 22, 1, 3, 1, 1, 8), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pdnClientConfigMacAddr.setStatus('mandatory')
pdnClientConfigRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1795, 2, 24, 2, 22, 1, 3, 1, 1, 9), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pdnClientConfigRowStatus.setStatus('mandatory')
pdnMaxClientsTable = MibTable((1, 3, 6, 1, 4, 1, 1795, 2, 24, 2, 22, 1, 3, 2), )
if mibBuilder.loadTexts: pdnMaxClientsTable.setStatus('mandatory')
pdnMaxClientsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1795, 2, 24, 2, 22, 1, 3, 2, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: pdnMaxClientsEntry.setStatus('mandatory')
pdnMaxClients = MibTableColumn((1, 3, 6, 1, 4, 1, 1795, 2, 24, 2, 22, 1, 3, 2, 1, 1), Integer32().clone(32)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pdnMaxClients.setStatus('mandatory')
pdnMaxDynamicClients = MibTableColumn((1, 3, 6, 1, 4, 1, 1795, 2, 24, 2, 22, 1, 3, 2, 1, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pdnMaxDynamicClients.setStatus('mandatory')
pdnClientAdditionalClientsAvailable = MibScalar((1, 3, 6, 1, 4, 1, 1795, 2, 24, 2, 22, 1, 3, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pdnClientAdditionalClientsAvailable.setStatus('mandatory')
dhcpClientHostTableFull = NotificationType((1, 3, 6, 1, 4, 1, 1795, 2, 24, 2, 22, 2) + (0,1)).setObjects(("IF-MIB", "ifIndex"))
dhcpAddressInStaticSubnet = NotificationType((1, 3, 6, 1, 4, 1, 1795, 2, 24, 2, 22, 2) + (0,2)).setObjects(("IF-MIB", "ifIndex"), ("PDN-DOMAIN-MIB", "pdnClientConfigSubnetMask"), ("IF-MIB", "ifIndex"))
mibBuilder.exportSymbols("PDN-DOMAIN-MIB", pdnPortConfigTable=pdnPortConfigTable, pdnClientConfigEntry=pdnClientConfigEntry, pdnClientConfigSubnetMask=pdnClientConfigSubnetMask, pdnClientConfigAddr=pdnClientConfigAddr, pdnPortConfigCfg=pdnPortConfigCfg, dhcpClientHostTableFull=dhcpClientHostTableFull, pdnPortConfigVnidId=pdnPortConfigVnidId, pdnDomainMIBTraps=pdnDomainMIBTraps, pdnPortConfigOperStatus=pdnPortConfigOperStatus, pdnCardConfigMuxFwd=pdnCardConfigMuxFwd, pdnMaxDynamicClients=pdnMaxDynamicClients, pdnMaxClientsTable=pdnMaxClientsTable, pdnCardConfigVnidAuth=pdnCardConfigVnidAuth, pdnMaxClients=pdnMaxClients, pdnPortConfig=pdnPortConfig, pdnCardConfigDomainName=pdnCardConfigDomainName, pdnCardConfigRowStatus=pdnCardConfigRowStatus, pdnClientConfigVnidId=pdnClientConfigVnidId, pdnCardConfigVnidId=pdnCardConfigVnidId, pdnCardGeneralParamsVNIDMode=pdnCardGeneralParamsVNIDMode, pdnCardConfigTable=pdnCardConfigTable, pdnCardConfigEntry=pdnCardConfigEntry, pdnCardConfig=pdnCardConfig, dhcpAddressInStaticSubnet=dhcpAddressInStaticSubnet, pdnPortConfigDefNHR=pdnPortConfigDefNHR, pdnPortConfigEntry=pdnPortConfigEntry, pdnClientConfigLeaseTime=pdnClientConfigLeaseTime, pdnCardConfigIPScoping=pdnCardConfigIPScoping, pdnMaxClientsEntry=pdnMaxClientsEntry, pdnClientConfig=pdnClientConfig, pdnClientConfigNHR=pdnClientConfigNHR, pdnClientConfigType=pdnClientConfigType, pdnClientAdditionalClientsAvailable=pdnClientAdditionalClientsAvailable, pdnDomainMIBObjects=pdnDomainMIBObjects, pdnClientConfigTable=pdnClientConfigTable, pdnClientConfigMacAddr=pdnClientConfigMacAddr, pdnClientConfigLeaseRemainTime=pdnClientConfigLeaseRemainTime, pdnCardConfigIPFiltering=pdnCardConfigIPFiltering, pdnClientConfigRowStatus=pdnClientConfigRowStatus, pdnCardGeneralParams=pdnCardGeneralParams)
