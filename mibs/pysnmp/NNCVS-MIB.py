#
# PySNMP MIB module NNCVS-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/NNCVS-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 20:13:33 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, ObjectIdentifier, OctetString = mibBuilder.importSymbols("ASN1", "Integer", "ObjectIdentifier", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueRangeConstraint, ConstraintsUnion, ConstraintsIntersection, ValueSizeConstraint, SingleValueConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueRangeConstraint", "ConstraintsUnion", "ConstraintsIntersection", "ValueSizeConstraint", "SingleValueConstraint")
ifIndex, = mibBuilder.importSymbols("IF-MIB", "ifIndex")
nncExtensions, = mibBuilder.importSymbols("NNCGNI0001-SMI", "nncExtensions")
ModuleCompliance, NotificationGroup, ObjectGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup", "ObjectGroup")
ModuleIdentity, NotificationType, MibIdentifier, Integer32, TimeTicks, Unsigned32, Counter32, iso, IpAddress, Counter64, Gauge32, ObjectIdentity, Bits, MibScalar, MibTable, MibTableRow, MibTableColumn = mibBuilder.importSymbols("SNMPv2-SMI", "ModuleIdentity", "NotificationType", "MibIdentifier", "Integer32", "TimeTicks", "Unsigned32", "Counter32", "iso", "IpAddress", "Counter64", "Gauge32", "ObjectIdentity", "Bits", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn")
DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention")
nncVS = ModuleIdentity((1, 3, 6, 1, 4, 1, 123, 3, 72))
if mibBuilder.loadTexts: nncVS.setLastUpdated('9901060924Z')
if mibBuilder.loadTexts: nncVS.setOrganization('Newbridge Networks Corporation')
nncVSObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 123, 3, 72, 1))
nncVSTraps = MibIdentifier((1, 3, 6, 1, 4, 1, 123, 3, 72, 2))
nncVSGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 123, 3, 72, 3))
nncVSCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 123, 3, 72, 4))
nncVSConfiguration = MibIdentifier((1, 3, 6, 1, 4, 1, 123, 3, 72, 1, 1))
nncVSStatistics = MibIdentifier((1, 3, 6, 1, 4, 1, 123, 3, 72, 1, 2))
nncVSStatisticsTable = MibTable((1, 3, 6, 1, 4, 1, 123, 3, 72, 1, 2, 1), )
if mibBuilder.loadTexts: nncVSStatisticsTable.setStatus('current')
nncVSStatisticsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 123, 3, 72, 1, 2, 1, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: nncVSStatisticsEntry.setStatus('current')
nncVSLOCSeconds = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 72, 1, 2, 1, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nncVSLOCSeconds.setStatus('current')
nncVSRemoteChanFailureSeconds = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 72, 1, 2, 1, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nncVSRemoteChanFailureSeconds.setStatus('current')
nncVSUnderrunSeconds = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 72, 1, 2, 1, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nncVSUnderrunSeconds.setStatus('current')
nncVSBufferUnderflows = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 72, 1, 2, 1, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nncVSBufferUnderflows.setStatus('current')
nncVSBufferOverflows = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 72, 1, 2, 1, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nncVSBufferOverflows.setStatus('current')
nncVSSequenceDiscontinuities = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 72, 1, 2, 1, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nncVSSequenceDiscontinuities.setStatus('current')
nncVSSpeechRx = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 72, 1, 2, 1, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nncVSSpeechRx.setStatus('current')
nncVSSpeechTx = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 72, 1, 2, 1, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nncVSSpeechTx.setStatus('current')
nncVSFaxRx = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 72, 1, 2, 1, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nncVSFaxRx.setStatus('current')
nncVSFaxTx = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 72, 1, 2, 1, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nncVSFaxTx.setStatus('current')
nncVSBypassRx = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 72, 1, 2, 1, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nncVSBypassRx.setStatus('current')
nncVSBypassTx = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 72, 1, 2, 1, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nncVSBypassTx.setStatus('current')
nncVSCASRx = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 72, 1, 2, 1, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nncVSCASRx.setStatus('current')
nncVSCASTx = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 72, 1, 2, 1, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nncVSCASTx.setStatus('current')
nncVSDTMFDigitsRx = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 72, 1, 2, 1, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nncVSDTMFDigitsRx.setStatus('current')
nncVSDTMFDigitsTx = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 72, 1, 2, 1, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nncVSDTMFDigitsTx.setStatus('current')
nncVSSilenceRx = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 72, 1, 2, 1, 1, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nncVSSilenceRx.setStatus('current')
nncVSSilenceTx = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 72, 1, 2, 1, 1, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nncVSSilenceTx.setStatus('current')
nncVSGeneralStatisticsGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 123, 3, 72, 3, 1)).setObjects(("NNCVS-MIB", "nncVSLOCSeconds"), ("NNCVS-MIB", "nncVSRemoteChanFailureSeconds"), ("NNCVS-MIB", "nncVSUnderrunSeconds"), ("NNCVS-MIB", "nncVSBufferUnderflows"), ("NNCVS-MIB", "nncVSBufferOverflows"), ("NNCVS-MIB", "nncVSSequenceDiscontinuities"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    nncVSGeneralStatisticsGroup = nncVSGeneralStatisticsGroup.setStatus('current')
nncVSSubframeStatisticsGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 123, 3, 72, 3, 2)).setObjects(("NNCVS-MIB", "nncVSSpeechRx"), ("NNCVS-MIB", "nncVSSpeechTx"), ("NNCVS-MIB", "nncVSFaxRx"), ("NNCVS-MIB", "nncVSFaxTx"), ("NNCVS-MIB", "nncVSBypassRx"), ("NNCVS-MIB", "nncVSBypassTx"), ("NNCVS-MIB", "nncVSCASRx"), ("NNCVS-MIB", "nncVSCASTx"), ("NNCVS-MIB", "nncVSDTMFDigitsRx"), ("NNCVS-MIB", "nncVSDTMFDigitsTx"), ("NNCVS-MIB", "nncVSSilenceRx"), ("NNCVS-MIB", "nncVSSilenceTx"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    nncVSSubframeStatisticsGroup = nncVSSubframeStatisticsGroup.setStatus('current')
nncVSCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 123, 3, 72, 4, 1)).setObjects(("NNCVS-MIB", "nncVSGeneralStatisticsGroup"), ("NNCVS-MIB", "nncVSSubframeStatisticsGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    nncVSCompliance = nncVSCompliance.setStatus('current')
mibBuilder.exportSymbols("NNCVS-MIB", nncVSBypassTx=nncVSBypassTx, nncVSFaxTx=nncVSFaxTx, nncVSTraps=nncVSTraps, nncVSLOCSeconds=nncVSLOCSeconds, nncVSBypassRx=nncVSBypassRx, nncVSDTMFDigitsRx=nncVSDTMFDigitsRx, nncVSSilenceTx=nncVSSilenceTx, nncVSObjects=nncVSObjects, nncVSSpeechTx=nncVSSpeechTx, nncVS=nncVS, nncVSDTMFDigitsTx=nncVSDTMFDigitsTx, nncVSSubframeStatisticsGroup=nncVSSubframeStatisticsGroup, nncVSSequenceDiscontinuities=nncVSSequenceDiscontinuities, nncVSSilenceRx=nncVSSilenceRx, nncVSBufferUnderflows=nncVSBufferUnderflows, PYSNMP_MODULE_ID=nncVS, nncVSFaxRx=nncVSFaxRx, nncVSStatistics=nncVSStatistics, nncVSRemoteChanFailureSeconds=nncVSRemoteChanFailureSeconds, nncVSSpeechRx=nncVSSpeechRx, nncVSCompliance=nncVSCompliance, nncVSCASTx=nncVSCASTx, nncVSCASRx=nncVSCASRx, nncVSUnderrunSeconds=nncVSUnderrunSeconds, nncVSGeneralStatisticsGroup=nncVSGeneralStatisticsGroup, nncVSConfiguration=nncVSConfiguration, nncVSCompliances=nncVSCompliances, nncVSStatisticsTable=nncVSStatisticsTable, nncVSBufferOverflows=nncVSBufferOverflows, nncVSGroups=nncVSGroups, nncVSStatisticsEntry=nncVSStatisticsEntry)
