#
# PySNMP MIB module RETIX-SWITCHSTAKII-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/RETIX-SWITCHSTAKII-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 20:47:46 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, ObjectIdentifier, OctetString = mibBuilder.importSymbols("ASN1", "Integer", "ObjectIdentifier", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsUnion, ConstraintsIntersection, SingleValueConstraint, ValueSizeConstraint, ValueRangeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsUnion", "ConstraintsIntersection", "SingleValueConstraint", "ValueSizeConstraint", "ValueRangeConstraint")
MibScalar, MibTable, MibTableRow, MibTableColumn = mibBuilder.importSymbols("RFC1212", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
Gauge32, MibIdentifier, IpAddress, enterprises, ObjectIdentity, Bits, MibScalar, MibTable, MibTableRow, MibTableColumn, Integer32, Counter32, Unsigned32, NotificationType, ModuleIdentity, iso, TimeTicks, Counter64 = mibBuilder.importSymbols("SNMPv2-SMI", "Gauge32", "MibIdentifier", "IpAddress", "enterprises", "ObjectIdentity", "Bits", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Integer32", "Counter32", "Unsigned32", "NotificationType", "ModuleIdentity", "iso", "TimeTicks", "Counter64")
TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString")
retix = MibIdentifier((1, 3, 6, 1, 4, 1, 72))
switchStakII = MibIdentifier((1, 3, 6, 1, 4, 1, 72, 20))
unitProfile = MibIdentifier((1, 3, 6, 1, 4, 1, 72, 20, 1))
baseUnit = MibIdentifier((1, 3, 6, 1, 4, 1, 72, 20, 2))
stakbus = MibIdentifier((1, 3, 6, 1, 4, 1, 72, 20, 3))
vlan = MibIdentifier((1, 3, 6, 1, 4, 1, 72, 20, 4))
vlanConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 72, 20, 4, 1))
baseModule = MibScalar((1, 3, 6, 1, 4, 1, 72, 20, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("tenPorts2AUI", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: baseModule.setStatus('mandatory')
io1Module = MibScalar((1, 3, 6, 1, 4, 1, 72, 20, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("vacant", 1), ("sixPort10BaseT", 2), ("fastEthernet", 3), ("stakbus", 4), ("atm", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: io1Module.setStatus('mandatory')
io2Module = MibScalar((1, 3, 6, 1, 4, 1, 72, 20, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("vacant", 1), ("sixPort10BaseT", 2), ("fastEthernet", 3), ("stakbus", 4), ("atm", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: io2Module.setStatus('mandatory')
baseBootFirmwareVersion = MibScalar((1, 3, 6, 1, 4, 1, 72, 20, 2, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: baseBootFirmwareVersion.setStatus('mandatory')
baseSoftwareVersion = MibScalar((1, 3, 6, 1, 4, 1, 72, 20, 2, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: baseSoftwareVersion.setStatus('mandatory')
baseErrorLog = MibScalar((1, 3, 6, 1, 4, 1, 72, 20, 2, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: baseErrorLog.setStatus('mandatory')
stkbusIOPort = MibScalar((1, 3, 6, 1, 4, 1, 72, 20, 3, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("io1", 1), ("io2", 2), ("notInstalled", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: stkbusIOPort.setStatus('mandatory')
stkbusSpeed = MibScalar((1, 3, 6, 1, 4, 1, 72, 20, 3, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stkbusSpeed.setStatus('mandatory')
stkbusNodeAddress = MibScalar((1, 3, 6, 1, 4, 1, 72, 20, 3, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 15))).setMaxAccess("readonly")
if mibBuilder.loadTexts: stkbusNodeAddress.setStatus('mandatory')
stkbusRingOperationalStatus = MibScalar((1, 3, 6, 1, 4, 1, 72, 20, 3, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("ringOperational", 1), ("ringNotOperational", 2), ("notInstalled", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: stkbusRingOperationalStatus.setStatus('mandatory')
vlanEnableDisable = MibScalar((1, 3, 6, 1, 4, 1, 72, 20, 4, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vlanEnableDisable.setStatus('mandatory')
portVLANTable = MibTable((1, 3, 6, 1, 4, 1, 72, 20, 4, 1, 2), )
if mibBuilder.loadTexts: portVLANTable.setStatus('mandatory')
portVLANEntry = MibTableRow((1, 3, 6, 1, 4, 1, 72, 20, 4, 1, 2, 1), ).setIndexNames((0, "RETIX-SWITCHSTAKII-MIB", "portVLANEntryPortID"), (0, "RETIX-SWITCHSTAKII-MIB", "portVLANEntryVLANID"))
if mibBuilder.loadTexts: portVLANEntry.setStatus('mandatory')
portVLANEntryPortID = MibTableColumn((1, 3, 6, 1, 4, 1, 72, 20, 4, 1, 2, 1, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portVLANEntryPortID.setStatus('mandatory')
portVLANEntryVLANID = MibTableColumn((1, 3, 6, 1, 4, 1, 72, 20, 4, 1, 2, 1, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portVLANEntryVLANID.setStatus('mandatory')
portVLANEntryEdit = MibTableColumn((1, 3, 6, 1, 4, 1, 72, 20, 4, 1, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("enableAdd", 1), ("disable", 2), ("delete", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portVLANEntryEdit.setStatus('mandatory')
mibBuilder.exportSymbols("RETIX-SWITCHSTAKII-MIB", stkbusNodeAddress=stkbusNodeAddress, vlan=vlan, portVLANEntryVLANID=portVLANEntryVLANID, portVLANEntryEdit=portVLANEntryEdit, baseBootFirmwareVersion=baseBootFirmwareVersion, switchStakII=switchStakII, vlanEnableDisable=vlanEnableDisable, stkbusSpeed=stkbusSpeed, retix=retix, baseModule=baseModule, stakbus=stakbus, io1Module=io1Module, io2Module=io2Module, stkbusRingOperationalStatus=stkbusRingOperationalStatus, portVLANEntry=portVLANEntry, baseErrorLog=baseErrorLog, unitProfile=unitProfile, portVLANTable=portVLANTable, baseUnit=baseUnit, baseSoftwareVersion=baseSoftwareVersion, stkbusIOPort=stkbusIOPort, portVLANEntryPortID=portVLANEntryPortID, vlanConfig=vlanConfig)
