#
# PySNMP MIB module TFRAP-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/TFRAP-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 21:08:49 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, ObjectIdentifier, Integer = mibBuilder.importSymbols("ASN1", "OctetString", "ObjectIdentifier", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsIntersection, ValueRangeConstraint, ConstraintsUnion, ValueSizeConstraint, SingleValueConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsIntersection", "ValueRangeConstraint", "ConstraintsUnion", "ValueSizeConstraint", "SingleValueConstraint")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
Bits, MibScalar, MibTable, MibTableRow, MibTableColumn, NotificationType, Gauge32, NotificationType, ObjectIdentity, Counter32, internet, ModuleIdentity, Unsigned32, iso, Counter64, IpAddress, Integer32, TimeTicks, MibIdentifier = mibBuilder.importSymbols("SNMPv2-SMI", "Bits", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "NotificationType", "Gauge32", "NotificationType", "ObjectIdentity", "Counter32", "internet", "ModuleIdentity", "Unsigned32", "iso", "Counter64", "IpAddress", "Integer32", "TimeTicks", "MibIdentifier")
DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention")
private = MibIdentifier((1, 3, 6, 1, 4))
enterprises = MibIdentifier((1, 3, 6, 1, 4, 1))
sync = MibIdentifier((1, 3, 6, 1, 4, 1, 485))
tfrap = MibIdentifier((1, 3, 6, 1, 4, 1, 485, 5))
tfrapSystem = MibIdentifier((1, 3, 6, 1, 4, 1, 485, 5, 1))
tfrapSysTable = MibIdentifier((1, 3, 6, 1, 4, 1, 485, 5, 1, 1))
tfrapSysType = MibScalar((1, 3, 6, 1, 4, 1, 485, 5, 1, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tfrapSysType.setStatus('mandatory')
tfrapSysSoftRev = MibScalar((1, 3, 6, 1, 4, 1, 485, 5, 1, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 10))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tfrapSysSoftRev.setStatus('mandatory')
tfrapSysHardRev = MibScalar((1, 3, 6, 1, 4, 1, 485, 5, 1, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 10))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tfrapSysHardRev.setStatus('mandatory')
tfrapSysNumT1Installed = MibScalar((1, 3, 6, 1, 4, 1, 485, 5, 1, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tfrapSysNumT1Installed.setStatus('mandatory')
tfrapSysNumDteInstalled = MibScalar((1, 3, 6, 1, 4, 1, 485, 5, 1, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tfrapSysNumDteInstalled.setStatus('mandatory')
tfrapSysNumMaintInstalled = MibScalar((1, 3, 6, 1, 4, 1, 485, 5, 1, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tfrapSysNumMaintInstalled.setStatus('mandatory')
tfrapSysName = MibScalar((1, 3, 6, 1, 4, 1, 485, 5, 1, 1, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tfrapSysName.setStatus('mandatory')
tfrapSysSerialNo = MibScalar((1, 3, 6, 1, 4, 1, 485, 5, 1, 1, 8), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 10))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tfrapSysSerialNo.setStatus('mandatory')
tfrapSysResetNode = MibScalar((1, 3, 6, 1, 4, 1, 485, 5, 1, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(321))).clone(namedValues=NamedValues(("reset-node", 321)))).setMaxAccess("writeonly")
if mibBuilder.loadTexts: tfrapSysResetNode.setStatus('mandatory')
tfrapSysAmtMemoryInstalled = MibScalar((1, 3, 6, 1, 4, 1, 485, 5, 1, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tfrapSysAmtMemoryInstalled.setStatus('mandatory')
tfrapSysLocation = MibScalar((1, 3, 6, 1, 4, 1, 485, 5, 1, 1, 12), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tfrapSysLocation.setStatus('mandatory')
tfrapSysContact = MibScalar((1, 3, 6, 1, 4, 1, 485, 5, 1, 1, 13), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tfrapSysContact.setStatus('mandatory')
tfrapSysPrompt = MibScalar((1, 3, 6, 1, 4, 1, 485, 5, 1, 1, 15), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 8))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tfrapSysPrompt.setStatus('mandatory')
tfrapSysBootRev = MibScalar((1, 3, 6, 1, 4, 1, 485, 5, 1, 1, 16), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 10))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tfrapSysBootRev.setStatus('mandatory')
tfrapSysFeatureTable = MibIdentifier((1, 3, 6, 1, 4, 1, 485, 5, 1, 2))
tfrapSysSLIPSupported = MibScalar((1, 3, 6, 1, 4, 1, 485, 5, 1, 2, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 10))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tfrapSysSLIPSupported.setStatus('mandatory')
tfrapSysPPPSupported = MibScalar((1, 3, 6, 1, 4, 1, 485, 5, 1, 2, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 10))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tfrapSysPPPSupported.setStatus('mandatory')
tfrapSysRDOSupported = MibScalar((1, 3, 6, 1, 4, 1, 485, 5, 1, 2, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 10))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tfrapSysRDOSupported.setStatus('mandatory')
tfrapSysETHSupported = MibScalar((1, 3, 6, 1, 4, 1, 485, 5, 1, 2, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 10))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tfrapSysETHSupported.setStatus('mandatory')
tfrapSysTKRSupported = MibScalar((1, 3, 6, 1, 4, 1, 485, 5, 1, 2, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 10))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tfrapSysTKRSupported.setStatus('mandatory')
tfrapSysExtTimSupported = MibScalar((1, 3, 6, 1, 4, 1, 485, 5, 1, 2, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 10))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tfrapSysExtTimSupported.setStatus('mandatory')
tfrapSysBRISupported = MibScalar((1, 3, 6, 1, 4, 1, 485, 5, 1, 2, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 10))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tfrapSysBRISupported.setStatus('mandatory')
tfrapSysSelDTESupported = MibScalar((1, 3, 6, 1, 4, 1, 485, 5, 1, 2, 8), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 10))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tfrapSysSelDTESupported.setStatus('mandatory')
tfrapSysMLSupported = MibScalar((1, 3, 6, 1, 4, 1, 485, 5, 1, 2, 9), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 10))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tfrapSysMLSupported.setStatus('mandatory')
tfrapSysNumDlcisSupported = MibScalar((1, 3, 6, 1, 4, 1, 485, 5, 1, 2, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tfrapSysNumDlcisSupported.setStatus('mandatory')
tfrapSysLTFNumDlcis = MibScalar((1, 3, 6, 1, 4, 1, 485, 5, 1, 2, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tfrapSysLTFNumDlcis.setStatus('mandatory')
tfrapSysLTFNumProtocols = MibScalar((1, 3, 6, 1, 4, 1, 485, 5, 1, 2, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tfrapSysLTFNumProtocols.setStatus('mandatory')
tfrapSysNumUserProtocols = MibScalar((1, 3, 6, 1, 4, 1, 485, 5, 1, 2, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tfrapSysNumUserProtocols.setStatus('mandatory')
tfrapSysNumSnmpMgrs = MibScalar((1, 3, 6, 1, 4, 1, 485, 5, 1, 2, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tfrapSysNumSnmpMgrs.setStatus('mandatory')
tfrapSysNumDlciNames = MibScalar((1, 3, 6, 1, 4, 1, 485, 5, 1, 2, 15), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tfrapSysNumDlciNames.setStatus('mandatory')
tfrapConfiguration = MibIdentifier((1, 3, 6, 1, 4, 1, 485, 5, 2))
tfrapCfgMgmtTable = MibIdentifier((1, 3, 6, 1, 4, 1, 485, 5, 2, 1))
tfrapCfgIpTable = MibIdentifier((1, 3, 6, 1, 4, 1, 485, 5, 2, 1, 1))
tfrapCfgIpMyIP = MibScalar((1, 3, 6, 1, 4, 1, 485, 5, 2, 1, 1, 1), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tfrapCfgIpMyIP.setStatus('mandatory')
tfrapCfgIpPeerIP = MibScalar((1, 3, 6, 1, 4, 1, 485, 5, 2, 1, 1, 2), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tfrapCfgIpPeerIP.setStatus('mandatory')
tfrapCfgIpMask = MibScalar((1, 3, 6, 1, 4, 1, 485, 5, 2, 1, 1, 3), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tfrapCfgIpMask.setStatus('mandatory')
tfrapCfgIpMaxMTU = MibScalar((1, 3, 6, 1, 4, 1, 485, 5, 2, 1, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1024))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tfrapCfgIpMaxMTU.setStatus('mandatory')
tfrapCfgIpChannel = MibScalar((1, 3, 6, 1, 4, 1, 485, 5, 2, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("none", 1), ("slip-port", 2), ("in-band-dlci", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tfrapCfgIpChannel.setStatus('mandatory')
tfrapCfgIpTelnetEnable = MibScalar((1, 3, 6, 1, 4, 1, 485, 5, 2, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable-telnet", 1), ("disable-telnet", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tfrapCfgIpTelnetEnable.setStatus('mandatory')
tfrapCfgIpTelnetAutoLogOut = MibScalar((1, 3, 6, 1, 4, 1, 485, 5, 2, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 5, 10, 30, 60))).clone(namedValues=NamedValues(("autologout-at-15-minutes", 1), ("disable-autologout", 2), ("autologout-at-3-minutes", 3), ("autologout-at-5-minutes", 5), ("autologout-at-10-minutes", 10), ("autologout-at-30-minutes", 30), ("autologout-at-60-minutes", 60)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tfrapCfgIpTelnetAutoLogOut.setStatus('mandatory')
tfrapCfgTftpTable = MibIdentifier((1, 3, 6, 1, 4, 1, 485, 5, 2, 1, 2))
tfrapCfgTftpInitiate = MibScalar((1, 3, 6, 1, 4, 1, 485, 5, 2, 1, 2, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 8))).setMaxAccess("writeonly")
if mibBuilder.loadTexts: tfrapCfgTftpInitiate.setStatus('mandatory')
tfrapCfgTftpIpAddress = MibScalar((1, 3, 6, 1, 4, 1, 485, 5, 2, 1, 2, 2), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tfrapCfgTftpIpAddress.setStatus('mandatory')
tfrapCfgTftpFilename = MibScalar((1, 3, 6, 1, 4, 1, 485, 5, 2, 1, 2, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tfrapCfgTftpFilename.setStatus('mandatory')
tfrapCfgTftpInterface = MibScalar((1, 3, 6, 1, 4, 1, 485, 5, 2, 1, 2, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("dte-interface", 1), ("t1-interface", 2), ("slip-interface", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tfrapCfgTftpInterface.setStatus('mandatory')
tfrapCfgTftpDlci = MibScalar((1, 3, 6, 1, 4, 1, 485, 5, 2, 1, 2, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 63487))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tfrapCfgTftpDlci.setStatus('mandatory')
tfrapCfgTftpStatus = MibScalar((1, 3, 6, 1, 4, 1, 485, 5, 2, 1, 2, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10))).clone(namedValues=NamedValues(("inactive", 1), ("requested", 2), ("transferring", 3), ("programming", 4), ("transfer-aborted", 5), ("host-no-reply", 6), ("file-not-found", 7), ("invalid-file", 8), ("corrupt-file", 9), ("successful", 10)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tfrapCfgTftpStatus.setStatus('mandatory')
tfrapCfgTftpNumBytes = MibScalar((1, 3, 6, 1, 4, 1, 485, 5, 2, 1, 2, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tfrapCfgTftpNumBytes.setStatus('mandatory')
tfrapCfgSnmpTable = MibIdentifier((1, 3, 6, 1, 4, 1, 485, 5, 2, 1, 3))
tfrapCfgSnmpFrTrap = MibScalar((1, 3, 6, 1, 4, 1, 485, 5, 2, 1, 3, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tfrapCfgSnmpFrTrap.setStatus('mandatory')
tfrapCfgSnmpTrapMuting = MibScalar((1, 3, 6, 1, 4, 1, 485, 5, 2, 1, 3, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 10080))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tfrapCfgSnmpTrapMuting.setStatus('mandatory')
tfrapCfgSnmpUtilTrapEnable = MibScalar((1, 3, 6, 1, 4, 1, 485, 5, 2, 1, 3, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tfrapCfgSnmpUtilTrapEnable.setStatus('mandatory')
tfrapCfgSnmpMgrClearN = MibScalar((1, 3, 6, 1, 4, 1, 485, 5, 2, 1, 3, 7), Integer32()).setMaxAccess("writeonly")
if mibBuilder.loadTexts: tfrapCfgSnmpMgrClearN.setStatus('mandatory')
tfrapCfgSnmpMgrTable = MibTable((1, 3, 6, 1, 4, 1, 485, 5, 2, 1, 3, 2), )
if mibBuilder.loadTexts: tfrapCfgSnmpMgrTable.setStatus('mandatory')
tfrapCfgSnmpMgrEntry = MibTableRow((1, 3, 6, 1, 4, 1, 485, 5, 2, 1, 3, 2, 1), ).setIndexNames((0, "TFRAP-MIB", "tfrapCfgSnmpMgrIndex"))
if mibBuilder.loadTexts: tfrapCfgSnmpMgrEntry.setStatus('mandatory')
tfrapCfgSnmpMgrIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 5, 2, 1, 3, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tfrapCfgSnmpMgrIndex.setStatus('mandatory')
tfrapCfgSnmpMgrIP = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 5, 2, 1, 3, 2, 1, 2), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tfrapCfgSnmpMgrIP.setStatus('mandatory')
tfrapCfgSnmpMgrInterface = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 5, 2, 1, 3, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("dte-interface", 1), ("t1-interface", 2), ("slip-interface", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tfrapCfgSnmpMgrInterface.setStatus('mandatory')
tfrapCfgSnmpMgrDlci = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 5, 2, 1, 3, 2, 1, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tfrapCfgSnmpMgrDlci.setStatus('mandatory')
tfrapCfgCommTable = MibIdentifier((1, 3, 6, 1, 4, 1, 485, 5, 2, 1, 4))
tfrapCfgCommMode = MibScalar((1, 3, 6, 1, 4, 1, 485, 5, 2, 1, 4, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("vt100", 1), ("slip", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tfrapCfgCommMode.setStatus('mandatory')
tfrapCfgCommBaud = MibScalar((1, 3, 6, 1, 4, 1, 485, 5, 2, 1, 4, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 4, 5, 6))).clone(namedValues=NamedValues(("baud-2400", 2), ("baud-9600", 4), ("baud-19200", 5), ("baud-38400", 6)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tfrapCfgCommBaud.setStatus('mandatory')
tfrapCfgCommDataBits = MibScalar((1, 3, 6, 1, 4, 1, 485, 5, 2, 1, 4, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("databits-7", 1), ("databits-8", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tfrapCfgCommDataBits.setStatus('mandatory')
tfrapCfgCommStopBits = MibScalar((1, 3, 6, 1, 4, 1, 485, 5, 2, 1, 4, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("stopbits-1", 1), ("stopbits-1-5", 2), ("stopbits-2", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tfrapCfgCommStopBits.setStatus('mandatory')
tfrapCfgCommParity = MibScalar((1, 3, 6, 1, 4, 1, 485, 5, 2, 1, 4, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("no-parity", 1), ("odd-parity", 2), ("even-parity", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tfrapCfgCommParity.setStatus('mandatory')
tfrapCfgCommFlowCtrl = MibScalar((1, 3, 6, 1, 4, 1, 485, 5, 2, 1, 4, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("no-flow-control", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tfrapCfgCommFlowCtrl.setStatus('mandatory')
tfrapCfgFrDLCITable = MibIdentifier((1, 3, 6, 1, 4, 1, 485, 5, 2, 1, 5))
tfrapCfgFrDLCIMode = MibScalar((1, 3, 6, 1, 4, 1, 485, 5, 2, 1, 5, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("inactive", 1), ("local", 2), ("remote", 3), ("bidirectional", 4), ("piggyback", 5), ("fixedDCE", 6)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tfrapCfgFrDLCIMode.setStatus('mandatory')
tfrapCfgFrDLCIValue = MibScalar((1, 3, 6, 1, 4, 1, 485, 5, 2, 1, 5, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(16, 63487))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tfrapCfgFrDLCIValue.setStatus('mandatory')
tfrapCfgFrDLCIEncap = MibScalar((1, 3, 6, 1, 4, 1, 485, 5, 2, 1, 5, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("rfc1490", 1), ("rfc1490snap", 2), ("auto", 3), ("cisco", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tfrapCfgFrDLCIEncap.setStatus('mandatory')
tfrapCfgFrDLCIMgmtDE = MibScalar((1, 3, 6, 1, 4, 1, 485, 5, 2, 1, 5, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no-DE-bit-0", 1), ("yes-DE-bit-1", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tfrapCfgFrDLCIMgmtDE.setStatus('mandatory')
tfrapCfgAppTable = MibIdentifier((1, 3, 6, 1, 4, 1, 485, 5, 2, 2))
tfrapCfgAppClockSource = MibScalar((1, 3, 6, 1, 4, 1, 485, 5, 2, 2, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("internal", 1), ("network", 2), ("dte", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tfrapCfgAppClockSource.setStatus('mandatory')
tfrapCfgAppCircuitId = MibScalar((1, 3, 6, 1, 4, 1, 485, 5, 2, 2, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 30))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tfrapCfgAppCircuitId.setStatus('mandatory')
tfrapCfgAppType = MibScalar((1, 3, 6, 1, 4, 1, 485, 5, 2, 2, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("dedicated", 1), ("frame-relay", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tfrapCfgAppType.setStatus('mandatory')
tfrapCfgAppFormat = MibScalar((1, 3, 6, 1, 4, 1, 485, 5, 2, 2, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("cbo", 1), ("hdlc", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tfrapCfgAppFormat.setStatus('mandatory')
tfrapCfgAppLpbkTimeout = MibScalar((1, 3, 6, 1, 4, 1, 485, 5, 2, 2, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1440))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tfrapCfgAppLpbkTimeout.setStatus('mandatory')
tfrapCfgAppPerfBuffLimit = MibScalar((1, 3, 6, 1, 4, 1, 485, 5, 2, 2, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 512))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tfrapCfgAppPerfBuffLimit.setStatus('mandatory')
tfrapCfgT1Table = MibIdentifier((1, 3, 6, 1, 4, 1, 485, 5, 2, 3))
tfrapCfgT1Framing = MibScalar((1, 3, 6, 1, 4, 1, 485, 5, 2, 3, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("d4", 1), ("esf-54016", 2), ("esf-ansi", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tfrapCfgT1Framing.setStatus('mandatory')
tfrapCfgT1LineEncoding = MibScalar((1, 3, 6, 1, 4, 1, 485, 5, 2, 3, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("ami", 1), ("b8zs", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tfrapCfgT1LineEncoding.setStatus('mandatory')
tfrapCfgT1Density = MibScalar((1, 3, 6, 1, 4, 1, 485, 5, 2, 3, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("no-density", 1), ("twelve-half-percent", 2), ("one-in-16", 3), ("one-in-64", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tfrapCfgT1Density.setStatus('mandatory')
tfrapCfgT1Interface = MibScalar((1, 3, 6, 1, 4, 1, 485, 5, 2, 3, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("dsx-1", 1), ("csu", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tfrapCfgT1Interface.setStatus('mandatory')
tfrapCfgT1LboSetting = MibScalar((1, 3, 6, 1, 4, 1, 485, 5, 2, 3, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("zero-db", 1), ("n7-5-db", 2), ("n15-db", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tfrapCfgT1LboSetting.setStatus('mandatory')
tfrapCfgDteTable = MibIdentifier((1, 3, 6, 1, 4, 1, 485, 5, 2, 4))
tfrapCfgDteIntfType = MibScalar((1, 3, 6, 1, 4, 1, 485, 5, 2, 4, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(3))).clone(namedValues=NamedValues(("intf-v35", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tfrapCfgDteIntfType.setStatus('mandatory')
tfrapCfgDteDataMode = MibScalar((1, 3, 6, 1, 4, 1, 485, 5, 2, 4, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("data-normal", 1), ("data-invert", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tfrapCfgDteDataMode.setStatus('mandatory')
tfrapCfgDteClockMode = MibScalar((1, 3, 6, 1, 4, 1, 485, 5, 2, 4, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("clock-normal", 1), ("clock-invert", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tfrapCfgDteClockMode.setStatus('mandatory')
tfrapCfgDteTiming = MibScalar((1, 3, 6, 1, 4, 1, 485, 5, 2, 4, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("loop-1", 1), ("loop-2", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tfrapCfgDteTiming.setStatus('mandatory')
tfrapCfgDteLineRate = MibScalar((1, 3, 6, 1, 4, 1, 485, 5, 2, 4, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1536000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tfrapCfgDteLineRate.setStatus('mandatory')
tfrapCfgDteChannelDensity = MibScalar((1, 3, 6, 1, 4, 1, 485, 5, 2, 4, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(56, 64))).clone(namedValues=NamedValues(("bit-7-stuff", 56), ("clear-channel", 64)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tfrapCfgDteChannelDensity.setStatus('mandatory')
tfrapCfgDteStartDs0 = MibScalar((1, 3, 6, 1, 4, 1, 485, 5, 2, 4, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 40, 41))).clone(namedValues=NamedValues(("ds0-01", 1), ("ds0-02", 2), ("ds0-03", 3), ("ds0-04", 4), ("ds0-05", 5), ("ds0-06", 6), ("ds0-07", 7), ("ds0-08", 8), ("ds0-09", 9), ("ds0-10", 10), ("ds0-11", 11), ("ds0-12", 12), ("ds0-13", 13), ("ds0-14", 14), ("ds0-15", 15), ("ds0-16", 16), ("ds0-17", 17), ("ds0-18", 18), ("ds0-19", 19), ("ds0-20", 20), ("ds0-21", 21), ("ds0-22", 22), ("ds0-23", 23), ("ds0-24", 24), ("no-current-connections", 40), ("non-continuous-ds0s", 41)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tfrapCfgDteStartDs0.setStatus('mandatory')
tfrapCfgDteConnStatus = MibScalar((1, 3, 6, 1, 4, 1, 485, 5, 2, 4, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 4))).clone(namedValues=NamedValues(("connections-valid", 1), ("no-current-connections", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tfrapCfgDteConnStatus.setStatus('mandatory')
tfrapCfgDteConnStartDs0 = MibScalar((1, 3, 6, 1, 4, 1, 485, 5, 2, 4, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 40, 41))).clone(namedValues=NamedValues(("ds0-01", 1), ("ds0-02", 2), ("ds0-03", 3), ("ds0-04", 4), ("ds0-05", 5), ("ds0-06", 6), ("ds0-07", 7), ("ds0-08", 8), ("ds0-09", 9), ("ds0-10", 10), ("ds0-11", 11), ("ds0-12", 12), ("ds0-13", 13), ("ds0-14", 14), ("ds0-15", 15), ("ds0-16", 16), ("ds0-17", 17), ("ds0-18", 18), ("ds0-19", 19), ("ds0-20", 20), ("ds0-21", 21), ("ds0-22", 22), ("ds0-23", 23), ("ds0-24", 24), ("no-current-connections", 40), ("non-continuous-ds0s", 41)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tfrapCfgDteConnStartDs0.setStatus('mandatory')
tfrapCfgDteConnRate = MibScalar((1, 3, 6, 1, 4, 1, 485, 5, 2, 4, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1536000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tfrapCfgDteConnRate.setStatus('mandatory')
tfrapCfgDteConnDensity = MibScalar((1, 3, 6, 1, 4, 1, 485, 5, 2, 4, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(56, 64))).clone(namedValues=NamedValues(("bit-7-stuff", 56), ("clear-channel", 64)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tfrapCfgDteConnDensity.setStatus('mandatory')
tfrapCfgDteConnDs0Required = MibScalar((1, 3, 6, 1, 4, 1, 485, 5, 2, 4, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 24))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tfrapCfgDteConnDs0Required.setStatus('mandatory')
tfrapCfgDteConnAutoStatus = MibScalar((1, 3, 6, 1, 4, 1, 485, 5, 2, 4, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("configuration-valid", 1), ("configuration-invalid", 2), ("valid-config-updated", 3), ("invalid-cfg-no-update", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tfrapCfgDteConnAutoStatus.setStatus('mandatory')
tfrapCfgDteConnAutoUpdate = MibScalar((1, 3, 6, 1, 4, 1, 485, 5, 2, 4, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("config-and-connect", 1)))).setMaxAccess("writeonly")
if mibBuilder.loadTexts: tfrapCfgDteConnAutoUpdate.setStatus('mandatory')
tfrapCfgDteRts = MibScalar((1, 3, 6, 1, 4, 1, 485, 5, 2, 4, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("internal-held-active", 1), ("external-from-dte", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tfrapCfgDteRts.setStatus('mandatory')
tfrapCfgDteDtr = MibScalar((1, 3, 6, 1, 4, 1, 485, 5, 2, 4, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("internal-held-active", 1), ("external-from-dte", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tfrapCfgDteDtr.setStatus('mandatory')
tfrapCfgDteDcdOutput = MibScalar((1, 3, 6, 1, 4, 1, 485, 5, 2, 4, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("signal-off", 1), ("signal-on", 2), ("follow-carrier", 3), ("follow-test", 4), ("follow-rts", 5), ("follow-carrier-rts", 6), ("follow-sync-rts", 7), ("follow-lmi-carr-rts", 8)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tfrapCfgDteDcdOutput.setStatus('mandatory')
tfrapCfgDteDsrOutput = MibScalar((1, 3, 6, 1, 4, 1, 485, 5, 2, 4, 19), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("signal-off", 1), ("signal-on", 2), ("follow-carrier", 3), ("follow-test", 4), ("follow-rts", 5), ("follow-carrier-rts", 6), ("follow-sync-rts", 7), ("follow-lmi-carr-rts", 8)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tfrapCfgDteDsrOutput.setStatus('mandatory')
tfrapCfgDteCtsOutput = MibScalar((1, 3, 6, 1, 4, 1, 485, 5, 2, 4, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("signal-off", 1), ("signal-on", 2), ("follow-carrier", 3), ("follow-test", 4), ("follow-rts", 5), ("follow-carrier-rts", 6), ("follow-sync-rts", 7), ("follow-lmi-carr-rts", 8)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tfrapCfgDteCtsOutput.setStatus('mandatory')
tfrapCfgFrTable = MibIdentifier((1, 3, 6, 1, 4, 1, 485, 5, 2, 5))
tfrapCfgFrAddrLen = MibScalar((1, 3, 6, 1, 4, 1, 485, 5, 2, 5, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("twobytes", 1), ("threebytes", 2), ("fourbytes", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tfrapCfgFrAddrLen.setStatus('mandatory')
tfrapCfgFrCrcMode = MibScalar((1, 3, 6, 1, 4, 1, 485, 5, 2, 5, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("discard", 1), ("passthru", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tfrapCfgFrCrcMode.setStatus('mandatory')
tfrapCfgFrLmiType = MibScalar((1, 3, 6, 1, 4, 1, 485, 5, 2, 5, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("annexd", 1), ("annexa", 2), ("type1", 3), ("autosense", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tfrapCfgFrLmiType.setStatus('mandatory')
tfrapCfgFrLmiInactivityTimeout = MibScalar((1, 3, 6, 1, 4, 1, 485, 5, 2, 5, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tfrapCfgFrLmiInactivityTimeout.setStatus('mandatory')
tfrapCfgFrLmiKeepaliveTimeout = MibScalar((1, 3, 6, 1, 4, 1, 485, 5, 2, 5, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(2, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tfrapCfgFrLmiKeepaliveTimeout.setStatus('mandatory')
tfrapCfgFrAddrResMode = MibScalar((1, 3, 6, 1, 4, 1, 485, 5, 2, 5, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("inactive", 1), ("arp", 2), ("inarp", 3), ("both", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tfrapCfgFrAddrResMode.setStatus('mandatory')
tfrapCfgFrAddrResDlcis = MibScalar((1, 3, 6, 1, 4, 1, 485, 5, 2, 5, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("single", 1), ("multiple", 2), ("t1multi", 3), ("dtemulti", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tfrapCfgFrAddrResDlcis.setStatus('mandatory')
tfrapCfgFrAddrResInarpTimer = MibScalar((1, 3, 6, 1, 4, 1, 485, 5, 2, 5, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(5, 86400))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tfrapCfgFrAddrResInarpTimer.setStatus('mandatory')
tfrapCfgFrLmiFullStatus = MibScalar((1, 3, 6, 1, 4, 1, 485, 5, 2, 5, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 3600))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tfrapCfgFrLmiFullStatus.setStatus('mandatory')
tfrapCfgVnipTable = MibIdentifier((1, 3, 6, 1, 4, 1, 485, 5, 2, 6))
tfrapCfgVnipMode = MibScalar((1, 3, 6, 1, 4, 1, 485, 5, 2, 6, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("inactive", 1), ("dte", 2), ("t1", 3), ("both", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tfrapCfgVnipMode.setStatus('mandatory')
tfrapCfgVnipInitTimer = MibScalar((1, 3, 6, 1, 4, 1, 485, 5, 2, 6, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(5, 86400))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tfrapCfgVnipInitTimer.setStatus('mandatory')
tfrapCfgVnipKeepAliveTimer = MibScalar((1, 3, 6, 1, 4, 1, 485, 5, 2, 6, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(5, 86400))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tfrapCfgVnipKeepAliveTimer.setStatus('mandatory')
tfrapCfgVnipInactivityTimer = MibScalar((1, 3, 6, 1, 4, 1, 485, 5, 2, 6, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(5, 86400))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tfrapCfgVnipInactivityTimer.setStatus('mandatory')
tfrapCfgVnipTransitDelayFrequency = MibScalar((1, 3, 6, 1, 4, 1, 485, 5, 2, 6, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(15, 86400))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tfrapCfgVnipTransitDelayFrequency.setStatus('mandatory')
tfrapCfgTransitDelayTable = MibTable((1, 3, 6, 1, 4, 1, 485, 5, 2, 6, 20), )
if mibBuilder.loadTexts: tfrapCfgTransitDelayTable.setStatus('mandatory')
tfrapCfgTransitDelayEntry = MibTableRow((1, 3, 6, 1, 4, 1, 485, 5, 2, 6, 20, 1), ).setIndexNames((0, "TFRAP-MIB", "tfrapCfgTransitDelayInterface"), (0, "TFRAP-MIB", "tfrapCfgTransitDelayDlciValue"))
if mibBuilder.loadTexts: tfrapCfgTransitDelayEntry.setStatus('mandatory')
tfrapCfgTransitDelayInterface = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 5, 2, 6, 20, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("dte-interface", 1), ("t1-interface", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tfrapCfgTransitDelayInterface.setStatus('mandatory')
tfrapCfgTransitDelayDlciValue = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 5, 2, 6, 20, 1, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tfrapCfgTransitDelayDlciValue.setStatus('mandatory')
tfrapCfgTransitDelayNumHops = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 5, 2, 6, 20, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tfrapCfgTransitDelayNumHops.setStatus('mandatory')
tfrapCfgTransitDelayRcvSummaryCancel = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 5, 2, 6, 20, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable-rsc", 1), ("disable-rsc", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tfrapCfgTransitDelayRcvSummaryCancel.setStatus('mandatory')
tfrapCfgTransitDelayThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 5, 2, 6, 20, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 86400000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tfrapCfgTransitDelayThreshold.setStatus('mandatory')
tfrapCfgTDDeleteTable = MibTable((1, 3, 6, 1, 4, 1, 485, 5, 2, 6, 21), )
if mibBuilder.loadTexts: tfrapCfgTDDeleteTable.setStatus('mandatory')
tfrapCfgTDDeleteEntry = MibTableRow((1, 3, 6, 1, 4, 1, 485, 5, 2, 6, 21, 1), ).setIndexNames((0, "TFRAP-MIB", "tfrapCfgTDDeleteInterface"))
if mibBuilder.loadTexts: tfrapCfgTDDeleteEntry.setStatus('mandatory')
tfrapCfgTDDeleteInterface = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 5, 2, 6, 21, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("dte-interface", 1), ("t1-interface", 2))))
if mibBuilder.loadTexts: tfrapCfgTDDeleteInterface.setStatus('mandatory')
tfrapCfgTDDeleteDlciValue = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 5, 2, 6, 21, 1, 2), Integer32()).setMaxAccess("writeonly")
if mibBuilder.loadTexts: tfrapCfgTDDeleteDlciValue.setStatus('mandatory')
tfrapCfgTransitDelayTableClear = MibScalar((1, 3, 6, 1, 4, 1, 485, 5, 2, 6, 22), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("clear-table", 1)))).setMaxAccess("writeonly")
if mibBuilder.loadTexts: tfrapCfgTransitDelayTableClear.setStatus('mandatory')
tfrapCfgFrPerf = MibIdentifier((1, 3, 6, 1, 4, 1, 485, 5, 2, 7))
tfrapCfgFrPerfDlciNamesTable = MibTable((1, 3, 6, 1, 4, 1, 485, 5, 2, 7, 1), )
if mibBuilder.loadTexts: tfrapCfgFrPerfDlciNamesTable.setStatus('mandatory')
tfrapCfgFrPerfDlciNamesEntry = MibTableRow((1, 3, 6, 1, 4, 1, 485, 5, 2, 7, 1, 1), ).setIndexNames((0, "TFRAP-MIB", "tfrapCfgFrPerfDlciNamesDlciValue"))
if mibBuilder.loadTexts: tfrapCfgFrPerfDlciNamesEntry.setStatus('mandatory')
tfrapCfgFrPerfDlciNamesDlciValue = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 5, 2, 7, 1, 1, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tfrapCfgFrPerfDlciNamesDlciValue.setStatus('mandatory')
tfrapCfgFrPerfDlciNamesDlciName = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 5, 2, 7, 1, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 15))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tfrapCfgFrPerfDlciNamesDlciName.setStatus('mandatory')
tfrapCfgFrPerfDlciNamesCirValue = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 5, 2, 7, 1, 1, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tfrapCfgFrPerfDlciNamesCirValue.setStatus('mandatory')
tfrapCfgFrPerfDlciNamesCirType = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 5, 2, 7, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("cir-acquired-from-lmi", 1), ("cir-configured-by-user", 2), ("cir-is-datarate", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tfrapCfgFrPerfDlciNamesCirType.setStatus('mandatory')
tfrapCfgFrPerfDlciNamesUtilThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 5, 2, 7, 1, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tfrapCfgFrPerfDlciNamesUtilThreshold.setStatus('mandatory')
tfrapCfgFrPerfDlciNamesEirValue = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 5, 2, 7, 1, 1, 6), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tfrapCfgFrPerfDlciNamesEirValue.setStatus('mandatory')
tfrapCfgFrPerfDlciNamesDelete = MibScalar((1, 3, 6, 1, 4, 1, 485, 5, 2, 7, 2), Integer32()).setMaxAccess("writeonly")
if mibBuilder.loadTexts: tfrapCfgFrPerfDlciNamesDelete.setStatus('mandatory')
tfrapCfgFrPerfTimers = MibIdentifier((1, 3, 6, 1, 4, 1, 485, 5, 2, 7, 3))
tfrapCfgFrPerfTimersSTInterval = MibScalar((1, 3, 6, 1, 4, 1, 485, 5, 2, 7, 3, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(3, 60))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tfrapCfgFrPerfTimersSTInterval.setStatus('mandatory')
tfrapCfgFrPerfTimersLTInterval = MibScalar((1, 3, 6, 1, 4, 1, 485, 5, 2, 7, 3, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(4, 3600))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tfrapCfgFrPerfTimersLTInterval.setStatus('mandatory')
tfrapCfgFrPerfUserProtocolsTable = MibTable((1, 3, 6, 1, 4, 1, 485, 5, 2, 7, 4), )
if mibBuilder.loadTexts: tfrapCfgFrPerfUserProtocolsTable.setStatus('mandatory')
tfrapCfgFrPerfUserProtocolsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 485, 5, 2, 7, 4, 1), ).setIndexNames((0, "TFRAP-MIB", "tfrapCfgFrPerfUserProtocolsIndex"))
if mibBuilder.loadTexts: tfrapCfgFrPerfUserProtocolsEntry.setStatus('mandatory')
tfrapCfgFrPerfUserProtocolsIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 5, 2, 7, 4, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tfrapCfgFrPerfUserProtocolsIndex.setStatus('mandatory')
tfrapCfgFrPerfUserProtocolsPortNum = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 5, 2, 7, 4, 1, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tfrapCfgFrPerfUserProtocolsPortNum.setStatus('mandatory')
tfrapCfgFrPerfLTDlciFilterTable = MibTable((1, 3, 6, 1, 4, 1, 485, 5, 2, 7, 5), )
if mibBuilder.loadTexts: tfrapCfgFrPerfLTDlciFilterTable.setStatus('mandatory')
tfrapCfgFrPerfLTDlciFilterEntry = MibTableRow((1, 3, 6, 1, 4, 1, 485, 5, 2, 7, 5, 1), ).setIndexNames((0, "TFRAP-MIB", "tfrapCfgFrPerfLTDlciFilterIndex"))
if mibBuilder.loadTexts: tfrapCfgFrPerfLTDlciFilterEntry.setStatus('mandatory')
tfrapCfgFrPerfLTDlciFilterIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 5, 2, 7, 5, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tfrapCfgFrPerfLTDlciFilterIndex.setStatus('mandatory')
tfrapCfgFrPerfLTDlciFilterDlciNum = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 5, 2, 7, 5, 1, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tfrapCfgFrPerfLTDlciFilterDlciNum.setStatus('mandatory')
tfrapCfgFrPerfLTProtocolFilterTable = MibTable((1, 3, 6, 1, 4, 1, 485, 5, 2, 7, 6), )
if mibBuilder.loadTexts: tfrapCfgFrPerfLTProtocolFilterTable.setStatus('mandatory')
tfrapCfgFrPerfLTProtocolFilterEntry = MibTableRow((1, 3, 6, 1, 4, 1, 485, 5, 2, 7, 6, 1), ).setIndexNames((0, "TFRAP-MIB", "tfrapCfgFrPerfLTProtocolFilterIndex"))
if mibBuilder.loadTexts: tfrapCfgFrPerfLTProtocolFilterEntry.setStatus('mandatory')
tfrapCfgFrPerfLTProtocolFilterIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 5, 2, 7, 6, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tfrapCfgFrPerfLTProtocolFilterIndex.setStatus('mandatory')
tfrapCfgFrPerfLTProtocolFilterProtocol = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 5, 2, 7, 6, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 13, 14, 15, 16, 21, 22, 29, 30, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, -1))).clone(namedValues=NamedValues(("ip-tx-bc", 1), ("ip-rx-bc", 2), ("tcp-ip-tx-bc", 3), ("tcp-ip-rx-bc", 4), ("ftp-tcp-ip-tx-bc", 5), ("ftp-tcp-ip-rx-bc", 6), ("telnet-tcp-ip-tx-bc", 7), ("telnet-tcp-ip-rx-bc", 8), ("smtp-tcp-ip-tx-bc", 9), ("smtp-tcp-ip-rx-bc", 10), ("http-tcp-ip-tx-bc", 13), ("http-tcp-ip-rx-bc", 14), ("netbios-ssn-tcp-ip-tx-bc", 15), ("netbios-ssn-tcp-ip-rx-bc", 16), ("udp-ip-tx-bc", 21), ("udp-ip-rx-bc", 22), ("tftp-udp-ip-tx-bc", 29), ("tftp-udp-ip-rx-bc", 30), ("netbios-dgm-udp-ip-tx-bc", 33), ("netbios-dgm-udp-ip-rx-bc", 34), ("snmp-udp-ip-tx-bc", 35), ("snmp-udp-ip-rx-bc", 36), ("snmptrap-udp-ip-tx-bc", 37), ("snmptrap-udp-ip-rx-bc", 38), ("rip-udp-ip-tx-bc", 39), ("rip-udp-ip-rx-bc", 40), ("icmp-ip-tx-bc", 41), ("icmp-ip-rx-bc", 42), ("echorep-icmp-ip-tx-bc", 43), ("echorep-icmp-ip-rx-bc", 44), ("dest-unr-icmp-ip-tx-bc", 45), ("dest-unr-icmp-ip-rx-bc", 46), ("src-quench-icmp-ip-tx-bc", 47), ("src-quench-icmp-ip-rx-bc", 48), ("redirect-icmp-ip-tx-bc", 49), ("redirect-icmp-ip-rx-bc", 50), ("echoreq-icmp-ip-tx-bc", 51), ("echoreq-icmp-ip-rx-bc", 52), ("time-excd-icmp-ip-tx-bc", 53), ("time-excd-icmp-ip-rx-bc", 54), ("param-prob-icmp-ip-tx-bc", 55), ("param-prob-icmp-ip-rx-bc", 56), ("timestamp-req-icmp-ip-tx-bc", 57), ("timestamp-req-icmp-ip-rx-bc", 58), ("timestamp-rep-icmp-ip-tx-bc", 59), ("timestamp-rep-icmp-ip-rx-bc", 60), ("addr-mask-req-icmp-ip-tx-bc", 61), ("addr-mask-req-icmp-ip-rx-bc", 62), ("addr-mask-rep-icmp-ip-tx-bc", 63), ("addr-mask-rep-icmp-ip-rx-bc", 64), ("pkt-too-big-icmp-ip-tx-bc", 65), ("pkt-too-big-icmp-ip-rx-bc", 66), ("gp-mem-query-icmp-ip-tx-bc", 67), ("gp-mem-query-icmp-ip-rx-bc", 68), ("gp-mem-report-icmp-ip-tx-bc", 69), ("gp-mem-report-icmp-ip-rx-bc", 70), ("gp-mem-reduct-icmp-ip-tx-bc", 71), ("gp-mem-reduct-icmp-ip-rx-bc", 72), ("ospf-ip-tx-bc", 73), ("ospf-ip-rx-bc", 74), ("other-ip-tx-bc", 75), ("other-ip-rx-bc", 76), ("ipx-tx-bc", 77), ("ipx-rx-bc", 78), ("spx-ipx-tx-bc", 79), ("spx-ipx-rx-bc", 80), ("ncp-ipx-tx-bc", 81), ("ncp-ipx-rx-bc", 82), ("sap-ipx-tx-bc", 83), ("sap-ipx-rx-bc", 84), ("rip-ipx-tx-bc", 85), ("rip-ipx-rx-bc", 86), ("netbios-ipx-tx-bc", 87), ("netbios-ipx-rx-bc", 88), ("other-ipx-tx-bc", 89), ("other-ipx-rx-bc", 90), ("arp-tx-bc", 91), ("arp-rx-bc", 92), ("arp-req-tx-bc", 93), ("arp-req-rx-bc", 94), ("arp-rep-tx-bc", 95), ("arp-rep-rx-bc", 96), ("rarp-req-tx-bc", 97), ("rarp-req-rx-bc", 98), ("rarp-rep-tx-bc", 99), ("rarp-rep-rx-bc", 100), ("inarp-req-tx-bc", 101), ("inarp-req-rx-bc", 102), ("inarp-rep-tx-bc", 103), ("inarp-rep-rx-bc", 104), ("sna-tx-bc", 105), ("sna-rx-bc", 106), ("sna-subarea-tx-bc", 107), ("sna-subarea-rx-bc", 108), ("sna-periph-tx-bc", 109), ("sna-periph-rx-bc", 110), ("sna-appn-tx-bc", 111), ("sna-appn-rx-bc", 112), ("sna-netbios-tx-bc", 113), ("sna-netbios-rx-bc", 114), ("cisco-tx-bc", 115), ("cisco-rx-bc", 116), ("other-tx-bc", 117), ("other-rx-bc", 118), ("user-defined-1-tx-bc", 119), ("user-defined-1-rx-bc", 120), ("user-defined-2-tx-bc", 121), ("user-defined-2-rx-bc", 122), ("user-defined-3-tx-bc", 123), ("user-defined-3-rx-bc", 124), ("user-defined-4-tx-bc", 125), ("user-defined-4-rx-bc", 126), ("thru-byte-tx-bc", 127), ("thru-byte-rx-bc", 128), ("thru-frame-tx-bc", 129), ("thru-frame-rx-bc", 130), ("thru-fecn-tx-bc", 131), ("thru-fecn-rx-bc", 132), ("thru-becn-tx-bc", 133), ("thru-becn-rx-bc", 134), ("thru-de-tx-bc", 135), ("thru-de-rx-bc", 136), ("cir-percent-range1-tx-bc", 137), ("cir-percent-range1-rx-bc", 138), ("cir-percent-range2-tx-bc", 139), ("cir-percent-range2-rx-bc", 140), ("cir-percent-range3-tx-bc", 141), ("cir-percent-range3-rx-bc", 142), ("cir-percent-range4-tx-bc", 143), ("cir-percent-range4-rx-bc", 144), ("cir-percent-range5-tx-bc", 145), ("cir-percent-range5-rx-bc", 146), ("cir-percent-range6-tx-bc", 147), ("cir-percent-range6-rx-bc", 148), ("cir-percent-range7-tx-bc", 149), ("cir-percent-range7-rx-bc", 150), ("cir-percent-range8-tx-bc", 151), ("cir-percent-range8-rx-bc", 152), ("lmi-tx-bc", 153), ("lmi-rx-bc", 154), ("lmi-livo-enq-tx-bc", 155), ("lmi-livo-enq-rx-bc", 156), ("lmi-livo-stat-tx-bc", 157), ("lmi-livo-stat-rx-bc", 158), ("lmi-full-enq-tx-bc", 159), ("lmi-full-enq-rx-bc", 160), ("lmi-full-stat-tx-bc", 161), ("lmi-full-stat-rx-bc", 162), ("lmi-other-tx-bc", 163), ("lmi-other-rx-bc", 164), ("total-uptime", 165), ("total-downtime", 166), ("igrp-tx-bc", 167), ("igrp-rx-bc", 168), ("vnip-tx-bc", 169), ("vnip-rx-bc", 170), ("annex-g-tx-bc", 171), ("annex-g-rx-bc", 172), ("delete-entry", -1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tfrapCfgFrPerfLTProtocolFilterProtocol.setStatus('mandatory')
tfrapCfgFrPerfDlciDefaultUtilThreshold = MibScalar((1, 3, 6, 1, 4, 1, 485, 5, 2, 7, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tfrapCfgFrPerfDlciDefaultUtilThreshold.setStatus('mandatory')
tfrapCfgFrPerfDlciUtilDuration = MibScalar((1, 3, 6, 1, 4, 1, 485, 5, 2, 7, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tfrapCfgFrPerfDlciUtilDuration.setStatus('mandatory')
tfrapCfgFrPerfDlciNamesTableClear = MibScalar((1, 3, 6, 1, 4, 1, 485, 5, 2, 7, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("clear-table", 1), ("clear-table-keep-stats", 2)))).setMaxAccess("writeonly")
if mibBuilder.loadTexts: tfrapCfgFrPerfDlciNamesTableClear.setStatus('mandatory')
tfrapCfgFrPerfUserProtocolsTableClear = MibScalar((1, 3, 6, 1, 4, 1, 485, 5, 2, 7, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("clear-table", 1)))).setMaxAccess("writeonly")
if mibBuilder.loadTexts: tfrapCfgFrPerfUserProtocolsTableClear.setStatus('mandatory')
tfrapCfgFrPerfLTDlciFilterTableClear = MibScalar((1, 3, 6, 1, 4, 1, 485, 5, 2, 7, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("clear-table", 1)))).setMaxAccess("writeonly")
if mibBuilder.loadTexts: tfrapCfgFrPerfLTDlciFilterTableClear.setStatus('mandatory')
tfrapCfgFrPerfLTProtocolFilterTableClear = MibScalar((1, 3, 6, 1, 4, 1, 485, 5, 2, 7, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("clear-table", 1)))).setMaxAccess("writeonly")
if mibBuilder.loadTexts: tfrapCfgFrPerfLTProtocolFilterTableClear.setStatus('mandatory')
tfrapCfgFrPerfUnprovDlcisDelete = MibScalar((1, 3, 6, 1, 4, 1, 485, 5, 2, 7, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("delete-unprov", 1)))).setMaxAccess("writeonly")
if mibBuilder.loadTexts: tfrapCfgFrPerfUnprovDlcisDelete.setStatus('mandatory')
tfrapCfgSecurityTable = MibIdentifier((1, 3, 6, 1, 4, 1, 485, 5, 2, 8))
tfrapCfgTelnetCliLcdPassword = MibScalar((1, 3, 6, 1, 4, 1, 485, 5, 2, 8, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 8))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tfrapCfgTelnetCliLcdPassword.setStatus('mandatory')
tfrapCfgTftpPassword = MibScalar((1, 3, 6, 1, 4, 1, 485, 5, 2, 8, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 8))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tfrapCfgTftpPassword.setStatus('mandatory')
tfrapCfgCliPassword = MibScalar((1, 3, 6, 1, 4, 1, 485, 5, 2, 8, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 8))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tfrapCfgCliPassword.setStatus('mandatory')
tfrapCfgLcdPassword = MibScalar((1, 3, 6, 1, 4, 1, 485, 5, 2, 8, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 8))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tfrapCfgLcdPassword.setStatus('mandatory')
tfrapCfgGetCommunityString = MibScalar((1, 3, 6, 1, 4, 1, 485, 5, 2, 8, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 15))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tfrapCfgGetCommunityString.setStatus('mandatory')
tfrapCfgSetCommunityString = MibScalar((1, 3, 6, 1, 4, 1, 485, 5, 2, 8, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 15))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tfrapCfgSetCommunityString.setStatus('mandatory')
tfrapCfgLcdPswdEnable = MibScalar((1, 3, 6, 1, 4, 1, 485, 5, 2, 8, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable-lcd-pswd", 1), ("disable-lcd-pswd", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tfrapCfgLcdPswdEnable.setStatus('mandatory')
tfrapCfgLcdPswdTimeout = MibScalar((1, 3, 6, 1, 4, 1, 485, 5, 2, 8, 8), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tfrapCfgLcdPswdTimeout.setStatus('mandatory')
tfrapCfgLock = MibScalar((1, 3, 6, 1, 4, 1, 485, 5, 2, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 600))).setMaxAccess("writeonly")
if mibBuilder.loadTexts: tfrapCfgLock.setStatus('mandatory')
tfrapCfgLockID = MibScalar((1, 3, 6, 1, 4, 1, 485, 5, 2, 13), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tfrapCfgLockID.setStatus('mandatory')
tfrapCfgID = MibScalar((1, 3, 6, 1, 4, 1, 485, 5, 2, 14), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 8))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tfrapCfgID.setStatus('mandatory')
tfrapCfgStatus = MibScalar((1, 3, 6, 1, 4, 1, 485, 5, 2, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("in-progress", 1), ("success", 2), ("datarate-density-conflict", 3), ("bandwidth-allocation-error", 4), ("general-error", 5), ("timeout", 6), ("aborted-by-user", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tfrapCfgStatus.setStatus('mandatory')
tfrapCfgUnlock = MibScalar((1, 3, 6, 1, 4, 1, 485, 5, 2, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("un-lock", 1)))).setMaxAccess("writeonly")
if mibBuilder.loadTexts: tfrapCfgUnlock.setStatus('mandatory')
tfrapCfgUpdate = MibScalar((1, 3, 6, 1, 4, 1, 485, 5, 2, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("update", 1)))).setMaxAccess("writeonly")
if mibBuilder.loadTexts: tfrapCfgUpdate.setStatus('mandatory')
tfrapDiagnostics = MibIdentifier((1, 3, 6, 1, 4, 1, 485, 5, 3))
tfrapDiagUnitTable = MibIdentifier((1, 3, 6, 1, 4, 1, 485, 5, 3, 1))
tfrapDiagUnitLocLoop = MibScalar((1, 3, 6, 1, 4, 1, 485, 5, 3, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable-loopback-mode", 1), ("disable-loopback-mode", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tfrapDiagUnitLocLoop.setStatus('mandatory')
tfrapDiagUnitReset = MibScalar((1, 3, 6, 1, 4, 1, 485, 5, 3, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("reset-unit", 1)))).setMaxAccess("writeonly")
if mibBuilder.loadTexts: tfrapDiagUnitReset.setStatus('mandatory')
tfrapDiagUnitTimeRemaining = MibScalar((1, 3, 6, 1, 4, 1, 485, 5, 3, 1, 3), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tfrapDiagUnitTimeRemaining.setStatus('mandatory')
tfrapDiagT1Table = MibIdentifier((1, 3, 6, 1, 4, 1, 485, 5, 3, 2))
tfrapDiagT1LocLineLpbk = MibScalar((1, 3, 6, 1, 4, 1, 485, 5, 3, 2, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("line-lpbk-disable", 1), ("line-lpbk-enable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tfrapDiagT1LocLineLpbk.setStatus('mandatory')
tfrapDiagT1LocPylLpbk = MibScalar((1, 3, 6, 1, 4, 1, 485, 5, 3, 2, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("pyl-lpbk-disable", 1), ("pyl-lpbk-enable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tfrapDiagT1LocPylLpbk.setStatus('mandatory')
tfrapDiagT1LocAggrLpbk = MibScalar((1, 3, 6, 1, 4, 1, 485, 5, 3, 2, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("aggr-lpbk-disable", 1), ("aggr-lpbk-enable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tfrapDiagT1LocAggrLpbk.setStatus('mandatory')
tfrapDiagT1RmtLpbkStatus = MibScalar((1, 3, 6, 1, 4, 1, 485, 5, 3, 2, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("no-remote-lpbks", 1), ("csu-lpbk-from-remote", 2), ("dsu-lpbk-from-remote", 3), ("pyl-lpbk-from-remote", 4), ("csu-lpbk-sent-to-remote", 5), ("dsu-lpbk-sent-to-remote", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tfrapDiagT1RmtLpbkStatus.setStatus('mandatory')
tfrapDiagT1RmtLpbkCmd = MibScalar((1, 3, 6, 1, 4, 1, 485, 5, 3, 2, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("rmt-csu-lpbk-loopup", 1), ("rmt-csu-lpbk-loopdown", 2), ("rmt-dsu-lpbk-loopup", 3), ("rmt-dsu-lpbk-loopdown", 4)))).setMaxAccess("writeonly")
if mibBuilder.loadTexts: tfrapDiagT1RmtLpbkCmd.setStatus('mandatory')
tfrapDiagT1TimeRemaining = MibScalar((1, 3, 6, 1, 4, 1, 485, 5, 3, 2, 6), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tfrapDiagT1TimeRemaining.setStatus('mandatory')
tfrapDiagDteTable = MibIdentifier((1, 3, 6, 1, 4, 1, 485, 5, 3, 3))
tfrapDiagDteSigRTS = MibScalar((1, 3, 6, 1, 4, 1, 485, 5, 3, 3, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("rts-signal-on", 1), ("rts-signal-off", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tfrapDiagDteSigRTS.setStatus('mandatory')
tfrapDiagDteSigDTR = MibScalar((1, 3, 6, 1, 4, 1, 485, 5, 3, 3, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("dtr-signal-on", 1), ("dtr-signal-off", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tfrapDiagDteSigDTR.setStatus('mandatory')
tfrapDiagDteLclLpbk = MibScalar((1, 3, 6, 1, 4, 1, 485, 5, 3, 3, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable-loopback-mode", 1), ("disable-loopback-mode", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tfrapDiagDteLclLpbk.setStatus('mandatory')
tfrapDiagDteV54Lpbk = MibScalar((1, 3, 6, 1, 4, 1, 485, 5, 3, 3, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("loopback-enable", 1), ("loopback-disable", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tfrapDiagDteV54Lpbk.setStatus('mandatory')
tfrapDiagDteRmtV54Lpbk = MibScalar((1, 3, 6, 1, 4, 1, 485, 5, 3, 3, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(3, 4))).clone(namedValues=NamedValues(("transmit-code-enable", 3), ("transmit-code-disable", 4)))).setMaxAccess("writeonly")
if mibBuilder.loadTexts: tfrapDiagDteRmtV54Lpbk.setStatus('mandatory')
tfrapDiagDteBerState = MibScalar((1, 3, 6, 1, 4, 1, 485, 5, 3, 3, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("start-bert-test-t1", 1), ("start-bert-test-dte", 2), ("stop-bert-test", 3), ("inject-error-bert-test", 4), ("clear-error-bert-test", 5)))).setMaxAccess("writeonly")
if mibBuilder.loadTexts: tfrapDiagDteBerState.setStatus('mandatory')
tfrapDiagDteBerStatus = MibScalar((1, 3, 6, 1, 4, 1, 485, 5, 3, 3, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("bert-off", 1), ("bert-out-of-sync", 2), ("bert-in-sync", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tfrapDiagDteBerStatus.setStatus('mandatory')
tfrapDiagDteBerErrors = MibScalar((1, 3, 6, 1, 4, 1, 485, 5, 3, 3, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tfrapDiagDteBerErrors.setStatus('mandatory')
tfrapDiagDteBerErrSec = MibScalar((1, 3, 6, 1, 4, 1, 485, 5, 3, 3, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tfrapDiagDteBerErrSec.setStatus('mandatory')
tfrapDiagDteBerTimeElaps = MibScalar((1, 3, 6, 1, 4, 1, 485, 5, 3, 3, 10), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tfrapDiagDteBerTimeElaps.setStatus('mandatory')
tfrapDiagDteBerResyncs = MibScalar((1, 3, 6, 1, 4, 1, 485, 5, 3, 3, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tfrapDiagDteBerResyncs.setStatus('mandatory')
tfrapDiagDteBerPattern = MibScalar((1, 3, 6, 1, 4, 1, 485, 5, 3, 3, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("five11-pattern", 1), ("qrss", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tfrapDiagDteBerPattern.setStatus('mandatory')
tfrapDiagDteTimeRemaining = MibScalar((1, 3, 6, 1, 4, 1, 485, 5, 3, 3, 13), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tfrapDiagDteTimeRemaining.setStatus('mandatory')
tfrapDiagVnipTable = MibTable((1, 3, 6, 1, 4, 1, 485, 5, 3, 6), )
if mibBuilder.loadTexts: tfrapDiagVnipTable.setStatus('mandatory')
tfrapDiagVnipEntry = MibTableRow((1, 3, 6, 1, 4, 1, 485, 5, 3, 6, 1), ).setIndexNames((0, "TFRAP-MIB", "tfrapDiagVnipInterface"), (0, "TFRAP-MIB", "tfrapDiagVnipIndex"))
if mibBuilder.loadTexts: tfrapDiagVnipEntry.setStatus('mandatory')
tfrapDiagVnipInterface = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 5, 3, 6, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("dte-interface", 1), ("t1-interface", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tfrapDiagVnipInterface.setStatus('mandatory')
tfrapDiagVnipIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 5, 3, 6, 1, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tfrapDiagVnipIndex.setStatus('mandatory')
tfrapDiagVnipDlci = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 5, 3, 6, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tfrapDiagVnipDlci.setStatus('mandatory')
tfrapDiagVnipIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 5, 3, 6, 1, 4), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tfrapDiagVnipIpAddr.setStatus('mandatory')
tfrapDiagVLOOP = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 5, 3, 6, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("start-test", 1), ("stop-test", 2)))).setMaxAccess("writeonly")
if mibBuilder.loadTexts: tfrapDiagVLOOP.setStatus('mandatory')
tfrapDiagVBERT = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 5, 3, 6, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("start", 1), ("stop", 2)))).setMaxAccess("writeonly")
if mibBuilder.loadTexts: tfrapDiagVBERT.setStatus('mandatory')
tfrapDiagVBERTRate = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 5, 3, 6, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(8000, 2048000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tfrapDiagVBERTRate.setStatus('mandatory')
tfrapDiagVBERTSize = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 5, 3, 6, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(64, 128, 256, 512, 1024, 2048))).clone(namedValues=NamedValues(("pkt-size-64", 64), ("pkt-size-128", 128), ("pkt-size-256", 256), ("pkt-size-512", 512), ("pkt-size-1024", 1024), ("pkt-size-2048", 2048)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tfrapDiagVBERTSize.setStatus('mandatory')
tfrapDiagVBERTPktPercent = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 5, 3, 6, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 25, 50, 75, 100))).clone(namedValues=NamedValues(("zero-percent", 0), ("twentyFive-percent", 25), ("fifty-percent", 50), ("seventyFive-percent", 75), ("oneHundred-percent", 100)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tfrapDiagVBERTPktPercent.setStatus('mandatory')
tfrapDiagVBERTTestPeriod = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 5, 3, 6, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(10, 1440))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tfrapDiagVBERTTestPeriod.setStatus('mandatory')
tfrapStatus = MibIdentifier((1, 3, 6, 1, 4, 1, 485, 5, 4))
tfrapStatusIntfTable = MibIdentifier((1, 3, 6, 1, 4, 1, 485, 5, 4, 1))
tfrapIntfDteMode = MibScalar((1, 3, 6, 1, 4, 1, 485, 5, 4, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("no-connections", 1), ("active", 2), ("test", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tfrapIntfDteMode.setStatus('mandatory')
tfrapIntfDteRts = MibScalar((1, 3, 6, 1, 4, 1, 485, 5, 4, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("on", 1), ("off", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tfrapIntfDteRts.setStatus('mandatory')
tfrapIntfDteDtr = MibScalar((1, 3, 6, 1, 4, 1, 485, 5, 4, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("on", 1), ("off", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tfrapIntfDteDtr.setStatus('mandatory')
tfrapIntfT1Mode = MibScalar((1, 3, 6, 1, 4, 1, 485, 5, 4, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("no-connections", 1), ("active", 2), ("test", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tfrapIntfT1Mode.setStatus('mandatory')
tfrapIntfT1Status = MibScalar((1, 3, 6, 1, 4, 1, 485, 5, 4, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("t1-frame-sync-okay", 1), ("t1-frame-sync-with-errors", 2), ("signal-present-without-frame-sync", 3), ("signal-not-present", 4), ("not-applicable", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tfrapIntfT1Status.setStatus('mandatory')
tfrapIntfT1Alarms = MibScalar((1, 3, 6, 1, 4, 1, 485, 5, 4, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("no-alarms", 1), ("red-alarm-declared", 2), ("yellow-alarm-detected", 3), ("unframed-all-ones-detected", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tfrapIntfT1Alarms.setStatus('mandatory')
tfrapIntfDteDcd = MibScalar((1, 3, 6, 1, 4, 1, 485, 5, 4, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("on", 1), ("off", 2), ("na", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tfrapIntfDteDcd.setStatus('mandatory')
tfrapIntfDteDsr = MibScalar((1, 3, 6, 1, 4, 1, 485, 5, 4, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("on", 1), ("off", 2), ("na", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tfrapIntfDteDsr.setStatus('mandatory')
tfrapIntfDteCts = MibScalar((1, 3, 6, 1, 4, 1, 485, 5, 4, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("on", 1), ("off", 2), ("na", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tfrapIntfDteCts.setStatus('mandatory')
tfrapStatusLedTable = MibIdentifier((1, 3, 6, 1, 4, 1, 485, 5, 4, 4))
tfrapStatusDteModeLED = MibScalar((1, 3, 6, 1, 4, 1, 485, 5, 4, 4, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("offLED-DTE-inactive", 1), ("greenLED-normal", 2), ("yellowLED-test-mode", 3), ("redLED-no-active-WAN-connection", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tfrapStatusDteModeLED.setStatus('mandatory')
tfrapStatusDteStatusLED = MibScalar((1, 3, 6, 1, 4, 1, 485, 5, 4, 4, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("offLED-inactive", 1), ("greenLED-active", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tfrapStatusDteStatusLED.setStatus('mandatory')
tfrapStatusDteTxLED = MibScalar((1, 3, 6, 1, 4, 1, 485, 5, 4, 4, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("offLED-inactive", 1), ("greenLED-tx-data-transmitting", 2), ("yellowLED-disabled", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tfrapStatusDteTxLED.setStatus('mandatory')
tfrapStatusDteRxLED = MibScalar((1, 3, 6, 1, 4, 1, 485, 5, 4, 4, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("offLED-inactive", 1), ("greenLED-rx-data-receiving", 2), ("yellowLED-disabled", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tfrapStatusDteRxLED.setStatus('mandatory')
tfrapStatusT1ModeLED = MibScalar((1, 3, 6, 1, 4, 1, 485, 5, 4, 4, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3))).clone(namedValues=NamedValues(("greenLED-normal", 2), ("yellowLED-test-mode", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tfrapStatusT1ModeLED.setStatus('mandatory')
tfrapStatusT1StatusLED = MibScalar((1, 3, 6, 1, 4, 1, 485, 5, 4, 4, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("offLED-T1-no-signal", 1), ("greenLED-normal", 2), ("yellowLED-remote-alarm", 3), ("redLED-red-alarm", 4), ("blinking-redLED-no-carrier-red-alarm", 5), ("blinking-red-greenLED-transient-error", 6), ("blinking-red-yellowLED-AIS", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tfrapStatusT1StatusLED.setStatus('mandatory')
tfrapStatusAllLEDs = MibScalar((1, 3, 6, 1, 4, 1, 485, 5, 4, 4, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 7))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tfrapStatusAllLEDs.setStatus('mandatory')
tfrapVnipTopologyTable = MibTable((1, 3, 6, 1, 4, 1, 485, 5, 4, 2), )
if mibBuilder.loadTexts: tfrapVnipTopologyTable.setStatus('mandatory')
tfrapVnipTopologyEntry = MibTableRow((1, 3, 6, 1, 4, 1, 485, 5, 4, 2, 1), ).setIndexNames((0, "TFRAP-MIB", "tfrapVnipTopologyInterface"), (0, "TFRAP-MIB", "tfrapVnipTopologyIndex"))
if mibBuilder.loadTexts: tfrapVnipTopologyEntry.setStatus('mandatory')
tfrapVnipTopologyInterface = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 5, 4, 2, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("dte-interface", 1), ("t1-interface", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tfrapVnipTopologyInterface.setStatus('mandatory')
tfrapVnipTopologyIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 5, 4, 2, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tfrapVnipTopologyIndex.setStatus('mandatory')
tfrapVnipTopologyDlci = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 5, 4, 2, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tfrapVnipTopologyDlci.setStatus('mandatory')
tfrapVnipTopologyIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 5, 4, 2, 1, 4), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tfrapVnipTopologyIpAddr.setStatus('mandatory')
tfrapVnipTopologyNumHops = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 5, 4, 2, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tfrapVnipTopologyNumHops.setStatus('mandatory')
tfrapVnipTopologyLocalDlci = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 5, 4, 2, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tfrapVnipTopologyLocalDlci.setStatus('mandatory')
tfrapVnipTopoTDNumSamples = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 5, 4, 2, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tfrapVnipTopoTDNumSamples.setStatus('mandatory')
tfrapVnipTopoTDAvgDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 5, 4, 2, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tfrapVnipTopoTDAvgDelay.setStatus('mandatory')
tfrapVnipTopoTDMaxDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 5, 4, 2, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tfrapVnipTopoTDMaxDelay.setStatus('mandatory')
tfrapVnipTopoTDMinDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 5, 4, 2, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tfrapVnipTopoTDMinDelay.setStatus('mandatory')
tfrapVnipTopoTDLastDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 5, 4, 2, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tfrapVnipTopoTDLastDelay.setStatus('mandatory')
tfrapVnipTopoVLOOPStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 5, 4, 2, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("loopback-enable", 1), ("loopback-disable", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tfrapVnipTopoVLOOPStatus.setStatus('mandatory')
tfrapVnipTopoVBERTStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 5, 4, 2, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("off", 1), ("testing", 2), ("test-failed", 3), ("test-completed", 4), ("in-test", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tfrapVnipTopoVBERTStatus.setStatus('mandatory')
tfrapVnipTopoVBertTxDESetFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 5, 4, 2, 1, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tfrapVnipTopoVBertTxDESetFrames.setStatus('mandatory')
tfrapVnipTopoVBertRxDESetFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 5, 4, 2, 1, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tfrapVnipTopoVBertRxDESetFrames.setStatus('mandatory')
tfrapVnipTopoVBertTxDEClrFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 5, 4, 2, 1, 19), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tfrapVnipTopoVBertTxDEClrFrames.setStatus('mandatory')
tfrapVnipTopoVBertRxDEClrFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 5, 4, 2, 1, 20), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tfrapVnipTopoVBertRxDEClrFrames.setStatus('mandatory')
tfrapVnipTopoVBertTransitDelayMax = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 5, 4, 2, 1, 21), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tfrapVnipTopoVBertTransitDelayMax.setStatus('mandatory')
tfrapVnipTopoVBertTransitDelayAvg = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 5, 4, 2, 1, 22), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tfrapVnipTopoVBertTransitDelayAvg.setStatus('mandatory')
tfrapVnipTopoVBertTimeElapse = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 5, 4, 2, 1, 23), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tfrapVnipTopoVBertTimeElapse.setStatus('mandatory')
tfrapVnipTopoVBertPerUtilCIR = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 5, 4, 2, 1, 24), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tfrapVnipTopoVBertPerUtilCIR.setStatus('mandatory')
tfrapVnipTopoVBertPerUtilEIR = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 5, 4, 2, 1, 25), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tfrapVnipTopoVBertPerUtilEIR.setStatus('mandatory')
tfrapVnipTransitDelayClear = MibScalar((1, 3, 6, 1, 4, 1, 485, 5, 4, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("clear-transit-delay", 1)))).setMaxAccess("writeonly")
if mibBuilder.loadTexts: tfrapVnipTransitDelayClear.setStatus('mandatory')
tfrapLmiSourcing = MibScalar((1, 3, 6, 1, 4, 1, 485, 5, 4, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("initializing", 1), ("passthrough", 2), ("user-dte", 3), ("user-t1", 4), ("network-dte", 5), ("network-t1", 6), ("disabled", 7), ("both-ports", 8)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tfrapLmiSourcing.setStatus('mandatory')
tfrapVBertClear = MibScalar((1, 3, 6, 1, 4, 1, 485, 5, 4, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("clear-vbert", 1)))).setMaxAccess("writeonly")
if mibBuilder.loadTexts: tfrapVBertClear.setStatus('mandatory')
tfrapStatusMgmtTable = MibIdentifier((1, 3, 6, 1, 4, 1, 485, 5, 4, 3))
tfrapStatusMgmtChannel = MibScalar((1, 3, 6, 1, 4, 1, 485, 5, 4, 3, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("none", 1), ("slip", 2), ("private-dlci", 3), ("piggyback-dlci", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tfrapStatusMgmtChannel.setStatus('mandatory')
tfrapStatusMgmtInterface = MibScalar((1, 3, 6, 1, 4, 1, 485, 5, 4, 3, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("comm", 1), ("dte", 2), ("t1", 3), ("dte-and-t1", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tfrapStatusMgmtInterface.setStatus('mandatory')
tfrapStatusMgmtInterfaceStatus = MibScalar((1, 3, 6, 1, 4, 1, 485, 5, 4, 3, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("active", 1), ("inactive", 2), ("alarm", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tfrapStatusMgmtInterfaceStatus.setStatus('mandatory')
tfrapStatusMgmtDefaultDLCINo = MibScalar((1, 3, 6, 1, 4, 1, 485, 5, 4, 3, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tfrapStatusMgmtDefaultDLCINo.setStatus('mandatory')
tfrapStatusMgmtDefaultDLCIStatus = MibScalar((1, 3, 6, 1, 4, 1, 485, 5, 4, 3, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("na", 1), ("dlci-active", 2), ("dlci-inactive", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tfrapStatusMgmtDefaultDLCIStatus.setStatus('mandatory')
tfrapStatusLmiAutosense = MibScalar((1, 3, 6, 1, 4, 1, 485, 5, 4, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("disabled", 1), ("searching", 2), ("learned-annex-d", 3), ("learned-annex-a", 4), ("learned-type1", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tfrapStatusLmiAutosense.setStatus('mandatory')
tfrapPerformance = MibIdentifier((1, 3, 6, 1, 4, 1, 485, 5, 5))
tfrapPerfPhysicalIntf = MibIdentifier((1, 3, 6, 1, 4, 1, 485, 5, 5, 1))
tfrapPerfT1CurrentTable = MibTable((1, 3, 6, 1, 4, 1, 485, 5, 5, 1, 1), )
if mibBuilder.loadTexts: tfrapPerfT1CurrentTable.setStatus('mandatory')
tfrapT1CurrentEntry = MibTableRow((1, 3, 6, 1, 4, 1, 485, 5, 5, 1, 1, 1), ).setIndexNames((0, "TFRAP-MIB", "tfrapT1CurrentIndex"))
if mibBuilder.loadTexts: tfrapT1CurrentEntry.setStatus('mandatory')
tfrapT1CurrentIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 5, 5, 1, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tfrapT1CurrentIndex.setStatus('mandatory')
tfrapT1CurrentCrc6Events = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 5, 5, 1, 1, 1, 2), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tfrapT1CurrentCrc6Events.setStatus('mandatory')
tfrapT1CurrentOofEvents = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 5, 5, 1, 1, 1, 3), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tfrapT1CurrentOofEvents.setStatus('mandatory')
tfrapT1CurrentESs = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 5, 5, 1, 1, 1, 4), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tfrapT1CurrentESs.setStatus('mandatory')
tfrapT1CurrentSESs = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 5, 5, 1, 1, 1, 5), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tfrapT1CurrentSESs.setStatus('mandatory')
tfrapT1CurrentSEFSs = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 5, 5, 1, 1, 1, 6), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tfrapT1CurrentSEFSs.setStatus('mandatory')
tfrapT1CurrentUASs = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 5, 5, 1, 1, 1, 7), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tfrapT1CurrentUASs.setStatus('mandatory')
tfrapT1CurrentCSSs = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 5, 5, 1, 1, 1, 8), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tfrapT1CurrentCSSs.setStatus('mandatory')
tfrapT1CurrentBESs = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 5, 5, 1, 1, 1, 9), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tfrapT1CurrentBESs.setStatus('mandatory')
tfrapT1CurrentLCVs = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 5, 5, 1, 1, 1, 10), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tfrapT1CurrentLCVs.setStatus('mandatory')
tfrapPerfT1IntervalTable = MibTable((1, 3, 6, 1, 4, 1, 485, 5, 5, 1, 2), )
if mibBuilder.loadTexts: tfrapPerfT1IntervalTable.setStatus('mandatory')
tfrapT1IntervalEntry = MibTableRow((1, 3, 6, 1, 4, 1, 485, 5, 5, 1, 2, 1), ).setIndexNames((0, "TFRAP-MIB", "tfrapT1IntervalIndex"), (0, "TFRAP-MIB", "tfrapT1IntervalNumber"))
if mibBuilder.loadTexts: tfrapT1IntervalEntry.setStatus('mandatory')
tfrapT1IntervalIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 5, 5, 1, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tfrapT1IntervalIndex.setStatus('mandatory')
tfrapT1IntervalNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 5, 5, 1, 2, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 96))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tfrapT1IntervalNumber.setStatus('mandatory')
tfrapT1IntervalESs = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 5, 5, 1, 2, 1, 3), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tfrapT1IntervalESs.setStatus('mandatory')
tfrapT1IntervalSESs = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 5, 5, 1, 2, 1, 4), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tfrapT1IntervalSESs.setStatus('mandatory')
tfrapT1IntervalSEFSs = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 5, 5, 1, 2, 1, 5), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tfrapT1IntervalSEFSs.setStatus('mandatory')
tfrapT1IntervalUASs = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 5, 5, 1, 2, 1, 6), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tfrapT1IntervalUASs.setStatus('mandatory')
tfrapT1IntervalCSSs = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 5, 5, 1, 2, 1, 7), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tfrapT1IntervalCSSs.setStatus('mandatory')
tfrapT1IntervalBESs = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 5, 5, 1, 2, 1, 8), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tfrapT1IntervalBESs.setStatus('mandatory')
tfrapT1IntervalLCVs = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 5, 5, 1, 2, 1, 9), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tfrapT1IntervalLCVs.setStatus('mandatory')
tfrapPerfT1TotalTable = MibTable((1, 3, 6, 1, 4, 1, 485, 5, 5, 1, 3), )
if mibBuilder.loadTexts: tfrapPerfT1TotalTable.setStatus('mandatory')
tfrapT1TotalEntry = MibTableRow((1, 3, 6, 1, 4, 1, 485, 5, 5, 1, 3, 1), ).setIndexNames((0, "TFRAP-MIB", "tfrapT1TotalIndex"))
if mibBuilder.loadTexts: tfrapT1TotalEntry.setStatus('mandatory')
tfrapT1TotalIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 5, 5, 1, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tfrapT1TotalIndex.setStatus('mandatory')
tfrapT1TotalESs = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 5, 5, 1, 3, 1, 2), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tfrapT1TotalESs.setStatus('mandatory')
tfrapT1TotalSESs = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 5, 5, 1, 3, 1, 3), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tfrapT1TotalSESs.setStatus('mandatory')
tfrapT1TotalSEFSs = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 5, 5, 1, 3, 1, 4), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tfrapT1TotalSEFSs.setStatus('mandatory')
tfrapT1TotalUASs = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 5, 5, 1, 3, 1, 5), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tfrapT1TotalUASs.setStatus('mandatory')
tfrapT1TotalCSSs = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 5, 5, 1, 3, 1, 6), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tfrapT1TotalCSSs.setStatus('mandatory')
tfrapT1TotalBESs = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 5, 5, 1, 3, 1, 7), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tfrapT1TotalBESs.setStatus('mandatory')
tfrapT1TotalLCVs = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 5, 5, 1, 3, 1, 8), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tfrapT1TotalLCVs.setStatus('mandatory')
tfrapT1PerfCmdTypeTable = MibIdentifier((1, 3, 6, 1, 4, 1, 485, 5, 5, 1, 4))
tfrapT1PerfFreezeState = MibScalar((1, 3, 6, 1, 4, 1, 485, 5, 5, 1, 4, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("freeze-reg", 1), ("unfreeze-reg", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tfrapT1PerfFreezeState.setStatus('mandatory')
tfrapT1PerfClearEvents = MibScalar((1, 3, 6, 1, 4, 1, 485, 5, 5, 1, 4, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("clear-events", 1)))).setMaxAccess("writeonly")
if mibBuilder.loadTexts: tfrapT1PerfClearEvents.setStatus('mandatory')
tfrapT1PerfClearAll = MibScalar((1, 3, 6, 1, 4, 1, 485, 5, 5, 1, 4, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("clear-all", 1)))).setMaxAccess("writeonly")
if mibBuilder.loadTexts: tfrapT1PerfClearAll.setStatus('mandatory')
tfrapPerfMgmtIp = MibIdentifier((1, 3, 6, 1, 4, 1, 485, 5, 5, 2))
tfrapPerfMgmtIpIFStatsTable = MibIdentifier((1, 3, 6, 1, 4, 1, 485, 5, 5, 2, 1))
tfrapPerfMgmtIpIFInOctets = MibScalar((1, 3, 6, 1, 4, 1, 485, 5, 5, 2, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tfrapPerfMgmtIpIFInOctets.setStatus('mandatory')
tfrapPerfMgmtIpIFInErrors = MibScalar((1, 3, 6, 1, 4, 1, 485, 5, 5, 2, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tfrapPerfMgmtIpIFInErrors.setStatus('mandatory')
tfrapPerfMgmtIpIFOutOctets = MibScalar((1, 3, 6, 1, 4, 1, 485, 5, 5, 2, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tfrapPerfMgmtIpIFOutOctets.setStatus('mandatory')
tfrapPerfMgmtIpIFOperStatus = MibScalar((1, 3, 6, 1, 4, 1, 485, 5, 5, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("up", 1), ("down", 2), ("testing", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tfrapPerfMgmtIpIFOperStatus.setStatus('mandatory')
tfrapPerfMgmtIpIPStatsTable = MibIdentifier((1, 3, 6, 1, 4, 1, 485, 5, 5, 2, 2))
tfrapPerfMgmtIpIPInRcv = MibScalar((1, 3, 6, 1, 4, 1, 485, 5, 5, 2, 2, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tfrapPerfMgmtIpIPInRcv.setStatus('mandatory')
tfrapPerfMgmtIpIPInHdrErr = MibScalar((1, 3, 6, 1, 4, 1, 485, 5, 5, 2, 2, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tfrapPerfMgmtIpIPInHdrErr.setStatus('mandatory')
tfrapPerfMgmtIpIPInAddrErr = MibScalar((1, 3, 6, 1, 4, 1, 485, 5, 5, 2, 2, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tfrapPerfMgmtIpIPInAddrErr.setStatus('mandatory')
tfrapPerfMgmtIpIPInProtUnk = MibScalar((1, 3, 6, 1, 4, 1, 485, 5, 5, 2, 2, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tfrapPerfMgmtIpIPInProtUnk.setStatus('mandatory')
tfrapPerfMgmtIpIPInDscrd = MibScalar((1, 3, 6, 1, 4, 1, 485, 5, 5, 2, 2, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tfrapPerfMgmtIpIPInDscrd.setStatus('mandatory')
tfrapPerfMgmtIpIPInDlvrs = MibScalar((1, 3, 6, 1, 4, 1, 485, 5, 5, 2, 2, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tfrapPerfMgmtIpIPInDlvrs.setStatus('mandatory')
tfrapPerfMgmtIpIPOutRqst = MibScalar((1, 3, 6, 1, 4, 1, 485, 5, 5, 2, 2, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tfrapPerfMgmtIpIPOutRqst.setStatus('mandatory')
tfrapPerfMgmtIpIPOutDscrd = MibScalar((1, 3, 6, 1, 4, 1, 485, 5, 5, 2, 2, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tfrapPerfMgmtIpIPOutDscrd.setStatus('mandatory')
tfrapPerfMgmtIpIPOutNoRt = MibScalar((1, 3, 6, 1, 4, 1, 485, 5, 5, 2, 2, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tfrapPerfMgmtIpIPOutNoRt.setStatus('mandatory')
tfrapPerfMgmtIpICMPStatsTable = MibIdentifier((1, 3, 6, 1, 4, 1, 485, 5, 5, 2, 3))
tfrapPerfMgmtIpICMPInMsgs = MibScalar((1, 3, 6, 1, 4, 1, 485, 5, 5, 2, 3, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tfrapPerfMgmtIpICMPInMsgs.setStatus('mandatory')
tfrapPerfMgmtIpICMPInErrors = MibScalar((1, 3, 6, 1, 4, 1, 485, 5, 5, 2, 3, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tfrapPerfMgmtIpICMPInErrors.setStatus('mandatory')
tfrapPerfMgmtIpICMPInDestUnreachs = MibScalar((1, 3, 6, 1, 4, 1, 485, 5, 5, 2, 3, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tfrapPerfMgmtIpICMPInDestUnreachs.setStatus('mandatory')
tfrapPerfMgmtIpICMPInTimeExcds = MibScalar((1, 3, 6, 1, 4, 1, 485, 5, 5, 2, 3, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tfrapPerfMgmtIpICMPInTimeExcds.setStatus('mandatory')
tfrapPerfMgmtIpICMPInParmProbs = MibScalar((1, 3, 6, 1, 4, 1, 485, 5, 5, 2, 3, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tfrapPerfMgmtIpICMPInParmProbs.setStatus('mandatory')
tfrapPerfMgmtIpICMPInRedirects = MibScalar((1, 3, 6, 1, 4, 1, 485, 5, 5, 2, 3, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tfrapPerfMgmtIpICMPInRedirects.setStatus('mandatory')
tfrapPerfMgmtIpICMPInEchos = MibScalar((1, 3, 6, 1, 4, 1, 485, 5, 5, 2, 3, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tfrapPerfMgmtIpICMPInEchos.setStatus('mandatory')
tfrapPerfMgmtIpICMPInEchoReps = MibScalar((1, 3, 6, 1, 4, 1, 485, 5, 5, 2, 3, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tfrapPerfMgmtIpICMPInEchoReps.setStatus('mandatory')
tfrapPerfMgmtIpICMPOutMsgs = MibScalar((1, 3, 6, 1, 4, 1, 485, 5, 5, 2, 3, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tfrapPerfMgmtIpICMPOutMsgs.setStatus('mandatory')
tfrapPerfMgmtIpICMPOutErrors = MibScalar((1, 3, 6, 1, 4, 1, 485, 5, 5, 2, 3, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tfrapPerfMgmtIpICMPOutErrors.setStatus('mandatory')
tfrapPerfMgmtIpICMPOutDestUnreachs = MibScalar((1, 3, 6, 1, 4, 1, 485, 5, 5, 2, 3, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tfrapPerfMgmtIpICMPOutDestUnreachs.setStatus('mandatory')
tfrapPerfMgmtIpICMPOutParmProbs = MibScalar((1, 3, 6, 1, 4, 1, 485, 5, 5, 2, 3, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tfrapPerfMgmtIpICMPOutParmProbs.setStatus('mandatory')
tfrapPerfMgmtIpICMPOutRedirects = MibScalar((1, 3, 6, 1, 4, 1, 485, 5, 5, 2, 3, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tfrapPerfMgmtIpICMPOutRedirects.setStatus('mandatory')
tfrapPerfMgmtIpICMPOutEchos = MibScalar((1, 3, 6, 1, 4, 1, 485, 5, 5, 2, 3, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tfrapPerfMgmtIpICMPOutEchos.setStatus('mandatory')
tfrapPerfMgmtIpICMPOutEchoReps = MibScalar((1, 3, 6, 1, 4, 1, 485, 5, 5, 2, 3, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tfrapPerfMgmtIpICMPOutEchoReps.setStatus('mandatory')
tfrapPerfMgmtIpUDPStatsTable = MibIdentifier((1, 3, 6, 1, 4, 1, 485, 5, 5, 2, 4))
tfrapPerfMgmtIpUDPInDatagrams = MibScalar((1, 3, 6, 1, 4, 1, 485, 5, 5, 2, 4, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tfrapPerfMgmtIpUDPInDatagrams.setStatus('mandatory')
tfrapPerfMgmtIpUDPOutDatagrams = MibScalar((1, 3, 6, 1, 4, 1, 485, 5, 5, 2, 4, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tfrapPerfMgmtIpUDPOutDatagrams.setStatus('mandatory')
tfrapPerfMgmtIpUDPNoPorts = MibScalar((1, 3, 6, 1, 4, 1, 485, 5, 5, 2, 4, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tfrapPerfMgmtIpUDPNoPorts.setStatus('mandatory')
tfrapPerfMgmtIpTCPStatsTable = MibIdentifier((1, 3, 6, 1, 4, 1, 485, 5, 5, 2, 5))
tfrapPerfMgmtIpTCPActiveOpens = MibScalar((1, 3, 6, 1, 4, 1, 485, 5, 5, 2, 5, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tfrapPerfMgmtIpTCPActiveOpens.setStatus('mandatory')
tfrapPerfMgmtIpTCPPassiveOpens = MibScalar((1, 3, 6, 1, 4, 1, 485, 5, 5, 2, 5, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tfrapPerfMgmtIpTCPPassiveOpens.setStatus('mandatory')
tfrapPerfMgmtIpTCPAttemptFails = MibScalar((1, 3, 6, 1, 4, 1, 485, 5, 5, 2, 5, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tfrapPerfMgmtIpTCPAttemptFails.setStatus('mandatory')
tfrapPerfMgmtIpTCPCurrEstab = MibScalar((1, 3, 6, 1, 4, 1, 485, 5, 5, 2, 5, 4), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tfrapPerfMgmtIpTCPCurrEstab.setStatus('mandatory')
tfrapPerfMgmtIpTCPInSegs = MibScalar((1, 3, 6, 1, 4, 1, 485, 5, 5, 2, 5, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tfrapPerfMgmtIpTCPInSegs.setStatus('mandatory')
tfrapPerfMgmtIpTCPOutSegs = MibScalar((1, 3, 6, 1, 4, 1, 485, 5, 5, 2, 5, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tfrapPerfMgmtIpTCPOutSegs.setStatus('mandatory')
tfrapPerfThruput = MibIdentifier((1, 3, 6, 1, 4, 1, 485, 5, 5, 3))
tfrapPerfThruputPerIntfTable = MibTable((1, 3, 6, 1, 4, 1, 485, 5, 5, 3, 1), )
if mibBuilder.loadTexts: tfrapPerfThruputPerIntfTable.setStatus('mandatory')
tfrapPerfThruputPerIntfEntry = MibTableRow((1, 3, 6, 1, 4, 1, 485, 5, 5, 3, 1, 1), ).setIndexNames((0, "TFRAP-MIB", "tfrapPerfThruputPerIntfIndex"))
if mibBuilder.loadTexts: tfrapPerfThruputPerIntfEntry.setStatus('mandatory')
tfrapPerfThruputPerIntfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 5, 5, 3, 1, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("dte", 1), ("t1", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tfrapPerfThruputPerIntfIndex.setStatus('mandatory')
tfrapPerfThruputPerIntfRxByteCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 5, 5, 3, 1, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tfrapPerfThruputPerIntfRxByteCnt.setStatus('mandatory')
tfrapPerfThruputPerIntfTxByteCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 5, 5, 3, 1, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tfrapPerfThruputPerIntfTxByteCnt.setStatus('mandatory')
tfrapPerfThruputPerIntfRxFrameCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 5, 5, 3, 1, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tfrapPerfThruputPerIntfRxFrameCnt.setStatus('mandatory')
tfrapPerfThruputPerIntfTxFrameCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 5, 5, 3, 1, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tfrapPerfThruputPerIntfTxFrameCnt.setStatus('mandatory')
tfrapPerfThruputPerIntfRxCrcErrCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 5, 5, 3, 1, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tfrapPerfThruputPerIntfRxCrcErrCnt.setStatus('mandatory')
tfrapPerfThruputPerIntfRxAbortCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 5, 5, 3, 1, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tfrapPerfThruputPerIntfRxAbortCnt.setStatus('mandatory')
class Index(Integer32):
    pass

tfrapPerfThruputPerDlciTable = MibTable((1, 3, 6, 1, 4, 1, 485, 5, 5, 3, 2), )
if mibBuilder.loadTexts: tfrapPerfThruputPerDlciTable.setStatus('mandatory')
tfrapPerfThruputPerDlciEntry = MibTableRow((1, 3, 6, 1, 4, 1, 485, 5, 5, 3, 2, 1), ).setIndexNames((0, "TFRAP-MIB", "tfrapPerfThruputPerDlciIndex"), (0, "TFRAP-MIB", "tfrapPerfThruputPerDlciValue"))
if mibBuilder.loadTexts: tfrapPerfThruputPerDlciEntry.setStatus('mandatory')
tfrapPerfThruputPerDlciIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 5, 5, 3, 2, 1, 1), Index()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tfrapPerfThruputPerDlciIndex.setStatus('mandatory')
tfrapPerfThruputPerDlciValue = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 5, 5, 3, 2, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tfrapPerfThruputPerDlciValue.setStatus('mandatory')
tfrapPerfThruputPerDlciCreateTime = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 5, 5, 3, 2, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tfrapPerfThruputPerDlciCreateTime.setStatus('mandatory')
tfrapPerfThruputPerDlciChangeTime = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 5, 5, 3, 2, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tfrapPerfThruputPerDlciChangeTime.setStatus('mandatory')
tfrapPerfThruputPerDlciRxByte = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 5, 5, 3, 2, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tfrapPerfThruputPerDlciRxByte.setStatus('mandatory')
tfrapPerfThruputPerDlciTxByte = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 5, 5, 3, 2, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tfrapPerfThruputPerDlciTxByte.setStatus('mandatory')
tfrapPerfThruputPerDlciRxFrame = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 5, 5, 3, 2, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tfrapPerfThruputPerDlciRxFrame.setStatus('mandatory')
tfrapPerfThruputPerDlciTxFrame = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 5, 5, 3, 2, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tfrapPerfThruputPerDlciTxFrame.setStatus('mandatory')
tfrapPerfThruputPerDlciRxFecn = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 5, 5, 3, 2, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tfrapPerfThruputPerDlciRxFecn.setStatus('mandatory')
tfrapPerfThruputPerDlciRxBecn = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 5, 5, 3, 2, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tfrapPerfThruputPerDlciRxBecn.setStatus('mandatory')
tfrapPerfThruputPerDlciRxDe = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 5, 5, 3, 2, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tfrapPerfThruputPerDlciRxDe.setStatus('mandatory')
tfrapPerfThruputPerDlciTxDe = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 5, 5, 3, 2, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tfrapPerfThruputPerDlciTxDe.setStatus('mandatory')
tfrapPerfThruputPerDlciRxThruput = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 5, 5, 3, 2, 1, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tfrapPerfThruputPerDlciRxThruput.setStatus('mandatory')
tfrapPerfThruputPerDlciTxThruput = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 5, 5, 3, 2, 1, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tfrapPerfThruputPerDlciTxThruput.setStatus('mandatory')
tfrapPerfThruputPerDlciCIR = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 5, 5, 3, 2, 1, 15), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tfrapPerfThruputPerDlciCIR.setStatus('mandatory')
tfrapPerfThruputPerDlciCirType = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 5, 5, 3, 2, 1, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("cir-acquired-from-lmi", 1), ("cir-configured-by-user", 2), ("cir-is-dte-datarate", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tfrapPerfThruputPerDlciCirType.setStatus('mandatory')
tfrapPerfThruputPerDlciUptime = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 5, 5, 3, 2, 1, 16), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tfrapPerfThruputPerDlciUptime.setStatus('mandatory')
tfrapPerfThruputPerDlciDowntime = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 5, 5, 3, 2, 1, 17), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tfrapPerfThruputPerDlciDowntime.setStatus('mandatory')
tfrapPerfThruputPerDlciPvcState = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 5, 5, 3, 2, 1, 19), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("pvc-active", 1), ("pvc-inactive", 2), ("pvc-unprovisioned", 3), ("pvc-not-in-lmi", 4), ("pvc-lmi-timeout", 5), ("pvc-undetermined", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tfrapPerfThruputPerDlciPvcState.setStatus('mandatory')
tfrapPerfThruputPerDlciOutageCount = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 5, 5, 3, 2, 1, 20), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tfrapPerfThruputPerDlciOutageCount.setStatus('mandatory')
tfrapPerfThruputPerDlciAvailability = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 5, 5, 3, 2, 1, 21), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tfrapPerfThruputPerDlciAvailability.setStatus('mandatory')
tfrapPerfThruputPerDlciMTBSO = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 5, 5, 3, 2, 1, 22), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tfrapPerfThruputPerDlciMTBSO.setStatus('mandatory')
tfrapPerfThruputPerDlciMTTSR = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 5, 5, 3, 2, 1, 23), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tfrapPerfThruputPerDlciMTTSR.setStatus('mandatory')
tfrapPerfThruputPerDlciEncapType = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 5, 5, 3, 2, 1, 24), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("encap-na", 1), ("encap-1490", 2), ("encap-cisco", 3), ("encap-annex-g", 4), ("encap-other", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tfrapPerfThruputPerDlciEncapType.setStatus('mandatory')
tfrapPerfThruputPerDlciRxUtilizationStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 5, 5, 3, 2, 1, 25), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("clear", 1), ("over-threshold", 2), ("alarm", 3), ("alarm-under-threshold", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tfrapPerfThruputPerDlciRxUtilizationStatus.setStatus('mandatory')
tfrapPerfThruputPerDlciTxUtilizationStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 5, 5, 3, 2, 1, 26), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("clear", 1), ("over-threshold", 2), ("alarm", 3), ("alarm-under-threshold", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tfrapPerfThruputPerDlciTxUtilizationStatus.setStatus('mandatory')
tfrapPerfThruputPerDlciEIR = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 5, 5, 3, 2, 1, 27), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tfrapPerfThruputPerDlciEIR.setStatus('mandatory')
tfrapPerfThruputCommands = MibIdentifier((1, 3, 6, 1, 4, 1, 485, 5, 5, 3, 3))
tfrapPerfThruputCmdClearDteStats = MibScalar((1, 3, 6, 1, 4, 1, 485, 5, 5, 3, 3, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("clear-statistics", 1)))).setMaxAccess("writeonly")
if mibBuilder.loadTexts: tfrapPerfThruputCmdClearDteStats.setStatus('mandatory')
tfrapPerfThruputCmdClearT1Stats = MibScalar((1, 3, 6, 1, 4, 1, 485, 5, 5, 3, 3, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("clear-statistics", 1)))).setMaxAccess("writeonly")
if mibBuilder.loadTexts: tfrapPerfThruputCmdClearT1Stats.setStatus('mandatory')
tfrapPerfThruputCmdClearAllIntfStats = MibScalar((1, 3, 6, 1, 4, 1, 485, 5, 5, 3, 3, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("clear-statistics", 1)))).setMaxAccess("writeonly")
if mibBuilder.loadTexts: tfrapPerfThruputCmdClearAllIntfStats.setStatus('mandatory')
tfrapPerfThruputCmdClearDlciStats = MibScalar((1, 3, 6, 1, 4, 1, 485, 5, 5, 3, 3, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("clear-statistics", 1)))).setMaxAccess("writeonly")
if mibBuilder.loadTexts: tfrapPerfThruputCmdClearDlciStats.setStatus('mandatory')
tfrapPerfThruputCmdClearAllStats = MibScalar((1, 3, 6, 1, 4, 1, 485, 5, 5, 3, 3, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("clear-statistics", 1)))).setMaxAccess("writeonly")
if mibBuilder.loadTexts: tfrapPerfThruputCmdClearAllStats.setStatus('mandatory')
tfrapPerfThruputCmdRemoveStsDlci = MibScalar((1, 3, 6, 1, 4, 1, 485, 5, 5, 3, 3, 6), Integer32()).setMaxAccess("writeonly")
if mibBuilder.loadTexts: tfrapPerfThruputCmdRemoveStsDlci.setStatus('mandatory')
tfrapPerfThruputCmdReplaceDlciTable = MibTable((1, 3, 6, 1, 4, 1, 485, 5, 5, 3, 3, 7), )
if mibBuilder.loadTexts: tfrapPerfThruputCmdReplaceDlciTable.setStatus('mandatory')
tfrapPerfThruputCmdReplaceDlciEntry = MibTableRow((1, 3, 6, 1, 4, 1, 485, 5, 5, 3, 3, 7, 1), ).setIndexNames((0, "TFRAP-MIB", "tfrapPerfThruputCmdReplaceDlciValue"))
if mibBuilder.loadTexts: tfrapPerfThruputCmdReplaceDlciEntry.setStatus('mandatory')
tfrapPerfThruputCmdReplaceDlciValue = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 5, 5, 3, 3, 7, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tfrapPerfThruputCmdReplaceDlciValue.setStatus('mandatory')
tfrapPerfThruputCmdReplaceDlciNewValue = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 5, 5, 3, 3, 7, 1, 2), Integer32()).setMaxAccess("writeonly")
if mibBuilder.loadTexts: tfrapPerfThruputCmdReplaceDlciNewValue.setStatus('mandatory')
tfrapPerfThruputCmdAvailabilityStsDlciReset = MibScalar((1, 3, 6, 1, 4, 1, 485, 5, 5, 3, 3, 8), Integer32()).setMaxAccess("writeonly")
if mibBuilder.loadTexts: tfrapPerfThruputCmdAvailabilityStsDlciReset.setStatus('mandatory')
tfrapPerfThruputCmdAvailabilityStsDlciResetAll = MibScalar((1, 3, 6, 1, 4, 1, 485, 5, 5, 3, 3, 9), Integer32()).setMaxAccess("writeonly")
if mibBuilder.loadTexts: tfrapPerfThruputCmdAvailabilityStsDlciResetAll.setStatus('mandatory')
tfrapPerfThruputCmdCountsStsDlciReset = MibScalar((1, 3, 6, 1, 4, 1, 485, 5, 5, 3, 3, 10), Integer32()).setMaxAccess("writeonly")
if mibBuilder.loadTexts: tfrapPerfThruputCmdCountsStsDlciReset.setStatus('mandatory')
tfrapPerfThruputCmdCountsStsDlciResetAll = MibScalar((1, 3, 6, 1, 4, 1, 485, 5, 5, 3, 3, 11), Integer32()).setMaxAccess("writeonly")
if mibBuilder.loadTexts: tfrapPerfThruputCmdCountsStsDlciResetAll.setStatus('mandatory')
tfrapPerfThruputCmdAllStsDlciReset = MibScalar((1, 3, 6, 1, 4, 1, 485, 5, 5, 3, 3, 12), Integer32()).setMaxAccess("writeonly")
if mibBuilder.loadTexts: tfrapPerfThruputCmdAllStsDlciReset.setStatus('mandatory')
tfrapPerfThruputCmdAllStsDlciResetAll = MibScalar((1, 3, 6, 1, 4, 1, 485, 5, 5, 3, 3, 13), Integer32()).setMaxAccess("writeonly")
if mibBuilder.loadTexts: tfrapPerfThruputCmdAllStsDlciResetAll.setStatus('mandatory')
tfrapPerfNetworkShortTerm = MibIdentifier((1, 3, 6, 1, 4, 1, 485, 5, 5, 4))
tfrapPerfNetwProtoPerDlciTable = MibTable((1, 3, 6, 1, 4, 1, 485, 5, 5, 4, 1), )
if mibBuilder.loadTexts: tfrapPerfNetwProtoPerDlciTable.setStatus('mandatory')
tfrapPerfNetwProtoPerDlciEntry = MibTableRow((1, 3, 6, 1, 4, 1, 485, 5, 5, 4, 1, 1), ).setIndexNames((0, "TFRAP-MIB", "tfrapPerfNetwProtoPerDlciInterval"), (0, "TFRAP-MIB", "tfrapPerfNetwProtoPerDlciValue"))
if mibBuilder.loadTexts: tfrapPerfNetwProtoPerDlciEntry.setStatus('mandatory')
tfrapPerfNetwProtoPerDlciInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 5, 5, 4, 1, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("current-interval", 1), ("previous-interval", 2), ("cumulative-counts", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tfrapPerfNetwProtoPerDlciInterval.setStatus('mandatory')
tfrapPerfNetwProtoPerDlciValue = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 5, 5, 4, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tfrapPerfNetwProtoPerDlciValue.setStatus('mandatory')
tfrapPerfNetwProtoPerDlciRxTotal = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 5, 5, 4, 1, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tfrapPerfNetwProtoPerDlciRxTotal.setStatus('mandatory')
tfrapPerfNetwProtoPerDlciTxTotal = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 5, 5, 4, 1, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tfrapPerfNetwProtoPerDlciTxTotal.setStatus('mandatory')
tfrapPerfNetwProtoPerDlciRxIp = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 5, 5, 4, 1, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tfrapPerfNetwProtoPerDlciRxIp.setStatus('mandatory')
tfrapPerfNetwProtoPerDlciTxIp = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 5, 5, 4, 1, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tfrapPerfNetwProtoPerDlciTxIp.setStatus('mandatory')
tfrapPerfNetwProtoPerDlciRxIpx = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 5, 5, 4, 1, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tfrapPerfNetwProtoPerDlciRxIpx.setStatus('mandatory')
tfrapPerfNetwProtoPerDlciTxIpx = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 5, 5, 4, 1, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tfrapPerfNetwProtoPerDlciTxIpx.setStatus('mandatory')
tfrapPerfNetwProtoPerDlciRxSna = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 5, 5, 4, 1, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tfrapPerfNetwProtoPerDlciRxSna.setStatus('mandatory')
tfrapPerfNetwProtoPerDlciTxSna = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 5, 5, 4, 1, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tfrapPerfNetwProtoPerDlciTxSna.setStatus('mandatory')
tfrapPerfNetwProtoPerDlciRxArp = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 5, 5, 4, 1, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tfrapPerfNetwProtoPerDlciRxArp.setStatus('mandatory')
tfrapPerfNetwProtoPerDlciTxArp = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 5, 5, 4, 1, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tfrapPerfNetwProtoPerDlciTxArp.setStatus('mandatory')
tfrapPerfNetwProtoPerDlciRxCisco = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 5, 5, 4, 1, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tfrapPerfNetwProtoPerDlciRxCisco.setStatus('mandatory')
tfrapPerfNetwProtoPerDlciTxCisco = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 5, 5, 4, 1, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tfrapPerfNetwProtoPerDlciTxCisco.setStatus('mandatory')
tfrapPerfNetwProtoPerDlciRxOther = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 5, 5, 4, 1, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tfrapPerfNetwProtoPerDlciRxOther.setStatus('mandatory')
tfrapPerfNetwProtoPerDlciTxOther = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 5, 5, 4, 1, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tfrapPerfNetwProtoPerDlciTxOther.setStatus('mandatory')
tfrapPerfNetwProtoPerDlciRxVnip = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 5, 5, 4, 1, 1, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tfrapPerfNetwProtoPerDlciRxVnip.setStatus('mandatory')
tfrapPerfNetwProtoPerDlciTxVnip = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 5, 5, 4, 1, 1, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tfrapPerfNetwProtoPerDlciTxVnip.setStatus('mandatory')
tfrapPerfNetwProtoPerDlciRxAnnexG = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 5, 5, 4, 1, 1, 19), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tfrapPerfNetwProtoPerDlciRxAnnexG.setStatus('mandatory')
tfrapPerfNetwProtoPerDlciTxAnnexG = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 5, 5, 4, 1, 1, 20), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tfrapPerfNetwProtoPerDlciTxAnnexG.setStatus('mandatory')
tfrapPerfNetwProtoTotalTable = MibTable((1, 3, 6, 1, 4, 1, 485, 5, 5, 4, 2), )
if mibBuilder.loadTexts: tfrapPerfNetwProtoTotalTable.setStatus('mandatory')
tfrapPerfNetwProtoTotalEntry = MibTableRow((1, 3, 6, 1, 4, 1, 485, 5, 5, 4, 2, 1), ).setIndexNames((0, "TFRAP-MIB", "tfrapPerfNetwProtoTotalInterval"))
if mibBuilder.loadTexts: tfrapPerfNetwProtoTotalEntry.setStatus('mandatory')
tfrapPerfNetwProtoTotalInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 5, 5, 4, 2, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("current-interval", 1), ("previous-interval", 2), ("cumulative-counts", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tfrapPerfNetwProtoTotalInterval.setStatus('mandatory')
tfrapPerfNetwProtoTotalRxTotal = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 5, 5, 4, 2, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tfrapPerfNetwProtoTotalRxTotal.setStatus('mandatory')
tfrapPerfNetwProtoTotalTxTotal = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 5, 5, 4, 2, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tfrapPerfNetwProtoTotalTxTotal.setStatus('mandatory')
tfrapPerfNetwProtoTotalRxIp = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 5, 5, 4, 2, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tfrapPerfNetwProtoTotalRxIp.setStatus('mandatory')
tfrapPerfNetwProtoTotalTxIp = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 5, 5, 4, 2, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tfrapPerfNetwProtoTotalTxIp.setStatus('mandatory')
tfrapPerfNetwProtoTotalRxIpx = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 5, 5, 4, 2, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tfrapPerfNetwProtoTotalRxIpx.setStatus('mandatory')
tfrapPerfNetwProtoTotalTxIpx = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 5, 5, 4, 2, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tfrapPerfNetwProtoTotalTxIpx.setStatus('mandatory')
tfrapPerfNetwProtoTotalRxSna = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 5, 5, 4, 2, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tfrapPerfNetwProtoTotalRxSna.setStatus('mandatory')
tfrapPerfNetwProtoTotalTxSna = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 5, 5, 4, 2, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tfrapPerfNetwProtoTotalTxSna.setStatus('mandatory')
tfrapPerfNetwProtoTotalRxArp = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 5, 5, 4, 2, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tfrapPerfNetwProtoTotalRxArp.setStatus('mandatory')
tfrapPerfNetwProtoTotalTxArp = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 5, 5, 4, 2, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tfrapPerfNetwProtoTotalTxArp.setStatus('mandatory')
tfrapPerfNetwProtoTotalRxCisco = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 5, 5, 4, 2, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tfrapPerfNetwProtoTotalRxCisco.setStatus('mandatory')
tfrapPerfNetwProtoTotalTxCisco = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 5, 5, 4, 2, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tfrapPerfNetwProtoTotalTxCisco.setStatus('mandatory')
tfrapPerfNetwProtoTotalRxOther = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 5, 5, 4, 2, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tfrapPerfNetwProtoTotalRxOther.setStatus('mandatory')
tfrapPerfNetwProtoTotalTxOther = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 5, 5, 4, 2, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tfrapPerfNetwProtoTotalTxOther.setStatus('mandatory')
tfrapPerfNetwProtoTotalRxVnip = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 5, 5, 4, 2, 1, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tfrapPerfNetwProtoTotalRxVnip.setStatus('mandatory')
tfrapPerfNetwProtoTotalTxVnip = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 5, 5, 4, 2, 1, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tfrapPerfNetwProtoTotalTxVnip.setStatus('mandatory')
tfrapPerfNetwProtoTotalRxAnnexG = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 5, 5, 4, 2, 1, 19), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tfrapPerfNetwProtoTotalRxAnnexG.setStatus('mandatory')
tfrapPerfNetwProtoTotalTxAnnexG = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 5, 5, 4, 2, 1, 20), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tfrapPerfNetwProtoTotalTxAnnexG.setStatus('mandatory')
tfrapPerfIpPerDlciTable = MibTable((1, 3, 6, 1, 4, 1, 485, 5, 5, 4, 3), )
if mibBuilder.loadTexts: tfrapPerfIpPerDlciTable.setStatus('mandatory')
tfrapPerfIpPerDlciEntry = MibTableRow((1, 3, 6, 1, 4, 1, 485, 5, 5, 4, 3, 1), ).setIndexNames((0, "TFRAP-MIB", "tfrapPerfIpPerDlciInterval"), (0, "TFRAP-MIB", "tfrapPerfIpPerDlciValue"))
if mibBuilder.loadTexts: tfrapPerfIpPerDlciEntry.setStatus('mandatory')
tfrapPerfIpPerDlciInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 5, 5, 4, 3, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("current-interval", 1), ("previous-interval", 2), ("cumulative-counts", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tfrapPerfIpPerDlciInterval.setStatus('mandatory')
tfrapPerfIpPerDlciValue = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 5, 5, 4, 3, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tfrapPerfIpPerDlciValue.setStatus('mandatory')
tfrapPerfIpPerDlciRxTotal = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 5, 5, 4, 3, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tfrapPerfIpPerDlciRxTotal.setStatus('mandatory')
tfrapPerfIpPerDlciTxTotal = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 5, 5, 4, 3, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tfrapPerfIpPerDlciTxTotal.setStatus('mandatory')
tfrapPerfIpPerDlciRxTcp = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 5, 5, 4, 3, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tfrapPerfIpPerDlciRxTcp.setStatus('mandatory')
tfrapPerfIpPerDlciTxTcp = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 5, 5, 4, 3, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tfrapPerfIpPerDlciTxTcp.setStatus('mandatory')
tfrapPerfIpPerDlciRxUdp = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 5, 5, 4, 3, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tfrapPerfIpPerDlciRxUdp.setStatus('mandatory')
tfrapPerfIpPerDlciTxUdp = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 5, 5, 4, 3, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tfrapPerfIpPerDlciTxUdp.setStatus('mandatory')
tfrapPerfIpPerDlciRxIcmp = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 5, 5, 4, 3, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tfrapPerfIpPerDlciRxIcmp.setStatus('mandatory')
tfrapPerfIpPerDlciTxIcmp = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 5, 5, 4, 3, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tfrapPerfIpPerDlciTxIcmp.setStatus('mandatory')
tfrapPerfIpPerDlciRxOther = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 5, 5, 4, 3, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tfrapPerfIpPerDlciRxOther.setStatus('mandatory')
tfrapPerfIpPerDlciTxOther = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 5, 5, 4, 3, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tfrapPerfIpPerDlciTxOther.setStatus('mandatory')
tfrapPerfIpPerDlciRxIgrp = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 5, 5, 4, 3, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tfrapPerfIpPerDlciRxIgrp.setStatus('mandatory')
tfrapPerfIpPerDlciTxIgrp = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 5, 5, 4, 3, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tfrapPerfIpPerDlciTxIgrp.setStatus('mandatory')
tfrapPerfIpTotalTable = MibTable((1, 3, 6, 1, 4, 1, 485, 5, 5, 4, 4), )
if mibBuilder.loadTexts: tfrapPerfIpTotalTable.setStatus('mandatory')
tfrapPerfIpTotalEntry = MibTableRow((1, 3, 6, 1, 4, 1, 485, 5, 5, 4, 4, 1), ).setIndexNames((0, "TFRAP-MIB", "tfrapPerfIpTotalInterval"))
if mibBuilder.loadTexts: tfrapPerfIpTotalEntry.setStatus('mandatory')
tfrapPerfIpTotalInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 5, 5, 4, 4, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("current-interval", 1), ("previous-interval", 2), ("cumulative-counts", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tfrapPerfIpTotalInterval.setStatus('mandatory')
tfrapPerfIpTotalRxTotal = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 5, 5, 4, 4, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tfrapPerfIpTotalRxTotal.setStatus('mandatory')
tfrapPerfIpTotalTxTotal = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 5, 5, 4, 4, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tfrapPerfIpTotalTxTotal.setStatus('mandatory')
tfrapPerfIpTotalRxTcp = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 5, 5, 4, 4, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tfrapPerfIpTotalRxTcp.setStatus('mandatory')
tfrapPerfIpTotalTxTcp = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 5, 5, 4, 4, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tfrapPerfIpTotalTxTcp.setStatus('mandatory')
tfrapPerfIpTotalRxUdp = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 5, 5, 4, 4, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tfrapPerfIpTotalRxUdp.setStatus('mandatory')
tfrapPerfIpTotalTxUdp = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 5, 5, 4, 4, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tfrapPerfIpTotalTxUdp.setStatus('mandatory')
tfrapPerfIpTotalRxIcmp = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 5, 5, 4, 4, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tfrapPerfIpTotalRxIcmp.setStatus('mandatory')
tfrapPerfIpTotalTxIcmp = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 5, 5, 4, 4, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tfrapPerfIpTotalTxIcmp.setStatus('mandatory')
tfrapPerfIpTotalRxOther = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 5, 5, 4, 4, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tfrapPerfIpTotalRxOther.setStatus('mandatory')
tfrapPerfIpTotalTxOther = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 5, 5, 4, 4, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tfrapPerfIpTotalTxOther.setStatus('mandatory')
tfrapPerfIpTotalRxIgrp = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 5, 5, 4, 4, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tfrapPerfIpTotalRxIgrp.setStatus('mandatory')
tfrapPerfIpTotalTxIgrp = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 5, 5, 4, 4, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tfrapPerfIpTotalTxIgrp.setStatus('mandatory')
tfrapPerfIcmpPerDlciTable = MibTable((1, 3, 6, 1, 4, 1, 485, 5, 5, 4, 5), )
if mibBuilder.loadTexts: tfrapPerfIcmpPerDlciTable.setStatus('mandatory')
tfrapPerfIcmpPerDlciEntry = MibTableRow((1, 3, 6, 1, 4, 1, 485, 5, 5, 4, 5, 1), ).setIndexNames((0, "TFRAP-MIB", "tfrapPerfIcmpPerDlciInterval"), (0, "TFRAP-MIB", "tfrapPerfIcmpPerDlciValue"))
if mibBuilder.loadTexts: tfrapPerfIcmpPerDlciEntry.setStatus('mandatory')
tfrapPerfIcmpPerDlciInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 5, 5, 4, 5, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("current-interval", 1), ("previous-interval", 2), ("cumulative-counts", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tfrapPerfIcmpPerDlciInterval.setStatus('mandatory')
tfrapPerfIcmpPerDlciValue = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 5, 5, 4, 5, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tfrapPerfIcmpPerDlciValue.setStatus('mandatory')
tfrapPerfIcmpPerDlciRxTotal = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 5, 5, 4, 5, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tfrapPerfIcmpPerDlciRxTotal.setStatus('mandatory')
tfrapPerfIcmpPerDlciTxTotal = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 5, 5, 4, 5, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tfrapPerfIcmpPerDlciTxTotal.setStatus('mandatory')
tfrapPerfIcmpPerDlciRxEchoRep = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 5, 5, 4, 5, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tfrapPerfIcmpPerDlciRxEchoRep.setStatus('mandatory')
tfrapPerfIcmpPerDlciTxEchoRep = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 5, 5, 4, 5, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tfrapPerfIcmpPerDlciTxEchoRep.setStatus('mandatory')
tfrapPerfIcmpPerDlciRxDestUnr = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 5, 5, 4, 5, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tfrapPerfIcmpPerDlciRxDestUnr.setStatus('mandatory')
tfrapPerfIcmpPerDlciTxDestUnr = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 5, 5, 4, 5, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tfrapPerfIcmpPerDlciTxDestUnr.setStatus('mandatory')
tfrapPerfIcmpPerDlciRxSrcQuench = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 5, 5, 4, 5, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tfrapPerfIcmpPerDlciRxSrcQuench.setStatus('mandatory')
tfrapPerfIcmpPerDlciTxSrcQuench = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 5, 5, 4, 5, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tfrapPerfIcmpPerDlciTxSrcQuench.setStatus('mandatory')
tfrapPerfIcmpPerDlciRxRedirect = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 5, 5, 4, 5, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tfrapPerfIcmpPerDlciRxRedirect.setStatus('mandatory')
tfrapPerfIcmpPerDlciTxRedirect = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 5, 5, 4, 5, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tfrapPerfIcmpPerDlciTxRedirect.setStatus('mandatory')
tfrapPerfIcmpPerDlciRxEchoReq = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 5, 5, 4, 5, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tfrapPerfIcmpPerDlciRxEchoReq.setStatus('mandatory')
tfrapPerfIcmpPerDlciTxEchoReq = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 5, 5, 4, 5, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tfrapPerfIcmpPerDlciTxEchoReq.setStatus('mandatory')
tfrapPerfIcmpPerDlciRxTimeExcd = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 5, 5, 4, 5, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tfrapPerfIcmpPerDlciRxTimeExcd.setStatus('mandatory')
tfrapPerfIcmpPerDlciTxTimeExcd = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 5, 5, 4, 5, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tfrapPerfIcmpPerDlciTxTimeExcd.setStatus('mandatory')
tfrapPerfIcmpPerDlciRxParamProb = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 5, 5, 4, 5, 1, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tfrapPerfIcmpPerDlciRxParamProb.setStatus('mandatory')
tfrapPerfIcmpPerDlciTxParamProb = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 5, 5, 4, 5, 1, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tfrapPerfIcmpPerDlciTxParamProb.setStatus('mandatory')
tfrapPerfIcmpPerDlciRxTimestpReq = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 5, 5, 4, 5, 1, 19), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tfrapPerfIcmpPerDlciRxTimestpReq.setStatus('mandatory')
tfrapPerfIcmpPerDlciTxTimestpReq = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 5, 5, 4, 5, 1, 20), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tfrapPerfIcmpPerDlciTxTimestpReq.setStatus('mandatory')
tfrapPerfIcmpPerDlciRxTimestpRep = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 5, 5, 4, 5, 1, 21), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tfrapPerfIcmpPerDlciRxTimestpRep.setStatus('mandatory')
tfrapPerfIcmpPerDlciTxTimestpRep = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 5, 5, 4, 5, 1, 22), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tfrapPerfIcmpPerDlciTxTimestpRep.setStatus('mandatory')
tfrapPerfIcmpPerDlciRxAddrMaskReq = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 5, 5, 4, 5, 1, 23), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tfrapPerfIcmpPerDlciRxAddrMaskReq.setStatus('mandatory')
tfrapPerfIcmpPerDlciTxAddrMaskReq = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 5, 5, 4, 5, 1, 24), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tfrapPerfIcmpPerDlciTxAddrMaskReq.setStatus('mandatory')
tfrapPerfIcmpPerDlciRxAddrMaskRep = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 5, 5, 4, 5, 1, 25), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tfrapPerfIcmpPerDlciRxAddrMaskRep.setStatus('mandatory')
tfrapPerfIcmpPerDlciTxAddrMaskRep = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 5, 5, 4, 5, 1, 26), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tfrapPerfIcmpPerDlciTxAddrMaskRep.setStatus('mandatory')
tfrapPerfIcmpPerDlciRxPktTooBig = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 5, 5, 4, 5, 1, 27), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tfrapPerfIcmpPerDlciRxPktTooBig.setStatus('mandatory')
tfrapPerfIcmpPerDlciTxPktTooBig = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 5, 5, 4, 5, 1, 28), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tfrapPerfIcmpPerDlciTxPktTooBig.setStatus('mandatory')
tfrapPerfIcmpPerDlciRxGmQuery = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 5, 5, 4, 5, 1, 29), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tfrapPerfIcmpPerDlciRxGmQuery.setStatus('mandatory')
tfrapPerfIcmpPerDlciTxGmQuery = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 5, 5, 4, 5, 1, 30), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tfrapPerfIcmpPerDlciTxGmQuery.setStatus('mandatory')
tfrapPerfIcmpPerDlciRxGmReport = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 5, 5, 4, 5, 1, 31), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tfrapPerfIcmpPerDlciRxGmReport.setStatus('mandatory')
tfrapPerfIcmpPerDlciTxGmReport = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 5, 5, 4, 5, 1, 32), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tfrapPerfIcmpPerDlciTxGmReport.setStatus('mandatory')
tfrapPerfIcmpPerDlciRxGmReduct = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 5, 5, 4, 5, 1, 33), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tfrapPerfIcmpPerDlciRxGmReduct.setStatus('mandatory')
tfrapPerfIcmpPerDlciTxGmReduct = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 5, 5, 4, 5, 1, 34), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tfrapPerfIcmpPerDlciTxGmReduct.setStatus('mandatory')
tfrapPerfIcmpTotalTable = MibTable((1, 3, 6, 1, 4, 1, 485, 5, 5, 4, 6), )
if mibBuilder.loadTexts: tfrapPerfIcmpTotalTable.setStatus('mandatory')
tfrapPerfIcmpTotalEntry = MibTableRow((1, 3, 6, 1, 4, 1, 485, 5, 5, 4, 6, 1), ).setIndexNames((0, "TFRAP-MIB", "tfrapPerfIcmpTotalInterval"))
if mibBuilder.loadTexts: tfrapPerfIcmpTotalEntry.setStatus('mandatory')
tfrapPerfIcmpTotalInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 5, 5, 4, 6, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("current-interval", 1), ("previous-interval", 2), ("cumulative-counts", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tfrapPerfIcmpTotalInterval.setStatus('mandatory')
tfrapPerfIcmpTotalRxTotal = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 5, 5, 4, 6, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tfrapPerfIcmpTotalRxTotal.setStatus('mandatory')
tfrapPerfIcmpTotalTxTotal = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 5, 5, 4, 6, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tfrapPerfIcmpTotalTxTotal.setStatus('mandatory')
tfrapPerfIcmpTotalRxEchoRep = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 5, 5, 4, 6, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tfrapPerfIcmpTotalRxEchoRep.setStatus('mandatory')
tfrapPerfIcmpTotalTxEchoRep = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 5, 5, 4, 6, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tfrapPerfIcmpTotalTxEchoRep.setStatus('mandatory')
tfrapPerfIcmpTotalRxDestUnr = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 5, 5, 4, 6, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tfrapPerfIcmpTotalRxDestUnr.setStatus('mandatory')
tfrapPerfIcmpTotalTxDestUnr = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 5, 5, 4, 6, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tfrapPerfIcmpTotalTxDestUnr.setStatus('mandatory')
tfrapPerfIcmpTotalRxSrcQuench = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 5, 5, 4, 6, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tfrapPerfIcmpTotalRxSrcQuench.setStatus('mandatory')
tfrapPerfIcmpTotalTxSrcQuench = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 5, 5, 4, 6, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tfrapPerfIcmpTotalTxSrcQuench.setStatus('mandatory')
tfrapPerfIcmpTotalRxRedirect = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 5, 5, 4, 6, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tfrapPerfIcmpTotalRxRedirect.setStatus('mandatory')
tfrapPerfIcmpTotalTxRedirect = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 5, 5, 4, 6, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tfrapPerfIcmpTotalTxRedirect.setStatus('mandatory')
tfrapPerfIcmpTotalRxEchoReq = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 5, 5, 4, 6, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tfrapPerfIcmpTotalRxEchoReq.setStatus('mandatory')
tfrapPerfIcmpTotalTxEchoReq = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 5, 5, 4, 6, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tfrapPerfIcmpTotalTxEchoReq.setStatus('mandatory')
tfrapPerfIcmpTotalRxTimeExcd = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 5, 5, 4, 6, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tfrapPerfIcmpTotalRxTimeExcd.setStatus('mandatory')
tfrapPerfIcmpTotalTxTimeExcd = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 5, 5, 4, 6, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tfrapPerfIcmpTotalTxTimeExcd.setStatus('mandatory')
tfrapPerfIcmpTotalRxParamProb = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 5, 5, 4, 6, 1, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tfrapPerfIcmpTotalRxParamProb.setStatus('mandatory')
tfrapPerfIcmpTotalTxParamProb = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 5, 5, 4, 6, 1, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tfrapPerfIcmpTotalTxParamProb.setStatus('mandatory')
tfrapPerfIcmpTotalRxTimestpReq = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 5, 5, 4, 6, 1, 19), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tfrapPerfIcmpTotalRxTimestpReq.setStatus('mandatory')
tfrapPerfIcmpTotalTxTimestpReq = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 5, 5, 4, 6, 1, 20), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tfrapPerfIcmpTotalTxTimestpReq.setStatus('mandatory')
tfrapPerfIcmpTotalRxTimestpRep = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 5, 5, 4, 6, 1, 21), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tfrapPerfIcmpTotalRxTimestpRep.setStatus('mandatory')
tfrapPerfIcmpTotalTxTimestpRep = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 5, 5, 4, 6, 1, 22), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tfrapPerfIcmpTotalTxTimestpRep.setStatus('mandatory')
tfrapPerfIcmpTotalRxAddrMaskReq = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 5, 5, 4, 6, 1, 23), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tfrapPerfIcmpTotalRxAddrMaskReq.setStatus('mandatory')
tfrapPerfIcmpTotalTxAddrMaskReq = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 5, 5, 4, 6, 1, 24), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tfrapPerfIcmpTotalTxAddrMaskReq.setStatus('mandatory')
tfrapPerfIcmpTotalRxAddrMaskRep = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 5, 5, 4, 6, 1, 25), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tfrapPerfIcmpTotalRxAddrMaskRep.setStatus('mandatory')
tfrapPerfIcmpTotalTxAddrMaskRep = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 5, 5, 4, 6, 1, 26), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tfrapPerfIcmpTotalTxAddrMaskRep.setStatus('mandatory')
tfrapPerfIcmpTotalRxPktTooBig = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 5, 5, 4, 6, 1, 27), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tfrapPerfIcmpTotalRxPktTooBig.setStatus('mandatory')
tfrapPerfIcmpTotalTxPktTooBig = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 5, 5, 4, 6, 1, 28), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tfrapPerfIcmpTotalTxPktTooBig.setStatus('mandatory')
tfrapPerfIcmpTotalRxGmQuery = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 5, 5, 4, 6, 1, 29), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tfrapPerfIcmpTotalRxGmQuery.setStatus('mandatory')
tfrapPerfIcmpTotalTxGmQuery = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 5, 5, 4, 6, 1, 30), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tfrapPerfIcmpTotalTxGmQuery.setStatus('mandatory')
tfrapPerfIcmpTotalRxGmReport = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 5, 5, 4, 6, 1, 31), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tfrapPerfIcmpTotalRxGmReport.setStatus('mandatory')
tfrapPerfIcmpTotalTxGmReport = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 5, 5, 4, 6, 1, 32), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tfrapPerfIcmpTotalTxGmReport.setStatus('mandatory')
tfrapPerfIcmpTotalRxGmReduct = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 5, 5, 4, 6, 1, 33), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tfrapPerfIcmpTotalRxGmReduct.setStatus('mandatory')
tfrapPerfIcmpTotalTxGmReduct = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 5, 5, 4, 6, 1, 34), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tfrapPerfIcmpTotalTxGmReduct.setStatus('mandatory')
tfrapPerfApplicationPerDlciTable = MibTable((1, 3, 6, 1, 4, 1, 485, 5, 5, 4, 7), )
if mibBuilder.loadTexts: tfrapPerfApplicationPerDlciTable.setStatus('mandatory')
tfrapPerfApplicationPerDlciEntry = MibTableRow((1, 3, 6, 1, 4, 1, 485, 5, 5, 4, 7, 1), ).setIndexNames((0, "TFRAP-MIB", "tfrapPerfApplicationPerDlciInterval"), (0, "TFRAP-MIB", "tfrapPerfApplicationPerDlciValue"))
if mibBuilder.loadTexts: tfrapPerfApplicationPerDlciEntry.setStatus('mandatory')
tfrapPerfApplicationPerDlciInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 5, 5, 4, 7, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("current-interval", 1), ("previous-interval", 2), ("cumulative-counts", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tfrapPerfApplicationPerDlciInterval.setStatus('mandatory')
tfrapPerfApplicationPerDlciValue = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 5, 5, 4, 7, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tfrapPerfApplicationPerDlciValue.setStatus('mandatory')
tfrapPerfApplicationPerDlciRxSnmp = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 5, 5, 4, 7, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tfrapPerfApplicationPerDlciRxSnmp.setStatus('mandatory')
tfrapPerfApplicationPerDlciTxSnmp = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 5, 5, 4, 7, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tfrapPerfApplicationPerDlciTxSnmp.setStatus('mandatory')
tfrapPerfApplicationPerDlciRxSnmpTrap = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 5, 5, 4, 7, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tfrapPerfApplicationPerDlciRxSnmpTrap.setStatus('mandatory')
tfrapPerfApplicationPerDlciTxSnmpTrap = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 5, 5, 4, 7, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tfrapPerfApplicationPerDlciTxSnmpTrap.setStatus('mandatory')
tfrapPerfApplicationPerDlciRxHttp = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 5, 5, 4, 7, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tfrapPerfApplicationPerDlciRxHttp.setStatus('mandatory')
tfrapPerfApplicationPerDlciTxHttp = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 5, 5, 4, 7, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tfrapPerfApplicationPerDlciTxHttp.setStatus('mandatory')
tfrapPerfApplicationPerDlciRxTelnet = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 5, 5, 4, 7, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tfrapPerfApplicationPerDlciRxTelnet.setStatus('mandatory')
tfrapPerfApplicationPerDlciTxTelnet = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 5, 5, 4, 7, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tfrapPerfApplicationPerDlciTxTelnet.setStatus('mandatory')
tfrapPerfApplicationPerDlciRxSmtp = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 5, 5, 4, 7, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tfrapPerfApplicationPerDlciRxSmtp.setStatus('mandatory')
tfrapPerfApplicationPerDlciTxSmtp = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 5, 5, 4, 7, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tfrapPerfApplicationPerDlciTxSmtp.setStatus('mandatory')
tfrapPerfApplicationPerDlciRxFtp = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 5, 5, 4, 7, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tfrapPerfApplicationPerDlciRxFtp.setStatus('mandatory')
tfrapPerfApplicationPerDlciTxFtp = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 5, 5, 4, 7, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tfrapPerfApplicationPerDlciTxFtp.setStatus('mandatory')
tfrapPerfApplicationPerDlciRxTftp = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 5, 5, 4, 7, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tfrapPerfApplicationPerDlciRxTftp.setStatus('mandatory')
tfrapPerfApplicationPerDlciTxTftp = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 5, 5, 4, 7, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tfrapPerfApplicationPerDlciTxTftp.setStatus('mandatory')
tfrapPerfApplicationPerDlciRxCustom1 = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 5, 5, 4, 7, 1, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tfrapPerfApplicationPerDlciRxCustom1.setStatus('mandatory')
tfrapPerfApplicationPerDlciTxCustom1 = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 5, 5, 4, 7, 1, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tfrapPerfApplicationPerDlciTxCustom1.setStatus('mandatory')
tfrapPerfApplicationPerDlciRxCustom2 = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 5, 5, 4, 7, 1, 19), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tfrapPerfApplicationPerDlciRxCustom2.setStatus('mandatory')
tfrapPerfApplicationPerDlciTxCustom2 = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 5, 5, 4, 7, 1, 20), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tfrapPerfApplicationPerDlciTxCustom2.setStatus('mandatory')
tfrapPerfApplicationPerDlciRxCustom3 = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 5, 5, 4, 7, 1, 21), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tfrapPerfApplicationPerDlciRxCustom3.setStatus('mandatory')
tfrapPerfApplicationPerDlciTxCustom3 = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 5, 5, 4, 7, 1, 22), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tfrapPerfApplicationPerDlciTxCustom3.setStatus('mandatory')
tfrapPerfApplicationPerDlciRxCustom4 = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 5, 5, 4, 7, 1, 23), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tfrapPerfApplicationPerDlciRxCustom4.setStatus('mandatory')
tfrapPerfApplicationPerDlciTxCustom4 = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 5, 5, 4, 7, 1, 24), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tfrapPerfApplicationPerDlciTxCustom4.setStatus('mandatory')
tfrapPerfApplicationTotalTable = MibTable((1, 3, 6, 1, 4, 1, 485, 5, 5, 4, 8), )
if mibBuilder.loadTexts: tfrapPerfApplicationTotalTable.setStatus('mandatory')
tfrapPerfApplicationTotalEntry = MibTableRow((1, 3, 6, 1, 4, 1, 485, 5, 5, 4, 8, 1), ).setIndexNames((0, "TFRAP-MIB", "tfrapPerfApplicationTotalInterval"))
if mibBuilder.loadTexts: tfrapPerfApplicationTotalEntry.setStatus('mandatory')
tfrapPerfApplicationTotalInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 5, 5, 4, 8, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("current-interval", 1), ("previous-interval", 2), ("cumulative-counts", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tfrapPerfApplicationTotalInterval.setStatus('mandatory')
tfrapPerfApplicationTotalRxSnmp = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 5, 5, 4, 8, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tfrapPerfApplicationTotalRxSnmp.setStatus('mandatory')
tfrapPerfApplicationTotalTxSnmp = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 5, 5, 4, 8, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tfrapPerfApplicationTotalTxSnmp.setStatus('mandatory')
tfrapPerfApplicationTotalRxSnmpTrap = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 5, 5, 4, 8, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tfrapPerfApplicationTotalRxSnmpTrap.setStatus('mandatory')
tfrapPerfApplicationTotalTxSnmpTrap = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 5, 5, 4, 8, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tfrapPerfApplicationTotalTxSnmpTrap.setStatus('mandatory')
tfrapPerfApplicationTotalRxHttp = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 5, 5, 4, 8, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tfrapPerfApplicationTotalRxHttp.setStatus('mandatory')
tfrapPerfApplicationTotalTxHttp = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 5, 5, 4, 8, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tfrapPerfApplicationTotalTxHttp.setStatus('mandatory')
tfrapPerfApplicationTotalRxTelnet = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 5, 5, 4, 8, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tfrapPerfApplicationTotalRxTelnet.setStatus('mandatory')
tfrapPerfApplicationTotalTxTelnet = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 5, 5, 4, 8, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tfrapPerfApplicationTotalTxTelnet.setStatus('mandatory')
tfrapPerfApplicationTotalRxSmtp = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 5, 5, 4, 8, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tfrapPerfApplicationTotalRxSmtp.setStatus('mandatory')
tfrapPerfApplicationTotalTxSmtp = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 5, 5, 4, 8, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tfrapPerfApplicationTotalTxSmtp.setStatus('mandatory')
tfrapPerfApplicationTotalRxFtp = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 5, 5, 4, 8, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tfrapPerfApplicationTotalRxFtp.setStatus('mandatory')
tfrapPerfApplicationTotalTxFtp = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 5, 5, 4, 8, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tfrapPerfApplicationTotalTxFtp.setStatus('mandatory')
tfrapPerfApplicationTotalRxTftp = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 5, 5, 4, 8, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tfrapPerfApplicationTotalRxTftp.setStatus('mandatory')
tfrapPerfApplicationTotalTxTftp = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 5, 5, 4, 8, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tfrapPerfApplicationTotalTxTftp.setStatus('mandatory')
tfrapPerfApplicationTotalRxCustom1 = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 5, 5, 4, 8, 1, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tfrapPerfApplicationTotalRxCustom1.setStatus('mandatory')
tfrapPerfApplicationTotalTxCustom1 = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 5, 5, 4, 8, 1, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tfrapPerfApplicationTotalTxCustom1.setStatus('mandatory')
tfrapPerfApplicationTotalRxCustom2 = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 5, 5, 4, 8, 1, 19), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tfrapPerfApplicationTotalRxCustom2.setStatus('mandatory')
tfrapPerfApplicationTotalTxCustom2 = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 5, 5, 4, 8, 1, 20), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tfrapPerfApplicationTotalTxCustom2.setStatus('mandatory')
tfrapPerfApplicationTotalRxCustom3 = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 5, 5, 4, 8, 1, 21), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tfrapPerfApplicationTotalRxCustom3.setStatus('mandatory')
tfrapPerfApplicationTotalTxCustom3 = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 5, 5, 4, 8, 1, 22), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tfrapPerfApplicationTotalTxCustom3.setStatus('mandatory')
tfrapPerfApplicationTotalRxCustom4 = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 5, 5, 4, 8, 1, 23), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tfrapPerfApplicationTotalRxCustom4.setStatus('mandatory')
tfrapPerfApplicationTotalTxCustom4 = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 5, 5, 4, 8, 1, 24), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tfrapPerfApplicationTotalTxCustom4.setStatus('mandatory')
tfrapPerfRoutingPerDlciTable = MibTable((1, 3, 6, 1, 4, 1, 485, 5, 5, 4, 9), )
if mibBuilder.loadTexts: tfrapPerfRoutingPerDlciTable.setStatus('mandatory')
tfrapPerfRoutingPerDlciEntry = MibTableRow((1, 3, 6, 1, 4, 1, 485, 5, 5, 4, 9, 1), ).setIndexNames((0, "TFRAP-MIB", "tfrapPerfRoutingPerDlciInterval"), (0, "TFRAP-MIB", "tfrapPerfRoutingPerDlciValue"))
if mibBuilder.loadTexts: tfrapPerfRoutingPerDlciEntry.setStatus('mandatory')
tfrapPerfRoutingPerDlciInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 5, 5, 4, 9, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("current-interval", 1), ("previous-interval", 2), ("cumulative-counts", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tfrapPerfRoutingPerDlciInterval.setStatus('mandatory')
tfrapPerfRoutingPerDlciValue = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 5, 5, 4, 9, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tfrapPerfRoutingPerDlciValue.setStatus('mandatory')
tfrapPerfRoutingPerDlciRxOspf = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 5, 5, 4, 9, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tfrapPerfRoutingPerDlciRxOspf.setStatus('mandatory')
tfrapPerfRoutingPerDlciTxOspf = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 5, 5, 4, 9, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tfrapPerfRoutingPerDlciTxOspf.setStatus('mandatory')
tfrapPerfRoutingPerDlciRxRip = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 5, 5, 4, 9, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tfrapPerfRoutingPerDlciRxRip.setStatus('mandatory')
tfrapPerfRoutingPerDlciTxRip = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 5, 5, 4, 9, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tfrapPerfRoutingPerDlciTxRip.setStatus('mandatory')
tfrapPerfRoutingPerDlciRxNetbios = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 5, 5, 4, 9, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tfrapPerfRoutingPerDlciRxNetbios.setStatus('mandatory')
tfrapPerfRoutingPerDlciTxNetbios = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 5, 5, 4, 9, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tfrapPerfRoutingPerDlciTxNetbios.setStatus('mandatory')
tfrapPerfRoutingTotalTable = MibTable((1, 3, 6, 1, 4, 1, 485, 5, 5, 4, 10), )
if mibBuilder.loadTexts: tfrapPerfRoutingTotalTable.setStatus('mandatory')
tfrapPerfRoutingTotalEntry = MibTableRow((1, 3, 6, 1, 4, 1, 485, 5, 5, 4, 10, 1), ).setIndexNames((0, "TFRAP-MIB", "tfrapPerfRoutingTotalInterval"))
if mibBuilder.loadTexts: tfrapPerfRoutingTotalEntry.setStatus('mandatory')
tfrapPerfRoutingTotalInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 5, 5, 4, 10, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("current-interval", 1), ("previous-interval", 2), ("cumulative-counts", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tfrapPerfRoutingTotalInterval.setStatus('mandatory')
tfrapPerfRoutingTotalRxOspf = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 5, 5, 4, 10, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tfrapPerfRoutingTotalRxOspf.setStatus('mandatory')
tfrapPerfRoutingTotalTxOspf = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 5, 5, 4, 10, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tfrapPerfRoutingTotalTxOspf.setStatus('mandatory')
tfrapPerfRoutingTotalRxRip = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 5, 5, 4, 10, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tfrapPerfRoutingTotalRxRip.setStatus('mandatory')
tfrapPerfRoutingTotalTxRip = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 5, 5, 4, 10, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tfrapPerfRoutingTotalTxRip.setStatus('mandatory')
tfrapPerfRoutingTotalRxNetbios = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 5, 5, 4, 10, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tfrapPerfRoutingTotalRxNetbios.setStatus('mandatory')
tfrapPerfRoutingTotalTxNetbios = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 5, 5, 4, 10, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tfrapPerfRoutingTotalTxNetbios.setStatus('mandatory')
tfrapPerfIpxPerDlciTable = MibTable((1, 3, 6, 1, 4, 1, 485, 5, 5, 4, 11), )
if mibBuilder.loadTexts: tfrapPerfIpxPerDlciTable.setStatus('mandatory')
tfrapPerfIpxPerDlciEntry = MibTableRow((1, 3, 6, 1, 4, 1, 485, 5, 5, 4, 11, 1), ).setIndexNames((0, "TFRAP-MIB", "tfrapPerfIpxPerDlciInterval"), (0, "TFRAP-MIB", "tfrapPerfIpxPerDlciValue"))
if mibBuilder.loadTexts: tfrapPerfIpxPerDlciEntry.setStatus('mandatory')
tfrapPerfIpxPerDlciInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 5, 5, 4, 11, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("current-interval", 1), ("previous-interval", 2), ("cumulative-counts", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tfrapPerfIpxPerDlciInterval.setStatus('mandatory')
tfrapPerfIpxPerDlciValue = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 5, 5, 4, 11, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tfrapPerfIpxPerDlciValue.setStatus('mandatory')
tfrapPerfIpxPerDlciRxTotal = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 5, 5, 4, 11, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tfrapPerfIpxPerDlciRxTotal.setStatus('mandatory')
tfrapPerfIpxPerDlciTxTotal = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 5, 5, 4, 11, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tfrapPerfIpxPerDlciTxTotal.setStatus('mandatory')
tfrapPerfIpxPerDlciRxSpx = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 5, 5, 4, 11, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tfrapPerfIpxPerDlciRxSpx.setStatus('mandatory')
tfrapPerfIpxPerDlciTxSpx = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 5, 5, 4, 11, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tfrapPerfIpxPerDlciTxSpx.setStatus('mandatory')
tfrapPerfIpxPerDlciRxNcp = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 5, 5, 4, 11, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tfrapPerfIpxPerDlciRxNcp.setStatus('mandatory')
tfrapPerfIpxPerDlciTxNcp = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 5, 5, 4, 11, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tfrapPerfIpxPerDlciTxNcp.setStatus('mandatory')
tfrapPerfIpxPerDlciRxSap = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 5, 5, 4, 11, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tfrapPerfIpxPerDlciRxSap.setStatus('mandatory')
tfrapPerfIpxPerDlciTxSap = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 5, 5, 4, 11, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tfrapPerfIpxPerDlciTxSap.setStatus('mandatory')
tfrapPerfIpxPerDlciRxRip = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 5, 5, 4, 11, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tfrapPerfIpxPerDlciRxRip.setStatus('mandatory')
tfrapPerfIpxPerDlciTxRip = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 5, 5, 4, 11, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tfrapPerfIpxPerDlciTxRip.setStatus('mandatory')
tfrapPerfIpxPerDlciRxNetbios = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 5, 5, 4, 11, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tfrapPerfIpxPerDlciRxNetbios.setStatus('mandatory')
tfrapPerfIpxPerDlciTxNetbios = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 5, 5, 4, 11, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tfrapPerfIpxPerDlciTxNetbios.setStatus('mandatory')
tfrapPerfIpxPerDlciRxOther = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 5, 5, 4, 11, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tfrapPerfIpxPerDlciRxOther.setStatus('mandatory')
tfrapPerfIpxPerDlciTxOther = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 5, 5, 4, 11, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tfrapPerfIpxPerDlciTxOther.setStatus('mandatory')
tfrapPerfIpxTotalTable = MibTable((1, 3, 6, 1, 4, 1, 485, 5, 5, 4, 12), )
if mibBuilder.loadTexts: tfrapPerfIpxTotalTable.setStatus('mandatory')
tfrapPerfIpxTotalEntry = MibTableRow((1, 3, 6, 1, 4, 1, 485, 5, 5, 4, 12, 1), ).setIndexNames((0, "TFRAP-MIB", "tfrapPerfIpxTotalInterval"))
if mibBuilder.loadTexts: tfrapPerfIpxTotalEntry.setStatus('mandatory')
tfrapPerfIpxTotalInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 5, 5, 4, 12, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("current-interval", 1), ("previous-interval", 2), ("cumulative-counts", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tfrapPerfIpxTotalInterval.setStatus('mandatory')
tfrapPerfIpxTotalRxTotal = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 5, 5, 4, 12, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tfrapPerfIpxTotalRxTotal.setStatus('mandatory')
tfrapPerfIpxTotalTxTotal = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 5, 5, 4, 12, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tfrapPerfIpxTotalTxTotal.setStatus('mandatory')
tfrapPerfIpxTotalRxSpx = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 5, 5, 4, 12, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tfrapPerfIpxTotalRxSpx.setStatus('mandatory')
tfrapPerfIpxTotalTxSpx = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 5, 5, 4, 12, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tfrapPerfIpxTotalTxSpx.setStatus('mandatory')
tfrapPerfIpxTotalRxNcp = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 5, 5, 4, 12, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tfrapPerfIpxTotalRxNcp.setStatus('mandatory')
tfrapPerfIpxTotalTxNcp = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 5, 5, 4, 12, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tfrapPerfIpxTotalTxNcp.setStatus('mandatory')
tfrapPerfIpxTotalRxSap = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 5, 5, 4, 12, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tfrapPerfIpxTotalRxSap.setStatus('mandatory')
tfrapPerfIpxTotalTxSap = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 5, 5, 4, 12, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tfrapPerfIpxTotalTxSap.setStatus('mandatory')
tfrapPerfIpxTotalRxRip = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 5, 5, 4, 12, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tfrapPerfIpxTotalRxRip.setStatus('mandatory')
tfrapPerfIpxTotalTxRip = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 5, 5, 4, 12, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tfrapPerfIpxTotalTxRip.setStatus('mandatory')
tfrapPerfIpxTotalRxNetbios = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 5, 5, 4, 12, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tfrapPerfIpxTotalRxNetbios.setStatus('mandatory')
tfrapPerfIpxTotalTxNetbios = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 5, 5, 4, 12, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tfrapPerfIpxTotalTxNetbios.setStatus('mandatory')
tfrapPerfIpxTotalRxOther = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 5, 5, 4, 12, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tfrapPerfIpxTotalRxOther.setStatus('mandatory')
tfrapPerfIpxTotalTxOther = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 5, 5, 4, 12, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tfrapPerfIpxTotalTxOther.setStatus('mandatory')
tfrapPerfSnaPerDlciTable = MibTable((1, 3, 6, 1, 4, 1, 485, 5, 5, 4, 13), )
if mibBuilder.loadTexts: tfrapPerfSnaPerDlciTable.setStatus('mandatory')
tfrapPerfSnaPerDlciEntry = MibTableRow((1, 3, 6, 1, 4, 1, 485, 5, 5, 4, 13, 1), ).setIndexNames((0, "TFRAP-MIB", "tfrapPerfSnaPerDlciInterval"), (0, "TFRAP-MIB", "tfrapPerfSnaPerDlciValue"))
if mibBuilder.loadTexts: tfrapPerfSnaPerDlciEntry.setStatus('mandatory')
tfrapPerfSnaPerDlciInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 5, 5, 4, 13, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("current-interval", 1), ("previous-interval", 2), ("cumulative-counts", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tfrapPerfSnaPerDlciInterval.setStatus('mandatory')
tfrapPerfSnaPerDlciValue = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 5, 5, 4, 13, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tfrapPerfSnaPerDlciValue.setStatus('mandatory')
tfrapPerfSnaPerDlciRxTotal = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 5, 5, 4, 13, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tfrapPerfSnaPerDlciRxTotal.setStatus('mandatory')
tfrapPerfSnaPerDlciTxTotal = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 5, 5, 4, 13, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tfrapPerfSnaPerDlciTxTotal.setStatus('mandatory')
tfrapPerfSnaPerDlciRxSubarea = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 5, 5, 4, 13, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tfrapPerfSnaPerDlciRxSubarea.setStatus('mandatory')
tfrapPerfSnaPerDlciTxSubarea = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 5, 5, 4, 13, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tfrapPerfSnaPerDlciTxSubarea.setStatus('mandatory')
tfrapPerfSnaPerDlciRxPeriph = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 5, 5, 4, 13, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tfrapPerfSnaPerDlciRxPeriph.setStatus('mandatory')
tfrapPerfSnaPerDlciTxPeriph = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 5, 5, 4, 13, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tfrapPerfSnaPerDlciTxPeriph.setStatus('mandatory')
tfrapPerfSnaPerDlciRxAppn = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 5, 5, 4, 13, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tfrapPerfSnaPerDlciRxAppn.setStatus('mandatory')
tfrapPerfSnaPerDlciTxAppn = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 5, 5, 4, 13, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tfrapPerfSnaPerDlciTxAppn.setStatus('mandatory')
tfrapPerfSnaPerDlciRxNetbios = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 5, 5, 4, 13, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tfrapPerfSnaPerDlciRxNetbios.setStatus('mandatory')
tfrapPerfSnaPerDlciTxNetbios = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 5, 5, 4, 13, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tfrapPerfSnaPerDlciTxNetbios.setStatus('mandatory')
tfrapPerfSnaPerDlciRxOther = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 5, 5, 4, 13, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tfrapPerfSnaPerDlciRxOther.setStatus('mandatory')
tfrapPerfSnaPerDlciTxOther = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 5, 5, 4, 13, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tfrapPerfSnaPerDlciTxOther.setStatus('mandatory')
tfrapPerfSnaTotalTable = MibTable((1, 3, 6, 1, 4, 1, 485, 5, 5, 4, 14), )
if mibBuilder.loadTexts: tfrapPerfSnaTotalTable.setStatus('mandatory')
tfrapPerfSnaTotalEntry = MibTableRow((1, 3, 6, 1, 4, 1, 485, 5, 5, 4, 14, 1), ).setIndexNames((0, "TFRAP-MIB", "tfrapPerfSnaTotalInterval"))
if mibBuilder.loadTexts: tfrapPerfSnaTotalEntry.setStatus('mandatory')
tfrapPerfSnaTotalInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 5, 5, 4, 14, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("current-interval", 1), ("previous-interval", 2), ("cumulative-counts", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tfrapPerfSnaTotalInterval.setStatus('mandatory')
tfrapPerfSnaTotalRxTotal = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 5, 5, 4, 14, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tfrapPerfSnaTotalRxTotal.setStatus('mandatory')
tfrapPerfSnaTotalTxTotal = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 5, 5, 4, 14, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tfrapPerfSnaTotalTxTotal.setStatus('mandatory')
tfrapPerfSnaTotalRxSubarea = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 5, 5, 4, 14, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tfrapPerfSnaTotalRxSubarea.setStatus('mandatory')
tfrapPerfSnaTotalTxSubarea = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 5, 5, 4, 14, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tfrapPerfSnaTotalTxSubarea.setStatus('mandatory')
tfrapPerfSnaTotalRxPeriph = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 5, 5, 4, 14, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tfrapPerfSnaTotalRxPeriph.setStatus('mandatory')
tfrapPerfSnaTotalTxPeriph = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 5, 5, 4, 14, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tfrapPerfSnaTotalTxPeriph.setStatus('mandatory')
tfrapPerfSnaTotalRxAppn = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 5, 5, 4, 14, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tfrapPerfSnaTotalRxAppn.setStatus('mandatory')
tfrapPerfSnaTotalTxAppn = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 5, 5, 4, 14, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tfrapPerfSnaTotalTxAppn.setStatus('mandatory')
tfrapPerfSnaTotalRxNetbios = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 5, 5, 4, 14, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tfrapPerfSnaTotalRxNetbios.setStatus('mandatory')
tfrapPerfSnaTotalTxNetbios = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 5, 5, 4, 14, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tfrapPerfSnaTotalTxNetbios.setStatus('mandatory')
tfrapPerfSnaTotalRxOther = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 5, 5, 4, 14, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tfrapPerfSnaTotalRxOther.setStatus('mandatory')
tfrapPerfSnaTotalTxOther = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 5, 5, 4, 14, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tfrapPerfSnaTotalTxOther.setStatus('mandatory')
tfrapPerfArpPerDlciTable = MibTable((1, 3, 6, 1, 4, 1, 485, 5, 5, 4, 15), )
if mibBuilder.loadTexts: tfrapPerfArpPerDlciTable.setStatus('mandatory')
tfrapPerfArpPerDlciEntry = MibTableRow((1, 3, 6, 1, 4, 1, 485, 5, 5, 4, 15, 1), ).setIndexNames((0, "TFRAP-MIB", "tfrapPerfArpPerDlciInterval"), (0, "TFRAP-MIB", "tfrapPerfArpPerDlciValue"))
if mibBuilder.loadTexts: tfrapPerfArpPerDlciEntry.setStatus('mandatory')
tfrapPerfArpPerDlciInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 5, 5, 4, 15, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("current-interval", 1), ("previous-interval", 2), ("cumulative-counts", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tfrapPerfArpPerDlciInterval.setStatus('mandatory')
tfrapPerfArpPerDlciValue = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 5, 5, 4, 15, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tfrapPerfArpPerDlciValue.setStatus('mandatory')
tfrapPerfArpPerDlciRxTotal = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 5, 5, 4, 15, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tfrapPerfArpPerDlciRxTotal.setStatus('mandatory')
tfrapPerfArpPerDlciTxTotal = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 5, 5, 4, 15, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tfrapPerfArpPerDlciTxTotal.setStatus('mandatory')
tfrapPerfArpPerDlciRxArpReq = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 5, 5, 4, 15, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tfrapPerfArpPerDlciRxArpReq.setStatus('mandatory')
tfrapPerfArpPerDlciTxArpReq = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 5, 5, 4, 15, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tfrapPerfArpPerDlciTxArpReq.setStatus('mandatory')
tfrapPerfArpPerDlciRxArpRep = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 5, 5, 4, 15, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tfrapPerfArpPerDlciRxArpRep.setStatus('mandatory')
tfrapPerfArpPerDlciTxArpRep = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 5, 5, 4, 15, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tfrapPerfArpPerDlciTxArpRep.setStatus('mandatory')
tfrapPerfArpPerDlciRxRarpReq = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 5, 5, 4, 15, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tfrapPerfArpPerDlciRxRarpReq.setStatus('mandatory')
tfrapPerfArpPerDlciTxRarpReq = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 5, 5, 4, 15, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tfrapPerfArpPerDlciTxRarpReq.setStatus('mandatory')
tfrapPerfArpPerDlciRxRarpRep = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 5, 5, 4, 15, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tfrapPerfArpPerDlciRxRarpRep.setStatus('mandatory')
tfrapPerfArpPerDlciTxRarpRep = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 5, 5, 4, 15, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tfrapPerfArpPerDlciTxRarpRep.setStatus('mandatory')
tfrapPerfArpPerDlciRxInarpReq = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 5, 5, 4, 15, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tfrapPerfArpPerDlciRxInarpReq.setStatus('mandatory')
tfrapPerfArpPerDlciTxInarpReq = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 5, 5, 4, 15, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tfrapPerfArpPerDlciTxInarpReq.setStatus('mandatory')
tfrapPerfArpPerDlciRxInarpRep = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 5, 5, 4, 15, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tfrapPerfArpPerDlciRxInarpRep.setStatus('mandatory')
tfrapPerfArpPerDlciTxInarpRep = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 5, 5, 4, 15, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tfrapPerfArpPerDlciTxInarpRep.setStatus('mandatory')
tfrapPerfArpPerDlciRxOther = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 5, 5, 4, 15, 1, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tfrapPerfArpPerDlciRxOther.setStatus('mandatory')
tfrapPerfArpPerDlciTxOther = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 5, 5, 4, 15, 1, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tfrapPerfArpPerDlciTxOther.setStatus('mandatory')
tfrapPerfArpTotalTable = MibTable((1, 3, 6, 1, 4, 1, 485, 5, 5, 4, 16), )
if mibBuilder.loadTexts: tfrapPerfArpTotalTable.setStatus('mandatory')
tfrapPerfArpTotalEntry = MibTableRow((1, 3, 6, 1, 4, 1, 485, 5, 5, 4, 16, 1), ).setIndexNames((0, "TFRAP-MIB", "tfrapPerfArpTotalInterval"))
if mibBuilder.loadTexts: tfrapPerfArpTotalEntry.setStatus('mandatory')
tfrapPerfArpTotalInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 5, 5, 4, 16, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("current-interval", 1), ("previous-interval", 2), ("cumulative-counts", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tfrapPerfArpTotalInterval.setStatus('mandatory')
tfrapPerfArpTotalRxTotal = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 5, 5, 4, 16, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tfrapPerfArpTotalRxTotal.setStatus('mandatory')
tfrapPerfArpTotalTxTotal = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 5, 5, 4, 16, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tfrapPerfArpTotalTxTotal.setStatus('mandatory')
tfrapPerfArpTotalRxArpReq = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 5, 5, 4, 16, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tfrapPerfArpTotalRxArpReq.setStatus('mandatory')
tfrapPerfArpTotalTxArpReq = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 5, 5, 4, 16, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tfrapPerfArpTotalTxArpReq.setStatus('mandatory')
tfrapPerfArpTotalRxArpRep = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 5, 5, 4, 16, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tfrapPerfArpTotalRxArpRep.setStatus('mandatory')
tfrapPerfArpTotalTxArpRep = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 5, 5, 4, 16, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tfrapPerfArpTotalTxArpRep.setStatus('mandatory')
tfrapPerfArpTotalRxRarpReq = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 5, 5, 4, 16, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tfrapPerfArpTotalRxRarpReq.setStatus('mandatory')
tfrapPerfArpTotalTxRarpReq = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 5, 5, 4, 16, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tfrapPerfArpTotalTxRarpReq.setStatus('mandatory')
tfrapPerfArpTotalRxRarpRep = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 5, 5, 4, 16, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tfrapPerfArpTotalRxRarpRep.setStatus('mandatory')
tfrapPerfArpTotalTxRarpRep = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 5, 5, 4, 16, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tfrapPerfArpTotalTxRarpRep.setStatus('mandatory')
tfrapPerfArpTotalRxInarpReq = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 5, 5, 4, 16, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tfrapPerfArpTotalRxInarpReq.setStatus('mandatory')
tfrapPerfArpTotalTxInarpReq = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 5, 5, 4, 16, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tfrapPerfArpTotalTxInarpReq.setStatus('mandatory')
tfrapPerfArpTotalRxInarpRep = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 5, 5, 4, 16, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tfrapPerfArpTotalRxInarpRep.setStatus('mandatory')
tfrapPerfArpTotalTxInarpRep = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 5, 5, 4, 16, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tfrapPerfArpTotalTxInarpRep.setStatus('mandatory')
tfrapPerfArpTotalRxOther = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 5, 5, 4, 16, 1, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tfrapPerfArpTotalRxOther.setStatus('mandatory')
tfrapPerfArpTotalTxOther = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 5, 5, 4, 16, 1, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tfrapPerfArpTotalTxOther.setStatus('mandatory')
tfrapPerfLmiPerDlciTable = MibTable((1, 3, 6, 1, 4, 1, 485, 5, 5, 4, 17), )
if mibBuilder.loadTexts: tfrapPerfLmiPerDlciTable.setStatus('mandatory')
tfrapPerfLmiPerDlciEntry = MibTableRow((1, 3, 6, 1, 4, 1, 485, 5, 5, 4, 17, 1), ).setIndexNames((0, "TFRAP-MIB", "tfrapPerfLmiPerDlciInterval"), (0, "TFRAP-MIB", "tfrapPerfLmiPerDlciValue"))
if mibBuilder.loadTexts: tfrapPerfLmiPerDlciEntry.setStatus('mandatory')
tfrapPerfLmiPerDlciInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 5, 5, 4, 17, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("current-interval", 1), ("previous-interval", 2), ("cumulative-counts", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tfrapPerfLmiPerDlciInterval.setStatus('mandatory')
tfrapPerfLmiPerDlciValue = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 5, 5, 4, 17, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tfrapPerfLmiPerDlciValue.setStatus('mandatory')
tfrapPerfLmiPerDlciRxTotalByteCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 5, 5, 4, 17, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tfrapPerfLmiPerDlciRxTotalByteCnt.setStatus('mandatory')
tfrapPerfLmiPerDlciTxTotalByteCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 5, 5, 4, 17, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tfrapPerfLmiPerDlciTxTotalByteCnt.setStatus('mandatory')
tfrapPerfLmiPerDlciRxLivoEnqByteCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 5, 5, 4, 17, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tfrapPerfLmiPerDlciRxLivoEnqByteCnt.setStatus('mandatory')
tfrapPerfLmiPerDlciTxLivoEnqByteCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 5, 5, 4, 17, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tfrapPerfLmiPerDlciTxLivoEnqByteCnt.setStatus('mandatory')
tfrapPerfLmiPerDlciRxLivoStatByteCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 5, 5, 4, 17, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tfrapPerfLmiPerDlciRxLivoStatByteCnt.setStatus('mandatory')
tfrapPerfLmiPerDlciTxLivoStatByteCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 5, 5, 4, 17, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tfrapPerfLmiPerDlciTxLivoStatByteCnt.setStatus('mandatory')
tfrapPerfLmiPerDlciRxFullEnqByteCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 5, 5, 4, 17, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tfrapPerfLmiPerDlciRxFullEnqByteCnt.setStatus('mandatory')
tfrapPerfLmiPerDlciTxFullEnqByteCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 5, 5, 4, 17, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tfrapPerfLmiPerDlciTxFullEnqByteCnt.setStatus('mandatory')
tfrapPerfLmiPerDlciRxFullStatByteCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 5, 5, 4, 17, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tfrapPerfLmiPerDlciRxFullStatByteCnt.setStatus('mandatory')
tfrapPerfLmiPerDlciTxFullStatByteCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 5, 5, 4, 17, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tfrapPerfLmiPerDlciTxFullStatByteCnt.setStatus('mandatory')
tfrapPerfLmiPerDlciRxOtherByteCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 5, 5, 4, 17, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tfrapPerfLmiPerDlciRxOtherByteCnt.setStatus('mandatory')
tfrapPerfLmiPerDlciTxOtherByteCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 5, 5, 4, 17, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tfrapPerfLmiPerDlciTxOtherByteCnt.setStatus('mandatory')
tfrapPerfLmiTotalTable = MibTable((1, 3, 6, 1, 4, 1, 485, 5, 5, 4, 18), )
if mibBuilder.loadTexts: tfrapPerfLmiTotalTable.setStatus('mandatory')
tfrapPerfLmiTotalEntry = MibTableRow((1, 3, 6, 1, 4, 1, 485, 5, 5, 4, 18, 1), ).setIndexNames((0, "TFRAP-MIB", "tfrapPerfLmiTotalInterval"))
if mibBuilder.loadTexts: tfrapPerfLmiTotalEntry.setStatus('mandatory')
tfrapPerfLmiTotalInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 5, 5, 4, 18, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("current-interval", 1), ("previous-interval", 2), ("cumulative-counts", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tfrapPerfLmiTotalInterval.setStatus('mandatory')
tfrapPerfLmiTotalDlciValue = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 5, 5, 4, 18, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tfrapPerfLmiTotalDlciValue.setStatus('mandatory')
tfrapPerfLmiTotalRxTotalByteCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 5, 5, 4, 18, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tfrapPerfLmiTotalRxTotalByteCnt.setStatus('mandatory')
tfrapPerfLmiTotalTxTotalByteCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 5, 5, 4, 18, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tfrapPerfLmiTotalTxTotalByteCnt.setStatus('mandatory')
tfrapPerfLmiTotalRxLivoEnqByteCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 5, 5, 4, 18, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tfrapPerfLmiTotalRxLivoEnqByteCnt.setStatus('mandatory')
tfrapPerfLmiTotalTxLivoEnqByteCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 5, 5, 4, 18, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tfrapPerfLmiTotalTxLivoEnqByteCnt.setStatus('mandatory')
tfrapPerfLmiTotalRxLivoStatByteCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 5, 5, 4, 18, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tfrapPerfLmiTotalRxLivoStatByteCnt.setStatus('mandatory')
tfrapPerfLmiTotalTxLivoStatByteCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 5, 5, 4, 18, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tfrapPerfLmiTotalTxLivoStatByteCnt.setStatus('mandatory')
tfrapPerfLmiTotalRxFullEnqByteCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 5, 5, 4, 18, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tfrapPerfLmiTotalRxFullEnqByteCnt.setStatus('mandatory')
tfrapPerfLmiTotalTxFullEnqByteCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 5, 5, 4, 18, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tfrapPerfLmiTotalTxFullEnqByteCnt.setStatus('mandatory')
tfrapPerfLmiTotalRxFullStatByteCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 5, 5, 4, 18, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tfrapPerfLmiTotalRxFullStatByteCnt.setStatus('mandatory')
tfrapPerfLmiTotalTxFullStatByteCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 5, 5, 4, 18, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tfrapPerfLmiTotalTxFullStatByteCnt.setStatus('mandatory')
tfrapPerfLmiTotalRxOtherByteCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 5, 5, 4, 18, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tfrapPerfLmiTotalRxOtherByteCnt.setStatus('mandatory')
tfrapPerfLmiTotalTxOtherByteCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 5, 5, 4, 18, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tfrapPerfLmiTotalTxOtherByteCnt.setStatus('mandatory')
tfrapPerfNetworkLongTerm = MibIdentifier((1, 3, 6, 1, 4, 1, 485, 5, 5, 5))
tfrapPerfNetwLongTermTable = MibTable((1, 3, 6, 1, 4, 1, 485, 5, 5, 5, 1), )
if mibBuilder.loadTexts: tfrapPerfNetwLongTermTable.setStatus('mandatory')
tfrapPerfNetwLongTermEntry = MibTableRow((1, 3, 6, 1, 4, 1, 485, 5, 5, 5, 1, 1), ).setIndexNames((0, "TFRAP-MIB", "tfrapPerfNetwLongTermDlci"), (0, "TFRAP-MIB", "tfrapPerfNetwLongTermProtocol"), (0, "TFRAP-MIB", "tfrapPerfNetwLongTermInterval"))
if mibBuilder.loadTexts: tfrapPerfNetwLongTermEntry.setStatus('mandatory')
tfrapPerfNetwLongTermDlci = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 5, 5, 5, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tfrapPerfNetwLongTermDlci.setStatus('mandatory')
tfrapPerfNetwLongTermProtocol = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 5, 5, 5, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 13, 14, 15, 16, 21, 22, 29, 30, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172))).clone(namedValues=NamedValues(("ip-tx-bc", 1), ("ip-rx-bc", 2), ("tcp-ip-tx-bc", 3), ("tcp-ip-rx-bc", 4), ("ftp-tcp-ip-tx-bc", 5), ("ftp-tcp-ip-rx-bc", 6), ("telnet-tcp-ip-tx-bc", 7), ("telnet-tcp-ip-rx-bc", 8), ("smtp-tcp-ip-tx-bc", 9), ("smtp-tcp-ip-rx-bc", 10), ("http-tcp-ip-tx-bc", 13), ("http-tcp-ip-rx-bc", 14), ("netbios-ssn-tcp-ip-tx-bc", 15), ("netbios-ssn-tcp-ip-rx-bc", 16), ("udp-ip-tx-bc", 21), ("udp-ip-rx-bc", 22), ("tftp-udp-ip-tx-bc", 29), ("tftp-udp-ip-rx-bc", 30), ("netbios-dgm-udp-ip-tx-bc", 33), ("netbios-dgm-udp-ip-rx-bc", 34), ("snmp-udp-ip-tx-bc", 35), ("snmp-udp-ip-rx-bc", 36), ("snmptrap-udp-ip-tx-bc", 37), ("snmptrap-udp-ip-rx-bc", 38), ("rip-udp-ip-tx-bc", 39), ("rip-udp-ip-rx-bc", 40), ("icmp-ip-tx-bc", 41), ("icmp-ip-rx-bc", 42), ("echorep-icmp-ip-tx-bc", 43), ("echorep-icmp-ip-rx-bc", 44), ("dest-unr-icmp-ip-tx-bc", 45), ("dest-unr-icmp-ip-rx-bc", 46), ("src-quench-icmp-ip-tx-bc", 47), ("src-quench-icmp-ip-rx-bc", 48), ("redirect-icmp-ip-tx-bc", 49), ("redirect-icmp-ip-rx-bc", 50), ("echoreq-icmp-ip-tx-bc", 51), ("echoreq-icmp-ip-rx-bc", 52), ("time-excd-icmp-ip-tx-bc", 53), ("time-excd-icmp-ip-rx-bc", 54), ("param-prob-icmp-ip-tx-bc", 55), ("param-prob-icmp-ip-rx-bc", 56), ("timestamp-req-icmp-ip-tx-bc", 57), ("timestamp-req-icmp-ip-rx-bc", 58), ("timestamp-rep-icmp-ip-tx-bc", 59), ("timestamp-rep-icmp-ip-rx-bc", 60), ("addr-mask-req-icmp-ip-tx-bc", 61), ("addr-mask-req-icmp-ip-rx-bc", 62), ("addr-mask-rep-icmp-ip-tx-bc", 63), ("addr-mask-rep-icmp-ip-rx-bc", 64), ("pkt-too-big-icmp-ip-tx-bc", 65), ("pkt-too-big-icmp-ip-rx-bc", 66), ("gp-mem-query-icmp-ip-tx-bc", 67), ("gp-mem-query-icmp-ip-rx-bc", 68), ("gp-mem-report-icmp-ip-tx-bc", 69), ("gp-mem-report-icmp-ip-rx-bc", 70), ("gp-mem-reduct-icmp-ip-tx-bc", 71), ("gp-mem-reduct-icmp-ip-rx-bc", 72), ("ospf-ip-tx-bc", 73), ("ospf-ip-rx-bc", 74), ("other-ip-tx-bc", 75), ("other-ip-rx-bc", 76), ("ipx-tx-bc", 77), ("ipx-rx-bc", 78), ("spx-ipx-tx-bc", 79), ("spx-ipx-rx-bc", 80), ("ncp-ipx-tx-bc", 81), ("ncp-ipx-rx-bc", 82), ("sap-ipx-tx-bc", 83), ("sap-ipx-rx-bc", 84), ("rip-ipx-tx-bc", 85), ("rip-ipx-rx-bc", 86), ("netbios-ipx-tx-bc", 87), ("netbios-ipx-rx-bc", 88), ("other-ipx-tx-bc", 89), ("other-ipx-rx-bc", 90), ("arp-tx-bc", 91), ("arp-rx-bc", 92), ("arp-req-tx-bc", 93), ("arp-req-rx-bc", 94), ("arp-rep-tx-bc", 95), ("arp-rep-rx-bc", 96), ("rarp-req-tx-bc", 97), ("rarp-req-rx-bc", 98), ("rarp-rep-tx-bc", 99), ("rarp-rep-rx-bc", 100), ("inarp-req-tx-bc", 101), ("inarp-req-rx-bc", 102), ("inarp-rep-tx-bc", 103), ("inarp-rep-rx-bc", 104), ("sna-tx-bc", 105), ("sna-rx-bc", 106), ("sna-subarea-tx-bc", 107), ("sna-subarea-rx-bc", 108), ("sna-periph-tx-bc", 109), ("sna-periph-rx-bc", 110), ("sna-appn-tx-bc", 111), ("sna-appn-rx-bc", 112), ("sna-netbios-tx-bc", 113), ("sna-netbios-rx-bc", 114), ("cisco-tx-bc", 115), ("cisco-rx-bc", 116), ("other-tx-bc", 117), ("other-rx-bc", 118), ("user-defined-1-tx-bc", 119), ("user-defined-1-rx-bc", 120), ("user-defined-2-tx-bc", 121), ("user-defined-2-rx-bc", 122), ("user-defined-3-tx-bc", 123), ("user-defined-3-rx-bc", 124), ("user-defined-4-tx-bc", 125), ("user-defined-4-rx-bc", 126), ("thru-byte-tx-bc", 127), ("thru-byte-rx-bc", 128), ("thru-frame-tx-bc", 129), ("thru-frame-rx-bc", 130), ("thru-fecn-tx-bc", 131), ("thru-fecn-rx-bc", 132), ("thru-becn-tx-bc", 133), ("thru-becn-rx-bc", 134), ("thru-de-tx-bc", 135), ("thru-de-rx-bc", 136), ("cir-percent-range1-tx-bc", 137), ("cir-percent-range1-rx-bc", 138), ("cir-percent-range2-tx-bc", 139), ("cir-percent-range2-rx-bc", 140), ("cir-percent-range3-tx-bc", 141), ("cir-percent-range3-rx-bc", 142), ("cir-percent-range4-tx-bc", 143), ("cir-percent-range4-rx-bc", 144), ("cir-percent-range5-tx-bc", 145), ("cir-percent-range5-rx-bc", 146), ("cir-percent-range6-tx-bc", 147), ("cir-percent-range6-rx-bc", 148), ("cir-percent-range7-tx-bc", 149), ("cir-percent-range7-rx-bc", 150), ("cir-percent-range8-tx-bc", 151), ("cir-percent-range8-rx-bc", 152), ("lmi-tx-bc", 153), ("lmi-rx-bc", 154), ("lmi-livo-enq-tx-bc", 155), ("lmi-livo-enq-rx-bc", 156), ("lmi-livo-stat-tx-bc", 157), ("lmi-livo-stat-rx-bc", 158), ("lmi-full-enq-tx-bc", 159), ("lmi-full-enq-rx-bc", 160), ("lmi-full-stat-tx-bc", 161), ("lmi-full-stat-rx-bc", 162), ("lmi-other-tx-bc", 163), ("lmi-other-rx-bc", 164), ("total-uptime", 165), ("total-downtime", 166), ("igrp-tx-bc", 167), ("igrp-rx-bc", 168), ("vnip-tx-bc", 169), ("vnip-rx-bc", 170), ("annex-g-tx-bc", 171), ("annex-g-rx-bc", 172)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tfrapPerfNetwLongTermProtocol.setStatus('mandatory')
tfrapPerfNetwLongTermInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 5, 5, 5, 1, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tfrapPerfNetwLongTermInterval.setStatus('mandatory')
tfrapPerfNetwLongTermValue = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 5, 5, 5, 1, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tfrapPerfNetwLongTermValue.setStatus('mandatory')
tfrapPerfNetwLongTermAltTable = MibTable((1, 3, 6, 1, 4, 1, 485, 5, 5, 5, 2), )
if mibBuilder.loadTexts: tfrapPerfNetwLongTermAltTable.setStatus('mandatory')
tfrapPerfNetwLongTermAltEntry = MibTableRow((1, 3, 6, 1, 4, 1, 485, 5, 5, 5, 2, 1), ).setIndexNames((0, "TFRAP-MIB", "tfrapPerfNetwLongTermAltDlci"), (0, "TFRAP-MIB", "tfrapPerfNetwLongTermAltProtocol"))
if mibBuilder.loadTexts: tfrapPerfNetwLongTermAltEntry.setStatus('mandatory')
tfrapPerfNetwLongTermAltDlci = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 5, 5, 5, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tfrapPerfNetwLongTermAltDlci.setStatus('mandatory')
tfrapPerfNetwLongTermAltProtocol = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 5, 5, 5, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 13, 14, 15, 16, 21, 22, 29, 30, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172))).clone(namedValues=NamedValues(("ip-tx-bc", 1), ("ip-rx-bc", 2), ("tcp-ip-tx-bc", 3), ("tcp-ip-rx-bc", 4), ("ftp-tcp-ip-tx-bc", 5), ("ftp-tcp-ip-rx-bc", 6), ("telnet-tcp-ip-tx-bc", 7), ("telnet-tcp-ip-rx-bc", 8), ("smtp-tcp-ip-tx-bc", 9), ("smtp-tcp-ip-rx-bc", 10), ("http-tcp-ip-tx-bc", 13), ("http-tcp-ip-rx-bc", 14), ("netbios-ssn-tcp-ip-tx-bc", 15), ("netbios-ssn-tcp-ip-rx-bc", 16), ("udp-ip-tx-bc", 21), ("udp-ip-rx-bc", 22), ("tftp-udp-ip-tx-bc", 29), ("tftp-udp-ip-rx-bc", 30), ("netbios-dgm-udp-ip-tx-bc", 33), ("netbios-dgm-udp-ip-rx-bc", 34), ("snmp-udp-ip-tx-bc", 35), ("snmp-udp-ip-rx-bc", 36), ("snmptrap-udp-ip-tx-bc", 37), ("snmptrap-udp-ip-rx-bc", 38), ("rip-udp-ip-tx-bc", 39), ("rip-udp-ip-rx-bc", 40), ("icmp-ip-tx-bc", 41), ("icmp-ip-rx-bc", 42), ("echorep-icmp-ip-tx-bc", 43), ("echorep-icmp-ip-rx-bc", 44), ("dest-unr-icmp-ip-tx-bc", 45), ("dest-unr-icmp-ip-rx-bc", 46), ("src-quench-icmp-ip-tx-bc", 47), ("src-quench-icmp-ip-rx-bc", 48), ("redirect-icmp-ip-tx-bc", 49), ("redirect-icmp-ip-rx-bc", 50), ("echoreq-icmp-ip-tx-bc", 51), ("echoreq-icmp-ip-rx-bc", 52), ("time-excd-icmp-ip-tx-bc", 53), ("time-excd-icmp-ip-rx-bc", 54), ("param-prob-icmp-ip-tx-bc", 55), ("param-prob-icmp-ip-rx-bc", 56), ("timestamp-req-icmp-ip-tx-bc", 57), ("timestamp-req-icmp-ip-rx-bc", 58), ("timestamp-rep-icmp-ip-tx-bc", 59), ("timestamp-rep-icmp-ip-rx-bc", 60), ("addr-mask-req-icmp-ip-tx-bc", 61), ("addr-mask-req-icmp-ip-rx-bc", 62), ("addr-mask-rep-icmp-ip-tx-bc", 63), ("addr-mask-rep-icmp-ip-rx-bc", 64), ("pkt-too-big-icmp-ip-tx-bc", 65), ("pkt-too-big-icmp-ip-rx-bc", 66), ("gp-mem-query-icmp-ip-tx-bc", 67), ("gp-mem-query-icmp-ip-rx-bc", 68), ("gp-mem-report-icmp-ip-tx-bc", 69), ("gp-mem-report-icmp-ip-rx-bc", 70), ("gp-mem-reduct-icmp-ip-tx-bc", 71), ("gp-mem-reduct-icmp-ip-rx-bc", 72), ("ospf-ip-tx-bc", 73), ("ospf-ip-rx-bc", 74), ("other-ip-tx-bc", 75), ("other-ip-rx-bc", 76), ("ipx-tx-bc", 77), ("ipx-rx-bc", 78), ("spx-ipx-tx-bc", 79), ("spx-ipx-rx-bc", 80), ("ncp-ipx-tx-bc", 81), ("ncp-ipx-rx-bc", 82), ("sap-ipx-tx-bc", 83), ("sap-ipx-rx-bc", 84), ("rip-ipx-tx-bc", 85), ("rip-ipx-rx-bc", 86), ("netbios-ipx-tx-bc", 87), ("netbios-ipx-rx-bc", 88), ("other-ipx-tx-bc", 89), ("other-ipx-rx-bc", 90), ("arp-tx-bc", 91), ("arp-rx-bc", 92), ("arp-req-tx-bc", 93), ("arp-req-rx-bc", 94), ("arp-rep-tx-bc", 95), ("arp-rep-rx-bc", 96), ("rarp-req-tx-bc", 97), ("rarp-req-rx-bc", 98), ("rarp-rep-tx-bc", 99), ("rarp-rep-rx-bc", 100), ("inarp-req-tx-bc", 101), ("inarp-req-rx-bc", 102), ("inarp-rep-tx-bc", 103), ("inarp-rep-rx-bc", 104), ("sna-tx-bc", 105), ("sna-rx-bc", 106), ("sna-subarea-tx-bc", 107), ("sna-subarea-rx-bc", 108), ("sna-periph-tx-bc", 109), ("sna-periph-rx-bc", 110), ("sna-appn-tx-bc", 111), ("sna-appn-rx-bc", 112), ("sna-netbios-tx-bc", 113), ("sna-netbios-rx-bc", 114), ("cisco-tx-bc", 115), ("cisco-rx-bc", 116), ("other-tx-bc", 117), ("other-rx-bc", 118), ("user-defined-1-tx-bc", 119), ("user-defined-1-rx-bc", 120), ("user-defined-2-tx-bc", 121), ("user-defined-2-rx-bc", 122), ("user-defined-3-tx-bc", 123), ("user-defined-3-rx-bc", 124), ("user-defined-4-tx-bc", 125), ("user-defined-4-rx-bc", 126), ("thru-byte-tx-bc", 127), ("thru-byte-rx-bc", 128), ("thru-frame-tx-bc", 129), ("thru-frame-rx-bc", 130), ("thru-fecn-tx-bc", 131), ("thru-fecn-rx-bc", 132), ("thru-becn-tx-bc", 133), ("thru-becn-rx-bc", 134), ("thru-de-tx-bc", 135), ("thru-de-rx-bc", 136), ("cir-percent-range1-tx-bc", 137), ("cir-percent-range1-rx-bc", 138), ("cir-percent-range2-tx-bc", 139), ("cir-percent-range2-rx-bc", 140), ("cir-percent-range3-tx-bc", 141), ("cir-percent-range3-rx-bc", 142), ("cir-percent-range4-tx-bc", 143), ("cir-percent-range4-rx-bc", 144), ("cir-percent-range5-tx-bc", 145), ("cir-percent-range5-rx-bc", 146), ("cir-percent-range6-tx-bc", 147), ("cir-percent-range6-rx-bc", 148), ("cir-percent-range7-tx-bc", 149), ("cir-percent-range7-rx-bc", 150), ("cir-percent-range8-tx-bc", 151), ("cir-percent-range8-rx-bc", 152), ("lmi-tx-bc", 153), ("lmi-rx-bc", 154), ("lmi-livo-enq-tx-bc", 155), ("lmi-livo-enq-rx-bc", 156), ("lmi-livo-stat-tx-bc", 157), ("lmi-livo-stat-rx-bc", 158), ("lmi-full-enq-tx-bc", 159), ("lmi-full-enq-rx-bc", 160), ("lmi-full-stat-tx-bc", 161), ("lmi-full-stat-rx-bc", 162), ("lmi-other-tx-bc", 163), ("lmi-other-rx-bc", 164), ("total-uptime", 165), ("total-downtime", 166), ("igrp-tx-bc", 167), ("igrp-rx-bc", 168), ("vnip-tx-bc", 169), ("vnip-rx-bc", 170), ("annex-g-tx-bc", 171), ("annex-g-rx-bc", 172)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tfrapPerfNetwLongTermAltProtocol.setStatus('mandatory')
tfrapPerfNetwLongTermAltArray = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 5, 5, 5, 2, 1, 3), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tfrapPerfNetwLongTermAltArray.setStatus('mandatory')
tfrapPerfNetworkLongTermCommands = MibIdentifier((1, 3, 6, 1, 4, 1, 485, 5, 5, 5, 3))
tfrapPerfNetworkLongTermCmdClear = MibScalar((1, 3, 6, 1, 4, 1, 485, 5, 5, 5, 3, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("clear-statistics", 1)))).setMaxAccess("writeonly")
if mibBuilder.loadTexts: tfrapPerfNetworkLongTermCmdClear.setStatus('mandatory')
tfrapPerfCirPercentUtilization = MibIdentifier((1, 3, 6, 1, 4, 1, 485, 5, 5, 6))
tfrapPerfCirPercentUtilizationTable = MibTable((1, 3, 6, 1, 4, 1, 485, 5, 5, 6, 1), )
if mibBuilder.loadTexts: tfrapPerfCirPercentUtilizationTable.setStatus('mandatory')
tfrapPerfCirPercentUtilizationEntry = MibTableRow((1, 3, 6, 1, 4, 1, 485, 5, 5, 6, 1, 1), ).setIndexNames((0, "TFRAP-MIB", "tfrapPerfCirPercentUtilizationInterval"), (0, "TFRAP-MIB", "tfrapPerfCirPercentUtilizationDlciValue"))
if mibBuilder.loadTexts: tfrapPerfCirPercentUtilizationEntry.setStatus('mandatory')
tfrapPerfCirPercentUtilizationInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 5, 5, 6, 1, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("current-interval", 1), ("previous-interval", 2), ("cumulative-counts", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tfrapPerfCirPercentUtilizationInterval.setStatus('mandatory')
tfrapPerfCirPercentUtilizationDlciValue = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 5, 5, 6, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tfrapPerfCirPercentUtilizationDlciValue.setStatus('mandatory')
tfrapPerfCirRxPercentUtilizationRange1 = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 5, 5, 6, 1, 1, 21), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tfrapPerfCirRxPercentUtilizationRange1.setStatus('mandatory')
tfrapPerfCirRxPercentUtilizationRange2 = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 5, 5, 6, 1, 1, 22), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tfrapPerfCirRxPercentUtilizationRange2.setStatus('mandatory')
tfrapPerfCirRxPercentUtilizationRange3 = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 5, 5, 6, 1, 1, 23), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tfrapPerfCirRxPercentUtilizationRange3.setStatus('mandatory')
tfrapPerfCirRxPercentUtilizationRange4 = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 5, 5, 6, 1, 1, 24), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tfrapPerfCirRxPercentUtilizationRange4.setStatus('mandatory')
tfrapPerfCirRxPercentUtilizationRange5 = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 5, 5, 6, 1, 1, 25), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tfrapPerfCirRxPercentUtilizationRange5.setStatus('mandatory')
tfrapPerfCirRxPercentUtilizationRange6 = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 5, 5, 6, 1, 1, 26), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tfrapPerfCirRxPercentUtilizationRange6.setStatus('mandatory')
tfrapPerfCirRxPercentUtilizationRange7 = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 5, 5, 6, 1, 1, 27), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tfrapPerfCirRxPercentUtilizationRange7.setStatus('mandatory')
tfrapPerfCirRxPercentUtilizationRange8 = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 5, 5, 6, 1, 1, 28), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tfrapPerfCirRxPercentUtilizationRange8.setStatus('mandatory')
tfrapPerfCirTxPercentUtilizationRange1 = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 5, 5, 6, 1, 1, 41), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tfrapPerfCirTxPercentUtilizationRange1.setStatus('mandatory')
tfrapPerfCirTxPercentUtilizationRange2 = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 5, 5, 6, 1, 1, 42), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tfrapPerfCirTxPercentUtilizationRange2.setStatus('mandatory')
tfrapPerfCirTxPercentUtilizationRange3 = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 5, 5, 6, 1, 1, 43), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tfrapPerfCirTxPercentUtilizationRange3.setStatus('mandatory')
tfrapPerfCirTxPercentUtilizationRange4 = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 5, 5, 6, 1, 1, 44), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tfrapPerfCirTxPercentUtilizationRange4.setStatus('mandatory')
tfrapPerfCirTxPercentUtilizationRange5 = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 5, 5, 6, 1, 1, 45), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tfrapPerfCirTxPercentUtilizationRange5.setStatus('mandatory')
tfrapPerfCirTxPercentUtilizationRange6 = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 5, 5, 6, 1, 1, 46), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tfrapPerfCirTxPercentUtilizationRange6.setStatus('mandatory')
tfrapPerfCirTxPercentUtilizationRange7 = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 5, 5, 6, 1, 1, 47), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tfrapPerfCirTxPercentUtilizationRange7.setStatus('mandatory')
tfrapPerfCirTxPercentUtilizationRange8 = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 5, 5, 6, 1, 1, 48), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tfrapPerfCirTxPercentUtilizationRange8.setStatus('mandatory')
tfrapPerfCurrentPerDlciUtilizationTable = MibTable((1, 3, 6, 1, 4, 1, 485, 5, 5, 6, 2), )
if mibBuilder.loadTexts: tfrapPerfCurrentPerDlciUtilizationTable.setStatus('mandatory')
tfrapPerfCurrentPerDlciUtilizationEntry = MibTableRow((1, 3, 6, 1, 4, 1, 485, 5, 5, 6, 2, 1), ).setIndexNames((0, "TFRAP-MIB", "tfrapPerfCurrentPerDlciUtilizationDlciValue"))
if mibBuilder.loadTexts: tfrapPerfCurrentPerDlciUtilizationEntry.setStatus('mandatory')
tfrapPerfCurrentPerDlciUtilizationDlciValue = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 5, 5, 6, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tfrapPerfCurrentPerDlciUtilizationDlciValue.setStatus('mandatory')
tfrapPerfCurrentPerDlciRxUtilization = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 5, 5, 6, 2, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tfrapPerfCurrentPerDlciRxUtilization.setStatus('mandatory')
tfrapPerfCurrentPerDlciTxUtilization = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 5, 5, 6, 2, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tfrapPerfCurrentPerDlciTxUtilization.setStatus('mandatory')
tfrapPerfCurrentPerDlciAggregateUtilization = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 5, 5, 6, 2, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tfrapPerfCurrentPerDlciAggregateUtilization.setStatus('mandatory')
tfrapPerfCurrentUnitUtilization = MibIdentifier((1, 3, 6, 1, 4, 1, 485, 5, 5, 6, 3))
tfrapPerfCurrentDteUtilization = MibScalar((1, 3, 6, 1, 4, 1, 485, 5, 5, 6, 3, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tfrapPerfCurrentDteUtilization.setStatus('mandatory')
tfrapPerfCurrentWanUtilization = MibScalar((1, 3, 6, 1, 4, 1, 485, 5, 5, 6, 3, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tfrapPerfCurrentWanUtilization.setStatus('mandatory')
tfrapPerfCurrentAggregateUtilization = MibScalar((1, 3, 6, 1, 4, 1, 485, 5, 5, 6, 3, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tfrapPerfCurrentAggregateUtilization.setStatus('mandatory')
tfrapEventTrapLog = MibIdentifier((1, 3, 6, 1, 4, 1, 485, 5, 10))
tfrapEventTrapLogTable = MibTable((1, 3, 6, 1, 4, 1, 485, 5, 10, 1), )
if mibBuilder.loadTexts: tfrapEventTrapLogTable.setStatus('mandatory')
tfrapEventTrapLogEntry = MibTableRow((1, 3, 6, 1, 4, 1, 485, 5, 10, 1, 1), ).setIndexNames((0, "TFRAP-MIB", "tfrapEventTrapLogSeqNum"))
if mibBuilder.loadTexts: tfrapEventTrapLogEntry.setStatus('mandatory')
tfrapEventTrapLogSeqNum = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 5, 10, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tfrapEventTrapLogSeqNum.setStatus('mandatory')
tfrapEventTrapLogGenericEvent = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 5, 10, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tfrapEventTrapLogGenericEvent.setStatus('mandatory')
tfrapEventTrapLogSpecificEvent = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 5, 10, 1, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tfrapEventTrapLogSpecificEvent.setStatus('mandatory')
tfrapEventTrapLogTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 5, 10, 1, 1, 4), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tfrapEventTrapLogTimeStamp.setStatus('mandatory')
tfrapEventTrapLogVarBind1 = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 5, 10, 1, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tfrapEventTrapLogVarBind1.setStatus('mandatory')
tfrapEventTrapLogVarBind2 = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 5, 10, 1, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tfrapEventTrapLogVarBind2.setStatus('mandatory')
tfrapEventTrapLogVarBind3 = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 5, 10, 1, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tfrapEventTrapLogVarBind3.setStatus('mandatory')
tfrapEventLogAltTable = MibTable((1, 3, 6, 1, 4, 1, 485, 5, 10, 2), )
if mibBuilder.loadTexts: tfrapEventLogAltTable.setStatus('mandatory')
tfrapEventLogAltEntry = MibTableRow((1, 3, 6, 1, 4, 1, 485, 5, 10, 2, 1), ).setIndexNames((0, "TFRAP-MIB", "tfrapEventLogAltSeqNum"))
if mibBuilder.loadTexts: tfrapEventLogAltEntry.setStatus('mandatory')
tfrapEventLogAltSeqNum = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 5, 10, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tfrapEventLogAltSeqNum.setStatus('mandatory')
tfrapEventLogAltArray = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 5, 10, 2, 1, 2), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tfrapEventLogAltArray.setStatus('mandatory')
tfrapEventLogCurrentSeqNum = MibScalar((1, 3, 6, 1, 4, 1, 485, 5, 10, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tfrapEventLogCurrentSeqNum.setStatus('mandatory')
tfrapEventLogFreeze = MibScalar((1, 3, 6, 1, 4, 1, 485, 5, 10, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("freeze", 1), ("un-freeze", 2)))).setMaxAccess("writeonly")
if mibBuilder.loadTexts: tfrapEventLogFreeze.setStatus('mandatory')
tfrapEventLogClear = MibScalar((1, 3, 6, 1, 4, 1, 485, 5, 10, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("clear", 1)))).setMaxAccess("writeonly")
if mibBuilder.loadTexts: tfrapEventLogClear.setStatus('mandatory')
tfrapAlarmType = MibScalar((1, 3, 6, 1, 4, 1, 485, 5, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 75, 76, 90, 91, 92, 93, 94, 95, 96, 97, 136, 137, 138, 139, 140, 141, 142, 257, 258, 259, 260, 261, 262, 263, 264, 265))).clone(namedValues=NamedValues(("bad-config-in-set", 1), ("config-local-update", 2), ("t1-netw-carrier-loss", 3), ("t1-netw-carrier-detect", 4), ("t1-netw-sync-loss-declare", 5), ("t1-netw-sync-acquire", 6), ("t1-netw-red-alarm-declare", 7), ("t1-netw-red-alarm-clear", 8), ("t1-netw-yellow-alarm-detect", 9), ("t1-netw-yellow-alarm-clear", 10), ("t1-netw-ais-detect", 11), ("t1-netw-ais-clear", 12), ("t1-controlled-slip", 13), ("local-unit-loopback-enabled", 14), ("local-unit-loopback-disabled", 15), ("local-unit-loopback-failure", 16), ("local-dte-loopback-enabled", 17), ("local-dte-loopback-disabled", 18), ("local-dte-loopback-failure", 19), ("local-aggregate-loopback-enabled", 20), ("local-aggregate-loopback-disabled", 21), ("local-aggregate-loopback-failure", 22), ("local-payload-loopback-enabled", 23), ("local-payload-loopback-disabled", 24), ("local-payload-loopback-failure", 25), ("local-network-loopback-enabled", 26), ("local-network-loopback-disabled", 27), ("local-network-loopback-failure", 28), ("v54-loop-up-initiated", 29), ("v54-loop-down-completed", 30), ("v54-loopback-enabled-by-remote", 31), ("v54-loopback-disabled-by-remote", 32), ("v54-loopback-failure", 33), ("csu-loop-up-initiated", 34), ("csu-loop-down-completed", 35), ("csu-loopback-enabled-by-remote", 36), ("csu-loopback-disabled-by-remote", 37), ("csu-loopback-failure", 38), ("dsu-loop-up-initiated", 39), ("dsu-loop-down-completed", 40), ("dsu-loopback-enabled-by-remote", 41), ("dsu-loopback-disabled-by-remote", 42), ("dsu-loopback-failure", 43), ("bert-test-pattern-initiated", 44), ("bert-test-pattern-completed", 45), ("bert-test-pattern-failure", 46), ("dlci-active", 47), ("dlci-inactive", 48), ("dlci-td-threshold", 49), ("lmi-sourcing-change-passthru", 50), ("lmi-sourcing-change-user-dte", 51), ("lmi-sourcing-change-net-dte", 52), ("lmi-sourcing-change-user-net", 53), ("lmi-sourcing-change-net-net", 54), ("dte-signal-rts-on", 55), ("dte-signal-rts-off", 56), ("dte-signal-dtr-on", 57), ("dte-signal-dtr-off", 58), ("lmi-non-incr-seq-num-dte", 59), ("lmi-non-incr-seq-num-net", 60), ("lmi-seq-num-mismatch-dte", 61), ("lmi-seq-num-mismatch-net", 62), ("trap-muting-active", 75), ("trap-muting-inactive", 76), ("vloop-loop-up", 90), ("vloop-loop-down", 91), ("vloop-up-via-remote", 92), ("vloop-down-via-remote", 93), ("vloop-failed", 94), ("vbert-started", 95), ("vbert-stopped", 96), ("vbert-request-failed", 97), ("local-payload-loopback-via-rmt-enabled", 136), ("local-payload-loopback-via-rmt-disabled", 137), ("pvc-rx-utilization-exceeded", 138), ("pvc-tx-utilization-exceeded", 139), ("pvc-rx-utilization-cleared", 140), ("pvc-tx-utilization-cleared", 141), ("config-install-success", 142), ("tftp-requested", 257), ("tftp-transferring", 258), ("tftp-programming", 259), ("tftp-aborted", 260), ("tftp-success", 261), ("tftp-host-unreachable", 262), ("tftp-no-file", 263), ("tftp-invalid-file", 264), ("tftp-corrupt-file", 265)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tfrapAlarmType.setStatus('mandatory')
tfrapDLCINum = MibScalar((1, 3, 6, 1, 4, 1, 485, 5, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tfrapDLCINum.setStatus('mandatory')
tfrapInterface = MibScalar((1, 3, 6, 1, 4, 1, 485, 5, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("dte", 1), ("t1", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tfrapInterface.setStatus('mandatory')
tfrapIpAddress = MibScalar((1, 3, 6, 1, 4, 1, 485, 5, 9), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tfrapIpAddress.setStatus('mandatory')
tfrapPercentUtilization = MibScalar((1, 3, 6, 1, 4, 1, 485, 5, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tfrapPercentUtilization.setStatus('mandatory')
tfrapUtilizationThreshold = MibScalar((1, 3, 6, 1, 4, 1, 485, 5, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tfrapUtilizationThreshold.setStatus('mandatory')
tfrapCfgLockIpAddress = MibScalar((1, 3, 6, 1, 4, 1, 485, 5, 13), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tfrapCfgLockIpAddress.setStatus('mandatory')
tfrapTrap = NotificationType((1, 3, 6, 1, 4, 1, 485, 5) + (0,0)).setObjects(("TFRAP-MIB", "tfrapAlarmType"))
tfrapBadConfigTrap = NotificationType((1, 3, 6, 1, 4, 1, 485, 5) + (0,1)).setObjects(("TFRAP-MIB", "tfrapAlarmType"))
tfrapLocalConfigTrap = NotificationType((1, 3, 6, 1, 4, 1, 485, 5) + (0,2)).setObjects(("TFRAP-MIB", "tfrapAlarmType"))
tfrapt1netwcarrierloss = NotificationType((1, 3, 6, 1, 4, 1, 485, 5) + (0,3)).setObjects(("TFRAP-MIB", "tfrapAlarmType"))
tfrapt1netwcarrierdetect = NotificationType((1, 3, 6, 1, 4, 1, 485, 5) + (0,4)).setObjects(("TFRAP-MIB", "tfrapAlarmType"))
tfrapt1netwsynclossdeclare = NotificationType((1, 3, 6, 1, 4, 1, 485, 5) + (0,5)).setObjects(("TFRAP-MIB", "tfrapAlarmType"))
tfrapt1netwsyncacquire = NotificationType((1, 3, 6, 1, 4, 1, 485, 5) + (0,6)).setObjects(("TFRAP-MIB", "tfrapAlarmType"))
tfrapt1netwredalarmdeclare = NotificationType((1, 3, 6, 1, 4, 1, 485, 5) + (0,7)).setObjects(("TFRAP-MIB", "tfrapAlarmType"))
tfrapt1netwredalarmclear = NotificationType((1, 3, 6, 1, 4, 1, 485, 5) + (0,8)).setObjects(("TFRAP-MIB", "tfrapAlarmType"))
tfrapt1netwyellowalarmdetect = NotificationType((1, 3, 6, 1, 4, 1, 485, 5) + (0,9)).setObjects(("TFRAP-MIB", "tfrapAlarmType"))
tfrapt1netwyellowalarmclear = NotificationType((1, 3, 6, 1, 4, 1, 485, 5) + (0,10)).setObjects(("TFRAP-MIB", "tfrapAlarmType"))
tfrapt1netwaisdetect = NotificationType((1, 3, 6, 1, 4, 1, 485, 5) + (0,11)).setObjects(("TFRAP-MIB", "tfrapAlarmType"))
tfrapt1netwaisclear = NotificationType((1, 3, 6, 1, 4, 1, 485, 5) + (0,12)).setObjects(("TFRAP-MIB", "tfrapAlarmType"))
tfrapt1controlledslip = NotificationType((1, 3, 6, 1, 4, 1, 485, 5) + (0,13)).setObjects(("TFRAP-MIB", "tfrapAlarmType"))
tfrapLocalUnitLoopbackEnabledTrap = NotificationType((1, 3, 6, 1, 4, 1, 485, 5) + (0,14)).setObjects(("TFRAP-MIB", "tfrapAlarmType"))
tfrapLocalUnitLoopbackDisabledTrap = NotificationType((1, 3, 6, 1, 4, 1, 485, 5) + (0,15)).setObjects(("TFRAP-MIB", "tfrapAlarmType"))
tfrapLocalUnitLoopbackFailedTrap = NotificationType((1, 3, 6, 1, 4, 1, 485, 5) + (0,16)).setObjects(("TFRAP-MIB", "tfrapAlarmType"))
tfrapLocalDteLoopbackEnabledTrap = NotificationType((1, 3, 6, 1, 4, 1, 485, 5) + (0,17)).setObjects(("TFRAP-MIB", "tfrapAlarmType"))
tfrapLocalDteLoopbackDisabledTrap = NotificationType((1, 3, 6, 1, 4, 1, 485, 5) + (0,18)).setObjects(("TFRAP-MIB", "tfrapAlarmType"))
tfrapLocalDteLoopbackFailedTrap = NotificationType((1, 3, 6, 1, 4, 1, 485, 5) + (0,19)).setObjects(("TFRAP-MIB", "tfrapAlarmType"))
tfrapLocalAggregateLoopbackEnabledTrap = NotificationType((1, 3, 6, 1, 4, 1, 485, 5) + (0,20)).setObjects(("TFRAP-MIB", "tfrapAlarmType"))
tfrapLocalAggregateLoopbackDisabledTrap = NotificationType((1, 3, 6, 1, 4, 1, 485, 5) + (0,21)).setObjects(("TFRAP-MIB", "tfrapAlarmType"))
tfrapLocalAggregateLoopbackFailedTrap = NotificationType((1, 3, 6, 1, 4, 1, 485, 5) + (0,22)).setObjects(("TFRAP-MIB", "tfrapAlarmType"))
tfrapLocalPayloadLoopbackEnabledTrap = NotificationType((1, 3, 6, 1, 4, 1, 485, 5) + (0,23)).setObjects(("TFRAP-MIB", "tfrapAlarmType"))
tfrapLocalPayloadLoopbackDisabledTrap = NotificationType((1, 3, 6, 1, 4, 1, 485, 5) + (0,24)).setObjects(("TFRAP-MIB", "tfrapAlarmType"))
tfrapLocalPayloadLoopbackFailedTrap = NotificationType((1, 3, 6, 1, 4, 1, 485, 5) + (0,25)).setObjects(("TFRAP-MIB", "tfrapAlarmType"))
tfrapLocalNetLoopbackEnabledTrap = NotificationType((1, 3, 6, 1, 4, 1, 485, 5) + (0,26)).setObjects(("TFRAP-MIB", "tfrapAlarmType"))
tfrapLocalNetLoopbackDisabledTrap = NotificationType((1, 3, 6, 1, 4, 1, 485, 5) + (0,27)).setObjects(("TFRAP-MIB", "tfrapAlarmType"))
tfrapLocalNetLoopbackFailedTrap = NotificationType((1, 3, 6, 1, 4, 1, 485, 5) + (0,28)).setObjects(("TFRAP-MIB", "tfrapAlarmType"))
tfrapV54LoopUpInitiatedTrap = NotificationType((1, 3, 6, 1, 4, 1, 485, 5) + (0,29)).setObjects(("TFRAP-MIB", "tfrapAlarmType"))
tfrapV54LoopDownCompletedTrap = NotificationType((1, 3, 6, 1, 4, 1, 485, 5) + (0,30)).setObjects(("TFRAP-MIB", "tfrapAlarmType"))
tfrapV54LoopbackEnabledTrap = NotificationType((1, 3, 6, 1, 4, 1, 485, 5) + (0,31)).setObjects(("TFRAP-MIB", "tfrapAlarmType"))
tfrapV54LoopbackDisabledTrap = NotificationType((1, 3, 6, 1, 4, 1, 485, 5) + (0,32)).setObjects(("TFRAP-MIB", "tfrapAlarmType"))
tfrapV54LoopbackFailedTrap = NotificationType((1, 3, 6, 1, 4, 1, 485, 5) + (0,33)).setObjects(("TFRAP-MIB", "tfrapAlarmType"))
tfrapCsuLoopUpInitiatedTrap = NotificationType((1, 3, 6, 1, 4, 1, 485, 5) + (0,34)).setObjects(("TFRAP-MIB", "tfrapAlarmType"))
tfrapCsuLoopDownCompletedTrap = NotificationType((1, 3, 6, 1, 4, 1, 485, 5) + (0,35)).setObjects(("TFRAP-MIB", "tfrapAlarmType"))
tfrapCsuLoopbackEnabledTrap = NotificationType((1, 3, 6, 1, 4, 1, 485, 5) + (0,36)).setObjects(("TFRAP-MIB", "tfrapAlarmType"))
tfrapCsuLoopbackDisabledTrap = NotificationType((1, 3, 6, 1, 4, 1, 485, 5) + (0,37)).setObjects(("TFRAP-MIB", "tfrapAlarmType"))
tfrapCsuLoopbackFailedTrap = NotificationType((1, 3, 6, 1, 4, 1, 485, 5) + (0,38)).setObjects(("TFRAP-MIB", "tfrapAlarmType"))
tfrapDsuLoopUpInitiatedTrap = NotificationType((1, 3, 6, 1, 4, 1, 485, 5) + (0,39)).setObjects(("TFRAP-MIB", "tfrapAlarmType"))
tfrapDsuLoopDownCompletedTrap = NotificationType((1, 3, 6, 1, 4, 1, 485, 5) + (0,40)).setObjects(("TFRAP-MIB", "tfrapAlarmType"))
tfrapDsuLoopbackEnabledTrap = NotificationType((1, 3, 6, 1, 4, 1, 485, 5) + (0,41)).setObjects(("TFRAP-MIB", "tfrapAlarmType"))
tfrapDsuLoopbackDisabledTrap = NotificationType((1, 3, 6, 1, 4, 1, 485, 5) + (0,42)).setObjects(("TFRAP-MIB", "tfrapAlarmType"))
tfrapDsuLoopbackFailedTrap = NotificationType((1, 3, 6, 1, 4, 1, 485, 5) + (0,43)).setObjects(("TFRAP-MIB", "tfrapAlarmType"))
tfrapBertInitiatedTrap = NotificationType((1, 3, 6, 1, 4, 1, 485, 5) + (0,44)).setObjects(("TFRAP-MIB", "tfrapAlarmType"))
tfrapBertCompletedTrap = NotificationType((1, 3, 6, 1, 4, 1, 485, 5) + (0,45)).setObjects(("TFRAP-MIB", "tfrapAlarmType"))
tfrapBertFailedTrap = NotificationType((1, 3, 6, 1, 4, 1, 485, 5) + (0,46)).setObjects(("TFRAP-MIB", "tfrapAlarmType"))
tfrapDLCIActiveTrap = NotificationType((1, 3, 6, 1, 4, 1, 485, 5) + (0,47)).setObjects(("TFRAP-MIB", "tfrapAlarmType"), ("TFRAP-MIB", "tfrapDLCINum"))
tfrapDLCIInactiveTrap = NotificationType((1, 3, 6, 1, 4, 1, 485, 5) + (0,48)).setObjects(("TFRAP-MIB", "tfrapAlarmType"), ("TFRAP-MIB", "tfrapDLCINum"))
tfrapDLCITDThresholdTrap = NotificationType((1, 3, 6, 1, 4, 1, 485, 5) + (0,49)).setObjects(("TFRAP-MIB", "tfrapAlarmType"), ("TFRAP-MIB", "tfrapDLCINum"), ("TFRAP-MIB", "tfrapIpAddress"))
tfrapLmiSourcingChangePassthruTrap = NotificationType((1, 3, 6, 1, 4, 1, 485, 5) + (0,50)).setObjects(("TFRAP-MIB", "tfrapAlarmType"))
tfrapLmiSourcingChangeUserDteTrap = NotificationType((1, 3, 6, 1, 4, 1, 485, 5) + (0,51)).setObjects(("TFRAP-MIB", "tfrapAlarmType"))
tfrapLmiSourcingChangeNetDteTrap = NotificationType((1, 3, 6, 1, 4, 1, 485, 5) + (0,52)).setObjects(("TFRAP-MIB", "tfrapAlarmType"))
tfrapLmiSourcingChangeUserT1Trap = NotificationType((1, 3, 6, 1, 4, 1, 485, 5) + (0,53)).setObjects(("TFRAP-MIB", "tfrapAlarmType"))
tfrapLmiSourcingChangeNetT1Trap = NotificationType((1, 3, 6, 1, 4, 1, 485, 5) + (0,54)).setObjects(("TFRAP-MIB", "tfrapAlarmType"))
tfrapDteSignalRtsOnTrap = NotificationType((1, 3, 6, 1, 4, 1, 485, 5) + (0,55)).setObjects(("TFRAP-MIB", "tfrapAlarmType"))
tfrapDteSignalRtsOffTrap = NotificationType((1, 3, 6, 1, 4, 1, 485, 5) + (0,56)).setObjects(("TFRAP-MIB", "tfrapAlarmType"))
tfrapDteSignalDtrOnTrap = NotificationType((1, 3, 6, 1, 4, 1, 485, 5) + (0,57)).setObjects(("TFRAP-MIB", "tfrapAlarmType"))
tfrapDteSignalDtrOffTrap = NotificationType((1, 3, 6, 1, 4, 1, 485, 5) + (0,58)).setObjects(("TFRAP-MIB", "tfrapAlarmType"))
tfrapNonIncrLmiSeqNumDteTrap = NotificationType((1, 3, 6, 1, 4, 1, 485, 5) + (0,59)).setObjects(("TFRAP-MIB", "tfrapAlarmType"))
tfrapNonIncrLmiSeqNumT1Trap = NotificationType((1, 3, 6, 1, 4, 1, 485, 5) + (0,60)).setObjects(("TFRAP-MIB", "tfrapAlarmType"))
tfrapLmiSeqNumMismatchDteTrap = NotificationType((1, 3, 6, 1, 4, 1, 485, 5) + (0,61)).setObjects(("TFRAP-MIB", "tfrapAlarmType"))
tfrapLmiSeqNumMismatchT1Trap = NotificationType((1, 3, 6, 1, 4, 1, 485, 5) + (0,62)).setObjects(("TFRAP-MIB", "tfrapAlarmType"))
tfrapTrapMutingActive = NotificationType((1, 3, 6, 1, 4, 1, 485, 5) + (0,75)).setObjects(("TFRAP-MIB", "tfrapAlarmType"))
tfrapTrapMutingInactive = NotificationType((1, 3, 6, 1, 4, 1, 485, 5) + (0,76)).setObjects(("TFRAP-MIB", "tfrapAlarmType"))
tfrapVloopUp = NotificationType((1, 3, 6, 1, 4, 1, 485, 5) + (0,90)).setObjects(("TFRAP-MIB", "tfrapAlarmType"), ("TFRAP-MIB", "tfrapDLCINum"), ("TFRAP-MIB", "tfrapInterface"))
tfrapVloopDown = NotificationType((1, 3, 6, 1, 4, 1, 485, 5) + (0,91)).setObjects(("TFRAP-MIB", "tfrapAlarmType"), ("TFRAP-MIB", "tfrapDLCINum"), ("TFRAP-MIB", "tfrapInterface"))
tfrapVloopUpViaRemote = NotificationType((1, 3, 6, 1, 4, 1, 485, 5) + (0,92)).setObjects(("TFRAP-MIB", "tfrapAlarmType"), ("TFRAP-MIB", "tfrapDLCINum"), ("TFRAP-MIB", "tfrapInterface"))
tfrapVloopDownViaRemote = NotificationType((1, 3, 6, 1, 4, 1, 485, 5) + (0,93)).setObjects(("TFRAP-MIB", "tfrapAlarmType"), ("TFRAP-MIB", "tfrapDLCINum"), ("TFRAP-MIB", "tfrapInterface"))
tfrapVloopRequestFailed = NotificationType((1, 3, 6, 1, 4, 1, 485, 5) + (0,94)).setObjects(("TFRAP-MIB", "tfrapAlarmType"), ("TFRAP-MIB", "tfrapDLCINum"), ("TFRAP-MIB", "tfrapInterface"))
tfrapVbertStarted = NotificationType((1, 3, 6, 1, 4, 1, 485, 5) + (0,95)).setObjects(("TFRAP-MIB", "tfrapAlarmType"), ("TFRAP-MIB", "tfrapDLCINum"), ("TFRAP-MIB", "tfrapInterface"))
tfrapVbertStopped = NotificationType((1, 3, 6, 1, 4, 1, 485, 5) + (0,96)).setObjects(("TFRAP-MIB", "tfrapAlarmType"), ("TFRAP-MIB", "tfrapDLCINum"), ("TFRAP-MIB", "tfrapInterface"))
tfrapVbertRequestFailed = NotificationType((1, 3, 6, 1, 4, 1, 485, 5) + (0,97)).setObjects(("TFRAP-MIB", "tfrapAlarmType"), ("TFRAP-MIB", "tfrapDLCINum"), ("TFRAP-MIB", "tfrapInterface"))
tfrapLocalPayloadLoopbackEnabledViaRemoteTrap = NotificationType((1, 3, 6, 1, 4, 1, 485, 5) + (0,136)).setObjects(("TFRAP-MIB", "tfrapAlarmType"))
tfrapLocalPayloadLoopbackDisabledViaRemoteTrap = NotificationType((1, 3, 6, 1, 4, 1, 485, 5) + (0,137)).setObjects(("TFRAP-MIB", "tfrapAlarmType"))
tfrapPvcRxUtilizationExceededTrap = NotificationType((1, 3, 6, 1, 4, 1, 485, 5) + (0,138)).setObjects(("TFRAP-MIB", "tfrapAlarmType"), ("TFRAP-MIB", "tfrapDLCINum"), ("TFRAP-MIB", "tfrapPercentUtilization"), ("TFRAP-MIB", "tfrapUtilizationThreshold"))
tfrapPvcTxUtilizationExceededTrap = NotificationType((1, 3, 6, 1, 4, 1, 485, 5) + (0,139)).setObjects(("TFRAP-MIB", "tfrapAlarmType"), ("TFRAP-MIB", "tfrapDLCINum"), ("TFRAP-MIB", "tfrapPercentUtilization"), ("TFRAP-MIB", "tfrapUtilizationThreshold"))
tfrapPvcRxUtilizationClearedTrap = NotificationType((1, 3, 6, 1, 4, 1, 485, 5) + (0,140)).setObjects(("TFRAP-MIB", "tfrapAlarmType"), ("TFRAP-MIB", "tfrapDLCINum"), ("TFRAP-MIB", "tfrapPercentUtilization"), ("TFRAP-MIB", "tfrapUtilizationThreshold"))
tfrapPvcTxUtilizationClearedTrap = NotificationType((1, 3, 6, 1, 4, 1, 485, 5) + (0,141)).setObjects(("TFRAP-MIB", "tfrapAlarmType"), ("TFRAP-MIB", "tfrapDLCINum"), ("TFRAP-MIB", "tfrapPercentUtilization"), ("TFRAP-MIB", "tfrapUtilizationThreshold"))
tfrapConfigInstallSuccess = NotificationType((1, 3, 6, 1, 4, 1, 485, 5) + (0,142)).setObjects(("TFRAP-MIB", "tfrapAlarmType"), ("TFRAP-MIB", "tfrapCfgLockIpAddress"))
tfrapTftpRequestedTrap = NotificationType((1, 3, 6, 1, 4, 1, 485, 5) + (0,257)).setObjects(("TFRAP-MIB", "tfrapAlarmType"))
tfrapTftpTransferringTrap = NotificationType((1, 3, 6, 1, 4, 1, 485, 5) + (0,258)).setObjects(("TFRAP-MIB", "tfrapAlarmType"))
tfrapTftpProgrammingTrap = NotificationType((1, 3, 6, 1, 4, 1, 485, 5) + (0,259)).setObjects(("TFRAP-MIB", "tfrapAlarmType"))
tfrapTftpAbortedTrap = NotificationType((1, 3, 6, 1, 4, 1, 485, 5) + (0,260)).setObjects(("TFRAP-MIB", "tfrapAlarmType"))
tfrapTftpSuccessTrap = NotificationType((1, 3, 6, 1, 4, 1, 485, 5) + (0,261)).setObjects(("TFRAP-MIB", "tfrapAlarmType"))
tfrapTftpHostUnreachableTrap = NotificationType((1, 3, 6, 1, 4, 1, 485, 5) + (0,262)).setObjects(("TFRAP-MIB", "tfrapAlarmType"))
tfrapTftpNoFileTrap = NotificationType((1, 3, 6, 1, 4, 1, 485, 5) + (0,263)).setObjects(("TFRAP-MIB", "tfrapAlarmType"))
tfrapTftpInvalidFileTrap = NotificationType((1, 3, 6, 1, 4, 1, 485, 5) + (0,264)).setObjects(("TFRAP-MIB", "tfrapAlarmType"))
tfrapTftpCorruptFileTrap = NotificationType((1, 3, 6, 1, 4, 1, 485, 5) + (0,265)).setObjects(("TFRAP-MIB", "tfrapAlarmType"))
mibBuilder.exportSymbols("TFRAP-MIB", tfrapVnipTopoVBertTransitDelayAvg=tfrapVnipTopoVBertTransitDelayAvg, tfrapPerfCirRxPercentUtilizationRange8=tfrapPerfCirRxPercentUtilizationRange8, tfrapPerfApplicationTotalTxCustom4=tfrapPerfApplicationTotalTxCustom4, tfrapPerfSnaTotalRxNetbios=tfrapPerfSnaTotalRxNetbios, tfrapPerfIcmpPerDlciTxGmReduct=tfrapPerfIcmpPerDlciTxGmReduct, tfrapPerfIpxTotalRxNcp=tfrapPerfIpxTotalRxNcp, tfrapT1IntervalNumber=tfrapT1IntervalNumber, tfrapPerfArpTotalRxOther=tfrapPerfArpTotalRxOther, tfrapCfgTransitDelayEntry=tfrapCfgTransitDelayEntry, tfrapPerfRoutingPerDlciInterval=tfrapPerfRoutingPerDlciInterval, tfrapCfgLockID=tfrapCfgLockID, tfrapSysTKRSupported=tfrapSysTKRSupported, tfrapCfgFrPerfUserProtocolsTableClear=tfrapCfgFrPerfUserProtocolsTableClear, tfrapCfgSnmpTrapMuting=tfrapCfgSnmpTrapMuting, tfrapPerfMgmtIpTCPStatsTable=tfrapPerfMgmtIpTCPStatsTable, tfrapPerfIpPerDlciRxIcmp=tfrapPerfIpPerDlciRxIcmp, tfrapPerfCirTxPercentUtilizationRange7=tfrapPerfCirTxPercentUtilizationRange7, tfrapPerfApplicationPerDlciInterval=tfrapPerfApplicationPerDlciInterval, tfrapPerfLmiTotalTxFullStatByteCnt=tfrapPerfLmiTotalTxFullStatByteCnt, tfrapTrapMutingInactive=tfrapTrapMutingInactive, tfrapPerfIcmpPerDlciEntry=tfrapPerfIcmpPerDlciEntry, tfrapPerfCirTxPercentUtilizationRange4=tfrapPerfCirTxPercentUtilizationRange4, tfrapStatusMgmtDefaultDLCIStatus=tfrapStatusMgmtDefaultDLCIStatus, private=private, tfrapLocalUnitLoopbackFailedTrap=tfrapLocalUnitLoopbackFailedTrap, tfrapPerfIcmpPerDlciTxDestUnr=tfrapPerfIcmpPerDlciTxDestUnr, tfrapPerfT1IntervalTable=tfrapPerfT1IntervalTable, tfrapPerfIcmpPerDlciRxRedirect=tfrapPerfIcmpPerDlciRxRedirect, tfrapPerfRoutingTotalTable=tfrapPerfRoutingTotalTable, tfrapSysType=tfrapSysType, tfrapVnipTopoVBertPerUtilCIR=tfrapVnipTopoVBertPerUtilCIR, tfrapPerfSnaTotalRxOther=tfrapPerfSnaTotalRxOther, tfrapPerfIcmpTotalTxTotal=tfrapPerfIcmpTotalTxTotal, tfrapPerfIcmpTotalRxEchoRep=tfrapPerfIcmpTotalRxEchoRep, tfrapV54LoopUpInitiatedTrap=tfrapV54LoopUpInitiatedTrap, tfrapVbertRequestFailed=tfrapVbertRequestFailed, tfrapSysNumDlcisSupported=tfrapSysNumDlcisSupported, tfrapPerfCirTxPercentUtilizationRange3=tfrapPerfCirTxPercentUtilizationRange3, tfrapCfgUnlock=tfrapCfgUnlock, tfrapPerfThruputPerDlciPvcState=tfrapPerfThruputPerDlciPvcState, tfrapCfgTransitDelayInterface=tfrapCfgTransitDelayInterface, tfrapDiagDteSigRTS=tfrapDiagDteSigRTS, tfrapPerfLmiTotalRxLivoStatByteCnt=tfrapPerfLmiTotalRxLivoStatByteCnt, tfrapPerfApplicationPerDlciRxCustom2=tfrapPerfApplicationPerDlciRxCustom2, tfrapPerfApplicationTotalTxTelnet=tfrapPerfApplicationTotalTxTelnet, tfrapDiagVnipIpAddr=tfrapDiagVnipIpAddr, tfrapCfgT1LineEncoding=tfrapCfgT1LineEncoding, tfrapPerfThruputPerDlciIndex=tfrapPerfThruputPerDlciIndex, tfrapPerfMgmtIpICMPInDestUnreachs=tfrapPerfMgmtIpICMPInDestUnreachs, tfrapEventTrapLogVarBind1=tfrapEventTrapLogVarBind1, tfrapCfgFrPerfDlciNamesEntry=tfrapCfgFrPerfDlciNamesEntry, tfrapPerfThruputCmdRemoveStsDlci=tfrapPerfThruputCmdRemoveStsDlci, tfrapPerfIpxTotalRxTotal=tfrapPerfIpxTotalRxTotal, tfrapPerfSnaTotalTxAppn=tfrapPerfSnaTotalTxAppn, enterprises=enterprises, tfrapPvcRxUtilizationClearedTrap=tfrapPvcRxUtilizationClearedTrap, tfrapCsuLoopbackEnabledTrap=tfrapCsuLoopbackEnabledTrap, tfrapPerfCirTxPercentUtilizationRange1=tfrapPerfCirTxPercentUtilizationRange1, tfrapPerfNetwProtoPerDlciValue=tfrapPerfNetwProtoPerDlciValue, tfrapPerfLmiPerDlciTxLivoEnqByteCnt=tfrapPerfLmiPerDlciTxLivoEnqByteCnt, tfrapCfgDteConnStartDs0=tfrapCfgDteConnStartDs0, tfrapCfgFrAddrResDlcis=tfrapCfgFrAddrResDlcis, tfrapPerfArpTotalRxRarpRep=tfrapPerfArpTotalRxRarpRep, tfrapPerfCurrentPerDlciUtilizationEntry=tfrapPerfCurrentPerDlciUtilizationEntry, tfrapCfgFrDLCITable=tfrapCfgFrDLCITable, tfrapCfgDteStartDs0=tfrapCfgDteStartDs0, tfrapStatusT1StatusLED=tfrapStatusT1StatusLED, tfrapStatusDteTxLED=tfrapStatusDteTxLED, tfrapPerfApplicationPerDlciRxSnmpTrap=tfrapPerfApplicationPerDlciRxSnmpTrap, tfrapCfgDteConnStatus=tfrapCfgDteConnStatus, tfrapCfgVnipInactivityTimer=tfrapCfgVnipInactivityTimer, tfrapTftpRequestedTrap=tfrapTftpRequestedTrap, tfrapPerfCurrentPerDlciAggregateUtilization=tfrapPerfCurrentPerDlciAggregateUtilization, tfrapPerfApplicationPerDlciRxFtp=tfrapPerfApplicationPerDlciRxFtp, tfrapPerfIcmpTotalInterval=tfrapPerfIcmpTotalInterval, tfrapIntfT1Mode=tfrapIntfT1Mode, tfrapPerfArpTotalTxRarpRep=tfrapPerfArpTotalTxRarpRep, tfrapPerfNetwProtoPerDlciRxIpx=tfrapPerfNetwProtoPerDlciRxIpx, tfrapPerfApplicationPerDlciRxSmtp=tfrapPerfApplicationPerDlciRxSmtp, tfrapTftpAbortedTrap=tfrapTftpAbortedTrap, tfrapVnipTopoVBERTStatus=tfrapVnipTopoVBERTStatus, tfrapCfgFrLmiType=tfrapCfgFrLmiType, tfrapPerfIpxPerDlciTxRip=tfrapPerfIpxPerDlciTxRip, tfrapCfgFrDLCIEncap=tfrapCfgFrDLCIEncap, tfrapCfgFrLmiInactivityTimeout=tfrapCfgFrLmiInactivityTimeout, tfrapPerfSnaTotalEntry=tfrapPerfSnaTotalEntry, tfrapPerfNetwProtoTotalTxIpx=tfrapPerfNetwProtoTotalTxIpx, tfrapDsuLoopUpInitiatedTrap=tfrapDsuLoopUpInitiatedTrap, tfrapPerfThruputCmdAvailabilityStsDlciResetAll=tfrapPerfThruputCmdAvailabilityStsDlciResetAll, tfrapCfgSecurityTable=tfrapCfgSecurityTable, tfrapPerfIcmpPerDlciRxGmQuery=tfrapPerfIcmpPerDlciRxGmQuery, tfrapCfgTftpInterface=tfrapCfgTftpInterface, tfrapCfgTftpPassword=tfrapCfgTftpPassword, tfrapPerfIcmpTotalTxAddrMaskReq=tfrapPerfIcmpTotalTxAddrMaskReq, tfrapPerfIpxTotalRxSap=tfrapPerfIpxTotalRxSap, tfrapPerfCirTxPercentUtilizationRange8=tfrapPerfCirTxPercentUtilizationRange8, tfrapPerfRoutingTotalInterval=tfrapPerfRoutingTotalInterval, tfrapCfgAppClockSource=tfrapCfgAppClockSource, tfrapDiagVBERTSize=tfrapDiagVBERTSize, tfrapPerfArpPerDlciTxInarpReq=tfrapPerfArpPerDlciTxInarpReq, tfrapPerfIpxPerDlciTxSpx=tfrapPerfIpxPerDlciTxSpx, tfrapPerfNetwLongTermAltDlci=tfrapPerfNetwLongTermAltDlci, tfrapPerfIcmpTotalRxDestUnr=tfrapPerfIcmpTotalRxDestUnr, tfrapPerfApplicationTotalRxHttp=tfrapPerfApplicationTotalRxHttp, tfrapPerfIpxTotalTxTotal=tfrapPerfIpxTotalTxTotal, tfrapPerfRoutingPerDlciTxOspf=tfrapPerfRoutingPerDlciTxOspf, tfrapPerfIpxPerDlciTxNcp=tfrapPerfIpxPerDlciTxNcp, tfrapIntfDteDtr=tfrapIntfDteDtr, tfrapTftpHostUnreachableTrap=tfrapTftpHostUnreachableTrap, tfrapDiagVnipInterface=tfrapDiagVnipInterface, tfrapPerfMgmtIpICMPOutParmProbs=tfrapPerfMgmtIpICMPOutParmProbs, tfrapPerfLmiTotalRxFullEnqByteCnt=tfrapPerfLmiTotalRxFullEnqByteCnt, tfrapV54LoopbackEnabledTrap=tfrapV54LoopbackEnabledTrap, tfrapPerfApplicationTotalRxFtp=tfrapPerfApplicationTotalRxFtp, tfrapPerfNetwProtoPerDlciRxCisco=tfrapPerfNetwProtoPerDlciRxCisco, tfrapPerfSnaPerDlciTxNetbios=tfrapPerfSnaPerDlciTxNetbios, tfrapT1CurrentEntry=tfrapT1CurrentEntry, tfrapPerfNetwLongTermTable=tfrapPerfNetwLongTermTable, tfrapDiagVnipIndex=tfrapDiagVnipIndex, tfrapT1CurrentSESs=tfrapT1CurrentSESs, tfrapTrapMutingActive=tfrapTrapMutingActive, tfrapVnipTopologyIpAddr=tfrapVnipTopologyIpAddr, tfrapCfgStatus=tfrapCfgStatus, tfrapPerfThruputCmdReplaceDlciNewValue=tfrapPerfThruputCmdReplaceDlciNewValue, tfrapDiagVnipEntry=tfrapDiagVnipEntry, tfrapPerfMgmtIpTCPActiveOpens=tfrapPerfMgmtIpTCPActiveOpens, tfrapSysTable=tfrapSysTable, tfrapPerfIcmpPerDlciRxTimestpRep=tfrapPerfIcmpPerDlciRxTimestpRep, tfrapPerfLmiPerDlciTxTotalByteCnt=tfrapPerfLmiPerDlciTxTotalByteCnt, tfrapCfgSnmpMgrClearN=tfrapCfgSnmpMgrClearN, tfrapPerfMgmtIpIFOperStatus=tfrapPerfMgmtIpIFOperStatus, tfrapPerfNetwProtoPerDlciTxIp=tfrapPerfNetwProtoPerDlciTxIp, tfrapDiagVnipTable=tfrapDiagVnipTable, tfrapPerfApplicationTotalEntry=tfrapPerfApplicationTotalEntry, tfrapCfgIpTable=tfrapCfgIpTable, tfrapPerfMgmtIpIPOutRqst=tfrapPerfMgmtIpIPOutRqst, tfrapPerfThruputPerDlciTxFrame=tfrapPerfThruputPerDlciTxFrame, tfrapPerfApplicationTotalRxSnmpTrap=tfrapPerfApplicationTotalRxSnmpTrap, tfrapIntfT1Alarms=tfrapIntfT1Alarms, tfrapPerfRoutingTotalEntry=tfrapPerfRoutingTotalEntry, tfrapPerfArpTotalRxArpReq=tfrapPerfArpTotalRxArpReq, tfrapPerfMgmtIpIPInDscrd=tfrapPerfMgmtIpIPInDscrd, tfrapLocalAggregateLoopbackFailedTrap=tfrapLocalAggregateLoopbackFailedTrap, tfrapPerfCirRxPercentUtilizationRange6=tfrapPerfCirRxPercentUtilizationRange6, tfrapDsuLoopbackFailedTrap=tfrapDsuLoopbackFailedTrap, tfrapPerfMgmtIpIFStatsTable=tfrapPerfMgmtIpIFStatsTable, tfrapPerfRoutingTotalTxNetbios=tfrapPerfRoutingTotalTxNetbios, tfrapPerfThruputPerIntfTable=tfrapPerfThruputPerIntfTable, tfrapT1IntervalIndex=tfrapT1IntervalIndex, tfrapSysContact=tfrapSysContact, tfrapCfgDteTiming=tfrapCfgDteTiming, tfrapPerfIcmpPerDlciInterval=tfrapPerfIcmpPerDlciInterval, tfrapT1TotalIndex=tfrapT1TotalIndex, tfrap=tfrap, tfrapStatusDteRxLED=tfrapStatusDteRxLED, tfrapPerfIcmpPerDlciRxTotal=tfrapPerfIcmpPerDlciRxTotal, tfrapPerfThruputCmdCountsStsDlciResetAll=tfrapPerfThruputCmdCountsStsDlciResetAll, tfrapLmiSourcing=tfrapLmiSourcing, tfrapDiagVLOOP=tfrapDiagVLOOP, tfrapPerfSnaPerDlciRxTotal=tfrapPerfSnaPerDlciRxTotal, tfrapPerfThruputPerDlciTxUtilizationStatus=tfrapPerfThruputPerDlciTxUtilizationStatus, tfrapCfgDteDtr=tfrapCfgDteDtr, tfrapCfgFrPerfUserProtocolsPortNum=tfrapCfgFrPerfUserProtocolsPortNum, tfrapT1IntervalSESs=tfrapT1IntervalSESs, tfrapPerfThruputCmdClearDlciStats=tfrapPerfThruputCmdClearDlciStats, tfrapPerfNetwProtoPerDlciRxIp=tfrapPerfNetwProtoPerDlciRxIp, tfrapT1PerfCmdTypeTable=tfrapT1PerfCmdTypeTable, tfrapPerfThruputPerDlciDowntime=tfrapPerfThruputPerDlciDowntime, tfrapCfgDteRts=tfrapCfgDteRts, tfrapPerfLmiTotalTxLivoEnqByteCnt=tfrapPerfLmiTotalTxLivoEnqByteCnt, tfrapT1TotalESs=tfrapT1TotalESs, tfrapVnipTopologyNumHops=tfrapVnipTopologyNumHops, tfrapDiagDteBerStatus=tfrapDiagDteBerStatus, tfrapPerfThruputPerDlciEIR=tfrapPerfThruputPerDlciEIR, tfrapPerfIpxTotalTable=tfrapPerfIpxTotalTable, tfrapPerfLmiPerDlciRxFullEnqByteCnt=tfrapPerfLmiPerDlciRxFullEnqByteCnt, tfrapPerfLmiPerDlciRxOtherByteCnt=tfrapPerfLmiPerDlciRxOtherByteCnt, tfrapt1netwaisclear=tfrapt1netwaisclear, tfrapCfgTftpInitiate=tfrapCfgTftpInitiate, tfrapPerfIpTotalTxOther=tfrapPerfIpTotalTxOther, tfrapPerfArpTotalTxInarpRep=tfrapPerfArpTotalTxInarpRep, tfrapCfgFrPerfDlciNamesCirType=tfrapCfgFrPerfDlciNamesCirType, tfrapCfgDteConnAutoUpdate=tfrapCfgDteConnAutoUpdate, tfrapCfgTftpNumBytes=tfrapCfgTftpNumBytes, tfrapVnipTopologyDlci=tfrapVnipTopologyDlci, tfrapDiagUnitLocLoop=tfrapDiagUnitLocLoop, tfrapCfgFrCrcMode=tfrapCfgFrCrcMode, tfrapPerfThruputPerDlciMTTSR=tfrapPerfThruputPerDlciMTTSR, tfrapPerfIpPerDlciTxIcmp=tfrapPerfIpPerDlciTxIcmp, tfrapPerfApplicationTotalTxHttp=tfrapPerfApplicationTotalTxHttp, tfrapPerfIpTotalEntry=tfrapPerfIpTotalEntry, tfrapPerfCirPercentUtilization=tfrapPerfCirPercentUtilization, tfrapPerfArpPerDlciTxTotal=tfrapPerfArpPerDlciTxTotal, tfrapCfgFrPerfLTProtocolFilterEntry=tfrapCfgFrPerfLTProtocolFilterEntry, tfrapStatusDteStatusLED=tfrapStatusDteStatusLED, tfrapTftpCorruptFileTrap=tfrapTftpCorruptFileTrap, Index=Index, tfrapPerfIpPerDlciRxTcp=tfrapPerfIpPerDlciRxTcp, tfrapPerfApplicationTotalRxSmtp=tfrapPerfApplicationTotalRxSmtp, tfrapPerfIpxTotalTxNetbios=tfrapPerfIpxTotalTxNetbios, tfrapLocalConfigTrap=tfrapLocalConfigTrap, tfrapPerfNetwProtoPerDlciTxIpx=tfrapPerfNetwProtoPerDlciTxIpx, tfrapCfgT1Interface=tfrapCfgT1Interface, tfrapPerfNetwLongTermDlci=tfrapPerfNetwLongTermDlci, tfrapPerfArpTotalRxRarpReq=tfrapPerfArpTotalRxRarpReq, tfrapLmiSourcingChangeNetT1Trap=tfrapLmiSourcingChangeNetT1Trap, tfrapPerfMgmtIpIFOutOctets=tfrapPerfMgmtIpIFOutOctets, tfrapIntfDteCts=tfrapIntfDteCts, tfrapPerfMgmtIpICMPOutErrors=tfrapPerfMgmtIpICMPOutErrors, tfrapCfgUpdate=tfrapCfgUpdate, tfrapDiagDteV54Lpbk=tfrapDiagDteV54Lpbk, tfrapT1IntervalCSSs=tfrapT1IntervalCSSs, tfrapPerfIpTotalRxTcp=tfrapPerfIpTotalRxTcp, tfrapPerfIcmpTotalRxSrcQuench=tfrapPerfIcmpTotalRxSrcQuench, tfrapCfgFrPerfDlciNamesTableClear=tfrapCfgFrPerfDlciNamesTableClear, tfrapPerfIcmpTotalRxAddrMaskRep=tfrapPerfIcmpTotalRxAddrMaskRep, tfrapT1CurrentBESs=tfrapT1CurrentBESs, tfrapPerfThruputCommands=tfrapPerfThruputCommands, tfrapPerfCurrentUnitUtilization=tfrapPerfCurrentUnitUtilization, tfrapPerfSnaPerDlciRxPeriph=tfrapPerfSnaPerDlciRxPeriph, tfrapStatusMgmtDefaultDLCINo=tfrapStatusMgmtDefaultDLCINo, tfrapPerfCirPercentUtilizationDlciValue=tfrapPerfCirPercentUtilizationDlciValue, tfrapT1CurrentUASs=tfrapT1CurrentUASs, tfrapPerfNetwProtoPerDlciRxOther=tfrapPerfNetwProtoPerDlciRxOther, tfrapPerfNetwProtoTotalTxAnnexG=tfrapPerfNetwProtoTotalTxAnnexG, tfrapPerfIpxPerDlciTxNetbios=tfrapPerfIpxPerDlciTxNetbios, tfrapPerfIcmpPerDlciRxTimeExcd=tfrapPerfIcmpPerDlciRxTimeExcd, tfrapPerfSnaTotalTxOther=tfrapPerfSnaTotalTxOther, tfrapPerfNetwLongTermAltArray=tfrapPerfNetwLongTermAltArray, tfrapPerfApplicationTotalTxFtp=tfrapPerfApplicationTotalTxFtp, tfrapLocalPayloadLoopbackEnabledViaRemoteTrap=tfrapLocalPayloadLoopbackEnabledViaRemoteTrap, tfrapPerfSnaTotalRxPeriph=tfrapPerfSnaTotalRxPeriph, tfrapCfgSnmpMgrInterface=tfrapCfgSnmpMgrInterface, tfrapSysLTFNumDlcis=tfrapSysLTFNumDlcis, tfrapStatusLedTable=tfrapStatusLedTable, tfrapPerfSnaPerDlciTxOther=tfrapPerfSnaPerDlciTxOther, tfrapPerfIpxPerDlciRxNetbios=tfrapPerfIpxPerDlciRxNetbios, tfrapCfgTDDeleteInterface=tfrapCfgTDDeleteInterface, tfrapPerfNetwProtoPerDlciTxArp=tfrapPerfNetwProtoPerDlciTxArp, tfrapBadConfigTrap=tfrapBadConfigTrap, tfrapSysLTFNumProtocols=tfrapSysLTFNumProtocols, tfrapPerfSnaTotalRxAppn=tfrapPerfSnaTotalRxAppn, tfrapPerfIpxPerDlciTable=tfrapPerfIpxPerDlciTable, tfrapPerfIcmpPerDlciRxGmReport=tfrapPerfIcmpPerDlciRxGmReport, tfrapPerfApplicationPerDlciTxFtp=tfrapPerfApplicationPerDlciTxFtp, tfrapPerfRoutingPerDlciEntry=tfrapPerfRoutingPerDlciEntry, tfrapPerfNetwProtoPerDlciRxTotal=tfrapPerfNetwProtoPerDlciRxTotal, tfrapDiagVBERTRate=tfrapDiagVBERTRate, tfrapPerfNetwProtoTotalTxSna=tfrapPerfNetwProtoTotalTxSna, tfrapPerfIpTotalTxUdp=tfrapPerfIpTotalTxUdp, tfrapPerfLmiPerDlciRxLivoStatByteCnt=tfrapPerfLmiPerDlciRxLivoStatByteCnt, tfrapVnipTopoVBertTimeElapse=tfrapVnipTopoVBertTimeElapse, tfrapSysHardRev=tfrapSysHardRev, tfrapPerfArpPerDlciInterval=tfrapPerfArpPerDlciInterval)
mibBuilder.exportSymbols("TFRAP-MIB", tfrapCfgCommStopBits=tfrapCfgCommStopBits, tfrapPerfThruputPerDlciTxByte=tfrapPerfThruputPerDlciTxByte, tfrapPerfSnaPerDlciTxTotal=tfrapPerfSnaPerDlciTxTotal, tfrapCfgFrPerfUserProtocolsIndex=tfrapCfgFrPerfUserProtocolsIndex, tfrapStatusLmiAutosense=tfrapStatusLmiAutosense, tfrapPerfNetwLongTermEntry=tfrapPerfNetwLongTermEntry, tfrapCfgSnmpMgrDlci=tfrapCfgSnmpMgrDlci, tfrapPerfIpxTotalRxRip=tfrapPerfIpxTotalRxRip, tfrapPerfIpxPerDlciRxRip=tfrapPerfIpxPerDlciRxRip, tfrapSysSLIPSupported=tfrapSysSLIPSupported, tfrapPerfRoutingPerDlciTxNetbios=tfrapPerfRoutingPerDlciTxNetbios, tfrapCfgLockIpAddress=tfrapCfgLockIpAddress, tfrapPerfThruputCmdClearDteStats=tfrapPerfThruputCmdClearDteStats, tfrapPerfIcmpTotalRxPktTooBig=tfrapPerfIcmpTotalRxPktTooBig, tfrapVnipTopologyInterface=tfrapVnipTopologyInterface, tfrapSysSelDTESupported=tfrapSysSelDTESupported, tfrapT1TotalCSSs=tfrapT1TotalCSSs, tfrapPerfIcmpTotalRxTimestpRep=tfrapPerfIcmpTotalRxTimestpRep, tfrapPerfMgmtIpTCPAttemptFails=tfrapPerfMgmtIpTCPAttemptFails, tfrapt1netwsynclossdeclare=tfrapt1netwsynclossdeclare, tfrapPerfMgmtIpICMPInEchoReps=tfrapPerfMgmtIpICMPInEchoReps, tfrapPerfNetwProtoPerDlciRxSna=tfrapPerfNetwProtoPerDlciRxSna, tfrapPerfThruputPerDlciCirType=tfrapPerfThruputPerDlciCirType, tfrapt1netwcarrierloss=tfrapt1netwcarrierloss, tfrapPerfIpxPerDlciTxSap=tfrapPerfIpxPerDlciTxSap, tfrapCsuLoopbackFailedTrap=tfrapCsuLoopbackFailedTrap, tfrapPerfIpTotalRxOther=tfrapPerfIpTotalRxOther, tfrapDiagT1TimeRemaining=tfrapDiagT1TimeRemaining, tfrapLocalDteLoopbackFailedTrap=tfrapLocalDteLoopbackFailedTrap, tfrapPerfIcmpPerDlciRxAddrMaskReq=tfrapPerfIcmpPerDlciRxAddrMaskReq, tfrapPerfApplicationTotalTxCustom2=tfrapPerfApplicationTotalTxCustom2, tfrapPerfIcmpPerDlciRxEchoRep=tfrapPerfIcmpPerDlciRxEchoRep, tfrapDiagDteRmtV54Lpbk=tfrapDiagDteRmtV54Lpbk, tfrapPerfCurrentWanUtilization=tfrapPerfCurrentWanUtilization, tfrapCfgFrDLCIValue=tfrapCfgFrDLCIValue, tfrapCfgAppPerfBuffLimit=tfrapCfgAppPerfBuffLimit, tfrapPerfMgmtIpIPInProtUnk=tfrapPerfMgmtIpIPInProtUnk, tfrapPerfThruputPerDlciUptime=tfrapPerfThruputPerDlciUptime, tfrapPerfNetwProtoTotalRxTotal=tfrapPerfNetwProtoTotalRxTotal, tfrapPerfIcmpPerDlciTxTotal=tfrapPerfIcmpPerDlciTxTotal, tfrapPerfSnaPerDlciValue=tfrapPerfSnaPerDlciValue, tfrapPerfSnaPerDlciTable=tfrapPerfSnaPerDlciTable, tfrapPerfApplicationPerDlciValue=tfrapPerfApplicationPerDlciValue, tfrapPerfNetwLongTermAltProtocol=tfrapPerfNetwLongTermAltProtocol, tfrapStatus=tfrapStatus, tfrapPerfCirTxPercentUtilizationRange6=tfrapPerfCirTxPercentUtilizationRange6, tfrapPerfIcmpPerDlciTxTimestpRep=tfrapPerfIcmpPerDlciTxTimestpRep, tfrapCfgLcdPassword=tfrapCfgLcdPassword, tfrapPerfApplicationTotalRxSnmp=tfrapPerfApplicationTotalRxSnmp, tfrapPerfApplicationPerDlciTxCustom4=tfrapPerfApplicationPerDlciTxCustom4, tfrapCfgSnmpMgrEntry=tfrapCfgSnmpMgrEntry, tfrapPerfThruputPerDlciCreateTime=tfrapPerfThruputPerDlciCreateTime, tfrapVloopDown=tfrapVloopDown, tfrapCsuLoopDownCompletedTrap=tfrapCsuLoopDownCompletedTrap, tfrapPerfApplicationPerDlciTxSnmp=tfrapPerfApplicationPerDlciTxSnmp, tfrapCfgDteConnAutoStatus=tfrapCfgDteConnAutoStatus, tfrapCfgFrAddrResMode=tfrapCfgFrAddrResMode, tfrapPerfSnaPerDlciTxAppn=tfrapPerfSnaPerDlciTxAppn, tfrapPerfThruputPerDlciEntry=tfrapPerfThruputPerDlciEntry, tfrapPerfLmiPerDlciTxFullEnqByteCnt=tfrapPerfLmiPerDlciTxFullEnqByteCnt, tfrapPerfCurrentDteUtilization=tfrapPerfCurrentDteUtilization, tfrapCfgFrPerfDlciUtilDuration=tfrapCfgFrPerfDlciUtilDuration, tfrapCfgTDDeleteTable=tfrapCfgTDDeleteTable, tfrapCfgVnipTransitDelayFrequency=tfrapCfgVnipTransitDelayFrequency, tfrapPerfMgmtIpICMPStatsTable=tfrapPerfMgmtIpICMPStatsTable, tfrapPerfIcmpPerDlciRxAddrMaskRep=tfrapPerfIcmpPerDlciRxAddrMaskRep, tfrapPerfArpPerDlciTxRarpRep=tfrapPerfArpPerDlciTxRarpRep, tfrapT1TotalSESs=tfrapT1TotalSESs, tfrapPerfCirRxPercentUtilizationRange1=tfrapPerfCirRxPercentUtilizationRange1, tfrapCfgIpPeerIP=tfrapCfgIpPeerIP, tfrapCfgFrPerfDlciNamesCirValue=tfrapCfgFrPerfDlciNamesCirValue, tfrapSystem=tfrapSystem, tfrapPerfMgmtIpUDPStatsTable=tfrapPerfMgmtIpUDPStatsTable, tfrapEventTrapLogTimeStamp=tfrapEventTrapLogTimeStamp, tfrapPerfIcmpTotalTxSrcQuench=tfrapPerfIcmpTotalTxSrcQuench, tfrapCfgFrLmiFullStatus=tfrapCfgFrLmiFullStatus, tfrapCfgCommFlowCtrl=tfrapCfgCommFlowCtrl, tfrapPerfIcmpTotalTxGmReduct=tfrapPerfIcmpTotalTxGmReduct, tfrapCfgTftpTable=tfrapCfgTftpTable, tfrapPerfIcmpTotalRxTotal=tfrapPerfIcmpTotalRxTotal, tfrapT1IntervalSEFSs=tfrapT1IntervalSEFSs, tfrapPerfNetwLongTermAltTable=tfrapPerfNetwLongTermAltTable, tfrapCfgIpMaxMTU=tfrapCfgIpMaxMTU, tfrapPerfIpPerDlciRxOther=tfrapPerfIpPerDlciRxOther, tfrapPerfArpTotalTxInarpReq=tfrapPerfArpTotalTxInarpReq, tfrapPerfSnaTotalRxSubarea=tfrapPerfSnaTotalRxSubarea, tfrapTftpTransferringTrap=tfrapTftpTransferringTrap, tfrapPerfThruputPerDlciTxDe=tfrapPerfThruputPerDlciTxDe, tfrapVnipTopoTDMinDelay=tfrapVnipTopoTDMinDelay, tfrapPerfIpxTotalTxSap=tfrapPerfIpxTotalTxSap, tfrapPerfLmiPerDlciEntry=tfrapPerfLmiPerDlciEntry, tfrapPerfThruputPerIntfRxAbortCnt=tfrapPerfThruputPerIntfRxAbortCnt, tfrapPerfLmiTotalRxLivoEnqByteCnt=tfrapPerfLmiTotalRxLivoEnqByteCnt, tfrapDteSignalRtsOffTrap=tfrapDteSignalRtsOffTrap, tfrapPerfSnaPerDlciInterval=tfrapPerfSnaPerDlciInterval, tfrapPerfNetwProtoTotalRxArp=tfrapPerfNetwProtoTotalRxArp, tfrapPerfMgmtIpIPOutDscrd=tfrapPerfMgmtIpIPOutDscrd, tfrapCfgDteConnDs0Required=tfrapCfgDteConnDs0Required, tfrapCfgDteLineRate=tfrapCfgDteLineRate, tfrapLocalPayloadLoopbackFailedTrap=tfrapLocalPayloadLoopbackFailedTrap, tfrapPerfLmiTotalTxLivoStatByteCnt=tfrapPerfLmiTotalTxLivoStatByteCnt, tfrapTftpSuccessTrap=tfrapTftpSuccessTrap, tfrapCfgFrPerfLTProtocolFilterProtocol=tfrapCfgFrPerfLTProtocolFilterProtocol, tfrapPerfThruputPerIntfIndex=tfrapPerfThruputPerIntfIndex, tfrapPerfApplicationPerDlciTxSmtp=tfrapPerfApplicationPerDlciTxSmtp, tfrapSysNumDteInstalled=tfrapSysNumDteInstalled, tfrapCfgIpTelnetAutoLogOut=tfrapCfgIpTelnetAutoLogOut, tfrapPerfMgmtIp=tfrapPerfMgmtIp, tfrapPerfIcmpPerDlciTxEchoRep=tfrapPerfIcmpPerDlciTxEchoRep, tfrapStatusAllLEDs=tfrapStatusAllLEDs, tfrapPerfRoutingTotalRxRip=tfrapPerfRoutingTotalRxRip, tfrapPerfNetwProtoTotalTxArp=tfrapPerfNetwProtoTotalTxArp, tfrapPvcTxUtilizationClearedTrap=tfrapPvcTxUtilizationClearedTrap, tfrapCfgT1Density=tfrapCfgT1Density, tfrapPerfIcmpPerDlciTxPktTooBig=tfrapPerfIcmpPerDlciTxPktTooBig, tfrapPerfApplicationPerDlciTxCustom3=tfrapPerfApplicationPerDlciTxCustom3, tfrapT1IntervalUASs=tfrapT1IntervalUASs, tfrapPerfIpxPerDlciTxOther=tfrapPerfIpxPerDlciTxOther, tfrapLocalUnitLoopbackEnabledTrap=tfrapLocalUnitLoopbackEnabledTrap, tfrapLocalPayloadLoopbackEnabledTrap=tfrapLocalPayloadLoopbackEnabledTrap, tfrapPerfThruputPerDlciRxByte=tfrapPerfThruputPerDlciRxByte, tfrapPerfMgmtIpICMPOutEchos=tfrapPerfMgmtIpICMPOutEchos, tfrapCfgFrPerf=tfrapCfgFrPerf, tfrapPerfIpTotalRxIcmp=tfrapPerfIpTotalRxIcmp, tfrapCfgT1Table=tfrapCfgT1Table, tfrapPerfNetwProtoPerDlciRxArp=tfrapPerfNetwProtoPerDlciRxArp, tfrapPerfIcmpPerDlciRxSrcQuench=tfrapPerfIcmpPerDlciRxSrcQuench, tfrapPerfRoutingTotalRxOspf=tfrapPerfRoutingTotalRxOspf, tfrapVbertStopped=tfrapVbertStopped, tfrapCfgAppType=tfrapCfgAppType, tfrapCfgFrPerfLTProtocolFilterIndex=tfrapCfgFrPerfLTProtocolFilterIndex, tfrapDiagT1LocPylLpbk=tfrapDiagT1LocPylLpbk, tfrapPerfIcmpPerDlciTxRedirect=tfrapPerfIcmpPerDlciTxRedirect, tfrapPerfMgmtIpICMPOutDestUnreachs=tfrapPerfMgmtIpICMPOutDestUnreachs, tfrapCfgT1LboSetting=tfrapCfgT1LboSetting, tfrapCfgFrPerfLTProtocolFilterTable=tfrapCfgFrPerfLTProtocolFilterTable, tfrapEventLogAltSeqNum=tfrapEventLogAltSeqNum, tfrapPerfApplicationTotalTxSnmp=tfrapPerfApplicationTotalTxSnmp, tfrapPerfIpPerDlciTxOther=tfrapPerfIpPerDlciTxOther, tfrapPerfIcmpPerDlciRxPktTooBig=tfrapPerfIcmpPerDlciRxPktTooBig, tfrapPerfThruputPerDlciRxFecn=tfrapPerfThruputPerDlciRxFecn, tfrapPerfRoutingPerDlciRxRip=tfrapPerfRoutingPerDlciRxRip, tfrapPerfRoutingTotalRxNetbios=tfrapPerfRoutingTotalRxNetbios, tfrapPerfSnaPerDlciTxPeriph=tfrapPerfSnaPerDlciTxPeriph, tfrapCfgFrPerfLTDlciFilterDlciNum=tfrapCfgFrPerfLTDlciFilterDlciNum, tfrapSysFeatureTable=tfrapSysFeatureTable, tfrapPerfIcmpPerDlciTxAddrMaskReq=tfrapPerfIcmpPerDlciTxAddrMaskReq, tfrapPerfThruputPerDlciCIR=tfrapPerfThruputPerDlciCIR, tfrapPerfThruput=tfrapPerfThruput, tfrapPerfIpPerDlciTxTotal=tfrapPerfIpPerDlciTxTotal, tfrapPerfLmiTotalTxTotalByteCnt=tfrapPerfLmiTotalTxTotalByteCnt, tfrapPerfIpTotalTxIgrp=tfrapPerfIpTotalTxIgrp, tfrapPerfIpxTotalRxNetbios=tfrapPerfIpxTotalRxNetbios, tfrapCsuLoopUpInitiatedTrap=tfrapCsuLoopUpInitiatedTrap, tfrapCfgIpMyIP=tfrapCfgIpMyIP, tfrapCfgFrPerfTimersSTInterval=tfrapCfgFrPerfTimersSTInterval, tfrapPerfIpPerDlciTable=tfrapPerfIpPerDlciTable, tfrapDteSignalDtrOnTrap=tfrapDteSignalDtrOnTrap, tfrapVloopUpViaRemote=tfrapVloopUpViaRemote, tfrapCfgFrPerfUserProtocolsEntry=tfrapCfgFrPerfUserProtocolsEntry, tfrapCfgLcdPswdEnable=tfrapCfgLcdPswdEnable, tfrapPerfLmiTotalTable=tfrapPerfLmiTotalTable, tfrapPerfArpTotalTable=tfrapPerfArpTotalTable, tfrapPerfArpPerDlciTxOther=tfrapPerfArpPerDlciTxOther, tfrapPerfLmiPerDlciInterval=tfrapPerfLmiPerDlciInterval, tfrapPerfCurrentPerDlciRxUtilization=tfrapPerfCurrentPerDlciRxUtilization, tfrapPerfIpxPerDlciRxTotal=tfrapPerfIpxPerDlciRxTotal, tfrapCfgTftpFilename=tfrapCfgTftpFilename, tfrapSysMLSupported=tfrapSysMLSupported, tfrapPerfIcmpPerDlciTxAddrMaskRep=tfrapPerfIcmpPerDlciTxAddrMaskRep, tfrapPerfIcmpTotalTxEchoReq=tfrapPerfIcmpTotalTxEchoReq, tfrapt1netwsyncacquire=tfrapt1netwsyncacquire, tfrapPerfMgmtIpTCPInSegs=tfrapPerfMgmtIpTCPInSegs, tfrapPerfIpxPerDlciInterval=tfrapPerfIpxPerDlciInterval, tfrapCfgFrPerfDlciDefaultUtilThreshold=tfrapCfgFrPerfDlciDefaultUtilThreshold, tfrapPerfMgmtIpICMPOutMsgs=tfrapPerfMgmtIpICMPOutMsgs, tfrapDiagVBERTPktPercent=tfrapDiagVBERTPktPercent, tfrapPerfNetwProtoPerDlciInterval=tfrapPerfNetwProtoPerDlciInterval, tfrapT1PerfClearAll=tfrapT1PerfClearAll, tfrapCfgTransitDelayTable=tfrapCfgTransitDelayTable, tfrapPerfArpPerDlciValue=tfrapPerfArpPerDlciValue, tfrapPerfCurrentPerDlciTxUtilization=tfrapPerfCurrentPerDlciTxUtilization, tfrapDsuLoopDownCompletedTrap=tfrapDsuLoopDownCompletedTrap, tfrapCfgTDDeleteDlciValue=tfrapCfgTDDeleteDlciValue, tfrapPerfThruputPerDlciTxThruput=tfrapPerfThruputPerDlciTxThruput, tfrapDiagDteLclLpbk=tfrapDiagDteLclLpbk, tfrapPerfThruputCmdReplaceDlciEntry=tfrapPerfThruputCmdReplaceDlciEntry, tfrapSysPrompt=tfrapSysPrompt, tfrapTftpProgrammingTrap=tfrapTftpProgrammingTrap, tfrapPerfIcmpTotalTxTimeExcd=tfrapPerfIcmpTotalTxTimeExcd, tfrapPerfNetwProtoTotalTxIp=tfrapPerfNetwProtoTotalTxIp, tfrapEventTrapLogSpecificEvent=tfrapEventTrapLogSpecificEvent, tfrapStatusIntfTable=tfrapStatusIntfTable, tfrapPerfIpPerDlciRxTotal=tfrapPerfIpPerDlciRxTotal, tfrapPerfIcmpTotalRxRedirect=tfrapPerfIcmpTotalRxRedirect, tfrapPerfArpPerDlciRxTotal=tfrapPerfArpPerDlciRxTotal, tfrapT1PerfClearEvents=tfrapT1PerfClearEvents, tfrapPerfCirRxPercentUtilizationRange2=tfrapPerfCirRxPercentUtilizationRange2, tfrapPerfThruputPerDlciRxThruput=tfrapPerfThruputPerDlciRxThruput, tfrapIntfDteDsr=tfrapIntfDteDsr, tfrapPerfIpPerDlciTxTcp=tfrapPerfIpPerDlciTxTcp, tfrapPerfIpTotalRxTotal=tfrapPerfIpTotalRxTotal, tfrapCfgTftpDlci=tfrapCfgTftpDlci, tfrapT1IntervalLCVs=tfrapT1IntervalLCVs, tfrapEventLogAltArray=tfrapEventLogAltArray, tfrapPerfCirTxPercentUtilizationRange2=tfrapPerfCirTxPercentUtilizationRange2, tfrapPerfLmiTotalInterval=tfrapPerfLmiTotalInterval, tfrapEventTrapLogVarBind3=tfrapEventTrapLogVarBind3, tfrapCfgDteConnRate=tfrapCfgDteConnRate, tfrapCfgCliPassword=tfrapCfgCliPassword, tfrapCfgFrPerfDlciNamesDelete=tfrapCfgFrPerfDlciNamesDelete, tfrapPerfMgmtIpTCPCurrEstab=tfrapPerfMgmtIpTCPCurrEstab, tfrapPerfIcmpPerDlciTxGmReport=tfrapPerfIcmpPerDlciTxGmReport, tfrapPerfIcmpTotalTxPktTooBig=tfrapPerfIcmpTotalTxPktTooBig, tfrapCfgVnipMode=tfrapCfgVnipMode, tfrapPerfThruputCmdCountsStsDlciReset=tfrapPerfThruputCmdCountsStsDlciReset, tfrapPerfApplicationTotalRxTftp=tfrapPerfApplicationTotalRxTftp, tfrapVnipTopologyLocalDlci=tfrapVnipTopologyLocalDlci, tfrapLocalNetLoopbackFailedTrap=tfrapLocalNetLoopbackFailedTrap, tfrapPerfRoutingPerDlciRxOspf=tfrapPerfRoutingPerDlciRxOspf, tfrapPerfApplicationTotalRxCustom1=tfrapPerfApplicationTotalRxCustom1, tfrapt1netwredalarmclear=tfrapt1netwredalarmclear, tfrapCfgCommParity=tfrapCfgCommParity, tfrapLmiSourcingChangeNetDteTrap=tfrapLmiSourcingChangeNetDteTrap, tfrapCfgSnmpMgrIP=tfrapCfgSnmpMgrIP, tfrapCfgFrPerfLTProtocolFilterTableClear=tfrapCfgFrPerfLTProtocolFilterTableClear, tfrapPerfThruputCmdAllStsDlciResetAll=tfrapPerfThruputCmdAllStsDlciResetAll, tfrapCfgFrPerfTimersLTInterval=tfrapCfgFrPerfTimersLTInterval, tfrapTrap=tfrapTrap, tfrapCfgFrPerfLTDlciFilterTable=tfrapCfgFrPerfLTDlciFilterTable, tfrapPerfArpTotalInterval=tfrapPerfArpTotalInterval, tfrapPerfIcmpTotalRxGmQuery=tfrapPerfIcmpTotalRxGmQuery, tfrapPerfNetwProtoTotalRxIpx=tfrapPerfNetwProtoTotalRxIpx, tfrapCfgFrLmiKeepaliveTimeout=tfrapCfgFrLmiKeepaliveTimeout, tfrapT1TotalLCVs=tfrapT1TotalLCVs, tfrapStatusMgmtTable=tfrapStatusMgmtTable, tfrapCfgLcdPswdTimeout=tfrapCfgLcdPswdTimeout, tfrapPerfApplicationTotalTxSnmpTrap=tfrapPerfApplicationTotalTxSnmpTrap, tfrapDiagT1RmtLpbkStatus=tfrapDiagT1RmtLpbkStatus, tfrapDsuLoopbackDisabledTrap=tfrapDsuLoopbackDisabledTrap, tfrapVnipTopologyTable=tfrapVnipTopologyTable, tfrapLmiSourcingChangeUserDteTrap=tfrapLmiSourcingChangeUserDteTrap, tfrapCfgDteChannelDensity=tfrapCfgDteChannelDensity, tfrapCfgLock=tfrapCfgLock, tfrapPerfIpTotalRxIgrp=tfrapPerfIpTotalRxIgrp, tfrapEventTrapLogVarBind2=tfrapEventTrapLogVarBind2, tfrapT1CurrentSEFSs=tfrapT1CurrentSEFSs, tfrapPerfLmiTotalRxOtherByteCnt=tfrapPerfLmiTotalRxOtherByteCnt, tfrapPerfThruputPerDlciMTBSO=tfrapPerfThruputPerDlciMTBSO, tfrapLocalPayloadLoopbackDisabledTrap=tfrapLocalPayloadLoopbackDisabledTrap, tfrapConfigInstallSuccess=tfrapConfigInstallSuccess, tfrapPerfNetwProtoPerDlciRxVnip=tfrapPerfNetwProtoPerDlciRxVnip, tfrapCfgFrPerfUserProtocolsTable=tfrapCfgFrPerfUserProtocolsTable, tfrapCfgTransitDelayNumHops=tfrapCfgTransitDelayNumHops)
mibBuilder.exportSymbols("TFRAP-MIB", tfrapPerfIcmpPerDlciRxEchoReq=tfrapPerfIcmpPerDlciRxEchoReq, tfrapPerfIpTotalRxUdp=tfrapPerfIpTotalRxUdp, tfrapPerfMgmtIpIPOutNoRt=tfrapPerfMgmtIpIPOutNoRt, tfrapPerfMgmtIpIPStatsTable=tfrapPerfMgmtIpIPStatsTable, tfrapStatusMgmtInterface=tfrapStatusMgmtInterface, tfrapPerfIcmpTotalRxTimeExcd=tfrapPerfIcmpTotalRxTimeExcd, tfrapPerfIpxTotalRxOther=tfrapPerfIpxTotalRxOther, tfrapPerfIcmpPerDlciRxParamProb=tfrapPerfIcmpPerDlciRxParamProb, tfrapPerfArpPerDlciRxInarpRep=tfrapPerfArpPerDlciRxInarpRep, tfrapSysNumDlciNames=tfrapSysNumDlciNames, tfrapPerfIpTotalTxTcp=tfrapPerfIpTotalTxTcp, tfrapCfgIpMask=tfrapCfgIpMask, tfrapPvcTxUtilizationExceededTrap=tfrapPvcTxUtilizationExceededTrap, tfrapPercentUtilization=tfrapPercentUtilization, tfrapPerfThruputPerDlciAvailability=tfrapPerfThruputPerDlciAvailability, tfrapPerfThruputPerDlciTable=tfrapPerfThruputPerDlciTable, tfrapPerfApplicationTotalRxCustom4=tfrapPerfApplicationTotalRxCustom4, tfrapDiagUnitTable=tfrapDiagUnitTable, tfrapPerfNetwProtoTotalRxCisco=tfrapPerfNetwProtoTotalRxCisco, tfrapt1netwredalarmdeclare=tfrapt1netwredalarmdeclare, tfrapPerfThruputPerIntfRxCrcErrCnt=tfrapPerfThruputPerIntfRxCrcErrCnt, tfrapCfgCommTable=tfrapCfgCommTable, tfrapPerfArpPerDlciTable=tfrapPerfArpPerDlciTable, tfrapPerfApplicationPerDlciRxTelnet=tfrapPerfApplicationPerDlciRxTelnet, tfrapPerfLmiPerDlciTxLivoStatByteCnt=tfrapPerfLmiPerDlciTxLivoStatByteCnt, tfrapCfgIpTelnetEnable=tfrapCfgIpTelnetEnable, tfrapCfgCommMode=tfrapCfgCommMode, tfrapCfgSnmpMgrIndex=tfrapCfgSnmpMgrIndex, tfrapT1TotalEntry=tfrapT1TotalEntry, tfrapPerfRoutingPerDlciTable=tfrapPerfRoutingPerDlciTable, tfrapDiagDteBerErrSec=tfrapDiagDteBerErrSec, tfrapCfgDteIntfType=tfrapCfgDteIntfType, tfrapPerfApplicationPerDlciRxCustom1=tfrapPerfApplicationPerDlciRxCustom1, tfrapLocalDteLoopbackEnabledTrap=tfrapLocalDteLoopbackEnabledTrap, tfrapCfgAppTable=tfrapCfgAppTable, tfrapPerfApplicationTotalTxCustom3=tfrapPerfApplicationTotalTxCustom3, tfrapPerfNetwLongTermValue=tfrapPerfNetwLongTermValue, tfrapPerfMgmtIpICMPInRedirects=tfrapPerfMgmtIpICMPInRedirects, tfrapUtilizationThreshold=tfrapUtilizationThreshold, tfrapPerfMgmtIpICMPInMsgs=tfrapPerfMgmtIpICMPInMsgs, tfrapPerfMgmtIpUDPOutDatagrams=tfrapPerfMgmtIpUDPOutDatagrams, tfrapBertInitiatedTrap=tfrapBertInitiatedTrap, tfrapVnipTopoVBertPerUtilEIR=tfrapVnipTopoVBertPerUtilEIR, tfrapPerfApplicationPerDlciRxHttp=tfrapPerfApplicationPerDlciRxHttp, tfrapPerfCurrentAggregateUtilization=tfrapPerfCurrentAggregateUtilization, tfrapPerfMgmtIpICMPInEchos=tfrapPerfMgmtIpICMPInEchos, tfrapEventLogCurrentSeqNum=tfrapEventLogCurrentSeqNum, tfrapSysNumT1Installed=tfrapSysNumT1Installed, tfrapPerfThruputPerDlciRxBecn=tfrapPerfThruputPerDlciRxBecn, tfrapPerfNetwProtoTotalTable=tfrapPerfNetwProtoTotalTable, tfrapCfgSetCommunityString=tfrapCfgSetCommunityString, tfrapPerfSnaTotalInterval=tfrapPerfSnaTotalInterval, tfrapDLCINum=tfrapDLCINum, tfrapPerfNetwProtoTotalRxIp=tfrapPerfNetwProtoTotalRxIp, tfrapSysSoftRev=tfrapSysSoftRev, tfrapPerfLmiTotalEntry=tfrapPerfLmiTotalEntry, tfrapPerfCirRxPercentUtilizationRange5=tfrapPerfCirRxPercentUtilizationRange5, tfrapPerfApplicationPerDlciTxCustom1=tfrapPerfApplicationPerDlciTxCustom1, tfrapPerfCirRxPercentUtilizationRange7=tfrapPerfCirRxPercentUtilizationRange7, tfrapPerfArpPerDlciRxOther=tfrapPerfArpPerDlciRxOther, tfrapPerfMgmtIpIPInDlvrs=tfrapPerfMgmtIpIPInDlvrs, tfrapPerfIcmpPerDlciTxTimestpReq=tfrapPerfIcmpPerDlciTxTimestpReq, tfrapPerfSnaPerDlciEntry=tfrapPerfSnaPerDlciEntry, tfrapCfgFrPerfLTDlciFilterTableClear=tfrapCfgFrPerfLTDlciFilterTableClear, tfrapDiagT1Table=tfrapDiagT1Table, tfrapPerfLmiPerDlciTxOtherByteCnt=tfrapPerfLmiPerDlciTxOtherByteCnt, tfrapPerfApplicationPerDlciTxTftp=tfrapPerfApplicationPerDlciTxTftp, tfrapNonIncrLmiSeqNumDteTrap=tfrapNonIncrLmiSeqNumDteTrap, tfrapDiagUnitTimeRemaining=tfrapDiagUnitTimeRemaining, tfrapPerfThruputCmdReplaceDlciTable=tfrapPerfThruputCmdReplaceDlciTable, tfrapPerfSnaPerDlciRxAppn=tfrapPerfSnaPerDlciRxAppn, tfrapIntfDteRts=tfrapIntfDteRts, tfrapPerfApplicationTotalRxCustom3=tfrapPerfApplicationTotalRxCustom3, tfrapPerfIpxTotalTxSpx=tfrapPerfIpxTotalTxSpx, tfrapPerfArpTotalTxRarpReq=tfrapPerfArpTotalTxRarpReq, tfrapV54LoopDownCompletedTrap=tfrapV54LoopDownCompletedTrap, tfrapPerfNetwProtoPerDlciRxAnnexG=tfrapPerfNetwProtoPerDlciRxAnnexG, tfrapSysETHSupported=tfrapSysETHSupported, tfrapPerfNetwProtoPerDlciTxVnip=tfrapPerfNetwProtoPerDlciTxVnip, tfrapPerfApplicationTotalRxTelnet=tfrapPerfApplicationTotalRxTelnet, tfrapPerfIpPerDlciEntry=tfrapPerfIpPerDlciEntry, tfrapPerfNetwProtoPerDlciEntry=tfrapPerfNetwProtoPerDlciEntry, tfrapPerfLmiPerDlciTxFullStatByteCnt=tfrapPerfLmiPerDlciTxFullStatByteCnt, tfrapPerfIpxPerDlciValue=tfrapPerfIpxPerDlciValue, tfrapCfgFrAddrResInarpTimer=tfrapCfgFrAddrResInarpTimer, tfrapSysAmtMemoryInstalled=tfrapSysAmtMemoryInstalled, tfrapSysBootRev=tfrapSysBootRev, tfrapPerfNetwProtoTotalEntry=tfrapPerfNetwProtoTotalEntry, tfrapPerfIpxTotalRxSpx=tfrapPerfIpxTotalRxSpx, tfrapPerfThruputPerIntfTxByteCnt=tfrapPerfThruputPerIntfTxByteCnt, tfrapPerfSnaTotalRxTotal=tfrapPerfSnaTotalRxTotal, tfrapPerfArpTotalRxInarpReq=tfrapPerfArpTotalRxInarpReq, tfrapCfgTransitDelayRcvSummaryCancel=tfrapCfgTransitDelayRcvSummaryCancel, tfrapPerfApplicationPerDlciTable=tfrapPerfApplicationPerDlciTable, tfrapPvcRxUtilizationExceededTrap=tfrapPvcRxUtilizationExceededTrap, tfrapPerfNetwProtoTotalTxTotal=tfrapPerfNetwProtoTotalTxTotal, tfrapVnipTopoVBertTransitDelayMax=tfrapVnipTopoVBertTransitDelayMax, tfrapT1IntervalEntry=tfrapT1IntervalEntry, tfrapPerfNetwProtoPerDlciTxAnnexG=tfrapPerfNetwProtoPerDlciTxAnnexG, tfrapPerfIpTotalInterval=tfrapPerfIpTotalInterval, tfrapPerfApplicationTotalInterval=tfrapPerfApplicationTotalInterval, tfrapSysBRISupported=tfrapSysBRISupported, tfrapConfiguration=tfrapConfiguration, tfrapDiagT1RmtLpbkCmd=tfrapDiagT1RmtLpbkCmd, tfrapLmiSeqNumMismatchDteTrap=tfrapLmiSeqNumMismatchDteTrap, tfrapPerfIpxPerDlciRxSpx=tfrapPerfIpxPerDlciRxSpx, tfrapCfgGetCommunityString=tfrapCfgGetCommunityString, tfrapPerfT1TotalTable=tfrapPerfT1TotalTable, tfrapPerfIcmpTotalTable=tfrapPerfIcmpTotalTable, tfrapDiagUnitReset=tfrapDiagUnitReset, tfrapVnipTopoTDAvgDelay=tfrapVnipTopoTDAvgDelay, tfrapPerfApplicationPerDlciTxHttp=tfrapPerfApplicationPerDlciTxHttp, tfrapCsuLoopbackDisabledTrap=tfrapCsuLoopbackDisabledTrap, tfrapPerfMgmtIpTCPOutSegs=tfrapPerfMgmtIpTCPOutSegs, tfrapPerfLmiPerDlciRxFullStatByteCnt=tfrapPerfLmiPerDlciRxFullStatByteCnt, tfrapPerfIpPerDlciValue=tfrapPerfIpPerDlciValue, tfrapPerfArpTotalRxArpRep=tfrapPerfArpTotalRxArpRep, tfrapCfgFrPerfDlciNamesDlciValue=tfrapCfgFrPerfDlciNamesDlciValue, tfrapVnipTopoTDLastDelay=tfrapVnipTopoTDLastDelay, tfrapVnipTopologyEntry=tfrapVnipTopologyEntry, tfrapDiagDteBerState=tfrapDiagDteBerState, tfrapt1netwyellowalarmclear=tfrapt1netwyellowalarmclear, tfrapCfgMgmtTable=tfrapCfgMgmtTable, tfrapPerfArpTotalTxTotal=tfrapPerfArpTotalTxTotal, tfrapCfgDteConnDensity=tfrapCfgDteConnDensity, tfrapPerfThruputPerDlciRxDe=tfrapPerfThruputPerDlciRxDe, tfrapPerfIcmpTotalRxAddrMaskReq=tfrapPerfIcmpTotalRxAddrMaskReq, tfrapPerfRoutingPerDlciRxNetbios=tfrapPerfRoutingPerDlciRxNetbios, tfrapPerfThruputPerIntfEntry=tfrapPerfThruputPerIntfEntry, tfrapPerfArpPerDlciRxArpReq=tfrapPerfArpPerDlciRxArpReq, tfrapCfgSnmpFrTrap=tfrapCfgSnmpFrTrap, tfrapCfgDteDataMode=tfrapCfgDteDataMode, tfrapIntfT1Status=tfrapIntfT1Status, tfrapPerfCurrentPerDlciUtilizationDlciValue=tfrapPerfCurrentPerDlciUtilizationDlciValue, tfrapDiagDteBerErrors=tfrapDiagDteBerErrors, tfrapPerfArpPerDlciTxArpRep=tfrapPerfArpPerDlciTxArpRep, tfrapEventTrapLogSeqNum=tfrapEventTrapLogSeqNum, tfrapPerfIcmpPerDlciValue=tfrapPerfIcmpPerDlciValue, tfrapPerfNetwProtoPerDlciTxTotal=tfrapPerfNetwProtoPerDlciTxTotal, tfrapPerfIcmpTotalTxTimestpRep=tfrapPerfIcmpTotalTxTimestpRep, tfrapTftpInvalidFileTrap=tfrapTftpInvalidFileTrap, tfrapPerfThruputCmdClearT1Stats=tfrapPerfThruputCmdClearT1Stats, tfrapCfgSnmpTable=tfrapCfgSnmpTable, tfrapDiagnostics=tfrapDiagnostics, tfrapVnipTransitDelayClear=tfrapVnipTransitDelayClear, tfrapPerfThruputPerDlciOutageCount=tfrapPerfThruputPerDlciOutageCount, tfrapPerfThruputCmdAllStsDlciReset=tfrapPerfThruputCmdAllStsDlciReset, tfrapDsuLoopbackEnabledTrap=tfrapDsuLoopbackEnabledTrap, tfrapPerfIcmpTotalTxEchoRep=tfrapPerfIcmpTotalTxEchoRep, tfrapDteSignalRtsOnTrap=tfrapDteSignalRtsOnTrap, tfrapPerfThruputCmdClearAllStats=tfrapPerfThruputCmdClearAllStats, tfrapPerfThruputPerDlciRxUtilizationStatus=tfrapPerfThruputPerDlciRxUtilizationStatus, tfrapBertCompletedTrap=tfrapBertCompletedTrap, tfrapCfgTftpIpAddress=tfrapCfgTftpIpAddress, tfrapVnipTopoVBertTxDEClrFrames=tfrapVnipTopoVBertTxDEClrFrames, tfrapPerfIcmpTotalTxParamProb=tfrapPerfIcmpTotalTxParamProb, tfrapVnipTopologyIndex=tfrapVnipTopologyIndex, tfrapCfgAppLpbkTimeout=tfrapCfgAppLpbkTimeout, tfrapPerfMgmtIpICMPInTimeExcds=tfrapPerfMgmtIpICMPInTimeExcds, tfrapPerfIcmpTotalRxTimestpReq=tfrapPerfIcmpTotalRxTimestpReq, tfrapPerfIcmpPerDlciTxGmQuery=tfrapPerfIcmpPerDlciTxGmQuery, tfrapEventLogClear=tfrapEventLogClear, tfrapDiagDteSigDTR=tfrapDiagDteSigDTR, tfrapPerfArpPerDlciRxInarpReq=tfrapPerfArpPerDlciRxInarpReq, tfrapCfgAppFormat=tfrapCfgAppFormat, tfrapAlarmType=tfrapAlarmType, tfrapCfgSnmpMgrTable=tfrapCfgSnmpMgrTable, tfrapPerfApplicationPerDlciTxCustom2=tfrapPerfApplicationPerDlciTxCustom2, tfrapPerfMgmtIpUDPNoPorts=tfrapPerfMgmtIpUDPNoPorts, tfrapPerfIpPerDlciRxUdp=tfrapPerfIpPerDlciRxUdp, tfrapPerfSnaTotalTxNetbios=tfrapPerfSnaTotalTxNetbios, tfrapt1netwyellowalarmdetect=tfrapt1netwyellowalarmdetect, tfrapVloopRequestFailed=tfrapVloopRequestFailed, tfrapPerfCirRxPercentUtilizationRange3=tfrapPerfCirRxPercentUtilizationRange3, tfrapLocalDteLoopbackDisabledTrap=tfrapLocalDteLoopbackDisabledTrap, tfrapPerfArpTotalRxTotal=tfrapPerfArpTotalRxTotal, tfrapDiagDteBerResyncs=tfrapDiagDteBerResyncs, tfrapVnipTopoVBertRxDEClrFrames=tfrapVnipTopoVBertRxDEClrFrames, tfrapPerfIcmpTotalTxGmReport=tfrapPerfIcmpTotalTxGmReport, tfrapPerfIpxTotalInterval=tfrapPerfIpxTotalInterval, tfrapLocalAggregateLoopbackEnabledTrap=tfrapLocalAggregateLoopbackEnabledTrap, tfrapCfgDteTable=tfrapCfgDteTable, tfrapCfgVnipInitTimer=tfrapCfgVnipInitTimer, tfrapPerfCirPercentUtilizationInterval=tfrapPerfCirPercentUtilizationInterval, tfrapt1controlledslip=tfrapt1controlledslip, tfrapPerfMgmtIpIPInRcv=tfrapPerfMgmtIpIPInRcv, tfrapPerfCirRxPercentUtilizationRange4=tfrapPerfCirRxPercentUtilizationRange4, tfrapSysNumUserProtocols=tfrapSysNumUserProtocols, tfrapPerfThruputPerDlciEncapType=tfrapPerfThruputPerDlciEncapType, tfrapLocalNetLoopbackDisabledTrap=tfrapLocalNetLoopbackDisabledTrap, tfrapBertFailedTrap=tfrapBertFailedTrap, tfrapT1PerfFreezeState=tfrapT1PerfFreezeState, tfrapPerfIpxPerDlciRxNcp=tfrapPerfIpxPerDlciRxNcp, tfrapCfgFrPerfDlciNamesDlciName=tfrapCfgFrPerfDlciNamesDlciName, tfrapPerfMgmtIpIPInAddrErr=tfrapPerfMgmtIpIPInAddrErr, tfrapPerfSnaPerDlciTxSubarea=tfrapPerfSnaPerDlciTxSubarea, tfrapPerfMgmtIpUDPInDatagrams=tfrapPerfMgmtIpUDPInDatagrams, tfrapPerfIcmpPerDlciRxDestUnr=tfrapPerfIcmpPerDlciRxDestUnr, tfrapT1TotalBESs=tfrapT1TotalBESs, tfrapEventTrapLog=tfrapEventTrapLog, tfrapLocalPayloadLoopbackDisabledViaRemoteTrap=tfrapLocalPayloadLoopbackDisabledViaRemoteTrap, tfrapPerfArpTotalTxArpRep=tfrapPerfArpTotalTxArpRep, tfrapEventLogAltTable=tfrapEventLogAltTable, tfrapPerfArpPerDlciRxArpRep=tfrapPerfArpPerDlciRxArpRep, tfrapCfgAppCircuitId=tfrapCfgAppCircuitId, tfrapCfgFrTable=tfrapCfgFrTable, sync=sync, tfrapCfgTftpStatus=tfrapCfgTftpStatus, tfrapPerfSnaPerDlciRxOther=tfrapPerfSnaPerDlciRxOther, tfrapPerfCirTxPercentUtilizationRange5=tfrapPerfCirTxPercentUtilizationRange5, tfrapPerfApplicationPerDlciTxTelnet=tfrapPerfApplicationPerDlciTxTelnet, tfrapCfgTransitDelayThreshold=tfrapCfgTransitDelayThreshold, tfrapT1CurrentIndex=tfrapT1CurrentIndex, tfrapPerfIpPerDlciTxUdp=tfrapPerfIpPerDlciTxUdp, tfrapCfgCommDataBits=tfrapCfgCommDataBits, tfrapV54LoopbackDisabledTrap=tfrapV54LoopbackDisabledTrap, tfrapVnipTopoVBertTxDESetFrames=tfrapVnipTopoVBertTxDESetFrames, tfrapStatusMgmtChannel=tfrapStatusMgmtChannel, tfrapLocalUnitLoopbackDisabledTrap=tfrapLocalUnitLoopbackDisabledTrap, tfrapCfgFrAddrLen=tfrapCfgFrAddrLen, tfrapPerfLmiPerDlciRxTotalByteCnt=tfrapPerfLmiPerDlciRxTotalByteCnt, tfrapT1IntervalESs=tfrapT1IntervalESs, tfrapPerfLmiTotalRxTotalByteCnt=tfrapPerfLmiTotalRxTotalByteCnt, tfrapPerfRoutingPerDlciValue=tfrapPerfRoutingPerDlciValue, tfrapPerfNetworkLongTerm=tfrapPerfNetworkLongTerm, tfrapPerfLmiPerDlciValue=tfrapPerfLmiPerDlciValue, tfrapPerfLmiPerDlciRxLivoEnqByteCnt=tfrapPerfLmiPerDlciRxLivoEnqByteCnt, tfrapCfgVnipKeepAliveTimer=tfrapCfgVnipKeepAliveTimer, tfrapV54LoopbackFailedTrap=tfrapV54LoopbackFailedTrap, tfrapPerfIcmpTotalTxAddrMaskRep=tfrapPerfIcmpTotalTxAddrMaskRep, tfrapPerfLmiTotalTxOtherByteCnt=tfrapPerfLmiTotalTxOtherByteCnt, tfrapPerfIcmpPerDlciTxSrcQuench=tfrapPerfIcmpPerDlciTxSrcQuench, tfrapPerfLmiTotalDlciValue=tfrapPerfLmiTotalDlciValue, tfrapPerfCirPercentUtilizationEntry=tfrapPerfCirPercentUtilizationEntry, tfrapPerfIcmpPerDlciTable=tfrapPerfIcmpPerDlciTable, tfrapDiagDteTimeRemaining=tfrapDiagDteTimeRemaining, tfrapStatusMgmtInterfaceStatus=tfrapStatusMgmtInterfaceStatus, tfrapPerfThruputCmdAvailabilityStsDlciReset=tfrapPerfThruputCmdAvailabilityStsDlciReset, tfrapLmiSeqNumMismatchT1Trap=tfrapLmiSeqNumMismatchT1Trap, tfrapPerfIcmpTotalRxEchoReq=tfrapPerfIcmpTotalRxEchoReq, tfrapPerfThruputPerDlciRxFrame=tfrapPerfThruputPerDlciRxFrame, tfrapPerfApplicationPerDlciEntry=tfrapPerfApplicationPerDlciEntry, tfrapT1CurrentLCVs=tfrapT1CurrentLCVs, tfrapPerfIcmpPerDlciRxGmReduct=tfrapPerfIcmpPerDlciRxGmReduct, tfrapT1CurrentOofEvents=tfrapT1CurrentOofEvents, tfrapPerfNetwProtoTotalInterval=tfrapPerfNetwProtoTotalInterval, tfrapPerfNetworkLongTermCommands=tfrapPerfNetworkLongTermCommands, tfrapPerfIcmpPerDlciTxTimeExcd=tfrapPerfIcmpPerDlciTxTimeExcd, tfrapPerfArpPerDlciRxRarpRep=tfrapPerfArpPerDlciRxRarpRep, tfrapPerfThruputPerIntfTxFrameCnt=tfrapPerfThruputPerIntfTxFrameCnt, tfrapPerfRoutingTotalTxRip=tfrapPerfRoutingTotalTxRip, tfrapt1netwcarrierdetect=tfrapt1netwcarrierdetect, tfrapPerfNetwProtoTotalTxOther=tfrapPerfNetwProtoTotalTxOther, tfrapPerfIcmpTotalRxParamProb=tfrapPerfIcmpTotalRxParamProb)
mibBuilder.exportSymbols("TFRAP-MIB", tfrapPerfIcmpTotalRxGmReduct=tfrapPerfIcmpTotalRxGmReduct, tfrapPerfMgmtIpICMPOutEchoReps=tfrapPerfMgmtIpICMPOutEchoReps, tfrapSysLocation=tfrapSysLocation, tfrapCfgDteCtsOutput=tfrapCfgDteCtsOutput, tfrapCfgT1Framing=tfrapCfgT1Framing, tfrapPerfIcmpTotalTxTimestpReq=tfrapPerfIcmpTotalTxTimestpReq, tfrapPerfApplicationPerDlciRxCustom4=tfrapPerfApplicationPerDlciRxCustom4, tfrapPerfMgmtIpIFInOctets=tfrapPerfMgmtIpIFInOctets, tfrapPerfIpxPerDlciTxTotal=tfrapPerfIpxPerDlciTxTotal, tfrapPerfNetwProtoTotalRxVnip=tfrapPerfNetwProtoTotalRxVnip, tfrapDiagVnipDlci=tfrapDiagVnipDlci, tfrapPerfThruputPerIntfRxByteCnt=tfrapPerfThruputPerIntfRxByteCnt, tfrapDLCIInactiveTrap=tfrapDLCIInactiveTrap, tfrapPerfMgmtIpICMPOutRedirects=tfrapPerfMgmtIpICMPOutRedirects, tfrapPerfIcmpPerDlciTxParamProb=tfrapPerfIcmpPerDlciTxParamProb, tfrapPerfRoutingPerDlciTxRip=tfrapPerfRoutingPerDlciTxRip, tfrapCfgFrPerfDlciNamesTable=tfrapCfgFrPerfDlciNamesTable, tfrapPerfIpxTotalTxRip=tfrapPerfIpxTotalTxRip, tfrapPerfApplicationPerDlciRxCustom3=tfrapPerfApplicationPerDlciRxCustom3, tfrapVnipTopoVLOOPStatus=tfrapVnipTopoVLOOPStatus, tfrapPerfMgmtIpIFInErrors=tfrapPerfMgmtIpIFInErrors, tfrapPerfArpPerDlciRxRarpReq=tfrapPerfArpPerDlciRxRarpReq, tfrapPerfArpPerDlciTxArpReq=tfrapPerfArpPerDlciTxArpReq, tfrapPerfMgmtIpTCPPassiveOpens=tfrapPerfMgmtIpTCPPassiveOpens, tfrapCfgFrPerfDlciNamesEirValue=tfrapCfgFrPerfDlciNamesEirValue, tfrapPerfIpTotalTxTotal=tfrapPerfIpTotalTxTotal, tfrapPerfCurrentPerDlciUtilizationTable=tfrapPerfCurrentPerDlciUtilizationTable, tfrapVloopUp=tfrapVloopUp, tfrapPerfThruputCmdReplaceDlciValue=tfrapPerfThruputCmdReplaceDlciValue, tfrapPerfSnaPerDlciRxSubarea=tfrapPerfSnaPerDlciRxSubarea, tfrapEventLogAltEntry=tfrapEventLogAltEntry, tfrapPerfIpTotalTable=tfrapPerfIpTotalTable, tfrapEventTrapLogGenericEvent=tfrapEventTrapLogGenericEvent, tfrapNonIncrLmiSeqNumT1Trap=tfrapNonIncrLmiSeqNumT1Trap, tfrapPerfIpxPerDlciRxOther=tfrapPerfIpxPerDlciRxOther, tfrapPerfIcmpTotalEntry=tfrapPerfIcmpTotalEntry, tfrapCfgSnmpUtilTrapEnable=tfrapCfgSnmpUtilTrapEnable, tfrapPerfSnaTotalTxPeriph=tfrapPerfSnaTotalTxPeriph, tfrapPerfNetwProtoTotalRxAnnexG=tfrapPerfNetwProtoTotalRxAnnexG, tfrapVnipTopoVBertRxDESetFrames=tfrapVnipTopoVBertRxDESetFrames, tfrapPerfLmiPerDlciTable=tfrapPerfLmiPerDlciTable, tfrapPerfThruputPerDlciChangeTime=tfrapPerfThruputPerDlciChangeTime, tfrapPerformance=tfrapPerformance, tfrapPerfArpPerDlciEntry=tfrapPerfArpPerDlciEntry, tfrapCfgFrDLCIMgmtDE=tfrapCfgFrDLCIMgmtDE, tfrapT1CurrentESs=tfrapT1CurrentESs, tfrapDiagVBERTTestPeriod=tfrapDiagVBERTTestPeriod, tfrapPerfThruputPerDlciValue=tfrapPerfThruputPerDlciValue, tfrapPerfIcmpTotalRxGmReport=tfrapPerfIcmpTotalRxGmReport, tfrapPerfIpTotalTxIcmp=tfrapPerfIpTotalTxIcmp, tfrapDteSignalDtrOffTrap=tfrapDteSignalDtrOffTrap, tfrapDiagT1LocLineLpbk=tfrapDiagT1LocLineLpbk, tfrapPerfNetwProtoPerDlciTxOther=tfrapPerfNetwProtoPerDlciTxOther, tfrapCfgDteDcdOutput=tfrapCfgDteDcdOutput, tfrapPerfSnaTotalTxSubarea=tfrapPerfSnaTotalTxSubarea, tfrapPerfArpPerDlciTxInarpRep=tfrapPerfArpPerDlciTxInarpRep, tfrapDiagVBERT=tfrapDiagVBERT, tfrapCfgFrPerfDlciNamesUtilThreshold=tfrapCfgFrPerfDlciNamesUtilThreshold, tfrapSysSerialNo=tfrapSysSerialNo, tfrapSysPPPSupported=tfrapSysPPPSupported, tfrapSysRDOSupported=tfrapSysRDOSupported, tfrapPerfApplicationPerDlciRxTftp=tfrapPerfApplicationPerDlciRxTftp, tfrapPerfIpxTotalEntry=tfrapPerfIpxTotalEntry, tfrapPerfT1CurrentTable=tfrapPerfT1CurrentTable, tfrapPerfIpPerDlciInterval=tfrapPerfIpPerDlciInterval, tfrapEventLogFreeze=tfrapEventLogFreeze, tfrapPerfNetwProtoTotalTxVnip=tfrapPerfNetwProtoTotalTxVnip, tfrapPerfIpxPerDlciEntry=tfrapPerfIpxPerDlciEntry, tfrapCfgFrPerfLTDlciFilterEntry=tfrapCfgFrPerfLTDlciFilterEntry, tfrapVbertStarted=tfrapVbertStarted, tfrapCfgIpChannel=tfrapCfgIpChannel, tfrapPerfApplicationTotalTxTftp=tfrapPerfApplicationTotalTxTftp, tfrapLocalAggregateLoopbackDisabledTrap=tfrapLocalAggregateLoopbackDisabledTrap, tfrapPerfMgmtIpICMPInErrors=tfrapPerfMgmtIpICMPInErrors, tfrapPerfNetwProtoPerDlciTable=tfrapPerfNetwProtoPerDlciTable, tfrapPerfSnaPerDlciRxNetbios=tfrapPerfSnaPerDlciRxNetbios, tfrapPerfApplicationTotalTxCustom1=tfrapPerfApplicationTotalTxCustom1, tfrapT1TotalSEFSs=tfrapT1TotalSEFSs, tfrapPerfArpTotalTxArpReq=tfrapPerfArpTotalTxArpReq, tfrapLmiSourcingChangeUserT1Trap=tfrapLmiSourcingChangeUserT1Trap, tfrapPerfCirPercentUtilizationTable=tfrapPerfCirPercentUtilizationTable, tfrapCfgTransitDelayTableClear=tfrapCfgTransitDelayTableClear, tfrapPerfSnaTotalTxTotal=tfrapPerfSnaTotalTxTotal, tfrapPerfNetworkLongTermCmdClear=tfrapPerfNetworkLongTermCmdClear, tfrapPerfNetwProtoPerDlciTxCisco=tfrapPerfNetwProtoPerDlciTxCisco, tfrapStatusDteModeLED=tfrapStatusDteModeLED, tfrapCfgFrPerfTimers=tfrapCfgFrPerfTimers, tfrapEventTrapLogTable=tfrapEventTrapLogTable, tfrapLocalNetLoopbackEnabledTrap=tfrapLocalNetLoopbackEnabledTrap, tfrapCfgVnipTable=tfrapCfgVnipTable, tfrapPerfNetwLongTermAltEntry=tfrapPerfNetwLongTermAltEntry, tfrapPerfNetwProtoTotalRxOther=tfrapPerfNetwProtoTotalRxOther, tfrapPerfThruputCmdClearAllIntfStats=tfrapPerfThruputCmdClearAllIntfStats, tfrapPerfNetwProtoPerDlciTxSna=tfrapPerfNetwProtoPerDlciTxSna, tfrapPerfIpxTotalTxNcp=tfrapPerfIpxTotalTxNcp, tfrapCfgDteClockMode=tfrapCfgDteClockMode, tfrapPerfThruputPerIntfRxFrameCnt=tfrapPerfThruputPerIntfRxFrameCnt, tfrapPerfArpTotalEntry=tfrapPerfArpTotalEntry, tfrapVloopDownViaRemote=tfrapVloopDownViaRemote, tfrapPerfLmiTotalTxFullEnqByteCnt=tfrapPerfLmiTotalTxFullEnqByteCnt, tfrapEventTrapLogEntry=tfrapEventTrapLogEntry, tfrapDLCITDThresholdTrap=tfrapDLCITDThresholdTrap, tfrapCfgTelnetCliLcdPassword=tfrapCfgTelnetCliLcdPassword, tfrapDiagT1LocAggrLpbk=tfrapDiagT1LocAggrLpbk, tfrapT1TotalUASs=tfrapT1TotalUASs, tfrapPerfNetwProtoTotalRxSna=tfrapPerfNetwProtoTotalRxSna, tfrapIntfDteDcd=tfrapIntfDteDcd, tfrapPerfIpPerDlciRxIgrp=tfrapPerfIpPerDlciRxIgrp, tfrapPerfSnaTotalTable=tfrapPerfSnaTotalTable, tfrapPerfIpxTotalTxOther=tfrapPerfIpxTotalTxOther, tfrapInterface=tfrapInterface, tfrapPerfRoutingTotalTxOspf=tfrapPerfRoutingTotalTxOspf, tfrapCfgFrDLCIMode=tfrapCfgFrDLCIMode, tfrapPerfPhysicalIntf=tfrapPerfPhysicalIntf, tfrapPerfIcmpTotalTxDestUnr=tfrapPerfIcmpTotalTxDestUnr, tfrapt1netwaisdetect=tfrapt1netwaisdetect, tfrapPerfIcmpTotalTxRedirect=tfrapPerfIcmpTotalTxRedirect, tfrapLmiSourcingChangePassthruTrap=tfrapLmiSourcingChangePassthruTrap, tfrapPerfLmiTotalRxFullStatByteCnt=tfrapPerfLmiTotalRxFullStatByteCnt, tfrapPerfApplicationPerDlciTxSnmpTrap=tfrapPerfApplicationPerDlciTxSnmpTrap, tfrapSysName=tfrapSysName, tfrapPerfApplicationTotalTxSmtp=tfrapPerfApplicationTotalTxSmtp, tfrapT1CurrentCrc6Events=tfrapT1CurrentCrc6Events, tfrapPerfIpxPerDlciRxSap=tfrapPerfIpxPerDlciRxSap, tfrapTftpNoFileTrap=tfrapTftpNoFileTrap, tfrapVnipTopoTDNumSamples=tfrapVnipTopoTDNumSamples, tfrapCfgID=tfrapCfgID, tfrapDiagDteBerTimeElaps=tfrapDiagDteBerTimeElaps, tfrapPerfMgmtIpIPInHdrErr=tfrapPerfMgmtIpIPInHdrErr, tfrapCfgTDDeleteEntry=tfrapCfgTDDeleteEntry, tfrapPerfApplicationTotalTable=tfrapPerfApplicationTotalTable, tfrapPerfArpTotalRxInarpRep=tfrapPerfArpTotalRxInarpRep, tfrapT1CurrentCSSs=tfrapT1CurrentCSSs, tfrapPerfMgmtIpICMPInParmProbs=tfrapPerfMgmtIpICMPInParmProbs, tfrapStatusT1ModeLED=tfrapStatusT1ModeLED, tfrapVnipTopoTDMaxDelay=tfrapVnipTopoTDMaxDelay, tfrapPerfIpPerDlciTxIgrp=tfrapPerfIpPerDlciTxIgrp, tfrapPerfNetwLongTermProtocol=tfrapPerfNetwLongTermProtocol, tfrapSysNumMaintInstalled=tfrapSysNumMaintInstalled, tfrapSysExtTimSupported=tfrapSysExtTimSupported, tfrapCfgDteDsrOutput=tfrapCfgDteDsrOutput, tfrapPerfApplicationPerDlciRxSnmp=tfrapPerfApplicationPerDlciRxSnmp, tfrapPerfIcmpPerDlciTxEchoReq=tfrapPerfIcmpPerDlciTxEchoReq, tfrapCfgFrPerfLTDlciFilterIndex=tfrapCfgFrPerfLTDlciFilterIndex, tfrapDiagDteBerPattern=tfrapDiagDteBerPattern, tfrapVBertClear=tfrapVBertClear, tfrapT1IntervalBESs=tfrapT1IntervalBESs, tfrapPerfApplicationTotalRxCustom2=tfrapPerfApplicationTotalRxCustom2, tfrapSysResetNode=tfrapSysResetNode, tfrapDiagDteTable=tfrapDiagDteTable, tfrapIntfDteMode=tfrapIntfDteMode, tfrapPerfNetwProtoTotalTxCisco=tfrapPerfNetwProtoTotalTxCisco, tfrapCfgCommBaud=tfrapCfgCommBaud, tfrapCfgTransitDelayDlciValue=tfrapCfgTransitDelayDlciValue, tfrapPerfArpPerDlciTxRarpReq=tfrapPerfArpPerDlciTxRarpReq, tfrapPerfNetworkShortTerm=tfrapPerfNetworkShortTerm, tfrapPerfIcmpPerDlciRxTimestpReq=tfrapPerfIcmpPerDlciRxTimestpReq, tfrapPerfIcmpTotalTxGmQuery=tfrapPerfIcmpTotalTxGmQuery, tfrapPerfNetwLongTermInterval=tfrapPerfNetwLongTermInterval, tfrapIpAddress=tfrapIpAddress, tfrapCfgFrPerfUnprovDlcisDelete=tfrapCfgFrPerfUnprovDlcisDelete, tfrapDLCIActiveTrap=tfrapDLCIActiveTrap, tfrapSysNumSnmpMgrs=tfrapSysNumSnmpMgrs, tfrapPerfArpTotalTxOther=tfrapPerfArpTotalTxOther)
