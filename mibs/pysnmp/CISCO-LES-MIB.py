#
# PySNMP MIB module CISCO-LES-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/CISCO-LES-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 17:47:25 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, ObjectIdentifier, OctetString = mibBuilder.importSymbols("ASN1", "Integer", "ObjectIdentifier", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsUnion, ConstraintsIntersection, ValueSizeConstraint, ValueRangeConstraint, SingleValueConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsUnion", "ConstraintsIntersection", "ValueSizeConstraint", "ValueRangeConstraint", "SingleValueConstraint")
CiscoVciInteger, CiscoVpiInteger = mibBuilder.importSymbols("CISCO-BUS-MIB", "CiscoVciInteger", "CiscoVpiInteger")
ciscoMgmt, = mibBuilder.importSymbols("CISCO-SMI", "ciscoMgmt")
AtmLaneAddress, = mibBuilder.importSymbols("LAN-EMULATION-CLIENT-MIB", "AtmLaneAddress")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
ModuleIdentity, IpAddress, Counter32, Bits, Integer32, NotificationType, Gauge32, Counter64, TimeTicks, MibIdentifier, Unsigned32, iso, ObjectIdentity, MibScalar, MibTable, MibTableRow, MibTableColumn = mibBuilder.importSymbols("SNMPv2-SMI", "ModuleIdentity", "IpAddress", "Counter32", "Bits", "Integer32", "NotificationType", "Gauge32", "Counter64", "TimeTicks", "MibIdentifier", "Unsigned32", "iso", "ObjectIdentity", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn")
DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention")
MacAddress, RowStatus, DisplayString, TimeStamp = mibBuilder.importSymbols("SNMPv2-TC-v1", "MacAddress", "RowStatus", "DisplayString", "TimeStamp")
ciscoLesMIB = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 39))
ciscoLesMIBObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 39, 1))
les = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 39, 1, 1))
leClient = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 39, 1, 2))
register = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 39, 1, 3))
ciscoLesMIBConformance = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 39, 2))
ciscoLesMIBGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 39, 2, 1))
ciscoLesMIBCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 39, 2, 2))
lesTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 39, 1, 1, 1), )
if mibBuilder.loadTexts: lesTable.setStatus('mandatory')
lesEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 39, 1, 1, 1, 1), ).setIndexNames((0, "CISCO-LES-MIB", "lesElanName"), (0, "CISCO-LES-MIB", "lesIndex"))
if mibBuilder.loadTexts: lesEntry.setStatus('mandatory')
lesElanName = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 39, 1, 1, 1, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 32)))
if mibBuilder.loadTexts: lesElanName.setStatus('mandatory')
lesIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 39, 1, 1, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647)))
if mibBuilder.loadTexts: lesIndex.setStatus('mandatory')
lesAtmAddrSpec = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 39, 1, 1, 1, 1, 3), AtmLaneAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lesAtmAddrSpec.setStatus('mandatory')
lesAtmAddrMask = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 39, 1, 1, 1, 1, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lesAtmAddrMask.setStatus('mandatory')
lesAtmAddrActual = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 39, 1, 1, 1, 1, 5), AtmLaneAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lesAtmAddrActual.setStatus('mandatory')
lesIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 39, 1, 1, 1, 1, 6), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lesIfIndex.setStatus('mandatory')
lesSubIfNum = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 39, 1, 1, 1, 1, 7), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lesSubIfNum.setStatus('mandatory')
lesColocBusAtmAddrSpec = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 39, 1, 1, 1, 1, 8), AtmLaneAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lesColocBusAtmAddrSpec.setStatus('mandatory')
lesColocBusAtmAddrMask = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 39, 1, 1, 1, 1, 9), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lesColocBusAtmAddrMask.setStatus('mandatory')
lesColocBusAtmAddrActl = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 39, 1, 1, 1, 1, 10), AtmLaneAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lesColocBusAtmAddrActl.setStatus('mandatory')
lesUpTime = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 39, 1, 1, 1, 1, 11), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lesUpTime.setStatus('mandatory')
lesLanType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 39, 1, 1, 1, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("dot3", 1), ("dot5", 2))).clone('dot3')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lesLanType.setStatus('mandatory')
lesMaxFrm = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 39, 1, 1, 1, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1516, 4544, 9234, 18190))).clone(namedValues=NamedValues(("dot3", 1516), ("tr4Mb", 4544), ("rfc1626", 9234), ("tr16Mb", 18190))).clone('dot3')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lesMaxFrm.setStatus('mandatory')
lesJoinTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 39, 1, 1, 1, 1, 14), Integer32().subtype(subtypeSpec=ValueRangeConstraint(10, 300)).clone(120)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lesJoinTimeout.setStatus('mandatory')
lesLecsAtmAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 39, 1, 1, 1, 1, 15), AtmLaneAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lesLecsAtmAddr.setStatus('mandatory')
lesControlDistVpi = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 39, 1, 1, 1, 1, 16), CiscoVpiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lesControlDistVpi.setStatus('mandatory')
lesControlDistVci = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 39, 1, 1, 1, 1, 17), CiscoVciInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lesControlDistVci.setStatus('mandatory')
lesOperStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 39, 1, 1, 1, 1, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("active", 1), ("inactive", 2))).clone('active')).setMaxAccess("readonly")
if mibBuilder.loadTexts: lesOperStatus.setStatus('mandatory')
lesAdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 39, 1, 1, 1, 1, 19), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("active", 1), ("inactive", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lesAdminStatus.setStatus('mandatory')
lesStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 39, 1, 1, 1, 1, 20), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lesStatus.setStatus('mandatory')
lesSegmentID = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 39, 1, 1, 1, 1, 21), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4095))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lesSegmentID.setStatus('mandatory')
lesStatsTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 39, 1, 1, 2), )
if mibBuilder.loadTexts: lesStatsTable.setStatus('mandatory')
lesStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 39, 1, 1, 2, 1), ).setIndexNames((0, "CISCO-LES-MIB", "lesElanName"), (0, "CISCO-LES-MIB", "lesIndex"))
if mibBuilder.loadTexts: lesStatsEntry.setStatus('mandatory')
lesInErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 39, 1, 1, 2, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lesInErrors.setStatus('mandatory')
lesInErrorLastLec = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 39, 1, 1, 2, 1, 2), AtmLaneAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lesInErrorLastLec.setStatus('mandatory')
lesInFlushReplies = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 39, 1, 1, 2, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lesInFlushReplies.setStatus('mandatory')
lesInJoinReqs = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 39, 1, 1, 2, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lesInJoinReqs.setStatus('mandatory')
lesOutJoinFails = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 39, 1, 1, 2, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lesOutJoinFails.setStatus('mandatory')
lesJoinLastFailCause = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 39, 1, 1, 2, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lesJoinLastFailCause.setStatus('mandatory')
lesJoinLastFailLec = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 39, 1, 1, 2, 1, 7), AtmLaneAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lesJoinLastFailLec.setStatus('mandatory')
lesOutConfigReqs = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 39, 1, 1, 2, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lesOutConfigReqs.setStatus('mandatory')
lesInConfigResps = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 39, 1, 1, 2, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lesInConfigResps.setStatus('mandatory')
lesInConfigFails = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 39, 1, 1, 2, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lesInConfigFails.setStatus('mandatory')
lesInRegisReqs = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 39, 1, 1, 2, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lesInRegisReqs.setStatus('mandatory')
lesOutRegisFails = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 39, 1, 1, 2, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lesOutRegisFails.setStatus('mandatory')
lesRegisLastFailCause = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 39, 1, 1, 2, 1, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lesRegisLastFailCause.setStatus('mandatory')
lesRegisLastFailLec = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 39, 1, 1, 2, 1, 14), AtmLaneAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lesRegisLastFailLec.setStatus('mandatory')
lesInUnregReqs = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 39, 1, 1, 2, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lesInUnregReqs.setStatus('mandatory')
lesInLearpUcasts = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 39, 1, 1, 2, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lesInLearpUcasts.setStatus('mandatory')
lesInLearpBroadcasts = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 39, 1, 1, 2, 1, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lesInLearpBroadcasts.setStatus('mandatory')
lesOutLearpFwd = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 39, 1, 1, 2, 1, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lesOutLearpFwd.setStatus('mandatory')
lesInLearpResps = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 39, 1, 1, 2, 1, 19), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lesInLearpResps.setStatus('mandatory')
lesInNarpReqs = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 39, 1, 1, 2, 1, 20), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lesInNarpReqs.setStatus('mandatory')
lesInTopolReqs = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 39, 1, 1, 2, 1, 21), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lesInTopolReqs.setStatus('mandatory')
lesClientTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 39, 1, 2, 1), )
if mibBuilder.loadTexts: lesClientTable.setStatus('mandatory')
lesClientEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 39, 1, 2, 1, 1), ).setIndexNames((0, "CISCO-LES-MIB", "lesElanName"), (0, "CISCO-LES-MIB", "lesIndex"), (0, "CISCO-LES-MIB", "lesClientLecid"))
if mibBuilder.loadTexts: lesClientEntry.setStatus('mandatory')
lesClientLecid = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 39, 1, 2, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65279)))
if mibBuilder.loadTexts: lesClientLecid.setStatus('mandatory')
lesClientAtmAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 39, 1, 2, 1, 1, 2), AtmLaneAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lesClientAtmAddr.setStatus('mandatory')
lesClientState = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 39, 1, 2, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("connected", 1), ("joinRecv", 2), ("verify", 3), ("addLec", 4), ("busConnect", 5), ("operational", 6), ("terminating", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lesClientState.setStatus('mandatory')
lesClientIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 39, 1, 2, 1, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lesClientIfIndex.setStatus('mandatory')
lesClientControlVpi = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 39, 1, 2, 1, 1, 5), CiscoVpiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lesClientControlVpi.setStatus('mandatory')
lesClientControlVci = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 39, 1, 2, 1, 1, 6), CiscoVciInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lesClientControlVci.setStatus('mandatory')
lesClientStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 39, 1, 2, 1, 1, 7), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lesClientStatus.setStatus('mandatory')
lesMacRegTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 39, 1, 3, 1), )
if mibBuilder.loadTexts: lesMacRegTable.setStatus('mandatory')
lesMacRegEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 39, 1, 3, 1, 1), ).setIndexNames((0, "CISCO-LES-MIB", "lesElanName"), (0, "CISCO-LES-MIB", "lesIndex"), (0, "CISCO-LES-MIB", "lesMacRegMacAddress"))
if mibBuilder.loadTexts: lesMacRegEntry.setStatus('mandatory')
lesMacRegMacAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 39, 1, 3, 1, 1, 1), MacAddress())
if mibBuilder.loadTexts: lesMacRegMacAddress.setStatus('mandatory')
lesMacRegAtmAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 39, 1, 3, 1, 1, 3), AtmLaneAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lesMacRegAtmAddr.setStatus('mandatory')
lesMacRegLecid = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 39, 1, 3, 1, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65279))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lesMacRegLecid.setStatus('mandatory')
lesRDRegTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 39, 1, 3, 2), )
if mibBuilder.loadTexts: lesRDRegTable.setStatus('mandatory')
lesRDRegEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 39, 1, 3, 2, 1), ).setIndexNames((0, "CISCO-LES-MIB", "lesElanName"), (0, "CISCO-LES-MIB", "lesIndex"), (0, "CISCO-LES-MIB", "lesRDRegSegmentId"), (0, "CISCO-LES-MIB", "lesRDRegBridgeNum"))
if mibBuilder.loadTexts: lesRDRegEntry.setStatus('mandatory')
lesRDRegSegmentId = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 39, 1, 3, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4095)))
if mibBuilder.loadTexts: lesRDRegSegmentId.setStatus('mandatory')
lesRDRegBridgeNum = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 39, 1, 3, 2, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 15)))
if mibBuilder.loadTexts: lesRDRegBridgeNum.setStatus('mandatory')
lesRDRegAtmAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 39, 1, 3, 2, 1, 3), AtmLaneAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lesRDRegAtmAddr.setStatus('mandatory')
lesRDRegLecid = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 39, 1, 3, 2, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65279))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lesRDRegLecid.setStatus('mandatory')
ciscoLesGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 39, 2, 1, 1))
ciscoLesStatsGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 39, 2, 1, 2))
ciscoLesColocatedGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 39, 2, 1, 3))
ciscoLesLecsGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 39, 2, 1, 4))
ciscoLesCntrlDistGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 39, 2, 1, 5))
ciscoLesSubIfGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 39, 2, 1, 6))
ciscoLesClientGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 39, 2, 1, 7))
ciscoLesTokenRingGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 39, 2, 1, 8))
ciscoLesMIBCompliance = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 39, 2, 2, 1))
mibBuilder.exportSymbols("CISCO-LES-MIB", lesInLearpUcasts=lesInLearpUcasts, lesRDRegBridgeNum=lesRDRegBridgeNum, lesLecsAtmAddr=lesLecsAtmAddr, lesClientAtmAddr=lesClientAtmAddr, lesOperStatus=lesOperStatus, lesInJoinReqs=lesInJoinReqs, register=register, lesElanName=lesElanName, ciscoLesStatsGroup=ciscoLesStatsGroup, lesTable=lesTable, lesInConfigResps=lesInConfigResps, lesRegisLastFailLec=lesRegisLastFailLec, lesInLearpBroadcasts=lesInLearpBroadcasts, lesInErrors=lesInErrors, lesRDRegEntry=lesRDRegEntry, lesClientStatus=lesClientStatus, lesClientControlVpi=lesClientControlVpi, lesInNarpReqs=lesInNarpReqs, lesOutRegisFails=lesOutRegisFails, lesAdminStatus=lesAdminStatus, lesMacRegTable=lesMacRegTable, lesStatsEntry=lesStatsEntry, lesInUnregReqs=lesInUnregReqs, lesUpTime=lesUpTime, lesClientIfIndex=lesClientIfIndex, lesClientLecid=lesClientLecid, lesClientEntry=lesClientEntry, lesSubIfNum=lesSubIfNum, lesIndex=lesIndex, lesRDRegSegmentId=lesRDRegSegmentId, lesControlDistVpi=lesControlDistVpi, lesMacRegEntry=lesMacRegEntry, ciscoLesTokenRingGroup=ciscoLesTokenRingGroup, lesInLearpResps=lesInLearpResps, ciscoLesMIBObjects=ciscoLesMIBObjects, lesEntry=lesEntry, lesAtmAddrActual=lesAtmAddrActual, lesAtmAddrSpec=lesAtmAddrSpec, lesOutConfigReqs=lesOutConfigReqs, lesInErrorLastLec=lesInErrorLastLec, lesClientTable=lesClientTable, lesClientState=lesClientState, ciscoLesGroup=ciscoLesGroup, ciscoLesMIBCompliance=ciscoLesMIBCompliance, lesClientControlVci=lesClientControlVci, ciscoLesMIBConformance=ciscoLesMIBConformance, lesJoinTimeout=lesJoinTimeout, ciscoLesLecsGroup=ciscoLesLecsGroup, lesOutJoinFails=lesOutJoinFails, les=les, lesSegmentID=lesSegmentID, ciscoLesClientGroup=ciscoLesClientGroup, lesOutLearpFwd=lesOutLearpFwd, ciscoLesMIBCompliances=ciscoLesMIBCompliances, ciscoLesColocatedGroup=ciscoLesColocatedGroup, ciscoLesMIB=ciscoLesMIB, lesRDRegTable=lesRDRegTable, lesRegisLastFailCause=lesRegisLastFailCause, lesRDRegLecid=lesRDRegLecid, lesColocBusAtmAddrActl=lesColocBusAtmAddrActl, lesStatus=lesStatus, lesColocBusAtmAddrMask=lesColocBusAtmAddrMask, lesMacRegAtmAddr=lesMacRegAtmAddr, lesStatsTable=lesStatsTable, lesInTopolReqs=lesInTopolReqs, lesInRegisReqs=lesInRegisReqs, ciscoLesSubIfGroup=ciscoLesSubIfGroup, lesInFlushReplies=lesInFlushReplies, lesMaxFrm=lesMaxFrm, lesJoinLastFailLec=lesJoinLastFailLec, lesControlDistVci=lesControlDistVci, lesColocBusAtmAddrSpec=lesColocBusAtmAddrSpec, lesRDRegAtmAddr=lesRDRegAtmAddr, lesAtmAddrMask=lesAtmAddrMask, lesInConfigFails=lesInConfigFails, leClient=leClient, lesMacRegLecid=lesMacRegLecid, ciscoLesCntrlDistGroup=ciscoLesCntrlDistGroup, lesJoinLastFailCause=lesJoinLastFailCause, lesIfIndex=lesIfIndex, lesMacRegMacAddress=lesMacRegMacAddress, lesLanType=lesLanType, ciscoLesMIBGroups=ciscoLesMIBGroups)
