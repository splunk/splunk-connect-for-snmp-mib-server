#
# PySNMP MIB module RDN-PKTCABLE-GROUP-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/RDN-PKTCABLE-GROUP-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 20:46:17 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, Integer, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "OctetString", "Integer", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsUnion, ValueSizeConstraint, ConstraintsIntersection, SingleValueConstraint, ValueRangeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsUnion", "ValueSizeConstraint", "ConstraintsIntersection", "SingleValueConstraint", "ValueRangeConstraint")
riverdelta, = mibBuilder.importSymbols("RDN-MIB", "riverdelta")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
Gauge32, MibIdentifier, NotificationType, Unsigned32, TimeTicks, Counter32, ObjectIdentity, Integer32, Bits, Counter64, ModuleIdentity, iso, IpAddress, MibScalar, MibTable, MibTableRow, MibTableColumn = mibBuilder.importSymbols("SNMPv2-SMI", "Gauge32", "MibIdentifier", "NotificationType", "Unsigned32", "TimeTicks", "Counter32", "ObjectIdentity", "Integer32", "Bits", "Counter64", "ModuleIdentity", "iso", "IpAddress", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn")
DisplayString, MacAddress, TruthValue, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "MacAddress", "TruthValue", "TextualConvention")
rdnPacketCableGroup = ModuleIdentity((1, 3, 6, 1, 4, 1, 4981, 7))
rdnPacketCableGroup.setRevisions(('2008-10-06 00:00', '2008-08-08 00:00', '2007-10-22 00:00', '2006-05-24 00:00', '2006-05-24 00:00', '2006-02-15 00:00', '2006-01-24 00:00', '2003-11-05 00:00', '2003-10-24 00:00', '2003-05-12 00:00', '2002-09-06 00:00',))
if mibBuilder.loadTexts: rdnPacketCableGroup.setLastUpdated('200810060000Z')
if mibBuilder.loadTexts: rdnPacketCableGroup.setOrganization('Motorola')
class BcidDataArray(TextualConvention, OctetString):
    status = 'current'
    subtypeSpec = OctetString.subtypeSpec + ValueSizeConstraint(0, 24)

rdnPktDQoSConfigGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 4981, 7, 1))
rdnPktDQoSCOPSStatus = MibScalar((1, 3, 6, 1, 4, 1, 4981, 7, 1, 1), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rdnPktDQoSCOPSStatus.setStatus('current')
rdnPktDQoSCMTSIp = MibScalar((1, 3, 6, 1, 4, 1, 4981, 7, 1, 2), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rdnPktDQoSCMTSIp.setStatus('current')
rdnPktDQoSPEPID = MibScalar((1, 3, 6, 1, 4, 1, 4981, 7, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rdnPktDQoSPEPID.setStatus('current')
rdnPktDQoSClientAccpTimer = MibScalar((1, 3, 6, 1, 4, 1, 4981, 7, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 3600000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rdnPktDQoSClientAccpTimer.setStatus('current')
rdnPktDQoST0Timer = MibScalar((1, 3, 6, 1, 4, 1, 4981, 7, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 3600))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rdnPktDQoST0Timer.setStatus('current')
rdnPktDQoST1Timer = MibScalar((1, 3, 6, 1, 4, 1, 4981, 7, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 3600))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rdnPktDQoST1Timer.setStatus('current')
rdnPktDQoST3Timer = MibScalar((1, 3, 6, 1, 4, 1, 4981, 7, 1, 7), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rdnPktDQoST3Timer.setStatus('current')
rdnPktDQoST6Timer = MibScalar((1, 3, 6, 1, 4, 1, 4981, 7, 1, 8), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rdnPktDQoST6Timer.setStatus('current')
rdnPktDQoSCopsTrapEnable = MibScalar((1, 3, 6, 1, 4, 1, 4981, 7, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rdnPktDQoSCopsTrapEnable.setStatus('current')
rdnPktDQoSResReqTrapEnable = MibScalar((1, 3, 6, 1, 4, 1, 4981, 7, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rdnPktDQoSResReqTrapEnable.setStatus('current')
rdnPktESTrapEnable = MibScalar((1, 3, 6, 1, 4, 1, 4981, 7, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rdnPktESTrapEnable.setStatus('current')
rdnPktESEnable = MibScalar((1, 3, 6, 1, 4, 1, 4981, 7, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rdnPktESEnable.setStatus('current')
rdnPktDQoSEmergencyTrapEnable = MibScalar((1, 3, 6, 1, 4, 1, 4981, 7, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rdnPktDQoSEmergencyTrapEnable.setStatus('current')
rdnPktDQoSEmergencyPreemption = MibScalar((1, 3, 6, 1, 4, 1, 4981, 7, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("disabled", 0), ("most-recent", 1), ("oldest", 2), ("random", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rdnPktDQoSEmergencyPreemption.setStatus('current')
rdnPktEMRKSFailureTrapEnable = MibScalar((1, 3, 6, 1, 4, 1, 4981, 7, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rdnPktEMRKSFailureTrapEnable.setStatus('current')
rdnPktDQoSDscp = MibScalar((1, 3, 6, 1, 4, 1, 4981, 7, 1, 16), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 63))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rdnPktDQoSDscp.setStatus('current')
rdnPktMMDscp = MibScalar((1, 3, 6, 1, 4, 1, 4981, 7, 1, 17), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 63))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rdnPktMMDscp.setStatus('current')
rdnPktEMDscp = MibScalar((1, 3, 6, 1, 4, 1, 4981, 7, 1, 18), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 63))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rdnPktEMDscp.setStatus('current')
rdnPktESCccDscp = MibScalar((1, 3, 6, 1, 4, 1, 4981, 7, 1, 19), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 63))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rdnPktESCccDscp.setStatus('current')
rdnGateStatsTable = MibTable((1, 3, 6, 1, 4, 1, 4981, 7, 2), )
if mibBuilder.loadTexts: rdnGateStatsTable.setStatus('current')
rdnGateStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4981, 7, 2, 1), ).setIndexNames((0, "RDN-PKTCABLE-GROUP-MIB", "rdnGateId"))
if mibBuilder.loadTexts: rdnGateStatsEntry.setStatus('current')
rdnGateId = MibTableColumn((1, 3, 6, 1, 4, 1, 4981, 7, 2, 1, 1), Integer32())
if mibBuilder.loadTexts: rdnGateId.setStatus('current')
rdnGateStatsState = MibTableColumn((1, 3, 6, 1, 4, 1, 4981, 7, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 7, 8, 9))).clone(namedValues=NamedValues(("idle", 0), ("start", 1), ("allocated", 2), ("authorized", 3), ("reserved", 4), ("committed", 7), ("committedRecovery", 8), ("numOfStates", 9)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rdnGateStatsState.setStatus('current')
rdnGateStatsSubscriberIP = MibTableColumn((1, 3, 6, 1, 4, 1, 4981, 7, 2, 1, 3), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rdnGateStatsSubscriberIP.setStatus('current')
rdnGateStatsRKSPrimaryAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 4981, 7, 2, 1, 4), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rdnGateStatsRKSPrimaryAddr.setStatus('current')
rdnGateStatsRKSPrimaryPort = MibTableColumn((1, 3, 6, 1, 4, 1, 4981, 7, 2, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rdnGateStatsRKSPrimaryPort.setStatus('current')
rdnGateStatsRKSSecondaryAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 4981, 7, 2, 1, 6), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rdnGateStatsRKSSecondaryAddr.setStatus('current')
rdnGateStatsRKSSecondaryPort = MibTableColumn((1, 3, 6, 1, 4, 1, 4981, 7, 2, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rdnGateStatsRKSSecondaryPort.setStatus('current')
rdnGateStatsEventFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 4981, 7, 2, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rdnGateStatsEventFlag.setStatus('current')
rdnGateStatsBillingCorrelationID = MibTableColumn((1, 3, 6, 1, 4, 1, 4981, 7, 2, 1, 9), BcidDataArray()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rdnGateStatsBillingCorrelationID.setStatus('current')
rdnGateStatsDurationTime = MibTableColumn((1, 3, 6, 1, 4, 1, 4981, 7, 2, 1, 10), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rdnGateStatsDurationTime.setStatus('current')
rdnGateStatsSlotNum = MibTableColumn((1, 3, 6, 1, 4, 1, 4981, 7, 2, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rdnGateStatsSlotNum.setStatus('current')
rdnGateStatsUpSfid = MibTableColumn((1, 3, 6, 1, 4, 1, 4981, 7, 2, 1, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rdnGateStatsUpSfid.setStatus('current')
rdnGateStatsDnSfid = MibTableColumn((1, 3, 6, 1, 4, 1, 4981, 7, 2, 1, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rdnGateStatsDnSfid.setStatus('current')
rdnGateStatsResourceID = MibTableColumn((1, 3, 6, 1, 4, 1, 4981, 7, 2, 1, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rdnGateStatsResourceID.setStatus('current')
rdnGateStatsESCDCAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 4981, 7, 2, 1, 15), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rdnGateStatsESCDCAddr.setStatus('current')
rdnGateStatsESCDCPort = MibTableColumn((1, 3, 6, 1, 4, 1, 4981, 7, 2, 1, 16), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rdnGateStatsESCDCPort.setStatus('current')
rdnGateStatsESFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 4981, 7, 2, 1, 17), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rdnGateStatsESFlag.setStatus('current')
rdnGateStatsESCCCAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 4981, 7, 2, 1, 18), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rdnGateStatsESCCCAddr.setStatus('current')
rdnGateStatsESCCCPort = MibTableColumn((1, 3, 6, 1, 4, 1, 4981, 7, 2, 1, 19), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rdnGateStatsESCCCPort.setStatus('current')
rdnGateStatsESCCCId = MibTableColumn((1, 3, 6, 1, 4, 1, 4981, 7, 2, 1, 20), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rdnGateStatsESCCCId.setStatus('current')
rdnGateSpecTable = MibTable((1, 3, 6, 1, 4, 1, 4981, 7, 3), )
if mibBuilder.loadTexts: rdnGateSpecTable.setStatus('current')
rdnGateSpecEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4981, 7, 3, 1), ).setIndexNames((0, "RDN-PKTCABLE-GROUP-MIB", "rdnGateId"), (0, "RDN-PKTCABLE-GROUP-MIB", "rdnGateDirection"))
if mibBuilder.loadTexts: rdnGateSpecEntry.setStatus('current')
rdnGateDirection = MibTableColumn((1, 3, 6, 1, 4, 1, 4981, 7, 3, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("upstream", 1), ("downstream", 2))))
if mibBuilder.loadTexts: rdnGateDirection.setStatus('current')
rdnGateSpecProtocol = MibTableColumn((1, 3, 6, 1, 4, 1, 4981, 7, 3, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rdnGateSpecProtocol.setStatus('current')
rdnGateSpecSourceIP = MibTableColumn((1, 3, 6, 1, 4, 1, 4981, 7, 3, 1, 4), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rdnGateSpecSourceIP.setStatus('current')
rdnGateSpecSourcePort = MibTableColumn((1, 3, 6, 1, 4, 1, 4981, 7, 3, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rdnGateSpecSourcePort.setStatus('current')
rdnGateSpecDestIP = MibTableColumn((1, 3, 6, 1, 4, 1, 4981, 7, 3, 1, 6), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rdnGateSpecDestIP.setStatus('current')
rdnGateSpecDestPort = MibTableColumn((1, 3, 6, 1, 4, 1, 4981, 7, 3, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rdnGateSpecDestPort.setStatus('current')
rdnGateSpecServiceFlowID = MibTableColumn((1, 3, 6, 1, 4, 1, 4981, 7, 3, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rdnGateSpecServiceFlowID.setStatus('current')
rdnGateSpecFlags = MibTableColumn((1, 3, 6, 1, 4, 1, 4981, 7, 3, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("autoCommit", 1), ("commitNotAllowed", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rdnGateSpecFlags.setStatus('current')
rdnGateSpecSessionClass = MibTableColumn((1, 3, 6, 1, 4, 1, 4981, 7, 3, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(255, 1, 2))).clone(namedValues=NamedValues(("unspecified", 255), ("normalPriority", 1), ("highPriority", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rdnGateSpecSessionClass.setStatus('current')
rdnGateSpecDiffServCode = MibTableColumn((1, 3, 6, 1, 4, 1, 4981, 7, 3, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rdnGateSpecDiffServCode.setStatus('current')
rdnGateSpecT1Timer = MibTableColumn((1, 3, 6, 1, 4, 1, 4981, 7, 3, 1, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rdnGateSpecT1Timer.setStatus('current')
rdnGateSpecTokenBuckRate = MibTableColumn((1, 3, 6, 1, 4, 1, 4981, 7, 3, 1, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rdnGateSpecTokenBuckRate.setStatus('current')
rdnGateSpecBuckSize = MibTableColumn((1, 3, 6, 1, 4, 1, 4981, 7, 3, 1, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rdnGateSpecBuckSize.setStatus('current')
rdnGateSpecPeakDataRate = MibTableColumn((1, 3, 6, 1, 4, 1, 4981, 7, 3, 1, 15), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rdnGateSpecPeakDataRate.setStatus('current')
rdnGateSpecMinPoliceUnit = MibTableColumn((1, 3, 6, 1, 4, 1, 4981, 7, 3, 1, 16), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rdnGateSpecMinPoliceUnit.setStatus('current')
rdnGateSpecMaxPacketSize = MibTableColumn((1, 3, 6, 1, 4, 1, 4981, 7, 3, 1, 17), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rdnGateSpecMaxPacketSize.setStatus('current')
rdnGateSpecReserveRate = MibTableColumn((1, 3, 6, 1, 4, 1, 4981, 7, 3, 1, 18), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rdnGateSpecReserveRate.setStatus('current')
rdnGateSlackTerm = MibTableColumn((1, 3, 6, 1, 4, 1, 4981, 7, 3, 1, 19), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rdnGateSlackTerm.setStatus('current')
rdnPktCMSIpConfigTable = MibTable((1, 3, 6, 1, 4, 1, 4981, 7, 4), )
if mibBuilder.loadTexts: rdnPktCMSIpConfigTable.setStatus('current')
rdnPktCMSIpConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4981, 7, 4, 1), ).setIndexNames((0, "RDN-PKTCABLE-GROUP-MIB", "rdnPktCMSIpAddressIndex"))
if mibBuilder.loadTexts: rdnPktCMSIpConfigEntry.setStatus('current')
rdnPktCMSIpAddressIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 4981, 7, 4, 1, 1), Integer32())
if mibBuilder.loadTexts: rdnPktCMSIpAddressIndex.setStatus('current')
rdnPktCMSIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 4981, 7, 4, 1, 2), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rdnPktCMSIpAddress.setStatus('current')
rdnPktDQoSStatsTable = MibTable((1, 3, 6, 1, 4, 1, 4981, 7, 6), )
if mibBuilder.loadTexts: rdnPktDQoSStatsTable.setStatus('current')
rdnPktDQoSStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4981, 7, 6, 1), ).setIndexNames((0, "RDN-PKTCABLE-GROUP-MIB", "rdnPktDQoSCopsHandle"))
if mibBuilder.loadTexts: rdnPktDQoSStatsEntry.setStatus('current')
rdnPktDQoSIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 4981, 7, 6, 1, 1), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rdnPktDQoSIpAddress.setStatus('current')
rdnPktDQoSCopsHandle = MibTableColumn((1, 3, 6, 1, 4, 1, 4981, 7, 6, 1, 2), Integer32())
if mibBuilder.loadTexts: rdnPktDQoSCopsHandle.setStatus('current')
rdnPktDQoSCopsStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 4981, 7, 6, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("closed", 0), ("opening", 1), ("open", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rdnPktDQoSCopsStatus.setStatus('current')
rdnPktDQoSCopsConnected = MibTableColumn((1, 3, 6, 1, 4, 1, 4981, 7, 6, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rdnPktDQoSCopsConnected.setStatus('current')
rdnPktDQoSCopsTerminated = MibTableColumn((1, 3, 6, 1, 4, 1, 4981, 7, 6, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rdnPktDQoSCopsTerminated.setStatus('current')
rdnPktDQoSCopsKASent = MibTableColumn((1, 3, 6, 1, 4, 1, 4981, 7, 6, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rdnPktDQoSCopsKASent.setStatus('current')
rdnPktDQoSCopsKARcvd = MibTableColumn((1, 3, 6, 1, 4, 1, 4981, 7, 6, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rdnPktDQoSCopsKARcvd.setStatus('current')
rdnPktDQoSKATimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 4981, 7, 6, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rdnPktDQoSKATimeout.setStatus('current')
rdnPktDQoST0Timeout = MibTableColumn((1, 3, 6, 1, 4, 1, 4981, 7, 6, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rdnPktDQoST0Timeout.setStatus('current')
rdnPktDQoST1Timeout = MibTableColumn((1, 3, 6, 1, 4, 1, 4981, 7, 6, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rdnPktDQoST1Timeout.setStatus('current')
rdnPktDQoSGateAllocCount = MibTableColumn((1, 3, 6, 1, 4, 1, 4981, 7, 6, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rdnPktDQoSGateAllocCount.setStatus('current')
rdnPktDQoSGateAllocAckCount = MibTableColumn((1, 3, 6, 1, 4, 1, 4981, 7, 6, 1, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rdnPktDQoSGateAllocAckCount.setStatus('current')
rdnPktDQoSGateAllocErrCount = MibTableColumn((1, 3, 6, 1, 4, 1, 4981, 7, 6, 1, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rdnPktDQoSGateAllocErrCount.setStatus('current')
rdnPktDQoSGateSetCount = MibTableColumn((1, 3, 6, 1, 4, 1, 4981, 7, 6, 1, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rdnPktDQoSGateSetCount.setStatus('current')
rdnPktDQoSGateSetAckCount = MibTableColumn((1, 3, 6, 1, 4, 1, 4981, 7, 6, 1, 15), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rdnPktDQoSGateSetAckCount.setStatus('current')
rdnPktDQoSGateSetErrCount = MibTableColumn((1, 3, 6, 1, 4, 1, 4981, 7, 6, 1, 16), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rdnPktDQoSGateSetErrCount.setStatus('current')
rdnPktDQoSGateDeleteCount = MibTableColumn((1, 3, 6, 1, 4, 1, 4981, 7, 6, 1, 17), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rdnPktDQoSGateDeleteCount.setStatus('current')
rdnPktDQoSGateDeleteAckCount = MibTableColumn((1, 3, 6, 1, 4, 1, 4981, 7, 6, 1, 18), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rdnPktDQoSGateDeleteAckCount.setStatus('current')
rdnPktDQoSGateDeleteErrCount = MibTableColumn((1, 3, 6, 1, 4, 1, 4981, 7, 6, 1, 19), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rdnPktDQoSGateDeleteErrCount.setStatus('current')
rdnPktDQoSGateInfoCount = MibTableColumn((1, 3, 6, 1, 4, 1, 4981, 7, 6, 1, 20), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rdnPktDQoSGateInfoCount.setStatus('current')
rdnPktDQoSGateInfoAckCount = MibTableColumn((1, 3, 6, 1, 4, 1, 4981, 7, 6, 1, 21), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rdnPktDQoSGateInfoAckCount.setStatus('current')
rdnPktDQoSGateInfoErrCount = MibTableColumn((1, 3, 6, 1, 4, 1, 4981, 7, 6, 1, 22), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rdnPktDQoSGateInfoErrCount.setStatus('current')
rdnPktDQoSGateOpenRcvd = MibTableColumn((1, 3, 6, 1, 4, 1, 4981, 7, 6, 1, 23), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rdnPktDQoSGateOpenRcvd.setStatus('obsolete')
rdnPktDQoSGateOpenAckSent = MibTableColumn((1, 3, 6, 1, 4, 1, 4981, 7, 6, 1, 24), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rdnPktDQoSGateOpenAckSent.setStatus('obsolete')
rdnPktDQoSGateOpenErrSent = MibTableColumn((1, 3, 6, 1, 4, 1, 4981, 7, 6, 1, 25), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rdnPktDQoSGateOpenErrSent.setStatus('obsolete')
rdnPktDQoSGateCloseRcvd = MibTableColumn((1, 3, 6, 1, 4, 1, 4981, 7, 6, 1, 26), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rdnPktDQoSGateCloseRcvd.setStatus('obsolete')
rdnPktDQoSGateCloseAckSent = MibTableColumn((1, 3, 6, 1, 4, 1, 4981, 7, 6, 1, 27), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rdnPktDQoSGateCloseAckSent.setStatus('obsolete')
rdnPktDQoSGateCloseErrSent = MibTableColumn((1, 3, 6, 1, 4, 1, 4981, 7, 6, 1, 28), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rdnPktDQoSGateCloseErrSent.setStatus('obsolete')
rdnPktDQoSGateOpenSent = MibTableColumn((1, 3, 6, 1, 4, 1, 4981, 7, 6, 1, 29), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rdnPktDQoSGateOpenSent.setStatus('current')
rdnPktDQoSGateOpenAckRcvd = MibTableColumn((1, 3, 6, 1, 4, 1, 4981, 7, 6, 1, 30), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rdnPktDQoSGateOpenAckRcvd.setStatus('obsolete')
rdnPktDQoSGateOpenErrRcvd = MibTableColumn((1, 3, 6, 1, 4, 1, 4981, 7, 6, 1, 31), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rdnPktDQoSGateOpenErrRcvd.setStatus('obsolete')
rdnPktDQoSGateCloseSent = MibTableColumn((1, 3, 6, 1, 4, 1, 4981, 7, 6, 1, 32), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rdnPktDQoSGateCloseSent.setStatus('current')
rdnPktDQoSGateCloseAckRcvd = MibTableColumn((1, 3, 6, 1, 4, 1, 4981, 7, 6, 1, 33), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rdnPktDQoSGateCloseAckRcvd.setStatus('obsolete')
rdnPktDQoSGateCloseErrRcvd = MibTableColumn((1, 3, 6, 1, 4, 1, 4981, 7, 6, 1, 34), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rdnPktDQoSGateCloseErrRcvd.setStatus('obsolete')
rdnPktDQoSGateOpenRetries = MibTableColumn((1, 3, 6, 1, 4, 1, 4981, 7, 6, 1, 35), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rdnPktDQoSGateOpenRetries.setStatus('obsolete')
rdnPktDQoSGateCloseRetries = MibTableColumn((1, 3, 6, 1, 4, 1, 4981, 7, 6, 1, 36), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rdnPktDQoSGateCloseRetries.setStatus('obsolete')
rdnPktDQoSGateOpenExhausted = MibTableColumn((1, 3, 6, 1, 4, 1, 4981, 7, 6, 1, 37), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rdnPktDQoSGateOpenExhausted.setStatus('obsolete')
rdnPktDQoSGateCloseExhausted = MibTableColumn((1, 3, 6, 1, 4, 1, 4981, 7, 6, 1, 38), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rdnPktDQoSGateCloseExhausted.setStatus('obsolete')
rdnPktDQoSCliOpenSent = MibTableColumn((1, 3, 6, 1, 4, 1, 4981, 7, 6, 1, 39), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rdnPktDQoSCliOpenSent.setStatus('current')
rdnPktDQoSCliAcceptReceived = MibTableColumn((1, 3, 6, 1, 4, 1, 4981, 7, 6, 1, 40), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rdnPktDQoSCliAcceptReceived.setStatus('current')
rdnPktDQoSRequestSent = MibTableColumn((1, 3, 6, 1, 4, 1, 4981, 7, 6, 1, 41), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rdnPktDQoSRequestSent.setStatus('current')
rdnPktDQoSCliCloseReceived = MibTableColumn((1, 3, 6, 1, 4, 1, 4981, 7, 6, 1, 42), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rdnPktDQoSCliCloseReceived.setStatus('current')
rdnPktDQoSCliCloseSent = MibTableColumn((1, 3, 6, 1, 4, 1, 4981, 7, 6, 1, 43), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rdnPktDQoSCliCloseSent.setStatus('current')
rdnPktDQoSSsqReceived = MibTableColumn((1, 3, 6, 1, 4, 1, 4981, 7, 6, 1, 44), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rdnPktDQoSSsqReceived.setStatus('current')
rdnPktDQoSSscSent = MibTableColumn((1, 3, 6, 1, 4, 1, 4981, 7, 6, 1, 45), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rdnPktDQoSSscSent.setStatus('current')
rdnPktDQoSDrqSent = MibTableColumn((1, 3, 6, 1, 4, 1, 4981, 7, 6, 1, 46), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rdnPktDQoSDrqSent.setStatus('current')
rdnPktDQoST7Timeout = MibTableColumn((1, 3, 6, 1, 4, 1, 4981, 7, 6, 1, 47), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rdnPktDQoST7Timeout.setStatus('current')
rdnPktDQoST8Timeout = MibTableColumn((1, 3, 6, 1, 4, 1, 4981, 7, 6, 1, 48), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rdnPktDQoST8Timeout.setStatus('current')
rdnPktDQoSGateCmDel = MibTableColumn((1, 3, 6, 1, 4, 1, 4981, 7, 6, 1, 49), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rdnPktDQoSGateCmDel.setStatus('current')
rdnPktDQoSGateCmDereg = MibTableColumn((1, 3, 6, 1, 4, 1, 4981, 7, 6, 1, 50), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rdnPktDQoSGateCmDereg.setStatus('current')
rdnPktDQoSGateAdminDel = MibTableColumn((1, 3, 6, 1, 4, 1, 4981, 7, 6, 1, 51), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rdnPktDQoSGateAdminDel.setStatus('current')
rdnPktDQoSGateResReassign = MibTableColumn((1, 3, 6, 1, 4, 1, 4981, 7, 6, 1, 52), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rdnPktDQoSGateResReassign.setStatus('current')
rdnPktDQoSNotificationObject = MibIdentifier((1, 3, 6, 1, 4, 1, 4981, 7, 7))
rdnPktDQoSCopsReason = MibScalar((1, 3, 6, 1, 4, 1, 4981, 7, 7, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("copsConnectionEstablished", 1), ("cantEstablishCopsConnection", 2), ("unauthorizedCms", 3), ("copsConnectionClosed", 4), ("copsConnectionDisconnected", 5), ("keepAliveFailure", 6)))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: rdnPktDQoSCopsReason.setStatus('current')
rdnPktDQoSCopsCmsIpAddr = MibScalar((1, 3, 6, 1, 4, 1, 4981, 7, 7, 2), IpAddress()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: rdnPktDQoSCopsCmsIpAddr.setStatus('current')
rdnPktDQoSCopsCmsPortNum = MibScalar((1, 3, 6, 1, 4, 1, 4981, 7, 7, 3), Integer32()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: rdnPktDQoSCopsCmsPortNum.setStatus('current')
rdnPktDQoSCopsCmsHandleId = MibScalar((1, 3, 6, 1, 4, 1, 4981, 7, 7, 4), Integer32()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: rdnPktDQoSCopsCmsHandleId.setStatus('current')
rdnPktDQoSResReqReason = MibScalar((1, 3, 6, 1, 4, 1, 4981, 7, 7, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("dsaReqResourceGreaterThanAuth", 1), ("dsaResReqWithoutGateId", 2), ("dsaResReqWithInvalidGateId", 3), ("dscReqResourceGreaterThanAuth", 4), ("dscResReqWithoutGateId", 5), ("dscResReqWithInvalidGateId", 6)))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: rdnPktDQoSResReqReason.setStatus('current')
rdnPktDQoSCmMacAddr = MibScalar((1, 3, 6, 1, 4, 1, 4981, 7, 7, 6), MacAddress()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: rdnPktDQoSCmMacAddr.setStatus('current')
rdnPktDQoSEmergencyReason = MibScalar((1, 3, 6, 1, 4, 1, 4981, 7, 7, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("emergencyCallBeingRejected", 1)))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: rdnPktDQoSEmergencyReason.setStatus('current')
rdnPktDQoSClassName = MibScalar((1, 3, 6, 1, 4, 1, 4981, 7, 7, 8), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: rdnPktDQoSClassName.setStatus('current')
rdnPktDQoSGateId = MibScalar((1, 3, 6, 1, 4, 1, 4981, 7, 7, 9), Integer32()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: rdnPktDQoSGateId.setStatus('current')
rdnPktDQoSEmergencyPreemptReason = MibScalar((1, 3, 6, 1, 4, 1, 4981, 7, 7, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("emergencyPreemptedMostRecentCall", 1), ("emergencyPreemptedOldestCall", 2), ("emergencyPreemptedRandomCall", 3)))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: rdnPktDQoSEmergencyPreemptReason.setStatus('current')
rdnPktDQoSNotificationTraps = MibIdentifier((1, 3, 6, 1, 4, 1, 4981, 7, 8))
rdnPktDQoSNotificationTrapsPrefix = MibIdentifier((1, 3, 6, 1, 4, 1, 4981, 7, 8, 0))
rdnPktDQoSCopsTrap = NotificationType((1, 3, 6, 1, 4, 1, 4981, 7, 8, 0, 1)).setObjects(("RDN-PKTCABLE-GROUP-MIB", "rdnPktDQoSCopsReason"), ("RDN-PKTCABLE-GROUP-MIB", "rdnPktDQoSCopsCmsIpAddr"))
if mibBuilder.loadTexts: rdnPktDQoSCopsTrap.setStatus('current')
rdnPktDQoSResReqTrap = NotificationType((1, 3, 6, 1, 4, 1, 4981, 7, 8, 0, 2)).setObjects(("RDN-PKTCABLE-GROUP-MIB", "rdnPktDQoSResReqReason"), ("RDN-PKTCABLE-GROUP-MIB", "rdnPktDQoSCmMacAddr"))
if mibBuilder.loadTexts: rdnPktDQoSResReqTrap.setStatus('current')
rdnPktDQoSEmergencyTrap = NotificationType((1, 3, 6, 1, 4, 1, 4981, 7, 8, 0, 3)).setObjects(("RDN-PKTCABLE-GROUP-MIB", "rdnPktDQoSEmergencyReason"), ("RDN-PKTCABLE-GROUP-MIB", "rdnPktDQoSCmMacAddr"), ("RDN-PKTCABLE-GROUP-MIB", "rdnPktDQoSClassName"), ("RDN-PKTCABLE-GROUP-MIB", "rdnPktDQoSGateId"))
if mibBuilder.loadTexts: rdnPktDQoSEmergencyTrap.setStatus('current')
rdnPktDQoSEmergencyPreemptTrap = NotificationType((1, 3, 6, 1, 4, 1, 4981, 7, 8, 0, 4)).setObjects(("RDN-PKTCABLE-GROUP-MIB", "rdnPktDQoSEmergencyPreemptReason"), ("RDN-PKTCABLE-GROUP-MIB", "rdnPktDQoSCmMacAddr"), ("RDN-PKTCABLE-GROUP-MIB", "rdnPktDQoSClassName"), ("RDN-PKTCABLE-GROUP-MIB", "rdnPktDQoSGateId"))
if mibBuilder.loadTexts: rdnPktDQoSEmergencyPreemptTrap.setStatus('current')
rdnPktESNotificationObject = MibIdentifier((1, 3, 6, 1, 4, 1, 4981, 7, 9))
rdnPktESReason = MibScalar((1, 3, 6, 1, 4, 1, 4981, 7, 9, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("cdcFailure", 1)))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: rdnPktESReason.setStatus('current')
rdnPktESDFIpAddr = MibScalar((1, 3, 6, 1, 4, 1, 4981, 7, 9, 2), IpAddress()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: rdnPktESDFIpAddr.setStatus('current')
rdnPktESDFPortNum = MibScalar((1, 3, 6, 1, 4, 1, 4981, 7, 9, 3), Integer32()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: rdnPktESDFPortNum.setStatus('current')
rdnPktESNotificationTraps = MibIdentifier((1, 3, 6, 1, 4, 1, 4981, 7, 10))
rdnPktESNotificationTrapsPrefix = MibIdentifier((1, 3, 6, 1, 4, 1, 4981, 7, 10, 0))
rdnPktESTrap = NotificationType((1, 3, 6, 1, 4, 1, 4981, 7, 10, 0, 1)).setObjects(("RDN-PKTCABLE-GROUP-MIB", "rdnPktESReason"), ("RDN-PKTCABLE-GROUP-MIB", "rdnPktESDFIpAddr"), ("RDN-PKTCABLE-GROUP-MIB", "rdnPktESDFPortNum"))
if mibBuilder.loadTexts: rdnPktESTrap.setStatus('current')
rdnPktRKSNotificationObject = MibIdentifier((1, 3, 6, 1, 4, 1, 4981, 7, 11))
rdnPktRKSReason = MibScalar((1, 3, 6, 1, 4, 1, 4981, 7, 11, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("retriesExhausted", 1)))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: rdnPktRKSReason.setStatus('current')
rdnPktRKSTransID = MibScalar((1, 3, 6, 1, 4, 1, 4981, 7, 11, 2), Integer32()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: rdnPktRKSTransID.setStatus('current')
rdnPktRKSIPPrimary = MibScalar((1, 3, 6, 1, 4, 1, 4981, 7, 11, 3), IpAddress()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: rdnPktRKSIPPrimary.setStatus('current')
rdnPktRKSPortPrimary = MibScalar((1, 3, 6, 1, 4, 1, 4981, 7, 11, 4), Integer32()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: rdnPktRKSPortPrimary.setStatus('current')
rdnPktRKSIPSecondary = MibScalar((1, 3, 6, 1, 4, 1, 4981, 7, 11, 5), IpAddress()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: rdnPktRKSIPSecondary.setStatus('current')
rdnPktRKSPortSecondary = MibScalar((1, 3, 6, 1, 4, 1, 4981, 7, 11, 6), Integer32()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: rdnPktRKSPortSecondary.setStatus('current')
rdnPktRKSVersionID = MibScalar((1, 3, 6, 1, 4, 1, 4981, 7, 11, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("packetCable10", 1), ("packetCable11", 2), ("packetCableMultiMedia", 3)))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: rdnPktRKSVersionID.setStatus('current')
rdnPktRKSNotificationTraps = MibIdentifier((1, 3, 6, 1, 4, 1, 4981, 7, 12))
rdnPktRKSNotificationTrapsPrefix = MibIdentifier((1, 3, 6, 1, 4, 1, 4981, 7, 12, 0))
rdnPktDQoSRKSTrap = NotificationType((1, 3, 6, 1, 4, 1, 4981, 7, 12, 0, 1)).setObjects(("RDN-PKTCABLE-GROUP-MIB", "rdnPktRKSReason"), ("RDN-PKTCABLE-GROUP-MIB", "rdnPktRKSTransID"), ("RDN-PKTCABLE-GROUP-MIB", "rdnPktRKSIPPrimary"), ("RDN-PKTCABLE-GROUP-MIB", "rdnPktRKSPortPrimary"), ("RDN-PKTCABLE-GROUP-MIB", "rdnPktRKSIPSecondary"), ("RDN-PKTCABLE-GROUP-MIB", "rdnPktRKSPortSecondary"), ("RDN-PKTCABLE-GROUP-MIB", "rdnPktRKSVersionID"))
if mibBuilder.loadTexts: rdnPktDQoSRKSTrap.setStatus('current')
mibBuilder.exportSymbols("RDN-PKTCABLE-GROUP-MIB", rdnPktDQoSGateDeleteCount=rdnPktDQoSGateDeleteCount, rdnGateSpecEntry=rdnGateSpecEntry, rdnGateSpecDestPort=rdnGateSpecDestPort, rdnPktDQoSKATimeout=rdnPktDQoSKATimeout, rdnPktDQoSGateSetCount=rdnPktDQoSGateSetCount, rdnGateSlackTerm=rdnGateSlackTerm, rdnPktDQoSCopsTerminated=rdnPktDQoSCopsTerminated, rdnPktDQoSGateOpenRcvd=rdnPktDQoSGateOpenRcvd, rdnPktDQoST7Timeout=rdnPktDQoST7Timeout, rdnGateSpecProtocol=rdnGateSpecProtocol, rdnPktDQoSResReqReason=rdnPktDQoSResReqReason, rdnPktDQoST3Timer=rdnPktDQoST3Timer, rdnGateStatsESCCCAddr=rdnGateStatsESCCCAddr, rdnPktRKSTransID=rdnPktRKSTransID, rdnPktDQoSGateOpenErrSent=rdnPktDQoSGateOpenErrSent, rdnGateId=rdnGateId, rdnPktESNotificationTraps=rdnPktESNotificationTraps, PYSNMP_MODULE_ID=rdnPacketCableGroup, rdnGateSpecReserveRate=rdnGateSpecReserveRate, rdnPktDQoSGateDeleteErrCount=rdnPktDQoSGateDeleteErrCount, rdnPktCMSIpAddressIndex=rdnPktCMSIpAddressIndex, rdnPktDQoSGateSetAckCount=rdnPktDQoSGateSetAckCount, rdnPktDQoSCMTSIp=rdnPktDQoSCMTSIp, rdnPktDQoSEmergencyPreemptReason=rdnPktDQoSEmergencyPreemptReason, rdnPktDQoSDscp=rdnPktDQoSDscp, rdnPktDQoST6Timer=rdnPktDQoST6Timer, rdnPktDQoSGateAdminDel=rdnPktDQoSGateAdminDel, rdnPktDQoSCopsStatus=rdnPktDQoSCopsStatus, rdnPktRKSNotificationTraps=rdnPktRKSNotificationTraps, rdnPktDQoSSsqReceived=rdnPktDQoSSsqReceived, rdnPktDQoSClientAccpTimer=rdnPktDQoSClientAccpTimer, rdnPktDQoSGateCmDel=rdnPktDQoSGateCmDel, rdnPktDQoSGateCloseExhausted=rdnPktDQoSGateCloseExhausted, rdnPacketCableGroup=rdnPacketCableGroup, rdnGateStatsRKSSecondaryAddr=rdnGateStatsRKSSecondaryAddr, rdnGateSpecBuckSize=rdnGateSpecBuckSize, rdnPktMMDscp=rdnPktMMDscp, rdnPktDQoST0Timeout=rdnPktDQoST0Timeout, rdnGateStatsEntry=rdnGateStatsEntry, rdnPktDQoSGateAllocAckCount=rdnPktDQoSGateAllocAckCount, rdnPktRKSNotificationObject=rdnPktRKSNotificationObject, rdnGateStatsESCCCPort=rdnGateStatsESCCCPort, rdnPktRKSVersionID=rdnPktRKSVersionID, rdnGateSpecDestIP=rdnGateSpecDestIP, rdnPktDQoSNotificationObject=rdnPktDQoSNotificationObject, rdnPktDQoST1Timer=rdnPktDQoST1Timer, rdnGateStatsESCDCAddr=rdnGateStatsESCDCAddr, rdnGateSpecServiceFlowID=rdnGateSpecServiceFlowID, rdnGateSpecDiffServCode=rdnGateSpecDiffServCode, rdnPktDQoSGateInfoErrCount=rdnPktDQoSGateInfoErrCount, rdnGateSpecT1Timer=rdnGateSpecT1Timer, rdnPktDQoSGateInfoAckCount=rdnPktDQoSGateInfoAckCount, rdnPktDQoSCopsTrapEnable=rdnPktDQoSCopsTrapEnable, rdnPktDQoSGateDeleteAckCount=rdnPktDQoSGateDeleteAckCount, rdnPktDQoSDrqSent=rdnPktDQoSDrqSent, rdnPktDQoST1Timeout=rdnPktDQoST1Timeout, rdnPktDQoSGateCmDereg=rdnPktDQoSGateCmDereg, rdnPktDQoSCliOpenSent=rdnPktDQoSCliOpenSent, rdnPktDQoSCliCloseSent=rdnPktDQoSCliCloseSent, rdnPktDQoSSscSent=rdnPktDQoSSscSent, rdnPktDQoSEmergencyTrap=rdnPktDQoSEmergencyTrap, rdnGateSpecMaxPacketSize=rdnGateSpecMaxPacketSize, rdnGateSpecSourceIP=rdnGateSpecSourceIP, rdnPktCMSIpConfigTable=rdnPktCMSIpConfigTable, rdnPktDQoSGateInfoCount=rdnPktDQoSGateInfoCount, rdnPktDQoSGateResReassign=rdnPktDQoSGateResReassign, rdnPktCMSIpAddress=rdnPktCMSIpAddress, rdnPktESCccDscp=rdnPktESCccDscp, BcidDataArray=BcidDataArray, rdnPktEMDscp=rdnPktEMDscp, rdnPktDQoSNotificationTrapsPrefix=rdnPktDQoSNotificationTrapsPrefix, rdnPktDQoSRequestSent=rdnPktDQoSRequestSent, rdnGateStatsDurationTime=rdnGateStatsDurationTime, rdnPktRKSIPPrimary=rdnPktRKSIPPrimary, rdnPktRKSReason=rdnPktRKSReason, rdnPktESDFIpAddr=rdnPktESDFIpAddr, rdnPktDQoSConfigGroup=rdnPktDQoSConfigGroup, rdnPktEMRKSFailureTrapEnable=rdnPktEMRKSFailureTrapEnable, rdnPktDQoSCopsKASent=rdnPktDQoSCopsKASent, rdnPktDQoSGateCloseErrSent=rdnPktDQoSGateCloseErrSent, rdnPktESDFPortNum=rdnPktESDFPortNum, rdnPktDQoSStatsTable=rdnPktDQoSStatsTable, rdnGateStatsRKSSecondaryPort=rdnGateStatsRKSSecondaryPort, rdnGateSpecTable=rdnGateSpecTable, rdnPktDQoST0Timer=rdnPktDQoST0Timer, rdnGateStatsResourceID=rdnGateStatsResourceID, rdnPktDQoSGateOpenAckSent=rdnPktDQoSGateOpenAckSent, rdnPktDQoSGateCloseAckRcvd=rdnPktDQoSGateCloseAckRcvd, rdnGateStatsTable=rdnGateStatsTable, rdnPktDQoSEmergencyTrapEnable=rdnPktDQoSEmergencyTrapEnable, rdnPktDQoSGateCloseRetries=rdnPktDQoSGateCloseRetries, rdnPktESEnable=rdnPktESEnable, rdnPktESTrap=rdnPktESTrap, rdnGateStatsDnSfid=rdnGateStatsDnSfid, rdnGateSpecMinPoliceUnit=rdnGateSpecMinPoliceUnit, rdnPktDQoSGateId=rdnPktDQoSGateId, rdnPktDQoSCopsCmsHandleId=rdnPktDQoSCopsCmsHandleId, rdnGateStatsESCCCId=rdnGateStatsESCCCId, rdnPktDQoSGateOpenRetries=rdnPktDQoSGateOpenRetries, rdnPktESNotificationTrapsPrefix=rdnPktESNotificationTrapsPrefix, rdnPktDQoSCopsTrap=rdnPktDQoSCopsTrap, rdnPktDQoSEmergencyReason=rdnPktDQoSEmergencyReason, rdnPktDQoSResReqTrap=rdnPktDQoSResReqTrap, rdnPktRKSPortSecondary=rdnPktRKSPortSecondary, rdnPktDQoSGateCloseAckSent=rdnPktDQoSGateCloseAckSent, rdnPktDQoSNotificationTraps=rdnPktDQoSNotificationTraps, rdnGateSpecTokenBuckRate=rdnGateSpecTokenBuckRate, rdnPktDQoSCopsHandle=rdnPktDQoSCopsHandle, rdnGateStatsSubscriberIP=rdnGateStatsSubscriberIP, rdnGateStatsSlotNum=rdnGateStatsSlotNum, rdnGateStatsBillingCorrelationID=rdnGateStatsBillingCorrelationID, rdnGateStatsState=rdnGateStatsState, rdnPktESReason=rdnPktESReason, rdnPktDQoSPEPID=rdnPktDQoSPEPID, rdnGateSpecPeakDataRate=rdnGateSpecPeakDataRate, rdnPktDQoSCOPSStatus=rdnPktDQoSCOPSStatus, rdnPktDQoSCopsKARcvd=rdnPktDQoSCopsKARcvd, rdnGateStatsEventFlag=rdnGateStatsEventFlag, rdnPktDQoSGateSetErrCount=rdnPktDQoSGateSetErrCount, rdnGateSpecSourcePort=rdnGateSpecSourcePort, rdnGateSpecFlags=rdnGateSpecFlags, rdnPktDQoSCopsConnected=rdnPktDQoSCopsConnected, rdnPktESTrapEnable=rdnPktESTrapEnable, rdnGateStatsRKSPrimaryAddr=rdnGateStatsRKSPrimaryAddr, rdnPktDQoSGateCloseErrRcvd=rdnPktDQoSGateCloseErrRcvd, rdnPktDQoSCopsCmsIpAddr=rdnPktDQoSCopsCmsIpAddr, rdnPktDQoSCmMacAddr=rdnPktDQoSCmMacAddr, rdnPktDQoSGateAllocCount=rdnPktDQoSGateAllocCount, rdnPktDQoST8Timeout=rdnPktDQoST8Timeout, rdnPktDQoSEmergencyPreemptTrap=rdnPktDQoSEmergencyPreemptTrap, rdnGateStatsESFlag=rdnGateStatsESFlag, rdnPktDQoSGateOpenErrRcvd=rdnPktDQoSGateOpenErrRcvd, rdnPktRKSPortPrimary=rdnPktRKSPortPrimary, rdnGateSpecSessionClass=rdnGateSpecSessionClass, rdnPktDQoSGateCloseRcvd=rdnPktDQoSGateCloseRcvd, rdnPktDQoSGateOpenAckRcvd=rdnPktDQoSGateOpenAckRcvd, rdnPktDQoSCopsCmsPortNum=rdnPktDQoSCopsCmsPortNum, rdnPktESNotificationObject=rdnPktESNotificationObject, rdnPktDQoSCliAcceptReceived=rdnPktDQoSCliAcceptReceived, rdnPktRKSIPSecondary=rdnPktRKSIPSecondary, rdnPktDQoSCopsReason=rdnPktDQoSCopsReason, rdnPktRKSNotificationTrapsPrefix=rdnPktRKSNotificationTrapsPrefix, rdnPktDQoSResReqTrapEnable=rdnPktDQoSResReqTrapEnable, rdnPktDQoSGateAllocErrCount=rdnPktDQoSGateAllocErrCount, rdnGateStatsESCDCPort=rdnGateStatsESCDCPort, rdnPktDQoSCliCloseReceived=rdnPktDQoSCliCloseReceived, rdnGateStatsRKSPrimaryPort=rdnGateStatsRKSPrimaryPort, rdnPktDQoSStatsEntry=rdnPktDQoSStatsEntry, rdnPktCMSIpConfigEntry=rdnPktCMSIpConfigEntry, rdnGateDirection=rdnGateDirection, rdnPktDQoSGateOpenSent=rdnPktDQoSGateOpenSent, rdnPktDQoSEmergencyPreemption=rdnPktDQoSEmergencyPreemption, rdnPktDQoSClassName=rdnPktDQoSClassName, rdnPktDQoSIpAddress=rdnPktDQoSIpAddress, rdnGateStatsUpSfid=rdnGateStatsUpSfid, rdnPktDQoSGateOpenExhausted=rdnPktDQoSGateOpenExhausted, rdnPktDQoSRKSTrap=rdnPktDQoSRKSTrap, rdnPktDQoSGateCloseSent=rdnPktDQoSGateCloseSent)
