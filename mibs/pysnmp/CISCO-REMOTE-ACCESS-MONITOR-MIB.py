#
# PySNMP MIB module CISCO-REMOTE-ACCESS-MONITOR-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/CISCO-REMOTE-ACCESS-MONITOR-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 17:53:53 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, OctetString, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "Integer", "OctetString", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
SingleValueConstraint, ValueRangeConstraint, ConstraintsUnion, ConstraintsIntersection, ValueSizeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "SingleValueConstraint", "ValueRangeConstraint", "ConstraintsUnion", "ConstraintsIntersection", "ValueSizeConstraint")
ciscoMgmt, = mibBuilder.importSymbols("CISCO-SMI", "ciscoMgmt")
InetAddress, InetAddressType = mibBuilder.importSymbols("INET-ADDRESS-MIB", "InetAddress", "InetAddressType")
SnmpAdminString, = mibBuilder.importSymbols("SNMP-FRAMEWORK-MIB", "SnmpAdminString")
ObjectGroup, ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ObjectGroup", "ModuleCompliance", "NotificationGroup")
zeroDotZero, Gauge32, Unsigned32, Bits, Counter32, ObjectIdentity, ModuleIdentity, IpAddress, MibScalar, MibTable, MibTableRow, MibTableColumn, Counter64, TimeTicks, MibIdentifier, Integer32, iso, NotificationType = mibBuilder.importSymbols("SNMPv2-SMI", "zeroDotZero", "Gauge32", "Unsigned32", "Bits", "Counter32", "ObjectIdentity", "ModuleIdentity", "IpAddress", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Counter64", "TimeTicks", "MibIdentifier", "Integer32", "iso", "NotificationType")
TextualConvention, TimeStamp, TruthValue, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "TimeStamp", "TruthValue", "DisplayString")
ciscoRemoteAccessMonitorMIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 9, 9, 392))
ciscoRemoteAccessMonitorMIB.setRevisions(('2008-08-28 00:00',))
if mibBuilder.loadTexts: ciscoRemoteAccessMonitorMIB.setLastUpdated('200402030000Z')
if mibBuilder.loadTexts: ciscoRemoteAccessMonitorMIB.setOrganization('Cisco Systems')
class RasProtocol(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))
    namedValues = NamedValues(("other", 1), ("ipsec", 2), ("l2tp", 3), ("l2tpoveripsec", 4), ("pptp", 5), ("l2f", 6), ("ssl", 7))

class UserAuthenMethod(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9))
    namedValues = NamedValues(("none", 1), ("other", 2), ("radius", 3), ("tacacsplus", 4), ("kerberos", 5), ("local", 6), ("ldap", 7), ("ntlm", 8), ("sdi", 9))

class UserAuthorMethod(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))
    namedValues = NamedValues(("none", 1), ("other", 2), ("radius", 3), ("tacacsplus", 4), ("kerberos", 5), ("local", 6), ("ldap", 7))

class SessionEncrAlgo(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9))
    namedValues = NamedValues(("none", 1), ("des", 2), ("des3", 3), ("rc4", 4), ("rc5", 5), ("idea", 6), ("cast", 7), ("blowfish", 8), ("aes", 9))

class SessionAuthAlgo(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))
    namedValues = NamedValues(("none", 1), ("other", 2), ("hmacMd5", 3), ("hmacSha", 4))

class SessionCompressionAlgo(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3))
    namedValues = NamedValues(("none", 1), ("other", 2), ("lzs", 3))

class SessionStatus(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3))
    namedValues = NamedValues(("initializing", 1), ("established", 2), ("terminating", 3))

class SessionIndex(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ValueRangeConstraint(1, 2147483647)

class FailureRecordIndex(TextualConvention, Unsigned32):
    status = 'current'
    subtypeSpec = Unsigned32.subtypeSpec + ValueRangeConstraint(1, 4294967295)

ciscoRasMonitorMIBNotifs = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 392, 0))
ciscoRasMonitorMIBObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 392, 1))
ciscoRasMonitorMIBConform = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 392, 2))
crasCapacity = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 392, 1, 1))
crasResourceUsage = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 392, 1, 2))
crasActivity = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 392, 1, 3))
crasFailures = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 392, 1, 4))
crasSecurity = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 392, 1, 5))
crasThresholds = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 392, 1, 6))
crasNotifCntl = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 392, 1, 7))
crasMaxSessionsSupportable = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 392, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setUnits('Sessions').setMaxAccess("readonly")
if mibBuilder.loadTexts: crasMaxSessionsSupportable.setStatus('current')
crasMaxUsersSupportable = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 392, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setUnits('Users').setMaxAccess("readonly")
if mibBuilder.loadTexts: crasMaxUsersSupportable.setStatus('current')
crasMaxGroupsSupportable = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 392, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setUnits('Groups').setMaxAccess("readonly")
if mibBuilder.loadTexts: crasMaxGroupsSupportable.setStatus('current')
crasNumCryptoAccelerators = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 392, 1, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setUnits('Users').setMaxAccess("readonly")
if mibBuilder.loadTexts: crasNumCryptoAccelerators.setStatus('current')
crasGlobalBwUsage = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 392, 1, 2, 1), Gauge32()).setUnits('MBytes/second').setMaxAccess("readonly")
if mibBuilder.loadTexts: crasGlobalBwUsage.setStatus('current')
crasNumSessions = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 392, 1, 3, 1), Gauge32()).setUnits('Sessions').setMaxAccess("readonly")
if mibBuilder.loadTexts: crasNumSessions.setStatus('current')
crasNumPrevSessions = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 392, 1, 3, 2), Counter32()).setUnits('Sessions').setMaxAccess("readonly")
if mibBuilder.loadTexts: crasNumPrevSessions.setStatus('current')
crasNumUsers = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 392, 1, 3, 3), Gauge32()).setUnits('Users').setMaxAccess("readonly")
if mibBuilder.loadTexts: crasNumUsers.setStatus('current')
crasNumGroups = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 392, 1, 3, 4), Gauge32()).setUnits('Groups').setMaxAccess("readonly")
if mibBuilder.loadTexts: crasNumGroups.setStatus('current')
crasGlobalInPkts = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 392, 1, 3, 5), Counter64()).setUnits('Packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: crasGlobalInPkts.setStatus('current')
crasGlobalOutPkts = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 392, 1, 3, 6), Counter64()).setUnits('Packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: crasGlobalOutPkts.setStatus('current')
crasGlobalInOctets = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 392, 1, 3, 7), Counter64()).setUnits('Octets').setMaxAccess("readonly")
if mibBuilder.loadTexts: crasGlobalInOctets.setStatus('current')
crasGlobalInDecompOctets = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 392, 1, 3, 8), Counter64()).setUnits('Octets').setMaxAccess("readonly")
if mibBuilder.loadTexts: crasGlobalInDecompOctets.setStatus('current')
crasGlobalOutOctets = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 392, 1, 3, 9), Counter64()).setUnits('Octets').setMaxAccess("readonly")
if mibBuilder.loadTexts: crasGlobalOutOctets.setStatus('current')
crasGlobalOutUncompOctets = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 392, 1, 3, 10), Counter64()).setUnits('Octets').setMaxAccess("readonly")
if mibBuilder.loadTexts: crasGlobalOutUncompOctets.setStatus('current')
crasGlobalInDropPkts = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 392, 1, 3, 11), Counter64()).setUnits('Packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: crasGlobalInDropPkts.setStatus('current')
crasGlobalOutDropPkts = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 392, 1, 3, 12), Counter64()).setUnits('Packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: crasGlobalOutDropPkts.setStatus('current')
crasSessionTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 392, 1, 3, 21), )
if mibBuilder.loadTexts: crasSessionTable.setStatus('current')
crasSessionEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 392, 1, 3, 21, 1), ).setIndexNames((0, "CISCO-REMOTE-ACCESS-MONITOR-MIB", "crasUsername"), (0, "CISCO-REMOTE-ACCESS-MONITOR-MIB", "crasSessionIndex"))
if mibBuilder.loadTexts: crasSessionEntry.setStatus('current')
crasUsername = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 392, 1, 3, 21, 1, 1), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 128)))
if mibBuilder.loadTexts: crasUsername.setStatus('current')
crasGroup = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 392, 1, 3, 21, 1, 2), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: crasGroup.setStatus('current')
crasSessionIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 392, 1, 3, 21, 1, 3), SessionIndex())
if mibBuilder.loadTexts: crasSessionIndex.setStatus('current')
crasAuthenMethod = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 392, 1, 3, 21, 1, 4), UserAuthenMethod()).setMaxAccess("readonly")
if mibBuilder.loadTexts: crasAuthenMethod.setStatus('current')
crasAuthorMethod = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 392, 1, 3, 21, 1, 5), UserAuthorMethod()).setMaxAccess("readonly")
if mibBuilder.loadTexts: crasAuthorMethod.setStatus('current')
crasSessionDuration = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 392, 1, 3, 21, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: crasSessionDuration.setStatus('current')
crasLocalAddressType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 392, 1, 3, 21, 1, 7), InetAddressType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: crasLocalAddressType.setStatus('current')
crasLocalAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 392, 1, 3, 21, 1, 8), InetAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: crasLocalAddress.setStatus('current')
crasISPAddressType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 392, 1, 3, 21, 1, 9), InetAddressType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: crasISPAddressType.setStatus('current')
crasISPAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 392, 1, 3, 21, 1, 10), InetAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: crasISPAddress.setStatus('current')
crasSessionProtocol = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 392, 1, 3, 21, 1, 11), RasProtocol()).setMaxAccess("readonly")
if mibBuilder.loadTexts: crasSessionProtocol.setStatus('current')
crasProtocolElement = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 392, 1, 3, 21, 1, 12), ObjectIdentifier().clone((0, 0))).setMaxAccess("readonly")
if mibBuilder.loadTexts: crasProtocolElement.setStatus('current')
crasSessionEncryptionAlgo = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 392, 1, 3, 21, 1, 13), SessionEncrAlgo()).setMaxAccess("readonly")
if mibBuilder.loadTexts: crasSessionEncryptionAlgo.setStatus('current')
crasSessionPktAuthenAlgo = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 392, 1, 3, 21, 1, 14), SessionAuthAlgo()).setMaxAccess("readonly")
if mibBuilder.loadTexts: crasSessionPktAuthenAlgo.setStatus('current')
crasSessionCompressionAlgo = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 392, 1, 3, 21, 1, 15), SessionCompressionAlgo()).setMaxAccess("readonly")
if mibBuilder.loadTexts: crasSessionCompressionAlgo.setStatus('current')
crasHeartbeatInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 392, 1, 3, 21, 1, 16), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setUnits('Seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: crasHeartbeatInterval.setStatus('current')
crasClientVendorString = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 392, 1, 3, 21, 1, 17), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: crasClientVendorString.setStatus('current')
crasClientVersionString = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 392, 1, 3, 21, 1, 18), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: crasClientVersionString.setStatus('current')
crasClientOSVendorString = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 392, 1, 3, 21, 1, 19), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: crasClientOSVendorString.setStatus('current')
crasClientOSVersionString = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 392, 1, 3, 21, 1, 20), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: crasClientOSVersionString.setStatus('current')
crasPrimWINSServerAddrType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 392, 1, 3, 21, 1, 21), InetAddressType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: crasPrimWINSServerAddrType.setStatus('current')
crasPrimWINSServer = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 392, 1, 3, 21, 1, 22), InetAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: crasPrimWINSServer.setStatus('current')
crasSecWINSServerAddrType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 392, 1, 3, 21, 1, 23), InetAddressType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: crasSecWINSServerAddrType.setStatus('current')
crasSecWINSServer = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 392, 1, 3, 21, 1, 24), InetAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: crasSecWINSServer.setStatus('current')
crasPrimDNSServerAddrType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 392, 1, 3, 21, 1, 25), InetAddressType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: crasPrimDNSServerAddrType.setStatus('current')
crasPrimDNSServer = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 392, 1, 3, 21, 1, 26), InetAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: crasPrimDNSServer.setStatus('current')
crasSecDNSServerAddrType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 392, 1, 3, 21, 1, 27), InetAddressType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: crasSecDNSServerAddrType.setStatus('current')
crasSecDNSServer = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 392, 1, 3, 21, 1, 28), InetAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: crasSecDNSServer.setStatus('current')
crasDHCPServerAddrType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 392, 1, 3, 21, 1, 29), InetAddressType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: crasDHCPServerAddrType.setStatus('current')
crasDHCPServer = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 392, 1, 3, 21, 1, 30), InetAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: crasDHCPServer.setStatus('current')
crasSessionInPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 392, 1, 3, 21, 1, 31), Counter64()).setUnits('Packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: crasSessionInPkts.setStatus('current')
crasSessionOutPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 392, 1, 3, 21, 1, 32), Counter64()).setUnits('Packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: crasSessionOutPkts.setStatus('current')
crasSessionInDropPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 392, 1, 3, 21, 1, 33), Counter64()).setUnits('Packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: crasSessionInDropPkts.setStatus('current')
crasSessionOutDropPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 392, 1, 3, 21, 1, 34), Counter64()).setUnits('Packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: crasSessionOutDropPkts.setStatus('current')
crasSessionInOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 392, 1, 3, 21, 1, 35), Counter64()).setUnits('Octets').setMaxAccess("readonly")
if mibBuilder.loadTexts: crasSessionInOctets.setStatus('current')
crasSessionOutOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 392, 1, 3, 21, 1, 36), Counter64()).setUnits('Octets').setMaxAccess("readonly")
if mibBuilder.loadTexts: crasSessionOutOctets.setStatus('current')
crasSessionState = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 392, 1, 3, 21, 1, 37), SessionStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: crasSessionState.setStatus('current')
crasActGroupTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 392, 1, 3, 22), )
if mibBuilder.loadTexts: crasActGroupTable.setStatus('current')
crasActGroupEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 392, 1, 3, 22, 1), ).setIndexNames((0, "CISCO-REMOTE-ACCESS-MONITOR-MIB", "crasActGrpName"))
if mibBuilder.loadTexts: crasActGroupEntry.setStatus('current')
crasActGrpName = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 392, 1, 3, 22, 1, 1), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 64)))
if mibBuilder.loadTexts: crasActGrpName.setStatus('current')
crasActGrNumUsers = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 392, 1, 3, 22, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: crasActGrNumUsers.setStatus('current')
crasActGrpInPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 392, 1, 3, 22, 1, 3), Counter64()).setUnits('Packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: crasActGrpInPkts.setStatus('current')
crasActGrpOutPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 392, 1, 3, 22, 1, 4), Counter64()).setUnits('Packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: crasActGrpOutPkts.setStatus('current')
crasActGrpInDropPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 392, 1, 3, 22, 1, 5), Counter64()).setUnits('Packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: crasActGrpInDropPkts.setStatus('current')
crasActGrpOutDropPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 392, 1, 3, 22, 1, 6), Counter64()).setUnits('Packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: crasActGrpOutDropPkts.setStatus('current')
crasActGrpInOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 392, 1, 3, 22, 1, 7), Counter64()).setUnits('Octets').setMaxAccess("readonly")
if mibBuilder.loadTexts: crasActGrpInOctets.setStatus('current')
crasActGrpOutOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 392, 1, 3, 22, 1, 8), Counter64()).setUnits('Octets').setMaxAccess("readonly")
if mibBuilder.loadTexts: crasActGrpOutOctets.setStatus('current')
crasEmailNumSessions = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 392, 1, 3, 23), Gauge32()).setUnits('Sessions').setMaxAccess("readonly")
if mibBuilder.loadTexts: crasEmailNumSessions.setStatus('current')
crasEmailCumulateSessions = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 392, 1, 3, 24), Counter32()).setUnits('Sessions').setMaxAccess("readonly")
if mibBuilder.loadTexts: crasEmailCumulateSessions.setStatus('current')
crasEmailPeakConcurrentSessions = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 392, 1, 3, 25), Unsigned32()).setUnits('Sessions').setMaxAccess("readonly")
if mibBuilder.loadTexts: crasEmailPeakConcurrentSessions.setStatus('current')
crasIPSecNumSessions = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 392, 1, 3, 26), Gauge32()).setUnits('Sessions').setMaxAccess("readonly")
if mibBuilder.loadTexts: crasIPSecNumSessions.setStatus('current')
crasIPSecCumulateSessions = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 392, 1, 3, 27), Counter32()).setUnits('Sessions').setMaxAccess("readonly")
if mibBuilder.loadTexts: crasIPSecCumulateSessions.setStatus('current')
crasIPSecPeakConcurrentSessions = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 392, 1, 3, 28), Unsigned32()).setUnits('Sessions').setMaxAccess("readonly")
if mibBuilder.loadTexts: crasIPSecPeakConcurrentSessions.setStatus('current')
crasL2LNumSessions = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 392, 1, 3, 29), Gauge32()).setUnits('Sessions').setMaxAccess("readonly")
if mibBuilder.loadTexts: crasL2LNumSessions.setStatus('current')
crasL2LCumulateSessions = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 392, 1, 3, 30), Counter32()).setUnits('Sessions').setMaxAccess("readonly")
if mibBuilder.loadTexts: crasL2LCumulateSessions.setStatus('current')
crasL2LPeakConcurrentSessions = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 392, 1, 3, 31), Unsigned32()).setUnits('Sessions').setMaxAccess("readonly")
if mibBuilder.loadTexts: crasL2LPeakConcurrentSessions.setStatus('current')
crasLBNumSessions = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 392, 1, 3, 32), Gauge32()).setUnits('Sessions').setMaxAccess("readonly")
if mibBuilder.loadTexts: crasLBNumSessions.setStatus('current')
crasLBCumulateSessions = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 392, 1, 3, 33), Counter32()).setUnits('Sessions').setMaxAccess("readonly")
if mibBuilder.loadTexts: crasLBCumulateSessions.setStatus('current')
crasLBPeakConcurrentSessions = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 392, 1, 3, 34), Unsigned32()).setUnits('Sessions').setMaxAccess("readonly")
if mibBuilder.loadTexts: crasLBPeakConcurrentSessions.setStatus('current')
crasSVCNumSessions = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 392, 1, 3, 35), Gauge32()).setUnits('Sessions').setMaxAccess("readonly")
if mibBuilder.loadTexts: crasSVCNumSessions.setStatus('current')
crasSVCCumulateSessions = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 392, 1, 3, 36), Counter32()).setUnits('Sessions').setMaxAccess("readonly")
if mibBuilder.loadTexts: crasSVCCumulateSessions.setStatus('current')
crasSVCPeakConcurrentSessions = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 392, 1, 3, 37), Unsigned32()).setUnits('Sessions').setMaxAccess("readonly")
if mibBuilder.loadTexts: crasSVCPeakConcurrentSessions.setStatus('current')
crasWebvpnNumSessions = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 392, 1, 3, 38), Gauge32()).setUnits('Sessions').setMaxAccess("readonly")
if mibBuilder.loadTexts: crasWebvpnNumSessions.setStatus('current')
crasWebvpnCumulateSessions = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 392, 1, 3, 39), Counter32()).setUnits('Sessions').setMaxAccess("readonly")
if mibBuilder.loadTexts: crasWebvpnCumulateSessions.setStatus('current')
crasWebvpnPeakConcurrentSessions = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 392, 1, 3, 40), Unsigned32()).setUnits('Sessions').setMaxAccess("readonly")
if mibBuilder.loadTexts: crasWebvpnPeakConcurrentSessions.setStatus('current')
crasFailuresGlobals = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 392, 1, 4, 1))
crasNumTotalFailures = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 392, 1, 4, 1, 1), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: crasNumTotalFailures.setStatus('current')
crasNumDeclinedSessions = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 392, 1, 4, 1, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setUnits('Sessions').setMaxAccess("readonly")
if mibBuilder.loadTexts: crasNumDeclinedSessions.setStatus('current')
crasNumSetupFailInsufResources = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 392, 1, 4, 1, 3), Counter64()).setUnits('Sessions').setMaxAccess("readonly")
if mibBuilder.loadTexts: crasNumSetupFailInsufResources.setStatus('current')
crasNumAbortedSessions = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 392, 1, 4, 1, 4), Counter64()).setUnits('Sessions').setMaxAccess("readonly")
if mibBuilder.loadTexts: crasNumAbortedSessions.setStatus('current')
crasFailGlobalCntl = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 392, 1, 4, 2))
crasFailTableSize = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 392, 1, 4, 2, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: crasFailTableSize.setStatus('current')
crasSessFailures = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 392, 1, 4, 3))
crasSessFailTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 392, 1, 4, 3, 1), )
if mibBuilder.loadTexts: crasSessFailTable.setStatus('current')
crasSessFailEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 392, 1, 4, 3, 1, 1), ).setIndexNames((0, "CISCO-REMOTE-ACCESS-MONITOR-MIB", "crasSessFailIndex"))
if mibBuilder.loadTexts: crasSessFailEntry.setStatus('current')
crasSessFailIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 392, 1, 4, 3, 1, 1, 1), FailureRecordIndex())
if mibBuilder.loadTexts: crasSessFailIndex.setStatus('current')
crasSessFailUsername = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 392, 1, 4, 3, 1, 1, 2), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: crasSessFailUsername.setStatus('current')
crasSessFailGroupname = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 392, 1, 4, 3, 1, 1, 3), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: crasSessFailGroupname.setStatus('current')
crasSessFailType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 392, 1, 4, 3, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("setupFailure", 1), ("operationalFailure", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: crasSessFailType.setStatus('current')
crasSessFailReason = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 392, 1, 4, 3, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("other", 1), ("internalError", 2), ("authenticationFailure", 3), ("authorizationFailure", 4), ("sysCapExceeded", 5), ("peerAbortRequest", 6), ("peerLost", 7), ("operRequest", 8)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: crasSessFailReason.setStatus('current')
crasSessFailTime = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 392, 1, 4, 3, 1, 1, 6), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: crasSessFailTime.setStatus('current')
crasSessFailSessionIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 392, 1, 4, 3, 1, 1, 7), SessionIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: crasSessFailSessionIndex.setStatus('current')
crasSessFailISPAddrType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 392, 1, 4, 3, 1, 1, 8), InetAddressType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: crasSessFailISPAddrType.setStatus('current')
crasSessFailISPAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 392, 1, 4, 3, 1, 1, 9), InetAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: crasSessFailISPAddr.setStatus('current')
crasSessFailLocalAddrType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 392, 1, 4, 3, 1, 1, 10), InetAddressType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: crasSessFailLocalAddrType.setStatus('current')
crasSessFailLocalAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 392, 1, 4, 3, 1, 1, 11), InetAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: crasSessFailLocalAddr.setStatus('current')
crasFailLastFailIndex = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 392, 1, 4, 3, 2), FailureRecordIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: crasFailLastFailIndex.setStatus('current')
crasGroupFailures = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 392, 1, 4, 4))
crasGrpFailTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 392, 1, 4, 4, 1), )
if mibBuilder.loadTexts: crasGrpFailTable.setStatus('current')
crasGrpFailEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 392, 1, 4, 4, 1, 1), ).setIndexNames((0, "CISCO-REMOTE-ACCESS-MONITOR-MIB", "crasGrpFailGroupname"))
if mibBuilder.loadTexts: crasGrpFailEntry.setStatus('current')
crasGrpFailGroupname = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 392, 1, 4, 4, 1, 1, 1), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 64)))
if mibBuilder.loadTexts: crasGrpFailGroupname.setStatus('current')
crasGrpFailNumFailAuths = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 392, 1, 4, 4, 1, 1, 2), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: crasGrpFailNumFailAuths.setStatus('current')
crasGrpFailNumResourceFailures = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 392, 1, 4, 4, 1, 1, 3), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: crasGrpFailNumResourceFailures.setStatus('current')
crasGrpFailNumDeclined = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 392, 1, 4, 4, 1, 1, 4), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: crasGrpFailNumDeclined.setStatus('current')
crasGrpFailNumTerminatedMgmt = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 392, 1, 4, 4, 1, 1, 5), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: crasGrpFailNumTerminatedMgmt.setStatus('current')
crasGrpFailNumTerminatedOther = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 392, 1, 4, 4, 1, 1, 6), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: crasGrpFailNumTerminatedOther.setStatus('current')
crasSecurityGlobals = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 392, 1, 5, 1))
crasNumDisabledAccounts = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 392, 1, 5, 1, 1), Counter64()).setUnits('Users').setMaxAccess("readonly")
if mibBuilder.loadTexts: crasNumDisabledAccounts.setStatus('current')
crasThrMaxSessions = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 392, 1, 6, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setUnits('Sessions').setMaxAccess("readonly")
if mibBuilder.loadTexts: crasThrMaxSessions.setStatus('current')
crasThrMaxFailedAuths = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 392, 1, 6, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295)).clone(4294967295)).setMaxAccess("readonly")
if mibBuilder.loadTexts: crasThrMaxFailedAuths.setStatus('current')
crasThrMaxThroughput = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 392, 1, 6, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setUnits('Octets Per Second').setMaxAccess("readonly")
if mibBuilder.loadTexts: crasThrMaxThroughput.setStatus('current')
crasCntlTooManySessions = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 392, 1, 7, 1), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: crasCntlTooManySessions.setStatus('current')
crasCntlTooManyFailedAuths = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 392, 1, 7, 2), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: crasCntlTooManyFailedAuths.setStatus('current')
crasCntlTooHighThroughput = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 392, 1, 7, 3), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: crasCntlTooHighThroughput.setStatus('current')
ciscoRasTooManySessions = NotificationType((1, 3, 6, 1, 4, 1, 9, 9, 392, 0, 1)).setObjects(("CISCO-REMOTE-ACCESS-MONITOR-MIB", "crasNumSessions"), ("CISCO-REMOTE-ACCESS-MONITOR-MIB", "crasNumUsers"), ("CISCO-REMOTE-ACCESS-MONITOR-MIB", "crasMaxSessionsSupportable"), ("CISCO-REMOTE-ACCESS-MONITOR-MIB", "crasMaxUsersSupportable"), ("CISCO-REMOTE-ACCESS-MONITOR-MIB", "crasThrMaxSessions"))
if mibBuilder.loadTexts: ciscoRasTooManySessions.setStatus('current')
ciscoRasTooManyFailedAuths = NotificationType((1, 3, 6, 1, 4, 1, 9, 9, 392, 0, 2)).setObjects(("CISCO-REMOTE-ACCESS-MONITOR-MIB", "crasNumDeclinedSessions"), ("CISCO-REMOTE-ACCESS-MONITOR-MIB", "crasThrMaxFailedAuths"))
if mibBuilder.loadTexts: ciscoRasTooManyFailedAuths.setStatus('current')
ciscoRasTooHighThroughput = NotificationType((1, 3, 6, 1, 4, 1, 9, 9, 392, 0, 3)).setObjects(("CISCO-REMOTE-ACCESS-MONITOR-MIB", "crasGlobalInOctets"), ("CISCO-REMOTE-ACCESS-MONITOR-MIB", "crasGlobalOutOctets"), ("CISCO-REMOTE-ACCESS-MONITOR-MIB", "crasThrMaxThroughput"))
if mibBuilder.loadTexts: ciscoRasTooHighThroughput.setStatus('current')
ciscoRasMonitorMIBCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 392, 2, 1))
ciscoRasMonitorMIBGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 392, 2, 2))
ciscoRasMonitorMIBCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 9, 9, 392, 2, 1, 1)).setObjects(("CISCO-REMOTE-ACCESS-MONITOR-MIB", "ciscoRasCapacityGroup"), ("CISCO-REMOTE-ACCESS-MONITOR-MIB", "ciscoRasResourceUsageGroup"), ("CISCO-REMOTE-ACCESS-MONITOR-MIB", "ciscoRasActivityGroup"), ("CISCO-REMOTE-ACCESS-MONITOR-MIB", "ciscoRasMandatoryFailureGroup"), ("CISCO-REMOTE-ACCESS-MONITOR-MIB", "ciscoRasGrpActivityGroup"), ("CISCO-REMOTE-ACCESS-MONITOR-MIB", "ciscoRasOptionalFailureGroup"), ("CISCO-REMOTE-ACCESS-MONITOR-MIB", "ciscoRasSecurityGroup"), ("CISCO-REMOTE-ACCESS-MONITOR-MIB", "ciscoRasThresholdsGroup"), ("CISCO-REMOTE-ACCESS-MONITOR-MIB", "ciscoRasNotificationsGroup"), ("CISCO-REMOTE-ACCESS-MONITOR-MIB", "ciscoRasNotificationCntlGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoRasMonitorMIBCompliance = ciscoRasMonitorMIBCompliance.setStatus('deprecated')
ciscoRasMonitorMIBComplianceRev1 = ModuleCompliance((1, 3, 6, 1, 4, 1, 9, 9, 392, 2, 1, 2)).setObjects(("CISCO-REMOTE-ACCESS-MONITOR-MIB", "ciscoRasCapacityGroup"), ("CISCO-REMOTE-ACCESS-MONITOR-MIB", "ciscoRasResourceUsageGroup"), ("CISCO-REMOTE-ACCESS-MONITOR-MIB", "ciscoRasActivityGroup"), ("CISCO-REMOTE-ACCESS-MONITOR-MIB", "ciscoRasActivityGroupRev1"), ("CISCO-REMOTE-ACCESS-MONITOR-MIB", "ciscoRasMandatoryFailureGroup"), ("CISCO-REMOTE-ACCESS-MONITOR-MIB", "ciscoRasGrpActivityGroup"), ("CISCO-REMOTE-ACCESS-MONITOR-MIB", "ciscoRasOptionalFailureGroup"), ("CISCO-REMOTE-ACCESS-MONITOR-MIB", "ciscoRasSecurityGroup"), ("CISCO-REMOTE-ACCESS-MONITOR-MIB", "ciscoRasThresholdsGroup"), ("CISCO-REMOTE-ACCESS-MONITOR-MIB", "ciscoRasNotificationsGroup"), ("CISCO-REMOTE-ACCESS-MONITOR-MIB", "ciscoRasNotificationCntlGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoRasMonitorMIBComplianceRev1 = ciscoRasMonitorMIBComplianceRev1.setStatus('current')
ciscoRasCapacityGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 392, 2, 2, 1)).setObjects(("CISCO-REMOTE-ACCESS-MONITOR-MIB", "crasMaxSessionsSupportable"), ("CISCO-REMOTE-ACCESS-MONITOR-MIB", "crasMaxUsersSupportable"), ("CISCO-REMOTE-ACCESS-MONITOR-MIB", "crasMaxGroupsSupportable"), ("CISCO-REMOTE-ACCESS-MONITOR-MIB", "crasNumCryptoAccelerators"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoRasCapacityGroup = ciscoRasCapacityGroup.setStatus('current')
ciscoRasResourceUsageGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 392, 2, 2, 2)).setObjects(("CISCO-REMOTE-ACCESS-MONITOR-MIB", "crasGlobalBwUsage"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoRasResourceUsageGroup = ciscoRasResourceUsageGroup.setStatus('current')
ciscoRasActivityGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 392, 2, 2, 3)).setObjects(("CISCO-REMOTE-ACCESS-MONITOR-MIB", "crasNumSessions"), ("CISCO-REMOTE-ACCESS-MONITOR-MIB", "crasNumPrevSessions"), ("CISCO-REMOTE-ACCESS-MONITOR-MIB", "crasNumUsers"), ("CISCO-REMOTE-ACCESS-MONITOR-MIB", "crasGlobalInPkts"), ("CISCO-REMOTE-ACCESS-MONITOR-MIB", "crasGlobalOutPkts"), ("CISCO-REMOTE-ACCESS-MONITOR-MIB", "crasGlobalInOctets"), ("CISCO-REMOTE-ACCESS-MONITOR-MIB", "crasGlobalOutOctets"), ("CISCO-REMOTE-ACCESS-MONITOR-MIB", "crasGlobalInDecompOctets"), ("CISCO-REMOTE-ACCESS-MONITOR-MIB", "crasGlobalOutUncompOctets"), ("CISCO-REMOTE-ACCESS-MONITOR-MIB", "crasGlobalInDropPkts"), ("CISCO-REMOTE-ACCESS-MONITOR-MIB", "crasGlobalOutDropPkts"), ("CISCO-REMOTE-ACCESS-MONITOR-MIB", "crasGroup"), ("CISCO-REMOTE-ACCESS-MONITOR-MIB", "crasAuthenMethod"), ("CISCO-REMOTE-ACCESS-MONITOR-MIB", "crasAuthorMethod"), ("CISCO-REMOTE-ACCESS-MONITOR-MIB", "crasSessionDuration"), ("CISCO-REMOTE-ACCESS-MONITOR-MIB", "crasLocalAddressType"), ("CISCO-REMOTE-ACCESS-MONITOR-MIB", "crasLocalAddress"), ("CISCO-REMOTE-ACCESS-MONITOR-MIB", "crasISPAddressType"), ("CISCO-REMOTE-ACCESS-MONITOR-MIB", "crasISPAddress"), ("CISCO-REMOTE-ACCESS-MONITOR-MIB", "crasSessionProtocol"), ("CISCO-REMOTE-ACCESS-MONITOR-MIB", "crasProtocolElement"), ("CISCO-REMOTE-ACCESS-MONITOR-MIB", "crasSessionEncryptionAlgo"), ("CISCO-REMOTE-ACCESS-MONITOR-MIB", "crasSessionPktAuthenAlgo"), ("CISCO-REMOTE-ACCESS-MONITOR-MIB", "crasSessionCompressionAlgo"), ("CISCO-REMOTE-ACCESS-MONITOR-MIB", "crasHeartbeatInterval"), ("CISCO-REMOTE-ACCESS-MONITOR-MIB", "crasClientVendorString"), ("CISCO-REMOTE-ACCESS-MONITOR-MIB", "crasClientVersionString"), ("CISCO-REMOTE-ACCESS-MONITOR-MIB", "crasClientOSVendorString"), ("CISCO-REMOTE-ACCESS-MONITOR-MIB", "crasClientOSVersionString"), ("CISCO-REMOTE-ACCESS-MONITOR-MIB", "crasPrimWINSServerAddrType"), ("CISCO-REMOTE-ACCESS-MONITOR-MIB", "crasPrimWINSServer"), ("CISCO-REMOTE-ACCESS-MONITOR-MIB", "crasSecWINSServerAddrType"), ("CISCO-REMOTE-ACCESS-MONITOR-MIB", "crasSecWINSServer"), ("CISCO-REMOTE-ACCESS-MONITOR-MIB", "crasPrimDNSServerAddrType"), ("CISCO-REMOTE-ACCESS-MONITOR-MIB", "crasPrimDNSServer"), ("CISCO-REMOTE-ACCESS-MONITOR-MIB", "crasSecDNSServerAddrType"), ("CISCO-REMOTE-ACCESS-MONITOR-MIB", "crasSecDNSServer"), ("CISCO-REMOTE-ACCESS-MONITOR-MIB", "crasDHCPServerAddrType"), ("CISCO-REMOTE-ACCESS-MONITOR-MIB", "crasDHCPServer"), ("CISCO-REMOTE-ACCESS-MONITOR-MIB", "crasSessionInPkts"), ("CISCO-REMOTE-ACCESS-MONITOR-MIB", "crasSessionOutPkts"), ("CISCO-REMOTE-ACCESS-MONITOR-MIB", "crasSessionInDropPkts"), ("CISCO-REMOTE-ACCESS-MONITOR-MIB", "crasSessionOutDropPkts"), ("CISCO-REMOTE-ACCESS-MONITOR-MIB", "crasSessionInOctets"), ("CISCO-REMOTE-ACCESS-MONITOR-MIB", "crasSessionOutOctets"), ("CISCO-REMOTE-ACCESS-MONITOR-MIB", "crasSessionState"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoRasActivityGroup = ciscoRasActivityGroup.setStatus('current')
ciscoRasGrpActivityGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 392, 2, 2, 4)).setObjects(("CISCO-REMOTE-ACCESS-MONITOR-MIB", "crasNumGroups"), ("CISCO-REMOTE-ACCESS-MONITOR-MIB", "crasActGrNumUsers"), ("CISCO-REMOTE-ACCESS-MONITOR-MIB", "crasActGrpInPkts"), ("CISCO-REMOTE-ACCESS-MONITOR-MIB", "crasActGrpOutPkts"), ("CISCO-REMOTE-ACCESS-MONITOR-MIB", "crasActGrpInDropPkts"), ("CISCO-REMOTE-ACCESS-MONITOR-MIB", "crasActGrpOutDropPkts"), ("CISCO-REMOTE-ACCESS-MONITOR-MIB", "crasActGrpInOctets"), ("CISCO-REMOTE-ACCESS-MONITOR-MIB", "crasActGrpOutOctets"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoRasGrpActivityGroup = ciscoRasGrpActivityGroup.setStatus('current')
ciscoRasMandatoryFailureGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 392, 2, 2, 5)).setObjects(("CISCO-REMOTE-ACCESS-MONITOR-MIB", "crasNumTotalFailures"), ("CISCO-REMOTE-ACCESS-MONITOR-MIB", "crasNumDeclinedSessions"), ("CISCO-REMOTE-ACCESS-MONITOR-MIB", "crasNumAbortedSessions"), ("CISCO-REMOTE-ACCESS-MONITOR-MIB", "crasFailTableSize"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoRasMandatoryFailureGroup = ciscoRasMandatoryFailureGroup.setStatus('current')
ciscoRasOptionalFailureGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 392, 2, 2, 6)).setObjects(("CISCO-REMOTE-ACCESS-MONITOR-MIB", "crasNumSetupFailInsufResources"), ("CISCO-REMOTE-ACCESS-MONITOR-MIB", "crasSessFailUsername"), ("CISCO-REMOTE-ACCESS-MONITOR-MIB", "crasSessFailGroupname"), ("CISCO-REMOTE-ACCESS-MONITOR-MIB", "crasSessFailType"), ("CISCO-REMOTE-ACCESS-MONITOR-MIB", "crasSessFailReason"), ("CISCO-REMOTE-ACCESS-MONITOR-MIB", "crasSessFailTime"), ("CISCO-REMOTE-ACCESS-MONITOR-MIB", "crasSessFailSessionIndex"), ("CISCO-REMOTE-ACCESS-MONITOR-MIB", "crasSessFailISPAddr"), ("CISCO-REMOTE-ACCESS-MONITOR-MIB", "crasSessFailLocalAddr"), ("CISCO-REMOTE-ACCESS-MONITOR-MIB", "crasSessFailISPAddrType"), ("CISCO-REMOTE-ACCESS-MONITOR-MIB", "crasSessFailLocalAddrType"), ("CISCO-REMOTE-ACCESS-MONITOR-MIB", "crasFailLastFailIndex"), ("CISCO-REMOTE-ACCESS-MONITOR-MIB", "crasGrpFailNumFailAuths"), ("CISCO-REMOTE-ACCESS-MONITOR-MIB", "crasGrpFailNumResourceFailures"), ("CISCO-REMOTE-ACCESS-MONITOR-MIB", "crasGrpFailNumDeclined"), ("CISCO-REMOTE-ACCESS-MONITOR-MIB", "crasGrpFailNumTerminatedMgmt"), ("CISCO-REMOTE-ACCESS-MONITOR-MIB", "crasGrpFailNumTerminatedOther"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoRasOptionalFailureGroup = ciscoRasOptionalFailureGroup.setStatus('current')
ciscoRasSecurityGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 392, 2, 2, 7)).setObjects(("CISCO-REMOTE-ACCESS-MONITOR-MIB", "crasNumDisabledAccounts"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoRasSecurityGroup = ciscoRasSecurityGroup.setStatus('current')
ciscoRasThresholdsGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 392, 2, 2, 8)).setObjects(("CISCO-REMOTE-ACCESS-MONITOR-MIB", "crasThrMaxSessions"), ("CISCO-REMOTE-ACCESS-MONITOR-MIB", "crasThrMaxFailedAuths"), ("CISCO-REMOTE-ACCESS-MONITOR-MIB", "crasThrMaxThroughput"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoRasThresholdsGroup = ciscoRasThresholdsGroup.setStatus('current')
ciscoRasNotificationCntlGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 392, 2, 2, 9)).setObjects(("CISCO-REMOTE-ACCESS-MONITOR-MIB", "crasCntlTooManySessions"), ("CISCO-REMOTE-ACCESS-MONITOR-MIB", "crasCntlTooManyFailedAuths"), ("CISCO-REMOTE-ACCESS-MONITOR-MIB", "crasCntlTooHighThroughput"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoRasNotificationCntlGroup = ciscoRasNotificationCntlGroup.setStatus('current')
ciscoRasNotificationsGroup = NotificationGroup((1, 3, 6, 1, 4, 1, 9, 9, 392, 2, 2, 10)).setObjects(("CISCO-REMOTE-ACCESS-MONITOR-MIB", "ciscoRasTooHighThroughput"), ("CISCO-REMOTE-ACCESS-MONITOR-MIB", "ciscoRasTooManyFailedAuths"), ("CISCO-REMOTE-ACCESS-MONITOR-MIB", "ciscoRasTooManySessions"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoRasNotificationsGroup = ciscoRasNotificationsGroup.setStatus('current')
ciscoRasActivityGroupRev1 = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 392, 2, 2, 11)).setObjects(("CISCO-REMOTE-ACCESS-MONITOR-MIB", "crasEmailNumSessions"), ("CISCO-REMOTE-ACCESS-MONITOR-MIB", "crasEmailCumulateSessions"), ("CISCO-REMOTE-ACCESS-MONITOR-MIB", "crasEmailPeakConcurrentSessions"), ("CISCO-REMOTE-ACCESS-MONITOR-MIB", "crasIPSecNumSessions"), ("CISCO-REMOTE-ACCESS-MONITOR-MIB", "crasIPSecCumulateSessions"), ("CISCO-REMOTE-ACCESS-MONITOR-MIB", "crasIPSecPeakConcurrentSessions"), ("CISCO-REMOTE-ACCESS-MONITOR-MIB", "crasL2LNumSessions"), ("CISCO-REMOTE-ACCESS-MONITOR-MIB", "crasL2LCumulateSessions"), ("CISCO-REMOTE-ACCESS-MONITOR-MIB", "crasL2LPeakConcurrentSessions"), ("CISCO-REMOTE-ACCESS-MONITOR-MIB", "crasLBNumSessions"), ("CISCO-REMOTE-ACCESS-MONITOR-MIB", "crasLBCumulateSessions"), ("CISCO-REMOTE-ACCESS-MONITOR-MIB", "crasLBPeakConcurrentSessions"), ("CISCO-REMOTE-ACCESS-MONITOR-MIB", "crasSVCNumSessions"), ("CISCO-REMOTE-ACCESS-MONITOR-MIB", "crasSVCCumulateSessions"), ("CISCO-REMOTE-ACCESS-MONITOR-MIB", "crasSVCPeakConcurrentSessions"), ("CISCO-REMOTE-ACCESS-MONITOR-MIB", "crasWebvpnNumSessions"), ("CISCO-REMOTE-ACCESS-MONITOR-MIB", "crasWebvpnCumulateSessions"), ("CISCO-REMOTE-ACCESS-MONITOR-MIB", "crasWebvpnPeakConcurrentSessions"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoRasActivityGroupRev1 = ciscoRasActivityGroupRev1.setStatus('current')
mibBuilder.exportSymbols("CISCO-REMOTE-ACCESS-MONITOR-MIB", ciscoRasActivityGroupRev1=ciscoRasActivityGroupRev1, crasGlobalInPkts=crasGlobalInPkts, ciscoRasOptionalFailureGroup=ciscoRasOptionalFailureGroup, crasWebvpnCumulateSessions=crasWebvpnCumulateSessions, crasNumPrevSessions=crasNumPrevSessions, crasGlobalOutDropPkts=crasGlobalOutDropPkts, crasPrimWINSServer=crasPrimWINSServer, crasNumDisabledAccounts=crasNumDisabledAccounts, ciscoRasResourceUsageGroup=ciscoRasResourceUsageGroup, crasClientVersionString=crasClientVersionString, crasIPSecNumSessions=crasIPSecNumSessions, crasFailGlobalCntl=crasFailGlobalCntl, crasGlobalInDecompOctets=crasGlobalInDecompOctets, crasIPSecCumulateSessions=crasIPSecCumulateSessions, crasThrMaxFailedAuths=crasThrMaxFailedAuths, crasSessFailISPAddrType=crasSessFailISPAddrType, crasHeartbeatInterval=crasHeartbeatInterval, crasSessFailures=crasSessFailures, ciscoRasTooHighThroughput=ciscoRasTooHighThroughput, crasSecurityGlobals=crasSecurityGlobals, crasSessionDuration=crasSessionDuration, RasProtocol=RasProtocol, SessionEncrAlgo=SessionEncrAlgo, crasGrpFailNumTerminatedOther=crasGrpFailNumTerminatedOther, crasSecurity=crasSecurity, crasGrpFailNumDeclined=crasGrpFailNumDeclined, crasLocalAddress=crasLocalAddress, crasSecDNSServer=crasSecDNSServer, crasPrimDNSServerAddrType=crasPrimDNSServerAddrType, crasLBPeakConcurrentSessions=crasLBPeakConcurrentSessions, crasLBCumulateSessions=crasLBCumulateSessions, crasGroupFailures=crasGroupFailures, crasFailures=crasFailures, crasGroup=crasGroup, crasMaxUsersSupportable=crasMaxUsersSupportable, crasSecWINSServerAddrType=crasSecWINSServerAddrType, crasDHCPServerAddrType=crasDHCPServerAddrType, crasPrimWINSServerAddrType=crasPrimWINSServerAddrType, crasNotifCntl=crasNotifCntl, crasSessionCompressionAlgo=crasSessionCompressionAlgo, ciscoRasMonitorMIBCompliances=ciscoRasMonitorMIBCompliances, crasGlobalInDropPkts=crasGlobalInDropPkts, crasGrpFailEntry=crasGrpFailEntry, ciscoRemoteAccessMonitorMIB=ciscoRemoteAccessMonitorMIB, crasThrMaxSessions=crasThrMaxSessions, crasNumUsers=crasNumUsers, crasGrpFailTable=crasGrpFailTable, crasActGrpOutOctets=crasActGrpOutOctets, crasNumTotalFailures=crasNumTotalFailures, crasActGrNumUsers=crasActGrNumUsers, crasGrpFailGroupname=crasGrpFailGroupname, ciscoRasTooManyFailedAuths=ciscoRasTooManyFailedAuths, crasGrpFailNumResourceFailures=crasGrpFailNumResourceFailures, crasSessionIndex=crasSessionIndex, crasISPAddress=crasISPAddress, crasClientOSVersionString=crasClientOSVersionString, crasSessionOutDropPkts=crasSessionOutDropPkts, crasSessFailReason=crasSessFailReason, SessionIndex=SessionIndex, crasNumSessions=crasNumSessions, crasGlobalBwUsage=crasGlobalBwUsage, crasIPSecPeakConcurrentSessions=crasIPSecPeakConcurrentSessions, crasNumDeclinedSessions=crasNumDeclinedSessions, SessionCompressionAlgo=SessionCompressionAlgo, ciscoRasMonitorMIBObjects=ciscoRasMonitorMIBObjects, crasSVCPeakConcurrentSessions=crasSVCPeakConcurrentSessions, crasCntlTooManyFailedAuths=crasCntlTooManyFailedAuths, SessionStatus=SessionStatus, crasActivity=crasActivity, PYSNMP_MODULE_ID=ciscoRemoteAccessMonitorMIB, crasGlobalOutOctets=crasGlobalOutOctets, crasSessFailLocalAddrType=crasSessFailLocalAddrType, ciscoRasMandatoryFailureGroup=ciscoRasMandatoryFailureGroup, crasUsername=crasUsername, ciscoRasCapacityGroup=ciscoRasCapacityGroup, crasSessionProtocol=crasSessionProtocol, crasSessionEntry=crasSessionEntry, ciscoRasMonitorMIBNotifs=ciscoRasMonitorMIBNotifs, ciscoRasTooManySessions=ciscoRasTooManySessions, ciscoRasThresholdsGroup=ciscoRasThresholdsGroup, crasClientVendorString=crasClientVendorString, crasSessFailEntry=crasSessFailEntry, crasGrpFailNumFailAuths=crasGrpFailNumFailAuths, crasProtocolElement=crasProtocolElement, crasSessionInDropPkts=crasSessionInDropPkts, crasResourceUsage=crasResourceUsage, crasDHCPServer=crasDHCPServer, crasSessionInPkts=crasSessionInPkts, crasActGrpName=crasActGrpName, crasActGrpInOctets=crasActGrpInOctets, crasL2LNumSessions=crasL2LNumSessions, crasSessionPktAuthenAlgo=crasSessionPktAuthenAlgo, crasMaxSessionsSupportable=crasMaxSessionsSupportable, crasActGrpOutPkts=crasActGrpOutPkts, crasSecWINSServer=crasSecWINSServer, crasCntlTooManySessions=crasCntlTooManySessions, crasNumGroups=crasNumGroups, crasSessFailLocalAddr=crasSessFailLocalAddr, crasSessionOutPkts=crasSessionOutPkts, crasThrMaxThroughput=crasThrMaxThroughput, crasSessFailTable=crasSessFailTable, crasEmailNumSessions=crasEmailNumSessions, crasClientOSVendorString=crasClientOSVendorString, crasEmailPeakConcurrentSessions=crasEmailPeakConcurrentSessions, ciscoRasGrpActivityGroup=ciscoRasGrpActivityGroup, ciscoRasMonitorMIBConform=ciscoRasMonitorMIBConform, crasSVCCumulateSessions=crasSVCCumulateSessions, ciscoRasMonitorMIBGroups=ciscoRasMonitorMIBGroups, SessionAuthAlgo=SessionAuthAlgo, crasPrimDNSServer=crasPrimDNSServer, ciscoRasNotificationsGroup=ciscoRasNotificationsGroup, crasSecDNSServerAddrType=crasSecDNSServerAddrType, ciscoRasActivityGroup=ciscoRasActivityGroup, ciscoRasMonitorMIBComplianceRev1=ciscoRasMonitorMIBComplianceRev1, crasMaxGroupsSupportable=crasMaxGroupsSupportable, ciscoRasSecurityGroup=ciscoRasSecurityGroup, crasNumCryptoAccelerators=crasNumCryptoAccelerators, FailureRecordIndex=FailureRecordIndex, crasWebvpnPeakConcurrentSessions=crasWebvpnPeakConcurrentSessions, crasLBNumSessions=crasLBNumSessions, crasGrpFailNumTerminatedMgmt=crasGrpFailNumTerminatedMgmt, crasSessFailUsername=crasSessFailUsername, crasSessionState=crasSessionState, crasSessFailSessionIndex=crasSessFailSessionIndex, crasThresholds=crasThresholds, crasAuthenMethod=crasAuthenMethod, ciscoRasMonitorMIBCompliance=ciscoRasMonitorMIBCompliance, ciscoRasNotificationCntlGroup=ciscoRasNotificationCntlGroup, crasEmailCumulateSessions=crasEmailCumulateSessions, crasActGrpInPkts=crasActGrpInPkts, crasSVCNumSessions=crasSVCNumSessions, crasNumAbortedSessions=crasNumAbortedSessions, crasSessFailIndex=crasSessFailIndex, crasFailuresGlobals=crasFailuresGlobals, crasAuthorMethod=crasAuthorMethod, crasNumSetupFailInsufResources=crasNumSetupFailInsufResources, UserAuthorMethod=UserAuthorMethod, crasActGrpInDropPkts=crasActGrpInDropPkts, crasActGroupEntry=crasActGroupEntry, crasL2LPeakConcurrentSessions=crasL2LPeakConcurrentSessions, crasSessionInOctets=crasSessionInOctets, crasSessFailISPAddr=crasSessFailISPAddr, crasGlobalOutUncompOctets=crasGlobalOutUncompOctets, crasISPAddressType=crasISPAddressType, crasCntlTooHighThroughput=crasCntlTooHighThroughput, crasLocalAddressType=crasLocalAddressType, crasSessFailTime=crasSessFailTime, crasWebvpnNumSessions=crasWebvpnNumSessions, UserAuthenMethod=UserAuthenMethod, crasFailLastFailIndex=crasFailLastFailIndex, crasFailTableSize=crasFailTableSize, crasSessionTable=crasSessionTable, crasActGrpOutDropPkts=crasActGrpOutDropPkts, crasActGroupTable=crasActGroupTable, crasL2LCumulateSessions=crasL2LCumulateSessions, crasSessionOutOctets=crasSessionOutOctets, crasCapacity=crasCapacity, crasGlobalInOctets=crasGlobalInOctets, crasGlobalOutPkts=crasGlobalOutPkts, crasSessFailGroupname=crasSessFailGroupname, crasSessionEncryptionAlgo=crasSessionEncryptionAlgo, crasSessFailType=crasSessFailType)
