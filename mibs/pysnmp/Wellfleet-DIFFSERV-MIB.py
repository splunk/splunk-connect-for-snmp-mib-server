#
# PySNMP MIB module Wellfleet-DIFFSERV-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/Wellfleet-DIFFSERV-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 21:33:07 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, ObjectIdentifier, OctetString = mibBuilder.importSymbols("ASN1", "Integer", "ObjectIdentifier", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueRangeConstraint, ConstraintsUnion, ValueSizeConstraint, ConstraintsIntersection, SingleValueConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueRangeConstraint", "ConstraintsUnion", "ValueSizeConstraint", "ConstraintsIntersection", "SingleValueConstraint")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
IpAddress, Counter64, Integer32, Unsigned32, TimeTicks, NotificationType, ObjectIdentity, Bits, MibScalar, MibTable, MibTableRow, MibTableColumn, Counter32, iso, ModuleIdentity, Gauge32, MibIdentifier = mibBuilder.importSymbols("SNMPv2-SMI", "IpAddress", "Counter64", "Integer32", "Unsigned32", "TimeTicks", "NotificationType", "ObjectIdentity", "Bits", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Counter32", "iso", "ModuleIdentity", "Gauge32", "MibIdentifier")
DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention")
wfDiffServAppGroup, = mibBuilder.importSymbols("Wellfleet-COMMON-MIB", "wfDiffServAppGroup")
wfDiffServ = MibIdentifier((1, 3, 6, 1, 4, 1, 18, 3, 5, 26, 1))
wfDiffServCreate = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 26, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("created", 1), ("deleted", 2))).clone('created')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfDiffServCreate.setStatus('mandatory')
wfDiffServEnable = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 26, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('enabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfDiffServEnable.setStatus('mandatory')
wfDiffServDsByteMask = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 26, 1, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfDiffServDsByteMask.setStatus('mandatory')
wfDiffServIntfTable = MibTable((1, 3, 6, 1, 4, 1, 18, 3, 5, 26, 2), )
if mibBuilder.loadTexts: wfDiffServIntfTable.setStatus('mandatory')
wfDiffServIntfEntry = MibTableRow((1, 3, 6, 1, 4, 1, 18, 3, 5, 26, 2, 1), ).setIndexNames((0, "Wellfleet-DIFFSERV-MIB", "wfDiffServIntfIpAddr"), (0, "Wellfleet-DIFFSERV-MIB", "wfDiffServIntfIfIndex"))
if mibBuilder.loadTexts: wfDiffServIntfEntry.setStatus('mandatory')
wfDiffServIntfCreate = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 26, 2, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("created", 1), ("deleted", 2))).clone('created')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfDiffServIntfCreate.setStatus('mandatory')
wfDiffServIntfEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 26, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('enabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfDiffServIntfEnable.setStatus('mandatory')
wfDiffServIntfState = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 26, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("up", 1), ("down", 2), ("notpres", 3))).clone('notpres')).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfDiffServIntfState.setStatus('mandatory')
wfDiffServIntfIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 26, 2, 1, 4), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfDiffServIntfIpAddr.setStatus('mandatory')
wfDiffServIntfIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 26, 2, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfDiffServIntfIfIndex.setStatus('mandatory')
wfDiffServIntfLogMask = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 26, 2, 1, 6), Integer32().clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfDiffServIntfLogMask.setStatus('mandatory')
wfDiffServIntfCfgType = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 26, 2, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("static", 1), ("cops", 2))).clone('static')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfDiffServIntfCfgType.setStatus('mandatory')
wfDiffServIntfUrlIdleOutTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 26, 2, 1, 8), Integer32().clone(120)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfDiffServIntfUrlIdleOutTimer.setStatus('mandatory')
mibBuilder.exportSymbols("Wellfleet-DIFFSERV-MIB", wfDiffServIntfEnable=wfDiffServIntfEnable, wfDiffServIntfIfIndex=wfDiffServIntfIfIndex, wfDiffServIntfState=wfDiffServIntfState, wfDiffServ=wfDiffServ, wfDiffServDsByteMask=wfDiffServDsByteMask, wfDiffServIntfLogMask=wfDiffServIntfLogMask, wfDiffServEnable=wfDiffServEnable, wfDiffServIntfUrlIdleOutTimer=wfDiffServIntfUrlIdleOutTimer, wfDiffServIntfCreate=wfDiffServIntfCreate, wfDiffServIntfCfgType=wfDiffServIntfCfgType, wfDiffServIntfTable=wfDiffServIntfTable, wfDiffServIntfEntry=wfDiffServIntfEntry, wfDiffServCreate=wfDiffServCreate, wfDiffServIntfIpAddr=wfDiffServIntfIpAddr)
