#
# PySNMP MIB module CISCO-LWAPP-CDP-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/CISCO-LWAPP-CDP-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 17:47:52 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, Integer, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "OctetString", "Integer", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsUnion, ValueSizeConstraint, ValueRangeConstraint, SingleValueConstraint, ConstraintsIntersection = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsUnion", "ValueSizeConstraint", "ValueRangeConstraint", "SingleValueConstraint", "ConstraintsIntersection")
cLApSysMacAddress, = mibBuilder.importSymbols("CISCO-LWAPP-AP-MIB", "cLApSysMacAddress")
CLCdpAdvtVersionType, = mibBuilder.importSymbols("CISCO-LWAPP-TC-MIB", "CLCdpAdvtVersionType")
ciscoMgmt, = mibBuilder.importSymbols("CISCO-SMI", "ciscoMgmt")
InterfaceIndexOrZero, = mibBuilder.importSymbols("IF-MIB", "InterfaceIndexOrZero")
InetAddressType, InetAddress = mibBuilder.importSymbols("INET-ADDRESS-MIB", "InetAddressType", "InetAddress")
SnmpAdminString, = mibBuilder.importSymbols("SNMP-FRAMEWORK-MIB", "SnmpAdminString")
NotificationGroup, ModuleCompliance, ObjectGroup = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance", "ObjectGroup")
Gauge32, Bits, Integer32, iso, IpAddress, TimeTicks, MibIdentifier, NotificationType, MibScalar, MibTable, MibTableRow, MibTableColumn, Counter64, Unsigned32, Counter32, ModuleIdentity, ObjectIdentity = mibBuilder.importSymbols("SNMPv2-SMI", "Gauge32", "Bits", "Integer32", "iso", "IpAddress", "TimeTicks", "MibIdentifier", "NotificationType", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Counter64", "Unsigned32", "Counter32", "ModuleIdentity", "ObjectIdentity")
TextualConvention, TruthValue, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "TruthValue", "DisplayString")
ciscoLwappCdpMIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 9, 9, 623))
ciscoLwappCdpMIB.setRevisions(('2009-11-23 00:00', '2007-03-28 00:00',))
if mibBuilder.loadTexts: ciscoLwappCdpMIB.setLastUpdated('200911230000Z')
if mibBuilder.loadTexts: ciscoLwappCdpMIB.setOrganization('Cisco Systems Inc.')
ciscoLwappCdpMIBNotifs = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 623, 0))
ciscoLwappCdpMIBObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 623, 1))
ciscoLwappCdpMIBConform = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 623, 2))
clcCdpTraffic = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 623, 1, 1))
clcCdpGlobalConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 623, 1, 2))
clcCdpApCacheStatus = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 623, 1, 3))
clcCdpApCacheConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 623, 1, 4))
clcCdpInPackets = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 623, 1, 1, 1), Counter32()).setUnits('packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: clcCdpInPackets.setStatus('current')
clcCdpOutPackets = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 623, 1, 1, 2), Counter32()).setUnits('packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: clcCdpOutPackets.setStatus('current')
clcCdpChecksumErrorPackets = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 623, 1, 1, 3), Counter32()).setUnits('packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: clcCdpChecksumErrorPackets.setStatus('current')
clcCdpNoMemoryPackets = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 623, 1, 1, 4), Counter32()).setUnits('packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: clcCdpNoMemoryPackets.setStatus('current')
clcCdpInvalidPackets = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 623, 1, 1, 5), Counter32()).setUnits('packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: clcCdpInvalidPackets.setStatus('current')
clcCdpAdvtVersion = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 623, 1, 2, 1), CLCdpAdvtVersionType().clone('cdpv1')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: clcCdpAdvtVersion.setStatus('current')
clcCdpMessageInterval = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 623, 1, 2, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(5, 900)).clone(60)).setUnits('seconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: clcCdpMessageInterval.setStatus('current')
clcCdpGlobalEnable = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 623, 1, 2, 3), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: clcCdpGlobalEnable.setStatus('current')
clcCdpApTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 623, 1, 4, 1), )
if mibBuilder.loadTexts: clcCdpApTable.setStatus('current')
clcCdpApEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 623, 1, 4, 1, 1), ).setIndexNames((0, "CISCO-LWAPP-AP-MIB", "cLApSysMacAddress"))
if mibBuilder.loadTexts: clcCdpApEntry.setStatus('current')
clcCdpApCdpEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 623, 1, 4, 1, 1, 1), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: clcCdpApCdpEnable.setStatus('current')
clcCdpApCacheTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 623, 1, 3, 1), )
if mibBuilder.loadTexts: clcCdpApCacheTable.setStatus('current')
clcCdpApCacheEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 623, 1, 3, 1, 1), ).setIndexNames((0, "CISCO-LWAPP-AP-MIB", "cLApSysMacAddress"), (0, "CISCO-LWAPP-CDP-MIB", "clcCdpApCacheDeviceIndex"))
if mibBuilder.loadTexts: clcCdpApCacheEntry.setStatus('current')
clcCdpApCacheDeviceIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 623, 1, 3, 1, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647)))
if mibBuilder.loadTexts: clcCdpApCacheDeviceIndex.setStatus('current')
clcCdpApCacheApName = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 623, 1, 3, 1, 1, 2), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: clcCdpApCacheApName.setStatus('current')
clcCdpApCacheApAddressType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 623, 1, 3, 1, 1, 3), InetAddressType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: clcCdpApCacheApAddressType.setStatus('current')
clcCdpApCacheApAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 623, 1, 3, 1, 1, 4), InetAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: clcCdpApCacheApAddress.setStatus('current')
clcCdpApCacheLocalInterface = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 623, 1, 3, 1, 1, 5), InterfaceIndexOrZero()).setMaxAccess("readonly")
if mibBuilder.loadTexts: clcCdpApCacheLocalInterface.setStatus('current')
clcCdpApCacheNeighName = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 623, 1, 3, 1, 1, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: clcCdpApCacheNeighName.setStatus('current')
clcCdpApCacheNeighAddressType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 623, 1, 3, 1, 1, 7), InetAddressType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: clcCdpApCacheNeighAddressType.setStatus('current')
clcCdpApCacheNeighAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 623, 1, 3, 1, 1, 8), InetAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: clcCdpApCacheNeighAddress.setStatus('current')
clcCdpApCacheNeighInterface = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 623, 1, 3, 1, 1, 9), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: clcCdpApCacheNeighInterface.setStatus('current')
clcCdpApCacheNeighVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 623, 1, 3, 1, 1, 10), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: clcCdpApCacheNeighVersion.setStatus('current')
clcCdpApCacheAdvtVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 623, 1, 3, 1, 1, 11), CLCdpAdvtVersionType().clone('cdpv1')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: clcCdpApCacheAdvtVersion.setStatus('current')
clcCdpApCachePlatform = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 623, 1, 3, 1, 1, 12), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: clcCdpApCachePlatform.setStatus('current')
clcCdpApCacheCapabilities = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 623, 1, 3, 1, 1, 13), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: clcCdpApCacheCapabilities.setStatus('current')
clcCdpApCacheHoldtimeLeft = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 623, 1, 3, 1, 1, 14), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(10, 255)).clone(180)).setUnits('seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: clcCdpApCacheHoldtimeLeft.setStatus('current')
clcCdpApCacheDuplex = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 623, 1, 3, 1, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("unknown", 1), ("fullduplex", 2), ("halfduplex", 3), ("auto", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: clcCdpApCacheDuplex.setStatus('current')
clcCdpApCacheInterfaceSpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 623, 1, 3, 1, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("none", 1), ("tenMbps", 2), ("hundredMbps", 3), ("thousandMbps", 4), ("auto", 5)))).setUnits('Mbps').setMaxAccess("readonly")
if mibBuilder.loadTexts: clcCdpApCacheInterfaceSpeed.setStatus('current')
ciscoLwappCdpMIBCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 623, 2, 1))
ciscoLwappCdpMIBGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 623, 2, 2))
ciscoLwappCdpMIBCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 9, 9, 623, 2, 1, 1)).setObjects(("CISCO-LWAPP-CDP-MIB", "clcCdpRev01ConfigGroup"), ("CISCO-LWAPP-CDP-MIB", "clcCdpRev01StatusGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoLwappCdpMIBCompliance = ciscoLwappCdpMIBCompliance.setStatus('deprecated')
ciscoLwappCdpMIBComplianceRev1 = ModuleCompliance((1, 3, 6, 1, 4, 1, 9, 9, 623, 2, 1, 2)).setObjects(("CISCO-LWAPP-CDP-MIB", "clcCdpRev01ConfigGroup"), ("CISCO-LWAPP-CDP-MIB", "clcCdpRev01StatusGroup"), ("CISCO-LWAPP-CDP-MIB", "clcCdpRev02StatusGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoLwappCdpMIBComplianceRev1 = ciscoLwappCdpMIBComplianceRev1.setStatus('current')
clcCdpRev01ConfigGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 623, 2, 2, 1)).setObjects(("CISCO-LWAPP-CDP-MIB", "clcCdpApCdpEnable"), ("CISCO-LWAPP-CDP-MIB", "clcCdpAdvtVersion"), ("CISCO-LWAPP-CDP-MIB", "clcCdpMessageInterval"), ("CISCO-LWAPP-CDP-MIB", "clcCdpGlobalEnable"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    clcCdpRev01ConfigGroup = clcCdpRev01ConfigGroup.setStatus('current')
clcCdpRev01StatusGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 623, 2, 2, 2)).setObjects(("CISCO-LWAPP-CDP-MIB", "clcCdpApCacheApName"), ("CISCO-LWAPP-CDP-MIB", "clcCdpApCacheApAddressType"), ("CISCO-LWAPP-CDP-MIB", "clcCdpApCacheApAddress"), ("CISCO-LWAPP-CDP-MIB", "clcCdpApCacheLocalInterface"), ("CISCO-LWAPP-CDP-MIB", "clcCdpApCacheNeighName"), ("CISCO-LWAPP-CDP-MIB", "clcCdpApCacheNeighAddressType"), ("CISCO-LWAPP-CDP-MIB", "clcCdpApCacheNeighAddress"), ("CISCO-LWAPP-CDP-MIB", "clcCdpApCacheNeighInterface"), ("CISCO-LWAPP-CDP-MIB", "clcCdpApCacheNeighVersion"), ("CISCO-LWAPP-CDP-MIB", "clcCdpApCacheAdvtVersion"), ("CISCO-LWAPP-CDP-MIB", "clcCdpApCachePlatform"), ("CISCO-LWAPP-CDP-MIB", "clcCdpApCacheCapabilities"), ("CISCO-LWAPP-CDP-MIB", "clcCdpApCacheHoldtimeLeft"), ("CISCO-LWAPP-CDP-MIB", "clcCdpInPackets"), ("CISCO-LWAPP-CDP-MIB", "clcCdpOutPackets"), ("CISCO-LWAPP-CDP-MIB", "clcCdpChecksumErrorPackets"), ("CISCO-LWAPP-CDP-MIB", "clcCdpNoMemoryPackets"), ("CISCO-LWAPP-CDP-MIB", "clcCdpInvalidPackets"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    clcCdpRev01StatusGroup = clcCdpRev01StatusGroup.setStatus('current')
clcCdpRev02StatusGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 623, 2, 2, 3)).setObjects(("CISCO-LWAPP-CDP-MIB", "clcCdpApCacheDuplex"), ("CISCO-LWAPP-CDP-MIB", "clcCdpApCacheInterfaceSpeed"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    clcCdpRev02StatusGroup = clcCdpRev02StatusGroup.setStatus('current')
mibBuilder.exportSymbols("CISCO-LWAPP-CDP-MIB", clcCdpGlobalEnable=clcCdpGlobalEnable, clcCdpApCacheConfig=clcCdpApCacheConfig, clcCdpAdvtVersion=clcCdpAdvtVersion, clcCdpApCacheEntry=clcCdpApCacheEntry, ciscoLwappCdpMIBComplianceRev1=ciscoLwappCdpMIBComplianceRev1, clcCdpApCacheNeighAddress=clcCdpApCacheNeighAddress, clcCdpApCacheNeighInterface=clcCdpApCacheNeighInterface, clcCdpRev01ConfigGroup=clcCdpRev01ConfigGroup, ciscoLwappCdpMIBObjects=ciscoLwappCdpMIBObjects, ciscoLwappCdpMIB=ciscoLwappCdpMIB, clcCdpApEntry=clcCdpApEntry, clcCdpApCdpEnable=clcCdpApCdpEnable, clcCdpApCacheStatus=clcCdpApCacheStatus, clcCdpChecksumErrorPackets=clcCdpChecksumErrorPackets, clcCdpApCacheTable=clcCdpApCacheTable, ciscoLwappCdpMIBConform=ciscoLwappCdpMIBConform, clcCdpApCacheNeighName=clcCdpApCacheNeighName, clcCdpRev02StatusGroup=clcCdpRev02StatusGroup, ciscoLwappCdpMIBGroups=ciscoLwappCdpMIBGroups, clcCdpApCacheApName=clcCdpApCacheApName, clcCdpApCacheApAddress=clcCdpApCacheApAddress, PYSNMP_MODULE_ID=ciscoLwappCdpMIB, clcCdpInvalidPackets=clcCdpInvalidPackets, clcCdpApCacheHoldtimeLeft=clcCdpApCacheHoldtimeLeft, clcCdpApCacheInterfaceSpeed=clcCdpApCacheInterfaceSpeed, clcCdpApCacheNeighVersion=clcCdpApCacheNeighVersion, clcCdpApCacheLocalInterface=clcCdpApCacheLocalInterface, clcCdpApCacheApAddressType=clcCdpApCacheApAddressType, ciscoLwappCdpMIBNotifs=ciscoLwappCdpMIBNotifs, clcCdpApCacheAdvtVersion=clcCdpApCacheAdvtVersion, clcCdpApCachePlatform=clcCdpApCachePlatform, clcCdpApCacheCapabilities=clcCdpApCacheCapabilities, clcCdpGlobalConfig=clcCdpGlobalConfig, clcCdpMessageInterval=clcCdpMessageInterval, clcCdpRev01StatusGroup=clcCdpRev01StatusGroup, clcCdpInPackets=clcCdpInPackets, clcCdpOutPackets=clcCdpOutPackets, clcCdpApCacheDuplex=clcCdpApCacheDuplex, ciscoLwappCdpMIBCompliances=ciscoLwappCdpMIBCompliances, clcCdpApCacheDeviceIndex=clcCdpApCacheDeviceIndex, clcCdpApTable=clcCdpApTable, clcCdpNoMemoryPackets=clcCdpNoMemoryPackets, clcCdpTraffic=clcCdpTraffic, clcCdpApCacheNeighAddressType=clcCdpApCacheNeighAddressType, ciscoLwappCdpMIBCompliance=ciscoLwappCdpMIBCompliance)
