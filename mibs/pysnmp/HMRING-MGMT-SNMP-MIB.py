#
# PySNMP MIB module HMRING-MGMT-SNMP-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/HMRING-MGMT-SNMP-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 19:20:04 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, Integer, OctetString = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "Integer", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsUnion, ValueSizeConstraint, ConstraintsIntersection, SingleValueConstraint, ValueRangeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsUnion", "ValueSizeConstraint", "ConstraintsIntersection", "SingleValueConstraint", "ValueRangeConstraint")
hmConfiguration, = mibBuilder.importSymbols("HMPRIV-MGMT-SNMP-MIB", "hmConfiguration")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
ModuleIdentity, ObjectIdentity, Counter64, NotificationType, Integer32, TimeTicks, iso, MibScalar, MibTable, MibTableRow, MibTableColumn, MibIdentifier, Counter32, IpAddress, Bits, Gauge32, Unsigned32 = mibBuilder.importSymbols("SNMPv2-SMI", "ModuleIdentity", "ObjectIdentity", "Counter64", "NotificationType", "Integer32", "TimeTicks", "iso", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "MibIdentifier", "Counter32", "IpAddress", "Bits", "Gauge32", "Unsigned32")
DisplayString, RowStatus, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "RowStatus", "TextualConvention")
hmRingRedundancy = ModuleIdentity((1, 3, 6, 1, 4, 1, 248, 14, 5))
hmRingRedundancy.setRevisions(('2008-11-18 12:00', '2007-09-13 12:00',))
if mibBuilder.loadTexts: hmRingRedundancy.setLastUpdated('200811181200Z')
if mibBuilder.loadTexts: hmRingRedundancy.setOrganization('Hirschmann Automation and Control GmbH')
hmRingRedTable = MibTable((1, 3, 6, 1, 4, 1, 248, 14, 5, 1), )
if mibBuilder.loadTexts: hmRingRedTable.setStatus('current')
hmRingRedEntry = MibTableRow((1, 3, 6, 1, 4, 1, 248, 14, 5, 1, 1), ).setIndexNames((0, "HMRING-MGMT-SNMP-MIB", "hmRingRedPrimGroupID"), (0, "HMRING-MGMT-SNMP-MIB", "hmRingRedPrimIfIndex"))
if mibBuilder.loadTexts: hmRingRedEntry.setStatus('current')
hmRingRedPrimGroupID = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 14, 5, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 5))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hmRingRedPrimGroupID.setStatus('current')
hmRingRedPrimIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 14, 5, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hmRingRedPrimIfIndex.setStatus('current')
hmRingRedPrimIfOpState = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 14, 5, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("not-available", 1), ("active", 2), ("inactive", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hmRingRedPrimIfOpState.setStatus('current')
hmRingRedRedGroupID = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 14, 5, 1, 1, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hmRingRedRedGroupID.setStatus('current')
hmRingRedRedIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 14, 5, 1, 1, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hmRingRedRedIfIndex.setStatus('current')
hmRingRedRedIfOpState = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 14, 5, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("not-available", 1), ("active", 2), ("inactive", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hmRingRedRedIfOpState.setStatus('current')
hmRingRedOperState = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 14, 5, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("underCreation", 1), ("rmActive", 2), ("rmInactive", 3), ("rs", 4), ("disable", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hmRingRedOperState.setStatus('current')
hmRingRedMode = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 14, 5, 1, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("create", 1), ("delete", 2), ("rm", 3), ("rs", 4), ("disable", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hmRingRedMode.setStatus('current')
hmRingRedConfigOperState = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 14, 5, 1, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("noError", 1), ("rmConfigError", 2), ("ringConfigError", 3), ("anotherRM", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hmRingRedConfigOperState.setStatus('current')
hmRingRedRecoveryDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 14, 5, 1, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("delay500", 1), ("delay300", 2))).clone('delay500')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hmRingRedRecoveryDelay.setStatus('current')
hmRingCouplingTable = MibTable((1, 3, 6, 1, 4, 1, 248, 14, 5, 2), )
if mibBuilder.loadTexts: hmRingCouplingTable.setStatus('current')
hmRingCouplingEntry = MibTableRow((1, 3, 6, 1, 4, 1, 248, 14, 5, 2, 1), ).setIndexNames((0, "HMRING-MGMT-SNMP-MIB", "hmRingCplInterconnGroupID"), (0, "HMRING-MGMT-SNMP-MIB", "hmRingCplInterconnIfIndex"))
if mibBuilder.loadTexts: hmRingCouplingEntry.setStatus('current')
hmRingCplInterconnGroupID = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 14, 5, 2, 1, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hmRingCplInterconnGroupID.setStatus('current')
hmRingCplInterconnIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 14, 5, 2, 1, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hmRingCplInterconnIfIndex.setStatus('current')
hmRingCplInterconnIfOpState = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 14, 5, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("not-connected", 1), ("active", 2), ("standby", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hmRingCplInterconnIfOpState.setStatus('current')
hmRingCplControlGroupID = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 14, 5, 2, 1, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hmRingCplControlGroupID.setStatus('current')
hmRingCplControlIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 14, 5, 2, 1, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hmRingCplControlIfIndex.setStatus('current')
hmRingCplControlIfOpState = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 14, 5, 2, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("not-connected", 1), ("active", 2), ("standby", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hmRingCplControlIfOpState.setStatus('current')
hmRingCplControlMode = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 14, 5, 2, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("outband", 1), ("inband", 2), ("unknown", 3), ("local", 4), ("disable", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hmRingCplControlMode.setStatus('current')
hmRingCplPartnerIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 14, 5, 2, 1, 8), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hmRingCplPartnerIpAddr.setStatus('current')
hmRingCplPartnerInterconnGroupID = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 14, 5, 2, 1, 9), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hmRingCplPartnerInterconnGroupID.setStatus('current')
hmRingCplPartnerInterconnIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 14, 5, 2, 1, 10), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hmRingCplPartnerInterconnIfIndex.setStatus('current')
hmRingCplPartnerInterconnIfOpState = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 14, 5, 2, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("not-connected", 1), ("active", 2), ("standby", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hmRingCplPartnerInterconnIfOpState.setStatus('current')
hmRingCplOperState = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 14, 5, 2, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("underCreation", 1), ("slave", 2), ("master", 3), ("local", 4), ("disable", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hmRingCplOperState.setStatus('current')
hmRingCplMode = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 14, 5, 2, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("slaveOff", 1), ("slaveOn", 2), ("disable", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hmRingCplMode.setStatus('current')
hmRingCplRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 14, 5, 2, 1, 14), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hmRingCplRowStatus.setStatus('current')
hmRingCplConfigOperState = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 14, 5, 2, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10))).clone(namedValues=NamedValues(("noError", 1), ("slaveCouplingLinkError", 2), ("slaveControlLinkError", 3), ("masterControlLinkError", 4), ("twoSlaves", 5), ("localPartnerLinkError", 6), ("localInvalidCouplingPort", 7), ("couplingPortNotAvailable", 8), ("controlPortNotAvailable", 9), ("partnerPortNotAvailable", 10)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hmRingCplConfigOperState.setStatus('current')
hmRingCplCouplingLinks = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 14, 5, 2, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("basicRedundancy", 1), ("extendedRedundancy", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hmRingCplCouplingLinks.setStatus('current')
hmRingCplExtendedDiag = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 14, 5, 2, 1, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("noError", 1), ("basicRedundancyInactive", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hmRingCplExtendedDiag.setStatus('current')
hmRingCplNetCoupling = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 14, 5, 2, 1, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("ringCoupling", 1), ("netCoupling", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hmRingCplNetCoupling.setStatus('current')
hmRingCplConfigSource = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 14, 5, 2, 1, 19), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("dipSwitch", 1), ("management", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hmRingCplConfigSource.setStatus('current')
hmMrpTable = MibTable((1, 3, 6, 1, 4, 1, 248, 14, 5, 3), )
if mibBuilder.loadTexts: hmMrpTable.setStatus('current')
hmMrpEntry = MibTableRow((1, 3, 6, 1, 4, 1, 248, 14, 5, 3, 1), ).setIndexNames((1, "HMRING-MGMT-SNMP-MIB", "hmMrpDomainID"))
if mibBuilder.loadTexts: hmMrpEntry.setStatus('current')
hmMrpDomainID = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 14, 5, 3, 1, 1), OctetString().subtype(subtypeSpec=ValueSizeConstraint(16, 16)).setFixedLength(16).clone(hexValue="FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"))
if mibBuilder.loadTexts: hmMrpDomainID.setStatus('current')
hmMrpRingport1GroupID = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 14, 5, 3, 1, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hmMrpRingport1GroupID.setStatus('current')
hmMrpRingport1IfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 14, 5, 3, 1, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hmMrpRingport1IfIndex.setStatus('current')
hmMrpRingport1OperState = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 14, 5, 3, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("disabled", 1), ("blocked", 2), ("forwarding", 3), ("not-connected", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hmMrpRingport1OperState.setStatus('current')
hmMrpRingport2GroupID = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 14, 5, 3, 1, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hmMrpRingport2GroupID.setStatus('current')
hmMrpRingport2IfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 14, 5, 3, 1, 6), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hmMrpRingport2IfIndex.setStatus('current')
hmMrpRingport2OperState = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 14, 5, 3, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("disabled", 1), ("blocked", 2), ("forwarding", 3), ("not-connected", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hmMrpRingport2OperState.setStatus('current')
hmMrpVlanID = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 14, 5, 3, 1, 8), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hmMrpVlanID.setStatus('current')
hmMrpExpectedRole = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 14, 5, 3, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("client", 1), ("manager", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hmMrpExpectedRole.setStatus('current')
hmMrpMRCLinkDownInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 14, 5, 3, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hmMrpMRCLinkDownInterval.setStatus('current')
hmMrpMRCLinkUpInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 14, 5, 3, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hmMrpMRCLinkUpInterval.setStatus('current')
hmMrpMRCLinkChangeCount = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 14, 5, 3, 1, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hmMrpMRCLinkChangeCount.setStatus('current')
hmMrpMRCBlockedSupported = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 14, 5, 3, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hmMrpMRCBlockedSupported.setStatus('current')
hmMrpMRMPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 14, 5, 3, 1, 14), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535)).clone(32768)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hmMrpMRMPriority.setStatus('current')
hmMrpMRMTopologyChangeInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 14, 5, 3, 1, 15), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hmMrpMRMTopologyChangeInterval.setStatus('current')
hmMrpMRMTopologyChangeRepeatCount = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 14, 5, 3, 1, 16), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hmMrpMRMTopologyChangeRepeatCount.setStatus('current')
hmMrpMRMShortTestInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 14, 5, 3, 1, 17), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hmMrpMRMShortTestInterval.setStatus('current')
hmMrpMRMDefaultTestInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 14, 5, 3, 1, 18), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hmMrpMRMDefaultTestInterval.setStatus('current')
hmMrpMRMTestMonitoringCount = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 14, 5, 3, 1, 19), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hmMrpMRMTestMonitoringCount.setStatus('current')
hmMrpMRMNonBlockingMRCSupported = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 14, 5, 3, 1, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hmMrpMRMNonBlockingMRCSupported.setStatus('current')
hmMrpMRMTestMonitoringExtendedCount = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 14, 5, 3, 1, 21), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hmMrpMRMTestMonitoringExtendedCount.setStatus('current')
hmMrpMRMReactOnLinkChange = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 14, 5, 3, 1, 22), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hmMrpMRMReactOnLinkChange.setStatus('current')
hmMrpMRMCheckMediaRedundancy = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 14, 5, 3, 1, 23), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hmMrpMRMCheckMediaRedundancy.setStatus('current')
hmMrpMRMRealRoleState = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 14, 5, 3, 1, 24), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("client", 1), ("manager", 2), ("undefined", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hmMrpMRMRealRoleState.setStatus('current')
hmMrpMRMRealRingState = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 14, 5, 3, 1, 25), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("open", 1), ("closed", 2), ("undefined", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hmMrpMRMRealRingState.setStatus('current')
hmMrpRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 14, 5, 3, 1, 26), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hmMrpRowStatus.setStatus('current')
hmMrpRedOperState = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 14, 5, 3, 1, 27), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("redGuaranteed", 1), ("redNotGuaranteed", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hmMrpRedOperState.setStatus('current')
hmMrpConfigOperState = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 14, 5, 3, 1, 28), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("noError", 1), ("ringportLinkError", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hmMrpConfigOperState.setStatus('current')
hmMrpDomainName = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 14, 5, 3, 1, 29), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hmMrpDomainName.setStatus('current')
hmMrpMRMRecoveryDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 14, 5, 3, 1, 30), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("delay500", 1), ("delay200", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hmMrpMRMRecoveryDelay.setStatus('current')
hmRpcTable = MibTable((1, 3, 6, 1, 4, 1, 248, 14, 5, 4), )
if mibBuilder.loadTexts: hmRpcTable.setStatus('current')
hmRpcEntry = MibTableRow((1, 3, 6, 1, 4, 1, 248, 14, 5, 4, 1), ).setIndexNames((0, "HMRING-MGMT-SNMP-MIB", "hmRpcRingProtocol"), (0, "HMRING-MGMT-SNMP-MIB", "hmRpcRingID"))
if mibBuilder.loadTexts: hmRpcEntry.setStatus('current')
hmRpcRingProtocol = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 14, 5, 4, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(3))).clone(namedValues=NamedValues(("fastHiperRing", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hmRpcRingProtocol.setStatus('current')
hmRpcRingID = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 14, 5, 4, 1, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hmRpcRingID.setStatus('current')
hmRpcRingName = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 14, 5, 4, 1, 3), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hmRpcRingName.setStatus('current')
hmRpcRingport1GroupID = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 14, 5, 4, 1, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hmRpcRingport1GroupID.setStatus('current')
hmRpcRingport1IfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 14, 5, 4, 1, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hmRpcRingport1IfIndex.setStatus('current')
hmRpcRingport1OperState = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 14, 5, 4, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("disabled", 1), ("blocked", 2), ("forwarding", 3), ("not-connected", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hmRpcRingport1OperState.setStatus('current')
hmRpcRingport2GroupID = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 14, 5, 4, 1, 7), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hmRpcRingport2GroupID.setStatus('current')
hmRpcRingport2IfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 14, 5, 4, 1, 8), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hmRpcRingport2IfIndex.setStatus('current')
hmRpcRingport2OperState = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 14, 5, 4, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("disabled", 1), ("blocked", 2), ("forwarding", 3), ("not-connected", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hmRpcRingport2OperState.setStatus('current')
hmRpcVlanID = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 14, 5, 4, 1, 10), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hmRpcVlanID.setStatus('current')
hmRpcAdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 14, 5, 4, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("client", 1), ("manager", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hmRpcAdminState.setStatus('current')
hmRpcOperState = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 14, 5, 4, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("client", 1), ("manager", 2), ("disabled", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hmRpcOperState.setStatus('current')
hmRpcRingOperState = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 14, 5, 4, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("undefined", 1), ("open", 2), ("closed", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hmRpcRingOperState.setStatus('current')
hmRpcRedundancyOperState = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 14, 5, 4, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("redGuaranteed", 1), ("redNotGuaranteed", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hmRpcRedundancyOperState.setStatus('current')
hmRpcConfigOperState = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 14, 5, 4, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("noError", 1), ("ringportLinkError", 2), ("singleSideReceive", 3), ("multipleRM", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hmRpcConfigOperState.setStatus('current')
hmRpcRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 14, 5, 4, 1, 16), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hmRpcRowStatus.setStatus('current')
hmRpcNodes = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 14, 5, 4, 1, 17), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hmRpcNodes.setStatus('current')
hmRpcRoundTripDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 14, 5, 4, 1, 18), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hmRpcRoundTripDelay.setStatus('current')
hmMultiHiperRing = MibIdentifier((1, 3, 6, 1, 4, 1, 248, 14, 5, 5))
hmSrmMaxInstances = MibScalar((1, 3, 6, 1, 4, 1, 248, 14, 5, 5, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hmSrmMaxInstances.setStatus('current')
hmSrmTable = MibTable((1, 3, 6, 1, 4, 1, 248, 14, 5, 5, 5), )
if mibBuilder.loadTexts: hmSrmTable.setStatus('current')
hmSrmEntry = MibTableRow((1, 3, 6, 1, 4, 1, 248, 14, 5, 5, 5, 1), ).setIndexNames((0, "HMRING-MGMT-SNMP-MIB", "hmSrmRingID"))
if mibBuilder.loadTexts: hmSrmEntry.setStatus('current')
hmSrmRingID = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 14, 5, 5, 5, 1, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hmSrmRingID.setStatus('current')
hmSrmRingProtocol = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 14, 5, 5, 5, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(4))).clone(namedValues=NamedValues(("standardMRP", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hmSrmRingProtocol.setStatus('current')
hmSrmRingName = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 14, 5, 5, 5, 1, 3), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hmSrmRingName.setStatus('current')
hmSrmRingport1GroupID = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 14, 5, 5, 5, 1, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hmSrmRingport1GroupID.setStatus('current')
hmSrmRingport1IfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 14, 5, 5, 5, 1, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hmSrmRingport1IfIndex.setStatus('current')
hmSrmRingport1OperState = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 14, 5, 5, 5, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("disabled", 1), ("blocked", 2), ("forwarding", 3), ("not-connected", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hmSrmRingport1OperState.setStatus('current')
hmSrmVlanID = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 14, 5, 5, 5, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4042))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hmSrmVlanID.setStatus('current')
hmSrmAdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 14, 5, 5, 5, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("manager", 1), ("redundantManager", 2), ("singleManager", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hmSrmAdminState.setStatus('current')
hmSrmOperState = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 14, 5, 5, 5, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("manager", 1), ("redundantManager", 2), ("singleManager", 3), ("disabled", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hmSrmOperState.setStatus('current')
hmSrmRingOperState = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 14, 5, 5, 5, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("undefined", 1), ("open", 2), ("closed", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hmSrmRingOperState.setStatus('current')
hmSrmRedundancyOperState = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 14, 5, 5, 5, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("redGuaranteed", 1), ("redNotGuaranteed", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hmSrmRedundancyOperState.setStatus('current')
hmSrmConfigOperState = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 14, 5, 5, 5, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9))).clone(namedValues=NamedValues(("noError", 1), ("ringportLinkError", 2), ("multipleSRM", 3), ("noPartnerManager", 4), ("concurrentVLAN", 5), ("concurrentPort", 6), ("concurrentRedundancy", 7), ("trunkMember", 8), ("sharedVLAN", 9)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hmSrmConfigOperState.setStatus('current')
hmSrmRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 14, 5, 5, 5, 1, 13), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hmSrmRowStatus.setStatus('current')
hmSrmNodes = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 14, 5, 5, 5, 1, 14), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hmSrmNodes.setStatus('current')
hmSrmMRPDomainID = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 14, 5, 5, 5, 1, 15), OctetString().subtype(subtypeSpec=ValueSizeConstraint(16, 16)).setFixedLength(16).clone(hexValue="FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF")).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hmSrmMRPDomainID.setStatus('current')
hmSrmPartnerMAC = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 14, 5, 5, 5, 1, 16), OctetString().subtype(subtypeSpec=ValueSizeConstraint(6, 6)).setFixedLength(6)).setMaxAccess("readonly")
if mibBuilder.loadTexts: hmSrmPartnerMAC.setStatus('current')
hmRingRedundancyEvent = ObjectIdentity((1, 3, 6, 1, 4, 1, 248, 14, 5, 0))
if mibBuilder.loadTexts: hmRingRedundancyEvent.setStatus('current')
hmRingRedReconfig = NotificationType((1, 3, 6, 1, 4, 1, 248, 14, 5, 0, 1)).setObjects(("HMRING-MGMT-SNMP-MIB", "hmRingRedOperState"))
if mibBuilder.loadTexts: hmRingRedReconfig.setStatus('current')
hmRingCplReconfig = NotificationType((1, 3, 6, 1, 4, 1, 248, 14, 5, 0, 2)).setObjects(("HMRING-MGMT-SNMP-MIB", "hmRingCplInterconnIfOpState"), ("HMRING-MGMT-SNMP-MIB", "hmRingCplPartnerInterconnIfOpState"), ("HMRING-MGMT-SNMP-MIB", "hmRingCplPartnerIpAddr"))
if mibBuilder.loadTexts: hmRingCplReconfig.setStatus('current')
hmRingRedConfigChanged = NotificationType((1, 3, 6, 1, 4, 1, 248, 14, 5, 0, 3)).setObjects(("HMRING-MGMT-SNMP-MIB", "hmRingRedConfigOperState"))
if mibBuilder.loadTexts: hmRingRedConfigChanged.setStatus('current')
hmMrpReconfig = NotificationType((1, 3, 6, 1, 4, 1, 248, 14, 5, 0, 4)).setObjects(("HMRING-MGMT-SNMP-MIB", "hmMrpDomainID"), ("HMRING-MGMT-SNMP-MIB", "hmMrpMRMRealRingState"))
if mibBuilder.loadTexts: hmMrpReconfig.setStatus('current')
hmRpcReconfig = NotificationType((1, 3, 6, 1, 4, 1, 248, 14, 5, 0, 5)).setObjects(("HMRING-MGMT-SNMP-MIB", "hmRpcRingProtocol"), ("HMRING-MGMT-SNMP-MIB", "hmRpcRingID"), ("HMRING-MGMT-SNMP-MIB", "hmRpcRingOperState"))
if mibBuilder.loadTexts: hmRpcReconfig.setStatus('current')
hmSrmReconfig = NotificationType((1, 3, 6, 1, 4, 1, 248, 14, 5, 0, 6)).setObjects(("HMRING-MGMT-SNMP-MIB", "hmSrmRingID"), ("HMRING-MGMT-SNMP-MIB", "hmSrmRingProtocol"), ("HMRING-MGMT-SNMP-MIB", "hmSrmRingOperState"))
if mibBuilder.loadTexts: hmSrmReconfig.setStatus('current')
mibBuilder.exportSymbols("HMRING-MGMT-SNMP-MIB", hmMrpRingport1GroupID=hmMrpRingport1GroupID, hmMrpMRMTopologyChangeInterval=hmMrpMRMTopologyChangeInterval, hmRingRedPrimGroupID=hmRingRedPrimGroupID, hmRpcRingID=hmRpcRingID, hmRingRedundancy=hmRingRedundancy, hmMrpConfigOperState=hmMrpConfigOperState, hmSrmEntry=hmSrmEntry, hmRingCplExtendedDiag=hmRingCplExtendedDiag, hmMrpTable=hmMrpTable, hmMrpRingport2OperState=hmMrpRingport2OperState, hmRpcRingport1OperState=hmRpcRingport1OperState, hmRingCplOperState=hmRingCplOperState, hmMrpRingport2IfIndex=hmMrpRingport2IfIndex, hmRpcNodes=hmRpcNodes, hmMrpMRMRecoveryDelay=hmMrpMRMRecoveryDelay, hmMrpMRMCheckMediaRedundancy=hmMrpMRMCheckMediaRedundancy, hmMrpReconfig=hmMrpReconfig, hmRpcOperState=hmRpcOperState, hmMrpMRMShortTestInterval=hmMrpMRMShortTestInterval, hmRpcVlanID=hmRpcVlanID, hmSrmOperState=hmSrmOperState, hmRpcRingport1IfIndex=hmRpcRingport1IfIndex, hmRingRedConfigOperState=hmRingRedConfigOperState, hmMrpMRMRealRingState=hmMrpMRMRealRingState, hmRpcRingport2IfIndex=hmRpcRingport2IfIndex, hmSrmConfigOperState=hmSrmConfigOperState, hmRpcRowStatus=hmRpcRowStatus, hmRingRedRedIfOpState=hmRingRedRedIfOpState, hmMrpMRCLinkChangeCount=hmMrpMRCLinkChangeCount, hmMrpRedOperState=hmMrpRedOperState, hmSrmAdminState=hmSrmAdminState, hmRingCplRowStatus=hmRingCplRowStatus, hmRingCplControlIfIndex=hmRingCplControlIfIndex, hmMrpMRMRealRoleState=hmMrpMRMRealRoleState, hmRpcRingOperState=hmRpcRingOperState, hmRpcRedundancyOperState=hmRpcRedundancyOperState, hmMrpMRCLinkUpInterval=hmMrpMRCLinkUpInterval, hmRpcReconfig=hmRpcReconfig, hmRingRedRedIfIndex=hmRingRedRedIfIndex, hmRpcRoundTripDelay=hmRpcRoundTripDelay, hmRingCplPartnerInterconnGroupID=hmRingCplPartnerInterconnGroupID, hmRingRedReconfig=hmRingRedReconfig, hmRpcEntry=hmRpcEntry, hmSrmVlanID=hmSrmVlanID, hmSrmRingport1IfIndex=hmSrmRingport1IfIndex, hmSrmRedundancyOperState=hmSrmRedundancyOperState, hmMultiHiperRing=hmMultiHiperRing, hmRingRedPrimIfOpState=hmRingRedPrimIfOpState, hmSrmReconfig=hmSrmReconfig, hmMrpMRMDefaultTestInterval=hmMrpMRMDefaultTestInterval, hmRingCouplingTable=hmRingCouplingTable, hmMrpMRMPriority=hmMrpMRMPriority, hmMrpMRMReactOnLinkChange=hmMrpMRMReactOnLinkChange, hmSrmMRPDomainID=hmSrmMRPDomainID, hmRingRedTable=hmRingRedTable, hmRingCplPartnerIpAddr=hmRingCplPartnerIpAddr, hmMrpMRMNonBlockingMRCSupported=hmMrpMRMNonBlockingMRCSupported, hmSrmRowStatus=hmSrmRowStatus, hmRingCplControlIfOpState=hmRingCplControlIfOpState, hmMrpVlanID=hmMrpVlanID, hmRingRedOperState=hmRingRedOperState, hmRingCplPartnerInterconnIfOpState=hmRingCplPartnerInterconnIfOpState, hmRpcRingport2GroupID=hmRpcRingport2GroupID, hmSrmRingOperState=hmSrmRingOperState, hmRingRedEntry=hmRingRedEntry, hmRingRedundancyEvent=hmRingRedundancyEvent, hmRpcRingProtocol=hmRpcRingProtocol, hmSrmTable=hmSrmTable, hmRingRedRecoveryDelay=hmRingRedRecoveryDelay, hmRingRedConfigChanged=hmRingRedConfigChanged, hmSrmNodes=hmSrmNodes, hmRingCplInterconnIfOpState=hmRingCplInterconnIfOpState, hmRingCplInterconnGroupID=hmRingCplInterconnGroupID, hmMrpMRCLinkDownInterval=hmMrpMRCLinkDownInterval, PYSNMP_MODULE_ID=hmRingRedundancy, hmMrpDomainName=hmMrpDomainName, hmRpcConfigOperState=hmRpcConfigOperState, hmRingCplCouplingLinks=hmRingCplCouplingLinks, hmRingCplPartnerInterconnIfIndex=hmRingCplPartnerInterconnIfIndex, hmRingCplNetCoupling=hmRingCplNetCoupling, hmSrmRingport1GroupID=hmSrmRingport1GroupID, hmRingCplControlMode=hmRingCplControlMode, hmRingCplReconfig=hmRingCplReconfig, hmRingCouplingEntry=hmRingCouplingEntry, hmRpcRingport2OperState=hmRpcRingport2OperState, hmSrmRingID=hmSrmRingID, hmMrpRingport1IfIndex=hmMrpRingport1IfIndex, hmRpcRingport1GroupID=hmRpcRingport1GroupID, hmMrpMRCBlockedSupported=hmMrpMRCBlockedSupported, hmMrpExpectedRole=hmMrpExpectedRole, hmMrpDomainID=hmMrpDomainID, hmMrpRowStatus=hmMrpRowStatus, hmRingRedMode=hmRingRedMode, hmSrmRingName=hmSrmRingName, hmRingRedRedGroupID=hmRingRedRedGroupID, hmRingCplInterconnIfIndex=hmRingCplInterconnIfIndex, hmMrpMRMTestMonitoringExtendedCount=hmMrpMRMTestMonitoringExtendedCount, hmSrmMaxInstances=hmSrmMaxInstances, hmRingRedPrimIfIndex=hmRingRedPrimIfIndex, hmRpcRingName=hmRpcRingName, hmSrmRingProtocol=hmSrmRingProtocol, hmRpcAdminState=hmRpcAdminState, hmSrmRingport1OperState=hmSrmRingport1OperState, hmMrpMRMTestMonitoringCount=hmMrpMRMTestMonitoringCount, hmMrpRingport1OperState=hmMrpRingport1OperState, hmMrpMRMTopologyChangeRepeatCount=hmMrpMRMTopologyChangeRepeatCount, hmRingCplConfigSource=hmRingCplConfigSource, hmRingCplControlGroupID=hmRingCplControlGroupID, hmRingCplConfigOperState=hmRingCplConfigOperState, hmRingCplMode=hmRingCplMode, hmRpcTable=hmRpcTable, hmMrpEntry=hmMrpEntry, hmSrmPartnerMAC=hmSrmPartnerMAC, hmMrpRingport2GroupID=hmMrpRingport2GroupID)
