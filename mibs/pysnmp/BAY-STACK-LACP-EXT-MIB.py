#
# PySNMP MIB module BAY-STACK-LACP-EXT-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/BAY-STACK-LACP-EXT-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 17:18:50 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, ObjectIdentifier, OctetString = mibBuilder.importSymbols("ASN1", "Integer", "ObjectIdentifier", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueRangeConstraint, ConstraintsIntersection, ValueSizeConstraint, ConstraintsUnion, SingleValueConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueRangeConstraint", "ConstraintsIntersection", "ValueSizeConstraint", "ConstraintsUnion", "SingleValueConstraint")
InterfaceIndex, = mibBuilder.importSymbols("IF-MIB", "InterfaceIndex")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
Gauge32, ModuleIdentity, Unsigned32, IpAddress, Counter64, MibIdentifier, Integer32, MibScalar, MibTable, MibTableRow, MibTableColumn, NotificationType, iso, ObjectIdentity, Bits, TimeTicks, Counter32 = mibBuilder.importSymbols("SNMPv2-SMI", "Gauge32", "ModuleIdentity", "Unsigned32", "IpAddress", "Counter64", "MibIdentifier", "Integer32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "NotificationType", "iso", "ObjectIdentity", "Bits", "TimeTicks", "Counter32")
TextualConvention, DisplayString, TruthValue = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString", "TruthValue")
bayStackMibs, = mibBuilder.importSymbols("SYNOPTICS-ROOT-MIB", "bayStackMibs")
bayStackLacpExtMib = ModuleIdentity((1, 3, 6, 1, 4, 1, 45, 5, 7))
bayStackLacpExtMib.setRevisions(('2005-11-14 00:00', '2004-06-04 00:00',))
if mibBuilder.loadTexts: bayStackLacpExtMib.setLastUpdated('200511140000Z')
if mibBuilder.loadTexts: bayStackLacpExtMib.setOrganization('Nortel Networks')
bsleNotifications = MibIdentifier((1, 3, 6, 1, 4, 1, 45, 5, 7, 0))
bsleObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 45, 5, 7, 1))
bsleScalars = MibIdentifier((1, 3, 6, 1, 4, 1, 45, 5, 7, 1, 1))
bsleDot3adCompatibilityMode = MibScalar((1, 3, 6, 1, 4, 1, 45, 5, 7, 1, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("default", 1), ("advanced", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bsleDot3adCompatibilityMode.setStatus('current')
bsleDot3adAggPortExtTable = MibTable((1, 3, 6, 1, 4, 1, 45, 5, 7, 2), )
if mibBuilder.loadTexts: bsleDot3adAggPortExtTable.setStatus('current')
bsleDot3adAggPortExtEntry = MibTableRow((1, 3, 6, 1, 4, 1, 45, 5, 7, 2, 1), ).setIndexNames((0, "BAY-STACK-LACP-EXT-MIB", "bsleDot3adAggPortExtIndex"))
if mibBuilder.loadTexts: bsleDot3adAggPortExtEntry.setStatus('current')
bsleDot3adAggPortExtIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 5, 7, 2, 1, 1), InterfaceIndex())
if mibBuilder.loadTexts: bsleDot3adAggPortExtIndex.setStatus('current')
bsleDot3adAggPortExtAdminEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 5, 7, 2, 1, 2), TruthValue()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: bsleDot3adAggPortExtAdminEnabled.setStatus('current')
bsleDot3adAggPortExtOperEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 5, 7, 2, 1, 3), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bsleDot3adAggPortExtOperEnabled.setStatus('current')
mibBuilder.exportSymbols("BAY-STACK-LACP-EXT-MIB", bsleDot3adCompatibilityMode=bsleDot3adCompatibilityMode, bsleObjects=bsleObjects, bsleDot3adAggPortExtIndex=bsleDot3adAggPortExtIndex, PYSNMP_MODULE_ID=bayStackLacpExtMib, bsleDot3adAggPortExtOperEnabled=bsleDot3adAggPortExtOperEnabled, bsleDot3adAggPortExtTable=bsleDot3adAggPortExtTable, bayStackLacpExtMib=bayStackLacpExtMib, bsleNotifications=bsleNotifications, bsleDot3adAggPortExtEntry=bsleDot3adAggPortExtEntry, bsleScalars=bsleScalars, bsleDot3adAggPortExtAdminEnabled=bsleDot3adAggPortExtAdminEnabled)
