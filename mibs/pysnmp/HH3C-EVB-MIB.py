#
# PySNMP MIB module HH3C-EVB-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/HH3C-EVB-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 19:13:49 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, ObjectIdentifier, OctetString = mibBuilder.importSymbols("ASN1", "Integer", "ObjectIdentifier", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueSizeConstraint, ConstraintsIntersection, ValueRangeConstraint, ConstraintsUnion, SingleValueConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueSizeConstraint", "ConstraintsIntersection", "ValueRangeConstraint", "ConstraintsUnion", "SingleValueConstraint")
hh3cCommon, = mibBuilder.importSymbols("HH3C-OID-MIB", "hh3cCommon")
IEEE8021BridgePortNumber, = mibBuilder.importSymbols("IEEE8021-TC-MIB", "IEEE8021BridgePortNumber")
InterfaceIndexOrZero, = mibBuilder.importSymbols("IF-MIB", "InterfaceIndexOrZero")
VlanIndex, = mibBuilder.importSymbols("Q-BRIDGE-MIB", "VlanIndex")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
Integer32, ObjectIdentity, MibIdentifier, NotificationType, Counter32, iso, Unsigned32, Bits, ModuleIdentity, Counter64, MibScalar, MibTable, MibTableRow, MibTableColumn, TimeTicks, IpAddress, Gauge32 = mibBuilder.importSymbols("SNMPv2-SMI", "Integer32", "ObjectIdentity", "MibIdentifier", "NotificationType", "Counter32", "iso", "Unsigned32", "Bits", "ModuleIdentity", "Counter64", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "TimeTicks", "IpAddress", "Gauge32")
MacAddress, DisplayString, RowStatus, TextualConvention, TruthValue = mibBuilder.importSymbols("SNMPv2-TC", "MacAddress", "DisplayString", "RowStatus", "TextualConvention", "TruthValue")
hh3cEvb = ModuleIdentity((1, 3, 6, 1, 4, 1, 25506, 2, 134))
hh3cEvb.setRevisions(('2012-12-21 12:00',))
if mibBuilder.loadTexts: hh3cEvb.setLastUpdated('201212211200Z')
if mibBuilder.loadTexts: hh3cEvb.setOrganization('Hangzhou H3C Tech. Co., Ltd.')
hh3cEvbSysObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 25506, 2, 134, 1))
hh3cEvbPortObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 25506, 2, 134, 2))
hh3cFlex10Objects = MibIdentifier((1, 3, 6, 1, 4, 1, 25506, 2, 134, 3))
hh3cEvbSetResult = MibScalar((1, 3, 6, 1, 4, 1, 25506, 2, 134, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("unknown", 1), ("processing", 2), ("success", 3), ("failed", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cEvbSetResult.setStatus('current')
hh3cEvbDefaultManagerTable = MibTable((1, 3, 6, 1, 4, 1, 25506, 2, 134, 1, 2), )
if mibBuilder.loadTexts: hh3cEvbDefaultManagerTable.setStatus('current')
hh3cEvbDefaultManagerEntry = MibTableRow((1, 3, 6, 1, 4, 1, 25506, 2, 134, 1, 2, 1), ).setIndexNames((0, "HH3C-EVB-MIB", "hh3cEvbManagerIndex"))
if mibBuilder.loadTexts: hh3cEvbDefaultManagerEntry.setStatus('current')
hh3cEvbManagerIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 134, 1, 2, 1, 1), Unsigned32())
if mibBuilder.loadTexts: hh3cEvbManagerIndex.setStatus('current')
hh3cEvbManagerType = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 134, 1, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("ipv4", 1), ("ipv6", 2), ("name", 3), ("local", 4)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cEvbManagerType.setStatus('current')
hh3cEvbManagerID = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 134, 1, 2, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 127))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cEvbManagerID.setStatus('current')
hh3cEvbManagerPort = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 134, 1, 2, 1, 4), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535)).clone(8080)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cEvbManagerPort.setStatus('current')
hh3cEvbManagerRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 134, 1, 2, 1, 5), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cEvbManagerRowStatus.setStatus('current')
hh3cEvbPortConfigTable = MibTable((1, 3, 6, 1, 4, 1, 25506, 2, 134, 2, 1), )
if mibBuilder.loadTexts: hh3cEvbPortConfigTable.setStatus('current')
hh3cEvbPortConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 25506, 2, 134, 2, 1, 1), ).setIndexNames((0, "HH3C-EVB-MIB", "hh3cEvbPortNumber"))
if mibBuilder.loadTexts: hh3cEvbPortConfigEntry.setStatus('current')
hh3cEvbPortNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 134, 2, 1, 1, 1), IEEE8021BridgePortNumber())
if mibBuilder.loadTexts: hh3cEvbPortNumber.setStatus('current')
hh3cEvbRWD = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 134, 2, 1, 1, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(15, 31)).clone(20)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hh3cEvbRWD.setStatus('current')
hh3cEvbRKA = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 134, 2, 1, 1, 3), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(14, 31)).clone(20)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hh3cEvbRKA.setStatus('current')
hh3cEvbSchannelConfigTable = MibTable((1, 3, 6, 1, 4, 1, 25506, 2, 134, 2, 2), )
if mibBuilder.loadTexts: hh3cEvbSchannelConfigTable.setStatus('current')
hh3cEvbSchannelConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 25506, 2, 134, 2, 2, 1), ).setIndexNames((0, "HH3C-EVB-MIB", "hh3cEvbPortNumber"), (0, "HH3C-EVB-MIB", "hh3cEvbSchannelID"))
if mibBuilder.loadTexts: hh3cEvbSchannelConfigEntry.setStatus('current')
hh3cEvbSchannelID = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 134, 2, 2, 1, 1), Unsigned32())
if mibBuilder.loadTexts: hh3cEvbSchannelID.setStatus('current')
hh3cEvbSchannelSVLAN = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 134, 2, 2, 1, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4094))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cEvbSchannelSVLAN.setStatus('current')
hh3cEvbMacLearningStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 134, 2, 2, 1, 3), TruthValue().clone('true')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hh3cEvbMacLearningStatus.setStatus('current')
hh3cEvbRRStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 134, 2, 2, 1, 4), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hh3cEvbRRStatus.setStatus('current')
hh3cEvbSchannelRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 134, 2, 2, 1, 5), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cEvbSchannelRowStatus.setStatus('current')
hh3cEvbVSIConfigTable = MibTable((1, 3, 6, 1, 4, 1, 25506, 2, 134, 2, 3), )
if mibBuilder.loadTexts: hh3cEvbVSIConfigTable.setStatus('current')
hh3cEvbVSIConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 25506, 2, 134, 2, 3, 1), ).setIndexNames((0, "HH3C-EVB-MIB", "hh3cEvbSBPPortNumber"), (0, "HH3C-EVB-MIB", "hh3cEvbVSILocalID"))
if mibBuilder.loadTexts: hh3cEvbVSIConfigEntry.setStatus('current')
hh3cEvbSBPPortNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 134, 2, 3, 1, 1), IEEE8021BridgePortNumber())
if mibBuilder.loadTexts: hh3cEvbSBPPortNumber.setStatus('current')
hh3cEvbVSILocalID = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 134, 2, 3, 1, 2), Unsigned32())
if mibBuilder.loadTexts: hh3cEvbVSILocalID.setStatus('current')
hh3cEvbVSICommand = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 134, 2, 3, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("preAssociate", 1), ("preAssociateWithRsrcReservation", 2), ("associate", 3), ("deAssociate", 4)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cEvbVSICommand.setStatus('current')
hh3cEvbVSIIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 134, 2, 3, 1, 4), InterfaceIndexOrZero()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cEvbVSIIfIndex.setStatus('current')
hh3cEvbVSIIsActive = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 134, 2, 3, 1, 5), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hh3cEvbVSIIsActive.setStatus('current')
hh3cEvbVSIRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 134, 2, 3, 1, 6), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cEvbVSIRowStatus.setStatus('current')
hh3cEvbVSIFilterConfigTable = MibTable((1, 3, 6, 1, 4, 1, 25506, 2, 134, 2, 4), )
if mibBuilder.loadTexts: hh3cEvbVSIFilterConfigTable.setStatus('current')
hh3cEvbVSIFilterConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 25506, 2, 134, 2, 4, 1), ).setIndexNames((0, "HH3C-EVB-MIB", "hh3cEvbSBPPortNumber"), (0, "HH3C-EVB-MIB", "hh3cEvbVSILocalID"), (0, "HH3C-EVB-MIB", "hh3cEvbGroupID"), (0, "HH3C-EVB-MIB", "hh3cEvbVSIMac"), (0, "HH3C-EVB-MIB", "hh3cEvbVSIVlanId"))
if mibBuilder.loadTexts: hh3cEvbVSIFilterConfigEntry.setStatus('current')
hh3cEvbGroupID = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 134, 2, 4, 1, 1), Unsigned32())
if mibBuilder.loadTexts: hh3cEvbGroupID.setStatus('current')
hh3cEvbVSIMac = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 134, 2, 4, 1, 2), MacAddress())
if mibBuilder.loadTexts: hh3cEvbVSIMac.setStatus('current')
hh3cEvbVSIVlanId = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 134, 2, 4, 1, 3), VlanIndex())
if mibBuilder.loadTexts: hh3cEvbVSIVlanId.setStatus('current')
hh3cEvbVSIFilterRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 134, 2, 4, 1, 4), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cEvbVSIFilterRowStatus.setStatus('current')
hh3cFlex10PortConfigTable = MibTable((1, 3, 6, 1, 4, 1, 25506, 2, 134, 3, 1), )
if mibBuilder.loadTexts: hh3cFlex10PortConfigTable.setStatus('current')
hh3cFlex10PortConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 25506, 2, 134, 3, 1, 1), ).setIndexNames((0, "HH3C-EVB-MIB", "hh3cFlex10PortNumber"))
if mibBuilder.loadTexts: hh3cFlex10PortConfigEntry.setStatus('current')
hh3cFlex10PortNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 134, 3, 1, 1, 1), IEEE8021BridgePortNumber())
if mibBuilder.loadTexts: hh3cFlex10PortNumber.setStatus('current')
hh3cFlex10PortEnableStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 134, 3, 1, 1, 2), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hh3cFlex10PortEnableStatus.setStatus('current')
hh3cFlex10RemoteSchannelTable = MibTable((1, 3, 6, 1, 4, 1, 25506, 2, 134, 3, 2), )
if mibBuilder.loadTexts: hh3cFlex10RemoteSchannelTable.setStatus('current')
hh3cFlex10RemoteSchannelEntry = MibTableRow((1, 3, 6, 1, 4, 1, 25506, 2, 134, 3, 2, 1), ).setIndexNames((0, "HH3C-EVB-MIB", "hh3cFlex10PortNumber"), (0, "HH3C-EVB-MIB", "hh3cEvbSchannelID"))
if mibBuilder.loadTexts: hh3cFlex10RemoteSchannelEntry.setStatus('current')
hh3cFlex10RemSchDesFormat = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 134, 3, 2, 1, 1), Bits().clone(namedValues=NamedValues(("format0", 0), ("format1", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cFlex10RemSchDesFormat.setStatus('current')
hh3cFlex10RemSchTerminationType = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 134, 3, 2, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cFlex10RemSchTerminationType.setStatus('current')
hh3cFlex10RemSchTerminationCap = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 134, 3, 2, 1, 3), Bits().clone(namedValues=NamedValues(("ethernet", 0), ("fCOE", 1), ("iSCSI", 2), ("roCEE", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cFlex10RemSchTerminationCap.setStatus('current')
hh3cFlex10RemSchTrafficClass = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 134, 3, 2, 1, 4), Bits().clone(namedValues=NamedValues(("class0", 0), ("class1", 1), ("class2", 2), ("class3", 3), ("class4", 4), ("class5", 5), ("class6", 6), ("class7", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cFlex10RemSchTrafficClass.setStatus('current')
hh3cFlex10RemSchCir = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 134, 3, 2, 1, 5), Integer32()).setUnits('mbps').setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cFlex10RemSchCir.setStatus('current')
hh3cFlex10RemSchPir = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 134, 3, 2, 1, 6), Integer32()).setUnits('mbps').setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cFlex10RemSchPir.setStatus('current')
hh3cFlex10RemSchConnectionID = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 134, 3, 2, 1, 7), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cFlex10RemSchConnectionID.setStatus('current')
hh3cFlex10SchannelLinkCtlTable = MibTable((1, 3, 6, 1, 4, 1, 25506, 2, 134, 3, 3), )
if mibBuilder.loadTexts: hh3cFlex10SchannelLinkCtlTable.setStatus('current')
hh3cFlex10SchannelLinkCtlEntry = MibTableRow((1, 3, 6, 1, 4, 1, 25506, 2, 134, 3, 3, 1), ).setIndexNames((0, "HH3C-EVB-MIB", "hh3cFlex10PortNumber"), (0, "HH3C-EVB-MIB", "hh3cEvbSchannelID"))
if mibBuilder.loadTexts: hh3cFlex10SchannelLinkCtlEntry.setStatus('current')
hh3cFlex10SchannelSVID = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 134, 3, 3, 1, 1), VlanIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cFlex10SchannelSVID.setStatus('current')
hh3cFlex10SchannelLocalStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 134, 3, 3, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("unknown", 1), ("disabled", 2), ("enabled", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cFlex10SchannelLocalStatus.setStatus('current')
hh3cFlex10SchannelRemoteStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 134, 3, 3, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("unknown", 1), ("disabled", 2), ("enabled", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cFlex10SchannelRemoteStatus.setStatus('current')
mibBuilder.exportSymbols("HH3C-EVB-MIB", hh3cFlex10SchannelLocalStatus=hh3cFlex10SchannelLocalStatus, hh3cFlex10RemSchTerminationCap=hh3cFlex10RemSchTerminationCap, hh3cEvbDefaultManagerTable=hh3cEvbDefaultManagerTable, hh3cEvbPortNumber=hh3cEvbPortNumber, hh3cEvbVSIMac=hh3cEvbVSIMac, hh3cFlex10SchannelSVID=hh3cFlex10SchannelSVID, hh3cFlex10RemSchDesFormat=hh3cFlex10RemSchDesFormat, hh3cEvbVSIVlanId=hh3cEvbVSIVlanId, hh3cEvbMacLearningStatus=hh3cEvbMacLearningStatus, hh3cFlex10RemSchConnectionID=hh3cFlex10RemSchConnectionID, hh3cFlex10PortConfigEntry=hh3cFlex10PortConfigEntry, hh3cEvbManagerRowStatus=hh3cEvbManagerRowStatus, hh3cEvbManagerPort=hh3cEvbManagerPort, hh3cEvbSysObjects=hh3cEvbSysObjects, hh3cEvbSchannelSVLAN=hh3cEvbSchannelSVLAN, hh3cEvbGroupID=hh3cEvbGroupID, hh3cFlex10RemSchTrafficClass=hh3cFlex10RemSchTrafficClass, hh3cEvbManagerIndex=hh3cEvbManagerIndex, hh3cFlex10RemSchTerminationType=hh3cFlex10RemSchTerminationType, hh3cFlex10PortNumber=hh3cFlex10PortNumber, hh3cEvbPortConfigTable=hh3cEvbPortConfigTable, hh3cEvbVSIConfigEntry=hh3cEvbVSIConfigEntry, hh3cEvbPortObjects=hh3cEvbPortObjects, hh3cEvbManagerType=hh3cEvbManagerType, hh3cEvbSchannelConfigEntry=hh3cEvbSchannelConfigEntry, hh3cEvbSchannelID=hh3cEvbSchannelID, hh3cEvbRWD=hh3cEvbRWD, hh3cEvbSBPPortNumber=hh3cEvbSBPPortNumber, hh3cFlex10SchannelRemoteStatus=hh3cFlex10SchannelRemoteStatus, PYSNMP_MODULE_ID=hh3cEvb, hh3cEvbVSIIfIndex=hh3cEvbVSIIfIndex, hh3cFlex10RemoteSchannelEntry=hh3cFlex10RemoteSchannelEntry, hh3cFlex10SchannelLinkCtlTable=hh3cFlex10SchannelLinkCtlTable, hh3cFlex10RemoteSchannelTable=hh3cFlex10RemoteSchannelTable, hh3cEvbVSIFilterConfigTable=hh3cEvbVSIFilterConfigTable, hh3cEvb=hh3cEvb, hh3cEvbPortConfigEntry=hh3cEvbPortConfigEntry, hh3cFlex10PortConfigTable=hh3cFlex10PortConfigTable, hh3cEvbRKA=hh3cEvbRKA, hh3cEvbRRStatus=hh3cEvbRRStatus, hh3cEvbVSIIsActive=hh3cEvbVSIIsActive, hh3cEvbVSILocalID=hh3cEvbVSILocalID, hh3cEvbSetResult=hh3cEvbSetResult, hh3cFlex10RemSchCir=hh3cFlex10RemSchCir, hh3cEvbSchannelRowStatus=hh3cEvbSchannelRowStatus, hh3cEvbVSIFilterRowStatus=hh3cEvbVSIFilterRowStatus, hh3cEvbManagerID=hh3cEvbManagerID, hh3cEvbVSIConfigTable=hh3cEvbVSIConfigTable, hh3cFlex10Objects=hh3cFlex10Objects, hh3cFlex10PortEnableStatus=hh3cFlex10PortEnableStatus, hh3cEvbSchannelConfigTable=hh3cEvbSchannelConfigTable, hh3cEvbVSIFilterConfigEntry=hh3cEvbVSIFilterConfigEntry, hh3cEvbVSICommand=hh3cEvbVSICommand, hh3cEvbVSIRowStatus=hh3cEvbVSIRowStatus, hh3cEvbDefaultManagerEntry=hh3cEvbDefaultManagerEntry, hh3cFlex10RemSchPir=hh3cFlex10RemSchPir, hh3cFlex10SchannelLinkCtlEntry=hh3cFlex10SchannelLinkCtlEntry)
