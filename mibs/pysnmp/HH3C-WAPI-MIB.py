#
# PySNMP MIB module HH3C-WAPI-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/HH3C-WAPI-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 19:17:46 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, ObjectIdentifier, OctetString = mibBuilder.importSymbols("ASN1", "Integer", "ObjectIdentifier", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
SingleValueConstraint, ConstraintsIntersection, ValueRangeConstraint, ConstraintsUnion, ValueSizeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "SingleValueConstraint", "ConstraintsIntersection", "ValueRangeConstraint", "ConstraintsUnion", "ValueSizeConstraint")
hh3cCommon, = mibBuilder.importSymbols("HH3C-OID-MIB", "hh3cCommon")
ifIndex, ifDescr = mibBuilder.importSymbols("IF-MIB", "ifIndex", "ifDescr")
InetAddressType, InetAddress = mibBuilder.importSymbols("INET-ADDRESS-MIB", "InetAddressType", "InetAddress")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
MibIdentifier, NotificationType, Gauge32, Counter64, Counter32, Unsigned32, iso, ModuleIdentity, Bits, ObjectIdentity, Integer32, MibScalar, MibTable, MibTableRow, MibTableColumn, TimeTicks, IpAddress = mibBuilder.importSymbols("SNMPv2-SMI", "MibIdentifier", "NotificationType", "Gauge32", "Counter64", "Counter32", "Unsigned32", "iso", "ModuleIdentity", "Bits", "ObjectIdentity", "Integer32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "TimeTicks", "IpAddress")
TruthValue, MacAddress, TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TruthValue", "MacAddress", "TextualConvention", "DisplayString")
hh3cwapiMIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 25506, 2, 77))
if mibBuilder.loadTexts: hh3cwapiMIB.setLastUpdated('201012011757Z')
if mibBuilder.loadTexts: hh3cwapiMIB.setOrganization('Hangzhou H3C Tech. Co., Ltd.')
hh3cwapiMIBObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 25506, 2, 77, 1))
hh3cwapiMIBStatsObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 25506, 2, 77, 2))
hh3cwapiMIBTableObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 25506, 2, 77, 3))
hh3cwapiTrap = MibIdentifier((1, 3, 6, 1, 4, 1, 25506, 2, 77, 4))
hh3cwapiModeEnabled = MibScalar((1, 3, 6, 1, 4, 1, 25506, 2, 77, 1, 1), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hh3cwapiModeEnabled.setStatus('current')
hh3cwapiASIPAddressType = MibScalar((1, 3, 6, 1, 4, 1, 25506, 2, 77, 1, 2), InetAddressType().clone('ipv4')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hh3cwapiASIPAddressType.setStatus('current')
hh3cwapiASIPAddress = MibScalar((1, 3, 6, 1, 4, 1, 25506, 2, 77, 1, 3), InetAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hh3cwapiASIPAddress.setStatus('current')
hh3cwapiCertificateInstalled = MibScalar((1, 3, 6, 1, 4, 1, 25506, 2, 77, 1, 4), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cwapiCertificateInstalled.setStatus('current')
hh3cwapiStatsWAISignatureErrors = MibScalar((1, 3, 6, 1, 4, 1, 25506, 2, 77, 2, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cwapiStatsWAISignatureErrors.setStatus('current')
hh3cwapiStatsWAIHMACErrors = MibScalar((1, 3, 6, 1, 4, 1, 25506, 2, 77, 2, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cwapiStatsWAIHMACErrors.setStatus('current')
hh3cwapiStatsWAIAuthRsltFailures = MibScalar((1, 3, 6, 1, 4, 1, 25506, 2, 77, 2, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cwapiStatsWAIAuthRsltFailures.setStatus('current')
hh3cwapiStatsWAIDiscardCounters = MibScalar((1, 3, 6, 1, 4, 1, 25506, 2, 77, 2, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cwapiStatsWAIDiscardCounters.setStatus('current')
hh3cwapiStatsWAITimeoutCounters = MibScalar((1, 3, 6, 1, 4, 1, 25506, 2, 77, 2, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cwapiStatsWAITimeoutCounters.setStatus('current')
hh3cwapiStatsWAIFormatErrors = MibScalar((1, 3, 6, 1, 4, 1, 25506, 2, 77, 2, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cwapiStatsWAIFormatErrors.setStatus('current')
hh3cwapiStatsWAICtfHskFailures = MibScalar((1, 3, 6, 1, 4, 1, 25506, 2, 77, 2, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cwapiStatsWAICtfHskFailures.setStatus('current')
hh3cwapiStatsWAIUniHskFailures = MibScalar((1, 3, 6, 1, 4, 1, 25506, 2, 77, 2, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cwapiStatsWAIUniHskFailures.setStatus('current')
hh3cwapiStatsWAIMulHskFailures = MibScalar((1, 3, 6, 1, 4, 1, 25506, 2, 77, 2, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cwapiStatsWAIMulHskFailures.setStatus('current')
hh3cwapiConfigTable = MibTable((1, 3, 6, 1, 4, 1, 25506, 2, 77, 3, 1), )
if mibBuilder.loadTexts: hh3cwapiConfigTable.setStatus('current')
hh3cwapiConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 25506, 2, 77, 3, 1, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: hh3cwapiConfigEntry.setStatus('current')
hh3cwapiConfigASIPAddressType = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 77, 3, 1, 1, 1), InetAddressType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hh3cwapiConfigASIPAddressType.setStatus('current')
hh3cwapiConfigASIPAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 77, 3, 1, 1, 2), InetAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hh3cwapiConfigASIPAddress.setStatus('current')
hh3cwapiConfigAuthMethod = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 77, 3, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("certificate", 1), ("psk", 2), ("certificatePsk", 3))).clone('certificate')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hh3cwapiConfigAuthMethod.setStatus('current')
hh3cwapiConfigAuthMode = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 77, 3, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("standard", 1), ("radiusExtension", 2))).clone('standard')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hh3cwapiConfigAuthMode.setStatus('current')
hh3cwapiConfigISPDomain = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 77, 3, 1, 1, 5), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 24))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hh3cwapiConfigISPDomain.setStatus('current')
hh3cwapiConfigCertificateDomain = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 77, 3, 1, 1, 6), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 15))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hh3cwapiConfigCertificateDomain.setStatus('current')
hh3cwapiConfigASName = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 77, 3, 1, 1, 7), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 15))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hh3cwapiConfigASName.setStatus('current')
hh3cwapiConfigBKRekeyEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 77, 3, 1, 1, 8), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hh3cwapiConfigBKRekeyEnabled.setStatus('current')
hh3cwapiConfigExtTable = MibTable((1, 3, 6, 1, 4, 1, 25506, 2, 77, 3, 2), )
if mibBuilder.loadTexts: hh3cwapiConfigExtTable.setStatus('current')
hh3cwapiConfigExtEntry = MibTableRow((1, 3, 6, 1, 4, 1, 25506, 2, 77, 3, 2, 1), ).setIndexNames((0, "HH3C-WAPI-MIB", "hh3cwapiConfigServicePolicyID"))
if mibBuilder.loadTexts: hh3cwapiConfigExtEntry.setStatus('current')
hh3cwapiConfigServicePolicyID = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 77, 3, 2, 1, 1), Integer32())
if mibBuilder.loadTexts: hh3cwapiConfigServicePolicyID.setStatus('current')
hh3cwapiConfigUnicastCipherEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 77, 3, 2, 1, 2), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hh3cwapiConfigUnicastCipherEnabled.setStatus('current')
hh3cwapiConfigUnicastCipherSize = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 77, 3, 2, 1, 3), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cwapiConfigUnicastCipherSize.setStatus('current')
hh3cwapiConfigAuthenticationSuiteEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 77, 3, 2, 1, 4), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hh3cwapiConfigAuthenticationSuiteEnabled.setStatus('current')
hh3cwapiConfigAuthenticationSuite = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 77, 3, 2, 1, 5), OctetString().subtype(subtypeSpec=ValueSizeConstraint(4, 4)).setFixedLength(4)).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cwapiConfigAuthenticationSuite.setStatus('current')
hh3cwapiCfgExtASIPAddressType = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 77, 3, 2, 1, 6), InetAddressType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hh3cwapiCfgExtASIPAddressType.setStatus('current')
hh3cwapiCfgExtASIPAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 77, 3, 2, 1, 7), InetAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hh3cwapiCfgExtASIPAddress.setStatus('current')
hh3cwapiCfgExtASName = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 77, 3, 2, 1, 8), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 15))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hh3cwapiCfgExtASName.setStatus('current')
hh3cwapiCfgExtCertDomain = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 77, 3, 2, 1, 9), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 15))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hh3cwapiCfgExtCertDomain.setStatus('current')
hh3cwapiCfgExtCertInstalled = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 77, 3, 2, 1, 10), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cwapiCfgExtCertInstalled.setStatus('current')
hh3cwapiTrapPrefix = MibIdentifier((1, 3, 6, 1, 4, 1, 25506, 2, 77, 4, 0))
hh3cwapiUserwithInvalidCertificate = NotificationType((1, 3, 6, 1, 4, 1, 25506, 2, 77, 4, 0, 1)).setObjects(("IF-MIB", "ifIndex"), ("IF-MIB", "ifDescr"), ("HH3C-WAPI-MIB", "hh3cwapiTrapInfoMacAddr"), ("HH3C-WAPI-MIB", "hh3cwapiTrapInfoAPId"), ("HH3C-WAPI-MIB", "hh3cwapiTrapInfoRadioId"), ("HH3C-WAPI-MIB", "hh3cwapiTrapInfoBSSId"))
if mibBuilder.loadTexts: hh3cwapiUserwithInvalidCertificate.setStatus('current')
hh3cwapiStationReplayAttack = NotificationType((1, 3, 6, 1, 4, 1, 25506, 2, 77, 4, 0, 2)).setObjects(("IF-MIB", "ifIndex"), ("IF-MIB", "ifDescr"), ("HH3C-WAPI-MIB", "hh3cwapiTrapInfoMacAddr"), ("HH3C-WAPI-MIB", "hh3cwapiTrapInfoAPId"), ("HH3C-WAPI-MIB", "hh3cwapiTrapInfoRadioId"), ("HH3C-WAPI-MIB", "hh3cwapiTrapInfoBSSId"))
if mibBuilder.loadTexts: hh3cwapiStationReplayAttack.setStatus('current')
hh3cwapiTamperAttack = NotificationType((1, 3, 6, 1, 4, 1, 25506, 2, 77, 4, 0, 3)).setObjects(("IF-MIB", "ifIndex"), ("IF-MIB", "ifDescr"), ("HH3C-WAPI-MIB", "hh3cwapiTrapInfoMacAddr"), ("HH3C-WAPI-MIB", "hh3cwapiTrapInfoAPId"), ("HH3C-WAPI-MIB", "hh3cwapiTrapInfoRadioId"), ("HH3C-WAPI-MIB", "hh3cwapiTrapInfoBSSId"))
if mibBuilder.loadTexts: hh3cwapiTamperAttack.setStatus('current')
hh3cwapiLowSafeLevelAttack = NotificationType((1, 3, 6, 1, 4, 1, 25506, 2, 77, 4, 0, 4)).setObjects(("IF-MIB", "ifIndex"), ("IF-MIB", "ifDescr"), ("HH3C-WAPI-MIB", "hh3cwapiTrapInfoMacAddr"), ("HH3C-WAPI-MIB", "hh3cwapiTrapInfoAPId"), ("HH3C-WAPI-MIB", "hh3cwapiTrapInfoRadioId"), ("HH3C-WAPI-MIB", "hh3cwapiTrapInfoBSSId"))
if mibBuilder.loadTexts: hh3cwapiLowSafeLevelAttack.setStatus('current')
hh3cwapiAddressRedirectionAttack = NotificationType((1, 3, 6, 1, 4, 1, 25506, 2, 77, 4, 0, 5)).setObjects(("IF-MIB", "ifIndex"), ("IF-MIB", "ifDescr"), ("HH3C-WAPI-MIB", "hh3cwapiTrapInfoMacAddr"), ("HH3C-WAPI-MIB", "hh3cwapiTrapInfoAPId"), ("HH3C-WAPI-MIB", "hh3cwapiTrapInfoRadioId"), ("HH3C-WAPI-MIB", "hh3cwapiTrapInfoBSSId"))
if mibBuilder.loadTexts: hh3cwapiAddressRedirectionAttack.setStatus('current')
hh3cwapiTrapInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 25506, 2, 77, 4, 1))
hh3cwapiTrapInfoMacAddr = MibScalar((1, 3, 6, 1, 4, 1, 25506, 2, 77, 4, 1, 1), MacAddress()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: hh3cwapiTrapInfoMacAddr.setStatus('current')
hh3cwapiTrapInfoAPId = MibScalar((1, 3, 6, 1, 4, 1, 25506, 2, 77, 4, 1, 2), Integer32()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: hh3cwapiTrapInfoAPId.setStatus('current')
hh3cwapiTrapInfoRadioId = MibScalar((1, 3, 6, 1, 4, 1, 25506, 2, 77, 4, 1, 3), Integer32()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: hh3cwapiTrapInfoRadioId.setStatus('current')
hh3cwapiTrapInfoBSSId = MibScalar((1, 3, 6, 1, 4, 1, 25506, 2, 77, 4, 1, 4), MacAddress()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: hh3cwapiTrapInfoBSSId.setStatus('current')
mibBuilder.exportSymbols("HH3C-WAPI-MIB", hh3cwapiStatsWAIHMACErrors=hh3cwapiStatsWAIHMACErrors, hh3cwapiStatsWAICtfHskFailures=hh3cwapiStatsWAICtfHskFailures, hh3cwapiCfgExtASIPAddress=hh3cwapiCfgExtASIPAddress, hh3cwapiConfigASIPAddressType=hh3cwapiConfigASIPAddressType, hh3cwapiTrapInfoBSSId=hh3cwapiTrapInfoBSSId, hh3cwapiMIBObjects=hh3cwapiMIBObjects, hh3cwapiConfigAuthMode=hh3cwapiConfigAuthMode, hh3cwapiConfigAuthenticationSuite=hh3cwapiConfigAuthenticationSuite, hh3cwapiTrapInfo=hh3cwapiTrapInfo, PYSNMP_MODULE_ID=hh3cwapiMIB, hh3cwapiUserwithInvalidCertificate=hh3cwapiUserwithInvalidCertificate, hh3cwapiConfigAuthMethod=hh3cwapiConfigAuthMethod, hh3cwapiTrapInfoAPId=hh3cwapiTrapInfoAPId, hh3cwapiCfgExtASIPAddressType=hh3cwapiCfgExtASIPAddressType, hh3cwapiConfigServicePolicyID=hh3cwapiConfigServicePolicyID, hh3cwapiConfigASIPAddress=hh3cwapiConfigASIPAddress, hh3cwapiAddressRedirectionAttack=hh3cwapiAddressRedirectionAttack, hh3cwapiConfigUnicastCipherEnabled=hh3cwapiConfigUnicastCipherEnabled, hh3cwapiASIPAddressType=hh3cwapiASIPAddressType, hh3cwapiCertificateInstalled=hh3cwapiCertificateInstalled, hh3cwapiStatsWAIUniHskFailures=hh3cwapiStatsWAIUniHskFailures, hh3cwapiConfigASName=hh3cwapiConfigASName, hh3cwapiConfigExtEntry=hh3cwapiConfigExtEntry, hh3cwapiConfigAuthenticationSuiteEnabled=hh3cwapiConfigAuthenticationSuiteEnabled, hh3cwapiStatsWAIAuthRsltFailures=hh3cwapiStatsWAIAuthRsltFailures, hh3cwapiStatsWAITimeoutCounters=hh3cwapiStatsWAITimeoutCounters, hh3cwapiCfgExtCertInstalled=hh3cwapiCfgExtCertInstalled, hh3cwapiTrapPrefix=hh3cwapiTrapPrefix, hh3cwapiTrapInfoMacAddr=hh3cwapiTrapInfoMacAddr, hh3cwapiTrapInfoRadioId=hh3cwapiTrapInfoRadioId, hh3cwapiStatsWAIDiscardCounters=hh3cwapiStatsWAIDiscardCounters, hh3cwapiConfigCertificateDomain=hh3cwapiConfigCertificateDomain, hh3cwapiConfigTable=hh3cwapiConfigTable, hh3cwapiMIBTableObjects=hh3cwapiMIBTableObjects, hh3cwapiCfgExtASName=hh3cwapiCfgExtASName, hh3cwapiStatsWAIFormatErrors=hh3cwapiStatsWAIFormatErrors, hh3cwapiConfigEntry=hh3cwapiConfigEntry, hh3cwapiCfgExtCertDomain=hh3cwapiCfgExtCertDomain, hh3cwapiStatsWAIMulHskFailures=hh3cwapiStatsWAIMulHskFailures, hh3cwapiStatsWAISignatureErrors=hh3cwapiStatsWAISignatureErrors, hh3cwapiConfigISPDomain=hh3cwapiConfigISPDomain, hh3cwapiConfigUnicastCipherSize=hh3cwapiConfigUnicastCipherSize, hh3cwapiModeEnabled=hh3cwapiModeEnabled, hh3cwapiTrap=hh3cwapiTrap, hh3cwapiConfigExtTable=hh3cwapiConfigExtTable, hh3cwapiStationReplayAttack=hh3cwapiStationReplayAttack, hh3cwapiASIPAddress=hh3cwapiASIPAddress, hh3cwapiLowSafeLevelAttack=hh3cwapiLowSafeLevelAttack, hh3cwapiMIBStatsObjects=hh3cwapiMIBStatsObjects, hh3cwapiTamperAttack=hh3cwapiTamperAttack, hh3cwapiMIB=hh3cwapiMIB, hh3cwapiConfigBKRekeyEnabled=hh3cwapiConfigBKRekeyEnabled)
