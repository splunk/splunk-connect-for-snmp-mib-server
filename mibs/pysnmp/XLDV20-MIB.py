#
# PySNMP MIB module XLDV20-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/XLDV20-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 21:37:59 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
onu, = mibBuilder.importSymbols("AN-MIB", "onu")
ObjectIdentifier, OctetString, Integer = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "OctetString", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
SingleValueConstraint, ConstraintsIntersection, ValueRangeConstraint, ValueSizeConstraint, ConstraintsUnion = mibBuilder.importSymbols("ASN1-REFINEMENT", "SingleValueConstraint", "ConstraintsIntersection", "ValueRangeConstraint", "ValueSizeConstraint", "ConstraintsUnion")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
Gauge32, TimeTicks, Bits, IpAddress, Unsigned32, MibIdentifier, Counter64, Counter32, ObjectIdentity, NotificationType, iso, Integer32, NotificationType, MibScalar, MibTable, MibTableRow, MibTableColumn, ModuleIdentity = mibBuilder.importSymbols("SNMPv2-SMI", "Gauge32", "TimeTicks", "Bits", "IpAddress", "Unsigned32", "MibIdentifier", "Counter64", "Counter32", "ObjectIdentity", "NotificationType", "iso", "Integer32", "NotificationType", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "ModuleIdentity")
DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention")
xldv20 = MibIdentifier((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4))
class Xldv20ControlStatus(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))
    namedValues = NamedValues(("requestIdle", 1), ("requestBusy", 2), ("requestPassed", 3), ("requestFailed", 4))

class Xldv20OperState(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2))
    namedValues = NamedValues(("enabled", 1), ("disabled", 2))

class Xldv20SlotStatus(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2))
    namedValues = NamedValues(("unknown", 0), ("used", 1), ("empty", 2))

class Xldv20AdminState(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2))
    namedValues = NamedValues(("unlocked", 1), ("locked", 2))

class Xldv20AvailStatus(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 7))
    namedValues = NamedValues(("available", 1), ("failed", 2), ("degraded", 3), ("offline", 4), ("notInstalled", 5), ("dependency", 7))

class Xldv20LinkState(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 6, 7, 255))
    namedValues = NamedValues(("quiet", 0), ("idle", 1), ("train", 2), ("active", 3), ("download", 4), ("remoteDownload", 6), ("sleepMode", 7), ("unknown", 255))

class Xldv20DbuReadStatus(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(7081, 7082, 7083, 7084))
    namedValues = NamedValues(("dbuReadComplete", 7081), ("dbuReadFailed", 7082), ("dbuFileCreationFailed", 7083), ("dbuFileTransmissionFailed", 7084))

class Xldv20TelnetAccess(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))
    namedValues = NamedValues(("read", 1), ("trace", 2), ("write", 3), ("noAccess", 4))

class Xldv20TvTelnetSessionStatus(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2))
    namedValues = NamedValues(("running", 1), ("stopped", 2))

class Xldv20EndpointType(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3))
    namedValues = NamedValues(("source", 1), ("sink", 2), ("both", 3))

class Xldv20RstResult(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(4))
    namedValues = NamedValues(("requestFailed", 4))

class Xldv20ImaGroupState(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10))
    namedValues = NamedValues(("notConfigured", 1), ("startUp", 2), ("startUpAck", 3), ("configAbortUnsupported", 4), ("configAbortIncompatibleSymmetry", 5), ("configAbortOther", 6), ("insufficientLinks", 7), ("blocked", 8), ("operational", 9), ("configAbortUnsupportedImaVersion", 10))

class Xldv20ImaGroupFailureStatus(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14))
    namedValues = NamedValues(("noFailure", 1), ("startUpNe", 2), ("startUpFe", 3), ("invalidValueNe", 4), ("invalidValueFe", 5), ("failedAssymetricNe", 6), ("failedAssymetricFe", 7), ("insufficientLinksNe", 8), ("insufficientLinksFe", 9), ("blockedNe", 10), ("blockedFe", 11), ("otherFailure", 12), ("invalidImaVersionNe", 13), ("invalidImaVersionFe", 14))

class Xldv20ImaGroupTxClkMode(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2))
    namedValues = NamedValues(("ctc", 1), ("itc", 2))

class Xldv20ImaGroupSymmetry(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3))
    namedValues = NamedValues(("symmetricOperation", 1), ("asymmetricOperation", 2), ("asymmetricConfiguration", 3))

class Xldv20ImaFrameLength(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(32, 64, 128, 256))
    namedValues = NamedValues(("m32", 32), ("m64", 64), ("m128", 128), ("m256", 256))

class Xldv20ImaLinkState(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8))
    namedValues = NamedValues(("notInGroup", 1), ("unusableNoGivenReason", 2), ("unusableFault", 3), ("unusableMisconnected", 4), ("unusableInhibited", 5), ("unusableFailed", 6), ("usable", 7), ("active", 8))

class Xldv20ImaLinkFailureStatus(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9))
    namedValues = NamedValues(("noFailure", 1), ("imaLinkFailure", 2), ("lifFailure", 3), ("lodsFailure", 4), ("misConnected", 5), ("blocked", 6), ("fault", 7), ("farEndTxLinkUnusable", 8), ("farEndRxLinkUnusable", 9))

class DisplayString(OctetString):
    subtypeSpec = OctetString.subtypeSpec + ValueSizeConstraint(0, 255)

class Unsigned16(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ValueRangeConstraint(0, 65535)

class MilliSeconds(Integer32):
    pass

class Xldv20HwUnitType(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3))
    namedValues = NamedValues(("equipment", 1), ("equipmentHolder", 2), ("plugInUnit", 3))

class Xldv20IfType(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 20, 21, 22, 23, 24, 25, 107))
    namedValues = NamedValues(("s1n", 1), ("s1f", 2), ("adc", 3), ("adr", 4), ("ibm", 5), ("tca", 6), ("pon", 7), ("vdc", 8), ("vdr", 9), ("eth", 10), ("d3n", 11), ("d3f", 12), ("e3n", 13), ("e3f", 14), ("s3n", 15), ("s3f", 16), ("e1nIma", 20), ("e1fIma", 21), ("d1nIma", 22), ("d1fIma", 23), ("sdc", 24), ("sdr", 25), ("atmIma", 107))

class Xldv20AlarmState(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 105, 114, 115, 116, 117, 123, 130, 131, 132, 141, 407, 408, 409, 410, 411, 412, 413, 450, 451, 452, 453, 454, 455, 456))
    namedValues = NamedValues(("noAlarm", 0), ("hpEBER", 1), ("hpUNEQ", 2), ("lcd", 3), ("lof", 4), ("lop", 5), ("los", 6), ("msAIS", 7), ("msEBER", 8), ("msRDI", 9), ("msSD", 10), ("pAIS", 11), ("pRDI", 12), ("rsEBER", 13), ("slm", 14), ("tim", 15), ("actFault", 16), ("xmissionErr", 105), ("ais", 114), ("rdi", 115), ("plcpLof", 116), ("plcpRDI", 117), ("internalFault", 123), ("immMNR", 130), ("lpr", 131), ("lol", 132), ("wrongServiceConfigData", 141), ("excBER", 407), ("lif", 408), ("lods", 409), ("txUnusableFe", 410), ("rxUnusableFe", 411), ("rfiIma", 412), ("rai", 413), ("startUpFe", 450), ("configAbort", 451), ("configAbortFe", 452), ("insufficientLinks", 453), ("insufficientLinksFe", 454), ("blockedFe", 455), ("imaMinNumOfLinks", 456))

class Xldv20SuppressionType(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))
    namedValues = NamedValues(("noTraps", 1), ("allTraps", 2), ("noEvents", 3), ("noAlarms", 4))

class Xldv20TrafficType(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))
    namedValues = NamedValues(("cbr", 1), ("ubr", 2), ("nrtVbr", 3), ("rtVbr", 4))

class Xldv20TrafficDirection(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3))
    namedValues = NamedValues(("bidirectional", 1), ("upstream", 2), ("downstream", 3))

class Xldv20EqhType(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))
    namedValues = NamedValues(("shelf", 1), ("slot", 2), ("basicShelf", 3), ("extendedShelf", 4), ("ntAdslShelf", 5), ("ntVdslShelf", 6), ("cpeShelf", 7))

class Xldv20LineType(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8))
    namedValues = NamedValues(("other", 1), ("shortSingleMode", 2), ("mediumSingleMode", 3), ("longSingleMode", 4), ("coax", 5), ("utp", 6), ("e3direct", 7), ("ds3plcp", 8))

class Xldv20S1nS3nEberThreshold(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 255))
    namedValues = NamedValues(("exp10E3", 1), ("exp10E4", 2), ("exp10E5", 3), ("noSupervision", 255))

class Xldv20S1nS3nSDThreshold(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(3, 4, 5, 6, 7, 255))
    namedValues = NamedValues(("exp10E5", 3), ("exp10E6", 4), ("exp10E7", 5), ("exp10E8", 6), ("exp10E9", 7), ("noSupervision", 255))

class Xldv20AlarmSeverity(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))
    namedValues = NamedValues(("critical", 1), ("major", 2), ("minor", 3), ("warning", 4), ("noAlarming", 5))

class Xldv20AlmSevProfileIndex(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ValueRangeConstraint(1, 40)

class Xldv20AlmFiltProfileIndex(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ValueRangeConstraint(1, 40)

class Xldv20RiResultType(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3))
    namedValues = NamedValues(("riRemoteInventoryComplete", 1), ("riFileCreationFailed", 2), ("riFileTransmissionFailed", 3))

class Xldv20RowStatus(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2))
    namedValues = NamedValues(("create", 1), ("delete", 2))

class Xldv20CodingType(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2))
    namedValues = NamedValues(("e3HDB3", 1), ("dsx3B3ZS", 2))

class Xldv20ExtAlarmActivityState(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2))
    namedValues = NamedValues(("undeterminate", 0), ("on", 1), ("off", 2))

class Xldv20EmptyCellType(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2))
    namedValues = NamedValues(("idle", 1), ("unassigned", 2))

class Xldv20LogType(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3))
    namedValues = NamedValues(("hwmLog", 1), ("sweLog", 2), ("swTraceLog", 3))

class Xldv20SucAllOfType(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 10))
    namedValues = NamedValues(("sucUpgrSingle", 1), ("sucUpgrAll", 2), ("sucLoadTypeUnknown", 10))

class Xldv20ResetLevel(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(3, 4))
    namedValues = NamedValues(("plugInUnit", 3), ("system", 4))

class Xldv20VdcRateDn(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(2, 4, 6, 8, 12, 16, 24, 32, 48, 64))
    namedValues = NamedValues(("rateDn2", 2), ("rateDn4", 4), ("rateDn6", 6), ("rateDn8", 8), ("rateDn12", 12), ("rateDn16", 16), ("rateDn24", 24), ("rateDn32", 32), ("rateDn48", 48), ("rateDn64", 64))

class Xldv20VdcRateUp(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 4, 8, 12, 16))
    namedValues = NamedValues(("rateUp1", 1), ("rateUp2", 2), ("rateUp4", 4), ("rateUp8", 8), ("rateUp12", 12), ("rateUp16", 16))

class Xldv20VdcLatencyDn(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 2, 4, 8, 12, 16, 20, 32))
    namedValues = NamedValues(("latencyDn0", 0), ("latencyDn2", 2), ("latencyDn4", 4), ("latencyDn8", 8), ("latencyDn12", 12), ("latencyDn16", 16), ("latencyDn20", 20), ("latencyDn32", 32))

class Xldv20VdcLatencyUp(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 2, 4, 8, 10, 20))
    namedValues = NamedValues(("latencyUp0", 0), ("latencyUp2", 2), ("latencyUp4", 4), ("latencyUp8", 8), ("latencyUp10", 10), ("latencyUp20", 20))

class Xldv20VdcPowerBoostAdaptationType(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))
    namedValues = NamedValues(("suEnabled", 1), ("ntEnabled", 2), ("bothEnabled", 3), ("bothDisabled", 4))

class Xldv20VdcVdslMode(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2))
    namedValues = NamedValues(("adslFriendly", 1), ("vdslEfficient", 2))

class Xldv20VdcPsdMask(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2))
    namedValues = NamedValues(("m1", 1), ("m2", 2))

class Xldv20EthNtMode(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 4))
    namedValues = NamedValues(("bridging", 1), ("routing", 2), ("currentConfiguration", 4))

class Xldv20E3nPayloadType(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3))
    namedValues = NamedValues(("unequipped", 1), ("nonSpecific", 2), ("atm", 3))

class Xldv20CallpAlarmState(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2))
    namedValues = NamedValues(("noAlarm", 1), ("alarmPresent", 2))

class Xldv20TpAlarmState(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))
    namedValues = NamedValues(("noAlarm", 1), ("upstreamAlarm", 2), ("downstreamAlarm", 3), ("upAndDownstreamAlarm", 4))

class Xldv20Latency(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 256))
    namedValues = NamedValues(("interleavedLow", 0), ("interleavedHigh", 1), ("fast", 256))

class Xldv20TestType(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2))
    namedValues = NamedValues(("segment", 1), ("endToEnd", 2))

class Xldv20FlowDirection(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3))
    namedValues = NamedValues(("undefined", 1), ("inwards", 2), ("outwards", 3))

class Xldv20OamLevel(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5))
    namedValues = NamedValues(("undefined", 0), ("f1", 1), ("f2", 2), ("f3", 3), ("f4", 4), ("f5", 5))

class Xldv20TrapIds(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 38, 40, 41, 42, 44, 45, 46, 100, 101, 105, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 127, 128, 130, 131, 132, 135, 136, 137, 139, 140, 141, 142, 143, 144, 145, 150, 151, 152, 200, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 450, 451, 452, 453, 454, 455, 456, 457, 458))
    namedValues = NamedValues(("trNoTrapId", 0), ("trHpExcBER", 1), ("trHpUNEQ", 2), ("trLcd", 3), ("trLof", 4), ("trLop", 5), ("trLos", 6), ("trMsAIS", 7), ("trMsExcBER", 8), ("trMsRDI", 9), ("trMsSD", 10), ("trPAIS", 11), ("trPRDI", 12), ("trRsExcBER", 13), ("trSlm", 14), ("trTim", 15), ("trActFault", 16), ("trReplaceableUnitTypeMismatch", 17), ("trReplaceableUnitFailure", 18), ("trReplaceableUnitProblem", 19), ("trReplaceableUnitNotInstalled", 20), ("trReplaceableUnitSwMismatch", 21), ("trReplaceableUnitReset", 22), ("trReplaceableUnitResetEnd", 23), ("trStartupEnd", 24), ("trLctSession", 25), ("trAgentRunning", 26), ("trRstResult", 27), ("trPltTestResult", 28), ("trStateChangeAdmin", 29), ("trStateChangeOper", 30), ("trChangeRate", 31), ("trCmuReadyForReset", 32), ("trAltTestResult", 33), ("trActivateLoadResult", 34), ("trPUUpgradeSucc", 35), ("trUpgradeCancelled", 36), ("trFtpError", 38), ("trSweLogRead", 40), ("trHwmLogRead", 41), ("trTraceLogRead", 42), ("trActCcReload", 44), ("trVplCcCreation", 45), ("trVplCcDeletion", 46), ("trObjCreate", 100), ("trObjDelete", 101), ("trXmissionErr", 105), ("trExternalAlarm", 110), ("trUnitReadyForReset", 111), ("trHwuControl", 112), ("trReplaceableUnitRemoved", 113), ("trAIS", 114), ("trRDI", 115), ("trPlcpLof", 116), ("trPlcpRDI", 117), ("trRemInvReady", 118), ("trDbBackup", 119), ("trSwVersionSet", 120), ("trReadSAPSContentFileReady", 121), ("trReplaceableUnitSwMissing", 122), ("trInternalFault", 123), ("trAttributeValueChange", 124), ("trVclCcCreation", 127), ("trVclCcDeletion", 128), ("trImmMNR", 130), ("trLpr", 131), ("trLol", 132), ("trAtmLayerMultiAlarm", 135), ("trTelnetSession", 136), ("trVplCACProblem", 137), ("trVclCACProblem", 139), ("trVplTpReload", 140), ("trWrongServiceConfigData", 141), ("trReplaceableUnitPlugged", 142), ("trReplaceableUnitUnplugged", 143), ("trStateChangeOperExt", 144), ("trLOC", 145), ("trDbRestore", 150), ("trUpgradeEndRequestResult", 151), ("trUnitUpgradeNotRequested", 152), ("trThresholdCrossingAlert", 200), ("trVpcTpCreation", 400), ("trVpcTpDeletion", 401), ("trVpcTpCACProblem", 402), ("trContinuityCheckVpEntryCreated", 403), ("trContinuityCheckVpEntryDeleted", 404), ("trContinuityCheckVcEntryCreated", 405), ("trContinuityCheckVcEntryDeleted", 406), ("trExcBER", 407), ("trLif", 408), ("trLods", 409), ("trTxUnusableFe", 410), ("trRxUnusableFe", 411), ("trRfiIma", 412), ("trRAI", 413), ("trStartUpFe", 450), ("trConfigAbort", 451), ("trConfigAbortFe", 452), ("trInsufficientLinks", 453), ("trInsufficientLinksFe", 454), ("trBlockedFe", 455), ("trImaMinNumOfLinks", 456), ("trStateChangeAvail", 457), ("trMaxTrapId", 458))

class Xldv20Requester(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2))
    namedValues = NamedValues(("tmn", 1), ("hwm", 2))

class Xldv20TimeZone(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44))
    namedValues = NamedValues(("gmt-12Eniwetok", 1), ("gmt-11MidwayIslandsSamoa", 2), ("gmt-10Hawaii", 3), ("gmt-9Alaska", 4), ("gmt-8TijuanaLosAngelesSeattleVancouver", 5), ("gmt-7ArizonaDenverSaltLakeCityCalgary", 6), ("gmt-6ChicagoDallasKansasCityWinnipeg", 7), ("gmt-6MexicoCityTegucigalpaSaskatchewan", 8), ("gmt-5BogotaLimaQuito", 9), ("gmt-5IndianaEast", 10), ("gmt-5NewYorkMiamiAtlantaDetroitToronto", 11), ("gmt-4CaracasLaPazMontrealQuebec", 12), ("gmt-330Neufundland", 13), ("gmt-3BrasiliaBuenosAiresGeorgetown", 14), ("gmt-2MiddleAtlantic", 15), ("gmt-1AzorenKaverdIslands", 16), ("gmtCasablancaDublinLissabonLondon", 17), ("gmt1AmsterdamMadridParisBelgradZagreb", 18), ("gmt1BerlinBernRomeStockholmVienna", 19), ("gmt1BudapestPrahaBratislavaWarschau", 20), ("gmt2AthensIstanbulMinskBukarest", 21), ("gmt2HararePretoriaHelsinkiRevalRiga", 22), ("gmt2IsraelKairo", 23), ("gmt3BagdadKuwaitErRiad", 24), ("gmt3MoskowStPetersburgWolgograd", 25), ("gmt3Nairobi", 26), ("gmt330Teheran", 27), ("gmt4AbuDhabiMuskatBakuTiflis", 28), ("gmt430Kabul", 29), ("gmt5IslamabadKarartschiTaschkent", 30), ("gmt5Jekaterinburg", 31), ("gmt530BombayKaluttaMadrasNewDehli", 32), ("gmt6AkmolaAlmaAtaDhakaColombo", 33), ("gmt7BangkokHanoiJakarta", 34), ("gmt8PekingChongqingHongkongUrumchi", 35), ("gmt8PerthSingapurTaipeh", 36), ("gmt9IrkutskOsakaSapporoTokyoSeoul", 37), ("gmt930AdelaideDarwin", 38), ("gmt10BrisbaneCanberraMlebourneSydney", 39), ("gmt10GuamPortMoresbyHobart", 40), ("gmt10Wladiwostok", 41), ("gmt11MagadanSalomonenNewCaledonia", 42), ("gmt12AucklandWellington", 43), ("gmt12FidschiKamtschatkaMarschallIslands", 44))

class Xldv20DayLightSavingTime(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 10))
    namedValues = NamedValues(("summerTime1", 1), ("summerTime2", 2), ("winterTime", 10))

class Xldv20AdslMargin(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(-127, -126, -125, -124, -123, -122, -121, -120, -119, -118, -117, -116, -115, -114, -113, -112, -111, -110, -109, -108, -107, -106, -105, -104, -103, -102, -101, -100, -99, -98, -97, -96, -95, -94, -93, -92, -91, -90, -89, -88, -87, -86, -85, -84, -83, -82, -81, -80, -79, -78, -77, -76, -75, -74, -73, -72, -71, -70, -69, -68, -67, -66, -65, -64, -63, -62, -61, -60, -59, -58, -57, -56, -55, -54, -53, -52, -51, -50, -49, -48, -47, -46, -45, -44, -43, -42, -41, -40, -39, -38, -37, -36, -35, -34, -33, -32, -31, -30, -29, -28, -27, -26, -25, -24, -23, -22, -21, -20, -19, -18, -17, -16, -15, -14, -13, -12, -11, -10, -9, -8, -7, -6, -5, -4, -3, -2, -1, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127), SingleValueConstraint(128, 32766, 32767))
    namedValues = NamedValues(("dB-127", -127), ("dB-126", -126), ("dB-125", -125), ("dB-124", -124), ("dB-123", -123), ("dB-122", -122), ("dB-121", -121), ("dB-120", -120), ("dB-119", -119), ("dB-118", -118), ("dB-117", -117), ("dB-116", -116), ("dB-115", -115), ("dB-114", -114), ("dB-113", -113), ("dB-112", -112), ("dB-111", -111), ("dB-110", -110), ("dB-109", -109), ("dB-108", -108), ("dB-107", -107), ("dB-106", -106), ("dB-105", -105), ("dB-104", -104), ("dB-103", -103), ("dB-102", -102), ("dB-101", -101), ("dB-100", -100), ("dB-99", -99), ("dB-98", -98), ("dB-97", -97), ("dB-96", -96), ("dB-95", -95), ("dB-94", -94), ("dB-93", -93), ("dB-92", -92), ("dB-91", -91), ("dB-90", -90), ("dB-89", -89), ("dB-88", -88), ("dB-87", -87), ("dB-86", -86), ("dB-85", -85), ("dB-84", -84), ("dB-83", -83), ("dB-82", -82), ("dB-81", -81), ("dB-80", -80), ("dB-79", -79), ("dB-78", -78), ("dB-77", -77), ("dB-76", -76), ("dB-75", -75), ("dB-74", -74), ("dB-73", -73), ("dB-72", -72), ("dB-71", -71), ("dB-70", -70), ("dB-69", -69), ("dB-68", -68), ("dB-67", -67), ("dB-66", -66), ("dB-65", -65), ("dB-64", -64), ("dB-63", -63), ("dB-62", -62), ("dB-61", -61), ("dB-60", -60), ("dB-59", -59), ("dB-58", -58), ("dB-57", -57), ("dB-56", -56), ("dB-55", -55), ("dB-54", -54), ("dB-53", -53), ("dB-52", -52), ("dB-51", -51), ("dB-50", -50), ("dB-49", -49), ("dB-48", -48), ("dB-47", -47), ("dB-46", -46), ("dB-45", -45), ("dB-44", -44), ("dB-43", -43), ("dB-42", -42), ("dB-41", -41), ("dB-40", -40), ("dB-39", -39), ("dB-38", -38), ("dB-37", -37), ("dB-36", -36), ("dB-35", -35), ("dB-34", -34), ("dB-33", -33), ("dB-32", -32), ("dB-31", -31), ("dB-30", -30), ("dB-29", -29), ("dB-28", -28), ("dB-27", -27), ("dB-26", -26), ("dB-25", -25), ("dB-24", -24), ("dB-23", -23), ("dB-22", -22), ("dB-21", -21), ("dB-20", -20), ("dB-19", -19), ("dB-18", -18), ("dB-17", -17), ("dB-16", -16), ("dB-15", -15), ("dB-14", -14), ("dB-13", -13), ("dB-12", -12), ("dB-11", -11), ("dB-10", -10), ("dB-9", -9), ("dB-8", -8), ("dB-7", -7), ("dB-6", -6), ("dB-5", -5), ("dB-4", -4), ("dB-3", -3), ("dB-2", -2), ("dB-1", -1), ("dB0", 0), ("dB1", 1), ("dB2", 2), ("dB3", 3), ("dB4", 4), ("dB5", 5), ("dB6", 6), ("dB7", 7), ("dB8", 8), ("dB9", 9), ("dB10", 10), ("dB11", 11), ("dB12", 12), ("dB13", 13), ("dB14", 14), ("dB15", 15), ("dB16", 16), ("dB17", 17), ("dB18", 18), ("dB19", 19), ("dB20", 20), ("dB21", 21), ("dB22", 22), ("dB23", 23), ("dB24", 24), ("dB25", 25), ("dB26", 26), ("dB27", 27), ("dB28", 28), ("dB29", 29), ("dB30", 30), ("dB31", 31), ("dB32", 32), ("dB33", 33), ("dB34", 34), ("dB35", 35), ("dB36", 36), ("dB37", 37), ("dB38", 38), ("dB39", 39), ("dB40", 40), ("dB41", 41), ("dB42", 42), ("dB43", 43), ("dB44", 44), ("dB45", 45), ("dB46", 46), ("dB47", 47), ("dB48", 48), ("dB49", 49), ("dB50", 50), ("dB51", 51), ("dB52", 52), ("dB53", 53), ("dB54", 54), ("dB55", 55), ("dB56", 56), ("dB57", 57), ("dB58", 58), ("dB59", 59), ("dB60", 60), ("dB61", 61), ("dB62", 62), ("dB63", 63), ("dB64", 64), ("dB65", 65), ("dB66", 66), ("dB67", 67), ("dB68", 68), ("dB69", 69), ("dB70", 70), ("dB71", 71), ("dB72", 72), ("dB73", 73), ("dB74", 74), ("dB75", 75), ("dB76", 76), ("dB77", 77), ("dB78", 78), ("dB79", 79), ("dB80", 80), ("dB81", 81), ("dB82", 82), ("dB83", 83), ("dB84", 84), ("dB85", 85), ("dB86", 86), ("dB87", 87), ("dB88", 88), ("dB89", 89), ("dB90", 90), ("dB91", 91), ("dB92", 92), ("dB93", 93), ("dB94", 94), ("dB95", 95), ("dB96", 96), ("dB97", 97), ("dB98", 98), ("dB99", 99), ("dB100", 100), ("dB101", 101), ("dB102", 102), ("dB103", 103), ("dB104", 104), ("dB105", 105), ("dB106", 106), ("dB107", 107), ("dB108", 108), ("dB109", 109), ("dB110", 110), ("dB111", 111), ("dB112", 112), ("dB113", 113), ("dB114", 114), ("dB115", 115), ("dB116", 116), ("dB117", 117), ("dB118", 118), ("dB119", 119), ("dB120", 120), ("dB121", 121), ("dB122", 122), ("dB123", 123), ("dB124", 124), ("dB125", 125), ("dB126", 126), ("dB127", 127)) + NamedValues(("dB128", 128), ("marginNotApplicable", 32766), ("marginInvalid", 32767))

class Xldv20AdslAttenuation(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254), SingleValueConstraint(255, 32766, 32767))
    namedValues = NamedValues(("dB0", 0), ("dB0Dot5", 1), ("dB1", 2), ("dB1Dot5", 3), ("dB2", 4), ("dB2Dot5", 5), ("dB3", 6), ("dB3Dot5", 7), ("dB4", 8), ("dB4Dot5", 9), ("dB5", 10), ("dB5Dot5", 11), ("dB6", 12), ("dB6Dot5", 13), ("dB7", 14), ("dB7Dot5", 15), ("dB8", 16), ("dB8Dot5", 17), ("dB9", 18), ("dB9Dot5", 19), ("dB10", 20), ("dB10Dot5", 21), ("dB11", 22), ("dB11Dot5", 23), ("dB12", 24), ("dB12Dot5", 25), ("dB13", 26), ("dB13Dot5", 27), ("dB14", 28), ("dB14Dot5", 29), ("dB15", 30), ("dB15Dot5", 31), ("dB16", 32), ("dB16Dot5", 33), ("dB17", 34), ("dB17Dot5", 35), ("dB18", 36), ("dB18Dot5", 37), ("dB19", 38), ("dB19Dot5", 39), ("dB20", 40), ("dB20Dot5", 41), ("dB21", 42), ("dB21Dot5", 43), ("dB22", 44), ("dB22Dot5", 45), ("dB23", 46), ("dB23Dot5", 47), ("dB24", 48), ("dB24Dot5", 49), ("dB25", 50), ("dB25Dot5", 51), ("dB26", 52), ("dB26Dot5", 53), ("dB27", 54), ("dB27Dot5", 55), ("dB28", 56), ("dB28Dot5", 57), ("dB29", 58), ("dB29Dot5", 59), ("dB30", 60), ("dB30Dot5", 61), ("dB31", 62), ("dB31Dot5", 63), ("dB32", 64), ("dB32Dot5", 65), ("dB33", 66), ("dB33Dot5", 67), ("dB34", 68), ("dB34Dot5", 69), ("dB35", 70), ("dB35Dot5", 71), ("dB36", 72), ("dB36Dot5", 73), ("dB37", 74), ("dB37Dot5", 75), ("dB38", 76), ("dB38Dot5", 77), ("dB39", 78), ("dB39Dot5", 79), ("dB40", 80), ("dB40Dot5", 81), ("dB41", 82), ("dB41Dot5", 83), ("dB42", 84), ("dB42Dot5", 85), ("dB43", 86), ("dB43Dot5", 87), ("dB44", 88), ("dB44Dot5", 89), ("dB45", 90), ("dB45Dot5", 91), ("dB46", 92), ("dB46Dot5", 93), ("dB47", 94), ("dB47Dot5", 95), ("dB48", 96), ("dB48Dot5", 97), ("dB49", 98), ("dB49Dot5", 99), ("dB50", 100), ("dB50Dot5", 101), ("dB51", 102), ("dB51Dot5", 103), ("dB52", 104), ("dB52Dot5", 105), ("dB53", 106), ("dB53Dot5", 107), ("dB54", 108), ("dB54Dot5", 109), ("dB55", 110), ("dB55Dot5", 111), ("dB56", 112), ("dB56Dot5", 113), ("dB57", 114), ("dB57Dot5", 115), ("dB58", 116), ("dB58Dot5", 117), ("dB59", 118), ("dB59Dot5", 119), ("dB60", 120), ("dB60Dot5", 121), ("dB61", 122), ("dB61Dot5", 123), ("dB62", 124), ("dB62Dot5", 125), ("dB63", 126), ("dB63Dot5", 127), ("dB64", 128), ("dB64Dot5", 129), ("dB65", 130), ("dB65Dot5", 131), ("dB66", 132), ("dB66Dot5", 133), ("dB67", 134), ("dB67Dot5", 135), ("dB68", 136), ("dB68Dot5", 137), ("dB69", 138), ("dB69Dot5", 139), ("dB70", 140), ("dB70Dot5", 141), ("dB71", 142), ("dB71Dot5", 143), ("dB72", 144), ("dB72Dot5", 145), ("dB73", 146), ("dB73Dot5", 147), ("dB74", 148), ("dB74Dot5", 149), ("dB75", 150), ("dB75Dot5", 151), ("dB76", 152), ("dB76Dot5", 153), ("dB77", 154), ("dB77Dot5", 155), ("dB78", 156), ("dB78Dot5", 157), ("dB79", 158), ("dB79Dot5", 159), ("dB80", 160), ("dB80Dot5", 161), ("dB81", 162), ("dB81Dot5", 163), ("dB82", 164), ("dB82Dot5", 165), ("dB83", 166), ("dB83Dot5", 167), ("dB84", 168), ("dB84Dot5", 169), ("dB85", 170), ("dB85Dot5", 171), ("dB86", 172), ("dB86Dot5", 173), ("dB87", 174), ("dB87Dot5", 175), ("dB88", 176), ("dB88Dot5", 177), ("dB89", 178), ("dB89Dot5", 179), ("dB90", 180), ("dB90Dot5", 181), ("dB91", 182), ("dB91Dot5", 183), ("dB92", 184), ("dB92Dot5", 185), ("dB93", 186), ("dB93Dot5", 187), ("dB94", 188), ("dB94Dot5", 189), ("dB95", 190), ("dB95Dot5", 191), ("dB96", 192), ("dB96Dot5", 193), ("dB97", 194), ("dB97Dot5", 195), ("dB98", 196), ("dB98Dot5", 197), ("dB99", 198), ("dB99Dot5", 199), ("dB100", 200), ("dB100Dot5", 201), ("dB101", 202), ("dB101Dot5", 203), ("dB102", 204), ("dB102Dot5", 205), ("dB103", 206), ("dB103Dot5", 207), ("dB104", 208), ("dB104Dot5", 209), ("dB105", 210), ("dB105Dot5", 211), ("dB106", 212), ("dB106Dot5", 213), ("dB107", 214), ("dB107Dot5", 215), ("dB108", 216), ("dB108Dot5", 217), ("dB109", 218), ("dB109Dot5", 219), ("dB110", 220), ("dB110Dot5", 221), ("dB111", 222), ("dB111Dot5", 223), ("dB112", 224), ("dB112Dot5", 225), ("dB113", 226), ("dB113Dot5", 227), ("dB114", 228), ("dB114Dot5", 229), ("dB115", 230), ("dB115Dot5", 231), ("dB116", 232), ("dB116Dot5", 233), ("dB117", 234), ("dB117Dot5", 235), ("dB118", 236), ("dB118Dot5", 237), ("dB119", 238), ("dB119Dot5", 239), ("dB120", 240), ("dB120Dot5", 241), ("dB121", 242), ("dB121Dot5", 243), ("dB122", 244), ("dB122Dot5", 245), ("dB123", 246), ("dB123Dot5", 247), ("dB124", 248), ("dB124Dot5", 249), ("dB125", 250), ("dB125Dot5", 251), ("dB126", 252), ("dB126Dot5", 253), ("dB127", 254)) + NamedValues(("dB127Dot5", 255), ("attenuationNotApplicable", 32766), ("attenuationInvalid", 32767))

class Xldv20AdslMinMargin(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(-6, -5, -4, -3, -2, -1, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 255))
    namedValues = NamedValues(("dB-6", -6), ("dB-5", -5), ("dB-4", -4), ("dB-3", -3), ("dB-2", -2), ("dB-1", -1), ("dB0", 0), ("dB1", 1), ("dB2", 2), ("dB3", 3), ("dB4", 4), ("dB5", 5), ("dB6", 6), ("dB7", 7), ("dB8", 8), ("dB9", 9), ("dB10", 10), ("dB11", 11), ("dB12", 12), ("auto", 255))

class Xldv20AdslOutputPower(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(-31, -30, -29, -28, -27, -26, -25, -24, -23, -22, -21, -20, -19, -18, -17, -16, -15, -14, -13, -12, -11, -10, -9, -8, -7, -6, -5, -4, -3, -2, -1, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 32767))
    namedValues = NamedValues(("dBm-31", -31), ("dBm-30", -30), ("dBm-29", -29), ("dBm-28", -28), ("dBm-27", -27), ("dBm-26", -26), ("dBm-25", -25), ("dBm-24", -24), ("dBm-23", -23), ("dBm-22", -22), ("dBm-21", -21), ("dBm-20", -20), ("dBm-19", -19), ("dBm-18", -18), ("dBm-17", -17), ("dBm-16", -16), ("dBm-15", -15), ("dBm-14", -14), ("dBm-13", -13), ("dBm-12", -12), ("dBm-11", -11), ("dBm-10", -10), ("dBm-9", -9), ("dBm-8", -8), ("dBm-7", -7), ("dBm-6", -6), ("dBm-5", -5), ("dBm-4", -4), ("dBm-3", -3), ("dBm-2", -2), ("dBm-1", -1), ("dBm0", 0), ("dBm1", 1), ("dBm2", 2), ("dBm3", 3), ("dBm4", 4), ("dBm5", 5), ("dBm6", 6), ("dBm7", 7), ("dBm8", 8), ("dBm9", 9), ("dBm10", 10), ("dBm11", 11), ("dBm12", 12), ("dBm13", 13), ("dBm14", 14), ("dBm15", 15), ("dBm16", 16), ("dBm17", 17), ("dBm18", 18), ("dBm19", 19), ("dBm20", 20), ("dBm21", 21), ("dBm22", 22), ("dBm23", 23), ("dBm24", 24), ("dBm25", 25), ("dBm26", 26), ("dBm27", 27), ("dBm28", 28), ("dBm29", 29), ("dBm30", 30), ("dBm31", 31), ("dBm32", 32), ("outputPowerInvalid", 32767))

class Xldv20StartupResult(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))
    namedValues = NamedValues(("suFinished", 1), ("suFailed", 2), ("suStandaloneStartupFinished", 3), ("suInProgress", 4))

class Xldv20StartupType(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(6300, 6301, 6302, 6303, 6304))
    namedValues = NamedValues(("warm", 6300), ("cold", 6301), ("reload", 6302), ("cmuUpgrade", 6303), ("powerUp", 6304))

class Xldv20SnmLctSession(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))
    namedValues = NamedValues(("connected", 1), ("disconnected", 2), ("sessionCancelled", 3), ("sessionTimeout", 4), ("onuCutSession", 5))

class Xldv20RepSource(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 9, 10, 11, 12, 13, 14))
    namedValues = NamedValues(("hwm", 1), ("tlm", 2), ("vplNni", 3), ("vplUni", 4), ("extAlarm", 5), ("vccTp", 6), ("vpcTp", 7), ("vclTp", 9), ("vplTp", 10), ("vclNni", 11), ("vclUni", 12), ("vplCC", 13), ("vclCC", 14))

class Xldv20PollingFlagType(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2))
    namedValues = NamedValues(("flagSet", 1), ("flagNotSet", 2))

class Xldv20TerminalType(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 10))
    namedValues = NamedValues(("tmn", 1), ("lct", 2), ("unknown", 10))

class Xldv20ChannelType(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 10))
    namedValues = NamedValues(("inband", 1), ("outband", 2), ("unknown", 10))

class Xldv20XdslServiceType(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))
    namedValues = NamedValues(("gDotHsMode", 1), ("ansiT1Dot413", 2), ("gDotLiteMode", 3), ("gDotAll", 4))

class Xldv20XdslServiceTypeCurrent(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 10))
    namedValues = NamedValues(("gDotDmtMode", 1), ("ansiT1Dot413", 2), ("gDotLiteMode", 3), ("serviceTypeUnknown", 10))

class Xldv20LoopMode(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2))
    namedValues = NamedValues(("forward", 1), ("loopAndForward", 2))

class Xldv20XdslInitStatus(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 255))
    namedValues = NamedValues(("ntNotPresent", 1), ("communicationFailed", 2), ("fastRetrainProfileError", 3), ("rateParameterConfigurationError", 4), ("serviceTypeAdrRequestRejected", 5), ("serviceTypeAdcRequestRejected", 6), ("configuredRatesOutOfRange", 7), ("configuredMinMaxRelationInvalid", 8), ("channelRatesExceedsSystemLimits", 9), ("adaptationCombinationInvalid", 10), ("configuredDualChannelInvalid", 11), ("marginLessThanMinMargin", 12), ("adrNotCapableOfDualLatency", 13), ("reserved1", 14), ("reserved2", 15), ("trainingBlockedBySu", 16), ("trainingBlockedByCi", 17), ("ntNotPresentDetectedOnCi", 18), ("gliteModeNotPossibleInPCM", 19), ("alarmsDetected", 20), ("initStatusUnknown", 21), ("noInitError", 255))

class Xldv20AdcTrainingMode(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))
    namedValues = NamedValues(("enableParallelTraining", 1), ("avoidParallelTrainingOnCI", 2), ("avoidParallelTrainingOnSU", 3), ("combinedTraining", 4))

class Xldv20SdslServiceType(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3))
    namedValues = NamedValues(("diamondLaneFraming", 1), ("clearChannelFraming", 2), ("ituFraming", 3))

class Xldv20AdslDataRateDown(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253))
    namedValues = NamedValues(("kbps32Cps75", 1), ("kbps64Cps150", 2), ("kbps96Cps226", 3), ("kbps128Cps301", 4), ("kbps160Cps377", 5), ("kbps192Cps452", 6), ("kbps224Cps528", 7), ("kbps256Cps603", 8), ("kbps288Cps679", 9), ("kbps320Cps754", 10), ("kbps352Cps830", 11), ("kbps384Cps905", 12), ("kbps416Cps981", 13), ("kbps448Cps1056", 14), ("kbps480Cps1132", 15), ("kbps512Cps1207", 16), ("kbps544Cps1283", 17), ("kbps576Cps1358", 18), ("kbps608Cps1433", 19), ("kbps640Cps1509", 20), ("kbps672Cps1584", 21), ("kbps704Cps1660", 22), ("kbps736Cps1735", 23), ("kbps768Cps1811", 24), ("kbps800Cps1886", 25), ("kbps832Cps1962", 26), ("kbps864Cps2037", 27), ("kbps896Cps2113", 28), ("kbps928Cps2188", 29), ("kbps960Cps2264", 30), ("kbps992Cps2339", 31), ("kbps1024Cps2415", 32), ("kbps1056Cps2490", 33), ("kbps1088Cps2566", 34), ("kbps1120Cps2641", 35), ("kbps1152Cps2716", 36), ("kbps1184Cps2792", 37), ("kbps1216Cps2867", 38), ("kbps1248Cps2943", 39), ("kbps1280Cps3018", 40), ("kbps1312Cps3094", 41), ("kbps1344Cps3169", 42), ("kbps1376Cps3245", 43), ("kbps1408Cps3320", 44), ("kbps1440Cps3396", 45), ("kbps1472Cps3471", 46), ("kbps1504Cps3547", 47), ("kbps1536Cps3622", 48), ("kbps1568Cps3698", 49), ("kbps1600Cps3773", 50), ("kbps1632Cps3849", 51), ("kbps1664Cps3924", 52), ("kbps1696Cps4000", 53), ("kbps1728Cps4075", 54), ("kbps1760Cps4150", 55), ("kbps1792Cps4226", 56), ("kbps1824Cps4301", 57), ("kbps1856Cps4377", 58), ("kbps1888Cps4452", 59), ("kbps1920Cps4528", 60), ("kbps1952Cps4603", 61), ("kbps1984Cps4679", 62), ("kbps2016Cps4754", 63), ("kbps2048Cps4830", 64), ("kbps2080Cps4905", 65), ("kbps2112Cps4981", 66), ("kbps2144Cps5056", 67), ("kbps2176Cps5132", 68), ("kbps2208Cps5207", 69), ("kbps2240Cps5283", 70), ("kbps2272Cps5358", 71), ("kbps2304Cps5433", 72), ("kbps2336Cps5509", 73), ("kbps2368Cps5584", 74), ("kbps2400Cps5660", 75), ("kbps2432Cps5735", 76), ("kbps2464Cps5811", 77), ("kbps2496Cps5886", 78), ("kbps2528Cps5962", 79), ("kbps2560Cps6037", 80), ("kbps2592Cps6113", 81), ("kbps2624Cps6188", 82), ("kbps2656Cps6264", 83), ("kbps2688Cps6339", 84), ("kbps2720Cps6415", 85), ("kbps2752Cps6490", 86), ("kbps2784Cps6566", 87), ("kbps2816Cps6641", 88), ("kbps2848Cps6716", 89), ("kbps2880Cps6792", 90), ("kbps2912Cps6867", 91), ("kbps2944Cps6943", 92), ("kbps2976Cps7018", 93), ("kbps3008Cps7094", 94), ("kbps3040Cps7169", 95), ("kbps3072Cps7245", 96), ("kbps3104Cps7320", 97), ("kbps3136Cps7396", 98), ("kbps3168Cps7471", 99), ("kbps3200Cps7547", 100), ("kbps3232Cps7622", 101), ("kbps3264Cps7698", 102), ("kbps3296Cps7773", 103), ("kbps3328Cps7849", 104), ("kbps3360Cps7924", 105), ("kbps3392Cps8000", 106), ("kbps3424Cps8075", 107), ("kbps3456Cps8150", 108), ("kbps3488Cps8226", 109), ("kbps3520Cps8301", 110), ("kbps3552Cps8377", 111), ("kbps3584Cps8452", 112), ("kbps3616Cps8528", 113), ("kbps3648Cps8603", 114), ("kbps3680Cps8679", 115), ("kbps3712Cps8754", 116), ("kbps3744Cps8830", 117), ("kbps3776Cps8905", 118), ("kbps3808Cps8981", 119), ("kbps3840Cps9056", 120), ("kbps3872Cps9132", 121), ("kbps3904Cps9207", 122), ("kbps3936Cps9283", 123), ("kbps3968Cps9358", 124), ("kbps4000Cps9433", 125), ("kbps4032Cps9509", 126), ("kbps4064Cps9584", 127), ("kbps4096Cps9660", 128), ("kbps4128Cps9735", 129), ("kbps4160Cps9811", 130), ("kbps4192Cps9886", 131), ("kbps4224Cps9962", 132), ("kbps4256Cps10037", 133), ("kbps4288Cps10113", 134), ("kbps4320Cps10188", 135), ("kbps4352Cps10264", 136), ("kbps4384Cps10339", 137), ("kbps4416Cps10415", 138), ("kbps4448Cps10490", 139), ("kbps4480Cps10566", 140), ("kbps4512Cps10641", 141), ("kbps4544Cps10716", 142), ("kbps4576Cps10792", 143), ("kbps4608Cps10867", 144), ("kbps4640Cps10943", 145), ("kbps4672Cps11018", 146), ("kbps4704Cps11094", 147), ("kbps4736Cps11169", 148), ("kbps4768Cps11245", 149), ("kbps4800Cps11320", 150), ("kbps4832Cps11396", 151), ("kbps4864Cps11471", 152), ("kbps4896Cps11547", 153), ("kbps4928Cps11622", 154), ("kbps4960Cps11698", 155), ("kbps4992Cps11773", 156), ("kbps5024Cps11849", 157), ("kbps5056Cps11924", 158), ("kbps5088Cps12000", 159), ("kbps5120Cps12075", 160), ("kbps5152Cps12150", 161), ("kbps5184Cps12226", 162), ("kbps5216Cps12301", 163), ("kbps5248Cps12377", 164), ("kbps5280Cps12452", 165), ("kbps5312Cps12528", 166), ("kbps5344Cps12603", 167), ("kbps5376Cps12679", 168), ("kbps5408Cps12754", 169), ("kbps5440Cps12830", 170), ("kbps5472Cps12905", 171), ("kbps5504Cps12981", 172), ("kbps5536Cps13056", 173), ("kbps5568Cps13132", 174), ("kbps5600Cps13207", 175), ("kbps5632Cps13283", 176), ("kbps5664Cps13358", 177), ("kbps5696Cps13433", 178), ("kbps5728Cps13509", 179), ("kbps5760Cps13584", 180), ("kbps5792Cps13660", 181), ("kbps5824Cps13735", 182), ("kbps5856Cps13811", 183), ("kbps5888Cps13886", 184), ("kbps5920Cps13962", 185), ("kbps5952Cps14037", 186), ("kbps5984Cps14113", 187), ("kbps6016Cps14188", 188), ("kbps6048Cps14264", 189), ("kbps6080Cps14339", 190), ("kbps6112Cps14415", 191), ("kbps6144Cps14490", 192), ("kbps6176Cps14566", 193), ("kbps6208Cps14641", 194), ("kbps6240Cps14716", 195), ("kbps6272Cps14792", 196), ("kbps6304Cps14867", 197), ("kbps6336Cps14943", 198), ("kbps6368Cps15018", 199), ("kbps6400Cps15094", 200), ("kbps6432Cps15169", 201), ("kbps6464Cps15245", 202), ("kbps6496Cps15320", 203), ("kbps6528Cps15396", 204), ("kbps6560Cps15471", 205), ("kbps6592Cps15547", 206), ("kbps6624Cps15622", 207), ("kbps6656Cps15698", 208), ("kbps6688Cps15773", 209), ("kbps6720Cps15849", 210), ("kbps6752Cps15924", 211), ("kbps6784Cps16000", 212), ("kbps6816Cps16075", 213), ("kbps6848Cps16150", 214), ("kbps6880Cps16226", 215), ("kbps6912Cps16301", 216), ("kbps6944Cps16377", 217), ("kbps6976Cps16452", 218), ("kbps7008Cps16528", 219), ("kbps7040Cps16603", 220), ("kbps7072Cps16679", 221), ("kbps7104Cps16754", 222), ("kbps7136Cps16830", 223), ("kbps7168Cps16905", 224), ("kbps7200Cps16981", 225), ("kbps7232Cps17056", 226), ("kbps7264Cps17132", 227), ("kbps7296Cps17207", 228), ("kbps7328Cps17283", 229), ("kbps7360Cps17358", 230), ("kbps7392Cps17433", 231), ("kbps7424Cps17509", 232), ("kbps7456Cps17584", 233), ("kbps7488Cps17660", 234), ("kbps7520Cps17735", 235), ("kbps7552Cps17811", 236), ("kbps7584Cps17886", 237), ("kbps7616Cps17962", 238), ("kbps7648Cps18037", 239), ("kbps7680Cps18113", 240), ("kbps7712Cps18188", 241), ("kbps7744Cps18264", 242), ("kbps7776Cps18339", 243), ("kbps7808Cps18415", 244), ("kbps7840Cps18490", 245), ("kbps7872Cps18566", 246), ("kbps7904Cps18641", 247), ("kbps7936Cps18716", 248), ("kbps7968Cps18792", 249), ("kbps8000Cps18867", 250), ("kbps8032Cps18943", 251), ("kbps8064Cps19018", 252), ("kbps8096Cps19094", 253))

class Xldv20AdslDataRateUp(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24))
    namedValues = NamedValues(("kbps32Cps75", 1), ("kbps64Cps150", 2), ("kbps96Cps226", 3), ("kbps128Cps301", 4), ("kbps160Cps377", 5), ("kbps192Cps452", 6), ("kbps224Cps528", 7), ("kbps256Cps603", 8), ("kbps288Cps679", 9), ("kbps320Cps754", 10), ("kbps352Cps830", 11), ("kbps384Cps905", 12), ("kbps416Cps981", 13), ("kbps448Cps1056", 14), ("kbps480Cps1132", 15), ("kbps512Cps1207", 16), ("kbps544Cps1283", 17), ("kbps576Cps1358", 18), ("kbps608Cps1433", 19), ("kbps640Cps1509", 20), ("kbps672Cps1584", 21), ("kbps704Cps1660", 22), ("kbps736Cps1735", 23), ("kbps768Cps1811", 24))

class Xldv20AdslDataRateDownCurrent(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 32767))
    namedValues = NamedValues(("kbps32Cps75", 1), ("kbps64Cps150", 2), ("kbps96Cps226", 3), ("kbps128Cps301", 4), ("kbps160Cps377", 5), ("kbps192Cps452", 6), ("kbps224Cps528", 7), ("kbps256Cps603", 8), ("kbps288Cps679", 9), ("kbps320Cps754", 10), ("kbps352Cps830", 11), ("kbps384Cps905", 12), ("kbps416Cps981", 13), ("kbps448Cps1056", 14), ("kbps480Cps1132", 15), ("kbps512Cps1207", 16), ("kbps544Cps1283", 17), ("kbps576Cps1358", 18), ("kbps608Cps1433", 19), ("kbps640Cps1509", 20), ("kbps672Cps1584", 21), ("kbps704Cps1660", 22), ("kbps736Cps1735", 23), ("kbps768Cps1811", 24), ("kbps800Cps1886", 25), ("kbps832Cps1962", 26), ("kbps864Cps2037", 27), ("kbps896Cps2113", 28), ("kbps928Cps2188", 29), ("kbps960Cps2264", 30), ("kbps992Cps2339", 31), ("kbps1024Cps2415", 32), ("kbps1056Cps2490", 33), ("kbps1088Cps2566", 34), ("kbps1120Cps2641", 35), ("kbps1152Cps2716", 36), ("kbps1184Cps2792", 37), ("kbps1216Cps2867", 38), ("kbps1248Cps2943", 39), ("kbps1280Cps3018", 40), ("kbps1312Cps3094", 41), ("kbps1344Cps3169", 42), ("kbps1376Cps3245", 43), ("kbps1408Cps3320", 44), ("kbps1440Cps3396", 45), ("kbps1472Cps3471", 46), ("kbps1504Cps3547", 47), ("kbps1536Cps3622", 48), ("kbps1568Cps3698", 49), ("kbps1600Cps3773", 50), ("kbps1632Cps3849", 51), ("kbps1664Cps3924", 52), ("kbps1696Cps4000", 53), ("kbps1728Cps4075", 54), ("kbps1760Cps4150", 55), ("kbps1792Cps4226", 56), ("kbps1824Cps4301", 57), ("kbps1856Cps4377", 58), ("kbps1888Cps4452", 59), ("kbps1920Cps4528", 60), ("kbps1952Cps4603", 61), ("kbps1984Cps4679", 62), ("kbps2016Cps4754", 63), ("kbps2048Cps4830", 64), ("kbps2080Cps4905", 65), ("kbps2112Cps4981", 66), ("kbps2144Cps5056", 67), ("kbps2176Cps5132", 68), ("kbps2208Cps5207", 69), ("kbps2240Cps5283", 70), ("kbps2272Cps5358", 71), ("kbps2304Cps5433", 72), ("kbps2336Cps5509", 73), ("kbps2368Cps5584", 74), ("kbps2400Cps5660", 75), ("kbps2432Cps5735", 76), ("kbps2464Cps5811", 77), ("kbps2496Cps5886", 78), ("kbps2528Cps5962", 79), ("kbps2560Cps6037", 80), ("kbps2592Cps6113", 81), ("kbps2624Cps6188", 82), ("kbps2656Cps6264", 83), ("kbps2688Cps6339", 84), ("kbps2720Cps6415", 85), ("kbps2752Cps6490", 86), ("kbps2784Cps6566", 87), ("kbps2816Cps6641", 88), ("kbps2848Cps6716", 89), ("kbps2880Cps6792", 90), ("kbps2912Cps6867", 91), ("kbps2944Cps6943", 92), ("kbps2976Cps7018", 93), ("kbps3008Cps7094", 94), ("kbps3040Cps7169", 95), ("kbps3072Cps7245", 96), ("kbps3104Cps7320", 97), ("kbps3136Cps7396", 98), ("kbps3168Cps7471", 99), ("kbps3200Cps7547", 100), ("kbps3232Cps7622", 101), ("kbps3264Cps7698", 102), ("kbps3296Cps7773", 103), ("kbps3328Cps7849", 104), ("kbps3360Cps7924", 105), ("kbps3392Cps8000", 106), ("kbps3424Cps8075", 107), ("kbps3456Cps8150", 108), ("kbps3488Cps8226", 109), ("kbps3520Cps8301", 110), ("kbps3552Cps8377", 111), ("kbps3584Cps8452", 112), ("kbps3616Cps8528", 113), ("kbps3648Cps8603", 114), ("kbps3680Cps8679", 115), ("kbps3712Cps8754", 116), ("kbps3744Cps8830", 117), ("kbps3776Cps8905", 118), ("kbps3808Cps8981", 119), ("kbps3840Cps9056", 120), ("kbps3872Cps9132", 121), ("kbps3904Cps9207", 122), ("kbps3936Cps9283", 123), ("kbps3968Cps9358", 124), ("kbps4000Cps9433", 125), ("kbps4032Cps9509", 126), ("kbps4064Cps9584", 127), ("kbps4096Cps9660", 128), ("kbps4128Cps9735", 129), ("kbps4160Cps9811", 130), ("kbps4192Cps9886", 131), ("kbps4224Cps9962", 132), ("kbps4256Cps10037", 133), ("kbps4288Cps10113", 134), ("kbps4320Cps10188", 135), ("kbps4352Cps10264", 136), ("kbps4384Cps10339", 137), ("kbps4416Cps10415", 138), ("kbps4448Cps10490", 139), ("kbps4480Cps10566", 140), ("kbps4512Cps10641", 141), ("kbps4544Cps10716", 142), ("kbps4576Cps10792", 143), ("kbps4608Cps10867", 144), ("kbps4640Cps10943", 145), ("kbps4672Cps11018", 146), ("kbps4704Cps11094", 147), ("kbps4736Cps11169", 148), ("kbps4768Cps11245", 149), ("kbps4800Cps11320", 150), ("kbps4832Cps11396", 151), ("kbps4864Cps11471", 152), ("kbps4896Cps11547", 153), ("kbps4928Cps11622", 154), ("kbps4960Cps11698", 155), ("kbps4992Cps11773", 156), ("kbps5024Cps11849", 157), ("kbps5056Cps11924", 158), ("kbps5088Cps12000", 159), ("kbps5120Cps12075", 160), ("kbps5152Cps12150", 161), ("kbps5184Cps12226", 162), ("kbps5216Cps12301", 163), ("kbps5248Cps12377", 164), ("kbps5280Cps12452", 165), ("kbps5312Cps12528", 166), ("kbps5344Cps12603", 167), ("kbps5376Cps12679", 168), ("kbps5408Cps12754", 169), ("kbps5440Cps12830", 170), ("kbps5472Cps12905", 171), ("kbps5504Cps12981", 172), ("kbps5536Cps13056", 173), ("kbps5568Cps13132", 174), ("kbps5600Cps13207", 175), ("kbps5632Cps13283", 176), ("kbps5664Cps13358", 177), ("kbps5696Cps13433", 178), ("kbps5728Cps13509", 179), ("kbps5760Cps13584", 180), ("kbps5792Cps13660", 181), ("kbps5824Cps13735", 182), ("kbps5856Cps13811", 183), ("kbps5888Cps13886", 184), ("kbps5920Cps13962", 185), ("kbps5952Cps14037", 186), ("kbps5984Cps14113", 187), ("kbps6016Cps14188", 188), ("kbps6048Cps14264", 189), ("kbps6080Cps14339", 190), ("kbps6112Cps14415", 191), ("kbps6144Cps14490", 192), ("kbps6176Cps14566", 193), ("kbps6208Cps14641", 194), ("kbps6240Cps14716", 195), ("kbps6272Cps14792", 196), ("kbps6304Cps14867", 197), ("kbps6336Cps14943", 198), ("kbps6368Cps15018", 199), ("kbps6400Cps15094", 200), ("kbps6432Cps15169", 201), ("kbps6464Cps15245", 202), ("kbps6496Cps15320", 203), ("kbps6528Cps15396", 204), ("kbps6560Cps15471", 205), ("kbps6592Cps15547", 206), ("kbps6624Cps15622", 207), ("kbps6656Cps15698", 208), ("kbps6688Cps15773", 209), ("kbps6720Cps15849", 210), ("kbps6752Cps15924", 211), ("kbps6784Cps16000", 212), ("kbps6816Cps16075", 213), ("kbps6848Cps16150", 214), ("kbps6880Cps16226", 215), ("kbps6912Cps16301", 216), ("kbps6944Cps16377", 217), ("kbps6976Cps16452", 218), ("kbps7008Cps16528", 219), ("kbps7040Cps16603", 220), ("kbps7072Cps16679", 221), ("kbps7104Cps16754", 222), ("kbps7136Cps16830", 223), ("kbps7168Cps16905", 224), ("kbps7200Cps16981", 225), ("kbps7232Cps17056", 226), ("kbps7264Cps17132", 227), ("kbps7296Cps17207", 228), ("kbps7328Cps17283", 229), ("kbps7360Cps17358", 230), ("kbps7392Cps17433", 231), ("kbps7424Cps17509", 232), ("kbps7456Cps17584", 233), ("kbps7488Cps17660", 234), ("kbps7520Cps17735", 235), ("kbps7552Cps17811", 236), ("kbps7584Cps17886", 237), ("kbps7616Cps17962", 238), ("kbps7648Cps18037", 239), ("kbps7680Cps18113", 240), ("kbps7712Cps18188", 241), ("kbps7744Cps18264", 242), ("kbps7776Cps18339", 243), ("kbps7808Cps18415", 244), ("kbps7840Cps18490", 245), ("kbps7872Cps18566", 246), ("kbps7904Cps18641", 247), ("kbps7936Cps18716", 248), ("kbps7968Cps18792", 249), ("kbps8000Cps18867", 250), ("kbps8032Cps18943", 251), ("kbps8064Cps19018", 252), ("kbps8096Cps19094", 253), ("rateInvalid", 32767))

class Xldv20AdslDataRateUpCurrent(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 32767))
    namedValues = NamedValues(("kbps32Cps75", 1), ("kbps64Cps150", 2), ("kbps96Cps226", 3), ("kbps128Cps301", 4), ("kbps160Cps377", 5), ("kbps192Cps452", 6), ("kbps224Cps528", 7), ("kbps256Cps603", 8), ("kbps288Cps679", 9), ("kbps320Cps754", 10), ("kbps352Cps830", 11), ("kbps384Cps905", 12), ("kbps416Cps981", 13), ("kbps448Cps1056", 14), ("kbps480Cps1132", 15), ("kbps512Cps1207", 16), ("kbps544Cps1283", 17), ("kbps576Cps1358", 18), ("kbps608Cps1433", 19), ("kbps640Cps1509", 20), ("kbps672Cps1584", 21), ("kbps704Cps1660", 22), ("kbps736Cps1735", 23), ("kbps768Cps1811", 24), ("rateInvalid", 32767))

class Xldv20SdslDataRate(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(5, 6, 7, 8, 9, 10, 11, 12, 13, 24, 25, 36, 37, 48, 49, 54, 72))
    namedValues = NamedValues(("kbps160Cps377", 5), ("kbps192Cps452", 6), ("kbps208Cps490", 7), ("kbps256Cps603", 8), ("kbps288Cps679", 9), ("kbps320Cps754", 10), ("kbps352Cps830", 11), ("kbps384Cps905", 12), ("kbps400Cps943", 13), ("kbps768Cps1811", 24), ("kbps784Cps1849", 25), ("kbps1152Cps2716", 36), ("kbps1168Cps2754", 37), ("kbps1536Cps3622", 48), ("kbps1552Cps3660", 49), ("kbps1744Cps4113", 54), ("kbps2320Cps5471", 72))

class Xldv20SdslDataRateCurrent(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(5, 6, 7, 8, 9, 10, 11, 12, 13, 24, 25, 36, 37, 48, 49, 54, 72, 32767))
    namedValues = NamedValues(("kbps160Cps377", 5), ("kbps192Cps452", 6), ("kbps208Cps490", 7), ("kbps256Cps603", 8), ("kbps288Cps679", 9), ("kbps320Cps754", 10), ("kbps352Cps830", 11), ("kbps384Cps905", 12), ("kbps400Cps943", 13), ("kbps768Cps1811", 24), ("kbps784Cps1849", 25), ("kbps1152Cps2716", 36), ("kbps1168Cps2754", 37), ("kbps1536Cps3622", 48), ("kbps1552Cps3660", 49), ("kbps1744Cps4113", 54), ("kbps2320Cps5471", 72), ("rateInvalid", 32767))

class Xldv20ControlReq(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 5, 11, 12, 13, 14, 15, 16, 1000, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009, 2010, 2011, 2012, 2013, 2100, 2101, 2102, 2103, 2106, 2107, 2108, 2109, 2110, 2114, 2115, 2116, 2117, 2118, 2119, 2120, 2121, 2122, 2123, 2132, 2133, 2134, 2135, 2136, 2137, 2138, 2140, 2141, 2142, 2143, 2144, 2150, 2151, 2152, 2153, 2200, 2251, 2252, 2253, 2254, 2255, 2256, 2257, 2300, 2351, 2352, 2353, 2354, 2355, 2356, 2400, 2451, 2452, 2453, 2551, 2552, 2553, 2554, 2555, 2556, 2557, 2558, 2559, 2560, 2561, 2562, 2563, 3000, 3001, 3002, 3100, 3101, 3102, 3103, 3104, 3105, 3106, 3107, 3108, 3109, 3110, 3111, 3112, 3113, 3114, 3115, 3116, 4000, 4001, 5000, 5150, 5151, 5152, 5153, 5154, 5155, 5156, 5157, 5158, 5119, 5161, 5162, 5500, 5600, 5901, 5902, 6000, 6211, 6213, 6214, 6300, 6301, 6302, 6303, 6353, 6354, 6355, 6356, 6980, 7000, 7081, 7082, 7083, 7084, 8000, 8001, 8003, 8004, 8006, 8050, 8051, 8052, 8053, 8054, 8320, 8321, 8322, 8323, 8324, 8325, 8326, 8327, 8328, 8329, 8330, 8331, 8332, 8333, 8334, 8335, 8336, 8337, 8400, 8401, 8402, 8404, 8408, 8416, 8432, 8464, 9000, 9050, 9051, 9052, 9053, 9054, 9055, 9100, 9101, 9102, 9103, 9104, 9105, 9106, 9107, 9108, 9109, 9200, 9201, 9202, 9203))
    namedValues = NamedValues(("noRequest", 1), ("commExecStarted", 5), ("paramFaulty", 11), ("requestBusy", 12), ("setDataFailed", 13), ("aswTimeout", 14), ("commandFailed", 15), ("commandSucceeded", 16), ("snmUpdateSnmpConfigFile", 1000), ("snmUpdateComplete", 1051), ("snmUpdateFailed", 1052), ("snmFtpError", 1053), ("snmUpFtpIpAddrFailed", 1054), ("snmUpFtpAccountFailed", 1055), ("snmUpFtpPasswdFailed", 1056), ("snmUpFtpDescPathFailed", 1057), ("createVplCC", 2001), ("deleteVplCC", 2002), ("createEthVplCC", 2003), ("deleteEthVplCC", 2004), ("createVpcTp", 2005), ("deleteVpcTp", 2006), ("createEthVpcTp", 2007), ("deleteEthVpcTp", 2008), ("createVclCC", 2009), ("deleteVclCC", 2010), ("createEthVclCC", 2011), ("deleteEthVclCC", 2012), ("modifyNumberOfVcs", 2013), ("actVpiNniFaulty", 2100), ("actVpiUniFaulty", 2101), ("actPortLocationIdFaulty", 2102), ("actControlReqFaulty", 2103), ("actPeakCellRateUpstreamFaulty", 2106), ("actPeakCellRateDownstreamFaulty", 2107), ("actCellDelayVariationUpstreamFaulty", 2108), ("actCellDelayVariationDownstreamFaulty", 2109), ("actTrafficTypeFaulty", 2110), ("actSCRUpstreamFaulty", 2114), ("actSCRDownstreamFaulty", 2115), ("actMBSUpstreamFaulty", 2116), ("actMBSDownstreamFaulty", 2117), ("actVpcTpNotExisting", 2118), ("actTrafficDirectionFaulty", 2119), ("actVciNniFaulty", 2120), ("actVciUniFaulty", 2121), ("actLineBlocked", 2122), ("actVpcTpExists", 2123), ("actWrongLiType", 2132), ("actSegmentEndPointUniFaulty", 2133), ("actSegmentEndPointNniFaulty", 2134), ("actVclCCExists", 2135), ("actNumberOfVcsFaulty", 2136), ("actVbrCDVTUpstreamFaulty", 2137), ("actVbrCDVTDownstreamFaulty", 2138), ("actMaxCcsPerPortExceeded", 2140), ("actMaxNumberOfVcsToSmall", 2141), ("actSegmentEndPointNtFaulty", 2142), ("actMaxNrOfCcsInDbExceeded", 2143), ("actMaxNrOfCcsOnHwExceeded", 2144), ("lineNotEnabled", 2150), ("ccExists", 2151), ("vpiUniNotExisting", 2152), ("vciTrafficTypeInvalid", 2153), ("configEth", 2200), ("configEthFailed", 2251), ("ethModeInvalid", 2252), ("ethVpiUniNotExisting", 2253), ("ethVciUniNotExisting", 2254), ("ethVciTrafficTypeFaulty", 2255), ("ethVciPeakCellRateUpstreamFaulty", 2256), ("actEthVpcTpDeletionNotAllowed", 2257), ("continuityCheckRequest", 2300), ("continuityCheckAlreadyEnabled", 2351), ("continuityCheckAlreadyDisabled", 2352), ("continuityCheckReject", 2353), ("continuityCheckTestTypeConflict", 2354), ("continuityCheckNotSupportedOnNt", 2355), ("continuityCheckTrafficDirectionConflict", 2356), ("configInbandTmn", 2400), ("configInbandTmnFailed", 2451), ("inbandVpiExists", 2452), ("inbandVciExists", 2453), ("cacBwOverflowUp", 2551), ("cacBwOverflowDown", 2552), ("cacLineBlockedByTlm", 2553), ("cacTrafficTypeConflict", 2554), ("cacTrafficDirectionConflict", 2555), ("cacMbsOverflowUp", 2556), ("cacMbsOverflowDown", 2557), ("cacBwWarningUp", 2558), ("cacBwWarningDown", 2559), ("cacMbsWarningUp", 2560), ("cacMbsWarningDown", 2561), ("cacMbsScrError", 2562), ("cacInternalError", 2563), ("createHwUnit", 3000), ("deleteHwUnit", 3001), ("changeHwUnitForced", 3002), ("hwuParamFaulty", 3100), ("hwuCommandFailed", 3101), ("hwuObjExists", 3102), ("hwuEquTypeNotAvail", 3103), ("hwuEqhTypeNotAvail", 3104), ("hwuPiuTypeNotAvail", 3105), ("hwuPiuTypeNotAccepted", 3106), ("hwuContainingUnitNotAvail", 3107), ("hwuObjNotAvail", 3108), ("hwuObjNotEmpty", 3109), ("hwuObjNotLocked", 3110), ("hwuObjNotValid", 3111), ("hwuOk", 3112), ("hwuCreateHwUnitComplete", 3113), ("hwuCcExisting", 3114), ("hwuForcedChangeNotAllowed", 3115), ("hwuUpgradeRunning", 3116), ("riSingleBoard", 4000), ("riAllData", 4001), ("activateData", 5000), ("resourceProblem", 5150), ("vpProblem", 5151), ("resourceProblemUpstream", 5152), ("resourceProblemDownstream", 5153), ("vpProblemUpstream", 5154), ("vpProblemDownstream", 5155), ("bandwidthUpstreamWarning", 5156), ("bandwidthDownstreamWarning", 5157), ("mbsUpstreamWarning", 5158), ("mbsDownstreamWarning", 5119), ("wrongAdminState", 5161), ("wrongXdslServiceType", 5162), ("loopDiagRequest", 5500), ("loopTestRequest", 5600), ("loopTestReject", 5901), ("loopTestBusy", 5902), ("updateAlmList", 6000), ("updateFiltList", 6211), ("startSendingAlarms", 6213), ("noCurrentAlarms", 6214), ("warm", 6300), ("cold", 6301), ("reload", 6302), ("dbReload", 6303), ("rjUpgRunning", 6353), ("rjRstRunning", 6354), ("rjPiuNotAvail", 6355), ("rjResetNotSupported", 6356), ("rstRequestFailed", 6980), ("dbuReadRequest", 7000), ("dbuReadComplete", 7081), ("dbuReadFailed", 7082), ("dbuFileCreationFailed", 7083), ("dbuFileTransmissionFailed", 7084), ("sucUpgrStartRequest", 8000), ("sucActivateLoad", 8001), ("sucReadSAPSContentFile", 8003), ("sucGetSwVersions", 8004), ("sucUpgrEndRequest", 8006), ("sucUpgrTaskCreationFault", 8050), ("sucUpgrDbAccessFault", 8051), ("sucGetSwVersionsFailed", 8052), ("sucUpgrMissParameter", 8053), ("sucAlreadyLoaded", 8054), ("sucOk", 8320), ("sucNotOk", 8321), ("sucDbAccessFailed", 8322), ("sucPiuUnlocked", 8323), ("sucTransmissionError", 8324), ("sucWrongSwVersion", 8325), ("sucUnitTypeMismatch", 8326), ("sucFtpTransError", 8327), ("sucFtpCrcError", 8328), ("sucSwHwMismatch", 8329), ("sucUpgrWrongAvState", 8330), ("sucFepromCopyFault", 8331), ("sucUpdateDescFileFailed", 8332), ("sucFtpServerNoteAvailable", 8333), ("sucFtpSendError", 8334), ("sucDbBackupFault", 8335), ("sucUpgradeComplete", 8336), ("sucUpgradeNotComplete", 8337), ("sutInitialized", 8400), ("sutToDo", 8401), ("sutStarted", 8402), ("sutCrashed", 8404), ("sutFtpDone", 8408), ("sutDone", 8416), ("sutReadyForReset", 8432), ("sutObsolete", 8464), ("backupDb", 9000), ("localBackupOk", 9050), ("remoteBackupOk", 9051), ("localBackupFailed", 9052), ("remoteBackupFailed", 9053), ("flashAccessFailed", 9054), ("dbReadFailed", 9055), ("dbmLocalBackupOk", 9100), ("dbmRemoteBackupOk", 9101), ("dbmLocalBackupFailed", 9102), ("dbmRemoteBackupFailed", 9103), ("dbmFlashAccessFailed", 9104), ("dbmDbReadFailed", 9105), ("dbmLocalBackupFileFaulty", 9106), ("dbmRemoteBackupFileFaulty", 9107), ("dbmRestoreFailed", 9108), ("dbmRestoreOk", 9109), ("imaSetMinNumTxLinks", 9200), ("imaBwError", 9201), ("imaSetMinNumOk", 9202), ("imaSetMinNumFailed", 9203))

xldv20SnmpMgmt = MibIdentifier((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 1))
xldv20CallP = MibIdentifier((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 2))
xldv20Hwm = MibIdentifier((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 3))
xldv20Tlm = MibIdentifier((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 4))
xldv20TlmOam = MibIdentifier((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 5))
xldv20Alarming = MibIdentifier((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 6))
xldv20Swm = MibIdentifier((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 7))
xldv20Dbm = MibIdentifier((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 8))
xldv20TlmIma = MibIdentifier((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 9))
xldv20Traps = MibIdentifier((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 10))
xldv20SnmpControl = MibIdentifier((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 1, 1))
xldv20SnmTmnTrapFlowControl = MibScalar((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 1, 1, 1), Xldv20SuppressionType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xldv20SnmTmnTrapFlowControl.setStatus('mandatory')
xldv20SnmLctTrapFlowControl = MibScalar((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 1, 1, 2), Xldv20SuppressionType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xldv20SnmLctTrapFlowControl.setStatus('mandatory')
xldv20SnmControlReq = MibScalar((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 1, 1, 3), Xldv20ControlReq()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xldv20SnmControlReq.setStatus('mandatory')
xldv20SnmControlStatus = MibScalar((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 1, 1, 4), Xldv20ControlStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xldv20SnmControlStatus.setStatus('mandatory')
xldv20SnmLctConnected = MibScalar((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xldv20SnmLctConnected.setStatus('mandatory')
xldv20SnmTmnConnected = MibScalar((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xldv20SnmTmnConnected.setStatus('mandatory')
xldv20SnmMaxResponseTime = MibScalar((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 1, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xldv20SnmMaxResponseTime.setStatus('mandatory')
xldv20SnmTmnMaxNumber = MibScalar((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 1, 1, 8), Unsigned16()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xldv20SnmTmnMaxNumber.setStatus('mandatory')
xldv20SnmTmnSpecificIndex = MibScalar((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 1, 1, 9), Unsigned16()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xldv20SnmTmnSpecificIndex.setStatus('mandatory')
xldv20SnmCallpPollingFlag = MibScalar((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 1, 1, 10), Xldv20PollingFlagType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xldv20SnmCallpPollingFlag.setStatus('mandatory')
xldv20SnmLctSessionPollingFlag = MibScalar((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 1, 1, 11), Xldv20PollingFlagType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xldv20SnmLctSessionPollingFlag.setStatus('mandatory')
xldv20SnmControlReqResult = MibScalar((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 1, 1, 12), Xldv20ControlReq()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xldv20SnmControlReqResult.setStatus('mandatory')
xldv20SnmStartupResult = MibScalar((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 1, 1, 13), Xldv20StartupResult()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xldv20SnmStartupResult.setStatus('mandatory')
xldv20SnmControlTimeStamp = MibScalar((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 1, 1, 14), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xldv20SnmControlTimeStamp.setStatus('mandatory')
xldv20TmnTable = MibTable((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 1, 2), )
if mibBuilder.loadTexts: xldv20TmnTable.setStatus('mandatory')
xldv20TmnEntry = MibTableRow((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 1, 2, 1), ).setIndexNames((0, "XLDV20-MIB", "xldv20TmnIndex"))
if mibBuilder.loadTexts: xldv20TmnEntry.setStatus('mandatory')
xldv20TmnIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 1, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 11))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xldv20TmnIndex.setStatus('mandatory')
xldv20TmnOrLctTerminal = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 1, 2, 1, 2), Xldv20TerminalType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xldv20TmnOrLctTerminal.setStatus('mandatory')
xldv20TmnInOrOutBand = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 1, 2, 1, 3), Xldv20ChannelType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xldv20TmnInOrOutBand.setStatus('mandatory')
xldv20TmnConnected = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 1, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xldv20TmnConnected.setStatus('mandatory')
xldv20TmnTrapFlowControl = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 1, 2, 1, 5), Xldv20SuppressionType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xldv20TmnTrapFlowControl.setStatus('mandatory')
xldv20TmnLctSessionPollingFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 1, 2, 1, 6), Xldv20PollingFlagType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xldv20TmnLctSessionPollingFlag.setStatus('mandatory')
xldv20AtmCcControl = MibIdentifier((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 2, 1))
xldv20ActOperationalState = MibScalar((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 2, 1, 1), Xldv20OperState())
if mibBuilder.loadTexts: xldv20ActOperationalState.setStatus('mandatory')
xldv20ActControlReq = MibScalar((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 2, 1, 2), Xldv20ControlReq()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xldv20ActControlReq.setStatus('mandatory')
xldv20ActControlStatus = MibScalar((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 2, 1, 3), Xldv20ControlStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xldv20ActControlStatus.setStatus('mandatory')
xldv20ActVpiNni = MibScalar((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 2, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4095))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xldv20ActVpiNni.setStatus('mandatory')
xldv20ActVpiUni = MibScalar((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 2, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 63))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xldv20ActVpiUni.setStatus('mandatory')
xldv20ActVciNni = MibScalar((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 2, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(32, 3500))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xldv20ActVciNni.setStatus('mandatory')
xldv20ActVciUni = MibScalar((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 2, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(32, 3500))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xldv20ActVciUni.setStatus('mandatory')
xldv20ActIfIndex = MibScalar((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 2, 1, 8), Unsigned16()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xldv20ActIfIndex.setStatus('mandatory')
xldv20ActPeakCellRateUpstream = MibScalar((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 2, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 160000000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xldv20ActPeakCellRateUpstream.setStatus('mandatory')
xldv20ActPeakCellRateDownstream = MibScalar((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 2, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 160000000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xldv20ActPeakCellRateDownstream.setStatus('mandatory')
xldv20ActCellDelayVariationToleranceUpstream = MibScalar((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 2, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(2, 200000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xldv20ActCellDelayVariationToleranceUpstream.setStatus('mandatory')
xldv20ActCellDelayVariationToleranceDownstream = MibScalar((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 2, 1, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(2, 200000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xldv20ActCellDelayVariationToleranceDownstream.setStatus('mandatory')
xldv20ActTrafficType = MibScalar((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 2, 1, 13), Xldv20TrafficType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xldv20ActTrafficType.setStatus('mandatory')
xldv20ActTrafficDirection = MibScalar((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 2, 1, 14), Xldv20TrafficDirection()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xldv20ActTrafficDirection.setStatus('mandatory')
xldv20ActSustainableCellRateUpstream = MibScalar((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 2, 1, 15), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 155000000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xldv20ActSustainableCellRateUpstream.setStatus('mandatory')
xldv20ActSustainableCellRateDownstream = MibScalar((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 2, 1, 16), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 155000000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xldv20ActSustainableCellRateDownstream.setStatus('mandatory')
xldv20ActMaximumBurstSizeUpstream = MibScalar((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 2, 1, 17), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1500))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xldv20ActMaximumBurstSizeUpstream.setStatus('mandatory')
xldv20ActMaximumBurstSizeDownstream = MibScalar((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 2, 1, 18), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1500))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xldv20ActMaximumBurstSizeDownstream.setStatus('mandatory')
xldv20ActSegmentEndPointNni = MibScalar((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 2, 1, 19), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xldv20ActSegmentEndPointNni.setStatus('mandatory')
xldv20ActSegmentEndPointUni = MibScalar((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 2, 1, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xldv20ActSegmentEndPointUni.setStatus('mandatory')
xldv20ActEthMode = MibScalar((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 2, 1, 21), Xldv20EthNtMode()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xldv20ActEthMode.setStatus('mandatory')
xldv20ActEthE164Isp = MibScalar((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 2, 1, 22), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xldv20ActEthE164Isp.setStatus('mandatory')
xldv20ActEthIpAddressNt = MibScalar((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 2, 1, 23), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xldv20ActEthIpAddressNt.setStatus('mandatory')
xldv20ActEthIpAddressSubnetMaskNt = MibScalar((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 2, 1, 24), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xldv20ActEthIpAddressSubnetMaskNt.setStatus('mandatory')
xldv20ActEthIpAddressCo = MibScalar((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 2, 1, 25), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xldv20ActEthIpAddressCo.setStatus('mandatory')
xldv20ActEthIpAddressSubnetMaskCo = MibScalar((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 2, 1, 26), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xldv20ActEthIpAddressSubnetMaskCo.setStatus('mandatory')
xldv20ActEthIpAddressRemoteRouter = MibScalar((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 2, 1, 27), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xldv20ActEthIpAddressRemoteRouter.setStatus('mandatory')
xldv20ActTestTypeNni = MibScalar((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 2, 1, 28), Xldv20TestType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xldv20ActTestTypeNni.setStatus('mandatory')
xldv20ActContinuityCheckNni = MibScalar((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 2, 1, 29), Xldv20OperState()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xldv20ActContinuityCheckNni.setStatus('mandatory')
xldv20ActEndpointTypeNni = MibScalar((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 2, 1, 30), Xldv20EndpointType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xldv20ActEndpointTypeNni.setStatus('mandatory')
xldv20ActTestTypeUni = MibScalar((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 2, 1, 31), Xldv20TestType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xldv20ActTestTypeUni.setStatus('mandatory')
xldv20ActContinuityCheckUni = MibScalar((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 2, 1, 32), Xldv20OperState()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xldv20ActContinuityCheckUni.setStatus('mandatory')
xldv20ActEndpointTypeUni = MibScalar((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 2, 1, 33), Xldv20EndpointType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xldv20ActEndpointTypeUni.setStatus('mandatory')
xldv20ActControlReqResult = MibScalar((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 2, 1, 34), Xldv20ControlReq()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xldv20ActControlReqResult.setStatus('mandatory')
xldv20ActInbandVpi = MibScalar((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 2, 1, 35), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xldv20ActInbandVpi.setStatus('mandatory')
xldv20ActInbandVci = MibScalar((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 2, 1, 36), Integer32().subtype(subtypeSpec=ValueRangeConstraint(32, 127))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xldv20ActInbandVci.setStatus('mandatory')
xldv20ActCallpTableIndex = MibScalar((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 2, 1, 37), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4144))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xldv20ActCallpTableIndex.setStatus('mandatory')
xldv20ActMaxVciValue = MibScalar((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 2, 1, 38), Integer32().subtype(subtypeSpec=ValueRangeConstraint(32, 3500))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xldv20ActMaxVciValue.setStatus('mandatory')
xldv20ActVbrCDVTUpstream = MibScalar((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 2, 1, 39), Integer32().subtype(subtypeSpec=ValueRangeConstraint(2, 504000000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xldv20ActVbrCDVTUpstream.setStatus('mandatory')
xldv20ActVbrCDVTDownstream = MibScalar((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 2, 1, 40), Integer32().subtype(subtypeSpec=ValueRangeConstraint(2, 504000000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xldv20ActVbrCDVTDownstream.setStatus('mandatory')
xldv20ActControlTimeStamp = MibScalar((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 2, 1, 41), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xldv20ActControlTimeStamp.setStatus('mandatory')
xldv20ActSegmentEndPointNt = MibScalar((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 2, 1, 42), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xldv20ActSegmentEndPointNt.setStatus('mandatory')
xldv20ActTestTypeNt = MibScalar((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 2, 1, 43), Xldv20TestType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xldv20ActTestTypeNt.setStatus('mandatory')
xldv20ActContinuityCheckNt = MibScalar((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 2, 1, 44), Xldv20OperState()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xldv20ActContinuityCheckNt.setStatus('mandatory')
xldv20ActEndpointTypeNt = MibScalar((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 2, 1, 45), Xldv20EndpointType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xldv20ActEndpointTypeNt.setStatus('mandatory')
xldv20ActCDVTAutoConfig = MibScalar((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 2, 1, 46), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xldv20ActCDVTAutoConfig.setStatus('mandatory')
xldv20AtmCrossConnectTable = MibTable((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 2, 2), )
if mibBuilder.loadTexts: xldv20AtmCrossConnectTable.setStatus('mandatory')
xldv20AtmCrossConnectEntry = MibTableRow((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 2, 2, 1), ).setIndexNames((0, "XLDV20-MIB", "xldv20AccVpiNniIndex"))
if mibBuilder.loadTexts: xldv20AtmCrossConnectEntry.setStatus('mandatory')
xldv20AccOperationalState = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 2, 2, 1, 1), Xldv20OperState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xldv20AccOperationalState.setStatus('mandatory')
xldv20AccTerminationPointA = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 2, 2, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4096))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xldv20AccTerminationPointA.setStatus('mandatory')
xldv20AccTerminationPointZ = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 2, 2, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4096))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xldv20AccTerminationPointZ.setStatus('mandatory')
xldv20AccLineIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 2, 2, 1, 4), Unsigned16()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xldv20AccLineIndex.setStatus('mandatory')
xldv20AccEthVpcIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 2, 2, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xldv20AccEthVpcIndex.setStatus('mandatory')
xldv20AccEthVccIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 2, 2, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xldv20AccEthVccIndex.setStatus('mandatory')
xldv20AccVpiNniIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 2, 2, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xldv20AccVpiNniIndex.setStatus('mandatory')
xldv20AccAlarmState = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 2, 2, 1, 8), Xldv20CallpAlarmState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xldv20AccAlarmState.setStatus('mandatory')
xldv20AccAdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 2, 2, 1, 9), Xldv20AdminState()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xldv20AccAdminState.setStatus('mandatory')
xldv20AccAtmfVplIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 2, 2, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xldv20AccAtmfVplIndex.setStatus('mandatory')
xldv20VplTpTable = MibTable((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 2, 3), )
if mibBuilder.loadTexts: xldv20VplTpTable.setStatus('mandatory')
xldv20VplTpEntry = MibTableRow((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 2, 3, 1), ).setIndexNames((0, "XLDV20-MIB", "xldv20VplIndex"))
if mibBuilder.loadTexts: xldv20VplTpEntry.setStatus('mandatory')
xldv20VplOperationalState = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 2, 3, 1, 1), Xldv20OperState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xldv20VplOperationalState.setStatus('mandatory')
xldv20VplVpiValue = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 2, 3, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4095))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xldv20VplVpiValue.setStatus('mandatory')
xldv20VplHwUnitIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 2, 3, 1, 3), Unsigned16()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xldv20VplHwUnitIndex.setStatus('mandatory')
xldv20VplIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 2, 3, 1, 4), Unsigned16()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xldv20VplIfIndex.setStatus('mandatory')
xldv20VplPeakCellRateUpstream = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 2, 3, 1, 5), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xldv20VplPeakCellRateUpstream.setStatus('mandatory')
xldv20VplPeakCellRateDownstream = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 2, 3, 1, 6), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xldv20VplPeakCellRateDownstream.setStatus('mandatory')
xldv20VplCellDelayVariationToleranceUpstream = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 2, 3, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(2, 200000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xldv20VplCellDelayVariationToleranceUpstream.setStatus('mandatory')
xldv20VplCellDelayVariationToleranceDownstream = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 2, 3, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(2, 200000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xldv20VplCellDelayVariationToleranceDownstream.setStatus('mandatory')
xldv20VplTrafficType = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 2, 3, 1, 9), Xldv20TrafficType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xldv20VplTrafficType.setStatus('mandatory')
xldv20VplTrafficDirection = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 2, 3, 1, 10), Xldv20TrafficDirection()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xldv20VplTrafficDirection.setStatus('mandatory')
xldv20VplConnectivityPointer = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 2, 3, 1, 11), Unsigned16()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xldv20VplConnectivityPointer.setStatus('mandatory')
xldv20VplLineIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 2, 3, 1, 12), Unsigned16()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xldv20VplLineIndex.setStatus('mandatory')
xldv20VplSegmentEndPoint = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 2, 3, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xldv20VplSegmentEndPoint.setStatus('mandatory')
xldv20VplSustainableCellRateUpstream = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 2, 3, 1, 14), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xldv20VplSustainableCellRateUpstream.setStatus('mandatory')
xldv20VplSustainableCellRateDownstream = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 2, 3, 1, 15), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xldv20VplSustainableCellRateDownstream.setStatus('mandatory')
xldv20VplMaximumBurstSizeUpstream = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 2, 3, 1, 16), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1500))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xldv20VplMaximumBurstSizeUpstream.setStatus('mandatory')
xldv20VplMaximumBurstSizeDownstream = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 2, 3, 1, 17), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1500))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xldv20VplMaximumBurstSizeDownstream.setStatus('mandatory')
xldv20VplAlarmSeverityIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 2, 3, 1, 18), Xldv20AlmSevProfileIndex()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xldv20VplAlarmSeverityIndex.setStatus('mandatory')
xldv20VplAlarmFilteringIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 2, 3, 1, 19), Xldv20AlmFiltProfileIndex())
if mibBuilder.loadTexts: xldv20VplAlarmFilteringIndex.setStatus('mandatory')
xldv20VplCvpIndexSegment = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 2, 3, 1, 20), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xldv20VplCvpIndexSegment.setStatus('mandatory')
xldv20VplIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 2, 3, 1, 21), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xldv20VplIndex.setStatus('mandatory')
xldv20VplLOCAlarm = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 2, 3, 1, 22), Xldv20TpAlarmState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xldv20VplLOCAlarm.setStatus('mandatory')
xldv20VplVbrCDVTUpstream = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 2, 3, 1, 23), Integer32().subtype(subtypeSpec=ValueRangeConstraint(2, 504000000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xldv20VplVbrCDVTUpstream.setStatus('mandatory')
xldv20VplVbrCDVTDownstream = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 2, 3, 1, 24), Integer32().subtype(subtypeSpec=ValueRangeConstraint(2, 504000000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xldv20VplVbrCDVTDownstream.setStatus('mandatory')
xldv20VpcTpTable = MibTable((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 2, 4), )
if mibBuilder.loadTexts: xldv20VpcTpTable.setStatus('mandatory')
xldv20VpcTpEntry = MibTableRow((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 2, 4, 1), ).setIndexNames((0, "XLDV20-MIB", "xldv20VpcIndex"))
if mibBuilder.loadTexts: xldv20VpcTpEntry.setStatus('mandatory')
xldv20VpcOperationalState = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 2, 4, 1, 1), Xldv20OperState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xldv20VpcOperationalState.setStatus('mandatory')
xldv20VpcVpiValue = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 2, 4, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4095))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xldv20VpcVpiValue.setStatus('mandatory')
xldv20VpcHwUnitIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 2, 4, 1, 3), Unsigned16()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xldv20VpcHwUnitIndex.setStatus('mandatory')
xldv20VpcIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 2, 4, 1, 4), Unsigned16()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xldv20VpcIfIndex.setStatus('mandatory')
xldv20VpcPeakCellRateUpstream = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 2, 4, 1, 5), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xldv20VpcPeakCellRateUpstream.setStatus('mandatory')
xldv20VpcPeakCellRateDownstream = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 2, 4, 1, 6), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xldv20VpcPeakCellRateDownstream.setStatus('mandatory')
xldv20VpcCellDelayVariationToleranceUpstream = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 2, 4, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(2, 200000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xldv20VpcCellDelayVariationToleranceUpstream.setStatus('mandatory')
xldv20VpcCellDelayVariationToleranceDownstream = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 2, 4, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(2, 200000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xldv20VpcCellDelayVariationToleranceDownstream.setStatus('mandatory')
xldv20VpcTrafficType = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 2, 4, 1, 9), Xldv20TrafficType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xldv20VpcTrafficType.setStatus('mandatory')
xldv20VpcTrafficDirection = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 2, 4, 1, 10), Xldv20TrafficDirection()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xldv20VpcTrafficDirection.setStatus('mandatory')
xldv20VpcLineIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 2, 4, 1, 11), Unsigned16()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xldv20VpcLineIndex.setStatus('mandatory')
xldv20VpcSegmentEndPoint = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 2, 4, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xldv20VpcSegmentEndPoint.setStatus('mandatory')
xldv20VpcSustainableCellRateUpstream = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 2, 4, 1, 13), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xldv20VpcSustainableCellRateUpstream.setStatus('mandatory')
xldv20VpcSustainableCellRateDownstream = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 2, 4, 1, 14), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xldv20VpcSustainableCellRateDownstream.setStatus('mandatory')
xldv20VpcMaximumBurstSizeUpstream = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 2, 4, 1, 15), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1500))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xldv20VpcMaximumBurstSizeUpstream.setStatus('mandatory')
xldv20VpcMaximumBurstSizeDownstream = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 2, 4, 1, 16), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1500))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xldv20VpcMaximumBurstSizeDownstream.setStatus('mandatory')
xldv20VpcAlarmSeverityIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 2, 4, 1, 17), Xldv20AlmSevProfileIndex()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xldv20VpcAlarmSeverityIndex.setStatus('mandatory')
xldv20VpcAlarmFilteringIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 2, 4, 1, 18), Xldv20AlmFiltProfileIndex())
if mibBuilder.loadTexts: xldv20VpcAlarmFilteringIndex.setStatus('mandatory')
xldv20VpcCvpIndexSegment = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 2, 4, 1, 19), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xldv20VpcCvpIndexSegment.setStatus('mandatory')
xldv20VpcCvpIndexEndToEnd = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 2, 4, 1, 20), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xldv20VpcCvpIndexEndToEnd.setStatus('mandatory')
xldv20VpcIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 2, 4, 1, 21), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xldv20VpcIndex.setStatus('mandatory')
xldv20VpcAISAlarm = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 2, 4, 1, 22), Xldv20TpAlarmState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xldv20VpcAISAlarm.setStatus('mandatory')
xldv20VpcRDIAlarm = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 2, 4, 1, 23), Xldv20TpAlarmState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xldv20VpcRDIAlarm.setStatus('mandatory')
xldv20VpcLOCAlarm = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 2, 4, 1, 24), Xldv20TpAlarmState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xldv20VpcLOCAlarm.setStatus('mandatory')
xldv20VpcNumberOfVcs = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 2, 4, 1, 25), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 3469))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xldv20VpcNumberOfVcs.setStatus('mandatory')
xldv20VpcVbrCDVTUpstream = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 2, 4, 1, 26), Integer32().subtype(subtypeSpec=ValueRangeConstraint(2, 504000000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xldv20VpcVbrCDVTUpstream.setStatus('mandatory')
xldv20VpcVbrCDVTDownstream = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 2, 4, 1, 27), Integer32().subtype(subtypeSpec=ValueRangeConstraint(2, 504000000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xldv20VpcVbrCDVTDownstream.setStatus('mandatory')
xldv20VpcEmSpecific = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 2, 4, 1, 28), Unsigned16()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xldv20VpcEmSpecific.setStatus('mandatory')
xldv20VpcEthVpcIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 2, 4, 1, 29), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xldv20VpcEthVpcIndex.setStatus('mandatory')
xldv20VpcAtmfVplIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 2, 4, 1, 30), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xldv20VpcAtmfVplIndex.setStatus('mandatory')
xldv20VccTpTable = MibTable((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 2, 5), )
if mibBuilder.loadTexts: xldv20VccTpTable.setStatus('mandatory')
xldv20VccTpEntry = MibTableRow((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 2, 5, 1), ).setIndexNames((0, "XLDV20-MIB", "xldv20VccIndex"))
if mibBuilder.loadTexts: xldv20VccTpEntry.setStatus('mandatory')
xldv20VccOperationalState = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 2, 5, 1, 1), Xldv20OperState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xldv20VccOperationalState.setStatus('mandatory')
xldv20VccVciValue = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 2, 5, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(32, 3500))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xldv20VccVciValue.setStatus('mandatory')
xldv20VccVpcIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 2, 5, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xldv20VccVpcIndex.setStatus('mandatory')
xldv20VccHwUnitIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 2, 5, 1, 4), Unsigned16()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xldv20VccHwUnitIndex.setStatus('mandatory')
xldv20VccAlarmSeverityIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 2, 5, 1, 5), Xldv20AlmSevProfileIndex()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xldv20VccAlarmSeverityIndex.setStatus('mandatory')
xldv20VccAlarmFilteringIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 2, 5, 1, 6), Xldv20AlmFiltProfileIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xldv20VccAlarmFilteringIndex.setStatus('mandatory')
xldv20VccLineIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 2, 5, 1, 7), Unsigned16()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xldv20VccLineIndex.setStatus('mandatory')
xldv20VccIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 2, 5, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xldv20VccIndex.setStatus('mandatory')
xldv20VccAISAlarm = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 2, 5, 1, 9), Xldv20TpAlarmState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xldv20VccAISAlarm.setStatus('mandatory')
xldv20VccRDIAlarm = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 2, 5, 1, 10), Xldv20TpAlarmState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xldv20VccRDIAlarm.setStatus('mandatory')
xldv20VccLOCAlarm = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 2, 5, 1, 11), Xldv20TpAlarmState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xldv20VccLOCAlarm.setStatus('mandatory')
xldv20VccCvcIndexSegment = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 2, 5, 1, 12), Unsigned16()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xldv20VccCvcIndexSegment.setStatus('mandatory')
xldv20VccCvcIndexEndToEnd = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 2, 5, 1, 13), Unsigned16()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xldv20VccCvcIndexEndToEnd.setStatus('mandatory')
xldv20VcCrossConnectTable = MibTable((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 2, 6), )
if mibBuilder.loadTexts: xldv20VcCrossConnectTable.setStatus('mandatory')
xldv20VcCrossConnectEntry = MibTableRow((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 2, 6, 1), ).setIndexNames((0, "XLDV20-MIB", "xldv20VcxIndex"))
if mibBuilder.loadTexts: xldv20VcCrossConnectEntry.setStatus('mandatory')
xldv20VcxOperationalState = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 2, 6, 1, 1), Xldv20OperState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xldv20VcxOperationalState.setStatus('mandatory')
xldv20VcxTerminationPointA = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 2, 6, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4096))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xldv20VcxTerminationPointA.setStatus('mandatory')
xldv20VcxTerminationPointZ = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 2, 6, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4096))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xldv20VcxTerminationPointZ.setStatus('mandatory')
xldv20VcxLineIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 2, 6, 1, 4), Unsigned16()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xldv20VcxLineIndex.setStatus('mandatory')
xldv20VcxEthVpcIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 2, 6, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xldv20VcxEthVpcIndex.setStatus('mandatory')
xldv20VcxEthVccIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 2, 6, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xldv20VcxEthVccIndex.setStatus('mandatory')
xldv20VcxVpcNniIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 2, 6, 1, 7), Unsigned16()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xldv20VcxVpcNniIndex.setStatus('mandatory')
xldv20VcxVpcUniIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 2, 6, 1, 8), Unsigned16()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xldv20VcxVpcUniIndex.setStatus('mandatory')
xldv20VcxIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 2, 6, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xldv20VcxIndex.setStatus('mandatory')
xldv20VcxAlarmState = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 2, 6, 1, 10), Xldv20CallpAlarmState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xldv20VcxAlarmState.setStatus('mandatory')
xldv20VcxAdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 2, 6, 1, 11), Xldv20AdminState()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xldv20VcxAdminState.setStatus('mandatory')
xldv20VcxAtmfVplIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 2, 6, 1, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xldv20VcxAtmfVplIndex.setStatus('mandatory')
xldv20VclTpTable = MibTable((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 2, 7), )
if mibBuilder.loadTexts: xldv20VclTpTable.setStatus('mandatory')
xldv20VclTpEntry = MibTableRow((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 2, 7, 1), ).setIndexNames((0, "XLDV20-MIB", "xldv20VclIndex"))
if mibBuilder.loadTexts: xldv20VclTpEntry.setStatus('mandatory')
xldv20VclOperationalState = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 2, 7, 1, 1), Xldv20OperState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xldv20VclOperationalState.setStatus('mandatory')
xldv20VclVpiValue = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 2, 7, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4095))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xldv20VclVpiValue.setStatus('mandatory')
xldv20VclVciValue = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 2, 7, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(32, 3500))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xldv20VclVciValue.setStatus('mandatory')
xldv20VclHwUnitIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 2, 7, 1, 4), Unsigned16()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xldv20VclHwUnitIndex.setStatus('mandatory')
xldv20VclIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 2, 7, 1, 5), Unsigned16()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xldv20VclIfIndex.setStatus('mandatory')
xldv20VclPeakCellRateUpstream = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 2, 7, 1, 6), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xldv20VclPeakCellRateUpstream.setStatus('mandatory')
xldv20VclPeakCellRateDownstream = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 2, 7, 1, 7), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xldv20VclPeakCellRateDownstream.setStatus('mandatory')
xldv20VclCellDelayVariationToleranceUpstream = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 2, 7, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(2, 200000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xldv20VclCellDelayVariationToleranceUpstream.setStatus('mandatory')
xldv20VclCellDelayVariationToleranceDownstream = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 2, 7, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(2, 200000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xldv20VclCellDelayVariationToleranceDownstream.setStatus('mandatory')
xldv20VclTrafficType = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 2, 7, 1, 10), Xldv20TrafficType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xldv20VclTrafficType.setStatus('mandatory')
xldv20VclTrafficDirection = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 2, 7, 1, 11), Xldv20TrafficDirection()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xldv20VclTrafficDirection.setStatus('mandatory')
xldv20VclConnectivityPointer = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 2, 7, 1, 12), Unsigned16()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xldv20VclConnectivityPointer.setStatus('mandatory')
xldv20VclLineIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 2, 7, 1, 13), Unsigned16()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xldv20VclLineIndex.setStatus('mandatory')
xldv20VclSegmentEndPoint = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 2, 7, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xldv20VclSegmentEndPoint.setStatus('mandatory')
xldv20VclSustainableCellRateUpstream = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 2, 7, 1, 15), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xldv20VclSustainableCellRateUpstream.setStatus('mandatory')
xldv20VclSustainableCellRateDownstream = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 2, 7, 1, 16), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xldv20VclSustainableCellRateDownstream.setStatus('mandatory')
xldv20VclMaximumBurstSizeUpstream = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 2, 7, 1, 17), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1500))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xldv20VclMaximumBurstSizeUpstream.setStatus('mandatory')
xldv20VclMaximumBurstSizeDownstream = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 2, 7, 1, 18), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1500))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xldv20VclMaximumBurstSizeDownstream.setStatus('mandatory')
xldv20VclAlarmSeverityIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 2, 7, 1, 19), Xldv20AlmSevProfileIndex()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xldv20VclAlarmSeverityIndex.setStatus('mandatory')
xldv20VclAlarmFilteringIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 2, 7, 1, 20), Xldv20AlmFiltProfileIndex())
if mibBuilder.loadTexts: xldv20VclAlarmFilteringIndex.setStatus('mandatory')
xldv20VclCvcIndexSegment = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 2, 7, 1, 21), Unsigned16()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xldv20VclCvcIndexSegment.setStatus('mandatory')
xldv20VclIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 2, 7, 1, 22), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xldv20VclIndex.setStatus('mandatory')
xldv20VclLOCAlarm = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 2, 7, 1, 23), Xldv20TpAlarmState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xldv20VclLOCAlarm.setStatus('mandatory')
xldv20VclVpcIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 2, 7, 1, 24), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xldv20VclVpcIndex.setStatus('mandatory')
xldv20VclVbrCDVTUpstream = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 2, 7, 1, 25), Integer32().subtype(subtypeSpec=ValueRangeConstraint(2, 504000000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xldv20VclVbrCDVTUpstream.setStatus('mandatory')
xldv20VclVbrCDVTDownstream = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 2, 7, 1, 26), Integer32().subtype(subtypeSpec=ValueRangeConstraint(2, 504000000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xldv20VclVbrCDVTDownstream.setStatus('mandatory')
xldv20EthernetConfigTable = MibTable((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 2, 10), )
if mibBuilder.loadTexts: xldv20EthernetConfigTable.setStatus('mandatory')
xldv20EthernetConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 2, 10, 1), ).setIndexNames((0, "XLDV20-MIB", "xldv20IfIndex"))
if mibBuilder.loadTexts: xldv20EthernetConfigEntry.setStatus('mandatory')
xldv20EthMode = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 2, 10, 1, 1), Xldv20EthNtMode()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xldv20EthMode.setStatus('mandatory')
xldv20EthE164Isp = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 2, 10, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xldv20EthE164Isp.setStatus('mandatory')
xldv20EthIpAddressNt = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 2, 10, 1, 3), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xldv20EthIpAddressNt.setStatus('mandatory')
xldv20EthIpAddressSubnetMaskNt = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 2, 10, 1, 4), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xldv20EthIpAddressSubnetMaskNt.setStatus('mandatory')
xldv20EthIpAddressCo = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 2, 10, 1, 5), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xldv20EthIpAddressCo.setStatus('mandatory')
xldv20EthIpAddressSubnetMaskCo = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 2, 10, 1, 6), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xldv20EthIpAddressSubnetMaskCo.setStatus('mandatory')
xldv20EthIpAddressRemoteRouter = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 2, 10, 1, 7), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xldv20EthIpAddressRemoteRouter.setStatus('mandatory')
xldv20ContinuityCheckVpTable = MibTable((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 2, 11), )
if mibBuilder.loadTexts: xldv20ContinuityCheckVpTable.setStatus('mandatory')
xldv20ContinuityCheckVpEntry = MibTableRow((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 2, 11, 1), ).setIndexNames((0, "XLDV20-MIB", "xldv20CvpIndex"))
if mibBuilder.loadTexts: xldv20ContinuityCheckVpEntry.setStatus('mandatory')
xldv20CvpIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 2, 11, 1, 1), Unsigned16()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xldv20CvpIndex.setStatus('mandatory')
xldv20CvpEndpointType = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 2, 11, 1, 2), Xldv20EndpointType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xldv20CvpEndpointType.setStatus('mandatory')
xldv20CvpTestType = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 2, 11, 1, 3), Xldv20TestType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xldv20CvpTestType.setStatus('mandatory')
xldv20CvpOperationalState = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 2, 11, 1, 4), Xldv20OperState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xldv20CvpOperationalState.setStatus('mandatory')
xldv20CvpVpTpIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 2, 11, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 5000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xldv20CvpVpTpIndex.setStatus('mandatory')
xldv20CvpObjectType = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 2, 11, 1, 6), Xldv20RepSource()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xldv20CvpObjectType.setStatus('mandatory')
xldv20ContinuityCheckVcTable = MibTable((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 2, 12), )
if mibBuilder.loadTexts: xldv20ContinuityCheckVcTable.setStatus('mandatory')
xldv20ContinuityCheckVcEntry = MibTableRow((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 2, 12, 1), ).setIndexNames((0, "XLDV20-MIB", "xldv20CvcIndex"))
if mibBuilder.loadTexts: xldv20ContinuityCheckVcEntry.setStatus('mandatory')
xldv20CvcIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 2, 12, 1, 1), Unsigned16()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xldv20CvcIndex.setStatus('mandatory')
xldv20CvcEndpointType = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 2, 12, 1, 2), Xldv20EndpointType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xldv20CvcEndpointType.setStatus('mandatory')
xldv20CvcTestType = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 2, 12, 1, 3), Xldv20TestType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xldv20CvcTestType.setStatus('mandatory')
xldv20CvcOperationalState = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 2, 12, 1, 4), Xldv20OperState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xldv20CvcOperationalState.setStatus('mandatory')
xldv20CvcVcTpIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 2, 12, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xldv20CvcVcTpIndex.setStatus('mandatory')
xldv20CvcObjectType = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 2, 12, 1, 6), Xldv20RepSource()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xldv20CvcObjectType.setStatus('mandatory')
xldv20ContinuityCheckControl = MibIdentifier((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 2, 13))
xldv20CocControlReq = MibScalar((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 2, 13, 1), Xldv20ControlReq()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xldv20CocControlReq.setStatus('mandatory')
xldv20CocControlStatus = MibScalar((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 2, 13, 2), Xldv20ControlStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xldv20CocControlStatus.setStatus('mandatory')
xldv20CocEndpointType = MibScalar((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 2, 13, 3), Xldv20EndpointType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xldv20CocEndpointType.setStatus('mandatory')
xldv20CocObjectType = MibScalar((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 2, 13, 4), Xldv20RepSource()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xldv20CocObjectType.setStatus('mandatory')
xldv20CocTestType = MibScalar((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 2, 13, 5), Xldv20TestType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xldv20CocTestType.setStatus('mandatory')
xldv20CocIndex = MibScalar((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 2, 13, 6), Unsigned16()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xldv20CocIndex.setStatus('mandatory')
xldv20CocControlReqResult = MibScalar((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 2, 13, 7), Xldv20ControlReq()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xldv20CocControlReqResult.setStatus('mandatory')
xldv20CocControlTimeStamp = MibScalar((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 2, 13, 8), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xldv20CocControlTimeStamp.setStatus('mandatory')
xldv20InbandTmn = MibIdentifier((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 2, 14))
xldv20InbandVpiCurrent = MibScalar((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 2, 14, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4095))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xldv20InbandVpiCurrent.setStatus('mandatory')
xldv20InbandVciCurrent = MibScalar((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 2, 14, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xldv20InbandVciCurrent.setStatus('mandatory')
xldv20InbandVpiConfig = MibScalar((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 2, 14, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4095))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xldv20InbandVpiConfig.setStatus('mandatory')
xldv20InbandVciConfig = MibScalar((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 2, 14, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xldv20InbandVciConfig.setStatus('mandatory')
xldv20AtmNe = MibIdentifier((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 3, 1))
xldv20NeLocation = MibScalar((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 3, 1, 1), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xldv20NeLocation.setStatus('mandatory')
xldv20NeVendor = MibScalar((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 3, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xldv20NeVendor.setStatus('mandatory')
xldv20NeVersion = MibScalar((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 3, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xldv20NeVersion.setStatus('mandatory')
xldv20NeExternalTime = MibScalar((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 3, 1, 4), TimeTicks()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xldv20NeExternalTime.setStatus('mandatory')
xldv20NeTimeZone = MibScalar((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 3, 1, 5), Xldv20TimeZone()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xldv20NeTimeZone.setStatus('mandatory')
xldv20NeDescriptorFileName = MibScalar((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 3, 1, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xldv20NeDescriptorFileName.setStatus('mandatory')
xldv20NeExternalTime45020 = MibScalar((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 3, 1, 7), TimeTicks()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xldv20NeExternalTime45020.setStatus('mandatory')
xldv20NeSummerTime = MibScalar((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 3, 1, 8), Xldv20DayLightSavingTime()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xldv20NeSummerTime.setStatus('mandatory')
xldv20HwUnitTable = MibTable((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 3, 2), )
if mibBuilder.loadTexts: xldv20HwUnitTable.setStatus('mandatory')
xldv20HwUnitEntry = MibTableRow((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 3, 2, 1), ).setIndexNames((0, "XLDV20-MIB", "xldv20HwUnitIndex"))
if mibBuilder.loadTexts: xldv20HwUnitEntry.setStatus('mandatory')
xldv20HwUnitIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 3, 2, 1, 1), Unsigned16()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xldv20HwUnitIndex.setStatus('mandatory')
xldv20HwUnitType = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 3, 2, 1, 2), Xldv20HwUnitType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xldv20HwUnitType.setStatus('mandatory')
xldv20HwContainmentTable = MibTable((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 3, 3), )
if mibBuilder.loadTexts: xldv20HwContainmentTable.setStatus('mandatory')
xldv20HwContainmentEntry = MibTableRow((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 3, 3, 1), ).setIndexNames((0, "XLDV20-MIB", "xldv20HwContainingUnitIndex"), (0, "XLDV20-MIB", "xldv20HwContainedUnitAddr"))
if mibBuilder.loadTexts: xldv20HwContainmentEntry.setStatus('mandatory')
xldv20HwContainingUnitIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 3, 3, 1, 1), Unsigned16()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xldv20HwContainingUnitIndex.setStatus('mandatory')
xldv20HwContainedUnitAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 3, 3, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 512))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xldv20HwContainedUnitAddr.setStatus('mandatory')
xldv20HwContainedUnitIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 3, 3, 1, 3), Unsigned16()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xldv20HwContainedUnitIndex.setStatus('mandatory')
xldv20HwEquipTable = MibTable((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 3, 4), )
if mibBuilder.loadTexts: xldv20HwEquipTable.setStatus('mandatory')
xldv20HwEquipEntry = MibTableRow((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 3, 4, 1), ).setIndexNames((0, "XLDV20-MIB", "xldv20HwUnitIndex"))
if mibBuilder.loadTexts: xldv20HwEquipEntry.setStatus('mandatory')
xldv20EquType = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 3, 4, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 10))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xldv20EquType.setStatus('mandatory')
xldv20EquLocation = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 3, 4, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xldv20EquLocation.setStatus('mandatory')
xldv20EquUserLabel = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 3, 4, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xldv20EquUserLabel.setStatus('mandatory')
xldv20EquConnectedPiuIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 3, 4, 1, 4), Unsigned16()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xldv20EquConnectedPiuIndex.setStatus('mandatory')
xldv20EquConnectedPiuPort = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 3, 4, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xldv20EquConnectedPiuPort.setStatus('mandatory')
xldv20HwEquipHolderTable = MibTable((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 3, 5), )
if mibBuilder.loadTexts: xldv20HwEquipHolderTable.setStatus('mandatory')
xldv20HwEquipHolderEntry = MibTableRow((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 3, 5, 1), ).setIndexNames((0, "XLDV20-MIB", "xldv20HwUnitIndex"))
if mibBuilder.loadTexts: xldv20HwEquipHolderEntry.setStatus('mandatory')
xldv20EqhType = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 3, 5, 1, 1), Xldv20EqhType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xldv20EqhType.setStatus('mandatory')
xldv20EqhAccPiuTypes = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 3, 5, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 200))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xldv20EqhAccPiuTypes.setStatus('mandatory')
xldv20EqhSlotStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 3, 5, 1, 3), Xldv20SlotStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xldv20EqhSlotStatus.setStatus('mandatory')
xldv20EqhSwVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 3, 5, 1, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 10))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xldv20EqhSwVersion.setStatus('mandatory')
xldv20EqhMnemoCode = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 3, 5, 1, 5), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 19))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xldv20EqhMnemoCode.setStatus('mandatory')
xldv20EqhFwCode = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 3, 5, 1, 6), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 10))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xldv20EqhFwCode.setStatus('mandatory')
xldv20EqhRiMnemoCode = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 3, 5, 1, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xldv20EqhRiMnemoCode.setStatus('mandatory')
xldv20EqhRiFwItemNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 3, 5, 1, 8), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xldv20EqhRiFwItemNumber.setStatus('mandatory')
xldv20EqhRiFwIssue = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 3, 5, 1, 9), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 10))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xldv20EqhRiFwIssue.setStatus('mandatory')
xldv20EqhRiHwItemNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 3, 5, 1, 10), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xldv20EqhRiHwItemNumber.setStatus('mandatory')
xldv20EqhRiHwIssue = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 3, 5, 1, 11), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 10))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xldv20EqhRiHwIssue.setStatus('mandatory')
xldv20EqhRiSerialNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 3, 5, 1, 12), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 10))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xldv20EqhRiSerialNumber.setStatus('mandatory')
xldv20HwPlugInUnitTable = MibTable((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 3, 6), )
if mibBuilder.loadTexts: xldv20HwPlugInUnitTable.setStatus('mandatory')
xldv20HwPlugInUnitEntry = MibTableRow((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 3, 6, 1), ).setIndexNames((0, "XLDV20-MIB", "xldv20HwUnitIndex"))
if mibBuilder.loadTexts: xldv20HwPlugInUnitEntry.setStatus('mandatory')
xldv20PiuAdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 3, 6, 1, 1), Xldv20AdminState()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xldv20PiuAdminState.setStatus('mandatory')
xldv20PiuAvailStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 3, 6, 1, 2), Xldv20AvailStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xldv20PiuAvailStatus.setStatus('mandatory')
xldv20PiuOperState = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 3, 6, 1, 3), Xldv20OperState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xldv20PiuOperState.setStatus('mandatory')
xldv20PiuType = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 3, 6, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xldv20PiuType.setStatus('mandatory')
xldv20PiuAlarmSeverityIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 3, 6, 1, 5), Xldv20AlmSevProfileIndex()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xldv20PiuAlarmSeverityIndex.setStatus('mandatory')
xldv20PiuAlarmFilteringIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 3, 6, 1, 6), Xldv20AlmFiltProfileIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xldv20PiuAlarmFilteringIndex.setStatus('mandatory')
xldv20PiuUpgradeResult = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 3, 6, 1, 7), Xldv20ControlReq()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xldv20PiuUpgradeResult.setStatus('mandatory')
xldv20HwuControl = MibIdentifier((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 3, 7))
xldv20HwuControlReq = MibScalar((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 3, 7, 1), Xldv20ControlReq()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xldv20HwuControlReq.setStatus('mandatory')
xldv20HwuControlStatus = MibScalar((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 3, 7, 2), Xldv20ControlStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xldv20HwuControlStatus.setStatus('mandatory')
xldv20HwuUnitType = MibScalar((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 3, 7, 3), Xldv20HwUnitType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xldv20HwuUnitType.setStatus('mandatory')
xldv20HwuEquType = MibScalar((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 3, 7, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 21))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xldv20HwuEquType.setStatus('mandatory')
xldv20HwuEqhType = MibScalar((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 3, 7, 5), Xldv20EqhType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xldv20HwuEqhType.setStatus('mandatory')
xldv20HwuPiuType = MibScalar((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 3, 7, 6), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 200))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xldv20HwuPiuType.setStatus('mandatory')
xldv20HwuContainingUnitIndex = MibScalar((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 3, 7, 7), Unsigned16()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xldv20HwuContainingUnitIndex.setStatus('mandatory')
xldv20HwuContainedUnitAddr = MibScalar((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 3, 7, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 512))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xldv20HwuContainedUnitAddr.setStatus('mandatory')
xldv20HwuUnitIndex = MibScalar((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 3, 7, 9), Unsigned16()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xldv20HwuUnitIndex.setStatus('mandatory')
xldv20HwuControlTimer = MibScalar((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 3, 7, 10), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xldv20HwuControlTimer.setStatus('mandatory')
xldv20HwuControlReqResult = MibScalar((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 3, 7, 11), Xldv20ControlReq()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xldv20HwuControlReqResult.setStatus('mandatory')
xldv20HwuControlTimeStamp = MibScalar((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 3, 7, 12), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xldv20HwuControlTimeStamp.setStatus('mandatory')
xldv20RemoteInventory = MibIdentifier((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 3, 9))
xldv20RiControlReq = MibScalar((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 3, 9, 1), Xldv20ControlReq()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xldv20RiControlReq.setStatus('mandatory')
xldv20RiControlStatus = MibScalar((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 3, 9, 2), Xldv20ControlStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xldv20RiControlStatus.setStatus('mandatory')
xldv20RiControlTimer = MibScalar((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 3, 9, 3), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xldv20RiControlTimer.setStatus('mandatory')
xldv20RiResultFilePath = MibScalar((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 3, 9, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 200))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xldv20RiResultFilePath.setStatus('mandatory')
xldv20RiHwUnitIndex = MibScalar((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 3, 9, 5), Unsigned16()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xldv20RiHwUnitIndex.setStatus('mandatory')
xldv20RiControlReqResult = MibScalar((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 3, 9, 6), Xldv20ControlReq()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xldv20RiControlReqResult.setStatus('mandatory')
xldv20RiControlTimeStamp = MibScalar((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 3, 9, 7), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xldv20RiControlTimeStamp.setStatus('mandatory')
xldv20HwUnitMappingTable = MibTable((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 3, 10), )
if mibBuilder.loadTexts: xldv20HwUnitMappingTable.setStatus('mandatory')
xldv20HwUnitMappingEntry = MibTableRow((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 3, 10, 1), ).setIndexNames((0, "XLDV20-MIB", "xldv20HwmHwUnitIndex"), (0, "XLDV20-MIB", "xldv20HwmIfIndex"))
if mibBuilder.loadTexts: xldv20HwUnitMappingEntry.setStatus('mandatory')
xldv20HwmHwUnitIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 3, 10, 1, 1), Unsigned16()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xldv20HwmHwUnitIndex.setStatus('mandatory')
xldv20HwmIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 3, 10, 1, 2), Unsigned16()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xldv20HwmIfIndex.setStatus('mandatory')
xldv20IfTable = MibTable((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 4, 1), )
if mibBuilder.loadTexts: xldv20IfTable.setStatus('mandatory')
xldv20IfEntry = MibTableRow((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 4, 1, 1), ).setIndexNames((0, "XLDV20-MIB", "xldv20IfIndex"))
if mibBuilder.loadTexts: xldv20IfEntry.setStatus('mandatory')
xldv20IfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 4, 1, 1, 1), Unsigned16()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xldv20IfIndex.setStatus('mandatory')
xldv20IfType = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 4, 1, 1, 2), Xldv20IfType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xldv20IfType.setStatus('mandatory')
xldv20IfLineIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 4, 1, 1, 3), Unsigned16()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xldv20IfLineIndex.setStatus('mandatory')
xldv20IfHwUnitIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 4, 1, 1, 4), Unsigned16()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xldv20IfHwUnitIndex.setStatus('mandatory')
xldv20IfHwPortId = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 4, 1, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xldv20IfHwPortId.setStatus('mandatory')
xldv20IfConnectivityIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 4, 1, 1, 6), Unsigned16()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xldv20IfConnectivityIndex.setStatus('mandatory')
xldv20IfOperState = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 4, 1, 1, 7), Xldv20OperState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xldv20IfOperState.setStatus('mandatory')
xldv20IfAdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 4, 1, 1, 8), Xldv20AdminState()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xldv20IfAdminState.setStatus('mandatory')
xldv20IfAlarmState = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 4, 1, 1, 9), Xldv20AlarmState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xldv20IfAlarmState.setStatus('mandatory')
xldv20IfAlarmSeverityIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 4, 1, 1, 10), Xldv20AlmSevProfileIndex()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xldv20IfAlarmSeverityIndex.setStatus('mandatory')
xldv20IfAlarmFilteringIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 4, 1, 1, 11), Xldv20AlmFiltProfileIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xldv20IfAlarmFilteringIndex.setStatus('mandatory')
xldv20AdcControl = MibIdentifier((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 4, 2))
xldv20AdcCtrlControlReq = MibScalar((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 4, 2, 1), Xldv20ControlReq()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xldv20AdcCtrlControlReq.setStatus('mandatory')
xldv20AdcCtrlControlStatus = MibScalar((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 4, 2, 2), Xldv20ControlStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xldv20AdcCtrlControlStatus.setStatus('mandatory')
xldv20AdcCtrlIfIndex = MibScalar((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 4, 2, 3), Unsigned16()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xldv20AdcCtrlIfIndex.setStatus('mandatory')
xldv20AdcCtrlMinRateDn = MibScalar((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 4, 2, 4), Xldv20AdslDataRateDown()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xldv20AdcCtrlMinRateDn.setStatus('mandatory')
xldv20AdcCtrlMinRateUp = MibScalar((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 4, 2, 5), Xldv20AdslDataRateUp()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xldv20AdcCtrlMinRateUp.setStatus('mandatory')
xldv20AdcCtrlMaxRateDn = MibScalar((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 4, 2, 6), Xldv20AdslDataRateDown()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xldv20AdcCtrlMaxRateDn.setStatus('mandatory')
xldv20AdcCtrlMaxRateUp = MibScalar((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 4, 2, 7), Xldv20AdslDataRateUp()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xldv20AdcCtrlMaxRateUp.setStatus('mandatory')
xldv20AdcCtrlMarginDn = MibScalar((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 4, 2, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 15))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xldv20AdcCtrlMarginDn.setStatus('mandatory')
xldv20AdcCtrlMarginUp = MibScalar((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 4, 2, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 15))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xldv20AdcCtrlMarginUp.setStatus('mandatory')
xldv20AdcCtrlLatencyDn = MibScalar((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 4, 2, 10), Xldv20Latency()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xldv20AdcCtrlLatencyDn.setStatus('mandatory')
xldv20AdcCtrlLatencyUp = MibScalar((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 4, 2, 11), Xldv20Latency()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xldv20AdcCtrlLatencyUp.setStatus('mandatory')
xldv20AdcCtrlMinMarginDn = MibScalar((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 4, 2, 12), Xldv20AdslMinMargin()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xldv20AdcCtrlMinMarginDn.setStatus('mandatory')
xldv20AdcCtrlMinMarginUp = MibScalar((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 4, 2, 13), Xldv20AdslMinMargin()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xldv20AdcCtrlMinMarginUp.setStatus('mandatory')
xldv20AdcCtrlControlReqResult = MibScalar((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 4, 2, 14), Xldv20ControlReq()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xldv20AdcCtrlControlReqResult.setStatus('mandatory')
xldv20AdcCtrlXdslServiceType = MibScalar((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 4, 2, 15), Xldv20XdslServiceType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xldv20AdcCtrlXdslServiceType.setStatus('mandatory')
xldv20AdcCtrlControlTimeStamp = MibScalar((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 4, 2, 16), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xldv20AdcCtrlControlTimeStamp.setStatus('mandatory')
xldv20AdcCtrlTrainingMode = MibScalar((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 4, 2, 17), Xldv20AdcTrainingMode()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xldv20AdcCtrlTrainingMode.setStatus('mandatory')
xldv20VdcControl = MibIdentifier((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 4, 3))
xldv20VdcCtrlControlReq = MibScalar((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 4, 3, 1), Xldv20ControlReq())
if mibBuilder.loadTexts: xldv20VdcCtrlControlReq.setStatus('mandatory')
xldv20VdcCtrlControlStatus = MibScalar((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 4, 3, 2), Xldv20ControlStatus())
if mibBuilder.loadTexts: xldv20VdcCtrlControlStatus.setStatus('mandatory')
xldv20VdcCtrlIfIndex = MibScalar((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 4, 3, 3), Unsigned16())
if mibBuilder.loadTexts: xldv20VdcCtrlIfIndex.setStatus('mandatory')
xldv20VdcCtrlMinRateDn = MibScalar((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 4, 3, 4), Xldv20VdcRateDn()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xldv20VdcCtrlMinRateDn.setStatus('mandatory')
xldv20VdcCtrlMinRateUp = MibScalar((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 4, 3, 5), Xldv20VdcRateUp())
if mibBuilder.loadTexts: xldv20VdcCtrlMinRateUp.setStatus('mandatory')
xldv20VdcCtrlMaxRateDn = MibScalar((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 4, 3, 6), Xldv20VdcRateDn())
if mibBuilder.loadTexts: xldv20VdcCtrlMaxRateDn.setStatus('mandatory')
xldv20VdcCtrlMaxRateUp = MibScalar((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 4, 3, 7), Xldv20VdcRateUp())
if mibBuilder.loadTexts: xldv20VdcCtrlMaxRateUp.setStatus('mandatory')
xldv20VdcCtrlLatencyDn = MibScalar((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 4, 3, 8), Xldv20VdcLatencyDn())
if mibBuilder.loadTexts: xldv20VdcCtrlLatencyDn.setStatus('mandatory')
xldv20VdcCtrlLatencyUp = MibScalar((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 4, 3, 9), Xldv20VdcLatencyUp())
if mibBuilder.loadTexts: xldv20VdcCtrlLatencyUp.setStatus('mandatory')
xldv20VdcCtrlPowerBoost = MibScalar((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 4, 3, 10), Xldv20VdcPowerBoostAdaptationType())
if mibBuilder.loadTexts: xldv20VdcCtrlPowerBoost.setStatus('mandatory')
xldv20VdcCtrlWarmStart = MibScalar((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 4, 3, 11), Xldv20OperState())
if mibBuilder.loadTexts: xldv20VdcCtrlWarmStart.setStatus('mandatory')
xldv20VdcCtrlVdslMode = MibScalar((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 4, 3, 12), Xldv20VdcVdslMode())
if mibBuilder.loadTexts: xldv20VdcCtrlVdslMode.setStatus('mandatory')
xldv20VdcCtrlSleepMode = MibScalar((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 4, 3, 13), Xldv20OperState())
if mibBuilder.loadTexts: xldv20VdcCtrlSleepMode.setStatus('mandatory')
xldv20VdcCtrlPsdMask = MibScalar((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 4, 3, 14), Xldv20VdcPsdMask())
if mibBuilder.loadTexts: xldv20VdcCtrlPsdMask.setStatus('mandatory')
xldv20VdcCtrlPowerAdaptation = MibScalar((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 4, 3, 15), Xldv20VdcPowerBoostAdaptationType())
if mibBuilder.loadTexts: xldv20VdcCtrlPowerAdaptation.setStatus('mandatory')
xldv20VdcCtrlControlReqResult = MibScalar((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 4, 3, 16), Xldv20ControlReq())
if mibBuilder.loadTexts: xldv20VdcCtrlControlReqResult.setStatus('mandatory')
xldv20VdcCtrlControlTimeStamp = MibScalar((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 4, 3, 17), TimeTicks())
if mibBuilder.loadTexts: xldv20VdcCtrlControlTimeStamp.setStatus('mandatory')
xldv20AdcPPTPTable = MibTable((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 4, 4), )
if mibBuilder.loadTexts: xldv20AdcPPTPTable.setStatus('mandatory')
xldv20AdcPPTPEntry = MibTableRow((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 4, 4, 1), ).setIndexNames((0, "XLDV20-MIB", "xldv20IfIndex"))
if mibBuilder.loadTexts: xldv20AdcPPTPEntry.setStatus('mandatory')
xldv20AdcMinRateDnCfg = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 4, 4, 1, 1), Xldv20AdslDataRateDown()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xldv20AdcMinRateDnCfg.setStatus('mandatory')
xldv20AdcMinRateUpCfg = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 4, 4, 1, 2), Xldv20AdslDataRateUp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xldv20AdcMinRateUpCfg.setStatus('mandatory')
xldv20AdcMaxRateDnCfg = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 4, 4, 1, 3), Xldv20AdslDataRateDown()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xldv20AdcMaxRateDnCfg.setStatus('mandatory')
xldv20AdcMaxRateUpCfg = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 4, 4, 1, 4), Xldv20AdslDataRateUp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xldv20AdcMaxRateUpCfg.setStatus('mandatory')
xldv20AdcMarginDnCfg = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 4, 4, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 15))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xldv20AdcMarginDnCfg.setStatus('mandatory')
xldv20AdcMarginUpCfg = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 4, 4, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 15))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xldv20AdcMarginUpCfg.setStatus('mandatory')
xldv20AdcMinMarginDnCfg = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 4, 4, 1, 7), Xldv20AdslMinMargin()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xldv20AdcMinMarginDnCfg.setStatus('mandatory')
xldv20AdcMinMarginUpCfg = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 4, 4, 1, 8), Xldv20AdslMinMargin()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xldv20AdcMinMarginUpCfg.setStatus('mandatory')
xldv20AdcLatencyDnCfg = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 4, 4, 1, 10), Xldv20Latency()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xldv20AdcLatencyDnCfg.setStatus('mandatory')
xldv20AdcLatencyUpCfg = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 4, 4, 1, 11), Xldv20Latency()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xldv20AdcLatencyUpCfg.setStatus('mandatory')
xldv20AdcRateDn = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 4, 4, 1, 12), Xldv20AdslDataRateDownCurrent()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xldv20AdcRateDn.setStatus('mandatory')
xldv20AdcRateUp = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 4, 4, 1, 13), Xldv20AdslDataRateUpCurrent()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xldv20AdcRateUp.setStatus('mandatory')
xldv20AdcMarginDn = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 4, 4, 1, 14), Xldv20AdslMargin()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xldv20AdcMarginDn.setStatus('mandatory')
xldv20AdcMarginUp = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 4, 4, 1, 15), Xldv20AdslMargin()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xldv20AdcMarginUp.setStatus('mandatory')
xldv20AdcAttenuationDn = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 4, 4, 1, 16), Xldv20AdslAttenuation()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xldv20AdcAttenuationDn.setStatus('mandatory')
xldv20AdcAttenuationUp = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 4, 4, 1, 17), Xldv20AdslAttenuation()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xldv20AdcAttenuationUp.setStatus('mandatory')
xldv20AdcLinkState = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 4, 4, 1, 18), Xldv20LinkState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xldv20AdcLinkState.setStatus('mandatory')
xldv20AdcAISOnLOS = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 4, 4, 1, 19), Xldv20OperState()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xldv20AdcAISOnLOS.setStatus('mandatory')
xldv20AdcAISOnACT = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 4, 4, 1, 20), Xldv20OperState()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xldv20AdcAISOnACT.setStatus('mandatory')
xldv20AdcGuaranteedBandwidthUsage = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 4, 4, 1, 21), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xldv20AdcGuaranteedBandwidthUsage.setStatus('mandatory')
xldv20AdcXdslServiceTypeCfg = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 4, 4, 1, 22), Xldv20XdslServiceType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xldv20AdcXdslServiceTypeCfg.setStatus('mandatory')
xldv20AdcInitStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 4, 4, 1, 23), Xldv20XdslInitStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xldv20AdcInitStatus.setStatus('mandatory')
xldv20AdcTransceiverOutputPower = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 4, 4, 1, 24), Xldv20AdslOutputPower()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xldv20AdcTransceiverOutputPower.setStatus('mandatory')
xldv20AdcFirstUsedSubCarrierUpstream = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 4, 4, 1, 25), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xldv20AdcFirstUsedSubCarrierUpstream.setStatus('mandatory')
xldv20AdcFirstUsedSubCarrierDownstream = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 4, 4, 1, 26), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 256))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xldv20AdcFirstUsedSubCarrierDownstream.setStatus('mandatory')
xldv20AdcLastUsedSubCarrierUpstream = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 4, 4, 1, 27), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xldv20AdcLastUsedSubCarrierUpstream.setStatus('mandatory')
xldv20AdcLastUsedSubCarrierDownstream = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 4, 4, 1, 28), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 256))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xldv20AdcLastUsedSubCarrierDownstream.setStatus('mandatory')
xldv20AdcXdslServiceType = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 4, 4, 1, 29), Xldv20XdslServiceTypeCurrent()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xldv20AdcXdslServiceType.setStatus('mandatory')
xldv20VdcPPTPTable = MibTable((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 4, 5), )
if mibBuilder.loadTexts: xldv20VdcPPTPTable.setStatus('mandatory')
xldv20VdcPPTPEntry = MibTableRow((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 4, 5, 1), ).setIndexNames((0, "XLDV20-MIB", "xldv20IfIndex"))
if mibBuilder.loadTexts: xldv20VdcPPTPEntry.setStatus('mandatory')
xldv20VdcMinRateDnCfg = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 4, 5, 1, 1), Xldv20VdcRateDn())
if mibBuilder.loadTexts: xldv20VdcMinRateDnCfg.setStatus('mandatory')
xldv20VdcMinRateUpCfg = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 4, 5, 1, 2), Xldv20VdcRateUp())
if mibBuilder.loadTexts: xldv20VdcMinRateUpCfg.setStatus('mandatory')
xldv20VdcMaxRateDnCfg = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 4, 5, 1, 3), Xldv20VdcRateDn())
if mibBuilder.loadTexts: xldv20VdcMaxRateDnCfg.setStatus('mandatory')
xldv20VdcMaxRateUpCfg = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 4, 5, 1, 4), Xldv20VdcRateUp())
if mibBuilder.loadTexts: xldv20VdcMaxRateUpCfg.setStatus('mandatory')
xldv20VdcLatencyDnCfg = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 4, 5, 1, 5), Xldv20VdcLatencyDn())
if mibBuilder.loadTexts: xldv20VdcLatencyDnCfg.setStatus('mandatory')
xldv20VdcLatencyUpCfg = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 4, 5, 1, 6), Xldv20VdcLatencyUp())
if mibBuilder.loadTexts: xldv20VdcLatencyUpCfg.setStatus('mandatory')
xldv20VdcPowerBoostCfg = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 4, 5, 1, 7), Xldv20VdcPowerBoostAdaptationType())
if mibBuilder.loadTexts: xldv20VdcPowerBoostCfg.setStatus('mandatory')
xldv20VdcWarmStartCfg = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 4, 5, 1, 8), Xldv20OperState())
if mibBuilder.loadTexts: xldv20VdcWarmStartCfg.setStatus('mandatory')
xldv20VdcVdslModeCfg = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 4, 5, 1, 9), Xldv20VdcVdslMode())
if mibBuilder.loadTexts: xldv20VdcVdslModeCfg.setStatus('mandatory')
xldv20VdcSleepModeCfg = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 4, 5, 1, 10), Xldv20OperState())
if mibBuilder.loadTexts: xldv20VdcSleepModeCfg.setStatus('mandatory')
xldv20VdcPsdMaskCfg = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 4, 5, 1, 11), Xldv20VdcPsdMask())
if mibBuilder.loadTexts: xldv20VdcPsdMaskCfg.setStatus('mandatory')
xldv20VdcPowerAdaptationCfg = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 4, 5, 1, 12), Xldv20VdcPowerBoostAdaptationType())
if mibBuilder.loadTexts: xldv20VdcPowerAdaptationCfg.setStatus('mandatory')
xldv20VdcRateDn = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 4, 5, 1, 13), Xldv20VdcRateDn())
if mibBuilder.loadTexts: xldv20VdcRateDn.setStatus('mandatory')
xldv20VdcRateUp = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 4, 5, 1, 14), Xldv20VdcRateUp())
if mibBuilder.loadTexts: xldv20VdcRateUp.setStatus('mandatory')
xldv20VdcMarginDn = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 4, 5, 1, 15), Integer32())
if mibBuilder.loadTexts: xldv20VdcMarginDn.setStatus('mandatory')
xldv20VdcMarginUp = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 4, 5, 1, 16), Integer32())
if mibBuilder.loadTexts: xldv20VdcMarginUp.setStatus('mandatory')
xldv20VdcAttenuationDn = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 4, 5, 1, 17), Integer32())
if mibBuilder.loadTexts: xldv20VdcAttenuationDn.setStatus('mandatory')
xldv20VdcAttenuationUp = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 4, 5, 1, 18), Integer32())
if mibBuilder.loadTexts: xldv20VdcAttenuationUp.setStatus('mandatory')
xldv20VdcLinkState = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 4, 5, 1, 19), Xldv20LinkState())
if mibBuilder.loadTexts: xldv20VdcLinkState.setStatus('mandatory')
xldv20VdcGuaranteedBandwidthUsage = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 4, 5, 1, 20), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100)))
if mibBuilder.loadTexts: xldv20VdcGuaranteedBandwidthUsage.setStatus('mandatory')
xldv20IbmPPTPTable = MibTable((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 4, 6), )
if mibBuilder.loadTexts: xldv20IbmPPTPTable.setStatus('mandatory')
xldv20IbmPPTPEntry = MibTableRow((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 4, 6, 1), ).setIndexNames((0, "XLDV20-MIB", "xldv20IfIndex"))
if mibBuilder.loadTexts: xldv20IbmPPTPEntry.setStatus('mandatory')
xldv20IbmAISOnLOS = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 4, 6, 1, 1), Xldv20OperState()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xldv20IbmAISOnLOS.setStatus('mandatory')
xldv20IbmVpAISFiltering = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 4, 6, 1, 2), Xldv20OperState()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xldv20IbmVpAISFiltering.setStatus('mandatory')
xldv20Ds3NePPTPTable = MibTable((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 4, 7), )
if mibBuilder.loadTexts: xldv20Ds3NePPTPTable.setStatus('mandatory')
xldv20Ds3NePPTPEntry = MibTableRow((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 4, 7, 1), ).setIndexNames((0, "XLDV20-MIB", "xldv20IfIndex"))
if mibBuilder.loadTexts: xldv20Ds3NePPTPEntry.setStatus('mandatory')
xldv20D3nType = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 4, 7, 1, 1), Xldv20LineType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xldv20D3nType.setStatus('mandatory')
xldv20D3nCodingType = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 4, 7, 1, 2), Xldv20CodingType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xldv20D3nCodingType.setStatus('mandatory')
xldv20D3nPayloadScramblingActivate = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 4, 7, 1, 3), Xldv20OperState()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xldv20D3nPayloadScramblingActivate.setStatus('mandatory')
xldv20D3nEmptyCellType = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 4, 7, 1, 4), Xldv20EmptyCellType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xldv20D3nEmptyCellType.setStatus('mandatory')
xldv20D3nBandwidthUsage = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 4, 7, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xldv20D3nBandwidthUsage.setStatus('mandatory')
xldv20E3NePPTPTable = MibTable((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 4, 8), )
if mibBuilder.loadTexts: xldv20E3NePPTPTable.setStatus('mandatory')
xldv20E3NePPTPEntry = MibTableRow((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 4, 8, 1), ).setIndexNames((0, "XLDV20-MIB", "xldv20IfIndex"))
if mibBuilder.loadTexts: xldv20E3NePPTPEntry.setStatus('mandatory')
xldv20E3nType = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 4, 8, 1, 1), Xldv20LineType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xldv20E3nType.setStatus('mandatory')
xldv20E3nCodingType = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 4, 8, 1, 2), Xldv20CodingType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xldv20E3nCodingType.setStatus('mandatory')
xldv20E3nTrailTraceSend = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 4, 8, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xldv20E3nTrailTraceSend.setStatus('mandatory')
xldv20E3nTrailTraceSendDefault = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 4, 8, 1, 4), Xldv20OperState()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xldv20E3nTrailTraceSendDefault.setStatus('mandatory')
xldv20E3nTrailTraceExpect = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 4, 8, 1, 5), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xldv20E3nTrailTraceExpect.setStatus('mandatory')
xldv20E3nTrailTraceTIMDetectionActivate = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 4, 8, 1, 6), Xldv20OperState()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xldv20E3nTrailTraceTIMDetectionActivate.setStatus('mandatory')
xldv20E3nTrailTraceReceive = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 4, 8, 1, 7), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xldv20E3nTrailTraceReceive.setStatus('mandatory')
xldv20E3nEmptyCellType = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 4, 8, 1, 8), Xldv20EmptyCellType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xldv20E3nEmptyCellType.setStatus('mandatory')
xldv20E3nPayloadType = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 4, 8, 1, 9), Xldv20E3nPayloadType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xldv20E3nPayloadType.setStatus('mandatory')
xldv20E3nBandwidthUsage = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 4, 8, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xldv20E3nBandwidthUsage.setStatus('mandatory')
xldv20Stm1NePPTPTable = MibTable((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 4, 9), )
if mibBuilder.loadTexts: xldv20Stm1NePPTPTable.setStatus('mandatory')
xldv20Stm1NePPTPEntry = MibTableRow((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 4, 9, 1), ).setIndexNames((0, "XLDV20-MIB", "xldv20IfIndex"))
if mibBuilder.loadTexts: xldv20Stm1NePPTPEntry.setStatus('mandatory')
xldv20S1nLineType = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 4, 9, 1, 1), Xldv20LineType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xldv20S1nLineType.setStatus('mandatory')
xldv20S1nPathTraceSend = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 4, 9, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xldv20S1nPathTraceSend.setStatus('mandatory')
xldv20S1nPathTraceSendDefault = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 4, 9, 1, 3), Xldv20OperState()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xldv20S1nPathTraceSendDefault.setStatus('mandatory')
xldv20S1nPathTraceExpect = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 4, 9, 1, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xldv20S1nPathTraceExpect.setStatus('mandatory')
xldv20S1nPathTraceTIMDetectionActivate = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 4, 9, 1, 5), Xldv20OperState()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xldv20S1nPathTraceTIMDetectionActivate.setStatus('mandatory')
xldv20S1nPathTraceReceive = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 4, 9, 1, 6), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xldv20S1nPathTraceReceive.setStatus('mandatory')
xldv20S1nHpEberThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 4, 9, 1, 7), Xldv20S1nS3nEberThreshold()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xldv20S1nHpEberThreshold.setStatus('mandatory')
xldv20S1nMsEberThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 4, 9, 1, 8), Xldv20S1nS3nEberThreshold()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xldv20S1nMsEberThreshold.setStatus('mandatory')
xldv20S1nRsEberThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 4, 9, 1, 9), Xldv20S1nS3nEberThreshold()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xldv20S1nRsEberThreshold.setStatus('mandatory')
xldv20S1nSDThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 4, 9, 1, 10), Xldv20S1nS3nSDThreshold()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xldv20S1nSDThreshold.setStatus('mandatory')
xldv20S1nRDIAISOnEber = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 4, 9, 1, 11), Xldv20OperState()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xldv20S1nRDIAISOnEber.setStatus('mandatory')
xldv20S1nSignalLabelReceive = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 4, 9, 1, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xldv20S1nSignalLabelReceive.setStatus('mandatory')
xldv20S1nEmptyCellType = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 4, 9, 1, 13), Xldv20EmptyCellType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xldv20S1nEmptyCellType.setStatus('mandatory')
xldv20S1nBandwidthUsage = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 4, 9, 1, 14), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xldv20S1nBandwidthUsage.setStatus('mandatory')
xldv20Sts3NePPTPTable = MibTable((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 4, 10), )
if mibBuilder.loadTexts: xldv20Sts3NePPTPTable.setStatus('mandatory')
xldv20Sts3NePPTPEntry = MibTableRow((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 4, 10, 1), ).setIndexNames((0, "XLDV20-MIB", "xldv20IfIndex"))
if mibBuilder.loadTexts: xldv20Sts3NePPTPEntry.setStatus('mandatory')
xldv20S3nLineType = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 4, 10, 1, 1), Xldv20LineType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xldv20S3nLineType.setStatus('mandatory')
xldv20S3nPathTraceSend = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 4, 10, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xldv20S3nPathTraceSend.setStatus('mandatory')
xldv20S3nPathTraceSendDefault = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 4, 10, 1, 3), Xldv20OperState()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xldv20S3nPathTraceSendDefault.setStatus('mandatory')
xldv20S3nPathTraceExpect = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 4, 10, 1, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xldv20S3nPathTraceExpect.setStatus('mandatory')
xldv20S3nPathTraceTIMDetectionActivate = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 4, 10, 1, 5), Xldv20OperState()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xldv20S3nPathTraceTIMDetectionActivate.setStatus('mandatory')
xldv20S3nPathTraceReceive = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 4, 10, 1, 6), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xldv20S3nPathTraceReceive.setStatus('mandatory')
xldv20S3nPathTraceSync = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 4, 10, 1, 7), Xldv20OperState()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xldv20S3nPathTraceSync.setStatus('mandatory')
xldv20S3nPathTraceSendCRCActivate = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 4, 10, 1, 8), Xldv20OperState()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xldv20S3nPathTraceSendCRCActivate.setStatus('mandatory')
xldv20S3nPathTraceReceiveCRCActivate = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 4, 10, 1, 9), Xldv20OperState()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xldv20S3nPathTraceReceiveCRCActivate.setStatus('mandatory')
xldv20S3nHpEberThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 4, 10, 1, 10), Xldv20S1nS3nEberThreshold()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xldv20S3nHpEberThreshold.setStatus('mandatory')
xldv20S3nMsEberThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 4, 10, 1, 11), Xldv20S1nS3nEberThreshold()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xldv20S3nMsEberThreshold.setStatus('mandatory')
xldv20S3nRsEberThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 4, 10, 1, 12), Xldv20S1nS3nEberThreshold()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xldv20S3nRsEberThreshold.setStatus('mandatory')
xldv20S3nSDThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 4, 10, 1, 13), Xldv20S1nS3nSDThreshold()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xldv20S3nSDThreshold.setStatus('mandatory')
xldv20S3nSignalLabelReceive = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 4, 10, 1, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xldv20S3nSignalLabelReceive.setStatus('mandatory')
xldv20S3nEmptyCellType = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 4, 10, 1, 15), Xldv20EmptyCellType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xldv20S3nEmptyCellType.setStatus('mandatory')
xldv20S3nBandwidthUsage = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 4, 10, 1, 16), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xldv20S3nBandwidthUsage.setStatus('mandatory')
xldv20Dsx1ConfigTable = MibTable((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 4, 11), )
if mibBuilder.loadTexts: xldv20Dsx1ConfigTable.setStatus('mandatory')
xldv20Dsx1ConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 4, 11, 1), ).setIndexNames((0, "XLDV20-MIB", "xldv20IfIndex"))
if mibBuilder.loadTexts: xldv20Dsx1ConfigEntry.setStatus('mandatory')
xldv20Dsx1LineType = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 4, 11, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("other", 1), ("dsx1ESF", 2), ("dsx1D4", 3), ("dsx1E1", 4), ("dsx1E1-CRC", 5), ("dsx1E1-MF", 6), ("dsx1E1-CRC-MF", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xldv20Dsx1LineType.setStatus('mandatory')
xldv20Dsx1LineCoding = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 4, 11, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("dsx1JBZS", 1), ("dsx1B8ZS", 2), ("dsx1HDB3", 3), ("dsx1ZBTSI", 4), ("dsx1AMI", 5), ("other", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xldv20Dsx1LineCoding.setStatus('mandatory')
xldv20Dsx1LoopbackConfig = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 4, 11, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("dsx1NoLoop", 1), ("dsx1PayloadLoop", 2), ("dsx1LineLoop", 3), ("dsx1OtherLoop", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xldv20Dsx1LoopbackConfig.setStatus('mandatory')
xldv20Dsx1SignalMode = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 4, 11, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("none", 1), ("robbedBit", 2), ("bitOriented", 3), ("messageOriented", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xldv20Dsx1SignalMode.setStatus('mandatory')
xldv20Dsx1TransmitClockSource = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 4, 11, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("loopTiming", 1), ("localTiming", 2), ("throughTiming", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xldv20Dsx1TransmitClockSource.setStatus('mandatory')
xldv20Dsx1Fdl = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 4, 11, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 4, 8))).clone(namedValues=NamedValues(("other", 1), ("dsx1Ansi-T1-403", 2), ("dsx1Att-54016", 4), ("dsx1Fdl-none", 8)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xldv20Dsx1Fdl.setStatus('mandatory')
xldv20SdcControl = MibIdentifier((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 4, 12))
xldv20SdcCtrlControlReq = MibScalar((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 4, 12, 1), Xldv20ControlReq()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xldv20SdcCtrlControlReq.setStatus('mandatory')
xldv20SdcCtrlControlStatus = MibScalar((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 4, 12, 2), Xldv20ControlStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xldv20SdcCtrlControlStatus.setStatus('mandatory')
xldv20SdcCtrlIfIndex = MibScalar((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 4, 12, 3), Unsigned16()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xldv20SdcCtrlIfIndex.setStatus('mandatory')
xldv20SdcCtrlRate = MibScalar((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 4, 12, 4), Xldv20SdslDataRate()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xldv20SdcCtrlRate.setStatus('mandatory')
xldv20SdcCtrlXdslServiceType = MibScalar((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 4, 12, 5), Xldv20SdslServiceType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xldv20SdcCtrlXdslServiceType.setStatus('mandatory')
xldv20SdcCtrlControlReqResult = MibScalar((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 4, 12, 6), Xldv20ControlReq()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xldv20SdcCtrlControlReqResult.setStatus('mandatory')
xldv20SdcCtrlControlTimeStamp = MibScalar((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 4, 12, 7), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xldv20SdcCtrlControlTimeStamp.setStatus('mandatory')
xldv20SdcCtrlMinMarginUp = MibScalar((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 4, 12, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-127, 128))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xldv20SdcCtrlMinMarginUp.setStatus('mandatory')
xldv20SdcPPTPTable = MibTable((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 4, 13), )
if mibBuilder.loadTexts: xldv20SdcPPTPTable.setStatus('mandatory')
xldv20SdcPPTPEntry = MibTableRow((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 4, 13, 1), ).setIndexNames((0, "XLDV20-MIB", "xldv20IfIndex"))
if mibBuilder.loadTexts: xldv20SdcPPTPEntry.setStatus('mandatory')
xldv20SdcRateCfg = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 4, 13, 1, 1), Xldv20SdslDataRate()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xldv20SdcRateCfg.setStatus('mandatory')
xldv20SdcXdslServiceTypeCfg = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 4, 13, 1, 2), Xldv20SdslServiceType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xldv20SdcXdslServiceTypeCfg.setStatus('mandatory')
xldv20SdcRate = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 4, 13, 1, 3), Xldv20SdslDataRateCurrent()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xldv20SdcRate.setStatus('mandatory')
xldv20SdcMarginDn = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 4, 13, 1, 4), Xldv20AdslMargin()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xldv20SdcMarginDn.setStatus('mandatory')
xldv20SdcMarginUp = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 4, 13, 1, 5), Xldv20AdslMargin()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xldv20SdcMarginUp.setStatus('mandatory')
xldv20SdcAttenuationDn = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 4, 13, 1, 6), Xldv20AdslAttenuation()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xldv20SdcAttenuationDn.setStatus('mandatory')
xldv20SdcAttenuationUp = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 4, 13, 1, 7), Xldv20AdslAttenuation()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xldv20SdcAttenuationUp.setStatus('mandatory')
xldv20SdcLinkState = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 4, 13, 1, 8), Xldv20LinkState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xldv20SdcLinkState.setStatus('mandatory')
xldv20SdcAISOnLOS = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 4, 13, 1, 9), Xldv20OperState()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xldv20SdcAISOnLOS.setStatus('mandatory')
xldv20SdcAISOnACT = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 4, 13, 1, 10), Xldv20OperState()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xldv20SdcAISOnACT.setStatus('mandatory')
xldv20SdcGuaranteedBandwidthUsage = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 4, 13, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xldv20SdcGuaranteedBandwidthUsage.setStatus('mandatory')
xldv20SdcInitStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 4, 13, 1, 12), Xldv20XdslInitStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xldv20SdcInitStatus.setStatus('mandatory')
xldv20SdcMinMarginUpCfg = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 4, 13, 1, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-127, 128))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xldv20SdcMinMarginUpCfg.setStatus('mandatory')
xldv20SdcTransceiverOutputPower = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 4, 13, 1, 14), Xldv20AdslOutputPower()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xldv20SdcTransceiverOutputPower.setStatus('mandatory')
xldv20SdcXdslServiceType = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 4, 13, 1, 15), Xldv20XdslServiceTypeCurrent()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xldv20SdcXdslServiceType.setStatus('mandatory')
xldv20ImaMibObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 9, 1))
xldv20ImaGroupNumber = MibScalar((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 9, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xldv20ImaGroupNumber.setStatus('mandatory')
xldv20ImaControl = MibIdentifier((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 9, 1, 2))
xldv20ImaControlReq = MibScalar((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 9, 1, 2, 1), Xldv20ControlReq()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xldv20ImaControlReq.setStatus('mandatory')
xldv20ImaControlMinNumLinks = MibScalar((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 9, 1, 2, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 8))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xldv20ImaControlMinNumLinks.setStatus('mandatory')
xldv20ImaControlGroupIndex = MibScalar((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 9, 1, 2, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xldv20ImaControlGroupIndex.setStatus('mandatory')
xldv20ImaControlReqResult = MibScalar((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 9, 1, 2, 4), Xldv20ControlReq()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xldv20ImaControlReqResult.setStatus('mandatory')
xldv20ImaControlTimeStamp = MibScalar((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 9, 1, 2, 5), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xldv20ImaControlTimeStamp.setStatus('mandatory')
xldv20ImaControlStatus = MibScalar((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 9, 1, 2, 6), Xldv20ControlStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xldv20ImaControlStatus.setStatus('mandatory')
xldv20ImaControlTimer = MibScalar((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 9, 1, 2, 7), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xldv20ImaControlTimer.setStatus('mandatory')
xldv20ImaGroupTable = MibTable((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 9, 1, 3), )
if mibBuilder.loadTexts: xldv20ImaGroupTable.setStatus('mandatory')
xldv20ImaGroupEntry = MibTableRow((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 9, 1, 3, 1), ).setIndexNames((0, "XLDV20-MIB", "xldv20ImaGroupIndex"))
if mibBuilder.loadTexts: xldv20ImaGroupEntry.setStatus('mandatory')
xldv20ImaGroupIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 9, 1, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xldv20ImaGroupIndex.setStatus('mandatory')
xldv20ImaGroupRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 9, 1, 3, 1, 2), Xldv20RowStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xldv20ImaGroupRowStatus.setStatus('mandatory')
xldv20ImaGroupIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 9, 1, 3, 1, 3), Unsigned16()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xldv20ImaGroupIfIndex.setStatus('mandatory')
xldv20ImaGroupNeState = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 9, 1, 3, 1, 4), Xldv20ImaGroupState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xldv20ImaGroupNeState.setStatus('mandatory')
xldv20ImaGroupFeState = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 9, 1, 3, 1, 5), Xldv20ImaGroupState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xldv20ImaGroupFeState.setStatus('mandatory')
xldv20ImaGroupFailureStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 9, 1, 3, 1, 6), Xldv20ImaGroupFailureStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xldv20ImaGroupFailureStatus.setStatus('mandatory')
xldv20ImaGroupSymmetry = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 9, 1, 3, 1, 7), Xldv20ImaGroupSymmetry()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xldv20ImaGroupSymmetry.setStatus('mandatory')
xldv20ImaGroupMinNumTxLinks = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 9, 1, 3, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 8))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xldv20ImaGroupMinNumTxLinks.setStatus('mandatory')
xldv20ImaGroupMinNumRxLinks = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 9, 1, 3, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 8))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xldv20ImaGroupMinNumRxLinks.setStatus('mandatory')
xldv20ImaGroupNeTxClkMode = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 9, 1, 3, 1, 10), Xldv20ImaGroupTxClkMode()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xldv20ImaGroupNeTxClkMode.setStatus('mandatory')
xldv20ImaGroupFeTxClkMode = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 9, 1, 3, 1, 11), Xldv20ImaGroupTxClkMode()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xldv20ImaGroupFeTxClkMode.setStatus('mandatory')
xldv20ImaGroupTxTimingRefLink = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 9, 1, 3, 1, 12), Unsigned16()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xldv20ImaGroupTxTimingRefLink.setStatus('mandatory')
xldv20ImaGroupRxTimingRefLink = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 9, 1, 3, 1, 13), Unsigned16()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xldv20ImaGroupRxTimingRefLink.setStatus('mandatory')
xldv20ImaGroupLastChange = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 9, 1, 3, 1, 14), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xldv20ImaGroupLastChange.setStatus('mandatory')
xldv20ImaGroupTxImaId = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 9, 1, 3, 1, 15), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xldv20ImaGroupTxImaId.setStatus('mandatory')
xldv20ImaGroupRxImaId = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 9, 1, 3, 1, 16), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xldv20ImaGroupRxImaId.setStatus('mandatory')
xldv20ImaGroupTxFrameLength = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 9, 1, 3, 1, 17), Xldv20ImaFrameLength()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xldv20ImaGroupTxFrameLength.setStatus('mandatory')
xldv20ImaGroupRxFrameLength = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 9, 1, 3, 1, 18), Xldv20ImaFrameLength()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xldv20ImaGroupRxFrameLength.setStatus('mandatory')
xldv20ImaGroupDiffDelayMax = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 9, 1, 3, 1, 19), MilliSeconds()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xldv20ImaGroupDiffDelayMax.setStatus('mandatory')
xldv20ImaGroupLeastDelayLink = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 9, 1, 3, 1, 20), Unsigned16()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xldv20ImaGroupLeastDelayLink.setStatus('mandatory')
xldv20ImaGroupDiffDelayMaxObs = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 9, 1, 3, 1, 21), MilliSeconds()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xldv20ImaGroupDiffDelayMaxObs.setStatus('mandatory')
xldv20ImaGroupAlphaValue = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 9, 1, 3, 1, 22), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xldv20ImaGroupAlphaValue.setStatus('mandatory')
xldv20ImaGroupBetaValue = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 9, 1, 3, 1, 23), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 5))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xldv20ImaGroupBetaValue.setStatus('mandatory')
xldv20ImaGroupGammaValue = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 9, 1, 3, 1, 24), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 5))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xldv20ImaGroupGammaValue.setStatus('mandatory')
xldv20ImaGroupRunningSecs = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 9, 1, 3, 1, 25), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xldv20ImaGroupRunningSecs.setStatus('mandatory')
xldv20ImaGroupUnavailSecs = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 9, 1, 3, 1, 26), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xldv20ImaGroupUnavailSecs.setStatus('mandatory')
xldv20ImaGroupNeNumFailures = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 9, 1, 3, 1, 27), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xldv20ImaGroupNeNumFailures.setStatus('mandatory')
xldv20ImaGroupFeNumFailures = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 9, 1, 3, 1, 28), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xldv20ImaGroupFeNumFailures.setStatus('mandatory')
xldv20ImaGroupNumTxCfgLinks = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 9, 1, 3, 1, 29), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xldv20ImaGroupNumTxCfgLinks.setStatus('mandatory')
xldv20ImaGroupNumRxCfgLinks = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 9, 1, 3, 1, 30), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xldv20ImaGroupNumRxCfgLinks.setStatus('mandatory')
xldv20ImaGroupNumTxActLinks = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 9, 1, 3, 1, 31), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xldv20ImaGroupNumTxActLinks.setStatus('mandatory')
xldv20ImaGroupNumRxActLinks = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 9, 1, 3, 1, 32), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xldv20ImaGroupNumRxActLinks.setStatus('mandatory')
xldv20ImaGroupBandwidthUsage = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 9, 1, 3, 1, 33), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xldv20ImaGroupBandwidthUsage.setStatus('mandatory')
xldv20ImaGroupMappingTable = MibTable((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 9, 1, 4), )
if mibBuilder.loadTexts: xldv20ImaGroupMappingTable.setStatus('mandatory')
xldv20ImaGroupMappingEntry = MibTableRow((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 9, 1, 4, 1), ).setIndexNames((0, "XLDV20-MIB", "xldv20IfIndex"))
if mibBuilder.loadTexts: xldv20ImaGroupMappingEntry.setStatus('mandatory')
xldv20ImaGroupMappingIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 9, 1, 4, 1, 1), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xldv20ImaGroupMappingIndex.setStatus('mandatory')
xldv20ImaLinkTable = MibTable((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 9, 1, 5), )
if mibBuilder.loadTexts: xldv20ImaLinkTable.setStatus('mandatory')
xldv20ImaLinkEntry = MibTableRow((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 9, 1, 5, 1), ).setIndexNames((0, "XLDV20-MIB", "xldv20IfIndex"))
if mibBuilder.loadTexts: xldv20ImaLinkEntry.setStatus('mandatory')
xldv20ImaLinkRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 9, 1, 5, 1, 1), Xldv20RowStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xldv20ImaLinkRowStatus.setStatus('mandatory')
xldv20ImaLinkGroupIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 9, 1, 5, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xldv20ImaLinkGroupIndex.setStatus('mandatory')
xldv20ImaLinkNeTxState = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 9, 1, 5, 1, 3), Xldv20ImaLinkState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xldv20ImaLinkNeTxState.setStatus('mandatory')
xldv20ImaLinkNeRxState = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 9, 1, 5, 1, 4), Xldv20ImaLinkState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xldv20ImaLinkNeRxState.setStatus('mandatory')
xldv20ImaLinkFeTxState = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 9, 1, 5, 1, 5), Xldv20ImaLinkState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xldv20ImaLinkFeTxState.setStatus('mandatory')
xldv20ImaLinkFeRxState = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 9, 1, 5, 1, 6), Xldv20ImaLinkState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xldv20ImaLinkFeRxState.setStatus('mandatory')
xldv20ImaLinkNeRxFailureStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 9, 1, 5, 1, 7), Xldv20ImaLinkFailureStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xldv20ImaLinkNeRxFailureStatus.setStatus('mandatory')
xldv20ImaLinkFeRxFailureStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 9, 1, 5, 1, 8), Xldv20ImaLinkFailureStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xldv20ImaLinkFeRxFailureStatus.setStatus('mandatory')
xldv20ImaLinkTxLid = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 9, 1, 5, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xldv20ImaLinkTxLid.setStatus('mandatory')
xldv20ImaLinkRxLid = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 9, 1, 5, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xldv20ImaLinkRxLid.setStatus('mandatory')
xldv20ImaLinkImaViolations = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 9, 1, 5, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xldv20ImaLinkImaViolations.setStatus('mandatory')
xldv20ImaLinkOifAnomalies = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 9, 1, 5, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xldv20ImaLinkOifAnomalies.setStatus('mandatory')
xldv20ImaLinkNeSevErroredSecs = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 9, 1, 5, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xldv20ImaLinkNeSevErroredSecs.setStatus('mandatory')
xldv20ImaLinkFeSevErroredSecs = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 9, 1, 5, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xldv20ImaLinkFeSevErroredSecs.setStatus('mandatory')
xldv20ImaLinkNeUnavailSecs = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 9, 1, 5, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xldv20ImaLinkNeUnavailSecs.setStatus('mandatory')
xldv20ImaLinkFeUnavailSecs = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 9, 1, 5, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xldv20ImaLinkFeUnavailSecs.setStatus('mandatory')
xldv20ImaLinkNeTxUnusableSecs = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 9, 1, 5, 1, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xldv20ImaLinkNeTxUnusableSecs.setStatus('mandatory')
xldv20ImaLinkNeRxUnusableSecs = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 9, 1, 5, 1, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xldv20ImaLinkNeRxUnusableSecs.setStatus('mandatory')
xldv20ImaLinkFeTxUnusableSecs = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 9, 1, 5, 1, 19), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xldv20ImaLinkFeTxUnusableSecs.setStatus('mandatory')
xldv20ImaLinkFeRxUnusableSecs = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 9, 1, 5, 1, 20), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xldv20ImaLinkFeRxUnusableSecs.setStatus('mandatory')
xldv20ImaLinkNeTxNumFailures = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 9, 1, 5, 1, 21), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xldv20ImaLinkNeTxNumFailures.setStatus('mandatory')
xldv20ImaLinkNeRxNumFailures = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 9, 1, 5, 1, 22), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xldv20ImaLinkNeRxNumFailures.setStatus('mandatory')
xldv20ImaLinkFeTxNumFailures = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 9, 1, 5, 1, 23), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xldv20ImaLinkFeTxNumFailures.setStatus('mandatory')
xldv20ImaLinkFeRxNumFailures = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 9, 1, 5, 1, 24), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xldv20ImaLinkFeRxNumFailures.setStatus('mandatory')
xldv20ImaLinkTxStuffs = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 9, 1, 5, 1, 25), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xldv20ImaLinkTxStuffs.setStatus('mandatory')
xldv20ImaLinkRxStuffs = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 9, 1, 5, 1, 26), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xldv20ImaLinkRxStuffs.setStatus('mandatory')
xldv20LoopBackPointTable = MibTable((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 5, 1), )
if mibBuilder.loadTexts: xldv20LoopBackPointTable.setStatus('mandatory')
xldv20LbpEntry = MibTableRow((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 5, 1, 1), ).setIndexNames((0, "XLDV20-MIB", "xldv20IfIndex"))
if mibBuilder.loadTexts: xldv20LbpEntry.setStatus('mandatory')
xldv20LbpLoopLocId = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 5, 1, 1, 1), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xldv20LbpLoopLocId.setStatus('mandatory')
xldv20LbpLoopMode = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 5, 1, 1, 2), Xldv20LoopMode()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xldv20LbpLoopMode.setStatus('mandatory')
xldv20PhyLoopTest = MibIdentifier((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 5, 2))
xldv20PltIfIndex = MibScalar((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 5, 2, 1), Unsigned16()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xldv20PltIfIndex.setStatus('mandatory')
xldv20PltControlReq = MibScalar((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 5, 2, 2), Xldv20ControlReq()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xldv20PltControlReq.setStatus('mandatory')
xldv20PltControlStatus = MibScalar((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 5, 2, 3), Xldv20ControlStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xldv20PltControlStatus.setStatus('mandatory')
xldv20PltControlTimer = MibScalar((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 5, 2, 4), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xldv20PltControlTimer.setStatus('mandatory')
xldv20PltControlReqResult = MibScalar((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 5, 2, 5), Xldv20ControlReq()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xldv20PltControlReqResult.setStatus('mandatory')
xldv20PltControlTimeStamp = MibScalar((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 5, 2, 6), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xldv20PltControlTimeStamp.setStatus('mandatory')
xldv20AtmLoopTest = MibIdentifier((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 5, 3))
xldv20AltIfIndex = MibScalar((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 5, 3, 1), Unsigned16()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xldv20AltIfIndex.setStatus('mandatory')
xldv20AltVpi = MibScalar((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 5, 3, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4095))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xldv20AltVpi.setStatus('mandatory')
xldv20AltLoopLocId = MibScalar((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 5, 3, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xldv20AltLoopLocId.setStatus('mandatory')
xldv20AltControlReq = MibScalar((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 5, 3, 4), Xldv20ControlReq()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xldv20AltControlReq.setStatus('mandatory')
xldv20AltControlStatus = MibScalar((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 5, 3, 5), Xldv20ControlStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xldv20AltControlStatus.setStatus('mandatory')
xldv20AltControlTimer = MibScalar((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 5, 3, 6), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xldv20AltControlTimer.setStatus('mandatory')
xldv20AltOamLevel = MibScalar((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 5, 3, 7), Xldv20OamLevel()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xldv20AltOamLevel.setStatus('mandatory')
xldv20AltLoopTestType = MibScalar((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 5, 3, 8), Xldv20TestType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xldv20AltLoopTestType.setStatus('mandatory')
xldv20AltVci = MibScalar((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 5, 3, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xldv20AltVci.setStatus('mandatory')
xldv20AltControlReqResult = MibScalar((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 5, 3, 10), Xldv20ControlReq()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xldv20AltControlReqResult.setStatus('mandatory')
xldv20AltFlowDirection = MibScalar((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 5, 3, 11), Xldv20FlowDirection()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xldv20AltFlowDirection.setStatus('mandatory')
xldv20AltControlTimeStamp = MibScalar((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 5, 3, 12), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xldv20AltControlTimeStamp.setStatus('mandatory')
xldv20MultipleLoopbackResultTable = MibTable((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 5, 4), )
if mibBuilder.loadTexts: xldv20MultipleLoopbackResultTable.setStatus('mandatory')
xldv20MlbEntry = MibTableRow((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 5, 4, 1), ).setIndexNames((0, "XLDV20-MIB", "xldv20MlbIndex"))
if mibBuilder.loadTexts: xldv20MlbEntry.setStatus('mandatory')
xldv20MlbIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 5, 4, 1, 1), Unsigned16()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xldv20MlbIndex.setStatus('mandatory')
xldv20MlbLoopLocId = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 5, 4, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xldv20MlbLoopLocId.setStatus('mandatory')
xldv20ExternalAlarmsTable = MibTable((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 6, 1), )
if mibBuilder.loadTexts: xldv20ExternalAlarmsTable.setStatus('mandatory')
xldv20ExternalAlarmEntry = MibTableRow((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 6, 1, 1), ).setIndexNames((0, "XLDV20-MIB", "xldv20ExtAlarmIndex"))
if mibBuilder.loadTexts: xldv20ExternalAlarmEntry.setStatus('mandatory')
xldv20ExtAlarmIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 6, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 3))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xldv20ExtAlarmIndex.setStatus('mandatory')
xldv20ExtAlarmAdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 6, 1, 1, 2), Xldv20AdminState()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xldv20ExtAlarmAdminState.setStatus('mandatory')
xldv20ExtAlarmOperState = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 6, 1, 1, 3), Xldv20OperState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xldv20ExtAlarmOperState.setStatus('mandatory')
xldv20ExtAlarmActivityState = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 6, 1, 1, 4), Xldv20ExtAlarmActivityState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xldv20ExtAlarmActivityState.setStatus('mandatory')
xldv20ExtAlarmSeverityIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 6, 1, 1, 5), Xldv20AlmSevProfileIndex()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xldv20ExtAlarmSeverityIndex.setStatus('mandatory')
xldv20ExtAlarmFilteringIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 6, 1, 1, 6), Xldv20AlmFiltProfileIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xldv20ExtAlarmFilteringIndex.setStatus('mandatory')
xldv20ExtAlarmName = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 6, 1, 1, 7), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 50))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xldv20ExtAlarmName.setStatus('mandatory')
xldv20AlarmSeverityProfileTable = MibTable((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 6, 2), )
if mibBuilder.loadTexts: xldv20AlarmSeverityProfileTable.setStatus('mandatory')
xldv20AlarmSeverityProfileEntry = MibTableRow((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 6, 2, 1), ).setIndexNames((0, "XLDV20-MIB", "xldv20AlmSevProfileIndex"))
if mibBuilder.loadTexts: xldv20AlarmSeverityProfileEntry.setStatus('mandatory')
xldv20AlmSevProfileIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 6, 2, 1, 1), Xldv20AlmSevProfileIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xldv20AlmSevProfileIndex.setStatus('mandatory')
xldv20AlmSevProfileRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 6, 2, 1, 2), Xldv20RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xldv20AlmSevProfileRowStatus.setStatus('mandatory')
xldv20AlarmSeverityTable = MibTable((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 6, 3), )
if mibBuilder.loadTexts: xldv20AlarmSeverityTable.setStatus('mandatory')
xldv20AlarmSeverityEntry = MibTableRow((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 6, 3, 1), ).setIndexNames((0, "XLDV20-MIB", "xldv20AlmSevProfileIndex"), (0, "XLDV20-MIB", "xldv20AlmSevTrapId"))
if mibBuilder.loadTexts: xldv20AlarmSeverityEntry.setStatus('mandatory')
xldv20AlmSevTrapId = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 6, 3, 1, 1), Xldv20TrapIds()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xldv20AlmSevTrapId.setStatus('mandatory')
xldv20AlmSeverity = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 6, 3, 1, 2), Xldv20AlarmSeverity()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xldv20AlmSeverity.setStatus('mandatory')
xldv20AlarmFilteringProfileTable = MibTable((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 6, 4), )
if mibBuilder.loadTexts: xldv20AlarmFilteringProfileTable.setStatus('mandatory')
xldv20AlarmFilteringProfileEntry = MibTableRow((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 6, 4, 1), ).setIndexNames((0, "XLDV20-MIB", "xldv20AlmFiltProfileIndex"))
if mibBuilder.loadTexts: xldv20AlarmFilteringProfileEntry.setStatus('mandatory')
xldv20AlmFiltProfileIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 6, 4, 1, 1), Xldv20AlmFiltProfileIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xldv20AlmFiltProfileIndex.setStatus('mandatory')
xldv20AlmFiltProfileRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 6, 4, 1, 2), Xldv20RowStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xldv20AlmFiltProfileRowStatus.setStatus('mandatory')
xldv20AlarmFilteringTable = MibTable((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 6, 5), )
if mibBuilder.loadTexts: xldv20AlarmFilteringTable.setStatus('mandatory')
xldv20AlarmFilteringEntry = MibTableRow((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 6, 5, 1), ).setIndexNames((0, "XLDV20-MIB", "xldv20AlmFiltProfileIndex"), (0, "XLDV20-MIB", "xldv20AlmFiltTrapId"))
if mibBuilder.loadTexts: xldv20AlarmFilteringEntry.setStatus('mandatory')
xldv20AlmFiltTrapId = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 6, 5, 1, 1), Xldv20TrapIds()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xldv20AlmFiltTrapId.setStatus('mandatory')
xldv20AlmTempFilter = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 6, 5, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 86400))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xldv20AlmTempFilter.setStatus('mandatory')
xldv20AlarmListTable = MibTable((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 6, 6), )
if mibBuilder.loadTexts: xldv20AlarmListTable.setStatus('mandatory')
xldv20AlarmListEntry = MibTableRow((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 6, 6, 1), ).setIndexNames((0, "XLDV20-MIB", "xldv20AlmIndex"))
if mibBuilder.loadTexts: xldv20AlarmListEntry.setStatus('mandatory')
xldv20AlmIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 6, 6, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 700))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xldv20AlmIndex.setStatus('mandatory')
xldv20AlmNatureOfAlarm = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 6, 6, 1, 2), Xldv20TrapIds()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xldv20AlmNatureOfAlarm.setStatus('mandatory')
xldv20AlmSpecProblem = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 6, 6, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xldv20AlmSpecProblem.setStatus('mandatory')
xldv20AlmSpecProblemText = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 6, 6, 1, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 50))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xldv20AlmSpecProblemText.setStatus('mandatory')
xldv20AlmRepEntityId = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 6, 6, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xldv20AlmRepEntityId.setStatus('mandatory')
xldv20AlmRepSource = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 6, 6, 1, 6), Xldv20RepSource()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xldv20AlmRepSource.setStatus('mandatory')
xldv20AlmFailedComponent = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 6, 6, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xldv20AlmFailedComponent.setStatus('mandatory')
xldv20AlmFailedComponentRepSource = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 6, 6, 1, 8), Xldv20RepSource()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xldv20AlmFailedComponentRepSource.setStatus('mandatory')
xldv20AlmSeverityOfFailure = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 6, 6, 1, 9), Xldv20AlarmSeverity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xldv20AlmSeverityOfFailure.setStatus('mandatory')
xldv20AlmPropRepairAction = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 6, 6, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xldv20AlmPropRepairAction.setStatus('mandatory')
xldv20AlmTimeAndDate = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 6, 6, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xldv20AlmTimeAndDate.setStatus('mandatory')
xldv20AlmControl = MibIdentifier((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 6, 7))
xldv20AlmControlReq = MibScalar((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 6, 7, 1), Xldv20ControlReq()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xldv20AlmControlReq.setStatus('mandatory')
xldv20AlmControlStatus = MibScalar((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 6, 7, 2), Xldv20ControlStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xldv20AlmControlStatus.setStatus('mandatory')
xldv20AlmControlReqResult = MibScalar((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 6, 7, 3), Xldv20ControlReq()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xldv20AlmControlReqResult.setStatus('mandatory')
xldv20AlmControlTimeStamp = MibScalar((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 6, 7, 4), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xldv20AlmControlTimeStamp.setStatus('mandatory')
xldv20Reset = MibIdentifier((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 6, 8))
xldv20RstControlReq = MibScalar((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 6, 8, 1), Xldv20ControlReq()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xldv20RstControlReq.setStatus('mandatory')
xldv20RstControlStatus = MibScalar((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 6, 8, 2), Xldv20ControlStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xldv20RstControlStatus.setStatus('mandatory')
xldv20RstLevel = MibScalar((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 6, 8, 3), Xldv20ResetLevel()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xldv20RstLevel.setStatus('mandatory')
xldv20RstHwUnitIndex = MibScalar((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 6, 8, 4), Unsigned16()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xldv20RstHwUnitIndex.setStatus('mandatory')
xldv20RstControlTimer = MibScalar((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 6, 8, 5), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xldv20RstControlTimer.setStatus('mandatory')
xldv20RstControlReqResult = MibScalar((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 6, 8, 6), Xldv20ControlReq()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xldv20RstControlReqResult.setStatus('mandatory')
xldv20RstControlTimeStamp = MibScalar((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 6, 8, 7), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xldv20RstControlTimeStamp.setStatus('mandatory')
xldv20SwmLogHandler = MibIdentifier((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 7, 1))
xldv20DbuControlReq = MibScalar((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 7, 1, 1), Xldv20ControlReq()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xldv20DbuControlReq.setStatus('mandatory')
xldv20DbuControlStatus = MibScalar((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 7, 1, 2), Xldv20ControlStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xldv20DbuControlStatus.setStatus('mandatory')
xldv20DbuResultFilePath = MibScalar((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 7, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 150))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xldv20DbuResultFilePath.setStatus('mandatory')
xldv20DbuLogType = MibScalar((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 7, 1, 4), Xldv20LogType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xldv20DbuLogType.setStatus('mandatory')
xldv20DbuNumEntries = MibScalar((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 7, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65536))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xldv20DbuNumEntries.setStatus('mandatory')
xldv20DbuControlTimer = MibScalar((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 7, 1, 6), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xldv20DbuControlTimer.setStatus('mandatory')
xldv20DbuControlReqResult = MibScalar((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 7, 1, 7), Xldv20ControlReq()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xldv20DbuControlReqResult.setStatus('mandatory')
xldv20DbuHwUnitIndex = MibScalar((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 7, 1, 8), Unsigned16()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xldv20DbuHwUnitIndex.setStatus('mandatory')
xldv20DbuControlTimeStamp = MibScalar((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 7, 1, 9), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xldv20DbuControlTimeStamp.setStatus('mandatory')
xldv20SwmUpgradeControl = MibIdentifier((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 7, 2))
xldv20SucUnit = MibScalar((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 7, 2, 1), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xldv20SucUnit.setStatus('mandatory')
xldv20SucAllOfType = MibScalar((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 7, 2, 2), Xldv20SucAllOfType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xldv20SucAllOfType.setStatus('mandatory')
xldv20SucVersionNo = MibScalar((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 7, 2, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 10))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xldv20SucVersionNo.setStatus('mandatory')
xldv20SucHwUnitIndex = MibScalar((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 7, 2, 4), Unsigned16()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xldv20SucHwUnitIndex.setStatus('mandatory')
xldv20SucPathName = MibScalar((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 7, 2, 5), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 121))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xldv20SucPathName.setStatus('mandatory')
xldv20SucFileName = MibScalar((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 7, 2, 6), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 33))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xldv20SucFileName.setStatus('mandatory')
xldv20SucControlReq = MibScalar((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 7, 2, 7), Xldv20ControlReq()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xldv20SucControlReq.setStatus('mandatory')
xldv20SucControlStatus = MibScalar((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 7, 2, 8), Xldv20ControlStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xldv20SucControlStatus.setStatus('mandatory')
xldv20SucControlTimer = MibScalar((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 7, 2, 9), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xldv20SucControlTimer.setStatus('mandatory')
xldv20SucNumberOfTraps = MibScalar((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 7, 2, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xldv20SucNumberOfTraps.setStatus('mandatory')
xldv20SucDefaultSwVersion = MibScalar((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 7, 2, 11), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 10))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xldv20SucDefaultSwVersion.setStatus('mandatory')
xldv20SucPredecessorSwVersion = MibScalar((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 7, 2, 12), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 10))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xldv20SucPredecessorSwVersion.setStatus('mandatory')
xldv20SucPrePredecessorSwVersion = MibScalar((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 7, 2, 13), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 10))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xldv20SucPrePredecessorSwVersion.setStatus('mandatory')
xldv20SucControlReqResult = MibScalar((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 7, 2, 14), Xldv20ControlReq()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xldv20SucControlReqResult.setStatus('mandatory')
xldv20SucControlTimeStamp = MibScalar((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 7, 2, 15), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xldv20SucControlTimeStamp.setStatus('mandatory')
xldv20SwUpgradeTaskTable = MibTable((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 7, 3), )
if mibBuilder.loadTexts: xldv20SwUpgradeTaskTable.setStatus('mandatory')
xldv20SutTaskTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 7, 3, 1), ).setIndexNames((0, "XLDV20-MIB", "xldv20SutIndex"))
if mibBuilder.loadTexts: xldv20SutTaskTableEntry.setStatus('mandatory')
xldv20SutIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 7, 3, 1, 1), Unsigned16()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xldv20SutIndex.setStatus('mandatory')
xldv20SutPiuType = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 7, 3, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xldv20SutPiuType.setStatus('mandatory')
xldv20SutHwUnitIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 7, 3, 1, 3), Unsigned16()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xldv20SutHwUnitIndex.setStatus('mandatory')
xldv20SutSwVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 7, 3, 1, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 10))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xldv20SutSwVersion.setStatus('mandatory')
xldv20SutRequester = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 7, 3, 1, 5), Xldv20Requester()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xldv20SutRequester.setStatus('mandatory')
xldv20SutUpgradeState = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 7, 3, 1, 6), Xldv20ControlReq()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xldv20SutUpgradeState.setStatus('mandatory')
xldv20SutUpgradeResult = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 7, 3, 1, 7), Xldv20ControlReq()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xldv20SutUpgradeResult.setStatus('mandatory')
xldv20SutTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 7, 3, 1, 8), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xldv20SutTimeStamp.setStatus('mandatory')
xldv20StcSecureTelnetControl = MibIdentifier((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 7, 4))
xldv20StcTelnetAccess = MibScalar((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 7, 4, 1), Xldv20TelnetAccess()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xldv20StcTelnetAccess.setStatus('mandatory')
xldv20DbmControl = MibIdentifier((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 8, 1))
xldv20DbmControlReq = MibScalar((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 8, 1, 1), Xldv20ControlReq()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xldv20DbmControlReq.setStatus('mandatory')
xldv20DbmControlStatus = MibScalar((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 8, 1, 2), Xldv20ControlStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xldv20DbmControlStatus.setStatus('mandatory')
xldv20DbmControlTimer = MibScalar((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 8, 1, 3), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xldv20DbmControlTimer.setStatus('mandatory')
xldv20DbmBackupPeriod = MibScalar((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 8, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(12, 48))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xldv20DbmBackupPeriod.setStatus('mandatory')
xldv20DbmBackupStartTime = MibScalar((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 8, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 86400))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xldv20DbmBackupStartTime.setStatus('mandatory')
xldv20DbmControlReqResultLocal = MibScalar((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 8, 1, 6), Xldv20ControlReq()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xldv20DbmControlReqResultLocal.setStatus('mandatory')
xldv20DbmControlReqResultRemote = MibScalar((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 8, 1, 7), Xldv20ControlReq()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xldv20DbmControlReqResultRemote.setStatus('mandatory')
xldv20DbmPathAndFileName = MibScalar((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 8, 1, 8), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 150))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xldv20DbmPathAndFileName.setStatus('mandatory')
xldv20DbmControlTimeStamp = MibScalar((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 8, 1, 9), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xldv20DbmControlTimeStamp.setStatus('mandatory')
xldv20TrapVars = MibIdentifier((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 10, 1))
xldv20TvStartupResult = MibScalar((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 10, 1, 1), Xldv20StartupResult())
if mibBuilder.loadTexts: xldv20TvStartupResult.setStatus('mandatory')
xldv20TvStartupType = MibScalar((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 10, 1, 2), Xldv20StartupType())
if mibBuilder.loadTexts: xldv20TvStartupType.setStatus('mandatory')
xldv20TvSnmLctSession = MibScalar((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 10, 1, 3), Xldv20SnmLctSession())
if mibBuilder.loadTexts: xldv20TvSnmLctSession.setStatus('mandatory')
xldv20TvRepEntity = MibScalar((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 10, 1, 4), Unsigned16())
if mibBuilder.loadTexts: xldv20TvRepEntity.setStatus('mandatory')
xldv20TvRepSource = MibScalar((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 10, 1, 5), Xldv20RepSource())
if mibBuilder.loadTexts: xldv20TvRepSource.setStatus('mandatory')
xldv20TvTimeAndDate = MibScalar((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 10, 1, 6), Integer32())
if mibBuilder.loadTexts: xldv20TvTimeAndDate.setStatus('mandatory')
xldv20TvActCcReloadResult = MibScalar((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 10, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("ok", 1), ("notOk", 2), ("lineIndexFaulty", 3))))
if mibBuilder.loadTexts: xldv20TvActCcReloadResult.setStatus('mandatory')
xldv20TvActCcStatus = MibScalar((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 10, 1, 8), Integer32())
if mibBuilder.loadTexts: xldv20TvActCcStatus.setStatus('mandatory')
xldv20TvAlmNatureOfAlarm = MibScalar((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 10, 1, 9), Xldv20TrapIds())
if mibBuilder.loadTexts: xldv20TvAlmNatureOfAlarm.setStatus('mandatory')
xldv20TvAlmSpecProblem = MibScalar((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 10, 1, 10), Integer32())
if mibBuilder.loadTexts: xldv20TvAlmSpecProblem.setStatus('mandatory')
xldv20TvAlmFailedComponent = MibScalar((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 10, 1, 11), Integer32())
if mibBuilder.loadTexts: xldv20TvAlmFailedComponent.setStatus('mandatory')
xldv20TvAlmSeverityOfFailure = MibScalar((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 10, 1, 12), Xldv20AlarmSeverity())
if mibBuilder.loadTexts: xldv20TvAlmSeverityOfFailure.setStatus('mandatory')
xldv20TvAlmStatus = MibScalar((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 10, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("present", 0), ("cleared", 1))))
if mibBuilder.loadTexts: xldv20TvAlmStatus.setStatus('mandatory')
xldv20TvAlmPropRepairAction = MibScalar((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 10, 1, 14), Integer32())
if mibBuilder.loadTexts: xldv20TvAlmPropRepairAction.setStatus('mandatory')
xldv20TvAlmFailedComponentRepSource = MibScalar((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 10, 1, 15), Xldv20RepSource())
if mibBuilder.loadTexts: xldv20TvAlmFailedComponentRepSource.setStatus('mandatory')
xldv20TvStcOldAdminStatus = MibScalar((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 10, 1, 16), Xldv20AdminState())
if mibBuilder.loadTexts: xldv20TvStcOldAdminStatus.setStatus('mandatory')
xldv20TvStcNewAdminStatus = MibScalar((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 10, 1, 17), Xldv20AdminState())
if mibBuilder.loadTexts: xldv20TvStcNewAdminStatus.setStatus('mandatory')
xldv20TvStcOldOperStatus = MibScalar((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 10, 1, 18), Xldv20OperState())
if mibBuilder.loadTexts: xldv20TvStcOldOperStatus.setStatus('mandatory')
xldv20TvStcNewOperStatus = MibScalar((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 10, 1, 19), Xldv20OperState())
if mibBuilder.loadTexts: xldv20TvStcNewOperStatus.setStatus('mandatory')
xldv20TvTsrControlStatus = MibScalar((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 10, 1, 20), Xldv20ControlStatus())
if mibBuilder.loadTexts: xldv20TvTsrControlStatus.setStatus('mandatory')
xldv20TvRstResult = MibScalar((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 10, 1, 21), Xldv20RstResult())
if mibBuilder.loadTexts: xldv20TvRstResult.setStatus('mandatory')
xldv20TvRstHwUnitIndex = MibScalar((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 10, 1, 22), Unsigned16())
if mibBuilder.loadTexts: xldv20TvRstHwUnitIndex.setStatus('mandatory')
xldv20TvHweResetType = MibScalar((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 10, 1, 23), Xldv20StartupType())
if mibBuilder.loadTexts: xldv20TvHweResetType.setStatus('mandatory')
xldv20TvAdcControlStatus = MibScalar((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 10, 1, 24), Integer32())
if mibBuilder.loadTexts: xldv20TvAdcControlStatus.setStatus('mandatory')
xldv20TvSucResult = MibScalar((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 10, 1, 25), Xldv20ControlReq())
if mibBuilder.loadTexts: xldv20TvSucResult.setStatus('mandatory')
xldv20TvSucUnit = MibScalar((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 10, 1, 26), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 20)))
if mibBuilder.loadTexts: xldv20TvSucUnit.setStatus('mandatory')
xldv20TvSucHwUnitIndex = MibScalar((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 10, 1, 27), Unsigned16())
if mibBuilder.loadTexts: xldv20TvSucHwUnitIndex.setStatus('mandatory')
xldv20TvSucVersionNo = MibScalar((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 10, 1, 28), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 10)))
if mibBuilder.loadTexts: xldv20TvSucVersionNo.setStatus('mandatory')
xldv20TvSucPathName = MibScalar((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 10, 1, 29), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 150)))
if mibBuilder.loadTexts: xldv20TvSucPathName.setStatus('mandatory')
xldv20TvSucFileName = MibScalar((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 10, 1, 30), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 50)))
if mibBuilder.loadTexts: xldv20TvSucFileName.setStatus('mandatory')
xldv20TvDbuSweLogReadResult = MibScalar((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 10, 1, 31), Xldv20DbuReadStatus())
if mibBuilder.loadTexts: xldv20TvDbuSweLogReadResult.setStatus('mandatory')
xldv20TvDbuHwmLogReadResult = MibScalar((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 10, 1, 32), Xldv20DbuReadStatus())
if mibBuilder.loadTexts: xldv20TvDbuHwmLogReadResult.setStatus('mandatory')
xldv20TvDbuSwTraceLogReadResult = MibScalar((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 10, 1, 33), Xldv20DbuReadStatus())
if mibBuilder.loadTexts: xldv20TvDbuSwTraceLogReadResult.setStatus('mandatory')
xldv20TvHwUnitType = MibScalar((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 10, 1, 34), Xldv20HwUnitType())
if mibBuilder.loadTexts: xldv20TvHwUnitType.setStatus('mandatory')
xldv20TvHwContainingUnitIndex = MibScalar((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 10, 1, 35), Unsigned16())
if mibBuilder.loadTexts: xldv20TvHwContainingUnitIndex.setStatus('mandatory')
xldv20TvHwContainedUnitAddr = MibScalar((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 10, 1, 36), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 512)))
if mibBuilder.loadTexts: xldv20TvHwContainedUnitAddr.setStatus('mandatory')
xldv20TvHwuControlResult = MibScalar((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 10, 1, 37), Xldv20ControlReq())
if mibBuilder.loadTexts: xldv20TvHwuControlResult.setStatus('mandatory')
xldv20TvRiRemInvResult = MibScalar((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 10, 1, 38), Xldv20RiResultType())
if mibBuilder.loadTexts: xldv20TvRiRemInvResult.setStatus('mandatory')
xldv20TvVersionNrCmuLoad = MibScalar((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 10, 1, 39), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 20)))
if mibBuilder.loadTexts: xldv20TvVersionNrCmuLoad.setStatus('mandatory')
xldv20TvBackupResult = MibScalar((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 10, 1, 40), Xldv20ControlReq())
if mibBuilder.loadTexts: xldv20TvBackupResult.setStatus('mandatory')
xldv20TvVpiNni = MibScalar((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 10, 1, 41), Integer32())
if mibBuilder.loadTexts: xldv20TvVpiNni.setStatus('mandatory')
xldv20TvVpiNniIndex = MibScalar((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 10, 1, 42), Unsigned16())
if mibBuilder.loadTexts: xldv20TvVpiNniIndex.setStatus('mandatory')
xldv20TvVplTerminationPointA = MibScalar((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 10, 1, 43), Integer32())
if mibBuilder.loadTexts: xldv20TvVplTerminationPointA.setStatus('mandatory')
xldv20TvVplTerminationPointZ = MibScalar((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 10, 1, 44), Integer32())
if mibBuilder.loadTexts: xldv20TvVplTerminationPointZ.setStatus('mandatory')
xldv20TvSnmMibVersion = MibScalar((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 10, 1, 47), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 30)))
if mibBuilder.loadTexts: xldv20TvSnmMibVersion.setStatus('mandatory')
xldv20TvSnmAgentVersion = MibScalar((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 10, 1, 48), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 30)))
if mibBuilder.loadTexts: xldv20TvSnmAgentVersion.setStatus('mandatory')
xldv20TvVciNni = MibScalar((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 10, 1, 49), Integer32())
if mibBuilder.loadTexts: xldv20TvVciNni.setStatus('mandatory')
xldv20TvVciNniIndex = MibScalar((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 10, 1, 50), Unsigned16())
if mibBuilder.loadTexts: xldv20TvVciNniIndex.setStatus('mandatory')
xldv20TvVclTerminationPointA = MibScalar((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 10, 1, 51), Integer32())
if mibBuilder.loadTexts: xldv20TvVclTerminationPointA.setStatus('mandatory')
xldv20TvVclTerminationPointZ = MibScalar((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 10, 1, 52), Integer32())
if mibBuilder.loadTexts: xldv20TvVclTerminationPointZ.setStatus('mandatory')
xldv20TvVpcTpIndex = MibScalar((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 10, 1, 53), Unsigned16())
if mibBuilder.loadTexts: xldv20TvVpcTpIndex.setStatus('mandatory')
xldv20TvVpcNniIndex = MibScalar((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 10, 1, 54), Unsigned16())
if mibBuilder.loadTexts: xldv20TvVpcNniIndex.setStatus('mandatory')
xldv20TvVpcUniIndex = MibScalar((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 10, 1, 55), Unsigned16())
if mibBuilder.loadTexts: xldv20TvVpcUniIndex.setStatus('mandatory')
xldv20TvEthVccTpIndex = MibScalar((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 10, 1, 56), Unsigned16())
if mibBuilder.loadTexts: xldv20TvEthVccTpIndex.setStatus('mandatory')
xldv20TvVpiValue = MibScalar((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 10, 1, 57), Integer32())
if mibBuilder.loadTexts: xldv20TvVpiValue.setStatus('mandatory')
xldv20TvVciValue = MibScalar((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 10, 1, 58), Unsigned16())
if mibBuilder.loadTexts: xldv20TvVciValue.setStatus('mandatory')
xldv20TvVplTpIndex = MibScalar((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 10, 1, 59), Integer32())
if mibBuilder.loadTexts: xldv20TvVplTpIndex.setStatus('mandatory')
xldv20TvVplIfIndex = MibScalar((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 10, 1, 60), Integer32())
if mibBuilder.loadTexts: xldv20TvVplIfIndex.setStatus('mandatory')
xldv20TvAlmFailedComponentString = MibScalar((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 10, 1, 61), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 100)))
if mibBuilder.loadTexts: xldv20TvAlmFailedComponentString.setStatus('mandatory')
xldv20TvTelnetSession = MibScalar((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 10, 1, 62), Xldv20TvTelnetSessionStatus())
if mibBuilder.loadTexts: xldv20TvTelnetSession.setStatus('mandatory')
xldv20TvEthIfIndex = MibScalar((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 10, 1, 63), Integer32())
if mibBuilder.loadTexts: xldv20TvEthIfIndex.setStatus('mandatory')
xldv20TvCACProblemType = MibScalar((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 10, 1, 64), Xldv20ControlReq())
if mibBuilder.loadTexts: xldv20TvCACProblemType.setStatus('mandatory')
xldv20TvCACBandwidthUsageUp = MibScalar((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 10, 1, 65), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100)))
if mibBuilder.loadTexts: xldv20TvCACBandwidthUsageUp.setStatus('mandatory')
xldv20TvEthVpcTpIndex = MibScalar((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 10, 1, 66), Unsigned16())
if mibBuilder.loadTexts: xldv20TvEthVpcTpIndex.setStatus('mandatory')
xldv20TvEthEntryIndex = MibScalar((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 10, 1, 68), Unsigned16())
if mibBuilder.loadTexts: xldv20TvEthEntryIndex.setStatus('mandatory')
xldv20TvRepEntityExt = MibScalar((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 10, 1, 69), Unsigned16())
if mibBuilder.loadTexts: xldv20TvRepEntityExt.setStatus('mandatory')
xldv20TvTelnetSessionUser = MibScalar((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 10, 1, 70), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 20)))
if mibBuilder.loadTexts: xldv20TvTelnetSessionUser.setStatus('mandatory')
xldv20TvIndexSegment = MibScalar((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 10, 1, 71), Unsigned16())
if mibBuilder.loadTexts: xldv20TvIndexSegment.setStatus('mandatory')
xldv20TvIndexEndToEnd = MibScalar((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 10, 1, 72), Unsigned16())
if mibBuilder.loadTexts: xldv20TvIndexEndToEnd.setStatus('mandatory')
xldv20TvRestoreResult = MibScalar((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 10, 1, 75), Xldv20ControlReq())
if mibBuilder.loadTexts: xldv20TvRestoreResult.setStatus('mandatory')
xldv20TvCACBandwidthUsageDown = MibScalar((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 10, 1, 76), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100)))
if mibBuilder.loadTexts: xldv20TvCACBandwidthUsageDown.setStatus('mandatory')
xldv20TvCallpObjectType = MibScalar((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 10, 1, 77), Xldv20RepSource())
if mibBuilder.loadTexts: xldv20TvCallpObjectType.setStatus('mandatory')
xldv20TvVpcTpIfIndex = MibScalar((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 10, 1, 79), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 9192)))
if mibBuilder.loadTexts: xldv20TvVpcTpIfIndex.setStatus('mandatory')
xldv20TvAlmSpecProblemText = MibScalar((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 10, 1, 80), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 50)))
if mibBuilder.loadTexts: xldv20TvAlmSpecProblemText.setStatus('mandatory')
xldv20TvImaSetNumResult = MibScalar((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 10, 1, 81), Xldv20ControlReq())
if mibBuilder.loadTexts: xldv20TvImaSetNumResult.setStatus('mandatory')
xldv20TvStcOldAvailStatus = MibScalar((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 10, 1, 82), Xldv20AvailStatus())
if mibBuilder.loadTexts: xldv20TvStcOldAvailStatus.setStatus('mandatory')
xldv20TvStcNewAvailStatus = MibScalar((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 10, 1, 83), Xldv20AvailStatus())
if mibBuilder.loadTexts: xldv20TvStcNewAvailStatus.setStatus('mandatory')
xldv20TrapTypes = MibIdentifier((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 10, 2))
xldv20TrHpExcBER = NotificationType((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 10) + (0,1)).setObjects(("XLDV20-MIB", "xldv20TvTimeAndDate"), ("XLDV20-MIB", "xldv20TvRepEntity"), ("XLDV20-MIB", "xldv20TvRepSource"), ("XLDV20-MIB", "xldv20TvAlmSpecProblem"), ("XLDV20-MIB", "xldv20TvAlmNatureOfAlarm"), ("XLDV20-MIB", "xldv20TvAlmFailedComponent"), ("XLDV20-MIB", "xldv20TvAlmFailedComponentRepSource"), ("XLDV20-MIB", "xldv20TvAlmSeverityOfFailure"), ("XLDV20-MIB", "xldv20TvAlmStatus"), ("XLDV20-MIB", "xldv20TvAlmPropRepairAction"), ("XLDV20-MIB", "xldv20TvAlmSpecProblemText"))
xldv20TrHpUNEQ = NotificationType((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 10) + (0,2)).setObjects(("XLDV20-MIB", "xldv20TvTimeAndDate"), ("XLDV20-MIB", "xldv20TvRepEntity"), ("XLDV20-MIB", "xldv20TvRepSource"), ("XLDV20-MIB", "xldv20TvAlmSpecProblem"), ("XLDV20-MIB", "xldv20TvAlmNatureOfAlarm"), ("XLDV20-MIB", "xldv20TvAlmFailedComponent"), ("XLDV20-MIB", "xldv20TvAlmFailedComponentRepSource"), ("XLDV20-MIB", "xldv20TvAlmSeverityOfFailure"), ("XLDV20-MIB", "xldv20TvAlmStatus"), ("XLDV20-MIB", "xldv20TvAlmPropRepairAction"), ("XLDV20-MIB", "xldv20TvAlmSpecProblemText"))
xldv20TrLcd = NotificationType((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 10) + (0,3)).setObjects(("XLDV20-MIB", "xldv20TvTimeAndDate"), ("XLDV20-MIB", "xldv20TvRepEntity"), ("XLDV20-MIB", "xldv20TvRepSource"), ("XLDV20-MIB", "xldv20TvAlmSpecProblem"), ("XLDV20-MIB", "xldv20TvAlmNatureOfAlarm"), ("XLDV20-MIB", "xldv20TvAlmFailedComponent"), ("XLDV20-MIB", "xldv20TvAlmFailedComponentRepSource"), ("XLDV20-MIB", "xldv20TvAlmSeverityOfFailure"), ("XLDV20-MIB", "xldv20TvAlmStatus"), ("XLDV20-MIB", "xldv20TvAlmPropRepairAction"), ("XLDV20-MIB", "xldv20TvAlmSpecProblemText"))
xldv20TrLof = NotificationType((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 10) + (0,4)).setObjects(("XLDV20-MIB", "xldv20TvTimeAndDate"), ("XLDV20-MIB", "xldv20TvRepEntity"), ("XLDV20-MIB", "xldv20TvRepSource"), ("XLDV20-MIB", "xldv20TvAlmSpecProblem"), ("XLDV20-MIB", "xldv20TvAlmNatureOfAlarm"), ("XLDV20-MIB", "xldv20TvAlmFailedComponent"), ("XLDV20-MIB", "xldv20TvAlmFailedComponentRepSource"), ("XLDV20-MIB", "xldv20TvAlmSeverityOfFailure"), ("XLDV20-MIB", "xldv20TvAlmStatus"), ("XLDV20-MIB", "xldv20TvAlmPropRepairAction"), ("XLDV20-MIB", "xldv20TvAlmSpecProblemText"))
xldv20TrLop = NotificationType((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 10) + (0,5)).setObjects(("XLDV20-MIB", "xldv20TvTimeAndDate"), ("XLDV20-MIB", "xldv20TvRepEntity"), ("XLDV20-MIB", "xldv20TvRepSource"), ("XLDV20-MIB", "xldv20TvAlmSpecProblem"), ("XLDV20-MIB", "xldv20TvAlmNatureOfAlarm"), ("XLDV20-MIB", "xldv20TvAlmFailedComponent"), ("XLDV20-MIB", "xldv20TvAlmFailedComponentRepSource"), ("XLDV20-MIB", "xldv20TvAlmSeverityOfFailure"), ("XLDV20-MIB", "xldv20TvAlmStatus"), ("XLDV20-MIB", "xldv20TvAlmPropRepairAction"), ("XLDV20-MIB", "xldv20TvAlmSpecProblemText"))
xldv20TrLos = NotificationType((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 10) + (0,6)).setObjects(("XLDV20-MIB", "xldv20TvTimeAndDate"), ("XLDV20-MIB", "xldv20TvRepEntity"), ("XLDV20-MIB", "xldv20TvRepSource"), ("XLDV20-MIB", "xldv20TvAlmSpecProblem"), ("XLDV20-MIB", "xldv20TvAlmNatureOfAlarm"), ("XLDV20-MIB", "xldv20TvAlmFailedComponent"), ("XLDV20-MIB", "xldv20TvAlmFailedComponentRepSource"), ("XLDV20-MIB", "xldv20TvAlmSeverityOfFailure"), ("XLDV20-MIB", "xldv20TvAlmStatus"), ("XLDV20-MIB", "xldv20TvAlmPropRepairAction"), ("XLDV20-MIB", "xldv20TvAlmSpecProblemText"))
xldv20TrMsAIS = NotificationType((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 10) + (0,7)).setObjects(("XLDV20-MIB", "xldv20TvTimeAndDate"), ("XLDV20-MIB", "xldv20TvRepEntity"), ("XLDV20-MIB", "xldv20TvRepSource"), ("XLDV20-MIB", "xldv20TvAlmSpecProblem"), ("XLDV20-MIB", "xldv20TvAlmNatureOfAlarm"), ("XLDV20-MIB", "xldv20TvAlmFailedComponent"), ("XLDV20-MIB", "xldv20TvAlmFailedComponentRepSource"), ("XLDV20-MIB", "xldv20TvAlmSeverityOfFailure"), ("XLDV20-MIB", "xldv20TvAlmStatus"), ("XLDV20-MIB", "xldv20TvAlmPropRepairAction"), ("XLDV20-MIB", "xldv20TvAlmSpecProblemText"))
xldv20TrMsExcBER = NotificationType((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 10) + (0,8)).setObjects(("XLDV20-MIB", "xldv20TvTimeAndDate"), ("XLDV20-MIB", "xldv20TvRepEntity"), ("XLDV20-MIB", "xldv20TvRepSource"), ("XLDV20-MIB", "xldv20TvAlmSpecProblem"), ("XLDV20-MIB", "xldv20TvAlmNatureOfAlarm"), ("XLDV20-MIB", "xldv20TvAlmFailedComponent"), ("XLDV20-MIB", "xldv20TvAlmFailedComponentRepSource"), ("XLDV20-MIB", "xldv20TvAlmSeverityOfFailure"), ("XLDV20-MIB", "xldv20TvAlmStatus"), ("XLDV20-MIB", "xldv20TvAlmPropRepairAction"), ("XLDV20-MIB", "xldv20TvAlmSpecProblemText"))
xldv20TrMsRDI = NotificationType((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 10) + (0,9)).setObjects(("XLDV20-MIB", "xldv20TvTimeAndDate"), ("XLDV20-MIB", "xldv20TvRepEntity"), ("XLDV20-MIB", "xldv20TvRepSource"), ("XLDV20-MIB", "xldv20TvAlmSpecProblem"), ("XLDV20-MIB", "xldv20TvAlmNatureOfAlarm"), ("XLDV20-MIB", "xldv20TvAlmFailedComponent"), ("XLDV20-MIB", "xldv20TvAlmFailedComponentRepSource"), ("XLDV20-MIB", "xldv20TvAlmSeverityOfFailure"), ("XLDV20-MIB", "xldv20TvAlmStatus"), ("XLDV20-MIB", "xldv20TvAlmPropRepairAction"), ("XLDV20-MIB", "xldv20TvAlmSpecProblemText"))
xldv20TrMsSD = NotificationType((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 10) + (0,10)).setObjects(("XLDV20-MIB", "xldv20TvTimeAndDate"), ("XLDV20-MIB", "xldv20TvRepEntity"), ("XLDV20-MIB", "xldv20TvRepSource"), ("XLDV20-MIB", "xldv20TvAlmSpecProblem"), ("XLDV20-MIB", "xldv20TvAlmNatureOfAlarm"), ("XLDV20-MIB", "xldv20TvAlmFailedComponent"), ("XLDV20-MIB", "xldv20TvAlmFailedComponentRepSource"), ("XLDV20-MIB", "xldv20TvAlmSeverityOfFailure"), ("XLDV20-MIB", "xldv20TvAlmStatus"), ("XLDV20-MIB", "xldv20TvAlmPropRepairAction"), ("XLDV20-MIB", "xldv20TvAlmSpecProblemText"))
xldv20TrPAIS = NotificationType((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 10) + (0,11)).setObjects(("XLDV20-MIB", "xldv20TvTimeAndDate"), ("XLDV20-MIB", "xldv20TvRepEntity"), ("XLDV20-MIB", "xldv20TvRepSource"), ("XLDV20-MIB", "xldv20TvAlmSpecProblem"), ("XLDV20-MIB", "xldv20TvAlmNatureOfAlarm"), ("XLDV20-MIB", "xldv20TvAlmFailedComponent"), ("XLDV20-MIB", "xldv20TvAlmFailedComponentRepSource"), ("XLDV20-MIB", "xldv20TvAlmSeverityOfFailure"), ("XLDV20-MIB", "xldv20TvAlmStatus"), ("XLDV20-MIB", "xldv20TvAlmPropRepairAction"), ("XLDV20-MIB", "xldv20TvAlmSpecProblemText"))
xldv20TrPRDI = NotificationType((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 10) + (0,12)).setObjects(("XLDV20-MIB", "xldv20TvTimeAndDate"), ("XLDV20-MIB", "xldv20TvRepEntity"), ("XLDV20-MIB", "xldv20TvRepSource"), ("XLDV20-MIB", "xldv20TvAlmSpecProblem"), ("XLDV20-MIB", "xldv20TvAlmNatureOfAlarm"), ("XLDV20-MIB", "xldv20TvAlmFailedComponent"), ("XLDV20-MIB", "xldv20TvAlmFailedComponentRepSource"), ("XLDV20-MIB", "xldv20TvAlmSeverityOfFailure"), ("XLDV20-MIB", "xldv20TvAlmStatus"), ("XLDV20-MIB", "xldv20TvAlmPropRepairAction"), ("XLDV20-MIB", "xldv20TvAlmSpecProblemText"))
xldv20TrRsExcBER = NotificationType((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 10) + (0,13)).setObjects(("XLDV20-MIB", "xldv20TvTimeAndDate"), ("XLDV20-MIB", "xldv20TvRepEntity"), ("XLDV20-MIB", "xldv20TvRepSource"), ("XLDV20-MIB", "xldv20TvAlmSpecProblem"), ("XLDV20-MIB", "xldv20TvAlmNatureOfAlarm"), ("XLDV20-MIB", "xldv20TvAlmFailedComponent"), ("XLDV20-MIB", "xldv20TvAlmFailedComponentRepSource"), ("XLDV20-MIB", "xldv20TvAlmSeverityOfFailure"), ("XLDV20-MIB", "xldv20TvAlmStatus"), ("XLDV20-MIB", "xldv20TvAlmPropRepairAction"), ("XLDV20-MIB", "xldv20TvAlmSpecProblemText"))
xldv20TrSlm = NotificationType((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 10) + (0,14)).setObjects(("XLDV20-MIB", "xldv20TvTimeAndDate"), ("XLDV20-MIB", "xldv20TvRepEntity"), ("XLDV20-MIB", "xldv20TvRepSource"), ("XLDV20-MIB", "xldv20TvAlmSpecProblem"), ("XLDV20-MIB", "xldv20TvAlmNatureOfAlarm"), ("XLDV20-MIB", "xldv20TvAlmFailedComponent"), ("XLDV20-MIB", "xldv20TvAlmFailedComponentRepSource"), ("XLDV20-MIB", "xldv20TvAlmSeverityOfFailure"), ("XLDV20-MIB", "xldv20TvAlmStatus"), ("XLDV20-MIB", "xldv20TvAlmPropRepairAction"), ("XLDV20-MIB", "xldv20TvAlmSpecProblemText"))
xldv20TrTim = NotificationType((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 10) + (0,15)).setObjects(("XLDV20-MIB", "xldv20TvTimeAndDate"), ("XLDV20-MIB", "xldv20TvRepEntity"), ("XLDV20-MIB", "xldv20TvRepSource"), ("XLDV20-MIB", "xldv20TvAlmSpecProblem"), ("XLDV20-MIB", "xldv20TvAlmNatureOfAlarm"), ("XLDV20-MIB", "xldv20TvAlmFailedComponent"), ("XLDV20-MIB", "xldv20TvAlmFailedComponentRepSource"), ("XLDV20-MIB", "xldv20TvAlmSeverityOfFailure"), ("XLDV20-MIB", "xldv20TvAlmStatus"), ("XLDV20-MIB", "xldv20TvAlmPropRepairAction"), ("XLDV20-MIB", "xldv20TvAlmSpecProblemText"))
xldv20TrActFault = NotificationType((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 10) + (0,16)).setObjects(("XLDV20-MIB", "xldv20TvTimeAndDate"), ("XLDV20-MIB", "xldv20TvRepEntity"), ("XLDV20-MIB", "xldv20TvRepSource"), ("XLDV20-MIB", "xldv20TvAlmSpecProblem"), ("XLDV20-MIB", "xldv20TvAlmNatureOfAlarm"), ("XLDV20-MIB", "xldv20TvAlmFailedComponent"), ("XLDV20-MIB", "xldv20TvAlmFailedComponentRepSource"), ("XLDV20-MIB", "xldv20TvAlmSeverityOfFailure"), ("XLDV20-MIB", "xldv20TvAlmStatus"), ("XLDV20-MIB", "xldv20TvAlmPropRepairAction"), ("XLDV20-MIB", "xldv20TvAlmSpecProblemText"))
xldv20TrReplaceableUnitTypeMismatch = NotificationType((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 10) + (0,17)).setObjects(("XLDV20-MIB", "xldv20TvTimeAndDate"), ("XLDV20-MIB", "xldv20TvRepEntity"), ("XLDV20-MIB", "xldv20TvRepSource"), ("XLDV20-MIB", "xldv20TvAlmSpecProblem"), ("XLDV20-MIB", "xldv20TvAlmNatureOfAlarm"), ("XLDV20-MIB", "xldv20TvAlmFailedComponent"), ("XLDV20-MIB", "xldv20TvAlmFailedComponentRepSource"), ("XLDV20-MIB", "xldv20TvAlmSeverityOfFailure"), ("XLDV20-MIB", "xldv20TvAlmStatus"), ("XLDV20-MIB", "xldv20TvAlmPropRepairAction"), ("XLDV20-MIB", "xldv20TvAlmSpecProblemText"))
xldv20TrReplaceableUnitFailure = NotificationType((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 10) + (0,18)).setObjects(("XLDV20-MIB", "xldv20TvTimeAndDate"), ("XLDV20-MIB", "xldv20TvRepEntity"), ("XLDV20-MIB", "xldv20TvRepSource"), ("XLDV20-MIB", "xldv20TvAlmSpecProblem"), ("XLDV20-MIB", "xldv20TvAlmNatureOfAlarm"), ("XLDV20-MIB", "xldv20TvAlmFailedComponent"), ("XLDV20-MIB", "xldv20TvAlmFailedComponentRepSource"), ("XLDV20-MIB", "xldv20TvAlmSeverityOfFailure"), ("XLDV20-MIB", "xldv20TvAlmStatus"), ("XLDV20-MIB", "xldv20TvAlmPropRepairAction"), ("XLDV20-MIB", "xldv20TvAlmSpecProblemText"))
xldv20TrReplaceableUnitProblem = NotificationType((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 10) + (0,19)).setObjects(("XLDV20-MIB", "xldv20TvTimeAndDate"), ("XLDV20-MIB", "xldv20TvRepEntity"), ("XLDV20-MIB", "xldv20TvRepSource"), ("XLDV20-MIB", "xldv20TvAlmSpecProblem"), ("XLDV20-MIB", "xldv20TvAlmNatureOfAlarm"), ("XLDV20-MIB", "xldv20TvAlmFailedComponent"), ("XLDV20-MIB", "xldv20TvAlmFailedComponentRepSource"), ("XLDV20-MIB", "xldv20TvAlmSeverityOfFailure"), ("XLDV20-MIB", "xldv20TvAlmStatus"), ("XLDV20-MIB", "xldv20TvAlmPropRepairAction"), ("XLDV20-MIB", "xldv20TvAlmSpecProblemText"))
xldv20TrReplaceableUnitNotInstalled = NotificationType((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 10) + (0,20)).setObjects(("XLDV20-MIB", "xldv20TvTimeAndDate"), ("XLDV20-MIB", "xldv20TvRepEntity"), ("XLDV20-MIB", "xldv20TvRepSource"), ("XLDV20-MIB", "xldv20TvAlmSpecProblem"), ("XLDV20-MIB", "xldv20TvAlmNatureOfAlarm"), ("XLDV20-MIB", "xldv20TvAlmFailedComponent"), ("XLDV20-MIB", "xldv20TvAlmFailedComponentRepSource"), ("XLDV20-MIB", "xldv20TvAlmSeverityOfFailure"), ("XLDV20-MIB", "xldv20TvAlmStatus"), ("XLDV20-MIB", "xldv20TvAlmPropRepairAction"), ("XLDV20-MIB", "xldv20TvAlmSpecProblemText"))
xldv20TrReplaceableUnitSwMismatch = NotificationType((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 10) + (0,21)).setObjects(("XLDV20-MIB", "xldv20TvTimeAndDate"), ("XLDV20-MIB", "xldv20TvRepEntity"), ("XLDV20-MIB", "xldv20TvRepSource"), ("XLDV20-MIB", "xldv20TvAlmSpecProblem"), ("XLDV20-MIB", "xldv20TvAlmNatureOfAlarm"), ("XLDV20-MIB", "xldv20TvAlmFailedComponent"), ("XLDV20-MIB", "xldv20TvAlmFailedComponentRepSource"), ("XLDV20-MIB", "xldv20TvAlmSeverityOfFailure"), ("XLDV20-MIB", "xldv20TvAlmStatus"), ("XLDV20-MIB", "xldv20TvAlmPropRepairAction"), ("XLDV20-MIB", "xldv20TvAlmSpecProblemText"))
xldv20TrReplaceableUnitReset = NotificationType((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 10) + (0,22)).setObjects(("XLDV20-MIB", "xldv20TvTimeAndDate"), ("XLDV20-MIB", "xldv20TvRepEntity"), ("XLDV20-MIB", "xldv20TvRepSource"), ("XLDV20-MIB", "xldv20TvHweResetType"))
xldv20TrReplaceableUnitResetEnd = NotificationType((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 10) + (0,23)).setObjects(("XLDV20-MIB", "xldv20TvTimeAndDate"), ("XLDV20-MIB", "xldv20TvRepEntity"), ("XLDV20-MIB", "xldv20TvRepSource"))
xldv20TrStartupEnd = NotificationType((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 10) + (0,24)).setObjects(("XLDV20-MIB", "xldv20TvTimeAndDate"), ("XLDV20-MIB", "xldv20TvStartupResult"), ("XLDV20-MIB", "xldv20TvStartupType"), ("XLDV20-MIB", "xldv20TvSnmMibVersion"), ("XLDV20-MIB", "xldv20TvSnmAgentVersion"), ("XLDV20-MIB", "xldv20TvVersionNrCmuLoad"))
xldv20TrLctSession = NotificationType((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 10) + (0,25)).setObjects(("XLDV20-MIB", "xldv20TvTimeAndDate"), ("XLDV20-MIB", "xldv20TvSnmLctSession"))
xldv20TrSnmAgentRunning = NotificationType((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 10) + (0,26)).setObjects(("XLDV20-MIB", "xldv20TvTimeAndDate"), ("XLDV20-MIB", "xldv20TvSnmMibVersion"), ("XLDV20-MIB", "xldv20TvSnmAgentVersion"))
xldv20TrRstResult = NotificationType((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 10) + (0,27)).setObjects(("XLDV20-MIB", "xldv20TvTimeAndDate"), ("XLDV20-MIB", "xldv20TvRstResult"), ("XLDV20-MIB", "xldv20TvRepSource"), ("XLDV20-MIB", "xldv20TvRstHwUnitIndex"))
xldv20TrPltTestResult = NotificationType((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 10) + (0,28)).setObjects(("XLDV20-MIB", "xldv20TvTimeAndDate"), ("XLDV20-MIB", "xldv20TvTsrControlStatus"))
xldv20TrStateChangeAdmin = NotificationType((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 10) + (0,29)).setObjects(("XLDV20-MIB", "xldv20TvTimeAndDate"), ("XLDV20-MIB", "xldv20TvRepEntity"), ("XLDV20-MIB", "xldv20TvRepSource"), ("XLDV20-MIB", "xldv20TvStcOldAdminStatus"), ("XLDV20-MIB", "xldv20TvStcNewAdminStatus"))
xldv20TrStateChangeOper = NotificationType((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 10) + (0,30)).setObjects(("XLDV20-MIB", "xldv20TvTimeAndDate"), ("XLDV20-MIB", "xldv20TvRepEntity"), ("XLDV20-MIB", "xldv20TvRepSource"), ("XLDV20-MIB", "xldv20TvStcOldOperStatus"), ("XLDV20-MIB", "xldv20TvStcNewOperStatus"))
xldv20TrChangeRate = NotificationType((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 10) + (0,31)).setObjects(("XLDV20-MIB", "xldv20TvTimeAndDate"), ("XLDV20-MIB", "xldv20TvAdcControlStatus"), ("XLDV20-MIB", "xldv20TvRepEntity"), ("XLDV20-MIB", "xldv20TvRepSource"))
xldv20TrCmuReadyForReset = NotificationType((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 10) + (0,32)).setObjects(("XLDV20-MIB", "xldv20TvTimeAndDate"))
xldv20TrAltTestResult = NotificationType((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 10) + (0,33)).setObjects(("XLDV20-MIB", "xldv20TvTimeAndDate"), ("XLDV20-MIB", "xldv20TvTsrControlStatus"))
xldv20TrActivateLoadResult = NotificationType((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 10) + (0,34)).setObjects(("XLDV20-MIB", "xldv20TvTimeAndDate"), ("XLDV20-MIB", "xldv20TvSucResult"), ("XLDV20-MIB", "xldv20TvSucUnit"), ("XLDV20-MIB", "xldv20TvSucHwUnitIndex"))
xldv20TrPuUpgradeSucc = NotificationType((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 10) + (0,35)).setObjects(("XLDV20-MIB", "xldv20TvTimeAndDate"), ("XLDV20-MIB", "xldv20TvSucUnit"), ("XLDV20-MIB", "xldv20TvSucHwUnitIndex"), ("XLDV20-MIB", "xldv20TvSucVersionNo"))
xldv20TrUpgradeCancelled = NotificationType((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 10) + (0,36)).setObjects(("XLDV20-MIB", "xldv20TvTimeAndDate"), ("XLDV20-MIB", "xldv20TvSucUnit"), ("XLDV20-MIB", "xldv20TvSucHwUnitIndex"), ("XLDV20-MIB", "xldv20TvSucVersionNo"), ("XLDV20-MIB", "xldv20TvSucResult"))
xldv20TrFtpError = NotificationType((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 10) + (0,38)).setObjects(("XLDV20-MIB", "xldv20TvTimeAndDate"), ("XLDV20-MIB", "xldv20TvSucUnit"), ("XLDV20-MIB", "xldv20TvSucPathName"), ("XLDV20-MIB", "xldv20TvSucFileName"), ("XLDV20-MIB", "xldv20TvSucResult"))
xldv20TrSweLogRead = NotificationType((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 10) + (0,40)).setObjects(("XLDV20-MIB", "xldv20TvTimeAndDate"), ("XLDV20-MIB", "xldv20TvDbuSweLogReadResult"))
xldv20TrHwmLogRead = NotificationType((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 10) + (0,41)).setObjects(("XLDV20-MIB", "xldv20TvTimeAndDate"), ("XLDV20-MIB", "xldv20TvDbuHwmLogReadResult"))
xldv20TrTraceLogRead = NotificationType((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 10) + (0,42)).setObjects(("XLDV20-MIB", "xldv20TvTimeAndDate"), ("XLDV20-MIB", "xldv20TvDbuSwTraceLogReadResult"))
xldv20TrVplCcCreation = NotificationType((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 10) + (0,45)).setObjects(("XLDV20-MIB", "xldv20TvTimeAndDate"), ("XLDV20-MIB", "xldv20TvVpiNni"), ("XLDV20-MIB", "xldv20TvVpiNniIndex"), ("XLDV20-MIB", "xldv20TvVplTerminationPointA"), ("XLDV20-MIB", "xldv20TvVplTerminationPointZ"), ("XLDV20-MIB", "xldv20TvEthVpcTpIndex"), ("XLDV20-MIB", "xldv20TvEthVccTpIndex"), ("XLDV20-MIB", "xldv20TvVplTpIndex"))
xldv20TrVplCcDeletion = NotificationType((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 10) + (0,46)).setObjects(("XLDV20-MIB", "xldv20TvTimeAndDate"), ("XLDV20-MIB", "xldv20TvVpiNni"), ("XLDV20-MIB", "xldv20TvVpiNniIndex"), ("XLDV20-MIB", "xldv20TvVplTerminationPointA"), ("XLDV20-MIB", "xldv20TvVplTerminationPointZ"), ("XLDV20-MIB", "xldv20TvEthVpcTpIndex"), ("XLDV20-MIB", "xldv20TvEthVccTpIndex"), ("XLDV20-MIB", "xldv20TvVplTpIndex"))
xldv20TrObjCreate = NotificationType((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 10) + (0,100)).setObjects(("XLDV20-MIB", "xldv20TvTimeAndDate"), ("XLDV20-MIB", "xldv20TvRepSource"), ("XLDV20-MIB", "xldv20TvRepEntity"), ("XLDV20-MIB", "xldv20TvHwUnitType"), ("XLDV20-MIB", "xldv20TvHwContainingUnitIndex"), ("XLDV20-MIB", "xldv20TvHwContainedUnitAddr"))
xldv20TrObjDelete = NotificationType((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 10) + (0,101)).setObjects(("XLDV20-MIB", "xldv20TvTimeAndDate"), ("XLDV20-MIB", "xldv20TvRepSource"), ("XLDV20-MIB", "xldv20TvRepEntity"), ("XLDV20-MIB", "xldv20TvHwUnitType"), ("XLDV20-MIB", "xldv20TvHwContainingUnitIndex"), ("XLDV20-MIB", "xldv20TvHwContainedUnitAddr"))
xldv20TrXmissionErr = NotificationType((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 10) + (0,105)).setObjects(("XLDV20-MIB", "xldv20TvTimeAndDate"), ("XLDV20-MIB", "xldv20TvRepEntity"), ("XLDV20-MIB", "xldv20TvRepSource"), ("XLDV20-MIB", "xldv20TvAlmSpecProblem"), ("XLDV20-MIB", "xldv20TvAlmNatureOfAlarm"), ("XLDV20-MIB", "xldv20TvAlmFailedComponent"), ("XLDV20-MIB", "xldv20TvAlmFailedComponentRepSource"), ("XLDV20-MIB", "xldv20TvAlmSeverityOfFailure"), ("XLDV20-MIB", "xldv20TvAlmStatus"), ("XLDV20-MIB", "xldv20TvAlmPropRepairAction"), ("XLDV20-MIB", "xldv20TvAlmSpecProblemText"))
xldv20TrExternalAlarm = NotificationType((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 10) + (0,110)).setObjects(("XLDV20-MIB", "xldv20TvTimeAndDate"), ("XLDV20-MIB", "xldv20TvRepEntity"), ("XLDV20-MIB", "xldv20TvRepSource"), ("XLDV20-MIB", "xldv20TvAlmSpecProblem"), ("XLDV20-MIB", "xldv20TvAlmNatureOfAlarm"), ("XLDV20-MIB", "xldv20TvAlmFailedComponent"), ("XLDV20-MIB", "xldv20TvAlmFailedComponentRepSource"), ("XLDV20-MIB", "xldv20TvAlmSeverityOfFailure"), ("XLDV20-MIB", "xldv20TvAlmStatus"), ("XLDV20-MIB", "xldv20TvAlmPropRepairAction"), ("XLDV20-MIB", "xldv20TvAlmSpecProblemText"))
xldv20TrUnitReadyForReset = NotificationType((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 10) + (0,111)).setObjects(("XLDV20-MIB", "xldv20TvTimeAndDate"), ("XLDV20-MIB", "xldv20TvSucUnit"), ("XLDV20-MIB", "xldv20TvSucHwUnitIndex"), ("XLDV20-MIB", "xldv20TvSucVersionNo"))
xldv20TrHwuControl = NotificationType((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 10) + (0,112)).setObjects(("XLDV20-MIB", "xldv20TvTimeAndDate"), ("XLDV20-MIB", "xldv20TvRepSource"), ("XLDV20-MIB", "xldv20TvHwuControlResult"))
xldv20TrReplaceableUnitRemoved = NotificationType((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 10) + (0,113)).setObjects(("XLDV20-MIB", "xldv20TvTimeAndDate"), ("XLDV20-MIB", "xldv20TvRepEntity"), ("XLDV20-MIB", "xldv20TvRepSource"), ("XLDV20-MIB", "xldv20TvAlmSpecProblem"), ("XLDV20-MIB", "xldv20TvAlmNatureOfAlarm"), ("XLDV20-MIB", "xldv20TvAlmFailedComponent"), ("XLDV20-MIB", "xldv20TvAlmFailedComponentRepSource"), ("XLDV20-MIB", "xldv20TvAlmSeverityOfFailure"), ("XLDV20-MIB", "xldv20TvAlmStatus"), ("XLDV20-MIB", "xldv20TvAlmPropRepairAction"), ("XLDV20-MIB", "xldv20TvAlmSpecProblemText"))
xldv20TrAIS = NotificationType((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 10) + (0,114)).setObjects(("XLDV20-MIB", "xldv20TvTimeAndDate"), ("XLDV20-MIB", "xldv20TvRepEntity"), ("XLDV20-MIB", "xldv20TvRepSource"), ("XLDV20-MIB", "xldv20TvAlmSpecProblem"), ("XLDV20-MIB", "xldv20TvAlmNatureOfAlarm"), ("XLDV20-MIB", "xldv20TvAlmFailedComponent"), ("XLDV20-MIB", "xldv20TvAlmFailedComponentRepSource"), ("XLDV20-MIB", "xldv20TvAlmSeverityOfFailure"), ("XLDV20-MIB", "xldv20TvAlmStatus"), ("XLDV20-MIB", "xldv20TvAlmPropRepairAction"), ("XLDV20-MIB", "xldv20TvAlmSpecProblemText"))
xldv20TrRDI = NotificationType((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 10) + (0,115)).setObjects(("XLDV20-MIB", "xldv20TvTimeAndDate"), ("XLDV20-MIB", "xldv20TvRepEntity"), ("XLDV20-MIB", "xldv20TvRepSource"), ("XLDV20-MIB", "xldv20TvAlmSpecProblem"), ("XLDV20-MIB", "xldv20TvAlmNatureOfAlarm"), ("XLDV20-MIB", "xldv20TvAlmFailedComponent"), ("XLDV20-MIB", "xldv20TvAlmFailedComponentRepSource"), ("XLDV20-MIB", "xldv20TvAlmSeverityOfFailure"), ("XLDV20-MIB", "xldv20TvAlmStatus"), ("XLDV20-MIB", "xldv20TvAlmPropRepairAction"), ("XLDV20-MIB", "xldv20TvAlmSpecProblemText"))
xldv20TrPlcpLof = NotificationType((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 10) + (0,116)).setObjects(("XLDV20-MIB", "xldv20TvTimeAndDate"), ("XLDV20-MIB", "xldv20TvRepEntity"), ("XLDV20-MIB", "xldv20TvRepSource"), ("XLDV20-MIB", "xldv20TvAlmSpecProblem"), ("XLDV20-MIB", "xldv20TvAlmNatureOfAlarm"), ("XLDV20-MIB", "xldv20TvAlmFailedComponent"), ("XLDV20-MIB", "xldv20TvAlmFailedComponentRepSource"), ("XLDV20-MIB", "xldv20TvAlmSeverityOfFailure"), ("XLDV20-MIB", "xldv20TvAlmStatus"), ("XLDV20-MIB", "xldv20TvAlmPropRepairAction"), ("XLDV20-MIB", "xldv20TvAlmSpecProblemText"))
xldv20TrPlcpRDI = NotificationType((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 10) + (0,117)).setObjects(("XLDV20-MIB", "xldv20TvTimeAndDate"), ("XLDV20-MIB", "xldv20TvRepEntity"), ("XLDV20-MIB", "xldv20TvRepSource"), ("XLDV20-MIB", "xldv20TvAlmSpecProblem"), ("XLDV20-MIB", "xldv20TvAlmNatureOfAlarm"), ("XLDV20-MIB", "xldv20TvAlmFailedComponent"), ("XLDV20-MIB", "xldv20TvAlmFailedComponentRepSource"), ("XLDV20-MIB", "xldv20TvAlmSeverityOfFailure"), ("XLDV20-MIB", "xldv20TvAlmStatus"), ("XLDV20-MIB", "xldv20TvAlmPropRepairAction"), ("XLDV20-MIB", "xldv20TvAlmSpecProblemText"))
xldv20TrRemInvReady = NotificationType((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 10) + (0,118)).setObjects(("XLDV20-MIB", "xldv20TvTimeAndDate"), ("XLDV20-MIB", "xldv20TvRiRemInvResult"))
xldv20TrDbBackup = NotificationType((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 10) + (0,119)).setObjects(("XLDV20-MIB", "xldv20TvTimeAndDate"), ("XLDV20-MIB", "xldv20TvBackupResult"))
xldv20TrSwVersionSet = NotificationType((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 10) + (0,120)).setObjects(("XLDV20-MIB", "xldv20TvTimeAndDate"), ("XLDV20-MIB", "xldv20TvRepSource"), ("XLDV20-MIB", "xldv20TvRepEntity"))
xldv20TrReadSAPSContentFileReady = NotificationType((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 10) + (0,121)).setObjects(("XLDV20-MIB", "xldv20TvTimeAndDate"), ("XLDV20-MIB", "xldv20TvSucResult"))
xldv20TrReplaceableUnitSwMissing = NotificationType((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 10) + (0,122)).setObjects(("XLDV20-MIB", "xldv20TvTimeAndDate"), ("XLDV20-MIB", "xldv20TvRepEntity"), ("XLDV20-MIB", "xldv20TvRepSource"), ("XLDV20-MIB", "xldv20TvAlmSpecProblem"), ("XLDV20-MIB", "xldv20TvAlmNatureOfAlarm"), ("XLDV20-MIB", "xldv20TvAlmFailedComponent"), ("XLDV20-MIB", "xldv20TvAlmFailedComponentRepSource"), ("XLDV20-MIB", "xldv20TvAlmSeverityOfFailure"), ("XLDV20-MIB", "xldv20TvAlmStatus"), ("XLDV20-MIB", "xldv20TvAlmPropRepairAction"), ("XLDV20-MIB", "xldv20TvAlmSpecProblemText"))
xldv20TrInternalFault = NotificationType((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 10) + (0,123)).setObjects(("XLDV20-MIB", "xldv20TvTimeAndDate"), ("XLDV20-MIB", "xldv20TvRepEntity"), ("XLDV20-MIB", "xldv20TvRepSource"), ("XLDV20-MIB", "xldv20TvAlmSpecProblem"), ("XLDV20-MIB", "xldv20TvAlmNatureOfAlarm"), ("XLDV20-MIB", "xldv20TvAlmFailedComponent"), ("XLDV20-MIB", "xldv20TvAlmFailedComponentRepSource"), ("XLDV20-MIB", "xldv20TvAlmSeverityOfFailure"), ("XLDV20-MIB", "xldv20TvAlmStatus"), ("XLDV20-MIB", "xldv20TvAlmPropRepairAction"), ("XLDV20-MIB", "xldv20TvAlmSpecProblemText"))
xldv20TrVclCcCreation = NotificationType((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 10) + (0,127)).setObjects(("XLDV20-MIB", "xldv20TvTimeAndDate"), ("XLDV20-MIB", "xldv20TvVpiNni"), ("XLDV20-MIB", "xldv20TvVciNni"), ("XLDV20-MIB", "xldv20TvVciNniIndex"), ("XLDV20-MIB", "xldv20TvVclTerminationPointA"), ("XLDV20-MIB", "xldv20TvVclTerminationPointZ"), ("XLDV20-MIB", "xldv20TvEthVpcTpIndex"), ("XLDV20-MIB", "xldv20TvEthVccTpIndex"), ("XLDV20-MIB", "xldv20TvVplTpIndex"))
xldv20TrVclCcDeletion = NotificationType((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 10) + (0,128)).setObjects(("XLDV20-MIB", "xldv20TvTimeAndDate"), ("XLDV20-MIB", "xldv20TvVpiNni"), ("XLDV20-MIB", "xldv20TvVciNni"), ("XLDV20-MIB", "xldv20TvVciNniIndex"), ("XLDV20-MIB", "xldv20TvVclTerminationPointA"), ("XLDV20-MIB", "xldv20TvVclTerminationPointZ"), ("XLDV20-MIB", "xldv20TvEthVpcTpIndex"), ("XLDV20-MIB", "xldv20TvEthVccTpIndex"), ("XLDV20-MIB", "xldv20TvEthEntryIndex"), ("XLDV20-MIB", "xldv20TvVplTpIndex"))
xldv20TrImmMNR = NotificationType((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 10) + (0,130)).setObjects(("XLDV20-MIB", "xldv20TvTimeAndDate"), ("XLDV20-MIB", "xldv20TvRepEntity"), ("XLDV20-MIB", "xldv20TvRepSource"), ("XLDV20-MIB", "xldv20TvAlmSpecProblem"), ("XLDV20-MIB", "xldv20TvAlmNatureOfAlarm"), ("XLDV20-MIB", "xldv20TvAlmFailedComponent"), ("XLDV20-MIB", "xldv20TvAlmFailedComponentRepSource"), ("XLDV20-MIB", "xldv20TvAlmSeverityOfFailure"), ("XLDV20-MIB", "xldv20TvAlmStatus"), ("XLDV20-MIB", "xldv20TvAlmPropRepairAction"), ("XLDV20-MIB", "xldv20TvAlmSpecProblemText"))
xldv20TrLpr = NotificationType((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 10) + (0,131)).setObjects(("XLDV20-MIB", "xldv20TvTimeAndDate"), ("XLDV20-MIB", "xldv20TvRepEntity"), ("XLDV20-MIB", "xldv20TvRepSource"), ("XLDV20-MIB", "xldv20TvAlmSpecProblem"), ("XLDV20-MIB", "xldv20TvAlmNatureOfAlarm"), ("XLDV20-MIB", "xldv20TvAlmFailedComponent"), ("XLDV20-MIB", "xldv20TvAlmFailedComponentRepSource"), ("XLDV20-MIB", "xldv20TvAlmSeverityOfFailure"), ("XLDV20-MIB", "xldv20TvAlmStatus"), ("XLDV20-MIB", "xldv20TvAlmPropRepairAction"), ("XLDV20-MIB", "xldv20TvAlmSpecProblemText"))
xldv20TrLol = NotificationType((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 10) + (0,132)).setObjects(("XLDV20-MIB", "xldv20TvTimeAndDate"), ("XLDV20-MIB", "xldv20TvRepEntity"), ("XLDV20-MIB", "xldv20TvRepSource"), ("XLDV20-MIB", "xldv20TvAlmSpecProblem"), ("XLDV20-MIB", "xldv20TvAlmNatureOfAlarm"), ("XLDV20-MIB", "xldv20TvAlmFailedComponent"), ("XLDV20-MIB", "xldv20TvAlmFailedComponentRepSource"), ("XLDV20-MIB", "xldv20TvAlmSeverityOfFailure"), ("XLDV20-MIB", "xldv20TvAlmStatus"), ("XLDV20-MIB", "xldv20TvAlmPropRepairAction"), ("XLDV20-MIB", "xldv20TvAlmSpecProblemText"))
xldv20TrAtmLayerMultiAlarm = NotificationType((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 10) + (0,135)).setObjects(("XLDV20-MIB", "xldv20TvTimeAndDate"), ("XLDV20-MIB", "xldv20TvAlmNatureOfAlarm"), ("XLDV20-MIB", "xldv20TvAlmFailedComponentRepSource"), ("XLDV20-MIB", "xldv20TvAlmSpecProblem"), ("XLDV20-MIB", "xldv20TvAlmSeverityOfFailure"), ("XLDV20-MIB", "xldv20TvAlmStatus"), ("XLDV20-MIB", "xldv20TvAlmPropRepairAction"), ("XLDV20-MIB", "xldv20TvAlmFailedComponentString"))
xldv20TrTelnetSession = NotificationType((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 10) + (0,136)).setObjects(("XLDV20-MIB", "xldv20TvTimeAndDate"), ("XLDV20-MIB", "xldv20TvTelnetSession"), ("XLDV20-MIB", "xldv20TvTelnetSessionUser"))
xldv20TrVplCACProblem = NotificationType((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 10) + (0,137)).setObjects(("XLDV20-MIB", "xldv20TvTimeAndDate"), ("XLDV20-MIB", "xldv20TvVpiValue"), ("XLDV20-MIB", "xldv20TvVplIfIndex"), ("XLDV20-MIB", "xldv20TvCACProblemType"), ("XLDV20-MIB", "xldv20TvCACBandwidthUsageUp"), ("XLDV20-MIB", "xldv20TvCACBandwidthUsageDown"))
xldv20TrVclCACProblem = NotificationType((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 10) + (0,139)).setObjects(("XLDV20-MIB", "xldv20TvTimeAndDate"), ("XLDV20-MIB", "xldv20TvVpiValue"), ("XLDV20-MIB", "xldv20TvVplIfIndex"), ("XLDV20-MIB", "xldv20TvVplTpIndex"), ("XLDV20-MIB", "xldv20TvVciValue"), ("XLDV20-MIB", "xldv20TvCACProblemType"), ("XLDV20-MIB", "xldv20TvCACBandwidthUsageUp"), ("XLDV20-MIB", "xldv20TvCACBandwidthUsageDown"))
xldv20TrWrongServiceConfigData = NotificationType((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 10) + (0,141)).setObjects(("XLDV20-MIB", "xldv20TvTimeAndDate"), ("XLDV20-MIB", "xldv20TvRepEntity"), ("XLDV20-MIB", "xldv20TvRepSource"), ("XLDV20-MIB", "xldv20TvAlmSpecProblem"), ("XLDV20-MIB", "xldv20TvAlmNatureOfAlarm"), ("XLDV20-MIB", "xldv20TvAlmFailedComponent"), ("XLDV20-MIB", "xldv20TvAlmFailedComponentRepSource"), ("XLDV20-MIB", "xldv20TvAlmSeverityOfFailure"), ("XLDV20-MIB", "xldv20TvAlmStatus"), ("XLDV20-MIB", "xldv20TvAlmPropRepairAction"), ("XLDV20-MIB", "xldv20TvAlmSpecProblemText"))
xldv20TrReplaceableUnitPlugged = NotificationType((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 10) + (0,142)).setObjects(("XLDV20-MIB", "xldv20TvTimeAndDate"), ("XLDV20-MIB", "xldv20TvRepEntity"), ("XLDV20-MIB", "xldv20TvRepSource"))
xldv20TrReplaceableUnitUnplugged = NotificationType((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 10) + (0,143)).setObjects(("XLDV20-MIB", "xldv20TvTimeAndDate"), ("XLDV20-MIB", "xldv20TvRepEntity"), ("XLDV20-MIB", "xldv20TvRepSource"))
xldv20TrStateChangeOperExt = NotificationType((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 10) + (0,144)).setObjects(("XLDV20-MIB", "xldv20TvTimeAndDate"), ("XLDV20-MIB", "xldv20TvRepEntityExt"), ("XLDV20-MIB", "xldv20TvRepSource"), ("XLDV20-MIB", "xldv20TvStcOldOperStatus"), ("XLDV20-MIB", "xldv20TvStcNewOperStatus"))
xldv20TrLOC = NotificationType((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 10) + (0,145)).setObjects(("XLDV20-MIB", "xldv20TvTimeAndDate"), ("XLDV20-MIB", "xldv20TvRepEntity"), ("XLDV20-MIB", "xldv20TvRepSource"), ("XLDV20-MIB", "xldv20TvAlmSpecProblem"), ("XLDV20-MIB", "xldv20TvAlmNatureOfAlarm"), ("XLDV20-MIB", "xldv20TvAlmFailedComponent"), ("XLDV20-MIB", "xldv20TvAlmFailedComponentRepSource"), ("XLDV20-MIB", "xldv20TvAlmSeverityOfFailure"), ("XLDV20-MIB", "xldv20TvAlmStatus"), ("XLDV20-MIB", "xldv20TvAlmPropRepairAction"), ("XLDV20-MIB", "xldv20TvAlmSpecProblemText"))
xldv20TrDbRestore = NotificationType((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 10) + (0,150)).setObjects(("XLDV20-MIB", "xldv20TvTimeAndDate"), ("XLDV20-MIB", "xldv20TvRestoreResult"))
xldv20TrUpgradeEndRequestResult = NotificationType((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 10) + (0,151)).setObjects(("XLDV20-MIB", "xldv20TvTimeAndDate"), ("XLDV20-MIB", "xldv20TvSucResult"))
xldv20TrUnitUpgradeNotRequested = NotificationType((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 10) + (0,152)).setObjects(("XLDV20-MIB", "xldv20TvTimeAndDate"), ("XLDV20-MIB", "xldv20TvSucUnit"), ("XLDV20-MIB", "xldv20TvSucHwUnitIndex"), ("XLDV20-MIB", "xldv20TvSucVersionNo"))
xldv20TrVpcTpCreation = NotificationType((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 10) + (0,400)).setObjects(("XLDV20-MIB", "xldv20TvTimeAndDate"), ("XLDV20-MIB", "xldv20TvVpiValue"), ("XLDV20-MIB", "xldv20TvVpcTpIndex"))
xldv20TrVpcTpDeletion = NotificationType((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 10) + (0,401)).setObjects(("XLDV20-MIB", "xldv20TvTimeAndDate"), ("XLDV20-MIB", "xldv20TvVpiValue"), ("XLDV20-MIB", "xldv20TvVpcTpIndex"))
xldv20TrVpcTpCACProblem = NotificationType((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 10) + (0,402)).setObjects(("XLDV20-MIB", "xldv20TvTimeAndDate"), ("XLDV20-MIB", "xldv20TvVpiValue"), ("XLDV20-MIB", "xldv20TvVpcTpIfIndex"), ("XLDV20-MIB", "xldv20TvCACProblemType"), ("XLDV20-MIB", "xldv20TvCACBandwidthUsageUp"), ("XLDV20-MIB", "xldv20TvCACBandwidthUsageDown"))
xldv20TrContinuityCheckVpEntryCreated = NotificationType((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 10) + (0,403)).setObjects(("XLDV20-MIB", "xldv20TvTimeAndDate"), ("XLDV20-MIB", "xldv20TvCallpObjectType"), ("XLDV20-MIB", "xldv20TvIndexSegment"), ("XLDV20-MIB", "xldv20TvIndexEndToEnd"))
xldv20TrContinuityCheckVpEntryDeleted = NotificationType((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 10) + (0,404)).setObjects(("XLDV20-MIB", "xldv20TvTimeAndDate"), ("XLDV20-MIB", "xldv20TvCallpObjectType"), ("XLDV20-MIB", "xldv20TvIndexSegment"), ("XLDV20-MIB", "xldv20TvIndexEndToEnd"))
xldv20TrContinuityCheckVcEntryCreated = NotificationType((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 10) + (0,405)).setObjects(("XLDV20-MIB", "xldv20TvTimeAndDate"), ("XLDV20-MIB", "xldv20TvCallpObjectType"), ("XLDV20-MIB", "xldv20TvIndexSegment"), ("XLDV20-MIB", "xldv20TvIndexEndToEnd"))
xldv20TrContinuityCheckVcEntryDeleted = NotificationType((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 10) + (0,406)).setObjects(("XLDV20-MIB", "xldv20TvTimeAndDate"), ("XLDV20-MIB", "xldv20TvCallpObjectType"), ("XLDV20-MIB", "xldv20TvIndexSegment"), ("XLDV20-MIB", "xldv20TvIndexEndToEnd"))
xldv20TrExcBER = NotificationType((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 10) + (0,407)).setObjects(("XLDV20-MIB", "xldv20TvTimeAndDate"), ("XLDV20-MIB", "xldv20TvRepEntity"), ("XLDV20-MIB", "xldv20TvRepSource"), ("XLDV20-MIB", "xldv20TvAlmSpecProblem"), ("XLDV20-MIB", "xldv20TvAlmNatureOfAlarm"), ("XLDV20-MIB", "xldv20TvAlmFailedComponent"), ("XLDV20-MIB", "xldv20TvAlmFailedComponentRepSource"), ("XLDV20-MIB", "xldv20TvAlmSeverityOfFailure"), ("XLDV20-MIB", "xldv20TvAlmStatus"), ("XLDV20-MIB", "xldv20TvAlmPropRepairAction"), ("XLDV20-MIB", "xldv20TvAlmSpecProblemText"))
xldv20TrLif = NotificationType((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 10) + (0,408)).setObjects(("XLDV20-MIB", "xldv20TvTimeAndDate"), ("XLDV20-MIB", "xldv20TvRepEntity"), ("XLDV20-MIB", "xldv20TvRepSource"), ("XLDV20-MIB", "xldv20TvAlmSpecProblem"), ("XLDV20-MIB", "xldv20TvAlmNatureOfAlarm"), ("XLDV20-MIB", "xldv20TvAlmFailedComponent"), ("XLDV20-MIB", "xldv20TvAlmFailedComponentRepSource"), ("XLDV20-MIB", "xldv20TvAlmSeverityOfFailure"), ("XLDV20-MIB", "xldv20TvAlmStatus"), ("XLDV20-MIB", "xldv20TvAlmPropRepairAction"), ("XLDV20-MIB", "xldv20TvAlmSpecProblemText"))
xldv20TrLods = NotificationType((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 10) + (0,409)).setObjects(("XLDV20-MIB", "xldv20TvTimeAndDate"), ("XLDV20-MIB", "xldv20TvRepEntity"), ("XLDV20-MIB", "xldv20TvRepSource"), ("XLDV20-MIB", "xldv20TvAlmSpecProblem"), ("XLDV20-MIB", "xldv20TvAlmNatureOfAlarm"), ("XLDV20-MIB", "xldv20TvAlmFailedComponent"), ("XLDV20-MIB", "xldv20TvAlmFailedComponentRepSource"), ("XLDV20-MIB", "xldv20TvAlmSeverityOfFailure"), ("XLDV20-MIB", "xldv20TvAlmStatus"), ("XLDV20-MIB", "xldv20TvAlmPropRepairAction"), ("XLDV20-MIB", "xldv20TvAlmSpecProblemText"))
xldv20TrTxUnusableFe = NotificationType((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 10) + (0,410)).setObjects(("XLDV20-MIB", "xldv20TvTimeAndDate"), ("XLDV20-MIB", "xldv20TvRepEntity"), ("XLDV20-MIB", "xldv20TvRepSource"), ("XLDV20-MIB", "xldv20TvAlmSpecProblem"), ("XLDV20-MIB", "xldv20TvAlmNatureOfAlarm"), ("XLDV20-MIB", "xldv20TvAlmFailedComponent"), ("XLDV20-MIB", "xldv20TvAlmFailedComponentRepSource"), ("XLDV20-MIB", "xldv20TvAlmSeverityOfFailure"), ("XLDV20-MIB", "xldv20TvAlmStatus"), ("XLDV20-MIB", "xldv20TvAlmPropRepairAction"), ("XLDV20-MIB", "xldv20TvAlmSpecProblemText"))
xldv20TrRxUnusableFe = NotificationType((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 10) + (0,411)).setObjects(("XLDV20-MIB", "xldv20TvTimeAndDate"), ("XLDV20-MIB", "xldv20TvRepEntity"), ("XLDV20-MIB", "xldv20TvRepSource"), ("XLDV20-MIB", "xldv20TvAlmSpecProblem"), ("XLDV20-MIB", "xldv20TvAlmNatureOfAlarm"), ("XLDV20-MIB", "xldv20TvAlmFailedComponent"), ("XLDV20-MIB", "xldv20TvAlmFailedComponentRepSource"), ("XLDV20-MIB", "xldv20TvAlmSeverityOfFailure"), ("XLDV20-MIB", "xldv20TvAlmStatus"), ("XLDV20-MIB", "xldv20TvAlmPropRepairAction"), ("XLDV20-MIB", "xldv20TvAlmSpecProblemText"))
xldv20TrRfiIma = NotificationType((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 10) + (0,412)).setObjects(("XLDV20-MIB", "xldv20TvTimeAndDate"), ("XLDV20-MIB", "xldv20TvRepEntity"), ("XLDV20-MIB", "xldv20TvRepSource"), ("XLDV20-MIB", "xldv20TvAlmSpecProblem"), ("XLDV20-MIB", "xldv20TvAlmNatureOfAlarm"), ("XLDV20-MIB", "xldv20TvAlmFailedComponent"), ("XLDV20-MIB", "xldv20TvAlmFailedComponentRepSource"), ("XLDV20-MIB", "xldv20TvAlmSeverityOfFailure"), ("XLDV20-MIB", "xldv20TvAlmStatus"), ("XLDV20-MIB", "xldv20TvAlmPropRepairAction"), ("XLDV20-MIB", "xldv20TvAlmSpecProblemText"))
xldv20TrRAI = NotificationType((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 10) + (0,413)).setObjects(("XLDV20-MIB", "xldv20TvTimeAndDate"), ("XLDV20-MIB", "xldv20TvRepEntity"), ("XLDV20-MIB", "xldv20TvRepSource"), ("XLDV20-MIB", "xldv20TvAlmSpecProblem"), ("XLDV20-MIB", "xldv20TvAlmNatureOfAlarm"), ("XLDV20-MIB", "xldv20TvAlmFailedComponent"), ("XLDV20-MIB", "xldv20TvAlmFailedComponentRepSource"), ("XLDV20-MIB", "xldv20TvAlmSeverityOfFailure"), ("XLDV20-MIB", "xldv20TvAlmStatus"), ("XLDV20-MIB", "xldv20TvAlmPropRepairAction"), ("XLDV20-MIB", "xldv20TvAlmSpecProblemText"))
xldv20TrStartUpFe = NotificationType((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 10) + (0,450)).setObjects(("XLDV20-MIB", "xldv20TvTimeAndDate"), ("XLDV20-MIB", "xldv20TvRepEntity"), ("XLDV20-MIB", "xldv20TvRepSource"), ("XLDV20-MIB", "xldv20TvAlmSpecProblem"), ("XLDV20-MIB", "xldv20TvAlmNatureOfAlarm"), ("XLDV20-MIB", "xldv20TvAlmFailedComponent"), ("XLDV20-MIB", "xldv20TvAlmFailedComponentRepSource"), ("XLDV20-MIB", "xldv20TvAlmSeverityOfFailure"), ("XLDV20-MIB", "xldv20TvAlmStatus"), ("XLDV20-MIB", "xldv20TvAlmPropRepairAction"), ("XLDV20-MIB", "xldv20TvAlmSpecProblemText"))
xldv20TrConfigAbort = NotificationType((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 10) + (0,451)).setObjects(("XLDV20-MIB", "xldv20TvTimeAndDate"), ("XLDV20-MIB", "xldv20TvRepEntity"), ("XLDV20-MIB", "xldv20TvRepSource"), ("XLDV20-MIB", "xldv20TvAlmSpecProblem"), ("XLDV20-MIB", "xldv20TvAlmNatureOfAlarm"), ("XLDV20-MIB", "xldv20TvAlmFailedComponent"), ("XLDV20-MIB", "xldv20TvAlmFailedComponentRepSource"), ("XLDV20-MIB", "xldv20TvAlmSeverityOfFailure"), ("XLDV20-MIB", "xldv20TvAlmStatus"), ("XLDV20-MIB", "xldv20TvAlmPropRepairAction"), ("XLDV20-MIB", "xldv20TvAlmSpecProblemText"))
xldv20TrConfigAbortFe = NotificationType((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 10) + (0,452)).setObjects(("XLDV20-MIB", "xldv20TvTimeAndDate"), ("XLDV20-MIB", "xldv20TvRepEntity"), ("XLDV20-MIB", "xldv20TvRepSource"), ("XLDV20-MIB", "xldv20TvAlmSpecProblem"), ("XLDV20-MIB", "xldv20TvAlmNatureOfAlarm"), ("XLDV20-MIB", "xldv20TvAlmFailedComponent"), ("XLDV20-MIB", "xldv20TvAlmFailedComponentRepSource"), ("XLDV20-MIB", "xldv20TvAlmSeverityOfFailure"), ("XLDV20-MIB", "xldv20TvAlmStatus"), ("XLDV20-MIB", "xldv20TvAlmPropRepairAction"), ("XLDV20-MIB", "xldv20TvAlmSpecProblemText"))
xldv20TrInsufficientLinks = NotificationType((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 10) + (0,453)).setObjects(("XLDV20-MIB", "xldv20TvTimeAndDate"), ("XLDV20-MIB", "xldv20TvRepEntity"), ("XLDV20-MIB", "xldv20TvRepSource"), ("XLDV20-MIB", "xldv20TvAlmSpecProblem"), ("XLDV20-MIB", "xldv20TvAlmNatureOfAlarm"), ("XLDV20-MIB", "xldv20TvAlmFailedComponent"), ("XLDV20-MIB", "xldv20TvAlmFailedComponentRepSource"), ("XLDV20-MIB", "xldv20TvAlmSeverityOfFailure"), ("XLDV20-MIB", "xldv20TvAlmStatus"), ("XLDV20-MIB", "xldv20TvAlmPropRepairAction"), ("XLDV20-MIB", "xldv20TvAlmSpecProblemText"))
xldv20TrInsufficientLinksFe = NotificationType((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 10) + (0,454)).setObjects(("XLDV20-MIB", "xldv20TvTimeAndDate"), ("XLDV20-MIB", "xldv20TvRepEntity"), ("XLDV20-MIB", "xldv20TvRepSource"), ("XLDV20-MIB", "xldv20TvAlmSpecProblem"), ("XLDV20-MIB", "xldv20TvAlmNatureOfAlarm"), ("XLDV20-MIB", "xldv20TvAlmFailedComponent"), ("XLDV20-MIB", "xldv20TvAlmFailedComponentRepSource"), ("XLDV20-MIB", "xldv20TvAlmSeverityOfFailure"), ("XLDV20-MIB", "xldv20TvAlmStatus"), ("XLDV20-MIB", "xldv20TvAlmPropRepairAction"), ("XLDV20-MIB", "xldv20TvAlmSpecProblemText"))
xldv20TrBlockedFe = NotificationType((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 10) + (0,455)).setObjects(("XLDV20-MIB", "xldv20TvTimeAndDate"), ("XLDV20-MIB", "xldv20TvRepEntity"), ("XLDV20-MIB", "xldv20TvRepSource"), ("XLDV20-MIB", "xldv20TvAlmSpecProblem"), ("XLDV20-MIB", "xldv20TvAlmNatureOfAlarm"), ("XLDV20-MIB", "xldv20TvAlmFailedComponent"), ("XLDV20-MIB", "xldv20TvAlmFailedComponentRepSource"), ("XLDV20-MIB", "xldv20TvAlmSeverityOfFailure"), ("XLDV20-MIB", "xldv20TvAlmStatus"), ("XLDV20-MIB", "xldv20TvAlmPropRepairAction"), ("XLDV20-MIB", "xldv20TvAlmSpecProblemText"))
xldv20TrImaMinNumOfLinks = NotificationType((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 10) + (0,456)).setObjects(("XLDV20-MIB", "xldv20TvTimeAndDate"), ("XLDV20-MIB", "xldv20TvImaSetNumResult"))
xldv20TrStateChangeAvail = NotificationType((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 10) + (0,457)).setObjects(("XLDV20-MIB", "xldv20TvTimeAndDate"), ("XLDV20-MIB", "xldv20TvRepEntity"), ("XLDV20-MIB", "xldv20TvRepSource"), ("XLDV20-MIB", "xldv20TvStcOldAvailStatus"), ("XLDV20-MIB", "xldv20TvStcNewAvailStatus"))
mibBuilder.exportSymbols("XLDV20-MIB", xldv20EthernetConfigEntry=xldv20EthernetConfigEntry, xldv20CvcVcTpIndex=xldv20CvcVcTpIndex, xldv20HwEquipHolderTable=xldv20HwEquipHolderTable, xldv20TlmIma=xldv20TlmIma, xldv20ImaGroupNeNumFailures=xldv20ImaGroupNeNumFailures, xldv20ImaLinkNeTxState=xldv20ImaLinkNeTxState, xldv20VplMaximumBurstSizeDownstream=xldv20VplMaximumBurstSizeDownstream, xldv20ImaGroupRxTimingRefLink=xldv20ImaGroupRxTimingRefLink, xldv20CvcOperationalState=xldv20CvcOperationalState, xldv20S3nPathTraceSendDefault=xldv20S3nPathTraceSendDefault, Xldv20VdcLatencyDn=Xldv20VdcLatencyDn, xldv20VclVbrCDVTUpstream=xldv20VclVbrCDVTUpstream, xldv20TrTxUnusableFe=xldv20TrTxUnusableFe, xldv20VdcCtrlMaxRateUp=xldv20VdcCtrlMaxRateUp, xldv20VpcVpiValue=xldv20VpcVpiValue, Xldv20TrafficType=Xldv20TrafficType, xldv20S1nRsEberThreshold=xldv20S1nRsEberThreshold, Xldv20XdslServiceTypeCurrent=Xldv20XdslServiceTypeCurrent, xldv20VdcMaxRateUpCfg=xldv20VdcMaxRateUpCfg, xldv20NeLocation=xldv20NeLocation, xldv20NeTimeZone=xldv20NeTimeZone, xldv20VpcTpTable=xldv20VpcTpTable, xldv20VdcMinRateUpCfg=xldv20VdcMinRateUpCfg, xldv20ActIfIndex=xldv20ActIfIndex, xldv20ImaLinkFeUnavailSecs=xldv20ImaLinkFeUnavailSecs, xldv20AlmControlTimeStamp=xldv20AlmControlTimeStamp, xldv20HwContainingUnitIndex=xldv20HwContainingUnitIndex, xldv20TrImaMinNumOfLinks=xldv20TrImaMinNumOfLinks, xldv20AdcRateUp=xldv20AdcRateUp, xldv20VpcCellDelayVariationToleranceUpstream=xldv20VpcCellDelayVariationToleranceUpstream, Xldv20AlmFiltProfileIndex=Xldv20AlmFiltProfileIndex, xldv20TrHwuControl=xldv20TrHwuControl, xldv20E3NePPTPEntry=xldv20E3NePPTPEntry, xldv20D3nBandwidthUsage=xldv20D3nBandwidthUsage, xldv20SdcPPTPTable=xldv20SdcPPTPTable, xldv20TrSwVersionSet=xldv20TrSwVersionSet, xldv20VplLOCAlarm=xldv20VplLOCAlarm, xldv20CocControlTimeStamp=xldv20CocControlTimeStamp, xldv20TrInternalFault=xldv20TrInternalFault, xldv20HwuControlReq=xldv20HwuControlReq, xldv20AlmNatureOfAlarm=xldv20AlmNatureOfAlarm, xldv20TvVpcNniIndex=xldv20TvVpcNniIndex, xldv20TvHwuControlResult=xldv20TvHwuControlResult, xldv20AlmIndex=xldv20AlmIndex, xldv20TvSnmAgentVersion=xldv20TvSnmAgentVersion, xldv20IfType=xldv20IfType, xldv20TvEthVccTpIndex=xldv20TvEthVccTpIndex, xldv20RiControlReq=xldv20RiControlReq, xldv20Stm1NePPTPEntry=xldv20Stm1NePPTPEntry, xldv20VcxVpcUniIndex=xldv20VcxVpcUniIndex, xldv20IfConnectivityIndex=xldv20IfConnectivityIndex, xldv20TvVersionNrCmuLoad=xldv20TvVersionNrCmuLoad, xldv20AccOperationalState=xldv20AccOperationalState, xldv20HwuControl=xldv20HwuControl, xldv20AdcCtrlLatencyUp=xldv20AdcCtrlLatencyUp, Xldv20XdslServiceType=Xldv20XdslServiceType, xldv20VpcLineIndex=xldv20VpcLineIndex, xldv20TrReplaceableUnitResetEnd=xldv20TrReplaceableUnitResetEnd, xldv20VcxEthVccIndex=xldv20VcxEthVccIndex, xldv20TrStateChangeOperExt=xldv20TrStateChangeOperExt, xldv20Reset=xldv20Reset, Xldv20AdslDataRateUp=Xldv20AdslDataRateUp, xldv20ImaControlTimeStamp=xldv20ImaControlTimeStamp, xldv20VccCvcIndexEndToEnd=xldv20VccCvcIndexEndToEnd, xldv20AdcFirstUsedSubCarrierUpstream=xldv20AdcFirstUsedSubCarrierUpstream, xldv20TvVpiValue=xldv20TvVpiValue, xldv20VccLOCAlarm=xldv20VccLOCAlarm, xldv20ActPeakCellRateDownstream=xldv20ActPeakCellRateDownstream, Xldv20RiResultType=Xldv20RiResultType, xldv20VdcRateUp=xldv20VdcRateUp, xldv20VdcAttenuationUp=xldv20VdcAttenuationUp, xldv20VdcCtrlPowerBoost=xldv20VdcCtrlPowerBoost, xldv20VdcCtrlSleepMode=xldv20VdcCtrlSleepMode, xldv20AdcMinRateUpCfg=xldv20AdcMinRateUpCfg, xldv20VdcCtrlIfIndex=xldv20VdcCtrlIfIndex, xldv20ImaLinkFeTxUnusableSecs=xldv20ImaLinkFeTxUnusableSecs, xldv20DbmControlTimeStamp=xldv20DbmControlTimeStamp, xldv20TmnIndex=xldv20TmnIndex, xldv20VccVciValue=xldv20VccVciValue, xldv20EqhRiHwItemNumber=xldv20EqhRiHwItemNumber, xldv20VcCrossConnectEntry=xldv20VcCrossConnectEntry, xldv20VpcVbrCDVTUpstream=xldv20VpcVbrCDVTUpstream, xldv20VdcPPTPTable=xldv20VdcPPTPTable, xldv20SdcMarginUp=xldv20SdcMarginUp, xldv20AltVpi=xldv20AltVpi, xldv20TvIndexSegment=xldv20TvIndexSegment, xldv20HwmIfIndex=xldv20HwmIfIndex, xldv20Dsx1TransmitClockSource=xldv20Dsx1TransmitClockSource, xldv20ContinuityCheckVcTable=xldv20ContinuityCheckVcTable, xldv20TrFtpError=xldv20TrFtpError, xldv20SucDefaultSwVersion=xldv20SucDefaultSwVersion, xldv20ImaControl=xldv20ImaControl, Xldv20PollingFlagType=Xldv20PollingFlagType, xldv20TvCallpObjectType=xldv20TvCallpObjectType, xldv20AltControlReq=xldv20AltControlReq, xldv20TrMsSD=xldv20TrMsSD, xldv20HwEquipHolderEntry=xldv20HwEquipHolderEntry, xldv20ExtAlarmSeverityIndex=xldv20ExtAlarmSeverityIndex, xldv20ActContinuityCheckNni=xldv20ActContinuityCheckNni, Xldv20TelnetAccess=Xldv20TelnetAccess, xldv20IfEntry=xldv20IfEntry, xldv20ImaControlMinNumLinks=xldv20ImaControlMinNumLinks, xldv20AlmFiltTrapId=xldv20AlmFiltTrapId, xldv20VpcTrafficType=xldv20VpcTrafficType, xldv20NeExternalTime=xldv20NeExternalTime, xldv20S3nPathTraceSend=xldv20S3nPathTraceSend, xldv20SdcAttenuationDn=xldv20SdcAttenuationDn, xldv20SucAllOfType=xldv20SucAllOfType, xldv20SdcXdslServiceTypeCfg=xldv20SdcXdslServiceTypeCfg, xldv20S3nBandwidthUsage=xldv20S3nBandwidthUsage, xldv20ImaGroupRxImaId=xldv20ImaGroupRxImaId, xldv20TrReplaceableUnitSwMissing=xldv20TrReplaceableUnitSwMissing, xldv20SnmControlReq=xldv20SnmControlReq, xldv20ImaGroupNeState=xldv20ImaGroupNeState, xldv20VccOperationalState=xldv20VccOperationalState, xldv20AlmPropRepairAction=xldv20AlmPropRepairAction, xldv20ActEthIpAddressCo=xldv20ActEthIpAddressCo, xldv20TrLpr=xldv20TrLpr, xldv20TvVclTerminationPointA=xldv20TvVclTerminationPointA, xldv20ImaLinkFeRxFailureStatus=xldv20ImaLinkFeRxFailureStatus, xldv20VdcLatencyDnCfg=xldv20VdcLatencyDnCfg, xldv20VdcRateDn=xldv20VdcRateDn, xldv20SnmMaxResponseTime=xldv20SnmMaxResponseTime, xldv20VcxIndex=xldv20VcxIndex, xldv20IfTable=xldv20IfTable, xldv20TvAlmFailedComponentRepSource=xldv20TvAlmFailedComponentRepSource, xldv20SdcCtrlXdslServiceType=xldv20SdcCtrlXdslServiceType, xldv20SnmTmnSpecificIndex=xldv20SnmTmnSpecificIndex, xldv20EqhRiFwItemNumber=xldv20EqhRiFwItemNumber, xldv20VdcControl=xldv20VdcControl, xldv20TvEthEntryIndex=xldv20TvEthEntryIndex, xldv20ImaGroupTxTimingRefLink=xldv20ImaGroupTxTimingRefLink, Xldv20S1nS3nEberThreshold=Xldv20S1nS3nEberThreshold, xldv20PltIfIndex=xldv20PltIfIndex, xldv20VdcWarmStartCfg=xldv20VdcWarmStartCfg, Xldv20ExtAlarmActivityState=Xldv20ExtAlarmActivityState, Xldv20SuppressionType=Xldv20SuppressionType, Xldv20ChannelType=Xldv20ChannelType, xldv20ContinuityCheckVpEntry=xldv20ContinuityCheckVpEntry, xldv20TvDbuHwmLogReadResult=xldv20TvDbuHwmLogReadResult, xldv20EqhMnemoCode=xldv20EqhMnemoCode, xldv20AdcMarginUp=xldv20AdcMarginUp, xldv20Dbm=xldv20Dbm, xldv20VclCellDelayVariationToleranceDownstream=xldv20VclCellDelayVariationToleranceDownstream, xldv20PiuOperState=xldv20PiuOperState, xldv20AlmSeverity=xldv20AlmSeverity, xldv20RstHwUnitIndex=xldv20RstHwUnitIndex, xldv20ImaLinkNeRxFailureStatus=xldv20ImaLinkNeRxFailureStatus, xldv20AlmTempFilter=xldv20AlmTempFilter, xldv20E3nTrailTraceExpect=xldv20E3nTrailTraceExpect, xldv20TrReplaceableUnitProblem=xldv20TrReplaceableUnitProblem, xldv20VclCvcIndexSegment=xldv20VclCvcIndexSegment, xldv20TrStateChangeAvail=xldv20TrStateChangeAvail, xldv20AdcMinMarginUpCfg=xldv20AdcMinMarginUpCfg, xldv20ImaGroupFeTxClkMode=xldv20ImaGroupFeTxClkMode, xldv20RstControlReqResult=xldv20RstControlReqResult, xldv20Ds3NePPTPEntry=xldv20Ds3NePPTPEntry, xldv20TmnTable=xldv20TmnTable, xldv20VdcCtrlLatencyUp=xldv20VdcCtrlLatencyUp, xldv20LbpLoopMode=xldv20LbpLoopMode, xldv20ImaControlReq=xldv20ImaControlReq, xldv20VcCrossConnectTable=xldv20VcCrossConnectTable, xldv20PiuAdminState=xldv20PiuAdminState, xldv20VplSustainableCellRateUpstream=xldv20VplSustainableCellRateUpstream, xldv20EquType=xldv20EquType, Xldv20VdcPowerBoostAdaptationType=Xldv20VdcPowerBoostAdaptationType, Xldv20RepSource=Xldv20RepSource, xldv20ImaLinkFeSevErroredSecs=xldv20ImaLinkFeSevErroredSecs, xldv20ImaGroupSymmetry=xldv20ImaGroupSymmetry, xldv20ActEthE164Isp=xldv20ActEthE164Isp, xldv20TrTim=xldv20TrTim, xldv20ImaControlGroupIndex=xldv20ImaControlGroupIndex, xldv20SutUpgradeState=xldv20SutUpgradeState, xldv20TrMsRDI=xldv20TrMsRDI, xldv20TrTraceLogRead=xldv20TrTraceLogRead, xldv20TvAlmFailedComponentString=xldv20TvAlmFailedComponentString, xldv20VclVbrCDVTDownstream=xldv20VclVbrCDVTDownstream, xldv20AlmTimeAndDate=xldv20AlmTimeAndDate, xldv20ActControlReqResult=xldv20ActControlReqResult, xldv20IfHwPortId=xldv20IfHwPortId, xldv20S1nPathTraceExpect=xldv20S1nPathTraceExpect, xldv20ImaLinkTxStuffs=xldv20ImaLinkTxStuffs, xldv20SnmStartupResult=xldv20SnmStartupResult, xldv20ActContinuityCheckNt=xldv20ActContinuityCheckNt, xldv20TvVpiNni=xldv20TvVpiNni, xldv20E3nPayloadType=xldv20E3nPayloadType, xldv20VclVciValue=xldv20VclVciValue, xldv20ActControlTimeStamp=xldv20ActControlTimeStamp, Xldv20SdslDataRateCurrent=Xldv20SdslDataRateCurrent, xldv20AltControlStatus=xldv20AltControlStatus, xldv20AlmControl=xldv20AlmControl, xldv20MlbEntry=xldv20MlbEntry, xldv20ActInbandVci=xldv20ActInbandVci, xldv20RiControlTimer=xldv20RiControlTimer, xldv20DbuLogType=xldv20DbuLogType, xldv20AlarmFilteringEntry=xldv20AlarmFilteringEntry, xldv20IfIndex=xldv20IfIndex, xldv20TvSucUnit=xldv20TvSucUnit, Xldv20ImaLinkState=Xldv20ImaLinkState, xldv20ActOperationalState=xldv20ActOperationalState, Xldv20VdcPsdMask=Xldv20VdcPsdMask, xldv20AdcCtrlMarginDn=xldv20AdcCtrlMarginDn, xldv20ActControlReq=xldv20ActControlReq, Xldv20StartupType=Xldv20StartupType, xldv20AdcCtrlMaxRateUp=xldv20AdcCtrlMaxRateUp, xldv20SdcLinkState=xldv20SdcLinkState, xldv20AdcMarginDnCfg=xldv20AdcMarginDnCfg, xldv20ImaGroupDiffDelayMaxObs=xldv20ImaGroupDiffDelayMaxObs, xldv20AlarmFilteringTable=xldv20AlarmFilteringTable, Xldv20AdslDataRateDown=Xldv20AdslDataRateDown, xldv20HwuContainedUnitAddr=xldv20HwuContainedUnitAddr, xldv20D3nType=xldv20D3nType, xldv20S3nPathTraceSync=xldv20S3nPathTraceSync, xldv20AlmSeverityOfFailure=xldv20AlmSeverityOfFailure, xldv20SwmLogHandler=xldv20SwmLogHandler, xldv20AltControlReqResult=xldv20AltControlReqResult, xldv20AlmSevProfileIndex=xldv20AlmSevProfileIndex, xldv20AlmSevProfileRowStatus=xldv20AlmSevProfileRowStatus, xldv20Ds3NePPTPTable=xldv20Ds3NePPTPTable, xldv20SucControlStatus=xldv20SucControlStatus, xldv20TvTsrControlStatus=xldv20TvTsrControlStatus, xldv20TrContinuityCheckVcEntryCreated=xldv20TrContinuityCheckVcEntryCreated, xldv20TrBlockedFe=xldv20TrBlockedFe, xldv20TvVciNniIndex=xldv20TvVciNniIndex, xldv20TvImaSetNumResult=xldv20TvImaSetNumResult, Xldv20OamLevel=Xldv20OamLevel, Xldv20HwUnitType=Xldv20HwUnitType, Xldv20TrafficDirection=Xldv20TrafficDirection, xldv20DbmControlTimer=xldv20DbmControlTimer, xldv20HwUnitType=xldv20HwUnitType, xldv20ImaGroupIndex=xldv20ImaGroupIndex, xldv20PiuType=xldv20PiuType, xldv20AlarmFilteringProfileTable=xldv20AlarmFilteringProfileTable, xldv20ActPeakCellRateUpstream=xldv20ActPeakCellRateUpstream, xldv20PltControlTimeStamp=xldv20PltControlTimeStamp, Xldv20DbuReadStatus=Xldv20DbuReadStatus, MilliSeconds=MilliSeconds, xldv20VclAlarmSeverityIndex=xldv20VclAlarmSeverityIndex, xldv20S1nBandwidthUsage=xldv20S1nBandwidthUsage, xldv20TrObjDelete=xldv20TrObjDelete, xldv20TvAlmNatureOfAlarm=xldv20TvAlmNatureOfAlarm, xldv20AltIfIndex=xldv20AltIfIndex, xldv20DbuControlTimeStamp=xldv20DbuControlTimeStamp, xldv20VcxLineIndex=xldv20VcxLineIndex, xldv20TvTelnetSessionUser=xldv20TvTelnetSessionUser, xldv20VpcMaximumBurstSizeDownstream=xldv20VpcMaximumBurstSizeDownstream, xldv20AdcMinRateDnCfg=xldv20AdcMinRateDnCfg, xldv20SdcMarginDn=xldv20SdcMarginDn, xldv20ImaGroupNumRxActLinks=xldv20ImaGroupNumRxActLinks, xldv20DbmControlReq=xldv20DbmControlReq, xldv20DbmControlStatus=xldv20DbmControlStatus, Xldv20LineType=Xldv20LineType, xldv20VdcCtrlControlTimeStamp=xldv20VdcCtrlControlTimeStamp, Xldv20CallpAlarmState=Xldv20CallpAlarmState)
mibBuilder.exportSymbols("XLDV20-MIB", xldv20AdcMaxRateUpCfg=xldv20AdcMaxRateUpCfg, xldv20TvStartupResult=xldv20TvStartupResult, Xldv20EndpointType=Xldv20EndpointType, xldv20ContinuityCheckVpTable=xldv20ContinuityCheckVpTable, xldv20ImaGroupMinNumRxLinks=xldv20ImaGroupMinNumRxLinks, xldv20TrPlcpRDI=xldv20TrPlcpRDI, xldv20TrConfigAbort=xldv20TrConfigAbort, xldv20VdcGuaranteedBandwidthUsage=xldv20VdcGuaranteedBandwidthUsage, xldv20TvTelnetSession=xldv20TvTelnetSession, xldv20ImaGroupDiffDelayMax=xldv20ImaGroupDiffDelayMax, xldv20TrReplaceableUnitRemoved=xldv20TrReplaceableUnitRemoved, xldv20ActContinuityCheckUni=xldv20ActContinuityCheckUni, xldv20VplSustainableCellRateDownstream=xldv20VplSustainableCellRateDownstream, xldv20RstControlTimer=xldv20RstControlTimer, xldv20SucPredecessorSwVersion=xldv20SucPredecessorSwVersion, xldv20VplIndex=xldv20VplIndex, xldv20VplPeakCellRateDownstream=xldv20VplPeakCellRateDownstream, xldv20Sts3NePPTPTable=xldv20Sts3NePPTPTable, xldv20DbuControlStatus=xldv20DbuControlStatus, xldv20PltControlReq=xldv20PltControlReq, xldv20IfAlarmSeverityIndex=xldv20IfAlarmSeverityIndex, xldv20VcxVpcNniIndex=xldv20VcxVpcNniIndex, xldv20RstControlReq=xldv20RstControlReq, xldv20DbuHwUnitIndex=xldv20DbuHwUnitIndex, xldv20VplCellDelayVariationToleranceDownstream=xldv20VplCellDelayVariationToleranceDownstream, xldv20Stm1NePPTPTable=xldv20Stm1NePPTPTable, xldv20AdcInitStatus=xldv20AdcInitStatus, xldv20StcSecureTelnetControl=xldv20StcSecureTelnetControl, Xldv20SlotStatus=Xldv20SlotStatus, xldv20VclTrafficType=xldv20VclTrafficType, xldv20EquLocation=xldv20EquLocation, xldv20InbandTmn=xldv20InbandTmn, xldv20TvStcOldAdminStatus=xldv20TvStcOldAdminStatus, xldv20AlarmSeverityTable=xldv20AlarmSeverityTable, xldv20VclSustainableCellRateDownstream=xldv20VclSustainableCellRateDownstream, Xldv20SdslDataRate=Xldv20SdslDataRate, xldv20TvStcNewAvailStatus=xldv20TvStcNewAvailStatus, xldv20TvRepEntityExt=xldv20TvRepEntityExt, xldv20ImaGroupRunningSecs=xldv20ImaGroupRunningSecs, xldv20AlmRepEntityId=xldv20AlmRepEntityId, xldv20ActInbandVpi=xldv20ActInbandVpi, xldv20E3nTrailTraceTIMDetectionActivate=xldv20E3nTrailTraceTIMDetectionActivate, xldv20CocControlReq=xldv20CocControlReq, xldv20ImaControlTimer=xldv20ImaControlTimer, xldv20TvAdcControlStatus=xldv20TvAdcControlStatus, xldv20TrContinuityCheckVpEntryDeleted=xldv20TrContinuityCheckVpEntryDeleted, xldv20VclCellDelayVariationToleranceUpstream=xldv20VclCellDelayVariationToleranceUpstream, xldv20ActEndpointTypeNni=xldv20ActEndpointTypeNni, xldv20VclHwUnitIndex=xldv20VclHwUnitIndex, xldv20HwuUnitType=xldv20HwuUnitType, xldv20SdcCtrlControlReqResult=xldv20SdcCtrlControlReqResult, xldv20TvBackupResult=xldv20TvBackupResult, xldv20VclLineIndex=xldv20VclLineIndex, xldv20ImaLinkNeSevErroredSecs=xldv20ImaLinkNeSevErroredSecs, xldv20SnmTmnConnected=xldv20SnmTmnConnected, xldv20VpcEthVpcIndex=xldv20VpcEthVpcIndex, xldv20SdcCtrlControlTimeStamp=xldv20SdcCtrlControlTimeStamp, xldv20VpcOperationalState=xldv20VpcOperationalState, xldv20ImaGroupLeastDelayLink=xldv20ImaGroupLeastDelayLink, xldv20SucFileName=xldv20SucFileName, xldv20TrVpcTpCreation=xldv20TrVpcTpCreation, xldv20CocTestType=xldv20CocTestType, xldv20TvCACBandwidthUsageUp=xldv20TvCACBandwidthUsageUp, xldv20AltControlTimer=xldv20AltControlTimer, xldv20HwuControlStatus=xldv20HwuControlStatus, xldv20VdcSleepModeCfg=xldv20VdcSleepModeCfg, xldv20AdcCtrlControlReq=xldv20AdcCtrlControlReq, xldv20S1nSignalLabelReceive=xldv20S1nSignalLabelReceive, xldv20VpcHwUnitIndex=xldv20VpcHwUnitIndex, xldv20S3nEmptyCellType=xldv20S3nEmptyCellType, xldv20AdcAISOnLOS=xldv20AdcAISOnLOS, xldv20AccEthVpcIndex=xldv20AccEthVpcIndex, xldv20TvStcNewAdminStatus=xldv20TvStcNewAdminStatus, Xldv20S1nS3nSDThreshold=Xldv20S1nS3nSDThreshold, Xldv20RstResult=Xldv20RstResult, xldv20ImaLinkNeTxNumFailures=xldv20ImaLinkNeTxNumFailures, xldv20AlmSpecProblem=xldv20AlmSpecProblem, xldv20TvSucResult=xldv20TvSucResult, Xldv20AdminState=Xldv20AdminState, xldv20TvVciNni=xldv20TvVciNni, xldv20TvHwUnitType=xldv20TvHwUnitType, xldv20VccVpcIndex=xldv20VccVpcIndex, xldv20VdcCtrlControlReqResult=xldv20VdcCtrlControlReqResult, xldv20S3nPathTraceExpect=xldv20S3nPathTraceExpect, xldv20ActTrafficType=xldv20ActTrafficType, Xldv20ImaGroupSymmetry=Xldv20ImaGroupSymmetry, xldv20S1nEmptyCellType=xldv20S1nEmptyCellType, xldv20TrMsAIS=xldv20TrMsAIS, xldv20SutHwUnitIndex=xldv20SutHwUnitIndex, xldv20HwUnitIndex=xldv20HwUnitIndex, xldv20DbmBackupPeriod=xldv20DbmBackupPeriod, xldv20TrExcBER=xldv20TrExcBER, xldv20TrRAI=xldv20TrRAI, xldv20PiuAlarmSeverityIndex=xldv20PiuAlarmSeverityIndex, xldv20HwUnitMappingEntry=xldv20HwUnitMappingEntry, xldv20VccTpTable=xldv20VccTpTable, xldv20TrVpcTpCACProblem=xldv20TrVpcTpCACProblem, Xldv20AdslOutputPower=Xldv20AdslOutputPower, xldv20TrVplCACProblem=xldv20TrVplCACProblem, xldv20ActEthIpAddressRemoteRouter=xldv20ActEthIpAddressRemoteRouter, xldv20S1nRDIAISOnEber=xldv20S1nRDIAISOnEber, xldv20S3nSignalLabelReceive=xldv20S3nSignalLabelReceive, xldv20VpcCvpIndexSegment=xldv20VpcCvpIndexSegment, Xldv20ControlReq=Xldv20ControlReq, xldv20Dsx1LineCoding=xldv20Dsx1LineCoding, xldv20TrWrongServiceConfigData=xldv20TrWrongServiceConfigData, xldv20ImaGroupBetaValue=xldv20ImaGroupBetaValue, Xldv20AdslAttenuation=Xldv20AdslAttenuation, xldv20VpcSustainableCellRateDownstream=xldv20VpcSustainableCellRateDownstream, Xldv20CodingType=Xldv20CodingType, xldv20VpcIndex=xldv20VpcIndex, Xldv20ControlStatus=Xldv20ControlStatus, xldv20NeVersion=xldv20NeVersion, xldv20TrExternalAlarm=xldv20TrExternalAlarm, xldv20TvAlmStatus=xldv20TvAlmStatus, xldv20TmnLctSessionPollingFlag=xldv20TmnLctSessionPollingFlag, xldv20TvActCcStatus=xldv20TvActCcStatus, xldv20CocControlReqResult=xldv20CocControlReqResult, xldv20PiuAlarmFilteringIndex=xldv20PiuAlarmFilteringIndex, xldv20ContinuityCheckVcEntry=xldv20ContinuityCheckVcEntry, xldv20RiControlStatus=xldv20RiControlStatus, xldv20HwuControlReqResult=xldv20HwuControlReqResult, xldv20AltFlowDirection=xldv20AltFlowDirection, xldv20TvCACBandwidthUsageDown=xldv20TvCACBandwidthUsageDown, xldv20VdcCtrlMinRateDn=xldv20VdcCtrlMinRateDn, Xldv20ImaLinkFailureStatus=Xldv20ImaLinkFailureStatus, xldv20VdcCtrlLatencyDn=xldv20VdcCtrlLatencyDn, xldv20Dsx1LineType=xldv20Dsx1LineType, xldv20Hwm=xldv20Hwm, xldv20IbmPPTPEntry=xldv20IbmPPTPEntry, xldv20ImaGroupIfIndex=xldv20ImaGroupIfIndex, xldv20ActEndpointTypeUni=xldv20ActEndpointTypeUni, xldv20TrRDI=xldv20TrRDI, xldv20ExtAlarmFilteringIndex=xldv20ExtAlarmFilteringIndex, xldv20HwuContainingUnitIndex=xldv20HwuContainingUnitIndex, xldv20IbmAISOnLOS=xldv20IbmAISOnLOS, xldv20S3nPathTraceTIMDetectionActivate=xldv20S3nPathTraceTIMDetectionActivate, xldv20Traps=xldv20Traps, xldv20TvIndexEndToEnd=xldv20TvIndexEndToEnd, xldv20VcxOperationalState=xldv20VcxOperationalState, xldv20Dsx1ConfigEntry=xldv20Dsx1ConfigEntry, xldv20VdcPowerBoostCfg=xldv20VdcPowerBoostCfg, xldv20StcTelnetAccess=xldv20StcTelnetAccess, xldv20ActSegmentEndPointUni=xldv20ActSegmentEndPointUni, xldv20SdcInitStatus=xldv20SdcInitStatus, xldv20VclConnectivityPointer=xldv20VclConnectivityPointer, xldv20E3NePPTPTable=xldv20E3NePPTPTable, xldv20VpcPeakCellRateDownstream=xldv20VpcPeakCellRateDownstream, xldv20SdcAttenuationUp=xldv20SdcAttenuationUp, xldv20SdcMinMarginUpCfg=xldv20SdcMinMarginUpCfg, xldv20SutPiuType=xldv20SutPiuType, xldv20EqhAccPiuTypes=xldv20EqhAccPiuTypes, xldv20TvVpiNniIndex=xldv20TvVpiNniIndex, xldv20SdcControl=xldv20SdcControl, xldv20IfAlarmState=xldv20IfAlarmState, xldv20ImaLinkFeTxState=xldv20ImaLinkFeTxState, xldv20ActMaximumBurstSizeDownstream=xldv20ActMaximumBurstSizeDownstream, Xldv20EqhType=Xldv20EqhType, xldv20AdcCtrlMinMarginDn=xldv20AdcCtrlMinMarginDn, xldv20E3nEmptyCellType=xldv20E3nEmptyCellType, xldv20NeDescriptorFileName=xldv20NeDescriptorFileName, xldv20TrPRDI=xldv20TrPRDI, Xldv20LoopMode=Xldv20LoopMode, xldv20ExtAlarmName=xldv20ExtAlarmName, xldv20TrapVars=xldv20TrapVars, xldv20TvDbuSweLogReadResult=xldv20TvDbuSweLogReadResult, xldv20VdcMarginDn=xldv20VdcMarginDn, xldv20TvStartupType=xldv20TvStartupType, xldv20RemoteInventory=xldv20RemoteInventory, xldv20VccAlarmSeverityIndex=xldv20VccAlarmSeverityIndex, xldv20DbuControlTimer=xldv20DbuControlTimer, xldv20VcxTerminationPointA=xldv20VcxTerminationPointA, xldv20AlmFailedComponentRepSource=xldv20AlmFailedComponentRepSource, xldv20AltLoopTestType=xldv20AltLoopTestType, xldv20CvpEndpointType=xldv20CvpEndpointType, xldv20VclIfIndex=xldv20VclIfIndex, xldv20HwContainmentTable=xldv20HwContainmentTable, xldv20MultipleLoopbackResultTable=xldv20MultipleLoopbackResultTable, xldv20DbmControlReqResultRemote=xldv20DbmControlReqResultRemote, xldv20VpcCellDelayVariationToleranceDownstream=xldv20VpcCellDelayVariationToleranceDownstream, xldv20TrUpgradeCancelled=xldv20TrUpgradeCancelled, xldv20TrAIS=xldv20TrAIS, xldv20TrReadSAPSContentFileReady=xldv20TrReadSAPSContentFileReady, xldv20ImaLinkGroupIndex=xldv20ImaLinkGroupIndex, xldv20EthMode=xldv20EthMode, xldv20SdcXdslServiceType=xldv20SdcXdslServiceType, xldv20DbuNumEntries=xldv20DbuNumEntries, xldv20VcxTerminationPointZ=xldv20VcxTerminationPointZ, xldv20CvcTestType=xldv20CvcTestType, xldv20HwuPiuType=xldv20HwuPiuType, xldv20AlmRepSource=xldv20AlmRepSource, xldv20TvRepSource=xldv20TvRepSource, xldv20InbandVpiCurrent=xldv20InbandVpiCurrent, xldv20IfLineIndex=xldv20IfLineIndex, xldv20ActMaximumBurstSizeUpstream=xldv20ActMaximumBurstSizeUpstream, xldv20AltVci=xldv20AltVci, xldv20AlmSpecProblemText=xldv20AlmSpecProblemText, Xldv20RowStatus=Xldv20RowStatus, xldv20VplAlarmSeverityIndex=xldv20VplAlarmSeverityIndex, xldv20TvSucVersionNo=xldv20TvSucVersionNo, xldv20SnmpMgmt=xldv20SnmpMgmt, xldv20TrPAIS=xldv20TrPAIS, xldv20TrVplCcCreation=xldv20TrVplCcCreation, xldv20VplPeakCellRateUpstream=xldv20VplPeakCellRateUpstream, xldv20TrStateChangeOper=xldv20TrStateChangeOper, xldv20S1nPathTraceReceive=xldv20S1nPathTraceReceive, xldv20VpcMaximumBurstSizeUpstream=xldv20VpcMaximumBurstSizeUpstream, xldv20E3nTrailTraceReceive=xldv20E3nTrailTraceReceive, xldv20HwContainedUnitIndex=xldv20HwContainedUnitIndex, xldv20AdcCtrlControlTimeStamp=xldv20AdcCtrlControlTimeStamp, xldv20SnmControlTimeStamp=xldv20SnmControlTimeStamp, xldv20TrAtmLayerMultiAlarm=xldv20TrAtmLayerMultiAlarm, xldv20VdcMinRateDnCfg=xldv20VdcMinRateDnCfg, xldv20TvVplTerminationPointZ=xldv20TvVplTerminationPointZ, xldv20ImaLinkImaViolations=xldv20ImaLinkImaViolations, xldv20TrActivateLoadResult=xldv20TrActivateLoadResult, xldv20EthIpAddressSubnetMaskNt=xldv20EthIpAddressSubnetMaskNt, xldv20ImaMibObjects=xldv20ImaMibObjects, xldv20EthernetConfigTable=xldv20EthernetConfigTable, xldv20ImaGroupNumTxCfgLinks=xldv20ImaGroupNumTxCfgLinks, xldv20SdcAISOnACT=xldv20SdcAISOnACT, xldv20TrHpExcBER=xldv20TrHpExcBER, xldv20VdcVdslModeCfg=xldv20VdcVdslModeCfg, xldv20ActTestTypeNni=xldv20ActTestTypeNni, xldv20IfAdminState=xldv20IfAdminState, xldv20S1nLineType=xldv20S1nLineType, xldv20TrRstResult=xldv20TrRstResult, xldv20VpcPeakCellRateUpstream=xldv20VpcPeakCellRateUpstream, xldv20VpcAISAlarm=xldv20VpcAISAlarm, xldv20E3nBandwidthUsage=xldv20E3nBandwidthUsage, xldv20ActMaxVciValue=xldv20ActMaxVciValue, Xldv20AdslDataRateDownCurrent=Xldv20AdslDataRateDownCurrent, xldv20ImaLinkRxLid=xldv20ImaLinkRxLid, xldv20TvAlmSpecProblem=xldv20TvAlmSpecProblem, xldv20VpcSegmentEndPoint=xldv20VpcSegmentEndPoint, xldv20MlbLoopLocId=xldv20MlbLoopLocId, xldv20ActEndpointTypeNt=xldv20ActEndpointTypeNt, xldv20SucControlReqResult=xldv20SucControlReqResult, xldv20HwContainedUnitAddr=xldv20HwContainedUnitAddr, xldv20AdcControl=xldv20AdcControl, xldv20Sts3NePPTPEntry=xldv20Sts3NePPTPEntry, xldv20AdcCtrlMaxRateDn=xldv20AdcCtrlMaxRateDn, xldv20TrapTypes=xldv20TrapTypes, xldv20TrSlm=xldv20TrSlm, xldv20VpcRDIAlarm=xldv20VpcRDIAlarm, Xldv20AlarmState=Xldv20AlarmState, xldv20EquUserLabel=xldv20EquUserLabel, xldv20TvSucPathName=xldv20TvSucPathName, xldv20VclSegmentEndPoint=xldv20VclSegmentEndPoint, xldv20EqhType=xldv20EqhType, xldv20VdcCtrlControlReq=xldv20VdcCtrlControlReq, xldv20S3nSDThreshold=xldv20S3nSDThreshold, xldv20S3nMsEberThreshold=xldv20S3nMsEberThreshold, xldv20AccAtmfVplIndex=xldv20AccAtmfVplIndex)
mibBuilder.exportSymbols("XLDV20-MIB", xldv20AdcLinkState=xldv20AdcLinkState, xldv20TrHwmLogRead=xldv20TrHwmLogRead, xldv20VplTrafficType=xldv20VplTrafficType, xldv20ActVpiUni=xldv20ActVpiUni, xldv20TvRestoreResult=xldv20TvRestoreResult, xldv20E3nCodingType=xldv20E3nCodingType, xldv20CvpVpTpIndex=xldv20CvpVpTpIndex, xldv20InbandVciConfig=xldv20InbandVciConfig, xldv20TrChangeRate=xldv20TrChangeRate, xldv20TvTimeAndDate=xldv20TvTimeAndDate, xldv20VdcCtrlMaxRateDn=xldv20VdcCtrlMaxRateDn, Xldv20AdslMargin=Xldv20AdslMargin, xldv20ActCallpTableIndex=xldv20ActCallpTableIndex, xldv20VplVbrCDVTDownstream=xldv20VplVbrCDVTDownstream, xldv20CvpIndex=xldv20CvpIndex, xldv20CallP=xldv20CallP, xldv20ActVciNni=xldv20ActVciNni, xldv20TrLof=xldv20TrLof, xldv20HwUnitMappingTable=xldv20HwUnitMappingTable, xldv20MlbIndex=xldv20MlbIndex, xldv20SnmLctSessionPollingFlag=xldv20SnmLctSessionPollingFlag, xldv20Dsx1ConfigTable=xldv20Dsx1ConfigTable, Xldv20EthNtMode=Xldv20EthNtMode, xldv20VdcPsdMaskCfg=xldv20VdcPsdMaskCfg, xldv20PltControlStatus=xldv20PltControlStatus, xldv20AdcMaxRateDnCfg=xldv20AdcMaxRateDnCfg, xldv20InbandVpiConfig=xldv20InbandVpiConfig, Xldv20Requester=Xldv20Requester, xldv20TvAlmSpecProblemText=xldv20TvAlmSpecProblemText, xldv20TvCACProblemType=xldv20TvCACProblemType, xldv20PiuUpgradeResult=xldv20PiuUpgradeResult, xldv20TrSnmAgentRunning=xldv20TrSnmAgentRunning, xldv20DbuControlReq=xldv20DbuControlReq, xldv20ImaGroupMappingTable=xldv20ImaGroupMappingTable, xldv20HwPlugInUnitTable=xldv20HwPlugInUnitTable, Xldv20Latency=Xldv20Latency, xldv20SdcTransceiverOutputPower=xldv20SdcTransceiverOutputPower, xldv20SnmControlReqResult=xldv20SnmControlReqResult, xldv20Swm=xldv20Swm, xldv20SdcCtrlIfIndex=xldv20SdcCtrlIfIndex, xldv20TrCmuReadyForReset=xldv20TrCmuReadyForReset, xldv20CvpTestType=xldv20CvpTestType, xldv20ImaLinkRxStuffs=xldv20ImaLinkRxStuffs, xldv20ImaGroupGammaValue=xldv20ImaGroupGammaValue, xldv20S1nPathTraceSendDefault=xldv20S1nPathTraceSendDefault, xldv20AlarmFilteringProfileEntry=xldv20AlarmFilteringProfileEntry, xldv20AltOamLevel=xldv20AltOamLevel, xldv20TvHwContainedUnitAddr=xldv20TvHwContainedUnitAddr, xldv20TvSnmMibVersion=xldv20TvSnmMibVersion, xldv20AtmNe=xldv20AtmNe, xldv20SdcCtrlControlStatus=xldv20SdcCtrlControlStatus, xldv20TvVciValue=xldv20TvVciValue, xldv20SnmTmnMaxNumber=xldv20SnmTmnMaxNumber, xldv20SdcPPTPEntry=xldv20SdcPPTPEntry, xldv20TvVplTpIndex=xldv20TvVplTpIndex, xldv20TrReplaceableUnitTypeMismatch=xldv20TrReplaceableUnitTypeMismatch, xldv20TrRfiIma=xldv20TrRfiIma, xldv20TrVclCACProblem=xldv20TrVclCACProblem, xldv20ActSegmentEndPointNni=xldv20ActSegmentEndPointNni, xldv20VpcAlarmFilteringIndex=xldv20VpcAlarmFilteringIndex, xldv20AdcCtrlLatencyDn=xldv20AdcCtrlLatencyDn, xldv20VclMaximumBurstSizeDownstream=xldv20VclMaximumBurstSizeDownstream, xldv20VdcMaxRateDnCfg=xldv20VdcMaxRateDnCfg, xldv20TlmOam=xldv20TlmOam, xldv20ImaGroupBandwidthUsage=xldv20ImaGroupBandwidthUsage, xldv20DbuResultFilePath=xldv20DbuResultFilePath, Xldv20VdcRateUp=Xldv20VdcRateUp, xldv20DbuControlReqResult=xldv20DbuControlReqResult, xldv20ContinuityCheckControl=xldv20ContinuityCheckControl, xldv20SnmTmnTrapFlowControl=xldv20SnmTmnTrapFlowControl, xldv20LbpLoopLocId=xldv20LbpLoopLocId, xldv20AdcMinMarginDnCfg=xldv20AdcMinMarginDnCfg, xldv20ImaGroupEntry=xldv20ImaGroupEntry, xldv20S1nPathTraceTIMDetectionActivate=xldv20S1nPathTraceTIMDetectionActivate, xldv20ActCellDelayVariationToleranceDownstream=xldv20ActCellDelayVariationToleranceDownstream, xldv20RiControlTimeStamp=xldv20RiControlTimeStamp, DisplayString=DisplayString, xldv20SutTaskTableEntry=xldv20SutTaskTableEntry, xldv20ActSustainableCellRateUpstream=xldv20ActSustainableCellRateUpstream, Xldv20TerminalType=Xldv20TerminalType, xldv20VplSegmentEndPoint=xldv20VplSegmentEndPoint, xldv20VplTrafficDirection=xldv20VplTrafficDirection, xldv20VpcCvpIndexEndToEnd=xldv20VpcCvpIndexEndToEnd, Xldv20TrapIds=Xldv20TrapIds, Xldv20TpAlarmState=Xldv20TpAlarmState, xldv20VclTrafficDirection=xldv20VclTrafficDirection, xldv20TvStcOldAvailStatus=xldv20TvStcOldAvailStatus, xldv20TrHpUNEQ=xldv20TrHpUNEQ, xldv20TrLol=xldv20TrLol, xldv20VplLineIndex=xldv20VplLineIndex, xldv20VccAISAlarm=xldv20VccAISAlarm, xldv20AdcLatencyUpCfg=xldv20AdcLatencyUpCfg, xldv20VpcIfIndex=xldv20VpcIfIndex, xldv20TvVplIfIndex=xldv20TvVplIfIndex, xldv20ExtAlarmAdminState=xldv20ExtAlarmAdminState, xldv20TrLif=xldv20TrLif, xldv20AlmControlReq=xldv20AlmControlReq, xldv20ImaGroupMinNumTxLinks=xldv20ImaGroupMinNumTxLinks, xldv20ImaGroupFeState=xldv20ImaGroupFeState, xldv20VplVbrCDVTUpstream=xldv20VplVbrCDVTUpstream, xldv20RstControlTimeStamp=xldv20RstControlTimeStamp, xldv20TvStcOldOperStatus=xldv20TvStcOldOperStatus, xldv20ActSegmentEndPointNt=xldv20ActSegmentEndPointNt, xldv20VccLineIndex=xldv20VccLineIndex, xldv20CvpOperationalState=xldv20CvpOperationalState, xldv20ImaGroupUnavailSecs=xldv20ImaGroupUnavailSecs, xldv20AltControlTimeStamp=xldv20AltControlTimeStamp, xldv20TrConfigAbortFe=xldv20TrConfigAbortFe, xldv20AdcPPTPTable=xldv20AdcPPTPTable, xldv20HwmHwUnitIndex=xldv20HwmHwUnitIndex, xldv20ImaGroupLastChange=xldv20ImaGroupLastChange, xldv20InbandVciCurrent=xldv20InbandVciCurrent, xldv20S3nPathTraceReceive=xldv20S3nPathTraceReceive, xldv20VplMaximumBurstSizeUpstream=xldv20VplMaximumBurstSizeUpstream, xldv20AdcCtrlIfIndex=xldv20AdcCtrlIfIndex, xldv20HwUnitTable=xldv20HwUnitTable, xldv20AdcLastUsedSubCarrierUpstream=xldv20AdcLastUsedSubCarrierUpstream, xldv20TvHweResetType=xldv20TvHweResetType, xldv20HwEquipEntry=xldv20HwEquipEntry, xldv20CocEndpointType=xldv20CocEndpointType, xldv20TvRiRemInvResult=xldv20TvRiRemInvResult, xldv20TrStateChangeAdmin=xldv20TrStateChangeAdmin, xldv20SwUpgradeTaskTable=xldv20SwUpgradeTaskTable, xldv20VcxAtmfVplIndex=xldv20VcxAtmfVplIndex, xldv20EquConnectedPiuIndex=xldv20EquConnectedPiuIndex, xldv20IfAlarmFilteringIndex=xldv20IfAlarmFilteringIndex, xldv20S1nHpEberThreshold=xldv20S1nHpEberThreshold, xldv20AlmFiltProfileIndex=xldv20AlmFiltProfileIndex, xldv20ImaLinkTxLid=xldv20ImaLinkTxLid, xldv20TrReplaceableUnitUnplugged=xldv20TrReplaceableUnitUnplugged, xldv20TrLop=xldv20TrLop, xldv20HwContainmentEntry=xldv20HwContainmentEntry, xldv20VccHwUnitIndex=xldv20VccHwUnitIndex, xldv20EthIpAddressCo=xldv20EthIpAddressCo, xldv20SutIndex=xldv20SutIndex, xldv20S3nPathTraceReceiveCRCActivate=xldv20S3nPathTraceReceiveCRCActivate, xldv20TvEthVpcTpIndex=xldv20TvEthVpcTpIndex, xldv20ImaLinkNeRxUnusableSecs=xldv20ImaLinkNeRxUnusableSecs, xldv20TrLOC=xldv20TrLOC, xldv20CvcEndpointType=xldv20CvcEndpointType, Xldv20ImaGroupFailureStatus=Xldv20ImaGroupFailureStatus, xldv20SucControlTimeStamp=xldv20SucControlTimeStamp, Xldv20DayLightSavingTime=Xldv20DayLightSavingTime, xldv20HwuUnitIndex=xldv20HwuUnitIndex, xldv20VccRDIAlarm=xldv20VccRDIAlarm, xldv20TvVpcTpIfIndex=xldv20TvVpcTpIfIndex, xldv20EquConnectedPiuPort=xldv20EquConnectedPiuPort, xldv20D3nEmptyCellType=xldv20D3nEmptyCellType, xldv20IbmVpAISFiltering=xldv20IbmVpAISFiltering, xldv20AdcCtrlMinRateUp=xldv20AdcCtrlMinRateUp, xldv20E3nTrailTraceSendDefault=xldv20E3nTrailTraceSendDefault, xldv20ImaGroupNumRxCfgLinks=xldv20ImaGroupNumRxCfgLinks, xldv20TrTelnetSession=xldv20TrTelnetSession, xldv20CocControlStatus=xldv20CocControlStatus, xldv20ImaLinkNeUnavailSecs=xldv20ImaLinkNeUnavailSecs, xldv20SdcRateCfg=xldv20SdcRateCfg, xldv20SucVersionNo=xldv20SucVersionNo, xldv20ActVbrCDVTUpstream=xldv20ActVbrCDVTUpstream, xldv20VdcCtrlPowerAdaptation=xldv20VdcCtrlPowerAdaptation, xldv20ActTestTypeUni=xldv20ActTestTypeUni, xldv20TvSnmLctSession=xldv20TvSnmLctSession, xldv20TrLcd=xldv20TrLcd, xldv20EqhSlotStatus=xldv20EqhSlotStatus, Xldv20VdcRateDn=Xldv20VdcRateDn, xldv20RstLevel=xldv20RstLevel, xldv20AdcCtrlMinMarginUp=xldv20AdcCtrlMinMarginUp, xldv20VclVpcIndex=xldv20VclVpcIndex, xldv20SucHwUnitIndex=xldv20SucHwUnitIndex, xldv20ImaLinkFeTxNumFailures=xldv20ImaLinkFeTxNumFailures, xldv20VclOperationalState=xldv20VclOperationalState, xldv20SnmLctTrapFlowControl=xldv20SnmLctTrapFlowControl, xldv20CvcIndex=xldv20CvcIndex, xldv20TrLos=xldv20TrLos, xldv20VdcLatencyUpCfg=xldv20VdcLatencyUpCfg, xldv20VplOperationalState=xldv20VplOperationalState, xldv20VdcCtrlVdslMode=xldv20VdcCtrlVdslMode, xldv20ImaGroupTxImaId=xldv20ImaGroupTxImaId, xldv20AdcAttenuationUp=xldv20AdcAttenuationUp, xldv20AtmCrossConnectTable=xldv20AtmCrossConnectTable, xldv20TmnOrLctTerminal=xldv20TmnOrLctTerminal, xldv20PiuAvailStatus=xldv20PiuAvailStatus, xldv20TvAlmPropRepairAction=xldv20TvAlmPropRepairAction, xldv20VccCvcIndexSegment=xldv20VccCvcIndexSegment, xldv20TrImmMNR=xldv20TrImmMNR, xldv20EthIpAddressSubnetMaskCo=xldv20EthIpAddressSubnetMaskCo, xldv20AlarmSeverityEntry=xldv20AlarmSeverityEntry, xldv20VpcAtmfVplIndex=xldv20VpcAtmfVplIndex, xldv20TmnInOrOutBand=xldv20TmnInOrOutBand, xldv20AlarmListTable=xldv20AlarmListTable, xldv20DbmBackupStartTime=xldv20DbmBackupStartTime, xldv20VplConnectivityPointer=xldv20VplConnectivityPointer, xldv20ActVpiNni=xldv20ActVpiNni, xldv20TrXmissionErr=xldv20TrXmissionErr, xldv20AlarmSeverityProfileEntry=xldv20AlarmSeverityProfileEntry, xldv20SdcGuaranteedBandwidthUsage=xldv20SdcGuaranteedBandwidthUsage, xldv20TrUnitUpgradeNotRequested=xldv20TrUnitUpgradeNotRequested, xldv20ImaLinkOifAnomalies=xldv20ImaLinkOifAnomalies, xldv20TvAlmSeverityOfFailure=xldv20TvAlmSeverityOfFailure, Xldv20TvTelnetSessionStatus=Xldv20TvTelnetSessionStatus, xldv20VplTpEntry=xldv20VplTpEntry, xldv20AlmFailedComponent=xldv20AlmFailedComponent, xldv20AccTerminationPointZ=xldv20AccTerminationPointZ, xldv20TrVplCcDeletion=xldv20TrVplCcDeletion, xldv20ImaControlStatus=xldv20ImaControlStatus, xldv20NeSummerTime=xldv20NeSummerTime, xldv20ImaGroupNeTxClkMode=xldv20ImaGroupNeTxClkMode, xldv20SnmLctConnected=xldv20SnmLctConnected, xldv20VpcVbrCDVTDownstream=xldv20VpcVbrCDVTDownstream, xldv20Dsx1LoopbackConfig=xldv20Dsx1LoopbackConfig, xldv20S3nHpEberThreshold=xldv20S3nHpEberThreshold, xldv20AlmControlStatus=xldv20AlmControlStatus, Xldv20XdslInitStatus=Xldv20XdslInitStatus, xldv20AccVpiNniIndex=xldv20AccVpiNniIndex, xldv20EqhSwVersion=xldv20EqhSwVersion, xldv20AdcCtrlControlReqResult=xldv20AdcCtrlControlReqResult, Xldv20AlarmSeverity=Xldv20AlarmSeverity, xldv20ActEthIpAddressNt=xldv20ActEthIpAddressNt, xldv20AccLineIndex=xldv20AccLineIndex, xldv20CvcObjectType=xldv20CvcObjectType, xldv20RstControlStatus=xldv20RstControlStatus, Xldv20ImaGroupState=Xldv20ImaGroupState, xldv20VcxAdminState=xldv20VcxAdminState, xldv20VpcNumberOfVcs=xldv20VpcNumberOfVcs, xldv20AdcRateDn=xldv20AdcRateDn, xldv20TvEthIfIndex=xldv20TvEthIfIndex, xldv20TrStartupEnd=xldv20TrStartupEnd, xldv20VclTpTable=xldv20VclTpTable, xldv20VccIndex=xldv20VccIndex, xldv20SutSwVersion=xldv20SutSwVersion, Unsigned16=Unsigned16, xldv20S3nPathTraceSendCRCActivate=xldv20S3nPathTraceSendCRCActivate, xldv20SnmControlStatus=xldv20SnmControlStatus, xldv20NeExternalTime45020=xldv20NeExternalTime45020, xldv20HwuControlTimeStamp=xldv20HwuControlTimeStamp, xldv20AdcCtrlTrainingMode=xldv20AdcCtrlTrainingMode, xldv20TvHwContainingUnitIndex=xldv20TvHwContainingUnitIndex, xldv20ActCDVTAutoConfig=xldv20ActCDVTAutoConfig, xldv20EqhRiMnemoCode=xldv20EqhRiMnemoCode, xldv20VdcCtrlMinRateUp=xldv20VdcCtrlMinRateUp, xldv20ImaLinkFeRxState=xldv20ImaLinkFeRxState, xldv20S3nLineType=xldv20S3nLineType, xldv20ExtAlarmOperState=xldv20ExtAlarmOperState, xldv20ExtAlarmActivityState=xldv20ExtAlarmActivityState, xldv20HwuEqhType=xldv20HwuEqhType, xldv20AdcAttenuationDn=xldv20AdcAttenuationDn, xldv20HwPlugInUnitEntry=xldv20HwPlugInUnitEntry, xldv20ExternalAlarmsTable=xldv20ExternalAlarmsTable, xldv20ImaGroupMappingEntry=xldv20ImaGroupMappingEntry, xldv20SucControlReq=xldv20SucControlReq, Xldv20E3nPayloadType=Xldv20E3nPayloadType, xldv20VplCellDelayVariationToleranceUpstream=xldv20VplCellDelayVariationToleranceUpstream, Xldv20ResetLevel=Xldv20ResetLevel, xldv20AdcPPTPEntry=xldv20AdcPPTPEntry, xldv20ActSustainableCellRateDownstream=xldv20ActSustainableCellRateDownstream)
mibBuilder.exportSymbols("XLDV20-MIB", xldv20PltControlReqResult=xldv20PltControlReqResult, xldv20ImaLinkNeTxUnusableSecs=xldv20ImaLinkNeTxUnusableSecs, xldv20AdcMarginDn=xldv20AdcMarginDn, Xldv20SucAllOfType=Xldv20SucAllOfType, xldv20CocObjectType=xldv20CocObjectType, xldv20VdcPowerAdaptationCfg=xldv20VdcPowerAdaptationCfg, xldv20ImaLinkNeRxState=xldv20ImaLinkNeRxState, xldv20SnmCallpPollingFlag=xldv20SnmCallpPollingFlag, xldv20D3nCodingType=xldv20D3nCodingType, xldv20SdcCtrlMinMarginUp=xldv20SdcCtrlMinMarginUp, xldv20VccAlarmFilteringIndex=xldv20VccAlarmFilteringIndex, xldv20RiHwUnitIndex=xldv20RiHwUnitIndex, xldv20VclPeakCellRateDownstream=xldv20VclPeakCellRateDownstream, xldv20NeVendor=xldv20NeVendor, xldv20VclVpiValue=xldv20VclVpiValue, xldv20VdcCtrlControlStatus=xldv20VdcCtrlControlStatus, xldv20EthE164Isp=xldv20EthE164Isp, xldv20VdcAttenuationDn=xldv20VdcAttenuationDn, xldv20SucPathName=xldv20SucPathName, xldv20AdcGuaranteedBandwidthUsage=xldv20AdcGuaranteedBandwidthUsage, xldv20ActEthIpAddressSubnetMaskCo=xldv20ActEthIpAddressSubnetMaskCo, xldv20AdcXdslServiceType=xldv20AdcXdslServiceType, xldv20HwUnitEntry=xldv20HwUnitEntry, Xldv20ImaFrameLength=Xldv20ImaFrameLength, xldv20ActTestTypeNt=xldv20ActTestTypeNt, Xldv20SnmLctSession=Xldv20SnmLctSession, xldv20EthIpAddressNt=xldv20EthIpAddressNt, xldv20TrUpgradeEndRequestResult=xldv20TrUpgradeEndRequestResult, xldv20TvStcNewOperStatus=xldv20TvStcNewOperStatus, xldv20TrRxUnusableFe=xldv20TrRxUnusableFe, xldv20SucUnit=xldv20SucUnit, xldv20ImaLinkNeRxNumFailures=xldv20ImaLinkNeRxNumFailures, xldv20Tlm=xldv20Tlm, xldv20TrRemInvReady=xldv20TrRemInvReady, xldv20VccTpEntry=xldv20VccTpEntry, Xldv20AdslMinMargin=Xldv20AdslMinMargin, xldv20TrObjCreate=xldv20TrObjCreate, xldv20VplIfIndex=xldv20VplIfIndex, xldv20VpcSustainableCellRateUpstream=xldv20VpcSustainableCellRateUpstream, xldv20VdcCtrlPsdMask=xldv20VdcCtrlPsdMask, xldv20D3nPayloadScramblingActivate=xldv20D3nPayloadScramblingActivate, xldv20TrUnitReadyForReset=xldv20TrUnitReadyForReset, xldv20AdcCtrlControlStatus=xldv20AdcCtrlControlStatus, xldv20ImaGroupRxFrameLength=xldv20ImaGroupRxFrameLength, xldv20VcxAlarmState=xldv20VcxAlarmState, xldv20VpcLOCAlarm=xldv20VpcLOCAlarm, xldv20AlarmSeverityProfileTable=xldv20AlarmSeverityProfileTable, xldv20TvVclTerminationPointZ=xldv20TvVclTerminationPointZ, xldv20VclAlarmFilteringIndex=xldv20VclAlarmFilteringIndex, xldv20ImaGroupAlphaValue=xldv20ImaGroupAlphaValue, xldv20VcxEthVpcIndex=xldv20VcxEthVpcIndex, xldv20AccAdminState=xldv20AccAdminState, xldv20Dsx1Fdl=xldv20Dsx1Fdl, xldv20TrInsufficientLinks=xldv20TrInsufficientLinks, Xldv20FlowDirection=Xldv20FlowDirection, xldv20VplVpiValue=xldv20VplVpiValue, xldv20SutUpgradeResult=xldv20SutUpgradeResult, Xldv20ImaGroupTxClkMode=Xldv20ImaGroupTxClkMode, xldv20ImaGroupTable=xldv20ImaGroupTable, xldv20SucControlTimer=xldv20SucControlTimer, Xldv20EmptyCellType=Xldv20EmptyCellType, xldv20TrActFault=xldv20TrActFault, xldv20IfHwUnitIndex=xldv20IfHwUnitIndex, Xldv20OperState=Xldv20OperState, xldv20VclMaximumBurstSizeUpstream=xldv20VclMaximumBurstSizeUpstream, xldv20HwEquipTable=xldv20HwEquipTable, xldv20VclSustainableCellRateUpstream=xldv20VclSustainableCellRateUpstream, xldv20ImaGroupFeNumFailures=xldv20ImaGroupFeNumFailures, xldv20ImaLinkFeRxUnusableSecs=xldv20ImaLinkFeRxUnusableSecs, xldv20VpcTpEntry=xldv20VpcTpEntry, xldv20VclPeakCellRateUpstream=xldv20VclPeakCellRateUpstream, xldv20ImaGroupNumber=xldv20ImaGroupNumber, xldv20DbmControlReqResultLocal=xldv20DbmControlReqResultLocal, xldv20AtmCrossConnectEntry=xldv20AtmCrossConnectEntry, xldv20AtmLoopTest=xldv20AtmLoopTest, xldv20AlmControlReqResult=xldv20AlmControlReqResult, xldv20TrContinuityCheckVcEntryDeleted=xldv20TrContinuityCheckVcEntryDeleted, Xldv20IfType=Xldv20IfType, xldv20SutTimeStamp=xldv20SutTimeStamp, xldv20TrPuUpgradeSucc=xldv20TrPuUpgradeSucc, xldv20SnmpControl=xldv20SnmpControl, xldv20ImaControlReqResult=xldv20ImaControlReqResult, xldv20AdcAISOnACT=xldv20AdcAISOnACT, xldv20AdcLastUsedSubCarrierDownstream=xldv20AdcLastUsedSubCarrierDownstream, xldv20VclTpEntry=xldv20VclTpEntry, xldv20VclLOCAlarm=xldv20VclLOCAlarm, xldv20TmnTrapFlowControl=xldv20TmnTrapFlowControl, xldv20TvDbuSwTraceLogReadResult=xldv20TvDbuSwTraceLogReadResult, xldv20S1nPathTraceSend=xldv20S1nPathTraceSend, xldv20TvSucFileName=xldv20TvSucFileName, xldv20TrVclCcCreation=xldv20TrVclCcCreation, xldv20ExtAlarmIndex=xldv20ExtAlarmIndex, xldv20TrVclCcDeletion=xldv20TrVclCcDeletion, xldv20ImaLinkTable=xldv20ImaLinkTable, xldv20TrLods=xldv20TrLods, Xldv20TimeZone=Xldv20TimeZone, xldv20TrInsufficientLinksFe=xldv20TrInsufficientLinksFe, Xldv20VdcLatencyUp=Xldv20VdcLatencyUp, xldv20VdcPPTPEntry=xldv20VdcPPTPEntry, xldv20CvpObjectType=xldv20CvpObjectType, xldv20EqhFwCode=xldv20EqhFwCode, xldv20HwuControlTimer=xldv20HwuControlTimer, xldv20TvRstHwUnitIndex=xldv20TvRstHwUnitIndex, xldv20ActControlStatus=xldv20ActControlStatus, Xldv20AdcTrainingMode=Xldv20AdcTrainingMode, xldv20VplAlarmFilteringIndex=xldv20VplAlarmFilteringIndex, xldv20SutRequester=xldv20SutRequester, xldv20=xldv20, xldv20ImaLinkRowStatus=xldv20ImaLinkRowStatus, xldv20TrContinuityCheckVpEntryCreated=xldv20TrContinuityCheckVpEntryCreated, xldv20AdcFirstUsedSubCarrierDownstream=xldv20AdcFirstUsedSubCarrierDownstream, xldv20VdcCtrlWarmStart=xldv20VdcCtrlWarmStart, Xldv20AlmSevProfileIndex=Xldv20AlmSevProfileIndex, xldv20TmnConnected=xldv20TmnConnected, xldv20S1nSDThreshold=xldv20S1nSDThreshold, xldv20AtmCcControl=xldv20AtmCcControl, xldv20SdcRate=xldv20SdcRate, xldv20HwuEquType=xldv20HwuEquType, xldv20TrReplaceableUnitNotInstalled=xldv20TrReplaceableUnitNotInstalled, xldv20AdcMarginUpCfg=xldv20AdcMarginUpCfg, xldv20TrReplaceableUnitPlugged=xldv20TrReplaceableUnitPlugged, xldv20AlmFiltProfileRowStatus=xldv20AlmFiltProfileRowStatus, xldv20ActCellDelayVariationToleranceUpstream=xldv20ActCellDelayVariationToleranceUpstream, xldv20TrMsExcBER=xldv20TrMsExcBER, Xldv20AvailStatus=Xldv20AvailStatus, xldv20TrDbBackup=xldv20TrDbBackup, xldv20AccAlarmState=xldv20AccAlarmState, xldv20LbpEntry=xldv20LbpEntry, xldv20TrVpcTpDeletion=xldv20TrVpcTpDeletion, xldv20ActEthMode=xldv20ActEthMode, xldv20ExternalAlarmEntry=xldv20ExternalAlarmEntry, xldv20TrReplaceableUnitSwMismatch=xldv20TrReplaceableUnitSwMismatch, xldv20VpcEmSpecific=xldv20VpcEmSpecific, xldv20VplHwUnitIndex=xldv20VplHwUnitIndex, xldv20SdcAISOnLOS=xldv20SdcAISOnLOS, xldv20AdcCtrlXdslServiceType=xldv20AdcCtrlXdslServiceType, xldv20VpcTrafficDirection=xldv20VpcTrafficDirection, xldv20VdcLinkState=xldv20VdcLinkState, xldv20LoopBackPointTable=xldv20LoopBackPointTable, xldv20S1nMsEberThreshold=xldv20S1nMsEberThreshold, xldv20SucNumberOfTraps=xldv20SucNumberOfTraps, xldv20TvVpcUniIndex=xldv20TvVpcUniIndex, xldv20ImaLinkFeRxNumFailures=xldv20ImaLinkFeRxNumFailures, xldv20AltLoopLocId=xldv20AltLoopLocId, xldv20RiControlReqResult=xldv20RiControlReqResult, xldv20TrPlcpLof=xldv20TrPlcpLof, xldv20TrReplaceableUnitFailure=xldv20TrReplaceableUnitFailure, xldv20EthIpAddressRemoteRouter=xldv20EthIpAddressRemoteRouter, Xldv20VdcVdslMode=Xldv20VdcVdslMode, xldv20IbmPPTPTable=xldv20IbmPPTPTable, xldv20ActVbrCDVTDownstream=xldv20ActVbrCDVTDownstream, xldv20TrReplaceableUnitReset=xldv20TrReplaceableUnitReset, xldv20TrLctSession=xldv20TrLctSession, xldv20DbmPathAndFileName=xldv20DbmPathAndFileName, Xldv20SdslServiceType=Xldv20SdslServiceType, xldv20TrSweLogRead=xldv20TrSweLogRead, xldv20VplTpTable=xldv20VplTpTable, xldv20VdcMarginUp=xldv20VdcMarginUp, xldv20TvVplTerminationPointA=xldv20TvVplTerminationPointA, xldv20AlmSevTrapId=xldv20AlmSevTrapId, xldv20VplCvpIndexSegment=xldv20VplCvpIndexSegment, xldv20EqhRiFwIssue=xldv20EqhRiFwIssue, xldv20EqhRiHwIssue=xldv20EqhRiHwIssue, xldv20AdcTransceiverOutputPower=xldv20AdcTransceiverOutputPower, xldv20ImaGroupFailureStatus=xldv20ImaGroupFailureStatus, xldv20TvVpcTpIndex=xldv20TvVpcTpIndex, xldv20SwmUpgradeControl=xldv20SwmUpgradeControl, xldv20TrStartUpFe=xldv20TrStartUpFe, xldv20TvSucHwUnitIndex=xldv20TvSucHwUnitIndex, xldv20PltControlTimer=xldv20PltControlTimer, xldv20AdcXdslServiceTypeCfg=xldv20AdcXdslServiceTypeCfg, xldv20RiResultFilePath=xldv20RiResultFilePath, xldv20ImaGroupMappingIndex=xldv20ImaGroupMappingIndex, xldv20EqhRiSerialNumber=xldv20EqhRiSerialNumber, xldv20AdcLatencyDnCfg=xldv20AdcLatencyDnCfg, xldv20ActTrafficDirection=xldv20ActTrafficDirection, xldv20AccEthVccIndex=xldv20AccEthVccIndex, xldv20AlarmListEntry=xldv20AlarmListEntry, xldv20AccTerminationPointA=xldv20AccTerminationPointA, xldv20TrRsExcBER=xldv20TrRsExcBER, Xldv20LogType=Xldv20LogType, xldv20CocIndex=xldv20CocIndex, xldv20Alarming=xldv20Alarming, xldv20ImaGroupTxFrameLength=xldv20ImaGroupTxFrameLength, Xldv20StartupResult=Xldv20StartupResult, xldv20AdcCtrlMinRateDn=xldv20AdcCtrlMinRateDn, xldv20ActEthIpAddressSubnetMaskNt=xldv20ActEthIpAddressSubnetMaskNt, xldv20AdcCtrlMarginUp=xldv20AdcCtrlMarginUp, xldv20TvActCcReloadResult=xldv20TvActCcReloadResult, Xldv20AdslDataRateUpCurrent=Xldv20AdslDataRateUpCurrent, xldv20E3nTrailTraceSend=xldv20E3nTrailTraceSend, xldv20SdcCtrlControlReq=xldv20SdcCtrlControlReq, xldv20ActVciUni=xldv20ActVciUni, xldv20TrDbRestore=xldv20TrDbRestore, xldv20ImaGroupRowStatus=xldv20ImaGroupRowStatus, xldv20ImaLinkEntry=xldv20ImaLinkEntry, xldv20S3nRsEberThreshold=xldv20S3nRsEberThreshold, xldv20TmnEntry=xldv20TmnEntry, xldv20TrPltTestResult=xldv20TrPltTestResult, Xldv20LinkState=Xldv20LinkState, xldv20Dsx1SignalMode=xldv20Dsx1SignalMode, xldv20E3nType=xldv20E3nType, xldv20TvRepEntity=xldv20TvRepEntity, xldv20TvAlmFailedComponent=xldv20TvAlmFailedComponent, xldv20TvRstResult=xldv20TvRstResult, xldv20SdcCtrlRate=xldv20SdcCtrlRate, xldv20TrAltTestResult=xldv20TrAltTestResult, xldv20IfOperState=xldv20IfOperState, xldv20ImaGroupNumTxActLinks=xldv20ImaGroupNumTxActLinks, xldv20VclIndex=xldv20VclIndex, xldv20DbmControl=xldv20DbmControl, xldv20SucPrePredecessorSwVersion=xldv20SucPrePredecessorSwVersion, xldv20VpcAlarmSeverityIndex=xldv20VpcAlarmSeverityIndex, Xldv20TestType=Xldv20TestType, xldv20PhyLoopTest=xldv20PhyLoopTest)
