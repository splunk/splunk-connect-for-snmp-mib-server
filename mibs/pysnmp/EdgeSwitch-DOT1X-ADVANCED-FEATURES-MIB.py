#
# PySNMP MIB module EdgeSwitch-DOT1X-ADVANCED-FEATURES-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/EdgeSwitch-DOT1X-ADVANCED-FEATURES-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 18:56:10 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, Integer, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "OctetString", "Integer", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueRangeConstraint, SingleValueConstraint, ConstraintsUnion, ConstraintsIntersection, ValueSizeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueRangeConstraint", "SingleValueConstraint", "ConstraintsUnion", "ConstraintsIntersection", "ValueSizeConstraint")
fastPath, = mibBuilder.importSymbols("EdgeSwitch-REF-MIB", "fastPath")
dot1xPaePortNumber, = mibBuilder.importSymbols("IEEE8021-PAE-MIB", "dot1xPaePortNumber")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
ModuleIdentity, iso, IpAddress, Integer32, Counter64, ObjectIdentity, NotificationType, Bits, Counter32, Gauge32, MibIdentifier, MibScalar, MibTable, MibTableRow, MibTableColumn, Unsigned32, TimeTicks = mibBuilder.importSymbols("SNMPv2-SMI", "ModuleIdentity", "iso", "IpAddress", "Integer32", "Counter64", "ObjectIdentity", "NotificationType", "Bits", "Counter32", "Gauge32", "MibIdentifier", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Unsigned32", "TimeTicks")
DateAndTime, TextualConvention, RowStatus, MacAddress, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "DateAndTime", "TextualConvention", "RowStatus", "MacAddress", "DisplayString")
fastPathdot1xAdvanced = ModuleIdentity((1, 3, 6, 1, 4, 1, 4413, 1, 1, 36))
fastPathdot1xAdvanced.setRevisions(('2011-01-26 00:00', '2007-05-23 00:00',))
if mibBuilder.loadTexts: fastPathdot1xAdvanced.setLastUpdated('201101260000Z')
if mibBuilder.loadTexts: fastPathdot1xAdvanced.setOrganization('Broadcom Inc')
class Dot1xPortControlMode(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))
    namedValues = NamedValues(("forceUnauthorized", 1), ("auto", 2), ("forceAuthorized", 3), ("macBased", 4))

class Dot1xSessionTerminationAction(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2))
    namedValues = NamedValues(("default", 1), ("reauthenticate", 2))

agentDot1xEnhancementConfigGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 4413, 1, 1, 36, 1))
agentDot1xRadiusVlanAssignment = MibScalar((1, 3, 6, 1, 4, 1, 4413, 1, 1, 36, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentDot1xRadiusVlanAssignment.setStatus('current')
agentDot1xDynamicVlanCreationMode = MibScalar((1, 3, 6, 1, 4, 1, 4413, 1, 1, 36, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentDot1xDynamicVlanCreationMode.setStatus('current')
agentDot1xEapolFloodMode = MibScalar((1, 3, 6, 1, 4, 1, 4413, 1, 1, 36, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentDot1xEapolFloodMode.setStatus('current')
agentDot1xPortConfigGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 4413, 1, 1, 36, 2))
agentDot1xPortConfigTable = MibTable((1, 3, 6, 1, 4, 1, 4413, 1, 1, 36, 2, 1), )
if mibBuilder.loadTexts: agentDot1xPortConfigTable.setStatus('current')
agentDot1xPortConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4413, 1, 1, 36, 2, 1, 1), ).setIndexNames((0, "IEEE8021-PAE-MIB", "dot1xPaePortNumber"))
if mibBuilder.loadTexts: agentDot1xPortConfigEntry.setStatus('current')
agentDot1xPortControlMode = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 36, 2, 1, 1, 1), Dot1xPortControlMode().clone('auto')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentDot1xPortControlMode.setStatus('current')
agentDot1xGuestVlanId = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 36, 2, 1, 1, 2), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentDot1xGuestVlanId.setStatus('current')
agentDot1xGuestVlanPeriod = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 36, 2, 1, 1, 3), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 300)).clone(90)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentDot1xGuestVlanPeriod.setStatus('current')
agentDot1xUnauthenticatedVlan = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 36, 2, 1, 1, 4), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentDot1xUnauthenticatedVlan.setStatus('current')
agentDot1xMaxUsers = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 36, 2, 1, 1, 5), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentDot1xMaxUsers.setStatus('current')
agentDot1xPortVlanAssigned = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 36, 2, 1, 1, 6), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentDot1xPortVlanAssigned.setStatus('current')
agentDot1xPortVlanAssignedReason = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 36, 2, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("default", 1), ("radius", 2), ("unauthenticatedVlan", 3), ("guestVlan", 4), ("voiceVlan", 5), ("monitorVlan", 6), ("notAssigned", 7))).clone(5)).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentDot1xPortVlanAssignedReason.setStatus('current')
agentDot1xPortSessionTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 36, 2, 1, 1, 8), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentDot1xPortSessionTimeout.setStatus('current')
agentDot1xPortTerminationAction = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 36, 2, 1, 1, 9), Dot1xSessionTerminationAction().clone(1)).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentDot1xPortTerminationAction.setStatus('current')
agentDot1xPortMABenabled = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 36, 2, 1, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone(2)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentDot1xPortMABenabled.setStatus('current')
agentDot1xPortMABenabledOperational = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 36, 2, 1, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone(2)).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentDot1xPortMABenabledOperational.setStatus('current')
agentDot1xClientConfigGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 4413, 1, 1, 36, 3))
agentDot1xClientConfigTable = MibTable((1, 3, 6, 1, 4, 1, 4413, 1, 1, 36, 3, 1), )
if mibBuilder.loadTexts: agentDot1xClientConfigTable.setStatus('current')
agentDot1xClientConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4413, 1, 1, 36, 3, 1, 1), ).setIndexNames((0, "EdgeSwitch-DOT1X-ADVANCED-FEATURES-MIB", "agentDot1xClientMacAddress"))
if mibBuilder.loadTexts: agentDot1xClientConfigEntry.setStatus('current')
agentDot1xClientMacAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 36, 3, 1, 1, 1), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentDot1xClientMacAddress.setStatus('current')
agentDot1xLogicalPort = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 36, 3, 1, 1, 2), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentDot1xLogicalPort.setStatus('current')
agentDot1xInterface = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 36, 3, 1, 1, 3), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentDot1xInterface.setStatus('current')
agentDot1xClientAuthPAEstate = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 36, 3, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9))).clone(namedValues=NamedValues(("initialize", 1), ("disconnected", 2), ("connecting", 3), ("authenticating", 4), ("authenticated", 5), ("aborting", 6), ("held", 7), ("forceAuth", 8), ("forceUnauth", 9)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentDot1xClientAuthPAEstate.setStatus('current')
agentDot1xClientBackendState = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 36, 3, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("request", 1), ("response", 2), ("success", 3), ("fail", 4), ("timeout", 5), ("idle", 6), ("initialize", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentDot1xClientBackendState.setStatus('current')
agentDot1xClientUserName = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 36, 3, 1, 1, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentDot1xClientUserName.setStatus('current')
agentDot1xClientSessionTime = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 36, 3, 1, 1, 7), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentDot1xClientSessionTime.setStatus('current')
agentDot1xClientFilterID = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 36, 3, 1, 1, 8), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentDot1xClientFilterID.setStatus('current')
agentDot1xClientVlanAssigned = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 36, 3, 1, 1, 9), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentDot1xClientVlanAssigned.setStatus('current')
agentDot1xClientVlanAssignedReason = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 36, 3, 1, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 6, 7))).clone(namedValues=NamedValues(("default", 1), ("radius", 2), ("unauthenticatedVlan", 3), ("monitorVlan", 6), ("invalid", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentDot1xClientVlanAssignedReason.setStatus('current')
agentDot1xClientSessionTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 36, 3, 1, 1, 11), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentDot1xClientSessionTimeout.setStatus('current')
agentDot1xClientTerminationAction = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 36, 3, 1, 1, 12), Dot1xSessionTerminationAction()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentDot1xClientTerminationAction.setStatus('current')
agentDot1xMonitorModeConfigGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 4413, 1, 1, 36, 4))
agentDot1xMonitorModeEnabled = MibScalar((1, 3, 6, 1, 4, 1, 4413, 1, 1, 36, 4, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentDot1xMonitorModeEnabled.setStatus('current')
agentDot1xMonitorModeClients = MibScalar((1, 3, 6, 1, 4, 1, 4413, 1, 1, 36, 4, 2), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentDot1xMonitorModeClients.setStatus('current')
agentDot1xNonMonitorModeClients = MibScalar((1, 3, 6, 1, 4, 1, 4413, 1, 1, 36, 4, 3), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentDot1xNonMonitorModeClients.setStatus('current')
agentDot1xAuthHistoryResultsGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 4413, 1, 1, 36, 5))
agentDot1xPortAuthHistoryResultTable = MibTable((1, 3, 6, 1, 4, 1, 4413, 1, 1, 36, 5, 1), )
if mibBuilder.loadTexts: agentDot1xPortAuthHistoryResultTable.setStatus('current')
agentDot1xPortAuthHistoryResultEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4413, 1, 1, 36, 5, 1, 1), ).setIndexNames((0, "EdgeSwitch-DOT1X-ADVANCED-FEATURES-MIB", "agentDot1xAuthHistoryResultIfaceIndex"), (0, "EdgeSwitch-DOT1X-ADVANCED-FEATURES-MIB", "agentDot1xAuthHistoryResultIndex"))
if mibBuilder.loadTexts: agentDot1xPortAuthHistoryResultEntry.setStatus('current')
agentDot1xAuthHistoryResultIfaceIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 36, 5, 1, 1, 1), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentDot1xAuthHistoryResultIfaceIndex.setStatus('current')
agentDot1xAuthHistoryResultIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 36, 5, 1, 1, 2), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentDot1xAuthHistoryResultIndex.setStatus('current')
agentDot1xAuthHistoryResultTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 36, 5, 1, 1, 3), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentDot1xAuthHistoryResultTimeStamp.setStatus('current')
agentDot1xAuthHistoryResultAge = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 36, 5, 1, 1, 4), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentDot1xAuthHistoryResultAge.setStatus('current')
agentDot1xAuthHistoryResultMacAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 36, 5, 1, 1, 5), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentDot1xAuthHistoryResultMacAddress.setStatus('current')
agentDot1xAuthHistoryResultVlanId = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 36, 5, 1, 1, 6), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentDot1xAuthHistoryResultVlanId.setStatus('current')
agentDot1xAuthHistoryResultAuthStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 36, 5, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("success", 1), ("failure", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentDot1xAuthHistoryResultAuthStatus.setStatus('current')
agentDot1xAuthHistoryResultAccessStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 36, 5, 1, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("granted", 1), ("denied", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentDot1xAuthHistoryResultAccessStatus.setStatus('current')
agentDot1xAuthHistoryResultFilterID = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 36, 5, 1, 1, 9), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentDot1xAuthHistoryResultFilterID.setStatus('current')
agentDot1xAuthHistoryResultVlanAssigned = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 36, 5, 1, 1, 10), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentDot1xAuthHistoryResultVlanAssigned.setStatus('current')
agentDot1xAuthHistoryResultVlanAssignedType = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 36, 5, 1, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("default", 1), ("radius", 2), ("unauthenticatedVlan", 3), ("guestVlan", 4), ("voiceVlan", 5), ("monitorVlan", 6), ("notAssigned", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentDot1xAuthHistoryResultVlanAssignedType.setStatus('current')
agentDot1xAuthHistoryResultReasonCode = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 36, 5, 1, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30))).clone(namedValues=NamedValues(("supplicant-timeout", 1), ("eapol-timeout", 2), ("radius-request-timeout", 3), ("radius-auth-failure", 4), ("radius-auth-comm-failure", 5), ("radius-challenge-process-invalid-nas-port", 6), ("radius-challenge-process-wrong-eap-msg", 7), ("radius-request-send-msg-error", 8), ("radius-accept-process-invalid-nas-port", 9), ("radius-accept-process-wrong-eap-msg", 10), ("radius-accept-filter-assignment-failure", 11), ("radius-accept-diffserv-not-present", 12), ("radius-accept-vlan-assignment-failure", 13), ("vlan-assignment-feature-not-enabled", 14), ("radius-success", 15), ("local-auth-user-not-found", 16), ("local-auth-user-no-access", 17), ("local-auth-md5-validation-failure", 18), ("local-auth-invalid-eap-type", 19), ("local-failure", 20), ("local-success", 21), ("radius-invalid-radius-status", 22), ("guest-vlan-timer-expiry", 23), ("undefined-auth-method", 24), ("reject-auth-method", 25), ("invalid-auth-method", 26), ("auth-method-not-configured", 27), ("unauth-vlan-not-created", 28), ("guest-vlan-not-created", 29), ("radius-accept-invalid-vlan-failure", 30)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentDot1xAuthHistoryResultReasonCode.setStatus('current')
agentDot1xAuthHistoryResultsClear = MibScalar((1, 3, 6, 1, 4, 1, 4413, 1, 1, 36, 5, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentDot1xAuthHistoryResultsClear.setStatus('current')
agentDot1xPortAuthHistoryResultClearTable = MibTable((1, 3, 6, 1, 4, 1, 4413, 1, 1, 36, 5, 3), )
if mibBuilder.loadTexts: agentDot1xPortAuthHistoryResultClearTable.setStatus('current')
agentDot1xPortAuthHistoryResultClearEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4413, 1, 1, 36, 5, 3, 1), ).setIndexNames((0, "EdgeSwitch-DOT1X-ADVANCED-FEATURES-MIB", "agentDot1xAuthHistoryResultIfIndex"))
if mibBuilder.loadTexts: agentDot1xPortAuthHistoryResultClearEntry.setStatus('current')
agentDot1xAuthHistoryResultIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 36, 5, 3, 1, 1), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentDot1xAuthHistoryResultIfIndex.setStatus('current')
agentDot1xPortAuthHistoryResultsClear = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 36, 5, 3, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentDot1xPortAuthHistoryResultsClear.setStatus('current')
mibBuilder.exportSymbols("EdgeSwitch-DOT1X-ADVANCED-FEATURES-MIB", agentDot1xGuestVlanId=agentDot1xGuestVlanId, PYSNMP_MODULE_ID=fastPathdot1xAdvanced, agentDot1xAuthHistoryResultTimeStamp=agentDot1xAuthHistoryResultTimeStamp, agentDot1xAuthHistoryResultVlanAssignedType=agentDot1xAuthHistoryResultVlanAssignedType, Dot1xPortControlMode=Dot1xPortControlMode, agentDot1xMonitorModeEnabled=agentDot1xMonitorModeEnabled, agentDot1xClientFilterID=agentDot1xClientFilterID, agentDot1xDynamicVlanCreationMode=agentDot1xDynamicVlanCreationMode, agentDot1xAuthHistoryResultFilterID=agentDot1xAuthHistoryResultFilterID, agentDot1xAuthHistoryResultIfIndex=agentDot1xAuthHistoryResultIfIndex, agentDot1xPortAuthHistoryResultsClear=agentDot1xPortAuthHistoryResultsClear, agentDot1xClientAuthPAEstate=agentDot1xClientAuthPAEstate, agentDot1xPortVlanAssigned=agentDot1xPortVlanAssigned, agentDot1xMaxUsers=agentDot1xMaxUsers, agentDot1xPortConfigGroup=agentDot1xPortConfigGroup, fastPathdot1xAdvanced=fastPathdot1xAdvanced, agentDot1xAuthHistoryResultsGroup=agentDot1xAuthHistoryResultsGroup, agentDot1xAuthHistoryResultIndex=agentDot1xAuthHistoryResultIndex, agentDot1xAuthHistoryResultReasonCode=agentDot1xAuthHistoryResultReasonCode, agentDot1xAuthHistoryResultMacAddress=agentDot1xAuthHistoryResultMacAddress, agentDot1xPortAuthHistoryResultClearTable=agentDot1xPortAuthHistoryResultClearTable, agentDot1xAuthHistoryResultAge=agentDot1xAuthHistoryResultAge, agentDot1xLogicalPort=agentDot1xLogicalPort, agentDot1xClientTerminationAction=agentDot1xClientTerminationAction, agentDot1xClientConfigEntry=agentDot1xClientConfigEntry, agentDot1xAuthHistoryResultVlanAssigned=agentDot1xAuthHistoryResultVlanAssigned, agentDot1xMonitorModeClients=agentDot1xMonitorModeClients, agentDot1xEnhancementConfigGroup=agentDot1xEnhancementConfigGroup, agentDot1xClientUserName=agentDot1xClientUserName, agentDot1xAuthHistoryResultAccessStatus=agentDot1xAuthHistoryResultAccessStatus, agentDot1xClientConfigGroup=agentDot1xClientConfigGroup, agentDot1xGuestVlanPeriod=agentDot1xGuestVlanPeriod, agentDot1xNonMonitorModeClients=agentDot1xNonMonitorModeClients, agentDot1xAuthHistoryResultVlanId=agentDot1xAuthHistoryResultVlanId, agentDot1xPortAuthHistoryResultClearEntry=agentDot1xPortAuthHistoryResultClearEntry, agentDot1xClientConfigTable=agentDot1xClientConfigTable, agentDot1xPortAuthHistoryResultTable=agentDot1xPortAuthHistoryResultTable, agentDot1xAuthHistoryResultsClear=agentDot1xAuthHistoryResultsClear, agentDot1xPortTerminationAction=agentDot1xPortTerminationAction, Dot1xSessionTerminationAction=Dot1xSessionTerminationAction, agentDot1xPortMABenabledOperational=agentDot1xPortMABenabledOperational, agentDot1xInterface=agentDot1xInterface, agentDot1xUnauthenticatedVlan=agentDot1xUnauthenticatedVlan, agentDot1xClientVlanAssignedReason=agentDot1xClientVlanAssignedReason, agentDot1xEapolFloodMode=agentDot1xEapolFloodMode, agentDot1xPortConfigEntry=agentDot1xPortConfigEntry, agentDot1xClientMacAddress=agentDot1xClientMacAddress, agentDot1xAuthHistoryResultAuthStatus=agentDot1xAuthHistoryResultAuthStatus, agentDot1xPortVlanAssignedReason=agentDot1xPortVlanAssignedReason, agentDot1xPortAuthHistoryResultEntry=agentDot1xPortAuthHistoryResultEntry, agentDot1xAuthHistoryResultIfaceIndex=agentDot1xAuthHistoryResultIfaceIndex, agentDot1xRadiusVlanAssignment=agentDot1xRadiusVlanAssignment, agentDot1xPortConfigTable=agentDot1xPortConfigTable, agentDot1xClientSessionTime=agentDot1xClientSessionTime, agentDot1xClientBackendState=agentDot1xClientBackendState, agentDot1xClientVlanAssigned=agentDot1xClientVlanAssigned, agentDot1xClientSessionTimeout=agentDot1xClientSessionTimeout, agentDot1xPortControlMode=agentDot1xPortControlMode, agentDot1xPortSessionTimeout=agentDot1xPortSessionTimeout, agentDot1xPortMABenabled=agentDot1xPortMABenabled, agentDot1xMonitorModeConfigGroup=agentDot1xMonitorModeConfigGroup)
