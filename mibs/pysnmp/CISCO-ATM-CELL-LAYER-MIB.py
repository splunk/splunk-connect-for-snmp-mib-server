#
# PySNMP MIB module CISCO-ATM-CELL-LAYER-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/CISCO-ATM-CELL-LAYER-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 17:33:04 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, Integer, OctetString = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "Integer", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsIntersection, ValueRangeConstraint, ConstraintsUnion, SingleValueConstraint, ValueSizeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsIntersection", "ValueRangeConstraint", "ConstraintsUnion", "SingleValueConstraint", "ValueSizeConstraint")
ciscoMgmt, = mibBuilder.importSymbols("CISCO-SMI", "ciscoMgmt")
ifIndex, = mibBuilder.importSymbols("IF-MIB", "ifIndex")
NotificationGroup, ObjectGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ObjectGroup", "ModuleCompliance")
TimeTicks, MibScalar, MibTable, MibTableRow, MibTableColumn, Gauge32, MibIdentifier, ObjectIdentity, Integer32, NotificationType, Counter32, Unsigned32, IpAddress, ModuleIdentity, iso, Bits, Counter64 = mibBuilder.importSymbols("SNMPv2-SMI", "TimeTicks", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Gauge32", "MibIdentifier", "ObjectIdentity", "Integer32", "NotificationType", "Counter32", "Unsigned32", "IpAddress", "ModuleIdentity", "iso", "Bits", "Counter64")
TruthValue, TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TruthValue", "TextualConvention", "DisplayString")
ciscoAtmCellLayerMIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 9, 9, 133))
ciscoAtmCellLayerMIB.setRevisions(('2002-06-28 00:00', '2000-05-02 00:00', '1999-05-03 00:00',))
if mibBuilder.loadTexts: ciscoAtmCellLayerMIB.setLastUpdated('200206280000Z')
if mibBuilder.loadTexts: ciscoAtmCellLayerMIB.setOrganization('Cisco Systems, Inc.')
ciscoAtmCellLayerMIBObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 133, 1))
caclConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 133, 1, 1))
caclStats = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 133, 1, 2))
caclConfigTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 133, 1, 1, 1), )
if mibBuilder.loadTexts: caclConfigTable.setStatus('current')
caclConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 133, 1, 1, 1, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: caclConfigEntry.setStatus('current')
caclNullCellHeader = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 133, 1, 1, 1, 1, 1), OctetString().subtype(subtypeSpec=ValueSizeConstraint(4, 4)).setFixedLength(4)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: caclNullCellHeader.setStatus('current')
caclNullCellPayload = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 133, 1, 1, 1, 1, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 255)).clone(106)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: caclNullCellPayload.setStatus('current')
caclHecCosetEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 133, 1, 1, 1, 1, 3), TruthValue().clone('true')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: caclHecCosetEnable.setStatus('current')
caclPayloadScramblingEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 133, 1, 1, 1, 1, 4), TruthValue().clone('true')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: caclPayloadScramblingEnable.setStatus('current')
caclTimeElapsed = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 133, 1, 1, 1, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 899))).setMaxAccess("readonly")
if mibBuilder.loadTexts: caclTimeElapsed.setStatus('current')
caclValidIntervals = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 133, 1, 1, 1, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 96))).setMaxAccess("readonly")
if mibBuilder.loadTexts: caclValidIntervals.setStatus('current')
caclInvalidIntervals = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 133, 1, 1, 1, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 96))).setMaxAccess("readonly")
if mibBuilder.loadTexts: caclInvalidIntervals.setStatus('current')
caclStatsTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 133, 1, 2, 1), )
if mibBuilder.loadTexts: caclStatsTable.setStatus('current')
caclStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 133, 1, 2, 1, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: caclStatsEntry.setStatus('current')
caclInRcvCLP0Cells = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 133, 1, 2, 1, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: caclInRcvCLP0Cells.setStatus('current')
caclInRcvCLP1Cells = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 133, 1, 2, 1, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: caclInRcvCLP1Cells.setStatus('current')
caclInValidOAMCells = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 133, 1, 2, 1, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: caclInValidOAMCells.setStatus('current')
caclInErrOAMCells = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 133, 1, 2, 1, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: caclInErrOAMCells.setStatus('current')
caclInGfcCells = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 133, 1, 2, 1, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: caclInGfcCells.setStatus('current')
caclInVpiVciErrCells = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 133, 1, 2, 1, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: caclInVpiVciErrCells.setStatus('current')
caclInLastUnknVpi = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 133, 1, 2, 1, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4095))).setMaxAccess("readonly")
if mibBuilder.loadTexts: caclInLastUnknVpi.setStatus('current')
caclInLastUnknVci = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 133, 1, 2, 1, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: caclInLastUnknVci.setStatus('current')
caclInXmtCLP0Cells = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 133, 1, 2, 1, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: caclInXmtCLP0Cells.setStatus('current')
caclInXmtCLP1Cells = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 133, 1, 2, 1, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: caclInXmtCLP1Cells.setStatus('current')
caclInValidRMCells = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 133, 1, 2, 1, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: caclInValidRMCells.setStatus('current')
caclInRcvIdleCells = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 133, 1, 2, 1, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: caclInRcvIdleCells.setStatus('current')
caclInHecErrDiscCells = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 133, 1, 2, 1, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: caclInHecErrDiscCells.setStatus('current')
caclInHecErrCorrectedCells = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 133, 1, 2, 1, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: caclInHecErrCorrectedCells.setStatus('current')
caclInUpcCLP0DiscCells = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 133, 1, 2, 1, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: caclInUpcCLP0DiscCells.setStatus('current')
caclInUpcTotalDiscCells = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 133, 1, 2, 1, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: caclInUpcTotalDiscCells.setStatus('current')
caclInUpcTotalNonCompCells = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 133, 1, 2, 1, 1, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: caclInUpcTotalNonCompCells.setStatus('current')
caclOutXmtCLP0Cells = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 133, 1, 2, 1, 1, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: caclOutXmtCLP0Cells.setStatus('current')
caclOutXmtCLP1Cells = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 133, 1, 2, 1, 1, 19), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: caclOutXmtCLP1Cells.setStatus('current')
caclOutValidOAMCells = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 133, 1, 2, 1, 1, 20), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: caclOutValidOAMCells.setStatus('current')
caclOutErrOAMCells = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 133, 1, 2, 1, 1, 21), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: caclOutErrOAMCells.setStatus('current')
caclOutVpiVciErrCells = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 133, 1, 2, 1, 1, 22), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: caclOutVpiVciErrCells.setStatus('current')
caclOutRcvCLP0Cells = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 133, 1, 2, 1, 1, 23), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: caclOutRcvCLP0Cells.setStatus('current')
caclOutRcvCLP1Cells = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 133, 1, 2, 1, 1, 24), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: caclOutRcvCLP1Cells.setStatus('current')
caclOutRcvValidRMCells = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 133, 1, 2, 1, 1, 25), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: caclOutRcvValidRMCells.setStatus('current')
caclOutRcvIdleCells = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 133, 1, 2, 1, 1, 26), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: caclOutRcvIdleCells.setStatus('current')
caclHInRcvCLP0Cells = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 133, 1, 2, 1, 1, 27), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: caclHInRcvCLP0Cells.setStatus('current')
caclHInRcvCLP1Cells = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 133, 1, 2, 1, 1, 28), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: caclHInRcvCLP1Cells.setStatus('current')
caclHOutXmtCLP0Cells = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 133, 1, 2, 1, 1, 29), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: caclHOutXmtCLP0Cells.setStatus('current')
caclHOutXmtCLP1Cells = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 133, 1, 2, 1, 1, 30), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: caclHOutXmtCLP1Cells.setStatus('current')
caclHighInRcvCLP0Cells = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 133, 1, 2, 1, 1, 31), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: caclHighInRcvCLP0Cells.setStatus('current')
caclHighInRcvCLP1Cells = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 133, 1, 2, 1, 1, 32), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: caclHighInRcvCLP1Cells.setStatus('current')
caclHighInValidOAMCells = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 133, 1, 2, 1, 1, 33), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: caclHighInValidOAMCells.setStatus('current')
caclHighInVpiVciErrCells = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 133, 1, 2, 1, 1, 34), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: caclHighInVpiVciErrCells.setStatus('current')
caclHighInXmtCLP0Cells = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 133, 1, 2, 1, 1, 35), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: caclHighInXmtCLP0Cells.setStatus('current')
caclHighInXmtCLP1Cells = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 133, 1, 2, 1, 1, 36), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: caclHighInXmtCLP1Cells.setStatus('current')
caclHighInHecErrDiscCells = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 133, 1, 2, 1, 1, 37), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: caclHighInHecErrDiscCells.setStatus('current')
caclHighInHecErrCorrectedCells = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 133, 1, 2, 1, 1, 38), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: caclHighInHecErrCorrectedCells.setStatus('current')
caclHighOutXmtCLP0Cells = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 133, 1, 2, 1, 1, 39), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: caclHighOutXmtCLP0Cells.setStatus('current')
caclHighOutXmtCLP1Cells = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 133, 1, 2, 1, 1, 40), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: caclHighOutXmtCLP1Cells.setStatus('current')
caclHighOutValidOAMCells = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 133, 1, 2, 1, 1, 41), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: caclHighOutValidOAMCells.setStatus('current')
caclHighOutRcvCLP0Cells = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 133, 1, 2, 1, 1, 42), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: caclHighOutRcvCLP0Cells.setStatus('current')
caclHighOutRcvCLP1Cells = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 133, 1, 2, 1, 1, 43), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: caclHighOutRcvCLP1Cells.setStatus('current')
caclIntervalStatsTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 133, 1, 2, 2), )
if mibBuilder.loadTexts: caclIntervalStatsTable.setStatus('current')
caclIntervalStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 133, 1, 2, 2, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "CISCO-ATM-CELL-LAYER-MIB", "caclIntervalNumber"))
if mibBuilder.loadTexts: caclIntervalStatsEntry.setStatus('current')
caclIntervalNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 133, 1, 2, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 96)))
if mibBuilder.loadTexts: caclIntervalNumber.setStatus('current')
caclIntervalInRcvCLP0Cells = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 133, 1, 2, 2, 1, 2), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: caclIntervalInRcvCLP0Cells.setStatus('current')
caclIntervalInRcvCLP1Cells = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 133, 1, 2, 2, 1, 3), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: caclIntervalInRcvCLP1Cells.setStatus('current')
caclIntervalInValidOAMCells = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 133, 1, 2, 2, 1, 4), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: caclIntervalInValidOAMCells.setStatus('current')
caclIntervalInErrOAMCells = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 133, 1, 2, 2, 1, 5), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: caclIntervalInErrOAMCells.setStatus('current')
caclIntervalInGfcCells = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 133, 1, 2, 2, 1, 6), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: caclIntervalInGfcCells.setStatus('current')
caclIntervalInVpiVciErrCells = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 133, 1, 2, 2, 1, 7), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: caclIntervalInVpiVciErrCells.setStatus('current')
caclIntervalInLastUnknVpi = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 133, 1, 2, 2, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4095))).setMaxAccess("readonly")
if mibBuilder.loadTexts: caclIntervalInLastUnknVpi.setStatus('current')
caclIntervalInLastUnknVci = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 133, 1, 2, 2, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: caclIntervalInLastUnknVci.setStatus('current')
caclIntervalInXmtCLP0Cells = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 133, 1, 2, 2, 1, 10), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: caclIntervalInXmtCLP0Cells.setStatus('current')
caclIntervalInXmtCLP1Cells = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 133, 1, 2, 2, 1, 11), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: caclIntervalInXmtCLP1Cells.setStatus('current')
caclIntervalInValidRMCells = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 133, 1, 2, 2, 1, 12), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: caclIntervalInValidRMCells.setStatus('current')
caclIntervalInRcvIdleCells = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 133, 1, 2, 2, 1, 13), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: caclIntervalInRcvIdleCells.setStatus('current')
caclIntervalInHecErrDiscCells = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 133, 1, 2, 2, 1, 14), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: caclIntervalInHecErrDiscCells.setStatus('current')
caclIntervalInHecErrCorrCells = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 133, 1, 2, 2, 1, 15), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: caclIntervalInHecErrCorrCells.setStatus('current')
caclIntervalInUpcCLP0DiscCells = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 133, 1, 2, 2, 1, 16), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: caclIntervalInUpcCLP0DiscCells.setStatus('current')
caclIntervalInUpcTotalDiscCells = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 133, 1, 2, 2, 1, 17), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: caclIntervalInUpcTotalDiscCells.setStatus('current')
caclIntervalInUpcTotNonCmpCells = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 133, 1, 2, 2, 1, 18), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: caclIntervalInUpcTotNonCmpCells.setStatus('current')
caclIntervalOutXmtCLP0Cells = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 133, 1, 2, 2, 1, 19), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: caclIntervalOutXmtCLP0Cells.setStatus('current')
caclIntervalOutXmtCLP1Cells = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 133, 1, 2, 2, 1, 20), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: caclIntervalOutXmtCLP1Cells.setStatus('current')
caclIntervalOutValidOAMCells = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 133, 1, 2, 2, 1, 21), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: caclIntervalOutValidOAMCells.setStatus('current')
caclIntervalOutErrOAMCells = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 133, 1, 2, 2, 1, 22), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: caclIntervalOutErrOAMCells.setStatus('current')
caclIntervalOutVpiVciErrCells = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 133, 1, 2, 2, 1, 23), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: caclIntervalOutVpiVciErrCells.setStatus('current')
caclIntervalOutRcvCLP0Cells = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 133, 1, 2, 2, 1, 24), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: caclIntervalOutRcvCLP0Cells.setStatus('current')
caclIntervalOutRcvCLP1Cells = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 133, 1, 2, 2, 1, 25), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: caclIntervalOutRcvCLP1Cells.setStatus('current')
caclIntervalOutRcvValidRMCells = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 133, 1, 2, 2, 1, 26), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: caclIntervalOutRcvValidRMCells.setStatus('current')
caclIntervalOutRcvIdleCells = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 133, 1, 2, 2, 1, 27), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: caclIntervalOutRcvIdleCells.setStatus('current')
caclHighIntervalInRcvCLP0Cells = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 133, 1, 2, 2, 1, 28), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: caclHighIntervalInRcvCLP0Cells.setStatus('current')
caclHighIntervalInRcvCLP1Cells = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 133, 1, 2, 2, 1, 29), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: caclHighIntervalInRcvCLP1Cells.setStatus('current')
caclHighIntervalInVpiVciErrCells = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 133, 1, 2, 2, 1, 30), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: caclHighIntervalInVpiVciErrCells.setStatus('current')
caclHighIntervalInXmtCLP0Cells = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 133, 1, 2, 2, 1, 31), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: caclHighIntervalInXmtCLP0Cells.setStatus('current')
caclHighIntervalInXmtCLP1Cells = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 133, 1, 2, 2, 1, 32), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: caclHighIntervalInXmtCLP1Cells.setStatus('current')
caclHighIntervalInHecErrDiscCells = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 133, 1, 2, 2, 1, 33), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: caclHighIntervalInHecErrDiscCells.setStatus('current')
caclHighIntervalInHecErrCorrCells = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 133, 1, 2, 2, 1, 34), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: caclHighIntervalInHecErrCorrCells.setStatus('current')
caclHighIntervalOutXmtCLP0Cells = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 133, 1, 2, 2, 1, 35), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: caclHighIntervalOutXmtCLP0Cells.setStatus('current')
caclHighIntervalOutXmtCLP1Cells = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 133, 1, 2, 2, 1, 36), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: caclHighIntervalOutXmtCLP1Cells.setStatus('current')
caclHighIntervalOutVpiVciErrCells = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 133, 1, 2, 2, 1, 37), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: caclHighIntervalOutVpiVciErrCells.setStatus('current')
caclHighIntervalOutRcvCLP0Cells = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 133, 1, 2, 2, 1, 38), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: caclHighIntervalOutRcvCLP0Cells.setStatus('current')
caclHighIntervalOutRcvCLP1Cells = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 133, 1, 2, 2, 1, 39), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: caclHighIntervalOutRcvCLP1Cells.setStatus('current')
caclXStatsTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 133, 1, 2, 3), )
if mibBuilder.loadTexts: caclXStatsTable.setStatus('current')
caclXStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 133, 1, 2, 3, 1), )
caclStatsEntry.registerAugmentions(("CISCO-ATM-CELL-LAYER-MIB", "caclXStatsEntry"))
caclXStatsEntry.setIndexNames(*caclStatsEntry.getIndexNames())
if mibBuilder.loadTexts: caclXStatsEntry.setStatus('current')
caclHCInValidOAMCells = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 133, 1, 2, 3, 1, 1), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: caclHCInValidOAMCells.setStatus('current')
caclHCInVpiVciErrCells = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 133, 1, 2, 3, 1, 2), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: caclHCInVpiVciErrCells.setStatus('current')
caclHCInXmtCLP0Cells = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 133, 1, 2, 3, 1, 3), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: caclHCInXmtCLP0Cells.setStatus('current')
caclHCInXmtCLP1Cells = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 133, 1, 2, 3, 1, 4), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: caclHCInXmtCLP1Cells.setStatus('current')
caclHCInHecErrDiscCells = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 133, 1, 2, 3, 1, 5), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: caclHCInHecErrDiscCells.setStatus('current')
caclHCInHecErrCorrectedCells = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 133, 1, 2, 3, 1, 6), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: caclHCInHecErrCorrectedCells.setStatus('current')
caclHCOutValidOAMCells = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 133, 1, 2, 3, 1, 7), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: caclHCOutValidOAMCells.setStatus('current')
caclHCOutRcvCLP0Cells = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 133, 1, 2, 3, 1, 8), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: caclHCOutRcvCLP0Cells.setStatus('current')
caclHCOutRcvCLP1Cells = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 133, 1, 2, 3, 1, 9), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: caclHCOutRcvCLP1Cells.setStatus('current')
caclXIntervalStatsTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 133, 1, 2, 4), )
if mibBuilder.loadTexts: caclXIntervalStatsTable.setStatus('current')
caclXIntervalStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 133, 1, 2, 4, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "CISCO-ATM-CELL-LAYER-MIB", "caclIntervalNumber"))
if mibBuilder.loadTexts: caclXIntervalStatsEntry.setStatus('current')
caclHCIntervalInRcvCLP0Cells = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 133, 1, 2, 4, 1, 1), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: caclHCIntervalInRcvCLP0Cells.setStatus('current')
caclHCIntervalInRcvCLP1Cells = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 133, 1, 2, 4, 1, 2), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: caclHCIntervalInRcvCLP1Cells.setStatus('current')
caclHCIntervalInVpiVciErrCells = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 133, 1, 2, 4, 1, 3), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: caclHCIntervalInVpiVciErrCells.setStatus('current')
caclHCIntervalInXmtCLP0Cells = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 133, 1, 2, 4, 1, 4), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: caclHCIntervalInXmtCLP0Cells.setStatus('current')
caclHCIntervalInXmtCLP1Cells = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 133, 1, 2, 4, 1, 5), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: caclHCIntervalInXmtCLP1Cells.setStatus('current')
caclHCIntervalInHecErrDiscCells = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 133, 1, 2, 4, 1, 6), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: caclHCIntervalInHecErrDiscCells.setStatus('current')
caclHCIntervalInHecErrCorrCells = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 133, 1, 2, 4, 1, 7), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: caclHCIntervalInHecErrCorrCells.setStatus('current')
caclHCIntervalOutXmtCLP0Cells = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 133, 1, 2, 4, 1, 8), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: caclHCIntervalOutXmtCLP0Cells.setStatus('current')
caclHCIntervalOutXmtCLP1Cells = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 133, 1, 2, 4, 1, 9), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: caclHCIntervalOutXmtCLP1Cells.setStatus('current')
caclHCIntervalOutVpiVciErrCells = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 133, 1, 2, 4, 1, 10), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: caclHCIntervalOutVpiVciErrCells.setStatus('current')
caclHCIntervalOutRcvCLP0Cells = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 133, 1, 2, 4, 1, 11), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: caclHCIntervalOutRcvCLP0Cells.setStatus('current')
caclHCIntervalOutRcvCLP1Cells = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 133, 1, 2, 4, 1, 12), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: caclHCIntervalOutRcvCLP1Cells.setStatus('current')
caclMIBConformance = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 133, 1, 3))
caclMIBCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 133, 1, 3, 1))
caclMIBGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 133, 1, 3, 2))
caclMIBCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 9, 9, 133, 1, 3, 1, 1)).setObjects(("CISCO-ATM-CELL-LAYER-MIB", "caclMIBGroup"), ("CISCO-ATM-CELL-LAYER-MIB", "caclATMSwitchStatsMIBGroup"), ("CISCO-ATM-CELL-LAYER-MIB", "caclATMEndSyatemStatsMIBGroup"), ("CISCO-ATM-CELL-LAYER-MIB", "caclHighSpeedATMMIBGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    caclMIBCompliance = caclMIBCompliance.setStatus('deprecated')
caclMIBCompliance1 = ModuleCompliance((1, 3, 6, 1, 4, 1, 9, 9, 133, 1, 3, 1, 2)).setObjects(("CISCO-ATM-CELL-LAYER-MIB", "caclMIBGroup"), ("CISCO-ATM-CELL-LAYER-MIB", "caclATMSwitchStatsMIBGroup1"), ("CISCO-ATM-CELL-LAYER-MIB", "caclATMStatsMIBGroup"), ("CISCO-ATM-CELL-LAYER-MIB", "caclHighSpeedATMMIBGroup1"), ("CISCO-ATM-CELL-LAYER-MIB", "caclIntervalStatsMIBGroup1"), ("CISCO-ATM-CELL-LAYER-MIB", "caclHCIntervalStatsMIBGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    caclMIBCompliance1 = caclMIBCompliance1.setStatus('current')
caclMIBGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 133, 1, 3, 2, 1)).setObjects(("CISCO-ATM-CELL-LAYER-MIB", "caclNullCellHeader"), ("CISCO-ATM-CELL-LAYER-MIB", "caclNullCellPayload"), ("CISCO-ATM-CELL-LAYER-MIB", "caclHecCosetEnable"), ("CISCO-ATM-CELL-LAYER-MIB", "caclPayloadScramblingEnable"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    caclMIBGroup = caclMIBGroup.setStatus('current')
caclATMSwitchStatsMIBGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 133, 1, 3, 2, 2)).setObjects(("CISCO-ATM-CELL-LAYER-MIB", "caclInRcvCLP0Cells"), ("CISCO-ATM-CELL-LAYER-MIB", "caclInRcvCLP1Cells"), ("CISCO-ATM-CELL-LAYER-MIB", "caclInValidOAMCells"), ("CISCO-ATM-CELL-LAYER-MIB", "caclInErrOAMCells"), ("CISCO-ATM-CELL-LAYER-MIB", "caclInGfcCells"), ("CISCO-ATM-CELL-LAYER-MIB", "caclInVpiVciErrCells"), ("CISCO-ATM-CELL-LAYER-MIB", "caclInLastUnknVpi"), ("CISCO-ATM-CELL-LAYER-MIB", "caclInLastUnknVci"), ("CISCO-ATM-CELL-LAYER-MIB", "caclInXmtCLP0Cells"), ("CISCO-ATM-CELL-LAYER-MIB", "caclInXmtCLP1Cells"), ("CISCO-ATM-CELL-LAYER-MIB", "caclInValidRMCells"), ("CISCO-ATM-CELL-LAYER-MIB", "caclInRcvIdleCells"), ("CISCO-ATM-CELL-LAYER-MIB", "caclInHecErrDiscCells"), ("CISCO-ATM-CELL-LAYER-MIB", "caclInHecErrCorrectedCells"), ("CISCO-ATM-CELL-LAYER-MIB", "caclInUpcCLP0DiscCells"), ("CISCO-ATM-CELL-LAYER-MIB", "caclInUpcTotalDiscCells"), ("CISCO-ATM-CELL-LAYER-MIB", "caclInUpcTotalNonCompCells"), ("CISCO-ATM-CELL-LAYER-MIB", "caclOutXmtCLP0Cells"), ("CISCO-ATM-CELL-LAYER-MIB", "caclOutXmtCLP1Cells"), ("CISCO-ATM-CELL-LAYER-MIB", "caclOutValidOAMCells"), ("CISCO-ATM-CELL-LAYER-MIB", "caclOutErrOAMCells"), ("CISCO-ATM-CELL-LAYER-MIB", "caclOutVpiVciErrCells"), ("CISCO-ATM-CELL-LAYER-MIB", "caclOutRcvCLP0Cells"), ("CISCO-ATM-CELL-LAYER-MIB", "caclOutRcvCLP1Cells"), ("CISCO-ATM-CELL-LAYER-MIB", "caclOutRcvValidRMCells"), ("CISCO-ATM-CELL-LAYER-MIB", "caclOutRcvIdleCells"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    caclATMSwitchStatsMIBGroup = caclATMSwitchStatsMIBGroup.setStatus('deprecated')
caclATMEndSyatemStatsMIBGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 133, 1, 3, 2, 3)).setObjects(("CISCO-ATM-CELL-LAYER-MIB", "caclInRcvCLP0Cells"), ("CISCO-ATM-CELL-LAYER-MIB", "caclInRcvCLP1Cells"), ("CISCO-ATM-CELL-LAYER-MIB", "caclInValidOAMCells"), ("CISCO-ATM-CELL-LAYER-MIB", "caclInErrOAMCells"), ("CISCO-ATM-CELL-LAYER-MIB", "caclInGfcCells"), ("CISCO-ATM-CELL-LAYER-MIB", "caclInVpiVciErrCells"), ("CISCO-ATM-CELL-LAYER-MIB", "caclInLastUnknVpi"), ("CISCO-ATM-CELL-LAYER-MIB", "caclInLastUnknVci"), ("CISCO-ATM-CELL-LAYER-MIB", "caclInValidRMCells"), ("CISCO-ATM-CELL-LAYER-MIB", "caclInRcvIdleCells"), ("CISCO-ATM-CELL-LAYER-MIB", "caclInHecErrDiscCells"), ("CISCO-ATM-CELL-LAYER-MIB", "caclInHecErrCorrectedCells"), ("CISCO-ATM-CELL-LAYER-MIB", "caclInUpcCLP0DiscCells"), ("CISCO-ATM-CELL-LAYER-MIB", "caclInUpcTotalDiscCells"), ("CISCO-ATM-CELL-LAYER-MIB", "caclInUpcTotalNonCompCells"), ("CISCO-ATM-CELL-LAYER-MIB", "caclOutXmtCLP0Cells"), ("CISCO-ATM-CELL-LAYER-MIB", "caclOutXmtCLP1Cells"), ("CISCO-ATM-CELL-LAYER-MIB", "caclOutValidOAMCells"), ("CISCO-ATM-CELL-LAYER-MIB", "caclOutErrOAMCells"), ("CISCO-ATM-CELL-LAYER-MIB", "caclOutVpiVciErrCells"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    caclATMEndSyatemStatsMIBGroup = caclATMEndSyatemStatsMIBGroup.setStatus('deprecated')
caclHighSpeedATMMIBGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 133, 1, 3, 2, 4)).setObjects(("CISCO-ATM-CELL-LAYER-MIB", "caclHInRcvCLP0Cells"), ("CISCO-ATM-CELL-LAYER-MIB", "caclHInRcvCLP1Cells"), ("CISCO-ATM-CELL-LAYER-MIB", "caclHOutXmtCLP0Cells"), ("CISCO-ATM-CELL-LAYER-MIB", "caclHOutXmtCLP1Cells"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    caclHighSpeedATMMIBGroup = caclHighSpeedATMMIBGroup.setStatus('deprecated')
caclIntervalStatsMIBGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 133, 1, 3, 2, 5)).setObjects(("CISCO-ATM-CELL-LAYER-MIB", "caclTimeElapsed"), ("CISCO-ATM-CELL-LAYER-MIB", "caclValidIntervals"), ("CISCO-ATM-CELL-LAYER-MIB", "caclInvalidIntervals"), ("CISCO-ATM-CELL-LAYER-MIB", "caclIntervalInRcvCLP0Cells"), ("CISCO-ATM-CELL-LAYER-MIB", "caclIntervalInRcvCLP1Cells"), ("CISCO-ATM-CELL-LAYER-MIB", "caclIntervalInValidOAMCells"), ("CISCO-ATM-CELL-LAYER-MIB", "caclIntervalInErrOAMCells"), ("CISCO-ATM-CELL-LAYER-MIB", "caclIntervalInGfcCells"), ("CISCO-ATM-CELL-LAYER-MIB", "caclIntervalInVpiVciErrCells"), ("CISCO-ATM-CELL-LAYER-MIB", "caclIntervalInLastUnknVpi"), ("CISCO-ATM-CELL-LAYER-MIB", "caclIntervalInLastUnknVci"), ("CISCO-ATM-CELL-LAYER-MIB", "caclIntervalInXmtCLP0Cells"), ("CISCO-ATM-CELL-LAYER-MIB", "caclIntervalInXmtCLP1Cells"), ("CISCO-ATM-CELL-LAYER-MIB", "caclIntervalInValidRMCells"), ("CISCO-ATM-CELL-LAYER-MIB", "caclIntervalInRcvIdleCells"), ("CISCO-ATM-CELL-LAYER-MIB", "caclIntervalInHecErrDiscCells"), ("CISCO-ATM-CELL-LAYER-MIB", "caclIntervalInHecErrCorrCells"), ("CISCO-ATM-CELL-LAYER-MIB", "caclIntervalInUpcCLP0DiscCells"), ("CISCO-ATM-CELL-LAYER-MIB", "caclIntervalInUpcTotalDiscCells"), ("CISCO-ATM-CELL-LAYER-MIB", "caclIntervalInUpcTotNonCmpCells"), ("CISCO-ATM-CELL-LAYER-MIB", "caclIntervalOutXmtCLP0Cells"), ("CISCO-ATM-CELL-LAYER-MIB", "caclIntervalOutXmtCLP1Cells"), ("CISCO-ATM-CELL-LAYER-MIB", "caclIntervalOutValidOAMCells"), ("CISCO-ATM-CELL-LAYER-MIB", "caclIntervalOutErrOAMCells"), ("CISCO-ATM-CELL-LAYER-MIB", "caclIntervalOutVpiVciErrCells"), ("CISCO-ATM-CELL-LAYER-MIB", "caclIntervalOutRcvCLP0Cells"), ("CISCO-ATM-CELL-LAYER-MIB", "caclIntervalOutRcvCLP1Cells"), ("CISCO-ATM-CELL-LAYER-MIB", "caclIntervalOutRcvValidRMCells"), ("CISCO-ATM-CELL-LAYER-MIB", "caclIntervalOutRcvIdleCells"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    caclIntervalStatsMIBGroup = caclIntervalStatsMIBGroup.setStatus('deprecated')
caclATMSwitchStatsMIBGroup1 = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 133, 1, 3, 2, 6)).setObjects(("CISCO-ATM-CELL-LAYER-MIB", "caclInXmtCLP0Cells"), ("CISCO-ATM-CELL-LAYER-MIB", "caclInXmtCLP1Cells"), ("CISCO-ATM-CELL-LAYER-MIB", "caclOutRcvCLP0Cells"), ("CISCO-ATM-CELL-LAYER-MIB", "caclOutRcvCLP1Cells"), ("CISCO-ATM-CELL-LAYER-MIB", "caclOutRcvValidRMCells"), ("CISCO-ATM-CELL-LAYER-MIB", "caclOutRcvIdleCells"), ("CISCO-ATM-CELL-LAYER-MIB", "caclHighInXmtCLP0Cells"), ("CISCO-ATM-CELL-LAYER-MIB", "caclHighInXmtCLP1Cells"), ("CISCO-ATM-CELL-LAYER-MIB", "caclHighOutRcvCLP0Cells"), ("CISCO-ATM-CELL-LAYER-MIB", "caclHighOutRcvCLP1Cells"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    caclATMSwitchStatsMIBGroup1 = caclATMSwitchStatsMIBGroup1.setStatus('current')
caclATMStatsMIBGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 133, 1, 3, 2, 7)).setObjects(("CISCO-ATM-CELL-LAYER-MIB", "caclInRcvCLP0Cells"), ("CISCO-ATM-CELL-LAYER-MIB", "caclInRcvCLP1Cells"), ("CISCO-ATM-CELL-LAYER-MIB", "caclInValidOAMCells"), ("CISCO-ATM-CELL-LAYER-MIB", "caclInErrOAMCells"), ("CISCO-ATM-CELL-LAYER-MIB", "caclInGfcCells"), ("CISCO-ATM-CELL-LAYER-MIB", "caclInVpiVciErrCells"), ("CISCO-ATM-CELL-LAYER-MIB", "caclInLastUnknVpi"), ("CISCO-ATM-CELL-LAYER-MIB", "caclInLastUnknVci"), ("CISCO-ATM-CELL-LAYER-MIB", "caclInValidRMCells"), ("CISCO-ATM-CELL-LAYER-MIB", "caclInRcvIdleCells"), ("CISCO-ATM-CELL-LAYER-MIB", "caclInHecErrDiscCells"), ("CISCO-ATM-CELL-LAYER-MIB", "caclInHecErrCorrectedCells"), ("CISCO-ATM-CELL-LAYER-MIB", "caclInUpcCLP0DiscCells"), ("CISCO-ATM-CELL-LAYER-MIB", "caclInUpcTotalDiscCells"), ("CISCO-ATM-CELL-LAYER-MIB", "caclInUpcTotalNonCompCells"), ("CISCO-ATM-CELL-LAYER-MIB", "caclOutXmtCLP0Cells"), ("CISCO-ATM-CELL-LAYER-MIB", "caclOutXmtCLP1Cells"), ("CISCO-ATM-CELL-LAYER-MIB", "caclOutValidOAMCells"), ("CISCO-ATM-CELL-LAYER-MIB", "caclOutErrOAMCells"), ("CISCO-ATM-CELL-LAYER-MIB", "caclOutVpiVciErrCells"), ("CISCO-ATM-CELL-LAYER-MIB", "caclHighInRcvCLP0Cells"), ("CISCO-ATM-CELL-LAYER-MIB", "caclHighInRcvCLP1Cells"), ("CISCO-ATM-CELL-LAYER-MIB", "caclHighInValidOAMCells"), ("CISCO-ATM-CELL-LAYER-MIB", "caclHighInVpiVciErrCells"), ("CISCO-ATM-CELL-LAYER-MIB", "caclHighInHecErrDiscCells"), ("CISCO-ATM-CELL-LAYER-MIB", "caclHighInHecErrCorrectedCells"), ("CISCO-ATM-CELL-LAYER-MIB", "caclHighOutXmtCLP0Cells"), ("CISCO-ATM-CELL-LAYER-MIB", "caclHighOutXmtCLP1Cells"), ("CISCO-ATM-CELL-LAYER-MIB", "caclHighOutValidOAMCells"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    caclATMStatsMIBGroup = caclATMStatsMIBGroup.setStatus('current')
caclHighSpeedATMMIBGroup1 = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 133, 1, 3, 2, 8)).setObjects(("CISCO-ATM-CELL-LAYER-MIB", "caclHInRcvCLP0Cells"), ("CISCO-ATM-CELL-LAYER-MIB", "caclHInRcvCLP1Cells"), ("CISCO-ATM-CELL-LAYER-MIB", "caclHOutXmtCLP0Cells"), ("CISCO-ATM-CELL-LAYER-MIB", "caclHOutXmtCLP1Cells"), ("CISCO-ATM-CELL-LAYER-MIB", "caclHCInValidOAMCells"), ("CISCO-ATM-CELL-LAYER-MIB", "caclHCInVpiVciErrCells"), ("CISCO-ATM-CELL-LAYER-MIB", "caclHCInXmtCLP0Cells"), ("CISCO-ATM-CELL-LAYER-MIB", "caclHCInXmtCLP1Cells"), ("CISCO-ATM-CELL-LAYER-MIB", "caclHCInHecErrDiscCells"), ("CISCO-ATM-CELL-LAYER-MIB", "caclHCInHecErrCorrectedCells"), ("CISCO-ATM-CELL-LAYER-MIB", "caclHCOutValidOAMCells"), ("CISCO-ATM-CELL-LAYER-MIB", "caclHCOutRcvCLP0Cells"), ("CISCO-ATM-CELL-LAYER-MIB", "caclHCOutRcvCLP1Cells"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    caclHighSpeedATMMIBGroup1 = caclHighSpeedATMMIBGroup1.setStatus('current')
caclIntervalStatsMIBGroup1 = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 133, 1, 3, 2, 9)).setObjects(("CISCO-ATM-CELL-LAYER-MIB", "caclTimeElapsed"), ("CISCO-ATM-CELL-LAYER-MIB", "caclValidIntervals"), ("CISCO-ATM-CELL-LAYER-MIB", "caclInvalidIntervals"), ("CISCO-ATM-CELL-LAYER-MIB", "caclIntervalInRcvCLP0Cells"), ("CISCO-ATM-CELL-LAYER-MIB", "caclIntervalInRcvCLP1Cells"), ("CISCO-ATM-CELL-LAYER-MIB", "caclIntervalInValidOAMCells"), ("CISCO-ATM-CELL-LAYER-MIB", "caclIntervalInErrOAMCells"), ("CISCO-ATM-CELL-LAYER-MIB", "caclIntervalInGfcCells"), ("CISCO-ATM-CELL-LAYER-MIB", "caclIntervalInVpiVciErrCells"), ("CISCO-ATM-CELL-LAYER-MIB", "caclIntervalInLastUnknVpi"), ("CISCO-ATM-CELL-LAYER-MIB", "caclIntervalInLastUnknVci"), ("CISCO-ATM-CELL-LAYER-MIB", "caclIntervalInXmtCLP0Cells"), ("CISCO-ATM-CELL-LAYER-MIB", "caclIntervalInXmtCLP1Cells"), ("CISCO-ATM-CELL-LAYER-MIB", "caclIntervalInValidRMCells"), ("CISCO-ATM-CELL-LAYER-MIB", "caclIntervalInRcvIdleCells"), ("CISCO-ATM-CELL-LAYER-MIB", "caclIntervalInHecErrDiscCells"), ("CISCO-ATM-CELL-LAYER-MIB", "caclIntervalInHecErrCorrCells"), ("CISCO-ATM-CELL-LAYER-MIB", "caclIntervalInUpcCLP0DiscCells"), ("CISCO-ATM-CELL-LAYER-MIB", "caclIntervalInUpcTotalDiscCells"), ("CISCO-ATM-CELL-LAYER-MIB", "caclIntervalInUpcTotNonCmpCells"), ("CISCO-ATM-CELL-LAYER-MIB", "caclIntervalOutXmtCLP0Cells"), ("CISCO-ATM-CELL-LAYER-MIB", "caclIntervalOutXmtCLP1Cells"), ("CISCO-ATM-CELL-LAYER-MIB", "caclIntervalOutValidOAMCells"), ("CISCO-ATM-CELL-LAYER-MIB", "caclIntervalOutErrOAMCells"), ("CISCO-ATM-CELL-LAYER-MIB", "caclIntervalOutVpiVciErrCells"), ("CISCO-ATM-CELL-LAYER-MIB", "caclIntervalOutRcvCLP0Cells"), ("CISCO-ATM-CELL-LAYER-MIB", "caclIntervalOutRcvCLP1Cells"), ("CISCO-ATM-CELL-LAYER-MIB", "caclIntervalOutRcvValidRMCells"), ("CISCO-ATM-CELL-LAYER-MIB", "caclIntervalOutRcvIdleCells"), ("CISCO-ATM-CELL-LAYER-MIB", "caclHighIntervalInRcvCLP0Cells"), ("CISCO-ATM-CELL-LAYER-MIB", "caclHighIntervalInRcvCLP1Cells"), ("CISCO-ATM-CELL-LAYER-MIB", "caclHighIntervalInVpiVciErrCells"), ("CISCO-ATM-CELL-LAYER-MIB", "caclHighIntervalInXmtCLP0Cells"), ("CISCO-ATM-CELL-LAYER-MIB", "caclHighIntervalInXmtCLP1Cells"), ("CISCO-ATM-CELL-LAYER-MIB", "caclHighIntervalInHecErrDiscCells"), ("CISCO-ATM-CELL-LAYER-MIB", "caclHighIntervalInHecErrCorrCells"), ("CISCO-ATM-CELL-LAYER-MIB", "caclHighIntervalOutXmtCLP0Cells"), ("CISCO-ATM-CELL-LAYER-MIB", "caclHighIntervalOutXmtCLP1Cells"), ("CISCO-ATM-CELL-LAYER-MIB", "caclHighIntervalOutVpiVciErrCells"), ("CISCO-ATM-CELL-LAYER-MIB", "caclHighIntervalOutRcvCLP0Cells"), ("CISCO-ATM-CELL-LAYER-MIB", "caclHighIntervalOutRcvCLP1Cells"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    caclIntervalStatsMIBGroup1 = caclIntervalStatsMIBGroup1.setStatus('current')
caclHCIntervalStatsMIBGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 133, 1, 3, 2, 10)).setObjects(("CISCO-ATM-CELL-LAYER-MIB", "caclHCIntervalInRcvCLP0Cells"), ("CISCO-ATM-CELL-LAYER-MIB", "caclHCIntervalInRcvCLP1Cells"), ("CISCO-ATM-CELL-LAYER-MIB", "caclHCIntervalInVpiVciErrCells"), ("CISCO-ATM-CELL-LAYER-MIB", "caclHCIntervalInXmtCLP0Cells"), ("CISCO-ATM-CELL-LAYER-MIB", "caclHCIntervalInXmtCLP1Cells"), ("CISCO-ATM-CELL-LAYER-MIB", "caclHCIntervalInHecErrDiscCells"), ("CISCO-ATM-CELL-LAYER-MIB", "caclHCIntervalInHecErrCorrCells"), ("CISCO-ATM-CELL-LAYER-MIB", "caclHCIntervalOutXmtCLP0Cells"), ("CISCO-ATM-CELL-LAYER-MIB", "caclHCIntervalOutXmtCLP1Cells"), ("CISCO-ATM-CELL-LAYER-MIB", "caclHCIntervalOutVpiVciErrCells"), ("CISCO-ATM-CELL-LAYER-MIB", "caclHCIntervalOutRcvCLP0Cells"), ("CISCO-ATM-CELL-LAYER-MIB", "caclHCIntervalOutRcvCLP1Cells"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    caclHCIntervalStatsMIBGroup = caclHCIntervalStatsMIBGroup.setStatus('current')
mibBuilder.exportSymbols("CISCO-ATM-CELL-LAYER-MIB", caclInLastUnknVpi=caclInLastUnknVpi, caclXIntervalStatsTable=caclXIntervalStatsTable, caclConfigEntry=caclConfigEntry, caclHighIntervalOutRcvCLP1Cells=caclHighIntervalOutRcvCLP1Cells, caclIntervalInLastUnknVpi=caclIntervalInLastUnknVpi, caclHCIntervalOutXmtCLP0Cells=caclHCIntervalOutXmtCLP0Cells, caclHighInRcvCLP1Cells=caclHighInRcvCLP1Cells, caclHCIntervalInRcvCLP0Cells=caclHCIntervalInRcvCLP0Cells, caclOutErrOAMCells=caclOutErrOAMCells, caclXStatsTable=caclXStatsTable, caclInUpcTotalNonCompCells=caclInUpcTotalNonCompCells, caclTimeElapsed=caclTimeElapsed, caclHCIntervalOutVpiVciErrCells=caclHCIntervalOutVpiVciErrCells, caclIntervalNumber=caclIntervalNumber, caclIntervalOutVpiVciErrCells=caclIntervalOutVpiVciErrCells, caclHighIntervalOutRcvCLP0Cells=caclHighIntervalOutRcvCLP0Cells, caclHighInHecErrCorrectedCells=caclHighInHecErrCorrectedCells, caclIntervalInErrOAMCells=caclIntervalInErrOAMCells, caclInXmtCLP0Cells=caclInXmtCLP0Cells, caclHighIntervalInXmtCLP1Cells=caclHighIntervalInXmtCLP1Cells, caclIntervalInHecErrCorrCells=caclIntervalInHecErrCorrCells, caclNullCellPayload=caclNullCellPayload, caclATMEndSyatemStatsMIBGroup=caclATMEndSyatemStatsMIBGroup, caclConfigTable=caclConfigTable, caclHCIntervalInRcvCLP1Cells=caclHCIntervalInRcvCLP1Cells, caclMIBCompliance=caclMIBCompliance, caclInErrOAMCells=caclInErrOAMCells, ciscoAtmCellLayerMIB=ciscoAtmCellLayerMIB, caclOutRcvCLP1Cells=caclOutRcvCLP1Cells, caclHInRcvCLP1Cells=caclHInRcvCLP1Cells, caclHighIntervalInHecErrDiscCells=caclHighIntervalInHecErrDiscCells, caclXStatsEntry=caclXStatsEntry, caclIntervalStatsTable=caclIntervalStatsTable, caclHCIntervalOutXmtCLP1Cells=caclHCIntervalOutXmtCLP1Cells, caclInVpiVciErrCells=caclInVpiVciErrCells, caclHCIntervalOutRcvCLP0Cells=caclHCIntervalOutRcvCLP0Cells, caclNullCellHeader=caclNullCellHeader, caclHighOutRcvCLP1Cells=caclHighOutRcvCLP1Cells, caclInValidRMCells=caclInValidRMCells, caclHighInXmtCLP0Cells=caclHighInXmtCLP0Cells, caclHighIntervalOutXmtCLP1Cells=caclHighIntervalOutXmtCLP1Cells, caclHCInHecErrCorrectedCells=caclHCInHecErrCorrectedCells, caclHCIntervalInVpiVciErrCells=caclHCIntervalInVpiVciErrCells, caclHighInXmtCLP1Cells=caclHighInXmtCLP1Cells, caclMIBCompliances=caclMIBCompliances, caclIntervalOutXmtCLP0Cells=caclIntervalOutXmtCLP0Cells, PYSNMP_MODULE_ID=ciscoAtmCellLayerMIB, caclIntervalOutRcvCLP1Cells=caclIntervalOutRcvCLP1Cells, caclStatsTable=caclStatsTable, caclOutRcvCLP0Cells=caclOutRcvCLP0Cells, caclIntervalOutErrOAMCells=caclIntervalOutErrOAMCells, caclIntervalOutRcvValidRMCells=caclIntervalOutRcvValidRMCells, caclIntervalOutRcvIdleCells=caclIntervalOutRcvIdleCells, caclInGfcCells=caclInGfcCells, caclHighSpeedATMMIBGroup=caclHighSpeedATMMIBGroup, caclHecCosetEnable=caclHecCosetEnable, caclMIBConformance=caclMIBConformance, caclInLastUnknVci=caclInLastUnknVci, caclInUpcCLP0DiscCells=caclInUpcCLP0DiscCells, caclIntervalInValidOAMCells=caclIntervalInValidOAMCells, caclHCIntervalInXmtCLP1Cells=caclHCIntervalInXmtCLP1Cells, caclATMStatsMIBGroup=caclATMStatsMIBGroup, caclIntervalStatsMIBGroup1=caclIntervalStatsMIBGroup1, caclIntervalInXmtCLP0Cells=caclIntervalInXmtCLP0Cells, caclATMSwitchStatsMIBGroup1=caclATMSwitchStatsMIBGroup1, caclHCOutValidOAMCells=caclHCOutValidOAMCells, caclHOutXmtCLP1Cells=caclHOutXmtCLP1Cells, caclMIBGroup=caclMIBGroup, caclInHecErrCorrectedCells=caclInHecErrCorrectedCells, caclHCInXmtCLP0Cells=caclHCInXmtCLP0Cells, caclHCInValidOAMCells=caclHCInValidOAMCells, caclInValidOAMCells=caclInValidOAMCells, caclHighInHecErrDiscCells=caclHighInHecErrDiscCells, caclOutRcvValidRMCells=caclOutRcvValidRMCells, caclIntervalStatsMIBGroup=caclIntervalStatsMIBGroup, caclHOutXmtCLP0Cells=caclHOutXmtCLP0Cells, caclOutXmtCLP0Cells=caclOutXmtCLP0Cells, caclOutValidOAMCells=caclOutValidOAMCells, caclInRcvCLP0Cells=caclInRcvCLP0Cells, caclHighOutXmtCLP1Cells=caclHighOutXmtCLP1Cells, caclHighIntervalInRcvCLP0Cells=caclHighIntervalInRcvCLP0Cells, caclInUpcTotalDiscCells=caclInUpcTotalDiscCells, caclXIntervalStatsEntry=caclXIntervalStatsEntry, caclMIBCompliance1=caclMIBCompliance1, caclHighOutXmtCLP0Cells=caclHighOutXmtCLP0Cells, caclHCInVpiVciErrCells=caclHCInVpiVciErrCells, caclIntervalInVpiVciErrCells=caclIntervalInVpiVciErrCells, caclHighSpeedATMMIBGroup1=caclHighSpeedATMMIBGroup1, caclIntervalInUpcTotalDiscCells=caclIntervalInUpcTotalDiscCells, caclIntervalOutRcvCLP0Cells=caclIntervalOutRcvCLP0Cells, caclValidIntervals=caclValidIntervals, caclIntervalInLastUnknVci=caclIntervalInLastUnknVci, caclPayloadScramblingEnable=caclPayloadScramblingEnable, caclOutXmtCLP1Cells=caclOutXmtCLP1Cells, caclHighIntervalInVpiVciErrCells=caclHighIntervalInVpiVciErrCells, caclConfig=caclConfig, caclOutVpiVciErrCells=caclOutVpiVciErrCells, caclIntervalOutValidOAMCells=caclIntervalOutValidOAMCells, caclHCInXmtCLP1Cells=caclHCInXmtCLP1Cells, ciscoAtmCellLayerMIBObjects=ciscoAtmCellLayerMIBObjects, caclInHecErrDiscCells=caclInHecErrDiscCells, caclHCIntervalInHecErrDiscCells=caclHCIntervalInHecErrDiscCells, caclOutRcvIdleCells=caclOutRcvIdleCells, caclHighOutValidOAMCells=caclHighOutValidOAMCells, caclIntervalInXmtCLP1Cells=caclIntervalInXmtCLP1Cells, caclHighInVpiVciErrCells=caclHighInVpiVciErrCells, caclHCInHecErrDiscCells=caclHCInHecErrDiscCells, caclIntervalOutXmtCLP1Cells=caclIntervalOutXmtCLP1Cells, caclHInRcvCLP0Cells=caclHInRcvCLP0Cells, caclHCIntervalOutRcvCLP1Cells=caclHCIntervalOutRcvCLP1Cells, caclMIBGroups=caclMIBGroups, caclHighIntervalOutXmtCLP0Cells=caclHighIntervalOutXmtCLP0Cells, caclStats=caclStats, caclHighIntervalInXmtCLP0Cells=caclHighIntervalInXmtCLP0Cells, caclHCOutRcvCLP0Cells=caclHCOutRcvCLP0Cells, caclATMSwitchStatsMIBGroup=caclATMSwitchStatsMIBGroup, caclIntervalInRcvCLP1Cells=caclIntervalInRcvCLP1Cells, caclHCOutRcvCLP1Cells=caclHCOutRcvCLP1Cells, caclIntervalInGfcCells=caclIntervalInGfcCells, caclIntervalInValidRMCells=caclIntervalInValidRMCells, caclInvalidIntervals=caclInvalidIntervals, caclIntervalInRcvIdleCells=caclIntervalInRcvIdleCells, caclHCIntervalStatsMIBGroup=caclHCIntervalStatsMIBGroup, caclIntervalInUpcCLP0DiscCells=caclIntervalInUpcCLP0DiscCells, caclIntervalStatsEntry=caclIntervalStatsEntry, caclHighOutRcvCLP0Cells=caclHighOutRcvCLP0Cells, caclHighIntervalInRcvCLP1Cells=caclHighIntervalInRcvCLP1Cells, caclInRcvIdleCells=caclInRcvIdleCells, caclHighInValidOAMCells=caclHighInValidOAMCells, caclInXmtCLP1Cells=caclInXmtCLP1Cells, caclHighIntervalOutVpiVciErrCells=caclHighIntervalOutVpiVciErrCells, caclHighIntervalInHecErrCorrCells=caclHighIntervalInHecErrCorrCells, caclIntervalInHecErrDiscCells=caclIntervalInHecErrDiscCells, caclIntervalInUpcTotNonCmpCells=caclIntervalInUpcTotNonCmpCells, caclHCIntervalInXmtCLP0Cells=caclHCIntervalInXmtCLP0Cells, caclHCIntervalInHecErrCorrCells=caclHCIntervalInHecErrCorrCells, caclIntervalInRcvCLP0Cells=caclIntervalInRcvCLP0Cells, caclInRcvCLP1Cells=caclInRcvCLP1Cells, caclStatsEntry=caclStatsEntry, caclHighInRcvCLP0Cells=caclHighInRcvCLP0Cells)
