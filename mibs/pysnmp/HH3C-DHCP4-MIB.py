#
# PySNMP MIB module HH3C-DHCP4-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/HH3C-DHCP4-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 19:12:53 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, Integer, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "OctetString", "Integer", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
SingleValueConstraint, ValueSizeConstraint, ValueRangeConstraint, ConstraintsUnion, ConstraintsIntersection = mibBuilder.importSymbols("ASN1-REFINEMENT", "SingleValueConstraint", "ValueSizeConstraint", "ValueRangeConstraint", "ConstraintsUnion", "ConstraintsIntersection")
hh3cCommon, = mibBuilder.importSymbols("HH3C-OID-MIB", "hh3cCommon")
ifIndex, InterfaceIndexOrZero = mibBuilder.importSymbols("IF-MIB", "ifIndex", "InterfaceIndexOrZero")
InetAddressIPv4, = mibBuilder.importSymbols("INET-ADDRESS-MIB", "InetAddressIPv4")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
Integer32, IpAddress, MibIdentifier, iso, ObjectIdentity, TimeTicks, Gauge32, NotificationType, Counter32, ModuleIdentity, MibScalar, MibTable, MibTableRow, MibTableColumn, Bits, Counter64, Unsigned32 = mibBuilder.importSymbols("SNMPv2-SMI", "Integer32", "IpAddress", "MibIdentifier", "iso", "ObjectIdentity", "TimeTicks", "Gauge32", "NotificationType", "Counter32", "ModuleIdentity", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Bits", "Counter64", "Unsigned32")
RowStatus, TruthValue, MacAddress, DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "RowStatus", "TruthValue", "MacAddress", "DisplayString", "TextualConvention")
hh3cDhcp4 = ModuleIdentity((1, 3, 6, 1, 4, 1, 25506, 2, 122))
hh3cDhcp4.setRevisions(('2013-04-24 00:00',))
if mibBuilder.loadTexts: hh3cDhcp4.setLastUpdated('201304240000Z')
if mibBuilder.loadTexts: hh3cDhcp4.setOrganization('Hangzhou H3C Technologies Co., Ltd.')
hh3cDhcpServer2ScalarObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 25506, 2, 122, 1))
hh3cDhcpServer2ConfigGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 25506, 2, 122, 1, 1))
hh3cDhcpServer2Enabled = MibScalar((1, 3, 6, 1, 4, 1, 25506, 2, 122, 1, 1, 1), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hh3cDhcpServer2Enabled.setStatus('current')
hh3cDhcpServer2AlwaysBroadcast = MibScalar((1, 3, 6, 1, 4, 1, 25506, 2, 122, 1, 1, 2), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hh3cDhcpServer2AlwaysBroadcast.setStatus('current')
hh3cDhcpServer2IgnoreBootp = MibScalar((1, 3, 6, 1, 4, 1, 25506, 2, 122, 1, 1, 3), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hh3cDhcpServer2IgnoreBootp.setStatus('current')
hh3cDhcpServer2BootpReplyRfc1048 = MibScalar((1, 3, 6, 1, 4, 1, 25506, 2, 122, 1, 1, 4), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hh3cDhcpServer2BootpReplyRfc1048.setStatus('current')
hh3cDhcpServer2Opt82Enabled = MibScalar((1, 3, 6, 1, 4, 1, 25506, 2, 122, 1, 1, 5), TruthValue().clone('true')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hh3cDhcpServer2Opt82Enabled.setStatus('current')
hh3cDhcpServer2PingNumber = MibScalar((1, 3, 6, 1, 4, 1, 25506, 2, 122, 1, 1, 6), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 10)).clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hh3cDhcpServer2PingNumber.setStatus('current')
hh3cDhcpServer2PingTimeout = MibScalar((1, 3, 6, 1, 4, 1, 25506, 2, 122, 1, 1, 7), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 10000)).clone(500)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hh3cDhcpServer2PingTimeout.setStatus('current')
hh3cDhcpServer2StatGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 25506, 2, 122, 1, 2))
hh3cDhcpServer2BadNum = MibScalar((1, 3, 6, 1, 4, 1, 25506, 2, 122, 1, 2, 1), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cDhcpServer2BadNum.setStatus('current')
hh3cDhcpServer2BootpRequestNum = MibScalar((1, 3, 6, 1, 4, 1, 25506, 2, 122, 1, 2, 2), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cDhcpServer2BootpRequestNum.setStatus('current')
hh3cDhcpServer2DiscoverNum = MibScalar((1, 3, 6, 1, 4, 1, 25506, 2, 122, 1, 2, 3), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cDhcpServer2DiscoverNum.setStatus('current')
hh3cDhcpServer2RequestNum = MibScalar((1, 3, 6, 1, 4, 1, 25506, 2, 122, 1, 2, 4), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cDhcpServer2RequestNum.setStatus('current')
hh3cDhcpServer2DeclineNum = MibScalar((1, 3, 6, 1, 4, 1, 25506, 2, 122, 1, 2, 5), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cDhcpServer2DeclineNum.setStatus('current')
hh3cDhcpServer2ReleaseNum = MibScalar((1, 3, 6, 1, 4, 1, 25506, 2, 122, 1, 2, 6), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cDhcpServer2ReleaseNum.setStatus('current')
hh3cDhcpServer2InformNum = MibScalar((1, 3, 6, 1, 4, 1, 25506, 2, 122, 1, 2, 7), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cDhcpServer2InformNum.setStatus('current')
hh3cDhcpServer2BootpReplyNum = MibScalar((1, 3, 6, 1, 4, 1, 25506, 2, 122, 1, 2, 8), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cDhcpServer2BootpReplyNum.setStatus('current')
hh3cDhcpServer2OfferNum = MibScalar((1, 3, 6, 1, 4, 1, 25506, 2, 122, 1, 2, 9), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cDhcpServer2OfferNum.setStatus('current')
hh3cDhcpServer2AckNum = MibScalar((1, 3, 6, 1, 4, 1, 25506, 2, 122, 1, 2, 10), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cDhcpServer2AckNum.setStatus('current')
hh3cDhcpServer2NakNum = MibScalar((1, 3, 6, 1, 4, 1, 25506, 2, 122, 1, 2, 11), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cDhcpServer2NakNum.setStatus('current')
hh3cDhcpServer2TotalPoolUsage = MibScalar((1, 3, 6, 1, 4, 1, 25506, 2, 122, 1, 2, 12), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cDhcpServer2TotalPoolUsage.setStatus('current')
hh3cDhcpServer2PoolNumber = MibScalar((1, 3, 6, 1, 4, 1, 25506, 2, 122, 1, 2, 13), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cDhcpServer2PoolNumber.setStatus('current')
hh3cDhcpServer2ConflictNum = MibScalar((1, 3, 6, 1, 4, 1, 25506, 2, 122, 1, 2, 14), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cDhcpServer2ConflictNum.setStatus('current')
hh3cDhcpServer2AutoBindNum = MibScalar((1, 3, 6, 1, 4, 1, 25506, 2, 122, 1, 2, 15), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cDhcpServer2AutoBindNum.setStatus('current')
hh3cDhcpServer2ManualBindNum = MibScalar((1, 3, 6, 1, 4, 1, 25506, 2, 122, 1, 2, 16), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cDhcpServer2ManualBindNum.setStatus('current')
hh3cDhcpServer2ExpiredBindNum = MibScalar((1, 3, 6, 1, 4, 1, 25506, 2, 122, 1, 2, 17), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cDhcpServer2ExpiredBindNum.setStatus('current')
hh3cDhcpServer2Tables = MibIdentifier((1, 3, 6, 1, 4, 1, 25506, 2, 122, 2))
hh3cDhcpServer2PoolTable = MibTable((1, 3, 6, 1, 4, 1, 25506, 2, 122, 2, 1), )
if mibBuilder.loadTexts: hh3cDhcpServer2PoolTable.setStatus('current')
hh3cDhcpServer2PoolEntry = MibTableRow((1, 3, 6, 1, 4, 1, 25506, 2, 122, 2, 1, 1), ).setIndexNames((0, "HH3C-DHCP4-MIB", "hh3cDhcpServer2PoolIndex"))
if mibBuilder.loadTexts: hh3cDhcpServer2PoolEntry.setStatus('current')
hh3cDhcpServer2PoolIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 122, 2, 1, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 4294967295)))
if mibBuilder.loadTexts: hh3cDhcpServer2PoolIndex.setStatus('current')
hh3cDhcpServer2PoolName = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 122, 2, 1, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 63))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cDhcpServer2PoolName.setStatus('current')
hh3cDhcpServer2PoolVpnName = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 122, 2, 1, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 31))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cDhcpServer2PoolVpnName.setStatus('current')
hh3cDhcpServer2PoolNetwork = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 122, 2, 1, 1, 4), InetAddressIPv4()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cDhcpServer2PoolNetwork.setStatus('current')
hh3cDhcpServer2PoolNetworkMask = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 122, 2, 1, 1, 5), InetAddressIPv4()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cDhcpServer2PoolNetworkMask.setStatus('current')
hh3cDhcpServer2PoolStartAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 122, 2, 1, 1, 6), InetAddressIPv4()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cDhcpServer2PoolStartAddr.setStatus('current')
hh3cDhcpServer2PoolEndAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 122, 2, 1, 1, 7), InetAddressIPv4()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cDhcpServer2PoolEndAddr.setStatus('current')
hh3cDhcpServer2PoolLeaseDay = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 122, 2, 1, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 365)).clone(1)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cDhcpServer2PoolLeaseDay.setStatus('current')
hh3cDhcpServer2PoolLeaseHour = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 122, 2, 1, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 23))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cDhcpServer2PoolLeaseHour.setStatus('current')
hh3cDhcpServer2PoolLeaseMinute = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 122, 2, 1, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 59))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cDhcpServer2PoolLeaseMinute.setStatus('current')
hh3cDhcpServer2PoolLeaseSecond = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 122, 2, 1, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 59))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cDhcpServer2PoolLeaseSecond.setStatus('current')
hh3cDhcpServer2PoolLeaseUnlimit = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 122, 2, 1, 1, 12), TruthValue().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cDhcpServer2PoolLeaseUnlimit.setStatus('current')
hh3cDhcpServer2PoolLeaseTime = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 122, 2, 1, 1, 13), TimeTicks()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cDhcpServer2PoolLeaseTime.setStatus('current')
hh3cDhcpServer2PoolDomainName = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 122, 2, 1, 1, 14), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 50))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cDhcpServer2PoolDomainName.setStatus('current')
hh3cDhcpServer2PoolGatewayIP = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 122, 2, 1, 1, 15), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 127))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cDhcpServer2PoolGatewayIP.setStatus('current')
hh3cDhcpServer2PoolDNSIP = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 122, 2, 1, 1, 16), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 127))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cDhcpServer2PoolDNSIP.setStatus('current')
hh3cDhcpServer2PoolPrimaryDNSIP = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 122, 2, 1, 1, 17), InetAddressIPv4()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cDhcpServer2PoolPrimaryDNSIP.setStatus('current')
hh3cDhcpServer2PoolSecondDNSIP = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 122, 2, 1, 1, 18), InetAddressIPv4()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cDhcpServer2PoolSecondDNSIP.setStatus('current')
hh3cDhcpServer2PoolNetbiosType = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 122, 2, 1, 1, 19), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 4, 8))).clone(namedValues=NamedValues(("null", 0), ("bnode", 1), ("pnode", 2), ("mnode", 4), ("hnode", 8))).clone('null')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cDhcpServer2PoolNetbiosType.setStatus('current')
hh3cDhcpServer2PoolNbnsIP = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 122, 2, 1, 1, 20), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 127))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cDhcpServer2PoolNbnsIP.setStatus('current')
hh3cDhcpServer2PoolBootFileName = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 122, 2, 1, 1, 21), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 63))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cDhcpServer2PoolBootFileName.setStatus('current')
hh3cDhcpServer2PoolBimsIP = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 122, 2, 1, 1, 22), InetAddressIPv4()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cDhcpServer2PoolBimsIP.setStatus('current')
hh3cDhcpServer2PoolBimsPort = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 122, 2, 1, 1, 23), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 65534))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cDhcpServer2PoolBimsPort.setStatus('current')
hh3cDhcpServer2PoolBimsKeyStr = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 122, 2, 1, 1, 24), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cDhcpServer2PoolBimsKeyStr.setStatus('current')
hh3cDhcpServer2PoolNextServer = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 122, 2, 1, 1, 25), InetAddressIPv4()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cDhcpServer2PoolNextServer.setStatus('current')
hh3cDhcpServer2PoolTftpDomName = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 122, 2, 1, 1, 26), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 63))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cDhcpServer2PoolTftpDomName.setStatus('current')
hh3cDhcpServer2PoolTftpIP = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 122, 2, 1, 1, 27), InetAddressIPv4()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cDhcpServer2PoolTftpIP.setStatus('current')
hh3cDhcpServer2PoolVoiceAsIP = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 122, 2, 1, 1, 28), InetAddressIPv4()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cDhcpServer2PoolVoiceAsIP.setStatus('current')
hh3cDhcpServer2PoolVoiceFailIP = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 122, 2, 1, 1, 29), InetAddressIPv4()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cDhcpServer2PoolVoiceFailIP.setStatus('current')
hh3cDhcpServer2PoolVoiceFailStr = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 122, 2, 1, 1, 30), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 39))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cDhcpServer2PoolVoiceFailStr.setStatus('current')
hh3cDhcpServer2PoolVoiceNCPIP = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 122, 2, 1, 1, 31), InetAddressIPv4()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cDhcpServer2PoolVoiceNCPIP.setStatus('current')
hh3cDhcpServer2PoolVoiceVlanId = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 122, 2, 1, 1, 32), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(2, 4094), ValueRangeConstraint(65535, 65535), ))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cDhcpServer2PoolVoiceVlanId.setStatus('current')
hh3cDhcpServer2PoolVoiceVlanEnbl = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 122, 2, 1, 1, 33), TruthValue().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cDhcpServer2PoolVoiceVlanEnbl.setStatus('current')
hh3cDhcpServer2PoolRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 122, 2, 1, 1, 34), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cDhcpServer2PoolRowStatus.setStatus('current')
hh3cDhcpServer2PoolVerifyClass = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 122, 2, 1, 1, 35), TruthValue().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cDhcpServer2PoolVerifyClass.setStatus('current')
hh3cDhcpServer2IfApplyPoolTable = MibTable((1, 3, 6, 1, 4, 1, 25506, 2, 122, 2, 2), )
if mibBuilder.loadTexts: hh3cDhcpServer2IfApplyPoolTable.setStatus('current')
hh3cDhcpServer2IfApplyPoolEntry = MibTableRow((1, 3, 6, 1, 4, 1, 25506, 2, 122, 2, 2, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: hh3cDhcpServer2IfApplyPoolEntry.setStatus('current')
hh3cDhcpServer2IfApplyPoolName = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 122, 2, 2, 1, 1), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 63))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hh3cDhcpServer2IfApplyPoolName.setStatus('current')
hh3cDhcpServer2PoolSecNwTable = MibTable((1, 3, 6, 1, 4, 1, 25506, 2, 122, 2, 3), )
if mibBuilder.loadTexts: hh3cDhcpServer2PoolSecNwTable.setStatus('current')
hh3cDhcpServer2PoolSecNwEntry = MibTableRow((1, 3, 6, 1, 4, 1, 25506, 2, 122, 2, 3, 1), ).setIndexNames((0, "HH3C-DHCP4-MIB", "hh3cDhcpServer2PoolIndex"), (0, "HH3C-DHCP4-MIB", "hh3cDhcpServer2PoolSecNw"), (0, "HH3C-DHCP4-MIB", "hh3cDhcpServer2PoolSecNwMask"))
if mibBuilder.loadTexts: hh3cDhcpServer2PoolSecNwEntry.setStatus('current')
hh3cDhcpServer2PoolSecNw = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 122, 2, 3, 1, 1), InetAddressIPv4())
if mibBuilder.loadTexts: hh3cDhcpServer2PoolSecNw.setStatus('current')
hh3cDhcpServer2PoolSecNwMask = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 122, 2, 3, 1, 2), InetAddressIPv4())
if mibBuilder.loadTexts: hh3cDhcpServer2PoolSecNwMask.setStatus('current')
hh3cDhcpServer2PoolSecNwGwIP = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 122, 2, 3, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 127))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cDhcpServer2PoolSecNwGwIP.setStatus('current')
hh3cDhcpServer2PoolSecNwStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 122, 2, 3, 1, 4), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cDhcpServer2PoolSecNwStatus.setStatus('current')
hh3cDhcpServer2PoolClassTable = MibTable((1, 3, 6, 1, 4, 1, 25506, 2, 122, 2, 4), )
if mibBuilder.loadTexts: hh3cDhcpServer2PoolClassTable.setStatus('current')
hh3cDhcpServer2PoolClassEntry = MibTableRow((1, 3, 6, 1, 4, 1, 25506, 2, 122, 2, 4, 1), ).setIndexNames((0, "HH3C-DHCP4-MIB", "hh3cDhcpServer2PoolIndex"), (0, "HH3C-DHCP4-MIB", "hh3cDhcpServer2PoolClassName"))
if mibBuilder.loadTexts: hh3cDhcpServer2PoolClassEntry.setStatus('current')
hh3cDhcpServer2PoolClassName = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 122, 2, 4, 1, 1), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 63)))
if mibBuilder.loadTexts: hh3cDhcpServer2PoolClassName.setStatus('current')
hh3cDhcpServer2PoolClassStart = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 122, 2, 4, 1, 2), InetAddressIPv4()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cDhcpServer2PoolClassStart.setStatus('current')
hh3cDhcpServer2PoolClassEnd = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 122, 2, 4, 1, 3), InetAddressIPv4()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cDhcpServer2PoolClassEnd.setStatus('current')
hh3cDhcpServer2PoolClassStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 122, 2, 4, 1, 4), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cDhcpServer2PoolClassStatus.setStatus('current')
hh3cDhcpServer2PoolStaticTable = MibTable((1, 3, 6, 1, 4, 1, 25506, 2, 122, 2, 5), )
if mibBuilder.loadTexts: hh3cDhcpServer2PoolStaticTable.setStatus('current')
hh3cDhcpServer2PoolStaticEntry = MibTableRow((1, 3, 6, 1, 4, 1, 25506, 2, 122, 2, 5, 1), ).setIndexNames((0, "HH3C-DHCP4-MIB", "hh3cDhcpServer2PoolIndex"), (0, "HH3C-DHCP4-MIB", "hh3cDhcpServer2PoolStaticIP"))
if mibBuilder.loadTexts: hh3cDhcpServer2PoolStaticEntry.setStatus('current')
hh3cDhcpServer2PoolStaticIP = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 122, 2, 5, 1, 1), InetAddressIPv4())
if mibBuilder.loadTexts: hh3cDhcpServer2PoolStaticIP.setStatus('current')
hh3cDhcpServer2PoolStaticMask = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 122, 2, 5, 1, 2), InetAddressIPv4()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cDhcpServer2PoolStaticMask.setStatus('current')
hh3cDhcpServer2PoolStaticCID = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 122, 2, 5, 1, 3), OctetString().subtype(subtypeSpec=ConstraintsUnion(ValueSizeConstraint(0, 0), ValueSizeConstraint(4, 254), ))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cDhcpServer2PoolStaticCID.setStatus('current')
hh3cDhcpServer2PoolStaticHAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 122, 2, 5, 1, 4), OctetString().subtype(subtypeSpec=ConstraintsUnion(ValueSizeConstraint(0, 0), ValueSizeConstraint(4, 39), ))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cDhcpServer2PoolStaticHAddr.setStatus('current')
hh3cDhcpServer2PoolStaticHType = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 122, 2, 5, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("default", 1), ("ethernet", 2), ("tokenRing", 3)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cDhcpServer2PoolStaticHType.setStatus('current')
hh3cDhcpServer2PoolStaticStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 122, 2, 5, 1, 6), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cDhcpServer2PoolStaticStatus.setStatus('current')
hh3cDhcpServer2PoolOptionTable = MibTable((1, 3, 6, 1, 4, 1, 25506, 2, 122, 2, 6), )
if mibBuilder.loadTexts: hh3cDhcpServer2PoolOptionTable.setStatus('current')
hh3cDhcpServer2PoolOptionEntry = MibTableRow((1, 3, 6, 1, 4, 1, 25506, 2, 122, 2, 6, 1), ).setIndexNames((0, "HH3C-DHCP4-MIB", "hh3cDhcpServer2PoolIndex"), (0, "HH3C-DHCP4-MIB", "hh3cDhcpServer2PoolOptCode"))
if mibBuilder.loadTexts: hh3cDhcpServer2PoolOptionEntry.setStatus('current')
hh3cDhcpServer2PoolOptCode = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 122, 2, 6, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(2, 254)))
if mibBuilder.loadTexts: hh3cDhcpServer2PoolOptCode.setStatus('current')
hh3cDhcpServer2PoolOptType = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 122, 2, 6, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("ascii", 1), ("hex", 2), ("ip", 3)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cDhcpServer2PoolOptType.setStatus('current')
hh3cDhcpServer2PoolOptAscii = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 122, 2, 6, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cDhcpServer2PoolOptAscii.setStatus('current')
hh3cDhcpServer2PoolOptHexStr = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 122, 2, 6, 1, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 510))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cDhcpServer2PoolOptHexStr.setStatus('current')
hh3cDhcpServer2PoolOptIPStr = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 122, 2, 6, 1, 5), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 127))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cDhcpServer2PoolOptIPStr.setStatus('current')
hh3cDhcpServer2PoolOptRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 122, 2, 6, 1, 6), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cDhcpServer2PoolOptRowStatus.setStatus('current')
hh3cDhcpServer2PoolForbidTable = MibTable((1, 3, 6, 1, 4, 1, 25506, 2, 122, 2, 7), )
if mibBuilder.loadTexts: hh3cDhcpServer2PoolForbidTable.setStatus('current')
hh3cDhcpServer2PoolForbidEntry = MibTableRow((1, 3, 6, 1, 4, 1, 25506, 2, 122, 2, 7, 1), ).setIndexNames((0, "HH3C-DHCP4-MIB", "hh3cDhcpServer2PoolIndex"), (0, "HH3C-DHCP4-MIB", "hh3cDhcpServer2PoolForbidIP"))
if mibBuilder.loadTexts: hh3cDhcpServer2PoolForbidEntry.setStatus('current')
hh3cDhcpServer2PoolForbidIP = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 122, 2, 7, 1, 1), InetAddressIPv4())
if mibBuilder.loadTexts: hh3cDhcpServer2PoolForbidIP.setStatus('current')
hh3cDhcpServer2PoolForbidStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 122, 2, 7, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cDhcpServer2PoolForbidStatus.setStatus('current')
hh3cDhcpServer2ClassTable = MibTable((1, 3, 6, 1, 4, 1, 25506, 2, 122, 2, 8), )
if mibBuilder.loadTexts: hh3cDhcpServer2ClassTable.setStatus('current')
hh3cDhcpServer2ClassEntry = MibTableRow((1, 3, 6, 1, 4, 1, 25506, 2, 122, 2, 8, 1), ).setIndexNames((0, "HH3C-DHCP4-MIB", "hh3cDhcpServer2ClassName"))
if mibBuilder.loadTexts: hh3cDhcpServer2ClassEntry.setStatus('current')
hh3cDhcpServer2ClassName = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 122, 2, 8, 1, 1), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 63)))
if mibBuilder.loadTexts: hh3cDhcpServer2ClassName.setStatus('current')
hh3cDhcpServer2ClassRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 122, 2, 8, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cDhcpServer2ClassRowStatus.setStatus('current')
hh3cDhcpServer2RuleTable = MibTable((1, 3, 6, 1, 4, 1, 25506, 2, 122, 2, 9), )
if mibBuilder.loadTexts: hh3cDhcpServer2RuleTable.setStatus('current')
hh3cDhcpServer2RuleEntry = MibTableRow((1, 3, 6, 1, 4, 1, 25506, 2, 122, 2, 9, 1), ).setIndexNames((0, "HH3C-DHCP4-MIB", "hh3cDhcpServer2ClassName"), (0, "HH3C-DHCP4-MIB", "hh3cDhcpServer2RuleNumber"))
if mibBuilder.loadTexts: hh3cDhcpServer2RuleEntry.setStatus('current')
hh3cDhcpServer2RuleNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 122, 2, 9, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 16)))
if mibBuilder.loadTexts: hh3cDhcpServer2RuleNumber.setStatus('current')
hh3cDhcpServer2RuleOptCode = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 122, 2, 9, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 254))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cDhcpServer2RuleOptCode.setStatus('current')
hh3cDhcpServer2RuleOptHexStr = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 122, 2, 9, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 510))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cDhcpServer2RuleOptHexStr.setStatus('current')
hh3cDhcpServer2RuleOptMask = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 122, 2, 9, 1, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 510))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cDhcpServer2RuleOptMask.setStatus('current')
hh3cDhcpServer2RuleOptOffset = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 122, 2, 9, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 254))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cDhcpServer2RuleOptOffset.setStatus('current')
hh3cDhcpServer2RuleOptLength = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 122, 2, 9, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cDhcpServer2RuleOptLength.setStatus('current')
hh3cDhcpServer2RuleRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 122, 2, 9, 1, 7), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cDhcpServer2RuleRowStatus.setStatus('current')
hh3cDhcpServer2ForbidTable = MibTable((1, 3, 6, 1, 4, 1, 25506, 2, 122, 2, 10), )
if mibBuilder.loadTexts: hh3cDhcpServer2ForbidTable.setStatus('current')
hh3cDhcpServer2ForbidEntry = MibTableRow((1, 3, 6, 1, 4, 1, 25506, 2, 122, 2, 10, 1), ).setIndexNames((0, "HH3C-DHCP4-MIB", "hh3cDhcpServer2ForbidVpnName"), (0, "HH3C-DHCP4-MIB", "hh3cDhcpServer2ForbidStart"), (0, "HH3C-DHCP4-MIB", "hh3cDhcpServer2ForbidEnd"))
if mibBuilder.loadTexts: hh3cDhcpServer2ForbidEntry.setStatus('current')
hh3cDhcpServer2ForbidVpnName = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 122, 2, 10, 1, 1), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 31)))
if mibBuilder.loadTexts: hh3cDhcpServer2ForbidVpnName.setStatus('current')
hh3cDhcpServer2ForbidStart = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 122, 2, 10, 1, 2), InetAddressIPv4())
if mibBuilder.loadTexts: hh3cDhcpServer2ForbidStart.setStatus('current')
hh3cDhcpServer2ForbidEnd = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 122, 2, 10, 1, 3), InetAddressIPv4())
if mibBuilder.loadTexts: hh3cDhcpServer2ForbidEnd.setStatus('current')
hh3cDhcpServer2ForbidRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 122, 2, 10, 1, 4), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cDhcpServer2ForbidRowStatus.setStatus('current')
hh3cDhcpServer2FreeTable = MibTable((1, 3, 6, 1, 4, 1, 25506, 2, 122, 2, 11), )
if mibBuilder.loadTexts: hh3cDhcpServer2FreeTable.setStatus('current')
hh3cDhcpServer2FreeEntry = MibTableRow((1, 3, 6, 1, 4, 1, 25506, 2, 122, 2, 11, 1), ).setIndexNames((0, "HH3C-DHCP4-MIB", "hh3cDhcpServer2PoolIndex"), (0, "HH3C-DHCP4-MIB", "hh3cDhcpServer2FreeStart"))
if mibBuilder.loadTexts: hh3cDhcpServer2FreeEntry.setStatus('current')
hh3cDhcpServer2FreeStart = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 122, 2, 11, 1, 1), InetAddressIPv4())
if mibBuilder.loadTexts: hh3cDhcpServer2FreeStart.setStatus('current')
hh3cDhcpServer2FreeEnd = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 122, 2, 11, 1, 2), InetAddressIPv4()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cDhcpServer2FreeEnd.setStatus('current')
hh3cDhcpServer2ConflictTable = MibTable((1, 3, 6, 1, 4, 1, 25506, 2, 122, 2, 12), )
if mibBuilder.loadTexts: hh3cDhcpServer2ConflictTable.setStatus('current')
hh3cDhcpServer2ConflictEntry = MibTableRow((1, 3, 6, 1, 4, 1, 25506, 2, 122, 2, 12, 1), ).setIndexNames((0, "HH3C-DHCP4-MIB", "hh3cDhcpServer2PoolIndex"), (0, "HH3C-DHCP4-MIB", "hh3cDhcpServer2ConflictIP"))
if mibBuilder.loadTexts: hh3cDhcpServer2ConflictEntry.setStatus('current')
hh3cDhcpServer2ConflictIP = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 122, 2, 12, 1, 1), InetAddressIPv4())
if mibBuilder.loadTexts: hh3cDhcpServer2ConflictIP.setStatus('current')
hh3cDhcpServer2ConflictType = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 122, 2, 12, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("detectByServer", 1), ("detectByClient", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cDhcpServer2ConflictType.setStatus('current')
hh3cDhcpServer2ConflictTime = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 122, 2, 12, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 19))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cDhcpServer2ConflictTime.setStatus('current')
hh3cDhcpServer2ConflictRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 122, 2, 12, 1, 4), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cDhcpServer2ConflictRowStatus.setStatus('current')
hh3cDhcpServer2ExpiredTable = MibTable((1, 3, 6, 1, 4, 1, 25506, 2, 122, 2, 13), )
if mibBuilder.loadTexts: hh3cDhcpServer2ExpiredTable.setStatus('current')
hh3cDhcpServer2ExpiredEntry = MibTableRow((1, 3, 6, 1, 4, 1, 25506, 2, 122, 2, 13, 1), ).setIndexNames((0, "HH3C-DHCP4-MIB", "hh3cDhcpServer2PoolIndex"), (0, "HH3C-DHCP4-MIB", "hh3cDhcpServer2ExpiredIP"))
if mibBuilder.loadTexts: hh3cDhcpServer2ExpiredEntry.setStatus('current')
hh3cDhcpServer2ExpiredIP = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 122, 2, 13, 1, 1), InetAddressIPv4())
if mibBuilder.loadTexts: hh3cDhcpServer2ExpiredIP.setStatus('current')
hh3cDhcpServer2ExpiredClientId = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 122, 2, 13, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(4, 254))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cDhcpServer2ExpiredClientId.setStatus('current')
hh3cDhcpServer2ExpiredTime = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 122, 2, 13, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 19))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cDhcpServer2ExpiredTime.setStatus('current')
hh3cDhcpServer2ExpiredRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 122, 2, 13, 1, 4), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cDhcpServer2ExpiredRowStatus.setStatus('current')
hh3cDhcpServer2IPInUseTable = MibTable((1, 3, 6, 1, 4, 1, 25506, 2, 122, 2, 14), )
if mibBuilder.loadTexts: hh3cDhcpServer2IPInUseTable.setStatus('current')
hh3cDhcpServer2IPInUseEntry = MibTableRow((1, 3, 6, 1, 4, 1, 25506, 2, 122, 2, 14, 1), ).setIndexNames((0, "HH3C-DHCP4-MIB", "hh3cDhcpServer2PoolIndex"), (0, "HH3C-DHCP4-MIB", "hh3cDhcpServer2IPInUseIP"))
if mibBuilder.loadTexts: hh3cDhcpServer2IPInUseEntry.setStatus('current')
hh3cDhcpServer2IPInUseIP = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 122, 2, 14, 1, 1), InetAddressIPv4())
if mibBuilder.loadTexts: hh3cDhcpServer2IPInUseIP.setStatus('current')
hh3cDhcpServer2IPInUseClientId = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 122, 2, 14, 1, 2), OctetString().subtype(subtypeSpec=ConstraintsUnion(ValueSizeConstraint(0, 0), ValueSizeConstraint(4, 254), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cDhcpServer2IPInUseClientId.setStatus('current')
hh3cDhcpServer2IPInUseHardAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 122, 2, 14, 1, 3), OctetString().subtype(subtypeSpec=ConstraintsUnion(ValueSizeConstraint(0, 0), ValueSizeConstraint(4, 39), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cDhcpServer2IPInUseHardAddr.setStatus('current')
hh3cDhcpServer2IPInUseHardType = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 122, 2, 14, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("default", 1), ("ethernet", 2), ("tokenRing", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cDhcpServer2IPInUseHardType.setStatus('current')
hh3cDhcpServer2IPInUseVlanId = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 122, 2, 14, 1, 5), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(1, 4094), ValueRangeConstraint(65535, 65535), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cDhcpServer2IPInUseVlanId.setStatus('current')
hh3cDhcpServer2IPInUseEndLease = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 122, 2, 14, 1, 6), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 19))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cDhcpServer2IPInUseEndLease.setStatus('current')
hh3cDhcpServer2IPInUseType = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 122, 2, 14, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("staticUnallocated", 1), ("staticOffered", 2), ("staticCommitted", 3), ("autoOffered", 4), ("autoCommitted", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cDhcpServer2IPInUseType.setStatus('current')
hh3cDhcpServer2IPInUseIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 122, 2, 14, 1, 8), InterfaceIndexOrZero()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cDhcpServer2IPInUseIfIndex.setStatus('current')
hh3cDhcpServer2IPInUseRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 122, 2, 14, 1, 9), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cDhcpServer2IPInUseRowStatus.setStatus('current')
hh3cDhcpServer2DefOptGrpTable = MibTable((1, 3, 6, 1, 4, 1, 25506, 2, 122, 2, 15), )
if mibBuilder.loadTexts: hh3cDhcpServer2DefOptGrpTable.setStatus('current')
hh3cDhcpServer2DefOptGrpEntry = MibTableRow((1, 3, 6, 1, 4, 1, 25506, 2, 122, 2, 15, 1), ).setIndexNames((0, "HH3C-DHCP4-MIB", "hh3cDhcpServer2PoolIndex"), (0, "HH3C-DHCP4-MIB", "hh3cDhcpServer2DefOptGrpClass"))
if mibBuilder.loadTexts: hh3cDhcpServer2DefOptGrpEntry.setStatus('current')
hh3cDhcpServer2DefOptGrpClass = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 122, 2, 15, 1, 1), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 63)))
if mibBuilder.loadTexts: hh3cDhcpServer2DefOptGrpClass.setStatus('current')
hh3cDhcpServer2DefOptGrpId = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 122, 2, 15, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 32768))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cDhcpServer2DefOptGrpId.setStatus('current')
hh3cDhcpServer2DefOptGrpStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 122, 2, 15, 1, 3), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cDhcpServer2DefOptGrpStatus.setStatus('current')
hh3cDhcpServer2ValidClassTable = MibTable((1, 3, 6, 1, 4, 1, 25506, 2, 122, 2, 16), )
if mibBuilder.loadTexts: hh3cDhcpServer2ValidClassTable.setStatus('current')
hh3cDhcpServer2ValidClassEntry = MibTableRow((1, 3, 6, 1, 4, 1, 25506, 2, 122, 2, 16, 1), ).setIndexNames((0, "HH3C-DHCP4-MIB", "hh3cDhcpServer2PoolIndex"), (0, "HH3C-DHCP4-MIB", "hh3cDhcpServer2ValidClassName"))
if mibBuilder.loadTexts: hh3cDhcpServer2ValidClassEntry.setStatus('current')
hh3cDhcpServer2ValidClassName = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 122, 2, 16, 1, 1), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 63)))
if mibBuilder.loadTexts: hh3cDhcpServer2ValidClassName.setStatus('current')
hh3cDhcpServer2ValidClassStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 122, 2, 16, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cDhcpServer2ValidClassStatus.setStatus('current')
hh3cDhcpServer2RuleHwAddrTable = MibTable((1, 3, 6, 1, 4, 1, 25506, 2, 122, 2, 17), )
if mibBuilder.loadTexts: hh3cDhcpServer2RuleHwAddrTable.setStatus('current')
hh3cDhcpServer2RuleHwAddrEntry = MibTableRow((1, 3, 6, 1, 4, 1, 25506, 2, 122, 2, 17, 1), ).setIndexNames((0, "HH3C-DHCP4-MIB", "hh3cDhcpServer2ClassName"), (0, "HH3C-DHCP4-MIB", "hh3cDhcpServer2RuleHwAddrNumber"))
if mibBuilder.loadTexts: hh3cDhcpServer2RuleHwAddrEntry.setStatus('current')
hh3cDhcpServer2RuleHwAddrNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 122, 2, 17, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 16)))
if mibBuilder.loadTexts: hh3cDhcpServer2RuleHwAddrNumber.setStatus('current')
hh3cDhcpServer2RuleHwAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 122, 2, 17, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(4, 39))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cDhcpServer2RuleHwAddress.setStatus('current')
hh3cDhcpServer2RuleHwAddrMask = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 122, 2, 17, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(4, 39))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cDhcpServer2RuleHwAddrMask.setStatus('current')
hh3cDhcpServer2RuleHwAddrType = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 122, 2, 17, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255)).clone(1)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cDhcpServer2RuleHwAddrType.setStatus('current')
hh3cDhcpServer2RuleHwAddrStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 122, 2, 17, 1, 5), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cDhcpServer2RuleHwAddrStatus.setStatus('current')
hh3cDhcpServer2OptionGroupTable = MibTable((1, 3, 6, 1, 4, 1, 25506, 2, 122, 2, 18), )
if mibBuilder.loadTexts: hh3cDhcpServer2OptionGroupTable.setStatus('current')
hh3cDhcpServer2OptionGroupEntry = MibTableRow((1, 3, 6, 1, 4, 1, 25506, 2, 122, 2, 18, 1), ).setIndexNames((0, "HH3C-DHCP4-MIB", "hh3cDhcpServer2OptionGroupId"))
if mibBuilder.loadTexts: hh3cDhcpServer2OptionGroupEntry.setStatus('current')
hh3cDhcpServer2OptionGroupId = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 122, 2, 18, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 32768)))
if mibBuilder.loadTexts: hh3cDhcpServer2OptionGroupId.setStatus('current')
hh3cDhcpServer2OptionGroupStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 122, 2, 18, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cDhcpServer2OptionGroupStatus.setStatus('current')
hh3cDhcpServer2OptionTable = MibTable((1, 3, 6, 1, 4, 1, 25506, 2, 122, 2, 19), )
if mibBuilder.loadTexts: hh3cDhcpServer2OptionTable.setStatus('current')
hh3cDhcpServer2OptionEntry = MibTableRow((1, 3, 6, 1, 4, 1, 25506, 2, 122, 2, 19, 1), ).setIndexNames((0, "HH3C-DHCP4-MIB", "hh3cDhcpServer2OptionGroupId"), (0, "HH3C-DHCP4-MIB", "hh3cDhcpServer2OptionCode"))
if mibBuilder.loadTexts: hh3cDhcpServer2OptionEntry.setStatus('current')
hh3cDhcpServer2OptionCode = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 122, 2, 19, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(2, 254)))
if mibBuilder.loadTexts: hh3cDhcpServer2OptionCode.setStatus('current')
hh3cDhcpServer2OptionType = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 122, 2, 19, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("ascii", 1), ("hex", 2), ("ip", 3)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cDhcpServer2OptionType.setStatus('current')
hh3cDhcpServer2OptionAscii = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 122, 2, 19, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cDhcpServer2OptionAscii.setStatus('current')
hh3cDhcpServer2OptionHexStr = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 122, 2, 19, 1, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 510))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cDhcpServer2OptionHexStr.setStatus('current')
hh3cDhcpServer2OptionIPStr = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 122, 2, 19, 1, 5), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 127))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cDhcpServer2OptionIPStr.setStatus('current')
hh3cDhcpServer2OptionRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 122, 2, 19, 1, 6), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cDhcpServer2OptionRowStatus.setStatus('current')
hh3cDhcpRelay2ScalarObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 25506, 2, 122, 3))
hh3cDhcpRelay2ConfigGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 25506, 2, 122, 3, 1))
hh3cDhcpRelay2UserInfoRecord = MibScalar((1, 3, 6, 1, 4, 1, 25506, 2, 122, 3, 1, 1), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hh3cDhcpRelay2UserInfoRecord.setStatus('current')
hh3cDhcpRelay2UserInfoRefresh = MibScalar((1, 3, 6, 1, 4, 1, 25506, 2, 122, 3, 1, 2), TruthValue().clone('true')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hh3cDhcpRelay2UserInfoRefresh.setStatus('current')
hh3cDhcpRelay2UserInfoFlushTime = MibScalar((1, 3, 6, 1, 4, 1, 25506, 2, 122, 3, 1, 3), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 120))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hh3cDhcpRelay2UserInfoFlushTime.setStatus('current')
hh3cDhcpRelay2ReleaseAddr = MibScalar((1, 3, 6, 1, 4, 1, 25506, 2, 122, 3, 1, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 47))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hh3cDhcpRelay2ReleaseAddr.setStatus('current')
hh3cDhcpRelay2StatisticsGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 25506, 2, 122, 3, 2))
hh3cDhcpRelay2RxClientNum = MibScalar((1, 3, 6, 1, 4, 1, 25506, 2, 122, 3, 2, 1), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cDhcpRelay2RxClientNum.setStatus('current')
hh3cDhcpRelay2TxClientNum = MibScalar((1, 3, 6, 1, 4, 1, 25506, 2, 122, 3, 2, 2), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cDhcpRelay2TxClientNum.setStatus('current')
hh3cDhcpRelay2RxServerNum = MibScalar((1, 3, 6, 1, 4, 1, 25506, 2, 122, 3, 2, 3), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cDhcpRelay2RxServerNum.setStatus('current')
hh3cDhcpRelay2TxServerNum = MibScalar((1, 3, 6, 1, 4, 1, 25506, 2, 122, 3, 2, 4), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cDhcpRelay2TxServerNum.setStatus('current')
hh3cDhcpRelay2BadNum = MibScalar((1, 3, 6, 1, 4, 1, 25506, 2, 122, 3, 2, 5), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cDhcpRelay2BadNum.setStatus('current')
hh3cDhcpRelay2BootpRequestNum = MibScalar((1, 3, 6, 1, 4, 1, 25506, 2, 122, 3, 2, 6), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cDhcpRelay2BootpRequestNum.setStatus('current')
hh3cDhcpRelay2DiscoverNum = MibScalar((1, 3, 6, 1, 4, 1, 25506, 2, 122, 3, 2, 7), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cDhcpRelay2DiscoverNum.setStatus('current')
hh3cDhcpRelay2RequestNum = MibScalar((1, 3, 6, 1, 4, 1, 25506, 2, 122, 3, 2, 8), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cDhcpRelay2RequestNum.setStatus('current')
hh3cDhcpRelay2DeclineNum = MibScalar((1, 3, 6, 1, 4, 1, 25506, 2, 122, 3, 2, 9), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cDhcpRelay2DeclineNum.setStatus('current')
hh3cDhcpRelay2ReleaseNum = MibScalar((1, 3, 6, 1, 4, 1, 25506, 2, 122, 3, 2, 10), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cDhcpRelay2ReleaseNum.setStatus('current')
hh3cDhcpRelay2InformNum = MibScalar((1, 3, 6, 1, 4, 1, 25506, 2, 122, 3, 2, 11), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cDhcpRelay2InformNum.setStatus('current')
hh3cDhcpRelay2BootpReplyNum = MibScalar((1, 3, 6, 1, 4, 1, 25506, 2, 122, 3, 2, 12), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cDhcpRelay2BootpReplyNum.setStatus('current')
hh3cDhcpRelay2OfferNum = MibScalar((1, 3, 6, 1, 4, 1, 25506, 2, 122, 3, 2, 13), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cDhcpRelay2OfferNum.setStatus('current')
hh3cDhcpRelay2AckNum = MibScalar((1, 3, 6, 1, 4, 1, 25506, 2, 122, 3, 2, 14), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cDhcpRelay2AckNum.setStatus('current')
hh3cDhcpRelay2NakNum = MibScalar((1, 3, 6, 1, 4, 1, 25506, 2, 122, 3, 2, 15), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cDhcpRelay2NakNum.setStatus('current')
hh3cDhcpRelay2Tables = MibIdentifier((1, 3, 6, 1, 4, 1, 25506, 2, 122, 4))
hh3cDhcpRelay2IfConfigTable = MibTable((1, 3, 6, 1, 4, 1, 25506, 2, 122, 4, 1), )
if mibBuilder.loadTexts: hh3cDhcpRelay2IfConfigTable.setStatus('current')
hh3cDhcpRelay2IfConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 25506, 2, 122, 4, 1, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: hh3cDhcpRelay2IfConfigEntry.setStatus('current')
hh3cDhcpRelay2IfSelectRelay = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 122, 4, 1, 1, 1), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hh3cDhcpRelay2IfSelectRelay.setStatus('current')
hh3cDhcpRelay2IfCheckMac = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 122, 4, 1, 1, 2), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hh3cDhcpRelay2IfCheckMac.setStatus('current')
hh3cDhcpRelay2IfOpt82Enable = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 122, 4, 1, 1, 3), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hh3cDhcpRelay2IfOpt82Enable.setStatus('current')
hh3cDhcpRelay2IfOpt82Strategy = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 122, 4, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("drop", 1), ("keep", 2), ("replace", 3))).clone('replace')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hh3cDhcpRelay2IfOpt82Strategy.setStatus('current')
hh3cDhcpRelay2IfOpt82CIDMode = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 122, 4, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("normal", 1), ("verbose", 2), ("userDefine", 3))).clone('normal')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hh3cDhcpRelay2IfOpt82CIDMode.setStatus('current')
hh3cDhcpRelay2IfOpt82CIDNodeType = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 122, 4, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("invalid", 1), ("mac", 2), ("sysname", 3), ("userDefine", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hh3cDhcpRelay2IfOpt82CIDNodeType.setStatus('current')
hh3cDhcpRelay2IfOpt82CIDNodeStr = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 122, 4, 1, 1, 7), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 50))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hh3cDhcpRelay2IfOpt82CIDNodeStr.setStatus('current')
hh3cDhcpRelay2IfOpt82CIDStr = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 122, 4, 1, 1, 8), OctetString().subtype(subtypeSpec=ConstraintsUnion(ValueSizeConstraint(0, 0), ValueSizeConstraint(3, 63), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hh3cDhcpRelay2IfOpt82CIDStr.setStatus('current')
hh3cDhcpRelay2IfOpt82CIDFormat = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 122, 4, 1, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("hex", 1), ("ascii", 2), ("undefine", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hh3cDhcpRelay2IfOpt82CIDFormat.setStatus('current')
hh3cDhcpRelay2IfOpt82RIDMode = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 122, 4, 1, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("normal", 1), ("sysname", 2), ("userDefine", 3))).clone('normal')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hh3cDhcpRelay2IfOpt82RIDMode.setStatus('current')
hh3cDhcpRelay2IfOpt82RIDStr = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 122, 4, 1, 1, 11), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 63))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hh3cDhcpRelay2IfOpt82RIDStr.setStatus('current')
hh3cDhcpRelay2IfOpt82RIDFormat = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 122, 4, 1, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("hex", 1), ("ascii", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hh3cDhcpRelay2IfOpt82RIDFormat.setStatus('current')
hh3cDhcpRelay2SrvAddrTable = MibTable((1, 3, 6, 1, 4, 1, 25506, 2, 122, 4, 2), )
if mibBuilder.loadTexts: hh3cDhcpRelay2SrvAddrTable.setStatus('current')
hh3cDhcpRelay2SrvAddrEntry = MibTableRow((1, 3, 6, 1, 4, 1, 25506, 2, 122, 4, 2, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "HH3C-DHCP4-MIB", "hh3cDhcpRelay2SrvAddrIP"))
if mibBuilder.loadTexts: hh3cDhcpRelay2SrvAddrEntry.setStatus('current')
hh3cDhcpRelay2SrvAddrIP = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 122, 4, 2, 1, 1), InetAddressIPv4())
if mibBuilder.loadTexts: hh3cDhcpRelay2SrvAddrIP.setStatus('current')
hh3cDhcpRelay2SrvAddrRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 122, 4, 2, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cDhcpRelay2SrvAddrRowStatus.setStatus('current')
hh3cDhcpRelay2UserInfoTable = MibTable((1, 3, 6, 1, 4, 1, 25506, 2, 122, 4, 3), )
if mibBuilder.loadTexts: hh3cDhcpRelay2UserInfoTable.setStatus('current')
hh3cDhcpRelay2UserInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 25506, 2, 122, 4, 3, 1), ).setIndexNames((0, "HH3C-DHCP4-MIB", "hh3cDhcpRelay2UserInfoVpnIndex"), (0, "HH3C-DHCP4-MIB", "hh3cDhcpRelay2UserInfoIpAddr"))
if mibBuilder.loadTexts: hh3cDhcpRelay2UserInfoEntry.setStatus('current')
hh3cDhcpRelay2UserInfoVpnIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 122, 4, 3, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 65534)))
if mibBuilder.loadTexts: hh3cDhcpRelay2UserInfoVpnIndex.setStatus('current')
hh3cDhcpRelay2UserInfoIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 122, 4, 3, 1, 2), InetAddressIPv4())
if mibBuilder.loadTexts: hh3cDhcpRelay2UserInfoIpAddr.setStatus('current')
hh3cDhcpRelay2UserInfoMacAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 122, 4, 3, 1, 3), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cDhcpRelay2UserInfoMacAddr.setStatus('current')
hh3cDhcpRelay2UserInfoIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 122, 4, 3, 1, 4), InterfaceIndexOrZero()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cDhcpRelay2UserInfoIfIndex.setStatus('current')
hh3cDhcpRelay2UserInfoRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 122, 4, 3, 1, 5), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cDhcpRelay2UserInfoRowStatus.setStatus('current')
mibBuilder.exportSymbols("HH3C-DHCP4-MIB", hh3cDhcpServer2IfApplyPoolName=hh3cDhcpServer2IfApplyPoolName, hh3cDhcpServer2RuleHwAddress=hh3cDhcpServer2RuleHwAddress, hh3cDhcpRelay2BadNum=hh3cDhcpRelay2BadNum, hh3cDhcpRelay2DiscoverNum=hh3cDhcpRelay2DiscoverNum, hh3cDhcpServer2DefOptGrpStatus=hh3cDhcpServer2DefOptGrpStatus, hh3cDhcpServer2ExpiredBindNum=hh3cDhcpServer2ExpiredBindNum, hh3cDhcpServer2IgnoreBootp=hh3cDhcpServer2IgnoreBootp, hh3cDhcpRelay2SrvAddrEntry=hh3cDhcpRelay2SrvAddrEntry, hh3cDhcpServer2PoolClassEnd=hh3cDhcpServer2PoolClassEnd, hh3cDhcpRelay2BootpReplyNum=hh3cDhcpRelay2BootpReplyNum, hh3cDhcpRelay2Tables=hh3cDhcpRelay2Tables, hh3cDhcpRelay2IfConfigTable=hh3cDhcpRelay2IfConfigTable, hh3cDhcpServer2IPInUseType=hh3cDhcpServer2IPInUseType, hh3cDhcpRelay2IfOpt82Enable=hh3cDhcpRelay2IfOpt82Enable, hh3cDhcpServer2PoolStaticHType=hh3cDhcpServer2PoolStaticHType, hh3cDhcpRelay2ReleaseAddr=hh3cDhcpRelay2ReleaseAddr, hh3cDhcpServer2ForbidStart=hh3cDhcpServer2ForbidStart, hh3cDhcpServer2DefOptGrpEntry=hh3cDhcpServer2DefOptGrpEntry, hh3cDhcpRelay2ReleaseNum=hh3cDhcpRelay2ReleaseNum, hh3cDhcpServer2IfApplyPoolEntry=hh3cDhcpServer2IfApplyPoolEntry, hh3cDhcpServer2PoolOptRowStatus=hh3cDhcpServer2PoolOptRowStatus, hh3cDhcpServer2DefOptGrpId=hh3cDhcpServer2DefOptGrpId, hh3cDhcpRelay2IfOpt82CIDMode=hh3cDhcpRelay2IfOpt82CIDMode, hh3cDhcpServer2DefOptGrpClass=hh3cDhcpServer2DefOptGrpClass, hh3cDhcpServer2TotalPoolUsage=hh3cDhcpServer2TotalPoolUsage, hh3cDhcpServer2PoolNextServer=hh3cDhcpServer2PoolNextServer, hh3cDhcpRelay2IfOpt82CIDNodeType=hh3cDhcpRelay2IfOpt82CIDNodeType, hh3cDhcpServer2PoolClassStatus=hh3cDhcpServer2PoolClassStatus, hh3cDhcpServer2DefOptGrpTable=hh3cDhcpServer2DefOptGrpTable, hh3cDhcpServer2ConflictType=hh3cDhcpServer2ConflictType, hh3cDhcpServer2ValidClassTable=hh3cDhcpServer2ValidClassTable, hh3cDhcpServer2IPInUseHardAddr=hh3cDhcpServer2IPInUseHardAddr, hh3cDhcpServer2ConflictRowStatus=hh3cDhcpServer2ConflictRowStatus, hh3cDhcpServer2OptionGroupStatus=hh3cDhcpServer2OptionGroupStatus, hh3cDhcpServer2Enabled=hh3cDhcpServer2Enabled, hh3cDhcpServer2PoolOptionTable=hh3cDhcpServer2PoolOptionTable, hh3cDhcpServer2RuleEntry=hh3cDhcpServer2RuleEntry, hh3cDhcpServer2AutoBindNum=hh3cDhcpServer2AutoBindNum, hh3cDhcpServer2PoolNetwork=hh3cDhcpServer2PoolNetwork, hh3cDhcpServer2PoolLeaseSecond=hh3cDhcpServer2PoolLeaseSecond, hh3cDhcpServer2ManualBindNum=hh3cDhcpServer2ManualBindNum, hh3cDhcpServer2PoolClassTable=hh3cDhcpServer2PoolClassTable, hh3cDhcpServer2IPInUseIP=hh3cDhcpServer2IPInUseIP, hh3cDhcpServer2PoolVoiceFailStr=hh3cDhcpServer2PoolVoiceFailStr, hh3cDhcpRelay2IfOpt82RIDMode=hh3cDhcpRelay2IfOpt82RIDMode, hh3cDhcpServer2RuleTable=hh3cDhcpServer2RuleTable, hh3cDhcpServer2ConflictIP=hh3cDhcpServer2ConflictIP, hh3cDhcpServer2ConflictTable=hh3cDhcpServer2ConflictTable, hh3cDhcpServer2PoolClassName=hh3cDhcpServer2PoolClassName, hh3cDhcpRelay2IfOpt82CIDFormat=hh3cDhcpRelay2IfOpt82CIDFormat, hh3cDhcpServer2OptionGroupId=hh3cDhcpServer2OptionGroupId, hh3cDhcpServer2ReleaseNum=hh3cDhcpServer2ReleaseNum, hh3cDhcpServer2RuleOptHexStr=hh3cDhcpServer2RuleOptHexStr, PYSNMP_MODULE_ID=hh3cDhcp4, hh3cDhcpServer2PoolForbidTable=hh3cDhcpServer2PoolForbidTable, hh3cDhcpServer2RuleOptOffset=hh3cDhcpServer2RuleOptOffset, hh3cDhcpServer2RuleHwAddrNumber=hh3cDhcpServer2RuleHwAddrNumber, hh3cDhcpRelay2ConfigGroup=hh3cDhcpRelay2ConfigGroup, hh3cDhcpServer2ClassName=hh3cDhcpServer2ClassName, hh3cDhcpServer2IPInUseEndLease=hh3cDhcpServer2IPInUseEndLease, hh3cDhcpServer2PoolSecNwMask=hh3cDhcpServer2PoolSecNwMask, hh3cDhcpServer2PoolVoiceVlanEnbl=hh3cDhcpServer2PoolVoiceVlanEnbl, hh3cDhcpServer2OptionGroupEntry=hh3cDhcpServer2OptionGroupEntry, hh3cDhcpRelay2DeclineNum=hh3cDhcpRelay2DeclineNum, hh3cDhcpRelay2OfferNum=hh3cDhcpRelay2OfferNum, hh3cDhcpServer2RuleHwAddrMask=hh3cDhcpServer2RuleHwAddrMask, hh3cDhcpServer2PoolBimsKeyStr=hh3cDhcpServer2PoolBimsKeyStr, hh3cDhcpServer2PoolStaticCID=hh3cDhcpServer2PoolStaticCID, hh3cDhcpServer2PoolOptCode=hh3cDhcpServer2PoolOptCode, hh3cDhcpRelay2AckNum=hh3cDhcpRelay2AckNum, hh3cDhcpServer2PoolVerifyClass=hh3cDhcpServer2PoolVerifyClass, hh3cDhcpServer2PoolTable=hh3cDhcpServer2PoolTable, hh3cDhcpServer2ConfigGroup=hh3cDhcpServer2ConfigGroup, hh3cDhcpServer2BootpReplyRfc1048=hh3cDhcpServer2BootpReplyRfc1048, hh3cDhcpServer2PoolOptAscii=hh3cDhcpServer2PoolOptAscii, hh3cDhcpServer2PoolLeaseTime=hh3cDhcpServer2PoolLeaseTime, hh3cDhcpRelay2IfSelectRelay=hh3cDhcpRelay2IfSelectRelay, hh3cDhcpServer2Opt82Enabled=hh3cDhcpServer2Opt82Enabled, hh3cDhcpServer2ValidClassStatus=hh3cDhcpServer2ValidClassStatus, hh3cDhcpServer2PoolSecNwTable=hh3cDhcpServer2PoolSecNwTable, hh3cDhcpServer2PoolSecNwGwIP=hh3cDhcpServer2PoolSecNwGwIP, hh3cDhcpServer2FreeEntry=hh3cDhcpServer2FreeEntry, hh3cDhcpServer2StatGroup=hh3cDhcpServer2StatGroup, hh3cDhcpServer2PoolBootFileName=hh3cDhcpServer2PoolBootFileName, hh3cDhcpRelay2InformNum=hh3cDhcpRelay2InformNum, hh3cDhcpServer2PoolNetworkMask=hh3cDhcpServer2PoolNetworkMask, hh3cDhcpServer2PoolEndAddr=hh3cDhcpServer2PoolEndAddr, hh3cDhcpServer2ConflictTime=hh3cDhcpServer2ConflictTime, hh3cDhcpRelay2IfOpt82CIDNodeStr=hh3cDhcpRelay2IfOpt82CIDNodeStr, hh3cDhcpServer2OptionRowStatus=hh3cDhcpServer2OptionRowStatus, hh3cDhcpServer2PoolLeaseDay=hh3cDhcpServer2PoolLeaseDay, hh3cDhcpRelay2UserInfoIpAddr=hh3cDhcpRelay2UserInfoIpAddr, hh3cDhcpServer2PoolLeaseMinute=hh3cDhcpServer2PoolLeaseMinute, hh3cDhcpServer2PoolForbidIP=hh3cDhcpServer2PoolForbidIP, hh3cDhcpServer2PingNumber=hh3cDhcpServer2PingNumber, hh3cDhcpRelay2UserInfoEntry=hh3cDhcpRelay2UserInfoEntry, hh3cDhcpServer2PoolVoiceFailIP=hh3cDhcpServer2PoolVoiceFailIP, hh3cDhcpServer2PoolOptIPStr=hh3cDhcpServer2PoolOptIPStr, hh3cDhcpServer2PoolBimsPort=hh3cDhcpServer2PoolBimsPort, hh3cDhcpServer2PoolStaticTable=hh3cDhcpServer2PoolStaticTable, hh3cDhcpRelay2IfOpt82RIDStr=hh3cDhcpRelay2IfOpt82RIDStr, hh3cDhcpServer2ForbidTable=hh3cDhcpServer2ForbidTable, hh3cDhcpServer2ConflictNum=hh3cDhcpServer2ConflictNum, hh3cDhcpServer2OptionType=hh3cDhcpServer2OptionType, hh3cDhcpRelay2UserInfoRefresh=hh3cDhcpRelay2UserInfoRefresh, hh3cDhcpServer2ForbidVpnName=hh3cDhcpServer2ForbidVpnName, hh3cDhcpServer2FreeEnd=hh3cDhcpServer2FreeEnd, hh3cDhcpServer2RuleHwAddrStatus=hh3cDhcpServer2RuleHwAddrStatus, hh3cDhcpServer2RuleHwAddrTable=hh3cDhcpServer2RuleHwAddrTable, hh3cDhcpServer2PoolSecNwStatus=hh3cDhcpServer2PoolSecNwStatus, hh3cDhcpServer2PoolTftpDomName=hh3cDhcpServer2PoolTftpDomName, hh3cDhcpServer2PoolOptionEntry=hh3cDhcpServer2PoolOptionEntry, hh3cDhcpServer2PoolEntry=hh3cDhcpServer2PoolEntry, hh3cDhcpServer2PoolClassEntry=hh3cDhcpServer2PoolClassEntry, hh3cDhcpRelay2BootpRequestNum=hh3cDhcpRelay2BootpRequestNum, hh3cDhcpServer2PoolNetbiosType=hh3cDhcpServer2PoolNetbiosType, hh3cDhcpServer2ExpiredEntry=hh3cDhcpServer2ExpiredEntry, hh3cDhcpServer2ExpiredIP=hh3cDhcpServer2ExpiredIP, hh3cDhcpServer2BootpRequestNum=hh3cDhcpServer2BootpRequestNum, hh3cDhcpServer2IPInUseClientId=hh3cDhcpServer2IPInUseClientId, hh3cDhcpServer2ClassRowStatus=hh3cDhcpServer2ClassRowStatus, hh3cDhcpServer2BadNum=hh3cDhcpServer2BadNum, hh3cDhcpRelay2IfOpt82Strategy=hh3cDhcpRelay2IfOpt82Strategy, hh3cDhcpServer2IPInUseVlanId=hh3cDhcpServer2IPInUseVlanId, hh3cDhcpRelay2SrvAddrRowStatus=hh3cDhcpRelay2SrvAddrRowStatus, hh3cDhcpServer2OptionIPStr=hh3cDhcpServer2OptionIPStr, hh3cDhcpRelay2IfCheckMac=hh3cDhcpRelay2IfCheckMac, hh3cDhcpServer2PoolStaticHAddr=hh3cDhcpServer2PoolStaticHAddr, hh3cDhcpServer2ExpiredTime=hh3cDhcpServer2ExpiredTime, hh3cDhcpServer2ValidClassName=hh3cDhcpServer2ValidClassName, hh3cDhcpServer2AlwaysBroadcast=hh3cDhcpServer2AlwaysBroadcast, hh3cDhcpServer2DeclineNum=hh3cDhcpServer2DeclineNum, hh3cDhcpServer2IPInUseEntry=hh3cDhcpServer2IPInUseEntry, hh3cDhcpServer2PoolDNSIP=hh3cDhcpServer2PoolDNSIP, hh3cDhcpServer2PoolBimsIP=hh3cDhcpServer2PoolBimsIP, hh3cDhcpServer2RuleHwAddrEntry=hh3cDhcpServer2RuleHwAddrEntry, hh3cDhcpServer2PoolNumber=hh3cDhcpServer2PoolNumber, hh3cDhcpServer2NakNum=hh3cDhcpServer2NakNum, hh3cDhcpServer2PoolGatewayIP=hh3cDhcpServer2PoolGatewayIP, hh3cDhcpRelay2RequestNum=hh3cDhcpRelay2RequestNum, hh3cDhcpRelay2TxServerNum=hh3cDhcpRelay2TxServerNum, hh3cDhcpServer2RuleRowStatus=hh3cDhcpServer2RuleRowStatus, hh3cDhcpRelay2StatisticsGroup=hh3cDhcpRelay2StatisticsGroup, hh3cDhcpServer2ForbidEntry=hh3cDhcpServer2ForbidEntry, hh3cDhcpServer2PoolLeaseUnlimit=hh3cDhcpServer2PoolLeaseUnlimit, hh3cDhcpServer2PoolStaticMask=hh3cDhcpServer2PoolStaticMask, hh3cDhcpRelay2UserInfoRowStatus=hh3cDhcpRelay2UserInfoRowStatus, hh3cDhcpServer2ForbidRowStatus=hh3cDhcpServer2ForbidRowStatus, hh3cDhcpServer2RequestNum=hh3cDhcpServer2RequestNum, hh3cDhcpServer2ExpiredClientId=hh3cDhcpServer2ExpiredClientId, hh3cDhcpRelay2SrvAddrTable=hh3cDhcpRelay2SrvAddrTable, hh3cDhcpServer2ScalarObjects=hh3cDhcpServer2ScalarObjects, hh3cDhcpServer2PoolIndex=hh3cDhcpServer2PoolIndex, hh3cDhcpServer2PoolClassStart=hh3cDhcpServer2PoolClassStart, hh3cDhcpServer2PoolForbidEntry=hh3cDhcpServer2PoolForbidEntry, hh3cDhcpServer2RuleOptMask=hh3cDhcpServer2RuleOptMask, hh3cDhcpServer2PoolSecondDNSIP=hh3cDhcpServer2PoolSecondDNSIP, hh3cDhcpServer2OptionEntry=hh3cDhcpServer2OptionEntry, hh3cDhcpServer2DiscoverNum=hh3cDhcpServer2DiscoverNum, hh3cDhcpServer2OptionGroupTable=hh3cDhcpServer2OptionGroupTable, hh3cDhcpServer2RuleOptCode=hh3cDhcpServer2RuleOptCode, hh3cDhcpServer2PoolRowStatus=hh3cDhcpServer2PoolRowStatus, hh3cDhcpServer2PoolStaticStatus=hh3cDhcpServer2PoolStaticStatus, hh3cDhcpRelay2RxClientNum=hh3cDhcpRelay2RxClientNum, hh3cDhcpRelay2UserInfoTable=hh3cDhcpRelay2UserInfoTable, hh3cDhcpServer2PoolVoiceVlanId=hh3cDhcpServer2PoolVoiceVlanId, hh3cDhcpServer2PoolSecNwEntry=hh3cDhcpServer2PoolSecNwEntry, hh3cDhcpRelay2UserInfoRecord=hh3cDhcpRelay2UserInfoRecord, hh3cDhcpServer2IPInUseHardType=hh3cDhcpServer2IPInUseHardType, hh3cDhcpServer2PoolSecNw=hh3cDhcpServer2PoolSecNw, hh3cDhcpRelay2IfConfigEntry=hh3cDhcpRelay2IfConfigEntry, hh3cDhcpServer2ExpiredRowStatus=hh3cDhcpServer2ExpiredRowStatus, hh3cDhcpServer2Tables=hh3cDhcpServer2Tables, hh3cDhcpRelay2UserInfoVpnIndex=hh3cDhcpRelay2UserInfoVpnIndex, hh3cDhcpServer2FreeTable=hh3cDhcpServer2FreeTable, hh3cDhcpServer2PoolStaticEntry=hh3cDhcpServer2PoolStaticEntry, hh3cDhcpServer2OptionHexStr=hh3cDhcpServer2OptionHexStr, hh3cDhcpServer2PoolName=hh3cDhcpServer2PoolName, hh3cDhcpServer2OptionCode=hh3cDhcpServer2OptionCode, hh3cDhcpRelay2UserInfoFlushTime=hh3cDhcpRelay2UserInfoFlushTime, hh3cDhcpRelay2NakNum=hh3cDhcpRelay2NakNum, hh3cDhcpServer2PoolForbidStatus=hh3cDhcpServer2PoolForbidStatus, hh3cDhcpServer2OptionTable=hh3cDhcpServer2OptionTable, hh3cDhcpServer2AckNum=hh3cDhcpServer2AckNum, hh3cDhcpServer2PoolStaticIP=hh3cDhcpServer2PoolStaticIP, hh3cDhcpServer2InformNum=hh3cDhcpServer2InformNum, hh3cDhcpServer2PoolStartAddr=hh3cDhcpServer2PoolStartAddr, hh3cDhcpServer2RuleNumber=hh3cDhcpServer2RuleNumber, hh3cDhcpServer2PoolNbnsIP=hh3cDhcpServer2PoolNbnsIP, hh3cDhcpServer2PoolPrimaryDNSIP=hh3cDhcpServer2PoolPrimaryDNSIP, hh3cDhcpServer2PoolVoiceNCPIP=hh3cDhcpServer2PoolVoiceNCPIP, hh3cDhcpRelay2RxServerNum=hh3cDhcpRelay2RxServerNum, hh3cDhcpServer2PoolLeaseHour=hh3cDhcpServer2PoolLeaseHour, hh3cDhcpServer2IfApplyPoolTable=hh3cDhcpServer2IfApplyPoolTable, hh3cDhcpServer2RuleOptLength=hh3cDhcpServer2RuleOptLength, hh3cDhcpRelay2TxClientNum=hh3cDhcpRelay2TxClientNum, hh3cDhcpRelay2IfOpt82RIDFormat=hh3cDhcpRelay2IfOpt82RIDFormat, hh3cDhcpServer2OptionAscii=hh3cDhcpServer2OptionAscii, hh3cDhcpServer2FreeStart=hh3cDhcpServer2FreeStart, hh3cDhcpServer2OfferNum=hh3cDhcpServer2OfferNum, hh3cDhcpServer2IPInUseIfIndex=hh3cDhcpServer2IPInUseIfIndex, hh3cDhcpServer2ConflictEntry=hh3cDhcpServer2ConflictEntry, hh3cDhcpServer2ExpiredTable=hh3cDhcpServer2ExpiredTable, hh3cDhcpServer2IPInUseRowStatus=hh3cDhcpServer2IPInUseRowStatus, hh3cDhcpServer2BootpReplyNum=hh3cDhcpServer2BootpReplyNum, hh3cDhcpServer2PoolOptType=hh3cDhcpServer2PoolOptType, hh3cDhcpServer2ForbidEnd=hh3cDhcpServer2ForbidEnd, hh3cDhcpServer2PoolTftpIP=hh3cDhcpServer2PoolTftpIP, hh3cDhcpServer2ClassEntry=hh3cDhcpServer2ClassEntry, hh3cDhcpServer2PoolOptHexStr=hh3cDhcpServer2PoolOptHexStr, hh3cDhcpRelay2UserInfoIfIndex=hh3cDhcpRelay2UserInfoIfIndex, hh3cDhcpRelay2UserInfoMacAddr=hh3cDhcpRelay2UserInfoMacAddr, hh3cDhcp4=hh3cDhcp4, hh3cDhcpServer2IPInUseTable=hh3cDhcpServer2IPInUseTable, hh3cDhcpServer2PoolVpnName=hh3cDhcpServer2PoolVpnName, hh3cDhcpServer2ClassTable=hh3cDhcpServer2ClassTable, hh3cDhcpServer2ValidClassEntry=hh3cDhcpServer2ValidClassEntry, hh3cDhcpServer2RuleHwAddrType=hh3cDhcpServer2RuleHwAddrType, hh3cDhcpRelay2IfOpt82CIDStr=hh3cDhcpRelay2IfOpt82CIDStr, hh3cDhcpServer2PoolVoiceAsIP=hh3cDhcpServer2PoolVoiceAsIP, hh3cDhcpRelay2ScalarObjects=hh3cDhcpRelay2ScalarObjects, hh3cDhcpServer2PingTimeout=hh3cDhcpServer2PingTimeout, hh3cDhcpRelay2SrvAddrIP=hh3cDhcpRelay2SrvAddrIP, hh3cDhcpServer2PoolDomainName=hh3cDhcpServer2PoolDomainName)
