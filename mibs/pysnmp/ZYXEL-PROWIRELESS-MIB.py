#
# PySNMP MIB module ZYXEL-PROWIRELESS-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/ZYXEL-PROWIRELESS-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 21:45:26 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, OctetString, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "Integer", "OctetString", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsIntersection, SingleValueConstraint, ValueSizeConstraint, ValueRangeConstraint, ConstraintsUnion = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsIntersection", "SingleValueConstraint", "ValueSizeConstraint", "ValueRangeConstraint", "ConstraintsUnion")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
IpAddress, Bits, ObjectIdentity, MibIdentifier, Counter64, Unsigned32, Gauge32, Integer32, ModuleIdentity, enterprises, iso, NotificationType, Counter32, TimeTicks, MibScalar, MibTable, MibTableRow, MibTableColumn = mibBuilder.importSymbols("SNMPv2-SMI", "IpAddress", "Bits", "ObjectIdentity", "MibIdentifier", "Counter64", "Unsigned32", "Gauge32", "Integer32", "ModuleIdentity", "enterprises", "iso", "NotificationType", "Counter32", "TimeTicks", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn")
DisplayString, TruthValue, DateAndTime, PhysAddress, RowStatus, RowPointer, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TruthValue", "DateAndTime", "PhysAddress", "RowStatus", "RowPointer", "TextualConvention")
class DisplayString(OctetString):
    pass

zyxel = MibIdentifier((1, 3, 6, 1, 4, 1, 890))
products = MibIdentifier((1, 3, 6, 1, 4, 1, 890, 1))
proWireless = MibIdentifier((1, 3, 6, 1, 4, 1, 890, 1, 9))
pwCommon = MibIdentifier((1, 3, 6, 1, 4, 1, 890, 1, 9, 1))
pwTraps = MibIdentifier((1, 3, 6, 1, 4, 1, 890, 1, 9, 2))
pwStations = MibIdentifier((1, 3, 6, 1, 4, 1, 890, 1, 9, 3))
pwAPDetect = MibIdentifier((1, 3, 6, 1, 4, 1, 890, 1, 9, 4))
pwWlanControl = MibIdentifier((1, 3, 6, 1, 4, 1, 890, 1, 9, 5))
pwWlanExtControl = MibIdentifier((1, 3, 6, 1, 4, 1, 890, 1, 9, 6))
pwSwVersion = MibScalar((1, 3, 6, 1, 4, 1, 890, 1, 9, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pwSwVersion.setStatus('mandatory')
pwCfgVersion = MibScalar((1, 3, 6, 1, 4, 1, 890, 1, 9, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pwCfgVersion.setStatus('mandatory')
pwTftpServer = MibScalar((1, 3, 6, 1, 4, 1, 890, 1, 9, 1, 3), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pwTftpServer.setStatus('mandatory')
pwTftpFileName = MibScalar((1, 3, 6, 1, 4, 1, 890, 1, 9, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pwTftpFileName.setStatus('mandatory')
pwTftpFileType = MibScalar((1, 3, 6, 1, 4, 1, 890, 1, 9, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("software", 1), ("romfile", 2), ("textconfig", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pwTftpFileType.setStatus('mandatory')
pwTftpOpStatus = MibScalar((1, 3, 6, 1, 4, 1, 890, 1, 9, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4))).clone(namedValues=NamedValues(("idle", 0), ("inprogress", 1), ("failed", 2), ("success", 3), ("timeout", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pwTftpOpStatus.setStatus('mandatory')
pwTftpOpCommand = MibScalar((1, 3, 6, 1, 4, 1, 890, 1, 9, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("upload", 1), ("download", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pwTftpOpCommand.setStatus('mandatory')
pwSystemReboot = MibScalar((1, 3, 6, 1, 4, 1, 890, 1, 9, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("running", 0), ("reboot", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pwSystemReboot.setStatus('mandatory')
pwAutoCfgMessage = MibScalar((1, 3, 6, 1, 4, 1, 890, 1, 9, 1, 9), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pwAutoCfgMessage.setStatus('mandatory')
pwStationTable = MibTable((1, 3, 6, 1, 4, 1, 890, 1, 9, 3, 2), )
if mibBuilder.loadTexts: pwStationTable.setStatus('current')
pwStationEntry = MibTableRow((1, 3, 6, 1, 4, 1, 890, 1, 9, 3, 2, 1), ).setIndexNames((0, "ZYXEL-PROWIRELESS-MIB", "pwStationIndex"))
if mibBuilder.loadTexts: pwStationEntry.setStatus('current')
pwStationIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 890, 1, 9, 3, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647)))
if mibBuilder.loadTexts: pwStationIndex.setStatus('current')
pwStationMacAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 890, 1, 9, 3, 2, 1, 2), OctetString().clone('public')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pwStationMacAddress.setStatus('current')
pwStationAssociateTime = MibTableColumn((1, 3, 6, 1, 4, 1, 890, 1, 9, 3, 2, 1, 3), OctetString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pwStationAssociateTime.setStatus('current')
pwStationSSID = MibTableColumn((1, 3, 6, 1, 4, 1, 890, 1, 9, 3, 2, 1, 4), OctetString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pwStationSSID.setStatus('current')
pwStationStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 890, 1, 9, 3, 2, 1, 5), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pwStationStatus.setStatus('current')
pwAPDetectInterval = MibScalar((1, 3, 6, 1, 4, 1, 890, 1, 9, 4, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0))).clone(namedValues=NamedValues(("disable", 0)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pwAPDetectInterval.setStatus('current')
pwAPDetectTable = MibTable((1, 3, 6, 1, 4, 1, 890, 1, 9, 4, 2), )
if mibBuilder.loadTexts: pwAPDetectTable.setStatus('current')
pwAPDetectEntry = MibTableRow((1, 3, 6, 1, 4, 1, 890, 1, 9, 4, 2, 1), ).setIndexNames((0, "ZYXEL-PROWIRELESS-MIB", "pwAPDetectIndex"))
if mibBuilder.loadTexts: pwAPDetectEntry.setStatus('current')
pwAPDetectIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 890, 1, 9, 4, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pwAPDetectIndex.setStatus('current')
pwAPDetectSSID = MibTableColumn((1, 3, 6, 1, 4, 1, 890, 1, 9, 4, 2, 1, 2), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pwAPDetectSSID.setStatus('current')
pwAPDetectMacAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 890, 1, 9, 4, 2, 1, 3), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pwAPDetectMacAddress.setStatus('current')
pwAPDetectChannel = MibTableColumn((1, 3, 6, 1, 4, 1, 890, 1, 9, 4, 2, 1, 4), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pwAPDetectChannel.setStatus('current')
pwAPDetectSignal = MibTableColumn((1, 3, 6, 1, 4, 1, 890, 1, 9, 4, 2, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pwAPDetectSignal.setStatus('current')
pwAPDetectNetwork = MibTableColumn((1, 3, 6, 1, 4, 1, 890, 1, 9, 4, 2, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("infra", 0), ("adhoc", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pwAPDetectNetwork.setStatus('current')
pwAPDetectSecurity = MibTableColumn((1, 3, 6, 1, 4, 1, 890, 1, 9, 4, 2, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("none", 0), ("wep", 1), ("wpa", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pwAPDetectSecurity.setStatus('current')
pwAPDetectStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 890, 1, 9, 4, 2, 1, 8), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pwAPDetectStatus.setStatus('current')
pwMacFilterActive = MibScalar((1, 3, 6, 1, 4, 1, 890, 1, 9, 5, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pwMacFilterActive.setStatus('current')
pwMacFilterAction = MibScalar((1, 3, 6, 1, 4, 1, 890, 1, 9, 5, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("accept", 1), ("discard", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pwMacFilterAction.setStatus('current')
pwMacFilterTable = MibTable((1, 3, 6, 1, 4, 1, 890, 1, 9, 5, 3), )
if mibBuilder.loadTexts: pwMacFilterTable.setStatus('current')
pwMacFilterEntry = MibTableRow((1, 3, 6, 1, 4, 1, 890, 1, 9, 5, 3, 1), ).setIndexNames((0, "ZYXEL-PROWIRELESS-MIB", "pwMacFilterIndex"))
if mibBuilder.loadTexts: pwMacFilterEntry.setStatus('current')
pwMacFilterIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 890, 1, 9, 5, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pwMacFilterIndex.setStatus('current')
pwMacFilterMacAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 890, 1, 9, 5, 3, 1, 2), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pwMacFilterMacAddress.setStatus('current')
pwMacFilterStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 890, 1, 9, 5, 3, 1, 3), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pwMacFilterStatus.setStatus('current')
pwWlanTxPower = MibScalar((1, 3, 6, 1, 4, 1, 890, 1, 9, 5, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 4, 8))).clone(namedValues=NamedValues(("disabled", 0), ("full", 1), ("half", 2), ("quarter", 4), ("eighth", 8)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pwWlanTxPower.setStatus('current')
pwTrapControl = MibIdentifier((1, 3, 6, 1, 4, 1, 890, 1, 9, 2, 1))
pwTrapVariables = MibIdentifier((1, 3, 6, 1, 4, 1, 890, 1, 9, 2, 2))
pwTrapTypes = MibIdentifier((1, 3, 6, 1, 4, 1, 890, 1, 9, 2, 3))
pwWirelessTraps = MibIdentifier((1, 3, 6, 1, 4, 1, 890, 1, 9, 2, 3, 1))
pwSecurityTraps = MibIdentifier((1, 3, 6, 1, 4, 1, 890, 1, 9, 2, 3, 2))
pwTFTPTraps = MibIdentifier((1, 3, 6, 1, 4, 1, 890, 1, 9, 2, 3, 3))
pwTrapWirelessStatus = MibScalar((1, 3, 6, 1, 4, 1, 890, 1, 9, 2, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pwTrapWirelessStatus.setStatus('current')
pwTrapSecurityStatus = MibScalar((1, 3, 6, 1, 4, 1, 890, 1, 9, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pwTrapSecurityStatus.setStatus('current')
pwTrapTFTPStatus = MibScalar((1, 3, 6, 1, 4, 1, 890, 1, 9, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pwTrapTFTPStatus.setStatus('current')
pwTrapGenericMessage = MibScalar((1, 3, 6, 1, 4, 1, 890, 1, 9, 2, 2, 1), DisplayString()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: pwTrapGenericMessage.setStatus('current')
pwTrapMACAddress = MibScalar((1, 3, 6, 1, 4, 1, 890, 1, 9, 2, 2, 2), DisplayString()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: pwTrapMACAddress.setStatus('current')
pwTrapWlanSSID = MibScalar((1, 3, 6, 1, 4, 1, 890, 1, 9, 2, 2, 3), DisplayString()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: pwTrapWlanSSID.setStatus('current')
pwWlanStaAssociation = NotificationType((1, 3, 6, 1, 4, 1, 890, 1, 9, 2, 3, 1, 1))
if mibBuilder.loadTexts: pwWlanStaAssociation.setStatus('current')
pwWlanStaDisassociation = NotificationType((1, 3, 6, 1, 4, 1, 890, 1, 9, 2, 3, 1, 2))
if mibBuilder.loadTexts: pwWlanStaDisassociation.setStatus('current')
pwWlanStaAuthFail = NotificationType((1, 3, 6, 1, 4, 1, 890, 1, 9, 2, 3, 2, 1))
if mibBuilder.loadTexts: pwWlanStaAuthFail.setStatus('current')
pwTFTPStatus = NotificationType((1, 3, 6, 1, 4, 1, 890, 1, 9, 2, 3, 3, 1)).setObjects(("ZYXEL-PROWIRELESS-MIB", "pwTrapGenericMessage"), ("ZYXEL-PROWIRELESS-MIB", "pwTftpOpStatus"), ("ZYXEL-PROWIRELESS-MIB", "pwTftpServer"), ("ZYXEL-PROWIRELESS-MIB", "pwTftpFileName"), ("ZYXEL-PROWIRELESS-MIB", "pwTftpFileType"), ("ZYXEL-PROWIRELESS-MIB", "pwTftpOpCommand"))
if mibBuilder.loadTexts: pwTFTPStatus.setStatus('current')
mibBuilder.exportSymbols("ZYXEL-PROWIRELESS-MIB", pwWlanExtControl=pwWlanExtControl, products=products, pwStationIndex=pwStationIndex, pwAPDetectNetwork=pwAPDetectNetwork, pwTrapGenericMessage=pwTrapGenericMessage, pwStationSSID=pwStationSSID, pwTFTPStatus=pwTFTPStatus, pwMacFilterEntry=pwMacFilterEntry, pwTrapVariables=pwTrapVariables, pwAPDetectTable=pwAPDetectTable, pwAPDetectEntry=pwAPDetectEntry, pwSystemReboot=pwSystemReboot, pwTftpFileName=pwTftpFileName, pwStationTable=pwStationTable, pwAPDetectMacAddress=pwAPDetectMacAddress, pwMacFilterIndex=pwMacFilterIndex, pwMacFilterStatus=pwMacFilterStatus, pwTftpServer=pwTftpServer, pwCfgVersion=pwCfgVersion, pwAPDetectSSID=pwAPDetectSSID, pwTrapWlanSSID=pwTrapWlanSSID, pwTrapWirelessStatus=pwTrapWirelessStatus, pwWlanStaDisassociation=pwWlanStaDisassociation, pwCommon=pwCommon, pwTrapMACAddress=pwTrapMACAddress, pwWlanStaAuthFail=pwWlanStaAuthFail, pwTftpOpCommand=pwTftpOpCommand, pwStationMacAddress=pwStationMacAddress, pwMacFilterTable=pwMacFilterTable, pwWirelessTraps=pwWirelessTraps, pwSecurityTraps=pwSecurityTraps, pwAPDetect=pwAPDetect, pwAPDetectSecurity=pwAPDetectSecurity, pwTrapTypes=pwTrapTypes, pwMacFilterActive=pwMacFilterActive, pwWlanStaAssociation=pwWlanStaAssociation, pwTrapSecurityStatus=pwTrapSecurityStatus, pwAPDetectInterval=pwAPDetectInterval, pwTrapTFTPStatus=pwTrapTFTPStatus, pwTFTPTraps=pwTFTPTraps, pwAPDetectSignal=pwAPDetectSignal, DisplayString=DisplayString, zyxel=zyxel, pwAPDetectChannel=pwAPDetectChannel, pwAutoCfgMessage=pwAutoCfgMessage, pwStationStatus=pwStationStatus, pwMacFilterAction=pwMacFilterAction, pwWlanTxPower=pwWlanTxPower, pwTrapControl=pwTrapControl, pwTftpFileType=pwTftpFileType, pwWlanControl=pwWlanControl, pwAPDetectStatus=pwAPDetectStatus, pwSwVersion=pwSwVersion, pwTftpOpStatus=pwTftpOpStatus, pwMacFilterMacAddress=pwMacFilterMacAddress, proWireless=proWireless, pwTraps=pwTraps, pwStationEntry=pwStationEntry, pwAPDetectIndex=pwAPDetectIndex, pwStations=pwStations, pwStationAssociateTime=pwStationAssociateTime)
