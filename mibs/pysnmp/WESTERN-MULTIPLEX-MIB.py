#
# PySNMP MIB module WESTERN-MULTIPLEX-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/WESTERN-MULTIPLEX-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 21:29:20 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, Integer, OctetString = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "Integer", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueRangeConstraint, ConstraintsUnion, ConstraintsIntersection, SingleValueConstraint, ValueSizeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueRangeConstraint", "ConstraintsUnion", "ConstraintsIntersection", "SingleValueConstraint", "ValueSizeConstraint")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
Unsigned32, MibScalar, MibTable, MibTableRow, MibTableColumn, TimeTicks, Gauge32, IpAddress, NotificationType, NotificationType, MibIdentifier, ModuleIdentity, iso, ObjectIdentity, Counter64, Bits, Integer32, Counter32, enterprises = mibBuilder.importSymbols("SNMPv2-SMI", "Unsigned32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "TimeTicks", "Gauge32", "IpAddress", "NotificationType", "NotificationType", "MibIdentifier", "ModuleIdentity", "iso", "ObjectIdentity", "Counter64", "Bits", "Integer32", "Counter32", "enterprises")
DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention")
western_multiplex = MibIdentifier((1, 3, 6, 1, 4, 1, 3727)).setLabel("western-multiplex")
tsunami100_06 = MibIdentifier((1, 3, 6, 1, 4, 1, 3727, 20)).setLabel("tsunami100-06")
system = MibIdentifier((1, 3, 6, 1, 4, 1, 3727, 20, 10))
component = MibIdentifier((1, 3, 6, 1, 4, 1, 3727, 20, 10, 1))
clock = MibIdentifier((1, 3, 6, 1, 4, 1, 3727, 20, 10, 2))
boot = MibIdentifier((1, 3, 6, 1, 4, 1, 3727, 20, 10, 3))
log = MibIdentifier((1, 3, 6, 1, 4, 1, 3727, 20, 10, 4))
trap = MibIdentifier((1, 3, 6, 1, 4, 1, 3727, 20, 10, 5))
auth = MibIdentifier((1, 3, 6, 1, 4, 1, 3727, 20, 10, 6))
compSerialNumber = MibScalar((1, 3, 6, 1, 4, 1, 3727, 20, 10, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(12, 12)).setFixedLength(12)).setMaxAccess("readonly")
if mibBuilder.loadTexts: compSerialNumber.setStatus('mandatory')
compIDTable = MibTable((1, 3, 6, 1, 4, 1, 3727, 20, 10, 1, 10), )
if mibBuilder.loadTexts: compIDTable.setStatus('mandatory')
compIDEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3727, 20, 10, 1, 10, 1), ).setIndexNames((0, "WESTERN-MULTIPLEX-MIB", "compIDSerialNum"), (0, "WESTERN-MULTIPLEX-MIB", "compIDType"))
if mibBuilder.loadTexts: compIDEntry.setStatus('mandatory')
compIDSerialNum = MibTableColumn((1, 3, 6, 1, 4, 1, 3727, 20, 10, 1, 10, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(32, 32)).setFixedLength(32)).setMaxAccess("readonly")
if mibBuilder.loadTexts: compIDSerialNum.setStatus('mandatory')
compIDType = MibTableColumn((1, 3, 6, 1, 4, 1, 3727, 20, 10, 1, 10, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("unknown", 1), ("mux-50200", 2), ("transmitter-50300", 3), ("transmitter-pa-50301", 4), ("receiver-50400", 5), ("service-channel-unit-50500", 6), ("network-management-unit-50900", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: compIDType.setStatus('mandatory')
compIDLocation = MibTableColumn((1, 3, 6, 1, 4, 1, 3727, 20, 10, 1, 10, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 10, 11))).clone(namedValues=NamedValues(("unknown", 1), ("integral", 2), ("removed", 3), ("side-a", 10), ("side-b", 11)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: compIDLocation.setStatus('mandatory')
compIDState = MibTableColumn((1, 3, 6, 1, 4, 1, 3727, 20, 10, 1, 10, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 10))).clone(namedValues=NamedValues(("removed", 1), ("unknown", 2), ("normal", 3), ("abnormal", 4), ("force-reset", 10)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: compIDState.setStatus('mandatory')
clockDateTime = MibScalar((1, 3, 6, 1, 4, 1, 3727, 20, 10, 2, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(11, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: clockDateTime.setStatus('mandatory')
clockTZOffset = MibScalar((1, 3, 6, 1, 4, 1, 3727, 20, 10, 2, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(31, 31)).setFixedLength(31)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: clockTZOffset.setStatus('mandatory')
bootReboot = MibScalar((1, 3, 6, 1, 4, 1, 3727, 20, 10, 3, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 10))).clone(namedValues=NamedValues(("normal", 1), ("force-reset", 10)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bootReboot.setStatus('mandatory')
bootDate = MibScalar((1, 3, 6, 1, 4, 1, 3727, 20, 10, 3, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(11, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: bootDate.setStatus('mandatory')
bootPreviousDate = MibScalar((1, 3, 6, 1, 4, 1, 3727, 20, 10, 3, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(11, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: bootPreviousDate.setStatus('mandatory')
bootRebootCount = MibScalar((1, 3, 6, 1, 4, 1, 3727, 20, 10, 3, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bootRebootCount.setStatus('mandatory')
bootClearDate = MibScalar((1, 3, 6, 1, 4, 1, 3727, 20, 10, 3, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(11, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bootClearDate.setStatus('mandatory')
logMaxSize = MibScalar((1, 3, 6, 1, 4, 1, 3727, 20, 10, 4, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: logMaxSize.setStatus('mandatory')
logCurrentSize = MibScalar((1, 3, 6, 1, 4, 1, 3727, 20, 10, 4, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: logCurrentSize.setStatus('mandatory')
logIndexNumber = MibScalar((1, 3, 6, 1, 4, 1, 3727, 20, 10, 4, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: logIndexNumber.setStatus('mandatory')
logCurrentHEALTH = MibScalar((1, 3, 6, 1, 4, 1, 3727, 20, 10, 4, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("normal-health", 1), ("warning-health", 2), ("minor-health", 3), ("major-health", 4), ("critical-health", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: logCurrentHEALTH.setStatus('mandatory')
logRadioHEALTH = MibScalar((1, 3, 6, 1, 4, 1, 3727, 20, 10, 4, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("normal-health", 1), ("warning-health", 2), ("minor-health", 3), ("major-health", 4), ("critical-health", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: logRadioHEALTH.setStatus('mandatory')
logSeverityFilter = MibScalar((1, 3, 6, 1, 4, 1, 3727, 20, 10, 4, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("normal", 1), ("warning", 2), ("minor", 3), ("major", 4), ("critical", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: logSeverityFilter.setStatus('mandatory')
logFilteredSpecific = MibScalar((1, 3, 6, 1, 4, 1, 3727, 20, 10, 4, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: logFilteredSpecific.setStatus('mandatory')
logFilteredSeverity = MibScalar((1, 3, 6, 1, 4, 1, 3727, 20, 10, 4, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: logFilteredSeverity.setStatus('mandatory')
logFilteredRules = MibScalar((1, 3, 6, 1, 4, 1, 3727, 20, 10, 4, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: logFilteredRules.setStatus('mandatory')
logViewPageSize = MibScalar((1, 3, 6, 1, 4, 1, 3727, 20, 10, 4, 15), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: logViewPageSize.setStatus('mandatory')
logViewPageControl = MibScalar((1, 3, 6, 1, 4, 1, 3727, 20, 10, 4, 16), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: logViewPageControl.setStatus('mandatory')
logViewSeverityFilter = MibScalar((1, 3, 6, 1, 4, 1, 3727, 20, 10, 4, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16))).clone(namedValues=NamedValues(("normal", 1), ("warning", 2), ("minor", 3), ("major", 4), ("critical", 5), ("normal-health", 6), ("warning-health", 7), ("minor-health", 8), ("major-health", 9), ("critical-health", 10), ("other", 11), ("all-non-health", 12), ("all-health-NORMALIZED", 13), ("all-health-not-NORMALIZED", 14), ("all-health", 15), ("all", 16)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: logViewSeverityFilter.setStatus('mandatory')
logViewMethod = MibScalar((1, 3, 6, 1, 4, 1, 3727, 20, 10, 4, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("chronological", 1), ("severity", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: logViewMethod.setStatus('mandatory')
logViewDirection = MibScalar((1, 3, 6, 1, 4, 1, 3727, 20, 10, 4, 19), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("critical-to-normal", 1), ("normal-to-critical", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: logViewDirection.setStatus('mandatory')
logViewAge = MibScalar((1, 3, 6, 1, 4, 1, 3727, 20, 10, 4, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("oldest-to-newest", 1), ("newest-to-oldest", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: logViewAge.setStatus('mandatory')
logViewEvents = MibScalar((1, 3, 6, 1, 4, 1, 3727, 20, 10, 4, 21), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: logViewEvents.setStatus('mandatory')
logTrapSeverityFilter = MibScalar((1, 3, 6, 1, 4, 1, 3727, 20, 10, 4, 30), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14))).clone(namedValues=NamedValues(("normal", 1), ("warning", 2), ("minor", 3), ("major", 4), ("critical", 5), ("normal-health", 6), ("warning-health", 7), ("minor-health", 8), ("major-health", 9), ("critical-health", 10), ("all-non-health", 11), ("all-health", 12), ("all", 13), ("none", 14)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: logTrapSeverityFilter.setStatus('mandatory')
logTrapHysteresis = MibScalar((1, 3, 6, 1, 4, 1, 3727, 20, 10, 4, 31), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 120))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: logTrapHysteresis.setStatus('mandatory')
logRecTable = MibTable((1, 3, 6, 1, 4, 1, 3727, 20, 10, 4, 40), )
if mibBuilder.loadTexts: logRecTable.setStatus('mandatory')
logRecEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3727, 20, 10, 4, 40, 1), ).setIndexNames((0, "WESTERN-MULTIPLEX-MIB", "logRecIndexNumber"))
if mibBuilder.loadTexts: logRecEntry.setStatus('mandatory')
logRecIndexNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 3727, 20, 10, 4, 40, 1, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: logRecIndexNumber.setStatus('mandatory')
logRecSeverity = MibTableColumn((1, 3, 6, 1, 4, 1, 3727, 20, 10, 4, 40, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 50))).clone(namedValues=NamedValues(("normal", 1), ("warning", 2), ("minor", 3), ("major", 4), ("critical", 5), ("normal-health", 6), ("warning-health", 7), ("minor-health", 8), ("major-health", 9), ("critical-health", 10), ("normal-NORMALIZED", 11), ("warning-NORMALIZED", 12), ("minor-NORMALIZED", 13), ("major-NORMALIZED", 14), ("critical-NORMALIZED", 15), ("other", 50)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: logRecSeverity.setStatus('mandatory')
logRecEvent = MibTableColumn((1, 3, 6, 1, 4, 1, 3727, 20, 10, 4, 40, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34))).clone(namedValues=NamedValues(("ualarm-alarm-xition", 1), ("ualarm-normal-xition", 2), ("agent-oid-err", 3), ("agent-intern-err", 4), ("trap-encode-err", 5), ("internal-err", 6), ("malloc-err", 7), ("buf-pool-err", 8), ("unreach-trap-mgr", 10), ("agent-authen-fail", 11), ("nv-write-err", 12), ("nv-read-err", 13), ("rtc-needs-setting", 14), ("enet-ip-err", 15), ("trapFlow-closed", 16), ("link-ppp-port-up", 17), ("link-ppp-port-down", 18), ("rtc-set-via-mib", 19), ("rtc-set-via-menu", 20), ("dup-route-on-if", 21), ("socket-err", 22), ("radio-down", 23), ("radio-alarm-summary", 24), ("radio-t1-input-alarm", 25), ("radio-t1-line-driver-alarm", 26), ("radio-t1-code-violation-alarm", 27), ("radio-sync-alarm", 28), ("radio-ber", 29), ("radio-ais", 30), ("radio-fan-1-alarm", 31), ("radio-fan-2-alarm", 32), ("radio-receiver-synth-alarm", 33), ("radio-transmitter-synth-alarm", 34)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: logRecEvent.setStatus('mandatory')
logRecDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 3727, 20, 10, 4, 40, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: logRecDescription.setStatus('mandatory')
logGenericTrap = NotificationType((1, 3, 6, 1, 4, 1, 3727, 20, 10, 4) + (0,1)).setObjects(("WESTERN-MULTIPLEX-MIB", "trapSequenceNumber"), ("WESTERN-MULTIPLEX-MIB", "logRecIndexNumber"), ("WESTERN-MULTIPLEX-MIB", "logRecSeverity"), ("WESTERN-MULTIPLEX-MIB", "logRecEvent"), ("WESTERN-MULTIPLEX-MIB", "logRecDescription"))
trapControl = MibScalar((1, 3, 6, 1, 4, 1, 3727, 20, 10, 5, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("disabled", 1), ("unLimited", 2), ("feedbackPinLimited", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: trapControl.setStatus('mandatory')
trapClearDate = MibScalar((1, 3, 6, 1, 4, 1, 3727, 20, 10, 5, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(11, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: trapClearDate.setStatus('mandatory')
trapMgrTable = MibTable((1, 3, 6, 1, 4, 1, 3727, 20, 10, 5, 3), )
if mibBuilder.loadTexts: trapMgrTable.setStatus('mandatory')
trapMgrEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3727, 20, 10, 5, 3, 1), ).setIndexNames((0, "WESTERN-MULTIPLEX-MIB", "trapMgrIndex"))
if mibBuilder.loadTexts: trapMgrEntry.setStatus('mandatory')
trapMgrIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3727, 20, 10, 5, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: trapMgrIndex.setStatus('mandatory')
trapMgrAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 3727, 20, 10, 5, 3, 1, 2), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: trapMgrAddress.setStatus('mandatory')
trapMgrControl = MibTableColumn((1, 3, 6, 1, 4, 1, 3727, 20, 10, 5, 3, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("both", 1), ("standard", 2), ("enterprise", 3), ("none", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: trapMgrControl.setStatus('mandatory')
trapMgrCounter = MibTableColumn((1, 3, 6, 1, 4, 1, 3727, 20, 10, 5, 3, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: trapMgrCounter.setStatus('mandatory')
trapFlow = MibScalar((1, 3, 6, 1, 4, 1, 3727, 20, 10, 5, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("open", 1), ("closed", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: trapFlow.setStatus('mandatory')
trapLastTimestamp = MibScalar((1, 3, 6, 1, 4, 1, 3727, 20, 10, 5, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(11, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: trapLastTimestamp.setStatus('mandatory')
trapWindowPeriod = MibScalar((1, 3, 6, 1, 4, 1, 3727, 20, 10, 5, 6), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: trapWindowPeriod.setStatus('mandatory')
trapMaxPerWindow = MibScalar((1, 3, 6, 1, 4, 1, 3727, 20, 10, 5, 7), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: trapMaxPerWindow.setStatus('mandatory')
trapSequenceClearDate = MibScalar((1, 3, 6, 1, 4, 1, 3727, 20, 10, 5, 10), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(11, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: trapSequenceClearDate.setStatus('mandatory')
trapSequenceNumber = MibScalar((1, 3, 6, 1, 4, 1, 3727, 20, 10, 5, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: trapSequenceNumber.setStatus('mandatory')
trapSeverityFilter = MibScalar((1, 3, 6, 1, 4, 1, 3727, 20, 10, 5, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("normal", 1), ("warning", 2), ("minor", 3), ("major", 4), ("critical", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: trapSeverityFilter.setStatus('mandatory')
trapCommunity = MibScalar((1, 3, 6, 1, 4, 1, 3727, 20, 10, 5, 13), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: trapCommunity.setStatus('mandatory')
trapFilteredSpecific = MibScalar((1, 3, 6, 1, 4, 1, 3727, 20, 10, 5, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: trapFilteredSpecific.setStatus('mandatory')
trapFilteredControl = MibScalar((1, 3, 6, 1, 4, 1, 3727, 20, 10, 5, 19), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: trapFilteredControl.setStatus('mandatory')
trapFilteredManager = MibScalar((1, 3, 6, 1, 4, 1, 3727, 20, 10, 5, 20), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: trapFilteredManager.setStatus('mandatory')
trapFilteredSeverity = MibScalar((1, 3, 6, 1, 4, 1, 3727, 20, 10, 5, 21), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: trapFilteredSeverity.setStatus('mandatory')
trapColdStartControl = MibScalar((1, 3, 6, 1, 4, 1, 3727, 20, 10, 5, 22), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: trapColdStartControl.setStatus('mandatory')
trapLinkDownControl = MibScalar((1, 3, 6, 1, 4, 1, 3727, 20, 10, 5, 23), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: trapLinkDownControl.setStatus('mandatory')
trapLinkUpControl = MibScalar((1, 3, 6, 1, 4, 1, 3727, 20, 10, 5, 24), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: trapLinkUpControl.setStatus('mandatory')
trapsDisabled = NotificationType((1, 3, 6, 1, 4, 1, 3727, 20, 10, 5) + (0,1)).setObjects(("WESTERN-MULTIPLEX-MIB", "trapSequenceNumber"), ("WESTERN-MULTIPLEX-MIB", "trapLastTimestamp"), ("WESTERN-MULTIPLEX-MIB", "trapWindowPeriod"), ("WESTERN-MULTIPLEX-MIB", "trapMaxPerWindow"))
authUnAuthIpAddr = MibScalar((1, 3, 6, 1, 4, 1, 3727, 20, 10, 6, 1), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: authUnAuthIpAddr.setStatus('mandatory')
authUnAuthCommunity = MibScalar((1, 3, 6, 1, 4, 1, 3727, 20, 10, 6, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: authUnAuthCommunity.setStatus('mandatory')
mibBuilder.exportSymbols("WESTERN-MULTIPLEX-MIB", trapMgrEntry=trapMgrEntry, trap=trap, trapFlow=trapFlow, system=system, compIDEntry=compIDEntry, clock=clock, compIDSerialNum=compIDSerialNum, trapSequenceClearDate=trapSequenceClearDate, trapSeverityFilter=trapSeverityFilter, trapLastTimestamp=trapLastTimestamp, authUnAuthCommunity=authUnAuthCommunity, trapLinkDownControl=trapLinkDownControl, compIDTable=compIDTable, bootRebootCount=bootRebootCount, trapMgrCounter=trapMgrCounter, logViewMethod=logViewMethod, logRadioHEALTH=logRadioHEALTH, logTrapSeverityFilter=logTrapSeverityFilter, logGenericTrap=logGenericTrap, trapWindowPeriod=trapWindowPeriod, logMaxSize=logMaxSize, logRecSeverity=logRecSeverity, logRecTable=logRecTable, clockDateTime=clockDateTime, trapClearDate=trapClearDate, log=log, compIDType=compIDType, logRecEntry=logRecEntry, logRecIndexNumber=logRecIndexNumber, trapSequenceNumber=trapSequenceNumber, trapFilteredSpecific=trapFilteredSpecific, trapColdStartControl=trapColdStartControl, trapMgrTable=trapMgrTable, authUnAuthIpAddr=authUnAuthIpAddr, bootPreviousDate=bootPreviousDate, logFilteredSeverity=logFilteredSeverity, trapFilteredControl=trapFilteredControl, logCurrentHEALTH=logCurrentHEALTH, trapMgrIndex=trapMgrIndex, trapFilteredSeverity=trapFilteredSeverity, compIDLocation=compIDLocation, bootReboot=bootReboot, trapCommunity=trapCommunity, trapMgrAddress=trapMgrAddress, trapFilteredManager=trapFilteredManager, logViewSeverityFilter=logViewSeverityFilter, logViewPageControl=logViewPageControl, compIDState=compIDState, logIndexNumber=logIndexNumber, logViewAge=logViewAge, logTrapHysteresis=logTrapHysteresis, trapsDisabled=trapsDisabled, boot=boot, trapControl=trapControl, logFilteredSpecific=logFilteredSpecific, logRecEvent=logRecEvent, trapLinkUpControl=trapLinkUpControl, bootDate=bootDate, tsunami100_06=tsunami100_06, auth=auth, logViewEvents=logViewEvents, logFilteredRules=logFilteredRules, trapMgrControl=trapMgrControl, bootClearDate=bootClearDate, logCurrentSize=logCurrentSize, clockTZOffset=clockTZOffset, logRecDescription=logRecDescription, logSeverityFilter=logSeverityFilter, trapMaxPerWindow=trapMaxPerWindow, component=component, compSerialNumber=compSerialNumber, western_multiplex=western_multiplex, logViewPageSize=logViewPageSize, logViewDirection=logViewDirection)
