#
# PySNMP MIB module LJ1220-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/LJ1220-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 19:57:01 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, ObjectIdentifier, OctetString = mibBuilder.importSymbols("ASN1", "Integer", "ObjectIdentifier", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueSizeConstraint, ConstraintsUnion, SingleValueConstraint, ConstraintsIntersection, ValueRangeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueSizeConstraint", "ConstraintsUnion", "SingleValueConstraint", "ConstraintsIntersection", "ValueRangeConstraint")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
iso, Counter64, Gauge32, ObjectIdentity, Unsigned32, Counter32, ModuleIdentity, TimeTicks, Bits, MibIdentifier, NotificationType, MibScalar, MibTable, MibTableRow, MibTableColumn, Integer32, IpAddress = mibBuilder.importSymbols("SNMPv2-SMI", "iso", "Counter64", "Gauge32", "ObjectIdentity", "Unsigned32", "Counter32", "ModuleIdentity", "TimeTicks", "Bits", "MibIdentifier", "NotificationType", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Integer32", "IpAddress")
DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention")
hp = MibIdentifier((1, 3, 6, 1, 4, 1, 11))
dm = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 3, 9, 4, 2))
class DisplayString(OctetString):
    pass

device = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 3, 9, 4, 2, 1))
system = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 3, 9, 4, 2, 1, 1))
settings_system = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 3, 9, 4, 2, 1, 1, 1)).setLabel("settings-system")
copier = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 3, 9, 4, 2, 1, 5))
settings_copier = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 3, 9, 4, 2, 1, 5, 1)).setLabel("settings-copier")
status_copier = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 3, 9, 4, 2, 1, 5, 2)).setLabel("status-copier")
hrm = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 3, 9, 4, 2, 3))
hrStorage = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 3, 9, 4, 2, 3, 2))
hrStorageTable = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 3, 9, 4, 2, 3, 2, 3))
hrStorageEntry = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 3, 9, 4, 2, 3, 2, 3, 1))
hrDevice = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 3, 9, 4, 2, 3, 3))
hrDeviceTable = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 3, 9, 4, 2, 3, 3, 2))
hrDeviceEntry = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 3, 9, 4, 2, 3, 3, 2, 1))
hrPrinterTable = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 3, 9, 4, 2, 3, 3, 5))
hrPrinterEntry = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 3, 9, 4, 2, 3, 3, 5, 1))
status_system = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 3, 9, 4, 2, 1, 1, 2)).setLabel("status-system")
id = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 3, 9, 4, 2, 1, 1, 3))
interface = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 3, 9, 4, 2, 1, 1, 4))
simm = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 3, 9, 4, 2, 1, 1, 4, 1))
simm1 = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 3, 9, 4, 2, 1, 1, 4, 1, 1))
simm2 = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 3, 9, 4, 2, 1, 1, 4, 1, 2))
mio = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 3, 9, 4, 2, 1, 1, 4, 3))
mio1 = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 3, 9, 4, 2, 1, 1, 4, 3, 1))
test = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 3, 9, 4, 2, 1, 1, 5))
job = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 3, 9, 4, 2, 1, 1, 6))
settings_job = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 3, 9, 4, 2, 1, 1, 6, 1)).setLabel("settings-job")
active_print_jobs = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 3, 9, 4, 2, 1, 1, 6, 2)).setLabel("active-print-jobs")
job_being_parsed = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 3, 9, 4, 2, 1, 1, 6, 2, 1)).setLabel("job-being-parsed")
job_info = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 3, 9, 4, 2, 1, 1, 6, 5)).setLabel("job-info")
job_info_attribute = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 3, 9, 4, 2, 1, 1, 6, 5, 23)).setLabel("job-info-attribute")
errorlog = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 3, 9, 4, 2, 1, 1, 11))
error1 = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 3, 9, 4, 2, 1, 1, 11, 1))
error2 = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 3, 9, 4, 2, 1, 1, 11, 2))
error3 = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 3, 9, 4, 2, 1, 1, 11, 3))
error4 = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 3, 9, 4, 2, 1, 1, 11, 4))
error5 = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 3, 9, 4, 2, 1, 1, 11, 5))
error6 = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 3, 9, 4, 2, 1, 1, 11, 6))
error7 = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 3, 9, 4, 2, 1, 1, 11, 7))
error8 = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 3, 9, 4, 2, 1, 1, 11, 8))
error9 = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 3, 9, 4, 2, 1, 1, 11, 9))
error10 = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 3, 9, 4, 2, 1, 1, 11, 10))
source_subsystem = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 3, 9, 4, 2, 1, 2)).setLabel("source-subsystem")
io = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 3, 9, 4, 2, 1, 2, 1))
settings_io = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 3, 9, 4, 2, 1, 2, 1, 1)).setLabel("settings-io")
processing_subsystem = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 3, 9, 4, 2, 1, 3)).setLabel("processing-subsystem")
pdl = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 3, 9, 4, 2, 1, 3, 3))
settings_pdl = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 3, 9, 4, 2, 1, 3, 3, 1)).setLabel("settings-pdl")
status_pdl = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 3, 9, 4, 2, 1, 3, 3, 2)).setLabel("status-pdl")
pdl_pcl = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 3, 9, 4, 2, 1, 3, 3, 3)).setLabel("pdl-pcl")
pdl_postscript = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 3, 9, 4, 2, 1, 3, 3, 4)).setLabel("pdl-postscript")
pjl = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 3, 9, 4, 2, 1, 3, 5))
destination_subsystem = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 3, 9, 4, 2, 1, 4)).setLabel("destination-subsystem")
print_engine = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 3, 9, 4, 2, 1, 4, 1)).setLabel("print-engine")
settings_prt_eng = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 3, 9, 4, 2, 1, 4, 1, 1)).setLabel("settings-prt-eng")
status_prt_eng = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 3, 9, 4, 2, 1, 4, 1, 2)).setLabel("status-prt-eng")
intray = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 3, 9, 4, 2, 1, 4, 1, 3))
settings_intray = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 3, 9, 4, 2, 1, 4, 1, 3, 1)).setLabel("settings-intray")
intrays = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 3, 9, 4, 2, 1, 4, 1, 3, 3))
intray1 = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 3, 9, 4, 2, 1, 4, 1, 3, 3, 1))
imaging = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 3, 9, 4, 2, 1, 4, 1, 6))
channel = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 3, 9, 4, 2, 1, 6))
tables = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 3, 9, 4, 2, 1, 7))
channel_table = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 3, 9, 4, 2, 1, 7, 2)).setLabel("channel-table")
channel_entry = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 3, 9, 4, 2, 1, 7, 2, 1)).setLabel("channel-entry")
scanner = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 3, 9, 4, 2, 1, 2, 2))
settings_scanner = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 3, 9, 4, 2, 1, 2, 2, 1)).setLabel("settings-scanner")
scan_calibration = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 3, 9, 4, 2, 1, 2, 2, 1, 32)).setLabel("scan-calibration")
status_scanner = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 3, 9, 4, 2, 1, 2, 2, 2)).setLabel("status-scanner")
printmib = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 3, 9, 4, 2, 2))
prtGeneral = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 3, 9, 4, 2, 2, 5))
prtGeneralTable = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 3, 9, 4, 2, 2, 5, 1))
prtGeneralEntry = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 3, 9, 4, 2, 2, 5, 1, 1))
prtCover = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 3, 9, 4, 2, 2, 6))
prtCoverTable = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 3, 9, 4, 2, 2, 6, 1))
prtCoverEntry = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 3, 9, 4, 2, 2, 6, 1, 1))
prtLocalization = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 3, 9, 4, 2, 2, 7))
prtLocalizationTable = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 3, 9, 4, 2, 2, 7, 1))
prtLocalizationEntry = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 3, 9, 4, 2, 2, 7, 1, 1))
prtStorageRefTable = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 3, 9, 4, 2, 2, 5, 2))
prtStorageRefEntry = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 3, 9, 4, 2, 2, 5, 2, 1))
prtDeviceRefTable = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 3, 9, 4, 2, 2, 5, 3))
prtDeviceRefEntry = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 3, 9, 4, 2, 2, 5, 3, 1))
prtInput = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 3, 9, 4, 2, 2, 8))
prtInputTable = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 3, 9, 4, 2, 2, 8, 2))
prtInputEntry = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 3, 9, 4, 2, 2, 8, 2, 1))
prtOutput = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 3, 9, 4, 2, 2, 9))
prtOutputTable = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 3, 9, 4, 2, 2, 9, 2))
prtOutputEntry = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 3, 9, 4, 2, 2, 9, 2, 1))
prtMarker = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 3, 9, 4, 2, 2, 10))
prtMarkerTable = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 3, 9, 4, 2, 2, 10, 2))
prtMarkerEntry = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 3, 9, 4, 2, 2, 10, 2, 1))
prtMarkerSupplies = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 3, 9, 4, 2, 2, 11))
prtMarkerSuppliesTable = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 3, 9, 4, 2, 2, 11, 1))
prtMarkerSuppliesEntry = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 3, 9, 4, 2, 2, 11, 1, 1))
prtMediaPath = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 3, 9, 4, 2, 2, 13))
prtMediaPathTable = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 3, 9, 4, 2, 2, 13, 4))
prtMediaPathEntry = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 3, 9, 4, 2, 2, 13, 4, 1))
prtChannel = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 3, 9, 4, 2, 2, 14))
prtChannelTable = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 3, 9, 4, 2, 2, 14, 1))
prtChannelEntry = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 3, 9, 4, 2, 2, 14, 1, 1))
prtInterpreter = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 3, 9, 4, 2, 2, 15))
prtInterpreterTable = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 3, 9, 4, 2, 2, 15, 1))
prtInterpreterEntry = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 3, 9, 4, 2, 2, 15, 1, 1))
prtConsoleDisplayBuffer = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 3, 9, 4, 2, 2, 16))
prtConsoleDisplayBufferTable = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 3, 9, 4, 2, 2, 16, 5))
prtConsoleDisplayBufferEntry = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 3, 9, 4, 2, 2, 16, 5, 1))
prtConsoleLights = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 3, 9, 4, 2, 2, 17))
prtConsoleLightTable = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 3, 9, 4, 2, 2, 17, 6))
prtConsoleLightEntry = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 3, 9, 4, 2, 2, 17, 6, 1))
prtAlert = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 3, 9, 4, 2, 2, 18))
prtAlertTable = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 3, 9, 4, 2, 2, 18, 1))
prtAlertEntry = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 3, 9, 4, 2, 2, 18, 1, 1))
copier_token = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 9, 4, 2, 1, 1, 1, 24), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 128))).setLabel("copier-token").setMaxAccess("readwrite")
if mibBuilder.loadTexts: copier_token.setStatus('optional')
copier_contrast = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 9, 4, 2, 1, 5, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-127, 127))).setLabel("copier-contrast").setMaxAccess("readwrite")
if mibBuilder.loadTexts: copier_contrast.setStatus('optional')
copier_reduction = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 9, 4, 2, 1, 5, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(25, 200))).setLabel("copier-reduction").setMaxAccess("readwrite")
if mibBuilder.loadTexts: copier_reduction.setStatus('optional')
copier_num_copies = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 9, 4, 2, 1, 5, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 99))).setLabel("copier-num-copies").setMaxAccess("readwrite")
if mibBuilder.loadTexts: copier_num_copies.setStatus('optional')
copier_collation = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 9, 4, 2, 1, 5, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("eCollateDisabled", 1), ("eCollateForward", 2)))).setLabel("copier-collation").setMaxAccess("readwrite")
if mibBuilder.loadTexts: copier_collation.setStatus('optional')
copier_quality = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 9, 4, 2, 1, 5, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("eCopierQualityFast", 1), ("eCopierQualityNormal", 2), ("eCopierQualityPresentation", 3), ("eCopierQualityDraft", 4)))).setLabel("copier-quality").setMaxAccess("readwrite")
if mibBuilder.loadTexts: copier_quality.setStatus('optional')
copier_adf_page_count = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 9, 4, 2, 1, 5, 1, 19), Integer32()).setLabel("copier-adf-page-count").setMaxAccess("readwrite")
if mibBuilder.loadTexts: copier_adf_page_count.setStatus('optional')
copier_print_page_count = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 9, 4, 2, 1, 5, 1, 20), Integer32()).setLabel("copier-print-page-count").setMaxAccess("readwrite")
if mibBuilder.loadTexts: copier_print_page_count.setStatus('optional')
copier_job_media_size = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 9, 4, 2, 1, 5, 1, 21), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3, 26))).clone(namedValues=NamedValues(("eUSLetter", 2), ("eUSLegal", 3), ("eISOandJISA4", 26)))).setLabel("copier-job-media-size").setMaxAccess("readwrite")
if mibBuilder.loadTexts: copier_job_media_size.setStatus('optional')
copier_job_quality = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 9, 4, 2, 1, 5, 1, 22), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("eCopierQualityFast", 1), ("eCopierQualityNormal", 2), ("eCopierQualityPresentation", 3), ("eCopierQualityDraft", 4)))).setLabel("copier-job-quality").setMaxAccess("readwrite")
if mibBuilder.loadTexts: copier_job_quality.setStatus('optional')
copier_job_collation = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 9, 4, 2, 1, 5, 1, 23), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("eCollateDisabled", 1), ("eCollateForward", 2)))).setLabel("copier-job-collation").setMaxAccess("readwrite")
if mibBuilder.loadTexts: copier_job_collation.setStatus('optional')
copier_job_num_copies = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 9, 4, 2, 1, 5, 1, 24), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 99))).setLabel("copier-job-num-copies").setMaxAccess("readwrite")
if mibBuilder.loadTexts: copier_job_num_copies.setStatus('optional')
copier_job_reduction = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 9, 4, 2, 1, 5, 1, 25), Integer32().subtype(subtypeSpec=ValueRangeConstraint(25, 200))).setLabel("copier-job-reduction").setMaxAccess("readwrite")
if mibBuilder.loadTexts: copier_job_reduction.setStatus('optional')
copier_job_contrast = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 9, 4, 2, 1, 5, 1, 26), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-127, 127))).setLabel("copier-job-contrast").setMaxAccess("readwrite")
if mibBuilder.loadTexts: copier_job_contrast.setStatus('optional')
copier_job = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 9, 4, 2, 1, 5, 1, 27), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("eCopierIdle", 1), ("eCopierStart", 2), ("eCopierActive", 3), ("eCopierAborting", 4), ("eCopierSetup", 5)))).setLabel("copier-job").setMaxAccess("readwrite")
if mibBuilder.loadTexts: copier_job.setStatus('optional')
copier_job_status = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 9, 4, 2, 1, 5, 2, 2), OctetString()).setLabel("copier-job-status").setMaxAccess("readonly")
if mibBuilder.loadTexts: copier_job_status.setStatus('optional')
hrmemorysize = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 9, 4, 2, 3, 2, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hrmemorysize.setStatus('mandatory')
hrstorageindex = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 9, 4, 2, 3, 2, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hrstorageindex.setStatus('mandatory')
hrstoragetype = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 9, 4, 2, 3, 2, 3, 1, 2), ObjectIdentifier()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hrstoragetype.setStatus('mandatory')
hrstoragedescr = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 9, 4, 2, 3, 2, 3, 1, 3), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hrstoragedescr.setStatus('mandatory')
hrstorageallocationunits = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 9, 4, 2, 3, 2, 3, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hrstorageallocationunits.setStatus('mandatory')
hrstoragesize = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 9, 4, 2, 3, 2, 3, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hrstoragesize.setStatus('mandatory')
hrstorageused = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 9, 4, 2, 3, 2, 3, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hrstorageused.setStatus('mandatory')
hrstorageallocationfailures = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 9, 4, 2, 3, 2, 3, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hrstorageallocationfailures.setStatus('mandatory')
hrdeviceindex = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 9, 4, 2, 3, 3, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hrdeviceindex.setStatus('mandatory')
hrdevicetype = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 9, 4, 2, 3, 3, 2, 1, 2), ObjectIdentifier()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hrdevicetype.setStatus('mandatory')
hrdevicedescr = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 9, 4, 2, 3, 3, 2, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hrdevicedescr.setStatus('mandatory')
hrdeviceid = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 9, 4, 2, 3, 3, 2, 1, 4), ObjectIdentifier()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hrdeviceid.setStatus('mandatory')
hrdevicestatus = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 9, 4, 2, 3, 3, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3, 5))).clone(namedValues=NamedValues(("eHrunning", 2), ("eHwarning", 3), ("eHdown", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hrdevicestatus.setStatus('mandatory')
hrdeviceerrors = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 9, 4, 2, 3, 3, 2, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hrdeviceerrors.setStatus('mandatory')
hrprinterstatus = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 9, 4, 2, 3, 3, 5, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 3, 4, 5))).clone(namedValues=NamedValues(("eHother", 1), ("eHidle", 3), ("eHprinting", 4), ("eHwarmup", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hrprinterstatus.setStatus('mandatory')
hrprinterdetectederrorstate = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 9, 4, 2, 3, 3, 5, 1, 2), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hrprinterdetectederrorstate.setStatus('mandatory')
energy_star = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 9, 4, 2, 1, 1, 1, 1), Integer32()).setLabel("energy-star").setMaxAccess("readonly")
if mibBuilder.loadTexts: energy_star.setStatus('optional')
sleep_mode = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 9, 4, 2, 1, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("eFalse", 1), ("eTrue", 2)))).setLabel("sleep-mode").setMaxAccess("readonly")
if mibBuilder.loadTexts: sleep_mode.setStatus('optional')
service_password = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 9, 4, 2, 1, 1, 1, 9), Integer32()).setLabel("service-password").setMaxAccess("writeonly")
if mibBuilder.loadTexts: service_password.setStatus('optional')
device_config_token = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 9, 4, 2, 1, 1, 1, 28), OctetString().subtype(subtypeSpec=ValueSizeConstraint(128, 128)).setFixedLength(128)).setLabel("device-config-token").setMaxAccess("readwrite")
if mibBuilder.loadTexts: device_config_token.setStatus('optional')
on_off_line = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 9, 4, 2, 1, 1, 2, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("eOnline", 1), ("eOffline", 2)))).setLabel("on-off-line").setMaxAccess("readonly")
if mibBuilder.loadTexts: on_off_line.setStatus('optional')
pysmi_continue = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 9, 4, 2, 1, 1, 2, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("eInitiateAction", 1)))).setLabel("continue").setMaxAccess("writeonly")
if mibBuilder.loadTexts: pysmi_continue.setStatus('optional')
auto_continue = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 9, 4, 2, 1, 1, 2, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("eOff", 1), ("eOn", 2)))).setLabel("auto-continue").setMaxAccess("readwrite")
if mibBuilder.loadTexts: auto_continue.setStatus('optional')
install_date = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 9, 4, 2, 1, 1, 2, 8), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 14))).setLabel("install-date").setMaxAccess("readonly")
if mibBuilder.loadTexts: install_date.setStatus('optional')
job_input_auto_continue_timeout = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 9, 4, 2, 1, 1, 2, 35), Integer32()).setLabel("job-input-auto-continue-timeout").setMaxAccess("readwrite")
if mibBuilder.loadTexts: job_input_auto_continue_timeout.setStatus('optional')
job_input_auto_continue_mode = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 9, 4, 2, 1, 1, 2, 36), OctetString()).setLabel("job-input-auto-continue-mode").setMaxAccess("readwrite")
if mibBuilder.loadTexts: job_input_auto_continue_mode.setStatus('optional')
error_log_clear = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 9, 4, 2, 1, 1, 2, 38), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("eClearErrorLog", 1)))).setLabel("error-log-clear").setMaxAccess("writeonly")
if mibBuilder.loadTexts: error_log_clear.setStatus('optional')
model_name = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 9, 4, 2, 1, 1, 3, 2), DisplayString()).setLabel("model-name").setMaxAccess("readonly")
if mibBuilder.loadTexts: model_name.setStatus('optional')
serial_number = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 9, 4, 2, 1, 1, 3, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 10))).setLabel("serial-number").setMaxAccess("readonly")
if mibBuilder.loadTexts: serial_number.setStatus('optional')
fw_rom_datecode = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 9, 4, 2, 1, 1, 3, 5), DisplayString()).setLabel("fw-rom-datecode").setMaxAccess("readonly")
if mibBuilder.loadTexts: fw_rom_datecode.setStatus('optional')
device_name = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 9, 4, 2, 1, 1, 3, 10), DisplayString()).setLabel("device-name").setMaxAccess("readwrite")
if mibBuilder.loadTexts: device_name.setStatus('optional')
device_location = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 9, 4, 2, 1, 1, 3, 11), DisplayString()).setLabel("device-location").setMaxAccess("readwrite")
if mibBuilder.loadTexts: device_location.setStatus('optional')
asset_number = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 9, 4, 2, 1, 1, 3, 12), DisplayString()).setLabel("asset-number").setMaxAccess("readwrite")
if mibBuilder.loadTexts: asset_number.setStatus('optional')
simm1_type = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 9, 4, 2, 1, 1, 4, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 9))).clone(namedValues=NamedValues(("eEmpty", 1), ("eUnknown", 2), ("eUnSupported", 3), ("eReadOnlyMemory", 4), ("eVolatileRandomAccessMemory", 5), ("eRamRom", 9)))).setLabel("simm1-type").setMaxAccess("readonly")
if mibBuilder.loadTexts: simm1_type.setStatus('optional')
simm1_capacity = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 9, 4, 2, 1, 1, 4, 1, 1, 5), Integer32()).setLabel("simm1-capacity").setMaxAccess("readonly")
if mibBuilder.loadTexts: simm1_capacity.setStatus('optional')
simm2_type = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 9, 4, 2, 1, 1, 4, 1, 2, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 9))).clone(namedValues=NamedValues(("eEmpty", 1), ("eUnknown", 2), ("eUnSupported", 3), ("eReadOnlyMemory", 4), ("eVolatileRandomAccessMemory", 5), ("eRamRom", 9)))).setLabel("simm2-type").setMaxAccess("readonly")
if mibBuilder.loadTexts: simm2_type.setStatus('optional')
simm2_capacity = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 9, 4, 2, 1, 1, 4, 1, 2, 5), Integer32()).setLabel("simm2-capacity").setMaxAccess("readonly")
if mibBuilder.loadTexts: simm2_capacity.setStatus('optional')
mio1_type = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 9, 4, 2, 1, 1, 4, 3, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 12))).clone(namedValues=NamedValues(("eEmpty", 1), ("eUnknown", 2), ("eIOCard", 12)))).setLabel("mio1-type").setMaxAccess("readonly")
if mibBuilder.loadTexts: mio1_type.setStatus('optional')
self_test = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 9, 4, 2, 1, 1, 5, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 4))).clone(namedValues=NamedValues(("eNotInASelfTest", 1), ("eNonDestructiveSelfTest", 4)))).setLabel("self-test").setMaxAccess("readwrite")
if mibBuilder.loadTexts: self_test.setStatus('optional')
print_internal_page = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 9, 4, 2, 1, 1, 5, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 8, 350, 450))).clone(namedValues=NamedValues(("eNotPrintingAnInternalPage", 1), ("ePrintingAnUnknownInternalPage", 2), ("eDeviceDemoPage1ConfigurationPage", 3), ("eDeviceDemoPage2", 4), ("eFileSystemDirectoryListing", 8), ("ePCLFontList1", 350), ("ePostScriptFontList1", 450)))).setLabel("print-internal-page").setMaxAccess("readwrite")
if mibBuilder.loadTexts: print_internal_page.setStatus('optional')
job_info_change_id = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 9, 4, 2, 1, 1, 6, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(16, 16)).setFixedLength(16)).setLabel("job-info-change-id").setMaxAccess("readonly")
if mibBuilder.loadTexts: job_info_change_id.setStatus('optional')
current_job_parsing_id = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 9, 4, 2, 1, 1, 6, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 32767))).setLabel("current-job-parsing-id").setMaxAccess("readonly")
if mibBuilder.loadTexts: current_job_parsing_id.setStatus('optional')
job_info_name1 = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 9, 4, 2, 1, 1, 6, 5, 1), DisplayString()).setLabel("job-info-name1").setMaxAccess("readonly")
if mibBuilder.loadTexts: job_info_name1.setStatus('optional')
job_info_name2 = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 9, 4, 2, 1, 1, 6, 5, 2), DisplayString()).setLabel("job-info-name2").setMaxAccess("readonly")
if mibBuilder.loadTexts: job_info_name2.setStatus('optional')
job_info_stage = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 9, 4, 2, 1, 1, 6, 5, 10), OctetString()).setLabel("job-info-stage").setMaxAccess("readonly")
if mibBuilder.loadTexts: job_info_stage.setStatus('optional')
job_info_io_source = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 9, 4, 2, 1, 1, 6, 5, 11), Integer32()).setLabel("job-info-io-source").setMaxAccess("readonly")
if mibBuilder.loadTexts: job_info_io_source.setStatus('optional')
job_info_pages_processed = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 9, 4, 2, 1, 1, 6, 5, 12), Integer32()).setLabel("job-info-pages-processed").setMaxAccess("readonly")
if mibBuilder.loadTexts: job_info_pages_processed.setStatus('optional')
job_info_pages_printed = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 9, 4, 2, 1, 1, 6, 5, 13), Integer32()).setLabel("job-info-pages-printed").setMaxAccess("readonly")
if mibBuilder.loadTexts: job_info_pages_printed.setStatus('optional')
job_info_size = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 9, 4, 2, 1, 1, 6, 5, 14), Integer32()).setLabel("job-info-size").setMaxAccess("readonly")
if mibBuilder.loadTexts: job_info_size.setStatus('optional')
job_info_state = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 9, 4, 2, 1, 1, 6, 5, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(3, 4, 5, 7, 10, 11))).clone(namedValues=NamedValues(("eAborted", 3), ("eWaitingForResources", 4), ("ePrinted", 5), ("eTerminating", 7), ("eCancelled", 10), ("eProcessing", 11)))).setLabel("job-info-state").setMaxAccess("readonly")
if mibBuilder.loadTexts: job_info_state.setStatus('optional')
job_info_outcome = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 9, 4, 2, 1, 1, 6, 5, 19), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(3))).clone(namedValues=NamedValues(("eOk", 3)))).setLabel("job-info-outcome").setMaxAccess("readonly")
if mibBuilder.loadTexts: job_info_outcome.setStatus('optional')
job_info_outbins_used = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 9, 4, 2, 1, 1, 6, 5, 20), OctetString()).setLabel("job-info-outbins-used").setMaxAccess("readonly")
if mibBuilder.loadTexts: job_info_outbins_used.setStatus('optional')
job_info_physical_outbins_used = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 9, 4, 2, 1, 1, 6, 5, 22), OctetString()).setLabel("job-info-physical-outbins-used").setMaxAccess("readonly")
if mibBuilder.loadTexts: job_info_physical_outbins_used.setStatus('optional')
job_info_attr_1 = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 9, 4, 2, 1, 1, 6, 5, 23, 1), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 80))).setLabel("job-info-attr-1").setMaxAccess("readonly")
if mibBuilder.loadTexts: job_info_attr_1.setStatus('optional')
job_info_attr_2 = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 9, 4, 2, 1, 1, 6, 5, 23, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 80))).setLabel("job-info-attr-2").setMaxAccess("readonly")
if mibBuilder.loadTexts: job_info_attr_2.setStatus('optional')
job_info_attr_3 = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 9, 4, 2, 1, 1, 6, 5, 23, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 80))).setLabel("job-info-attr-3").setMaxAccess("readonly")
if mibBuilder.loadTexts: job_info_attr_3.setStatus('optional')
job_info_attr_4 = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 9, 4, 2, 1, 1, 6, 5, 23, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 80))).setLabel("job-info-attr-4").setMaxAccess("readonly")
if mibBuilder.loadTexts: job_info_attr_4.setStatus('optional')
job_info_attr_5 = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 9, 4, 2, 1, 1, 6, 5, 23, 5), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 80))).setLabel("job-info-attr-5").setMaxAccess("readonly")
if mibBuilder.loadTexts: job_info_attr_5.setStatus('optional')
job_info_attr_6 = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 9, 4, 2, 1, 1, 6, 5, 23, 6), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 80))).setLabel("job-info-attr-6").setMaxAccess("readonly")
if mibBuilder.loadTexts: job_info_attr_6.setStatus('optional')
job_info_attr_7 = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 9, 4, 2, 1, 1, 6, 5, 23, 7), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 80))).setLabel("job-info-attr-7").setMaxAccess("readonly")
if mibBuilder.loadTexts: job_info_attr_7.setStatus('optional')
job_info_attr_8 = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 9, 4, 2, 1, 1, 6, 5, 23, 8), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 80))).setLabel("job-info-attr-8").setMaxAccess("readonly")
if mibBuilder.loadTexts: job_info_attr_8.setStatus('optional')
job_info_attr_9 = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 9, 4, 2, 1, 1, 6, 5, 23, 9), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 80))).setLabel("job-info-attr-9").setMaxAccess("readonly")
if mibBuilder.loadTexts: job_info_attr_9.setStatus('optional')
job_info_attr_10 = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 9, 4, 2, 1, 1, 6, 5, 23, 10), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 80))).setLabel("job-info-attr-10").setMaxAccess("readonly")
if mibBuilder.loadTexts: job_info_attr_10.setStatus('optional')
job_info_attr_11 = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 9, 4, 2, 1, 1, 6, 5, 23, 11), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 80))).setLabel("job-info-attr-11").setMaxAccess("readonly")
if mibBuilder.loadTexts: job_info_attr_11.setStatus('optional')
job_info_attr_12 = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 9, 4, 2, 1, 1, 6, 5, 23, 12), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 80))).setLabel("job-info-attr-12").setMaxAccess("readonly")
if mibBuilder.loadTexts: job_info_attr_12.setStatus('optional')
job_info_attr_13 = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 9, 4, 2, 1, 1, 6, 5, 23, 13), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 80))).setLabel("job-info-attr-13").setMaxAccess("readonly")
if mibBuilder.loadTexts: job_info_attr_13.setStatus('optional')
job_info_attr_14 = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 9, 4, 2, 1, 1, 6, 5, 23, 14), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 80))).setLabel("job-info-attr-14").setMaxAccess("readonly")
if mibBuilder.loadTexts: job_info_attr_14.setStatus('optional')
job_info_attr_15 = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 9, 4, 2, 1, 1, 6, 5, 23, 15), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 80))).setLabel("job-info-attr-15").setMaxAccess("readonly")
if mibBuilder.loadTexts: job_info_attr_15.setStatus('optional')
job_info_attr_16 = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 9, 4, 2, 1, 1, 6, 5, 23, 16), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 80))).setLabel("job-info-attr-16").setMaxAccess("readonly")
if mibBuilder.loadTexts: job_info_attr_16.setStatus('optional')
error1_time_stamp = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 9, 4, 2, 1, 1, 11, 1, 1), Integer32()).setLabel("error1-time-stamp").setMaxAccess("readonly")
if mibBuilder.loadTexts: error1_time_stamp.setStatus('optional')
error1_code = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 9, 4, 2, 1, 1, 11, 1, 2), Integer32()).setLabel("error1-code").setMaxAccess("readonly")
if mibBuilder.loadTexts: error1_code.setStatus('optional')
error2_time_stamp = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 9, 4, 2, 1, 1, 11, 2, 1), Integer32()).setLabel("error2-time-stamp").setMaxAccess("readonly")
if mibBuilder.loadTexts: error2_time_stamp.setStatus('optional')
error2_code = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 9, 4, 2, 1, 1, 11, 2, 2), Integer32()).setLabel("error2-code").setMaxAccess("readonly")
if mibBuilder.loadTexts: error2_code.setStatus('optional')
error3_time_stamp = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 9, 4, 2, 1, 1, 11, 3, 1), Integer32()).setLabel("error3-time-stamp").setMaxAccess("readonly")
if mibBuilder.loadTexts: error3_time_stamp.setStatus('optional')
error3_code = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 9, 4, 2, 1, 1, 11, 3, 2), Integer32()).setLabel("error3-code").setMaxAccess("readonly")
if mibBuilder.loadTexts: error3_code.setStatus('optional')
error4_time_stamp = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 9, 4, 2, 1, 1, 11, 4, 1), Integer32()).setLabel("error4-time-stamp").setMaxAccess("readonly")
if mibBuilder.loadTexts: error4_time_stamp.setStatus('optional')
error4_code = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 9, 4, 2, 1, 1, 11, 4, 2), Integer32()).setLabel("error4-code").setMaxAccess("readonly")
if mibBuilder.loadTexts: error4_code.setStatus('optional')
error5_time_stamp = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 9, 4, 2, 1, 1, 11, 5, 1), Integer32()).setLabel("error5-time-stamp").setMaxAccess("readonly")
if mibBuilder.loadTexts: error5_time_stamp.setStatus('optional')
error5_code = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 9, 4, 2, 1, 1, 11, 5, 2), Integer32()).setLabel("error5-code").setMaxAccess("readonly")
if mibBuilder.loadTexts: error5_code.setStatus('optional')
error6_time_stamp = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 9, 4, 2, 1, 1, 11, 6, 1), Integer32()).setLabel("error6-time-stamp").setMaxAccess("readonly")
if mibBuilder.loadTexts: error6_time_stamp.setStatus('optional')
error6_code = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 9, 4, 2, 1, 1, 11, 6, 2), Integer32()).setLabel("error6-code").setMaxAccess("readonly")
if mibBuilder.loadTexts: error6_code.setStatus('optional')
error7_time_stamp = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 9, 4, 2, 1, 1, 11, 7, 1), Integer32()).setLabel("error7-time-stamp").setMaxAccess("readonly")
if mibBuilder.loadTexts: error7_time_stamp.setStatus('optional')
error7_code = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 9, 4, 2, 1, 1, 11, 7, 2), Integer32()).setLabel("error7-code").setMaxAccess("readonly")
if mibBuilder.loadTexts: error7_code.setStatus('optional')
error8_time_stamp = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 9, 4, 2, 1, 1, 11, 8, 1), Integer32()).setLabel("error8-time-stamp").setMaxAccess("readonly")
if mibBuilder.loadTexts: error8_time_stamp.setStatus('optional')
error8_code = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 9, 4, 2, 1, 1, 11, 8, 2), Integer32()).setLabel("error8-code").setMaxAccess("readonly")
if mibBuilder.loadTexts: error8_code.setStatus('optional')
error9_time_stamp = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 9, 4, 2, 1, 1, 11, 9, 1), Integer32()).setLabel("error9-time-stamp").setMaxAccess("readonly")
if mibBuilder.loadTexts: error9_time_stamp.setStatus('optional')
error9_code = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 9, 4, 2, 1, 1, 11, 9, 2), Integer32()).setLabel("error9-code").setMaxAccess("readonly")
if mibBuilder.loadTexts: error9_code.setStatus('optional')
error10_time_stamp = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 9, 4, 2, 1, 1, 11, 10, 1), Integer32()).setLabel("error10-time-stamp").setMaxAccess("readonly")
if mibBuilder.loadTexts: error10_time_stamp.setStatus('optional')
error10_code = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 9, 4, 2, 1, 1, 11, 10, 2), Integer32()).setLabel("error10-code").setMaxAccess("readonly")
if mibBuilder.loadTexts: error10_code.setStatus('optional')
io_timeout = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 9, 4, 2, 1, 2, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(5, 300))).setLabel("io-timeout").setMaxAccess("readwrite")
if mibBuilder.loadTexts: io_timeout.setStatus('optional')
io_switch = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 9, 4, 2, 1, 2, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("eYes", 1)))).setLabel("io-switch").setMaxAccess("readonly")
if mibBuilder.loadTexts: io_switch.setStatus('optional')
default_copies = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 9, 4, 2, 1, 3, 3, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 999))).setLabel("default-copies").setMaxAccess("readwrite")
if mibBuilder.loadTexts: default_copies.setStatus('optional')
form_feed = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 9, 4, 2, 1, 3, 3, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("eInitiateAction", 1)))).setLabel("form-feed").setMaxAccess("writeonly")
if mibBuilder.loadTexts: form_feed.setStatus('optional')
resource_saving = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 9, 4, 2, 1, 3, 3, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("eOff", 1), ("eOn", 2), ("eAuto", 3)))).setLabel("resource-saving").setMaxAccess("readwrite")
if mibBuilder.loadTexts: resource_saving.setStatus('optional')
maximum_resource_saving_memory = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 9, 4, 2, 1, 3, 3, 1, 7), Integer32()).setLabel("maximum-resource-saving-memory").setMaxAccess("readonly")
if mibBuilder.loadTexts: maximum_resource_saving_memory.setStatus('optional')
default_vertical_black_resolution = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 9, 4, 2, 1, 3, 3, 1, 8), Integer32()).setLabel("default-vertical-black-resolution").setMaxAccess("readwrite")
if mibBuilder.loadTexts: default_vertical_black_resolution.setStatus('optional')
default_horizontal_black_resolution = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 9, 4, 2, 1, 3, 3, 1, 9), Integer32()).setLabel("default-horizontal-black-resolution").setMaxAccess("readwrite")
if mibBuilder.loadTexts: default_horizontal_black_resolution.setStatus('optional')
default_page_protect = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 9, 4, 2, 1, 3, 3, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3))).clone(namedValues=NamedValues(("eOn", 2), ("eAuto", 3)))).setLabel("default-page-protect").setMaxAccess("readwrite")
if mibBuilder.loadTexts: default_page_protect.setStatus('optional')
default_lines_per_page = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 9, 4, 2, 1, 3, 3, 1, 11), Integer32()).setLabel("default-lines-per-page").setMaxAccess("readwrite")
if mibBuilder.loadTexts: default_lines_per_page.setStatus('optional')
default_vmi = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 9, 4, 2, 1, 3, 3, 1, 12), Integer32()).setLabel("default-vmi").setMaxAccess("readwrite")
if mibBuilder.loadTexts: default_vmi.setStatus('optional')
default_media_size = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 9, 4, 2, 1, 3, 3, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 10, 17, 26, 25, 45, 71, 72, 80, 81, 90, 91, 100, 101))).clone(namedValues=NamedValues(("eUSExecutive", 1), ("eUSLetter", 2), ("eUSLegal", 3), ("eFoolscap", 10), ("eROC16K", 17), ("eISOandJISA4", 26), ("eISOandJISA5", 25), ("eJISB5", 45), ("eJapanesePostcardSingle", 71), ("eJapanesePostcardDouble", 72), ("eMonarch", 80), ("eCommercial10", 81), ("eInternationalDL", 90), ("eInternationalC5", 91), ("eInternationalB5", 100), ("eCustom", 101)))).setLabel("default-media-size").setMaxAccess("readwrite")
if mibBuilder.loadTexts: default_media_size.setStatus('optional')
cold_reset_media_size = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 9, 4, 2, 1, 3, 3, 1, 19), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 26))).clone(namedValues=NamedValues(("eUSLetter", 2), ("eISOandJISA4", 26)))).setLabel("cold-reset-media-size").setMaxAccess("readwrite")
if mibBuilder.loadTexts: cold_reset_media_size.setStatus('optional')
reprint = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 9, 4, 2, 1, 3, 3, 1, 36), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("eOff", 1), ("eOn", 2), ("eAuto", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: reprint.setStatus('optional')
wide_a4 = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 9, 4, 2, 1, 3, 3, 1, 37), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("eOff", 1), ("eOn", 2)))).setLabel("wide-a4").setMaxAccess("readwrite")
if mibBuilder.loadTexts: wide_a4.setStatus('optional')
dark_courier = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 9, 4, 2, 1, 3, 3, 1, 38), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("eOff", 1), ("eOn", 2)))).setLabel("dark-courier").setMaxAccess("readwrite")
if mibBuilder.loadTexts: dark_courier.setStatus('optional')
default_bits_per_pixel = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 9, 4, 2, 1, 3, 3, 1, 39), Integer32()).setLabel("default-bits-per-pixel").setMaxAccess("readwrite")
if mibBuilder.loadTexts: default_bits_per_pixel.setStatus('optional')
form_feed_needed = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 9, 4, 2, 1, 3, 3, 2, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("eFalse", 1), ("eTrue", 2)))).setLabel("form-feed-needed").setMaxAccess("readonly")
if mibBuilder.loadTexts: form_feed_needed.setStatus('optional')
pcl_resource_saving_memory_size = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 9, 4, 2, 1, 3, 3, 3, 2), Integer32()).setLabel("pcl-resource-saving-memory-size").setMaxAccess("readwrite")
if mibBuilder.loadTexts: pcl_resource_saving_memory_size.setStatus('optional')
pcl_default_font_height = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 9, 4, 2, 1, 3, 3, 3, 13), Integer32()).setLabel("pcl-default-font-height").setMaxAccess("readwrite")
if mibBuilder.loadTexts: pcl_default_font_height.setStatus('optional')
pcl_default_font_source = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 9, 4, 2, 1, 3, 3, 3, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 10, 11, 12))).clone(namedValues=NamedValues(("eInternal", 1), ("ePermanentSoft", 2), ("eRomSimm1", 10), ("eRomSimm2", 11), ("eRomSimm3", 12)))).setLabel("pcl-default-font-source").setMaxAccess("readwrite")
if mibBuilder.loadTexts: pcl_default_font_source.setStatus('optional')
pcl_default_font_number = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 9, 4, 2, 1, 3, 3, 3, 15), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setLabel("pcl-default-font-number").setMaxAccess("readwrite")
if mibBuilder.loadTexts: pcl_default_font_number.setStatus('optional')
pcl_default_font_width = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 9, 4, 2, 1, 3, 3, 3, 16), Integer32()).setLabel("pcl-default-font-width").setMaxAccess("readwrite")
if mibBuilder.loadTexts: pcl_default_font_width.setStatus('optional')
postscript_resource_saving_memory_size = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 9, 4, 2, 1, 3, 3, 4, 2), Integer32()).setLabel("postscript-resource-saving-memory-size").setMaxAccess("readwrite")
if mibBuilder.loadTexts: postscript_resource_saving_memory_size.setStatus('optional')
postscript_print_errors = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 9, 4, 2, 1, 3, 3, 4, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("eOff", 1), ("eOn", 2)))).setLabel("postscript-print-errors").setMaxAccess("readwrite")
if mibBuilder.loadTexts: postscript_print_errors.setStatus('optional')
pjl_password = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 9, 4, 2, 1, 3, 5, 1), Integer32()).setLabel("pjl-password").setMaxAccess("readonly")
if mibBuilder.loadTexts: pjl_password.setStatus('optional')
print_density = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 9, 4, 2, 1, 4, 1, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 5))).setLabel("print-density").setMaxAccess("readwrite")
if mibBuilder.loadTexts: print_density.setStatus('optional')
transfer_setting = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 9, 4, 2, 1, 4, 1, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(100, 200))).setLabel("transfer-setting").setMaxAccess("readwrite")
if mibBuilder.loadTexts: transfer_setting.setStatus('optional')
total_engine_page_count = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 9, 4, 2, 1, 4, 1, 2, 5), Integer32()).setLabel("total-engine-page-count").setMaxAccess("readwrite")
if mibBuilder.loadTexts: total_engine_page_count.setStatus('optional')
print_engine_jam_count = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 9, 4, 2, 1, 4, 1, 2, 34), Integer32()).setLabel("print-engine-jam-count").setMaxAccess("readwrite")
if mibBuilder.loadTexts: print_engine_jam_count.setStatus('optional')
print_engine_mispick_count = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 9, 4, 2, 1, 4, 1, 2, 35), Integer32()).setLabel("print-engine-mispick-count").setMaxAccess("readwrite")
if mibBuilder.loadTexts: print_engine_mispick_count.setStatus('optional')
custom_paper_dim_unit = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 9, 4, 2, 1, 4, 1, 3, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(3, 4))).clone(namedValues=NamedValues(("eTenThousandthsOfInches", 3), ("eMicrometers", 4)))).setLabel("custom-paper-dim-unit").setMaxAccess("readwrite")
if mibBuilder.loadTexts: custom_paper_dim_unit.setStatus('optional')
custom_paper_feed_dim = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 9, 4, 2, 1, 4, 1, 3, 1, 8), Integer32()).setLabel("custom-paper-feed-dim").setMaxAccess("readwrite")
if mibBuilder.loadTexts: custom_paper_feed_dim.setStatus('optional')
custom_paper_xfeed_dim = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 9, 4, 2, 1, 4, 1, 3, 1, 9), Integer32()).setLabel("custom-paper-xfeed-dim").setMaxAccess("readwrite")
if mibBuilder.loadTexts: custom_paper_xfeed_dim.setStatus('optional')
tray1_media_size_loaded = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 9, 4, 2, 1, 4, 1, 3, 3, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 10, 17, 26, 25, 45, 71, 72, 80, 81, 90, 91, 100, 101, 32767))).clone(namedValues=NamedValues(("eUSExecutive", 1), ("eUSLetter", 2), ("eUSLegal", 3), ("eFoolscap", 10), ("eROC16K", 17), ("eISOandJISA4", 26), ("eISOandJISA5", 25), ("eJISB5", 45), ("eJapanesePostcardSingle", 71), ("eJapanesePostcardDouble", 72), ("eMonarch", 80), ("eCommercial10", 81), ("eInternationalDL", 90), ("eInternationalC5", 91), ("eInternationalB5", 100), ("eCustom", 101), ("eUnknownMediaSize", 32767)))).setLabel("tray1-media-size-loaded").setMaxAccess("readwrite")
if mibBuilder.loadTexts: tray1_media_size_loaded.setStatus('optional')
tray1_fuser_temperature = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 9, 4, 2, 1, 4, 1, 3, 3, 1, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 2))).setLabel("tray1-fuser-temperature").setMaxAccess("readwrite")
if mibBuilder.loadTexts: tray1_fuser_temperature.setStatus('optional')
default_ret = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 9, 4, 2, 1, 4, 1, 6, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("eOff", 1), ("eLight", 2), ("eMedium", 3), ("eDark", 4)))).setLabel("default-ret").setMaxAccess("readwrite")
if mibBuilder.loadTexts: default_ret.setStatus('optional')
default_print_quality = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 9, 4, 2, 1, 4, 1, 6, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setLabel("default-print-quality").setMaxAccess("readwrite")
if mibBuilder.loadTexts: default_print_quality.setStatus('optional')
channelnumberofchannels = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 9, 4, 2, 1, 6, 1), Integer32()).setMaxAccess("writeonly")
if mibBuilder.loadTexts: channelnumberofchannels.setStatus('optional')
channelprinteralert = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 9, 4, 2, 1, 6, 2), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: channelprinteralert.setStatus('optional')
channel_bytes_sent = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 9, 4, 2, 1, 7, 2, 1, 2), Integer32()).setLabel("channel-bytes-sent").setMaxAccess("readonly")
if mibBuilder.loadTexts: channel_bytes_sent.setStatus('optional')
channel_bytes_received = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 9, 4, 2, 1, 7, 2, 1, 3), Integer32()).setLabel("channel-bytes-received").setMaxAccess("readonly")
if mibBuilder.loadTexts: channel_bytes_received.setStatus('optional')
channel_io_errors = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 9, 4, 2, 1, 7, 2, 1, 4), Integer32()).setLabel("channel-io-errors").setMaxAccess("readonly")
if mibBuilder.loadTexts: channel_io_errors.setStatus('optional')
channel_jobs_received = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 9, 4, 2, 1, 7, 2, 1, 5), Integer32()).setLabel("channel-jobs-received").setMaxAccess("readonly")
if mibBuilder.loadTexts: channel_jobs_received.setStatus('optional')
scan_token = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 9, 4, 2, 1, 1, 1, 25), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 128))).setLabel("scan-token").setMaxAccess("readwrite")
if mibBuilder.loadTexts: scan_token.setStatus('optional')
scan_contrast = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 9, 4, 2, 1, 2, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-127, 127))).setLabel("scan-contrast").setMaxAccess("readwrite")
if mibBuilder.loadTexts: scan_contrast.setStatus('optional')
scan_resolution = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 9, 4, 2, 1, 2, 2, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 64))).setLabel("scan-resolution").setMaxAccess("readwrite")
if mibBuilder.loadTexts: scan_resolution.setStatus('optional')
scan_pixel_data_type = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 9, 4, 2, 1, 2, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 8, 24))).clone(namedValues=NamedValues(("eBiLevelThesholded", 1), ("eGrey256", 8), ("e24BitColor", 24)))).setLabel("scan-pixel-data-type").setMaxAccess("readwrite")
if mibBuilder.loadTexts: scan_pixel_data_type.setStatus('optional')
scan_compression = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 9, 4, 2, 1, 2, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 5, 6))).clone(namedValues=NamedValues(("eCompressNone", 1), ("eCompressDefault", 2), ("eCompressionMMR", 5), ("eCompressionJPEG", 6)))).setLabel("scan-compression").setMaxAccess("readwrite")
if mibBuilder.loadTexts: scan_compression.setStatus('optional')
scan_compression_factor = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 9, 4, 2, 1, 2, 2, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setLabel("scan-compression-factor").setMaxAccess("readwrite")
if mibBuilder.loadTexts: scan_compression_factor.setStatus('optional')
scan_upload_error = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 9, 4, 2, 1, 2, 2, 1, 6), Integer32()).setLabel("scan-upload-error").setMaxAccess("readonly")
if mibBuilder.loadTexts: scan_upload_error.setStatus('optional')
scan_upload = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 9, 4, 2, 1, 2, 2, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("eScanUploadIdle", 1), ("eScanUploadStart", 2), ("eScanUploadActive", 3), ("eScanUploadAborted", 4), ("eScanUploadDone", 5), ("eScanUploadNewPage", 6)))).setLabel("scan-upload").setMaxAccess("readwrite")
if mibBuilder.loadTexts: scan_upload.setStatus('optional')
default_scanner_margin_left = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 9, 4, 2, 1, 2, 2, 1, 16), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 5088))).setLabel("default-scanner-margin-left").setMaxAccess("readwrite")
if mibBuilder.loadTexts: default_scanner_margin_left.setStatus('optional')
default_scanner_margin_right = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 9, 4, 2, 1, 2, 2, 1, 17), Integer32().subtype(subtypeSpec=ValueRangeConstraint(32, 5120))).setLabel("default-scanner-margin-right").setMaxAccess("readwrite")
if mibBuilder.loadTexts: default_scanner_margin_right.setStatus('optional')
ui_add_option = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 9, 4, 2, 1, 2, 2, 1, 37), DisplayString()).setLabel("ui-add-option").setMaxAccess("writeonly")
if mibBuilder.loadTexts: ui_add_option.setStatus('optional')
ui_select_option = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 9, 4, 2, 1, 2, 2, 1, 38), DisplayString()).setLabel("ui-select-option").setMaxAccess("readonly")
if mibBuilder.loadTexts: ui_select_option.setStatus('optional')
ui_delete_option = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 9, 4, 2, 1, 2, 2, 1, 42), DisplayString()).setLabel("ui-delete-option").setMaxAccess("writeonly")
if mibBuilder.loadTexts: ui_delete_option.setStatus('optional')
scanner_jam_page_count = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 9, 4, 2, 1, 2, 2, 1, 43), Integer32()).setLabel("scanner-jam-page-count").setMaxAccess("readwrite")
if mibBuilder.loadTexts: scanner_jam_page_count.setStatus('optional')
scanner_adf_page_count = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 9, 4, 2, 1, 2, 2, 1, 44), Integer32()).setLabel("scanner-adf-page-count").setMaxAccess("readwrite")
if mibBuilder.loadTexts: scanner_adf_page_count.setStatus('optional')
scan_adf_page_count = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 9, 4, 2, 1, 2, 2, 1, 45), Integer32()).setLabel("scan-adf-page-count").setMaxAccess("readwrite")
if mibBuilder.loadTexts: scan_adf_page_count.setStatus('optional')
scan_image_type = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 9, 4, 2, 1, 2, 2, 1, 46), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("eText", 1), ("ePhoto", 2), ("eMixed", 3)))).setLabel("scan-image-type").setMaxAccess("readwrite")
if mibBuilder.loadTexts: scan_image_type.setStatus('optional')
scan_subsample = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 9, 4, 2, 1, 2, 2, 1, 47), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("eFourToOneToOne", 1), ("eFourToTwoToTwo", 2), ("eFourToThreeToThree", 3), ("eFourToFourToFour", 4)))).setLabel("scan-subsample").setMaxAccess("readwrite")
if mibBuilder.loadTexts: scan_subsample.setStatus('optional')
scanner_retrieve_scanline = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 9, 4, 2, 1, 2, 2, 1, 48), OctetString()).setLabel("scanner-retrieve-scanline").setMaxAccess("readwrite")
if mibBuilder.loadTexts: scanner_retrieve_scanline.setStatus('optional')
scanner_motor_control = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 9, 4, 2, 1, 2, 2, 1, 49), Integer32()).setLabel("scanner-motor-control").setMaxAccess("readwrite")
if mibBuilder.loadTexts: scanner_motor_control.setStatus('optional')
scan_height = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 9, 4, 2, 1, 2, 2, 1, 50), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 25200))).setLabel("scan-height").setMaxAccess("readwrite")
if mibBuilder.loadTexts: scan_height.setStatus('optional')
scanner_scanline_statistics = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 9, 4, 2, 1, 2, 2, 1, 51), DisplayString()).setLabel("scanner-scanline-statistics").setMaxAccess("readonly")
if mibBuilder.loadTexts: scanner_scanline_statistics.setStatus('optional')
scan_control_descriptor = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 9, 4, 2, 1, 2, 2, 1, 52), DisplayString()).setLabel("scan-control-descriptor").setMaxAccess("readonly")
if mibBuilder.loadTexts: scan_control_descriptor.setStatus('optional')
scan_gamma_correction = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 9, 4, 2, 1, 2, 2, 1, 53), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 32))).setLabel("scan-gamma-correction").setMaxAccess("readwrite")
if mibBuilder.loadTexts: scan_gamma_correction.setStatus('optional')
scan_pad_image = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 9, 4, 2, 1, 2, 2, 1, 54), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("eOff", 1), ("eOn", 2)))).setLabel("scan-pad-image").setMaxAccess("readwrite")
if mibBuilder.loadTexts: scan_pad_image.setStatus('optional')
scan_calibration_target = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 9, 4, 2, 1, 2, 2, 1, 32, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("eWhiteSheet", 1), ("ePlaten", 2)))).setLabel("scan-calibration-target").setMaxAccess("readonly")
if mibBuilder.loadTexts: scan_calibration_target.setStatus('optional')
not_ready_source_scanner = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 9, 4, 2, 1, 2, 2, 2, 1), OctetString()).setLabel("not-ready-source-scanner").setMaxAccess("readonly")
if mibBuilder.loadTexts: not_ready_source_scanner.setStatus('optional')
scan_resolution_range = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 9, 4, 2, 1, 2, 2, 2, 3), DisplayString()).setLabel("scan-resolution-range").setMaxAccess("readonly")
if mibBuilder.loadTexts: scan_resolution_range.setStatus('optional')
scan_calibration_download = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 9, 4, 2, 1, 2, 2, 2, 5), OctetString()).setLabel("scan-calibration-download").setMaxAccess("readwrite")
if mibBuilder.loadTexts: scan_calibration_download.setStatus('optional')
scan_calibration_error = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 9, 4, 2, 1, 2, 2, 2, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9))).clone(namedValues=NamedValues(("eNoError", 1), ("eUnknownCalibrationError", 2), ("eScannerFeederEmpty", 3), ("eLowMemory", 4), ("eWriteFailed", 5), ("eScannerBusy", 6), ("eADFMispick", 7), ("eADFJam", 8), ("eUncorrectablePixels", 9)))).setLabel("scan-calibration-error").setMaxAccess("readonly")
if mibBuilder.loadTexts: scan_calibration_error.setStatus('optional')
scanner_button_status = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 9, 4, 2, 1, 2, 2, 2, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("eOff", 1), ("eOn", 2)))).setLabel("scanner-button-status").setMaxAccess("readwrite")
if mibBuilder.loadTexts: scanner_button_status.setStatus('optional')
prtgeneralconfigchanges = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 9, 4, 2, 2, 5, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: prtgeneralconfigchanges.setStatus('optional')
prtgeneralcurrentlocalization = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 9, 4, 2, 2, 5, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: prtgeneralcurrentlocalization.setStatus('optional')
prtgeneralreset = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 9, 4, 2, 2, 5, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(3, 5))).clone(namedValues=NamedValues(("ePnotResetting", 3), ("ePresetToNVRAM", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: prtgeneralreset.setStatus('optional')
prtgeneralcurrentoperator = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 9, 4, 2, 2, 5, 1, 1, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: prtgeneralcurrentoperator.setStatus('optional')
prtgeneralserviceperson = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 9, 4, 2, 2, 5, 1, 1, 5), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: prtgeneralserviceperson.setStatus('optional')
prtinputdefaultindex = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 9, 4, 2, 2, 5, 1, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: prtinputdefaultindex.setStatus('optional')
prtoutputdefaultindex = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 9, 4, 2, 2, 5, 1, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: prtoutputdefaultindex.setStatus('optional')
prtmarkerdefaultindex = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 9, 4, 2, 2, 5, 1, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: prtmarkerdefaultindex.setStatus('optional')
prtmediapathdefaultindex = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 9, 4, 2, 2, 5, 1, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 3))).setMaxAccess("readonly")
if mibBuilder.loadTexts: prtmediapathdefaultindex.setStatus('optional')
prtconsolelocalization = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 9, 4, 2, 2, 5, 1, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: prtconsolelocalization.setStatus('optional')
prtconsolenumberofdisplaylines = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 9, 4, 2, 2, 5, 1, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: prtconsolenumberofdisplaylines.setStatus('optional')
prtconsolenumberofdisplaychars = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 9, 4, 2, 2, 5, 1, 1, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: prtconsolenumberofdisplaychars.setStatus('optional')
prtconsoledisable = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 9, 4, 2, 2, 5, 1, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("ePoperatorConsoleEnabled", 3), ("ePoperatorConsoleDisabled", 4), ("ePoperatorConsoleEnabledLevel1", 5), ("ePoperatorConsoleEnabledLevel2", 6), ("ePoperatorConsoleEnabledLevel3", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: prtconsoledisable.setStatus('optional')
prtgeneralprintername = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 9, 4, 2, 2, 5, 1, 1, 16), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: prtgeneralprintername.setStatus('optional')
prtgeneralserialnumber = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 9, 4, 2, 2, 5, 1, 1, 17), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 11))).setMaxAccess("readonly")
if mibBuilder.loadTexts: prtgeneralserialnumber.setStatus('optional')
prtalertcriticalevents = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 9, 4, 2, 2, 5, 1, 1, 18), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: prtalertcriticalevents.setStatus('optional')
prtalertallevents = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 9, 4, 2, 2, 5, 1, 1, 19), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: prtalertallevents.setStatus('optional')
prtcoverdescription = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 9, 4, 2, 2, 6, 1, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: prtcoverdescription.setStatus('optional')
prtcoverstatus = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 9, 4, 2, 2, 6, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(3, 4))).clone(namedValues=NamedValues(("ePdoorOpen", 3), ("ePdoorClosed", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: prtcoverstatus.setStatus('optional')
prtlocalizationlanguage = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 9, 4, 2, 2, 7, 1, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 2))).setMaxAccess("readonly")
if mibBuilder.loadTexts: prtlocalizationlanguage.setStatus('optional')
prtlocalizationcountry = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 9, 4, 2, 2, 7, 1, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 2))).setMaxAccess("readonly")
if mibBuilder.loadTexts: prtlocalizationcountry.setStatus('optional')
prtlocalizationcharacterset = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 9, 4, 2, 2, 7, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2004))).clone(namedValues=NamedValues(("ePcsHPRoman8", 2004)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: prtlocalizationcharacterset.setStatus('optional')
prtstoragerefindex = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 9, 4, 2, 2, 5, 2, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: prtstoragerefindex.setStatus('optional')
prtdevicerefindex = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 9, 4, 2, 2, 5, 3, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: prtdevicerefindex.setStatus('optional')
prtinputtype = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 9, 4, 2, 2, 8, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(3, 4))).clone(namedValues=NamedValues(("ePsheetFeedAutoRemovableTray", 3), ("ePsheetFeedAutoNonRemovableTray", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: prtinputtype.setStatus('optional')
prtinputdimunit = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 9, 4, 2, 2, 8, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(3, 4))).clone(namedValues=NamedValues(("ePtenThousandthsOfInches", 3), ("ePmicrometers", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: prtinputdimunit.setStatus('optional')
prtinputmediadimfeeddirdeclared = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 9, 4, 2, 2, 8, 2, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: prtinputmediadimfeeddirdeclared.setStatus('optional')
prtinputmediadimxfeeddirdeclared = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 9, 4, 2, 2, 8, 2, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: prtinputmediadimxfeeddirdeclared.setStatus('optional')
prtinputmediadimfeeddirchosen = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 9, 4, 2, 2, 8, 2, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: prtinputmediadimfeeddirchosen.setStatus('optional')
prtinputmediadimxfeeddirchosen = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 9, 4, 2, 2, 8, 2, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: prtinputmediadimxfeeddirchosen.setStatus('optional')
prtinputcapacityunit = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 9, 4, 2, 2, 8, 2, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(8))).clone(namedValues=NamedValues(("ePsheets", 8)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: prtinputcapacityunit.setStatus('optional')
prtinputmaxcapacity = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 9, 4, 2, 2, 8, 2, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: prtinputmaxcapacity.setStatus('optional')
prtinputcurrentlevel = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 9, 4, 2, 2, 8, 2, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: prtinputcurrentlevel.setStatus('optional')
prtinputstatus = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 9, 4, 2, 2, 8, 2, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: prtinputstatus.setStatus('optional')
prtinputmedianame = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 9, 4, 2, 2, 8, 2, 1, 12), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 63))).setMaxAccess("readonly")
if mibBuilder.loadTexts: prtinputmedianame.setStatus('optional')
prtinputname = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 9, 4, 2, 2, 8, 2, 1, 13), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 63))).setMaxAccess("readonly")
if mibBuilder.loadTexts: prtinputname.setStatus('optional')
prtinputvendorname = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 9, 4, 2, 2, 8, 2, 1, 14), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 63))).setMaxAccess("readonly")
if mibBuilder.loadTexts: prtinputvendorname.setStatus('optional')
prtinputmodel = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 9, 4, 2, 2, 8, 2, 1, 15), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 63))).setMaxAccess("readonly")
if mibBuilder.loadTexts: prtinputmodel.setStatus('optional')
prtinputversion = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 9, 4, 2, 2, 8, 2, 1, 16), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 63))).setMaxAccess("readonly")
if mibBuilder.loadTexts: prtinputversion.setStatus('optional')
prtinputserialnumber = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 9, 4, 2, 2, 8, 2, 1, 17), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: prtinputserialnumber.setStatus('optional')
prtinputdescription = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 9, 4, 2, 2, 8, 2, 1, 18), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: prtinputdescription.setStatus('optional')
prtinputsecurity = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 9, 4, 2, 2, 8, 2, 1, 19), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 3, 4, 5))).clone(namedValues=NamedValues(("ePother", 1), ("ePon", 3), ("ePoff", 4), ("ePnotPresent", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: prtinputsecurity.setStatus('optional')
prtoutputtype = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 9, 4, 2, 2, 9, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("ePother", 1), ("ePunknown", 2), ("ePremovableBin", 3), ("ePunRemovableBin", 4), ("ePcontinuousRollDevice", 5), ("ePmailBox", 6), ("ePcontinousFanFold", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: prtoutputtype.setStatus('optional')
prtoutputcapacityunit = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 9, 4, 2, 2, 9, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(3, 4, 8, 16, 17))).clone(namedValues=NamedValues(("ePtenThousandthsOfInches", 3), ("ePmicrometers", 4), ("ePsheets", 8), ("ePfeet", 16), ("ePmeters", 17)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: prtoutputcapacityunit.setStatus('optional')
prtoutputmaxcapacity = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 9, 4, 2, 2, 9, 2, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: prtoutputmaxcapacity.setStatus('optional')
prtoutputremainingcapacity = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 9, 4, 2, 2, 9, 2, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: prtoutputremainingcapacity.setStatus('optional')
prtoutputstatus = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 9, 4, 2, 2, 9, 2, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: prtoutputstatus.setStatus('optional')
prtmarkermarktech = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 9, 4, 2, 2, 10, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(4))).clone(namedValues=NamedValues(("ePelectrophotographicLaser", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: prtmarkermarktech.setStatus('optional')
prtmarkercounterunit = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 9, 4, 2, 2, 10, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(7))).clone(namedValues=NamedValues(("ePimpressions", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: prtmarkercounterunit.setStatus('optional')
prtmarkerlifecount = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 9, 4, 2, 2, 10, 2, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: prtmarkerlifecount.setStatus('optional')
prtmarkerpoweroncount = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 9, 4, 2, 2, 10, 2, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: prtmarkerpoweroncount.setStatus('optional')
prtmarkerprocesscolorants = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 9, 4, 2, 2, 10, 2, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: prtmarkerprocesscolorants.setStatus('optional')
prtmarkerspotcolorants = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 9, 4, 2, 2, 10, 2, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: prtmarkerspotcolorants.setStatus('optional')
prtmarkeraddressabilityunit = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 9, 4, 2, 2, 10, 2, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(3))).clone(namedValues=NamedValues(("ePtenThousandthsOfInches", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: prtmarkeraddressabilityunit.setStatus('optional')
prtmarkeraddressabilityfeeddir = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 9, 4, 2, 2, 10, 2, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: prtmarkeraddressabilityfeeddir.setStatus('optional')
prtmarkeraddressabilityxfeeddir = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 9, 4, 2, 2, 10, 2, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: prtmarkeraddressabilityxfeeddir.setStatus('optional')
prtmarkernorthmargin = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 9, 4, 2, 2, 10, 2, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: prtmarkernorthmargin.setStatus('optional')
prtmarkersouthmargin = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 9, 4, 2, 2, 10, 2, 1, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: prtmarkersouthmargin.setStatus('optional')
prtmarkerwestmargin = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 9, 4, 2, 2, 10, 2, 1, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: prtmarkerwestmargin.setStatus('optional')
prtmarkereastmargin = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 9, 4, 2, 2, 10, 2, 1, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: prtmarkereastmargin.setStatus('optional')
prtmarkerstatus = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 9, 4, 2, 2, 10, 2, 1, 15), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: prtmarkerstatus.setStatus('optional')
prtmarkersuppliesmarkerindex = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 9, 4, 2, 2, 11, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: prtmarkersuppliesmarkerindex.setStatus('optional')
prtmarkersuppliescolorantindex = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 9, 4, 2, 2, 11, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: prtmarkersuppliescolorantindex.setStatus('optional')
prtmarkersuppliesclass = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 9, 4, 2, 2, 11, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 3, 4))).clone(namedValues=NamedValues(("ePother", 1), ("ePsupplyThatIsConsumed", 3), ("ePreceptacleThatIsFilled", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: prtmarkersuppliesclass.setStatus('optional')
prtmarkersuppliestype = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 9, 4, 2, 2, 11, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(3))).clone(namedValues=NamedValues(("ePtoner", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: prtmarkersuppliestype.setStatus('optional')
prtmarkersuppliesdescription = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 9, 4, 2, 2, 11, 1, 1, 6), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: prtmarkersuppliesdescription.setStatus('optional')
prtmarkersuppliessupplyunit = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 9, 4, 2, 2, 11, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(13))).clone(namedValues=NamedValues(("ePtenthsOfGrams", 13)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: prtmarkersuppliessupplyunit.setStatus('optional')
prtmarkersuppliesmaxcapacity = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 9, 4, 2, 2, 11, 1, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: prtmarkersuppliesmaxcapacity.setStatus('optional')
prtmarkersupplieslevel = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 9, 4, 2, 2, 11, 1, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: prtmarkersupplieslevel.setStatus('optional')
prtmediapathmaxspeedprintunit = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 9, 4, 2, 2, 13, 4, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(7))).clone(namedValues=NamedValues(("ePimpressionsPerHour", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: prtmediapathmaxspeedprintunit.setStatus('optional')
prtmediapathmediasizeunit = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 9, 4, 2, 2, 13, 4, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(3, 4))).clone(namedValues=NamedValues(("ePtenThousandthsOfInches", 3), ("ePmicrometers", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: prtmediapathmediasizeunit.setStatus('optional')
prtmediapathmaxspeed = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 9, 4, 2, 2, 13, 4, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: prtmediapathmaxspeed.setStatus('optional')
prtmediapathmaxmediafeeddir = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 9, 4, 2, 2, 13, 4, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: prtmediapathmaxmediafeeddir.setStatus('optional')
prtmediapathmaxmediaxfeeddir = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 9, 4, 2, 2, 13, 4, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: prtmediapathmaxmediaxfeeddir.setStatus('optional')
prtmediapathminmediafeeddir = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 9, 4, 2, 2, 13, 4, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: prtmediapathminmediafeeddir.setStatus('optional')
prtmediapathminmediaxfeeddir = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 9, 4, 2, 2, 13, 4, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: prtmediapathminmediaxfeeddir.setStatus('optional')
prtmediapathtype = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 9, 4, 2, 2, 13, 4, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(5))).clone(namedValues=NamedValues(("ePsimplex", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: prtmediapathtype.setStatus('optional')
prtmediapathdescription = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 9, 4, 2, 2, 13, 4, 1, 10), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: prtmediapathdescription.setStatus('optional')
prtmediapathstatus = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 9, 4, 2, 2, 13, 4, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: prtmediapathstatus.setStatus('optional')
prtchanneltype = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 9, 4, 2, 2, 14, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 5, 7, 10, 11, 15, 34, 35, 38))).clone(namedValues=NamedValues(("ePother", 1), ("ePchIEEE1284Port", 5), ("ePchAppleTalkPAP", 7), ("ePchNetwarePServer", 10), ("ePchPort9100", 11), ("ePchDLCLLCPort", 15), ("ePchUSB", 34), ("ePchIrDA", 35), ("ePchBidirPortTCP", 38)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: prtchanneltype.setStatus('optional')
prtchannelprotocolversion = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 9, 4, 2, 2, 14, 1, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 63))).setMaxAccess("readonly")
if mibBuilder.loadTexts: prtchannelprotocolversion.setStatus('optional')
prtchannelcurrentjobcntllangindex = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 9, 4, 2, 2, 14, 1, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: prtchannelcurrentjobcntllangindex.setStatus('optional')
prtchanneldefaultpagedesclangindex = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 9, 4, 2, 2, 14, 1, 1, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: prtchanneldefaultpagedesclangindex.setStatus('optional')
prtchannelstate = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 9, 4, 2, 2, 14, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 3, 4))).clone(namedValues=NamedValues(("ePother", 1), ("ePprintDataAccepted", 3), ("ePnoDataAccepted", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: prtchannelstate.setStatus('optional')
prtchannelifindex = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 9, 4, 2, 2, 14, 1, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: prtchannelifindex.setStatus('optional')
prtchannelstatus = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 9, 4, 2, 2, 14, 1, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: prtchannelstatus.setStatus('optional')
prtchannelinformation = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 9, 4, 2, 2, 14, 1, 1, 9), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: prtchannelinformation.setStatus('optional')
prtinterpreterlangfamily = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 9, 4, 2, 2, 15, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 3, 5, 6, 37, 47))).clone(namedValues=NamedValues(("ePother", 1), ("ePlangPCL", 3), ("ePlangPJL", 5), ("ePlangPS", 6), ("ePlangAutomatic", 37), ("ePlangPCLXL", 47)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: prtinterpreterlangfamily.setStatus('optional')
prtinterpreterlanglevel = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 9, 4, 2, 2, 15, 1, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 31))).setMaxAccess("readonly")
if mibBuilder.loadTexts: prtinterpreterlanglevel.setStatus('optional')
prtinterpreterlangversion = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 9, 4, 2, 2, 15, 1, 1, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 31))).setMaxAccess("readonly")
if mibBuilder.loadTexts: prtinterpreterlangversion.setStatus('optional')
prtinterpreterdescription = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 9, 4, 2, 2, 15, 1, 1, 5), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: prtinterpreterdescription.setStatus('optional')
prtinterpreterversion = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 9, 4, 2, 2, 15, 1, 1, 6), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 31))).setMaxAccess("readonly")
if mibBuilder.loadTexts: prtinterpreterversion.setStatus('optional')
prtinterpreterdefaultorientation = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 9, 4, 2, 2, 15, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(3, 4))).clone(namedValues=NamedValues(("ePportrait", 3), ("ePlandscape", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: prtinterpreterdefaultorientation.setStatus('optional')
prtinterpreterfeedaddressability = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 9, 4, 2, 2, 15, 1, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: prtinterpreterfeedaddressability.setStatus('optional')
prtinterpreterxfeedaddressability = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 9, 4, 2, 2, 15, 1, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: prtinterpreterxfeedaddressability.setStatus('optional')
prtinterpreterdefaultcharsetin = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 9, 4, 2, 2, 15, 1, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 3, 4, 5, 12, 13, 20, 21, 22, 23, 24, 25, 26, 1004, 2000, 2001, 2002, 2003, 2004, 2005, 2009, 2010, 2011, 2012, 2014, 2017, 2021, 2027))).clone(namedValues=NamedValues(("ePother", 1), ("ePcsASCII", 3), ("ePcsISOLatin1", 4), ("ePcsISOLatin2", 5), ("ePcsISOLatin5", 12), ("ePcsISOLatin6", 13), ("ePcsISO4UnitedKingdom", 20), ("ePcsISO11SwedishforNames", 21), ("ePcsISO15Italian", 22), ("ePcsISO17Spanish", 23), ("ePcsISO21German", 24), ("ePcsISO60DanishNorwegian", 25), ("ePcsISO69French", 26), ("ePcsUnicodeIBM2039", 1004), ("ePcsWindows30Latin1", 2000), ("ePcsWindows31Latin1", 2001), ("ePcsWindows31Latin2", 2002), ("ePcsWindows31Latin5", 2003), ("ePcsHPRoman8", 2004), ("ePcsAdobeStandardEncoding", 2005), ("ePcsPC850Multilingual", 2009), ("ePcsPCp852", 2010), ("ePcsPC8CodePage437", 2011), ("ePcsPC8DNDanishNorwegian", 2012), ("ePcsHPPC8Turkish", 2014), ("ePcsHPLegal", 2017), ("ePcsHPDeskTop", 2021), ("ePcsMacintosh", 2027)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: prtinterpreterdefaultcharsetin.setStatus('optional')
prtinterpreterdefaultcharsetout = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 9, 4, 2, 2, 15, 1, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3, 2004, 2005))).clone(namedValues=NamedValues(("ePcsNoDefault", 2), ("ePcsASCII", 3), ("ePcsHPRoman8", 2004), ("ePcsAdobeStandardEncoding", 2005)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: prtinterpreterdefaultcharsetout.setStatus('optional')
prtinterpretertwoway = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 9, 4, 2, 2, 15, 1, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(3, 4))).clone(namedValues=NamedValues(("ePyes", 3), ("ePno", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: prtinterpretertwoway.setStatus('optional')
prtconsoledisplaybuffertext = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 9, 4, 2, 2, 16, 5, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: prtconsoledisplaybuffertext.setStatus('optional')
prtconsoleontime = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 9, 4, 2, 2, 17, 6, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: prtconsoleontime.setStatus('optional')
prtconsoleofftime = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 9, 4, 2, 2, 17, 6, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: prtconsoleofftime.setStatus('optional')
prtconsolecolor = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 9, 4, 2, 2, 17, 6, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9))).clone(namedValues=NamedValues(("ePother", 1), ("ePunknown", 2), ("ePwhite", 3), ("ePred", 4), ("ePgreen", 5), ("ePblue", 6), ("ePcyan", 7), ("ePmagenta", 8), ("ePyellow", 9)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: prtconsolecolor.setStatus('optional')
prtconsoledescription = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 9, 4, 2, 2, 17, 6, 1, 5), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: prtconsoledescription.setStatus('optional')
prtalertseveritylevel = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 9, 4, 2, 2, 18, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 3, 4, 5))).clone(namedValues=NamedValues(("ePother", 1), ("ePcriticalBinaryChangeEvent", 3), ("ePwarningUnaryChangeEvent", 4), ("ePwarningBinaryChangeEvent", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: prtalertseveritylevel.setStatus('optional')
prtalerttraininglevel = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 9, 4, 2, 2, 18, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("ePother", 1), ("ePunknown", 2), ("ePuntrained", 3), ("ePtrained", 4), ("ePfieldService", 5), ("ePmanagement", 6), ("ePnoInterventionRequired", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: prtalerttraininglevel.setStatus('optional')
prtalertgroup = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 9, 4, 2, 2, 18, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(5, 6, 8, 9, 10, 14))).clone(namedValues=NamedValues(("ePgeneralPrinter", 5), ("ePcover", 6), ("ePinput", 8), ("ePoutput", 9), ("ePmarker", 10), ("ePchannel", 14)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: prtalertgroup.setStatus('optional')
prtalertgroupindex = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 9, 4, 2, 2, 18, 1, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: prtalertgroupindex.setStatus('optional')
prtalertlocation = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 9, 4, 2, 2, 18, 1, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: prtalertlocation.setStatus('optional')
prtalertcode = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 9, 4, 2, 2, 18, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 3, 8, 801, 808))).clone(namedValues=NamedValues(("ePother", 1), ("ePcoverOpened", 3), ("ePjam", 8), ("ePinputMediaTrayMissing", 801), ("ePinputMediaSupplyEmpty", 808)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: prtalertcode.setStatus('optional')
prtalertdescription = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 9, 4, 2, 2, 18, 1, 1, 8), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: prtalertdescription.setStatus('optional')
prtalerttime = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 9, 4, 2, 2, 18, 1, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: prtalerttime.setStatus('optional')
mibBuilder.exportSymbols("LJ1220-MIB", prtConsoleLightTable=prtConsoleLightTable, copier_job_media_size=copier_job_media_size, channel_entry=channel_entry, prtalertlocation=prtalertlocation, job_info_attribute=job_info_attribute, error2=error2, error9=error9, prtInterpreter=prtInterpreter, hrPrinterTable=hrPrinterTable, serial_number=serial_number, hrdeviceid=hrdeviceid, prtMarkerSuppliesEntry=prtMarkerSuppliesEntry, prtinputstatus=prtinputstatus, error2_code=error2_code, simm1_type=simm1_type, error10_time_stamp=error10_time_stamp, pysmi_continue=pysmi_continue, postscript_print_errors=postscript_print_errors, sleep_mode=sleep_mode, copier_collation=copier_collation, interface=interface, dark_courier=dark_courier, copier_job=copier_job, prtInterpreterEntry=prtInterpreterEntry, prtmarkeraddressabilityxfeeddir=prtmarkeraddressabilityxfeeddir, prtAlertEntry=prtAlertEntry, hrdevicedescr=hrdevicedescr, prtmarkermarktech=prtmarkermarktech, prtstoragerefindex=prtstoragerefindex, job_info_pages_processed=job_info_pages_processed, job_info_attr_9=job_info_attr_9, errorlog=errorlog, hrdeviceindex=hrdeviceindex, copier_job_quality=copier_job_quality, error5_time_stamp=error5_time_stamp, copier=copier, job=job, job_info_state=job_info_state, pdl=pdl, pcl_default_font_height=pcl_default_font_height, scan_subsample=scan_subsample, reprint=reprint, scan_compression=scan_compression, error5=error5, prtconsoledescription=prtconsoledescription, prtinputmediadimxfeeddirchosen=prtinputmediadimxfeeddirchosen, resource_saving=resource_saving, default_horizontal_black_resolution=default_horizontal_black_resolution, prtconsoleontime=prtconsoleontime, error2_time_stamp=error2_time_stamp, settings_job=settings_job, prtInput=prtInput, ui_delete_option=ui_delete_option, prtalertgroup=prtalertgroup, wide_a4=wide_a4, service_password=service_password, channel_jobs_received=channel_jobs_received, maximum_resource_saving_memory=maximum_resource_saving_memory, prtconsoledisplaybuffertext=prtconsoledisplaybuffertext, hrPrinterEntry=hrPrinterEntry, scan_calibration_target=scan_calibration_target, status_system=status_system, prtConsoleDisplayBufferEntry=prtConsoleDisplayBufferEntry, simm2_type=simm2_type, scan_control_descriptor=scan_control_descriptor, channel_table=channel_table, error4_code=error4_code, copier_print_page_count=copier_print_page_count, prtinputmodel=prtinputmodel, prtCoverEntry=prtCoverEntry, hrstoragedescr=hrstoragedescr, prtcoverdescription=prtcoverdescription, prtchannelinformation=prtchannelinformation, copier_quality=copier_quality, transfer_setting=transfer_setting, prtgeneralserviceperson=prtgeneralserviceperson, prtmediapathdefaultindex=prtmediapathdefaultindex, error9_time_stamp=error9_time_stamp, prtinputmediadimxfeeddirdeclared=prtinputmediadimxfeeddirdeclared, hrDeviceTable=hrDeviceTable, scan_token=scan_token, print_density=print_density, device_location=device_location, prtinputtype=prtinputtype, error3=error3, job_info_outcome=job_info_outcome, prtchanneltype=prtchanneltype, prtmarkersuppliesmarkerindex=prtmarkersuppliesmarkerindex, destination_subsystem=destination_subsystem, prtoutputtype=prtoutputtype, default_media_size=default_media_size, scan_gamma_correction=scan_gamma_correction, prtmarkerpoweroncount=prtmarkerpoweroncount, scan_calibration=scan_calibration, tray1_media_size_loaded=tray1_media_size_loaded, intray1=intray1, system=system, error4_time_stamp=error4_time_stamp, hrDeviceEntry=hrDeviceEntry, prtconsoleofftime=prtconsoleofftime, job_info_name1=job_info_name1, mio1=mio1, error3_code=error3_code, prtmediapathmaxmediafeeddir=prtmediapathmaxmediafeeddir, prtgeneralcurrentoperator=prtgeneralcurrentoperator, active_print_jobs=active_print_jobs, job_info_attr_16=job_info_attr_16, prtMediaPathTable=prtMediaPathTable, print_engine_mispick_count=print_engine_mispick_count, prtconsolecolor=prtconsolecolor, job_info_change_id=job_info_change_id, hrDevice=hrDevice, prtinterpretertwoway=prtinterpretertwoway, error8_code=error8_code, prtMarker=prtMarker, prtgeneralserialnumber=prtgeneralserialnumber, intrays=intrays, prtlocalizationlanguage=prtlocalizationlanguage, hrstoragetype=hrstoragetype, prtLocalizationTable=prtLocalizationTable, scan_upload_error=scan_upload_error, scan_upload=scan_upload, prtinputcurrentlevel=prtinputcurrentlevel, pcl_default_font_source=pcl_default_font_source, scan_pad_image=scan_pad_image, prtMediaPathEntry=prtMediaPathEntry, prtInterpreterTable=prtInterpreterTable, scan_adf_page_count=scan_adf_page_count, error10_code=error10_code, prtinterpreterdefaultorientation=prtinterpreterdefaultorientation, prtmediapathminmediaxfeeddir=prtmediapathminmediaxfeeddir, error1_time_stamp=error1_time_stamp, simm1=simm1, prtgeneralcurrentlocalization=prtgeneralcurrentlocalization, job_info_attr_14=job_info_attr_14, pjl_password=pjl_password, prtinputmaxcapacity=prtinputmaxcapacity, prtLocalization=prtLocalization, prtInputEntry=prtInputEntry, prtoutputcapacityunit=prtoutputcapacityunit, prtGeneral=prtGeneral, error10=error10, test=test, prtalertallevents=prtalertallevents, source_subsystem=source_subsystem, prtConsoleLights=prtConsoleLights, hrdevicestatus=hrdevicestatus, hrStorage=hrStorage, prtmarkerprocesscolorants=prtmarkerprocesscolorants, prtmarkersuppliessupplyunit=prtmarkersuppliessupplyunit, prtmarkerstatus=prtmarkerstatus, custom_paper_feed_dim=custom_paper_feed_dim, prtConsoleDisplayBufferTable=prtConsoleDisplayBufferTable, hrstorageallocationunits=hrstorageallocationunits, job_info_attr_2=job_info_attr_2, error8=error8, channel_bytes_sent=channel_bytes_sent, prtmarkeraddressabilityunit=prtmarkeraddressabilityunit, prtalertdescription=prtalertdescription, hrstoragesize=hrstoragesize, custom_paper_dim_unit=custom_paper_dim_unit, prtinputcapacityunit=prtinputcapacityunit, install_date=install_date, hrm=hrm, scan_contrast=scan_contrast, prtconsolenumberofdisplaylines=prtconsolenumberofdisplaylines, prtchannelprotocolversion=prtchannelprotocolversion, job_info_attr_4=job_info_attr_4, prtalertseveritylevel=prtalertseveritylevel, prtinputsecurity=prtinputsecurity, prtMarkerTable=prtMarkerTable, cold_reset_media_size=cold_reset_media_size, job_info_attr_15=job_info_attr_15, job_info_outbins_used=job_info_outbins_used, prtChannelEntry=prtChannelEntry, copier_reduction=copier_reduction, scanner_retrieve_scanline=scanner_retrieve_scanline, scan_image_type=scan_image_type, job_info_attr_12=job_info_attr_12, prtinterpreterdescription=prtinterpreterdescription, hrStorageEntry=hrStorageEntry, hp=hp, default_copies=default_copies, copier_job_num_copies=copier_job_num_copies, default_scanner_margin_left=default_scanner_margin_left, prtcoverstatus=prtcoverstatus, job_input_auto_continue_timeout=job_input_auto_continue_timeout, simm1_capacity=simm1_capacity, on_off_line=on_off_line, scanner_scanline_statistics=scanner_scanline_statistics, scan_resolution=scan_resolution, job_info_attr_13=job_info_attr_13, prtdevicerefindex=prtdevicerefindex, settings_prt_eng=settings_prt_eng, prtinputmediadimfeeddirdeclared=prtinputmediadimfeeddirdeclared, simm2=simm2, job_info=job_info, mio=mio, prtinputdimunit=prtinputdimunit, prtmarkereastmargin=prtmarkereastmargin, prtmediapathdescription=prtmediapathdescription, ui_add_option=ui_add_option, scan_pixel_data_type=scan_pixel_data_type, scanner=scanner, error6=error6, prtmarkersuppliescolorantindex=prtmarkersuppliescolorantindex, prtalerttime=prtalerttime, form_feed=form_feed, prtmediapathmediasizeunit=prtmediapathmediasizeunit, prtinputserialnumber=prtinputserialnumber, asset_number=asset_number, imaging=imaging, ui_select_option=ui_select_option, form_feed_needed=form_feed_needed, prtmarkersupplieslevel=prtmarkersupplieslevel, simm=simm, scanner_adf_page_count=scanner_adf_page_count, prtConsoleLightEntry=prtConsoleLightEntry, prtinterpreterlangfamily=prtinterpreterlangfamily, prtOutput=prtOutput, prtGeneralEntry=prtGeneralEntry, default_vmi=default_vmi, copier_token=copier_token, prtconsolenumberofdisplaychars=prtconsolenumberofdisplaychars, prtmediapathmaxspeed=prtmediapathmaxspeed, default_lines_per_page=default_lines_per_page, self_test=self_test, error6_code=error6_code, hrdeviceerrors=hrdeviceerrors, prtinputversion=prtinputversion, mio1_type=mio1_type, prtconsoledisable=prtconsoledisable, prtmarkernorthmargin=prtmarkernorthmargin, default_scanner_margin_right=default_scanner_margin_right, prtoutputdefaultindex=prtoutputdefaultindex, prtMarkerSuppliesTable=prtMarkerSuppliesTable, io=io, prtmarkerlifecount=prtmarkerlifecount, prtmarkersouthmargin=prtmarkersouthmargin, settings_copier=settings_copier, processing_subsystem=processing_subsystem, prtinterpreterxfeedaddressability=prtinterpreterxfeedaddressability, prtlocalizationcharacterset=prtlocalizationcharacterset, job_info_physical_outbins_used=job_info_physical_outbins_used, scanner_jam_page_count=scanner_jam_page_count, job_info_attr_8=job_info_attr_8, prtoutputstatus=prtoutputstatus, prtCoverTable=prtCoverTable, prtmediapathstatus=prtmediapathstatus, prtinputdefaultindex=prtinputdefaultindex, channel_bytes_received=channel_bytes_received, prtalertcode=prtalertcode, settings_intray=settings_intray, error1=error1)
mibBuilder.exportSymbols("LJ1220-MIB", printmib=printmib, prtChannel=prtChannel, job_info_attr_6=job_info_attr_6, prtmarkercounterunit=prtmarkercounterunit, hrstorageused=hrstorageused, prtmarkeraddressabilityfeeddir=prtmarkeraddressabilityfeeddir, prtmarkerdefaultindex=prtmarkerdefaultindex, prtmediapathmaxspeedprintunit=prtmediapathmaxspeedprintunit, copier_contrast=copier_contrast, prtoutputmaxcapacity=prtoutputmaxcapacity, prtmarkersuppliesmaxcapacity=prtmarkersuppliesmaxcapacity, device_name=device_name, prtchannelstate=prtchannelstate, print_engine_jam_count=print_engine_jam_count, prtStorageRefTable=prtStorageRefTable, model_name=model_name, pjl=pjl, prtGeneralTable=prtGeneralTable, copier_job_contrast=copier_job_contrast, copier_num_copies=copier_num_copies, copier_adf_page_count=copier_adf_page_count, prtmarkerspotcolorants=prtmarkerspotcolorants, prtalerttraininglevel=prtalerttraininglevel, simm2_capacity=simm2_capacity, prtCover=prtCover, not_ready_source_scanner=not_ready_source_scanner, error9_code=error9_code, total_engine_page_count=total_engine_page_count, current_job_parsing_id=current_job_parsing_id, copier_job_collation=copier_job_collation, hrstorageallocationfailures=hrstorageallocationfailures, prtAlertTable=prtAlertTable, prtoutputremainingcapacity=prtoutputremainingcapacity, intray=intray, pcl_default_font_number=pcl_default_font_number, prtinputmediadimfeeddirchosen=prtinputmediadimfeeddirchosen, prtconsolelocalization=prtconsolelocalization, prtinterpreterdefaultcharsetout=prtinterpreterdefaultcharsetout, print_internal_page=print_internal_page, job_info_attr_11=job_info_attr_11, error3_time_stamp=error3_time_stamp, hrStorageTable=hrStorageTable, job_being_parsed=job_being_parsed, job_input_auto_continue_mode=job_input_auto_continue_mode, prtinterpreterlangversion=prtinterpreterlangversion, channelprinteralert=channelprinteralert, settings_io=settings_io, job_info_attr_3=job_info_attr_3, settings_pdl=settings_pdl, scan_compression_factor=scan_compression_factor, default_print_quality=default_print_quality, prtchannelifindex=prtchannelifindex, prtOutputEntry=prtOutputEntry, prtAlert=prtAlert, hrprinterdetectederrorstate=hrprinterdetectederrorstate, dm=dm, job_info_attr_1=job_info_attr_1, scanner_motor_control=scanner_motor_control, prtLocalizationEntry=prtLocalizationEntry, tables=tables, scanner_button_status=scanner_button_status, print_engine=print_engine, device=device, error_log_clear=error_log_clear, prtOutputTable=prtOutputTable, prtMarkerSupplies=prtMarkerSupplies, pcl_default_font_width=pcl_default_font_width, prtmarkersuppliesclass=prtmarkersuppliesclass, prtMarkerEntry=prtMarkerEntry, prtmarkersuppliestype=prtmarkersuppliestype, prtalertgroupindex=prtalertgroupindex, hrstorageindex=hrstorageindex, prtinputvendorname=prtinputvendorname, prtStorageRefEntry=prtStorageRefEntry, DisplayString=DisplayString, settings_system=settings_system, job_info_pages_printed=job_info_pages_printed, tray1_fuser_temperature=tray1_fuser_temperature, postscript_resource_saving_memory_size=postscript_resource_saving_memory_size, prtmarkerwestmargin=prtmarkerwestmargin, prtmediapathmaxmediaxfeeddir=prtmediapathmaxmediaxfeeddir, error7=error7, hrmemorysize=hrmemorysize, prtinterpreterfeedaddressability=prtinterpreterfeedaddressability, prtinterpreterdefaultcharsetin=prtinterpreterdefaultcharsetin, settings_scanner=settings_scanner, channelnumberofchannels=channelnumberofchannels, prtmediapathtype=prtmediapathtype, prtchanneldefaultpagedesclangindex=prtchanneldefaultpagedesclangindex, fw_rom_datecode=fw_rom_datecode, prtinterpreterversion=prtinterpreterversion, prtinterpreterlanglevel=prtinterpreterlanglevel, prtmediapathminmediafeeddir=prtmediapathminmediafeeddir, default_ret=default_ret, prtConsoleDisplayBuffer=prtConsoleDisplayBuffer, default_vertical_black_resolution=default_vertical_black_resolution, prtDeviceRefTable=prtDeviceRefTable, status_scanner=status_scanner, prtmarkersuppliesdescription=prtmarkersuppliesdescription, prtgeneralconfigchanges=prtgeneralconfigchanges, error8_time_stamp=error8_time_stamp, job_info_io_source=job_info_io_source, scan_resolution_range=scan_resolution_range, energy_star=energy_star, copier_job_status=copier_job_status, io_timeout=io_timeout, hrdevicetype=hrdevicetype, job_info_name2=job_info_name2, io_switch=io_switch, scan_calibration_download=scan_calibration_download, job_info_attr_7=job_info_attr_7, id=id, prtMediaPath=prtMediaPath, prtDeviceRefEntry=prtDeviceRefEntry, pdl_pcl=pdl_pcl, copier_job_reduction=copier_job_reduction, prtgeneralreset=prtgeneralreset, default_page_protect=default_page_protect, pdl_postscript=pdl_postscript, auto_continue=auto_continue, prtInputTable=prtInputTable, job_info_attr_5=job_info_attr_5, custom_paper_xfeed_dim=custom_paper_xfeed_dim, error7_time_stamp=error7_time_stamp, channel=channel, prtalertcriticalevents=prtalertcriticalevents, device_config_token=device_config_token, error5_code=error5_code, status_prt_eng=status_prt_eng, prtinputmedianame=prtinputmedianame, status_copier=status_copier, job_info_stage=job_info_stage, status_pdl=status_pdl, error7_code=error7_code, scan_height=scan_height, prtChannelTable=prtChannelTable, prtgeneralprintername=prtgeneralprintername, hrprinterstatus=hrprinterstatus, default_bits_per_pixel=default_bits_per_pixel, channel_io_errors=channel_io_errors, prtinputdescription=prtinputdescription, job_info_size=job_info_size, pcl_resource_saving_memory_size=pcl_resource_saving_memory_size, job_info_attr_10=job_info_attr_10, prtinputname=prtinputname, prtchannelstatus=prtchannelstatus, error4=error4, scan_calibration_error=scan_calibration_error, prtlocalizationcountry=prtlocalizationcountry, error1_code=error1_code, prtchannelcurrentjobcntllangindex=prtchannelcurrentjobcntllangindex, error6_time_stamp=error6_time_stamp)
