#
# PySNMP MIB module CTRON-SFPS-ESYS-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/CTRON-SFPS-ESYS-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 18:15:18 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, Integer, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "OctetString", "Integer", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsIntersection, ValueSizeConstraint, ValueRangeConstraint, ConstraintsUnion, SingleValueConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsIntersection", "ValueSizeConstraint", "ValueRangeConstraint", "ConstraintsUnion", "SingleValueConstraint")
sfpsATMSvcHistoryEvent, sfpsATMSvcHistoryMgr, sfpsATMPortsMgr, sfpsMemHeapStats, sfpsSystemConfig, sfpsSystemPool, sfpsATMPorts, sfpsSystemStats, sfpsATMResolver, sfpsATMResolverCounters, sfpsATMElan, sfpsATMAnibIfoStats = mibBuilder.importSymbols("CTRON-SFPS-INCLUDE-MIB", "sfpsATMSvcHistoryEvent", "sfpsATMSvcHistoryMgr", "sfpsATMPortsMgr", "sfpsMemHeapStats", "sfpsSystemConfig", "sfpsSystemPool", "sfpsATMPorts", "sfpsSystemStats", "sfpsATMResolver", "sfpsATMResolverCounters", "sfpsATMElan", "sfpsATMAnibIfoStats")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
TimeTicks, NotificationType, IpAddress, Bits, Integer32, Gauge32, ObjectIdentity, MibIdentifier, MibScalar, MibTable, MibTableRow, MibTableColumn, Counter64, Unsigned32, Counter32, iso, ModuleIdentity = mibBuilder.importSymbols("SNMPv2-SMI", "TimeTicks", "NotificationType", "IpAddress", "Bits", "Integer32", "Gauge32", "ObjectIdentity", "MibIdentifier", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Counter64", "Unsigned32", "Counter32", "iso", "ModuleIdentity")
TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString")
class HexInteger(Integer32):
    pass

class SfpsSwitchInstance(Integer32):
    pass

class SfpsAddress(OctetString):
    subtypeSpec = OctetString.subtypeSpec + ValueSizeConstraint(6, 6)
    fixedLength = 6

sfpsSysConfigTable = MibTable((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 1, 1, 1, 1), )
if mibBuilder.loadTexts: sfpsSysConfigTable.setStatus('mandatory')
sfpsSysConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 1, 1, 1, 1, 1), ).setIndexNames((0, "CTRON-SFPS-ESYS-MIB", "sfpsSysConfigSwitchInstance"))
if mibBuilder.loadTexts: sfpsSysConfigEntry.setStatus('mandatory')
sfpsSysConfigSwitchInstance = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 1, 1, 1, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsSysConfigSwitchInstance.setStatus('mandatory')
sfpsSysConfigAdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 1, 1, 1, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("disabled", 2), ("enabled", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sfpsSysConfigAdminStatus.setStatus('mandatory')
sfpsSysConfigAdminReset = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 1, 1, 1, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("other", 1), ("reset", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sfpsSysConfigAdminReset.setStatus('mandatory')
sfpsSysConfigOperStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 1, 1, 1, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("other", 1), ("disabled", 2), ("enabled", 3), ("pending-disable", 4), ("pending-enable", 5), ("invalid-config", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsSysConfigOperStatus.setStatus('mandatory')
sfpsSysConfigOperTime = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 1, 1, 1, 1, 1, 5), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsSysConfigOperTime.setStatus('mandatory')
sfpsSysConfigLastChange = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 1, 1, 1, 1, 1, 6), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsSysConfigLastChange.setStatus('mandatory')
sfpsSysConfigVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 1, 1, 1, 1, 1, 7), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsSysConfigVersion.setStatus('mandatory')
sfpsSysConfigMIBRev = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 1, 1, 1, 1, 1, 8), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsSysConfigMIBRev.setStatus('mandatory')
sfpsSysConfigHostMgmtPort = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 1, 1, 1, 1, 1, 9), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sfpsSysConfigHostMgmtPort.setStatus('mandatory')
sfpsSysConfigHostCtrlPort = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 1, 1, 1, 1, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsSysConfigHostCtrlPort.setStatus('mandatory')
sfpsSysConfigHostDataPort = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 1, 1, 1, 1, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsSysConfigHostDataPort.setStatus('mandatory')
sfpsSysConfigHostCtrlThrottleCount = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 1, 1, 1, 1, 1, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsSysConfigHostCtrlThrottleCount.setStatus('mandatory')
sfpsSysConfigHostDataThrottleCount = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 1, 1, 1, 1, 1, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsSysConfigHostDataThrottleCount.setStatus('mandatory')
sfpsSysConfigTrunkSwitch = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 1, 1, 1, 1, 1, 14), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sfpsSysConfigTrunkSwitch.setStatus('mandatory')
sfpsSysConfigSwitchMode = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 1, 1, 1, 1, 1, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("vNET", 1), ("vLAN", 2), ("aNVLLobo", 3), ("aNVLFrontEnd", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sfpsSysConfigSwitchMode.setStatus('mandatory')
sfpsSysConfigSwitchMAC = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 1, 1, 1, 1, 1, 21), SfpsAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsSysConfigSwitchMAC.setStatus('mandatory')
sfpsSysConfigMgmtAccessType = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 1, 1, 1, 1, 1, 22), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("mgmt-Only", 1), ("mgmt-and-Access", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sfpsSysConfigMgmtAccessType.setStatus('mandatory')
sfpsSysConfigChassisMAC = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 1, 1, 1, 1, 1, 23), SfpsAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsSysConfigChassisMAC.setStatus('mandatory')
sfpsSysConfigChassisIP = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 1, 1, 1, 1, 1, 24), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsSysConfigChassisIP.setStatus('mandatory')
sfpsSysStatsTable = MibTable((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 1, 1, 2, 1), )
if mibBuilder.loadTexts: sfpsSysStatsTable.setStatus('mandatory')
sfpsSysStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 1, 1, 2, 1, 1), ).setIndexNames((0, "CTRON-SFPS-ESYS-MIB", "sfpsSysStatsSwitchInstance"))
if mibBuilder.loadTexts: sfpsSysStatsEntry.setStatus('mandatory')
sfpsSysStatsSwitchInstance = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 1, 1, 2, 1, 1, 1), SfpsSwitchInstance()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsSysStatsSwitchInstance.setStatus('mandatory')
sfpsSysStatsAdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 1, 1, 2, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("disabled", 2), ("enabled", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sfpsSysStatsAdminStatus.setStatus('mandatory')
sfpsSysStatsReset = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 1, 1, 2, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("other", 1), ("reset", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sfpsSysStatsReset.setStatus('mandatory')
sfpsSysStatsOperTime = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 1, 1, 2, 1, 1, 4), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsSysStatsOperTime.setStatus('mandatory')
sfpsSysStatsInPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 1, 1, 2, 1, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsSysStatsInPkts.setStatus('mandatory')
sfpsSysStatsOutPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 1, 1, 2, 1, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsSysStatsOutPkts.setStatus('mandatory')
sfpsSysStatsDiscardPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 1, 1, 2, 1, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsSysStatsDiscardPkts.setStatus('mandatory')
sfpsSysStatsFilteredPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 1, 1, 2, 1, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsSysStatsFilteredPkts.setStatus('mandatory')
sfpsSysStatsInOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 1, 1, 2, 1, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsSysStatsInOctets.setStatus('mandatory')
sfpsSysStatsOutOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 1, 1, 2, 1, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsSysStatsOutOctets.setStatus('mandatory')
sfpsSysStatsDiscardOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 1, 1, 2, 1, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsSysStatsDiscardOctets.setStatus('mandatory')
sfpsSysStatsFilteredOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 1, 1, 2, 1, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsSysStatsFilteredOctets.setStatus('mandatory')
sfpsVccPortTable = MibTable((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 4, 1, 6), )
if mibBuilder.loadTexts: sfpsVccPortTable.setStatus('mandatory')
sfpsVccPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 4, 1, 6, 1), ).setIndexNames((0, "CTRON-SFPS-ESYS-MIB", "sfpsVccPortLogPort"))
if mibBuilder.loadTexts: sfpsVccPortEntry.setStatus('mandatory')
sfpsVccPortLogPort = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 4, 1, 6, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsVccPortLogPort.setStatus('mandatory')
sfpsVccPortPhyPort = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 4, 1, 6, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsVccPortPhyPort.setStatus('mandatory')
sfpsVccPortVpi = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 4, 1, 6, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsVccPortVpi.setStatus('mandatory')
sfpsVccPortVci = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 4, 1, 6, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsVccPortVci.setStatus('mandatory')
sfpsVccPortPortType = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 4, 1, 6, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("atmLec", 1), ("atmSvc", 2), ("atmPvc", 3), ("other", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsVccPortPortType.setStatus('mandatory')
sfpsVccPortLogPortType = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 4, 1, 6, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("pendingUp", 1), ("portUp", 2), ("portDown", 3), ("other", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsVccPortLogPortType.setStatus('mandatory')
sfpsVccPortPhyLinkState = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 4, 1, 6, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("linkUp", 1), ("linkDown", 2), ("other", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsVccPortPhyLinkState.setStatus('mandatory')
sfpsATMResolveSystemLearnTableSize = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 4, 3, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sfpsATMResolveSystemLearnTableSize.setStatus('mandatory')
sfpsATMResolveCountersVerb = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 4, 3, 2, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("other", 1), ("reset", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsATMResolveCountersVerb.setStatus('mandatory')
sfpsATMResolveCountersUptime = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 4, 3, 2, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsATMResolveCountersUptime.setStatus('mandatory')
sfpsATMResolveCountersQueryMACReq = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 4, 3, 2, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsATMResolveCountersQueryMACReq.setStatus('mandatory')
sfpsATMResolveCountersQueryMACFail = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 4, 3, 2, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsATMResolveCountersQueryMACFail.setStatus('mandatory')
sfpsATMResolveCountersQueryMACGood = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 4, 3, 2, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsATMResolveCountersQueryMACGood.setStatus('mandatory')
sfpsATMResolveCountersQueryMACDaSaChecks = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 4, 3, 2, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsATMResolveCountersQueryMACDaSaChecks.setStatus('mandatory')
sfpsATMResolveCountersQueryMACDaSaHits = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 4, 3, 2, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsATMResolveCountersQueryMACDaSaHits.setStatus('mandatory')
sfpsATMResolveCountersQueryMACDaSaMissess = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 4, 3, 2, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsATMResolveCountersQueryMACDaSaMissess.setStatus('mandatory')
sfpsATMResolveCountersQueryMACVdirChecks = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 4, 3, 2, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsATMResolveCountersQueryMACVdirChecks.setStatus('mandatory')
sfpsATMResolveCountersQueryMACVdirHits = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 4, 3, 2, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsATMResolveCountersQueryMACVdirHits.setStatus('mandatory')
sfpsATMResolveCountersQueryMACVdirMisses = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 4, 3, 2, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsATMResolveCountersQueryMACVdirMisses.setStatus('mandatory')
sfpsATMResolveCountersQueryMACErrors = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 4, 3, 2, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsATMResolveCountersQueryMACErrors.setStatus('mandatory')
sfpsATMResolveCountersQueryMACLecPortSuppress = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 4, 3, 2, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsATMResolveCountersQueryMACLecPortSuppress.setStatus('mandatory')
sfpsATMResolveCountersQueryMACStandbyDrops = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 4, 3, 2, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsATMResolveCountersQueryMACStandbyDrops.setStatus('mandatory')
sfpsATMResolveCountersQueryDaSaRequests = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 4, 3, 2, 15), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsATMResolveCountersQueryDaSaRequests.setStatus('mandatory')
sfpsATMResolveCountersQueryDaSaHits = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 4, 3, 2, 16), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsATMResolveCountersQueryDaSaHits.setStatus('mandatory')
sfpsATMResolveCountersQueryDaSaMisses = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 4, 3, 2, 17), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsATMResolveCountersQueryDaSaMisses.setStatus('mandatory')
sfpsATMResolveCountersQueryDaSaErrors = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 4, 3, 2, 18), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsATMResolveCountersQueryDaSaErrors.setStatus('mandatory')
sfpsATMResolveDiagAPIVerb = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 4, 3, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sfpsATMResolveDiagAPIVerb.setStatus('mandatory')
sfpsATMResolveDiagAPIInDA = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 4, 3, 8), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sfpsATMResolveDiagAPIInDA.setStatus('mandatory')
sfpsATMResolveDiagAPIInSA = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 4, 3, 9), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sfpsATMResolveDiagAPIInSA.setStatus('mandatory')
sfpsATMResolveDiagAPIInSrcLecPort = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 4, 3, 10), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sfpsATMResolveDiagAPIInSrcLecPort.setStatus('mandatory')
sfpsATMResolveDiagAPIOutStatus = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 4, 3, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsATMResolveDiagAPIOutStatus.setStatus('mandatory')
sfpsATMResolveDiagAPIOutPort = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 4, 3, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsATMResolveDiagAPIOutPort.setStatus('mandatory')
sfpsPoolTable = MibTable((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 1, 1, 4, 1), )
if mibBuilder.loadTexts: sfpsPoolTable.setStatus('mandatory')
sfpsPoolTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 1, 1, 4, 1, 1), ).setIndexNames((0, "CTRON-SFPS-ESYS-MIB", "sfpsPoolTableIndex"))
if mibBuilder.loadTexts: sfpsPoolTableEntry.setStatus('mandatory')
sfpsPoolTableIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 1, 1, 4, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsPoolTableIndex.setStatus('mandatory')
sfpsPoolTableName = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 1, 1, 4, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsPoolTableName.setStatus('mandatory')
sfpsPoolTableRAM = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 1, 1, 4, 1, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsPoolTableRAM.setStatus('mandatory')
sfpsPoolTableBlockSize = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 1, 1, 4, 1, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsPoolTableBlockSize.setStatus('mandatory')
sfpsPoolTableBlockCount = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 1, 1, 4, 1, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsPoolTableBlockCount.setStatus('mandatory')
sfpsPoolTableBlockMax = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 1, 1, 4, 1, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsPoolTableBlockMax.setStatus('mandatory')
sfpsPoolTableObjSize = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 1, 1, 4, 1, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsPoolTableObjSize.setStatus('mandatory')
sfpsPoolTableObjInUse = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 1, 1, 4, 1, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsPoolTableObjInUse.setStatus('mandatory')
sfpsPoolTableObjMax = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 1, 1, 4, 1, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsPoolTableObjMax.setStatus('mandatory')
sfpsPoolTableObjInBlock = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 1, 1, 4, 1, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsPoolTableObjInBlock.setStatus('mandatory')
sfpsAnibIfoStatsTable = MibTable((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 4, 4, 1), )
if mibBuilder.loadTexts: sfpsAnibIfoStatsTable.setStatus('mandatory')
sfpsAnibIfoStatsTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 4, 4, 1, 1), ).setIndexNames((0, "CTRON-SFPS-ESYS-MIB", "sfpsAnibIfoStatsPhysIntf"))
if mibBuilder.loadTexts: sfpsAnibIfoStatsTableEntry.setStatus('mandatory')
sfpsAnibIfoStatsPhysIntf = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 4, 4, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsAnibIfoStatsPhysIntf.setStatus('mandatory')
sfpsAnibIfoStatsCtrlMessages = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 4, 4, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsAnibIfoStatsCtrlMessages.setStatus('mandatory')
sfpsAnibIfoStatsIlmiMessages = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 4, 4, 1, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsAnibIfoStatsIlmiMessages.setStatus('mandatory')
sfpsAnibIfoStatsUniMessages = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 4, 4, 1, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsAnibIfoStatsUniMessages.setStatus('mandatory')
sfpsAnibIfoStatsLaneMessages = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 4, 4, 1, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsAnibIfoStatsLaneMessages.setStatus('mandatory')
sfpsAnibIfoStatsPCSPoolSize = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 4, 4, 1, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsAnibIfoStatsPCSPoolSize.setStatus('mandatory')
sfpsAnibIfoStatsPCSPoolDrops = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 4, 4, 1, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsAnibIfoStatsPCSPoolDrops.setStatus('mandatory')
sfpsAnibIfoStatsPoolIlmiDrops = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 4, 4, 1, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsAnibIfoStatsPoolIlmiDrops.setStatus('mandatory')
sfpsAnibIfoStatsPoolUniDrops = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 4, 4, 1, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsAnibIfoStatsPoolUniDrops.setStatus('mandatory')
sfpsAnibIfoStatsPoolLaneDrops = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 4, 4, 1, 1, 19), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsAnibIfoStatsPoolLaneDrops.setStatus('mandatory')
sfpsAnibIfoStatsPCSAvail = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 4, 4, 1, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsAnibIfoStatsPCSAvail.setStatus('mandatory')
sfpsAnibIfoStatsPCSInUse = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 4, 4, 1, 1, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsAnibIfoStatsPCSInUse.setStatus('mandatory')
sfpsAnibIfoStatsStandbyLeArpsDrops = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 4, 4, 1, 1, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsAnibIfoStatsStandbyLeArpsDrops.setStatus('mandatory')
sfpsAnibIfoStatsStandbyUnknownsDrops = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 4, 4, 1, 1, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsAnibIfoStatsStandbyUnknownsDrops.setStatus('mandatory')
sfpsAnibIfoStatsStandbyANIBUnknownsDrops = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 4, 4, 1, 1, 15), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsAnibIfoStatsStandbyANIBUnknownsDrops.setStatus('mandatory')
sfpsMemHeapStatsHeapInit = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 1, 1, 2, 2, 1, 1), HexInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsMemHeapStatsHeapInit.setStatus('mandatory')
sfpsMemHeapStatsHeapMax = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 1, 1, 2, 2, 1, 2), HexInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsMemHeapStatsHeapMax.setStatus('mandatory')
sfpsMemHeapStatsHeapEnd = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 1, 1, 2, 2, 1, 3), HexInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsMemHeapStatsHeapEnd.setStatus('mandatory')
sfpsMemHeapStatsHeapSize = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 1, 1, 2, 2, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsMemHeapStatsHeapSize.setStatus('mandatory')
sfpsMemHeapStatsFragCount = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 1, 1, 2, 2, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsMemHeapStatsFragCount.setStatus('mandatory')
sfpsMemHeapStatsFragLargest = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 1, 1, 2, 2, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsMemHeapStatsFragLargest.setStatus('mandatory')
sfpsMemHeapStatsFragBytes = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 1, 1, 2, 2, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsMemHeapStatsFragBytes.setStatus('mandatory')
sfpsMemHeapStatsHeapUsed = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 1, 1, 2, 2, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsMemHeapStatsHeapUsed.setStatus('mandatory')
sfpsMemHeapStatsHeapAvail = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 1, 1, 2, 2, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsMemHeapStatsHeapAvail.setStatus('mandatory')
sfpsMemHeapStatsHeapUseMax = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 1, 1, 2, 2, 1, 10), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsMemHeapStatsHeapUseMax.setStatus('mandatory')
sfpsMemHeapStatsHeapUsePercent = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 1, 1, 2, 2, 1, 11), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsMemHeapStatsHeapUsePercent.setStatus('mandatory')
sfpsATMPortsTable = MibTable((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 4, 5, 1), )
if mibBuilder.loadTexts: sfpsATMPortsTable.setStatus('mandatory')
sfpsATMPortsTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 4, 5, 1, 1), ).setIndexNames((0, "CTRON-SFPS-ESYS-MIB", "sfpsATMPortsPhysIntf"))
if mibBuilder.loadTexts: sfpsATMPortsTableEntry.setStatus('mandatory')
sfpsATMPortsPhysIntf = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 4, 5, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsATMPortsPhysIntf.setStatus('mandatory')
sfpsATMPortsTotalLECPorts = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 4, 5, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsATMPortsTotalLECPorts.setStatus('mandatory')
sfpsATMPortsTotalPVCPorts = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 4, 5, 1, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsATMPortsTotalPVCPorts.setStatus('mandatory')
sfpsATMPortsTotalSVCPorts = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 4, 5, 1, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsATMPortsTotalSVCPorts.setStatus('mandatory')
sfpsATMPortsBaseIntfNum = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 4, 5, 1, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsATMPortsBaseIntfNum.setStatus('mandatory')
sfpsATMPortsInUse = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 4, 5, 1, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsATMPortsInUse.setStatus('mandatory')
sfpsATMPortsMgrVerb = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 4, 5, 2, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("other", 1), ("set", 2), ("setToDefaults", 3), ("coldResetNV", 4), ("warmResetNB", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sfpsATMPortsMgrVerb.setStatus('mandatory')
sfpsATMPortsMgrPhysIntf = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 4, 5, 2, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sfpsATMPortsMgrPhysIntf.setStatus('mandatory')
sfpsATMPortsMgrTotalLECPorts = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 4, 5, 2, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sfpsATMPortsMgrTotalLECPorts.setStatus('mandatory')
sfpsATMPortsMgrTotalPVCPorts = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 4, 5, 2, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sfpsATMPortsMgrTotalPVCPorts.setStatus('mandatory')
sfpsATMPortsMgrTotalSVCPorts = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 4, 5, 2, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sfpsATMPortsMgrTotalSVCPorts.setStatus('mandatory')
sfpsATMPortsMgrVerbStatus = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 4, 5, 2, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("ok", 1), ("exceededMaxAllotment", 2), ("badIf", 3), ("error", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sfpsATMPortsMgrVerbStatus.setStatus('mandatory')
sfpsATMLecPortTable = MibTable((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 4, 1, 7), )
if mibBuilder.loadTexts: sfpsATMLecPortTable.setStatus('mandatory')
sfpsATMLecPortTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 4, 1, 7, 1), ).setIndexNames((0, "CTRON-SFPS-ESYS-MIB", "sfpsATMLecPortLogPort"))
if mibBuilder.loadTexts: sfpsATMLecPortTableEntry.setStatus('mandatory')
sfpsATMLecPortLogPort = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 4, 1, 7, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsATMLecPortLogPort.setStatus('mandatory')
sfpsATMLecPortPhyPort = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 4, 1, 7, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsATMLecPortPhyPort.setStatus('mandatory')
sfpsATMLecPortElanName = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 4, 1, 7, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsATMLecPortElanName.setStatus('mandatory')
sfpsATMLecPortPhyLinkState = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 4, 1, 7, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsATMLecPortPhyLinkState.setStatus('mandatory')
sfpsATMLecPortLECType = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 4, 1, 7, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsATMLecPortLECType.setStatus('mandatory')
sfpsATMSvcHistoryEventTable = MibTable((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 4, 8, 2, 1), )
if mibBuilder.loadTexts: sfpsATMSvcHistoryEventTable.setStatus('mandatory')
sfpsATMSvcHistoryEventTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 4, 8, 2, 1, 1), ).setIndexNames((0, "CTRON-SFPS-ESYS-MIB", "sfpsATMSvcHistoryEventIndex"))
if mibBuilder.loadTexts: sfpsATMSvcHistoryEventTableEntry.setStatus('mandatory')
sfpsATMSvcHistoryEventIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 4, 8, 2, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsATMSvcHistoryEventIndex.setStatus('mandatory')
sfpsATMSvcHistoryEventATMAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 4, 8, 2, 1, 1, 2), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsATMSvcHistoryEventATMAddr.setStatus('mandatory')
sfpsATMSvcHistoryEventPortNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 4, 8, 2, 1, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsATMSvcHistoryEventPortNumber.setStatus('mandatory')
sfpsATMSvcHistoryEventEvent = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 4, 8, 2, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12))).clone(namedValues=NamedValues(("idle", 1), ("opening", 2), ("openResponse", 3), ("peerOpenResponse", 4), ("openAck", 5), ("open", 6), ("closeResponse", 7), ("closeAck", 8), ("close", 9), ("clean", 10), ("cleanCloseResp", 11), ("cleanCloseAck", 12)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsATMSvcHistoryEventEvent.setStatus('mandatory')
sfpsATMSvcHistoryEventEventChange = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 4, 8, 2, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("error", 1), ("normal", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsATMSvcHistoryEventEventChange.setStatus('mandatory')
sfpsATMSvcHistoryEventVccHand = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 4, 8, 2, 1, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsATMSvcHistoryEventVccHand.setStatus('mandatory')
sfpsATMSvcHistoryEventVpi = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 4, 8, 2, 1, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsATMSvcHistoryEventVpi.setStatus('mandatory')
sfpsATMSvcHistoryEventVci = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 4, 8, 2, 1, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsATMSvcHistoryEventVci.setStatus('mandatory')
sfpsATMSvcHistoryEventTime = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 4, 8, 2, 1, 1, 9), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsATMSvcHistoryEventTime.setStatus('mandatory')
sfpsATMSvcHistoryMgrVerb = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 4, 8, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("other", 1), ("resetSvcHistory", 2), ("isableSvcLogging", 3), ("enableSvcLogging", 4), ("enableSvcLogsNoWrapping", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sfpsATMSvcHistoryMgrVerb.setStatus('mandatory')
sfpsATMSvcHistoryMgrSvcHistoryWraps = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 4, 8, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsATMSvcHistoryMgrSvcHistoryWraps.setStatus('mandatory')
sfpsATMSvcHistoryMgrLogState = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 4, 8, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("enabled", 1), ("enabledNoWrap", 2), ("disabled", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsATMSvcHistoryMgrLogState.setStatus('mandatory')
sfpsATMSvcHistoryMgrEntriesCount = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 4, 8, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsATMSvcHistoryMgrEntriesCount.setStatus('mandatory')
mibBuilder.exportSymbols("CTRON-SFPS-ESYS-MIB", sfpsATMPortsInUse=sfpsATMPortsInUse, sfpsMemHeapStatsHeapMax=sfpsMemHeapStatsHeapMax, sfpsATMResolveCountersUptime=sfpsATMResolveCountersUptime, SfpsAddress=SfpsAddress, sfpsATMLecPortLECType=sfpsATMLecPortLECType, sfpsAnibIfoStatsPoolLaneDrops=sfpsAnibIfoStatsPoolLaneDrops, sfpsMemHeapStatsHeapInit=sfpsMemHeapStatsHeapInit, sfpsATMPortsMgrTotalLECPorts=sfpsATMPortsMgrTotalLECPorts, sfpsPoolTableBlockSize=sfpsPoolTableBlockSize, sfpsATMSvcHistoryMgrVerb=sfpsATMSvcHistoryMgrVerb, sfpsAnibIfoStatsTableEntry=sfpsAnibIfoStatsTableEntry, SfpsSwitchInstance=SfpsSwitchInstance, sfpsPoolTableRAM=sfpsPoolTableRAM, sfpsAnibIfoStatsStandbyANIBUnknownsDrops=sfpsAnibIfoStatsStandbyANIBUnknownsDrops, sfpsSysStatsReset=sfpsSysStatsReset, sfpsSysConfigTable=sfpsSysConfigTable, sfpsMemHeapStatsHeapUseMax=sfpsMemHeapStatsHeapUseMax, sfpsAnibIfoStatsPCSInUse=sfpsAnibIfoStatsPCSInUse, sfpsPoolTableObjMax=sfpsPoolTableObjMax, sfpsATMSvcHistoryEventEventChange=sfpsATMSvcHistoryEventEventChange, sfpsATMResolveCountersQueryMACLecPortSuppress=sfpsATMResolveCountersQueryMACLecPortSuppress, sfpsSysStatsInOctets=sfpsSysStatsInOctets, sfpsSysConfigAdminStatus=sfpsSysConfigAdminStatus, sfpsMemHeapStatsFragBytes=sfpsMemHeapStatsFragBytes, sfpsATMResolveCountersQueryMACDaSaMissess=sfpsATMResolveCountersQueryMACDaSaMissess, sfpsATMResolveCountersQueryDaSaRequests=sfpsATMResolveCountersQueryDaSaRequests, sfpsAnibIfoStatsPoolUniDrops=sfpsAnibIfoStatsPoolUniDrops, sfpsATMLecPortTableEntry=sfpsATMLecPortTableEntry, sfpsVccPortPhyPort=sfpsVccPortPhyPort, sfpsATMPortsMgrPhysIntf=sfpsATMPortsMgrPhysIntf, sfpsSysStatsAdminStatus=sfpsSysStatsAdminStatus, sfpsAnibIfoStatsPhysIntf=sfpsAnibIfoStatsPhysIntf, sfpsATMLecPortPhyLinkState=sfpsATMLecPortPhyLinkState, sfpsSysConfigOperStatus=sfpsSysConfigOperStatus, sfpsATMResolveDiagAPIOutStatus=sfpsATMResolveDiagAPIOutStatus, sfpsSysConfigOperTime=sfpsSysConfigOperTime, sfpsSysConfigHostDataPort=sfpsSysConfigHostDataPort, sfpsATMPortsTotalPVCPorts=sfpsATMPortsTotalPVCPorts, sfpsSysConfigHostMgmtPort=sfpsSysConfigHostMgmtPort, sfpsATMResolveDiagAPIInSrcLecPort=sfpsATMResolveDiagAPIInSrcLecPort, sfpsAnibIfoStatsStandbyLeArpsDrops=sfpsAnibIfoStatsStandbyLeArpsDrops, sfpsVccPortEntry=sfpsVccPortEntry, sfpsATMPortsPhysIntf=sfpsATMPortsPhysIntf, sfpsMemHeapStatsFragCount=sfpsMemHeapStatsFragCount, sfpsAnibIfoStatsPoolIlmiDrops=sfpsAnibIfoStatsPoolIlmiDrops, sfpsATMSvcHistoryEventTime=sfpsATMSvcHistoryEventTime, sfpsSysConfigVersion=sfpsSysConfigVersion, sfpsSysConfigSwitchMAC=sfpsSysConfigSwitchMAC, sfpsATMResolveCountersQueryMACErrors=sfpsATMResolveCountersQueryMACErrors, sfpsSysConfigChassisIP=sfpsSysConfigChassisIP, sfpsSysStatsFilteredPkts=sfpsSysStatsFilteredPkts, sfpsATMLecPortElanName=sfpsATMLecPortElanName, sfpsATMResolveCountersQueryMACGood=sfpsATMResolveCountersQueryMACGood, sfpsATMPortsMgrTotalPVCPorts=sfpsATMPortsMgrTotalPVCPorts, sfpsATMResolveCountersQueryMACVdirHits=sfpsATMResolveCountersQueryMACVdirHits, sfpsATMResolveCountersQueryMACDaSaChecks=sfpsATMResolveCountersQueryMACDaSaChecks, sfpsAnibIfoStatsLaneMessages=sfpsAnibIfoStatsLaneMessages, sfpsATMPortsTable=sfpsATMPortsTable, sfpsPoolTableEntry=sfpsPoolTableEntry, sfpsATMResolveDiagAPIInSA=sfpsATMResolveDiagAPIInSA, sfpsATMResolveCountersQueryMACReq=sfpsATMResolveCountersQueryMACReq, sfpsATMSvcHistoryEventATMAddr=sfpsATMSvcHistoryEventATMAddr, sfpsATMLecPortTable=sfpsATMLecPortTable, sfpsMemHeapStatsHeapEnd=sfpsMemHeapStatsHeapEnd, sfpsATMResolveCountersQueryMACVdirChecks=sfpsATMResolveCountersQueryMACVdirChecks, sfpsATMPortsMgrVerbStatus=sfpsATMPortsMgrVerbStatus, sfpsPoolTableObjInUse=sfpsPoolTableObjInUse, sfpsATMSvcHistoryEventTableEntry=sfpsATMSvcHistoryEventTableEntry, sfpsATMSvcHistoryMgrLogState=sfpsATMSvcHistoryMgrLogState, sfpsVccPortPortType=sfpsVccPortPortType, sfpsMemHeapStatsHeapUsePercent=sfpsMemHeapStatsHeapUsePercent, sfpsPoolTableIndex=sfpsPoolTableIndex, sfpsATMPortsMgrVerb=sfpsATMPortsMgrVerb, sfpsSysStatsOutOctets=sfpsSysStatsOutOctets, sfpsATMSvcHistoryEventVpi=sfpsATMSvcHistoryEventVpi, sfpsMemHeapStatsHeapSize=sfpsMemHeapStatsHeapSize, sfpsSysStatsDiscardPkts=sfpsSysStatsDiscardPkts, sfpsATMResolveCountersQueryMACDaSaHits=sfpsATMResolveCountersQueryMACDaSaHits, sfpsATMPortsBaseIntfNum=sfpsATMPortsBaseIntfNum, sfpsATMSvcHistoryEventVccHand=sfpsATMSvcHistoryEventVccHand, sfpsATMLecPortPhyPort=sfpsATMLecPortPhyPort, sfpsATMResolveCountersQueryMACVdirMisses=sfpsATMResolveCountersQueryMACVdirMisses, sfpsSysStatsSwitchInstance=sfpsSysStatsSwitchInstance, sfpsAnibIfoStatsUniMessages=sfpsAnibIfoStatsUniMessages, sfpsATMSvcHistoryMgrEntriesCount=sfpsATMSvcHistoryMgrEntriesCount, sfpsVccPortTable=sfpsVccPortTable, sfpsATMResolveCountersVerb=sfpsATMResolveCountersVerb, sfpsAnibIfoStatsPCSPoolDrops=sfpsAnibIfoStatsPCSPoolDrops, sfpsMemHeapStatsHeapUsed=sfpsMemHeapStatsHeapUsed, sfpsSysStatsOutPkts=sfpsSysStatsOutPkts, sfpsPoolTableName=sfpsPoolTableName, sfpsATMResolveDiagAPIInDA=sfpsATMResolveDiagAPIInDA, sfpsSysStatsOperTime=sfpsSysStatsOperTime, sfpsATMPortsTotalSVCPorts=sfpsATMPortsTotalSVCPorts, sfpsVccPortVpi=sfpsVccPortVpi, sfpsATMSvcHistoryEventTable=sfpsATMSvcHistoryEventTable, sfpsATMResolveCountersQueryDaSaMisses=sfpsATMResolveCountersQueryDaSaMisses, sfpsSysStatsDiscardOctets=sfpsSysStatsDiscardOctets, sfpsAnibIfoStatsPCSAvail=sfpsAnibIfoStatsPCSAvail, sfpsATMSvcHistoryEventIndex=sfpsATMSvcHistoryEventIndex, sfpsPoolTable=sfpsPoolTable, sfpsPoolTableObjInBlock=sfpsPoolTableObjInBlock, sfpsAnibIfoStatsPCSPoolSize=sfpsAnibIfoStatsPCSPoolSize, sfpsSysStatsEntry=sfpsSysStatsEntry, sfpsSysConfigTrunkSwitch=sfpsSysConfigTrunkSwitch, sfpsATMResolveCountersQueryDaSaErrors=sfpsATMResolveCountersQueryDaSaErrors, sfpsATMResolveDiagAPIVerb=sfpsATMResolveDiagAPIVerb, sfpsAnibIfoStatsStandbyUnknownsDrops=sfpsAnibIfoStatsStandbyUnknownsDrops, sfpsATMResolveSystemLearnTableSize=sfpsATMResolveSystemLearnTableSize, HexInteger=HexInteger, sfpsSysStatsFilteredOctets=sfpsSysStatsFilteredOctets, sfpsSysStatsInPkts=sfpsSysStatsInPkts, sfpsMemHeapStatsHeapAvail=sfpsMemHeapStatsHeapAvail, sfpsSysStatsTable=sfpsSysStatsTable, sfpsSysConfigMgmtAccessType=sfpsSysConfigMgmtAccessType, sfpsATMResolveCountersQueryMACFail=sfpsATMResolveCountersQueryMACFail, sfpsATMResolveCountersQueryDaSaHits=sfpsATMResolveCountersQueryDaSaHits, sfpsPoolTableObjSize=sfpsPoolTableObjSize, sfpsATMSvcHistoryEventPortNumber=sfpsATMSvcHistoryEventPortNumber, sfpsATMPortsTableEntry=sfpsATMPortsTableEntry, sfpsSysConfigEntry=sfpsSysConfigEntry, sfpsPoolTableBlockCount=sfpsPoolTableBlockCount, sfpsSysConfigHostCtrlThrottleCount=sfpsSysConfigHostCtrlThrottleCount, sfpsATMPortsTotalLECPorts=sfpsATMPortsTotalLECPorts, sfpsSysConfigHostDataThrottleCount=sfpsSysConfigHostDataThrottleCount, sfpsMemHeapStatsFragLargest=sfpsMemHeapStatsFragLargest, sfpsSysConfigAdminReset=sfpsSysConfigAdminReset, sfpsATMResolveDiagAPIOutPort=sfpsATMResolveDiagAPIOutPort, sfpsAnibIfoStatsIlmiMessages=sfpsAnibIfoStatsIlmiMessages, sfpsVccPortPhyLinkState=sfpsVccPortPhyLinkState, sfpsAnibIfoStatsCtrlMessages=sfpsAnibIfoStatsCtrlMessages, sfpsATMPortsMgrTotalSVCPorts=sfpsATMPortsMgrTotalSVCPorts, sfpsAnibIfoStatsTable=sfpsAnibIfoStatsTable, sfpsSysConfigLastChange=sfpsSysConfigLastChange, sfpsPoolTableBlockMax=sfpsPoolTableBlockMax, sfpsVccPortLogPortType=sfpsVccPortLogPortType, sfpsATMResolveCountersQueryMACStandbyDrops=sfpsATMResolveCountersQueryMACStandbyDrops, sfpsSysConfigHostCtrlPort=sfpsSysConfigHostCtrlPort, sfpsSysConfigSwitchMode=sfpsSysConfigSwitchMode, sfpsVccPortVci=sfpsVccPortVci, sfpsATMSvcHistoryMgrSvcHistoryWraps=sfpsATMSvcHistoryMgrSvcHistoryWraps, sfpsATMLecPortLogPort=sfpsATMLecPortLogPort, sfpsSysConfigMIBRev=sfpsSysConfigMIBRev, sfpsATMSvcHistoryEventEvent=sfpsATMSvcHistoryEventEvent, sfpsSysConfigChassisMAC=sfpsSysConfigChassisMAC, sfpsVccPortLogPort=sfpsVccPortLogPort, sfpsATMSvcHistoryEventVci=sfpsATMSvcHistoryEventVci, sfpsSysConfigSwitchInstance=sfpsSysConfigSwitchInstance)
