#
# PySNMP MIB module XYLAN-XIP-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/XYLAN-XIP-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 21:39:10 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, OctetString, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "Integer", "OctetString", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueSizeConstraint, ConstraintsIntersection, ValueRangeConstraint, ConstraintsUnion, SingleValueConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueSizeConstraint", "ConstraintsIntersection", "ValueRangeConstraint", "ConstraintsUnion", "SingleValueConstraint")
MacAddress, = mibBuilder.importSymbols("BRIDGE-MIB", "MacAddress")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
Integer32, ModuleIdentity, ObjectIdentity, NotificationType, iso, IpAddress, TimeTicks, MibScalar, MibTable, MibTableRow, MibTableColumn, Unsigned32, Counter32, Counter64, MibIdentifier, Bits, Gauge32 = mibBuilder.importSymbols("SNMPv2-SMI", "Integer32", "ModuleIdentity", "ObjectIdentity", "NotificationType", "iso", "IpAddress", "TimeTicks", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Unsigned32", "Counter32", "Counter64", "MibIdentifier", "Bits", "Gauge32")
DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention")
xylanXIPArch, = mibBuilder.importSymbols("XYLAN-BASE-MIB", "xylanXIPArch")
xylanXIPGMAPconfig = MibIdentifier((1, 3, 6, 1, 4, 1, 800, 2, 20, 1))
xylanXIPXMAPconfig = MibIdentifier((1, 3, 6, 1, 4, 1, 800, 2, 20, 2))
xylanXIPGMAPstate = MibScalar((1, 3, 6, 1, 4, 1, 800, 2, 20, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("inactive", 0), ("active", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xylanXIPGMAPstate.setStatus('mandatory')
xylanXIPGMAPgaptime = MibScalar((1, 3, 6, 1, 4, 1, 800, 2, 20, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xylanXIPGMAPgaptime.setStatus('mandatory')
xylanXIPGMAPupdatetime = MibScalar((1, 3, 6, 1, 4, 1, 800, 2, 20, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xylanXIPGMAPupdatetime.setStatus('mandatory')
xylanXIPGMAPholdtime = MibScalar((1, 3, 6, 1, 4, 1, 800, 2, 20, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xylanXIPGMAPholdtime.setStatus('mandatory')
xylanXIPGMAPLastTrapReason = MibScalar((1, 3, 6, 1, 4, 1, 800, 2, 20, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("no-trap-sent", 0), ("authenticated-group", 1), ("conflicting-binding-rule", 2), ("same-proto-different-groups-conflict", 3), ("same-group-different-protocols-conflict", 4), ("non-mobile-group", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xylanXIPGMAPLastTrapReason.setStatus('mandatory')
xylanXIPGMAPLastTrapPort = MibScalar((1, 3, 6, 1, 4, 1, 800, 2, 20, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xylanXIPGMAPLastTrapPort.setStatus('mandatory')
xylanXIPGMAPLastTrapMac = MibScalar((1, 3, 6, 1, 4, 1, 800, 2, 20, 1, 7), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xylanXIPGMAPLastTrapMac.setStatus('mandatory')
xylanXIPGMAPLastTrapProtocol = MibScalar((1, 3, 6, 1, 4, 1, 800, 2, 20, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xylanXIPGMAPLastTrapProtocol.setStatus('mandatory')
xylanXIPGMAPLastTrapGroup = MibScalar((1, 3, 6, 1, 4, 1, 800, 2, 20, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xylanXIPGMAPLastTrapGroup.setStatus('mandatory')
xylanXIPGMAPTable = MibTable((1, 3, 6, 1, 4, 1, 800, 2, 20, 1, 10), )
if mibBuilder.loadTexts: xylanXIPGMAPTable.setStatus('mandatory')
xylanXIPGMAPTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 800, 2, 20, 1, 10, 1), ).setIndexNames((0, "XYLAN-XIP-MIB", "xylanXIPGMAPMacAddr"), (0, "XYLAN-XIP-MIB", "xylanXIPGMAPProtocol"))
if mibBuilder.loadTexts: xylanXIPGMAPTableEntry.setStatus('mandatory')
xylanXIPGMAPMacAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 20, 1, 10, 1, 1), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xylanXIPGMAPMacAddr.setStatus('mandatory')
xylanXIPGMAPProtocol = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 20, 1, 10, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xylanXIPGMAPProtocol.setStatus('mandatory')
xylanXIPGMAPGroup = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 20, 1, 10, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xylanXIPGMAPGroup.setStatus('mandatory')
xylanXIPGMAPSrcSwitch = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 20, 1, 10, 1, 4), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xylanXIPGMAPSrcSwitch.setStatus('mandatory')
xylanXIPGMAPFlags = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 20, 1, 10, 1, 5), OctetString().subtype(subtypeSpec=ValueSizeConstraint(4, 4)).setFixedLength(4)).setMaxAccess("readonly")
if mibBuilder.loadTexts: xylanXIPGMAPFlags.setStatus('mandatory')
xylanXIPGMAPTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 20, 1, 10, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xylanXIPGMAPTimeout.setStatus('mandatory')
xylanXIPXMAPstate = MibScalar((1, 3, 6, 1, 4, 1, 800, 2, 20, 2, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("inactive", 0), ("active", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xylanXIPXMAPstate.setStatus('mandatory')
xylanXIPXMAPdisctime = MibScalar((1, 3, 6, 1, 4, 1, 800, 2, 20, 2, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xylanXIPXMAPdisctime.setStatus('mandatory')
xylanXIPXMAPcommontime = MibScalar((1, 3, 6, 1, 4, 1, 800, 2, 20, 2, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xylanXIPXMAPcommontime.setStatus('mandatory')
xylanXIPXMAPLastTrapReason = MibScalar((1, 3, 6, 1, 4, 1, 800, 2, 20, 2, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("no-trap-sent", 0), ("add", 1), ("change", 2), ("remove", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xylanXIPXMAPLastTrapReason.setStatus('mandatory')
xylanXIPXMAPLastTrapPort = MibScalar((1, 3, 6, 1, 4, 1, 800, 2, 20, 2, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xylanXIPXMAPLastTrapPort.setStatus('mandatory')
xylanXIPXMAPports = MibTable((1, 3, 6, 1, 4, 1, 800, 2, 20, 2, 6), )
if mibBuilder.loadTexts: xylanXIPXMAPports.setStatus('mandatory')
xylanXIPXMAPPortentry = MibTableRow((1, 3, 6, 1, 4, 1, 800, 2, 20, 2, 6, 1), ).setIndexNames((0, "XYLAN-XIP-MIB", "xylanXIPXMAPAdjPort"), (0, "XYLAN-XIP-MIB", "xylanXIPXMAPRemMac"), (0, "XYLAN-XIP-MIB", "xylanXIPXMAPRemPort"))
if mibBuilder.loadTexts: xylanXIPXMAPPortentry.setStatus('mandatory')
xylanXIPXMAPAdjPort = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 20, 2, 6, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xylanXIPXMAPAdjPort.setStatus('mandatory')
xylanXIPXMAPRemMac = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 20, 2, 6, 1, 2), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xylanXIPXMAPRemMac.setStatus('mandatory')
xylanXIPXMAPRemPort = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 20, 2, 6, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xylanXIPXMAPRemPort.setStatus('mandatory')
xylanXIPXMAPRemGroup = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 20, 2, 6, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xylanXIPXMAPRemGroup.setStatus('mandatory')
xylanXIPXMAPhosts = MibTable((1, 3, 6, 1, 4, 1, 800, 2, 20, 2, 7), )
if mibBuilder.loadTexts: xylanXIPXMAPhosts.setStatus('mandatory')
xylanXIPXMAPHostentry = MibTableRow((1, 3, 6, 1, 4, 1, 800, 2, 20, 2, 7, 1), ).setIndexNames((0, "XYLAN-XIP-MIB", "xylanXIPXMAPHostMac"), (0, "XYLAN-XIP-MIB", "xylanXIPXMAPIpAddr"))
if mibBuilder.loadTexts: xylanXIPXMAPHostentry.setStatus('mandatory')
xylanXIPXMAPHostMac = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 20, 2, 7, 1, 1), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xylanXIPXMAPHostMac.setStatus('mandatory')
xylanXIPXMAPIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 20, 2, 7, 1, 2), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xylanXIPXMAPIpAddr.setStatus('mandatory')
mibBuilder.exportSymbols("XYLAN-XIP-MIB", xylanXIPXMAPRemGroup=xylanXIPXMAPRemGroup, xylanXIPXMAPLastTrapPort=xylanXIPXMAPLastTrapPort, xylanXIPGMAPconfig=xylanXIPGMAPconfig, xylanXIPXMAPPortentry=xylanXIPXMAPPortentry, xylanXIPGMAPupdatetime=xylanXIPGMAPupdatetime, xylanXIPXMAPAdjPort=xylanXIPXMAPAdjPort, xylanXIPGMAPProtocol=xylanXIPGMAPProtocol, xylanXIPXMAPLastTrapReason=xylanXIPXMAPLastTrapReason, xylanXIPXMAPRemMac=xylanXIPXMAPRemMac, xylanXIPGMAPLastTrapReason=xylanXIPGMAPLastTrapReason, xylanXIPGMAPLastTrapGroup=xylanXIPGMAPLastTrapGroup, xylanXIPXMAPHostentry=xylanXIPXMAPHostentry, xylanXIPGMAPTableEntry=xylanXIPGMAPTableEntry, xylanXIPGMAPGroup=xylanXIPGMAPGroup, xylanXIPXMAPdisctime=xylanXIPXMAPdisctime, xylanXIPXMAPcommontime=xylanXIPXMAPcommontime, xylanXIPGMAPLastTrapProtocol=xylanXIPGMAPLastTrapProtocol, xylanXIPXMAPhosts=xylanXIPXMAPhosts, xylanXIPGMAPgaptime=xylanXIPGMAPgaptime, xylanXIPGMAPSrcSwitch=xylanXIPGMAPSrcSwitch, xylanXIPXMAPconfig=xylanXIPXMAPconfig, xylanXIPXMAPHostMac=xylanXIPXMAPHostMac, xylanXIPGMAPFlags=xylanXIPGMAPFlags, xylanXIPGMAPTable=xylanXIPGMAPTable, xylanXIPGMAPholdtime=xylanXIPGMAPholdtime, xylanXIPGMAPstate=xylanXIPGMAPstate, xylanXIPGMAPLastTrapMac=xylanXIPGMAPLastTrapMac, xylanXIPXMAPstate=xylanXIPXMAPstate, xylanXIPXMAPIpAddr=xylanXIPXMAPIpAddr, xylanXIPXMAPports=xylanXIPXMAPports, xylanXIPGMAPMacAddr=xylanXIPGMAPMacAddr, xylanXIPXMAPRemPort=xylanXIPXMAPRemPort, xylanXIPGMAPTimeout=xylanXIPGMAPTimeout, xylanXIPGMAPLastTrapPort=xylanXIPGMAPLastTrapPort)
