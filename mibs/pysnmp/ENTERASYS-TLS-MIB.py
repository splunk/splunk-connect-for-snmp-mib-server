#
# PySNMP MIB module ENTERASYS-TLS-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/ENTERASYS-TLS-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 18:50:28 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, ObjectIdentifier, Integer = mibBuilder.importSymbols("ASN1", "OctetString", "ObjectIdentifier", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
SingleValueConstraint, ConstraintsIntersection, ValueSizeConstraint, ValueRangeConstraint, ConstraintsUnion = mibBuilder.importSymbols("ASN1-REFINEMENT", "SingleValueConstraint", "ConstraintsIntersection", "ValueSizeConstraint", "ValueRangeConstraint", "ConstraintsUnion")
etsysModules, = mibBuilder.importSymbols("ENTERASYS-MIB-NAMES", "etsysModules")
NotificationGroup, ModuleCompliance, ObjectGroup = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance", "ObjectGroup")
ModuleIdentity, MibIdentifier, iso, Gauge32, Bits, IpAddress, Counter64, ObjectIdentity, NotificationType, Counter32, Unsigned32, Integer32, MibScalar, MibTable, MibTableRow, MibTableColumn, TimeTicks = mibBuilder.importSymbols("SNMPv2-SMI", "ModuleIdentity", "MibIdentifier", "iso", "Gauge32", "Bits", "IpAddress", "Counter64", "ObjectIdentity", "NotificationType", "Counter32", "Unsigned32", "Integer32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "TimeTicks")
TruthValue, TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TruthValue", "TextualConvention", "DisplayString")
etsysTlsMIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 5624, 1, 2, 30))
etsysTlsMIB.setRevisions(('2002-11-14 15:34', '2002-11-01 21:09',))
if mibBuilder.loadTexts: etsysTlsMIB.setLastUpdated('200211141534Z')
if mibBuilder.loadTexts: etsysTlsMIB.setOrganization('Enterasys Networks, Inc')
etsysTlsObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 5624, 1, 2, 30, 1))
etsysTlsGeneralBranch = MibIdentifier((1, 3, 6, 1, 4, 1, 5624, 1, 2, 30, 1, 1))
etsysTlsNetworkBranch = MibIdentifier((1, 3, 6, 1, 4, 1, 5624, 1, 2, 30, 1, 2))
etsysTlsServerKeyBranch = MibIdentifier((1, 3, 6, 1, 4, 1, 5624, 1, 2, 30, 1, 3))
etsysTlsEnabled = MibScalar((1, 3, 6, 1, 4, 1, 5624, 1, 2, 30, 1, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2), ("reinitialize", 3))).clone(2)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: etsysTlsEnabled.setStatus('current')
etsysTlsNumSoftConnects = MibScalar((1, 3, 6, 1, 4, 1, 5624, 1, 2, 30, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535)).clone(30)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: etsysTlsNumSoftConnects.setStatus('current')
etsysTlsNumHardConnects = MibScalar((1, 3, 6, 1, 4, 1, 5624, 1, 2, 30, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535)).clone(50)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: etsysTlsNumHardConnects.setStatus('current')
etsysTlsMaxHardConnects = MibScalar((1, 3, 6, 1, 4, 1, 5624, 1, 2, 30, 1, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535)).clone(50)).setMaxAccess("readonly")
if mibBuilder.loadTexts: etsysTlsMaxHardConnects.setStatus('current')
etsysTlsKeepOpenTimeout = MibScalar((1, 3, 6, 1, 4, 1, 5624, 1, 2, 30, 1, 2, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535)).clone(30)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: etsysTlsKeepOpenTimeout.setStatus('current')
etsysTlsHttpsPort = MibScalar((1, 3, 6, 1, 4, 1, 5624, 1, 2, 30, 1, 2, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535)).clone(443)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: etsysTlsHttpsPort.setStatus('current')
etsysTlsGenerateKeys = MibScalar((1, 3, 6, 1, 4, 1, 5624, 1, 2, 30, 1, 3, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("notInitiated", 1), ("completed", 2), ("failed", 3), ("generate", 4), ("completedPending", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: etsysTlsGenerateKeys.setStatus('current')
etsysTlsAdminKeyType = MibScalar((1, 3, 6, 1, 4, 1, 5624, 1, 2, 30, 1, 3, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10))).clone(namedValues=NamedValues(("dsa512", 1), ("rsa512", 2), ("dsa768", 3), ("rsa768", 4), ("dsa1024", 5), ("rsa1024", 6), ("dsa2048", 7), ("rsa2048", 8), ("dsa3072", 9), ("rsa3072", 10))).clone('rsa512')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: etsysTlsAdminKeyType.setStatus('current')
etsysTlsOperKeyType = MibScalar((1, 3, 6, 1, 4, 1, 5624, 1, 2, 30, 1, 3, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 99))).clone(namedValues=NamedValues(("dsa512", 1), ("rsa512", 2), ("dsa768", 3), ("rsa768", 4), ("dsa1024", 5), ("rsa1024", 6), ("dsa2048", 7), ("rsa2048", 8), ("dsa3072", 9), ("rsa3072", 10), ("none", 99))).clone('rsa512')).setMaxAccess("readonly")
if mibBuilder.loadTexts: etsysTlsOperKeyType.setStatus('current')
etsysTlsSignatureType = MibScalar((1, 3, 6, 1, 4, 1, 5624, 1, 2, 30, 1, 3, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("dhAnon", 1), ("dsaSha1", 2), ("dsaSha", 3), ("rsaSha1", 4), ("rsaMd2", 5), ("rsaMd5", 6))).clone('dhAnon')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: etsysTlsSignatureType.setStatus('current')
etsysTlsConformance = MibIdentifier((1, 3, 6, 1, 4, 1, 5624, 1, 2, 30, 2))
etsysTlsGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 5624, 1, 2, 30, 2, 1))
etsysTlsCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 5624, 1, 2, 30, 2, 2))
etsysTlsBaseGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 5624, 1, 2, 30, 2, 1, 1)).setObjects(("ENTERASYS-TLS-MIB", "etsysTlsEnabled"), ("ENTERASYS-TLS-MIB", "etsysTlsNumSoftConnects"), ("ENTERASYS-TLS-MIB", "etsysTlsNumHardConnects"), ("ENTERASYS-TLS-MIB", "etsysTlsMaxHardConnects"), ("ENTERASYS-TLS-MIB", "etsysTlsKeepOpenTimeout"), ("ENTERASYS-TLS-MIB", "etsysTlsHttpsPort"), ("ENTERASYS-TLS-MIB", "etsysTlsGenerateKeys"), ("ENTERASYS-TLS-MIB", "etsysTlsAdminKeyType"), ("ENTERASYS-TLS-MIB", "etsysTlsOperKeyType"), ("ENTERASYS-TLS-MIB", "etsysTlsSignatureType"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    etsysTlsBaseGroup = etsysTlsBaseGroup.setStatus('current')
etsysTlsCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 5624, 1, 2, 30, 2, 2, 1)).setObjects(("ENTERASYS-TLS-MIB", "etsysTlsBaseGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    etsysTlsCompliance = etsysTlsCompliance.setStatus('current')
mibBuilder.exportSymbols("ENTERASYS-TLS-MIB", etsysTlsSignatureType=etsysTlsSignatureType, etsysTlsMaxHardConnects=etsysTlsMaxHardConnects, etsysTlsGroups=etsysTlsGroups, etsysTlsNumSoftConnects=etsysTlsNumSoftConnects, etsysTlsCompliance=etsysTlsCompliance, etsysTlsMIB=etsysTlsMIB, etsysTlsConformance=etsysTlsConformance, etsysTlsHttpsPort=etsysTlsHttpsPort, etsysTlsNetworkBranch=etsysTlsNetworkBranch, etsysTlsKeepOpenTimeout=etsysTlsKeepOpenTimeout, etsysTlsEnabled=etsysTlsEnabled, etsysTlsGeneralBranch=etsysTlsGeneralBranch, PYSNMP_MODULE_ID=etsysTlsMIB, etsysTlsBaseGroup=etsysTlsBaseGroup, etsysTlsAdminKeyType=etsysTlsAdminKeyType, etsysTlsOperKeyType=etsysTlsOperKeyType, etsysTlsNumHardConnects=etsysTlsNumHardConnects, etsysTlsServerKeyBranch=etsysTlsServerKeyBranch, etsysTlsObjects=etsysTlsObjects, etsysTlsGenerateKeys=etsysTlsGenerateKeys, etsysTlsCompliances=etsysTlsCompliances)
