#
# PySNMP MIB module F10-BMP-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/F10-BMP-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 18:57:11 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, Integer, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "OctetString", "Integer", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsIntersection, ConstraintsUnion, ValueRangeConstraint, SingleValueConstraint, ValueSizeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsIntersection", "ConstraintsUnion", "ValueRangeConstraint", "SingleValueConstraint", "ValueSizeConstraint")
f10Mgmt, = mibBuilder.importSymbols("FORCE10-SMI", "f10Mgmt")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
TimeTicks, MibScalar, MibTable, MibTableRow, MibTableColumn, iso, Bits, Counter32, Counter64, NotificationType, IpAddress, Unsigned32, Gauge32, ModuleIdentity, Integer32, MibIdentifier, ObjectIdentity = mibBuilder.importSymbols("SNMPv2-SMI", "TimeTicks", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "iso", "Bits", "Counter32", "Counter64", "NotificationType", "IpAddress", "Unsigned32", "Gauge32", "ModuleIdentity", "Integer32", "MibIdentifier", "ObjectIdentity")
DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention")
f10BmpMib = ModuleIdentity((1, 3, 6, 1, 4, 1, 6027, 3, 23))
f10BmpMib.setRevisions(('2014-07-21 12:00', '2011-12-07 12:48',))
if mibBuilder.loadTexts: f10BmpMib.setLastUpdated('201112071248Z')
if mibBuilder.loadTexts: f10BmpMib.setOrganization('Dell Inc.')
f10Bmp = MibIdentifier((1, 3, 6, 1, 4, 1, 6027, 3, 23, 1))
bmpReloadType = MibScalar((1, 3, 6, 1, 4, 1, 6027, 3, 23, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("normalReload", 1), ("bmpReload", 2))).clone('bmpReload')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bmpReloadType.setStatus('current')
bmpAutoSave = MibScalar((1, 3, 6, 1, 4, 1, 6027, 3, 23, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("bmpActionEnable", 1), ("bmpActionDisable", 2))).clone('bmpActionDisable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bmpAutoSave.setStatus('current')
bmpConfigDownload = MibScalar((1, 3, 6, 1, 4, 1, 6027, 3, 23, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("bmpActionEnable", 1), ("bmpActionDisable", 2))).clone('bmpActionDisable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bmpConfigDownload.setStatus('current')
bmpDhcpTimeout = MibScalar((1, 3, 6, 1, 4, 1, 6027, 3, 23, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 50))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bmpDhcpTimeout.setStatus('current')
bmpRetryCount = MibScalar((1, 3, 6, 1, 4, 1, 6027, 3, 23, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 6))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bmpRetryCount.setStatus('current')
bmpUserDefinedString = MibScalar((1, 3, 6, 1, 4, 1, 6027, 3, 23, 1, 6), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bmpUserDefinedString.setStatus('current')
bmpRelay = MibScalar((1, 3, 6, 1, 4, 1, 6027, 3, 23, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("bmpActionEnable", 1), ("bmpActionDisable", 2))).clone('bmpActionDisable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bmpRelay.setStatus('current')
bmpRelayRemoteId = MibScalar((1, 3, 6, 1, 4, 1, 6027, 3, 23, 1, 8), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bmpRelayRemoteId.setStatus('current')
mibBuilder.exportSymbols("F10-BMP-MIB", bmpRelayRemoteId=bmpRelayRemoteId, bmpRetryCount=bmpRetryCount, bmpRelay=bmpRelay, f10Bmp=f10Bmp, f10BmpMib=f10BmpMib, PYSNMP_MODULE_ID=f10BmpMib, bmpAutoSave=bmpAutoSave, bmpConfigDownload=bmpConfigDownload, bmpDhcpTimeout=bmpDhcpTimeout, bmpUserDefinedString=bmpUserDefinedString, bmpReloadType=bmpReloadType)
