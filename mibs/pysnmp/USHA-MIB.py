#
# PySNMP MIB module USHA-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/USHA-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 21:21:42 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, ObjectIdentifier, Integer = mibBuilder.importSymbols("ASN1", "OctetString", "ObjectIdentifier", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueSizeConstraint, ValueRangeConstraint, SingleValueConstraint, ConstraintsUnion, ConstraintsIntersection = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueSizeConstraint", "ValueRangeConstraint", "SingleValueConstraint", "ConstraintsUnion", "ConstraintsIntersection")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
ModuleIdentity, enterprises, IpAddress, iso, ObjectIdentity, NotificationType, Bits, Counter64, Gauge32, Unsigned32, MibIdentifier, TimeTicks, Integer32, NotificationType, MibScalar, MibTable, MibTableRow, MibTableColumn, Counter32 = mibBuilder.importSymbols("SNMPv2-SMI", "ModuleIdentity", "enterprises", "IpAddress", "iso", "ObjectIdentity", "NotificationType", "Bits", "Counter64", "Gauge32", "Unsigned32", "MibIdentifier", "TimeTicks", "Integer32", "NotificationType", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Counter32")
DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention")
PositiveInteger, NonNegativeInteger = mibBuilder.importSymbols("UPS-MIB", "PositiveInteger", "NonNegativeInteger")
ingrasys = MibIdentifier((1, 3, 6, 1, 4, 1, 2468))
product = MibIdentifier((1, 3, 6, 1, 4, 1, 2468, 1))
upsAgent = MibIdentifier((1, 3, 6, 1, 4, 1, 2468, 1, 2))
ushap = MibIdentifier((1, 3, 6, 1, 4, 1, 2468, 1, 2, 1))
upsObjectGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 2468, 1, 2, 1, 1))
upsTrapGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 2468, 1, 2, 1, 2))
upsIdentGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 2468, 1, 2, 1, 1, 1))
upsBatteryGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 2468, 1, 2, 1, 1, 2))
upsInputGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 2468, 1, 2, 1, 1, 3))
upsOutputGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 2468, 1, 2, 1, 1, 4))
upsBypassGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 2468, 1, 2, 1, 1, 5))
upsTestGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 2468, 1, 2, 1, 1, 6))
upsControlGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 2468, 1, 2, 1, 1, 7))
upsConfigGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 2468, 1, 2, 1, 1, 8))
upsClients = MibIdentifier((1, 3, 6, 1, 4, 1, 2468, 1, 2, 1, 1, 9))
agentConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 2468, 1, 2, 1, 1, 10))
emdStatus = MibIdentifier((1, 3, 6, 1, 4, 1, 2468, 1, 2, 1, 1, 11))
emdConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 2468, 1, 2, 1, 1, 12))
upsIdentGroupManufacturer = MibScalar((1, 3, 6, 1, 4, 1, 2468, 1, 2, 1, 1, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 31))).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsIdentGroupManufacturer.setStatus('mandatory')
upsIdentGroupModel = MibScalar((1, 3, 6, 1, 4, 1, 2468, 1, 2, 1, 1, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 63))).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsIdentGroupModel.setStatus('mandatory')
upsIdentGroupUPSFirmwareVersion = MibScalar((1, 3, 6, 1, 4, 1, 2468, 1, 2, 1, 1, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 63))).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsIdentGroupUPSFirmwareVersion.setStatus('mandatory')
upsIdentGroupAgentSoftwareVersion = MibScalar((1, 3, 6, 1, 4, 1, 2468, 1, 2, 1, 1, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 31))).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsIdentGroupAgentSoftwareVersion.setStatus('mandatory')
upsIdentGroupName = MibScalar((1, 3, 6, 1, 4, 1, 2468, 1, 2, 1, 1, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 31))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: upsIdentGroupName.setStatus('mandatory')
upsIdentGroupAttachedDevices = MibScalar((1, 3, 6, 1, 4, 1, 2468, 1, 2, 1, 1, 1, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 63))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: upsIdentGroupAttachedDevices.setStatus('mandatory')
upsIdentGroupUpsSerialNumber = MibScalar((1, 3, 6, 1, 4, 1, 2468, 1, 2, 1, 1, 1, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 15))).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsIdentGroupUpsSerialNumber.setStatus('mandatory')
upsBatteryGroupStatus = MibScalar((1, 3, 6, 1, 4, 1, 2468, 1, 2, 1, 1, 2, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("unknown", 1), ("batteryNormal", 2), ("batteryLow", 3), ("batteryDepleted", 4), ("batteryDischarging", 5), ("batteryFailure", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsBatteryGroupStatus.setStatus('mandatory')
upsBatteryGroupSecondsOnBattery = MibScalar((1, 3, 6, 1, 4, 1, 2468, 1, 2, 1, 1, 2, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsBatteryGroupSecondsOnBattery.setStatus('mandatory')
upsBatteryGroupEstimatedMinutesRemaining = MibScalar((1, 3, 6, 1, 4, 1, 2468, 1, 2, 1, 1, 2, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsBatteryGroupEstimatedMinutesRemaining.setStatus('mandatory')
upsBatteryGroupEstimatedChargeRemaining = MibScalar((1, 3, 6, 1, 4, 1, 2468, 1, 2, 1, 1, 2, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsBatteryGroupEstimatedChargeRemaining.setStatus('mandatory')
upsBatteryGroupVoltage = MibScalar((1, 3, 6, 1, 4, 1, 2468, 1, 2, 1, 1, 2, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsBatteryGroupVoltage.setStatus('mandatory')
upsBatteryGroupMandatory = MibScalar((1, 3, 6, 1, 4, 1, 2468, 1, 2, 1, 1, 2, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsBatteryGroupMandatory.setStatus('mandatory')
upsBatteryGroupTemperature = MibScalar((1, 3, 6, 1, 4, 1, 2468, 1, 2, 1, 1, 2, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsBatteryGroupTemperature.setStatus('mandatory')
upsInputGroupLineBads = MibScalar((1, 3, 6, 1, 4, 1, 2468, 1, 2, 1, 1, 3, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsInputGroupLineBads.setStatus('mandatory')
upsInputGroupNumLines = MibScalar((1, 3, 6, 1, 4, 1, 2468, 1, 2, 1, 1, 3, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsInputGroupNumLines.setStatus('mandatory')
upsInputGroupTable = MibTable((1, 3, 6, 1, 4, 1, 2468, 1, 2, 1, 1, 3, 3), )
if mibBuilder.loadTexts: upsInputGroupTable.setStatus('mandatory')
upsInputGroupEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2468, 1, 2, 1, 1, 3, 3, 1), ).setIndexNames((0, "USHA-MIB", "upsInputGroupLineIndex"))
if mibBuilder.loadTexts: upsInputGroupEntry.setStatus('mandatory')
upsInputGroupLineIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2468, 1, 2, 1, 1, 3, 3, 1, 1), PositiveInteger().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsInputGroupLineIndex.setStatus('mandatory')
upsInputGroupFrequency = MibTableColumn((1, 3, 6, 1, 4, 1, 2468, 1, 2, 1, 1, 3, 3, 1, 2), NonNegativeInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsInputGroupFrequency.setStatus('mandatory')
upsInputGroupVoltage = MibTableColumn((1, 3, 6, 1, 4, 1, 2468, 1, 2, 1, 1, 3, 3, 1, 3), NonNegativeInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsInputGroupVoltage.setStatus('mandatory')
upsInputGroupCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 2468, 1, 2, 1, 1, 3, 3, 1, 4), NonNegativeInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsInputGroupCurrent.setStatus('mandatory')
upsInputGroupTruePower = MibTableColumn((1, 3, 6, 1, 4, 1, 2468, 1, 2, 1, 1, 3, 3, 1, 5), NonNegativeInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsInputGroupTruePower.setStatus('mandatory')
upsInputGroupVoltageMax = MibTableColumn((1, 3, 6, 1, 4, 1, 2468, 1, 2, 1, 1, 3, 3, 1, 6), NonNegativeInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsInputGroupVoltageMax.setStatus('mandatory')
upsInputGroupVoltageMin = MibTableColumn((1, 3, 6, 1, 4, 1, 2468, 1, 2, 1, 1, 3, 3, 1, 7), NonNegativeInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsInputGroupVoltageMin.setStatus('mandatory')
upsOutputGroupSource = MibScalar((1, 3, 6, 1, 4, 1, 2468, 1, 2, 1, 1, 4, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("other", 1), ("none", 2), ("normal", 3), ("bypass", 4), ("battery", 5), ("booster", 6), ("reducer", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsOutputGroupSource.setStatus('mandatory')
upsOutputGroupFrequency = MibScalar((1, 3, 6, 1, 4, 1, 2468, 1, 2, 1, 1, 4, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsOutputGroupFrequency.setStatus('mandatory')
upsOutputGroupNumLines = MibScalar((1, 3, 6, 1, 4, 1, 2468, 1, 2, 1, 1, 4, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsOutputGroupNumLines.setStatus('mandatory')
upsOutputGroupTable = MibTable((1, 3, 6, 1, 4, 1, 2468, 1, 2, 1, 1, 4, 4), )
if mibBuilder.loadTexts: upsOutputGroupTable.setStatus('mandatory')
upsOutputGroupEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2468, 1, 2, 1, 1, 4, 4, 1), ).setIndexNames((0, "USHA-MIB", "upsOutputGroupLineIndex"))
if mibBuilder.loadTexts: upsOutputGroupEntry.setStatus('mandatory')
upsOutputGroupLineIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2468, 1, 2, 1, 1, 4, 4, 1, 1), PositiveInteger().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsOutputGroupLineIndex.setStatus('mandatory')
upsOutputGroupVoltage = MibTableColumn((1, 3, 6, 1, 4, 1, 2468, 1, 2, 1, 1, 4, 4, 1, 2), NonNegativeInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsOutputGroupVoltage.setStatus('mandatory')
upsOutputGroupCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 2468, 1, 2, 1, 1, 4, 4, 1, 3), NonNegativeInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsOutputGroupCurrent.setStatus('mandatory')
upsOutputGroupPower = MibTableColumn((1, 3, 6, 1, 4, 1, 2468, 1, 2, 1, 1, 4, 4, 1, 4), NonNegativeInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsOutputGroupPower.setStatus('mandatory')
upsOutputGroupPercentLoad = MibTableColumn((1, 3, 6, 1, 4, 1, 2468, 1, 2, 1, 1, 4, 4, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsOutputGroupPercentLoad.setStatus('mandatory')
upsBypassGroupFrequency = MibScalar((1, 3, 6, 1, 4, 1, 2468, 1, 2, 1, 1, 5, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsBypassGroupFrequency.setStatus('mandatory')
upsBypassGroupNumLines = MibScalar((1, 3, 6, 1, 4, 1, 2468, 1, 2, 1, 1, 5, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsBypassGroupNumLines.setStatus('mandatory')
upsBypassGroupTable = MibTable((1, 3, 6, 1, 4, 1, 2468, 1, 2, 1, 1, 5, 3), )
if mibBuilder.loadTexts: upsBypassGroupTable.setStatus('mandatory')
upsBypassGroupEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2468, 1, 2, 1, 1, 5, 3, 1), ).setIndexNames((0, "USHA-MIB", "upsBypassGroupLineIndex"))
if mibBuilder.loadTexts: upsBypassGroupEntry.setStatus('mandatory')
upsBypassGroupLineIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2468, 1, 2, 1, 1, 5, 3, 1, 1), PositiveInteger().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsBypassGroupLineIndex.setStatus('mandatory')
upsBypassGroupVoltage = MibTableColumn((1, 3, 6, 1, 4, 1, 2468, 1, 2, 1, 1, 5, 3, 1, 2), NonNegativeInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsBypassGroupVoltage.setStatus('mandatory')
upsBypassGroupCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 2468, 1, 2, 1, 1, 5, 3, 1, 3), NonNegativeInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsBypassGroupCurrent.setStatus('mandatory')
upsBypassGroupPower = MibTableColumn((1, 3, 6, 1, 4, 1, 2468, 1, 2, 1, 1, 5, 3, 1, 4), NonNegativeInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsBypassGroupPower.setStatus('mandatory')
upsTestBatteryTestSettingTime = MibScalar((1, 3, 6, 1, 4, 1, 2468, 1, 2, 1, 1, 6, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: upsTestBatteryTestSettingTime.setStatus('mandatory')
upsBatteryTest = MibScalar((1, 3, 6, 1, 4, 1, 2468, 1, 2, 1, 1, 6, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("none", 1), ("battTest10sec", 2), ("battTestUntilLow", 3), ("battTestWithTime", 4), ("battTestCancelTest", 5), ("battTestClearInfo", 6)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: upsBatteryTest.setStatus('mandatory')
upsTestBatteryTestResult = MibScalar((1, 3, 6, 1, 4, 1, 2468, 1, 2, 1, 1, 6, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("donePassed", 1), ("doneWarning", 2), ("doneError", 3), ("aborted", 4), ("inProgress", 5), ("noTestsInitiated", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsTestBatteryTestResult.setStatus('mandatory')
upsTestBatteryTestStartTime = MibScalar((1, 3, 6, 1, 4, 1, 2468, 1, 2, 1, 1, 6, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 19))).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsTestBatteryTestStartTime.setStatus('mandatory')
upsTestBatteryTestElapsedTime = MibScalar((1, 3, 6, 1, 4, 1, 2468, 1, 2, 1, 1, 6, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(11, 11)).setFixedLength(11)).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsTestBatteryTestElapsedTime.setStatus('mandatory')
upsBatteryTestScheduleTable = MibTable((1, 3, 6, 1, 4, 1, 2468, 1, 2, 1, 1, 6, 6), )
if mibBuilder.loadTexts: upsBatteryTestScheduleTable.setStatus('mandatory')
upsBatteryTestScheduleEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2468, 1, 2, 1, 1, 6, 6, 1), ).setIndexNames((0, "USHA-MIB", "upsBatteryTestScheduleIndex"))
if mibBuilder.loadTexts: upsBatteryTestScheduleEntry.setStatus('mandatory')
upsBatteryTestScheduleIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2468, 1, 2, 1, 1, 6, 6, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsBatteryTestScheduleIndex.setStatus('mandatory')
upsBatteryTestScheduleDay = MibTableColumn((1, 3, 6, 1, 4, 1, 2468, 1, 2, 1, 1, 6, 6, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9))).clone(namedValues=NamedValues(("sunday", 1), ("monday", 2), ("tuesday", 3), ("wednesday", 4), ("thursday", 5), ("friday", 6), ("saturday", 7), ("specialDay", 8), ("none", 9)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: upsBatteryTestScheduleDay.setStatus('mandatory')
upsBatteryTestScheduleTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2468, 1, 2, 1, 1, 6, 6, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(5, 5)).setFixedLength(5)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: upsBatteryTestScheduleTime.setStatus('mandatory')
upsBatteryTestScheduleType = MibTableColumn((1, 3, 6, 1, 4, 1, 2468, 1, 2, 1, 1, 6, 6, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("none", 1), ("battTest10sec", 2), ("battTestUntilLow", 3), ("battTestWithTime", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: upsBatteryTestScheduleType.setStatus('mandatory')
upsBatteryTestScheduleTestWithTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2468, 1, 2, 1, 1, 6, 6, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("supported", 1), ("notSupported", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsBatteryTestScheduleTestWithTime.setStatus('mandatory')
upsBatteryTestScheduleSpecialDay = MibTableColumn((1, 3, 6, 1, 4, 1, 2468, 1, 2, 1, 1, 6, 6, 1, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(10, 10)).setFixedLength(10)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: upsBatteryTestScheduleSpecialDay.setStatus('mandatory')
upsControlUpsShutdownDelay = MibScalar((1, 3, 6, 1, 4, 1, 2468, 1, 2, 1, 1, 7, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: upsControlUpsShutdownDelay.setStatus('mandatory')
upsControlUpsSleepTime = MibScalar((1, 3, 6, 1, 4, 1, 2468, 1, 2, 1, 1, 7, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: upsControlUpsSleepTime.setStatus('mandatory')
upsControlUpsOnOffControl = MibScalar((1, 3, 6, 1, 4, 1, 2468, 1, 2, 1, 1, 7, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("turnUpsOff", 1), ("putUpsToSleep", 2), ("turnOnUpsOrCancelShutdown", 3), ("none", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: upsControlUpsOnOffControl.setStatus('mandatory')
upsControlShutdownParametersTable = MibTable((1, 3, 6, 1, 4, 1, 2468, 1, 2, 1, 1, 7, 4), )
if mibBuilder.loadTexts: upsControlShutdownParametersTable.setStatus('mandatory')
upsControlShutdownParametersEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2468, 1, 2, 1, 1, 7, 4, 1), ).setIndexNames((0, "USHA-MIB", "upsControlEvent"))
if mibBuilder.loadTexts: upsControlShutdownParametersEntry.setStatus('mandatory')
upsControlEvent = MibTableColumn((1, 3, 6, 1, 4, 1, 2468, 1, 2, 1, 1, 7, 4, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9))).clone(namedValues=NamedValues(("acFail", 1), ("batteryLow", 2), ("upsOverload", 3), ("upsOverTempeature", 4), ("weeklySchedule", 5), ("specialDaySchedule", 6), ("emdTemperatureOverThreshold", 7), ("emdAlarm1", 8), ("emdAlarm2", 9)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsControlEvent.setStatus('mandatory')
upsControlEventStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2468, 1, 2, 1, 1, 7, 4, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("disable", 1), ("warning", 2), ("clientShutdown", 3), ("upsTurnOff", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: upsControlEventStatus.setStatus('mandatory')
upsControlDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 2468, 1, 2, 1, 1, 7, 4, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 10080))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: upsControlDelay.setStatus('mandatory')
upsControlFirstWarning = MibTableColumn((1, 3, 6, 1, 4, 1, 2468, 1, 2, 1, 1, 7, 4, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 3600))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: upsControlFirstWarning.setStatus('mandatory')
upsControlWarningInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 2468, 1, 2, 1, 1, 7, 4, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 3600))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: upsControlWarningInterval.setStatus('mandatory')
upsControlWeeklyScheduleTable = MibTable((1, 3, 6, 1, 4, 1, 2468, 1, 2, 1, 1, 7, 5), )
if mibBuilder.loadTexts: upsControlWeeklyScheduleTable.setStatus('mandatory')
upsControlWeeklyScheduleEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2468, 1, 2, 1, 1, 7, 5, 1), ).setIndexNames((0, "USHA-MIB", "upsControlWeeklyIndex"))
if mibBuilder.loadTexts: upsControlWeeklyScheduleEntry.setStatus('mandatory')
upsControlWeeklyIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2468, 1, 2, 1, 1, 7, 5, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsControlWeeklyIndex.setStatus('mandatory')
upsControlWeeklyShutdownDay = MibTableColumn((1, 3, 6, 1, 4, 1, 2468, 1, 2, 1, 1, 7, 5, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("sunday", 1), ("monday", 2), ("tuesday", 3), ("wednesday", 4), ("thursday", 5), ("friday", 6), ("saturday", 7), ("none", 8)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: upsControlWeeklyShutdownDay.setStatus('mandatory')
upsControlWeeklyShutdownTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2468, 1, 2, 1, 1, 7, 5, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(5, 5)).setFixedLength(5)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: upsControlWeeklyShutdownTime.setStatus('mandatory')
upsControlWeeklyRestartDay = MibTableColumn((1, 3, 6, 1, 4, 1, 2468, 1, 2, 1, 1, 7, 5, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("sunday", 1), ("monday", 2), ("tuesday", 3), ("wednesday", 4), ("thursday", 5), ("friday", 6), ("saturday", 7), ("none", 8)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: upsControlWeeklyRestartDay.setStatus('mandatory')
upsControlWeeklyRestartTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2468, 1, 2, 1, 1, 7, 5, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(5, 5)).setFixedLength(5)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: upsControlWeeklyRestartTime.setStatus('mandatory')
upsControlSpecialScheduleTable = MibTable((1, 3, 6, 1, 4, 1, 2468, 1, 2, 1, 1, 7, 6), )
if mibBuilder.loadTexts: upsControlSpecialScheduleTable.setStatus('mandatory')
upsControlSpecialScheduleEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2468, 1, 2, 1, 1, 7, 6, 1), ).setIndexNames((0, "USHA-MIB", "upsControlSpecialIndex"))
if mibBuilder.loadTexts: upsControlSpecialScheduleEntry.setStatus('mandatory')
upsControlSpecialIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2468, 1, 2, 1, 1, 7, 6, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsControlSpecialIndex.setStatus('mandatory')
upsControlSpecialShutdownDay = MibTableColumn((1, 3, 6, 1, 4, 1, 2468, 1, 2, 1, 1, 7, 6, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(10, 10)).setFixedLength(10)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: upsControlSpecialShutdownDay.setStatus('mandatory')
upsControlSpecialShutdownTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2468, 1, 2, 1, 1, 7, 6, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(5, 5)).setFixedLength(5)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: upsControlSpecialShutdownTime.setStatus('mandatory')
upsControlSpecialRestartDay = MibTableColumn((1, 3, 6, 1, 4, 1, 2468, 1, 2, 1, 1, 7, 6, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(10, 10)).setFixedLength(10)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: upsControlSpecialRestartDay.setStatus('mandatory')
upsControlSpecialRestartTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2468, 1, 2, 1, 1, 7, 6, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(5, 5)).setFixedLength(5)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: upsControlSpecialRestartTime.setStatus('mandatory')
upsConfigGroupInputVoltage = MibScalar((1, 3, 6, 1, 4, 1, 2468, 1, 2, 1, 1, 8, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsConfigGroupInputVoltage.setStatus('mandatory')
upsConfigGroupInputFreq = MibScalar((1, 3, 6, 1, 4, 1, 2468, 1, 2, 1, 1, 8, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsConfigGroupInputFreq.setStatus('mandatory')
upsConfigGroupOutputVoltage = MibScalar((1, 3, 6, 1, 4, 1, 2468, 1, 2, 1, 1, 8, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsConfigGroupOutputVoltage.setStatus('mandatory')
upsConfigGroupOutputFreq = MibScalar((1, 3, 6, 1, 4, 1, 2468, 1, 2, 1, 1, 8, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsConfigGroupOutputFreq.setStatus('mandatory')
upsConfigGroupOutputVA = MibScalar((1, 3, 6, 1, 4, 1, 2468, 1, 2, 1, 1, 8, 5), NonNegativeInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsConfigGroupOutputVA.setStatus('mandatory')
upsConfigGroupOutputPower = MibScalar((1, 3, 6, 1, 4, 1, 2468, 1, 2, 1, 1, 8, 6), NonNegativeInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsConfigGroupOutputPower.setStatus('mandatory')
upsConfigGroupOverTemperatureSetPoint = MibScalar((1, 3, 6, 1, 4, 1, 2468, 1, 2, 1, 1, 8, 7), NonNegativeInteger().subtype(subtypeSpec=ValueRangeConstraint(10, 70))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: upsConfigGroupOverTemperatureSetPoint.setStatus('mandatory')
upsConfigGroupOverLoadSetPoint = MibScalar((1, 3, 6, 1, 4, 1, 2468, 1, 2, 1, 1, 8, 8), NonNegativeInteger().subtype(subtypeSpec=ValueRangeConstraint(0, 120))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: upsConfigGroupOverLoadSetPoint.setStatus('mandatory')
upsClientsConnectedNum = MibScalar((1, 3, 6, 1, 4, 1, 2468, 1, 2, 1, 1, 9, 1), NonNegativeInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsClientsConnectedNum.setStatus('mandatory')
upsDevicesTable = MibTable((1, 3, 6, 1, 4, 1, 2468, 1, 2, 1, 1, 9, 2), )
if mibBuilder.loadTexts: upsDevicesTable.setStatus('mandatory')
upsDevicesEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2468, 1, 2, 1, 1, 9, 2, 1), ).setIndexNames((0, "USHA-MIB", "indexOfDevice"))
if mibBuilder.loadTexts: upsDevicesEntry.setStatus('mandatory')
indexOfDevice = MibTableColumn((1, 3, 6, 1, 4, 1, 2468, 1, 2, 1, 1, 9, 2, 1, 1), NonNegativeInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: indexOfDevice.setStatus('mandatory')
addrOfDevice = MibTableColumn((1, 3, 6, 1, 4, 1, 2468, 1, 2, 1, 1, 9, 2, 1, 2), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: addrOfDevice.setStatus('mandatory')
nameOfDevice = MibTableColumn((1, 3, 6, 1, 4, 1, 2468, 1, 2, 1, 1, 9, 2, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 31))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nameOfDevice.setStatus('mandatory')
timeOfConnection = MibTableColumn((1, 3, 6, 1, 4, 1, 2468, 1, 2, 1, 1, 9, 2, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: timeOfConnection.setStatus('mandatory')
timeOfConnectionTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2468, 1, 2, 1, 1, 9, 2, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: timeOfConnectionTime.setStatus('mandatory')
timeOfConnectionTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 2468, 1, 2, 1, 1, 9, 2, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: timeOfConnectionTimeout.setStatus('mandatory')
agentConfigIpaddress = MibScalar((1, 3, 6, 1, 4, 1, 2468, 1, 2, 1, 1, 10, 1), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentConfigIpaddress.setStatus('mandatory')
agentConfigGateway = MibScalar((1, 3, 6, 1, 4, 1, 2468, 1, 2, 1, 1, 10, 2), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentConfigGateway.setStatus('mandatory')
agentConfigSubnetMask = MibScalar((1, 3, 6, 1, 4, 1, 2468, 1, 2, 1, 1, 10, 3), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentConfigSubnetMask.setStatus('mandatory')
agentConfigDate = MibScalar((1, 3, 6, 1, 4, 1, 2468, 1, 2, 1, 1, 10, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(10, 10)).setFixedLength(10)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentConfigDate.setStatus('mandatory')
agentConfigTime = MibScalar((1, 3, 6, 1, 4, 1, 2468, 1, 2, 1, 1, 10, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(8, 8)).setFixedLength(8)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentConfigTime.setStatus('mandatory')
agentConfigPrimaryTimeServer = MibScalar((1, 3, 6, 1, 4, 1, 2468, 1, 2, 1, 1, 10, 6), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentConfigPrimaryTimeServer.setStatus('mandatory')
agentConfigSecondaryTimeServer = MibScalar((1, 3, 6, 1, 4, 1, 2468, 1, 2, 1, 1, 10, 7), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentConfigSecondaryTimeServer.setStatus('mandatory')
agentConfigHistoryLogFrequency = MibScalar((1, 3, 6, 1, 4, 1, 2468, 1, 2, 1, 1, 10, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(5, 28800))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentConfigHistoryLogFrequency.setStatus('mandatory')
agentConfigExtHistoryLogFrequency = MibScalar((1, 3, 6, 1, 4, 1, 2468, 1, 2, 1, 1, 10, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 10080))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentConfigExtHistoryLogFrequency.setStatus('mandatory')
agentConfigPollRate = MibScalar((1, 3, 6, 1, 4, 1, 2468, 1, 2, 1, 1, 10, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 999))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentConfigPollRate.setStatus('mandatory')
agentConfigBaudRate = MibScalar((1, 3, 6, 1, 4, 1, 2468, 1, 2, 1, 1, 10, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentConfigBaudRate.setStatus('mandatory')
agentConfigDhcpStatue = MibScalar((1, 3, 6, 1, 4, 1, 2468, 1, 2, 1, 1, 10, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentConfigDhcpStatue.setStatus('mandatory')
agentConfigTelnetStatue = MibScalar((1, 3, 6, 1, 4, 1, 2468, 1, 2, 1, 1, 10, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentConfigTelnetStatue.setStatus('mandatory')
agentConfigTftpStatue = MibScalar((1, 3, 6, 1, 4, 1, 2468, 1, 2, 1, 1, 10, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentConfigTftpStatue.setStatus('mandatory')
agentConfigResetToDefault = MibScalar((1, 3, 6, 1, 4, 1, 2468, 1, 2, 1, 1, 10, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("reset", 1), ("nothing", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentConfigResetToDefault.setStatus('mandatory')
agentConfigRestart = MibScalar((1, 3, 6, 1, 4, 1, 2468, 1, 2, 1, 1, 10, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("restart", 1), ("nothing", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentConfigRestart.setStatus('mandatory')
agentConfigClearAgentLog = MibScalar((1, 3, 6, 1, 4, 1, 2468, 1, 2, 1, 1, 10, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("clear", 1), ("nothing", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentConfigClearAgentLog.setStatus('mandatory')
agentConfigClearEventLog = MibScalar((1, 3, 6, 1, 4, 1, 2468, 1, 2, 1, 1, 10, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("clear", 1), ("nothing", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentConfigClearEventLog.setStatus('mandatory')
agentConfigClearExtHistoryLog = MibScalar((1, 3, 6, 1, 4, 1, 2468, 1, 2, 1, 1, 10, 19), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("clear", 1), ("nothing", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentConfigClearExtHistoryLog.setStatus('mandatory')
agentConfigClearHistoryLog = MibScalar((1, 3, 6, 1, 4, 1, 2468, 1, 2, 1, 1, 10, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("clear", 1), ("nothing", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentConfigClearHistoryLog.setStatus('mandatory')
agentConfigTrapRetryCount = MibScalar((1, 3, 6, 1, 4, 1, 2468, 1, 2, 1, 1, 10, 21), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentConfigTrapRetryCount.setStatus('mandatory')
agentConfigTrapRetryTime = MibScalar((1, 3, 6, 1, 4, 1, 2468, 1, 2, 1, 1, 10, 22), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentConfigTrapRetryTime.setStatus('mandatory')
agentConfigTrapAckSignature = MibScalar((1, 3, 6, 1, 4, 1, 2468, 1, 2, 1, 1, 10, 23), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentConfigTrapAckSignature.setStatus('mandatory')
agentConfigMibVersion = MibScalar((1, 3, 6, 1, 4, 1, 2468, 1, 2, 1, 1, 10, 24), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentConfigMibVersion.setStatus('mandatory')
agentConfigTrapsReceiversTable = MibTable((1, 3, 6, 1, 4, 1, 2468, 1, 2, 1, 1, 10, 25), )
if mibBuilder.loadTexts: agentConfigTrapsReceiversTable.setStatus('mandatory')
agentConfigTrapsReceiversEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2468, 1, 2, 1, 1, 10, 25, 1), ).setIndexNames((0, "USHA-MIB", "trapsIndex"))
if mibBuilder.loadTexts: agentConfigTrapsReceiversEntry.setStatus('mandatory')
trapsIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2468, 1, 2, 1, 1, 10, 25, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: trapsIndex.setStatus('mandatory')
trapsReceiverAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 2468, 1, 2, 1, 1, 10, 25, 1, 2), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: trapsReceiverAddr.setStatus('mandatory')
receiverCommunityString = MibTableColumn((1, 3, 6, 1, 4, 1, 2468, 1, 2, 1, 1, 10, 25, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 19))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: receiverCommunityString.setStatus('mandatory')
receiverNmsType = MibTableColumn((1, 3, 6, 1, 4, 1, 2468, 1, 2, 1, 1, 10, 25, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("none", 1), ("rfc1628-trap", 2), ("usha-trap", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: receiverNmsType.setStatus('mandatory')
receiverSeverityLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 2468, 1, 2, 1, 1, 10, 25, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("informational", 1), ("warning", 2), ("severe", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: receiverSeverityLevel.setStatus('mandatory')
receiverDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 2468, 1, 2, 1, 1, 10, 25, 1, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 31))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: receiverDescription.setStatus('mandatory')
agentConfigAccessControlTable = MibTable((1, 3, 6, 1, 4, 1, 2468, 1, 2, 1, 1, 10, 26), )
if mibBuilder.loadTexts: agentConfigAccessControlTable.setStatus('mandatory')
agentConfigAccessControlEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2468, 1, 2, 1, 1, 10, 26, 1), ).setIndexNames((0, "USHA-MIB", "trapsIndex"))
if mibBuilder.loadTexts: agentConfigAccessControlEntry.setStatus('mandatory')
accessIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2468, 1, 2, 1, 1, 10, 26, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: accessIndex.setStatus('mandatory')
accessControlAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 2468, 1, 2, 1, 1, 10, 26, 1, 2), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: accessControlAddr.setStatus('mandatory')
accessCommunityString = MibTableColumn((1, 3, 6, 1, 4, 1, 2468, 1, 2, 1, 1, 10, 26, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 19))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: accessCommunityString.setStatus('mandatory')
accessControlMode = MibTableColumn((1, 3, 6, 1, 4, 1, 2468, 1, 2, 1, 1, 10, 26, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("readOnly", 1), ("readWrite", 2), ("notAccess", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: accessControlMode.setStatus('mandatory')
agentConfigDefaultLanguage = MibScalar((1, 3, 6, 1, 4, 1, 2468, 1, 2, 1, 1, 10, 27), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("auto", 1), ("english", 2), ("traditionalChinese", 3), ("simplifiedChinese", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentConfigDefaultLanguage.setStatus('mandatory')
emdSatatusEmdType = MibScalar((1, 3, 6, 1, 4, 1, 2468, 1, 2, 1, 1, 11, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("unknown", 1), ("disabled", 2), ("emdHT", 3), ("emdT", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: emdSatatusEmdType.setStatus('mandatory')
emdSatatusTemperature = MibScalar((1, 3, 6, 1, 4, 1, 2468, 1, 2, 1, 1, 11, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: emdSatatusTemperature.setStatus('mandatory')
emdSatatusHumidity = MibScalar((1, 3, 6, 1, 4, 1, 2468, 1, 2, 1, 1, 11, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: emdSatatusHumidity.setStatus('mandatory')
emdSatatusAlarm1 = MibScalar((1, 3, 6, 1, 4, 1, 2468, 1, 2, 1, 1, 11, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("unknow", 1), ("disabled", 2), ("active", 3), ("inactive", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: emdSatatusAlarm1.setStatus('mandatory')
emdSatatusAlarm2 = MibScalar((1, 3, 6, 1, 4, 1, 2468, 1, 2, 1, 1, 11, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("unknow", 1), ("disabled", 2), ("active", 3), ("inactive", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: emdSatatusAlarm2.setStatus('mandatory')
usahEmdConfigEmdConfig = MibScalar((1, 3, 6, 1, 4, 1, 2468, 1, 2, 1, 1, 12, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("auto", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: usahEmdConfigEmdConfig.setStatus('mandatory')
emdConfigEmdName = MibScalar((1, 3, 6, 1, 4, 1, 2468, 1, 2, 1, 1, 12, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 15))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: emdConfigEmdName.setStatus('mandatory')
emdConfigTemperature = MibIdentifier((1, 3, 6, 1, 4, 1, 2468, 1, 2, 1, 1, 12, 3))
emdConfigTempName = MibScalar((1, 3, 6, 1, 4, 1, 2468, 1, 2, 1, 1, 12, 3, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 15))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: emdConfigTempName.setStatus('mandatory')
emdConfigTempHighSetPoint = MibScalar((1, 3, 6, 1, 4, 1, 2468, 1, 2, 1, 1, 12, 3, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: emdConfigTempHighSetPoint.setStatus('mandatory')
emdConfigTempHighStatus = MibScalar((1, 3, 6, 1, 4, 1, 2468, 1, 2, 1, 1, 12, 3, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: emdConfigTempHighStatus.setStatus('mandatory')
emdConfigTempLowSetPoint = MibScalar((1, 3, 6, 1, 4, 1, 2468, 1, 2, 1, 1, 12, 3, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: emdConfigTempLowSetPoint.setStatus('mandatory')
emdConfigTempLowStatus = MibScalar((1, 3, 6, 1, 4, 1, 2468, 1, 2, 1, 1, 12, 3, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: emdConfigTempLowStatus.setStatus('mandatory')
emdConfigTempOffset = MibScalar((1, 3, 6, 1, 4, 1, 2468, 1, 2, 1, 1, 12, 3, 6), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: emdConfigTempOffset.setStatus('mandatory')
emdConfigHumidity = MibIdentifier((1, 3, 6, 1, 4, 1, 2468, 1, 2, 1, 1, 12, 4))
emdConfigHumidityName = MibScalar((1, 3, 6, 1, 4, 1, 2468, 1, 2, 1, 1, 12, 4, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 15))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: emdConfigHumidityName.setStatus('mandatory')
emdConfigHumidityHighSetPoint = MibScalar((1, 3, 6, 1, 4, 1, 2468, 1, 2, 1, 1, 12, 4, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: emdConfigHumidityHighSetPoint.setStatus('mandatory')
emdConfigHumidityLowStatus = MibScalar((1, 3, 6, 1, 4, 1, 2468, 1, 2, 1, 1, 12, 4, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: emdConfigHumidityLowStatus.setStatus('mandatory')
emdConfigHumidityLowSetPoint = MibScalar((1, 3, 6, 1, 4, 1, 2468, 1, 2, 1, 1, 12, 4, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: emdConfigHumidityLowSetPoint.setStatus('mandatory')
emdConfigHumidityHighStatus = MibScalar((1, 3, 6, 1, 4, 1, 2468, 1, 2, 1, 1, 12, 4, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: emdConfigHumidityHighStatus.setStatus('mandatory')
emdConfigHumidityOffset = MibScalar((1, 3, 6, 1, 4, 1, 2468, 1, 2, 1, 1, 12, 4, 6), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: emdConfigHumidityOffset.setStatus('mandatory')
emdConfigAlarm1 = MibIdentifier((1, 3, 6, 1, 4, 1, 2468, 1, 2, 1, 1, 12, 5))
emdConfigAlarm1Name = MibScalar((1, 3, 6, 1, 4, 1, 2468, 1, 2, 1, 1, 12, 5, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 15))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: emdConfigAlarm1Name.setStatus('mandatory')
emdConfigAlarm1Type = MibScalar((1, 3, 6, 1, 4, 1, 2468, 1, 2, 1, 1, 12, 5, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("disabled", 1), ("nomralOpen", 2), ("normalClose", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: emdConfigAlarm1Type.setStatus('mandatory')
emdConfigAlarm2 = MibIdentifier((1, 3, 6, 1, 4, 1, 2468, 1, 2, 1, 1, 12, 6))
emdConfigAlarm2Name = MibScalar((1, 3, 6, 1, 4, 1, 2468, 1, 2, 1, 1, 12, 6, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 15))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: emdConfigAlarm2Name.setStatus('mandatory')
emdConfigAlarm2Type = MibScalar((1, 3, 6, 1, 4, 1, 2468, 1, 2, 1, 1, 12, 6, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("disabled", 1), ("nomralOpen", 2), ("normalClose", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: emdConfigAlarm2Type.setStatus('mandatory')
ushaPowerRestored = NotificationType((1, 3, 6, 1, 4, 1, 2468, 1, 2, 1, 2) + (0,1))
ushaPowerFail = NotificationType((1, 3, 6, 1, 4, 1, 2468, 1, 2, 1, 2) + (0,2))
ushaReturnFromLowBattery = NotificationType((1, 3, 6, 1, 4, 1, 2468, 1, 2, 1, 2) + (0,3))
ushaLowBattery = NotificationType((1, 3, 6, 1, 4, 1, 2468, 1, 2, 1, 2) + (0,4))
ushaUpsOk = NotificationType((1, 3, 6, 1, 4, 1, 2468, 1, 2, 1, 2) + (0,5))
ushaUpsFailed = NotificationType((1, 3, 6, 1, 4, 1, 2468, 1, 2, 1, 2) + (0,6))
ushaUpsNotOnBattery = NotificationType((1, 3, 6, 1, 4, 1, 2468, 1, 2, 1, 2) + (0,7))
ushaUpsOnBattery = NotificationType((1, 3, 6, 1, 4, 1, 2468, 1, 2, 1, 2) + (0,8)).setObjects(("USHA-MIB", "upsBatteryGroupEstimatedChargeRemaining"), ("USHA-MIB", "upsBatteryGroupVoltage"), ("USHA-MIB", "upsBatteryGroupSecondsOnBattery"))
ushaTestOver = NotificationType((1, 3, 6, 1, 4, 1, 2468, 1, 2, 1, 2) + (0,9)).setObjects(("USHA-MIB", "upsBatteryTest"), ("USHA-MIB", "upsTestBatteryTestSettingTime"), ("USHA-MIB", "upsTestBatteryTestResult"), ("USHA-MIB", "upsTestBatteryTestStartTime"), ("USHA-MIB", "upsTestBatteryTestElapsedTime"))
ushaTestInProgress = NotificationType((1, 3, 6, 1, 4, 1, 2468, 1, 2, 1, 2) + (0,10))
ushaBypassOn = NotificationType((1, 3, 6, 1, 4, 1, 2468, 1, 2, 1, 2) + (0,11))
ushaUpsOnline = NotificationType((1, 3, 6, 1, 4, 1, 2468, 1, 2, 1, 2) + (0,12))
ushaCommunicationLost = NotificationType((1, 3, 6, 1, 4, 1, 2468, 1, 2, 1, 2) + (0,13))
ushaCommunicationEstablished = NotificationType((1, 3, 6, 1, 4, 1, 2468, 1, 2, 1, 2) + (0,14))
ushaUpsGoingDown = NotificationType((1, 3, 6, 1, 4, 1, 2468, 1, 2, 1, 2) + (0,15))
ushaUpsTurnedOff = NotificationType((1, 3, 6, 1, 4, 1, 2468, 1, 2, 1, 2) + (0,16))
ushaUpsSleeping = NotificationType((1, 3, 6, 1, 4, 1, 2468, 1, 2, 1, 2) + (0,17)).setObjects(("USHA-MIB", "upsControlUpsSleepTime"))
ushaUpsWokeUp = NotificationType((1, 3, 6, 1, 4, 1, 2468, 1, 2, 1, 2) + (0,18))
ushaUpsRebooted = NotificationType((1, 3, 6, 1, 4, 1, 2468, 1, 2, 1, 2) + (0,19))
ushaUpsShutdownCancelled = NotificationType((1, 3, 6, 1, 4, 1, 2468, 1, 2, 1, 2) + (0,20))
ushaUpsNotOverTemperature = NotificationType((1, 3, 6, 1, 4, 1, 2468, 1, 2, 1, 2) + (0,21)).setObjects(("USHA-MIB", "upsBatteryGroupTemperature"), ("USHA-MIB", "upsConfigGroupOverTemperatureSetPoint"))
ushaUpsOverTemperature = NotificationType((1, 3, 6, 1, 4, 1, 2468, 1, 2, 1, 2) + (0,22)).setObjects(("USHA-MIB", "upsBatteryGroupTemperature"), ("USHA-MIB", "upsConfigGroupOverTemperatureSetPoint"))
ushaUpsNotOverLoad = NotificationType((1, 3, 6, 1, 4, 1, 2468, 1, 2, 1, 2) + (0,23)).setObjects(("USHA-MIB", "upsOutputGroupPercentLoad"), ("USHA-MIB", "upsConfigGroupOverLoadSetPoint"))
ushaUpsOverLoad = NotificationType((1, 3, 6, 1, 4, 1, 2468, 1, 2, 1, 2) + (0,24)).setObjects(("USHA-MIB", "upsOutputGroupPercentLoad"), ("USHA-MIB", "upsConfigGroupOverLoadSetPoint"))
ushaUpsModuleInserted = NotificationType((1, 3, 6, 1, 4, 1, 2468, 1, 2, 1, 2) + (0,25))
ushaUpsModuleRemoved = NotificationType((1, 3, 6, 1, 4, 1, 2468, 1, 2, 1, 2) + (0,26))
emdTemperatureNotHigh = NotificationType((1, 3, 6, 1, 4, 1, 2468, 1, 2, 1, 2) + (0,27)).setObjects(("USHA-MIB", "emdSatatusTemperature"), ("USHA-MIB", "emdConfigTempHighSetPoint"), ("USHA-MIB", "emdConfigTempName"))
emdTemperatureTooHigh = NotificationType((1, 3, 6, 1, 4, 1, 2468, 1, 2, 1, 2) + (0,28)).setObjects(("USHA-MIB", "emdSatatusTemperature"), ("USHA-MIB", "emdConfigTempHighSetPoint"), ("USHA-MIB", "emdConfigTempName"))
emdTemperatureNotLow = NotificationType((1, 3, 6, 1, 4, 1, 2468, 1, 2, 1, 2) + (0,29)).setObjects(("USHA-MIB", "emdSatatusTemperature"), ("USHA-MIB", "emdConfigTempLowSetPoint"), ("USHA-MIB", "emdConfigTempName"))
emdTemperatureTooLow = NotificationType((1, 3, 6, 1, 4, 1, 2468, 1, 2, 1, 2) + (0,30)).setObjects(("USHA-MIB", "emdSatatusTemperature"), ("USHA-MIB", "emdConfigTempLowSetPoint"), ("USHA-MIB", "emdConfigTempName"))
emdHumidityNotHigh = NotificationType((1, 3, 6, 1, 4, 1, 2468, 1, 2, 1, 2) + (0,31)).setObjects(("USHA-MIB", "emdSatatusHumidity"), ("USHA-MIB", "emdConfigHumidityHighSetPoint"), ("USHA-MIB", "emdConfigHumidityName"))
emdHumidityTooHigh = NotificationType((1, 3, 6, 1, 4, 1, 2468, 1, 2, 1, 2) + (0,32)).setObjects(("USHA-MIB", "emdSatatusHumidity"), ("USHA-MIB", "emdConfigHumidityHighSetPoint"), ("USHA-MIB", "emdConfigHumidityName"))
emdHumidityNotLow = NotificationType((1, 3, 6, 1, 4, 1, 2468, 1, 2, 1, 2) + (0,33)).setObjects(("USHA-MIB", "emdSatatusHumidity"), ("USHA-MIB", "emdConfigHumidityLowSetPoint"), ("USHA-MIB", "emdConfigHumidityName"))
emdHumidityTooLow = NotificationType((1, 3, 6, 1, 4, 1, 2468, 1, 2, 1, 2) + (0,34)).setObjects(("USHA-MIB", "emdSatatusHumidity"), ("USHA-MIB", "emdConfigHumidityLowSetPoint"), ("USHA-MIB", "emdConfigHumidityName"))
emdAlarm1Normal = NotificationType((1, 3, 6, 1, 4, 1, 2468, 1, 2, 1, 2) + (0,35)).setObjects(("USHA-MIB", "emdConfigAlarm1Type"), ("USHA-MIB", "emdConfigAlarm1Name"))
emdAlarm1Active = NotificationType((1, 3, 6, 1, 4, 1, 2468, 1, 2, 1, 2) + (0,36)).setObjects(("USHA-MIB", "emdConfigAlarm1Type"), ("USHA-MIB", "emdConfigAlarm1Name"))
emdAlarm2Normal = NotificationType((1, 3, 6, 1, 4, 1, 2468, 1, 2, 1, 2) + (0,37)).setObjects(("USHA-MIB", "emdConfigAlarm2Type"), ("USHA-MIB", "emdConfigAlarm2Name"))
emdAlarm2Active = NotificationType((1, 3, 6, 1, 4, 1, 2468, 1, 2, 1, 2) + (0,38)).setObjects(("USHA-MIB", "emdConfigAlarm2Type"), ("USHA-MIB", "emdConfigAlarm2Name"))
ushaUpsInternalwarning = NotificationType((1, 3, 6, 1, 4, 1, 2468, 1, 2, 1, 2) + (0,39))
ushaUpsReturnFromInternalwarning = NotificationType((1, 3, 6, 1, 4, 1, 2468, 1, 2, 1, 2) + (0,40))
ushaUpsEPOActive = NotificationType((1, 3, 6, 1, 4, 1, 2468, 1, 2, 1, 2) + (0,41))
ushaUpsReturnFromEPOActive = NotificationType((1, 3, 6, 1, 4, 1, 2468, 1, 2, 1, 2) + (0,42))
ushaUpsModuleUnlock = NotificationType((1, 3, 6, 1, 4, 1, 2468, 1, 2, 1, 2) + (0,43))
ushaUpsReturnFromModuleUnlock = NotificationType((1, 3, 6, 1, 4, 1, 2468, 1, 2, 1, 2) + (0,44))
ushaUpsMain1Neutralloss = NotificationType((1, 3, 6, 1, 4, 1, 2468, 1, 2, 1, 2) + (0,45))
ushaUpsReturnFromMain1Neutralloss = NotificationType((1, 3, 6, 1, 4, 1, 2468, 1, 2, 1, 2) + (0,46))
ushaUpsMain1phaseerror = NotificationType((1, 3, 6, 1, 4, 1, 2468, 1, 2, 1, 2) + (0,47))
ushaUpsReturnFromMain1phaseerror = NotificationType((1, 3, 6, 1, 4, 1, 2468, 1, 2, 1, 2) + (0,48))
ushaUpsSitefault = NotificationType((1, 3, 6, 1, 4, 1, 2468, 1, 2, 1, 2) + (0,49))
ushaUpsReturnFromSitefault = NotificationType((1, 3, 6, 1, 4, 1, 2468, 1, 2, 1, 2) + (0,50))
ushaUpsBypassAbnormal = NotificationType((1, 3, 6, 1, 4, 1, 2468, 1, 2, 1, 2) + (0,51))
ushaUpsReturnFromBypassAbnormal = NotificationType((1, 3, 6, 1, 4, 1, 2468, 1, 2, 1, 2) + (0,52))
ushaUpsBypassPhaseError = NotificationType((1, 3, 6, 1, 4, 1, 2468, 1, 2, 1, 2) + (0,53))
ushaUpsReturnFromBypassPhaseError = NotificationType((1, 3, 6, 1, 4, 1, 2468, 1, 2, 1, 2) + (0,54))
ushaUpsBatteryOpen = NotificationType((1, 3, 6, 1, 4, 1, 2468, 1, 2, 1, 2) + (0,55))
ushaUpsReturnFromBatteryOpen = NotificationType((1, 3, 6, 1, 4, 1, 2468, 1, 2, 1, 2) + (0,56))
ushaUpsBatteryOverCharge = NotificationType((1, 3, 6, 1, 4, 1, 2468, 1, 2, 1, 2) + (0,57))
ushaUpsReturnFromBatteryOverCharge = NotificationType((1, 3, 6, 1, 4, 1, 2468, 1, 2, 1, 2) + (0,58))
ushaUpsBatteryReverse = NotificationType((1, 3, 6, 1, 4, 1, 2468, 1, 2, 1, 2) + (0,59))
ushaUpsReturnFromBatteryReverse = NotificationType((1, 3, 6, 1, 4, 1, 2468, 1, 2, 1, 2) + (0,60))
ushaUpsOverloadforewarning = NotificationType((1, 3, 6, 1, 4, 1, 2468, 1, 2, 1, 2) + (0,61))
ushaUpsReturnFromOverloadforewarning = NotificationType((1, 3, 6, 1, 4, 1, 2468, 1, 2, 1, 2) + (0,62))
ushaUpsOverloadWarning = NotificationType((1, 3, 6, 1, 4, 1, 2468, 1, 2, 1, 2) + (0,63))
ushaUpsReturnFromOverloadWarning = NotificationType((1, 3, 6, 1, 4, 1, 2468, 1, 2, 1, 2) + (0,64))
ushaUpsFanLock = NotificationType((1, 3, 6, 1, 4, 1, 2468, 1, 2, 1, 2) + (0,65))
ushaUpsReturnFromFanLock = NotificationType((1, 3, 6, 1, 4, 1, 2468, 1, 2, 1, 2) + (0,66))
ushaUpsMaintaincoverisopen = NotificationType((1, 3, 6, 1, 4, 1, 2468, 1, 2, 1, 2) + (0,67))
ushaUpsReturnFromMaintaincoverisopen = NotificationType((1, 3, 6, 1, 4, 1, 2468, 1, 2, 1, 2) + (0,68))
ushaUpsChargerfault = NotificationType((1, 3, 6, 1, 4, 1, 2468, 1, 2, 1, 2) + (0,69))
ushaUpsReturnFromChargerfault = NotificationType((1, 3, 6, 1, 4, 1, 2468, 1, 2, 1, 2) + (0,70))
ushaUpsModulelocationerror = NotificationType((1, 3, 6, 1, 4, 1, 2468, 1, 2, 1, 2) + (0,71))
ushaUpsReturnFromModulelocationerror = NotificationType((1, 3, 6, 1, 4, 1, 2468, 1, 2, 1, 2) + (0,72))
ushaUpsTurnonabnormal = NotificationType((1, 3, 6, 1, 4, 1, 2468, 1, 2, 1, 2) + (0,73))
ushaUpsReturnFromTurnonabnormal = NotificationType((1, 3, 6, 1, 4, 1, 2468, 1, 2, 1, 2) + (0,74))
ushaUpsRedundancyloss = NotificationType((1, 3, 6, 1, 4, 1, 2468, 1, 2, 1, 2) + (0,75))
ushaUpsReturnFromRedundancyloss = NotificationType((1, 3, 6, 1, 4, 1, 2468, 1, 2, 1, 2) + (0,76))
ushaUpsHotSwapActived = NotificationType((1, 3, 6, 1, 4, 1, 2468, 1, 2, 1, 2) + (0,77))
ushaUpsReturnFromHotSwapActived = NotificationType((1, 3, 6, 1, 4, 1, 2468, 1, 2, 1, 2) + (0,78))
ushaUpsBatteryInform = NotificationType((1, 3, 6, 1, 4, 1, 2468, 1, 2, 1, 2) + (0,79))
ushaUpsReturnFromBatteryInform = NotificationType((1, 3, 6, 1, 4, 1, 2468, 1, 2, 1, 2) + (0,80))
ushaUpsInspectionInform = NotificationType((1, 3, 6, 1, 4, 1, 2468, 1, 2, 1, 2) + (0,81))
ushaUpsReturnFromInspectionInform = NotificationType((1, 3, 6, 1, 4, 1, 2468, 1, 2, 1, 2) + (0,82))
ushaUpsGuaranteeInform = NotificationType((1, 3, 6, 1, 4, 1, 2468, 1, 2, 1, 2) + (0,83))
ushaUpsReturnFromGuaranteeInform = NotificationType((1, 3, 6, 1, 4, 1, 2468, 1, 2, 1, 2) + (0,84))
ushaUpsTemperatureLow = NotificationType((1, 3, 6, 1, 4, 1, 2468, 1, 2, 1, 2) + (0,85))
ushaUpsReturnFromTemperatureLow = NotificationType((1, 3, 6, 1, 4, 1, 2468, 1, 2, 1, 2) + (0,86))
ushaUpsTemperatureHigh = NotificationType((1, 3, 6, 1, 4, 1, 2468, 1, 2, 1, 2) + (0,87))
ushaUpsReturnFromTemperatureHigh = NotificationType((1, 3, 6, 1, 4, 1, 2468, 1, 2, 1, 2) + (0,88))
ushaUpsBatteryOverTemperature = NotificationType((1, 3, 6, 1, 4, 1, 2468, 1, 2, 1, 2) + (0,89))
ushaUpsReturnFromBatteryOverTemperature = NotificationType((1, 3, 6, 1, 4, 1, 2468, 1, 2, 1, 2) + (0,90))
ushaUpsFanMaintainInform = NotificationType((1, 3, 6, 1, 4, 1, 2468, 1, 2, 1, 2) + (0,91))
ushaUpsReturnFromFanMaintainInform = NotificationType((1, 3, 6, 1, 4, 1, 2468, 1, 2, 1, 2) + (0,92))
ushaUpsBusCapacitanceMaintainInform = NotificationType((1, 3, 6, 1, 4, 1, 2468, 1, 2, 1, 2) + (0,93))
ushaUpsReturnFromBusCapacitanceMaintainInform = NotificationType((1, 3, 6, 1, 4, 1, 2468, 1, 2, 1, 2) + (0,94))
ushaUpsSystemOverCapacity = NotificationType((1, 3, 6, 1, 4, 1, 2468, 1, 2, 1, 2) + (0,95))
ushaUpsReturnFromSystemOverCapacity = NotificationType((1, 3, 6, 1, 4, 1, 2468, 1, 2, 1, 2) + (0,96))
mibBuilder.exportSymbols("USHA-MIB", upsControlEventStatus=upsControlEventStatus, ushaTestInProgress=ushaTestInProgress, upsControlWeeklyScheduleTable=upsControlWeeklyScheduleTable, ushaCommunicationLost=ushaCommunicationLost, ushaUpsBusCapacitanceMaintainInform=ushaUpsBusCapacitanceMaintainInform, ushaUpsSleeping=ushaUpsSleeping, emdConfigTempHighSetPoint=emdConfigTempHighSetPoint, upsBatteryGroupEstimatedChargeRemaining=upsBatteryGroupEstimatedChargeRemaining, upsControlSpecialShutdownTime=upsControlSpecialShutdownTime, agentConfigHistoryLogFrequency=agentConfigHistoryLogFrequency, ushaUpsOverloadforewarning=ushaUpsOverloadforewarning, emdStatus=emdStatus, ushaUpsReturnFromRedundancyloss=ushaUpsReturnFromRedundancyloss, agentConfigTrapAckSignature=agentConfigTrapAckSignature, ushaUpsInspectionInform=ushaUpsInspectionInform, ushaUpsGuaranteeInform=ushaUpsGuaranteeInform, upsBypassGroupLineIndex=upsBypassGroupLineIndex, agentConfigRestart=agentConfigRestart, upsBypassGroup=upsBypassGroup, upsConfigGroupOutputFreq=upsConfigGroupOutputFreq, agentConfigClearHistoryLog=agentConfigClearHistoryLog, ushaUpsBypassAbnormal=ushaUpsBypassAbnormal, ushaUpsModuleRemoved=ushaUpsModuleRemoved, ushaUpsReturnFromModulelocationerror=ushaUpsReturnFromModulelocationerror, upsClientsConnectedNum=upsClientsConnectedNum, agentConfigClearEventLog=agentConfigClearEventLog, ushaUpsReturnFromHotSwapActived=ushaUpsReturnFromHotSwapActived, agentConfigTime=agentConfigTime, upsIdentGroupModel=upsIdentGroupModel, emdConfigAlarm2=emdConfigAlarm2, upsBatteryTestScheduleDay=upsBatteryTestScheduleDay, ushaUpsReturnFromInspectionInform=ushaUpsReturnFromInspectionInform, agentConfigTelnetStatue=agentConfigTelnetStatue, emdTemperatureNotLow=emdTemperatureNotLow, emdSatatusTemperature=emdSatatusTemperature, emdHumidityTooHigh=emdHumidityTooHigh, upsControlUpsSleepTime=upsControlUpsSleepTime, upsControlWeeklyRestartDay=upsControlWeeklyRestartDay, upsControlGroup=upsControlGroup, upsInputGroupTable=upsInputGroupTable, upsControlShutdownParametersEntry=upsControlShutdownParametersEntry, ushaUpsReturnFromBatteryReverse=ushaUpsReturnFromBatteryReverse, emdConfigTempLowStatus=emdConfigTempLowStatus, emdAlarm1Active=emdAlarm1Active, ushaUpsBatteryInform=ushaUpsBatteryInform, ushaUpsInternalwarning=ushaUpsInternalwarning, upsConfigGroup=upsConfigGroup, upsInputGroupLineIndex=upsInputGroupLineIndex, upsOutputGroupEntry=upsOutputGroupEntry, ushaUpsOverloadWarning=ushaUpsOverloadWarning, emdConfigTempOffset=emdConfigTempOffset, upsControlWeeklyShutdownDay=upsControlWeeklyShutdownDay, agentConfigDate=agentConfigDate, ushaUpsReturnFromSystemOverCapacity=ushaUpsReturnFromSystemOverCapacity, emdConfigAlarm1Type=emdConfigAlarm1Type, upsOutputGroupLineIndex=upsOutputGroupLineIndex, upsInputGroupCurrent=upsInputGroupCurrent, upsBypassGroupFrequency=upsBypassGroupFrequency, agentConfigTrapRetryTime=agentConfigTrapRetryTime, upsBatteryTestScheduleIndex=upsBatteryTestScheduleIndex, upsControlSpecialRestartTime=upsControlSpecialRestartTime, ushaUpsShutdownCancelled=ushaUpsShutdownCancelled, ushaUpsReturnFromInternalwarning=ushaUpsReturnFromInternalwarning, ushaUpsWokeUp=ushaUpsWokeUp, ushaUpsReturnFromTemperatureLow=ushaUpsReturnFromTemperatureLow, upsBatteryTestScheduleTable=upsBatteryTestScheduleTable, upsBypassGroupCurrent=upsBypassGroupCurrent, ushaUpsHotSwapActived=ushaUpsHotSwapActived, emdConfigAlarm1Name=emdConfigAlarm1Name, ushaUpsReturnFromBatteryInform=ushaUpsReturnFromBatteryInform, agentConfigPrimaryTimeServer=agentConfigPrimaryTimeServer, emdSatatusAlarm2=emdSatatusAlarm2, upsControlUpsShutdownDelay=upsControlUpsShutdownDelay, upsConfigGroupInputVoltage=upsConfigGroupInputVoltage, upsOutputGroupSource=upsOutputGroupSource, ushaUpsRedundancyloss=ushaUpsRedundancyloss, agentConfigResetToDefault=agentConfigResetToDefault, emdHumidityNotLow=emdHumidityNotLow, accessControlMode=accessControlMode, ushaLowBattery=ushaLowBattery, upsBatteryGroupStatus=upsBatteryGroupStatus, upsBatteryGroupTemperature=upsBatteryGroupTemperature, ushaUpsReturnFromOverloadWarning=ushaUpsReturnFromOverloadWarning, accessIndex=accessIndex, ushaUpsTemperatureHigh=ushaUpsTemperatureHigh, emdConfigHumidityName=emdConfigHumidityName, trapsReceiverAddr=trapsReceiverAddr, upsOutputGroupTable=upsOutputGroupTable, agentConfigTftpStatue=agentConfigTftpStatue, upsControlSpecialRestartDay=upsControlSpecialRestartDay, emdConfigHumidityLowSetPoint=emdConfigHumidityLowSetPoint, emdTemperatureNotHigh=emdTemperatureNotHigh, upsConfigGroupOutputPower=upsConfigGroupOutputPower, ushaUpsReturnFromEPOActive=ushaUpsReturnFromEPOActive, emdConfigHumidityLowStatus=emdConfigHumidityLowStatus, upsIdentGroupAttachedDevices=upsIdentGroupAttachedDevices, ushaUpsNotOnBattery=ushaUpsNotOnBattery, ushaUpsReturnFromMain1Neutralloss=ushaUpsReturnFromMain1Neutralloss, product=product, ushaUpsTurnedOff=ushaUpsTurnedOff, ushaUpsReturnFromMaintaincoverisopen=ushaUpsReturnFromMaintaincoverisopen, ushaUpsFailed=ushaUpsFailed, ushaUpsReturnFromBatteryOpen=ushaUpsReturnFromBatteryOpen, agentConfigClearAgentLog=agentConfigClearAgentLog, timeOfConnectionTime=timeOfConnectionTime, receiverDescription=receiverDescription, ushaUpsReturnFromTurnonabnormal=ushaUpsReturnFromTurnonabnormal, ushaUpsModuleInserted=ushaUpsModuleInserted, upsOutputGroupVoltage=upsOutputGroupVoltage, upsTestBatteryTestElapsedTime=upsTestBatteryTestElapsedTime, upsControlSpecialShutdownDay=upsControlSpecialShutdownDay, ushaUpsNotOverTemperature=ushaUpsNotOverTemperature, agentConfigMibVersion=agentConfigMibVersion, emdSatatusEmdType=emdSatatusEmdType, emdAlarm2Normal=emdAlarm2Normal, ushaUpsMain1Neutralloss=ushaUpsMain1Neutralloss, emdConfigEmdName=emdConfigEmdName, emdConfigTempName=emdConfigTempName, ushaUpsMain1phaseerror=ushaUpsMain1phaseerror, ushaUpsModuleUnlock=ushaUpsModuleUnlock, emdConfigAlarm2Type=emdConfigAlarm2Type, emdConfigTempHighStatus=emdConfigTempHighStatus, upsConfigGroupOutputVA=upsConfigGroupOutputVA, agentConfigGateway=agentConfigGateway, upsControlDelay=upsControlDelay, agentConfigTrapsReceiversEntry=agentConfigTrapsReceiversEntry, ushaUpsReturnFromSitefault=ushaUpsReturnFromSitefault, upsControlShutdownParametersTable=upsControlShutdownParametersTable, accessCommunityString=accessCommunityString, upsInputGroupVoltageMin=upsInputGroupVoltageMin, upsOutputGroup=upsOutputGroup, ushaUpsTemperatureLow=ushaUpsTemperatureLow, ushaCommunicationEstablished=ushaCommunicationEstablished, ushaUpsSitefault=ushaUpsSitefault, upsAgent=upsAgent, upsTrapGroup=upsTrapGroup, upsBypassGroupPower=upsBypassGroupPower, ushap=ushap, upsConfigGroupOverLoadSetPoint=upsConfigGroupOverLoadSetPoint, emdConfigHumidity=emdConfigHumidity, ushaReturnFromLowBattery=ushaReturnFromLowBattery, upsConfigGroupOverTemperatureSetPoint=upsConfigGroupOverTemperatureSetPoint, timeOfConnectionTimeout=timeOfConnectionTimeout, upsBatteryTestScheduleSpecialDay=upsBatteryTestScheduleSpecialDay, ushaUpsReturnFromBypassPhaseError=ushaUpsReturnFromBypassPhaseError, ushaUpsOk=ushaUpsOk, upsControlSpecialIndex=upsControlSpecialIndex, ushaUpsBatteryOverTemperature=ushaUpsBatteryOverTemperature, upsInputGroupVoltageMax=upsInputGroupVoltageMax, upsBatteryTestScheduleEntry=upsBatteryTestScheduleEntry, upsOutputGroupFrequency=upsOutputGroupFrequency, addrOfDevice=addrOfDevice, receiverNmsType=receiverNmsType, upsBypassGroupNumLines=upsBypassGroupNumLines, ushaUpsTurnonabnormal=ushaUpsTurnonabnormal, agentConfigSecondaryTimeServer=agentConfigSecondaryTimeServer, upsControlWeeklyScheduleEntry=upsControlWeeklyScheduleEntry, emdSatatusHumidity=emdSatatusHumidity, upsBatteryGroupMandatory=upsBatteryGroupMandatory, upsBatteryGroupSecondsOnBattery=upsBatteryGroupSecondsOnBattery, upsControlUpsOnOffControl=upsControlUpsOnOffControl, agentConfigClearExtHistoryLog=agentConfigClearExtHistoryLog, ushaUpsBatteryOpen=ushaUpsBatteryOpen, agentConfigBaudRate=agentConfigBaudRate, ushaPowerFail=ushaPowerFail, emdAlarm1Normal=emdAlarm1Normal, ushaTestOver=ushaTestOver, ushaUpsGoingDown=ushaUpsGoingDown, agentConfig=agentConfig, ushaUpsOnBattery=ushaUpsOnBattery, upsBypassGroupEntry=upsBypassGroupEntry, upsControlSpecialScheduleEntry=upsControlSpecialScheduleEntry, receiverSeverityLevel=receiverSeverityLevel, ushaUpsOverTemperature=ushaUpsOverTemperature, ushaUpsReturnFromModuleUnlock=ushaUpsReturnFromModuleUnlock, upsBatteryGroup=upsBatteryGroup, upsOutputGroupPercentLoad=upsOutputGroupPercentLoad, emdConfig=emdConfig, ushaUpsRebooted=ushaUpsRebooted, upsControlFirstWarning=upsControlFirstWarning, agentConfigPollRate=agentConfigPollRate, emdConfigTempLowSetPoint=emdConfigTempLowSetPoint, ushaUpsOverLoad=ushaUpsOverLoad, ushaUpsReturnFromMain1phaseerror=ushaUpsReturnFromMain1phaseerror, ushaUpsBatteryReverse=ushaUpsBatteryReverse, upsTestBatteryTestSettingTime=upsTestBatteryTestSettingTime, upsBatteryTestScheduleType=upsBatteryTestScheduleType, ushaUpsReturnFromOverloadforewarning=ushaUpsReturnFromOverloadforewarning, ushaPowerRestored=ushaPowerRestored, upsControlWeeklyRestartTime=upsControlWeeklyRestartTime, ushaUpsReturnFromChargerfault=ushaUpsReturnFromChargerfault, upsBypassGroupTable=upsBypassGroupTable, upsInputGroupFrequency=upsInputGroupFrequency, agentConfigTrapsReceiversTable=agentConfigTrapsReceiversTable, upsOutputGroupCurrent=upsOutputGroupCurrent, upsClients=upsClients, agentConfigTrapRetryCount=agentConfigTrapRetryCount, upsObjectGroup=upsObjectGroup, agentConfigAccessControlEntry=agentConfigAccessControlEntry, emdConfigTemperature=emdConfigTemperature, upsInputGroupLineBads=upsInputGroupLineBads, emdHumidityNotHigh=emdHumidityNotHigh, ushaUpsEPOActive=ushaUpsEPOActive, ushaUpsBypassPhaseError=ushaUpsBypassPhaseError, upsBatteryGroupEstimatedMinutesRemaining=upsBatteryGroupEstimatedMinutesRemaining, emdConfigHumidityHighStatus=emdConfigHumidityHighStatus, ushaBypassOn=ushaBypassOn, ushaUpsReturnFromFanLock=ushaUpsReturnFromFanLock, emdTemperatureTooLow=emdTemperatureTooLow, upsIdentGroup=upsIdentGroup, indexOfDevice=indexOfDevice, agentConfigIpaddress=agentConfigIpaddress, ushaUpsReturnFromBypassAbnormal=ushaUpsReturnFromBypassAbnormal, ushaUpsChargerfault=ushaUpsChargerfault, upsInputGroupNumLines=upsInputGroupNumLines, upsConfigGroupOutputVoltage=upsConfigGroupOutputVoltage, upsBatteryTestScheduleTestWithTime=upsBatteryTestScheduleTestWithTime, upsIdentGroupName=upsIdentGroupName, ushaUpsFanLock=ushaUpsFanLock, agentConfigDefaultLanguage=agentConfigDefaultLanguage, upsControlWeeklyIndex=upsControlWeeklyIndex, ingrasys=ingrasys, upsInputGroup=upsInputGroup, upsIdentGroupUpsSerialNumber=upsIdentGroupUpsSerialNumber, ushaUpsBatteryOverCharge=ushaUpsBatteryOverCharge, upsTestGroup=upsTestGroup, upsOutputGroupPower=upsOutputGroupPower, upsControlWeeklyShutdownTime=upsControlWeeklyShutdownTime, upsControlSpecialScheduleTable=upsControlSpecialScheduleTable, ushaUpsNotOverLoad=ushaUpsNotOverLoad, upsConfigGroupInputFreq=upsConfigGroupInputFreq, agentConfigAccessControlTable=agentConfigAccessControlTable, emdTemperatureTooHigh=emdTemperatureTooHigh, ushaUpsReturnFromBusCapacitanceMaintainInform=ushaUpsReturnFromBusCapacitanceMaintainInform, emdConfigAlarm2Name=emdConfigAlarm2Name, ushaUpsReturnFromBatteryOverTemperature=ushaUpsReturnFromBatteryOverTemperature, emdConfigHumidityOffset=emdConfigHumidityOffset, upsInputGroupEntry=upsInputGroupEntry, ushaUpsReturnFromFanMaintainInform=ushaUpsReturnFromFanMaintainInform, timeOfConnection=timeOfConnection, upsInputGroupVoltage=upsInputGroupVoltage, upsBatteryTestScheduleTime=upsBatteryTestScheduleTime, ushaUpsFanMaintainInform=ushaUpsFanMaintainInform, receiverCommunityString=receiverCommunityString, ushaUpsSystemOverCapacity=ushaUpsSystemOverCapacity, emdHumidityTooLow=emdHumidityTooLow, agentConfigSubnetMask=agentConfigSubnetMask, usahEmdConfigEmdConfig=usahEmdConfigEmdConfig, upsIdentGroupUPSFirmwareVersion=upsIdentGroupUPSFirmwareVersion, upsBypassGroupVoltage=upsBypassGroupVoltage, upsDevicesTable=upsDevicesTable, agentConfigExtHistoryLogFrequency=agentConfigExtHistoryLogFrequency, ushaUpsOnline=ushaUpsOnline, upsBatteryTest=upsBatteryTest)
mibBuilder.exportSymbols("USHA-MIB", accessControlAddr=accessControlAddr, upsControlEvent=upsControlEvent, emdConfigAlarm1=emdConfigAlarm1, ushaUpsReturnFromBatteryOverCharge=ushaUpsReturnFromBatteryOverCharge, upsTestBatteryTestResult=upsTestBatteryTestResult, emdConfigHumidityHighSetPoint=emdConfigHumidityHighSetPoint, nameOfDevice=nameOfDevice, upsDevicesEntry=upsDevicesEntry, trapsIndex=trapsIndex, upsControlWarningInterval=upsControlWarningInterval, emdSatatusAlarm1=emdSatatusAlarm1, ushaUpsModulelocationerror=ushaUpsModulelocationerror, upsInputGroupTruePower=upsInputGroupTruePower, emdAlarm2Active=emdAlarm2Active, upsBatteryGroupVoltage=upsBatteryGroupVoltage, upsIdentGroupManufacturer=upsIdentGroupManufacturer, upsTestBatteryTestStartTime=upsTestBatteryTestStartTime, upsIdentGroupAgentSoftwareVersion=upsIdentGroupAgentSoftwareVersion, ushaUpsReturnFromTemperatureHigh=ushaUpsReturnFromTemperatureHigh, ushaUpsReturnFromGuaranteeInform=ushaUpsReturnFromGuaranteeInform, agentConfigDhcpStatue=agentConfigDhcpStatue, ushaUpsMaintaincoverisopen=ushaUpsMaintaincoverisopen, upsOutputGroupNumLines=upsOutputGroupNumLines)
