#
# PySNMP MIB module CXCommonConsole-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/CXCommonConsole-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 18:16:52 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, OctetString, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "Integer", "OctetString", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsIntersection, ValueRangeConstraint, SingleValueConstraint, ConstraintsUnion, ValueSizeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsIntersection", "ValueRangeConstraint", "SingleValueConstraint", "ConstraintsUnion", "ValueSizeConstraint")
cxCommonConsole, Alias = mibBuilder.importSymbols("CXProduct-SMI", "cxCommonConsole", "Alias")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
ObjectIdentity, Counter64, Gauge32, IpAddress, TimeTicks, MibIdentifier, NotificationType, ModuleIdentity, Bits, Counter32, iso, Integer32, MibScalar, MibTable, MibTableRow, MibTableColumn, Unsigned32 = mibBuilder.importSymbols("SNMPv2-SMI", "ObjectIdentity", "Counter64", "Gauge32", "IpAddress", "TimeTicks", "MibIdentifier", "NotificationType", "ModuleIdentity", "Bits", "Counter32", "iso", "Integer32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Unsigned32")
TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString")
cxCcInactivityTimer = MibScalar((1, 3, 6, 1, 4, 1, 495, 2, 1, 5, 14, 1), Integer32().clone(300)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cxCcInactivityTimer.setStatus('mandatory')
cxCcPassword = MibScalar((1, 3, 6, 1, 4, 1, 495, 2, 1, 5, 14, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(6, 16)).clone('Supervisor')).setMaxAccess("writeonly")
if mibBuilder.loadTexts: cxCcPassword.setStatus('mandatory')
cxCcPrompt = MibScalar((1, 3, 6, 1, 4, 1, 495, 2, 1, 5, 14, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 16)).clone('Common Console')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cxCcPrompt.setStatus('mandatory')
cxCcLogDevice = MibScalar((1, 3, 6, 1, 4, 1, 495, 2, 1, 5, 14, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2))).clone('enabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cxCcLogDevice.setStatus('mandatory')
cxCcLogDeviceSlot = MibScalar((1, 3, 6, 1, 4, 1, 495, 2, 1, 5, 14, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cxCcLogDeviceSlot.setStatus('mandatory')
cxCcQueueDepth = MibScalar((1, 3, 6, 1, 4, 1, 495, 2, 1, 5, 14, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 128))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cxCcQueueDepth.setStatus('mandatory')
cxCcRemoteTable = MibTable((1, 3, 6, 1, 4, 1, 495, 2, 1, 5, 14, 7), )
if mibBuilder.loadTexts: cxCcRemoteTable.setStatus('mandatory')
cxCcRemoteEntry = MibTableRow((1, 3, 6, 1, 4, 1, 495, 2, 1, 5, 14, 7, 1), ).setIndexNames((0, "CXCommonConsole-MIB", "cxCcRemoteIndex"))
if mibBuilder.loadTexts: cxCcRemoteEntry.setStatus('mandatory')
cxCcRemoteIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 5, 14, 7, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cxCcRemoteIndex.setStatus('mandatory')
cxCcRemoteDestAlias = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 5, 14, 7, 1, 2), Alias()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cxCcRemoteDestAlias.setStatus('mandatory')
cxCcRemoteRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 5, 14, 7, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("invalid", 1), ("valid", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cxCcRemoteRowStatus.setStatus('mandatory')
mibBuilder.exportSymbols("CXCommonConsole-MIB", cxCcInactivityTimer=cxCcInactivityTimer, cxCcPrompt=cxCcPrompt, cxCcRemoteIndex=cxCcRemoteIndex, cxCcQueueDepth=cxCcQueueDepth, cxCcRemoteRowStatus=cxCcRemoteRowStatus, cxCcLogDevice=cxCcLogDevice, cxCcRemoteDestAlias=cxCcRemoteDestAlias, cxCcLogDeviceSlot=cxCcLogDeviceSlot, cxCcRemoteEntry=cxCcRemoteEntry, cxCcRemoteTable=cxCcRemoteTable, cxCcPassword=cxCcPassword)
