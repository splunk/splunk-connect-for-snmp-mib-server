#
# PySNMP MIB module INTEL-VLAN-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/INTEL-VLAN-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 19:43:32 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, ObjectIdentifier, Integer = mibBuilder.importSymbols("ASN1", "OctetString", "ObjectIdentifier", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueRangeConstraint, ConstraintsIntersection, ConstraintsUnion, SingleValueConstraint, ValueSizeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueRangeConstraint", "ConstraintsIntersection", "ConstraintsUnion", "SingleValueConstraint", "ValueSizeConstraint")
mib2ext, = mibBuilder.importSymbols("INTEL-GEN-MIB", "mib2ext")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
sysName, = mibBuilder.importSymbols("SNMPv2-MIB", "sysName")
Counter64, iso, Integer32, MibIdentifier, Bits, NotificationType, Gauge32, ObjectIdentity, ModuleIdentity, IpAddress, Unsigned32, Counter32, TimeTicks, MibScalar, MibTable, MibTableRow, MibTableColumn, NotificationType = mibBuilder.importSymbols("SNMPv2-SMI", "Counter64", "iso", "Integer32", "MibIdentifier", "Bits", "NotificationType", "Gauge32", "ObjectIdentity", "ModuleIdentity", "IpAddress", "Unsigned32", "Counter32", "TimeTicks", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "NotificationType")
TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString")
vlan = MibIdentifier((1, 3, 6, 1, 4, 1, 343, 6, 11))
vlanPolicy = MibIdentifier((1, 3, 6, 1, 4, 1, 343, 6, 11, 1))
vlanLearned = MibIdentifier((1, 3, 6, 1, 4, 1, 343, 6, 11, 2))
vlanIsl = MibIdentifier((1, 3, 6, 1, 4, 1, 343, 6, 11, 3))
vlanEditToken = MibIdentifier((1, 3, 6, 1, 4, 1, 343, 6, 11, 4))
vlanTrapObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 343, 6, 11, 6))
class EthMacAddress(OctetString):
    pass

vlanPolicyDomainName = MibScalar((1, 3, 6, 1, 4, 1, 343, 6, 11, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 8))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vlanPolicyDomainName.setStatus('mandatory')
vlanPolicyServerSeqNo = MibScalar((1, 3, 6, 1, 4, 1, 343, 6, 11, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vlanPolicyServerSeqNo.setStatus('mandatory')
vlanPolicyClientSeqNo = MibScalar((1, 3, 6, 1, 4, 1, 343, 6, 11, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vlanPolicyClientSeqNo.setStatus('mandatory')
vlanPolicyMode = MibScalar((1, 3, 6, 1, 4, 1, 343, 6, 11, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("fullVlan", 1), ("standalone", 2), ("fullVlanForStack", 3), ("standaloneForStack", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vlanPolicyMode.setStatus('mandatory')
vlanPolicyChangedStamp = MibScalar((1, 3, 6, 1, 4, 1, 343, 6, 11, 1, 5), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vlanPolicyChangedStamp.setStatus('mandatory')
vlanPolicyNextVlanId = MibScalar((1, 3, 6, 1, 4, 1, 343, 6, 11, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vlanPolicyNextVlanId.setStatus('mandatory')
vlanPolicyLastApiError = MibScalar((1, 3, 6, 1, 4, 1, 343, 6, 11, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 25, 26, 27, 30, 31, 32, 33, 34, 35, 37, 38, 40, 41, 42, 43, 44, 45, 46, 47, 48, 50, 51, 52, 53, 54, 55, 56))).clone(namedValues=NamedValues(("outOfMemory", 1), ("tokenTakenByOther", 2), ("editTokenNotAllocated", 3), ("illegalVlanId", 4), ("vlanAlreadyActive", 5), ("vlanAlreadyDeactive", 6), ("illegalIndex", 7), ("illegalName", 8), ("noDatabaseInFlash", 9), ("illegalEntryId", 10), ("optionUnknown", 11), ("commandUnknown", 12), ("entryAlreadyExist", 13), ("recursiveReferencing", 14), ("ipNetViolation", 15), ("noVlansDefined", 16), ("maximumNumberOfEntriesReached", 17), ("nameTooLong", 18), ("noIpNet", 19), ("illegalPortEntry", 20), ("moreEntriesExist", 21), ("entryNotFound", 22), ("saveError", 25), ("noEntriesDefined", 26), ("vlanNameAlreadyExist", 27), ("domainUnknown", 30), ("noLocalInfoPresent", 31), ("illegalNvpDbPointer", 32), ("illegalLocalPointer", 33), ("wrongDatabaseVersion", 34), ("errorInitializing", 35), ("errorClearingDb", 37), ("illegalPointer", 38), ("macVlanServerTimeOut", 40), ("editTokenLostToForcedRelease", 41), ("configurationChanged", 42), ("currentVersionTooOld", 43), ("wrongDomainName", 44), ("tokenClaimRequestAlreadyPending", 45), ("tokenIsAlreadyAllocated", 46), ("tokenAllocationTimeOut", 47), ("tokenAllocatedForDbUpdate", 48), ("serverIsLost", 50), ("tokenReclaimFromNewServerFailed", 51), ("vlanIdMismatch", 52), ("multiStpChangeGlobalExist", 53), ("multiStpChangeWrongVlanMode", 54), ("multiStpChangePortOverlapping", 55), ("notAllowedWhenRunningMultiStp", 56)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vlanPolicyLastApiError.setStatus('mandatory')
vlanPolicyChangeOperation = MibScalar((1, 3, 6, 1, 4, 1, 343, 6, 11, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("create", 1), ("rename", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vlanPolicyChangeOperation.setStatus('mandatory')
vlanPolicyVlanTable = MibTable((1, 3, 6, 1, 4, 1, 343, 6, 11, 1, 9), )
if mibBuilder.loadTexts: vlanPolicyVlanTable.setStatus('mandatory')
policyVlanEntry = MibTableRow((1, 3, 6, 1, 4, 1, 343, 6, 11, 1, 9, 1), ).setIndexNames((0, "INTEL-VLAN-MIB", "policyVlanId"))
if mibBuilder.loadTexts: policyVlanEntry.setStatus('mandatory')
policyVlanId = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 11, 1, 9, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: policyVlanId.setStatus('mandatory')
policyVlanName = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 11, 1, 9, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: policyVlanName.setStatus('mandatory')
policyVlanCreateObj = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 11, 1, 9, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: policyVlanCreateObj.setStatus('mandatory')
policyVlanDeleteObj = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 11, 1, 9, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("delete", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: policyVlanDeleteObj.setStatus('mandatory')
vlanPolicyMacRuleTable = MibTable((1, 3, 6, 1, 4, 1, 343, 6, 11, 1, 10), )
if mibBuilder.loadTexts: vlanPolicyMacRuleTable.setStatus('mandatory')
policyMacRuleEntry = MibTableRow((1, 3, 6, 1, 4, 1, 343, 6, 11, 1, 10, 1), ).setIndexNames((0, "INTEL-VLAN-MIB", "policyMacRuleVlanId"), (0, "INTEL-VLAN-MIB", "policyMacRuleAddress"))
if mibBuilder.loadTexts: policyMacRuleEntry.setStatus('mandatory')
policyMacRuleVlanId = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 11, 1, 10, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: policyMacRuleVlanId.setStatus('mandatory')
policyMacRuleAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 11, 1, 10, 1, 2), EthMacAddress().subtype(subtypeSpec=ValueSizeConstraint(6, 6)).setFixedLength(6)).setMaxAccess("readonly")
if mibBuilder.loadTexts: policyMacRuleAddress.setStatus('mandatory')
policyMacRuleCreateObj = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 11, 1, 10, 1, 3), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: policyMacRuleCreateObj.setStatus('mandatory')
policyMacRuleDeleteObj = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 11, 1, 10, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("delete", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: policyMacRuleDeleteObj.setStatus('mandatory')
vlanPolicyIslMacRuleTable = MibTable((1, 3, 6, 1, 4, 1, 343, 6, 11, 1, 11), )
if mibBuilder.loadTexts: vlanPolicyIslMacRuleTable.setStatus('mandatory')
policyIslMacRuleEntry = MibTableRow((1, 3, 6, 1, 4, 1, 343, 6, 11, 1, 11, 1), ).setIndexNames((0, "INTEL-VLAN-MIB", "policyIslMacRuleVlanId"), (0, "INTEL-VLAN-MIB", "policyIslMacRuleAddress"))
if mibBuilder.loadTexts: policyIslMacRuleEntry.setStatus('mandatory')
policyIslMacRuleVlanId = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 11, 1, 11, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: policyIslMacRuleVlanId.setStatus('mandatory')
policyIslMacRuleAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 11, 1, 11, 1, 2), EthMacAddress().subtype(subtypeSpec=ValueSizeConstraint(6, 6)).setFixedLength(6)).setMaxAccess("readonly")
if mibBuilder.loadTexts: policyIslMacRuleAddress.setStatus('mandatory')
policyIslMacRuleCreateObj = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 11, 1, 11, 1, 3), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: policyIslMacRuleCreateObj.setStatus('mandatory')
policyIslMacRuleDeleteObj = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 11, 1, 11, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("delete", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: policyIslMacRuleDeleteObj.setStatus('mandatory')
vlanPolicyIpRuleTable = MibTable((1, 3, 6, 1, 4, 1, 343, 6, 11, 1, 12), )
if mibBuilder.loadTexts: vlanPolicyIpRuleTable.setStatus('mandatory')
policyIpRuleEntry = MibTableRow((1, 3, 6, 1, 4, 1, 343, 6, 11, 1, 12, 1), ).setIndexNames((0, "INTEL-VLAN-MIB", "policyIpRuleVlanId"), (0, "INTEL-VLAN-MIB", "policyIpRuleAddress"))
if mibBuilder.loadTexts: policyIpRuleEntry.setStatus('mandatory')
policyIpRuleVlanId = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 11, 1, 12, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: policyIpRuleVlanId.setStatus('mandatory')
policyIpRuleAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 11, 1, 12, 1, 2), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: policyIpRuleAddress.setStatus('mandatory')
policyIpRuleCreateObj = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 11, 1, 12, 1, 3), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: policyIpRuleCreateObj.setStatus('mandatory')
policyIpRuleDeleteObj = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 11, 1, 12, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("delete", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: policyIpRuleDeleteObj.setStatus('mandatory')
vlanPolicyIpNetRuleTable = MibTable((1, 3, 6, 1, 4, 1, 343, 6, 11, 1, 13), )
if mibBuilder.loadTexts: vlanPolicyIpNetRuleTable.setStatus('mandatory')
policyIpNetRuleEntry = MibTableRow((1, 3, 6, 1, 4, 1, 343, 6, 11, 1, 13, 1), ).setIndexNames((0, "INTEL-VLAN-MIB", "policyIpNetRuleVlanId"), (0, "INTEL-VLAN-MIB", "policyIpNetRuleAddress"))
if mibBuilder.loadTexts: policyIpNetRuleEntry.setStatus('mandatory')
policyIpNetRuleVlanId = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 11, 1, 13, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: policyIpNetRuleVlanId.setStatus('mandatory')
policyIpNetRuleAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 11, 1, 13, 1, 2), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: policyIpNetRuleAddress.setStatus('mandatory')
policyIpNetRuleMask = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 11, 1, 13, 1, 3), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: policyIpNetRuleMask.setStatus('mandatory')
policyIpNetRuleCreateObj = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 11, 1, 13, 1, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(4, 4)).setFixedLength(4)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: policyIpNetRuleCreateObj.setStatus('mandatory')
policyIpNetRuleDeleteObj = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 11, 1, 13, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("delete", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: policyIpNetRuleDeleteObj.setStatus('mandatory')
vlanPolicyPortRuleTable = MibTable((1, 3, 6, 1, 4, 1, 343, 6, 11, 1, 14), )
if mibBuilder.loadTexts: vlanPolicyPortRuleTable.setStatus('mandatory')
policyPortRuleEntry = MibTableRow((1, 3, 6, 1, 4, 1, 343, 6, 11, 1, 14, 1), ).setIndexNames((0, "INTEL-VLAN-MIB", "policyPortRuleVlanId"), (0, "INTEL-VLAN-MIB", "policyPortRuleNumber"))
if mibBuilder.loadTexts: policyPortRuleEntry.setStatus('mandatory')
policyPortRuleVlanId = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 11, 1, 14, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: policyPortRuleVlanId.setStatus('mandatory')
policyPortRuleNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 11, 1, 14, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: policyPortRuleNumber.setStatus('mandatory')
policyPortRuleCreateObj = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 11, 1, 14, 1, 3), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: policyPortRuleCreateObj.setStatus('mandatory')
policyPortRuleDeleteObj = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 11, 1, 14, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("delete", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: policyPortRuleDeleteObj.setStatus('mandatory')
vlanPolicyPortSettingsTable = MibTable((1, 3, 6, 1, 4, 1, 343, 6, 11, 1, 15), )
if mibBuilder.loadTexts: vlanPolicyPortSettingsTable.setStatus('mandatory')
policyPortSettingsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 343, 6, 11, 1, 15, 1), ).setIndexNames((0, "INTEL-VLAN-MIB", "policyPortSettingsPortNumber"))
if mibBuilder.loadTexts: policyPortSettingsEntry.setStatus('mandatory')
policyPortSettingsPortNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 11, 1, 15, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: policyPortSettingsPortNumber.setStatus('mandatory')
policyPortSettingsIpLearning = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 11, 1, 15, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("ipLearningDisabled", 1), ("ipLearningEnabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: policyPortSettingsIpLearning.setStatus('mandatory')
vlanPolicyAllPortSettingsIpLearning = MibScalar((1, 3, 6, 1, 4, 1, 343, 6, 11, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("ipLearningDisabled", 1), ("ipLearningEnabled", 2), ("ipLearningMixed", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vlanPolicyAllPortSettingsIpLearning.setStatus('mandatory')
vlanPolicyAssignManagementVlan = MibScalar((1, 3, 6, 1, 4, 1, 343, 6, 11, 1, 17), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vlanPolicyAssignManagementVlan.setStatus('mandatory')
vlanPolicyConfigConfState = MibScalar((1, 3, 6, 1, 4, 1, 343, 6, 11, 1, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("notReady", 1), ("ready", 2), ("revertedToOldConf", 3), ("confirmedNewConf", 4), ("confirm", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vlanPolicyConfigConfState.setStatus('mandatory')
vlanPolicyConfigConfTimerValue = MibScalar((1, 3, 6, 1, 4, 1, 343, 6, 11, 1, 19), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vlanPolicyConfigConfTimerValue.setStatus('mandatory')
vlanPolicySupportedVlanModes = MibScalar((1, 3, 6, 1, 4, 1, 343, 6, 11, 1, 20), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vlanPolicySupportedVlanModes.setStatus('mandatory')
vlanPolicyRevert2Default = MibScalar((1, 3, 6, 1, 4, 1, 343, 6, 11, 1, 21), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vlanPolicyRevert2Default.setStatus('mandatory')
vlanPolicyMacVlanServerPriority = MibScalar((1, 3, 6, 1, 4, 1, 343, 6, 11, 1, 22), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vlanPolicyMacVlanServerPriority.setStatus('mandatory')
vlanPolicyAutoMoveMgtIpLink = MibScalar((1, 3, 6, 1, 4, 1, 343, 6, 11, 1, 23), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("autoMoveMgtEnabled", 1), ("autoMoveMgtDisabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vlanPolicyAutoMoveMgtIpLink.setStatus('mandatory')
vlanPolicyStackPortRuleTable = MibTable((1, 3, 6, 1, 4, 1, 343, 6, 11, 1, 24), )
if mibBuilder.loadTexts: vlanPolicyStackPortRuleTable.setStatus('mandatory')
policyStackPortRuleEntry = MibTableRow((1, 3, 6, 1, 4, 1, 343, 6, 11, 1, 24, 1), ).setIndexNames((0, "INTEL-VLAN-MIB", "policyStackPortRuleVlanId"), (0, "INTEL-VLAN-MIB", "policyStackPortRuleSwitchMac"), (0, "INTEL-VLAN-MIB", "policyStackPortRuleNumber"))
if mibBuilder.loadTexts: policyStackPortRuleEntry.setStatus('mandatory')
policyStackPortRuleVlanId = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 11, 1, 24, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: policyStackPortRuleVlanId.setStatus('mandatory')
policyStackPortRuleSwitchMac = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 11, 1, 24, 1, 2), EthMacAddress().subtype(subtypeSpec=ValueSizeConstraint(6, 6)).setFixedLength(6)).setMaxAccess("readonly")
if mibBuilder.loadTexts: policyStackPortRuleSwitchMac.setStatus('mandatory')
policyStackPortRuleNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 11, 1, 24, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: policyStackPortRuleNumber.setStatus('mandatory')
policyStackPortRuleCreateObj = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 11, 1, 24, 1, 4), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: policyStackPortRuleCreateObj.setStatus('mandatory')
policyStackPortRuleDeleteObj = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 11, 1, 24, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("delete", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: policyStackPortRuleDeleteObj.setStatus('mandatory')
vlanPolicyUseMultiSTP = MibScalar((1, 3, 6, 1, 4, 1, 343, 6, 11, 1, 25), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vlanPolicyUseMultiSTP.setStatus('mandatory')
vlanPolicyFwdLearnPckts = MibScalar((1, 3, 6, 1, 4, 1, 343, 6, 11, 1, 26), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vlanPolicyFwdLearnPckts.setStatus('mandatory')
vlanLearnedVersion = MibScalar((1, 3, 6, 1, 4, 1, 343, 6, 11, 2, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vlanLearnedVersion.setStatus('mandatory')
vlanLearnedServerState = MibScalar((1, 3, 6, 1, 4, 1, 343, 6, 11, 2, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("initActive", 1), ("initPassive", 2), ("passive", 3), ("active", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vlanLearnedServerState.setStatus('mandatory')
vlanLearnedServerPriority = MibScalar((1, 3, 6, 1, 4, 1, 343, 6, 11, 2, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vlanLearnedServerPriority.setStatus('mandatory')
vlanLearnedServerIPAddress = MibScalar((1, 3, 6, 1, 4, 1, 343, 6, 11, 2, 4), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vlanLearnedServerIPAddress.setStatus('mandatory')
vlanLearnedServerMACAddress = MibScalar((1, 3, 6, 1, 4, 1, 343, 6, 11, 2, 5), EthMacAddress().subtype(subtypeSpec=ValueSizeConstraint(6, 6)).setFixedLength(6)).setMaxAccess("readonly")
if mibBuilder.loadTexts: vlanLearnedServerMACAddress.setStatus('mandatory')
vlanLearnedServerPortNo = MibScalar((1, 3, 6, 1, 4, 1, 343, 6, 11, 2, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vlanLearnedServerPortNo.setStatus('mandatory')
vlanLearnedServerNameChangeTimer = MibScalar((1, 3, 6, 1, 4, 1, 343, 6, 11, 2, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vlanLearnedServerNameChangeTimer.setStatus('mandatory')
vlanLearnedServerExpiryTimer = MibScalar((1, 3, 6, 1, 4, 1, 343, 6, 11, 2, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vlanLearnedServerExpiryTimer.setStatus('mandatory')
vlanLearnedMacTable = MibTable((1, 3, 6, 1, 4, 1, 343, 6, 11, 2, 9), )
if mibBuilder.loadTexts: vlanLearnedMacTable.setStatus('mandatory')
learnedMacEntry = MibTableRow((1, 3, 6, 1, 4, 1, 343, 6, 11, 2, 9, 1), ).setIndexNames((0, "INTEL-VLAN-MIB", "learnedMacAddress"))
if mibBuilder.loadTexts: learnedMacEntry.setStatus('mandatory')
learnedMacAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 11, 2, 9, 1, 1), EthMacAddress().subtype(subtypeSpec=ValueSizeConstraint(6, 6)).setFixedLength(6)).setMaxAccess("readonly")
if mibBuilder.loadTexts: learnedMacAddress.setStatus('mandatory')
learnedMacType = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 11, 2, 9, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(2, 2)).setFixedLength(2)).setMaxAccess("readonly")
if mibBuilder.loadTexts: learnedMacType.setStatus('mandatory')
learnedMacPortNo = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 11, 2, 9, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: learnedMacPortNo.setStatus('mandatory')
learnedMacIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 11, 2, 9, 1, 4), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: learnedMacIpAddress.setStatus('mandatory')
vlanLearnedMacVlanTable = MibTable((1, 3, 6, 1, 4, 1, 343, 6, 11, 2, 10), )
if mibBuilder.loadTexts: vlanLearnedMacVlanTable.setStatus('mandatory')
learnedMacVlanEntry = MibTableRow((1, 3, 6, 1, 4, 1, 343, 6, 11, 2, 10, 1), ).setIndexNames((0, "INTEL-VLAN-MIB", "learnedMacVlanMac"), (0, "INTEL-VLAN-MIB", "learnedMacVlanIndex"))
if mibBuilder.loadTexts: learnedMacVlanEntry.setStatus('mandatory')
learnedMacVlanMac = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 11, 2, 10, 1, 1), EthMacAddress().subtype(subtypeSpec=ValueSizeConstraint(6, 6)).setFixedLength(6)).setMaxAccess("readonly")
if mibBuilder.loadTexts: learnedMacVlanMac.setStatus('mandatory')
learnedMacVlanIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 11, 2, 10, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: learnedMacVlanIndex.setStatus('mandatory')
learnedMacVlanName = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 11, 2, 10, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readonly")
if mibBuilder.loadTexts: learnedMacVlanName.setStatus('mandatory')
vlanLearnedVlanPortTable = MibTable((1, 3, 6, 1, 4, 1, 343, 6, 11, 2, 11), )
if mibBuilder.loadTexts: vlanLearnedVlanPortTable.setStatus('mandatory')
learnedVlanPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 343, 6, 11, 2, 11, 1), ).setIndexNames((0, "INTEL-VLAN-MIB", "learnedVlanPortNo"), (0, "INTEL-VLAN-MIB", "learnedVlanPortVlanIndex"))
if mibBuilder.loadTexts: learnedVlanPortEntry.setStatus('mandatory')
learnedVlanPortNo = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 11, 2, 11, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: learnedVlanPortNo.setStatus('mandatory')
learnedVlanPortVlanIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 11, 2, 11, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: learnedVlanPortVlanIndex.setStatus('mandatory')
learnedVlanPortVlanName = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 11, 2, 11, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readonly")
if mibBuilder.loadTexts: learnedVlanPortVlanName.setStatus('mandatory')
vlanLearnedVlanIdTable = MibTable((1, 3, 6, 1, 4, 1, 343, 6, 11, 2, 12), )
if mibBuilder.loadTexts: vlanLearnedVlanIdTable.setStatus('mandatory')
learnedVlanIdEntry = MibTableRow((1, 3, 6, 1, 4, 1, 343, 6, 11, 2, 12, 1), ).setIndexNames((0, "INTEL-VLAN-MIB", "learnedVlanId"))
if mibBuilder.loadTexts: learnedVlanIdEntry.setStatus('mandatory')
learnedVlanId = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 11, 2, 12, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: learnedVlanId.setStatus('mandatory')
learnedVlanIdVlanName = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 11, 2, 12, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readonly")
if mibBuilder.loadTexts: learnedVlanIdVlanName.setStatus('mandatory')
vlanLearnedSnmpMgtVlanIds = MibScalar((1, 3, 6, 1, 4, 1, 343, 6, 11, 2, 13), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vlanLearnedSnmpMgtVlanIds.setStatus('mandatory')
vlanLearnedMacVlanFlush = MibScalar((1, 3, 6, 1, 4, 1, 343, 6, 11, 2, 14), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vlanLearnedMacVlanFlush.setStatus('mandatory')
islTable = MibTable((1, 3, 6, 1, 4, 1, 343, 6, 11, 3, 1), )
if mibBuilder.loadTexts: islTable.setStatus('mandatory')
islEntry = MibTableRow((1, 3, 6, 1, 4, 1, 343, 6, 11, 3, 1, 1), ).setIndexNames((0, "INTEL-VLAN-MIB", "islIfIndex"), (0, "INTEL-VLAN-MIB", "islMacAddress"))
if mibBuilder.loadTexts: islEntry.setStatus('mandatory')
islIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 11, 3, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: islIfIndex.setStatus('mandatory')
islMacAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 11, 3, 1, 1, 2), EthMacAddress().subtype(subtypeSpec=ValueSizeConstraint(6, 6)).setFixedLength(6)).setMaxAccess("readonly")
if mibBuilder.loadTexts: islMacAddress.setStatus('mandatory')
islIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 11, 3, 1, 1, 3), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: islIpAddress.setStatus('mandatory')
editTokenOwnerMacAddress = MibScalar((1, 3, 6, 1, 4, 1, 343, 6, 11, 4, 1), EthMacAddress().subtype(subtypeSpec=ValueSizeConstraint(6, 6)).setFixedLength(6)).setMaxAccess("readonly")
if mibBuilder.loadTexts: editTokenOwnerMacAddress.setStatus('mandatory')
editTokenOwnerIpAddress = MibScalar((1, 3, 6, 1, 4, 1, 343, 6, 11, 4, 2), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: editTokenOwnerIpAddress.setStatus('mandatory')
editTokenOwnerSysName = MibScalar((1, 3, 6, 1, 4, 1, 343, 6, 11, 4, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: editTokenOwnerSysName.setStatus('mandatory')
editTokenOwnerApplication = MibScalar((1, 3, 6, 1, 4, 1, 343, 6, 11, 4, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("localManagement", 1), ("snmp", 2), ("nvpdbTftp", 3), ("serverUpdate", 4), ("externalTftpGet", 5), ("externalTftpPut", 6), ("loadFromFlash", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: editTokenOwnerApplication.setStatus('mandatory')
editTokenOwnerSnmpIpAddress = MibScalar((1, 3, 6, 1, 4, 1, 343, 6, 11, 4, 5), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: editTokenOwnerSnmpIpAddress.setStatus('mandatory')
editTokenClaimReq = MibScalar((1, 3, 6, 1, 4, 1, 343, 6, 11, 4, 6), OctetString().subtype(subtypeSpec=ValueSizeConstraint(6, 6)).setFixedLength(6)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: editTokenClaimReq.setStatus('mandatory')
editTokenLastClaimRspRetVal = MibScalar((1, 3, 6, 1, 4, 1, 343, 6, 11, 4, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 99, 100, 101, 102, 103, 104, 105))).clone(namedValues=NamedValues(("success", 1), ("failTaken", 2), ("failVersionTooOld", 3), ("failWrongDomainName", 4), ("notReady", 99), ("failClaiming", 100), ("failTakenThisSwitch", 101), ("failReqTimeout", 102), ("failGetBuffer", 103), ("failUpdating", 104), ("failNotReady", 105)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: editTokenLastClaimRspRetVal.setStatus('mandatory')
editTokenReleaseReq = MibScalar((1, 3, 6, 1, 4, 1, 343, 6, 11, 4, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("noSave", 1), ("save", 2), ("saveWithConfirmOption", 3), ("modeChangeRestoreDefault", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: editTokenReleaseReq.setStatus('mandatory')
editTokenLastReleaseRspRetVal = MibScalar((1, 3, 6, 1, 4, 1, 343, 6, 11, 4, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 99, 100, 101, 102, 104, 105, 106, 107, 108))).clone(namedValues=NamedValues(("success", 1), ("failNotTaken", 2), ("failNotOwner", 3), ("failReplacing", 4), ("notReady", 99), ("failClaiming", 100), ("failReqTimeout", 101), ("failForceReleased", 102), ("failReleasing", 104), ("failSaving", 105), ("failNotTakenThisAppl", 106), ("failLocalError", 107), ("failNotReady", 108)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: editTokenLastReleaseRspRetVal.setStatus('mandatory')
editTokenForceReleaseReq = MibScalar((1, 3, 6, 1, 4, 1, 343, 6, 11, 4, 10), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: editTokenForceReleaseReq.setStatus('mandatory')
editTokenClientState = MibScalar((1, 3, 6, 1, 4, 1, 343, 6, 11, 4, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("notTaken", 1), ("taken", 2), ("claiming", 3), ("releasing", 4), ("reclaiming", 5), ("expectingNewNvpdb", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: editTokenClientState.setStatus('mandatory')
editTokenTakenTime = MibScalar((1, 3, 6, 1, 4, 1, 343, 6, 11, 4, 12), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: editTokenTakenTime.setStatus('mandatory')
editTokenLastForceReleaseRspRetVal = MibScalar((1, 3, 6, 1, 4, 1, 343, 6, 11, 4, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 99))).clone(namedValues=NamedValues(("success", 1), ("timeout", 2), ("notTaken", 3), ("inProgress", 4), ("notReady", 99)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: editTokenLastForceReleaseRspRetVal.setStatus('mandatory')
editTokenServerState = MibScalar((1, 3, 6, 1, 4, 1, 343, 6, 11, 4, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("notTaken", 1), ("releasing", 2), ("taken", 3), ("forceReleasing", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: editTokenServerState.setStatus('mandatory')
previousVlanDomainName = MibScalar((1, 3, 6, 1, 4, 1, 343, 6, 11, 6, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 8)))
if mibBuilder.loadTexts: previousVlanDomainName.setStatus('mandatory')
vlanParsingErrorNo = MibScalar((1, 3, 6, 1, 4, 1, 343, 6, 11, 6, 2), Integer32())
if mibBuilder.loadTexts: vlanParsingErrorNo.setStatus('mandatory')
vlanParsingErrorText = MibScalar((1, 3, 6, 1, 4, 1, 343, 6, 11, 6, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 255)))
if mibBuilder.loadTexts: vlanParsingErrorText.setStatus('mandatory')
originatorIpAddress = MibScalar((1, 3, 6, 1, 4, 1, 343, 6, 11, 6, 4), IpAddress())
if mibBuilder.loadTexts: originatorIpAddress.setStatus('mandatory')
originatorMacAddress = MibScalar((1, 3, 6, 1, 4, 1, 343, 6, 11, 6, 5), EthMacAddress().subtype(subtypeSpec=ValueSizeConstraint(6, 6)).setFixedLength(6))
if mibBuilder.loadTexts: originatorMacAddress.setStatus('mandatory')
originatorSysName = MibScalar((1, 3, 6, 1, 4, 1, 343, 6, 11, 6, 6), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 255)))
if mibBuilder.loadTexts: originatorSysName.setStatus('mandatory')
originatorMgtStationIpAddress = MibScalar((1, 3, 6, 1, 4, 1, 343, 6, 11, 6, 7), IpAddress())
if mibBuilder.loadTexts: originatorMgtStationIpAddress.setStatus('mandatory')
globalVlanConfigurationChange = NotificationType((1, 3, 6, 1, 4, 1, 343, 6, 11) + (0,1)).setObjects(("INTEL-VLAN-MIB", "vlanPolicyDomainName"))
localConfigurationChange = NotificationType((1, 3, 6, 1, 4, 1, 343, 6, 11) + (0,2)).setObjects(("INTEL-VLAN-MIB", "vlanPolicyDomainName"), ("SNMPv2-MIB", "sysName"))
invalidVlanConfiguration = NotificationType((1, 3, 6, 1, 4, 1, 343, 6, 11) + (0,3)).setObjects(("INTEL-VLAN-MIB", "vlanPolicyDomainName"), ("INTEL-VLAN-MIB", "vlanParsingErrorNo"), ("INTEL-VLAN-MIB", "vlanParsingErrorText"))
domainNameChange = NotificationType((1, 3, 6, 1, 4, 1, 343, 6, 11) + (0,5)).setObjects(("INTEL-VLAN-MIB", "previousVlanDomainName"), ("INTEL-VLAN-MIB", "vlanPolicyDomainName"))
newSwitchInDomain = NotificationType((1, 3, 6, 1, 4, 1, 343, 6, 11) + (0,6)).setObjects(("INTEL-VLAN-MIB", "vlanPolicyDomainName"), ("INTEL-VLAN-MIB", "islIfIndex"), ("INTEL-VLAN-MIB", "islMacAddress"), ("INTEL-VLAN-MIB", "islIpAddress"))
missingSwitchInDomain = NotificationType((1, 3, 6, 1, 4, 1, 343, 6, 11) + (0,7)).setObjects(("INTEL-VLAN-MIB", "vlanPolicyDomainName"), ("INTEL-VLAN-MIB", "islIfIndex"), ("INTEL-VLAN-MIB", "islMacAddress"), ("INTEL-VLAN-MIB", "islIpAddress"))
editTokenForceRelease = NotificationType((1, 3, 6, 1, 4, 1, 343, 6, 11) + (0,8)).setObjects(("INTEL-VLAN-MIB", "vlanPolicyDomainName"), ("INTEL-VLAN-MIB", "originatorIpAddress"), ("INTEL-VLAN-MIB", "originatorMacAddress"), ("INTEL-VLAN-MIB", "originatorSysName"), ("INTEL-VLAN-MIB", "originatorMgtStationIpAddress"))
editTokenRequestFailed = NotificationType((1, 3, 6, 1, 4, 1, 343, 6, 11) + (0,9)).setObjects(("INTEL-VLAN-MIB", "vlanPolicyDomainName"), ("INTEL-VLAN-MIB", "originatorMgtStationIpAddress"))
configConfirmFailed = NotificationType((1, 3, 6, 1, 4, 1, 343, 6, 11) + (0,10)).setObjects(("INTEL-VLAN-MIB", "vlanPolicyDomainName"), ("INTEL-VLAN-MIB", "originatorSysName"))
vlanLearnedDatabaseFull = NotificationType((1, 3, 6, 1, 4, 1, 343, 6, 11) + (0,11)).setObjects(("INTEL-VLAN-MIB", "vlanPolicyDomainName"))
mibBuilder.exportSymbols("INTEL-VLAN-MIB", vlanPolicyIpNetRuleTable=vlanPolicyIpNetRuleTable, policyPortSettingsIpLearning=policyPortSettingsIpLearning, islEntry=islEntry, editTokenClaimReq=editTokenClaimReq, vlanLearnedMacVlanTable=vlanLearnedMacVlanTable, policyIslMacRuleVlanId=policyIslMacRuleVlanId, newSwitchInDomain=newSwitchInDomain, vlanPolicyFwdLearnPckts=vlanPolicyFwdLearnPckts, vlanPolicyAutoMoveMgtIpLink=vlanPolicyAutoMoveMgtIpLink, islTable=islTable, editTokenLastForceReleaseRspRetVal=editTokenLastForceReleaseRspRetVal, vlanIsl=vlanIsl, EthMacAddress=EthMacAddress, vlanLearnedServerNameChangeTimer=vlanLearnedServerNameChangeTimer, policyPortRuleCreateObj=policyPortRuleCreateObj, originatorMgtStationIpAddress=originatorMgtStationIpAddress, learnedVlanPortVlanIndex=learnedVlanPortVlanIndex, vlanPolicyLastApiError=vlanPolicyLastApiError, policyIpNetRuleDeleteObj=policyIpNetRuleDeleteObj, vlanLearnedVlanIdTable=vlanLearnedVlanIdTable, editTokenLastReleaseRspRetVal=editTokenLastReleaseRspRetVal, vlanPolicyConfigConfTimerValue=vlanPolicyConfigConfTimerValue, policyStackPortRuleEntry=policyStackPortRuleEntry, policyVlanCreateObj=policyVlanCreateObj, vlanLearnedMacVlanFlush=vlanLearnedMacVlanFlush, globalVlanConfigurationChange=globalVlanConfigurationChange, learnedVlanIdVlanName=learnedVlanIdVlanName, policyIslMacRuleAddress=policyIslMacRuleAddress, vlanPolicyMacVlanServerPriority=vlanPolicyMacVlanServerPriority, vlanLearnedServerExpiryTimer=vlanLearnedServerExpiryTimer, learnedMacVlanEntry=learnedMacVlanEntry, editTokenClientState=editTokenClientState, policyIpRuleAddress=policyIpRuleAddress, vlanPolicyDomainName=vlanPolicyDomainName, editTokenForceRelease=editTokenForceRelease, editTokenTakenTime=editTokenTakenTime, learnedVlanPortVlanName=learnedVlanPortVlanName, vlanLearnedServerMACAddress=vlanLearnedServerMACAddress, vlanPolicyIslMacRuleTable=vlanPolicyIslMacRuleTable, vlanPolicy=vlanPolicy, vlanPolicyChangeOperation=vlanPolicyChangeOperation, editTokenOwnerSnmpIpAddress=editTokenOwnerSnmpIpAddress, policyIpRuleDeleteObj=policyIpRuleDeleteObj, vlanLearnedServerState=vlanLearnedServerState, editTokenReleaseReq=editTokenReleaseReq, vlanPolicyStackPortRuleTable=vlanPolicyStackPortRuleTable, policyIpNetRuleVlanId=policyIpNetRuleVlanId, originatorIpAddress=originatorIpAddress, policyStackPortRuleDeleteObj=policyStackPortRuleDeleteObj, policyVlanEntry=policyVlanEntry, policyIpRuleEntry=policyIpRuleEntry, previousVlanDomainName=previousVlanDomainName, policyPortSettingsPortNumber=policyPortSettingsPortNumber, vlanPolicyUseMultiSTP=vlanPolicyUseMultiSTP, learnedVlanIdEntry=learnedVlanIdEntry, policyPortRuleEntry=policyPortRuleEntry, learnedMacType=learnedMacType, vlanParsingErrorText=vlanParsingErrorText, vlanPolicyAssignManagementVlan=vlanPolicyAssignManagementVlan, vlanPolicySupportedVlanModes=vlanPolicySupportedVlanModes, originatorSysName=originatorSysName, learnedMacIpAddress=learnedMacIpAddress, learnedMacVlanMac=learnedMacVlanMac, policyIpNetRuleAddress=policyIpNetRuleAddress, originatorMacAddress=originatorMacAddress, vlanPolicyIpRuleTable=vlanPolicyIpRuleTable, islMacAddress=islMacAddress, policyMacRuleEntry=policyMacRuleEntry, vlanEditToken=vlanEditToken, policyMacRuleCreateObj=policyMacRuleCreateObj, policyIslMacRuleDeleteObj=policyIslMacRuleDeleteObj, vlanPolicyClientSeqNo=vlanPolicyClientSeqNo, vlanLearnedVersion=vlanLearnedVersion, editTokenRequestFailed=editTokenRequestFailed, vlanLearnedSnmpMgtVlanIds=vlanLearnedSnmpMgtVlanIds, vlanLearnedServerPortNo=vlanLearnedServerPortNo, policyStackPortRuleSwitchMac=policyStackPortRuleSwitchMac, editTokenOwnerMacAddress=editTokenOwnerMacAddress, policyIpNetRuleMask=policyIpNetRuleMask, vlanPolicyNextVlanId=vlanPolicyNextVlanId, vlanLearnedDatabaseFull=vlanLearnedDatabaseFull, editTokenForceReleaseReq=editTokenForceReleaseReq, learnedMacPortNo=learnedMacPortNo, learnedVlanPortEntry=learnedVlanPortEntry, policyIpNetRuleCreateObj=policyIpNetRuleCreateObj, vlanLearnedVlanPortTable=vlanLearnedVlanPortTable, vlanPolicyMacRuleTable=vlanPolicyMacRuleTable, vlanParsingErrorNo=vlanParsingErrorNo, policyIpRuleVlanId=policyIpRuleVlanId, learnedMacVlanName=learnedMacVlanName, policyVlanDeleteObj=policyVlanDeleteObj, policyStackPortRuleVlanId=policyStackPortRuleVlanId, policyStackPortRuleNumber=policyStackPortRuleNumber, localConfigurationChange=localConfigurationChange, policyMacRuleVlanId=policyMacRuleVlanId, domainNameChange=domainNameChange, vlanLearnedMacTable=vlanLearnedMacTable, vlanLearned=vlanLearned, vlanPolicyVlanTable=vlanPolicyVlanTable, vlanPolicyConfigConfState=vlanPolicyConfigConfState, learnedVlanPortNo=learnedVlanPortNo, vlanPolicyPortRuleTable=vlanPolicyPortRuleTable, vlanLearnedServerPriority=vlanLearnedServerPriority, policyMacRuleDeleteObj=policyMacRuleDeleteObj, policyVlanId=policyVlanId, vlanPolicyChangedStamp=vlanPolicyChangedStamp, learnedVlanId=learnedVlanId, vlanTrapObjects=vlanTrapObjects, invalidVlanConfiguration=invalidVlanConfiguration, vlanPolicyMode=vlanPolicyMode, configConfirmFailed=configConfirmFailed, vlanPolicyServerSeqNo=vlanPolicyServerSeqNo, policyPortSettingsEntry=policyPortSettingsEntry, policyMacRuleAddress=policyMacRuleAddress, policyIpRuleCreateObj=policyIpRuleCreateObj, editTokenLastClaimRspRetVal=editTokenLastClaimRspRetVal, islIfIndex=islIfIndex, missingSwitchInDomain=missingSwitchInDomain, learnedMacEntry=learnedMacEntry, editTokenOwnerSysName=editTokenOwnerSysName, editTokenOwnerApplication=editTokenOwnerApplication, vlanPolicyRevert2Default=vlanPolicyRevert2Default, islIpAddress=islIpAddress, policyPortRuleVlanId=policyPortRuleVlanId, policyIslMacRuleEntry=policyIslMacRuleEntry, policyVlanName=policyVlanName, policyPortRuleDeleteObj=policyPortRuleDeleteObj, vlanPolicyAllPortSettingsIpLearning=vlanPolicyAllPortSettingsIpLearning, vlan=vlan, policyIpNetRuleEntry=policyIpNetRuleEntry, editTokenServerState=editTokenServerState, policyPortRuleNumber=policyPortRuleNumber, editTokenOwnerIpAddress=editTokenOwnerIpAddress, vlanPolicyPortSettingsTable=vlanPolicyPortSettingsTable, learnedMacVlanIndex=learnedMacVlanIndex, learnedMacAddress=learnedMacAddress, policyIslMacRuleCreateObj=policyIslMacRuleCreateObj, policyStackPortRuleCreateObj=policyStackPortRuleCreateObj, vlanLearnedServerIPAddress=vlanLearnedServerIPAddress)
