#
# PySNMP MIB module DGS-1210-48-AX (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/DGS-1210-48-AX
# Produced by pysmi-0.3.4 at Mon Apr 29 18:28:05 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, ObjectIdentifier, OctetString = mibBuilder.importSymbols("ASN1", "Integer", "ObjectIdentifier", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
SingleValueConstraint, ValueSizeConstraint, ConstraintsUnion, ConstraintsIntersection, ValueRangeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "SingleValueConstraint", "ValueSizeConstraint", "ConstraintsUnion", "ConstraintsIntersection", "ValueRangeConstraint")
dot1dBridge, dot1dBasePortEntry, dot1dBasePort = mibBuilder.importSymbols("BRIDGE-MIB", "dot1dBridge", "dot1dBasePortEntry", "dot1dBasePort")
InterfaceIndexOrZero, InterfaceIndex = mibBuilder.importSymbols("IF-MIB", "InterfaceIndexOrZero", "InterfaceIndex")
InetAddress, = mibBuilder.importSymbols("INET-ADDRESS-MIB", "InetAddress")
SnmpEngineID, SnmpSecurityLevel, SnmpAdminString = mibBuilder.importSymbols("SNMP-FRAMEWORK-MIB", "SnmpEngineID", "SnmpSecurityLevel", "SnmpAdminString")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
Integer32, ObjectIdentity, IpAddress, MibIdentifier, ModuleIdentity, Counter64, NotificationType, enterprises, Unsigned32, iso, MibScalar, MibTable, MibTableRow, MibTableColumn, Gauge32, TimeTicks, Bits, Counter32 = mibBuilder.importSymbols("SNMPv2-SMI", "Integer32", "ObjectIdentity", "IpAddress", "MibIdentifier", "ModuleIdentity", "Counter64", "NotificationType", "enterprises", "Unsigned32", "iso", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Gauge32", "TimeTicks", "Bits", "Counter32")
DisplayString, MacAddress, TruthValue, TextualConvention, RowStatus = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "MacAddress", "TruthValue", "TextualConvention", "RowStatus")
d_link = MibIdentifier((1, 3, 6, 1, 4, 1, 171)).setLabel("d-link")
dlink_products = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10)).setLabel("dlink-products")
dlink_DGS1210SeriesProd = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 76)).setLabel("dlink-DGS1210SeriesProd")
dgs_1210_48ax = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 76, 11)).setLabel("dgs-1210-48ax")
class VlanIndex(TextualConvention, Unsigned32):
    status = 'current'

class PortList(TextualConvention, OctetString):
    status = 'current'

class BridgeId(TextualConvention, OctetString):
    status = 'current'
    subtypeSpec = OctetString.subtypeSpec + ValueSizeConstraint(8, 8)
    fixedLength = 8

class Timeout(TextualConvention, Integer32):
    status = 'current'
    displayHint = 'd4'

companySystem = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 76, 11, 1))
companyIpifGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 76, 11, 2))
companyTftpGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 76, 11, 3))
companyMiscGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 76, 11, 4))
companyRSTP = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 76, 11, 6))
companyDot1qVlanGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 76, 11, 7))
companyLA = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 76, 11, 8))
companyStaticMAC = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 76, 11, 9))
companyIgsGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 76, 11, 10))
companyDot1xGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 76, 11, 11))
companyQoSGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 76, 11, 12))
companyTrafficMgmt = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 76, 11, 13))
companySecurity = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 76, 11, 14))
companyACLGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 76, 11, 15))
companySyslog = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 76, 11, 16))
companyLBD = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 76, 11, 17))
companyMirror = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 76, 11, 18))
companyTrapSetting = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 76, 11, 19))
companySNTPSetting = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 76, 11, 20))
companyVoiceVlan = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 76, 11, 21))
companySNMPV3 = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 76, 11, 25))
companyAutoSurveillanceVlan = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 76, 11, 26))
companyTraps = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 76, 11, 27))
sysSwitchName = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 11, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 20))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysSwitchName.setStatus('current')
sysHardwareVersion = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 11, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 15))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysHardwareVersion.setStatus('current')
sysFirmwareVersion = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 11, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 15))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysFirmwareVersion.setStatus('current')
sysLoginTimeoutInterval = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 11, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(3, 30)).clone(5)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysLoginTimeoutInterval.setStatus('current')
sysLocationName = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 11, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 20))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysLocationName.setStatus('current')
sysGroupInterval = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 11, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(120, 1225), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysGroupInterval.setStatus('current')
sysSystemPassword = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 11, 1, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 20))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysSystemPassword.setStatus('current')
sysSafeGuardEnable = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 11, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('enable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysSafeGuardEnable.setStatus('current')
sysRestart = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 11, 1, 9), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysRestart.setStatus('current')
sysSave = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 11, 1, 10), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysSave.setStatus('current')
sysPowerSavingEnable = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 11, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('enable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysPowerSavingEnable.setStatus('current')
sysJumboFrameEnable = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 11, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysJumboFrameEnable.setStatus('current')
sysPortCtrlTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 76, 11, 1, 13), )
if mibBuilder.loadTexts: sysPortCtrlTable.setStatus('current')
sysPortCtrlEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 76, 11, 1, 13, 1), ).setIndexNames((0, "DGS-1210-48-AX", "sysPortCtrlIndex"))
if mibBuilder.loadTexts: sysPortCtrlEntry.setStatus('current')
sysPortCtrlIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 11, 1, 13, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysPortCtrlIndex.setStatus('current')
sysPortCtrlSpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 11, 1, 13, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("rate1000M-Full", 1), ("rate100M-Full", 2), ("rate100M-Half", 3), ("rate10M-Full", 4), ("rate10M-Half", 5), ("auto", 6), ("disable", 7)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysPortCtrlSpeed.setStatus('current')
sysPortCtrlOperStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 11, 1, 13, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("down", 1), ("rate1000M-Full", 2), ("rate100M-Full", 3), ("rate100M-Half", 4), ("rate10M-Full", 5), ("rate10M-Half", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysPortCtrlOperStatus.setStatus('current')
sysPortCtrlMDI = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 11, 1, 13, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("auto", 1), ("mdi", 2), ("mdix", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysPortCtrlMDI.setStatus('current')
sysPortCtrlFlowControl = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 11, 1, 13, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysPortCtrlFlowControl.setStatus('current')
sysPortCtrlFlowControlOper = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 11, 1, 13, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysPortCtrlFlowControlOper.setStatus('current')
sysPortCtrlType = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 11, 1, 13, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("fastethernet", 1), ("gigabitethernet", 2), ("fiberwith100BaseSFPModule", 3), ("fiberwith1000BaseSFPModule", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysPortCtrlType.setStatus('current')
sysDhcpAutoConfiguration = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 11, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysDhcpAutoConfiguration.setStatus('current')
sysGPIOStatus = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 76, 11, 1, 15))
sysFanStatus = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 11, 1, 15, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("normal", 1), ("failure", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysFanStatus.setStatus('current')
sysIpAddrCfgMode = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 11, 2, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("manual", 1), ("dynamic", 2))).clone('manual')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysIpAddrCfgMode.setStatus('current')
sysIpAddr = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 11, 2, 2), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysIpAddr.setStatus('current')
sysIpSubnetMask = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 11, 2, 3), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysIpSubnetMask.setStatus('current')
sysGateway = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 11, 2, 4), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysGateway.setStatus('current')
tftpFwServerIpAddress = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 11, 3, 1), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tftpFwServerIpAddress.setStatus('current')
tftpFwImageFileName = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 11, 3, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 64))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tftpFwImageFileName.setStatus('current')
tftpFwTftpOperation = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 11, 3, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("none", 0), ("download", 1), ("upload", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tftpFwTftpOperation.setStatus('current')
tftpFwTftpOperationStatus = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 11, 3, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4))).clone(namedValues=NamedValues(("none", 0), ("success", 1), ("fail", 2), ("progressing", 3), ("transmit", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tftpFwTftpOperationStatus.setStatus('current')
tftpCfgServerIpAddress = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 11, 3, 5), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tftpCfgServerIpAddress.setStatus('current')
tftpConfigFileName = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 11, 3, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 64))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tftpConfigFileName.setStatus('current')
tftpConfigTftpOperation = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 11, 3, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("download", 1), ("upload", 2), ("progressing", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tftpConfigTftpOperation.setStatus('current')
tftpConfigTftpOperationStatus = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 11, 3, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("none", 0), ("success", 1), ("fail", 2), ("progressing", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tftpConfigTftpOperationStatus.setStatus('current')
miscReset = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 11, 4, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("reset", 1), ("noop", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: miscReset.setStatus('current')
miscStatisticsReset = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 11, 4, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("reset", 1), ("noop", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: miscStatisticsReset.setStatus('current')
stpGlobal = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 76, 11, 6, 1))
rstpStatus = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 11, 6, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rstpStatus.setStatus('current')
stpVersion = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 11, 6, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 2))).clone(namedValues=NamedValues(("stpCompatible", 0), ("rstp", 2))).clone('rstp')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: stpVersion.setStatus('current')
stpPriority = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 11, 6, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 61440))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: stpPriority.setStatus('current')
stpTxHoldCount = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 11, 6, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 10)).clone(6)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: stpTxHoldCount.setStatus('current')
stpProtocolSpecification = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 11, 6, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("unknown", 1), ("decLb100", 2), ("ieee8021d", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: stpProtocolSpecification.setStatus('current')
stpTimeSinceTopologyChange = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 11, 6, 1, 6), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stpTimeSinceTopologyChange.setStatus('current')
stpTopChanges = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 11, 6, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stpTopChanges.setStatus('current')
stpDesignatedRoot = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 11, 6, 1, 8), BridgeId()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stpDesignatedRoot.setStatus('current')
stpRootCost = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 11, 6, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stpRootCost.setStatus('current')
stpRootPort = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 11, 6, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stpRootPort.setStatus('current')
stpMaxAge = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 11, 6, 1, 11), Timeout()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stpMaxAge.setStatus('current')
stpHelloTime = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 11, 6, 1, 12), Timeout()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stpHelloTime.setStatus('current')
stpHoldTime = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 11, 6, 1, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stpHoldTime.setStatus('current')
stpForwardDelay = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 11, 6, 1, 14), Timeout()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stpForwardDelay.setStatus('current')
stpBridgeMaxAge = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 11, 6, 1, 15), Timeout().subtype(subtypeSpec=ValueRangeConstraint(600, 4000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: stpBridgeMaxAge.setStatus('current')
stpBridgeHelloTime = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 11, 6, 1, 16), Timeout().subtype(subtypeSpec=ValueRangeConstraint(100, 1000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: stpBridgeHelloTime.setStatus('current')
stpBridgeForwardDelay = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 11, 6, 1, 17), Timeout().subtype(subtypeSpec=ValueRangeConstraint(400, 3000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: stpBridgeForwardDelay.setStatus('current')
stpPortTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 76, 11, 6, 2), )
if mibBuilder.loadTexts: stpPortTable.setStatus('current')
stpPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 76, 11, 6, 2, 1), ).setIndexNames((0, "DGS-1210-48-AX", "stpPort"))
if mibBuilder.loadTexts: stpPortEntry.setStatus('current')
stpPort = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 11, 6, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: stpPort.setStatus('current')
stpPortPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 11, 6, 2, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 240))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: stpPortPriority.setStatus('current')
stpPortState = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 11, 6, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("disabled", 1), ("blocking", 2), ("listening", 3), ("learning", 4), ("forwarding", 5), ("broken", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: stpPortState.setStatus('current')
stpPortEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 11, 6, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: stpPortEnable.setStatus('current')
stpAdminPortPathCost = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 11, 6, 2, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 200000000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: stpAdminPortPathCost.setStatus('current')
stpPortPathCost = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 11, 6, 2, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 200000000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: stpPortPathCost.setStatus('current')
stpPortDesignatedRoot = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 11, 6, 2, 1, 7), BridgeId()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stpPortDesignatedRoot.setStatus('current')
stpPortDesignatedCost = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 11, 6, 2, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stpPortDesignatedCost.setStatus('current')
stpPortDesignatedBridge = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 11, 6, 2, 1, 9), BridgeId()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stpPortDesignatedBridge.setStatus('current')
stpPortDesignatedPort = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 11, 6, 2, 1, 10), OctetString().subtype(subtypeSpec=ValueSizeConstraint(2, 2)).setFixedLength(2)).setMaxAccess("readonly")
if mibBuilder.loadTexts: stpPortDesignatedPort.setStatus('current')
stpPortForwardTransitions = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 11, 6, 2, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stpPortForwardTransitions.setStatus('current')
stpPortProtocolMigration = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 11, 6, 2, 1, 12), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: stpPortProtocolMigration.setStatus('current')
stpPortOperEdgePort = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 11, 6, 2, 1, 13), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stpPortOperEdgePort.setStatus('current')
stpPortAdminPointToPoint = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 11, 6, 2, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("forceTrue", 0), ("forceFalse", 1), ("auto", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: stpPortAdminPointToPoint.setStatus('current')
stpPortOperPointToPoint = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 11, 6, 2, 1, 15), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stpPortOperPointToPoint.setStatus('current')
stpPortEdge = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 11, 6, 2, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 0, 2))).clone(namedValues=NamedValues(("true", 1), ("false", 0), ("auto", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: stpPortEdge.setStatus('current')
stpPortRestrictedRole = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 11, 6, 2, 1, 17), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: stpPortRestrictedRole.setStatus('current')
stpPortRestrictedTCN = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 11, 6, 2, 1, 18), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: stpPortRestrictedTCN.setStatus('current')
dot1qVlanManagementOnOff = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 11, 7, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dot1qVlanManagementOnOff.setStatus('current')
dot1qVlanManagementid = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 11, 7, 3), Integer32().clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dot1qVlanManagementid.setStatus('current')
dot1qVlanAsyOnOff = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 11, 7, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dot1qVlanAsyOnOff.setStatus('current')
dot1qVlanTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 76, 11, 7, 6), )
if mibBuilder.loadTexts: dot1qVlanTable.setStatus('current')
dot1qVlanEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 76, 11, 7, 6, 1), ).setIndexNames((0, "DGS-1210-48-AX", "dot1qVlanName"))
if mibBuilder.loadTexts: dot1qVlanEntry.setStatus('current')
dot1qVlanName = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 11, 7, 6, 1, 1), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: dot1qVlanName.setStatus('current')
dot1qVlanEgressPorts = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 11, 7, 6, 1, 2), PortList()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: dot1qVlanEgressPorts.setStatus('current')
dot1qVlanForbiddenPorts = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 11, 7, 6, 1, 3), PortList()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot1qVlanForbiddenPorts.setStatus('current')
dot1qVlanUntaggedPorts = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 11, 7, 6, 1, 4), PortList()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: dot1qVlanUntaggedPorts.setStatus('current')
dot1qVlanRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 11, 7, 6, 1, 5), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: dot1qVlanRowStatus.setStatus('current')
dot1qVlanPortTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 76, 11, 7, 7), )
if mibBuilder.loadTexts: dot1qVlanPortTable.setStatus('current')
dot1qVlanPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 76, 11, 7, 7, 1), )
dot1dBasePortEntry.registerAugmentions(("DGS-1210-48-AX", "dot1qVlanPortEntry"))
dot1qVlanPortEntry.setIndexNames(*dot1dBasePortEntry.getIndexNames())
if mibBuilder.loadTexts: dot1qVlanPortEntry.setStatus('current')
dot1qVlanPvid = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 11, 7, 7, 1, 1), VlanIndex().clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dot1qVlanPvid.setStatus('current')
dot1qVlanUngisterMCFilterTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 76, 11, 7, 8), )
if mibBuilder.loadTexts: dot1qVlanUngisterMCFilterTable.setStatus('current')
dot1qVlanUngisterMCFilterEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 76, 11, 7, 8, 1), ).setIndexNames((0, "DGS-1210-48-AX", "dot1qVlanUngisterMCFilterVlanId"))
if mibBuilder.loadTexts: dot1qVlanUngisterMCFilterEntry.setStatus('current')
dot1qVlanUngisterMCFilterVlanId = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 11, 7, 8, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4094))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot1qVlanUngisterMCFilterVlanId.setStatus('current')
dot1qVlanUngisterMCFiltermode = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 11, 7, 8, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 0))).clone(namedValues=NamedValues(("filter", 1), ("forward", 0)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dot1qVlanUngisterMCFiltermode.setStatus('current')
laSystem = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 76, 11, 8, 1))
laPortControl = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 76, 11, 8, 2))
class PortLaMode(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3))
    namedValues = NamedValues(("lacp", 1), ("static", 2), ("disable", 3))

class LacpKey(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ValueRangeConstraint(0, 65535)

laStatus = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 11, 8, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: laStatus.setStatus('current')
laPortChannelTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 76, 11, 8, 1, 3), )
if mibBuilder.loadTexts: laPortChannelTable.setStatus('current')
laPortChannelEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 76, 11, 8, 1, 3, 1), ).setIndexNames((0, "DGS-1210-48-AX", "laPortChannelIfIndex"))
if mibBuilder.loadTexts: laPortChannelEntry.setStatus('current')
laPortChannelIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 11, 8, 1, 3, 1, 1), InterfaceIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: laPortChannelIfIndex.setStatus('current')
laPortChannelMemberList = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 11, 8, 1, 3, 1, 2), PortList()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: laPortChannelMemberList.setStatus('current')
laPortChannelMode = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 11, 8, 1, 3, 1, 3), PortLaMode()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: laPortChannelMode.setStatus('current')
laPortControlTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 76, 11, 8, 2, 1), )
if mibBuilder.loadTexts: laPortControlTable.setStatus('current')
laPortControlEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 76, 11, 8, 2, 1, 1), ).setIndexNames((0, "DGS-1210-48-AX", "laPortControlIndex"))
if mibBuilder.loadTexts: laPortControlEntry.setStatus('current')
laPortControlIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 11, 8, 2, 1, 1, 1), InterfaceIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: laPortControlIndex.setStatus('current')
laPortActorPortPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 11, 8, 2, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: laPortActorPortPriority.setStatus('current')
laPortActorActivity = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 11, 8, 2, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("active", 1), ("passive", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: laPortActorActivity.setStatus('current')
laPortActorTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 11, 8, 2, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("short", 1), ("long", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: laPortActorTimeout.setStatus('current')
staticDisableAutoLearn = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 11, 9, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("on", 1), ("off", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: staticDisableAutoLearn.setStatus('current')
staticAutoLearningList = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 11, 9, 2), PortList()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: staticAutoLearningList.setStatus('current')
staticTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 76, 11, 9, 3), )
if mibBuilder.loadTexts: staticTable.setStatus('current')
staticEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 76, 11, 9, 3, 1), ).setIndexNames((0, "DGS-1210-48-AX", "staticVlanID"), (0, "DGS-1210-48-AX", "staticMac"), (0, "DGS-1210-48-AX", "staticPort"))
if mibBuilder.loadTexts: staticEntry.setStatus('current')
staticVlanID = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 11, 9, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staticVlanID.setStatus('current')
staticMac = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 11, 9, 3, 1, 2), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staticMac.setStatus('current')
staticPort = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 11, 9, 3, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staticPort.setStatus('current')
staticStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 11, 9, 3, 1, 4), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: staticStatus.setStatus('current')
igsSystem = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 76, 11, 10, 1))
igsVlan = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 76, 11, 10, 3))
igsStatus = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 11, 10, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone(2)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: igsStatus.setStatus('current')
igsRouterPortPurgeInterval = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 11, 10, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(60, 600)).clone(260)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: igsRouterPortPurgeInterval.setStatus('current')
igsHostPortPurgeInterval = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 11, 10, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(130, 153025)).clone(260)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: igsHostPortPurgeInterval.setStatus('current')
igsRobustnessValue = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 11, 10, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(2, 255)).clone(2)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: igsRobustnessValue.setStatus('current')
igsGrpQueryInterval = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 11, 10, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 25)).clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: igsGrpQueryInterval.setStatus('current')
igsQueryInterval = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 11, 10, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(60, 600)).clone(125)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: igsQueryInterval.setStatus('current')
igsQueryMaxResponseTime = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 11, 10, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(10, 25)).clone(10)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: igsQueryMaxResponseTime.setStatus('current')
igsVlanRouterTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 76, 11, 10, 3, 3), )
if mibBuilder.loadTexts: igsVlanRouterTable.setStatus('current')
igsVlanRouterEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 76, 11, 10, 3, 3, 1), ).setIndexNames((0, "DGS-1210-48-AX", "igsVlanRouterVlanId"))
if mibBuilder.loadTexts: igsVlanRouterEntry.setStatus('current')
igsVlanRouterVlanId = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 11, 10, 3, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4094))).setMaxAccess("readonly")
if mibBuilder.loadTexts: igsVlanRouterVlanId.setStatus('current')
igsVlanRouterPortList = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 11, 10, 3, 3, 1, 2), PortList()).setMaxAccess("readonly")
if mibBuilder.loadTexts: igsVlanRouterPortList.setStatus('current')
igsVlanFilterTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 76, 11, 10, 3, 4), )
if mibBuilder.loadTexts: igsVlanFilterTable.setStatus('current')
igsVlanFilterEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 76, 11, 10, 3, 4, 1), ).setIndexNames((0, "DGS-1210-48-AX", "igsVlanFilterVlanId"))
if mibBuilder.loadTexts: igsVlanFilterEntry.setStatus('current')
igsVlanFilterVlanId = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 11, 10, 3, 4, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4094))).setMaxAccess("readonly")
if mibBuilder.loadTexts: igsVlanFilterVlanId.setStatus('current')
igsVlanSnoopStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 11, 10, 3, 4, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: igsVlanSnoopStatus.setStatus('current')
igsVlanQuerier = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 11, 10, 3, 4, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone(2)).setMaxAccess("readonly")
if mibBuilder.loadTexts: igsVlanQuerier.setStatus('current')
igsVlanCfgQuerier = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 11, 10, 3, 4, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone(2)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: igsVlanCfgQuerier.setStatus('current')
igsVlanQueryInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 11, 10, 3, 4, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(60, 600)).clone(125)).setMaxAccess("readonly")
if mibBuilder.loadTexts: igsVlanQueryInterval.setStatus('current')
igsVlanRtrPortList = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 11, 10, 3, 4, 1, 6), PortList()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: igsVlanRtrPortList.setStatus('current')
igsVlanMulticastGroupTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 76, 11, 10, 3, 5), )
if mibBuilder.loadTexts: igsVlanMulticastGroupTable.setStatus('current')
igsVlanMulticastGroupEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 76, 11, 10, 3, 5, 1), ).setIndexNames((0, "DGS-1210-48-AX", "igsVlanMulticastGroupVlanId"), (0, "DGS-1210-48-AX", "igsVlanMulticastGroupIpAddress"))
if mibBuilder.loadTexts: igsVlanMulticastGroupEntry.setStatus('current')
igsVlanMulticastGroupVlanId = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 11, 10, 3, 5, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4094))).setMaxAccess("readonly")
if mibBuilder.loadTexts: igsVlanMulticastGroupVlanId.setStatus('current')
igsVlanMulticastGroupIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 11, 10, 3, 5, 1, 2), InetAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: igsVlanMulticastGroupIpAddress.setStatus('current')
igsVlanMulticastGroupMacAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 11, 10, 3, 5, 1, 3), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: igsVlanMulticastGroupMacAddress.setStatus('current')
igsVlanMulticastGroupPortList = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 11, 10, 3, 5, 1, 4), PortList()).setMaxAccess("readonly")
if mibBuilder.loadTexts: igsVlanMulticastGroupPortList.setStatus('current')
radius = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 76, 11, 11, 1))
radiusServerAddress = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 11, 11, 1, 1), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: radiusServerAddress.setStatus('current')
radiusServerSharedSecret = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 11, 11, 1, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: radiusServerSharedSecret.setStatus('current')
dot1xAuth = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 76, 11, 11, 2))
dot1xAuthStatus = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 11, 11, 2, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dot1xAuthStatus.setStatus('current')
dot1xAuthQuietPeriod = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 11, 11, 2, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535)).clone(60)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dot1xAuthQuietPeriod.setStatus('current')
dot1xAuthTxPeriod = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 11, 11, 2, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535)).clone(24)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dot1xAuthTxPeriod.setStatus('current')
dot1xAuthSuppTimeout = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 11, 11, 2, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535)).clone(12)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dot1xAuthSuppTimeout.setStatus('current')
dot1xAuthServerTimeout = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 11, 11, 2, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535)).clone(16)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dot1xAuthServerTimeout.setStatus('current')
dot1xAuthMaxReq = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 11, 11, 2, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 10)).clone(2)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dot1xAuthMaxReq.setStatus('current')
dot1xAuthReAuthPeriod = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 11, 11, 2, 7), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 4294967295)).clone(3600)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dot1xAuthReAuthPeriod.setStatus('current')
dot1xAuthReAuthEnabled = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 11, 11, 2, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dot1xAuthReAuthEnabled.setStatus('current')
dot1xAuthConfigPortTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 76, 11, 11, 2, 9), )
if mibBuilder.loadTexts: dot1xAuthConfigPortTable.setStatus('current')
dot1xAuthConfigPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 76, 11, 11, 2, 9, 1), ).setIndexNames((0, "DGS-1210-48-AX", "dot1xAuthConfigPortNumber"))
if mibBuilder.loadTexts: dot1xAuthConfigPortEntry.setStatus('current')
dot1xAuthConfigPortNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 11, 11, 2, 9, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot1xAuthConfigPortNumber.setStatus('current')
dot1xAuthConfigPortControl = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 11, 11, 2, 9, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("forceUnauthorized", 1), ("auto", 2), ("forceAuthorized", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dot1xAuthConfigPortControl.setStatus('current')
dot1xAuthConfigPortStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 11, 11, 2, 9, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("authorized", 1), ("unauthorized", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot1xAuthConfigPortStatus.setStatus('current')
dot1xAuthConfigPortSessionTime = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 11, 11, 2, 9, 1, 4), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot1xAuthConfigPortSessionTime.setStatus('current')
dot1xAuthConfigPortSessionUserName = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 11, 11, 2, 9, 1, 5), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot1xAuthConfigPortSessionUserName.setStatus('current')
qosMode = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 11, 12, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("dot1p", 1), ("dscp", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qosMode.setStatus('current')
queuingMechanism = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 11, 12, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("strictPriority", 1), ("wrr", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: queuingMechanism.setStatus('current')
qosQ1p = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 76, 11, 12, 3))
dot1pPortTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 76, 11, 12, 3, 1), )
if mibBuilder.loadTexts: dot1pPortTable.setStatus('current')
dot1pPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 76, 11, 12, 3, 1, 1), ).setIndexNames((0, "DGS-1210-48-AX", "dot1pPortIndex"))
if mibBuilder.loadTexts: dot1pPortEntry.setStatus('current')
dot1pPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 11, 12, 3, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot1pPortIndex.setStatus('current')
dot1pPortPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 11, 12, 3, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("low", 1), ("medium", 2), ("high", 3), ("highest", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dot1pPortPriority.setStatus('current')
qosDiffServ = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 76, 11, 12, 4))
qosDiffServEnable = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 11, 12, 4, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: qosDiffServEnable.setStatus('current')
qosDiffServTypeGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 76, 11, 12, 4, 2))
qosDiffServType00 = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 11, 12, 4, 2, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("low", 0), ("medium", 1), ("high", 2), ("highest", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qosDiffServType00.setStatus('current')
qosDiffServType01 = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 11, 12, 4, 2, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("low", 0), ("medium", 1), ("high", 2), ("highest", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qosDiffServType01.setStatus('current')
qosDiffServType02 = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 11, 12, 4, 2, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("low", 0), ("medium", 1), ("high", 2), ("highest", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qosDiffServType02.setStatus('current')
qosDiffServType03 = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 11, 12, 4, 2, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("low", 0), ("medium", 1), ("high", 2), ("highest", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qosDiffServType03.setStatus('current')
qosDiffServType04 = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 11, 12, 4, 2, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("low", 0), ("medium", 1), ("high", 2), ("highest", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qosDiffServType04.setStatus('current')
qosDiffServType05 = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 11, 12, 4, 2, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("low", 0), ("medium", 1), ("high", 2), ("highest", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qosDiffServType05.setStatus('current')
qosDiffServType06 = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 11, 12, 4, 2, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("low", 0), ("medium", 1), ("high", 2), ("highest", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qosDiffServType06.setStatus('current')
qosDiffServType07 = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 11, 12, 4, 2, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("low", 0), ("medium", 1), ("high", 2), ("highest", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qosDiffServType07.setStatus('current')
qosDiffServType08 = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 11, 12, 4, 2, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("low", 0), ("medium", 1), ("high", 2), ("highest", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qosDiffServType08.setStatus('current')
qosDiffServType09 = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 11, 12, 4, 2, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("low", 0), ("medium", 1), ("high", 2), ("highest", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qosDiffServType09.setStatus('current')
qosDiffServType10 = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 11, 12, 4, 2, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("low", 0), ("medium", 1), ("high", 2), ("highest", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qosDiffServType10.setStatus('current')
qosDiffServType11 = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 11, 12, 4, 2, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("low", 0), ("medium", 1), ("high", 2), ("highest", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qosDiffServType11.setStatus('current')
qosDiffServType12 = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 11, 12, 4, 2, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("low", 0), ("medium", 1), ("high", 2), ("highest", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qosDiffServType12.setStatus('current')
qosDiffServType13 = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 11, 12, 4, 2, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("low", 0), ("medium", 1), ("high", 2), ("highest", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qosDiffServType13.setStatus('current')
qosDiffServType14 = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 11, 12, 4, 2, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("low", 0), ("medium", 1), ("high", 2), ("highest", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qosDiffServType14.setStatus('current')
qosDiffServType15 = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 11, 12, 4, 2, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("low", 0), ("medium", 1), ("high", 2), ("highest", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qosDiffServType15.setStatus('current')
qosDiffServType16 = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 11, 12, 4, 2, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("low", 0), ("medium", 1), ("high", 2), ("highest", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qosDiffServType16.setStatus('current')
qosDiffServType17 = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 11, 12, 4, 2, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("low", 0), ("medium", 1), ("high", 2), ("highest", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qosDiffServType17.setStatus('current')
qosDiffServType18 = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 11, 12, 4, 2, 19), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("low", 0), ("medium", 1), ("high", 2), ("highest", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qosDiffServType18.setStatus('current')
qosDiffServType19 = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 11, 12, 4, 2, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("low", 0), ("medium", 1), ("high", 2), ("highest", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qosDiffServType19.setStatus('current')
qosDiffServType20 = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 11, 12, 4, 2, 21), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("low", 0), ("medium", 1), ("high", 2), ("highest", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qosDiffServType20.setStatus('current')
qosDiffServType21 = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 11, 12, 4, 2, 22), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("low", 0), ("medium", 1), ("high", 2), ("highest", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qosDiffServType21.setStatus('current')
qosDiffServType22 = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 11, 12, 4, 2, 23), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("low", 0), ("medium", 1), ("high", 2), ("highest", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qosDiffServType22.setStatus('current')
qosDiffServType23 = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 11, 12, 4, 2, 24), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("low", 0), ("medium", 1), ("high", 2), ("highest", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qosDiffServType23.setStatus('current')
qosDiffServType24 = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 11, 12, 4, 2, 25), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("low", 0), ("medium", 1), ("high", 2), ("highest", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qosDiffServType24.setStatus('current')
qosDiffServType25 = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 11, 12, 4, 2, 26), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("low", 0), ("medium", 1), ("high", 2), ("highest", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qosDiffServType25.setStatus('current')
qosDiffServType26 = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 11, 12, 4, 2, 27), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("low", 0), ("medium", 1), ("high", 2), ("highest", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qosDiffServType26.setStatus('current')
qosDiffServType27 = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 11, 12, 4, 2, 28), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("low", 0), ("medium", 1), ("high", 2), ("highest", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qosDiffServType27.setStatus('current')
qosDiffServType28 = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 11, 12, 4, 2, 29), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("low", 0), ("medium", 1), ("high", 2), ("highest", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qosDiffServType28.setStatus('current')
qosDiffServType29 = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 11, 12, 4, 2, 30), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("low", 0), ("medium", 1), ("high", 2), ("highest", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qosDiffServType29.setStatus('current')
qosDiffServType30 = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 11, 12, 4, 2, 31), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("low", 0), ("medium", 1), ("high", 2), ("highest", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qosDiffServType30.setStatus('current')
qosDiffServType31 = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 11, 12, 4, 2, 32), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("low", 0), ("medium", 1), ("high", 2), ("highest", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qosDiffServType31.setStatus('current')
qosDiffServType32 = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 11, 12, 4, 2, 33), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("low", 0), ("medium", 1), ("high", 2), ("highest", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qosDiffServType32.setStatus('current')
qosDiffServType33 = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 11, 12, 4, 2, 34), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("low", 0), ("medium", 1), ("high", 2), ("highest", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qosDiffServType33.setStatus('current')
qosDiffServType34 = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 11, 12, 4, 2, 35), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("low", 0), ("medium", 1), ("high", 2), ("highest", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qosDiffServType34.setStatus('current')
qosDiffServType35 = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 11, 12, 4, 2, 36), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("low", 0), ("medium", 1), ("high", 2), ("highest", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qosDiffServType35.setStatus('current')
qosDiffServType36 = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 11, 12, 4, 2, 37), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("low", 0), ("medium", 1), ("high", 2), ("highest", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qosDiffServType36.setStatus('current')
qosDiffServType37 = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 11, 12, 4, 2, 38), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("low", 0), ("medium", 1), ("high", 2), ("highest", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qosDiffServType37.setStatus('current')
qosDiffServType38 = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 11, 12, 4, 2, 39), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("low", 0), ("medium", 1), ("high", 2), ("highest", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qosDiffServType38.setStatus('current')
qosDiffServType39 = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 11, 12, 4, 2, 40), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("low", 0), ("medium", 1), ("high", 2), ("highest", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qosDiffServType39.setStatus('current')
qosDiffServType40 = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 11, 12, 4, 2, 41), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("low", 0), ("medium", 1), ("high", 2), ("highest", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qosDiffServType40.setStatus('current')
qosDiffServType41 = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 11, 12, 4, 2, 42), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("low", 0), ("medium", 1), ("high", 2), ("highest", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qosDiffServType41.setStatus('current')
qosDiffServType42 = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 11, 12, 4, 2, 43), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("low", 0), ("medium", 1), ("high", 2), ("highest", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qosDiffServType42.setStatus('current')
qosDiffServType43 = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 11, 12, 4, 2, 44), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("low", 0), ("medium", 1), ("high", 2), ("highest", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qosDiffServType43.setStatus('current')
qosDiffServType44 = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 11, 12, 4, 2, 45), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("low", 0), ("medium", 1), ("high", 2), ("highest", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qosDiffServType44.setStatus('current')
qosDiffServType45 = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 11, 12, 4, 2, 46), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("low", 0), ("medium", 1), ("high", 2), ("highest", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qosDiffServType45.setStatus('current')
qosDiffServType46 = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 11, 12, 4, 2, 47), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("low", 0), ("medium", 1), ("high", 2), ("highest", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qosDiffServType46.setStatus('current')
qosDiffServType47 = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 11, 12, 4, 2, 48), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("low", 0), ("medium", 1), ("high", 2), ("highest", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qosDiffServType47.setStatus('current')
qosDiffServType48 = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 11, 12, 4, 2, 49), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("low", 0), ("medium", 1), ("high", 2), ("highest", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qosDiffServType48.setStatus('current')
qosDiffServType49 = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 11, 12, 4, 2, 50), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("low", 0), ("medium", 1), ("high", 2), ("highest", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qosDiffServType49.setStatus('current')
qosDiffServType50 = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 11, 12, 4, 2, 51), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("low", 0), ("medium", 1), ("high", 2), ("highest", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qosDiffServType50.setStatus('current')
qosDiffServType51 = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 11, 12, 4, 2, 52), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("low", 0), ("medium", 1), ("high", 2), ("highest", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qosDiffServType51.setStatus('current')
qosDiffServType52 = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 11, 12, 4, 2, 53), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("low", 0), ("medium", 1), ("high", 2), ("highest", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qosDiffServType52.setStatus('current')
qosDiffServType53 = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 11, 12, 4, 2, 54), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("low", 0), ("medium", 1), ("high", 2), ("highest", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qosDiffServType53.setStatus('current')
qosDiffServType54 = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 11, 12, 4, 2, 55), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("low", 0), ("medium", 1), ("high", 2), ("highest", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qosDiffServType54.setStatus('current')
qosDiffServType55 = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 11, 12, 4, 2, 56), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("low", 0), ("medium", 1), ("high", 2), ("highest", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qosDiffServType55.setStatus('current')
qosDiffServType56 = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 11, 12, 4, 2, 57), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("low", 0), ("medium", 1), ("high", 2), ("highest", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qosDiffServType56.setStatus('current')
qosDiffServType57 = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 11, 12, 4, 2, 58), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("low", 0), ("medium", 1), ("high", 2), ("highest", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qosDiffServType57.setStatus('current')
qosDiffServType58 = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 11, 12, 4, 2, 59), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("low", 0), ("medium", 1), ("high", 2), ("highest", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qosDiffServType58.setStatus('current')
qosDiffServType59 = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 11, 12, 4, 2, 60), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("low", 0), ("medium", 1), ("high", 2), ("highest", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qosDiffServType59.setStatus('current')
qosDiffServType60 = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 11, 12, 4, 2, 61), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("low", 0), ("medium", 1), ("high", 2), ("highest", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qosDiffServType60.setStatus('current')
qosDiffServType61 = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 11, 12, 4, 2, 62), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("low", 0), ("medium", 1), ("high", 2), ("highest", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qosDiffServType61.setStatus('current')
qosDiffServType62 = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 11, 12, 4, 2, 63), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("low", 0), ("medium", 1), ("high", 2), ("highest", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qosDiffServType62.setStatus('current')
qosDiffServType63 = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 11, 12, 4, 2, 64), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("low", 0), ("medium", 1), ("high", 2), ("highest", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qosDiffServType63.setStatus('current')
bandwidthCtrlSettings = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 76, 11, 13, 1))
bandwidthCtrlTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 76, 11, 13, 1, 2), )
if mibBuilder.loadTexts: bandwidthCtrlTable.setStatus('current')
bandwidthCtrlEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 76, 11, 13, 1, 2, 1), ).setIndexNames((0, "DGS-1210-48-AX", "bandwidthCtrlIndex"))
if mibBuilder.loadTexts: bandwidthCtrlEntry.setStatus('current')
bandwidthCtrlIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 11, 13, 1, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bandwidthCtrlIndex.setStatus('current')
bandwidthCtrlTxThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 11, 13, 1, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(64, 1024000), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bandwidthCtrlTxThreshold.setStatus('current')
bandwidthCtrlRxThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 11, 13, 1, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(64, 1024000), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bandwidthCtrlRxThreshold.setStatus('current')
broadcastStormCtrlSettings = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 76, 11, 13, 3))
broadcastStormCtrlGlobalOnOff = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 11, 13, 3, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: broadcastStormCtrlGlobalOnOff.setStatus('current')
broadcastStormCtrlLimitType = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 11, 13, 3, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("broadcastonly", 1), ("multicastAndbroadcast", 2), ("dlfMulticastAndbroadcast", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: broadcastStormCtrlLimitType.setStatus('current')
broadcastStormCtrlThreshold = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 11, 13, 3, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(64, 1024000), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: broadcastStormCtrlThreshold.setStatus('current')
securityTrustedHost = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 76, 11, 14, 1))
trustedHostStatus = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 11, 14, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: trustedHostStatus.setStatus('current')
trustedHostTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 76, 11, 14, 1, 2), )
if mibBuilder.loadTexts: trustedHostTable.setStatus('current')
trustedHostEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 76, 11, 14, 1, 2, 1), ).setIndexNames((0, "DGS-1210-48-AX", "trustedHostIpAddr"), (0, "DGS-1210-48-AX", "trustedHostIpMask"))
if mibBuilder.loadTexts: trustedHostEntry.setStatus('current')
trustedHostIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 11, 14, 1, 2, 1, 1), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: trustedHostIpAddr.setStatus('current')
trustedHostIpMask = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 11, 14, 1, 2, 1, 2), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: trustedHostIpMask.setStatus('current')
trustedHostRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 11, 14, 1, 2, 1, 3), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: trustedHostRowStatus.setStatus('current')
securityARPSpoofPrevent = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 76, 11, 14, 3))
aRPSpoofPreventTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 76, 11, 14, 3, 1), )
if mibBuilder.loadTexts: aRPSpoofPreventTable.setStatus('current')
aRPSpoofPreventEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 76, 11, 14, 3, 1, 1), ).setIndexNames((0, "DGS-1210-48-AX", "aRPSpoofPreventIpAddr"))
if mibBuilder.loadTexts: aRPSpoofPreventEntry.setStatus('current')
aRPSpoofPreventIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 11, 14, 3, 1, 1, 1), IpAddress())
if mibBuilder.loadTexts: aRPSpoofPreventIpAddr.setStatus('current')
aRPSpoofPreventMacAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 11, 14, 3, 1, 1, 2), MacAddress().clone(hexValue="000102030405")).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aRPSpoofPreventMacAddress.setStatus('current')
aRPSpoofPreventPortList = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 11, 14, 3, 1, 1, 3), PortList()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aRPSpoofPreventPortList.setStatus('current')
aRPSpoofPreventRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 11, 14, 3, 1, 1, 4), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: aRPSpoofPreventRowStatus.setStatus('current')
securitySSL = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 76, 11, 14, 5))
sslSecurityHttpStatus = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 11, 14, 5, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sslSecurityHttpStatus.setStatus('current')
sslCiphers = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 76, 11, 14, 5, 2))
sslCipherSuiteList = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 11, 14, 5, 2, 1), Bits().clone(namedValues=NamedValues(("rsa-null-md5", 0), ("rsa-null-sha", 1), ("rsa-des-sha", 2), ("rsa-3des-sha", 3), ("dh-rsa-des-sha", 4), ("dh-rsa-3des-sha", 5), ("rsa-exp1024-des-sha", 6)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sslCipherSuiteList.setStatus('current')
securityPortSecurity = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 76, 11, 14, 2))
portSecTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 76, 11, 14, 2, 1), )
if mibBuilder.loadTexts: portSecTable.setStatus('current')
portSecEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 76, 11, 14, 2, 1, 1), ).setIndexNames((0, "DGS-1210-48-AX", "portSecIndex"))
if mibBuilder.loadTexts: portSecEntry.setStatus('current')
portSecIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 11, 14, 2, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: portSecIndex.setStatus('current')
portSecState = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 11, 14, 2, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portSecState.setStatus('current')
portSecMLA = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 11, 14, 2, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 64))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portSecMLA.setStatus('current')
aclProfile = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 76, 11, 15, 1))
aclProfileTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 76, 11, 15, 1, 1), )
if mibBuilder.loadTexts: aclProfileTable.setStatus('current')
aclProfileEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 76, 11, 15, 1, 1, 1), ).setIndexNames((0, "DGS-1210-48-AX", "aclProfileNo"))
if mibBuilder.loadTexts: aclProfileEntry.setStatus('current')
aclProfileNo = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 11, 15, 1, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 50))).setMaxAccess("readonly")
if mibBuilder.loadTexts: aclProfileNo.setStatus('current')
aclProfileType = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 11, 15, 1, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 4, 5, 6))).clone(namedValues=NamedValues(("l2", 1), ("l3", 2), ("arpSP-permit", 4), ("arpSP-deny", 5), ("voiceVlan", 6)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aclProfileType.setStatus('current')
aclProfileRuleCount = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 11, 15, 1, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: aclProfileRuleCount.setStatus('current')
aclProfileMask = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 11, 15, 1, 1, 1, 4), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aclProfileMask.setStatus('current')
aclProfileDstMacAddrMask = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 11, 15, 1, 1, 1, 5), MacAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aclProfileDstMacAddrMask.setStatus('current')
aclProfileSrcMacAddrMask = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 11, 15, 1, 1, 1, 6), MacAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aclProfileSrcMacAddrMask.setStatus('current')
aclProfileIPProtocol = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 11, 15, 1, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 6, 17))).clone(namedValues=NamedValues(("none", 0), ("icmp", 1), ("igmp", 2), ("tcp", 6), ("udp", 17)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aclProfileIPProtocol.setStatus('current')
aclProfileDstIpAddrMask = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 11, 15, 1, 1, 1, 8), IpAddress().clone(hexValue="FFFFFFFF")).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aclProfileDstIpAddrMask.setStatus('current')
aclProfileSrcIpAddrMask = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 11, 15, 1, 1, 1, 9), IpAddress().clone(hexValue="FFFFFFFF")).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aclProfileSrcIpAddrMask.setStatus('current')
aclProfileDstPortMask = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 11, 15, 1, 1, 1, 10), OctetString().clone(hexValue="FFFF")).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aclProfileDstPortMask.setStatus('current')
aclProfileSrcPortMask = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 11, 15, 1, 1, 1, 11), OctetString().clone(hexValue="FFFF")).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aclProfileSrcPortMask.setStatus('current')
aclProfileArpSenderMacAddrMask = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 11, 15, 1, 1, 1, 12), MacAddress().clone(hexValue="FFFFFFFFFF")).setMaxAccess("readonly")
if mibBuilder.loadTexts: aclProfileArpSenderMacAddrMask.setStatus('current')
aclProfileArpSenderIpAddrMask = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 11, 15, 1, 1, 1, 13), IpAddress().clone(hexValue="FFFFFFFF")).setMaxAccess("readonly")
if mibBuilder.loadTexts: aclProfileArpSenderIpAddrMask.setStatus('current')
aclProfileStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 11, 15, 1, 1, 1, 14), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: aclProfileStatus.setStatus('current')
aclL2Rule = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 76, 11, 15, 2))
aclL2RuleTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 76, 11, 15, 2, 1), )
if mibBuilder.loadTexts: aclL2RuleTable.setStatus('current')
aclL2RuleEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 76, 11, 15, 2, 1, 1), ).setIndexNames((0, "DGS-1210-48-AX", "aclL2AccessID"), (0, "DGS-1210-48-AX", "aclL2ProfileID"))
if mibBuilder.loadTexts: aclL2RuleEntry.setStatus('current')
aclL2AccessID = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 11, 15, 2, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: aclL2AccessID.setStatus('current')
aclL2ProfileID = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 11, 15, 2, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 50)).clone(1)).setMaxAccess("readonly")
if mibBuilder.loadTexts: aclL2ProfileID.setStatus('current')
aclL2RuleEtherType = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 11, 15, 2, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(-1, -1), ValueRangeConstraint(1501, 65535), )).clone(-1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aclL2RuleEtherType.setStatus('current')
aclL2RuleDstMacAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 11, 15, 2, 1, 1, 4), MacAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aclL2RuleDstMacAddr.setStatus('current')
aclL2RuleSrcMacAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 11, 15, 2, 1, 1, 5), MacAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aclL2RuleSrcMacAddr.setStatus('current')
aclL2RuleVlanId = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 11, 15, 2, 1, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 4094)).clone(-1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aclL2RuleVlanId.setStatus('current')
aclL2Rule1pPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 11, 15, 2, 1, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 7)).clone(-1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aclL2Rule1pPriority.setStatus('current')
aclL2RuleDstMacAddrMask = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 11, 15, 2, 1, 1, 8), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aclL2RuleDstMacAddrMask.setStatus('current')
aclL2RuleSrcMacAddrMask = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 11, 15, 2, 1, 1, 9), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aclL2RuleSrcMacAddrMask.setStatus('current')
aclL2RuleInPortList = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 11, 15, 2, 1, 1, 10), PortList()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aclL2RuleInPortList.setStatus('current')
aclL2RuleAction = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 11, 15, 2, 1, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("allow", 1), ("drop", 2))).clone('allow')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aclL2RuleAction.setStatus('current')
aclL2RuleStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 11, 15, 2, 1, 1, 13), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: aclL2RuleStatus.setStatus('current')
aclL3Rule = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 76, 11, 15, 3))
aclL3RuleTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 76, 11, 15, 3, 1), )
if mibBuilder.loadTexts: aclL3RuleTable.setStatus('current')
aclL3RuleEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 76, 11, 15, 3, 1, 1), ).setIndexNames((0, "DGS-1210-48-AX", "aclL3RuleAccessID"), (0, "DGS-1210-48-AX", "aclL3RuleProfileNo"))
if mibBuilder.loadTexts: aclL3RuleEntry.setStatus('current')
aclL3RuleAccessID = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 11, 15, 3, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: aclL3RuleAccessID.setStatus('current')
aclL3RuleProfileNo = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 11, 15, 3, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 50))).setMaxAccess("readonly")
if mibBuilder.loadTexts: aclL3RuleProfileNo.setStatus('current')
aclL3RuleProtocol = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 11, 15, 3, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 6, 17))).clone(namedValues=NamedValues(("icmp", 1), ("igmp", 2), ("tcp", 6), ("udp", 17)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: aclL3RuleProtocol.setStatus('current')
aclL3RuleICMPMessageType = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 11, 15, 3, 1, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 255)).clone(-1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aclL3RuleICMPMessageType.setStatus('current')
aclL3RuleICMPMessageCode = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 11, 15, 3, 1, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 255)).clone(-1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aclL3RuleICMPMessageCode.setStatus('current')
aclL3RuleDstIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 11, 15, 3, 1, 1, 6), IpAddress().clone(hexValue="00000000")).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aclL3RuleDstIpAddr.setStatus('current')
aclL3RuleSrcIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 11, 15, 3, 1, 1, 7), IpAddress().clone(hexValue="00000000")).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aclL3RuleSrcIpAddr.setStatus('current')
aclL3RuleDstIpAddrMask = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 11, 15, 3, 1, 1, 8), IpAddress().clone(hexValue="FFFFFFFF")).setMaxAccess("readonly")
if mibBuilder.loadTexts: aclL3RuleDstIpAddrMask.setStatus('current')
aclL3RuleSrcIpAddrMask = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 11, 15, 3, 1, 1, 9), IpAddress().clone(hexValue="FFFFFFFF")).setMaxAccess("readonly")
if mibBuilder.loadTexts: aclL3RuleSrcIpAddrMask.setStatus('current')
aclL3RuleTcpUdpDstPort = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 11, 15, 3, 1, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 65535)).clone(-1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aclL3RuleTcpUdpDstPort.setStatus('current')
aclL3RuleTcpUdpSrcPort = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 11, 15, 3, 1, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 65535)).clone(-1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aclL3RuleTcpUdpSrcPort.setStatus('current')
aclL3RuleTcpUdpDstPortMask = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 11, 15, 3, 1, 1, 12), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aclL3RuleTcpUdpDstPortMask.setStatus('current')
aclL3RuleTcpUdpSrcPortMask = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 11, 15, 3, 1, 1, 13), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aclL3RuleTcpUdpSrcPortMask.setStatus('current')
aclL3RuleTcpAckBit = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 11, 15, 3, 1, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(-1, 1, 2))).clone(namedValues=NamedValues(("dont-care", -1), ("establish", 1), ("notEstablish", 2))).clone('dont-care')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: aclL3RuleTcpAckBit.setStatus('current')
aclL3RuleTcpRstBit = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 11, 15, 3, 1, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(-1, 1, 2))).clone(namedValues=NamedValues(("dont-care", -1), ("establish", 1), ("notEstablish", 2))).clone('dont-care')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: aclL3RuleTcpRstBit.setStatus('current')
aclL3RuleTcpUrgBit = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 11, 15, 3, 1, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(-1, 1, 2))).clone(namedValues=NamedValues(("dont-care", -1), ("establish", 1), ("notEstablish", 2))).clone('dont-care')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: aclL3RuleTcpUrgBit.setStatus('current')
aclL3RuleTcpPshBit = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 11, 15, 3, 1, 1, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(-1, 1, 2))).clone(namedValues=NamedValues(("dont-care", -1), ("establish", 1), ("notEstablish", 2))).clone('dont-care')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: aclL3RuleTcpPshBit.setStatus('current')
aclL3RuleTcpSynBit = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 11, 15, 3, 1, 1, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(-1, 1, 2))).clone(namedValues=NamedValues(("dont-care", -1), ("establish", 1), ("notEstablish", 2))).clone('dont-care')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: aclL3RuleTcpSynBit.setStatus('current')
aclL3RuleTcpFinBit = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 11, 15, 3, 1, 1, 19), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(-1, 1, 2))).clone(namedValues=NamedValues(("dont-care", -1), ("establish", 1), ("notEstablish", 2))).clone('dont-care')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: aclL3RuleTcpFinBit.setStatus('current')
aclL3RuleDscp = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 11, 15, 3, 1, 1, 20), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 63)).clone(-1)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: aclL3RuleDscp.setStatus('current')
aclL3RuleIgmpType = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 11, 15, 3, 1, 1, 21), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 255)).clone(-1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aclL3RuleIgmpType.setStatus('current')
aclL3RulePortList = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 11, 15, 3, 1, 1, 22), PortList()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aclL3RulePortList.setStatus('current')
aclL3RuleAction = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 11, 15, 3, 1, 1, 23), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("allow", 1), ("drop", 2))).clone('allow')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aclL3RuleAction.setStatus('current')
aclL3RuleStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 11, 15, 3, 1, 1, 25), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: aclL3RuleStatus.setStatus('current')
snmpGlobalState = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 11, 25, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snmpGlobalState.setStatus('current')
snmpV3User = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 76, 11, 25, 2))
snmpV3Group = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 76, 11, 25, 3))
snmpV3ViewTree = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 76, 11, 25, 4))
snmpV3Community = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 76, 11, 25, 5))
snmpV3Host = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 76, 11, 25, 6))
snmpV3EngineID = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 11, 25, 7), SnmpEngineID()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snmpV3EngineID.setStatus('current')
snmpV3Trap = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 76, 11, 25, 8))
snmpV3UserTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 76, 11, 25, 2, 1), )
if mibBuilder.loadTexts: snmpV3UserTable.setStatus('current')
snmpV3UserEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 76, 11, 25, 2, 1, 1), ).setIndexNames((0, "DGS-1210-48-AX", "snmpV3UserName"), (0, "DGS-1210-48-AX", "snmpV3UserVersion"))
if mibBuilder.loadTexts: snmpV3UserEntry.setStatus('current')
snmpV3UserName = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 11, 25, 2, 1, 1, 1), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(1, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: snmpV3UserName.setStatus('current')
snmpV3UserVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 11, 25, 2, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("v1", 1), ("v2c", 2), ("v3", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: snmpV3UserVersion.setStatus('current')
snmpV3UserGroupName = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 11, 25, 2, 1, 1, 3), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(1, 32))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: snmpV3UserGroupName.setStatus('current')
snmpV3UserAuthProtocol = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 11, 25, 2, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("none", 1), ("md5", 2), ("sha", 3)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: snmpV3UserAuthProtocol.setStatus('current')
snmpV3UserAuthProtocolPassword = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 11, 25, 2, 1, 1, 5), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(1, 32))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: snmpV3UserAuthProtocolPassword.setStatus('current')
snmpV3UserPrivProtocol = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 11, 25, 2, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("none", 1), ("des", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: snmpV3UserPrivProtocol.setStatus('current')
snmpV3UserPrivProtocolPassword = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 11, 25, 2, 1, 1, 7), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(1, 32))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: snmpV3UserPrivProtocolPassword.setStatus('current')
snmpV3UserStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 11, 25, 2, 1, 1, 8), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: snmpV3UserStatus.setStatus('current')
snmpV3GroupTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 76, 11, 25, 3, 1), )
if mibBuilder.loadTexts: snmpV3GroupTable.setStatus('current')
snmpV3GroupEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 76, 11, 25, 3, 1, 1), ).setIndexNames((0, "DGS-1210-48-AX", "snmpV3GroupName"), (0, "DGS-1210-48-AX", "snmpV3GroupSecurityModel"), (0, "DGS-1210-48-AX", "snmpV3GroupSecurityLevel"))
if mibBuilder.loadTexts: snmpV3GroupEntry.setStatus('current')
snmpV3GroupName = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 11, 25, 3, 1, 1, 1), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(1, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: snmpV3GroupName.setStatus('current')
snmpV3GroupSecurityModel = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 11, 25, 3, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("v1", 1), ("v2c", 2), ("v3", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: snmpV3GroupSecurityModel.setStatus('current')
snmpV3GroupSecurityLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 11, 25, 3, 1, 1, 3), SnmpSecurityLevel()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snmpV3GroupSecurityLevel.setStatus('current')
snmpV3GroupReadViewName = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 11, 25, 3, 1, 1, 4), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: snmpV3GroupReadViewName.setStatus('current')
snmpV3GroupWriteViewName = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 11, 25, 3, 1, 1, 5), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: snmpV3GroupWriteViewName.setStatus('current')
snmpV3GroupNotifyViewName = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 11, 25, 3, 1, 1, 6), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: snmpV3GroupNotifyViewName.setStatus('current')
snmpV3GroupStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 11, 25, 3, 1, 1, 7), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: snmpV3GroupStatus.setStatus('current')
snmpV3ViewTreeTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 76, 11, 25, 4, 1), )
if mibBuilder.loadTexts: snmpV3ViewTreeTable.setStatus('current')
snmpV3ViewTreeEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 76, 11, 25, 4, 1, 1), ).setIndexNames((0, "DGS-1210-48-AX", "snmpV3viewTreeName"), (0, "DGS-1210-48-AX", "snmpV3viewTreeSubtree"))
if mibBuilder.loadTexts: snmpV3ViewTreeEntry.setStatus('current')
snmpV3viewTreeName = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 11, 25, 4, 1, 1, 1), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(1, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: snmpV3viewTreeName.setStatus('current')
snmpV3viewTreeSubtree = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 11, 25, 4, 1, 1, 2), ObjectIdentifier()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snmpV3viewTreeSubtree.setStatus('current')
snmpV3viewTreeMask = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 11, 25, 4, 1, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: snmpV3viewTreeMask.setStatus('current')
snmpV3viewTreeType = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 11, 25, 4, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("included", 1), ("excluded", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: snmpV3viewTreeType.setStatus('current')
snmpV3viewTreeStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 11, 25, 4, 1, 1, 5), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: snmpV3viewTreeStatus.setStatus('current')
snmpV3CommunityTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 76, 11, 25, 5, 1), )
if mibBuilder.loadTexts: snmpV3CommunityTable.setStatus('current')
snmpV3CommunityEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 76, 11, 25, 5, 1, 1), ).setIndexNames((0, "DGS-1210-48-AX", "snmpV3CommunityName"))
if mibBuilder.loadTexts: snmpV3CommunityEntry.setStatus('current')
snmpV3CommunityName = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 11, 25, 5, 1, 1, 1), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snmpV3CommunityName.setStatus('current')
snmpV3CommunityPolicy = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 11, 25, 5, 1, 1, 2), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(1, 32))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: snmpV3CommunityPolicy.setStatus('current')
snmpV3CommunityStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 11, 25, 5, 1, 1, 3), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: snmpV3CommunityStatus.setStatus('current')
snmpV3HostTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 76, 11, 25, 6, 1), )
if mibBuilder.loadTexts: snmpV3HostTable.setStatus('current')
snmpV3HostEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 76, 11, 25, 6, 1, 1), ).setIndexNames((0, "DGS-1210-48-AX", "snmpV3HostAddress"))
if mibBuilder.loadTexts: snmpV3HostEntry.setStatus('current')
snmpV3HostAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 11, 25, 6, 1, 1, 1), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snmpV3HostAddress.setStatus('current')
snmpV3HostCommunityName = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 11, 25, 6, 1, 1, 2), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(1, 32))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: snmpV3HostCommunityName.setStatus('current')
snmpV3HostVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 11, 25, 6, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("v1", 1), ("v2c", 2), ("v3NoAuthNoPriv", 3), ("v3AuthNoPriv", 4), ("v3AuthPriv", 5)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: snmpV3HostVersion.setStatus('current')
snmpV3HostStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 11, 25, 6, 1, 1, 4), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: snmpV3HostStatus.setStatus('current')
snmpV3TrapSNMPAuthentication = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 11, 25, 8, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snmpV3TrapSNMPAuthentication.setStatus('current')
snmpV3TrapBootup = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 11, 25, 8, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snmpV3TrapBootup.setStatus('current')
snmpV3TrapFiberLinkUpDown = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 11, 25, 8, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snmpV3TrapFiberLinkUpDown.setStatus('current')
snmpV3TrapCopperLinkUpDown = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 11, 25, 8, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snmpV3TrapCopperLinkUpDown.setStatus('current')
snmpV3TrapRSTPStateChange = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 11, 25, 8, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snmpV3TrapRSTPStateChange.setStatus('current')
snmpV3TrapFirmUpgrade = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 11, 25, 8, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snmpV3TrapFirmUpgrade.setStatus('current')
traps = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 76, 11, 27, 0))
topologyChange = NotificationType((1, 3, 6, 1, 4, 1, 171, 10, 76, 11, 27, 0, 4))
if mibBuilder.loadTexts: topologyChange.setStatus('current')
firmwareUpgradeSuccess = NotificationType((1, 3, 6, 1, 4, 1, 171, 10, 76, 11, 27, 0, 8))
if mibBuilder.loadTexts: firmwareUpgradeSuccess.setStatus('current')
firmwareUpgradeFailure = NotificationType((1, 3, 6, 1, 4, 1, 171, 10, 76, 11, 27, 0, 9))
if mibBuilder.loadTexts: firmwareUpgradeFailure.setStatus('current')
firmwareIllegalFile = NotificationType((1, 3, 6, 1, 4, 1, 171, 10, 76, 11, 27, 0, 10))
if mibBuilder.loadTexts: firmwareIllegalFile.setStatus('current')
firmwareTransferError = NotificationType((1, 3, 6, 1, 4, 1, 171, 10, 76, 11, 27, 0, 11))
if mibBuilder.loadTexts: firmwareTransferError.setStatus('current')
firmwareChecksumError = NotificationType((1, 3, 6, 1, 4, 1, 171, 10, 76, 11, 27, 0, 12))
if mibBuilder.loadTexts: firmwareChecksumError.setStatus('current')
syslogGeneralGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 76, 11, 16, 1))
syslogLogSrvAddr = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 11, 16, 1, 1), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: syslogLogSrvAddr.setStatus('current')
syslogUDPPort = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 11, 16, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: syslogUDPPort.setStatus('current')
syslogTimeStamp = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 11, 16, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('enable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: syslogTimeStamp.setStatus('current')
syslogSeverity = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 11, 16, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(4, 6, 7))).clone(namedValues=NamedValues(("warning", 4), ("info", 6), ("all", 7)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: syslogSeverity.setStatus('current')
syslogFacility = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 11, 16, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(128, 136, 144, 152, 160, 168, 176, 184))).clone(namedValues=NamedValues(("local0", 128), ("local1", 136), ("local2", 144), ("local3", 152), ("local4", 160), ("local5", 168), ("local6", 176), ("local7", 184))).clone('local0')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: syslogFacility.setStatus('current')
syslogLogging = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 11, 16, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: syslogLogging.setStatus('current')
sysLBDStateEnable = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 11, 17, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysLBDStateEnable.setStatus('current')
sysLBDInterval = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 11, 17, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 32767)).clone(2)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysLBDInterval.setStatus('current')
sysLBDRecoverTime = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 11, 17, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(60, 1000000), )).clone(60)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysLBDRecoverTime.setStatus('current')
sysLBDCtrlTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 76, 11, 17, 4), )
if mibBuilder.loadTexts: sysLBDCtrlTable.setStatus('current')
sysLBDCtrlEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 76, 11, 17, 4, 1), ).setIndexNames((0, "DGS-1210-48-AX", "sysLBDCtrlIndex"))
if mibBuilder.loadTexts: sysLBDCtrlEntry.setStatus('current')
sysLBDCtrlIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 11, 17, 4, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysLBDCtrlIndex.setStatus('current')
sysLBDPortStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 11, 17, 4, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysLBDPortStatus.setStatus('current')
sysLBDPortLoopStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 11, 17, 4, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("normal", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysLBDPortLoopStatus.setStatus('current')
sysMirrorStatus = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 11, 18, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysMirrorStatus.setStatus('current')
sysMirrorTargetPort = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 11, 18, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysMirrorTargetPort.setStatus('current')
sysMirrorCtrlIngressMirroring = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 11, 18, 3), PortList()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysMirrorCtrlIngressMirroring.setStatus('current')
sysMirrorCtrlEgressMirroring = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 11, 18, 4), PortList()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysMirrorCtrlEgressMirroring.setStatus('current')
sysTrapIP = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 11, 19, 1), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysTrapIP.setStatus('current')
sysTrapSystemEvent = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 11, 19, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("none", 0), ("deviceBootUp", 1), ("illegalLogin", 2), ("both", 3))).clone('none')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysTrapSystemEvent.setStatus('current')
sysTrapFiberPortEvent = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 11, 19, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysTrapFiberPortEvent.setStatus('current')
sysTrapTwistedPortEvent = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 11, 19, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysTrapTwistedPortEvent.setStatus('current')
sysTrapStateChangeEvent = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 11, 19, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysTrapStateChangeEvent.setStatus('current')
sysTrapFirmUpgradeEvent = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 11, 19, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysTrapFirmUpgradeEvent.setStatus('current')
sysTrapStatus = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 11, 19, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysTrapStatus.setStatus('current')
sysSNTPTimeSeconds = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 11, 20, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysSNTPTimeSeconds.setStatus('current')
sysSNTPFirstServer = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 11, 20, 2), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysSNTPFirstServer.setStatus('current')
sysSNTPSecondServer = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 11, 20, 3), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysSNTPSecondServer.setStatus('current')
sysSNTPPollInterval = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 11, 20, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysSNTPPollInterval.setStatus('current')
sysSNTPState = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 11, 20, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("sntp", 1), ("local", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysSNTPState.setStatus('current')
sysSNTPDSTOffset = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 11, 20, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(30, 60, 90, 120))).clone(namedValues=NamedValues(("offset30min", 30), ("offset60min", 60), ("offset90min", 90), ("offset120min", 120)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysSNTPDSTOffset.setStatus('current')
sysSNTPGMTMinutes = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 11, 20, 7), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysSNTPGMTMinutes.setStatus('current')
sysSNTPDSTStartMon = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 11, 20, 8), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysSNTPDSTStartMon.setStatus('current')
sysSNTPDSTStartDay = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 11, 20, 9), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysSNTPDSTStartDay.setStatus('current')
sysSNTPDSTStartHour = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 11, 20, 10), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysSNTPDSTStartHour.setStatus('current')
sysSNTPDSTStartMin = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 11, 20, 11), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysSNTPDSTStartMin.setStatus('current')
sysSNTPDSTEndMon = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 11, 20, 12), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysSNTPDSTEndMon.setStatus('current')
sysSNTPDSTEndDay = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 11, 20, 13), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysSNTPDSTEndDay.setStatus('current')
sysSNTPDSTEndHour = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 11, 20, 14), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysSNTPDSTEndHour.setStatus('current')
sysSNTPDSTEndMin = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 11, 20, 15), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysSNTPDSTEndMin.setStatus('current')
sysSNTPDSTState = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 11, 20, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("annual", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysSNTPDSTState.setStatus('current')
voicevlanSystem = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 76, 11, 21, 1))
voicevlanOUI = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 76, 11, 21, 2))
voiceVlanMode = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 11, 21, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: voiceVlanMode.setStatus('current')
voiceVlanId = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 11, 21, 1, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: voiceVlanId.setStatus('current')
voiceVlanTimeout = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 11, 21, 1, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: voiceVlanTimeout.setStatus('current')
voiceVlanPriority = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 11, 21, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("highest", 0), ("high", 1), ("medium", 2), ("low", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: voiceVlanPriority.setStatus('current')
voicevlanPortControlTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 76, 11, 21, 1, 6), )
if mibBuilder.loadTexts: voicevlanPortControlTable.setStatus('current')
voicevlanPortControlEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 76, 11, 21, 1, 6, 1), ).setIndexNames((0, "DGS-1210-48-AX", "voicevlanPortControlIndex"))
if mibBuilder.loadTexts: voicevlanPortControlEntry.setStatus('current')
voicevlanPortControlIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 11, 21, 1, 6, 1, 1), InterfaceIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: voicevlanPortControlIndex.setStatus('current')
voicevlanPortAutoDetection = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 11, 21, 1, 6, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: voicevlanPortAutoDetection.setStatus('current')
voicevlanPortState = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 11, 21, 1, 6, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("manual", 1), ("dynamic", 2), ("none", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: voicevlanPortState.setStatus('current')
voicevlanOUITable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 76, 11, 21, 2, 1), )
if mibBuilder.loadTexts: voicevlanOUITable.setStatus('current')
voicevlanOUIEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 76, 11, 21, 2, 1, 1), ).setIndexNames((0, "DGS-1210-48-AX", "voicevlanOUITelephonyOUI"))
if mibBuilder.loadTexts: voicevlanOUIEntry.setStatus('current')
voicevlanOUITelephonyOUI = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 11, 21, 2, 1, 1, 1), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: voicevlanOUITelephonyOUI.setStatus('current')
voicevlanOUIDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 11, 21, 2, 1, 1, 2), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: voicevlanOUIDescription.setStatus('current')
voicevlanOUIMask = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 11, 21, 2, 1, 1, 3), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: voicevlanOUIMask.setStatus('current')
voicevlanOUIStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 11, 21, 2, 1, 1, 4), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: voicevlanOUIStatus.setStatus('current')
autoSurveillanceVlanSystem = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 76, 11, 26, 1))
autoSurveillanceVlanOUI = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 76, 11, 26, 2))
autoSurveillanceVlanMode = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 11, 26, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: autoSurveillanceVlanMode.setStatus('current')
autoSurveillanceVlanId = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 11, 26, 1, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: autoSurveillanceVlanId.setStatus('current')
autoSurveillanceVlanPriority = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 11, 26, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("highest", 0), ("high", 1), ("medium", 2), ("low", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: autoSurveillanceVlanPriority.setStatus('current')
autoSurveillanceVlanOUITable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 76, 11, 26, 2, 1), )
if mibBuilder.loadTexts: autoSurveillanceVlanOUITable.setStatus('current')
autoSurveillanceVlanOUIEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 76, 11, 26, 2, 1, 1), ).setIndexNames((0, "DGS-1210-48-AX", "autoSurveillanceVlanOUISurveillanceOUI"))
if mibBuilder.loadTexts: autoSurveillanceVlanOUIEntry.setStatus('current')
autoSurveillanceVlanOUISurveillanceOUI = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 11, 26, 2, 1, 1, 1), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: autoSurveillanceVlanOUISurveillanceOUI.setStatus('current')
autoSurveillanceVlanOUIDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 11, 26, 2, 1, 1, 2), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: autoSurveillanceVlanOUIDescription.setStatus('current')
autoSurveillanceVlanOUIMask = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 11, 26, 2, 1, 1, 3), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: autoSurveillanceVlanOUIMask.setStatus('current')
autoSurveillanceVlanOUIComponentType = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 11, 26, 2, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("video-Management-Server", 0), ("vMS-Client", 1), ("video-Encoder", 2), ("network-Storage", 3), ("other-IP-Surveillance-Devices", 4), ("d-Link-Surveillance-Device", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: autoSurveillanceVlanOUIComponentType.setStatus('current')
autoSurveillanceVlanOUIStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 11, 26, 2, 1, 1, 5), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: autoSurveillanceVlanOUIStatus.setStatus('current')
securityDhcpServerScreen = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 76, 11, 14, 7))
dhcpServerScreenEnablePortlist = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 11, 14, 7, 1), PortList()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dhcpServerScreenEnablePortlist.setStatus('current')
mibBuilder.exportSymbols("DGS-1210-48-AX", aRPSpoofPreventTable=aRPSpoofPreventTable, qosDiffServType56=qosDiffServType56, companyRSTP=companyRSTP, dot1pPortPriority=dot1pPortPriority, sysPortCtrlMDI=sysPortCtrlMDI, qosDiffServType42=qosDiffServType42, laPortControl=laPortControl, sysSNTPDSTOffset=sysSNTPDSTOffset, autoSurveillanceVlanOUIDescription=autoSurveillanceVlanOUIDescription, sysSNTPTimeSeconds=sysSNTPTimeSeconds, companySNMPV3=companySNMPV3, qosDiffServType46=qosDiffServType46, snmpV3Trap=snmpV3Trap, laPortControlEntry=laPortControlEntry, qosDiffServType30=qosDiffServType30, qosDiffServType41=qosDiffServType41, companyLBD=companyLBD, dot1xAuthServerTimeout=dot1xAuthServerTimeout, igsVlanMulticastGroupEntry=igsVlanMulticastGroupEntry, stpPort=stpPort, sysMirrorStatus=sysMirrorStatus, dot1qVlanName=dot1qVlanName, qosDiffServType33=qosDiffServType33, aclL3RuleTcpUdpDstPortMask=aclL3RuleTcpUdpDstPortMask, dot1xAuthStatus=dot1xAuthStatus, dot1xAuthConfigPortControl=dot1xAuthConfigPortControl, sysSNTPDSTState=sysSNTPDSTState, staticVlanID=staticVlanID, qosDiffServType62=qosDiffServType62, laPortControlTable=laPortControlTable, syslogGeneralGroup=syslogGeneralGroup, stpPortProtocolMigration=stpPortProtocolMigration, broadcastStormCtrlSettings=broadcastStormCtrlSettings, dot1pPortEntry=dot1pPortEntry, firmwareUpgradeSuccess=firmwareUpgradeSuccess, tftpConfigTftpOperationStatus=tftpConfigTftpOperationStatus, trustedHostTable=trustedHostTable, traps=traps, qosDiffServType00=qosDiffServType00, broadcastStormCtrlLimitType=broadcastStormCtrlLimitType, voicevlanOUIDescription=voicevlanOUIDescription, dot1xAuth=dot1xAuth, voicevlanOUIStatus=voicevlanOUIStatus, sysPortCtrlIndex=sysPortCtrlIndex, sysSNTPGMTMinutes=sysSNTPGMTMinutes, aclL2ProfileID=aclL2ProfileID, stpAdminPortPathCost=stpAdminPortPathCost, voiceVlanMode=voiceVlanMode, dot1xAuthMaxReq=dot1xAuthMaxReq, qosDiffServType53=qosDiffServType53, stpVersion=stpVersion, companyVoiceVlan=companyVoiceVlan, portSecEntry=portSecEntry, autoSurveillanceVlanSystem=autoSurveillanceVlanSystem, qosDiffServType59=qosDiffServType59, snmpV3UserVersion=snmpV3UserVersion, qosDiffServType21=qosDiffServType21, snmpV3TrapBootup=snmpV3TrapBootup, snmpV3CommunityStatus=snmpV3CommunityStatus, sysPortCtrlTable=sysPortCtrlTable, dot1xAuthConfigPortNumber=dot1xAuthConfigPortNumber, qosMode=qosMode, aclL3RuleTcpFinBit=aclL3RuleTcpFinBit, aclL2AccessID=aclL2AccessID, sysLBDInterval=sysLBDInterval, companySyslog=companySyslog, dot1qVlanUngisterMCFilterEntry=dot1qVlanUngisterMCFilterEntry, staticAutoLearningList=staticAutoLearningList, aclL3RuleStatus=aclL3RuleStatus, igsVlanRouterPortList=igsVlanRouterPortList, bandwidthCtrlIndex=bandwidthCtrlIndex, companyQoSGroup=companyQoSGroup, qosDiffServType17=qosDiffServType17, dot1qVlanUntaggedPorts=dot1qVlanUntaggedPorts, dot1xAuthConfigPortStatus=dot1xAuthConfigPortStatus, qosDiffServType12=qosDiffServType12, aRPSpoofPreventEntry=aRPSpoofPreventEntry, qosDiffServType24=qosDiffServType24, aclL3RuleAction=aclL3RuleAction, dgs_1210_48ax=dgs_1210_48ax, snmpV3ViewTreeEntry=snmpV3ViewTreeEntry, syslogUDPPort=syslogUDPPort, qosDiffServType28=qosDiffServType28, igsVlanMulticastGroupPortList=igsVlanMulticastGroupPortList, stpHoldTime=stpHoldTime, voicevlanOUITelephonyOUI=voicevlanOUITelephonyOUI, snmpV3UserName=snmpV3UserName, aclL2Rule1pPriority=aclL2Rule1pPriority, dot1qVlanAsyOnOff=dot1qVlanAsyOnOff, stpPortOperEdgePort=stpPortOperEdgePort, sysIpAddrCfgMode=sysIpAddrCfgMode, qosDiffServType34=qosDiffServType34, companyACLGroup=companyACLGroup, qosDiffServType36=qosDiffServType36, BridgeId=BridgeId, securitySSL=securitySSL, aclL3RuleTcpAckBit=aclL3RuleTcpAckBit, voicevlanOUIEntry=voicevlanOUIEntry, aclProfileRuleCount=aclProfileRuleCount, snmpV3EngineID=snmpV3EngineID, laStatus=laStatus, stpForwardDelay=stpForwardDelay, voiceVlanPriority=voiceVlanPriority, tftpFwTftpOperationStatus=tftpFwTftpOperationStatus, aclProfileSrcPortMask=aclProfileSrcPortMask, voicevlanPortState=voicevlanPortState, stpPortRestrictedTCN=stpPortRestrictedTCN, aRPSpoofPreventIpAddr=aRPSpoofPreventIpAddr, voiceVlanTimeout=voiceVlanTimeout, igsHostPortPurgeInterval=igsHostPortPurgeInterval, tftpConfigFileName=tftpConfigFileName, qosDiffServType16=qosDiffServType16, bandwidthCtrlEntry=bandwidthCtrlEntry, qosDiffServType54=qosDiffServType54, miscStatisticsReset=miscStatisticsReset, qosDiffServType35=qosDiffServType35, aclL2RuleAction=aclL2RuleAction, aclL2RuleTable=aclL2RuleTable, dlink_products=dlink_products, laPortActorActivity=laPortActorActivity, radiusServerSharedSecret=radiusServerSharedSecret, laPortChannelEntry=laPortChannelEntry, aclL2RuleSrcMacAddrMask=aclL2RuleSrcMacAddrMask, securityARPSpoofPrevent=securityARPSpoofPrevent, snmpV3UserGroupName=snmpV3UserGroupName, sysPowerSavingEnable=sysPowerSavingEnable, sysGroupInterval=sysGroupInterval, sysLBDPortLoopStatus=sysLBDPortLoopStatus, securityTrustedHost=securityTrustedHost, companySystem=companySystem, igsVlanSnoopStatus=igsVlanSnoopStatus, qosDiffServType23=qosDiffServType23, aclL3RuleDscp=aclL3RuleDscp, snmpV3UserPrivProtocol=snmpV3UserPrivProtocol, autoSurveillanceVlanId=autoSurveillanceVlanId, snmpV3GroupSecurityModel=snmpV3GroupSecurityModel, PortLaMode=PortLaMode, qosDiffServType57=qosDiffServType57, snmpV3UserAuthProtocol=snmpV3UserAuthProtocol, sysDhcpAutoConfiguration=sysDhcpAutoConfiguration, dot1qVlanEgressPorts=dot1qVlanEgressPorts, snmpV3UserPrivProtocolPassword=snmpV3UserPrivProtocolPassword, stpPortState=stpPortState, stpPortDesignatedPort=stpPortDesignatedPort, bandwidthCtrlTxThreshold=bandwidthCtrlTxThreshold, stpProtocolSpecification=stpProtocolSpecification, stpPortDesignatedRoot=stpPortDesignatedRoot, tftpFwServerIpAddress=tftpFwServerIpAddress, trustedHostRowStatus=trustedHostRowStatus, dhcpServerScreenEnablePortlist=dhcpServerScreenEnablePortlist, qosDiffServType50=qosDiffServType50, snmpV3UserTable=snmpV3UserTable, igsVlanFilterVlanId=igsVlanFilterVlanId, igsVlanRouterEntry=igsVlanRouterEntry, portSecIndex=portSecIndex, dot1pPortTable=dot1pPortTable, aclProfileMask=aclProfileMask, stpMaxAge=stpMaxAge, sysSave=sysSave, snmpV3TrapFiberLinkUpDown=snmpV3TrapFiberLinkUpDown, sysTrapStateChangeEvent=sysTrapStateChangeEvent, sslCiphers=sslCiphers, snmpV3Community=snmpV3Community, qosDiffServType09=qosDiffServType09, aclL3RuleICMPMessageCode=aclL3RuleICMPMessageCode, dot1qVlanUngisterMCFiltermode=dot1qVlanUngisterMCFiltermode, aclProfileDstMacAddrMask=aclProfileDstMacAddrMask, trustedHostStatus=trustedHostStatus, sysMirrorTargetPort=sysMirrorTargetPort, qosDiffServType07=qosDiffServType07, sysGPIOStatus=sysGPIOStatus, qosDiffServType44=qosDiffServType44, snmpV3CommunityName=snmpV3CommunityName, syslogFacility=syslogFacility, autoSurveillanceVlanOUIStatus=autoSurveillanceVlanOUIStatus, autoSurveillanceVlanOUIComponentType=autoSurveillanceVlanOUIComponentType, sysHardwareVersion=sysHardwareVersion, portSecState=portSecState, companyAutoSurveillanceVlan=companyAutoSurveillanceVlan, laPortActorPortPriority=laPortActorPortPriority, aclL3Rule=aclL3Rule, syslogLogSrvAddr=syslogLogSrvAddr, aclL3RuleTcpRstBit=aclL3RuleTcpRstBit, aRPSpoofPreventRowStatus=aRPSpoofPreventRowStatus, snmpV3ViewTree=snmpV3ViewTree, snmpV3HostEntry=snmpV3HostEntry, LacpKey=LacpKey, aclProfileDstIpAddrMask=aclProfileDstIpAddrMask, sysTrapIP=sysTrapIP, dot1xAuthReAuthPeriod=dot1xAuthReAuthPeriod, sysLBDCtrlEntry=sysLBDCtrlEntry, stpPortEntry=stpPortEntry, sysTrapSystemEvent=sysTrapSystemEvent, tftpCfgServerIpAddress=tftpCfgServerIpAddress, stpPortTable=stpPortTable, aclProfileNo=aclProfileNo, dot1pPortIndex=dot1pPortIndex, snmpV3GroupNotifyViewName=snmpV3GroupNotifyViewName, aclProfileEntry=aclProfileEntry, stpPortPriority=stpPortPriority, sysIpSubnetMask=sysIpSubnetMask, qosDiffServType04=qosDiffServType04, dot1qVlanPortTable=dot1qVlanPortTable, tftpFwImageFileName=tftpFwImageFileName, qosDiffServType40=qosDiffServType40, sysSNTPDSTStartDay=sysSNTPDSTStartDay, sysLoginTimeoutInterval=sysLoginTimeoutInterval, sysLBDPortStatus=sysLBDPortStatus, igsVlan=igsVlan, snmpV3GroupSecurityLevel=snmpV3GroupSecurityLevel, dot1qVlanRowStatus=dot1qVlanRowStatus, voicevlanPortControlEntry=voicevlanPortControlEntry, sysSNTPState=sysSNTPState, broadcastStormCtrlThreshold=broadcastStormCtrlThreshold, stpTxHoldCount=stpTxHoldCount, sysMirrorCtrlEgressMirroring=sysMirrorCtrlEgressMirroring, stpBridgeForwardDelay=stpBridgeForwardDelay, stpPortDesignatedBridge=stpPortDesignatedBridge, radiusServerAddress=radiusServerAddress, sysLBDCtrlIndex=sysLBDCtrlIndex, igsVlanMulticastGroupVlanId=igsVlanMulticastGroupVlanId, dot1xAuthConfigPortEntry=dot1xAuthConfigPortEntry, qosDiffServType39=qosDiffServType39, snmpV3viewTreeStatus=snmpV3viewTreeStatus, qosDiffServType14=qosDiffServType14, snmpV3GroupWriteViewName=snmpV3GroupWriteViewName, snmpV3Group=snmpV3Group, companyIgsGroup=companyIgsGroup, dot1xAuthTxPeriod=dot1xAuthTxPeriod, snmpV3User=snmpV3User, sslSecurityHttpStatus=sslSecurityHttpStatus, snmpV3GroupName=snmpV3GroupName, stpBridgeMaxAge=stpBridgeMaxAge, companyStaticMAC=companyStaticMAC, trustedHostIpMask=trustedHostIpMask, snmpV3TrapSNMPAuthentication=snmpV3TrapSNMPAuthentication, sysPortCtrlFlowControl=sysPortCtrlFlowControl, autoSurveillanceVlanOUISurveillanceOUI=autoSurveillanceVlanOUISurveillanceOUI, companyLA=companyLA, sysSNTPPollInterval=sysSNTPPollInterval, snmpV3viewTreeMask=snmpV3viewTreeMask, companyIpifGroup=companyIpifGroup, stpRootCost=stpRootCost, qosDiffServType22=qosDiffServType22, snmpV3UserEntry=snmpV3UserEntry, stpRootPort=stpRootPort, igsGrpQueryInterval=igsGrpQueryInterval, voicevlanOUITable=voicevlanOUITable, qosDiffServType19=qosDiffServType19, snmpV3HostStatus=snmpV3HostStatus, tftpConfigTftpOperation=tftpConfigTftpOperation, companyMirror=companyMirror, stpBridgeHelloTime=stpBridgeHelloTime, companyTrafficMgmt=companyTrafficMgmt)
mibBuilder.exportSymbols("DGS-1210-48-AX", voicevlanOUIMask=voicevlanOUIMask, igsVlanRouterTable=igsVlanRouterTable, stpHelloTime=stpHelloTime, aclProfileIPProtocol=aclProfileIPProtocol, companySNTPSetting=companySNTPSetting, stpPortEnable=stpPortEnable, voicevlanSystem=voicevlanSystem, aclL3RuleTcpUdpDstPort=aclL3RuleTcpUdpDstPort, sysLBDCtrlTable=sysLBDCtrlTable, companyMiscGroup=companyMiscGroup, qosDiffServType32=qosDiffServType32, portSecTable=portSecTable, qosDiffServType37=qosDiffServType37, firmwareUpgradeFailure=firmwareUpgradeFailure, sysFirmwareVersion=sysFirmwareVersion, aclL3RuleProfileNo=aclL3RuleProfileNo, igsRobustnessValue=igsRobustnessValue, firmwareTransferError=firmwareTransferError, snmpV3GroupStatus=snmpV3GroupStatus, stpPortDesignatedCost=stpPortDesignatedCost, qosDiffServType47=qosDiffServType47, aclProfileSrcIpAddrMask=aclProfileSrcIpAddrMask, qosDiffServType27=qosDiffServType27, sysPortCtrlSpeed=sysPortCtrlSpeed, qosDiffServType38=qosDiffServType38, aclProfileTable=aclProfileTable, stpDesignatedRoot=stpDesignatedRoot, laPortChannelIfIndex=laPortChannelIfIndex, sysSNTPDSTStartMin=sysSNTPDSTStartMin, syslogTimeStamp=syslogTimeStamp, igsQueryMaxResponseTime=igsQueryMaxResponseTime, voicevlanPortControlIndex=voicevlanPortControlIndex, portSecMLA=portSecMLA, qosDiffServType29=qosDiffServType29, laPortControlIndex=laPortControlIndex, qosDiffServType02=qosDiffServType02, sysSafeGuardEnable=sysSafeGuardEnable, sysSystemPassword=sysSystemPassword, aclL3RuleDstIpAddrMask=aclL3RuleDstIpAddrMask, sysPortCtrlEntry=sysPortCtrlEntry, aclL2RuleStatus=aclL2RuleStatus, aclProfileType=aclProfileType, igsVlanMulticastGroupTable=igsVlanMulticastGroupTable, staticStatus=staticStatus, companyTrapSetting=companyTrapSetting, securityPortSecurity=securityPortSecurity, aclProfileArpSenderIpAddrMask=aclProfileArpSenderIpAddrMask, aclL3RuleTable=aclL3RuleTable, sysLocationName=sysLocationName, VlanIndex=VlanIndex, sysPortCtrlType=sysPortCtrlType, aclL2RuleSrcMacAddr=aclL2RuleSrcMacAddr, igsQueryInterval=igsQueryInterval, sysGateway=sysGateway, snmpV3ViewTreeTable=snmpV3ViewTreeTable, queuingMechanism=queuingMechanism, autoSurveillanceVlanOUIMask=autoSurveillanceVlanOUIMask, snmpV3CommunityEntry=snmpV3CommunityEntry, igsSystem=igsSystem, qosDiffServType52=qosDiffServType52, voicevlanOUI=voicevlanOUI, aclProfileArpSenderMacAddrMask=aclProfileArpSenderMacAddrMask, aclL3RuleTcpUdpSrcPort=aclL3RuleTcpUdpSrcPort, stpTopChanges=stpTopChanges, stpPriority=stpPriority, bandwidthCtrlTable=bandwidthCtrlTable, aclL2Rule=aclL2Rule, stpPortForwardTransitions=stpPortForwardTransitions, laPortChannelMode=laPortChannelMode, snmpV3TrapCopperLinkUpDown=snmpV3TrapCopperLinkUpDown, laPortChannelMemberList=laPortChannelMemberList, qosDiffServType03=qosDiffServType03, companyTftpGroup=companyTftpGroup, qosDiffServType06=qosDiffServType06, aRPSpoofPreventMacAddress=aRPSpoofPreventMacAddress, aclL3RuleProtocol=aclL3RuleProtocol, qosDiffServTypeGroup=qosDiffServTypeGroup, topologyChange=topologyChange, sysLBDRecoverTime=sysLBDRecoverTime, snmpV3GroupEntry=snmpV3GroupEntry, qosDiffServType08=qosDiffServType08, stpPortAdminPointToPoint=stpPortAdminPointToPoint, qosDiffServType05=qosDiffServType05, staticTable=staticTable, igsVlanRtrPortList=igsVlanRtrPortList, qosDiffServType31=qosDiffServType31, sysPortCtrlFlowControlOper=sysPortCtrlFlowControlOper, igsVlanCfgQuerier=igsVlanCfgQuerier, qosDiffServType13=qosDiffServType13, stpPortRestrictedRole=stpPortRestrictedRole, stpPortEdge=stpPortEdge, aclL2RuleVlanId=aclL2RuleVlanId, sysFanStatus=sysFanStatus, snmpV3UserAuthProtocolPassword=snmpV3UserAuthProtocolPassword, stpTimeSinceTopologyChange=stpTimeSinceTopologyChange, companySecurity=companySecurity, aclL2RuleEtherType=aclL2RuleEtherType, staticEntry=staticEntry, dot1xAuthSuppTimeout=dot1xAuthSuppTimeout, radius=radius, companyDot1qVlanGroup=companyDot1qVlanGroup, snmpV3HostCommunityName=snmpV3HostCommunityName, laPortActorTimeout=laPortActorTimeout, autoSurveillanceVlanPriority=autoSurveillanceVlanPriority, snmpV3viewTreeSubtree=snmpV3viewTreeSubtree, igsStatus=igsStatus, dot1qVlanManagementOnOff=dot1qVlanManagementOnOff, dot1qVlanPvid=dot1qVlanPvid, aclL3RuleIgmpType=aclL3RuleIgmpType, qosDiffServType11=qosDiffServType11, igsRouterPortPurgeInterval=igsRouterPortPurgeInterval, qosDiffServType48=qosDiffServType48, firmwareChecksumError=firmwareChecksumError, qosDiffServType63=qosDiffServType63, igsVlanMulticastGroupMacAddress=igsVlanMulticastGroupMacAddress, snmpV3HostAddress=snmpV3HostAddress, PortList=PortList, qosDiffServType49=qosDiffServType49, autoSurveillanceVlanOUI=autoSurveillanceVlanOUI, snmpV3HostTable=snmpV3HostTable, qosDiffServType60=qosDiffServType60, aclL2RuleInPortList=aclL2RuleInPortList, tftpFwTftpOperation=tftpFwTftpOperation, qosDiffServType10=qosDiffServType10, aclProfileSrcMacAddrMask=aclProfileSrcMacAddrMask, snmpV3GroupReadViewName=snmpV3GroupReadViewName, staticPort=staticPort, dot1xAuthReAuthEnabled=dot1xAuthReAuthEnabled, aclL3RulePortList=aclL3RulePortList, igsVlanFilterEntry=igsVlanFilterEntry, stpPortOperPointToPoint=stpPortOperPointToPoint, sysSNTPDSTStartMon=sysSNTPDSTStartMon, sysSNTPDSTEndHour=sysSNTPDSTEndHour, aclL3RuleDstIpAddr=aclL3RuleDstIpAddr, sysTrapTwistedPortEvent=sysTrapTwistedPortEvent, aclL2RuleDstMacAddrMask=aclL2RuleDstMacAddrMask, qosDiffServType61=qosDiffServType61, staticDisableAutoLearn=staticDisableAutoLearn, aclProfileStatus=aclProfileStatus, laPortChannelTable=laPortChannelTable, dot1qVlanPortEntry=dot1qVlanPortEntry, qosDiffServType26=qosDiffServType26, voiceVlanId=voiceVlanId, aclL3RuleSrcIpAddr=aclL3RuleSrcIpAddr, sslCipherSuiteList=sslCipherSuiteList, aclL3RuleEntry=aclL3RuleEntry, sysSNTPDSTEndMon=sysSNTPDSTEndMon, sysSNTPDSTEndDay=sysSNTPDSTEndDay, sysSNTPDSTEndMin=sysSNTPDSTEndMin, qosDiffServType15=qosDiffServType15, syslogSeverity=syslogSeverity, aclProfileDstPortMask=aclProfileDstPortMask, sysIpAddr=sysIpAddr, snmpV3UserStatus=snmpV3UserStatus, stpPortPathCost=stpPortPathCost, broadcastStormCtrlGlobalOnOff=broadcastStormCtrlGlobalOnOff, aclL2RuleDstMacAddr=aclL2RuleDstMacAddr, dot1xAuthConfigPortSessionTime=dot1xAuthConfigPortSessionTime, dot1qVlanManagementid=dot1qVlanManagementid, qosDiffServType20=qosDiffServType20, qosDiffServType51=qosDiffServType51, sysSNTPFirstServer=sysSNTPFirstServer, dot1qVlanForbiddenPorts=dot1qVlanForbiddenPorts, snmpV3TrapFirmUpgrade=snmpV3TrapFirmUpgrade, aclL3RuleTcpUdpSrcPortMask=aclL3RuleTcpUdpSrcPortMask, voicevlanPortAutoDetection=voicevlanPortAutoDetection, qosDiffServType25=qosDiffServType25, sysSwitchName=sysSwitchName, aclProfile=aclProfile, snmpV3viewTreeType=snmpV3viewTreeType, qosDiffServType43=qosDiffServType43, companyTraps=companyTraps, snmpV3viewTreeName=snmpV3viewTreeName, qosDiffServType55=qosDiffServType55, miscReset=miscReset, qosDiffServEnable=qosDiffServEnable, qosDiffServType18=qosDiffServType18, sysLBDStateEnable=sysLBDStateEnable, trustedHostEntry=trustedHostEntry, qosDiffServType58=qosDiffServType58, stpGlobal=stpGlobal, bandwidthCtrlSettings=bandwidthCtrlSettings, syslogLogging=syslogLogging, sysPortCtrlOperStatus=sysPortCtrlOperStatus, dot1qVlanUngisterMCFilterVlanId=dot1qVlanUngisterMCFilterVlanId, staticMac=staticMac, igsVlanQueryInterval=igsVlanQueryInterval, dot1qVlanTable=dot1qVlanTable, aclL3RuleICMPMessageType=aclL3RuleICMPMessageType, dot1qVlanEntry=dot1qVlanEntry, aclL3RuleAccessID=aclL3RuleAccessID, snmpV3GroupTable=snmpV3GroupTable, sysTrapFiberPortEvent=sysTrapFiberPortEvent, sysSNTPSecondServer=sysSNTPSecondServer, igsVlanRouterVlanId=igsVlanRouterVlanId, snmpV3CommunityPolicy=snmpV3CommunityPolicy, aclL2RuleEntry=aclL2RuleEntry, voicevlanPortControlTable=voicevlanPortControlTable, laSystem=laSystem, aRPSpoofPreventPortList=aRPSpoofPreventPortList, autoSurveillanceVlanOUIEntry=autoSurveillanceVlanOUIEntry, securityDhcpServerScreen=securityDhcpServerScreen, qosQ1p=qosQ1p, rstpStatus=rstpStatus, autoSurveillanceVlanOUITable=autoSurveillanceVlanOUITable, snmpV3CommunityTable=snmpV3CommunityTable, snmpV3Host=snmpV3Host, qosDiffServType01=qosDiffServType01, dot1xAuthQuietPeriod=dot1xAuthQuietPeriod, aclL3RuleTcpPshBit=aclL3RuleTcpPshBit, igsVlanQuerier=igsVlanQuerier, sysRestart=sysRestart, snmpGlobalState=snmpGlobalState, aclL3RuleSrcIpAddrMask=aclL3RuleSrcIpAddrMask, sysSNTPDSTStartHour=sysSNTPDSTStartHour, igsVlanMulticastGroupIpAddress=igsVlanMulticastGroupIpAddress, companyDot1xGroup=companyDot1xGroup, sysMirrorCtrlIngressMirroring=sysMirrorCtrlIngressMirroring, bandwidthCtrlRxThreshold=bandwidthCtrlRxThreshold, sysTrapStatus=sysTrapStatus, qosDiffServType45=qosDiffServType45, trustedHostIpAddr=trustedHostIpAddr, autoSurveillanceVlanMode=autoSurveillanceVlanMode, aclL3RuleTcpSynBit=aclL3RuleTcpSynBit, sysJumboFrameEnable=sysJumboFrameEnable, sysTrapFirmUpgradeEvent=sysTrapFirmUpgradeEvent, snmpV3TrapRSTPStateChange=snmpV3TrapRSTPStateChange, dot1xAuthConfigPortTable=dot1xAuthConfigPortTable, snmpV3HostVersion=snmpV3HostVersion, firmwareIllegalFile=firmwareIllegalFile, dot1qVlanUngisterMCFilterTable=dot1qVlanUngisterMCFilterTable, aclL3RuleTcpUrgBit=aclL3RuleTcpUrgBit, dlink_DGS1210SeriesProd=dlink_DGS1210SeriesProd, dot1xAuthConfigPortSessionUserName=dot1xAuthConfigPortSessionUserName, igsVlanFilterTable=igsVlanFilterTable, Timeout=Timeout, qosDiffServ=qosDiffServ, d_link=d_link)
