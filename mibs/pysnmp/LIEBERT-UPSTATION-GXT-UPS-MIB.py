#
# PySNMP MIB module LIEBERT-UPSTATION-GXT-UPS-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/LIEBERT-UPSTATION-GXT-UPS-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 19:56:27 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, OctetString, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "Integer", "OctetString", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueRangeConstraint, ConstraintsUnion, ConstraintsIntersection, ValueSizeConstraint, SingleValueConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueRangeConstraint", "ConstraintsUnion", "ConstraintsIntersection", "ValueSizeConstraint", "SingleValueConstraint")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
sysUpTime, = mibBuilder.importSymbols("SNMPv2-MIB", "sysUpTime")
Integer32, Gauge32, NotificationType, Counter64, enterprises, ObjectIdentity, NotificationType, MibIdentifier, TimeTicks, iso, ModuleIdentity, Counter32, IpAddress, Unsigned32, Bits, MibScalar, MibTable, MibTableRow, MibTableColumn = mibBuilder.importSymbols("SNMPv2-SMI", "Integer32", "Gauge32", "NotificationType", "Counter64", "enterprises", "ObjectIdentity", "NotificationType", "MibIdentifier", "TimeTicks", "iso", "ModuleIdentity", "Counter32", "IpAddress", "Unsigned32", "Bits", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn")
TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString")
emerson = MibIdentifier((1, 3, 6, 1, 4, 1, 476))
liebertCorp = MibIdentifier((1, 3, 6, 1, 4, 1, 476, 1))
liebertUps = MibIdentifier((1, 3, 6, 1, 4, 1, 476, 1, 1))
luExtensions = MibIdentifier((1, 3, 6, 1, 4, 1, 476, 1, 1, 1))
luExperimental = MibIdentifier((1, 3, 6, 1, 4, 1, 476, 1, 1, 2))
luPrivate = MibIdentifier((1, 3, 6, 1, 4, 1, 476, 1, 1, 3))
luCore = MibIdentifier((1, 3, 6, 1, 4, 1, 476, 1, 1, 1, 1))
lcUpsIdent = MibIdentifier((1, 3, 6, 1, 4, 1, 476, 1, 1, 1, 1, 1))
lcUpsIdentManufacturer = MibScalar((1, 3, 6, 1, 4, 1, 476, 1, 1, 1, 1, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(255, 255)).setFixedLength(255)).setMaxAccess("readonly")
if mibBuilder.loadTexts: lcUpsIdentManufacturer.setStatus('optional')
lcUpsIdentModel = MibScalar((1, 3, 6, 1, 4, 1, 476, 1, 1, 1, 1, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(255, 255)).setFixedLength(255)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lcUpsIdentModel.setStatus('optional')
lcUpsIdentSoftwareVersion = MibScalar((1, 3, 6, 1, 4, 1, 476, 1, 1, 1, 1, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(255, 255)).setFixedLength(255)).setMaxAccess("readonly")
if mibBuilder.loadTexts: lcUpsIdentSoftwareVersion.setStatus('optional')
lcUpsIdentSpecific = MibScalar((1, 3, 6, 1, 4, 1, 476, 1, 1, 1, 1, 1, 4), ObjectIdentifier()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lcUpsIdentSpecific.setStatus('optional')
lcUpsIdentFirmwareVersion = MibScalar((1, 3, 6, 1, 4, 1, 476, 1, 1, 1, 1, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(16, 16)).setFixedLength(16)).setMaxAccess("readonly")
if mibBuilder.loadTexts: lcUpsIdentFirmwareVersion.setStatus('optional')
lcUpsIdentSerialNumber = MibScalar((1, 3, 6, 1, 4, 1, 476, 1, 1, 1, 1, 1, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(20, 20)).setFixedLength(20)).setMaxAccess("readonly")
if mibBuilder.loadTexts: lcUpsIdentSerialNumber.setStatus('optional')
lcUpsIdentManufactureDate = MibScalar((1, 3, 6, 1, 4, 1, 476, 1, 1, 1, 1, 1, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(8, 8)).setFixedLength(8)).setMaxAccess("readonly")
if mibBuilder.loadTexts: lcUpsIdentManufactureDate.setStatus('optional')
lcUpsBattery = MibIdentifier((1, 3, 6, 1, 4, 1, 476, 1, 1, 1, 1, 2))
lcUpsBatTimeRemaining = MibScalar((1, 3, 6, 1, 4, 1, 476, 1, 1, 1, 1, 2, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lcUpsBatTimeRemaining.setStatus('optional')
lcUpsBatVoltage = MibScalar((1, 3, 6, 1, 4, 1, 476, 1, 1, 1, 1, 2, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-32768, 32767))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lcUpsBatVoltage.setStatus('optional')
lcUpsBatCapacity = MibScalar((1, 3, 6, 1, 4, 1, 476, 1, 1, 1, 1, 2, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lcUpsBatCapacity.setStatus('optional')
lcUpsInput = MibIdentifier((1, 3, 6, 1, 4, 1, 476, 1, 1, 1, 1, 3))
lcUpsInputFrequency = MibScalar((1, 3, 6, 1, 4, 1, 476, 1, 1, 1, 1, 3, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65536))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lcUpsInputFrequency.setStatus('optional')
lcUpsInputNumLines = MibScalar((1, 3, 6, 1, 4, 1, 476, 1, 1, 1, 1, 3, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 3))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lcUpsInputNumLines.setStatus('optional')
lcUpsInputTable = MibTable((1, 3, 6, 1, 4, 1, 476, 1, 1, 1, 1, 3, 6), )
if mibBuilder.loadTexts: lcUpsInputTable.setStatus('optional')
lcUpsInputEntry = MibTableRow((1, 3, 6, 1, 4, 1, 476, 1, 1, 1, 1, 3, 6, 1), ).setIndexNames((0, "LIEBERT-UPSTATION-GXT-UPS-MIB", "lcUpsInputLine"))
if mibBuilder.loadTexts: lcUpsInputEntry.setStatus('optional')
lcUpsInputLine = MibTableColumn((1, 3, 6, 1, 4, 1, 476, 1, 1, 1, 1, 3, 6, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 3))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lcUpsInputLine.setStatus('optional')
lcUpsInputVoltage = MibTableColumn((1, 3, 6, 1, 4, 1, 476, 1, 1, 1, 1, 3, 6, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65536))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lcUpsInputVoltage.setStatus('optional')
lcUpsOutput = MibIdentifier((1, 3, 6, 1, 4, 1, 476, 1, 1, 1, 1, 4))
lcUpsOutputFrequency = MibScalar((1, 3, 6, 1, 4, 1, 476, 1, 1, 1, 1, 4, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65536))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lcUpsOutputFrequency.setStatus('optional')
lcUpsOutputLoad = MibScalar((1, 3, 6, 1, 4, 1, 476, 1, 1, 1, 1, 4, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lcUpsOutputLoad.setStatus('optional')
lcUpsOutputNumLines = MibScalar((1, 3, 6, 1, 4, 1, 476, 1, 1, 1, 1, 4, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 3))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lcUpsOutputNumLines.setStatus('optional')
lcUpsOutputTable = MibTable((1, 3, 6, 1, 4, 1, 476, 1, 1, 1, 1, 4, 4), )
if mibBuilder.loadTexts: lcUpsOutputTable.setStatus('optional')
lcUpsOutputEntry = MibTableRow((1, 3, 6, 1, 4, 1, 476, 1, 1, 1, 1, 4, 4, 1), ).setIndexNames((0, "LIEBERT-UPSTATION-GXT-UPS-MIB", "lcUpsOutputLine"))
if mibBuilder.loadTexts: lcUpsOutputEntry.setStatus('optional')
lcUpsOutputLine = MibTableColumn((1, 3, 6, 1, 4, 1, 476, 1, 1, 1, 1, 4, 4, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 3))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lcUpsOutputLine.setStatus('optional')
lcUpsOutputVoltage = MibTableColumn((1, 3, 6, 1, 4, 1, 476, 1, 1, 1, 1, 4, 4, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65536))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lcUpsOutputVoltage.setStatus('optional')
lcUpsOutputCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 476, 1, 1, 1, 1, 4, 4, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65536))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lcUpsOutputCurrent.setStatus('optional')
lcUpsOutputWatts = MibScalar((1, 3, 6, 1, 4, 1, 476, 1, 1, 1, 1, 4, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lcUpsOutputWatts.setStatus('optional')
lcUpsInverter = MibIdentifier((1, 3, 6, 1, 4, 1, 476, 1, 1, 1, 1, 5))
lcUpsInverterStatus = MibScalar((1, 3, 6, 1, 4, 1, 476, 1, 1, 1, 1, 5, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("unknown", 1), ("on", 2), ("off", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lcUpsInverterStatus.setStatus('optional')
lcUpsAlarm = MibIdentifier((1, 3, 6, 1, 4, 1, 476, 1, 1, 1, 1, 6))
lcUpsAlarms = MibScalar((1, 3, 6, 1, 4, 1, 476, 1, 1, 1, 1, 6, 1), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lcUpsAlarms.setStatus('optional')
lcUpsAlarmTable = MibTable((1, 3, 6, 1, 4, 1, 476, 1, 1, 1, 1, 6, 2), )
if mibBuilder.loadTexts: lcUpsAlarmTable.setStatus('optional')
lcUpsAlarmEntry = MibTableRow((1, 3, 6, 1, 4, 1, 476, 1, 1, 1, 1, 6, 2, 1), ).setIndexNames((0, "LIEBERT-UPSTATION-GXT-UPS-MIB", "lcUpsAlarmId"))
if mibBuilder.loadTexts: lcUpsAlarmEntry.setStatus('optional')
lcUpsAlarmId = MibTableColumn((1, 3, 6, 1, 4, 1, 476, 1, 1, 1, 1, 6, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lcUpsAlarmId.setStatus('optional')
lcUpsAlarmDescr = MibTableColumn((1, 3, 6, 1, 4, 1, 476, 1, 1, 1, 1, 6, 2, 1, 2), ObjectIdentifier()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lcUpsAlarmDescr.setStatus('optional')
lcUpsAlarmTime = MibTableColumn((1, 3, 6, 1, 4, 1, 476, 1, 1, 1, 1, 6, 2, 1, 3), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lcUpsAlarmTime.setStatus('optional')
lcUpsAlarmConditions = MibIdentifier((1, 3, 6, 1, 4, 1, 476, 1, 1, 1, 1, 6, 3))
lcUpsAlarmLowBatteryWarning = MibIdentifier((1, 3, 6, 1, 4, 1, 476, 1, 1, 1, 1, 6, 3, 1))
lcUpsAlarmLowBatteryShutdown = MibIdentifier((1, 3, 6, 1, 4, 1, 476, 1, 1, 1, 1, 6, 3, 2))
lcUpsAlarmUtilFailed = MibIdentifier((1, 3, 6, 1, 4, 1, 476, 1, 1, 1, 1, 6, 3, 3))
lcUpsAlarmOverTempWarning = MibIdentifier((1, 3, 6, 1, 4, 1, 476, 1, 1, 1, 1, 6, 3, 4))
lcUpsAlarmOverTempShutdown = MibIdentifier((1, 3, 6, 1, 4, 1, 476, 1, 1, 1, 1, 6, 3, 5))
lcUpsAlarmOutputOverloadWarning = MibIdentifier((1, 3, 6, 1, 4, 1, 476, 1, 1, 1, 1, 6, 3, 6))
lcUpsAlarmOutputOverloadShutdown = MibIdentifier((1, 3, 6, 1, 4, 1, 476, 1, 1, 1, 1, 6, 3, 7))
lcUpsAlarmInputOverVoltage = MibIdentifier((1, 3, 6, 1, 4, 1, 476, 1, 1, 1, 1, 6, 3, 8))
lcUpsAlarmBatteryBad = MibIdentifier((1, 3, 6, 1, 4, 1, 476, 1, 1, 1, 1, 6, 3, 9))
lcUpsAlarmOnBattery = MibIdentifier((1, 3, 6, 1, 4, 1, 476, 1, 1, 1, 1, 6, 3, 10))
lcUpsAlarmStopNoticeIssued = MibIdentifier((1, 3, 6, 1, 4, 1, 476, 1, 1, 1, 1, 6, 3, 11))
lcUpsAlarmUpsOff = MibIdentifier((1, 3, 6, 1, 4, 1, 476, 1, 1, 1, 1, 6, 3, 12))
lcUpsAlarmInputFreqError = MibIdentifier((1, 3, 6, 1, 4, 1, 476, 1, 1, 1, 1, 6, 3, 13))
lcUpsAlarmOutputUnderVoltage = MibIdentifier((1, 3, 6, 1, 4, 1, 476, 1, 1, 1, 1, 6, 3, 15))
lcUpsAlarmOutputOverVoltage = MibIdentifier((1, 3, 6, 1, 4, 1, 476, 1, 1, 1, 1, 6, 3, 16))
lcUpsBadBypassPower = MibIdentifier((1, 3, 6, 1, 4, 1, 476, 1, 1, 1, 1, 6, 3, 17))
lcUpsTest = MibIdentifier((1, 3, 6, 1, 4, 1, 476, 1, 1, 1, 1, 7))
lcUpsTestBattery = MibScalar((1, 3, 6, 1, 4, 1, 476, 1, 1, 1, 1, 7, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("unknown", 1), ("start", 2), ("abort", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lcUpsTestBattery.setStatus('optional')
lcUpsTestBatteryStatus = MibScalar((1, 3, 6, 1, 4, 1, 476, 1, 1, 1, 1, 7, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("unknown", 1), ("passed", 2), ("failed", 3), ("inProgress", 4), ("sysFailure", 5), ("notSupported", 6), ("inhibited", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lcUpsTestBatteryStatus.setStatus('optional')
lcUpsControl = MibIdentifier((1, 3, 6, 1, 4, 1, 476, 1, 1, 1, 1, 8))
lcUpsControlOutputOffDelay = MibScalar((1, 3, 6, 1, 4, 1, 476, 1, 1, 1, 1, 8, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lcUpsControlOutputOffDelay.setStatus('optional')
lcUpsControlOutputOnDelay = MibScalar((1, 3, 6, 1, 4, 1, 476, 1, 1, 1, 1, 8, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lcUpsControlOutputOnDelay.setStatus('optional')
lcUpsControlOutputOffTrapDelay = MibScalar((1, 3, 6, 1, 4, 1, 476, 1, 1, 1, 1, 8, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lcUpsControlOutputOffTrapDelay.setStatus('optional')
lcUpsControlOutputOnTrapDelay = MibScalar((1, 3, 6, 1, 4, 1, 476, 1, 1, 1, 1, 8, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lcUpsControlOutputOnTrapDelay.setStatus('optional')
lcUpsControlUnixShutdownDelay = MibScalar((1, 3, 6, 1, 4, 1, 476, 1, 1, 1, 1, 8, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lcUpsControlUnixShutdownDelay.setStatus('optional')
lcUpsControlUnixShutdownTrapDelay = MibScalar((1, 3, 6, 1, 4, 1, 476, 1, 1, 1, 1, 8, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lcUpsControlUnixShutdownTrapDelay.setStatus('optional')
lcUpsControlCancelCommands = MibScalar((1, 3, 6, 1, 4, 1, 476, 1, 1, 1, 1, 8, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("unknown", 1), ("cancel", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lcUpsControlCancelCommands.setStatus('optional')
lcUpsControlRebootAgentDelay = MibScalar((1, 3, 6, 1, 4, 1, 476, 1, 1, 1, 1, 8, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lcUpsControlRebootAgentDelay.setStatus('optional')
lcUpsNominal = MibIdentifier((1, 3, 6, 1, 4, 1, 476, 1, 1, 1, 1, 9))
lcUpsNominalOutputVoltage = MibScalar((1, 3, 6, 1, 4, 1, 476, 1, 1, 1, 1, 9, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65536))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lcUpsNominalOutputVoltage.setStatus('optional')
lcUpsNominalInputVoltage = MibScalar((1, 3, 6, 1, 4, 1, 476, 1, 1, 1, 1, 9, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65536))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lcUpsNominalInputVoltage.setStatus('optional')
lcUpsNominalOutputFreq = MibScalar((1, 3, 6, 1, 4, 1, 476, 1, 1, 1, 1, 9, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65536))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lcUpsNominalOutputFreq.setStatus('optional')
lcUpsNominalInputFreq = MibScalar((1, 3, 6, 1, 4, 1, 476, 1, 1, 1, 1, 9, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65536))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lcUpsNominalInputFreq.setStatus('optional')
lcUpsNominalOutputVaRating = MibScalar((1, 3, 6, 1, 4, 1, 476, 1, 1, 1, 1, 9, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lcUpsNominalOutputVaRating.setStatus('optional')
lcUpsNominalOutputWattsRating = MibScalar((1, 3, 6, 1, 4, 1, 476, 1, 1, 1, 1, 9, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lcUpsNominalOutputWattsRating.setStatus('optional')
lcUpsBypass = MibIdentifier((1, 3, 6, 1, 4, 1, 476, 1, 1, 1, 1, 13))
lcUpsOnBypass = MibScalar((1, 3, 6, 1, 4, 1, 476, 1, 1, 1, 1, 13, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("unknown", 1), ("yes", 2), ("no", 3), ("maintenance", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lcUpsOnBypass.setStatus('optional')
lcUpsBypassFrequency = MibScalar((1, 3, 6, 1, 4, 1, 476, 1, 1, 1, 1, 13, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65536))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lcUpsBypassFrequency.setStatus('optional')
lcUpsBypassNumLines = MibScalar((1, 3, 6, 1, 4, 1, 476, 1, 1, 1, 1, 13, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 3))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lcUpsBypassNumLines.setStatus('optional')
lcUpsBypassTable = MibTable((1, 3, 6, 1, 4, 1, 476, 1, 1, 1, 1, 13, 4), )
if mibBuilder.loadTexts: lcUpsBypassTable.setStatus('optional')
lcUpsBypassEntry = MibTableRow((1, 3, 6, 1, 4, 1, 476, 1, 1, 1, 1, 13, 4, 1), ).setIndexNames((0, "LIEBERT-UPSTATION-GXT-UPS-MIB", "lcUpsBypassLine"))
if mibBuilder.loadTexts: lcUpsBypassEntry.setStatus('optional')
lcUpsBypassLine = MibTableColumn((1, 3, 6, 1, 4, 1, 476, 1, 1, 1, 1, 13, 4, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 3))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lcUpsBypassLine.setStatus('optional')
lcUpsBypassVoltage = MibTableColumn((1, 3, 6, 1, 4, 1, 476, 1, 1, 1, 1, 13, 4, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65536))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lcUpsBypassVoltage.setStatus('optional')
lcUpsConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 476, 1, 1, 1, 1, 14))
lcUpsConfigType = MibScalar((1, 3, 6, 1, 4, 1, 476, 1, 1, 1, 1, 14, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("unknown", 1), ("online", 2), ("offline", 3), ("lineinteractive", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lcUpsConfigType.setStatus('optional')
lcUpsConfigBypassInstalled = MibScalar((1, 3, 6, 1, 4, 1, 476, 1, 1, 1, 1, 14, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("unknown", 1), ("yes", 2), ("no", 3), ("dualinput", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lcUpsConfigBypassInstalled.setStatus('optional')
lcUpsConfigModuleCount = MibScalar((1, 3, 6, 1, 4, 1, 476, 1, 1, 1, 1, 14, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lcUpsConfigModuleCount.setStatus('optional')
lcUpsConfigAudibleStatus = MibScalar((1, 3, 6, 1, 4, 1, 476, 1, 1, 1, 1, 14, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2), ("muted", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lcUpsConfigAudibleStatus.setStatus('optional')
lcUpsConfigLowBattTime = MibScalar((1, 3, 6, 1, 4, 1, 476, 1, 1, 1, 1, 14, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lcUpsConfigLowBattTime.setStatus('optional')
lcUpsConfigAutoRestart = MibScalar((1, 3, 6, 1, 4, 1, 476, 1, 1, 1, 1, 14, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 32767))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lcUpsConfigAutoRestart.setStatus('optional')
lcUpsTraps = MibIdentifier((1, 3, 6, 1, 4, 1, 476, 1, 1, 1, 1, 11))
lcUpsOverloadWarningTrap = NotificationType((1, 3, 6, 1, 4, 1, 476, 1, 1, 1, 1, 11) + (0,1)).setObjects(("SNMPv2-MIB", "sysUpTime"))
lcUpsOverloadShutdownTrap = NotificationType((1, 3, 6, 1, 4, 1, 476, 1, 1, 1, 1, 11) + (0,2)).setObjects(("SNMPv2-MIB", "sysUpTime"))
lcUpsOnBatteryTrap = NotificationType((1, 3, 6, 1, 4, 1, 476, 1, 1, 1, 1, 11) + (0,3)).setObjects(("SNMPv2-MIB", "sysUpTime"))
lcUpsLowBatteryWarningTrap = NotificationType((1, 3, 6, 1, 4, 1, 476, 1, 1, 1, 1, 11) + (0,4)).setObjects(("SNMPv2-MIB", "sysUpTime"))
lcUpsLowBatteryShutdownTrap = NotificationType((1, 3, 6, 1, 4, 1, 476, 1, 1, 1, 1, 11) + (0,5)).setObjects(("SNMPv2-MIB", "sysUpTime"))
lcUpsUtilPowerFailedTrap = NotificationType((1, 3, 6, 1, 4, 1, 476, 1, 1, 1, 1, 11) + (0,6)).setObjects(("SNMPv2-MIB", "sysUpTime"))
lcUpsUtilPowerRestoredTrap = NotificationType((1, 3, 6, 1, 4, 1, 476, 1, 1, 1, 1, 11) + (0,7)).setObjects(("SNMPv2-MIB", "sysUpTime"))
lcUpsInputOverVoltageTrap = NotificationType((1, 3, 6, 1, 4, 1, 476, 1, 1, 1, 1, 11) + (0,8)).setObjects(("SNMPv2-MIB", "sysUpTime"))
lcUpsOverTempWarningTrap = NotificationType((1, 3, 6, 1, 4, 1, 476, 1, 1, 1, 1, 11) + (0,9)).setObjects(("SNMPv2-MIB", "sysUpTime"))
lcUpsOverTempShutdownTrap = NotificationType((1, 3, 6, 1, 4, 1, 476, 1, 1, 1, 1, 11) + (0,10)).setObjects(("SNMPv2-MIB", "sysUpTime"))
lcUpsAlarmTrap = NotificationType((1, 3, 6, 1, 4, 1, 476, 1, 1, 1, 1, 11) + (0,11)).setObjects(("SNMPv2-MIB", "sysUpTime"))
lcUpsOutputOffTrap = NotificationType((1, 3, 6, 1, 4, 1, 476, 1, 1, 1, 1, 11) + (0,12)).setObjects(("SNMPv2-MIB", "sysUpTime"))
lcUpsOutputOffWarningTrap = NotificationType((1, 3, 6, 1, 4, 1, 476, 1, 1, 1, 1, 11) + (0,13)).setObjects(("SNMPv2-MIB", "sysUpTime"))
lcUpsOutputOnTrap = NotificationType((1, 3, 6, 1, 4, 1, 476, 1, 1, 1, 1, 11) + (0,14)).setObjects(("SNMPv2-MIB", "sysUpTime"))
lcUpsOutputOnWarningTrap = NotificationType((1, 3, 6, 1, 4, 1, 476, 1, 1, 1, 1, 11) + (0,15)).setObjects(("SNMPv2-MIB", "sysUpTime"))
lcUpsUnixShutdownTrap = NotificationType((1, 3, 6, 1, 4, 1, 476, 1, 1, 1, 1, 11) + (0,16)).setObjects(("SNMPv2-MIB", "sysUpTime"))
lcUpsUnixShutdownWarningTrap = NotificationType((1, 3, 6, 1, 4, 1, 476, 1, 1, 1, 1, 11) + (0,17)).setObjects(("SNMPv2-MIB", "sysUpTime"))
lcUpsInputFreqErrorTrap = NotificationType((1, 3, 6, 1, 4, 1, 476, 1, 1, 1, 1, 11) + (0,22)).setObjects(("SNMPv2-MIB", "sysUpTime"))
lcUpsOutputOverVoltageTrap = NotificationType((1, 3, 6, 1, 4, 1, 476, 1, 1, 1, 1, 11) + (0,24)).setObjects(("SNMPv2-MIB", "sysUpTime"))
luUPStationGxt = MibIdentifier((1, 3, 6, 1, 4, 1, 476, 1, 1, 1, 14))
mibBuilder.exportSymbols("LIEBERT-UPSTATION-GXT-UPS-MIB", lcUpsOutputFrequency=lcUpsOutputFrequency, lcUpsInverterStatus=lcUpsInverterStatus, lcUpsAlarmTrap=lcUpsAlarmTrap, lcUpsConfigBypassInstalled=lcUpsConfigBypassInstalled, lcUpsUnixShutdownTrap=lcUpsUnixShutdownTrap, lcUpsControl=lcUpsControl, lcUpsInputOverVoltageTrap=lcUpsInputOverVoltageTrap, lcUpsAlarmInputFreqError=lcUpsAlarmInputFreqError, lcUpsAlarmUtilFailed=lcUpsAlarmUtilFailed, lcUpsAlarmInputOverVoltage=lcUpsAlarmInputOverVoltage, lcUpsOnBatteryTrap=lcUpsOnBatteryTrap, lcUpsAlarmLowBatteryWarning=lcUpsAlarmLowBatteryWarning, lcUpsAlarmUpsOff=lcUpsAlarmUpsOff, lcUpsInputVoltage=lcUpsInputVoltage, lcUpsUtilPowerRestoredTrap=lcUpsUtilPowerRestoredTrap, lcUpsBypassVoltage=lcUpsBypassVoltage, lcUpsOnBypass=lcUpsOnBypass, luCore=luCore, lcUpsIdentSpecific=lcUpsIdentSpecific, lcUpsInput=lcUpsInput, lcUpsAlarmOverTempWarning=lcUpsAlarmOverTempWarning, lcUpsBypassTable=lcUpsBypassTable, lcUpsOutputOffWarningTrap=lcUpsOutputOffWarningTrap, lcUpsNominal=lcUpsNominal, lcUpsIdentModel=lcUpsIdentModel, lcUpsOutputNumLines=lcUpsOutputNumLines, lcUpsAlarmOnBattery=lcUpsAlarmOnBattery, lcUpsConfigType=lcUpsConfigType, lcUpsAlarmId=lcUpsAlarmId, lcUpsOverTempWarningTrap=lcUpsOverTempWarningTrap, lcUpsOverloadWarningTrap=lcUpsOverloadWarningTrap, lcUpsNominalOutputFreq=lcUpsNominalOutputFreq, lcUpsNominalOutputVoltage=lcUpsNominalOutputVoltage, lcUpsInputFreqErrorTrap=lcUpsInputFreqErrorTrap, lcUpsTest=lcUpsTest, lcUpsInputLine=lcUpsInputLine, lcUpsOutputTable=lcUpsOutputTable, lcUpsConfig=lcUpsConfig, lcUpsTestBatteryStatus=lcUpsTestBatteryStatus, lcUpsOutputLine=lcUpsOutputLine, lcUpsOutputOverVoltageTrap=lcUpsOutputOverVoltageTrap, lcUpsTraps=lcUpsTraps, lcUpsIdentSoftwareVersion=lcUpsIdentSoftwareVersion, lcUpsOutputLoad=lcUpsOutputLoad, lcUpsBypassNumLines=lcUpsBypassNumLines, liebertCorp=liebertCorp, lcUpsInputEntry=lcUpsInputEntry, lcUpsOutputOnTrap=lcUpsOutputOnTrap, lcUpsBattery=lcUpsBattery, lcUpsBatCapacity=lcUpsBatCapacity, lcUpsAlarmStopNoticeIssued=lcUpsAlarmStopNoticeIssued, lcUpsInputTable=lcUpsInputTable, lcUpsBypassFrequency=lcUpsBypassFrequency, lcUpsControlOutputOffTrapDelay=lcUpsControlOutputOffTrapDelay, lcUpsOutputCurrent=lcUpsOutputCurrent, lcUpsIdentManufacturer=lcUpsIdentManufacturer, luUPStationGxt=luUPStationGxt, lcUpsAlarmOutputOverloadShutdown=lcUpsAlarmOutputOverloadShutdown, lcUpsLowBatteryShutdownTrap=lcUpsLowBatteryShutdownTrap, lcUpsAlarmConditions=lcUpsAlarmConditions, lcUpsLowBatteryWarningTrap=lcUpsLowBatteryWarningTrap, lcUpsAlarmOverTempShutdown=lcUpsAlarmOverTempShutdown, lcUpsControlOutputOnDelay=lcUpsControlOutputOnDelay, luPrivate=luPrivate, lcUpsInputFrequency=lcUpsInputFrequency, lcUpsOverTempShutdownTrap=lcUpsOverTempShutdownTrap, lcUpsNominalOutputVaRating=lcUpsNominalOutputVaRating, lcUpsInputNumLines=lcUpsInputNumLines, lcUpsBatVoltage=lcUpsBatVoltage, lcUpsIdentFirmwareVersion=lcUpsIdentFirmwareVersion, lcUpsOutputVoltage=lcUpsOutputVoltage, lcUpsBypassLine=lcUpsBypassLine, lcUpsInverter=lcUpsInverter, lcUpsBadBypassPower=lcUpsBadBypassPower, lcUpsNominalInputFreq=lcUpsNominalInputFreq, lcUpsOutputWatts=lcUpsOutputWatts, lcUpsBatTimeRemaining=lcUpsBatTimeRemaining, lcUpsControlUnixShutdownDelay=lcUpsControlUnixShutdownDelay, lcUpsAlarms=lcUpsAlarms, lcUpsConfigLowBattTime=lcUpsConfigLowBattTime, lcUpsOutputOnWarningTrap=lcUpsOutputOnWarningTrap, lcUpsControlOutputOffDelay=lcUpsControlOutputOffDelay, lcUpsTestBattery=lcUpsTestBattery, lcUpsAlarmDescr=lcUpsAlarmDescr, lcUpsAlarmLowBatteryShutdown=lcUpsAlarmLowBatteryShutdown, lcUpsOutput=lcUpsOutput, lcUpsNominalOutputWattsRating=lcUpsNominalOutputWattsRating, lcUpsConfigAutoRestart=lcUpsConfigAutoRestart, lcUpsAlarmEntry=lcUpsAlarmEntry, lcUpsAlarmOutputOverVoltage=lcUpsAlarmOutputOverVoltage, lcUpsAlarmOutputUnderVoltage=lcUpsAlarmOutputUnderVoltage, lcUpsUtilPowerFailedTrap=lcUpsUtilPowerFailedTrap, lcUpsControlUnixShutdownTrapDelay=lcUpsControlUnixShutdownTrapDelay, lcUpsAlarmBatteryBad=lcUpsAlarmBatteryBad, lcUpsOverloadShutdownTrap=lcUpsOverloadShutdownTrap, lcUpsIdentSerialNumber=lcUpsIdentSerialNumber, lcUpsNominalInputVoltage=lcUpsNominalInputVoltage, lcUpsOutputEntry=lcUpsOutputEntry, lcUpsAlarmOutputOverloadWarning=lcUpsAlarmOutputOverloadWarning, lcUpsAlarmTable=lcUpsAlarmTable, lcUpsBypassEntry=lcUpsBypassEntry, lcUpsConfigModuleCount=lcUpsConfigModuleCount, lcUpsConfigAudibleStatus=lcUpsConfigAudibleStatus, luExtensions=luExtensions, liebertUps=liebertUps, lcUpsOutputOffTrap=lcUpsOutputOffTrap, lcUpsUnixShutdownWarningTrap=lcUpsUnixShutdownWarningTrap, luExperimental=luExperimental, lcUpsControlCancelCommands=lcUpsControlCancelCommands, lcUpsAlarm=lcUpsAlarm, lcUpsIdent=lcUpsIdent, emerson=emerson, lcUpsIdentManufactureDate=lcUpsIdentManufactureDate, lcUpsAlarmTime=lcUpsAlarmTime, lcUpsBypass=lcUpsBypass, lcUpsControlRebootAgentDelay=lcUpsControlRebootAgentDelay, lcUpsControlOutputOnTrapDelay=lcUpsControlOutputOnTrapDelay)
