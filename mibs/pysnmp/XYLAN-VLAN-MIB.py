#
# PySNMP MIB module XYLAN-VLAN-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/XYLAN-VLAN-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 21:39:04 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, ObjectIdentifier, Integer = mibBuilder.importSymbols("ASN1", "OctetString", "ObjectIdentifier", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueSizeConstraint, ValueRangeConstraint, ConstraintsUnion, ConstraintsIntersection, SingleValueConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueSizeConstraint", "ValueRangeConstraint", "ConstraintsUnion", "ConstraintsIntersection", "SingleValueConstraint")
MacAddress, BridgeId, Timeout = mibBuilder.importSymbols("BRIDGE-MIB", "MacAddress", "BridgeId", "Timeout")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
IpAddress, Counter32, Unsigned32, Gauge32, ModuleIdentity, Integer32, MibScalar, MibTable, MibTableRow, MibTableColumn, iso, Counter64, MibIdentifier, ObjectIdentity, Bits, NotificationType, TimeTicks = mibBuilder.importSymbols("SNMPv2-SMI", "IpAddress", "Counter32", "Unsigned32", "Gauge32", "ModuleIdentity", "Integer32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "iso", "Counter64", "MibIdentifier", "ObjectIdentity", "Bits", "NotificationType", "TimeTicks")
TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString")
xylanVlanArch, = mibBuilder.importSymbols("XYLAN-BASE-MIB", "xylanVlanArch")
XylanPortFuncCodes, = mibBuilder.importSymbols("XYLAN-PORT-MIB", "XylanPortFuncCodes")
vLanInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 800, 2, 2, 1))
vIPRouterInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 800, 2, 2, 2))
vIPXRouterInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 800, 2, 2, 3))
vBrdgInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 800, 2, 2, 4))
vStpInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 800, 2, 2, 5))
vRipInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 800, 2, 2, 7))
vSr = MibIdentifier((1, 3, 6, 1, 4, 1, 800, 2, 2, 8))
vTrunking = MibIdentifier((1, 3, 6, 1, 4, 1, 800, 2, 2, 9))
vAutoTracker = MibIdentifier((1, 3, 6, 1, 4, 1, 800, 2, 2, 10))
atvIPRouterInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 800, 2, 2, 11))
atvIPXRouterInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 800, 2, 2, 12))
v80210 = MibIdentifier((1, 3, 6, 1, 4, 1, 800, 2, 2, 13))
vDBr = MibIdentifier((1, 3, 6, 1, 4, 1, 800, 2, 2, 14))
v8021Q = MibIdentifier((1, 3, 6, 1, 4, 1, 800, 2, 2, 15))
vDupMac = MibIdentifier((1, 3, 6, 1, 4, 1, 800, 2, 2, 16))
vPmap = MibIdentifier((1, 3, 6, 1, 4, 1, 800, 2, 2, 17))
class XylanVlanAdminStatCodes(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))
    namedValues = NamedValues(("disable", 1), ("enable", 2), ("delete", 3), ("create", 4), ("modify", 5))

class XylanVlanOperStatCodes(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2))
    namedValues = NamedValues(("inactive", 1), ("active", 2))

class XylanVlanModes(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))
    namedValues = NamedValues(("invalid", 1), ("other", 2), ("standard", 3), ("atmCIP", 4), ("frRouter", 5))

class NetNumber(OctetString):
    subtypeSpec = OctetString.subtypeSpec + ValueSizeConstraint(4, 4)
    fixedLength = 4

vLanCurrentNumber = MibScalar((1, 3, 6, 1, 4, 1, 800, 2, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vLanCurrentNumber.setStatus('mandatory')
vLanTable = MibTable((1, 3, 6, 1, 4, 1, 800, 2, 2, 1, 2), )
if mibBuilder.loadTexts: vLanTable.setStatus('mandatory')
vLanEntry = MibTableRow((1, 3, 6, 1, 4, 1, 800, 2, 2, 1, 2, 1), ).setIndexNames((0, "XYLAN-VLAN-MIB", "vLanNumber"))
if mibBuilder.loadTexts: vLanEntry.setStatus('mandatory')
vLanNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 2, 1, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vLanNumber.setStatus('mandatory')
vLanBridgeAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 2, 1, 2, 1, 2), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vLanBridgeAddress.setStatus('mandatory')
vLanBridgeType = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 2, 1, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("unknown", 1), ("other", 2), ("transparent-only", 3), ("sourceroute-only", 4), ("srt", 5), ("not-supported", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vLanBridgeType.setStatus('deprecated')
vLanDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 2, 1, 2, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 31))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vLanDescription.setStatus('mandatory')
vLanAdmStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 2, 1, 2, 1, 5), XylanVlanAdminStatCodes()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vLanAdmStatus.setStatus('mandatory')
vLanOperStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 2, 1, 2, 1, 6), XylanVlanOperStatCodes()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vLanOperStatus.setStatus('mandatory')
vLanMode = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 2, 1, 2, 1, 7), XylanVlanModes()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vLanMode.setStatus('mandatory')
vLanFloodOverride = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 2, 1, 2, 1, 8), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vLanFloodOverride.setStatus('mandatory')
vLanRouterAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 2, 1, 2, 1, 9), MacAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vLanRouterAddress.setStatus('mandatory')
vLanMobileGroup = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 2, 1, 2, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vLanMobileGroup.setStatus('mandatory')
vLanAuthGroup = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 2, 1, 2, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vLanAuthGroup.setStatus('mandatory')
vLanAuthGroupProtocol = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 2, 1, 2, 1, 12), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vLanAuthGroupProtocol.setStatus('mandatory')
vLanStpStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 2, 1, 2, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("off", 1), ("on", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vLanStpStatus.setStatus('mandatory')
vLanBrdgTpExtendedAgeingTime = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 2, 1, 2, 1, 14), Integer32().subtype(subtypeSpec=ValueRangeConstraint(10, 1000000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vLanBrdgTpExtendedAgeingTime.setStatus('mandatory')
vLanPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 2, 1, 2, 1, 15), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vLanPriority.setStatus('mandatory')
vLanNextFreeNumber = MibScalar((1, 3, 6, 1, 4, 1, 800, 2, 2, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vLanNextFreeNumber.setStatus('mandatory')
vIPRouterTable = MibTable((1, 3, 6, 1, 4, 1, 800, 2, 2, 2, 1), )
if mibBuilder.loadTexts: vIPRouterTable.setStatus('mandatory')
vIPRouterEntry = MibTableRow((1, 3, 6, 1, 4, 1, 800, 2, 2, 2, 1, 1), ).setIndexNames((0, "XYLAN-VLAN-MIB", "vIPRouterVLan"))
if mibBuilder.loadTexts: vIPRouterEntry.setStatus('mandatory')
vIPRouterVLan = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 2, 2, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vIPRouterVLan.setStatus('mandatory')
vIPRouterProtocol = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 2, 2, 1, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(2, 2)).setFixedLength(2)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vIPRouterProtocol.setStatus('mandatory')
vIPRouterNetAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 2, 2, 1, 1, 3), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vIPRouterNetAddress.setStatus('mandatory')
vIPRouterSubNetMask = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 2, 2, 1, 1, 4), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vIPRouterSubNetMask.setStatus('mandatory')
vIPRouterBcastAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 2, 2, 1, 1, 5), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vIPRouterBcastAddress.setStatus('mandatory')
vIPRouterDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 2, 2, 1, 1, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 31))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vIPRouterDescription.setStatus('optional')
vIPRouterAdmStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 2, 2, 1, 1, 7), XylanVlanAdminStatCodes()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vIPRouterAdmStatus.setStatus('mandatory')
vIPRouterOperStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 2, 2, 1, 1, 8), XylanVlanOperStatCodes()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vIPRouterOperStatus.setStatus('mandatory')
vIPRouterFramingType = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 2, 2, 1, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("ethernet-2", 1), ("ethernet-802-3", 2), ("fddi", 3), ("token-ring", 4), ("token-ring-source-routed", 5), ("atm-1483", 6)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vIPRouterFramingType.setStatus('mandatory')
vIPRouterRipConfigMode = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 2, 2, 1, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("silent", 1), ("deaf", 2), ("active", 3), ("inactive", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vIPRouterRipConfigMode.setStatus('mandatory')
class VIPRouterRelayServType(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8))
    namedValues = NamedValues(("vIPRouterRelayBootp", 1), ("vIPRouterRelayNBNS", 2), ("vIPRouterRelayNBDD", 3), ("vIPRouterRelayGen1", 4), ("vIPRouterRelayGen2", 5), ("vIPRouterRelayGen3", 6), ("vIPRouterRelayGen4", 7), ("vIPRouterRelayGen5", 8))

vIPRouterRelayTable = MibTable((1, 3, 6, 1, 4, 1, 800, 2, 2, 2, 2), )
if mibBuilder.loadTexts: vIPRouterRelayTable.setStatus('mandatory')
vIPRouterRelayEntry = MibTableRow((1, 3, 6, 1, 4, 1, 800, 2, 2, 2, 2, 1), ).setIndexNames((0, "XYLAN-VLAN-MIB", "vIPRouterRelayService"))
if mibBuilder.loadTexts: vIPRouterRelayEntry.setStatus('mandatory')
vIPRouterRelayService = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 2, 2, 2, 1, 1), VIPRouterRelayServType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vIPRouterRelayService.setStatus('mandatory')
vIPRouterRelayMode = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 2, 2, 2, 1, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vIPRouterRelayMode.setStatus('mandatory')
vIPRouterRelayNextHop = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 2, 2, 2, 1, 3), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vIPRouterRelayNextHop.setStatus('mandatory')
vIPRouterRelayParam1 = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 2, 2, 2, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vIPRouterRelayParam1.setStatus('mandatory')
vIPRouterRelayParam2 = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 2, 2, 2, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vIPRouterRelayParam2.setStatus('mandatory')
vIPRouterRelayDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 2, 2, 2, 1, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 31))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vIPRouterRelayDescription.setStatus('mandatory')
vIPXRouterTable = MibTable((1, 3, 6, 1, 4, 1, 800, 2, 2, 3, 1), )
if mibBuilder.loadTexts: vIPXRouterTable.setStatus('mandatory')
vIPXRouterEntry = MibTableRow((1, 3, 6, 1, 4, 1, 800, 2, 2, 3, 1, 1), ).setIndexNames((0, "XYLAN-VLAN-MIB", "vIPXRouterVLan"))
if mibBuilder.loadTexts: vIPXRouterEntry.setStatus('mandatory')
vIPXRouterVLan = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 2, 3, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vIPXRouterVLan.setStatus('mandatory')
vIPXRouterProtocol = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 2, 3, 1, 1, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vIPXRouterProtocol.setStatus('mandatory')
vIPXRouterNetAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 2, 3, 1, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(4, 4)).setFixedLength(4)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vIPXRouterNetAddress.setStatus('mandatory')
vIPXRouterFramingType = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 2, 3, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12))).clone(namedValues=NamedValues(("ethernet-2", 1), ("ethernet-802-3-llc", 2), ("ethernet-802-3-snap", 3), ("ethernet-802-3-raw", 4), ("fddi-snap", 5), ("fddi-snap-sr", 6), ("fddi-llc", 7), ("fddi-llc-sr", 8), ("token-ring-snap", 9), ("token-ring-snap-sr", 10), ("token-ring-llc", 11), ("token-ring-llc-sr", 12)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vIPXRouterFramingType.setStatus('mandatory')
vIPXRouterDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 2, 3, 1, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 31))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vIPXRouterDescription.setStatus('optional')
vIPXRouterAdmStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 2, 3, 1, 1, 6), XylanVlanAdminStatCodes()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vIPXRouterAdmStatus.setStatus('mandatory')
vIPXRouterOperStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 2, 3, 1, 1, 7), XylanVlanOperStatCodes()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vIPXRouterOperStatus.setStatus('mandatory')
vIPXSrcRteType = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 2, 3, 1, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("are", 1), ("ste", 2), ("not-applicable", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vIPXSrcRteType.setStatus('mandatory')
vBrdgTpLearnEntryDiscards = MibScalar((1, 3, 6, 1, 4, 1, 800, 2, 2, 4, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vBrdgTpLearnEntryDiscards.setStatus('mandatory')
vBrdgTpAgingTime = MibScalar((1, 3, 6, 1, 4, 1, 800, 2, 2, 4, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(10, 1000000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vBrdgTpAgingTime.setStatus('mandatory')
vBrdgTpFdbTable = MibTable((1, 3, 6, 1, 4, 1, 800, 2, 2, 4, 3), )
if mibBuilder.loadTexts: vBrdgTpFdbTable.setStatus('mandatory')
vBrdgTpFdbEntry = MibTableRow((1, 3, 6, 1, 4, 1, 800, 2, 2, 4, 3, 1), ).setIndexNames((0, "XYLAN-VLAN-MIB", "vBrdgTpFdbGroupId"), (0, "XYLAN-VLAN-MIB", "vBrdgTpFdbAddress"))
if mibBuilder.loadTexts: vBrdgTpFdbEntry.setStatus('mandatory')
vBrdgTpFdbGroupId = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 2, 4, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vBrdgTpFdbGroupId.setStatus('mandatory')
vBrdgTpFdbAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 2, 4, 3, 1, 2), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vBrdgTpFdbAddress.setStatus('mandatory')
vBrdgTpFdbRcvPortSlot = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 2, 4, 3, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vBrdgTpFdbRcvPortSlot.setStatus('mandatory')
vBrdgTpFdbRcvPortIF = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 2, 4, 3, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vBrdgTpFdbRcvPortIF.setStatus('mandatory')
vBrdgTpFdbRcvPortFuncTyp = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 2, 4, 3, 1, 5), XylanPortFuncCodes()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vBrdgTpFdbRcvPortFuncTyp.setStatus('mandatory')
vBrdgTpFdbRcvPortFuncTypInst = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 2, 4, 3, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vBrdgTpFdbRcvPortFuncTypInst.setStatus('mandatory')
vBrdgTpFdbRcvStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 2, 4, 3, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("other", 1), ("invalid", 2), ("learned", 3), ("self", 4), ("mgmt", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vBrdgTpFdbRcvStatus.setStatus('mandatory')
vBrdgTpFdbRcvVLANMembership = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 2, 4, 3, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vBrdgTpFdbRcvVLANMembership.setStatus('mandatory')
vBrdgTpFdbDupStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 2, 4, 3, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vBrdgTpFdbDupStatus.setStatus('mandatory')
vBrdgTpFdbLastSeenTime = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 2, 4, 3, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vBrdgTpFdbLastSeenTime.setStatus('mandatory')
vBrdgStaticTable = MibTable((1, 3, 6, 1, 4, 1, 800, 2, 2, 4, 4), )
if mibBuilder.loadTexts: vBrdgStaticTable.setStatus('mandatory')
vBrdgStaticEntry = MibTableRow((1, 3, 6, 1, 4, 1, 800, 2, 2, 4, 4, 1), ).setIndexNames((0, "XYLAN-VLAN-MIB", "vBrdgStaticAddress"))
if mibBuilder.loadTexts: vBrdgStaticEntry.setStatus('mandatory')
vBrdgStaticAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 2, 4, 4, 1, 1), MacAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vBrdgStaticAddress.setStatus('mandatory')
vBrdgStaticPortSlot = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 2, 4, 4, 1, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vBrdgStaticPortSlot.setStatus('mandatory')
vBrdgStaticPortIF = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 2, 4, 4, 1, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vBrdgStaticPortIF.setStatus('mandatory')
vBrdgStaticPortFuncTyp = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 2, 4, 4, 1, 4), XylanPortFuncCodes()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vBrdgStaticPortFuncTyp.setStatus('mandatory')
vBrdgStaticPortFuncTypInst = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 2, 4, 4, 1, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vBrdgStaticPortFuncTypInst.setStatus('mandatory')
vBrdgStaticStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 2, 4, 4, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("other", 1), ("invalid", 2), ("permanent", 3), ("deleteOnReset", 4), ("deleteOnTimeout", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vBrdgStaticStatus.setStatus('mandatory')
vBrdgTpATVLANAgeingTime = MibScalar((1, 3, 6, 1, 4, 1, 800, 2, 2, 4, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(10, 1000000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vBrdgTpATVLANAgeingTime.setStatus('mandatory')
vStpProtocolSpecification = MibScalar((1, 3, 6, 1, 4, 1, 800, 2, 2, 5, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("unknown", 1), ("decLb100", 2), ("ieee8021d", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vStpProtocolSpecification.setStatus('mandatory')
vStpPriority = MibScalar((1, 3, 6, 1, 4, 1, 800, 2, 2, 5, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vStpPriority.setStatus('mandatory')
vStpBridgeAddress = MibScalar((1, 3, 6, 1, 4, 1, 800, 2, 2, 5, 3), BridgeId()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vStpBridgeAddress.setStatus('mandatory')
vStpTimeSinceTopologyChange = MibScalar((1, 3, 6, 1, 4, 1, 800, 2, 2, 5, 4), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vStpTimeSinceTopologyChange.setStatus('mandatory')
vStpTopChanges = MibScalar((1, 3, 6, 1, 4, 1, 800, 2, 2, 5, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vStpTopChanges.setStatus('mandatory')
vStpDesignatedRoot = MibScalar((1, 3, 6, 1, 4, 1, 800, 2, 2, 5, 6), BridgeId()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vStpDesignatedRoot.setStatus('mandatory')
vStpRootCost = MibScalar((1, 3, 6, 1, 4, 1, 800, 2, 2, 5, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vStpRootCost.setStatus('mandatory')
vStpRootPortSlot = MibScalar((1, 3, 6, 1, 4, 1, 800, 2, 2, 5, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vStpRootPortSlot.setStatus('mandatory')
vStpRootPortIF = MibScalar((1, 3, 6, 1, 4, 1, 800, 2, 2, 5, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vStpRootPortIF.setStatus('mandatory')
vStpRootPortFuncTyp = MibScalar((1, 3, 6, 1, 4, 1, 800, 2, 2, 5, 10), XylanPortFuncCodes()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vStpRootPortFuncTyp.setStatus('mandatory')
vStpRootPortFuncTypInst = MibScalar((1, 3, 6, 1, 4, 1, 800, 2, 2, 5, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vStpRootPortFuncTypInst.setStatus('mandatory')
vStpMaxAge = MibScalar((1, 3, 6, 1, 4, 1, 800, 2, 2, 5, 12), Timeout()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vStpMaxAge.setStatus('mandatory')
vStpHelloTime = MibScalar((1, 3, 6, 1, 4, 1, 800, 2, 2, 5, 13), Timeout()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vStpHelloTime.setStatus('mandatory')
vStpHoldTime = MibScalar((1, 3, 6, 1, 4, 1, 800, 2, 2, 5, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vStpHoldTime.setStatus('mandatory')
vStpForwardDelay = MibScalar((1, 3, 6, 1, 4, 1, 800, 2, 2, 5, 15), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vStpForwardDelay.setStatus('mandatory')
vStpBridgeMaxAge = MibScalar((1, 3, 6, 1, 4, 1, 800, 2, 2, 5, 16), Timeout().subtype(subtypeSpec=ValueRangeConstraint(600, 4000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vStpBridgeMaxAge.setStatus('mandatory')
vStpBridgeHelloTime = MibScalar((1, 3, 6, 1, 4, 1, 800, 2, 2, 5, 17), Timeout().subtype(subtypeSpec=ValueRangeConstraint(100, 1000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vStpBridgeHelloTime.setStatus('mandatory')
vStpBridgeForwardDelay = MibScalar((1, 3, 6, 1, 4, 1, 800, 2, 2, 5, 18), Timeout().subtype(subtypeSpec=ValueRangeConstraint(400, 3000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vStpBridgeForwardDelay.setStatus('mandatory')
vStpPortTable = MibTable((1, 3, 6, 1, 4, 1, 800, 2, 2, 5, 19), )
if mibBuilder.loadTexts: vStpPortTable.setStatus('mandatory')
vStpPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 800, 2, 2, 5, 19, 1), ).setIndexNames((0, "XYLAN-VLAN-MIB", "vStpPortSlot"), (0, "XYLAN-VLAN-MIB", "vStpPortIF"), (0, "XYLAN-VLAN-MIB", "vStpPortFuncTyp"), (0, "XYLAN-VLAN-MIB", "vStpPortFuncTypInst"))
if mibBuilder.loadTexts: vStpPortEntry.setStatus('mandatory')
vStpPortSlot = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 2, 5, 19, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vStpPortSlot.setStatus('mandatory')
vStpPortIF = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 2, 5, 19, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vStpPortIF.setStatus('mandatory')
vStpPortFuncTyp = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 2, 5, 19, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vStpPortFuncTyp.setStatus('mandatory')
vStpPortFuncTypInst = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 2, 5, 19, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vStpPortFuncTypInst.setStatus('mandatory')
vStpPortPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 2, 5, 19, 1, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vStpPortPriority.setStatus('mandatory')
vStpPortState = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 2, 5, 19, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("disabled", 1), ("blocking", 2), ("listening", 3), ("learning", 4), ("forwarding", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vStpPortState.setStatus('mandatory')
vStpPortEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 2, 5, 19, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vStpPortEnable.setStatus('mandatory')
vStpPortPathCost = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 2, 5, 19, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vStpPortPathCost.setStatus('mandatory')
vStpPortDesignatedRoot = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 2, 5, 19, 1, 9), BridgeId()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vStpPortDesignatedRoot.setStatus('mandatory')
vStpPortDesignatedCost = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 2, 5, 19, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vStpPortDesignatedCost.setStatus('mandatory')
vStpPortDesignatedBridge = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 2, 5, 19, 1, 11), BridgeId()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vStpPortDesignatedBridge.setStatus('mandatory')
vStpPortDesignatedPtPrio = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 2, 5, 19, 1, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vStpPortDesignatedPtPrio.setStatus('mandatory')
vStpPortDesignatedPtSlot = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 2, 5, 19, 1, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vStpPortDesignatedPtSlot.setStatus('mandatory')
vStpPortDesignatedPtIF = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 2, 5, 19, 1, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vStpPortDesignatedPtIF.setStatus('mandatory')
vStpPortDesignatedPtFuncTyp = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 2, 5, 19, 1, 15), XylanPortFuncCodes()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vStpPortDesignatedPtFuncTyp.setStatus('mandatory')
vStpPortDesignatedPtFuncTypInst = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 2, 5, 19, 1, 16), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vStpPortDesignatedPtFuncTypInst.setStatus('mandatory')
vStpPortForwardTransitions = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 2, 5, 19, 1, 17), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vStpPortForwardTransitions.setStatus('mandatory')
vStpLanMode = MibScalar((1, 3, 6, 1, 4, 1, 800, 2, 2, 5, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("ieee-stap", 1), ("ibm-stap", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vStpLanMode.setStatus('mandatory')
vStpStatus = MibScalar((1, 3, 6, 1, 4, 1, 800, 2, 2, 5, 21), XylanVlanOperStatCodes()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vStpStatus.setStatus('mandatory')
vRipInfoTable = MibTable((1, 3, 6, 1, 4, 1, 800, 2, 2, 7, 1), )
if mibBuilder.loadTexts: vRipInfoTable.setStatus('mandatory')
vRipInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 800, 2, 2, 7, 1, 1), ).setIndexNames((0, "XYLAN-VLAN-MIB", "vRipInfovLanNumber"))
if mibBuilder.loadTexts: vRipInfoEntry.setStatus('mandatory')
vRipInfovLanNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 2, 7, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vRipInfovLanNumber.setStatus('mandatory')
vRipInPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 2, 7, 1, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vRipInPkts.setStatus('mandatory')
vRipOutPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 2, 7, 1, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vRipOutPkts.setStatus('mandatory')
vRipBadSize = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 2, 7, 1, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vRipBadSize.setStatus('mandatory')
vRipBadVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 2, 7, 1, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vRipBadVersion.setStatus('mandatory')
vRipNonZero = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 2, 7, 1, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vRipNonZero.setStatus('mandatory')
vRipBadFamily = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 2, 7, 1, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vRipBadFamily.setStatus('mandatory')
vRipBadMetric = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 2, 7, 1, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vRipBadMetric.setStatus('mandatory')
vRipBadAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 2, 7, 1, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vRipBadAddr.setStatus('mandatory')
vRipBadCommand = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 2, 7, 1, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vRipBadCommand.setStatus('mandatory')
vRipTransmitsFailed = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 2, 7, 1, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vRipTransmitsFailed.setStatus('mandatory')
vSrTable = MibTable((1, 3, 6, 1, 4, 1, 800, 2, 2, 8, 1), )
if mibBuilder.loadTexts: vSrTable.setStatus('mandatory')
vSrSapFilterEnable = MibScalar((1, 3, 6, 1, 4, 1, 800, 2, 2, 8, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("on", 1), ("off", 2), ("turnOffAndClearAll", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vSrSapFilterEnable.setStatus('mandatory')
vSrPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 800, 2, 2, 8, 1, 1), ).setIndexNames((0, "XYLAN-VLAN-MIB", "vSrSlot"), (0, "XYLAN-VLAN-MIB", "vSrInterface"), (0, "XYLAN-VLAN-MIB", "vSrFuncType"), (0, "XYLAN-VLAN-MIB", "vSrInstance"))
if mibBuilder.loadTexts: vSrPortEntry.setStatus('mandatory')
vSrSlot = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 2, 8, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 9))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vSrSlot.setStatus('mandatory')
vSrInterface = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 2, 8, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vSrInterface.setStatus('mandatory')
vSrFuncType = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 2, 8, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 9))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vSrFuncType.setStatus('mandatory')
vSrInstance = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 2, 8, 1, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 254))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vSrInstance.setStatus('mandatory')
vSrHopCount = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 2, 8, 1, 1, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vSrHopCount.setStatus('mandatory')
vSrLocalSegment = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 2, 8, 1, 1, 6), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vSrLocalSegment.setStatus('mandatory')
vSrBridgeNum = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 2, 8, 1, 1, 7), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vSrBridgeNum.setStatus('mandatory')
vSrVirtualRing = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 2, 8, 1, 1, 8), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vSrVirtualRing.setStatus('mandatory')
vSrLargestFrame = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 2, 8, 1, 1, 9), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vSrLargestFrame.setStatus('mandatory')
vSrSTESpanMode = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 2, 8, 1, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("auto-span", 1), ("disabled", 2), ("forced", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vSrSTESpanMode.setStatus('mandatory')
vSrSpecInFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 2, 8, 1, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vSrSpecInFrames.setStatus('mandatory')
vSrSpecOutFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 2, 8, 1, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vSrSpecOutFrames.setStatus('mandatory')
vSrApeInFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 2, 8, 1, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vSrApeInFrames.setStatus('mandatory')
vSrApeOutFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 2, 8, 1, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vSrApeOutFrames.setStatus('mandatory')
vSrSteInFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 2, 8, 1, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vSrSteInFrames.setStatus('mandatory')
vSrSteOutFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 2, 8, 1, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vSrSteOutFrames.setStatus('mandatory')
vSrInvalidRif = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 2, 8, 1, 1, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vSrInvalidRif.setStatus('mandatory')
vSrDuplicateSegmentDiscards = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 2, 8, 1, 1, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vSrDuplicateSegmentDiscards.setStatus('mandatory')
vSrHopCountExceededDiscards = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 2, 8, 1, 1, 19), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vSrHopCountExceededDiscards.setStatus('mandatory')
vSrDupLanIdOrTreeErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 2, 8, 1, 1, 20), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vSrDupLanIdOrTreeErrors.setStatus('mandatory')
vSrLanIdMismatches = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 2, 8, 1, 1, 21), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vSrLanIdMismatches.setStatus('mandatory')
vSrBridgeLfMode = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 2, 8, 1, 1, 22), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("mode3", 1), ("mode6", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vSrBridgeLfMode.setStatus('mandatory')
vSrPortType = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 2, 8, 1, 1, 23), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vSrPortType.setStatus('mandatory')
vSrAREblock = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 2, 8, 1, 1, 24), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vSrAREblock.setStatus('mandatory')
vSrHopCountIn = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 2, 8, 1, 1, 25), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vSrHopCountIn.setStatus('mandatory')
vSrSapDenyFilter1 = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 2, 8, 1, 1, 26), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vSrSapDenyFilter1.setStatus('mandatory')
vSrSapDenyFilter2 = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 2, 8, 1, 1, 27), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vSrSapDenyFilter2.setStatus('mandatory')
vSrSapPermitFilter1 = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 2, 8, 1, 1, 28), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vSrSapPermitFilter1.setStatus('mandatory')
vSrSapPermitFilter2 = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 2, 8, 1, 1, 29), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vSrSapPermitFilter2.setStatus('mandatory')
vTrunkingServicesTable = MibTable((1, 3, 6, 1, 4, 1, 800, 2, 2, 9, 1), )
if mibBuilder.loadTexts: vTrunkingServicesTable.setStatus('mandatory')
vTrunkingServicesEntry = MibTableRow((1, 3, 6, 1, 4, 1, 800, 2, 2, 9, 1, 1), ).setIndexNames((0, "XYLAN-VLAN-MIB", "vTrunkingServicesSlot"), (0, "XYLAN-VLAN-MIB", "vTrunkingServicesStation"))
if mibBuilder.loadTexts: vTrunkingServicesEntry.setStatus('mandatory')
vTrunkingServicesSlot = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 2, 9, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vTrunkingServicesSlot.setStatus('mandatory')
vTrunkingServicesStation = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 2, 9, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vTrunkingServicesStation.setStatus('mandatory')
vTrunkingServicesDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 2, 9, 1, 1, 3), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vTrunkingServicesDescription.setStatus('mandatory')
vTrunkingServicesBridgeID = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 2, 9, 1, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vTrunkingServicesBridgeID.setStatus('mandatory')
vTrunkingVlanTable = MibTable((1, 3, 6, 1, 4, 1, 800, 2, 2, 9, 2), )
if mibBuilder.loadTexts: vTrunkingVlanTable.setStatus('mandatory')
vTrunkingVlanEntry = MibTableRow((1, 3, 6, 1, 4, 1, 800, 2, 2, 9, 2, 1), ).setIndexNames((0, "XYLAN-VLAN-MIB", "vTrunkingSlot"), (0, "XYLAN-VLAN-MIB", "vTrunkingStation"), (0, "XYLAN-VLAN-MIB", "vTrunkingLanNumber"))
if mibBuilder.loadTexts: vTrunkingVlanEntry.setStatus('mandatory')
vTrunkingSlot = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 2, 9, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vTrunkingSlot.setStatus('mandatory')
vTrunkingStation = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 2, 9, 2, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vTrunkingStation.setStatus('mandatory')
vTrunkingLanNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 2, 9, 2, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vTrunkingLanNumber.setStatus('mandatory')
vTrunkingCommand = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 2, 9, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("add", 1), ("remove", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vTrunkingCommand.setStatus('mandatory')
atportRuleTable = MibTable((1, 3, 6, 1, 4, 1, 800, 2, 2, 10, 1), )
if mibBuilder.loadTexts: atportRuleTable.setStatus('mandatory')
atportRuleEntry = MibTableRow((1, 3, 6, 1, 4, 1, 800, 2, 2, 10, 1, 1), ).setIndexNames((0, "XYLAN-VLAN-MIB", "atportRuleGroupId"), (0, "XYLAN-VLAN-MIB", "atportRuleVLANId"), (0, "XYLAN-VLAN-MIB", "atportRuleIdx"), (0, "XYLAN-VLAN-MIB", "atportRulePortId"))
if mibBuilder.loadTexts: atportRuleEntry.setStatus('mandatory')
atportRuleGroupId = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 2, 10, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atportRuleGroupId.setStatus('mandatory')
atportRuleVLANId = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 2, 10, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(2, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atportRuleVLANId.setStatus('mandatory')
atportRuleIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 2, 10, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atportRuleIdx.setStatus('mandatory')
atportRulePortId = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 2, 10, 1, 1, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(4, 4)).setFixedLength(4)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atportRulePortId.setStatus('mandatory')
atportRulePortState = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 2, 10, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2), ("delete", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atportRulePortState.setStatus('mandatory')
atMacRuleTable = MibTable((1, 3, 6, 1, 4, 1, 800, 2, 2, 10, 2), )
if mibBuilder.loadTexts: atMacRuleTable.setStatus('mandatory')
atMacRuleEntry = MibTableRow((1, 3, 6, 1, 4, 1, 800, 2, 2, 10, 2, 1), ).setIndexNames((0, "XYLAN-VLAN-MIB", "atMacRuleGroupId"), (0, "XYLAN-VLAN-MIB", "atMacRuleVLANId"), (0, "XYLAN-VLAN-MIB", "atMacRuleIndex"), (0, "XYLAN-VLAN-MIB", "atMacRuleMacAddress"))
if mibBuilder.loadTexts: atMacRuleEntry.setStatus('mandatory')
atMacRuleGroupId = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 2, 10, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atMacRuleGroupId.setStatus('mandatory')
atMacRuleVLANId = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 2, 10, 2, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(2, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atMacRuleVLANId.setStatus('mandatory')
atMacRuleIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 2, 10, 2, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atMacRuleIndex.setStatus('mandatory')
atMacRuleMacAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 2, 10, 2, 1, 4), MacAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atMacRuleMacAddress.setStatus('mandatory')
atMacRuleMacAddressState = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 2, 10, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2), ("delete", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atMacRuleMacAddressState.setStatus('mandatory')
atProtoRuleTable = MibTable((1, 3, 6, 1, 4, 1, 800, 2, 2, 10, 3), )
if mibBuilder.loadTexts: atProtoRuleTable.setStatus('mandatory')
atProtoRuleEntry = MibTableRow((1, 3, 6, 1, 4, 1, 800, 2, 2, 10, 3, 1), ).setIndexNames((0, "XYLAN-VLAN-MIB", "atProtoRuleGroupId"), (0, "XYLAN-VLAN-MIB", "atProtoRuleVLANId"), (0, "XYLAN-VLAN-MIB", "atProtoRuleIndex"))
if mibBuilder.loadTexts: atProtoRuleEntry.setStatus('mandatory')
atProtoRuleGroupId = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 2, 10, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atProtoRuleGroupId.setStatus('mandatory')
atProtoRuleVLANId = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 2, 10, 3, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(2, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atProtoRuleVLANId.setStatus('mandatory')
atProtoRuleIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 2, 10, 3, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atProtoRuleIndex.setStatus('mandatory')
atProtoRule = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 2, 10, 3, 1, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(5, 5)).setFixedLength(5)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atProtoRule.setStatus('mandatory')
atProtoRuleStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 2, 10, 3, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2), ("delete", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atProtoRuleStatus.setStatus('mandatory')
atNetRuleTable = MibTable((1, 3, 6, 1, 4, 1, 800, 2, 2, 10, 4), )
if mibBuilder.loadTexts: atNetRuleTable.setStatus('mandatory')
atNetRuleEntry = MibTableRow((1, 3, 6, 1, 4, 1, 800, 2, 2, 10, 4, 1), ).setIndexNames((0, "XYLAN-VLAN-MIB", "atNetRuleGroupId"), (0, "XYLAN-VLAN-MIB", "atNetRuleVLANId"), (0, "XYLAN-VLAN-MIB", "atNetRuleIndex"))
if mibBuilder.loadTexts: atNetRuleEntry.setStatus('mandatory')
atNetRuleGroupId = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 2, 10, 4, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atNetRuleGroupId.setStatus('mandatory')
atNetRuleVLANId = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 2, 10, 4, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(2, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atNetRuleVLANId.setStatus('mandatory')
atNetRuleIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 2, 10, 4, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atNetRuleIndex.setStatus('mandatory')
atNetRuleProtocolId = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 2, 10, 4, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("ip", 1), ("ipx", 2), ("dec", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atNetRuleProtocolId.setStatus('mandatory')
atNetRuleNetAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 2, 10, 4, 1, 5), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atNetRuleNetAddr.setStatus('mandatory')
atNetRuleStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 2, 10, 4, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2), ("delete", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atNetRuleStatus.setStatus('mandatory')
atUserRuleTable = MibTable((1, 3, 6, 1, 4, 1, 800, 2, 2, 10, 5), )
if mibBuilder.loadTexts: atUserRuleTable.setStatus('mandatory')
atUserRuleEntry = MibTableRow((1, 3, 6, 1, 4, 1, 800, 2, 2, 10, 5, 1), ).setIndexNames((0, "XYLAN-VLAN-MIB", "atUserRuleGroupId"), (0, "XYLAN-VLAN-MIB", "atUserRuleVLANId"), (0, "XYLAN-VLAN-MIB", "atUserRuleIndex"))
if mibBuilder.loadTexts: atUserRuleEntry.setStatus('mandatory')
atUserRuleGroupId = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 2, 10, 5, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atUserRuleGroupId.setStatus('mandatory')
atUserRuleVLANId = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 2, 10, 5, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(2, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atUserRuleVLANId.setStatus('mandatory')
atUserRuleIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 2, 10, 5, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atUserRuleIndex.setStatus('mandatory')
atUserRuleOffset = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 2, 10, 5, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 64))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atUserRuleOffset.setStatus('mandatory')
atUserRuleValue = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 2, 10, 5, 1, 5), OctetString().subtype(subtypeSpec=ValueSizeConstraint(8, 8)).setFixedLength(8)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atUserRuleValue.setStatus('mandatory')
atUserRuleMask = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 2, 10, 5, 1, 6), OctetString().subtype(subtypeSpec=ValueSizeConstraint(8, 8)).setFixedLength(8)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atUserRuleMask.setStatus('mandatory')
atUserRuleStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 2, 10, 5, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2), ("delete", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atUserRuleStatus.setStatus('mandatory')
atVLANRuleSumTable = MibTable((1, 3, 6, 1, 4, 1, 800, 2, 2, 10, 6), )
if mibBuilder.loadTexts: atVLANRuleSumTable.setStatus('mandatory')
atVLANRuleSumEntry = MibTableRow((1, 3, 6, 1, 4, 1, 800, 2, 2, 10, 6, 1), ).setIndexNames((0, "XYLAN-VLAN-MIB", "atVLANRuleSumGroupId"), (0, "XYLAN-VLAN-MIB", "atVLANRuleSumVLANId"), (0, "XYLAN-VLAN-MIB", "atVLANRuleIndex"))
if mibBuilder.loadTexts: atVLANRuleSumEntry.setStatus('mandatory')
atVLANRuleSumGroupId = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 2, 10, 6, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: atVLANRuleSumGroupId.setStatus('mandatory')
atVLANRuleSumVLANId = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 2, 10, 6, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: atVLANRuleSumVLANId.setStatus('mandatory')
atVLANRuleIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 2, 10, 6, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atVLANRuleIndex.setStatus('mandatory')
atVLANRuleSubIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 2, 10, 6, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atVLANRuleSubIndex.setStatus('mandatory')
atVLANRuleType = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 2, 10, 6, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9))).clone(namedValues=NamedValues(("port-rule", 1), ("mac-rule", 2), ("protocol-rule", 3), ("network-rule", 4), ("user-defined-rule", 5), ("mcast-rule", 6), ("binding-rule", 7), ("dhcp-port-rule", 8), ("dhcp-mac-rule", 9)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: atVLANRuleType.setStatus('mandatory')
atVLANControlTable = MibTable((1, 3, 6, 1, 4, 1, 800, 2, 2, 10, 7), )
if mibBuilder.loadTexts: atVLANControlTable.setStatus('mandatory')
atVLANControlEntry = MibTableRow((1, 3, 6, 1, 4, 1, 800, 2, 2, 10, 7, 1), ).setIndexNames((0, "XYLAN-VLAN-MIB", "atVLANGroupId"), (0, "XYLAN-VLAN-MIB", "atVLANId"))
if mibBuilder.loadTexts: atVLANControlEntry.setStatus('mandatory')
atVLANGroupId = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 2, 10, 7, 1, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atVLANGroupId.setStatus('mandatory')
atVLANId = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 2, 10, 7, 1, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atVLANId.setStatus('mandatory')
atVLANDesc = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 2, 10, 7, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 31))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atVLANDesc.setStatus('mandatory')
atVLANAdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 2, 10, 7, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2), ("delete", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atVLANAdminStatus.setStatus('mandatory')
atVLANOperStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 2, 10, 7, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("active", 1), ("inactive", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: atVLANOperStatus.setStatus('mandatory')
atDefaultVlan = MibScalar((1, 3, 6, 1, 4, 1, 800, 2, 2, 10, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("on", 1), ("off", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atDefaultVlan.setStatus('mandatory')
atmcportRuleTable = MibTable((1, 3, 6, 1, 4, 1, 800, 2, 2, 10, 9), )
if mibBuilder.loadTexts: atmcportRuleTable.setStatus('mandatory')
atmcportRuleEntry = MibTableRow((1, 3, 6, 1, 4, 1, 800, 2, 2, 10, 9, 1), ).setIndexNames((0, "XYLAN-VLAN-MIB", "atmcportRuleGroupId"), (0, "XYLAN-VLAN-MIB", "atmcportRuleVLANId"), (0, "XYLAN-VLAN-MIB", "atmcportRuleIdx"), (0, "XYLAN-VLAN-MIB", "atmcportRulePortId"))
if mibBuilder.loadTexts: atmcportRuleEntry.setStatus('mandatory')
atmcportRuleGroupId = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 2, 10, 9, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmcportRuleGroupId.setStatus('mandatory')
atmcportRuleVLANId = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 2, 10, 9, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(2, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmcportRuleVLANId.setStatus('mandatory')
atmcportRuleIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 2, 10, 9, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmcportRuleIdx.setStatus('mandatory')
atmcportRulePortId = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 2, 10, 9, 1, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(4, 4)).setFixedLength(4)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmcportRulePortId.setStatus('mandatory')
atmcportRulePortState = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 2, 10, 9, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmcportRulePortState.setStatus('mandatory')
atmcMacRuleTable = MibTable((1, 3, 6, 1, 4, 1, 800, 2, 2, 10, 10), )
if mibBuilder.loadTexts: atmcMacRuleTable.setStatus('mandatory')
atmcMacRuleEntry = MibTableRow((1, 3, 6, 1, 4, 1, 800, 2, 2, 10, 10, 1), ).setIndexNames((0, "XYLAN-VLAN-MIB", "atmcMacRuleGroupId"), (0, "XYLAN-VLAN-MIB", "atmcMacRuleVLANId"), (0, "XYLAN-VLAN-MIB", "atmcMacRuleIndex"), (0, "XYLAN-VLAN-MIB", "atmcMacRuleMacAddress"))
if mibBuilder.loadTexts: atmcMacRuleEntry.setStatus('mandatory')
atmcMacRuleGroupId = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 2, 10, 10, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmcMacRuleGroupId.setStatus('mandatory')
atmcMacRuleVLANId = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 2, 10, 10, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(2, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmcMacRuleVLANId.setStatus('mandatory')
atmcMacRuleIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 2, 10, 10, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmcMacRuleIndex.setStatus('mandatory')
atmcMacRuleMacAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 2, 10, 10, 1, 4), MacAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmcMacRuleMacAddress.setStatus('mandatory')
atmcMacRuleMacAddressState = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 2, 10, 10, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmcMacRuleMacAddressState.setStatus('mandatory')
atMcastRuleTable = MibTable((1, 3, 6, 1, 4, 1, 800, 2, 2, 10, 11), )
if mibBuilder.loadTexts: atMcastRuleTable.setStatus('mandatory')
atMcastRuleEntry = MibTableRow((1, 3, 6, 1, 4, 1, 800, 2, 2, 10, 11, 1), ).setIndexNames((0, "XYLAN-VLAN-MIB", "atMcastRuleGroupId"), (0, "XYLAN-VLAN-MIB", "atMcastRuleVLANId"), (0, "XYLAN-VLAN-MIB", "atMcastRuleIndex"), (0, "XYLAN-VLAN-MIB", "atMcastRuleMacAddress"))
if mibBuilder.loadTexts: atMcastRuleEntry.setStatus('mandatory')
atMcastRuleGroupId = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 2, 10, 11, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atMcastRuleGroupId.setStatus('mandatory')
atMcastRuleVLANId = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 2, 10, 11, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(2, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atMcastRuleVLANId.setStatus('mandatory')
atMcastRuleIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 2, 10, 11, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atMcastRuleIndex.setStatus('mandatory')
atMcastRuleMacAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 2, 10, 11, 1, 4), MacAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atMcastRuleMacAddress.setStatus('mandatory')
atMcastRuleMacAddressState = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 2, 10, 11, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2), ("delete", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atMcastRuleMacAddressState.setStatus('mandatory')
atmcVLANRuleSumTable = MibTable((1, 3, 6, 1, 4, 1, 800, 2, 2, 10, 12), )
if mibBuilder.loadTexts: atmcVLANRuleSumTable.setStatus('mandatory')
atmcVLANRuleSumEntry = MibTableRow((1, 3, 6, 1, 4, 1, 800, 2, 2, 10, 12, 1), ).setIndexNames((0, "XYLAN-VLAN-MIB", "atmcVLANRuleSumGroupId"), (0, "XYLAN-VLAN-MIB", "atmcVLANRuleSumVLANId"), (0, "XYLAN-VLAN-MIB", "atmcVLANRuleIndex"))
if mibBuilder.loadTexts: atmcVLANRuleSumEntry.setStatus('mandatory')
atmcVLANRuleSumGroupId = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 2, 10, 12, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmcVLANRuleSumGroupId.setStatus('mandatory')
atmcVLANRuleSumVLANId = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 2, 10, 12, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmcVLANRuleSumVLANId.setStatus('mandatory')
atmcVLANRuleIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 2, 10, 12, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmcVLANRuleIndex.setStatus('mandatory')
atmcVLANRuleSubIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 2, 10, 12, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmcVLANRuleSubIndex.setStatus('mandatory')
atmcVLANRuleType = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 2, 10, 12, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("port-rule", 1), ("mac-rule", 2), ("mcast-rule", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmcVLANRuleType.setStatus('mandatory')
atmcVLANControlTable = MibTable((1, 3, 6, 1, 4, 1, 800, 2, 2, 10, 13), )
if mibBuilder.loadTexts: atmcVLANControlTable.setStatus('mandatory')
atmcVLANControlEntry = MibTableRow((1, 3, 6, 1, 4, 1, 800, 2, 2, 10, 13, 1), ).setIndexNames((0, "XYLAN-VLAN-MIB", "atmcVLANGroupId"), (0, "XYLAN-VLAN-MIB", "atmcVLANId"))
if mibBuilder.loadTexts: atmcVLANControlEntry.setStatus('mandatory')
atmcVLANGroupId = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 2, 10, 13, 1, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmcVLANGroupId.setStatus('mandatory')
atmcVLANId = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 2, 10, 13, 1, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmcVLANId.setStatus('mandatory')
atmcVLANDesc = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 2, 10, 13, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 31))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmcVLANDesc.setStatus('mandatory')
atmcVLANAdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 2, 10, 13, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2), ("delete", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmcVLANAdminStatus.setStatus('mandatory')
atmcVLANOperStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 2, 10, 13, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("active", 1), ("inactive", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmcVLANOperStatus.setStatus('mandatory')
gmAutoServiceTable = MibTable((1, 3, 6, 1, 4, 1, 800, 2, 2, 10, 14), )
if mibBuilder.loadTexts: gmAutoServiceTable.setStatus('mandatory')
gmAutoServiceEntry = MibTableRow((1, 3, 6, 1, 4, 1, 800, 2, 2, 10, 14, 1), ).setIndexNames((0, "XYLAN-VLAN-MIB", "gmAutoServiceGroupId"), (0, "XYLAN-VLAN-MIB", "gmAutoServicePrimarySlot"), (0, "XYLAN-VLAN-MIB", "gmAutoServicePrimaryPort"), (0, "XYLAN-VLAN-MIB", "gmAutoServiceIndex"))
if mibBuilder.loadTexts: gmAutoServiceEntry.setStatus('mandatory')
gmAutoServiceGroupId = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 2, 10, 14, 1, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gmAutoServiceGroupId.setStatus('mandatory')
gmAutoServicePrimarySlot = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 2, 10, 14, 1, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gmAutoServicePrimarySlot.setStatus('mandatory')
gmAutoServicePrimaryPort = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 2, 10, 14, 1, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gmAutoServicePrimaryPort.setStatus('mandatory')
gmAutoServiceIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 2, 10, 14, 1, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gmAutoServiceIndex.setStatus('mandatory')
gmAutoServiceType = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 2, 10, 14, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("eth-lane", 1), ("token-ring-lane", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gmAutoServiceType.setStatus('mandatory')
gmAutoServiceName = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 2, 10, 14, 1, 6), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gmAutoServiceName.setStatus('mandatory')
gmAutoServiceSecondarySlot = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 2, 10, 14, 1, 7), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gmAutoServiceSecondarySlot.setStatus('mandatory')
gmAutoServiceSecondaryPort = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 2, 10, 14, 1, 8), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gmAutoServiceSecondaryPort.setStatus('mandatory')
gmAutoServiceAdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 2, 10, 14, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2), ("delete", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gmAutoServiceAdminState.setStatus('mandatory')
gmAutoServiceOperState = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 2, 10, 14, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("active", 1), ("inactive", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gmAutoServiceOperState.setStatus('mandatory')
gmAutoServiceActiveSlot = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 2, 10, 14, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gmAutoServiceActiveSlot.setStatus('mandatory')
gmAutoServiceActivePort = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 2, 10, 14, 1, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gmAutoServiceActivePort.setStatus('mandatory')
gmAutoServiceNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 2, 10, 14, 1, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gmAutoServiceNumber.setStatus('mandatory')
gmAutoServiceTranslations = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 2, 10, 14, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gmAutoServiceTranslations.setStatus('mandatory')
atBindRuleTable = MibTable((1, 3, 6, 1, 4, 1, 800, 2, 2, 10, 16), )
if mibBuilder.loadTexts: atBindRuleTable.setStatus('mandatory')
atBindRuleEntry = MibTableRow((1, 3, 6, 1, 4, 1, 800, 2, 2, 10, 16, 1), ).setIndexNames((0, "XYLAN-VLAN-MIB", "atBindRuleGroupId"), (0, "XYLAN-VLAN-MIB", "atBindRuleVlanId"), (0, "XYLAN-VLAN-MIB", "atBindRuleIndex"))
if mibBuilder.loadTexts: atBindRuleEntry.setStatus('mandatory')
atBindRuleGroupId = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 2, 10, 16, 1, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atBindRuleGroupId.setStatus('mandatory')
atBindRuleVlanId = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 2, 10, 16, 1, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atBindRuleVlanId.setStatus('mandatory')
atBindRuleIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 2, 10, 16, 1, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atBindRuleIndex.setStatus('mandatory')
atBindRulePortId = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 2, 10, 16, 1, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(4, 4)).setFixedLength(4)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atBindRulePortId.setStatus('mandatory')
atBindRuleIPAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 2, 10, 16, 1, 5), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atBindRuleIPAddress.setStatus('mandatory')
atBindRuleMacAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 2, 10, 16, 1, 6), MacAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atBindRuleMacAddress.setStatus('mandatory')
atBindRuleProtocol = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 2, 10, 16, 1, 7), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atBindRuleProtocol.setStatus('mandatory')
atBindRuleBindParameter = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 2, 10, 16, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(7, 9, 13, 6, 3, 5))).clone(namedValues=NamedValues(("port-ip-mac", 7), ("port-protocol", 9), ("port-mac-protocol", 13), ("ip-mac", 6), ("ip-port", 3), ("mac-port", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atBindRuleBindParameter.setStatus('mandatory')
atBindRuleStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 2, 10, 16, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2), ("delete", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atBindRuleStatus.setStatus('mandatory')
gmGroupListTable = MibTable((1, 3, 6, 1, 4, 1, 800, 2, 2, 10, 17), )
if mibBuilder.loadTexts: gmGroupListTable.setStatus('mandatory')
gmGroupListEntry = MibTableRow((1, 3, 6, 1, 4, 1, 800, 2, 2, 10, 17, 1), ).setIndexNames((0, "XYLAN-VLAN-MIB", "gmGroupListPortSlot"), (0, "XYLAN-VLAN-MIB", "gmGroupListPortInterface"), (0, "XYLAN-VLAN-MIB", "gmGroupListGroupId"))
if mibBuilder.loadTexts: gmGroupListEntry.setStatus('mandatory')
gmGroupListPortSlot = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 2, 10, 17, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gmGroupListPortSlot.setStatus('mandatory')
gmGroupListPortInterface = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 2, 10, 17, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gmGroupListPortInterface.setStatus('mandatory')
gmGroupListGroupId = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 2, 10, 17, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gmGroupListGroupId.setStatus('mandatory')
atDHCPportRuleTable = MibTable((1, 3, 6, 1, 4, 1, 800, 2, 2, 10, 18), )
if mibBuilder.loadTexts: atDHCPportRuleTable.setStatus('mandatory')
atDHCPportRuleEntry = MibTableRow((1, 3, 6, 1, 4, 1, 800, 2, 2, 10, 18, 1), ).setIndexNames((0, "XYLAN-VLAN-MIB", "atDHCPportRuleGroupId"), (0, "XYLAN-VLAN-MIB", "atDHCPportRuleVLANId"), (0, "XYLAN-VLAN-MIB", "atDHCPportRuleIdx"), (0, "XYLAN-VLAN-MIB", "atDHCPportRulePortId"))
if mibBuilder.loadTexts: atDHCPportRuleEntry.setStatus('mandatory')
atDHCPportRuleGroupId = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 2, 10, 18, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atDHCPportRuleGroupId.setStatus('mandatory')
atDHCPportRuleVLANId = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 2, 10, 18, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atDHCPportRuleVLANId.setStatus('mandatory')
atDHCPportRuleIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 2, 10, 18, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atDHCPportRuleIdx.setStatus('mandatory')
atDHCPportRulePortId = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 2, 10, 18, 1, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(4, 4)).setFixedLength(4)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atDHCPportRulePortId.setStatus('mandatory')
atDHCPportRulePortState = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 2, 10, 18, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atDHCPportRulePortState.setStatus('mandatory')
atDHCPMacRuleTable = MibTable((1, 3, 6, 1, 4, 1, 800, 2, 2, 10, 19), )
if mibBuilder.loadTexts: atDHCPMacRuleTable.setStatus('mandatory')
atDHCPMacRuleEntry = MibTableRow((1, 3, 6, 1, 4, 1, 800, 2, 2, 10, 19, 1), ).setIndexNames((0, "XYLAN-VLAN-MIB", "atDHCPMacRuleGroupId"), (0, "XYLAN-VLAN-MIB", "atDHCPMacRuleVLANId"), (0, "XYLAN-VLAN-MIB", "atDHCPMacRuleIndex"), (0, "XYLAN-VLAN-MIB", "atDHCPMacRuleMacAddress"))
if mibBuilder.loadTexts: atDHCPMacRuleEntry.setStatus('mandatory')
atDHCPMacRuleGroupId = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 2, 10, 19, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atDHCPMacRuleGroupId.setStatus('mandatory')
atDHCPMacRuleVLANId = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 2, 10, 19, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atDHCPMacRuleVLANId.setStatus('mandatory')
atDHCPMacRuleIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 2, 10, 19, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atDHCPMacRuleIndex.setStatus('mandatory')
atDHCPMacRuleMacAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 2, 10, 19, 1, 4), MacAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atDHCPMacRuleMacAddress.setStatus('mandatory')
atDHCPMacRuleMacAddressState = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 2, 10, 19, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atDHCPMacRuleMacAddressState.setStatus('mandatory')
groupMobilityStatus = MibScalar((1, 3, 6, 1, 4, 1, 800, 2, 2, 10, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: groupMobilityStatus.setStatus('mandatory')
gmMoveToDefGroup = MibScalar((1, 3, 6, 1, 4, 1, 800, 2, 2, 10, 21), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("on", 1), ("off", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gmMoveToDefGroup.setStatus('mandatory')
gmDefGroup = MibScalar((1, 3, 6, 1, 4, 1, 800, 2, 2, 10, 22), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("on", 1), ("off", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gmDefGroup.setStatus('mandatory')
atvIPRouterTable = MibTable((1, 3, 6, 1, 4, 1, 800, 2, 2, 11, 1), )
if mibBuilder.loadTexts: atvIPRouterTable.setStatus('mandatory')
atvIPRouterEntry = MibTableRow((1, 3, 6, 1, 4, 1, 800, 2, 2, 11, 1, 1), ).setIndexNames((0, "XYLAN-VLAN-MIB", "atvIPRouterVLanGroup"), (0, "XYLAN-VLAN-MIB", "atvIPRouterVLan"))
if mibBuilder.loadTexts: atvIPRouterEntry.setStatus('mandatory')
atvIPRouterVLanGroup = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 2, 11, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atvIPRouterVLanGroup.setStatus('mandatory')
atvIPRouterVLan = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 2, 11, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atvIPRouterVLan.setStatus('mandatory')
atvIPRouterProtocol = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 2, 11, 1, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(2, 2)).setFixedLength(2)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atvIPRouterProtocol.setStatus('mandatory')
atvIPRouterNetAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 2, 11, 1, 1, 4), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atvIPRouterNetAddress.setStatus('mandatory')
atvIPRouterSubNetMask = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 2, 11, 1, 1, 5), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atvIPRouterSubNetMask.setStatus('mandatory')
atvIPRouterBcastAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 2, 11, 1, 1, 6), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atvIPRouterBcastAddress.setStatus('mandatory')
atvIPRouterDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 2, 11, 1, 1, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 31))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atvIPRouterDescription.setStatus('optional')
atvIPRouterAdmStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 2, 11, 1, 1, 8), XylanVlanAdminStatCodes()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atvIPRouterAdmStatus.setStatus('mandatory')
atvIPRouterOperStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 2, 11, 1, 1, 9), XylanVlanOperStatCodes()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atvIPRouterOperStatus.setStatus('mandatory')
atvIPRouterFramingType = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 2, 11, 1, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("ethernet-2", 1), ("ethernet-802-3", 2), ("fddi", 3), ("token-ring", 4), ("token-ring-source-routed", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atvIPRouterFramingType.setStatus('mandatory')
atvIPRouterRipConfigMode = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 2, 11, 1, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("silent", 1), ("deaf", 2), ("active", 3), ("inactive", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atvIPRouterRipConfigMode.setStatus('mandatory')
atvIPRouterRelayServicesFwd = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 2, 11, 1, 1, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atvIPRouterRelayServicesFwd.setStatus('mandatory')
atvIPXRouterTable = MibTable((1, 3, 6, 1, 4, 1, 800, 2, 2, 12, 1), )
if mibBuilder.loadTexts: atvIPXRouterTable.setStatus('mandatory')
atvIPXRouterEntry = MibTableRow((1, 3, 6, 1, 4, 1, 800, 2, 2, 12, 1, 1), ).setIndexNames((0, "XYLAN-VLAN-MIB", "atvIPXRouterVLanGroup"), (0, "XYLAN-VLAN-MIB", "atvIPXRouterVLan"))
if mibBuilder.loadTexts: atvIPXRouterEntry.setStatus('mandatory')
atvIPXRouterVLanGroup = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 2, 12, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atvIPXRouterVLanGroup.setStatus('mandatory')
atvIPXRouterVLan = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 2, 12, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atvIPXRouterVLan.setStatus('mandatory')
atvIPXRouterProtocol = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 2, 12, 1, 1, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atvIPXRouterProtocol.setStatus('mandatory')
atvIPXRouterNetAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 2, 12, 1, 1, 4), NetNumber()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atvIPXRouterNetAddress.setStatus('mandatory')
atvIPXRouterFramingType = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 2, 12, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12))).clone(namedValues=NamedValues(("ethernet-2", 1), ("ethernet-802-3-llc", 2), ("ethernet-802-3-snap", 3), ("ethernet-802-3-raw", 4), ("fddi-snap", 5), ("fddi-snap-sr", 6), ("fddi-llc", 7), ("fddi-llc-sr", 8), ("token-ring-snap", 9), ("token-ring-snap-sr", 10), ("token-ring-llc", 11), ("token-ring-llc-sr", 12)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atvIPXRouterFramingType.setStatus('mandatory')
atvIPXRouterDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 2, 12, 1, 1, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 31))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atvIPXRouterDescription.setStatus('optional')
atvIPXRouterAdmStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 2, 12, 1, 1, 7), XylanVlanAdminStatCodes()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atvIPXRouterAdmStatus.setStatus('mandatory')
atvIPXRouterOperStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 2, 12, 1, 1, 8), XylanVlanOperStatCodes()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atvIPXRouterOperStatus.setStatus('mandatory')
atvIPXSrcRteType = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 2, 12, 1, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("are", 1), ("ste", 2), ("not-applicable", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atvIPXSrcRteType.setStatus('mandatory')
v80210ServicesTable = MibTable((1, 3, 6, 1, 4, 1, 800, 2, 2, 13, 1), )
if mibBuilder.loadTexts: v80210ServicesTable.setStatus('mandatory')
v80210ServicesEntry = MibTableRow((1, 3, 6, 1, 4, 1, 800, 2, 2, 13, 1, 1), ).setIndexNames((0, "XYLAN-VLAN-MIB", "v80210ServicesSlot"), (0, "XYLAN-VLAN-MIB", "v80210ServicesStation"))
if mibBuilder.loadTexts: v80210ServicesEntry.setStatus('mandatory')
v80210ServicesSlot = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 2, 13, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: v80210ServicesSlot.setStatus('mandatory')
v80210ServicesStation = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 2, 13, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: v80210ServicesStation.setStatus('mandatory')
v80210ServicesDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 2, 13, 1, 1, 3), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: v80210ServicesDescription.setStatus('mandatory')
v80210ServicesBridgeID = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 2, 13, 1, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: v80210ServicesBridgeID.setStatus('mandatory')
v80210VlanTable = MibTable((1, 3, 6, 1, 4, 1, 800, 2, 2, 13, 2), )
if mibBuilder.loadTexts: v80210VlanTable.setStatus('mandatory')
v80210VlanEntry = MibTableRow((1, 3, 6, 1, 4, 1, 800, 2, 2, 13, 2, 1), ).setIndexNames((0, "XYLAN-VLAN-MIB", "v80210Slot"), (0, "XYLAN-VLAN-MIB", "v80210Station"), (0, "XYLAN-VLAN-MIB", "v80210LanNumber"))
if mibBuilder.loadTexts: v80210VlanEntry.setStatus('mandatory')
v80210Slot = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 2, 13, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: v80210Slot.setStatus('mandatory')
v80210Station = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 2, 13, 2, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: v80210Station.setStatus('mandatory')
v80210LanNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 2, 13, 2, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: v80210LanNumber.setStatus('mandatory')
v80210Command = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 2, 13, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("add", 1), ("remove", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: v80210Command.setStatus('mandatory')
vDBrServicesTable = MibTable((1, 3, 6, 1, 4, 1, 800, 2, 2, 14, 1), )
if mibBuilder.loadTexts: vDBrServicesTable.setStatus('mandatory')
vDBrServicesEntry = MibTableRow((1, 3, 6, 1, 4, 1, 800, 2, 2, 14, 1, 1), ).setIndexNames((0, "XYLAN-VLAN-MIB", "vDBrServicesSlot"), (0, "XYLAN-VLAN-MIB", "vDBrServicesStation"))
if mibBuilder.loadTexts: vDBrServicesEntry.setStatus('mandatory')
vDBrServicesSlot = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 2, 14, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vDBrServicesSlot.setStatus('mandatory')
vDBrServicesStation = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 2, 14, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vDBrServicesStation.setStatus('mandatory')
vDBrServicesDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 2, 14, 1, 1, 3), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vDBrServicesDescription.setStatus('mandatory')
vDBrServicesBridgeID = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 2, 14, 1, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vDBrServicesBridgeID.setStatus('mandatory')
vDBrVlanTable = MibTable((1, 3, 6, 1, 4, 1, 800, 2, 2, 14, 2), )
if mibBuilder.loadTexts: vDBrVlanTable.setStatus('mandatory')
vDBrVlanEntry = MibTableRow((1, 3, 6, 1, 4, 1, 800, 2, 2, 14, 2, 1), ).setIndexNames((0, "XYLAN-VLAN-MIB", "vDBrSlot"), (0, "XYLAN-VLAN-MIB", "vDBrStation"), (0, "XYLAN-VLAN-MIB", "vDBrLanNumber"))
if mibBuilder.loadTexts: vDBrVlanEntry.setStatus('mandatory')
vDBrSlot = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 2, 14, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vDBrSlot.setStatus('mandatory')
vDBrStation = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 2, 14, 2, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vDBrStation.setStatus('mandatory')
vDBrLanNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 2, 14, 2, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vDBrLanNumber.setStatus('mandatory')
vDBrCommand = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 2, 14, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("add", 1), ("remove", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vDBrCommand.setStatus('mandatory')
vDupMacMac = MibScalar((1, 3, 6, 1, 4, 1, 800, 2, 2, 16, 1), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vDupMacMac.setStatus('mandatory')
vDupMacSlot = MibScalar((1, 3, 6, 1, 4, 1, 800, 2, 2, 16, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vDupMacSlot.setStatus('mandatory')
vDupMacIntf = MibScalar((1, 3, 6, 1, 4, 1, 800, 2, 2, 16, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vDupMacIntf.setStatus('mandatory')
vDupMacTime = MibScalar((1, 3, 6, 1, 4, 1, 800, 2, 2, 16, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vDupMacTime.setStatus('mandatory')
qGroupTable = MibTable((1, 3, 6, 1, 4, 1, 800, 2, 2, 15, 1), )
if mibBuilder.loadTexts: qGroupTable.setStatus('mandatory')
qGroupEntry = MibTableRow((1, 3, 6, 1, 4, 1, 800, 2, 2, 15, 1, 1), ).setIndexNames((0, "XYLAN-VLAN-MIB", "qGroupSlot"), (0, "XYLAN-VLAN-MIB", "qGroupPort"), (0, "XYLAN-VLAN-MIB", "qGroupGroupId"))
if mibBuilder.loadTexts: qGroupEntry.setStatus('mandatory')
qGroupSlot = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 2, 15, 1, 1, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qGroupSlot.setStatus('mandatory')
qGroupPort = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 2, 15, 1, 1, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qGroupPort.setStatus('mandatory')
qGroupGroupId = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 2, 15, 1, 1, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qGroupGroupId.setStatus('mandatory')
qGroupMode = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 2, 15, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("gstsxylan", 1), ("gstsieee", 2), ("msts", 3), ("ssts", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qGroupMode.setStatus('mandatory')
qGroupDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 2, 15, 1, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 31))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qGroupDescription.setStatus('mandatory')
qGroupTag = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 2, 15, 1, 1, 6), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qGroupTag.setStatus('mandatory')
qGroupPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 2, 15, 1, 1, 7), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qGroupPriority.setStatus('mandatory')
qGroupAdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 2, 15, 1, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("delete", 0), ("create", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qGroupAdminStatus.setStatus('mandatory')
qGroupTxPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 2, 15, 1, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: qGroupTxPkts.setStatus('mandatory')
qGroupRxPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 2, 15, 1, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: qGroupRxPkts.setStatus('mandatory')
qGroupTxOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 2, 15, 1, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: qGroupTxOctets.setStatus('mandatory')
qGroupRxOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 2, 15, 1, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: qGroupRxOctets.setStatus('mandatory')
vPmapIngressTable = MibTable((1, 3, 6, 1, 4, 1, 800, 2, 2, 17, 1), )
if mibBuilder.loadTexts: vPmapIngressTable.setStatus('mandatory')
vPmapIngressEntry = MibTableRow((1, 3, 6, 1, 4, 1, 800, 2, 2, 17, 1, 1), ).setIndexNames((0, "XYLAN-VLAN-MIB", "pMapIngressId"), (0, "XYLAN-VLAN-MIB", "pMapIngressSlot"), (0, "XYLAN-VLAN-MIB", "pMapIngressPort"), (0, "XYLAN-VLAN-MIB", "pMapIngressSrvc"), (0, "XYLAN-VLAN-MIB", "pMapIngressInst"))
if mibBuilder.loadTexts: vPmapIngressEntry.setStatus('mandatory')
pMapIngressId = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 2, 17, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 128))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pMapIngressId.setStatus('mandatory')
pMapIngressSlot = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 2, 17, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 11))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pMapIngressSlot.setStatus('mandatory')
pMapIngressPort = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 2, 17, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pMapIngressPort.setStatus('mandatory')
pMapIngressSrvc = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 2, 17, 1, 1, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pMapIngressSrvc.setStatus('mandatory')
pMapIngressInst = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 2, 17, 1, 1, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pMapIngressInst.setStatus('mandatory')
pMapIngressAdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 2, 17, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("add", 1), ("delete", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pMapIngressAdminStatus.setStatus('mandatory')
vPmapEgressTable = MibTable((1, 3, 6, 1, 4, 1, 800, 2, 2, 17, 2), )
if mibBuilder.loadTexts: vPmapEgressTable.setStatus('mandatory')
vPmapEgressEntry = MibTableRow((1, 3, 6, 1, 4, 1, 800, 2, 2, 17, 2, 1), ).setIndexNames((0, "XYLAN-VLAN-MIB", "pMapEgressId"), (0, "XYLAN-VLAN-MIB", "pMapEgressSlot"), (0, "XYLAN-VLAN-MIB", "pMapEgressPort"), (0, "XYLAN-VLAN-MIB", "pMapEgressSrvc"), (0, "XYLAN-VLAN-MIB", "pMapEgressInst"))
if mibBuilder.loadTexts: vPmapEgressEntry.setStatus('mandatory')
pMapEgressId = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 2, 17, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 254))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pMapEgressId.setStatus('mandatory')
pMapEgressSlot = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 2, 17, 2, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 11))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pMapEgressSlot.setStatus('mandatory')
pMapEgressPort = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 2, 17, 2, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pMapEgressPort.setStatus('mandatory')
pMapEgressSrvc = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 2, 17, 2, 1, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pMapEgressSrvc.setStatus('mandatory')
pMapEgressInst = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 2, 17, 2, 1, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pMapEgressInst.setStatus('mandatory')
pMapEgressAdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 2, 17, 2, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("add", 1), ("delete", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pMapEgressAdminStatus.setStatus('mandatory')
vPmapConfigTable = MibTable((1, 3, 6, 1, 4, 1, 800, 2, 2, 17, 3), )
if mibBuilder.loadTexts: vPmapConfigTable.setStatus('mandatory')
vPmapConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 800, 2, 2, 17, 3, 1), ).setIndexNames((0, "XYLAN-VLAN-MIB", "pMapConfigId"))
if mibBuilder.loadTexts: vPmapConfigEntry.setStatus('mandatory')
pMapConfigId = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 2, 17, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 128))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pMapConfigId.setStatus('mandatory')
pMapConfigStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 2, 17, 3, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("set", 1), ("delete", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pMapConfigStatus.setStatus('mandatory')
vPmapNextId = MibScalar((1, 3, 6, 1, 4, 1, 800, 2, 2, 17, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 128))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vPmapNextId.setStatus('mandatory')
mibBuilder.exportSymbols("XYLAN-VLAN-MIB", vStpPortDesignatedCost=vStpPortDesignatedCost, vPmapEgressTable=vPmapEgressTable, vDBrVlanTable=vDBrVlanTable, atmcMacRuleIndex=atmcMacRuleIndex, vRipBadAddr=vRipBadAddr, pMapIngressSrvc=pMapIngressSrvc, atUserRuleStatus=atUserRuleStatus, atmcportRuleVLANId=atmcportRuleVLANId, v80210=v80210, vRipBadMetric=vRipBadMetric, atvIPRouterNetAddress=atvIPRouterNetAddress, pMapIngressSlot=pMapIngressSlot, qGroupDescription=qGroupDescription, vBrdgTpLearnEntryDiscards=vBrdgTpLearnEntryDiscards, gmAutoServicePrimarySlot=gmAutoServicePrimarySlot, atmcMacRuleMacAddressState=atmcMacRuleMacAddressState, atmcMacRuleVLANId=atmcMacRuleVLANId, atvIPRouterEntry=atvIPRouterEntry, atMcastRuleVLANId=atMcastRuleVLANId, atVLANRuleSumTable=atVLANRuleSumTable, vTrunkingServicesStation=vTrunkingServicesStation, vBrdgTpATVLANAgeingTime=vBrdgTpATVLANAgeingTime, vIPRouterRelayDescription=vIPRouterRelayDescription, atBindRuleIPAddress=atBindRuleIPAddress, atProtoRule=atProtoRule, vStpPortSlot=vStpPortSlot, atBindRuleBindParameter=atBindRuleBindParameter, vDBrSlot=vDBrSlot, vDupMacIntf=vDupMacIntf, vBrdgStaticEntry=vBrdgStaticEntry, vSrSteOutFrames=vSrSteOutFrames, atmcVLANId=atmcVLANId, vIPXRouterFramingType=vIPXRouterFramingType, atmcportRulePortId=atmcportRulePortId, vBrdgTpFdbGroupId=vBrdgTpFdbGroupId, vIPXRouterEntry=vIPXRouterEntry, atVLANGroupId=atVLANGroupId, vPmapIngressTable=vPmapIngressTable, atvIPRouterAdmStatus=atvIPRouterAdmStatus, atvIPRouterTable=atvIPRouterTable, atVLANControlEntry=atVLANControlEntry, qGroupTag=qGroupTag, vRipBadVersion=vRipBadVersion, XylanVlanAdminStatCodes=XylanVlanAdminStatCodes, vIPRouterOperStatus=vIPRouterOperStatus, vTrunking=vTrunking, vBrdgStaticPortFuncTyp=vBrdgStaticPortFuncTyp, vStpPortDesignatedBridge=vStpPortDesignatedBridge, pMapEgressPort=pMapEgressPort, VIPRouterRelayServType=VIPRouterRelayServType, vIPRouterRelayMode=vIPRouterRelayMode, atMcastRuleGroupId=atMcastRuleGroupId, atNetRuleVLANId=atNetRuleVLANId, atUserRuleVLANId=atUserRuleVLANId, vRipInfoTable=vRipInfoTable, vIPRouterSubNetMask=vIPRouterSubNetMask, pMapEgressAdminStatus=pMapEgressAdminStatus, atportRuleIdx=atportRuleIdx, atUserRuleValue=atUserRuleValue, vBrdgStaticTable=vBrdgStaticTable, vRipBadFamily=vRipBadFamily, qGroupPriority=qGroupPriority, vSrSapFilterEnable=vSrSapFilterEnable, atvIPXRouterFramingType=atvIPXRouterFramingType, vTrunkingStation=vTrunkingStation, atMacRuleIndex=atMacRuleIndex, vDBrCommand=vDBrCommand, vIPRouterRelayService=vIPRouterRelayService, gmAutoServiceEntry=gmAutoServiceEntry, v80210VlanTable=v80210VlanTable, atMacRuleVLANId=atMacRuleVLANId, atvIPXRouterEntry=atvIPXRouterEntry, vDBrServicesBridgeID=vDBrServicesBridgeID, atMacRuleMacAddressState=atMacRuleMacAddressState, vStpInfo=vStpInfo, vPmapEgressEntry=vPmapEgressEntry, atBindRuleVlanId=atBindRuleVlanId, vSrSpecInFrames=vSrSpecInFrames, vStpPortTable=vStpPortTable, vSrAREblock=vSrAREblock, vStpPortDesignatedPtPrio=vStpPortDesignatedPtPrio, vSr=vSr, vIPRouterFramingType=vIPRouterFramingType, atUserRuleEntry=atUserRuleEntry, vPmap=vPmap, vRipBadSize=vRipBadSize, vTrunkingServicesTable=vTrunkingServicesTable, vAutoTracker=vAutoTracker, gmGroupListTable=gmGroupListTable, vBrdgStaticStatus=vBrdgStaticStatus, vIPXRouterVLan=vIPXRouterVLan, vLanBridgeType=vLanBridgeType, vBrdgTpFdbRcvPortFuncTypInst=vBrdgTpFdbRcvPortFuncTypInst, v80210ServicesTable=v80210ServicesTable, atmcVLANControlEntry=atmcVLANControlEntry, atDHCPMacRuleGroupId=atDHCPMacRuleGroupId, vSrHopCountIn=vSrHopCountIn, atBindRuleStatus=atBindRuleStatus, atBindRuleMacAddress=atBindRuleMacAddress, vSrFuncType=vSrFuncType, atmcMacRuleEntry=atmcMacRuleEntry, atProtoRuleVLANId=atProtoRuleVLANId, vIPRouterAdmStatus=vIPRouterAdmStatus, vSrSlot=vSrSlot, vStpHoldTime=vStpHoldTime, v8021Q=v8021Q, vIPXRouterTable=vIPXRouterTable, gmGroupListGroupId=gmGroupListGroupId, atBindRuleEntry=atBindRuleEntry, atvIPRouterBcastAddress=atvIPRouterBcastAddress, vSrInterface=vSrInterface, atBindRuleIndex=atBindRuleIndex, v80210Station=v80210Station, vBrdgStaticPortFuncTypInst=vBrdgStaticPortFuncTypInst, atVLANRuleIndex=atVLANRuleIndex, vLanPriority=vLanPriority, vStpBridgeMaxAge=vStpBridgeMaxAge, atBindRuleTable=atBindRuleTable, atvIPXRouterDescription=atvIPXRouterDescription, qGroupGroupId=qGroupGroupId, vStpRootPortFuncTypInst=vStpRootPortFuncTypInst, vBrdgTpFdbRcvStatus=vBrdgTpFdbRcvStatus, pMapIngressInst=pMapIngressInst, gmMoveToDefGroup=gmMoveToDefGroup, atvIPXRouterProtocol=atvIPXRouterProtocol, vIPRouterProtocol=vIPRouterProtocol, vBrdgTpFdbRcvPortIF=vBrdgTpFdbRcvPortIF, vStpBridgeForwardDelay=vStpBridgeForwardDelay, atDHCPportRuleGroupId=atDHCPportRuleGroupId, atDHCPportRulePortId=atDHCPportRulePortId, gmAutoServiceAdminState=gmAutoServiceAdminState, vPmapConfigEntry=vPmapConfigEntry, vRipInPkts=vRipInPkts, atUserRuleMask=atUserRuleMask, vSrPortEntry=vSrPortEntry, vBrdgTpFdbRcvVLANMembership=vBrdgTpFdbRcvVLANMembership, vTrunkingVlanTable=vTrunkingVlanTable, vIPRouterRipConfigMode=vIPRouterRipConfigMode, atmcVLANRuleIndex=atmcVLANRuleIndex, atNetRuleGroupId=atNetRuleGroupId, atNetRuleEntry=atNetRuleEntry, vBrdgTpAgingTime=vBrdgTpAgingTime, atmcVLANDesc=atmcVLANDesc, v80210Command=v80210Command, vIPRouterRelayTable=vIPRouterRelayTable, atVLANControlTable=atVLANControlTable, vSrSapDenyFilter1=vSrSapDenyFilter1, atvIPXRouterOperStatus=atvIPXRouterOperStatus, atBindRulePortId=atBindRulePortId, atmcVLANRuleSumEntry=atmcVLANRuleSumEntry, vSrLargestFrame=vSrLargestFrame, atMacRuleTable=atMacRuleTable, vSrBridgeLfMode=vSrBridgeLfMode, vRipOutPkts=vRipOutPkts, atmcMacRuleGroupId=atmcMacRuleGroupId, vLanDescription=vLanDescription, atDHCPportRuleVLANId=atDHCPportRuleVLANId, vBrdgTpFdbEntry=vBrdgTpFdbEntry, atNetRuleStatus=atNetRuleStatus, atmcportRuleTable=atmcportRuleTable, atNetRuleTable=atNetRuleTable, vLanFloodOverride=vLanFloodOverride, vStpRootPortFuncTyp=vStpRootPortFuncTyp, atDefaultVlan=atDefaultVlan, qGroupTxPkts=qGroupTxPkts, vDBrStation=vDBrStation, atvIPXRouterNetAddress=atvIPXRouterNetAddress, atmcVLANRuleSumTable=atmcVLANRuleSumTable, vIPXRouterOperStatus=vIPXRouterOperStatus, vSrLocalSegment=vSrLocalSegment, vSrInstance=vSrInstance, vIPRouterDescription=vIPRouterDescription, v80210ServicesBridgeID=v80210ServicesBridgeID, vDBrServicesEntry=vDBrServicesEntry, qGroupAdminStatus=qGroupAdminStatus, atVLANOperStatus=atVLANOperStatus, v80210ServicesEntry=v80210ServicesEntry, vLanBridgeAddress=vLanBridgeAddress, atMacRuleMacAddress=atMacRuleMacAddress, v80210ServicesStation=v80210ServicesStation, vDupMac=vDupMac, pMapConfigStatus=pMapConfigStatus, qGroupPort=qGroupPort, atDHCPMacRuleIndex=atDHCPMacRuleIndex, atUserRuleIndex=atUserRuleIndex, atmcVLANRuleType=atmcVLANRuleType, atmcportRuleGroupId=atmcportRuleGroupId, atvIPRouterProtocol=atvIPRouterProtocol, vLanCurrentNumber=vLanCurrentNumber, atvIPRouterVLan=atvIPRouterVLan, vRipTransmitsFailed=vRipTransmitsFailed, vStpTopChanges=vStpTopChanges, vIPXRouterProtocol=vIPXRouterProtocol, vLanAdmStatus=vLanAdmStatus, atMcastRuleTable=atMcastRuleTable, vSrDupLanIdOrTreeErrors=vSrDupLanIdOrTreeErrors, vSrSapDenyFilter2=vSrSapDenyFilter2, vLanOperStatus=vLanOperStatus, gmAutoServicePrimaryPort=gmAutoServicePrimaryPort, gmAutoServiceIndex=gmAutoServiceIndex, vStpTimeSinceTopologyChange=vStpTimeSinceTopologyChange, atMcastRuleMacAddress=atMcastRuleMacAddress, vSrBridgeNum=vSrBridgeNum, atMcastRuleIndex=atMcastRuleIndex, vRipInfo=vRipInfo, vStpPortIF=vStpPortIF, atVLANRuleSubIndex=atVLANRuleSubIndex, vSrVirtualRing=vSrVirtualRing, vIPRouterInfo=vIPRouterInfo, atmcVLANRuleSumVLANId=atmcVLANRuleSumVLANId, vIPXRouterNetAddress=vIPXRouterNetAddress, atUserRuleTable=atUserRuleTable, v80210ServicesDescription=v80210ServicesDescription, atportRuleGroupId=atportRuleGroupId, vStpBridgeAddress=vStpBridgeAddress, vSrApeOutFrames=vSrApeOutFrames, vDBrVlanEntry=vDBrVlanEntry, vIPXSrcRteType=vIPXSrcRteType, pMapEgressSlot=pMapEgressSlot, atVLANRuleSumVLANId=atVLANRuleSumVLANId, v80210Slot=v80210Slot, vTrunkingVlanEntry=vTrunkingVlanEntry, atMcastRuleEntry=atMcastRuleEntry, vLanTable=vLanTable, v80210VlanEntry=v80210VlanEntry, vDBrLanNumber=vDBrLanNumber, atvIPXRouterInfo=atvIPXRouterInfo, atmcMacRuleMacAddress=atmcMacRuleMacAddress, vRipBadCommand=vRipBadCommand, vIPXRouterInfo=vIPXRouterInfo, vStpPortPriority=vStpPortPriority, vLanMobileGroup=vLanMobileGroup, gmAutoServiceTable=gmAutoServiceTable, atmcportRuleEntry=atmcportRuleEntry, vSrApeInFrames=vSrApeInFrames, gmAutoServiceSecondaryPort=gmAutoServiceSecondaryPort, atvIPRouterVLanGroup=atvIPRouterVLanGroup, atVLANRuleType=atVLANRuleType, atMcastRuleMacAddressState=atMcastRuleMacAddressState, vIPRouterVLan=vIPRouterVLan, qGroupRxPkts=qGroupRxPkts, pMapEgressInst=pMapEgressInst, atvIPRouterOperStatus=atvIPRouterOperStatus, vLanNumber=vLanNumber, vSrTable=vSrTable, vIPRouterRelayEntry=vIPRouterRelayEntry, atBindRuleGroupId=atBindRuleGroupId, vStpProtocolSpecification=vStpProtocolSpecification, vPmapIngressEntry=vPmapIngressEntry, atDHCPportRulePortState=atDHCPportRulePortState, atMacRuleEntry=atMacRuleEntry, vSrSapPermitFilter1=vSrSapPermitFilter1, vTrunkingServicesBridgeID=vTrunkingServicesBridgeID, qGroupRxOctets=qGroupRxOctets)
mibBuilder.exportSymbols("XYLAN-VLAN-MIB", vLanEntry=vLanEntry, atDHCPportRuleEntry=atDHCPportRuleEntry, vStpPortEntry=vStpPortEntry, atmcportRulePortState=atmcportRulePortState, gmAutoServiceTranslations=gmAutoServiceTranslations, gmAutoServiceActivePort=gmAutoServiceActivePort, v80210ServicesSlot=v80210ServicesSlot, pMapIngressAdminStatus=pMapIngressAdminStatus, atvIPXRouterTable=atvIPXRouterTable, atportRulePortId=atportRulePortId, atProtoRuleStatus=atProtoRuleStatus, atvIPRouterSubNetMask=atvIPRouterSubNetMask, atVLANAdminStatus=atVLANAdminStatus, atDHCPportRuleTable=atDHCPportRuleTable, groupMobilityStatus=groupMobilityStatus, vSrLanIdMismatches=vSrLanIdMismatches, atmcMacRuleTable=atmcMacRuleTable, vStpPortFuncTyp=vStpPortFuncTyp, vSrHopCountExceededDiscards=vSrHopCountExceededDiscards, vIPRouterBcastAddress=vIPRouterBcastAddress, vRipNonZero=vRipNonZero, atvIPXSrcRteType=atvIPXSrcRteType, vStpRootPortSlot=vStpRootPortSlot, vSrDuplicateSegmentDiscards=vSrDuplicateSegmentDiscards, atDHCPMacRuleVLANId=atDHCPMacRuleVLANId, atmcVLANControlTable=atmcVLANControlTable, vLanBrdgTpExtendedAgeingTime=vLanBrdgTpExtendedAgeingTime, atmcVLANOperStatus=atmcVLANOperStatus, atUserRuleGroupId=atUserRuleGroupId, vStpPortDesignatedPtFuncTyp=vStpPortDesignatedPtFuncTyp, vStpBridgeHelloTime=vStpBridgeHelloTime, vStpRootCost=vStpRootCost, atmcVLANRuleSumGroupId=atmcVLANRuleSumGroupId, atvIPRouterRelayServicesFwd=atvIPRouterRelayServicesFwd, vStpPortDesignatedPtFuncTypInst=vStpPortDesignatedPtFuncTypInst, atNetRuleProtocolId=atNetRuleProtocolId, atVLANRuleSumEntry=atVLANRuleSumEntry, vDBrServicesTable=vDBrServicesTable, atvIPXRouterAdmStatus=atvIPXRouterAdmStatus, vBrdgTpFdbDupStatus=vBrdgTpFdbDupStatus, pMapConfigId=pMapConfigId, vStpDesignatedRoot=vStpDesignatedRoot, gmAutoServiceOperState=gmAutoServiceOperState, gmGroupListEntry=gmGroupListEntry, vBrdgTpFdbRcvPortSlot=vBrdgTpFdbRcvPortSlot, qGroupTxOctets=qGroupTxOctets, vStpPortFuncTypInst=vStpPortFuncTypInst, NetNumber=NetNumber, vBrdgTpFdbLastSeenTime=vBrdgTpFdbLastSeenTime, vStpRootPortIF=vStpRootPortIF, vIPXRouterAdmStatus=vIPXRouterAdmStatus, vStpPortDesignatedPtIF=vStpPortDesignatedPtIF, atProtoRuleGroupId=atProtoRuleGroupId, atmcVLANGroupId=atmcVLANGroupId, vBrdgTpFdbRcvPortFuncTyp=vBrdgTpFdbRcvPortFuncTyp, atvIPRouterFramingType=atvIPRouterFramingType, vStpPriority=vStpPriority, atvIPXRouterVLan=atvIPXRouterVLan, atDHCPMacRuleMacAddressState=atDHCPMacRuleMacAddressState, vStpPortPathCost=vStpPortPathCost, qGroupEntry=qGroupEntry, vStpPortEnable=vStpPortEnable, vTrunkingServicesDescription=vTrunkingServicesDescription, vBrdgStaticPortSlot=vBrdgStaticPortSlot, atMacRuleGroupId=atMacRuleGroupId, vDBrServicesStation=vDBrServicesStation, vTrunkingServicesSlot=vTrunkingServicesSlot, vTrunkingLanNumber=vTrunkingLanNumber, vTrunkingSlot=vTrunkingSlot, gmAutoServiceType=gmAutoServiceType, v80210LanNumber=v80210LanNumber, vLanInfo=vLanInfo, vSrHopCount=vSrHopCount, vDupMacMac=vDupMacMac, vDBrServicesDescription=vDBrServicesDescription, vDBr=vDBr, vIPRouterEntry=vIPRouterEntry, vSrSpecOutFrames=vSrSpecOutFrames, vPmapConfigTable=vPmapConfigTable, atVLANId=atVLANId, vIPRouterTable=vIPRouterTable, qGroupMode=qGroupMode, vIPRouterRelayParam2=vIPRouterRelayParam2, vIPRouterRelayParam1=vIPRouterRelayParam1, atNetRuleNetAddr=atNetRuleNetAddr, vIPRouterNetAddress=vIPRouterNetAddress, vStpMaxAge=vStpMaxAge, vDBrServicesSlot=vDBrServicesSlot, atVLANDesc=atVLANDesc, vSrInvalidRif=vSrInvalidRif, vBrdgStaticPortIF=vBrdgStaticPortIF, atNetRuleIndex=atNetRuleIndex, atVLANRuleSumGroupId=atVLANRuleSumGroupId, vLanAuthGroupProtocol=vLanAuthGroupProtocol, vTrunkingCommand=vTrunkingCommand, vDupMacSlot=vDupMacSlot, atProtoRuleTable=atProtoRuleTable, pMapEgressId=pMapEgressId, atProtoRuleIndex=atProtoRuleIndex, gmDefGroup=gmDefGroup, atvIPRouterDescription=atvIPRouterDescription, pMapEgressSrvc=pMapEgressSrvc, gmGroupListPortInterface=gmGroupListPortInterface, gmAutoServiceActiveSlot=gmAutoServiceActiveSlot, atmcportRuleIdx=atmcportRuleIdx, vPmapNextId=vPmapNextId, gmAutoServiceName=gmAutoServiceName, vStpPortDesignatedPtSlot=vStpPortDesignatedPtSlot, atUserRuleOffset=atUserRuleOffset, vBrdgTpFdbAddress=vBrdgTpFdbAddress, XylanVlanModes=XylanVlanModes, vDupMacTime=vDupMacTime, vSrSteInFrames=vSrSteInFrames, gmGroupListPortSlot=gmGroupListPortSlot, atportRulePortState=atportRulePortState, atmcVLANRuleSubIndex=atmcVLANRuleSubIndex, vIPXRouterDescription=vIPXRouterDescription, vLanNextFreeNumber=vLanNextFreeNumber, atDHCPportRuleIdx=atDHCPportRuleIdx, atDHCPMacRuleTable=atDHCPMacRuleTable, vStpPortForwardTransitions=vStpPortForwardTransitions, atportRuleEntry=atportRuleEntry, vIPRouterRelayNextHop=vIPRouterRelayNextHop, vSrSapPermitFilter2=vSrSapPermitFilter2, qGroupTable=qGroupTable, atvIPXRouterVLanGroup=atvIPXRouterVLanGroup, atvIPRouterRipConfigMode=atvIPRouterRipConfigMode, vLanMode=vLanMode, vStpPortState=vStpPortState, gmAutoServiceGroupId=gmAutoServiceGroupId, vTrunkingServicesEntry=vTrunkingServicesEntry, vBrdgInfo=vBrdgInfo, vBrdgTpFdbTable=vBrdgTpFdbTable, vStpStatus=vStpStatus, qGroupSlot=qGroupSlot, vBrdgStaticAddress=vBrdgStaticAddress, vStpLanMode=vStpLanMode, vLanStpStatus=vLanStpStatus, vStpForwardDelay=vStpForwardDelay, atportRuleTable=atportRuleTable, pMapIngressId=pMapIngressId, pMapIngressPort=pMapIngressPort, atmcVLANAdminStatus=atmcVLANAdminStatus, atProtoRuleEntry=atProtoRuleEntry, atDHCPMacRuleEntry=atDHCPMacRuleEntry, vLanRouterAddress=vLanRouterAddress, atvIPRouterInfo=atvIPRouterInfo, vRipInfoEntry=vRipInfoEntry, vStpPortDesignatedRoot=vStpPortDesignatedRoot, XylanVlanOperStatCodes=XylanVlanOperStatCodes, atportRuleVLANId=atportRuleVLANId, atDHCPMacRuleMacAddress=atDHCPMacRuleMacAddress, gmAutoServiceNumber=gmAutoServiceNumber, atBindRuleProtocol=atBindRuleProtocol, vRipInfovLanNumber=vRipInfovLanNumber, vStpHelloTime=vStpHelloTime, vSrPortType=vSrPortType, gmAutoServiceSecondarySlot=gmAutoServiceSecondarySlot, vSrSTESpanMode=vSrSTESpanMode, vLanAuthGroup=vLanAuthGroup)
