#
# PySNMP MIB module H3C-EPON-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/H3C-EPON-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 19:09:06 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, Integer, OctetString = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "Integer", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
SingleValueConstraint, ValueRangeConstraint, ConstraintsIntersection, ConstraintsUnion, ValueSizeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "SingleValueConstraint", "ValueRangeConstraint", "ConstraintsIntersection", "ConstraintsUnion", "ValueSizeConstraint")
h3cEpon, = mibBuilder.importSymbols("HUAWEI-3COM-OID-MIB", "h3cEpon")
hwLswFrameIndex, hwLswSlotIndex = mibBuilder.importSymbols("HUAWEI-LSW-DEV-ADM-MIB", "hwLswFrameIndex", "hwLswSlotIndex")
ifIndex, ifDescr = mibBuilder.importSymbols("IF-MIB", "ifIndex", "ifDescr")
InetAddress, InetAddressType = mibBuilder.importSymbols("INET-ADDRESS-MIB", "InetAddress", "InetAddressType")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
Counter64, Gauge32, ObjectIdentity, Counter32, Unsigned32, iso, ModuleIdentity, MibScalar, MibTable, MibTableRow, MibTableColumn, TimeTicks, IpAddress, Integer32, NotificationType, MibIdentifier, Bits = mibBuilder.importSymbols("SNMPv2-SMI", "Counter64", "Gauge32", "ObjectIdentity", "Counter32", "Unsigned32", "iso", "ModuleIdentity", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "TimeTicks", "IpAddress", "Integer32", "NotificationType", "MibIdentifier", "Bits")
DisplayString, TextualConvention, RowStatus, TruthValue, MacAddress, DateAndTime = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention", "RowStatus", "TruthValue", "MacAddress", "DateAndTime")
h3cEponMibObjects = ModuleIdentity((1, 3, 6, 1, 4, 1, 2011, 10, 2, 42, 1))
if mibBuilder.loadTexts: h3cEponMibObjects.setLastUpdated('200705221008Z')
if mibBuilder.loadTexts: h3cEponMibObjects.setOrganization('Hangzhou H3C Technologies Co., Ltd.')
h3cEponSysMan = MibIdentifier((1, 3, 6, 1, 4, 1, 2011, 10, 2, 42, 1, 1))
h3cEponAutoAuthorize = MibScalar((1, 3, 6, 1, 4, 1, 2011, 10, 2, 42, 1, 1, 1), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: h3cEponAutoAuthorize.setStatus('current')
h3cEponMonitorCycle = MibScalar((1, 3, 6, 1, 4, 1, 2011, 10, 2, 42, 1, 1, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: h3cEponMonitorCycle.setStatus('current')
h3cEponMsgTimeOut = MibScalar((1, 3, 6, 1, 4, 1, 2011, 10, 2, 42, 1, 1, 3), Integer32().clone(600)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: h3cEponMsgTimeOut.setStatus('current')
h3cEponMsgLoseNum = MibScalar((1, 3, 6, 1, 4, 1, 2011, 10, 2, 42, 1, 1, 4), Integer32().clone(20)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: h3cEponMsgLoseNum.setStatus('current')
h3cEponSysHasEPONBoard = MibScalar((1, 3, 6, 1, 4, 1, 2011, 10, 2, 42, 1, 1, 5), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cEponSysHasEPONBoard.setStatus('current')
h3cEponMonitorCycleEnable = MibScalar((1, 3, 6, 1, 4, 1, 2011, 10, 2, 42, 1, 1, 6), TruthValue().clone('true')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: h3cEponMonitorCycleEnable.setStatus('current')
h3cEponOltSoftwareErrAlmEnable = MibScalar((1, 3, 6, 1, 4, 1, 2011, 10, 2, 42, 1, 1, 7), TruthValue().clone('true')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: h3cEponOltSoftwareErrAlmEnable.setStatus('current')
h3cEponPortLoopBackAlmEnable = MibScalar((1, 3, 6, 1, 4, 1, 2011, 10, 2, 42, 1, 1, 8), TruthValue().clone('true')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: h3cEponPortLoopBackAlmEnable.setStatus('current')
h3cEponMonitorCycleMinVal = MibScalar((1, 3, 6, 1, 4, 1, 2011, 10, 2, 42, 1, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cEponMonitorCycleMinVal.setStatus('current')
h3cEponMonitorCycleMaxVal = MibScalar((1, 3, 6, 1, 4, 1, 2011, 10, 2, 42, 1, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cEponMonitorCycleMaxVal.setStatus('current')
h3cEponMsgTimeOutMinVal = MibScalar((1, 3, 6, 1, 4, 1, 2011, 10, 2, 42, 1, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cEponMsgTimeOutMinVal.setStatus('current')
h3cEponMsgTimeOutMaxVal = MibScalar((1, 3, 6, 1, 4, 1, 2011, 10, 2, 42, 1, 1, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cEponMsgTimeOutMaxVal.setStatus('current')
h3cEponMsgLoseNumMinVal = MibScalar((1, 3, 6, 1, 4, 1, 2011, 10, 2, 42, 1, 1, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cEponMsgLoseNumMinVal.setStatus('current')
h3cEponMsgLoseNumMaxVal = MibScalar((1, 3, 6, 1, 4, 1, 2011, 10, 2, 42, 1, 1, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cEponMsgLoseNumMaxVal.setStatus('current')
h3cEponSysScalarGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 2011, 10, 2, 42, 1, 1, 15))
h3cEponSysManTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 10, 2, 42, 1, 1, 16), )
if mibBuilder.loadTexts: h3cEponSysManTable.setStatus('current')
h3cEponSysManEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 10, 2, 42, 1, 1, 16, 1), ).setIndexNames((0, "H3C-EPON-MIB", "h3cEponSlotIndex"))
if mibBuilder.loadTexts: h3cEponSysManEntry.setStatus('current')
h3cEponSlotIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 2, 42, 1, 1, 16, 1, 1), Integer32())
if mibBuilder.loadTexts: h3cEponSlotIndex.setStatus('current')
h3cEponModeSwitch = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 2, 42, 1, 1, 16, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("cmode", 1), ("hmode", 2))).clone('cmode')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: h3cEponModeSwitch.setStatus('current')
h3cEponAutomaticMode = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 2, 42, 1, 1, 16, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('enable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: h3cEponAutomaticMode.setStatus('current')
h3cEponOamDiscoveryTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 2, 42, 1, 1, 16, 1, 4), Integer32().clone(30)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: h3cEponOamDiscoveryTimeout.setStatus('current')
h3cEponEncryptionNoReplyTimeOut = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 2, 42, 1, 1, 16, 1, 5), Integer32().clone(30)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: h3cEponEncryptionNoReplyTimeOut.setStatus('current')
h3cEponEncryptionUpdateTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 2, 42, 1, 1, 16, 1, 6), Integer32().clone(10)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: h3cEponEncryptionUpdateTime.setStatus('current')
h3cEponAutoBindStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 2, 42, 1, 1, 16, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: h3cEponAutoBindStatus.setStatus('current')
h3cEponAutoUpdateTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 10, 2, 42, 1, 1, 17), )
if mibBuilder.loadTexts: h3cEponAutoUpdateTable.setStatus('current')
h3cEponAutoUpdateEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 10, 2, 42, 1, 1, 17, 1), ).setIndexNames((0, "H3C-EPON-MIB", "h3cEponSlotIndex"))
if mibBuilder.loadTexts: h3cEponAutoUpdateEntry.setStatus('current')
h3cEponAutoUpdateFileName = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 2, 42, 1, 1, 17, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: h3cEponAutoUpdateFileName.setStatus('current')
h3cEponAutoUpdateSchedStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 2, 42, 1, 1, 17, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: h3cEponAutoUpdateSchedStatus.setStatus('current')
h3cEponAutoUpdateSchedTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 2, 42, 1, 1, 17, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: h3cEponAutoUpdateSchedTime.setStatus('current')
h3cEponAutoUpdateSchedType = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 2, 42, 1, 1, 17, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("daily", 1), ("weekly", 2), ("comingdate", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: h3cEponAutoUpdateSchedType.setStatus('current')
h3cEponAutoUpdateRealTimeStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 2, 42, 1, 1, 17, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: h3cEponAutoUpdateRealTimeStatus.setStatus('current')
h3cEponOuiIndexNextTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 10, 2, 42, 1, 1, 18), )
if mibBuilder.loadTexts: h3cEponOuiIndexNextTable.setStatus('current')
h3cEponOuiIndexNextEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 10, 2, 42, 1, 1, 18, 1), ).setIndexNames((0, "H3C-EPON-MIB", "h3cEponSlotIndex"))
if mibBuilder.loadTexts: h3cEponOuiIndexNextEntry.setStatus('current')
h3cEponOuiIndexNext = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 2, 42, 1, 1, 18, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cEponOuiIndexNext.setStatus('current')
h3cEponOuiTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 10, 2, 42, 1, 1, 19), )
if mibBuilder.loadTexts: h3cEponOuiTable.setStatus('current')
h3cEponOuiEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 10, 2, 42, 1, 1, 19, 1), ).setIndexNames((0, "H3C-EPON-MIB", "h3cEponSlotIndex"), (0, "H3C-EPON-MIB", "h3cEponOuiIndex"))
if mibBuilder.loadTexts: h3cEponOuiEntry.setStatus('current')
h3cEponOuiIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 2, 42, 1, 1, 19, 1, 1), Integer32())
if mibBuilder.loadTexts: h3cEponOuiIndex.setStatus('current')
h3cEponOuiValue = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 2, 42, 1, 1, 19, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 512))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: h3cEponOuiValue.setStatus('current')
h3cEponOamVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 2, 42, 1, 1, 19, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: h3cEponOamVersion.setStatus('current')
h3cEponOuiRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 2, 42, 1, 1, 19, 1, 4), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: h3cEponOuiRowStatus.setStatus('current')
h3cEponMulticastControlTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 10, 2, 42, 1, 1, 20), )
if mibBuilder.loadTexts: h3cEponMulticastControlTable.setStatus('current')
h3cEponMulticastControlEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 10, 2, 42, 1, 1, 20, 1), ).setIndexNames((0, "H3C-EPON-MIB", "h3cEponMulticastVlanId"))
if mibBuilder.loadTexts: h3cEponMulticastControlEntry.setStatus('current')
h3cEponMulticastVlanId = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 2, 42, 1, 1, 20, 1, 1), Integer32())
if mibBuilder.loadTexts: h3cEponMulticastVlanId.setStatus('current')
h3cEponMulticastAddressList = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 2, 42, 1, 1, 20, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: h3cEponMulticastAddressList.setStatus('current')
h3cEponMulticastStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 2, 42, 1, 1, 20, 1, 3), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: h3cEponMulticastStatus.setStatus('current')
h3cEponFileName = MibIdentifier((1, 3, 6, 1, 4, 1, 2011, 10, 2, 42, 1, 2))
h3cEponDbaUpdateFileName = MibScalar((1, 3, 6, 1, 4, 1, 2011, 10, 2, 42, 1, 2, 1), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: h3cEponDbaUpdateFileName.setStatus('current')
h3cEponOnuUpdateFileName = MibScalar((1, 3, 6, 1, 4, 1, 2011, 10, 2, 42, 1, 2, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: h3cEponOnuUpdateFileName.setStatus('current')
h3cEponOltMan = MibIdentifier((1, 3, 6, 1, 4, 1, 2011, 10, 2, 42, 1, 3))
h3cOltSysManTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 10, 2, 42, 1, 3, 1), )
if mibBuilder.loadTexts: h3cOltSysManTable.setStatus('current')
h3cOltSysManEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 10, 2, 42, 1, 3, 1, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: h3cOltSysManEntry.setStatus('current')
h3cOltLaserOnTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 2, 42, 1, 3, 1, 1, 1), Integer32().clone(96)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: h3cOltLaserOnTime.setStatus('current')
h3cOltLaserOffTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 2, 42, 1, 3, 1, 1, 2), Integer32().clone(96)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: h3cOltLaserOffTime.setStatus('current')
h3cOltMultiCopyBrdCast = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 2, 42, 1, 3, 1, 1, 3), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: h3cOltMultiCopyBrdCast.setStatus('current')
h3cOltEnableDiscardPacket = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 2, 42, 1, 3, 1, 1, 4), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: h3cOltEnableDiscardPacket.setStatus('current')
h3cOltSelfTest = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 2, 42, 1, 3, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("selftest", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: h3cOltSelfTest.setStatus('current')
h3cOltSelfTestResult = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 2, 42, 1, 3, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("ok", 2), ("fail", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cOltSelfTestResult.setStatus('current')
h3cOltMaxRtt = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 2, 42, 1, 3, 1, 1, 7), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: h3cOltMaxRtt.setStatus('current')
h3cOltInfoTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 10, 2, 42, 1, 3, 2), )
if mibBuilder.loadTexts: h3cOltInfoTable.setStatus('current')
h3cOltInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 10, 2, 42, 1, 3, 2, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: h3cOltInfoEntry.setStatus('current')
h3cOltFirmMajorVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 2, 42, 1, 3, 2, 1, 1), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cOltFirmMajorVersion.setStatus('current')
h3cOltFirmMinorVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 2, 42, 1, 3, 2, 1, 2), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cOltFirmMinorVersion.setStatus('current')
h3cOltHardMajorVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 2, 42, 1, 3, 2, 1, 3), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cOltHardMajorVersion.setStatus('current')
h3cOltHardMinorVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 2, 42, 1, 3, 2, 1, 4), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cOltHardMinorVersion.setStatus('current')
h3cOltAgcLockTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 2, 42, 1, 3, 2, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cOltAgcLockTime.setStatus('current')
h3cOltAgcCdrTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 2, 42, 1, 3, 2, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cOltAgcCdrTime.setStatus('current')
h3cOltMacAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 2, 42, 1, 3, 2, 1, 7), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cOltMacAddress.setStatus('current')
h3cOltWorkMode = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 2, 42, 1, 3, 2, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("other", 1), ("open", 2), ("reset", 3), ("closed", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cOltWorkMode.setStatus('current')
h3cOltOpticalPowerTx = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 2, 42, 1, 3, 2, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cOltOpticalPowerTx.setStatus('current')
h3cOltOpticalPowerRx = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 2, 42, 1, 3, 2, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cOltOpticalPowerRx.setStatus('current')
h3cOltDbaManTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 10, 2, 42, 1, 3, 3), )
if mibBuilder.loadTexts: h3cOltDbaManTable.setStatus('current')
h3cOltDbaManEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 10, 2, 42, 1, 3, 3, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: h3cOltDbaManEntry.setStatus('current')
h3cOltDbaEnabledType = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 2, 42, 1, 3, 3, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("internal", 1), ("external", 2))).clone('internal')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: h3cOltDbaEnabledType.setStatus('current')
h3cOltDbaDiscoveryLength = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 2, 42, 1, 3, 3, 1, 2), Integer32().clone(41500)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: h3cOltDbaDiscoveryLength.setStatus('current')
h3cOltDbaDiscovryFrequency = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 2, 42, 1, 3, 3, 1, 3), Integer32().clone(50)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: h3cOltDbaDiscovryFrequency.setStatus('current')
h3cOltDbaCycleLength = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 2, 42, 1, 3, 3, 1, 4), Integer32().clone(65535)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: h3cOltDbaCycleLength.setStatus('current')
h3cOltDbaVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 2, 42, 1, 3, 3, 1, 5), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cOltDbaVersion.setStatus('current')
h3cOltDbaUpdate = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 2, 42, 1, 3, 3, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("update", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: h3cOltDbaUpdate.setStatus('current')
h3cOltDbaUpdateResult = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 2, 42, 1, 3, 3, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("other", 1), ("ok", 2), ("fail", 3), ("fileNotExist", 4), ("notSetFilename", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cOltDbaUpdateResult.setStatus('current')
h3cOltPortAlarmThresholdTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 10, 2, 42, 1, 3, 4), )
if mibBuilder.loadTexts: h3cOltPortAlarmThresholdTable.setStatus('current')
h3cOltPortAlarmThresholdEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 10, 2, 42, 1, 3, 4, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: h3cOltPortAlarmThresholdEntry.setStatus('current')
h3cOltPortAlarmBerEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 2, 42, 1, 3, 4, 1, 1), TruthValue().clone('true')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: h3cOltPortAlarmBerEnabled.setStatus('current')
h3cOltPortAlarmBerDirect = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 2, 42, 1, 3, 4, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("berUplink", 1), ("berDownlink", 2), ("berAll", 3))).clone('berAll')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: h3cOltPortAlarmBerDirect.setStatus('current')
h3cOltPortAlarmBerThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 2, 42, 1, 3, 4, 1, 3), Integer32().clone(10)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: h3cOltPortAlarmBerThreshold.setStatus('current')
h3cOltPortAlarmFerEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 2, 42, 1, 3, 4, 1, 4), TruthValue().clone('true')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: h3cOltPortAlarmFerEnabled.setStatus('current')
h3cOltPortAlarmFerDirect = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 2, 42, 1, 3, 4, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("ferUplink", 1), ("ferDownlink", 2), ("ferAll", 3))).clone('ferAll')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: h3cOltPortAlarmFerDirect.setStatus('current')
h3cOltPortAlarmFerThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 2, 42, 1, 3, 4, 1, 6), Integer32().clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: h3cOltPortAlarmFerThreshold.setStatus('current')
h3cOltPortAlarmLlidMismatchEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 2, 42, 1, 3, 4, 1, 7), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: h3cOltPortAlarmLlidMismatchEnabled.setStatus('current')
h3cOltPortAlarmLlidMismatchThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 2, 42, 1, 3, 4, 1, 8), Integer32().clone(5000)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: h3cOltPortAlarmLlidMismatchThreshold.setStatus('current')
h3cOltPortAlarmRemoteStableEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 2, 42, 1, 3, 4, 1, 9), TruthValue().clone('true')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: h3cOltPortAlarmRemoteStableEnabled.setStatus('current')
h3cOltPortAlarmLocalStableEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 2, 42, 1, 3, 4, 1, 10), TruthValue().clone('true')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: h3cOltPortAlarmLocalStableEnabled.setStatus('current')
h3cOltPortAlarmRegistrationEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 2, 42, 1, 3, 4, 1, 11), TruthValue().clone('true')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: h3cOltPortAlarmRegistrationEnabled.setStatus('current')
h3cOltPortAlarmOamDisconnectionEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 2, 42, 1, 3, 4, 1, 12), TruthValue().clone('true')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: h3cOltPortAlarmOamDisconnectionEnabled.setStatus('current')
h3cOltPortAlarmEncryptionKeyEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 2, 42, 1, 3, 4, 1, 13), TruthValue().clone('true')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: h3cOltPortAlarmEncryptionKeyEnabled.setStatus('current')
h3cOltPortAlarmVendorSpecificEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 2, 42, 1, 3, 4, 1, 14), TruthValue().clone('true')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: h3cOltPortAlarmVendorSpecificEnabled.setStatus('current')
h3cOltPortAlarmRegExcessEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 2, 42, 1, 3, 4, 1, 15), TruthValue().clone('true')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: h3cOltPortAlarmRegExcessEnabled.setStatus('current')
h3cOltPortAlarmDFEEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 2, 42, 1, 3, 4, 1, 16), TruthValue().clone('true')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: h3cOltPortAlarmDFEEnabled.setStatus('current')
h3cOltLaserOnTimeMinVal = MibScalar((1, 3, 6, 1, 4, 1, 2011, 10, 2, 42, 1, 3, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cOltLaserOnTimeMinVal.setStatus('current')
h3cOltLaserOnTimeMaxVal = MibScalar((1, 3, 6, 1, 4, 1, 2011, 10, 2, 42, 1, 3, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cOltLaserOnTimeMaxVal.setStatus('current')
h3cOltLaserOffTimeMinVal = MibScalar((1, 3, 6, 1, 4, 1, 2011, 10, 2, 42, 1, 3, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cOltLaserOffTimeMinVal.setStatus('current')
h3cOltLaserOffTimeMaxVal = MibScalar((1, 3, 6, 1, 4, 1, 2011, 10, 2, 42, 1, 3, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cOltLaserOffTimeMaxVal.setStatus('current')
h3cOltDbaDiscoveryLengthMinVal = MibScalar((1, 3, 6, 1, 4, 1, 2011, 10, 2, 42, 1, 3, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cOltDbaDiscoveryLengthMinVal.setStatus('current')
h3cOltDbaDiscoveryLengthMaxVal = MibScalar((1, 3, 6, 1, 4, 1, 2011, 10, 2, 42, 1, 3, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cOltDbaDiscoveryLengthMaxVal.setStatus('current')
h3cOltDbaDiscovryFrequencyMinVal = MibScalar((1, 3, 6, 1, 4, 1, 2011, 10, 2, 42, 1, 3, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cOltDbaDiscovryFrequencyMinVal.setStatus('current')
h3cOltDbaDiscovryFrequencyMaxVal = MibScalar((1, 3, 6, 1, 4, 1, 2011, 10, 2, 42, 1, 3, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cOltDbaDiscovryFrequencyMaxVal.setStatus('current')
h3cOltDbaCycleLengthMinVal = MibScalar((1, 3, 6, 1, 4, 1, 2011, 10, 2, 42, 1, 3, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cOltDbaCycleLengthMinVal.setStatus('current')
h3cOltDbaCycleLengthMaxVal = MibScalar((1, 3, 6, 1, 4, 1, 2011, 10, 2, 42, 1, 3, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cOltDbaCycleLengthMaxVal.setStatus('current')
h3cOltPortAlarmLlidMisMinVal = MibScalar((1, 3, 6, 1, 4, 1, 2011, 10, 2, 42, 1, 3, 15), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cOltPortAlarmLlidMisMinVal.setStatus('current')
h3cOltPortAlarmLlidMisMaxVal = MibScalar((1, 3, 6, 1, 4, 1, 2011, 10, 2, 42, 1, 3, 16), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cOltPortAlarmLlidMisMaxVal.setStatus('current')
h3cOltPortAlarmBerMinVal = MibScalar((1, 3, 6, 1, 4, 1, 2011, 10, 2, 42, 1, 3, 17), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cOltPortAlarmBerMinVal.setStatus('current')
h3cOltPortAlarmBerMaxVal = MibScalar((1, 3, 6, 1, 4, 1, 2011, 10, 2, 42, 1, 3, 18), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cOltPortAlarmBerMaxVal.setStatus('current')
h3cOltPortAlarmFerMinVal = MibScalar((1, 3, 6, 1, 4, 1, 2011, 10, 2, 42, 1, 3, 19), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cOltPortAlarmFerMinVal.setStatus('current')
h3cOltPortAlarmFerMaxVal = MibScalar((1, 3, 6, 1, 4, 1, 2011, 10, 2, 42, 1, 3, 20), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cOltPortAlarmFerMaxVal.setStatus('current')
h3cOnuSilentTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 10, 2, 42, 1, 3, 21), )
if mibBuilder.loadTexts: h3cOnuSilentTable.setStatus('current')
h3cOnuSilentEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 10, 2, 42, 1, 3, 21, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "H3C-EPON-MIB", "h3cOnuSilentMacAddr"))
if mibBuilder.loadTexts: h3cOnuSilentEntry.setStatus('current')
h3cOnuSilentMacAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 2, 42, 1, 3, 21, 1, 1), MacAddress())
if mibBuilder.loadTexts: h3cOnuSilentMacAddr.setStatus('current')
h3cOnuSilentTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 2, 42, 1, 3, 21, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cOnuSilentTime.setStatus('current')
h3cOltUsingOnuTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 10, 2, 42, 1, 3, 22), )
if mibBuilder.loadTexts: h3cOltUsingOnuTable.setStatus('current')
h3cOltUsingOnuEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 10, 2, 42, 1, 3, 22, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "H3C-EPON-MIB", "h3cOltUsingOnuNum"))
if mibBuilder.loadTexts: h3cOltUsingOnuEntry.setStatus('current')
h3cOltUsingOnuNum = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 2, 42, 1, 3, 22, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 64)))
if mibBuilder.loadTexts: h3cOltUsingOnuNum.setStatus('current')
h3cOltUsingOnuIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 2, 42, 1, 3, 22, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cOltUsingOnuIfIndex.setStatus('current')
h3cOltUsingOnuRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 2, 42, 1, 3, 22, 1, 3), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: h3cOltUsingOnuRowStatus.setStatus('current')
h3cEponOnuMan = MibIdentifier((1, 3, 6, 1, 4, 1, 2011, 10, 2, 42, 1, 5))
h3cOnuSysManTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 10, 2, 42, 1, 5, 1), )
if mibBuilder.loadTexts: h3cOnuSysManTable.setStatus('current')
h3cOnuSysManEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 10, 2, 42, 1, 5, 1, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: h3cOnuSysManEntry.setStatus('current')
h3cOnuEncryptMan = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 2, 42, 1, 5, 1, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("off", 1), ("downlink", 2), ("updownlink", 3))).clone('downlink')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: h3cOnuEncryptMan.setStatus('current')
h3cOnuReAuthorize = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 2, 42, 1, 5, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("reAuthorize", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: h3cOnuReAuthorize.setStatus('current')
h3cOnuMulticastFilterStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 2, 42, 1, 5, 1, 1, 3), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: h3cOnuMulticastFilterStatus.setStatus('current')
h3cOnuDbaReportQueueSetNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 2, 42, 1, 5, 1, 1, 4), Integer32().clone(2)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: h3cOnuDbaReportQueueSetNumber.setStatus('current')
h3cOnuRemoteFecStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 2, 42, 1, 5, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: h3cOnuRemoteFecStatus.setStatus('current')
h3cOnuPortBerStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 2, 42, 1, 5, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('enable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: h3cOnuPortBerStatus.setStatus('current')
h3cOnuReset = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 2, 42, 1, 5, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("reset", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: h3cOnuReset.setStatus('current')
h3cOnuMulticastControlMode = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 2, 42, 1, 5, 1, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("igmpsnooping", 1), ("multicastcontrol", 2))).clone('igmpsnooping')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: h3cOnuMulticastControlMode.setStatus('current')
h3cOnuAccessVlan = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 2, 42, 1, 5, 1, 1, 9), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: h3cOnuAccessVlan.setStatus('current')
h3cOnuEncryptKey = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 2, 42, 1, 5, 1, 1, 10), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: h3cOnuEncryptKey.setStatus('current')
h3cOnuUniUpDownTrapStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 2, 42, 1, 5, 1, 1, 11), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: h3cOnuUniUpDownTrapStatus.setStatus('current')
h3cOnuFecStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 2, 42, 1, 5, 1, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: h3cOnuFecStatus.setStatus('current')
h3cOnuMcastCtrlHostAgingTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 2, 42, 1, 5, 1, 1, 13), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: h3cOnuMcastCtrlHostAgingTime.setStatus('current')
h3cOnuMulticastFastLeaveEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 2, 42, 1, 5, 1, 1, 14), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: h3cOnuMulticastFastLeaveEnable.setStatus('current')
h3cOnuPortIsolateEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 2, 42, 1, 5, 1, 1, 15), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: h3cOnuPortIsolateEnable.setStatus('current')
h3cOnuLinkTestTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 10, 2, 42, 1, 5, 2), )
if mibBuilder.loadTexts: h3cOnuLinkTestTable.setStatus('current')
h3cOnuLinkTestEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 10, 2, 42, 1, 5, 2, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: h3cOnuLinkTestEntry.setStatus('current')
h3cOnuLinkTestFrameNum = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 2, 42, 1, 5, 2, 1, 1), Integer32().clone(20)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: h3cOnuLinkTestFrameNum.setStatus('current')
h3cOnuLinkTestFrameSize = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 2, 42, 1, 5, 2, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(60, 1514)).clone(1000)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: h3cOnuLinkTestFrameSize.setStatus('current')
h3cOnuLinkTestDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 2, 42, 1, 5, 2, 1, 3), TruthValue().clone('true')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: h3cOnuLinkTestDelay.setStatus('current')
h3cOnuLinkTestVlanTag = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 2, 42, 1, 5, 2, 1, 4), TruthValue().clone('true')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: h3cOnuLinkTestVlanTag.setStatus('current')
h3cOnuLinkTestVlanPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 2, 42, 1, 5, 2, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7)).clone(2)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: h3cOnuLinkTestVlanPriority.setStatus('current')
h3cOnuLinkTestVlanTagID = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 2, 42, 1, 5, 2, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4094)).clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: h3cOnuLinkTestVlanTagID.setStatus('current')
h3cOnuLinkTestResultSentFrameNum = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 2, 42, 1, 5, 2, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cOnuLinkTestResultSentFrameNum.setStatus('current')
h3cOnuLinkTestResultRetFrameNum = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 2, 42, 1, 5, 2, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cOnuLinkTestResultRetFrameNum.setStatus('current')
h3cOnuLinkTestResultRetErrFrameNum = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 2, 42, 1, 5, 2, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cOnuLinkTestResultRetErrFrameNum.setStatus('current')
h3cOnuLinkTestResultMinDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 2, 42, 1, 5, 2, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cOnuLinkTestResultMinDelay.setStatus('current')
h3cOnuLinkTestResultMeanDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 2, 42, 1, 5, 2, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cOnuLinkTestResultMeanDelay.setStatus('current')
h3cOnuLinkTestResultMaxDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 2, 42, 1, 5, 2, 1, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cOnuLinkTestResultMaxDelay.setStatus('current')
h3cOnuBandWidthTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 10, 2, 42, 1, 5, 3), )
if mibBuilder.loadTexts: h3cOnuBandWidthTable.setStatus('current')
h3cOnuBandWidthEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 10, 2, 42, 1, 5, 3, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: h3cOnuBandWidthEntry.setStatus('current')
h3cOnuDownStreamBandWidthPolicy = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 2, 42, 1, 5, 3, 1, 1), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: h3cOnuDownStreamBandWidthPolicy.setStatus('current')
h3cOnuDownStreamMaxBandWidth = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 2, 42, 1, 5, 3, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1000000)).clone(1000000)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: h3cOnuDownStreamMaxBandWidth.setStatus('current')
h3cOnuDownStreamMaxBurstSize = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 2, 42, 1, 5, 3, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 8388480)).clone(8388480)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: h3cOnuDownStreamMaxBurstSize.setStatus('current')
h3cOnuDownStreamHighPriorityFirst = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 2, 42, 1, 5, 3, 1, 4), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: h3cOnuDownStreamHighPriorityFirst.setStatus('current')
h3cOnuDownStreamShortFrameFirst = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 2, 42, 1, 5, 3, 1, 5), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: h3cOnuDownStreamShortFrameFirst.setStatus('current')
h3cOnuP2PBandWidthPolicy = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 2, 42, 1, 5, 3, 1, 6), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: h3cOnuP2PBandWidthPolicy.setStatus('current')
h3cOnuP2PMaxBandWidth = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 2, 42, 1, 5, 3, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1000000)).clone(1000000)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: h3cOnuP2PMaxBandWidth.setStatus('current')
h3cOnuP2PMaxBurstSize = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 2, 42, 1, 5, 3, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 8388480)).clone(8388480)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: h3cOnuP2PMaxBurstSize.setStatus('current')
h3cOnuP2PHighPriorityFirst = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 2, 42, 1, 5, 3, 1, 9), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: h3cOnuP2PHighPriorityFirst.setStatus('current')
h3cOnuP2PShortFrameFirst = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 2, 42, 1, 5, 3, 1, 10), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: h3cOnuP2PShortFrameFirst.setStatus('current')
h3cOnuSlaManTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 10, 2, 42, 1, 5, 4), )
if mibBuilder.loadTexts: h3cOnuSlaManTable.setStatus('current')
h3cOnuSlaManEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 10, 2, 42, 1, 5, 4, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: h3cOnuSlaManEntry.setStatus('current')
h3cOnuSlaMaxBandWidth = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 2, 42, 1, 5, 4, 1, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: h3cOnuSlaMaxBandWidth.setStatus('current')
h3cOnuSlaMinBandWidth = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 2, 42, 1, 5, 4, 1, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: h3cOnuSlaMinBandWidth.setStatus('current')
h3cOnuSlaBandWidthStepVal = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 2, 42, 1, 5, 4, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cOnuSlaBandWidthStepVal.setStatus('current')
h3cOnuSlaDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 2, 42, 1, 5, 4, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("low", 1), ("high", 2))).clone('low')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: h3cOnuSlaDelay.setStatus('current')
h3cOnuSlaFixedBandWidth = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 2, 42, 1, 5, 4, 1, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: h3cOnuSlaFixedBandWidth.setStatus('current')
h3cOnuSlaPriorityClass = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 2, 42, 1, 5, 4, 1, 6), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: h3cOnuSlaPriorityClass.setStatus('current')
h3cOnuSlaFixedPacketSize = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 2, 42, 1, 5, 4, 1, 7), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: h3cOnuSlaFixedPacketSize.setStatus('current')
h3cOnuInfoTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 10, 2, 42, 1, 5, 5), )
if mibBuilder.loadTexts: h3cOnuInfoTable.setStatus('current')
h3cOnuInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 10, 2, 42, 1, 5, 5, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: h3cOnuInfoEntry.setStatus('current')
h3cOnuHardMajorVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 2, 42, 1, 5, 5, 1, 1), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cOnuHardMajorVersion.setStatus('current')
h3cOnuHardMinorVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 2, 42, 1, 5, 5, 1, 2), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cOnuHardMinorVersion.setStatus('current')
h3cOnuSoftwareVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 2, 42, 1, 5, 5, 1, 3), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cOnuSoftwareVersion.setStatus('current')
h3cOnuUniMacType = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 2, 42, 1, 5, 5, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("other", 1), ("mii", 2), ("gmii", 3), ("tbi", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cOnuUniMacType.setStatus('current')
h3cOnuLaserOnTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 2, 42, 1, 5, 5, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cOnuLaserOnTime.setStatus('current')
h3cOnuLaserOffTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 2, 42, 1, 5, 5, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cOnuLaserOffTime.setStatus('current')
h3cOnuGrantFifoDep = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 2, 42, 1, 5, 5, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(1, 255), ValueRangeConstraint(2147483647, 2147483647), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cOnuGrantFifoDep.setStatus('current')
h3cOnuWorkMode = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 2, 42, 1, 5, 5, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("other", 1), ("on", 2), ("pending", 3), ("off", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cOnuWorkMode.setStatus('current')
h3cOnuPCBVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 2, 42, 1, 5, 5, 1, 9), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cOnuPCBVersion.setStatus('current')
h3cOnuRtt = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 2, 42, 1, 5, 5, 1, 10), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cOnuRtt.setStatus('current')
h3cOnuEEPROMVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 2, 42, 1, 5, 5, 1, 11), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cOnuEEPROMVersion.setStatus('current')
h3cOnuRegType = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 2, 42, 1, 5, 5, 1, 12), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cOnuRegType.setStatus('current')
h3cOnuHostType = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 2, 42, 1, 5, 5, 1, 13), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cOnuHostType.setStatus('current')
h3cOnuDistance = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 2, 42, 1, 5, 5, 1, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cOnuDistance.setStatus('current')
h3cOnuLlid = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 2, 42, 1, 5, 5, 1, 15), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cOnuLlid.setStatus('current')
h3cOnuVendorId = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 2, 42, 1, 5, 5, 1, 16), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cOnuVendorId.setStatus('current')
h3cOnuFirmwareVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 2, 42, 1, 5, 5, 1, 17), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cOnuFirmwareVersion.setStatus('current')
h3cOnuOpticalPowerReceivedByOlt = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 2, 42, 1, 5, 5, 1, 18), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cOnuOpticalPowerReceivedByOlt.setStatus('current')
h3cOnuMacAddrInfoTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 10, 2, 42, 1, 5, 6), )
if mibBuilder.loadTexts: h3cOnuMacAddrInfoTable.setStatus('current')
h3cOnuMacAddrInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 10, 2, 42, 1, 5, 6, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "H3C-EPON-MIB", "h3cOnuMacIndex"))
if mibBuilder.loadTexts: h3cOnuMacAddrInfoEntry.setStatus('current')
h3cOnuMacIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 2, 42, 1, 5, 6, 1, 1), Integer32())
if mibBuilder.loadTexts: h3cOnuMacIndex.setStatus('current')
h3cOnuMacAddrFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 2, 42, 1, 5, 6, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("bound", 1), ("registered", 2), ("run", 3), ("regIncorrect", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cOnuMacAddrFlag.setStatus('current')
h3cOnuMacAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 2, 42, 1, 5, 6, 1, 3), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cOnuMacAddress.setStatus('current')
h3cOnuBindMacAddrTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 10, 2, 42, 1, 5, 7), )
if mibBuilder.loadTexts: h3cOnuBindMacAddrTable.setStatus('current')
h3cOnuBindMacAddrEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 10, 2, 42, 1, 5, 7, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: h3cOnuBindMacAddrEntry.setStatus('current')
h3cOnuBindMacAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 2, 42, 1, 5, 7, 1, 1), MacAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: h3cOnuBindMacAddress.setStatus('current')
h3cOnuBindType = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 2, 42, 1, 5, 7, 1, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: h3cOnuBindType.setStatus('current')
h3cOnuFirmwareUpdateTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 10, 2, 42, 1, 5, 8), )
if mibBuilder.loadTexts: h3cOnuFirmwareUpdateTable.setStatus('current')
h3cOnuFirmwareUpdateEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 10, 2, 42, 1, 5, 8, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: h3cOnuFirmwareUpdateEntry.setStatus('current')
h3cOnuUpdate = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 2, 42, 1, 5, 8, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("update", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: h3cOnuUpdate.setStatus('current')
h3cOnuUpdateResult = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 2, 42, 1, 5, 8, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("updating", 1), ("ok", 2), ("fail", 3), ("fileNotExist", 4), ("notSetFilename", 5), ("fileNotMatchONU", 6), ("timeout", 7), ("otherError", 8)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cOnuUpdateResult.setStatus('current')
h3cOnuUpdateFileName = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 2, 42, 1, 5, 8, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: h3cOnuUpdateFileName.setStatus('current')
h3cOnuLinkTestFrameNumMinVal = MibScalar((1, 3, 6, 1, 4, 1, 2011, 10, 2, 42, 1, 5, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cOnuLinkTestFrameNumMinVal.setStatus('current')
h3cOnuLinkTestFrameNumMaxVal = MibScalar((1, 3, 6, 1, 4, 1, 2011, 10, 2, 42, 1, 5, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cOnuLinkTestFrameNumMaxVal.setStatus('current')
h3cOnuSlaMaxBandWidthMinVal = MibScalar((1, 3, 6, 1, 4, 1, 2011, 10, 2, 42, 1, 5, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cOnuSlaMaxBandWidthMinVal.setStatus('current')
h3cOnuSlaMaxBandWidthMaxVal = MibScalar((1, 3, 6, 1, 4, 1, 2011, 10, 2, 42, 1, 5, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cOnuSlaMaxBandWidthMaxVal.setStatus('current')
h3cOnuSlaMinBandWidthMinVal = MibScalar((1, 3, 6, 1, 4, 1, 2011, 10, 2, 42, 1, 5, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cOnuSlaMinBandWidthMinVal.setStatus('current')
h3cOnuSlaMinBandWidthMaxVal = MibScalar((1, 3, 6, 1, 4, 1, 2011, 10, 2, 42, 1, 5, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cOnuSlaMinBandWidthMaxVal.setStatus('current')
h3cEponOnuTypeManTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 10, 2, 42, 1, 5, 15), )
if mibBuilder.loadTexts: h3cEponOnuTypeManTable.setStatus('current')
h3cEponOnuTypeManEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 10, 2, 42, 1, 5, 15, 1), ).setIndexNames((0, "H3C-EPON-MIB", "h3cEponOnuTypeIndex"))
if mibBuilder.loadTexts: h3cEponOnuTypeManEntry.setStatus('current')
h3cEponOnuTypeIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 2, 42, 1, 5, 15, 1, 1), Integer32())
if mibBuilder.loadTexts: h3cEponOnuTypeIndex.setStatus('current')
h3cEponOnuTypeDescr = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 2, 42, 1, 5, 15, 1, 2), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cEponOnuTypeDescr.setStatus('current')
h3cOnuPacketManTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 10, 2, 42, 1, 5, 16), )
if mibBuilder.loadTexts: h3cOnuPacketManTable.setStatus('current')
h3cOnuPacketManEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 10, 2, 42, 1, 5, 16, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: h3cOnuPacketManEntry.setStatus('current')
h3cOnuPriorityTrust = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 2, 42, 1, 5, 16, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("dscp", 1), ("ipprecedence", 2), ("cos", 3))).clone('cos')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: h3cOnuPriorityTrust.setStatus('current')
h3cOnuQueueScheduler = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 2, 42, 1, 5, 16, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("spq", 1), ("wfq", 2))).clone('spq')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: h3cOnuQueueScheduler.setStatus('current')
h3cOnuProtocolTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 10, 2, 42, 1, 5, 17), )
if mibBuilder.loadTexts: h3cOnuProtocolTable.setStatus('current')
h3cOnuProtocolEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 10, 2, 42, 1, 5, 17, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: h3cOnuProtocolEntry.setStatus('current')
h3cOnuStpStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 2, 42, 1, 5, 17, 1, 1), TruthValue().clone('true')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: h3cOnuStpStatus.setStatus('current')
h3cOnuIgmpSnoopingStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 2, 42, 1, 5, 17, 1, 2), TruthValue().clone('true')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: h3cOnuIgmpSnoopingStatus.setStatus('current')
h3cOnuDhcpsnoopingOption82 = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 2, 42, 1, 5, 17, 1, 3), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: h3cOnuDhcpsnoopingOption82.setStatus('current')
h3cOnuDhcpsnooping = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 2, 42, 1, 5, 17, 1, 4), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: h3cOnuDhcpsnooping.setStatus('current')
h3cOnuPppoe = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 2, 42, 1, 5, 17, 1, 5), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: h3cOnuPppoe.setStatus('current')
h3cOnuIgmpSnoopingHostAgingT = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 2, 42, 1, 5, 17, 1, 6), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: h3cOnuIgmpSnoopingHostAgingT.setStatus('current')
h3cOnuIgmpSnoopingMaxRespT = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 2, 42, 1, 5, 17, 1, 7), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: h3cOnuIgmpSnoopingMaxRespT.setStatus('current')
h3cOnuIgmpSnoopingRouterAgingT = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 2, 42, 1, 5, 17, 1, 8), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: h3cOnuIgmpSnoopingRouterAgingT.setStatus('current')
h3cOnuIgmpSnoopingAggReportS = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 2, 42, 1, 5, 17, 1, 9), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: h3cOnuIgmpSnoopingAggReportS.setStatus('current')
h3cOnuIgmpSnoopingAggLeaveS = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 2, 42, 1, 5, 17, 1, 10), TruthValue().clone('true')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: h3cOnuIgmpSnoopingAggLeaveS.setStatus('current')
h3cOnuDot1xTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 10, 2, 42, 1, 5, 18), )
if mibBuilder.loadTexts: h3cOnuDot1xTable.setStatus('current')
h3cOnuDot1xEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 10, 2, 42, 1, 5, 18, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: h3cOnuDot1xEntry.setStatus('current')
h3cOnuDot1xAccount = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 2, 42, 1, 5, 18, 1, 1), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: h3cOnuDot1xAccount.setStatus('current')
h3cOnuDot1xPassword = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 2, 42, 1, 5, 18, 1, 2), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: h3cOnuDot1xPassword.setStatus('current')
h3cEponBatchOperationMan = MibIdentifier((1, 3, 6, 1, 4, 1, 2011, 10, 2, 42, 1, 6))
h3cOnuPriorityQueueTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 10, 2, 42, 1, 5, 19), )
if mibBuilder.loadTexts: h3cOnuPriorityQueueTable.setStatus('current')
h3cOnuPriorityQueueEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 10, 2, 42, 1, 5, 19, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "H3C-EPON-MIB", "h3cOnuQueueDirection"), (0, "H3C-EPON-MIB", "h3cOnuQueueId"))
if mibBuilder.loadTexts: h3cOnuPriorityQueueEntry.setStatus('current')
h3cOnuQueueDirection = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 2, 42, 1, 5, 19, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("inbound", 1), ("outbound", 2))))
if mibBuilder.loadTexts: h3cOnuQueueDirection.setStatus('current')
h3cOnuQueueId = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 2, 42, 1, 5, 19, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7)))
if mibBuilder.loadTexts: h3cOnuQueueId.setStatus('current')
h3cOnuQueueSize = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 2, 42, 1, 5, 19, 1, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: h3cOnuQueueSize.setStatus('current')
h3cOnuCountTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 10, 2, 42, 1, 5, 20), )
if mibBuilder.loadTexts: h3cOnuCountTable.setStatus('current')
h3cOnuCountEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 10, 2, 42, 1, 5, 20, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: h3cOnuCountEntry.setStatus('current')
h3cOnuInCRCErrPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 2, 42, 1, 5, 20, 1, 1), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cOnuInCRCErrPkts.setStatus('current')
h3cOnuOutDroppedFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 2, 42, 1, 5, 20, 1, 2), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cOnuOutDroppedFrames.setStatus('current')
h3cEponOnuScalarGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 2011, 10, 2, 42, 1, 5, 21))
h3cOnuPriorityQueueSizeMinVal = MibScalar((1, 3, 6, 1, 4, 1, 2011, 10, 2, 42, 1, 5, 21, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cOnuPriorityQueueSizeMinVal.setStatus('current')
h3cOnuPriorityQueueSizeMaxVal = MibScalar((1, 3, 6, 1, 4, 1, 2011, 10, 2, 42, 1, 5, 21, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cOnuPriorityQueueSizeMaxVal.setStatus('current')
h3cOnuPriorityQueueBandwidthMinVal = MibScalar((1, 3, 6, 1, 4, 1, 2011, 10, 2, 42, 1, 5, 21, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cOnuPriorityQueueBandwidthMinVal.setStatus('current')
h3cOnuPriorityQueueBandwidthMaxVal = MibScalar((1, 3, 6, 1, 4, 1, 2011, 10, 2, 42, 1, 5, 21, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cOnuPriorityQueueBandwidthMaxVal.setStatus('current')
h3cOnuPriorityQueueBurstsizeMinVal = MibScalar((1, 3, 6, 1, 4, 1, 2011, 10, 2, 42, 1, 5, 21, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cOnuPriorityQueueBurstsizeMinVal.setStatus('current')
h3cOnuPriorityQueueBurstsizeMaxVal = MibScalar((1, 3, 6, 1, 4, 1, 2011, 10, 2, 42, 1, 5, 21, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cOnuPriorityQueueBurstsizeMaxVal.setStatus('current')
h3cOnuUpdateByTypeNextIndex = MibScalar((1, 3, 6, 1, 4, 1, 2011, 10, 2, 42, 1, 5, 21, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cOnuUpdateByTypeNextIndex.setStatus('current')
h3cOnuQueueBandwidthTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 10, 2, 42, 1, 5, 22), )
if mibBuilder.loadTexts: h3cOnuQueueBandwidthTable.setStatus('current')
h3cOnuQueueBandwidthEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 10, 2, 42, 1, 5, 22, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "H3C-EPON-MIB", "h3cOnuQueueDirection"), (0, "H3C-EPON-MIB", "h3cOnuQueueId"))
if mibBuilder.loadTexts: h3cOnuQueueBandwidthEntry.setStatus('current')
h3cOnuQueueMaxBandwidth = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 2, 42, 1, 5, 22, 1, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: h3cOnuQueueMaxBandwidth.setStatus('current')
h3cOnuQueueMaxBurstsize = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 2, 42, 1, 5, 22, 1, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: h3cOnuQueueMaxBurstsize.setStatus('current')
h3cOnuQueuePolicyStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 2, 42, 1, 5, 22, 1, 3), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: h3cOnuQueuePolicyStatus.setStatus('current')
h3cOnuIpAddressTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 10, 2, 42, 1, 5, 23), )
if mibBuilder.loadTexts: h3cOnuIpAddressTable.setStatus('current')
h3cOnuIpAddressEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 10, 2, 42, 1, 5, 23, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: h3cOnuIpAddressEntry.setStatus('current')
h3cOnuIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 2, 42, 1, 5, 23, 1, 1), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: h3cOnuIpAddress.setStatus('current')
h3cOnuIpAddressMask = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 2, 42, 1, 5, 23, 1, 2), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: h3cOnuIpAddressMask.setStatus('current')
h3cOnuIpAddressGateway = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 2, 42, 1, 5, 23, 1, 3), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: h3cOnuIpAddressGateway.setStatus('current')
h3cOnuDhcpallocate = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 2, 42, 1, 5, 23, 1, 4), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: h3cOnuDhcpallocate.setStatus('current')
h3cOnuManageVID = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 2, 42, 1, 5, 23, 1, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: h3cOnuManageVID.setStatus('current')
h3cOnuManageVlanIntfS = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 2, 42, 1, 5, 23, 1, 6), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: h3cOnuManageVlanIntfS.setStatus('current')
h3cOnuChipSetInfoTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 10, 2, 42, 1, 5, 24), )
if mibBuilder.loadTexts: h3cOnuChipSetInfoTable.setStatus('current')
h3cOnuChipSetInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 10, 2, 42, 1, 5, 24, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: h3cOnuChipSetInfoEntry.setStatus('current')
h3cOnuChipSetVendorId = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 2, 42, 1, 5, 24, 1, 1), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cOnuChipSetVendorId.setStatus('current')
h3cOnuChipSetModel = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 2, 42, 1, 5, 24, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cOnuChipSetModel.setStatus('current')
h3cOnuChipSetRevision = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 2, 42, 1, 5, 24, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cOnuChipSetRevision.setStatus('current')
h3cOnuChipSetDesignDate = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 2, 42, 1, 5, 24, 1, 4), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cOnuChipSetDesignDate.setStatus('current')
h3cOnuCapabilityTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 10, 2, 42, 1, 5, 25), )
if mibBuilder.loadTexts: h3cOnuCapabilityTable.setStatus('current')
h3cOnuCapabilityEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 10, 2, 42, 1, 5, 25, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: h3cOnuCapabilityEntry.setStatus('current')
h3cOnuServiceSupported = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 2, 42, 1, 5, 25, 1, 1), Bits().clone(namedValues=NamedValues(("geinterfacesupport", 0), ("feinterfacesupport", 1), ("voipservicesupport", 2), ("tdmservicesupport", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cOnuServiceSupported.setStatus('current')
h3cOnuGEPortNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 2, 42, 1, 5, 25, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cOnuGEPortNumber.setStatus('current')
h3cOnuFEPortNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 2, 42, 1, 5, 25, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cOnuFEPortNumber.setStatus('current')
h3cOnuPOTSPortNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 2, 42, 1, 5, 25, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cOnuPOTSPortNumber.setStatus('current')
h3cOnuE1PortsNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 2, 42, 1, 5, 25, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cOnuE1PortsNumber.setStatus('current')
h3cOnuUpstreamQueueNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 2, 42, 1, 5, 25, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cOnuUpstreamQueueNumber.setStatus('current')
h3cOnuMaxUpstreamQueuePerPort = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 2, 42, 1, 5, 25, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cOnuMaxUpstreamQueuePerPort.setStatus('current')
h3cOnuDownstreamQueueNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 2, 42, 1, 5, 25, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cOnuDownstreamQueueNumber.setStatus('current')
h3cOnuMaxDownstreamQueuePerPort = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 2, 42, 1, 5, 25, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cOnuMaxDownstreamQueuePerPort.setStatus('current')
h3cOnuBatteryBackup = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 2, 42, 1, 5, 25, 1, 10), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cOnuBatteryBackup.setStatus('current')
h3cOnuIgspFastLeaveSupported = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 2, 42, 1, 5, 25, 1, 11), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cOnuIgspFastLeaveSupported.setStatus('current')
h3cOnuMCtrlFastLeaveSupported = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 2, 42, 1, 5, 25, 1, 12), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cOnuMCtrlFastLeaveSupported.setStatus('current')
h3cOnuDbaReportTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 10, 2, 42, 1, 5, 26), )
if mibBuilder.loadTexts: h3cOnuDbaReportTable.setStatus('current')
h3cOnuDbaReportEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 10, 2, 42, 1, 5, 26, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "H3C-EPON-MIB", "h3cOnuDbaReportQueueId"))
if mibBuilder.loadTexts: h3cOnuDbaReportEntry.setStatus('current')
h3cOnuDbaReportQueueId = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 2, 42, 1, 5, 26, 1, 1), Integer32())
if mibBuilder.loadTexts: h3cOnuDbaReportQueueId.setStatus('current')
h3cOnuDbaReportThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 2, 42, 1, 5, 26, 1, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: h3cOnuDbaReportThreshold.setStatus('current')
h3cOnuDbaReportStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 2, 42, 1, 5, 26, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: h3cOnuDbaReportStatus.setStatus('current')
h3cOnuCosToLocalPrecedenceTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 10, 2, 42, 1, 5, 27), )
if mibBuilder.loadTexts: h3cOnuCosToLocalPrecedenceTable.setStatus('current')
h3cOnuCosToLocalPrecedenceEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 10, 2, 42, 1, 5, 27, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "H3C-EPON-MIB", "h3cOnuCosToLocalPrecedenceCosIndex"))
if mibBuilder.loadTexts: h3cOnuCosToLocalPrecedenceEntry.setStatus('current')
h3cOnuCosToLocalPrecedenceCosIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 2, 42, 1, 5, 27, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cOnuCosToLocalPrecedenceCosIndex.setStatus('current')
h3cOnuCosToLocalPrecedenceValue = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 2, 42, 1, 5, 27, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: h3cOnuCosToLocalPrecedenceValue.setStatus('current')
h3cEponOnuStpPortTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 10, 2, 42, 1, 5, 28), )
if mibBuilder.loadTexts: h3cEponOnuStpPortTable.setStatus('current')
h3cEponOnuStpPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 10, 2, 42, 1, 5, 28, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "H3C-EPON-MIB", "h3cEponStpPortIndex"))
if mibBuilder.loadTexts: h3cEponOnuStpPortEntry.setStatus('current')
h3cEponStpPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 2, 42, 1, 5, 28, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 144))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: h3cEponStpPortIndex.setStatus('current')
h3cEponStpPortDescr = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 2, 42, 1, 5, 28, 1, 2), OctetString()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: h3cEponStpPortDescr.setStatus('current')
h3cEponStpPortState = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 2, 42, 1, 5, 28, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("disabled", 1), ("discarding", 2), ("learning", 3), ("forwarding", 4)))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: h3cEponStpPortState.setStatus('current')
h3cOnuPhysicalTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 10, 2, 42, 1, 5, 29), )
if mibBuilder.loadTexts: h3cOnuPhysicalTable.setStatus('current')
h3cOnuPhysicalEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 10, 2, 42, 1, 5, 29, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: h3cOnuPhysicalEntry.setStatus('current')
h3cOnuBridgeMac = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 2, 42, 1, 5, 29, 1, 1), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cOnuBridgeMac.setStatus('current')
h3cOnuFirstPonMac = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 2, 42, 1, 5, 29, 1, 2), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cOnuFirstPonMac.setStatus('current')
h3cOnuFirstPonRegState = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 2, 42, 1, 5, 29, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("notExist", 1), ("absent", 2), ("offline", 3), ("silent", 4), ("down", 5), ("up", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cOnuFirstPonRegState.setStatus('current')
h3cOnuSecondPonMac = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 2, 42, 1, 5, 29, 1, 4), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cOnuSecondPonMac.setStatus('current')
h3cOnuSecondPonRegState = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 2, 42, 1, 5, 29, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("notExist", 1), ("absent", 2), ("offline", 3), ("silent", 4), ("down", 5), ("up", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cOnuSecondPonRegState.setStatus('current')
h3cOnuSmlkTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 10, 2, 42, 1, 5, 30), )
if mibBuilder.loadTexts: h3cOnuSmlkTable.setStatus('current')
h3cOnuSmlkEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 10, 2, 42, 1, 5, 30, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "H3C-EPON-MIB", "h3cOnuSmlkGroupID"))
if mibBuilder.loadTexts: h3cOnuSmlkEntry.setStatus('current')
h3cOnuSmlkGroupID = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 2, 42, 1, 5, 30, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cOnuSmlkGroupID.setStatus('current')
h3cOnuSmlkFirstPonRole = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 2, 42, 1, 5, 30, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("master", 1), ("slave", 2), ("null", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cOnuSmlkFirstPonRole.setStatus('current')
h3cOnuSmlkFirstPonStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 2, 42, 1, 5, 30, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("active", 1), ("standby", 2), ("down", 3), ("null", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cOnuSmlkFirstPonStatus.setStatus('current')
h3cOnuSmlkSecondPonRole = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 2, 42, 1, 5, 30, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("master", 1), ("slave", 2), ("null", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cOnuSmlkSecondPonRole.setStatus('current')
h3cOnuSmlkSecondPonStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 2, 42, 1, 5, 30, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("active", 1), ("standby", 2), ("down", 3), ("null", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cOnuSmlkSecondPonStatus.setStatus('current')
h3cOnuRS485PropertiesTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 10, 2, 42, 1, 5, 31), )
if mibBuilder.loadTexts: h3cOnuRS485PropertiesTable.setStatus('current')
h3cOnuRS485PropertiesEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 10, 2, 42, 1, 5, 31, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "H3C-EPON-MIB", "h3cOnuRS485SerialIndex"))
if mibBuilder.loadTexts: h3cOnuRS485PropertiesEntry.setStatus('current')
h3cOnuRS485SerialIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 2, 42, 1, 5, 31, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 64)))
if mibBuilder.loadTexts: h3cOnuRS485SerialIndex.setStatus('current')
h3cOnuRS485BaudRate = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 2, 42, 1, 5, 31, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10))).clone(namedValues=NamedValues(("baudRate300", 1), ("baudRate600", 2), ("baudRate1200", 3), ("baudRate2400", 4), ("baudRate4800", 5), ("baudRate9600", 6), ("baudRate19200", 7), ("baudRate38400", 8), ("baudRate57600", 9), ("baudRate115200", 10))).clone('baudRate9600')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: h3cOnuRS485BaudRate.setStatus('current')
h3cOnuRS485DataBits = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 2, 42, 1, 5, 31, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("five", 1), ("six", 2), ("seven", 3), ("eight", 4))).clone('eight')).setUnits('bit').setMaxAccess("readwrite")
if mibBuilder.loadTexts: h3cOnuRS485DataBits.setStatus('current')
h3cOnuRS485Parity = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 2, 42, 1, 5, 31, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("none", 1), ("odd", 2), ("even", 3), ("mark", 4), ("space", 5))).clone('none')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: h3cOnuRS485Parity.setStatus('current')
h3cOnuRS485StopBits = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 2, 42, 1, 5, 31, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("one", 1), ("two", 2), ("oneAndHalf", 3))).clone('one')).setUnits('bit').setMaxAccess("readwrite")
if mibBuilder.loadTexts: h3cOnuRS485StopBits.setStatus('current')
h3cOnuRS485FlowControl = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 2, 42, 1, 5, 31, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("none", 1), ("hardware", 2), ("xonOrxoff", 3))).clone('none')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: h3cOnuRS485FlowControl.setStatus('current')
h3cOnuRS485TXOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 2, 42, 1, 5, 31, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cOnuRS485TXOctets.setStatus('current')
h3cOnuRS485RXOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 2, 42, 1, 5, 31, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cOnuRS485RXOctets.setStatus('current')
h3cOnuRS485TXErrOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 2, 42, 1, 5, 31, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cOnuRS485TXErrOctets.setStatus('current')
h3cOnuRS485RXErrOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 2, 42, 1, 5, 31, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cOnuRS485RXErrOctets.setStatus('current')
h3cOnuRS485ResetStatistics = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 2, 42, 1, 5, 31, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("counting", 1), ("clear", 2))).clone('counting')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: h3cOnuRS485ResetStatistics.setStatus('current')
h3cOnuRS485SessionSummaryTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 10, 2, 42, 1, 5, 32), )
if mibBuilder.loadTexts: h3cOnuRS485SessionSummaryTable.setStatus('current')
h3cOnuRS485SessionSummaryEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 10, 2, 42, 1, 5, 32, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "H3C-EPON-MIB", "h3cOnuRS485SerialIndex"))
if mibBuilder.loadTexts: h3cOnuRS485SessionSummaryEntry.setStatus('current')
h3cOnuRS485SessionMaxNum = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 2, 42, 1, 5, 32, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cOnuRS485SessionMaxNum.setStatus('current')
h3cOnuRS485SessionNextIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 2, 42, 1, 5, 32, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cOnuRS485SessionNextIndex.setStatus('current')
h3cOnuRS485SessionTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 10, 2, 42, 1, 5, 33), )
if mibBuilder.loadTexts: h3cOnuRS485SessionTable.setStatus('current')
h3cOnuRS485SessionEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 10, 2, 42, 1, 5, 33, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "H3C-EPON-MIB", "h3cOnuRS485SerialIndex"), (0, "H3C-EPON-MIB", "h3cOnuRS485SessionIndex"))
if mibBuilder.loadTexts: h3cOnuRS485SessionEntry.setStatus('current')
h3cOnuRS485SessionIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 2, 42, 1, 5, 33, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 64)))
if mibBuilder.loadTexts: h3cOnuRS485SessionIndex.setStatus('current')
h3cOnuRS485SessionType = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 2, 42, 1, 5, 33, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("udp", 1), ("tcpClient", 2), ("tcpServer", 3)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: h3cOnuRS485SessionType.setStatus('current')
h3cOnuRS485SessionAddType = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 2, 42, 1, 5, 33, 1, 3), InetAddressType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: h3cOnuRS485SessionAddType.setStatus('current')
h3cOnuRS485SessionRemoteIP = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 2, 42, 1, 5, 33, 1, 4), InetAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: h3cOnuRS485SessionRemoteIP.setStatus('current')
h3cOnuRS485SessionRemotePort = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 2, 42, 1, 5, 33, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1024, 65535))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: h3cOnuRS485SessionRemotePort.setStatus('current')
h3cOnuRS485SessionLocalPort = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 2, 42, 1, 5, 33, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1024, 65535))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: h3cOnuRS485SessionLocalPort.setStatus('current')
h3cOnuRS485SessionRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 2, 42, 1, 5, 33, 1, 7), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: h3cOnuRS485SessionRowStatus.setStatus('current')
h3cOnuRS485SessionErrInfoTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 10, 2, 42, 1, 5, 34), )
if mibBuilder.loadTexts: h3cOnuRS485SessionErrInfoTable.setStatus('current')
h3cOnuRS485SessionErrInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 10, 2, 42, 1, 5, 34, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "H3C-EPON-MIB", "h3cOnuRS485SerialIndex"), (0, "H3C-EPON-MIB", "h3cOnuRS485SessionIndex"))
if mibBuilder.loadTexts: h3cOnuRS485SessionErrInfoEntry.setStatus('current')
h3cOnuRS485SessionErrInfo = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 2, 42, 1, 5, 34, 1, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cOnuRS485SessionErrInfo.setStatus('current')
h3cEponBatchOperationBySlotTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 10, 2, 42, 1, 6, 1), )
if mibBuilder.loadTexts: h3cEponBatchOperationBySlotTable.setStatus('current')
h3cEponBatchOperationBySlotEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 10, 2, 42, 1, 6, 1, 1), ).setIndexNames((0, "H3C-EPON-MIB", "h3cEponBatchOperationBySlotIndex"))
if mibBuilder.loadTexts: h3cEponBatchOperationBySlotEntry.setStatus('current')
h3cEponBatchOperationBySlotIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 2, 42, 1, 6, 1, 1, 1), Integer32())
if mibBuilder.loadTexts: h3cEponBatchOperationBySlotIndex.setStatus('current')
h3cEponBatchOperationBySlotType = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 2, 42, 1, 6, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 9, 10))).clone(namedValues=NamedValues(("resetUnknown", 1), ("updateDba", 9), ("updateONU", 10)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: h3cEponBatchOperationBySlotType.setStatus('current')
h3cEponBatchOperationBySlot = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 2, 42, 1, 6, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("batOpBySlot", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: h3cEponBatchOperationBySlot.setStatus('current')
h3cEponBatchOperationBySlotResult = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 2, 42, 1, 6, 1, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cEponBatchOperationBySlotResult.setStatus('current')
h3cEponBatchOperationByOLTTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 10, 2, 42, 1, 6, 2), )
if mibBuilder.loadTexts: h3cEponBatchOperationByOLTTable.setStatus('current')
h3cEponBatchOperationByOLTEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 10, 2, 42, 1, 6, 2, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: h3cEponBatchOperationByOLTEntry.setStatus('current')
h3cEponBatchOperationByOLTType = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 2, 42, 1, 6, 2, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 5))).clone(namedValues=NamedValues(("resetUnknown", 1), ("updateONU", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: h3cEponBatchOperationByOLTType.setStatus('current')
h3cEponBatchOperationByOLT = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 2, 42, 1, 6, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("batOpByOlt", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: h3cEponBatchOperationByOLT.setStatus('current')
h3cEponBatchOperationByOLTResult = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 2, 42, 1, 6, 2, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cEponBatchOperationByOLTResult.setStatus('current')
h3cOnuFirmwareUpdateByTypeTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 10, 2, 42, 1, 6, 3), )
if mibBuilder.loadTexts: h3cOnuFirmwareUpdateByTypeTable.setStatus('current')
h3cOnuFirmwareUpdateByTypeEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 10, 2, 42, 1, 6, 3, 1), ).setIndexNames((0, "H3C-EPON-MIB", "h3cOnuUpdateByOnuTypeIndex"))
if mibBuilder.loadTexts: h3cOnuFirmwareUpdateByTypeEntry.setStatus('current')
h3cOnuUpdateByOnuTypeIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 2, 42, 1, 6, 3, 1, 1), Integer32())
if mibBuilder.loadTexts: h3cOnuUpdateByOnuTypeIndex.setStatus('current')
h3cOnuUpdateByTypeOnuType = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 2, 42, 1, 6, 3, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 15))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: h3cOnuUpdateByTypeOnuType.setStatus('current')
h3cOnuUpdateByTypeFileName = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 2, 42, 1, 6, 3, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: h3cOnuUpdateByTypeFileName.setStatus('current')
h3cOnuUpdateByTypeRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 2, 42, 1, 6, 3, 1, 4), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: h3cOnuUpdateByTypeRowStatus.setStatus('current')
h3cEponErrorInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 2011, 10, 2, 42, 1, 7))
h3cEponSoftwareErrorCode = MibScalar((1, 3, 6, 1, 4, 1, 2011, 10, 2, 42, 1, 7, 1), Integer32()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: h3cEponSoftwareErrorCode.setStatus('current')
h3cOamVendorSpecificAlarmCode = MibScalar((1, 3, 6, 1, 4, 1, 2011, 10, 2, 42, 1, 7, 2), Integer32()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: h3cOamVendorSpecificAlarmCode.setStatus('current')
h3cEponOnuRegErrorMacAddr = MibScalar((1, 3, 6, 1, 4, 1, 2011, 10, 2, 42, 1, 7, 3), OctetString()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: h3cEponOnuRegErrorMacAddr.setStatus('current')
h3cOamEventLogType = MibScalar((1, 3, 6, 1, 4, 1, 2011, 10, 2, 42, 1, 7, 4), Unsigned32()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: h3cOamEventLogType.setStatus('current')
h3cOamEventLogLocation = MibScalar((1, 3, 6, 1, 4, 1, 2011, 10, 2, 42, 1, 7, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("local", 1), ("remote", 2)))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: h3cOamEventLogLocation.setStatus('current')
h3cEponLoopbackPortIndex = MibScalar((1, 3, 6, 1, 4, 1, 2011, 10, 2, 42, 1, 7, 6), Integer32()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: h3cEponLoopbackPortIndex.setStatus('current')
h3cEponLoopbackPortDescr = MibScalar((1, 3, 6, 1, 4, 1, 2011, 10, 2, 42, 1, 7, 7), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: h3cEponLoopbackPortDescr.setStatus('current')
h3cOltPortAlarmLlidMisFrames = MibScalar((1, 3, 6, 1, 4, 1, 2011, 10, 2, 42, 1, 7, 8), Unsigned32()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: h3cOltPortAlarmLlidMisFrames.setStatus('current')
h3cOltPortAlarmBer = MibScalar((1, 3, 6, 1, 4, 1, 2011, 10, 2, 42, 1, 7, 9), Unsigned32()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: h3cOltPortAlarmBer.setStatus('current')
h3cOltPortAlarmFer = MibScalar((1, 3, 6, 1, 4, 1, 2011, 10, 2, 42, 1, 7, 10), Unsigned32()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: h3cOltPortAlarmFer.setStatus('current')
h3cEponOnuRegSilentMac = MibScalar((1, 3, 6, 1, 4, 1, 2011, 10, 2, 42, 1, 7, 11), OctetString()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: h3cEponOnuRegSilentMac.setStatus('current')
h3cEponOperationResult = MibScalar((1, 3, 6, 1, 4, 1, 2011, 10, 2, 42, 1, 7, 12), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: h3cEponOperationResult.setStatus('current')
h3cEponOnuLaserState = MibScalar((1, 3, 6, 1, 4, 1, 2011, 10, 2, 42, 1, 7, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("normal", 1), ("laserAlwaysOn", 2), ("signalDegradation", 3), ("endOfLife", 4)))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: h3cEponOnuLaserState.setStatus('current')
h3cEponTrap = MibIdentifier((1, 3, 6, 1, 4, 1, 2011, 10, 2, 42, 1, 8))
h3cEponTrapPrefix = MibIdentifier((1, 3, 6, 1, 4, 1, 2011, 10, 2, 42, 1, 8, 0))
h3cEponPortAlarmBerTrap = NotificationType((1, 3, 6, 1, 4, 1, 2011, 10, 2, 42, 1, 8, 0, 1)).setObjects(("IF-MIB", "ifIndex"), ("IF-MIB", "ifDescr"), ("H3C-EPON-MIB", "h3cOltPortAlarmBerDirect"), ("H3C-EPON-MIB", "h3cOltPortAlarmBer"), ("H3C-EPON-MIB", "h3cOltPortAlarmBerThreshold"))
if mibBuilder.loadTexts: h3cEponPortAlarmBerTrap.setStatus('current')
h3cEponPortAlarmFerTrap = NotificationType((1, 3, 6, 1, 4, 1, 2011, 10, 2, 42, 1, 8, 0, 2)).setObjects(("IF-MIB", "ifIndex"), ("IF-MIB", "ifDescr"), ("H3C-EPON-MIB", "h3cOltPortAlarmFerDirect"), ("H3C-EPON-MIB", "h3cOltPortAlarmFer"), ("H3C-EPON-MIB", "h3cOltPortAlarmFerThreshold"))
if mibBuilder.loadTexts: h3cEponPortAlarmFerTrap.setStatus('current')
h3cEponErrorLLIDFrameTrap = NotificationType((1, 3, 6, 1, 4, 1, 2011, 10, 2, 42, 1, 8, 0, 3)).setObjects(("IF-MIB", "ifIndex"), ("IF-MIB", "ifDescr"), ("H3C-EPON-MIB", "h3cOltPortAlarmLlidMisFrames"), ("H3C-EPON-MIB", "h3cOltPortAlarmLlidMismatchThreshold"))
if mibBuilder.loadTexts: h3cEponErrorLLIDFrameTrap.setStatus('current')
h3cEponLoopBackEnableTrap = NotificationType((1, 3, 6, 1, 4, 1, 2011, 10, 2, 42, 1, 8, 0, 4)).setObjects(("IF-MIB", "ifIndex"), ("IF-MIB", "ifDescr"), ("H3C-EPON-MIB", "h3cEponLoopbackPortIndex"), ("H3C-EPON-MIB", "h3cEponLoopbackPortDescr"))
if mibBuilder.loadTexts: h3cEponLoopBackEnableTrap.setStatus('current')
h3cEponOnuRegistrationErrTrap = NotificationType((1, 3, 6, 1, 4, 1, 2011, 10, 2, 42, 1, 8, 0, 5)).setObjects(("IF-MIB", "ifIndex"), ("IF-MIB", "ifDescr"), ("H3C-EPON-MIB", "h3cEponOnuRegErrorMacAddr"))
if mibBuilder.loadTexts: h3cEponOnuRegistrationErrTrap.setStatus('current')
h3cEponOamDisconnectionTrap = NotificationType((1, 3, 6, 1, 4, 1, 2011, 10, 2, 42, 1, 8, 0, 6)).setObjects(("IF-MIB", "ifIndex"), ("IF-MIB", "ifDescr"))
if mibBuilder.loadTexts: h3cEponOamDisconnectionTrap.setStatus('current')
h3cEponEncryptionKeyErrTrap = NotificationType((1, 3, 6, 1, 4, 1, 2011, 10, 2, 42, 1, 8, 0, 7)).setObjects(("IF-MIB", "ifIndex"), ("IF-MIB", "ifDescr"))
if mibBuilder.loadTexts: h3cEponEncryptionKeyErrTrap.setStatus('current')
h3cEponRemoteStableTrap = NotificationType((1, 3, 6, 1, 4, 1, 2011, 10, 2, 42, 1, 8, 0, 8)).setObjects(("IF-MIB", "ifIndex"), ("IF-MIB", "ifDescr"))
if mibBuilder.loadTexts: h3cEponRemoteStableTrap.setStatus('current')
h3cEponLocalStableTrap = NotificationType((1, 3, 6, 1, 4, 1, 2011, 10, 2, 42, 1, 8, 0, 9)).setObjects(("IF-MIB", "ifIndex"), ("IF-MIB", "ifDescr"))
if mibBuilder.loadTexts: h3cEponLocalStableTrap.setStatus('current')
h3cEponOamVendorSpecificTrap = NotificationType((1, 3, 6, 1, 4, 1, 2011, 10, 2, 42, 1, 8, 0, 10)).setObjects(("IF-MIB", "ifIndex"), ("IF-MIB", "ifDescr"), ("H3C-EPON-MIB", "h3cOamVendorSpecificAlarmCode"))
if mibBuilder.loadTexts: h3cEponOamVendorSpecificTrap.setStatus('current')
h3cEponSoftwareErrTrap = NotificationType((1, 3, 6, 1, 4, 1, 2011, 10, 2, 42, 1, 8, 0, 11)).setObjects(("HUAWEI-LSW-DEV-ADM-MIB", "hwLswFrameIndex"), ("HUAWEI-LSW-DEV-ADM-MIB", "hwLswSlotIndex"), ("H3C-EPON-MIB", "h3cEponSoftwareErrorCode"))
if mibBuilder.loadTexts: h3cEponSoftwareErrTrap.setStatus('current')
h3cEponPortAlarmBerRecoverTrap = NotificationType((1, 3, 6, 1, 4, 1, 2011, 10, 2, 42, 1, 8, 0, 12)).setObjects(("IF-MIB", "ifIndex"), ("IF-MIB", "ifDescr"), ("H3C-EPON-MIB", "h3cOltPortAlarmBerDirect"))
if mibBuilder.loadTexts: h3cEponPortAlarmBerRecoverTrap.setStatus('current')
h3cEponPortAlarmFerRecoverTrap = NotificationType((1, 3, 6, 1, 4, 1, 2011, 10, 2, 42, 1, 8, 0, 13)).setObjects(("IF-MIB", "ifIndex"), ("IF-MIB", "ifDescr"), ("H3C-EPON-MIB", "h3cOltPortAlarmFerDirect"))
if mibBuilder.loadTexts: h3cEponPortAlarmFerRecoverTrap.setStatus('current')
h3cEponErrorLLIDFrameRecoverTrap = NotificationType((1, 3, 6, 1, 4, 1, 2011, 10, 2, 42, 1, 8, 0, 14)).setObjects(("IF-MIB", "ifIndex"), ("IF-MIB", "ifDescr"))
if mibBuilder.loadTexts: h3cEponErrorLLIDFrameRecoverTrap.setStatus('current')
h3cEponLoopBackEnableRecoverTrap = NotificationType((1, 3, 6, 1, 4, 1, 2011, 10, 2, 42, 1, 8, 0, 15)).setObjects(("IF-MIB", "ifIndex"), ("IF-MIB", "ifDescr"))
if mibBuilder.loadTexts: h3cEponLoopBackEnableRecoverTrap.setStatus('current')
h3cEponOnuRegistrationErrRecoverTrap = NotificationType((1, 3, 6, 1, 4, 1, 2011, 10, 2, 42, 1, 8, 0, 16)).setObjects(("IF-MIB", "ifIndex"), ("IF-MIB", "ifDescr"), ("H3C-EPON-MIB", "h3cEponOnuRegErrorMacAddr"))
if mibBuilder.loadTexts: h3cEponOnuRegistrationErrRecoverTrap.setStatus('current')
h3cEponOamDisconnectionRecoverTrap = NotificationType((1, 3, 6, 1, 4, 1, 2011, 10, 2, 42, 1, 8, 0, 17)).setObjects(("IF-MIB", "ifIndex"), ("IF-MIB", "ifDescr"))
if mibBuilder.loadTexts: h3cEponOamDisconnectionRecoverTrap.setStatus('current')
h3cEponEncryptionKeyErrRecoverTrap = NotificationType((1, 3, 6, 1, 4, 1, 2011, 10, 2, 42, 1, 8, 0, 18)).setObjects(("IF-MIB", "ifIndex"), ("IF-MIB", "ifDescr"))
if mibBuilder.loadTexts: h3cEponEncryptionKeyErrRecoverTrap.setStatus('current')
h3cEponRemoteStableRecoverTrap = NotificationType((1, 3, 6, 1, 4, 1, 2011, 10, 2, 42, 1, 8, 0, 19)).setObjects(("IF-MIB", "ifIndex"), ("IF-MIB", "ifDescr"))
if mibBuilder.loadTexts: h3cEponRemoteStableRecoverTrap.setStatus('current')
h3cEponLocalStableRecoverTrap = NotificationType((1, 3, 6, 1, 4, 1, 2011, 10, 2, 42, 1, 8, 0, 20)).setObjects(("IF-MIB", "ifIndex"), ("IF-MIB", "ifDescr"))
if mibBuilder.loadTexts: h3cEponLocalStableRecoverTrap.setStatus('current')
h3cEponOamVendorSpecificRecoverTrap = NotificationType((1, 3, 6, 1, 4, 1, 2011, 10, 2, 42, 1, 8, 0, 21)).setObjects(("IF-MIB", "ifIndex"), ("IF-MIB", "ifDescr"), ("H3C-EPON-MIB", "h3cOamVendorSpecificAlarmCode"))
if mibBuilder.loadTexts: h3cEponOamVendorSpecificRecoverTrap.setStatus('current')
h3cEponSoftwareErrRecoverTrap = NotificationType((1, 3, 6, 1, 4, 1, 2011, 10, 2, 42, 1, 8, 0, 22)).setObjects(("HUAWEI-LSW-DEV-ADM-MIB", "hwLswFrameIndex"), ("HUAWEI-LSW-DEV-ADM-MIB", "hwLswSlotIndex"), ("H3C-EPON-MIB", "h3cEponSoftwareErrorCode"))
if mibBuilder.loadTexts: h3cEponSoftwareErrRecoverTrap.setStatus('current')
h3cDot3OamThresholdRecoverEvent = NotificationType((1, 3, 6, 1, 4, 1, 2011, 10, 2, 42, 1, 8, 0, 23)).setObjects(("IF-MIB", "ifIndex"), ("H3C-EPON-MIB", "h3cOamEventLogType"), ("H3C-EPON-MIB", "h3cOamEventLogLocation"))
if mibBuilder.loadTexts: h3cDot3OamThresholdRecoverEvent.setStatus('current')
h3cDot3OamNonThresholdRecoverEvent = NotificationType((1, 3, 6, 1, 4, 1, 2011, 10, 2, 42, 1, 8, 0, 24)).setObjects(("IF-MIB", "ifIndex"), ("H3C-EPON-MIB", "h3cOamEventLogType"), ("H3C-EPON-MIB", "h3cOamEventLogLocation"))
if mibBuilder.loadTexts: h3cDot3OamNonThresholdRecoverEvent.setStatus('current')
h3cEponOnuRegExcessTrap = NotificationType((1, 3, 6, 1, 4, 1, 2011, 10, 2, 42, 1, 8, 0, 25)).setObjects(("IF-MIB", "ifIndex"), ("IF-MIB", "ifDescr"))
if mibBuilder.loadTexts: h3cEponOnuRegExcessTrap.setStatus('current')
h3cEponOnuRegExcessRecoverTrap = NotificationType((1, 3, 6, 1, 4, 1, 2011, 10, 2, 42, 1, 8, 0, 26)).setObjects(("IF-MIB", "ifIndex"), ("IF-MIB", "ifDescr"))
if mibBuilder.loadTexts: h3cEponOnuRegExcessRecoverTrap.setStatus('current')
h3cEponOnuPowerOffTrap = NotificationType((1, 3, 6, 1, 4, 1, 2011, 10, 2, 42, 1, 8, 0, 27)).setObjects(("IF-MIB", "ifIndex"), ("IF-MIB", "ifDescr"))
if mibBuilder.loadTexts: h3cEponOnuPowerOffTrap.setStatus('current')
h3cEponOltSwitchoverTrap = NotificationType((1, 3, 6, 1, 4, 1, 2011, 10, 2, 42, 1, 8, 0, 28)).setObjects(("IF-MIB", "ifIndex"), ("IF-MIB", "ifDescr"))
if mibBuilder.loadTexts: h3cEponOltSwitchoverTrap.setStatus('current')
h3cEponOltDFETrap = NotificationType((1, 3, 6, 1, 4, 1, 2011, 10, 2, 42, 1, 8, 0, 29)).setObjects(("IF-MIB", "ifIndex"), ("IF-MIB", "ifDescr"))
if mibBuilder.loadTexts: h3cEponOltDFETrap.setStatus('current')
h3cEponOltDFERecoverTrap = NotificationType((1, 3, 6, 1, 4, 1, 2011, 10, 2, 42, 1, 8, 0, 30)).setObjects(("IF-MIB", "ifIndex"), ("IF-MIB", "ifDescr"))
if mibBuilder.loadTexts: h3cEponOltDFERecoverTrap.setStatus('current')
h3cEponOnuSilenceTrap = NotificationType((1, 3, 6, 1, 4, 1, 2011, 10, 2, 42, 1, 8, 0, 31)).setObjects(("IF-MIB", "ifIndex"), ("IF-MIB", "ifDescr"), ("H3C-EPON-MIB", "h3cEponOnuRegSilentMac"))
if mibBuilder.loadTexts: h3cEponOnuSilenceTrap.setStatus('current')
h3cEponOnuSilenceRecoverTrap = NotificationType((1, 3, 6, 1, 4, 1, 2011, 10, 2, 42, 1, 8, 0, 32)).setObjects(("IF-MIB", "ifIndex"), ("IF-MIB", "ifDescr"), ("H3C-EPON-MIB", "h3cEponOnuRegSilentMac"))
if mibBuilder.loadTexts: h3cEponOnuSilenceRecoverTrap.setStatus('current')
h3cEponOnuUpdateResultTrap = NotificationType((1, 3, 6, 1, 4, 1, 2011, 10, 2, 42, 1, 8, 0, 33)).setObjects(("IF-MIB", "ifIndex"), ("IF-MIB", "ifDescr"), ("H3C-EPON-MIB", "h3cOnuBindMacAddress"), ("H3C-EPON-MIB", "h3cOnuUpdateResult"), ("H3C-EPON-MIB", "h3cOnuRegType"), ("H3C-EPON-MIB", "h3cOnuUpdateFileName"))
if mibBuilder.loadTexts: h3cEponOnuUpdateResultTrap.setStatus('current')
h3cEponOnuAutoBindTrap = NotificationType((1, 3, 6, 1, 4, 1, 2011, 10, 2, 42, 1, 8, 0, 34)).setObjects(("IF-MIB", "ifIndex"), ("IF-MIB", "ifDescr"), ("H3C-EPON-MIB", "h3cOnuBindMacAddress"), ("H3C-EPON-MIB", "h3cEponOperationResult"))
if mibBuilder.loadTexts: h3cEponOnuAutoBindTrap.setStatus('current')
h3cEponOnuPortStpStateTrap = NotificationType((1, 3, 6, 1, 4, 1, 2011, 10, 2, 42, 1, 8, 0, 35)).setObjects(("IF-MIB", "ifIndex"), ("IF-MIB", "ifDescr"), ("H3C-EPON-MIB", "h3cEponStpPortIndex"), ("H3C-EPON-MIB", "h3cEponStpPortDescr"), ("H3C-EPON-MIB", "h3cEponStpPortState"))
if mibBuilder.loadTexts: h3cEponOnuPortStpStateTrap.setStatus('current')
h3cEponOnuLaserFailedTrap = NotificationType((1, 3, 6, 1, 4, 1, 2011, 10, 2, 42, 1, 8, 0, 36)).setObjects(("IF-MIB", "ifIndex"), ("IF-MIB", "ifDescr"), ("H3C-EPON-MIB", "h3cEponOnuLaserState"))
if mibBuilder.loadTexts: h3cEponOnuLaserFailedTrap.setStatus('current')
h3cOnuSmlkSwitchoverTrap = NotificationType((1, 3, 6, 1, 4, 1, 2011, 10, 2, 42, 1, 8, 0, 37)).setObjects(("IF-MIB", "ifIndex"), ("IF-MIB", "ifDescr"), ("H3C-EPON-MIB", "h3cOnuSmlkGroupID"), ("H3C-EPON-MIB", "h3cOnuSmlkFirstPonStatus"), ("H3C-EPON-MIB", "h3cOnuSmlkSecondPonStatus"))
if mibBuilder.loadTexts: h3cOnuSmlkSwitchoverTrap.setStatus('current')
h3cEponStat = MibIdentifier((1, 3, 6, 1, 4, 1, 2011, 10, 2, 42, 1, 9))
h3cEponStatTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 10, 2, 42, 1, 9, 1), )
if mibBuilder.loadTexts: h3cEponStatTable.setStatus('current')
h3cEponStatEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 10, 2, 42, 1, 9, 1, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: h3cEponStatEntry.setStatus('current')
h3cEponStatFER = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 2, 42, 1, 9, 1, 1, 1), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cEponStatFER.setStatus('current')
h3cEponStatBER = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 2, 42, 1, 9, 1, 1, 2), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cEponStatBER.setStatus('current')
mibBuilder.exportSymbols("H3C-EPON-MIB", h3cEponOnuStpPortTable=h3cEponOnuStpPortTable, h3cOnuPhysicalEntry=h3cOnuPhysicalEntry, h3cOnuCountEntry=h3cOnuCountEntry, h3cOnuRS485SessionIndex=h3cOnuRS485SessionIndex, h3cOltLaserOnTimeMinVal=h3cOltLaserOnTimeMinVal, h3cEponPortAlarmBerRecoverTrap=h3cEponPortAlarmBerRecoverTrap, h3cOnuMacAddrFlag=h3cOnuMacAddrFlag, h3cOltMultiCopyBrdCast=h3cOltMultiCopyBrdCast, h3cOltDbaDiscoveryLength=h3cOltDbaDiscoveryLength, h3cOltPortAlarmFerMaxVal=h3cOltPortAlarmFerMaxVal, h3cOnuWorkMode=h3cOnuWorkMode, h3cEponOuiRowStatus=h3cEponOuiRowStatus, h3cEponBatchOperationByOLTResult=h3cEponBatchOperationByOLTResult, h3cEponMonitorCycle=h3cEponMonitorCycle, h3cEponSysMan=h3cEponSysMan, h3cEponLocalStableTrap=h3cEponLocalStableTrap, h3cOnuP2PHighPriorityFirst=h3cOnuP2PHighPriorityFirst, h3cOnuRS485TXErrOctets=h3cOnuRS485TXErrOctets, h3cEponStatFER=h3cEponStatFER, h3cEponOperationResult=h3cEponOperationResult, h3cOltUsingOnuEntry=h3cOltUsingOnuEntry, h3cEponStpPortState=h3cEponStpPortState, h3cEponMonitorCycleMaxVal=h3cEponMonitorCycleMaxVal, h3cEponMsgTimeOut=h3cEponMsgTimeOut, h3cOnuServiceSupported=h3cOnuServiceSupported, h3cOnuMacIndex=h3cOnuMacIndex, h3cEponOnuRegExcessTrap=h3cEponOnuRegExcessTrap, h3cOnuDownStreamMaxBurstSize=h3cOnuDownStreamMaxBurstSize, h3cOltPortAlarmLlidMismatchThreshold=h3cOltPortAlarmLlidMismatchThreshold, h3cOnuDhcpsnoopingOption82=h3cOnuDhcpsnoopingOption82, h3cOnuManageVID=h3cOnuManageVID, h3cOnuDot1xEntry=h3cOnuDot1xEntry, h3cOnuUpdateByTypeOnuType=h3cOnuUpdateByTypeOnuType, h3cOnuMaxDownstreamQueuePerPort=h3cOnuMaxDownstreamQueuePerPort, h3cOnuDbaReportEntry=h3cOnuDbaReportEntry, h3cOnuSecondPonRegState=h3cOnuSecondPonRegState, h3cOltUsingOnuIfIndex=h3cOltUsingOnuIfIndex, h3cEponOnuStpPortEntry=h3cEponOnuStpPortEntry, h3cOnuRS485SessionAddType=h3cOnuRS485SessionAddType, h3cOnuPriorityQueueBurstsizeMinVal=h3cOnuPriorityQueueBurstsizeMinVal, h3cOltDbaUpdate=h3cOltDbaUpdate, h3cOnuReAuthorize=h3cOnuReAuthorize, h3cOltPortAlarmLlidMismatchEnabled=h3cOltPortAlarmLlidMismatchEnabled, h3cOnuMacAddress=h3cOnuMacAddress, h3cOltPortAlarmLlidMisFrames=h3cOltPortAlarmLlidMisFrames, h3cEponMsgTimeOutMaxVal=h3cEponMsgTimeOutMaxVal, h3cEponMulticastVlanId=h3cEponMulticastVlanId, h3cOnuDownstreamQueueNumber=h3cOnuDownstreamQueueNumber, h3cOnuRS485BaudRate=h3cOnuRS485BaudRate, h3cOnuP2PMaxBurstSize=h3cOnuP2PMaxBurstSize, h3cOltPortAlarmThresholdEntry=h3cOltPortAlarmThresholdEntry, h3cEponLoopbackPortDescr=h3cEponLoopbackPortDescr, h3cEponMibObjects=h3cEponMibObjects, h3cEponSysManEntry=h3cEponSysManEntry, h3cEponBatchOperationByOLT=h3cEponBatchOperationByOLT, h3cEponAutoUpdateSchedTime=h3cEponAutoUpdateSchedTime, h3cEponOamVendorSpecificRecoverTrap=h3cEponOamVendorSpecificRecoverTrap, h3cOltPortAlarmVendorSpecificEnabled=h3cOltPortAlarmVendorSpecificEnabled, h3cOnuSysManTable=h3cOnuSysManTable, h3cOnuSlaMaxBandWidth=h3cOnuSlaMaxBandWidth, h3cOnuUpdate=h3cOnuUpdate, h3cOnuGEPortNumber=h3cOnuGEPortNumber, h3cOltFirmMajorVersion=h3cOltFirmMajorVersion, h3cOnuEEPROMVersion=h3cOnuEEPROMVersion, h3cOnuLinkTestResultRetErrFrameNum=h3cOnuLinkTestResultRetErrFrameNum, h3cOnuMulticastFastLeaveEnable=h3cOnuMulticastFastLeaveEnable, h3cEponDbaUpdateFileName=h3cEponDbaUpdateFileName, h3cOnuCountTable=h3cOnuCountTable, h3cEponOuiIndexNext=h3cEponOuiIndexNext, h3cOltPortAlarmBerMaxVal=h3cOltPortAlarmBerMaxVal, h3cOnuBindMacAddrEntry=h3cOnuBindMacAddrEntry, h3cOltUsingOnuTable=h3cOltUsingOnuTable, h3cOltMacAddress=h3cOltMacAddress, h3cOnuSlaMaxBandWidthMinVal=h3cOnuSlaMaxBandWidthMinVal, h3cEponPortLoopBackAlmEnable=h3cEponPortLoopBackAlmEnable, h3cOnuUpdateByTypeFileName=h3cOnuUpdateByTypeFileName, h3cEponBatchOperationByOLTTable=h3cEponBatchOperationByOLTTable, h3cOnuIpAddressMask=h3cOnuIpAddressMask, h3cEponMulticastControlTable=h3cEponMulticastControlTable, h3cEponAutoUpdateTable=h3cEponAutoUpdateTable, h3cOnuBindMacAddrTable=h3cOnuBindMacAddrTable, h3cOnuUpdateByOnuTypeIndex=h3cOnuUpdateByOnuTypeIndex, h3cOnuRS485SessionNextIndex=h3cOnuRS485SessionNextIndex, h3cEponOnuUpdateResultTrap=h3cEponOnuUpdateResultTrap, h3cEponOnuSilenceTrap=h3cEponOnuSilenceTrap, h3cOnuIpAddressTable=h3cOnuIpAddressTable, h3cEponEncryptionUpdateTime=h3cEponEncryptionUpdateTime, h3cOnuRS485SessionEntry=h3cOnuRS485SessionEntry, h3cOnuFirstPonRegState=h3cOnuFirstPonRegState, h3cEponOnuTypeDescr=h3cEponOnuTypeDescr, h3cOltSelfTest=h3cOltSelfTest, h3cOltLaserOnTimeMaxVal=h3cOltLaserOnTimeMaxVal, h3cOltPortAlarmOamDisconnectionEnabled=h3cOltPortAlarmOamDisconnectionEnabled, h3cOnuBandWidthEntry=h3cOnuBandWidthEntry, h3cOnuPacketManEntry=h3cOnuPacketManEntry, h3cOnuIgmpSnoopingStatus=h3cOnuIgmpSnoopingStatus, h3cEponOnuTypeManTable=h3cEponOnuTypeManTable, h3cOnuDbaReportStatus=h3cOnuDbaReportStatus, h3cOnuSmlkFirstPonRole=h3cOnuSmlkFirstPonRole, h3cOnuPriorityQueueBandwidthMinVal=h3cOnuPriorityQueueBandwidthMinVal, h3cOltDbaCycleLengthMinVal=h3cOltDbaCycleLengthMinVal, h3cOltPortAlarmBerMinVal=h3cOltPortAlarmBerMinVal, h3cOnuSmlkSecondPonRole=h3cOnuSmlkSecondPonRole, h3cEponBatchOperationBySlotType=h3cEponBatchOperationBySlotType, h3cOnuLinkTestTable=h3cOnuLinkTestTable, h3cEponErrorInfo=h3cEponErrorInfo, h3cOnuSlaMinBandWidthMaxVal=h3cOnuSlaMinBandWidthMaxVal, h3cOnuRS485SessionSummaryEntry=h3cOnuRS485SessionSummaryEntry, h3cOnuRS485DataBits=h3cOnuRS485DataBits, h3cOnuProtocolTable=h3cOnuProtocolTable, h3cOnuIpAddressGateway=h3cOnuIpAddressGateway, h3cEponAutomaticMode=h3cEponAutomaticMode, h3cDot3OamNonThresholdRecoverEvent=h3cDot3OamNonThresholdRecoverEvent, h3cOamEventLogLocation=h3cOamEventLogLocation, h3cOnuQueueBandwidthTable=h3cOnuQueueBandwidthTable, h3cOnuSysManEntry=h3cOnuSysManEntry, h3cOltLaserOffTimeMaxVal=h3cOltLaserOffTimeMaxVal, h3cOnuCapabilityEntry=h3cOnuCapabilityEntry, h3cOnuP2PShortFrameFirst=h3cOnuP2PShortFrameFirst, h3cOnuFirmwareUpdateEntry=h3cOnuFirmwareUpdateEntry, h3cEponOamVendorSpecificTrap=h3cEponOamVendorSpecificTrap, h3cOnuDhcpallocate=h3cOnuDhcpallocate, h3cOnuChipSetDesignDate=h3cOnuChipSetDesignDate, h3cEponBatchOperationMan=h3cEponBatchOperationMan, h3cEponAutoUpdateFileName=h3cEponAutoUpdateFileName, h3cEponStatEntry=h3cEponStatEntry, h3cOnuDownStreamMaxBandWidth=h3cOnuDownStreamMaxBandWidth, h3cOnuQueueMaxBandwidth=h3cOnuQueueMaxBandwidth, h3cOnuSilentEntry=h3cOnuSilentEntry, h3cOltDbaCycleLength=h3cOltDbaCycleLength, h3cOnuLinkTestFrameNum=h3cOnuLinkTestFrameNum, h3cOnuPriorityQueueBandwidthMaxVal=h3cOnuPriorityQueueBandwidthMaxVal, h3cEponOamDisconnectionTrap=h3cEponOamDisconnectionTrap, h3cOnuDbaReportThreshold=h3cOnuDbaReportThreshold, h3cEponOnuRegExcessRecoverTrap=h3cEponOnuRegExcessRecoverTrap, h3cEponMulticastAddressList=h3cEponMulticastAddressList, h3cEponOltSoftwareErrAlmEnable=h3cEponOltSoftwareErrAlmEnable, h3cEponOnuRegistrationErrRecoverTrap=h3cEponOnuRegistrationErrRecoverTrap, h3cOnuBindType=h3cOnuBindType, h3cEponEncryptionNoReplyTimeOut=h3cEponEncryptionNoReplyTimeOut, h3cEponOuiIndexNextTable=h3cEponOuiIndexNextTable, h3cOnuInfoEntry=h3cOnuInfoEntry, h3cEponOnuRegSilentMac=h3cEponOnuRegSilentMac, h3cEponStatTable=h3cEponStatTable, h3cEponStpPortIndex=h3cEponStpPortIndex, h3cOnuPortBerStatus=h3cOnuPortBerStatus, h3cOnuLlid=h3cOnuLlid, h3cOltPortAlarmRemoteStableEnabled=h3cOltPortAlarmRemoteStableEnabled, h3cEponOnuPowerOffTrap=h3cEponOnuPowerOffTrap, h3cEponOnuLaserFailedTrap=h3cEponOnuLaserFailedTrap, h3cOltOpticalPowerRx=h3cOltOpticalPowerRx, h3cOnuDot1xTable=h3cOnuDot1xTable, h3cOnuUniMacType=h3cOnuUniMacType, h3cOnuSlaMinBandWidthMinVal=h3cOnuSlaMinBandWidthMinVal, h3cOnuPriorityQueueEntry=h3cOnuPriorityQueueEntry, h3cOnuDbaReportQueueSetNumber=h3cOnuDbaReportQueueSetNumber, h3cOnuIgmpSnoopingAggLeaveS=h3cOnuIgmpSnoopingAggLeaveS, h3cEponMsgTimeOutMinVal=h3cEponMsgTimeOutMinVal, h3cOltDbaCycleLengthMaxVal=h3cOltDbaCycleLengthMaxVal, h3cOnuChipSetInfoTable=h3cOnuChipSetInfoTable, h3cOnuIgspFastLeaveSupported=h3cOnuIgspFastLeaveSupported, h3cOnuSmlkFirstPonStatus=h3cOnuSmlkFirstPonStatus, h3cOnuMacAddrInfoEntry=h3cOnuMacAddrInfoEntry, h3cEponEncryptionKeyErrRecoverTrap=h3cEponEncryptionKeyErrRecoverTrap, h3cOnuSlaFixedPacketSize=h3cOnuSlaFixedPacketSize, h3cEponAutoBindStatus=h3cEponAutoBindStatus, h3cOnuUniUpDownTrapStatus=h3cOnuUniUpDownTrapStatus, h3cOnuMaxUpstreamQueuePerPort=h3cOnuMaxUpstreamQueuePerPort, h3cEponOltDFERecoverTrap=h3cEponOltDFERecoverTrap, h3cOnuSmlkSwitchoverTrap=h3cOnuSmlkSwitchoverTrap, h3cOltAgcLockTime=h3cOltAgcLockTime, h3cOltPortAlarmThresholdTable=h3cOltPortAlarmThresholdTable, h3cOnuRS485SessionErrInfoTable=h3cOnuRS485SessionErrInfoTable, h3cOltInfoEntry=h3cOltInfoEntry, h3cOnuPriorityQueueSizeMinVal=h3cOnuPriorityQueueSizeMinVal, h3cEponOltMan=h3cEponOltMan, h3cOnuFirmwareUpdateByTypeTable=h3cOnuFirmwareUpdateByTypeTable, h3cOltLaserOffTimeMinVal=h3cOltLaserOffTimeMinVal, h3cEponErrorLLIDFrameTrap=h3cEponErrorLLIDFrameTrap, h3cOnuDownStreamShortFrameFirst=h3cOnuDownStreamShortFrameFirst, h3cEponBatchOperationBySlotEntry=h3cEponBatchOperationBySlotEntry, h3cOnuRS485SessionMaxNum=h3cOnuRS485SessionMaxNum, h3cEponRemoteStableRecoverTrap=h3cEponRemoteStableRecoverTrap, h3cOltOpticalPowerTx=h3cOltOpticalPowerTx, h3cEponOuiEntry=h3cEponOuiEntry, h3cOltPortAlarmEncryptionKeyEnabled=h3cOltPortAlarmEncryptionKeyEnabled, h3cEponOnuRegErrorMacAddr=h3cEponOnuRegErrorMacAddr, h3cOnuQueueBandwidthEntry=h3cOnuQueueBandwidthEntry, h3cEponOnuUpdateFileName=h3cEponOnuUpdateFileName, h3cOnuRS485SerialIndex=h3cOnuRS485SerialIndex, h3cEponLoopBackEnableRecoverTrap=h3cEponLoopBackEnableRecoverTrap, h3cOnuBindMacAddress=h3cOnuBindMacAddress, h3cOnuPriorityQueueBurstsizeMaxVal=h3cOnuPriorityQueueBurstsizeMaxVal, h3cOnuP2PBandWidthPolicy=h3cOnuP2PBandWidthPolicy, h3cOnuGrantFifoDep=h3cOnuGrantFifoDep, h3cOnuSlaManTable=h3cOnuSlaManTable, h3cOnuPriorityQueueSizeMaxVal=h3cOnuPriorityQueueSizeMaxVal, h3cOnuLinkTestResultMinDelay=h3cOnuLinkTestResultMinDelay, h3cOnuPppoe=h3cOnuPppoe, h3cOltPortAlarmFerDirect=h3cOltPortAlarmFerDirect, h3cEponSlotIndex=h3cEponSlotIndex, h3cOltDbaDiscoveryLengthMaxVal=h3cOltDbaDiscoveryLengthMaxVal, h3cOnuChipSetVendorId=h3cOnuChipSetVendorId, h3cOltPortAlarmRegistrationEnabled=h3cOltPortAlarmRegistrationEnabled, h3cOnuRS485RXOctets=h3cOnuRS485RXOctets, h3cOltPortAlarmFer=h3cOltPortAlarmFer, h3cEponTrap=h3cEponTrap, h3cOnuPOTSPortNumber=h3cOnuPOTSPortNumber, h3cOnuLinkTestVlanPriority=h3cOnuLinkTestVlanPriority, h3cEponSysManTable=h3cEponSysManTable, h3cOltMaxRtt=h3cOltMaxRtt, h3cOltPortAlarmBerThreshold=h3cOltPortAlarmBerThreshold, h3cEponOuiTable=h3cEponOuiTable, h3cOnuFirmwareVersion=h3cOnuFirmwareVersion, h3cOltSelfTestResult=h3cOltSelfTestResult, h3cOnuIgmpSnoopingMaxRespT=h3cOnuIgmpSnoopingMaxRespT, h3cOnuFirstPonMac=h3cOnuFirstPonMac, h3cEponMsgLoseNum=h3cEponMsgLoseNum, h3cOnuRS485SessionRemoteIP=h3cOnuRS485SessionRemoteIP, h3cEponOnuMan=h3cEponOnuMan, h3cOnuFirmwareUpdateByTypeEntry=h3cOnuFirmwareUpdateByTypeEntry, h3cEponOnuAutoBindTrap=h3cEponOnuAutoBindTrap, h3cEponOnuTypeIndex=h3cEponOnuTypeIndex, h3cOnuFecStatus=h3cOnuFecStatus, h3cOnuSlaManEntry=h3cOnuSlaManEntry, PYSNMP_MODULE_ID=h3cEponMibObjects, h3cOnuSmlkEntry=h3cOnuSmlkEntry, h3cOnuRemoteFecStatus=h3cOnuRemoteFecStatus, h3cOnuMCtrlFastLeaveSupported=h3cOnuMCtrlFastLeaveSupported, h3cOnuSilentTable=h3cOnuSilentTable, h3cOnuUpdateFileName=h3cOnuUpdateFileName, h3cOnuLinkTestEntry=h3cOnuLinkTestEntry, h3cOnuMacAddrInfoTable=h3cOnuMacAddrInfoTable, h3cOnuLinkTestResultMeanDelay=h3cOnuLinkTestResultMeanDelay, h3cEponOnuPortStpStateTrap=h3cEponOnuPortStpStateTrap, h3cEponOuiIndex=h3cEponOuiIndex, h3cOnuCosToLocalPrecedenceEntry=h3cOnuCosToLocalPrecedenceEntry, h3cOltDbaDiscovryFrequencyMaxVal=h3cOltDbaDiscovryFrequencyMaxVal, h3cEponPortAlarmFerTrap=h3cEponPortAlarmFerTrap, h3cOnuOpticalPowerReceivedByOlt=h3cOnuOpticalPowerReceivedByOlt, h3cEponMsgLoseNumMaxVal=h3cEponMsgLoseNumMaxVal, h3cEponBatchOperationBySlotIndex=h3cEponBatchOperationBySlotIndex, h3cOnuRS485PropertiesTable=h3cOnuRS485PropertiesTable, h3cEponStatBER=h3cEponStatBER, h3cOnuEncryptKey=h3cOnuEncryptKey, h3cOnuRS485SessionErrInfo=h3cOnuRS485SessionErrInfo, h3cOltPortAlarmFerMinVal=h3cOltPortAlarmFerMinVal, h3cOnuUpdateByTypeNextIndex=h3cOnuUpdateByTypeNextIndex, h3cEponOamDisconnectionRecoverTrap=h3cEponOamDisconnectionRecoverTrap, h3cEponTrapPrefix=h3cEponTrapPrefix, h3cOnuFirmwareUpdateTable=h3cOnuFirmwareUpdateTable, h3cOnuIgmpSnoopingRouterAgingT=h3cOnuIgmpSnoopingRouterAgingT, h3cOnuLinkTestVlanTagID=h3cOnuLinkTestVlanTagID, h3cOnuRS485SessionErrInfoEntry=h3cOnuRS485SessionErrInfoEntry)
mibBuilder.exportSymbols("H3C-EPON-MIB", h3cEponSoftwareErrRecoverTrap=h3cEponSoftwareErrRecoverTrap, h3cOnuRS485StopBits=h3cOnuRS485StopBits, h3cOnuPCBVersion=h3cOnuPCBVersion, h3cEponPortAlarmBerTrap=h3cEponPortAlarmBerTrap, h3cOnuRtt=h3cOnuRtt, h3cOnuPriorityTrust=h3cOnuPriorityTrust, h3cEponSysScalarGroup=h3cEponSysScalarGroup, h3cOnuProtocolEntry=h3cOnuProtocolEntry, h3cOnuEncryptMan=h3cOnuEncryptMan, h3cOltDbaVersion=h3cOltDbaVersion, h3cOltPortAlarmDFEEnabled=h3cOltPortAlarmDFEEnabled, h3cOnuIpAddress=h3cOnuIpAddress, h3cEponMonitorCycleEnable=h3cEponMonitorCycleEnable, h3cOnuDistance=h3cOnuDistance, h3cOnuIpAddressEntry=h3cOnuIpAddressEntry, h3cOltDbaUpdateResult=h3cOltDbaUpdateResult, h3cOnuRS485SessionRemotePort=h3cOnuRS485SessionRemotePort, h3cOnuQueueSize=h3cOnuQueueSize, h3cOltPortAlarmLocalStableEnabled=h3cOltPortAlarmLocalStableEnabled, h3cOnuSmlkSecondPonStatus=h3cOnuSmlkSecondPonStatus, h3cOltUsingOnuNum=h3cOltUsingOnuNum, h3cOltAgcCdrTime=h3cOltAgcCdrTime, h3cOnuRS485TXOctets=h3cOnuRS485TXOctets, h3cOnuUpdateResult=h3cOnuUpdateResult, h3cOnuDot1xAccount=h3cOnuDot1xAccount, h3cEponSoftwareErrTrap=h3cEponSoftwareErrTrap, h3cOnuRS485SessionTable=h3cOnuRS485SessionTable, h3cOnuBandWidthTable=h3cOnuBandWidthTable, h3cOnuRS485FlowControl=h3cOnuRS485FlowControl, h3cOnuSlaFixedBandWidth=h3cOnuSlaFixedBandWidth, h3cOltPortAlarmLlidMisMaxVal=h3cOltPortAlarmLlidMisMaxVal, h3cOnuInfoTable=h3cOnuInfoTable, h3cOnuRS485RXErrOctets=h3cOnuRS485RXErrOctets, h3cOnuHostType=h3cOnuHostType, h3cOltDbaManEntry=h3cOltDbaManEntry, h3cDot3OamThresholdRecoverEvent=h3cDot3OamThresholdRecoverEvent, h3cOltPortAlarmBerEnabled=h3cOltPortAlarmBerEnabled, h3cOnuVendorId=h3cOnuVendorId, h3cEponStat=h3cEponStat, h3cEponOamVersion=h3cEponOamVersion, h3cEponAutoAuthorize=h3cEponAutoAuthorize, h3cOnuLinkTestFrameNumMaxVal=h3cOnuLinkTestFrameNumMaxVal, h3cOnuManageVlanIntfS=h3cOnuManageVlanIntfS, h3cOltDbaDiscoveryLengthMinVal=h3cOltDbaDiscoveryLengthMinVal, h3cOnuSlaMaxBandWidthMaxVal=h3cOnuSlaMaxBandWidthMaxVal, h3cEponLocalStableRecoverTrap=h3cEponLocalStableRecoverTrap, h3cOnuQueueScheduler=h3cOnuQueueScheduler, h3cOnuQueueDirection=h3cOnuQueueDirection, h3cOnuUpstreamQueueNumber=h3cOnuUpstreamQueueNumber, h3cOltLaserOnTime=h3cOltLaserOnTime, h3cOnuSlaDelay=h3cOnuSlaDelay, h3cEponFileName=h3cEponFileName, h3cOnuSilentMacAddr=h3cOnuSilentMacAddr, h3cOltFirmMinorVersion=h3cOltFirmMinorVersion, h3cEponOltSwitchoverTrap=h3cEponOltSwitchoverTrap, h3cOnuChipSetModel=h3cOnuChipSetModel, h3cOltSysManTable=h3cOltSysManTable, h3cOnuE1PortsNumber=h3cOnuE1PortsNumber, h3cOnuLaserOnTime=h3cOnuLaserOnTime, h3cEponOnuLaserState=h3cEponOnuLaserState, h3cOnuFEPortNumber=h3cOnuFEPortNumber, h3cOnuReset=h3cOnuReset, h3cEponBatchOperationBySlotTable=h3cEponBatchOperationBySlotTable, h3cOnuQueueId=h3cOnuQueueId, h3cEponAutoUpdateEntry=h3cEponAutoUpdateEntry, h3cOnuQueueMaxBurstsize=h3cOnuQueueMaxBurstsize, h3cOltPortAlarmBerDirect=h3cOltPortAlarmBerDirect, h3cOnuPacketManTable=h3cOnuPacketManTable, h3cOnuHardMinorVersion=h3cOnuHardMinorVersion, h3cEponOnuRegistrationErrTrap=h3cEponOnuRegistrationErrTrap, h3cEponOnuTypeManEntry=h3cEponOnuTypeManEntry, h3cOnuStpStatus=h3cOnuStpStatus, h3cOltPortAlarmRegExcessEnabled=h3cOltPortAlarmRegExcessEnabled, h3cOnuIgmpSnoopingHostAgingT=h3cOnuIgmpSnoopingHostAgingT, h3cEponModeSwitch=h3cEponModeSwitch, h3cOnuSmlkTable=h3cOnuSmlkTable, h3cOltSysManEntry=h3cOltSysManEntry, h3cEponErrorLLIDFrameRecoverTrap=h3cEponErrorLLIDFrameRecoverTrap, h3cOltDbaEnabledType=h3cOltDbaEnabledType, h3cEponBatchOperationByOLTEntry=h3cEponBatchOperationByOLTEntry, h3cEponLoopBackEnableTrap=h3cEponLoopBackEnableTrap, h3cEponAutoUpdateSchedType=h3cEponAutoUpdateSchedType, h3cOnuDot1xPassword=h3cOnuDot1xPassword, h3cOnuLinkTestResultRetFrameNum=h3cOnuLinkTestResultRetFrameNum, h3cOltDbaManTable=h3cOltDbaManTable, h3cOnuChipSetInfoEntry=h3cOnuChipSetInfoEntry, h3cOnuBatteryBackup=h3cOnuBatteryBackup, h3cEponEncryptionKeyErrTrap=h3cEponEncryptionKeyErrTrap, h3cOnuLinkTestResultMaxDelay=h3cOnuLinkTestResultMaxDelay, h3cOnuCapabilityTable=h3cOnuCapabilityTable, h3cOltPortAlarmLlidMisMinVal=h3cOltPortAlarmLlidMisMinVal, h3cOnuCosToLocalPrecedenceValue=h3cOnuCosToLocalPrecedenceValue, h3cOnuDownStreamHighPriorityFirst=h3cOnuDownStreamHighPriorityFirst, h3cEponAutoUpdateSchedStatus=h3cEponAutoUpdateSchedStatus, h3cOnuRS485SessionRowStatus=h3cOnuRS485SessionRowStatus, h3cOltPortAlarmBer=h3cOltPortAlarmBer, h3cOltHardMinorVersion=h3cOltHardMinorVersion, h3cOnuPriorityQueueTable=h3cOnuPriorityQueueTable, h3cOnuLinkTestVlanTag=h3cOnuLinkTestVlanTag, h3cOnuLinkTestResultSentFrameNum=h3cOnuLinkTestResultSentFrameNum, h3cOnuDbaReportQueueId=h3cOnuDbaReportQueueId, h3cOnuSecondPonMac=h3cOnuSecondPonMac, h3cEponLoopbackPortIndex=h3cEponLoopbackPortIndex, h3cOnuCosToLocalPrecedenceTable=h3cOnuCosToLocalPrecedenceTable, h3cOnuUpdateByTypeRowStatus=h3cOnuUpdateByTypeRowStatus, h3cOltLaserOffTime=h3cOltLaserOffTime, h3cEponOuiValue=h3cEponOuiValue, h3cEponBatchOperationByOLTType=h3cEponBatchOperationByOLTType, h3cOnuAccessVlan=h3cOnuAccessVlan, h3cOltInfoTable=h3cOltInfoTable, h3cEponMsgLoseNumMinVal=h3cEponMsgLoseNumMinVal, h3cOnuRS485ResetStatistics=h3cOnuRS485ResetStatistics, h3cEponAutoUpdateRealTimeStatus=h3cEponAutoUpdateRealTimeStatus, h3cOnuMcastCtrlHostAgingTime=h3cOnuMcastCtrlHostAgingTime, h3cOnuDownStreamBandWidthPolicy=h3cOnuDownStreamBandWidthPolicy, h3cOltHardMajorVersion=h3cOltHardMajorVersion, h3cEponBatchOperationBySlotResult=h3cEponBatchOperationBySlotResult, h3cOnuSoftwareVersion=h3cOnuSoftwareVersion, h3cOnuSlaMinBandWidth=h3cOnuSlaMinBandWidth, h3cOnuSmlkGroupID=h3cOnuSmlkGroupID, h3cOltWorkMode=h3cOltWorkMode, h3cEponMulticastStatus=h3cEponMulticastStatus, h3cEponOnuScalarGroup=h3cEponOnuScalarGroup, h3cOnuDhcpsnooping=h3cOnuDhcpsnooping, h3cOltDbaDiscovryFrequencyMinVal=h3cOltDbaDiscovryFrequencyMinVal, h3cOnuLinkTestDelay=h3cOnuLinkTestDelay, h3cEponMonitorCycleMinVal=h3cEponMonitorCycleMinVal, h3cEponOnuSilenceRecoverTrap=h3cEponOnuSilenceRecoverTrap, h3cOnuMulticastFilterStatus=h3cOnuMulticastFilterStatus, h3cEponOamDiscoveryTimeout=h3cEponOamDiscoveryTimeout, h3cOnuMulticastControlMode=h3cOnuMulticastControlMode, h3cOnuLinkTestFrameSize=h3cOnuLinkTestFrameSize, h3cOnuRS485SessionSummaryTable=h3cOnuRS485SessionSummaryTable, h3cOamEventLogType=h3cOamEventLogType, h3cEponOuiIndexNextEntry=h3cEponOuiIndexNextEntry, h3cEponMulticastControlEntry=h3cEponMulticastControlEntry, h3cOnuRS485Parity=h3cOnuRS485Parity, h3cOnuRS485SessionType=h3cOnuRS485SessionType, h3cOltEnableDiscardPacket=h3cOltEnableDiscardPacket, h3cOnuPhysicalTable=h3cOnuPhysicalTable, h3cOnuDbaReportTable=h3cOnuDbaReportTable, h3cOnuChipSetRevision=h3cOnuChipSetRevision, h3cOltUsingOnuRowStatus=h3cOltUsingOnuRowStatus, h3cOnuRS485SessionLocalPort=h3cOnuRS485SessionLocalPort, h3cOnuLaserOffTime=h3cOnuLaserOffTime, h3cEponSysHasEPONBoard=h3cEponSysHasEPONBoard, h3cOnuHardMajorVersion=h3cOnuHardMajorVersion, h3cOnuQueuePolicyStatus=h3cOnuQueuePolicyStatus, h3cOltDbaDiscovryFrequency=h3cOltDbaDiscovryFrequency, h3cEponOltDFETrap=h3cEponOltDFETrap, h3cOnuOutDroppedFrames=h3cOnuOutDroppedFrames, h3cOnuSilentTime=h3cOnuSilentTime, h3cEponStpPortDescr=h3cEponStpPortDescr, h3cOnuSlaPriorityClass=h3cOnuSlaPriorityClass, h3cOnuPortIsolateEnable=h3cOnuPortIsolateEnable, h3cOnuRegType=h3cOnuRegType, h3cOnuLinkTestFrameNumMinVal=h3cOnuLinkTestFrameNumMinVal, h3cOnuCosToLocalPrecedenceCosIndex=h3cOnuCosToLocalPrecedenceCosIndex, h3cOnuSlaBandWidthStepVal=h3cOnuSlaBandWidthStepVal, h3cOnuP2PMaxBandWidth=h3cOnuP2PMaxBandWidth, h3cEponSoftwareErrorCode=h3cEponSoftwareErrorCode, h3cOnuInCRCErrPkts=h3cOnuInCRCErrPkts, h3cOnuBridgeMac=h3cOnuBridgeMac, h3cEponBatchOperationBySlot=h3cEponBatchOperationBySlot, h3cOnuIgmpSnoopingAggReportS=h3cOnuIgmpSnoopingAggReportS, h3cOltPortAlarmFerEnabled=h3cOltPortAlarmFerEnabled, h3cOamVendorSpecificAlarmCode=h3cOamVendorSpecificAlarmCode, h3cOnuRS485PropertiesEntry=h3cOnuRS485PropertiesEntry, h3cOltPortAlarmFerThreshold=h3cOltPortAlarmFerThreshold, h3cEponRemoteStableTrap=h3cEponRemoteStableTrap, h3cEponPortAlarmFerRecoverTrap=h3cEponPortAlarmFerRecoverTrap)
