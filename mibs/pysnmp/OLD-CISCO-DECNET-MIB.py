#
# PySNMP MIB module OLD-CISCO-DECNET-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/OLD-CISCO-DECNET-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 20:23:21 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, Integer, OctetString = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "Integer", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
SingleValueConstraint, ConstraintsIntersection, ValueSizeConstraint, ConstraintsUnion, ValueRangeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "SingleValueConstraint", "ConstraintsIntersection", "ValueSizeConstraint", "ConstraintsUnion", "ValueRangeConstraint")
temporary, = mibBuilder.importSymbols("CISCO-SMI", "temporary")
ifIndex, = mibBuilder.importSymbols("IF-MIB", "ifIndex")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
Counter32, TimeTicks, NotificationType, ObjectIdentity, Counter64, iso, ModuleIdentity, Integer32, IpAddress, Bits, MibIdentifier, Gauge32, MibScalar, MibTable, MibTableRow, MibTableColumn, Unsigned32 = mibBuilder.importSymbols("SNMPv2-SMI", "Counter32", "TimeTicks", "NotificationType", "ObjectIdentity", "Counter64", "iso", "ModuleIdentity", "Integer32", "IpAddress", "Bits", "MibIdentifier", "Gauge32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Unsigned32")
DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention")
tmpdecnet = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 3, 1))
dnForward = MibScalar((1, 3, 6, 1, 4, 1, 9, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dnForward.setStatus('mandatory')
dnReceived = MibScalar((1, 3, 6, 1, 4, 1, 9, 3, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dnReceived.setStatus('mandatory')
dnFormaterr = MibScalar((1, 3, 6, 1, 4, 1, 9, 3, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dnFormaterr.setStatus('mandatory')
dnNotgateway = MibScalar((1, 3, 6, 1, 4, 1, 9, 3, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dnNotgateway.setStatus('mandatory')
dnNotimp = MibScalar((1, 3, 6, 1, 4, 1, 9, 3, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dnNotimp.setStatus('mandatory')
dnHellos = MibScalar((1, 3, 6, 1, 4, 1, 9, 3, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dnHellos.setStatus('mandatory')
dnBadhello = MibScalar((1, 3, 6, 1, 4, 1, 9, 3, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dnBadhello.setStatus('mandatory')
dnNotlong = MibScalar((1, 3, 6, 1, 4, 1, 9, 3, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dnNotlong.setStatus('mandatory')
dnDatas = MibScalar((1, 3, 6, 1, 4, 1, 9, 3, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dnDatas.setStatus('mandatory')
dnBigaddr = MibScalar((1, 3, 6, 1, 4, 1, 9, 3, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dnBigaddr.setStatus('mandatory')
dnNoroute = MibScalar((1, 3, 6, 1, 4, 1, 9, 3, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dnNoroute.setStatus('mandatory')
dnNoencap = MibScalar((1, 3, 6, 1, 4, 1, 9, 3, 1, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dnNoencap.setStatus('mandatory')
dnLevel1s = MibScalar((1, 3, 6, 1, 4, 1, 9, 3, 1, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dnLevel1s.setStatus('mandatory')
dnBadlevel1 = MibScalar((1, 3, 6, 1, 4, 1, 9, 3, 1, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dnBadlevel1.setStatus('mandatory')
dnToomanyhops = MibScalar((1, 3, 6, 1, 4, 1, 9, 3, 1, 15), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dnToomanyhops.setStatus('mandatory')
dnHellosent = MibScalar((1, 3, 6, 1, 4, 1, 9, 3, 1, 16), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dnHellosent.setStatus('mandatory')
dnLevel1sent = MibScalar((1, 3, 6, 1, 4, 1, 9, 3, 1, 17), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dnLevel1sent.setStatus('mandatory')
dnNomemory = MibScalar((1, 3, 6, 1, 4, 1, 9, 3, 1, 18), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dnNomemory.setStatus('mandatory')
dnOtherhello = MibScalar((1, 3, 6, 1, 4, 1, 9, 3, 1, 19), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dnOtherhello.setStatus('mandatory')
dnOtherlevel1 = MibScalar((1, 3, 6, 1, 4, 1, 9, 3, 1, 20), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dnOtherlevel1.setStatus('mandatory')
dnLevel2s = MibScalar((1, 3, 6, 1, 4, 1, 9, 3, 1, 21), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dnLevel2s.setStatus('mandatory')
dnLevel2sent = MibScalar((1, 3, 6, 1, 4, 1, 9, 3, 1, 22), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dnLevel2sent.setStatus('mandatory')
dnNovector = MibScalar((1, 3, 6, 1, 4, 1, 9, 3, 1, 23), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dnNovector.setStatus('mandatory')
dnOtherlevel2 = MibScalar((1, 3, 6, 1, 4, 1, 9, 3, 1, 24), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dnOtherlevel2.setStatus('mandatory')
dnNoaccess = MibScalar((1, 3, 6, 1, 4, 1, 9, 3, 1, 25), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dnNoaccess.setStatus('mandatory')
dnAreaTable = MibTable((1, 3, 6, 1, 4, 1, 9, 3, 1, 26), )
if mibBuilder.loadTexts: dnAreaTable.setStatus('mandatory')
dnAreaTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 3, 1, 26, 1), ).setIndexNames((0, "OLD-CISCO-DECNET-MIB", "dnArea"))
if mibBuilder.loadTexts: dnAreaTableEntry.setStatus('mandatory')
dnArea = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 3, 1, 26, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dnArea.setStatus('mandatory')
dnACost = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 3, 1, 26, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dnACost.setStatus('mandatory')
dnAHop = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 3, 1, 26, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dnAHop.setStatus('mandatory')
dnAIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 3, 1, 26, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dnAIfIndex.setStatus('mandatory')
dnANextHop = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 3, 1, 26, 1, 5), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dnANextHop.setStatus('mandatory')
dnAAge = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 3, 1, 26, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dnAAge.setStatus('mandatory')
dnAPrio = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 3, 1, 26, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dnAPrio.setStatus('mandatory')
dnHostTable = MibTable((1, 3, 6, 1, 4, 1, 9, 3, 1, 27), )
if mibBuilder.loadTexts: dnHostTable.setStatus('mandatory')
dnHostTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 3, 1, 27, 1), ).setIndexNames((0, "OLD-CISCO-DECNET-MIB", "dnHIdx1"), (0, "OLD-CISCO-DECNET-MIB", "dnHIdx2"))
if mibBuilder.loadTexts: dnHostTableEntry.setStatus('mandatory')
dnHost = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 3, 1, 27, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dnHost.setStatus('mandatory')
dnHCost = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 3, 1, 27, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dnHCost.setStatus('mandatory')
dnHHop = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 3, 1, 27, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dnHHop.setStatus('mandatory')
dnHIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 3, 1, 27, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dnHIfIndex.setStatus('mandatory')
dnHNextHop = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 3, 1, 27, 1, 5), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dnHNextHop.setStatus('mandatory')
dnHAge = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 3, 1, 27, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dnHAge.setStatus('mandatory')
dnHPrio = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 3, 1, 27, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dnHPrio.setStatus('mandatory')
dnHIdx1 = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 3, 1, 27, 1, 8), Integer32())
if mibBuilder.loadTexts: dnHIdx1.setStatus('mandatory')
dnHIdx2 = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 3, 1, 27, 1, 9), Integer32())
if mibBuilder.loadTexts: dnHIdx2.setStatus('mandatory')
dnIfTable = MibTable((1, 3, 6, 1, 4, 1, 9, 3, 1, 28), )
if mibBuilder.loadTexts: dnIfTable.setStatus('mandatory')
dnIfTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 3, 1, 28, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: dnIfTableEntry.setStatus('mandatory')
dnIfCost = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 3, 1, 28, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dnIfCost.setStatus('mandatory')
mibBuilder.exportSymbols("OLD-CISCO-DECNET-MIB", dnHostTable=dnHostTable, dnNotgateway=dnNotgateway, dnHellos=dnHellos, dnBadlevel1=dnBadlevel1, dnIfCost=dnIfCost, dnHIdx1=dnHIdx1, dnNotimp=dnNotimp, dnAHop=dnAHop, dnAreaTableEntry=dnAreaTableEntry, dnDatas=dnDatas, dnHIdx2=dnHIdx2, dnHost=dnHost, dnNoaccess=dnNoaccess, dnACost=dnACost, dnBadhello=dnBadhello, dnOtherlevel1=dnOtherlevel1, dnLevel1s=dnLevel1s, dnNomemory=dnNomemory, dnAAge=dnAAge, dnForward=dnForward, dnLevel2sent=dnLevel2sent, dnAPrio=dnAPrio, dnBigaddr=dnBigaddr, dnArea=dnArea, dnLevel1sent=dnLevel1sent, dnAreaTable=dnAreaTable, dnToomanyhops=dnToomanyhops, dnReceived=dnReceived, dnOtherhello=dnOtherhello, dnOtherlevel2=dnOtherlevel2, dnHostTableEntry=dnHostTableEntry, dnHNextHop=dnHNextHop, dnLevel2s=dnLevel2s, dnHPrio=dnHPrio, dnFormaterr=dnFormaterr, dnNovector=dnNovector, tmpdecnet=tmpdecnet, dnAIfIndex=dnAIfIndex, dnANextHop=dnANextHop, dnHAge=dnHAge, dnHCost=dnHCost, dnHellosent=dnHellosent, dnNotlong=dnNotlong, dnHIfIndex=dnHIfIndex, dnHHop=dnHHop, dnIfTable=dnIfTable, dnNoencap=dnNoencap, dnNoroute=dnNoroute, dnIfTableEntry=dnIfTableEntry)
