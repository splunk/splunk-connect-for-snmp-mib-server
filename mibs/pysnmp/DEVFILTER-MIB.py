#
# PySNMP MIB module DEVFILTER-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/DEVFILTER-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 18:26:37 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
device, = mibBuilder.importSymbols("ANIROOT-MIB", "device")
OctetString, ObjectIdentifier, Integer = mibBuilder.importSymbols("ASN1", "OctetString", "ObjectIdentifier", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsIntersection, SingleValueConstraint, ValueSizeConstraint, ConstraintsUnion, ValueRangeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsIntersection", "SingleValueConstraint", "ValueSizeConstraint", "ConstraintsUnion", "ValueRangeConstraint")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
Gauge32, MibIdentifier, Counter64, Bits, NotificationType, TimeTicks, Unsigned32, MibScalar, MibTable, MibTableRow, MibTableColumn, Counter32, iso, Integer32, ModuleIdentity, IpAddress, ObjectIdentity = mibBuilder.importSymbols("SNMPv2-SMI", "Gauge32", "MibIdentifier", "Counter64", "Bits", "NotificationType", "TimeTicks", "Unsigned32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Counter32", "iso", "Integer32", "ModuleIdentity", "IpAddress", "ObjectIdentity")
MacAddress, DisplayString, RowStatus, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "MacAddress", "DisplayString", "RowStatus", "TextualConvention")
aniDevFilter = ModuleIdentity((1, 3, 6, 1, 4, 1, 4325, 2, 8))
if mibBuilder.loadTexts: aniDevFilter.setLastUpdated('0105091130Z')
if mibBuilder.loadTexts: aniDevFilter.setOrganization('Aperto Networks')
aniDevFilterTable = MibTable((1, 3, 6, 1, 4, 1, 4325, 2, 8, 1), )
if mibBuilder.loadTexts: aniDevFilterTable.setStatus('current')
aniDevFilterEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4325, 2, 8, 1, 1), ).setIndexNames((0, "DEVFILTER-MIB", "aniDevFilterIfIndex"), (0, "DEVFILTER-MIB", "aniDevFilterIdentifier"))
if mibBuilder.loadTexts: aniDevFilterEntry.setStatus('current')
aniDevFilterIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 4325, 2, 8, 1, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("ethernet", 1), ("wireless-port1", 2), ("wireless-port2", 3), ("wireless-port3", 4), ("wireless-port4", 5), ("wireless-port5", 6), ("wireless-port6", 7))).clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aniDevFilterIfIndex.setStatus('current')
aniDevFilterIdentifier = MibTableColumn((1, 3, 6, 1, 4, 1, 4325, 2, 8, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aniDevFilterIdentifier.setStatus('current')
aniDevFilterName = MibTableColumn((1, 3, 6, 1, 4, 1, 4325, 2, 8, 1, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 31))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aniDevFilterName.setStatus('current')
aniDevFilterPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 4325, 2, 8, 1, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aniDevFilterPriority.setStatus('current')
aniDevFilterActivationState = MibTableColumn((1, 3, 6, 1, 4, 1, 4325, 2, 8, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("inactive", 1), ("active", 2))).clone(2)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aniDevFilterActivationState.setStatus('current')
aniDevFilterPermission = MibTableColumn((1, 3, 6, 1, 4, 1, 4325, 2, 8, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("block", 1), ("pass", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aniDevFilterPermission.setStatus('current')
aniDevFilterIpProtocol = MibTableColumn((1, 3, 6, 1, 4, 1, 4325, 2, 8, 1, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 257))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aniDevFilterIpProtocol.setStatus('current')
aniDevFilterIpSaddr = MibTableColumn((1, 3, 6, 1, 4, 1, 4325, 2, 8, 1, 1, 8), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aniDevFilterIpSaddr.setStatus('current')
aniDevFilterIpSmask = MibTableColumn((1, 3, 6, 1, 4, 1, 4325, 2, 8, 1, 1, 9), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aniDevFilterIpSmask.setStatus('current')
aniDevFilterIpDaddr = MibTableColumn((1, 3, 6, 1, 4, 1, 4325, 2, 8, 1, 1, 10), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aniDevFilterIpDaddr.setStatus('current')
aniDevFilterIpDmask = MibTableColumn((1, 3, 6, 1, 4, 1, 4325, 2, 8, 1, 1, 11), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aniDevFilterIpDmask.setStatus('current')
aniDevFilterIpSourceStart = MibTableColumn((1, 3, 6, 1, 4, 1, 4325, 2, 8, 1, 1, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aniDevFilterIpSourceStart.setStatus('current')
aniDevFilterIpSourceEnd = MibTableColumn((1, 3, 6, 1, 4, 1, 4325, 2, 8, 1, 1, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aniDevFilterIpSourceEnd.setStatus('current')
aniDevFilterIpDestStart = MibTableColumn((1, 3, 6, 1, 4, 1, 4325, 2, 8, 1, 1, 14), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aniDevFilterIpDestStart.setStatus('current')
aniDevFilterIpDestEnd = MibTableColumn((1, 3, 6, 1, 4, 1, 4325, 2, 8, 1, 1, 15), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aniDevFilterIpDestEnd.setStatus('current')
aniDevFilterIpOptions = MibTableColumn((1, 3, 6, 1, 4, 1, 4325, 2, 8, 1, 1, 16), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aniDevFilterIpOptions.setStatus('current')
aniDevFilterIpSecOptions = MibTableColumn((1, 3, 6, 1, 4, 1, 4325, 2, 8, 1, 1, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("top-secret", 1), ("secret", 2), ("confidential", 3), ("unclassified", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aniDevFilterIpSecOptions.setStatus('current')
aniDevFilterIcmpMsgType = MibTableColumn((1, 3, 6, 1, 4, 1, 4325, 2, 8, 1, 1, 18), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aniDevFilterIcmpMsgType.setStatus('current')
aniDevFilterIcmpSubcode = MibTableColumn((1, 3, 6, 1, 4, 1, 4325, 2, 8, 1, 1, 19), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aniDevFilterIcmpSubcode.setStatus('current')
aniDevFilterTcpFlags = MibTableColumn((1, 3, 6, 1, 4, 1, 4325, 2, 8, 1, 1, 20), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aniDevFilterTcpFlags.setStatus('current')
aniDevFilterDestMacMask = MibTableColumn((1, 3, 6, 1, 4, 1, 4325, 2, 8, 1, 1, 21), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 12))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aniDevFilterDestMacMask.setStatus('current')
aniDevFilterSourceMac = MibTableColumn((1, 3, 6, 1, 4, 1, 4325, 2, 8, 1, 1, 22), MacAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aniDevFilterSourceMac.setStatus('current')
aniDevFilterEnetType = MibTableColumn((1, 3, 6, 1, 4, 1, 4325, 2, 8, 1, 1, 23), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aniDevFilterEnetType.setStatus('current')
aniDevFilterLlcDSAP = MibTableColumn((1, 3, 6, 1, 4, 1, 4325, 2, 8, 1, 1, 24), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aniDevFilterLlcDSAP.setStatus('current')
aniDevFilterLlcSSAP = MibTableColumn((1, 3, 6, 1, 4, 1, 4325, 2, 8, 1, 1, 25), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aniDevFilterLlcSSAP.setStatus('current')
aniDevFilterLlcControl = MibTableColumn((1, 3, 6, 1, 4, 1, 4325, 2, 8, 1, 1, 26), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aniDevFilterLlcControl.setStatus('current')
aniDevFilterLocalCode = MibTableColumn((1, 3, 6, 1, 4, 1, 4325, 2, 8, 1, 1, 27), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aniDevFilterLocalCode.setStatus('current')
aniDevFilterRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 4325, 2, 8, 1, 1, 28), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aniDevFilterRowStatus.setStatus('current')
aniDevFilterUserPriorityHi = MibTableColumn((1, 3, 6, 1, 4, 1, 4325, 2, 8, 1, 1, 29), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aniDevFilterUserPriorityHi.setStatus('current')
aniDevFilterUserPriorityLo = MibTableColumn((1, 3, 6, 1, 4, 1, 4325, 2, 8, 1, 1, 30), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aniDevFilterUserPriorityLo.setStatus('current')
aniDevFilterVlanIdStart = MibTableColumn((1, 3, 6, 1, 4, 1, 4325, 2, 8, 1, 1, 31), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4095))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aniDevFilterVlanIdStart.setStatus('current')
aniDevFilterVlanIdEnd = MibTableColumn((1, 3, 6, 1, 4, 1, 4325, 2, 8, 1, 1, 32), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4095))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aniDevFilterVlanIdEnd.setStatus('current')
aniDevFilterIfTable = MibTable((1, 3, 6, 1, 4, 1, 4325, 2, 8, 2), )
if mibBuilder.loadTexts: aniDevFilterIfTable.setStatus('current')
aniDevFilterIfEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4325, 2, 8, 2, 1), ).setIndexNames((0, "DEVFILTER-MIB", "aniDevFilterIfIdentifier"))
if mibBuilder.loadTexts: aniDevFilterIfEntry.setStatus('current')
aniDevFilterIfIdentifier = MibTableColumn((1, 3, 6, 1, 4, 1, 4325, 2, 8, 2, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("ethernet", 1), ("wireless-port1", 2), ("wireless-port2", 3), ("wireless-port3", 4), ("wireless-port4", 5), ("wireless-port5", 6), ("wireless-port6", 7))).clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aniDevFilterIfIdentifier.setStatus('current')
aniDevFilterIfFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 4325, 2, 8, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aniDevFilterIfFlag.setStatus('current')
mibBuilder.exportSymbols("DEVFILTER-MIB", aniDevFilterPermission=aniDevFilterPermission, aniDevFilterPriority=aniDevFilterPriority, aniDevFilterVlanIdStart=aniDevFilterVlanIdStart, aniDevFilter=aniDevFilter, aniDevFilterEnetType=aniDevFilterEnetType, aniDevFilterIpProtocol=aniDevFilterIpProtocol, aniDevFilterIfIdentifier=aniDevFilterIfIdentifier, aniDevFilterSourceMac=aniDevFilterSourceMac, aniDevFilterIcmpSubcode=aniDevFilterIcmpSubcode, aniDevFilterIpDmask=aniDevFilterIpDmask, aniDevFilterIpSmask=aniDevFilterIpSmask, aniDevFilterRowStatus=aniDevFilterRowStatus, aniDevFilterIfEntry=aniDevFilterIfEntry, aniDevFilterIpSourceStart=aniDevFilterIpSourceStart, aniDevFilterIpSourceEnd=aniDevFilterIpSourceEnd, aniDevFilterActivationState=aniDevFilterActivationState, aniDevFilterLocalCode=aniDevFilterLocalCode, aniDevFilterVlanIdEnd=aniDevFilterVlanIdEnd, aniDevFilterIfTable=aniDevFilterIfTable, aniDevFilterIpSecOptions=aniDevFilterIpSecOptions, aniDevFilterEntry=aniDevFilterEntry, aniDevFilterIpSaddr=aniDevFilterIpSaddr, aniDevFilterIcmpMsgType=aniDevFilterIcmpMsgType, aniDevFilterUserPriorityLo=aniDevFilterUserPriorityLo, aniDevFilterLlcSSAP=aniDevFilterLlcSSAP, aniDevFilterLlcControl=aniDevFilterLlcControl, aniDevFilterTable=aniDevFilterTable, PYSNMP_MODULE_ID=aniDevFilter, aniDevFilterDestMacMask=aniDevFilterDestMacMask, aniDevFilterName=aniDevFilterName, aniDevFilterIpDaddr=aniDevFilterIpDaddr, aniDevFilterIdentifier=aniDevFilterIdentifier, aniDevFilterTcpFlags=aniDevFilterTcpFlags, aniDevFilterIpDestStart=aniDevFilterIpDestStart, aniDevFilterUserPriorityHi=aniDevFilterUserPriorityHi, aniDevFilterIfIndex=aniDevFilterIfIndex, aniDevFilterIpOptions=aniDevFilterIpOptions, aniDevFilterIfFlag=aniDevFilterIfFlag, aniDevFilterLlcDSAP=aniDevFilterLlcDSAP, aniDevFilterIpDestEnd=aniDevFilterIpDestEnd)
