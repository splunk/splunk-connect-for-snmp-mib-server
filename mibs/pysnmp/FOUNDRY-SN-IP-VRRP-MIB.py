#
# PySNMP MIB module FOUNDRY-SN-IP-VRRP-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/FOUNDRY-SN-IP-VRRP-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 19:01:38 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, OctetString, Integer = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "OctetString", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsIntersection, ConstraintsUnion, ValueSizeConstraint, SingleValueConstraint, ValueRangeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsIntersection", "ConstraintsUnion", "ValueSizeConstraint", "SingleValueConstraint", "ValueRangeConstraint")
router, = mibBuilder.importSymbols("FOUNDRY-SN-ROOT-MIB", "router")
ifIndex, = mibBuilder.importSymbols("IF-MIB", "ifIndex")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
NotificationType, Counter64, IpAddress, ObjectIdentity, Integer32, Gauge32, TimeTicks, MibIdentifier, ModuleIdentity, Counter32, iso, MibScalar, MibTable, MibTableRow, MibTableColumn, Bits, Unsigned32 = mibBuilder.importSymbols("SNMPv2-SMI", "NotificationType", "Counter64", "IpAddress", "ObjectIdentity", "Integer32", "Gauge32", "TimeTicks", "MibIdentifier", "ModuleIdentity", "Counter32", "iso", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Bits", "Unsigned32")
DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention")
snVrrp = ModuleIdentity((1, 3, 6, 1, 4, 1, 1991, 1, 2, 12))
snVrrp.setRevisions(('2010-06-02 00:00', '2009-09-30 00:00',))
if mibBuilder.loadTexts: snVrrp.setLastUpdated('201006020000Z')
if mibBuilder.loadTexts: snVrrp.setOrganization('Brocade Communications Systems, Inc.')
class MacAddress(TextualConvention, OctetString):
    status = 'current'
    subtypeSpec = OctetString.subtypeSpec + ValueSizeConstraint(6, 6)
    fixedLength = 6

snVrrpGlobal = MibIdentifier((1, 3, 6, 1, 4, 1, 1991, 1, 2, 12, 1))
snVrrpIntf = MibIdentifier((1, 3, 6, 1, 4, 1, 1991, 1, 2, 12, 2))
snVrrpVirRtr = MibIdentifier((1, 3, 6, 1, 4, 1, 1991, 1, 2, 12, 3))
snVrrpIntf2 = MibIdentifier((1, 3, 6, 1, 4, 1, 1991, 1, 2, 12, 4))
snVrrpVirRtr2 = MibIdentifier((1, 3, 6, 1, 4, 1, 1991, 1, 2, 12, 5))
snVrrpGroupOperMode = MibScalar((1, 3, 6, 1, 4, 1, 1991, 1, 2, 12, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snVrrpGroupOperMode.setStatus('current')
snVrrpIfStateChangeTrap = MibScalar((1, 3, 6, 1, 4, 1, 1991, 1, 2, 12, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1))).clone('enabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snVrrpIfStateChangeTrap.setStatus('current')
snVrrpIfMaxNumVridPerIntf = MibScalar((1, 3, 6, 1, 4, 1, 1991, 1, 2, 12, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snVrrpIfMaxNumVridPerIntf.setStatus('current')
snVrrpIfMaxNumVridPerSystem = MibScalar((1, 3, 6, 1, 4, 1, 1991, 1, 2, 12, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snVrrpIfMaxNumVridPerSystem.setStatus('current')
snVrrpClearVrrpStat = MibScalar((1, 3, 6, 1, 4, 1, 1991, 1, 2, 12, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("normal", 0), ("clear", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snVrrpClearVrrpStat.setStatus('current')
snVrrpGroupOperModeVrrpextended = MibScalar((1, 3, 6, 1, 4, 1, 1991, 1, 2, 12, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snVrrpGroupOperModeVrrpextended.setStatus('current')
snVrrpIfTable = MibTable((1, 3, 6, 1, 4, 1, 1991, 1, 2, 12, 2, 1), )
if mibBuilder.loadTexts: snVrrpIfTable.setStatus('deprecated')
snVrrpIfEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1991, 1, 2, 12, 2, 1, 1), ).setIndexNames((0, "FOUNDRY-SN-IP-VRRP-MIB", "snVrrpIfPort"))
if mibBuilder.loadTexts: snVrrpIfEntry.setStatus('deprecated')
snVrrpIfPort = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 2, 12, 2, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snVrrpIfPort.setStatus('deprecated')
snVrrpIfAuthType = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 2, 12, 2, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("noAuth", 0), ("simpleTextPasswd", 1), ("ipAuthHeader", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snVrrpIfAuthType.setStatus('deprecated')
snVrrpIfAuthPassword = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 2, 12, 2, 1, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 8))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snVrrpIfAuthPassword.setStatus('deprecated')
snVrrpIfRxHeaderErrCnts = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 2, 12, 2, 1, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snVrrpIfRxHeaderErrCnts.setStatus('deprecated')
snVrrpIfRxAuthTypeErrCnts = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 2, 12, 2, 1, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snVrrpIfRxAuthTypeErrCnts.setStatus('deprecated')
snVrrpIfRxAuthPwdMismatchErrCnts = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 2, 12, 2, 1, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snVrrpIfRxAuthPwdMismatchErrCnts.setStatus('deprecated')
snVrrpIfRxVridErrCnts = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 2, 12, 2, 1, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snVrrpIfRxVridErrCnts.setStatus('deprecated')
snVrrpIf2Table = MibTable((1, 3, 6, 1, 4, 1, 1991, 1, 2, 12, 4, 1), )
if mibBuilder.loadTexts: snVrrpIf2Table.setStatus('current')
snVrrpIf2Entry = MibTableRow((1, 3, 6, 1, 4, 1, 1991, 1, 2, 12, 4, 1, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: snVrrpIf2Entry.setStatus('current')
snVrrpIf2AuthType = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 2, 12, 4, 1, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("noAuth", 0), ("simpleTextPasswd", 1), ("ipAuthHeader", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snVrrpIf2AuthType.setStatus('current')
snVrrpIf2AuthPassword = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 2, 12, 4, 1, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 8))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snVrrpIf2AuthPassword.setStatus('current')
snVrrpIf2RxHeaderErrCnts = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 2, 12, 4, 1, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snVrrpIf2RxHeaderErrCnts.setStatus('current')
snVrrpIf2RxAuthTypeErrCnts = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 2, 12, 4, 1, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snVrrpIf2RxAuthTypeErrCnts.setStatus('current')
snVrrpIf2RxAuthPwdMismatchErrCnts = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 2, 12, 4, 1, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snVrrpIf2RxAuthPwdMismatchErrCnts.setStatus('current')
snVrrpIf2RxVridErrCnts = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 2, 12, 4, 1, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snVrrpIf2RxVridErrCnts.setStatus('current')
snVrrpVirRtrTable = MibTable((1, 3, 6, 1, 4, 1, 1991, 1, 2, 12, 3, 1), )
if mibBuilder.loadTexts: snVrrpVirRtrTable.setStatus('deprecated')
snVrrpVirRtrEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1991, 1, 2, 12, 3, 1, 1), ).setIndexNames((0, "FOUNDRY-SN-IP-VRRP-MIB", "snVrrpVirRtrPort"), (0, "FOUNDRY-SN-IP-VRRP-MIB", "snVrrpVirRtrId"))
if mibBuilder.loadTexts: snVrrpVirRtrEntry.setStatus('deprecated')
snVrrpVirRtrPort = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 2, 12, 3, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snVrrpVirRtrPort.setStatus('deprecated')
snVrrpVirRtrId = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 2, 12, 3, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: snVrrpVirRtrId.setStatus('deprecated')
snVrrpVirRtrOwnership = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 2, 12, 3, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("incomplete", 0), ("owner", 1), ("backup", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snVrrpVirRtrOwnership.setStatus('deprecated')
snVrrpVirRtrCfgPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 2, 12, 3, 1, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(3, 254)).clone(100)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snVrrpVirRtrCfgPriority.setStatus('deprecated')
snVrrpVirRtrTrackPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 2, 12, 3, 1, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 254))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snVrrpVirRtrTrackPriority.setStatus('deprecated')
snVrrpVirRtrCurrPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 2, 12, 3, 1, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 254))).setMaxAccess("readonly")
if mibBuilder.loadTexts: snVrrpVirRtrCurrPriority.setStatus('deprecated')
snVrrpVirRtrHelloInt = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 2, 12, 3, 1, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 84)).clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snVrrpVirRtrHelloInt.setStatus('deprecated')
snVrrpVirRtrDeadInt = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 2, 12, 3, 1, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 84)).clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snVrrpVirRtrDeadInt.setStatus('deprecated')
snVrrpVirRtrPreemptMode = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 2, 12, 3, 1, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1))).clone('enabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snVrrpVirRtrPreemptMode.setStatus('deprecated')
snVrrpVirRtrState = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 2, 12, 3, 1, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("init", 0), ("master", 1), ("backup", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: snVrrpVirRtrState.setStatus('deprecated')
snVrrpVirRtrActivate = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 2, 12, 3, 1, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snVrrpVirRtrActivate.setStatus('deprecated')
snVrrpVirRtrIpAddrMask = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 2, 12, 3, 1, 1, 12), OctetString().subtype(subtypeSpec=ValueSizeConstraint(64, 64)).setFixedLength(64)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snVrrpVirRtrIpAddrMask.setStatus('deprecated')
snVrrpVirRtrTrackPortMask = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 2, 12, 3, 1, 1, 13), OctetString().subtype(subtypeSpec=ValueSizeConstraint(4, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snVrrpVirRtrTrackPortMask.setStatus('deprecated')
snVrrpVirRtrTrackVifMask = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 2, 12, 3, 1, 1, 14), OctetString().subtype(subtypeSpec=ValueSizeConstraint(4, 512))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snVrrpVirRtrTrackVifMask.setStatus('deprecated')
snVrrpVirRtrRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 2, 12, 3, 1, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("invalid", 1), ("valid", 2), ("delete", 3), ("create", 4), ("modify", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snVrrpVirRtrRowStatus.setStatus('deprecated')
snVrrpVirRtrRxArpPktDropCnts = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 2, 12, 3, 1, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snVrrpVirRtrRxArpPktDropCnts.setStatus('deprecated')
snVrrpVirRtrRxIpPktDropCnts = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 2, 12, 3, 1, 1, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snVrrpVirRtrRxIpPktDropCnts.setStatus('deprecated')
snVrrpVirRtrRxPortMismatchCnts = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 2, 12, 3, 1, 1, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snVrrpVirRtrRxPortMismatchCnts.setStatus('deprecated')
snVrrpVirRtrRxNumOfIpMismatchCnts = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 2, 12, 3, 1, 1, 19), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snVrrpVirRtrRxNumOfIpMismatchCnts.setStatus('deprecated')
snVrrpVirRtrRxIpMismatchCnts = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 2, 12, 3, 1, 1, 20), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snVrrpVirRtrRxIpMismatchCnts.setStatus('deprecated')
snVrrpVirRtrRxHelloIntMismatchCnts = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 2, 12, 3, 1, 1, 21), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snVrrpVirRtrRxHelloIntMismatchCnts.setStatus('deprecated')
snVrrpVirRtrRxPriorityZeroFromMasterCnts = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 2, 12, 3, 1, 1, 22), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snVrrpVirRtrRxPriorityZeroFromMasterCnts.setStatus('deprecated')
snVrrpVirRtrRxHigherPriorityCnts = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 2, 12, 3, 1, 1, 23), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snVrrpVirRtrRxHigherPriorityCnts.setStatus('deprecated')
snVrrpVirRtrTransToMasterStateCnts = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 2, 12, 3, 1, 1, 24), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snVrrpVirRtrTransToMasterStateCnts.setStatus('deprecated')
snVrrpVirRtrTransToBackupStateCnts = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 2, 12, 3, 1, 1, 25), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snVrrpVirRtrTransToBackupStateCnts.setStatus('deprecated')
snVrrpVirRtrCurrDeadInt = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 2, 12, 3, 1, 1, 26), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snVrrpVirRtrCurrDeadInt.setStatus('deprecated')
snVrrpVirRtrTrackPortList = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 2, 12, 3, 1, 1, 27), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snVrrpVirRtrTrackPortList.setStatus('deprecated')
snVrrpVirRtrTrackVifPortList = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 2, 12, 3, 1, 1, 28), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snVrrpVirRtrTrackVifPortList.setStatus('deprecated')
snVrrpVirRtr2Table = MibTable((1, 3, 6, 1, 4, 1, 1991, 1, 2, 12, 5, 1), )
if mibBuilder.loadTexts: snVrrpVirRtr2Table.setStatus('current')
snVrrpVirRtr2Entry = MibTableRow((1, 3, 6, 1, 4, 1, 1991, 1, 2, 12, 5, 1, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "FOUNDRY-SN-IP-VRRP-MIB", "snVrrpVirRtr2Id"))
if mibBuilder.loadTexts: snVrrpVirRtr2Entry.setStatus('current')
snVrrpVirRtr2Id = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 2, 12, 5, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: snVrrpVirRtr2Id.setStatus('current')
snVrrpVirRtr2Ownership = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 2, 12, 5, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("incomplete", 0), ("owner", 1), ("backup", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snVrrpVirRtr2Ownership.setStatus('current')
snVrrpVirRtr2CfgPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 2, 12, 5, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255)).clone(100)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snVrrpVirRtr2CfgPriority.setStatus('current')
snVrrpVirRtr2TrackPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 2, 12, 5, 1, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 254))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snVrrpVirRtr2TrackPriority.setStatus('current')
snVrrpVirRtr2CurrPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 2, 12, 5, 1, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 254))).setMaxAccess("readonly")
if mibBuilder.loadTexts: snVrrpVirRtr2CurrPriority.setStatus('current')
snVrrpVirRtr2HelloInt = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 2, 12, 5, 1, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 84)).clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snVrrpVirRtr2HelloInt.setStatus('current')
snVrrpVirRtr2DeadInt = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 2, 12, 5, 1, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 84)).clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snVrrpVirRtr2DeadInt.setStatus('current')
snVrrpVirRtr2PreemptMode = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 2, 12, 5, 1, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1))).clone('enabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snVrrpVirRtr2PreemptMode.setStatus('current')
snVrrpVirRtr2State = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 2, 12, 5, 1, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("init", 0), ("master", 1), ("backup", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: snVrrpVirRtr2State.setStatus('current')
snVrrpVirRtr2IpAddrMask = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 2, 12, 5, 1, 1, 10), OctetString().subtype(subtypeSpec=ValueSizeConstraint(4, 64))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snVrrpVirRtr2IpAddrMask.setStatus('current')
snVrrpVirRtr2Activate = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 2, 12, 5, 1, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snVrrpVirRtr2Activate.setStatus('current')
snVrrpVirRtr2BackupInt = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 2, 12, 5, 1, 1, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(60, 3600)).clone(60)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snVrrpVirRtr2BackupInt.setStatus('current')
snVrrpVirRtr2RowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 2, 12, 5, 1, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("invalid", 1), ("valid", 2), ("delete", 3), ("create", 4), ("modify", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snVrrpVirRtr2RowStatus.setStatus('current')
snVrrpVirRtr2RxArpPktDropCnts = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 2, 12, 5, 1, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snVrrpVirRtr2RxArpPktDropCnts.setStatus('current')
snVrrpVirRtr2RxIpPktDropCnts = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 2, 12, 5, 1, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snVrrpVirRtr2RxIpPktDropCnts.setStatus('current')
snVrrpVirRtr2RxPortMismatchCnts = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 2, 12, 5, 1, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snVrrpVirRtr2RxPortMismatchCnts.setStatus('current')
snVrrpVirRtr2RxNumOfIpMismatchCnts = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 2, 12, 5, 1, 1, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snVrrpVirRtr2RxNumOfIpMismatchCnts.setStatus('current')
snVrrpVirRtr2RxIpMismatchCnts = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 2, 12, 5, 1, 1, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snVrrpVirRtr2RxIpMismatchCnts.setStatus('current')
snVrrpVirRtr2RxHelloIntMismatchCnts = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 2, 12, 5, 1, 1, 19), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snVrrpVirRtr2RxHelloIntMismatchCnts.setStatus('current')
snVrrpVirRtr2RxPriorityZeroFromMasterCnts = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 2, 12, 5, 1, 1, 20), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snVrrpVirRtr2RxPriorityZeroFromMasterCnts.setStatus('current')
snVrrpVirRtr2RxHigherPriorityCnts = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 2, 12, 5, 1, 1, 21), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snVrrpVirRtr2RxHigherPriorityCnts.setStatus('current')
snVrrpVirRtr2TransToMasterStateCnts = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 2, 12, 5, 1, 1, 22), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snVrrpVirRtr2TransToMasterStateCnts.setStatus('current')
snVrrpVirRtr2TransToBackupStateCnts = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 2, 12, 5, 1, 1, 23), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snVrrpVirRtr2TransToBackupStateCnts.setStatus('current')
snVrrpVirRtr2CurrDeadInt = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 2, 12, 5, 1, 1, 24), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snVrrpVirRtr2CurrDeadInt.setStatus('current')
snVrrpVirRtr2TrackPortList = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 2, 12, 5, 1, 1, 25), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snVrrpVirRtr2TrackPortList.setStatus('current')
snVrrpVirRtr2AdvertiseBackup = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 2, 12, 5, 1, 1, 26), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snVrrpVirRtr2AdvertiseBackup.setStatus('current')
snVrrpVirRtr2MasterIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 2, 12, 5, 1, 1, 27), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snVrrpVirRtr2MasterIpAddr.setStatus('current')
snVrrpVirRtr2IpAddrCount = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 2, 12, 5, 1, 1, 28), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: snVrrpVirRtr2IpAddrCount.setStatus('current')
snVrrpVirRtr2VirtualMacAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 2, 12, 5, 1, 1, 29), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snVrrpVirRtr2VirtualMacAddr.setStatus('current')
mibBuilder.exportSymbols("FOUNDRY-SN-IP-VRRP-MIB", snVrrpVirRtr2RxPortMismatchCnts=snVrrpVirRtr2RxPortMismatchCnts, snVrrpVirRtrDeadInt=snVrrpVirRtrDeadInt, snVrrpVirRtr2Id=snVrrpVirRtr2Id, snVrrpVirRtrRxIpPktDropCnts=snVrrpVirRtrRxIpPktDropCnts, snVrrpVirRtrRxHigherPriorityCnts=snVrrpVirRtrRxHigherPriorityCnts, snVrrpVirRtr2PreemptMode=snVrrpVirRtr2PreemptMode, snVrrpVirRtrCurrDeadInt=snVrrpVirRtrCurrDeadInt, PYSNMP_MODULE_ID=snVrrp, snVrrp=snVrrp, snVrrpVirRtrIpAddrMask=snVrrpVirRtrIpAddrMask, snVrrpVirRtrPreemptMode=snVrrpVirRtrPreemptMode, snVrrpIfRxHeaderErrCnts=snVrrpIfRxHeaderErrCnts, snVrrpVirRtrTrackPortList=snVrrpVirRtrTrackPortList, snVrrpVirRtr2TransToMasterStateCnts=snVrrpVirRtr2TransToMasterStateCnts, snVrrpVirRtrRxIpMismatchCnts=snVrrpVirRtrRxIpMismatchCnts, snVrrpVirRtrRxNumOfIpMismatchCnts=snVrrpVirRtrRxNumOfIpMismatchCnts, snVrrpVirRtrTransToMasterStateCnts=snVrrpVirRtrTransToMasterStateCnts, snVrrpIfMaxNumVridPerSystem=snVrrpIfMaxNumVridPerSystem, snVrrpVirRtrTransToBackupStateCnts=snVrrpVirRtrTransToBackupStateCnts, snVrrpVirRtr2VirtualMacAddr=snVrrpVirRtr2VirtualMacAddr, snVrrpVirRtrRxPortMismatchCnts=snVrrpVirRtrRxPortMismatchCnts, snVrrpVirRtr2RxHigherPriorityCnts=snVrrpVirRtr2RxHigherPriorityCnts, snVrrpIfTable=snVrrpIfTable, snVrrpIf2AuthPassword=snVrrpIf2AuthPassword, snVrrpGroupOperMode=snVrrpGroupOperMode, snVrrpVirRtrRowStatus=snVrrpVirRtrRowStatus, snVrrpVirRtr2RxArpPktDropCnts=snVrrpVirRtr2RxArpPktDropCnts, snVrrpVirRtr=snVrrpVirRtr, snVrrpIf2RxHeaderErrCnts=snVrrpIf2RxHeaderErrCnts, snVrrpVirRtrHelloInt=snVrrpVirRtrHelloInt, snVrrpVirRtr2Entry=snVrrpVirRtr2Entry, snVrrpVirRtrCurrPriority=snVrrpVirRtrCurrPriority, snVrrpVirRtr2RxPriorityZeroFromMasterCnts=snVrrpVirRtr2RxPriorityZeroFromMasterCnts, snVrrpGlobal=snVrrpGlobal, snVrrpVirRtr2RxIpPktDropCnts=snVrrpVirRtr2RxIpPktDropCnts, snVrrpVirRtrState=snVrrpVirRtrState, snVrrpVirRtr2AdvertiseBackup=snVrrpVirRtr2AdvertiseBackup, snVrrpIfMaxNumVridPerIntf=snVrrpIfMaxNumVridPerIntf, snVrrpVirRtr2State=snVrrpVirRtr2State, snVrrpIfRxVridErrCnts=snVrrpIfRxVridErrCnts, snVrrpVirRtr2Ownership=snVrrpVirRtr2Ownership, snVrrpVirRtr2TransToBackupStateCnts=snVrrpVirRtr2TransToBackupStateCnts, snVrrpVirRtr2RowStatus=snVrrpVirRtr2RowStatus, snVrrpIntf2=snVrrpIntf2, snVrrpVirRtr2CurrDeadInt=snVrrpVirRtr2CurrDeadInt, snVrrpIfRxAuthPwdMismatchErrCnts=snVrrpIfRxAuthPwdMismatchErrCnts, snVrrpVirRtr2=snVrrpVirRtr2, snVrrpIfAuthPassword=snVrrpIfAuthPassword, snVrrpVirRtr2IpAddrMask=snVrrpVirRtr2IpAddrMask, snVrrpVirRtr2Activate=snVrrpVirRtr2Activate, snVrrpVirRtrRxPriorityZeroFromMasterCnts=snVrrpVirRtrRxPriorityZeroFromMasterCnts, snVrrpIf2Table=snVrrpIf2Table, snVrrpVirRtr2RxIpMismatchCnts=snVrrpVirRtr2RxIpMismatchCnts, snVrrpVirRtrPort=snVrrpVirRtrPort, snVrrpVirRtrActivate=snVrrpVirRtrActivate, snVrrpVirRtrTrackPriority=snVrrpVirRtrTrackPriority, snVrrpVirRtrCfgPriority=snVrrpVirRtrCfgPriority, snVrrpIfEntry=snVrrpIfEntry, snVrrpVirRtr2CfgPriority=snVrrpVirRtr2CfgPriority, snVrrpVirRtr2RxNumOfIpMismatchCnts=snVrrpVirRtr2RxNumOfIpMismatchCnts, snVrrpIf2AuthType=snVrrpIf2AuthType, snVrrpIfRxAuthTypeErrCnts=snVrrpIfRxAuthTypeErrCnts, snVrrpVirRtr2TrackPriority=snVrrpVirRtr2TrackPriority, snVrrpVirRtrTrackVifMask=snVrrpVirRtrTrackVifMask, snVrrpIntf=snVrrpIntf, snVrrpIf2RxAuthPwdMismatchErrCnts=snVrrpIf2RxAuthPwdMismatchErrCnts, snVrrpVirRtrRxArpPktDropCnts=snVrrpVirRtrRxArpPktDropCnts, snVrrpVirRtrTrackPortMask=snVrrpVirRtrTrackPortMask, snVrrpIf2RxVridErrCnts=snVrrpIf2RxVridErrCnts, snVrrpVirRtr2RxHelloIntMismatchCnts=snVrrpVirRtr2RxHelloIntMismatchCnts, snVrrpIfPort=snVrrpIfPort, snVrrpIf2Entry=snVrrpIf2Entry, snVrrpVirRtrTable=snVrrpVirRtrTable, snVrrpVirRtr2MasterIpAddr=snVrrpVirRtr2MasterIpAddr, snVrrpVirRtr2DeadInt=snVrrpVirRtr2DeadInt, snVrrpVirRtr2BackupInt=snVrrpVirRtr2BackupInt, snVrrpIf2RxAuthTypeErrCnts=snVrrpIf2RxAuthTypeErrCnts, snVrrpVirRtr2HelloInt=snVrrpVirRtr2HelloInt, snVrrpVirRtr2Table=snVrrpVirRtr2Table, MacAddress=MacAddress, snVrrpVirRtrEntry=snVrrpVirRtrEntry, snVrrpVirRtr2CurrPriority=snVrrpVirRtr2CurrPriority, snVrrpVirRtr2TrackPortList=snVrrpVirRtr2TrackPortList, snVrrpVirRtrRxHelloIntMismatchCnts=snVrrpVirRtrRxHelloIntMismatchCnts, snVrrpVirRtrTrackVifPortList=snVrrpVirRtrTrackVifPortList, snVrrpGroupOperModeVrrpextended=snVrrpGroupOperModeVrrpextended, snVrrpVirRtrId=snVrrpVirRtrId, snVrrpIfStateChangeTrap=snVrrpIfStateChangeTrap, snVrrpIfAuthType=snVrrpIfAuthType, snVrrpClearVrrpStat=snVrrpClearVrrpStat, snVrrpVirRtrOwnership=snVrrpVirRtrOwnership, snVrrpVirRtr2IpAddrCount=snVrrpVirRtr2IpAddrCount)
