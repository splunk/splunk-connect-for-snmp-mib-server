#
# PySNMP MIB module CXFileServer-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/CXFileServer-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 18:17:09 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, Integer, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "OctetString", "Integer", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsUnion, ValueRangeConstraint, ValueSizeConstraint, ConstraintsIntersection, SingleValueConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsUnion", "ValueRangeConstraint", "ValueSizeConstraint", "ConstraintsIntersection", "SingleValueConstraint")
cxFileServer, = mibBuilder.importSymbols("CXProduct-SMI", "cxFileServer")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
Counter32, MibScalar, MibTable, MibTableRow, MibTableColumn, TimeTicks, Unsigned32, Integer32, ModuleIdentity, ObjectIdentity, IpAddress, iso, MibIdentifier, Counter64, Gauge32, Bits, NotificationType = mibBuilder.importSymbols("SNMPv2-SMI", "Counter32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "TimeTicks", "Unsigned32", "Integer32", "ModuleIdentity", "ObjectIdentity", "IpAddress", "iso", "MibIdentifier", "Counter64", "Gauge32", "Bits", "NotificationType")
DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention")
cxFsTftpTransfer = MibScalar((1, 3, 6, 1, 4, 1, 495, 2, 1, 5, 3, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cxFsTftpTransfer.setStatus('mandatory')
cxFsTftpTargetSlot = MibScalar((1, 3, 6, 1, 4, 1, 495, 2, 1, 5, 3, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cxFsTftpTargetSlot.setStatus('mandatory')
cxFsTftpRemxt = MibScalar((1, 3, 6, 1, 4, 1, 495, 2, 1, 5, 3, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 600)).clone(5)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cxFsTftpRemxt.setStatus('mandatory')
cxFsIsBusy = MibScalar((1, 3, 6, 1, 4, 1, 495, 2, 1, 5, 3, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cxFsIsBusy.setStatus('mandatory')
cxFsBackGroundCleanup = MibScalar((1, 3, 6, 1, 4, 1, 495, 2, 1, 5, 3, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2))).clone('enabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cxFsBackGroundCleanup.setStatus('mandatory')
cxFsCleanupOnce = MibScalar((1, 3, 6, 1, 4, 1, 495, 2, 1, 5, 3, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2))).clone('no')).setMaxAccess("writeonly")
if mibBuilder.loadTexts: cxFsCleanupOnce.setStatus('mandatory')
cxFsFreeBytes = MibScalar((1, 3, 6, 1, 4, 1, 495, 2, 1, 5, 3, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cxFsFreeBytes.setStatus('mandatory')
cxFsDeleteFile = MibScalar((1, 3, 6, 1, 4, 1, 495, 2, 1, 5, 3, 8), DisplayString()).setMaxAccess("writeonly")
if mibBuilder.loadTexts: cxFsDeleteFile.setStatus('mandatory')
cxFsFileList = MibScalar((1, 3, 6, 1, 4, 1, 495, 2, 1, 5, 3, 9), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cxFsFileList.setStatus('mandatory')
cxFsTransferDestSlot = MibScalar((1, 3, 6, 1, 4, 1, 495, 2, 1, 5, 3, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cxFsTransferDestSlot.setStatus('mandatory')
cxFsTransferFileName = MibScalar((1, 3, 6, 1, 4, 1, 495, 2, 1, 5, 3, 11), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(5, 15))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cxFsTransferFileName.setStatus('mandatory')
cxFsTransferAction = MibScalar((1, 3, 6, 1, 4, 1, 495, 2, 1, 5, 3, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("no-action", 1), ("get", 2), ("put", 3))).clone('no-action')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cxFsTransferAction.setStatus('mandatory')
cxFsTransferStatus = MibScalar((1, 3, 6, 1, 4, 1, 495, 2, 1, 5, 3, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("idle", 1), ("processing", 2), ("succeeded", 3), ("failed", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cxFsTransferStatus.setStatus('mandatory')
cxFsTransferErrorCode = MibScalar((1, 3, 6, 1, 4, 1, 495, 2, 1, 5, 3, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11))).clone(namedValues=NamedValues(("not-applicable", 1), ("ok", 2), ("local-open-error", 3), ("nfs-open-error", 4), ("local-reading-error", 5), ("nfs-reading-error", 6), ("local-writing-error", 7), ("nfs-writing-error", 8), ("local-close-error", 9), ("nfs-close-error", 10), ("other-error", 11)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cxFsTransferErrorCode.setStatus('mandatory')
mibBuilder.exportSymbols("CXFileServer-MIB", cxFsIsBusy=cxFsIsBusy, cxFsTransferAction=cxFsTransferAction, cxFsTransferFileName=cxFsTransferFileName, cxFsCleanupOnce=cxFsCleanupOnce, cxFsFreeBytes=cxFsFreeBytes, cxFsTransferStatus=cxFsTransferStatus, cxFsTftpTargetSlot=cxFsTftpTargetSlot, cxFsTransferErrorCode=cxFsTransferErrorCode, cxFsTransferDestSlot=cxFsTransferDestSlot, cxFsBackGroundCleanup=cxFsBackGroundCleanup, cxFsDeleteFile=cxFsDeleteFile, cxFsFileList=cxFsFileList, cxFsTftpRemxt=cxFsTftpRemxt, cxFsTftpTransfer=cxFsTftpTransfer)
