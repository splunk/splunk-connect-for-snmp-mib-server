#
# PySNMP MIB module CTATX-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/CTATX-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 18:13:28 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, Integer, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "OctetString", "Integer", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsUnion, SingleValueConstraint, ConstraintsIntersection, ValueRangeConstraint, ValueSizeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsUnion", "SingleValueConstraint", "ConstraintsIntersection", "ValueRangeConstraint", "ValueSizeConstraint")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
IpAddress, TimeTicks, Integer32, Counter32, Counter64, Unsigned32, MibIdentifier, MibScalar, MibTable, MibTableRow, MibTableColumn, iso, Gauge32, enterprises, Bits, ModuleIdentity, NotificationType, ObjectIdentity = mibBuilder.importSymbols("SNMPv2-SMI", "IpAddress", "TimeTicks", "Integer32", "Counter32", "Counter64", "Unsigned32", "MibIdentifier", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "iso", "Gauge32", "enterprises", "Bits", "ModuleIdentity", "NotificationType", "ObjectIdentity")
TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString")
class Boolean(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2))
    namedValues = NamedValues(("true", 1), ("false", 2))

sigma = MibIdentifier((1, 3, 6, 1, 4, 1, 97))
sys = MibIdentifier((1, 3, 6, 1, 4, 1, 97, 1))
ecs_1 = MibIdentifier((1, 3, 6, 1, 4, 1, 97, 3)).setLabel("ecs-1")
atext = MibIdentifier((1, 3, 6, 1, 4, 1, 97, 6))
hw = MibIdentifier((1, 3, 6, 1, 4, 1, 97, 3, 1))
sw = MibIdentifier((1, 3, 6, 1, 4, 1, 97, 3, 2))
admin = MibIdentifier((1, 3, 6, 1, 4, 1, 97, 3, 3))
config = MibIdentifier((1, 3, 6, 1, 4, 1, 97, 3, 3, 1))
lma = MibIdentifier((1, 3, 6, 1, 4, 1, 97, 3, 3, 2))
ppe = MibIdentifier((1, 3, 6, 1, 4, 1, 97, 3, 3, 3))
st = MibIdentifier((1, 3, 6, 1, 4, 1, 97, 3, 3, 4))
mesh = MibIdentifier((1, 3, 6, 1, 4, 1, 97, 3, 3, 5))
atextsystem = MibIdentifier((1, 3, 6, 1, 4, 1, 97, 6, 1))
atextport = MibIdentifier((1, 3, 6, 1, 4, 1, 97, 6, 2))
swdis = MibIdentifier((1, 3, 6, 1, 4, 1, 97, 3, 4))
addr = MibIdentifier((1, 3, 6, 1, 4, 1, 97, 3, 5))
snmpsmt = MibIdentifier((1, 3, 6, 1, 4, 1, 97, 3, 6))
sinterfaces = MibIdentifier((1, 3, 6, 1, 4, 1, 97, 3, 7))
sfddi = MibIdentifier((1, 3, 6, 1, 4, 1, 97, 3, 8))
suart = MibIdentifier((1, 3, 6, 1, 4, 1, 97, 3, 9))
filter = MibIdentifier((1, 3, 6, 1, 4, 1, 97, 3, 10))
reboot = MibIdentifier((1, 3, 6, 1, 4, 1, 97, 3, 11))
debug = MibIdentifier((1, 3, 6, 1, 4, 1, 97, 3, 12))
lpbk = MibIdentifier((1, 3, 6, 1, 4, 1, 97, 3, 13))
swan = MibIdentifier((1, 3, 6, 1, 4, 1, 97, 3, 14))
srepeater = MibIdentifier((1, 3, 6, 1, 4, 1, 97, 3, 16))
sproto = MibIdentifier((1, 3, 6, 1, 4, 1, 97, 3, 17))
sipx = MibIdentifier((1, 3, 6, 1, 4, 1, 97, 3, 18))
sipxsfGrp = MibIdentifier((1, 3, 6, 1, 4, 1, 97, 3, 18, 6))
sipxsrGrp = MibIdentifier((1, 3, 6, 1, 4, 1, 97, 3, 18, 7))
srtrdisc = MibIdentifier((1, 3, 6, 1, 4, 1, 97, 3, 19))
sipm = MibIdentifier((1, 3, 6, 1, 4, 1, 97, 3, 20))
sipmroute = MibIdentifier((1, 3, 6, 1, 4, 1, 97, 3, 20, 1))
sipmgroup = MibIdentifier((1, 3, 6, 1, 4, 1, 97, 3, 20, 2))
sipmneighbor = MibIdentifier((1, 3, 6, 1, 4, 1, 97, 3, 20, 3))
sipmstat = MibIdentifier((1, 3, 6, 1, 4, 1, 97, 3, 20, 4))
sipckt = MibIdentifier((1, 3, 6, 1, 4, 1, 97, 3, 21))
ssecure = MibIdentifier((1, 3, 6, 1, 4, 1, 97, 3, 23))
spvc = MibIdentifier((1, 3, 6, 1, 4, 1, 97, 3, 24))
strunk = MibIdentifier((1, 3, 6, 1, 4, 1, 97, 3, 25))
ipMRouteMIB = MibIdentifier((1, 3, 6, 1, 4, 1, 97, 3, 26))
igmpMIB = MibIdentifier((1, 3, 6, 1, 4, 1, 97, 3, 27))
ipMRouteMIBObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 97, 3, 26, 1))
ipMRoute = MibIdentifier((1, 3, 6, 1, 4, 1, 97, 3, 26, 1, 1))
igmpMIBObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 97, 3, 27, 1))
igmp = MibIdentifier((1, 3, 6, 1, 4, 1, 97, 3, 27, 1, 1))
slog = MibIdentifier((1, 3, 6, 1, 4, 1, 97, 3, 28))
strap = MibIdentifier((1, 3, 6, 1, 4, 1, 97, 3, 29))
smirror = MibIdentifier((1, 3, 6, 1, 4, 1, 97, 3, 30))
sworkgroup = MibIdentifier((1, 3, 6, 1, 4, 1, 97, 3, 31))
sping = MibIdentifier((1, 3, 6, 1, 4, 1, 97, 3, 32))
strace = MibIdentifier((1, 3, 6, 1, 4, 1, 97, 3, 33))
srtb = MibIdentifier((1, 3, 6, 1, 4, 1, 97, 3, 34))
nbcache = MibIdentifier((1, 3, 6, 1, 4, 1, 97, 3, 35))
ipMRouteEnable = MibScalar((1, 3, 6, 1, 4, 1, 97, 3, 26, 1, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipMRouteEnable.setStatus('mandatory')
ipMRouteTable = MibTable((1, 3, 6, 1, 4, 1, 97, 3, 26, 1, 1, 2), )
if mibBuilder.loadTexts: ipMRouteTable.setStatus('mandatory')
ipMRouteEntry = MibTableRow((1, 3, 6, 1, 4, 1, 97, 3, 26, 1, 1, 2, 1), ).setIndexNames((0, "CTATX-MIB", "ipMRouteGroup"), (0, "CTATX-MIB", "ipMRouteSource"), (0, "CTATX-MIB", "ipMRouteSourceMask"))
if mibBuilder.loadTexts: ipMRouteEntry.setStatus('mandatory')
ipMRouteGroup = MibTableColumn((1, 3, 6, 1, 4, 1, 97, 3, 26, 1, 1, 2, 1, 1), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipMRouteGroup.setStatus('mandatory')
ipMRouteSource = MibTableColumn((1, 3, 6, 1, 4, 1, 97, 3, 26, 1, 1, 2, 1, 2), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipMRouteSource.setStatus('mandatory')
ipMRouteSourceMask = MibTableColumn((1, 3, 6, 1, 4, 1, 97, 3, 26, 1, 1, 2, 1, 3), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipMRouteSourceMask.setStatus('mandatory')
ipMRouteRpfNeighbor = MibTableColumn((1, 3, 6, 1, 4, 1, 97, 3, 26, 1, 1, 2, 1, 4), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipMRouteRpfNeighbor.setStatus('mandatory')
ipMRouteInIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 97, 3, 26, 1, 1, 2, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipMRouteInIfIndex.setStatus('mandatory')
ipMRouteOutList = MibTableColumn((1, 3, 6, 1, 4, 1, 97, 3, 26, 1, 1, 2, 1, 6), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipMRouteOutList.setStatus('mandatory')
ipMRouteUpTime = MibTableColumn((1, 3, 6, 1, 4, 1, 97, 3, 26, 1, 1, 2, 1, 7), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipMRouteUpTime.setStatus('mandatory')
ipMRouteExpiryTime = MibTableColumn((1, 3, 6, 1, 4, 1, 97, 3, 26, 1, 1, 2, 1, 8), TimeTicks()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipMRouteExpiryTime.setStatus('mandatory')
ipMRoutePkts = MibTableColumn((1, 3, 6, 1, 4, 1, 97, 3, 26, 1, 1, 2, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipMRoutePkts.setStatus('mandatory')
ipMRouteRpfFails = MibTableColumn((1, 3, 6, 1, 4, 1, 97, 3, 26, 1, 1, 2, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipMRouteRpfFails.setStatus('mandatory')
ipMRouteOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 97, 3, 26, 1, 1, 2, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipMRouteOctets.setStatus('mandatory')
ipMRouteNextHopState = MibTableColumn((1, 3, 6, 1, 4, 1, 97, 3, 26, 1, 1, 2, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("pruned", 1), ("forwarding", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipMRouteNextHopState.setStatus('mandatory')
ipMRouteInterfaceTable = MibTable((1, 3, 6, 1, 4, 1, 97, 3, 26, 1, 1, 3), )
if mibBuilder.loadTexts: ipMRouteInterfaceTable.setStatus('mandatory')
ipMRouteInterfaceEntry = MibTableRow((1, 3, 6, 1, 4, 1, 97, 3, 26, 1, 1, 3, 1), ).setIndexNames((0, "CTATX-MIB", "ipMRouteInterfaceIfIndex"))
if mibBuilder.loadTexts: ipMRouteInterfaceEntry.setStatus('mandatory')
ipMRouteInterfaceIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 97, 3, 26, 1, 1, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipMRouteInterfaceIfIndex.setStatus('mandatory')
ipMRouteInterfaceTtl = MibTableColumn((1, 3, 6, 1, 4, 1, 97, 3, 26, 1, 1, 3, 1, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipMRouteInterfaceTtl.setStatus('mandatory')
igmpInterfaceTable = MibTable((1, 3, 6, 1, 4, 1, 97, 3, 27, 1, 1, 1), )
if mibBuilder.loadTexts: igmpInterfaceTable.setStatus('mandatory')
igmpInterfaceEntry = MibTableRow((1, 3, 6, 1, 4, 1, 97, 3, 27, 1, 1, 1, 1), ).setIndexNames((0, "CTATX-MIB", "igmpInterfaceIfIndex"))
if mibBuilder.loadTexts: igmpInterfaceEntry.setStatus('mandatory')
igmpInterfaceIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 97, 3, 27, 1, 1, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: igmpInterfaceIfIndex.setStatus('mandatory')
igmpInterfaceQueryInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 97, 3, 27, 1, 1, 1, 1, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: igmpInterfaceQueryInterval.setStatus('mandatory')
igmpInterfaceStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 97, 3, 27, 1, 1, 1, 1, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: igmpInterfaceStatus.setStatus('mandatory')
igmpCacheTable = MibTable((1, 3, 6, 1, 4, 1, 97, 3, 27, 1, 1, 2), )
if mibBuilder.loadTexts: igmpCacheTable.setStatus('mandatory')
igmpCacheEntry = MibTableRow((1, 3, 6, 1, 4, 1, 97, 3, 27, 1, 1, 2, 1), ).setIndexNames((0, "CTATX-MIB", "igmpCacheAddress"), (0, "CTATX-MIB", "igmpCacheIfIndex"))
if mibBuilder.loadTexts: igmpCacheEntry.setStatus('mandatory')
igmpCacheAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 97, 3, 27, 1, 1, 2, 1, 1), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: igmpCacheAddress.setStatus('mandatory')
igmpCacheIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 97, 3, 27, 1, 1, 2, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: igmpCacheIfIndex.setStatus('mandatory')
igmpCacheSelf = MibTableColumn((1, 3, 6, 1, 4, 1, 97, 3, 27, 1, 1, 2, 1, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: igmpCacheSelf.setStatus('mandatory')
igmpCacheLastReporter = MibTableColumn((1, 3, 6, 1, 4, 1, 97, 3, 27, 1, 1, 2, 1, 4), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: igmpCacheLastReporter.setStatus('mandatory')
igmpCacheUpTime = MibTableColumn((1, 3, 6, 1, 4, 1, 97, 3, 27, 1, 1, 2, 1, 5), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: igmpCacheUpTime.setStatus('mandatory')
igmpCacheExpiryTime = MibTableColumn((1, 3, 6, 1, 4, 1, 97, 3, 27, 1, 1, 2, 1, 6), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: igmpCacheExpiryTime.setStatus('mandatory')
igmpCacheStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 97, 3, 27, 1, 1, 2, 1, 7), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: igmpCacheStatus.setStatus('mandatory')
sysID = MibScalar((1, 3, 6, 1, 4, 1, 97, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 3))).clone(namedValues=NamedValues(("es-1-bridge-router", 1), ("es-1-atx-br-router", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysID.setStatus('mandatory')
sysReset = MibScalar((1, 3, 6, 1, 4, 1, 97, 1, 2), TimeTicks()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysReset.setStatus('mandatory')
sysTrapAck = MibScalar((1, 3, 6, 1, 4, 1, 97, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("traps-need-acks", 1), ("traps-not-acked", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysTrapAck.setStatus('mandatory')
sysTrapTime = MibScalar((1, 3, 6, 1, 4, 1, 97, 1, 4), TimeTicks()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysTrapTime.setStatus('mandatory')
sysTrapRetry = MibScalar((1, 3, 6, 1, 4, 1, 97, 1, 5), TimeTicks()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysTrapRetry.setStatus('mandatory')
sysTrapPort = MibScalar((1, 3, 6, 1, 4, 1, 97, 1, 6), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysTrapPort.setStatus('mandatory')
hwNumber = MibScalar((1, 3, 6, 1, 4, 1, 97, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwNumber.setStatus('mandatory')
hwSlotTable = MibTable((1, 3, 6, 1, 4, 1, 97, 3, 1, 2), )
if mibBuilder.loadTexts: hwSlotTable.setStatus('mandatory')
hwEntry = MibTableRow((1, 3, 6, 1, 4, 1, 97, 3, 1, 2, 1), ).setIndexNames((0, "CTATX-MIB", "hwIndex"))
if mibBuilder.loadTexts: hwEntry.setStatus('mandatory')
hwIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 97, 3, 1, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwIndex.setStatus('mandatory')
hwType = MibTableColumn((1, 3, 6, 1, 4, 1, 97, 3, 1, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12))).clone(namedValues=NamedValues(("vacant", 1), ("unknown", 2), ("packet-processing-engine", 3), ("turbo", 4), ("csma-iom", 5), ("hssi-iom", 6), ("tpr-iom", 7), ("fddi-iom", 8), ("ifddi-iom", 9), ("ttpr-iom", 10), ("eiom8-iom", 11), ("feiom-iom", 12)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwType.setStatus('mandatory')
hwUseMod = MibTableColumn((1, 3, 6, 1, 4, 1, 97, 3, 1, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("reset", 1), ("run-diagnostics", 2), ("run", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwUseMod.setStatus('mandatory')
hwDefType = MibTableColumn((1, 3, 6, 1, 4, 1, 97, 3, 1, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12))).clone(namedValues=NamedValues(("vacant", 1), ("unknown", 2), ("packet-processing-engine", 3), ("turbo", 4), ("csma-iom", 5), ("hssi-iom", 6), ("tpr-iom", 7), ("fddi-iom", 8), ("ifddi-iom", 9), ("ttpr-iom", 10), ("eiom8-iom", 11), ("feiom-iom", 12)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwDefType.setStatus('mandatory')
hwDiagStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 97, 3, 1, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("diag-failed", 1), ("diag-not-present", 2), ("diag-passed", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwDiagStatus.setStatus('mandatory')
hwInuse = MibTableColumn((1, 3, 6, 1, 4, 1, 97, 3, 1, 2, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("true", 1), ("false", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwInuse.setStatus('mandatory')
hwDiagCode = MibTableColumn((1, 3, 6, 1, 4, 1, 97, 3, 1, 2, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwDiagCode.setStatus('mandatory')
hwManufData = MibTableColumn((1, 3, 6, 1, 4, 1, 97, 3, 1, 2, 1, 8), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwManufData.setStatus('mandatory')
hwPortType = MibTableColumn((1, 3, 6, 1, 4, 1, 97, 3, 1, 2, 1, 9), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwPortType.setStatus('mandatory')
hwPortStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 97, 3, 1, 2, 1, 10), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwPortStatus.setStatus('mandatory')
hwUsePort = MibTableColumn((1, 3, 6, 1, 4, 1, 97, 3, 1, 2, 1, 11), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwUsePort.setStatus('mandatory')
hwDefPortType = MibTableColumn((1, 3, 6, 1, 4, 1, 97, 3, 1, 2, 1, 12), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwDefPortType.setStatus('mandatory')
hwAddr1 = MibTableColumn((1, 3, 6, 1, 4, 1, 97, 3, 1, 2, 1, 13), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwAddr1.setStatus('mandatory')
hwAddr2 = MibTableColumn((1, 3, 6, 1, 4, 1, 97, 3, 1, 2, 1, 14), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwAddr2.setStatus('mandatory')
hwAddr3 = MibTableColumn((1, 3, 6, 1, 4, 1, 97, 3, 1, 2, 1, 15), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwAddr3.setStatus('mandatory')
hwAddr4 = MibTableColumn((1, 3, 6, 1, 4, 1, 97, 3, 1, 2, 1, 16), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwAddr4.setStatus('mandatory')
hwTempOK = MibTableColumn((1, 3, 6, 1, 4, 1, 97, 3, 1, 2, 1, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("temperature-normal", 1), ("temperature-too-hot", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwTempOK.setStatus('mandatory')
hwFirstPort = MibTableColumn((1, 3, 6, 1, 4, 1, 97, 3, 1, 2, 1, 18), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwFirstPort.setStatus('mandatory')
hwFatalErr = MibTableColumn((1, 3, 6, 1, 4, 1, 97, 3, 1, 2, 1, 19), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwFatalErr.setStatus('mandatory')
hwRptrPorts = MibTableColumn((1, 3, 6, 1, 4, 1, 97, 3, 1, 2, 1, 20), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwRptrPorts.setStatus('mandatory')
hwPortSubType = MibTableColumn((1, 3, 6, 1, 4, 1, 97, 3, 1, 2, 1, 21), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwPortSubType.setStatus('mandatory')
hwAddr5 = MibTableColumn((1, 3, 6, 1, 4, 1, 97, 3, 1, 2, 1, 22), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwAddr5.setStatus('mandatory')
hwAddr6 = MibTableColumn((1, 3, 6, 1, 4, 1, 97, 3, 1, 2, 1, 23), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwAddr6.setStatus('mandatory')
hwAddr7 = MibTableColumn((1, 3, 6, 1, 4, 1, 97, 3, 1, 2, 1, 24), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwAddr7.setStatus('mandatory')
hwAddr8 = MibTableColumn((1, 3, 6, 1, 4, 1, 97, 3, 1, 2, 1, 25), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwAddr8.setStatus('mandatory')
hwSysBus = MibScalar((1, 3, 6, 1, 4, 1, 97, 3, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("bus-800-mbit", 1), ("bus-1p6-gbit", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwSysBus.setStatus('mandatory')
hwPpeType = MibScalar((1, 3, 6, 1, 4, 1, 97, 3, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("ppe2", 1), ("ppe3", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwPpeType.setStatus('mandatory')
hwSysProcessor = MibScalar((1, 3, 6, 1, 4, 1, 97, 3, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("dual-29000", 1), ("dual-29030", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwSysProcessor.setStatus('mandatory')
swNumber = MibScalar((1, 3, 6, 1, 4, 1, 97, 3, 2, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swNumber.setStatus('mandatory')
swFilesetTable = MibTable((1, 3, 6, 1, 4, 1, 97, 3, 2, 2), )
if mibBuilder.loadTexts: swFilesetTable.setStatus('mandatory')
swFileset = MibTableRow((1, 3, 6, 1, 4, 1, 97, 3, 2, 2, 1), ).setIndexNames((0, "CTATX-MIB", "swIndex"))
if mibBuilder.loadTexts: swFileset.setStatus('mandatory')
swIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 97, 3, 2, 2, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("currently-executing", 1), ("next-boot", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swIndex.setStatus('mandatory')
swDesc = MibTableColumn((1, 3, 6, 1, 4, 1, 97, 3, 2, 2, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swDesc.setStatus('mandatory')
swCount = MibTableColumn((1, 3, 6, 1, 4, 1, 97, 3, 2, 2, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swCount.setStatus('mandatory')
swTypes = MibTableColumn((1, 3, 6, 1, 4, 1, 97, 3, 2, 2, 1, 5), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swTypes.setStatus('mandatory')
swSizes = MibTableColumn((1, 3, 6, 1, 4, 1, 97, 3, 2, 2, 1, 6), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swSizes.setStatus('mandatory')
swStarts = MibTableColumn((1, 3, 6, 1, 4, 1, 97, 3, 2, 2, 1, 7), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swStarts.setStatus('mandatory')
swBases = MibTableColumn((1, 3, 6, 1, 4, 1, 97, 3, 2, 2, 1, 8), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swBases.setStatus('mandatory')
swFlashBank = MibTableColumn((1, 3, 6, 1, 4, 1, 97, 3, 2, 2, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("first-bank", 1), ("second-bank", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swFlashBank.setStatus('mandatory')
configFatalErr = MibScalar((1, 3, 6, 1, 4, 1, 97, 3, 3, 1, 1), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: configFatalErr.setStatus('mandatory')
configAnyPass = MibScalar((1, 3, 6, 1, 4, 1, 97, 3, 3, 1, 2), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: configAnyPass.setStatus('mandatory')
configGetPass = MibScalar((1, 3, 6, 1, 4, 1, 97, 3, 3, 1, 3), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: configGetPass.setStatus('mandatory')
configNMSAddress = MibScalar((1, 3, 6, 1, 4, 1, 97, 3, 3, 1, 4), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: configNMSAddress.setStatus('mandatory')
configFunctions = MibScalar((1, 3, 6, 1, 4, 1, 97, 3, 3, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: configFunctions.setStatus('mandatory')
configPowerAc1 = MibScalar((1, 3, 6, 1, 4, 1, 97, 3, 3, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("ac-good", 1), ("ac-bad", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: configPowerAc1.setStatus('mandatory')
configPowerAc2 = MibScalar((1, 3, 6, 1, 4, 1, 97, 3, 3, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("ac-good", 1), ("ac-bad", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: configPowerAc2.setStatus('mandatory')
configPowerDc1 = MibScalar((1, 3, 6, 1, 4, 1, 97, 3, 3, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("dc-good", 1), ("dc-bad", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: configPowerDc1.setStatus('mandatory')
configPowerDc2 = MibScalar((1, 3, 6, 1, 4, 1, 97, 3, 3, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("dc-good", 1), ("dc-bad", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: configPowerDc2.setStatus('mandatory')
configPowerPresent1 = MibScalar((1, 3, 6, 1, 4, 1, 97, 3, 3, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("supply-present", 1), ("supply-absent", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: configPowerPresent1.setStatus('mandatory')
configPowerPresent2 = MibScalar((1, 3, 6, 1, 4, 1, 97, 3, 3, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("supply-present", 1), ("supply-absent", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: configPowerPresent2.setStatus('mandatory')
configAlarmDynamic = MibScalar((1, 3, 6, 1, 4, 1, 97, 3, 3, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("true", 1), ("false", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: configAlarmDynamic.setStatus('mandatory')
configAlarmAddresses = MibScalar((1, 3, 6, 1, 4, 1, 97, 3, 3, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("true", 1), ("false", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: configAlarmAddresses.setStatus('mandatory')
configStorageFailure = MibScalar((1, 3, 6, 1, 4, 1, 97, 3, 3, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("true", 1), ("false", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: configStorageFailure.setStatus('mandatory')
configAuthenticationFailure = MibScalar((1, 3, 6, 1, 4, 1, 97, 3, 3, 1, 15), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: configAuthenticationFailure.setStatus('mandatory')
configFddiPriority = MibScalar((1, 3, 6, 1, 4, 1, 97, 3, 3, 1, 16), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: configFddiPriority.setStatus('mandatory')
configTprPriority = MibScalar((1, 3, 6, 1, 4, 1, 97, 3, 3, 1, 17), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: configTprPriority.setStatus('mandatory')
configDumpModule = MibScalar((1, 3, 6, 1, 4, 1, 97, 3, 3, 1, 19), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: configDumpModule.setStatus('mandatory')
configDumpStart = MibScalar((1, 3, 6, 1, 4, 1, 97, 3, 3, 1, 20), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: configDumpStart.setStatus('mandatory')
configDumpEnd = MibScalar((1, 3, 6, 1, 4, 1, 97, 3, 3, 1, 21), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: configDumpEnd.setStatus('mandatory')
lmaAllAddr = MibScalar((1, 3, 6, 1, 4, 1, 97, 3, 3, 2, 1), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lmaAllAddr.setStatus('mandatory')
lmaAnyAddr = MibScalar((1, 3, 6, 1, 4, 1, 97, 3, 3, 2, 2), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lmaAnyAddr.setStatus('mandatory')
ppeLrgUxRxCnt = MibScalar((1, 3, 6, 1, 4, 1, 97, 3, 3, 3, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ppeLrgUxRxCnt.setStatus('mandatory')
ppeSmlUxRxCnt = MibScalar((1, 3, 6, 1, 4, 1, 97, 3, 3, 3, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ppeSmlUxRxCnt.setStatus('mandatory')
ppeUxTxCnt = MibScalar((1, 3, 6, 1, 4, 1, 97, 3, 3, 3, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ppeUxTxCnt.setStatus('mandatory')
ppeSmlBuffSize = MibScalar((1, 3, 6, 1, 4, 1, 97, 3, 3, 3, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ppeSmlBuffSize.setStatus('mandatory')
ppeBridgingMemory = MibScalar((1, 3, 6, 1, 4, 1, 97, 3, 3, 3, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ppeBridgingMemory.setStatus('mandatory')
ppeExtendStats = MibScalar((1, 3, 6, 1, 4, 1, 97, 3, 3, 3, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("true", 1), ("false", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ppeExtendStats.setStatus('mandatory')
ppeBAddrLimit = MibScalar((1, 3, 6, 1, 4, 1, 97, 3, 3, 3, 7), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ppeBAddrLimit.setStatus('mandatory')
ppeTxCongests = MibScalar((1, 3, 6, 1, 4, 1, 97, 3, 3, 3, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ppeTxCongests.setStatus('mandatory')
ppeArpEntries = MibScalar((1, 3, 6, 1, 4, 1, 97, 3, 3, 3, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ppeArpEntries.setStatus('mandatory')
ppeArpStatics = MibScalar((1, 3, 6, 1, 4, 1, 97, 3, 3, 3, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ppeArpStatics.setStatus('mandatory')
ppeArpOverflows = MibScalar((1, 3, 6, 1, 4, 1, 97, 3, 3, 3, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ppeArpOverflows.setStatus('mandatory')
ppeIpEntries = MibScalar((1, 3, 6, 1, 4, 1, 97, 3, 3, 3, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ppeIpEntries.setStatus('mandatory')
ppeIpStatics = MibScalar((1, 3, 6, 1, 4, 1, 97, 3, 3, 3, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ppeIpStatics.setStatus('mandatory')
ppeStaticPreference = MibScalar((1, 3, 6, 1, 4, 1, 97, 3, 3, 3, 14), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ppeStaticPreference.setStatus('mandatory')
ppeOspfPreference = MibScalar((1, 3, 6, 1, 4, 1, 97, 3, 3, 3, 15), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ppeOspfPreference.setStatus('mandatory')
ppeRipPreference = MibScalar((1, 3, 6, 1, 4, 1, 97, 3, 3, 3, 16), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ppeRipPreference.setStatus('mandatory')
ppeEgpPreference = MibScalar((1, 3, 6, 1, 4, 1, 97, 3, 3, 3, 17), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ppeEgpPreference.setStatus('mandatory')
ppeCpuUtilization = MibScalar((1, 3, 6, 1, 4, 1, 97, 3, 3, 3, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("low-cpu", 1), ("medium-cpu", 2), ("high-cpu", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ppeCpuUtilization.setStatus('mandatory')
ppeRipRouteDiscards = MibScalar((1, 3, 6, 1, 4, 1, 97, 3, 3, 3, 19), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ppeRipRouteDiscards.setStatus('mandatory')
ppeOspfRouteDiscards = MibScalar((1, 3, 6, 1, 4, 1, 97, 3, 3, 3, 20), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ppeOspfRouteDiscards.setStatus('mandatory')
ppeRouteMemorySize = MibScalar((1, 3, 6, 1, 4, 1, 97, 3, 3, 3, 21), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ppeRouteMemorySize.setStatus('mandatory')
ppeRouteMemoryAvail = MibScalar((1, 3, 6, 1, 4, 1, 97, 3, 3, 3, 22), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ppeRouteMemoryAvail.setStatus('mandatory')
ppeRouteMemoryFailures = MibScalar((1, 3, 6, 1, 4, 1, 97, 3, 3, 3, 23), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ppeRouteMemoryFailures.setStatus('mandatory')
ppePacketMemorySize = MibScalar((1, 3, 6, 1, 4, 1, 97, 3, 3, 3, 24), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ppePacketMemorySize.setStatus('mandatory')
ppePacketMemoryAvail = MibScalar((1, 3, 6, 1, 4, 1, 97, 3, 3, 3, 25), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ppePacketMemoryAvail.setStatus('mandatory')
ppePacketMemoryFailures = MibScalar((1, 3, 6, 1, 4, 1, 97, 3, 3, 3, 26), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ppePacketMemoryFailures.setStatus('mandatory')
ppeOspfPduMemoryFailures = MibScalar((1, 3, 6, 1, 4, 1, 97, 3, 3, 3, 27), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ppeOspfPduMemoryFailures.setStatus('mandatory')
ppeOspfPduMemoryAllocs = MibScalar((1, 3, 6, 1, 4, 1, 97, 3, 3, 3, 28), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ppeOspfPduMemoryAllocs.setStatus('mandatory')
ppeIcmpPduMemoryFailures = MibScalar((1, 3, 6, 1, 4, 1, 97, 3, 3, 3, 29), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ppeIcmpPduMemoryFailures.setStatus('mandatory')
ppeIcmpPduMemoryAllocs = MibScalar((1, 3, 6, 1, 4, 1, 97, 3, 3, 3, 30), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ppeIcmpPduMemoryAllocs.setStatus('mandatory')
ppeRipPduMemoryFailures = MibScalar((1, 3, 6, 1, 4, 1, 97, 3, 3, 3, 31), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ppeRipPduMemoryFailures.setStatus('mandatory')
ppeRipPduMemoryAllocs = MibScalar((1, 3, 6, 1, 4, 1, 97, 3, 3, 3, 32), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ppeRipPduMemoryAllocs.setStatus('mandatory')
ppeBootpPduMemoryFailures = MibScalar((1, 3, 6, 1, 4, 1, 97, 3, 3, 3, 33), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ppeBootpPduMemoryFailures.setStatus('mandatory')
ppeBootpPduMemoryAllocs = MibScalar((1, 3, 6, 1, 4, 1, 97, 3, 3, 3, 34), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ppeBootpPduMemoryAllocs.setStatus('mandatory')
ppeSnmpPduMemoryFailures = MibScalar((1, 3, 6, 1, 4, 1, 97, 3, 3, 3, 35), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ppeSnmpPduMemoryFailures.setStatus('mandatory')
ppeSnmpPduMemoryAllocs = MibScalar((1, 3, 6, 1, 4, 1, 97, 3, 3, 3, 36), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ppeSnmpPduMemoryAllocs.setStatus('mandatory')
ppeTftpPduMemoryFailures = MibScalar((1, 3, 6, 1, 4, 1, 97, 3, 3, 3, 37), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ppeTftpPduMemoryFailures.setStatus('mandatory')
ppeTftpPduMemoryAllocs = MibScalar((1, 3, 6, 1, 4, 1, 97, 3, 3, 3, 38), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ppeTftpPduMemoryAllocs.setStatus('mandatory')
ppeTraceroutePduMemoryFailures = MibScalar((1, 3, 6, 1, 4, 1, 97, 3, 3, 3, 39), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ppeTraceroutePduMemoryFailures.setStatus('mandatory')
ppeTraceroutePduMemoryAllocs = MibScalar((1, 3, 6, 1, 4, 1, 97, 3, 3, 3, 40), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ppeTraceroutePduMemoryAllocs.setStatus('mandatory')
ppeArpPduMemoryFailures = MibScalar((1, 3, 6, 1, 4, 1, 97, 3, 3, 3, 41), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ppeArpPduMemoryFailures.setStatus('mandatory')
ppeArpPduMemoryAllocs = MibScalar((1, 3, 6, 1, 4, 1, 97, 3, 3, 3, 42), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ppeArpPduMemoryAllocs.setStatus('mandatory')
ppeIgmpPduMemoryFailures = MibScalar((1, 3, 6, 1, 4, 1, 97, 3, 3, 3, 43), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ppeIgmpPduMemoryFailures.setStatus('mandatory')
ppeIgmpPduMemoryAllocs = MibScalar((1, 3, 6, 1, 4, 1, 97, 3, 3, 3, 44), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ppeIgmpPduMemoryAllocs.setStatus('mandatory')
ppeAresAsStes = MibScalar((1, 3, 6, 1, 4, 1, 97, 3, 3, 3, 45), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("true", 1), ("false", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ppeAresAsStes.setStatus('mandatory')
ppeRoutePercent = MibScalar((1, 3, 6, 1, 4, 1, 97, 3, 3, 3, 46), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ppeRoutePercent.setStatus('mandatory')
ppeMgtMemorySize = MibScalar((1, 3, 6, 1, 4, 1, 97, 3, 3, 3, 48), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ppeMgtMemorySize.setStatus('mandatory')
ppeMgtMemoryAvail = MibScalar((1, 3, 6, 1, 4, 1, 97, 3, 3, 3, 49), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ppeMgtMemoryAvail.setStatus('mandatory')
ppeMgtMemoryFailures = MibScalar((1, 3, 6, 1, 4, 1, 97, 3, 3, 3, 50), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ppeMgtMemoryFailures.setStatus('mandatory')
stGroupAddr = MibScalar((1, 3, 6, 1, 4, 1, 97, 3, 3, 4, 1), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: stGroupAddr.setStatus('mandatory')
stResAddr = MibScalar((1, 3, 6, 1, 4, 1, 97, 3, 3, 4, 2), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: stResAddr.setStatus('mandatory')
stBridgeId = MibScalar((1, 3, 6, 1, 4, 1, 97, 3, 3, 4, 3), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: stBridgeId.setStatus('mandatory')
stRootMaxAge = MibScalar((1, 3, 6, 1, 4, 1, 97, 3, 3, 4, 4), TimeTicks()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: stRootMaxAge.setStatus('mandatory')
stRootHello = MibScalar((1, 3, 6, 1, 4, 1, 97, 3, 3, 4, 5), TimeTicks()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: stRootHello.setStatus('mandatory')
stRootDelay = MibScalar((1, 3, 6, 1, 4, 1, 97, 3, 3, 4, 6), TimeTicks()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: stRootDelay.setStatus('mandatory')
stRootID = MibScalar((1, 3, 6, 1, 4, 1, 97, 3, 3, 4, 7), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stRootID.setStatus('mandatory')
stRootCost = MibScalar((1, 3, 6, 1, 4, 1, 97, 3, 3, 4, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stRootCost.setStatus('mandatory')
stRootPort = MibScalar((1, 3, 6, 1, 4, 1, 97, 3, 3, 4, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stRootPort.setStatus('mandatory')
stTopChange = MibScalar((1, 3, 6, 1, 4, 1, 97, 3, 3, 4, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("true", 1), ("false", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: stTopChange.setStatus('mandatory')
stActMaxAge = MibScalar((1, 3, 6, 1, 4, 1, 97, 3, 3, 4, 11), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stActMaxAge.setStatus('mandatory')
stActHello = MibScalar((1, 3, 6, 1, 4, 1, 97, 3, 3, 4, 12), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stActHello.setStatus('mandatory')
stActDelay = MibScalar((1, 3, 6, 1, 4, 1, 97, 3, 3, 4, 13), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stActDelay.setStatus('mandatory')
stTopChangeCount = MibScalar((1, 3, 6, 1, 4, 1, 97, 3, 3, 4, 14), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: stTopChangeCount.setStatus('mandatory')
stTopChangeTime = MibScalar((1, 3, 6, 1, 4, 1, 97, 3, 3, 4, 15), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stTopChangeTime.setStatus('mandatory')
stAgeTime = MibScalar((1, 3, 6, 1, 4, 1, 97, 3, 3, 4, 16), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: stAgeTime.setStatus('mandatory')
meshCostPercent = MibScalar((1, 3, 6, 1, 4, 1, 97, 3, 3, 5, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: meshCostPercent.setStatus('mandatory')
meshCost = MibScalar((1, 3, 6, 1, 4, 1, 97, 3, 3, 5, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: meshCost.setStatus('mandatory')
meshCostChange = MibScalar((1, 3, 6, 1, 4, 1, 97, 3, 3, 5, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("true", 1), ("false", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: meshCostChange.setStatus('mandatory')
meshCostChangeCount = MibScalar((1, 3, 6, 1, 4, 1, 97, 3, 3, 5, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: meshCostChangeCount.setStatus('mandatory')
meshCostChangeTime = MibScalar((1, 3, 6, 1, 4, 1, 97, 3, 3, 5, 5), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: meshCostChangeTime.setStatus('mandatory')
meshSubnet = MibScalar((1, 3, 6, 1, 4, 1, 97, 3, 3, 5, 6), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: meshSubnet.setStatus('mandatory')
swdisDesc = MibScalar((1, 3, 6, 1, 4, 1, 97, 3, 4, 1), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swdisDesc.setStatus('mandatory')
swdisAccess = MibScalar((1, 3, 6, 1, 4, 1, 97, 3, 4, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("protected", 1), ("any-software", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swdisAccess.setStatus('mandatory')
swdisWriteStatus = MibScalar((1, 3, 6, 1, 4, 1, 97, 3, 4, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("in-progress", 1), ("success", 2), ("config-error", 3), ("flash-error", 4), ("config-and-flash-errors", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swdisWriteStatus.setStatus('mandatory')
swdisConfigIp = MibScalar((1, 3, 6, 1, 4, 1, 97, 3, 4, 4), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swdisConfigIp.setStatus('mandatory')
swdisConfigRetryTime = MibScalar((1, 3, 6, 1, 4, 1, 97, 3, 4, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swdisConfigRetryTime.setStatus('mandatory')
swdisConfigTotalTimeout = MibScalar((1, 3, 6, 1, 4, 1, 97, 3, 4, 6), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swdisConfigTotalTimeout.setStatus('mandatory')
addrStatics = MibScalar((1, 3, 6, 1, 4, 1, 97, 3, 5, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: addrStatics.setStatus('mandatory')
addrDynamics = MibScalar((1, 3, 6, 1, 4, 1, 97, 3, 5, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: addrDynamics.setStatus('mandatory')
addrDynamicMax = MibScalar((1, 3, 6, 1, 4, 1, 97, 3, 5, 3), Gauge32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: addrDynamicMax.setStatus('mandatory')
addrMeshs = MibScalar((1, 3, 6, 1, 4, 1, 97, 3, 5, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: addrMeshs.setStatus('mandatory')
addrDynamicOverflows = MibScalar((1, 3, 6, 1, 4, 1, 97, 3, 5, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: addrDynamicOverflows.setStatus('mandatory')
addrMeshOverflows = MibScalar((1, 3, 6, 1, 4, 1, 97, 3, 5, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: addrMeshOverflows.setStatus('mandatory')
addrFlags = MibScalar((1, 3, 6, 1, 4, 1, 97, 3, 5, 7), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: addrFlags.setStatus('mandatory')
addrMAC = MibScalar((1, 3, 6, 1, 4, 1, 97, 3, 5, 8), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: addrMAC.setStatus('mandatory')
addrPort = MibScalar((1, 3, 6, 1, 4, 1, 97, 3, 5, 9), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: addrPort.setStatus('mandatory')
addrPortMap = MibScalar((1, 3, 6, 1, 4, 1, 97, 3, 5, 10), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: addrPortMap.setStatus('obsolete')
addrOperation = MibScalar((1, 3, 6, 1, 4, 1, 97, 3, 5, 41), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("read-random", 1), ("read-next", 2), ("zero-stats", 3), ("update", 4), ("delete", 5), ("read-block", 6)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: addrOperation.setStatus('mandatory')
addrIndex = MibScalar((1, 3, 6, 1, 4, 1, 97, 3, 5, 42), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: addrIndex.setStatus('mandatory')
addrNext = MibScalar((1, 3, 6, 1, 4, 1, 97, 3, 5, 44), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: addrNext.setStatus('mandatory')
addrAge = MibScalar((1, 3, 6, 1, 4, 1, 97, 3, 5, 45), TimeTicks()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: addrAge.setStatus('mandatory')
addrRxPkts = MibScalar((1, 3, 6, 1, 4, 1, 97, 3, 5, 46), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: addrRxPkts.setStatus('mandatory')
addrRxChars = MibScalar((1, 3, 6, 1, 4, 1, 97, 3, 5, 47), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: addrRxChars.setStatus('mandatory')
addrRxMultiPkts = MibScalar((1, 3, 6, 1, 4, 1, 97, 3, 5, 48), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: addrRxMultiPkts.setStatus('mandatory')
addrRxFwdPkts = MibScalar((1, 3, 6, 1, 4, 1, 97, 3, 5, 49), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: addrRxFwdPkts.setStatus('mandatory')
addrTxPkts = MibScalar((1, 3, 6, 1, 4, 1, 97, 3, 5, 50), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: addrTxPkts.setStatus('mandatory')
addrTxChars = MibScalar((1, 3, 6, 1, 4, 1, 97, 3, 5, 51), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: addrTxChars.setStatus('mandatory')
addrBlockSize = MibScalar((1, 3, 6, 1, 4, 1, 97, 3, 5, 52), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: addrBlockSize.setStatus('mandatory')
addrBlock = MibScalar((1, 3, 6, 1, 4, 1, 97, 3, 5, 53), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: addrBlock.setStatus('mandatory')
addrAlarmMAC = MibScalar((1, 3, 6, 1, 4, 1, 97, 3, 5, 54), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: addrAlarmMAC.setStatus('mandatory')
addrRptrPort = MibScalar((1, 3, 6, 1, 4, 1, 97, 3, 5, 55), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: addrRptrPort.setStatus('mandatory')
snmpsmtUpstreamReq = MibScalar((1, 3, 6, 1, 4, 1, 97, 3, 6, 1), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snmpsmtUpstreamReq.setStatus('mandatory')
snmpsmtUpstreamRsp = MibScalar((1, 3, 6, 1, 4, 1, 97, 3, 6, 2), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snmpsmtUpstreamRsp.setStatus('mandatory')
snmpsmtUpstreamDescriptor = MibScalar((1, 3, 6, 1, 4, 1, 97, 3, 6, 3), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snmpsmtUpstreamDescriptor.setStatus('mandatory')
snmpsmtUpstreamState = MibScalar((1, 3, 6, 1, 4, 1, 97, 3, 6, 4), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snmpsmtUpstreamState.setStatus('mandatory')
fddismtTable = MibTable((1, 3, 6, 1, 4, 1, 97, 3, 6, 5), )
if mibBuilder.loadTexts: fddismtTable.setStatus('mandatory')
fddismtEntry = MibTableRow((1, 3, 6, 1, 4, 1, 97, 3, 6, 5, 1), ).setIndexNames((0, "CTATX-MIB", "fddismtIndex"))
if mibBuilder.loadTexts: fddismtEntry.setStatus('mandatory')
fddismtIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 97, 3, 6, 5, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fddismtIndex.setStatus('mandatory')
fddismtUpstreamReq = MibTableColumn((1, 3, 6, 1, 4, 1, 97, 3, 6, 5, 1, 2), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fddismtUpstreamReq.setStatus('mandatory')
fddismtUpstreamRsp = MibTableColumn((1, 3, 6, 1, 4, 1, 97, 3, 6, 5, 1, 3), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fddismtUpstreamRsp.setStatus('mandatory')
fddismtUpstreamDescriptor = MibTableColumn((1, 3, 6, 1, 4, 1, 97, 3, 6, 5, 1, 4), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fddismtUpstreamDescriptor.setStatus('mandatory')
fddismtUpstreamState = MibTableColumn((1, 3, 6, 1, 4, 1, 97, 3, 6, 5, 1, 5), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fddismtUpstreamState.setStatus('mandatory')
sifUX = MibScalar((1, 3, 6, 1, 4, 1, 97, 3, 7, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sifUX.setStatus('mandatory')
sifTable = MibTable((1, 3, 6, 1, 4, 1, 97, 3, 7, 2), )
if mibBuilder.loadTexts: sifTable.setStatus('mandatory')
sifEntry = MibTableRow((1, 3, 6, 1, 4, 1, 97, 3, 7, 2, 1), ).setIndexNames((0, "CTATX-MIB", "sifIndex"))
if mibBuilder.loadTexts: sifEntry.setStatus('mandatory')
sifIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 97, 3, 7, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sifIndex.setStatus('mandatory')
sifSmlRxCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 97, 3, 7, 2, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sifSmlRxCnt.setStatus('mandatory')
sifLrgRxCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 97, 3, 7, 2, 1, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sifLrgRxCnt.setStatus('mandatory')
sifUxTxCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 97, 3, 7, 2, 1, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sifUxTxCnt.setStatus('mandatory')
sifThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 97, 3, 7, 2, 1, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sifThreshold.setStatus('mandatory')
sifThresholdTime = MibTableColumn((1, 3, 6, 1, 4, 1, 97, 3, 7, 2, 1, 6), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sifThresholdTime.setStatus('mandatory')
sifRxQueueThresh = MibTableColumn((1, 3, 6, 1, 4, 1, 97, 3, 7, 2, 1, 7), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sifRxQueueThresh.setStatus('mandatory')
sifRxQueueThreshTime = MibTableColumn((1, 3, 6, 1, 4, 1, 97, 3, 7, 2, 1, 8), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sifRxQueueThreshTime.setStatus('mandatory')
sifTxStormCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 97, 3, 7, 2, 1, 9), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sifTxStormCnt.setStatus('mandatory')
sifTxStormTime = MibTableColumn((1, 3, 6, 1, 4, 1, 97, 3, 7, 2, 1, 10), TimeTicks()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sifTxStormTime.setStatus('mandatory')
sifFilterFlags = MibTableColumn((1, 3, 6, 1, 4, 1, 97, 3, 7, 2, 1, 11), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sifFilterFlags.setStatus('mandatory')
sifCongestTime = MibTableColumn((1, 3, 6, 1, 4, 1, 97, 3, 7, 2, 1, 12), TimeTicks()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sifCongestTime.setStatus('mandatory')
sifQueueTime = MibTableColumn((1, 3, 6, 1, 4, 1, 97, 3, 7, 2, 1, 13), TimeTicks()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sifQueueTime.setStatus('mandatory')
sifPortCost = MibTableColumn((1, 3, 6, 1, 4, 1, 97, 3, 7, 2, 1, 14), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sifPortCost.setStatus('mandatory')
sifStPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 97, 3, 7, 2, 1, 15), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sifStPriority.setStatus('mandatory')
sifFunctions = MibTableColumn((1, 3, 6, 1, 4, 1, 97, 3, 7, 2, 1, 16), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sifFunctions.setStatus('mandatory')
sifCongested = MibTableColumn((1, 3, 6, 1, 4, 1, 97, 3, 7, 2, 1, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("true", 1), ("false", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sifCongested.setStatus('mandatory')
sifState = MibTableColumn((1, 3, 6, 1, 4, 1, 97, 3, 7, 2, 1, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("spanning-tree-disabled", 1), ("spanning-tree-listening", 2), ("spanning-tree-learning", 3), ("spanning-tree-forwarding", 4), ("spanning-tree-blocking", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sifState.setStatus('mandatory')
sifDesigCost = MibTableColumn((1, 3, 6, 1, 4, 1, 97, 3, 7, 2, 1, 19), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sifDesigCost.setStatus('mandatory')
sifDesigRoot = MibTableColumn((1, 3, 6, 1, 4, 1, 97, 3, 7, 2, 1, 20), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sifDesigRoot.setStatus('mandatory')
sifDesigBridge = MibTableColumn((1, 3, 6, 1, 4, 1, 97, 3, 7, 2, 1, 21), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sifDesigBridge.setStatus('mandatory')
sifDesigPort = MibTableColumn((1, 3, 6, 1, 4, 1, 97, 3, 7, 2, 1, 22), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sifDesigPort.setStatus('mandatory')
sifRxPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 97, 3, 7, 2, 1, 23), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sifRxPackets.setStatus('mandatory')
sifRxChar0s = MibTableColumn((1, 3, 6, 1, 4, 1, 97, 3, 7, 2, 1, 24), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sifRxChar0s.setStatus('mandatory')
sifRxChar1s = MibTableColumn((1, 3, 6, 1, 4, 1, 97, 3, 7, 2, 1, 25), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sifRxChar1s.setStatus('mandatory')
sifRxSizeErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 97, 3, 7, 2, 1, 26), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sifRxSizeErrors.setStatus('mandatory')
sifRxHwFCSs = MibTableColumn((1, 3, 6, 1, 4, 1, 97, 3, 7, 2, 1, 27), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sifRxHwFCSs.setStatus('mandatory')
sifRxQueues = MibTableColumn((1, 3, 6, 1, 4, 1, 97, 3, 7, 2, 1, 28), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sifRxQueues.setStatus('mandatory')
sifTxPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 97, 3, 7, 2, 1, 30), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sifTxPackets.setStatus('mandatory')
sifTxCongests = MibTableColumn((1, 3, 6, 1, 4, 1, 97, 3, 7, 2, 1, 31), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sifTxCongests.setStatus('obsolete')
sifTxStorms = MibTableColumn((1, 3, 6, 1, 4, 1, 97, 3, 7, 2, 1, 32), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sifTxStorms.setStatus('mandatory')
sifTxDests = MibTableColumn((1, 3, 6, 1, 4, 1, 97, 3, 7, 2, 1, 33), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sifTxDests.setStatus('mandatory')
sifErrorsFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 97, 3, 7, 2, 1, 34), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("true", 1), ("false", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sifErrorsFlag.setStatus('mandatory')
sifTxStormFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 97, 3, 7, 2, 1, 35), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("true", 1), ("false", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sifTxStormFlag.setStatus('mandatory')
sifTxSizes = MibTableColumn((1, 3, 6, 1, 4, 1, 97, 3, 7, 2, 1, 36), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sifTxSizes.setStatus('mandatory')
sifTxAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 97, 3, 7, 2, 1, 37), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sifTxAddr.setStatus('mandatory')
sifLan = MibTableColumn((1, 3, 6, 1, 4, 1, 97, 3, 7, 2, 1, 38), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sifLan.setStatus('mandatory')
sifStatisticsTime = MibTableColumn((1, 3, 6, 1, 4, 1, 97, 3, 7, 2, 1, 39), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sifStatisticsTime.setStatus('mandatory')
sifIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 97, 3, 7, 2, 1, 40), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sifIpAddress.setStatus('mandatory')
sifIpGroupAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 97, 3, 7, 2, 1, 41), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sifIpGroupAddress.setStatus('mandatory')
sifMaxPacketSize = MibTableColumn((1, 3, 6, 1, 4, 1, 97, 3, 7, 2, 1, 42), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sifMaxPacketSize.setStatus('mandatory')
sifExpectSqe = MibTableColumn((1, 3, 6, 1, 4, 1, 97, 3, 7, 2, 1, 43), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("true", 1), ("false", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sifExpectSqe.setStatus('mandatory')
sifFilterLocal = MibTableColumn((1, 3, 6, 1, 4, 1, 97, 3, 7, 2, 1, 44), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("true", 1), ("false", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sifFilterLocal.setStatus('mandatory')
sifInQLen = MibTableColumn((1, 3, 6, 1, 4, 1, 97, 3, 7, 2, 1, 45), Gauge32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sifInQLen.setStatus('mandatory')
sifFrameSwitching = MibTableColumn((1, 3, 6, 1, 4, 1, 97, 3, 7, 2, 1, 46), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sifFrameSwitching.setStatus('mandatory')
sifRingDrops = MibTableColumn((1, 3, 6, 1, 4, 1, 97, 3, 7, 2, 1, 47), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sifRingDrops.setStatus('mandatory')
sifAdapterChecks = MibTableColumn((1, 3, 6, 1, 4, 1, 97, 3, 7, 2, 1, 48), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sifAdapterChecks.setStatus('mandatory')
sifIpRipPortMetric = MibTableColumn((1, 3, 6, 1, 4, 1, 97, 3, 7, 2, 1, 49), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sifIpRipPortMetric.setStatus('mandatory')
sifDescr = MibTableColumn((1, 3, 6, 1, 4, 1, 97, 3, 7, 2, 1, 50), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sifDescr.setStatus('mandatory')
sifUtilInterval = MibScalar((1, 3, 6, 1, 4, 1, 97, 3, 7, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sifUtilInterval.setStatus('mandatory')
sifUtilCount = MibScalar((1, 3, 6, 1, 4, 1, 97, 3, 7, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sifUtilCount.setStatus('mandatory')
sifUtilPortPeakReset = MibScalar((1, 3, 6, 1, 4, 1, 97, 3, 7, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("true", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sifUtilPortPeakReset.setStatus('mandatory')
sifUtilPortPeakTable = MibTable((1, 3, 6, 1, 4, 1, 97, 3, 7, 6), )
if mibBuilder.loadTexts: sifUtilPortPeakTable.setStatus('mandatory')
sifUtilPortPeakEntry = MibTableRow((1, 3, 6, 1, 4, 1, 97, 3, 7, 6, 1), ).setIndexNames((0, "CTATX-MIB", "sifUtilPortPeakIndex"), (0, "CTATX-MIB", "sifUtilPortPeakOrdinal"))
if mibBuilder.loadTexts: sifUtilPortPeakEntry.setStatus('mandatory')
sifUtilPortPeakIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 97, 3, 7, 6, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sifUtilPortPeakIndex.setStatus('mandatory')
sifUtilPortPeakOrdinal = MibTableColumn((1, 3, 6, 1, 4, 1, 97, 3, 7, 6, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sifUtilPortPeakOrdinal.setStatus('mandatory')
sifUtilPortPeakBRTimestamp = MibTableColumn((1, 3, 6, 1, 4, 1, 97, 3, 7, 6, 1, 3), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sifUtilPortPeakBRTimestamp.setStatus('mandatory')
sifUtilPortPeakTBitRate = MibTableColumn((1, 3, 6, 1, 4, 1, 97, 3, 7, 6, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 99))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sifUtilPortPeakTBitRate.setStatus('mandatory')
sifUtilPortPeakRBitRate = MibTableColumn((1, 3, 6, 1, 4, 1, 97, 3, 7, 6, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 99))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sifUtilPortPeakRBitRate.setStatus('mandatory')
sifUtilSysPeakReset = MibScalar((1, 3, 6, 1, 4, 1, 97, 3, 7, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("true", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sifUtilSysPeakReset.setStatus('mandatory')
sifUtilSysPeakTable = MibTable((1, 3, 6, 1, 4, 1, 97, 3, 7, 8), )
if mibBuilder.loadTexts: sifUtilSysPeakTable.setStatus('mandatory')
sifUtilSysPeakEntry = MibTableRow((1, 3, 6, 1, 4, 1, 97, 3, 7, 8, 1), ).setIndexNames((0, "CTATX-MIB", "sifUtilSysPeakIndex"), (0, "CTATX-MIB", "sifUtilSysPeakOrdinal"))
if mibBuilder.loadTexts: sifUtilSysPeakEntry.setStatus('mandatory')
sifUtilSysPeakIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 97, 3, 7, 8, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sifUtilSysPeakIndex.setStatus('mandatory')
sifUtilSysPeakOrdinal = MibTableColumn((1, 3, 6, 1, 4, 1, 97, 3, 7, 8, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sifUtilSysPeakOrdinal.setStatus('mandatory')
sifUtilSysPeakTimestamp = MibTableColumn((1, 3, 6, 1, 4, 1, 97, 3, 7, 8, 1, 3), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sifUtilSysPeakTimestamp.setStatus('mandatory')
sifUtilSysPeakTBitRate = MibTableColumn((1, 3, 6, 1, 4, 1, 97, 3, 7, 8, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 99))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sifUtilSysPeakTBitRate.setStatus('mandatory')
sifUtilSysPeakRBitRate = MibTableColumn((1, 3, 6, 1, 4, 1, 97, 3, 7, 8, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 99))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sifUtilSysPeakRBitRate.setStatus('mandatory')
sfddiTable = MibTable((1, 3, 6, 1, 4, 1, 97, 3, 8, 1), )
if mibBuilder.loadTexts: sfddiTable.setStatus('mandatory')
sfddiEntry = MibTableRow((1, 3, 6, 1, 4, 1, 97, 3, 8, 1, 1), ).setIndexNames((0, "CTATX-MIB", "sfddiIndex"))
if mibBuilder.loadTexts: sfddiEntry.setStatus('mandatory')
sfddiIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 97, 3, 8, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfddiIndex.setStatus('mandatory')
sfddiRxHwAborts = MibTableColumn((1, 3, 6, 1, 4, 1, 97, 3, 8, 1, 1, 2), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sfddiRxHwAborts.setStatus('mandatory')
sfddiRxParitys = MibTableColumn((1, 3, 6, 1, 4, 1, 97, 3, 8, 1, 1, 3), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sfddiRxParitys.setStatus('mandatory')
sfddiRxShorts = MibTableColumn((1, 3, 6, 1, 4, 1, 97, 3, 8, 1, 1, 4), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sfddiRxShorts.setStatus('mandatory')
sfddiDpcErrCnts = MibTableColumn((1, 3, 6, 1, 4, 1, 97, 3, 8, 1, 1, 5), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sfddiDpcErrCnts.setStatus('mandatory')
sfddiDpcErrValue = MibTableColumn((1, 3, 6, 1, 4, 1, 97, 3, 8, 1, 1, 6), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sfddiDpcErrValue.setStatus('mandatory')
sfddiRbcErrCnts = MibTableColumn((1, 3, 6, 1, 4, 1, 97, 3, 8, 1, 1, 7), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sfddiRbcErrCnts.setStatus('mandatory')
sfddiRbcErrValue = MibTableColumn((1, 3, 6, 1, 4, 1, 97, 3, 8, 1, 1, 8), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sfddiRbcErrValue.setStatus('mandatory')
sfddiTxAsync = MibTableColumn((1, 3, 6, 1, 4, 1, 97, 3, 8, 1, 1, 9), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sfddiTxAsync.setStatus('mandatory')
sfddiShortAddressing = MibTableColumn((1, 3, 6, 1, 4, 1, 97, 3, 8, 1, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("true", 1), ("false", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfddiShortAddressing.setStatus('mandatory')
sfddiSmtConditions = MibTableColumn((1, 3, 6, 1, 4, 1, 97, 3, 8, 1, 1, 11), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sfddiSmtConditions.setStatus('mandatory')
sfddiSrfConditions = MibTableColumn((1, 3, 6, 1, 4, 1, 97, 3, 8, 1, 1, 12), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sfddiSrfConditions.setStatus('mandatory')
sfddiSmtConditionsStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 97, 3, 8, 1, 1, 13), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sfddiSmtConditionsStatus.setStatus('mandatory')
sfddiSrfConditionsStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 97, 3, 8, 1, 1, 14), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sfddiSrfConditionsStatus.setStatus('mandatory')
sfddiSrfReportLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 97, 3, 8, 1, 1, 15), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sfddiSrfReportLimit.setStatus('mandatory')
sfddiFrameErrorThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 97, 3, 8, 1, 1, 16), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sfddiFrameErrorThreshold.setStatus('mandatory')
sfddiNotCopiedThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 97, 3, 8, 1, 1, 17), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sfddiNotCopiedThreshold.setStatus('mandatory')
sfddiSBFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 97, 3, 8, 1, 1, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("true", 1), ("false", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfddiSBFlag.setStatus('mandatory')
sfddiRxEbits = MibTableColumn((1, 3, 6, 1, 4, 1, 97, 3, 8, 1, 1, 19), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfddiRxEbits.setStatus('mandatory')
sfddiOBSFuseBad = MibTableColumn((1, 3, 6, 1, 4, 1, 97, 3, 8, 1, 1, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("true", 1), ("false", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfddiOBSFuseBad.setStatus('mandatory')
sfddiThruB = MibTableColumn((1, 3, 6, 1, 4, 1, 97, 3, 8, 1, 1, 21), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("true", 1), ("false", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sfddiThruB.setStatus('mandatory')
sfddiStationDescriptor = MibTableColumn((1, 3, 6, 1, 4, 1, 97, 3, 8, 1, 1, 22), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfddiStationDescriptor.setStatus('mandatory')
sfddiStationState = MibTableColumn((1, 3, 6, 1, 4, 1, 97, 3, 8, 1, 1, 23), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfddiStationState.setStatus('mandatory')
sfddiDownstreamNbr = MibTableColumn((1, 3, 6, 1, 4, 1, 97, 3, 8, 1, 1, 24), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfddiDownstreamNbr.setStatus('mandatory')
sfddiSMTBufferSize = MibTableColumn((1, 3, 6, 1, 4, 1, 97, 3, 8, 1, 1, 25), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sfddiSMTBufferSize.setStatus('mandatory')
suartTable = MibTable((1, 3, 6, 1, 4, 1, 97, 3, 9, 1), )
if mibBuilder.loadTexts: suartTable.setStatus('mandatory')
suartEntry = MibTableRow((1, 3, 6, 1, 4, 1, 97, 3, 9, 1, 1), ).setIndexNames((0, "CTATX-MIB", "suartIndex"))
if mibBuilder.loadTexts: suartEntry.setStatus('mandatory')
suartIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 97, 3, 9, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: suartIndex.setStatus('mandatory')
suartBaud = MibTableColumn((1, 3, 6, 1, 4, 1, 97, 3, 9, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11))).clone(namedValues=NamedValues(("external-clock", 1), ("b1200-baud", 2), ("b2400-baud", 3), ("b4800-baud", 4), ("b9600-baud", 5), ("b19200-baud", 6), ("b38400-baud", 7), ("b56-kilobits", 8), ("b1544-kilobits", 9), ("b2048-kilobits", 10), ("b45-megabits", 11)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: suartBaud.setStatus('mandatory')
suartModem = MibTableColumn((1, 3, 6, 1, 4, 1, 97, 3, 9, 1, 1, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: suartModem.setStatus('mandatory')
suartIpNeighborAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 97, 3, 9, 1, 1, 4), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: suartIpNeighborAddress.setStatus('mandatory')
suartPPPActive = MibTableColumn((1, 3, 6, 1, 4, 1, 97, 3, 9, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("true", 1), ("false", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: suartPPPActive.setStatus('mandatory')
suartAlignmentErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 97, 3, 9, 1, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: suartAlignmentErrors.setStatus('mandatory')
suartOverrunErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 97, 3, 9, 1, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: suartOverrunErrors.setStatus('mandatory')
filterMaxCount = MibScalar((1, 3, 6, 1, 4, 1, 97, 3, 10, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: filterMaxCount.setStatus('mandatory')
filterCurrentCount = MibScalar((1, 3, 6, 1, 4, 1, 97, 3, 10, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: filterCurrentCount.setStatus('mandatory')
filterDeleteID = MibScalar((1, 3, 6, 1, 4, 1, 97, 3, 10, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: filterDeleteID.setStatus('mandatory')
filterNextID = MibScalar((1, 3, 6, 1, 4, 1, 97, 3, 10, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: filterNextID.setStatus('mandatory')
filterAddID = MibScalar((1, 3, 6, 1, 4, 1, 97, 3, 10, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: filterAddID.setStatus('mandatory')
filterAddIndex = MibScalar((1, 3, 6, 1, 4, 1, 97, 3, 10, 6), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: filterAddIndex.setStatus('mandatory')
filterTable = MibTable((1, 3, 6, 1, 4, 1, 97, 3, 10, 7), )
if mibBuilder.loadTexts: filterTable.setStatus('mandatory')
filterEntry = MibTableRow((1, 3, 6, 1, 4, 1, 97, 3, 10, 7, 1), ).setIndexNames((0, "CTATX-MIB", "filterIndex"))
if mibBuilder.loadTexts: filterEntry.setStatus('mandatory')
filterIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 97, 3, 10, 7, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: filterIndex.setStatus('mandatory')
filterID = MibTableColumn((1, 3, 6, 1, 4, 1, 97, 3, 10, 7, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: filterID.setStatus('mandatory')
filterPortNo = MibTableColumn((1, 3, 6, 1, 4, 1, 97, 3, 10, 7, 1, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: filterPortNo.setStatus('mandatory')
filterComboType = MibTableColumn((1, 3, 6, 1, 4, 1, 97, 3, 10, 7, 1, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: filterComboType.setStatus('mandatory')
filterFlags = MibTableColumn((1, 3, 6, 1, 4, 1, 97, 3, 10, 7, 1, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: filterFlags.setStatus('mandatory')
filterFrame = MibTableColumn((1, 3, 6, 1, 4, 1, 97, 3, 10, 7, 1, 6), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: filterFrame.setStatus('mandatory')
filterSource = MibTableColumn((1, 3, 6, 1, 4, 1, 97, 3, 10, 7, 1, 7), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: filterSource.setStatus('mandatory')
filterSourceEnd = MibTableColumn((1, 3, 6, 1, 4, 1, 97, 3, 10, 7, 1, 8), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: filterSourceEnd.setStatus('mandatory')
filterDest = MibTableColumn((1, 3, 6, 1, 4, 1, 97, 3, 10, 7, 1, 9), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: filterDest.setStatus('mandatory')
filterDestEnd = MibTableColumn((1, 3, 6, 1, 4, 1, 97, 3, 10, 7, 1, 10), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: filterDestEnd.setStatus('mandatory')
filterSourceMask = MibTableColumn((1, 3, 6, 1, 4, 1, 97, 3, 10, 7, 1, 11), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: filterSourceMask.setStatus('mandatory')
filterDestMask = MibTableColumn((1, 3, 6, 1, 4, 1, 97, 3, 10, 7, 1, 12), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: filterDestMask.setStatus('mandatory')
filterSrcLan = MibTableColumn((1, 3, 6, 1, 4, 1, 97, 3, 10, 7, 1, 13), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: filterSrcLan.setStatus('mandatory')
filterOffset = MibTableColumn((1, 3, 6, 1, 4, 1, 97, 3, 10, 7, 1, 14), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: filterOffset.setStatus('mandatory')
filterField = MibTableColumn((1, 3, 6, 1, 4, 1, 97, 3, 10, 7, 1, 15), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: filterField.setStatus('mandatory')
filterMask = MibTableColumn((1, 3, 6, 1, 4, 1, 97, 3, 10, 7, 1, 16), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: filterMask.setStatus('mandatory')
filterThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 97, 3, 10, 7, 1, 17), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: filterThreshold.setStatus('mandatory')
filterThreshTime = MibTableColumn((1, 3, 6, 1, 4, 1, 97, 3, 10, 7, 1, 18), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: filterThreshTime.setStatus('mandatory')
filterThreshFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 97, 3, 10, 7, 1, 19), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("true", 1), ("false", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: filterThreshFlag.setStatus('mandatory')
filterPktCnts = MibTableColumn((1, 3, 6, 1, 4, 1, 97, 3, 10, 7, 1, 20), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: filterPktCnts.setStatus('mandatory')
filterLastSrc = MibTableColumn((1, 3, 6, 1, 4, 1, 97, 3, 10, 7, 1, 21), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: filterLastSrc.setStatus('mandatory')
rebootBridgingMemory = MibScalar((1, 3, 6, 1, 4, 1, 97, 3, 11, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rebootBridgingMemory.setStatus('mandatory')
rebootSlotTable = MibTable((1, 3, 6, 1, 4, 1, 97, 3, 11, 2), )
if mibBuilder.loadTexts: rebootSlotTable.setStatus('mandatory')
rebootEntry = MibTableRow((1, 3, 6, 1, 4, 1, 97, 3, 11, 2, 1), ).setIndexNames((0, "CTATX-MIB", "rebootIndex"))
if mibBuilder.loadTexts: rebootEntry.setStatus('mandatory')
rebootIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 97, 3, 11, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rebootIndex.setStatus('mandatory')
rebootType = MibTableColumn((1, 3, 6, 1, 4, 1, 97, 3, 11, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12))).clone(namedValues=NamedValues(("vacant", 1), ("unknown", 2), ("packet-processing-engine", 3), ("turbo", 4), ("csma-iom", 5), ("hssi-iom", 6), ("tpr-iom", 7), ("fddi-iom", 8), ("ifddi-iom", 9), ("ttpr-iom", 10), ("eiom8-iom", 11), ("feiom-iom", 12)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rebootType.setStatus('mandatory')
rebootUseMod = MibTableColumn((1, 3, 6, 1, 4, 1, 97, 3, 11, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 3))).clone(namedValues=NamedValues(("reset", 1), ("run", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rebootUseMod.setStatus('mandatory')
rebootPortType = MibTableColumn((1, 3, 6, 1, 4, 1, 97, 3, 11, 2, 1, 4), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rebootPortType.setStatus('mandatory')
rebootConfig = MibScalar((1, 3, 6, 1, 4, 1, 97, 3, 11, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("no-change", 1), ("tftp-config", 2), ("revert-to-defaults", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rebootConfig.setStatus('mandatory')
rebootRouteMemory = MibScalar((1, 3, 6, 1, 4, 1, 97, 3, 11, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rebootRouteMemory.setStatus('mandatory')
debugStringID = MibScalar((1, 3, 6, 1, 4, 1, 97, 3, 12, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: debugStringID.setStatus('mandatory')
debugString = MibScalar((1, 3, 6, 1, 4, 1, 97, 3, 12, 2), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: debugString.setStatus('mandatory')
debugTable = MibTable((1, 3, 6, 1, 4, 1, 97, 3, 12, 3), )
if mibBuilder.loadTexts: debugTable.setStatus('mandatory')
debugEntry = MibTableRow((1, 3, 6, 1, 4, 1, 97, 3, 12, 3, 1), ).setIndexNames((0, "CTATX-MIB", "debugIndex"))
if mibBuilder.loadTexts: debugEntry.setStatus('mandatory')
debugIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 97, 3, 12, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: debugIndex.setStatus('mandatory')
debugOperation = MibTableColumn((1, 3, 6, 1, 4, 1, 97, 3, 12, 3, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("examine", 1), ("modify", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: debugOperation.setStatus('mandatory')
debugBase = MibTableColumn((1, 3, 6, 1, 4, 1, 97, 3, 12, 3, 1, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: debugBase.setStatus('mandatory')
debugLength = MibTableColumn((1, 3, 6, 1, 4, 1, 97, 3, 12, 3, 1, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: debugLength.setStatus('mandatory')
debugData = MibTableColumn((1, 3, 6, 1, 4, 1, 97, 3, 12, 3, 1, 5), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: debugData.setStatus('mandatory')
lpbkTable = MibTable((1, 3, 6, 1, 4, 1, 97, 3, 13, 1), )
if mibBuilder.loadTexts: lpbkTable.setStatus('mandatory')
lpbkEntry = MibTableRow((1, 3, 6, 1, 4, 1, 97, 3, 13, 1, 1), ).setIndexNames((0, "CTATX-MIB", "lpbkIndex"))
if mibBuilder.loadTexts: lpbkEntry.setStatus('mandatory')
lpbkIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 97, 3, 13, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpbkIndex.setStatus('mandatory')
lpbkOperation = MibTableColumn((1, 3, 6, 1, 4, 1, 97, 3, 13, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("loopback-off", 1), ("loopback-local", 2), ("loopback-remote", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lpbkOperation.setStatus('mandatory')
lpbkDestAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 97, 3, 13, 1, 1, 3), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lpbkDestAddr.setStatus('mandatory')
lpbkPktNum = MibTableColumn((1, 3, 6, 1, 4, 1, 97, 3, 13, 1, 1, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lpbkPktNum.setStatus('mandatory')
lpbkInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 97, 3, 13, 1, 1, 5), TimeTicks()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lpbkInterval.setStatus('mandatory')
lpbkPktLength = MibTableColumn((1, 3, 6, 1, 4, 1, 97, 3, 13, 1, 1, 6), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lpbkPktLength.setStatus('mandatory')
lpbkIncrements = MibTableColumn((1, 3, 6, 1, 4, 1, 97, 3, 13, 1, 1, 7), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lpbkIncrements.setStatus('mandatory')
lpbkGoods = MibTableColumn((1, 3, 6, 1, 4, 1, 97, 3, 13, 1, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpbkGoods.setStatus('mandatory')
lpbkErrorNoReceives = MibTableColumn((1, 3, 6, 1, 4, 1, 97, 3, 13, 1, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpbkErrorNoReceives.setStatus('mandatory')
lpbkErrorBadReceives = MibTableColumn((1, 3, 6, 1, 4, 1, 97, 3, 13, 1, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpbkErrorBadReceives.setStatus('mandatory')
lpbkErrorSize = MibTableColumn((1, 3, 6, 1, 4, 1, 97, 3, 13, 1, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpbkErrorSize.setStatus('mandatory')
lpbkErrorSent = MibTableColumn((1, 3, 6, 1, 4, 1, 97, 3, 13, 1, 1, 12), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpbkErrorSent.setStatus('mandatory')
lpbkErrorReceived = MibTableColumn((1, 3, 6, 1, 4, 1, 97, 3, 13, 1, 1, 13), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpbkErrorReceived.setStatus('mandatory')
lpbkErrorOffset = MibTableColumn((1, 3, 6, 1, 4, 1, 97, 3, 13, 1, 1, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpbkErrorOffset.setStatus('mandatory')
swanTable = MibTable((1, 3, 6, 1, 4, 1, 97, 3, 14, 1), )
if mibBuilder.loadTexts: swanTable.setStatus('mandatory')
swanEntry = MibTableRow((1, 3, 6, 1, 4, 1, 97, 3, 14, 1, 1), ).setIndexNames((0, "CTATX-MIB", "swanIndex"))
if mibBuilder.loadTexts: swanEntry.setStatus('mandatory')
swanIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 97, 3, 14, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swanIndex.setStatus('mandatory')
swanDesiredSpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 97, 3, 14, 1, 1, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swanDesiredSpeed.setStatus('mandatory')
swanActualSpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 97, 3, 14, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3, 4, 5, 6, 7, 8, 9, 10, 11))).clone(namedValues=NamedValues(("b1200-baud", 2), ("b2400-baud", 3), ("b4800-baud", 4), ("b9600-baud", 5), ("b19200-baud", 6), ("b38400-baud", 7), ("b56-kilobits", 8), ("b1544-kilobits", 9), ("b2048-kilobits", 10), ("b45-megabits", 11)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swanActualSpeed.setStatus('mandatory')
swanIpNeighborAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 97, 3, 14, 1, 1, 4), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swanIpNeighborAddress.setStatus('mandatory')
swanPPPActive = MibTableColumn((1, 3, 6, 1, 4, 1, 97, 3, 14, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("true", 1), ("false", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swanPPPActive.setStatus('mandatory')
swanAlignmentErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 97, 3, 14, 1, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swanAlignmentErrors.setStatus('mandatory')
swanOverrunErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 97, 3, 14, 1, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swanOverrunErrors.setStatus('mandatory')
swanPortType = MibTableColumn((1, 3, 6, 1, 4, 1, 97, 3, 14, 1, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("wan-unknown", 1), ("wan-v11", 2), ("wan-v24", 3), ("wan-v35", 4), ("wan-e1", 5), ("wan-t1", 6), ("wan-rs530", 7), ("wan-t3", 8)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swanPortType.setStatus('mandatory')
swanLinkCost = MibTableColumn((1, 3, 6, 1, 4, 1, 97, 3, 14, 1, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swanLinkCost.setStatus('mandatory')
swanMeshState = MibTableColumn((1, 3, 6, 1, 4, 1, 97, 3, 14, 1, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("true", 1), ("false", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swanMeshState.setStatus('mandatory')
swanLinkSubnet = MibTableColumn((1, 3, 6, 1, 4, 1, 97, 3, 14, 1, 1, 11), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swanLinkSubnet.setStatus('mandatory')
swanLinkBridge = MibTableColumn((1, 3, 6, 1, 4, 1, 97, 3, 14, 1, 1, 12), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swanLinkBridge.setStatus('mandatory')
swanLinkPort = MibTableColumn((1, 3, 6, 1, 4, 1, 97, 3, 14, 1, 1, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swanLinkPort.setStatus('mandatory')
swanNegotiate = MibTableColumn((1, 3, 6, 1, 4, 1, 97, 3, 14, 1, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("true", 1), ("false", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swanNegotiate.setStatus('mandatory')
swanSwitches = MibTableColumn((1, 3, 6, 1, 4, 1, 97, 3, 14, 1, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("wan-hssi", 1), ("wan-t1", 2), ("wan-hssi-switching-disabled", 3), ("wan-t1-switching-disabled", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swanSwitches.setStatus('mandatory')
swanDCEDrops = MibTableColumn((1, 3, 6, 1, 4, 1, 97, 3, 14, 1, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swanDCEDrops.setStatus('mandatory')
swanOutPacketType = MibTableColumn((1, 3, 6, 1, 4, 1, 97, 3, 14, 1, 1, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("token-ring-without-FCS", 1), ("token-ring-with-FCS", 2), ("ethernet-without-FCS", 3), ("ethernet-with-FCS", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swanOutPacketType.setStatus('mandatory')
swanLinkErrorPercentage = MibTableColumn((1, 3, 6, 1, 4, 1, 97, 3, 14, 1, 1, 18), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 10000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swanLinkErrorPercentage.setStatus('mandatory')
swanLinkErrorDuration = MibTableColumn((1, 3, 6, 1, 4, 1, 97, 3, 14, 1, 1, 19), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 10000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swanLinkErrorDuration.setStatus('mandatory')
swanLinkErrorFailPeriods = MibTableColumn((1, 3, 6, 1, 4, 1, 97, 3, 14, 1, 1, 20), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 20))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swanLinkErrorFailPeriods.setStatus('mandatory')
swanLinkErrorMaxPeriods = MibTableColumn((1, 3, 6, 1, 4, 1, 97, 3, 14, 1, 1, 21), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 20))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swanLinkErrorMaxPeriods.setStatus('mandatory')
swanLinkRestartTime = MibTableColumn((1, 3, 6, 1, 4, 1, 97, 3, 14, 1, 1, 22), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 10000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swanLinkRestartTime.setStatus('mandatory')
swanPreserveFCS = MibTableColumn((1, 3, 6, 1, 4, 1, 97, 3, 14, 1, 1, 23), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("true", 1), ("false", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swanPreserveFCS.setStatus('mandatory')
srepeaterTable = MibTable((1, 3, 6, 1, 4, 1, 97, 3, 16, 1), )
if mibBuilder.loadTexts: srepeaterTable.setStatus('mandatory')
srepeaterEntry = MibTableRow((1, 3, 6, 1, 4, 1, 97, 3, 16, 1, 1), ).setIndexNames((0, "CTATX-MIB", "srepeaterGroupID"))
if mibBuilder.loadTexts: srepeaterEntry.setStatus('mandatory')
srepeaterGroupID = MibTableColumn((1, 3, 6, 1, 4, 1, 97, 3, 16, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1024))).setMaxAccess("readonly")
if mibBuilder.loadTexts: srepeaterGroupID.setStatus('mandatory')
srepeaterLinkStatusMask = MibTableColumn((1, 3, 6, 1, 4, 1, 97, 3, 16, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: srepeaterLinkStatusMask.setStatus('mandatory')
srepeaterExtendedStats = MibTableColumn((1, 3, 6, 1, 4, 1, 97, 3, 16, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: srepeaterExtendedStats.setStatus('mandatory')
srepeaterPortTable = MibTable((1, 3, 6, 1, 4, 1, 97, 3, 16, 2), )
if mibBuilder.loadTexts: srepeaterPortTable.setStatus('mandatory')
srepeaterPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 97, 3, 16, 2, 1), ).setIndexNames((0, "CTATX-MIB", "srepeaterPortGroupID"), (0, "CTATX-MIB", "srepeaterPortPortID"))
if mibBuilder.loadTexts: srepeaterPortEntry.setStatus('mandatory')
srepeaterPortGroupID = MibTableColumn((1, 3, 6, 1, 4, 1, 97, 3, 16, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1024))).setMaxAccess("readonly")
if mibBuilder.loadTexts: srepeaterPortGroupID.setStatus('mandatory')
srepeaterPortPortID = MibTableColumn((1, 3, 6, 1, 4, 1, 97, 3, 16, 2, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: srepeaterPortPortID.setStatus('mandatory')
srepeaterPortLinkPulse = MibTableColumn((1, 3, 6, 1, 4, 1, 97, 3, 16, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: srepeaterPortLinkPulse.setStatus('mandatory')
sprotoTable = MibTable((1, 3, 6, 1, 4, 1, 97, 3, 17, 1), )
if mibBuilder.loadTexts: sprotoTable.setStatus('mandatory')
sprotoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 97, 3, 17, 1, 1), ).setIndexNames((0, "CTATX-MIB", "sprotoIfIndex"))
if mibBuilder.loadTexts: sprotoEntry.setStatus('mandatory')
sprotoIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 97, 3, 17, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sprotoIfIndex.setStatus('mandatory')
sprotoBridge = MibTableColumn((1, 3, 6, 1, 4, 1, 97, 3, 17, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("transparent", 1), ("sr", 2), ("srt", 3), ("none", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sprotoBridge.setStatus('mandatory')
sprotoSuppressBpdus = MibTableColumn((1, 3, 6, 1, 4, 1, 97, 3, 17, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("normal", 1), ("suppressed", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sprotoSuppressBpdus.setStatus('mandatory')
sprotoIpRoute = MibTableColumn((1, 3, 6, 1, 4, 1, 97, 3, 17, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sprotoIpRoute.setStatus('mandatory')
sprotoIpxRoute = MibTableColumn((1, 3, 6, 1, 4, 1, 97, 3, 17, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2), ("ipxsr", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sprotoIpxRoute.setStatus('mandatory')
sprotoAppleRoute = MibTableColumn((1, 3, 6, 1, 4, 1, 97, 3, 17, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sprotoAppleRoute.setStatus('mandatory')
sprotoArpTranslate = MibTableColumn((1, 3, 6, 1, 4, 1, 97, 3, 17, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("none", 1), ("bitswap1", 2), ("bitswap6", 3), ("bitswap61", 4), ("oneto6", 5), ("oneto6swap", 6)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sprotoArpTranslate.setStatus('mandatory')
sprotoArpSourceRoute = MibTableColumn((1, 3, 6, 1, 4, 1, 97, 3, 17, 1, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("passRif", 1), ("stripRif", 2), ("passBoth", 3), ("none", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sprotoArpSourceRoute.setStatus('mandatory')
sprotoIpxTranslate = MibTableColumn((1, 3, 6, 1, 4, 1, 97, 3, 17, 1, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sprotoIpxTranslate.setStatus('mandatory')
sprotoAppleTranslate = MibTableColumn((1, 3, 6, 1, 4, 1, 97, 3, 17, 1, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sprotoAppleTranslate.setStatus('mandatory')
sprotoIbmLlcTranslate = MibTableColumn((1, 3, 6, 1, 4, 1, 97, 3, 17, 1, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sprotoIbmLlcTranslate.setStatus('mandatory')
sprotoRip = MibTableColumn((1, 3, 6, 1, 4, 1, 97, 3, 17, 1, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sprotoRip.setStatus('mandatory')
sprotoEgp = MibTableColumn((1, 3, 6, 1, 4, 1, 97, 3, 17, 1, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sprotoEgp.setStatus('mandatory')
sprotoOspf = MibTableColumn((1, 3, 6, 1, 4, 1, 97, 3, 17, 1, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sprotoOspf.setStatus('mandatory')
sprotoArpProxy = MibTableColumn((1, 3, 6, 1, 4, 1, 97, 3, 17, 1, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sprotoArpProxy.setStatus('mandatory')
sprotoIbm8209Lsaps = MibTableColumn((1, 3, 6, 1, 4, 1, 97, 3, 17, 1, 1, 16), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sprotoIbm8209Lsaps.setStatus('mandatory')
sprotoBootpRelay = MibTableColumn((1, 3, 6, 1, 4, 1, 97, 3, 17, 1, 1, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sprotoBootpRelay.setStatus('mandatory')
sprotoNetbiosTranslate = MibTableColumn((1, 3, 6, 1, 4, 1, 97, 3, 17, 1, 1, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("passRif", 1), ("stripRif", 2), ("passBoth", 3), ("none", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sprotoNetbiosTranslate.setStatus('mandatory')
sprotoIpMulticast = MibTableColumn((1, 3, 6, 1, 4, 1, 97, 3, 17, 1, 1, 19), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sprotoIpMulticast.setStatus('mandatory')
sprotoTrunking = MibTableColumn((1, 3, 6, 1, 4, 1, 97, 3, 17, 1, 1, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sprotoTrunking.setStatus('mandatory')
sprotoIpxSrTranslate = MibTableColumn((1, 3, 6, 1, 4, 1, 97, 3, 17, 1, 1, 22), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("passRif", 1), ("stripRif", 2), ("passBoth", 3), ("none", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sprotoIpxSrTranslate.setStatus('mandatory')
sprotoAllTranslate = MibTableColumn((1, 3, 6, 1, 4, 1, 97, 3, 17, 1, 1, 23), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("passRif", 1), ("stripRif", 2), ("passBoth", 3), ("none", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sprotoAllTranslate.setStatus('mandatory')
sprotoSteHopCountAppliedRule = MibTableColumn((1, 3, 6, 1, 4, 1, 97, 3, 17, 1, 1, 24), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("hopcountnotapplied", 1), ("hopcountapplied", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sprotoSteHopCountAppliedRule.setStatus('mandatory')
sprotoIpxDot3Framing = MibScalar((1, 3, 6, 1, 4, 1, 97, 3, 17, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("ethernet8023", 1), ("ethernet2", 2), ("ethernet8022", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sprotoIpxDot3Framing.setStatus('mandatory')
sipxIfTable = MibTable((1, 3, 6, 1, 4, 1, 97, 3, 18, 1), )
if mibBuilder.loadTexts: sipxIfTable.setStatus('mandatory')
sipxIfEntry = MibTableRow((1, 3, 6, 1, 4, 1, 97, 3, 18, 1, 1), ).setIndexNames((0, "CTATX-MIB", "sipxIfIndex"))
if mibBuilder.loadTexts: sipxIfEntry.setStatus('mandatory')
sipxIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 97, 3, 18, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sipxIfIndex.setStatus('mandatory')
sipxIfNetwork = MibTableColumn((1, 3, 6, 1, 4, 1, 97, 3, 18, 1, 1, 2), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sipxIfNetwork.setStatus('mandatory')
sipxIfFraming = MibTableColumn((1, 3, 6, 1, 4, 1, 97, 3, 18, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("ethernet8023", 1), ("ethernet2", 2), ("ieee8022", 3), ("snap", 4), ("rawfddi", 5), ("ppp", 6)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sipxIfFraming.setStatus('mandatory')
sipxIfInRipPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 97, 3, 18, 1, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sipxIfInRipPkts.setStatus('mandatory')
sipxIfOutRipPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 97, 3, 18, 1, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sipxIfOutRipPkts.setStatus('mandatory')
sipxIfInSapPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 97, 3, 18, 1, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sipxIfInSapPkts.setStatus('mandatory')
sipxIfOutSapPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 97, 3, 18, 1, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sipxIfOutSapPkts.setStatus('mandatory')
sipxRouteTable = MibTable((1, 3, 6, 1, 4, 1, 97, 3, 18, 2), )
if mibBuilder.loadTexts: sipxRouteTable.setStatus('mandatory')
sipxRouteEntry = MibTableRow((1, 3, 6, 1, 4, 1, 97, 3, 18, 2, 1), ).setIndexNames((0, "CTATX-MIB", "sipxRouteDest"))
if mibBuilder.loadTexts: sipxRouteEntry.setStatus('mandatory')
sipxRouteDest = MibTableColumn((1, 3, 6, 1, 4, 1, 97, 3, 18, 2, 1, 1), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sipxRouteDest.setStatus('mandatory')
sipxRouteIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 97, 3, 18, 2, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sipxRouteIfIndex.setStatus('mandatory')
sipxRouteTickCount = MibTableColumn((1, 3, 6, 1, 4, 1, 97, 3, 18, 2, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sipxRouteTickCount.setStatus('mandatory')
sipxRouteHopCount = MibTableColumn((1, 3, 6, 1, 4, 1, 97, 3, 18, 2, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sipxRouteHopCount.setStatus('mandatory')
sipxRouteNextHop = MibTableColumn((1, 3, 6, 1, 4, 1, 97, 3, 18, 2, 1, 5), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sipxRouteNextHop.setStatus('mandatory')
sipxRouteAge = MibTableColumn((1, 3, 6, 1, 4, 1, 97, 3, 18, 2, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sipxRouteAge.setStatus('mandatory')
sipxSapTable = MibTable((1, 3, 6, 1, 4, 1, 97, 3, 18, 3), )
if mibBuilder.loadTexts: sipxSapTable.setStatus('mandatory')
sipxSapEntry = MibTableRow((1, 3, 6, 1, 4, 1, 97, 3, 18, 3, 1), ).setIndexNames((0, "CTATX-MIB", "sipxSapIndex"))
if mibBuilder.loadTexts: sipxSapEntry.setStatus('mandatory')
sipxSapIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 97, 3, 18, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sipxSapIndex.setStatus('mandatory')
sipxSapType = MibTableColumn((1, 3, 6, 1, 4, 1, 97, 3, 18, 3, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sipxSapType.setStatus('mandatory')
sipxSapName = MibTableColumn((1, 3, 6, 1, 4, 1, 97, 3, 18, 3, 1, 3), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sipxSapName.setStatus('mandatory')
sipxSapNetwork = MibTableColumn((1, 3, 6, 1, 4, 1, 97, 3, 18, 3, 1, 4), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sipxSapNetwork.setStatus('mandatory')
sipxSapNodeId = MibTableColumn((1, 3, 6, 1, 4, 1, 97, 3, 18, 3, 1, 5), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sipxSapNodeId.setStatus('mandatory')
sipxSapSocket = MibTableColumn((1, 3, 6, 1, 4, 1, 97, 3, 18, 3, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sipxSapSocket.setStatus('mandatory')
sipxSapHopCount = MibTableColumn((1, 3, 6, 1, 4, 1, 97, 3, 18, 3, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sipxSapHopCount.setStatus('mandatory')
sipxDiscardedRoutes = MibScalar((1, 3, 6, 1, 4, 1, 97, 3, 18, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sipxDiscardedRoutes.setStatus('mandatory')
sipxDiscardedServices = MibScalar((1, 3, 6, 1, 4, 1, 97, 3, 18, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sipxDiscardedServices.setStatus('mandatory')
sipxsfNextIndex = MibScalar((1, 3, 6, 1, 4, 1, 97, 3, 18, 6, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sipxsfNextIndex.setStatus('mandatory')
sipxsfTable = MibTable((1, 3, 6, 1, 4, 1, 97, 3, 18, 6, 2), )
if mibBuilder.loadTexts: sipxsfTable.setStatus('mandatory')
sipxsfEntry = MibTableRow((1, 3, 6, 1, 4, 1, 97, 3, 18, 6, 2, 1), ).setIndexNames((0, "CTATX-MIB", "sipxsfIndex"))
if mibBuilder.loadTexts: sipxsfEntry.setStatus('mandatory')
sipxsfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 97, 3, 18, 6, 2, 1, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sipxsfIndex.setStatus('mandatory')
sipxsfSAPName = MibTableColumn((1, 3, 6, 1, 4, 1, 97, 3, 18, 6, 2, 1, 2), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sipxsfSAPName.setStatus('mandatory')
sipxsfSAPType = MibTableColumn((1, 3, 6, 1, 4, 1, 97, 3, 18, 6, 2, 1, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sipxsfSAPType.setStatus('mandatory')
sipxsfAccessMode = MibTableColumn((1, 3, 6, 1, 4, 1, 97, 3, 18, 6, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("permitted", 1), ("denied", 2), ("invalid", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sipxsfAccessMode.setStatus('mandatory')
sipxsfFilterType = MibTableColumn((1, 3, 6, 1, 4, 1, 97, 3, 18, 6, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("entry", 1), ("exit", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sipxsfFilterType.setStatus('mandatory')
sipxsfPortMap = MibTableColumn((1, 3, 6, 1, 4, 1, 97, 3, 18, 6, 2, 1, 6), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sipxsfPortMap.setStatus('mandatory')
sipxsfNetworks = MibTableColumn((1, 3, 6, 1, 4, 1, 97, 3, 18, 6, 2, 1, 7), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sipxsfNetworks.setStatus('mandatory')
sipxsfFiltered = MibTableColumn((1, 3, 6, 1, 4, 1, 97, 3, 18, 6, 2, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sipxsfFiltered.setStatus('mandatory')
sipxsrAgingTime = MibScalar((1, 3, 6, 1, 4, 1, 97, 3, 18, 7, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sipxsrAgingTime.setStatus('mandatory')
sipxsrExplorerTable = MibTable((1, 3, 6, 1, 4, 1, 97, 3, 18, 7, 2), )
if mibBuilder.loadTexts: sipxsrExplorerTable.setStatus('mandatory')
sipxsrExplorerEntry = MibTableRow((1, 3, 6, 1, 4, 1, 97, 3, 18, 7, 2, 1), ).setIndexNames((0, "CTATX-MIB", "sipxsrPort"))
if mibBuilder.loadTexts: sipxsrExplorerEntry.setStatus('mandatory')
sipxsrPort = MibTableColumn((1, 3, 6, 1, 4, 1, 97, 3, 18, 7, 2, 1, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sipxsrPort.setStatus('mandatory')
sipxsrStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 97, 3, 18, 7, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("valid", 1), ("invalid", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sipxsrStatus.setStatus('mandatory')
sipxsrExplorerType = MibTableColumn((1, 3, 6, 1, 4, 1, 97, 3, 18, 7, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("are", 1), ("ste", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sipxsrExplorerType.setStatus('mandatory')
srtrdiscTable = MibTable((1, 3, 6, 1, 4, 1, 97, 3, 19, 1), )
if mibBuilder.loadTexts: srtrdiscTable.setStatus('mandatory')
srtrdiscEntry = MibTableRow((1, 3, 6, 1, 4, 1, 97, 3, 19, 1, 1), ).setIndexNames((0, "CTATX-MIB", "srtrdiscIfIndex"))
if mibBuilder.loadTexts: srtrdiscEntry.setStatus('mandatory')
srtrdiscIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 97, 3, 19, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: srtrdiscIfIndex.setStatus('mandatory')
srtrdiscState = MibTableColumn((1, 3, 6, 1, 4, 1, 97, 3, 19, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: srtrdiscState.setStatus('mandatory')
srtrdiscAdvertisementAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 97, 3, 19, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("multicast", 1), ("broadcast", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: srtrdiscAdvertisementAddress.setStatus('mandatory')
srtrdiscAdvertisementInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 97, 3, 19, 1, 1, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: srtrdiscAdvertisementInterval.setStatus('mandatory')
srtrdiscLifetime = MibTableColumn((1, 3, 6, 1, 4, 1, 97, 3, 19, 1, 1, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: srtrdiscLifetime.setStatus('mandatory')
srtrdiscPreference = MibTableColumn((1, 3, 6, 1, 4, 1, 97, 3, 19, 1, 1, 6), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: srtrdiscPreference.setStatus('mandatory')
sipmRouteTable = MibTable((1, 3, 6, 1, 4, 1, 97, 3, 20, 1, 1), )
if mibBuilder.loadTexts: sipmRouteTable.setStatus('mandatory')
sipmRouteEntry = MibTableRow((1, 3, 6, 1, 4, 1, 97, 3, 20, 1, 1, 1), ).setIndexNames((0, "CTATX-MIB", "sipmRouteOrigin"), (0, "CTATX-MIB", "sipmRouteOriginMask"))
if mibBuilder.loadTexts: sipmRouteEntry.setStatus('mandatory')
sipmRouteOrigin = MibTableColumn((1, 3, 6, 1, 4, 1, 97, 3, 20, 1, 1, 1, 1), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sipmRouteOrigin.setStatus('mandatory')
sipmRouteOriginMask = MibTableColumn((1, 3, 6, 1, 4, 1, 97, 3, 20, 1, 1, 1, 2), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sipmRouteOriginMask.setStatus('mandatory')
sipmRouteGateway = MibTableColumn((1, 3, 6, 1, 4, 1, 97, 3, 20, 1, 1, 1, 3), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sipmRouteGateway.setStatus('mandatory')
sipmRouteMetric = MibTableColumn((1, 3, 6, 1, 4, 1, 97, 3, 20, 1, 1, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sipmRouteMetric.setStatus('mandatory')
sipmRouteAge = MibTableColumn((1, 3, 6, 1, 4, 1, 97, 3, 20, 1, 1, 1, 5), TimeTicks()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sipmRouteAge.setStatus('mandatory')
sipmRouteParents = MibTableColumn((1, 3, 6, 1, 4, 1, 97, 3, 20, 1, 1, 1, 6), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sipmRouteParents.setStatus('mandatory')
sipmNeighborTable = MibTable((1, 3, 6, 1, 4, 1, 97, 3, 20, 3, 1), )
if mibBuilder.loadTexts: sipmNeighborTable.setStatus('mandatory')
sipmNeighborEntry = MibTableRow((1, 3, 6, 1, 4, 1, 97, 3, 20, 3, 1, 1), ).setIndexNames((0, "CTATX-MIB", "sipmNeighborIfIndex"), (0, "CTATX-MIB", "sipmNeighbors"))
if mibBuilder.loadTexts: sipmNeighborEntry.setStatus('mandatory')
sipmNeighborIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 97, 3, 20, 3, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sipmNeighborIfIndex.setStatus('mandatory')
sipmNeighbors = MibTableColumn((1, 3, 6, 1, 4, 1, 97, 3, 20, 3, 1, 1, 2), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sipmNeighbors.setStatus('mandatory')
sipmNeighborLastHeard = MibTableColumn((1, 3, 6, 1, 4, 1, 97, 3, 20, 3, 1, 1, 3), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sipmNeighborLastHeard.setStatus('mandatory')
sipmOutOfMemory = MibScalar((1, 3, 6, 1, 4, 1, 97, 3, 20, 4, 1), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sipmOutOfMemory.setStatus('mandatory')
sipmStatTable = MibTable((1, 3, 6, 1, 4, 1, 97, 3, 20, 4, 2), )
if mibBuilder.loadTexts: sipmStatTable.setStatus('mandatory')
sipmStatEntry = MibTableRow((1, 3, 6, 1, 4, 1, 97, 3, 20, 4, 2, 1), ).setIndexNames((0, "CTATX-MIB", "sipmStatIfIndex"))
if mibBuilder.loadTexts: sipmStatEntry.setStatus('mandatory')
sipmStatIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 97, 3, 20, 4, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sipmStatIfIndex.setStatus('mandatory')
sipmInBadPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 97, 3, 20, 4, 2, 1, 2), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sipmInBadPackets.setStatus('mandatory')
sipmCacheMiss = MibTableColumn((1, 3, 6, 1, 4, 1, 97, 3, 20, 4, 2, 1, 3), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sipmCacheMiss.setStatus('mandatory')
sipcktTable = MibTable((1, 3, 6, 1, 4, 1, 97, 3, 21, 1), )
if mibBuilder.loadTexts: sipcktTable.setStatus('mandatory')
sipcktEntry = MibTableRow((1, 3, 6, 1, 4, 1, 97, 3, 21, 1, 1), ).setIndexNames((0, "CTATX-MIB", "sipcktIndex"), (0, "CTATX-MIB", "sipcktIpAddress"))
if mibBuilder.loadTexts: sipcktEntry.setStatus('mandatory')
sipcktIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 97, 3, 21, 1, 1, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sipcktIndex.setStatus('mandatory')
sipcktIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 97, 3, 21, 1, 1, 2), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sipcktIpAddress.setStatus('mandatory')
sipcktState = MibTableColumn((1, 3, 6, 1, 4, 1, 97, 3, 21, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("valid", 1), ("invalid", 2), ("invalid-all", 3), ("netmask-conflict", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sipcktState.setStatus('mandatory')
sipcktNetMask = MibTableColumn((1, 3, 6, 1, 4, 1, 97, 3, 21, 1, 1, 4), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sipcktNetMask.setStatus('mandatory')
sipcktSourceRoute = MibTableColumn((1, 3, 6, 1, 4, 1, 97, 3, 21, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("default", 1), ("sr", 2), ("no-sr", 3), ("both", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sipcktSourceRoute.setStatus('mandatory')
sipNetToMediaTable = MibTable((1, 3, 6, 1, 4, 1, 97, 3, 22), )
if mibBuilder.loadTexts: sipNetToMediaTable.setStatus('mandatory')
sipNetToMediaEntry = MibTableRow((1, 3, 6, 1, 4, 1, 97, 3, 22, 1), ).setIndexNames((0, "CTATX-MIB", "sipNetToMediaIfIndex"), (0, "CTATX-MIB", "sipNetToMediaNetAddress"))
if mibBuilder.loadTexts: sipNetToMediaEntry.setStatus('mandatory')
sipNetToMediaIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 97, 3, 22, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sipNetToMediaIfIndex.setStatus('mandatory')
sipNetToMediaNetAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 97, 3, 22, 1, 2), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sipNetToMediaNetAddress.setStatus('mandatory')
sipNetToMediaSourceRoute = MibTableColumn((1, 3, 6, 1, 4, 1, 97, 3, 22, 1, 3), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sipNetToMediaSourceRoute.setStatus('mandatory')
sipNetToMediaAge = MibTableColumn((1, 3, 6, 1, 4, 1, 97, 3, 22, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sipNetToMediaAge.setStatus('mandatory')
profileTable = MibTable((1, 3, 6, 1, 4, 1, 97, 3, 23, 1), )
if mibBuilder.loadTexts: profileTable.setStatus('mandatory')
profileEntry = MibTableRow((1, 3, 6, 1, 4, 1, 97, 3, 23, 1, 1), ).setIndexNames((0, "CTATX-MIB", "profileIndex"), (0, "CTATX-MIB", "profileSourceStart"), (0, "CTATX-MIB", "profileSourceEnd"), (0, "CTATX-MIB", "profileDestStart"), (0, "CTATX-MIB", "profileDestEnd"))
if mibBuilder.loadTexts: profileEntry.setStatus('mandatory')
profileIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 97, 3, 23, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: profileIndex.setStatus('mandatory')
profileSourceStart = MibTableColumn((1, 3, 6, 1, 4, 1, 97, 3, 23, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: profileSourceStart.setStatus('mandatory')
profileSourceEnd = MibTableColumn((1, 3, 6, 1, 4, 1, 97, 3, 23, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: profileSourceEnd.setStatus('mandatory')
profileDestStart = MibTableColumn((1, 3, 6, 1, 4, 1, 97, 3, 23, 1, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: profileDestStart.setStatus('mandatory')
profileDestEnd = MibTableColumn((1, 3, 6, 1, 4, 1, 97, 3, 23, 1, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: profileDestEnd.setStatus('mandatory')
profileType = MibTableColumn((1, 3, 6, 1, 4, 1, 97, 3, 23, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("valid", 1), ("invalid", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: profileType.setStatus('mandatory')
ruleTable = MibTable((1, 3, 6, 1, 4, 1, 97, 3, 23, 2), )
if mibBuilder.loadTexts: ruleTable.setStatus('mandatory')
ruleEntry = MibTableRow((1, 3, 6, 1, 4, 1, 97, 3, 23, 2, 1), ).setIndexNames((0, "CTATX-MIB", "ruleIndex"), (0, "CTATX-MIB", "ruleSourceIp"), (0, "CTATX-MIB", "ruleDestIp"), (0, "CTATX-MIB", "ruleSourceIpMask"), (0, "CTATX-MIB", "ruleDestIpMask"))
if mibBuilder.loadTexts: ruleEntry.setStatus('mandatory')
ruleIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 97, 3, 23, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ruleIndex.setStatus('mandatory')
ruleSourceIp = MibTableColumn((1, 3, 6, 1, 4, 1, 97, 3, 23, 2, 1, 2), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ruleSourceIp.setStatus('mandatory')
ruleDestIp = MibTableColumn((1, 3, 6, 1, 4, 1, 97, 3, 23, 2, 1, 3), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ruleDestIp.setStatus('mandatory')
ruleSourceIpMask = MibTableColumn((1, 3, 6, 1, 4, 1, 97, 3, 23, 2, 1, 4), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ruleSourceIpMask.setStatus('mandatory')
ruleDestIpMask = MibTableColumn((1, 3, 6, 1, 4, 1, 97, 3, 23, 2, 1, 5), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ruleDestIpMask.setStatus('mandatory')
ruleType = MibTableColumn((1, 3, 6, 1, 4, 1, 97, 3, 23, 2, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("valid", 1), ("invalid", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ruleType.setStatus('mandatory')
ruleUdpProfile = MibTableColumn((1, 3, 6, 1, 4, 1, 97, 3, 23, 2, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1023))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ruleUdpProfile.setStatus('mandatory')
ruleTcpProfile = MibTableColumn((1, 3, 6, 1, 4, 1, 97, 3, 23, 2, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1023))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ruleTcpProfile.setStatus('mandatory')
ruleTcpEstProfile = MibTableColumn((1, 3, 6, 1, 4, 1, 97, 3, 23, 2, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1023))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ruleTcpEstProfile.setStatus('mandatory')
ruleFilterUdpFragment = MibTableColumn((1, 3, 6, 1, 4, 1, 97, 3, 23, 2, 1, 10), Boolean()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ruleFilterUdpFragment.setStatus('mandatory')
ruleFilterTcpFragment = MibTableColumn((1, 3, 6, 1, 4, 1, 97, 3, 23, 2, 1, 11), Boolean()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ruleFilterTcpFragment.setStatus('mandatory')
ruleFilterIpOption = MibTableColumn((1, 3, 6, 1, 4, 1, 97, 3, 23, 2, 1, 12), Boolean()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ruleFilterIpOption.setStatus('mandatory')
ruleAllowIcmp = MibTableColumn((1, 3, 6, 1, 4, 1, 97, 3, 23, 2, 1, 13), Boolean()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ruleAllowIcmp.setStatus('mandatory')
ruleAllowIpWithinIp = MibTableColumn((1, 3, 6, 1, 4, 1, 97, 3, 23, 2, 1, 14), Boolean()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ruleAllowIpWithinIp.setStatus('mandatory')
ruleAllowEgp = MibTableColumn((1, 3, 6, 1, 4, 1, 97, 3, 23, 2, 1, 15), Boolean()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ruleAllowEgp.setStatus('mandatory')
ruleAllowIgp = MibTableColumn((1, 3, 6, 1, 4, 1, 97, 3, 23, 2, 1, 16), Boolean()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ruleAllowIgp.setStatus('mandatory')
ruleAllowIgrp = MibTableColumn((1, 3, 6, 1, 4, 1, 97, 3, 23, 2, 1, 17), Boolean()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ruleAllowIgrp.setStatus('mandatory')
ruleAllowOspf = MibTableColumn((1, 3, 6, 1, 4, 1, 97, 3, 23, 2, 1, 18), Boolean()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ruleAllowOspf.setStatus('mandatory')
ruleAllowAnyOther = MibTableColumn((1, 3, 6, 1, 4, 1, 97, 3, 23, 2, 1, 19), Boolean()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ruleAllowAnyOther.setStatus('mandatory')
spvcTable = MibTable((1, 3, 6, 1, 4, 1, 97, 3, 24, 1), )
if mibBuilder.loadTexts: spvcTable.setStatus('mandatory')
spvcEntry = MibTableRow((1, 3, 6, 1, 4, 1, 97, 3, 24, 1, 1), ).setIndexNames((0, "CTATX-MIB", "spvcIfIndex"))
if mibBuilder.loadTexts: spvcEntry.setStatus('mandatory')
spvcIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 97, 3, 24, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: spvcIfIndex.setStatus('mandatory')
spvcPathRX = MibTableColumn((1, 3, 6, 1, 4, 1, 97, 3, 24, 1, 1, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: spvcPathRX.setStatus('mandatory')
spvcCircuitRX = MibTableColumn((1, 3, 6, 1, 4, 1, 97, 3, 24, 1, 1, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: spvcCircuitRX.setStatus('mandatory')
spvcPathTX = MibTableColumn((1, 3, 6, 1, 4, 1, 97, 3, 24, 1, 1, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: spvcPathTX.setStatus('mandatory')
spvcCircuitTX = MibTableColumn((1, 3, 6, 1, 4, 1, 97, 3, 24, 1, 1, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: spvcCircuitTX.setStatus('mandatory')
spvcState = MibTableColumn((1, 3, 6, 1, 4, 1, 97, 3, 24, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("exists", 1), ("removed", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: spvcState.setStatus('mandatory')
spvcPhysPort = MibTableColumn((1, 3, 6, 1, 4, 1, 97, 3, 24, 1, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: spvcPhysPort.setStatus('mandatory')
spvcMinPort = MibScalar((1, 3, 6, 1, 4, 1, 97, 3, 24, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: spvcMinPort.setStatus('mandatory')
spvcMaxPort = MibScalar((1, 3, 6, 1, 4, 1, 97, 3, 24, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: spvcMaxPort.setStatus('mandatory')
strunkTable = MibTable((1, 3, 6, 1, 4, 1, 97, 3, 25, 1), )
if mibBuilder.loadTexts: strunkTable.setStatus('mandatory')
strunkEntry = MibTableRow((1, 3, 6, 1, 4, 1, 97, 3, 25, 1, 1), ).setIndexNames((0, "CTATX-MIB", "strunkIfIndex"))
if mibBuilder.loadTexts: strunkEntry.setStatus('mandatory')
strunkIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 97, 3, 25, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: strunkIfIndex.setStatus('mandatory')
strunkState = MibTableColumn((1, 3, 6, 1, 4, 1, 97, 3, 25, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("off", 1), ("closed", 2), ("oneway", 3), ("joined", 4), ("perturbed", 5), ("helddown", 6), ("broken", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: strunkState.setStatus('mandatory')
strunkRemoteBridgeAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 97, 3, 25, 1, 1, 3), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: strunkRemoteBridgeAddr.setStatus('mandatory')
strunkRemoteIp = MibTableColumn((1, 3, 6, 1, 4, 1, 97, 3, 25, 1, 1, 4), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: strunkRemoteIp.setStatus('mandatory')
strunkLastError = MibTableColumn((1, 3, 6, 1, 4, 1, 97, 3, 25, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11))).clone(namedValues=NamedValues(("none", 1), ("in-bpdu", 2), ("multiple-bridges", 3), ("ack-lost", 4), ("standby", 5), ("too-many-groups", 6), ("no-ack", 7), ("perturbed-threshold", 8), ("self-connect", 9), ("port-moved", 10), ("multiple-lan-types", 11)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: strunkLastError.setStatus('mandatory')
strunkLinkOrdinal = MibTableColumn((1, 3, 6, 1, 4, 1, 97, 3, 25, 1, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: strunkLinkOrdinal.setStatus('mandatory')
strunkLinkCount = MibTableColumn((1, 3, 6, 1, 4, 1, 97, 3, 25, 1, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: strunkLinkCount.setStatus('mandatory')
strunkLastChange = MibTableColumn((1, 3, 6, 1, 4, 1, 97, 3, 25, 1, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: strunkLastChange.setStatus('mandatory')
atextsysOperState = MibScalar((1, 3, 6, 1, 4, 1, 97, 6, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("off", 1), ("on", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atextsysOperState.setStatus('mandatory')
atextportTable = MibTable((1, 3, 6, 1, 4, 1, 97, 6, 2, 1), )
if mibBuilder.loadTexts: atextportTable.setStatus('mandatory')
atextportEntry = MibTableRow((1, 3, 6, 1, 4, 1, 97, 6, 2, 1, 1), ).setIndexNames((0, "CTATX-MIB", "atextportIndex"))
if mibBuilder.loadTexts: atextportEntry.setStatus('mandatory')
atextportIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 97, 6, 2, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atextportIndex.setStatus('mandatory')
atextportNetStart = MibTableColumn((1, 3, 6, 1, 4, 1, 97, 6, 2, 1, 1, 2), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atextportNetStart.setStatus('mandatory')
atextportNetEnd = MibTableColumn((1, 3, 6, 1, 4, 1, 97, 6, 2, 1, 1, 3), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atextportNetEnd.setStatus('mandatory')
atextportNetAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 97, 6, 2, 1, 1, 4), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atextportNetAddress.setStatus('mandatory')
atextportZone = MibTableColumn((1, 3, 6, 1, 4, 1, 97, 6, 2, 1, 1, 5), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atextportZone.setStatus('mandatory')
atextportzipTable = MibTable((1, 3, 6, 1, 4, 1, 97, 6, 2, 2), )
if mibBuilder.loadTexts: atextportzipTable.setStatus('mandatory')
atextportzipEntry = MibTableRow((1, 3, 6, 1, 4, 1, 97, 6, 2, 2, 1), ).setIndexNames((0, "CTATX-MIB", "atextportZonePort"), (0, "CTATX-MIB", "atextportZoneIndex"))
if mibBuilder.loadTexts: atextportzipEntry.setStatus('mandatory')
atextportZonePort = MibTableColumn((1, 3, 6, 1, 4, 1, 97, 6, 2, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atextportZonePort.setStatus('mandatory')
atextportZoneIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 97, 6, 2, 2, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atextportZoneIndex.setStatus('mandatory')
atextportZoneName = MibTableColumn((1, 3, 6, 1, 4, 1, 97, 6, 2, 2, 1, 3), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atextportZoneName.setStatus('mandatory')
slogFilter = MibScalar((1, 3, 6, 1, 4, 1, 97, 3, 28, 1), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: slogFilter.setStatus('mandatory')
slogTrap = MibScalar((1, 3, 6, 1, 4, 1, 97, 3, 28, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: slogTrap.setStatus('mandatory')
slogOverwrite = MibScalar((1, 3, 6, 1, 4, 1, 97, 3, 28, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: slogOverwrite.setStatus('mandatory')
slogEntryNumber = MibScalar((1, 3, 6, 1, 4, 1, 97, 3, 28, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slogEntryNumber.setStatus('mandatory')
slogEntryTable = MibTable((1, 3, 6, 1, 4, 1, 97, 3, 28, 5), )
if mibBuilder.loadTexts: slogEntryTable.setStatus('mandatory')
slogEntry = MibTableRow((1, 3, 6, 1, 4, 1, 97, 3, 28, 5, 1), ).setIndexNames((0, "CTATX-MIB", "slogIndex"))
if mibBuilder.loadTexts: slogEntry.setStatus('mandatory')
slogIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 97, 3, 28, 5, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slogIndex.setStatus('mandatory')
slogEntryTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 97, 3, 28, 5, 1, 2), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slogEntryTimeStamp.setStatus('mandatory')
slogEntryMessageText = MibTableColumn((1, 3, 6, 1, 4, 1, 97, 3, 28, 5, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slogEntryMessageText.setStatus('mandatory')
slogEntryName = MibTableColumn((1, 3, 6, 1, 4, 1, 97, 3, 28, 5, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slogEntryName.setStatus('mandatory')
strapControlTable = MibTable((1, 3, 6, 1, 4, 1, 97, 3, 29, 1), )
if mibBuilder.loadTexts: strapControlTable.setStatus('mandatory')
strapControl = MibTableRow((1, 3, 6, 1, 4, 1, 97, 3, 29, 1, 1), ).setIndexNames((0, "CTATX-MIB", "strapIndex"))
if mibBuilder.loadTexts: strapControl.setStatus('mandatory')
strapIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 97, 3, 29, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: strapIndex.setStatus('mandatory')
strapEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 97, 3, 29, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("true", 1), ("false", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: strapEnabled.setStatus('mandatory')
strapSeverity = MibTableColumn((1, 3, 6, 1, 4, 1, 97, 3, 29, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("informational", 1), ("warning", 2), ("minor", 3), ("major", 4), ("critical", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: strapSeverity.setStatus('mandatory')
strapText = MibTableColumn((1, 3, 6, 1, 4, 1, 97, 3, 29, 1, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: strapText.setStatus('mandatory')
strapSeverityControlTable = MibTable((1, 3, 6, 1, 4, 1, 97, 3, 29, 2), )
if mibBuilder.loadTexts: strapSeverityControlTable.setStatus('mandatory')
strapSeverityControl = MibTableRow((1, 3, 6, 1, 4, 1, 97, 3, 29, 2, 1), ).setIndexNames((0, "CTATX-MIB", "strapSeveritySeverity"))
if mibBuilder.loadTexts: strapSeverityControl.setStatus('mandatory')
strapSeveritySeverity = MibTableColumn((1, 3, 6, 1, 4, 1, 97, 3, 29, 2, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("informational", 1), ("warning", 2), ("minor", 3), ("major", 4), ("critical", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: strapSeveritySeverity.setStatus('mandatory')
strapSeverityEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 97, 3, 29, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: strapSeverityEnable.setStatus('mandatory')
strapIncludeText = MibScalar((1, 3, 6, 1, 4, 1, 97, 3, 29, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("true", 1), ("false", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: strapIncludeText.setStatus('mandatory')
strapTime = MibScalar((1, 3, 6, 1, 4, 1, 97, 3, 29, 4), TimeTicks()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: strapTime.setStatus('mandatory')
strapRetry = MibScalar((1, 3, 6, 1, 4, 1, 97, 3, 29, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: strapRetry.setStatus('mandatory')
strapEntryNumber = MibScalar((1, 3, 6, 1, 4, 1, 97, 3, 29, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: strapEntryNumber.setStatus('mandatory')
strapTable = MibTable((1, 3, 6, 1, 4, 1, 97, 3, 29, 7), )
if mibBuilder.loadTexts: strapTable.setStatus('mandatory')
strapEntry = MibTableRow((1, 3, 6, 1, 4, 1, 97, 3, 29, 7, 1), ).setIndexNames((0, "CTATX-MIB", "strapEntryIndex"))
if mibBuilder.loadTexts: strapEntry.setStatus('mandatory')
strapEntryIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 97, 3, 29, 7, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: strapEntryIndex.setStatus('mandatory')
strapEntryTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 97, 3, 29, 7, 1, 2), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: strapEntryTimeStamp.setStatus('mandatory')
strapEntryText = MibTableColumn((1, 3, 6, 1, 4, 1, 97, 3, 29, 7, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: strapEntryText.setStatus('mandatory')
strapNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 97, 3, 29, 7, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: strapNumber.setStatus('mandatory')
strapEntrySeverity = MibTableColumn((1, 3, 6, 1, 4, 1, 97, 3, 29, 7, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("informational", 1), ("warning", 2), ("minor", 3), ("major", 4), ("critical", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: strapEntrySeverity.setStatus('mandatory')
smirrorStatus = MibScalar((1, 3, 6, 1, 4, 1, 97, 3, 30, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("invalid", 1), ("local", 2), ("remote", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: smirrorStatus.setStatus('mandatory')
smirrorDiagPort = MibScalar((1, 3, 6, 1, 4, 1, 97, 3, 30, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: smirrorDiagPort.setStatus('mandatory')
smirrorIPaddr = MibScalar((1, 3, 6, 1, 4, 1, 97, 3, 30, 3), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: smirrorIPaddr.setStatus('mandatory')
smirrorTargetPortLists = MibScalar((1, 3, 6, 1, 4, 1, 97, 3, 30, 4), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: smirrorTargetPortLists.setStatus('mandatory')
smirrorOversizePkt = MibScalar((1, 3, 6, 1, 4, 1, 97, 3, 30, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("discard", 1), ("truncate", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: smirrorOversizePkt.setStatus('mandatory')
smirrorEntryMirroredPkts = MibScalar((1, 3, 6, 1, 4, 1, 97, 3, 30, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smirrorEntryMirroredPkts.setStatus('mandatory')
smirrorExitMirroredPkts = MibScalar((1, 3, 6, 1, 4, 1, 97, 3, 30, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smirrorExitMirroredPkts.setStatus('mandatory')
smirrorNotreadyDroppedPkts = MibScalar((1, 3, 6, 1, 4, 1, 97, 3, 30, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smirrorNotreadyDroppedPkts.setStatus('mandatory')
smirrorOversizeDroppedPkts = MibScalar((1, 3, 6, 1, 4, 1, 97, 3, 30, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smirrorOversizeDroppedPkts.setStatus('mandatory')
smirrorEntryFilteredPkts = MibScalar((1, 3, 6, 1, 4, 1, 97, 3, 30, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smirrorEntryFilteredPkts.setStatus('mandatory')
smirrorExitFilteredPkts = MibScalar((1, 3, 6, 1, 4, 1, 97, 3, 30, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smirrorExitFilteredPkts.setStatus('mandatory')
smirrorCongestionDroppedPkts = MibScalar((1, 3, 6, 1, 4, 1, 97, 3, 30, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smirrorCongestionDroppedPkts.setStatus('mandatory')
smirrorNowrapperDroppedPkts = MibScalar((1, 3, 6, 1, 4, 1, 97, 3, 30, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smirrorNowrapperDroppedPkts.setStatus('mandatory')
smirrorRemoteStatus = MibScalar((1, 3, 6, 1, 4, 1, 97, 3, 30, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 6, 7, 8, 9))).clone(namedValues=NamedValues(("mirrorOff", 0), ("handshakeInProgress", 1), ("arpRefreshInProgress", 2), ("remoteHostUnreachable", 3), ("mirroring", 6), ("versionIncompatible", 7), ("remoteDiagnosticPortBroken", 8), ("remoteMirrorNotOn", 9)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: smirrorRemoteStatus.setStatus('mandatory')
smirrorRemoteExitPort = MibScalar((1, 3, 6, 1, 4, 1, 97, 3, 30, 15), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smirrorRemoteExitPort.setStatus('mandatory')
sWorkGroupNextNumber = MibScalar((1, 3, 6, 1, 4, 1, 97, 3, 31, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sWorkGroupNextNumber.setStatus('mandatory')
sWorkGroupCurrentCount = MibScalar((1, 3, 6, 1, 4, 1, 97, 3, 31, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sWorkGroupCurrentCount.setStatus('mandatory')
sWorkGroupMaxCount = MibScalar((1, 3, 6, 1, 4, 1, 97, 3, 31, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sWorkGroupMaxCount.setStatus('mandatory')
sWorkGroupTable = MibTable((1, 3, 6, 1, 4, 1, 97, 3, 31, 4), )
if mibBuilder.loadTexts: sWorkGroupTable.setStatus('mandatory')
sWorkGroupEntry = MibTableRow((1, 3, 6, 1, 4, 1, 97, 3, 31, 4, 1), ).setIndexNames((0, "CTATX-MIB", "sWorkGroupNumber"))
if mibBuilder.loadTexts: sWorkGroupEntry.setStatus('mandatory')
sWorkGroupNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 97, 3, 31, 4, 1, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sWorkGroupNumber.setStatus('mandatory')
sWorkGroupName = MibTableColumn((1, 3, 6, 1, 4, 1, 97, 3, 31, 4, 1, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sWorkGroupName.setStatus('mandatory')
sWorkGroupPorts = MibTableColumn((1, 3, 6, 1, 4, 1, 97, 3, 31, 4, 1, 3), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sWorkGroupPorts.setStatus('mandatory')
sWorkGroupType = MibTableColumn((1, 3, 6, 1, 4, 1, 97, 3, 31, 4, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("ip", 1), ("ipx", 2), ("all", 3), ("invalid", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sWorkGroupType.setStatus('mandatory')
sWorkGroupIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 97, 3, 31, 4, 1, 5), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sWorkGroupIpAddress.setStatus('mandatory')
sWorkGroupIpMask = MibTableColumn((1, 3, 6, 1, 4, 1, 97, 3, 31, 4, 1, 6), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sWorkGroupIpMask.setStatus('mandatory')
sWorkGroupIpxNetwork = MibTableColumn((1, 3, 6, 1, 4, 1, 97, 3, 31, 4, 1, 7), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sWorkGroupIpxNetwork.setStatus('mandatory')
spingDataTimeout = MibScalar((1, 3, 6, 1, 4, 1, 97, 3, 32, 1), TimeTicks()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: spingDataTimeout.setStatus('mandatory')
spingTable = MibTable((1, 3, 6, 1, 4, 1, 97, 3, 32, 2), )
if mibBuilder.loadTexts: spingTable.setStatus('mandatory')
spingEntry = MibTableRow((1, 3, 6, 1, 4, 1, 97, 3, 32, 2, 1), ).setIndexNames((0, "CTATX-MIB", "spingNMSAddr"), (0, "CTATX-MIB", "spingDestAddr"))
if mibBuilder.loadTexts: spingEntry.setStatus('mandatory')
spingNMSAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 97, 3, 32, 2, 1, 1), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: spingNMSAddr.setStatus('mandatory')
spingDestAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 97, 3, 32, 2, 1, 2), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: spingDestAddr.setStatus('mandatory')
spingState = MibTableColumn((1, 3, 6, 1, 4, 1, 97, 3, 32, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("not-started", 0), ("active", 1), ("timed-out", 2), ("completed", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: spingState.setStatus('mandatory')
spingCount = MibTableColumn((1, 3, 6, 1, 4, 1, 97, 3, 32, 2, 1, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: spingCount.setStatus('mandatory')
spingDataSize = MibTableColumn((1, 3, 6, 1, 4, 1, 97, 3, 32, 2, 1, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: spingDataSize.setStatus('mandatory')
spingWait = MibTableColumn((1, 3, 6, 1, 4, 1, 97, 3, 32, 2, 1, 6), TimeTicks()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: spingWait.setStatus('mandatory')
spingTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 97, 3, 32, 2, 1, 7), TimeTicks()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: spingTimeout.setStatus('mandatory')
spingOperation = MibTableColumn((1, 3, 6, 1, 4, 1, 97, 3, 32, 2, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("on", 1), ("off", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: spingOperation.setStatus('mandatory')
spingMin = MibTableColumn((1, 3, 6, 1, 4, 1, 97, 3, 32, 2, 1, 9), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: spingMin.setStatus('mandatory')
spingMax = MibTableColumn((1, 3, 6, 1, 4, 1, 97, 3, 32, 2, 1, 10), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: spingMax.setStatus('mandatory')
spingAvg = MibTableColumn((1, 3, 6, 1, 4, 1, 97, 3, 32, 2, 1, 11), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: spingAvg.setStatus('mandatory')
spingNumTransmitted = MibTableColumn((1, 3, 6, 1, 4, 1, 97, 3, 32, 2, 1, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: spingNumTransmitted.setStatus('mandatory')
spingNumReceived = MibTableColumn((1, 3, 6, 1, 4, 1, 97, 3, 32, 2, 1, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: spingNumReceived.setStatus('mandatory')
straceDataTimeout = MibScalar((1, 3, 6, 1, 4, 1, 97, 3, 33, 1), TimeTicks()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: straceDataTimeout.setStatus('mandatory')
straceTable = MibTable((1, 3, 6, 1, 4, 1, 97, 3, 33, 2), )
if mibBuilder.loadTexts: straceTable.setStatus('mandatory')
straceEntry = MibTableRow((1, 3, 6, 1, 4, 1, 97, 3, 33, 2, 1), ).setIndexNames((0, "CTATX-MIB", "straceNMSAddr"), (0, "CTATX-MIB", "straceDestAddr"), (0, "CTATX-MIB", "straceHop"), (0, "CTATX-MIB", "straceProbe"))
if mibBuilder.loadTexts: straceEntry.setStatus('mandatory')
straceNMSAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 97, 3, 33, 2, 1, 1), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: straceNMSAddr.setStatus('mandatory')
straceDestAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 97, 3, 33, 2, 1, 2), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: straceDestAddr.setStatus('mandatory')
straceMaxTTL = MibTableColumn((1, 3, 6, 1, 4, 1, 97, 3, 33, 2, 1, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: straceMaxTTL.setStatus('mandatory')
straceDataSize = MibTableColumn((1, 3, 6, 1, 4, 1, 97, 3, 33, 2, 1, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: straceDataSize.setStatus('mandatory')
straceNumProbes = MibTableColumn((1, 3, 6, 1, 4, 1, 97, 3, 33, 2, 1, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: straceNumProbes.setStatus('mandatory')
straceWait = MibTableColumn((1, 3, 6, 1, 4, 1, 97, 3, 33, 2, 1, 6), TimeTicks()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: straceWait.setStatus('mandatory')
straceOperation = MibTableColumn((1, 3, 6, 1, 4, 1, 97, 3, 33, 2, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("on", 1), ("off", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: straceOperation.setStatus('mandatory')
straceHop = MibTableColumn((1, 3, 6, 1, 4, 1, 97, 3, 33, 2, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: straceHop.setStatus('mandatory')
straceHopAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 97, 3, 33, 2, 1, 9), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: straceHopAddress.setStatus('mandatory')
straceProbe = MibTableColumn((1, 3, 6, 1, 4, 1, 97, 3, 33, 2, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: straceProbe.setStatus('mandatory')
straceState = MibTableColumn((1, 3, 6, 1, 4, 1, 97, 3, 33, 2, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("not-started", 0), ("active", 1), ("time-exceeded", 2), ("host-unreachable", 3), ("net-unreachable", 4), ("completed", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: straceState.setStatus('mandatory')
straceTime = MibTableColumn((1, 3, 6, 1, 4, 1, 97, 3, 33, 2, 1, 12), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: straceTime.setStatus('mandatory')
srtbProto = MibScalar((1, 3, 6, 1, 4, 1, 97, 3, 34, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 7))).clone(namedValues=NamedValues(("off", 0), ("ip", 1), ("ipx", 2), ("others", 3), ("all", 7)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: srtbProto.setStatus('mandatory')
srtbExplorer = MibScalar((1, 3, 6, 1, 4, 1, 97, 3, 34, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("are", 1), ("ste", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: srtbExplorer.setStatus('mandatory')
srtbAgingTime = MibScalar((1, 3, 6, 1, 4, 1, 97, 3, 34, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: srtbAgingTime.setStatus('mandatory')
nbCacheifTable = MibTable((1, 3, 6, 1, 4, 1, 97, 3, 35, 3), )
if mibBuilder.loadTexts: nbCacheifTable.setStatus('mandatory')
nbCacheifEntry = MibTableRow((1, 3, 6, 1, 4, 1, 97, 3, 35, 3, 1), ).setIndexNames((0, "CTATX-MIB", "nbCacheIfIndex"))
if mibBuilder.loadTexts: nbCacheifEntry.setStatus('mandatory')
nbCacheIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 97, 3, 35, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nbCacheIfIndex.setStatus('mandatory')
nbCacheIfOperStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 97, 3, 35, 3, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nbCacheIfOperStatus.setStatus('mandatory')
mibBuilder.exportSymbols("CTATX-MIB", swanLinkErrorFailPeriods=swanLinkErrorFailPeriods, smirrorOversizeDroppedPkts=smirrorOversizeDroppedPkts, sipxsfSAPType=sipxsfSAPType, ruleTable=ruleTable, sprotoAppleTranslate=sprotoAppleTranslate, atextportZoneName=atextportZoneName, hwPortStatus=hwPortStatus, sWorkGroupIpxNetwork=sWorkGroupIpxNetwork, rebootType=rebootType, ppeEgpPreference=ppeEgpPreference, straceTable=straceTable, sipmNeighborEntry=sipmNeighborEntry, addrRptrPort=addrRptrPort, sipcktIpAddress=sipcktIpAddress, ppeTftpPduMemoryFailures=ppeTftpPduMemoryFailures, addrNext=addrNext, addrFlags=addrFlags, hwAddr2=hwAddr2, swdisConfigIp=swdisConfigIp, ssecure=ssecure, srtbProto=srtbProto, sipxsfIndex=sipxsfIndex, sifCongested=sifCongested, sfddiSrfConditionsStatus=sfddiSrfConditionsStatus, sfddiSrfReportLimit=sfddiSrfReportLimit, igmpMIB=igmpMIB, srepeaterPortLinkPulse=srepeaterPortLinkPulse, hwDefType=hwDefType, atextport=atextport, sWorkGroupType=sWorkGroupType, fddismtTable=fddismtTable, debugOperation=debugOperation, ppeSmlUxRxCnt=ppeSmlUxRxCnt, sifRxPackets=sifRxPackets, sipxRouteEntry=sipxRouteEntry, debugIndex=debugIndex, strapEntry=strapEntry, sipxSapType=sipxSapType, sipcktState=sipcktState, ruleFilterTcpFragment=ruleFilterTcpFragment, stRootDelay=stRootDelay, filterThreshFlag=filterThreshFlag, lpbkErrorOffset=lpbkErrorOffset, ppeCpuUtilization=ppeCpuUtilization, atextportNetAddress=atextportNetAddress, ppeRipRouteDiscards=ppeRipRouteDiscards, filterPktCnts=filterPktCnts, sifUtilSysPeakReset=sifUtilSysPeakReset, meshCostChangeCount=meshCostChangeCount, sipmRouteEntry=sipmRouteEntry, sifFunctions=sifFunctions, swanLinkErrorPercentage=swanLinkErrorPercentage, strunkIfIndex=strunkIfIndex, profileSourceStart=profileSourceStart, ppeTraceroutePduMemoryAllocs=ppeTraceroutePduMemoryAllocs, ruleFilterIpOption=ruleFilterIpOption, sipmOutOfMemory=sipmOutOfMemory, sifDesigCost=sifDesigCost, filterFlags=filterFlags, suartAlignmentErrors=suartAlignmentErrors, atextportzipEntry=atextportzipEntry, sfddiOBSFuseBad=sfddiOBSFuseBad, swDesc=swDesc, ppeRipPduMemoryFailures=ppeRipPduMemoryFailures, sifIpGroupAddress=sifIpGroupAddress, ipMRouteSourceMask=ipMRouteSourceMask, sfddiStationDescriptor=sfddiStationDescriptor, filterDestEnd=filterDestEnd, addrMeshOverflows=addrMeshOverflows, sifCongestTime=sifCongestTime, sigma=sigma, ppeUxTxCnt=ppeUxTxCnt, ppeIgmpPduMemoryAllocs=ppeIgmpPduMemoryAllocs, sipxSapIndex=sipxSapIndex, spingMin=spingMin, ppeRouteMemorySize=ppeRouteMemorySize, sfddiShortAddressing=sfddiShortAddressing, sipxsfTable=sipxsfTable, sifThresholdTime=sifThresholdTime, sipxSapTable=sipxSapTable, srtb=srtb, smirrorCongestionDroppedPkts=smirrorCongestionDroppedPkts, addrMeshs=addrMeshs, stRootCost=stRootCost, strapText=strapText, sifTxAddr=sifTxAddr, spingMax=spingMax, debugBase=debugBase, nbCacheifEntry=nbCacheifEntry, sifRxHwFCSs=sifRxHwFCSs, sipxSapNodeId=sipxSapNodeId, igmpCacheExpiryTime=igmpCacheExpiryTime, strapControlTable=strapControlTable, sipmInBadPackets=sipmInBadPackets, spvcPathRX=spvcPathRX, ppeIpStatics=ppeIpStatics, sprotoAppleRoute=sprotoAppleRoute, sipmRouteMetric=sipmRouteMetric, snmpsmtUpstreamRsp=snmpsmtUpstreamRsp, sipxIfIndex=sipxIfIndex, sWorkGroupName=sWorkGroupName, nbCacheIfIndex=nbCacheIfIndex, swanDesiredSpeed=swanDesiredSpeed, snmpsmt=snmpsmt, slogEntryTable=slogEntryTable, smirrorTargetPortLists=smirrorTargetPortLists, configPowerAc2=configPowerAc2, filterPortNo=filterPortNo, sfddiIndex=sfddiIndex, ruleAllowIgp=ruleAllowIgp, lpbk=lpbk, atextportNetEnd=atextportNetEnd, strunkRemoteBridgeAddr=strunkRemoteBridgeAddr, sinterfaces=sinterfaces, filterThreshTime=filterThreshTime, sipmRouteOriginMask=sipmRouteOriginMask, rebootRouteMemory=rebootRouteMemory, sysTrapPort=sysTrapPort, sipxIfOutRipPkts=sipxIfOutRipPkts, sipxsfNetworks=sipxsfNetworks, ruleTcpEstProfile=ruleTcpEstProfile, lpbkPktLength=lpbkPktLength, igmpInterfaceStatus=igmpInterfaceStatus, swCount=swCount, sipmNeighborIfIndex=sipmNeighborIfIndex, straceOperation=straceOperation, hwUsePort=hwUsePort, sipxsfFiltered=sipxsfFiltered, sifExpectSqe=sifExpectSqe, spvcCircuitTX=spvcCircuitTX, sfddiTable=sfddiTable, swSizes=swSizes, srepeater=srepeater, sifDesigBridge=sifDesigBridge, ipMRoute=ipMRoute, srepeaterLinkStatusMask=srepeaterLinkStatusMask, sfddiSmtConditionsStatus=sfddiSmtConditionsStatus, filterMaxCount=filterMaxCount, mesh=mesh, sipxDiscardedServices=sipxDiscardedServices, sifTxStormFlag=sifTxStormFlag, lpbkIncrements=lpbkIncrements, addrRxFwdPkts=addrRxFwdPkts, sipxSapNetwork=sipxSapNetwork, sipxsfEntry=sipxsfEntry, ruleSourceIp=ruleSourceIp, sfddiSmtConditions=sfddiSmtConditions, sprotoTable=sprotoTable, slogTrap=slogTrap, sipNetToMediaIfIndex=sipNetToMediaIfIndex, swanOutPacketType=swanOutPacketType, sipxRouteNextHop=sipxRouteNextHop, sipxsfPortMap=sipxsfPortMap, slogEntry=slogEntry, sipxIfEntry=sipxIfEntry, filterLastSrc=filterLastSrc, spingNMSAddr=spingNMSAddr, sipcktIndex=sipcktIndex, smirrorRemoteStatus=smirrorRemoteStatus, sifRxChar0s=sifRxChar0s, ppeSnmpPduMemoryFailures=ppeSnmpPduMemoryFailures, swanLinkErrorDuration=swanLinkErrorDuration, lpbkTable=lpbkTable, sifThreshold=sifThreshold, strunkTable=strunkTable, sprotoAllTranslate=sprotoAllTranslate, igmpInterfaceEntry=igmpInterfaceEntry, ppeBootpPduMemoryAllocs=ppeBootpPduMemoryAllocs, hwPpeType=hwPpeType, straceDataTimeout=straceDataTimeout, ipMRouteGroup=ipMRouteGroup, sifUtilPortPeakReset=sifUtilPortPeakReset, slogFilter=slogFilter, sipmCacheMiss=sipmCacheMiss, srtrdiscState=srtrdiscState, sifUtilPortPeakEntry=sifUtilPortPeakEntry, meshCost=meshCost, ipMRouteInterfaceTable=ipMRouteInterfaceTable, igmpMIBObjects=igmpMIBObjects, configPowerDc1=configPowerDc1, snmpsmtUpstreamReq=snmpsmtUpstreamReq, sfddiDpcErrValue=sfddiDpcErrValue, sipxsfGrp=sipxsfGrp, ruleDestIpMask=ruleDestIpMask, sfddiStationState=sfddiStationState, straceTime=straceTime, sifRxQueueThreshTime=sifRxQueueThreshTime, sfddiDpcErrCnts=sfddiDpcErrCnts, sprotoArpProxy=sprotoArpProxy, ipMRouteMIB=ipMRouteMIB, straceWait=straceWait, stActMaxAge=stActMaxAge, spvcPhysPort=spvcPhysPort, sWorkGroupEntry=sWorkGroupEntry, ppeArpOverflows=ppeArpOverflows, sworkgroup=sworkgroup, ipMRouteSource=ipMRouteSource, configDumpStart=configDumpStart, spingNumReceived=spingNumReceived, sipNetToMediaTable=sipNetToMediaTable, sipmStatEntry=sipmStatEntry, srtrdiscEntry=srtrdiscEntry, igmpCacheIfIndex=igmpCacheIfIndex, debugLength=debugLength, sipxIfFraming=sipxIfFraming, fddismtUpstreamReq=fddismtUpstreamReq, sipxIfNetwork=sipxIfNetwork, hwPortSubType=hwPortSubType, srtrdisc=srtrdisc, addrOperation=addrOperation, swanLinkSubnet=swanLinkSubnet, suart=suart, filterFrame=filterFrame, hwType=hwType, filterAddID=filterAddID, ppeOspfPduMemoryFailures=ppeOspfPduMemoryFailures, debugEntry=debugEntry, sipxsfNextIndex=sipxsfNextIndex, addrIndex=addrIndex, reboot=reboot, ppeBootpPduMemoryFailures=ppeBootpPduMemoryFailures, atextportNetStart=atextportNetStart, ppeOspfPduMemoryAllocs=ppeOspfPduMemoryAllocs, addrAlarmMAC=addrAlarmMAC, sipxsrAgingTime=sipxsrAgingTime, sprotoIpxDot3Framing=sprotoIpxDot3Framing, sifFrameSwitching=sifFrameSwitching, swdisAccess=swdisAccess, sfddiRxParitys=sfddiRxParitys, sifInQLen=sifInQLen, strapEnabled=strapEnabled, ppeTxCongests=ppeTxCongests, sipmRouteGateway=sipmRouteGateway, ppeTraceroutePduMemoryFailures=ppeTraceroutePduMemoryFailures, sprotoIpxTranslate=sprotoIpxTranslate, lpbkErrorReceived=lpbkErrorReceived, strapEntryIndex=strapEntryIndex, srtrdiscPreference=srtrdiscPreference, igmpCacheAddress=igmpCacheAddress, sifUtilInterval=sifUtilInterval, nbcache=nbcache, addr=addr, sw=sw, addrTxChars=addrTxChars, snmpsmtUpstreamDescriptor=snmpsmtUpstreamDescriptor, swBases=swBases, stActHello=stActHello, ipMRouteInterfaceIfIndex=ipMRouteInterfaceIfIndex, strapRetry=strapRetry, suartPPPActive=suartPPPActive, sfddiDownstreamNbr=sfddiDownstreamNbr, swanOverrunErrors=swanOverrunErrors, srepeaterGroupID=srepeaterGroupID, rebootPortType=rebootPortType)
mibBuilder.exportSymbols("CTATX-MIB", sifUtilSysPeakIndex=sifUtilSysPeakIndex, ppeSnmpPduMemoryAllocs=ppeSnmpPduMemoryAllocs, swanAlignmentErrors=swanAlignmentErrors, configAlarmAddresses=configAlarmAddresses, ruleDestIp=ruleDestIp, ipMRouteRpfNeighbor=ipMRouteRpfNeighbor, sprotoBootpRelay=sprotoBootpRelay, suartBaud=suartBaud, meshCostChange=meshCostChange, sifPortCost=sifPortCost, sipxSapHopCount=sipxSapHopCount, atextportzipTable=atextportzipTable, atextportZonePort=atextportZonePort, configGetPass=configGetPass, strapTime=strapTime, filterDestMask=filterDestMask, filter=filter, sWorkGroupIpMask=sWorkGroupIpMask, ppeMgtMemoryAvail=ppeMgtMemoryAvail, strapNumber=strapNumber, srtbAgingTime=srtbAgingTime, addrRxPkts=addrRxPkts, debug=debug, hwAddr5=hwAddr5, srtbExplorer=srtbExplorer, sifUtilSysPeakTable=sifUtilSysPeakTable, smirrorOversizePkt=smirrorOversizePkt, sfddiThruB=sfddiThruB, swFilesetTable=swFilesetTable, hwInuse=hwInuse, admin=admin, srepeaterPortPortID=srepeaterPortPortID, sipxsrGrp=sipxsrGrp, sifMaxPacketSize=sifMaxPacketSize, filterSourceEnd=filterSourceEnd, hwAddr6=hwAddr6, sipmStatIfIndex=sipmStatIfIndex, configAuthenticationFailure=configAuthenticationFailure, sysTrapTime=sysTrapTime, sprotoBridge=sprotoBridge, debugStringID=debugStringID, filterIndex=filterIndex, swanLinkErrorMaxPeriods=swanLinkErrorMaxPeriods, ipMRouteInterfaceEntry=ipMRouteInterfaceEntry, ppeArpEntries=ppeArpEntries, sipxRouteHopCount=sipxRouteHopCount, ppeOspfPreference=ppeOspfPreference, sWorkGroupTable=sWorkGroupTable, slog=slog, hwSysBus=hwSysBus, straceState=straceState, straceHopAddress=straceHopAddress, srtrdiscTable=srtrdiscTable, configTprPriority=configTprPriority, profileSourceEnd=profileSourceEnd, ruleAllowEgp=ruleAllowEgp, straceDestAddr=straceDestAddr, swdisConfigTotalTimeout=swdisConfigTotalTimeout, addrDynamicMax=addrDynamicMax, Boolean=Boolean, sipmgroup=sipmgroup, straceHop=straceHop, filterMask=filterMask, straceMaxTTL=straceMaxTTL, sipmNeighbors=sipmNeighbors, ppeTftpPduMemoryAllocs=ppeTftpPduMemoryAllocs, sifTxCongests=sifTxCongests, sifIpRipPortMetric=sifIpRipPortMetric, sifUtilSysPeakTimestamp=sifUtilSysPeakTimestamp, filterDeleteID=filterDeleteID, srtrdiscIfIndex=srtrdiscIfIndex, sfddiRxShorts=sfddiRxShorts, suartModem=suartModem, sprotoArpSourceRoute=sprotoArpSourceRoute, sipxIfInSapPkts=sipxIfInSapPkts, sipx=sipx, strunkLinkOrdinal=strunkLinkOrdinal, stRootID=stRootID, swanIndex=swanIndex, strace=strace, sprotoTrunking=sprotoTrunking, configAlarmDynamic=configAlarmDynamic, atextsysOperState=atextsysOperState, swFileset=swFileset, sprotoOspf=sprotoOspf, spvcMinPort=spvcMinPort, sifIpAddress=sifIpAddress, ppeRipPreference=ppeRipPreference, ipMRouteEntry=ipMRouteEntry, configPowerAc1=configPowerAc1, sifDesigRoot=sifDesigRoot, sifTxStormCnt=sifTxStormCnt, atextportTable=atextportTable, lpbkPktNum=lpbkPktNum, swanPreserveFCS=swanPreserveFCS, rebootEntry=rebootEntry, stTopChangeCount=stTopChangeCount, igmp=igmp, sifUtilSysPeakTBitRate=sifUtilSysPeakTBitRate, ppeStaticPreference=ppeStaticPreference, sipcktNetMask=sipcktNetMask, straceProbe=straceProbe, addrDynamicOverflows=addrDynamicOverflows, sprotoRip=sprotoRip, sifRxQueueThresh=sifRxQueueThresh, sifFilterFlags=sifFilterFlags, sysID=sysID, strapSeverity=strapSeverity, smirror=smirror, swFlashBank=swFlashBank, sifUtilPortPeakRBitRate=sifUtilPortPeakRBitRate, sprotoEntry=sprotoEntry, spvcTable=spvcTable, ppeExtendStats=ppeExtendStats, sfddiRxEbits=sfddiRxEbits, configDumpEnd=configDumpEnd, strapEntryText=strapEntryText, slogEntryMessageText=slogEntryMessageText, strunkRemoteIp=strunkRemoteIp, st=st, igmpCacheStatus=igmpCacheStatus, strapEntryNumber=strapEntryNumber, ppe=ppe, ppeMgtMemorySize=ppeMgtMemorySize, ipMRoutePkts=ipMRoutePkts, ppeArpStatics=ppeArpStatics, igmpInterfaceTable=igmpInterfaceTable, ruleIndex=ruleIndex, configPowerDc2=configPowerDc2, smirrorRemoteExitPort=smirrorRemoteExitPort, hwDiagCode=hwDiagCode, sifUtilPortPeakTBitRate=sifUtilPortPeakTBitRate, sifRxChar1s=sifRxChar1s, ppeArpPduMemoryFailures=ppeArpPduMemoryFailures, hwNumber=hwNumber, hwFatalErr=hwFatalErr, hwRptrPorts=hwRptrPorts, stBridgeId=stBridgeId, swanTable=swanTable, sipcktEntry=sipcktEntry, sprotoIbm8209Lsaps=sprotoIbm8209Lsaps, sprotoNetbiosTranslate=sprotoNetbiosTranslate, addrMAC=addrMAC, hwIndex=hwIndex, atextportZone=atextportZone, sprotoIbmLlcTranslate=sprotoIbmLlcTranslate, sipmneighbor=sipmneighbor, sipxDiscardedRoutes=sipxDiscardedRoutes, ppeIcmpPduMemoryAllocs=ppeIcmpPduMemoryAllocs, configDumpModule=configDumpModule, ipMRouteNextHopState=ipMRouteNextHopState, addrPort=addrPort, sproto=sproto, sprotoSuppressBpdus=sprotoSuppressBpdus, profileDestEnd=profileDestEnd, sfddiSrfConditions=sfddiSrfConditions, sipmNeighborLastHeard=sipmNeighborLastHeard, sipxIfOutSapPkts=sipxIfOutSapPkts, ruleFilterUdpFragment=ruleFilterUdpFragment, debugTable=debugTable, sipmStatTable=sipmStatTable, hwManufData=hwManufData, fddismtEntry=fddismtEntry, swIndex=swIndex, sWorkGroupIpAddress=sWorkGroupIpAddress, sfddi=sfddi, sifUX=sifUX, spingCount=spingCount, sifStPriority=sifStPriority, lpbkErrorSent=lpbkErrorSent, swdisWriteStatus=swdisWriteStatus, sipxsrExplorerType=sipxsrExplorerType, strapSeverityControl=strapSeverityControl, ipMRouteMIBObjects=ipMRouteMIBObjects, ppeRouteMemoryFailures=ppeRouteMemoryFailures, addrDynamics=addrDynamics, hwAddr3=hwAddr3, sipmNeighborTable=sipmNeighborTable, sprotoSteHopCountAppliedRule=sprotoSteHopCountAppliedRule, spvcEntry=spvcEntry, smirrorExitFilteredPkts=smirrorExitFilteredPkts, lpbkDestAddr=lpbkDestAddr, slogEntryName=slogEntryName, filterID=filterID, swan=swan, hwDiagStatus=hwDiagStatus, addrRxChars=addrRxChars, srtrdiscLifetime=srtrdiscLifetime, smirrorEntryFilteredPkts=smirrorEntryFilteredPkts, sifUtilSysPeakRBitRate=sifUtilSysPeakRBitRate, rebootUseMod=rebootUseMod, addrStatics=addrStatics, sifErrorsFlag=sifErrorsFlag, suartTable=suartTable, sipxRouteTickCount=sipxRouteTickCount, srtrdiscAdvertisementAddress=srtrdiscAdvertisementAddress, sWorkGroupNumber=sWorkGroupNumber, sfddiSBFlag=sfddiSBFlag, strap=strap, atextsystem=atextsystem, ruleAllowAnyOther=ruleAllowAnyOther, stRootMaxAge=stRootMaxAge, smirrorNowrapperDroppedPkts=smirrorNowrapperDroppedPkts, fddismtIndex=fddismtIndex, sfddiRxHwAborts=sfddiRxHwAborts, ppeMgtMemoryFailures=ppeMgtMemoryFailures, stRootPort=stRootPort, igmpCacheSelf=igmpCacheSelf, strapControl=strapControl, sipxsrStatus=sipxsrStatus, strapEntryTimeStamp=strapEntryTimeStamp, sWorkGroupCurrentCount=sWorkGroupCurrentCount, suartEntry=suartEntry, sipxsrExplorerEntry=sipxsrExplorerEntry, ipMRouteInIfIndex=ipMRouteInIfIndex, igmpInterfaceQueryInterval=igmpInterfaceQueryInterval, spingEntry=spingEntry, ruleTcpProfile=ruleTcpProfile, sifRxQueues=sifRxQueues, ruleAllowIpWithinIp=ruleAllowIpWithinIp, smirrorIPaddr=smirrorIPaddr, rebootSlotTable=rebootSlotTable, lma=lma, spingOperation=spingOperation, sipxSapEntry=sipxSapEntry, swdis=swdis, configStorageFailure=configStorageFailure, profileType=profileType, sprotoIpMulticast=sprotoIpMulticast, sipm=sipm, ppeIpEntries=ppeIpEntries, ipMRouteOctets=ipMRouteOctets, sifUtilCount=sifUtilCount, igmpCacheEntry=igmpCacheEntry, swanPPPActive=swanPPPActive, sprotoIpxRoute=sprotoIpxRoute, hwSlotTable=hwSlotTable, ipMRouteEnable=ipMRouteEnable, spingDestAddr=spingDestAddr, filterDest=filterDest, lpbkOperation=lpbkOperation, hwSysProcessor=hwSysProcessor, snmpsmtUpstreamState=snmpsmtUpstreamState, stTopChange=stTopChange, sys=sys, hwEntry=hwEntry, config=config, stResAddr=stResAddr, sfddiFrameErrorThreshold=sfddiFrameErrorThreshold, sifUtilPortPeakTable=sifUtilPortPeakTable, sipxRouteTable=sipxRouteTable, smirrorExitMirroredPkts=smirrorExitMirroredPkts, spingDataTimeout=spingDataTimeout, strunkLastError=strunkLastError)
mibBuilder.exportSymbols("CTATX-MIB", spingTable=spingTable, sysReset=sysReset, configFatalErr=configFatalErr, sifTxPackets=sifTxPackets, swanIpNeighborAddress=swanIpNeighborAddress, fddismtUpstreamState=fddismtUpstreamState, sipxRouteDest=sipxRouteDest, sipNetToMediaAge=sipNetToMediaAge, hwDefPortType=hwDefPortType, sipxsfSAPName=sipxsfSAPName, smirrorEntryMirroredPkts=smirrorEntryMirroredPkts, swanLinkRestartTime=swanLinkRestartTime, smirrorStatus=smirrorStatus, nbCacheifTable=nbCacheifTable, ruleAllowOspf=ruleAllowOspf, hwFirstPort=hwFirstPort, atextportIndex=atextportIndex, meshCostPercent=meshCostPercent, lmaAllAddr=lmaAllAddr, ppeBridgingMemory=ppeBridgingMemory, atextportZoneIndex=atextportZoneIndex, rebootConfig=rebootConfig, swanLinkPort=swanLinkPort, strapTable=strapTable, strapIncludeText=strapIncludeText, stGroupAddr=stGroupAddr, spvcMaxPort=spvcMaxPort, sprotoIfIndex=sprotoIfIndex, spvcPathTX=spvcPathTX, sifUtilPortPeakIndex=sifUtilPortPeakIndex, filterEntry=filterEntry, profileEntry=profileEntry, sipmroute=sipmroute, lpbkErrorBadReceives=lpbkErrorBadReceives, ppeRouteMemoryAvail=ppeRouteMemoryAvail, strapEntrySeverity=strapEntrySeverity, sifQueueTime=sifQueueTime, addrRxMultiPkts=addrRxMultiPkts, sifRingDrops=sifRingDrops, sprotoIpxSrTranslate=sprotoIpxSrTranslate, sipmRouteTable=sipmRouteTable, sWorkGroupPorts=sWorkGroupPorts, hwAddr7=hwAddr7, hwUseMod=hwUseMod, smirrorNotreadyDroppedPkts=smirrorNotreadyDroppedPkts, spingState=spingState, swanPortType=swanPortType, swanMeshState=swanMeshState, swdisConfigRetryTime=swdisConfigRetryTime, straceEntry=straceEntry, sifTxStorms=sifTxStorms, stRootHello=stRootHello, meshCostChangeTime=meshCostChangeTime, filterComboType=filterComboType, rebootBridgingMemory=rebootBridgingMemory, sfddiTxAsync=sfddiTxAsync, sipmRouteParents=sipmRouteParents, sipxsrExplorerTable=sipxsrExplorerTable, ppeOspfRouteDiscards=ppeOspfRouteDiscards, sfddiEntry=sfddiEntry, sipckt=sipckt, sWorkGroupMaxCount=sWorkGroupMaxCount, spingNumTransmitted=spingNumTransmitted, configPowerPresent2=configPowerPresent2, lpbkErrorNoReceives=lpbkErrorNoReceives, sipxSapSocket=sipxSapSocket, configAnyPass=configAnyPass, filterField=filterField, ipMRouteRpfFails=ipMRouteRpfFails, sipNetToMediaEntry=sipNetToMediaEntry, sipcktSourceRoute=sipcktSourceRoute, sipxSapName=sipxSapName, straceNMSAddr=straceNMSAddr, configPowerPresent1=configPowerPresent1, spvcState=spvcState, ipMRouteInterfaceTtl=ipMRouteInterfaceTtl, sifRxSizeErrors=sifRxSizeErrors, ruleAllowIcmp=ruleAllowIcmp, ppeRoutePercent=ppeRoutePercent, debugString=debugString, swNumber=swNumber, addrBlock=addrBlock, filterNextID=filterNextID, filterAddIndex=filterAddIndex, sfddiRbcErrValue=sfddiRbcErrValue, spvcIfIndex=spvcIfIndex, ppeIcmpPduMemoryFailures=ppeIcmpPduMemoryFailures, sifLan=sifLan, ppeLrgUxRxCnt=ppeLrgUxRxCnt, ppePacketMemorySize=ppePacketMemorySize, addrBlockSize=addrBlockSize, sprotoArpTranslate=sprotoArpTranslate, addrPortMap=addrPortMap, sifIndex=sifIndex, sifTxDests=sifTxDests, swanNegotiate=swanNegotiate, profileTable=profileTable, sprotoEgp=sprotoEgp, swanLinkBridge=swanLinkBridge, filterOffset=filterOffset, ruleUdpProfile=ruleUdpProfile, hwAddr8=hwAddr8, atext=atext, filterCurrentCount=filterCurrentCount, straceNumProbes=straceNumProbes, meshSubnet=meshSubnet, ruleType=ruleType, srepeaterExtendedStats=srepeaterExtendedStats, sipmRouteOrigin=sipmRouteOrigin, sipxRouteIfIndex=sipxRouteIfIndex, strunk=strunk, ppeBAddrLimit=ppeBAddrLimit, igmpCacheTable=igmpCacheTable, ruleSourceIpMask=ruleSourceIpMask, spingTimeout=spingTimeout, atextportEntry=atextportEntry, configNMSAddress=configNMSAddress, sipxsrPort=sipxsrPort, ruleAllowIgrp=ruleAllowIgrp, sipcktTable=sipcktTable, srepeaterPortGroupID=srepeaterPortGroupID, sifState=sifState, straceDataSize=straceDataSize, sifDescr=sifDescr, stAgeTime=stAgeTime, filterSrcLan=filterSrcLan, srtrdiscAdvertisementInterval=srtrdiscAdvertisementInterval, ppeArpPduMemoryAllocs=ppeArpPduMemoryAllocs, stActDelay=stActDelay, slogEntryNumber=slogEntryNumber, suartIpNeighborAddress=suartIpNeighborAddress, sysTrapAck=sysTrapAck, sipmstat=sipmstat, sipmRouteAge=sipmRouteAge, ppeIgmpPduMemoryFailures=ppeIgmpPduMemoryFailures, strapSeverityEnable=strapSeverityEnable, spvc=spvc, sifUxTxCnt=sifUxTxCnt, srepeaterTable=srepeaterTable, strapIndex=strapIndex, ppePacketMemoryAvail=ppePacketMemoryAvail, strapSeverityControlTable=strapSeverityControlTable, ipMRouteTable=ipMRouteTable, sprotoIpRoute=sprotoIpRoute, ppeSmlBuffSize=ppeSmlBuffSize, addrAge=addrAge, sipxsfFilterType=sipxsfFilterType, sifDesigPort=sifDesigPort, suartOverrunErrors=suartOverrunErrors, srepeaterPortTable=srepeaterPortTable, filterThreshold=filterThreshold, igmpCacheUpTime=igmpCacheUpTime, lpbkIndex=lpbkIndex, ipMRouteUpTime=ipMRouteUpTime, sipNetToMediaNetAddress=sipNetToMediaNetAddress, lmaAnyAddr=lmaAnyAddr, spvcCircuitRX=spvcCircuitRX, sysTrapRetry=sysTrapRetry, swanActualSpeed=swanActualSpeed, ecs_1=ecs_1, sifTxStormTime=sifTxStormTime, sipxRouteAge=sipxRouteAge, swTypes=swTypes, swanDCEDrops=swanDCEDrops, spingAvg=spingAvg, strunkState=strunkState, swanEntry=swanEntry, spingWait=spingWait, suartIndex=suartIndex, sifUtilPortPeakBRTimestamp=sifUtilPortPeakBRTimestamp, ppeAresAsStes=ppeAresAsStes, ipMRouteExpiryTime=ipMRouteExpiryTime, sifSmlRxCnt=sifSmlRxCnt, hwAddr1=hwAddr1, sifUtilPortPeakOrdinal=sifUtilPortPeakOrdinal, swdisDesc=swdisDesc, lpbkGoods=lpbkGoods, sifStatisticsTime=sifStatisticsTime, sifTxSizes=sifTxSizes, smirrorDiagPort=smirrorDiagPort, slogIndex=slogIndex, igmpInterfaceIfIndex=igmpInterfaceIfIndex, slogOverwrite=slogOverwrite, rebootIndex=rebootIndex, sifFilterLocal=sifFilterLocal, srepeaterPortEntry=srepeaterPortEntry, profileIndex=profileIndex, filterSource=filterSource, srepeaterEntry=srepeaterEntry, ppeRipPduMemoryAllocs=ppeRipPduMemoryAllocs, sipxIfInRipPkts=sipxIfInRipPkts, strunkLinkCount=strunkLinkCount, hwAddr4=hwAddr4, swanLinkCost=swanLinkCost, sipxsfAccessMode=sipxsfAccessMode, nbCacheIfOperStatus=nbCacheIfOperStatus, sifEntry=sifEntry, fddismtUpstreamRsp=fddismtUpstreamRsp, strapSeveritySeverity=strapSeveritySeverity, strunkEntry=strunkEntry, ppePacketMemoryFailures=ppePacketMemoryFailures, ruleEntry=ruleEntry, strunkLastChange=strunkLastChange, hwTempOK=hwTempOK, sifUtilSysPeakOrdinal=sifUtilSysPeakOrdinal, swStarts=swStarts, ipMRouteOutList=ipMRouteOutList, configFunctions=configFunctions, sipNetToMediaSourceRoute=sipNetToMediaSourceRoute, filterSourceMask=filterSourceMask, sWorkGroupNextNumber=sWorkGroupNextNumber, sifUtilSysPeakEntry=sifUtilSysPeakEntry, swanSwitches=swanSwitches, stTopChangeTime=stTopChangeTime, sipxIfTable=sipxIfTable, hwPortType=hwPortType, lpbkInterval=lpbkInterval, debugData=debugData, sfddiRbcErrCnts=sfddiRbcErrCnts, sfddiNotCopiedThreshold=sfddiNotCopiedThreshold, sfddiSMTBufferSize=sfddiSMTBufferSize, sifAdapterChecks=sifAdapterChecks, sifLrgRxCnt=sifLrgRxCnt, addrTxPkts=addrTxPkts, profileDestStart=profileDestStart, igmpCacheLastReporter=igmpCacheLastReporter, lpbkErrorSize=lpbkErrorSize, spingDataSize=spingDataSize, configFddiPriority=configFddiPriority, fddismtUpstreamDescriptor=fddismtUpstreamDescriptor, sping=sping, filterTable=filterTable, slogEntryTimeStamp=slogEntryTimeStamp, lpbkEntry=lpbkEntry, hw=hw, sifTable=sifTable)
