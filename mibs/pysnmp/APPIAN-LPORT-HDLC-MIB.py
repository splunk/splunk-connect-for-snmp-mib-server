#
# PySNMP MIB module APPIAN-LPORT-HDLC-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/APPIAN-LPORT-HDLC-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 17:07:53 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
AcSlotNumber, AcNodeId, acLport = mibBuilder.importSymbols("APPIAN-SMI-MIB", "AcSlotNumber", "AcNodeId", "acLport")
ObjectIdentifier, OctetString, Integer = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "OctetString", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueSizeConstraint, SingleValueConstraint, ConstraintsUnion, ConstraintsIntersection, ValueRangeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueSizeConstraint", "SingleValueConstraint", "ConstraintsUnion", "ConstraintsIntersection", "ValueRangeConstraint")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
IpAddress, NotificationType, MibIdentifier, Counter64, Counter32, ModuleIdentity, Integer32, Bits, ObjectIdentity, MibScalar, MibTable, MibTableRow, MibTableColumn, Unsigned32, TimeTicks, iso, Gauge32 = mibBuilder.importSymbols("SNMPv2-SMI", "IpAddress", "NotificationType", "MibIdentifier", "Counter64", "Counter32", "ModuleIdentity", "Integer32", "Bits", "ObjectIdentity", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Unsigned32", "TimeTicks", "iso", "Gauge32")
TextualConvention, TruthValue, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "TruthValue", "DisplayString")
acLogicalHdlc = ModuleIdentity((1, 3, 6, 1, 4, 1, 2785, 2, 4, 4))
acLogicalHdlc.setRevisions(('1900-02-01 00:00',))
if mibBuilder.loadTexts: acLogicalHdlc.setLastUpdated('0003190000Z')
if mibBuilder.loadTexts: acLogicalHdlc.setOrganization('Appian Communications, Inc.')
acLogicalHdlcTable = MibTable((1, 3, 6, 1, 4, 1, 2785, 2, 4, 4, 1), )
if mibBuilder.loadTexts: acLogicalHdlcTable.setStatus('current')
acLogicalHdlcEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2785, 2, 4, 4, 1, 1), ).setIndexNames((0, "APPIAN-LPORT-HDLC-MIB", "acLogicalHdlcNodeId"), (0, "APPIAN-LPORT-HDLC-MIB", "acLogicalHdlcSlot"), (0, "APPIAN-LPORT-HDLC-MIB", "acLogicalHdlcType"), (0, "APPIAN-LPORT-HDLC-MIB", "acLogicalHdlcIndex"))
if mibBuilder.loadTexts: acLogicalHdlcEntry.setStatus('current')
acLogicalHdlcNodeId = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 4, 4, 1, 1, 1), AcNodeId()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: acLogicalHdlcNodeId.setStatus('current')
acLogicalHdlcSlot = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 4, 4, 1, 1, 2), AcSlotNumber()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: acLogicalHdlcSlot.setStatus('current')
acLogicalHdlcType = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 4, 4, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("ds1", 1), ("ds3", 2), ("dcc", 3)))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: acLogicalHdlcType.setStatus('current')
acLogicalHdlcIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 4, 4, 1, 1, 4), Integer32()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: acLogicalHdlcIndex.setStatus('current')
acLogicalHdlcStatsReset = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 4, 4, 1, 1, 5), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acLogicalHdlcStatsReset.setStatus('current')
acLogicalHdlcRxFifoOverrun = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 4, 4, 1, 1, 6), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acLogicalHdlcRxFifoOverrun.setStatus('current')
acLogicalHdlcRxMaxPktLenViolation = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 4, 4, 1, 1, 7), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acLogicalHdlcRxMaxPktLenViolation.setStatus('current')
acLogicalHdlcRxFCSError = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 4, 4, 1, 1, 8), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acLogicalHdlcRxFCSError.setStatus('current')
acLogicalHdlcRxNonOctetAligned = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 4, 4, 1, 1, 9), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acLogicalHdlcRxNonOctetAligned.setStatus('current')
acLogicalHdlcRxHdlcPktAbort = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 4, 4, 1, 1, 10), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acLogicalHdlcRxHdlcPktAbort.setStatus('current')
acLogicalHdlcRxBufferStarvation = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 4, 4, 1, 1, 11), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acLogicalHdlcRxBufferStarvation.setStatus('current')
acLogicalHdlcTxFifoUnderrun = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 4, 4, 1, 1, 12), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acLogicalHdlcTxFifoUnderrun.setStatus('current')
acLogicalHdlcRxBundleDiscardDupSeq = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 4, 4, 1, 1, 13), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acLogicalHdlcRxBundleDiscardDupSeq.setStatus('current')
acLogicalHdlcRxBundleDiscardMissSeq = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 4, 4, 1, 1, 14), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acLogicalHdlcRxBundleDiscardMissSeq.setStatus('current')
acLogicalHdlcRxBundleDiscardQDepth = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 4, 4, 1, 1, 15), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acLogicalHdlcRxBundleDiscardQDepth.setStatus('current')
acLogicalHdlcIngressRxFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 4, 4, 1, 1, 16), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acLogicalHdlcIngressRxFrames.setStatus('current')
acLogicalHdlcEgressTxFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 4, 4, 1, 1, 17), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acLogicalHdlcEgressTxFrames.setStatus('current')
mibBuilder.exportSymbols("APPIAN-LPORT-HDLC-MIB", acLogicalHdlcRxBundleDiscardMissSeq=acLogicalHdlcRxBundleDiscardMissSeq, PYSNMP_MODULE_ID=acLogicalHdlc, acLogicalHdlc=acLogicalHdlc, acLogicalHdlcEntry=acLogicalHdlcEntry, acLogicalHdlcIngressRxFrames=acLogicalHdlcIngressRxFrames, acLogicalHdlcRxFifoOverrun=acLogicalHdlcRxFifoOverrun, acLogicalHdlcType=acLogicalHdlcType, acLogicalHdlcNodeId=acLogicalHdlcNodeId, acLogicalHdlcIndex=acLogicalHdlcIndex, acLogicalHdlcRxMaxPktLenViolation=acLogicalHdlcRxMaxPktLenViolation, acLogicalHdlcRxBundleDiscardQDepth=acLogicalHdlcRxBundleDiscardQDepth, acLogicalHdlcStatsReset=acLogicalHdlcStatsReset, acLogicalHdlcRxFCSError=acLogicalHdlcRxFCSError, acLogicalHdlcRxNonOctetAligned=acLogicalHdlcRxNonOctetAligned, acLogicalHdlcTxFifoUnderrun=acLogicalHdlcTxFifoUnderrun, acLogicalHdlcRxHdlcPktAbort=acLogicalHdlcRxHdlcPktAbort, acLogicalHdlcEgressTxFrames=acLogicalHdlcEgressTxFrames, acLogicalHdlcRxBundleDiscardDupSeq=acLogicalHdlcRxBundleDiscardDupSeq, acLogicalHdlcTable=acLogicalHdlcTable, acLogicalHdlcRxBufferStarvation=acLogicalHdlcRxBufferStarvation, acLogicalHdlcSlot=acLogicalHdlcSlot)
