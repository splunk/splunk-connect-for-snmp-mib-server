#
# PySNMP MIB module LINKSYS-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/LINKSYS-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 19:56:50 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, OctetString, Integer = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "OctetString", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsUnion, ConstraintsIntersection, SingleValueConstraint, ValueRangeConstraint, ValueSizeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsUnion", "ConstraintsIntersection", "SingleValueConstraint", "ValueRangeConstraint", "ValueSizeConstraint")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
MibScalar, MibTable, MibTableRow, MibTableColumn, Unsigned32, MibIdentifier, Bits, enterprises, ModuleIdentity, IpAddress, Gauge32, iso, TimeTicks, NotificationType, ObjectIdentity, Counter64, Integer32, Counter32 = mibBuilder.importSymbols("SNMPv2-SMI", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Unsigned32", "MibIdentifier", "Bits", "enterprises", "ModuleIdentity", "IpAddress", "Gauge32", "iso", "TimeTicks", "NotificationType", "ObjectIdentity", "Counter64", "Integer32", "Counter32")
TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString")
linksys = MibIdentifier((1, 3, 6, 1, 4, 1, 3955))
deviceId = MibScalar((1, 3, 6, 1, 4, 1, 3955, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("isEtherHub", 1), ("isFastEtherHub", 2), ("isDualSpeedHub", 3), ("isNwayEtherSwitch", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: deviceId.setStatus('mandatory')
etherHub = MibIdentifier((1, 3, 6, 1, 4, 1, 3955, 5))
ehHwVer = MibScalar((1, 3, 6, 1, 4, 1, 3955, 5, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ehHwVer.setStatus('mandatory')
ehSwVer = MibScalar((1, 3, 6, 1, 4, 1, 3955, 5, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ehSwVer.setStatus('mandatory')
ehNumber = MibScalar((1, 3, 6, 1, 4, 1, 3955, 5, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ehNumber.setStatus('mandatory')
sp2Hub = MibIdentifier((1, 3, 6, 1, 4, 1, 3955, 5, 5))
sp2Statistic = MibIdentifier((1, 3, 6, 1, 4, 1, 3955, 5, 5, 1))
sp2Control = MibTable((1, 3, 6, 1, 4, 1, 3955, 5, 5, 2), )
if mibBuilder.loadTexts: sp2Control.setStatus('mandatory')
sp2Status = MibTable((1, 3, 6, 1, 4, 1, 3955, 5, 5, 3), )
if mibBuilder.loadTexts: sp2Status.setStatus('mandatory')
sp2Ports = MibTable((1, 3, 6, 1, 4, 1, 3955, 5, 5, 4), )
if mibBuilder.loadTexts: sp2Ports.setStatus('mandatory')
statsOctets = MibScalar((1, 3, 6, 1, 4, 1, 3955, 5, 5, 1, 1), Counter64()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: statsOctets.setStatus('mandatory')
statsPkts = MibScalar((1, 3, 6, 1, 4, 1, 3955, 5, 5, 1, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: statsPkts.setStatus('mandatory')
statsBroadcastPkts = MibScalar((1, 3, 6, 1, 4, 1, 3955, 5, 5, 1, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: statsBroadcastPkts.setStatus('mandatory')
statsMulticastPkts = MibScalar((1, 3, 6, 1, 4, 1, 3955, 5, 5, 1, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: statsMulticastPkts.setStatus('mandatory')
statsCrcAlignErrors = MibScalar((1, 3, 6, 1, 4, 1, 3955, 5, 5, 1, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: statsCrcAlignErrors.setStatus('mandatory')
statsUndersizePkts = MibScalar((1, 3, 6, 1, 4, 1, 3955, 5, 5, 1, 6), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: statsUndersizePkts.setStatus('mandatory')
statsOversizePkts = MibScalar((1, 3, 6, 1, 4, 1, 3955, 5, 5, 1, 7), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: statsOversizePkts.setStatus('mandatory')
statsFragments = MibScalar((1, 3, 6, 1, 4, 1, 3955, 5, 5, 1, 8), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: statsFragments.setStatus('mandatory')
statsJabbers = MibScalar((1, 3, 6, 1, 4, 1, 3955, 5, 5, 1, 9), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: statsJabbers.setStatus('mandatory')
statsCollisions = MibScalar((1, 3, 6, 1, 4, 1, 3955, 5, 5, 1, 10), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: statsCollisions.setStatus('mandatory')
statsPkts64Octets = MibScalar((1, 3, 6, 1, 4, 1, 3955, 5, 5, 1, 11), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: statsPkts64Octets.setStatus('mandatory')
statsPkts65to127Octets = MibScalar((1, 3, 6, 1, 4, 1, 3955, 5, 5, 1, 12), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: statsPkts65to127Octets.setStatus('mandatory')
statsPkts128to255Octets = MibScalar((1, 3, 6, 1, 4, 1, 3955, 5, 5, 1, 13), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: statsPkts128to255Octets.setStatus('mandatory')
statsPkts256to511Octets = MibScalar((1, 3, 6, 1, 4, 1, 3955, 5, 5, 1, 14), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: statsPkts256to511Octets.setStatus('mandatory')
statsPkts512to1023Octets = MibScalar((1, 3, 6, 1, 4, 1, 3955, 5, 5, 1, 15), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: statsPkts512to1023Octets.setStatus('mandatory')
statsPkts1024to1518Octets = MibScalar((1, 3, 6, 1, 4, 1, 3955, 5, 5, 1, 16), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: statsPkts1024to1518Octets.setStatus('mandatory')
statsTotalValidOctets = MibScalar((1, 3, 6, 1, 4, 1, 3955, 5, 5, 1, 17), Counter64()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: statsTotalValidOctets.setStatus('mandatory')
resetModule = MibScalar((1, 3, 6, 1, 4, 1, 3955, 5, 5, 2, 1), Integer32()).setMaxAccess("writeonly")
if mibBuilder.loadTexts: resetModule.setStatus('mandatory')
sp2CtlEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3955, 5, 5, 2, 2), ).setIndexNames((0, "LINKSYS-MIB", "ctlHubIdx"), (0, "LINKSYS-MIB", "ctlPortIdx"))
if mibBuilder.loadTexts: sp2CtlEntry.setStatus('deprecated')
ctlHubIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 3955, 5, 5, 2, 2, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctlHubIdx.setStatus('deprecated')
ctlPortIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 3955, 5, 5, 2, 2, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctlPortIdx.setStatus('deprecated')
enable = MibTableColumn((1, 3, 6, 1, 4, 1, 3955, 5, 5, 2, 2, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 0, -1))).clone(namedValues=NamedValues(("enable", 1), ("disable", 0), ("na", -1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: enable.setStatus('mandatory')
linkEn = MibTableColumn((1, 3, 6, 1, 4, 1, 3955, 5, 5, 2, 2, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 0, -1))).clone(namedValues=NamedValues(("enable", 1), ("disable", 0), ("na", -1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: linkEn.setStatus('mandatory')
speedSet = MibTableColumn((1, 3, 6, 1, 4, 1, 3955, 5, 5, 2, 2, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(-1, 0, 1, 3))).clone(namedValues=NamedValues(("na", -1), ("nway", 0), ("ether10", 1), ("ether100", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: speedSet.setStatus('mandatory')
nwayEn = MibTableColumn((1, 3, 6, 1, 4, 1, 3955, 5, 5, 2, 2, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 0, -1))).clone(namedValues=NamedValues(("enable", 1), ("disable", 0), ("na", -1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nwayEn.setStatus('mandatory')
nwayRestart = MibTableColumn((1, 3, 6, 1, 4, 1, 3955, 5, 5, 2, 2, 7), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nwayRestart.setStatus('mandatory')
sp2StEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3955, 5, 5, 3, 1), ).setIndexNames((0, "LINKSYS-MIB", "statHubIdx"), (0, "LINKSYS-MIB", "statPortIdx"))
if mibBuilder.loadTexts: sp2StEntry.setStatus('mandatory')
statHubIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 3955, 5, 5, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: statHubIdx.setStatus('deprecated')
statPortIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 3955, 5, 5, 3, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: statPortIdx.setStatus('deprecated')
linkSt = MibTableColumn((1, 3, 6, 1, 4, 1, 3955, 5, 5, 3, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(-1, 0, 1))).clone(namedValues=NamedValues(("na", -1), ("fail", 0), ("good", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: linkSt.setStatus('mandatory')
polaritySt = MibTableColumn((1, 3, 6, 1, 4, 1, 3955, 5, 5, 3, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(-1, 0, 1))).clone(namedValues=NamedValues(("na", -1), ("straight", 0), ("cross", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: polaritySt.setStatus('mandatory')
partitionSt = MibTableColumn((1, 3, 6, 1, 4, 1, 3955, 5, 5, 3, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(-1, 0, 1))).clone(namedValues=NamedValues(("na", -1), ("yes", 0), ("no", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: partitionSt.setStatus('mandatory')
speedSt = MibTableColumn((1, 3, 6, 1, 4, 1, 3955, 5, 5, 3, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(-1, 0, 1))).clone(namedValues=NamedValues(("na", -1), ("is10M", 0), ("is100M", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: speedSt.setStatus('mandatory')
nwayPartner = MibTableColumn((1, 3, 6, 1, 4, 1, 3955, 5, 5, 3, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(-1, 0, 1))).clone(namedValues=NamedValues(("na", -1), ("no", 0), ("yes", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nwayPartner.setStatus('mandatory')
counterEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3955, 5, 5, 4, 1), ).setIndexNames((0, "LINKSYS-MIB", "cntHubIdx"), (0, "LINKSYS-MIB", "cntPortIdx"))
if mibBuilder.loadTexts: counterEntry.setStatus('mandatory')
cntHubIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 3955, 5, 5, 4, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cntHubIdx.setStatus('deprecated')
cntPortIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 3955, 5, 5, 4, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cntPortIdx.setStatus('mandatory')
portReadableFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 3955, 5, 5, 4, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: portReadableFrames.setStatus('mandatory')
portReadableOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 3955, 5, 5, 4, 1, 4), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: portReadableOctets.setStatus('mandatory')
portFrameCheckSequence = MibTableColumn((1, 3, 6, 1, 4, 1, 3955, 5, 5, 4, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: portFrameCheckSequence.setStatus('mandatory')
portAlignmentErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 3955, 5, 5, 4, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: portAlignmentErrors.setStatus('mandatory')
portFramesTooLong = MibTableColumn((1, 3, 6, 1, 4, 1, 3955, 5, 5, 4, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: portFramesTooLong.setStatus('mandatory')
portShortEvents = MibTableColumn((1, 3, 6, 1, 4, 1, 3955, 5, 5, 4, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: portShortEvents.setStatus('mandatory')
portRunts = MibTableColumn((1, 3, 6, 1, 4, 1, 3955, 5, 5, 4, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: portRunts.setStatus('mandatory')
portCollisions = MibTableColumn((1, 3, 6, 1, 4, 1, 3955, 5, 5, 4, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: portCollisions.setStatus('mandatory')
portLateEvents = MibTableColumn((1, 3, 6, 1, 4, 1, 3955, 5, 5, 4, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: portLateEvents.setStatus('mandatory')
portVeryLongEvents = MibTableColumn((1, 3, 6, 1, 4, 1, 3955, 5, 5, 4, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: portVeryLongEvents.setStatus('mandatory')
portDataRateMismatches = MibTableColumn((1, 3, 6, 1, 4, 1, 3955, 5, 5, 4, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: portDataRateMismatches.setStatus('mandatory')
portAutoPartitions = MibTableColumn((1, 3, 6, 1, 4, 1, 3955, 5, 5, 4, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: portAutoPartitions.setStatus('mandatory')
portTrackSrcAddrChanges = MibTableColumn((1, 3, 6, 1, 4, 1, 3955, 5, 5, 4, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: portTrackSrcAddrChanges.setStatus('mandatory')
portBroadcastPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 3955, 5, 5, 4, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: portBroadcastPkts.setStatus('mandatory')
portMulticastPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 3955, 5, 5, 4, 1, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: portMulticastPkts.setStatus('mandatory')
mibBuilder.exportSymbols("LINKSYS-MIB", sp2Ports=sp2Ports, polaritySt=polaritySt, statsFragments=statsFragments, statsUndersizePkts=statsUndersizePkts, statsPkts65to127Octets=statsPkts65to127Octets, statsBroadcastPkts=statsBroadcastPkts, sp2Hub=sp2Hub, counterEntry=counterEntry, sp2Statistic=sp2Statistic, statsOversizePkts=statsOversizePkts, deviceId=deviceId, statsCollisions=statsCollisions, statsPkts64Octets=statsPkts64Octets, portShortEvents=portShortEvents, statsPkts1024to1518Octets=statsPkts1024to1518Octets, cntHubIdx=cntHubIdx, linkSt=linkSt, portBroadcastPkts=portBroadcastPkts, portFrameCheckSequence=portFrameCheckSequence, portVeryLongEvents=portVeryLongEvents, nwayEn=nwayEn, statsJabbers=statsJabbers, nwayPartner=nwayPartner, portReadableOctets=portReadableOctets, statsPkts=statsPkts, statHubIdx=statHubIdx, portFramesTooLong=portFramesTooLong, statsPkts256to511Octets=statsPkts256to511Octets, statsOctets=statsOctets, partitionSt=partitionSt, portDataRateMismatches=portDataRateMismatches, cntPortIdx=cntPortIdx, sp2CtlEntry=sp2CtlEntry, statsMulticastPkts=statsMulticastPkts, speedSt=speedSt, resetModule=resetModule, etherHub=etherHub, statsPkts512to1023Octets=statsPkts512to1023Octets, enable=enable, ehHwVer=ehHwVer, sp2Status=sp2Status, ctlPortIdx=ctlPortIdx, ctlHubIdx=ctlHubIdx, statsCrcAlignErrors=statsCrcAlignErrors, sp2Control=sp2Control, statsPkts128to255Octets=statsPkts128to255Octets, portMulticastPkts=portMulticastPkts, statsTotalValidOctets=statsTotalValidOctets, linkEn=linkEn, linksys=linksys, sp2StEntry=sp2StEntry, portAutoPartitions=portAutoPartitions, nwayRestart=nwayRestart, speedSet=speedSet, portAlignmentErrors=portAlignmentErrors, ehSwVer=ehSwVer, portTrackSrcAddrChanges=portTrackSrcAddrChanges, portLateEvents=portLateEvents, ehNumber=ehNumber, portCollisions=portCollisions, statPortIdx=statPortIdx, portReadableFrames=portReadableFrames, portRunts=portRunts)
