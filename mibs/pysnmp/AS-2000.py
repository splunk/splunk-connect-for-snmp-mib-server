#
# PySNMP MIB module AS-2000 (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/AS-2000
# Produced by pysmi-0.3.4 at Mon Apr 29 17:09:52 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, Integer, OctetString = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "Integer", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsUnion, ValueRangeConstraint, SingleValueConstraint, ValueSizeConstraint, ConstraintsIntersection = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsUnion", "ValueRangeConstraint", "SingleValueConstraint", "ValueSizeConstraint", "ConstraintsIntersection")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
IpAddress, Unsigned32, ObjectIdentity, MibIdentifier, Integer32, enterprises, Bits, Counter64, Gauge32, NotificationType, MibScalar, MibTable, MibTableRow, MibTableColumn, NotificationType, iso, ModuleIdentity, Counter32, TimeTicks = mibBuilder.importSymbols("SNMPv2-SMI", "IpAddress", "Unsigned32", "ObjectIdentity", "MibIdentifier", "Integer32", "enterprises", "Bits", "Counter64", "Gauge32", "NotificationType", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "NotificationType", "iso", "ModuleIdentity", "Counter32", "TimeTicks")
DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention")
class DisplayString(OctetString):
    pass

class PhysAddress(OctetString):
    pass

lucent = MibIdentifier((1, 3, 6, 1, 4, 1, 1751))
mibs = MibIdentifier((1, 3, 6, 1, 4, 1, 1751, 2))
orinoco = MibIdentifier((1, 3, 6, 1, 4, 1, 1751, 2, 4))
as2000 = MibIdentifier((1, 3, 6, 1, 4, 1, 1751, 2, 4, 3))
products = MibIdentifier((1, 3, 6, 1, 4, 1, 1751, 1))
orinocoProducts = MibIdentifier((1, 3, 6, 1, 4, 1, 1751, 1, 4))
as2000Product = MibIdentifier((1, 3, 6, 1, 4, 1, 1751, 1, 4, 4))
orinocoInterface = MibIdentifier((1, 3, 6, 1, 4, 1, 1751, 2, 4, 3, 3))
orinocoSNMPSetup = MibIdentifier((1, 3, 6, 1, 4, 1, 1751, 2, 4, 3, 4))
orinocoPPPSetup = MibIdentifier((1, 3, 6, 1, 4, 1, 1751, 2, 4, 3, 5))
orinocoAgent = MibIdentifier((1, 3, 6, 1, 4, 1, 1751, 2, 4, 3, 6))
radius = MibIdentifier((1, 3, 6, 1, 4, 1, 1751, 2, 4, 3, 7))
orinocoShimECPSetup = MibIdentifier((1, 3, 6, 1, 4, 1, 1751, 2, 4, 3, 8))
orinocoDiagnostics = MibIdentifier((1, 3, 6, 1, 4, 1, 1751, 2, 4, 3, 10))
orinocoIAPP = MibIdentifier((1, 3, 6, 1, 4, 1, 1751, 2, 4, 3, 11))
orinocoIPX = MibIdentifier((1, 3, 6, 1, 4, 1, 1751, 2, 4, 3, 12))
orinocoLinkTest = MibIdentifier((1, 3, 6, 1, 4, 1, 1751, 2, 4, 3, 13))
accessServerTraps = MibIdentifier((1, 3, 6, 1, 4, 1, 1751, 2, 4, 3, 15))
orinocoPHY = MibIdentifier((1, 3, 6, 1, 4, 1, 1751, 2, 4, 3, 3, 2))
orinocoDriver = MibIdentifier((1, 3, 6, 1, 4, 1, 1751, 2, 4, 3, 3, 4))
pliSystemName = MibScalar((1, 3, 6, 1, 4, 1, 1751, 2, 4, 3, 3, 2, 1), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pliSystemName.setStatus('mandatory')
psWlanIfTable = MibTable((1, 3, 6, 1, 4, 1, 1751, 2, 4, 3, 3, 2, 2), )
if mibBuilder.loadTexts: psWlanIfTable.setStatus('mandatory')
psWlanIfEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1751, 2, 4, 3, 3, 2, 2, 1), ).setIndexNames((0, "AS-2000", "pliWlanIfIndex"))
if mibBuilder.loadTexts: psWlanIfEntry.setStatus('mandatory')
pliWlanIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 4, 3, 3, 2, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pliWlanIfIndex.setStatus('mandatory')
pliWlanIfNetworkName = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 4, 3, 3, 2, 2, 1, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pliWlanIfNetworkName.setStatus('mandatory')
pliWlanIfMACAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 4, 3, 3, 2, 2, 1, 3), PhysAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pliWlanIfMACAddress.setStatus('mandatory')
pliWlanIfMediumReservation = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 4, 3, 3, 2, 2, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2347))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pliWlanIfMediumReservation.setStatus('mandatory')
pliWlanIfTransmitRate = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 4, 3, 3, 2, 2, 1, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pliWlanIfTransmitRate.setStatus('mandatory')
pliWlanIfOperatingFrequency = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 4, 3, 3, 2, 2, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 14))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pliWlanIfOperatingFrequency.setStatus('mandatory')
pliWlanIfAPDensity = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 4, 3, 3, 2, 2, 1, 7), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pliWlanIfAPDensity.setStatus('mandatory')
pliWlanIfClosedSystem = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 4, 3, 3, 2, 2, 1, 8), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pliWlanIfClosedSystem.setStatus('mandatory')
pliWlanIfAllowedTransmitRates = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 4, 3, 3, 2, 2, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pliWlanIfAllowedTransmitRates.setStatus('mandatory')
pliWlanIfRegulatoryDomainList = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 4, 3, 3, 2, 2, 1, 10), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pliWlanIfRegulatoryDomainList.setStatus('mandatory')
pliWlanIfAllowedOperatingFrequencies = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 4, 3, 3, 2, 2, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pliWlanIfAllowedOperatingFrequencies.setStatus('mandatory')
pliWlanIfCapabilityOptions = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 4, 3, 3, 2, 2, 1, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pliWlanIfCapabilityOptions.setStatus('mandatory')
pliWlanIfProfileCode = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 4, 3, 3, 2, 2, 1, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pliWlanIfProfileCode.setStatus('mandatory')
pliDriverName = MibScalar((1, 3, 6, 1, 4, 1, 1751, 2, 4, 3, 3, 4, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pliDriverName.setStatus('mandatory')
pliDriverVersion = MibScalar((1, 3, 6, 1, 4, 1, 1751, 2, 4, 3, 3, 4, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pliDriverVersion.setStatus('mandatory')
psSNMPReadPassword = MibScalar((1, 3, 6, 1, 4, 1, 1751, 2, 4, 3, 4, 1), DisplayString()).setMaxAccess("writeonly")
if mibBuilder.loadTexts: psSNMPReadPassword.setStatus('mandatory')
psSNMPReadWritePassword = MibScalar((1, 3, 6, 1, 4, 1, 1751, 2, 4, 3, 4, 2), DisplayString()).setMaxAccess("writeonly")
if mibBuilder.loadTexts: psSNMPReadWritePassword.setStatus('mandatory')
psSNMPTrapHostIPAddress = MibScalar((1, 3, 6, 1, 4, 1, 1751, 2, 4, 3, 4, 3), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: psSNMPTrapHostIPAddress.setStatus('mandatory')
psSNMPTrapHostPassword = MibScalar((1, 3, 6, 1, 4, 1, 1751, 2, 4, 3, 4, 4), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: psSNMPTrapHostPassword.setStatus('mandatory')
psSNMPManagerCount = MibScalar((1, 3, 6, 1, 4, 1, 1751, 2, 4, 3, 4, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: psSNMPManagerCount.setStatus('mandatory')
psSNMPAccessTable = MibTable((1, 3, 6, 1, 4, 1, 1751, 2, 4, 3, 4, 6), )
if mibBuilder.loadTexts: psSNMPAccessTable.setStatus('mandatory')
psSNMPAccessTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1751, 2, 4, 3, 4, 6, 1), ).setIndexNames((0, "AS-2000", "psSNMPManagerIndex"))
if mibBuilder.loadTexts: psSNMPAccessTableEntry.setStatus('mandatory')
managerIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 4, 3, 4, 6, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: managerIndex.setStatus('mandatory')
managerIPAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 4, 3, 4, 6, 1, 2), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: managerIPAddress.setStatus('mandatory')
managerSubnetMask = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 4, 3, 4, 6, 1, 3), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: managerSubnetMask.setStatus('mandatory')
managerStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 4, 3, 4, 6, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("delete", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: managerStatus.setStatus('mandatory')
psSNMPInBadManagers = MibScalar((1, 3, 6, 1, 4, 1, 1751, 2, 4, 3, 4, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: psSNMPInBadManagers.setStatus('mandatory')
psTestSNMPReadWritePassword = MibScalar((1, 3, 6, 1, 4, 1, 1751, 2, 4, 3, 4, 8), DisplayString()).setMaxAccess("writeonly")
if mibBuilder.loadTexts: psTestSNMPReadWritePassword.setStatus('mandatory')
psPPPIPAddressAssignmentType = MibScalar((1, 3, 6, 1, 4, 1, 1751, 2, 4, 3, 5, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: psPPPIPAddressAssignmentType.setStatus('mandatory')
psPPPNoOfMACIPMappingEntries = MibScalar((1, 3, 6, 1, 4, 1, 1751, 2, 4, 3, 5, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: psPPPNoOfMACIPMappingEntries.setStatus('mandatory')
psPPPMACIPMappingTable = MibTable((1, 3, 6, 1, 4, 1, 1751, 2, 4, 3, 5, 3), )
if mibBuilder.loadTexts: psPPPMACIPMappingTable.setStatus('mandatory')
psPPPMACIPMappingTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1751, 2, 4, 3, 5, 3, 1), ).setIndexNames((0, "AS-2000", "psPPPMACIPTableIndex"))
if mibBuilder.loadTexts: psPPPMACIPMappingTableEntry.setStatus('mandatory')
mACIPIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 4, 3, 5, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mACIPIndex.setStatus('mandatory')
mACAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 4, 3, 5, 3, 1, 2), PhysAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mACAddress.setStatus('mandatory')
iPAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 4, 3, 5, 3, 1, 3), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: iPAddress.setStatus('mandatory')
comment = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 4, 3, 5, 3, 1, 4), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: comment.setStatus('mandatory')
entryStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 4, 3, 5, 3, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("delete", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: entryStatus.setStatus('mandatory')
psPPPKeepAliveInterval = MibScalar((1, 3, 6, 1, 4, 1, 1751, 2, 4, 3, 5, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: psPPPKeepAliveInterval.setStatus('mandatory')
psPPPNoOfKeepAliveTimeouts = MibScalar((1, 3, 6, 1, 4, 1, 1751, 2, 4, 3, 5, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: psPPPNoOfKeepAliveTimeouts.setStatus('mandatory')
psPPPPrimaryDNSIPAddress = MibScalar((1, 3, 6, 1, 4, 1, 1751, 2, 4, 3, 5, 6), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: psPPPPrimaryDNSIPAddress.setStatus('mandatory')
psPPPSecondaryDNSIPAddress = MibScalar((1, 3, 6, 1, 4, 1, 1751, 2, 4, 3, 5, 7), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: psPPPSecondaryDNSIPAddress.setStatus('mandatory')
psPPPMaxNoOfUsers = MibScalar((1, 3, 6, 1, 4, 1, 1751, 2, 4, 3, 5, 8), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: psPPPMaxNoOfUsers.setStatus('mandatory')
psPPPCHAPStatus = MibScalar((1, 3, 6, 1, 4, 1, 1751, 2, 4, 3, 5, 9), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: psPPPCHAPStatus.setStatus('mandatory')
psPPPCHAPPriority = MibScalar((1, 3, 6, 1, 4, 1, 1751, 2, 4, 3, 5, 10), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: psPPPCHAPPriority.setStatus('mandatory')
psPPPPAPStatus = MibScalar((1, 3, 6, 1, 4, 1, 1751, 2, 4, 3, 5, 11), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: psPPPPAPStatus.setStatus('mandatory')
psPPPPAPPriority = MibScalar((1, 3, 6, 1, 4, 1, 1751, 2, 4, 3, 5, 12), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: psPPPPAPPriority.setStatus('mandatory')
psPPPPrimaryNBNSIPAddress = MibScalar((1, 3, 6, 1, 4, 1, 1751, 2, 4, 3, 5, 13), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: psPPPPrimaryNBNSIPAddress.setStatus('mandatory')
psPPPSecondaryNBNSIPAddress = MibScalar((1, 3, 6, 1, 4, 1, 1751, 2, 4, 3, 5, 14), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: psPPPSecondaryNBNSIPAddress.setStatus('mandatory')
psPPPIPRangeTable = MibTable((1, 3, 6, 1, 4, 1, 1751, 2, 4, 3, 5, 15), )
if mibBuilder.loadTexts: psPPPIPRangeTable.setStatus('mandatory')
psPPPIPRangeTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1751, 2, 4, 3, 5, 15, 1), ).setIndexNames((0, "AS-2000", "psPPPIPRangeTableIndex"))
if mibBuilder.loadTexts: psPPPIPRangeTableEntry.setStatus('mandatory')
pPPIPIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 4, 3, 5, 15, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pPPIPIndex.setStatus('mandatory')
startIPAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 4, 3, 5, 15, 1, 2), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: startIPAddress.setStatus('mandatory')
endIPAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 4, 3, 5, 15, 1, 3), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: endIPAddress.setStatus('mandatory')
width = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 4, 3, 5, 15, 1, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: width.setStatus('mandatory')
status = MibScalar((1, 3, 6, 1, 4, 1, 1751, 2, 4, 3, 5, 15, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 3))).clone(namedValues=NamedValues(("enable", 1), ("delete", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: status.setStatus('mandatory')
iPComment = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 4, 3, 5, 15, 1, 6), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: iPComment.setStatus('mandatory')
psPPPSessionIdleTimeOut = MibScalar((1, 3, 6, 1, 4, 1, 1751, 2, 4, 3, 5, 16), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 36000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: psPPPSessionIdleTimeOut.setStatus('mandatory')
psVersion = MibScalar((1, 3, 6, 1, 4, 1, 1751, 2, 4, 3, 6, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: psVersion.setStatus('mandatory')
psIPAddress = MibScalar((1, 3, 6, 1, 4, 1, 1751, 2, 4, 3, 6, 2), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: psIPAddress.setStatus('mandatory')
psSubnetMask = MibScalar((1, 3, 6, 1, 4, 1, 1751, 2, 4, 3, 6, 3), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: psSubnetMask.setStatus('mandatory')
psDefaultGateway = MibScalar((1, 3, 6, 1, 4, 1, 1751, 2, 4, 3, 6, 4), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: psDefaultGateway.setStatus('mandatory')
psIPAddressType = MibScalar((1, 3, 6, 1, 4, 1, 1751, 2, 4, 3, 6, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: psIPAddressType.setStatus('mandatory')
psAdministrativeState = MibScalar((1, 3, 6, 1, 4, 1, 1751, 2, 4, 3, 6, 6), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: psAdministrativeState.setStatus('mandatory')
psTFTPIPAddress = MibScalar((1, 3, 6, 1, 4, 1, 1751, 2, 4, 3, 6, 7), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: psTFTPIPAddress.setStatus('mandatory')
psTFTPFilename = MibScalar((1, 3, 6, 1, 4, 1, 1751, 2, 4, 3, 6, 8), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: psTFTPFilename.setStatus('mandatory')
psTFTPOperation = MibScalar((1, 3, 6, 1, 4, 1, 1751, 2, 4, 3, 6, 9), Integer32()).setMaxAccess("writeonly")
if mibBuilder.loadTexts: psTFTPOperation.setStatus('mandatory')
psReboot = MibScalar((1, 3, 6, 1, 4, 1, 1751, 2, 4, 3, 6, 10), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: psReboot.setStatus('mandatory')
psSecondsToAdminDown = MibScalar((1, 3, 6, 1, 4, 1, 1751, 2, 4, 3, 6, 11), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: psSecondsToAdminDown.setStatus('mandatory')
psContactEmail = MibScalar((1, 3, 6, 1, 4, 1, 1751, 2, 4, 3, 6, 12), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: psContactEmail.setStatus('mandatory')
psBSPBootloaderVersion = MibScalar((1, 3, 6, 1, 4, 1, 1751, 2, 4, 3, 6, 13), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: psBSPBootloaderVersion.setStatus('mandatory')
psTelnetSesssions = MibScalar((1, 3, 6, 1, 4, 1, 1751, 2, 4, 3, 6, 14), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 5))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: psTelnetSesssions.setStatus('mandatory')
psTelnetPassword = MibScalar((1, 3, 6, 1, 4, 1, 1751, 2, 4, 3, 6, 15), DisplayString()).setMaxAccess("writeonly")
if mibBuilder.loadTexts: psTelnetPassword.setStatus('mandatory')
psTelnetPort = MibScalar((1, 3, 6, 1, 4, 1, 1751, 2, 4, 3, 6, 16), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: psTelnetPort.setStatus('mandatory')
psTelnetTimeout = MibScalar((1, 3, 6, 1, 4, 1, 1751, 2, 4, 3, 6, 17), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 30))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: psTelnetTimeout.setStatus('mandatory')
psTelnetLoginTimeout = MibScalar((1, 3, 6, 1, 4, 1, 1751, 2, 4, 3, 6, 18), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 60))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: psTelnetLoginTimeout.setStatus('mandatory')
psSerialBaudRate = MibScalar((1, 3, 6, 1, 4, 1, 1751, 2, 4, 3, 6, 19), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: psSerialBaudRate.setStatus('mandatory')
psSerialDataBits = MibScalar((1, 3, 6, 1, 4, 1, 1751, 2, 4, 3, 6, 20), Integer32().subtype(subtypeSpec=ValueRangeConstraint(4, 8))).setMaxAccess("readonly")
if mibBuilder.loadTexts: psSerialDataBits.setStatus('mandatory')
psSerialParity = MibScalar((1, 3, 6, 1, 4, 1, 1751, 2, 4, 3, 6, 21), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: psSerialParity.setStatus('mandatory')
psSerialStopBits = MibScalar((1, 3, 6, 1, 4, 1, 1751, 2, 4, 3, 6, 22), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: psSerialStopBits.setStatus('mandatory')
psSerialFlowControl = MibScalar((1, 3, 6, 1, 4, 1, 1751, 2, 4, 3, 6, 23), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: psSerialFlowControl.setStatus('mandatory')
psTFTPFileType = MibScalar((1, 3, 6, 1, 4, 1, 1751, 2, 4, 3, 6, 24), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: psTFTPFileType.setStatus('mandatory')
psDeviceSerialNumber = MibScalar((1, 3, 6, 1, 4, 1, 1751, 2, 4, 3, 6, 25), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: psDeviceSerialNumber.setStatus('mandatory')
psBroadcastMessage = MibScalar((1, 3, 6, 1, 4, 1, 1751, 2, 4, 3, 6, 26), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: psBroadcastMessage.setStatus('mandatory')
psPOSTVersionNumber = MibScalar((1, 3, 6, 1, 4, 1, 1751, 2, 4, 3, 6, 27), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: psPOSTVersionNumber.setStatus('mandatory')
psHardwareVersionNumber = MibScalar((1, 3, 6, 1, 4, 1, 1751, 2, 4, 3, 6, 28), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: psHardwareVersionNumber.setStatus('mandatory')
radiusClientMIB = MibIdentifier((1, 3, 6, 1, 4, 1, 1751, 2, 4, 3, 7, 2))
radiusClientMIBObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 1751, 2, 4, 3, 7, 2, 1))
radiusClient = MibIdentifier((1, 3, 6, 1, 4, 1, 1751, 2, 4, 3, 7, 2, 1, 1))
radiusClientInvalidServerAddresses = MibScalar((1, 3, 6, 1, 4, 1, 1751, 2, 4, 3, 7, 2, 1, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: radiusClientInvalidServerAddresses.setStatus('mandatory')
radiusServerTable = MibTable((1, 3, 6, 1, 4, 1, 1751, 2, 4, 3, 7, 2, 1, 1, 2), )
if mibBuilder.loadTexts: radiusServerTable.setStatus('mandatory')
radiusServerEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1751, 2, 4, 3, 7, 2, 1, 1, 2, 1), ).setIndexNames((0, "AS-2000", "radiusServerIndex"))
if mibBuilder.loadTexts: radiusServerEntry.setStatus('mandatory')
radiusServerIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 4, 3, 7, 2, 1, 1, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: radiusServerIndex.setStatus('mandatory')
radiusServerType = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 4, 3, 7, 2, 1, 1, 2, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: radiusServerType.setStatus('mandatory')
radiusServerAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 4, 3, 7, 2, 1, 1, 2, 1, 3), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: radiusServerAddress.setStatus('mandatory')
radiusServerDestPortAuth = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 4, 3, 7, 2, 1, 1, 2, 1, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: radiusServerDestPortAuth.setStatus('mandatory')
radiusServerDestPortAcct = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 4, 3, 7, 2, 1, 1, 2, 1, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: radiusServerDestPortAcct.setStatus('mandatory')
radiusClientAccessRequests = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 4, 3, 7, 2, 1, 1, 2, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: radiusClientAccessRequests.setStatus('mandatory')
radiusClientAccessRetransmissions = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 4, 3, 7, 2, 1, 1, 2, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: radiusClientAccessRetransmissions.setStatus('mandatory')
radiusClientAccessAccepts = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 4, 3, 7, 2, 1, 1, 2, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: radiusClientAccessAccepts.setStatus('mandatory')
radiusClientAccessChallenges = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 4, 3, 7, 2, 1, 1, 2, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: radiusClientAccessChallenges.setStatus('mandatory')
radiusClientMalformedAccessResponses = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 4, 3, 7, 2, 1, 1, 2, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: radiusClientMalformedAccessResponses.setStatus('mandatory')
radiusClientAuthenticationBadAuthenticators = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 4, 3, 7, 2, 1, 1, 2, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: radiusClientAuthenticationBadAuthenticators.setStatus('mandatory')
radiusClientAccessRejects = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 4, 3, 7, 2, 1, 1, 2, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: radiusClientAccessRejects.setStatus('mandatory')
radiusClientTimeouts = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 4, 3, 7, 2, 1, 1, 2, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: radiusClientTimeouts.setStatus('mandatory')
radiusClientAccountingRequests = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 4, 3, 7, 2, 1, 1, 2, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: radiusClientAccountingRequests.setStatus('mandatory')
radiusClientAccountingRetransmissions = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 4, 3, 7, 2, 1, 1, 2, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: radiusClientAccountingRetransmissions.setStatus('mandatory')
radiusClientAccountingResponses = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 4, 3, 7, 2, 1, 1, 2, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: radiusClientAccountingResponses.setStatus('mandatory')
radiusClientAccountingBadAuthenticators = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 4, 3, 7, 2, 1, 1, 2, 1, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: radiusClientAccountingBadAuthenticators.setStatus('mandatory')
radiusServerSharedSecret = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 4, 3, 7, 2, 1, 1, 2, 1, 18), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: radiusServerSharedSecret.setStatus('mandatory')
radiusServerEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 4, 3, 7, 2, 1, 1, 2, 1, 19), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: radiusServerEnabled.setStatus('mandatory')
radiusServerResponseTime = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 4, 3, 7, 2, 1, 1, 2, 1, 20), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 10))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: radiusServerResponseTime.setStatus('mandatory')
radiusServerMaximumRetransmission = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 4, 3, 7, 2, 1, 1, 2, 1, 21), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: radiusServerMaximumRetransmission.setStatus('mandatory')
radiusClientMIBConformance = MibIdentifier((1, 3, 6, 1, 4, 1, 1751, 2, 4, 3, 7, 2, 2))
radiusClientMIBCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 1751, 2, 4, 3, 7, 2, 2, 1))
radiusClientMIBGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 1751, 2, 4, 3, 7, 2, 2, 2))
psShimECPRetransmissionCount = MibScalar((1, 3, 6, 1, 4, 1, 1751, 2, 4, 3, 8, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: psShimECPRetransmissionCount.setStatus('mandatory')
psShimECPRepeatResponseCount = MibScalar((1, 3, 6, 1, 4, 1, 1751, 2, 4, 3, 8, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: psShimECPRepeatResponseCount.setStatus('mandatory')
psShimECPRetransmissionTimeout = MibScalar((1, 3, 6, 1, 4, 1, 1751, 2, 4, 3, 8, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: psShimECPRetransmissionTimeout.setStatus('mandatory')
psIappStatus = MibScalar((1, 3, 6, 1, 4, 1, 1751, 2, 4, 3, 11, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: psIappStatus.setStatus('mandatory')
psIappAnnReqOut = MibScalar((1, 3, 6, 1, 4, 1, 1751, 2, 4, 3, 11, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: psIappAnnReqOut.setStatus('mandatory')
psIappAnnReqIn = MibScalar((1, 3, 6, 1, 4, 1, 1751, 2, 4, 3, 11, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: psIappAnnReqIn.setStatus('mandatory')
psIappAnnRespOut = MibScalar((1, 3, 6, 1, 4, 1, 1751, 2, 4, 3, 11, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: psIappAnnRespOut.setStatus('mandatory')
psIappAnnRespIn = MibScalar((1, 3, 6, 1, 4, 1, 1751, 2, 4, 3, 11, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: psIappAnnRespIn.setStatus('mandatory')
psIappHandOvrReqOut = MibScalar((1, 3, 6, 1, 4, 1, 1751, 2, 4, 3, 11, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: psIappHandOvrReqOut.setStatus('mandatory')
psIappHandOvrReqIn = MibScalar((1, 3, 6, 1, 4, 1, 1751, 2, 4, 3, 11, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: psIappHandOvrReqIn.setStatus('mandatory')
psIappHandOvrRespOut = MibScalar((1, 3, 6, 1, 4, 1, 1751, 2, 4, 3, 11, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: psIappHandOvrRespOut.setStatus('mandatory')
psIappHandOvrRespIn = MibScalar((1, 3, 6, 1, 4, 1, 1751, 2, 4, 3, 11, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: psIappHandOvrRespIn.setStatus('mandatory')
psIappEndSessOut = MibScalar((1, 3, 6, 1, 4, 1, 1751, 2, 4, 3, 11, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: psIappEndSessOut.setStatus('mandatory')
psIappEndSessIn = MibScalar((1, 3, 6, 1, 4, 1, 1751, 2, 4, 3, 11, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: psIappEndSessIn.setStatus('mandatory')
psIappEndSessAckOut = MibScalar((1, 3, 6, 1, 4, 1, 1751, 2, 4, 3, 11, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: psIappEndSessAckOut.setStatus('mandatory')
psIappEndSessAckIn = MibScalar((1, 3, 6, 1, 4, 1, 1751, 2, 4, 3, 11, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: psIappEndSessAckIn.setStatus('mandatory')
psIappPduDrops = MibScalar((1, 3, 6, 1, 4, 1, 1751, 2, 4, 3, 11, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: psIappPduDrops.setStatus('mandatory')
psIappHandOvrReqReSent = MibScalar((1, 3, 6, 1, 4, 1, 1751, 2, 4, 3, 11, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: psIappHandOvrReqReSent.setStatus('mandatory')
psIappAnnInterval = MibScalar((1, 3, 6, 1, 4, 1, 1751, 2, 4, 3, 11, 16), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: psIappAnnInterval.setStatus('mandatory')
psIappAnnRespTime = MibScalar((1, 3, 6, 1, 4, 1, 1751, 2, 4, 3, 11, 17), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: psIappAnnRespTime.setStatus('mandatory')
psIappHandOvrTimeOut = MibScalar((1, 3, 6, 1, 4, 1, 1751, 2, 4, 3, 11, 18), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: psIappHandOvrTimeOut.setStatus('mandatory')
psIappMaxHandOvrRetries = MibScalar((1, 3, 6, 1, 4, 1, 1751, 2, 4, 3, 11, 19), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: psIappMaxHandOvrRetries.setStatus('mandatory')
psIappRoamingClients = MibScalar((1, 3, 6, 1, 4, 1, 1751, 2, 4, 3, 11, 20), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: psIappRoamingClients.setStatus('mandatory')
psIpxStatus = MibScalar((1, 3, 6, 1, 4, 1, 1751, 2, 4, 3, 12, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: psIpxStatus.setStatus('mandatory')
psIpxDefaultRouterNodeNum = MibScalar((1, 3, 6, 1, 4, 1, 1751, 2, 4, 3, 12, 2), PhysAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: psIpxDefaultRouterNodeNum.setStatus('mandatory')
psIpxWiredToWlessBridged = MibScalar((1, 3, 6, 1, 4, 1, 1751, 2, 4, 3, 12, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: psIpxWiredToWlessBridged.setStatus('mandatory')
psIpxWlessToWiredBridged = MibScalar((1, 3, 6, 1, 4, 1, 1751, 2, 4, 3, 12, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: psIpxWlessToWiredBridged.setStatus('mandatory')
psIpxEthernetEncapsulationFormat = MibScalar((1, 3, 6, 1, 4, 1, 1751, 2, 4, 3, 12, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: psIpxEthernetEncapsulationFormat.setStatus('mandatory')
psASClientTable = MibTable((1, 3, 6, 1, 4, 1, 1751, 2, 4, 3, 12, 6), )
if mibBuilder.loadTexts: psASClientTable.setStatus('mandatory')
psASClientEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1751, 2, 4, 3, 12, 6, 1), ).setIndexNames((0, "AS-2000", "psPPPSessionId"))
if mibBuilder.loadTexts: psASClientEntry.setStatus('mandatory')
psPPPSessionId = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 4, 3, 12, 6, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: psPPPSessionId.setStatus('mandatory')
psIpxClientNetworkNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 4, 3, 12, 6, 1, 2), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: psIpxClientNetworkNumber.setStatus('mandatory')
psIpxClientMAC = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 4, 3, 12, 6, 1, 3), PhysAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: psIpxClientMAC.setStatus('mandatory')
psIpxClientStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 4, 3, 12, 6, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("up", 1), ("disable", 2), ("delete", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: psIpxClientStatus.setStatus('mandatory')
psASClientSessionUpTime = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 4, 3, 12, 6, 1, 5), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: psASClientSessionUpTime.setStatus('mandatory')
psASClientPacketsIn = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 4, 3, 12, 6, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: psASClientPacketsIn.setStatus('mandatory')
psASClientPacketsOut = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 4, 3, 12, 6, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: psASClientPacketsOut.setStatus('mandatory')
oriLinkTestTimeOut = MibScalar((1, 3, 6, 1, 4, 1, 1751, 2, 4, 3, 13, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: oriLinkTestTimeOut.setStatus('mandatory')
oriLinkTestInterval = MibScalar((1, 3, 6, 1, 4, 1, 1751, 2, 4, 3, 13, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: oriLinkTestInterval.setStatus('mandatory')
oriLinkTestExplore = MibScalar((1, 3, 6, 1, 4, 1, 1751, 2, 4, 3, 13, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: oriLinkTestExplore.setStatus('mandatory')
oriLinkTestTable = MibTable((1, 3, 6, 1, 4, 1, 1751, 2, 4, 3, 13, 5), )
if mibBuilder.loadTexts: oriLinkTestTable.setStatus('mandatory')
oriLinkTestTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1751, 2, 4, 3, 13, 5, 1), ).setIndexNames((0, "AS-2000", "oriLinkTestTableIndex"))
if mibBuilder.loadTexts: oriLinkTestTableEntry.setStatus('mandatory')
oriLinkTestTableIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 4, 3, 13, 5, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oriLinkTestTableIndex.setStatus('mandatory')
oriLinkTestInProgress = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 4, 3, 13, 5, 1, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: oriLinkTestInProgress.setStatus('mandatory')
oriLinkTestStationName = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 4, 3, 13, 5, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oriLinkTestStationName.setStatus('mandatory')
oriLinkTestMACAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 4, 3, 13, 5, 1, 4), PhysAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oriLinkTestMACAddress.setStatus('mandatory')
oriLinkTestStationProfile = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 4, 3, 13, 5, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oriLinkTestStationProfile.setStatus('mandatory')
oriLinkTestOurCurSignalLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 4, 3, 13, 5, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oriLinkTestOurCurSignalLevel.setStatus('mandatory')
oriLinkTestOurCurNoiseLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 4, 3, 13, 5, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oriLinkTestOurCurNoiseLevel.setStatus('mandatory')
oriLinkTestOurCurSNR = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 4, 3, 13, 5, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oriLinkTestOurCurSNR.setStatus('mandatory')
oriLinkTestOurMinSignalLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 4, 3, 13, 5, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oriLinkTestOurMinSignalLevel.setStatus('mandatory')
oriLinkTestOurMinNoiseLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 4, 3, 13, 5, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oriLinkTestOurMinNoiseLevel.setStatus('mandatory')
oriLinkTestOurMinSNR = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 4, 3, 13, 5, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oriLinkTestOurMinSNR.setStatus('mandatory')
oriLinkTestOurMaxSignalLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 4, 3, 13, 5, 1, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oriLinkTestOurMaxSignalLevel.setStatus('mandatory')
oriLinkTestOurMaxNoiseLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 4, 3, 13, 5, 1, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oriLinkTestOurMaxNoiseLevel.setStatus('mandatory')
oriLinkTestOurMaxSNR = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 4, 3, 13, 5, 1, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oriLinkTestOurMaxSNR.setStatus('mandatory')
oriLinkTestOurLowFrameCount = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 4, 3, 13, 5, 1, 15), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oriLinkTestOurLowFrameCount.setStatus('mandatory')
oriLinkTestOurStandardFrameCount = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 4, 3, 13, 5, 1, 16), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oriLinkTestOurStandardFrameCount.setStatus('mandatory')
oriLinkTestOurMediumFrameCount = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 4, 3, 13, 5, 1, 17), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oriLinkTestOurMediumFrameCount.setStatus('mandatory')
oriLinkTestOurHighFrameCount = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 4, 3, 13, 5, 1, 18), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oriLinkTestOurHighFrameCount.setStatus('mandatory')
oriLinkTestHisCurSignalLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 4, 3, 13, 5, 1, 19), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oriLinkTestHisCurSignalLevel.setStatus('mandatory')
oriLinkTestHisCurNoiseLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 4, 3, 13, 5, 1, 20), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oriLinkTestHisCurNoiseLevel.setStatus('mandatory')
oriLinkTestHisCurSNR = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 4, 3, 13, 5, 1, 21), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oriLinkTestHisCurSNR.setStatus('mandatory')
oriLinkTestHisMinSignalLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 4, 3, 13, 5, 1, 22), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oriLinkTestHisMinSignalLevel.setStatus('mandatory')
oriLinkTestHisMinNoiseLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 4, 3, 13, 5, 1, 23), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oriLinkTestHisMinNoiseLevel.setStatus('mandatory')
oriLinkTestHisMinSNR = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 4, 3, 13, 5, 1, 24), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oriLinkTestHisMinSNR.setStatus('mandatory')
oriLinkTestHisMaxSignalLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 4, 3, 13, 5, 1, 25), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oriLinkTestHisMaxSignalLevel.setStatus('mandatory')
oriLinkTestHisMaxNoiseLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 4, 3, 13, 5, 1, 26), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oriLinkTestHisMaxNoiseLevel.setStatus('mandatory')
oriLinkTestHisMaxSNR = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 4, 3, 13, 5, 1, 27), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oriLinkTestHisMaxSNR.setStatus('mandatory')
oriLinkTestHisLowFrameCount = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 4, 3, 13, 5, 1, 28), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oriLinkTestHisLowFrameCount.setStatus('mandatory')
oriLinkTestHisStandardFrameCount = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 4, 3, 13, 5, 1, 29), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oriLinkTestHisStandardFrameCount.setStatus('mandatory')
oriLinkTestHisMediumFrameCount = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 4, 3, 13, 5, 1, 30), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oriLinkTestHisMediumFrameCount.setStatus('mandatory')
oriLinkTestHisHighFrameCount = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 4, 3, 13, 5, 1, 31), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oriLinkTestHisHighFrameCount.setStatus('mandatory')
oriLinkTestInterface = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 4, 3, 13, 5, 1, 32), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oriLinkTestInterface.setStatus('mandatory')
oriLinkTestRadioType = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 4, 3, 13, 5, 1, 33), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oriLinkTestRadioType.setStatus('mandatory')
accessServerTrapVariables = MibIdentifier((1, 3, 6, 1, 4, 1, 1751, 2, 4, 3, 15, 1))
accessServerGenericInformationMessage = MibScalar((1, 3, 6, 1, 4, 1, 1751, 2, 4, 3, 15, 1, 1), DisplayString())
if mibBuilder.loadTexts: accessServerGenericInformationMessage.setStatus('mandatory')
accessServerMacAddress = MibScalar((1, 3, 6, 1, 4, 1, 1751, 2, 4, 3, 15, 1, 2), PhysAddress())
if mibBuilder.loadTexts: accessServerMacAddress.setStatus('mandatory')
accessServerFailedTFTPServerAddress = MibScalar((1, 3, 6, 1, 4, 1, 1751, 2, 4, 3, 15, 1, 3), IpAddress())
if mibBuilder.loadTexts: accessServerFailedTFTPServerAddress.setStatus('mandatory')
accessServerFailedTFTPFilename = MibScalar((1, 3, 6, 1, 4, 1, 1751, 2, 4, 3, 15, 1, 4), DisplayString())
if mibBuilder.loadTexts: accessServerFailedTFTPFilename.setStatus('mandatory')
accessServerFailedTFTPOperation = MibScalar((1, 3, 6, 1, 4, 1, 1751, 2, 4, 3, 15, 1, 5), Integer32())
if mibBuilder.loadTexts: accessServerFailedTFTPOperation.setStatus('mandatory')
accessServerSuspendedTaskName = MibScalar((1, 3, 6, 1, 4, 1, 1751, 2, 4, 3, 15, 1, 6), DisplayString())
if mibBuilder.loadTexts: accessServerSuspendedTaskName.setStatus('mandatory')
accessServerWirelessCard = MibScalar((1, 3, 6, 1, 4, 1, 1751, 2, 4, 3, 15, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("pc-cardA", 1), ("pc-cardB", 2))))
if mibBuilder.loadTexts: accessServerWirelessCard.setStatus('mandatory')
accessServerFlashRelatedTraps = MibIdentifier((1, 3, 6, 1, 4, 1, 1751, 2, 4, 3, 15, 2))
accessServerFlashEmpty = NotificationType((1, 3, 6, 1, 4, 1, 1751, 2, 4, 3, 15, 2) + (0,1))
accessServerFlashCorrupted = NotificationType((1, 3, 6, 1, 4, 1, 1751, 2, 4, 3, 15, 2) + (0,2))
accessServerConfigurationRelatedTraps = MibIdentifier((1, 3, 6, 1, 4, 1, 1751, 2, 4, 3, 15, 3))
accessServerInvalidKey = NotificationType((1, 3, 6, 1, 4, 1, 1751, 2, 4, 3, 15, 3) + (0,1))
accessServerAPMNotConfigured = NotificationType((1, 3, 6, 1, 4, 1, 1751, 2, 4, 3, 15, 3) + (0,2))
accessServerWLCIncompatibleFirmware = NotificationType((1, 3, 6, 1, 4, 1, 1751, 2, 4, 3, 15, 3) + (0,3))
accessServerWLCFailure = NotificationType((1, 3, 6, 1, 4, 1, 1751, 2, 4, 3, 15, 3) + (0,4))
accessServerWLCRemoval = NotificationType((1, 3, 6, 1, 4, 1, 1751, 2, 4, 3, 15, 3) + (0,5))
accessServerRadiusNotConfigured = NotificationType((1, 3, 6, 1, 4, 1, 1751, 2, 4, 3, 15, 3) + (0,6))
accessServerDNSIPNotConfigured = NotificationType((1, 3, 6, 1, 4, 1, 1751, 2, 4, 3, 15, 3) + (0,7))
accessServerNBNSIPNotConfigured = NotificationType((1, 3, 6, 1, 4, 1, 1751, 2, 4, 3, 15, 3) + (0,8))
accessServerRadiusAuthenticationNotConfigured = NotificationType((1, 3, 6, 1, 4, 1, 1751, 2, 4, 3, 15, 3) + (0,9))
accessServerRadiusAccountingNotConfigured = NotificationType((1, 3, 6, 1, 4, 1, 1751, 2, 4, 3, 15, 3) + (0,10))
accessServerDuplicateIPAddressEncountered = NotificationType((1, 3, 6, 1, 4, 1, 1751, 2, 4, 3, 15, 3) + (0,11))
accessServerWLCVoltageDiscrepancy = NotificationType((1, 3, 6, 1, 4, 1, 1751, 2, 4, 3, 15, 3) + (0,12))
accessServerWLCIncompatibleVendor = NotificationType((1, 3, 6, 1, 4, 1, 1751, 2, 4, 3, 15, 3) + (0,13))
accessServerWLCFirmwareDownloadFailure = NotificationType((1, 3, 6, 1, 4, 1, 1751, 2, 4, 3, 15, 3) + (0,14))
accessServerDiagnosticTraps = MibIdentifier((1, 3, 6, 1, 4, 1, 1751, 2, 4, 3, 15, 4))
accessServerTFTPInitiated = NotificationType((1, 3, 6, 1, 4, 1, 1751, 2, 4, 3, 15, 4) + (0,1))
accessServerTFTPCompleted = NotificationType((1, 3, 6, 1, 4, 1, 1751, 2, 4, 3, 15, 4) + (0,2))
accessServerTFTPFailure = NotificationType((1, 3, 6, 1, 4, 1, 1751, 2, 4, 3, 15, 4) + (0,3))
accessServerAdminStateMadeUp = NotificationType((1, 3, 6, 1, 4, 1, 1751, 2, 4, 3, 15, 4) + (0,4))
accessServerAdminStateMadeDown = NotificationType((1, 3, 6, 1, 4, 1, 1751, 2, 4, 3, 15, 4) + (0,5))
accessServerRebootingNow = NotificationType((1, 3, 6, 1, 4, 1, 1751, 2, 4, 3, 15, 4) + (0,6))
accessServerTaskSuspended = NotificationType((1, 3, 6, 1, 4, 1, 1751, 2, 4, 3, 15, 4) + (0,7))
accessServerBootPFailed = NotificationType((1, 3, 6, 1, 4, 1, 1751, 2, 4, 3, 15, 4) + (0,8))
accessServerDHCPFailed = NotificationType((1, 3, 6, 1, 4, 1, 1751, 2, 4, 3, 15, 4) + (0,9))
accessServerImageTraps = MibIdentifier((1, 3, 6, 1, 4, 1, 1751, 2, 4, 3, 15, 5))
accessServerZeroSizeImage = NotificationType((1, 3, 6, 1, 4, 1, 1751, 2, 4, 3, 15, 5) + (0,1))
accessServerNonVxWorksImage = NotificationType((1, 3, 6, 1, 4, 1, 1751, 2, 4, 3, 15, 5) + (0,2))
accessServerImageTooLarge = NotificationType((1, 3, 6, 1, 4, 1, 1751, 2, 4, 3, 15, 5) + (0,3))
mibBuilder.exportSymbols("AS-2000", orinocoLinkTest=orinocoLinkTest, pliWlanIfMACAddress=pliWlanIfMACAddress, psPPPCHAPStatus=psPPPCHAPStatus, psIpxWlessToWiredBridged=psIpxWlessToWiredBridged, psTelnetTimeout=psTelnetTimeout, pliWlanIfTransmitRate=pliWlanIfTransmitRate, accessServerInvalidKey=accessServerInvalidKey, psIappAnnRespOut=psIappAnnRespOut, comment=comment, psPPPSecondaryNBNSIPAddress=psPPPSecondaryNBNSIPAddress, oriLinkTestOurMinSignalLevel=oriLinkTestOurMinSignalLevel, psTFTPFileType=psTFTPFileType, oriLinkTestHisCurNoiseLevel=oriLinkTestHisCurNoiseLevel, psSNMPAccessTableEntry=psSNMPAccessTableEntry, psIpxEthernetEncapsulationFormat=psIpxEthernetEncapsulationFormat, psSNMPReadWritePassword=psSNMPReadWritePassword, psPPPIPRangeTableEntry=psPPPIPRangeTableEntry, oriLinkTestHisLowFrameCount=oriLinkTestHisLowFrameCount, mACIPIndex=mACIPIndex, iPComment=iPComment, oriLinkTestHisMediumFrameCount=oriLinkTestHisMediumFrameCount, accessServerTrapVariables=accessServerTrapVariables, oriLinkTestOurMinNoiseLevel=oriLinkTestOurMinNoiseLevel, oriLinkTestHisCurSignalLevel=oriLinkTestHisCurSignalLevel, psASClientTable=psASClientTable, pliWlanIfNetworkName=pliWlanIfNetworkName, psDefaultGateway=psDefaultGateway, accessServerWLCFailure=accessServerWLCFailure, psPPPNoOfMACIPMappingEntries=psPPPNoOfMACIPMappingEntries, radiusClientTimeouts=radiusClientTimeouts, managerStatus=managerStatus, psPPPSessionId=psPPPSessionId, oriLinkTestOurCurNoiseLevel=oriLinkTestOurCurNoiseLevel, accessServerRadiusNotConfigured=accessServerRadiusNotConfigured, psIappStatus=psIappStatus, radiusClientAccessChallenges=radiusClientAccessChallenges, oriLinkTestTableIndex=oriLinkTestTableIndex, psIpxWiredToWlessBridged=psIpxWiredToWlessBridged, oriLinkTestMACAddress=oriLinkTestMACAddress, orinocoInterface=orinocoInterface, psPPPKeepAliveInterval=psPPPKeepAliveInterval, radiusServerIndex=radiusServerIndex, psWlanIfTable=psWlanIfTable, psIpxClientNetworkNumber=psIpxClientNetworkNumber, orinoco=orinoco, oriLinkTestExplore=oriLinkTestExplore, startIPAddress=startIPAddress, psSecondsToAdminDown=psSecondsToAdminDown, radiusServerAddress=radiusServerAddress, accessServerSuspendedTaskName=accessServerSuspendedTaskName, accessServerRadiusAuthenticationNotConfigured=accessServerRadiusAuthenticationNotConfigured, radiusClientMIB=radiusClientMIB, oriLinkTestOurCurSignalLevel=oriLinkTestOurCurSignalLevel, oriLinkTestHisMinNoiseLevel=oriLinkTestHisMinNoiseLevel, psContactEmail=psContactEmail, accessServerFailedTFTPServerAddress=accessServerFailedTFTPServerAddress, pliWlanIfProfileCode=pliWlanIfProfileCode, accessServerWLCVoltageDiscrepancy=accessServerWLCVoltageDiscrepancy, psTFTPOperation=psTFTPOperation, managerIndex=managerIndex, psReboot=psReboot, pliWlanIfOperatingFrequency=pliWlanIfOperatingFrequency, psPPPSecondaryDNSIPAddress=psPPPSecondaryDNSIPAddress, radiusServerDestPortAcct=radiusServerDestPortAcct, oriLinkTestHisCurSNR=oriLinkTestHisCurSNR, accessServerImageTraps=accessServerImageTraps, oriLinkTestInProgress=oriLinkTestInProgress, accessServerTraps=accessServerTraps, psIappPduDrops=psIappPduDrops, radiusServerMaximumRetransmission=radiusServerMaximumRetransmission, psIappHandOvrReqOut=psIappHandOvrReqOut, radiusClientAccountingResponses=radiusClientAccountingResponses, psIappAnnInterval=psIappAnnInterval, oriLinkTestOurMinSNR=oriLinkTestOurMinSNR, radiusServerEntry=radiusServerEntry, orinocoDiagnostics=orinocoDiagnostics, accessServerGenericInformationMessage=accessServerGenericInformationMessage, radiusClientAccountingBadAuthenticators=radiusClientAccountingBadAuthenticators, oriLinkTestOurMaxNoiseLevel=oriLinkTestOurMaxNoiseLevel, psSerialBaudRate=psSerialBaudRate, accessServerTFTPCompleted=accessServerTFTPCompleted, psSNMPInBadManagers=psSNMPInBadManagers, orinocoSNMPSetup=orinocoSNMPSetup, accessServerRadiusAccountingNotConfigured=accessServerRadiusAccountingNotConfigured, oriLinkTestInterface=oriLinkTestInterface, oriLinkTestRadioType=oriLinkTestRadioType, psTelnetLoginTimeout=psTelnetLoginTimeout, psTFTPFilename=psTFTPFilename, psIappEndSessAckIn=psIappEndSessAckIn, radiusClientAuthenticationBadAuthenticators=radiusClientAuthenticationBadAuthenticators, psASClientEntry=psASClientEntry, radiusServerType=radiusServerType, radiusClientAccessAccepts=radiusClientAccessAccepts, psIappHandOvrReqReSent=psIappHandOvrReqReSent, oriLinkTestOurCurSNR=oriLinkTestOurCurSNR, accessServerFlashEmpty=accessServerFlashEmpty, psPPPMaxNoOfUsers=psPPPMaxNoOfUsers, oriLinkTestTable=oriLinkTestTable, oriLinkTestOurMaxSNR=oriLinkTestOurMaxSNR, psASClientSessionUpTime=psASClientSessionUpTime, oriLinkTestOurMaxSignalLevel=oriLinkTestOurMaxSignalLevel, accessServerFailedTFTPFilename=accessServerFailedTFTPFilename, psIappEndSessIn=psIappEndSessIn, psTestSNMPReadWritePassword=psTestSNMPReadWritePassword, psIPAddress=psIPAddress, DisplayString=DisplayString, psIPAddressType=psIPAddressType, radiusClientMIBCompliances=radiusClientMIBCompliances, oriLinkTestOurMediumFrameCount=oriLinkTestOurMediumFrameCount, accessServerFlashRelatedTraps=accessServerFlashRelatedTraps, pliWlanIfCapabilityOptions=pliWlanIfCapabilityOptions, accessServerTFTPFailure=accessServerTFTPFailure, psPPPIPRangeTable=psPPPIPRangeTable, accessServerImageTooLarge=accessServerImageTooLarge, oriLinkTestHisHighFrameCount=oriLinkTestHisHighFrameCount, radiusServerDestPortAuth=radiusServerDestPortAuth, products=products, psTelnetPassword=psTelnetPassword, psWlanIfEntry=psWlanIfEntry, oriLinkTestHisMinSignalLevel=oriLinkTestHisMinSignalLevel, psPPPSessionIdleTimeOut=psPPPSessionIdleTimeOut, accessServerAdminStateMadeUp=accessServerAdminStateMadeUp, lucent=lucent, status=status, pliWlanIfMediumReservation=pliWlanIfMediumReservation, radiusClientMalformedAccessResponses=radiusClientMalformedAccessResponses, psPPPCHAPPriority=psPPPCHAPPriority, accessServerConfigurationRelatedTraps=accessServerConfigurationRelatedTraps, psIappHandOvrReqIn=psIappHandOvrReqIn, accessServerZeroSizeImage=accessServerZeroSizeImage, radiusClientAccountingRequests=radiusClientAccountingRequests, psPPPPrimaryNBNSIPAddress=psPPPPrimaryNBNSIPAddress, pPPIPIndex=pPPIPIndex, oriLinkTestOurHighFrameCount=oriLinkTestOurHighFrameCount, psSNMPReadPassword=psSNMPReadPassword, pliDriverVersion=pliDriverVersion, psSubnetMask=psSubnetMask, oriLinkTestTimeOut=oriLinkTestTimeOut, psShimECPRetransmissionTimeout=psShimECPRetransmissionTimeout, as2000=as2000, pliSystemName=pliSystemName, managerSubnetMask=managerSubnetMask, psDeviceSerialNumber=psDeviceSerialNumber, radiusClientAccountingRetransmissions=radiusClientAccountingRetransmissions, accessServerNBNSIPNotConfigured=accessServerNBNSIPNotConfigured, radiusServerEnabled=radiusServerEnabled, pliWlanIfAPDensity=pliWlanIfAPDensity, oriLinkTestHisMaxSignalLevel=oriLinkTestHisMaxSignalLevel, accessServerWirelessCard=accessServerWirelessCard, radiusServerTable=radiusServerTable, psIappEndSessAckOut=psIappEndSessAckOut, oriLinkTestOurLowFrameCount=oriLinkTestOurLowFrameCount, accessServerWLCRemoval=accessServerWLCRemoval, PhysAddress=PhysAddress, managerIPAddress=managerIPAddress, accessServerDiagnosticTraps=accessServerDiagnosticTraps, oriLinkTestHisMinSNR=oriLinkTestHisMinSNR, psIappAnnRespIn=psIappAnnRespIn, accessServerBootPFailed=accessServerBootPFailed, psPPPMACIPMappingTableEntry=psPPPMACIPMappingTableEntry, radiusClientAccessRequests=radiusClientAccessRequests, oriLinkTestStationProfile=oriLinkTestStationProfile, orinocoPPPSetup=orinocoPPPSetup, psBroadcastMessage=psBroadcastMessage, oriLinkTestStationName=oriLinkTestStationName, oriLinkTestHisMaxSNR=oriLinkTestHisMaxSNR, psSNMPTrapHostIPAddress=psSNMPTrapHostIPAddress, accessServerAPMNotConfigured=accessServerAPMNotConfigured, psPPPNoOfKeepAliveTimeouts=psPPPNoOfKeepAliveTimeouts, psIappEndSessOut=psIappEndSessOut, accessServerNonVxWorksImage=accessServerNonVxWorksImage, orinocoAgent=orinocoAgent, psSNMPTrapHostPassword=psSNMPTrapHostPassword, accessServerAdminStateMadeDown=accessServerAdminStateMadeDown, accessServerDNSIPNotConfigured=accessServerDNSIPNotConfigured, psPOSTVersionNumber=psPOSTVersionNumber, pliWlanIfAllowedTransmitRates=pliWlanIfAllowedTransmitRates, iPAddress=iPAddress, psBSPBootloaderVersion=psBSPBootloaderVersion, psTelnetPort=psTelnetPort, psAdministrativeState=psAdministrativeState, psSerialStopBits=psSerialStopBits, accessServerDHCPFailed=accessServerDHCPFailed, accessServerFlashCorrupted=accessServerFlashCorrupted, psSNMPAccessTable=psSNMPAccessTable, accessServerTaskSuspended=accessServerTaskSuspended, pliWlanIfAllowedOperatingFrequencies=pliWlanIfAllowedOperatingFrequencies, psPPPMACIPMappingTable=psPPPMACIPMappingTable, accessServerWLCIncompatibleFirmware=accessServerWLCIncompatibleFirmware, radiusServerSharedSecret=radiusServerSharedSecret, psIappRoamingClients=psIappRoamingClients, pliDriverName=pliDriverName, accessServerFailedTFTPOperation=accessServerFailedTFTPOperation, radiusClientAccessRetransmissions=radiusClientAccessRetransmissions, psIpxDefaultRouterNodeNum=psIpxDefaultRouterNodeNum, as2000Product=as2000Product, accessServerTFTPInitiated=accessServerTFTPInitiated, radiusClientAccessRejects=radiusClientAccessRejects, accessServerMacAddress=accessServerMacAddress, orinocoIPX=orinocoIPX, psTelnetSesssions=psTelnetSesssions, psSerialParity=psSerialParity, radiusClientMIBGroups=radiusClientMIBGroups, accessServerRebootingNow=accessServerRebootingNow, radiusClient=radiusClient, mACAddress=mACAddress, radius=radius, psPPPPAPStatus=psPPPPAPStatus, psVersion=psVersion, accessServerWLCIncompatibleVendor=accessServerWLCIncompatibleVendor, psSNMPManagerCount=psSNMPManagerCount, psIappAnnRespTime=psIappAnnRespTime, psIappHandOvrTimeOut=psIappHandOvrTimeOut, psASClientPacketsOut=psASClientPacketsOut, pliWlanIfRegulatoryDomainList=pliWlanIfRegulatoryDomainList, mibs=mibs, psHardwareVersionNumber=psHardwareVersionNumber, radiusClientMIBObjects=radiusClientMIBObjects, radiusClientInvalidServerAddresses=radiusClientInvalidServerAddresses, pliWlanIfIndex=pliWlanIfIndex, psIappAnnReqOut=psIappAnnReqOut, psIappHandOvrRespIn=psIappHandOvrRespIn, endIPAddress=endIPAddress, pliWlanIfClosedSystem=pliWlanIfClosedSystem, psSerialDataBits=psSerialDataBits, psIpxClientStatus=psIpxClientStatus, psIappMaxHandOvrRetries=psIappMaxHandOvrRetries, orinocoIAPP=orinocoIAPP, orinocoProducts=orinocoProducts, radiusServerResponseTime=radiusServerResponseTime, psIappAnnReqIn=psIappAnnReqIn, orinocoPHY=orinocoPHY, psPPPPrimaryDNSIPAddress=psPPPPrimaryDNSIPAddress, psShimECPRetransmissionCount=psShimECPRetransmissionCount, oriLinkTestTableEntry=oriLinkTestTableEntry, width=width, oriLinkTestHisStandardFrameCount=oriLinkTestHisStandardFrameCount, entryStatus=entryStatus, orinocoShimECPSetup=orinocoShimECPSetup, psShimECPRepeatResponseCount=psShimECPRepeatResponseCount, oriLinkTestOurStandardFrameCount=oriLinkTestOurStandardFrameCount, psSerialFlowControl=psSerialFlowControl, psIpxStatus=psIpxStatus, psIappHandOvrRespOut=psIappHandOvrRespOut, oriLinkTestHisMaxNoiseLevel=oriLinkTestHisMaxNoiseLevel, psIpxClientMAC=psIpxClientMAC, radiusClientMIBConformance=radiusClientMIBConformance, accessServerDuplicateIPAddressEncountered=accessServerDuplicateIPAddressEncountered, orinocoDriver=orinocoDriver, psASClientPacketsIn=psASClientPacketsIn, psPPPIPAddressAssignmentType=psPPPIPAddressAssignmentType, oriLinkTestInterval=oriLinkTestInterval, psTFTPIPAddress=psTFTPIPAddress, accessServerWLCFirmwareDownloadFailure=accessServerWLCFirmwareDownloadFailure)
mibBuilder.exportSymbols("AS-2000", psPPPPAPPriority=psPPPPAPPriority)
