#
# PySNMP MIB module STN-CHASSIS-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/STN-CHASSIS-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 21:03:23 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, ObjectIdentifier, Integer = mibBuilder.importSymbols("ASN1", "OctetString", "ObjectIdentifier", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsUnion, SingleValueConstraint, ConstraintsIntersection, ValueRangeConstraint, ValueSizeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsUnion", "SingleValueConstraint", "ConstraintsIntersection", "ValueRangeConstraint", "ValueSizeConstraint")
ObjectGroup, ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ObjectGroup", "ModuleCompliance", "NotificationGroup")
iso, Gauge32, TimeTicks, Integer32, Counter64, MibIdentifier, MibScalar, MibTable, MibTableRow, MibTableColumn, Counter32, ObjectIdentity, Bits, IpAddress, Unsigned32, ModuleIdentity, NotificationType = mibBuilder.importSymbols("SNMPv2-SMI", "iso", "Gauge32", "TimeTicks", "Integer32", "Counter64", "MibIdentifier", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Counter32", "ObjectIdentity", "Bits", "IpAddress", "Unsigned32", "ModuleIdentity", "NotificationType")
TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString")
stnNotification, stnSystems = mibBuilder.importSymbols("SPRING-TIDE-NETWORKS-SMI", "stnNotification", "stnSystems")
StnHardwareSubModuleType, StnPowerStatus, StnEngineOperStatus, StnEngineAdminStatus, StnResourceStatus, StnModuleAdminStatus, StnModuleOperStatus, StnBatteryStatus, StnFlashStatus, StnHardwareModuleType, StnLedStatus = mibBuilder.importSymbols("SPRING-TIDE-NETWORKS-TC", "StnHardwareSubModuleType", "StnPowerStatus", "StnEngineOperStatus", "StnEngineAdminStatus", "StnResourceStatus", "StnModuleAdminStatus", "StnModuleOperStatus", "StnBatteryStatus", "StnFlashStatus", "StnHardwareModuleType", "StnLedStatus")
stnChassis = ModuleIdentity((1, 3, 6, 1, 4, 1, 3551, 2, 1))
if mibBuilder.loadTexts: stnChassis.setLastUpdated('0002160000Z')
if mibBuilder.loadTexts: stnChassis.setOrganization('Spring Tide Networks, Inc.')
stnChassisObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 3551, 2, 1, 1))
stnChassisMibConformance = MibIdentifier((1, 3, 6, 1, 4, 1, 3551, 2, 1, 2))
stnChassisVars = MibIdentifier((1, 3, 6, 1, 4, 1, 3551, 2, 1, 1, 1))
stnModules = MibIdentifier((1, 3, 6, 1, 4, 1, 3551, 2, 1, 1, 2))
stnLeds = MibIdentifier((1, 3, 6, 1, 4, 1, 3551, 2, 1, 1, 3))
stnPower = MibIdentifier((1, 3, 6, 1, 4, 1, 3551, 2, 1, 1, 4))
stnResource = MibIdentifier((1, 3, 6, 1, 4, 1, 3551, 2, 1, 1, 5))
stnChassisTrapVars = MibIdentifier((1, 3, 6, 1, 4, 1, 3551, 2, 1, 1, 100))
stnChassisSysType = MibScalar((1, 3, 6, 1, 4, 1, 3551, 2, 1, 1, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("other", 1), ("stn5000", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: stnChassisSysType.setStatus('current')
stnChassisSysDescr = MibScalar((1, 3, 6, 1, 4, 1, 3551, 2, 1, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stnChassisSysDescr.setStatus('current')
stnChassisId = MibScalar((1, 3, 6, 1, 4, 1, 3551, 2, 1, 1, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stnChassisId.setStatus('current')
stnSlotTable = MibTable((1, 3, 6, 1, 4, 1, 3551, 2, 1, 1, 2, 1), )
if mibBuilder.loadTexts: stnSlotTable.setStatus('current')
stnSlotEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3551, 2, 1, 1, 2, 1, 1), ).setIndexNames((0, "STN-CHASSIS-MIB", "stnSlotIndex"))
if mibBuilder.loadTexts: stnSlotEntry.setStatus('current')
stnSlotIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3551, 2, 1, 1, 2, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stnSlotIndex.setStatus('current')
stnModuleType = MibTableColumn((1, 3, 6, 1, 4, 1, 3551, 2, 1, 1, 2, 1, 1, 2), StnHardwareModuleType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stnModuleType.setStatus('current')
stnModulePeer = MibTableColumn((1, 3, 6, 1, 4, 1, 3551, 2, 1, 1, 2, 1, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stnModulePeer.setStatus('current')
stnModuleAdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3551, 2, 1, 1, 2, 1, 1, 4), StnModuleAdminStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stnModuleAdminStatus.setStatus('current')
stnModuleOperStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3551, 2, 1, 1, 2, 1, 1, 5), StnModuleOperStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stnModuleOperStatus.setStatus('current')
stnModuleDescr = MibTableColumn((1, 3, 6, 1, 4, 1, 3551, 2, 1, 1, 2, 1, 1, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stnModuleDescr.setStatus('current')
stnModuleLed = MibTableColumn((1, 3, 6, 1, 4, 1, 3551, 2, 1, 1, 2, 1, 1, 7), StnLedStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stnModuleLed.setStatus('current')
stnSubModules = MibTableColumn((1, 3, 6, 1, 4, 1, 3551, 2, 1, 1, 2, 1, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stnSubModules.setStatus('current')
stnSubModuleTable = MibTable((1, 3, 6, 1, 4, 1, 3551, 2, 1, 1, 2, 2), )
if mibBuilder.loadTexts: stnSubModuleTable.setStatus('current')
stnSubModuleEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3551, 2, 1, 1, 2, 2, 1), ).setIndexNames((0, "STN-CHASSIS-MIB", "stnSubModuleSlot"), (0, "STN-CHASSIS-MIB", "stnSubModuleIndex"))
if mibBuilder.loadTexts: stnSubModuleEntry.setStatus('current')
stnSubModuleSlot = MibTableColumn((1, 3, 6, 1, 4, 1, 3551, 2, 1, 1, 2, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stnSubModuleSlot.setStatus('current')
stnSubModuleIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3551, 2, 1, 1, 2, 2, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stnSubModuleIndex.setStatus('current')
stnSubModuleType = MibTableColumn((1, 3, 6, 1, 4, 1, 3551, 2, 1, 1, 2, 2, 1, 3), StnHardwareSubModuleType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stnSubModuleType.setStatus('current')
stnSubModulePeer = MibTableColumn((1, 3, 6, 1, 4, 1, 3551, 2, 1, 1, 2, 2, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stnSubModulePeer.setStatus('current')
stnSubModuleAdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3551, 2, 1, 1, 2, 2, 1, 5), StnModuleAdminStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stnSubModuleAdminStatus.setStatus('current')
stnSubModuleOperStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3551, 2, 1, 1, 2, 2, 1, 6), StnModuleOperStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stnSubModuleOperStatus.setStatus('current')
stnSubModuleDescr = MibTableColumn((1, 3, 6, 1, 4, 1, 3551, 2, 1, 1, 2, 2, 1, 7), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stnSubModuleDescr.setStatus('current')
stnEngineTable = MibTable((1, 3, 6, 1, 4, 1, 3551, 2, 1, 1, 2, 3), )
if mibBuilder.loadTexts: stnEngineTable.setStatus('current')
stnEngineEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3551, 2, 1, 1, 2, 3, 1), ).setIndexNames((0, "STN-CHASSIS-MIB", "stnEngineIndex"))
if mibBuilder.loadTexts: stnEngineEntry.setStatus('current')
stnEngineIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3551, 2, 1, 1, 2, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stnEngineIndex.setStatus('current')
stnEngineSlot = MibTableColumn((1, 3, 6, 1, 4, 1, 3551, 2, 1, 1, 2, 3, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stnEngineSlot.setStatus('current')
stnEngineCpu = MibTableColumn((1, 3, 6, 1, 4, 1, 3551, 2, 1, 1, 2, 3, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stnEngineCpu.setStatus('current')
stnEngineType = MibTableColumn((1, 3, 6, 1, 4, 1, 3551, 2, 1, 1, 2, 3, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("unknown", 1), ("swc", 2), ("rpe", 3), ("ecf", 4), ("ecf2", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: stnEngineType.setStatus('current')
stnEnginePeer = MibTableColumn((1, 3, 6, 1, 4, 1, 3551, 2, 1, 1, 2, 3, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stnEnginePeer.setStatus('current')
stnEngineAdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3551, 2, 1, 1, 2, 3, 1, 6), StnEngineAdminStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stnEngineAdminStatus.setStatus('current')
stnEngineOperStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3551, 2, 1, 1, 2, 3, 1, 7), StnEngineOperStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stnEngineOperStatus.setStatus('current')
stnEngineDescr = MibTableColumn((1, 3, 6, 1, 4, 1, 3551, 2, 1, 1, 2, 3, 1, 8), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stnEngineDescr.setStatus('current')
stnLedFanTray = MibScalar((1, 3, 6, 1, 4, 1, 3551, 2, 1, 1, 3, 1), StnLedStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stnLedFanTray.setStatus('current')
stnLedPowerA = MibScalar((1, 3, 6, 1, 4, 1, 3551, 2, 1, 1, 3, 2), StnLedStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stnLedPowerA.setStatus('current')
stnLedPowerB = MibScalar((1, 3, 6, 1, 4, 1, 3551, 2, 1, 1, 3, 3), StnLedStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stnLedPowerB.setStatus('current')
stnLedAlarm = MibScalar((1, 3, 6, 1, 4, 1, 3551, 2, 1, 1, 3, 4), StnLedStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stnLedAlarm.setStatus('current')
stnFanTrayLedTable = MibTable((1, 3, 6, 1, 4, 1, 3551, 2, 1, 1, 3, 5), )
if mibBuilder.loadTexts: stnFanTrayLedTable.setStatus('current')
stnFanTrayLedEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3551, 2, 1, 1, 3, 5, 1), ).setIndexNames((0, "STN-CHASSIS-MIB", "stnFanTrayLedIndex"))
if mibBuilder.loadTexts: stnFanTrayLedEntry.setStatus('current')
stnFanTrayLedIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3551, 2, 1, 1, 3, 5, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stnFanTrayLedIndex.setStatus('current')
stnFanTrayLedSlotIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3551, 2, 1, 1, 3, 5, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stnFanTrayLedSlotIndex.setStatus('current')
stnFanTrayLedStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3551, 2, 1, 1, 3, 5, 1, 3), StnLedStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stnFanTrayLedStatus.setStatus('current')
stnPortLedTable = MibTable((1, 3, 6, 1, 4, 1, 3551, 2, 1, 1, 3, 6), )
if mibBuilder.loadTexts: stnPortLedTable.setStatus('current')
stnPortLedEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3551, 2, 1, 1, 3, 6, 1), ).setIndexNames((0, "STN-CHASSIS-MIB", "stnPortLedSlotIndex"), (0, "STN-CHASSIS-MIB", "stnPortLedPortIndex"), (0, "STN-CHASSIS-MIB", "stnPortLedIndex"))
if mibBuilder.loadTexts: stnPortLedEntry.setStatus('current')
stnPortLedSlotIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3551, 2, 1, 1, 3, 6, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stnPortLedSlotIndex.setStatus('current')
stnPortLedPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3551, 2, 1, 1, 3, 6, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stnPortLedPortIndex.setStatus('current')
stnPortLedIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3551, 2, 1, 1, 3, 6, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stnPortLedIndex.setStatus('current')
stnPortLedStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3551, 2, 1, 1, 3, 6, 1, 4), StnLedStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stnPortLedStatus.setStatus('current')
stnPortLedDescr = MibTableColumn((1, 3, 6, 1, 4, 1, 3551, 2, 1, 1, 3, 6, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stnPortLedDescr.setStatus('current')
stnPowerTable = MibTable((1, 3, 6, 1, 4, 1, 3551, 2, 1, 1, 4, 1), )
if mibBuilder.loadTexts: stnPowerTable.setStatus('current')
stnPowerEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3551, 2, 1, 1, 4, 1, 1), ).setIndexNames((0, "STN-CHASSIS-MIB", "stnPowerIndex"))
if mibBuilder.loadTexts: stnPowerEntry.setStatus('current')
stnPowerIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3551, 2, 1, 1, 4, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stnPowerIndex.setStatus('current')
stnPowerStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3551, 2, 1, 1, 4, 1, 1, 2), StnPowerStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stnPowerStatus.setStatus('current')
stnPowerDescr = MibTableColumn((1, 3, 6, 1, 4, 1, 3551, 2, 1, 1, 4, 1, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stnPowerDescr.setStatus('current')
stnBatteryTable = MibTable((1, 3, 6, 1, 4, 1, 3551, 2, 1, 1, 4, 2), )
if mibBuilder.loadTexts: stnBatteryTable.setStatus('current')
stnBatteryEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3551, 2, 1, 1, 4, 2, 1), ).setIndexNames((0, "STN-CHASSIS-MIB", "stnBatterySlotIndex"))
if mibBuilder.loadTexts: stnBatteryEntry.setStatus('current')
stnBatterySlotIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3551, 2, 1, 1, 4, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stnBatterySlotIndex.setStatus('current')
stnBatteryType = MibTableColumn((1, 3, 6, 1, 4, 1, 3551, 2, 1, 1, 4, 2, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stnBatteryType.setStatus('current')
stnBatteryStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3551, 2, 1, 1, 4, 2, 1, 3), StnBatteryStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stnBatteryStatus.setStatus('current')
stnBatteryDescr = MibTableColumn((1, 3, 6, 1, 4, 1, 3551, 2, 1, 1, 4, 2, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stnBatteryDescr.setStatus('current')
stnCpuUtilizationTable = MibTable((1, 3, 6, 1, 4, 1, 3551, 2, 1, 1, 5, 1), )
if mibBuilder.loadTexts: stnCpuUtilizationTable.setStatus('current')
stnCpuUtilizationEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3551, 2, 1, 1, 5, 1, 1), ).setIndexNames((0, "STN-CHASSIS-MIB", "stnCpuUtilizationIndex"))
if mibBuilder.loadTexts: stnCpuUtilizationEntry.setStatus('current')
stnCpuUtilizationIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3551, 2, 1, 1, 5, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stnCpuUtilizationIndex.setStatus('current')
stnCpuUtilizationCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 3551, 2, 1, 1, 5, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stnCpuUtilizationCurrent.setStatus('current')
stnCpuUtilization5Min = MibTableColumn((1, 3, 6, 1, 4, 1, 3551, 2, 1, 1, 5, 1, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stnCpuUtilization5Min.setStatus('current')
stnCpuUtilization15Min = MibTableColumn((1, 3, 6, 1, 4, 1, 3551, 2, 1, 1, 5, 1, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stnCpuUtilization15Min.setStatus('current')
stnCpuUtilization30Min = MibTableColumn((1, 3, 6, 1, 4, 1, 3551, 2, 1, 1, 5, 1, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stnCpuUtilization30Min.setStatus('current')
stnCpuIpTable = MibTable((1, 3, 6, 1, 4, 1, 3551, 2, 1, 1, 5, 2), )
if mibBuilder.loadTexts: stnCpuIpTable.setStatus('current')
stnCpuIpEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3551, 2, 1, 1, 5, 2, 1), ).setIndexNames((0, "STN-CHASSIS-MIB", "stnCpuIpIndex"))
if mibBuilder.loadTexts: stnCpuIpEntry.setStatus('current')
stnCpuIpIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3551, 2, 1, 1, 5, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stnCpuIpIndex.setStatus('current')
stnCpuIpRouteLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 3551, 2, 1, 1, 5, 2, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stnCpuIpRouteLimit.setStatus('current')
stnCpuIpRoutesInUse = MibTableColumn((1, 3, 6, 1, 4, 1, 3551, 2, 1, 1, 5, 2, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stnCpuIpRoutesInUse.setStatus('current')
stnCpuIpRoutesBooked = MibTableColumn((1, 3, 6, 1, 4, 1, 3551, 2, 1, 1, 5, 2, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stnCpuIpRoutesBooked.setStatus('current')
stnCpuIpFwdProcesses = MibTableColumn((1, 3, 6, 1, 4, 1, 3551, 2, 1, 1, 5, 2, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stnCpuIpFwdProcesses.setStatus('current')
stnCpuIpRoutingProcesses = MibTableColumn((1, 3, 6, 1, 4, 1, 3551, 2, 1, 1, 5, 2, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stnCpuIpRoutingProcesses.setStatus('current')
stnNotificationCfgChangeTime = MibScalar((1, 3, 6, 1, 4, 1, 3551, 2, 1, 1, 100, 1), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stnNotificationCfgChangeTime.setStatus('current')
stnNotificationFlashStatus = MibScalar((1, 3, 6, 1, 4, 1, 3551, 2, 1, 1, 100, 2), StnFlashStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stnNotificationFlashStatus.setStatus('current')
stnNotificationModuleTemperature = MibScalar((1, 3, 6, 1, 4, 1, 3551, 2, 1, 1, 100, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stnNotificationModuleTemperature.setStatus('current')
stnNotificationResourceStatus = MibScalar((1, 3, 6, 1, 4, 1, 3551, 2, 1, 1, 100, 4), StnResourceStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stnNotificationResourceStatus.setStatus('current')
stnRedundant = NotificationType((1, 3, 6, 1, 4, 1, 3551, 2, 100, 0, 1)).setObjects(("STN-CHASSIS-MIB", "stnSlotIndex"), ("STN-CHASSIS-MIB", "stnModuleType"), ("STN-CHASSIS-MIB", "stnModuleOperStatus"))
if mibBuilder.loadTexts: stnRedundant.setStatus('current')
stnNotRedundant = NotificationType((1, 3, 6, 1, 4, 1, 3551, 2, 100, 0, 2)).setObjects(("STN-CHASSIS-MIB", "stnSlotIndex"), ("STN-CHASSIS-MIB", "stnModuleType"), ("STN-CHASSIS-MIB", "stnModuleOperStatus"))
if mibBuilder.loadTexts: stnNotRedundant.setStatus('current')
stnModuleUp = NotificationType((1, 3, 6, 1, 4, 1, 3551, 2, 100, 0, 3)).setObjects(("STN-CHASSIS-MIB", "stnSlotIndex"), ("STN-CHASSIS-MIB", "stnModuleType"), ("STN-CHASSIS-MIB", "stnModuleOperStatus"), ("STN-CHASSIS-MIB", "stnModuleDescr"), ("STN-CHASSIS-MIB", "stnSubModules"))
if mibBuilder.loadTexts: stnModuleUp.setStatus('current')
stnModuleDown = NotificationType((1, 3, 6, 1, 4, 1, 3551, 2, 100, 0, 4)).setObjects(("STN-CHASSIS-MIB", "stnSlotIndex"), ("STN-CHASSIS-MIB", "stnModuleType"), ("STN-CHASSIS-MIB", "stnModuleOperStatus"), ("STN-CHASSIS-MIB", "stnModuleDescr"), ("STN-CHASSIS-MIB", "stnSubModules"))
if mibBuilder.loadTexts: stnModuleDown.setStatus('current')
stnSubModuleUp = NotificationType((1, 3, 6, 1, 4, 1, 3551, 2, 100, 0, 5)).setObjects(("STN-CHASSIS-MIB", "stnSubModuleSlot"), ("STN-CHASSIS-MIB", "stnSubModuleIndex"), ("STN-CHASSIS-MIB", "stnSubModuleType"), ("STN-CHASSIS-MIB", "stnSubModuleOperStatus"), ("STN-CHASSIS-MIB", "stnSubModuleDescr"))
if mibBuilder.loadTexts: stnSubModuleUp.setStatus('current')
stnSubModuleDown = NotificationType((1, 3, 6, 1, 4, 1, 3551, 2, 100, 0, 6)).setObjects(("STN-CHASSIS-MIB", "stnSubModuleSlot"), ("STN-CHASSIS-MIB", "stnSubModuleIndex"), ("STN-CHASSIS-MIB", "stnSubModuleType"), ("STN-CHASSIS-MIB", "stnSubModuleOperStatus"), ("STN-CHASSIS-MIB", "stnSubModuleDescr"))
if mibBuilder.loadTexts: stnSubModuleDown.setStatus('current')
stnEngineUp = NotificationType((1, 3, 6, 1, 4, 1, 3551, 2, 100, 0, 7)).setObjects(("STN-CHASSIS-MIB", "stnEngineIndex"), ("STN-CHASSIS-MIB", "stnEngineSlot"), ("STN-CHASSIS-MIB", "stnEngineCpu"), ("STN-CHASSIS-MIB", "stnEngineType"), ("STN-CHASSIS-MIB", "stnEngineOperStatus"))
if mibBuilder.loadTexts: stnEngineUp.setStatus('current')
stnEngineDown = NotificationType((1, 3, 6, 1, 4, 1, 3551, 2, 100, 0, 8)).setObjects(("STN-CHASSIS-MIB", "stnEngineIndex"), ("STN-CHASSIS-MIB", "stnEngineSlot"), ("STN-CHASSIS-MIB", "stnEngineCpu"), ("STN-CHASSIS-MIB", "stnEngineType"), ("STN-CHASSIS-MIB", "stnEngineOperStatus"))
if mibBuilder.loadTexts: stnEngineDown.setStatus('current')
stnBatteryLow = NotificationType((1, 3, 6, 1, 4, 1, 3551, 2, 100, 0, 9)).setObjects(("STN-CHASSIS-MIB", "stnBatterySlotIndex"), ("STN-CHASSIS-MIB", "stnBatteryType"), ("STN-CHASSIS-MIB", "stnBatteryStatus"))
if mibBuilder.loadTexts: stnBatteryLow.setStatus('current')
stnFlashFailure = NotificationType((1, 3, 6, 1, 4, 1, 3551, 2, 100, 0, 10)).setObjects(("STN-CHASSIS-MIB", "stnNotificationFlashStatus"))
if mibBuilder.loadTexts: stnFlashFailure.setStatus('current')
stnResourceFailure = NotificationType((1, 3, 6, 1, 4, 1, 3551, 2, 100, 0, 11)).setObjects(("STN-CHASSIS-MIB", "stnNotificationResourceStatus"))
if mibBuilder.loadTexts: stnResourceFailure.setStatus('current')
stnFailover = NotificationType((1, 3, 6, 1, 4, 1, 3551, 2, 100, 0, 12)).setObjects(("STN-CHASSIS-MIB", "stnSlotIndex"), ("STN-CHASSIS-MIB", "stnModuleType"))
if mibBuilder.loadTexts: stnFailover.setStatus('current')
stnCfgChange = NotificationType((1, 3, 6, 1, 4, 1, 3551, 2, 100, 0, 19)).setObjects(("STN-CHASSIS-MIB", "stnNotificationCfgChangeTime"))
if mibBuilder.loadTexts: stnCfgChange.setStatus('current')
stnPowerFailure = NotificationType((1, 3, 6, 1, 4, 1, 3551, 2, 100, 0, 55)).setObjects(("STN-CHASSIS-MIB", "stnPowerIndex"), ("STN-CHASSIS-MIB", "stnPowerStatus"))
if mibBuilder.loadTexts: stnPowerFailure.setStatus('current')
stnTemperatureFailure = NotificationType((1, 3, 6, 1, 4, 1, 3551, 2, 100, 0, 56)).setObjects(("STN-CHASSIS-MIB", "stnSlotIndex"), ("STN-CHASSIS-MIB", "stnModuleType"), ("STN-CHASSIS-MIB", "stnSubModuleType"), ("STN-CHASSIS-MIB", "stnNotificationModuleTemperature"))
if mibBuilder.loadTexts: stnTemperatureFailure.setStatus('current')
stnChassisMibCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 3551, 2, 1, 2, 1))
stnChassisMibGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 3551, 2, 1, 2, 2))
stnChassisMibComplianceRev1 = ModuleCompliance((1, 3, 6, 1, 4, 1, 3551, 2, 1, 2, 1, 1)).setObjects(("STN-CHASSIS-MIB", "stnChassisMibGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    stnChassisMibComplianceRev1 = stnChassisMibComplianceRev1.setStatus('current')
stnChassisMibGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 3551, 2, 1, 2, 2, 1)).setObjects(("STN-CHASSIS-MIB", "stnChassisSysType"), ("STN-CHASSIS-MIB", "stnChassisSysDescr"), ("STN-CHASSIS-MIB", "stnChassisId"), ("STN-CHASSIS-MIB", "stnSlotIndex"), ("STN-CHASSIS-MIB", "stnModuleType"), ("STN-CHASSIS-MIB", "stnModulePeer"), ("STN-CHASSIS-MIB", "stnModuleAdminStatus"), ("STN-CHASSIS-MIB", "stnModuleOperStatus"), ("STN-CHASSIS-MIB", "stnModuleDescr"), ("STN-CHASSIS-MIB", "stnModuleLed"), ("STN-CHASSIS-MIB", "stnSubModules"), ("STN-CHASSIS-MIB", "stnSubModuleSlot"), ("STN-CHASSIS-MIB", "stnSubModuleIndex"), ("STN-CHASSIS-MIB", "stnSubModuleType"), ("STN-CHASSIS-MIB", "stnSubModulePeer"), ("STN-CHASSIS-MIB", "stnSubModuleAdminStatus"), ("STN-CHASSIS-MIB", "stnSubModuleOperStatus"), ("STN-CHASSIS-MIB", "stnSubModuleDescr"), ("STN-CHASSIS-MIB", "stnEngineIndex"), ("STN-CHASSIS-MIB", "stnEngineSlot"), ("STN-CHASSIS-MIB", "stnEngineCpu"), ("STN-CHASSIS-MIB", "stnEngineType"), ("STN-CHASSIS-MIB", "stnEnginePeer"), ("STN-CHASSIS-MIB", "stnEngineAdminStatus"), ("STN-CHASSIS-MIB", "stnEngineOperStatus"), ("STN-CHASSIS-MIB", "stnEngineDescr"), ("STN-CHASSIS-MIB", "stnLedFanTray"), ("STN-CHASSIS-MIB", "stnLedPowerA"), ("STN-CHASSIS-MIB", "stnLedPowerB"), ("STN-CHASSIS-MIB", "stnLedAlarm"), ("STN-CHASSIS-MIB", "stnFanTrayLedIndex"), ("STN-CHASSIS-MIB", "stnFanTrayLedSlotIndex"), ("STN-CHASSIS-MIB", "stnFanTrayLedStatus"), ("STN-CHASSIS-MIB", "stnPortLedSlotIndex"), ("STN-CHASSIS-MIB", "stnPortLedPortIndex"), ("STN-CHASSIS-MIB", "stnPortLedIndex"), ("STN-CHASSIS-MIB", "stnPortLedStatus"), ("STN-CHASSIS-MIB", "stnPortLedDescr"), ("STN-CHASSIS-MIB", "stnPowerIndex"), ("STN-CHASSIS-MIB", "stnPowerStatus"), ("STN-CHASSIS-MIB", "stnPowerDescr"), ("STN-CHASSIS-MIB", "stnBatterySlotIndex"), ("STN-CHASSIS-MIB", "stnBatteryType"), ("STN-CHASSIS-MIB", "stnBatteryStatus"), ("STN-CHASSIS-MIB", "stnBatteryDescr"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    stnChassisMibGroup = stnChassisMibGroup.setStatus('current')
mibBuilder.exportSymbols("STN-CHASSIS-MIB", stnBatteryTable=stnBatteryTable, stnCpuUtilizationEntry=stnCpuUtilizationEntry, stnSubModuleSlot=stnSubModuleSlot, stnCfgChange=stnCfgChange, stnFanTrayLedEntry=stnFanTrayLedEntry, stnPortLedTable=stnPortLedTable, stnChassis=stnChassis, stnPowerStatus=stnPowerStatus, stnPowerFailure=stnPowerFailure, stnLeds=stnLeds, stnBatteryStatus=stnBatteryStatus, stnSlotIndex=stnSlotIndex, stnNotRedundant=stnNotRedundant, stnChassisTrapVars=stnChassisTrapVars, stnSubModuleDescr=stnSubModuleDescr, stnNotificationCfgChangeTime=stnNotificationCfgChangeTime, stnEngineDescr=stnEngineDescr, stnCpuIpRoutingProcesses=stnCpuIpRoutingProcesses, stnBatterySlotIndex=stnBatterySlotIndex, stnChassisSysDescr=stnChassisSysDescr, stnSubModuleAdminStatus=stnSubModuleAdminStatus, stnChassisVars=stnChassisVars, stnSubModuleEntry=stnSubModuleEntry, stnFanTrayLedTable=stnFanTrayLedTable, stnCpuUtilization5Min=stnCpuUtilization5Min, stnSubModules=stnSubModules, stnPowerIndex=stnPowerIndex, stnChassisSysType=stnChassisSysType, stnCpuUtilization15Min=stnCpuUtilization15Min, stnResourceFailure=stnResourceFailure, stnCpuIpRouteLimit=stnCpuIpRouteLimit, stnCpuIpRoutesInUse=stnCpuIpRoutesInUse, stnSubModuleType=stnSubModuleType, stnLedFanTray=stnLedFanTray, stnResource=stnResource, stnChassisMibGroups=stnChassisMibGroups, stnEngineEntry=stnEngineEntry, stnPortLedDescr=stnPortLedDescr, stnEngineDown=stnEngineDown, stnFanTrayLedSlotIndex=stnFanTrayLedSlotIndex, stnChassisObjects=stnChassisObjects, stnModules=stnModules, stnCpuUtilization30Min=stnCpuUtilization30Min, stnSlotEntry=stnSlotEntry, stnFanTrayLedStatus=stnFanTrayLedStatus, stnBatteryDescr=stnBatteryDescr, stnSubModuleUp=stnSubModuleUp, stnSubModulePeer=stnSubModulePeer, stnPortLedEntry=stnPortLedEntry, PYSNMP_MODULE_ID=stnChassis, stnSubModuleDown=stnSubModuleDown, stnCpuIpRoutesBooked=stnCpuIpRoutesBooked, stnRedundant=stnRedundant, stnEngineAdminStatus=stnEngineAdminStatus, stnEngineTable=stnEngineTable, stnChassisMibConformance=stnChassisMibConformance, stnEngineSlot=stnEngineSlot, stnBatteryType=stnBatteryType, stnLedPowerB=stnLedPowerB, stnCpuIpFwdProcesses=stnCpuIpFwdProcesses, stnPortLedIndex=stnPortLedIndex, stnCpuUtilizationCurrent=stnCpuUtilizationCurrent, stnFlashFailure=stnFlashFailure, stnChassisMibComplianceRev1=stnChassisMibComplianceRev1, stnModuleLed=stnModuleLed, stnPortLedStatus=stnPortLedStatus, stnChassisId=stnChassisId, stnCpuIpIndex=stnCpuIpIndex, stnModuleUp=stnModuleUp, stnFailover=stnFailover, stnCpuIpTable=stnCpuIpTable, stnSubModuleOperStatus=stnSubModuleOperStatus, stnEngineCpu=stnEngineCpu, stnEngineOperStatus=stnEngineOperStatus, stnEnginePeer=stnEnginePeer, stnBatteryEntry=stnBatteryEntry, stnNotificationResourceStatus=stnNotificationResourceStatus, stnNotificationFlashStatus=stnNotificationFlashStatus, stnSlotTable=stnSlotTable, stnSubModuleIndex=stnSubModuleIndex, stnModuleAdminStatus=stnModuleAdminStatus, stnBatteryLow=stnBatteryLow, stnModuleType=stnModuleType, stnEngineIndex=stnEngineIndex, stnModuleDescr=stnModuleDescr, stnPowerDescr=stnPowerDescr, stnSubModuleTable=stnSubModuleTable, stnModuleOperStatus=stnModuleOperStatus, stnCpuUtilizationTable=stnCpuUtilizationTable, stnPortLedPortIndex=stnPortLedPortIndex, stnChassisMibCompliances=stnChassisMibCompliances, stnModulePeer=stnModulePeer, stnEngineUp=stnEngineUp, stnPowerEntry=stnPowerEntry, stnModuleDown=stnModuleDown, stnNotificationModuleTemperature=stnNotificationModuleTemperature, stnLedPowerA=stnLedPowerA, stnChassisMibGroup=stnChassisMibGroup, stnCpuIpEntry=stnCpuIpEntry, stnPortLedSlotIndex=stnPortLedSlotIndex, stnFanTrayLedIndex=stnFanTrayLedIndex, stnCpuUtilizationIndex=stnCpuUtilizationIndex, stnPowerTable=stnPowerTable, stnPower=stnPower, stnEngineType=stnEngineType, stnLedAlarm=stnLedAlarm, stnTemperatureFailure=stnTemperatureFailure)
