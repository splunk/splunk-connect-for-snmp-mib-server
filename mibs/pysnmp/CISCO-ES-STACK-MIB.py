#
# PySNMP MIB module CISCO-ES-STACK-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/CISCO-ES-STACK-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 17:40:11 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, Integer, OctetString = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "Integer", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsIntersection, ValueSizeConstraint, SingleValueConstraint, ValueRangeConstraint, ConstraintsUnion = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsIntersection", "ValueSizeConstraint", "SingleValueConstraint", "ValueRangeConstraint", "ConstraintsUnion")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
sysLocation, sysName = mibBuilder.importSymbols("SNMPv2-MIB", "sysLocation", "sysName")
TimeTicks, iso, NotificationType, Bits, Counter64, MibScalar, MibTable, MibTableRow, MibTableColumn, Counter32, Gauge32, enterprises, MibIdentifier, ModuleIdentity, ObjectIdentity, IpAddress, Integer32, Unsigned32, NotificationType = mibBuilder.importSymbols("SNMPv2-SMI", "TimeTicks", "iso", "NotificationType", "Bits", "Counter64", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Counter32", "Gauge32", "enterprises", "MibIdentifier", "ModuleIdentity", "ObjectIdentity", "IpAddress", "Integer32", "Unsigned32", "NotificationType")
TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString")
cisco = MibIdentifier((1, 3, 6, 1, 4, 1, 9))
workgroup = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 5))
class MacAddr(OctetString):
    subtypeSpec = OctetString.subtypeSpec + ValueSizeConstraint(6, 6)
    fixedLength = 6

class BridgeId(OctetString):
    subtypeSpec = OctetString.subtypeSpec + ValueSizeConstraint(8, 8)
    fixedLength = 8

esStack = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 5, 14))
ciscoEsMain = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 5, 14, 1))
ciscoEsConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 5, 14, 1, 1))
ciscoEsStack = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 5, 14, 2))
ciscoEsModule = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 5, 14, 3))
ciscoEsPort = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 5, 14, 4))
ciscoEsDmns = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 5, 14, 5))
ciscoEsEChannel = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 5, 14, 6))
ciscoEsFilter = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 5, 14, 7))
ciscoEsVLANs = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 5, 14, 8))
ciscoEsRouter = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 5, 14, 9))
ciscoEsIpAddr = MibScalar((1, 3, 6, 1, 4, 1, 9, 5, 14, 1, 1, 1), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ciscoEsIpAddr.setStatus('mandatory')
ciscoEsNetMask = MibScalar((1, 3, 6, 1, 4, 1, 9, 5, 14, 1, 1, 2), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ciscoEsNetMask.setStatus('mandatory')
ciscoEsDefaultGateway = MibScalar((1, 3, 6, 1, 4, 1, 9, 5, 14, 1, 1, 3), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ciscoEsDefaultGateway.setStatus('mandatory')
ciscoEsSysCurTime = MibScalar((1, 3, 6, 1, 4, 1, 9, 5, 14, 1, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 128))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ciscoEsSysCurTime.setStatus('mandatory')
ciscoEsConfiguration = MibScalar((1, 3, 6, 1, 4, 1, 9, 5, 14, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("stand-alone", 1), ("back-to-back", 2), ("prostack-matrix", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ciscoEsConfiguration.setStatus('mandatory')
ciscoEsNumSwitches = MibScalar((1, 3, 6, 1, 4, 1, 9, 5, 14, 1, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ciscoEsNumSwitches.setStatus('mandatory')
ciscoEsStackStatus = MibScalar((1, 3, 6, 1, 4, 1, 9, 5, 14, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("running", 1), ("updating", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ciscoEsStackStatus.setStatus('mandatory')
ciscoEsTftpServer = MibScalar((1, 3, 6, 1, 4, 1, 9, 5, 14, 1, 1, 8), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ciscoEsTftpServer.setStatus('mandatory')
ciscoEsTftpServerDomain = MibScalar((1, 3, 6, 1, 4, 1, 9, 5, 14, 1, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 63))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ciscoEsTftpServerDomain.setStatus('mandatory')
ciscoEsTftpFileLoc = MibScalar((1, 3, 6, 1, 4, 1, 9, 5, 14, 1, 1, 10), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 256))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ciscoEsTftpFileLoc.setStatus('mandatory')
ciscoEsSetLock = MibScalar((1, 3, 6, 1, 4, 1, 9, 5, 14, 1, 1, 11), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ciscoEsSetLock.setStatus('mandatory')
ciscoEsProStackMatrixStatus = MibScalar((1, 3, 6, 1, 4, 1, 9, 5, 14, 1, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("primary", 1), ("secondary", 2), ("none", 3), ("failed", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ciscoEsProStackMatrixStatus.setStatus('mandatory')
ciscoEsNumMatrixModules = MibScalar((1, 3, 6, 1, 4, 1, 9, 5, 14, 1, 1, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ciscoEsNumMatrixModules.setStatus('mandatory')
ciscoEsLLPortDsbld = MibScalar((1, 3, 6, 1, 4, 1, 9, 5, 14, 1, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("disabled", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ciscoEsLLPortDsbld.setStatus('mandatory')
ciscoEsTrapRcvrTable = MibTable((1, 3, 6, 1, 4, 1, 9, 5, 14, 1, 1, 25), )
if mibBuilder.loadTexts: ciscoEsTrapRcvrTable.setStatus('mandatory')
ciscoEsTrapRcvrEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 5, 14, 1, 1, 25, 1), ).setIndexNames((0, "CISCO-ES-STACK-MIB", "ciscoEsTrapRcvrIndex"))
if mibBuilder.loadTexts: ciscoEsTrapRcvrEntry.setStatus('mandatory')
ciscoEsTrapRcvrIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 5, 14, 1, 1, 25, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 20))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ciscoEsTrapRcvrIndex.setStatus('mandatory')
ciscoEsTrapRcvrStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 5, 14, 1, 1, 25, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("other", 1), ("valid", 2), ("invalid", 3), ("create", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ciscoEsTrapRcvrStatus.setStatus('mandatory')
ciscoEsTrapRcvrIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 5, 14, 1, 1, 25, 1, 3), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ciscoEsTrapRcvrIpAddress.setStatus('mandatory')
ciscoEsTrapRcvrComm = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 5, 14, 1, 1, 25, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ciscoEsTrapRcvrComm.setStatus('mandatory')
ciscoEsTrapRcvrVLANs = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 5, 14, 1, 1, 25, 1, 5), OctetString().subtype(subtypeSpec=ValueSizeConstraint(128, 128)).setFixedLength(128)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ciscoEsTrapRcvrVLANs.setStatus('mandatory')
ciscoEsStackTable = MibTable((1, 3, 6, 1, 4, 1, 9, 5, 14, 2, 1), )
if mibBuilder.loadTexts: ciscoEsStackTable.setStatus('mandatory')
ciscoEsStackEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 5, 14, 2, 1, 1), ).setIndexNames((0, "CISCO-ES-STACK-MIB", "ciscoEsStackSwitchNumber"), (0, "CISCO-ES-STACK-MIB", "ciscoEsStackSwitchAddr"))
if mibBuilder.loadTexts: ciscoEsStackEntry.setStatus('mandatory')
ciscoEsStackSwitchNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 5, 14, 2, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 8))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ciscoEsStackSwitchNumber.setStatus('mandatory')
ciscoEsStackSwitchAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 5, 14, 2, 1, 1, 2), MacAddr()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ciscoEsStackSwitchAddr.setStatus('mandatory')
ciscoEsStackSwitchFwVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 5, 14, 2, 1, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 128))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ciscoEsStackSwitchFwVersion.setStatus('mandatory')
ciscoEsStackSwitchHwVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 5, 14, 2, 1, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 128))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ciscoEsStackSwitchHwVersion.setStatus('mandatory')
ciscoEsStackSwitchUptime = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 5, 14, 2, 1, 1, 6), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ciscoEsStackSwitchUptime.setStatus('mandatory')
ciscoEsStackSwitchStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 5, 14, 2, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("running", 1), ("coldReset", 2), ("warmReset", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ciscoEsStackSwitchStatus.setStatus('mandatory')
ciscoEsStackSwitchTemperature = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 5, 14, 2, 1, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("normal", 1), ("toohigh", 2), ("unknown", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ciscoEsStackSwitchTemperature.setStatus('mandatory')
ciscoEsStackSwitchMemory = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 5, 14, 2, 1, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ciscoEsStackSwitchMemory.setStatus('mandatory')
ciscoEsStackSwitchProbe = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 5, 14, 2, 1, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ciscoEsStackSwitchProbe.setStatus('mandatory')
ciscoEsStackSwitchProbeDirection = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 5, 14, 2, 1, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("transmit", 1), ("receive", 2), ("both", 3), ("none", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ciscoEsStackSwitchProbeDirection.setStatus('mandatory')
ciscoEsStackSwitchFeatureStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 5, 14, 2, 1, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("standard", 1), ("enhanced", 2), ("unknown", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ciscoEsStackSwitchFeatureStatus.setStatus('mandatory')
ciscoEsStackSwitchFeatureKey = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 5, 14, 2, 1, 1, 13), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ciscoEsStackSwitchFeatureKey.setStatus('mandatory')
ciscoEsStackSwitchPorts = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 5, 14, 2, 1, 1, 14), OctetString().subtype(subtypeSpec=ValueSizeConstraint(4, 4)).setFixedLength(4)).setMaxAccess("readonly")
if mibBuilder.loadTexts: ciscoEsStackSwitchPorts.setStatus('mandatory')
ciscoEsStackSwitchAgingTime = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 5, 14, 2, 1, 1, 15), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 9999))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ciscoEsStackSwitchAgingTime.setStatus('mandatory')
ciscoEsStackSwitchAgingLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 5, 14, 2, 1, 1, 16), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 90))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ciscoEsStackSwitchAgingLevel.setStatus('mandatory')
ciscoEsStackSwitchBufferOverruns = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 5, 14, 2, 1, 1, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ciscoEsStackSwitchBufferOverruns.setStatus('mandatory')
ciscoEsStackSwitchSoftwareFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 5, 14, 2, 1, 1, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ciscoEsStackSwitchSoftwareFrames.setStatus('mandatory')
ciscoEsStackSwitchInErrFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 5, 14, 2, 1, 1, 19), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ciscoEsStackSwitchInErrFrames.setStatus('mandatory')
ciscoEsStackSwitchInShortFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 5, 14, 2, 1, 1, 20), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ciscoEsStackSwitchInShortFrames.setStatus('mandatory')
ciscoEsStackSwitchInLongFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 5, 14, 2, 1, 1, 21), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ciscoEsStackSwitchInLongFrames.setStatus('mandatory')
ciscoEsStackSwitchOutDroppedFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 5, 14, 2, 1, 1, 22), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ciscoEsStackSwitchOutDroppedFrames.setStatus('mandatory')
ciscoEsStackSwitchInNoSpaceFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 5, 14, 2, 1, 1, 23), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ciscoEsStackSwitchInNoSpaceFrames.setStatus('mandatory')
ciscoEsStackSwitchOutTotalReqs = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 5, 14, 2, 1, 1, 24), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ciscoEsStackSwitchOutTotalReqs.setStatus('mandatory')
ciscoEsStackSwitchOutTotalFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 5, 14, 2, 1, 1, 25), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ciscoEsStackSwitchOutTotalFrames.setStatus('mandatory')
ciscoEsStackSwitchLongestHashChain = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 5, 14, 2, 1, 1, 26), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ciscoEsStackSwitchLongestHashChain.setStatus('mandatory')
ciscoEsStackSwitchHashTableFulls = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 5, 14, 2, 1, 1, 27), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ciscoEsStackSwitchHashTableFulls.setStatus('mandatory')
ciscoEsStackSwitchId = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 5, 14, 2, 1, 1, 28), ObjectIdentifier()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ciscoEsStackSwitchId.setStatus('mandatory')
ciscoEsStackSwitchDplxCtrl = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 5, 14, 2, 1, 1, 29), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("hardware", 1), ("software", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ciscoEsStackSwitchDplxCtrl.setStatus('mandatory')
ciscoEsModTable = MibTable((1, 3, 6, 1, 4, 1, 9, 5, 14, 3, 1), )
if mibBuilder.loadTexts: ciscoEsModTable.setStatus('mandatory')
ciscoEsModEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 5, 14, 3, 1, 1), ).setIndexNames((0, "CISCO-ES-STACK-MIB", "ciscoEsModSwitchNumber"), (0, "CISCO-ES-STACK-MIB", "ciscoEsModNumber"))
if mibBuilder.loadTexts: ciscoEsModEntry.setStatus('mandatory')
ciscoEsModSwitchNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 5, 14, 3, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 8))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ciscoEsModSwitchNumber.setStatus('mandatory')
ciscoEsModNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 5, 14, 3, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 8))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ciscoEsModNumber.setStatus('mandatory')
ciscoEsModState = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 5, 14, 3, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("nomodule", 1), ("running", 2), ("stopped", 3), ("faulty", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ciscoEsModState.setStatus('mandatory')
ciscoEsModType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 5, 14, 3, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14))).clone(namedValues=NamedValues(("system", 1), ("ws-X3004", 2), ("ws-X3001", 3), ("ws-X3005", 4), ("ws-X3002", 5), ("ws-X3013", 6), ("ws-X3003", 7), ("ws-X3006", 8), ("unknown", 9), ("none", 10), ("ws-X3007-8", 11), ("ws-X3009", 12), ("ws-X3010", 13), ("ws-X3011", 14)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ciscoEsModType.setStatus('mandatory')
ciscoEsModRevision = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 5, 14, 3, 1, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ciscoEsModRevision.setStatus('mandatory')
ciscoEsModNumPorts = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 5, 14, 3, 1, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ciscoEsModNumPorts.setStatus('mandatory')
ciscoEsModUptime = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 5, 14, 3, 1, 1, 7), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ciscoEsModUptime.setStatus('mandatory')
ciscoEsPortTable = MibTable((1, 3, 6, 1, 4, 1, 9, 5, 14, 4, 1), )
if mibBuilder.loadTexts: ciscoEsPortTable.setStatus('mandatory')
ciscoEsPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 5, 14, 4, 1, 1), ).setIndexNames((0, "CISCO-ES-STACK-MIB", "ciscoEsPortSwitchNumber"), (0, "CISCO-ES-STACK-MIB", "ciscoEsPortNumber"))
if mibBuilder.loadTexts: ciscoEsPortEntry.setStatus('mandatory')
ciscoEsPortSwitchNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 5, 14, 4, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 8))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ciscoEsPortSwitchNumber.setStatus('mandatory')
ciscoEsPortNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 5, 14, 4, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ciscoEsPortNumber.setStatus('mandatory')
ciscoEsPortModNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 5, 14, 4, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ciscoEsPortModNumber.setStatus('mandatory')
ciscoEsPortIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 5, 14, 4, 1, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ciscoEsPortIfIndex.setStatus('mandatory')
ciscoEsPortDuplex = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 5, 14, 4, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("fullDuplex", 1), ("halfDuplex", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ciscoEsPortDuplex.setStatus('mandatory')
ciscoEsPortRcvLocalFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 5, 14, 4, 1, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ciscoEsPortRcvLocalFrames.setStatus('mandatory')
ciscoEsPortForwardedFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 5, 14, 4, 1, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ciscoEsPortForwardedFrames.setStatus('mandatory')
ciscoEsPortMostStations = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 5, 14, 4, 1, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ciscoEsPortMostStations.setStatus('mandatory')
ciscoEsPortMaxStations = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 5, 14, 4, 1, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ciscoEsPortMaxStations.setStatus('mandatory')
ciscoEsPortSWHandledFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 5, 14, 4, 1, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ciscoEsPortSWHandledFrames.setStatus('mandatory')
ciscoEsPortLocalStations = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 5, 14, 4, 1, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ciscoEsPortLocalStations.setStatus('mandatory')
ciscoEsPortRemoteStations = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 5, 14, 4, 1, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ciscoEsPortRemoteStations.setStatus('mandatory')
ciscoEsPortUnknownStaFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 5, 14, 4, 1, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ciscoEsPortUnknownStaFrames.setStatus('mandatory')
ciscoEsPortResetStats = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 5, 14, 4, 1, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("running", 2), ("reset", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ciscoEsPortResetStats.setStatus('mandatory')
ciscoEsPortResetTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 5, 14, 4, 1, 1, 15), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ciscoEsPortResetTimer.setStatus('mandatory')
ciscoEsPortResetAddrs = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 5, 14, 4, 1, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("running", 2), ("reset", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ciscoEsPortResetAddrs.setStatus('mandatory')
ciscoEsPortInFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 5, 14, 4, 1, 1, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ciscoEsPortInFrames.setStatus('mandatory')
ciscoEsPortOutFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 5, 14, 4, 1, 1, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ciscoEsPortOutFrames.setStatus('mandatory')
ciscoEsPortLongFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 5, 14, 4, 1, 1, 19), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ciscoEsPortLongFrames.setStatus('mandatory')
ciscoEsPortShortFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 5, 14, 4, 1, 1, 20), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ciscoEsPortShortFrames.setStatus('mandatory')
ciscoEsPortInBufOverflows = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 5, 14, 4, 1, 1, 21), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ciscoEsPortInBufOverflows.setStatus('mandatory')
ciscoEsPortOutBufOverflows = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 5, 14, 4, 1, 1, 22), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ciscoEsPortOutBufOverflows.setStatus('mandatory')
ciscoEsPortRcvBcasts = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 5, 14, 4, 1, 1, 23), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ciscoEsPortRcvBcasts.setStatus('mandatory')
ciscoEsPortRcvMcasts = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 5, 14, 4, 1, 1, 24), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ciscoEsPortRcvMcasts.setStatus('mandatory')
ciscoEsPortSwitchedFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 5, 14, 4, 1, 1, 25), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ciscoEsPortSwitchedFrames.setStatus('mandatory')
ciscoEsPortInOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 5, 14, 4, 1, 1, 26), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ciscoEsPortInOctets.setStatus('mandatory')
ciscoEsPortOutOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 5, 14, 4, 1, 1, 27), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ciscoEsPortOutOctets.setStatus('mandatory')
ciscoEsPortPktsInErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 5, 14, 4, 1, 1, 28), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ciscoEsPortPktsInErrors.setStatus('mandatory')
ciscoEsPortLinkState = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 5, 14, 4, 1, 1, 29), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("up", 1), ("down", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ciscoEsPortLinkState.setStatus('mandatory')
ciscoEsPortOprStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 5, 14, 4, 1, 1, 30), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2), ("failed", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ciscoEsPortOprStatus.setStatus('mandatory')
ciscoEsPortMdiMdix = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 5, 14, 4, 1, 1, 31), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("mdi", 1), ("mdix", 2), ("none", 3), ("internal-term-on", 4), ("internal-term-off", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ciscoEsPortMdiMdix.setStatus('mandatory')
ciscoEsPortHashOverflows = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 5, 14, 4, 1, 1, 32), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ciscoEsPortHashOverflows.setStatus('mandatory')
ciscoEsPortTableOverflows = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 5, 14, 4, 1, 1, 33), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ciscoEsPortTableOverflows.setStatus('mandatory')
ciscoEsPortAddrAgingTime = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 5, 14, 4, 1, 1, 34), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 9999))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ciscoEsPortAddrAgingTime.setStatus('mandatory')
ciscoEsPortDemandAgingLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 5, 14, 4, 1, 1, 35), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 90))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ciscoEsPortDemandAgingLevel.setStatus('mandatory')
ciscoEsPortCfgMode = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 5, 14, 4, 1, 1, 36), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("ieee8021d", 1), ("cutthru", 2), ("auto", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ciscoEsPortCfgMode.setStatus('mandatory')
ciscoEsPortActiveMode = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 5, 14, 4, 1, 1, 37), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("ieee8021d", 1), ("cutthru", 2), ("unknown", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ciscoEsPortActiveMode.setStatus('mandatory')
ciscoEsPortErrThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 5, 14, 4, 1, 1, 38), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ciscoEsPortErrThreshold.setStatus('mandatory')
ciscoEsPortLearningState = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 5, 14, 4, 1, 1, 39), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("normal", 1), ("disableSrcLearning", 2), ("disableDstnLearning", 3), ("disableLearning", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ciscoEsPortLearningState.setStatus('mandatory')
ciscoEsPortRuntlessMode = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 5, 14, 4, 1, 1, 40), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("on", 1), ("off", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ciscoEsPortRuntlessMode.setStatus('mandatory')
ciscoEsPortType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 5, 14, 4, 1, 1, 41), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14))).clone(namedValues=NamedValues(("type-10BaseT", 1), ("type-StkPort", 2), ("type-100BaseT", 3), ("type-100BaseFx", 4), ("type-10BaseT-4", 5), ("type-10Base2", 6), ("type-10BaseFL", 7), ("type-ATM155", 8), ("unknown", 9), ("type-100VG-Fx", 10), ("type-100VG-Tx", 11), ("type-ISL-FX", 12), ("type-ISL-TX", 13), ("type-R2503", 14)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ciscoEsPortType.setStatus('mandatory')
ciscoEsPortCDPTimeToLive = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 5, 14, 4, 1, 1, 42), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ciscoEsPortCDPTimeToLive.setStatus('mandatory')
ciscoEsPortFastPort = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 5, 14, 4, 1, 1, 43), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disable", 1), ("enable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ciscoEsPortFastPort.setStatus('mandatory')
ciscoEsPortISLOperStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 5, 14, 4, 1, 1, 44), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("trunking", 1), ("non-trunking", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ciscoEsPortISLOperStatus.setStatus('mandatory')
ciscoEsPortISLAdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 5, 14, 4, 1, 1, 45), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("on", 1), ("off", 2), ("desirable", 3), ("auto", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ciscoEsPortISLAdminStatus.setStatus('mandatory')
ciscoEsPortStnTable = MibTable((1, 3, 6, 1, 4, 1, 9, 5, 14, 4, 3), )
if mibBuilder.loadTexts: ciscoEsPortStnTable.setStatus('mandatory')
ciscoEsPortStnEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 5, 14, 4, 3, 1), ).setIndexNames((0, "CISCO-ES-STACK-MIB", "ciscoEsPortStnSwitchNumber"), (0, "CISCO-ES-STACK-MIB", "ciscoEsPortStnPortNum"), (0, "CISCO-ES-STACK-MIB", "ciscoEsPortStnAddress"))
if mibBuilder.loadTexts: ciscoEsPortStnEntry.setStatus('mandatory')
ciscoEsPortStnSwitchNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 5, 14, 4, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 8))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ciscoEsPortStnSwitchNumber.setStatus('mandatory')
ciscoEsPortStnPortNum = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 5, 14, 4, 3, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ciscoEsPortStnPortNum.setStatus('mandatory')
ciscoEsPortStnAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 5, 14, 4, 3, 1, 3), MacAddr()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ciscoEsPortStnAddress.setStatus('mandatory')
ciscoEsPortStnLocation = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 5, 14, 4, 3, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("local", 1), ("remote", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ciscoEsPortStnLocation.setStatus('mandatory')
ciscoEsPortStnSrcFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 5, 14, 4, 3, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ciscoEsPortStnSrcFrames.setStatus('mandatory')
ciscoEsPortStnSrcBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 5, 14, 4, 3, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ciscoEsPortStnSrcBytes.setStatus('mandatory')
ciscoEsPortStnDestnFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 5, 14, 4, 3, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ciscoEsPortStnDestnFrames.setStatus('mandatory')
ciscoEsPortStnDestnBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 5, 14, 4, 3, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ciscoEsPortStnDestnBytes.setStatus('mandatory')
ciscoEsPortStnPortOfExit = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 5, 14, 4, 3, 1, 9), OctetString().subtype(subtypeSpec=ValueSizeConstraint(4, 4)).setFixedLength(4)).setMaxAccess("readonly")
if mibBuilder.loadTexts: ciscoEsPortStnPortOfExit.setStatus('mandatory')
ciscoEsOptPortStaTable = MibTable((1, 3, 6, 1, 4, 1, 9, 5, 14, 4, 2), )
if mibBuilder.loadTexts: ciscoEsOptPortStaTable.setStatus('mandatory')
ciscoEsOptPortStaEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 5, 14, 4, 2, 1), ).setIndexNames((0, "CISCO-ES-STACK-MIB", "ciscoEsPortSwitchNumber"), (0, "CISCO-ES-STACK-MIB", "ciscoEsPortNumber"), (0, "CISCO-ES-STACK-MIB", "ciscoEsOptPortStaPos"))
if mibBuilder.loadTexts: ciscoEsOptPortStaEntry.setStatus('mandatory')
ciscoEsOptPortStaPos = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 5, 14, 4, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ciscoEsOptPortStaPos.setStatus('mandatory')
ciscoEsOptPortStaVal = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 5, 14, 4, 2, 1, 2), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ciscoEsOptPortStaVal.setStatus('mandatory')
ciscoEsVLANPortTable = MibTable((1, 3, 6, 1, 4, 1, 9, 5, 14, 8, 1), )
if mibBuilder.loadTexts: ciscoEsVLANPortTable.setStatus('mandatory')
ciscoEsVLANPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 5, 14, 8, 1, 1), ).setIndexNames((0, "CISCO-ES-STACK-MIB", "ciscoEsVLANPortVLANNumber"), (0, "CISCO-ES-STACK-MIB", "ciscoEsVLANPortSwitchNumber"))
if mibBuilder.loadTexts: ciscoEsVLANPortEntry.setStatus('mandatory')
ciscoEsVLANPortVLANNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 5, 14, 8, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 63))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ciscoEsVLANPortVLANNumber.setStatus('mandatory')
ciscoEsVLANPortSwitchNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 5, 14, 8, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 8))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ciscoEsVLANPortSwitchNumber.setStatus('mandatory')
ciscoEsVLANPortPorts = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 5, 14, 8, 1, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(4, 4)).setFixedLength(4)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ciscoEsVLANPortPorts.setStatus('mandatory')
ciscoEsVLANInfoTable = MibTable((1, 3, 6, 1, 4, 1, 9, 5, 14, 8, 2), )
if mibBuilder.loadTexts: ciscoEsVLANInfoTable.setStatus('mandatory')
ciscoEsVLANInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 5, 14, 8, 2, 1), ).setIndexNames((0, "CISCO-ES-STACK-MIB", "ciscoEsVLANInfoVLANNumber"))
if mibBuilder.loadTexts: ciscoEsVLANInfoEntry.setStatus('mandatory')
ciscoEsVLANInfoVLANNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 5, 14, 8, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 63))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ciscoEsVLANInfoVLANNumber.setStatus('mandatory')
ciscoEsVLANInfoState = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 5, 14, 8, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("active", 1), ("inactive", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ciscoEsVLANInfoState.setStatus('mandatory')
ciscoEsVLANInfoName = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 5, 14, 8, 2, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ciscoEsVLANInfoName.setStatus('mandatory')
ciscoEsVLANInfoBaseAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 5, 14, 8, 2, 1, 4), MacAddr()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ciscoEsVLANInfoBaseAddr.setStatus('mandatory')
ciscoEsVLANInfoIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 5, 14, 8, 2, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ciscoEsVLANInfoIfIndex.setStatus('mandatory')
ciscoEsVLANInfoIpState = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 5, 14, 8, 2, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("disabled", 1), ("auto-bootp", 2), ("always-bootp", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ciscoEsVLANInfoIpState.setStatus('mandatory')
ciscoEsVLANInfoIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 5, 14, 8, 2, 1, 7), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ciscoEsVLANInfoIpAddress.setStatus('mandatory')
ciscoEsVLANInfoIpSubnetMask = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 5, 14, 8, 2, 1, 8), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ciscoEsVLANInfoIpSubnetMask.setStatus('mandatory')
ciscoEsVLANInfoIpDefaultGateway = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 5, 14, 8, 2, 1, 9), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ciscoEsVLANInfoIpDefaultGateway.setStatus('mandatory')
ciscoEsVLANInfoStp = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 5, 14, 8, 2, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("on", 1), ("off", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ciscoEsVLANInfoStp.setStatus('mandatory')
ciscoEsVLANInfoNumStations = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 5, 14, 8, 2, 1, 11), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ciscoEsVLANInfoNumStations.setStatus('mandatory')
ciscoEsVLANInfoMaxStations = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 5, 14, 8, 2, 1, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ciscoEsVLANInfoMaxStations.setStatus('mandatory')
ciscoEsVLANStpTable = MibTable((1, 3, 6, 1, 4, 1, 9, 5, 14, 8, 3), )
if mibBuilder.loadTexts: ciscoEsVLANStpTable.setStatus('mandatory')
ciscoEsVLANStpEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 5, 14, 8, 3, 1), ).setIndexNames((0, "CISCO-ES-STACK-MIB", "ciscoEsVLANStpVLANIndex"))
if mibBuilder.loadTexts: ciscoEsVLANStpEntry.setStatus('mandatory')
ciscoEsVLANStpVLANIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 5, 14, 8, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 63))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ciscoEsVLANStpVLANIndex.setStatus('mandatory')
ciscoEsVLANStpPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 5, 14, 8, 3, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ciscoEsVLANStpPriority.setStatus('mandatory')
ciscoEsVLANStpTimeSinceTopologyChange = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 5, 14, 8, 3, 1, 3), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ciscoEsVLANStpTimeSinceTopologyChange.setStatus('mandatory')
ciscoEsVLANStpTopChanges = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 5, 14, 8, 3, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ciscoEsVLANStpTopChanges.setStatus('mandatory')
ciscoEsVLANStpDesignatedRoot = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 5, 14, 8, 3, 1, 5), BridgeId()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ciscoEsVLANStpDesignatedRoot.setStatus('mandatory')
ciscoEsVLANStpRootCost = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 5, 14, 8, 3, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ciscoEsVLANStpRootCost.setStatus('mandatory')
ciscoEsVLANStpRootPort = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 5, 14, 8, 3, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ciscoEsVLANStpRootPort.setStatus('mandatory')
ciscoEsVLANStpMaxAge = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 5, 14, 8, 3, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ciscoEsVLANStpMaxAge.setStatus('mandatory')
ciscoEsVLANStpHelloTime = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 5, 14, 8, 3, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ciscoEsVLANStpHelloTime.setStatus('mandatory')
ciscoEsVLANStpHoldTime = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 5, 14, 8, 3, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ciscoEsVLANStpHoldTime.setStatus('mandatory')
ciscoEsVLANStpForwardDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 5, 14, 8, 3, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ciscoEsVLANStpForwardDelay.setStatus('mandatory')
ciscoEsVLANStpBridgeMaxAge = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 5, 14, 8, 3, 1, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(600, 4000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ciscoEsVLANStpBridgeMaxAge.setStatus('mandatory')
ciscoEsVLANStpBridgeHelloTime = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 5, 14, 8, 3, 1, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(100, 1000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ciscoEsVLANStpBridgeHelloTime.setStatus('mandatory')
ciscoEsVLANStpBridgeForwardDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 5, 14, 8, 3, 1, 14), Integer32().subtype(subtypeSpec=ValueRangeConstraint(400, 3000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ciscoEsVLANStpBridgeForwardDelay.setStatus('mandatory')
ciscoEsVLANStationTable = MibTable((1, 3, 6, 1, 4, 1, 9, 5, 14, 8, 4), )
if mibBuilder.loadTexts: ciscoEsVLANStationTable.setStatus('mandatory')
ciscoEsVLANStationEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 5, 14, 8, 4, 1), ).setIndexNames((0, "CISCO-ES-STACK-MIB", "ciscoEsVLANStationVLANIndex"), (0, "CISCO-ES-STACK-MIB", "ciscoEsVLANStationBoxNum"), (0, "CISCO-ES-STACK-MIB", "ciscoEsVLANStationAddress"))
if mibBuilder.loadTexts: ciscoEsVLANStationEntry.setStatus('mandatory')
ciscoEsVLANStationVLANIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 5, 14, 8, 4, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 63))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ciscoEsVLANStationVLANIndex.setStatus('mandatory')
ciscoEsVLANStationBoxNum = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 5, 14, 8, 4, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 8))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ciscoEsVLANStationBoxNum.setStatus('mandatory')
ciscoEsVLANStationAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 5, 14, 8, 4, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(6, 6)).setFixedLength(6)).setMaxAccess("readonly")
if mibBuilder.loadTexts: ciscoEsVLANStationAddress.setStatus('mandatory')
ciscoEsVLANStationPort = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 5, 14, 8, 4, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ciscoEsVLANStationPort.setStatus('mandatory')
ciscoEsVLANStationTraffic = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 5, 14, 8, 4, 1, 5), OctetString().subtype(subtypeSpec=ValueSizeConstraint(4, 4)).setFixedLength(4)).setMaxAccess("readonly")
if mibBuilder.loadTexts: ciscoEsVLANStationTraffic.setStatus('mandatory')
ciscoEsOptVLANStaTable = MibTable((1, 3, 6, 1, 4, 1, 9, 5, 14, 8, 5), )
if mibBuilder.loadTexts: ciscoEsOptVLANStaTable.setStatus('mandatory')
ciscoEsOptVLANStaEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 5, 14, 8, 5, 1), ).setIndexNames((0, "CISCO-ES-STACK-MIB", "ciscoEsVLANStationVLANIndex"), (0, "CISCO-ES-STACK-MIB", "ciscoEsVLANStationBoxNum"), (0, "CISCO-ES-STACK-MIB", "ciscoEsOptVLANStaPos"))
if mibBuilder.loadTexts: ciscoEsOptVLANStaEntry.setStatus('mandatory')
ciscoEsOptVLANStaPos = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 5, 14, 8, 5, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ciscoEsOptVLANStaPos.setStatus('mandatory')
ciscoEsOptVLANStaVal = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 5, 14, 8, 5, 1, 2), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ciscoEsOptVLANStaVal.setStatus('mandatory')
ciscoEsTransitedConfiguredVLANs = MibScalar((1, 3, 6, 1, 4, 1, 9, 5, 14, 8, 6), OctetString().subtype(subtypeSpec=ValueSizeConstraint(128, 128)).setFixedLength(128)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ciscoEsTransitedConfiguredVLANs.setStatus('mandatory')
ciscoEsTransitedVLANs = MibScalar((1, 3, 6, 1, 4, 1, 9, 5, 14, 8, 7), OctetString().subtype(subtypeSpec=ValueSizeConstraint(128, 128)).setFixedLength(128)).setMaxAccess("readonly")
if mibBuilder.loadTexts: ciscoEsTransitedVLANs.setStatus('mandatory')
ciscoEsECTable = MibTable((1, 3, 6, 1, 4, 1, 9, 5, 14, 6, 1), )
if mibBuilder.loadTexts: ciscoEsECTable.setStatus('mandatory')
ciscoEsECEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 5, 14, 6, 1, 1), ).setIndexNames((0, "CISCO-ES-STACK-MIB", "ciscoEsECSwitchNumber"), (0, "CISCO-ES-STACK-MIB", "ciscoEsECNumber"))
if mibBuilder.loadTexts: ciscoEsECEntry.setStatus('mandatory')
ciscoEsECSwitchNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 5, 14, 6, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 8))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ciscoEsECSwitchNumber.setStatus('mandatory')
ciscoEsECNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 5, 14, 6, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 8))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ciscoEsECNumber.setStatus('mandatory')
ciscoEsECPorts = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 5, 14, 6, 1, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(4, 4)).setFixedLength(4)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ciscoEsECPorts.setStatus('mandatory')
ciscoEsFilterTable = MibTable((1, 3, 6, 1, 4, 1, 9, 5, 14, 7, 1), )
if mibBuilder.loadTexts: ciscoEsFilterTable.setStatus('mandatory')
ciscoEsFilterEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 5, 14, 7, 1, 1), ).setIndexNames((0, "CISCO-ES-STACK-MIB", "ciscoEsFilterSwitchNumber"), (0, "CISCO-ES-STACK-MIB", "ciscoEsFilterStationAddress"), (0, "CISCO-ES-STACK-MIB", "ciscoEsFilterType"))
if mibBuilder.loadTexts: ciscoEsFilterEntry.setStatus('mandatory')
ciscoEsFilterSwitchNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 5, 14, 7, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 8))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ciscoEsFilterSwitchNumber.setStatus('mandatory')
ciscoEsFilterStationAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 5, 14, 7, 1, 1, 2), MacAddr()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ciscoEsFilterStationAddress.setStatus('mandatory')
ciscoEsFilterType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 5, 14, 7, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("source-filter", 1), ("destination-filter", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ciscoEsFilterType.setStatus('mandatory')
ciscoEsFilterPorts = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 5, 14, 7, 1, 1, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(4, 4)).setFixedLength(4)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ciscoEsFilterPorts.setStatus('mandatory')
ciscoEsFilterMask = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 5, 14, 7, 1, 1, 5), OctetString().subtype(subtypeSpec=ValueSizeConstraint(4, 4)).setFixedLength(4)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ciscoEsFilterMask.setStatus('mandatory')
ciscoEsFilterRemoteSwitch = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 5, 14, 7, 1, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 8))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ciscoEsFilterRemoteSwitch.setStatus('mandatory')
ciscoEsFilterRemotePort = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 5, 14, 7, 1, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 29))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ciscoEsFilterRemotePort.setStatus('mandatory')
ciscoEsFilterStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 5, 14, 7, 1, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("valid", 1), ("invalid", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ciscoEsFilterStatus.setStatus('mandatory')
ciscoEsRouterTable = MibTable((1, 3, 6, 1, 4, 1, 9, 5, 14, 9, 1), )
if mibBuilder.loadTexts: ciscoEsRouterTable.setStatus('mandatory')
ciscoEsRouterEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 5, 14, 9, 1, 1), ).setIndexNames((0, "CISCO-ES-STACK-MIB", "ciscoEsRouterBox"), (0, "CISCO-ES-STACK-MIB", "ciscoEsRouterPort"))
if mibBuilder.loadTexts: ciscoEsRouterEntry.setStatus('mandatory')
ciscoEsRouterBox = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 5, 14, 9, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 8))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ciscoEsRouterBox.setStatus('mandatory')
ciscoEsRouterPort = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 5, 14, 9, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ciscoEsRouterPort.setStatus('mandatory')
ciscoEsRouterOpState = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 5, 14, 9, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("up", 1), ("down", 2), ("empty", 3), ("unknown", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ciscoEsRouterOpState.setStatus('mandatory')
ciscoEsRouterNetAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 5, 14, 9, 1, 1, 4), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ciscoEsRouterNetAddr.setStatus('mandatory')
ciscoEsRouterBoardId = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 5, 14, 9, 1, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ciscoEsRouterBoardId.setStatus('mandatory')
ciscoEsRouterRev = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 5, 14, 9, 1, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ciscoEsRouterRev.setStatus('mandatory')
ciscoEsStackCfgChange = NotificationType((1, 3, 6, 1, 4, 1, 9, 5, 14, 1, 1) + (0,1)).setObjects(("SNMPv2-MIB", "sysName"), ("SNMPv2-MIB", "sysLocation"), ("CISCO-ES-STACK-MIB", "ciscoEsNumSwitches"))
ciscoEsStackProStackMatrixChange = NotificationType((1, 3, 6, 1, 4, 1, 9, 5, 14, 1, 1) + (0,2)).setObjects(("SNMPv2-MIB", "sysName"), ("SNMPv2-MIB", "sysLocation"), ("CISCO-ES-STACK-MIB", "ciscoEsProStackMatrixStatus"))
ciscoEsStackTempChange = NotificationType((1, 3, 6, 1, 4, 1, 9, 5, 14, 2) + (0,1)).setObjects(("SNMPv2-MIB", "sysName"), ("SNMPv2-MIB", "sysLocation"), ("CISCO-ES-STACK-MIB", "ciscoEsStackSwitchTemperature"))
ciscoEsPortStrNFwdEntry = NotificationType((1, 3, 6, 1, 4, 1, 9, 5, 14, 4) + (0,1)).setObjects(("SNMPv2-MIB", "sysName"), ("SNMPv2-MIB", "sysLocation"), ("CISCO-ES-STACK-MIB", "ciscoEsPortActiveMode"))
ciscoEsVLANNewRoot = NotificationType((1, 3, 6, 1, 4, 1, 9, 5, 14, 8) + (0,1)).setObjects(("CISCO-ES-STACK-MIB", "ciscoEsVLANInfoVLANNumber"))
ciscoEsVLANTopologyChange = NotificationType((1, 3, 6, 1, 4, 1, 9, 5, 14, 8) + (0,2)).setObjects(("CISCO-ES-STACK-MIB", "ciscoEsVLANInfoVLANNumber"))
ciscoEsEtherChannelFailed = NotificationType((1, 3, 6, 1, 4, 1, 9, 5, 14, 6) + (0,1)).setObjects(("SNMPv2-MIB", "sysName"), ("SNMPv2-MIB", "sysLocation"), ("CISCO-ES-STACK-MIB", "ciscoEsECPorts"))
mibBuilder.exportSymbols("CISCO-ES-STACK-MIB", ciscoEsModRevision=ciscoEsModRevision, ciscoEsVLANPortVLANNumber=ciscoEsVLANPortVLANNumber, ciscoEsVLANInfoMaxStations=ciscoEsVLANInfoMaxStations, ciscoEsRouterBoardId=ciscoEsRouterBoardId, ciscoEsIpAddr=ciscoEsIpAddr, ciscoEsStackSwitchProbeDirection=ciscoEsStackSwitchProbeDirection, ciscoEsStackSwitchAgingTime=ciscoEsStackSwitchAgingTime, ciscoEsPortISLOperStatus=ciscoEsPortISLOperStatus, ciscoEsSysCurTime=ciscoEsSysCurTime, ciscoEsRouterTable=ciscoEsRouterTable, ciscoEsModNumPorts=ciscoEsModNumPorts, ciscoEsVLANStpDesignatedRoot=ciscoEsVLANStpDesignatedRoot, ciscoEsTransitedVLANs=ciscoEsTransitedVLANs, ciscoEsTrapRcvrStatus=ciscoEsTrapRcvrStatus, ciscoEsStackSwitchFeatureStatus=ciscoEsStackSwitchFeatureStatus, ciscoEsStackSwitchDplxCtrl=ciscoEsStackSwitchDplxCtrl, ciscoEsVLANStpBridgeMaxAge=ciscoEsVLANStpBridgeMaxAge, ciscoEsVLANInfoVLANNumber=ciscoEsVLANInfoVLANNumber, ciscoEsModNumber=ciscoEsModNumber, ciscoEsPortISLAdminStatus=ciscoEsPortISLAdminStatus, ciscoEsPortTableOverflows=ciscoEsPortTableOverflows, workgroup=workgroup, ciscoEsVLANStpTopChanges=ciscoEsVLANStpTopChanges, ciscoEsPortStnSwitchNumber=ciscoEsPortStnSwitchNumber, ciscoEsStackSwitchProbe=ciscoEsStackSwitchProbe, ciscoEsPortMaxStations=ciscoEsPortMaxStations, ciscoEsStackSwitchInNoSpaceFrames=ciscoEsStackSwitchInNoSpaceFrames, ciscoEsPortEntry=ciscoEsPortEntry, ciscoEsDmns=ciscoEsDmns, ciscoEsStackSwitchId=ciscoEsStackSwitchId, ciscoEsVLANStpBridgeForwardDelay=ciscoEsVLANStpBridgeForwardDelay, ciscoEsTrapRcvrIpAddress=ciscoEsTrapRcvrIpAddress, ciscoEsPortInOctets=ciscoEsPortInOctets, ciscoEsStackSwitchOutDroppedFrames=ciscoEsStackSwitchOutDroppedFrames, ciscoEsStackSwitchInShortFrames=ciscoEsStackSwitchInShortFrames, ciscoEsStackSwitchPorts=ciscoEsStackSwitchPorts, ciscoEsStack=ciscoEsStack, ciscoEsModEntry=ciscoEsModEntry, ciscoEsDefaultGateway=ciscoEsDefaultGateway, ciscoEsStackSwitchUptime=ciscoEsStackSwitchUptime, ciscoEsPortUnknownStaFrames=ciscoEsPortUnknownStaFrames, ciscoEsPortStnTable=ciscoEsPortStnTable, ciscoEsVLANStpTable=ciscoEsVLANStpTable, ciscoEsRouter=ciscoEsRouter, ciscoEsVLANStpTimeSinceTopologyChange=ciscoEsVLANStpTimeSinceTopologyChange, ciscoEsStackSwitchTemperature=ciscoEsStackSwitchTemperature, ciscoEsStackSwitchOutTotalReqs=ciscoEsStackSwitchOutTotalReqs, ciscoEsLLPortDsbld=ciscoEsLLPortDsbld, ciscoEsPortOprStatus=ciscoEsPortOprStatus, ciscoEsStackSwitchFeatureKey=ciscoEsStackSwitchFeatureKey, ciscoEsModUptime=ciscoEsModUptime, ciscoEsFilterRemoteSwitch=ciscoEsFilterRemoteSwitch, ciscoEsTrapRcvrComm=ciscoEsTrapRcvrComm, ciscoEsRouterPort=ciscoEsRouterPort, ciscoEsPortStnEntry=ciscoEsPortStnEntry, ciscoEsECSwitchNumber=ciscoEsECSwitchNumber, ciscoEsPortOutFrames=ciscoEsPortOutFrames, ciscoEsEChannel=ciscoEsEChannel, ciscoEsVLANPortPorts=ciscoEsVLANPortPorts, ciscoEsPortResetStats=ciscoEsPortResetStats, ciscoEsVLANStationAddress=ciscoEsVLANStationAddress, ciscoEsVLANPortSwitchNumber=ciscoEsVLANPortSwitchNumber, ciscoEsPortOutBufOverflows=ciscoEsPortOutBufOverflows, ciscoEsOptVLANStaTable=ciscoEsOptVLANStaTable, ciscoEsPortFastPort=ciscoEsPortFastPort, ciscoEsPortStnPortOfExit=ciscoEsPortStnPortOfExit, ciscoEsFilterTable=ciscoEsFilterTable, ciscoEsStackSwitchHwVersion=ciscoEsStackSwitchHwVersion, ciscoEsStackEntry=ciscoEsStackEntry, ciscoEsPortRcvLocalFrames=ciscoEsPortRcvLocalFrames, ciscoEsStackStatus=ciscoEsStackStatus, ciscoEsVLANInfoTable=ciscoEsVLANInfoTable, ciscoEsStackSwitchLongestHashChain=ciscoEsStackSwitchLongestHashChain, ciscoEsStackSwitchBufferOverruns=ciscoEsStackSwitchBufferOverruns, ciscoEsPortInBufOverflows=ciscoEsPortInBufOverflows, ciscoEsFilter=ciscoEsFilter, ciscoEsFilterSwitchNumber=ciscoEsFilterSwitchNumber, ciscoEsPortLinkState=ciscoEsPortLinkState, ciscoEsPortCfgMode=ciscoEsPortCfgMode, ciscoEsVLANInfoBaseAddr=ciscoEsVLANInfoBaseAddr, ciscoEsNetMask=ciscoEsNetMask, ciscoEsStackSwitchSoftwareFrames=ciscoEsStackSwitchSoftwareFrames, ciscoEsStackSwitchInErrFrames=ciscoEsStackSwitchInErrFrames, ciscoEsVLANInfoStp=ciscoEsVLANInfoStp, ciscoEsStackTable=ciscoEsStackTable, ciscoEsPortSwitchedFrames=ciscoEsPortSwitchedFrames, ciscoEsRouterEntry=ciscoEsRouterEntry, ciscoEsStackSwitchAddr=ciscoEsStackSwitchAddr, ciscoEsVLANInfoIpAddress=ciscoEsVLANInfoIpAddress, ciscoEsVLANStpEntry=ciscoEsVLANStpEntry, ciscoEsPortRemoteStations=ciscoEsPortRemoteStations, ciscoEsPortStnLocation=ciscoEsPortStnLocation, ciscoEsVLANStationEntry=ciscoEsVLANStationEntry, ciscoEsPortLongFrames=ciscoEsPortLongFrames, ciscoEsNumMatrixModules=ciscoEsNumMatrixModules, ciscoEsECEntry=ciscoEsECEntry, ciscoEsVLANInfoIpDefaultGateway=ciscoEsVLANInfoIpDefaultGateway, ciscoEsPortModNumber=ciscoEsPortModNumber, ciscoEsECNumber=ciscoEsECNumber, ciscoEsVLANStpMaxAge=ciscoEsVLANStpMaxAge, ciscoEsRouterNetAddr=ciscoEsRouterNetAddr, ciscoEsConfig=ciscoEsConfig, ciscoEsTrapRcvrEntry=ciscoEsTrapRcvrEntry, ciscoEsVLANStationBoxNum=ciscoEsVLANStationBoxNum, ciscoEsStackProStackMatrixChange=ciscoEsStackProStackMatrixChange, ciscoEsPortDemandAgingLevel=ciscoEsPortDemandAgingLevel, ciscoEsFilterPorts=ciscoEsFilterPorts, ciscoEsVLANTopologyChange=ciscoEsVLANTopologyChange, ciscoEsTransitedConfiguredVLANs=ciscoEsTransitedConfiguredVLANs, ciscoEsPortDuplex=ciscoEsPortDuplex, ciscoEsTrapRcvrVLANs=ciscoEsTrapRcvrVLANs, ciscoEsStackSwitchAgingLevel=ciscoEsStackSwitchAgingLevel, ciscoEsEtherChannelFailed=ciscoEsEtherChannelFailed, ciscoEsVLANStpPriority=ciscoEsVLANStpPriority, ciscoEsPortStnDestnFrames=ciscoEsPortStnDestnFrames, ciscoEsPortCDPTimeToLive=ciscoEsPortCDPTimeToLive, ciscoEsVLANStationTable=ciscoEsVLANStationTable, ciscoEsOptVLANStaPos=ciscoEsOptVLANStaPos, ciscoEsFilterStatus=ciscoEsFilterStatus, ciscoEsConfiguration=ciscoEsConfiguration, ciscoEsVLANStationTraffic=ciscoEsVLANStationTraffic, ciscoEsRouterBox=ciscoEsRouterBox, ciscoEsOptPortStaPos=ciscoEsOptPortStaPos, ciscoEsPortMdiMdix=ciscoEsPortMdiMdix, ciscoEsPortInFrames=ciscoEsPortInFrames, ciscoEsPortHashOverflows=ciscoEsPortHashOverflows, ciscoEsModTable=ciscoEsModTable, ciscoEsECPorts=ciscoEsECPorts, ciscoEsTrapRcvrTable=ciscoEsTrapRcvrTable, ciscoEsOptVLANStaEntry=ciscoEsOptVLANStaEntry, ciscoEsFilterStationAddress=ciscoEsFilterStationAddress, ciscoEsPortPktsInErrors=ciscoEsPortPktsInErrors, ciscoEsVLANPortEntry=ciscoEsVLANPortEntry, ciscoEsVLANInfoState=ciscoEsVLANInfoState, ciscoEsPortShortFrames=ciscoEsPortShortFrames, ciscoEsPortErrThreshold=ciscoEsPortErrThreshold, ciscoEsPortRcvMcasts=ciscoEsPortRcvMcasts, ciscoEsStackSwitchOutTotalFrames=ciscoEsStackSwitchOutTotalFrames, ciscoEsVLANInfoNumStations=ciscoEsVLANInfoNumStations, ciscoEsRouterOpState=ciscoEsRouterOpState, ciscoEsOptVLANStaVal=ciscoEsOptVLANStaVal, ciscoEsStackSwitchStatus=ciscoEsStackSwitchStatus, ciscoEsPortResetAddrs=ciscoEsPortResetAddrs, ciscoEsPort=ciscoEsPort, ciscoEsFilterEntry=ciscoEsFilterEntry, ciscoEsPortRcvBcasts=ciscoEsPortRcvBcasts, ciscoEsPortStnDestnBytes=ciscoEsPortStnDestnBytes, ciscoEsVLANPortTable=ciscoEsVLANPortTable, ciscoEsVLANStpRootCost=ciscoEsVLANStpRootCost, ciscoEsVLANStationVLANIndex=ciscoEsVLANStationVLANIndex, ciscoEsPortSWHandledFrames=ciscoEsPortSWHandledFrames, ciscoEsOptPortStaTable=ciscoEsOptPortStaTable, ciscoEsPortActiveMode=ciscoEsPortActiveMode, ciscoEsVLANInfoIpState=ciscoEsVLANInfoIpState, ciscoEsVLANs=ciscoEsVLANs, ciscoEsVLANStpHoldTime=ciscoEsVLANStpHoldTime, ciscoEsPortStnSrcBytes=ciscoEsPortStnSrcBytes, ciscoEsVLANStpHelloTime=ciscoEsVLANStpHelloTime, ciscoEsModule=ciscoEsModule, MacAddr=MacAddr, ciscoEsVLANInfoIfIndex=ciscoEsVLANInfoIfIndex, ciscoEsTftpServerDomain=ciscoEsTftpServerDomain, ciscoEsModSwitchNumber=ciscoEsModSwitchNumber, ciscoEsVLANStpVLANIndex=ciscoEsVLANStpVLANIndex, ciscoEsPortMostStations=ciscoEsPortMostStations, ciscoEsStackSwitchHashTableFulls=ciscoEsStackSwitchHashTableFulls, ciscoEsPortOutOctets=ciscoEsPortOutOctets, ciscoEsVLANInfoEntry=ciscoEsVLANInfoEntry, ciscoEsPortResetTimer=ciscoEsPortResetTimer, ciscoEsStackSwitchMemory=ciscoEsStackSwitchMemory, ciscoEsModState=ciscoEsModState, esStack=esStack, ciscoEsNumSwitches=ciscoEsNumSwitches, ciscoEsPortForwardedFrames=ciscoEsPortForwardedFrames, ciscoEsVLANStpRootPort=ciscoEsVLANStpRootPort, ciscoEsSetLock=ciscoEsSetLock, ciscoEsPortStnPortNum=ciscoEsPortStnPortNum, ciscoEsPortLearningState=ciscoEsPortLearningState, cisco=cisco, ciscoEsVLANNewRoot=ciscoEsVLANNewRoot, ciscoEsModType=ciscoEsModType, ciscoEsPortLocalStations=ciscoEsPortLocalStations, ciscoEsOptPortStaVal=ciscoEsOptPortStaVal, ciscoEsTrapRcvrIndex=ciscoEsTrapRcvrIndex, ciscoEsFilterType=ciscoEsFilterType, ciscoEsPortTable=ciscoEsPortTable, ciscoEsPortAddrAgingTime=ciscoEsPortAddrAgingTime, ciscoEsFilterMask=ciscoEsFilterMask, ciscoEsStackTempChange=ciscoEsStackTempChange, BridgeId=BridgeId, ciscoEsProStackMatrixStatus=ciscoEsProStackMatrixStatus, ciscoEsStackSwitchNumber=ciscoEsStackSwitchNumber, ciscoEsRouterRev=ciscoEsRouterRev, ciscoEsPortStnSrcFrames=ciscoEsPortStnSrcFrames, ciscoEsPortSwitchNumber=ciscoEsPortSwitchNumber, ciscoEsVLANStpBridgeHelloTime=ciscoEsVLANStpBridgeHelloTime, ciscoEsTftpFileLoc=ciscoEsTftpFileLoc, ciscoEsPortType=ciscoEsPortType, ciscoEsPortStrNFwdEntry=ciscoEsPortStrNFwdEntry, ciscoEsOptPortStaEntry=ciscoEsOptPortStaEntry, ciscoEsMain=ciscoEsMain, ciscoEsVLANInfoName=ciscoEsVLANInfoName, ciscoEsVLANInfoIpSubnetMask=ciscoEsVLANInfoIpSubnetMask, ciscoEsTftpServer=ciscoEsTftpServer, ciscoEsStackSwitchInLongFrames=ciscoEsStackSwitchInLongFrames, ciscoEsPortNumber=ciscoEsPortNumber, ciscoEsStackSwitchFwVersion=ciscoEsStackSwitchFwVersion, ciscoEsVLANStationPort=ciscoEsVLANStationPort, ciscoEsPortIfIndex=ciscoEsPortIfIndex, ciscoEsFilterRemotePort=ciscoEsFilterRemotePort, ciscoEsStackCfgChange=ciscoEsStackCfgChange, ciscoEsPortStnAddress=ciscoEsPortStnAddress, ciscoEsECTable=ciscoEsECTable, ciscoEsVLANStpForwardDelay=ciscoEsVLANStpForwardDelay, ciscoEsPortRuntlessMode=ciscoEsPortRuntlessMode)
