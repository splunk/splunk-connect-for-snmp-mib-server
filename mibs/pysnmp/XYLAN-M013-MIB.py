#
# PySNMP MIB module XYLAN-M013-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/XYLAN-M013-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 21:38:43 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, Integer, OctetString = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "Integer", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
SingleValueConstraint, ValueSizeConstraint, ConstraintsIntersection, ConstraintsUnion, ValueRangeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "SingleValueConstraint", "ValueSizeConstraint", "ConstraintsIntersection", "ConstraintsUnion", "ValueRangeConstraint")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
Integer32, Counter64, ModuleIdentity, Unsigned32, IpAddress, TimeTicks, Counter32, Gauge32, MibScalar, MibTable, MibTableRow, MibTableColumn, ObjectIdentity, MibIdentifier, iso, NotificationType, Bits = mibBuilder.importSymbols("SNMPv2-SMI", "Integer32", "Counter64", "ModuleIdentity", "Unsigned32", "IpAddress", "TimeTicks", "Counter32", "Gauge32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "ObjectIdentity", "MibIdentifier", "iso", "NotificationType", "Bits")
DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention")
xylanM013Arch, = mibBuilder.importSymbols("XYLAN-BASE-MIB", "xylanM013Arch")
m013ProvisioningGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 800, 2, 25, 1))
m013ServiceGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 800, 2, 25, 2))
m013FrxPortGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 800, 2, 25, 3))
m013FrxVcControlGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 800, 2, 25, 4))
m013FrxVcStatsGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 800, 2, 25, 5))
m013PppxConfigGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 800, 2, 25, 6))
m013PppxCpGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 800, 2, 25, 7))
m013PppxStatsGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 800, 2, 25, 8))
m013IPRouterGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 800, 2, 25, 9))
m013Dsx3Group = MibIdentifier((1, 3, 6, 1, 4, 1, 800, 2, 25, 10))
m013Dsx1Group = MibIdentifier((1, 3, 6, 1, 4, 1, 800, 2, 25, 11))
m013ProvisioningTable = MibTable((1, 3, 6, 1, 4, 1, 800, 2, 25, 1, 1), )
if mibBuilder.loadTexts: m013ProvisioningTable.setStatus('mandatory')
m013ProvisioningEntry = MibTableRow((1, 3, 6, 1, 4, 1, 800, 2, 25, 1, 1, 1), ).setIndexNames((0, "XYLAN-M013-MIB", "m013SlotIndex"), (0, "XYLAN-M013-MIB", "m013LogicalPortIndex"))
if mibBuilder.loadTexts: m013ProvisioningEntry.setStatus('mandatory')
m013SlotIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 25, 1, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 9))).setMaxAccess("readonly")
if mibBuilder.loadTexts: m013SlotIndex.setStatus('mandatory')
m013LogicalPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 25, 1, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1024))).setMaxAccess("readonly")
if mibBuilder.loadTexts: m013LogicalPortIndex.setStatus('mandatory')
m013Description = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 25, 1, 1, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 31))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: m013Description.setStatus('mandatory')
m013Ds3PortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 25, 1, 1, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: m013Ds3PortIndex.setStatus('mandatory')
m013Ds1Fraction = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 25, 1, 1, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 28))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: m013Ds1Fraction.setStatus('mandatory')
m013Ds0Mask = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 25, 1, 1, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 16777215))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: m013Ds0Mask.setStatus('mandatory')
m013IfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 25, 1, 1, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(10001, 18192))).setMaxAccess("readonly")
if mibBuilder.loadTexts: m013IfIndex.setStatus('mandatory')
m013Protocol = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 25, 1, 1, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("fr", 1), ("ppp", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: m013Protocol.setStatus('mandatory')
m013EntryStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 25, 1, 1, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("valid", 1), ("createRequest", 2), ("underCreation", 3), ("invalid", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: m013EntryStatus.setStatus('mandatory')
m013ServiceTable = MibTable((1, 3, 6, 1, 4, 1, 800, 2, 25, 2, 1), )
if mibBuilder.loadTexts: m013ServiceTable.setStatus('mandatory')
m013ServiceEntry = MibTableRow((1, 3, 6, 1, 4, 1, 800, 2, 25, 2, 1, 1), ).setIndexNames((0, "XYLAN-M013-MIB", "m013ServiceSlotIndex"), (0, "XYLAN-M013-MIB", "m013ServiceLogicalPortIndex"), (0, "XYLAN-M013-MIB", "m013ServiceNumber"), (0, "XYLAN-M013-MIB", "m013ServiceType"))
if mibBuilder.loadTexts: m013ServiceEntry.setStatus('mandatory')
m013ServiceSlotIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 25, 2, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 9))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: m013ServiceSlotIndex.setStatus('mandatory')
m013ServiceLogicalPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 25, 2, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1024))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: m013ServiceLogicalPortIndex.setStatus('mandatory')
m013ServiceNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 25, 2, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 256))).setMaxAccess("readonly")
if mibBuilder.loadTexts: m013ServiceNumber.setStatus('mandatory')
m013ServiceTableEntryType = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 25, 2, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("static", 1), ("dynamic", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: m013ServiceTableEntryType.setStatus('mandatory')
m013ServiceDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 25, 2, 1, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 31))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: m013ServiceDescription.setStatus('mandatory')
m013ServiceType = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 25, 2, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(4, 6))).clone(namedValues=NamedValues(("trunking", 4), ("bridging", 6)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: m013ServiceType.setStatus('mandatory')
m013ServiceOperStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 25, 2, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: m013ServiceOperStatus.setStatus('mandatory')
m013ServiceAdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 25, 2, 1, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2), ("delete", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: m013ServiceAdminStatus.setStatus('mandatory')
m013ServiceVirtualCircuit = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 25, 2, 1, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1024))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: m013ServiceVirtualCircuit.setStatus('mandatory')
m013ServiceVlans = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 25, 2, 1, 1, 10), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: m013ServiceVlans.setStatus('mandatory')
m013ServiceBridgingMode = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 25, 2, 1, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: m013ServiceBridgingMode.setStatus('mandatory')
m013FrxPortTable = MibTable((1, 3, 6, 1, 4, 1, 800, 2, 25, 3, 1), )
if mibBuilder.loadTexts: m013FrxPortTable.setStatus('mandatory')
m013FrxPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 800, 2, 25, 3, 1, 1), ).setIndexNames((0, "XYLAN-M013-MIB", "m013FrxPortSlotIndex"), (0, "XYLAN-M013-MIB", "m013FrxPortPortIndex"))
if mibBuilder.loadTexts: m013FrxPortEntry.setStatus('mandatory')
m013FrxPortSlotIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 25, 3, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 9))).setMaxAccess("readonly")
if mibBuilder.loadTexts: m013FrxPortSlotIndex.setStatus('mandatory')
m013FrxPortPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 25, 3, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1024))).setMaxAccess("readonly")
if mibBuilder.loadTexts: m013FrxPortPortIndex.setStatus('mandatory')
m013FrxPortDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 25, 3, 1, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 31))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: m013FrxPortDescription.setStatus('mandatory')
m013FrxPortAdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 25, 3, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: m013FrxPortAdminStatus.setStatus('mandatory')
m013FrxPortDefaultIpRoutingAdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 25, 3, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: m013FrxPortDefaultIpRoutingAdminStatus.setStatus('mandatory')
m013FrxPortDefaultBridgingAdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 25, 3, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: m013FrxPortDefaultBridgingAdminStatus.setStatus('mandatory')
m013FrxPortDefaultBridgingVLAN = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 25, 3, 1, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: m013FrxPortDefaultBridgingVLAN.setStatus('mandatory')
m013FrxPortDefaultBridgingMode = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 25, 3, 1, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: m013FrxPortDefaultBridgingMode.setStatus('mandatory')
m013FrxPortDynamicVCCreation = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 25, 3, 1, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: m013FrxPortDynamicVCCreation.setStatus('mandatory')
m013FrxVcControlTable = MibTable((1, 3, 6, 1, 4, 1, 800, 2, 25, 4, 1), )
if mibBuilder.loadTexts: m013FrxVcControlTable.setStatus('mandatory')
m013FrxVcControlEntry = MibTableRow((1, 3, 6, 1, 4, 1, 800, 2, 25, 4, 1, 1), ).setIndexNames((0, "XYLAN-M013-MIB", "m013FrxVcControlSlotIndex"), (0, "XYLAN-M013-MIB", "m013FrxVcControlPortIndex"), (0, "XYLAN-M013-MIB", "m013FrxVcControlDlci"))
if mibBuilder.loadTexts: m013FrxVcControlEntry.setStatus('mandatory')
m013FrxVcControlSlotIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 25, 4, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 9))).setMaxAccess("readonly")
if mibBuilder.loadTexts: m013FrxVcControlSlotIndex.setStatus('mandatory')
m013FrxVcControlPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 25, 4, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1024))).setMaxAccess("readonly")
if mibBuilder.loadTexts: m013FrxVcControlPortIndex.setStatus('mandatory')
m013FrxVcControlDlci = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 25, 4, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1024))).setMaxAccess("readonly")
if mibBuilder.loadTexts: m013FrxVcControlDlci.setStatus('mandatory')
m013FrxVcControlIpRoutingAdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 25, 4, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: m013FrxVcControlIpRoutingAdminStatus.setStatus('mandatory')
m013FrxVcStatsTable = MibTable((1, 3, 6, 1, 4, 1, 800, 2, 25, 5, 1), )
if mibBuilder.loadTexts: m013FrxVcStatsTable.setStatus('mandatory')
m013FrxVcStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 800, 2, 25, 5, 1, 1), ).setIndexNames((0, "XYLAN-M013-MIB", "m013FrxVcStatsSlotIndex"), (0, "XYLAN-M013-MIB", "m013FrxVcStatsPortIndex"), (0, "XYLAN-M013-MIB", "m013FrxVcStatsDlci"))
if mibBuilder.loadTexts: m013FrxVcStatsEntry.setStatus('mandatory')
m013FrxVcStatsSlotIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 25, 5, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 9))).setMaxAccess("readonly")
if mibBuilder.loadTexts: m013FrxVcStatsSlotIndex.setStatus('mandatory')
m013FrxVcStatsPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 25, 5, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1024))).setMaxAccess("readonly")
if mibBuilder.loadTexts: m013FrxVcStatsPortIndex.setStatus('mandatory')
m013FrxVcStatsDlci = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 25, 5, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1022))).setMaxAccess("readonly")
if mibBuilder.loadTexts: m013FrxVcStatsDlci.setStatus('mandatory')
m013FrxVcStatsTxIPOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 25, 5, 1, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: m013FrxVcStatsTxIPOctets.setStatus('mandatory')
m013FrxVcStatsTxIPFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 25, 5, 1, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: m013FrxVcStatsTxIPFrames.setStatus('mandatory')
m013FrxVcStatsRxIPOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 25, 5, 1, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: m013FrxVcStatsRxIPOctets.setStatus('mandatory')
m013FrxVcStatsRxIPFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 25, 5, 1, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: m013FrxVcStatsRxIPFrames.setStatus('mandatory')
m013FrxVcStatsTxIPXOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 25, 5, 1, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: m013FrxVcStatsTxIPXOctets.setStatus('mandatory')
m013FrxVcStatsTxIPXFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 25, 5, 1, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: m013FrxVcStatsTxIPXFrames.setStatus('mandatory')
m013FrxVcStatsRxIPXOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 25, 5, 1, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: m013FrxVcStatsRxIPXOctets.setStatus('mandatory')
m013FrxVcStatsRxIPXFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 25, 5, 1, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: m013FrxVcStatsRxIPXFrames.setStatus('mandatory')
m013FrxVcStatsTxBPDUOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 25, 5, 1, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: m013FrxVcStatsTxBPDUOctets.setStatus('mandatory')
m013FrxVcStatsTxBPDUFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 25, 5, 1, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: m013FrxVcStatsTxBPDUFrames.setStatus('mandatory')
m013FrxVcStatsRxBPDUOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 25, 5, 1, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: m013FrxVcStatsRxBPDUOctets.setStatus('mandatory')
m013FrxVcStatsRxBPDUFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 25, 5, 1, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: m013FrxVcStatsRxBPDUFrames.setStatus('mandatory')
m013FrxVcStatsTxEthernetOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 25, 5, 1, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: m013FrxVcStatsTxEthernetOctets.setStatus('mandatory')
m013FrxVcStatsTxEthernetFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 25, 5, 1, 1, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: m013FrxVcStatsTxEthernetFrames.setStatus('mandatory')
m013FrxVcStatsRxEthernetOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 25, 5, 1, 1, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: m013FrxVcStatsRxEthernetOctets.setStatus('mandatory')
m013FrxVcStatsRxEthernetFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 25, 5, 1, 1, 19), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: m013FrxVcStatsRxEthernetFrames.setStatus('mandatory')
m013FrxVcStatsTx8025Octets = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 25, 5, 1, 1, 20), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: m013FrxVcStatsTx8025Octets.setStatus('mandatory')
m013FrxVcStatsTx8025Frames = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 25, 5, 1, 1, 21), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: m013FrxVcStatsTx8025Frames.setStatus('mandatory')
m013FrxVcStatsRx8025Octets = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 25, 5, 1, 1, 22), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: m013FrxVcStatsRx8025Octets.setStatus('mandatory')
m013FrxVcStatsRx8025Frames = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 25, 5, 1, 1, 23), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: m013FrxVcStatsRx8025Frames.setStatus('mandatory')
m013FrxVcStatsTxFDDIOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 25, 5, 1, 1, 24), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: m013FrxVcStatsTxFDDIOctets.setStatus('mandatory')
m013FrxVcStatsTxFDDIFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 25, 5, 1, 1, 25), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: m013FrxVcStatsTxFDDIFrames.setStatus('mandatory')
m013FrxVcStatsRxFDDIOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 25, 5, 1, 1, 26), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: m013FrxVcStatsRxFDDIOctets.setStatus('mandatory')
m013FrxVcStatsRxFDDIFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 25, 5, 1, 1, 27), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: m013FrxVcStatsRxFDDIFrames.setStatus('mandatory')
m013PppxConfigTable = MibTable((1, 3, 6, 1, 4, 1, 800, 2, 25, 6, 1), )
if mibBuilder.loadTexts: m013PppxConfigTable.setStatus('mandatory')
m013PppxConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 800, 2, 25, 6, 1, 1), ).setIndexNames((0, "XYLAN-M013-MIB", "m013PppxConfigSlotIndex"), (0, "XYLAN-M013-MIB", "m013PppxConfigPortIndex"))
if mibBuilder.loadTexts: m013PppxConfigEntry.setStatus('mandatory')
m013PppxConfigSlotIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 25, 6, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 9))).setMaxAccess("readonly")
if mibBuilder.loadTexts: m013PppxConfigSlotIndex.setStatus('mandatory')
m013PppxConfigPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 25, 6, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1024))).setMaxAccess("readonly")
if mibBuilder.loadTexts: m013PppxConfigPortIndex.setStatus('mandatory')
m013PppxConfigDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 25, 6, 1, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 31))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: m013PppxConfigDescription.setStatus('mandatory')
m013PppxConfigAdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 25, 6, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2), ("delete", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: m013PppxConfigAdminStatus.setStatus('mandatory')
m013PppxConfigMode = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 25, 6, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("normal", 1), ("multilink", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: m013PppxConfigMode.setStatus('mandatory')
m013PppxConfigIpConfigAdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 25, 6, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("open", 1), ("close", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: m013PppxConfigIpConfigAdminStatus.setStatus('mandatory')
m013PppxConfigBcpConfigAdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 25, 6, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("open", 1), ("close", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: m013PppxConfigBcpConfigAdminStatus.setStatus('mandatory')
m013PppxConfigIpxConfigAdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 25, 6, 1, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("open", 1), ("close", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: m013PppxConfigIpxConfigAdminStatus.setStatus('mandatory')
m013PppxConfigRemoteIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 25, 6, 1, 1, 9), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: m013PppxConfigRemoteIpAddress.setStatus('mandatory')
m013PppxConfigAuthenticationType = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 25, 6, 1, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("none", 1), ("pap", 2), ("chap", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: m013PppxConfigAuthenticationType.setStatus('mandatory')
m013PppxConfigUserIdToRemote = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 25, 6, 1, 1, 11), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 31))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: m013PppxConfigUserIdToRemote.setStatus('mandatory')
m013PppxConfigPasswordToRemote = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 25, 6, 1, 1, 12), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 31))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: m013PppxConfigPasswordToRemote.setStatus('mandatory')
m013PppxConfigUserIdFromRemote = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 25, 6, 1, 1, 13), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 31))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: m013PppxConfigUserIdFromRemote.setStatus('mandatory')
m013PppxConfigPasswordFromRemote = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 25, 6, 1, 1, 14), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 31))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: m013PppxConfigPasswordFromRemote.setStatus('mandatory')
m013PppxConfigMaxFailureCount = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 25, 6, 1, 1, 15), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: m013PppxConfigMaxFailureCount.setStatus('mandatory')
m013PppxConfigMaxConfigureCount = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 25, 6, 1, 1, 16), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: m013PppxConfigMaxConfigureCount.setStatus('mandatory')
m013PppxConfigMaxTerminateCount = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 25, 6, 1, 1, 17), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: m013PppxConfigMaxTerminateCount.setStatus('mandatory')
m013PppxConfigRetryTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 25, 6, 1, 1, 18), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: m013PppxConfigRetryTimeout.setStatus('mandatory')
m013PppxCpTable = MibTable((1, 3, 6, 1, 4, 1, 800, 2, 25, 7, 1), )
if mibBuilder.loadTexts: m013PppxCpTable.setStatus('mandatory')
m013PppxCpEntry = MibTableRow((1, 3, 6, 1, 4, 1, 800, 2, 25, 7, 1, 1), ).setIndexNames((0, "XYLAN-M013-MIB", "m013PppxCpSlotIndex"), (0, "XYLAN-M013-MIB", "m013PppxCpPortIndex"))
if mibBuilder.loadTexts: m013PppxCpEntry.setStatus('mandatory')
m013PppxCpSlotIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 25, 7, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 9))).setMaxAccess("readonly")
if mibBuilder.loadTexts: m013PppxCpSlotIndex.setStatus('mandatory')
m013PppxCpPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 25, 7, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1024))).setMaxAccess("readonly")
if mibBuilder.loadTexts: m013PppxCpPortIndex.setStatus('mandatory')
m013PppxCpIpOperStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 25, 7, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("opened", 1), ("not-opened", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: m013PppxCpIpOperStatus.setStatus('mandatory')
m013PppxCpIpxOperStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 25, 7, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("opened", 1), ("not-opened", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: m013PppxCpIpxOperStatus.setStatus('mandatory')
m013PppxCpBcpOperStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 25, 7, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("opened", 1), ("not-opened", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: m013PppxCpBcpOperStatus.setStatus('mandatory')
m013PppxCpTxLcpPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 25, 7, 1, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: m013PppxCpTxLcpPackets.setStatus('mandatory')
m013PppxCpRxLcpPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 25, 7, 1, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: m013PppxCpRxLcpPackets.setStatus('mandatory')
m013PppxCpTxIpcpPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 25, 7, 1, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: m013PppxCpTxIpcpPackets.setStatus('mandatory')
m013PppxCpRxIpcpPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 25, 7, 1, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: m013PppxCpRxIpcpPackets.setStatus('mandatory')
m013PppxCpTxIpxcpPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 25, 7, 1, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: m013PppxCpTxIpxcpPackets.setStatus('mandatory')
m013PppxCpRxIpxcpPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 25, 7, 1, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: m013PppxCpRxIpxcpPackets.setStatus('mandatory')
m013PppxCpTxBcpPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 25, 7, 1, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: m013PppxCpTxBcpPackets.setStatus('mandatory')
m013PppxCpRxBcpPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 25, 7, 1, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: m013PppxCpRxBcpPackets.setStatus('mandatory')
m013PppxStatsTable = MibTable((1, 3, 6, 1, 4, 1, 800, 2, 25, 8, 1), )
if mibBuilder.loadTexts: m013PppxStatsTable.setStatus('mandatory')
m013PppxStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 800, 2, 25, 8, 1, 1), ).setIndexNames((0, "XYLAN-M013-MIB", "m013PppxStatsSlotIndex"), (0, "XYLAN-M013-MIB", "m013PppxStatsPortIndex"))
if mibBuilder.loadTexts: m013PppxStatsEntry.setStatus('mandatory')
m013PppxStatsSlotIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 25, 8, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 9))).setMaxAccess("readonly")
if mibBuilder.loadTexts: m013PppxStatsSlotIndex.setStatus('mandatory')
m013PppxStatsPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 25, 8, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1024))).setMaxAccess("readonly")
if mibBuilder.loadTexts: m013PppxStatsPortIndex.setStatus('mandatory')
m013PppxStatsTxIPOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 25, 8, 1, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: m013PppxStatsTxIPOctets.setStatus('mandatory')
m013PppxStatsTxIPPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 25, 8, 1, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: m013PppxStatsTxIPPackets.setStatus('mandatory')
m013PppxStatsRxIPOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 25, 8, 1, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: m013PppxStatsRxIPOctets.setStatus('mandatory')
m013PppxStatsRxIPPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 25, 8, 1, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: m013PppxStatsRxIPPackets.setStatus('mandatory')
m013PppxStatsTxIPXOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 25, 8, 1, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: m013PppxStatsTxIPXOctets.setStatus('mandatory')
m013PppxStatsTxIPXPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 25, 8, 1, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: m013PppxStatsTxIPXPackets.setStatus('mandatory')
m013PppxStatsRxIPXOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 25, 8, 1, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: m013PppxStatsRxIPXOctets.setStatus('mandatory')
m013PppxStatsRxIPXPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 25, 8, 1, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: m013PppxStatsRxIPXPackets.setStatus('mandatory')
m013PppxStatsTxBPDUOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 25, 8, 1, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: m013PppxStatsTxBPDUOctets.setStatus('mandatory')
m013PppxStatsTxBPDUPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 25, 8, 1, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: m013PppxStatsTxBPDUPackets.setStatus('mandatory')
m013PppxStatsRxBPDUOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 25, 8, 1, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: m013PppxStatsRxBPDUOctets.setStatus('mandatory')
m013PppxStatsRxBPDUPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 25, 8, 1, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: m013PppxStatsRxBPDUPackets.setStatus('mandatory')
m013PppxStatsTxEthernetOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 25, 8, 1, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: m013PppxStatsTxEthernetOctets.setStatus('mandatory')
m013PppxStatsTxEthernetPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 25, 8, 1, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: m013PppxStatsTxEthernetPackets.setStatus('mandatory')
m013PppxStatsRxEthernetOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 25, 8, 1, 1, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: m013PppxStatsRxEthernetOctets.setStatus('mandatory')
m013PppxStatsRxEthernetPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 25, 8, 1, 1, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: m013PppxStatsRxEthernetPackets.setStatus('mandatory')
m013PppxStatsTx8025Octets = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 25, 8, 1, 1, 19), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: m013PppxStatsTx8025Octets.setStatus('mandatory')
m013PppxStatsTx8025Packets = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 25, 8, 1, 1, 20), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: m013PppxStatsTx8025Packets.setStatus('mandatory')
m013PppxStatsRx8025Octets = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 25, 8, 1, 1, 21), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: m013PppxStatsRx8025Octets.setStatus('mandatory')
m013PppxStatsRx8025Packets = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 25, 8, 1, 1, 22), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: m013PppxStatsRx8025Packets.setStatus('mandatory')
m013PppxStatsTxFDDIOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 25, 8, 1, 1, 23), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: m013PppxStatsTxFDDIOctets.setStatus('mandatory')
m013PppxStatsTxFDDIPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 25, 8, 1, 1, 24), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: m013PppxStatsTxFDDIPackets.setStatus('mandatory')
m013PppxStatsRxFDDIOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 25, 8, 1, 1, 25), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: m013PppxStatsRxFDDIOctets.setStatus('mandatory')
m013PppxStatsRxFDDIPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 25, 8, 1, 1, 26), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: m013PppxStatsRxFDDIPackets.setStatus('mandatory')
m013IPRouterIfTable = MibTable((1, 3, 6, 1, 4, 1, 800, 2, 25, 9, 1), )
if mibBuilder.loadTexts: m013IPRouterIfTable.setStatus('mandatory')
m013IPRouterIfEntry = MibTableRow((1, 3, 6, 1, 4, 1, 800, 2, 25, 9, 1, 1), ).setIndexNames((0, "XYLAN-M013-MIB", "m013IPRouterIfSlotIndex"), (0, "XYLAN-M013-MIB", "m013IPRouterIfLogicalPortIndex"), (0, "XYLAN-M013-MIB", "m013IPRouterIfAddress"))
if mibBuilder.loadTexts: m013IPRouterIfEntry.setStatus('mandatory')
m013IPRouterIfSlotIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 25, 9, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 9))).setMaxAccess("readonly")
if mibBuilder.loadTexts: m013IPRouterIfSlotIndex.setStatus('mandatory')
m013IPRouterIfLogicalPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 25, 9, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1024))).setMaxAccess("readonly")
if mibBuilder.loadTexts: m013IPRouterIfLogicalPortIndex.setStatus('mandatory')
m013IPRouterIfAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 25, 9, 1, 1, 3), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: m013IPRouterIfAddress.setStatus('mandatory')
m013IPRouterIfSubNetMask = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 25, 9, 1, 1, 4), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: m013IPRouterIfSubNetMask.setStatus('mandatory')
m013IPRouterIfBcastAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 25, 9, 1, 1, 5), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: m013IPRouterIfBcastAddress.setStatus('mandatory')
m013IPRouterIfDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 25, 9, 1, 1, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 31))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: m013IPRouterIfDescription.setStatus('optional')
m013IPRouterIfAdmStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 25, 9, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2), ("delete", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: m013IPRouterIfAdmStatus.setStatus('mandatory')
m013IPRouterIfOperStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 25, 9, 1, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("active", 1), ("inactive", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: m013IPRouterIfOperStatus.setStatus('mandatory')
m013IPRouterIfFramingType = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 25, 9, 1, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("ethernet", 1), ("snap", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: m013IPRouterIfFramingType.setStatus('mandatory')
m013IPRouterIfMtu = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 25, 9, 1, 1, 10), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: m013IPRouterIfMtu.setStatus('mandatory')
m013IPRouterIfProtocol = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 25, 9, 1, 1, 11), OctetString().subtype(subtypeSpec=ValueSizeConstraint(2, 2)).setFixedLength(2)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: m013IPRouterIfProtocol.setStatus('mandatory')
m013Dsx3ConfigTable = MibTable((1, 3, 6, 1, 4, 1, 800, 2, 25, 10, 1), )
if mibBuilder.loadTexts: m013Dsx3ConfigTable.setStatus('mandatory')
m013Dsx3ConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 800, 2, 25, 10, 1, 1), ).setIndexNames((0, "XYLAN-M013-MIB", "m013Dsx3LineIndex"))
if mibBuilder.loadTexts: m013Dsx3ConfigEntry.setStatus('mandatory')
m013Dsx3LineIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 25, 10, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: m013Dsx3LineIndex.setStatus('mandatory')
m013Dsx3ChannelizedMode = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 25, 10, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: m013Dsx3ChannelizedMode.setStatus('mandatory')
m013Dsx3MdlEIC = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 25, 10, 1, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 10))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: m013Dsx3MdlEIC.setStatus('mandatory')
m013Dsx3MdlLIC = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 25, 10, 1, 1, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 11))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: m013Dsx3MdlLIC.setStatus('mandatory')
m013Dsx3MdlFIC = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 25, 10, 1, 1, 5), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 10))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: m013Dsx3MdlFIC.setStatus('mandatory')
m013Dsx3MdlUNIT = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 25, 10, 1, 1, 6), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 6))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: m013Dsx3MdlUNIT.setStatus('mandatory')
m013Dsx3MdlPFI = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 25, 10, 1, 1, 7), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 38))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: m013Dsx3MdlPFI.setStatus('mandatory')
m013Dsx3MdlPortIdleSignalCode = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 25, 10, 1, 1, 8), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 38))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: m013Dsx3MdlPortIdleSignalCode.setStatus('mandatory')
m013Dsx3MdlGenerator = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 25, 10, 1, 1, 9), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 38))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: m013Dsx3MdlGenerator.setStatus('mandatory')
m013Dsx3MdlTransmitPath = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 25, 10, 1, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: m013Dsx3MdlTransmitPath.setStatus('mandatory')
m013Dsx3MdlTransmitIdleSignal = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 25, 10, 1, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: m013Dsx3MdlTransmitIdleSignal.setStatus('mandatory')
m013Dsx3MdlTransmitTestSignal = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 25, 10, 1, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: m013Dsx3MdlTransmitTestSignal.setStatus('mandatory')
m013Dsx3FEACEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 25, 10, 1, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: m013Dsx3FEACEnable.setStatus('mandatory')
m013Dsx3REIEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 25, 10, 1, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: m013Dsx3REIEnable.setStatus('mandatory')
m013Dsx3RxMdlEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 25, 10, 1, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: m013Dsx3RxMdlEnable.setStatus('mandatory')
m013Dsx3RxMdlEIC = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 25, 10, 1, 1, 16), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 10))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: m013Dsx3RxMdlEIC.setStatus('mandatory')
m013Dsx3RxMdlLIC = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 25, 10, 1, 1, 17), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 11))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: m013Dsx3RxMdlLIC.setStatus('mandatory')
m013Dsx3RxMdlFIC = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 25, 10, 1, 1, 18), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 10))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: m013Dsx3RxMdlFIC.setStatus('mandatory')
m013Dsx3RxMdlUNIT = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 25, 10, 1, 1, 19), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 6))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: m013Dsx3RxMdlUNIT.setStatus('mandatory')
m013Dsx3RxMdlPFI = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 25, 10, 1, 1, 20), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 38))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: m013Dsx3RxMdlPFI.setStatus('mandatory')
m013Dsx3RxMdlPortIdleSignalCode = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 25, 10, 1, 1, 21), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 38))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: m013Dsx3RxMdlPortIdleSignalCode.setStatus('mandatory')
m013Dsx3RxMdlGenerator = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 25, 10, 1, 1, 22), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 38))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: m013Dsx3RxMdlGenerator.setStatus('mandatory')
m013Dsx3RemoteStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 25, 10, 1, 1, 23), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1023))).setMaxAccess("readonly")
if mibBuilder.loadTexts: m013Dsx3RemoteStatus.setStatus('mandatory')
m013Dsx3RemoteStatusLastChange = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 25, 10, 1, 1, 24), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: m013Dsx3RemoteStatusLastChange.setStatus('mandatory')
m013Dsx3LedStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 25, 10, 1, 1, 25), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: m013Dsx3LedStatus.setStatus('mandatory')
m013Dsx3Ds1StatsEnableMask = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 25, 10, 1, 1, 26), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: m013Dsx3Ds1StatsEnableMask.setStatus('mandatory')
m013Dsx3StatsTable = MibTable((1, 3, 6, 1, 4, 1, 800, 2, 25, 10, 2), )
if mibBuilder.loadTexts: m013Dsx3StatsTable.setStatus('mandatory')
m013Dsx3StatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 800, 2, 25, 10, 2, 1), ).setIndexNames((0, "XYLAN-M013-MIB", "m013Dsx3StatsLineIndex"))
if mibBuilder.loadTexts: m013Dsx3StatsEntry.setStatus('mandatory')
m013Dsx3StatsLineIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 25, 10, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: m013Dsx3StatsLineIndex.setStatus('mandatory')
m013Dsx3StatsRxREI = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 25, 10, 2, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: m013Dsx3StatsRxREI.setStatus('mandatory')
m013Dsx3StatsRxFEAC = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 25, 10, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15))).clone(namedValues=NamedValues(("dsx3NoFEAC", 1), ("dsx3DS3EquipmentFailure", 2), ("dsx3DS3LOS", 3), ("dsx3DS3OutofFrame", 4), ("dsx3DS3AISreceived", 5), ("dsx3DS3IDLEreceived", 6), ("dsx3DS3NonServiceAffectingEquipFailure", 7), ("dsx3CommonEquipmentFailure", 8), ("dsx3DS3LoopbackReceived", 9), ("dsx3DS1ServiceAffectingEquipmentFailure", 10), ("dsx3DS1NonServiceAffectingEquipFailure", 11), ("dsx3SingleDS1LOS", 12), ("dsx3MultipleDS1sLOS", 13), ("dsx3UnknownCode", 14), ("dsx3UnsupportedCode", 15)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: m013Dsx3StatsRxFEAC.setStatus('mandatory')
m013Dsx1ConfigTable = MibTable((1, 3, 6, 1, 4, 1, 800, 2, 25, 11, 1), )
if mibBuilder.loadTexts: m013Dsx1ConfigTable.setStatus('mandatory')
m013Dsx1ConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 800, 2, 25, 11, 1, 1), ).setIndexNames((0, "XYLAN-M013-MIB", "m013Dsx3LineIndex"))
if mibBuilder.loadTexts: m013Dsx1ConfigEntry.setStatus('mandatory')
m013Dsx1LineIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 25, 11, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: m013Dsx1LineIndex.setStatus('mandatory')
m013Dsx1T1BertPattern = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 25, 11, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 6))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: m013Dsx1T1BertPattern.setStatus('mandatory')
m013Dsx1T1BertInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 25, 11, 1, 1, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: m013Dsx1T1BertInterval.setStatus('mandatory')
m013Dsx1T1BertFraming = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 25, 11, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("useframing", 1), ("noframing", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: m013Dsx1T1BertFraming.setStatus('mandatory')
m013Dsx1T1BertTestEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 25, 11, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: m013Dsx1T1BertTestEnable.setStatus('mandatory')
m013Dsx1RemoteStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 25, 11, 1, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1023))).setMaxAccess("readonly")
if mibBuilder.loadTexts: m013Dsx1RemoteStatus.setStatus('mandatory')
m013Dsx1RemoteStatusLastChange = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 25, 11, 1, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: m013Dsx1RemoteStatusLastChange.setStatus('mandatory')
mibBuilder.exportSymbols("XYLAN-M013-MIB", m013PppxStatsTxIPXPackets=m013PppxStatsTxIPXPackets, m013IPRouterIfBcastAddress=m013IPRouterIfBcastAddress, m013PppxConfigMaxTerminateCount=m013PppxConfigMaxTerminateCount, m013FrxPortDefaultBridgingVLAN=m013FrxPortDefaultBridgingVLAN, m013FrxVcStatsRxIPOctets=m013FrxVcStatsRxIPOctets, m013Dsx3RxMdlLIC=m013Dsx3RxMdlLIC, m013Dsx3RxMdlPFI=m013Dsx3RxMdlPFI, m013ServiceNumber=m013ServiceNumber, m013PppxConfigUserIdToRemote=m013PppxConfigUserIdToRemote, m013Dsx3RxMdlFIC=m013Dsx3RxMdlFIC, m013Dsx3LineIndex=m013Dsx3LineIndex, m013Dsx1T1BertInterval=m013Dsx1T1BertInterval, m013Dsx1Group=m013Dsx1Group, m013Dsx1T1BertTestEnable=m013Dsx1T1BertTestEnable, m013PppxStatsRxBPDUOctets=m013PppxStatsRxBPDUOctets, m013FrxVcStatsRx8025Octets=m013FrxVcStatsRx8025Octets, m013Dsx3FEACEnable=m013Dsx3FEACEnable, m013Dsx3StatsRxREI=m013Dsx3StatsRxREI, m013PppxConfigPortIndex=m013PppxConfigPortIndex, m013FrxVcStatsSlotIndex=m013FrxVcStatsSlotIndex, m013PppxStatsEntry=m013PppxStatsEntry, m013PppxStatsTxEthernetPackets=m013PppxStatsTxEthernetPackets, m013FrxVcControlGroup=m013FrxVcControlGroup, m013PppxStatsGroup=m013PppxStatsGroup, m013ServiceBridgingMode=m013ServiceBridgingMode, m013FrxPortDefaultBridgingAdminStatus=m013FrxPortDefaultBridgingAdminStatus, m013PppxCpRxBcpPackets=m013PppxCpRxBcpPackets, m013Dsx3MdlEIC=m013Dsx3MdlEIC, m013Dsx3MdlTransmitPath=m013Dsx3MdlTransmitPath, m013FrxVcStatsRxIPFrames=m013FrxVcStatsRxIPFrames, m013ServiceLogicalPortIndex=m013ServiceLogicalPortIndex, m013FrxVcStatsRxIPXOctets=m013FrxVcStatsRxIPXOctets, m013FrxVcStatsTxIPFrames=m013FrxVcStatsTxIPFrames, m013ServiceVlans=m013ServiceVlans, m013FrxVcStatsRxBPDUOctets=m013FrxVcStatsRxBPDUOctets, m013PppxConfigSlotIndex=m013PppxConfigSlotIndex, m013PppxStatsSlotIndex=m013PppxStatsSlotIndex, m013Dsx3MdlTransmitTestSignal=m013Dsx3MdlTransmitTestSignal, m013PppxStatsRx8025Packets=m013PppxStatsRx8025Packets, m013FrxVcStatsRxEthernetFrames=m013FrxVcStatsRxEthernetFrames, m013Dsx3REIEnable=m013Dsx3REIEnable, m013Dsx1ConfigEntry=m013Dsx1ConfigEntry, m013PppxStatsTxIPXOctets=m013PppxStatsTxIPXOctets, m013FrxVcStatsPortIndex=m013FrxVcStatsPortIndex, m013ServiceEntry=m013ServiceEntry, m013FrxVcStatsTxFDDIFrames=m013FrxVcStatsTxFDDIFrames, m013PppxCpRxIpcpPackets=m013PppxCpRxIpcpPackets, m013PppxCpTxBcpPackets=m013PppxCpTxBcpPackets, m013PppxConfigTable=m013PppxConfigTable, m013ServiceType=m013ServiceType, m013PppxStatsTxBPDUPackets=m013PppxStatsTxBPDUPackets, m013FrxVcStatsRxIPXFrames=m013FrxVcStatsRxIPXFrames, m013ProvisioningGroup=m013ProvisioningGroup, m013Dsx3ConfigTable=m013Dsx3ConfigTable, m013PppxStatsTxIPPackets=m013PppxStatsTxIPPackets, m013SlotIndex=m013SlotIndex, m013FrxVcStatsDlci=m013FrxVcStatsDlci, m013IPRouterIfOperStatus=m013IPRouterIfOperStatus, m013Ds0Mask=m013Ds0Mask, m013PppxStatsPortIndex=m013PppxStatsPortIndex, m013PppxStatsRxEthernetOctets=m013PppxStatsRxEthernetOctets, m013PppxCpTxIpxcpPackets=m013PppxCpTxIpxcpPackets, m013PppxStatsTxFDDIOctets=m013PppxStatsTxFDDIOctets, m013LogicalPortIndex=m013LogicalPortIndex, m013PppxCpIpOperStatus=m013PppxCpIpOperStatus, m013PppxCpTxLcpPackets=m013PppxCpTxLcpPackets, m013PppxStatsTx8025Packets=m013PppxStatsTx8025Packets, m013Dsx3StatsRxFEAC=m013Dsx3StatsRxFEAC, m013Dsx3MdlPFI=m013Dsx3MdlPFI, m013PppxConfigMode=m013PppxConfigMode, m013Dsx3MdlPortIdleSignalCode=m013Dsx3MdlPortIdleSignalCode, m013FrxPortAdminStatus=m013FrxPortAdminStatus, m013PppxConfigAuthenticationType=m013PppxConfigAuthenticationType, m013FrxVcControlSlotIndex=m013FrxVcControlSlotIndex, m013PppxCpRxLcpPackets=m013PppxCpRxLcpPackets, m013PppxStatsRxFDDIOctets=m013PppxStatsRxFDDIOctets, m013FrxPortDefaultBridgingMode=m013FrxPortDefaultBridgingMode, m013FrxVcStatsRx8025Frames=m013FrxVcStatsRx8025Frames, m013PppxCpBcpOperStatus=m013PppxCpBcpOperStatus, m013IPRouterIfTable=m013IPRouterIfTable, m013Dsx3MdlGenerator=m013Dsx3MdlGenerator, m013ServiceTableEntryType=m013ServiceTableEntryType, m013PppxConfigMaxFailureCount=m013PppxConfigMaxFailureCount, m013FrxVcStatsTxEthernetFrames=m013FrxVcStatsTxEthernetFrames, m013PppxStatsTable=m013PppxStatsTable, m013Dsx3MdlTransmitIdleSignal=m013Dsx3MdlTransmitIdleSignal, m013PppxConfigRetryTimeout=m013PppxConfigRetryTimeout, m013PppxCpRxIpxcpPackets=m013PppxCpRxIpxcpPackets, m013FrxVcStatsRxFDDIOctets=m013FrxVcStatsRxFDDIOctets, m013PppxCpTxIpcpPackets=m013PppxCpTxIpcpPackets, m013PppxStatsRxIPOctets=m013PppxStatsRxIPOctets, m013FrxVcStatsRxFDDIFrames=m013FrxVcStatsRxFDDIFrames, m013FrxPortDefaultIpRoutingAdminStatus=m013FrxPortDefaultIpRoutingAdminStatus, m013Protocol=m013Protocol, m013FrxPortGroup=m013FrxPortGroup, m013FrxPortSlotIndex=m013FrxPortSlotIndex, m013FrxPortPortIndex=m013FrxPortPortIndex, m013Ds3PortIndex=m013Ds3PortIndex, m013IPRouterIfEntry=m013IPRouterIfEntry, m013Dsx3ConfigEntry=m013Dsx3ConfigEntry, m013PppxConfigBcpConfigAdminStatus=m013PppxConfigBcpConfigAdminStatus, m013Ds1Fraction=m013Ds1Fraction, m013FrxVcStatsEntry=m013FrxVcStatsEntry, m013ServiceVirtualCircuit=m013ServiceVirtualCircuit, m013ServiceGroup=m013ServiceGroup, m013FrxPortTable=m013FrxPortTable, m013Dsx3MdlFIC=m013Dsx3MdlFIC, m013Dsx1ConfigTable=m013Dsx1ConfigTable, m013FrxVcStatsRxEthernetOctets=m013FrxVcStatsRxEthernetOctets, m013FrxVcControlIpRoutingAdminStatus=m013FrxVcControlIpRoutingAdminStatus, m013PppxCpSlotIndex=m013PppxCpSlotIndex, m013PppxCpIpxOperStatus=m013PppxCpIpxOperStatus, m013FrxVcStatsTx8025Frames=m013FrxVcStatsTx8025Frames, m013Dsx3RemoteStatus=m013Dsx3RemoteStatus, m013PppxStatsRxBPDUPackets=m013PppxStatsRxBPDUPackets, m013IPRouterIfMtu=m013IPRouterIfMtu, m013FrxVcControlEntry=m013FrxVcControlEntry, m013PppxConfigDescription=m013PppxConfigDescription, m013FrxVcStatsTable=m013FrxVcStatsTable, m013PppxCpTable=m013PppxCpTable, m013ServiceOperStatus=m013ServiceOperStatus, m013FrxVcStatsTxIPXFrames=m013FrxVcStatsTxIPXFrames, m013FrxVcStatsTxBPDUFrames=m013FrxVcStatsTxBPDUFrames, m013Dsx3StatsTable=m013Dsx3StatsTable, m013IPRouterIfSubNetMask=m013IPRouterIfSubNetMask, m013IPRouterIfSlotIndex=m013IPRouterIfSlotIndex, m013IPRouterIfDescription=m013IPRouterIfDescription, m013PppxConfigIpConfigAdminStatus=m013PppxConfigIpConfigAdminStatus, m013PppxStatsRxIPXOctets=m013PppxStatsRxIPXOctets, m013PppxConfigRemoteIpAddress=m013PppxConfigRemoteIpAddress, m013Dsx3MdlLIC=m013Dsx3MdlLIC, m013Dsx3RxMdlUNIT=m013Dsx3RxMdlUNIT, m013ProvisioningEntry=m013ProvisioningEntry, m013IPRouterIfFramingType=m013IPRouterIfFramingType, m013PppxStatsRxFDDIPackets=m013PppxStatsRxFDDIPackets, m013Dsx3StatsLineIndex=m013Dsx3StatsLineIndex, m013Dsx3MdlUNIT=m013Dsx3MdlUNIT, m013IfIndex=m013IfIndex, m013PppxStatsTx8025Octets=m013PppxStatsTx8025Octets, m013PppxStatsTxEthernetOctets=m013PppxStatsTxEthernetOctets, m013PppxStatsRx8025Octets=m013PppxStatsRx8025Octets, m013Dsx3RxMdlGenerator=m013Dsx3RxMdlGenerator, m013Dsx3RxMdlEIC=m013Dsx3RxMdlEIC, m013Dsx1T1BertFraming=m013Dsx1T1BertFraming, m013PppxStatsRxEthernetPackets=m013PppxStatsRxEthernetPackets, m013PppxCpGroup=m013PppxCpGroup, m013Dsx3LedStatus=m013Dsx3LedStatus, m013Dsx3RxMdlPortIdleSignalCode=m013Dsx3RxMdlPortIdleSignalCode, m013FrxPortEntry=m013FrxPortEntry, m013ProvisioningTable=m013ProvisioningTable, m013PppxStatsRxIPXPackets=m013PppxStatsRxIPXPackets, m013IPRouterGroup=m013IPRouterGroup, m013PppxCpPortIndex=m013PppxCpPortIndex, m013IPRouterIfProtocol=m013IPRouterIfProtocol, m013FrxVcStatsTxIPXOctets=m013FrxVcStatsTxIPXOctets, m013Dsx3ChannelizedMode=m013Dsx3ChannelizedMode, m013FrxVcStatsTxEthernetOctets=m013FrxVcStatsTxEthernetOctets, m013IPRouterIfAdmStatus=m013IPRouterIfAdmStatus, m013Dsx3RxMdlEnable=m013Dsx3RxMdlEnable, m013FrxVcStatsRxBPDUFrames=m013FrxVcStatsRxBPDUFrames, m013Dsx1RemoteStatus=m013Dsx1RemoteStatus, m013IPRouterIfAddress=m013IPRouterIfAddress, m013Dsx3RemoteStatusLastChange=m013Dsx3RemoteStatusLastChange, m013ServiceAdminStatus=m013ServiceAdminStatus, m013PppxConfigIpxConfigAdminStatus=m013PppxConfigIpxConfigAdminStatus, m013ServiceTable=m013ServiceTable, m013PppxConfigPasswordFromRemote=m013PppxConfigPasswordFromRemote, m013FrxVcControlDlci=m013FrxVcControlDlci, m013PppxCpEntry=m013PppxCpEntry, m013ServiceSlotIndex=m013ServiceSlotIndex, m013PppxConfigMaxConfigureCount=m013PppxConfigMaxConfigureCount, m013Dsx3StatsEntry=m013Dsx3StatsEntry, m013EntryStatus=m013EntryStatus, m013FrxVcStatsTxIPOctets=m013FrxVcStatsTxIPOctets, m013FrxVcStatsTx8025Octets=m013FrxVcStatsTx8025Octets, m013Dsx3Group=m013Dsx3Group, m013FrxPortDescription=m013FrxPortDescription, m013FrxPortDynamicVCCreation=m013FrxPortDynamicVCCreation, m013PppxConfigUserIdFromRemote=m013PppxConfigUserIdFromRemote, m013Dsx1LineIndex=m013Dsx1LineIndex, m013PppxConfigPasswordToRemote=m013PppxConfigPasswordToRemote, m013PppxConfigEntry=m013PppxConfigEntry, m013ServiceDescription=m013ServiceDescription, m013FrxVcStatsTxBPDUOctets=m013FrxVcStatsTxBPDUOctets, m013Dsx1T1BertPattern=m013Dsx1T1BertPattern, m013Description=m013Description, m013PppxStatsTxIPOctets=m013PppxStatsTxIPOctets, m013PppxStatsTxBPDUOctets=m013PppxStatsTxBPDUOctets, m013PppxStatsTxFDDIPackets=m013PppxStatsTxFDDIPackets, m013Dsx3Ds1StatsEnableMask=m013Dsx3Ds1StatsEnableMask, m013PppxConfigGroup=m013PppxConfigGroup, m013FrxVcControlTable=m013FrxVcControlTable, m013PppxConfigAdminStatus=m013PppxConfigAdminStatus, m013PppxStatsRxIPPackets=m013PppxStatsRxIPPackets, m013IPRouterIfLogicalPortIndex=m013IPRouterIfLogicalPortIndex, m013FrxVcStatsGroup=m013FrxVcStatsGroup, m013FrxVcControlPortIndex=m013FrxVcControlPortIndex, m013FrxVcStatsTxFDDIOctets=m013FrxVcStatsTxFDDIOctets, m013Dsx1RemoteStatusLastChange=m013Dsx1RemoteStatusLastChange)
