#
# PySNMP MIB module HUAWEI-MPLSOAM-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/HUAWEI-MPLSOAM-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 19:35:25 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, ObjectIdentifier, Integer = mibBuilder.importSymbols("ASN1", "OctetString", "ObjectIdentifier", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsUnion, ConstraintsIntersection, ValueRangeConstraint, ValueSizeConstraint, SingleValueConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsUnion", "ConstraintsIntersection", "ValueRangeConstraint", "ValueSizeConstraint", "SingleValueConstraint")
hwMpls, = mibBuilder.importSymbols("HUAWEI-MIB", "hwMpls")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
Unsigned32, Bits, MibScalar, MibTable, MibTableRow, MibTableColumn, NotificationType, iso, Integer32, ObjectIdentity, ModuleIdentity, Gauge32, MibIdentifier, IpAddress, TimeTicks, Counter32, Counter64 = mibBuilder.importSymbols("SNMPv2-SMI", "Unsigned32", "Bits", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "NotificationType", "iso", "Integer32", "ObjectIdentity", "ModuleIdentity", "Gauge32", "MibIdentifier", "IpAddress", "TimeTicks", "Counter32", "Counter64")
TruthValue, DisplayString, RowStatus, TimeStamp, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "TruthValue", "DisplayString", "RowStatus", "TimeStamp", "TextualConvention")
hwMplsOam = ModuleIdentity((1, 3, 6, 1, 4, 1, 2011, 5, 12, 7))
if mibBuilder.loadTexts: hwMplsOam.setLastUpdated('200504271724Z')
if mibBuilder.loadTexts: hwMplsOam.setOrganization('Huawei Technologies Co., Ltd.')
hwMplsOamPs = MibIdentifier((1, 3, 6, 1, 4, 1, 2011, 5, 12, 7, 1))
hwMplsOamObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 2011, 5, 12, 7, 1, 1))
hwMplsOamCapability = MibScalar((1, 3, 6, 1, 4, 1, 2011, 5, 12, 7, 1, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 2))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwMplsOamCapability.setStatus('current')
hwMplsOamIgrTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 5, 12, 7, 1, 1, 2), )
if mibBuilder.loadTexts: hwMplsOamIgrTable.setStatus('current')
hwMplsOamIgrEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 5, 12, 7, 1, 1, 2, 1), ).setIndexNames((0, "HUAWEI-MPLSOAM-MIB", "hwMplsOamIgrIndex"))
if mibBuilder.loadTexts: hwMplsOamIgrEntry.setStatus('current')
hwMplsOamIgrIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 12, 7, 1, 1, 2, 1, 1), Unsigned32())
if mibBuilder.loadTexts: hwMplsOamIgrIndex.setStatus('current')
hwMplsOamIgrTunnName = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 12, 7, 1, 1, 2, 1, 2), OctetString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwMplsOamIgrTunnName.setStatus('current')
hwMplsOamIgrDetType = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 12, 7, 1, 1, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("cv", 1), ("ffd", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwMplsOamIgrDetType.setStatus('current')
hwMplsOamIgrDetFreq = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 12, 7, 1, 1, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("cv1000ms", 0), ("ffd10ms2", 1), ("ffd20ms3", 2), ("ffd50ms4", 3), ("ffd100ms5", 4), ("ffd200ms6", 5), ("ffd500ms7", 6), ("ffd3ms8", 7)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwMplsOamIgrDetFreq.setStatus('current')
hwMplsOamIgrRevType = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 12, 7, 1, 1, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("private", 1), ("share", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwMplsOamIgrRevType.setStatus('current')
hwMplsOamIgrRevLspName = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 12, 7, 1, 1, 2, 1, 6), OctetString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwMplsOamIgrRevLspName.setStatus('current')
hwMplsOamIgrRevLsrId = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 12, 7, 1, 1, 2, 1, 7), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwMplsOamIgrRevLsrId.setStatus('current')
hwMplsOamIgrRevSessTunnId = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 12, 7, 1, 1, 2, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwMplsOamIgrRevSessTunnId.setStatus('current')
hwMplsOamIgrEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 12, 7, 1, 1, 2, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwMplsOamIgrEnable.setStatus('current')
hwMplsOamIgrValid = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 12, 7, 1, 1, 2, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("stop", 0), ("start", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwMplsOamIgrValid.setStatus('current')
hwMplsOamIgrAvaState = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 12, 7, 1, 1, 2, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("available", 0), ("unavailable", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwMplsOamIgrAvaState.setStatus('current')
hwMplsOamIgrDefectType = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 12, 7, 1, 1, 2, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9))).clone(namedValues=NamedValues(("nondefect", 0), ("dServer", 1), ("dPeerMe", 2), ("dLOCV", 3), ("dTTSI-Mismatch", 4), ("dTTSI-Mismerge", 5), ("dExcess", 6), ("dUnknown", 7), ("dOamFail", 8), ("dIngressDown", 9)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwMplsOamIgrDefectType.setStatus('current')
hwMplsOamIgrRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 12, 7, 1, 1, 2, 1, 13), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwMplsOamIgrRowStatus.setStatus('current')
hwMplsOamIgrCompatibilityMode = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 12, 7, 1, 1, 2, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("ptnMode", 1), ("routerMode", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwMplsOamIgrCompatibilityMode.setStatus('current')
hwMplsOamIgrBDIFreq = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 12, 7, 1, 1, 2, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("perSecond", 1), ("detectFrequency", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwMplsOamIgrBDIFreq.setStatus('current')
hwMplsOamEgrTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 5, 12, 7, 1, 1, 3), )
if mibBuilder.loadTexts: hwMplsOamEgrTable.setStatus('current')
hwMplsOamEgrEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 5, 12, 7, 1, 1, 3, 1), ).setIndexNames((0, "HUAWEI-MPLSOAM-MIB", "hwMplsOamEgrLspName"), (0, "HUAWEI-MPLSOAM-MIB", "hwMplsOamEgrLsrId"), (0, "HUAWEI-MPLSOAM-MIB", "hwMplsOamEgrSessTunnId"))
if mibBuilder.loadTexts: hwMplsOamEgrEntry.setStatus('current')
hwMplsOamEgrLspName = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 12, 7, 1, 1, 3, 1, 1), OctetString())
if mibBuilder.loadTexts: hwMplsOamEgrLspName.setStatus('current')
hwMplsOamEgrLsrId = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 12, 7, 1, 1, 3, 1, 2), IpAddress())
if mibBuilder.loadTexts: hwMplsOamEgrLsrId.setStatus('current')
hwMplsOamEgrSessTunnId = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 12, 7, 1, 1, 3, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535)))
if mibBuilder.loadTexts: hwMplsOamEgrSessTunnId.setStatus('current')
hwMplsOamEgrDetType = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 12, 7, 1, 1, 3, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("invalid", 0), ("cv", 1), ("ffd", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwMplsOamEgrDetType.setStatus('current')
hwMplsOamEgrDetFreq = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 12, 7, 1, 1, 3, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("cv1000ms", 0), ("ffd10ms2", 1), ("ffd20ms3", 2), ("ffd50ms4", 3), ("ffd100ms5", 4), ("ffd200ms6", 5), ("ffd500ms7", 6), ("invalid8", 7), ("ffd3ms9", 8)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwMplsOamEgrDetFreq.setStatus('current')
hwMplsOamEgrRevType = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 12, 7, 1, 1, 3, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("invalid", 0), ("private", 1), ("share", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwMplsOamEgrRevType.setStatus('current')
hwMplsOamEgrRevTunnName = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 12, 7, 1, 1, 3, 1, 7), OctetString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwMplsOamEgrRevTunnName.setStatus('current')
hwMplsOamEgrAutoEn = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 12, 7, 1, 1, 3, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwMplsOamEgrAutoEn.setStatus('current')
hwMplsOamEgrAutoOvertime = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 12, 7, 1, 1, 3, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwMplsOamEgrAutoOvertime.setStatus('current')
hwMplsOamEgrBDIFreq = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 12, 7, 1, 1, 3, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("perSecond", 0), ("detectFrequency", 1)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwMplsOamEgrBDIFreq.setStatus('current')
hwMplsOamEgrEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 12, 7, 1, 1, 3, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwMplsOamEgrEnable.setStatus('current')
hwMplsOamEgrValid = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 12, 7, 1, 1, 3, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("stop", 1), ("start", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwMplsOamEgrValid.setStatus('current')
hwMplsOamEgrAvaState = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 12, 7, 1, 1, 3, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("available", 0), ("unavailable", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwMplsOamEgrAvaState.setStatus('current')
hwMplsOamEgrDefectType = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 12, 7, 1, 1, 3, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9))).clone(namedValues=NamedValues(("nondefect", 0), ("dServer", 1), ("dPeerMe", 2), ("dLOCV", 3), ("dTTSI-Mismatch", 4), ("dTTSI-Mismerge", 5), ("dExcess", 6), ("dUnknown", 7), ("dOamFail", 8), ("dEgressDown", 9)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwMplsOamEgrDefectType.setStatus('current')
hwMplsOamEgrRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 12, 7, 1, 1, 3, 1, 15), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwMplsOamEgrRowStatus.setStatus('current')
hwMplsOamRlsnTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 5, 12, 7, 1, 1, 4), )
if mibBuilder.loadTexts: hwMplsOamRlsnTable.setStatus('current')
hwMplsOamRlsnEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 5, 12, 7, 1, 1, 4, 1), ).setIndexNames((0, "HUAWEI-MPLSOAM-MIB", "hwMplsOamRlsnLspName"), (0, "HUAWEI-MPLSOAM-MIB", "hwMplsOamRlsnLsrId"), (0, "HUAWEI-MPLSOAM-MIB", "hwMplsOamRlsnSessTunnId"), (0, "HUAWEI-MPLSOAM-MIB", "hwMplsOamRlsnIfIndex"))
if mibBuilder.loadTexts: hwMplsOamRlsnEntry.setStatus('current')
hwMplsOamRlsnLspName = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 12, 7, 1, 1, 4, 1, 1), OctetString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwMplsOamRlsnLspName.setStatus('current')
hwMplsOamRlsnLsrId = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 12, 7, 1, 1, 4, 1, 2), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwMplsOamRlsnLsrId.setStatus('current')
hwMplsOamRlsnSessTunnId = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 12, 7, 1, 1, 4, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwMplsOamRlsnSessTunnId.setStatus('current')
hwMplsOamRlsnIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 12, 7, 1, 1, 4, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwMplsOamRlsnIfIndex.setStatus('current')
hwMplsOamRlsnIfName = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 12, 7, 1, 1, 4, 1, 5), OctetString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwMplsOamRlsnIfName.setStatus('current')
hwMplsOamRlsnIsDown = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 12, 7, 1, 1, 4, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("up", 1), ("down", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwMplsOamRlsnIsDown.setStatus('current')
hwMplsOamRlsnRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 12, 7, 1, 1, 4, 1, 7), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwMplsOamRlsnRowStatus.setStatus('current')
hwMplsOamView = MibScalar((1, 3, 6, 1, 4, 1, 2011, 5, 12, 7, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 0))).clone(namedValues=NamedValues(("mpls-oam", 1), ("null", 0)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwMplsOamView.setStatus('current')
hwMplsOamL2vcTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 5, 12, 7, 1, 1, 6), )
if mibBuilder.loadTexts: hwMplsOamL2vcTable.setStatus('current')
hwMplsOamL2vcEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 5, 12, 7, 1, 1, 6, 1), ).setIndexNames((0, "HUAWEI-MPLSOAM-MIB", "hwMplsOamL2vcPeerIp"), (0, "HUAWEI-MPLSOAM-MIB", "hwMplsOamL2vcVcType"), (0, "HUAWEI-MPLSOAM-MIB", "hwMplsOamL2vcVcId"))
if mibBuilder.loadTexts: hwMplsOamL2vcEntry.setStatus('current')
hwMplsOamL2vcPeerIp = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 12, 7, 1, 1, 6, 1, 1), IpAddress())
if mibBuilder.loadTexts: hwMplsOamL2vcPeerIp.setStatus('current')
hwMplsOamL2vcVcType = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 12, 7, 1, 1, 6, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 9, 10, 11, 12, 13, 14, 17, 18, 21, 64, 0))).clone(namedValues=NamedValues(("fr", 1), ("atm-aal5-sdu", 2), ("atm-trans-cell", 3), ("vlan", 4), ("ethernet", 5), ("hdlc", 6), ("ppp", 7), ("atm-nto1-vcc", 9), ("atm-nto1-vpc", 10), ("ip-layer2", 11), ("atm-1to1-vcc", 12), ("atm-1to1-vpc", 13), ("atm-aal5-pdu", 14), ("satop-e1", 17), ("satop-t1", 18), ("cesopsn-basic", 21), ("ip-interworking", 64), ("unknown", 0))))
if mibBuilder.loadTexts: hwMplsOamL2vcVcType.setStatus('current')
hwMplsOamL2vcVcId = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 12, 7, 1, 1, 6, 1, 3), Unsigned32())
if mibBuilder.loadTexts: hwMplsOamL2vcVcId.setStatus('current')
hwMplsOamL2vcDetType = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 12, 7, 1, 1, 6, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("cv", 1), ("ffd", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwMplsOamL2vcDetType.setStatus('current')
hwMplsOamL2vcDetFreq = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 12, 7, 1, 1, 6, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("cv1000ms", 0), ("ffd10ms2", 1), ("ffd20ms3", 2), ("ffd50ms4", 3), ("ffd100ms5", 4), ("ffd200ms6", 5), ("ffd500ms7", 6), ("ffd3ms8", 7)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwMplsOamL2vcDetFreq.setStatus('current')
hwMplsOamL2vcRevDetType = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 12, 7, 1, 1, 6, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("invalid", 0), ("cv", 1), ("ffd", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwMplsOamL2vcRevDetType.setStatus('current')
hwMplsOamL2vcRevDetFreq = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 12, 7, 1, 1, 6, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("cv1000ms", 0), ("ffd10ms2", 1), ("ffd20ms3", 2), ("ffd50ms4", 3), ("ffd100ms5", 4), ("ffd200ms6", 5), ("ffd500ms7", 6), ("invalid8", 7), ("ffd3ms9", 8)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwMplsOamL2vcRevDetFreq.setStatus('current')
hwMplsOamL2vcSendEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 12, 7, 1, 1, 6, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwMplsOamL2vcSendEnable.setStatus('current')
hwMplsOamL2vcReceiveEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 12, 7, 1, 1, 6, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwMplsOamL2vcReceiveEnable.setStatus('current')
hwMplsOamL2vcAutoProlEn = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 12, 7, 1, 1, 6, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwMplsOamL2vcAutoProlEn.setStatus('current')
hwMplsOamL2vcAutoOvertime = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 12, 7, 1, 1, 6, 1, 14), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwMplsOamL2vcAutoOvertime.setStatus('current')
hwMplsOamL2vcValid = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 12, 7, 1, 1, 6, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("stop", 1), ("start", 2), ("ready", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwMplsOamL2vcValid.setStatus('current')
hwMplsOamL2vcAvaState = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 12, 7, 1, 1, 6, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("available", 0), ("unavailable", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwMplsOamL2vcAvaState.setStatus('current')
hwMplsOamL2vcDefectType = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 12, 7, 1, 1, 6, 1, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9))).clone(namedValues=NamedValues(("nondefect", 0), ("dServer", 1), ("dPeerMe", 2), ("dLOCV", 3), ("dTTSI-Mismatch", 4), ("dTTSI-Mismerge", 5), ("dExcess", 6), ("dUnknown", 7), ("dOamFail", 8), ("pw-down", 9)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwMplsOamL2vcDefectType.setStatus('current')
hwMplsOamL2vcBdiDefectType = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 12, 7, 1, 1, 6, 1, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("nondefect", 0), ("dServer", 1), ("dPeerMe", 2), ("dLOCV", 3), ("dTTSI-Mismatch", 4), ("dTTSI-Mismerge", 5), ("dExcess", 6), ("dUnknown", 7), ("dOamFail", 8)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwMplsOamL2vcBdiDefectType.setStatus('current')
hwMplsOamL2vcRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 12, 7, 1, 1, 6, 1, 30), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwMplsOamL2vcRowStatus.setStatus('current')
hwMplsOamL2vcCompatibilityMode = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 12, 7, 1, 1, 6, 1, 31), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("ptnMode", 1), ("routerMode", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwMplsOamL2vcCompatibilityMode.setStatus('current')
hwMplsOamL2vcBDIFreq = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 12, 7, 1, 1, 6, 1, 32), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("perSecond", 1), ("detectFrequency", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwMplsOamL2vcBDIFreq.setStatus('current')
hwMplsOamBidirectionalTunnelTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 5, 12, 7, 1, 1, 7), )
if mibBuilder.loadTexts: hwMplsOamBidirectionalTunnelTable.setStatus('current')
hwMplsOamBidirectionalTunnelEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 5, 12, 7, 1, 1, 7, 1), ).setIndexNames((0, "HUAWEI-MPLSOAM-MIB", "hwMplsOamBidirectionalTunnelIndex"))
if mibBuilder.loadTexts: hwMplsOamBidirectionalTunnelEntry.setStatus('current')
hwMplsOamBidirectionalTunnelIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 12, 7, 1, 1, 7, 1, 1), Unsigned32())
if mibBuilder.loadTexts: hwMplsOamBidirectionalTunnelIndex.setStatus('current')
hwMplsOamBidirectionalTunnelTunnName = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 12, 7, 1, 1, 7, 1, 2), OctetString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwMplsOamBidirectionalTunnelTunnName.setStatus('current')
hwMplsOamBidirectionalTunnelDetType = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 12, 7, 1, 1, 7, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("cv", 1), ("ffd", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwMplsOamBidirectionalTunnelDetType.setStatus('current')
hwMplsOamBidirectionalTunnelDetFreq = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 12, 7, 1, 1, 7, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("cv1000ms", 0), ("ffd10ms2", 1), ("ffd20ms3", 2), ("ffd50ms4", 3), ("ffd100ms5", 4), ("ffd200ms6", 5), ("ffd500ms7", 6), ("ffd3ms8", 7)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwMplsOamBidirectionalTunnelDetFreq.setStatus('current')
hwMplsOamBidirectionalTunnelRevDetType = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 12, 7, 1, 1, 7, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("invalid", 0), ("cv", 1), ("ffd", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwMplsOamBidirectionalTunnelRevDetType.setStatus('current')
hwMplsOamBidirectionalTunnelRevDetFreq = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 12, 7, 1, 1, 7, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("cv1000ms", 0), ("ffd10ms2", 1), ("ffd20ms3", 2), ("ffd50ms4", 3), ("ffd100ms5", 4), ("ffd200ms6", 5), ("ffd500ms7", 6), ("invalid8", 7), ("ffd3ms9", 8)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwMplsOamBidirectionalTunnelRevDetFreq.setStatus('current')
hwMplsOamBidirectionalTunnelSendEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 12, 7, 1, 1, 7, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwMplsOamBidirectionalTunnelSendEnable.setStatus('current')
hwMplsOamBidirectionalTunnelReceiveEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 12, 7, 1, 1, 7, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwMplsOamBidirectionalTunnelReceiveEnable.setStatus('current')
hwMplsOamBidirectionalTunnelAutoProtocolEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 12, 7, 1, 1, 7, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwMplsOamBidirectionalTunnelAutoProtocolEnable.setStatus('current')
hwMplsOamBidirectionalTunnelAutoOvertime = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 12, 7, 1, 1, 7, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwMplsOamBidirectionalTunnelAutoOvertime.setStatus('current')
hwMplsOamBidirectionalTunnelValid = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 12, 7, 1, 1, 7, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("stop", 1), ("start", 2), ("ready", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwMplsOamBidirectionalTunnelValid.setStatus('current')
hwMplsOamBidirectionalTunnelAvaState = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 12, 7, 1, 1, 7, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("available", 0), ("unavailable", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwMplsOamBidirectionalTunnelAvaState.setStatus('current')
hwMplsOamBidirectionalTunnelDefectType = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 12, 7, 1, 1, 7, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9))).clone(namedValues=NamedValues(("nondefect", 0), ("dServer", 1), ("dPeerMe", 2), ("dLOCV", 3), ("dTTSI-Mismatch", 4), ("dTTSI-Mismerge", 5), ("dExcess", 6), ("dUnknown", 7), ("dOamFail", 8), ("corouteDown", 9)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwMplsOamBidirectionalTunnelDefectType.setStatus('current')
hwMplsOamBidirectionalTunnelBdiDefectType = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 12, 7, 1, 1, 7, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("nondefect", 0), ("dServer", 1), ("dPeerMe", 2), ("dLOCV", 3), ("dTTSI-Mismatch", 4), ("dTTSI-Mismerge", 5), ("dExcess", 6), ("dUnknown", 7), ("dOamFail", 8)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwMplsOamBidirectionalTunnelBdiDefectType.setStatus('current')
hwMplsOamBidirectionalTunnelRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 12, 7, 1, 1, 7, 1, 15), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwMplsOamBidirectionalTunnelRowStatus.setStatus('current')
hwMplsOamBidirectionalTunnelCompatibilityMode = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 12, 7, 1, 1, 7, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("ptnMode", 1), ("routerMode", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwMplsOamBidirectionalTunnelCompatibilityMode.setStatus('current')
hwMplsOamBidirectionalTunnelBDIFreq = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 12, 7, 1, 1, 7, 1, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("perSecond", 1), ("detectFrequency", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwMplsOamBidirectionalTunnelBDIFreq.setStatus('current')
hwMplsOamTrapOpen = MibScalar((1, 3, 6, 1, 4, 1, 2011, 5, 12, 7, 1, 1, 8), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwMplsOamTrapOpen.setStatus('current')
hwMplsOamNotifications = MibIdentifier((1, 3, 6, 1, 4, 1, 2011, 5, 12, 7, 1, 2))
hwMplsOamIgrLSPOutDefect = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 12, 7, 1, 2, 1)).setObjects(("HUAWEI-MPLSOAM-MIB", "hwMplsOamIgrIndex"), ("HUAWEI-MPLSOAM-MIB", "hwMplsOamIgrTunnName"), ("HUAWEI-MPLSOAM-MIB", "hwMplsOamIgrAvaState"), ("HUAWEI-MPLSOAM-MIB", "hwMplsOamIgrDefectType"))
if mibBuilder.loadTexts: hwMplsOamIgrLSPOutDefect.setStatus('current')
hwMplsOamIgrLSPInDefect = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 12, 7, 1, 2, 2)).setObjects(("HUAWEI-MPLSOAM-MIB", "hwMplsOamIgrIndex"), ("HUAWEI-MPLSOAM-MIB", "hwMplsOamIgrTunnName"), ("HUAWEI-MPLSOAM-MIB", "hwMplsOamIgrAvaState"), ("HUAWEI-MPLSOAM-MIB", "hwMplsOamIgrDefectType"))
if mibBuilder.loadTexts: hwMplsOamIgrLSPInDefect.setStatus('current')
hwMplsOamIgrLSPAva = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 12, 7, 1, 2, 3)).setObjects(("HUAWEI-MPLSOAM-MIB", "hwMplsOamIgrIndex"), ("HUAWEI-MPLSOAM-MIB", "hwMplsOamIgrTunnName"), ("HUAWEI-MPLSOAM-MIB", "hwMplsOamIgrAvaState"), ("HUAWEI-MPLSOAM-MIB", "hwMplsOamIgrDefectType"))
if mibBuilder.loadTexts: hwMplsOamIgrLSPAva.setStatus('current')
hwMplsOamIgrLSPUnAva = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 12, 7, 1, 2, 4)).setObjects(("HUAWEI-MPLSOAM-MIB", "hwMplsOamIgrIndex"), ("HUAWEI-MPLSOAM-MIB", "hwMplsOamIgrTunnName"), ("HUAWEI-MPLSOAM-MIB", "hwMplsOamIgrAvaState"), ("HUAWEI-MPLSOAM-MIB", "hwMplsOamIgrDefectType"))
if mibBuilder.loadTexts: hwMplsOamIgrLSPUnAva.setStatus('current')
hwMplsOamEgrLSPOutDefect = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 12, 7, 1, 2, 5)).setObjects(("HUAWEI-MPLSOAM-MIB", "hwMplsOamEgrLspName"), ("HUAWEI-MPLSOAM-MIB", "hwMplsOamEgrLsrId"), ("HUAWEI-MPLSOAM-MIB", "hwMplsOamEgrSessTunnId"), ("HUAWEI-MPLSOAM-MIB", "hwMplsOamEgrAvaState"), ("HUAWEI-MPLSOAM-MIB", "hwMplsOamEgrDefectType"))
if mibBuilder.loadTexts: hwMplsOamEgrLSPOutDefect.setStatus('current')
hwMplsOamEgrLSPInDefect = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 12, 7, 1, 2, 6)).setObjects(("HUAWEI-MPLSOAM-MIB", "hwMplsOamEgrLspName"), ("HUAWEI-MPLSOAM-MIB", "hwMplsOamEgrLsrId"), ("HUAWEI-MPLSOAM-MIB", "hwMplsOamEgrSessTunnId"), ("HUAWEI-MPLSOAM-MIB", "hwMplsOamEgrAvaState"), ("HUAWEI-MPLSOAM-MIB", "hwMplsOamEgrDefectType"))
if mibBuilder.loadTexts: hwMplsOamEgrLSPInDefect.setStatus('current')
hwMplsOamEgrLSPAva = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 12, 7, 1, 2, 7)).setObjects(("HUAWEI-MPLSOAM-MIB", "hwMplsOamEgrLspName"), ("HUAWEI-MPLSOAM-MIB", "hwMplsOamEgrLsrId"), ("HUAWEI-MPLSOAM-MIB", "hwMplsOamEgrSessTunnId"), ("HUAWEI-MPLSOAM-MIB", "hwMplsOamEgrAvaState"), ("HUAWEI-MPLSOAM-MIB", "hwMplsOamEgrDefectType"))
if mibBuilder.loadTexts: hwMplsOamEgrLSPAva.setStatus('current')
hwMplsOamEgrLSPUnAva = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 12, 7, 1, 2, 8)).setObjects(("HUAWEI-MPLSOAM-MIB", "hwMplsOamEgrLspName"), ("HUAWEI-MPLSOAM-MIB", "hwMplsOamEgrLsrId"), ("HUAWEI-MPLSOAM-MIB", "hwMplsOamEgrSessTunnId"), ("HUAWEI-MPLSOAM-MIB", "hwMplsOamEgrAvaState"), ("HUAWEI-MPLSOAM-MIB", "hwMplsOamEgrDefectType"))
if mibBuilder.loadTexts: hwMplsOamEgrLSPUnAva.setStatus('current')
hwMplsOamEgrFirstPkt = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 12, 7, 1, 2, 9)).setObjects(("HUAWEI-MPLSOAM-MIB", "hwMplsOamEgrLspName"), ("HUAWEI-MPLSOAM-MIB", "hwMplsOamEgrLsrId"), ("HUAWEI-MPLSOAM-MIB", "hwMplsOamEgrSessTunnId"), ("HUAWEI-MPLSOAM-MIB", "hwMplsOamEgrDetType"), ("HUAWEI-MPLSOAM-MIB", "hwMplsOamEgrDetFreq"))
if mibBuilder.loadTexts: hwMplsOamEgrFirstPkt.setStatus('current')
hwMplsOamEgrAutoProFDI = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 12, 7, 1, 2, 10)).setObjects(("HUAWEI-MPLSOAM-MIB", "hwMplsOamEgrLspName"), ("HUAWEI-MPLSOAM-MIB", "hwMplsOamEgrLsrId"), ("HUAWEI-MPLSOAM-MIB", "hwMplsOamEgrSessTunnId"), ("HUAWEI-MPLSOAM-MIB", "hwMplsOamEgrEnable"))
if mibBuilder.loadTexts: hwMplsOamEgrAutoProFDI.setStatus('current')
hwMplsOamEgrRlsnDown = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 12, 7, 1, 2, 11)).setObjects(("HUAWEI-MPLSOAM-MIB", "hwMplsOamRlsnLspName"), ("HUAWEI-MPLSOAM-MIB", "hwMplsOamRlsnLsrId"), ("HUAWEI-MPLSOAM-MIB", "hwMplsOamRlsnIsDown"), ("HUAWEI-MPLSOAM-MIB", "hwMplsOamRlsnIfName"), ("HUAWEI-MPLSOAM-MIB", "hwMplsOamRlsnSessTunnId"))
if mibBuilder.loadTexts: hwMplsOamEgrRlsnDown.setStatus('current')
hwMplsOamL2vcOutDefect = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 12, 7, 1, 2, 12)).setObjects(("HUAWEI-MPLSOAM-MIB", "hwMplsOamL2vcPeerIp"), ("HUAWEI-MPLSOAM-MIB", "hwMplsOamL2vcVcType"), ("HUAWEI-MPLSOAM-MIB", "hwMplsOamL2vcVcId"), ("HUAWEI-MPLSOAM-MIB", "hwMplsOamL2vcAvaState"), ("HUAWEI-MPLSOAM-MIB", "hwMplsOamL2vcDefectType"), ("HUAWEI-MPLSOAM-MIB", "hwMplsOamL2vcBdiDefectType"))
if mibBuilder.loadTexts: hwMplsOamL2vcOutDefect.setStatus('current')
hwMplsOamL2vcInDefect = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 12, 7, 1, 2, 13)).setObjects(("HUAWEI-MPLSOAM-MIB", "hwMplsOamL2vcPeerIp"), ("HUAWEI-MPLSOAM-MIB", "hwMplsOamL2vcVcType"), ("HUAWEI-MPLSOAM-MIB", "hwMplsOamL2vcVcId"), ("HUAWEI-MPLSOAM-MIB", "hwMplsOamL2vcAvaState"), ("HUAWEI-MPLSOAM-MIB", "hwMplsOamL2vcDefectType"), ("HUAWEI-MPLSOAM-MIB", "hwMplsOamL2vcBdiDefectType"))
if mibBuilder.loadTexts: hwMplsOamL2vcInDefect.setStatus('current')
hwMplsOamL2vcAva = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 12, 7, 1, 2, 14)).setObjects(("HUAWEI-MPLSOAM-MIB", "hwMplsOamL2vcPeerIp"), ("HUAWEI-MPLSOAM-MIB", "hwMplsOamL2vcVcType"), ("HUAWEI-MPLSOAM-MIB", "hwMplsOamL2vcVcId"), ("HUAWEI-MPLSOAM-MIB", "hwMplsOamL2vcAvaState"), ("HUAWEI-MPLSOAM-MIB", "hwMplsOamL2vcDefectType"), ("HUAWEI-MPLSOAM-MIB", "hwMplsOamL2vcBdiDefectType"))
if mibBuilder.loadTexts: hwMplsOamL2vcAva.setStatus('current')
hwMplsOamL2vcUnAva = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 12, 7, 1, 2, 15)).setObjects(("HUAWEI-MPLSOAM-MIB", "hwMplsOamL2vcPeerIp"), ("HUAWEI-MPLSOAM-MIB", "hwMplsOamL2vcVcType"), ("HUAWEI-MPLSOAM-MIB", "hwMplsOamL2vcVcId"), ("HUAWEI-MPLSOAM-MIB", "hwMplsOamL2vcAvaState"), ("HUAWEI-MPLSOAM-MIB", "hwMplsOamL2vcDefectType"), ("HUAWEI-MPLSOAM-MIB", "hwMplsOamL2vcBdiDefectType"))
if mibBuilder.loadTexts: hwMplsOamL2vcUnAva.setStatus('current')
hwMplsOamBidirectionalTunnelOutDefect = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 12, 7, 1, 2, 16)).setObjects(("HUAWEI-MPLSOAM-MIB", "hwMplsOamBidirectionalTunnelIndex"), ("HUAWEI-MPLSOAM-MIB", "hwMplsOamBidirectionalTunnelAvaState"), ("HUAWEI-MPLSOAM-MIB", "hwMplsOamBidirectionalTunnelDefectType"), ("HUAWEI-MPLSOAM-MIB", "hwMplsOamBidirectionalTunnelBdiDefectType"))
if mibBuilder.loadTexts: hwMplsOamBidirectionalTunnelOutDefect.setStatus('current')
hwMplsOamBidirectionalTunnelInDefect = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 12, 7, 1, 2, 17)).setObjects(("HUAWEI-MPLSOAM-MIB", "hwMplsOamBidirectionalTunnelIndex"), ("HUAWEI-MPLSOAM-MIB", "hwMplsOamBidirectionalTunnelAvaState"), ("HUAWEI-MPLSOAM-MIB", "hwMplsOamBidirectionalTunnelDefectType"), ("HUAWEI-MPLSOAM-MIB", "hwMplsOamBidirectionalTunnelBdiDefectType"))
if mibBuilder.loadTexts: hwMplsOamBidirectionalTunnelInDefect.setStatus('current')
hwMplsOamBidirectionalTunnelAva = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 12, 7, 1, 2, 18)).setObjects(("HUAWEI-MPLSOAM-MIB", "hwMplsOamBidirectionalTunnelIndex"), ("HUAWEI-MPLSOAM-MIB", "hwMplsOamBidirectionalTunnelAvaState"), ("HUAWEI-MPLSOAM-MIB", "hwMplsOamBidirectionalTunnelDefectType"), ("HUAWEI-MPLSOAM-MIB", "hwMplsOamBidirectionalTunnelBdiDefectType"))
if mibBuilder.loadTexts: hwMplsOamBidirectionalTunnelAva.setStatus('current')
hwMplsOamBidirectionalTunnelUnAva = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 12, 7, 1, 2, 19)).setObjects(("HUAWEI-MPLSOAM-MIB", "hwMplsOamBidirectionalTunnelIndex"), ("HUAWEI-MPLSOAM-MIB", "hwMplsOamBidirectionalTunnelAvaState"), ("HUAWEI-MPLSOAM-MIB", "hwMplsOamBidirectionalTunnelDefectType"), ("HUAWEI-MPLSOAM-MIB", "hwMplsOamBidirectionalTunnelBdiDefectType"))
if mibBuilder.loadTexts: hwMplsOamBidirectionalTunnelUnAva.setStatus('current')
mibBuilder.exportSymbols("HUAWEI-MPLSOAM-MIB", hwMplsOamRlsnIfIndex=hwMplsOamRlsnIfIndex, hwMplsOamL2vcDefectType=hwMplsOamL2vcDefectType, hwMplsOamBidirectionalTunnelValid=hwMplsOamBidirectionalTunnelValid, hwMplsOamBidirectionalTunnelRowStatus=hwMplsOamBidirectionalTunnelRowStatus, hwMplsOamIgrLSPOutDefect=hwMplsOamIgrLSPOutDefect, hwMplsOamEgrDefectType=hwMplsOamEgrDefectType, hwMplsOamRlsnEntry=hwMplsOamRlsnEntry, hwMplsOamIgrRevSessTunnId=hwMplsOamIgrRevSessTunnId, hwMplsOamIgrRevLsrId=hwMplsOamIgrRevLsrId, hwMplsOamView=hwMplsOamView, hwMplsOamL2vcVcId=hwMplsOamL2vcVcId, hwMplsOamEgrRevType=hwMplsOamEgrRevType, hwMplsOamBidirectionalTunnelAutoOvertime=hwMplsOamBidirectionalTunnelAutoOvertime, hwMplsOamL2vcBDIFreq=hwMplsOamL2vcBDIFreq, hwMplsOamBidirectionalTunnelOutDefect=hwMplsOamBidirectionalTunnelOutDefect, hwMplsOamEgrAutoOvertime=hwMplsOamEgrAutoOvertime, hwMplsOamL2vcBdiDefectType=hwMplsOamL2vcBdiDefectType, hwMplsOamEgrLSPInDefect=hwMplsOamEgrLSPInDefect, hwMplsOamIgrRevLspName=hwMplsOamIgrRevLspName, hwMplsOamIgrLSPAva=hwMplsOamIgrLSPAva, hwMplsOam=hwMplsOam, hwMplsOamIgrDetFreq=hwMplsOamIgrDetFreq, hwMplsOamL2vcOutDefect=hwMplsOamL2vcOutDefect, hwMplsOamEgrValid=hwMplsOamEgrValid, hwMplsOamRlsnRowStatus=hwMplsOamRlsnRowStatus, hwMplsOamL2vcSendEnable=hwMplsOamL2vcSendEnable, hwMplsOamL2vcDetFreq=hwMplsOamL2vcDetFreq, hwMplsOamIgrCompatibilityMode=hwMplsOamIgrCompatibilityMode, hwMplsOamEgrSessTunnId=hwMplsOamEgrSessTunnId, hwMplsOamEgrLSPOutDefect=hwMplsOamEgrLSPOutDefect, hwMplsOamL2vcValid=hwMplsOamL2vcValid, hwMplsOamRlsnTable=hwMplsOamRlsnTable, hwMplsOamRlsnIsDown=hwMplsOamRlsnIsDown, hwMplsOamNotifications=hwMplsOamNotifications, PYSNMP_MODULE_ID=hwMplsOam, hwMplsOamL2vcUnAva=hwMplsOamL2vcUnAva, hwMplsOamRlsnSessTunnId=hwMplsOamRlsnSessTunnId, hwMplsOamL2vcTable=hwMplsOamL2vcTable, hwMplsOamEgrFirstPkt=hwMplsOamEgrFirstPkt, hwMplsOamBidirectionalTunnelRevDetFreq=hwMplsOamBidirectionalTunnelRevDetFreq, hwMplsOamL2vcInDefect=hwMplsOamL2vcInDefect, hwMplsOamL2vcAvaState=hwMplsOamL2vcAvaState, hwMplsOamObjects=hwMplsOamObjects, hwMplsOamIgrEntry=hwMplsOamIgrEntry, hwMplsOamBidirectionalTunnelCompatibilityMode=hwMplsOamBidirectionalTunnelCompatibilityMode, hwMplsOamL2vcCompatibilityMode=hwMplsOamL2vcCompatibilityMode, hwMplsOamBidirectionalTunnelEntry=hwMplsOamBidirectionalTunnelEntry, hwMplsOamRlsnLspName=hwMplsOamRlsnLspName, hwMplsOamEgrTable=hwMplsOamEgrTable, hwMplsOamIgrIndex=hwMplsOamIgrIndex, hwMplsOamBidirectionalTunnelBdiDefectType=hwMplsOamBidirectionalTunnelBdiDefectType, hwMplsOamL2vcAutoProlEn=hwMplsOamL2vcAutoProlEn, hwMplsOamBidirectionalTunnelUnAva=hwMplsOamBidirectionalTunnelUnAva, hwMplsOamL2vcEntry=hwMplsOamL2vcEntry, hwMplsOamEgrBDIFreq=hwMplsOamEgrBDIFreq, hwMplsOamBidirectionalTunnelAutoProtocolEnable=hwMplsOamBidirectionalTunnelAutoProtocolEnable, hwMplsOamBidirectionalTunnelAva=hwMplsOamBidirectionalTunnelAva, hwMplsOamIgrTunnName=hwMplsOamIgrTunnName, hwMplsOamIgrDefectType=hwMplsOamIgrDefectType, hwMplsOamCapability=hwMplsOamCapability, hwMplsOamIgrDetType=hwMplsOamIgrDetType, hwMplsOamEgrRlsnDown=hwMplsOamEgrRlsnDown, hwMplsOamL2vcPeerIp=hwMplsOamL2vcPeerIp, hwMplsOamBidirectionalTunnelReceiveEnable=hwMplsOamBidirectionalTunnelReceiveEnable, hwMplsOamL2vcAutoOvertime=hwMplsOamL2vcAutoOvertime, hwMplsOamL2vcDetType=hwMplsOamL2vcDetType, hwMplsOamEgrLsrId=hwMplsOamEgrLsrId, hwMplsOamIgrValid=hwMplsOamIgrValid, hwMplsOamEgrAvaState=hwMplsOamEgrAvaState, hwMplsOamEgrAutoProFDI=hwMplsOamEgrAutoProFDI, hwMplsOamBidirectionalTunnelRevDetType=hwMplsOamBidirectionalTunnelRevDetType, hwMplsOamL2vcReceiveEnable=hwMplsOamL2vcReceiveEnable, hwMplsOamL2vcRevDetType=hwMplsOamL2vcRevDetType, hwMplsOamL2vcRowStatus=hwMplsOamL2vcRowStatus, hwMplsOamIgrBDIFreq=hwMplsOamIgrBDIFreq, hwMplsOamBidirectionalTunnelTable=hwMplsOamBidirectionalTunnelTable, hwMplsOamBidirectionalTunnelIndex=hwMplsOamBidirectionalTunnelIndex, hwMplsOamEgrLSPAva=hwMplsOamEgrLSPAva, hwMplsOamEgrDetType=hwMplsOamEgrDetType, hwMplsOamIgrLSPUnAva=hwMplsOamIgrLSPUnAva, hwMplsOamEgrLspName=hwMplsOamEgrLspName, hwMplsOamL2vcAva=hwMplsOamL2vcAva, hwMplsOamRlsnLsrId=hwMplsOamRlsnLsrId, hwMplsOamIgrAvaState=hwMplsOamIgrAvaState, hwMplsOamRlsnIfName=hwMplsOamRlsnIfName, hwMplsOamEgrRowStatus=hwMplsOamEgrRowStatus, hwMplsOamIgrRowStatus=hwMplsOamIgrRowStatus, hwMplsOamBidirectionalTunnelAvaState=hwMplsOamBidirectionalTunnelAvaState, hwMplsOamBidirectionalTunnelDefectType=hwMplsOamBidirectionalTunnelDefectType, hwMplsOamBidirectionalTunnelDetType=hwMplsOamBidirectionalTunnelDetType, hwMplsOamEgrAutoEn=hwMplsOamEgrAutoEn, hwMplsOamTrapOpen=hwMplsOamTrapOpen, hwMplsOamEgrDetFreq=hwMplsOamEgrDetFreq, hwMplsOamBidirectionalTunnelTunnName=hwMplsOamBidirectionalTunnelTunnName, hwMplsOamIgrRevType=hwMplsOamIgrRevType, hwMplsOamPs=hwMplsOamPs, hwMplsOamEgrEnable=hwMplsOamEgrEnable, hwMplsOamBidirectionalTunnelBDIFreq=hwMplsOamBidirectionalTunnelBDIFreq, hwMplsOamIgrTable=hwMplsOamIgrTable, hwMplsOamL2vcVcType=hwMplsOamL2vcVcType, hwMplsOamIgrLSPInDefect=hwMplsOamIgrLSPInDefect, hwMplsOamEgrRevTunnName=hwMplsOamEgrRevTunnName, hwMplsOamEgrEntry=hwMplsOamEgrEntry, hwMplsOamEgrLSPUnAva=hwMplsOamEgrLSPUnAva, hwMplsOamBidirectionalTunnelDetFreq=hwMplsOamBidirectionalTunnelDetFreq, hwMplsOamIgrEnable=hwMplsOamIgrEnable, hwMplsOamBidirectionalTunnelInDefect=hwMplsOamBidirectionalTunnelInDefect, hwMplsOamBidirectionalTunnelSendEnable=hwMplsOamBidirectionalTunnelSendEnable, hwMplsOamL2vcRevDetFreq=hwMplsOamL2vcRevDetFreq)
