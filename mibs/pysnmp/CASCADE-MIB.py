#
# PySNMP MIB module CASCADE-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/CASCADE-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 17:29:36 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, OctetString, Integer = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "OctetString", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
SingleValueConstraint, ValueRangeConstraint, ValueSizeConstraint, ConstraintsIntersection, ConstraintsUnion = mibBuilder.importSymbols("ASN1-REFINEMENT", "SingleValueConstraint", "ValueRangeConstraint", "ValueSizeConstraint", "ConstraintsIntersection", "ConstraintsUnion")
ifInErrors, = mibBuilder.importSymbols("IF-MIB", "ifInErrors")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
Bits, MibScalar, MibTable, MibTableRow, MibTableColumn, Gauge32, Counter32, ObjectIdentity, NotificationType, Integer32, IpAddress, enterprises, NotificationType, ModuleIdentity, Unsigned32, iso, Counter64, TimeTicks, MibIdentifier = mibBuilder.importSymbols("SNMPv2-SMI", "Bits", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Gauge32", "Counter32", "ObjectIdentity", "NotificationType", "Integer32", "IpAddress", "enterprises", "NotificationType", "ModuleIdentity", "Unsigned32", "iso", "Counter64", "TimeTicks", "MibIdentifier")
TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString")
cascade = MibIdentifier((1, 3, 6, 1, 4, 1, 277))
cascfr = MibIdentifier((1, 3, 6, 1, 4, 1, 277, 1))
cascsmds = MibIdentifier((1, 3, 6, 1, 4, 1, 277, 2))
namebinding = MibIdentifier((1, 3, 6, 1, 4, 1, 277, 3))
isdnaddr = MibIdentifier((1, 3, 6, 1, 4, 1, 277, 4))
cascsvc = MibIdentifier((1, 3, 6, 1, 4, 1, 277, 5))
software = MibIdentifier((1, 3, 6, 1, 4, 1, 277, 6))
provserver = MibIdentifier((1, 3, 6, 1, 4, 1, 277, 9))
class Index(Integer32):
    pass

net = MibIdentifier((1, 3, 6, 1, 4, 1, 277, 1, 1))
ase = MibIdentifier((1, 3, 6, 1, 4, 1, 277, 1, 2))
node = MibIdentifier((1, 3, 6, 1, 4, 1, 277, 1, 3))
pport = MibIdentifier((1, 3, 6, 1, 4, 1, 277, 1, 4))
lport = MibIdentifier((1, 3, 6, 1, 4, 1, 277, 1, 5))
ckt = MibIdentifier((1, 3, 6, 1, 4, 1, 277, 1, 6))
card = MibIdentifier((1, 3, 6, 1, 4, 1, 277, 1, 7))
ds1 = MibIdentifier((1, 3, 6, 1, 4, 1, 277, 1, 8))
smdsaddr = MibIdentifier((1, 3, 6, 1, 4, 1, 277, 2, 1))
svcaddress = MibIdentifier((1, 3, 6, 1, 4, 1, 277, 5, 1))
svcmgt = MibIdentifier((1, 3, 6, 1, 4, 1, 277, 5, 2))
netMask = MibScalar((1, 3, 6, 1, 4, 1, 277, 1, 1, 1), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: netMask.setStatus('mandatory')
netNumber = MibScalar((1, 3, 6, 1, 4, 1, 277, 1, 1, 2), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: netNumber.setStatus('mandatory')
netDlciAddrSig = MibScalar((1, 3, 6, 1, 4, 1, 277, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("globalAddr", 1), ("localAddr", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: netDlciAddrSig.setStatus('mandatory')
netMaxSegsize = MibScalar((1, 3, 6, 1, 4, 1, 277, 1, 1, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: netMaxSegsize.setStatus('mandatory')
netSmdsAreaMaskStart = MibScalar((1, 3, 6, 1, 4, 1, 277, 1, 1, 8), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: netSmdsAreaMaskStart.setStatus('mandatory')
netSmdsAreaMaskDigits = MibScalar((1, 3, 6, 1, 4, 1, 277, 1, 1, 9), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: netSmdsAreaMaskDigits.setStatus('mandatory')
aseTable = MibTable((1, 3, 6, 1, 4, 1, 277, 1, 2, 1), )
if mibBuilder.loadTexts: aseTable.setStatus('mandatory')
aseEntry = MibTableRow((1, 3, 6, 1, 4, 1, 277, 1, 2, 1, 1), ).setIndexNames((0, "CASCADE-MIB", "aseAddr"))
if mibBuilder.loadTexts: aseEntry.setStatus('mandatory')
aseAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 277, 1, 2, 1, 1, 1), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aseAddr.setStatus('mandatory')
aseMask = MibTableColumn((1, 3, 6, 1, 4, 1, 277, 1, 2, 1, 1, 2), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aseMask.setStatus('mandatory')
aseDefaultGwAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 277, 1, 2, 1, 1, 3), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aseDefaultGwAddr.setStatus('mandatory')
aseMetricType = MibTableColumn((1, 3, 6, 1, 4, 1, 277, 1, 2, 1, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aseMetricType.setStatus('mandatory')
aseAdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 277, 1, 2, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("valid", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aseAdminStatus.setStatus('mandatory')
aseIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 277, 1, 2, 1, 1, 6), Index()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aseIfIndex.setStatus('mandatory')
aseDlci = MibTableColumn((1, 3, 6, 1, 4, 1, 277, 1, 2, 1, 1, 7), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aseDlci.setStatus('mandatory')
nodeIpAddr = MibScalar((1, 3, 6, 1, 4, 1, 277, 1, 3, 1), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nodeIpAddr.setStatus('mandatory')
nodeLanIpAddr = MibScalar((1, 3, 6, 1, 4, 1, 277, 1, 3, 2), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nodeLanIpAddr.setStatus('mandatory')
nodeNMSTable = MibTable((1, 3, 6, 1, 4, 1, 277, 1, 3, 3), )
if mibBuilder.loadTexts: nodeNMSTable.setStatus('mandatory')
nodeNMSEntry = MibTableRow((1, 3, 6, 1, 4, 1, 277, 1, 3, 3, 1), ).setIndexNames((0, "CASCADE-MIB", "nodeNMSIndex"))
if mibBuilder.loadTexts: nodeNMSEntry.setStatus('mandatory')
nodeNMSIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 277, 1, 3, 3, 1, 1), Index()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nodeNMSIndex.setStatus('mandatory')
nodeNMSIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 277, 1, 3, 3, 1, 2), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nodeNMSIpAddr.setStatus('mandatory')
nodeState = MibScalar((1, 3, 6, 1, 4, 1, 277, 1, 3, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("down", 1), ("initializing", 2), ("active", 3), ("marginal", 4), ("testing", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nodeState.setStatus('mandatory')
nodePollStatus = MibScalar((1, 3, 6, 1, 4, 1, 277, 1, 3, 5), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nodePollStatus.setStatus('mandatory')
nodeModel = MibScalar((1, 3, 6, 1, 4, 1, 277, 1, 3, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nodeModel.setStatus('mandatory')
nodeSerial = MibScalar((1, 3, 6, 1, 4, 1, 277, 1, 3, 7), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nodeSerial.setStatus('mandatory')
nodeSwRev = MibScalar((1, 3, 6, 1, 4, 1, 277, 1, 3, 8), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nodeSwRev.setStatus('mandatory')
nodeHwRev = MibScalar((1, 3, 6, 1, 4, 1, 277, 1, 3, 9), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nodeHwRev.setStatus('mandatory')
nodeEpromRev = MibScalar((1, 3, 6, 1, 4, 1, 277, 1, 3, 10), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nodeEpromRev.setStatus('mandatory')
nodeCpuUtil = MibScalar((1, 3, 6, 1, 4, 1, 277, 1, 3, 11), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nodeCpuUtil.setStatus('mandatory')
nodePsAStatus = MibScalar((1, 3, 6, 1, 4, 1, 277, 1, 3, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 4))).clone(namedValues=NamedValues(("up", 1), ("down", 2), ("marginal", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nodePsAStatus.setStatus('mandatory')
nodePsBStatus = MibScalar((1, 3, 6, 1, 4, 1, 277, 1, 3, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 4))).clone(namedValues=NamedValues(("up", 1), ("down", 2), ("marginal", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nodePsBStatus.setStatus('mandatory')
nodeFanTable = MibTable((1, 3, 6, 1, 4, 1, 277, 1, 3, 14), )
if mibBuilder.loadTexts: nodeFanTable.setStatus('mandatory')
nodeFanEntry = MibTableRow((1, 3, 6, 1, 4, 1, 277, 1, 3, 14, 1), ).setIndexNames((0, "CASCADE-MIB", "nodeFanIndex"))
if mibBuilder.loadTexts: nodeFanEntry.setStatus('mandatory')
nodeFanIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 277, 1, 3, 14, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nodeFanIndex.setStatus('mandatory')
nodeFanStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 277, 1, 3, 14, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("up", 1), ("down", 2), ("marginal", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nodeFanStatus.setStatus('mandatory')
nodeFanSpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 277, 1, 3, 14, 1, 3), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nodeFanSpeed.setStatus('mandatory')
nodeMemoryUtil = MibScalar((1, 3, 6, 1, 4, 1, 277, 1, 3, 15), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nodeMemoryUtil.setStatus('mandatory')
nodeMemoryUsage = MibScalar((1, 3, 6, 1, 4, 1, 277, 1, 3, 16), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nodeMemoryUsage.setStatus('mandatory')
nodeMaxFramesize = MibScalar((1, 3, 6, 1, 4, 1, 277, 1, 3, 17), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nodeMaxFramesize.setStatus('mandatory')
nodeQOSPollTimer = MibScalar((1, 3, 6, 1, 4, 1, 277, 1, 3, 18), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nodeQOSPollTimer.setStatus('mandatory')
nodeActivePvcs = MibScalar((1, 3, 6, 1, 4, 1, 277, 1, 3, 19), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nodeActivePvcs.setStatus('mandatory')
nodeInactivePvcs = MibScalar((1, 3, 6, 1, 4, 1, 277, 1, 3, 20), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nodeInactivePvcs.setStatus('mandatory')
nodePendingPvcs = MibScalar((1, 3, 6, 1, 4, 1, 277, 1, 3, 21), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nodePendingPvcs.setStatus('mandatory')
nodeInOctets = MibScalar((1, 3, 6, 1, 4, 1, 277, 1, 3, 22), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nodeInOctets.setStatus('mandatory')
nodeInPkts = MibScalar((1, 3, 6, 1, 4, 1, 277, 1, 3, 23), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nodeInPkts.setStatus('mandatory')
nodeOutOctets = MibScalar((1, 3, 6, 1, 4, 1, 277, 1, 3, 24), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nodeOutOctets.setStatus('mandatory')
nodeOutPkts = MibScalar((1, 3, 6, 1, 4, 1, 277, 1, 3, 25), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nodeOutPkts.setStatus('mandatory')
nodeSwFilename = MibScalar((1, 3, 6, 1, 4, 1, 277, 1, 3, 26), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nodeSwFilename.setStatus('mandatory')
nodeRebootAfterLoad = MibScalar((1, 3, 6, 1, 4, 1, 277, 1, 3, 27), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("reboot", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nodeRebootAfterLoad.setStatus('mandatory')
nodeSwToLoad = MibScalar((1, 3, 6, 1, 4, 1, 277, 1, 3, 28), TimeTicks()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nodeSwToLoad.setStatus('mandatory')
nodeSwLoadState = MibScalar((1, 3, 6, 1, 4, 1, 277, 1, 3, 29), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("inactive", 1), ("pending", 2), ("active", 3), ("failed", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nodeSwLoadState.setStatus('mandatory')
nodePrFilename = MibScalar((1, 3, 6, 1, 4, 1, 277, 1, 3, 30), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nodePrFilename.setStatus('mandatory')
nodePrToLoad = MibScalar((1, 3, 6, 1, 4, 1, 277, 1, 3, 31), TimeTicks()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nodePrToLoad.setStatus('mandatory')
nodePrLoadState = MibScalar((1, 3, 6, 1, 4, 1, 277, 1, 3, 32), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("inactive", 1), ("pending", 2), ("active", 3), ("failed", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nodePrLoadState.setStatus('mandatory')
nodeToWarmboot = MibScalar((1, 3, 6, 1, 4, 1, 277, 1, 3, 33), TimeTicks()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nodeToWarmboot.setStatus('mandatory')
nodeToColdboot = MibScalar((1, 3, 6, 1, 4, 1, 277, 1, 3, 34), TimeTicks()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nodeToColdboot.setStatus('mandatory')
nodeToRedundant = MibScalar((1, 3, 6, 1, 4, 1, 277, 1, 3, 35), TimeTicks()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nodeToRedundant.setStatus('mandatory')
nodeInitiateBulkStats = MibScalar((1, 3, 6, 1, 4, 1, 277, 1, 3, 36), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nodeInitiateBulkStats.setStatus('mandatory')
nodeDiagNonFatalSource = MibScalar((1, 3, 6, 1, 4, 1, 277, 1, 3, 37), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("power-on-diagnostics", 1), ("background-diagnostics", 2), ("fault", 3), ("frame-heap", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nodeDiagNonFatalSource.setStatus('mandatory')
nodeDiagNonFatalTime = MibScalar((1, 3, 6, 1, 4, 1, 277, 1, 3, 38), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nodeDiagNonFatalTime.setStatus('mandatory')
nodeDiagNonFatalErrMajor = MibScalar((1, 3, 6, 1, 4, 1, 277, 1, 3, 39), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nodeDiagNonFatalErrMajor.setStatus('mandatory')
nodeDiagNonFatalErrMinor = MibScalar((1, 3, 6, 1, 4, 1, 277, 1, 3, 40), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nodeDiagNonFatalErrMinor.setStatus('mandatory')
nodeDiagNonFatalStr = MibScalar((1, 3, 6, 1, 4, 1, 277, 1, 3, 41), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nodeDiagNonFatalStr.setStatus('mandatory')
nodeDiagFatalSource = MibScalar((1, 3, 6, 1, 4, 1, 277, 1, 3, 42), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("power-on-diagnostics", 1), ("background-diagnostics", 2), ("fault", 3), ("frame-heap", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nodeDiagFatalSource.setStatus('mandatory')
nodeDiagFatalTime = MibScalar((1, 3, 6, 1, 4, 1, 277, 1, 3, 43), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nodeDiagFatalTime.setStatus('mandatory')
nodeDiagFatalErrMajor = MibScalar((1, 3, 6, 1, 4, 1, 277, 1, 3, 44), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nodeDiagFatalErrMajor.setStatus('mandatory')
nodeDiagFatalErrMinor = MibScalar((1, 3, 6, 1, 4, 1, 277, 1, 3, 45), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nodeDiagFatalErrMinor.setStatus('mandatory')
nodeDiagFatalStr = MibScalar((1, 3, 6, 1, 4, 1, 277, 1, 3, 46), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nodeDiagFatalStr.setStatus('mandatory')
nodeDiagFatalReboots = MibScalar((1, 3, 6, 1, 4, 1, 277, 1, 3, 47), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nodeDiagFatalReboots.setStatus('mandatory')
nodeDiagFatalAddress = MibScalar((1, 3, 6, 1, 4, 1, 277, 1, 3, 48), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nodeDiagFatalAddress.setStatus('mandatory')
nodeDiagBackgroundPasses = MibScalar((1, 3, 6, 1, 4, 1, 277, 1, 3, 49), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nodeDiagBackgroundPasses.setStatus('mandatory')
nodeDiagBackgroundFailures = MibScalar((1, 3, 6, 1, 4, 1, 277, 1, 3, 50), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nodeDiagBackgroundFailures.setStatus('mandatory')
nodeDiagBackgroundSuccesses = MibScalar((1, 3, 6, 1, 4, 1, 277, 1, 3, 51), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nodeDiagBackgroundSuccesses.setStatus('mandatory')
nodeDiagLEDReset = MibScalar((1, 3, 6, 1, 4, 1, 277, 1, 3, 52), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("state-to-active", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nodeDiagLEDReset.setStatus('mandatory')
nodeDiagPowerExtensive = MibScalar((1, 3, 6, 1, 4, 1, 277, 1, 3, 53), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("extensive-tests", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nodeDiagPowerExtensive.setStatus('mandatory')
nodePortPoll = MibScalar((1, 3, 6, 1, 4, 1, 277, 1, 3, 54), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nodePortPoll.setStatus('mandatory')
nodeMaxTelnetConsole = MibScalar((1, 3, 6, 1, 4, 1, 277, 1, 3, 55), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nodeMaxTelnetConsole.setStatus('mandatory')
nodeConsoleTimeout = MibScalar((1, 3, 6, 1, 4, 1, 277, 1, 3, 56), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nodeConsoleTimeout.setStatus('mandatory')
nodeConsoleTable = MibTable((1, 3, 6, 1, 4, 1, 277, 1, 3, 57), )
if mibBuilder.loadTexts: nodeConsoleTable.setStatus('mandatory')
nodeConsoleEntry = MibTableRow((1, 3, 6, 1, 4, 1, 277, 1, 3, 57, 1), ).setIndexNames((0, "CASCADE-MIB", "nodeConsoleIndex"))
if mibBuilder.loadTexts: nodeConsoleEntry.setStatus('mandatory')
nodeConsoleIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 277, 1, 3, 57, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 6))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nodeConsoleIndex.setStatus('mandatory')
nodeUserName = MibTableColumn((1, 3, 6, 1, 4, 1, 277, 1, 3, 57, 1, 2), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nodeUserName.setStatus('mandatory')
nodeUserFrom = MibTableColumn((1, 3, 6, 1, 4, 1, 277, 1, 3, 57, 1, 3), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nodeUserFrom.setStatus('mandatory')
nodeConsoleAccessMode = MibTableColumn((1, 3, 6, 1, 4, 1, 277, 1, 3, 57, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("readOnly", 1), ("readWrite", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nodeConsoleAccessMode.setStatus('mandatory')
nodeConsoleUptime = MibTableColumn((1, 3, 6, 1, 4, 1, 277, 1, 3, 57, 1, 5), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nodeConsoleUptime.setStatus('mandatory')
nodePsADiagCode = MibScalar((1, 3, 6, 1, 4, 1, 277, 1, 3, 58), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nodePsADiagCode.setStatus('mandatory')
nodePsBDiagCode = MibScalar((1, 3, 6, 1, 4, 1, 277, 1, 3, 59), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nodePsBDiagCode.setStatus('mandatory')
nodeFrameMemoryUtil = MibScalar((1, 3, 6, 1, 4, 1, 277, 1, 3, 60), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nodeFrameMemoryUtil.setStatus('mandatory')
nodeFrameMemoryUsage = MibScalar((1, 3, 6, 1, 4, 1, 277, 1, 3, 61), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nodeFrameMemoryUsage.setStatus('mandatory')
nodeCapability = MibScalar((1, 3, 6, 1, 4, 1, 277, 1, 3, 62), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("frame-relay", 1), ("smds", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nodeCapability.setStatus('mandatory')
nodeSvcLastCallFailure = MibScalar((1, 3, 6, 1, 4, 1, 277, 1, 3, 63), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nodeSvcLastCallFailure.setStatus('mandatory')
nodeRerouteDelay = MibScalar((1, 3, 6, 1, 4, 1, 277, 1, 3, 64), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nodeRerouteDelay.setStatus('mandatory')
nodeRerouteCount = MibScalar((1, 3, 6, 1, 4, 1, 277, 1, 3, 65), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nodeRerouteCount.setStatus('mandatory')
nodeFileTransferRequest = MibScalar((1, 3, 6, 1, 4, 1, 277, 1, 3, 66), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nodeFileTransferRequest.setStatus('mandatory')
nodeFileTransferStatus = MibScalar((1, 3, 6, 1, 4, 1, 277, 1, 3, 67), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("complete", 1), ("active", 2), ("failed", 3), ("invalid", 4), ("filename", 5), ("timeout", 6), ("canceled", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nodeFileTransferStatus.setStatus('mandatory')
nodeTime = MibScalar((1, 3, 6, 1, 4, 1, 277, 1, 3, 68), TimeTicks()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nodeTime.setStatus('mandatory')
nodeBillingAPAddress = MibScalar((1, 3, 6, 1, 4, 1, 277, 1, 3, 69), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nodeBillingAPAddress.setStatus('mandatory')
nodeBillingAPUsername = MibScalar((1, 3, 6, 1, 4, 1, 277, 1, 3, 70), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nodeBillingAPUsername.setStatus('mandatory')
nodeBillingAPPassword = MibScalar((1, 3, 6, 1, 4, 1, 277, 1, 3, 71), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nodeBillingAPPassword.setStatus('mandatory')
nodeBillingSwAPCommsFailures = MibScalar((1, 3, 6, 1, 4, 1, 277, 1, 3, 72), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nodeBillingSwAPCommsFailures.setStatus('mandatory')
nodeBillingTable = MibTable((1, 3, 6, 1, 4, 1, 277, 1, 3, 73), )
if mibBuilder.loadTexts: nodeBillingTable.setStatus('mandatory')
nodeBillingEntry = MibTableRow((1, 3, 6, 1, 4, 1, 277, 1, 3, 73, 1), ).setIndexNames((0, "CASCADE-MIB", "nodeBillingService"))
if mibBuilder.loadTexts: nodeBillingEntry.setStatus('mandatory')
nodeBillingService = MibTableColumn((1, 3, 6, 1, 4, 1, 277, 1, 3, 73, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("smds", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nodeBillingService.setStatus('mandatory')
nodeBilling = MibTableColumn((1, 3, 6, 1, 4, 1, 277, 1, 3, 73, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nodeBilling.setStatus('mandatory')
nodeBillingAggrPeriod = MibTableColumn((1, 3, 6, 1, 4, 1, 277, 1, 3, 73, 1, 3), TimeTicks()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nodeBillingAggrPeriod.setStatus('mandatory')
nodeBillingCurAggrPeriodStart = MibTableColumn((1, 3, 6, 1, 4, 1, 277, 1, 3, 73, 1, 4), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nodeBillingCurAggrPeriodStart.setStatus('mandatory')
nodeBillingCurAggrPeriodEnd = MibTableColumn((1, 3, 6, 1, 4, 1, 277, 1, 3, 73, 1, 5), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nodeBillingCurAggrPeriodEnd.setStatus('mandatory')
nodeBillingCollection = MibTableColumn((1, 3, 6, 1, 4, 1, 277, 1, 3, 73, 1, 6), TimeTicks()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nodeBillingCollection.setStatus('mandatory')
nodeBillingDailyProcessing = MibTableColumn((1, 3, 6, 1, 4, 1, 277, 1, 3, 73, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nodeBillingDailyProcessing.setStatus('mandatory')
nodeBillingDPTime = MibTableColumn((1, 3, 6, 1, 4, 1, 277, 1, 3, 73, 1, 8), TimeTicks()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nodeBillingDPTime.setStatus('mandatory')
nodeBillingUsageRecOvflWarnings = MibTableColumn((1, 3, 6, 1, 4, 1, 277, 1, 3, 73, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nodeBillingUsageRecOvflWarnings.setStatus('mandatory')
nodeBillingTotalUsageRecOvflWarnings = MibTableColumn((1, 3, 6, 1, 4, 1, 277, 1, 3, 73, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nodeBillingTotalUsageRecOvflWarnings.setStatus('mandatory')
nodeBillingBillableUsageEvents = MibTableColumn((1, 3, 6, 1, 4, 1, 277, 1, 3, 73, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nodeBillingBillableUsageEvents.setStatus('mandatory')
nodeBillingNonBillableUsageEvents = MibTableColumn((1, 3, 6, 1, 4, 1, 277, 1, 3, 73, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nodeBillingNonBillableUsageEvents.setStatus('mandatory')
nodeBillingUsageRecCreated = MibTableColumn((1, 3, 6, 1, 4, 1, 277, 1, 3, 73, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nodeBillingUsageRecCreated.setStatus('mandatory')
nodeBillingTotalUsageRecCreated = MibTableColumn((1, 3, 6, 1, 4, 1, 277, 1, 3, 73, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nodeBillingTotalUsageRecCreated.setStatus('mandatory')
nodeBillingUsageRecCrFailures = MibTableColumn((1, 3, 6, 1, 4, 1, 277, 1, 3, 73, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nodeBillingUsageRecCrFailures.setStatus('mandatory')
nodeBillingTotalUsageRecCrFailures = MibTableColumn((1, 3, 6, 1, 4, 1, 277, 1, 3, 73, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nodeBillingTotalUsageRecCrFailures.setStatus('mandatory')
nodeBillingUsageRecSent = MibTableColumn((1, 3, 6, 1, 4, 1, 277, 1, 3, 73, 1, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nodeBillingUsageRecSent.setStatus('mandatory')
nodeBillingTotalUsageRecSent = MibTableColumn((1, 3, 6, 1, 4, 1, 277, 1, 3, 73, 1, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nodeBillingTotalUsageRecSent.setStatus('mandatory')
nodeBillingUsageDataStoreFull = MibTableColumn((1, 3, 6, 1, 4, 1, 277, 1, 3, 73, 1, 19), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nodeBillingUsageDataStoreFull.setStatus('mandatory')
nodeBillingTotalUsageDataStoreFull = MibTableColumn((1, 3, 6, 1, 4, 1, 277, 1, 3, 73, 1, 20), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nodeBillingTotalUsageDataStoreFull.setStatus('mandatory')
nodeBillingAdminAction = MibTableColumn((1, 3, 6, 1, 4, 1, 277, 1, 3, 73, 1, 21), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("invalid", 1), ("forceUpload", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nodeBillingAdminAction.setStatus('mandatory')
nodeRerouteAlg = MibScalar((1, 3, 6, 1, 4, 1, 277, 1, 3, 74), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("negneg", 1), ("pospos", 2), ("disable", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nodeRerouteAlg.setStatus('mandatory')
nodeOamAlarmDisabled = MibScalar((1, 3, 6, 1, 4, 1, 277, 1, 3, 76), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nodeOamAlarmDisabled.setStatus('mandatory')
nodeRefclocksrcTable = MibTable((1, 3, 6, 1, 4, 1, 277, 1, 3, 77), )
if mibBuilder.loadTexts: nodeRefclocksrcTable.setStatus('mandatory')
nodeRefclocksrcEntry = MibTableRow((1, 3, 6, 1, 4, 1, 277, 1, 3, 77, 1), ).setIndexNames((0, "CASCADE-MIB", "nodeRefclocksrcIndex"))
if mibBuilder.loadTexts: nodeRefclocksrcEntry.setStatus('mandatory')
nodeRefclocksrcIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 277, 1, 3, 77, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 20))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nodeRefclocksrcIndex.setStatus('mandatory')
nodeRefclocksrcPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 277, 1, 3, 77, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 20))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nodeRefclocksrcPriority.setStatus('mandatory')
nodeRefclocksrcType = MibTableColumn((1, 3, 6, 1, 4, 1, 277, 1, 3, 77, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("external", 1), ("pport", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nodeRefclocksrcType.setStatus('mandatory')
nodeRefclocksrcSlotId = MibTableColumn((1, 3, 6, 1, 4, 1, 277, 1, 3, 77, 1, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nodeRefclocksrcSlotId.setStatus('mandatory')
nodeRefclocksrcPportId = MibTableColumn((1, 3, 6, 1, 4, 1, 277, 1, 3, 77, 1, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nodeRefclocksrcPportId.setStatus('mandatory')
nodeRefclockActiveSrc = MibScalar((1, 3, 6, 1, 4, 1, 277, 1, 3, 78), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nodeRefclockActiveSrc.setStatus('mandatory')
nodeRefclockActiveCGUSlotId = MibScalar((1, 3, 6, 1, 4, 1, 277, 1, 3, 79), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nodeRefclockActiveCGUSlotId.setStatus('mandatory')
nodeRefclockActiveCGUMode = MibScalar((1, 3, 6, 1, 4, 1, 277, 1, 3, 80), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("free-running", 1), ("sync-to-reference-clock", 2), ("holdover", 3), ("extended-holdover", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nodeRefclockActiveCGUMode.setStatus('mandatory')
nodeInitiateImageBackup = MibScalar((1, 3, 6, 1, 4, 1, 277, 1, 3, 81), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("proceed", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nodeInitiateImageBackup.setStatus('mandatory')
nodeImageBackupState = MibScalar((1, 3, 6, 1, 4, 1, 277, 1, 3, 82), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("proceeding", 1), ("done", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nodeImageBackupState.setStatus('mandatory')
nodeInitiateImageRestore = MibScalar((1, 3, 6, 1, 4, 1, 277, 1, 3, 83), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("proceed", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nodeInitiateImageRestore.setStatus('mandatory')
nodeApplicationTable = MibTable((1, 3, 6, 1, 4, 1, 277, 1, 3, 84), )
if mibBuilder.loadTexts: nodeApplicationTable.setStatus('mandatory')
nodeApplicationEntry = MibTableRow((1, 3, 6, 1, 4, 1, 277, 1, 3, 84, 1), ).setIndexNames((0, "CASCADE-MIB", "nodeApplicationIndex"))
if mibBuilder.loadTexts: nodeApplicationEntry.setStatus('mandatory')
nodeApplicationIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 277, 1, 3, 84, 1, 1), Index()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nodeApplicationIndex.setStatus('mandatory')
nodeApplicationDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 277, 1, 3, 84, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nodeApplicationDescription.setStatus('mandatory')
nodePrimaryVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 277, 1, 3, 84, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nodePrimaryVersion.setStatus('mandatory')
nodeSecondaryVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 277, 1, 3, 84, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nodeSecondaryVersion.setStatus('mandatory')
nodePrimarySyncRefAdminState = MibScalar((1, 3, 6, 1, 4, 1, 277, 1, 3, 85), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("externala", 1), ("externalb", 2), ("portrefa", 3), ("portrefb", 4), ("internal", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nodePrimarySyncRefAdminState.setStatus('mandatory')
nodePrimarySyncRefOperationalState = MibScalar((1, 3, 6, 1, 4, 1, 277, 1, 3, 86), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("externala", 1), ("externalb", 2), ("portrefa", 3), ("portrefb", 4), ("internal", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nodePrimarySyncRefOperationalState.setStatus('mandatory')
nodeSecondarySyncRefAdminState = MibScalar((1, 3, 6, 1, 4, 1, 277, 1, 3, 87), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("externala", 1), ("externalb", 2), ("portrefa", 3), ("portrefb", 4), ("internal", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nodeSecondarySyncRefAdminState.setStatus('mandatory')
nodeSecondarySyncRefOperationalState = MibScalar((1, 3, 6, 1, 4, 1, 277, 1, 3, 88), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("externala", 1), ("externalb", 2), ("portrefa", 3), ("portrefb", 4), ("internal", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nodeSecondarySyncRefOperationalState.setStatus('mandatory')
nodePrimaryPLLOperationalState = MibScalar((1, 3, 6, 1, 4, 1, 277, 1, 3, 89), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("active", 1), ("down", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nodePrimaryPLLOperationalState.setStatus('mandatory')
nodeSecondaryPLLOperationalState = MibScalar((1, 3, 6, 1, 4, 1, 277, 1, 3, 90), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("active", 1), ("down", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nodeSecondaryPLLOperationalState.setStatus('mandatory')
nodeExternalClockAOperationalState = MibScalar((1, 3, 6, 1, 4, 1, 277, 1, 3, 91), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("active", 1), ("ais", 2), ("los", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nodeExternalClockAOperationalState.setStatus('mandatory')
nodeExternalClockBOperationalState = MibScalar((1, 3, 6, 1, 4, 1, 277, 1, 3, 92), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("active", 1), ("ais", 2), ("los", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nodeExternalClockBOperationalState.setStatus('mandatory')
nodePortClockAOperationalState = MibScalar((1, 3, 6, 1, 4, 1, 277, 1, 3, 93), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("active", 1), ("down", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nodePortClockAOperationalState.setStatus('mandatory')
nodePortClockBOperationalState = MibScalar((1, 3, 6, 1, 4, 1, 277, 1, 3, 94), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("active", 1), ("down", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nodePortClockBOperationalState.setStatus('mandatory')
nodeExternalTimingSource = MibScalar((1, 3, 6, 1, 4, 1, 277, 1, 3, 95), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("externala", 1), ("externalb", 2), ("portrefa", 3), ("portrefb", 4), ("internal", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nodeExternalTimingSource.setStatus('mandatory')
nodeSyncAutoRestore = MibScalar((1, 3, 6, 1, 4, 1, 277, 1, 3, 96), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nodeSyncAutoRestore.setStatus('mandatory')
nodeExternalClockInterfaceType = MibScalar((1, 3, 6, 1, 4, 1, 277, 1, 3, 97), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("t1", 1), ("e1bnc", 2), ("e1ww", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nodeExternalClockInterfaceType.setStatus('mandatory')
class CardTypes(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71))
    namedValues = NamedValues(("v35-6", 1), ("ft1-1-24", 2), ("fe1-1-30", 3), ("uio-6", 4), ("cp1", 5), ("uio-8", 6), ("ft1-4-24", 7), ("fe1-4-30", 8), ("ft3-1", 9), ("fe3-1", 10), ("hssi-2", 11), ("dsx1-10", 12), ("rs232-18", 13), ("rs232-8", 14), ("ut1-4-24", 15), ("ue1-4-30", 16), ("atmds3-1", 17), ("atme3-1", 18), ("pri-4", 19), ("e1-pri-4", 20), ("sft1-4-24", 21), ("sut1-4-24", 22), ("st1-pri-4", 23), ("t1-atm", 24), ("e1-atm", 25), ("ads3-t3", 26), ("ads3-e3", 27), ("cbr-ds1-s-4", 28), ("cbr-ds1-us-4", 29), ("cbr-e1-s-4", 30), ("cbr-e1-us-4", 31), ("atmiwu-1", 32), ("toc3-atm-4", 33), ("tstm1-atm-4", 34), ("sp-4", 35), ("sp-8", 36), ("atmcs-1", 37), ("toc12-atm-1", 38), ("tstm4-atm-1", 39), ("ads1-t1", 40), ("ads1-e1", 41), ("ads1-j2", 42), ("e1-12", 43), ("bio1-4-16", 44), ("bio1-oc3-4", 45), ("bio1-oc12-1", 46), ("bio1-oc12x4", 47), ("bio1-oc48-1", 48), ("np1", 49), ("sf1", 50), ("tm1", 51), ("tfds3-t3-6", 52), ("tfds3-e3-6", 53), ("tfast-ether-4", 54), ("fast-ether-2", 55), ("ls-oc3-1", 56), ("tcfds3-t3-6", 57), ("tcfds3-e3-6", 58), ("toc3-cfc-2", 59), ("atmcs-e3-1", 60), ("be1-atm-12", 62), ("bt1-atm-12", 63), ("bds3-1-0", 64), ("gfether-4", 65), ("gfds3-t3-6", 66), ("gfds3-e3-6", 67), ("gchn-ds3-4", 68), ("g-server", 69), ("sp-30", 70), ("sp-40", 71))

class CardStatuses(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 6, 7))
    namedValues = NamedValues(("up", 1), ("down", 2), ("testing", 3), ("maintenance", 6), ("overtemp", 7))

cardNumber = MibScalar((1, 3, 6, 1, 4, 1, 277, 1, 7, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cardNumber.setStatus('mandatory')
cardTable = MibTable((1, 3, 6, 1, 4, 1, 277, 1, 7, 2), )
if mibBuilder.loadTexts: cardTable.setStatus('mandatory')
cardEntry = MibTableRow((1, 3, 6, 1, 4, 1, 277, 1, 7, 2, 1), ).setIndexNames((0, "CASCADE-MIB", "cardLogicalSlotId"), (0, "CASCADE-MIB", "cardRedundState"))
if mibBuilder.loadTexts: cardEntry.setStatus('mandatory')
cardLogicalSlotId = MibTableColumn((1, 3, 6, 1, 4, 1, 277, 1, 7, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cardLogicalSlotId.setStatus('mandatory')
cardPhysicalSlotId = MibTableColumn((1, 3, 6, 1, 4, 1, 277, 1, 7, 2, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cardPhysicalSlotId.setStatus('mandatory')
cardAdminType = MibTableColumn((1, 3, 6, 1, 4, 1, 277, 1, 7, 2, 1, 3), CardTypes()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cardAdminType.setStatus('mandatory')
cardOperType = MibTableColumn((1, 3, 6, 1, 4, 1, 277, 1, 7, 2, 1, 4), CardTypes()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cardOperType.setStatus('mandatory')
cardState = MibTableColumn((1, 3, 6, 1, 4, 1, 277, 1, 7, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12))).clone(namedValues=NamedValues(("present", 1), ("loading", 2), ("start", 3), ("init", 4), ("sync", 5), ("syncdone", 6), ("ready", 7), ("active", 8), ("stopped", 9), ("down", 10), ("debug", 11), ("offlinediag", 12)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cardState.setStatus('mandatory')
cardAdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 277, 1, 7, 2, 1, 6), CardStatuses()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cardAdminStatus.setStatus('mandatory')
cardOperStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 277, 1, 7, 2, 1, 7), CardStatuses()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cardOperStatus.setStatus('mandatory')
cardDiagStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 277, 1, 7, 2, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("ok", 1), ("marginal", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cardDiagStatus.setStatus('mandatory')
cardRedundConfig = MibTableColumn((1, 3, 6, 1, 4, 1, 277, 1, 7, 2, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("configured", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cardRedundConfig.setStatus('mandatory')
cardRedundSlotMask = MibTableColumn((1, 3, 6, 1, 4, 1, 277, 1, 7, 2, 1, 10), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cardRedundSlotMask.setStatus('mandatory')
cardRedundActual = MibTableColumn((1, 3, 6, 1, 4, 1, 277, 1, 7, 2, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("connected", 1), ("not-connected", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cardRedundActual.setStatus('mandatory')
cardRedundState = MibTableColumn((1, 3, 6, 1, 4, 1, 277, 1, 7, 2, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("active", 1), ("standby", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cardRedundState.setStatus('mandatory')
cardToRedundant = MibTableColumn((1, 3, 6, 1, 4, 1, 277, 1, 7, 2, 1, 13), TimeTicks()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cardToRedundant.setStatus('mandatory')
cardDiagNonFatalSource = MibTableColumn((1, 3, 6, 1, 4, 1, 277, 1, 7, 2, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11))).clone(namedValues=NamedValues(("power-on-diagnostics", 1), ("background-diagnostics", 2), ("fault", 3), ("frame-heap", 4), ("redundancy", 5), ("system-level", 6), ("card-level", 7), ("i960-data-structures", 8), ("general", 9), ("data-alignment", 10), ("device-driver-level", 11)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cardDiagNonFatalSource.setStatus('mandatory')
cardDiagNonFatalTime = MibTableColumn((1, 3, 6, 1, 4, 1, 277, 1, 7, 2, 1, 15), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cardDiagNonFatalTime.setStatus('mandatory')
cardDiagNonFatalErrMajor = MibTableColumn((1, 3, 6, 1, 4, 1, 277, 1, 7, 2, 1, 16), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cardDiagNonFatalErrMajor.setStatus('mandatory')
cardDiagNonFatalErrMinor = MibTableColumn((1, 3, 6, 1, 4, 1, 277, 1, 7, 2, 1, 17), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cardDiagNonFatalErrMinor.setStatus('mandatory')
cardDiagNonFatalStr = MibTableColumn((1, 3, 6, 1, 4, 1, 277, 1, 7, 2, 1, 18), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cardDiagNonFatalStr.setStatus('mandatory')
cardDiagFatalSource = MibTableColumn((1, 3, 6, 1, 4, 1, 277, 1, 7, 2, 1, 19), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11))).clone(namedValues=NamedValues(("power-on-diagnostics", 1), ("background-diagnostics", 2), ("fault", 3), ("frame-heap", 4), ("redundancy", 5), ("system-level", 6), ("card-level", 7), ("i960-data-structures", 8), ("general", 9), ("data-alignment", 10), ("device-driver-level", 11)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cardDiagFatalSource.setStatus('mandatory')
cardDiagFatalTime = MibTableColumn((1, 3, 6, 1, 4, 1, 277, 1, 7, 2, 1, 20), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cardDiagFatalTime.setStatus('mandatory')
cardDiagFatalErrMajor = MibTableColumn((1, 3, 6, 1, 4, 1, 277, 1, 7, 2, 1, 21), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cardDiagFatalErrMajor.setStatus('mandatory')
cardDiagFatalErrMinor = MibTableColumn((1, 3, 6, 1, 4, 1, 277, 1, 7, 2, 1, 22), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cardDiagFatalErrMinor.setStatus('mandatory')
cardDiagFatalStr = MibTableColumn((1, 3, 6, 1, 4, 1, 277, 1, 7, 2, 1, 23), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cardDiagFatalStr.setStatus('mandatory')
cardDiagFatalReboots = MibTableColumn((1, 3, 6, 1, 4, 1, 277, 1, 7, 2, 1, 24), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cardDiagFatalReboots.setStatus('mandatory')
cardDiagFatalAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 277, 1, 7, 2, 1, 25), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cardDiagFatalAddress.setStatus('mandatory')
cardDiagBackgroundPasses = MibTableColumn((1, 3, 6, 1, 4, 1, 277, 1, 7, 2, 1, 26), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cardDiagBackgroundPasses.setStatus('mandatory')
cardDiagBackgroundFailures = MibTableColumn((1, 3, 6, 1, 4, 1, 277, 1, 7, 2, 1, 27), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cardDiagBackgroundFailures.setStatus('mandatory')
cardDiagBackgroundSuccesses = MibTableColumn((1, 3, 6, 1, 4, 1, 277, 1, 7, 2, 1, 28), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cardDiagBackgroundSuccesses.setStatus('mandatory')
cardDiagLEDReset = MibTableColumn((1, 3, 6, 1, 4, 1, 277, 1, 7, 2, 1, 29), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("state-to-active", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cardDiagLEDReset.setStatus('mandatory')
cardDiagPowerExtensive = MibTableColumn((1, 3, 6, 1, 4, 1, 277, 1, 7, 2, 1, 30), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("extensive-tests", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cardDiagPowerExtensive.setStatus('mandatory')
cardCpuUtil = MibTableColumn((1, 3, 6, 1, 4, 1, 277, 1, 7, 2, 1, 31), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cardCpuUtil.setStatus('mandatory')
cardMemoryUsage = MibTableColumn((1, 3, 6, 1, 4, 1, 277, 1, 7, 2, 1, 32), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cardMemoryUsage.setStatus('mandatory')
cardMaxVCs = MibTableColumn((1, 3, 6, 1, 4, 1, 277, 1, 7, 2, 1, 33), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cardMaxVCs.setStatus('mandatory')
cardInUseVCs = MibTableColumn((1, 3, 6, 1, 4, 1, 277, 1, 7, 2, 1, 34), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cardInUseVCs.setStatus('mandatory')
cardFreeVCs = MibTableColumn((1, 3, 6, 1, 4, 1, 277, 1, 7, 2, 1, 35), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cardFreeVCs.setStatus('mandatory')
cardInOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 277, 1, 7, 2, 1, 36), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cardInOctets.setStatus('mandatory')
cardInPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 277, 1, 7, 2, 1, 37), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cardInPkts.setStatus('mandatory')
cardOutOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 277, 1, 7, 2, 1, 38), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cardOutOctets.setStatus('mandatory')
cardOutPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 277, 1, 7, 2, 1, 39), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cardOutPkts.setStatus('mandatory')
cardToWarmboot = MibTableColumn((1, 3, 6, 1, 4, 1, 277, 1, 7, 2, 1, 40), TimeTicks()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cardToWarmboot.setStatus('mandatory')
cardToColdboot = MibTableColumn((1, 3, 6, 1, 4, 1, 277, 1, 7, 2, 1, 41), TimeTicks()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cardToColdboot.setStatus('mandatory')
cardModel = MibTableColumn((1, 3, 6, 1, 4, 1, 277, 1, 7, 2, 1, 42), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cardModel.setStatus('mandatory')
cardSerial = MibTableColumn((1, 3, 6, 1, 4, 1, 277, 1, 7, 2, 1, 43), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cardSerial.setStatus('mandatory')
cardSwRev = MibTableColumn((1, 3, 6, 1, 4, 1, 277, 1, 7, 2, 1, 44), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cardSwRev.setStatus('mandatory')
cardHwRev = MibTableColumn((1, 3, 6, 1, 4, 1, 277, 1, 7, 2, 1, 45), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cardHwRev.setStatus('mandatory')
cardEpromRev = MibTableColumn((1, 3, 6, 1, 4, 1, 277, 1, 7, 2, 1, 46), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cardEpromRev.setStatus('mandatory')
cardName = MibTableColumn((1, 3, 6, 1, 4, 1, 277, 1, 7, 2, 1, 47), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cardName.setStatus('mandatory')
cardCktGroupTrap = MibTableColumn((1, 3, 6, 1, 4, 1, 277, 1, 7, 2, 1, 48), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cardCktGroupTrap.setStatus('mandatory')
cardOutBtus = MibTableColumn((1, 3, 6, 1, 4, 1, 277, 1, 7, 2, 1, 49), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cardOutBtus.setStatus('mandatory')
cardInGoodBtus = MibTableColumn((1, 3, 6, 1, 4, 1, 277, 1, 7, 2, 1, 50), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cardInGoodBtus.setStatus('mandatory')
cardInErrorBtus = MibTableColumn((1, 3, 6, 1, 4, 1, 277, 1, 7, 2, 1, 51), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cardInErrorBtus.setStatus('mandatory')
cardInNoVcBtus = MibTableColumn((1, 3, 6, 1, 4, 1, 277, 1, 7, 2, 1, 52), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cardInNoVcBtus.setStatus('mandatory')
cardInLinkDownBtus = MibTableColumn((1, 3, 6, 1, 4, 1, 277, 1, 7, 2, 1, 53), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cardInLinkDownBtus.setStatus('mandatory')
cardInNoBufferBtus = MibTableColumn((1, 3, 6, 1, 4, 1, 277, 1, 7, 2, 1, 54), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cardInNoBufferBtus.setStatus('mandatory')
cardInForwardBitBtus = MibTableColumn((1, 3, 6, 1, 4, 1, 277, 1, 7, 2, 1, 55), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cardInForwardBitBtus.setStatus('mandatory')
cardDiagTestId = MibTableColumn((1, 3, 6, 1, 4, 1, 277, 1, 7, 2, 1, 56), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cardDiagTestId.setStatus('mandatory')
cardDiagTestRuns = MibTableColumn((1, 3, 6, 1, 4, 1, 277, 1, 7, 2, 1, 57), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cardDiagTestRuns.setStatus('mandatory')
cardDiagState = MibTableColumn((1, 3, 6, 1, 4, 1, 277, 1, 7, 2, 1, 58), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("active", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cardDiagState.setStatus('mandatory')
cardDiagOptionStr = MibTableColumn((1, 3, 6, 1, 4, 1, 277, 1, 7, 2, 1, 59), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cardDiagOptionStr.setStatus('mandatory')
cardDiagPasses = MibTableColumn((1, 3, 6, 1, 4, 1, 277, 1, 7, 2, 1, 60), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cardDiagPasses.setStatus('mandatory')
cardDiagFailures = MibTableColumn((1, 3, 6, 1, 4, 1, 277, 1, 7, 2, 1, 61), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cardDiagFailures.setStatus('mandatory')
cardDiagResultString = MibTableColumn((1, 3, 6, 1, 4, 1, 277, 1, 7, 2, 1, 62), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cardDiagResultString.setStatus('mandatory')
cardFrameMemoryUtil = MibTableColumn((1, 3, 6, 1, 4, 1, 277, 1, 7, 2, 1, 63), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cardFrameMemoryUtil.setStatus('mandatory')
cardResetPram = MibTableColumn((1, 3, 6, 1, 4, 1, 277, 1, 7, 2, 1, 64), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("reset-pram", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cardResetPram.setStatus('mandatory')
cardMemoryUtil = MibTableColumn((1, 3, 6, 1, 4, 1, 277, 1, 7, 2, 1, 65), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cardMemoryUtil.setStatus('mandatory')
cardFrameMemoryUsage = MibTableColumn((1, 3, 6, 1, 4, 1, 277, 1, 7, 2, 1, 66), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cardFrameMemoryUsage.setStatus('mandatory')
cardUpTime = MibTableColumn((1, 3, 6, 1, 4, 1, 277, 1, 7, 2, 1, 67), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cardUpTime.setStatus('mandatory')
cardPramChecksum = MibTableColumn((1, 3, 6, 1, 4, 1, 277, 1, 7, 2, 1, 68), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cardPramChecksum.setStatus('mandatory')
cardPhysicalIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 277, 1, 7, 2, 1, 69), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cardPhysicalIndex.setStatus('mandatory')
cardExternalClockRate = MibTableColumn((1, 3, 6, 1, 4, 1, 277, 1, 7, 2, 1, 70), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cardExternalClockRate.setStatus('mandatory')
cardShootState = MibTableColumn((1, 3, 6, 1, 4, 1, 277, 1, 7, 2, 1, 71), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("shoot-enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cardShootState.setStatus('mandatory')
cardEraseAll = MibTableColumn((1, 3, 6, 1, 4, 1, 277, 1, 7, 2, 1, 72), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("erase-all", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cardEraseAll.setStatus('mandatory')
cardAdminCapability = MibTableColumn((1, 3, 6, 1, 4, 1, 277, 1, 7, 2, 1, 73), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 8, 9, 10, 11))).clone(namedValues=NamedValues(("iop-frame-relay", 1), ("iop-multi-service", 2), ("iop-16meg-service", 3), ("cp-basic", 4), ("cp-30", 5), ("cp-plus", 8), ("cp-40", 9), ("cp-50", 10), ("iom-fcp", 11)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cardAdminCapability.setStatus('mandatory')
cardOperCapability = MibTableColumn((1, 3, 6, 1, 4, 1, 277, 1, 7, 2, 1, 74), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 8, 9, 10, 11))).clone(namedValues=NamedValues(("iop-frame-relay", 1), ("iop-multi-service", 2), ("iop-16meg-service", 3), ("cp-basic", 4), ("cp-30", 5), ("cp-plus", 8), ("cp-40", 9), ("cp-50", 10), ("iom-fcp", 11)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cardOperCapability.setStatus('mandatory')
cardISDNswtype = MibTableColumn((1, 3, 6, 1, 4, 1, 277, 1, 7, 2, 1, 75), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("att-4ess", 1), ("att-5ess", 2), ("dms100", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cardISDNswtype.setStatus('mandatory')
cardCpuFgUtil = MibTableColumn((1, 3, 6, 1, 4, 1, 277, 1, 7, 2, 1, 76), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cardCpuFgUtil.setStatus('mandatory')
cardTrkProtState = MibTableColumn((1, 3, 6, 1, 4, 1, 277, 1, 7, 2, 1, 77), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cardTrkProtState.setStatus('mandatory')
cardISDNSigType = MibTableColumn((1, 3, 6, 1, 4, 1, 277, 1, 7, 2, 1, 78), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no-nfas", 1), ("nfas", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cardISDNSigType.setStatus('mandatory')
cardISDNChanId = MibTableColumn((1, 3, 6, 1, 4, 1, 277, 1, 7, 2, 1, 79), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("exclusive", 1), ("preferred", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cardISDNChanId.setStatus('mandatory')
cardTransmitClockConfig = MibTableColumn((1, 3, 6, 1, 4, 1, 277, 1, 7, 2, 1, 80), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("system-primary-clock", 1), ("system-secondary-clock", 2), ("system-primary-secondary-clock", 3), ("free-running-clock", 4), ("e1-G703sec10-clock", 5), ("e1-network-clock", 6)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cardTransmitClockConfig.setStatus('mandatory')
cardTransmitClockSwitchOver = MibTableColumn((1, 3, 6, 1, 4, 1, 277, 1, 7, 2, 1, 81), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cardTransmitClockSwitchOver.setStatus('mandatory')
cardTransmitClockStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 277, 1, 7, 2, 1, 82), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("in-synchronization", 1), ("loss-of-synchronization", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cardTransmitClockStatus.setStatus('mandatory')
cardSystemPrimaryClockPortConfig = MibTableColumn((1, 3, 6, 1, 4, 1, 277, 1, 7, 2, 1, 83), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cardSystemPrimaryClockPortConfig.setStatus('mandatory')
cardSystemPrimaryClockStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 277, 1, 7, 2, 1, 84), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("normal", 1), ("failure", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cardSystemPrimaryClockStatus.setStatus('mandatory')
cardSystemSecondaryClockPortConfig = MibTableColumn((1, 3, 6, 1, 4, 1, 277, 1, 7, 2, 1, 85), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cardSystemSecondaryClockPortConfig.setStatus('mandatory')
cardSystemSecondaryClockStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 277, 1, 7, 2, 1, 86), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("normal", 1), ("failure", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cardSystemSecondaryClockStatus.setStatus('mandatory')
cardInCells = MibTableColumn((1, 3, 6, 1, 4, 1, 277, 1, 7, 2, 1, 87), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cardInCells.setStatus('mandatory')
cardInErrorCells = MibTableColumn((1, 3, 6, 1, 4, 1, 277, 1, 7, 2, 1, 88), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cardInErrorCells.setStatus('mandatory')
cardInErrorVPIVCI = MibTableColumn((1, 3, 6, 1, 4, 1, 277, 1, 7, 2, 1, 89), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cardInErrorVPIVCI.setStatus('mandatory')
cardOutCells = MibTableColumn((1, 3, 6, 1, 4, 1, 277, 1, 7, 2, 1, 90), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cardOutCells.setStatus('mandatory')
cardOutDiscardCells = MibTableColumn((1, 3, 6, 1, 4, 1, 277, 1, 7, 2, 1, 91), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cardOutDiscardCells.setStatus('mandatory')
cardQOSQueueSize = MibTableColumn((1, 3, 6, 1, 4, 1, 277, 1, 7, 2, 1, 92), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("cell-8K", 1), ("cell-24K", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cardQOSQueueSize.setStatus('mandatory')
cardLastErrorPort = MibTableColumn((1, 3, 6, 1, 4, 1, 277, 1, 7, 2, 1, 93), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cardLastErrorPort.setStatus('mandatory')
cardLastErrorVPI = MibTableColumn((1, 3, 6, 1, 4, 1, 277, 1, 7, 2, 1, 94), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cardLastErrorVPI.setStatus('mandatory')
cardLastErrorVCI = MibTableColumn((1, 3, 6, 1, 4, 1, 277, 1, 7, 2, 1, 95), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cardLastErrorVCI.setStatus('mandatory')
cardSystemPrimaryClockModeConfig = MibTableColumn((1, 3, 6, 1, 4, 1, 277, 1, 7, 2, 1, 96), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("line-rate", 1), ("plcp-mode", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cardSystemPrimaryClockModeConfig.setStatus('mandatory')
cardSystemSecondaryClockModeConfig = MibTableColumn((1, 3, 6, 1, 4, 1, 277, 1, 7, 2, 1, 97), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("line-rate", 1), ("plcp-mode", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cardSystemSecondaryClockModeConfig.setStatus('mandatory')
cardNFBDEStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 277, 1, 7, 2, 1, 98), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("cleared", 1), ("not-cleared", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cardNFBDEStatus.setStatus('mandatory')
cardProductCode = MibTableColumn((1, 3, 6, 1, 4, 1, 277, 1, 7, 2, 1, 99), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cardProductCode.setStatus('mandatory')
cardMfgPN = MibTableColumn((1, 3, 6, 1, 4, 1, 277, 1, 7, 2, 1, 100), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cardMfgPN.setStatus('mandatory')
cardTotalUpTime = MibTableColumn((1, 3, 6, 1, 4, 1, 277, 1, 7, 2, 1, 101), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cardTotalUpTime.setStatus('mandatory')
cardIOAType = MibTableColumn((1, 3, 6, 1, 4, 1, 277, 1, 7, 2, 1, 102), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 35, 36, 37, 38, 39, 40, 32, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75))).clone(namedValues=NamedValues(("spa", 1), ("toc3-4", 2), ("tstm1-4", 3), ("tds3-8", 4), ("te3-8", 5), ("toc3-smfir-n-4", 6), ("toc3-smfir-r-4", 7), ("toc3-mm-r-4", 8), ("toc3-smflr-n-4", 9), ("toc3-smflr-r-4", 10), ("tstm1-smfir-n-4", 11), ("tstm1-smfir-r-4", 12), ("tstm1-mm-r-4", 13), ("tstm1-smflr-n-4", 14), ("tstm1-smflr-r-4", 15), ("tds3-r-8", 16), ("te3-r-8", 17), ("hssi-n", 18), ("hssi-r", 19), ("toc12-smf-n-1", 21), ("tads1-t1-n-8", 22), ("tads1-t1-r-8", 23), ("tads1-e1-75-n-8", 24), ("tads1-e1-75-r-8", 25), ("tads1-e1-120-n-8", 26), ("tads1-e1-120-r-8", 27), ("tads1-j2-75-n-8", 28), ("tads1-j2-75-r-8", 29), ("tads1-j2-120-n-8", 30), ("tads1-j2-120-r-8", 31), ("bCS-DS3-n-1", 35), ("bCS-DS3-r-1", 36), ("bIWU-OC3-mm-n-1", 37), ("bIWU-OC3-smfir-n-1", 38), ("toc3-stm1copper-n-4", 39), ("toc3-stm1copper-r-4", 40), ("spa-universal", 32), ("nplus1-chassis", 41), ("toc12-smflr-n-1", 42), ("npa-universal", 43), ("bIWU-OC3-bumm-1", 44), ("bIWU-OC3-bumm-smfir-1", 45), ("bIWU-OC3-trm-mm-1", 46), ("bIWU-OC3-trm-smfir-1", 47), ("uio-v35", 48), ("uio-x21", 49), ("bds1-e1-bnc-n-12", 50), ("bds1-e1-bnc-r-12", 51), ("bds1-e1-db15-n-12", 52), ("bds1-e1-db15-r-12", 53), ("bCS-E3-n-1", 54), ("bCS-E3-r-1", 55), ("bCP-1-m", 56), ("bCP-1-o", 57), ("be1-atm-75-n-12", 58), ("be1-atm-75-r-12", 59), ("be1-atm-120-n-12", 60), ("be1-atm-120-r-12", 61), ("bt1-atm-100-n-12", 62), ("bt1-atm-100-r-12", 63), ("bds1-e1-rj48h-n-12", 64), ("bds1-e1-rj48h-r-12", 65), ("gx550-backplane", 66), ("cbx500-ether-n-4", 67), ("cbx500-ds3-n-6", 68), ("bstdx9000-ether-n-2", 69), ("bio550-oc3-smfir", 70), ("bio550-oc3-smflr", 71), ("bio550-oc3-mmf", 72), ("bio550-oc12-smfir", 73), ("bio550-oc12-smflr", 74), ("bio550-oc12-mmf", 75)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cardIOAType.setStatus('mandatory')
cardIOAHwRev = MibTableColumn((1, 3, 6, 1, 4, 1, 277, 1, 7, 2, 1, 103), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cardIOAHwRev.setStatus('mandatory')
cardIOASerial = MibTableColumn((1, 3, 6, 1, 4, 1, 277, 1, 7, 2, 1, 104), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cardIOASerial.setStatus('mandatory')
cardIOAProductCode = MibTableColumn((1, 3, 6, 1, 4, 1, 277, 1, 7, 2, 1, 105), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cardIOAProductCode.setStatus('mandatory')
cardIOAMfgPN = MibTableColumn((1, 3, 6, 1, 4, 1, 277, 1, 7, 2, 1, 106), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cardIOAMfgPN.setStatus('mandatory')
cardDS0Support = MibTableColumn((1, 3, 6, 1, 4, 1, 277, 1, 7, 2, 1, 107), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("ds0-lpbk-not-supported", 1), ("ds0-lpbk-supported", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cardDS0Support.setStatus('mandatory')
cardDiagParamId = MibTableColumn((1, 3, 6, 1, 4, 1, 277, 1, 7, 2, 1, 108), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cardDiagParamId.setStatus('mandatory')
cardDiagParamValue = MibTableColumn((1, 3, 6, 1, 4, 1, 277, 1, 7, 2, 1, 109), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cardDiagParamValue.setStatus('mandatory')
cardBulkStatsPeakCapability = MibTableColumn((1, 3, 6, 1, 4, 1, 277, 1, 7, 2, 1, 110), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cardBulkStatsPeakCapability.setStatus('mandatory')
cardBulkStatsTotalCapability = MibTableColumn((1, 3, 6, 1, 4, 1, 277, 1, 7, 2, 1, 111), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cardBulkStatsTotalCapability.setStatus('mandatory')
cardBulkStatsPeakEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 277, 1, 7, 2, 1, 112), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cardBulkStatsPeakEnable.setStatus('mandatory')
cardBulkStatsTotalEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 277, 1, 7, 2, 1, 113), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cardBulkStatsTotalEnable.setStatus('mandatory')
cardBulkStatsBaseCollectPeriod = MibTableColumn((1, 3, 6, 1, 4, 1, 277, 1, 7, 2, 1, 114), Integer32().subtype(subtypeSpec=ValueRangeConstraint(15, 1440))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cardBulkStatsBaseCollectPeriod.setStatus('mandatory')
cardNrtsHwRev = MibTableColumn((1, 3, 6, 1, 4, 1, 277, 1, 7, 2, 1, 115), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cardNrtsHwRev.setStatus('mandatory')
cardNrtsOutCellBufSize = MibTableColumn((1, 3, 6, 1, 4, 1, 277, 1, 7, 2, 1, 116), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cardNrtsOutCellBufSize.setStatus('mandatory')
cardNrtsOperState = MibTableColumn((1, 3, 6, 1, 4, 1, 277, 1, 7, 2, 1, 117), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("absent", 1), ("down", 2), ("up", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cardNrtsOperState.setStatus('mandatory')
cardNrtsAdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 277, 1, 7, 2, 1, 118), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cardNrtsAdminState.setStatus('mandatory')
cardNrtsCcrmProtocolId = MibTableColumn((1, 3, 6, 1, 4, 1, 277, 1, 7, 2, 1, 119), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cardNrtsCcrmProtocolId.setStatus('mandatory')
cardNrtsBcmProtocolId = MibTableColumn((1, 3, 6, 1, 4, 1, 277, 1, 7, 2, 1, 120), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cardNrtsBcmProtocolId.setStatus('mandatory')
cardNrtsRmGenInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 277, 1, 7, 2, 1, 121), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cardNrtsRmGenInterval.setStatus('mandatory')
cardNrtsIdleCktThresh = MibTableColumn((1, 3, 6, 1, 4, 1, 277, 1, 7, 2, 1, 122), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cardNrtsIdleCktThresh.setStatus('mandatory')
cardNrtsVbrNrtManage = MibTableColumn((1, 3, 6, 1, 4, 1, 277, 1, 7, 2, 1, 123), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cardNrtsVbrNrtManage.setStatus('mandatory')
cardNrtsIcrFact = MibTableColumn((1, 3, 6, 1, 4, 1, 277, 1, 7, 2, 1, 124), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cardNrtsIcrFact.setStatus('mandatory')
cardNrtsMcastDiscardThresh = MibTableColumn((1, 3, 6, 1, 4, 1, 277, 1, 7, 2, 1, 125), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cardNrtsMcastDiscardThresh.setStatus('mandatory')
cardNrtsMcastDiscardCount = MibTableColumn((1, 3, 6, 1, 4, 1, 277, 1, 7, 2, 1, 126), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cardNrtsMcastDiscardCount.setStatus('mandatory')
cardAdminIOAType = MibTableColumn((1, 3, 6, 1, 4, 1, 277, 1, 7, 2, 1, 127), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 35, 36, 37, 38, 39, 40, 32, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 67, 68, 69, 70, 71, 72, 73, 74, 75))).clone(namedValues=NamedValues(("spa", 1), ("toc3-4", 2), ("tstm1-4", 3), ("tds3-8", 4), ("te3-8", 5), ("toc3-smfir-n-4", 6), ("toc3-smfir-r-4", 7), ("toc3-mm-r-4", 8), ("toc3-smflr-n-4", 9), ("toc3-smflr-r-4", 10), ("tstm1-smfir-n-4", 11), ("tstm1-smfir-r-4", 12), ("tstm1-mm-r-4", 13), ("tstm1-smflr-n-4", 14), ("tstm1-smflr-r-4", 15), ("tds3-r-8", 16), ("te3-r-8", 17), ("hssi-n", 18), ("hssi-r", 19), ("toc12-smf-n-1", 21), ("tads1-t1-n-8", 22), ("tads1-t1-r-8", 23), ("tads1-e1-75-n-8", 24), ("tads1-e1-75-r-8", 25), ("tads1-e1-120-n-8", 26), ("tads1-e1-120-r-8", 27), ("tads1-j2-75-n-8", 28), ("tads1-j2-75-r-8", 29), ("tads1-j2-120-n-8", 30), ("tads1-j2-120-r-8", 31), ("bCS-DS3-n-1", 35), ("bCS-DS3-r-1", 36), ("bIWU-OC3-mm-n-1", 37), ("bIWU-OC3-smfir-n-1", 38), ("toc3-stm1copper-n-4", 39), ("toc3-stm1copper-r-4", 40), ("spa-universal", 32), ("nplus1-chassis", 41), ("toc12-smflr-n-1", 42), ("npa-universal", 43), ("bIWU-OC3-bumm-1", 44), ("bIWU-OC3-bumm-smfir-1", 45), ("bIWU-OC3-trm-mm-1", 46), ("bIWU-OC3-trm-smfir-1", 47), ("uio-v35", 48), ("uio-x21", 49), ("bds1-e1-bnc-n-12", 50), ("bds1-e1-bnc-r-12", 51), ("bds1-e1-db15-n-12", 52), ("bds1-e1-db15-r-12", 53), ("bCS-E3-n-1", 54), ("bCS-E3-r-1", 55), ("bCP-1-m", 56), ("bCP-1-o", 57), ("be1-atm-75-n-12", 58), ("be1-atm-75-r-12", 59), ("be1-atm-120-n-12", 60), ("be1-atm-120-r-12", 61), ("bt1-atm-100-n-12", 62), ("bt1-atm-100-r-12", 63), ("bds1-e1-rj48h-n-12", 64), ("bds1-e1-rj48h-r-12", 65), ("cbx500-ether-n-4", 67), ("cbx500-ds3-n-6", 68), ("bstdx9000-ether-n-2", 69), ("bio550-oc3-smfir", 70), ("bio550-oc3-smflr", 71), ("bio550-oc3-mmf", 72), ("bio550-oc12-smfir", 73), ("bio550-oc12-smflr", 74), ("bio550-oc12-mmf", 75)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cardAdminIOAType.setStatus('mandatory')
cardNrtsMcastRate = MibTableColumn((1, 3, 6, 1, 4, 1, 277, 1, 7, 2, 1, 128), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cardNrtsMcastRate.setStatus('mandatory')
cardMonStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 277, 1, 7, 2, 1, 129), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cardMonStatus.setStatus('mandatory')
cardImageSetA = MibTableColumn((1, 3, 6, 1, 4, 1, 277, 1, 7, 2, 1, 130), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cardImageSetA.setStatus('mandatory')
cardImageSetB = MibTableColumn((1, 3, 6, 1, 4, 1, 277, 1, 7, 2, 1, 131), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cardImageSetB.setStatus('mandatory')
cardMacAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 277, 1, 7, 2, 1, 132), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cardMacAddress.setStatus('mandatory')
cardFlashRev = MibTableColumn((1, 3, 6, 1, 4, 1, 277, 1, 7, 2, 1, 133), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cardFlashRev.setStatus('mandatory')
cardRequiredCapabilityBitmask = MibTableColumn((1, 3, 6, 1, 4, 1, 277, 1, 7, 2, 1, 134), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 4, 8))).clone(namedValues=NamedValues(("aps-one-plus-one-support", 1), ("holdover-support", 2), ("vp-shaping", 4), ("fe-capability", 8)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cardRequiredCapabilityBitmask.setStatus('mandatory')
cardOperCapabilityBitmask = MibTableColumn((1, 3, 6, 1, 4, 1, 277, 1, 7, 2, 1, 135), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 4, 8))).clone(namedValues=NamedValues(("aps-one-plus-one-supported", 1), ("holdover-supported", 2), ("vp-shaping", 4), ("fe-capability", 8)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cardOperCapabilityBitmask.setStatus('mandatory')
cardDslModule = MibTableColumn((1, 3, 6, 1, 4, 1, 277, 1, 7, 2, 1, 136), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cardDslModule.setStatus('mandatory')
cardIPTableSize = MibTableColumn((1, 3, 6, 1, 4, 1, 277, 1, 7, 2, 1, 137), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cardIPTableSize.setStatus('mandatory')
cardIPTableState = MibTableColumn((1, 3, 6, 1, 4, 1, 277, 1, 7, 2, 1, 138), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("normal", 1), ("marginal", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cardIPTableState.setStatus('mandatory')
cardATMTcaInBufOverflowAlertPeriod = MibTableColumn((1, 3, 6, 1, 4, 1, 277, 1, 7, 2, 1, 139), Integer32().clone(15)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cardATMTcaInBufOverflowAlertPeriod.setStatus('mandatory')
cardATMTcaInBufOverflowThresh = MibTableColumn((1, 3, 6, 1, 4, 1, 277, 1, 7, 2, 1, 140), Integer32().clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cardATMTcaInBufOverflowThresh.setStatus('mandatory')
cardATMTcaInInvalidVpiVciAlertPeriod = MibTableColumn((1, 3, 6, 1, 4, 1, 277, 1, 7, 2, 1, 141), Integer32().clone(15)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cardATMTcaInInvalidVpiVciAlertPeriod.setStatus('mandatory')
cardATMTcaInInvalidVpiVciThresh = MibTableColumn((1, 3, 6, 1, 4, 1, 277, 1, 7, 2, 1, 142), Integer32().clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cardATMTcaInInvalidVpiVciThresh.setStatus('mandatory')
cardATMTcaInATMDCFullAlertPeriod = MibTableColumn((1, 3, 6, 1, 4, 1, 277, 1, 7, 2, 1, 143), Integer32().clone(15)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cardATMTcaInATMDCFullAlertPeriod.setStatus('mandatory')
cardATMTcaInATMDCFullThresh = MibTableColumn((1, 3, 6, 1, 4, 1, 277, 1, 7, 2, 1, 144), Integer32().clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cardATMTcaInATMDCFullThresh.setStatus('mandatory')
cardATMTcaEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 277, 1, 7, 2, 1, 145), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cardATMTcaEnable.setStatus('mandatory')
cardATMTcaId = MibTableColumn((1, 3, 6, 1, 4, 1, 277, 1, 7, 2, 1, 146), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("ingressBufferOverfloeC", 1), ("ingressInvalidVpiVciC", 2), ("ingressATMDCFullC", 3), ("ingressBufferMsbPaeC", 4), ("ingressBufferHalfC", 5), ("ingressBufferMsbPafC", 6), ("egressCidLookupFailureC", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cardATMTcaId.setStatus('mandatory')
cardATMTcaECidLookupFailureAlertPeriod = MibTableColumn((1, 3, 6, 1, 4, 1, 277, 1, 7, 2, 1, 147), Integer32().clone(15)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cardATMTcaECidLookupFailureAlertPeriod.setStatus('mandatory')
cardATMTcaECidLookupThresh = MibTableColumn((1, 3, 6, 1, 4, 1, 277, 1, 7, 2, 1, 148), Integer32().clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cardATMTcaECidLookupThresh.setStatus('mandatory')
cardATMTcaSPPearlOCbrFailureAlertPeriod = MibTableColumn((1, 3, 6, 1, 4, 1, 277, 1, 7, 2, 1, 149), Integer32().clone(15)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cardATMTcaSPPearlOCbrFailureAlertPeriod.setStatus('mandatory')
cardATMTcaSPPearlOCbrThresh = MibTableColumn((1, 3, 6, 1, 4, 1, 277, 1, 7, 2, 1, 150), Integer32().clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cardATMTcaSPPearlOCbrThresh.setStatus('mandatory')
cardATMTcaSPPearlOAbrFailureAlertPeriod = MibTableColumn((1, 3, 6, 1, 4, 1, 277, 1, 7, 2, 1, 151), Integer32().clone(15)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cardATMTcaSPPearlOAbrFailureAlertPeriod.setStatus('mandatory')
cardATMTcaSPPearlOAbrThresh = MibTableColumn((1, 3, 6, 1, 4, 1, 277, 1, 7, 2, 1, 152), Integer32().clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cardATMTcaSPPearlOAbrThresh.setStatus('mandatory')
cardATMTcaSPPearlOVbr1FailureAlertPeriod = MibTableColumn((1, 3, 6, 1, 4, 1, 277, 1, 7, 2, 1, 153), Integer32().clone(15)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cardATMTcaSPPearlOVbr1FailureAlertPeriod.setStatus('mandatory')
cardATMTcaSPPearlOVbr1Thresh = MibTableColumn((1, 3, 6, 1, 4, 1, 277, 1, 7, 2, 1, 154), Integer32().clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cardATMTcaSPPearlOVbr1Thresh.setStatus('mandatory')
cardATMTcaSPPearlOVbr2FailureAlertPeriod = MibTableColumn((1, 3, 6, 1, 4, 1, 277, 1, 7, 2, 1, 155), Integer32().clone(15)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cardATMTcaSPPearlOVbr2FailureAlertPeriod.setStatus('mandatory')
cardATMTcaSPPearlOVbr2Thresh = MibTableColumn((1, 3, 6, 1, 4, 1, 277, 1, 7, 2, 1, 156), Integer32().clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cardATMTcaSPPearlOVbr2Thresh.setStatus('mandatory')
cardATMTcaSPPearlGCbrFailureAlertPeriod = MibTableColumn((1, 3, 6, 1, 4, 1, 277, 1, 7, 2, 1, 157), Integer32().clone(15)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cardATMTcaSPPearlGCbrFailureAlertPeriod.setStatus('mandatory')
cardATMTcaSPPearlGCbrThresh = MibTableColumn((1, 3, 6, 1, 4, 1, 277, 1, 7, 2, 1, 158), Integer32().clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cardATMTcaSPPearlGCbrThresh.setStatus('mandatory')
cardATMTcaSPPearlGAbrFailureAlertPeriod = MibTableColumn((1, 3, 6, 1, 4, 1, 277, 1, 7, 2, 1, 159), Integer32().clone(15)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cardATMTcaSPPearlGAbrFailureAlertPeriod.setStatus('mandatory')
cardATMTcaSPPearlGAbrThresh = MibTableColumn((1, 3, 6, 1, 4, 1, 277, 1, 7, 2, 1, 160), Integer32().clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cardATMTcaSPPearlGAbrThresh.setStatus('mandatory')
cardATMTcaSPPearlGVbr1FailureAlertPeriod = MibTableColumn((1, 3, 6, 1, 4, 1, 277, 1, 7, 2, 1, 161), Integer32().clone(15)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cardATMTcaSPPearlGVbr1FailureAlertPeriod.setStatus('mandatory')
cardATMTcaSPPearlGVbr1Thresh = MibTableColumn((1, 3, 6, 1, 4, 1, 277, 1, 7, 2, 1, 162), Integer32().clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cardATMTcaSPPearlGVbr1Thresh.setStatus('mandatory')
cardATMTcaSPPearlGVbr2FailureAlertPeriod = MibTableColumn((1, 3, 6, 1, 4, 1, 277, 1, 7, 2, 1, 163), Integer32().clone(15)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cardATMTcaSPPearlGVbr2FailureAlertPeriod.setStatus('mandatory')
cardATMTcaSPPearlGVbr2Thresh = MibTableColumn((1, 3, 6, 1, 4, 1, 277, 1, 7, 2, 1, 164), Integer32().clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cardATMTcaSPPearlGVbr2Thresh.setStatus('mandatory')
cardATMTcaSPEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 277, 1, 7, 2, 1, 165), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cardATMTcaSPEnable.setStatus('mandatory')
cardSPEFCIEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 277, 1, 7, 2, 1, 166), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cardSPEFCIEnable.setStatus('mandatory')
cardSPClpEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 277, 1, 7, 2, 1, 167), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cardSPClpEnable.setStatus('mandatory')
spATMTcaId = MibTableColumn((1, 3, 6, 1, 4, 1, 277, 1, 7, 2, 1, 168), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16))).clone(namedValues=NamedValues(("spBufferOverflowC1", 1), ("spBufferOverflowC2", 2), ("spBufferOverflowA1", 3), ("spBufferOverflowA2", 4), ("spBufferOverflowV11", 5), ("spBufferOverflowV12", 6), ("spBufferOverflowV21", 7), ("spBufferOverflowV22", 8), ("spBufferCongestionC1", 9), ("spBufferCongestionC2", 10), ("spBufferCongestionA1", 11), ("spBufferCongestionA2", 12), ("spBufferCongestionV11", 13), ("spBufferCongestionV12", 14), ("spBufferCongestionV21", 15), ("spBufferCongestionV22", 16)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: spATMTcaId.setStatus('mandatory')
cardSubcardToRedundant = MibTableColumn((1, 3, 6, 1, 4, 1, 277, 1, 7, 2, 1, 169), CardTypes()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cardSubcardToRedundant.setStatus('mandatory')
cardMemory5Usage = MibTableColumn((1, 3, 6, 1, 4, 1, 277, 1, 7, 2, 1, 170), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cardMemory5Usage.setStatus('mandatory')
cardSF1OperStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 277, 1, 7, 2, 1, 171), CardStatuses()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cardSF1OperStatus.setStatus('mandatory')
cardSF2OperStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 277, 1, 7, 2, 1, 172), CardStatuses()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cardSF2OperStatus.setStatus('mandatory')
cardTM1OperStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 277, 1, 7, 2, 1, 173), CardStatuses()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cardTM1OperStatus.setStatus('mandatory')
cardTM2OperStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 277, 1, 7, 2, 1, 174), CardStatuses()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cardTM2OperStatus.setStatus('mandatory')
cardMemStartLog = MibTableColumn((1, 3, 6, 1, 4, 1, 277, 1, 7, 2, 1, 175), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("enable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cardMemStartLog.setStatus('mandatory')
cardMemLogLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 277, 1, 7, 2, 1, 176), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cardMemLogLevel.setStatus('mandatory')
cardMemClrLog = MibTableColumn((1, 3, 6, 1, 4, 1, 277, 1, 7, 2, 1, 177), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("enable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cardMemClrLog.setStatus('mandatory')
cardValidSubcards = MibTableColumn((1, 3, 6, 1, 4, 1, 277, 1, 7, 2, 1, 178), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cardValidSubcards.setStatus('mandatory')
cardClp0CbrThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 277, 1, 7, 2, 1, 179), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cardClp0CbrThreshold.setStatus('mandatory')
cardClp01CbrThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 277, 1, 7, 2, 1, 180), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cardClp01CbrThreshold.setStatus('mandatory')
cardClp0VbrRtThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 277, 1, 7, 2, 1, 181), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cardClp0VbrRtThreshold.setStatus('mandatory')
cardClp01VbrRtThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 277, 1, 7, 2, 1, 182), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cardClp01VbrRtThreshold.setStatus('mandatory')
cardClp0VbrNrtThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 277, 1, 7, 2, 1, 183), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cardClp0VbrNrtThreshold.setStatus('mandatory')
cardClp01VbrNrtThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 277, 1, 7, 2, 1, 184), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cardClp01VbrNrtThreshold.setStatus('mandatory')
cardClp0UAbrThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 277, 1, 7, 2, 1, 185), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cardClp0UAbrThreshold.setStatus('mandatory')
cardClp01UAbrThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 277, 1, 7, 2, 1, 186), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cardClp01UAbrThreshold.setStatus('mandatory')
cardControlMessagesFromBus = MibTableColumn((1, 3, 6, 1, 4, 1, 277, 1, 7, 2, 1, 187), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cardControlMessagesFromBus.setStatus('mandatory')
cardControlMessagesToBus = MibTableColumn((1, 3, 6, 1, 4, 1, 277, 1, 7, 2, 1, 188), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cardControlMessagesToBus.setStatus('mandatory')
cardBTUsFromBus = MibTableColumn((1, 3, 6, 1, 4, 1, 277, 1, 7, 2, 1, 189), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cardBTUsFromBus.setStatus('mandatory')
cardBTUsToBus = MibTableColumn((1, 3, 6, 1, 4, 1, 277, 1, 7, 2, 1, 190), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cardBTUsToBus.setStatus('mandatory')
cardInvalidPvcBTUs = MibTableColumn((1, 3, 6, 1, 4, 1, 277, 1, 7, 2, 1, 191), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cardInvalidPvcBTUs.setStatus('mandatory')
cardIncompleteFramesFromBus = MibTableColumn((1, 3, 6, 1, 4, 1, 277, 1, 7, 2, 1, 192), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cardIncompleteFramesFromBus.setStatus('mandatory')
cardBTUsBusErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 277, 1, 7, 2, 1, 193), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cardBTUsBusErrors.setStatus('mandatory')
cardBTUsNoResource = MibTableColumn((1, 3, 6, 1, 4, 1, 277, 1, 7, 2, 1, 194), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cardBTUsNoResource.setStatus('mandatory')
cardInvalidPvcBTUsThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 277, 1, 7, 2, 1, 195), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cardInvalidPvcBTUsThreshold.setStatus('mandatory')
cardIncompleteFramesFromBusThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 277, 1, 7, 2, 1, 196), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cardIncompleteFramesFromBusThreshold.setStatus('mandatory')
cardBTUsBusErrorThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 277, 1, 7, 2, 1, 197), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cardBTUsBusErrorThreshold.setStatus('mandatory')
cardBTUsNoResourceThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 277, 1, 7, 2, 1, 198), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cardBTUsNoResourceThreshold.setStatus('mandatory')
cardFrameMemoryThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 277, 1, 7, 2, 1, 199), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cardFrameMemoryThreshold.setStatus('mandatory')
cardHoldQFrameMemory = MibTableColumn((1, 3, 6, 1, 4, 1, 277, 1, 7, 2, 1, 200), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cardHoldQFrameMemory.setStatus('mandatory')
cardTotalAAL5RxErrorCount = MibTableColumn((1, 3, 6, 1, 4, 1, 277, 1, 7, 2, 1, 201), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cardTotalAAL5RxErrorCount.setStatus('mandatory')
cardOperMemSize = MibTableColumn((1, 3, 6, 1, 4, 1, 277, 1, 7, 2, 1, 202), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cardOperMemSize.setStatus('mandatory')
pportNumber = MibScalar((1, 3, 6, 1, 4, 1, 277, 1, 4, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pportNumber.setStatus('mandatory')
pportTable = MibTable((1, 3, 6, 1, 4, 1, 277, 1, 4, 2), )
if mibBuilder.loadTexts: pportTable.setStatus('mandatory')
pportEntry = MibTableRow((1, 3, 6, 1, 4, 1, 277, 1, 4, 2, 1), ).setIndexNames((0, "CASCADE-MIB", "pportSlotId"), (0, "CASCADE-MIB", "pportId"))
if mibBuilder.loadTexts: pportEntry.setStatus('mandatory')
pportSlotId = MibTableColumn((1, 3, 6, 1, 4, 1, 277, 1, 4, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pportSlotId.setStatus('mandatory')
pportId = MibTableColumn((1, 3, 6, 1, 4, 1, 277, 1, 4, 2, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pportId.setStatus('mandatory')
pportAdminType = MibTableColumn((1, 3, 6, 1, 4, 1, 277, 1, 4, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35))).clone(namedValues=NamedValues(("v35-6", 1), ("ft1-1-24", 2), ("fe1-1-30", 3), ("uio-6", 4), ("cp1", 5), ("uio-8", 6), ("ft1-4-24", 7), ("fe1-4-30", 8), ("ft3-1", 9), ("fe3-1", 10), ("hssi-1", 11), ("dsx1-10", 12), ("rs232-18", 13), ("rs232-8", 14), ("ut1-4-24", 15), ("ue1-4-30", 16), ("atmds3-1", 17), ("atme3-1", 18), ("pri-4", 19), ("e1-pri-4", 20), ("sft1-4-24", 21), ("sut1-4-24", 22), ("st1-pri-4", 23), ("t1-atm", 24), ("e1-atm", 25), ("ads3-t3", 26), ("ads3-e3", 27), ("cbr-ds1-s-4", 28), ("cbr-ds1-us-4", 29), ("cbr-e1-s-4", 30), ("cbr-e1-us-4", 31), ("cbr-atmiwu-1", 32), ("toc3-atm-4", 33), ("tstm1-atm-4", 34), ("atmcs-1", 35)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pportAdminType.setStatus('mandatory')
pportNumLport = MibTableColumn((1, 3, 6, 1, 4, 1, 277, 1, 4, 2, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pportNumLport.setStatus('mandatory')
pportDataRate = MibTableColumn((1, 3, 6, 1, 4, 1, 277, 1, 4, 2, 1, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pportDataRate.setStatus('mandatory')
pportType = MibTableColumn((1, 3, 6, 1, 4, 1, 277, 1, 4, 2, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35))).clone(namedValues=NamedValues(("v35-6", 1), ("ft1-1-24", 2), ("fe1-1-30", 3), ("uio-6", 4), ("cp1", 5), ("uio-8", 6), ("ft1-4-24", 7), ("fe1-4-30", 8), ("ft3-1", 9), ("fe3-1", 10), ("hssi-1", 11), ("dsx1-10", 12), ("rs232-18", 13), ("rs232-8", 14), ("ut1-4-24", 15), ("ue1-4-30", 16), ("atm-1", 17), ("atme3-1", 18), ("pri-4", 19), ("e1-pri-4", 20), ("sft1-4-24", 21), ("sut1-4-24", 22), ("st1-pri-4", 23), ("t1-atm", 24), ("e1-atm", 25), ("ads3-t3", 26), ("ads3-e3", 27), ("cbr-ds1-s-4", 28), ("cbr-ds1-us-4", 29), ("cbr-e1-s-4", 30), ("cbr-e1-us-4", 31), ("cbr-atmiwu-1", 32), ("toc3-atm-4", 33), ("tstm1-atm-4", 34), ("atmcs-1", 35)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pportType.setStatus('mandatory')
pportRecvClock = MibTableColumn((1, 3, 6, 1, 4, 1, 277, 1, 4, 2, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pportRecvClock.setStatus('mandatory')
pportXmitClock = MibTableColumn((1, 3, 6, 1, 4, 1, 277, 1, 4, 2, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pportXmitClock.setStatus('mandatory')
pportAdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 277, 1, 4, 2, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("up", 1), ("down", 2), ("testing", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pportAdminStatus.setStatus('mandatory')
pportOperStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 277, 1, 4, 2, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("up", 1), ("down", 2), ("testing", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pportOperStatus.setStatus('mandatory')
pportDs1LineType = MibTableColumn((1, 3, 6, 1, 4, 1, 277, 1, 4, 2, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9))).clone(namedValues=NamedValues(("d4", 1), ("esf-ansi", 2), ("esf-att-address-a", 3), ("esf-none", 4), ("e1-cas-crc4", 5), ("e1-cas-no-crc4", 6), ("e1-no-cas-crc4", 7), ("e1-no-cas-no-crc4", 8), ("esf-att-address-b", 9)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pportDs1LineType.setStatus('mandatory')
pportDs1ZeroCoding = MibTableColumn((1, 3, 6, 1, 4, 1, 277, 1, 4, 2, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("ami", 1), ("b8zs", 2), ("hdb3", 3), ("jammed-bit", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pportDs1ZeroCoding.setStatus('mandatory')
pportDs1LineBuildout = MibTableColumn((1, 3, 6, 1, 4, 1, 277, 1, 4, 2, 1, 13), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pportDs1LineBuildout.setStatus('mandatory')
pportDiagTestId = MibTableColumn((1, 3, 6, 1, 4, 1, 277, 1, 4, 2, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 5, 6, 7, 11, 12, 13, 14))).clone(namedValues=NamedValues(("v35-sca-local-loopback", 1), ("v35-sca-remote-loopback", 2), ("v35-csu-loopback", 3), ("hssi-local-dte-loopback", 5), ("hssi-local-line", 6), ("hssi-remote-line-loopback", 7), ("ds1-framer-local-loopback", 11), ("ds1-line-local-loopback", 12), ("ds1-framer-remote-loopback", 13), ("ds1-line-remote-loopback", 14)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pportDiagTestId.setStatus('mandatory')
pportDiagTestRuns = MibTableColumn((1, 3, 6, 1, 4, 1, 277, 1, 4, 2, 1, 15), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pportDiagTestRuns.setStatus('mandatory')
pportInOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 277, 1, 4, 2, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pportInOctets.setStatus('mandatory')
pportInFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 277, 1, 4, 2, 1, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pportInFrames.setStatus('mandatory')
pportInDiscards = MibTableColumn((1, 3, 6, 1, 4, 1, 277, 1, 4, 2, 1, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pportInDiscards.setStatus('mandatory')
pportInErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 277, 1, 4, 2, 1, 19), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pportInErrors.setStatus('mandatory')
pportOutOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 277, 1, 4, 2, 1, 20), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pportOutOctets.setStatus('mandatory')
pportOutFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 277, 1, 4, 2, 1, 21), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pportOutFrames.setStatus('mandatory')
pportOutDiscards = MibTableColumn((1, 3, 6, 1, 4, 1, 277, 1, 4, 2, 1, 22), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pportOutDiscards.setStatus('mandatory')
pportOutErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 277, 1, 4, 2, 1, 23), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pportOutErrors.setStatus('mandatory')
pportDiagState = MibTableColumn((1, 3, 6, 1, 4, 1, 277, 1, 4, 2, 1, 24), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("active", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pportDiagState.setStatus('mandatory')
pportDiagOptionStr = MibTableColumn((1, 3, 6, 1, 4, 1, 277, 1, 4, 2, 1, 25), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pportDiagOptionStr.setStatus('mandatory')
pportDiagPassCount = MibTableColumn((1, 3, 6, 1, 4, 1, 277, 1, 4, 2, 1, 26), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pportDiagPassCount.setStatus('mandatory')
pportDiagFailCount = MibTableColumn((1, 3, 6, 1, 4, 1, 277, 1, 4, 2, 1, 27), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pportDiagFailCount.setStatus('mandatory')
pportDiagResultStr = MibTableColumn((1, 3, 6, 1, 4, 1, 277, 1, 4, 2, 1, 28), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pportDiagResultStr.setStatus('mandatory')
pportLinkDownReason = MibTableColumn((1, 3, 6, 1, 4, 1, 277, 1, 4, 2, 1, 29), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 4, 8, 16, 64, 128, 256, 512, 1024, 2048, 4096, 8192, 16384, 32768, 65536))).clone(namedValues=NamedValues(("red-alarm", 1), ("yellow-alarm", 2), ("blue-alarm", 4), ("carrier-loss", 8), ("looped-back", 16), ("ber-threshold", 64), ("signal-label-mismatch", 128), ("loss-of-signal", 256), ("loss-of-frame", 512), ("loss-of-cell-delination", 1024), ("line-AIS", 2048), ("path-AIS", 4096), ("loss-of-pointer", 8192), ("line-RFI", 16384), ("path-RFI", 32768), ("signal-label-undefined", 65536)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pportLinkDownReason.setStatus('mandatory')
pportInterface = MibTableColumn((1, 3, 6, 1, 4, 1, 277, 1, 4, 2, 1, 30), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13))).clone(namedValues=NamedValues(("eia449", 1), ("x21", 2), ("eia530", 3), ("eia530A", 4), ("v35", 5), ("e1-coax", 6), ("e1-db", 7), ("none", 8), ("v24", 9), ("sonet", 10), ("sdh", 11), ("multi-mode", 12), ("single-mode", 13)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pportInterface.setStatus('mandatory')
pportAdminInterface = MibTableColumn((1, 3, 6, 1, 4, 1, 277, 1, 4, 2, 1, 31), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13))).clone(namedValues=NamedValues(("eia449", 1), ("x21", 2), ("eia530", 3), ("eia530A", 4), ("v35", 5), ("e1-coax", 6), ("e1-db", 7), ("none", 8), ("v24", 9), ("sonet", 10), ("sdh", 11), ("multi-mode", 12), ("single-mode", 13)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pportAdminInterface.setStatus('mandatory')
pportCellScramble = MibTableColumn((1, 3, 6, 1, 4, 1, 277, 1, 4, 2, 1, 32), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pportCellScramble.setStatus('mandatory')
pportCbitParity = MibTableColumn((1, 3, 6, 1, 4, 1, 277, 1, 4, 2, 1, 33), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pportCbitParity.setStatus('mandatory')
pportMaxBufferSize = MibTableColumn((1, 3, 6, 1, 4, 1, 277, 1, 4, 2, 1, 34), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pportMaxBufferSize.setStatus('mandatory')
pportPeakCellRate0 = MibTableColumn((1, 3, 6, 1, 4, 1, 277, 1, 4, 2, 1, 35), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pportPeakCellRate0.setStatus('mandatory')
pportPeakCellRate1 = MibTableColumn((1, 3, 6, 1, 4, 1, 277, 1, 4, 2, 1, 36), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pportPeakCellRate1.setStatus('mandatory')
pportPeakCellRate2 = MibTableColumn((1, 3, 6, 1, 4, 1, 277, 1, 4, 2, 1, 37), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pportPeakCellRate2.setStatus('mandatory')
pportPeakCellRate3 = MibTableColumn((1, 3, 6, 1, 4, 1, 277, 1, 4, 2, 1, 38), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pportPeakCellRate3.setStatus('mandatory')
pportPeakCellRate4 = MibTableColumn((1, 3, 6, 1, 4, 1, 277, 1, 4, 2, 1, 39), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pportPeakCellRate4.setStatus('mandatory')
pportPeakCellRate5 = MibTableColumn((1, 3, 6, 1, 4, 1, 277, 1, 4, 2, 1, 40), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pportPeakCellRate5.setStatus('mandatory')
pportPeakCellRate6 = MibTableColumn((1, 3, 6, 1, 4, 1, 277, 1, 4, 2, 1, 41), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pportPeakCellRate6.setStatus('mandatory')
pportPeakCellRate7 = MibTableColumn((1, 3, 6, 1, 4, 1, 277, 1, 4, 2, 1, 42), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pportPeakCellRate7.setStatus('mandatory')
pportInCells = MibTableColumn((1, 3, 6, 1, 4, 1, 277, 1, 4, 2, 1, 43), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pportInCells.setStatus('mandatory')
pportInErrorCells = MibTableColumn((1, 3, 6, 1, 4, 1, 277, 1, 4, 2, 1, 44), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pportInErrorCells.setStatus('mandatory')
pportOutCells = MibTableColumn((1, 3, 6, 1, 4, 1, 277, 1, 4, 2, 1, 45), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pportOutCells.setStatus('mandatory')
pportDs3LineBuildout = MibTableColumn((1, 3, 6, 1, 4, 1, 277, 1, 4, 2, 1, 46), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pportDs3LineBuildout.setStatus('mandatory')
pportSetDS0LoopUp = MibTableColumn((1, 3, 6, 1, 4, 1, 277, 1, 4, 2, 1, 47), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pportSetDS0LoopUp.setStatus('mandatory')
pportSetDS0LoopDown = MibTableColumn((1, 3, 6, 1, 4, 1, 277, 1, 4, 2, 1, 48), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pportSetDS0LoopDown.setStatus('mandatory')
pportDS0LoopUpStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 277, 1, 4, 2, 1, 49), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pportDS0LoopUpStatus.setStatus('mandatory')
pportDS0LoopDownStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 277, 1, 4, 2, 1, 50), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pportDS0LoopDownStatus.setStatus('mandatory')
pportDS0LoopStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 277, 1, 4, 2, 1, 51), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pportDS0LoopStatus.setStatus('mandatory')
pportISDN = MibTableColumn((1, 3, 6, 1, 4, 1, 277, 1, 4, 2, 1, 52), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pportISDN.setStatus('mandatory')
pportdsx3LoopbackConfig = MibTableColumn((1, 3, 6, 1, 4, 1, 277, 1, 4, 2, 1, 53), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("dsx3NoLoop", 1), ("dsx3PayloadLoop", 2), ("dsx3LineLoop", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pportdsx3LoopbackConfig.setStatus('mandatory')
pportdsx3SendCode = MibTableColumn((1, 3, 6, 1, 4, 1, 277, 1, 4, 2, 1, 54), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 4))).clone(namedValues=NamedValues(("dsx3SendNoCode", 1), ("dsx3SendLineCode", 2), ("dsx3SendResetCode", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pportdsx3SendCode.setStatus('mandatory')
pportdsx3LoopStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 277, 1, 4, 2, 1, 55), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("noloop", 1), ("payloadloop", 2), ("lineloop", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pportdsx3LoopStatus.setStatus('mandatory')
pportdsx3FEACStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 277, 1, 4, 2, 1, 56), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pportdsx3FEACStatus.setStatus('mandatory')
pportds1LoopbackConfig = MibTableColumn((1, 3, 6, 1, 4, 1, 277, 1, 4, 2, 1, 57), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("ds1NoLoop", 1), ("ds1PayloadLoop", 2), ("ds1LineLoop", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pportds1LoopbackConfig.setStatus('mandatory')
pportds1SendCode = MibTableColumn((1, 3, 6, 1, 4, 1, 277, 1, 4, 2, 1, 58), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9))).clone(namedValues=NamedValues(("ds1SendNoCode", 1), ("ds1SendFramedInbandLineActuateLoop", 2), ("ds1SendFramedInbandLineReleaseLoop", 3), ("ds1SendUnframedInbandLineActuateLoop", 4), ("ds1SendUnframedInbandLineReleaseLoop", 5), ("ds1SendFdlESFAnsiLineActuateLoop", 6), ("ds1SendFdlESFAnsiLineReleaseLoop", 7), ("ds1SendFdlESFAnsiPayloadActuateLoop", 8), ("ds1SendFdlESFAnsiPayloadReleaseLoop", 9)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pportds1SendCode.setStatus('mandatory')
pportds1LoopStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 277, 1, 4, 2, 1, 59), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("noloop", 1), ("payloadloop", 2), ("lineloop", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pportds1LoopStatus.setStatus('mandatory')
pportSetClkBkup = MibTableColumn((1, 3, 6, 1, 4, 1, 277, 1, 4, 2, 1, 60), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("internalClkBkup", 1), ("looptimedClkBkup", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pportSetClkBkup.setStatus('mandatory')
pportAtmIdleWord = MibTableColumn((1, 3, 6, 1, 4, 1, 277, 1, 4, 2, 1, 61), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pportAtmIdleWord.setStatus('mandatory')
pportAtmDisCardMode = MibTableColumn((1, 3, 6, 1, 4, 1, 277, 1, 4, 2, 1, 62), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("ansiInval", 1), ("ansiUnassignedInval", 2), ("atmFInvalid", 3), ("atmFUnassignedInval", 4), ("ccittIdle", 5), ("ccittUnassignedIdle", 6)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pportAtmDisCardMode.setStatus('mandatory')
pportAtmLastUnconfiguredVpi = MibTableColumn((1, 3, 6, 1, 4, 1, 277, 1, 4, 2, 1, 63), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pportAtmLastUnconfiguredVpi.setStatus('mandatory')
pportAtmLastUnconfiguredVci = MibTableColumn((1, 3, 6, 1, 4, 1, 277, 1, 4, 2, 1, 64), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pportAtmLastUnconfiguredVci.setStatus('mandatory')
pportAtmUnconfiguredCells = MibTableColumn((1, 3, 6, 1, 4, 1, 277, 1, 4, 2, 1, 65), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pportAtmUnconfiguredCells.setStatus('mandatory')
pportAtmNumBitsVCI = MibTableColumn((1, 3, 6, 1, 4, 1, 277, 1, 4, 2, 1, 66), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pportAtmNumBitsVCI.setStatus('mandatory')
pportAtmNumBitsVPI = MibTableColumn((1, 3, 6, 1, 4, 1, 277, 1, 4, 2, 1, 67), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pportAtmNumBitsVPI.setStatus('mandatory')
pportAtmInterfaceType = MibTableColumn((1, 3, 6, 1, 4, 1, 277, 1, 4, 2, 1, 68), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("uni", 1), ("nni", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pportAtmInterfaceType.setStatus('mandatory')
pportSonetSDHLoopbackConfig = MibTableColumn((1, 3, 6, 1, 4, 1, 277, 1, 4, 2, 1, 69), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("noLoop", 1), ("lineLoop", 2), ("diagnosticsLoop", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pportSonetSDHLoopbackConfig.setStatus('mandatory')
pportSonetSDHLoopStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 277, 1, 4, 2, 1, 70), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("noLoop", 1), ("lineLoop", 2), ("diagnosticsLoop", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pportSonetSDHLoopStatus.setStatus('mandatory')
pportOutDiscardsCell = MibTableColumn((1, 3, 6, 1, 4, 1, 277, 1, 4, 2, 1, 71), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pportOutDiscardsCell.setStatus('mandatory')
pportAtmPlcp = MibTableColumn((1, 3, 6, 1, 4, 1, 277, 1, 4, 2, 1, 72), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pportAtmPlcp.setStatus('mandatory')
pportCbrTargetClockMode = MibTableColumn((1, 3, 6, 1, 4, 1, 277, 1, 4, 2, 1, 73), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pportCbrTargetClockMode.setStatus('mandatory')
pportCbrCurrentClockMode = MibTableColumn((1, 3, 6, 1, 4, 1, 277, 1, 4, 2, 1, 74), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pportCbrCurrentClockMode.setStatus('mandatory')
pportClockMasterChannel = MibTableColumn((1, 3, 6, 1, 4, 1, 277, 1, 4, 2, 1, 75), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pportClockMasterChannel.setStatus('mandatory')
pportFibreType = MibTableColumn((1, 3, 6, 1, 4, 1, 277, 1, 4, 2, 1, 76), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(4, 2))).clone(namedValues=NamedValues(("sonetMultiMode", 4), ("sonetShortSingleMode", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pportFibreType.setStatus('mandatory')
pportLaserStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 277, 1, 4, 2, 1, 77), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("off", 1), ("on", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pportLaserStatus.setStatus('mandatory')
pportMaxActiveVpiBits = MibTableColumn((1, 3, 6, 1, 4, 1, 277, 1, 4, 2, 1, 78), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 12))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pportMaxActiveVpiBits.setStatus('mandatory')
pportBipErrorsThresh = MibTableColumn((1, 3, 6, 1, 4, 1, 277, 1, 4, 2, 1, 79), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pportBipErrorsThresh.setStatus('mandatory')
pportBipSectionErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 277, 1, 4, 2, 1, 80), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pportBipSectionErrors.setStatus('mandatory')
pportBipLineErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 277, 1, 4, 2, 1, 81), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pportBipLineErrors.setStatus('mandatory')
pportBipPathErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 277, 1, 4, 2, 1, 82), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pportBipPathErrors.setStatus('mandatory')
pportFebeErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 277, 1, 4, 2, 1, 83), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pportFebeErrors.setStatus('mandatory')
pportHcsErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 277, 1, 4, 2, 1, 84), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pportHcsErrors.setStatus('mandatory')
pportHcsSevereErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 277, 1, 4, 2, 1, 85), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pportHcsSevereErrors.setStatus('mandatory')
pportCongestedReceivedCells = MibTableColumn((1, 3, 6, 1, 4, 1, 277, 1, 4, 2, 1, 86), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pportCongestedReceivedCells.setStatus('mandatory')
pportCongestedTransmittedCells = MibTableColumn((1, 3, 6, 1, 4, 1, 277, 1, 4, 2, 1, 87), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pportCongestedTransmittedCells.setStatus('mandatory')
pportAtmLayerErroredReceivedCells = MibTableColumn((1, 3, 6, 1, 4, 1, 277, 1, 4, 2, 1, 88), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pportAtmLayerErroredReceivedCells.setStatus('mandatory')
pportAtmLayerErroredTransmittedCells = MibTableColumn((1, 3, 6, 1, 4, 1, 277, 1, 4, 2, 1, 89), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pportAtmLayerErroredTransmittedCells.setStatus('mandatory')
pportDS0BitStuff = MibTableColumn((1, 3, 6, 1, 4, 1, 277, 1, 4, 2, 1, 90), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pportDS0BitStuff.setStatus('mandatory')
pportDS0BitErrorCount = MibTableColumn((1, 3, 6, 1, 4, 1, 277, 1, 4, 2, 1, 91), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pportDS0BitErrorCount.setStatus('mandatory')
pportDS0BitErrorFreeSeconds = MibTableColumn((1, 3, 6, 1, 4, 1, 277, 1, 4, 2, 1, 92), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pportDS0BitErrorFreeSeconds.setStatus('mandatory')
pportDS0BitErroredSeconds = MibTableColumn((1, 3, 6, 1, 4, 1, 277, 1, 4, 2, 1, 93), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pportDS0BitErroredSeconds.setStatus('mandatory')
pportDS0MidspanRepeaters = MibTableColumn((1, 3, 6, 1, 4, 1, 277, 1, 4, 2, 1, 94), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pportDS0MidspanRepeaters.setStatus('mandatory')
pportDS0TestPatternSync = MibTableColumn((1, 3, 6, 1, 4, 1, 277, 1, 4, 2, 1, 95), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pportDS0TestPatternSync.setStatus('mandatory')
pportDS0InjectBitError = MibTableColumn((1, 3, 6, 1, 4, 1, 277, 1, 4, 2, 1, 96), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pportDS0InjectBitError.setStatus('mandatory')
pportDS0FarendLpbkType = MibTableColumn((1, 3, 6, 1, 4, 1, 277, 1, 4, 2, 1, 97), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pportDS0FarendLpbkType.setStatus('mandatory')
pportDS0LpbkMode = MibTableColumn((1, 3, 6, 1, 4, 1, 277, 1, 4, 2, 1, 98), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pportDS0LpbkMode.setStatus('mandatory')
pportDS0SwitchLpbkStart = MibTableColumn((1, 3, 6, 1, 4, 1, 277, 1, 4, 2, 1, 99), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pportDS0SwitchLpbkStart.setStatus('mandatory')
pportDS0SwitchLpbkEnd = MibTableColumn((1, 3, 6, 1, 4, 1, 277, 1, 4, 2, 1, 100), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pportDS0SwitchLpbkEnd.setStatus('mandatory')
pportDS0FarendDS0InLpbk = MibTableColumn((1, 3, 6, 1, 4, 1, 277, 1, 4, 2, 1, 101), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pportDS0FarendDS0InLpbk.setStatus('mandatory')
pportDS0SendTestTraffic = MibTableColumn((1, 3, 6, 1, 4, 1, 277, 1, 4, 2, 1, 102), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pportDS0SendTestTraffic.setStatus('mandatory')
pportOc3LoopConfig = MibTableColumn((1, 3, 6, 1, 4, 1, 277, 1, 4, 2, 1, 103), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("oc3NoLoop", 1), ("oc3AtmLoop", 2), ("oc3SerPhyLoop", 3), ("oc3ParPhyLoop", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pportOc3LoopConfig.setStatus('mandatory')
pportOc3LoopStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 277, 1, 4, 2, 1, 104), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("oc3NoLoop", 1), ("oc3AtmLoop", 2), ("oc3SerPhyLoop", 3), ("oc3ParPhyLoop", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pportOc3LoopStatus.setStatus('mandatory')
pportISDNIpBaseAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 277, 1, 4, 2, 1, 105), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pportISDNIpBaseAddr.setStatus('mandatory')
pportSonetSTM1Scramble = MibTableColumn((1, 3, 6, 1, 4, 1, 277, 1, 4, 2, 1, 106), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pportSonetSTM1Scramble.setStatus('mandatory')
pportEFCIMarking = MibTableColumn((1, 3, 6, 1, 4, 1, 277, 1, 4, 2, 1, 107), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pportEFCIMarking.setStatus('mandatory')
pportAtmQOSTransmitMode = MibTableColumn((1, 3, 6, 1, 4, 1, 277, 1, 4, 2, 1, 108), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("fix-priority", 1), ("weighted-round-robin", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pportAtmQOSTransmitMode.setStatus('mandatory')
pportHECMode = MibTableColumn((1, 3, 6, 1, 4, 1, 277, 1, 4, 2, 1, 109), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pportHECMode.setStatus('mandatory')
pportISDNChannelStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 277, 1, 4, 2, 1, 110), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pportISDNChannelStatus.setStatus('mandatory')
pportds1FarEndLoopStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 277, 1, 4, 2, 1, 111), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("fe-noloop", 1), ("fe-line-loop", 2), ("fe-payload-loop", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pportds1FarEndLoopStatus.setStatus('mandatory')
pportds1FDLControl = MibTableColumn((1, 3, 6, 1, 4, 1, 277, 1, 4, 2, 1, 112), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pportds1FDLControl.setStatus('mandatory')
pportds1FDLPrmXmit = MibTableColumn((1, 3, 6, 1, 4, 1, 277, 1, 4, 2, 1, 113), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pportds1FDLPrmXmit.setStatus('mandatory')
pportds1FDLPidXmit = MibTableColumn((1, 3, 6, 1, 4, 1, 277, 1, 4, 2, 1, 114), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pportds1FDLPidXmit.setStatus('mandatory')
pportds1FDLXmitPid = MibTableColumn((1, 3, 6, 1, 4, 1, 277, 1, 4, 2, 1, 115), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pportds1FDLXmitPid.setStatus('mandatory')
pportds1FDLRcvPid = MibTableColumn((1, 3, 6, 1, 4, 1, 277, 1, 4, 2, 1, 116), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pportds1FDLRcvPid.setStatus('mandatory')
pportds1FDLRcvTsid = MibTableColumn((1, 3, 6, 1, 4, 1, 277, 1, 4, 2, 1, 117), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pportds1FDLRcvTsid.setStatus('mandatory')
pportSonetSDHFramingMode = MibTableColumn((1, 3, 6, 1, 4, 1, 277, 1, 4, 2, 1, 118), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("sonet", 1), ("sdh", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pportSonetSDHFramingMode.setStatus('mandatory')
pportds1InbandLoopType = MibTableColumn((1, 3, 6, 1, 4, 1, 277, 1, 4, 2, 1, 119), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("ds1CSU", 1), ("ds1NI", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pportds1InbandLoopType.setStatus('mandatory')
pportESFDataLinkStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 277, 1, 4, 2, 1, 120), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("inService", 1), ("outOfService", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pportESFDataLinkStatus.setStatus('mandatory')
pportPMTcaId = MibTableColumn((1, 3, 6, 1, 4, 1, 277, 1, 4, 2, 1, 121), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48))).clone(namedValues=NamedValues(("currentThresholdCVL", 1), ("currentThresholdESL", 2), ("currentThresholdSESL", 3), ("currentThresholdUASL", 4), ("currentThresholdCVP", 5), ("currentThresholdESP", 6), ("currentThresholdSESP", 7), ("currentThresholdSASP", 8), ("currentThresholdCSSP", 9), ("currentThresholdUASP", 10), ("currentThresholdCVS", 11), ("currentThresholdESS", 12), ("currentThresholdSESS", 13), ("currentThresholdESx", 14), ("dayThresholdCVL", 15), ("dayThresholdESL", 16), ("dayThresholdSESL", 17), ("dayThresholdUASL", 18), ("dayThresholdCVP", 19), ("dayThresholdESP", 20), ("dayThresholdSESP", 21), ("dayThresholdSASP", 22), ("dayThresholdCSSP", 23), ("dayThresholdUASP", 24), ("dayThresholdCVS", 25), ("dayThresholdESS", 26), ("dayThresholdSESS", 27), ("dayThresholdESx", 28), ("currentThresholdCVCPP", 29), ("currentThresholdESCPP", 30), ("currentThresholdSESCPP", 31), ("currentThresholdSASCPP", 32), ("currentThresholdUASCPP", 33), ("dayThresholdCVCPP", 34), ("dayThresholdESCPP", 35), ("dayThresholdSESCPP", 36), ("dayThresholdSASCPP", 37), ("dayThresholdUASCPP", 38), ("currentThresholdCVCPPFE", 39), ("currentThresholdESCPPFE", 40), ("currentThresholdSESCPPFE", 41), ("currentThresholdSASCPPFE", 42), ("currentThresholdUASCPPFE", 43), ("dayThresholdCVCPPFE", 44), ("dayThresholdESCPPFE", 45), ("dayThresholdSESCPPFE", 46), ("dayThresholdSASCPPFE", 47), ("dayThresholdUASCPPFE", 48)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pportPMTcaId.setStatus('mandatory')
pportBchanTimerValue = MibTableColumn((1, 3, 6, 1, 4, 1, 277, 1, 4, 2, 1, 122), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pportBchanTimerValue.setStatus('mandatory')
pportAAL5CRC32Error = MibTableColumn((1, 3, 6, 1, 4, 1, 277, 1, 4, 2, 1, 123), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pportAAL5CRC32Error.setStatus('mandatory')
pportAAL5CPIError = MibTableColumn((1, 3, 6, 1, 4, 1, 277, 1, 4, 2, 1, 124), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pportAAL5CPIError.setStatus('mandatory')
pportAAL5LengthError = MibTableColumn((1, 3, 6, 1, 4, 1, 277, 1, 4, 2, 1, 125), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pportAAL5LengthError.setStatus('mandatory')
pportAAL5ReassemblyTimerError = MibTableColumn((1, 3, 6, 1, 4, 1, 277, 1, 4, 2, 1, 126), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pportAAL5ReassemblyTimerError.setStatus('mandatory')
pportAAL5MaxNrSegError = MibTableColumn((1, 3, 6, 1, 4, 1, 277, 1, 4, 2, 1, 127), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pportAAL5MaxNrSegError.setStatus('mandatory')
pportRedundancyArch = MibTableColumn((1, 3, 6, 1, 4, 1, 277, 1, 4, 2, 1, 128), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("disabled", 1), ("aps-intracard", 2), ("aps-with-resilient-uni", 3), ("aps-with-trunk-backup", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pportRedundancyArch.setStatus('mandatory')
pportAPSadminDir = MibTableColumn((1, 3, 6, 1, 4, 1, 277, 1, 4, 2, 1, 129), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("uni-directional", 1), ("bi-directional", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pportAPSadminDir.setStatus('mandatory')
pportAPSlineType = MibTableColumn((1, 3, 6, 1, 4, 1, 277, 1, 4, 2, 1, 130), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("working-line", 1), ("protection-line", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pportAPSlineType.setStatus('mandatory')
pportAPSrevertiveMode = MibTableColumn((1, 3, 6, 1, 4, 1, 277, 1, 4, 2, 1, 131), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("revertive", 1), ("nonrevertive", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pportAPSrevertiveMode.setStatus('mandatory')
pportAPSpairedSlotId = MibTableColumn((1, 3, 6, 1, 4, 1, 277, 1, 4, 2, 1, 132), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pportAPSpairedSlotId.setStatus('mandatory')
pportAPSpairedPportId = MibTableColumn((1, 3, 6, 1, 4, 1, 277, 1, 4, 2, 1, 133), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pportAPSpairedPportId.setStatus('mandatory')
pportAPSsfBerThresh = MibTableColumn((1, 3, 6, 1, 4, 1, 277, 1, 4, 2, 1, 134), Integer32().subtype(subtypeSpec=ValueRangeConstraint(3, 5))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pportAPSsfBerThresh.setStatus('mandatory')
pportAPSsdBerThresh = MibTableColumn((1, 3, 6, 1, 4, 1, 277, 1, 4, 2, 1, 135), Integer32().subtype(subtypeSpec=ValueRangeConstraint(6, 9))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pportAPSsdBerThresh.setStatus('mandatory')
pportAPSwtrPeriod = MibTableColumn((1, 3, 6, 1, 4, 1, 277, 1, 4, 2, 1, 136), Integer32().subtype(subtypeSpec=ValueRangeConstraint(5, 12))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pportAPSwtrPeriod.setStatus('mandatory')
pportAPSprotectionLineState = MibTableColumn((1, 3, 6, 1, 4, 1, 277, 1, 4, 2, 1, 137), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("released", 1), ("selected", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pportAPSprotectionLineState.setStatus('mandatory')
pportAPSxCommand = MibTableColumn((1, 3, 6, 1, 4, 1, 277, 1, 4, 2, 1, 138), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("clear", 1), ("lockout-protection", 2), ("forced-switch-w-to-p", 3), ("forced-switch-p-to-w", 4), ("manual-switch-w-to-p", 5), ("manual-switch-p-to-w", 6), ("exercise", 7)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pportAPSxCommand.setStatus('mandatory')
pportAPSconfigStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 277, 1, 4, 2, 1, 139), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("not-configured", 1), ("valid", 2), ("invalid", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pportAPSconfigStatus.setStatus('mandatory')
pportAPSOperRxStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 277, 1, 4, 2, 1, 140), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("up", 1), ("down", 2), ("testing", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pportAPSOperRxStatus.setStatus('mandatory')
pportBertPattern = MibTableColumn((1, 3, 6, 1, 4, 1, 277, 1, 4, 2, 1, 141), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11))).clone(namedValues=NamedValues(("allZeros", 1), ("allOnes", 2), ("oneZero", 3), ("oneOneZeroZero", 4), ("oneOf8", 5), ("threeOf24", 6), ("qRSS", 7), ("user1Byte", 8), ("user2Byte", 9), ("user3Byte", 10), ("user4Byte", 11)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pportBertPattern.setStatus('mandatory')
pportBertUserBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 277, 1, 4, 2, 1, 142), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pportBertUserBytes.setStatus('mandatory')
pportBertErrorRate = MibTableColumn((1, 3, 6, 1, 4, 1, 277, 1, 4, 2, 1, 143), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("none", 1), ("tenMinusThree", 2), ("tenMinusSix", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pportBertErrorRate.setStatus('mandatory')
pportBertCommand = MibTableColumn((1, 3, 6, 1, 4, 1, 277, 1, 4, 2, 1, 144), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("start", 1), ("stop", 2), ("clearCounters", 3), ("injectError", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pportBertCommand.setStatus('mandatory')
pportBertStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 277, 1, 4, 2, 1, 145), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("unused", 1), ("unavailable", 2), ("outOfFrame", 3), ("inFrame", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pportBertStatus.setStatus('mandatory')
pportBertBitCount = MibTableColumn((1, 3, 6, 1, 4, 1, 277, 1, 4, 2, 1, 146), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pportBertBitCount.setStatus('mandatory')
pportBertErrorCount = MibTableColumn((1, 3, 6, 1, 4, 1, 277, 1, 4, 2, 1, 147), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pportBertErrorCount.setStatus('mandatory')
pportds1FELoopbackControl = MibTableColumn((1, 3, 6, 1, 4, 1, 277, 1, 4, 2, 1, 148), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pportds1FELoopbackControl.setStatus('mandatory')
pportFT1DS0s = MibTableColumn((1, 3, 6, 1, 4, 1, 277, 1, 4, 2, 1, 149), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pportFT1DS0s.setStatus('mandatory')
pportIMUXCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 277, 1, 4, 2, 1, 150), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pportIMUXCnt.setStatus('mandatory')
pportds1PMConfigThresh = MibTableColumn((1, 3, 6, 1, 4, 1, 277, 1, 4, 2, 1, 151), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("rfc1406", 1), ("itu-g826", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pportds1PMConfigThresh.setStatus('mandatory')
pportIdleCellType = MibTableColumn((1, 3, 6, 1, 4, 1, 277, 1, 4, 2, 1, 152), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("atmforum", 1), ("itu", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pportIdleCellType.setStatus('mandatory')
pportATMTcaInHECErrorUAlertPeriod = MibTableColumn((1, 3, 6, 1, 4, 1, 277, 1, 4, 2, 1, 153), Integer32().clone(15)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pportATMTcaInHECErrorUAlertPeriod.setStatus('mandatory')
pportATMTcaInHECErrorUThresh = MibTableColumn((1, 3, 6, 1, 4, 1, 277, 1, 4, 2, 1, 154), Integer32().clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pportATMTcaInHECErrorUThresh.setStatus('mandatory')
pportATMTcaEBufOverflowCBRAlertPeriod = MibTableColumn((1, 3, 6, 1, 4, 1, 277, 1, 4, 2, 1, 155), Integer32().clone(15)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pportATMTcaEBufOverflowCBRAlertPeriod.setStatus('mandatory')
pportATMTcaEBufOverflowCBRThresh = MibTableColumn((1, 3, 6, 1, 4, 1, 277, 1, 4, 2, 1, 156), Integer32().clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pportATMTcaEBufOverflowCBRThresh.setStatus('mandatory')
pportATMTcaEBufOverflowABRAlertPeriod = MibTableColumn((1, 3, 6, 1, 4, 1, 277, 1, 4, 2, 1, 157), Integer32().clone(15)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pportATMTcaEBufOverflowABRAlertPeriod.setStatus('mandatory')
pportATMTcaEBufOverflowABRThresh = MibTableColumn((1, 3, 6, 1, 4, 1, 277, 1, 4, 2, 1, 158), Integer32().clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pportATMTcaEBufOverflowABRThresh.setStatus('mandatory')
pportATMTcaEBufOverflowVBR1AlertPeriod = MibTableColumn((1, 3, 6, 1, 4, 1, 277, 1, 4, 2, 1, 159), Integer32().clone(15)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pportATMTcaEBufOverflowVBR1AlertPeriod.setStatus('mandatory')
pportATMTcaEBufOverflowVBR1Thresh = MibTableColumn((1, 3, 6, 1, 4, 1, 277, 1, 4, 2, 1, 160), Integer32().clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pportATMTcaEBufOverflowVBR1Thresh.setStatus('mandatory')
pportATMTcaEBufOverflowVBR2AlertPeriod = MibTableColumn((1, 3, 6, 1, 4, 1, 277, 1, 4, 2, 1, 161), Integer32().clone(15)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pportATMTcaEBufOverflowVBR2AlertPeriod.setStatus('mandatory')
pportATMTcaEBufOverflowVBR2Thresh = MibTableColumn((1, 3, 6, 1, 4, 1, 277, 1, 4, 2, 1, 162), Integer32().clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pportATMTcaEBufOverflowVBR2Thresh.setStatus('mandatory')
pportATMTcaInFramerFIFOOverflowAlertPeriod = MibTableColumn((1, 3, 6, 1, 4, 1, 277, 1, 4, 2, 1, 163), Integer32().clone(15)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pportATMTcaInFramerFIFOOverflowAlertPeriod.setStatus('mandatory')
pportATMTcaInFramerFIFOOverflowThresh = MibTableColumn((1, 3, 6, 1, 4, 1, 277, 1, 4, 2, 1, 164), Integer32().clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pportATMTcaInFramerFIFOOverflowThresh.setStatus('mandatory')
pportATMTcaELookupFailureAlertPeriod = MibTableColumn((1, 3, 6, 1, 4, 1, 277, 1, 4, 2, 1, 165), Integer32().clone(15)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pportATMTcaELookupFailureAlertPeriod.setStatus('mandatory')
pportATMTcaELookupFailureThresh = MibTableColumn((1, 3, 6, 1, 4, 1, 277, 1, 4, 2, 1, 166), Integer32().clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pportATMTcaELookupFailureThresh.setStatus('mandatory')
pportATMTcaEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 277, 1, 4, 2, 1, 167), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pportATMTcaEnable.setStatus('mandatory')
pportATMTcaId = MibTableColumn((1, 3, 6, 1, 4, 1, 277, 1, 4, 2, 1, 168), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("ingressHECErrorUThresholdC", 1), ("egressCBRBufferOverflowC", 2), ("egressABRBufferOverflowC", 3), ("egressVBR1BufferOverflowC", 4), ("egressVBR2BufferOverflowC", 5), ("ingressFramerFIFOOverflowC", 6), ("egressLookupFailureC", 7)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pportATMTcaId.setStatus('mandatory')
pportFethAdminMacAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 277, 1, 4, 2, 1, 169), OctetString().subtype(subtypeSpec=ValueSizeConstraint(6, 6)).setFixedLength(6)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pportFethAdminMacAddr.setStatus('mandatory')
pportFethOperMacAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 277, 1, 4, 2, 1, 170), OctetString().subtype(subtypeSpec=ValueSizeConstraint(6, 6)).setFixedLength(6)).setMaxAccess("readonly")
if mibBuilder.loadTexts: pportFethOperMacAddr.setStatus('mandatory')
pportConfigAlarmSoakTime = MibTableColumn((1, 3, 6, 1, 4, 1, 277, 1, 4, 2, 1, 171), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pportConfigAlarmSoakTime.setStatus('mandatory')
pportConfigAlarmClearTime = MibTableColumn((1, 3, 6, 1, 4, 1, 277, 1, 4, 2, 1, 172), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pportConfigAlarmClearTime.setStatus('mandatory')
pportFethPortCapability = MibTableColumn((1, 3, 6, 1, 4, 1, 277, 1, 4, 2, 1, 173), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("fullDuplex100Mbps", 1), ("halfDuplex100Mbps", 2), ("fullDuplex10Mbps", 3), ("halfDuplex10Mbps", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pportFethPortCapability.setStatus('mandatory')
pportVpshapingDiscardCellCount = MibTableColumn((1, 3, 6, 1, 4, 1, 277, 1, 4, 2, 1, 174), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pportVpshapingDiscardCellCount.setStatus('mandatory')
pportTrafficShaperTable = MibTable((1, 3, 6, 1, 4, 1, 277, 1, 4, 3), )
if mibBuilder.loadTexts: pportTrafficShaperTable.setStatus('mandatory')
pportTrafficShaperEntry = MibTableRow((1, 3, 6, 1, 4, 1, 277, 1, 4, 3, 1), ).setIndexNames((0, "CASCADE-MIB", "pportSlotId"), (0, "CASCADE-MIB", "pportId"), (0, "CASCADE-MIB", "pportTrafficShaperIndex"))
if mibBuilder.loadTexts: pportTrafficShaperEntry.setStatus('mandatory')
pportTrafficShaperIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 277, 1, 4, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pportTrafficShaperIndex.setStatus('mandatory')
pportTrafficShaperPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 277, 1, 4, 3, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 15))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pportTrafficShaperPriority.setStatus('mandatory')
pportTrafficShaperCellRatioDividend = MibTableColumn((1, 3, 6, 1, 4, 1, 277, 1, 4, 3, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pportTrafficShaperCellRatioDividend.setStatus('mandatory')
pportTrafficShaperCellRatioDivisor = MibTableColumn((1, 3, 6, 1, 4, 1, 277, 1, 4, 3, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 16777215))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pportTrafficShaperCellRatioDivisor.setStatus('mandatory')
pportTrafficShaperPeak = MibTableColumn((1, 3, 6, 1, 4, 1, 277, 1, 4, 3, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pportTrafficShaperPeak.setStatus('mandatory')
pportTrafficShaperCredit = MibTableColumn((1, 3, 6, 1, 4, 1, 277, 1, 4, 3, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pportTrafficShaperCredit.setStatus('mandatory')
lportTable = MibTable((1, 3, 6, 1, 4, 1, 277, 1, 5, 1), )
if mibBuilder.loadTexts: lportTable.setStatus('mandatory')
lportEntry = MibTableRow((1, 3, 6, 1, 4, 1, 277, 1, 5, 1, 1), ).setIndexNames((0, "CASCADE-MIB", "lportIfIndex"))
if mibBuilder.loadTexts: lportEntry.setStatus('mandatory')
lportIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 277, 1, 5, 1, 1, 1), Index()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lportIfIndex.setStatus('mandatory')
lportSlotId = MibTableColumn((1, 3, 6, 1, 4, 1, 277, 1, 5, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lportSlotId.setStatus('mandatory')
lportPportId = MibTableColumn((1, 3, 6, 1, 4, 1, 277, 1, 5, 1, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lportPportId.setStatus('mandatory')
lportId = MibTableColumn((1, 3, 6, 1, 4, 1, 277, 1, 5, 1, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lportId.setStatus('mandatory')
lportLink = MibTableColumn((1, 3, 6, 1, 4, 1, 277, 1, 5, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("trk", 1), ("transport", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lportLink.setStatus('mandatory')
lportProtocol = MibTableColumn((1, 3, 6, 1, 4, 1, 277, 1, 5, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 7, 8, 10))).clone(namedValues=NamedValues(("nfr", 1), ("fradPPPto1294", 2), ("smds", 3), ("atm", 4), ("isdndchan", 5), ("dirmgmttrk", 7), ("smdsoptmgmt", 8), ("atmAAL1", 10)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lportProtocol.setStatus('mandatory')
lportSignal = MibTableColumn((1, 3, 6, 1, 4, 1, 277, 1, 5, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("dce", 1), ("dte", 2), ("nni", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lportSignal.setStatus('mandatory')
lportFt1Ds0s = MibTableColumn((1, 3, 6, 1, 4, 1, 277, 1, 5, 1, 1, 8), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lportFt1Ds0s.setStatus('mandatory')
lportGlobalDlci = MibTableColumn((1, 3, 6, 1, 4, 1, 277, 1, 5, 1, 1, 9), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lportGlobalDlci.setStatus('mandatory')
lportDlcmiStd = MibTableColumn((1, 3, 6, 1, 4, 1, 277, 1, 5, 1, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("disabled", 1), ("lmiRev1", 2), ("ansiT1-617-D", 3), ("ccittQ-933-A", 4), ("autodetect", 5), ("ansiT1-617-B", 6)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lportDlcmiStd.setStatus('mandatory')
lportDlciAddrFmt = MibTableColumn((1, 3, 6, 1, 4, 1, 277, 1, 5, 1, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("q922", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lportDlciAddrFmt.setStatus('mandatory')
lportDlciAddrLen = MibTableColumn((1, 3, 6, 1, 4, 1, 277, 1, 5, 1, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("two-octets-10-bits", 1), ("three-octets-10-bits", 2), ("three-octets-16-bits", 3), ("four-octets-17-bits", 4), ("four-octets-23-bits", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lportDlciAddrLen.setStatus('mandatory')
lportMaxFramesize = MibTableColumn((1, 3, 6, 1, 4, 1, 277, 1, 5, 1, 1, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lportMaxFramesize.setStatus('mandatory')
lportDceVerifTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 277, 1, 5, 1, 1, 14), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lportDceVerifTimer.setStatus('mandatory')
lportDceErrorThresh = MibTableColumn((1, 3, 6, 1, 4, 1, 277, 1, 5, 1, 1, 15), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lportDceErrorThresh.setStatus('mandatory')
lportDceEventCount = MibTableColumn((1, 3, 6, 1, 4, 1, 277, 1, 5, 1, 1, 16), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lportDceEventCount.setStatus('mandatory')
lportDteErrorThresh = MibTableColumn((1, 3, 6, 1, 4, 1, 277, 1, 5, 1, 1, 17), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lportDteErrorThresh.setStatus('mandatory')
lportDteEventCount = MibTableColumn((1, 3, 6, 1, 4, 1, 277, 1, 5, 1, 1, 18), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lportDteEventCount.setStatus('mandatory')
lportDtePollTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 277, 1, 5, 1, 1, 19), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lportDtePollTimer.setStatus('mandatory')
lportDteFullCounter = MibTableColumn((1, 3, 6, 1, 4, 1, 277, 1, 5, 1, 1, 20), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lportDteFullCounter.setStatus('mandatory')
lportDteMulticast = MibTableColumn((1, 3, 6, 1, 4, 1, 277, 1, 5, 1, 1, 21), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("one-way", 1), ("two-way", 2), ("m-way", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lportDteMulticast.setStatus('mandatory')
lportTrkRnode = MibTableColumn((1, 3, 6, 1, 4, 1, 277, 1, 5, 1, 1, 22), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lportTrkRnode.setStatus('mandatory')
lportTrkRlport = MibTableColumn((1, 3, 6, 1, 4, 1, 277, 1, 5, 1, 1, 23), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lportTrkRlport.setStatus('mandatory')
lportCongestState = MibTableColumn((1, 3, 6, 1, 4, 1, 277, 1, 5, 1, 1, 24), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("normal", 1), ("mild", 2), ("severe", 3), ("critical", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lportCongestState.setStatus('mandatory')
lportQP1Len = MibTableColumn((1, 3, 6, 1, 4, 1, 277, 1, 5, 1, 1, 25), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lportQP1Len.setStatus('mandatory')
lportQP2Len = MibTableColumn((1, 3, 6, 1, 4, 1, 277, 1, 5, 1, 1, 26), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lportQP2Len.setStatus('mandatory')
lportQP3Len = MibTableColumn((1, 3, 6, 1, 4, 1, 277, 1, 5, 1, 1, 27), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lportQP3Len.setStatus('mandatory')
lportQP4Len = MibTableColumn((1, 3, 6, 1, 4, 1, 277, 1, 5, 1, 1, 28), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lportQP4Len.setStatus('mandatory')
lportErrTime = MibTableColumn((1, 3, 6, 1, 4, 1, 277, 1, 5, 1, 1, 29), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lportErrTime.setStatus('mandatory')
lportErrType = MibTableColumn((1, 3, 6, 1, 4, 1, 277, 1, 5, 1, 1, 30), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19))).clone(namedValues=NamedValues(("short-frame", 1), ("hdlc-abort", 2), ("residual-bit", 3), ("crc-Error", 4), ("rcv-Long", 5), ("rcv-overrun", 6), ("tx-underrun", 7), ("unknownError", 8), ("illegalDLCI", 9), ("unknownDLCI", 10), ("dlcmiProtoErr", 11), ("dlcmiUnknownIE", 12), ("dlcmiSequenceErr", 13), ("dlcmiUnknownRpt", 14), ("unknownProt", 15), ("discardFW", 16), ("discardRange", 17), ("discardPortMismatch", 18), ("discardIllegalLen", 19)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lportErrType.setStatus('mandatory')
lportErrData = MibTableColumn((1, 3, 6, 1, 4, 1, 277, 1, 5, 1, 1, 31), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lportErrData.setStatus('mandatory')
lportDiagTestId = MibTableColumn((1, 3, 6, 1, 4, 1, 277, 1, 5, 1, 1, 32), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lportDiagTestId.setStatus('mandatory')
lportDiagTestRuns = MibTableColumn((1, 3, 6, 1, 4, 1, 277, 1, 5, 1, 1, 33), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lportDiagTestRuns.setStatus('mandatory')
lportDataRate = MibTableColumn((1, 3, 6, 1, 4, 1, 277, 1, 5, 1, 1, 34), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lportDataRate.setStatus('mandatory')
lportTrkStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 277, 1, 5, 1, 1, 35), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 9))).clone(namedValues=NamedValues(("nattempt", 1), ("ninit", 2), ("n2way", 3), ("nexstart", 4), ("nexchange", 5), ("nloading", 6), ("nfull", 7), ("btdefined", 9)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lportTrkStatus.setStatus('mandatory')
lportSevCongests = MibTableColumn((1, 3, 6, 1, 4, 1, 277, 1, 5, 1, 1, 36), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lportSevCongests.setStatus('mandatory')
lportAbsCongests = MibTableColumn((1, 3, 6, 1, 4, 1, 277, 1, 5, 1, 1, 37), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lportAbsCongests.setStatus('mandatory')
lportTrkOverhead = MibTableColumn((1, 3, 6, 1, 4, 1, 277, 1, 5, 1, 1, 38), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lportTrkOverhead.setStatus('mandatory')
lportTrkUtil = MibTableColumn((1, 3, 6, 1, 4, 1, 277, 1, 5, 1, 1, 39), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lportTrkUtil.setStatus('mandatory')
lportVAvailbw = MibTableColumn((1, 3, 6, 1, 4, 1, 277, 1, 5, 1, 1, 40), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lportVAvailbw.setStatus('mandatory')
lportTrkLastTimeChange = MibTableColumn((1, 3, 6, 1, 4, 1, 277, 1, 5, 1, 1, 41), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lportTrkLastTimeChange.setStatus('mandatory')
lportCongestRate = MibTableColumn((1, 3, 6, 1, 4, 1, 277, 1, 5, 1, 1, 42), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lportCongestRate.setStatus('mandatory')
lportCongestRateThresh = MibTableColumn((1, 3, 6, 1, 4, 1, 277, 1, 5, 1, 1, 43), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lportCongestRateThresh.setStatus('mandatory')
lportDiagState = MibTableColumn((1, 3, 6, 1, 4, 1, 277, 1, 5, 1, 1, 44), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("active", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lportDiagState.setStatus('mandatory')
lportDiagOptionStr = MibTableColumn((1, 3, 6, 1, 4, 1, 277, 1, 5, 1, 1, 45), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lportDiagOptionStr.setStatus('mandatory')
lportDiagPassCount = MibTableColumn((1, 3, 6, 1, 4, 1, 277, 1, 5, 1, 1, 46), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lportDiagPassCount.setStatus('mandatory')
lportDiagFailCount = MibTableColumn((1, 3, 6, 1, 4, 1, 277, 1, 5, 1, 1, 47), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lportDiagFailCount.setStatus('mandatory')
lportDiagResultStr = MibTableColumn((1, 3, 6, 1, 4, 1, 277, 1, 5, 1, 1, 48), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lportDiagResultStr.setStatus('mandatory')
lportDs0BitStuff = MibTableColumn((1, 3, 6, 1, 4, 1, 277, 1, 5, 1, 1, 49), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("bit-stuffing", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lportDs0BitStuff.setStatus('mandatory')
lportErrorThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 277, 1, 5, 1, 1, 50), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lportErrorThreshold.setStatus('mandatory')
lportUnsyncBandwidth = MibTableColumn((1, 3, 6, 1, 4, 1, 277, 1, 5, 1, 1, 51), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lportUnsyncBandwidth.setStatus('mandatory')
lportDTEInStatusFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 277, 1, 5, 1, 1, 52), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lportDTEInStatusFrames.setStatus('mandatory')
lportDTEInFullStatusFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 277, 1, 5, 1, 1, 53), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lportDTEInFullStatusFrames.setStatus('mandatory')
lportDTEInAsyncStatusFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 277, 1, 5, 1, 1, 54), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lportDTEInAsyncStatusFrames.setStatus('mandatory')
lportDTEInErrorFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 277, 1, 5, 1, 1, 55), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lportDTEInErrorFrames.setStatus('mandatory')
lportDTEOutPollFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 277, 1, 5, 1, 1, 56), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lportDTEOutPollFrames.setStatus('mandatory')
lportDTEPollErrorCounts = MibTableColumn((1, 3, 6, 1, 4, 1, 277, 1, 5, 1, 1, 57), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lportDTEPollErrorCounts.setStatus('mandatory')
lportDTEFailCounts = MibTableColumn((1, 3, 6, 1, 4, 1, 277, 1, 5, 1, 1, 58), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lportDTEFailCounts.setStatus('mandatory')
lportDTEFailReason = MibTableColumn((1, 3, 6, 1, 4, 1, 277, 1, 5, 1, 1, 59), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("dte-bad-Nr", 1), ("dte-timeout", 2), ("prot-error", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lportDTEFailReason.setStatus('mandatory')
lportDTEOperStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 277, 1, 5, 1, 1, 60), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("up", 1), ("down", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lportDTEOperStatus.setStatus('mandatory')
lportDCEInPollFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 277, 1, 5, 1, 1, 61), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lportDCEInPollFrames.setStatus('mandatory')
lportDCEInErrorFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 277, 1, 5, 1, 1, 62), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lportDCEInErrorFrames.setStatus('mandatory')
lportDCEOutStatusFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 277, 1, 5, 1, 1, 63), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lportDCEOutStatusFrames.setStatus('mandatory')
lportDCEOutFullStatusFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 277, 1, 5, 1, 1, 64), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lportDCEOutFullStatusFrames.setStatus('mandatory')
lportDCEOutAsyncStatusFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 277, 1, 5, 1, 1, 65), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lportDCEOutAsyncStatusFrames.setStatus('mandatory')
lportDCEPollErrorCounts = MibTableColumn((1, 3, 6, 1, 4, 1, 277, 1, 5, 1, 1, 66), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lportDCEPollErrorCounts.setStatus('mandatory')
lportDCEFailCounts = MibTableColumn((1, 3, 6, 1, 4, 1, 277, 1, 5, 1, 1, 67), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lportDCEFailCounts.setStatus('mandatory')
lportDCEFailReason = MibTableColumn((1, 3, 6, 1, 4, 1, 277, 1, 5, 1, 1, 68), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("dce-bad-Nr", 1), ("dce-timeout", 2), ("prot-error", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lportDCEFailReason.setStatus('mandatory')
lportDCEOperStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 277, 1, 5, 1, 1, 69), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("up", 1), ("down", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lportDCEOperStatus.setStatus('mandatory')
lportDCEOperDlcmiStd = MibTableColumn((1, 3, 6, 1, 4, 1, 277, 1, 5, 1, 1, 70), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("unknown", 1), ("lmiRev1", 2), ("ansiT1-617-D", 3), ("ccittQ-933-A", 4), ("reserved", 5), ("ansiT1-617-B", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lportDCEOperDlcmiStd.setStatus('mandatory')
lportLMIInErrorFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 277, 1, 5, 1, 1, 71), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lportLMIInErrorFrames.setStatus('mandatory')
lportDCEnN4 = MibTableColumn((1, 3, 6, 1, 4, 1, 277, 1, 5, 1, 1, 72), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lportDCEnN4.setStatus('mandatory')
lportDCEnT3 = MibTableColumn((1, 3, 6, 1, 4, 1, 277, 1, 5, 1, 1, 73), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lportDCEnT3.setStatus('mandatory')
lportXmitLatencyThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 277, 1, 5, 1, 1, 74), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lportXmitLatencyThreshold.setStatus('mandatory')
lportXmitRefillPriority0Percentage = MibTableColumn((1, 3, 6, 1, 4, 1, 277, 1, 5, 1, 1, 75), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lportXmitRefillPriority0Percentage.setStatus('mandatory')
lportXmitRefillPriority1Percentage = MibTableColumn((1, 3, 6, 1, 4, 1, 277, 1, 5, 1, 1, 76), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lportXmitRefillPriority1Percentage.setStatus('mandatory')
lportXmitRefillPriority2Percentage = MibTableColumn((1, 3, 6, 1, 4, 1, 277, 1, 5, 1, 1, 77), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lportXmitRefillPriority2Percentage.setStatus('mandatory')
lportXmitRefillPriority3Percentage = MibTableColumn((1, 3, 6, 1, 4, 1, 277, 1, 5, 1, 1, 78), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lportXmitRefillPriority3Percentage.setStatus('mandatory')
lportXmitDiscardLow = MibTableColumn((1, 3, 6, 1, 4, 1, 277, 1, 5, 1, 1, 79), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lportXmitDiscardLow.setStatus('mandatory')
lportSevereThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 277, 1, 5, 1, 1, 80), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lportSevereThreshold.setStatus('mandatory')
lportMildThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 277, 1, 5, 1, 1, 81), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lportMildThreshold.setStatus('mandatory')
lportTrkKeepAliveTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 277, 1, 5, 1, 1, 86), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lportTrkKeepAliveTimer.setStatus('mandatory')
lportTrkKeepAliveErrorThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 277, 1, 5, 1, 1, 87), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lportTrkKeepAliveErrorThreshold.setStatus('mandatory')
lportIgCutThruStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 277, 1, 5, 1, 1, 88), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lportIgCutThruStatus.setStatus('mandatory')
lportEgCutThruStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 277, 1, 5, 1, 1, 89), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lportEgCutThruStatus.setStatus('mandatory')
lportEgCutThruThresh = MibTableColumn((1, 3, 6, 1, 4, 1, 277, 1, 5, 1, 1, 90), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lportEgCutThruThresh.setStatus('mandatory')
lportFrameRelayTrkEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 277, 1, 5, 1, 1, 91), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("allowed", 1), ("not-allowed", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lportFrameRelayTrkEnable.setStatus('mandatory')
lportSmdsSsiIf = MibTableColumn((1, 3, 6, 1, 4, 1, 277, 1, 5, 1, 1, 92), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lportSmdsSsiIf.setStatus('mandatory')
lportSmdsSsiSlot = MibTableColumn((1, 3, 6, 1, 4, 1, 277, 1, 5, 1, 1, 93), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lportSmdsSsiSlot.setStatus('mandatory')
lportSmdsScrnId = MibTableColumn((1, 3, 6, 1, 4, 1, 277, 1, 5, 1, 1, 94), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lportSmdsScrnId.setStatus('mandatory')
lportSmdsIaScrnOp = MibTableColumn((1, 3, 6, 1, 4, 1, 277, 1, 5, 1, 1, 95), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("allow", 1), ("disallow", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lportSmdsIaScrnOp.setStatus('mandatory')
lportSmdsGaScrnOp = MibTableColumn((1, 3, 6, 1, 4, 1, 277, 1, 5, 1, 1, 96), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("allow", 1), ("disallow", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lportSmdsGaScrnOp.setStatus('mandatory')
lportSmdsIaScrnMap = MibTableColumn((1, 3, 6, 1, 4, 1, 277, 1, 5, 1, 1, 97), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lportSmdsIaScrnMap.setStatus('mandatory')
lportSmdsGaScrnMap = MibTableColumn((1, 3, 6, 1, 4, 1, 277, 1, 5, 1, 1, 98), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lportSmdsGaScrnMap.setStatus('mandatory')
lportSmdsTrkAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 277, 1, 5, 1, 1, 99), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lportSmdsTrkAddr.setStatus('mandatory')
lportSmdsCrc = MibTableColumn((1, 3, 6, 1, 4, 1, 277, 1, 5, 1, 1, 100), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("crc16", 1), ("crc32", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lportSmdsCrc.setStatus('mandatory')
lportSmdsCpePoll = MibTableColumn((1, 3, 6, 1, 4, 1, 277, 1, 5, 1, 1, 101), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("nopoll", 1), ("poll", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lportSmdsCpePoll.setStatus('mandatory')
lportSmdsPduCheck = MibTableColumn((1, 3, 6, 1, 4, 1, 277, 1, 5, 1, 1, 102), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("on", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lportSmdsPduCheck.setStatus('mandatory')
lportSmdsCntOutFrDxi2HbPolls = MibTableColumn((1, 3, 6, 1, 4, 1, 277, 1, 5, 1, 1, 103), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lportSmdsCntOutFrDxi2HbPolls.setStatus('mandatory')
lportSmdsCntOutByteDxi2HbPolls = MibTableColumn((1, 3, 6, 1, 4, 1, 277, 1, 5, 1, 1, 104), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lportSmdsCntOutByteDxi2HbPolls.setStatus('mandatory')
lportSmdsCntInFrDxi2HbPolls = MibTableColumn((1, 3, 6, 1, 4, 1, 277, 1, 5, 1, 1, 105), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lportSmdsCntInFrDxi2HbPolls.setStatus('mandatory')
lportSmdsCntInByteDxi2HbPolls = MibTableColumn((1, 3, 6, 1, 4, 1, 277, 1, 5, 1, 1, 106), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lportSmdsCntInByteDxi2HbPolls.setStatus('mandatory')
lportSmdsCntOutFrSip3s = MibTableColumn((1, 3, 6, 1, 4, 1, 277, 1, 5, 1, 1, 107), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lportSmdsCntOutFrSip3s.setStatus('mandatory')
lportSmdsCntOutByteSip3s = MibTableColumn((1, 3, 6, 1, 4, 1, 277, 1, 5, 1, 1, 108), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lportSmdsCntOutByteSip3s.setStatus('mandatory')
lportSmdsCntInFrSip3s = MibTableColumn((1, 3, 6, 1, 4, 1, 277, 1, 5, 1, 1, 109), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lportSmdsCntInFrSip3s.setStatus('mandatory')
lportSmdsCntInByteSip3s = MibTableColumn((1, 3, 6, 1, 4, 1, 277, 1, 5, 1, 1, 110), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lportSmdsCntInByteSip3s.setStatus('mandatory')
lportSmdsCntDxi2LinkIdInvalids = MibTableColumn((1, 3, 6, 1, 4, 1, 277, 1, 5, 1, 1, 111), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lportSmdsCntDxi2LinkIdInvalids.setStatus('mandatory')
lportSmdsCntDxi2StationIdInvalids = MibTableColumn((1, 3, 6, 1, 4, 1, 277, 1, 5, 1, 1, 112), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lportSmdsCntDxi2StationIdInvalids.setStatus('mandatory')
lportSmdsCntDxi2CrInvalids = MibTableColumn((1, 3, 6, 1, 4, 1, 277, 1, 5, 1, 1, 113), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lportSmdsCntDxi2CrInvalids.setStatus('mandatory')
lportSmdsCntDxi2AeInvalids = MibTableColumn((1, 3, 6, 1, 4, 1, 277, 1, 5, 1, 1, 114), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lportSmdsCntDxi2AeInvalids.setStatus('mandatory')
lportSmdsCntDxi2CtrlInvalids = MibTableColumn((1, 3, 6, 1, 4, 1, 277, 1, 5, 1, 1, 115), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lportSmdsCntDxi2CtrlInvalids.setStatus('mandatory')
lportSmdsCntDxi2FrameSizeErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 277, 1, 5, 1, 1, 116), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lportSmdsCntDxi2FrameSizeErrors.setStatus('mandatory')
lportSmdsCntSip3RsvdInvalids = MibTableColumn((1, 3, 6, 1, 4, 1, 277, 1, 5, 1, 1, 117), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lportSmdsCntSip3RsvdInvalids.setStatus('mandatory')
lportSmdsCntSip3BetagMismatchs = MibTableColumn((1, 3, 6, 1, 4, 1, 277, 1, 5, 1, 1, 118), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lportSmdsCntSip3BetagMismatchs.setStatus('mandatory')
lportSmdsCntSip3BasizeIncorrects = MibTableColumn((1, 3, 6, 1, 4, 1, 277, 1, 5, 1, 1, 119), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lportSmdsCntSip3BasizeIncorrects.setStatus('mandatory')
lportSmdsCntSip3BasizeInvalids = MibTableColumn((1, 3, 6, 1, 4, 1, 277, 1, 5, 1, 1, 120), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lportSmdsCntSip3BasizeInvalids.setStatus('mandatory')
lportSmdsCntSip3DaTypeInvalids = MibTableColumn((1, 3, 6, 1, 4, 1, 277, 1, 5, 1, 1, 121), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lportSmdsCntSip3DaTypeInvalids.setStatus('mandatory')
lportSmdsCntSip3DaInvalids = MibTableColumn((1, 3, 6, 1, 4, 1, 277, 1, 5, 1, 1, 122), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lportSmdsCntSip3DaInvalids.setStatus('mandatory')
lportSmdsCntSip3SaTypeInvalids = MibTableColumn((1, 3, 6, 1, 4, 1, 277, 1, 5, 1, 1, 123), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lportSmdsCntSip3SaTypeInvalids.setStatus('mandatory')
lportSmdsCntSip3SaInvalids = MibTableColumn((1, 3, 6, 1, 4, 1, 277, 1, 5, 1, 1, 124), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lportSmdsCntSip3SaInvalids.setStatus('mandatory')
lportSmdsCntSip3BasizeMismatchs = MibTableColumn((1, 3, 6, 1, 4, 1, 277, 1, 5, 1, 1, 125), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lportSmdsCntSip3BasizeMismatchs.setStatus('mandatory')
lportSmdsCntSip3HeLenInvalids = MibTableColumn((1, 3, 6, 1, 4, 1, 277, 1, 5, 1, 1, 126), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lportSmdsCntSip3HeLenInvalids.setStatus('mandatory')
lportSmdsCntSip3HeVersionInvalids = MibTableColumn((1, 3, 6, 1, 4, 1, 277, 1, 5, 1, 1, 127), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lportSmdsCntSip3HeVersionInvalids.setStatus('mandatory')
lportSmdsCntSip3HeCarrierInvalids = MibTableColumn((1, 3, 6, 1, 4, 1, 277, 1, 5, 1, 1, 128), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lportSmdsCntSip3HeCarrierInvalids.setStatus('mandatory')
lportSmdsCntSip3Crc32Errors = MibTableColumn((1, 3, 6, 1, 4, 1, 277, 1, 5, 1, 1, 129), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lportSmdsCntSip3Crc32Errors.setStatus('mandatory')
lportSmdsCntSip3TRsvdInvalids = MibTableColumn((1, 3, 6, 1, 4, 1, 277, 1, 5, 1, 1, 130), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lportSmdsCntSip3TRsvdInvalids.setStatus('mandatory')
lportSmdsCntSaNotFounds = MibTableColumn((1, 3, 6, 1, 4, 1, 277, 1, 5, 1, 1, 131), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lportSmdsCntSaNotFounds.setStatus('mandatory')
lportSmdsCntSaValidationFails = MibTableColumn((1, 3, 6, 1, 4, 1, 277, 1, 5, 1, 1, 132), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lportSmdsCntSaValidationFails.setStatus('mandatory')
lportSmdsCntSaDaOnSamePorts = MibTableColumn((1, 3, 6, 1, 4, 1, 277, 1, 5, 1, 1, 133), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lportSmdsCntSaDaOnSamePorts.setStatus('mandatory')
lportSmdsCntDaSsiMismacths = MibTableColumn((1, 3, 6, 1, 4, 1, 277, 1, 5, 1, 1, 134), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lportSmdsCntDaSsiMismacths.setStatus('mandatory')
lportSmdsCntSsiProvisionErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 277, 1, 5, 1, 1, 135), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lportSmdsCntSsiProvisionErrors.setStatus('mandatory')
lportSmdsCntDstIaNotFounds = MibTableColumn((1, 3, 6, 1, 4, 1, 277, 1, 5, 1, 1, 136), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lportSmdsCntDstIaNotFounds.setStatus('mandatory')
lportSmdsCntDstGaNotFounds = MibTableColumn((1, 3, 6, 1, 4, 1, 277, 1, 5, 1, 1, 137), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lportSmdsCntDstGaNotFounds.setStatus('mandatory')
lportSmdsCntSrcIaScrnFails = MibTableColumn((1, 3, 6, 1, 4, 1, 277, 1, 5, 1, 1, 138), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lportSmdsCntSrcIaScrnFails.setStatus('mandatory')
lportSmdsCntDstIaScrnFails = MibTableColumn((1, 3, 6, 1, 4, 1, 277, 1, 5, 1, 1, 139), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lportSmdsCntDstIaScrnFails.setStatus('mandatory')
lportSmdsCntDstGaScrnFails = MibTableColumn((1, 3, 6, 1, 4, 1, 277, 1, 5, 1, 1, 140), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lportSmdsCntDstGaScrnFails.setStatus('mandatory')
lportSmdsTotalDiscards = MibTableColumn((1, 3, 6, 1, 4, 1, 277, 1, 5, 1, 1, 141), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lportSmdsTotalDiscards.setStatus('mandatory')
lportSmdsSsiNode = MibTableColumn((1, 3, 6, 1, 4, 1, 277, 1, 5, 1, 1, 142), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lportSmdsSsiNode.setStatus('mandatory')
lportBilling = MibTableColumn((1, 3, 6, 1, 4, 1, 277, 1, 5, 1, 1, 143), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lportBilling.setStatus('mandatory')
lportSmdsReserved144 = MibTableColumn((1, 3, 6, 1, 4, 1, 277, 1, 5, 1, 1, 144), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lportSmdsReserved144.setStatus('mandatory')
lportLinkStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 277, 1, 5, 1, 1, 145), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("up", 1), ("down", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lportLinkStatus.setStatus('mandatory')
lportLMIDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 277, 1, 5, 1, 1, 146), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lportLMIDelay.setStatus('mandatory')
lportCRC = MibTableColumn((1, 3, 6, 1, 4, 1, 277, 1, 5, 1, 1, 147), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lportCRC.setStatus('mandatory')
lportSmdsMulticastGa = MibTableColumn((1, 3, 6, 1, 4, 1, 277, 1, 5, 1, 1, 148), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lportSmdsMulticastGa.setStatus('mandatory')
lportSmdsMulticastIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 277, 1, 5, 1, 1, 149), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lportSmdsMulticastIpAddr.setStatus('mandatory')
lportAtmVPI = MibTableColumn((1, 3, 6, 1, 4, 1, 277, 1, 5, 1, 1, 150), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lportAtmVPI.setStatus('mandatory')
lportAtmVCI = MibTableColumn((1, 3, 6, 1, 4, 1, 277, 1, 5, 1, 1, 151), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lportAtmVCI.setStatus('mandatory')
lportPeakCellRateindex = MibTableColumn((1, 3, 6, 1, 4, 1, 277, 1, 5, 1, 1, 152), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lportPeakCellRateindex.setStatus('mandatory')
lportSustCellRate = MibTableColumn((1, 3, 6, 1, 4, 1, 277, 1, 5, 1, 1, 153), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lportSustCellRate.setStatus('mandatory')
lportBurstTolerance = MibTableColumn((1, 3, 6, 1, 4, 1, 277, 1, 5, 1, 1, 154), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lportBurstTolerance.setStatus('mandatory')
lportBuTrkOnFailure = MibTableColumn((1, 3, 6, 1, 4, 1, 277, 1, 5, 1, 1, 155), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lportBuTrkOnFailure.setStatus('mandatory')
lportTrkFailureThrsh = MibTableColumn((1, 3, 6, 1, 4, 1, 277, 1, 5, 1, 1, 156), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lportTrkFailureThrsh.setStatus('mandatory')
lportTrkRestThrsh = MibTableColumn((1, 3, 6, 1, 4, 1, 277, 1, 5, 1, 1, 157), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lportTrkRestThrsh.setStatus('mandatory')
lportBuTrkRetryInt = MibTableColumn((1, 3, 6, 1, 4, 1, 277, 1, 5, 1, 1, 158), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lportBuTrkRetryInt.setStatus('mandatory')
lportBuTrkRetryNum = MibTableColumn((1, 3, 6, 1, 4, 1, 277, 1, 5, 1, 1, 159), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lportBuTrkRetryNum.setStatus('mandatory')
lportBuTrkCycleInt = MibTableColumn((1, 3, 6, 1, 4, 1, 277, 1, 5, 1, 1, 160), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lportBuTrkCycleInt.setStatus('mandatory')
lportTrkManualBu = MibTableColumn((1, 3, 6, 1, 4, 1, 277, 1, 5, 1, 1, 161), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("initCmd", 1), ("termCmd", 2), ("initSched", 3), ("termSched", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lportTrkManualBu.setStatus('mandatory')
lportPrimTrk = MibTableColumn((1, 3, 6, 1, 4, 1, 277, 1, 5, 1, 1, 162), Index()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lportPrimTrk.setStatus('mandatory')
lportInitCallSetup = MibTableColumn((1, 3, 6, 1, 4, 1, 277, 1, 5, 1, 1, 163), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("true", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lportInitCallSetup.setStatus('mandatory')
lportBuFailReason = MibTableColumn((1, 3, 6, 1, 4, 1, 277, 1, 5, 1, 1, 164), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("buTrkNotDef", 1), ("buTrkNotEstab", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lportBuFailReason.setStatus('mandatory')
lportQ922Enable = MibTableColumn((1, 3, 6, 1, 4, 1, 277, 1, 5, 1, 1, 165), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lportQ922Enable.setStatus('mandatory')
lportQ922State = MibTableColumn((1, 3, 6, 1, 4, 1, 277, 1, 5, 1, 1, 166), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("tei-unassigned", 1), ("assign-awaiting", 2), ("establish-awaiting", 3), ("tei-assigned", 4), ("awaiting-establishment", 5), ("awaiting-release", 6), ("multiple-frame-established", 7), ("timer-recovery", 8)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lportQ922State.setStatus('mandatory')
lportTrkPduRevision = MibTableColumn((1, 3, 6, 1, 4, 1, 277, 1, 5, 1, 1, 167), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lportTrkPduRevision.setStatus('mandatory')
lportPVCMgrPduRevision = MibTableColumn((1, 3, 6, 1, 4, 1, 277, 1, 5, 1, 1, 168), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lportPVCMgrPduRevision.setStatus('mandatory')
lportDS0LoopStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 277, 1, 5, 1, 1, 169), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lportDS0LoopStatus.setStatus('mandatory')
lportISDNDuration = MibTableColumn((1, 3, 6, 1, 4, 1, 277, 1, 5, 1, 1, 170), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lportISDNDuration.setStatus('mandatory')
lportISDNSourceAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 277, 1, 5, 1, 1, 171), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lportISDNSourceAddr.setStatus('mandatory')
lportISDNDestAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 277, 1, 5, 1, 1, 172), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lportISDNDestAddr.setStatus('mandatory')
lportISDNIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 277, 1, 5, 1, 1, 173), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lportISDNIpAddr.setStatus('mandatory')
lportISDNCallRejCause = MibTableColumn((1, 3, 6, 1, 4, 1, 277, 1, 5, 1, 1, 174), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lportISDNCallRejCause.setStatus('mandatory')
lportLastInvalidDLCI = MibTableColumn((1, 3, 6, 1, 4, 1, 277, 1, 5, 1, 1, 175), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lportLastInvalidDLCI.setStatus('mandatory')
lportTrkProtState = MibTableColumn((1, 3, 6, 1, 4, 1, 277, 1, 5, 1, 1, 176), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2), ("none", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lportTrkProtState.setStatus('mandatory')
lportTrkTrafficMix = MibTableColumn((1, 3, 6, 1, 4, 1, 277, 1, 5, 1, 1, 177), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("normal", 1), ("management-only", 2), ("management-and-PVCs", 3), ("private", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lportTrkTrafficMix.setStatus('mandatory')
lportNumVC = MibTableColumn((1, 3, 6, 1, 4, 1, 277, 1, 5, 1, 1, 178), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lportNumVC.setStatus('mandatory')
lportTrkAdminCost = MibTableColumn((1, 3, 6, 1, 4, 1, 277, 1, 5, 1, 1, 179), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lportTrkAdminCost.setStatus('mandatory')
lportPrivateNet = MibTableColumn((1, 3, 6, 1, 4, 1, 277, 1, 5, 1, 1, 180), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lportPrivateNet.setStatus('mandatory')
lportTrkStaticDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 277, 1, 5, 1, 1, 181), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lportTrkStaticDelay.setStatus('mandatory')
lportTrkDynamicDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 277, 1, 5, 1, 1, 182), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lportTrkDynamicDelay.setStatus('mandatory')
lportAtmDataRateQoS1 = MibTableColumn((1, 3, 6, 1, 4, 1, 277, 1, 5, 1, 1, 183), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lportAtmDataRateQoS1.setStatus('mandatory')
lportAtmDataRateQoS2 = MibTableColumn((1, 3, 6, 1, 4, 1, 277, 1, 5, 1, 1, 184), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lportAtmDataRateQoS2.setStatus('mandatory')
lportAtmDataRateQoS3 = MibTableColumn((1, 3, 6, 1, 4, 1, 277, 1, 5, 1, 1, 185), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lportAtmDataRateQoS3.setStatus('mandatory')
lportAtmDataRateQoS4 = MibTableColumn((1, 3, 6, 1, 4, 1, 277, 1, 5, 1, 1, 186), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lportAtmDataRateQoS4.setStatus('mandatory')
lportOutVAvailbwQoS1 = MibTableColumn((1, 3, 6, 1, 4, 1, 277, 1, 5, 1, 1, 187), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lportOutVAvailbwQoS1.setStatus('mandatory')
lportOutVAvailbwQoS2 = MibTableColumn((1, 3, 6, 1, 4, 1, 277, 1, 5, 1, 1, 188), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lportOutVAvailbwQoS2.setStatus('mandatory')
lportOutVAvailbwQoS3 = MibTableColumn((1, 3, 6, 1, 4, 1, 277, 1, 5, 1, 1, 189), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lportOutVAvailbwQoS3.setStatus('mandatory')
lportOutVAvailbwQoS4 = MibTableColumn((1, 3, 6, 1, 4, 1, 277, 1, 5, 1, 1, 190), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lportOutVAvailbwQoS4.setStatus('mandatory')
lportInVAvailbwQoS1 = MibTableColumn((1, 3, 6, 1, 4, 1, 277, 1, 5, 1, 1, 191), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lportInVAvailbwQoS1.setStatus('mandatory')
lportInVAvailbwQoS2 = MibTableColumn((1, 3, 6, 1, 4, 1, 277, 1, 5, 1, 1, 192), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lportInVAvailbwQoS2.setStatus('mandatory')
lportInVAvailbwQoS3 = MibTableColumn((1, 3, 6, 1, 4, 1, 277, 1, 5, 1, 1, 193), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lportInVAvailbwQoS3.setStatus('mandatory')
lportInVAvailbwQoS4 = MibTableColumn((1, 3, 6, 1, 4, 1, 277, 1, 5, 1, 1, 194), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lportInVAvailbwQoS4.setStatus('mandatory')
lportOutAllocbwQoS1 = MibTableColumn((1, 3, 6, 1, 4, 1, 277, 1, 5, 1, 1, 195), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lportOutAllocbwQoS1.setStatus('mandatory')
lportOutAllocbwQoS2 = MibTableColumn((1, 3, 6, 1, 4, 1, 277, 1, 5, 1, 1, 196), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lportOutAllocbwQoS2.setStatus('mandatory')
lportOutAllocbwQoS3 = MibTableColumn((1, 3, 6, 1, 4, 1, 277, 1, 5, 1, 1, 197), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lportOutAllocbwQoS3.setStatus('mandatory')
lportOutAllocbwQoS4 = MibTableColumn((1, 3, 6, 1, 4, 1, 277, 1, 5, 1, 1, 198), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lportOutAllocbwQoS4.setStatus('mandatory')
lportInAllocbwQoS1 = MibTableColumn((1, 3, 6, 1, 4, 1, 277, 1, 5, 1, 1, 199), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lportInAllocbwQoS1.setStatus('mandatory')
lportInAllocbwQoS2 = MibTableColumn((1, 3, 6, 1, 4, 1, 277, 1, 5, 1, 1, 200), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lportInAllocbwQoS2.setStatus('mandatory')
lportInAllocbwQoS3 = MibTableColumn((1, 3, 6, 1, 4, 1, 277, 1, 5, 1, 1, 201), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lportInAllocbwQoS3.setStatus('mandatory')
lportInAllocbwQoS4 = MibTableColumn((1, 3, 6, 1, 4, 1, 277, 1, 5, 1, 1, 202), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lportInAllocbwQoS4.setStatus('mandatory')
lportDynamicQoSbw = MibTableColumn((1, 3, 6, 1, 4, 1, 277, 1, 5, 1, 1, 203), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 4, 8))).clone(namedValues=NamedValues(("qos-class-1", 1), ("qos-class-2", 2), ("qos-class-3", 4), ("qos-class-4", 8)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lportDynamicQoSbw.setStatus('mandatory')
lportSVCRetryTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 277, 1, 5, 1, 1, 204), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lportSVCRetryTimer.setStatus('mandatory')
lportAtmNetworkType = MibTableColumn((1, 3, 6, 1, 4, 1, 277, 1, 5, 1, 1, 205), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("private", 1), ("public", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lportAtmNetworkType.setStatus('mandatory')
lportAtmRouteMetricQoS1 = MibTableColumn((1, 3, 6, 1, 4, 1, 277, 1, 5, 1, 1, 206), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("administrative-cost", 1), ("end-to-end-delay", 2), ("cell-delay-variation", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lportAtmRouteMetricQoS1.setStatus('mandatory')
lportAtmRouteMetricQoS2 = MibTableColumn((1, 3, 6, 1, 4, 1, 277, 1, 5, 1, 1, 207), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("administrative-cost", 1), ("end-to-end-delay", 2), ("cell-delay-variation", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lportAtmRouteMetricQoS2.setStatus('mandatory')
lportAtmRouteMetricQoS3 = MibTableColumn((1, 3, 6, 1, 4, 1, 277, 1, 5, 1, 1, 208), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("administrative-cost", 1), ("end-to-end-delay", 2), ("cell-delay-variation", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lportAtmRouteMetricQoS3.setStatus('mandatory')
lportAtmRouteMetricQoS4 = MibTableColumn((1, 3, 6, 1, 4, 1, 277, 1, 5, 1, 1, 209), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("administrative-cost", 1), ("end-to-end-delay", 2), ("cell-delay-variation", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lportAtmRouteMetricQoS4.setStatus('mandatory')
lportIlmiPollTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 277, 1, 5, 1, 1, 210), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lportIlmiPollTimeout.setStatus('mandatory')
lportAtmProtocol = MibTableColumn((1, 3, 6, 1, 4, 1, 277, 1, 5, 1, 1, 211), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("uni-30", 1), ("uni-31", 2), ("iisp", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lportAtmProtocol.setStatus('mandatory')
lportIlmiAdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 277, 1, 5, 1, 1, 212), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lportIlmiAdminStatus.setStatus('mandatory')
lportIlmiOperStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 277, 1, 5, 1, 1, 213), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("down", 1), ("registering", 2), ("up", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lportIlmiOperStatus.setStatus('mandatory')
lportIlmiPollRetry = MibTableColumn((1, 3, 6, 1, 4, 1, 277, 1, 5, 1, 1, 214), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lportIlmiPollRetry.setStatus('mandatory')
lportAtmVpiBits = MibTableColumn((1, 3, 6, 1, 4, 1, 277, 1, 5, 1, 1, 215), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lportAtmVpiBits.setStatus('mandatory')
lportAtmVciBits = MibTableColumn((1, 3, 6, 1, 4, 1, 277, 1, 5, 1, 1, 216), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lportAtmVciBits.setStatus('mandatory')
lportAtmOamAlarmEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 277, 1, 5, 1, 1, 217), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lportAtmOamAlarmEnable.setStatus('mandatory')
lportInVAvailbw = MibTableColumn((1, 3, 6, 1, 4, 1, 277, 1, 5, 1, 1, 218), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lportInVAvailbw.setStatus('mandatory')
lportbwUNIPolicy = MibTableColumn((1, 3, 6, 1, 4, 1, 277, 1, 5, 1, 1, 219), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable-uni-bw-policing", 1), ("disable-uni-bw-policing", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lportbwUNIPolicy.setStatus('mandatory')
lportStarvation = MibTableColumn((1, 3, 6, 1, 4, 1, 277, 1, 5, 1, 1, 220), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("ok", 1), ("error", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lportStarvation.setStatus('mandatory')
lportRecOverflow = MibTableColumn((1, 3, 6, 1, 4, 1, 277, 1, 5, 1, 1, 221), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("ok", 1), ("error", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lportRecOverflow.setStatus('mandatory')
lportLossOfCellSequence = MibTableColumn((1, 3, 6, 1, 4, 1, 277, 1, 5, 1, 1, 222), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("ok", 1), ("error", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lportLossOfCellSequence.setStatus('mandatory')
lportLossOfStructurePointer = MibTableColumn((1, 3, 6, 1, 4, 1, 277, 1, 5, 1, 1, 223), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("ok", 1), ("error", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lportLossOfStructurePointer.setStatus('mandatory')
lportCbrInsDummyCells = MibTableColumn((1, 3, 6, 1, 4, 1, 277, 1, 5, 1, 1, 224), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lportCbrInsDummyCells.setStatus('mandatory')
lportRecFifoUnderflowCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 277, 1, 5, 1, 1, 225), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lportRecFifoUnderflowCnt.setStatus('mandatory')
lportRecFifoOverflowCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 277, 1, 5, 1, 1, 226), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lportRecFifoOverflowCnt.setStatus('mandatory')
lportCbrLossOfStructurePointerCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 277, 1, 5, 1, 1, 227), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lportCbrLossOfStructurePointerCnt.setStatus('mandatory')
lportCbrLossOfCellSequenceCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 277, 1, 5, 1, 1, 228), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lportCbrLossOfCellSequenceCnt.setStatus('mandatory')
lportShaperId = MibTableColumn((1, 3, 6, 1, 4, 1, 277, 1, 5, 1, 1, 229), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lportShaperId.setStatus('mandatory')
lportIlmiPrefixScreenMode = MibTableColumn((1, 3, 6, 1, 4, 1, 277, 1, 5, 1, 1, 230), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 127, 255))).clone(namedValues=NamedValues(("node-prefix", 1), ("port-prefix", 2), ("node-prefix-or-port-prefix", 3), ("reject-all", 127), ("accept-all", 255)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lportIlmiPrefixScreenMode.setStatus('mandatory')
lportSmdsPduViolTca = MibTableColumn((1, 3, 6, 1, 4, 1, 277, 1, 5, 1, 1, 231), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lportSmdsPduViolTca.setStatus('mandatory')
lportSmdsPduViolThresh = MibTableColumn((1, 3, 6, 1, 4, 1, 277, 1, 5, 1, 1, 232), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lportSmdsPduViolThresh.setStatus('mandatory')
lportSmdsPduHdrSip3SaNotFound = MibTableColumn((1, 3, 6, 1, 4, 1, 277, 1, 5, 1, 1, 233), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lportSmdsPduHdrSip3SaNotFound.setStatus('mandatory')
lportSmdsPduHdrSip3SaDaOnSamePort = MibTableColumn((1, 3, 6, 1, 4, 1, 277, 1, 5, 1, 1, 234), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lportSmdsPduHdrSip3SaDaOnSamePort.setStatus('mandatory')
lportSmdsPduHdrSip3DstGaNotFound = MibTableColumn((1, 3, 6, 1, 4, 1, 277, 1, 5, 1, 1, 235), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lportSmdsPduHdrSip3DstGaNotFound.setStatus('mandatory')
lportSmdsPduHdrSip3DstIaScrnFail = MibTableColumn((1, 3, 6, 1, 4, 1, 277, 1, 5, 1, 1, 236), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lportSmdsPduHdrSip3DstIaScrnFail.setStatus('mandatory')
lportSmdsPduHdrSip3SaValFail = MibTableColumn((1, 3, 6, 1, 4, 1, 277, 1, 5, 1, 1, 237), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lportSmdsPduHdrSip3SaValFail.setStatus('mandatory')
lportSmdsPduHdrSip3DstIaNotFound = MibTableColumn((1, 3, 6, 1, 4, 1, 277, 1, 5, 1, 1, 238), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lportSmdsPduHdrSip3DstIaNotFound.setStatus('mandatory')
lportSmdsPduHdrSip3SrcIaScrnFail = MibTableColumn((1, 3, 6, 1, 4, 1, 277, 1, 5, 1, 1, 239), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lportSmdsPduHdrSip3SrcIaScrnFail.setStatus('mandatory')
lportSmdsPduHdrSip3DstGaScrnFail = MibTableColumn((1, 3, 6, 1, 4, 1, 277, 1, 5, 1, 1, 240), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lportSmdsPduHdrSip3DstGaScrnFail.setStatus('mandatory')
lportSmdsPduHdrSip3SaTypeInvalid = MibTableColumn((1, 3, 6, 1, 4, 1, 277, 1, 5, 1, 1, 241), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lportSmdsPduHdrSip3SaTypeInvalid.setStatus('mandatory')
lportSmdsPduHdrSip3DaTypeInvalid = MibTableColumn((1, 3, 6, 1, 4, 1, 277, 1, 5, 1, 1, 242), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lportSmdsPduHdrSip3DaTypeInvalid.setStatus('mandatory')
lportSmdsPduHdrDxi2LinkIdInvalid = MibTableColumn((1, 3, 6, 1, 4, 1, 277, 1, 5, 1, 1, 243), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lportSmdsPduHdrDxi2LinkIdInvalid.setStatus('mandatory')
lportSmdsPduHdrDxi2CrInvalid = MibTableColumn((1, 3, 6, 1, 4, 1, 277, 1, 5, 1, 1, 244), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lportSmdsPduHdrDxi2CrInvalid.setStatus('mandatory')
lportSmdsPduHdrDxi2CtrlInvalid = MibTableColumn((1, 3, 6, 1, 4, 1, 277, 1, 5, 1, 1, 245), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lportSmdsPduHdrDxi2CtrlInvalid.setStatus('mandatory')
lportSmdsPduHdrDxi2StationIdInvalid = MibTableColumn((1, 3, 6, 1, 4, 1, 277, 1, 5, 1, 1, 246), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lportSmdsPduHdrDxi2StationIdInvalid.setStatus('mandatory')
lportSmdsPduHdrDxi2AeInvalid = MibTableColumn((1, 3, 6, 1, 4, 1, 277, 1, 5, 1, 1, 247), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lportSmdsPduHdrDxi2AeInvalid.setStatus('mandatory')
lportDS0FarendLpbkEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 277, 1, 5, 1, 1, 248), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lportDS0FarendLpbkEnabled.setStatus('mandatory')
lportDS0FarendLpbkDisabled = MibTableColumn((1, 3, 6, 1, 4, 1, 277, 1, 5, 1, 1, 249), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lportDS0FarendLpbkDisabled.setStatus('mandatory')
lportTrkProtFailureThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 277, 1, 5, 1, 1, 250), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lportTrkProtFailureThreshold.setStatus('mandatory')
lportPtr = MibTableColumn((1, 3, 6, 1, 4, 1, 277, 1, 5, 1, 1, 251), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lportPtr.setStatus('mandatory')
lportISDNPoolUtil = MibTableColumn((1, 3, 6, 1, 4, 1, 277, 1, 5, 1, 1, 252), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lportISDNPoolUtil.setStatus('mandatory')
lportISDNIpAddrAssignFail = MibTableColumn((1, 3, 6, 1, 4, 1, 277, 1, 5, 1, 1, 253), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lportISDNIpAddrAssignFail.setStatus('mandatory')
lportTrkUtilQoS1 = MibTableColumn((1, 3, 6, 1, 4, 1, 277, 1, 5, 1, 1, 254), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lportTrkUtilQoS1.setStatus('mandatory')
lportTrkUtilQoS2 = MibTableColumn((1, 3, 6, 1, 4, 1, 277, 1, 5, 1, 1, 255), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lportTrkUtilQoS2.setStatus('mandatory')
lportTrkUtilQoS3 = MibTableColumn((1, 3, 6, 1, 4, 1, 277, 1, 5, 1, 1, 256), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lportTrkUtilQoS3.setStatus('mandatory')
lportTrkUtilQoS4 = MibTableColumn((1, 3, 6, 1, 4, 1, 277, 1, 5, 1, 1, 257), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lportTrkUtilQoS4.setStatus('mandatory')
lportInCells = MibTableColumn((1, 3, 6, 1, 4, 1, 277, 1, 5, 1, 1, 267), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lportInCells.setStatus('mandatory')
lportOutCells = MibTableColumn((1, 3, 6, 1, 4, 1, 277, 1, 5, 1, 1, 268), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lportOutCells.setStatus('mandatory')
cktTable = MibTable((1, 3, 6, 1, 4, 1, 277, 1, 6, 1), )
if mibBuilder.loadTexts: cktTable.setStatus('mandatory')
cktEntry = MibTableRow((1, 3, 6, 1, 4, 1, 277, 1, 6, 1, 1), ).setIndexNames((0, "CASCADE-MIB", "cktSrcIfIndex"), (0, "CASCADE-MIB", "cktSrcDlci"))
if mibBuilder.loadTexts: cktEntry.setStatus('mandatory')
cktSrcIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 277, 1, 6, 1, 1, 1), Index()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cktSrcIfIndex.setStatus('mandatory')
cktSrcDlci = MibTableColumn((1, 3, 6, 1, 4, 1, 277, 1, 6, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cktSrcDlci.setStatus('mandatory')
cktPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 277, 1, 6, 1, 1, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cktPriority.setStatus('mandatory')
cktCir = MibTableColumn((1, 3, 6, 1, 4, 1, 277, 1, 6, 1, 1, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cktCir.setStatus('mandatory')
cktBc = MibTableColumn((1, 3, 6, 1, 4, 1, 277, 1, 6, 1, 1, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cktBc.setStatus('mandatory')
cktBe = MibTableColumn((1, 3, 6, 1, 4, 1, 277, 1, 6, 1, 1, 6), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cktBe.setStatus('mandatory')
cktDestNodeId = MibTableColumn((1, 3, 6, 1, 4, 1, 277, 1, 6, 1, 1, 7), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cktDestNodeId.setStatus('mandatory')
cktDestIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 277, 1, 6, 1, 1, 8), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cktDestIfIndex.setStatus('mandatory')
cktDestDlci = MibTableColumn((1, 3, 6, 1, 4, 1, 277, 1, 6, 1, 1, 9), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cktDestDlci.setStatus('mandatory')
cktTos = MibTableColumn((1, 3, 6, 1, 4, 1, 277, 1, 6, 1, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("committed", 1), ("shared", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cktTos.setStatus('mandatory')
cktOde = MibTableColumn((1, 3, 6, 1, 4, 1, 277, 1, 6, 1, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("on", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cktOde.setStatus('mandatory')
cktAdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 277, 1, 6, 1, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("down", 1), ("up", 2))).clone('up')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cktAdminStatus.setStatus('mandatory')
cktCreationTime = MibTableColumn((1, 3, 6, 1, 4, 1, 277, 1, 6, 1, 1, 13), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cktCreationTime.setStatus('mandatory')
cktLastTimeChange = MibTableColumn((1, 3, 6, 1, 4, 1, 277, 1, 6, 1, 1, 14), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cktLastTimeChange.setStatus('mandatory')
cktVcState = MibTableColumn((1, 3, 6, 1, 4, 1, 277, 1, 6, 1, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12))).clone(namedValues=NamedValues(("inactive", 1), ("retry", 2), ("calling", 3), ("wcbdeact", 4), ("wcbdelete", 5), ("active", 6), ("svcall", 7), ("svclr", 8), ("backedup", 9), ("wcbbkdp", 10), ("wcbreact", 11), ("slowretry", 12)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cktVcState.setStatus('mandatory')
cktDceState = MibTableColumn((1, 3, 6, 1, 4, 1, 277, 1, 6, 1, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("inactive", 1), ("active", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cktDceState.setStatus('mandatory')
cktDteStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 277, 1, 6, 1, 1, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("inactive", 1), ("active", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cktDteStatus.setStatus('mandatory')
cktRnr = MibTableColumn((1, 3, 6, 1, 4, 1, 277, 1, 6, 1, 1, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("recvnotready", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cktRnr.setStatus('mandatory')
cktNiDown = MibTableColumn((1, 3, 6, 1, 4, 1, 277, 1, 6, 1, 1, 19), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("nidown", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cktNiDown.setStatus('mandatory')
cktDteState = MibTableColumn((1, 3, 6, 1, 4, 1, 277, 1, 6, 1, 1, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("inactive", 1), ("active", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cktDteState.setStatus('mandatory')
cktOperStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 277, 1, 6, 1, 1, 21), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("inactive", 1), ("active", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cktOperStatus.setStatus('mandatory')
cktOutForward = MibTableColumn((1, 3, 6, 1, 4, 1, 277, 1, 6, 1, 1, 22), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("on", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cktOutForward.setStatus('mandatory')
cktRerouteCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 277, 1, 6, 1, 1, 23), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cktRerouteCnt.setStatus('mandatory')
cktVcPtr = MibTableColumn((1, 3, 6, 1, 4, 1, 277, 1, 6, 1, 1, 24), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cktVcPtr.setStatus('mandatory')
cktHopCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 277, 1, 6, 1, 1, 25), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cktHopCnt.setStatus('mandatory')
cktPath = MibTableColumn((1, 3, 6, 1, 4, 1, 277, 1, 6, 1, 1, 26), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cktPath.setStatus('mandatory')
cktFailReason = MibTableColumn((1, 3, 6, 1, 4, 1, 277, 1, 6, 1, 1, 27), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33))).clone(namedValues=NamedValues(("admindown", 1), ("novcbuff", 2), ("nobw", 3), ("noroute", 4), ("timeout", 5), ("nopdubuff", 6), ("nodest", 7), ("trkrnr", 8), ("trkdown", 9), ("balancereroute", 10), ("dead", 11), ("defpathreroute", 12), ("nidown", 13), ("otherpvcsegdown", 14), ("otherpvcsegrnr", 15), ("usingaltpathwarning", 16), ("iopdown", 17), ("numsgbuffer", 18), ("noport", 19), ("misconfig", 20), ("svcsetupfail", 21), ("srcbackedup", 22), ("srcunknown", 23), ("dstunknown", 24), ("bkpdlcicollision", 25), ("oldrevinpath", 26), ("smdsmgmttrunk", 27), ("nevercalled", 28), ("bothendptbackup", 29), ("pvcroutemgttrunk", 30), ("nomultipointparent", 31), ("pvcroutefail", 32), ("novpivci", 33)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cktFailReason.setStatus('mandatory')
cktFailNode = MibTableColumn((1, 3, 6, 1, 4, 1, 277, 1, 6, 1, 1, 28), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cktFailNode.setStatus('mandatory')
cktFailPort = MibTableColumn((1, 3, 6, 1, 4, 1, 277, 1, 6, 1, 1, 29), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cktFailPort.setStatus('mandatory')
cktMcastGroupId = MibTableColumn((1, 3, 6, 1, 4, 1, 277, 1, 6, 1, 1, 30), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cktMcastGroupId.setStatus('mandatory')
cktMcastMemberList = MibTableColumn((1, 3, 6, 1, 4, 1, 277, 1, 6, 1, 1, 31), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cktMcastMemberList.setStatus('mandatory')
cktMcastParentGroups = MibTableColumn((1, 3, 6, 1, 4, 1, 277, 1, 6, 1, 1, 32), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cktMcastParentGroups.setStatus('mandatory')
cktInFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 277, 1, 6, 1, 1, 33), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cktInFrames.setStatus('mandatory')
cktInDEFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 277, 1, 6, 1, 1, 34), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cktInDEFrames.setStatus('mandatory')
cktInODEFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 277, 1, 6, 1, 1, 35), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cktInODEFrames.setStatus('mandatory')
cktInFECNFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 277, 1, 6, 1, 1, 36), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cktInFECNFrames.setStatus('mandatory')
cktInBECNFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 277, 1, 6, 1, 1, 37), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cktInBECNFrames.setStatus('mandatory')
cktInDiscards = MibTableColumn((1, 3, 6, 1, 4, 1, 277, 1, 6, 1, 1, 38), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cktInDiscards.setStatus('mandatory')
cktInOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 277, 1, 6, 1, 1, 39), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cktInOctets.setStatus('mandatory')
cktInDEOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 277, 1, 6, 1, 1, 40), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cktInDEOctets.setStatus('mandatory')
cktInODEOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 277, 1, 6, 1, 1, 41), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cktInODEOctets.setStatus('mandatory')
cktOutFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 277, 1, 6, 1, 1, 42), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cktOutFrames.setStatus('mandatory')
cktOutDEFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 277, 1, 6, 1, 1, 43), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cktOutDEFrames.setStatus('mandatory')
cktOutODEFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 277, 1, 6, 1, 1, 44), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cktOutODEFrames.setStatus('mandatory')
cktOutFECNFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 277, 1, 6, 1, 1, 45), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cktOutFECNFrames.setStatus('mandatory')
cktOutBECNFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 277, 1, 6, 1, 1, 46), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cktOutBECNFrames.setStatus('mandatory')
cktOutOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 277, 1, 6, 1, 1, 47), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cktOutOctets.setStatus('mandatory')
cktOutDEOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 277, 1, 6, 1, 1, 48), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cktOutDEOctets.setStatus('mandatory')
cktOutODEOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 277, 1, 6, 1, 1, 49), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cktOutODEOctets.setStatus('mandatory')
cktOutLostFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 277, 1, 6, 1, 1, 50), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cktOutLostFrames.setStatus('mandatory')
cktOutLostDEFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 277, 1, 6, 1, 1, 51), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cktOutLostDEFrames.setStatus('mandatory')
cktOutLostODEFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 277, 1, 6, 1, 1, 52), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cktOutLostODEFrames.setStatus('mandatory')
cktOutLostOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 277, 1, 6, 1, 1, 53), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cktOutLostOctets.setStatus('mandatory')
cktOutLostDEOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 277, 1, 6, 1, 1, 54), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cktOutLostDEOctets.setStatus('mandatory')
cktOutLostODEOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 277, 1, 6, 1, 1, 55), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cktOutLostODEOctets.setStatus('mandatory')
cktRtMinDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 277, 1, 6, 1, 1, 56), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cktRtMinDelay.setStatus('mandatory')
cktRtMaxDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 277, 1, 6, 1, 1, 57), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cktRtMaxDelay.setStatus('mandatory')
cktRtAvgDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 277, 1, 6, 1, 1, 58), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cktRtAvgDelay.setStatus('mandatory')
cktDiagTestId = MibTableColumn((1, 3, 6, 1, 4, 1, 277, 1, 6, 1, 1, 59), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cktDiagTestId.setStatus('mandatory')
cktDiagTestRuns = MibTableColumn((1, 3, 6, 1, 4, 1, 277, 1, 6, 1, 1, 60), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cktDiagTestRuns.setStatus('mandatory')
cktHelloCounter = MibTableColumn((1, 3, 6, 1, 4, 1, 277, 1, 6, 1, 1, 61), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cktHelloCounter.setStatus('mandatory')
cktHelloAckCounter = MibTableColumn((1, 3, 6, 1, 4, 1, 277, 1, 6, 1, 1, 62), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cktHelloAckCounter.setStatus('mandatory')
cktDefinedPath = MibTableColumn((1, 3, 6, 1, 4, 1, 277, 1, 6, 1, 1, 63), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cktDefinedPath.setStatus('mandatory')
cktDefinedPathCount = MibTableColumn((1, 3, 6, 1, 4, 1, 277, 1, 6, 1, 1, 64), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cktDefinedPathCount.setStatus('mandatory')
cktDefinedPathEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 277, 1, 6, 1, 1, 65), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cktDefinedPathEnable.setStatus('mandatory')
cktDefinedPathAltOption = MibTableColumn((1, 3, 6, 1, 4, 1, 277, 1, 6, 1, 1, 66), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cktDefinedPathAltOption.setStatus('mandatory')
cktUsingDefinedPath = MibTableColumn((1, 3, 6, 1, 4, 1, 277, 1, 6, 1, 1, 67), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cktUsingDefinedPath.setStatus('mandatory')
cktTryAltPath = MibTableColumn((1, 3, 6, 1, 4, 1, 277, 1, 6, 1, 1, 68), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cktTryAltPath.setStatus('mandatory')
cktNotVirgin = MibTableColumn((1, 3, 6, 1, 4, 1, 277, 1, 6, 1, 1, 69), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cktNotVirgin.setStatus('mandatory')
cktInForward = MibTableColumn((1, 3, 6, 1, 4, 1, 277, 1, 6, 1, 1, 70), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cktInForward.setStatus('mandatory')
cktBtusSeg = MibTableColumn((1, 3, 6, 1, 4, 1, 277, 1, 6, 1, 1, 71), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cktBtusSeg.setStatus('mandatory')
cktInSegmentsDiscards = MibTableColumn((1, 3, 6, 1, 4, 1, 277, 1, 6, 1, 1, 72), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cktInSegmentsDiscards.setStatus('mandatory')
cktAtmVPI = MibTableColumn((1, 3, 6, 1, 4, 1, 277, 1, 6, 1, 1, 73), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cktAtmVPI.setStatus('mandatory')
cktAtmVCI = MibTableColumn((1, 3, 6, 1, 4, 1, 277, 1, 6, 1, 1, 74), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cktAtmVCI.setStatus('mandatory')
cktType = MibTableColumn((1, 3, 6, 1, 4, 1, 277, 1, 6, 1, 1, 75), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("pvc", 1), ("svc", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cktType.setStatus('mandatory')
cktSvcCallingParty = MibTableColumn((1, 3, 6, 1, 4, 1, 277, 1, 6, 1, 1, 76), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cktSvcCallingParty.setStatus('mandatory')
cktSvcCalledParty = MibTableColumn((1, 3, 6, 1, 4, 1, 277, 1, 6, 1, 1, 77), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cktSvcCalledParty.setStatus('mandatory')
cktSvcDuration = MibTableColumn((1, 3, 6, 1, 4, 1, 277, 1, 6, 1, 1, 78), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cktSvcDuration.setStatus('mandatory')
cktSvcCause = MibTableColumn((1, 3, 6, 1, 4, 1, 277, 1, 6, 1, 1, 79), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cktSvcCause.setStatus('mandatory')
cktXlatFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 277, 1, 6, 1, 1, 80), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("rfc1483", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cktXlatFlag.setStatus('mandatory')
cktDestLaddr = MibTableColumn((1, 3, 6, 1, 4, 1, 277, 1, 6, 1, 1, 81), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cktDestLaddr.setStatus('mandatory')
cktSrcLaddr = MibTableColumn((1, 3, 6, 1, 4, 1, 277, 1, 6, 1, 1, 82), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cktSrcLaddr.setStatus('mandatory')
cktLoop = MibTableColumn((1, 3, 6, 1, 4, 1, 277, 1, 6, 1, 1, 83), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("local", 1), ("remote", 2), ("both", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cktLoop.setStatus('mandatory')
cktRerouteBalance = MibTableColumn((1, 3, 6, 1, 4, 1, 277, 1, 6, 1, 1, 84), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("disabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cktRerouteBalance.setStatus('mandatory')
cktCallingBackup = MibTableColumn((1, 3, 6, 1, 4, 1, 277, 1, 6, 1, 1, 85), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("true", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cktCallingBackup.setStatus('mandatory')
cktRCir = MibTableColumn((1, 3, 6, 1, 4, 1, 277, 1, 6, 1, 1, 86), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cktRCir.setStatus('mandatory')
cktAtmQoS = MibTableColumn((1, 3, 6, 1, 4, 1, 277, 1, 6, 1, 1, 87), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("cbr", 1), ("vbr1", 2), ("vbr2", 3), ("vbr3", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cktAtmQoS.setStatus('mandatory')
cktAtmInCells = MibTableColumn((1, 3, 6, 1, 4, 1, 277, 1, 6, 1, 1, 88), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cktAtmInCells.setStatus('mandatory')
cktAtmOutCells = MibTableColumn((1, 3, 6, 1, 4, 1, 277, 1, 6, 1, 1, 89), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cktAtmOutCells.setStatus('mandatory')
cktAtmInDiscardedClp0Cells = MibTableColumn((1, 3, 6, 1, 4, 1, 277, 1, 6, 1, 1, 90), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cktAtmInDiscardedClp0Cells.setStatus('mandatory')
cktAtmInDiscardedClp1Cells = MibTableColumn((1, 3, 6, 1, 4, 1, 277, 1, 6, 1, 1, 91), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cktAtmInDiscardedClp1Cells.setStatus('mandatory')
cktAtmVcType = MibTableColumn((1, 3, 6, 1, 4, 1, 277, 1, 6, 1, 1, 92), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("vpc", 1), ("vcc", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cktAtmVcType.setStatus('mandatory')
cktAtmPCR = MibTableColumn((1, 3, 6, 1, 4, 1, 277, 1, 6, 1, 1, 93), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cktAtmPCR.setStatus('mandatory')
cktAtmSCR = MibTableColumn((1, 3, 6, 1, 4, 1, 277, 1, 6, 1, 1, 94), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cktAtmSCR.setStatus('mandatory')
cktAtmMBS = MibTableColumn((1, 3, 6, 1, 4, 1, 277, 1, 6, 1, 1, 95), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cktAtmMBS.setStatus('mandatory')
cktAtmInPassedClp0Cells = MibTableColumn((1, 3, 6, 1, 4, 1, 277, 1, 6, 1, 1, 96), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cktAtmInPassedClp0Cells.setStatus('mandatory')
cktAtmInPassedClp1Cells = MibTableColumn((1, 3, 6, 1, 4, 1, 277, 1, 6, 1, 1, 97), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cktAtmInPassedClp1Cells.setStatus('mandatory')
cktAtmInTaggedCells = MibTableColumn((1, 3, 6, 1, 4, 1, 277, 1, 6, 1, 1, 98), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cktAtmInTaggedCells.setStatus('mandatory')
cktAtmOutClp0Cells = MibTableColumn((1, 3, 6, 1, 4, 1, 277, 1, 6, 1, 1, 99), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cktAtmOutClp0Cells.setStatus('mandatory')
cktAtmOutClp1Cells = MibTableColumn((1, 3, 6, 1, 4, 1, 277, 1, 6, 1, 1, 100), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cktAtmOutClp1Cells.setStatus('mandatory')
cktAtmRQoS = MibTableColumn((1, 3, 6, 1, 4, 1, 277, 1, 6, 1, 1, 101), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("cbr", 1), ("vbr1", 2), ("vbr2", 3), ("vbr3", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cktAtmRQoS.setStatus('mandatory')
cktAtmTfdType = MibTableColumn((1, 3, 6, 1, 4, 1, 277, 1, 6, 1, 1, 102), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("pcr-0-01", 1), ("pcr-0-01-tag", 2), ("pcr-01-scr-0-mbs-0", 3), ("pcr-01-scr-0-mbs-0-tag", 4), ("pcr-01", 5), ("pcr-01-scr-01-mbs-01", 6), ("pcr-01-bestEffort", 7)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cktAtmTfdType.setStatus('mandatory')
cktAtmRTfdType = MibTableColumn((1, 3, 6, 1, 4, 1, 277, 1, 6, 1, 1, 103), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("pcr-0-01", 1), ("pcr-0-01-tag", 2), ("pcr-01-scr-0-mbs-0", 3), ("pcr-01-scr-0-mbs-0-tag", 4), ("pcr-01", 5), ("pcr-01-scr-01-mbs-01", 6), ("pcr-01-bestEffort", 7)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cktAtmRTfdType.setStatus('mandatory')
cktAtmTfdParam1 = MibTableColumn((1, 3, 6, 1, 4, 1, 277, 1, 6, 1, 1, 104), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cktAtmTfdParam1.setStatus('mandatory')
cktAtmTfdParam2 = MibTableColumn((1, 3, 6, 1, 4, 1, 277, 1, 6, 1, 1, 105), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cktAtmTfdParam2.setStatus('mandatory')
cktAtmTfdParam3 = MibTableColumn((1, 3, 6, 1, 4, 1, 277, 1, 6, 1, 1, 106), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cktAtmTfdParam3.setStatus('mandatory')
cktAtmRTfdParam1 = MibTableColumn((1, 3, 6, 1, 4, 1, 277, 1, 6, 1, 1, 107), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cktAtmRTfdParam1.setStatus('mandatory')
cktAtmRTfdParam2 = MibTableColumn((1, 3, 6, 1, 4, 1, 277, 1, 6, 1, 1, 108), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cktAtmRTfdParam2.setStatus('mandatory')
cktAtmRTfdParam3 = MibTableColumn((1, 3, 6, 1, 4, 1, 277, 1, 6, 1, 1, 109), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cktAtmRTfdParam3.setStatus('mandatory')
cktAtmFrameIWF = MibTableColumn((1, 3, 6, 1, 4, 1, 277, 1, 6, 1, 1, 110), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("default", 1), ("iwf", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cktAtmFrameIWF.setStatus('mandatory')
cktAtmUserPlane = MibTableColumn((1, 3, 6, 1, 4, 1, 277, 1, 6, 1, 1, 111), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("point-to-point", 1), ("point-to-multipoint", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cktAtmUserPlane.setStatus('mandatory')
cktRBc = MibTableColumn((1, 3, 6, 1, 4, 1, 277, 1, 6, 1, 1, 112), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cktRBc.setStatus('mandatory')
cktRBe = MibTableColumn((1, 3, 6, 1, 4, 1, 277, 1, 6, 1, 1, 113), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cktRBe.setStatus('mandatory')
cktOamLoopbackDirection = MibTableColumn((1, 3, 6, 1, 4, 1, 277, 1, 6, 1, 1, 114), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("local", 1), ("remote", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cktOamLoopbackDirection.setStatus('mandatory')
cktOamLoopbackType = MibTableColumn((1, 3, 6, 1, 4, 1, 277, 1, 6, 1, 1, 115), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("segment", 1), ("end-to-end", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cktOamLoopbackType.setStatus('mandatory')
cktOamLoopbackHops = MibTableColumn((1, 3, 6, 1, 4, 1, 277, 1, 6, 1, 1, 116), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cktOamLoopbackHops.setStatus('mandatory')
cktOamLoopbackCount = MibTableColumn((1, 3, 6, 1, 4, 1, 277, 1, 6, 1, 1, 117), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cktOamLoopbackCount.setStatus('mandatory')
cktOamLoopbackReceived = MibTableColumn((1, 3, 6, 1, 4, 1, 277, 1, 6, 1, 1, 118), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cktOamLoopbackReceived.setStatus('mandatory')
cktOamLoopbackTimeouts = MibTableColumn((1, 3, 6, 1, 4, 1, 277, 1, 6, 1, 1, 119), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cktOamLoopbackTimeouts.setStatus('mandatory')
cktOamLoopbackReceivedHigh = MibTableColumn((1, 3, 6, 1, 4, 1, 277, 1, 6, 1, 1, 120), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cktOamLoopbackReceivedHigh.setStatus('mandatory')
cktOamLoopbackReceivedLow = MibTableColumn((1, 3, 6, 1, 4, 1, 277, 1, 6, 1, 1, 121), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cktOamLoopbackReceivedLow.setStatus('mandatory')
cktOamLoopbackReceivedAvg = MibTableColumn((1, 3, 6, 1, 4, 1, 277, 1, 6, 1, 1, 122), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cktOamLoopbackReceivedAvg.setStatus('mandatory')
cktOamAlarmDisable = MibTableColumn((1, 3, 6, 1, 4, 1, 277, 1, 6, 1, 1, 123), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cktOamAlarmDisable.setStatus('mandatory')
cktShaperId = MibTableColumn((1, 3, 6, 1, 4, 1, 277, 1, 6, 1, 1, 124), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cktShaperId.setStatus('mandatory')
cktOspfCtd = MibTableColumn((1, 3, 6, 1, 4, 1, 277, 1, 6, 1, 1, 125), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 100))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cktOspfCtd.setStatus('mandatory')
cktOspfCdv = MibTableColumn((1, 3, 6, 1, 4, 1, 277, 1, 6, 1, 1, 126), Integer32().subtype(subtypeSpec=ValueRangeConstraint(100, 1000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cktOspfCdv.setStatus('mandatory')
cktOutPort = MibTableColumn((1, 3, 6, 1, 4, 1, 277, 1, 6, 1, 1, 127), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cktOutPort.setStatus('mandatory')
cktOutVc = MibTableColumn((1, 3, 6, 1, 4, 1, 277, 1, 6, 1, 1, 128), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cktOutVc.setStatus('mandatory')
cktRVc = MibTableColumn((1, 3, 6, 1, 4, 1, 277, 1, 6, 1, 1, 129), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cktRVc.setStatus('mandatory')
cktEntryType = MibTableColumn((1, 3, 6, 1, 4, 1, 277, 1, 6, 1, 1, 130), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11))).clone(namedValues=NamedValues(("fr-user", 1), ("as-trunk", 2), ("on-trunk", 3), ("lmi", 4), ("multicast", 5), ("mgmt", 6), ("smds", 7), ("split-multicast", 8), ("control", 9), ("atm-user", 10), ("atm-leaf", 11)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cktEntryType.setStatus('mandatory')
cktDiagStr = MibTableColumn((1, 3, 6, 1, 4, 1, 277, 1, 6, 1, 1, 131), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cktDiagStr.setStatus('mandatory')
cktSvcAalType = MibTableColumn((1, 3, 6, 1, 4, 1, 277, 1, 6, 1, 1, 132), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("aal1", 1), ("unspecified", 2), ("aal3-4", 3), ("user-defined", 4), ("aal5", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cktSvcAalType.setStatus('mandatory')
cktSvcBBearerClass = MibTableColumn((1, 3, 6, 1, 4, 1, 277, 1, 6, 1, 1, 133), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("unspecified", 1), ("class-A", 2), ("class-C", 3), ("class-X", 4), ("class-VP", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cktSvcBBearerClass.setStatus('mandatory')
cktSvcBBearerClippingSusc = MibTableColumn((1, 3, 6, 1, 4, 1, 277, 1, 6, 1, 1, 134), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("unspecified", 1), ("not-susceptible", 2), ("susceptible", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cktSvcBBearerClippingSusc.setStatus('mandatory')
cktSvcBBearerTmgReq = MibTableColumn((1, 3, 6, 1, 4, 1, 277, 1, 6, 1, 1, 135), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("not-indicated", 1), ("end-to-end", 2), ("not-end-to-end", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cktSvcBBearerTmgReq.setStatus('mandatory')
cktSvcBBearerTfcType = MibTableColumn((1, 3, 6, 1, 4, 1, 277, 1, 6, 1, 1, 136), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("not-indicated", 1), ("cbr", 2), ("vbr", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cktSvcBBearerTfcType.setStatus('mandatory')
cktAtmUPCEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 277, 1, 6, 1, 1, 137), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cktAtmUPCEnable.setStatus('mandatory')
cktRPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 277, 1, 6, 1, 1, 138), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cktRPriority.setStatus('mandatory')
cktRtPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 277, 1, 6, 1, 1, 139), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cktRtPriority.setStatus('mandatory')
cktDeltaBc = MibTableColumn((1, 3, 6, 1, 4, 1, 277, 1, 6, 1, 1, 140), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cktDeltaBc.setStatus('mandatory')
cktDeltaBe = MibTableColumn((1, 3, 6, 1, 4, 1, 277, 1, 6, 1, 1, 141), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cktDeltaBe.setStatus('mandatory')
cktDeltaRBc = MibTableColumn((1, 3, 6, 1, 4, 1, 277, 1, 6, 1, 1, 142), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cktDeltaRBc.setStatus('mandatory')
cktDeltaRBe = MibTableColumn((1, 3, 6, 1, 4, 1, 277, 1, 6, 1, 1, 143), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cktDeltaRBe.setStatus('mandatory')
cktRedFrPcnt = MibTableColumn((1, 3, 6, 1, 4, 1, 277, 1, 6, 1, 1, 144), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cktRedFrPcnt.setStatus('mandatory')
cktRedFrRPcnt = MibTableColumn((1, 3, 6, 1, 4, 1, 277, 1, 6, 1, 1, 145), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cktRedFrRPcnt.setStatus('mandatory')
cktRateEnforceSchm = MibTableColumn((1, 3, 6, 1, 4, 1, 277, 1, 6, 1, 1, 146), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("jump", 1), ("simple", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cktRateEnforceSchm.setStatus('mandatory')
cktRateEnforceRSchm = MibTableColumn((1, 3, 6, 1, 4, 1, 277, 1, 6, 1, 1, 147), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("jump", 1), ("simple", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cktRateEnforceRSchm.setStatus('mandatory')
cktROde = MibTableColumn((1, 3, 6, 1, 4, 1, 277, 1, 6, 1, 1, 148), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("on", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cktROde.setStatus('mandatory')
cktPrivateNet = MibTableColumn((1, 3, 6, 1, 4, 1, 277, 1, 6, 1, 1, 149), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cktPrivateNet.setStatus('mandatory')
cktPrivateNetOverflow = MibTableColumn((1, 3, 6, 1, 4, 1, 277, 1, 6, 1, 1, 150), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("use-public", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cktPrivateNetOverflow.setStatus('mandatory')
cktCustomerID = MibTableColumn((1, 3, 6, 1, 4, 1, 277, 1, 6, 1, 1, 151), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cktCustomerID.setStatus('mandatory')
cktAtmCDVT = MibTableColumn((1, 3, 6, 1, 4, 1, 277, 1, 6, 1, 1, 152), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cktAtmCDVT.setStatus('mandatory')
cktNdcEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 277, 1, 6, 1, 1, 153), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("off", 1), ("on", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cktNdcEnable.setStatus('mandatory')
cktInterworkingFrToAtmCLP = MibTableColumn((1, 3, 6, 1, 4, 1, 277, 1, 6, 1, 1, 154), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("clp1", 1), ("fr-de", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cktInterworkingFrToAtmCLP.setStatus('mandatory')
cktInterworkingFrToAtmDe = MibTableColumn((1, 3, 6, 1, 4, 1, 277, 1, 6, 1, 1, 155), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("de1", 1), ("atm-clp", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cktInterworkingFrToAtmDe.setStatus('mandatory')
cktNrtsCLP1 = MibTableColumn((1, 3, 6, 1, 4, 1, 277, 1, 6, 1, 1, 156), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cktNrtsCLP1.setStatus('mandatory')
cktNrtsDiscardClp0 = MibTableColumn((1, 3, 6, 1, 4, 1, 277, 1, 6, 1, 1, 157), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cktNrtsDiscardClp0.setStatus('mandatory')
cktNrtsDiscardClp1 = MibTableColumn((1, 3, 6, 1, 4, 1, 277, 1, 6, 1, 1, 158), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cktNrtsDiscardClp1.setStatus('mandatory')
cktMPEnableAMF = MibTableColumn((1, 3, 6, 1, 4, 1, 277, 1, 6, 1, 1, 159), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disableAMF", 1), ("enableAMF", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cktMPEnableAMF.setStatus('mandatory')
cktMPEligible = MibTableColumn((1, 3, 6, 1, 4, 1, 277, 1, 6, 1, 1, 160), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("isMPEligible", 1), ("isNotMPEligible", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cktMPEligible.setStatus('mandatory')
cktMPForcedCaller = MibTableColumn((1, 3, 6, 1, 4, 1, 277, 1, 6, 1, 1, 161), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("isMPForcedCaller", 1), ("isNotMPForcedCaller", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cktMPForcedCaller.setStatus('mandatory')
cktMPForcedCallee = MibTableColumn((1, 3, 6, 1, 4, 1, 277, 1, 6, 1, 1, 162), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("isMPForcedCallee", 1), ("isNotMPForcedCallee", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cktMPForcedCallee.setStatus('mandatory')
cktFrameSize = MibTableColumn((1, 3, 6, 1, 4, 1, 277, 1, 6, 1, 1, 163), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cktFrameSize.setStatus('mandatory')
cktRFrameSize = MibTableColumn((1, 3, 6, 1, 4, 1, 277, 1, 6, 1, 1, 164), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cktRFrameSize.setStatus('mandatory')
cktRNrtsCLP1 = MibTableColumn((1, 3, 6, 1, 4, 1, 277, 1, 6, 1, 1, 165), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cktRNrtsCLP1.setStatus('mandatory')
cktBBearerAtmTransferCapability = MibTableColumn((1, 3, 6, 1, 4, 1, 277, 1, 6, 1, 1, 166), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("none", 1), ("cbr", 2), ("cbr-with-clr-01", 3), ("vbr-rt", 4), ("vbr-rt-with-clr-01", 5), ("vbr-nrt", 6), ("vbr-nrt-with-clr-01", 7), ("abr", 8)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cktBBearerAtmTransferCapability.setStatus('mandatory')
cktAtmFrameDiscard = MibTableColumn((1, 3, 6, 1, 4, 1, 277, 1, 6, 1, 1, 167), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cktAtmFrameDiscard.setStatus('mandatory')
cktRAtmFrameDiscard = MibTableColumn((1, 3, 6, 1, 4, 1, 277, 1, 6, 1, 1, 168), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cktRAtmFrameDiscard.setStatus('mandatory')
cktAbrFRMRTT = MibTableColumn((1, 3, 6, 1, 4, 1, 277, 1, 6, 1, 1, 169), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cktAbrFRMRTT.setStatus('mandatory')
cktAbrICR = MibTableColumn((1, 3, 6, 1, 4, 1, 277, 1, 6, 1, 1, 170), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cktAbrICR.setStatus('mandatory')
cktRAbrICR = MibTableColumn((1, 3, 6, 1, 4, 1, 277, 1, 6, 1, 1, 171), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cktRAbrICR.setStatus('mandatory')
cktAbrRIF = MibTableColumn((1, 3, 6, 1, 4, 1, 277, 1, 6, 1, 1, 172), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cktAbrRIF.setStatus('mandatory')
cktRAbrRIF = MibTableColumn((1, 3, 6, 1, 4, 1, 277, 1, 6, 1, 1, 173), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cktRAbrRIF.setStatus('mandatory')
cktAbrRDF = MibTableColumn((1, 3, 6, 1, 4, 1, 277, 1, 6, 1, 1, 174), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cktAbrRDF.setStatus('mandatory')
cktRAbrRDF = MibTableColumn((1, 3, 6, 1, 4, 1, 277, 1, 6, 1, 1, 175), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cktRAbrRDF.setStatus('mandatory')
cktAbrTBE = MibTableColumn((1, 3, 6, 1, 4, 1, 277, 1, 6, 1, 1, 176), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cktAbrTBE.setStatus('mandatory')
cktRAbrTBE = MibTableColumn((1, 3, 6, 1, 4, 1, 277, 1, 6, 1, 1, 177), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cktRAbrTBE.setStatus('mandatory')
cktAbrNRM = MibTableColumn((1, 3, 6, 1, 4, 1, 277, 1, 6, 1, 1, 178), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cktAbrNRM.setStatus('mandatory')
cktRAbrNRM = MibTableColumn((1, 3, 6, 1, 4, 1, 277, 1, 6, 1, 1, 179), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cktRAbrNRM.setStatus('mandatory')
cktAbrTRM = MibTableColumn((1, 3, 6, 1, 4, 1, 277, 1, 6, 1, 1, 180), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cktAbrTRM.setStatus('mandatory')
cktRAbrTRM = MibTableColumn((1, 3, 6, 1, 4, 1, 277, 1, 6, 1, 1, 181), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cktRAbrTRM.setStatus('mandatory')
cktAbrCDF = MibTableColumn((1, 3, 6, 1, 4, 1, 277, 1, 6, 1, 1, 182), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cktAbrCDF.setStatus('mandatory')
cktRAbrCDF = MibTableColumn((1, 3, 6, 1, 4, 1, 277, 1, 6, 1, 1, 183), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cktRAbrCDF.setStatus('mandatory')
cktAbrADTF = MibTableColumn((1, 3, 6, 1, 4, 1, 277, 1, 6, 1, 1, 184), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cktAbrADTF.setStatus('mandatory')
cktRAbrADTF = MibTableColumn((1, 3, 6, 1, 4, 1, 277, 1, 6, 1, 1, 185), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cktRAbrADTF.setStatus('mandatory')
cktAccumCTD = MibTableColumn((1, 3, 6, 1, 4, 1, 277, 1, 6, 1, 1, 186), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cktAccumCTD.setStatus('mandatory')
cktAccumCDV = MibTableColumn((1, 3, 6, 1, 4, 1, 277, 1, 6, 1, 1, 187), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cktAccumCDV.setStatus('mandatory')
cktAccumRCDV = MibTableColumn((1, 3, 6, 1, 4, 1, 277, 1, 6, 1, 1, 188), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cktAccumRCDV.setStatus('mandatory')
cktCLR = MibTableColumn((1, 3, 6, 1, 4, 1, 277, 1, 6, 1, 1, 189), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cktCLR.setStatus('mandatory')
cktRCLR = MibTableColumn((1, 3, 6, 1, 4, 1, 277, 1, 6, 1, 1, 190), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cktRCLR.setStatus('mandatory')
cktAtmLijId = MibTableColumn((1, 3, 6, 1, 4, 1, 277, 1, 6, 1, 1, 191), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cktAtmLijId.setStatus('mandatory')
cktAtmLijType = MibTableColumn((1, 3, 6, 1, 4, 1, 277, 1, 6, 1, 1, 192), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("not-lij", 1), ("root-lij", 2), ("network-lij", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cktAtmLijType.setStatus('mandatory')
cktRtLastDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 277, 1, 6, 1, 1, 193), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cktRtLastDelay.setStatus('mandatory')
cktRtAccuMinDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 277, 1, 6, 1, 1, 194), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cktRtAccuMinDelay.setStatus('mandatory')
cktRtAccuMaxDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 277, 1, 6, 1, 1, 195), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cktRtAccuMaxDelay.setStatus('mandatory')
cktRtAccuAvgDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 277, 1, 6, 1, 1, 196), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cktRtAccuAvgDelay.setStatus('mandatory')
cktQosIntPeriod = MibTableColumn((1, 3, 6, 1, 4, 1, 277, 1, 6, 1, 1, 197), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cktQosIntPeriod.setStatus('mandatory')
cktAtmOutOAMClp0Cells = MibTableColumn((1, 3, 6, 1, 4, 1, 277, 1, 6, 1, 1, 198), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cktAtmOutOAMClp0Cells.setStatus('mandatory')
cktAtmOutOAMClp1Cells = MibTableColumn((1, 3, 6, 1, 4, 1, 277, 1, 6, 1, 1, 199), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cktAtmOutOAMClp1Cells.setStatus('mandatory')
cktReqCTD = MibTableColumn((1, 3, 6, 1, 4, 1, 277, 1, 6, 1, 1, 200), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cktReqCTD.setStatus('mandatory')
cktInOctetsPeak = MibTableColumn((1, 3, 6, 1, 4, 1, 277, 1, 6, 1, 1, 201), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cktInOctetsPeak.setStatus('mandatory')
cktOutOctetsPeak = MibTableColumn((1, 3, 6, 1, 4, 1, 277, 1, 6, 1, 1, 202), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cktOutOctetsPeak.setStatus('mandatory')
cktInDEOctetsPeak = MibTableColumn((1, 3, 6, 1, 4, 1, 277, 1, 6, 1, 1, 203), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cktInDEOctetsPeak.setStatus('mandatory')
cktOutDEOctetsPeak = MibTableColumn((1, 3, 6, 1, 4, 1, 277, 1, 6, 1, 1, 204), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cktOutDEOctetsPeak.setStatus('mandatory')
cktInODEOctetsPeak = MibTableColumn((1, 3, 6, 1, 4, 1, 277, 1, 6, 1, 1, 205), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cktInODEOctetsPeak.setStatus('mandatory')
cktOutODEOctetsPeak = MibTableColumn((1, 3, 6, 1, 4, 1, 277, 1, 6, 1, 1, 206), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cktOutODEOctetsPeak.setStatus('mandatory')
cktAdminCostThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 277, 1, 6, 1, 1, 207), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cktAdminCostThreshold.setStatus('mandatory')
cktAtmSvcServiceCategory = MibTableColumn((1, 3, 6, 1, 4, 1, 277, 1, 6, 1, 1, 208), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("cbr", 1), ("vbr1", 2), ("vbr2", 3), ("ubr-abr", 4), ("unspecified", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cktAtmSvcServiceCategory.setStatus('mandatory')
cktAtmSvcRServiceCategory = MibTableColumn((1, 3, 6, 1, 4, 1, 277, 1, 6, 1, 1, 209), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("cbr", 1), ("vbr1", 2), ("vbr2", 3), ("ubr-abr", 4), ("unspecified", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cktAtmSvcRServiceCategory.setStatus('mandatory')
cktInterworkingFrToAtmEFCI = MibTableColumn((1, 3, 6, 1, 4, 1, 277, 1, 6, 1, 1, 210), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("fr-fecn", 1), ("efci0", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cktInterworkingFrToAtmEFCI.setStatus('mandatory')
cktDiagSARMon = MibTableColumn((1, 3, 6, 1, 4, 1, 277, 1, 6, 1, 1, 211), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("flowOnInbound", 1), ("flowOffInbound", 2), ("flowOnOutbound", 3), ("flowOffOutbound", 4), ("flowOnInboundOutbound", 5), ("flowOffInboundOutbound", 6)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cktDiagSARMon.setStatus('mandatory')
cktAdminCostReal = MibTableColumn((1, 3, 6, 1, 4, 1, 277, 1, 6, 1, 1, 212), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cktAdminCostReal.setStatus('mandatory')
cktAtmInClp0Cells = MibTableColumn((1, 3, 6, 1, 4, 1, 277, 1, 6, 1, 1, 213), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cktAtmInClp0Cells.setStatus('mandatory')
cktAtmInClp1Cells = MibTableColumn((1, 3, 6, 1, 4, 1, 277, 1, 6, 1, 1, 214), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cktAtmInClp1Cells.setStatus('mandatory')
cktATMAAL5CRC32Error = MibTableColumn((1, 3, 6, 1, 4, 1, 277, 1, 6, 1, 1, 215), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cktATMAAL5CRC32Error.setStatus('mandatory')
cktATMAAL5CPIError = MibTableColumn((1, 3, 6, 1, 4, 1, 277, 1, 6, 1, 1, 216), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cktATMAAL5CPIError.setStatus('mandatory')
cktATMAAL5LengthError = MibTableColumn((1, 3, 6, 1, 4, 1, 277, 1, 6, 1, 1, 217), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cktATMAAL5LengthError.setStatus('mandatory')
cktATMAAL5ReassemblyTimerError = MibTableColumn((1, 3, 6, 1, 4, 1, 277, 1, 6, 1, 1, 218), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cktATMAAL5ReassemblyTimerError.setStatus('mandatory')
cktATMAAL5MaxNrSegError = MibTableColumn((1, 3, 6, 1, 4, 1, 277, 1, 6, 1, 1, 219), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cktATMAAL5MaxNrSegError.setStatus('mandatory')
cktIWF1490to1483Error = MibTableColumn((1, 3, 6, 1, 4, 1, 277, 1, 6, 1, 1, 220), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cktIWF1490to1483Error.setStatus('mandatory')
cktIWF1490to1483LastBadHeader = MibTableColumn((1, 3, 6, 1, 4, 1, 277, 1, 6, 1, 1, 221), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cktIWF1490to1483LastBadHeader.setStatus('mandatory')
cktIWF1483to1490Error = MibTableColumn((1, 3, 6, 1, 4, 1, 277, 1, 6, 1, 1, 222), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cktIWF1483to1490Error.setStatus('mandatory')
cktIWF1483to1490LastBadHeader = MibTableColumn((1, 3, 6, 1, 4, 1, 277, 1, 6, 1, 1, 223), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cktIWF1483to1490LastBadHeader.setStatus('mandatory')
cktLeafTable = MibTable((1, 3, 6, 1, 4, 1, 277, 1, 6, 2), )
if mibBuilder.loadTexts: cktLeafTable.setStatus('mandatory')
cktLeafEntry = MibTableRow((1, 3, 6, 1, 4, 1, 277, 1, 6, 2, 1), ).setIndexNames((0, "CASCADE-MIB", "cktLeafSrcIfIndex"), (0, "CASCADE-MIB", "cktLeafSrcDlci"), (0, "CASCADE-MIB", "cktLeafEndpointIndex"))
if mibBuilder.loadTexts: cktLeafEntry.setStatus('mandatory')
cktLeafSrcIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 277, 1, 6, 2, 1, 1), Index()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cktLeafSrcIfIndex.setStatus('mandatory')
cktLeafSrcDlci = MibTableColumn((1, 3, 6, 1, 4, 1, 277, 1, 6, 2, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cktLeafSrcDlci.setStatus('mandatory')
cktLeafEndpointIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 277, 1, 6, 2, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cktLeafEndpointIndex.setStatus('mandatory')
cktLeafCreationTime = MibTableColumn((1, 3, 6, 1, 4, 1, 277, 1, 6, 2, 1, 4), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cktLeafCreationTime.setStatus('mandatory')
cktLeafEgressIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 277, 1, 6, 2, 1, 5), Index()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cktLeafEgressIfIndex.setStatus('mandatory')
cktLeafEgressDlci = MibTableColumn((1, 3, 6, 1, 4, 1, 277, 1, 6, 2, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cktLeafEgressDlci.setStatus('mandatory')
cktLeafDestNodeId = MibTableColumn((1, 3, 6, 1, 4, 1, 277, 1, 6, 2, 1, 7), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cktLeafDestNodeId.setStatus('mandatory')
cktLeafDestIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 277, 1, 6, 2, 1, 8), Index()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cktLeafDestIfIndex.setStatus('mandatory')
cktLeafDestDlci = MibTableColumn((1, 3, 6, 1, 4, 1, 277, 1, 6, 2, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cktLeafDestDlci.setStatus('mandatory')
cktLeafSvcCallingParty = MibTableColumn((1, 3, 6, 1, 4, 1, 277, 1, 6, 2, 1, 10), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cktLeafSvcCallingParty.setStatus('mandatory')
cktLeafSvcCalledParty = MibTableColumn((1, 3, 6, 1, 4, 1, 277, 1, 6, 2, 1, 11), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cktLeafSvcCalledParty.setStatus('mandatory')
cktLeafAdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 277, 1, 6, 2, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("down", 1), ("up", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cktLeafAdminStatus.setStatus('mandatory')
cktLeafVcState = MibTableColumn((1, 3, 6, 1, 4, 1, 277, 1, 6, 2, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12))).clone(namedValues=NamedValues(("inactive", 1), ("retry", 2), ("calling", 3), ("wcbdeact", 4), ("wcbdelete", 5), ("active", 6), ("svcall", 7), ("svclr", 8), ("backedup", 9), ("wcbbkdp", 10), ("wcbreact", 11), ("slowretry", 12)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cktLeafVcState.setStatus('mandatory')
cktLeafOperStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 277, 1, 6, 2, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("inactive", 1), ("active", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cktLeafOperStatus.setStatus('mandatory')
cktLeafDceState = MibTableColumn((1, 3, 6, 1, 4, 1, 277, 1, 6, 2, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("inactive", 1), ("active", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cktLeafDceState.setStatus('mandatory')
cktLeafDteStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 277, 1, 6, 2, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("inactive", 1), ("active", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cktLeafDteStatus.setStatus('mandatory')
cktLeafDteState = MibTableColumn((1, 3, 6, 1, 4, 1, 277, 1, 6, 2, 1, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("inactive", 1), ("active", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cktLeafDteState.setStatus('mandatory')
cktLeafVcPtr = MibTableColumn((1, 3, 6, 1, 4, 1, 277, 1, 6, 2, 1, 18), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cktLeafVcPtr.setStatus('mandatory')
cktLeafHopCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 277, 1, 6, 2, 1, 19), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cktLeafHopCnt.setStatus('mandatory')
cktLeafPath = MibTableColumn((1, 3, 6, 1, 4, 1, 277, 1, 6, 2, 1, 20), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cktLeafPath.setStatus('mandatory')
cktLeafFailReason = MibTableColumn((1, 3, 6, 1, 4, 1, 277, 1, 6, 2, 1, 21), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33))).clone(namedValues=NamedValues(("admindown", 1), ("novcbuff", 2), ("nobw", 3), ("noroute", 4), ("timeout", 5), ("nopdubuff", 6), ("nodest", 7), ("trkrnr", 8), ("trkdown", 9), ("balancereroute", 10), ("dead", 11), ("defpathreroute", 12), ("nidown", 13), ("otherpvcsegdown", 14), ("otherpvcsegrnr", 15), ("usingaltpathwarning", 16), ("iopdown", 17), ("numsgbuffer", 18), ("noport", 19), ("misconfig", 20), ("svcsetupfail", 21), ("srcbackedup", 22), ("srcunknown", 23), ("dstunknown", 24), ("bkpdlcicollision", 25), ("oldrevinpath", 26), ("smdsmgmttrunk", 27), ("nevercalled", 28), ("bothendptbackup", 29), ("pvcroutemgttrunk", 30), ("nomultipointparent", 31), ("pvcroutefail", 32), ("novpivci", 33)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cktLeafFailReason.setStatus('mandatory')
cktLeafFailNode = MibTableColumn((1, 3, 6, 1, 4, 1, 277, 1, 6, 2, 1, 22), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cktLeafFailNode.setStatus('mandatory')
cktLeafFailPort = MibTableColumn((1, 3, 6, 1, 4, 1, 277, 1, 6, 2, 1, 23), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cktLeafFailPort.setStatus('mandatory')
cktLeafHelloCounter = MibTableColumn((1, 3, 6, 1, 4, 1, 277, 1, 6, 2, 1, 24), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cktLeafHelloCounter.setStatus('mandatory')
cktLeafHelloAckCounter = MibTableColumn((1, 3, 6, 1, 4, 1, 277, 1, 6, 2, 1, 25), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cktLeafHelloAckCounter.setStatus('mandatory')
cktLeafAtmVPI = MibTableColumn((1, 3, 6, 1, 4, 1, 277, 1, 6, 2, 1, 26), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cktLeafAtmVPI.setStatus('mandatory')
cktLeafAtmVCI = MibTableColumn((1, 3, 6, 1, 4, 1, 277, 1, 6, 2, 1, 27), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cktLeafAtmVCI.setStatus('mandatory')
cktLeafType = MibTableColumn((1, 3, 6, 1, 4, 1, 277, 1, 6, 2, 1, 28), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("pvc", 1), ("svc", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cktLeafType.setStatus('mandatory')
cktLeafAtmInCells = MibTableColumn((1, 3, 6, 1, 4, 1, 277, 1, 6, 2, 1, 29), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cktLeafAtmInCells.setStatus('mandatory')
cktLeafAtmOutCells = MibTableColumn((1, 3, 6, 1, 4, 1, 277, 1, 6, 2, 1, 30), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cktLeafAtmOutCells.setStatus('mandatory')
cktLeafAtmInDiscardedClp0Cells = MibTableColumn((1, 3, 6, 1, 4, 1, 277, 1, 6, 2, 1, 31), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cktLeafAtmInDiscardedClp0Cells.setStatus('mandatory')
cktLeafAtmInDiscardedClp1Cells = MibTableColumn((1, 3, 6, 1, 4, 1, 277, 1, 6, 2, 1, 32), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cktLeafAtmInDiscardedClp1Cells.setStatus('mandatory')
cktLeafAtmInPassedClp0Cells = MibTableColumn((1, 3, 6, 1, 4, 1, 277, 1, 6, 2, 1, 33), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cktLeafAtmInPassedClp0Cells.setStatus('mandatory')
cktLeafAtmInPassedClp1Cells = MibTableColumn((1, 3, 6, 1, 4, 1, 277, 1, 6, 2, 1, 34), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cktLeafAtmInPassedClp1Cells.setStatus('mandatory')
cktLeafAtmInTaggedCells = MibTableColumn((1, 3, 6, 1, 4, 1, 277, 1, 6, 2, 1, 35), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cktLeafAtmInTaggedCells.setStatus('mandatory')
cktLeafAtmOutClp0Cells = MibTableColumn((1, 3, 6, 1, 4, 1, 277, 1, 6, 2, 1, 36), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cktLeafAtmOutClp0Cells.setStatus('mandatory')
cktLeafAtmOutClp1Cells = MibTableColumn((1, 3, 6, 1, 4, 1, 277, 1, 6, 2, 1, 37), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cktLeafAtmOutClp1Cells.setStatus('mandatory')
cktSmdsRtTable = MibTable((1, 3, 6, 1, 4, 1, 277, 1, 6, 3), )
if mibBuilder.loadTexts: cktSmdsRtTable.setStatus('mandatory')
cktSmdsRtEntry = MibTableRow((1, 3, 6, 1, 4, 1, 277, 1, 6, 3, 1), ).setIndexNames((0, "CASCADE-MIB", "cktSmdsRemoteNode"))
if mibBuilder.loadTexts: cktSmdsRtEntry.setStatus('mandatory')
cktSmdsRemoteNode = MibTableColumn((1, 3, 6, 1, 4, 1, 277, 1, 6, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cktSmdsRemoteNode.setStatus('mandatory')
cktSmdsHopCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 277, 1, 6, 3, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cktSmdsHopCnt.setStatus('mandatory')
cktSmdsRoute = MibTableColumn((1, 3, 6, 1, 4, 1, 277, 1, 6, 3, 1, 3), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cktSmdsRoute.setStatus('mandatory')
cktSmdsLocalPort = MibTableColumn((1, 3, 6, 1, 4, 1, 277, 1, 6, 3, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cktSmdsLocalPort.setStatus('mandatory')
cktSmdsRemotePort = MibTableColumn((1, 3, 6, 1, 4, 1, 277, 1, 6, 3, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cktSmdsRemotePort.setStatus('mandatory')
cktSmdsVcState = MibTableColumn((1, 3, 6, 1, 4, 1, 277, 1, 6, 3, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cktSmdsVcState.setStatus('mandatory')
dsx1ConfigTable = MibTable((1, 3, 6, 1, 4, 1, 277, 1, 8, 1), )
if mibBuilder.loadTexts: dsx1ConfigTable.setStatus('mandatory')
dsx1ConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 277, 1, 8, 1, 1), ).setIndexNames((0, "CASCADE-MIB", "dsx1SlotId"), (0, "CASCADE-MIB", "dsx1PortId"))
if mibBuilder.loadTexts: dsx1ConfigEntry.setStatus('mandatory')
dsx1SlotId = MibTableColumn((1, 3, 6, 1, 4, 1, 277, 1, 8, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dsx1SlotId.setStatus('mandatory')
dsx1PortId = MibTableColumn((1, 3, 6, 1, 4, 1, 277, 1, 8, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dsx1PortId.setStatus('mandatory')
dsx1TimeElapsed = MibTableColumn((1, 3, 6, 1, 4, 1, 277, 1, 8, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 899))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dsx1TimeElapsed.setStatus('mandatory')
dsx1ValidIntervals = MibTableColumn((1, 3, 6, 1, 4, 1, 277, 1, 8, 1, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 96))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dsx1ValidIntervals.setStatus('mandatory')
dsx1LineType = MibTableColumn((1, 3, 6, 1, 4, 1, 277, 1, 8, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("other", 1), ("dsx1ESF", 2), ("dsx1D4", 3), ("dsx1E1", 4), ("dsx1E1-CRC", 5), ("dsx1E1-MF", 6), ("dsx1E1-CRC-MF", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dsx1LineType.setStatus('mandatory')
dsx1LineCoding = MibTableColumn((1, 3, 6, 1, 4, 1, 277, 1, 8, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("dsx1JBZS", 1), ("dsx1B8ZS", 2), ("dsx1HDB3", 3), ("dsx1ZBTSI", 4), ("dsx1AMI", 5), ("other", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dsx1LineCoding.setStatus('mandatory')
dsx1SendCode = MibTableColumn((1, 3, 6, 1, 4, 1, 277, 1, 8, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("dsx1SendNoCode", 1), ("dsx1SendLineCode", 2), ("dsx1SendPayloadCode", 3), ("dsx1SendResetCode", 4), ("dsx1SendQRS", 5), ("dsx1Send511Pattern", 6), ("dsx1Send3in24Pattern", 7), ("dsx1SendOtherTestPattern", 8)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dsx1SendCode.setStatus('mandatory')
dsx1CircuitIdentifier = MibTableColumn((1, 3, 6, 1, 4, 1, 277, 1, 8, 1, 1, 8), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dsx1CircuitIdentifier.setStatus('mandatory')
dsx1LoopbackConfig = MibTableColumn((1, 3, 6, 1, 4, 1, 277, 1, 8, 1, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("dsx1NoLoop", 1), ("dsx1PayloadLoop", 2), ("dsx1LineLoop", 3), ("dsx1OtherLoop", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dsx1LoopbackConfig.setStatus('mandatory')
dsx1LineStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 277, 1, 8, 1, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 8191))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dsx1LineStatus.setStatus('mandatory')
dsx1SignalMode = MibTableColumn((1, 3, 6, 1, 4, 1, 277, 1, 8, 1, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("none", 1), ("robbedBit", 2), ("bitOriented", 3), ("messageOriented", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dsx1SignalMode.setStatus('mandatory')
dsx1TransmitClockSource = MibTableColumn((1, 3, 6, 1, 4, 1, 277, 1, 8, 1, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("loopTiming", 1), ("localTiming", 2), ("throughTiming", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dsx1TransmitClockSource.setStatus('mandatory')
dsx1Fdl = MibTableColumn((1, 3, 6, 1, 4, 1, 277, 1, 8, 1, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 4, 8))).clone(namedValues=NamedValues(("other", 1), ("dsx1Ansi-T1-403", 2), ("dsx1Att-54016", 4), ("dsx1Fdl-none", 8)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dsx1Fdl.setStatus('mandatory')
dsx1FdlVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 277, 1, 8, 1, 1, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dsx1FdlVersion.setStatus('mandatory')
dsx1CurrentTable = MibTable((1, 3, 6, 1, 4, 1, 277, 1, 8, 2), )
if mibBuilder.loadTexts: dsx1CurrentTable.setStatus('mandatory')
dsx1CurrentEntry = MibTableRow((1, 3, 6, 1, 4, 1, 277, 1, 8, 2, 1), ).setIndexNames((0, "CASCADE-MIB", "dsx1CurrentSlotId"), (0, "CASCADE-MIB", "dsx1CurrentPortId"))
if mibBuilder.loadTexts: dsx1CurrentEntry.setStatus('mandatory')
dsx1CurrentSlotId = MibTableColumn((1, 3, 6, 1, 4, 1, 277, 1, 8, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dsx1CurrentSlotId.setStatus('mandatory')
dsx1CurrentPortId = MibTableColumn((1, 3, 6, 1, 4, 1, 277, 1, 8, 2, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dsx1CurrentPortId.setStatus('mandatory')
dsx1CurrentESs = MibTableColumn((1, 3, 6, 1, 4, 1, 277, 1, 8, 2, 1, 3), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dsx1CurrentESs.setStatus('mandatory')
dsx1CurrentSESs = MibTableColumn((1, 3, 6, 1, 4, 1, 277, 1, 8, 2, 1, 4), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dsx1CurrentSESs.setStatus('mandatory')
dsx1CurrentSEFSs = MibTableColumn((1, 3, 6, 1, 4, 1, 277, 1, 8, 2, 1, 5), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dsx1CurrentSEFSs.setStatus('mandatory')
dsx1CurrentUASs = MibTableColumn((1, 3, 6, 1, 4, 1, 277, 1, 8, 2, 1, 6), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dsx1CurrentUASs.setStatus('mandatory')
dsx1CurrentCSSs = MibTableColumn((1, 3, 6, 1, 4, 1, 277, 1, 8, 2, 1, 7), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dsx1CurrentCSSs.setStatus('mandatory')
dsx1CurrentBESs = MibTableColumn((1, 3, 6, 1, 4, 1, 277, 1, 8, 2, 1, 8), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dsx1CurrentBESs.setStatus('mandatory')
dsx1IntervalTable = MibTable((1, 3, 6, 1, 4, 1, 277, 1, 8, 3), )
if mibBuilder.loadTexts: dsx1IntervalTable.setStatus('mandatory')
dsx1IntervalEntry = MibTableRow((1, 3, 6, 1, 4, 1, 277, 1, 8, 3, 1), ).setIndexNames((0, "CASCADE-MIB", "dsx1IntervalSlotId"), (0, "CASCADE-MIB", "dsx1IntervalPortId"), (0, "CASCADE-MIB", "dsx1IntervalNumber"))
if mibBuilder.loadTexts: dsx1IntervalEntry.setStatus('mandatory')
dsx1IntervalSlotId = MibTableColumn((1, 3, 6, 1, 4, 1, 277, 1, 8, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dsx1IntervalSlotId.setStatus('mandatory')
dsx1IntervalPortId = MibTableColumn((1, 3, 6, 1, 4, 1, 277, 1, 8, 3, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dsx1IntervalPortId.setStatus('mandatory')
dsx1IntervalNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 277, 1, 8, 3, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 96))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dsx1IntervalNumber.setStatus('mandatory')
dsx1IntervalESs = MibTableColumn((1, 3, 6, 1, 4, 1, 277, 1, 8, 3, 1, 4), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dsx1IntervalESs.setStatus('mandatory')
dsx1IntervalSESs = MibTableColumn((1, 3, 6, 1, 4, 1, 277, 1, 8, 3, 1, 5), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dsx1IntervalSESs.setStatus('mandatory')
dsx1IntervalSEFSs = MibTableColumn((1, 3, 6, 1, 4, 1, 277, 1, 8, 3, 1, 6), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dsx1IntervalSEFSs.setStatus('mandatory')
dsx1IntervalUASs = MibTableColumn((1, 3, 6, 1, 4, 1, 277, 1, 8, 3, 1, 7), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dsx1IntervalUASs.setStatus('mandatory')
dsx1IntervalCSSs = MibTableColumn((1, 3, 6, 1, 4, 1, 277, 1, 8, 3, 1, 8), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dsx1IntervalCSSs.setStatus('mandatory')
dsx1IntervalBESs = MibTableColumn((1, 3, 6, 1, 4, 1, 277, 1, 8, 3, 1, 9), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dsx1IntervalBESs.setStatus('mandatory')
dsx1TotalTable = MibTable((1, 3, 6, 1, 4, 1, 277, 1, 8, 4), )
if mibBuilder.loadTexts: dsx1TotalTable.setStatus('mandatory')
dsx1TotalEntry = MibTableRow((1, 3, 6, 1, 4, 1, 277, 1, 8, 4, 1), ).setIndexNames((0, "CASCADE-MIB", "dsx1TotalSlotId"), (0, "CASCADE-MIB", "dsx1TotalPortId"))
if mibBuilder.loadTexts: dsx1TotalEntry.setStatus('mandatory')
dsx1TotalSlotId = MibTableColumn((1, 3, 6, 1, 4, 1, 277, 1, 8, 4, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dsx1TotalSlotId.setStatus('mandatory')
dsx1TotalPortId = MibTableColumn((1, 3, 6, 1, 4, 1, 277, 1, 8, 4, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dsx1TotalPortId.setStatus('mandatory')
dsx1TotalESs = MibTableColumn((1, 3, 6, 1, 4, 1, 277, 1, 8, 4, 1, 3), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dsx1TotalESs.setStatus('mandatory')
dsx1TotalSESs = MibTableColumn((1, 3, 6, 1, 4, 1, 277, 1, 8, 4, 1, 4), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dsx1TotalSESs.setStatus('mandatory')
dsx1TotalSEFSs = MibTableColumn((1, 3, 6, 1, 4, 1, 277, 1, 8, 4, 1, 5), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dsx1TotalSEFSs.setStatus('mandatory')
dsx1TotalUASs = MibTableColumn((1, 3, 6, 1, 4, 1, 277, 1, 8, 4, 1, 6), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dsx1TotalUASs.setStatus('mandatory')
dsx1TotalCSSs = MibTableColumn((1, 3, 6, 1, 4, 1, 277, 1, 8, 4, 1, 7), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dsx1TotalCSSs.setStatus('mandatory')
dsx1TotalBESs = MibTableColumn((1, 3, 6, 1, 4, 1, 277, 1, 8, 4, 1, 8), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dsx1TotalBESs.setStatus('mandatory')
smdsaddrTable = MibTable((1, 3, 6, 1, 4, 1, 277, 2, 1, 1), )
if mibBuilder.loadTexts: smdsaddrTable.setStatus('mandatory')
smdsaddrEntry = MibTableRow((1, 3, 6, 1, 4, 1, 277, 2, 1, 1, 1), ).setIndexNames((0, "CASCADE-MIB", "smdsaddrAddr"))
if mibBuilder.loadTexts: smdsaddrEntry.setStatus('mandatory')
smdsaddrAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 277, 2, 1, 1, 1, 1), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: smdsaddrAddr.setStatus('mandatory')
smdsaddrType = MibTableColumn((1, 3, 6, 1, 4, 1, 277, 2, 1, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("local-individual-address", 1), ("local-group-address", 2), ("non-local-individual-address", 3), ("non-local-group-address", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: smdsaddrType.setStatus('mandatory')
smdsaddrId = MibTableColumn((1, 3, 6, 1, 4, 1, 277, 2, 1, 1, 1, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: smdsaddrId.setStatus('mandatory')
smdsaddrIf = MibTableColumn((1, 3, 6, 1, 4, 1, 277, 2, 1, 1, 1, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: smdsaddrIf.setStatus('mandatory')
smdsaddrParentGrpMap = MibTableColumn((1, 3, 6, 1, 4, 1, 277, 2, 1, 1, 1, 5), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smdsaddrParentGrpMap.setStatus('mandatory')
smdsaddrParentScrnMap = MibTableColumn((1, 3, 6, 1, 4, 1, 277, 2, 1, 1, 1, 6), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smdsaddrParentScrnMap.setStatus('mandatory')
smdsaddrMemberAddrMap = MibTableColumn((1, 3, 6, 1, 4, 1, 277, 2, 1, 1, 1, 7), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: smdsaddrMemberAddrMap.setStatus('mandatory')
smdsaddrAdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 277, 2, 1, 1, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("down", 1), ("up", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: smdsaddrAdminStatus.setStatus('mandatory')
smdsaddrSlot = MibTableColumn((1, 3, 6, 1, 4, 1, 277, 2, 1, 1, 1, 9), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: smdsaddrSlot.setStatus('mandatory')
smdsaddrSsiIfNum = MibTableColumn((1, 3, 6, 1, 4, 1, 277, 2, 1, 1, 1, 10), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: smdsaddrSsiIfNum.setStatus('mandatory')
isdnAddrTable = MibTable((1, 3, 6, 1, 4, 1, 277, 4, 1), )
if mibBuilder.loadTexts: isdnAddrTable.setStatus('mandatory')
isdnAddrEntry = MibTableRow((1, 3, 6, 1, 4, 1, 277, 4, 1, 1), ).setIndexNames((0, "CASCADE-MIB", "isdnAddrIf"))
if mibBuilder.loadTexts: isdnAddrEntry.setStatus('mandatory')
isdnAddrIf = MibTableColumn((1, 3, 6, 1, 4, 1, 277, 4, 1, 1, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: isdnAddrIf.setStatus('mandatory')
isdnAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 277, 4, 1, 1, 2), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: isdnAddr.setStatus('mandatory')
isdnChanType = MibTableColumn((1, 3, 6, 1, 4, 1, 277, 4, 1, 1, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: isdnChanType.setStatus('mandatory')
isdnCallerIDTable = MibTable((1, 3, 6, 1, 4, 1, 277, 4, 2), )
if mibBuilder.loadTexts: isdnCallerIDTable.setStatus('mandatory')
isdnCallerIDEntry = MibTableRow((1, 3, 6, 1, 4, 1, 277, 4, 2, 1), ).setIndexNames((0, "CASCADE-MIB", "isdnCallerIDIf"), (0, "CASCADE-MIB", "isdnCallerIDAddr"))
if mibBuilder.loadTexts: isdnCallerIDEntry.setStatus('mandatory')
isdnCallerIDIf = MibTableColumn((1, 3, 6, 1, 4, 1, 277, 4, 2, 1, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: isdnCallerIDIf.setStatus('mandatory')
isdnCallerIDAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 277, 4, 2, 1, 2), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: isdnCallerIDAddr.setStatus('mandatory')
isdnCallerAdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 277, 4, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("add", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: isdnCallerAdminStatus.setStatus('mandatory')
namebindingTable = MibTable((1, 3, 6, 1, 4, 1, 277, 3, 1), )
if mibBuilder.loadTexts: namebindingTable.setStatus('mandatory')
namebindingEntry = MibTableRow((1, 3, 6, 1, 4, 1, 277, 3, 1, 1), ).setIndexNames((0, "CASCADE-MIB", "nameType"), (0, "CASCADE-MIB", "nameName"), (0, "CASCADE-MIB", "namePrimary"))
if mibBuilder.loadTexts: namebindingEntry.setStatus('mandatory')
nameType = MibTableColumn((1, 3, 6, 1, 4, 1, 277, 3, 1, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("uninniladdr", 1), ("e164", 2), ("nsap", 3), ("sni", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nameType.setStatus('mandatory')
nameName = MibTableColumn((1, 3, 6, 1, 4, 1, 277, 3, 1, 1, 2), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nameName.setStatus('mandatory')
namePrimary = MibTableColumn((1, 3, 6, 1, 4, 1, 277, 3, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("primary", 1), ("backup", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: namePrimary.setStatus('mandatory')
nameIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 277, 3, 1, 1, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nameIfIndex.setStatus('mandatory')
nameNodeId = MibTableColumn((1, 3, 6, 1, 4, 1, 277, 3, 1, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nameNodeId.setStatus('mandatory')
nameStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 277, 3, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("active", 1), ("invalid", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nameStatus.setStatus('mandatory')
svcNodePrefixTable = MibTable((1, 3, 6, 1, 4, 1, 277, 5, 1, 1), )
if mibBuilder.loadTexts: svcNodePrefixTable.setStatus('mandatory')
svcNodePrefixEntry = MibTableRow((1, 3, 6, 1, 4, 1, 277, 5, 1, 1, 1), ).setIndexNames((0, "CASCADE-MIB", "svcNodePrefixPrefix"))
if mibBuilder.loadTexts: svcNodePrefixEntry.setStatus('mandatory')
svcNodePrefixPrefix = MibTableColumn((1, 3, 6, 1, 4, 1, 277, 5, 1, 1, 1, 1), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 20))).setMaxAccess("readonly")
if mibBuilder.loadTexts: svcNodePrefixPrefix.setStatus('mandatory')
svcNodePrefixNumBits = MibTableColumn((1, 3, 6, 1, 4, 1, 277, 5, 1, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 160))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: svcNodePrefixNumBits.setStatus('mandatory')
svcNodePrefixNmbPlan = MibTableColumn((1, 3, 6, 1, 4, 1, 277, 5, 1, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 4))).clone(namedValues=NamedValues(("e164", 1), ("atm-endsystem", 2), ("unknown", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: svcNodePrefixNmbPlan.setStatus('mandatory')
svcNodePrefixAdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 277, 5, 1, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("configured", 1), ("invalid", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: svcNodePrefixAdminStatus.setStatus('mandatory')
svcPrefixTable = MibTable((1, 3, 6, 1, 4, 1, 277, 5, 1, 2), )
if mibBuilder.loadTexts: svcPrefixTable.setStatus('mandatory')
svcPrefixEntry = MibTableRow((1, 3, 6, 1, 4, 1, 277, 5, 1, 2, 1), ).setIndexNames((0, "CASCADE-MIB", "svcPrefixIfIndex"), (0, "CASCADE-MIB", "svcPrefixPrefix"))
if mibBuilder.loadTexts: svcPrefixEntry.setStatus('mandatory')
svcPrefixIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 277, 5, 1, 2, 1, 1), Index()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svcPrefixIfIndex.setStatus('mandatory')
svcPrefixPrefix = MibTableColumn((1, 3, 6, 1, 4, 1, 277, 5, 1, 2, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 20))).setMaxAccess("readonly")
if mibBuilder.loadTexts: svcPrefixPrefix.setStatus('mandatory')
svcPrefixNumBits = MibTableColumn((1, 3, 6, 1, 4, 1, 277, 5, 1, 2, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 160))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: svcPrefixNumBits.setStatus('mandatory')
svcPrefixNmbPlan = MibTableColumn((1, 3, 6, 1, 4, 1, 277, 5, 1, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 4))).clone(namedValues=NamedValues(("e164", 1), ("atm-endsystem", 2), ("unknown", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: svcPrefixNmbPlan.setStatus('mandatory')
svcPrefixAdminCost = MibTableColumn((1, 3, 6, 1, 4, 1, 277, 5, 1, 2, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: svcPrefixAdminCost.setStatus('mandatory')
svcPrefixLocalGatewayAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 277, 5, 1, 2, 1, 6), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: svcPrefixLocalGatewayAddress.setStatus('mandatory')
svcPrefixLocalGatewayNmbPlan = MibTableColumn((1, 3, 6, 1, 4, 1, 277, 5, 1, 2, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 4))).clone(namedValues=NamedValues(("e164", 1), ("atm-endsystem", 2), ("unknown", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: svcPrefixLocalGatewayNmbPlan.setStatus('mandatory')
svcPrefixRemoteGatewayAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 277, 5, 1, 2, 1, 8), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 20))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: svcPrefixRemoteGatewayAddress.setStatus('mandatory')
svcPrefixRemoteGatewayNmbPlan = MibTableColumn((1, 3, 6, 1, 4, 1, 277, 5, 1, 2, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 4))).clone(namedValues=NamedValues(("e164", 1), ("atm-endsystem", 2), ("unknown", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: svcPrefixRemoteGatewayNmbPlan.setStatus('mandatory')
svcPrefixAdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 277, 5, 1, 2, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("configured", 1), ("invalid", 2), ("dynamic", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: svcPrefixAdminStatus.setStatus('mandatory')
svcAddrTable = MibTable((1, 3, 6, 1, 4, 1, 277, 5, 1, 3), )
if mibBuilder.loadTexts: svcAddrTable.setStatus('mandatory')
svcAddrEntry = MibTableRow((1, 3, 6, 1, 4, 1, 277, 5, 1, 3, 1), ).setIndexNames((0, "CASCADE-MIB", "svcAddrIfIndex"), (0, "CASCADE-MIB", "svcAddrAddress"))
if mibBuilder.loadTexts: svcAddrEntry.setStatus('mandatory')
svcAddrIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 277, 5, 1, 3, 1, 1), Index()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svcAddrIfIndex.setStatus('mandatory')
svcAddrAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 277, 5, 1, 3, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 20))).setMaxAccess("readonly")
if mibBuilder.loadTexts: svcAddrAddress.setStatus('mandatory')
svcAddrNmbPlan = MibTableColumn((1, 3, 6, 1, 4, 1, 277, 5, 1, 3, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 4))).clone(namedValues=NamedValues(("e164", 1), ("atm-endsystem", 2), ("unknown", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: svcAddrNmbPlan.setStatus('mandatory')
svcAddrAdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 277, 5, 1, 3, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("configured", 1), ("invalid", 2), ("dynamic", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: svcAddrAdminStatus.setStatus('mandatory')
svcAtmUserPartTable = MibTable((1, 3, 6, 1, 4, 1, 277, 5, 1, 4), )
if mibBuilder.loadTexts: svcAtmUserPartTable.setStatus('mandatory')
svcAtmUserPartEntry = MibTableRow((1, 3, 6, 1, 4, 1, 277, 5, 1, 4, 1), ).setIndexNames((0, "CASCADE-MIB", "svcAtmUserPartIfIndex"), (0, "CASCADE-MIB", "svcAtmUserPartUserPart"))
if mibBuilder.loadTexts: svcAtmUserPartEntry.setStatus('mandatory')
svcAtmUserPartIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 277, 5, 1, 4, 1, 1), Index()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svcAtmUserPartIfIndex.setStatus('mandatory')
svcAtmUserPartUserPart = MibTableColumn((1, 3, 6, 1, 4, 1, 277, 5, 1, 4, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(7, 7)).setFixedLength(7)).setMaxAccess("readonly")
if mibBuilder.loadTexts: svcAtmUserPartUserPart.setStatus('mandatory')
svcAtmUserPartAdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 277, 5, 1, 4, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("configured", 1), ("invalid", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: svcAtmUserPartAdminStatus.setStatus('mandatory')
svcConfigTable = MibTable((1, 3, 6, 1, 4, 1, 277, 5, 2, 1), )
if mibBuilder.loadTexts: svcConfigTable.setStatus('mandatory')
svcConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 277, 5, 2, 1, 1), ).setIndexNames((0, "CASCADE-MIB", "svcConfigIfIndex"))
if mibBuilder.loadTexts: svcConfigEntry.setStatus('mandatory')
svcConfigIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 277, 5, 2, 1, 1, 1), Index()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svcConfigIfIndex.setStatus('mandatory')
svcConfigInitiateIdentStatsUpload = MibTableColumn((1, 3, 6, 1, 4, 1, 277, 5, 2, 1, 1, 2), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: svcConfigInitiateIdentStatsUpload.setStatus('mandatory')
svcConfigCgPtyInsertionMode = MibTableColumn((1, 3, 6, 1, 4, 1, 277, 5, 2, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("disabled", 1), ("insert", 2), ("replace", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: svcConfigCgPtyInsertionMode.setStatus('mandatory')
svcConfigCgPtyInsertionAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 277, 5, 2, 1, 1, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(15, 20))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: svcConfigCgPtyInsertionAddress.setStatus('mandatory')
svcConfigCgPtyInsertionNmbPlan = MibTableColumn((1, 3, 6, 1, 4, 1, 277, 5, 2, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 4))).clone(namedValues=NamedValues(("e164", 1), ("atm-endsystem", 2), ("unknown", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: svcConfigCgPtyInsertionNmbPlan.setStatus('mandatory')
svcConfigCgPtyScreenMode = MibTableColumn((1, 3, 6, 1, 4, 1, 277, 5, 2, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 255))).clone(namedValues=NamedValues(("node-prefix", 1), ("port-prefix", 2), ("node-prefix-or-port-prefix", 3), ("address", 4), ("node-prefix-or-address", 5), ("port-prefix-or-address", 6), ("node-prefix-or-port-prefix-or-address", 7), ("disabled", 255)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: svcConfigCgPtyScreenMode.setStatus('mandatory')
svcConfigEgressAddrXlateMode = MibTableColumn((1, 3, 6, 1, 4, 1, 277, 5, 2, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("disabled", 1), ("tunnel-when-called-party-matches-prefix", 2), ("replace-when-called-party-matches-prefix", 3), ("translate-e164-native-to-nsap", 4), ("translate-e164-nsap-to-native", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: svcConfigEgressAddrXlateMode.setStatus('mandatory')
svcConfigIngressAddrXlateMode = MibTableColumn((1, 3, 6, 1, 4, 1, 277, 5, 2, 1, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 4, 5))).clone(namedValues=NamedValues(("disabled", 1), ("tunnel", 2), ("translate-e164-native-to-nsap", 4), ("translate-e164-nsap-to-native", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: svcConfigIngressAddrXlateMode.setStatus('mandatory')
svcConfigCgPtyPresentationMode = MibTableColumn((1, 3, 6, 1, 4, 1, 277, 5, 2, 1, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("user", 1), ("never", 2), ("always", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: svcConfigCgPtyPresentationMode.setStatus('mandatory')
svcAtmConfigTable = MibTable((1, 3, 6, 1, 4, 1, 277, 5, 2, 2), )
if mibBuilder.loadTexts: svcAtmConfigTable.setStatus('mandatory')
svcAtmConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 277, 5, 2, 2, 1), ).setIndexNames((0, "CASCADE-MIB", "svcAtmConfigIfIndex"))
if mibBuilder.loadTexts: svcAtmConfigEntry.setStatus('mandatory')
svcAtmConfigIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 277, 5, 2, 2, 1, 1), Index()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svcAtmConfigIfIndex.setStatus('mandatory')
svcAtmConfigAdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 277, 5, 2, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: svcAtmConfigAdminStatus.setStatus('mandatory')
svcAtmConfigOperStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 277, 5, 2, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("down", 1), ("connecting", 2), ("up", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: svcAtmConfigOperStatus.setStatus('mandatory')
svcAtmConfigQ93bMaxRestart = MibTableColumn((1, 3, 6, 1, 4, 1, 277, 5, 2, 2, 1, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: svcAtmConfigQ93bMaxRestart.setStatus('mandatory')
svcAtmConfigQ93bMaxStatEnq = MibTableColumn((1, 3, 6, 1, 4, 1, 277, 5, 2, 2, 1, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: svcAtmConfigQ93bMaxStatEnq.setStatus('mandatory')
svcAtmConfigQ93bT303 = MibTableColumn((1, 3, 6, 1, 4, 1, 277, 5, 2, 2, 1, 6), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: svcAtmConfigQ93bT303.setStatus('mandatory')
svcAtmConfigQ93bT308 = MibTableColumn((1, 3, 6, 1, 4, 1, 277, 5, 2, 2, 1, 7), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: svcAtmConfigQ93bT308.setStatus('mandatory')
svcAtmConfigQ93bT309 = MibTableColumn((1, 3, 6, 1, 4, 1, 277, 5, 2, 2, 1, 8), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: svcAtmConfigQ93bT309.setStatus('mandatory')
svcAtmConfigQ93bT310 = MibTableColumn((1, 3, 6, 1, 4, 1, 277, 5, 2, 2, 1, 9), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: svcAtmConfigQ93bT310.setStatus('mandatory')
svcAtmConfigQ93bT313 = MibTableColumn((1, 3, 6, 1, 4, 1, 277, 5, 2, 2, 1, 10), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: svcAtmConfigQ93bT313.setStatus('mandatory')
svcAtmConfigQ93bT316 = MibTableColumn((1, 3, 6, 1, 4, 1, 277, 5, 2, 2, 1, 11), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: svcAtmConfigQ93bT316.setStatus('mandatory')
svcAtmConfigQ93bT322 = MibTableColumn((1, 3, 6, 1, 4, 1, 277, 5, 2, 2, 1, 12), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: svcAtmConfigQ93bT322.setStatus('mandatory')
svcAtmConfigQ93bT398 = MibTableColumn((1, 3, 6, 1, 4, 1, 277, 5, 2, 2, 1, 13), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: svcAtmConfigQ93bT398.setStatus('mandatory')
svcAtmConfigQ93bT399 = MibTableColumn((1, 3, 6, 1, 4, 1, 277, 5, 2, 2, 1, 14), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: svcAtmConfigQ93bT399.setStatus('mandatory')
svcAtmConfigQ93bTotalConns = MibTableColumn((1, 3, 6, 1, 4, 1, 277, 5, 2, 2, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svcAtmConfigQ93bTotalConns.setStatus('mandatory')
svcAtmConfigQ93bActiveConns = MibTableColumn((1, 3, 6, 1, 4, 1, 277, 5, 2, 2, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svcAtmConfigQ93bActiveConns.setStatus('mandatory')
svcAtmConfigQ93bLastCauseTx = MibTableColumn((1, 3, 6, 1, 4, 1, 277, 5, 2, 2, 1, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 10, 16, 17, 18, 21, 22, 23, 27, 28, 30, 31, 35, 36, 37, 38, 41, 43, 45, 47, 49, 51, 57, 58, 63, 65, 73, 78, 81, 82, 88, 89, 91, 92, 93, 96, 97, 99, 100, 101, 102, 104, 111, 127))).clone(namedValues=NamedValues(("unalloc-nmb", 1), ("no-route-transnet", 2), ("no-route-dest", 3), ("vcc-unacceptable-30", 10), ("normal-call-clr-31", 16), ("user-busy", 17), ("no-user-response", 18), ("call-reject", 21), ("nmb-changed", 22), ("call-reject-clir", 23), ("dest-out-of-order", 27), ("invalid-nmb-format", 28), ("response-stat-enq", 30), ("normal-unspecified", 31), ("req-vcc-unavailable", 35), ("vcc-fail-31", 36), ("rate-unavail-31", 37), ("network-out-of-order", 38), ("temp-fail", 41), ("access-info-discard", 43), ("no-vcc-available", 45), ("resources-unavailable", 47), ("qos-unavailable", 49), ("rate-unavailable-30", 51), ("b-cap-not-authorized", 57), ("b-cap-unavailable", 58), ("service-unavailable", 63), ("b-cap-not-implemented", 65), ("combination-unsupported", 73), ("aal-params-unsupp-31", 78), ("invalid-call-reference", 81), ("no-channel", 82), ("dest-incompatible", 88), ("invalid-endpoint-ref", 89), ("invalid-transit-net", 91), ("too-many-add-pty-req", 92), ("aal-params-unsupp-30", 93), ("info-element-missing", 96), ("msg-type-not-imp", 97), ("info-element-not-imp", 99), ("invalid-info-element", 100), ("message-not-compatible", 101), ("timer-recovery", 102), ("invalid-message-len", 104), ("protocol-error", 111), ("optional-element-error", 127)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: svcAtmConfigQ93bLastCauseTx.setStatus('mandatory')
svcAtmConfigQ93bLastCauseRx = MibTableColumn((1, 3, 6, 1, 4, 1, 277, 5, 2, 2, 1, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 10, 16, 17, 18, 21, 22, 23, 27, 28, 30, 31, 35, 36, 37, 38, 41, 43, 45, 47, 49, 51, 57, 58, 63, 65, 73, 78, 81, 82, 88, 89, 91, 92, 93, 96, 97, 99, 100, 101, 102, 104, 111, 127))).clone(namedValues=NamedValues(("unalloc-nmb", 1), ("no-route-transnet", 2), ("no-route-dest", 3), ("vcc-unacceptable-30", 10), ("normal-call-clr-31", 16), ("user-busy", 17), ("no-user-response", 18), ("call-reject", 21), ("nmb-changed", 22), ("call-reject-clir", 23), ("dest-out-of-order", 27), ("invalid-nmb-format", 28), ("response-stat-enq", 30), ("normal-unspecified", 31), ("req-vcc-unavailable", 35), ("vcc-fail-31", 36), ("rate-unavail-31", 37), ("network-out-of-order", 38), ("temp-fail", 41), ("access-info-discard", 43), ("no-vcc-available", 45), ("resources-unavailable", 47), ("qos-unavailable", 49), ("rate-unavailable-30", 51), ("b-cap-not-authorized", 57), ("b-cap-unavailable", 58), ("service-unavailable", 63), ("b-cap-not-implemented", 65), ("combination-unsupported", 73), ("aal-params-unsupp-31", 78), ("invalid-call-reference", 81), ("no-channel", 82), ("dest-incompatible", 88), ("invalid-endpoint-ref", 89), ("invalid-transit-net", 91), ("too-many-add-pty-req", 92), ("aal-params-unsupp-30", 93), ("info-element-missing", 96), ("msg-type-not-imp", 97), ("info-element-not-imp", 99), ("invalid-info-element", 100), ("message-not-compatible", 101), ("timer-recovery", 102), ("invalid-message-len", 104), ("protocol-error", 111), ("optional-element-error", 127)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: svcAtmConfigQ93bLastCauseRx.setStatus('mandatory')
svcAtmConfigQ93bNumSetupPduTx = MibTableColumn((1, 3, 6, 1, 4, 1, 277, 5, 2, 2, 1, 19), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svcAtmConfigQ93bNumSetupPduTx.setStatus('mandatory')
svcAtmConfigQ93bNumSetupPduRx = MibTableColumn((1, 3, 6, 1, 4, 1, 277, 5, 2, 2, 1, 20), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svcAtmConfigQ93bNumSetupPduRx.setStatus('mandatory')
svcAtmConfigQ93bNumCallProcPduTx = MibTableColumn((1, 3, 6, 1, 4, 1, 277, 5, 2, 2, 1, 21), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svcAtmConfigQ93bNumCallProcPduTx.setStatus('mandatory')
svcAtmConfigQ93bNumCallProcPduRx = MibTableColumn((1, 3, 6, 1, 4, 1, 277, 5, 2, 2, 1, 22), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svcAtmConfigQ93bNumCallProcPduRx.setStatus('mandatory')
svcAtmConfigQ93bNumConnectPduTx = MibTableColumn((1, 3, 6, 1, 4, 1, 277, 5, 2, 2, 1, 23), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svcAtmConfigQ93bNumConnectPduTx.setStatus('mandatory')
svcAtmConfigQ93bNumConnectPduRx = MibTableColumn((1, 3, 6, 1, 4, 1, 277, 5, 2, 2, 1, 24), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svcAtmConfigQ93bNumConnectPduRx.setStatus('mandatory')
svcAtmConfigQ93bNumConnectAckPduTx = MibTableColumn((1, 3, 6, 1, 4, 1, 277, 5, 2, 2, 1, 25), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svcAtmConfigQ93bNumConnectAckPduTx.setStatus('mandatory')
svcAtmConfigQ93bNumConnectAckPduRx = MibTableColumn((1, 3, 6, 1, 4, 1, 277, 5, 2, 2, 1, 26), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svcAtmConfigQ93bNumConnectAckPduRx.setStatus('mandatory')
svcAtmConfigQ93bNumReleasePduTx = MibTableColumn((1, 3, 6, 1, 4, 1, 277, 5, 2, 2, 1, 27), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svcAtmConfigQ93bNumReleasePduTx.setStatus('mandatory')
svcAtmConfigQ93bNumReleasePduRx = MibTableColumn((1, 3, 6, 1, 4, 1, 277, 5, 2, 2, 1, 28), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svcAtmConfigQ93bNumReleasePduRx.setStatus('mandatory')
svcAtmConfigQ93bNumReleaseCmpltPduTx = MibTableColumn((1, 3, 6, 1, 4, 1, 277, 5, 2, 2, 1, 29), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svcAtmConfigQ93bNumReleaseCmpltPduTx.setStatus('mandatory')
svcAtmConfigQ93bNumReleaseCmpltPduRx = MibTableColumn((1, 3, 6, 1, 4, 1, 277, 5, 2, 2, 1, 30), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svcAtmConfigQ93bNumReleaseCmpltPduRx.setStatus('mandatory')
svcAtmConfigQ93bNumAddPtyPduTx = MibTableColumn((1, 3, 6, 1, 4, 1, 277, 5, 2, 2, 1, 31), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svcAtmConfigQ93bNumAddPtyPduTx.setStatus('mandatory')
svcAtmConfigQ93bNumAddPtyPduRx = MibTableColumn((1, 3, 6, 1, 4, 1, 277, 5, 2, 2, 1, 32), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svcAtmConfigQ93bNumAddPtyPduRx.setStatus('mandatory')
svcAtmConfigQ93bNumAddPtyAckPduTx = MibTableColumn((1, 3, 6, 1, 4, 1, 277, 5, 2, 2, 1, 33), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svcAtmConfigQ93bNumAddPtyAckPduTx.setStatus('mandatory')
svcAtmConfigQ93bNumAddPtyAckPduRx = MibTableColumn((1, 3, 6, 1, 4, 1, 277, 5, 2, 2, 1, 34), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svcAtmConfigQ93bNumAddPtyAckPduRx.setStatus('mandatory')
svcAtmConfigQ93bNumAddPtyRejPduTx = MibTableColumn((1, 3, 6, 1, 4, 1, 277, 5, 2, 2, 1, 35), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svcAtmConfigQ93bNumAddPtyRejPduTx.setStatus('mandatory')
svcAtmConfigQ93bNumAddPtyRejPduRx = MibTableColumn((1, 3, 6, 1, 4, 1, 277, 5, 2, 2, 1, 36), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svcAtmConfigQ93bNumAddPtyRejPduRx.setStatus('mandatory')
svcAtmConfigQ93bNumDropPtyPduTx = MibTableColumn((1, 3, 6, 1, 4, 1, 277, 5, 2, 2, 1, 37), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svcAtmConfigQ93bNumDropPtyPduTx.setStatus('mandatory')
svcAtmConfigQ93bNumDropPtyPduRx = MibTableColumn((1, 3, 6, 1, 4, 1, 277, 5, 2, 2, 1, 38), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svcAtmConfigQ93bNumDropPtyPduRx.setStatus('mandatory')
svcAtmConfigQ93bNumDropPtyAckPduTx = MibTableColumn((1, 3, 6, 1, 4, 1, 277, 5, 2, 2, 1, 39), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svcAtmConfigQ93bNumDropPtyAckPduTx.setStatus('mandatory')
svcAtmConfigQ93bNumDropPtyAckPduRx = MibTableColumn((1, 3, 6, 1, 4, 1, 277, 5, 2, 2, 1, 40), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svcAtmConfigQ93bNumDropPtyAckPduRx.setStatus('mandatory')
svcAtmConfigQ93bNumStatusEnqPduTx = MibTableColumn((1, 3, 6, 1, 4, 1, 277, 5, 2, 2, 1, 41), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svcAtmConfigQ93bNumStatusEnqPduTx.setStatus('mandatory')
svcAtmConfigQ93bNumStatusEnqPduRx = MibTableColumn((1, 3, 6, 1, 4, 1, 277, 5, 2, 2, 1, 42), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svcAtmConfigQ93bNumStatusEnqPduRx.setStatus('mandatory')
svcAtmConfigQ93bNumStatusPduTx = MibTableColumn((1, 3, 6, 1, 4, 1, 277, 5, 2, 2, 1, 43), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svcAtmConfigQ93bNumStatusPduTx.setStatus('mandatory')
svcAtmConfigQ93bNumStatusPduRx = MibTableColumn((1, 3, 6, 1, 4, 1, 277, 5, 2, 2, 1, 44), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svcAtmConfigQ93bNumStatusPduRx.setStatus('mandatory')
svcAtmConfigQ93bNumRestartPduTx = MibTableColumn((1, 3, 6, 1, 4, 1, 277, 5, 2, 2, 1, 45), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svcAtmConfigQ93bNumRestartPduTx.setStatus('mandatory')
svcAtmConfigQ93bNumRestartPduRx = MibTableColumn((1, 3, 6, 1, 4, 1, 277, 5, 2, 2, 1, 46), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svcAtmConfigQ93bNumRestartPduRx.setStatus('mandatory')
svcAtmConfigQ93bNumRestartAckPduTx = MibTableColumn((1, 3, 6, 1, 4, 1, 277, 5, 2, 2, 1, 47), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svcAtmConfigQ93bNumRestartAckPduTx.setStatus('mandatory')
svcAtmConfigQ93bNumRestartAckPduRx = MibTableColumn((1, 3, 6, 1, 4, 1, 277, 5, 2, 2, 1, 48), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svcAtmConfigQ93bNumRestartAckPduRx.setStatus('mandatory')
svcAtmConfigQSaalMaxCC = MibTableColumn((1, 3, 6, 1, 4, 1, 277, 5, 2, 2, 1, 49), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: svcAtmConfigQSaalMaxCC.setStatus('mandatory')
svcAtmConfigQSaalMaxPD = MibTableColumn((1, 3, 6, 1, 4, 1, 277, 5, 2, 2, 1, 50), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: svcAtmConfigQSaalMaxPD.setStatus('mandatory')
svcAtmConfigQSaalMaxStat = MibTableColumn((1, 3, 6, 1, 4, 1, 277, 5, 2, 2, 1, 51), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: svcAtmConfigQSaalMaxStat.setStatus('mandatory')
svcAtmConfigQSaalTPoll = MibTableColumn((1, 3, 6, 1, 4, 1, 277, 5, 2, 2, 1, 52), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: svcAtmConfigQSaalTPoll.setStatus('mandatory')
svcAtmConfigQSaalTKeepalive = MibTableColumn((1, 3, 6, 1, 4, 1, 277, 5, 2, 2, 1, 53), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: svcAtmConfigQSaalTKeepalive.setStatus('mandatory')
svcAtmConfigQSaalTNoResponse = MibTableColumn((1, 3, 6, 1, 4, 1, 277, 5, 2, 2, 1, 54), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: svcAtmConfigQSaalTNoResponse.setStatus('mandatory')
svcAtmConfigQSaalTCC = MibTableColumn((1, 3, 6, 1, 4, 1, 277, 5, 2, 2, 1, 55), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: svcAtmConfigQSaalTCC.setStatus('mandatory')
svcAtmConfigQSaalTIdle = MibTableColumn((1, 3, 6, 1, 4, 1, 277, 5, 2, 2, 1, 56), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: svcAtmConfigQSaalTIdle.setStatus('mandatory')
svcAtmConfigQSaalNumDiscardTx = MibTableColumn((1, 3, 6, 1, 4, 1, 277, 5, 2, 2, 1, 57), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svcAtmConfigQSaalNumDiscardTx.setStatus('mandatory')
svcAtmConfigQSaalNumDiscardRx = MibTableColumn((1, 3, 6, 1, 4, 1, 277, 5, 2, 2, 1, 58), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svcAtmConfigQSaalNumDiscardRx.setStatus('mandatory')
svcAtmConfigQSaalNumErrorTx = MibTableColumn((1, 3, 6, 1, 4, 1, 277, 5, 2, 2, 1, 59), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svcAtmConfigQSaalNumErrorTx.setStatus('mandatory')
svcAtmConfigQSaalNumErrorRx = MibTableColumn((1, 3, 6, 1, 4, 1, 277, 5, 2, 2, 1, 60), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svcAtmConfigQSaalNumErrorRx.setStatus('mandatory')
svcAtmConfigQSaalNumBgnPduTx = MibTableColumn((1, 3, 6, 1, 4, 1, 277, 5, 2, 2, 1, 61), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svcAtmConfigQSaalNumBgnPduTx.setStatus('mandatory')
svcAtmConfigQSaalNumBgnPduRx = MibTableColumn((1, 3, 6, 1, 4, 1, 277, 5, 2, 2, 1, 62), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svcAtmConfigQSaalNumBgnPduRx.setStatus('mandatory')
svcAtmConfigQSaalNumBgakPduTx = MibTableColumn((1, 3, 6, 1, 4, 1, 277, 5, 2, 2, 1, 63), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svcAtmConfigQSaalNumBgakPduTx.setStatus('mandatory')
svcAtmConfigQSaalNumBgakPduRx = MibTableColumn((1, 3, 6, 1, 4, 1, 277, 5, 2, 2, 1, 64), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svcAtmConfigQSaalNumBgakPduRx.setStatus('mandatory')
svcAtmConfigQSaalNumBgrejPduTx = MibTableColumn((1, 3, 6, 1, 4, 1, 277, 5, 2, 2, 1, 65), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svcAtmConfigQSaalNumBgrejPduTx.setStatus('mandatory')
svcAtmConfigQSaalNumBgrejPduRx = MibTableColumn((1, 3, 6, 1, 4, 1, 277, 5, 2, 2, 1, 66), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svcAtmConfigQSaalNumBgrejPduRx.setStatus('mandatory')
svcAtmConfigQSaalNumEndPduTx = MibTableColumn((1, 3, 6, 1, 4, 1, 277, 5, 2, 2, 1, 67), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svcAtmConfigQSaalNumEndPduTx.setStatus('mandatory')
svcAtmConfigQSaalNumEndPduRx = MibTableColumn((1, 3, 6, 1, 4, 1, 277, 5, 2, 2, 1, 68), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svcAtmConfigQSaalNumEndPduRx.setStatus('mandatory')
svcAtmConfigQSaalNumEndakPduTx = MibTableColumn((1, 3, 6, 1, 4, 1, 277, 5, 2, 2, 1, 69), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svcAtmConfigQSaalNumEndakPduTx.setStatus('mandatory')
svcAtmConfigQSaalNumEndakPduRx = MibTableColumn((1, 3, 6, 1, 4, 1, 277, 5, 2, 2, 1, 70), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svcAtmConfigQSaalNumEndakPduRx.setStatus('mandatory')
svcAtmConfigQSaalNumRsPduTx = MibTableColumn((1, 3, 6, 1, 4, 1, 277, 5, 2, 2, 1, 71), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svcAtmConfigQSaalNumRsPduTx.setStatus('mandatory')
svcAtmConfigQSaalNumRsPduRx = MibTableColumn((1, 3, 6, 1, 4, 1, 277, 5, 2, 2, 1, 72), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svcAtmConfigQSaalNumRsPduRx.setStatus('mandatory')
svcAtmConfigQSaalNumRsakPduTx = MibTableColumn((1, 3, 6, 1, 4, 1, 277, 5, 2, 2, 1, 73), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svcAtmConfigQSaalNumRsakPduTx.setStatus('mandatory')
svcAtmConfigQSaalNumRsakPduRx = MibTableColumn((1, 3, 6, 1, 4, 1, 277, 5, 2, 2, 1, 74), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svcAtmConfigQSaalNumRsakPduRx.setStatus('mandatory')
svcAtmConfigQSaalNumErPduTx = MibTableColumn((1, 3, 6, 1, 4, 1, 277, 5, 2, 2, 1, 75), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svcAtmConfigQSaalNumErPduTx.setStatus('mandatory')
svcAtmConfigQSaalNumErPduRx = MibTableColumn((1, 3, 6, 1, 4, 1, 277, 5, 2, 2, 1, 76), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svcAtmConfigQSaalNumErPduRx.setStatus('mandatory')
svcAtmConfigQSaalNumErakPduTx = MibTableColumn((1, 3, 6, 1, 4, 1, 277, 5, 2, 2, 1, 77), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svcAtmConfigQSaalNumErakPduTx.setStatus('mandatory')
svcAtmConfigQSaalNumErakPduRx = MibTableColumn((1, 3, 6, 1, 4, 1, 277, 5, 2, 2, 1, 78), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svcAtmConfigQSaalNumErakPduRx.setStatus('mandatory')
svcAtmConfigQSaalNumSdPduTx = MibTableColumn((1, 3, 6, 1, 4, 1, 277, 5, 2, 2, 1, 79), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svcAtmConfigQSaalNumSdPduTx.setStatus('mandatory')
svcAtmConfigQSaalNumSdPduRx = MibTableColumn((1, 3, 6, 1, 4, 1, 277, 5, 2, 2, 1, 80), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svcAtmConfigQSaalNumSdPduRx.setStatus('mandatory')
svcAtmConfigQSaalNumPollPduTx = MibTableColumn((1, 3, 6, 1, 4, 1, 277, 5, 2, 2, 1, 81), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svcAtmConfigQSaalNumPollPduTx.setStatus('mandatory')
svcAtmConfigQSaalNumPollPduRx = MibTableColumn((1, 3, 6, 1, 4, 1, 277, 5, 2, 2, 1, 82), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svcAtmConfigQSaalNumPollPduRx.setStatus('mandatory')
svcAtmConfigQSaalNumStatPduTx = MibTableColumn((1, 3, 6, 1, 4, 1, 277, 5, 2, 2, 1, 83), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svcAtmConfigQSaalNumStatPduTx.setStatus('mandatory')
svcAtmConfigQSaalNumStatPduRx = MibTableColumn((1, 3, 6, 1, 4, 1, 277, 5, 2, 2, 1, 84), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svcAtmConfigQSaalNumStatPduRx.setStatus('mandatory')
svcAtmConfigQSaalNumUstatPduTx = MibTableColumn((1, 3, 6, 1, 4, 1, 277, 5, 2, 2, 1, 85), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svcAtmConfigQSaalNumUstatPduTx.setStatus('mandatory')
svcAtmConfigQSaalNumUstatPduRx = MibTableColumn((1, 3, 6, 1, 4, 1, 277, 5, 2, 2, 1, 86), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svcAtmConfigQSaalNumUstatPduRx.setStatus('mandatory')
svcAtmConfigQSaalNumUdPduTx = MibTableColumn((1, 3, 6, 1, 4, 1, 277, 5, 2, 2, 1, 87), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svcAtmConfigQSaalNumUdPduTx.setStatus('mandatory')
svcAtmConfigQSaalNumUdPduRx = MibTableColumn((1, 3, 6, 1, 4, 1, 277, 5, 2, 2, 1, 88), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svcAtmConfigQSaalNumUdPduRx.setStatus('mandatory')
svcAtmConfigQSaalNumMdPduTx = MibTableColumn((1, 3, 6, 1, 4, 1, 277, 5, 2, 2, 1, 89), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svcAtmConfigQSaalNumMdPduTx.setStatus('mandatory')
svcAtmConfigQSaalNumMdPduRx = MibTableColumn((1, 3, 6, 1, 4, 1, 277, 5, 2, 2, 1, 90), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svcAtmConfigQSaalNumMdPduRx.setStatus('mandatory')
svcAtmFailedCallTable = MibTable((1, 3, 6, 1, 4, 1, 277, 5, 2, 3), )
if mibBuilder.loadTexts: svcAtmFailedCallTable.setStatus('mandatory')
svcAtmFailedCallEntry = MibTableRow((1, 3, 6, 1, 4, 1, 277, 5, 2, 3, 1), ).setIndexNames((0, "CASCADE-MIB", "svcAtmFailedCallIfIndex"), (0, "CASCADE-MIB", "svcAtmFailedCallIndex"))
if mibBuilder.loadTexts: svcAtmFailedCallEntry.setStatus('mandatory')
svcAtmFailedCallIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 277, 5, 2, 3, 1, 1), Index()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svcAtmFailedCallIfIndex.setStatus('mandatory')
svcAtmFailedCallIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 277, 5, 2, 3, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svcAtmFailedCallIndex.setStatus('mandatory')
svcAtmFailedCallDirection = MibTableColumn((1, 3, 6, 1, 4, 1, 277, 5, 2, 3, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("caller", 1), ("callee", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: svcAtmFailedCallDirection.setStatus('mandatory')
svcAtmFailedCallPduType = MibTableColumn((1, 3, 6, 1, 4, 1, 277, 5, 2, 3, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("release", 1), ("addPartyReject", 2), ("dropParty", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: svcAtmFailedCallPduType.setStatus('mandatory')
svcAtmFailedCallPduDirection = MibTableColumn((1, 3, 6, 1, 4, 1, 277, 5, 2, 3, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("transmitted", 1), ("received", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: svcAtmFailedCallPduDirection.setStatus('mandatory')
svcAtmFailedCallCause = MibTableColumn((1, 3, 6, 1, 4, 1, 277, 5, 2, 3, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 10, 16, 17, 18, 21, 22, 23, 27, 28, 30, 31, 35, 36, 37, 38, 41, 43, 45, 47, 49, 51, 57, 58, 63, 65, 73, 78, 81, 82, 88, 89, 91, 92, 93, 96, 97, 99, 100, 101, 102, 104, 111, 127))).clone(namedValues=NamedValues(("unalloc-nmb", 1), ("no-route-transnet", 2), ("no-route-dest", 3), ("vcc-unacceptable-30", 10), ("normal-call-clr-31", 16), ("user-busy", 17), ("no-user-response", 18), ("call-reject", 21), ("nmb-changed", 22), ("call-reject-clir", 23), ("dest-out-of-order", 27), ("invalid-nmb-format", 28), ("response-stat-enq", 30), ("normal-unspecified", 31), ("req-vcc-unavailable", 35), ("vcc-fail-31", 36), ("rate-unavail-31", 37), ("network-out-of-order", 38), ("temp-fail", 41), ("access-info-discard", 43), ("no-vcc-available", 45), ("resources-unavailable", 47), ("qos-unavailable", 49), ("rate-unavailable-30", 51), ("b-cap-not-authorized", 57), ("b-cap-unavailable", 58), ("service-unavailable", 63), ("b-cap-not-implemented", 65), ("combination-unsupported", 73), ("aal-params-unsupp-31", 78), ("invalid-call-reference", 81), ("no-channel", 82), ("dest-incompatible", 88), ("invalid-endpoint-ref", 89), ("invalid-transit-net", 91), ("too-many-add-pty-req", 92), ("aal-params-unsupp-30", 93), ("info-element-missing", 96), ("msg-type-not-imp", 97), ("info-element-not-imp", 99), ("invalid-info-element", 100), ("message-not-compatible", 101), ("timer-recovery", 102), ("invalid-message-len", 104), ("protocol-error", 111), ("optional-element-error", 127)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: svcAtmFailedCallCause.setStatus('mandatory')
svcAtmFailedCallLocation = MibTableColumn((1, 3, 6, 1, 4, 1, 277, 5, 2, 3, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("user", 1), ("privNetServLocal", 2), ("pubNetServLocal", 3), ("transitNet", 4), ("pubNetServRemote", 5), ("privNetServRemote", 6), ("intlNet", 7), ("netBeyondInterwkPt", 8)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: svcAtmFailedCallLocation.setStatus('mandatory')
svcAtmFailedCallDiagnostic = MibTableColumn((1, 3, 6, 1, 4, 1, 277, 5, 2, 3, 1, 8), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svcAtmFailedCallDiagnostic.setStatus('mandatory')
svcAtmFailedCallCreationTime = MibTableColumn((1, 3, 6, 1, 4, 1, 277, 5, 2, 3, 1, 9), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svcAtmFailedCallCreationTime.setStatus('mandatory')
svcAtmFailedCallTerminationTime = MibTableColumn((1, 3, 6, 1, 4, 1, 277, 5, 2, 3, 1, 10), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svcAtmFailedCallTerminationTime.setStatus('mandatory')
svcAtmFailedCallFailureNodeId = MibTableColumn((1, 3, 6, 1, 4, 1, 277, 5, 2, 3, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svcAtmFailedCallFailureNodeId.setStatus('mandatory')
svcAtmFailedCallFailureIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 277, 5, 2, 3, 1, 12), Index()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svcAtmFailedCallFailureIfIndex.setStatus('mandatory')
svcAtmFailedCallCallingParty = MibTableColumn((1, 3, 6, 1, 4, 1, 277, 5, 2, 3, 1, 13), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svcAtmFailedCallCallingParty.setStatus('mandatory')
svcAtmFailedCallCalledParty = MibTableColumn((1, 3, 6, 1, 4, 1, 277, 5, 2, 3, 1, 14), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svcAtmFailedCallCalledParty.setStatus('mandatory')
svcAtmFailedCallAtmTfdType = MibTableColumn((1, 3, 6, 1, 4, 1, 277, 5, 2, 3, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("pcr-0-01", 1), ("pcr-0-01-tag", 2), ("pcr-01-scr-0-mbs-0", 3), ("pcr-01-scr-0-mbs-0-tag", 4), ("pcr-01", 5), ("pcr-01-scr-01-mbs-01", 6), ("pcr-01-bestEffort", 7), ("unknown", 8)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: svcAtmFailedCallAtmTfdType.setStatus('mandatory')
svcAtmFailedCallAtmTfdParam1 = MibTableColumn((1, 3, 6, 1, 4, 1, 277, 5, 2, 3, 1, 16), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svcAtmFailedCallAtmTfdParam1.setStatus('mandatory')
svcAtmFailedCallAtmTfdParam2 = MibTableColumn((1, 3, 6, 1, 4, 1, 277, 5, 2, 3, 1, 17), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svcAtmFailedCallAtmTfdParam2.setStatus('mandatory')
svcAtmFailedCallAtmTfdParam3 = MibTableColumn((1, 3, 6, 1, 4, 1, 277, 5, 2, 3, 1, 18), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svcAtmFailedCallAtmTfdParam3.setStatus('mandatory')
svcAtmFailedCallAtmQosClass = MibTableColumn((1, 3, 6, 1, 4, 1, 277, 5, 2, 3, 1, 19), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svcAtmFailedCallAtmQosClass.setStatus('mandatory')
svcAtmFailedCallAtmRTfdType = MibTableColumn((1, 3, 6, 1, 4, 1, 277, 5, 2, 3, 1, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("pcr-0-01", 1), ("pcr-0-01-tag", 2), ("pcr-01-scr-0-mbs-0", 3), ("pcr-01-scr-0-mbs-0-tag", 4), ("pcr-01", 5), ("pcr-01-scr-01-mbs-01", 6), ("pcr-01-bestEffort", 7), ("unknown", 8)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: svcAtmFailedCallAtmRTfdType.setStatus('mandatory')
svcAtmFailedCallAtmRTfdParam1 = MibTableColumn((1, 3, 6, 1, 4, 1, 277, 5, 2, 3, 1, 21), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svcAtmFailedCallAtmRTfdParam1.setStatus('mandatory')
svcAtmFailedCallAtmRTfdParam2 = MibTableColumn((1, 3, 6, 1, 4, 1, 277, 5, 2, 3, 1, 22), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svcAtmFailedCallAtmRTfdParam2.setStatus('mandatory')
svcAtmFailedCallAtmRTfdParam3 = MibTableColumn((1, 3, 6, 1, 4, 1, 277, 5, 2, 3, 1, 23), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svcAtmFailedCallAtmRTfdParam3.setStatus('mandatory')
svcAtmFailedCallAtmRQoSClass = MibTableColumn((1, 3, 6, 1, 4, 1, 277, 5, 2, 3, 1, 24), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svcAtmFailedCallAtmRQoSClass.setStatus('mandatory')
svcAtmFailedCallBBearerClass = MibTableColumn((1, 3, 6, 1, 4, 1, 277, 5, 2, 3, 1, 25), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 3, 16))).clone(namedValues=NamedValues(("class-A", 1), ("class-C", 3), ("class-X", 16)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: svcAtmFailedCallBBearerClass.setStatus('mandatory')
svcAtmFailedCallBBearerTfcType = MibTableColumn((1, 3, 6, 1, 4, 1, 277, 5, 2, 3, 1, 26), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("notIndicated", 1), ("cbr", 2), ("vbr", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: svcAtmFailedCallBBearerTfcType.setStatus('mandatory')
svcAtmFailedCallBBearerTmgRqmt = MibTableColumn((1, 3, 6, 1, 4, 1, 277, 5, 2, 3, 1, 27), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("notIndicated", 1), ("required", 2), ("not-required", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: svcAtmFailedCallBBearerTmgRqmt.setStatus('mandatory')
svcAtmFailedCallBBearerUplaneCfg = MibTableColumn((1, 3, 6, 1, 4, 1, 277, 5, 2, 3, 1, 28), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("point-point", 1), ("point-multipoint", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: svcAtmFailedCallBBearerUplaneCfg.setStatus('mandatory')
svcAtmFailedCallBBearerClippingSusc = MibTableColumn((1, 3, 6, 1, 4, 1, 277, 5, 2, 3, 1, 29), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("not-susceptible", 1), ("susceptible", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: svcAtmFailedCallBBearerClippingSusc.setStatus('mandatory')
svcAtmFailedCallAdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 277, 5, 2, 3, 1, 30), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("valid", 1), ("invalid", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: svcAtmFailedCallAdminStatus.setStatus('mandatory')
swTable = MibTable((1, 3, 6, 1, 4, 1, 277, 6, 1), )
if mibBuilder.loadTexts: swTable.setStatus('mandatory')
swEntry = MibTableRow((1, 3, 6, 1, 4, 1, 277, 6, 1, 1), ).setIndexNames((0, "CASCADE-MIB", "swLogicalSlotId"), (0, "CASCADE-MIB", "swRedundState"))
if mibBuilder.loadTexts: swEntry.setStatus('mandatory')
swLogicalSlotId = MibTableColumn((1, 3, 6, 1, 4, 1, 277, 6, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swLogicalSlotId.setStatus('mandatory')
swRedundState = MibTableColumn((1, 3, 6, 1, 4, 1, 277, 6, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("active", 1), ("standby", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swRedundState.setStatus('mandatory')
swRevision = MibTableColumn((1, 3, 6, 1, 4, 1, 277, 6, 1, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swRevision.setStatus('mandatory')
swBuildID = MibTableColumn((1, 3, 6, 1, 4, 1, 277, 6, 1, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swBuildID.setStatus('mandatory')
swBuildDate = MibTableColumn((1, 3, 6, 1, 4, 1, 277, 6, 1, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swBuildDate.setStatus('mandatory')
swBuildDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 277, 6, 1, 1, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swBuildDescription.setStatus('mandatory')
swCopyrightNotice = MibTableColumn((1, 3, 6, 1, 4, 1, 277, 6, 1, 1, 7), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swCopyrightNotice.setStatus('mandatory')
swCapabilityMask = MibTableColumn((1, 3, 6, 1, 4, 1, 277, 6, 1, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swCapabilityMask.setStatus('mandatory')
swFeatureMask = MibTableColumn((1, 3, 6, 1, 4, 1, 277, 6, 1, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swFeatureMask.setStatus('mandatory')
swPatchMask = MibTableColumn((1, 3, 6, 1, 4, 1, 277, 6, 1, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swPatchMask.setStatus('mandatory')
swBuildUserId = MibTableColumn((1, 3, 6, 1, 4, 1, 277, 6, 1, 1, 11), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swBuildUserId.setStatus('mandatory')
swBuildView = MibTableColumn((1, 3, 6, 1, 4, 1, 277, 6, 1, 1, 12), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swBuildView.setStatus('mandatory')
swBuildConfigSpec = MibTableColumn((1, 3, 6, 1, 4, 1, 277, 6, 1, 1, 13), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swBuildConfigSpec.setStatus('mandatory')
nodeBoardInserted = NotificationType((1, 3, 6, 1, 4, 1, 277, 1) + (0,1)).setObjects(("CASCADE-MIB", "pportSlotId"), ("CASCADE-MIB", "pportType"))
nodeBoardPulled = NotificationType((1, 3, 6, 1, 4, 1, 277, 1) + (0,2)).setObjects(("CASCADE-MIB", "pportSlotId"), ("CASCADE-MIB", "pportType"))
nodeBoardMismatch = NotificationType((1, 3, 6, 1, 4, 1, 277, 1) + (0,3)).setObjects(("CASCADE-MIB", "pportSlotId"), ("CASCADE-MIB", "pportType"))
nodePsAStatusChange = NotificationType((1, 3, 6, 1, 4, 1, 277, 1) + (0,4)).setObjects(("CASCADE-MIB", "nodePsAStatus"))
nodePsBStatusChange = NotificationType((1, 3, 6, 1, 4, 1, 277, 1) + (0,5)).setObjects(("CASCADE-MIB", "nodePsBStatus"))
nodeFanStatusChange = NotificationType((1, 3, 6, 1, 4, 1, 277, 1) + (0,6)).setObjects(("CASCADE-MIB", "nodeFanIndex"), ("CASCADE-MIB", "nodeFanStatus"))
nodeSwDownloadComplete = NotificationType((1, 3, 6, 1, 4, 1, 277, 1) + (0,7)).setObjects(("CASCADE-MIB", "nodeSwFilename"))
nodeSwDownloadFailed = NotificationType((1, 3, 6, 1, 4, 1, 277, 1) + (0,8)).setObjects(("CASCADE-MIB", "nodeSwFilename"))
nodePrDownloadComplete = NotificationType((1, 3, 6, 1, 4, 1, 277, 1) + (0,9)).setObjects(("CASCADE-MIB", "nodePrFilename"))
nodePrDownloadFailed = NotificationType((1, 3, 6, 1, 4, 1, 277, 1) + (0,10)).setObjects(("CASCADE-MIB", "nodePrFilename"))
nodeTracefull = NotificationType((1, 3, 6, 1, 4, 1, 277, 1) + (0,11))
nodeDiagLogfull = NotificationType((1, 3, 6, 1, 4, 1, 277, 1) + (0,12))
nodeFlashMemErr = NotificationType((1, 3, 6, 1, 4, 1, 277, 1) + (0,13))
nodePramErr = NotificationType((1, 3, 6, 1, 4, 1, 277, 1) + (0,14))
nodeRamErr = NotificationType((1, 3, 6, 1, 4, 1, 277, 1) + (0,15))
nodeInternalErr = NotificationType((1, 3, 6, 1, 4, 1, 277, 1) + (0,16))
pportStatusChange = NotificationType((1, 3, 6, 1, 4, 1, 277, 1) + (0,17)).setObjects(("CASCADE-MIB", "pportSlotId"), ("CASCADE-MIB", "pportId"), ("CASCADE-MIB", "pportOperStatus"), ("CASCADE-MIB", "pportLinkDownReason"))
lportCongests = NotificationType((1, 3, 6, 1, 4, 1, 277, 1) + (0,18)).setObjects(("CASCADE-MIB", "lportIfIndex"), ("CASCADE-MIB", "lportCongestRate"))
trkStatusChange = NotificationType((1, 3, 6, 1, 4, 1, 277, 1) + (0,19)).setObjects(("CASCADE-MIB", "lportIfIndex"), ("CASCADE-MIB", "lportSlotId"), ("CASCADE-MIB", "lportPportId"), ("CASCADE-MIB", "lportId"), ("CASCADE-MIB", "lportTrkStatus"))
cktDlciStatusChange = NotificationType((1, 3, 6, 1, 4, 1, 277, 1) + (0,20)).setObjects(("CASCADE-MIB", "cktSrcIfIndex"), ("CASCADE-MIB", "cktSrcDlci"), ("CASCADE-MIB", "cktOperStatus"), ("CASCADE-MIB", "cktFailReason"), ("CASCADE-MIB", "cktFailNode"), ("CASCADE-MIB", "cktFailPort"))
cktDlciReroute = NotificationType((1, 3, 6, 1, 4, 1, 277, 1) + (0,21)).setObjects(("CASCADE-MIB", "cktSrcIfIndex"), ("CASCADE-MIB", "cktSrcDlci"))
pportInterfaceMismatch = NotificationType((1, 3, 6, 1, 4, 1, 277, 1) + (0,22)).setObjects(("CASCADE-MIB", "pportSlotId"), ("CASCADE-MIB", "pportId"), ("CASCADE-MIB", "pportAdminInterface"), ("CASCADE-MIB", "pportInterface"))
lportErrorExceedThreshold = NotificationType((1, 3, 6, 1, 4, 1, 277, 1) + (0,23)).setObjects(("CASCADE-MIB", "lportIfIndex"), ("IF-MIB", "ifInErrors"))
nodeErrorReport = NotificationType((1, 3, 6, 1, 4, 1, 277, 1) + (0,24)).setObjects(("CASCADE-MIB", "nodeDiagNonFatalSource"), ("CASCADE-MIB", "nodeDiagNonFatalTime"), ("CASCADE-MIB", "nodeDiagNonFatalErrMajor"), ("CASCADE-MIB", "nodeDiagNonFatalErrMinor"), ("CASCADE-MIB", "nodeDiagNonFatalStr"))
cktGrpStatusChange = NotificationType((1, 3, 6, 1, 4, 1, 277, 1) + (0,25)).setObjects(("CASCADE-MIB", "cardCktGroupTrap"))
nodeUserLogin = NotificationType((1, 3, 6, 1, 4, 1, 277, 1) + (0,26)).setObjects(("CASCADE-MIB", "nodeConsoleIndex"), ("CASCADE-MIB", "nodeUserName"), ("CASCADE-MIB", "nodeUserFrom"), ("CASCADE-MIB", "nodeConsoleUptime"))
nodeUserLogout = NotificationType((1, 3, 6, 1, 4, 1, 277, 1) + (0,27)).setObjects(("CASCADE-MIB", "nodeConsoleIndex"), ("CASCADE-MIB", "nodeUserName"), ("CASCADE-MIB", "nodeUserFrom"), ("CASCADE-MIB", "nodeConsoleUptime"))
cardUp = NotificationType((1, 3, 6, 1, 4, 1, 277, 1) + (0,28)).setObjects(("CASCADE-MIB", "cardPhysicalSlotId"))
cardDown = NotificationType((1, 3, 6, 1, 4, 1, 277, 1) + (0,29)).setObjects(("CASCADE-MIB", "cardPhysicalSlotId"))
lnkStatusChange = NotificationType((1, 3, 6, 1, 4, 1, 277, 1) + (0,30)).setObjects(("CASCADE-MIB", "lportIfIndex"), ("CASCADE-MIB", "lportSlotId"), ("CASCADE-MIB", "lportPportId"), ("CASCADE-MIB", "lportId"), ("CASCADE-MIB", "lportLinkStatus"))
lnkSmdsHbpNaTca = NotificationType((1, 3, 6, 1, 4, 1, 277, 1) + (0,31)).setObjects(("CASCADE-MIB", "lportIfIndex"), ("CASCADE-MIB", "lportSlotId"), ("CASCADE-MIB", "lportPportId"), ("CASCADE-MIB", "lportId"))
lnkSmdsDiscardTca = NotificationType((1, 3, 6, 1, 4, 1, 277, 1) + (0,32)).setObjects(("CASCADE-MIB", "lportIfIndex"), ("CASCADE-MIB", "lportSlotId"), ("CASCADE-MIB", "lportPportId"), ("CASCADE-MIB", "lportId"))
cardRedundSwitchOver = NotificationType((1, 3, 6, 1, 4, 1, 277, 1) + (0,33)).setObjects(("CASCADE-MIB", "cardPhysicalSlotId"))
cardErrorReport = NotificationType((1, 3, 6, 1, 4, 1, 277, 1) + (0,34)).setObjects(("CASCADE-MIB", "cardDiagNonFatalSource"), ("CASCADE-MIB", "cardDiagNonFatalTime"), ("CASCADE-MIB", "cardDiagNonFatalErrMajor"), ("CASCADE-MIB", "cardDiagNonFatalErrMinor"), ("CASCADE-MIB", "cardDiagNonFatalStr"), ("CASCADE-MIB", "cardPhysicalSlotId"))
svcSetup = NotificationType((1, 3, 6, 1, 4, 1, 277, 1) + (0,35)).setObjects(("CASCADE-MIB", "cktSrcIfIndex"), ("CASCADE-MIB", "cktSrcDlci"), ("CASCADE-MIB", "cktSvcCallingParty"), ("CASCADE-MIB", "cktSvcCalledParty"))
svcClearing = NotificationType((1, 3, 6, 1, 4, 1, 277, 1) + (0,36))
svcFailure = NotificationType((1, 3, 6, 1, 4, 1, 277, 1) + (0,37)).setObjects(("CASCADE-MIB", "cktSvcCallingParty"), ("CASCADE-MIB", "cktSvcCalledParty"), ("CASCADE-MIB", "cktSvcCause"))
trkBuAttempt = NotificationType((1, 3, 6, 1, 4, 1, 277, 1) + (0,38)).setObjects(("CASCADE-MIB", "lportIfIndex"), ("CASCADE-MIB", "lportSlotId"), ("CASCADE-MIB", "lportPportId"), ("CASCADE-MIB", "lportId"))
trkBuFailure = NotificationType((1, 3, 6, 1, 4, 1, 277, 1) + (0,39)).setObjects(("CASCADE-MIB", "lportIfIndex"), ("CASCADE-MIB", "lportSlotId"), ("CASCADE-MIB", "lportPportId"), ("CASCADE-MIB", "lportId"), ("CASCADE-MIB", "lportBuFailReason"))
trkBuReleased = NotificationType((1, 3, 6, 1, 4, 1, 277, 1) + (0,40)).setObjects(("CASCADE-MIB", "lportIfIndex"), ("CASCADE-MIB", "lportSlotId"), ("CASCADE-MIB", "lportPportId"), ("CASCADE-MIB", "lportId"))
pportDS0LoopUpChange = NotificationType((1, 3, 6, 1, 4, 1, 277, 1) + (0,41)).setObjects(("CASCADE-MIB", "pportSlotId"), ("CASCADE-MIB", "pportId"), ("CASCADE-MIB", "pportDS0LoopUpStatus"))
pportDS0LoopDownChange = NotificationType((1, 3, 6, 1, 4, 1, 277, 1) + (0,42)).setObjects(("CASCADE-MIB", "pportSlotId"), ("CASCADE-MIB", "pportId"), ("CASCADE-MIB", "pportDS0LoopDownStatus"))
lportISDNCallRej = NotificationType((1, 3, 6, 1, 4, 1, 277, 1) + (0,43)).setObjects(("CASCADE-MIB", "lportIfIndex"), ("CASCADE-MIB", "lportISDNCallRejCause"))
pportdsx3LoopChange = NotificationType((1, 3, 6, 1, 4, 1, 277, 1) + (0,44)).setObjects(("CASCADE-MIB", "pportSlotId"), ("CASCADE-MIB", "pportId"), ("CASCADE-MIB", "pportdsx3LoopStatus"))
pportds1LoopChange = NotificationType((1, 3, 6, 1, 4, 1, 277, 1) + (0,45)).setObjects(("CASCADE-MIB", "pportSlotId"), ("CASCADE-MIB", "pportId"), ("CASCADE-MIB", "pportds1LoopStatus"))
pportExtClockBackup = NotificationType((1, 3, 6, 1, 4, 1, 277, 1) + (0,46)).setObjects(("CASCADE-MIB", "pportSlotId"), ("CASCADE-MIB", "pportId"), ("CASCADE-MIB", "pportSetClkBkup"))
pportExtClockRestore = NotificationType((1, 3, 6, 1, 4, 1, 277, 1) + (0,47)).setObjects(("CASCADE-MIB", "pportSlotId"), ("CASCADE-MIB", "pportId"))
pportExtClkCapabilityMismatch = NotificationType((1, 3, 6, 1, 4, 1, 277, 1) + (0,48)).setObjects(("CASCADE-MIB", "pportSlotId"), ("CASCADE-MIB", "pportId"))
nodeFileTransferReport = NotificationType((1, 3, 6, 1, 4, 1, 277) + (0,49)).setObjects(("CASCADE-MIB", "nodeFileTransferRequest"), ("CASCADE-MIB", "nodeFileTransferStatus"))
nodeBillingUsageRecOvflWarning = NotificationType((1, 3, 6, 1, 4, 1, 277, 1) + (0,50)).setObjects(("CASCADE-MIB", "nodeBillingService"))
nodeBillingUsageRecCrFailed = NotificationType((1, 3, 6, 1, 4, 1, 277, 1) + (0,51)).setObjects(("CASCADE-MIB", "nodeBillingService"))
nodeBillingStateChange = NotificationType((1, 3, 6, 1, 4, 1, 277, 1) + (0,52)).setObjects(("CASCADE-MIB", "nodeBillingService"), ("CASCADE-MIB", "nodeBilling"))
lportBillingStateChange = NotificationType((1, 3, 6, 1, 4, 1, 277, 1) + (0,53)).setObjects(("CASCADE-MIB", "nodeBillingService"), ("CASCADE-MIB", "lportBilling"), ("CASCADE-MIB", "lportIfIndex"), ("CASCADE-MIB", "lportSlotId"), ("CASCADE-MIB", "lportPportId"), ("CASCADE-MIB", "lportId"))
nodeBillingSwAPCommsFailure = NotificationType((1, 3, 6, 1, 4, 1, 277, 1) + (0,54)).setObjects(("CASCADE-MIB", "nodeBillingAPAddress"))
svcAtmFailedCall = NotificationType((1, 3, 6, 1, 4, 1, 277, 5) + (0,55)).setObjects(("CASCADE-MIB", "svcAtmFailedCallIfIndex"), ("CASCADE-MIB", "svcAtmFailedCallIndex"))
svcAtmSigStatusChange = NotificationType((1, 3, 6, 1, 4, 1, 277, 5) + (0,56)).setObjects(("CASCADE-MIB", "svcAtmConfigIfIndex"), ("CASCADE-MIB", "svcAtmConfigOperStatus"))
lportCBRLineDataError = NotificationType((1, 3, 6, 1, 4, 1, 277, 1) + (0,57)).setObjects(("CASCADE-MIB", "lportIfIndex"), ("CASCADE-MIB", "lportSlotId"), ("CASCADE-MIB", "lportPportId"), ("CASCADE-MIB", "lportId"), ("CASCADE-MIB", "lportStarvation"), ("CASCADE-MIB", "lportRecOverflow"), ("CASCADE-MIB", "lportLossOfCellSequence"), ("CASCADE-MIB", "lportLossOfStructurePointer"))
clkSourceSwitch = NotificationType((1, 3, 6, 1, 4, 1, 277, 1) + (0,58)).setObjects(("CASCADE-MIB", "pportSlotId"), ("CASCADE-MIB", "pportId"), ("CASCADE-MIB", "pportCbrCurrentClockMode"))
clkSourceFailure = NotificationType((1, 3, 6, 1, 4, 1, 277, 1) + (0,59)).setObjects(("CASCADE-MIB", "pportSlotId"), ("CASCADE-MIB", "pportId"), ("CASCADE-MIB", "nodeRefclockActiveSrc"))
lportSmdsSip3SaNotFoundTca = NotificationType((1, 3, 6, 1, 4, 1, 277, 1) + (0,60)).setObjects(("CASCADE-MIB", "lportIfIndex"), ("CASCADE-MIB", "lportSlotId"), ("CASCADE-MIB", "lportPportId"), ("CASCADE-MIB", "lportId"))
lportSmdsSip3SaDaOnSamePortTca = NotificationType((1, 3, 6, 1, 4, 1, 277, 1) + (0,61)).setObjects(("CASCADE-MIB", "lportIfIndex"), ("CASCADE-MIB", "lportSlotId"), ("CASCADE-MIB", "lportPportId"), ("CASCADE-MIB", "lportId"))
lportSmdsSip3DstGaNotFoundTca = NotificationType((1, 3, 6, 1, 4, 1, 277, 1) + (0,62)).setObjects(("CASCADE-MIB", "lportIfIndex"), ("CASCADE-MIB", "lportSlotId"), ("CASCADE-MIB", "lportPportId"), ("CASCADE-MIB", "lportId"))
lportSmdsSip3DstIaScrnFailTca = NotificationType((1, 3, 6, 1, 4, 1, 277, 1) + (0,63)).setObjects(("CASCADE-MIB", "lportIfIndex"), ("CASCADE-MIB", "lportSlotId"), ("CASCADE-MIB", "lportPportId"), ("CASCADE-MIB", "lportId"))
lportSmdsSip3SaValFailTca = NotificationType((1, 3, 6, 1, 4, 1, 277, 1) + (0,64)).setObjects(("CASCADE-MIB", "lportIfIndex"), ("CASCADE-MIB", "lportSlotId"), ("CASCADE-MIB", "lportPportId"), ("CASCADE-MIB", "lportId"))
lportSmdsSip3DstIaNotFoundTca = NotificationType((1, 3, 6, 1, 4, 1, 277, 1) + (0,65)).setObjects(("CASCADE-MIB", "lportIfIndex"), ("CASCADE-MIB", "lportSlotId"), ("CASCADE-MIB", "lportPportId"), ("CASCADE-MIB", "lportId"))
lportSmdsSip3SrcIaScrnFailTca = NotificationType((1, 3, 6, 1, 4, 1, 277, 1) + (0,66)).setObjects(("CASCADE-MIB", "lportIfIndex"), ("CASCADE-MIB", "lportSlotId"), ("CASCADE-MIB", "lportPportId"), ("CASCADE-MIB", "lportId"))
lportSmdsSip3DstGaScrnFailTca = NotificationType((1, 3, 6, 1, 4, 1, 277, 1) + (0,67)).setObjects(("CASCADE-MIB", "lportIfIndex"), ("CASCADE-MIB", "lportSlotId"), ("CASCADE-MIB", "lportPportId"), ("CASCADE-MIB", "lportId"))
lportSmdsDxi2LinkIdInvalidTca = NotificationType((1, 3, 6, 1, 4, 1, 277, 1) + (0,68)).setObjects(("CASCADE-MIB", "lportIfIndex"), ("CASCADE-MIB", "lportSlotId"), ("CASCADE-MIB", "lportPportId"), ("CASCADE-MIB", "lportId"))
nodePrimarySyncReferenceChange = NotificationType((1, 3, 6, 1, 4, 1, 277, 1) + (0,69)).setObjects(("CASCADE-MIB", "nodePrimarySyncRefOperationalState"))
nodeSecondarySyncReferenceChange = NotificationType((1, 3, 6, 1, 4, 1, 277, 1) + (0,70)).setObjects(("CASCADE-MIB", "nodeSecondarySyncRefOperationalState"))
nodeExternalClockAChange = NotificationType((1, 3, 6, 1, 4, 1, 277, 1) + (0,71)).setObjects(("CASCADE-MIB", "nodeExternalClockAOperationalState"))
nodeExternalClockBChange = NotificationType((1, 3, 6, 1, 4, 1, 277, 1) + (0,72)).setObjects(("CASCADE-MIB", "nodeExternalClockBOperationalState"))
nodePortReferenceAChange = NotificationType((1, 3, 6, 1, 4, 1, 277, 1) + (0,73)).setObjects(("CASCADE-MIB", "nodePortClockAOperationalState"))
nodePortReferenceBChange = NotificationType((1, 3, 6, 1, 4, 1, 277, 1) + (0,74)).setObjects(("CASCADE-MIB", "nodePortClockBOperationalState"))
pportDS0InitiateLpbkFailure = NotificationType((1, 3, 6, 1, 4, 1, 277, 1) + (0,75)).setObjects(("CASCADE-MIB", "pportSlotId"), ("CASCADE-MIB", "pportId"), ("CASCADE-MIB", "pportDS0FarendDS0InLpbk"))
pportDS0InitiateLpbkSuccess = NotificationType((1, 3, 6, 1, 4, 1, 277, 1) + (0,76)).setObjects(("CASCADE-MIB", "pportSlotId"), ("CASCADE-MIB", "pportId"), ("CASCADE-MIB", "pportDS0FarendDS0InLpbk"))
lportISDNIpAddrRej = NotificationType((1, 3, 6, 1, 4, 1, 277, 1) + (0,77)).setObjects(("CASCADE-MIB", "lportIfIndex"), ("CASCADE-MIB", "lportISDNIpAddrAssignFail"))
cktAtmStatusChange = NotificationType((1, 3, 6, 1, 4, 1, 277, 1) + (0,78)).setObjects(("CASCADE-MIB", "cktSrcIfIndex"), ("CASCADE-MIB", "cktAtmVPI"), ("CASCADE-MIB", "cktAtmVCI"), ("CASCADE-MIB", "cktOperStatus"), ("CASCADE-MIB", "cktFailReason"), ("CASCADE-MIB", "cktFailNode"), ("CASCADE-MIB", "cktFailPort"))
cktAtmReroute = NotificationType((1, 3, 6, 1, 4, 1, 277, 1) + (0,79)).setObjects(("CASCADE-MIB", "cktSrcIfIndex"), ("CASCADE-MIB", "cktAtmVPI"), ("CASCADE-MIB", "cktAtmVCI"))
cardTransmitClockStatusChange = NotificationType((1, 3, 6, 1, 4, 1, 277, 1) + (0,80)).setObjects(("CASCADE-MIB", "cardPhysicalSlotId"), ("CASCADE-MIB", "cardTransmitClockStatus"))
cardSystemPrimaryClockStatusChange = NotificationType((1, 3, 6, 1, 4, 1, 277, 1) + (0,81)).setObjects(("CASCADE-MIB", "cardPhysicalSlotId"), ("CASCADE-MIB", "cardSystemPrimaryClockStatus"))
cardSystemSecondaryClockStatusChange = NotificationType((1, 3, 6, 1, 4, 1, 277, 1) + (0,82)).setObjects(("CASCADE-MIB", "cardPhysicalSlotId"), ("CASCADE-MIB", "cardSystemSecondaryClockStatus"))
mibBuilder.exportSymbols("CASCADE-MIB", lportSignal=lportSignal, cktReqCTD=cktReqCTD, lportDceErrorThresh=lportDceErrorThresh, cktAbrADTF=cktAbrADTF, nameType=nameType, pportInterfaceMismatch=pportInterfaceMismatch, cktLeafDteStatus=cktLeafDteStatus, svcAtmConfigQ93bNumReleaseCmpltPduRx=svcAtmConfigQ93bNumReleaseCmpltPduRx, cardOutDiscardCells=cardOutDiscardCells, cardInGoodBtus=cardInGoodBtus, pportBipSectionErrors=pportBipSectionErrors, pportId=pportId, pportInFrames=pportInFrames, lportSmdsTotalDiscards=lportSmdsTotalDiscards, nodeBillingUsageDataStoreFull=nodeBillingUsageDataStoreFull, cardAdminIOAType=cardAdminIOAType, cktXlatFlag=cktXlatFlag, lportSmdsCntSip3Crc32Errors=lportSmdsCntSip3Crc32Errors, cktMPEligible=cktMPEligible, svcAtmConfigQSaalNumBgrejPduRx=svcAtmConfigQSaalNumBgrejPduRx, cktOperStatus=cktOperStatus, lportBurstTolerance=lportBurstTolerance, cktOutODEOctets=cktOutODEOctets, cktRFrameSize=cktRFrameSize, svcAtmConfigQSaalNumUstatPduRx=svcAtmConfigQSaalNumUstatPduRx, lportAtmProtocol=lportAtmProtocol, cktFrameSize=cktFrameSize, cktSvcBBearerClippingSusc=cktSvcBBearerClippingSusc, cktDeltaBc=cktDeltaBc, pportBertPattern=pportBertPattern, svcPrefixRemoteGatewayNmbPlan=svcPrefixRemoteGatewayNmbPlan, cardMemClrLog=cardMemClrLog, nodeToRedundant=nodeToRedundant, svcAtmConfigQ93bNumRestartPduRx=svcAtmConfigQ93bNumRestartPduRx, nodeBillingTotalUsageRecOvflWarnings=nodeBillingTotalUsageRecOvflWarnings, pportInErrors=pportInErrors, svcAtmConfigQ93bNumConnectAckPduTx=svcAtmConfigQ93bNumConnectAckPduTx, svcAtmFailedCallBBearerClippingSusc=svcAtmFailedCallBBearerClippingSusc, lportAtmDataRateQoS1=lportAtmDataRateQoS1, cktAccumCTD=cktAccumCTD, cktSmdsLocalPort=cktSmdsLocalPort, pportXmitClock=pportXmitClock, pportATMTcaEnable=pportATMTcaEnable, pportInDiscards=pportInDiscards, pportBipPathErrors=pportBipPathErrors, cardAdminStatus=cardAdminStatus, lportDiagResultStr=lportDiagResultStr, cktAtmTfdParam1=cktAtmTfdParam1, nodeDiagFatalTime=nodeDiagFatalTime, pportOutDiscardsCell=pportOutDiscardsCell, cktOutLostDEFrames=cktOutLostDEFrames, nodeBillingCurAggrPeriodStart=nodeBillingCurAggrPeriodStart, svcAtmFailedCallBBearerTmgRqmt=svcAtmFailedCallBBearerTmgRqmt, cktSmdsVcState=cktSmdsVcState, pportDS0BitErrorCount=pportDS0BitErrorCount, nodeFanStatus=nodeFanStatus, cktAtmOutOAMClp0Cells=cktAtmOutOAMClp0Cells, cktSvcAalType=cktSvcAalType, nodeOamAlarmDisabled=nodeOamAlarmDisabled, lportSmdsCntSip3SaTypeInvalids=lportSmdsCntSip3SaTypeInvalids, nodePortReferenceBChange=nodePortReferenceBChange, cktOspfCdv=cktOspfCdv, cardATMTcaSPPearlGVbr1FailureAlertPeriod=cardATMTcaSPPearlGVbr1FailureAlertPeriod, pportOutErrors=pportOutErrors, cardSystemSecondaryClockPortConfig=cardSystemSecondaryClockPortConfig, swCapabilityMask=swCapabilityMask, nodeToColdboot=nodeToColdboot, cardATMTcaSPPearlGCbrFailureAlertPeriod=cardATMTcaSPPearlGCbrFailureAlertPeriod, dsx1TotalBESs=dsx1TotalBESs, nodeDiagNonFatalStr=nodeDiagNonFatalStr, lportIgCutThruStatus=lportIgCutThruStatus, pportDS0LpbkMode=pportDS0LpbkMode, nodeRebootAfterLoad=nodeRebootAfterLoad, svcAtmFailedCallBBearerUplaneCfg=svcAtmFailedCallBBearerUplaneCfg, smdsaddrType=smdsaddrType, svcConfigIngressAddrXlateMode=svcConfigIngressAddrXlateMode, isdnAddrEntry=isdnAddrEntry, cktLeafDestNodeId=cktLeafDestNodeId, svcAtmConfigQ93bNumDropPtyPduRx=svcAtmConfigQ93bNumDropPtyPduRx, nodeDiagLogfull=nodeDiagLogfull, swLogicalSlotId=swLogicalSlotId, lportSmdsPduViolTca=lportSmdsPduViolTca, nodeRefclocksrcPportId=nodeRefclocksrcPportId, cktSmdsHopCnt=cktSmdsHopCnt, lportXmitDiscardLow=lportXmitDiscardLow, nodeRefclocksrcType=nodeRefclocksrcType, lportSmdsPduHdrSip3SaTypeInvalid=lportSmdsPduHdrSip3SaTypeInvalid, cardDiagNonFatalErrMinor=cardDiagNonFatalErrMinor, lportSmdsSsiNode=lportSmdsSsiNode, svcAtmConfigQ93bMaxStatEnq=svcAtmConfigQ93bMaxStatEnq, dsx1IntervalSlotId=dsx1IntervalSlotId, cardATMTcaSPPearlOCbrThresh=cardATMTcaSPPearlOCbrThresh, dsx1CurrentBESs=dsx1CurrentBESs, lportInVAvailbw=lportInVAvailbw, nodeDiagFatalSource=nodeDiagFatalSource, cktAdminCostReal=cktAdminCostReal, svcAtmUserPartEntry=svcAtmUserPartEntry, nodeNMSTable=nodeNMSTable, nodeDiagNonFatalSource=nodeDiagNonFatalSource, cktRnr=cktRnr, svcAtmConfigQ93bNumDropPtyAckPduTx=svcAtmConfigQ93bNumDropPtyAckPduTx, nodeUserFrom=nodeUserFrom, lportDCEnT3=lportDCEnT3, cardATMTcaEnable=cardATMTcaEnable, cktIWF1490to1483LastBadHeader=cktIWF1490to1483LastBadHeader, cardOperType=cardOperType, cardOutCells=cardOutCells, nodePsBDiagCode=nodePsBDiagCode, lportTrkAdminCost=lportTrkAdminCost, svcAtmConfigQSaalNumUdPduTx=svcAtmConfigQSaalNumUdPduTx, svcAtmConfigQ93bNumAddPtyPduTx=svcAtmConfigQ93bNumAddPtyPduTx, svcAtmFailedCallAtmTfdParam3=svcAtmFailedCallAtmTfdParam3, pportOc3LoopConfig=pportOc3LoopConfig, nodeBillingAPPassword=nodeBillingAPPassword, cardIOAHwRev=cardIOAHwRev, dsx1IntervalBESs=dsx1IntervalBESs, svcFailure=svcFailure, cardNrtsIdleCktThresh=cardNrtsIdleCktThresh, lportSmdsPduHdrDxi2StationIdInvalid=lportSmdsPduHdrDxi2StationIdInvalid, cardState=cardState, lportAtmVpiBits=lportAtmVpiBits, cktMPForcedCaller=cktMPForcedCaller, cktOutLostOctets=cktOutLostOctets, cktHelloAckCounter=cktHelloAckCounter, cktSmdsRtTable=cktSmdsRtTable, nodePortClockBOperationalState=nodePortClockBOperationalState, lportTrkTrafficMix=lportTrkTrafficMix, dsx1CurrentCSSs=dsx1CurrentCSSs, cktLeafSvcCalledParty=cktLeafSvcCalledParty, pportBertCommand=pportBertCommand, cktNotVirgin=cktNotVirgin, lportSmdsPduHdrDxi2LinkIdInvalid=lportSmdsPduHdrDxi2LinkIdInvalid, pportTrafficShaperCredit=pportTrafficShaperCredit, svcAtmConfigQSaalTCC=svcAtmConfigQSaalTCC, nodeCapability=nodeCapability, pportdsx3LoopbackConfig=pportdsx3LoopbackConfig, cktInFrames=cktInFrames, svcaddress=svcaddress, cktAdminCostThreshold=cktAdminCostThreshold, lportCongestState=lportCongestState, nodeRerouteDelay=nodeRerouteDelay, swTable=swTable, pportATMTcaInHECErrorUAlertPeriod=pportATMTcaInHECErrorUAlertPeriod, pportSetClkBkup=pportSetClkBkup, lportSmdsCntDstIaScrnFails=lportSmdsCntDstIaScrnFails, lportSmdsSsiIf=lportSmdsSsiIf, cardRedundState=cardRedundState, svcAtmConfigQSaalNumMdPduTx=svcAtmConfigQSaalNumMdPduTx, lportBuTrkOnFailure=lportBuTrkOnFailure, nodeBillingUsageRecCreated=nodeBillingUsageRecCreated, svcAtmConfigQSaalNumBgrejPduTx=svcAtmConfigQSaalNumBgrejPduTx, lportSmdsCntSip3RsvdInvalids=lportSmdsCntSip3RsvdInvalids, cardFlashRev=cardFlashRev, cardDiagBackgroundPasses=cardDiagBackgroundPasses, cardModel=cardModel, cktAbrTBE=cktAbrTBE, pportDS0LoopUpStatus=pportDS0LoopUpStatus, netSmdsAreaMaskStart=netSmdsAreaMaskStart, lportISDNCallRej=lportISDNCallRej, pportAPSconfigStatus=pportAPSconfigStatus, pportTrafficShaperTable=pportTrafficShaperTable, smdsaddrIf=smdsaddrIf, cktLoop=cktLoop, nodeRefclocksrcSlotId=nodeRefclocksrcSlotId, cktROde=cktROde, cardRedundSlotMask=cardRedundSlotMask, lportSmdsCntSip3HeLenInvalids=lportSmdsCntSip3HeLenInvalids, lportSmdsCntSsiProvisionErrors=lportSmdsCntSsiProvisionErrors, cascsvc=cascsvc, svcAtmConfigQ93bNumStatusPduRx=svcAtmConfigQ93bNumStatusPduRx, cktAtmRTfdParam1=cktAtmRTfdParam1, isdnAddrTable=isdnAddrTable, svcAtmFailedCallEntry=svcAtmFailedCallEntry, cardPhysicalSlotId=cardPhysicalSlotId, svcAtmConfigQ93bNumAddPtyRejPduTx=svcAtmConfigQ93bNumAddPtyRejPduTx, pportFibreType=pportFibreType, svcPrefixAdminStatus=svcPrefixAdminStatus, cktLeafAtmVPI=cktLeafAtmVPI, nodeUserName=nodeUserName, pportTrafficShaperPeak=pportTrafficShaperPeak, smdsaddrSsiIfNum=smdsaddrSsiIfNum, pportDS0InjectBitError=pportDS0InjectBitError, cardSystemSecondaryClockStatusChange=cardSystemSecondaryClockStatusChange, nodeBoardInserted=nodeBoardInserted, pportDS0LoopDownStatus=pportDS0LoopDownStatus, trkBuFailure=trkBuFailure, lportAtmVCI=lportAtmVCI, cktOde=cktOde, nodeRefclocksrcTable=nodeRefclocksrcTable, nodeSecondarySyncRefAdminState=nodeSecondarySyncRefAdminState, cardSystemPrimaryClockStatus=cardSystemPrimaryClockStatus, lportDCEOutFullStatusFrames=lportDCEOutFullStatusFrames, cardClp01UAbrThreshold=cardClp01UAbrThreshold, cardRequiredCapabilityBitmask=cardRequiredCapabilityBitmask, lportSmdsCntSaValidationFails=lportSmdsCntSaValidationFails, pportSonetSDHLoopbackConfig=pportSonetSDHLoopbackConfig, svcAtmConfigQ93bNumRestartAckPduRx=svcAtmConfigQ93bNumRestartAckPduRx, lportIlmiOperStatus=lportIlmiOperStatus, cardInForwardBitBtus=cardInForwardBitBtus, cardClp0UAbrThreshold=cardClp0UAbrThreshold, pportds1FELoopbackControl=pportds1FELoopbackControl, pportISDNIpBaseAddr=pportISDNIpBaseAddr, cardIOASerial=cardIOASerial, cktLastTimeChange=cktLastTimeChange, pportDs1ZeroCoding=pportDs1ZeroCoding, dsx1LineCoding=dsx1LineCoding, pportPeakCellRate3=pportPeakCellRate3, pportPMTcaId=pportPMTcaId, cktLeafAtmInCells=cktLeafAtmInCells, nodeSwFilename=nodeSwFilename, cardATMTcaECidLookupThresh=cardATMTcaECidLookupThresh, svcAtmFailedCall=svcAtmFailedCall, swPatchMask=swPatchMask, lportSVCRetryTimer=lportSVCRetryTimer, nodePrDownloadComplete=nodePrDownloadComplete, cardUpTime=cardUpTime, nodeNMSIndex=nodeNMSIndex, cktDestIfIndex=cktDestIfIndex, lportSmdsCntDxi2CrInvalids=lportSmdsCntDxi2CrInvalids, cktIWF1483to1490Error=cktIWF1483to1490Error, smdsaddrTable=smdsaddrTable, lportLastInvalidDLCI=lportLastInvalidDLCI, lportTrkDynamicDelay=lportTrkDynamicDelay, nodeBoardMismatch=nodeBoardMismatch, cktAtmPCR=cktAtmPCR, pportTrafficShaperIndex=pportTrafficShaperIndex, cardNrtsRmGenInterval=cardNrtsRmGenInterval, dsx1ConfigEntry=dsx1ConfigEntry, svcAtmUserPartUserPart=svcAtmUserPartUserPart, svcAtmConfigQSaalNumMdPduRx=svcAtmConfigQSaalNumMdPduRx, cktPath=cktPath, cktRAtmFrameDiscard=cktRAtmFrameDiscard, cktOamLoopbackCount=cktOamLoopbackCount, cktRtMaxDelay=cktRtMaxDelay, cardPramChecksum=cardPramChecksum, nodeRefclockActiveSrc=nodeRefclockActiveSrc, lportInAllocbwQoS2=lportInAllocbwQoS2, pportDS0BitErroredSeconds=pportDS0BitErroredSeconds, cardDiagFatalStr=cardDiagFatalStr, lportAtmDataRateQoS4=lportAtmDataRateQoS4, lportDCEPollErrorCounts=lportDCEPollErrorCounts, nodePsBStatusChange=nodePsBStatusChange, nodeEpromRev=nodeEpromRev, pportAPSlineType=pportAPSlineType, lportIfIndex=lportIfIndex, cktDiagTestRuns=cktDiagTestRuns, cktOamLoopbackReceivedAvg=cktOamLoopbackReceivedAvg, lportTrkProtState=lportTrkProtState, cktAbrFRMRTT=cktAbrFRMRTT, cktSvcCause=cktSvcCause, cardOperMemSize=cardOperMemSize, cktOutODEFrames=cktOutODEFrames, lportTrkStatus=lportTrkStatus, lportSmdsSip3DstIaScrnFailTca=lportSmdsSip3DstIaScrnFailTca)
mibBuilder.exportSymbols("CASCADE-MIB", cktEntryType=cktEntryType, cktLeafHelloCounter=cktLeafHelloCounter, cardMaxVCs=cardMaxVCs, cktOamLoopbackReceivedHigh=cktOamLoopbackReceivedHigh, pportBipErrorsThresh=pportBipErrorsThresh, lportCbrLossOfCellSequenceCnt=lportCbrLossOfCellSequenceCnt, cardDiagPasses=cardDiagPasses, nodeSwDownloadFailed=nodeSwDownloadFailed, lportSmdsCntOutFrDxi2HbPolls=lportSmdsCntOutFrDxi2HbPolls, cktDefinedPathCount=cktDefinedPathCount, lportSmdsCntSip3HeCarrierInvalids=lportSmdsCntSip3HeCarrierInvalids, pportAPSpairedSlotId=pportAPSpairedSlotId, lportTrkRnode=lportTrkRnode, svcAtmFailedCallDirection=svcAtmFailedCallDirection, cardSystemPrimaryClockModeConfig=cardSystemPrimaryClockModeConfig, cardHoldQFrameMemory=cardHoldQFrameMemory, lportDTEOperStatus=lportDTEOperStatus, cardNrtsMcastRate=cardNrtsMcastRate, lportMaxFramesize=lportMaxFramesize, lportCongestRate=lportCongestRate, cardDown=cardDown, cardTransmitClockSwitchOver=cardTransmitClockSwitchOver, nodeBillingCurAggrPeriodEnd=nodeBillingCurAggrPeriodEnd, cktAccumRCDV=cktAccumRCDV, lportSmdsCntDxi2AeInvalids=lportSmdsCntDxi2AeInvalids, svcAtmFailedCallFailureIfIndex=svcAtmFailedCallFailureIfIndex, trkBuReleased=trkBuReleased, svcAtmConfigQSaalNumStatPduTx=svcAtmConfigQSaalNumStatPduTx, lportTrkFailureThrsh=lportTrkFailureThrsh, cardRedundConfig=cardRedundConfig, swBuildUserId=swBuildUserId, pportTrafficShaperCellRatioDividend=pportTrafficShaperCellRatioDividend, svcAddrNmbPlan=svcAddrNmbPlan, pportDiagPassCount=pportDiagPassCount, lportShaperId=lportShaperId, svcAtmConfigQSaalTNoResponse=svcAtmConfigQSaalTNoResponse, pportPeakCellRate7=pportPeakCellRate7, svcAtmConfigQSaalNumBgakPduRx=svcAtmConfigQSaalNumBgakPduRx, cardOperStatus=cardOperStatus, cardTM1OperStatus=cardTM1OperStatus, svcAtmConfigQ93bNumCallProcPduRx=svcAtmConfigQ93bNumCallProcPduRx, dsx1TotalSESs=dsx1TotalSESs, lportSmdsPduHdrSip3DaTypeInvalid=lportSmdsPduHdrSip3DaTypeInvalid, cktDeltaRBc=cktDeltaRBc, nameName=nameName, cktQosIntPeriod=cktQosIntPeriod, cktAtmSvcRServiceCategory=cktAtmSvcRServiceCategory, nodeTracefull=nodeTracefull, cktLeafSrcDlci=cktLeafSrcDlci, svcAtmConfigQ93bNumAddPtyPduRx=svcAtmConfigQ93bNumAddPtyPduRx, nodePsAStatus=nodePsAStatus, nodePortClockAOperationalState=nodePortClockAOperationalState, svcAddrAdminStatus=svcAddrAdminStatus, cardNumber=cardNumber, lportDCEFailReason=lportDCEFailReason, cktDeltaRBe=cktDeltaRBe, cktPrivateNet=cktPrivateNet, lportTrkManualBu=lportTrkManualBu, cardATMTcaSPPearlOAbrFailureAlertPeriod=cardATMTcaSPPearlOAbrFailureAlertPeriod, cktOutFECNFrames=cktOutFECNFrames, nodeFlashMemErr=nodeFlashMemErr, cardATMTcaECidLookupFailureAlertPeriod=cardATMTcaECidLookupFailureAlertPeriod, cktAtmStatusChange=cktAtmStatusChange, lportSmdsTrkAddr=lportSmdsTrkAddr, cardATMTcaSPPearlGVbr2Thresh=cardATMTcaSPPearlGVbr2Thresh, lportSmdsPduViolThresh=lportSmdsPduViolThresh, lportSmdsCntDaSsiMismacths=lportSmdsCntDaSsiMismacths, svcAtmConfigQSaalNumRsPduRx=svcAtmConfigQSaalNumRsPduRx, cktSmdsRoute=cktSmdsRoute, svcAtmUserPartAdminStatus=svcAtmUserPartAdminStatus, cardATMTcaInBufOverflowThresh=cardATMTcaInBufOverflowThresh, lportDlcmiStd=lportDlcmiStd, svcPrefixAdminCost=svcPrefixAdminCost, pportAPSsdBerThresh=pportAPSsdBerThresh, lportEgCutThruStatus=lportEgCutThruStatus, cktAbrRDF=cktAbrRDF, cardRedundActual=cardRedundActual, nodeBillingNonBillableUsageEvents=nodeBillingNonBillableUsageEvents, pportSetDS0LoopDown=pportSetDS0LoopDown, cktCustomerID=cktCustomerID, cardBulkStatsPeakCapability=cardBulkStatsPeakCapability, smdsaddrId=smdsaddrId, cktAtmLijType=cktAtmLijType, svcAtmFailedCallAtmRTfdParam1=svcAtmFailedCallAtmRTfdParam1, nodeUserLogin=nodeUserLogin, cardATMTcaSPPearlOVbr2Thresh=cardATMTcaSPPearlOVbr2Thresh, svcConfigInitiateIdentStatsUpload=svcConfigInitiateIdentStatsUpload, pportOutDiscards=pportOutDiscards, pportAtmUnconfiguredCells=pportAtmUnconfiguredCells, pportStatusChange=pportStatusChange, cktLeafHelloAckCounter=cktLeafHelloAckCounter, svcPrefixPrefix=svcPrefixPrefix, pportDiagOptionStr=pportDiagOptionStr, nodePrimarySyncRefAdminState=nodePrimarySyncRefAdminState, nodeDiagFatalErrMajor=nodeDiagFatalErrMajor, lportSmdsSip3SrcIaScrnFailTca=lportSmdsSip3SrcIaScrnFailTca, cktNrtsDiscardClp1=cktNrtsDiscardClp1, lportISDNIpAddrAssignFail=lportISDNIpAddrAssignFail, nodeDiagNonFatalErrMinor=nodeDiagNonFatalErrMinor, lportBuFailReason=lportBuFailReason, aseMask=aseMask, pportAtmQOSTransmitMode=pportAtmQOSTransmitMode, lportInVAvailbwQoS3=lportInVAvailbwQoS3, svcAtmConfigQSaalNumPollPduRx=svcAtmConfigQSaalNumPollPduRx, lportRecFifoOverflowCnt=lportRecFifoOverflowCnt, nodeFanSpeed=nodeFanSpeed, lportOutAllocbwQoS1=lportOutAllocbwQoS1, cardATMTcaInBufOverflowAlertPeriod=cardATMTcaInBufOverflowAlertPeriod, cktLeafVcState=cktLeafVcState, cktAtmFrameIWF=cktAtmFrameIWF, pportNumber=pportNumber, lportSmdsCntOutByteSip3s=lportSmdsCntOutByteSip3s, pportSetDS0LoopUp=pportSetDS0LoopUp, cardCpuFgUtil=cardCpuFgUtil, nodeSecondaryPLLOperationalState=nodeSecondaryPLLOperationalState, cardSystemSecondaryClockModeConfig=cardSystemSecondaryClockModeConfig, dsx1IntervalCSSs=dsx1IntervalCSSs, lportTable=lportTable, dsx1IntervalSESs=dsx1IntervalSESs, pportConfigAlarmClearTime=pportConfigAlarmClearTime, cktDeltaBe=cktDeltaBe, cktDiagSARMon=cktDiagSARMon, cardOutPkts=cardOutPkts, lportRecFifoUnderflowCnt=lportRecFifoUnderflowCnt, svcAtmFailedCallTable=svcAtmFailedCallTable, cardDiagParamValue=cardDiagParamValue, nodeConsoleUptime=nodeConsoleUptime, lportSmdsCntSrcIaScrnFails=lportSmdsCntSrcIaScrnFails, nodeNMSIpAddr=nodeNMSIpAddr, lportOutAllocbwQoS2=lportOutAllocbwQoS2, nodePsBStatus=nodePsBStatus, cktDiagStr=cktDiagStr, lportSmdsCntInFrSip3s=lportSmdsCntInFrSip3s, dsx1TotalUASs=dsx1TotalUASs, dsx1TotalPortId=dsx1TotalPortId, lportSmdsCntSip3SaInvalids=lportSmdsCntSip3SaInvalids, lportAtmVciBits=lportAtmVciBits, nodeFanStatusChange=nodeFanStatusChange, svcAtmConfigQSaalNumEndPduRx=svcAtmConfigQSaalNumEndPduRx, pportFethAdminMacAddr=pportFethAdminMacAddr, cardDiagBackgroundFailures=cardDiagBackgroundFailures, lportDTEFailCounts=lportDTEFailCounts, svcNodePrefixTable=svcNodePrefixTable, lportCBRLineDataError=lportCBRLineDataError, pportCbitParity=pportCbitParity, pportInErrorCells=pportInErrorCells, pportHECMode=pportHECMode, lportUnsyncBandwidth=lportUnsyncBandwidth, nodePrimaryVersion=nodePrimaryVersion, lport=lport, cktAdminStatus=cktAdminStatus, svcAtmFailedCallCause=svcAtmFailedCallCause, nodeDiagFatalErrMinor=nodeDiagFatalErrMinor, lportQ922Enable=lportQ922Enable, pportBertErrorRate=pportBertErrorRate, svcNodePrefixNumBits=svcNodePrefixNumBits, cardATMTcaSPPearlGCbrThresh=cardATMTcaSPPearlGCbrThresh, smdsaddrMemberAddrMap=smdsaddrMemberAddrMap, svcAtmFailedCallPduType=svcAtmFailedCallPduType, svcAtmConfigQSaalNumDiscardTx=svcAtmConfigQSaalNumDiscardTx, cardDslModule=cardDslModule, pportDS0LoopStatus=pportDS0LoopStatus, dsx1SendCode=dsx1SendCode, ckt=ckt, spATMTcaId=spATMTcaId, pportDS0LoopUpChange=pportDS0LoopUpChange, nodeBillingBillableUsageEvents=nodeBillingBillableUsageEvents, pportInCells=pportInCells, lportSmdsCntDxi2StationIdInvalids=lportSmdsCntDxi2StationIdInvalids, lportBuTrkRetryInt=lportBuTrkRetryInt, CardStatuses=CardStatuses, pportDs1LineType=pportDs1LineType, pportFT1DS0s=pportFT1DS0s, pportds1LoopStatus=pportds1LoopStatus, pportOutFrames=pportOutFrames, lportOutVAvailbwQoS3=lportOutVAvailbwQoS3, cktSmdsRemoteNode=cktSmdsRemoteNode, cardIOAType=cardIOAType, nodeDiagBackgroundSuccesses=nodeDiagBackgroundSuccesses, nodeBillingSwAPCommsFailures=nodeBillingSwAPCommsFailures, lportIlmiPollRetry=lportIlmiPollRetry, pportLinkDownReason=pportLinkDownReason, nodeBillingUsageRecCrFailed=nodeBillingUsageRecCrFailed, cktAtmOutCells=cktAtmOutCells, svcAtmConfigQSaalNumRsakPduRx=svcAtmConfigQSaalNumRsakPduRx, lportISDNPoolUtil=lportISDNPoolUtil, lportDCEOutStatusFrames=lportDCEOutStatusFrames, lportSmdsSip3DstGaNotFoundTca=lportSmdsSip3DstGaNotFoundTca, lportCbrLossOfStructurePointerCnt=lportCbrLossOfStructurePointerCnt, dsx1Fdl=dsx1Fdl, lportInAllocbwQoS4=lportInAllocbwQoS4, cktAtmOutOAMClp1Cells=cktAtmOutOAMClp1Cells, cardNrtsMcastDiscardThresh=cardNrtsMcastDiscardThresh, cardAdminCapability=cardAdminCapability, lportSustCellRate=lportSustCellRate, aseAddr=aseAddr, namebindingEntry=namebindingEntry, cktDlciStatusChange=cktDlciStatusChange, cktLeafAtmInDiscardedClp0Cells=cktLeafAtmInDiscardedClp0Cells, pportOutCells=pportOutCells, cardInLinkDownBtus=cardInLinkDownBtus, nodeMemoryUsage=nodeMemoryUsage, cktRCLR=cktRCLR, nodeInactivePvcs=nodeInactivePvcs, nodePrimarySyncRefOperationalState=nodePrimarySyncRefOperationalState, cardInCells=cardInCells, lportPeakCellRateindex=lportPeakCellRateindex, lportDCEInErrorFrames=lportDCEInErrorFrames, pportAPSrevertiveMode=pportAPSrevertiveMode, pportExtClkCapabilityMismatch=pportExtClkCapabilityMismatch, cardMacAddress=cardMacAddress, cktHopCnt=cktHopCnt, cktOutLostODEOctets=cktOutLostODEOctets, cardSubcardToRedundant=cardSubcardToRedundant, clkSourceSwitch=clkSourceSwitch, cktRAbrADTF=cktRAbrADTF, isdnChanType=isdnChanType, pportATMTcaEBufOverflowVBR1AlertPeriod=pportATMTcaEBufOverflowVBR1AlertPeriod, nodeExternalClockBChange=nodeExternalClockBChange, cktBBearerAtmTransferCapability=cktBBearerAtmTransferCapability, pportIdleCellType=pportIdleCellType, cardOutOctets=cardOutOctets, lportTrkStaticDelay=lportTrkStaticDelay, pportAtmLayerErroredTransmittedCells=pportAtmLayerErroredTransmittedCells, cardFreeVCs=cardFreeVCs, svcAtmConfigQSaalNumRsPduTx=svcAtmConfigQSaalNumRsPduTx, cktRerouteBalance=cktRerouteBalance, cktRtAccuAvgDelay=cktRtAccuAvgDelay, dsx1IntervalSEFSs=dsx1IntervalSEFSs, cardATMTcaInInvalidVpiVciAlertPeriod=cardATMTcaInInvalidVpiVciAlertPeriod, cardATMTcaSPPearlGVbr1Thresh=cardATMTcaSPPearlGVbr1Thresh, lportDTEInAsyncStatusFrames=lportDTEInAsyncStatusFrames, lportSmdsCpePoll=lportSmdsCpePoll, cktAtmCDVT=cktAtmCDVT, cardInvalidPvcBTUs=cardInvalidPvcBTUs, lportDiagPassCount=lportDiagPassCount, dsx1TotalSEFSs=dsx1TotalSEFSs, lportSmdsPduHdrDxi2CrInvalid=lportSmdsPduHdrDxi2CrInvalid, lportSmdsCntSaNotFounds=lportSmdsCntSaNotFounds, cardNFBDEStatus=cardNFBDEStatus, cktLeafDteState=cktLeafDteState, cktAbrICR=cktAbrICR, pportds1FDLControl=pportds1FDLControl, svcAtmConfigQ93bT309=svcAtmConfigQ93bT309, nodeBillingUsageRecOvflWarning=nodeBillingUsageRecOvflWarning, svcAtmConfigQSaalNumStatPduRx=svcAtmConfigQSaalNumStatPduRx, cardATMTcaSPPearlGVbr2FailureAlertPeriod=cardATMTcaSPPearlGVbr2FailureAlertPeriod, svcAtmConfigQ93bNumReleasePduTx=svcAtmConfigQ93bNumReleasePduTx, pportDS0BitErrorFreeSeconds=pportDS0BitErrorFreeSeconds, svcConfigCgPtyPresentationMode=svcConfigCgPtyPresentationMode, swCopyrightNotice=swCopyrightNotice, svcAddrEntry=svcAddrEntry, cardCpuUtil=cardCpuUtil, lnkSmdsHbpNaTca=lnkSmdsHbpNaTca)
mibBuilder.exportSymbols("CASCADE-MIB", nodeFanIndex=nodeFanIndex, pportNumLport=pportNumLport, dsx1LineStatus=dsx1LineStatus, cktOutPort=cktOutPort, lportSmdsCntSip3HeVersionInvalids=lportSmdsCntSip3HeVersionInvalids, lportDteErrorThresh=lportDteErrorThresh, cardBulkStatsPeakEnable=cardBulkStatsPeakEnable, lnkStatusChange=lnkStatusChange, svcAtmConfigQ93bNumDropPtyPduTx=svcAtmConfigQ93bNumDropPtyPduTx, nodeRerouteAlg=nodeRerouteAlg, cktUsingDefinedPath=cktUsingDefinedPath, cktLeafDestDlci=cktLeafDestDlci, nodeSecondarySyncReferenceChange=nodeSecondarySyncReferenceChange, nodeTime=nodeTime, cardDiagNonFatalErrMajor=cardDiagNonFatalErrMajor, swBuildID=swBuildID, nodeDiagFatalStr=nodeDiagFatalStr, nodeFrameMemoryUsage=nodeFrameMemoryUsage, pportDataRate=pportDataRate, cktAtmTfdType=cktAtmTfdType, cktHelloCounter=cktHelloCounter, cardEpromRev=cardEpromRev, cardATMTcaSPPearlGAbrThresh=cardATMTcaSPPearlGAbrThresh, pportSonetSDHLoopStatus=pportSonetSDHLoopStatus, cktNrtsDiscardClp0=cktNrtsDiscardClp0, pportISDN=pportISDN, cktInterworkingFrToAtmEFCI=cktInterworkingFrToAtmEFCI, cktTable=cktTable, swBuildDescription=swBuildDescription, nodeDiagNonFatalErrMajor=nodeDiagNonFatalErrMajor, lportbwUNIPolicy=lportbwUNIPolicy, nodeSecondaryVersion=nodeSecondaryVersion, lportDCEOperDlcmiStd=lportDCEOperDlcmiStd, cktATMAAL5CPIError=cktATMAAL5CPIError, lportSmdsCntOutFrSip3s=lportSmdsCntOutFrSip3s, pport=pport, cktRAbrCDF=cktRAbrCDF, nodeIpAddr=nodeIpAddr, cardName=cardName, svcAtmConfigQSaalMaxCC=svcAtmConfigQSaalMaxCC, cktLeafDceState=cktLeafDceState, svcAtmConfigQ93bMaxRestart=svcAtmConfigQ93bMaxRestart, pportPeakCellRate5=pportPeakCellRate5, lportInVAvailbwQoS2=lportInVAvailbwQoS2, svcSetup=svcSetup, pportOc3LoopStatus=pportOc3LoopStatus, lportSmdsCntSip3DaTypeInvalids=lportSmdsCntSip3DaTypeInvalids, cktOamAlarmDisable=cktOamAlarmDisable, cardMemory5Usage=cardMemory5Usage, cktFailPort=cktFailPort, svcAtmConfigQSaalNumUdPduRx=svcAtmConfigQSaalNumUdPduRx, nameIfIndex=nameIfIndex, lportFt1Ds0s=lportFt1Ds0s, nodeExternalClockAOperationalState=nodeExternalClockAOperationalState, lportDiagFailCount=lportDiagFailCount, lportSmdsSip3SaNotFoundTca=lportSmdsSip3SaNotFoundTca, lportTrkUtil=lportTrkUtil, lportQP2Len=lportQP2Len, pportDiagState=pportDiagState, cardToRedundant=cardToRedundant, isdnCallerIDTable=isdnCallerIDTable, svcAtmConfigQ93bLastCauseRx=svcAtmConfigQ93bLastCauseRx, pportBertUserBytes=pportBertUserBytes, pportDS0FarendLpbkType=pportDS0FarendLpbkType, svcConfigCgPtyInsertionNmbPlan=svcConfigCgPtyInsertionNmbPlan, lportSmdsPduHdrSip3SaValFail=lportSmdsPduHdrSip3SaValFail, lportDTEInErrorFrames=lportDTEInErrorFrames, nodeInitiateImageRestore=nodeInitiateImageRestore, cardMemoryUsage=cardMemoryUsage, cktLeafAtmVCI=cktLeafAtmVCI, cardIncompleteFramesFromBus=cardIncompleteFramesFromBus, svcAtmConfigQSaalNumUstatPduTx=svcAtmConfigQSaalNumUstatPduTx, lportDS0FarendLpbkEnabled=lportDS0FarendLpbkEnabled, pportATMTcaEBufOverflowVBR1Thresh=pportATMTcaEBufOverflowVBR1Thresh, svcAtmFailedCallAtmTfdParam1=svcAtmFailedCallAtmTfdParam1, pportAdminInterface=pportAdminInterface, svcAtmConfigQ93bNumAddPtyRejPduRx=svcAtmConfigQ93bNumAddPtyRejPduRx, cktOamLoopbackHops=cktOamLoopbackHops, pportds1SendCode=pportds1SendCode, pportDiagTestRuns=pportDiagTestRuns, pportDiagFailCount=pportDiagFailCount, lportDTEInFullStatusFrames=lportDTEInFullStatusFrames, svcAtmConfigQ93bTotalConns=svcAtmConfigQ93bTotalConns, ds1=ds1, svcAtmConfigQ93bActiveConns=svcAtmConfigQ93bActiveConns, cardNrtsVbrNrtManage=cardNrtsVbrNrtManage, pportInOctets=pportInOctets, lportInVAvailbwQoS1=lportInVAvailbwQoS1, lportErrorExceedThreshold=lportErrorExceedThreshold, cardRedundSwitchOver=cardRedundSwitchOver, lportOutAllocbwQoS4=lportOutAllocbwQoS4, cardDS0Support=cardDS0Support, pportAtmLastUnconfiguredVpi=pportAtmLastUnconfiguredVpi, cardBulkStatsTotalEnable=cardBulkStatsTotalEnable, pportdsx3SendCode=pportdsx3SendCode, cktDefinedPathEnable=cktDefinedPathEnable, svcPrefixTable=svcPrefixTable, cktInDEOctets=cktInDEOctets, nodePrFilename=nodePrFilename, smdsaddrParentGrpMap=smdsaddrParentGrpMap, swFeatureMask=swFeatureMask, pportCbrTargetClockMode=pportCbrTargetClockMode, cardATMTcaSPPearlOVbr2FailureAlertPeriod=cardATMTcaSPPearlOVbr2FailureAlertPeriod, cktAtmRTfdType=cktAtmRTfdType, cktDlciReroute=cktDlciReroute, lportLossOfStructurePointer=lportLossOfStructurePointer, lportSmdsCntSip3TRsvdInvalids=lportSmdsCntSip3TRsvdInvalids, svcAtmConfigQ93bNumRestartAckPduTx=svcAtmConfigQ93bNumRestartAckPduTx, isdnCallerIDEntry=isdnCallerIDEntry, pportDS0SwitchLpbkStart=pportDS0SwitchLpbkStart, svcAtmFailedCallAdminStatus=svcAtmFailedCallAdminStatus, svcAtmConfigQ93bNumSetupPduRx=svcAtmConfigQ93bNumSetupPduRx, svcAtmFailedCallCreationTime=svcAtmFailedCallCreationTime, svcAtmConfigQSaalNumBgakPduTx=svcAtmConfigQSaalNumBgakPduTx, lportSmdsSsiSlot=lportSmdsSsiSlot, cktTryAltPath=cktTryAltPath, cktRCir=cktRCir, nodeApplicationDescription=nodeApplicationDescription, cardControlMessagesFromBus=cardControlMessagesFromBus, CardTypes=CardTypes, nodeErrorReport=nodeErrorReport, lportXmitRefillPriority2Percentage=lportXmitRefillPriority2Percentage, lportSmdsCntSip3BetagMismatchs=lportSmdsCntSip3BetagMismatchs, cardSystemPrimaryClockStatusChange=cardSystemPrimaryClockStatusChange, cardFrameMemoryUsage=cardFrameMemoryUsage, svcAddrAddress=svcAddrAddress, lportSmdsPduCheck=lportSmdsPduCheck, cktLeafFailReason=cktLeafFailReason, lportMildThreshold=lportMildThreshold, cktSvcDuration=cktSvcDuration, cardDiagOptionStr=cardDiagOptionStr, lportSmdsCntSip3BasizeMismatchs=lportSmdsCntSip3BasizeMismatchs, lportDteMulticast=lportDteMulticast, pportFethOperMacAddr=pportFethOperMacAddr, lportSmdsScrnId=lportSmdsScrnId, lportAtmRouteMetricQoS2=lportAtmRouteMetricQoS2, cktLeafHopCnt=cktLeafHopCnt, cktRtAvgDelay=cktRtAvgDelay, pportConfigAlarmSoakTime=pportConfigAlarmSoakTime, cardOutBtus=cardOutBtus, cktDefinedPath=cktDefinedPath, svcAtmConfigQSaalNumErPduRx=svcAtmConfigQSaalNumErPduRx, aseIfIndex=aseIfIndex, dsx1IntervalEntry=dsx1IntervalEntry, cktInDiscards=cktInDiscards, cktAtmTfdParam3=cktAtmTfdParam3, svcAtmConfigQ93bNumSetupPduTx=svcAtmConfigQ93bNumSetupPduTx, cktInBECNFrames=cktInBECNFrames, svcAtmConfigTable=svcAtmConfigTable, aseTable=aseTable, nodeSwToLoad=nodeSwToLoad, aseDlci=aseDlci, svcAtmFailedCallAtmQosClass=svcAtmFailedCallAtmQosClass, cardSystemSecondaryClockStatus=cardSystemSecondaryClockStatus, lportOutVAvailbwQoS2=lportOutVAvailbwQoS2, cktShaperId=cktShaperId, lportQP3Len=lportQP3Len, cktInForward=cktInForward, cardProductCode=cardProductCode, lportPrimTrk=lportPrimTrk, svcPrefixNmbPlan=svcPrefixNmbPlan, nodeBillingUsageRecCrFailures=nodeBillingUsageRecCrFailures, cktAtmVCI=cktAtmVCI, cardClp01VbrNrtThreshold=cardClp01VbrNrtThreshold, svcConfigCgPtyInsertionAddress=svcConfigCgPtyInsertionAddress, nodeSwLoadState=nodeSwLoadState, lportAtmOamAlarmEnable=lportAtmOamAlarmEnable, cktAbrNRM=cktAbrNRM, cardDiagFailures=cardDiagFailures, lportSlotId=lportSlotId, nodeConsoleAccessMode=nodeConsoleAccessMode, pportBertBitCount=pportBertBitCount, svcAtmConfigQSaalNumErrorRx=svcAtmConfigQSaalNumErrorRx, cktAtmInPassedClp1Cells=cktAtmInPassedClp1Cells, nodeDiagNonFatalTime=nodeDiagNonFatalTime, pportIMUXCnt=pportIMUXCnt, cardClp01CbrThreshold=cardClp01CbrThreshold, cktRAbrTRM=cktRAbrTRM, cardNrtsBcmProtocolId=cardNrtsBcmProtocolId, svcClearing=svcClearing, dsx1TransmitClockSource=dsx1TransmitClockSource, cktInSegmentsDiscards=cktInSegmentsDiscards, cktSvcBBearerTmgReq=cktSvcBBearerTmgReq, cardInErrorVPIVCI=cardInErrorVPIVCI, lportSmdsPduHdrDxi2CtrlInvalid=lportSmdsPduHdrDxi2CtrlInvalid, cardAdminType=cardAdminType, pportATMTcaEBufOverflowVBR2AlertPeriod=pportATMTcaEBufOverflowVBR2AlertPeriod, pportType=pportType, lportSmdsPduHdrSip3SaNotFound=lportSmdsPduHdrSip3SaNotFound, lportDCEInPollFrames=lportDCEInPollFrames, cktCLR=cktCLR, cktLeafAtmInPassedClp0Cells=cktLeafAtmInPassedClp0Cells, cktRAbrNRM=cktRAbrNRM, lportEgCutThruThresh=lportEgCutThruThresh, pportAAL5MaxNrSegError=pportAAL5MaxNrSegError, lportAtmNetworkType=lportAtmNetworkType, cktDteStatus=cktDteStatus, netDlciAddrSig=netDlciAddrSig, lportSmdsPduHdrSip3SrcIaScrnFail=lportSmdsPduHdrSip3SrcIaScrnFail, svcAtmConfigQSaalNumBgnPduRx=svcAtmConfigQSaalNumBgnPduRx, lportAtmDataRateQoS3=lportAtmDataRateQoS3, dsx1TotalEntry=dsx1TotalEntry, nodeRamErr=nodeRamErr, cktLeafEgressIfIndex=cktLeafEgressIfIndex, cktAtmOutClp0Cells=cktAtmOutClp0Cells, svcAtmConfigQSaalNumEndPduTx=svcAtmConfigQSaalNumEndPduTx, cktRAbrTBE=cktRAbrTBE, cktInODEFrames=cktInODEFrames, lportSmdsSip3SaValFailTca=lportSmdsSip3SaValFailTca, cardTM2OperStatus=cardTM2OperStatus, cardClp0VbrNrtThreshold=cardClp0VbrNrtThreshold, cktATMAAL5ReassemblyTimerError=cktATMAAL5ReassemblyTimerError, pportAtmNumBitsVPI=pportAtmNumBitsVPI, cardTotalAAL5RxErrorCount=cardTotalAAL5RxErrorCount, cktAtmVcType=cktAtmVcType, nodeSerial=nodeSerial, lportISDNSourceAddr=lportISDNSourceAddr, svcAtmFailedCallIndex=svcAtmFailedCallIndex, svcAddrTable=svcAddrTable, cktAtmSCR=cktAtmSCR, lportErrTime=lportErrTime, cktOutOctets=cktOutOctets, svcAtmFailedCallLocation=svcAtmFailedCallLocation, svcAtmConfigAdminStatus=svcAtmConfigAdminStatus, cardErrorReport=cardErrorReport, cktSvcBBearerClass=cktSvcBBearerClass, cardIOAMfgPN=cardIOAMfgPN, dsx1SlotId=dsx1SlotId, pportOperStatus=pportOperStatus, pportVpshapingDiscardCellCount=pportVpshapingDiscardCellCount, nodeApplicationTable=nodeApplicationTable, nodeUserLogout=nodeUserLogout, pportATMTcaELookupFailureAlertPeriod=pportATMTcaELookupFailureAlertPeriod, pportds1FDLRcvTsid=pportds1FDLRcvTsid, lportDiagTestRuns=lportDiagTestRuns, nodePrDownloadFailed=nodePrDownloadFailed, cktVcPtr=cktVcPtr, svcAtmFailedCallDiagnostic=svcAtmFailedCallDiagnostic, cktAtmInTaggedCells=cktAtmInTaggedCells, lportInAllocbwQoS3=lportInAllocbwQoS3, cardMemStartLog=cardMemStartLog, cardNrtsIcrFact=cardNrtsIcrFact, nodePsAStatusChange=nodePsAStatusChange, lportLinkStatus=lportLinkStatus, nodeSwRev=nodeSwRev, nodeConsoleEntry=nodeConsoleEntry, pportBchanTimerValue=pportBchanTimerValue, cardIPTableState=cardIPTableState, pportBertErrorCount=pportBertErrorCount, cardTransmitClockStatus=cardTransmitClockStatus, cktLeafDestIfIndex=cktLeafDestIfIndex, lportAbsCongests=lportAbsCongests, cktAtmInDiscardedClp1Cells=cktAtmInDiscardedClp1Cells, svcAtmUserPartIfIndex=svcAtmUserPartIfIndex)
mibBuilder.exportSymbols("CASCADE-MIB", cardNrtsAdminState=cardNrtsAdminState, lportProtocol=lportProtocol, smdsaddrParentScrnMap=smdsaddrParentScrnMap, nodePrimaryPLLOperationalState=nodePrimaryPLLOperationalState, cktAtmUPCEnable=cktAtmUPCEnable, nodeFrameMemoryUtil=nodeFrameMemoryUtil, svcAtmFailedCallAtmTfdParam2=svcAtmFailedCallAtmTfdParam2, lportSmdsCntDstIaNotFounds=lportSmdsCntDstIaNotFounds, pportDiagResultStr=pportDiagResultStr, lportErrData=lportErrData, cktAbrTRM=cktAbrTRM, pportDS0SwitchLpbkEnd=pportDS0SwitchLpbkEnd, cktPriority=cktPriority, lportIlmiAdminStatus=lportIlmiAdminStatus, dsx1SignalMode=dsx1SignalMode, nodeBillingAPAddress=nodeBillingAPAddress, cardInOctets=cardInOctets, cktPrivateNetOverflow=cktPrivateNetOverflow, lportCongestRateThresh=lportCongestRateThresh, cktAtmOutClp1Cells=cktAtmOutClp1Cells, cardDiagPowerExtensive=cardDiagPowerExtensive, svcAtmConfigQSaalNumEndakPduTx=svcAtmConfigQSaalNumEndakPduTx, nodeBillingTotalUsageRecCrFailures=nodeBillingTotalUsageRecCrFailures, cardTrkProtState=cardTrkProtState, cardNrtsOperState=cardNrtsOperState, lnkSmdsDiscardTca=lnkSmdsDiscardTca, cardInPkts=cardInPkts, pportEntry=pportEntry, svcAtmConfigQ93bNumConnectPduRx=svcAtmConfigQ93bNumConnectPduRx, cardDiagStatus=cardDiagStatus, cktBe=cktBe, cardClp0VbrRtThreshold=cardClp0VbrRtThreshold, lportAtmVPI=lportAtmVPI, lportAtmRouteMetricQoS4=lportAtmRouteMetricQoS4, lportDynamicQoSbw=lportDynamicQoSbw, pportAdminType=pportAdminType, nodeBillingTotalUsageRecSent=nodeBillingTotalUsageRecSent, nodeBillingUsageRecSent=nodeBillingUsageRecSent, lportTrkUtilQoS3=lportTrkUtilQoS3, lportSmdsSip3DstIaNotFoundTca=lportSmdsSip3DstIaNotFoundTca, cktAtmMBS=cktAtmMBS, dsx1IntervalUASs=dsx1IntervalUASs, cardATMTcaSPEnable=cardATMTcaSPEnable, nodeRefclocksrcEntry=nodeRefclocksrcEntry, cardLastErrorPort=cardLastErrorPort, nodeBoardPulled=nodeBoardPulled, cardATMTcaSPPearlOVbr1FailureAlertPeriod=cardATMTcaSPPearlOVbr1FailureAlertPeriod, pportAAL5CPIError=pportAAL5CPIError, cardDiagNonFatalSource=cardDiagNonFatalSource, lportSmdsIaScrnMap=lportSmdsIaScrnMap, cardBulkStatsBaseCollectPeriod=cardBulkStatsBaseCollectPeriod, pportDS0TestPatternSync=pportDS0TestPatternSync, cktInODEOctetsPeak=cktInODEOctetsPeak, cardBTUsNoResource=cardBTUsNoResource, dsx1CurrentTable=dsx1CurrentTable, nodeFanEntry=nodeFanEntry, swRedundState=swRedundState, nodeBillingAggrPeriod=nodeBillingAggrPeriod, lportPportId=lportPportId, cktOutLostDEOctets=cktOutLostDEOctets, lportTrkUtilQoS2=lportTrkUtilQoS2, trkBuAttempt=trkBuAttempt, cktRPriority=cktRPriority, nodeRefclockActiveCGUMode=nodeRefclockActiveCGUMode, lportInAllocbwQoS1=lportInAllocbwQoS1, cardIncompleteFramesFromBusThreshold=cardIncompleteFramesFromBusThreshold, nodePrimarySyncReferenceChange=nodePrimarySyncReferenceChange, swRevision=swRevision, nodeHwRev=nodeHwRev, swEntry=swEntry, cktOutDEOctets=cktOutDEOctets, lportBuTrkRetryNum=lportBuTrkRetryNum, nodeSecondarySyncRefOperationalState=nodeSecondarySyncRefOperationalState, pportAtmDisCardMode=pportAtmDisCardMode, cktAtmInPassedClp0Cells=cktAtmInPassedClp0Cells, cardATMTcaSPPearlOVbr1Thresh=cardATMTcaSPPearlOVbr1Thresh, lportIlmiPollTimeout=lportIlmiPollTimeout, pportAtmIdleWord=pportAtmIdleWord, cardIOAProductCode=cardIOAProductCode, cardDiagFatalReboots=cardDiagFatalReboots, cktAbrRIF=cktAbrRIF, pportLaserStatus=pportLaserStatus, cardTable=cardTable, svcAtmConfigQ93bNumDropPtyAckPduRx=svcAtmConfigQ93bNumDropPtyAckPduRx, lportTrkKeepAliveTimer=lportTrkKeepAliveTimer, namePrimary=namePrimary, cktOamLoopbackReceived=cktOamLoopbackReceived, cardDiagParamId=cardDiagParamId, cktAtmSvcServiceCategory=cktAtmSvcServiceCategory, lportQ922State=lportQ922State, cktLeafCreationTime=cktLeafCreationTime, lportSmdsCntInFrDxi2HbPolls=lportSmdsCntInFrDxi2HbPolls, pportDS0LoopDownChange=pportDS0LoopDownChange, lportDtePollTimer=lportDtePollTimer, cktLeafSrcIfIndex=cktLeafSrcIfIndex, cardImageSetB=cardImageSetB, pportATMTcaInHECErrorUThresh=pportATMTcaInHECErrorUThresh, card=card, cktRateEnforceSchm=cktRateEnforceSchm, cardOperCapabilityBitmask=cardOperCapabilityBitmask, cardInUseVCs=cardInUseVCs, pportds1InbandLoopType=pportds1InbandLoopType, pportATMTcaInFramerFIFOOverflowAlertPeriod=pportATMTcaInFramerFIFOOverflowAlertPeriod, svcAtmConfigQ93bT316=svcAtmConfigQ93bT316, cardExternalClockRate=cardExternalClockRate, cktAtmInDiscardedClp0Cells=cktAtmInDiscardedClp0Cells, cktGrpStatusChange=cktGrpStatusChange, cktBc=cktBc, cktSvcCallingParty=cktSvcCallingParty, pportATMTcaInFramerFIFOOverflowThresh=pportATMTcaInFramerFIFOOverflowThresh, lportISDNDestAddr=lportISDNDestAddr, nodeFileTransferRequest=nodeFileTransferRequest, lportPVCMgrPduRevision=lportPVCMgrPduRevision, pportDS0SendTestTraffic=pportDS0SendTestTraffic, svcAtmConfigEntry=svcAtmConfigEntry, nodeNMSEntry=nodeNMSEntry, cardDiagFatalErrMajor=cardDiagFatalErrMajor, pportDiagTestId=pportDiagTestId, pportClockMasterChannel=pportClockMasterChannel, lportLMIInErrorFrames=lportLMIInErrorFrames, cardSystemPrimaryClockPortConfig=cardSystemPrimaryClockPortConfig, svcAtmFailedCallCallingParty=svcAtmFailedCallCallingParty, smdsaddrAdminStatus=smdsaddrAdminStatus, svcAtmFailedCallAtmRTfdParam3=svcAtmFailedCallAtmRTfdParam3, svcAtmConfigQSaalTKeepalive=svcAtmConfigQSaalTKeepalive, nodeBillingTotalUsageRecCreated=nodeBillingTotalUsageRecCreated, lportSmdsPduHdrSip3DstIaNotFound=lportSmdsPduHdrSip3DstIaNotFound, net=net, cktSrcLaddr=cktSrcLaddr, cardUp=cardUp, cktMPForcedCallee=cktMPForcedCallee, svcAtmUserPartTable=svcAtmUserPartTable, lportSmdsIaScrnOp=lportSmdsIaScrnOp, cardDiagState=cardDiagState, aseDefaultGwAddr=aseDefaultGwAddr, nodeBillingAPUsername=nodeBillingAPUsername, pportAPSadminDir=pportAPSadminDir, svcAtmConfigQ93bT398=svcAtmConfigQ93bT398, nodeFileTransferStatus=nodeFileTransferStatus, lportCbrInsDummyCells=lportCbrInsDummyCells, cktRVc=cktRVc, netMask=netMask, cktLeafFailPort=cktLeafFailPort, cktLeafAtmOutClp1Cells=cktLeafAtmOutClp1Cells, pportBipLineErrors=pportBipLineErrors, pportPeakCellRate1=pportPeakCellRate1, cktVcState=cktVcState, cktOspfCtd=cktOspfCtd, cktATMAAL5CRC32Error=cktATMAAL5CRC32Error, cardClp0CbrThreshold=cardClp0CbrThreshold, lportTrkProtFailureThreshold=lportTrkProtFailureThreshold, nodeBillingTotalUsageDataStoreFull=nodeBillingTotalUsageDataStoreFull, pportAAL5ReassemblyTimerError=pportAAL5ReassemblyTimerError, pportRedundancyArch=pportRedundancyArch, lportTrkUtilQoS1=lportTrkUtilQoS1, smdsaddrEntry=smdsaddrEntry, cardDiagNonFatalStr=cardDiagNonFatalStr, cardBTUsBusErrorThreshold=cardBTUsBusErrorThreshold, nodeMaxTelnetConsole=nodeMaxTelnetConsole, lportQP1Len=lportQP1Len, cardBTUsNoResourceThreshold=cardBTUsNoResourceThreshold, lportNumVC=lportNumVC, cktLeafAtmOutCells=cktLeafAtmOutCells, svcAtmConfigQSaalNumSdPduRx=svcAtmConfigQSaalNumSdPduRx, pportCellScramble=pportCellScramble, cktInFECNFrames=cktInFECNFrames, cardNrtsOutCellBufSize=cardNrtsOutCellBufSize, nodeDiagBackgroundPasses=nodeDiagBackgroundPasses, cardResetPram=cardResetPram, svcAtmConfigQ93bT310=svcAtmConfigQ93bT310, lportRecOverflow=lportRecOverflow, nodeBillingUsageRecOvflWarnings=nodeBillingUsageRecOvflWarnings, pportHcsSevereErrors=pportHcsSevereErrors, pportFethPortCapability=pportFethPortCapability, lportISDNCallRejCause=lportISDNCallRejCause, lportSmdsSip3SaDaOnSamePortTca=lportSmdsSip3SaDaOnSamePortTca, lportDCEnN4=lportDCEnN4, cktOutDEOctetsPeak=cktOutDEOctetsPeak, cardTotalUpTime=cardTotalUpTime, cardCktGroupTrap=cardCktGroupTrap, pportdsx3LoopStatus=pportdsx3LoopStatus, cktDiagTestId=cktDiagTestId, nodeInOctets=nodeInOctets, cardMemoryUtil=cardMemoryUtil, cardMonStatus=cardMonStatus, dsx1TimeElapsed=dsx1TimeElapsed, cardSerial=cardSerial, nodeInPkts=nodeInPkts, nodePendingPvcs=nodePendingPvcs, cktRBe=cktRBe, cktLeafVcPtr=cktLeafVcPtr, lportSmdsMulticastIpAddr=lportSmdsMulticastIpAddr, lportTrkRlport=lportTrkRlport, dsx1TotalTable=dsx1TotalTable, cardDiagFatalErrMinor=cardDiagFatalErrMinor, ase=ase, cardOperCapability=cardOperCapability, pportAAL5CRC32Error=pportAAL5CRC32Error, nodeBillingDPTime=nodeBillingDPTime, cktIWF1483to1490LastBadHeader=cktIWF1483to1490LastBadHeader, cardDiagBackgroundSuccesses=cardDiagBackgroundSuccesses, cktAtmRTfdParam3=cktAtmRTfdParam3, lportLink=lportLink, pportATMTcaELookupFailureThresh=pportATMTcaELookupFailureThresh, lportSmdsCntDxi2FrameSizeErrors=lportSmdsCntDxi2FrameSizeErrors, lportDS0FarendLpbkDisabled=lportDS0FarendLpbkDisabled, nodeState=nodeState, cktInterworkingFrToAtmDe=cktInterworkingFrToAtmDe, cktSrcIfIndex=cktSrcIfIndex, dsx1CurrentSEFSs=dsx1CurrentSEFSs, cktOutFrames=cktOutFrames, dsx1ConfigTable=dsx1ConfigTable, pportATMTcaEBufOverflowABRAlertPeriod=pportATMTcaEBufOverflowABRAlertPeriod, lportDs0BitStuff=lportDs0BitStuff, lportSmdsDxi2LinkIdInvalidTca=lportSmdsDxi2LinkIdInvalidTca, cardLogicalSlotId=cardLogicalSlotId, lportSevereThreshold=lportSevereThreshold, dsx1ValidIntervals=dsx1ValidIntervals, cktLeafTable=cktLeafTable, cktOutOctetsPeak=cktOutOctetsPeak, nodeFileTransferReport=nodeFileTransferReport, svcConfigIfIndex=svcConfigIfIndex, lportSmdsPduHdrSip3SaDaOnSamePort=lportSmdsPduHdrSip3SaDaOnSamePort, lportSmdsGaScrnOp=lportSmdsGaScrnOp, nodeRefclocksrcIndex=nodeRefclocksrcIndex, cktSmdsRemotePort=cktSmdsRemotePort, isdnCallerIDIf=isdnCallerIDIf, nodeMaxFramesize=nodeMaxFramesize, cktDteState=cktDteState, cardISDNChanId=cardISDNChanId, lportSmdsCntSip3DaInvalids=lportSmdsCntSip3DaInvalids, svcAtmFailedCallFailureNodeId=svcAtmFailedCallFailureNodeId, cardATMTcaSPPearlOAbrThresh=cardATMTcaSPPearlOAbrThresh, pportMaxActiveVpiBits=pportMaxActiveVpiBits, lportErrorThreshold=lportErrorThreshold, lportDceVerifTimer=lportDceVerifTimer, nameNodeId=nameNodeId, lportDlciAddrFmt=lportDlciAddrFmt, lportAtmRouteMetricQoS1=lportAtmRouteMetricQoS1, cktOutLostODEFrames=cktOutLostODEFrames, dsx1CurrentSlotId=dsx1CurrentSlotId, cktCallingBackup=cktCallingBackup, nodePramErr=nodePramErr, nodePrToLoad=nodePrToLoad, nodeRefclocksrcPriority=nodeRefclocksrcPriority, pportDS0InitiateLpbkSuccess=pportDS0InitiateLpbkSuccess, svcPrefixEntry=svcPrefixEntry, lportDteFullCounter=lportDteFullCounter, svcNodePrefixAdminStatus=svcNodePrefixAdminStatus, svcAtmFailedCallAtmRTfdParam2=svcAtmFailedCallAtmRTfdParam2, nodeBillingCollection=nodeBillingCollection, pportMaxBufferSize=pportMaxBufferSize, smdsaddrSlot=smdsaddrSlot, cktOamLoopbackType=cktOamLoopbackType)
mibBuilder.exportSymbols("CASCADE-MIB", nodeDiagPowerExtensive=nodeDiagPowerExtensive, lportSmdsMulticastGa=lportSmdsMulticastGa, cktRAbrRDF=cktRAbrRDF, cktAtmQoS=cktAtmQoS, nodeDiagFatalReboots=nodeDiagFatalReboots, pportDS0FarendDS0InLpbk=pportDS0FarendDS0InLpbk, lportSmdsCrc=lportSmdsCrc, lportDTEOutPollFrames=lportDTEOutPollFrames, lportDteEventCount=lportDteEventCount, pportdsx3LoopChange=pportdsx3LoopChange, pportds1FDLPidXmit=pportds1FDLPidXmit, cardLastErrorVCI=cardLastErrorVCI, svcAtmConfigQ93bNumAddPtyAckPduRx=svcAtmConfigQ93bNumAddPtyAckPduRx, software=software, smdsaddrAddr=smdsaddrAddr, lportBillingStateChange=lportBillingStateChange, svcPrefixRemoteGatewayAddress=svcPrefixRemoteGatewayAddress, cktAtmInCells=cktAtmInCells, cardNrtsMcastDiscardCount=cardNrtsMcastDiscardCount, nodeInitiateBulkStats=nodeInitiateBulkStats, nodeConsoleTable=nodeConsoleTable, svcAtmConfigQ93bT303=svcAtmConfigQ93bT303, cktDefinedPathAltOption=cktDefinedPathAltOption, pportds1LoopChange=pportds1LoopChange, lportPtr=lportPtr, cktLeafAtmInPassedClp1Cells=cktLeafAtmInPassedClp1Cells, lportXmitRefillPriority3Percentage=lportXmitRefillPriority3Percentage, cktSvcBBearerTfcType=cktSvcBBearerTfcType, trkStatusChange=trkStatusChange, cardATMTcaInInvalidVpiVciThresh=cardATMTcaInInvalidVpiVciThresh, lportInCells=lportInCells, lportDTEInStatusFrames=lportDTEInStatusFrames, isdnCallerIDAddr=isdnCallerIDAddr, cktLeafEndpointIndex=cktLeafEndpointIndex, lportDataRate=lportDataRate, swBuildConfigSpec=swBuildConfigSpec, svcAtmConfigQ93bT308=svcAtmConfigQ93bT308, lportCongests=lportCongests, cktOamLoopbackTimeouts=cktOamLoopbackTimeouts, lportBuTrkCycleInt=lportBuTrkCycleInt, pportTable=pportTable, cktATMAAL5LengthError=cktATMAAL5LengthError, cktOutLostFrames=cktOutLostFrames, cardBulkStatsTotalCapability=cardBulkStatsTotalCapability, cktLeafEntry=cktLeafEntry, cardValidSubcards=cardValidSubcards, cktOutForward=cktOutForward, aseEntry=aseEntry, svcAtmConfigQ93bNumRestartPduTx=svcAtmConfigQ93bNumRestartPduTx, cktLeafAtmOutClp0Cells=cktLeafAtmOutClp0Cells, pportATMTcaEBufOverflowABRThresh=pportATMTcaEBufOverflowABRThresh, cktAtmTfdParam2=cktAtmTfdParam2, svcAtmFailedCallCalledParty=svcAtmFailedCallCalledParty, cktAtmRQoS=cktAtmRQoS, cardControlMessagesToBus=cardControlMessagesToBus, lportStarvation=lportStarvation, svcAtmConfigQ93bLastCauseTx=svcAtmConfigQ93bLastCauseTx, nodeBillingDailyProcessing=nodeBillingDailyProcessing, svcPrefixLocalGatewayAddress=svcPrefixLocalGatewayAddress, swBuildDate=swBuildDate, pportHcsErrors=pportHcsErrors, svcAtmFailedCallIfIndex=svcAtmFailedCallIfIndex, svcAtmConfigQSaalMaxPD=svcAtmConfigQSaalMaxPD, cktAtmUserPlane=cktAtmUserPlane, cktAtmInClp1Cells=cktAtmInClp1Cells, pportOutOctets=pportOutOctets, dsx1CurrentEntry=dsx1CurrentEntry, cktEntry=cktEntry, lportDS0LoopStatus=lportDS0LoopStatus, pportAPSOperRxStatus=pportAPSOperRxStatus, lportTrkKeepAliveErrorThreshold=lportTrkKeepAliveErrorThreshold, lportXmitRefillPriority0Percentage=lportXmitRefillPriority0Percentage, cardInNoVcBtus=cardInNoVcBtus, svcAtmConfigQSaalNumErrorTx=svcAtmConfigQSaalNumErrorTx, cascsmds=cascsmds, nodeSvcLastCallFailure=nodeSvcLastCallFailure, cardDiagNonFatalTime=cardDiagNonFatalTime, svcConfigEntry=svcConfigEntry, nodeExternalClockAChange=nodeExternalClockAChange, nodeInitiateImageBackup=nodeInitiateImageBackup, cardInErrorBtus=cardInErrorBtus, lportSmdsPduHdrSip3DstGaScrnFail=lportSmdsPduHdrSip3DstGaScrnFail, cktLeafType=cktLeafType, nodeDiagBackgroundFailures=nodeDiagBackgroundFailures, lportTrkUtilQoS4=lportTrkUtilQoS4, nodeImageBackupState=nodeImageBackupState, svcAtmConfigQ93bNumAddPtyAckPduTx=svcAtmConfigQ93bNumAddPtyAckPduTx, nodeModel=nodeModel, nodeToWarmboot=nodeToWarmboot, pportATMTcaEBufOverflowCBRThresh=pportATMTcaEBufOverflowCBRThresh, lportLMIDelay=lportLMIDelay, cardTransmitClockConfig=cardTransmitClockConfig, cktFailReason=cktFailReason, pportAPSsfBerThresh=pportAPSsfBerThresh, lportOutVAvailbwQoS1=lportOutVAvailbwQoS1, nodeConsoleTimeout=nodeConsoleTimeout, dsx1TotalSlotId=dsx1TotalSlotId, nodeSyncAutoRestore=nodeSyncAutoRestore, cascfr=cascfr, pportAtmNumBitsVCI=pportAtmNumBitsVCI, lportSmdsCntOutByteDxi2HbPolls=lportSmdsCntOutByteDxi2HbPolls, cardDiagLEDReset=cardDiagLEDReset, svcConfigCgPtyScreenMode=svcConfigCgPtyScreenMode, lportSmdsCntDxi2CtrlInvalids=lportSmdsCntDxi2CtrlInvalids, cardFrameMemoryThreshold=cardFrameMemoryThreshold, cktCir=cktCir, svcConfigTable=svcConfigTable, cktRBc=cktRBc, lportVAvailbw=lportVAvailbw, nodeApplicationEntry=nodeApplicationEntry, cktTos=cktTos, lportISDNIpAddrRej=lportISDNIpAddrRej, dsx1LineType=dsx1LineType, isdnCallerAdminStatus=isdnCallerAdminStatus, svcAtmConfigQ93bNumStatusEnqPduTx=svcAtmConfigQ93bNumStatusEnqPduTx, pportBertStatus=pportBertStatus, svcNodePrefixEntry=svcNodePrefixEntry, lportSmdsPduHdrSip3DstIaScrnFail=lportSmdsPduHdrSip3DstIaScrnFail, cktNrtsCLP1=cktNrtsCLP1, cktAtmVPI=cktAtmVPI, cktLeafAtmInDiscardedClp1Cells=cktLeafAtmInDiscardedClp1Cells, cktRtPriority=cktRtPriority, cktOutVc=cktOutVc, cardNrtsHwRev=cardNrtsHwRev, cardLastErrorVPI=cardLastErrorVPI, dsx1TotalESs=dsx1TotalESs, nodePortReferenceAChange=nodePortReferenceAChange, lportSmdsSip3DstGaScrnFailTca=lportSmdsSip3DstGaScrnFailTca, pportTrafficShaperPriority=pportTrafficShaperPriority, pportAPSwtrPeriod=pportAPSwtrPeriod, cktAtmInClp0Cells=cktAtmInClp0Cells, lportDCEOperStatus=lportDCEOperStatus, cktOamLoopbackReceivedLow=cktOamLoopbackReceivedLow, svcAtmFailedCallAtmTfdType=svcAtmFailedCallAtmTfdType, pportAdminStatus=pportAdminStatus, svcAtmConfigQSaalMaxStat=svcAtmConfigQSaalMaxStat, svcAtmConfigQSaalNumErPduTx=svcAtmConfigQSaalNumErPduTx, cardATMTcaInATMDCFullAlertPeriod=cardATMTcaInATMDCFullAlertPeriod, cktOamLoopbackDirection=cktOamLoopbackDirection, nodeBillingSwAPCommsFailure=nodeBillingSwAPCommsFailure, lportISDNIpAddr=lportISDNIpAddr, pportATMTcaEBufOverflowCBRAlertPeriod=pportATMTcaEBufOverflowCBRAlertPeriod, pportRecvClock=pportRecvClock, svcAtmConfigQ93bNumCallProcPduTx=svcAtmConfigQ93bNumCallProcPduTx, lportOutAllocbwQoS3=lportOutAllocbwQoS3, lportInVAvailbwQoS4=lportInVAvailbwQoS4, pportInterface=pportInterface, pportDs3LineBuildout=pportDs3LineBuildout, cardDiagFatalSource=cardDiagFatalSource, cktInterworkingFrToAtmCLP=cktInterworkingFrToAtmCLP, cktLeafEgressDlci=cktLeafEgressDlci, cardDiagFatalTime=cardDiagFatalTime, cktOutODEOctetsPeak=cktOutODEOctetsPeak, cardSF1OperStatus=cardSF1OperStatus, cardClp01VbrRtThreshold=cardClp01VbrRtThreshold, cktMcastMemberList=cktMcastMemberList, svcmgt=svcmgt, cardInErrorCells=cardInErrorCells, dsx1IntervalTable=dsx1IntervalTable, svcAtmFailedCallPduDirection=svcAtmFailedCallPduDirection, netNumber=netNumber, isdnAddr=isdnAddr, cardSPClpEnable=cardSPClpEnable, pportds1PMConfigThresh=pportds1PMConfigThresh, svcAtmConfigQSaalNumSdPduTx=svcAtmConfigQSaalNumSdPduTx, cktOutBECNFrames=cktOutBECNFrames, cktAccumCDV=cktAccumCDV, cktSvcCalledParty=cktSvcCalledParty, cktType=cktType, cardISDNswtype=cardISDNswtype, lportPrivateNet=lportPrivateNet, svcNodePrefixNmbPlan=svcNodePrefixNmbPlan, pportds1FDLRcvPid=pportds1FDLRcvPid, cktRedFrRPcnt=cktRedFrRPcnt, lportISDNDuration=lportISDNDuration, cktCreationTime=cktCreationTime, cktAtmLijId=cktAtmLijId, lportSmdsCntSip3BasizeIncorrects=lportSmdsCntSip3BasizeIncorrects, cardATMTcaSPPearlGAbrFailureAlertPeriod=cardATMTcaSPPearlGAbrFailureAlertPeriod, nodeExternalClockInterfaceType=nodeExternalClockInterfaceType, nodeExternalClockBOperationalState=nodeExternalClockBOperationalState, lportSmdsCntSip3BasizeInvalids=lportSmdsCntSip3BasizeInvalids, nodeApplicationIndex=nodeApplicationIndex, svcAtmConfigQ93bNumStatusEnqPduRx=svcAtmConfigQ93bNumStatusEnqPduRx, lportSmdsCntInByteSip3s=lportSmdsCntInByteSip3s, pportDS0MidspanRepeaters=pportDS0MidspanRepeaters, namebinding=namebinding, pportAPSxCommand=pportAPSxCommand, netSmdsAreaMaskDigits=netSmdsAreaMaskDigits, nameStatus=nameStatus, cktATMAAL5MaxNrSegError=cktATMAAL5MaxNrSegError, pportPeakCellRate0=pportPeakCellRate0, cktRtLastDelay=cktRtLastDelay, cardInvalidPvcBTUsThreshold=cardInvalidPvcBTUsThreshold, cascade=cascade, cktDestLaddr=cktDestLaddr, cardIPTableSize=cardIPTableSize, nodeExternalTimingSource=nodeExternalTimingSource, lportDCEFailCounts=lportDCEFailCounts, svcAtmConfigQ93bNumConnectPduTx=svcAtmConfigQ93bNumConnectPduTx, svcAtmConfigQSaalTIdle=svcAtmConfigQSaalTIdle, pportCongestedReceivedCells=pportCongestedReceivedCells, cktBtusSeg=cktBtusSeg, cardQOSQueueSize=cardQOSQueueSize, cardMemLogLevel=cardMemLogLevel, lportDceEventCount=lportDceEventCount, svcAtmConfigQ93bNumStatusPduTx=svcAtmConfigQ93bNumStatusPduTx, lportCRC=lportCRC, svcConfigEgressAddrXlateMode=svcConfigEgressAddrXlateMode, cktInOctetsPeak=cktInOctetsPeak, nodeFanTable=nodeFanTable, cardNrtsCcrmProtocolId=cardNrtsCcrmProtocolId, pportSlotId=pportSlotId, pportDS0BitStuff=pportDS0BitStuff, cktLeafOperStatus=cktLeafOperStatus, pportAtmLayerErroredReceivedCells=pportAtmLayerErroredReceivedCells, pportds1FDLPrmXmit=pportds1FDLPrmXmit, cktRtAccuMinDelay=cktRtAccuMinDelay, svcPrefixLocalGatewayNmbPlan=svcPrefixLocalGatewayNmbPlan, cardFrameMemoryUtil=cardFrameMemoryUtil, nodeRerouteCount=nodeRerouteCount, svcAtmConfigQ93bT322=svcAtmConfigQ93bT322, cardSF2OperStatus=cardSF2OperStatus, lportTrkPduRevision=lportTrkPduRevision, dsx1FdlVersion=dsx1FdlVersion, lportDiagState=lportDiagState, lportDTEPollErrorCounts=lportDTEPollErrorCounts, dsx1CurrentESs=dsx1CurrentESs, cktDestDlci=cktDestDlci, cardMfgPN=cardMfgPN, dsx1CurrentPortId=dsx1CurrentPortId, pportds1FDLXmitPid=pportds1FDLXmitPid, dsx1CircuitIdentifier=dsx1CircuitIdentifier, nodeCpuUtil=nodeCpuUtil, cardTransmitClockStatusChange=cardTransmitClockStatusChange, cardISDNSigType=cardISDNSigType, lportFrameRelayTrkEnable=lportFrameRelayTrkEnable, cktNiDown=cktNiDown, cktSmdsRtEntry=cktSmdsRtEntry, lportXmitLatencyThreshold=lportXmitLatencyThreshold, cktOutDEFrames=cktOutDEFrames, pportSonetSTM1Scramble=pportSonetSTM1Scramble, pportAtmInterfaceType=pportAtmInterfaceType, pportATMTcaId=pportATMTcaId, pportEFCIMarking=pportEFCIMarking, cardSPEFCIEnable=cardSPEFCIEnable, nodeInternalErr=nodeInternalErr, pportExtClockBackup=pportExtClockBackup, cktFailNode=cktFailNode, pportTrafficShaperEntry=pportTrafficShaperEntry, lportTrkOverhead=lportTrkOverhead, cktAbrCDF=cktAbrCDF, aseMetricType=aseMetricType, cardDiagTestId=cardDiagTestId)
mibBuilder.exportSymbols("CASCADE-MIB", cktAtmFrameDiscard=cktAtmFrameDiscard, pportPeakCellRate6=pportPeakCellRate6, pportSonetSDHFramingMode=pportSonetSDHFramingMode, lportSmdsReserved144=lportSmdsReserved144, lportAtmRouteMetricQoS3=lportAtmRouteMetricQoS3, nodeBillingService=nodeBillingService, nodeOutOctets=nodeOutOctets, cardHwRev=cardHwRev, cktInODEOctets=cktInODEOctets, lportSmdsCntDstGaNotFounds=lportSmdsCntDstGaNotFounds, cktRtMinDelay=cktRtMinDelay, smdsaddr=smdsaddr, cardPhysicalIndex=cardPhysicalIndex, lportAtmDataRateQoS2=lportAtmDataRateQoS2, cktIWF1490to1483Error=cktIWF1490to1483Error, cktAtmRTfdParam2=cktAtmRTfdParam2, pportAtmLastUnconfiguredVci=pportAtmLastUnconfiguredVci, pportTrafficShaperCellRatioDivisor=pportTrafficShaperCellRatioDivisor, lportInitCallSetup=lportInitCallSetup, pportAtmPlcp=pportAtmPlcp, nodeBilling=nodeBilling, lportDiagTestId=lportDiagTestId, cktInDEFrames=cktInDEFrames, nodeBillingStateChange=nodeBillingStateChange, svcAtmFailedCallTerminationTime=svcAtmFailedCallTerminationTime, svcAtmFailedCallBBearerTfcType=svcAtmFailedCallBBearerTfcType, svcPrefixNumBits=svcPrefixNumBits, clkSourceFailure=clkSourceFailure, nodeBillingEntry=nodeBillingEntry, cardDiagResultString=cardDiagResultString, cardATMTcaSPPearlOCbrFailureAlertPeriod=cardATMTcaSPPearlOCbrFailureAlertPeriod, svcConfigCgPtyInsertionMode=svcConfigCgPtyInsertionMode, swBuildView=swBuildView, lportEntry=lportEntry, svcAtmConfigQ93bT313=svcAtmConfigQ93bT313, cktRAbrRIF=cktRAbrRIF, svcAtmConfigQ93bNumReleaseCmpltPduTx=svcAtmConfigQ93bNumReleaseCmpltPduTx, lportQP4Len=lportQP4Len, cktRAbrICR=cktRAbrICR, cktRNrtsCLP1=cktRNrtsCLP1, node=node, pportExtClockRestore=pportExtClockRestore, pportds1FarEndLoopStatus=pportds1FarEndLoopStatus, dsx1CurrentSESs=dsx1CurrentSESs, nodeActivePvcs=nodeActivePvcs, lportSmdsCntSaDaOnSamePorts=lportSmdsCntSaDaOnSamePorts, pportCongestedTransmittedCells=pportCongestedTransmittedCells, dsx1TotalCSSs=dsx1TotalCSSs, nodeLanIpAddr=nodeLanIpAddr, nodePortPoll=nodePortPoll, cktLeafAdminStatus=cktLeafAdminStatus, cktSrcDlci=cktSrcDlci, lportErrType=lportErrType, namebindingTable=namebindingTable, pportDS0InitiateLpbkFailure=pportDS0InitiateLpbkFailure, dsx1CurrentUASs=dsx1CurrentUASs, isdnAddrIf=isdnAddrIf, lportDiagOptionStr=lportDiagOptionStr, lportDlciAddrLen=lportDlciAddrLen, svcNodePrefixPrefix=svcNodePrefixPrefix, dsx1LoopbackConfig=dsx1LoopbackConfig, pportISDNChannelStatus=pportISDNChannelStatus, cardImageSetA=cardImageSetA, pportPeakCellRate2=pportPeakCellRate2, lportOutVAvailbwQoS4=lportOutVAvailbwQoS4, svcAtmConfigQSaalNumDiscardRx=svcAtmConfigQSaalNumDiscardRx, dsx1IntervalNumber=dsx1IntervalNumber, lportSmdsCntDxi2LinkIdInvalids=lportSmdsCntDxi2LinkIdInvalids, cardToWarmboot=cardToWarmboot, lportLossOfCellSequence=lportLossOfCellSequence, svcAtmConfigQSaalNumErakPduTx=svcAtmConfigQSaalNumErakPduTx, cktRedFrPcnt=cktRedFrPcnt, pportAPSpairedPportId=pportAPSpairedPportId, svcAtmConfigQ93bNumReleasePduRx=svcAtmConfigQ93bNumReleasePduRx, lportSmdsCntInByteDxi2HbPolls=lportSmdsCntInByteDxi2HbPolls, cktMPEnableAMF=cktMPEnableAMF, svcAtmSigStatusChange=svcAtmSigStatusChange, cardATMTcaId=cardATMTcaId, cktLeafSvcCallingParty=cktLeafSvcCallingParty, svcAtmConfigQSaalNumEndakPduRx=svcAtmConfigQSaalNumEndakPduRx, pportPeakCellRate4=pportPeakCellRate4, nodePollStatus=nodePollStatus, pportds1LoopbackConfig=pportds1LoopbackConfig, svcAtmFailedCallBBearerClass=svcAtmFailedCallBBearerClass, cardEntry=cardEntry, pportESFDataLinkStatus=pportESFDataLinkStatus, dsx1PortId=dsx1PortId, cktRtAccuMaxDelay=cktRtAccuMaxDelay, lportTrkLastTimeChange=lportTrkLastTimeChange, cardBTUsFromBus=cardBTUsFromBus, cktLeafPath=cktLeafPath, cktDestNodeId=cktDestNodeId, nodeSwDownloadComplete=nodeSwDownloadComplete, Index=Index, cktRateEnforceRSchm=cktRateEnforceRSchm, nodeMemoryUtil=nodeMemoryUtil, lportSmdsPduHdrSip3DstGaNotFound=lportSmdsPduHdrSip3DstGaNotFound, cktMcastParentGroups=cktMcastParentGroups, cktInOctets=cktInOctets, cktLeafFailNode=cktLeafFailNode, svcAtmConfigQSaalNumPollPduTx=svcAtmConfigQSaalNumPollPduTx, svcAtmConfigQSaalNumErakPduRx=svcAtmConfigQSaalNumErakPduRx, nodeBillingAdminAction=nodeBillingAdminAction, pportATMTcaEBufOverflowVBR2Thresh=pportATMTcaEBufOverflowVBR2Thresh, isdnaddr=isdnaddr, cktDceState=cktDceState, nodeConsoleIndex=nodeConsoleIndex, lportXmitRefillPriority1Percentage=lportXmitRefillPriority1Percentage, lportTrkRestThrsh=lportTrkRestThrsh, svcAtmFailedCallAtmRQoSClass=svcAtmFailedCallAtmRQoSClass, cktAtmReroute=cktAtmReroute, svcAtmConfigQSaalTPoll=svcAtmConfigQSaalTPoll, svcAtmConfigQSaalNumBgnPduTx=svcAtmConfigQSaalNumBgnPduTx, cardDiagTestRuns=cardDiagTestRuns, pportCbrCurrentClockMode=pportCbrCurrentClockMode, netMaxSegsize=netMaxSegsize, nodePrLoadState=nodePrLoadState, svcAddrIfIndex=svcAddrIfIndex, lportSevCongests=lportSevCongests, svcAtmConfigIfIndex=svcAtmConfigIfIndex, cktNdcEnable=cktNdcEnable, pportdsx3FEACStatus=pportdsx3FEACStatus, svcAtmConfigOperStatus=svcAtmConfigOperStatus, nodeQOSPollTimer=nodeQOSPollTimer, lportDTEFailReason=lportDTEFailReason, lportSmdsPduHdrDxi2AeInvalid=lportSmdsPduHdrDxi2AeInvalid, lportId=lportId, cktMcastGroupId=cktMcastGroupId, pportDs1LineBuildout=pportDs1LineBuildout, nodePsADiagCode=nodePsADiagCode, svcAtmConfigQSaalNumRsakPduTx=svcAtmConfigQSaalNumRsakPduTx, cardEraseAll=cardEraseAll, nodeBillingTable=nodeBillingTable, lportIlmiPrefixScreenMode=lportIlmiPrefixScreenMode, svcAtmConfigQ93bNumConnectAckPduRx=svcAtmConfigQ93bNumConnectAckPduRx, pportFebeErrors=pportFebeErrors, lportDCEOutAsyncStatusFrames=lportDCEOutAsyncStatusFrames, pportAAL5LengthError=pportAAL5LengthError, nodeRefclockActiveCGUSlotId=nodeRefclockActiveCGUSlotId, dsx1IntervalPortId=dsx1IntervalPortId, lportOutCells=lportOutCells, pportAPSprotectionLineState=pportAPSprotectionLineState, nodeOutPkts=nodeOutPkts, cardBTUsToBus=cardBTUsToBus, svcPrefixIfIndex=svcPrefixIfIndex, svcAtmFailedCallAtmRTfdType=svcAtmFailedCallAtmRTfdType, cardInNoBufferBtus=cardInNoBufferBtus, cktRerouteCnt=cktRerouteCnt, cardToColdboot=cardToColdboot, dsx1IntervalESs=dsx1IntervalESs, svcAtmConfigQ93bT399=svcAtmConfigQ93bT399, provserver=provserver, cktLeafAtmInTaggedCells=cktLeafAtmInTaggedCells, lportSmdsCntDstGaScrnFails=lportSmdsCntDstGaScrnFails, lportBilling=lportBilling, nodeDiagLEDReset=nodeDiagLEDReset, cardDiagFatalAddress=cardDiagFatalAddress, cardBTUsBusErrors=cardBTUsBusErrors, nodeDiagFatalAddress=nodeDiagFatalAddress, lportSmdsGaScrnMap=lportSmdsGaScrnMap, aseAdminStatus=aseAdminStatus, cardSwRev=cardSwRev, cardATMTcaInATMDCFullThresh=cardATMTcaInATMDCFullThresh, cktInDEOctetsPeak=cktInDEOctetsPeak, lportGlobalDlci=lportGlobalDlci, cardShootState=cardShootState)
