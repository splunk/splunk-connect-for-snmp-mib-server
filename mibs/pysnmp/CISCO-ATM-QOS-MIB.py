#
# PySNMP MIB module CISCO-ATM-QOS-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/CISCO-ATM-QOS-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 17:33:23 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, ObjectIdentifier, OctetString = mibBuilder.importSymbols("ASN1", "Integer", "ObjectIdentifier", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueSizeConstraint, ConstraintsUnion, ValueRangeConstraint, ConstraintsIntersection, SingleValueConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueSizeConstraint", "ConstraintsUnion", "ValueRangeConstraint", "ConstraintsIntersection", "SingleValueConstraint")
AtmServiceCategory, = mibBuilder.importSymbols("ATM-FORUM-TC-MIB", "AtmServiceCategory")
atmVclVci, atmVplVpi, atmVclVpi = mibBuilder.importSymbols("ATM-MIB", "atmVclVci", "atmVplVpi", "atmVclVpi")
ciscoMgmt, = mibBuilder.importSymbols("CISCO-SMI", "ciscoMgmt")
ifIndex, = mibBuilder.importSymbols("IF-MIB", "ifIndex")
ModuleCompliance, NotificationGroup, ObjectGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup", "ObjectGroup")
TimeTicks, Gauge32, Unsigned32, Counter32, ModuleIdentity, Bits, IpAddress, iso, ObjectIdentity, MibScalar, MibTable, MibTableRow, MibTableColumn, MibIdentifier, Integer32, Counter64, NotificationType = mibBuilder.importSymbols("SNMPv2-SMI", "TimeTicks", "Gauge32", "Unsigned32", "Counter32", "ModuleIdentity", "Bits", "IpAddress", "iso", "ObjectIdentity", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "MibIdentifier", "Integer32", "Counter64", "NotificationType")
TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString")
ciscoAtmQosMIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 9, 9, 279))
ciscoAtmQosMIB.setRevisions(('2002-06-10 00:00',))
if mibBuilder.loadTexts: ciscoAtmQosMIB.setLastUpdated('200206100000Z')
if mibBuilder.loadTexts: ciscoAtmQosMIB.setOrganization('Cisco Systems, Inc.')
ciscoAtmQosMIBNotifs = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 279, 0))
ciscoAtmQosMIBObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 279, 1))
ciscoAtmQosMIBConform = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 279, 2))
caqVccParams = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 279, 1, 1))
caqVpcParams = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 279, 1, 2))
caqQueuingParams = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 279, 1, 3))
class VcParamConfigLocation(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))
    namedValues = NamedValues(("configDefault", 1), ("configVcDirect", 2), ("configVcClass", 3), ("configVcClassSubInterface", 4), ("configVcClassInterface", 5))

class VpState(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2))
    namedValues = NamedValues(("vpStateInactive", 1), ("vpStateActive", 2))

caqVccParamsTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 279, 1, 1, 1), )
if mibBuilder.loadTexts: caqVccParamsTable.setStatus('current')
caqVccParamsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 279, 1, 1, 1, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "ATM-MIB", "atmVclVpi"), (0, "ATM-MIB", "atmVclVci"))
if mibBuilder.loadTexts: caqVccParamsEntry.setStatus('current')
caqVccParamsType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 279, 1, 1, 1, 1, 1), AtmServiceCategory()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: caqVccParamsType.setStatus('current')
caqVccParamsPcrIn0 = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 279, 1, 1, 1, 1, 2), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: caqVccParamsPcrIn0.setStatus('current')
caqVccParamsPcrIn01 = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 279, 1, 1, 1, 1, 3), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: caqVccParamsPcrIn01.setStatus('current')
caqVccParamsPcrOut0 = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 279, 1, 1, 1, 1, 4), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: caqVccParamsPcrOut0.setStatus('current')
caqVccParamsPcrOut01 = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 279, 1, 1, 1, 1, 5), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: caqVccParamsPcrOut01.setStatus('current')
caqVccParamsScrIn0 = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 279, 1, 1, 1, 1, 6), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: caqVccParamsScrIn0.setStatus('current')
caqVccParamsScrIn01 = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 279, 1, 1, 1, 1, 7), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: caqVccParamsScrIn01.setStatus('current')
caqVccParamsScrOut0 = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 279, 1, 1, 1, 1, 8), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: caqVccParamsScrOut0.setStatus('current')
caqVccParamsScrOut01 = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 279, 1, 1, 1, 1, 9), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: caqVccParamsScrOut01.setStatus('current')
caqVccParamsBcsIn0 = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 279, 1, 1, 1, 1, 10), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: caqVccParamsBcsIn0.setStatus('current')
caqVccParamsBcsIn01 = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 279, 1, 1, 1, 1, 11), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: caqVccParamsBcsIn01.setStatus('current')
caqVccParamsBcsOut0 = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 279, 1, 1, 1, 1, 12), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: caqVccParamsBcsOut0.setStatus('current')
caqVccParamsBcsOut01 = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 279, 1, 1, 1, 1, 13), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: caqVccParamsBcsOut01.setStatus('current')
caqVccParamsInheritLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 279, 1, 1, 1, 1, 14), VcParamConfigLocation()).setMaxAccess("readonly")
if mibBuilder.loadTexts: caqVccParamsInheritLevel.setStatus('current')
caqVccParamsMcrIn = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 279, 1, 1, 1, 1, 15), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: caqVccParamsMcrIn.setStatus('current')
caqVccParamsMcrOut = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 279, 1, 1, 1, 1, 16), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: caqVccParamsMcrOut.setStatus('current')
caqVccParamsInvRdf = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 279, 1, 1, 1, 1, 17), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: caqVccParamsInvRdf.setStatus('current')
caqVccParamsInvRif = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 279, 1, 1, 1, 1, 18), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: caqVccParamsInvRif.setStatus('current')
caqVccParamsRfl = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 279, 1, 1, 1, 1, 19), VcParamConfigLocation()).setMaxAccess("readonly")
if mibBuilder.loadTexts: caqVccParamsRfl.setStatus('current')
caqVccParamsCdv = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 279, 1, 1, 1, 1, 20), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: caqVccParamsCdv.setStatus('current')
caqVccParamsCdvt = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 279, 1, 1, 1, 1, 21), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: caqVccParamsCdvt.setStatus('current')
caqVccParamsIcr = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 279, 1, 1, 1, 1, 22), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: caqVccParamsIcr.setStatus('current')
caqVccParamsTbe = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 279, 1, 1, 1, 1, 23), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: caqVccParamsTbe.setStatus('current')
caqVccParamsFrtt = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 279, 1, 1, 1, 1, 24), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: caqVccParamsFrtt.setStatus('current')
caqVccParamsNrm = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 279, 1, 1, 1, 1, 25), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: caqVccParamsNrm.setStatus('current')
caqVccParamsInvTrm = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 279, 1, 1, 1, 1, 26), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: caqVccParamsInvTrm.setStatus('current')
caqVccParamsInvCdf = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 279, 1, 1, 1, 1, 27), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: caqVccParamsInvCdf.setStatus('current')
caqVccParamsAdtf = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 279, 1, 1, 1, 1, 28), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: caqVccParamsAdtf.setStatus('current')
caqVpcParamsTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 279, 1, 2, 1), )
if mibBuilder.loadTexts: caqVpcParamsTable.setStatus('current')
caqVpcParamsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 279, 1, 2, 1, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "ATM-MIB", "atmVplVpi"))
if mibBuilder.loadTexts: caqVpcParamsEntry.setStatus('current')
caqVpcParamsVpState = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 279, 1, 2, 1, 1, 1), VpState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: caqVpcParamsVpState.setStatus('current')
caqVpcParamsPeakRate = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 279, 1, 2, 1, 1, 2), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: caqVpcParamsPeakRate.setStatus('current')
caqVpcParamsCesRate = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 279, 1, 2, 1, 1, 3), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: caqVpcParamsCesRate.setStatus('current')
caqVpcParamsDataVcCount = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 279, 1, 2, 1, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: caqVpcParamsDataVcCount.setStatus('current')
caqVpcParamsCesVcCount = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 279, 1, 2, 1, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: caqVpcParamsCesVcCount.setStatus('current')
caqVpcParamsVcdF4Seg = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 279, 1, 2, 1, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: caqVpcParamsVcdF4Seg.setStatus('current')
caqVpcParamsVcdF4Ete = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 279, 1, 2, 1, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: caqVpcParamsVcdF4Ete.setStatus('current')
caqVpcParamsScr = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 279, 1, 2, 1, 1, 8), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: caqVpcParamsScr.setStatus('current')
caqVpcParamsMbs = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 279, 1, 2, 1, 1, 9), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: caqVpcParamsMbs.setStatus('current')
caqVpcParamsAvailBw = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 279, 1, 2, 1, 1, 10), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: caqVpcParamsAvailBw.setStatus('current')
caqQueuingParamsTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 279, 1, 3, 1), )
if mibBuilder.loadTexts: caqQueuingParamsTable.setStatus('current')
caqQueuingParamsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 279, 1, 3, 1, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "ATM-MIB", "atmVclVpi"), (0, "ATM-MIB", "atmVclVci"))
if mibBuilder.loadTexts: caqQueuingParamsEntry.setStatus('current')
caqQueuingParamsMeanQDepth = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 279, 1, 3, 1, 1, 1), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: caqQueuingParamsMeanQDepth.setStatus('current')
caqQueuingParamsClassTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 279, 1, 3, 2), )
if mibBuilder.loadTexts: caqQueuingParamsClassTable.setStatus('current')
caqQueuingParamsClassEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 279, 1, 3, 2, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "ATM-MIB", "atmVclVpi"), (0, "ATM-MIB", "atmVclVci"), (0, "CISCO-ATM-QOS-MIB", "caqQueuingParamsClassIndex"))
if mibBuilder.loadTexts: caqQueuingParamsClassEntry.setStatus('current')
caqQueuingParamsClassIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 279, 1, 3, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 8)))
if mibBuilder.loadTexts: caqQueuingParamsClassIndex.setStatus('current')
caqQueuingParamsClassRandDrp = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 279, 1, 3, 2, 1, 2), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: caqQueuingParamsClassRandDrp.setStatus('current')
caqQueuingParamsClassTailDrp = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 279, 1, 3, 2, 1, 3), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: caqQueuingParamsClassTailDrp.setStatus('current')
caqQueuingParamsClassMinThre = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 279, 1, 3, 2, 1, 4), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: caqQueuingParamsClassMinThre.setStatus('current')
caqQueuingParamsClassMaxThre = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 279, 1, 3, 2, 1, 5), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: caqQueuingParamsClassMaxThre.setStatus('current')
caqQueuingParamsClassMrkProb = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 279, 1, 3, 2, 1, 6), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: caqQueuingParamsClassMrkProb.setStatus('current')
ciscoAtmQosMIBCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 279, 2, 1))
ciscoAtmQosMIBGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 279, 2, 2))
ciscoAtmQosMIBCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 9, 9, 279, 2, 1, 1)).setObjects(("CISCO-ATM-QOS-MIB", "ciscoAtmQosVccGroup"), ("CISCO-ATM-QOS-MIB", "ciscoAtmQosVpcGroup"), ("CISCO-ATM-QOS-MIB", "ciscoAtmQosVcQueuingGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoAtmQosMIBCompliance = ciscoAtmQosMIBCompliance.setStatus('current')
ciscoAtmQosVccGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 279, 2, 2, 1)).setObjects(("CISCO-ATM-QOS-MIB", "caqVccParamsType"), ("CISCO-ATM-QOS-MIB", "caqVccParamsPcrIn0"), ("CISCO-ATM-QOS-MIB", "caqVccParamsPcrIn01"), ("CISCO-ATM-QOS-MIB", "caqVccParamsPcrOut0"), ("CISCO-ATM-QOS-MIB", "caqVccParamsPcrOut01"), ("CISCO-ATM-QOS-MIB", "caqVccParamsScrIn0"), ("CISCO-ATM-QOS-MIB", "caqVccParamsScrIn01"), ("CISCO-ATM-QOS-MIB", "caqVccParamsScrOut0"), ("CISCO-ATM-QOS-MIB", "caqVccParamsScrOut01"), ("CISCO-ATM-QOS-MIB", "caqVccParamsBcsIn0"), ("CISCO-ATM-QOS-MIB", "caqVccParamsBcsIn01"), ("CISCO-ATM-QOS-MIB", "caqVccParamsBcsOut0"), ("CISCO-ATM-QOS-MIB", "caqVccParamsBcsOut01"), ("CISCO-ATM-QOS-MIB", "caqVccParamsInheritLevel"), ("CISCO-ATM-QOS-MIB", "caqVccParamsMcrIn"), ("CISCO-ATM-QOS-MIB", "caqVccParamsMcrOut"), ("CISCO-ATM-QOS-MIB", "caqVccParamsInvRdf"), ("CISCO-ATM-QOS-MIB", "caqVccParamsInvRif"), ("CISCO-ATM-QOS-MIB", "caqVccParamsRfl"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoAtmQosVccGroup = ciscoAtmQosVccGroup.setStatus('current')
ciscoAtmQosVccAddon1Group = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 279, 2, 2, 2)).setObjects(("CISCO-ATM-QOS-MIB", "caqVccParamsCdv"), ("CISCO-ATM-QOS-MIB", "caqVccParamsCdvt"), ("CISCO-ATM-QOS-MIB", "caqVccParamsIcr"), ("CISCO-ATM-QOS-MIB", "caqVccParamsTbe"), ("CISCO-ATM-QOS-MIB", "caqVccParamsFrtt"), ("CISCO-ATM-QOS-MIB", "caqVccParamsNrm"), ("CISCO-ATM-QOS-MIB", "caqVccParamsInvTrm"), ("CISCO-ATM-QOS-MIB", "caqVccParamsInvCdf"), ("CISCO-ATM-QOS-MIB", "caqVccParamsAdtf"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoAtmQosVccAddon1Group = ciscoAtmQosVccAddon1Group.setStatus('current')
ciscoAtmQosVpcGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 279, 2, 2, 3)).setObjects(("CISCO-ATM-QOS-MIB", "caqVpcParamsVpState"), ("CISCO-ATM-QOS-MIB", "caqVpcParamsPeakRate"), ("CISCO-ATM-QOS-MIB", "caqVpcParamsCesRate"), ("CISCO-ATM-QOS-MIB", "caqVpcParamsDataVcCount"), ("CISCO-ATM-QOS-MIB", "caqVpcParamsCesVcCount"), ("CISCO-ATM-QOS-MIB", "caqVpcParamsVcdF4Seg"), ("CISCO-ATM-QOS-MIB", "caqVpcParamsVcdF4Ete"), ("CISCO-ATM-QOS-MIB", "caqVpcParamsScr"), ("CISCO-ATM-QOS-MIB", "caqVpcParamsMbs"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoAtmQosVpcGroup = ciscoAtmQosVpcGroup.setStatus('current')
ciscoAtmQosVpcAddon1Group = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 279, 2, 2, 4)).setObjects(("CISCO-ATM-QOS-MIB", "caqVpcParamsAvailBw"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoAtmQosVpcAddon1Group = ciscoAtmQosVpcAddon1Group.setStatus('current')
ciscoAtmQosVcQueuingGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 279, 2, 2, 5)).setObjects(("CISCO-ATM-QOS-MIB", "caqQueuingParamsMeanQDepth"), ("CISCO-ATM-QOS-MIB", "caqQueuingParamsClassRandDrp"), ("CISCO-ATM-QOS-MIB", "caqQueuingParamsClassTailDrp"), ("CISCO-ATM-QOS-MIB", "caqQueuingParamsClassMinThre"), ("CISCO-ATM-QOS-MIB", "caqQueuingParamsClassMaxThre"), ("CISCO-ATM-QOS-MIB", "caqQueuingParamsClassMrkProb"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoAtmQosVcQueuingGroup = ciscoAtmQosVcQueuingGroup.setStatus('current')
mibBuilder.exportSymbols("CISCO-ATM-QOS-MIB", ciscoAtmQosVpcGroup=ciscoAtmQosVpcGroup, caqQueuingParamsClassTable=caqQueuingParamsClassTable, caqVccParamsBcsIn01=caqVccParamsBcsIn01, caqQueuingParamsClassEntry=caqQueuingParamsClassEntry, caqVccParams=caqVccParams, caqVccParamsPcrOut0=caqVccParamsPcrOut0, ciscoAtmQosMIBObjects=ciscoAtmQosMIBObjects, caqVccParamsInvRif=caqVccParamsInvRif, caqVpcParamsVcdF4Seg=caqVpcParamsVcdF4Seg, VcParamConfigLocation=VcParamConfigLocation, caqVccParamsCdvt=caqVccParamsCdvt, caqQueuingParamsClassIndex=caqQueuingParamsClassIndex, ciscoAtmQosVccAddon1Group=ciscoAtmQosVccAddon1Group, caqVccParamsTable=caqVccParamsTable, caqVccParamsFrtt=caqVccParamsFrtt, caqVccParamsNrm=caqVccParamsNrm, caqVccParamsInvTrm=caqVccParamsInvTrm, ciscoAtmQosVpcAddon1Group=ciscoAtmQosVpcAddon1Group, caqVccParamsScrOut0=caqVccParamsScrOut0, caqQueuingParamsClassMinThre=caqQueuingParamsClassMinThre, caqQueuingParamsClassRandDrp=caqQueuingParamsClassRandDrp, caqVpcParamsVpState=caqVpcParamsVpState, caqVccParamsBcsOut0=caqVccParamsBcsOut0, caqVccParamsMcrOut=caqVccParamsMcrOut, caqVpcParamsVcdF4Ete=caqVpcParamsVcdF4Ete, caqQueuingParamsTable=caqQueuingParamsTable, caqQueuingParamsEntry=caqQueuingParamsEntry, ciscoAtmQosMIBNotifs=ciscoAtmQosMIBNotifs, caqVpcParamsTable=caqVpcParamsTable, caqVpcParamsDataVcCount=caqVpcParamsDataVcCount, caqVccParamsInvCdf=caqVccParamsInvCdf, VpState=VpState, caqQueuingParamsClassMaxThre=caqQueuingParamsClassMaxThre, caqVccParamsScrOut01=caqVccParamsScrOut01, caqVccParamsMcrIn=caqVccParamsMcrIn, caqVccParamsRfl=caqVccParamsRfl, ciscoAtmQosMIBConform=ciscoAtmQosMIBConform, caqVccParamsBcsOut01=caqVccParamsBcsOut01, PYSNMP_MODULE_ID=ciscoAtmQosMIB, ciscoAtmQosMIBGroups=ciscoAtmQosMIBGroups, ciscoAtmQosMIB=ciscoAtmQosMIB, caqVccParamsIcr=caqVccParamsIcr, caqVpcParamsEntry=caqVpcParamsEntry, caqVccParamsPcrIn01=caqVccParamsPcrIn01, caqVpcParamsAvailBw=caqVpcParamsAvailBw, caqQueuingParamsMeanQDepth=caqQueuingParamsMeanQDepth, caqVpcParamsPeakRate=caqVpcParamsPeakRate, caqQueuingParamsClassMrkProb=caqQueuingParamsClassMrkProb, caqVccParamsType=caqVccParamsType, caqVccParamsScrIn01=caqVccParamsScrIn01, caqVccParamsInvRdf=caqVccParamsInvRdf, ciscoAtmQosMIBCompliance=ciscoAtmQosMIBCompliance, ciscoAtmQosVccGroup=ciscoAtmQosVccGroup, caqVccParamsPcrIn0=caqVccParamsPcrIn0, caqVccParamsAdtf=caqVccParamsAdtf, caqVccParamsScrIn0=caqVccParamsScrIn0, caqVccParamsBcsIn0=caqVccParamsBcsIn0, caqVccParamsInheritLevel=caqVccParamsInheritLevel, caqVpcParamsMbs=caqVpcParamsMbs, caqVpcParams=caqVpcParams, caqVpcParamsCesRate=caqVpcParamsCesRate, caqVccParamsPcrOut01=caqVccParamsPcrOut01, caqQueuingParamsClassTailDrp=caqQueuingParamsClassTailDrp, caqVccParamsCdv=caqVccParamsCdv, caqVpcParamsScr=caqVpcParamsScr, caqVpcParamsCesVcCount=caqVpcParamsCesVcCount, ciscoAtmQosMIBCompliances=ciscoAtmQosMIBCompliances, caqVccParamsEntry=caqVccParamsEntry, caqQueuingParams=caqQueuingParams, ciscoAtmQosVcQueuingGroup=ciscoAtmQosVcQueuingGroup, caqVccParamsTbe=caqVccParamsTbe)
