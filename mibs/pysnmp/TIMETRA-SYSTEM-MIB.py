#
# PySNMP MIB module TIMETRA-SYSTEM-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/TIMETRA-SYSTEM-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 21:15:37 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, Integer, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "OctetString", "Integer", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsIntersection, ValueSizeConstraint, SingleValueConstraint, ValueRangeConstraint, ConstraintsUnion = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsIntersection", "ValueSizeConstraint", "SingleValueConstraint", "ValueRangeConstraint", "ConstraintsUnion")
InetAddressType, InetAddressIPv6, InetAddressPrefixLength, InetAddress = mibBuilder.importSymbols("INET-ADDRESS-MIB", "InetAddressType", "InetAddressIPv6", "InetAddressPrefixLength", "InetAddress")
NotificationGroup, ObjectGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ObjectGroup", "ModuleCompliance")
NotificationType, Counter32, IpAddress, Unsigned32, MibIdentifier, Bits, Integer32, Counter64, MibScalar, MibTable, MibTableRow, MibTableColumn, ObjectIdentity, Gauge32, TimeTicks, ModuleIdentity, iso = mibBuilder.importSymbols("SNMPv2-SMI", "NotificationType", "Counter32", "IpAddress", "Unsigned32", "MibIdentifier", "Bits", "Integer32", "Counter64", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "ObjectIdentity", "Gauge32", "TimeTicks", "ModuleIdentity", "iso")
DisplayString, RowPointer, TextualConvention, TimeStamp, RowStatus, DateAndTime, TruthValue = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "RowPointer", "TextualConvention", "TimeStamp", "RowStatus", "DateAndTime", "TruthValue")
tmnxChassisNotifyHwIndex, tmnxHwClass, tmnxHwID = mibBuilder.importSymbols("TIMETRA-CHASSIS-MIB", "tmnxChassisNotifyHwIndex", "tmnxHwClass", "tmnxHwID")
tmnxSRObjs, tmnxSRConfs, timetraSRMIBModules, tmnxSRNotifyPrefix = mibBuilder.importSymbols("TIMETRA-GLOBAL-MIB", "tmnxSRObjs", "tmnxSRConfs", "timetraSRMIBModules", "tmnxSRNotifyPrefix")
tmnxLogExecRollbackOpIndex, = mibBuilder.importSymbols("TIMETRA-LOG-MIB", "tmnxLogExecRollbackOpIndex")
TTcpUdpPort, TmnxOperState, TNamedItem, IpAddressPrefixLength, TmnxEnabledDisabled, TNamedItemOrEmpty, TmnxAdminState, TItemDescription, TmnxActionType = mibBuilder.importSymbols("TIMETRA-TC-MIB", "TTcpUdpPort", "TmnxOperState", "TNamedItem", "IpAddressPrefixLength", "TmnxEnabledDisabled", "TNamedItemOrEmpty", "TmnxAdminState", "TItemDescription", "TmnxActionType")
timetraSysMIBModule = ModuleIdentity((1, 3, 6, 1, 4, 1, 6527, 1, 1, 3, 1))
timetraSysMIBModule.setRevisions(('1911-02-01 00:00', '1910-01-01 00:00', '1909-02-28 00:00', '1908-01-01 00:00', '1907-01-01 00:00', '1906-03-15 00:00', '1905-08-31 00:00', '1905-01-24 00:00', '1904-01-15 00:00', '1903-08-15 00:00', '1903-01-20 00:00', '1900-08-14 00:00',))
if mibBuilder.loadTexts: timetraSysMIBModule.setLastUpdated('201102010000Z')
if mibBuilder.loadTexts: timetraSysMIBModule.setOrganization('Alcatel-Lucent')
tmnxSysObjs = MibIdentifier((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 1))
tmnxSysConformance = MibIdentifier((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 1))
tmnxSysMIBNotifyPrefix = MibIdentifier((1, 3, 6, 1, 4, 1, 6527, 3, 1, 3, 1))
tmnxSysNotifications = MibIdentifier((1, 3, 6, 1, 4, 1, 6527, 3, 1, 3, 1, 0))
class TmnxSsiSyncMode(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3))
    namedValues = NamedValues(("none", 1), ("config", 2), ("bootEnv", 3))

class TmnxSsiSyncRollbackMode(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3))
    namedValues = NamedValues(("none", 1), ("rollbackSingle", 2), ("rollbackAll", 3))

class TmnxSysMonSampleTime(TextualConvention, Unsigned32):
    status = 'current'
    subtypeSpec = Unsigned32.subtypeSpec + ConstraintsUnion(ValueRangeConstraint(1, 1), ValueRangeConstraint(60, 60), ValueRangeConstraint(300, 300), )
class TmnxSysMonUtilization(TextualConvention, Gauge32):
    status = 'current'
    subtypeSpec = Gauge32.subtypeSpec + ValueRangeConstraint(0, 10000)

sysGenInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 1, 1))
sgiCpuUsage = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 1, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setUnits('percent').setMaxAccess("readonly")
if mibBuilder.loadTexts: sgiCpuUsage.setStatus('current')
sgiMemoryUsed = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 1, 1, 2), Unsigned32()).setUnits('bytes').setMaxAccess("readonly")
if mibBuilder.loadTexts: sgiMemoryUsed.setStatus('current')
sgiMemoryAvailable = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 1, 1, 3), Unsigned32()).setUnits('bytes').setMaxAccess("readonly")
if mibBuilder.loadTexts: sgiMemoryAvailable.setStatus('current')
sgiMemoryPoolAllocated = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 1, 1, 4), Unsigned32()).setUnits('bytes').setMaxAccess("readonly")
if mibBuilder.loadTexts: sgiMemoryPoolAllocated.setStatus('current')
sgiSwMajorVersion = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 1, 1, 5), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sgiSwMajorVersion.setStatus('current')
sgiSwMinorVersion = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 1, 1, 6), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sgiSwMinorVersion.setStatus('current')
sgiSwVersionModifier = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 1, 1, 7), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sgiSwVersionModifier.setStatus('current')
sgiSnmpInGetBulks = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 1, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sgiSnmpInGetBulks.setStatus('current')
sgiKbMemoryUsed = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 1, 1, 9), Unsigned32()).setUnits('kilobytes').setMaxAccess("readonly")
if mibBuilder.loadTexts: sgiKbMemoryUsed.setStatus('current')
sgiKbMemoryAvailable = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 1, 1, 10), Unsigned32()).setUnits('kilobytes').setMaxAccess("readonly")
if mibBuilder.loadTexts: sgiKbMemoryAvailable.setStatus('current')
sgiKbMemoryPoolAllocated = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 1, 1, 11), Unsigned32()).setUnits('kilobytes').setMaxAccess("readonly")
if mibBuilder.loadTexts: sgiKbMemoryPoolAllocated.setStatus('current')
tmnxSysCpuMonTable = MibTable((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 1, 1, 12), )
if mibBuilder.loadTexts: tmnxSysCpuMonTable.setStatus('current')
tmnxSysCpuMonEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 1, 1, 12, 1), ).setIndexNames((0, "TIMETRA-SYSTEM-MIB", "tmnxSysCpuMonSampleTime"))
if mibBuilder.loadTexts: tmnxSysCpuMonEntry.setStatus('current')
tmnxSysCpuMonSampleTime = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 1, 1, 12, 1, 1), TmnxSysMonSampleTime())
if mibBuilder.loadTexts: tmnxSysCpuMonSampleTime.setStatus('current')
tmnxSysCpuMonCpuIdle = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 1, 1, 12, 1, 2), TmnxSysMonUtilization()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxSysCpuMonCpuIdle.setStatus('current')
tmnxSysCpuMonBusyCoreUtil = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 1, 1, 12, 1, 3), TmnxSysMonUtilization()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxSysCpuMonBusyCoreUtil.setStatus('current')
tmnxSysCpuMonBusyGroupName = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 1, 1, 12, 1, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxSysCpuMonBusyGroupName.setStatus('current')
tmnxSysCpuMonBusyGroupUtil = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 1, 1, 12, 1, 5), TmnxSysMonUtilization()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxSysCpuMonBusyGroupUtil.setStatus('current')
sysTimeInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 1, 2))
stiDateAndTime = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 1, 2, 1), DateAndTime().subtype(subtypeSpec=ValueSizeConstraint(11, 11)).setFixedLength(11)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: stiDateAndTime.setStatus('current')
stiActiveZone = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 1, 2, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 5))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: stiActiveZone.setStatus('current')
stiHoursOffset = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 1, 2, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-11, 12))).setUnits('hours').setMaxAccess("readwrite")
if mibBuilder.loadTexts: stiHoursOffset.setStatus('current')
stiMinutesOffset = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 1, 2, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 59))).setUnits('minutes').setMaxAccess("readwrite")
if mibBuilder.loadTexts: stiMinutesOffset.setStatus('current')
stiZoneType = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 1, 2, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("system", 1), ("user", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: stiZoneType.setStatus('current')
stiSummerZoneTable = MibTable((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 1, 2, 6), )
if mibBuilder.loadTexts: stiSummerZoneTable.setStatus('current')
stiSummerZoneEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 1, 2, 6, 1), ).setIndexNames((1, "TIMETRA-SYSTEM-MIB", "stiSummerZoneName"))
if mibBuilder.loadTexts: stiSummerZoneEntry.setStatus('current')
stiSummerZoneName = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 1, 2, 6, 1, 1), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 5)))
if mibBuilder.loadTexts: stiSummerZoneName.setStatus('current')
stiSummerZoneRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 1, 2, 6, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: stiSummerZoneRowStatus.setStatus('current')
stiSummerZoneStartDate = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 1, 2, 6, 1, 3), DateAndTime().subtype(subtypeSpec=ValueSizeConstraint(8, 8)).setFixedLength(8)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: stiSummerZoneStartDate.setStatus('obsolete')
stiSummerZoneEndDate = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 1, 2, 6, 1, 4), DateAndTime().subtype(subtypeSpec=ValueSizeConstraint(8, 8)).setFixedLength(8)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: stiSummerZoneEndDate.setStatus('obsolete')
stiSummerZoneOffset = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 1, 2, 6, 1, 5), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 60)).clone(60)).setUnits('minutes').setMaxAccess("readcreate")
if mibBuilder.loadTexts: stiSummerZoneOffset.setStatus('current')
stiSummerZoneStartDay = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 1, 2, 6, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("sunday", 0), ("monday", 1), ("tuesday", 2), ("wednesday", 3), ("thursday", 4), ("friday", 5), ("saturday", 6))).clone('sunday')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: stiSummerZoneStartDay.setStatus('current')
stiSummerZoneStartWeek = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 1, 2, 6, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4))).clone(namedValues=NamedValues(("first", 0), ("second", 1), ("third", 2), ("fourth", 3), ("last", 4))).clone('first')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: stiSummerZoneStartWeek.setStatus('current')
stiSummerZoneStartMonth = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 1, 2, 6, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11))).clone(namedValues=NamedValues(("january", 0), ("february", 1), ("march", 2), ("april", 3), ("may", 4), ("june", 5), ("july", 6), ("august", 7), ("september", 8), ("october", 9), ("november", 10), ("december", 11))).clone('january')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: stiSummerZoneStartMonth.setStatus('current')
stiSummerZoneStartHour = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 1, 2, 6, 1, 9), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 23))).setUnits('hours').setMaxAccess("readcreate")
if mibBuilder.loadTexts: stiSummerZoneStartHour.setStatus('current')
stiSummerZoneStartMinute = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 1, 2, 6, 1, 10), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 59))).setUnits('minutes').setMaxAccess("readcreate")
if mibBuilder.loadTexts: stiSummerZoneStartMinute.setStatus('current')
stiSummerZoneEndDay = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 1, 2, 6, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("sunday", 0), ("monday", 1), ("tuesday", 2), ("wednesday", 3), ("thursday", 4), ("friday", 5), ("saturday", 6))).clone('sunday')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: stiSummerZoneEndDay.setStatus('current')
stiSummerZoneEndWeek = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 1, 2, 6, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4))).clone(namedValues=NamedValues(("first", 0), ("second", 1), ("third", 2), ("fourth", 3), ("last", 4))).clone('first')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: stiSummerZoneEndWeek.setStatus('current')
stiSummerZoneEndMonth = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 1, 2, 6, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11))).clone(namedValues=NamedValues(("january", 0), ("february", 1), ("march", 2), ("april", 3), ("may", 4), ("june", 5), ("july", 6), ("august", 7), ("september", 8), ("october", 9), ("november", 10), ("december", 11))).clone('january')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: stiSummerZoneEndMonth.setStatus('current')
stiSummerZoneEndHour = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 1, 2, 6, 1, 14), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 23))).setUnits('hours').setMaxAccess("readcreate")
if mibBuilder.loadTexts: stiSummerZoneEndHour.setStatus('current')
stiSummerZoneEndMinute = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 1, 2, 6, 1, 15), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 59))).setUnits('minutes').setMaxAccess("readcreate")
if mibBuilder.loadTexts: stiSummerZoneEndMinute.setStatus('current')
sysSntpInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 1, 3))
sntpState = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 1, 3, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("unicast", 1), ("broadcast", 2))).clone('unicast')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sntpState.setStatus('current')
sntpServerTable = MibTable((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 1, 3, 2), )
if mibBuilder.loadTexts: sntpServerTable.setStatus('current')
sntpServerEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 1, 3, 2, 1), ).setIndexNames((0, "TIMETRA-SYSTEM-MIB", "sntpServerAddress"))
if mibBuilder.loadTexts: sntpServerEntry.setStatus('current')
sntpServerAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 1, 3, 2, 1, 1), IpAddress())
if mibBuilder.loadTexts: sntpServerAddress.setStatus('current')
sntpServerRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 1, 3, 2, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: sntpServerRowStatus.setStatus('current')
sntpServerVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 1, 3, 2, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 3)).clone(3)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: sntpServerVersion.setStatus('current')
sntpServerPreference = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 1, 3, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("normal", 1), ("preferred", 2))).clone('normal')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: sntpServerPreference.setStatus('current')
sntpServerInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 1, 3, 2, 1, 5), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(64, 1024)).clone(64)).setUnits('seconds').setMaxAccess("readcreate")
if mibBuilder.loadTexts: sntpServerInterval.setStatus('current')
sntpAdminState = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 1, 3, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("noop", 1), ("inService", 2), ("outOfService", 3))).clone('outOfService')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sntpAdminState.setStatus('current')
sntpOperStatus = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 1, 3, 4), TmnxOperState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sntpOperStatus.setStatus('current')
sysSyncInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 1, 4))
ssiSaveConfig = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 1, 4, 15), TmnxActionType().clone('notApplicable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ssiSaveConfig.setStatus('current')
ssiSyncMode = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 1, 4, 16), TmnxSsiSyncMode().clone('none')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ssiSyncMode.setStatus('current')
ssiSyncForce = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 1, 4, 17), TmnxSsiSyncMode().clone('none')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ssiSyncForce.setStatus('current')
ssiSyncStatus = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 1, 4, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("unknown", 0), ("configOnly", 1), ("bootEnv", 2), ("configFail", 3), ("bootEnvFail", 4), ("configInProgress", 5), ("bootEnvInProgress", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ssiSyncStatus.setStatus('current')
ssiSyncConfigLastTime = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 1, 4, 19), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ssiSyncConfigLastTime.setStatus('current')
ssiSyncBootEnvLastTime = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 1, 4, 20), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ssiSyncBootEnvLastTime.setStatus('current')
ssiConfigMaxBackupRevisions = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 1, 4, 21), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 9)).clone(5)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ssiConfigMaxBackupRevisions.setStatus('current')
ssiSaveConfigResult = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 1, 4, 22), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("none", 1), ("inProgress", 2), ("success", 3), ("failed", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ssiSaveConfigResult.setStatus('current')
ssiSaveBof = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 1, 4, 23), TmnxActionType().clone('notApplicable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ssiSaveBof.setStatus('current')
ssiSaveBofResult = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 1, 4, 24), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("none", 1), ("inProgress", 2), ("success", 3), ("failed", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ssiSaveBofResult.setStatus('current')
ssiSaveConfigDest = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 1, 4, 25), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 180)).clone(hexValue="")).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ssiSaveConfigDest.setStatus('current')
ssiSaveConfigDetail = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 1, 4, 26), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ssiSaveConfigDetail.setStatus('current')
ssiRedFailoverTime = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 1, 4, 27), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ssiRedFailoverTime.setStatus('current')
ssiRedFailoverReason = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 1, 4, 28), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ssiRedFailoverReason.setStatus('current')
ssiSyncRollbackLastTime = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 1, 4, 29), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ssiSyncRollbackLastTime.setStatus('current')
ssiSyncRollbackMode = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 1, 4, 30), TmnxSsiSyncRollbackMode().clone('none')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ssiSyncRollbackMode.setStatus('current')
ssiSyncRollbackForce = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 1, 4, 31), TmnxSsiSyncRollbackMode().clone('none')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ssiSyncRollbackForce.setStatus('current')
ssiSyncRollbackStatus = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 1, 4, 32), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("unknown", 0), ("rollbackFail", 1), ("rollbackInProgress", 2), ("rollbackSuccess", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ssiSyncRollbackStatus.setStatus('current')
ssiSyncCertLastTime = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 1, 4, 33), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ssiSyncCertLastTime.setStatus('current')
ssiSyncCertMode = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 1, 4, 34), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ssiSyncCertMode.setStatus('current')
ssiSyncCertForce = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 1, 4, 35), TmnxActionType().clone('notApplicable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ssiSyncCertForce.setStatus('current')
ssiSyncCertStatus = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 1, 4, 36), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("unknown", 0), ("fail", 1), ("inProgress", 2), ("success", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ssiSyncCertStatus.setStatus('current')
sysBootInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 1, 5))
sbiConfigStatus = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 1, 5, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("configRead", 1), ("configOK", 2), ("defaultBooted", 3), ("bootConfigFailed", 4), ("bootRestoreFailed", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sbiConfigStatus.setStatus('current')
sbiPersistStatus = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 1, 5, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("persistOK", 1), ("noPersistFile", 2), ("persistMismatch", 3), ("persistIndexFailure", 4), ("persistDisabled", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sbiPersistStatus.setStatus('current')
sbiPersistIndex = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 1, 5, 3), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sbiPersistIndex.setStatus('current')
sbiSnmpdAdminStatus = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 1, 5, 4), TmnxAdminState().clone('inService')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sbiSnmpdAdminStatus.setStatus('current')
sbiSnmpdOperStatus = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 1, 5, 5), TmnxOperState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sbiSnmpdOperStatus.setStatus('current')
sbiSnmpdMaxPktSize = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 1, 5, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(484, 9216)).clone(1500)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sbiSnmpdMaxPktSize.setStatus('current')
sbiSnmpdPortNum = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 1, 5, 7), TTcpUdpPort().clone(161)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sbiSnmpdPortNum.setStatus('current')
sbiBootConfigOKScript = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 1, 5, 8), DisplayString().clone(hexValue="")).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sbiBootConfigOKScript.setStatus('current')
sbiConfigOKScriptStatus = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 1, 5, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("notRun", 0), ("success", 1), ("fail", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sbiConfigOKScriptStatus.setStatus('current')
sbiBootConfigFailScript = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 1, 5, 10), DisplayString().clone(hexValue="")).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sbiBootConfigFailScript.setStatus('current')
sbiConfigFailScriptStatus = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 1, 5, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("notRun", 0), ("success", 1), ("fail", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sbiConfigFailScriptStatus.setStatus('current')
sbiRedSwitchoverScript = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 1, 5, 12), DisplayString().clone(hexValue="")).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sbiRedSwitchoverScript.setStatus('current')
sbiRedSwitchoverScriptStatus = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 1, 5, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("notRun", 0), ("success", 1), ("fail", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sbiRedSwitchoverScriptStatus.setStatus('current')
sysRadiusInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 1, 6))
radiusOperStatus = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 1, 6, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("up", 1), ("down", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: radiusOperStatus.setStatus('current')
radiusServerTable = MibTable((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 1, 6, 2), )
if mibBuilder.loadTexts: radiusServerTable.setStatus('current')
radiusServerEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 1, 6, 2, 1), ).setIndexNames((0, "TIMETRA-SYSTEM-MIB", "radiusServerIndex"))
if mibBuilder.loadTexts: radiusServerEntry.setStatus('current')
radiusServerIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 1, 6, 2, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 5)))
if mibBuilder.loadTexts: radiusServerIndex.setStatus('current')
radiusServerAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 1, 6, 2, 1, 2), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: radiusServerAddress.setStatus('obsolete')
radiusServerOperStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 1, 6, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("up", 1), ("down", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: radiusServerOperStatus.setStatus('current')
radiusServerInetAddressType = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 1, 6, 2, 1, 4), InetAddressType().clone('unknown')).setMaxAccess("readonly")
if mibBuilder.loadTexts: radiusServerInetAddressType.setStatus('current')
radiusServerInetAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 1, 6, 2, 1, 5), InetAddress().subtype(subtypeSpec=ConstraintsUnion(ValueSizeConstraint(0, 0), ValueSizeConstraint(4, 4), ValueSizeConstraint(16, 16), ValueSizeConstraint(20, 20), )).clone(hexValue="")).setMaxAccess("readonly")
if mibBuilder.loadTexts: radiusServerInetAddress.setStatus('current')
tmnxSysNotifyObjs = MibIdentifier((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 1, 7))
tmnxNotifyRow = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 1, 7, 1), RowPointer()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: tmnxNotifyRow.setStatus('current')
tmnxNotifyRowAdminState = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 1, 7, 2), TmnxAdminState()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: tmnxNotifyRowAdminState.setStatus('current')
tmnxNotifyRowOperState = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 1, 7, 3), TmnxOperState()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: tmnxNotifyRowOperState.setStatus('current')
tmnxMemoryModule = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 1, 7, 4), TNamedItem()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: tmnxMemoryModule.setStatus('current')
tmnxModuleMallocSize = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 1, 7, 5), Unsigned32()).setUnits('bytes').setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: tmnxModuleMallocSize.setStatus('current')
tmnxDroppedTrapID = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 1, 7, 6), ObjectIdentifier()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: tmnxDroppedTrapID.setStatus('current')
tmnxTrapDroppedReasonCode = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 1, 7, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("frequencyExceeded", 1)))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: tmnxTrapDroppedReasonCode.setStatus('current')
tmnxTrapDroppedEntryID = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 1, 7, 8), ObjectIdentifier()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: tmnxTrapDroppedEntryID.setStatus('current')
tmnxNotifyEntryOID = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 1, 7, 9), ObjectIdentifier()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: tmnxNotifyEntryOID.setStatus('current')
tmnxSnmpdErrorMsg = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 1, 7, 10), DisplayString()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: tmnxSnmpdErrorMsg.setStatus('current')
tmnxPersistencyClient = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 1, 7, 11), DisplayString()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: tmnxPersistencyClient.setStatus('current')
tmnxPersistencyFileLocator = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 1, 7, 12), DisplayString()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: tmnxPersistencyFileLocator.setStatus('current')
tmnxPersistencyNotifyMsg = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 1, 7, 13), DisplayString()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: tmnxPersistencyNotifyMsg.setStatus('current')
tmnxPersistenceAffectedCpm = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 1, 7, 14), DisplayString()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: tmnxPersistenceAffectedCpm.setStatus('current')
tmnxSysTimeSetBy = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 1, 7, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("ntp", 1), ("sntp", 2), ("snmp", 3), ("manually", 4), ("rtc", 5)))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: tmnxSysTimeSetBy.setStatus('current')
tmnxFtpFailureMsg = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 1, 7, 16), DisplayString()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: tmnxFtpFailureMsg.setStatus('current')
tmnxFtpFailureDestAddressType = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 1, 7, 17), InetAddressType()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: tmnxFtpFailureDestAddressType.setStatus('current')
tmnxFtpFailureDestAddress = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 1, 7, 18), InetAddress().subtype(subtypeSpec=ConstraintsUnion(ValueSizeConstraint(4, 4), ValueSizeConstraint(16, 16), ValueSizeConstraint(20, 20), ))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: tmnxFtpFailureDestAddress.setStatus('current')
tmnxNotifyObjectName = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 1, 7, 19), DisplayString()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: tmnxNotifyObjectName.setStatus('current')
tmnxSyncFailureReason = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 1, 7, 20), DisplayString()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: tmnxSyncFailureReason.setStatus('current')
tmnxSysExecScript = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 1, 7, 21), DisplayString()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: tmnxSysExecScript.setStatus('current')
tmnxSysExecResult = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 1, 7, 22), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("none", 0), ("success", 1), ("fail", 2)))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: tmnxSysExecResult.setStatus('current')
tmnxSysRollbackFileType = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 1, 7, 23), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("rollback", 1), ("rescue", 2)))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: tmnxSysRollbackFileType.setStatus('current')
tmnxSysFileErrorType = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 1, 7, 24), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("read", 1), ("write", 2)))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: tmnxSysFileErrorType.setStatus('current')
sysLoginControlInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 1, 8))
slcFtpInboundMaxSessions = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 1, 8, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 5)).clone(3)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: slcFtpInboundMaxSessions.setStatus('current')
slcTelnetInboundMaxSessions = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 1, 8, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 15)).clone(5)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: slcTelnetInboundMaxSessions.setStatus('current')
slcTelnetOutboundMaxSessions = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 1, 8, 3), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 15)).clone(5)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: slcTelnetOutboundMaxSessions.setStatus('current')
slcPreLoginMessage = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 1, 8, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 900))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: slcPreLoginMessage.setStatus('current')
slcPreLoginMessageInclName = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 1, 8, 5), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: slcPreLoginMessageInclName.setStatus('current')
slcMessageOfTheDay = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 1, 8, 6), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 900))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: slcMessageOfTheDay.setStatus('current')
slcMessageOfTheDayType = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 1, 8, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("motd-type-none", 0), ("motd-type-url", 1), ("motd-type-text", 2))).clone('motd-type-none')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: slcMessageOfTheDayType.setStatus('current')
slcLoginBanner = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 1, 8, 8), TruthValue().clone('true')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: slcLoginBanner.setStatus('current')
slcLoginExponentialBackOff = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 1, 8, 9), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: slcLoginExponentialBackOff.setStatus('current')
slcTelnetGracefulShutdown = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 1, 8, 10), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: slcTelnetGracefulShutdown.setStatus('current')
slcSSHGracefulShutdown = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 1, 8, 11), TruthValue().clone('true')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: slcSSHGracefulShutdown.setStatus('current')
slcTelnetMinTTLValue = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 1, 8, 12), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(1, 255), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: slcTelnetMinTTLValue.setStatus('current')
slcSSHMinTTLValue = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 1, 8, 13), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(1, 255), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: slcSSHMinTTLValue.setStatus('current')
slcSSHInboundMaxSessions = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 1, 8, 14), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 15)).clone(5)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: slcSSHInboundMaxSessions.setStatus('current')
slcSSHOutboundMaxSessions = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 1, 8, 15), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 15)).clone(5)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: slcSSHOutboundMaxSessions.setStatus('current')
sysLACPInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 1, 9))
sysLACPSystemPriority = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 1, 9, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535)).clone(32768)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysLACPSystemPriority.setStatus('current')
sysTacplusInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 1, 10))
tacplusOperStatus = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 1, 10, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("up", 1), ("down", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tacplusOperStatus.setStatus('current')
tacplusServerTable = MibTable((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 1, 10, 2), )
if mibBuilder.loadTexts: tacplusServerTable.setStatus('current')
tacplusServerEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 1, 10, 2, 1), ).setIndexNames((0, "TIMETRA-SYSTEM-MIB", "tacplusServerIndex"))
if mibBuilder.loadTexts: tacplusServerEntry.setStatus('current')
tacplusServerIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 1, 10, 2, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 5)))
if mibBuilder.loadTexts: tacplusServerIndex.setStatus('current')
tacplusServerAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 1, 10, 2, 1, 2), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tacplusServerAddress.setStatus('obsolete')
tacplusServerOperStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 1, 10, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("up", 1), ("down", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tacplusServerOperStatus.setStatus('current')
tacPlusServerInetAddressType = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 1, 10, 2, 1, 4), InetAddressType().clone('unknown')).setMaxAccess("readonly")
if mibBuilder.loadTexts: tacPlusServerInetAddressType.setStatus('current')
tacPlusServerInetAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 1, 10, 2, 1, 5), InetAddress().subtype(subtypeSpec=ConstraintsUnion(ValueSizeConstraint(0, 0), ValueSizeConstraint(4, 4), ValueSizeConstraint(16, 16), ValueSizeConstraint(20, 20), )).clone(hexValue="")).setMaxAccess("readonly")
if mibBuilder.loadTexts: tacPlusServerInetAddress.setStatus('current')
stiDateAndTimeChanged = NotificationType((1, 3, 6, 1, 4, 1, 6527, 3, 1, 3, 1, 0, 1)).setObjects(("TIMETRA-SYSTEM-MIB", "stiDateAndTime"))
if mibBuilder.loadTexts: stiDateAndTimeChanged.setStatus('current')
ssiSaveConfigSucceeded = NotificationType((1, 3, 6, 1, 4, 1, 6527, 3, 1, 3, 1, 0, 2))
if mibBuilder.loadTexts: ssiSaveConfigSucceeded.setStatus('current')
ssiSaveConfigFailed = NotificationType((1, 3, 6, 1, 4, 1, 6527, 3, 1, 3, 1, 0, 3))
if mibBuilder.loadTexts: ssiSaveConfigFailed.setStatus('current')
sbiBootConfig = NotificationType((1, 3, 6, 1, 4, 1, 6527, 3, 1, 3, 1, 0, 4)).setObjects(("TIMETRA-SYSTEM-MIB", "sbiConfigStatus"), ("TIMETRA-SYSTEM-MIB", "sbiPersistStatus"), ("TIMETRA-SYSTEM-MIB", "sbiPersistIndex"))
if mibBuilder.loadTexts: sbiBootConfig.setStatus('current')
sbiBootSnmpd = NotificationType((1, 3, 6, 1, 4, 1, 6527, 3, 1, 3, 1, 0, 5)).setObjects(("TIMETRA-SYSTEM-MIB", "sbiPersistIndex"), ("TIMETRA-SYSTEM-MIB", "sbiSnmpdAdminStatus"), ("TIMETRA-SYSTEM-MIB", "sbiSnmpdOperStatus"))
if mibBuilder.loadTexts: sbiBootSnmpd.setStatus('current')
radiusServerOperStatusChange = NotificationType((1, 3, 6, 1, 4, 1, 6527, 3, 1, 3, 1, 0, 6)).setObjects(("TIMETRA-SYSTEM-MIB", "radiusServerAddress"), ("TIMETRA-SYSTEM-MIB", "radiusServerOperStatus"))
if mibBuilder.loadTexts: radiusServerOperStatusChange.setStatus('obsolete')
radiusOperStatusChange = NotificationType((1, 3, 6, 1, 4, 1, 6527, 3, 1, 3, 1, 0, 7)).setObjects(("TIMETRA-SYSTEM-MIB", "radiusOperStatus"))
if mibBuilder.loadTexts: radiusOperStatusChange.setStatus('current')
tmnxConfigModify = NotificationType((1, 3, 6, 1, 4, 1, 6527, 3, 1, 3, 1, 0, 8)).setObjects(("TIMETRA-SYSTEM-MIB", "tmnxNotifyRow"), ("TIMETRA-SYSTEM-MIB", "tmnxNotifyEntryOID"), ("TIMETRA-SYSTEM-MIB", "tmnxNotifyObjectName"))
if mibBuilder.loadTexts: tmnxConfigModify.setStatus('current')
tmnxConfigCreate = NotificationType((1, 3, 6, 1, 4, 1, 6527, 3, 1, 3, 1, 0, 9)).setObjects(("TIMETRA-SYSTEM-MIB", "tmnxNotifyRow"), ("TIMETRA-SYSTEM-MIB", "tmnxNotifyEntryOID"), ("TIMETRA-SYSTEM-MIB", "tmnxNotifyObjectName"))
if mibBuilder.loadTexts: tmnxConfigCreate.setStatus('current')
tmnxConfigDelete = NotificationType((1, 3, 6, 1, 4, 1, 6527, 3, 1, 3, 1, 0, 10)).setObjects(("TIMETRA-SYSTEM-MIB", "tmnxNotifyRow"), ("TIMETRA-SYSTEM-MIB", "tmnxNotifyEntryOID"), ("TIMETRA-SYSTEM-MIB", "tmnxNotifyObjectName"))
if mibBuilder.loadTexts: tmnxConfigDelete.setStatus('current')
tmnxStateChange = NotificationType((1, 3, 6, 1, 4, 1, 6527, 3, 1, 3, 1, 0, 11)).setObjects(("TIMETRA-SYSTEM-MIB", "tmnxNotifyRow"), ("TIMETRA-SYSTEM-MIB", "tmnxNotifyRowAdminState"), ("TIMETRA-SYSTEM-MIB", "tmnxNotifyRowOperState"), ("TIMETRA-SYSTEM-MIB", "tmnxNotifyEntryOID"), ("TIMETRA-SYSTEM-MIB", "tmnxNotifyObjectName"))
if mibBuilder.loadTexts: tmnxStateChange.setStatus('current')
tmnxModuleMallocFailed = NotificationType((1, 3, 6, 1, 4, 1, 6527, 3, 1, 3, 1, 0, 12)).setObjects(("TIMETRA-SYSTEM-MIB", "tmnxMemoryModule"), ("TIMETRA-SYSTEM-MIB", "tmnxModuleMallocSize"))
if mibBuilder.loadTexts: tmnxModuleMallocFailed.setStatus('current')
tmnxTrapDropped = NotificationType((1, 3, 6, 1, 4, 1, 6527, 3, 1, 3, 1, 0, 13)).setObjects(("TIMETRA-SYSTEM-MIB", "tmnxDroppedTrapID"), ("TIMETRA-SYSTEM-MIB", "tmnxTrapDroppedReasonCode"), ("TIMETRA-SYSTEM-MIB", "tmnxTrapDroppedEntryID"))
if mibBuilder.loadTexts: tmnxTrapDropped.setStatus('current')
ssiSyncConfigOK = NotificationType((1, 3, 6, 1, 4, 1, 6527, 3, 1, 3, 1, 0, 14))
if mibBuilder.loadTexts: ssiSyncConfigOK.setStatus('current')
ssiSyncConfigFailed = NotificationType((1, 3, 6, 1, 4, 1, 6527, 3, 1, 3, 1, 0, 15)).setObjects(("TIMETRA-SYSTEM-MIB", "tmnxSyncFailureReason"))
if mibBuilder.loadTexts: ssiSyncConfigFailed.setStatus('current')
ssiSyncBootEnvOK = NotificationType((1, 3, 6, 1, 4, 1, 6527, 3, 1, 3, 1, 0, 16))
if mibBuilder.loadTexts: ssiSyncBootEnvOK.setStatus('current')
ssiSyncBootEnvFailed = NotificationType((1, 3, 6, 1, 4, 1, 6527, 3, 1, 3, 1, 0, 17)).setObjects(("TIMETRA-SYSTEM-MIB", "tmnxSyncFailureReason"))
if mibBuilder.loadTexts: ssiSyncBootEnvFailed.setStatus('current')
sntpTimeDiffExceedsThreshold = NotificationType((1, 3, 6, 1, 4, 1, 6527, 3, 1, 3, 1, 0, 18)).setObjects(("TIMETRA-SYSTEM-MIB", "sntpAdminState"))
if mibBuilder.loadTexts: sntpTimeDiffExceedsThreshold.setStatus('current')
tacplusServerOperStatusChange = NotificationType((1, 3, 6, 1, 4, 1, 6527, 3, 1, 3, 1, 0, 19)).setObjects(("TIMETRA-SYSTEM-MIB", "tacplusServerAddress"), ("TIMETRA-SYSTEM-MIB", "tacplusServerOperStatus"))
if mibBuilder.loadTexts: tacplusServerOperStatusChange.setStatus('obsolete')
tacplusOperStatusChange = NotificationType((1, 3, 6, 1, 4, 1, 6527, 3, 1, 3, 1, 0, 20)).setObjects(("TIMETRA-SYSTEM-MIB", "tacplusOperStatus"))
if mibBuilder.loadTexts: tacplusOperStatusChange.setStatus('current')
tmnxSnmpdError = NotificationType((1, 3, 6, 1, 4, 1, 6527, 3, 1, 3, 1, 0, 21)).setObjects(("TIMETRA-SYSTEM-MIB", "tmnxSnmpdErrorMsg"))
if mibBuilder.loadTexts: tmnxSnmpdError.setStatus('current')
tmnxSsiMismatch = NotificationType((1, 3, 6, 1, 4, 1, 6527, 3, 1, 3, 1, 0, 22)).setObjects(("TIMETRA-SYSTEM-MIB", "ssiSyncMode"), ("TIMETRA-SYSTEM-MIB", "sbiPersist"))
if mibBuilder.loadTexts: tmnxSsiMismatch.setStatus('current')
tmnxSnmpdStateChange = NotificationType((1, 3, 6, 1, 4, 1, 6527, 3, 1, 3, 1, 0, 23)).setObjects(("TIMETRA-SYSTEM-MIB", "sbiSnmpdAdminStatus"), ("TIMETRA-SYSTEM-MIB", "sbiSnmpdOperStatus"))
if mibBuilder.loadTexts: tmnxSnmpdStateChange.setStatus('current')
ssiRedStandbySyncing = NotificationType((1, 3, 6, 1, 4, 1, 6527, 3, 1, 3, 1, 0, 24)).setObjects(("TIMETRA-CHASSIS-MIB", "tmnxChassisNotifyHwIndex"), ("TIMETRA-CHASSIS-MIB", "tmnxHwID"), ("TIMETRA-CHASSIS-MIB", "tmnxHwClass"))
if mibBuilder.loadTexts: ssiRedStandbySyncing.setStatus('current')
ssiRedStandbyReady = NotificationType((1, 3, 6, 1, 4, 1, 6527, 3, 1, 3, 1, 0, 25)).setObjects(("TIMETRA-CHASSIS-MIB", "tmnxChassisNotifyHwIndex"), ("TIMETRA-CHASSIS-MIB", "tmnxHwID"), ("TIMETRA-CHASSIS-MIB", "tmnxHwClass"))
if mibBuilder.loadTexts: ssiRedStandbyReady.setStatus('current')
ssiRedStandbySyncLost = NotificationType((1, 3, 6, 1, 4, 1, 6527, 3, 1, 3, 1, 0, 26)).setObjects(("TIMETRA-CHASSIS-MIB", "tmnxChassisNotifyHwIndex"), ("TIMETRA-CHASSIS-MIB", "tmnxHwID"), ("TIMETRA-CHASSIS-MIB", "tmnxHwClass"))
if mibBuilder.loadTexts: ssiRedStandbySyncLost.setStatus('current')
ssiRedSwitchover = NotificationType((1, 3, 6, 1, 4, 1, 6527, 3, 1, 3, 1, 0, 27)).setObjects(("TIMETRA-CHASSIS-MIB", "tmnxChassisNotifyHwIndex"), ("TIMETRA-CHASSIS-MIB", "tmnxHwID"), ("TIMETRA-CHASSIS-MIB", "tmnxHwClass"), ("TIMETRA-SYSTEM-MIB", "ssiRedFailoverTime"), ("TIMETRA-SYSTEM-MIB", "ssiRedFailoverReason"))
if mibBuilder.loadTexts: ssiRedSwitchover.setStatus('current')
ssiRedCpmActive = NotificationType((1, 3, 6, 1, 4, 1, 6527, 3, 1, 3, 1, 0, 28)).setObjects(("TIMETRA-CHASSIS-MIB", "tmnxChassisNotifyHwIndex"), ("TIMETRA-CHASSIS-MIB", "tmnxHwID"), ("TIMETRA-CHASSIS-MIB", "tmnxHwClass"))
if mibBuilder.loadTexts: ssiRedCpmActive.setStatus('current')
ssiRedSingleCpm = NotificationType((1, 3, 6, 1, 4, 1, 6527, 3, 1, 3, 1, 0, 29)).setObjects(("TIMETRA-CHASSIS-MIB", "tmnxChassisNotifyHwIndex"), ("TIMETRA-CHASSIS-MIB", "tmnxHwID"), ("TIMETRA-CHASSIS-MIB", "tmnxHwClass"))
if mibBuilder.loadTexts: ssiRedSingleCpm.setStatus('current')
persistencyClosedAlarmRaised = NotificationType((1, 3, 6, 1, 4, 1, 6527, 3, 1, 3, 1, 0, 30)).setObjects(("TIMETRA-SYSTEM-MIB", "tmnxPersistenceAffectedCpm"), ("TIMETRA-SYSTEM-MIB", "tmnxPersistencyClient"), ("TIMETRA-SYSTEM-MIB", "tmnxPersistencyFileLocator"), ("TIMETRA-SYSTEM-MIB", "tmnxPersistencyNotifyMsg"))
if mibBuilder.loadTexts: persistencyClosedAlarmRaised.setStatus('current')
persistencyClosedAlarmCleared = NotificationType((1, 3, 6, 1, 4, 1, 6527, 3, 1, 3, 1, 0, 31)).setObjects(("TIMETRA-SYSTEM-MIB", "tmnxPersistenceAffectedCpm"), ("TIMETRA-SYSTEM-MIB", "tmnxPersistencyClient"), ("TIMETRA-SYSTEM-MIB", "tmnxPersistencyFileLocator"), ("TIMETRA-SYSTEM-MIB", "tmnxPersistencyNotifyMsg"))
if mibBuilder.loadTexts: persistencyClosedAlarmCleared.setStatus('current')
tmnxSntpOperChange = NotificationType((1, 3, 6, 1, 4, 1, 6527, 3, 1, 3, 1, 0, 32)).setObjects(("TIMETRA-SYSTEM-MIB", "sntpOperStatus"))
if mibBuilder.loadTexts: tmnxSntpOperChange.setStatus('current')
tmnxSysTimeSet = NotificationType((1, 3, 6, 1, 4, 1, 6527, 3, 1, 3, 1, 0, 33)).setObjects(("TIMETRA-SYSTEM-MIB", "stiDateAndTime"), ("TIMETRA-SYSTEM-MIB", "tmnxSysTimeSetBy"))
if mibBuilder.loadTexts: tmnxSysTimeSet.setStatus('current')
tmnxFtpClientFailure = NotificationType((1, 3, 6, 1, 4, 1, 6527, 3, 1, 3, 1, 0, 34)).setObjects(("TIMETRA-SYSTEM-MIB", "tmnxFtpFailureMsg"), ("TIMETRA-SYSTEM-MIB", "tmnxFtpFailureDestAddressType"), ("TIMETRA-SYSTEM-MIB", "tmnxFtpFailureDestAddress"))
if mibBuilder.loadTexts: tmnxFtpClientFailure.setStatus('current')
tacplusInetSrvrOperStatusChange = NotificationType((1, 3, 6, 1, 4, 1, 6527, 3, 1, 3, 1, 0, 35)).setObjects(("TIMETRA-SYSTEM-MIB", "tacPlusServerInetAddressType"), ("TIMETRA-SYSTEM-MIB", "tacPlusServerInetAddress"), ("TIMETRA-SYSTEM-MIB", "tacplusServerOperStatus"))
if mibBuilder.loadTexts: tacplusInetSrvrOperStatusChange.setStatus('current')
radiusInetServerOperStatusChange = NotificationType((1, 3, 6, 1, 4, 1, 6527, 3, 1, 3, 1, 0, 36)).setObjects(("TIMETRA-SYSTEM-MIB", "radiusServerInetAddressType"), ("TIMETRA-SYSTEM-MIB", "radiusServerInetAddress"), ("TIMETRA-SYSTEM-MIB", "radiusServerOperStatus"))
if mibBuilder.loadTexts: radiusInetServerOperStatusChange.setStatus('current')
persistencyEventReport = NotificationType((1, 3, 6, 1, 4, 1, 6527, 3, 1, 3, 1, 0, 37)).setObjects(("TIMETRA-SYSTEM-MIB", "tmnxPersistencyNotifyMsg"))
if mibBuilder.loadTexts: persistencyEventReport.setStatus('current')
sbiBootConfigFailFileError = NotificationType((1, 3, 6, 1, 4, 1, 6527, 3, 1, 3, 1, 0, 38)).setObjects(("TIMETRA-SYSTEM-MIB", "sbiBootConfigFailScript"))
if mibBuilder.loadTexts: sbiBootConfigFailFileError.setStatus('current')
sbiBootConfigOKFileError = NotificationType((1, 3, 6, 1, 4, 1, 6527, 3, 1, 3, 1, 0, 39)).setObjects(("TIMETRA-SYSTEM-MIB", "sbiBootConfigOKScript"))
if mibBuilder.loadTexts: sbiBootConfigOKFileError.setStatus('current')
sbiBootLiConfig = NotificationType((1, 3, 6, 1, 4, 1, 6527, 3, 1, 3, 1, 0, 40)).setObjects(("TIMETRA-SYSTEM-MIB", "sliConfigStatus"), ("TIMETRA-SYSTEM-MIB", "sbiLiSeparate"), ("TIMETRA-SYSTEM-MIB", "sbiLiLocalSave"))
if mibBuilder.loadTexts: sbiBootLiConfig.setStatus('current')
persistenceRestoreProblem = NotificationType((1, 3, 6, 1, 4, 1, 6527, 3, 1, 3, 1, 0, 41)).setObjects(("TIMETRA-SYSTEM-MIB", "tmnxPersistencyClient"), ("TIMETRA-SYSTEM-MIB", "tmnxPersistencyNotifyMsg"))
if mibBuilder.loadTexts: persistenceRestoreProblem.setStatus('current')
tmnxSysRollbackStarted = NotificationType((1, 3, 6, 1, 4, 1, 6527, 3, 1, 3, 1, 0, 42)).setObjects(("TIMETRA-SYSTEM-MIB", "tmnxSysRollbackIndex"), ("TIMETRA-SYSTEM-MIB", "tmnxSysRollbackFileType"), ("TIMETRA-LOG-MIB", "tmnxLogExecRollbackOpIndex"))
if mibBuilder.loadTexts: tmnxSysRollbackStarted.setStatus('current')
tmnxSysRollbackStatusChange = NotificationType((1, 3, 6, 1, 4, 1, 6527, 3, 1, 3, 1, 0, 43)).setObjects(("TIMETRA-SYSTEM-MIB", "tmnxSysRollbackIndex"), ("TIMETRA-SYSTEM-MIB", "tmnxSysRollbackResult"), ("TIMETRA-SYSTEM-MIB", "tmnxSysRollbackFileType"), ("TIMETRA-LOG-MIB", "tmnxLogExecRollbackOpIndex"))
if mibBuilder.loadTexts: tmnxSysRollbackStatusChange.setStatus('current')
tmnxSysRollbackSaveStatusChange = NotificationType((1, 3, 6, 1, 4, 1, 6527, 3, 1, 3, 1, 0, 44)).setObjects(("TIMETRA-SYSTEM-MIB", "tmnxSysRollbackSaveResult"), ("TIMETRA-SYSTEM-MIB", "tmnxSysRollbackFileType"))
if mibBuilder.loadTexts: tmnxSysRollbackSaveStatusChange.setStatus('current')
tmnxSysRollbackFileDeleteStatus = NotificationType((1, 3, 6, 1, 4, 1, 6527, 3, 1, 3, 1, 0, 45)).setObjects(("TIMETRA-SYSTEM-MIB", "tmnxSysRollbackIndex"), ("TIMETRA-SYSTEM-MIB", "tmnxSysRollbackFileDeleteResult"), ("TIMETRA-SYSTEM-MIB", "tmnxSysRollbackFileType"))
if mibBuilder.loadTexts: tmnxSysRollbackFileDeleteStatus.setStatus('current')
ssiSyncRollbackOK = NotificationType((1, 3, 6, 1, 4, 1, 6527, 3, 1, 3, 1, 0, 46))
if mibBuilder.loadTexts: ssiSyncRollbackOK.setStatus('current')
ssiSyncRollbackFailed = NotificationType((1, 3, 6, 1, 4, 1, 6527, 3, 1, 3, 1, 0, 47)).setObjects(("TIMETRA-SYSTEM-MIB", "tmnxSyncFailureReason"))
if mibBuilder.loadTexts: ssiSyncRollbackFailed.setStatus('current')
ssiSyncCertOK = NotificationType((1, 3, 6, 1, 4, 1, 6527, 3, 1, 3, 1, 0, 48))
if mibBuilder.loadTexts: ssiSyncCertOK.setStatus('current')
ssiSyncCertFailed = NotificationType((1, 3, 6, 1, 4, 1, 6527, 3, 1, 3, 1, 0, 49)).setObjects(("TIMETRA-SYSTEM-MIB", "tmnxSyncFailureReason"))
if mibBuilder.loadTexts: ssiSyncCertFailed.setStatus('current')
persistencyFileSysThresRaised = NotificationType((1, 3, 6, 1, 4, 1, 6527, 3, 1, 3, 1, 0, 50)).setObjects(("TIMETRA-SYSTEM-MIB", "tmnxPersistenceAffectedCpm"), ("TIMETRA-SYSTEM-MIB", "tmnxPersistencyClient"), ("TIMETRA-SYSTEM-MIB", "tmnxPersistencyFileLocator"), ("TIMETRA-SYSTEM-MIB", "tmnxPersistencyNotifyMsg"))
if mibBuilder.loadTexts: persistencyFileSysThresRaised.setStatus('current')
persistencyFileSysThresCleared = NotificationType((1, 3, 6, 1, 4, 1, 6527, 3, 1, 3, 1, 0, 51)).setObjects(("TIMETRA-SYSTEM-MIB", "tmnxPersistenceAffectedCpm"), ("TIMETRA-SYSTEM-MIB", "tmnxPersistencyClient"), ("TIMETRA-SYSTEM-MIB", "tmnxPersistencyFileLocator"), ("TIMETRA-SYSTEM-MIB", "tmnxPersistencyNotifyMsg"))
if mibBuilder.loadTexts: persistencyFileSysThresCleared.setStatus('current')
tmnxSysExecStarted = NotificationType((1, 3, 6, 1, 4, 1, 6527, 3, 1, 3, 1, 0, 52)).setObjects(("TIMETRA-SYSTEM-MIB", "tmnxSysExecScript"), ("TIMETRA-LOG-MIB", "tmnxLogExecRollbackOpIndex"))
if mibBuilder.loadTexts: tmnxSysExecStarted.setStatus('current')
tmnxSysExecFinished = NotificationType((1, 3, 6, 1, 4, 1, 6527, 3, 1, 3, 1, 0, 53)).setObjects(("TIMETRA-SYSTEM-MIB", "tmnxSysExecScript"), ("TIMETRA-SYSTEM-MIB", "tmnxSysExecResult"), ("TIMETRA-LOG-MIB", "tmnxLogExecRollbackOpIndex"))
if mibBuilder.loadTexts: tmnxSysExecFinished.setStatus('current')
tmnxSysRollbackSaveStarted = NotificationType((1, 3, 6, 1, 4, 1, 6527, 3, 1, 3, 1, 0, 54)).setObjects(("TIMETRA-SYSTEM-MIB", "tmnxSysRollbackFileType"))
if mibBuilder.loadTexts: tmnxSysRollbackSaveStarted.setStatus('current')
tmnxSysRollbackDeleteStarted = NotificationType((1, 3, 6, 1, 4, 1, 6527, 3, 1, 3, 1, 0, 55)).setObjects(("TIMETRA-SYSTEM-MIB", "tmnxSysRollbackIndex"), ("TIMETRA-SYSTEM-MIB", "tmnxSysRollbackFileType"))
if mibBuilder.loadTexts: tmnxSysRollbackDeleteStarted.setStatus('current')
tmnxSysNvsysFileError = NotificationType((1, 3, 6, 1, 4, 1, 6527, 3, 1, 3, 1, 0, 56)).setObjects(("TIMETRA-SYSTEM-MIB", "tmnxSysFileErrorType"))
if mibBuilder.loadTexts: tmnxSysNvsysFileError.setStatus('current')
sysBofInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 1, 11))
sbiActiveIpAddr = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 1, 11, 1), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sbiActiveIpAddr.setStatus('current')
sbiActiveIpMask = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 1, 11, 2), IpAddressPrefixLength()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sbiActiveIpMask.setStatus('current')
sbiStandbyIpAddr = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 1, 11, 3), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sbiStandbyIpAddr.setStatus('current')
sbiStandbyIpMask = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 1, 11, 4), IpAddressPrefixLength()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sbiStandbyIpMask.setStatus('current')
sbiPrimaryImage = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 1, 11, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 180)).clone(hexValue="")).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sbiPrimaryImage.setStatus('current')
sbiSecondaryImage = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 1, 11, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 180)).clone(hexValue="")).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sbiSecondaryImage.setStatus('current')
sbiTertiaryImage = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 1, 11, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 180)).clone(hexValue="")).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sbiTertiaryImage.setStatus('current')
sbiPrimaryConfigFile = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 1, 11, 8), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 180)).clone(hexValue="")).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sbiPrimaryConfigFile.setStatus('current')
sbiSecondaryConfigFile = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 1, 11, 9), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 180)).clone(hexValue="")).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sbiSecondaryConfigFile.setStatus('current')
sbiTertiaryConfigFile = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 1, 11, 10), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 180)).clone(hexValue="")).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sbiTertiaryConfigFile.setStatus('current')
sbiPersist = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 1, 11, 11), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sbiPersist.setStatus('current')
sbiConsoleSpeed = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 1, 11, 12), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(9600, 9600), ValueRangeConstraint(19200, 19200), ValueRangeConstraint(38400, 38400), ValueRangeConstraint(57600, 57600), ValueRangeConstraint(115200, 115200), )).clone(115200)).setUnits('bps').setMaxAccess("readwrite")
if mibBuilder.loadTexts: sbiConsoleSpeed.setStatus('current')
sbiAutoNegotiate = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 1, 11, 13), TruthValue().clone('true')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sbiAutoNegotiate.setStatus('current')
sbiSpeed = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 1, 11, 14), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(10, 10), ValueRangeConstraint(100, 100), )).clone(100)).setUnits('Mbps').setMaxAccess("readwrite")
if mibBuilder.loadTexts: sbiSpeed.setStatus('current')
sbiDuplex = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 1, 11, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("full", 1), ("half", 2))).clone('full')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sbiDuplex.setStatus('current')
sbiPrimaryDns = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 1, 11, 16), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sbiPrimaryDns.setStatus('current')
sbiSecondaryDns = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 1, 11, 17), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sbiSecondaryDns.setStatus('current')
sbiTertiaryDns = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 1, 11, 18), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sbiTertiaryDns.setStatus('current')
sbiDnsDomain = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 1, 11, 19), DisplayString().subtype(subtypeSpec=ConstraintsUnion(ValueSizeConstraint(0, 0), ValueSizeConstraint(1, 178), )).clone(hexValue="")).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sbiDnsDomain.setStatus('current')
sbiWait = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 1, 11, 20), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 10)).clone(3)).setUnits('seconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: sbiWait.setStatus('current')
sbiStaticRouteTable = MibTable((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 1, 11, 21), )
if mibBuilder.loadTexts: sbiStaticRouteTable.setStatus('current')
sbiStaticRouteEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 1, 11, 21, 1), ).setIndexNames((0, "TIMETRA-SYSTEM-MIB", "sbiStaticRouteDest"), (0, "TIMETRA-SYSTEM-MIB", "sbiStaticRouteMask"))
if mibBuilder.loadTexts: sbiStaticRouteEntry.setStatus('current')
sbiStaticRouteDest = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 1, 11, 21, 1, 1), IpAddress())
if mibBuilder.loadTexts: sbiStaticRouteDest.setStatus('current')
sbiStaticRouteMask = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 1, 11, 21, 1, 2), IpAddressPrefixLength())
if mibBuilder.loadTexts: sbiStaticRouteMask.setStatus('current')
sbiStaticRouteNextHop = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 1, 11, 21, 1, 3), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: sbiStaticRouteNextHop.setStatus('current')
sbiStaticRouteRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 1, 11, 21, 1, 4), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: sbiStaticRouteRowStatus.setStatus('current')
sbiActiveIPv6Addr = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 1, 11, 22), InetAddressIPv6().clone(hexValue="00000000000000000000000000000000")).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sbiActiveIPv6Addr.setStatus('current')
sbiActiveIPv6PfxLen = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 1, 11, 23), InetAddressPrefixLength().subtype(subtypeSpec=ValueRangeConstraint(0, 128))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sbiActiveIPv6PfxLen.setStatus('current')
sbiStandbyIPv6Addr = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 1, 11, 24), InetAddressIPv6().clone(hexValue="00000000000000000000000000000000")).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sbiStandbyIPv6Addr.setStatus('current')
sbiStandbyIPv6PfxLen = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 1, 11, 25), InetAddressPrefixLength().subtype(subtypeSpec=ValueRangeConstraint(0, 128))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sbiStandbyIPv6PfxLen.setStatus('current')
sbiPrimaryDnsIPv6Addr = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 1, 11, 26), InetAddressIPv6().clone(hexValue="00000000000000000000000000000000")).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sbiPrimaryDnsIPv6Addr.setStatus('current')
sbiSecondaryDnsIPv6Addr = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 1, 11, 27), InetAddressIPv6().clone(hexValue="00000000000000000000000000000000")).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sbiSecondaryDnsIPv6Addr.setStatus('current')
sbiTertiaryDnsIPv6Addr = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 1, 11, 28), InetAddressIPv6().clone(hexValue="00000000000000000000000000000000")).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sbiTertiaryDnsIPv6Addr.setStatus('current')
sbiStaticRouteIPv6Table = MibTable((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 1, 11, 29), )
if mibBuilder.loadTexts: sbiStaticRouteIPv6Table.setStatus('current')
sbiStaticRouteIPv6Entry = MibTableRow((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 1, 11, 29, 1), ).setIndexNames((0, "TIMETRA-SYSTEM-MIB", "sbiStaticRouteIPv6Dest"), (0, "TIMETRA-SYSTEM-MIB", "sbiStaticRouteIPv6PfxLen"))
if mibBuilder.loadTexts: sbiStaticRouteIPv6Entry.setStatus('current')
sbiStaticRouteIPv6Dest = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 1, 11, 29, 1, 1), InetAddressIPv6())
if mibBuilder.loadTexts: sbiStaticRouteIPv6Dest.setStatus('current')
sbiStaticRouteIPv6PfxLen = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 1, 11, 29, 1, 2), InetAddressPrefixLength().subtype(subtypeSpec=ValueRangeConstraint(0, 128)))
if mibBuilder.loadTexts: sbiStaticRouteIPv6PfxLen.setStatus('current')
sbiStaticRouteIPv6NextHop = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 1, 11, 29, 1, 3), InetAddressIPv6()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: sbiStaticRouteIPv6NextHop.setStatus('current')
sbiStaticRouteIPv6RowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 1, 11, 29, 1, 4), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: sbiStaticRouteIPv6RowStatus.setStatus('current')
sbiLiSeparate = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 1, 11, 30), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sbiLiSeparate.setStatus('current')
sbiLiLocalSave = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 1, 11, 31), TruthValue().clone('true')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sbiLiLocalSave.setStatus('current')
sysPersistenceInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 1, 12))
sysPersistenceDhcpL2Info = MibIdentifier((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 1, 12, 1))
sysPersistenceDhcpL3Info = MibIdentifier((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 1, 12, 2))
sysPersistenceSubMgmtInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 1, 12, 3))
sysPersistenceDhcpSrvInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 1, 12, 4))
sysPersistenceNatInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 1, 12, 5))
sysPersistenceAAInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 1, 12, 6))
spiDhcpL2PersistenceFileLocation = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 1, 12, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: spiDhcpL2PersistenceFileLocation.setStatus('obsolete')
spiDhcpL2PersistenceDescription = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 1, 12, 1, 2), TItemDescription()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: spiDhcpL2PersistenceDescription.setStatus('obsolete')
spiDhcpL3PersistenceFileLocation = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 1, 12, 2, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: spiDhcpL3PersistenceFileLocation.setStatus('obsolete')
spiDhcpL3PersistenceDescription = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 1, 12, 2, 2), TItemDescription()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: spiDhcpL3PersistenceDescription.setStatus('obsolete')
spiSubMgmtPersistenceFileLocation = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 1, 12, 3, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: spiSubMgmtPersistenceFileLocation.setStatus('current')
spiSubMgmtPersistenceDescription = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 1, 12, 3, 2), TItemDescription()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: spiSubMgmtPersistenceDescription.setStatus('current')
spiDhcpSrvPersistenceFileLoc = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 1, 12, 4, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: spiDhcpSrvPersistenceFileLoc.setStatus('current')
spiDhcpSrvPersistenceDescr = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 1, 12, 4, 2), TItemDescription()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: spiDhcpSrvPersistenceDescr.setStatus('current')
spiNatFwdPersistenceFileLoc = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 1, 12, 5, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: spiNatFwdPersistenceFileLoc.setStatus('current')
spiNatFwdPersistenceDescr = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 1, 12, 5, 2), TItemDescription()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: spiNatFwdPersistenceDescr.setStatus('current')
spiAAPersistenceFileLoc = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 1, 12, 6, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: spiAAPersistenceFileLoc.setStatus('current')
spiAAPersistenceDescr = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 1, 12, 6, 2), TItemDescription()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: spiAAPersistenceDescr.setStatus('current')
sysLiInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 1, 13))
sliConfigStatus = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 1, 13, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("notRun", 0), ("success", 1), ("fail", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sliConfigStatus.setStatus('current')
sliSaveConfig = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 1, 13, 2), TmnxActionType().clone('notApplicable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sliSaveConfig.setStatus('current')
sliSaveConfigResult = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 1, 13, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("none", 1), ("inProgress", 2), ("success", 3), ("failed", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sliSaveConfigResult.setStatus('current')
sliConfigLastModified = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 1, 13, 4), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sliConfigLastModified.setStatus('current')
sliConfigLastSaved = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 1, 13, 5), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sliConfigLastSaved.setStatus('current')
sliFilterLock = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 1, 13, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("locked", 0), ("unlockedForLiUsers", 1), ("unlockedForAll", 2))).clone('locked')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sliFilterLock.setStatus('current')
sysDNSInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 1, 14))
sysDNSInfoLastChanged = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 1, 14, 1), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysDNSInfoLastChanged.setStatus('current')
sysDNSAddressResolvePref = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 1, 14, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("ipv4Only", 1), ("ipv6First", 2))).clone('ipv4Only')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysDNSAddressResolvePref.setStatus('current')
sysIcmpVSInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 1, 15))
sysIcmpVSEnhancement = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 1, 15, 1), TmnxEnabledDisabled().clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysIcmpVSEnhancement.setStatus('current')
sysEthInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 1, 16))
sysNewQinqUntaggedSap = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 1, 16, 1), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysNewQinqUntaggedSap.setStatus('current')
tmnxSysRollbackInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 1, 17))
tmnxSysRollbackIndex = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 1, 17, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 199))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tmnxSysRollbackIndex.setStatus('current')
tmnxSysRollbackStart = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 1, 17, 2), TmnxActionType().clone('notApplicable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tmnxSysRollbackStart.setStatus('current')
tmnxSysRollbackResult = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 1, 17, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("none", 1), ("inProgress", 2), ("success", 3), ("failed", 4), ("interrupted", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxSysRollbackResult.setStatus('current')
tmnxSysRollbackSave = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 1, 17, 4), TmnxActionType().clone('notApplicable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tmnxSysRollbackSave.setStatus('current')
tmnxSysRollbackSaveResult = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 1, 17, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("none", 1), ("inProgress", 2), ("success", 3), ("failed", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxSysRollbackSaveResult.setStatus('current')
tmnxSysRollbackLocation = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 1, 17, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 180)).clone(hexValue="")).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tmnxSysRollbackLocation.setStatus('current')
tmnxSysRollbackRevertIndex = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 1, 17, 7), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 199))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxSysRollbackRevertIndex.setStatus('current')
tmnxSysRollbackRevertEndTime = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 1, 17, 8), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxSysRollbackRevertEndTime.setStatus('current')
tmnxSysRollbackSavedTime = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 1, 17, 9), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxSysRollbackSavedTime.setStatus('current')
tmnxSysRollbackRevertStartTime = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 1, 17, 10), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxSysRollbackRevertStartTime.setStatus('current')
tmnxSysRollbackRevertUserName = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 1, 17, 11), TNamedItemOrEmpty().subtype(subtypeSpec=ValueSizeConstraint(0, 16)).clone(hexValue="")).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxSysRollbackRevertUserName.setStatus('current')
tmnxSysRollbackRevertFilename = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 1, 17, 12), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 180)).clone(hexValue="")).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxSysRollbackRevertFilename.setStatus('current')
tmnxSysRollbackSaveComment = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 1, 17, 13), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255)).clone(hexValue="")).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tmnxSysRollbackSaveComment.setStatus('current')
tmnxSysRollbackFileDelete = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 1, 17, 14), TmnxActionType().clone('notApplicable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tmnxSysRollbackFileDelete.setStatus('current')
tmnxSysRollbackFileDeleteResult = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 1, 17, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("none", 1), ("inProgress", 2), ("success", 3), ("failed", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxSysRollbackFileDeleteResult.setStatus('current')
tmnxSysRollbackAbortRevert = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 1, 17, 16), TmnxActionType().clone('notApplicable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tmnxSysRollbackAbortRevert.setStatus('current')
tmnxSysRollbackRescueLocation = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 1, 17, 17), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 180)).clone(hexValue="")).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tmnxSysRollbackRescueLocation.setStatus('current')
tmnxSysRollbackRescueRevert = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 1, 17, 18), TmnxActionType().clone('notApplicable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tmnxSysRollbackRescueRevert.setStatus('current')
tmnxSysRollbackRescueSave = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 1, 17, 19), TmnxActionType().clone('notApplicable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tmnxSysRollbackRescueSave.setStatus('current')
tmnxSysRollbackRescueDelete = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 1, 17, 20), TmnxActionType().clone('notApplicable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tmnxSysRollbackRescueDelete.setStatus('current')
tmnxSysRollbackRescueSaveRes = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 1, 17, 21), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("none", 1), ("inProgress", 2), ("success", 3), ("failed", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxSysRollbackRescueSaveRes.setStatus('current')
tmnxSysRollbackRescueRevertRes = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 1, 17, 22), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("none", 1), ("inProgress", 2), ("success", 3), ("failed", 4), ("interrupted", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxSysRollbackRescueRevertRes.setStatus('current')
tmnxSysRollbackRescueDeleteRes = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 1, 17, 23), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("none", 1), ("inProgress", 2), ("success", 3), ("failed", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxSysRollbackRescueDeleteRes.setStatus('current')
tmnxSysRollbackRescueSavedTime = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 1, 17, 24), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxSysRollbackRescueSavedTime.setStatus('current')
tmnxSysRollbackRescueRevStTime = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 1, 17, 25), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxSysRollbackRescueRevStTime.setStatus('current')
tmnxSysRollbackRescueRevEdTime = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 1, 17, 26), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxSysRollbackRescueRevEdTime.setStatus('current')
tmnxSysRollbackRescueRevUser = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 1, 17, 27), TNamedItemOrEmpty().subtype(subtypeSpec=ValueSizeConstraint(0, 16)).clone(hexValue="")).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxSysRollbackRescueRevUser.setStatus('current')
tmnxSysRollbackRescueSaveComment = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 1, 17, 28), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255)).clone(hexValue="")).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tmnxSysRollbackRescueSaveComment.setStatus('current')
tmnxSysRollbackRescueAbortRevert = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 1, 17, 29), TmnxActionType().clone('notApplicable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tmnxSysRollbackRescueAbortRevert.setStatus('current')
tmnxSysRollbackRescueFileExists = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 1, 17, 30), TruthValue().clone('false')).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxSysRollbackRescueFileExists.setStatus('current')
tmnxSysRollbackMaxLocalFiles = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 1, 17, 31), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 50)).clone(10)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tmnxSysRollbackMaxLocalFiles.setStatus('current')
tmnxSysRollbackMaxRemoteFiles = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 1, 17, 32), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 200)).clone(10)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tmnxSysRollbackMaxRemoteFiles.setStatus('current')
tmnxSysRollbackTableLastChanged = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 1, 18), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxSysRollbackTableLastChanged.setStatus('current')
tmnxSysRollbackFileTable = MibTable((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 1, 19), )
if mibBuilder.loadTexts: tmnxSysRollbackFileTable.setStatus('current')
tmnxSysRollbackFileEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 1, 19, 1), ).setIndexNames((0, "TIMETRA-SYSTEM-MIB", "tmnxSysRollbackFileIndex"))
if mibBuilder.loadTexts: tmnxSysRollbackFileEntry.setStatus('current')
tmnxSysRollbackFileIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 1, 19, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 199)))
if mibBuilder.loadTexts: tmnxSysRollbackFileIndex.setStatus('current')
tmnxSysRollbackFileCreationTime = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 1, 19, 1, 2), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxSysRollbackFileCreationTime.setStatus('current')
tmnxSysRollbackFileComment = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 1, 19, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxSysRollbackFileComment.setStatus('current')
tmnxSysRollbackFileUserName = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 1, 19, 1, 4), TNamedItem().subtype(subtypeSpec=ValueSizeConstraint(1, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxSysRollbackFileUserName.setStatus('current')
tmnxSysRollbackFileVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 1, 19, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxSysRollbackFileVersion.setStatus('current')
sysBootedBofInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 1, 20))
sbbiLiSeparate = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 1, 20, 1), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sbbiLiSeparate.setStatus('current')
sbbiLiLocalSave = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 1, 20, 2), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sbbiLiLocalSave.setStatus('current')
tmnxSysCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 1, 1))
tmnxSysGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 1, 2))
tmnxSysV4v0Compliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 1, 1, 4)).setObjects(("TIMETRA-SYSTEM-MIB", "tmnxSysGeneralV3v0Group"), ("TIMETRA-SYSTEM-MIB", "tmnxSysTimeV4v0Group"), ("TIMETRA-SYSTEM-MIB", "tmnxSysConfigV3v0Group"), ("TIMETRA-SYSTEM-MIB", "tmnxSysRadiusServerGroup"), ("TIMETRA-SYSTEM-MIB", "tmnxSysTacPlusServerGroup"), ("TIMETRA-SYSTEM-MIB", "tmnxSysBofGroup"), ("TIMETRA-SYSTEM-MIB", "tmnxSysNotificationV4v0Group"), ("TIMETRA-SYSTEM-MIB", "tmnxPersistenceV4v0Group"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxSysV4v0Compliance = tmnxSysV4v0Compliance.setStatus('obsolete')
tmnxSysV5v0Compliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 1, 1, 5)).setObjects(("TIMETRA-SYSTEM-MIB", "tmnxSysGeneralV3v0Group"), ("TIMETRA-SYSTEM-MIB", "tmnxSysTimeV4v0Group"), ("TIMETRA-SYSTEM-MIB", "tmnxSysConfigV3v0Group"), ("TIMETRA-SYSTEM-MIB", "tmnxSysRadiusServerV5v0Group"), ("TIMETRA-SYSTEM-MIB", "tmnxSysTacPlusServerV5v0Group"), ("TIMETRA-SYSTEM-MIB", "tmnxSysBofGroup"), ("TIMETRA-SYSTEM-MIB", "tmnxSysNotificationV5v0Group"), ("TIMETRA-SYSTEM-MIB", "tmnxPersistenceV5v0Group"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxSysV5v0Compliance = tmnxSysV5v0Compliance.setStatus('obsolete')
tmnxSysV6v0Compliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 1, 1, 6)).setObjects(("TIMETRA-SYSTEM-MIB", "tmnxSysGeneralV3v0Group"), ("TIMETRA-SYSTEM-MIB", "tmnxSysTimeV4v0Group"), ("TIMETRA-SYSTEM-MIB", "tmnxSysConfigV3v0Group"), ("TIMETRA-SYSTEM-MIB", "tmnxSysRadiusServerV5v0Group"), ("TIMETRA-SYSTEM-MIB", "tmnxSysTacPlusServerV5v0Group"), ("TIMETRA-SYSTEM-MIB", "tmnxSysBofV6v0Group"), ("TIMETRA-SYSTEM-MIB", "tmnxSysNotificationV6v0Group"), ("TIMETRA-SYSTEM-MIB", "tmnxPersistenceV6v0Group"), ("TIMETRA-SYSTEM-MIB", "tmnxSysIpv6MgmtItfV6v0Group"), ("TIMETRA-SYSTEM-MIB", "tmnxSysLiV6v0Group"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxSysV6v0Compliance = tmnxSysV6v0Compliance.setStatus('obsolete')
tmnxSysV7v0Compliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 1, 1, 7)).setObjects(("TIMETRA-SYSTEM-MIB", "tmnxSysGeneralV3v0Group"), ("TIMETRA-SYSTEM-MIB", "tmnxSysGeneralV7v0Group"), ("TIMETRA-SYSTEM-MIB", "tmnxSysTimeV4v0Group"), ("TIMETRA-SYSTEM-MIB", "tmnxSysConfigV3v0Group"), ("TIMETRA-SYSTEM-MIB", "tmnxSysRadiusServerV5v0Group"), ("TIMETRA-SYSTEM-MIB", "tmnxSysTacPlusServerV5v0Group"), ("TIMETRA-SYSTEM-MIB", "tmnxSysBofV6v0Group"), ("TIMETRA-SYSTEM-MIB", "tmnxSysNotificationV6v0Group"), ("TIMETRA-SYSTEM-MIB", "tmnxPersistenceV6v0Group"), ("TIMETRA-SYSTEM-MIB", "tmnxSysIpv6MgmtItfV6v0Group"), ("TIMETRA-SYSTEM-MIB", "tmnxSysLiV6v0Group"), ("TIMETRA-SYSTEM-MIB", "tmnxSystemCpuMonitorGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxSysV7v0Compliance = tmnxSysV7v0Compliance.setStatus('obsolete')
tmnxSysV8v0Compliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 1, 1, 8)).setObjects(("TIMETRA-SYSTEM-MIB", "tmnxSysGeneralV3v0Group"), ("TIMETRA-SYSTEM-MIB", "tmnxSysGeneralV7v0Group"), ("TIMETRA-SYSTEM-MIB", "tmnxSysTimeV4v0Group"), ("TIMETRA-SYSTEM-MIB", "tmnxSysConfigV8v0Group"), ("TIMETRA-SYSTEM-MIB", "tmnxSysLoginControlV8v0Group"), ("TIMETRA-SYSTEM-MIB", "tmnxSysRadiusServerV5v0Group"), ("TIMETRA-SYSTEM-MIB", "tmnxSysTacPlusServerV5v0Group"), ("TIMETRA-SYSTEM-MIB", "tmnxSysBofV6v0Group"), ("TIMETRA-SYSTEM-MIB", "tmnxSysNotificationV6v0Group"), ("TIMETRA-SYSTEM-MIB", "tmnxPersistenceV6v0Group"), ("TIMETRA-SYSTEM-MIB", "tmnxSysIpv6MgmtItfV6v0Group"), ("TIMETRA-SYSTEM-MIB", "tmnxSysLiV6v0Group"), ("TIMETRA-SYSTEM-MIB", "tmnxSysIcmpVSV6v1Group"), ("TIMETRA-SYSTEM-MIB", "tmnxSysEthInfoGroup"), ("TIMETRA-SYSTEM-MIB", "tmnxSystemCpuMonitorGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxSysV8v0Compliance = tmnxSysV8v0Compliance.setStatus('obsolete')
tmnxSysV9v0Compliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 1, 1, 9)).setObjects(("TIMETRA-SYSTEM-MIB", "tmnxPersistenceV9v0Group"), ("TIMETRA-SYSTEM-MIB", "tmnxSysBofV6v0Group"), ("TIMETRA-SYSTEM-MIB", "tmnxSysConfigV8v0Group"), ("TIMETRA-SYSTEM-MIB", "tmnxSysEthInfoGroup"), ("TIMETRA-SYSTEM-MIB", "tmnxSysGeneralV3v0Group"), ("TIMETRA-SYSTEM-MIB", "tmnxSysGeneralV7v0Group"), ("TIMETRA-SYSTEM-MIB", "tmnxSysIcmpVSV6v1Group"), ("TIMETRA-SYSTEM-MIB", "tmnxSysIpv6MgmtItfV6v0Group"), ("TIMETRA-SYSTEM-MIB", "tmnxSysLiFilterGroup"), ("TIMETRA-SYSTEM-MIB", "tmnxSysLiV6v0Group"), ("TIMETRA-SYSTEM-MIB", "tmnxSysLoginControlSecGroup"), ("TIMETRA-SYSTEM-MIB", "tmnxSysLoginControlV8v0Group"), ("TIMETRA-SYSTEM-MIB", "tmnxSysLoginControlV9v0Group"), ("TIMETRA-SYSTEM-MIB", "tmnxSysNotificationV6v0Group"), ("TIMETRA-SYSTEM-MIB", "tmnxSysNotificationV9v0Group"), ("TIMETRA-SYSTEM-MIB", "tmnxSysRadiusServerV5v0Group"), ("TIMETRA-SYSTEM-MIB", "tmnxSysRollbackV9v0Group"), ("TIMETRA-SYSTEM-MIB", "tmnxSysTacPlusServerV5v0Group"), ("TIMETRA-SYSTEM-MIB", "tmnxSysTimeV4v0Group"), ("TIMETRA-SYSTEM-MIB", "tmnxSystemCpuMonitorGroup"), ("TIMETRA-SYSTEM-MIB", "tmnxSysCertGroup"), ("TIMETRA-SYSTEM-MIB", "tmnxSysNotificationRBGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxSysV9v0Compliance = tmnxSysV9v0Compliance.setStatus('obsolete')
tmnxSysBootedBofCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 1, 1, 10)).setObjects(("TIMETRA-SYSTEM-MIB", "tmnxSysBootedBofGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxSysBootedBofCompliance = tmnxSysBootedBofCompliance.setStatus('current')
tmnxSysV10v0Compliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 1, 1, 11)).setObjects(("TIMETRA-SYSTEM-MIB", "tmnxPersistenceV9v0Group"), ("TIMETRA-SYSTEM-MIB", "tmnxSysBofV6v0Group"), ("TIMETRA-SYSTEM-MIB", "tmnxSysConfigV8v0Group"), ("TIMETRA-SYSTEM-MIB", "tmnxSysEthInfoGroup"), ("TIMETRA-SYSTEM-MIB", "tmnxSysGeneralV3v0Group"), ("TIMETRA-SYSTEM-MIB", "tmnxSysGeneralV7v0Group"), ("TIMETRA-SYSTEM-MIB", "tmnxSysIcmpVSV6v1Group"), ("TIMETRA-SYSTEM-MIB", "tmnxSysIpv6MgmtItfV6v0Group"), ("TIMETRA-SYSTEM-MIB", "tmnxSysLiFilterGroup"), ("TIMETRA-SYSTEM-MIB", "tmnxSysLiV6v0Group"), ("TIMETRA-SYSTEM-MIB", "tmnxSysLoginControlSecGroup"), ("TIMETRA-SYSTEM-MIB", "tmnxSysLoginControlV8v0Group"), ("TIMETRA-SYSTEM-MIB", "tmnxSysLoginControlV9v0Group"), ("TIMETRA-SYSTEM-MIB", "tmnxSysNotificationV6v0Group"), ("TIMETRA-SYSTEM-MIB", "tmnxSysNotificationV9v0Group"), ("TIMETRA-SYSTEM-MIB", "tmnxSysNotificationV10v0Group"), ("TIMETRA-SYSTEM-MIB", "tmnxSysRadiusServerV5v0Group"), ("TIMETRA-SYSTEM-MIB", "tmnxSysRollbackV9v0Group"), ("TIMETRA-SYSTEM-MIB", "tmnxSysTacPlusServerV5v0Group"), ("TIMETRA-SYSTEM-MIB", "tmnxSysTimeV4v0Group"), ("TIMETRA-SYSTEM-MIB", "tmnxSystemCpuMonitorGroup"), ("TIMETRA-SYSTEM-MIB", "tmnxSysCertGroup"), ("TIMETRA-SYSTEM-MIB", "tmnxSysRollbackRescueGroup"), ("TIMETRA-SYSTEM-MIB", "tmnxSysNotificationRBGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxSysV10v0Compliance = tmnxSysV10v0Compliance.setStatus('current')
tmnxSysRadiusServerGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 1, 2, 4)).setObjects(("TIMETRA-SYSTEM-MIB", "radiusOperStatus"), ("TIMETRA-SYSTEM-MIB", "radiusServerAddress"), ("TIMETRA-SYSTEM-MIB", "radiusServerOperStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxSysRadiusServerGroup = tmnxSysRadiusServerGroup.setStatus('obsolete')
tmnxSysTacPlusServerGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 1, 2, 5)).setObjects(("TIMETRA-SYSTEM-MIB", "tacplusOperStatus"), ("TIMETRA-SYSTEM-MIB", "tacplusServerAddress"), ("TIMETRA-SYSTEM-MIB", "tacplusServerOperStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxSysTacPlusServerGroup = tmnxSysTacPlusServerGroup.setStatus('obsolete')
tmnxSysBofGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 1, 2, 8)).setObjects(("TIMETRA-SYSTEM-MIB", "sbiActiveIpAddr"), ("TIMETRA-SYSTEM-MIB", "sbiActiveIpMask"), ("TIMETRA-SYSTEM-MIB", "sbiStandbyIpAddr"), ("TIMETRA-SYSTEM-MIB", "sbiStandbyIpMask"), ("TIMETRA-SYSTEM-MIB", "sbiPrimaryImage"), ("TIMETRA-SYSTEM-MIB", "sbiSecondaryImage"), ("TIMETRA-SYSTEM-MIB", "sbiTertiaryImage"), ("TIMETRA-SYSTEM-MIB", "sbiPrimaryConfigFile"), ("TIMETRA-SYSTEM-MIB", "sbiSecondaryConfigFile"), ("TIMETRA-SYSTEM-MIB", "sbiTertiaryConfigFile"), ("TIMETRA-SYSTEM-MIB", "sbiPersist"), ("TIMETRA-SYSTEM-MIB", "sbiConsoleSpeed"), ("TIMETRA-SYSTEM-MIB", "sbiAutoNegotiate"), ("TIMETRA-SYSTEM-MIB", "sbiSpeed"), ("TIMETRA-SYSTEM-MIB", "sbiDuplex"), ("TIMETRA-SYSTEM-MIB", "sbiPrimaryDns"), ("TIMETRA-SYSTEM-MIB", "sbiSecondaryDns"), ("TIMETRA-SYSTEM-MIB", "sbiTertiaryDns"), ("TIMETRA-SYSTEM-MIB", "sbiDnsDomain"), ("TIMETRA-SYSTEM-MIB", "sbiWait"), ("TIMETRA-SYSTEM-MIB", "sbiStaticRouteNextHop"), ("TIMETRA-SYSTEM-MIB", "sbiStaticRouteRowStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxSysBofGroup = tmnxSysBofGroup.setStatus('obsolete')
tmnxSysConfigV3v0Group = ObjectGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 1, 2, 12)).setObjects(("TIMETRA-SYSTEM-MIB", "ssiSaveConfig"), ("TIMETRA-SYSTEM-MIB", "ssiSyncMode"), ("TIMETRA-SYSTEM-MIB", "ssiSyncForce"), ("TIMETRA-SYSTEM-MIB", "ssiSyncStatus"), ("TIMETRA-SYSTEM-MIB", "ssiSyncConfigLastTime"), ("TIMETRA-SYSTEM-MIB", "ssiSyncBootEnvLastTime"), ("TIMETRA-SYSTEM-MIB", "ssiConfigMaxBackupRevisions"), ("TIMETRA-SYSTEM-MIB", "ssiSaveConfigResult"), ("TIMETRA-SYSTEM-MIB", "ssiSaveBof"), ("TIMETRA-SYSTEM-MIB", "ssiSaveBofResult"), ("TIMETRA-SYSTEM-MIB", "ssiSaveConfigDest"), ("TIMETRA-SYSTEM-MIB", "ssiSaveConfigDetail"), ("TIMETRA-SYSTEM-MIB", "ssiRedFailoverTime"), ("TIMETRA-SYSTEM-MIB", "ssiRedFailoverReason"), ("TIMETRA-SYSTEM-MIB", "sbiConfigStatus"), ("TIMETRA-SYSTEM-MIB", "sbiPersistStatus"), ("TIMETRA-SYSTEM-MIB", "sbiPersistIndex"), ("TIMETRA-SYSTEM-MIB", "sbiSnmpdAdminStatus"), ("TIMETRA-SYSTEM-MIB", "sbiSnmpdOperStatus"), ("TIMETRA-SYSTEM-MIB", "sbiSnmpdMaxPktSize"), ("TIMETRA-SYSTEM-MIB", "sbiSnmpdPortNum"), ("TIMETRA-SYSTEM-MIB", "sbiBootConfigOKScript"), ("TIMETRA-SYSTEM-MIB", "sbiConfigOKScriptStatus"), ("TIMETRA-SYSTEM-MIB", "sbiBootConfigFailScript"), ("TIMETRA-SYSTEM-MIB", "sbiConfigFailScriptStatus"), ("TIMETRA-SYSTEM-MIB", "sbiRedSwitchoverScript"), ("TIMETRA-SYSTEM-MIB", "sbiRedSwitchoverScriptStatus"), ("TIMETRA-SYSTEM-MIB", "slcFtpInboundMaxSessions"), ("TIMETRA-SYSTEM-MIB", "slcTelnetInboundMaxSessions"), ("TIMETRA-SYSTEM-MIB", "slcTelnetOutboundMaxSessions"), ("TIMETRA-SYSTEM-MIB", "slcPreLoginMessage"), ("TIMETRA-SYSTEM-MIB", "slcPreLoginMessageInclName"), ("TIMETRA-SYSTEM-MIB", "slcMessageOfTheDay"), ("TIMETRA-SYSTEM-MIB", "slcMessageOfTheDayType"), ("TIMETRA-SYSTEM-MIB", "slcLoginBanner"), ("TIMETRA-SYSTEM-MIB", "sysLACPSystemPriority"), ("TIMETRA-SYSTEM-MIB", "slcLoginExponentialBackOff"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxSysConfigV3v0Group = tmnxSysConfigV3v0Group.setStatus('obsolete')
tmnxSysGeneralV3v0Group = ObjectGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 1, 2, 15)).setObjects(("TIMETRA-SYSTEM-MIB", "sgiCpuUsage"), ("TIMETRA-SYSTEM-MIB", "sgiMemoryUsed"), ("TIMETRA-SYSTEM-MIB", "sgiMemoryAvailable"), ("TIMETRA-SYSTEM-MIB", "sgiMemoryPoolAllocated"), ("TIMETRA-SYSTEM-MIB", "sgiSwMajorVersion"), ("TIMETRA-SYSTEM-MIB", "sgiSwMinorVersion"), ("TIMETRA-SYSTEM-MIB", "sgiSwVersionModifier"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxSysGeneralV3v0Group = tmnxSysGeneralV3v0Group.setStatus('current')
tmnxSysObsoleteGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 1, 2, 17)).setObjects(("TIMETRA-SYSTEM-MIB", "stiSummerZoneStartDate"), ("TIMETRA-SYSTEM-MIB", "stiSummerZoneEndDate"), ("TIMETRA-SYSTEM-MIB", "tacplusServerAddress"), ("TIMETRA-SYSTEM-MIB", "radiusServerAddress"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxSysObsoleteGroup = tmnxSysObsoleteGroup.setStatus('obsolete')
tmnxPersistenceV4v0Group = ObjectGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 1, 2, 18)).setObjects(("TIMETRA-SYSTEM-MIB", "spiDhcpL2PersistenceFileLocation"), ("TIMETRA-SYSTEM-MIB", "spiDhcpL2PersistenceDescription"), ("TIMETRA-SYSTEM-MIB", "spiDhcpL3PersistenceFileLocation"), ("TIMETRA-SYSTEM-MIB", "spiDhcpL3PersistenceDescription"), ("TIMETRA-SYSTEM-MIB", "spiSubMgmtPersistenceFileLocation"), ("TIMETRA-SYSTEM-MIB", "spiSubMgmtPersistenceDescription"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxPersistenceV4v0Group = tmnxPersistenceV4v0Group.setStatus('obsolete')
tmnxSysTimeV4v0Group = ObjectGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 1, 2, 19)).setObjects(("TIMETRA-SYSTEM-MIB", "stiDateAndTime"), ("TIMETRA-SYSTEM-MIB", "stiActiveZone"), ("TIMETRA-SYSTEM-MIB", "stiHoursOffset"), ("TIMETRA-SYSTEM-MIB", "stiMinutesOffset"), ("TIMETRA-SYSTEM-MIB", "stiZoneType"), ("TIMETRA-SYSTEM-MIB", "stiSummerZoneRowStatus"), ("TIMETRA-SYSTEM-MIB", "stiSummerZoneOffset"), ("TIMETRA-SYSTEM-MIB", "stiSummerZoneStartDay"), ("TIMETRA-SYSTEM-MIB", "stiSummerZoneStartWeek"), ("TIMETRA-SYSTEM-MIB", "stiSummerZoneStartMonth"), ("TIMETRA-SYSTEM-MIB", "stiSummerZoneStartHour"), ("TIMETRA-SYSTEM-MIB", "stiSummerZoneStartMinute"), ("TIMETRA-SYSTEM-MIB", "stiSummerZoneEndDay"), ("TIMETRA-SYSTEM-MIB", "stiSummerZoneEndWeek"), ("TIMETRA-SYSTEM-MIB", "stiSummerZoneEndMonth"), ("TIMETRA-SYSTEM-MIB", "stiSummerZoneEndHour"), ("TIMETRA-SYSTEM-MIB", "stiSummerZoneEndMinute"), ("TIMETRA-SYSTEM-MIB", "sntpState"), ("TIMETRA-SYSTEM-MIB", "sntpServerRowStatus"), ("TIMETRA-SYSTEM-MIB", "sntpServerVersion"), ("TIMETRA-SYSTEM-MIB", "sntpServerPreference"), ("TIMETRA-SYSTEM-MIB", "sntpServerInterval"), ("TIMETRA-SYSTEM-MIB", "sntpAdminState"), ("TIMETRA-SYSTEM-MIB", "sntpOperStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxSysTimeV4v0Group = tmnxSysTimeV4v0Group.setStatus('current')
tmnxSysNotifyObjsR4r0Group = ObjectGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 1, 2, 20)).setObjects(("TIMETRA-SYSTEM-MIB", "tmnxNotifyRow"), ("TIMETRA-SYSTEM-MIB", "tmnxNotifyRowAdminState"), ("TIMETRA-SYSTEM-MIB", "tmnxNotifyRowOperState"), ("TIMETRA-SYSTEM-MIB", "tmnxMemoryModule"), ("TIMETRA-SYSTEM-MIB", "tmnxModuleMallocSize"), ("TIMETRA-SYSTEM-MIB", "tmnxDroppedTrapID"), ("TIMETRA-SYSTEM-MIB", "tmnxTrapDroppedReasonCode"), ("TIMETRA-SYSTEM-MIB", "tmnxTrapDroppedEntryID"), ("TIMETRA-SYSTEM-MIB", "tmnxNotifyEntryOID"), ("TIMETRA-SYSTEM-MIB", "tmnxSnmpdErrorMsg"), ("TIMETRA-SYSTEM-MIB", "tmnxSysTimeSetBy"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxSysNotifyObjsR4r0Group = tmnxSysNotifyObjsR4r0Group.setStatus('obsolete')
tmnxSysNotificationV4v0Group = NotificationGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 1, 2, 21)).setObjects(("TIMETRA-SYSTEM-MIB", "stiDateAndTimeChanged"), ("TIMETRA-SYSTEM-MIB", "ssiSaveConfigSucceeded"), ("TIMETRA-SYSTEM-MIB", "ssiSaveConfigFailed"), ("TIMETRA-SYSTEM-MIB", "sbiBootConfig"), ("TIMETRA-SYSTEM-MIB", "sbiBootSnmpd"), ("TIMETRA-SYSTEM-MIB", "radiusServerOperStatusChange"), ("TIMETRA-SYSTEM-MIB", "radiusOperStatusChange"), ("TIMETRA-SYSTEM-MIB", "tmnxConfigModify"), ("TIMETRA-SYSTEM-MIB", "tmnxConfigCreate"), ("TIMETRA-SYSTEM-MIB", "tmnxConfigDelete"), ("TIMETRA-SYSTEM-MIB", "tmnxStateChange"), ("TIMETRA-SYSTEM-MIB", "tmnxModuleMallocFailed"), ("TIMETRA-SYSTEM-MIB", "tmnxTrapDropped"), ("TIMETRA-SYSTEM-MIB", "ssiSyncConfigOK"), ("TIMETRA-SYSTEM-MIB", "ssiSyncConfigFailed"), ("TIMETRA-SYSTEM-MIB", "ssiSyncBootEnvOK"), ("TIMETRA-SYSTEM-MIB", "ssiSyncBootEnvFailed"), ("TIMETRA-SYSTEM-MIB", "sntpTimeDiffExceedsThreshold"), ("TIMETRA-SYSTEM-MIB", "tacplusServerOperStatusChange"), ("TIMETRA-SYSTEM-MIB", "tacplusOperStatusChange"), ("TIMETRA-SYSTEM-MIB", "tmnxSnmpdError"), ("TIMETRA-SYSTEM-MIB", "tmnxSsiMismatch"), ("TIMETRA-SYSTEM-MIB", "tmnxSnmpdStateChange"), ("TIMETRA-SYSTEM-MIB", "ssiRedStandbySyncing"), ("TIMETRA-SYSTEM-MIB", "ssiRedStandbyReady"), ("TIMETRA-SYSTEM-MIB", "ssiRedStandbySyncLost"), ("TIMETRA-SYSTEM-MIB", "ssiRedSwitchover"), ("TIMETRA-SYSTEM-MIB", "ssiRedCpmActive"), ("TIMETRA-SYSTEM-MIB", "ssiRedSingleCpm"), ("TIMETRA-SYSTEM-MIB", "persistencyClosedAlarmRaised"), ("TIMETRA-SYSTEM-MIB", "persistencyClosedAlarmCleared"), ("TIMETRA-SYSTEM-MIB", "tmnxSntpOperChange"), ("TIMETRA-SYSTEM-MIB", "tmnxSysTimeSet"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxSysNotificationV4v0Group = tmnxSysNotificationV4v0Group.setStatus('obsolete')
tmnxSysNotifyObjsV5v0Group = ObjectGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 1, 2, 22)).setObjects(("TIMETRA-SYSTEM-MIB", "tmnxPersistencyClient"), ("TIMETRA-SYSTEM-MIB", "tmnxPersistencyFileLocator"), ("TIMETRA-SYSTEM-MIB", "tmnxPersistencyNotifyMsg"), ("TIMETRA-SYSTEM-MIB", "tmnxPersistenceAffectedCpm"), ("TIMETRA-SYSTEM-MIB", "tmnxNotifyRow"), ("TIMETRA-SYSTEM-MIB", "tmnxNotifyRowAdminState"), ("TIMETRA-SYSTEM-MIB", "tmnxNotifyRowOperState"), ("TIMETRA-SYSTEM-MIB", "tmnxMemoryModule"), ("TIMETRA-SYSTEM-MIB", "tmnxModuleMallocSize"), ("TIMETRA-SYSTEM-MIB", "tmnxDroppedTrapID"), ("TIMETRA-SYSTEM-MIB", "tmnxTrapDroppedReasonCode"), ("TIMETRA-SYSTEM-MIB", "tmnxTrapDroppedEntryID"), ("TIMETRA-SYSTEM-MIB", "tmnxNotifyEntryOID"), ("TIMETRA-SYSTEM-MIB", "tmnxSnmpdErrorMsg"), ("TIMETRA-SYSTEM-MIB", "tmnxSysTimeSetBy"), ("TIMETRA-SYSTEM-MIB", "tmnxFtpFailureMsg"), ("TIMETRA-SYSTEM-MIB", "tmnxFtpFailureDestAddressType"), ("TIMETRA-SYSTEM-MIB", "tmnxFtpFailureDestAddress"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxSysNotifyObjsV5v0Group = tmnxSysNotifyObjsV5v0Group.setStatus('current')
tmnxSysNotificationV5v0Group = NotificationGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 1, 2, 23)).setObjects(("TIMETRA-SYSTEM-MIB", "stiDateAndTimeChanged"), ("TIMETRA-SYSTEM-MIB", "ssiSaveConfigSucceeded"), ("TIMETRA-SYSTEM-MIB", "ssiSaveConfigFailed"), ("TIMETRA-SYSTEM-MIB", "sbiBootConfig"), ("TIMETRA-SYSTEM-MIB", "sbiBootSnmpd"), ("TIMETRA-SYSTEM-MIB", "radiusOperStatusChange"), ("TIMETRA-SYSTEM-MIB", "tmnxConfigModify"), ("TIMETRA-SYSTEM-MIB", "tmnxConfigCreate"), ("TIMETRA-SYSTEM-MIB", "tmnxConfigDelete"), ("TIMETRA-SYSTEM-MIB", "tmnxStateChange"), ("TIMETRA-SYSTEM-MIB", "tmnxModuleMallocFailed"), ("TIMETRA-SYSTEM-MIB", "tmnxTrapDropped"), ("TIMETRA-SYSTEM-MIB", "ssiSyncConfigOK"), ("TIMETRA-SYSTEM-MIB", "ssiSyncConfigFailed"), ("TIMETRA-SYSTEM-MIB", "ssiSyncBootEnvOK"), ("TIMETRA-SYSTEM-MIB", "ssiSyncBootEnvFailed"), ("TIMETRA-SYSTEM-MIB", "sntpTimeDiffExceedsThreshold"), ("TIMETRA-SYSTEM-MIB", "tacplusOperStatusChange"), ("TIMETRA-SYSTEM-MIB", "tmnxSnmpdError"), ("TIMETRA-SYSTEM-MIB", "tmnxSsiMismatch"), ("TIMETRA-SYSTEM-MIB", "tmnxSnmpdStateChange"), ("TIMETRA-SYSTEM-MIB", "ssiRedStandbySyncing"), ("TIMETRA-SYSTEM-MIB", "ssiRedStandbyReady"), ("TIMETRA-SYSTEM-MIB", "ssiRedStandbySyncLost"), ("TIMETRA-SYSTEM-MIB", "ssiRedSwitchover"), ("TIMETRA-SYSTEM-MIB", "ssiRedCpmActive"), ("TIMETRA-SYSTEM-MIB", "ssiRedSingleCpm"), ("TIMETRA-SYSTEM-MIB", "persistencyClosedAlarmRaised"), ("TIMETRA-SYSTEM-MIB", "persistencyClosedAlarmCleared"), ("TIMETRA-SYSTEM-MIB", "tmnxSntpOperChange"), ("TIMETRA-SYSTEM-MIB", "tmnxSysTimeSet"), ("TIMETRA-SYSTEM-MIB", "tmnxFtpClientFailure"), ("TIMETRA-SYSTEM-MIB", "tacplusInetSrvrOperStatusChange"), ("TIMETRA-SYSTEM-MIB", "radiusInetServerOperStatusChange"), ("TIMETRA-SYSTEM-MIB", "persistencyEventReport"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxSysNotificationV5v0Group = tmnxSysNotificationV5v0Group.setStatus('obsolete')
tmnxSysObsoleteNotificationV5v0Group = NotificationGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 1, 2, 24)).setObjects(("TIMETRA-SYSTEM-MIB", "tacplusServerOperStatusChange"), ("TIMETRA-SYSTEM-MIB", "radiusServerOperStatusChange"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxSysObsoleteNotificationV5v0Group = tmnxSysObsoleteNotificationV5v0Group.setStatus('current')
tmnxSysTacPlusServerV5v0Group = ObjectGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 1, 2, 25)).setObjects(("TIMETRA-SYSTEM-MIB", "tacplusOperStatus"), ("TIMETRA-SYSTEM-MIB", "tacplusServerOperStatus"), ("TIMETRA-SYSTEM-MIB", "tacPlusServerInetAddressType"), ("TIMETRA-SYSTEM-MIB", "tacPlusServerInetAddress"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxSysTacPlusServerV5v0Group = tmnxSysTacPlusServerV5v0Group.setStatus('current')
tmnxSysRadiusServerV5v0Group = ObjectGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 1, 2, 26)).setObjects(("TIMETRA-SYSTEM-MIB", "radiusOperStatus"), ("TIMETRA-SYSTEM-MIB", "radiusServerOperStatus"), ("TIMETRA-SYSTEM-MIB", "radiusServerInetAddressType"), ("TIMETRA-SYSTEM-MIB", "radiusServerInetAddress"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxSysRadiusServerV5v0Group = tmnxSysRadiusServerV5v0Group.setStatus('current')
tmnxSysObsoleteV5v0Group = ObjectGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 1, 2, 27)).setObjects(("TIMETRA-SYSTEM-MIB", "stiSummerZoneStartDate"), ("TIMETRA-SYSTEM-MIB", "stiSummerZoneEndDate"), ("TIMETRA-SYSTEM-MIB", "tacplusServerAddress"), ("TIMETRA-SYSTEM-MIB", "radiusServerAddress"), ("TIMETRA-SYSTEM-MIB", "spiDhcpL2PersistenceFileLocation"), ("TIMETRA-SYSTEM-MIB", "spiDhcpL2PersistenceDescription"), ("TIMETRA-SYSTEM-MIB", "spiDhcpL3PersistenceFileLocation"), ("TIMETRA-SYSTEM-MIB", "spiDhcpL3PersistenceDescription"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxSysObsoleteV5v0Group = tmnxSysObsoleteV5v0Group.setStatus('current')
tmnxPersistenceV5v0Group = ObjectGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 1, 2, 28)).setObjects(("TIMETRA-SYSTEM-MIB", "spiSubMgmtPersistenceFileLocation"), ("TIMETRA-SYSTEM-MIB", "spiSubMgmtPersistenceDescription"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxPersistenceV5v0Group = tmnxPersistenceV5v0Group.setStatus('obsolete')
tmnxSysIpv6MgmtItfV6v0Group = ObjectGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 1, 2, 29)).setObjects(("TIMETRA-SYSTEM-MIB", "sbiActiveIPv6Addr"), ("TIMETRA-SYSTEM-MIB", "sbiActiveIPv6PfxLen"), ("TIMETRA-SYSTEM-MIB", "sbiStandbyIPv6Addr"), ("TIMETRA-SYSTEM-MIB", "sbiStandbyIPv6PfxLen"), ("TIMETRA-SYSTEM-MIB", "sbiPrimaryDnsIPv6Addr"), ("TIMETRA-SYSTEM-MIB", "sbiSecondaryDnsIPv6Addr"), ("TIMETRA-SYSTEM-MIB", "sbiTertiaryDnsIPv6Addr"), ("TIMETRA-SYSTEM-MIB", "sbiStaticRouteIPv6NextHop"), ("TIMETRA-SYSTEM-MIB", "sbiStaticRouteIPv6RowStatus"), ("TIMETRA-SYSTEM-MIB", "sysDNSInfoLastChanged"), ("TIMETRA-SYSTEM-MIB", "sysDNSAddressResolvePref"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxSysIpv6MgmtItfV6v0Group = tmnxSysIpv6MgmtItfV6v0Group.setStatus('current')
tmnxPersistenceV6v0Group = ObjectGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 1, 2, 30)).setObjects(("TIMETRA-SYSTEM-MIB", "spiSubMgmtPersistenceFileLocation"), ("TIMETRA-SYSTEM-MIB", "spiSubMgmtPersistenceDescription"), ("TIMETRA-SYSTEM-MIB", "spiDhcpSrvPersistenceFileLoc"), ("TIMETRA-SYSTEM-MIB", "spiDhcpSrvPersistenceDescr"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxPersistenceV6v0Group = tmnxPersistenceV6v0Group.setStatus('obsolete')
tmnxSysBofV6v0Group = ObjectGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 1, 2, 31)).setObjects(("TIMETRA-SYSTEM-MIB", "sbiActiveIpAddr"), ("TIMETRA-SYSTEM-MIB", "sbiActiveIpMask"), ("TIMETRA-SYSTEM-MIB", "sbiStandbyIpAddr"), ("TIMETRA-SYSTEM-MIB", "sbiStandbyIpMask"), ("TIMETRA-SYSTEM-MIB", "sbiPrimaryImage"), ("TIMETRA-SYSTEM-MIB", "sbiSecondaryImage"), ("TIMETRA-SYSTEM-MIB", "sbiTertiaryImage"), ("TIMETRA-SYSTEM-MIB", "sbiPrimaryConfigFile"), ("TIMETRA-SYSTEM-MIB", "sbiSecondaryConfigFile"), ("TIMETRA-SYSTEM-MIB", "sbiTertiaryConfigFile"), ("TIMETRA-SYSTEM-MIB", "sbiPersist"), ("TIMETRA-SYSTEM-MIB", "sbiConsoleSpeed"), ("TIMETRA-SYSTEM-MIB", "sbiAutoNegotiate"), ("TIMETRA-SYSTEM-MIB", "sbiSpeed"), ("TIMETRA-SYSTEM-MIB", "sbiDuplex"), ("TIMETRA-SYSTEM-MIB", "sbiPrimaryDns"), ("TIMETRA-SYSTEM-MIB", "sbiSecondaryDns"), ("TIMETRA-SYSTEM-MIB", "sbiTertiaryDns"), ("TIMETRA-SYSTEM-MIB", "sbiDnsDomain"), ("TIMETRA-SYSTEM-MIB", "sbiWait"), ("TIMETRA-SYSTEM-MIB", "sbiStaticRouteNextHop"), ("TIMETRA-SYSTEM-MIB", "sbiStaticRouteRowStatus"), ("TIMETRA-SYSTEM-MIB", "sbiLiSeparate"), ("TIMETRA-SYSTEM-MIB", "sbiLiLocalSave"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxSysBofV6v0Group = tmnxSysBofV6v0Group.setStatus('current')
tmnxSysNotificationV6v0Group = NotificationGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 1, 2, 32)).setObjects(("TIMETRA-SYSTEM-MIB", "stiDateAndTimeChanged"), ("TIMETRA-SYSTEM-MIB", "ssiSaveConfigSucceeded"), ("TIMETRA-SYSTEM-MIB", "ssiSaveConfigFailed"), ("TIMETRA-SYSTEM-MIB", "sbiBootConfig"), ("TIMETRA-SYSTEM-MIB", "sbiBootSnmpd"), ("TIMETRA-SYSTEM-MIB", "sbiBootConfigFailFileError"), ("TIMETRA-SYSTEM-MIB", "sbiBootConfigOKFileError"), ("TIMETRA-SYSTEM-MIB", "sbiBootLiConfig"), ("TIMETRA-SYSTEM-MIB", "radiusOperStatusChange"), ("TIMETRA-SYSTEM-MIB", "tmnxConfigModify"), ("TIMETRA-SYSTEM-MIB", "tmnxConfigCreate"), ("TIMETRA-SYSTEM-MIB", "tmnxConfigDelete"), ("TIMETRA-SYSTEM-MIB", "tmnxStateChange"), ("TIMETRA-SYSTEM-MIB", "tmnxModuleMallocFailed"), ("TIMETRA-SYSTEM-MIB", "tmnxTrapDropped"), ("TIMETRA-SYSTEM-MIB", "ssiSyncConfigOK"), ("TIMETRA-SYSTEM-MIB", "ssiSyncConfigFailed"), ("TIMETRA-SYSTEM-MIB", "ssiSyncBootEnvOK"), ("TIMETRA-SYSTEM-MIB", "ssiSyncBootEnvFailed"), ("TIMETRA-SYSTEM-MIB", "sntpTimeDiffExceedsThreshold"), ("TIMETRA-SYSTEM-MIB", "tacplusOperStatusChange"), ("TIMETRA-SYSTEM-MIB", "tmnxSnmpdError"), ("TIMETRA-SYSTEM-MIB", "tmnxSsiMismatch"), ("TIMETRA-SYSTEM-MIB", "tmnxSnmpdStateChange"), ("TIMETRA-SYSTEM-MIB", "ssiRedStandbySyncing"), ("TIMETRA-SYSTEM-MIB", "ssiRedStandbyReady"), ("TIMETRA-SYSTEM-MIB", "ssiRedStandbySyncLost"), ("TIMETRA-SYSTEM-MIB", "ssiRedSwitchover"), ("TIMETRA-SYSTEM-MIB", "ssiRedCpmActive"), ("TIMETRA-SYSTEM-MIB", "ssiRedSingleCpm"), ("TIMETRA-SYSTEM-MIB", "persistencyClosedAlarmRaised"), ("TIMETRA-SYSTEM-MIB", "persistencyClosedAlarmCleared"), ("TIMETRA-SYSTEM-MIB", "tmnxSntpOperChange"), ("TIMETRA-SYSTEM-MIB", "tmnxSysTimeSet"), ("TIMETRA-SYSTEM-MIB", "tmnxFtpClientFailure"), ("TIMETRA-SYSTEM-MIB", "tacplusInetSrvrOperStatusChange"), ("TIMETRA-SYSTEM-MIB", "radiusInetServerOperStatusChange"), ("TIMETRA-SYSTEM-MIB", "persistencyEventReport"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxSysNotificationV6v0Group = tmnxSysNotificationV6v0Group.setStatus('current')
tmnxSysLiV6v0Group = ObjectGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 1, 2, 33)).setObjects(("TIMETRA-SYSTEM-MIB", "sliConfigStatus"), ("TIMETRA-SYSTEM-MIB", "sliSaveConfig"), ("TIMETRA-SYSTEM-MIB", "sliSaveConfigResult"), ("TIMETRA-SYSTEM-MIB", "sliConfigLastModified"), ("TIMETRA-SYSTEM-MIB", "sliConfigLastSaved"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxSysLiV6v0Group = tmnxSysLiV6v0Group.setStatus('current')
tmnxSysNotifyObjsV6v0Group = ObjectGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 1, 2, 34)).setObjects(("TIMETRA-SYSTEM-MIB", "tmnxNotifyObjectName"), ("TIMETRA-SYSTEM-MIB", "tmnxSyncFailureReason"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxSysNotifyObjsV6v0Group = tmnxSysNotifyObjsV6v0Group.setStatus('current')
tmnxSysGeneralV7v0Group = ObjectGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 1, 2, 35)).setObjects(("TIMETRA-SYSTEM-MIB", "sgiSnmpInGetBulks"), ("TIMETRA-SYSTEM-MIB", "sgiKbMemoryUsed"), ("TIMETRA-SYSTEM-MIB", "sgiKbMemoryAvailable"), ("TIMETRA-SYSTEM-MIB", "sgiKbMemoryPoolAllocated"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxSysGeneralV7v0Group = tmnxSysGeneralV7v0Group.setStatus('current')
tmnxSysIcmpVSV6v1Group = ObjectGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 1, 2, 36)).setObjects(("TIMETRA-SYSTEM-MIB", "sysIcmpVSEnhancement"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxSysIcmpVSV6v1Group = tmnxSysIcmpVSV6v1Group.setStatus('current')
tmnxSysConfigV8v0Group = ObjectGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 1, 2, 37)).setObjects(("TIMETRA-SYSTEM-MIB", "ssiSaveConfig"), ("TIMETRA-SYSTEM-MIB", "ssiSyncMode"), ("TIMETRA-SYSTEM-MIB", "ssiSyncForce"), ("TIMETRA-SYSTEM-MIB", "ssiSyncStatus"), ("TIMETRA-SYSTEM-MIB", "ssiSyncConfigLastTime"), ("TIMETRA-SYSTEM-MIB", "ssiSyncBootEnvLastTime"), ("TIMETRA-SYSTEM-MIB", "ssiConfigMaxBackupRevisions"), ("TIMETRA-SYSTEM-MIB", "ssiSaveConfigResult"), ("TIMETRA-SYSTEM-MIB", "ssiSaveBof"), ("TIMETRA-SYSTEM-MIB", "ssiSaveBofResult"), ("TIMETRA-SYSTEM-MIB", "ssiSaveConfigDest"), ("TIMETRA-SYSTEM-MIB", "ssiSaveConfigDetail"), ("TIMETRA-SYSTEM-MIB", "ssiRedFailoverTime"), ("TIMETRA-SYSTEM-MIB", "ssiRedFailoverReason"), ("TIMETRA-SYSTEM-MIB", "sbiConfigStatus"), ("TIMETRA-SYSTEM-MIB", "sbiPersistStatus"), ("TIMETRA-SYSTEM-MIB", "sbiPersistIndex"), ("TIMETRA-SYSTEM-MIB", "sbiSnmpdAdminStatus"), ("TIMETRA-SYSTEM-MIB", "sbiSnmpdOperStatus"), ("TIMETRA-SYSTEM-MIB", "sbiSnmpdMaxPktSize"), ("TIMETRA-SYSTEM-MIB", "sbiSnmpdPortNum"), ("TIMETRA-SYSTEM-MIB", "sbiBootConfigOKScript"), ("TIMETRA-SYSTEM-MIB", "sbiConfigOKScriptStatus"), ("TIMETRA-SYSTEM-MIB", "sbiBootConfigFailScript"), ("TIMETRA-SYSTEM-MIB", "sbiConfigFailScriptStatus"), ("TIMETRA-SYSTEM-MIB", "sbiRedSwitchoverScript"), ("TIMETRA-SYSTEM-MIB", "sbiRedSwitchoverScriptStatus"), ("TIMETRA-SYSTEM-MIB", "sysLACPSystemPriority"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxSysConfigV8v0Group = tmnxSysConfigV8v0Group.setStatus('current')
tmnxSysLoginControlV8v0Group = ObjectGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 1, 2, 38)).setObjects(("TIMETRA-SYSTEM-MIB", "slcFtpInboundMaxSessions"), ("TIMETRA-SYSTEM-MIB", "slcTelnetInboundMaxSessions"), ("TIMETRA-SYSTEM-MIB", "slcTelnetOutboundMaxSessions"), ("TIMETRA-SYSTEM-MIB", "slcPreLoginMessage"), ("TIMETRA-SYSTEM-MIB", "slcPreLoginMessageInclName"), ("TIMETRA-SYSTEM-MIB", "slcMessageOfTheDay"), ("TIMETRA-SYSTEM-MIB", "slcMessageOfTheDayType"), ("TIMETRA-SYSTEM-MIB", "slcLoginBanner"), ("TIMETRA-SYSTEM-MIB", "slcLoginExponentialBackOff"), ("TIMETRA-SYSTEM-MIB", "slcTelnetGracefulShutdown"), ("TIMETRA-SYSTEM-MIB", "slcSSHGracefulShutdown"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxSysLoginControlV8v0Group = tmnxSysLoginControlV8v0Group.setStatus('current')
tmnxSysEthInfoGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 1, 2, 39)).setObjects(("TIMETRA-SYSTEM-MIB", "sysNewQinqUntaggedSap"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxSysEthInfoGroup = tmnxSysEthInfoGroup.setStatus('current')
tmnxPersistenceV9v0Group = ObjectGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 1, 2, 40)).setObjects(("TIMETRA-SYSTEM-MIB", "spiSubMgmtPersistenceFileLocation"), ("TIMETRA-SYSTEM-MIB", "spiSubMgmtPersistenceDescription"), ("TIMETRA-SYSTEM-MIB", "spiDhcpSrvPersistenceFileLoc"), ("TIMETRA-SYSTEM-MIB", "spiDhcpSrvPersistenceDescr"), ("TIMETRA-SYSTEM-MIB", "spiNatFwdPersistenceFileLoc"), ("TIMETRA-SYSTEM-MIB", "spiNatFwdPersistenceDescr"), ("TIMETRA-SYSTEM-MIB", "spiAAPersistenceFileLoc"), ("TIMETRA-SYSTEM-MIB", "spiAAPersistenceDescr"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxPersistenceV9v0Group = tmnxPersistenceV9v0Group.setStatus('current')
tmnxSysLoginControlSecGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 1, 2, 41)).setObjects(("TIMETRA-SYSTEM-MIB", "slcTelnetMinTTLValue"), ("TIMETRA-SYSTEM-MIB", "slcSSHMinTTLValue"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxSysLoginControlSecGroup = tmnxSysLoginControlSecGroup.setStatus('current')
tmnxSysLiFilterGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 1, 2, 42)).setObjects(("TIMETRA-SYSTEM-MIB", "sliFilterLock"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxSysLiFilterGroup = tmnxSysLiFilterGroup.setStatus('current')
tmnxSysNotificationV9v0Group = NotificationGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 1, 2, 43)).setObjects(("TIMETRA-SYSTEM-MIB", "persistenceRestoreProblem"), ("TIMETRA-SYSTEM-MIB", "tmnxSysRollbackStarted"), ("TIMETRA-SYSTEM-MIB", "tmnxSysRollbackStatusChange"), ("TIMETRA-SYSTEM-MIB", "tmnxSysRollbackSaveStatusChange"), ("TIMETRA-SYSTEM-MIB", "tmnxSysRollbackFileDeleteStatus"), ("TIMETRA-SYSTEM-MIB", "ssiSyncRollbackOK"), ("TIMETRA-SYSTEM-MIB", "ssiSyncRollbackFailed"), ("TIMETRA-SYSTEM-MIB", "ssiSyncCertOK"), ("TIMETRA-SYSTEM-MIB", "ssiSyncCertFailed"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxSysNotificationV9v0Group = tmnxSysNotificationV9v0Group.setStatus('current')
tmnxSysRollbackV9v0Group = ObjectGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 1, 2, 44)).setObjects(("TIMETRA-SYSTEM-MIB", "tmnxSysRollbackIndex"), ("TIMETRA-SYSTEM-MIB", "tmnxSysRollbackStart"), ("TIMETRA-SYSTEM-MIB", "tmnxSysRollbackResult"), ("TIMETRA-SYSTEM-MIB", "tmnxSysRollbackSave"), ("TIMETRA-SYSTEM-MIB", "tmnxSysRollbackSaveResult"), ("TIMETRA-SYSTEM-MIB", "tmnxSysRollbackLocation"), ("TIMETRA-SYSTEM-MIB", "tmnxSysRollbackRevertIndex"), ("TIMETRA-SYSTEM-MIB", "tmnxSysRollbackRevertEndTime"), ("TIMETRA-SYSTEM-MIB", "tmnxSysRollbackTableLastChanged"), ("TIMETRA-SYSTEM-MIB", "tmnxSysRollbackFileCreationTime"), ("TIMETRA-SYSTEM-MIB", "tmnxSysRollbackFileComment"), ("TIMETRA-SYSTEM-MIB", "tmnxSysRollbackFileUserName"), ("TIMETRA-SYSTEM-MIB", "tmnxSysRollbackSavedTime"), ("TIMETRA-SYSTEM-MIB", "ssiSyncRollbackLastTime"), ("TIMETRA-SYSTEM-MIB", "tmnxSysRollbackRevertStartTime"), ("TIMETRA-SYSTEM-MIB", "tmnxSysRollbackRevertUserName"), ("TIMETRA-SYSTEM-MIB", "tmnxSysRollbackRevertFilename"), ("TIMETRA-SYSTEM-MIB", "tmnxSysRollbackSaveComment"), ("TIMETRA-SYSTEM-MIB", "tmnxSysRollbackAbortRevert"), ("TIMETRA-SYSTEM-MIB", "tmnxSysRollbackFileVersion"), ("TIMETRA-SYSTEM-MIB", "tmnxSysRollbackFileDelete"), ("TIMETRA-SYSTEM-MIB", "tmnxSysRollbackFileDeleteResult"), ("TIMETRA-SYSTEM-MIB", "ssiSyncRollbackMode"), ("TIMETRA-SYSTEM-MIB", "ssiSyncRollbackForce"), ("TIMETRA-SYSTEM-MIB", "ssiSyncRollbackStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxSysRollbackV9v0Group = tmnxSysRollbackV9v0Group.setStatus('current')
tmnxSysLoginControlV9v0Group = ObjectGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 1, 2, 45)).setObjects(("TIMETRA-SYSTEM-MIB", "slcSSHInboundMaxSessions"), ("TIMETRA-SYSTEM-MIB", "slcSSHOutboundMaxSessions"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxSysLoginControlV9v0Group = tmnxSysLoginControlV9v0Group.setStatus('current')
tmnxSystemCpuMonitorGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 1, 2, 46)).setObjects(("TIMETRA-SYSTEM-MIB", "tmnxSysCpuMonCpuIdle"), ("TIMETRA-SYSTEM-MIB", "tmnxSysCpuMonBusyCoreUtil"), ("TIMETRA-SYSTEM-MIB", "tmnxSysCpuMonBusyGroupName"), ("TIMETRA-SYSTEM-MIB", "tmnxSysCpuMonBusyGroupUtil"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxSystemCpuMonitorGroup = tmnxSystemCpuMonitorGroup.setStatus('current')
tmnxSysCertGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 1, 2, 47)).setObjects(("TIMETRA-SYSTEM-MIB", "ssiSyncCertForce"), ("TIMETRA-SYSTEM-MIB", "ssiSyncCertLastTime"), ("TIMETRA-SYSTEM-MIB", "ssiSyncCertMode"), ("TIMETRA-SYSTEM-MIB", "ssiSyncCertStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxSysCertGroup = tmnxSysCertGroup.setStatus('current')
tmnxSysBootedBofGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 1, 2, 48)).setObjects(("TIMETRA-SYSTEM-MIB", "sbbiLiSeparate"), ("TIMETRA-SYSTEM-MIB", "sbbiLiLocalSave"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxSysBootedBofGroup = tmnxSysBootedBofGroup.setStatus('current')
tmnxSysRollbackRescueGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 1, 2, 49)).setObjects(("TIMETRA-SYSTEM-MIB", "tmnxSysRollbackRescueLocation"), ("TIMETRA-SYSTEM-MIB", "tmnxSysRollbackRescueSave"), ("TIMETRA-SYSTEM-MIB", "tmnxSysRollbackRescueRevert"), ("TIMETRA-SYSTEM-MIB", "tmnxSysRollbackRescueDelete"), ("TIMETRA-SYSTEM-MIB", "tmnxSysRollbackRescueSaveRes"), ("TIMETRA-SYSTEM-MIB", "tmnxSysRollbackRescueRevertRes"), ("TIMETRA-SYSTEM-MIB", "tmnxSysRollbackRescueDeleteRes"), ("TIMETRA-SYSTEM-MIB", "tmnxSysRollbackRescueSavedTime"), ("TIMETRA-SYSTEM-MIB", "tmnxSysRollbackRescueRevStTime"), ("TIMETRA-SYSTEM-MIB", "tmnxSysRollbackRescueRevEdTime"), ("TIMETRA-SYSTEM-MIB", "tmnxSysRollbackRescueRevUser"), ("TIMETRA-SYSTEM-MIB", "tmnxSysRollbackRescueSaveComment"), ("TIMETRA-SYSTEM-MIB", "tmnxSysRollbackRescueAbortRevert"), ("TIMETRA-SYSTEM-MIB", "tmnxSysRollbackRescueFileExists"), ("TIMETRA-SYSTEM-MIB", "tmnxSysRollbackMaxLocalFiles"), ("TIMETRA-SYSTEM-MIB", "tmnxSysRollbackMaxRemoteFiles"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxSysRollbackRescueGroup = tmnxSysRollbackRescueGroup.setStatus('current')
tmnxSysNotificationV10v0Group = NotificationGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 1, 2, 50)).setObjects(("TIMETRA-SYSTEM-MIB", "persistencyFileSysThresRaised"), ("TIMETRA-SYSTEM-MIB", "persistencyFileSysThresCleared"), ("TIMETRA-SYSTEM-MIB", "tmnxSysExecStarted"), ("TIMETRA-SYSTEM-MIB", "tmnxSysExecFinished"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxSysNotificationV10v0Group = tmnxSysNotificationV10v0Group.setStatus('current')
tmnxSysNotifyObjsV10v0Group = ObjectGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 1, 2, 51)).setObjects(("TIMETRA-SYSTEM-MIB", "tmnxSysRollbackFileType"), ("TIMETRA-SYSTEM-MIB", "tmnxSysExecScript"), ("TIMETRA-SYSTEM-MIB", "tmnxSysExecResult"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxSysNotifyObjsV10v0Group = tmnxSysNotifyObjsV10v0Group.setStatus('current')
tmnxSysNotificationRBGroup = NotificationGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 1, 2, 52)).setObjects(("TIMETRA-SYSTEM-MIB", "tmnxSysRollbackSaveStarted"), ("TIMETRA-SYSTEM-MIB", "tmnxSysRollbackDeleteStarted"), ("TIMETRA-SYSTEM-MIB", "tmnxSysNvsysFileError"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxSysNotificationRBGroup = tmnxSysNotificationRBGroup.setStatus('current')
tmnxSysNotifyObjsGenGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 1, 2, 53)).setObjects(("TIMETRA-SYSTEM-MIB", "tmnxSysFileErrorType"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxSysNotifyObjsGenGroup = tmnxSysNotifyObjsGenGroup.setStatus('current')
mibBuilder.exportSymbols("TIMETRA-SYSTEM-MIB", tmnxPersistenceV9v0Group=tmnxPersistenceV9v0Group, stiSummerZoneEndMinute=stiSummerZoneEndMinute, sbiConfigFailScriptStatus=sbiConfigFailScriptStatus, ssiRedStandbySyncLost=ssiRedStandbySyncLost, tmnxModuleMallocFailed=tmnxModuleMallocFailed, tmnxSysRollbackIndex=tmnxSysRollbackIndex, sntpServerTable=sntpServerTable, tmnxSysRollbackRescueRevStTime=tmnxSysRollbackRescueRevStTime, tacPlusServerInetAddressType=tacPlusServerInetAddressType, tmnxSysRollbackRescueGroup=tmnxSysRollbackRescueGroup, sntpServerInterval=sntpServerInterval, tmnxSysRollbackSaveComment=tmnxSysRollbackSaveComment, sysGenInfo=sysGenInfo, tmnxSysV7v0Compliance=tmnxSysV7v0Compliance, ssiSyncBootEnvOK=ssiSyncBootEnvOK, sysNewQinqUntaggedSap=sysNewQinqUntaggedSap, sbiTertiaryConfigFile=sbiTertiaryConfigFile, ssiSyncBootEnvFailed=ssiSyncBootEnvFailed, sbiRedSwitchoverScriptStatus=sbiRedSwitchoverScriptStatus, sbiStaticRouteIPv6Table=sbiStaticRouteIPv6Table, PYSNMP_MODULE_ID=timetraSysMIBModule, tmnxSysRollbackMaxLocalFiles=tmnxSysRollbackMaxLocalFiles, ssiSaveConfigDetail=ssiSaveConfigDetail, timetraSysMIBModule=timetraSysMIBModule, tmnxSysTacPlusServerGroup=tmnxSysTacPlusServerGroup, tmnxSysRadiusServerV5v0Group=tmnxSysRadiusServerV5v0Group, ssiSyncCertMode=ssiSyncCertMode, radiusServerAddress=radiusServerAddress, TmnxSsiSyncRollbackMode=TmnxSsiSyncRollbackMode, tmnxSysRollbackRescueAbortRevert=tmnxSysRollbackRescueAbortRevert, sgiSwMajorVersion=sgiSwMajorVersion, tmnxSysBootedBofGroup=tmnxSysBootedBofGroup, stiSummerZoneTable=stiSummerZoneTable, sbiPersistIndex=sbiPersistIndex, tmnxSysTimeSetBy=tmnxSysTimeSetBy, sbiStaticRouteIPv6Entry=sbiStaticRouteIPv6Entry, slcSSHOutboundMaxSessions=slcSSHOutboundMaxSessions, persistencyClosedAlarmCleared=persistencyClosedAlarmCleared, stiSummerZoneStartHour=stiSummerZoneStartHour, stiSummerZoneEndHour=stiSummerZoneEndHour, ssiRedStandbyReady=ssiRedStandbyReady, tmnxSysRollbackRescueLocation=tmnxSysRollbackRescueLocation, sbiStaticRouteIPv6NextHop=sbiStaticRouteIPv6NextHop, tmnxMemoryModule=tmnxMemoryModule, sntpServerVersion=sntpServerVersion, sbiConsoleSpeed=sbiConsoleSpeed, tmnxSysNotifyObjsV6v0Group=tmnxSysNotifyObjsV6v0Group, tacPlusServerInetAddress=tacPlusServerInetAddress, tmnxPersistenceV6v0Group=tmnxPersistenceV6v0Group, tmnxSysTimeSet=tmnxSysTimeSet, ssiSaveConfig=ssiSaveConfig, stiMinutesOffset=stiMinutesOffset, tmnxSysRollbackTableLastChanged=tmnxSysRollbackTableLastChanged, tmnxSysRollbackMaxRemoteFiles=tmnxSysRollbackMaxRemoteFiles, tmnxSysNotifyObjs=tmnxSysNotifyObjs, persistencyEventReport=persistencyEventReport, sbiSpeed=sbiSpeed, tmnxFtpFailureMsg=tmnxFtpFailureMsg, tmnxSysV6v0Compliance=tmnxSysV6v0Compliance, tacplusInetSrvrOperStatusChange=tacplusInetSrvrOperStatusChange, ssiSaveConfigFailed=ssiSaveConfigFailed, tacplusServerOperStatusChange=tacplusServerOperStatusChange, tmnxSysRollbackStatusChange=tmnxSysRollbackStatusChange, spiNatFwdPersistenceFileLoc=spiNatFwdPersistenceFileLoc, tmnxSysExecScript=tmnxSysExecScript, tmnxSysRollbackFileEntry=tmnxSysRollbackFileEntry, tmnxSysConfigV8v0Group=tmnxSysConfigV8v0Group, sbiStaticRouteDest=sbiStaticRouteDest, ssiConfigMaxBackupRevisions=ssiConfigMaxBackupRevisions, sbiPrimaryDns=sbiPrimaryDns, tmnxSysTacPlusServerV5v0Group=tmnxSysTacPlusServerV5v0Group, tmnxSysRollbackFileDelete=tmnxSysRollbackFileDelete, sgiSwVersionModifier=sgiSwVersionModifier, sbiStaticRouteEntry=sbiStaticRouteEntry, spiNatFwdPersistenceDescr=spiNatFwdPersistenceDescr, slcTelnetOutboundMaxSessions=slcTelnetOutboundMaxSessions, persistencyClosedAlarmRaised=persistencyClosedAlarmRaised, tmnxSysRollbackFileCreationTime=tmnxSysRollbackFileCreationTime, spiAAPersistenceDescr=spiAAPersistenceDescr, tmnxPersistencyNotifyMsg=tmnxPersistencyNotifyMsg, slcSSHInboundMaxSessions=slcSSHInboundMaxSessions, stiSummerZoneEndWeek=stiSummerZoneEndWeek, tmnxSysBootedBofCompliance=tmnxSysBootedBofCompliance, tmnxSysV5v0Compliance=tmnxSysV5v0Compliance, sysPersistenceDhcpSrvInfo=sysPersistenceDhcpSrvInfo, tmnxNotifyEntryOID=tmnxNotifyEntryOID, sbiDnsDomain=sbiDnsDomain, sntpTimeDiffExceedsThreshold=sntpTimeDiffExceedsThreshold, tmnxSysCompliances=tmnxSysCompliances, radiusInetServerOperStatusChange=radiusInetServerOperStatusChange, ssiSyncCertStatus=ssiSyncCertStatus, tmnxSysNotificationV9v0Group=tmnxSysNotificationV9v0Group, spiDhcpL2PersistenceDescription=spiDhcpL2PersistenceDescription, tmnxSysRollbackRescueDelete=tmnxSysRollbackRescueDelete, slcPreLoginMessageInclName=slcPreLoginMessageInclName, sysEthInfo=sysEthInfo, sgiMemoryAvailable=sgiMemoryAvailable, tmnxSysNvsysFileError=tmnxSysNvsysFileError, spiDhcpL3PersistenceFileLocation=spiDhcpL3PersistenceFileLocation, ssiSyncRollbackFailed=ssiSyncRollbackFailed, sbiSnmpdAdminStatus=sbiSnmpdAdminStatus, sbiStaticRouteTable=sbiStaticRouteTable, sbiPrimaryImage=sbiPrimaryImage, tmnxSysRollbackV9v0Group=tmnxSysRollbackV9v0Group, sbiStaticRouteIPv6PfxLen=sbiStaticRouteIPv6PfxLen, radiusOperStatusChange=radiusOperStatusChange, ssiSyncCertOK=ssiSyncCertOK, tmnxSystemCpuMonitorGroup=tmnxSystemCpuMonitorGroup, tmnxSysRollbackStart=tmnxSysRollbackStart, sbiTertiaryImage=sbiTertiaryImage, tmnxSysRollbackRevertEndTime=tmnxSysRollbackRevertEndTime, persistencyFileSysThresRaised=persistencyFileSysThresRaised, sgiMemoryUsed=sgiMemoryUsed, ssiSyncMode=ssiSyncMode, tmnxSysRollbackRescueFileExists=tmnxSysRollbackRescueFileExists, sysPersistenceDhcpL3Info=sysPersistenceDhcpL3Info, tmnxSysTimeV4v0Group=tmnxSysTimeV4v0Group, tmnxSnmpdError=tmnxSnmpdError, tmnxTrapDroppedReasonCode=tmnxTrapDroppedReasonCode, tmnxSnmpdStateChange=tmnxSnmpdStateChange, ssiSyncRollbackStatus=ssiSyncRollbackStatus, sbiLiLocalSave=sbiLiLocalSave, tmnxSysIcmpVSV6v1Group=tmnxSysIcmpVSV6v1Group, ssiSyncBootEnvLastTime=ssiSyncBootEnvLastTime, radiusServerInetAddress=radiusServerInetAddress, sbiStandbyIpMask=sbiStandbyIpMask, sbiRedSwitchoverScript=sbiRedSwitchoverScript, tmnxSysCpuMonTable=tmnxSysCpuMonTable, tmnxSysNotifyObjsGenGroup=tmnxSysNotifyObjsGenGroup, ssiSaveConfigSucceeded=ssiSaveConfigSucceeded, tacplusOperStatusChange=tacplusOperStatusChange, sbiStaticRouteIPv6RowStatus=sbiStaticRouteIPv6RowStatus, stiSummerZoneStartDay=stiSummerZoneStartDay, slcMessageOfTheDay=slcMessageOfTheDay, tmnxSysRollbackRevertFilename=tmnxSysRollbackRevertFilename, stiSummerZoneEndDate=stiSummerZoneEndDate, radiusServerOperStatusChange=radiusServerOperStatusChange, sysRadiusInfo=sysRadiusInfo, ssiSyncStatus=ssiSyncStatus, sbiStaticRouteIPv6Dest=sbiStaticRouteIPv6Dest, slcTelnetMinTTLValue=slcTelnetMinTTLValue, sbiStandbyIPv6Addr=sbiStandbyIPv6Addr, sbiTertiaryDns=sbiTertiaryDns, sbiSnmpdPortNum=sbiSnmpdPortNum, tmnxSysNotificationV5v0Group=tmnxSysNotificationV5v0Group, spiDhcpL2PersistenceFileLocation=spiDhcpL2PersistenceFileLocation, tmnxPersistenceAffectedCpm=tmnxPersistenceAffectedCpm, tmnxSysNotificationV4v0Group=tmnxSysNotificationV4v0Group, tmnxPersistencyClient=tmnxPersistencyClient, TmnxSsiSyncMode=TmnxSsiSyncMode, tmnxFtpClientFailure=tmnxFtpClientFailure, tmnxSysNotifyObjsV5v0Group=tmnxSysNotifyObjsV5v0Group, sntpAdminState=sntpAdminState, tmnxFtpFailureDestAddress=tmnxFtpFailureDestAddress, sbiLiSeparate=sbiLiSeparate, tmnxSysLiFilterGroup=tmnxSysLiFilterGroup, ssiSyncCertFailed=ssiSyncCertFailed, sbiTertiaryDnsIPv6Addr=sbiTertiaryDnsIPv6Addr, tmnxSysRollbackStarted=tmnxSysRollbackStarted, sysPersistenceDhcpL2Info=sysPersistenceDhcpL2Info, ssiRedSwitchover=ssiRedSwitchover, tmnxSysRollbackAbortRevert=tmnxSysRollbackAbortRevert, tmnxSysCpuMonBusyCoreUtil=tmnxSysCpuMonBusyCoreUtil, sbiSecondaryDnsIPv6Addr=sbiSecondaryDnsIPv6Addr, stiZoneType=stiZoneType, stiSummerZoneStartWeek=stiSummerZoneStartWeek, tmnxSysRollbackRescueSave=tmnxSysRollbackRescueSave, persistenceRestoreProblem=persistenceRestoreProblem, sbiPersist=sbiPersist, sbiBootConfigFailScript=sbiBootConfigFailScript, tmnxSysRollbackSaveResult=tmnxSysRollbackSaveResult, stiSummerZoneStartMinute=stiSummerZoneStartMinute, sbiStaticRouteMask=sbiStaticRouteMask, tmnxSysNotifyObjsV10v0Group=tmnxSysNotifyObjsV10v0Group, tmnxConfigCreate=tmnxConfigCreate, radiusServerTable=radiusServerTable, sgiKbMemoryPoolAllocated=sgiKbMemoryPoolAllocated, tmnxModuleMallocSize=tmnxModuleMallocSize, sysLoginControlInfo=sysLoginControlInfo, sysLiInfo=sysLiInfo, sbiBootConfigFailFileError=sbiBootConfigFailFileError, ssiRedCpmActive=ssiRedCpmActive, sysBofInfo=sysBofInfo, sbiSnmpdMaxPktSize=sbiSnmpdMaxPktSize, sgiKbMemoryUsed=sgiKbMemoryUsed, tmnxPersistencyFileLocator=tmnxPersistencyFileLocator, tmnxFtpFailureDestAddressType=tmnxFtpFailureDestAddressType, sbiBootConfig=sbiBootConfig, tmnxSnmpdErrorMsg=tmnxSnmpdErrorMsg, sbiPrimaryConfigFile=sbiPrimaryConfigFile, tmnxSysLiV6v0Group=tmnxSysLiV6v0Group, sysDNSInfoLastChanged=sysDNSInfoLastChanged, tmnxSysCpuMonCpuIdle=tmnxSysCpuMonCpuIdle, tmnxSysCpuMonSampleTime=tmnxSysCpuMonSampleTime, tacplusServerAddress=tacplusServerAddress, tmnxSysRadiusServerGroup=tmnxSysRadiusServerGroup, ssiRedSingleCpm=ssiRedSingleCpm, TmnxSysMonUtilization=TmnxSysMonUtilization, sbiStaticRouteNextHop=sbiStaticRouteNextHop, tacplusServerIndex=tacplusServerIndex, sysDNSAddressResolvePref=sysDNSAddressResolvePref, spiDhcpL3PersistenceDescription=spiDhcpL3PersistenceDescription, slcPreLoginMessage=slcPreLoginMessage, tmnxSysRollbackRescueDeleteRes=tmnxSysRollbackRescueDeleteRes, tmnxSysRollbackRevertStartTime=tmnxSysRollbackRevertStartTime, sbiBootConfigOKScript=sbiBootConfigOKScript, tmnxSysCpuMonBusyGroupUtil=tmnxSysCpuMonBusyGroupUtil, sbiConfigOKScriptStatus=sbiConfigOKScriptStatus, tmnxSntpOperChange=tmnxSntpOperChange, stiSummerZoneRowStatus=stiSummerZoneRowStatus, tmnxSysRollbackRevertUserName=tmnxSysRollbackRevertUserName, tmnxSysRollbackFileDeleteStatus=tmnxSysRollbackFileDeleteStatus, tmnxSysConfigV3v0Group=tmnxSysConfigV3v0Group, tmnxSysCertGroup=tmnxSysCertGroup, radiusServerEntry=radiusServerEntry, radiusOperStatus=radiusOperStatus, tmnxSysRollbackFileDeleteResult=tmnxSysRollbackFileDeleteResult, sliFilterLock=sliFilterLock, tmnxSysObsoleteGroup=tmnxSysObsoleteGroup, sbbiLiSeparate=sbbiLiSeparate, tmnxSysRollbackRescueSaveRes=tmnxSysRollbackRescueSaveRes, tmnxSysRollbackFileIndex=tmnxSysRollbackFileIndex, tmnxSysRollbackSave=tmnxSysRollbackSave, tmnxSysRollbackResult=tmnxSysRollbackResult, slcMessageOfTheDayType=slcMessageOfTheDayType, sbiSecondaryImage=sbiSecondaryImage, sbiConfigStatus=sbiConfigStatus, tmnxSysObjs=tmnxSysObjs, tmnxSysExecStarted=tmnxSysExecStarted, tmnxDroppedTrapID=tmnxDroppedTrapID, stiSummerZoneEntry=stiSummerZoneEntry, sgiKbMemoryAvailable=sgiKbMemoryAvailable, tmnxSysBofV6v0Group=tmnxSysBofV6v0Group, ssiSyncCertForce=ssiSyncCertForce, sbiDuplex=sbiDuplex, tmnxSysConformance=tmnxSysConformance, slcSSHMinTTLValue=slcSSHMinTTLValue, tmnxSysRollbackRescueRevEdTime=tmnxSysRollbackRescueRevEdTime, ssiSyncConfigLastTime=ssiSyncConfigLastTime, ssiSaveBofResult=ssiSaveBofResult, sbiSecondaryDns=sbiSecondaryDns, spiAAPersistenceFileLoc=spiAAPersistenceFileLoc, sntpOperStatus=sntpOperStatus, sysBootedBofInfo=sysBootedBofInfo, radiusServerIndex=radiusServerIndex, sbbiLiLocalSave=sbbiLiLocalSave, slcLoginBanner=slcLoginBanner, stiActiveZone=stiActiveZone, tmnxNotifyRowAdminState=tmnxNotifyRowAdminState, ssiSyncRollbackLastTime=ssiSyncRollbackLastTime, sgiCpuUsage=sgiCpuUsage, TmnxSysMonSampleTime=TmnxSysMonSampleTime, ssiSyncRollbackOK=ssiSyncRollbackOK, tmnxTrapDropped=tmnxTrapDropped)
mibBuilder.exportSymbols("TIMETRA-SYSTEM-MIB", tmnxTrapDroppedEntryID=tmnxTrapDroppedEntryID, sbiBootConfigOKFileError=sbiBootConfigOKFileError, sgiMemoryPoolAllocated=sgiMemoryPoolAllocated, tmnxSysRollbackLocation=tmnxSysRollbackLocation, tmnxSysMIBNotifyPrefix=tmnxSysMIBNotifyPrefix, slcSSHGracefulShutdown=slcSSHGracefulShutdown, tmnxNotifyRowOperState=tmnxNotifyRowOperState, ssiRedFailoverReason=ssiRedFailoverReason, sbiActiveIPv6Addr=sbiActiveIPv6Addr, sbiPersistStatus=sbiPersistStatus, sbiSecondaryConfigFile=sbiSecondaryConfigFile, tmnxSysNotificationV10v0Group=tmnxSysNotificationV10v0Group, stiHoursOffset=stiHoursOffset, tmnxSysExecResult=tmnxSysExecResult, tmnxSysGroups=tmnxSysGroups, sysPersistenceAAInfo=sysPersistenceAAInfo, sysDNSInfo=sysDNSInfo, tmnxSysV8v0Compliance=tmnxSysV8v0Compliance, ssiSaveConfigResult=ssiSaveConfigResult, tmnxConfigDelete=tmnxConfigDelete, sbiPrimaryDnsIPv6Addr=sbiPrimaryDnsIPv6Addr, stiDateAndTime=stiDateAndTime, tmnxSysRollbackSaveStatusChange=tmnxSysRollbackSaveStatusChange, tmnxSysRollbackRescueRevertRes=tmnxSysRollbackRescueRevertRes, slcFtpInboundMaxSessions=slcFtpInboundMaxSessions, tmnxSysV4v0Compliance=tmnxSysV4v0Compliance, tmnxSysV10v0Compliance=tmnxSysV10v0Compliance, sntpServerPreference=sntpServerPreference, sbiActiveIPv6PfxLen=sbiActiveIPv6PfxLen, sliConfigStatus=sliConfigStatus, tmnxSysRollbackRescueSavedTime=tmnxSysRollbackRescueSavedTime, spiSubMgmtPersistenceDescription=spiSubMgmtPersistenceDescription, tmnxSysRollbackFileVersion=tmnxSysRollbackFileVersion, sysPersistenceSubMgmtInfo=sysPersistenceSubMgmtInfo, stiSummerZoneOffset=stiSummerZoneOffset, tmnxSysRollbackRescueRevUser=tmnxSysRollbackRescueRevUser, tmnxSysLoginControlV9v0Group=tmnxSysLoginControlV9v0Group, ssiSyncCertLastTime=ssiSyncCertLastTime, tmnxSysRollbackFileComment=tmnxSysRollbackFileComment, slcLoginExponentialBackOff=slcLoginExponentialBackOff, tmnxNotifyObjectName=tmnxNotifyObjectName, tmnxSysNotificationV6v0Group=tmnxSysNotificationV6v0Group, persistencyFileSysThresCleared=persistencyFileSysThresCleared, sysTacplusInfo=sysTacplusInfo, tmnxSysRollbackRescueRevert=tmnxSysRollbackRescueRevert, sysPersistenceNatInfo=sysPersistenceNatInfo, tmnxSysRollbackInfo=tmnxSysRollbackInfo, tmnxSyncFailureReason=tmnxSyncFailureReason, tmnxSysRollbackSavedTime=tmnxSysRollbackSavedTime, sliSaveConfigResult=sliSaveConfigResult, ssiRedFailoverTime=ssiRedFailoverTime, sliSaveConfig=sliSaveConfig, sysLACPInfo=sysLACPInfo, ssiSyncRollbackForce=ssiSyncRollbackForce, tmnxSysRollbackDeleteStarted=tmnxSysRollbackDeleteStarted, sysIcmpVSEnhancement=sysIcmpVSEnhancement, tmnxSysRollbackFileTable=tmnxSysRollbackFileTable, tmnxSysObsoleteNotificationV5v0Group=tmnxSysObsoleteNotificationV5v0Group, spiSubMgmtPersistenceFileLocation=spiSubMgmtPersistenceFileLocation, sbiActiveIpAddr=sbiActiveIpAddr, ssiSyncRollbackMode=ssiSyncRollbackMode, sysSyncInfo=sysSyncInfo, stiSummerZoneName=stiSummerZoneName, sysLACPSystemPriority=sysLACPSystemPriority, tmnxSysGeneralV3v0Group=tmnxSysGeneralV3v0Group, ssiSyncForce=ssiSyncForce, sgiSwMinorVersion=sgiSwMinorVersion, tmnxSysFileErrorType=tmnxSysFileErrorType, tmnxSysV9v0Compliance=tmnxSysV9v0Compliance, sntpServerRowStatus=sntpServerRowStatus, tmnxSysIpv6MgmtItfV6v0Group=tmnxSysIpv6MgmtItfV6v0Group, sntpServerEntry=sntpServerEntry, sliConfigLastSaved=sliConfigLastSaved, ssiSyncConfigFailed=ssiSyncConfigFailed, tacplusServerEntry=tacplusServerEntry, stiDateAndTimeChanged=stiDateAndTimeChanged, radiusServerOperStatus=radiusServerOperStatus, sbiStaticRouteRowStatus=sbiStaticRouteRowStatus, stiSummerZoneEndMonth=stiSummerZoneEndMonth, tmnxPersistenceV4v0Group=tmnxPersistenceV4v0Group, tmnxPersistenceV5v0Group=tmnxPersistenceV5v0Group, stiSummerZoneEndDay=stiSummerZoneEndDay, tmnxStateChange=tmnxStateChange, spiDhcpSrvPersistenceDescr=spiDhcpSrvPersistenceDescr, sbiWait=sbiWait, tmnxConfigModify=tmnxConfigModify, spiDhcpSrvPersistenceFileLoc=spiDhcpSrvPersistenceFileLoc, ssiSaveConfigDest=ssiSaveConfigDest, sysPersistenceInfo=sysPersistenceInfo, ssiRedStandbySyncing=ssiRedStandbySyncing, sysIcmpVSInfo=sysIcmpVSInfo, slcTelnetInboundMaxSessions=slcTelnetInboundMaxSessions, sntpServerAddress=sntpServerAddress, stiSummerZoneStartDate=stiSummerZoneStartDate, stiSummerZoneStartMonth=stiSummerZoneStartMonth, sbiStandbyIpAddr=sbiStandbyIpAddr, tmnxSysRollbackRescueSaveComment=tmnxSysRollbackRescueSaveComment, tmnxSysNotificationRBGroup=tmnxSysNotificationRBGroup, sgiSnmpInGetBulks=sgiSnmpInGetBulks, tmnxSysGeneralV7v0Group=tmnxSysGeneralV7v0Group, sbiBootSnmpd=sbiBootSnmpd, sysSntpInfo=sysSntpInfo, sysBootInfo=sysBootInfo, tmnxSsiMismatch=tmnxSsiMismatch, tmnxNotifyRow=tmnxNotifyRow, tmnxSysRollbackSaveStarted=tmnxSysRollbackSaveStarted, sliConfigLastModified=sliConfigLastModified, sbiSnmpdOperStatus=sbiSnmpdOperStatus, tmnxSysCpuMonEntry=tmnxSysCpuMonEntry, sbiBootLiConfig=sbiBootLiConfig, tmnxSysLoginControlSecGroup=tmnxSysLoginControlSecGroup, tacplusServerOperStatus=tacplusServerOperStatus, tacplusOperStatus=tacplusOperStatus, tmnxSysObsoleteV5v0Group=tmnxSysObsoleteV5v0Group, ssiSyncConfigOK=ssiSyncConfigOK, tmnxSysRollbackFileUserName=tmnxSysRollbackFileUserName, sbiActiveIpMask=sbiActiveIpMask, sysTimeInfo=sysTimeInfo, radiusServerInetAddressType=radiusServerInetAddressType, tmnxSysBofGroup=tmnxSysBofGroup, tmnxSysNotifications=tmnxSysNotifications, slcTelnetGracefulShutdown=slcTelnetGracefulShutdown, tmnxSysRollbackRevertIndex=tmnxSysRollbackRevertIndex, sntpState=sntpState, tmnxSysLoginControlV8v0Group=tmnxSysLoginControlV8v0Group, tmnxSysEthInfoGroup=tmnxSysEthInfoGroup, tmnxSysRollbackFileType=tmnxSysRollbackFileType, tmnxSysExecFinished=tmnxSysExecFinished, tmnxSysNotifyObjsR4r0Group=tmnxSysNotifyObjsR4r0Group, sbiStandbyIPv6PfxLen=sbiStandbyIPv6PfxLen, tacplusServerTable=tacplusServerTable, ssiSaveBof=ssiSaveBof, tmnxSysCpuMonBusyGroupName=tmnxSysCpuMonBusyGroupName, sbiAutoNegotiate=sbiAutoNegotiate)
