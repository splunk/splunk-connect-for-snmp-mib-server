#
# PySNMP MIB module JUNIPER-RPS-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/JUNIPER-RPS-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 19:50:03 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, OctetString, Integer = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "OctetString", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
SingleValueConstraint, ValueRangeConstraint, ValueSizeConstraint, ConstraintsUnion, ConstraintsIntersection = mibBuilder.importSymbols("ASN1-REFINEMENT", "SingleValueConstraint", "ValueRangeConstraint", "ValueSizeConstraint", "ConstraintsUnion", "ConstraintsIntersection")
jnxRPS, = mibBuilder.importSymbols("JUNIPER-EX-SMI", "jnxRPS")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
Integer32, Gauge32, Counter64, ObjectIdentity, IpAddress, MibIdentifier, NotificationType, Counter32, MibScalar, MibTable, MibTableRow, MibTableColumn, Bits, Unsigned32, iso, TimeTicks, ModuleIdentity = mibBuilder.importSymbols("SNMPv2-SMI", "Integer32", "Gauge32", "Counter64", "ObjectIdentity", "IpAddress", "MibIdentifier", "NotificationType", "Counter32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Bits", "Unsigned32", "iso", "TimeTicks", "ModuleIdentity")
TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString")
jnxRPSMIBObjects = ModuleIdentity((1, 3, 6, 1, 4, 1, 2636, 3, 40, 1, 6, 1))
jnxRPSMIBObjects.setRevisions(('2009-08-07 00:00',))
if mibBuilder.loadTexts: jnxRPSMIBObjects.setLastUpdated('200708290000Z')
if mibBuilder.loadTexts: jnxRPSMIBObjects.setOrganization('Juniper Networks, Inc.')
class JnxRPSStatus(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6))
    namedValues = NamedValues(("green", 0), ("red", 1), ("amber", 2), ("green-blink", 3), ("red-blink", 4), ("amber-blink", 5), ("off", 6))

jnxRPSVersionTable = MibTable((1, 3, 6, 1, 4, 1, 2636, 3, 40, 1, 6, 1, 1), )
if mibBuilder.loadTexts: jnxRPSVersionTable.setStatus('current')
jnxRPSVersionEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2636, 3, 40, 1, 6, 1, 1, 1), ).setIndexNames((0, "JUNIPER-RPS-MIB", "jnxRPSSerialNumber"))
if mibBuilder.loadTexts: jnxRPSVersionEntry.setStatus('current')
jnxRPSSerialNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 40, 1, 6, 1, 1, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(12, 12)).setFixedLength(12))
if mibBuilder.loadTexts: jnxRPSSerialNumber.setStatus('current')
jnxRPSModel = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 40, 1, 6, 1, 1, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxRPSModel.setStatus('current')
jnxRPSFirmwareVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 40, 1, 6, 1, 1, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 12))).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxRPSFirmwareVersion.setStatus('current')
jnxRPSUBootVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 40, 1, 6, 1, 1, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 12))).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxRPSUBootVersion.setStatus('current')
jnxRPSStatusTable = MibTable((1, 3, 6, 1, 4, 1, 2636, 3, 40, 1, 6, 1, 2), )
if mibBuilder.loadTexts: jnxRPSStatusTable.setStatus('current')
jnxRPSStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2636, 3, 40, 1, 6, 1, 2, 1), ).setIndexNames((0, "JUNIPER-RPS-MIB", "jnxRPSSerialNumber"))
if mibBuilder.loadTexts: jnxRPSStatusEntry.setStatus('current')
jnxRPSFanStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 40, 1, 6, 1, 2, 1, 1), JnxRPSStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxRPSFanStatus.setStatus('current')
jnxRPSSystemStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 40, 1, 6, 1, 2, 1, 2), JnxRPSStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxRPSSystemStatus.setStatus('current')
jnxRPSPowerSupplyTable = MibTable((1, 3, 6, 1, 4, 1, 2636, 3, 40, 1, 6, 1, 3), )
if mibBuilder.loadTexts: jnxRPSPowerSupplyTable.setStatus('current')
jnxRPSPowerSupplyEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2636, 3, 40, 1, 6, 1, 3, 1), ).setIndexNames((0, "JUNIPER-RPS-MIB", "jnxRPSSerialNumber"), (0, "JUNIPER-RPS-MIB", "jnxRPSPowerSupplyIndex"))
if mibBuilder.loadTexts: jnxRPSPowerSupplyEntry.setStatus('current')
jnxRPSPowerSupplyIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 40, 1, 6, 1, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 3)))
if mibBuilder.loadTexts: jnxRPSPowerSupplyIndex.setStatus('current')
jnxRPSPowerSupplySlotId = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 40, 1, 6, 1, 3, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 3))).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxRPSPowerSupplySlotId.setStatus('current')
jnxRPSPowerSupplyStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 40, 1, 6, 1, 3, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxRPSPowerSupplyStatus.setStatus('current')
jnxRPSPowerSupplyDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 40, 1, 6, 1, 3, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxRPSPowerSupplyDescription.setStatus('current')
jnxRPSLedPortStatusTable = MibTable((1, 3, 6, 1, 4, 1, 2636, 3, 40, 1, 6, 1, 4), )
if mibBuilder.loadTexts: jnxRPSLedPortStatusTable.setStatus('current')
jnxRPSLedPortStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2636, 3, 40, 1, 6, 1, 4, 1), ).setIndexNames((0, "JUNIPER-RPS-MIB", "jnxRPSSerialNumber"), (0, "JUNIPER-RPS-MIB", "jnxRPSLedPortIndex"))
if mibBuilder.loadTexts: jnxRPSLedPortStatusEntry.setStatus('current')
jnxRPSLedPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 40, 1, 6, 1, 4, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 6)))
if mibBuilder.loadTexts: jnxRPSLedPortIndex.setStatus('current')
jnxRPSLedPortStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 40, 1, 6, 1, 4, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxRPSLedPortStatus.setStatus('current')
jnxRPSPortStatusTable = MibTable((1, 3, 6, 1, 4, 1, 2636, 3, 40, 1, 6, 1, 5), )
if mibBuilder.loadTexts: jnxRPSPortStatusTable.setStatus('current')
jnxRPSPortStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2636, 3, 40, 1, 6, 1, 5, 1), ).setIndexNames((0, "JUNIPER-RPS-MIB", "jnxRPSSerialNumber"), (0, "JUNIPER-RPS-MIB", "jnxRPSPortIndex"))
if mibBuilder.loadTexts: jnxRPSPortStatusEntry.setStatus('current')
jnxRPSPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 40, 1, 6, 1, 5, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 6)))
if mibBuilder.loadTexts: jnxRPSPortIndex.setStatus('current')
jnxRPSPortId = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 40, 1, 6, 1, 5, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxRPSPortId.setStatus('current')
jnxRPSPortStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 40, 1, 6, 1, 5, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxRPSPortStatus.setStatus('current')
jnxRPSPortPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 40, 1, 6, 1, 5, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxRPSPortPriority.setStatus('current')
jnxRPSPortPowerRequested = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 40, 1, 6, 1, 5, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxRPSPortPowerRequested.setStatus('current')
mibBuilder.exportSymbols("JUNIPER-RPS-MIB", jnxRPSPowerSupplyDescription=jnxRPSPowerSupplyDescription, jnxRPSPortStatusTable=jnxRPSPortStatusTable, jnxRPSModel=jnxRPSModel, jnxRPSSystemStatus=jnxRPSSystemStatus, jnxRPSLedPortIndex=jnxRPSLedPortIndex, jnxRPSVersionEntry=jnxRPSVersionEntry, jnxRPSMIBObjects=jnxRPSMIBObjects, jnxRPSLedPortStatus=jnxRPSLedPortStatus, jnxRPSStatusTable=jnxRPSStatusTable, jnxRPSSerialNumber=jnxRPSSerialNumber, jnxRPSPowerSupplyTable=jnxRPSPowerSupplyTable, jnxRPSPowerSupplyIndex=jnxRPSPowerSupplyIndex, jnxRPSVersionTable=jnxRPSVersionTable, jnxRPSPortPowerRequested=jnxRPSPortPowerRequested, jnxRPSLedPortStatusTable=jnxRPSLedPortStatusTable, jnxRPSUBootVersion=jnxRPSUBootVersion, jnxRPSStatusEntry=jnxRPSStatusEntry, PYSNMP_MODULE_ID=jnxRPSMIBObjects, jnxRPSFanStatus=jnxRPSFanStatus, jnxRPSPowerSupplyEntry=jnxRPSPowerSupplyEntry, jnxRPSPortStatusEntry=jnxRPSPortStatusEntry, jnxRPSPortStatus=jnxRPSPortStatus, jnxRPSPortPriority=jnxRPSPortPriority, jnxRPSPowerSupplySlotId=jnxRPSPowerSupplySlotId, jnxRPSFirmwareVersion=jnxRPSFirmwareVersion, jnxRPSPortIndex=jnxRPSPortIndex, jnxRPSPortId=jnxRPSPortId, jnxRPSLedPortStatusEntry=jnxRPSLedPortStatusEntry, JnxRPSStatus=JnxRPSStatus, jnxRPSPowerSupplyStatus=jnxRPSPowerSupplyStatus)
