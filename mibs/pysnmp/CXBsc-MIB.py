#
# PySNMP MIB module CXBsc-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/CXBsc-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 18:16:41 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, OctetString, Integer = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "OctetString", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueSizeConstraint, ConstraintsUnion, ConstraintsIntersection, SingleValueConstraint, ValueRangeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueSizeConstraint", "ConstraintsUnion", "ConstraintsIntersection", "SingleValueConstraint", "ValueRangeConstraint")
SapIndex, cxBsc, Alias = mibBuilder.importSymbols("CXProduct-SMI", "SapIndex", "cxBsc", "Alias")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
ObjectIdentity, MibScalar, MibTable, MibTableRow, MibTableColumn, Counter32, Integer32, Unsigned32, MibIdentifier, ModuleIdentity, iso, NotificationType, IpAddress, Gauge32, Bits, TimeTicks, Counter64 = mibBuilder.importSymbols("SNMPv2-SMI", "ObjectIdentity", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Counter32", "Integer32", "Unsigned32", "MibIdentifier", "ModuleIdentity", "iso", "NotificationType", "IpAddress", "Gauge32", "Bits", "TimeTicks", "Counter64")
DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention")
class BscCuIndex(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ValueRangeConstraint(0, 64)

class BscDevIndex(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ValueRangeConstraint(0, 127)

class BscRowStatus(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2))
    namedValues = NamedValues(("invalid", 1), ("valid", 2))

class BscAckMode(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2))
    namedValues = NamedValues(("endToEnd", 1), ("local", 2))

class BscOperationalMode(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2))
    namedValues = NamedValues(("offline", 1), ("online", 2))

class BscBlockSize(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))
    namedValues = NamedValues(("block128", 1), ("block256", 2), ("block512", 3), ("block1k", 4), ("block2k", 5), ("block3000", 6), ("block5k", 7))

class BscStatusSense(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2))
    namedValues = NamedValues(("notSet", 1), ("isSet", 2))

bscSapTable = MibTable((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 56, 10), )
if mibBuilder.loadTexts: bscSapTable.setStatus('mandatory')
bscSapEntry = MibTableRow((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 56, 10, 1), ).setIndexNames((0, "CXBsc-MIB", "bscSapNumber"))
if mibBuilder.loadTexts: bscSapEntry.setStatus('mandatory')
bscSapNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 56, 10, 1, 1), SapIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bscSapNumber.setStatus('mandatory')
bscSapRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 56, 10, 1, 2), BscRowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bscSapRowStatus.setStatus('mandatory')
bscSapType = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 56, 10, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("lower", 1), ("upper", 2))).clone('lower')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bscSapType.setStatus('mandatory')
bscSapInterfaceType = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 56, 10, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("terminalInterfaceUnit", 1), ("hostInterfaceUnit", 2))).clone('terminalInterfaceUnit')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bscSapInterfaceType.setStatus('mandatory')
bscSapAlias = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 56, 10, 1, 5), Alias()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bscSapAlias.setStatus('mandatory')
bscSapCompanionAlias = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 56, 10, 1, 6), Alias()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bscSapCompanionAlias.setStatus('mandatory')
bscSapSnalcRef = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 56, 10, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 8))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bscSapSnalcRef.setStatus('mandatory')
bscPollIntAfterAckTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 56, 10, 1, 8), TimeTicks()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bscPollIntAfterAckTimer.setStatus('mandatory')
bscSapControl = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 56, 10, 1, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("clearStats", 1)))).setMaxAccess("writeonly")
if mibBuilder.loadTexts: bscSapControl.setStatus('mandatory')
bscSapOperationalMode = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 56, 10, 1, 30), BscOperationalMode()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bscSapOperationalMode.setStatus('mandatory')
bscSapLinkStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 56, 10, 1, 31), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("down", 1), ("up", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: bscSapLinkStatus.setStatus('mandatory')
bscSapLinkChange = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 56, 10, 1, 40), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bscSapLinkChange.setStatus('mandatory')
bscSapOverrun = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 56, 10, 1, 41), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bscSapOverrun.setStatus('mandatory')
bscSapParityError = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 56, 10, 1, 42), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bscSapParityError.setStatus('mandatory')
bscSapCrcError = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 56, 10, 1, 43), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bscSapCrcError.setStatus('mandatory')
bscSapBlockReject = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 56, 10, 1, 44), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bscSapBlockReject.setStatus('mandatory')
bscCuTable = MibTable((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 56, 11), )
if mibBuilder.loadTexts: bscCuTable.setStatus('mandatory')
bscCuEntry = MibTableRow((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 56, 11, 1), ).setIndexNames((0, "CXBsc-MIB", "bscCuSapNumber"), (0, "CXBsc-MIB", "bscCuNumber"))
if mibBuilder.loadTexts: bscCuEntry.setStatus('mandatory')
bscCuSapNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 56, 11, 1, 1), SapIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bscCuSapNumber.setStatus('mandatory')
bscCuNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 56, 11, 1, 2), BscCuIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bscCuNumber.setStatus('mandatory')
bscCuRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 56, 11, 1, 3), BscRowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bscCuRowStatus.setStatus('mandatory')
bscCuHwdType = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 56, 11, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("cu3271", 1), ("cu3274", 2), ("cu3275", 3), ("cu3276", 4), ("cuMES", 5))).clone('cu3275')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bscCuHwdType.setStatus('mandatory')
bscCuMaxBlockLength = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 56, 11, 1, 5), BscBlockSize().clone('block256')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bscCuMaxBlockLength.setStatus('mandatory')
bscCuPollTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 56, 11, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 250)).clone(30)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bscCuPollTimeout.setStatus('mandatory')
bscCuDelayTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 56, 11, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 250)).clone(20)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bscCuDelayTimer.setStatus('mandatory')
bscCuRetryCounter = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 56, 11, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 50)).clone(3)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bscCuRetryCounter.setStatus('mandatory')
bscCuETBAck = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 56, 11, 1, 9), BscAckMode().clone('local')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bscCuETBAck.setStatus('mandatory')
bscCuETXAck = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 56, 11, 1, 10), BscAckMode().clone('endToEnd')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bscCuETXAck.setStatus('mandatory')
bscCuControl = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 56, 11, 1, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("clearStats", 1)))).setMaxAccess("writeonly")
if mibBuilder.loadTexts: bscCuControl.setStatus('mandatory')
bscCuOperationalMode = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 56, 11, 1, 30), BscOperationalMode()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bscCuOperationalMode.setStatus('mandatory')
bscCuConnectionStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 56, 11, 1, 31), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("nonExistantX25Connection", 1), ("snalcConnectionRequested", 2), ("snalcConnectionConfirmationSent", 3), ("x25ConnectionEstablished", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: bscCuConnectionStatus.setStatus('mandatory')
bscCuConnectRequest = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 56, 11, 1, 45), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bscCuConnectRequest.setStatus('mandatory')
bscCuDisconnectRequest = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 56, 11, 1, 46), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bscCuDisconnectRequest.setStatus('mandatory')
bscCuDisconnectIndication = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 56, 11, 1, 47), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bscCuDisconnectIndication.setStatus('mandatory')
bscCuEndToEndConnectCnf = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 56, 11, 1, 48), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bscCuEndToEndConnectCnf.setStatus('mandatory')
bscCuSnalcRxRnr = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 56, 11, 1, 49), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bscCuSnalcRxRnr.setStatus('mandatory')
bscCuSnalcRxRr = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 56, 11, 1, 50), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bscCuSnalcRxRr.setStatus('mandatory')
bscDevTable = MibTable((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 56, 12), )
if mibBuilder.loadTexts: bscDevTable.setStatus('mandatory')
bscDevEntry = MibTableRow((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 56, 12, 1), ).setIndexNames((0, "CXBsc-MIB", "bscDevSapNumber"), (0, "CXBsc-MIB", "bscDevCuNumber"), (0, "CXBsc-MIB", "bscDevNumber"))
if mibBuilder.loadTexts: bscDevEntry.setStatus('mandatory')
bscDevSapNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 56, 12, 1, 1), SapIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bscDevSapNumber.setStatus('mandatory')
bscDevCuNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 56, 12, 1, 2), BscCuIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bscDevCuNumber.setStatus('mandatory')
bscDevNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 56, 12, 1, 3), BscDevIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bscDevNumber.setStatus('mandatory')
bscDevRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 56, 12, 1, 4), BscRowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bscDevRowStatus.setStatus('mandatory')
bscDevType = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 56, 12, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("display", 1), ("printer", 2))).clone('display')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bscDevType.setStatus('mandatory')
bscDevControl = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 56, 12, 1, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("clearStats", 1)))).setMaxAccess("writeonly")
if mibBuilder.loadTexts: bscDevControl.setStatus('mandatory')
bscDevOperationalMode = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 56, 12, 1, 30), BscOperationalMode()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bscDevOperationalMode.setStatus('mandatory')
bscDevConnectionStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 56, 12, 1, 31), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("nonExistantLogicalConnection", 1), ("circuitRequestSent", 2), ("circuitEnableReceived", 3), ("circuitEnableSent", 4), ("dataMode", 5))).clone('nonExistantLogicalConnection')).setMaxAccess("readonly")
if mibBuilder.loadTexts: bscDevConnectionStatus.setStatus('mandatory')
bscDevState = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 56, 12, 1, 32), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29))).clone(namedValues=NamedValues(("hiuWaitForNextPoll", 1), ("hiuWaitingForStatusSenseAcknowledgment", 2), ("hiuSendNextMessageOnAcknowledgment", 3), ("hiuSendEotOnAcknowledgment", 4), ("hiuReceiveCommandMode", 5), ("hiuReadWaitForResponse", 6), ("hiuWaitForCuReadEtx", 7), ("hiuSendNextTransparent", 8), ("hiuWaitingForRviResponse", 9), ("hiuWaitingForWackResponse", 10), ("hiuSendNextOnNak", 11), ("hiuDeviceStateReserved-1", 12), ("hiuDeviceStateReserved-2", 13), ("hiuDeviceStateReserved-3", 14), ("tiuWaitForNextPoll", 15), ("tiuSentSpecificPoll", 16), ("tiuSentSelectivePoll", 17), ("tiuStatusSenseReceived", 18), ("tiuSendNextMessageOnAcknowledgment", 19), ("tiuSendEotOnTransparentAcknowledgment", 20), ("tiuSendEotOnAcknowledgment", 21), ("tiuDataPending", 22), ("tiuReceivingCommand", 23), ("tiuParityCursorCheckDetected", 24), ("tiuReadWaitForResponse", 25), ("tiuWaitingForSnalcData", 26), ("tiuSendNextAfterNak", 27), ("tiuTerminatePolling", 28), ("tiuEndTestRequest", 29)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: bscDevState.setStatus('mandatory')
bscDevSSDeviceBusy = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 56, 12, 1, 33), BscStatusSense().clone('notSet')).setMaxAccess("readonly")
if mibBuilder.loadTexts: bscDevSSDeviceBusy.setStatus('mandatory')
bscDevSSUnitSpecify = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 56, 12, 1, 34), BscStatusSense().clone('notSet')).setMaxAccess("readonly")
if mibBuilder.loadTexts: bscDevSSUnitSpecify.setStatus('mandatory')
bscDevSSDeviceEnd = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 56, 12, 1, 35), BscStatusSense().clone('notSet')).setMaxAccess("readonly")
if mibBuilder.loadTexts: bscDevSSDeviceEnd.setStatus('mandatory')
bscDevSSTransmissionCheck = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 56, 12, 1, 36), BscStatusSense().clone('notSet')).setMaxAccess("readonly")
if mibBuilder.loadTexts: bscDevSSTransmissionCheck.setStatus('mandatory')
bscDevSSCommandReject = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 56, 12, 1, 37), BscStatusSense().clone('notSet')).setMaxAccess("readonly")
if mibBuilder.loadTexts: bscDevSSCommandReject.setStatus('mandatory')
bscDevSSInterventionRequired = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 56, 12, 1, 38), BscStatusSense().clone('notSet')).setMaxAccess("readonly")
if mibBuilder.loadTexts: bscDevSSInterventionRequired.setStatus('mandatory')
bscDevSSEquipmentCheck = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 56, 12, 1, 39), BscStatusSense().clone('notSet')).setMaxAccess("readonly")
if mibBuilder.loadTexts: bscDevSSEquipmentCheck.setStatus('mandatory')
bscDevSSDataCheck = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 56, 12, 1, 40), BscStatusSense().clone('notSet')).setMaxAccess("readonly")
if mibBuilder.loadTexts: bscDevSSDataCheck.setStatus('mandatory')
bscDevSSControlCheck = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 56, 12, 1, 41), BscStatusSense().clone('notSet')).setMaxAccess("readonly")
if mibBuilder.loadTexts: bscDevSSControlCheck.setStatus('mandatory')
bscDevSSOperationCheck = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 56, 12, 1, 42), BscStatusSense().clone('notSet')).setMaxAccess("readonly")
if mibBuilder.loadTexts: bscDevSSOperationCheck.setStatus('mandatory')
bscDevGeneralPoll = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 56, 12, 1, 60), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bscDevGeneralPoll.setStatus('mandatory')
bscDevSpecificPoll = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 56, 12, 1, 61), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bscDevSpecificPoll.setStatus('mandatory')
bscDevDeviceSelection = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 56, 12, 1, 62), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bscDevDeviceSelection.setStatus('mandatory')
bscDevTestRequest = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 56, 12, 1, 63), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bscDevTestRequest.setStatus('mandatory')
bscDevHostWrite = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 56, 12, 1, 64), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bscDevHostWrite.setStatus('mandatory')
bscDevHostRead = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 56, 12, 1, 65), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bscDevHostRead.setStatus('mandatory')
bscDevHostControl = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 56, 12, 1, 66), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bscDevHostControl.setStatus('mandatory')
bscDevCuShortRead = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 56, 12, 1, 67), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bscDevCuShortRead.setStatus('mandatory')
bscDevTxBlocks = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 56, 12, 1, 68), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bscDevTxBlocks.setStatus('mandatory')
bscDevRxBlocks = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 56, 12, 1, 69), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bscDevRxBlocks.setStatus('mandatory')
bscDevStatusSense = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 56, 12, 1, 70), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bscDevStatusSense.setStatus('mandatory')
bscDevError = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 56, 12, 1, 71), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bscDevError.setStatus('mandatory')
bscDevErrTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 56, 12, 1, 72), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bscDevErrTimeout.setStatus('mandatory')
bscDevCircuitEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 56, 12, 1, 73), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bscDevCircuitEnable.setStatus('mandatory')
bscDevCircuitDisconnect = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 56, 12, 1, 74), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bscDevCircuitDisconnect.setStatus('mandatory')
bscDevCircuitRequest = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 56, 12, 1, 75), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bscDevCircuitRequest.setStatus('mandatory')
bscDevTxCommands = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 56, 12, 1, 76), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bscDevTxCommands.setStatus('mandatory')
bscDevRxCommands = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 56, 12, 1, 77), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bscDevRxCommands.setStatus('mandatory')
bscDevCommandsQueued = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 56, 12, 1, 78), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bscDevCommandsQueued.setStatus('mandatory')
bscDevBlocksQueued = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 56, 12, 1, 79), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bscDevBlocksQueued.setStatus('mandatory')
bscDevTxRvi = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 56, 12, 1, 80), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bscDevTxRvi.setStatus('mandatory')
bscDevRxRvi = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 56, 12, 1, 81), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bscDevRxRvi.setStatus('mandatory')
bscDevTxTtd = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 56, 12, 1, 82), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bscDevTxTtd.setStatus('mandatory')
bscDevRxTtd = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 56, 12, 1, 83), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bscDevRxTtd.setStatus('mandatory')
bscDevTxWack = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 56, 12, 1, 84), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bscDevTxWack.setStatus('mandatory')
bscDevRxWack = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 56, 12, 1, 85), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bscDevRxWack.setStatus('mandatory')
mibBuilder.exportSymbols("CXBsc-MIB", bscDevRxWack=bscDevRxWack, bscDevRowStatus=bscDevRowStatus, bscDevHostRead=bscDevHostRead, bscDevSSOperationCheck=bscDevSSOperationCheck, bscSapLinkChange=bscSapLinkChange, bscSapControl=bscSapControl, bscPollIntAfterAckTimer=bscPollIntAfterAckTimer, bscDevRxCommands=bscDevRxCommands, bscDevSSDeviceBusy=bscDevSSDeviceBusy, bscDevCircuitRequest=bscDevCircuitRequest, bscDevTxRvi=bscDevTxRvi, bscSapCompanionAlias=bscSapCompanionAlias, bscDevTxCommands=bscDevTxCommands, bscSapParityError=bscSapParityError, bscDevState=bscDevState, bscDevCircuitDisconnect=bscDevCircuitDisconnect, BscBlockSize=BscBlockSize, bscCuConnectionStatus=bscCuConnectionStatus, bscDevSSInterventionRequired=bscDevSSInterventionRequired, bscSapOverrun=bscSapOverrun, bscDevCommandsQueued=bscDevCommandsQueued, bscDevTxTtd=bscDevTxTtd, BscRowStatus=BscRowStatus, bscSapAlias=bscSapAlias, bscSapBlockReject=bscSapBlockReject, bscCuMaxBlockLength=bscCuMaxBlockLength, bscDevSpecificPoll=bscDevSpecificPoll, bscCuEntry=bscCuEntry, BscOperationalMode=BscOperationalMode, bscSapLinkStatus=bscSapLinkStatus, bscCuOperationalMode=bscCuOperationalMode, bscDevCircuitEnable=bscDevCircuitEnable, bscCuSnalcRxRnr=bscCuSnalcRxRnr, bscDevSapNumber=bscDevSapNumber, bscSapType=bscSapType, bscDevSSCommandReject=bscDevSSCommandReject, bscDevConnectionStatus=bscDevConnectionStatus, bscCuEndToEndConnectCnf=bscCuEndToEndConnectCnf, bscDevTable=bscDevTable, bscDevRxBlocks=bscDevRxBlocks, bscSapRowStatus=bscSapRowStatus, bscSapInterfaceType=bscSapInterfaceType, bscCuSnalcRxRr=bscCuSnalcRxRr, bscSapOperationalMode=bscSapOperationalMode, bscDevTestRequest=bscDevTestRequest, bscDevOperationalMode=bscDevOperationalMode, bscDevRxRvi=bscDevRxRvi, BscAckMode=BscAckMode, bscCuRetryCounter=bscCuRetryCounter, bscDevNumber=bscDevNumber, bscSapNumber=bscSapNumber, bscDevTxWack=bscDevTxWack, bscDevSSControlCheck=bscDevSSControlCheck, bscCuPollTimeout=bscCuPollTimeout, bscCuETBAck=bscCuETBAck, bscDevHostWrite=bscDevHostWrite, bscDevSSTransmissionCheck=bscDevSSTransmissionCheck, bscSapSnalcRef=bscSapSnalcRef, bscDevGeneralPoll=bscDevGeneralPoll, bscCuControl=bscCuControl, bscDevBlocksQueued=bscDevBlocksQueued, BscStatusSense=BscStatusSense, bscDevControl=bscDevControl, bscDevError=bscDevError, bscDevDeviceSelection=bscDevDeviceSelection, bscSapTable=bscSapTable, bscSapCrcError=bscSapCrcError, bscCuNumber=bscCuNumber, bscCuDelayTimer=bscCuDelayTimer, bscCuDisconnectRequest=bscCuDisconnectRequest, bscCuHwdType=bscCuHwdType, bscDevEntry=bscDevEntry, bscCuDisconnectIndication=bscCuDisconnectIndication, bscDevRxTtd=bscDevRxTtd, bscCuConnectRequest=bscCuConnectRequest, bscDevStatusSense=bscDevStatusSense, bscDevHostControl=bscDevHostControl, bscSapEntry=bscSapEntry, bscCuSapNumber=bscCuSapNumber, bscDevSSEquipmentCheck=bscDevSSEquipmentCheck, bscCuTable=bscCuTable, BscDevIndex=BscDevIndex, bscDevCuNumber=bscDevCuNumber, bscDevErrTimeout=bscDevErrTimeout, bscDevSSDataCheck=bscDevSSDataCheck, bscDevType=bscDevType, bscCuETXAck=bscCuETXAck, bscDevCuShortRead=bscDevCuShortRead, BscCuIndex=BscCuIndex, bscDevTxBlocks=bscDevTxBlocks, bscCuRowStatus=bscCuRowStatus, bscDevSSUnitSpecify=bscDevSSUnitSpecify, bscDevSSDeviceEnd=bscDevSSDeviceEnd)
