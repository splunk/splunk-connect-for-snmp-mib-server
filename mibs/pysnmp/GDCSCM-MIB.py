#
# PySNMP MIB module GDCSCM-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/GDCSCM-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 19:05:43 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, ObjectIdentifier, Integer = mibBuilder.importSymbols("ASN1", "OctetString", "ObjectIdentifier", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
SingleValueConstraint, ConstraintsUnion, ValueSizeConstraint, ConstraintsIntersection, ValueRangeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "SingleValueConstraint", "ConstraintsUnion", "ValueSizeConstraint", "ConstraintsIntersection", "ValueRangeConstraint")
SCinstance, = mibBuilder.importSymbols("GDCMACRO-MIB", "SCinstance")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
Bits, Unsigned32, iso, enterprises, Gauge32, MibIdentifier, IpAddress, TimeTicks, ModuleIdentity, Counter64, NotificationType, Integer32, Counter32, ObjectIdentity, MibScalar, MibTable, MibTableRow, MibTableColumn, NotificationType = mibBuilder.importSymbols("SNMPv2-SMI", "Bits", "Unsigned32", "iso", "enterprises", "Gauge32", "MibIdentifier", "IpAddress", "TimeTicks", "ModuleIdentity", "Counter64", "NotificationType", "Integer32", "Counter32", "ObjectIdentity", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "NotificationType")
DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention")
gdc = MibIdentifier((1, 3, 6, 1, 4, 1, 498))
sc = MibIdentifier((1, 3, 6, 1, 4, 1, 498, 3))
scmSystem = MibIdentifier((1, 3, 6, 1, 4, 1, 498, 3, 6))
scmVersion = MibIdentifier((1, 3, 6, 1, 4, 1, 498, 3, 6, 1))
scmMaster = MibIdentifier((1, 3, 6, 1, 4, 1, 498, 3, 6, 2))
scmNode = MibIdentifier((1, 3, 6, 1, 4, 1, 498, 3, 6, 3))
scmShelf = MibIdentifier((1, 3, 6, 1, 4, 1, 498, 3, 6, 4))
scmAlmTrap = MibIdentifier((1, 3, 6, 1, 4, 1, 498, 3, 6, 5))
scmRedundancy = MibIdentifier((1, 3, 6, 1, 4, 1, 498, 3, 6, 6))
scmMIBVersion = MibScalar((1, 3, 6, 1, 4, 1, 498, 3, 6, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(5, 5)).setFixedLength(5)).setMaxAccess("readonly")
if mibBuilder.loadTexts: scmMIBVersion.setStatus('mandatory')
scmBootVersion = MibScalar((1, 3, 6, 1, 4, 1, 498, 3, 6, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(5, 5)).setFixedLength(5)).setMaxAccess("readonly")
if mibBuilder.loadTexts: scmBootVersion.setStatus('mandatory')
scmApplVersion = MibScalar((1, 3, 6, 1, 4, 1, 498, 3, 6, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(5, 5)).setFixedLength(5)).setMaxAccess("readonly")
if mibBuilder.loadTexts: scmApplVersion.setStatus('mandatory')
scmMasterTimeout = MibScalar((1, 3, 6, 1, 4, 1, 498, 3, 6, 2, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(15, 100))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: scmMasterTimeout.setStatus('mandatory')
scmAlarmScan = MibScalar((1, 3, 6, 1, 4, 1, 498, 3, 6, 2, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("alarmScanOn", 1), ("alarmScanOff", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: scmAlarmScan.setStatus('mandatory')
scmTime = MibScalar((1, 3, 6, 1, 4, 1, 498, 3, 6, 2, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(8, 8)).setFixedLength(8)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: scmTime.setStatus('obsolete')
scmDate = MibScalar((1, 3, 6, 1, 4, 1, 498, 3, 6, 2, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(8, 8)).setFixedLength(8)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: scmDate.setStatus('obsolete')
scmRedundant = MibScalar((1, 3, 6, 1, 4, 1, 498, 3, 6, 2, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("redundant", 1), ("primary", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: scmRedundant.setStatus('mandatory')
scmShelfNumber = MibScalar((1, 3, 6, 1, 4, 1, 498, 3, 6, 2, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("oneShelf", 1), ("twoShelf", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: scmShelfNumber.setStatus('mandatory')
scmReset = MibScalar((1, 3, 6, 1, 4, 1, 498, 3, 6, 2, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("normal", 1), ("reset", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: scmReset.setStatus('mandatory')
scmPowerAvail = MibScalar((1, 3, 6, 1, 4, 1, 498, 3, 6, 2, 8), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scmPowerAvail.setStatus('mandatory')
scmDefaultConfig = MibScalar((1, 3, 6, 1, 4, 1, 498, 3, 6, 2, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("normal", 1), ("factoryApplDefault", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: scmDefaultConfig.setStatus('mandatory')
scmPowerConsum = MibScalar((1, 3, 6, 1, 4, 1, 498, 3, 6, 2, 10), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scmPowerConsum.setStatus('mandatory')
scmCannedConfig = MibScalar((1, 3, 6, 1, 4, 1, 498, 3, 6, 2, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("cannedConfigNone", 1), ("cannedConfig1", 2), ("cannedConfig2", 3), ("cannedConfig3", 4), ("cannedConfig4", 5), ("cannedConfig5", 6), ("cannedConfig6", 7), ("cannedConfig7", 8)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: scmCannedConfig.setStatus('mandatory')
scmSetNetworkElementRealTime = MibScalar((1, 3, 6, 1, 4, 1, 498, 3, 6, 2, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: scmSetNetworkElementRealTime.setStatus('mandatory')
scmDownLoadCode = MibScalar((1, 3, 6, 1, 4, 1, 498, 3, 6, 2, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: scmDownLoadCode.setStatus('mandatory')
scmOperatingMode = MibScalar((1, 3, 6, 1, 4, 1, 498, 3, 6, 2, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("active", 1), ("standby", 2), ("sleep", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: scmOperatingMode.setStatus('mandatory')
scmAliveTrapInterval = MibScalar((1, 3, 6, 1, 4, 1, 498, 3, 6, 2, 15), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 60))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: scmAliveTrapInterval.setStatus('mandatory')
scmRedundantTimeOut = MibScalar((1, 3, 6, 1, 4, 1, 498, 3, 6, 2, 16), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 300))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: scmRedundantTimeOut.setStatus('mandatory')
scmTelnet = MibScalar((1, 3, 6, 1, 4, 1, 498, 3, 6, 2, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: scmTelnet.setStatus('mandatory')
scmTextAlarmTraps = MibScalar((1, 3, 6, 1, 4, 1, 498, 3, 6, 2, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disable", 1), ("enable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: scmTextAlarmTraps.setStatus('mandatory')
scmNodeTable = MibTable((1, 3, 6, 1, 4, 1, 498, 3, 6, 3, 2), )
if mibBuilder.loadTexts: scmNodeTable.setStatus('mandatory')
scmNodeEntry = MibTableRow((1, 3, 6, 1, 4, 1, 498, 3, 6, 3, 2, 1), ).setIndexNames((0, "GDCSCM-MIB", "scmNodeIndex"))
if mibBuilder.loadTexts: scmNodeEntry.setStatus('mandatory')
scmNodeIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 3, 6, 3, 2, 1, 1), SCinstance()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scmNodeIndex.setStatus('mandatory')
scmNodeType = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 3, 6, 3, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72))).clone(namedValues=NamedValues(("vf288", 1), ("sc5001", 2), ("sc5520", 3), ("datx2011", 4), ("nms520", 5), ("sc700G2", 6), ("sc700G3", 7), ("dc730D1", 8), ("dc730D2", 9), ("dc720G1", 10), ("dc720G2", 11), ("sc616", 12), ("dc610", 13), ("dc612", 14), ("sc702G2", 15), ("nms510", 16), ("sc5034", 17), ("scdualV34", 18), ("sc613", 19), ("sc5553", 20), ("sc611", 21), ("dc621", 22), ("sc710d2", 23), ("sc700g2RP", 24), ("nms553", 25), ("sc710d2rp", 26), ("dc720g2rp", 27), ("dc730d2rp", 28), ("mp7002", 29), ("uas7616NZ", 30), ("scm", 31), ("sc521", 32), ("sc5002", 33), ("dc610NZ", 34), ("mp7001", 35), ("sc701T2", 36), ("sc701T2RP", 37), ("dc721T1", 38), ("dc721T2", 39), ("dc721T2RP", 40), ("dc731D1", 41), ("dc731D2", 42), ("dc731D2RP", 43), ("uas7616TA", 44), ("uas7616", 45), ("sc553", 46), ("notlocallymanaged", 47), ("uas7624", 48), ("hdsl700AG2", 49), ("hdsl700AG2NZ", 50), ("uas7626", 51), ("ntu2m", 52), ("uas7022", 53), ("gt128", 54), ("gt128NZ", 55), ("sc5090", 56), ("gt1030", 57), ("gt2030", 58), ("sc800T3", 59), ("uas7722", 60), ("sc5034A", 61), ("gt1020", 62), ("gt2020", 63), ("sc711D2", 64), ("sc202", 65), ("sc521A", 66), ("uas7722xr", 67), ("gt1030xr", 68), ("uas780g2", 69), ("gt1830", 70), ("sc5506", 71), ("sc5516", 72)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: scmNodeType.setStatus('mandatory')
scmNodeConfigCs = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 3, 6, 3, 2, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(2, 2)).setFixedLength(2)).setMaxAccess("readonly")
if mibBuilder.loadTexts: scmNodeConfigCs.setStatus('mandatory')
scmNodeStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 3, 6, 3, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("valid", 1), ("invalid", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: scmNodeStatus.setStatus('mandatory')
scmNodeAlarmScan = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 3, 6, 3, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("on", 1), ("off", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: scmNodeAlarmScan.setStatus('mandatory')
scmNodeLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 3, 6, 3, 2, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: scmNodeLevel.setStatus('mandatory')
scmNodeConfigChecksumStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 3, 6, 3, 2, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("correct", 1), ("incorrect", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: scmNodeConfigChecksumStatus.setStatus('mandatory')
scmNodeCurrentAlarms = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 3, 6, 3, 2, 1, 8), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: scmNodeCurrentAlarms.setStatus('mandatory')
scmNodeSerialNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 3, 6, 3, 2, 1, 9), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(16, 16)).setFixedLength(16)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: scmNodeSerialNumber.setStatus('mandatory')
scmNodeAdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 3, 6, 3, 2, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("up", 1), ("down", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: scmNodeAdminStatus.setStatus('mandatory')
scmNodeOperStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 3, 6, 3, 2, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("up", 1), ("down", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: scmNodeOperStatus.setStatus('mandatory')
scmSlotTable = MibTable((1, 3, 6, 1, 4, 1, 498, 3, 6, 4, 1), )
if mibBuilder.loadTexts: scmSlotTable.setStatus('mandatory')
scmSlotEntry = MibTableRow((1, 3, 6, 1, 4, 1, 498, 3, 6, 4, 1, 1), ).setIndexNames((0, "GDCSCM-MIB", "scmSlotNumber"))
if mibBuilder.loadTexts: scmSlotEntry.setStatus('mandatory')
scmSlotNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 3, 6, 4, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: scmSlotNumber.setStatus('mandatory')
scmSlotState = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 3, 6, 4, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("activestate", 1), ("inactivestate", 2), ("activeerrorstate", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: scmSlotState.setStatus('mandatory')
scmAlarmText = MibScalar((1, 3, 6, 1, 4, 1, 498, 3, 6, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(100, 100)).setFixedLength(100)).setMaxAccess("readonly")
if mibBuilder.loadTexts: scmAlarmText.setStatus('mandatory')
scmAlarmTrap = NotificationType((1, 3, 6, 1, 4, 1, 498, 3, 6) + (0,1)).setObjects(("GDCSCM-MIB", "scmNodeCurrentAlarms"))
scmExpressPollTrap = NotificationType((1, 3, 6, 1, 4, 1, 498, 3, 6) + (0,2)).setObjects(("GDCSCM-MIB", "scmSlotState"))
scmPowerSupplyTrap = NotificationType((1, 3, 6, 1, 4, 1, 498, 3, 6) + (0,3)).setObjects(("GDCSCM-MIB", "scmPowerAvail"))
scmAliveTrap = NotificationType((1, 3, 6, 1, 4, 1, 498, 3, 6) + (0,4)).setObjects(("GDCSCM-MIB", "scmOperatingMode"), ("GDCSCM-MIB", "scmAliveTrapInterval"))
scmConfigChksumTrap = NotificationType((1, 3, 6, 1, 4, 1, 498, 3, 6) + (0,5)).setObjects(("GDCSCM-MIB", "scmNodeIndex"))
scmAlarmTextTrap = NotificationType((1, 3, 6, 1, 4, 1, 498, 3, 6) + (0,6)).setObjects(("GDCSCM-MIB", "scmAlarmText"))
scmRedundancyTable = MibTable((1, 3, 6, 1, 4, 1, 498, 3, 6, 6, 2), )
if mibBuilder.loadTexts: scmRedundancyTable.setStatus('mandatory')
scmRedundancyEntry = MibTableRow((1, 3, 6, 1, 4, 1, 498, 3, 6, 6, 2, 1), ).setIndexNames((0, "GDCSCM-MIB", "scmRedundancyIndex"))
if mibBuilder.loadTexts: scmRedundancyEntry.setStatus('mandatory')
scmRedundancyIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 3, 6, 6, 2, 1, 1), SCinstance()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scmRedundancyIndex.setStatus('mandatory')
scmEtherIPAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 3, 6, 6, 2, 1, 2), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scmEtherIPAddress.setStatus('mandatory')
scmPPPIPAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 3, 6, 6, 2, 1, 3), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scmPPPIPAddress.setStatus('mandatory')
scmRedundancySwitch = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 3, 6, 6, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("redundant", 1), ("primary", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: scmRedundancySwitch.setStatus('mandatory')
mibBuilder.exportSymbols("GDCSCM-MIB", scmShelfNumber=scmShelfNumber, scmPowerSupplyTrap=scmPowerSupplyTrap, scmDownLoadCode=scmDownLoadCode, scmOperatingMode=scmOperatingMode, scmRedundant=scmRedundant, scmCannedConfig=scmCannedConfig, scmAlarmScan=scmAlarmScan, scmDate=scmDate, scmNodeCurrentAlarms=scmNodeCurrentAlarms, scmSlotEntry=scmSlotEntry, scmPPPIPAddress=scmPPPIPAddress, scmEtherIPAddress=scmEtherIPAddress, scmRedundantTimeOut=scmRedundantTimeOut, scmNodeAlarmScan=scmNodeAlarmScan, scmBootVersion=scmBootVersion, scmDefaultConfig=scmDefaultConfig, scmApplVersion=scmApplVersion, scmAlarmText=scmAlarmText, gdc=gdc, sc=sc, scmTelnet=scmTelnet, scmNodeTable=scmNodeTable, scmPowerAvail=scmPowerAvail, scmNodeSerialNumber=scmNodeSerialNumber, scmAlarmTextTrap=scmAlarmTextTrap, scmNodeLevel=scmNodeLevel, scmTextAlarmTraps=scmTextAlarmTraps, scmExpressPollTrap=scmExpressPollTrap, scmNodeIndex=scmNodeIndex, scmNodeAdminStatus=scmNodeAdminStatus, scmConfigChksumTrap=scmConfigChksumTrap, scmMaster=scmMaster, scmRedundancyTable=scmRedundancyTable, scmNodeType=scmNodeType, scmAliveTrap=scmAliveTrap, scmRedundancyIndex=scmRedundancyIndex, scmSlotNumber=scmSlotNumber, scmMasterTimeout=scmMasterTimeout, scmSetNetworkElementRealTime=scmSetNetworkElementRealTime, scmNodeConfigChecksumStatus=scmNodeConfigChecksumStatus, scmRedundancySwitch=scmRedundancySwitch, scmShelf=scmShelf, scmNodeConfigCs=scmNodeConfigCs, scmSlotState=scmSlotState, scmAlarmTrap=scmAlarmTrap, scmRedundancyEntry=scmRedundancyEntry, scmReset=scmReset, scmAliveTrapInterval=scmAliveTrapInterval, scmAlmTrap=scmAlmTrap, scmMIBVersion=scmMIBVersion, scmSystem=scmSystem, scmRedundancy=scmRedundancy, scmSlotTable=scmSlotTable, scmNodeEntry=scmNodeEntry, scmNode=scmNode, scmNodeStatus=scmNodeStatus, scmTime=scmTime, scmNodeOperStatus=scmNodeOperStatus, scmPowerConsum=scmPowerConsum, scmVersion=scmVersion)
