#
# PySNMP MIB module SS-OPT-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/SS-OPT-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 21:02:47 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, Integer, OctetString = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "Integer", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsIntersection, ConstraintsUnion, SingleValueConstraint, ValueRangeConstraint, ValueSizeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsIntersection", "ConstraintsUnion", "SingleValueConstraint", "ValueRangeConstraint", "ValueSizeConstraint")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
Integer32, Counter64, ObjectIdentity, Counter32, iso, MibIdentifier, TimeTicks, enterprises, NotificationType, Gauge32, ModuleIdentity, Unsigned32, Bits, IpAddress, MibScalar, MibTable, MibTableRow, MibTableColumn = mibBuilder.importSymbols("SNMPv2-SMI", "Integer32", "Counter64", "ObjectIdentity", "Counter32", "iso", "MibIdentifier", "TimeTicks", "enterprises", "NotificationType", "Gauge32", "ModuleIdentity", "Unsigned32", "Bits", "IpAddress", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn")
TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString")
codex = MibIdentifier((1, 3, 6, 1, 4, 1, 449))
cdxProductSpecific = MibIdentifier((1, 3, 6, 1, 4, 1, 449, 2))
cdx6500 = MibIdentifier((1, 3, 6, 1, 4, 1, 449, 2, 1))
cdx6500Configuration = MibIdentifier((1, 3, 6, 1, 4, 1, 449, 2, 1, 2))
cdx6500CfgGeneralGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 2))
cdx6500Statistics = MibIdentifier((1, 3, 6, 1, 4, 1, 449, 2, 1, 3))
cdx6500StatOtherStatsGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 2))
class DisplayString(OctetString):
    pass

cdx6500GCTLSSTable = MibTable((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 2, 14), )
if mibBuilder.loadTexts: cdx6500GCTLSSTable.setStatus('mandatory')
cdx6500SSCfgEntry = MibTableRow((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 2, 14, 1), ).setIndexNames((0, "SS-OPT-MIB", "cdx6500SSEntryNumber"))
if mibBuilder.loadTexts: cdx6500SSCfgEntry.setStatus('mandatory')
cdx6500SSEntryNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 2, 14, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1024))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500SSEntryNumber.setStatus('mandatory')
cdx6500SSDestinationName = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 2, 14, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500SSDestinationName.setStatus('mandatory')
cdx6500SSCfgMonitoredPort = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 2, 14, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500SSCfgMonitoredPort.setStatus('mandatory')
cdx6500SSCfgRestoralPort = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 2, 14, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500SSCfgRestoralPort.setStatus('mandatory')
cdx6500SSDialSequence = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 2, 14, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 30))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500SSDialSequence.setStatus('mandatory')
cdx6500SSActivationMode = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 2, 14, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 50))).clone(namedValues=NamedValues(("fail", 0), ("call", 1), ("either", 2), ("newvalFail", 50)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500SSActivationMode.setStatus('mandatory')
cdx6500SSDeactivationMode = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 2, 14, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 50))).clone(namedValues=NamedValues(("none", 0), ("busyOut", 1), ("imm", 2), ("newvalNone", 50)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500SSDeactivationMode.setStatus('mandatory')
cdx6500SSLinkHoldTime = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 2, 14, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500SSLinkHoldTime.setStatus('mandatory')
cdx6500SSOutBoundPass = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 2, 14, 1, 9), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 9))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500SSOutBoundPass.setStatus('mandatory')
cdx6500SSRedialTime = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 2, 14, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500SSRedialTime.setStatus('mandatory')
cdx6500SSRedialCounter = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 2, 14, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500SSRedialCounter.setStatus('mandatory')
cdx6500SSSecurityMode = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 2, 14, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 50))).clone(namedValues=NamedValues(("none", 0), ("password", 1), ("callingId", 2), ("both", 3), ("newvalNone", 50)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500SSSecurityMode.setStatus('mandatory')
cdx6500SSSetupTime = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 2, 14, 1, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500SSSetupTime.setStatus('mandatory')
cdx6500SSCfgMonitoredPort2 = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 2, 14, 1, 14), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500SSCfgMonitoredPort2.setStatus('mandatory')
cdx6500SSCfgMonitoredPort3 = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 2, 14, 1, 15), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500SSCfgMonitoredPort3.setStatus('mandatory')
cdx6500SSCfgMonitoredPort4 = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 2, 14, 1, 16), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500SSCfgMonitoredPort4.setStatus('mandatory')
cdx6500SSDialSequence2 = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 2, 14, 1, 17), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 30))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500SSDialSequence2.setStatus('mandatory')
cdx6500SSDialSequence3 = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 2, 14, 1, 18), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 30))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500SSDialSequence3.setStatus('mandatory')
cdx6500SSDialSequence4 = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 2, 14, 1, 19), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 30))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500SSDialSequence4.setStatus('mandatory')
cdx6500CallIDTable = MibTable((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 2, 18), )
if mibBuilder.loadTexts: cdx6500CallIDTable.setStatus('mandatory')
cdx6500CallIDEntry = MibTableRow((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 2, 18, 1), ).setIndexNames((0, "SS-OPT-MIB", "cdx6500CallIDEntryNumber"))
if mibBuilder.loadTexts: cdx6500CallIDEntry.setStatus('mandatory')
cdx6500CallIDEntryNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 2, 18, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500CallIDEntryNumber.setStatus('mandatory')
cdx6500CallIDString = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 2, 18, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 30))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500CallIDString.setStatus('mandatory')
cdx6500OSTSSTable = MibTable((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 2, 3), )
if mibBuilder.loadTexts: cdx6500OSTSSTable.setStatus('mandatory')
cdx6500SSStatEntry = MibTableRow((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 2, 3, 1), ).setIndexNames((0, "SS-OPT-MIB", "cdx6500SSStatRestoralPort"))
if mibBuilder.loadTexts: cdx6500SSStatEntry.setStatus('mandatory')
cdx6500SSStatRestoralPort = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 2, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500SSStatRestoralPort.setStatus('mandatory')
cdx6500SSPortType = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 2, 3, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500SSPortType.setStatus('mandatory')
cdx6500SSConnType = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 2, 3, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500SSConnType.setStatus('mandatory')
cdx6500SSStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 2, 3, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 50))).clone(namedValues=NamedValues(("down", 0), ("up", 1), ("activating", 2), ("redial", 3), ("idle", 4), ("deactivating", 5), ("newvalDown", 50)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500SSStatus.setStatus('mandatory')
cdx6500SSReason = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 2, 3, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 50))).clone(namedValues=NamedValues(("none", 0), ("call", 1), ("fail", 2), ("remote", 3), ("ctp", 4), ("newvalNone", 50)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500SSReason.setStatus('mandatory')
cdx6500SSRedial = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 2, 3, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500SSRedial.setStatus('mandatory')
cdx6500SSLastActivated = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 2, 3, 1, 7), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500SSLastActivated.setStatus('mandatory')
cdx6500SSLastPhoneDialed = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 2, 3, 1, 8), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500SSLastPhoneDialed.setStatus('mandatory')
cdx6500OSTSSMonTable = MibTable((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 2, 4), )
if mibBuilder.loadTexts: cdx6500OSTSSMonTable.setStatus('mandatory')
cdx6500SSMonStatEntry = MibTableRow((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 2, 4, 1), ).setIndexNames((0, "SS-OPT-MIB", "cdx6500SSStatRestMonPort"), (0, "SS-OPT-MIB", "cdx6500SSStatMonitoredPort"))
if mibBuilder.loadTexts: cdx6500SSMonStatEntry.setStatus('mandatory')
cdx6500SSStatRestMonPort = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 2, 4, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500SSStatRestMonPort.setStatus('mandatory')
cdx6500SSStatMonitoredPort = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 2, 4, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500SSStatMonitoredPort.setStatus('mandatory')
cdx6500SSMonPortState = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 2, 4, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 50))).clone(namedValues=NamedValues(("down", 0), ("up", 1), ("activating", 2), ("redial", 3), ("idle", 4), ("deactivating", 5), ("newvalDown", 50)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500SSMonPortState.setStatus('mandatory')
cdx6500SSRestPhoneNum = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 2, 4, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 30))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500SSRestPhoneNum.setStatus('mandatory')
mibBuilder.exportSymbols("SS-OPT-MIB", cdx6500SSCfgMonitoredPort2=cdx6500SSCfgMonitoredPort2, cdx6500SSOutBoundPass=cdx6500SSOutBoundPass, cdx6500SSCfgMonitoredPort4=cdx6500SSCfgMonitoredPort4, cdxProductSpecific=cdxProductSpecific, cdx6500SSLastActivated=cdx6500SSLastActivated, cdx6500OSTSSTable=cdx6500OSTSSTable, cdx6500SSEntryNumber=cdx6500SSEntryNumber, cdx6500CallIDEntryNumber=cdx6500CallIDEntryNumber, cdx6500SSCfgMonitoredPort=cdx6500SSCfgMonitoredPort, cdx6500CallIDTable=cdx6500CallIDTable, cdx6500SSRedialTime=cdx6500SSRedialTime, cdx6500OSTSSMonTable=cdx6500OSTSSMonTable, cdx6500SSLinkHoldTime=cdx6500SSLinkHoldTime, cdx6500SSReason=cdx6500SSReason, cdx6500SSConnType=cdx6500SSConnType, cdx6500StatOtherStatsGroup=cdx6500StatOtherStatsGroup, cdx6500SSCfgEntry=cdx6500SSCfgEntry, cdx6500Configuration=cdx6500Configuration, cdx6500SSRedial=cdx6500SSRedial, cdx6500SSMonStatEntry=cdx6500SSMonStatEntry, cdx6500SSStatEntry=cdx6500SSStatEntry, cdx6500SSCfgRestoralPort=cdx6500SSCfgRestoralPort, cdx6500SSDialSequence2=cdx6500SSDialSequence2, cdx6500SSDeactivationMode=cdx6500SSDeactivationMode, cdx6500SSDestinationName=cdx6500SSDestinationName, cdx6500SSRestPhoneNum=cdx6500SSRestPhoneNum, cdx6500SSRedialCounter=cdx6500SSRedialCounter, cdx6500SSStatRestoralPort=cdx6500SSStatRestoralPort, cdx6500SSStatus=cdx6500SSStatus, cdx6500SSSetupTime=cdx6500SSSetupTime, cdx6500CallIDString=cdx6500CallIDString, cdx6500SSDialSequence3=cdx6500SSDialSequence3, cdx6500SSCfgMonitoredPort3=cdx6500SSCfgMonitoredPort3, cdx6500SSPortType=cdx6500SSPortType, DisplayString=DisplayString, cdx6500SSActivationMode=cdx6500SSActivationMode, cdx6500SSLastPhoneDialed=cdx6500SSLastPhoneDialed, cdx6500SSMonPortState=cdx6500SSMonPortState, cdx6500SSStatRestMonPort=cdx6500SSStatRestMonPort, cdx6500GCTLSSTable=cdx6500GCTLSSTable, cdx6500Statistics=cdx6500Statistics, cdx6500CfgGeneralGroup=cdx6500CfgGeneralGroup, cdx6500SSDialSequence=cdx6500SSDialSequence, cdx6500SSDialSequence4=cdx6500SSDialSequence4, cdx6500SSSecurityMode=cdx6500SSSecurityMode, cdx6500SSStatMonitoredPort=cdx6500SSStatMonitoredPort, codex=codex, cdx6500CallIDEntry=cdx6500CallIDEntry, cdx6500=cdx6500)
