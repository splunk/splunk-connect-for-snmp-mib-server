#
# PySNMP MIB module JUNIPER-IF-ACCOUNTING-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/JUNIPER-IF-ACCOUNTING-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 19:48:19 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, OctetString, Integer = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "OctetString", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsUnion, ConstraintsIntersection, SingleValueConstraint, ValueRangeConstraint, ValueSizeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsUnion", "ConstraintsIntersection", "SingleValueConstraint", "ValueRangeConstraint", "ValueSizeConstraint")
CounterBasedGauge64, = mibBuilder.importSymbols("HCNUM-TC", "CounterBasedGauge64")
InterfaceIndex, = mibBuilder.importSymbols("IF-MIB", "InterfaceIndex")
JnxCosFcIdentifier, = mibBuilder.importSymbols("JUNIPER-COS-MIB", "JnxCosFcIdentifier")
ifJnx, = mibBuilder.importSymbols("JUNIPER-IF-MIB", "ifJnx")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
Counter64, ObjectIdentity, IpAddress, Integer32, TimeTicks, Unsigned32, iso, NotificationType, MibScalar, MibTable, MibTableRow, MibTableColumn, MibIdentifier, ModuleIdentity, Counter32, Bits, Gauge32 = mibBuilder.importSymbols("SNMPv2-SMI", "Counter64", "ObjectIdentity", "IpAddress", "Integer32", "TimeTicks", "Unsigned32", "iso", "NotificationType", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "MibIdentifier", "ModuleIdentity", "Counter32", "Bits", "Gauge32")
DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention")
jnxIfAccountingStats = ModuleIdentity((1, 3, 6, 1, 4, 1, 2636, 3, 3, 10))
jnxIfAccountingStats.setRevisions(('2013-05-15 12:23', '2013-12-25 00:00',))
if mibBuilder.loadTexts: jnxIfAccountingStats.setLastUpdated('201312250000Z')
if mibBuilder.loadTexts: jnxIfAccountingStats.setOrganization('Juniper Networks, Inc.')
jnxIfFcAccountStatTable = MibTable((1, 3, 6, 1, 4, 1, 2636, 3, 3, 10, 1), )
if mibBuilder.loadTexts: jnxIfFcAccountStatTable.setStatus('current')
jnxIfFcAccountStatEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2636, 3, 3, 10, 1, 1), ).setIndexNames((0, "JUNIPER-IF-ACCOUNTING-MIB", "jnxIfFcIfIndex"), (0, "JUNIPER-IF-ACCOUNTING-MIB", "jnxIfFcFcIndex"), (0, "JUNIPER-IF-ACCOUNTING-MIB", "jnxIfFcProtocol"))
if mibBuilder.loadTexts: jnxIfFcAccountStatEntry.setStatus('current')
jnxIfFcIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 3, 10, 1, 1, 1), InterfaceIndex())
if mibBuilder.loadTexts: jnxIfFcIfIndex.setStatus('current')
jnxIfFcFcIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 3, 10, 1, 1, 2), JnxCosFcIdentifier())
if mibBuilder.loadTexts: jnxIfFcFcIndex.setStatus('current')
jnxIfFcProtocol = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 3, 10, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("all", 1), ("ipv4", 2), ("ipv6", 3), ("mpls", 4), ("layer2", 5), ("other", 6))))
if mibBuilder.loadTexts: jnxIfFcProtocol.setStatus('current')
jnxIfFcHCInUcastPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 3, 10, 1, 1, 4), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxIfFcHCInUcastPkts.setStatus('current')
jnxIfFcHCInUcastOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 3, 10, 1, 1, 5), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxIfFcHCInUcastOctets.setStatus('current')
jnxIfFcHCOutUcastPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 3, 10, 1, 1, 6), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxIfFcHCOutUcastPkts.setStatus('current')
jnxIfFcHCOutUcastOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 3, 10, 1, 1, 7), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxIfFcHCOutUcastOctets.setStatus('current')
jnxIfFcHCInMcastPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 3, 10, 1, 1, 8), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxIfFcHCInMcastPkts.setStatus('current')
jnxIfFcHCInMcastOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 3, 10, 1, 1, 9), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxIfFcHCInMcastOctets.setStatus('current')
jnxIfFcHCOutMcastPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 3, 10, 1, 1, 10), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxIfFcHCOutMcastPkts.setStatus('current')
jnxIfFcHCOutMcastOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 3, 10, 1, 1, 11), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxIfFcHCOutMcastOctets.setStatus('current')
jnxIfFcInlineAccountingStatTable = MibTable((1, 3, 6, 1, 4, 1, 2636, 3, 3, 10, 2), )
if mibBuilder.loadTexts: jnxIfFcInlineAccountingStatTable.setStatus('current')
jnxIfFcInlineAccountingStatEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2636, 3, 3, 10, 2, 1), ).setIndexNames((0, "JUNIPER-IF-ACCOUNTING-MIB", "jnxIfFcIfIndex"), (0, "JUNIPER-IF-ACCOUNTING-MIB", "jnxIfFcFcIndex"), (0, "JUNIPER-IF-ACCOUNTING-MIB", "jnxIfFcProtocol"))
if mibBuilder.loadTexts: jnxIfFcInlineAccountingStatEntry.setStatus('current')
jnxIfFcInlineHCInPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 3, 10, 2, 1, 1), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxIfFcInlineHCInPkts.setStatus('current')
jnxIfFcInlineHCInPktsSecRate = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 3, 10, 2, 1, 2), CounterBasedGauge64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxIfFcInlineHCInPktsSecRate.setStatus('current')
jnxIfFcInlineHCInOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 3, 10, 2, 1, 3), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxIfFcInlineHCInOctets.setStatus('current')
jnxIfFcInlineHCInOctetsSecRate = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 3, 10, 2, 1, 4), CounterBasedGauge64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxIfFcInlineHCInOctetsSecRate.setStatus('current')
jnxIfFcInlineHCOutPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 3, 10, 2, 1, 5), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxIfFcInlineHCOutPkts.setStatus('current')
jnxIfFcInlineHCOutPktsSecRate = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 3, 10, 2, 1, 6), CounterBasedGauge64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxIfFcInlineHCOutPktsSecRate.setStatus('current')
jnxIfFcInlineHCOutOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 3, 10, 2, 1, 7), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxIfFcInlineHCOutOctets.setStatus('current')
jnxIfFcInlineHCOutOctetsSecRate = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 3, 10, 2, 1, 8), CounterBasedGauge64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxIfFcInlineHCOutOctetsSecRate.setStatus('current')
mibBuilder.exportSymbols("JUNIPER-IF-ACCOUNTING-MIB", jnxIfFcAccountStatTable=jnxIfFcAccountStatTable, jnxIfFcInlineHCInPkts=jnxIfFcInlineHCInPkts, jnxIfFcProtocol=jnxIfFcProtocol, jnxIfFcInlineAccountingStatTable=jnxIfFcInlineAccountingStatTable, jnxIfFcAccountStatEntry=jnxIfFcAccountStatEntry, jnxIfFcInlineHCInOctets=jnxIfFcInlineHCInOctets, jnxIfFcInlineHCOutOctetsSecRate=jnxIfFcInlineHCOutOctetsSecRate, jnxIfFcHCInMcastPkts=jnxIfFcHCInMcastPkts, jnxIfAccountingStats=jnxIfAccountingStats, jnxIfFcHCInUcastPkts=jnxIfFcHCInUcastPkts, jnxIfFcInlineHCInOctetsSecRate=jnxIfFcInlineHCInOctetsSecRate, jnxIfFcInlineHCOutPkts=jnxIfFcInlineHCOutPkts, jnxIfFcInlineHCOutOctets=jnxIfFcInlineHCOutOctets, PYSNMP_MODULE_ID=jnxIfAccountingStats, jnxIfFcInlineHCInPktsSecRate=jnxIfFcInlineHCInPktsSecRate, jnxIfFcHCInMcastOctets=jnxIfFcHCInMcastOctets, jnxIfFcIfIndex=jnxIfFcIfIndex, jnxIfFcInlineAccountingStatEntry=jnxIfFcInlineAccountingStatEntry, jnxIfFcHCOutUcastPkts=jnxIfFcHCOutUcastPkts, jnxIfFcHCOutMcastOctets=jnxIfFcHCOutMcastOctets, jnxIfFcHCInUcastOctets=jnxIfFcHCInUcastOctets, jnxIfFcHCOutMcastPkts=jnxIfFcHCOutMcastPkts, jnxIfFcHCOutUcastOctets=jnxIfFcHCOutUcastOctets, jnxIfFcInlineHCOutPktsSecRate=jnxIfFcInlineHCOutPktsSecRate, jnxIfFcFcIndex=jnxIfFcFcIndex)
