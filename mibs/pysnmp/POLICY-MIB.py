#
# PySNMP MIB module POLICY-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/POLICY-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 19:58:51 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, Integer, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "OctetString", "Integer", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueSizeConstraint, ValueRangeConstraint, SingleValueConstraint, ConstraintsUnion, ConstraintsIntersection = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueSizeConstraint", "ValueRangeConstraint", "SingleValueConstraint", "ConstraintsUnion", "ConstraintsIntersection")
lannet, = mibBuilder.importSymbols("GEN-MIB", "lannet")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
TimeTicks, Integer32, iso, Bits, IpAddress, Counter64, MibScalar, MibTable, MibTableRow, MibTableColumn, ModuleIdentity, ObjectIdentity, Unsigned32, MibIdentifier, NotificationType, Counter32, Gauge32 = mibBuilder.importSymbols("SNMPv2-SMI", "TimeTicks", "Integer32", "iso", "Bits", "IpAddress", "Counter64", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "ModuleIdentity", "ObjectIdentity", "Unsigned32", "MibIdentifier", "NotificationType", "Counter32", "Gauge32")
PhysAddress, DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "PhysAddress", "DisplayString", "TextualConvention")
class RowStatus(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))
    namedValues = NamedValues(("active", 1), ("notInService", 2), ("notReady", 3), ("createAndGo", 4), ("createAndWait", 5), ("destroy", 6))

ipPolicyMgmt = MibIdentifier((1, 3, 6, 1, 4, 1, 81, 36))
ipPolicyListTable = MibTable((1, 3, 6, 1, 4, 1, 81, 36, 1), )
if mibBuilder.loadTexts: ipPolicyListTable.setStatus('mandatory')
ipPolicyListEntry = MibTableRow((1, 3, 6, 1, 4, 1, 81, 36, 1, 1), ).setIndexNames((0, "POLICY-MIB", "ipPolicyListSlot"), (0, "POLICY-MIB", "ipPolicyListID"))
if mibBuilder.loadTexts: ipPolicyListEntry.setStatus('mandatory')
ipPolicyListSlot = MibTableColumn((1, 3, 6, 1, 4, 1, 81, 36, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipPolicyListSlot.setStatus('mandatory')
ipPolicyListID = MibTableColumn((1, 3, 6, 1, 4, 1, 81, 36, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipPolicyListID.setStatus('mandatory')
ipPolicyListName = MibTableColumn((1, 3, 6, 1, 4, 1, 81, 36, 1, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipPolicyListName.setStatus('mandatory')
ipPolicyListValidityStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 81, 36, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("valid", 1), ("partiallyValid", 2), ("invalid", 3), ("validationInProgress", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipPolicyListValidityStatus.setStatus('mandatory')
ipPolicyListChecksum = MibTableColumn((1, 3, 6, 1, 4, 1, 81, 36, 1, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipPolicyListChecksum.setStatus('obsolete')
ipPolicyListRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 81, 36, 1, 1, 6), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipPolicyListRowStatus.setStatus('mandatory')
ipPolicyListDefaultOperation = MibTableColumn((1, 3, 6, 1, 4, 1, 81, 36, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12))).clone(namedValues=NamedValues(("forwardPriority0", 1), ("forwardPriority1", 2), ("forwardPriority2", 3), ("forwardPriority3", 4), ("forwardPriority4", 5), ("forwardPriority5", 6), ("forwardPriority6", 7), ("forwardPriority7", 8), ("forward", 9), ("deny", 10), ("denyAndNotify", 11), ("layer2Switching", 12))).clone('forward')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipPolicyListDefaultOperation.setStatus('mandatory')
ipPolicyListCookie = MibTableColumn((1, 3, 6, 1, 4, 1, 81, 36, 1, 1, 8), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipPolicyListCookie.setStatus('mandatory')
ipPolicyListTrackChanges = MibTableColumn((1, 3, 6, 1, 4, 1, 81, 36, 1, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipPolicyListTrackChanges.setStatus('mandatory')
ipPolicyListOwner = MibTableColumn((1, 3, 6, 1, 4, 1, 81, 36, 1, 1, 10), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80)).clone('other')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipPolicyListOwner.setStatus('mandatory')
ipPolicyListErrMsg = MibTableColumn((1, 3, 6, 1, 4, 1, 81, 36, 1, 1, 11), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipPolicyListErrMsg.setStatus('mandatory')
ipPolicyRuleTable = MibTable((1, 3, 6, 1, 4, 1, 81, 36, 2), )
if mibBuilder.loadTexts: ipPolicyRuleTable.setStatus('mandatory')
ipPolicyRuleEntry = MibTableRow((1, 3, 6, 1, 4, 1, 81, 36, 2, 1), ).setIndexNames((0, "POLICY-MIB", "ipPolicyRuleSlot"), (0, "POLICY-MIB", "ipPolicyRuleListID"), (0, "POLICY-MIB", "ipPolicyRuleID"))
if mibBuilder.loadTexts: ipPolicyRuleEntry.setStatus('mandatory')
ipPolicyRuleSlot = MibTableColumn((1, 3, 6, 1, 4, 1, 81, 36, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipPolicyRuleSlot.setStatus('mandatory')
ipPolicyRuleListID = MibTableColumn((1, 3, 6, 1, 4, 1, 81, 36, 2, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipPolicyRuleListID.setStatus('mandatory')
ipPolicyRuleID = MibTableColumn((1, 3, 6, 1, 4, 1, 81, 36, 2, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 9999))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipPolicyRuleID.setStatus('mandatory')
ipPolicyRuleSrcAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 81, 36, 2, 1, 4), IpAddress().clone(hexValue="00000000")).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipPolicyRuleSrcAddr.setStatus('mandatory')
ipPolicyRuleSrcAddrWild = MibTableColumn((1, 3, 6, 1, 4, 1, 81, 36, 2, 1, 5), IpAddress().clone(hexValue="FFFFFFFF")).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipPolicyRuleSrcAddrWild.setStatus('mandatory')
ipPolicyRuleDstAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 81, 36, 2, 1, 6), IpAddress().clone(hexValue="00000000")).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipPolicyRuleDstAddr.setStatus('mandatory')
ipPolicyRuleDstAddrWild = MibTableColumn((1, 3, 6, 1, 4, 1, 81, 36, 2, 1, 7), IpAddress().clone(hexValue="FFFFFFFF")).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipPolicyRuleDstAddrWild.setStatus('mandatory')
ipPolicyRuleProtocol = MibTableColumn((1, 3, 6, 1, 4, 1, 81, 36, 2, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 256)).clone(256)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipPolicyRuleProtocol.setStatus('mandatory')
ipPolicyRuleL4SrcPortMin = MibTableColumn((1, 3, 6, 1, 4, 1, 81, 36, 2, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipPolicyRuleL4SrcPortMin.setStatus('mandatory')
ipPolicyRuleL4SrcPortMax = MibTableColumn((1, 3, 6, 1, 4, 1, 81, 36, 2, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535)).clone(65535)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipPolicyRuleL4SrcPortMax.setStatus('mandatory')
ipPolicyRuleL4DestPortMin = MibTableColumn((1, 3, 6, 1, 4, 1, 81, 36, 2, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipPolicyRuleL4DestPortMin.setStatus('mandatory')
ipPolicyRuleL4DestPortMax = MibTableColumn((1, 3, 6, 1, 4, 1, 81, 36, 2, 1, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535)).clone(65535)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipPolicyRuleL4DestPortMax.setStatus('mandatory')
ipPolicyRuleEstablished = MibTableColumn((1, 3, 6, 1, 4, 1, 81, 36, 2, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("dontCare", 2))).clone('dontCare')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipPolicyRuleEstablished.setStatus('mandatory')
ipPolicyRuleOperation = MibTableColumn((1, 3, 6, 1, 4, 1, 81, 36, 2, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12))).clone(namedValues=NamedValues(("forwardPriority0", 1), ("forwardPriority1", 2), ("forwardPriority2", 3), ("forwardPriority3", 4), ("forwardPriority4", 5), ("forwardPriority5", 6), ("forwardPriority6", 7), ("forwardPriority7", 8), ("forward", 9), ("deny", 10), ("denyAndNotify", 11), ("layer2Switching", 12)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipPolicyRuleOperation.setStatus('mandatory')
ipPolicyRuleApplicabilityPrecedence = MibTableColumn((1, 3, 6, 1, 4, 1, 81, 36, 2, 1, 15), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 9999)).clone(9999)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipPolicyRuleApplicabilityPrecedence.setStatus('mandatory')
ipPolicyRuleApplicabilityStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 81, 36, 2, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("applicable", 1), ("partiallyApplicable", 2), ("notApplicable", 3), ("unknown", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipPolicyRuleApplicabilityStatus.setStatus('mandatory')
ipPolicyRuleApplicabilityType = MibTableColumn((1, 3, 6, 1, 4, 1, 81, 36, 2, 1, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("static", 1), ("quasiStatic", 2), ("dynamic", 3), ("unknown", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipPolicyRuleApplicabilityType.setStatus('mandatory')
ipPolicyRuleErrMsg = MibTableColumn((1, 3, 6, 1, 4, 1, 81, 36, 2, 1, 18), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipPolicyRuleErrMsg.setStatus('mandatory')
ipPolicyRuleStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 81, 36, 2, 1, 19), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipPolicyRuleStatus.setStatus('mandatory')
ipPolicyRuleDSCPOperation = MibTableColumn((1, 3, 6, 1, 4, 1, 81, 36, 2, 1, 20), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 64)).clone(64)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipPolicyRuleDSCPOperation.setStatus('mandatory')
ipPolicyControlTable = MibTable((1, 3, 6, 1, 4, 1, 81, 36, 3), )
if mibBuilder.loadTexts: ipPolicyControlTable.setStatus('mandatory')
ipPolicyControlEntry = MibTableRow((1, 3, 6, 1, 4, 1, 81, 36, 3, 1), ).setIndexNames((0, "POLICY-MIB", "ipPolicyControlSlot"))
if mibBuilder.loadTexts: ipPolicyControlEntry.setStatus('mandatory')
ipPolicyControlSlot = MibTableColumn((1, 3, 6, 1, 4, 1, 81, 36, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipPolicyControlSlot.setStatus('mandatory')
ipPolicyControlActiveGeneralList = MibTableColumn((1, 3, 6, 1, 4, 1, 81, 36, 3, 1, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipPolicyControlActiveGeneralList.setStatus('mandatory')
ipPolicyControlAllowedPolicyManagers = MibTableColumn((1, 3, 6, 1, 4, 1, 81, 36, 3, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("local", 1), ("remote", 2))).clone('remote')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipPolicyControlAllowedPolicyManagers.setStatus('mandatory')
ipPolicyControlCurrentChecksum = MibTableColumn((1, 3, 6, 1, 4, 1, 81, 36, 3, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipPolicyControlCurrentChecksum.setStatus('mandatory')
ipPolicyControlMinimalPolicyManagmentVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 81, 36, 3, 1, 5), OctetString().subtype(subtypeSpec=ValueSizeConstraint(25, 25)).setFixedLength(25)).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipPolicyControlMinimalPolicyManagmentVersion.setStatus('mandatory')
ipPolicyControlMaximalPolicyManagmentVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 81, 36, 3, 1, 6), OctetString().subtype(subtypeSpec=ValueSizeConstraint(25, 25)).setFixedLength(25)).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipPolicyControlMaximalPolicyManagmentVersion.setStatus('mandatory')
ipPolicyDiffServTable = MibTable((1, 3, 6, 1, 4, 1, 81, 36, 4), )
if mibBuilder.loadTexts: ipPolicyDiffServTable.setStatus('mandatory')
ipPolicyDiffServEntry = MibTableRow((1, 3, 6, 1, 4, 1, 81, 36, 4, 1), ).setIndexNames((0, "POLICY-MIB", "ipPolicyDiffServSlot"), (0, "POLICY-MIB", "ipPolicyDiffServDSCP"))
if mibBuilder.loadTexts: ipPolicyDiffServEntry.setStatus('mandatory')
ipPolicyDiffServSlot = MibTableColumn((1, 3, 6, 1, 4, 1, 81, 36, 4, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipPolicyDiffServSlot.setStatus('mandatory')
ipPolicyDiffServDSCP = MibTableColumn((1, 3, 6, 1, 4, 1, 81, 36, 4, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 63))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipPolicyDiffServDSCP.setStatus('mandatory')
ipPolicyDiffServOperation = MibTableColumn((1, 3, 6, 1, 4, 1, 81, 36, 4, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11))).clone(namedValues=NamedValues(("forwardPriority0", 1), ("forwardPriority1", 2), ("forwardPriority2", 3), ("forwardPriority3", 4), ("forwardPriority4", 5), ("forwardPriority5", 6), ("forwardPriority6", 7), ("forwardPriority7", 8), ("forwardNoChange", 9), ("deny", 10), ("denyAndNotify", 11))).clone('forwardNoChange')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipPolicyDiffServOperation.setStatus('mandatory')
ipPolicyDiffServName = MibTableColumn((1, 3, 6, 1, 4, 1, 81, 36, 4, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 40))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipPolicyDiffServName.setStatus('mandatory')
ipPolicyDiffServAggIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 81, 36, 4, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 63))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipPolicyDiffServAggIndex.setStatus('obsolete')
ipPolicyDiffServApplicabilityPrecedence = MibTableColumn((1, 3, 6, 1, 4, 1, 81, 36, 4, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 9999)).clone(9999)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipPolicyDiffServApplicabilityPrecedence.setStatus('mandatory')
ipPolicyDiffServApplicabilityStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 81, 36, 4, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("applicable", 1), ("partiallyApplicable", 2), ("notApplicable", 3), ("unknown", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipPolicyDiffServApplicabilityStatus.setStatus('mandatory')
ipPolicyDiffServApplicabilityType = MibTableColumn((1, 3, 6, 1, 4, 1, 81, 36, 4, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("static", 1), ("quasiStatic", 2), ("dynamic", 3), ("unknown", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipPolicyDiffServApplicabilityType.setStatus('mandatory')
ipPolicyDiffServErrMsg = MibTableColumn((1, 3, 6, 1, 4, 1, 81, 36, 4, 1, 9), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipPolicyDiffServErrMsg.setStatus('mandatory')
ipPolicyQueryTable = MibTable((1, 3, 6, 1, 4, 1, 81, 36, 5), )
if mibBuilder.loadTexts: ipPolicyQueryTable.setStatus('mandatory')
ipPolicyQueryEntry = MibTableRow((1, 3, 6, 1, 4, 1, 81, 36, 5, 1), ).setIndexNames((0, "POLICY-MIB", "ipPolicyQuerySlot"))
if mibBuilder.loadTexts: ipPolicyQueryEntry.setStatus('mandatory')
ipPolicyQuerySlot = MibTableColumn((1, 3, 6, 1, 4, 1, 81, 36, 5, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipPolicyQuerySlot.setStatus('mandatory')
ipPolicyQueryListID = MibTableColumn((1, 3, 6, 1, 4, 1, 81, 36, 5, 1, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipPolicyQueryListID.setStatus('mandatory')
ipPolicyQuerySrcAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 81, 36, 5, 1, 3), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipPolicyQuerySrcAddr.setStatus('mandatory')
ipPolicyQueryDstAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 81, 36, 5, 1, 4), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipPolicyQueryDstAddr.setStatus('mandatory')
ipPolicyQueryProtocol = MibTableColumn((1, 3, 6, 1, 4, 1, 81, 36, 5, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 256)).clone(256)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipPolicyQueryProtocol.setStatus('mandatory')
ipPolicyQueryL4SrcPort = MibTableColumn((1, 3, 6, 1, 4, 1, 81, 36, 5, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65536))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipPolicyQueryL4SrcPort.setStatus('mandatory')
ipPolicyQueryL4DestPort = MibTableColumn((1, 3, 6, 1, 4, 1, 81, 36, 5, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipPolicyQueryL4DestPort.setStatus('mandatory')
ipPolicyQueryEstablished = MibTableColumn((1, 3, 6, 1, 4, 1, 81, 36, 5, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2))).clone('no')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipPolicyQueryEstablished.setStatus('mandatory')
ipPolicyQueryDSCP = MibTableColumn((1, 3, 6, 1, 4, 1, 81, 36, 5, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 64)).clone(64)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipPolicyQueryDSCP.setStatus('mandatory')
ipPolicyQueryOperation = MibTableColumn((1, 3, 6, 1, 4, 1, 81, 36, 5, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 99))).clone(namedValues=NamedValues(("forwardPriority0", 1), ("forwardPriority1", 2), ("forwardPriority2", 3), ("forwardPriority3", 4), ("forwardPriority4", 5), ("forwardPriority5", 6), ("forwardPriority6", 7), ("forwardPriority7", 8), ("forwardNoChange", 9), ("deny", 10), ("denyAndNotify", 11), ("layer2Switching", 12), ("notEnoughInfo", 13), ("error", 99)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipPolicyQueryOperation.setStatus('mandatory')
ipPolicyQueryRuleID = MibTableColumn((1, 3, 6, 1, 4, 1, 81, 36, 5, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 9999))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipPolicyQueryRuleID.setStatus('mandatory')
ipPolicyQueryDSCPOperation = MibTableColumn((1, 3, 6, 1, 4, 1, 81, 36, 5, 1, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 64)).clone(64)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipPolicyQueryDSCPOperation.setStatus('mandatory')
ipPolicyQueryPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 81, 36, 5, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 99))).clone(namedValues=NamedValues(("forwardPriority0", 1), ("forwardPriority1", 2), ("forwardPriority2", 3), ("forwardPriority3", 4), ("forwardPriority4", 5), ("forwardPriority5", 6), ("forwardPriority6", 7), ("forwardPriority7", 8), ("dontCare", 99))).clone('dontCare')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipPolicyQueryPriority.setStatus('mandatory')
ipPolicyDiffServControlTable = MibTable((1, 3, 6, 1, 4, 1, 81, 36, 6), )
if mibBuilder.loadTexts: ipPolicyDiffServControlTable.setStatus('mandatory')
ipPolicyDiffServControlEntry = MibTableRow((1, 3, 6, 1, 4, 1, 81, 36, 6, 1), ).setIndexNames((0, "POLICY-MIB", "ipPolicyDiffServControlSlot"))
if mibBuilder.loadTexts: ipPolicyDiffServControlEntry.setStatus('mandatory')
ipPolicyDiffServControlSlot = MibTableColumn((1, 3, 6, 1, 4, 1, 81, 36, 6, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipPolicyDiffServControlSlot.setStatus('mandatory')
ipPolicyDiffServControlChecksum = MibTableColumn((1, 3, 6, 1, 4, 1, 81, 36, 6, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipPolicyDiffServControlChecksum.setStatus('mandatory')
ipPolicyDiffServControlTrustedFields = MibTableColumn((1, 3, 6, 1, 4, 1, 81, 36, 6, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("cos", 1), ("dscp", 2), ("cos-dscp", 3), ("untrust", 4))).clone('dscp')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipPolicyDiffServControlTrustedFields.setStatus('mandatory')
ipPolicyDiffServControlValidityStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 81, 36, 6, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("valid", 1), ("invalid", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipPolicyDiffServControlValidityStatus.setStatus('mandatory')
ipPolicyDiffServControlErrMsg = MibTableColumn((1, 3, 6, 1, 4, 1, 81, 36, 6, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipPolicyDiffServControlErrMsg.setStatus('mandatory')
ipPolicyAccessControlViolationTable = MibTable((1, 3, 6, 1, 4, 1, 81, 36, 7), )
if mibBuilder.loadTexts: ipPolicyAccessControlViolationTable.setStatus('mandatory')
ipPolicyAccessControlViolationEntry = MibTableRow((1, 3, 6, 1, 4, 1, 81, 36, 7, 1), ).setIndexNames((0, "POLICY-MIB", "ipPolicyAccessControlViolationSlot"))
if mibBuilder.loadTexts: ipPolicyAccessControlViolationEntry.setStatus('mandatory')
ipPolicyAccessControlViolationSlot = MibTableColumn((1, 3, 6, 1, 4, 1, 81, 36, 7, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipPolicyAccessControlViolationSlot.setStatus('mandatory')
ipPolicyAccessControlViolationSrcAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 81, 36, 7, 1, 2), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipPolicyAccessControlViolationSrcAddr.setStatus('mandatory')
ipPolicyAccessControlViolationDstAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 81, 36, 7, 1, 3), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipPolicyAccessControlViolationDstAddr.setStatus('mandatory')
ipPolicyAccessControlViolationProtocol = MibTableColumn((1, 3, 6, 1, 4, 1, 81, 36, 7, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 256))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipPolicyAccessControlViolationProtocol.setStatus('mandatory')
ipPolicyAccessControlViolationL4SrcPort = MibTableColumn((1, 3, 6, 1, 4, 1, 81, 36, 7, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65536))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipPolicyAccessControlViolationL4SrcPort.setStatus('mandatory')
ipPolicyAccessControlViolationL4DstPort = MibTableColumn((1, 3, 6, 1, 4, 1, 81, 36, 7, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipPolicyAccessControlViolationL4DstPort.setStatus('mandatory')
ipPolicyAccessControlViolationEstablished = MibTableColumn((1, 3, 6, 1, 4, 1, 81, 36, 7, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("yes", 1), ("dontCare", 2), ("no", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipPolicyAccessControlViolationEstablished.setStatus('mandatory')
mibBuilder.exportSymbols("POLICY-MIB", ipPolicyListTable=ipPolicyListTable, ipPolicyListEntry=ipPolicyListEntry, ipPolicyAccessControlViolationL4DstPort=ipPolicyAccessControlViolationL4DstPort, ipPolicyQueryEntry=ipPolicyQueryEntry, ipPolicyDiffServTable=ipPolicyDiffServTable, ipPolicyRuleStatus=ipPolicyRuleStatus, ipPolicyListChecksum=ipPolicyListChecksum, ipPolicyRuleApplicabilityPrecedence=ipPolicyRuleApplicabilityPrecedence, ipPolicyRuleListID=ipPolicyRuleListID, ipPolicyAccessControlViolationDstAddr=ipPolicyAccessControlViolationDstAddr, ipPolicyDiffServControlValidityStatus=ipPolicyDiffServControlValidityStatus, ipPolicyRuleL4DestPortMax=ipPolicyRuleL4DestPortMax, ipPolicyDiffServControlSlot=ipPolicyDiffServControlSlot, ipPolicyListOwner=ipPolicyListOwner, ipPolicyControlSlot=ipPolicyControlSlot, ipPolicyRuleApplicabilityType=ipPolicyRuleApplicabilityType, ipPolicyListValidityStatus=ipPolicyListValidityStatus, ipPolicyQueryPriority=ipPolicyQueryPriority, ipPolicyRuleOperation=ipPolicyRuleOperation, ipPolicyDiffServSlot=ipPolicyDiffServSlot, ipPolicyDiffServApplicabilityStatus=ipPolicyDiffServApplicabilityStatus, ipPolicyQuerySlot=ipPolicyQuerySlot, ipPolicyListCookie=ipPolicyListCookie, ipPolicyRuleDstAddr=ipPolicyRuleDstAddr, ipPolicyAccessControlViolationEstablished=ipPolicyAccessControlViolationEstablished, ipPolicyQueryRuleID=ipPolicyQueryRuleID, ipPolicyQueryDstAddr=ipPolicyQueryDstAddr, ipPolicyQueryL4SrcPort=ipPolicyQueryL4SrcPort, ipPolicyRuleDstAddrWild=ipPolicyRuleDstAddrWild, ipPolicyRuleID=ipPolicyRuleID, ipPolicyMgmt=ipPolicyMgmt, ipPolicyListDefaultOperation=ipPolicyListDefaultOperation, ipPolicyDiffServControlChecksum=ipPolicyDiffServControlChecksum, ipPolicyListID=ipPolicyListID, ipPolicyAccessControlViolationProtocol=ipPolicyAccessControlViolationProtocol, ipPolicyListTrackChanges=ipPolicyListTrackChanges, RowStatus=RowStatus, ipPolicyControlCurrentChecksum=ipPolicyControlCurrentChecksum, ipPolicyQueryDSCPOperation=ipPolicyQueryDSCPOperation, ipPolicyListErrMsg=ipPolicyListErrMsg, ipPolicyAccessControlViolationEntry=ipPolicyAccessControlViolationEntry, ipPolicyListName=ipPolicyListName, ipPolicyDiffServOperation=ipPolicyDiffServOperation, ipPolicyRuleSrcAddrWild=ipPolicyRuleSrcAddrWild, ipPolicyControlEntry=ipPolicyControlEntry, ipPolicyDiffServControlErrMsg=ipPolicyDiffServControlErrMsg, ipPolicyListRowStatus=ipPolicyListRowStatus, ipPolicyRuleEstablished=ipPolicyRuleEstablished, ipPolicyControlMinimalPolicyManagmentVersion=ipPolicyControlMinimalPolicyManagmentVersion, ipPolicyDiffServEntry=ipPolicyDiffServEntry, ipPolicyRuleL4DestPortMin=ipPolicyRuleL4DestPortMin, ipPolicyRuleTable=ipPolicyRuleTable, ipPolicyControlTable=ipPolicyControlTable, ipPolicyRuleSlot=ipPolicyRuleSlot, ipPolicyRuleL4SrcPortMax=ipPolicyRuleL4SrcPortMax, ipPolicyControlAllowedPolicyManagers=ipPolicyControlAllowedPolicyManagers, ipPolicyQueryListID=ipPolicyQueryListID, ipPolicyQuerySrcAddr=ipPolicyQuerySrcAddr, ipPolicyQueryOperation=ipPolicyQueryOperation, ipPolicyControlMaximalPolicyManagmentVersion=ipPolicyControlMaximalPolicyManagmentVersion, ipPolicyQueryTable=ipPolicyQueryTable, ipPolicyRuleSrcAddr=ipPolicyRuleSrcAddr, ipPolicyDiffServControlEntry=ipPolicyDiffServControlEntry, ipPolicyRuleApplicabilityStatus=ipPolicyRuleApplicabilityStatus, ipPolicyRuleProtocol=ipPolicyRuleProtocol, ipPolicyAccessControlViolationSrcAddr=ipPolicyAccessControlViolationSrcAddr, ipPolicyQueryProtocol=ipPolicyQueryProtocol, ipPolicyControlActiveGeneralList=ipPolicyControlActiveGeneralList, ipPolicyDiffServApplicabilityPrecedence=ipPolicyDiffServApplicabilityPrecedence, ipPolicyDiffServErrMsg=ipPolicyDiffServErrMsg, ipPolicyRuleEntry=ipPolicyRuleEntry, ipPolicyQueryEstablished=ipPolicyQueryEstablished, ipPolicyRuleDSCPOperation=ipPolicyRuleDSCPOperation, ipPolicyAccessControlViolationTable=ipPolicyAccessControlViolationTable, ipPolicyDiffServName=ipPolicyDiffServName, ipPolicyDiffServControlTable=ipPolicyDiffServControlTable, ipPolicyDiffServDSCP=ipPolicyDiffServDSCP, ipPolicyListSlot=ipPolicyListSlot, ipPolicyDiffServApplicabilityType=ipPolicyDiffServApplicabilityType, ipPolicyRuleErrMsg=ipPolicyRuleErrMsg, ipPolicyDiffServControlTrustedFields=ipPolicyDiffServControlTrustedFields, ipPolicyAccessControlViolationSlot=ipPolicyAccessControlViolationSlot, ipPolicyQueryDSCP=ipPolicyQueryDSCP, ipPolicyRuleL4SrcPortMin=ipPolicyRuleL4SrcPortMin, ipPolicyDiffServAggIndex=ipPolicyDiffServAggIndex, ipPolicyAccessControlViolationL4SrcPort=ipPolicyAccessControlViolationL4SrcPort, ipPolicyQueryL4DestPort=ipPolicyQueryL4DestPort)
