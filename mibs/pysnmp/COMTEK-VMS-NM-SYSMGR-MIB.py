#
# PySNMP MIB module COMTEK-VMS-NM-SYSMGR-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/COMTEK-VMS-NM-SYSMGR-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 18:10:51 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, OctetString, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "Integer", "OctetString", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
SingleValueConstraint, ValueSizeConstraint, ConstraintsUnion, ValueRangeConstraint, ConstraintsIntersection = mibBuilder.importSymbols("ASN1-REFINEMENT", "SingleValueConstraint", "ValueSizeConstraint", "ConstraintsUnion", "ValueRangeConstraint", "ConstraintsIntersection")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
ObjectIdentity, Integer32, Unsigned32, MibScalar, MibTable, MibTableRow, MibTableColumn, NotificationType, TimeTicks, enterprises, iso, ModuleIdentity, Counter64, Counter32, Gauge32, IpAddress, Bits, MibIdentifier = mibBuilder.importSymbols("SNMPv2-SMI", "ObjectIdentity", "Integer32", "Unsigned32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "NotificationType", "TimeTicks", "enterprises", "iso", "ModuleIdentity", "Counter64", "Counter32", "Gauge32", "IpAddress", "Bits", "MibIdentifier")
TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString")
comtek = MibIdentifier((1, 3, 6, 1, 4, 1, 597))
comtekVms = MibIdentifier((1, 3, 6, 1, 4, 1, 597, 4))
comtekVmsNMSysMgrMib = MibIdentifier((1, 3, 6, 1, 4, 1, 597, 4, 3))
comtekVmsNMVmsMonMib = MibIdentifier((1, 3, 6, 1, 4, 1, 597, 4, 15))
sResources = MibIdentifier((1, 3, 6, 1, 4, 1, 597, 4, 3, 1))
sProcesses = MibIdentifier((1, 3, 6, 1, 4, 1, 597, 4, 3, 2))
sTrapInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 597, 4, 3, 3))
sErrInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 597, 4, 3, 4))
sCfg = MibIdentifier((1, 3, 6, 1, 4, 1, 597, 4, 3, 5))
sSyi = MibIdentifier((1, 3, 6, 1, 4, 1, 597, 4, 3, 1, 1))
sCpu = MibIdentifier((1, 3, 6, 1, 4, 1, 597, 4, 3, 1, 2))
sDsk = MibIdentifier((1, 3, 6, 1, 4, 1, 597, 4, 3, 1, 3))
sShd = MibIdentifier((1, 3, 6, 1, 4, 1, 597, 4, 3, 1, 4))
sQue = MibIdentifier((1, 3, 6, 1, 4, 1, 597, 4, 3, 1, 5))
sProcInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 597, 4, 3, 2, 1))
sCritInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 597, 4, 3, 2, 2))
sHwErrInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 597, 4, 3, 4, 1))
sSwErrInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 597, 4, 3, 4, 2))
sSyiNodeName = MibScalar((1, 3, 6, 1, 4, 1, 597, 4, 3, 1, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 15))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sSyiNodeName.setStatus('mandatory')
sSyiHwName = MibScalar((1, 3, 6, 1, 4, 1, 597, 4, 3, 1, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 31))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sSyiHwName.setStatus('mandatory')
sSyiBootTime = MibScalar((1, 3, 6, 1, 4, 1, 597, 4, 3, 1, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(23, 23)).setFixedLength(23)).setMaxAccess("readonly")
if mibBuilder.loadTexts: sSyiBootTime.setStatus('mandatory')
sSyiVersion = MibScalar((1, 3, 6, 1, 4, 1, 597, 4, 3, 1, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 8))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sSyiVersion.setStatus('mandatory')
sSyiMemSize = MibScalar((1, 3, 6, 1, 4, 1, 597, 4, 3, 1, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sSyiMemSize.setStatus('mandatory')
sSyiAvailCpuCnt = MibScalar((1, 3, 6, 1, 4, 1, 597, 4, 3, 1, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sSyiAvailCpuCnt.setStatus('mandatory')
sSyiActiveCpuCnt = MibScalar((1, 3, 6, 1, 4, 1, 597, 4, 3, 1, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sSyiActiveCpuCnt.setStatus('mandatory')
sSyiPgSize = MibScalar((1, 3, 6, 1, 4, 1, 597, 4, 3, 1, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sSyiPgSize.setStatus('mandatory')
sSyiPgFree = MibScalar((1, 3, 6, 1, 4, 1, 597, 4, 3, 1, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sSyiPgFree.setStatus('mandatory')
sSyiPgUsedPercent = MibScalar((1, 3, 6, 1, 4, 1, 597, 4, 3, 1, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sSyiPgUsedPercent.setStatus('mandatory')
sSyiSwpSize = MibScalar((1, 3, 6, 1, 4, 1, 597, 4, 3, 1, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sSyiSwpSize.setStatus('mandatory')
sSyiSwpFree = MibScalar((1, 3, 6, 1, 4, 1, 597, 4, 3, 1, 1, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sSyiSwpFree.setStatus('mandatory')
sSyiSwpUsedPercent = MibScalar((1, 3, 6, 1, 4, 1, 597, 4, 3, 1, 1, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sSyiSwpUsedPercent.setStatus('mandatory')
sSyiCpuPgSize = MibScalar((1, 3, 6, 1, 4, 1, 597, 4, 3, 1, 1, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sSyiCpuPgSize.setStatus('mandatory')
sSyiTime = MibScalar((1, 3, 6, 1, 4, 1, 597, 4, 3, 1, 1, 15), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sSyiTime.setStatus('mandatory')
sSyiMemFreePg = MibScalar((1, 3, 6, 1, 4, 1, 597, 4, 3, 1, 1, 16), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sSyiMemFreePg.setStatus('mandatory')
sSyiMemUsed = MibScalar((1, 3, 6, 1, 4, 1, 597, 4, 3, 1, 1, 17), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sSyiMemUsed.setStatus('mandatory')
sCpuPercentUsed = MibScalar((1, 3, 6, 1, 4, 1, 597, 4, 3, 1, 2, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sCpuPercentUsed.setStatus('mandatory')
sIntPercentUsed = MibScalar((1, 3, 6, 1, 4, 1, 597, 4, 3, 1, 2, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sIntPercentUsed.setStatus('mandatory')
sCpuTicks = MibScalar((1, 3, 6, 1, 4, 1, 597, 4, 3, 1, 2, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sCpuTicks.setStatus('mandatory')
sCpuLoadOneMinute = MibIdentifier((1, 3, 6, 1, 4, 1, 597, 4, 3, 1, 2, 4))
sKernelOne = MibScalar((1, 3, 6, 1, 4, 1, 597, 4, 3, 1, 2, 4, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sKernelOne.setStatus('mandatory')
sExecOne = MibScalar((1, 3, 6, 1, 4, 1, 597, 4, 3, 1, 2, 4, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sExecOne.setStatus('mandatory')
sSuprOne = MibScalar((1, 3, 6, 1, 4, 1, 597, 4, 3, 1, 2, 4, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sSuprOne.setStatus('mandatory')
sUserOne = MibScalar((1, 3, 6, 1, 4, 1, 597, 4, 3, 1, 2, 4, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sUserOne.setStatus('mandatory')
sIntrOne = MibScalar((1, 3, 6, 1, 4, 1, 597, 4, 3, 1, 2, 4, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sIntrOne.setStatus('mandatory')
sCompOne = MibScalar((1, 3, 6, 1, 4, 1, 597, 4, 3, 1, 2, 4, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sCompOne.setStatus('mandatory')
sSpinOne = MibScalar((1, 3, 6, 1, 4, 1, 597, 4, 3, 1, 2, 4, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sSpinOne.setStatus('mandatory')
sNullOne = MibScalar((1, 3, 6, 1, 4, 1, 597, 4, 3, 1, 2, 4, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sNullOne.setStatus('mandatory')
sCpuLoadFiveMinute = MibIdentifier((1, 3, 6, 1, 4, 1, 597, 4, 3, 1, 2, 5))
sKernelFive = MibScalar((1, 3, 6, 1, 4, 1, 597, 4, 3, 1, 2, 5, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sKernelFive.setStatus('mandatory')
sExecFive = MibScalar((1, 3, 6, 1, 4, 1, 597, 4, 3, 1, 2, 5, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sExecFive.setStatus('mandatory')
sSuprFive = MibScalar((1, 3, 6, 1, 4, 1, 597, 4, 3, 1, 2, 5, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sSuprFive.setStatus('mandatory')
sUserFive = MibScalar((1, 3, 6, 1, 4, 1, 597, 4, 3, 1, 2, 5, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sUserFive.setStatus('mandatory')
sIntrFive = MibScalar((1, 3, 6, 1, 4, 1, 597, 4, 3, 1, 2, 5, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sIntrFive.setStatus('mandatory')
sCompFive = MibScalar((1, 3, 6, 1, 4, 1, 597, 4, 3, 1, 2, 5, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sCompFive.setStatus('mandatory')
sSpinFive = MibScalar((1, 3, 6, 1, 4, 1, 597, 4, 3, 1, 2, 5, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sSpinFive.setStatus('mandatory')
sNullFive = MibScalar((1, 3, 6, 1, 4, 1, 597, 4, 3, 1, 2, 5, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sNullFive.setStatus('mandatory')
sCpuLoadFifteenMinute = MibIdentifier((1, 3, 6, 1, 4, 1, 597, 4, 3, 1, 2, 6))
sKernelFifteen = MibScalar((1, 3, 6, 1, 4, 1, 597, 4, 3, 1, 2, 6, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sKernelFifteen.setStatus('mandatory')
sExecFifteen = MibScalar((1, 3, 6, 1, 4, 1, 597, 4, 3, 1, 2, 6, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sExecFifteen.setStatus('mandatory')
sSuprFifteen = MibScalar((1, 3, 6, 1, 4, 1, 597, 4, 3, 1, 2, 6, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sSuprFifteen.setStatus('mandatory')
sUserFifteen = MibScalar((1, 3, 6, 1, 4, 1, 597, 4, 3, 1, 2, 6, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sUserFifteen.setStatus('mandatory')
sIntrFifteen = MibScalar((1, 3, 6, 1, 4, 1, 597, 4, 3, 1, 2, 6, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sIntrFifteen.setStatus('mandatory')
sCompFifteen = MibScalar((1, 3, 6, 1, 4, 1, 597, 4, 3, 1, 2, 6, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sCompFifteen.setStatus('mandatory')
sSpinFifteen = MibScalar((1, 3, 6, 1, 4, 1, 597, 4, 3, 1, 2, 6, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sSpinFifteen.setStatus('mandatory')
sNullFifteen = MibScalar((1, 3, 6, 1, 4, 1, 597, 4, 3, 1, 2, 6, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sNullFifteen.setStatus('mandatory')
sDskTblCnt = MibScalar((1, 3, 6, 1, 4, 1, 597, 4, 3, 1, 3, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sDskTblCnt.setStatus('mandatory')
sDskTblTime = MibScalar((1, 3, 6, 1, 4, 1, 597, 4, 3, 1, 3, 2), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sDskTblTime.setStatus('mandatory')
sDskTbl = MibTable((1, 3, 6, 1, 4, 1, 597, 4, 3, 1, 3, 3), )
if mibBuilder.loadTexts: sDskTbl.setStatus('mandatory')
sDskEntry = MibTableRow((1, 3, 6, 1, 4, 1, 597, 4, 3, 1, 3, 3, 1), ).setIndexNames((0, "COMTEK-VMS-NM-SYSMGR-MIB", "sDskIndex"))
if mibBuilder.loadTexts: sDskEntry.setStatus('mandatory')
sDskIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 597, 4, 3, 1, 3, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sDskIndex.setStatus('mandatory')
sDskName = MibTableColumn((1, 3, 6, 1, 4, 1, 597, 4, 3, 1, 3, 3, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sDskName.setStatus('mandatory')
sDskUsedPercent = MibTableColumn((1, 3, 6, 1, 4, 1, 597, 4, 3, 1, 3, 3, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sDskUsedPercent.setStatus('mandatory')
sDskOps = MibTableColumn((1, 3, 6, 1, 4, 1, 597, 4, 3, 1, 3, 3, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sDskOps.setStatus('mandatory')
sDskMountCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 597, 4, 3, 1, 3, 3, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sDskMountCnt.setStatus('mandatory')
sDskRefCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 597, 4, 3, 1, 3, 3, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sDskRefCnt.setStatus('mandatory')
sDskTransCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 597, 4, 3, 1, 3, 3, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sDskTransCnt.setStatus('mandatory')
sDskMediaName = MibTableColumn((1, 3, 6, 1, 4, 1, 597, 4, 3, 1, 3, 3, 1, 8), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sDskMediaName.setStatus('mandatory')
sDskOpCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 597, 4, 3, 1, 3, 3, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sDskOpCnt.setStatus('mandatory')
sDskFreeBlocks = MibTableColumn((1, 3, 6, 1, 4, 1, 597, 4, 3, 1, 3, 3, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sDskFreeBlocks.setStatus('mandatory')
sDskMaxBlocks = MibTableColumn((1, 3, 6, 1, 4, 1, 597, 4, 3, 1, 3, 3, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sDskMaxBlocks.setStatus('mandatory')
sDskStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 597, 4, 3, 1, 3, 3, 1, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sDskStatus.setStatus('mandatory')
sDskDevChar = MibTableColumn((1, 3, 6, 1, 4, 1, 597, 4, 3, 1, 3, 3, 1, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sDskDevChar.setStatus('mandatory')
sDskLogVolName = MibTableColumn((1, 3, 6, 1, 4, 1, 597, 4, 3, 1, 3, 3, 1, 14), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sDskLogVolName.setStatus('mandatory')
sDskTrapPercent = MibTableColumn((1, 3, 6, 1, 4, 1, 597, 4, 3, 1, 3, 3, 1, 15), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sDskTrapPercent.setStatus('mandatory')
sDskTrapBlocks = MibTableColumn((1, 3, 6, 1, 4, 1, 597, 4, 3, 1, 3, 3, 1, 16), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sDskTrapBlocks.setStatus('mandatory')
sDskShdCount = MibTableColumn((1, 3, 6, 1, 4, 1, 597, 4, 3, 1, 3, 3, 1, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sDskShdCount.setStatus('mandatory')
sDskTrapOpSec = MibTableColumn((1, 3, 6, 1, 4, 1, 597, 4, 3, 1, 3, 3, 1, 18), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sDskTrapOpSec.setStatus('mandatory')
sDskQueueLength = MibTableColumn((1, 3, 6, 1, 4, 1, 597, 4, 3, 1, 3, 3, 1, 19), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sDskQueueLength.setStatus('mandatory')
sDskRemote = MibTableColumn((1, 3, 6, 1, 4, 1, 597, 4, 3, 1, 3, 3, 1, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("true", 1), ("false", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sDskRemote.setStatus('mandatory')
sShdTbl = MibTable((1, 3, 6, 1, 4, 1, 597, 4, 3, 1, 4, 1), )
if mibBuilder.loadTexts: sShdTbl.setStatus('mandatory')
sShdEntry = MibTableRow((1, 3, 6, 1, 4, 1, 597, 4, 3, 1, 4, 1, 1), ).setIndexNames((0, "COMTEK-VMS-NM-SYSMGR-MIB", "sDskIndex"), (0, "COMTEK-VMS-NM-SYSMGR-MIB", "sShdIndex"))
if mibBuilder.loadTexts: sShdEntry.setStatus('mandatory')
sShdIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 597, 4, 3, 1, 4, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sShdIndex.setStatus('mandatory')
sShdName = MibTableColumn((1, 3, 6, 1, 4, 1, 597, 4, 3, 1, 4, 1, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sShdName.setStatus('mandatory')
sShdFail = MibTableColumn((1, 3, 6, 1, 4, 1, 597, 4, 3, 1, 4, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("true", 1), ("false", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sShdFail.setStatus('mandatory')
sShdCopy = MibTableColumn((1, 3, 6, 1, 4, 1, 597, 4, 3, 1, 4, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("true", 1), ("false", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sShdCopy.setStatus('mandatory')
sShdMerge = MibTableColumn((1, 3, 6, 1, 4, 1, 597, 4, 3, 1, 4, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("true", 1), ("false", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sShdMerge.setStatus('mandatory')
sQueCnt = MibScalar((1, 3, 6, 1, 4, 1, 597, 4, 3, 1, 5, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sQueCnt.setStatus('mandatory')
sQueTime = MibScalar((1, 3, 6, 1, 4, 1, 597, 4, 3, 1, 5, 2), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sQueTime.setStatus('mandatory')
sQTbl = MibTable((1, 3, 6, 1, 4, 1, 597, 4, 3, 1, 5, 3), )
if mibBuilder.loadTexts: sQTbl.setStatus('mandatory')
sQTblEntry = MibTableRow((1, 3, 6, 1, 4, 1, 597, 4, 3, 1, 5, 3, 1), ).setIndexNames((0, "COMTEK-VMS-NM-SYSMGR-MIB", "sQIndex"))
if mibBuilder.loadTexts: sQTblEntry.setStatus('mandatory')
sQIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 597, 4, 3, 1, 5, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sQIndex.setStatus('mandatory')
sQName = MibTableColumn((1, 3, 6, 1, 4, 1, 597, 4, 3, 1, 5, 3, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 31))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sQName.setStatus('mandatory')
sQMonitor = MibTableColumn((1, 3, 6, 1, 4, 1, 597, 4, 3, 1, 5, 3, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("true", 1), ("false", 2))).clone('true')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sQMonitor.setStatus('mandatory')
sQStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 597, 4, 3, 1, 5, 3, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sQStatus.setStatus('mandatory')
sQEntryCount = MibTableColumn((1, 3, 6, 1, 4, 1, 597, 4, 3, 1, 5, 3, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sQEntryCount.setStatus('mandatory')
sQEntryTbl = MibTable((1, 3, 6, 1, 4, 1, 597, 4, 3, 1, 5, 4), )
if mibBuilder.loadTexts: sQEntryTbl.setStatus('mandatory')
sQEntry = MibTableRow((1, 3, 6, 1, 4, 1, 597, 4, 3, 1, 5, 4, 1), ).setIndexNames((0, "COMTEK-VMS-NM-SYSMGR-MIB", "sQIndex"), (0, "COMTEK-VMS-NM-SYSMGR-MIB", "sQEntryNum"))
if mibBuilder.loadTexts: sQEntry.setStatus('mandatory')
sQEntryNum = MibTableColumn((1, 3, 6, 1, 4, 1, 597, 4, 3, 1, 5, 4, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sQEntryNum.setStatus('mandatory')
sQEntryJobname = MibTableColumn((1, 3, 6, 1, 4, 1, 597, 4, 3, 1, 5, 4, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 39))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sQEntryJobname.setStatus('mandatory')
sQEntryJobStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 597, 4, 3, 1, 5, 4, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sQEntryJobStatus.setStatus('mandatory')
sQueBatch = MibIdentifier((1, 3, 6, 1, 4, 1, 597, 4, 3, 1, 5, 5))
sQueBatchPending = MibScalar((1, 3, 6, 1, 4, 1, 597, 4, 3, 1, 5, 5, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sQueBatchPending.setStatus('mandatory')
sQueBatchExecuting = MibScalar((1, 3, 6, 1, 4, 1, 597, 4, 3, 1, 5, 5, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sQueBatchExecuting.setStatus('mandatory')
sQueBatchTimed = MibScalar((1, 3, 6, 1, 4, 1, 597, 4, 3, 1, 5, 5, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sQueBatchTimed.setStatus('mandatory')
sQueBatchHolding = MibScalar((1, 3, 6, 1, 4, 1, 597, 4, 3, 1, 5, 5, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sQueBatchHolding.setStatus('mandatory')
sQueBatchRetained = MibScalar((1, 3, 6, 1, 4, 1, 597, 4, 3, 1, 5, 5, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sQueBatchRetained.setStatus('mandatory')
sQueGeneric = MibIdentifier((1, 3, 6, 1, 4, 1, 597, 4, 3, 1, 5, 6))
sQueGenericPending = MibScalar((1, 3, 6, 1, 4, 1, 597, 4, 3, 1, 5, 6, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sQueGenericPending.setStatus('mandatory')
sQueGenericExecuting = MibScalar((1, 3, 6, 1, 4, 1, 597, 4, 3, 1, 5, 6, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sQueGenericExecuting.setStatus('mandatory')
sQueGenericTimed = MibScalar((1, 3, 6, 1, 4, 1, 597, 4, 3, 1, 5, 6, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sQueGenericTimed.setStatus('mandatory')
sQueGenericHolding = MibScalar((1, 3, 6, 1, 4, 1, 597, 4, 3, 1, 5, 6, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sQueGenericHolding.setStatus('mandatory')
sQueGenericRetained = MibScalar((1, 3, 6, 1, 4, 1, 597, 4, 3, 1, 5, 6, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sQueGenericRetained.setStatus('mandatory')
sQuePrinter = MibIdentifier((1, 3, 6, 1, 4, 1, 597, 4, 3, 1, 5, 7))
sQuePrinterPending = MibScalar((1, 3, 6, 1, 4, 1, 597, 4, 3, 1, 5, 7, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sQuePrinterPending.setStatus('mandatory')
sQuePrinterExecuting = MibScalar((1, 3, 6, 1, 4, 1, 597, 4, 3, 1, 5, 7, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sQuePrinterExecuting.setStatus('mandatory')
sQuePrinterTimed = MibScalar((1, 3, 6, 1, 4, 1, 597, 4, 3, 1, 5, 7, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sQuePrinterTimed.setStatus('mandatory')
sQuePrinterHolding = MibScalar((1, 3, 6, 1, 4, 1, 597, 4, 3, 1, 5, 7, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sQuePrinterHolding.setStatus('mandatory')
sQuePrinterRetained = MibScalar((1, 3, 6, 1, 4, 1, 597, 4, 3, 1, 5, 7, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sQuePrinterRetained.setStatus('mandatory')
sQueServer = MibIdentifier((1, 3, 6, 1, 4, 1, 597, 4, 3, 1, 5, 8))
sQueServerPending = MibScalar((1, 3, 6, 1, 4, 1, 597, 4, 3, 1, 5, 8, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sQueServerPending.setStatus('mandatory')
sQueServerExecuting = MibScalar((1, 3, 6, 1, 4, 1, 597, 4, 3, 1, 5, 8, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sQueServerExecuting.setStatus('mandatory')
sQueServerTimed = MibScalar((1, 3, 6, 1, 4, 1, 597, 4, 3, 1, 5, 8, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sQueServerTimed.setStatus('mandatory')
sQueServerHolding = MibScalar((1, 3, 6, 1, 4, 1, 597, 4, 3, 1, 5, 8, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sQueServerHolding.setStatus('mandatory')
sQueServerRetained = MibScalar((1, 3, 6, 1, 4, 1, 597, 4, 3, 1, 5, 8, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sQueServerRetained.setStatus('mandatory')
sQueSymbiont = MibIdentifier((1, 3, 6, 1, 4, 1, 597, 4, 3, 1, 5, 9))
sQueSymbiontPending = MibScalar((1, 3, 6, 1, 4, 1, 597, 4, 3, 1, 5, 9, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sQueSymbiontPending.setStatus('mandatory')
sQueSymbiontExecuting = MibScalar((1, 3, 6, 1, 4, 1, 597, 4, 3, 1, 5, 9, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sQueSymbiontExecuting.setStatus('mandatory')
sQueSymbiontTimed = MibScalar((1, 3, 6, 1, 4, 1, 597, 4, 3, 1, 5, 9, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sQueSymbiontTimed.setStatus('mandatory')
sQueSymbiontHolding = MibScalar((1, 3, 6, 1, 4, 1, 597, 4, 3, 1, 5, 9, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sQueSymbiontHolding.setStatus('mandatory')
sQueSymbiontRetained = MibScalar((1, 3, 6, 1, 4, 1, 597, 4, 3, 1, 5, 9, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sQueSymbiontRetained.setStatus('mandatory')
sQueTerminal = MibIdentifier((1, 3, 6, 1, 4, 1, 597, 4, 3, 1, 5, 10))
sQueTerminalPending = MibScalar((1, 3, 6, 1, 4, 1, 597, 4, 3, 1, 5, 10, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sQueTerminalPending.setStatus('mandatory')
sQueTerminalExecuting = MibScalar((1, 3, 6, 1, 4, 1, 597, 4, 3, 1, 5, 10, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sQueTerminalExecuting.setStatus('mandatory')
sQueTerminalTimed = MibScalar((1, 3, 6, 1, 4, 1, 597, 4, 3, 1, 5, 10, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sQueTerminalTimed.setStatus('mandatory')
sQueTerminalHolding = MibScalar((1, 3, 6, 1, 4, 1, 597, 4, 3, 1, 5, 10, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sQueTerminalHolding.setStatus('mandatory')
sQueTerminalRetained = MibScalar((1, 3, 6, 1, 4, 1, 597, 4, 3, 1, 5, 10, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sQueTerminalRetained.setStatus('mandatory')
sQMan = MibIdentifier((1, 3, 6, 1, 4, 1, 597, 4, 3, 1, 5, 11))
sQManCount = MibScalar((1, 3, 6, 1, 4, 1, 597, 4, 3, 1, 5, 11, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sQManCount.setStatus('mandatory')
sQManTbl = MibTable((1, 3, 6, 1, 4, 1, 597, 4, 3, 1, 5, 11, 2), )
if mibBuilder.loadTexts: sQManTbl.setStatus('mandatory')
sQManTblEntry = MibTableRow((1, 3, 6, 1, 4, 1, 597, 4, 3, 1, 5, 11, 2, 1), ).setIndexNames((0, "COMTEK-VMS-NM-SYSMGR-MIB", "sQManIndex"))
if mibBuilder.loadTexts: sQManTblEntry.setStatus('mandatory')
sQManIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 597, 4, 3, 1, 5, 11, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sQManIndex.setStatus('mandatory')
sQManName = MibTableColumn((1, 3, 6, 1, 4, 1, 597, 4, 3, 1, 5, 11, 2, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 31))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sQManName.setStatus('mandatory')
sQManStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 597, 4, 3, 1, 5, 11, 2, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sQManStatus.setStatus('mandatory')
sPsCnt = MibScalar((1, 3, 6, 1, 4, 1, 597, 4, 3, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sPsCnt.setStatus('mandatory')
sPsTime = MibScalar((1, 3, 6, 1, 4, 1, 597, 4, 3, 2, 1, 2), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sPsTime.setStatus('mandatory')
sPsTbl = MibTable((1, 3, 6, 1, 4, 1, 597, 4, 3, 2, 1, 3), )
if mibBuilder.loadTexts: sPsTbl.setStatus('mandatory')
sPsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 597, 4, 3, 2, 1, 3, 1), ).setIndexNames((0, "COMTEK-VMS-NM-SYSMGR-MIB", "sPsPID"))
if mibBuilder.loadTexts: sPsEntry.setStatus('mandatory')
sPsPID = MibTableColumn((1, 3, 6, 1, 4, 1, 597, 4, 3, 2, 1, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sPsPID.setStatus('mandatory')
sPsProcName = MibTableColumn((1, 3, 6, 1, 4, 1, 597, 4, 3, 2, 1, 3, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 15))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sPsProcName.setStatus('mandatory')
sPsState = MibTableColumn((1, 3, 6, 1, 4, 1, 597, 4, 3, 2, 1, 3, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14))).clone(namedValues=NamedValues(("colpg", 1), ("mwait", 2), ("cef", 3), ("pfw", 4), ("lef", 5), ("lefo", 6), ("hib", 7), ("hibo", 8), ("susp", 9), ("suspo", 10), ("fpg", 11), ("com", 12), ("como", 13), ("cur", 14)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sPsState.setStatus('mandatory')
sPsPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 597, 4, 3, 2, 1, 3, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 31))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sPsPriority.setStatus('mandatory')
sPsDirectIO = MibTableColumn((1, 3, 6, 1, 4, 1, 597, 4, 3, 2, 1, 3, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sPsDirectIO.setStatus('mandatory')
sPsCpuTime = MibTableColumn((1, 3, 6, 1, 4, 1, 597, 4, 3, 2, 1, 3, 1, 6), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sPsCpuTime.setStatus('mandatory')
sPsPgFaults = MibTableColumn((1, 3, 6, 1, 4, 1, 597, 4, 3, 2, 1, 3, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sPsPgFaults.setStatus('mandatory')
sPsWorkSetSize = MibTableColumn((1, 3, 6, 1, 4, 1, 597, 4, 3, 2, 1, 3, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sPsWorkSetSize.setStatus('mandatory')
sPsUsername = MibTableColumn((1, 3, 6, 1, 4, 1, 597, 4, 3, 2, 1, 3, 1, 9), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(12, 12)).setFixedLength(12)).setMaxAccess("readonly")
if mibBuilder.loadTexts: sPsUsername.setStatus('mandatory')
sPsPhysTerm = MibTableColumn((1, 3, 6, 1, 4, 1, 597, 4, 3, 2, 1, 3, 1, 10), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 8))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sPsPhysTerm.setStatus('mandatory')
sPsImageName = MibTableColumn((1, 3, 6, 1, 4, 1, 597, 4, 3, 2, 1, 3, 1, 11), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sPsImageName.setStatus('mandatory')
sPsLoginTime = MibTableColumn((1, 3, 6, 1, 4, 1, 597, 4, 3, 2, 1, 3, 1, 12), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sPsLoginTime.setStatus('mandatory')
sPsPgTblCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 597, 4, 3, 2, 1, 3, 1, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sPsPgTblCnt.setStatus('mandatory')
sPsMode = MibTableColumn((1, 3, 6, 1, 4, 1, 597, 4, 3, 2, 1, 3, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("other", 1), ("network", 2), ("batch", 3), ("interactive", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sPsMode.setStatus('mandatory')
sPsRWState = MibTableColumn((1, 3, 6, 1, 4, 1, 597, 4, 3, 2, 1, 3, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 11, 12, 13, 14, 15, 16, 18, 19))).clone(namedValues=NamedValues(("astwait", 1), ("mailbox", 2), ("npdynmem", 3), ("pgfile", 4), ("pgdynmem", 5), ("mplempty", 11), ("mpwbusy", 12), ("scs", 13), ("clustran", 14), ("cpucap", 15), ("clusrv", 16), ("psxfrk", 18), ("mutex", 19)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sPsRWState.setStatus('mandatory')
sPsCOMQueue = MibScalar((1, 3, 6, 1, 4, 1, 597, 4, 3, 2, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sPsCOMQueue.setStatus('mandatory')
sPsCOMOQueue = MibScalar((1, 3, 6, 1, 4, 1, 597, 4, 3, 2, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sPsCOMOQueue.setStatus('mandatory')
sPsOther = MibScalar((1, 3, 6, 1, 4, 1, 597, 4, 3, 2, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sPsOther.setStatus('mandatory')
sPsNetwork = MibScalar((1, 3, 6, 1, 4, 1, 597, 4, 3, 2, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sPsNetwork.setStatus('mandatory')
sPsBatch = MibScalar((1, 3, 6, 1, 4, 1, 597, 4, 3, 2, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sPsBatch.setStatus('mandatory')
sPsInteractive = MibScalar((1, 3, 6, 1, 4, 1, 597, 4, 3, 2, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sPsInteractive.setStatus('mandatory')
sPsAvailProcSlots = MibScalar((1, 3, 6, 1, 4, 1, 597, 4, 3, 2, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sPsAvailProcSlots.setStatus('mandatory')
sCritCnt = MibScalar((1, 3, 6, 1, 4, 1, 597, 4, 3, 2, 2, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sCritCnt.setStatus('mandatory')
sCritTime = MibScalar((1, 3, 6, 1, 4, 1, 597, 4, 3, 2, 2, 2), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sCritTime.setStatus('mandatory')
sCritTbl = MibTable((1, 3, 6, 1, 4, 1, 597, 4, 3, 2, 2, 3), )
if mibBuilder.loadTexts: sCritTbl.setStatus('mandatory')
sCritEntry = MibTableRow((1, 3, 6, 1, 4, 1, 597, 4, 3, 2, 2, 3, 1), ).setIndexNames((0, "COMTEK-VMS-NM-SYSMGR-MIB", "sCritIndex"))
if mibBuilder.loadTexts: sCritEntry.setStatus('mandatory')
sCritIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 597, 4, 3, 2, 2, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sCritIndex.setStatus('mandatory')
sCritName = MibTableColumn((1, 3, 6, 1, 4, 1, 597, 4, 3, 2, 2, 3, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 15))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sCritName.setStatus('mandatory')
sCritReqCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 597, 4, 3, 2, 2, 3, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sCritReqCnt.setStatus('mandatory')
sCritCurCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 597, 4, 3, 2, 2, 3, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sCritCurCnt.setStatus('mandatory')
sTrapNextSeqNum = MibScalar((1, 3, 6, 1, 4, 1, 597, 4, 3, 3, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sTrapNextSeqNum.setStatus('mandatory')
sTrapTime = MibScalar((1, 3, 6, 1, 4, 1, 597, 4, 3, 3, 2), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sTrapTime.setStatus('mandatory')
sTrapResendSeqNum = MibScalar((1, 3, 6, 1, 4, 1, 597, 4, 3, 3, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sTrapResendSeqNum.setStatus('mandatory')
sTrapLastSeqNumSent = MibScalar((1, 3, 6, 1, 4, 1, 597, 4, 3, 3, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sTrapLastSeqNumSent.setStatus('mandatory')
sTrapLostCount = MibScalar((1, 3, 6, 1, 4, 1, 597, 4, 3, 3, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sTrapLostCount.setStatus('mandatory')
sHwErrDeviceCnt = MibScalar((1, 3, 6, 1, 4, 1, 597, 4, 3, 4, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sHwErrDeviceCnt.setStatus('mandatory')
sHwErrTime = MibScalar((1, 3, 6, 1, 4, 1, 597, 4, 3, 4, 1, 2), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sHwErrTime.setStatus('mandatory')
sHwErrTbl = MibTable((1, 3, 6, 1, 4, 1, 597, 4, 3, 4, 1, 3), )
if mibBuilder.loadTexts: sHwErrTbl.setStatus('mandatory')
sHwErrEntry = MibTableRow((1, 3, 6, 1, 4, 1, 597, 4, 3, 4, 1, 3, 1), ).setIndexNames((0, "COMTEK-VMS-NM-SYSMGR-MIB", "sHwErrIndex"))
if mibBuilder.loadTexts: sHwErrEntry.setStatus('mandatory')
sHwErrIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 597, 4, 3, 4, 1, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sHwErrIndex.setStatus('mandatory')
sHwErrDeviceName = MibTableColumn((1, 3, 6, 1, 4, 1, 597, 4, 3, 4, 1, 3, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sHwErrDeviceName.setStatus('mandatory')
sHwErrCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 597, 4, 3, 4, 1, 3, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sHwErrCnt.setStatus('mandatory')
sHwErrLastTime = MibTableColumn((1, 3, 6, 1, 4, 1, 597, 4, 3, 4, 1, 3, 1, 4), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sHwErrLastTime.setStatus('mandatory')
sSwErrStatus = MibScalar((1, 3, 6, 1, 4, 1, 597, 4, 3, 4, 2, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sSwErrStatus.setStatus('mandatory')
sSwErrFile = MibScalar((1, 3, 6, 1, 4, 1, 597, 4, 3, 4, 2, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sSwErrFile.setStatus('mandatory')
sSwErrLineNum = MibScalar((1, 3, 6, 1, 4, 1, 597, 4, 3, 4, 2, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sSwErrLineNum.setStatus('mandatory')
sSwErrLastTime = MibScalar((1, 3, 6, 1, 4, 1, 597, 4, 3, 4, 2, 4), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sSwErrLastTime.setStatus('mandatory')
sSwErrMessage = MibScalar((1, 3, 6, 1, 4, 1, 597, 4, 3, 4, 2, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sSwErrMessage.setStatus('mandatory')
sOpcomOne = MibScalar((1, 3, 6, 1, 4, 1, 597, 4, 3, 4, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sOpcomOne.setStatus('mandatory')
sOpcomTwo = MibScalar((1, 3, 6, 1, 4, 1, 597, 4, 3, 4, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sOpcomTwo.setStatus('mandatory')
sOpcomThree = MibScalar((1, 3, 6, 1, 4, 1, 597, 4, 3, 4, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sOpcomThree.setStatus('mandatory')
sOpcomFour = MibScalar((1, 3, 6, 1, 4, 1, 597, 4, 3, 4, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sOpcomFour.setStatus('mandatory')
sOpcomFive = MibScalar((1, 3, 6, 1, 4, 1, 597, 4, 3, 4, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sOpcomFive.setStatus('mandatory')
sOpcomReplyId = MibScalar((1, 3, 6, 1, 4, 1, 597, 4, 3, 4, 8), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sOpcomReplyId.setStatus('mandatory')
sOpcomReplyStatus = MibScalar((1, 3, 6, 1, 4, 1, 597, 4, 3, 4, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("noStatus", 1), ("blankTape", 2), ("initializeTape", 3), ("requestComplete", 4), ("requestPending", 5), ("requestAborted", 6))).clone('noStatus')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sOpcomReplyStatus.setStatus('mandatory')
sOpcomReplyText = MibScalar((1, 3, 6, 1, 4, 1, 597, 4, 3, 4, 10), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sOpcomReplyText.setStatus('mandatory')
sOpcomReplySend = MibScalar((1, 3, 6, 1, 4, 1, 597, 4, 3, 4, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("true", 1), ("false", 2))).clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sOpcomReplySend.setStatus('mandatory')
sOpcomSix = MibScalar((1, 3, 6, 1, 4, 1, 597, 4, 3, 4, 12), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sOpcomSix.setStatus('mandatory')
sOpcomSeven = MibScalar((1, 3, 6, 1, 4, 1, 597, 4, 3, 4, 13), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sOpcomSeven.setStatus('mandatory')
sCfgFile = MibScalar((1, 3, 6, 1, 4, 1, 597, 4, 3, 5, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sCfgFile.setStatus('mandatory')
sCfgLogFile = MibScalar((1, 3, 6, 1, 4, 1, 597, 4, 3, 5, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sCfgLogFile.setStatus('mandatory')
sCfgCritFile = MibScalar((1, 3, 6, 1, 4, 1, 597, 4, 3, 5, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sCfgCritFile.setStatus('mandatory')
sCfgReinitSubagent = MibScalar((1, 3, 6, 1, 4, 1, 597, 4, 3, 5, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("true", 1), ("false", 2))).clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sCfgReinitSubagent.setStatus('mandatory')
sCfgTraps = MibScalar((1, 3, 6, 1, 4, 1, 597, 4, 3, 5, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('enabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sCfgTraps.setStatus('mandatory')
sCfgHwErrTraps = MibScalar((1, 3, 6, 1, 4, 1, 597, 4, 3, 5, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('enabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sCfgHwErrTraps.setStatus('mandatory')
sCfgCpuLimit = MibScalar((1, 3, 6, 1, 4, 1, 597, 4, 3, 5, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100)).clone(90)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sCfgCpuLimit.setStatus('mandatory')
sCfgIntLimit = MibScalar((1, 3, 6, 1, 4, 1, 597, 4, 3, 5, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100)).clone(20)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sCfgIntLimit.setStatus('mandatory')
sCfgDskOps = MibScalar((1, 3, 6, 1, 4, 1, 597, 4, 3, 5, 9), Integer32().clone(25)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sCfgDskOps.setStatus('mandatory')
sCfgDskLimit = MibScalar((1, 3, 6, 1, 4, 1, 597, 4, 3, 5, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100)).clone(90)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sCfgDskLimit.setStatus('mandatory')
sCfgPgLimit = MibScalar((1, 3, 6, 1, 4, 1, 597, 4, 3, 5, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100)).clone(90)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sCfgPgLimit.setStatus('mandatory')
sCfgSwpLimit = MibScalar((1, 3, 6, 1, 4, 1, 597, 4, 3, 5, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100)).clone(90)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sCfgSwpLimit.setStatus('mandatory')
sCfgPsTimer = MibScalar((1, 3, 6, 1, 4, 1, 597, 4, 3, 5, 13), Integer32().clone(5)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sCfgPsTimer.setStatus('mandatory')
sCfgDskTimer = MibScalar((1, 3, 6, 1, 4, 1, 597, 4, 3, 5, 14), Integer32().clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sCfgDskTimer.setStatus('mandatory')
sCfgHwErrTimer = MibScalar((1, 3, 6, 1, 4, 1, 597, 4, 3, 5, 15), Integer32().clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sCfgHwErrTimer.setStatus('mandatory')
sCfgSysInfoTimer = MibScalar((1, 3, 6, 1, 4, 1, 597, 4, 3, 5, 16), Integer32().clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sCfgSysInfoTimer.setStatus('mandatory')
sCfgCritTimer = MibScalar((1, 3, 6, 1, 4, 1, 597, 4, 3, 5, 17), Integer32().clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sCfgCritTimer.setStatus('mandatory')
sCfgDskAlarm = MibScalar((1, 3, 6, 1, 4, 1, 597, 4, 3, 5, 18), Integer32().clone(5)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sCfgDskAlarm.setStatus('mandatory')
sCfgCritAlarm = MibScalar((1, 3, 6, 1, 4, 1, 597, 4, 3, 5, 19), Integer32().clone(5)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sCfgCritAlarm.setStatus('mandatory')
sCfgTrapTblSize = MibScalar((1, 3, 6, 1, 4, 1, 597, 4, 3, 5, 20), Integer32().subtype(subtypeSpec=ValueRangeConstraint(10, 5000)).clone(100)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sCfgTrapTblSize.setStatus('mandatory')
sCfgHostName = MibScalar((1, 3, 6, 1, 4, 1, 597, 4, 3, 5, 21), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255)).clone('localhost')).setMaxAccess("readonly")
if mibBuilder.loadTexts: sCfgHostName.setStatus('mandatory')
sCfgAllPsData = MibScalar((1, 3, 6, 1, 4, 1, 597, 4, 3, 5, 22), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2))).clone('no')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sCfgAllPsData.setStatus('mandatory')
sCfgTimeout = MibScalar((1, 3, 6, 1, 4, 1, 597, 4, 3, 5, 23), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 3600))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sCfgTimeout.setStatus('mandatory')
sCfgOpcomSecurity = MibScalar((1, 3, 6, 1, 4, 1, 597, 4, 3, 5, 24), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('enabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sCfgOpcomSecurity.setStatus('mandatory')
sCfgControlTermProc = MibScalar((1, 3, 6, 1, 4, 1, 597, 4, 3, 5, 25), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('disabled')).setMaxAccess("readonly")
if mibBuilder.loadTexts: sCfgControlTermProc.setStatus('mandatory')
sCfgTermProc = MibScalar((1, 3, 6, 1, 4, 1, 597, 4, 3, 5, 26), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("true", 1), ("false", 2))).clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sCfgTermProc.setStatus('mandatory')
sCfgVersion = MibScalar((1, 3, 6, 1, 4, 1, 597, 4, 3, 5, 27), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sCfgVersion.setStatus('mandatory')
sCfgUpTime = MibScalar((1, 3, 6, 1, 4, 1, 597, 4, 3, 5, 28), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sCfgUpTime.setStatus('mandatory')
sCfgMaxTrapSec = MibScalar((1, 3, 6, 1, 4, 1, 597, 4, 3, 5, 29), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sCfgMaxTrapSec.setStatus('mandatory')
sCfgCritDsk = MibScalar((1, 3, 6, 1, 4, 1, 597, 4, 3, 5, 30), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sCfgCritDsk.setStatus('mandatory')
sCfgCritQue = MibScalar((1, 3, 6, 1, 4, 1, 597, 4, 3, 5, 31), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sCfgCritQue.setStatus('mandatory')
sCfgQueTimer = MibScalar((1, 3, 6, 1, 4, 1, 597, 4, 3, 5, 32), Integer32().clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sCfgQueTimer.setStatus('mandatory')
sCfgDskMinFreeBlks = MibScalar((1, 3, 6, 1, 4, 1, 597, 4, 3, 5, 33), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sCfgDskMinFreeBlks.setStatus('mandatory')
sCfgMemLimit = MibScalar((1, 3, 6, 1, 4, 1, 597, 4, 3, 5, 34), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100)).clone(90)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sCfgMemLimit.setStatus('mandatory')
sCfgCOMQueueLimit = MibScalar((1, 3, 6, 1, 4, 1, 597, 4, 3, 5, 35), Integer32().clone(5)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sCfgCOMQueueLimit.setStatus('mandatory')
sCfgCOMOQueueLimit = MibScalar((1, 3, 6, 1, 4, 1, 597, 4, 3, 5, 36), Integer32().clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sCfgCOMOQueueLimit.setStatus('mandatory')
sCfgOpcomCards = MibScalar((1, 3, 6, 1, 4, 1, 597, 4, 3, 5, 37), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('enabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sCfgOpcomCards.setStatus('mandatory')
sCfgOpcomCentral = MibScalar((1, 3, 6, 1, 4, 1, 597, 4, 3, 5, 38), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('enabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sCfgOpcomCentral.setStatus('mandatory')
sCfgOpcomCluster = MibScalar((1, 3, 6, 1, 4, 1, 597, 4, 3, 5, 39), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('enabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sCfgOpcomCluster.setStatus('mandatory')
sCfgOpcomDevices = MibScalar((1, 3, 6, 1, 4, 1, 597, 4, 3, 5, 40), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('enabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sCfgOpcomDevices.setStatus('mandatory')
sCfgOpcomDisks = MibScalar((1, 3, 6, 1, 4, 1, 597, 4, 3, 5, 41), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('enabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sCfgOpcomDisks.setStatus('mandatory')
sCfgOpcomLicense = MibScalar((1, 3, 6, 1, 4, 1, 597, 4, 3, 5, 42), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('enabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sCfgOpcomLicense.setStatus('mandatory')
sCfgOpcomNetwork = MibScalar((1, 3, 6, 1, 4, 1, 597, 4, 3, 5, 43), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('enabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sCfgOpcomNetwork.setStatus('mandatory')
sCfgOpcomOper1 = MibScalar((1, 3, 6, 1, 4, 1, 597, 4, 3, 5, 44), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('enabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sCfgOpcomOper1.setStatus('mandatory')
sCfgOpcomOper2 = MibScalar((1, 3, 6, 1, 4, 1, 597, 4, 3, 5, 45), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('enabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sCfgOpcomOper2.setStatus('mandatory')
sCfgOpcomOper3 = MibScalar((1, 3, 6, 1, 4, 1, 597, 4, 3, 5, 46), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('enabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sCfgOpcomOper3.setStatus('mandatory')
sCfgOpcomOper4 = MibScalar((1, 3, 6, 1, 4, 1, 597, 4, 3, 5, 47), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('enabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sCfgOpcomOper4.setStatus('mandatory')
sCfgOpcomOper5 = MibScalar((1, 3, 6, 1, 4, 1, 597, 4, 3, 5, 48), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('enabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sCfgOpcomOper5.setStatus('mandatory')
sCfgOpcomOper6 = MibScalar((1, 3, 6, 1, 4, 1, 597, 4, 3, 5, 49), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('enabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sCfgOpcomOper6.setStatus('mandatory')
sCfgOpcomOper7 = MibScalar((1, 3, 6, 1, 4, 1, 597, 4, 3, 5, 50), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('enabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sCfgOpcomOper7.setStatus('mandatory')
sCfgOpcomOper8 = MibScalar((1, 3, 6, 1, 4, 1, 597, 4, 3, 5, 51), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('enabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sCfgOpcomOper8.setStatus('mandatory')
sCfgOpcomOper9 = MibScalar((1, 3, 6, 1, 4, 1, 597, 4, 3, 5, 52), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('enabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sCfgOpcomOper9.setStatus('mandatory')
sCfgOpcomOper10 = MibScalar((1, 3, 6, 1, 4, 1, 597, 4, 3, 5, 53), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('enabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sCfgOpcomOper10.setStatus('mandatory')
sCfgOpcomOper11 = MibScalar((1, 3, 6, 1, 4, 1, 597, 4, 3, 5, 54), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('enabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sCfgOpcomOper11.setStatus('mandatory')
sCfgOpcomOper12 = MibScalar((1, 3, 6, 1, 4, 1, 597, 4, 3, 5, 55), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('enabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sCfgOpcomOper12.setStatus('mandatory')
sCfgOpcomPrinter = MibScalar((1, 3, 6, 1, 4, 1, 597, 4, 3, 5, 56), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('enabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sCfgOpcomPrinter.setStatus('mandatory')
sCfgOpcomTapes = MibScalar((1, 3, 6, 1, 4, 1, 597, 4, 3, 5, 57), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('enabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sCfgOpcomTapes.setStatus('mandatory')
sCfgOpcomFilter = MibScalar((1, 3, 6, 1, 4, 1, 597, 4, 3, 5, 58), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("dropMatch", 1), ("keepMatch", 2))).clone('dropMatch')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sCfgOpcomFilter.setStatus('mandatory')
sCfgLocalDisksOnly = MibScalar((1, 3, 6, 1, 4, 1, 597, 4, 3, 5, 59), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("true", 1), ("false", 2))).clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sCfgLocalDisksOnly.setStatus('mandatory')
sCfgCritDisksOnly = MibScalar((1, 3, 6, 1, 4, 1, 597, 4, 3, 5, 60), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("true", 1), ("false", 2))).clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sCfgCritDisksOnly.setStatus('mandatory')
vmsModes = MibIdentifier((1, 3, 6, 1, 4, 1, 597, 4, 15, 1))
vmsModeUpdateTime = MibScalar((1, 3, 6, 1, 4, 1, 597, 4, 15, 1, 1), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vmsModeUpdateTime.setStatus('mandatory')
vmsModeUpdateInterval = MibScalar((1, 3, 6, 1, 4, 1, 597, 4, 15, 1, 2), Integer32().clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vmsModeUpdateInterval.setStatus('mandatory')
vmsModeCpuCount = MibScalar((1, 3, 6, 1, 4, 1, 597, 4, 15, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vmsModeCpuCount.setStatus('mandatory')
vmsModeTable = MibTable((1, 3, 6, 1, 4, 1, 597, 4, 15, 1, 4), )
if mibBuilder.loadTexts: vmsModeTable.setStatus('mandatory')
vmsModeTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 597, 4, 15, 1, 4, 1), ).setIndexNames((0, "COMTEK-VMS-NM-SYSMGR-MIB", "vmsModeCpuId"))
if mibBuilder.loadTexts: vmsModeTableEntry.setStatus('mandatory')
vmsModeCpuId = MibTableColumn((1, 3, 6, 1, 4, 1, 597, 4, 15, 1, 4, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vmsModeCpuId.setStatus('mandatory')
vmsModeKernel = MibTableColumn((1, 3, 6, 1, 4, 1, 597, 4, 15, 1, 4, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vmsModeKernel.setStatus('mandatory')
vmsModeExec = MibTableColumn((1, 3, 6, 1, 4, 1, 597, 4, 15, 1, 4, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vmsModeExec.setStatus('mandatory')
vmsModeSuper = MibTableColumn((1, 3, 6, 1, 4, 1, 597, 4, 15, 1, 4, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vmsModeSuper.setStatus('mandatory')
vmsModeUser = MibTableColumn((1, 3, 6, 1, 4, 1, 597, 4, 15, 1, 4, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vmsModeUser.setStatus('mandatory')
vmsModeInter = MibTableColumn((1, 3, 6, 1, 4, 1, 597, 4, 15, 1, 4, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vmsModeInter.setStatus('mandatory')
vmsModeMPSync = MibTableColumn((1, 3, 6, 1, 4, 1, 597, 4, 15, 1, 4, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vmsModeMPSync.setStatus('mandatory')
vmsModeCompat = MibTableColumn((1, 3, 6, 1, 4, 1, 597, 4, 15, 1, 4, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vmsModeCompat.setStatus('mandatory')
vmsModeIdle = MibTableColumn((1, 3, 6, 1, 4, 1, 597, 4, 15, 1, 4, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vmsModeIdle.setStatus('mandatory')
vmsTotalModes = MibIdentifier((1, 3, 6, 1, 4, 1, 597, 4, 15, 1, 5))
vmsTotalKernel = MibScalar((1, 3, 6, 1, 4, 1, 597, 4, 15, 1, 5, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vmsTotalKernel.setStatus('mandatory')
vmsTotalExec = MibScalar((1, 3, 6, 1, 4, 1, 597, 4, 15, 1, 5, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vmsTotalExec.setStatus('mandatory')
vmsTotalSuper = MibScalar((1, 3, 6, 1, 4, 1, 597, 4, 15, 1, 5, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vmsTotalSuper.setStatus('mandatory')
vmsTotalUser = MibScalar((1, 3, 6, 1, 4, 1, 597, 4, 15, 1, 5, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vmsTotalUser.setStatus('mandatory')
vmsTotalInter = MibScalar((1, 3, 6, 1, 4, 1, 597, 4, 15, 1, 5, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vmsTotalInter.setStatus('mandatory')
vmsTotalMPSync = MibScalar((1, 3, 6, 1, 4, 1, 597, 4, 15, 1, 5, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vmsTotalMPSync.setStatus('mandatory')
vmsTotalComp = MibScalar((1, 3, 6, 1, 4, 1, 597, 4, 15, 1, 5, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vmsTotalComp.setStatus('mandatory')
vmsTotalIdle = MibScalar((1, 3, 6, 1, 4, 1, 597, 4, 15, 1, 5, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vmsTotalIdle.setStatus('mandatory')
vmsFile = MibIdentifier((1, 3, 6, 1, 4, 1, 597, 4, 15, 2))
vmsFileUpdateTime = MibScalar((1, 3, 6, 1, 4, 1, 597, 4, 15, 2, 1), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vmsFileUpdateTime.setStatus('mandatory')
vmsFileUpdateInterval = MibScalar((1, 3, 6, 1, 4, 1, 597, 4, 15, 2, 2), Integer32().clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vmsFileUpdateInterval.setStatus('mandatory')
vmsFileDirFCBHit = MibScalar((1, 3, 6, 1, 4, 1, 597, 4, 15, 2, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vmsFileDirFCBHit.setStatus('mandatory')
vmsFileDirFCBAttempt = MibScalar((1, 3, 6, 1, 4, 1, 597, 4, 15, 2, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vmsFileDirFCBAttempt.setStatus('mandatory')
vmsFileDirDataHit = MibScalar((1, 3, 6, 1, 4, 1, 597, 4, 15, 2, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vmsFileDirDataHit.setStatus('mandatory')
vmsFileDirDataAttempt = MibScalar((1, 3, 6, 1, 4, 1, 597, 4, 15, 2, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vmsFileDirDataAttempt.setStatus('mandatory')
vmsFileFileHdrHit = MibScalar((1, 3, 6, 1, 4, 1, 597, 4, 15, 2, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vmsFileFileHdrHit.setStatus('mandatory')
vmsFileFileHdrAttempt = MibScalar((1, 3, 6, 1, 4, 1, 597, 4, 15, 2, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vmsFileFileHdrAttempt.setStatus('mandatory')
vmsFileFileIdHit = MibScalar((1, 3, 6, 1, 4, 1, 597, 4, 15, 2, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vmsFileFileIdHit.setStatus('mandatory')
vmsFileFileIdAttempt = MibScalar((1, 3, 6, 1, 4, 1, 597, 4, 15, 2, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vmsFileFileIdAttempt.setStatus('mandatory')
vmsFileExtentHit = MibScalar((1, 3, 6, 1, 4, 1, 597, 4, 15, 2, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vmsFileExtentHit.setStatus('mandatory')
vmsFileExtentAttempt = MibScalar((1, 3, 6, 1, 4, 1, 597, 4, 15, 2, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vmsFileExtentAttempt.setStatus('mandatory')
vmsFileQuotaHit = MibScalar((1, 3, 6, 1, 4, 1, 597, 4, 15, 2, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vmsFileQuotaHit.setStatus('mandatory')
vmsFileQuotaAttempt = MibScalar((1, 3, 6, 1, 4, 1, 597, 4, 15, 2, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vmsFileQuotaAttempt.setStatus('mandatory')
vmsFileBitmapHit = MibScalar((1, 3, 6, 1, 4, 1, 597, 4, 15, 2, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vmsFileBitmapHit.setStatus('mandatory')
vmsFileBitmapAttempt = MibScalar((1, 3, 6, 1, 4, 1, 597, 4, 15, 2, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vmsFileBitmapAttempt.setStatus('mandatory')
vmsFcp = MibIdentifier((1, 3, 6, 1, 4, 1, 597, 4, 15, 3))
vmsFcpUpdateTime = MibScalar((1, 3, 6, 1, 4, 1, 597, 4, 15, 3, 1), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vmsFcpUpdateTime.setStatus('mandatory')
vmsFcpUpdateInterval = MibScalar((1, 3, 6, 1, 4, 1, 597, 4, 15, 3, 2), Integer32().clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vmsFcpUpdateInterval.setStatus('mandatory')
vmsFcpFCPCall = MibScalar((1, 3, 6, 1, 4, 1, 597, 4, 15, 3, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vmsFcpFCPCall.setStatus('mandatory')
vmsFcpAllocation = MibScalar((1, 3, 6, 1, 4, 1, 597, 4, 15, 3, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vmsFcpAllocation.setStatus('mandatory')
vmsFcpCreate = MibScalar((1, 3, 6, 1, 4, 1, 597, 4, 15, 3, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vmsFcpCreate.setStatus('mandatory')
vmsFcpDiskRead = MibScalar((1, 3, 6, 1, 4, 1, 597, 4, 15, 3, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vmsFcpDiskRead.setStatus('mandatory')
vmsFcpDiskWrite = MibScalar((1, 3, 6, 1, 4, 1, 597, 4, 15, 3, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vmsFcpDiskWrite.setStatus('mandatory')
vmsFcpVolumeLockWait = MibScalar((1, 3, 6, 1, 4, 1, 597, 4, 15, 3, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vmsFcpVolumeLockWait.setStatus('mandatory')
vmsFcpCPUTick = MibScalar((1, 3, 6, 1, 4, 1, 597, 4, 15, 3, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vmsFcpCPUTick.setStatus('mandatory')
vmsFcpPageFault = MibScalar((1, 3, 6, 1, 4, 1, 597, 4, 15, 3, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vmsFcpPageFault.setStatus('mandatory')
vmsFcpWindowTurn = MibScalar((1, 3, 6, 1, 4, 1, 597, 4, 15, 3, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vmsFcpWindowTurn.setStatus('mandatory')
vmsFcpLookup = MibScalar((1, 3, 6, 1, 4, 1, 597, 4, 15, 3, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vmsFcpLookup.setStatus('mandatory')
vmsFcpOpen = MibScalar((1, 3, 6, 1, 4, 1, 597, 4, 15, 3, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vmsFcpOpen.setStatus('mandatory')
vmsFcpErase = MibScalar((1, 3, 6, 1, 4, 1, 597, 4, 15, 3, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vmsFcpErase.setStatus('mandatory')
vmsIo = MibIdentifier((1, 3, 6, 1, 4, 1, 597, 4, 15, 4))
vmsIoUpdateTime = MibScalar((1, 3, 6, 1, 4, 1, 597, 4, 15, 4, 1), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vmsIoUpdateTime.setStatus('mandatory')
vmsIoUpdateInterval = MibScalar((1, 3, 6, 1, 4, 1, 597, 4, 15, 4, 2), Integer32().clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vmsIoUpdateInterval.setStatus('mandatory')
vmsIoDirectIO = MibScalar((1, 3, 6, 1, 4, 1, 597, 4, 15, 4, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vmsIoDirectIO.setStatus('mandatory')
vmsIoBufferedIO = MibScalar((1, 3, 6, 1, 4, 1, 597, 4, 15, 4, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vmsIoBufferedIO.setStatus('mandatory')
vmsIoMailboxWrite = MibScalar((1, 3, 6, 1, 4, 1, 597, 4, 15, 4, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vmsIoMailboxWrite.setStatus('mandatory')
vmsIoSplitTransfer = MibScalar((1, 3, 6, 1, 4, 1, 597, 4, 15, 4, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vmsIoSplitTransfer.setStatus('mandatory')
vmsIoLogNameTranslation = MibScalar((1, 3, 6, 1, 4, 1, 597, 4, 15, 4, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vmsIoLogNameTranslation.setStatus('mandatory')
vmsIoFileOpen = MibScalar((1, 3, 6, 1, 4, 1, 597, 4, 15, 4, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vmsIoFileOpen.setStatus('mandatory')
vmsIoPageFault = MibScalar((1, 3, 6, 1, 4, 1, 597, 4, 15, 4, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vmsIoPageFault.setStatus('mandatory')
vmsIoPageRead = MibScalar((1, 3, 6, 1, 4, 1, 597, 4, 15, 4, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vmsIoPageRead.setStatus('mandatory')
vmsIoPageReadIO = MibScalar((1, 3, 6, 1, 4, 1, 597, 4, 15, 4, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vmsIoPageReadIO.setStatus('mandatory')
vmsIoPageWrite = MibScalar((1, 3, 6, 1, 4, 1, 597, 4, 15, 4, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vmsIoPageWrite.setStatus('mandatory')
vmsIoPageWriteIO = MibScalar((1, 3, 6, 1, 4, 1, 597, 4, 15, 4, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vmsIoPageWriteIO.setStatus('mandatory')
vmsIoInswap = MibScalar((1, 3, 6, 1, 4, 1, 597, 4, 15, 4, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vmsIoInswap.setStatus('mandatory')
vmsIoFreePageCount = MibScalar((1, 3, 6, 1, 4, 1, 597, 4, 15, 4, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vmsIoFreePageCount.setStatus('mandatory')
vmsIoModifiedPageCount = MibScalar((1, 3, 6, 1, 4, 1, 597, 4, 15, 4, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vmsIoModifiedPageCount.setStatus('mandatory')
vmsPage = MibIdentifier((1, 3, 6, 1, 4, 1, 597, 4, 15, 5))
vmsPageUpdateTime = MibScalar((1, 3, 6, 1, 4, 1, 597, 4, 15, 5, 1), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vmsPageUpdateTime.setStatus('mandatory')
vmsPageUpdateInterval = MibScalar((1, 3, 6, 1, 4, 1, 597, 4, 15, 5, 2), Integer32().clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vmsPageUpdateInterval.setStatus('mandatory')
vmsPageFault = MibScalar((1, 3, 6, 1, 4, 1, 597, 4, 15, 5, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vmsPageFault.setStatus('mandatory')
vmsPageRead = MibScalar((1, 3, 6, 1, 4, 1, 597, 4, 15, 5, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vmsPageRead.setStatus('mandatory')
vmsPageReadIO = MibScalar((1, 3, 6, 1, 4, 1, 597, 4, 15, 5, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vmsPageReadIO.setStatus('mandatory')
vmsPageWrite = MibScalar((1, 3, 6, 1, 4, 1, 597, 4, 15, 5, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vmsPageWrite.setStatus('mandatory')
vmsPageWriteIO = MibScalar((1, 3, 6, 1, 4, 1, 597, 4, 15, 5, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vmsPageWriteIO.setStatus('mandatory')
vmsPageFreeListFault = MibScalar((1, 3, 6, 1, 4, 1, 597, 4, 15, 5, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vmsPageFreeListFault.setStatus('mandatory')
vmsPageModListFault = MibScalar((1, 3, 6, 1, 4, 1, 597, 4, 15, 5, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vmsPageModListFault.setStatus('mandatory')
vmsPageDemandZeroFault = MibScalar((1, 3, 6, 1, 4, 1, 597, 4, 15, 5, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vmsPageDemandZeroFault.setStatus('mandatory')
vmsPageGlobalValidFault = MibScalar((1, 3, 6, 1, 4, 1, 597, 4, 15, 5, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vmsPageGlobalValidFault.setStatus('mandatory')
vmsPageWrtInProgressFault = MibScalar((1, 3, 6, 1, 4, 1, 597, 4, 15, 5, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vmsPageWrtInProgressFault.setStatus('mandatory')
vmsPageSystemFault = MibScalar((1, 3, 6, 1, 4, 1, 597, 4, 15, 5, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vmsPageSystemFault.setStatus('mandatory')
vmsPageFreePageCount = MibScalar((1, 3, 6, 1, 4, 1, 597, 4, 15, 5, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vmsPageFreePageCount.setStatus('mandatory')
vmsPageModifiedPageCount = MibScalar((1, 3, 6, 1, 4, 1, 597, 4, 15, 5, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vmsPageModifiedPageCount.setStatus('mandatory')
vmsDecnet = MibIdentifier((1, 3, 6, 1, 4, 1, 597, 4, 15, 6))
vmsDecnetUpdateTime = MibScalar((1, 3, 6, 1, 4, 1, 597, 4, 15, 6, 1), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vmsDecnetUpdateTime.setStatus('mandatory')
vmsDecnetUpdateInterval = MibScalar((1, 3, 6, 1, 4, 1, 597, 4, 15, 6, 2), Integer32().clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vmsDecnetUpdateInterval.setStatus('mandatory')
vmsDecnetArriveLocalPkt = MibScalar((1, 3, 6, 1, 4, 1, 597, 4, 15, 6, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vmsDecnetArriveLocalPkt.setStatus('mandatory')
vmsDecnetDepartLocalPkt = MibScalar((1, 3, 6, 1, 4, 1, 597, 4, 15, 6, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vmsDecnetDepartLocalPkt.setStatus('mandatory')
vmsDecnetArriveTransPkt = MibScalar((1, 3, 6, 1, 4, 1, 597, 4, 15, 6, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vmsDecnetArriveTransPkt.setStatus('mandatory')
vmsDecnetTransCongestLoss = MibScalar((1, 3, 6, 1, 4, 1, 597, 4, 15, 6, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vmsDecnetTransCongestLoss.setStatus('mandatory')
vmsDecnetReceiveBufFail = MibScalar((1, 3, 6, 1, 4, 1, 597, 4, 15, 6, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vmsDecnetReceiveBufFail.setStatus('mandatory')
vmsStates = MibIdentifier((1, 3, 6, 1, 4, 1, 597, 4, 15, 7))
vmsStatesUpdateTime = MibScalar((1, 3, 6, 1, 4, 1, 597, 4, 15, 7, 1), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vmsStatesUpdateTime.setStatus('mandatory')
vmsStatesUpdateInterval = MibScalar((1, 3, 6, 1, 4, 1, 597, 4, 15, 7, 2), Integer32().clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vmsStatesUpdateInterval.setStatus('mandatory')
vmsStatesCOLPG = MibScalar((1, 3, 6, 1, 4, 1, 597, 4, 15, 7, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vmsStatesCOLPG.setStatus('mandatory')
vmsStatesMWAIT = MibScalar((1, 3, 6, 1, 4, 1, 597, 4, 15, 7, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vmsStatesMWAIT.setStatus('mandatory')
vmsStatesCEF = MibScalar((1, 3, 6, 1, 4, 1, 597, 4, 15, 7, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vmsStatesCEF.setStatus('mandatory')
vmsStatesPFW = MibScalar((1, 3, 6, 1, 4, 1, 597, 4, 15, 7, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vmsStatesPFW.setStatus('mandatory')
vmsStatesLEF = MibScalar((1, 3, 6, 1, 4, 1, 597, 4, 15, 7, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vmsStatesLEF.setStatus('mandatory')
vmsStatesLEFO = MibScalar((1, 3, 6, 1, 4, 1, 597, 4, 15, 7, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vmsStatesLEFO.setStatus('mandatory')
vmsStatesHIB = MibScalar((1, 3, 6, 1, 4, 1, 597, 4, 15, 7, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vmsStatesHIB.setStatus('mandatory')
vmsStatesHIBO = MibScalar((1, 3, 6, 1, 4, 1, 597, 4, 15, 7, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vmsStatesHIBO.setStatus('mandatory')
vmsStatesSUSP = MibScalar((1, 3, 6, 1, 4, 1, 597, 4, 15, 7, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vmsStatesSUSP.setStatus('mandatory')
vmsStatesSUSPO = MibScalar((1, 3, 6, 1, 4, 1, 597, 4, 15, 7, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vmsStatesSUSPO.setStatus('mandatory')
vmsStatesFPG = MibScalar((1, 3, 6, 1, 4, 1, 597, 4, 15, 7, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vmsStatesFPG.setStatus('mandatory')
vmsStatesCOM = MibScalar((1, 3, 6, 1, 4, 1, 597, 4, 15, 7, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vmsStatesCOM.setStatus('mandatory')
vmsStatesCOMO = MibScalar((1, 3, 6, 1, 4, 1, 597, 4, 15, 7, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vmsStatesCOMO.setStatus('mandatory')
vmsStatesCUR = MibScalar((1, 3, 6, 1, 4, 1, 597, 4, 15, 7, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vmsStatesCUR.setStatus('mandatory')
vmsCluster = MibIdentifier((1, 3, 6, 1, 4, 1, 597, 4, 15, 8))
vmsClusterUpdateTime = MibScalar((1, 3, 6, 1, 4, 1, 597, 4, 15, 8, 1), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vmsClusterUpdateTime.setStatus('mandatory')
vmsClusterUpdateInterval = MibScalar((1, 3, 6, 1, 4, 1, 597, 4, 15, 8, 2), Integer32().clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vmsClusterUpdateInterval.setStatus('mandatory')
vmsClusterCpuBusy = MibScalar((1, 3, 6, 1, 4, 1, 597, 4, 15, 8, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vmsClusterCpuBusy.setStatus('mandatory')
vmsClusterFreeListSize = MibScalar((1, 3, 6, 1, 4, 1, 597, 4, 15, 8, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vmsClusterFreeListSize.setStatus('mandatory')
vmsClusterTotalLocks = MibScalar((1, 3, 6, 1, 4, 1, 597, 4, 15, 8, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vmsClusterTotalLocks.setStatus('mandatory')
vmsClusterNewEnqLocal = MibScalar((1, 3, 6, 1, 4, 1, 597, 4, 15, 8, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vmsClusterNewEnqLocal.setStatus('mandatory')
vmsClusterNewEnqIncoming = MibScalar((1, 3, 6, 1, 4, 1, 597, 4, 15, 8, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vmsClusterNewEnqIncoming.setStatus('mandatory')
vmsClusterNewEnqOutgoing = MibScalar((1, 3, 6, 1, 4, 1, 597, 4, 15, 8, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vmsClusterNewEnqOutgoing.setStatus('mandatory')
vmsClusterEnqConversionsLocal = MibScalar((1, 3, 6, 1, 4, 1, 597, 4, 15, 8, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vmsClusterEnqConversionsLocal.setStatus('mandatory')
vmsClusterEnqConversionsIncoming = MibScalar((1, 3, 6, 1, 4, 1, 597, 4, 15, 8, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vmsClusterEnqConversionsIncoming.setStatus('mandatory')
vmsClusterEnqConversionsOutgoing = MibScalar((1, 3, 6, 1, 4, 1, 597, 4, 15, 8, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vmsClusterEnqConversionsOutgoing.setStatus('mandatory')
vmsClusterDeqLocal = MibScalar((1, 3, 6, 1, 4, 1, 597, 4, 15, 8, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vmsClusterDeqLocal.setStatus('mandatory')
vmsClusterDeqIncoming = MibScalar((1, 3, 6, 1, 4, 1, 597, 4, 15, 8, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vmsClusterDeqIncoming.setStatus('mandatory')
vmsClusterDeqOutgoing = MibScalar((1, 3, 6, 1, 4, 1, 597, 4, 15, 8, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vmsClusterDeqOutgoing.setStatus('mandatory')
vmsMscp = MibIdentifier((1, 3, 6, 1, 4, 1, 597, 4, 15, 9))
vmsMscpUpdateTime = MibScalar((1, 3, 6, 1, 4, 1, 597, 4, 15, 9, 1), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vmsMscpUpdateTime.setStatus('mandatory')
vmsMscpUpdateInterval = MibScalar((1, 3, 6, 1, 4, 1, 597, 4, 15, 9, 2), Integer32().clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vmsMscpUpdateInterval.setStatus('mandatory')
vmsMscpRequests = MibScalar((1, 3, 6, 1, 4, 1, 597, 4, 15, 9, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vmsMscpRequests.setStatus('mandatory')
vmsMscpReads = MibScalar((1, 3, 6, 1, 4, 1, 597, 4, 15, 9, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vmsMscpReads.setStatus('mandatory')
vmsMscpWrites = MibScalar((1, 3, 6, 1, 4, 1, 597, 4, 15, 9, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vmsMscpWrites.setStatus('mandatory')
vmsMscpFragments = MibScalar((1, 3, 6, 1, 4, 1, 597, 4, 15, 9, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vmsMscpFragments.setStatus('mandatory')
vmsMscpSplits = MibScalar((1, 3, 6, 1, 4, 1, 597, 4, 15, 9, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vmsMscpSplits.setStatus('mandatory')
vmsMscpBufferWaits = MibScalar((1, 3, 6, 1, 4, 1, 597, 4, 15, 9, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vmsMscpBufferWaits.setStatus('mandatory')
vmsMscp1BlockIOs = MibScalar((1, 3, 6, 1, 4, 1, 597, 4, 15, 9, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vmsMscp1BlockIOs.setStatus('mandatory')
vmsMscp2_3BlockIOs = MibScalar((1, 3, 6, 1, 4, 1, 597, 4, 15, 9, 10), Counter32()).setLabel("vmsMscp2-3BlockIOs").setMaxAccess("readonly")
if mibBuilder.loadTexts: vmsMscp2_3BlockIOs.setStatus('mandatory')
vmsMscp4_7BlockIOs = MibScalar((1, 3, 6, 1, 4, 1, 597, 4, 15, 9, 11), Counter32()).setLabel("vmsMscp4-7BlockIOs").setMaxAccess("readonly")
if mibBuilder.loadTexts: vmsMscp4_7BlockIOs.setStatus('mandatory')
vmsMscp8_15BlockIOs = MibScalar((1, 3, 6, 1, 4, 1, 597, 4, 15, 9, 12), Counter32()).setLabel("vmsMscp8-15BlockIOs").setMaxAccess("readonly")
if mibBuilder.loadTexts: vmsMscp8_15BlockIOs.setStatus('mandatory')
vmsMscp16_31BlockIOs = MibScalar((1, 3, 6, 1, 4, 1, 597, 4, 15, 9, 13), Counter32()).setLabel("vmsMscp16-31BlockIOs").setMaxAccess("readonly")
if mibBuilder.loadTexts: vmsMscp16_31BlockIOs.setStatus('mandatory')
vmsMscp32_63BlockIOs = MibScalar((1, 3, 6, 1, 4, 1, 597, 4, 15, 9, 14), Counter32()).setLabel("vmsMscp32-63BlockIOs").setMaxAccess("readonly")
if mibBuilder.loadTexts: vmsMscp32_63BlockIOs.setStatus('mandatory')
vmsMscp64andOverBlockIOs = MibScalar((1, 3, 6, 1, 4, 1, 597, 4, 15, 9, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vmsMscp64andOverBlockIOs.setStatus('mandatory')
vmsLock = MibIdentifier((1, 3, 6, 1, 4, 1, 597, 4, 15, 10))
vmsLockUpdateTime = MibScalar((1, 3, 6, 1, 4, 1, 597, 4, 15, 10, 1), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vmsLockUpdateTime.setStatus('mandatory')
vmsLockUpdateInterval = MibScalar((1, 3, 6, 1, 4, 1, 597, 4, 15, 10, 2), Integer32().clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vmsLockUpdateInterval.setStatus('mandatory')
vmsLockNewEnqs = MibScalar((1, 3, 6, 1, 4, 1, 597, 4, 15, 10, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vmsLockNewEnqs.setStatus('mandatory')
vmsLockConvertedEnqs = MibScalar((1, 3, 6, 1, 4, 1, 597, 4, 15, 10, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vmsLockConvertedEnqs.setStatus('mandatory')
vmsLockDeqs = MibScalar((1, 3, 6, 1, 4, 1, 597, 4, 15, 10, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vmsLockDeqs.setStatus('mandatory')
vmsLockBlockingASTs = MibScalar((1, 3, 6, 1, 4, 1, 597, 4, 15, 10, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vmsLockBlockingASTs.setStatus('mandatory')
vmsLockEnqWaits = MibScalar((1, 3, 6, 1, 4, 1, 597, 4, 15, 10, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vmsLockEnqWaits.setStatus('mandatory')
vmsLockEnqsNotQueued = MibScalar((1, 3, 6, 1, 4, 1, 597, 4, 15, 10, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vmsLockEnqsNotQueued.setStatus('mandatory')
vmsLockDeadlockSearches = MibScalar((1, 3, 6, 1, 4, 1, 597, 4, 15, 10, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vmsLockDeadlockSearches.setStatus('mandatory')
vmsLockDeadlocksFound = MibScalar((1, 3, 6, 1, 4, 1, 597, 4, 15, 10, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vmsLockDeadlocksFound.setStatus('mandatory')
vmsLockCurrentLocks = MibScalar((1, 3, 6, 1, 4, 1, 597, 4, 15, 10, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vmsLockCurrentLocks.setStatus('mandatory')
vmsLockCurrentResources = MibScalar((1, 3, 6, 1, 4, 1, 597, 4, 15, 10, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vmsLockCurrentResources.setStatus('mandatory')
vmsDlock = MibIdentifier((1, 3, 6, 1, 4, 1, 597, 4, 15, 11))
vmsDlockUpdateTime = MibScalar((1, 3, 6, 1, 4, 1, 597, 4, 15, 11, 1), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vmsDlockUpdateTime.setStatus('mandatory')
vmsDlockUpdateInterval = MibScalar((1, 3, 6, 1, 4, 1, 597, 4, 15, 11, 2), Integer32().clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vmsDlockUpdateInterval.setStatus('mandatory')
vmsDlockNewLocksLocal = MibScalar((1, 3, 6, 1, 4, 1, 597, 4, 15, 11, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vmsDlockNewLocksLocal.setStatus('mandatory')
vmsDlockNewLocksIncoming = MibScalar((1, 3, 6, 1, 4, 1, 597, 4, 15, 11, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vmsDlockNewLocksIncoming.setStatus('mandatory')
vmsDlockNewLocksOutgoing = MibScalar((1, 3, 6, 1, 4, 1, 597, 4, 15, 11, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vmsDlockNewLocksOutgoing.setStatus('mandatory')
vmsDlockLockConversionsLocal = MibScalar((1, 3, 6, 1, 4, 1, 597, 4, 15, 11, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vmsDlockLockConversionsLocal.setStatus('mandatory')
vmsDlockLockConversionsIncoming = MibScalar((1, 3, 6, 1, 4, 1, 597, 4, 15, 11, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vmsDlockLockConversionsIncoming.setStatus('mandatory')
vmsDlockLockConversionsOutgoing = MibScalar((1, 3, 6, 1, 4, 1, 597, 4, 15, 11, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vmsDlockLockConversionsOutgoing.setStatus('mandatory')
vmsDlockUnlocksLocal = MibScalar((1, 3, 6, 1, 4, 1, 597, 4, 15, 11, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vmsDlockUnlocksLocal.setStatus('mandatory')
vmsDlockUnlocksIncoming = MibScalar((1, 3, 6, 1, 4, 1, 597, 4, 15, 11, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vmsDlockUnlocksIncoming.setStatus('mandatory')
vmsDlockUnlocksOutgoing = MibScalar((1, 3, 6, 1, 4, 1, 597, 4, 15, 11, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vmsDlockUnlocksOutgoing.setStatus('mandatory')
vmsDlockBlockingASTsLocal = MibScalar((1, 3, 6, 1, 4, 1, 597, 4, 15, 11, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vmsDlockBlockingASTsLocal.setStatus('mandatory')
vmsDlockBlockingASTsIncoming = MibScalar((1, 3, 6, 1, 4, 1, 597, 4, 15, 11, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vmsDlockBlockingASTsIncoming.setStatus('mandatory')
vmsDlockBlockingASTsOutgoing = MibScalar((1, 3, 6, 1, 4, 1, 597, 4, 15, 11, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vmsDlockBlockingASTsOutgoing.setStatus('mandatory')
vmsDlockDirFuncIncoming = MibScalar((1, 3, 6, 1, 4, 1, 597, 4, 15, 11, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vmsDlockDirFuncIncoming.setStatus('mandatory')
vmsDlockDirFuncOutgoing = MibScalar((1, 3, 6, 1, 4, 1, 597, 4, 15, 11, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vmsDlockDirFuncOutgoing.setStatus('mandatory')
vmsDlockDeadlockMessage = MibScalar((1, 3, 6, 1, 4, 1, 597, 4, 15, 11, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vmsDlockDeadlockMessage.setStatus('mandatory')
vmsSystem = MibIdentifier((1, 3, 6, 1, 4, 1, 597, 4, 15, 12))
vmsSystemUpdateTime = MibScalar((1, 3, 6, 1, 4, 1, 597, 4, 15, 12, 1), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vmsSystemUpdateTime.setStatus('mandatory')
vmsSystemUpdateInterval = MibScalar((1, 3, 6, 1, 4, 1, 597, 4, 15, 12, 2), Integer32().clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vmsSystemUpdateInterval.setStatus('mandatory')
vmsSystemCpuBusy = MibScalar((1, 3, 6, 1, 4, 1, 597, 4, 15, 12, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vmsSystemCpuBusy.setStatus('mandatory')
vmsSystemOtherStates = MibScalar((1, 3, 6, 1, 4, 1, 597, 4, 15, 12, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vmsSystemOtherStates.setStatus('mandatory')
vmsSystemProcessCount = MibScalar((1, 3, 6, 1, 4, 1, 597, 4, 15, 12, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vmsSystemProcessCount.setStatus('mandatory')
vmsSystemPageFaults = MibScalar((1, 3, 6, 1, 4, 1, 597, 4, 15, 12, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vmsSystemPageFaults.setStatus('mandatory')
vmsSystemReadIOs = MibScalar((1, 3, 6, 1, 4, 1, 597, 4, 15, 12, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vmsSystemReadIOs.setStatus('mandatory')
vmsSystemFreePageCount = MibScalar((1, 3, 6, 1, 4, 1, 597, 4, 15, 12, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vmsSystemFreePageCount.setStatus('mandatory')
vmsSystemModifiedPageCount = MibScalar((1, 3, 6, 1, 4, 1, 597, 4, 15, 12, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vmsSystemModifiedPageCount.setStatus('mandatory')
vmsSystemDirectIOs = MibScalar((1, 3, 6, 1, 4, 1, 597, 4, 15, 12, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vmsSystemDirectIOs.setStatus('mandatory')
vmsSystemBufferedIOs = MibScalar((1, 3, 6, 1, 4, 1, 597, 4, 15, 12, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vmsSystemBufferedIOs.setStatus('mandatory')
mibBuilder.exportSymbols("COMTEK-VMS-NM-SYSMGR-MIB", sCfgDskAlarm=sCfgDskAlarm, sOpcomReplyStatus=sOpcomReplyStatus, vmsClusterUpdateInterval=vmsClusterUpdateInterval, sIntrOne=sIntrOne, vmsDlockUnlocksIncoming=vmsDlockUnlocksIncoming, sSyiAvailCpuCnt=sSyiAvailCpuCnt, sSpinFifteen=sSpinFifteen, sCfgFile=sCfgFile, sQueTerminalPending=sQueTerminalPending, comtekVmsNMVmsMonMib=comtekVmsNMVmsMonMib, sShdTbl=sShdTbl, vmsLockUpdateTime=vmsLockUpdateTime, sQueBatchPending=sQueBatchPending, sCfgOpcomNetwork=sCfgOpcomNetwork, sCfgTraps=sCfgTraps, sSuprFifteen=sSuprFifteen, vmsFcpFCPCall=vmsFcpFCPCall, sSyiTime=sSyiTime, vmsFileUpdateTime=vmsFileUpdateTime, vmsLockDeqs=vmsLockDeqs, sPsProcName=sPsProcName, vmsTotalSuper=vmsTotalSuper, sPsRWState=sPsRWState, sCfgOpcomOper12=sCfgOpcomOper12, sCritTime=sCritTime, sSyiMemFreePg=sSyiMemFreePg, vmsTotalUser=vmsTotalUser, vmsIoUpdateInterval=vmsIoUpdateInterval, sQueServerHolding=sQueServerHolding, vmsFileUpdateInterval=vmsFileUpdateInterval, sDskMediaName=sDskMediaName, vmsClusterEnqConversionsLocal=vmsClusterEnqConversionsLocal, sDskIndex=sDskIndex, vmsTotalKernel=vmsTotalKernel, vmsModeCpuId=vmsModeCpuId, sQuePrinterExecuting=sQuePrinterExecuting, sPsBatch=sPsBatch, sShdName=sShdName, vmsFcpWindowTurn=vmsFcpWindowTurn, vmsMscpWrites=vmsMscpWrites, sPsPgTblCnt=sPsPgTblCnt, vmsStatesHIB=vmsStatesHIB, sErrInfo=sErrInfo, sSwErrStatus=sSwErrStatus, vmsModeKernel=vmsModeKernel, sCritInfo=sCritInfo, sCfgOpcomOper9=sCfgOpcomOper9, sDskTrapOpSec=sDskTrapOpSec, sExecOne=sExecOne, sCfgQueTimer=sCfgQueTimer, sCfgOpcomOper4=sCfgOpcomOper4, sCpu=sCpu, sQManStatus=sQManStatus, vmsClusterTotalLocks=vmsClusterTotalLocks, sQManIndex=sQManIndex, sQStatus=sQStatus, sCpuTicks=sCpuTicks, sCfgOpcomOper7=sCfgOpcomOper7, vmsIoMailboxWrite=vmsIoMailboxWrite, sHwErrDeviceName=sHwErrDeviceName, vmsStatesCOLPG=vmsStatesCOLPG, sHwErrLastTime=sHwErrLastTime, vmsClusterDeqIncoming=vmsClusterDeqIncoming, sQuePrinterTimed=sQuePrinterTimed, sCfgOpcomCluster=sCfgOpcomCluster, sShdCopy=sShdCopy, vmsLockNewEnqs=vmsLockNewEnqs, vmsCluster=vmsCluster, vmsStatesCEF=vmsStatesCEF, sCfgOpcomOper1=sCfgOpcomOper1, sUserOne=sUserOne, sQMonitor=sQMonitor, sPsMode=sPsMode, sSyiPgFree=sSyiPgFree, sPsInteractive=sPsInteractive, sCfgOpcomSecurity=sCfgOpcomSecurity, vmsIoPageFault=vmsIoPageFault, vmsPageWrtInProgressFault=vmsPageWrtInProgressFault, vmsFile=vmsFile, vmsDlockLockConversionsLocal=vmsDlockLockConversionsLocal, vmsStates=vmsStates, sOpcomThree=sOpcomThree, sNullOne=sNullOne, sQueSymbiont=sQueSymbiont, vmsIoPageReadIO=vmsIoPageReadIO, vmsTotalMPSync=vmsTotalMPSync, vmsMscp=vmsMscp, sSwErrLastTime=sSwErrLastTime, sPsState=sPsState, sDskRefCnt=sDskRefCnt, sPsCOMOQueue=sPsCOMOQueue, sCritCnt=sCritCnt, sCfgPsTimer=sCfgPsTimer, sCfgOpcomOper3=sCfgOpcomOper3, sQueTerminalRetained=sQueTerminalRetained, vmsPageGlobalValidFault=vmsPageGlobalValidFault, vmsIoPageRead=vmsIoPageRead, vmsPageDemandZeroFault=vmsPageDemandZeroFault, vmsFileExtentAttempt=vmsFileExtentAttempt, sQueSymbiontExecuting=sQueSymbiontExecuting, sCfgTermProc=sCfgTermProc, vmsModeTableEntry=vmsModeTableEntry, vmsFileDirDataAttempt=vmsFileDirDataAttempt, sPsUsername=sPsUsername, sSyiCpuPgSize=sSyiCpuPgSize, sQueServerTimed=sQueServerTimed, sQueServerRetained=sQueServerRetained, sPsPID=sPsPID, vmsMscp4_7BlockIOs=vmsMscp4_7BlockIOs, vmsModeInter=vmsModeInter, vmsFcpUpdateInterval=vmsFcpUpdateInterval, sOpcomSeven=sOpcomSeven, vmsDecnet=vmsDecnet, vmsStatesMWAIT=vmsStatesMWAIT, vmsDlockBlockingASTsIncoming=vmsDlockBlockingASTsIncoming, vmsLockCurrentLocks=vmsLockCurrentLocks, sSyiVersion=sSyiVersion, vmsFcpOpen=vmsFcpOpen, sDskStatus=sDskStatus, sTrapLostCount=sTrapLostCount, sCfgOpcomOper5=sCfgOpcomOper5, sHwErrIndex=sHwErrIndex, vmsDlock=vmsDlock, vmsLockEnqWaits=vmsLockEnqWaits, sHwErrCnt=sHwErrCnt, vmsDecnetDepartLocalPkt=vmsDecnetDepartLocalPkt, vmsMscp2_3BlockIOs=vmsMscp2_3BlockIOs, vmsLockUpdateInterval=vmsLockUpdateInterval, sCpuLoadOneMinute=sCpuLoadOneMinute, sShdFail=sShdFail, sSyiHwName=sSyiHwName, vmsFcp=vmsFcp, sOpcomTwo=sOpcomTwo, sCritCurCnt=sCritCurCnt, vmsIoSplitTransfer=vmsIoSplitTransfer, sDskName=sDskName, vmsSystemBufferedIOs=vmsSystemBufferedIOs, sSyi=sSyi, vmsPageModifiedPageCount=vmsPageModifiedPageCount, vmsDlockDirFuncOutgoing=vmsDlockDirFuncOutgoing, vmsDlockBlockingASTsOutgoing=vmsDlockBlockingASTsOutgoing, sHwErrTbl=sHwErrTbl, sPsCnt=sPsCnt, sOpcomFive=sOpcomFive, vmsPageFault=vmsPageFault, vmsPageUpdateInterval=vmsPageUpdateInterval, sCritIndex=sCritIndex, vmsClusterUpdateTime=vmsClusterUpdateTime, vmsMscpReads=vmsMscpReads, sCfgVersion=sCfgVersion, sExecFive=sExecFive, sSyiMemUsed=sSyiMemUsed, vmsDlockUnlocksLocal=vmsDlockUnlocksLocal, sQEntryJobStatus=sQEntryJobStatus, vmsDlockDeadlockMessage=vmsDlockDeadlockMessage, vmsDecnetUpdateTime=vmsDecnetUpdateTime, sCfgAllPsData=sCfgAllPsData, sHwErrTime=sHwErrTime, sQueGeneric=sQueGeneric, vmsDlockUpdateInterval=vmsDlockUpdateInterval, sQEntryNum=sQEntryNum, vmsPage=vmsPage, sQueSymbiontHolding=sQueSymbiontHolding, sQManName=sQManName, vmsMscpUpdateTime=vmsMscpUpdateTime, vmsSystemOtherStates=vmsSystemOtherStates, sSyiSwpSize=sSyiSwpSize, vmsFileQuotaAttempt=vmsFileQuotaAttempt, vmsIoFileOpen=vmsIoFileOpen, vmsStatesHIBO=vmsStatesHIBO, vmsIo=vmsIo, vmsModeIdle=vmsModeIdle, sQEntryCount=sQEntryCount, sIntrFifteen=sIntrFifteen, vmsDecnetReceiveBufFail=vmsDecnetReceiveBufFail, sIntPercentUsed=sIntPercentUsed, vmsDecnetArriveLocalPkt=vmsDecnetArriveLocalPkt, sResources=sResources, sQueTerminalHolding=sQueTerminalHolding, sTrapNextSeqNum=sTrapNextSeqNum, vmsMscpRequests=vmsMscpRequests, sPsCOMQueue=sPsCOMQueue, sCritName=sCritName, sCritReqCnt=sCritReqCnt, vmsPageRead=vmsPageRead, sQMan=sQMan, sDskEntry=sDskEntry, sCfgOpcomFilter=sCfgOpcomFilter, sPsOther=sPsOther, sUserFive=sUserFive, sCfgMemLimit=sCfgMemLimit, vmsClusterNewEnqOutgoing=vmsClusterNewEnqOutgoing, sCfgTimeout=sCfgTimeout, sPsLoginTime=sPsLoginTime, sDskMountCnt=sDskMountCnt, sQueGenericRetained=sQueGenericRetained, vmsStatesFPG=vmsStatesFPG, sSyiPgSize=sSyiPgSize, sSpinOne=sSpinOne, sPsDirectIO=sPsDirectIO, vmsPageWrite=vmsPageWrite, vmsClusterDeqLocal=vmsClusterDeqLocal, sSyiMemSize=sSyiMemSize, vmsClusterFreeListSize=vmsClusterFreeListSize, sCpuPercentUsed=sCpuPercentUsed, vmsLock=vmsLock, sHwErrInfo=sHwErrInfo, sCfgOpcomDisks=sCfgOpcomDisks, sQueBatchRetained=sQueBatchRetained, vmsStatesCOMO=vmsStatesCOMO, sCfgOpcomDevices=sCfgOpcomDevices, sKernelOne=sKernelOne, vmsDlockNewLocksOutgoing=vmsDlockNewLocksOutgoing, sQEntryJobname=sQEntryJobname, sQueCnt=sQueCnt, vmsModeCompat=vmsModeCompat, vmsTotalIdle=vmsTotalIdle, vmsIoUpdateTime=vmsIoUpdateTime, vmsIoFreePageCount=vmsIoFreePageCount, sCfgOpcomOper2=sCfgOpcomOper2, sCfgCpuLimit=sCfgCpuLimit, vmsPageWriteIO=vmsPageWriteIO, vmsFcpErase=vmsFcpErase, sCompOne=sCompOne, sCfgOpcomCentral=sCfgOpcomCentral, vmsClusterNewEnqIncoming=vmsClusterNewEnqIncoming, sCfg=sCfg, vmsStatesSUSP=vmsStatesSUSP, sCompFifteen=sCompFifteen, vmsFcpCPUTick=vmsFcpCPUTick, sNullFive=sNullFive, vmsSystemProcessCount=vmsSystemProcessCount, sQueTerminal=sQueTerminal, sSyiActiveCpuCnt=sSyiActiveCpuCnt, sQTblEntry=sQTblEntry, vmsTotalModes=vmsTotalModes, sUserFifteen=sUserFifteen, vmsIoPageWrite=vmsIoPageWrite, vmsMscp1BlockIOs=vmsMscp1BlockIOs, sCfgUpTime=sCfgUpTime, vmsPageFreeListFault=vmsPageFreeListFault, sCfgHostName=sCfgHostName, vmsSystemCpuBusy=vmsSystemCpuBusy, sCfgControlTermProc=sCfgControlTermProc, sShdMerge=sShdMerge, vmsDlockDirFuncIncoming=vmsDlockDirFuncIncoming, vmsMscp64andOverBlockIOs=vmsMscp64andOverBlockIOs, sHwErrDeviceCnt=sHwErrDeviceCnt, vmsStatesLEFO=vmsStatesLEFO, vmsMscp8_15BlockIOs=vmsMscp8_15BlockIOs, sCfgOpcomOper11=sCfgOpcomOper11, sDskMaxBlocks=sDskMaxBlocks, sQueServerExecuting=sQueServerExecuting, sShd=sShd)
mibBuilder.exportSymbols("COMTEK-VMS-NM-SYSMGR-MIB", sOpcomReplySend=sOpcomReplySend, sSwErrFile=sSwErrFile, sCfgReinitSubagent=sCfgReinitSubagent, sDskTblTime=sDskTblTime, vmsClusterEnqConversionsIncoming=vmsClusterEnqConversionsIncoming, sDskTrapPercent=sDskTrapPercent, sCfgDskOps=sCfgDskOps, vmsDlockUnlocksOutgoing=vmsDlockUnlocksOutgoing, sIntrFive=sIntrFive, vmsModeUser=vmsModeUser, sQueSymbiontTimed=sQueSymbiontTimed, sPsPhysTerm=sPsPhysTerm, vmsMscpSplits=vmsMscpSplits, sCfgOpcomCards=sCfgOpcomCards, vmsFileDirDataHit=vmsFileDirDataHit, sPsTbl=sPsTbl, sCfgCritFile=sCfgCritFile, sProcInfo=sProcInfo, comtek=comtek, sSwErrInfo=sSwErrInfo, sPsWorkSetSize=sPsWorkSetSize, sCompFive=sCompFive, sShdIndex=sShdIndex, vmsFcpPageFault=vmsFcpPageFault, vmsDlockBlockingASTsLocal=vmsDlockBlockingASTsLocal, vmsDlockNewLocksIncoming=vmsDlockNewLocksIncoming, vmsSystemReadIOs=vmsSystemReadIOs, sCfgLogFile=sCfgLogFile, vmsStatesPFW=vmsStatesPFW, vmsPageUpdateTime=vmsPageUpdateTime, vmsSystemUpdateInterval=vmsSystemUpdateInterval, vmsFileDirFCBHit=vmsFileDirFCBHit, sOpcomReplyText=sOpcomReplyText, sDskFreeBlocks=sDskFreeBlocks, sSpinFive=sSpinFive, sCfgTrapTblSize=sCfgTrapTblSize, vmsModeCpuCount=vmsModeCpuCount, vmsFileDirFCBAttempt=vmsFileDirFCBAttempt, vmsSystemUpdateTime=vmsSystemUpdateTime, sDskTblCnt=sDskTblCnt, sOpcomSix=sOpcomSix, vmsIoPageWriteIO=vmsIoPageWriteIO, sHwErrEntry=sHwErrEntry, vmsStatesUpdateInterval=vmsStatesUpdateInterval, sQEntry=sQEntry, sPsImageName=sPsImageName, sQueBatchHolding=sQueBatchHolding, sDskRemote=sDskRemote, sSwErrMessage=sSwErrMessage, sQIndex=sQIndex, sOpcomReplyId=sOpcomReplyId, vmsFileFileHdrAttempt=vmsFileFileHdrAttempt, sNullFifteen=sNullFifteen, sCfgDskLimit=sCfgDskLimit, sSwErrLineNum=sSwErrLineNum, sCfgDskTimer=sCfgDskTimer, vmsClusterCpuBusy=vmsClusterCpuBusy, sCfgCOMOQueueLimit=sCfgCOMOQueueLimit, sCpuLoadFiveMinute=sCpuLoadFiveMinute, sShdEntry=sShdEntry, sCfgHwErrTraps=sCfgHwErrTraps, vmsPageModListFault=vmsPageModListFault, vmsModeSuper=vmsModeSuper, sDskUsedPercent=sDskUsedPercent, vmsTotalComp=vmsTotalComp, sDskOpCnt=sDskOpCnt, sSyiPgUsedPercent=sSyiPgUsedPercent, vmsIoLogNameTranslation=vmsIoLogNameTranslation, sCfgOpcomLicense=sCfgOpcomLicense, sQueBatchTimed=sQueBatchTimed, vmsTotalInter=vmsTotalInter, vmsFcpDiskRead=vmsFcpDiskRead, sSyiSwpFree=sSyiSwpFree, sCfgMaxTrapSec=sCfgMaxTrapSec, sDskTbl=sDskTbl, sCfgCOMQueueLimit=sCfgCOMQueueLimit, sQName=sQName, sCfgOpcomOper10=sCfgOpcomOper10, vmsMscpUpdateInterval=vmsMscpUpdateInterval, sQueGenericHolding=sQueGenericHolding, sCfgOpcomTapes=sCfgOpcomTapes, sSyiNodeName=sSyiNodeName, vmsLockCurrentResources=vmsLockCurrentResources, sPsAvailProcSlots=sPsAvailProcSlots, sDsk=sDsk, sQueBatchExecuting=sQueBatchExecuting, sTrapLastSeqNumSent=sTrapLastSeqNumSent, sCfgCritDsk=sCfgCritDsk, sCfgCritAlarm=sCfgCritAlarm, vmsFcpCreate=vmsFcpCreate, sCritTbl=sCritTbl, vmsClusterEnqConversionsOutgoing=vmsClusterEnqConversionsOutgoing, vmsLockConvertedEnqs=vmsLockConvertedEnqs, sQueGenericPending=sQueGenericPending, sOpcomFour=sOpcomFour, sCfgCritTimer=sCfgCritTimer, sQManCount=sQManCount, vmsDlockLockConversionsOutgoing=vmsDlockLockConversionsOutgoing, comtekVmsNMSysMgrMib=comtekVmsNMSysMgrMib, sDskOps=sDskOps, vmsFileFileHdrHit=vmsFileFileHdrHit, vmsFcpLookup=vmsFcpLookup, sQuePrinterHolding=sQuePrinterHolding, vmsMscp32_63BlockIOs=vmsMscp32_63BlockIOs, sExecFifteen=sExecFifteen, sQueTerminalExecuting=sQueTerminalExecuting, sQManTblEntry=sQManTblEntry, sPsCpuTime=sPsCpuTime, sDskTransCnt=sDskTransCnt, sCpuLoadFifteenMinute=sCpuLoadFifteenMinute, vmsLockDeadlockSearches=vmsLockDeadlockSearches, vmsSystemDirectIOs=vmsSystemDirectIOs, sDskLogVolName=sDskLogVolName, comtekVms=comtekVms, vmsModeUpdateInterval=vmsModeUpdateInterval, vmsModeExec=vmsModeExec, sQueTerminalTimed=sQueTerminalTimed, sDskDevChar=sDskDevChar, vmsDecnetUpdateInterval=vmsDecnetUpdateInterval, vmsDecnetArriveTransPkt=vmsDecnetArriveTransPkt, vmsSystem=vmsSystem, vmsClusterDeqOutgoing=vmsClusterDeqOutgoing, sKernelFifteen=sKernelFifteen, vmsIoModifiedPageCount=vmsIoModifiedPageCount, vmsDlockNewLocksLocal=vmsDlockNewLocksLocal, sCfgDskMinFreeBlks=sCfgDskMinFreeBlks, sQuePrinterRetained=sQuePrinterRetained, vmsDlockUpdateTime=vmsDlockUpdateTime, sPsPgFaults=sPsPgFaults, vmsStatesLEF=vmsStatesLEF, sTrapTime=sTrapTime, vmsLockBlockingASTs=vmsLockBlockingASTs, sCfgHwErrTimer=sCfgHwErrTimer, sPsPriority=sPsPriority, sQManTbl=sQManTbl, sQueSymbiontPending=sQueSymbiontPending, vmsFcpDiskWrite=vmsFcpDiskWrite, sSuprOne=sSuprOne, sSuprFive=sSuprFive, sCfgSwpLimit=sCfgSwpLimit, vmsDlockLockConversionsIncoming=vmsDlockLockConversionsIncoming, vmsModeTable=vmsModeTable, vmsSystemPageFaults=vmsSystemPageFaults, vmsStatesCUR=vmsStatesCUR, vmsLockDeadlocksFound=vmsLockDeadlocksFound, sCfgOpcomOper8=sCfgOpcomOper8, vmsPageSystemFault=vmsPageSystemFault, sCfgOpcomOper6=sCfgOpcomOper6, vmsModeUpdateTime=vmsModeUpdateTime, sQueGenericTimed=sQueGenericTimed, vmsDecnetTransCongestLoss=vmsDecnetTransCongestLoss, vmsPageReadIO=vmsPageReadIO, sDskTrapBlocks=sDskTrapBlocks, sQuePrinter=sQuePrinter, sCfgIntLimit=sCfgIntLimit, vmsFcpAllocation=vmsFcpAllocation, vmsStatesUpdateTime=vmsStatesUpdateTime, vmsSystemModifiedPageCount=vmsSystemModifiedPageCount, sQEntryTbl=sQEntryTbl, vmsFileBitmapAttempt=vmsFileBitmapAttempt, vmsFileFileIdHit=vmsFileFileIdHit, sPsEntry=sPsEntry, vmsIoDirectIO=vmsIoDirectIO, sDskShdCount=sDskShdCount, sCfgCritDisksOnly=sCfgCritDisksOnly, sQueGenericExecuting=sQueGenericExecuting, sOpcomOne=sOpcomOne, vmsTotalExec=vmsTotalExec, sCfgPgLimit=sCfgPgLimit, vmsIoBufferedIO=vmsIoBufferedIO, sPsTime=sPsTime, vmsMscpFragments=vmsMscpFragments, sQTbl=sQTbl, sQueBatch=sQueBatch, sCfgLocalDisksOnly=sCfgLocalDisksOnly, sQuePrinterPending=sQuePrinterPending, vmsModes=vmsModes, sCritEntry=sCritEntry, vmsMscpBufferWaits=vmsMscpBufferWaits, sQue=sQue, sTrapResendSeqNum=sTrapResendSeqNum, sSyiBootTime=sSyiBootTime, vmsFileBitmapHit=vmsFileBitmapHit, sQueServer=sQueServer, vmsStatesSUSPO=vmsStatesSUSPO, sDskQueueLength=sDskQueueLength, sSyiSwpUsedPercent=sSyiSwpUsedPercent, sKernelFive=sKernelFive, vmsFcpVolumeLockWait=vmsFcpVolumeLockWait, vmsPageFreePageCount=vmsPageFreePageCount, vmsClusterNewEnqLocal=vmsClusterNewEnqLocal, vmsFileQuotaHit=vmsFileQuotaHit, vmsStatesCOM=vmsStatesCOM, sCfgCritQue=sCfgCritQue, vmsLockEnqsNotQueued=vmsLockEnqsNotQueued, sProcesses=sProcesses, sQueSymbiontRetained=sQueSymbiontRetained, vmsModeMPSync=vmsModeMPSync, vmsFileExtentHit=vmsFileExtentHit, sQueServerPending=sQueServerPending, sCfgOpcomPrinter=sCfgOpcomPrinter, vmsFcpUpdateTime=vmsFcpUpdateTime, sTrapInfo=sTrapInfo, sPsNetwork=sPsNetwork, sQueTime=sQueTime, sCfgSysInfoTimer=sCfgSysInfoTimer, vmsMscp16_31BlockIOs=vmsMscp16_31BlockIOs, vmsSystemFreePageCount=vmsSystemFreePageCount, vmsFileFileIdAttempt=vmsFileFileIdAttempt, vmsIoInswap=vmsIoInswap)
