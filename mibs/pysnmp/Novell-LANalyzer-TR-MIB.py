#
# PySNMP MIB module Novell-LANalyzer-TR-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/Novell-LANalyzer-TR-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 20:22:36 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, OctetString, Integer = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "OctetString", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueRangeConstraint, ValueSizeConstraint, SingleValueConstraint, ConstraintsUnion, ConstraintsIntersection = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueRangeConstraint", "ValueSizeConstraint", "SingleValueConstraint", "ConstraintsUnion", "ConstraintsIntersection")
OwnerString, EntryStatus = mibBuilder.importSymbols("RFC1271-MIB", "OwnerString", "EntryStatus")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
Counter32, ObjectIdentity, Gauge32, TimeTicks, iso, Counter64, MibScalar, MibTable, MibTableRow, MibTableColumn, NotificationType, Integer32, Bits, Unsigned32, enterprises, IpAddress, MibIdentifier, ModuleIdentity, NotificationType = mibBuilder.importSymbols("SNMPv2-SMI", "Counter32", "ObjectIdentity", "Gauge32", "TimeTicks", "iso", "Counter64", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "NotificationType", "Integer32", "Bits", "Unsigned32", "enterprises", "IpAddress", "MibIdentifier", "ModuleIdentity", "NotificationType")
TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString")
class MacAddress(OctetString):
    subtypeSpec = OctetString.subtypeSpec + ValueSizeConstraint(6, 6)
    fixedLength = 6

novell = MibIdentifier((1, 3, 6, 1, 4, 1, 23))
productType = MibIdentifier((1, 3, 6, 1, 4, 1, 23, 1))
mibDoc = MibIdentifier((1, 3, 6, 1, 4, 1, 23, 2))
ringrmon_mib = MibIdentifier((1, 3, 6, 1, 4, 1, 23, 2, 15)).setLabel("ringrmon-mib")
tokenRingStatistics = MibIdentifier((1, 3, 6, 1, 4, 1, 23, 2, 15, 1))
tokenRingHistory = MibIdentifier((1, 3, 6, 1, 4, 1, 23, 2, 15, 2))
tokenRing = MibIdentifier((1, 3, 6, 1, 4, 1, 23, 2, 15, 3))
tokenRingStatsTable = MibTable((1, 3, 6, 1, 4, 1, 23, 2, 15, 1, 1), )
if mibBuilder.loadTexts: tokenRingStatsTable.setStatus('mandatory')
tokenRingStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 23, 2, 15, 1, 1, 1), ).setIndexNames((0, "Novell-LANalyzer-TR-MIB", "tokenRingStatsIndex"))
if mibBuilder.loadTexts: tokenRingStatsEntry.setStatus('mandatory')
tokenRingStatsIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 23, 2, 15, 1, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tokenRingStatsIndex.setStatus('mandatory')
tokenRingStatsDataSource = MibTableColumn((1, 3, 6, 1, 4, 1, 23, 2, 15, 1, 1, 1, 2), ObjectIdentifier()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tokenRingStatsDataSource.setStatus('mandatory')
tokenRingStatsDropEvents = MibTableColumn((1, 3, 6, 1, 4, 1, 23, 2, 15, 1, 1, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tokenRingStatsDropEvents.setStatus('mandatory')
tokenRingStatsDataOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 23, 2, 15, 1, 1, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tokenRingStatsDataOctets.setStatus('mandatory')
tokenRingStatsDataPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 23, 2, 15, 1, 1, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tokenRingStatsDataPkts.setStatus('mandatory')
tokenRingStatsBroadcastDataPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 23, 2, 15, 1, 1, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tokenRingStatsBroadcastDataPkts.setStatus('mandatory')
tokenRingStatsMulticastDataPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 23, 2, 15, 1, 1, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tokenRingStatsMulticastDataPkts.setStatus('mandatory')
tokenRingStatsMACOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 23, 2, 15, 1, 1, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tokenRingStatsMACOctets.setStatus('mandatory')
tokenRingStatsMACPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 23, 2, 15, 1, 1, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tokenRingStatsMACPkts.setStatus('mandatory')
tokenRingStatsRingPurges = MibTableColumn((1, 3, 6, 1, 4, 1, 23, 2, 15, 1, 1, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tokenRingStatsRingPurges.setStatus('mandatory')
tokenRingStatsMonitorContentions = MibTableColumn((1, 3, 6, 1, 4, 1, 23, 2, 15, 1, 1, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tokenRingStatsMonitorContentions.setStatus('mandatory')
tokenRingStatsBeacons = MibTableColumn((1, 3, 6, 1, 4, 1, 23, 2, 15, 1, 1, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tokenRingStatsBeacons.setStatus('mandatory')
tokenRingStatsLostMonitors = MibTableColumn((1, 3, 6, 1, 4, 1, 23, 2, 15, 1, 1, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tokenRingStatsLostMonitors.setStatus('mandatory')
tokenRingStatsDuplicateMonitors = MibTableColumn((1, 3, 6, 1, 4, 1, 23, 2, 15, 1, 1, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tokenRingStatsDuplicateMonitors.setStatus('mandatory')
tokenRingStatsDuplicateAddresses = MibTableColumn((1, 3, 6, 1, 4, 1, 23, 2, 15, 1, 1, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tokenRingStatsDuplicateAddresses.setStatus('mandatory')
tokenRingStatsRingPollFailures = MibTableColumn((1, 3, 6, 1, 4, 1, 23, 2, 15, 1, 1, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tokenRingStatsRingPollFailures.setStatus('mandatory')
tokenRingStatsLineErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 23, 2, 15, 1, 1, 1, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tokenRingStatsLineErrors.setStatus('mandatory')
tokenRingStatsInternalErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 23, 2, 15, 1, 1, 1, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tokenRingStatsInternalErrors.setStatus('mandatory')
tokenRingStatsBurstErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 23, 2, 15, 1, 1, 1, 19), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tokenRingStatsBurstErrors.setStatus('mandatory')
tokenRingStatsACErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 23, 2, 15, 1, 1, 1, 20), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tokenRingStatsACErrors.setStatus('mandatory')
tokenRingStatsAbortDelimiters = MibTableColumn((1, 3, 6, 1, 4, 1, 23, 2, 15, 1, 1, 1, 21), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tokenRingStatsAbortDelimiters.setStatus('mandatory')
tokenRingStatsLostFrameErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 23, 2, 15, 1, 1, 1, 22), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tokenRingStatsLostFrameErrors.setStatus('mandatory')
tokenRingStatsReceiveCongestions = MibTableColumn((1, 3, 6, 1, 4, 1, 23, 2, 15, 1, 1, 1, 23), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tokenRingStatsReceiveCongestions.setStatus('mandatory')
tokenRingStatsFrameCopiedErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 23, 2, 15, 1, 1, 1, 24), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tokenRingStatsFrameCopiedErrors.setStatus('mandatory')
tokenRingStatsFrequencyErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 23, 2, 15, 1, 1, 1, 25), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tokenRingStatsFrequencyErrors.setStatus('mandatory')
tokenRingStatsTokenErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 23, 2, 15, 1, 1, 1, 26), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tokenRingStatsTokenErrors.setStatus('mandatory')
tokenRingStatsDataPktsUndersizePkts = MibTableColumn((1, 3, 6, 1, 4, 1, 23, 2, 15, 1, 1, 1, 27), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tokenRingStatsDataPktsUndersizePkts.setStatus('mandatory')
tokenRingStatsDataPkts18to63Octets = MibTableColumn((1, 3, 6, 1, 4, 1, 23, 2, 15, 1, 1, 1, 28), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tokenRingStatsDataPkts18to63Octets.setStatus('mandatory')
tokenRingStatsDataPkts64to127Octets = MibTableColumn((1, 3, 6, 1, 4, 1, 23, 2, 15, 1, 1, 1, 29), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tokenRingStatsDataPkts64to127Octets.setStatus('mandatory')
tokenRingStatsDataPkts128to255Octets = MibTableColumn((1, 3, 6, 1, 4, 1, 23, 2, 15, 1, 1, 1, 30), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tokenRingStatsDataPkts128to255Octets.setStatus('mandatory')
tokenRingStatsDataPkts256to511Octets = MibTableColumn((1, 3, 6, 1, 4, 1, 23, 2, 15, 1, 1, 1, 31), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tokenRingStatsDataPkts256to511Octets.setStatus('mandatory')
tokenRingStatsDataPkts512to1023Octets = MibTableColumn((1, 3, 6, 1, 4, 1, 23, 2, 15, 1, 1, 1, 32), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tokenRingStatsDataPkts512to1023Octets.setStatus('mandatory')
tokenRingStatsDataPkts1024to2047Octets = MibTableColumn((1, 3, 6, 1, 4, 1, 23, 2, 15, 1, 1, 1, 33), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tokenRingStatsDataPkts1024to2047Octets.setStatus('mandatory')
tokenRingStatsDataPkts2048to4608Octets = MibTableColumn((1, 3, 6, 1, 4, 1, 23, 2, 15, 1, 1, 1, 34), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tokenRingStatsDataPkts2048to4608Octets.setStatus('mandatory')
tokenRingStatsDataPkts4609to18000Octets = MibTableColumn((1, 3, 6, 1, 4, 1, 23, 2, 15, 1, 1, 1, 35), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tokenRingStatsDataPkts4609to18000Octets.setStatus('mandatory')
tokenRingStatsDataPktsMoreThan18000Octets = MibTableColumn((1, 3, 6, 1, 4, 1, 23, 2, 15, 1, 1, 1, 36), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tokenRingStatsDataPktsMoreThan18000Octets.setStatus('mandatory')
tokenRingStatsOwner = MibTableColumn((1, 3, 6, 1, 4, 1, 23, 2, 15, 1, 1, 1, 37), OwnerString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tokenRingStatsOwner.setStatus('mandatory')
tokenRingStatsStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 23, 2, 15, 1, 1, 1, 38), EntryStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tokenRingStatsStatus.setStatus('mandatory')
tokenRingHistoryTable = MibTable((1, 3, 6, 1, 4, 1, 23, 2, 15, 2, 1), )
if mibBuilder.loadTexts: tokenRingHistoryTable.setStatus('mandatory')
tokenRingHistoryEntry = MibTableRow((1, 3, 6, 1, 4, 1, 23, 2, 15, 2, 1, 1), ).setIndexNames((0, "Novell-LANalyzer-TR-MIB", "tokenRingHistoryIndex"), (0, "Novell-LANalyzer-TR-MIB", "tokenRingHistoryStartIndex"))
if mibBuilder.loadTexts: tokenRingHistoryEntry.setStatus('mandatory')
tokenRingHistoryIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 23, 2, 15, 2, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tokenRingHistoryIndex.setStatus('mandatory')
tokenRingHistoryStartIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 23, 2, 15, 2, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tokenRingHistoryStartIndex.setStatus('mandatory')
tokenRingHistoryIntervalStart = MibTableColumn((1, 3, 6, 1, 4, 1, 23, 2, 15, 2, 1, 1, 3), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tokenRingHistoryIntervalStart.setStatus('mandatory')
tokenRingHistoryDropEvents = MibTableColumn((1, 3, 6, 1, 4, 1, 23, 2, 15, 2, 1, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tokenRingHistoryDropEvents.setStatus('mandatory')
tokenRingHistoryDataOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 23, 2, 15, 2, 1, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tokenRingHistoryDataOctets.setStatus('mandatory')
tokenRingHistoryDataPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 23, 2, 15, 2, 1, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tokenRingHistoryDataPkts.setStatus('mandatory')
tokenRingHistoryBroadcastDataPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 23, 2, 15, 2, 1, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tokenRingHistoryBroadcastDataPkts.setStatus('mandatory')
tokenRingHistoryMulticastDataPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 23, 2, 15, 2, 1, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tokenRingHistoryMulticastDataPkts.setStatus('mandatory')
tokenRingHistoryMACOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 23, 2, 15, 2, 1, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tokenRingHistoryMACOctets.setStatus('mandatory')
tokenRingHistoryMACPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 23, 2, 15, 2, 1, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tokenRingHistoryMACPkts.setStatus('mandatory')
tokenRingHistoryRingPurges = MibTableColumn((1, 3, 6, 1, 4, 1, 23, 2, 15, 2, 1, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tokenRingHistoryRingPurges.setStatus('mandatory')
tokenRingHistoryMonitorContentions = MibTableColumn((1, 3, 6, 1, 4, 1, 23, 2, 15, 2, 1, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tokenRingHistoryMonitorContentions.setStatus('mandatory')
tokenRingHistoryBeacons = MibTableColumn((1, 3, 6, 1, 4, 1, 23, 2, 15, 2, 1, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tokenRingHistoryBeacons.setStatus('mandatory')
tokenRingHistoryLostMonitors = MibTableColumn((1, 3, 6, 1, 4, 1, 23, 2, 15, 2, 1, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tokenRingHistoryLostMonitors.setStatus('mandatory')
tokenRingHistoryDuplicateMonitors = MibTableColumn((1, 3, 6, 1, 4, 1, 23, 2, 15, 2, 1, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tokenRingHistoryDuplicateMonitors.setStatus('mandatory')
tokenRingHistoryDuplicateAddresses = MibTableColumn((1, 3, 6, 1, 4, 1, 23, 2, 15, 2, 1, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tokenRingHistoryDuplicateAddresses.setStatus('mandatory')
tokenRingHistoryRingPollFailures = MibTableColumn((1, 3, 6, 1, 4, 1, 23, 2, 15, 2, 1, 1, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tokenRingHistoryRingPollFailures.setStatus('mandatory')
tokenRingHistoryLineErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 23, 2, 15, 2, 1, 1, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tokenRingHistoryLineErrors.setStatus('mandatory')
tokenRingHistoryInternalErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 23, 2, 15, 2, 1, 1, 19), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tokenRingHistoryInternalErrors.setStatus('mandatory')
tokenRingHistoryBurstErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 23, 2, 15, 2, 1, 1, 20), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tokenRingHistoryBurstErrors.setStatus('mandatory')
tokenRingHistoryACErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 23, 2, 15, 2, 1, 1, 21), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tokenRingHistoryACErrors.setStatus('mandatory')
tokenRingHistoryAbortDelimiters = MibTableColumn((1, 3, 6, 1, 4, 1, 23, 2, 15, 2, 1, 1, 22), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tokenRingHistoryAbortDelimiters.setStatus('mandatory')
tokenRingHistoryLostFrameErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 23, 2, 15, 2, 1, 1, 23), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tokenRingHistoryLostFrameErrors.setStatus('mandatory')
tokenRingHistoryReceiveCongestions = MibTableColumn((1, 3, 6, 1, 4, 1, 23, 2, 15, 2, 1, 1, 24), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tokenRingHistoryReceiveCongestions.setStatus('mandatory')
tokenRingHistoryFrameCopiedErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 23, 2, 15, 2, 1, 1, 25), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tokenRingHistoryFrameCopiedErrors.setStatus('mandatory')
tokenRingHistoryFrequencyErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 23, 2, 15, 2, 1, 1, 26), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tokenRingHistoryFrequencyErrors.setStatus('mandatory')
tokenRingHistoryTokenErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 23, 2, 15, 2, 1, 1, 27), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tokenRingHistoryTokenErrors.setStatus('mandatory')
tokenRingHistoryUtilization = MibTableColumn((1, 3, 6, 1, 4, 1, 23, 2, 15, 2, 1, 1, 28), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 10000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tokenRingHistoryUtilization.setStatus('mandatory')
tokenRingControlTable = MibTable((1, 3, 6, 1, 4, 1, 23, 2, 15, 3, 1), )
if mibBuilder.loadTexts: tokenRingControlTable.setStatus('mandatory')
tokenRingControlEntry = MibTableRow((1, 3, 6, 1, 4, 1, 23, 2, 15, 3, 1, 1), ).setIndexNames((0, "Novell-LANalyzer-TR-MIB", "tokenRingControlIndex"))
if mibBuilder.loadTexts: tokenRingControlEntry.setStatus('mandatory')
tokenRingControlIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 23, 2, 15, 3, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tokenRingControlIndex.setStatus('mandatory')
tokenRingControlIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 23, 2, 15, 3, 1, 1, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tokenRingControlIfIndex.setStatus('mandatory')
tokenRingControlCommandStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 23, 2, 15, 3, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9))).clone(namedValues=NamedValues(("none", 1), ("success", 2), ("inProgress", 3), ("notSupported", 4), ("unAbleToRun", 5), ("missingData", 6), ("aborted", 7), ("failed", 8), ("sendPending", 9)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tokenRingControlCommandStatus.setStatus('mandatory')
tokenRingControlCommandType = MibTableColumn((1, 3, 6, 1, 4, 1, 23, 2, 15, 3, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("nop", 1), ("removeStation", 2), ("testStation", 3), ("requestStationAddress", 4), ("requestStationState", 5), ("requestStationAttachment", 6)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tokenRingControlCommandType.setStatus('mandatory')
tokenRingControlCommandTargetAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 23, 2, 15, 3, 1, 1, 5), MacAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tokenRingControlCommandTargetAddress.setStatus('mandatory')
tokenRingControlBeaconEventIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 23, 2, 15, 3, 1, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tokenRingControlBeaconEventIndex.setStatus('mandatory')
tokenRingControlConfigEventIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 23, 2, 15, 3, 1, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tokenRingControlConfigEventIndex.setStatus('mandatory')
tokenRingControlOwner = MibTableColumn((1, 3, 6, 1, 4, 1, 23, 2, 15, 3, 1, 1, 8), OwnerString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tokenRingControlOwner.setStatus('mandatory')
tokenRingControlStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 23, 2, 15, 3, 1, 1, 9), EntryStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tokenRingControlStatus.setStatus('mandatory')
tokenRingNetworkTable = MibTable((1, 3, 6, 1, 4, 1, 23, 2, 15, 3, 2), )
if mibBuilder.loadTexts: tokenRingNetworkTable.setStatus('mandatory')
tokenRingNetworkEntry = MibTableRow((1, 3, 6, 1, 4, 1, 23, 2, 15, 3, 2, 1), ).setIndexNames((0, "Novell-LANalyzer-TR-MIB", "tokenRingNetworkIfIndex"))
if mibBuilder.loadTexts: tokenRingNetworkEntry.setStatus('mandatory')
tokenRingNetworkIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 23, 2, 15, 3, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tokenRingNetworkIfIndex.setStatus('mandatory')
tokenRingNetworkLastResetTime = MibTableColumn((1, 3, 6, 1, 4, 1, 23, 2, 15, 3, 2, 1, 2), TimeTicks().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tokenRingNetworkLastResetTime.setStatus('mandatory')
tokenRingNetworkRingNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 23, 2, 15, 3, 2, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4095))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tokenRingNetworkRingNumber.setStatus('mandatory')
tokenRingNetworkMediaSpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 23, 2, 15, 3, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(4, 16))).clone(namedValues=NamedValues(("fourMbps", 4), ("sixteenMbps", 16)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tokenRingNetworkMediaSpeed.setStatus('mandatory')
tokenRingNetworkBridges = MibTableColumn((1, 3, 6, 1, 4, 1, 23, 2, 15, 3, 2, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tokenRingNetworkBridges.setStatus('mandatory')
tokenRingNetworkActiveStations = MibTableColumn((1, 3, 6, 1, 4, 1, 23, 2, 15, 3, 2, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tokenRingNetworkActiveStations.setStatus('mandatory')
tokenRingNetworkInactiveStations = MibTableColumn((1, 3, 6, 1, 4, 1, 23, 2, 15, 3, 2, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tokenRingNetworkInactiveStations.setStatus('mandatory')
tokenRingNetworkLastEnterMACAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 23, 2, 15, 3, 2, 1, 8), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tokenRingNetworkLastEnterMACAddress.setStatus('mandatory')
tokenRingNetworkLastExitMACAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 23, 2, 15, 3, 2, 1, 9), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tokenRingNetworkLastExitMACAddress.setStatus('mandatory')
tokenRingNetworkState = MibTableColumn((1, 3, 6, 1, 4, 1, 23, 2, 15, 3, 2, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("normalOperation", 1), ("ringPurgeState", 2), ("claimTokenState", 3), ("beaconState", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tokenRingNetworkState.setStatus('mandatory')
tokenRingNetworkStateCause = MibTableColumn((1, 3, 6, 1, 4, 1, 23, 2, 15, 3, 2, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21))).clone(namedValues=NamedValues(("notClear", 1), ("initialState", 2), ("normalRing", 3), ("recovering", 4), ("hardError", 5), ("beaconSetRecoveryMode", 6), ("beaconRingSignalLoss", 7), ("beaconBitStreaming", 8), ("beaconFrameStreaming", 9), ("type1SoftError", 10), ("type2SoftError", 11), ("type3SoftError", 12), ("type4SoftError", 13), ("burst5Error", 14), ("lostFrameError", 15), ("corruptedToken", 16), ("lostToken", 17), ("circulatingFrame", 18), ("multipleMonitor", 19), ("lostMonitor", 20), ("frequencyError", 21))).clone('initialState')).setMaxAccess("readonly")
if mibBuilder.loadTexts: tokenRingNetworkStateCause.setStatus('mandatory')
tokenRingNetworkStateSenderMACAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 23, 2, 15, 3, 2, 1, 12), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tokenRingNetworkStateSenderMACAddress.setStatus('mandatory')
tokenRingNetworkStateUpstreamNeighborMACAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 23, 2, 15, 3, 2, 1, 13), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tokenRingNetworkStateUpstreamNeighborMACAddress.setStatus('mandatory')
tokenRingNetworkHostOrderChanges = MibTableColumn((1, 3, 6, 1, 4, 1, 23, 2, 15, 3, 2, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tokenRingNetworkHostOrderChanges.setStatus('mandatory')
tokenRingNetworkActiveMonitorChanges = MibTableColumn((1, 3, 6, 1, 4, 1, 23, 2, 15, 3, 2, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tokenRingNetworkActiveMonitorChanges.setStatus('mandatory')
tokenRingHostTable = MibTable((1, 3, 6, 1, 4, 1, 23, 2, 15, 3, 3), )
if mibBuilder.loadTexts: tokenRingHostTable.setStatus('mandatory')
tokenRingHostEntry = MibTableRow((1, 3, 6, 1, 4, 1, 23, 2, 15, 3, 3, 1), ).setIndexNames((0, "Novell-LANalyzer-TR-MIB", "tokenRingHostIfIndex"), (0, "Novell-LANalyzer-TR-MIB", "tokenRingHostMACAddress"))
if mibBuilder.loadTexts: tokenRingHostEntry.setStatus('mandatory')
tokenRingHostIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 23, 2, 15, 3, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tokenRingHostIfIndex.setStatus('mandatory')
tokenRingHostIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 23, 2, 15, 3, 3, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tokenRingHostIndex.setStatus('mandatory')
tokenRingHostStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 23, 2, 15, 3, 3, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("active", 1), ("inactive", 2), ("activeMonitor", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tokenRingHostStatus.setStatus('mandatory')
tokenRingHostLastEnterTime = MibTableColumn((1, 3, 6, 1, 4, 1, 23, 2, 15, 3, 3, 1, 4), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tokenRingHostLastEnterTime.setStatus('mandatory')
tokenRingHostLastExitTime = MibTableColumn((1, 3, 6, 1, 4, 1, 23, 2, 15, 3, 3, 1, 5), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tokenRingHostLastExitTime.setStatus('mandatory')
tokenRingHostMACAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 23, 2, 15, 3, 3, 1, 6), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tokenRingHostMACAddress.setStatus('mandatory')
tokenRingHostPhysicalDropNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 23, 2, 15, 3, 3, 1, 7), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tokenRingHostPhysicalDropNumber.setStatus('mandatory')
tokenRingHostSoftErrorReportTimerValue = MibTableColumn((1, 3, 6, 1, 4, 1, 23, 2, 15, 3, 3, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535)).clone(2000)).setMaxAccess("readonly")
if mibBuilder.loadTexts: tokenRingHostSoftErrorReportTimerValue.setStatus('mandatory')
tokenRingHostGroupAddresses = MibTableColumn((1, 3, 6, 1, 4, 1, 23, 2, 15, 3, 3, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tokenRingHostGroupAddresses.setStatus('mandatory')
tokenRingHostFunctionalAddresses = MibTableColumn((1, 3, 6, 1, 4, 1, 23, 2, 15, 3, 3, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tokenRingHostFunctionalAddresses.setStatus('mandatory')
tokenRingHostAuthorizedFunctionClass = MibTableColumn((1, 3, 6, 1, 4, 1, 23, 2, 15, 3, 3, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tokenRingHostAuthorizedFunctionClass.setStatus('mandatory')
tokenRingHostAuthorizedAccessPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 23, 2, 15, 3, 3, 1, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tokenRingHostAuthorizedAccessPriority.setStatus('mandatory')
tokenRingHostAdapterSoftwareLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 23, 2, 15, 3, 3, 1, 13), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tokenRingHostAdapterSoftwareLevel.setStatus('mandatory')
tokenRingHostAdapterStatusVector = MibTableColumn((1, 3, 6, 1, 4, 1, 23, 2, 15, 3, 3, 1, 14), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tokenRingHostAdapterStatusVector.setStatus('mandatory')
tokenRingHostProductID = MibTableColumn((1, 3, 6, 1, 4, 1, 23, 2, 15, 3, 3, 1, 15), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tokenRingHostProductID.setStatus('mandatory')
tokenRingHostLostMonitors = MibTableColumn((1, 3, 6, 1, 4, 1, 23, 2, 15, 3, 3, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tokenRingHostLostMonitors.setStatus('mandatory')
tokenRingHostDuplicateMonitors = MibTableColumn((1, 3, 6, 1, 4, 1, 23, 2, 15, 3, 3, 1, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tokenRingHostDuplicateMonitors.setStatus('mandatory')
tokenRingHostDuplicateAddresses = MibTableColumn((1, 3, 6, 1, 4, 1, 23, 2, 15, 3, 3, 1, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tokenRingHostDuplicateAddresses.setStatus('mandatory')
tokenRingHostRingPollFailures = MibTableColumn((1, 3, 6, 1, 4, 1, 23, 2, 15, 3, 3, 1, 19), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tokenRingHostRingPollFailures.setStatus('mandatory')
tokenRingHostInLineErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 23, 2, 15, 3, 3, 1, 20), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tokenRingHostInLineErrors.setStatus('mandatory')
tokenRingHostInternalErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 23, 2, 15, 3, 3, 1, 21), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tokenRingHostInternalErrors.setStatus('mandatory')
tokenRingHostInBurstErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 23, 2, 15, 3, 3, 1, 22), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tokenRingHostInBurstErrors.setStatus('mandatory')
tokenRingHostACErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 23, 2, 15, 3, 3, 1, 23), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tokenRingHostACErrors.setStatus('mandatory')
tokenRingHostAbortDelimiters = MibTableColumn((1, 3, 6, 1, 4, 1, 23, 2, 15, 3, 3, 1, 24), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tokenRingHostAbortDelimiters.setStatus('mandatory')
tokenRingHostLostFrameErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 23, 2, 15, 3, 3, 1, 25), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tokenRingHostLostFrameErrors.setStatus('mandatory')
tokenRingHostReceiveCongestions = MibTableColumn((1, 3, 6, 1, 4, 1, 23, 2, 15, 3, 3, 1, 26), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tokenRingHostReceiveCongestions.setStatus('mandatory')
tokenRingHostFrameCopiedErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 23, 2, 15, 3, 3, 1, 27), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tokenRingHostFrameCopiedErrors.setStatus('mandatory')
tokenRingHostFrequencyErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 23, 2, 15, 3, 3, 1, 28), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tokenRingHostFrequencyErrors.setStatus('mandatory')
tokenRingHostTokenErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 23, 2, 15, 3, 3, 1, 29), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tokenRingHostTokenErrors.setStatus('mandatory')
tokenRingHostOutLineErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 23, 2, 15, 3, 3, 1, 30), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tokenRingHostOutLineErrors.setStatus('mandatory')
tokenRingHostOutBurstErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 23, 2, 15, 3, 3, 1, 31), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tokenRingHostOutBurstErrors.setStatus('mandatory')
tokenRingHostInBeacons = MibTableColumn((1, 3, 6, 1, 4, 1, 23, 2, 15, 3, 3, 1, 32), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tokenRingHostInBeacons.setStatus('mandatory')
tokenRingHostOutBeacons = MibTableColumn((1, 3, 6, 1, 4, 1, 23, 2, 15, 3, 3, 1, 33), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tokenRingHostOutBeacons.setStatus('mandatory')
tokenRingHostInsertions = MibTableColumn((1, 3, 6, 1, 4, 1, 23, 2, 15, 3, 3, 1, 34), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tokenRingHostInsertions.setStatus('mandatory')
tokenRingOrderTable = MibTable((1, 3, 6, 1, 4, 1, 23, 2, 15, 3, 4), )
if mibBuilder.loadTexts: tokenRingOrderTable.setStatus('mandatory')
tokenRingOrderEntry = MibTableRow((1, 3, 6, 1, 4, 1, 23, 2, 15, 3, 4, 1), ).setIndexNames((0, "Novell-LANalyzer-TR-MIB", "tokenRingOrderIfIndex"), (0, "Novell-LANalyzer-TR-MIB", "tokenRingOrderIndex"))
if mibBuilder.loadTexts: tokenRingOrderEntry.setStatus('mandatory')
tokenRingOrderIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 23, 2, 15, 3, 4, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tokenRingOrderIfIndex.setStatus('mandatory')
tokenRingOrderIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 23, 2, 15, 3, 4, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tokenRingOrderIndex.setStatus('mandatory')
tokenRingOrderStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 23, 2, 15, 3, 4, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("active", 1), ("inactive", 2), ("activeMonitor", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tokenRingOrderStatus.setStatus('mandatory')
tokenRingOrderLastEnterTime = MibTableColumn((1, 3, 6, 1, 4, 1, 23, 2, 15, 3, 4, 1, 4), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tokenRingOrderLastEnterTime.setStatus('mandatory')
tokenRingOrderLastExitTime = MibTableColumn((1, 3, 6, 1, 4, 1, 23, 2, 15, 3, 4, 1, 5), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tokenRingOrderLastExitTime.setStatus('mandatory')
tokenRingOrderMACAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 23, 2, 15, 3, 4, 1, 6), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tokenRingOrderMACAddress.setStatus('mandatory')
tokenRingOrderPhysicalDropNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 23, 2, 15, 3, 4, 1, 7), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tokenRingOrderPhysicalDropNumber.setStatus('mandatory')
tokenRingOrderSoftErrorReportTimerValue = MibTableColumn((1, 3, 6, 1, 4, 1, 23, 2, 15, 3, 4, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535)).clone(2000)).setMaxAccess("readonly")
if mibBuilder.loadTexts: tokenRingOrderSoftErrorReportTimerValue.setStatus('mandatory')
tokenRingOrderGroupAddresses = MibTableColumn((1, 3, 6, 1, 4, 1, 23, 2, 15, 3, 4, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tokenRingOrderGroupAddresses.setStatus('mandatory')
tokenRingOrderFunctionalAddresses = MibTableColumn((1, 3, 6, 1, 4, 1, 23, 2, 15, 3, 4, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tokenRingOrderFunctionalAddresses.setStatus('mandatory')
tokenRingOrderAuthorizedFunctionClass = MibTableColumn((1, 3, 6, 1, 4, 1, 23, 2, 15, 3, 4, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tokenRingOrderAuthorizedFunctionClass.setStatus('mandatory')
tokenRingOrderAuthorizedAccessPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 23, 2, 15, 3, 4, 1, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tokenRingOrderAuthorizedAccessPriority.setStatus('mandatory')
tokenRingOrderAdapterSoftwareLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 23, 2, 15, 3, 4, 1, 13), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tokenRingOrderAdapterSoftwareLevel.setStatus('mandatory')
tokenRingOrderAdapterStatusVector = MibTableColumn((1, 3, 6, 1, 4, 1, 23, 2, 15, 3, 4, 1, 14), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tokenRingOrderAdapterStatusVector.setStatus('mandatory')
tokenRingOrderProductID = MibTableColumn((1, 3, 6, 1, 4, 1, 23, 2, 15, 3, 4, 1, 15), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tokenRingOrderProductID.setStatus('mandatory')
tokenRingOrderLostMonitors = MibTableColumn((1, 3, 6, 1, 4, 1, 23, 2, 15, 3, 4, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tokenRingOrderLostMonitors.setStatus('mandatory')
tokenRingOrderDuplicateMonitors = MibTableColumn((1, 3, 6, 1, 4, 1, 23, 2, 15, 3, 4, 1, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tokenRingOrderDuplicateMonitors.setStatus('mandatory')
tokenRingOrderDuplicateAddresses = MibTableColumn((1, 3, 6, 1, 4, 1, 23, 2, 15, 3, 4, 1, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tokenRingOrderDuplicateAddresses.setStatus('mandatory')
tokenRingOrderRingPollFailures = MibTableColumn((1, 3, 6, 1, 4, 1, 23, 2, 15, 3, 4, 1, 19), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tokenRingOrderRingPollFailures.setStatus('mandatory')
tokenRingOrderInLineErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 23, 2, 15, 3, 4, 1, 20), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tokenRingOrderInLineErrors.setStatus('mandatory')
tokenRingOrderInternalErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 23, 2, 15, 3, 4, 1, 21), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tokenRingOrderInternalErrors.setStatus('mandatory')
tokenRingOrderInBurstErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 23, 2, 15, 3, 4, 1, 22), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tokenRingOrderInBurstErrors.setStatus('mandatory')
tokenRingOrderACErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 23, 2, 15, 3, 4, 1, 23), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tokenRingOrderACErrors.setStatus('mandatory')
tokenRingOrderAbortDelimiters = MibTableColumn((1, 3, 6, 1, 4, 1, 23, 2, 15, 3, 4, 1, 24), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tokenRingOrderAbortDelimiters.setStatus('mandatory')
tokenRingOrderLostFrameErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 23, 2, 15, 3, 4, 1, 25), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tokenRingOrderLostFrameErrors.setStatus('mandatory')
tokenRingOrderReceiveCongestions = MibTableColumn((1, 3, 6, 1, 4, 1, 23, 2, 15, 3, 4, 1, 26), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tokenRingOrderReceiveCongestions.setStatus('mandatory')
tokenRingOrderFrameCopiedErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 23, 2, 15, 3, 4, 1, 27), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tokenRingOrderFrameCopiedErrors.setStatus('mandatory')
tokenRingOrderFrequencyErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 23, 2, 15, 3, 4, 1, 28), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tokenRingOrderFrequencyErrors.setStatus('mandatory')
tokenRingOrderTokenErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 23, 2, 15, 3, 4, 1, 29), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tokenRingOrderTokenErrors.setStatus('mandatory')
tokenRingOrderOutLineErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 23, 2, 15, 3, 4, 1, 30), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tokenRingOrderOutLineErrors.setStatus('mandatory')
tokenRingOrderOutBurstErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 23, 2, 15, 3, 4, 1, 31), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tokenRingOrderOutBurstErrors.setStatus('mandatory')
tokenRingOrderInBeacons = MibTableColumn((1, 3, 6, 1, 4, 1, 23, 2, 15, 3, 4, 1, 32), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tokenRingOrderInBeacons.setStatus('mandatory')
tokenRingOrderOutBeacons = MibTableColumn((1, 3, 6, 1, 4, 1, 23, 2, 15, 3, 4, 1, 33), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tokenRingOrderOutBeacons.setStatus('mandatory')
tokenRingOrderInsertions = MibTableColumn((1, 3, 6, 1, 4, 1, 23, 2, 15, 3, 4, 1, 34), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tokenRingOrderInsertions.setStatus('mandatory')
tokenRingBeaconing = NotificationType((1, 3, 6, 1, 4, 1, 23, 2, 15) + (0,4)).setObjects(("Novell-LANalyzer-TR-MIB", "tokenRingNetworkRingNumber"), ("Novell-LANalyzer-TR-MIB", "tokenRingNetworkState"), ("Novell-LANalyzer-TR-MIB", "tokenRingNetworkStateCause"), ("Novell-LANalyzer-TR-MIB", "tokenRingNetworkStateSenderMACAddress"), ("Novell-LANalyzer-TR-MIB", "tokenRingNetworkStateUpstreamNeighborMACAddress"))
tokenRingConfigurationChange = NotificationType((1, 3, 6, 1, 4, 1, 23, 2, 15) + (0,5)).setObjects(("Novell-LANalyzer-TR-MIB", "tokenRingNetworkRingNumber"), ("Novell-LANalyzer-TR-MIB", "tokenRingHostMACAddress"), ("Novell-LANalyzer-TR-MIB", "tokenRingHostPhysicalDropNumber"), ("Novell-LANalyzer-TR-MIB", "tokenRingHostStatus"))
mibBuilder.exportSymbols("Novell-LANalyzer-TR-MIB", tokenRingControlStatus=tokenRingControlStatus, tokenRingOrderRingPollFailures=tokenRingOrderRingPollFailures, tokenRingOrderInBurstErrors=tokenRingOrderInBurstErrors, tokenRingOrderLastExitTime=tokenRingOrderLastExitTime, tokenRingHistoryAbortDelimiters=tokenRingHistoryAbortDelimiters, tokenRingHistoryDataPkts=tokenRingHistoryDataPkts, tokenRingControlCommandStatus=tokenRingControlCommandStatus, tokenRingStatsDropEvents=tokenRingStatsDropEvents, tokenRingStatsEntry=tokenRingStatsEntry, tokenRingHistoryTokenErrors=tokenRingHistoryTokenErrors, tokenRingStatsDataPkts2048to4608Octets=tokenRingStatsDataPkts2048to4608Octets, tokenRingHostOutBeacons=tokenRingHostOutBeacons, tokenRingOrderReceiveCongestions=tokenRingOrderReceiveCongestions, tokenRingOrderFrameCopiedErrors=tokenRingOrderFrameCopiedErrors, productType=productType, tokenRingStatsStatus=tokenRingStatsStatus, tokenRingHostProductID=tokenRingHostProductID, tokenRingHostInLineErrors=tokenRingHostInLineErrors, tokenRingHistoryMACPkts=tokenRingHistoryMACPkts, tokenRingConfigurationChange=tokenRingConfigurationChange, tokenRingHostFunctionalAddresses=tokenRingHostFunctionalAddresses, tokenRingHistoryBroadcastDataPkts=tokenRingHistoryBroadcastDataPkts, tokenRingStatsDataPkts4609to18000Octets=tokenRingStatsDataPkts4609to18000Octets, tokenRingControlTable=tokenRingControlTable, tokenRingControlIndex=tokenRingControlIndex, tokenRingHostFrequencyErrors=tokenRingHostFrequencyErrors, tokenRingNetworkEntry=tokenRingNetworkEntry, tokenRingStatsLineErrors=tokenRingStatsLineErrors, tokenRingHistoryBeacons=tokenRingHistoryBeacons, tokenRingHostLostMonitors=tokenRingHostLostMonitors, tokenRingHostOutLineErrors=tokenRingHostOutLineErrors, tokenRingControlConfigEventIndex=tokenRingControlConfigEventIndex, tokenRingOrderAdapterStatusVector=tokenRingOrderAdapterStatusVector, tokenRingStatsFrameCopiedErrors=tokenRingStatsFrameCopiedErrors, tokenRingStatsLostFrameErrors=tokenRingStatsLostFrameErrors, tokenRingNetworkTable=tokenRingNetworkTable, tokenRingHistoryIntervalStart=tokenRingHistoryIntervalStart, tokenRingHostSoftErrorReportTimerValue=tokenRingHostSoftErrorReportTimerValue, tokenRingHostAuthorizedAccessPriority=tokenRingHostAuthorizedAccessPriority, tokenRingHistoryMonitorContentions=tokenRingHistoryMonitorContentions, tokenRingHistoryACErrors=tokenRingHistoryACErrors, tokenRingHistoryReceiveCongestions=tokenRingHistoryReceiveCongestions, tokenRingControlCommandType=tokenRingControlCommandType, tokenRingControlBeaconEventIndex=tokenRingControlBeaconEventIndex, tokenRingHostACErrors=tokenRingHostACErrors, tokenRingStatsMACPkts=tokenRingStatsMACPkts, tokenRingHostLostFrameErrors=tokenRingHostLostFrameErrors, tokenRingHostInternalErrors=tokenRingHostInternalErrors, tokenRingHistoryRingPurges=tokenRingHistoryRingPurges, tokenRingHistoryLostFrameErrors=tokenRingHistoryLostFrameErrors, tokenRingHistoryDuplicateAddresses=tokenRingHistoryDuplicateAddresses, tokenRingHostAdapterSoftwareLevel=tokenRingHostAdapterSoftwareLevel, tokenRingOrderInBeacons=tokenRingOrderInBeacons, tokenRingHostPhysicalDropNumber=tokenRingHostPhysicalDropNumber, tokenRingNetworkMediaSpeed=tokenRingNetworkMediaSpeed, tokenRingHistoryDataOctets=tokenRingHistoryDataOctets, tokenRingNetworkLastResetTime=tokenRingNetworkLastResetTime, MacAddress=MacAddress, tokenRingHistory=tokenRingHistory, tokenRingStatsDataPktsMoreThan18000Octets=tokenRingStatsDataPktsMoreThan18000Octets, tokenRingStatsTable=tokenRingStatsTable, tokenRingStatsMonitorContentions=tokenRingStatsMonitorContentions, tokenRingHostEntry=tokenRingHostEntry, tokenRingOrderMACAddress=tokenRingOrderMACAddress, tokenRingStatsBeacons=tokenRingStatsBeacons, tokenRingNetworkHostOrderChanges=tokenRingNetworkHostOrderChanges, tokenRingOrderPhysicalDropNumber=tokenRingOrderPhysicalDropNumber, tokenRingHostInBeacons=tokenRingHostInBeacons, ringrmon_mib=ringrmon_mib, tokenRingHistoryFrequencyErrors=tokenRingHistoryFrequencyErrors, tokenRingControlIfIndex=tokenRingControlIfIndex, tokenRingHistoryLineErrors=tokenRingHistoryLineErrors, tokenRingOrderStatus=tokenRingOrderStatus, tokenRingStatsDataPkts128to255Octets=tokenRingStatsDataPkts128to255Octets, tokenRingHostIfIndex=tokenRingHostIfIndex, tokenRingOrderLastEnterTime=tokenRingOrderLastEnterTime, tokenRingStatsFrequencyErrors=tokenRingStatsFrequencyErrors, tokenRingHistoryUtilization=tokenRingHistoryUtilization, tokenRingStatsDataOctets=tokenRingStatsDataOctets, tokenRingNetworkActiveMonitorChanges=tokenRingNetworkActiveMonitorChanges, tokenRingHistoryMulticastDataPkts=tokenRingHistoryMulticastDataPkts, tokenRingStatsBroadcastDataPkts=tokenRingStatsBroadcastDataPkts, tokenRingNetworkLastExitMACAddress=tokenRingNetworkLastExitMACAddress, tokenRingOrderInLineErrors=tokenRingOrderInLineErrors, tokenRingHistoryRingPollFailures=tokenRingHistoryRingPollFailures, tokenRingStatsRingPurges=tokenRingStatsRingPurges, tokenRingOrderAbortDelimiters=tokenRingOrderAbortDelimiters, tokenRingNetworkActiveStations=tokenRingNetworkActiveStations, tokenRingStatsDataPkts256to511Octets=tokenRingStatsDataPkts256to511Octets, tokenRingStatsDataPkts64to127Octets=tokenRingStatsDataPkts64to127Octets, tokenRingStatsDuplicateMonitors=tokenRingStatsDuplicateMonitors, tokenRingNetworkLastEnterMACAddress=tokenRingNetworkLastEnterMACAddress, tokenRingHostDuplicateMonitors=tokenRingHostDuplicateMonitors, tokenRingOrderLostFrameErrors=tokenRingOrderLostFrameErrors, tokenRingStatsOwner=tokenRingStatsOwner, tokenRingStatsDataPktsUndersizePkts=tokenRingStatsDataPktsUndersizePkts, tokenRingHostRingPollFailures=tokenRingHostRingPollFailures, tokenRingOrderGroupAddresses=tokenRingOrderGroupAddresses, tokenRingStatsDataSource=tokenRingStatsDataSource, tokenRingOrderOutLineErrors=tokenRingOrderOutLineErrors, tokenRingHostLastEnterTime=tokenRingHostLastEnterTime, tokenRingNetworkIfIndex=tokenRingNetworkIfIndex, tokenRingHostFrameCopiedErrors=tokenRingHostFrameCopiedErrors, tokenRingOrderLostMonitors=tokenRingOrderLostMonitors, tokenRingStatsInternalErrors=tokenRingStatsInternalErrors, tokenRingHistoryLostMonitors=tokenRingHistoryLostMonitors, tokenRingOrderFrequencyErrors=tokenRingOrderFrequencyErrors, tokenRingHistoryIndex=tokenRingHistoryIndex, tokenRingHostGroupAddresses=tokenRingHostGroupAddresses, tokenRingOrderIndex=tokenRingOrderIndex, tokenRingOrderOutBeacons=tokenRingOrderOutBeacons, tokenRingHistoryStartIndex=tokenRingHistoryStartIndex, tokenRingOrderACErrors=tokenRingOrderACErrors, tokenRingStatsDataPkts18to63Octets=tokenRingStatsDataPkts18to63Octets, tokenRingHostAuthorizedFunctionClass=tokenRingHostAuthorizedFunctionClass, tokenRingHistoryMACOctets=tokenRingHistoryMACOctets, tokenRingOrderAuthorizedFunctionClass=tokenRingOrderAuthorizedFunctionClass, tokenRingNetworkStateSenderMACAddress=tokenRingNetworkStateSenderMACAddress, novell=novell, tokenRingHostMACAddress=tokenRingHostMACAddress, tokenRingHostAdapterStatusVector=tokenRingHostAdapterStatusVector, tokenRingHostIndex=tokenRingHostIndex, tokenRingHostOutBurstErrors=tokenRingHostOutBurstErrors, tokenRingOrderTable=tokenRingOrderTable, tokenRingHistoryInternalErrors=tokenRingHistoryInternalErrors, tokenRingStatsDataPkts=tokenRingStatsDataPkts, tokenRingNetworkBridges=tokenRingNetworkBridges, tokenRingHostDuplicateAddresses=tokenRingHostDuplicateAddresses, tokenRingOrderAuthorizedAccessPriority=tokenRingOrderAuthorizedAccessPriority, tokenRingBeaconing=tokenRingBeaconing, tokenRingHostLastExitTime=tokenRingHostLastExitTime, tokenRingOrderEntry=tokenRingOrderEntry, tokenRingControlEntry=tokenRingControlEntry, mibDoc=mibDoc, tokenRingOrderSoftErrorReportTimerValue=tokenRingOrderSoftErrorReportTimerValue, tokenRingStatsACErrors=tokenRingStatsACErrors, tokenRingStatsTokenErrors=tokenRingStatsTokenErrors, tokenRingHostInBurstErrors=tokenRingHostInBurstErrors, tokenRingHostInsertions=tokenRingHostInsertions, tokenRingHistoryFrameCopiedErrors=tokenRingHistoryFrameCopiedErrors, tokenRingStatsDuplicateAddresses=tokenRingStatsDuplicateAddresses, tokenRingOrderIfIndex=tokenRingOrderIfIndex, tokenRingOrderOutBurstErrors=tokenRingOrderOutBurstErrors, tokenRingHostAbortDelimiters=tokenRingHostAbortDelimiters, tokenRing=tokenRing, tokenRingHostReceiveCongestions=tokenRingHostReceiveCongestions, tokenRingStatsDataPkts512to1023Octets=tokenRingStatsDataPkts512to1023Octets, tokenRingStatsRingPollFailures=tokenRingStatsRingPollFailures, tokenRingHistoryDuplicateMonitors=tokenRingHistoryDuplicateMonitors, tokenRingHistoryBurstErrors=tokenRingHistoryBurstErrors, tokenRingStatistics=tokenRingStatistics, tokenRingStatsLostMonitors=tokenRingStatsLostMonitors, tokenRingOrderInternalErrors=tokenRingOrderInternalErrors, tokenRingHostTable=tokenRingHostTable, tokenRingNetworkStateCause=tokenRingNetworkStateCause, tokenRingNetworkRingNumber=tokenRingNetworkRingNumber, tokenRingOrderFunctionalAddresses=tokenRingOrderFunctionalAddresses, tokenRingNetworkState=tokenRingNetworkState, tokenRingNetworkStateUpstreamNeighborMACAddress=tokenRingNetworkStateUpstreamNeighborMACAddress, tokenRingOrderProductID=tokenRingOrderProductID, tokenRingStatsReceiveCongestions=tokenRingStatsReceiveCongestions, tokenRingHostStatus=tokenRingHostStatus, tokenRingStatsMACOctets=tokenRingStatsMACOctets, tokenRingControlOwner=tokenRingControlOwner, tokenRingHostTokenErrors=tokenRingHostTokenErrors, tokenRingOrderDuplicateAddresses=tokenRingOrderDuplicateAddresses, tokenRingStatsDataPkts1024to2047Octets=tokenRingStatsDataPkts1024to2047Octets, tokenRingControlCommandTargetAddress=tokenRingControlCommandTargetAddress, tokenRingStatsAbortDelimiters=tokenRingStatsAbortDelimiters, tokenRingStatsMulticastDataPkts=tokenRingStatsMulticastDataPkts, tokenRingHistoryTable=tokenRingHistoryTable, tokenRingOrderDuplicateMonitors=tokenRingOrderDuplicateMonitors, tokenRingOrderTokenErrors=tokenRingOrderTokenErrors, tokenRingHistoryEntry=tokenRingHistoryEntry, tokenRingOrderAdapterSoftwareLevel=tokenRingOrderAdapterSoftwareLevel, tokenRingOrderInsertions=tokenRingOrderInsertions, tokenRingStatsIndex=tokenRingStatsIndex, tokenRingHistoryDropEvents=tokenRingHistoryDropEvents, tokenRingStatsBurstErrors=tokenRingStatsBurstErrors, tokenRingNetworkInactiveStations=tokenRingNetworkInactiveStations)
