#
# PySNMP MIB module ALCATEL-IND1-MAC-ADDRESS-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/ALCATEL-IND1-MAC-ADDRESS-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 17:02:54 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
softentIND1MacAddress, = mibBuilder.importSymbols("ALCATEL-IND1-BASE", "softentIND1MacAddress")
vlanNumber, = mibBuilder.importSymbols("ALCATEL-IND1-VLAN-MGR-MIB", "vlanNumber")
OctetString, Integer, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "OctetString", "Integer", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueSizeConstraint, ConstraintsUnion, ConstraintsIntersection, ValueRangeConstraint, SingleValueConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueSizeConstraint", "ConstraintsUnion", "ConstraintsIntersection", "ValueRangeConstraint", "SingleValueConstraint")
ifIndex, = mibBuilder.importSymbols("IF-MIB", "ifIndex")
dot1qVlanIndex, = mibBuilder.importSymbols("Q-BRIDGE-MIB", "dot1qVlanIndex")
SnmpAdminString, = mibBuilder.importSymbols("SNMP-FRAMEWORK-MIB", "SnmpAdminString")
ObjectGroup, ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ObjectGroup", "ModuleCompliance", "NotificationGroup")
MibScalar, MibTable, MibTableRow, MibTableColumn, MibIdentifier, IpAddress, iso, TimeTicks, Bits, ObjectIdentity, Counter64, Gauge32, Unsigned32, Counter32, Integer32, ModuleIdentity, NotificationType = mibBuilder.importSymbols("SNMPv2-SMI", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "MibIdentifier", "IpAddress", "iso", "TimeTicks", "Bits", "ObjectIdentity", "Counter64", "Gauge32", "Unsigned32", "Counter32", "Integer32", "ModuleIdentity", "NotificationType")
TextualConvention, RowStatus, DisplayString, MacAddress = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "RowStatus", "DisplayString", "MacAddress")
alcatelIND1MacAddressMIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 8, 1))
alcatelIND1MacAddressMIB.setRevisions(('2010-05-13 00:00', '2007-04-03 00:00',))
if mibBuilder.loadTexts: alcatelIND1MacAddressMIB.setLastUpdated('201005130000Z')
if mibBuilder.loadTexts: alcatelIND1MacAddressMIB.setOrganization('Alcatel-Lucent, Enterprise Solutions Division')
alcatelIND1MacAddressMIBNotifications = ObjectIdentity((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 8, 1, 0))
if mibBuilder.loadTexts: alcatelIND1MacAddressMIBNotifications.setStatus('current')
alcatelIND1MacAddressMIBObjects = ObjectIdentity((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 8, 1, 1))
if mibBuilder.loadTexts: alcatelIND1MacAddressMIBObjects.setStatus('current')
alcatelIND1MacAddressMIBConformance = ObjectIdentity((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 8, 1, 2))
if mibBuilder.loadTexts: alcatelIND1MacAddressMIBConformance.setStatus('current')
alcatelIND1MacAddressMIBGroups = ObjectIdentity((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 8, 1, 2, 1))
if mibBuilder.loadTexts: alcatelIND1MacAddressMIBGroups.setStatus('current')
alcatelIND1MacAddressMIBCompliances = ObjectIdentity((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 8, 1, 2, 2))
if mibBuilder.loadTexts: alcatelIND1MacAddressMIBCompliances.setStatus('current')
class MacAddressProtocolType(TextualConvention, Integer32):
    status = 'current'
    displayHint = 'x'
    subtypeSpec = Integer32.subtypeSpec + ValueRangeConstraint(0, 2147483647)

slMacAddressAgingTable = MibTable((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 8, 1, 1, 2), )
if mibBuilder.loadTexts: slMacAddressAgingTable.setStatus('current')
slMacAddressAgingEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 8, 1, 1, 2, 1), ).setIndexNames((0, "Q-BRIDGE-MIB", "dot1qVlanIndex"))
if mibBuilder.loadTexts: slMacAddressAgingEntry.setStatus('current')
slMacAgingValue = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 8, 1, 1, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(10, 1000000)).clone(300)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: slMacAgingValue.setStatus('current')
slMacAgingRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 8, 1, 1, 2, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: slMacAgingRowStatus.setStatus('current')
slDistributedMacMode = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 8, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: slDistributedMacMode.setStatus('current')
slMacLearningControlTable = MibTable((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 8, 1, 1, 7), )
if mibBuilder.loadTexts: slMacLearningControlTable.setStatus('current')
slMacLearningControlEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 8, 1, 1, 7, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: slMacLearningControlEntry.setStatus('current')
slMacLearningControlStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 8, 1, 1, 7, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('enabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: slMacLearningControlStatus.setStatus('current')
slMacLearningVlanControlTable = MibTable((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 8, 1, 1, 10), )
if mibBuilder.loadTexts: slMacLearningVlanControlTable.setStatus('current')
slMacLearningVlanControlEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 8, 1, 1, 10, 1), ).setIndexNames((0, "ALCATEL-IND1-VLAN-MGR-MIB", "vlanNumber"))
if mibBuilder.loadTexts: slMacLearningVlanControlEntry.setStatus('current')
slMacLearningVlanControlStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 8, 1, 1, 10, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('enabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: slMacLearningVlanControlStatus.setStatus('current')
alaSlMacAddressGlobalTable = MibTable((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 8, 1, 1, 8), )
if mibBuilder.loadTexts: alaSlMacAddressGlobalTable.setStatus('current')
alaSlMacAddressGlobalEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 8, 1, 1, 8, 1), ).setIndexNames((0, "ALCATEL-IND1-MAC-ADDRESS-MIB", "slMacDomain"), (0, "ALCATEL-IND1-MAC-ADDRESS-MIB", "slLocaleType"), (0, "ALCATEL-IND1-MAC-ADDRESS-MIB", "slOriginId"), (0, "ALCATEL-IND1-MAC-ADDRESS-MIB", "slServiceId"), (0, "ALCATEL-IND1-MAC-ADDRESS-MIB", "slSubId"), (0, "ALCATEL-IND1-MAC-ADDRESS-MIB", "slMacAddressGbl"))
if mibBuilder.loadTexts: alaSlMacAddressGlobalEntry.setStatus('current')
slMacDomain = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 8, 1, 1, 8, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4))).clone(namedValues=NamedValues(("all", 0), ("vlan", 1), ("vpls", 2), ("spbm", 3), ("evb", 4))).clone('all'))
if mibBuilder.loadTexts: slMacDomain.setStatus('current')
slLocaleType = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 8, 1, 1, 8, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("default", 0), ("sap", 1), ("sBind", 2))).clone('default'))
if mibBuilder.loadTexts: slLocaleType.setStatus('current')
slOriginId = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 8, 1, 1, 8, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(1, 2147483647), )))
if mibBuilder.loadTexts: slOriginId.setStatus('current')
slServiceId = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 8, 1, 1, 8, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(1, 32767), )))
if mibBuilder.loadTexts: slServiceId.setStatus('current')
slSubId = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 8, 1, 1, 8, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647)))
if mibBuilder.loadTexts: slSubId.setStatus('current')
slMacAddressGbl = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 8, 1, 1, 8, 1, 6), MacAddress())
if mibBuilder.loadTexts: slMacAddressGbl.setStatus('current')
slMacAddressGblManagement = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 8, 1, 1, 8, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("permanent", 1), ("deleteOnReset", 2), ("deleteOnTimeout", 3), ("learned", 4), ("staticMulticast", 5))).clone('permanent')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: slMacAddressGblManagement.setStatus('current')
slMacAddressGblDisposition = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 8, 1, 1, 8, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("bridging", 1), ("filtering", 2), ("quarantined", 3), ("hostIntegrity", 4), ("userNetworkProf", 5))).clone('bridging')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: slMacAddressGblDisposition.setStatus('current')
slMacAddressGblRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 8, 1, 1, 8, 1, 9), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: slMacAddressGblRowStatus.setStatus('current')
slMacAddressGblProtocol = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 8, 1, 1, 8, 1, 10), MacAddressProtocolType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: slMacAddressGblProtocol.setStatus('current')
slMacAddressGblGroupField = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 8, 1, 1, 8, 1, 11), Unsigned32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: slMacAddressGblGroupField.setStatus('current')
slSvcISID = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 8, 1, 1, 8, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(256, 16777214), ))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: slSvcISID.setStatus('current')
alcatelIND1MacAddressMIBCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 8, 1, 2, 2, 1)).setObjects(("ALCATEL-IND1-MAC-ADDRESS-MIB", "slMacAddressGroup"), ("ALCATEL-IND1-MAC-ADDRESS-MIB", "slMacAgingGroup"), ("ALCATEL-IND1-MAC-ADDRESS-MIB", "slMacGeneralGroup"), ("ALCATEL-IND1-MAC-ADDRESS-MIB", "slMacLearningGroup"), ("ALCATEL-IND1-MAC-ADDRESS-MIB", "slMacVlanLearningGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    alcatelIND1MacAddressMIBCompliance = alcatelIND1MacAddressMIBCompliance.setStatus('current')
slMacAddressGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 8, 1, 2, 1, 1)).setObjects(("ALCATEL-IND1-MAC-ADDRESS-MIB", "slMacAddressGblManagement"), ("ALCATEL-IND1-MAC-ADDRESS-MIB", "slMacAddressGblDisposition"), ("ALCATEL-IND1-MAC-ADDRESS-MIB", "slMacAddressGblRowStatus"), ("ALCATEL-IND1-MAC-ADDRESS-MIB", "slMacAddressGblProtocol"), ("ALCATEL-IND1-MAC-ADDRESS-MIB", "slMacAddressGblGroupField"), ("ALCATEL-IND1-MAC-ADDRESS-MIB", "slSvcISID"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    slMacAddressGroup = slMacAddressGroup.setStatus('current')
slMacAgingGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 8, 1, 2, 1, 2)).setObjects(("ALCATEL-IND1-MAC-ADDRESS-MIB", "slMacAgingValue"), ("ALCATEL-IND1-MAC-ADDRESS-MIB", "slMacAgingRowStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    slMacAgingGroup = slMacAgingGroup.setStatus('current')
slMacGeneralGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 8, 1, 2, 1, 3)).setObjects(("ALCATEL-IND1-MAC-ADDRESS-MIB", "slDistributedMacMode"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    slMacGeneralGroup = slMacGeneralGroup.setStatus('current')
slMacLearningGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 8, 1, 2, 1, 4)).setObjects(("ALCATEL-IND1-MAC-ADDRESS-MIB", "slMacLearningControlStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    slMacLearningGroup = slMacLearningGroup.setStatus('current')
slMacVlanLearningGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 8, 1, 2, 1, 5)).setObjects(("ALCATEL-IND1-MAC-ADDRESS-MIB", "slMacLearningVlanControlStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    slMacVlanLearningGroup = slMacVlanLearningGroup.setStatus('current')
mibBuilder.exportSymbols("ALCATEL-IND1-MAC-ADDRESS-MIB", alcatelIND1MacAddressMIBNotifications=alcatelIND1MacAddressMIBNotifications, slMacAddressGblManagement=slMacAddressGblManagement, slMacAddressGblProtocol=slMacAddressGblProtocol, alcatelIND1MacAddressMIBGroups=alcatelIND1MacAddressMIBGroups, slMacAddressAgingEntry=slMacAddressAgingEntry, slMacGeneralGroup=slMacGeneralGroup, slMacAddressGblDisposition=slMacAddressGblDisposition, slMacAgingGroup=slMacAgingGroup, slSubId=slSubId, slMacLearningVlanControlTable=slMacLearningVlanControlTable, slMacAddressGblGroupField=slMacAddressGblGroupField, slMacAgingRowStatus=slMacAgingRowStatus, slMacLearningVlanControlStatus=slMacLearningVlanControlStatus, slMacAddressGbl=slMacAddressGbl, alcatelIND1MacAddressMIBCompliances=alcatelIND1MacAddressMIBCompliances, alcatelIND1MacAddressMIBObjects=alcatelIND1MacAddressMIBObjects, slMacAgingValue=slMacAgingValue, PYSNMP_MODULE_ID=alcatelIND1MacAddressMIB, alaSlMacAddressGlobalTable=alaSlMacAddressGlobalTable, slMacLearningVlanControlEntry=slMacLearningVlanControlEntry, slMacLearningGroup=slMacLearningGroup, MacAddressProtocolType=MacAddressProtocolType, slDistributedMacMode=slDistributedMacMode, slMacLearningControlTable=slMacLearningControlTable, slMacLearningControlEntry=slMacLearningControlEntry, slMacVlanLearningGroup=slMacVlanLearningGroup, slServiceId=slServiceId, slMacLearningControlStatus=slMacLearningControlStatus, alcatelIND1MacAddressMIB=alcatelIND1MacAddressMIB, slOriginId=slOriginId, slMacAddressAgingTable=slMacAddressAgingTable, alcatelIND1MacAddressMIBCompliance=alcatelIND1MacAddressMIBCompliance, alaSlMacAddressGlobalEntry=alaSlMacAddressGlobalEntry, alcatelIND1MacAddressMIBConformance=alcatelIND1MacAddressMIBConformance, slMacAddressGroup=slMacAddressGroup, slSvcISID=slSvcISID, slMacAddressGblRowStatus=slMacAddressGblRowStatus, slLocaleType=slLocaleType, slMacDomain=slMacDomain)
