#
# PySNMP MIB module BAS-IP-FORWARD-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/BAS-IP-FORWARD-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 17:17:43 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, Integer, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "OctetString", "Integer", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueRangeConstraint, ConstraintsUnion, ConstraintsIntersection, SingleValueConstraint, ValueSizeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueRangeConstraint", "ConstraintsUnion", "ConstraintsIntersection", "SingleValueConstraint", "ValueSizeConstraint")
BasLogicalPortId, BasChassisId, BasInterfaceId, BasSlotId, basAliasCidr = mibBuilder.importSymbols("BAS-MIB", "BasLogicalPortId", "BasChassisId", "BasInterfaceId", "BasSlotId", "basAliasCidr")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
Counter32, TimeTicks, Gauge32, IpAddress, Bits, Integer32, Counter64, NotificationType, Unsigned32, MibIdentifier, iso, ModuleIdentity, ObjectIdentity, MibScalar, MibTable, MibTableRow, MibTableColumn = mibBuilder.importSymbols("SNMPv2-SMI", "Counter32", "TimeTicks", "Gauge32", "IpAddress", "Bits", "Integer32", "Counter64", "NotificationType", "Unsigned32", "MibIdentifier", "iso", "ModuleIdentity", "ObjectIdentity", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn")
DisplayString, RowStatus, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "RowStatus", "TextualConvention")
basIpForward = ModuleIdentity((1, 3, 6, 1, 4, 1, 3493, 2, 7, 5, 1))
if mibBuilder.loadTexts: basIpForward.setLastUpdated('9810071415Z')
if mibBuilder.loadTexts: basIpForward.setOrganization('Broadband Access Systems')
basCidrObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 3493, 2, 7, 5, 2))
basCidrTable = MibTable((1, 3, 6, 1, 4, 1, 3493, 2, 7, 5, 2, 1), )
if mibBuilder.loadTexts: basCidrTable.setStatus('current')
basCidrEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3493, 2, 7, 5, 2, 1, 1), ).setIndexNames((0, "BAS-IP-FORWARD-MIB", "basCidrChassis"), (0, "BAS-IP-FORWARD-MIB", "basCidrSlot"), (0, "BAS-IP-FORWARD-MIB", "basCidrIf"), (0, "BAS-IP-FORWARD-MIB", "basCidrLPort"))
if mibBuilder.loadTexts: basCidrEntry.setStatus('current')
basIpCidrRouteNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 3493, 2, 7, 5, 2, 1, 1, 3), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: basIpCidrRouteNumber.setStatus('current')
basCidrChassis = MibTableColumn((1, 3, 6, 1, 4, 1, 3493, 2, 7, 5, 2, 1, 1, 4), BasChassisId())
if mibBuilder.loadTexts: basCidrChassis.setStatus('current')
basCidrSlot = MibTableColumn((1, 3, 6, 1, 4, 1, 3493, 2, 7, 5, 2, 1, 1, 5), BasSlotId())
if mibBuilder.loadTexts: basCidrSlot.setStatus('current')
basCidrIf = MibTableColumn((1, 3, 6, 1, 4, 1, 3493, 2, 7, 5, 2, 1, 1, 6), BasInterfaceId())
if mibBuilder.loadTexts: basCidrIf.setStatus('current')
basCidrLPort = MibTableColumn((1, 3, 6, 1, 4, 1, 3493, 2, 7, 5, 2, 1, 1, 7), BasLogicalPortId())
if mibBuilder.loadTexts: basCidrLPort.setStatus('current')
basIpCidrRouteTable = MibTable((1, 3, 6, 1, 4, 1, 3493, 2, 7, 5, 2, 4), )
if mibBuilder.loadTexts: basIpCidrRouteTable.setStatus('current')
basIpCidrRouteEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3493, 2, 7, 5, 2, 4, 1), ).setIndexNames((0, "BAS-IP-FORWARD-MIB", "basIpCidrRouteChassis"), (0, "BAS-IP-FORWARD-MIB", "basIpCidrRouteSlot"), (0, "BAS-IP-FORWARD-MIB", "basIpCidrRouteIf"), (0, "BAS-IP-FORWARD-MIB", "basIpCidrRouteLPort"), (0, "BAS-IP-FORWARD-MIB", "basIpCidrRouteDest"), (0, "BAS-IP-FORWARD-MIB", "basIpCidrRouteMask"), (0, "BAS-IP-FORWARD-MIB", "basIpCidrRouteTos"), (0, "BAS-IP-FORWARD-MIB", "basIpCidrRouteNextHop"))
if mibBuilder.loadTexts: basIpCidrRouteEntry.setStatus('current')
basIpCidrRouteDest = MibTableColumn((1, 3, 6, 1, 4, 1, 3493, 2, 7, 5, 2, 4, 1, 1), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: basIpCidrRouteDest.setStatus('current')
basIpCidrRouteMask = MibTableColumn((1, 3, 6, 1, 4, 1, 3493, 2, 7, 5, 2, 4, 1, 2), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: basIpCidrRouteMask.setStatus('current')
basIpCidrRouteTos = MibTableColumn((1, 3, 6, 1, 4, 1, 3493, 2, 7, 5, 2, 4, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: basIpCidrRouteTos.setStatus('current')
basIpCidrRouteNextHop = MibTableColumn((1, 3, 6, 1, 4, 1, 3493, 2, 7, 5, 2, 4, 1, 4), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: basIpCidrRouteNextHop.setStatus('current')
basIpCidrRouteIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3493, 2, 7, 5, 2, 4, 1, 5), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: basIpCidrRouteIfIndex.setStatus('current')
basIpCidrRouteType = MibTableColumn((1, 3, 6, 1, 4, 1, 3493, 2, 7, 5, 2, 4, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("other", 1), ("reject", 2), ("local", 3), ("remote", 4)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: basIpCidrRouteType.setStatus('current')
basIpCidrRouteProto = MibTableColumn((1, 3, 6, 1, 4, 1, 3493, 2, 7, 5, 2, 4, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16))).clone(namedValues=NamedValues(("other", 1), ("local", 2), ("netmgmt", 3), ("icmp", 4), ("egp", 5), ("ggp", 6), ("hello", 7), ("rip", 8), ("isIs", 9), ("esIs", 10), ("ciscoIgrp", 11), ("bbnSpfIgp", 12), ("ospf", 13), ("bgp", 14), ("idpr", 15), ("ciscoEigrp", 16)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: basIpCidrRouteProto.setStatus('current')
basIpCidrRouteAge = MibTableColumn((1, 3, 6, 1, 4, 1, 3493, 2, 7, 5, 2, 4, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: basIpCidrRouteAge.setStatus('current')
basIpCidrRouteInfo = MibTableColumn((1, 3, 6, 1, 4, 1, 3493, 2, 7, 5, 2, 4, 1, 9), ObjectIdentifier()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: basIpCidrRouteInfo.setStatus('current')
basIpCidrRouteNextHopAS = MibTableColumn((1, 3, 6, 1, 4, 1, 3493, 2, 7, 5, 2, 4, 1, 10), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: basIpCidrRouteNextHopAS.setStatus('current')
basIpCidrRouteMetric1 = MibTableColumn((1, 3, 6, 1, 4, 1, 3493, 2, 7, 5, 2, 4, 1, 11), Integer32().clone(-1)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: basIpCidrRouteMetric1.setStatus('current')
basIpCidrRouteMetric2 = MibTableColumn((1, 3, 6, 1, 4, 1, 3493, 2, 7, 5, 2, 4, 1, 12), Integer32().clone(-1)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: basIpCidrRouteMetric2.setStatus('current')
basIpCidrRouteMetric3 = MibTableColumn((1, 3, 6, 1, 4, 1, 3493, 2, 7, 5, 2, 4, 1, 13), Integer32().clone(-1)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: basIpCidrRouteMetric3.setStatus('current')
basIpCidrRouteMetric4 = MibTableColumn((1, 3, 6, 1, 4, 1, 3493, 2, 7, 5, 2, 4, 1, 14), Integer32().clone(-1)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: basIpCidrRouteMetric4.setStatus('current')
basIpCidrRouteMetric5 = MibTableColumn((1, 3, 6, 1, 4, 1, 3493, 2, 7, 5, 2, 4, 1, 15), Integer32().clone(-1)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: basIpCidrRouteMetric5.setStatus('current')
basIpCidrRouteStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3493, 2, 7, 5, 2, 4, 1, 16), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: basIpCidrRouteStatus.setStatus('current')
basIpCidrRouteChassis = MibTableColumn((1, 3, 6, 1, 4, 1, 3493, 2, 7, 5, 2, 4, 1, 17), BasChassisId())
if mibBuilder.loadTexts: basIpCidrRouteChassis.setStatus('current')
basIpCidrRouteSlot = MibTableColumn((1, 3, 6, 1, 4, 1, 3493, 2, 7, 5, 2, 4, 1, 18), BasSlotId())
if mibBuilder.loadTexts: basIpCidrRouteSlot.setStatus('current')
basIpCidrRouteIf = MibTableColumn((1, 3, 6, 1, 4, 1, 3493, 2, 7, 5, 2, 4, 1, 19), BasInterfaceId())
if mibBuilder.loadTexts: basIpCidrRouteIf.setStatus('current')
basIpCidrRouteLPort = MibTableColumn((1, 3, 6, 1, 4, 1, 3493, 2, 7, 5, 2, 4, 1, 20), BasLogicalPortId())
if mibBuilder.loadTexts: basIpCidrRouteLPort.setStatus('current')
mibBuilder.exportSymbols("BAS-IP-FORWARD-MIB", basIpCidrRouteAge=basIpCidrRouteAge, basIpCidrRouteChassis=basIpCidrRouteChassis, basIpCidrRouteTable=basIpCidrRouteTable, basIpForward=basIpForward, basIpCidrRouteMetric3=basIpCidrRouteMetric3, basIpCidrRouteStatus=basIpCidrRouteStatus, basIpCidrRouteNumber=basIpCidrRouteNumber, basIpCidrRouteType=basIpCidrRouteType, basIpCidrRouteNextHop=basIpCidrRouteNextHop, basCidrLPort=basCidrLPort, basIpCidrRouteIf=basIpCidrRouteIf, basIpCidrRouteProto=basIpCidrRouteProto, basIpCidrRouteNextHopAS=basIpCidrRouteNextHopAS, basIpCidrRouteMetric1=basIpCidrRouteMetric1, basCidrEntry=basCidrEntry, basCidrTable=basCidrTable, basIpCidrRouteMetric5=basIpCidrRouteMetric5, basIpCidrRouteIfIndex=basIpCidrRouteIfIndex, PYSNMP_MODULE_ID=basIpForward, basCidrObjects=basCidrObjects, basCidrIf=basCidrIf, basIpCidrRouteTos=basIpCidrRouteTos, basIpCidrRouteMask=basIpCidrRouteMask, basIpCidrRouteDest=basIpCidrRouteDest, basIpCidrRouteInfo=basIpCidrRouteInfo, basIpCidrRouteSlot=basIpCidrRouteSlot, basCidrSlot=basCidrSlot, basIpCidrRouteLPort=basIpCidrRouteLPort, basCidrChassis=basCidrChassis, basIpCidrRouteMetric4=basIpCidrRouteMetric4, basIpCidrRouteMetric2=basIpCidrRouteMetric2, basIpCidrRouteEntry=basIpCidrRouteEntry)
