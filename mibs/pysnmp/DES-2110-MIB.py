#
# PySNMP MIB module DES-2110-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/DES-2110-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 18:24:01 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, ObjectIdentifier, OctetString = mibBuilder.importSymbols("ASN1", "Integer", "ObjectIdentifier", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
SingleValueConstraint, ConstraintsUnion, ValueSizeConstraint, ConstraintsIntersection, ValueRangeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "SingleValueConstraint", "ConstraintsUnion", "ValueSizeConstraint", "ConstraintsIntersection", "ValueRangeConstraint")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
Counter64, Unsigned32, IpAddress, enterprises, MibScalar, MibTable, MibTableRow, MibTableColumn, Counter32, iso, Integer32, Gauge32, TimeTicks, ModuleIdentity, ObjectIdentity, MibIdentifier, Bits, mib_2, NotificationType = mibBuilder.importSymbols("SNMPv2-SMI", "Counter64", "Unsigned32", "IpAddress", "enterprises", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Counter32", "iso", "Integer32", "Gauge32", "TimeTicks", "ModuleIdentity", "ObjectIdentity", "MibIdentifier", "Bits", "mib-2", "NotificationType")
DisplayString, PhysAddress, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "PhysAddress", "TextualConvention")
d_link = MibIdentifier((1, 3, 6, 1, 4, 1, 171)).setLabel("d-link")
dlink_products = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10)).setLabel("dlink-products")
dlink_DES21XXSeriesProd = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 61)).setLabel("dlink-DES21XXSeriesProd")
des_2110 = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 61, 1)).setLabel("des-2110")
class OwnerString(DisplayString):
    pass

class MacAddress(OctetString):
    subtypeSpec = OctetString.subtypeSpec + ValueSizeConstraint(6, 6)
    fixedLength = 6

class PortList(TextualConvention, OctetString):
    status = 'current'
    subtypeSpec = OctetString.subtypeSpec + ValueSizeConstraint(6, 6)
    fixedLength = 6

class RowStatus(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))
    namedValues = NamedValues(("active", 1), ("notInService", 2), ("notReady", 3), ("createAndGo", 4), ("createAndWait", 5), ("destroy", 6))

companyCommGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 61, 1, 1))
companyMiscGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 61, 1, 3))
companySpanGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 61, 1, 4))
companyConfigGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 61, 1, 11))
companyPVlanGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 61, 1, 12))
companyTVlanGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 61, 1, 13))
companyStaticGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 61, 1, 21))
companyIgsGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 61, 1, 22))
companyStormCtrlGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 61, 1, 23))
commSetTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 61, 1, 1, 1), )
if mibBuilder.loadTexts: commSetTable.setStatus('mandatory')
commSetEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 61, 1, 1, 1, 1), ).setIndexNames((0, "DES-2110-MIB", "commSetIndex"))
if mibBuilder.loadTexts: commSetEntry.setStatus('mandatory')
commSetIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 61, 1, 1, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2))).setMaxAccess("readonly")
if mibBuilder.loadTexts: commSetIndex.setStatus('mandatory')
commSetName = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 61, 1, 1, 1, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: commSetName.setStatus('mandatory')
commSetStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 61, 1, 1, 1, 1, 3), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: commSetStatus.setStatus('mandatory')
commGetTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 61, 1, 1, 2), )
if mibBuilder.loadTexts: commGetTable.setStatus('mandatory')
commGetEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 61, 1, 1, 2, 1), ).setIndexNames((0, "DES-2110-MIB", "commGetIndex"))
if mibBuilder.loadTexts: commGetEntry.setStatus('mandatory')
commGetIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 61, 1, 1, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2))).setMaxAccess("readonly")
if mibBuilder.loadTexts: commGetIndex.setStatus('mandatory')
commGetName = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 61, 1, 1, 2, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: commGetName.setStatus('mandatory')
commGetStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 61, 1, 1, 2, 1, 3), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: commGetStatus.setStatus('mandatory')
commTrapTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 61, 1, 1, 3), )
if mibBuilder.loadTexts: commTrapTable.setStatus('mandatory')
commTrapEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 61, 1, 1, 3, 1), ).setIndexNames((0, "DES-2110-MIB", "commTrapIndex"))
if mibBuilder.loadTexts: commTrapEntry.setStatus('mandatory')
commTrapIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 61, 1, 1, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2))).setMaxAccess("readonly")
if mibBuilder.loadTexts: commTrapIndex.setStatus('mandatory')
commTrapName = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 61, 1, 1, 3, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: commTrapName.setStatus('mandatory')
commTrapIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 61, 1, 1, 3, 1, 3), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: commTrapIpAddress.setStatus('mandatory')
commTrapVlanId = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 61, 1, 1, 3, 1, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: commTrapVlanId.setStatus('mandatory')
commTrapSNMPBootup = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 61, 1, 1, 3, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: commTrapSNMPBootup.setStatus('mandatory')
commTrapSNMPTPLinkUpDown = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 61, 1, 1, 3, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: commTrapSNMPTPLinkUpDown.setStatus('mandatory')
commTrapSNMPFiberLinkUpDown = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 61, 1, 1, 3, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: commTrapSNMPFiberLinkUpDown.setStatus('mandatory')
commTrapTrapAbnormalTPRXError = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 61, 1, 1, 3, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: commTrapTrapAbnormalTPRXError.setStatus('mandatory')
commTrapTrapAbnormalTPTXError = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 61, 1, 1, 3, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: commTrapTrapAbnormalTPTXError.setStatus('mandatory')
commTrapTrapAbnormalFiberRXError = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 61, 1, 1, 3, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: commTrapTrapAbnormalFiberRXError.setStatus('mandatory')
commTrapTrapAbnormalFiberTXError = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 61, 1, 1, 3, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: commTrapTrapAbnormalFiberTXError.setStatus('mandatory')
commTrapStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 61, 1, 1, 3, 1, 13), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: commTrapStatus.setStatus('mandatory')
miscReset = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 61, 1, 3, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("reset", 1), ("noop", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: miscReset.setStatus('mandatory')
miscStatisticsReset = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 61, 1, 3, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("reset", 1), ("noop", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: miscStatisticsReset.setStatus('mandatory')
spanOnOff = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 61, 1, 4, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: spanOnOff.setStatus('mandatory')
configVerSwPrimary = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 61, 1, 11, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 31))).setMaxAccess("readonly")
if mibBuilder.loadTexts: configVerSwPrimary.setStatus('mandatory')
configVerHwChipSet = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 61, 1, 11, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 31))).setMaxAccess("readonly")
if mibBuilder.loadTexts: configVerHwChipSet.setStatus('mandatory')
configPortTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 61, 1, 11, 6), )
if mibBuilder.loadTexts: configPortTable.setStatus('mandatory')
configPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 61, 1, 11, 6, 1), ).setIndexNames((0, "DES-2110-MIB", "configPort"))
if mibBuilder.loadTexts: configPortEntry.setStatus('mandatory')
configPort = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 61, 1, 11, 6, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: configPort.setStatus('mandatory')
configPortSpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 61, 1, 11, 6, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("disable", 1), ("auto", 2), ("rate10M-Half", 3), ("rate10M-Full", 4), ("rate100M-Half", 5), ("rate100M-Full", 6)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: configPortSpeed.setStatus('mandatory')
configPortOperStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 61, 1, 11, 6, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("down", 1), ("rate10M-Half", 2), ("rate10M-Full", 3), ("rate100M-Half", 4), ("rate100M-Full", 5), ("rate1G-Half", 6), ("rate1G-Full", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: configPortOperStatus.setStatus('mandatory')
configPortFlowControl = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 61, 1, 11, 6, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: configPortFlowControl.setStatus('mandatory')
configPortFlowControlOper = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 61, 1, 11, 6, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: configPortFlowControlOper.setStatus('mandatory')
configPortPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 61, 1, 11, 6, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("normal", 1), ("high", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: configPortPriority.setStatus('mandatory')
configVLANMode = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 61, 1, 11, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("modePortBased", 1), ("modeTagBased", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: configVLANMode.setStatus('mandatory')
configMirrorTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 61, 1, 11, 8), )
if mibBuilder.loadTexts: configMirrorTable.setStatus('mandatory')
configMirrorEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 61, 1, 11, 8, 1), ).setIndexNames((0, "DES-2110-MIB", "configMirrorId"))
if mibBuilder.loadTexts: configMirrorEntry.setStatus('mandatory')
configMirrorId = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 61, 1, 11, 8, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1))).setMaxAccess("readonly")
if mibBuilder.loadTexts: configMirrorId.setStatus('mandatory')
configMirrorMode = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 61, 1, 11, 8, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("disabled", 0), ("rx", 1), ("tx", 2), ("both", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: configMirrorMode.setStatus('mandatory')
configMirrorMon = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 61, 1, 11, 8, 1, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: configMirrorMon.setStatus('mandatory')
configMirrorSrc = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 61, 1, 11, 8, 1, 4), PortList()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: configMirrorSrc.setStatus('mandatory')
configMirrorStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 61, 1, 11, 8, 1, 5), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: configMirrorStatus.setStatus('mandatory')
configSNMPEnable = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 61, 1, 11, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: configSNMPEnable.setStatus('mandatory')
configIpAssignmentMode = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 61, 1, 11, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("manual", 1), ("dhcp", 2), ("other", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: configIpAssignmentMode.setStatus('mandatory')
configPhysAddress = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 61, 1, 11, 13), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: configPhysAddress.setStatus('mandatory')
configPasswordAdmin = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 61, 1, 11, 15), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("writeonly")
if mibBuilder.loadTexts: configPasswordAdmin.setStatus('mandatory')
configIpAddress = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 61, 1, 11, 16), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: configIpAddress.setStatus('mandatory')
configNetMask = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 61, 1, 11, 17), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: configNetMask.setStatus('mandatory')
configGateway = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 61, 1, 11, 18), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: configGateway.setStatus('mandatory')
configSave = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 61, 1, 11, 19), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("save", 1), ("noop", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: configSave.setStatus('mandatory')
configRestoreDefaults = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 61, 1, 11, 22), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("restore", 1), ("noop", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: configRestoreDefaults.setStatus('mandatory')
pvlanTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 61, 1, 12, 1), )
if mibBuilder.loadTexts: pvlanTable.setStatus('mandatory')
pvlanEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 61, 1, 12, 1, 1), ).setIndexNames((0, "DES-2110-MIB", "pvlanId"))
if mibBuilder.loadTexts: pvlanEntry.setStatus('mandatory')
pvlanId = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 61, 1, 12, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvlanId.setStatus('mandatory')
pvlanName = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 61, 1, 12, 1, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 8))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pvlanName.setStatus('mandatory')
pvlanMember = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 61, 1, 12, 1, 1, 3), PortList()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pvlanMember.setStatus('mandatory')
pvlanStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 61, 1, 12, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 4, 6))).clone(namedValues=NamedValues(("active", 1), ("createAndGo", 4), ("destroy", 6)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pvlanStatus.setStatus('mandatory')
tvlanTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 61, 1, 13, 1), )
if mibBuilder.loadTexts: tvlanTable.setStatus('mandatory')
tvlanEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 61, 1, 13, 1, 1), ).setIndexNames((0, "DES-2110-MIB", "tvlanId"))
if mibBuilder.loadTexts: tvlanEntry.setStatus('mandatory')
tvlanId = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 61, 1, 13, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tvlanId.setStatus('mandatory')
tvlanMember = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 61, 1, 13, 1, 1, 3), PortList()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tvlanMember.setStatus('mandatory')
tvlanUntaggedPorts = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 61, 1, 13, 1, 1, 4), PortList()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tvlanUntaggedPorts.setStatus('mandatory')
tvlanStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 61, 1, 13, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 4, 6))).clone(namedValues=NamedValues(("active", 1), ("createAndGo", 4), ("destroy", 6)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tvlanStatus.setStatus('mandatory')
tvlanPortTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 61, 1, 13, 2), )
if mibBuilder.loadTexts: tvlanPortTable.setStatus('mandatory')
tvlanPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 61, 1, 13, 2, 1), ).setIndexNames((0, "DES-2110-MIB", "tvlanPortPortId"))
if mibBuilder.loadTexts: tvlanPortEntry.setStatus('mandatory')
tvlanPortPortId = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 61, 1, 13, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tvlanPortPortId.setStatus('mandatory')
tvlanPortVlanId = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 61, 1, 13, 2, 1, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tvlanPortVlanId.setStatus('mandatory')
tvlanPortPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 61, 1, 13, 2, 1, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tvlanPortPriority.setStatus('mandatory')
tvlanManagement = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 61, 1, 13, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tvlanManagement.setStatus('mandatory')
staticOnOff = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 61, 1, 21, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: staticOnOff.setStatus('mandatory')
staticAutoLearning = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 61, 1, 21, 2), PortList()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: staticAutoLearning.setStatus('mandatory')
staticTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 61, 1, 21, 3), )
if mibBuilder.loadTexts: staticTable.setStatus('mandatory')
staticEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 61, 1, 21, 3, 1), ).setIndexNames((0, "DES-2110-MIB", "staticId"))
if mibBuilder.loadTexts: staticEntry.setStatus('mandatory')
staticId = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 61, 1, 21, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staticId.setStatus('mandatory')
staticMac = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 61, 1, 21, 3, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 12))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: staticMac.setStatus('mandatory')
staticPort = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 61, 1, 21, 3, 1, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: staticPort.setStatus('mandatory')
staticVlanID = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 61, 1, 21, 3, 1, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: staticVlanID.setStatus('mandatory')
staticStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 61, 1, 21, 3, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 4, 6))).clone(namedValues=NamedValues(("active", 1), ("createAndGo", 4), ("destroy", 6)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: staticStatus.setStatus('mandatory')
igsSystem = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 61, 1, 22, 1))
igsBrg = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 61, 1, 22, 2))
igsStatus = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 61, 1, 22, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone(2)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: igsStatus.setStatus('mandatory')
igsRouterPortPurgeInterval = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 61, 1, 22, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 600)).clone(125)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: igsRouterPortPurgeInterval.setStatus('mandatory')
igsHostPortPurgeInterval = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 61, 1, 22, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1225)).clone(260)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: igsHostPortPurgeInterval.setStatus('mandatory')
igsBrgRouterPortList = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 61, 1, 22, 2, 1), PortList()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: igsBrgRouterPortList.setStatus('mandatory')
igsBrgMcastFwdTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 61, 1, 22, 2, 2), )
if mibBuilder.loadTexts: igsBrgMcastFwdTable.setStatus('mandatory')
igsBrgMcastFwdEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 61, 1, 22, 2, 2, 1), ).setIndexNames((0, "DES-2110-MIB", "igsBrgMcastFwdGroupAddress"))
if mibBuilder.loadTexts: igsBrgMcastFwdEntry.setStatus('mandatory')
igsBrgMcastFwdGroupAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 61, 1, 22, 2, 2, 1, 1), MacAddress())
if mibBuilder.loadTexts: igsBrgMcastFwdGroupAddress.setStatus('mandatory')
igsBrgMcastFwdPortListMac = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 61, 1, 22, 2, 2, 1, 2), PortList()).setMaxAccess("readonly")
if mibBuilder.loadTexts: igsBrgMcastFwdPortListMac.setStatus('mandatory')
stormctrlOnOff = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 61, 1, 23, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: stormctrlOnOff.setStatus('mandatory')
stormctrlStatus = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 61, 1, 23, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("locked", 1), ("unlock", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: stormctrlStatus.setStatus('mandatory')
swFiberInsert = NotificationType((1, 3, 6, 1, 4, 1, 171, 10, 61, 1) + (0,1))
swFiberRemove = NotificationType((1, 3, 6, 1, 4, 1, 171, 10, 61, 1) + (0,2))
swFiberAbnormalRXError = NotificationType((1, 3, 6, 1, 4, 1, 171, 10, 61, 1) + (0,3))
swFiberAbnormalTXError = NotificationType((1, 3, 6, 1, 4, 1, 171, 10, 61, 1) + (0,4))
swTPAbnormalRXError = NotificationType((1, 3, 6, 1, 4, 1, 171, 10, 61, 1) + (0,5))
swTPAbnormalTXError = NotificationType((1, 3, 6, 1, 4, 1, 171, 10, 61, 1) + (0,6))
mibBuilder.exportSymbols("DES-2110-MIB", tvlanPortEntry=tvlanPortEntry, configMirrorSrc=configMirrorSrc, tvlanManagement=tvlanManagement, companyPVlanGroup=companyPVlanGroup, commSetIndex=commSetIndex, d_link=d_link, configPortFlowControlOper=configPortFlowControlOper, configMirrorMode=configMirrorMode, commTrapTable=commTrapTable, tvlanPortPriority=tvlanPortPriority, des_2110=des_2110, configIpAssignmentMode=configIpAssignmentMode, igsSystem=igsSystem, commTrapSNMPBootup=commTrapSNMPBootup, igsStatus=igsStatus, PortList=PortList, tvlanMember=tvlanMember, igsRouterPortPurgeInterval=igsRouterPortPurgeInterval, igsBrgMcastFwdTable=igsBrgMcastFwdTable, configVLANMode=configVLANMode, OwnerString=OwnerString, configPortSpeed=configPortSpeed, igsBrg=igsBrg, companyMiscGroup=companyMiscGroup, commTrapEntry=commTrapEntry, configVerHwChipSet=configVerHwChipSet, commGetName=commGetName, configIpAddress=configIpAddress, commTrapTrapAbnormalFiberTXError=commTrapTrapAbnormalFiberTXError, pvlanName=pvlanName, staticId=staticId, companyTVlanGroup=companyTVlanGroup, tvlanEntry=tvlanEntry, companyIgsGroup=companyIgsGroup, commTrapStatus=commTrapStatus, tvlanStatus=tvlanStatus, commTrapIpAddress=commTrapIpAddress, tvlanId=tvlanId, igsBrgMcastFwdEntry=igsBrgMcastFwdEntry, configPhysAddress=configPhysAddress, configSave=configSave, RowStatus=RowStatus, commTrapName=commTrapName, commSetName=commSetName, stormctrlOnOff=stormctrlOnOff, commTrapSNMPFiberLinkUpDown=commTrapSNMPFiberLinkUpDown, spanOnOff=spanOnOff, configMirrorStatus=configMirrorStatus, stormctrlStatus=stormctrlStatus, staticPort=staticPort, configPort=configPort, miscStatisticsReset=miscStatisticsReset, companyConfigGroup=companyConfigGroup, configMirrorEntry=configMirrorEntry, dlink_products=dlink_products, configVerSwPrimary=configVerSwPrimary, configRestoreDefaults=configRestoreDefaults, configMirrorId=configMirrorId, staticVlanID=staticVlanID, configPortOperStatus=configPortOperStatus, configPortEntry=configPortEntry, swTPAbnormalTXError=swTPAbnormalTXError, configPasswordAdmin=configPasswordAdmin, tvlanUntaggedPorts=tvlanUntaggedPorts, companyCommGroup=companyCommGroup, commGetTable=commGetTable, MacAddress=MacAddress, configPortFlowControl=configPortFlowControl, pvlanEntry=pvlanEntry, commTrapIndex=commTrapIndex, tvlanTable=tvlanTable, commTrapTrapAbnormalTPRXError=commTrapTrapAbnormalTPRXError, companyStormCtrlGroup=companyStormCtrlGroup, companySpanGroup=companySpanGroup, companyStaticGroup=companyStaticGroup, pvlanTable=pvlanTable, pvlanMember=pvlanMember, igsBrgMcastFwdGroupAddress=igsBrgMcastFwdGroupAddress, swTPAbnormalRXError=swTPAbnormalRXError, staticEntry=staticEntry, commSetEntry=commSetEntry, commTrapVlanId=commTrapVlanId, tvlanPortVlanId=tvlanPortVlanId, configMirrorMon=configMirrorMon, configPortTable=configPortTable, pvlanId=pvlanId, igsBrgMcastFwdPortListMac=igsBrgMcastFwdPortListMac, dlink_DES21XXSeriesProd=dlink_DES21XXSeriesProd, igsHostPortPurgeInterval=igsHostPortPurgeInterval, pvlanStatus=pvlanStatus, swFiberAbnormalRXError=swFiberAbnormalRXError, miscReset=miscReset, commSetStatus=commSetStatus, staticStatus=staticStatus, tvlanPortPortId=tvlanPortPortId, swFiberRemove=swFiberRemove, commGetIndex=commGetIndex, configMirrorTable=configMirrorTable, swFiberInsert=swFiberInsert, commTrapTrapAbnormalFiberRXError=commTrapTrapAbnormalFiberRXError, staticMac=staticMac, commGetStatus=commGetStatus, commTrapSNMPTPLinkUpDown=commTrapSNMPTPLinkUpDown, configNetMask=configNetMask, staticTable=staticTable, commSetTable=commSetTable, configSNMPEnable=configSNMPEnable, configPortPriority=configPortPriority, tvlanPortTable=tvlanPortTable, staticOnOff=staticOnOff, commGetEntry=commGetEntry, igsBrgRouterPortList=igsBrgRouterPortList, commTrapTrapAbnormalTPTXError=commTrapTrapAbnormalTPTXError, swFiberAbnormalTXError=swFiberAbnormalTXError, configGateway=configGateway, staticAutoLearning=staticAutoLearning)
