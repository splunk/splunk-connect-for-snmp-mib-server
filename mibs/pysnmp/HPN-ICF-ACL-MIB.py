#
# PySNMP MIB module HPN-ICF-ACL-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/HPN-ICF-ACL-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 19:25:03 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, ObjectIdentifier, Integer = mibBuilder.importSymbols("ASN1", "OctetString", "ObjectIdentifier", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsUnion, ValueRangeConstraint, SingleValueConstraint, ValueSizeConstraint, ConstraintsIntersection = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsUnion", "ValueRangeConstraint", "SingleValueConstraint", "ValueSizeConstraint", "ConstraintsIntersection")
hpnicfCommon, = mibBuilder.importSymbols("HPN-ICF-OID-MIB", "hpnicfCommon")
InetAddress, InetAddressPrefixLength, InetAddressType = mibBuilder.importSymbols("INET-ADDRESS-MIB", "InetAddress", "InetAddressPrefixLength", "InetAddressType")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
Counter64, iso, Bits, ObjectIdentity, Integer32, IpAddress, Counter32, MibScalar, MibTable, MibTableRow, MibTableColumn, NotificationType, MibIdentifier, Gauge32, Unsigned32, TimeTicks, ModuleIdentity = mibBuilder.importSymbols("SNMPv2-SMI", "Counter64", "iso", "Bits", "ObjectIdentity", "Integer32", "IpAddress", "Counter32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "NotificationType", "MibIdentifier", "Gauge32", "Unsigned32", "TimeTicks", "ModuleIdentity")
TruthValue, TextualConvention, RowStatus, DisplayString, MacAddress = mibBuilder.importSymbols("SNMPv2-TC", "TruthValue", "TextualConvention", "RowStatus", "DisplayString", "MacAddress")
hpnicfAcl = ModuleIdentity((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 8))
if mibBuilder.loadTexts: hpnicfAcl.setLastUpdated('200409211936Z')
if mibBuilder.loadTexts: hpnicfAcl.setOrganization('')
class RuleAction(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3))
    namedValues = NamedValues(("invalid", 1), ("permit", 2), ("deny", 3))

class CounterClear(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2))
    namedValues = NamedValues(("cleared", 1), ("nouse", 2))

class PortOp(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5))
    namedValues = NamedValues(("invalid", 0), ("lt", 1), ("eq", 2), ("gt", 3), ("neq", 4), ("range", 5))

class DSCPValue(TextualConvention, Integer32):
    status = 'current'
    displayHint = 'd'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(ValueRangeConstraint(0, 63), ValueRangeConstraint(255, 255), )
class TCPFlag(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6))
    namedValues = NamedValues(("invalid", 0), ("tcpack", 1), ("tcpfin", 2), ("tcppsh", 3), ("tcprst", 4), ("tcpsyn", 5), ("tcpurg", 6))

class FragmentFlag(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4))
    namedValues = NamedValues(("invalid", 0), ("fragment", 1), ("fragmentSubseq", 2), ("nonFragment", 3), ("nonSubseq", 4))

class AddressFlag(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6))
    namedValues = NamedValues(("invalid", 0), ("t64SrcAddrPre64DestAddrPre", 1), ("t64SrcAddrPre64DestAddrSuf", 2), ("t64SrcAddrSuf64DestAddrPre", 3), ("t64SrcAddrSuf64DestAddrSuf", 4), ("t128SourceAddress", 5), ("t128DestinationAddress", 6))

class DirectionType(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2))
    namedValues = NamedValues(("inbound", 1), ("outbound", 2))

hpnicfAclMibObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 8, 1))
hpnicfAclMode = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 8, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("linkBased", 1), ("ipBased", 2))).clone('ipBased')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpnicfAclMode.setStatus('current')
hpnicfAclNumGroupTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 8, 1, 2), )
if mibBuilder.loadTexts: hpnicfAclNumGroupTable.setStatus('current')
hpnicfAclNumGroupEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 8, 1, 2, 1), ).setIndexNames((0, "HPN-ICF-ACL-MIB", "hpnicfAclNumGroupAclNum"))
if mibBuilder.loadTexts: hpnicfAclNumGroupEntry.setStatus('current')
hpnicfAclNumGroupAclNum = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 8, 1, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1000, 5999)))
if mibBuilder.loadTexts: hpnicfAclNumGroupAclNum.setStatus('current')
hpnicfAclNumGroupMatchOrder = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 8, 1, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("config", 1), ("auto", 2))).clone('config')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfAclNumGroupMatchOrder.setStatus('current')
hpnicfAclNumGroupSubitemNum = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 8, 1, 2, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfAclNumGroupSubitemNum.setStatus('current')
hpnicfAclNumGroupDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 8, 1, 2, 1, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 127))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpnicfAclNumGroupDescription.setStatus('current')
hpnicfAclNumGroupCountClear = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 8, 1, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("cleared", 1), ("nouse", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfAclNumGroupCountClear.setStatus('current')
hpnicfAclNumGroupRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 8, 1, 2, 1, 6), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfAclNumGroupRowStatus.setStatus('current')
hpnicfAclNameGroupTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 8, 1, 3), )
if mibBuilder.loadTexts: hpnicfAclNameGroupTable.setStatus('current')
hpnicfAclNameGroupEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 8, 1, 3, 1), ).setIndexNames((0, "HPN-ICF-ACL-MIB", "hpnicfAclNameGroupIndex"))
if mibBuilder.loadTexts: hpnicfAclNameGroupEntry.setStatus('current')
hpnicfAclNameGroupIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 8, 1, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(10000, 12999)))
if mibBuilder.loadTexts: hpnicfAclNameGroupIndex.setStatus('current')
hpnicfAclNameGroupCreateName = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 8, 1, 3, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfAclNameGroupCreateName.setStatus('current')
hpnicfAclNameGroupTypes = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 8, 1, 3, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("basic", 1), ("advanced", 2), ("ifBased", 3), ("link", 4), ("user", 5)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfAclNameGroupTypes.setStatus('current')
hpnicfAclNameGroupMatchOrder = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 8, 1, 3, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("config", 1), ("auto", 2))).clone('config')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfAclNameGroupMatchOrder.setStatus('current')
hpnicfAclNameGroupSubitemNum = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 8, 1, 3, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 128))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfAclNameGroupSubitemNum.setStatus('current')
hpnicfAclNameGroupRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 8, 1, 3, 1, 6), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfAclNameGroupRowStatus.setStatus('current')
hpnicfAclBasicRuleTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 8, 1, 4), )
if mibBuilder.loadTexts: hpnicfAclBasicRuleTable.setStatus('current')
hpnicfAclBasicRuleEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 8, 1, 4, 1), ).setIndexNames((0, "HPN-ICF-ACL-MIB", "hpnicfAclBasicAclNum"), (0, "HPN-ICF-ACL-MIB", "hpnicfAclBasicSubitem"))
if mibBuilder.loadTexts: hpnicfAclBasicRuleEntry.setStatus('current')
hpnicfAclBasicAclNum = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 8, 1, 4, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(2000, 2999), ValueRangeConstraint(10000, 12999), )))
if mibBuilder.loadTexts: hpnicfAclBasicAclNum.setStatus('current')
hpnicfAclBasicSubitem = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 8, 1, 4, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535)))
if mibBuilder.loadTexts: hpnicfAclBasicSubitem.setStatus('current')
hpnicfAclBasicAct = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 8, 1, 4, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("permit", 1), ("deny", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfAclBasicAct.setStatus('current')
hpnicfAclBasicSrcIp = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 8, 1, 4, 1, 4), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfAclBasicSrcIp.setStatus('current')
hpnicfAclBasicSrcWild = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 8, 1, 4, 1, 5), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfAclBasicSrcWild.setStatus('current')
hpnicfAclBasicTimeRangeName = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 8, 1, 4, 1, 6), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfAclBasicTimeRangeName.setStatus('current')
hpnicfAclBasicFragments = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 8, 1, 4, 1, 7), TruthValue()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfAclBasicFragments.setStatus('current')
hpnicfAclBasicLog = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 8, 1, 4, 1, 8), TruthValue()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfAclBasicLog.setStatus('current')
hpnicfAclBasicEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 8, 1, 4, 1, 9), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfAclBasicEnable.setStatus('current')
hpnicfAclBasicCount = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 8, 1, 4, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfAclBasicCount.setStatus('current')
hpnicfAclBasicCountClear = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 8, 1, 4, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("cleared", 1), ("nouse", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfAclBasicCountClear.setStatus('current')
hpnicfAclBasicRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 8, 1, 4, 1, 12), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfAclBasicRowStatus.setStatus('current')
hpnicfAclAdvancedRuleTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 8, 1, 5), )
if mibBuilder.loadTexts: hpnicfAclAdvancedRuleTable.setStatus('current')
hpnicfAclAdvancedRuleEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 8, 1, 5, 1), ).setIndexNames((0, "HPN-ICF-ACL-MIB", "hpnicfAclAdvancedAclNum"), (0, "HPN-ICF-ACL-MIB", "hpnicfAclAdvancedSubitem"))
if mibBuilder.loadTexts: hpnicfAclAdvancedRuleEntry.setStatus('current')
hpnicfAclAdvancedAclNum = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 8, 1, 5, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(3000, 3999), ValueRangeConstraint(10000, 12999), )))
if mibBuilder.loadTexts: hpnicfAclAdvancedAclNum.setStatus('current')
hpnicfAclAdvancedSubitem = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 8, 1, 5, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535)))
if mibBuilder.loadTexts: hpnicfAclAdvancedSubitem.setStatus('current')
hpnicfAclAdvancedAct = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 8, 1, 5, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("permit", 1), ("deny", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfAclAdvancedAct.setStatus('current')
hpnicfAclAdvancedProtocol = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 8, 1, 5, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfAclAdvancedProtocol.setStatus('current')
hpnicfAclAdvancedSrcIp = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 8, 1, 5, 1, 5), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfAclAdvancedSrcIp.setStatus('current')
hpnicfAclAdvancedSrcWild = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 8, 1, 5, 1, 6), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfAclAdvancedSrcWild.setStatus('current')
hpnicfAclAdvancedSrcOp = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 8, 1, 5, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("invalid", 0), ("lt", 1), ("eq", 2), ("gt", 3), ("neq", 4), ("range", 5)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfAclAdvancedSrcOp.setStatus('current')
hpnicfAclAdvancedSrcPort1 = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 8, 1, 5, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfAclAdvancedSrcPort1.setStatus('current')
hpnicfAclAdvancedSrcPort2 = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 8, 1, 5, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfAclAdvancedSrcPort2.setStatus('current')
hpnicfAclAdvancedDestIp = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 8, 1, 5, 1, 10), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfAclAdvancedDestIp.setStatus('current')
hpnicfAclAdvancedDestWild = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 8, 1, 5, 1, 11), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfAclAdvancedDestWild.setStatus('current')
hpnicfAclAdvancedDestOp = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 8, 1, 5, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("invalid", 0), ("lt", 1), ("eq", 2), ("gt", 3), ("neq", 4), ("range", 5)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfAclAdvancedDestOp.setStatus('current')
hpnicfAclAdvancedDestPort1 = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 8, 1, 5, 1, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfAclAdvancedDestPort1.setStatus('current')
hpnicfAclAdvancedDestPort2 = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 8, 1, 5, 1, 14), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfAclAdvancedDestPort2.setStatus('current')
hpnicfAclAdvancedPrecedence = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 8, 1, 5, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 7), ValueRangeConstraint(255, 255), ))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfAclAdvancedPrecedence.setStatus('current')
hpnicfAclAdvancedTos = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 8, 1, 5, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 15), ValueRangeConstraint(255, 255), ))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfAclAdvancedTos.setStatus('current')
hpnicfAclAdvancedDscp = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 8, 1, 5, 1, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 63), ValueRangeConstraint(255, 255), ))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfAclAdvancedDscp.setStatus('current')
hpnicfAclAdvancedEstablish = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 8, 1, 5, 1, 18), TruthValue().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfAclAdvancedEstablish.setStatus('current')
hpnicfAclAdvancedTimeRangeName = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 8, 1, 5, 1, 19), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfAclAdvancedTimeRangeName.setStatus('current')
hpnicfAclAdvancedIcmpType = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 8, 1, 5, 1, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 255), ValueRangeConstraint(65535, 65535), ))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfAclAdvancedIcmpType.setStatus('current')
hpnicfAclAdvancedIcmpCode = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 8, 1, 5, 1, 21), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 255), ValueRangeConstraint(65535, 65535), ))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfAclAdvancedIcmpCode.setStatus('current')
hpnicfAclAdvancedFragments = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 8, 1, 5, 1, 22), TruthValue()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfAclAdvancedFragments.setStatus('current')
hpnicfAclAdvancedLog = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 8, 1, 5, 1, 23), TruthValue()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfAclAdvancedLog.setStatus('current')
hpnicfAclAdvancedEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 8, 1, 5, 1, 24), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfAclAdvancedEnable.setStatus('current')
hpnicfAclAdvancedCount = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 8, 1, 5, 1, 25), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfAclAdvancedCount.setStatus('current')
hpnicfAclAdvancedCountClear = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 8, 1, 5, 1, 26), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("cleared", 1), ("nouse", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfAclAdvancedCountClear.setStatus('current')
hpnicfAclAdvancedRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 8, 1, 5, 1, 27), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfAclAdvancedRowStatus.setStatus('current')
hpnicfAclIfRuleTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 8, 1, 6), )
if mibBuilder.loadTexts: hpnicfAclIfRuleTable.setStatus('current')
hpnicfAclIfRuleEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 8, 1, 6, 1), ).setIndexNames((0, "HPN-ICF-ACL-MIB", "hpnicfAclIfAclNum"), (0, "HPN-ICF-ACL-MIB", "hpnicfAclIfSubitem"))
if mibBuilder.loadTexts: hpnicfAclIfRuleEntry.setStatus('current')
hpnicfAclIfAclNum = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 8, 1, 6, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(1000, 1999), ValueRangeConstraint(10000, 12999), )))
if mibBuilder.loadTexts: hpnicfAclIfAclNum.setStatus('current')
hpnicfAclIfSubitem = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 8, 1, 6, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535)))
if mibBuilder.loadTexts: hpnicfAclIfSubitem.setStatus('current')
hpnicfAclIfAct = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 8, 1, 6, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("permit", 1), ("deny", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfAclIfAct.setStatus('current')
hpnicfAclIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 8, 1, 6, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfAclIfIndex.setStatus('current')
hpnicfAclIfAny = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 8, 1, 6, 1, 5), TruthValue()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfAclIfAny.setStatus('current')
hpnicfAclIfTimeRangeName = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 8, 1, 6, 1, 6), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfAclIfTimeRangeName.setStatus('current')
hpnicfAclIfLog = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 8, 1, 6, 1, 7), TruthValue()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfAclIfLog.setStatus('current')
hpnicfAclIfEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 8, 1, 6, 1, 8), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfAclIfEnable.setStatus('current')
hpnicfAclIfCount = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 8, 1, 6, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfAclIfCount.setStatus('current')
hpnicfAclIfCountClear = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 8, 1, 6, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("cleared", 1), ("nouse", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfAclIfCountClear.setStatus('current')
hpnicfAclIfRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 8, 1, 6, 1, 11), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfAclIfRowStatus.setStatus('current')
hpnicfAclLinkTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 8, 1, 7), )
if mibBuilder.loadTexts: hpnicfAclLinkTable.setStatus('current')
hpnicfAclLinkEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 8, 1, 7, 1), ).setIndexNames((0, "HPN-ICF-ACL-MIB", "hpnicfAclLinkAclNum"), (0, "HPN-ICF-ACL-MIB", "hpnicfAclLinkSubitem"))
if mibBuilder.loadTexts: hpnicfAclLinkEntry.setStatus('current')
hpnicfAclLinkAclNum = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 8, 1, 7, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(4000, 4999), ValueRangeConstraint(10000, 12999), )))
if mibBuilder.loadTexts: hpnicfAclLinkAclNum.setStatus('current')
hpnicfAclLinkSubitem = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 8, 1, 7, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535)))
if mibBuilder.loadTexts: hpnicfAclLinkSubitem.setStatus('current')
hpnicfAclLinkAct = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 8, 1, 7, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("permit", 1), ("deny", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfAclLinkAct.setStatus('current')
hpnicfAclLinkProtocol = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 8, 1, 7, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 2048, 2054, 32821, 34915, 34916, 34887))).clone(namedValues=NamedValues(("invalid", 0), ("ip", 2048), ("arp", 2054), ("rarp", 32821), ("pppoeControl", 34915), ("pppoeData", 34916), ("mpls", 34887))).clone('invalid')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfAclLinkProtocol.setStatus('current')
hpnicfAclLinkFormatType = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 8, 1, 7, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4))).clone(namedValues=NamedValues(("invalid", 0), ("ethernetII", 1), ("snap", 2), ("ieee802Dot3And2", 3), ("ieee802Dot3", 4)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfAclLinkFormatType.setStatus('current')
hpnicfAclLinkVlanTag = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 8, 1, 7, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("invalid", 0), ("tagged", 1), ("untagged", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfAclLinkVlanTag.setStatus('current')
hpnicfAclLinkVlanPri = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 8, 1, 7, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 7), ValueRangeConstraint(255, 255), ))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfAclLinkVlanPri.setStatus('current')
hpnicfAclLinkSrcVlanId = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 8, 1, 7, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4094))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfAclLinkSrcVlanId.setStatus('current')
hpnicfAclLinkSrcMac = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 8, 1, 7, 1, 9), MacAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfAclLinkSrcMac.setStatus('current')
hpnicfAclLinkSrcMacWild = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 8, 1, 7, 1, 10), MacAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfAclLinkSrcMacWild.setStatus('current')
hpnicfAclLinkSrcIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 8, 1, 7, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfAclLinkSrcIfIndex.setStatus('current')
hpnicfAclLinkSrcAny = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 8, 1, 7, 1, 12), TruthValue()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfAclLinkSrcAny.setStatus('current')
hpnicfAclLinkDestVlanId = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 8, 1, 7, 1, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4094))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfAclLinkDestVlanId.setStatus('current')
hpnicfAclLinkDestMac = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 8, 1, 7, 1, 14), MacAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfAclLinkDestMac.setStatus('current')
hpnicfAclLinkDestMacWild = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 8, 1, 7, 1, 15), MacAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfAclLinkDestMacWild.setStatus('current')
hpnicfAclLinkDestIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 8, 1, 7, 1, 16), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfAclLinkDestIfIndex.setStatus('current')
hpnicfAclLinkDestAny = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 8, 1, 7, 1, 17), TruthValue()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfAclLinkDestAny.setStatus('current')
hpnicfAclLinkTimeRangeName = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 8, 1, 7, 1, 18), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfAclLinkTimeRangeName.setStatus('current')
hpnicfAclLinkEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 8, 1, 7, 1, 19), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfAclLinkEnable.setStatus('current')
hpnicfAclLinkRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 8, 1, 7, 1, 20), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfAclLinkRowStatus.setStatus('current')
hpnicfAclLinkTypeCode = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 8, 1, 7, 1, 21), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfAclLinkTypeCode.setStatus('current')
hpnicfAclLinkTypeMask = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 8, 1, 7, 1, 22), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfAclLinkTypeMask.setStatus('current')
hpnicfAclLinkLsapCode = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 8, 1, 7, 1, 23), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfAclLinkLsapCode.setStatus('current')
hpnicfAclLinkLsapMask = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 8, 1, 7, 1, 24), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfAclLinkLsapMask.setStatus('current')
hpnicfAclLinkL2LabelRangeOp = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 8, 1, 7, 1, 25), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("invalid", 0), ("lt", 1), ("eq", 2), ("gt", 3), ("neq", 4), ("range", 5)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfAclLinkL2LabelRangeOp.setStatus('current')
hpnicfAclLinkL2LabelRangeBegin = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 8, 1, 7, 1, 26), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfAclLinkL2LabelRangeBegin.setStatus('current')
hpnicfAclLinkL2LabelRangeEnd = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 8, 1, 7, 1, 27), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfAclLinkL2LabelRangeEnd.setStatus('current')
hpnicfAclLinkMplsExp = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 8, 1, 7, 1, 28), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfAclLinkMplsExp.setStatus('current')
hpnicfAclUserTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 8, 1, 8), )
if mibBuilder.loadTexts: hpnicfAclUserTable.setStatus('current')
hpnicfAclUserEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 8, 1, 8, 1), ).setIndexNames((0, "HPN-ICF-ACL-MIB", "hpnicfAclUserAclNum"), (0, "HPN-ICF-ACL-MIB", "hpnicfAclUserSubitem"))
if mibBuilder.loadTexts: hpnicfAclUserEntry.setStatus('current')
hpnicfAclUserAclNum = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 8, 1, 8, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(5000, 5999), ValueRangeConstraint(10000, 12999), )))
if mibBuilder.loadTexts: hpnicfAclUserAclNum.setStatus('current')
hpnicfAclUserSubitem = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 8, 1, 8, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535)))
if mibBuilder.loadTexts: hpnicfAclUserSubitem.setStatus('current')
hpnicfAclUserAct = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 8, 1, 8, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("permit", 1), ("deny", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfAclUserAct.setStatus('current')
hpnicfAclUserFormatType = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 8, 1, 8, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4))).clone(namedValues=NamedValues(("invalid", 0), ("ethernetII", 1), ("snap", 2), ("ieee802Dot2And3", 3), ("ieee802Dot4", 4))).clone('invalid')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfAclUserFormatType.setStatus('current')
hpnicfAclUserVlanTag = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 8, 1, 8, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 0))).clone(namedValues=NamedValues(("tagged", 1), ("untagged", 2), ("invalid", 0))).clone('invalid')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfAclUserVlanTag.setStatus('current')
hpnicfAclUserRuleStr = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 8, 1, 8, 1, 6), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 80))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfAclUserRuleStr.setStatus('current')
hpnicfAclUserRuleMask = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 8, 1, 8, 1, 7), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 80))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfAclUserRuleMask.setStatus('current')
hpnicfAclUserTimeRangeName = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 8, 1, 8, 1, 8), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfAclUserTimeRangeName.setStatus('current')
hpnicfAclUserEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 8, 1, 8, 1, 9), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfAclUserEnable.setStatus('current')
hpnicfAclUserRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 8, 1, 8, 1, 10), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfAclUserRowStatus.setStatus('current')
hpnicfAclActiveTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 8, 1, 9), )
if mibBuilder.loadTexts: hpnicfAclActiveTable.setStatus('current')
hpnicfAclActiveEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 8, 1, 9, 1), ).setIndexNames((0, "HPN-ICF-ACL-MIB", "hpnicfAclActiveAclIndex"), (0, "HPN-ICF-ACL-MIB", "hpnicfAclActiveIfIndex"), (0, "HPN-ICF-ACL-MIB", "hpnicfAclActiveVlanID"), (0, "HPN-ICF-ACL-MIB", "hpnicfAclActiveDirection"))
if mibBuilder.loadTexts: hpnicfAclActiveEntry.setStatus('current')
hpnicfAclActiveAclIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 8, 1, 9, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(1, 5999), ValueRangeConstraint(10000, 12999), )))
if mibBuilder.loadTexts: hpnicfAclActiveAclIndex.setStatus('current')
hpnicfAclActiveIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 8, 1, 9, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647)))
if mibBuilder.loadTexts: hpnicfAclActiveIfIndex.setStatus('current')
hpnicfAclActiveVlanID = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 8, 1, 9, 1, 3), Integer32())
if mibBuilder.loadTexts: hpnicfAclActiveVlanID.setStatus('current')
hpnicfAclActiveDirection = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 8, 1, 9, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 0))).clone(namedValues=NamedValues(("input", 1), ("output", 2), ("both", 3), ("invalid", 0))))
if mibBuilder.loadTexts: hpnicfAclActiveDirection.setStatus('current')
hpnicfAclActiveUserAclNum = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 8, 1, 9, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(5000, 5999), ValueRangeConstraint(10000, 12999), ))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfAclActiveUserAclNum.setStatus('current')
hpnicfAclActiveUserAclSubitem = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 8, 1, 9, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfAclActiveUserAclSubitem.setStatus('current')
hpnicfAclActiveIpAclNum = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 8, 1, 9, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(2000, 3999), ValueRangeConstraint(10000, 12999), ))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfAclActiveIpAclNum.setStatus('current')
hpnicfAclActiveIpAclSubitem = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 8, 1, 9, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfAclActiveIpAclSubitem.setStatus('current')
hpnicfAclActiveLinkAclNum = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 8, 1, 9, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(4000, 4999), ValueRangeConstraint(10000, 12999), ))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfAclActiveLinkAclNum.setStatus('current')
hpnicfAclActiveLinkAclSubitem = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 8, 1, 9, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfAclActiveLinkAclSubitem.setStatus('current')
hpnicfAclActiveRuntime = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 8, 1, 9, 1, 11), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfAclActiveRuntime.setStatus('current')
hpnicfAclActiveRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 8, 1, 9, 1, 12), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfAclActiveRowStatus.setStatus('current')
hpnicfAclIDSTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 8, 1, 10), )
if mibBuilder.loadTexts: hpnicfAclIDSTable.setStatus('current')
hpnicfAclIDSEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 8, 1, 10, 1), ).setIndexNames((1, "HPN-ICF-ACL-MIB", "hpnicfAclIDSName"))
if mibBuilder.loadTexts: hpnicfAclIDSEntry.setStatus('current')
hpnicfAclIDSName = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 8, 1, 10, 1, 1), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 32)))
if mibBuilder.loadTexts: hpnicfAclIDSName.setStatus('current')
hpnicfAclIDSSrcMac = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 8, 1, 10, 1, 2), MacAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfAclIDSSrcMac.setStatus('current')
hpnicfAclIDSDestMac = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 8, 1, 10, 1, 3), MacAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfAclIDSDestMac.setStatus('current')
hpnicfAclIDSSrcIp = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 8, 1, 10, 1, 4), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfAclIDSSrcIp.setStatus('current')
hpnicfAclIDSSrcWild = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 8, 1, 10, 1, 5), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfAclIDSSrcWild.setStatus('current')
hpnicfAclIDSDestIp = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 8, 1, 10, 1, 6), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfAclIDSDestIp.setStatus('current')
hpnicfAclIDSDestWild = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 8, 1, 10, 1, 7), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfAclIDSDestWild.setStatus('current')
hpnicfAclIDSSrcPort = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 8, 1, 10, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfAclIDSSrcPort.setStatus('current')
hpnicfAclIDSDestPort = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 8, 1, 10, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfAclIDSDestPort.setStatus('current')
hpnicfAclIDSProtocol = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 8, 1, 10, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfAclIDSProtocol.setStatus('current')
hpnicfAclIDSDenyTime = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 8, 1, 10, 1, 11), Unsigned32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfAclIDSDenyTime.setStatus('current')
hpnicfAclIDSAct = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 8, 1, 10, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("permit", 1), ("deny", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfAclIDSAct.setStatus('current')
hpnicfAclIDSRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 8, 1, 10, 1, 13), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfAclIDSRowStatus.setStatus('current')
hpnicfAclMib2Objects = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 8, 2))
hpnicfAclMib2GlobalGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 8, 2, 1))
hpnicfAclMib2NodesGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 8, 2, 1, 1))
hpnicfAclMib2Mode = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 8, 2, 1, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("linkBased", 1), ("ipBased", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpnicfAclMib2Mode.setStatus('current')
hpnicfAclMib2Version = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 8, 2, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfAclMib2Version.setStatus('current')
hpnicfAclMib2ObjectsCapabilities = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 8, 2, 1, 1, 3), Bits().clone(namedValues=NamedValues(("hpnicfAclMib2Mode", 0), ("hpnicfAclVersion", 1), ("hpnicfAclMib2ObjectsCapabilities", 2), ("hpnicfAclMib2CapabilityTable", 3), ("hpnicfAclNumberGroupTable", 4), ("hpnicfAclIPAclBasicTable", 5), ("hpnicfAclIPAclAdvancedTable", 6), ("hpnicfAclMACTable", 7), ("hpnicfAclEnUserTable", 8), ("hpnicfAclMib2ProcessingStatus", 9)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfAclMib2ObjectsCapabilities.setStatus('current')
hpnicfAclMib2ProcessingStatus = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 8, 2, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("processing", 1), ("done", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfAclMib2ProcessingStatus.setStatus('current')
hpnicfAclMib2CapabilityTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 8, 2, 1, 2), )
if mibBuilder.loadTexts: hpnicfAclMib2CapabilityTable.setStatus('current')
hpnicfAclMib2CapabilityEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 8, 2, 1, 2, 1), ).setIndexNames((0, "HPN-ICF-ACL-MIB", "hpnicfAclMib2EntityType"), (0, "HPN-ICF-ACL-MIB", "hpnicfAclMib2EntityIndex"), (0, "HPN-ICF-ACL-MIB", "hpnicfAclMib2ModuleIndex"), (0, "HPN-ICF-ACL-MIB", "hpnicfAclMib2CharacteristicsIndex"))
if mibBuilder.loadTexts: hpnicfAclMib2CapabilityEntry.setStatus('current')
hpnicfAclMib2EntityType = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 8, 2, 1, 2, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("system", 1), ("interface", 2))))
if mibBuilder.loadTexts: hpnicfAclMib2EntityType.setStatus('current')
hpnicfAclMib2EntityIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 8, 2, 1, 2, 1, 2), Integer32())
if mibBuilder.loadTexts: hpnicfAclMib2EntityIndex.setStatus('current')
hpnicfAclMib2ModuleIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 8, 2, 1, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("layer3", 1), ("layer2", 2), ("userDefined", 3))))
if mibBuilder.loadTexts: hpnicfAclMib2ModuleIndex.setStatus('current')
hpnicfAclMib2CharacteristicsIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 8, 2, 1, 2, 1, 4), Integer32())
if mibBuilder.loadTexts: hpnicfAclMib2CharacteristicsIndex.setStatus('current')
hpnicfAclMib2CharacteristicsDesc = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 8, 2, 1, 2, 1, 5), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfAclMib2CharacteristicsDesc.setStatus('current')
hpnicfAclMib2CharacteristicsValue = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 8, 2, 1, 2, 1, 6), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfAclMib2CharacteristicsValue.setStatus('current')
hpnicfAclNumberGroupTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 8, 2, 1, 3), )
if mibBuilder.loadTexts: hpnicfAclNumberGroupTable.setStatus('current')
hpnicfAclNumberGroupEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 8, 2, 1, 3, 1), ).setIndexNames((0, "HPN-ICF-ACL-MIB", "hpnicfAclNumberGroupType"), (0, "HPN-ICF-ACL-MIB", "hpnicfAclNumberGroupIndex"))
if mibBuilder.loadTexts: hpnicfAclNumberGroupEntry.setStatus('current')
hpnicfAclNumberGroupType = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 8, 2, 1, 3, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("ipv4", 1), ("ipv6", 2))).clone('ipv4'))
if mibBuilder.loadTexts: hpnicfAclNumberGroupType.setStatus('current')
hpnicfAclNumberGroupIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 8, 2, 1, 3, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(2000, 5999), ValueRangeConstraint(10000, 42767), )))
if mibBuilder.loadTexts: hpnicfAclNumberGroupIndex.setStatus('current')
hpnicfAclNumberGroupRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 8, 2, 1, 3, 1, 3), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfAclNumberGroupRowStatus.setStatus('current')
hpnicfAclNumberGroupMatchOrder = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 8, 2, 1, 3, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("config", 1), ("auto", 2))).clone('config')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfAclNumberGroupMatchOrder.setStatus('current')
hpnicfAclNumberGroupStep = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 8, 2, 1, 3, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 20)).clone(5)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfAclNumberGroupStep.setStatus('current')
hpnicfAclNumberGroupDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 8, 2, 1, 3, 1, 6), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 127))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfAclNumberGroupDescription.setStatus('current')
hpnicfAclNumberGroupCountClear = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 8, 2, 1, 3, 1, 7), CounterClear().clone('nouse')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpnicfAclNumberGroupCountClear.setStatus('current')
hpnicfAclNumberGroupRuleCounter = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 8, 2, 1, 3, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfAclNumberGroupRuleCounter.setStatus('current')
hpnicfAclNumberGroupName = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 8, 2, 1, 3, 1, 9), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 63))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfAclNumberGroupName.setStatus('current')
hpnicfAclIPAclGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 8, 2, 2))
hpnicfAclIPAclBasicTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 8, 2, 2, 2), )
if mibBuilder.loadTexts: hpnicfAclIPAclBasicTable.setStatus('current')
hpnicfAclIPAclBasicEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 8, 2, 2, 2, 1), ).setIndexNames((0, "HPN-ICF-ACL-MIB", "hpnicfAclNumberGroupType"), (0, "HPN-ICF-ACL-MIB", "hpnicfAclNumberGroupIndex"), (0, "HPN-ICF-ACL-MIB", "hpnicfAclIPAclBasicRuleIndex"))
if mibBuilder.loadTexts: hpnicfAclIPAclBasicEntry.setStatus('current')
hpnicfAclIPAclBasicRuleIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 8, 2, 2, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65534)))
if mibBuilder.loadTexts: hpnicfAclIPAclBasicRuleIndex.setStatus('current')
hpnicfAclIPAclBasicRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 8, 2, 2, 2, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfAclIPAclBasicRowStatus.setStatus('current')
hpnicfAclIPAclBasicAct = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 8, 2, 2, 2, 1, 3), RuleAction()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfAclIPAclBasicAct.setStatus('current')
hpnicfAclIPAclBasicSrcAddrType = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 8, 2, 2, 2, 1, 4), InetAddressType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfAclIPAclBasicSrcAddrType.setStatus('current')
hpnicfAclIPAclBasicSrcAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 8, 2, 2, 2, 1, 5), InetAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfAclIPAclBasicSrcAddr.setStatus('current')
hpnicfAclIPAclBasicSrcPrefix = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 8, 2, 2, 2, 1, 6), InetAddressPrefixLength()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfAclIPAclBasicSrcPrefix.setStatus('current')
hpnicfAclIPAclBasicSrcAny = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 8, 2, 2, 2, 1, 7), TruthValue()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfAclIPAclBasicSrcAny.setStatus('current')
hpnicfAclIPAclBasicSrcWild = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 8, 2, 2, 2, 1, 8), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfAclIPAclBasicSrcWild.setStatus('current')
hpnicfAclIPAclBasicTimeRangeName = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 8, 2, 2, 2, 1, 9), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfAclIPAclBasicTimeRangeName.setStatus('current')
hpnicfAclIPAclBasicFragmentFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 8, 2, 2, 2, 1, 10), FragmentFlag()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfAclIPAclBasicFragmentFlag.setStatus('current')
hpnicfAclIPAclBasicLog = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 8, 2, 2, 2, 1, 11), TruthValue()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfAclIPAclBasicLog.setStatus('current')
hpnicfAclIPAclBasicCount = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 8, 2, 2, 2, 1, 12), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfAclIPAclBasicCount.setStatus('current')
hpnicfAclIPAclBasicCountClear = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 8, 2, 2, 2, 1, 13), CounterClear()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpnicfAclIPAclBasicCountClear.setStatus('current')
hpnicfAclIPAclBasicEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 8, 2, 2, 2, 1, 14), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfAclIPAclBasicEnable.setStatus('current')
hpnicfAclIPAclBasicVpnInstanceName = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 8, 2, 2, 2, 1, 15), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfAclIPAclBasicVpnInstanceName.setStatus('current')
hpnicfAclIPAclBasicComment = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 8, 2, 2, 2, 1, 16), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 127))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfAclIPAclBasicComment.setStatus('current')
hpnicfAclIPAclBasicCounting = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 8, 2, 2, 2, 1, 17), TruthValue().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfAclIPAclBasicCounting.setStatus('current')
hpnicfAclIPAclBasicRouteTypeAny = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 8, 2, 2, 2, 1, 18), TruthValue().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfAclIPAclBasicRouteTypeAny.setStatus('current')
hpnicfAclIPAclBasicRouteTypeValue = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 8, 2, 2, 2, 1, 19), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 255), ValueRangeConstraint(65535, 65535), )).clone(65535)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfAclIPAclBasicRouteTypeValue.setStatus('current')
hpnicfAclIPAclAdvancedTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 8, 2, 2, 3), )
if mibBuilder.loadTexts: hpnicfAclIPAclAdvancedTable.setStatus('current')
hpnicfAclIPAclAdvancedEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 8, 2, 2, 3, 1), ).setIndexNames((0, "HPN-ICF-ACL-MIB", "hpnicfAclNumberGroupType"), (0, "HPN-ICF-ACL-MIB", "hpnicfAclNumberGroupIndex"), (0, "HPN-ICF-ACL-MIB", "hpnicfAclIPAclAdvancedRuleIndex"))
if mibBuilder.loadTexts: hpnicfAclIPAclAdvancedEntry.setStatus('current')
hpnicfAclIPAclAdvancedRuleIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 8, 2, 2, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65534)))
if mibBuilder.loadTexts: hpnicfAclIPAclAdvancedRuleIndex.setStatus('current')
hpnicfAclIPAclAdvancedRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 8, 2, 2, 3, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfAclIPAclAdvancedRowStatus.setStatus('current')
hpnicfAclIPAclAdvancedAct = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 8, 2, 2, 3, 1, 3), RuleAction()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfAclIPAclAdvancedAct.setStatus('current')
hpnicfAclIPAclAdvancedProtocol = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 8, 2, 2, 3, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfAclIPAclAdvancedProtocol.setStatus('current')
hpnicfAclIPAclAdvancedAddrFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 8, 2, 2, 3, 1, 5), AddressFlag().clone('invalid')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfAclIPAclAdvancedAddrFlag.setStatus('current')
hpnicfAclIPAclAdvancedSrcAddrType = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 8, 2, 2, 3, 1, 6), InetAddressType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfAclIPAclAdvancedSrcAddrType.setStatus('current')
hpnicfAclIPAclAdvancedSrcAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 8, 2, 2, 3, 1, 7), InetAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfAclIPAclAdvancedSrcAddr.setStatus('current')
hpnicfAclIPAclAdvancedSrcPrefix = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 8, 2, 2, 3, 1, 8), InetAddressPrefixLength()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfAclIPAclAdvancedSrcPrefix.setStatus('current')
hpnicfAclIPAclAdvancedSrcAny = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 8, 2, 2, 3, 1, 9), TruthValue().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfAclIPAclAdvancedSrcAny.setStatus('current')
hpnicfAclIPAclAdvancedSrcWild = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 8, 2, 2, 3, 1, 10), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfAclIPAclAdvancedSrcWild.setStatus('current')
hpnicfAclIPAclAdvancedSrcOp = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 8, 2, 2, 3, 1, 11), PortOp()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfAclIPAclAdvancedSrcOp.setStatus('current')
hpnicfAclIPAclAdvancedSrcPort1 = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 8, 2, 2, 3, 1, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfAclIPAclAdvancedSrcPort1.setStatus('current')
hpnicfAclIPAclAdvancedSrcPort2 = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 8, 2, 2, 3, 1, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535)).clone(65535)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfAclIPAclAdvancedSrcPort2.setStatus('current')
hpnicfAclIPAclAdvancedDestAddrType = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 8, 2, 2, 3, 1, 14), InetAddressType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfAclIPAclAdvancedDestAddrType.setStatus('current')
hpnicfAclIPAclAdvancedDestAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 8, 2, 2, 3, 1, 15), InetAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfAclIPAclAdvancedDestAddr.setStatus('current')
hpnicfAclIPAclAdvancedDestPrefix = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 8, 2, 2, 3, 1, 16), InetAddressPrefixLength()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfAclIPAclAdvancedDestPrefix.setStatus('current')
hpnicfAclIPAclAdvancedDestAny = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 8, 2, 2, 3, 1, 17), TruthValue().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfAclIPAclAdvancedDestAny.setStatus('current')
hpnicfAclIPAclAdvancedDestWild = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 8, 2, 2, 3, 1, 18), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfAclIPAclAdvancedDestWild.setStatus('current')
hpnicfAclIPAclAdvancedDestOp = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 8, 2, 2, 3, 1, 19), PortOp()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfAclIPAclAdvancedDestOp.setStatus('current')
hpnicfAclIPAclAdvancedDestPort1 = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 8, 2, 2, 3, 1, 20), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfAclIPAclAdvancedDestPort1.setStatus('current')
hpnicfAclIPAclAdvancedDestPort2 = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 8, 2, 2, 3, 1, 21), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535)).clone(65535)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfAclIPAclAdvancedDestPort2.setStatus('current')
hpnicfAclIPAclAdvancedIcmpType = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 8, 2, 2, 3, 1, 22), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 255), ValueRangeConstraint(65535, 65535), )).clone(65535)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfAclIPAclAdvancedIcmpType.setStatus('current')
hpnicfAclIPAclAdvancedIcmpCode = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 8, 2, 2, 3, 1, 23), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 255), ValueRangeConstraint(65535, 65535), )).clone(65535)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfAclIPAclAdvancedIcmpCode.setStatus('current')
hpnicfAclIPAclAdvancedPrecedence = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 8, 2, 2, 3, 1, 24), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 7), ValueRangeConstraint(255, 255), )).clone(255)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfAclIPAclAdvancedPrecedence.setStatus('current')
hpnicfAclIPAclAdvancedTos = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 8, 2, 2, 3, 1, 25), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 15), ValueRangeConstraint(255, 255), )).clone(255)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfAclIPAclAdvancedTos.setStatus('current')
hpnicfAclIPAclAdvancedDscp = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 8, 2, 2, 3, 1, 26), DSCPValue().clone(255)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfAclIPAclAdvancedDscp.setStatus('current')
hpnicfAclIPAclAdvancedTimeRangeName = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 8, 2, 2, 3, 1, 27), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfAclIPAclAdvancedTimeRangeName.setStatus('current')
hpnicfAclIPAclAdvancedTCPFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 8, 2, 2, 3, 1, 28), TCPFlag().clone('invalid')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfAclIPAclAdvancedTCPFlag.setStatus('current')
hpnicfAclIPAclAdvancedFragmentFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 8, 2, 2, 3, 1, 29), FragmentFlag().clone('invalid')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfAclIPAclAdvancedFragmentFlag.setStatus('current')
hpnicfAclIPAclAdvancedLog = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 8, 2, 2, 3, 1, 30), TruthValue().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfAclIPAclAdvancedLog.setStatus('current')
hpnicfAclIPAclAdvancedCount = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 8, 2, 2, 3, 1, 31), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfAclIPAclAdvancedCount.setStatus('current')
hpnicfAclIPAclAdvancedCountClear = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 8, 2, 2, 3, 1, 32), CounterClear().clone('nouse')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpnicfAclIPAclAdvancedCountClear.setStatus('current')
hpnicfAclIPAclAdvancedEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 8, 2, 2, 3, 1, 33), TruthValue().clone('false')).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfAclIPAclAdvancedEnable.setStatus('current')
hpnicfAclIPAclAdvancedVpnInstanceName = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 8, 2, 2, 3, 1, 34), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfAclIPAclAdvancedVpnInstanceName.setStatus('current')
hpnicfAclIPAclAdvancedComment = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 8, 2, 2, 3, 1, 35), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 127))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfAclIPAclAdvancedComment.setStatus('current')
hpnicfAclIPAclAdvancedReflective = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 8, 2, 2, 3, 1, 36), TruthValue()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfAclIPAclAdvancedReflective.setStatus('current')
hpnicfAclIPAclAdvancedCounting = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 8, 2, 2, 3, 1, 37), TruthValue().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfAclIPAclAdvancedCounting.setStatus('current')
hpnicfAclIPAclAdvancedTCPFlagMask = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 8, 2, 2, 3, 1, 38), Bits().clone(namedValues=NamedValues(("tcpack", 0), ("tcpfin", 1), ("tcppsh", 2), ("tcprst", 3), ("tcpsyn", 4), ("tcpurg", 5)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfAclIPAclAdvancedTCPFlagMask.setStatus('current')
hpnicfAclIPAclAdvancedTCPFlagValue = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 8, 2, 2, 3, 1, 39), Bits().clone(namedValues=NamedValues(("tcpack", 0), ("tcpfin", 1), ("tcppsh", 2), ("tcprst", 3), ("tcpsyn", 4), ("tcpurg", 5)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfAclIPAclAdvancedTCPFlagValue.setStatus('current')
hpnicfAclIPAclAdvancedRouteTypeAny = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 8, 2, 2, 3, 1, 40), TruthValue().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfAclIPAclAdvancedRouteTypeAny.setStatus('current')
hpnicfAclIPAclAdvancedRouteTypeValue = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 8, 2, 2, 3, 1, 41), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 255), ValueRangeConstraint(65535, 65535), )).clone(65535)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfAclIPAclAdvancedRouteTypeValue.setStatus('current')
hpnicfAclIPAclAdvancedFlowLabel = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 8, 2, 2, 3, 1, 42), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 1048575), ValueRangeConstraint(4294967295, 4294967295), )).clone(4294967295)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfAclIPAclAdvancedFlowLabel.setStatus('current')
hpnicfAclMACAclGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 8, 2, 3))
hpnicfAclMACTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 8, 2, 3, 1), )
if mibBuilder.loadTexts: hpnicfAclMACTable.setStatus('current')
hpnicfAclMACEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 8, 2, 3, 1, 1), ).setIndexNames((0, "HPN-ICF-ACL-MIB", "hpnicfAclNumberGroupType"), (0, "HPN-ICF-ACL-MIB", "hpnicfAclNumberGroupIndex"), (0, "HPN-ICF-ACL-MIB", "hpnicfAclMACRuleIndex"))
if mibBuilder.loadTexts: hpnicfAclMACEntry.setStatus('current')
hpnicfAclMACRuleIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 8, 2, 3, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65534)))
if mibBuilder.loadTexts: hpnicfAclMACRuleIndex.setStatus('current')
hpnicfAclMACRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 8, 2, 3, 1, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfAclMACRowStatus.setStatus('current')
hpnicfAclMACAct = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 8, 2, 3, 1, 1, 3), RuleAction()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfAclMACAct.setStatus('current')
hpnicfAclMACTypeCode = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 8, 2, 3, 1, 1, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfAclMACTypeCode.setStatus('current')
hpnicfAclMACTypeMask = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 8, 2, 3, 1, 1, 5), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfAclMACTypeMask.setStatus('current')
hpnicfAclMACSrcMac = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 8, 2, 3, 1, 1, 6), MacAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfAclMACSrcMac.setStatus('current')
hpnicfAclMACSrcMacWild = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 8, 2, 3, 1, 1, 7), MacAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfAclMACSrcMacWild.setStatus('current')
hpnicfAclMACDestMac = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 8, 2, 3, 1, 1, 8), MacAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfAclMACDestMac.setStatus('current')
hpnicfAclMACDestMacWild = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 8, 2, 3, 1, 1, 9), MacAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfAclMACDestMacWild.setStatus('current')
hpnicfAclMACLsapCode = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 8, 2, 3, 1, 1, 10), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfAclMACLsapCode.setStatus('current')
hpnicfAclMACLsapMask = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 8, 2, 3, 1, 1, 11), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfAclMACLsapMask.setStatus('current')
hpnicfAclMACCos = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 8, 2, 3, 1, 1, 12), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfAclMACCos.setStatus('current')
hpnicfAclMACTimeRangeName = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 8, 2, 3, 1, 1, 13), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfAclMACTimeRangeName.setStatus('current')
hpnicfAclMACCount = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 8, 2, 3, 1, 1, 14), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfAclMACCount.setStatus('current')
hpnicfAclMACCountClear = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 8, 2, 3, 1, 1, 15), CounterClear()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpnicfAclMACCountClear.setStatus('current')
hpnicfAclMACEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 8, 2, 3, 1, 1, 16), TruthValue().clone('false')).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfAclMACEnable.setStatus('current')
hpnicfAclMACComment = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 8, 2, 3, 1, 1, 17), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 127))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfAclMACComment.setStatus('current')
hpnicfAclMACLog = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 8, 2, 3, 1, 1, 18), TruthValue().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfAclMACLog.setStatus('current')
hpnicfAclMACCounting = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 8, 2, 3, 1, 1, 19), TruthValue().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfAclMACCounting.setStatus('current')
hpnicfAclEnUserAclGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 8, 2, 4))
hpnicfAclEnUserTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 8, 2, 4, 3), )
if mibBuilder.loadTexts: hpnicfAclEnUserTable.setStatus('current')
hpnicfAclEnUserEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 8, 2, 4, 3, 1), ).setIndexNames((0, "HPN-ICF-ACL-MIB", "hpnicfAclNumberGroupType"), (0, "HPN-ICF-ACL-MIB", "hpnicfAclNumberGroupIndex"), (0, "HPN-ICF-ACL-MIB", "hpnicfAclEnUserRuleIndex"))
if mibBuilder.loadTexts: hpnicfAclEnUserEntry.setStatus('current')
hpnicfAclEnUserRuleIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 8, 2, 4, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65534)))
if mibBuilder.loadTexts: hpnicfAclEnUserRuleIndex.setStatus('current')
hpnicfAclEnUserRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 8, 2, 4, 3, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfAclEnUserRowStatus.setStatus('current')
hpnicfAclEnUserAct = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 8, 2, 4, 3, 1, 3), RuleAction()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfAclEnUserAct.setStatus('current')
hpnicfAclEnUserStartString = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 8, 2, 4, 3, 1, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfAclEnUserStartString.setStatus('current')
hpnicfAclEnUserL2String = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 8, 2, 4, 3, 1, 5), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfAclEnUserL2String.setStatus('current')
hpnicfAclEnUserMplsString = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 8, 2, 4, 3, 1, 6), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfAclEnUserMplsString.setStatus('current')
hpnicfAclEnUserIPv4String = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 8, 2, 4, 3, 1, 7), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfAclEnUserIPv4String.setStatus('current')
hpnicfAclEnUserIPv6String = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 8, 2, 4, 3, 1, 8), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfAclEnUserIPv6String.setStatus('current')
hpnicfAclEnUserL4String = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 8, 2, 4, 3, 1, 9), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfAclEnUserL4String.setStatus('current')
hpnicfAclEnUserL5String = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 8, 2, 4, 3, 1, 10), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfAclEnUserL5String.setStatus('current')
hpnicfAclEnUserTimeRangeName = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 8, 2, 4, 3, 1, 11), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfAclEnUserTimeRangeName.setStatus('current')
hpnicfAclEnUserCount = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 8, 2, 4, 3, 1, 12), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfAclEnUserCount.setStatus('current')
hpnicfAclEnUserCountClear = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 8, 2, 4, 3, 1, 13), CounterClear()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpnicfAclEnUserCountClear.setStatus('current')
hpnicfAclEnUserEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 8, 2, 4, 3, 1, 14), TruthValue().clone('false')).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfAclEnUserEnable.setStatus('current')
hpnicfAclEnUserComment = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 8, 2, 4, 3, 1, 15), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 127))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfAclEnUserComment.setStatus('current')
hpnicfAclEnUserLog = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 8, 2, 4, 3, 1, 16), TruthValue().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfAclEnUserLog.setStatus('current')
hpnicfAclEnUserCounting = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 8, 2, 4, 3, 1, 17), TruthValue().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfAclEnUserCounting.setStatus('current')
hpnicfAclResourceGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 8, 2, 5))
hpnicfAclResourceUsageTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 8, 2, 5, 1), )
if mibBuilder.loadTexts: hpnicfAclResourceUsageTable.setStatus('current')
hpnicfAclResourceUsageEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 8, 2, 5, 1, 1), ).setIndexNames((0, "HPN-ICF-ACL-MIB", "hpnicfAclResourceChassis"), (0, "HPN-ICF-ACL-MIB", "hpnicfAclResourceSlot"), (0, "HPN-ICF-ACL-MIB", "hpnicfAclResourceChip"), (0, "HPN-ICF-ACL-MIB", "hpnicfAclResourceType"))
if mibBuilder.loadTexts: hpnicfAclResourceUsageEntry.setStatus('current')
hpnicfAclResourceChassis = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 8, 2, 5, 1, 1, 1), Unsigned32())
if mibBuilder.loadTexts: hpnicfAclResourceChassis.setStatus('current')
hpnicfAclResourceSlot = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 8, 2, 5, 1, 1, 2), Unsigned32())
if mibBuilder.loadTexts: hpnicfAclResourceSlot.setStatus('current')
hpnicfAclResourceChip = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 8, 2, 5, 1, 1, 3), Unsigned32())
if mibBuilder.loadTexts: hpnicfAclResourceChip.setStatus('current')
hpnicfAclResourceType = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 8, 2, 5, 1, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255)))
if mibBuilder.loadTexts: hpnicfAclResourceType.setStatus('current')
hpnicfAclPortRange = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 8, 2, 5, 1, 1, 5), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfAclPortRange.setStatus('current')
hpnicfAclResourceTotal = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 8, 2, 5, 1, 1, 6), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfAclResourceTotal.setStatus('current')
hpnicfAclResourceReserved = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 8, 2, 5, 1, 1, 7), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfAclResourceReserved.setStatus('current')
hpnicfAclResourceConfigured = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 8, 2, 5, 1, 1, 8), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfAclResourceConfigured.setStatus('current')
hpnicfAclResourceUsagePercent = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 8, 2, 5, 1, 1, 9), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfAclResourceUsagePercent.setStatus('current')
hpnicfAclResourceTypeDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 8, 2, 5, 1, 1, 10), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 31))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfAclResourceTypeDescription.setStatus('current')
hpnicfAclPacketFilterObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 8, 3))
hpnicfPfilterScalarGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 8, 3, 1))
hpnicfPfilterDefaultAction = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 8, 3, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("permit", 1), ("deny", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpnicfPfilterDefaultAction.setStatus('current')
hpnicfPfilterProcessingStatus = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 8, 3, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("processing", 1), ("done", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfPfilterProcessingStatus.setStatus('current')
hpnicfPfilterApplyTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 8, 3, 2), )
if mibBuilder.loadTexts: hpnicfPfilterApplyTable.setStatus('current')
hpnicfPfilterApplyEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 8, 3, 2, 1), ).setIndexNames((0, "HPN-ICF-ACL-MIB", "hpnicfPfilterApplyObjType"), (0, "HPN-ICF-ACL-MIB", "hpnicfPfilterApplyObjIndex"), (0, "HPN-ICF-ACL-MIB", "hpnicfPfilterApplyDirection"), (0, "HPN-ICF-ACL-MIB", "hpnicfPfilterApplyAclType"), (0, "HPN-ICF-ACL-MIB", "hpnicfPfilterApplyAclIndex"))
if mibBuilder.loadTexts: hpnicfPfilterApplyEntry.setStatus('current')
hpnicfPfilterApplyObjType = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 8, 3, 2, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("interface", 1), ("vlan", 2), ("global", 3))))
if mibBuilder.loadTexts: hpnicfPfilterApplyObjType.setStatus('current')
hpnicfPfilterApplyObjIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 8, 3, 2, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647)))
if mibBuilder.loadTexts: hpnicfPfilterApplyObjIndex.setStatus('current')
hpnicfPfilterApplyDirection = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 8, 3, 2, 1, 3), DirectionType())
if mibBuilder.loadTexts: hpnicfPfilterApplyDirection.setStatus('current')
hpnicfPfilterApplyAclType = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 8, 3, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("ipv4", 1), ("ipv6", 2), ("default", 3))))
if mibBuilder.loadTexts: hpnicfPfilterApplyAclType.setStatus('current')
hpnicfPfilterApplyAclIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 8, 3, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(2000, 5999), )))
if mibBuilder.loadTexts: hpnicfPfilterApplyAclIndex.setStatus('current')
hpnicfPfilterApplyHardCount = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 8, 3, 2, 1, 6), TruthValue().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfPfilterApplyHardCount.setStatus('current')
hpnicfPfilterApplySequence = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 8, 3, 2, 1, 7), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfPfilterApplySequence.setStatus('current')
hpnicfPfilterApplyCountClear = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 8, 3, 2, 1, 8), CounterClear()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpnicfPfilterApplyCountClear.setStatus('current')
hpnicfPfilterApplyRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 8, 3, 2, 1, 9), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfPfilterApplyRowStatus.setStatus('current')
hpnicfPfilterAclGroupRunInfoTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 8, 3, 3), )
if mibBuilder.loadTexts: hpnicfPfilterAclGroupRunInfoTable.setStatus('current')
hpnicfPfilterAclGroupRunInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 8, 3, 3, 1), ).setIndexNames((0, "HPN-ICF-ACL-MIB", "hpnicfPfilterRunApplyObjType"), (0, "HPN-ICF-ACL-MIB", "hpnicfPfilterRunApplyObjIndex"), (0, "HPN-ICF-ACL-MIB", "hpnicfPfilterRunApplyDirection"), (0, "HPN-ICF-ACL-MIB", "hpnicfPfilterRunApplyAclType"), (0, "HPN-ICF-ACL-MIB", "hpnicfPfilterRunApplyAclIndex"))
if mibBuilder.loadTexts: hpnicfPfilterAclGroupRunInfoEntry.setStatus('current')
hpnicfPfilterRunApplyObjType = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 8, 3, 3, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("interface", 1), ("vlan", 2), ("global", 3))))
if mibBuilder.loadTexts: hpnicfPfilterRunApplyObjType.setStatus('current')
hpnicfPfilterRunApplyObjIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 8, 3, 3, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647)))
if mibBuilder.loadTexts: hpnicfPfilterRunApplyObjIndex.setStatus('current')
hpnicfPfilterRunApplyDirection = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 8, 3, 3, 1, 3), DirectionType())
if mibBuilder.loadTexts: hpnicfPfilterRunApplyDirection.setStatus('current')
hpnicfPfilterRunApplyAclType = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 8, 3, 3, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("ipv4", 1), ("ipv6", 2), ("default", 3))))
if mibBuilder.loadTexts: hpnicfPfilterRunApplyAclType.setStatus('current')
hpnicfPfilterRunApplyAclIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 8, 3, 3, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(1, 3), ValueRangeConstraint(2000, 5999), )))
if mibBuilder.loadTexts: hpnicfPfilterRunApplyAclIndex.setStatus('current')
hpnicfPfilterAclGroupStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 8, 3, 3, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("success", 1), ("failed", 2), ("partialSuccess", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfPfilterAclGroupStatus.setStatus('current')
hpnicfPfilterAclGroupCountStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 8, 3, 3, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("success", 1), ("failed", 2), ("partialSuccess", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfPfilterAclGroupCountStatus.setStatus('current')
hpnicfPfilterAclGroupPermitPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 8, 3, 3, 1, 8), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfPfilterAclGroupPermitPkts.setStatus('current')
hpnicfPfilterAclGroupPermitBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 8, 3, 3, 1, 9), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfPfilterAclGroupPermitBytes.setStatus('current')
hpnicfPfilterAclGroupDenyPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 8, 3, 3, 1, 10), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfPfilterAclGroupDenyPkts.setStatus('current')
hpnicfPfilterAclGroupDenyBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 8, 3, 3, 1, 11), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfPfilterAclGroupDenyBytes.setStatus('current')
hpnicfPfilterAclRuleRunInfoTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 8, 3, 4), )
if mibBuilder.loadTexts: hpnicfPfilterAclRuleRunInfoTable.setStatus('current')
hpnicfPfilterAclRuleRunInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 8, 3, 4, 1), ).setIndexNames((0, "HPN-ICF-ACL-MIB", "hpnicfPfilterRunApplyObjType"), (0, "HPN-ICF-ACL-MIB", "hpnicfPfilterRunApplyObjIndex"), (0, "HPN-ICF-ACL-MIB", "hpnicfPfilterRunApplyDirection"), (0, "HPN-ICF-ACL-MIB", "hpnicfPfilterRunApplyAclType"), (0, "HPN-ICF-ACL-MIB", "hpnicfPfilterRunApplyAclIndex"), (0, "HPN-ICF-ACL-MIB", "hpnicfPfilterAclRuleIndex"))
if mibBuilder.loadTexts: hpnicfPfilterAclRuleRunInfoEntry.setStatus('current')
hpnicfPfilterAclRuleIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 8, 3, 4, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65534)))
if mibBuilder.loadTexts: hpnicfPfilterAclRuleIndex.setStatus('current')
hpnicfPfilterAclRuleStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 8, 3, 4, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("success", 1), ("failed", 2), ("partialSuccess", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfPfilterAclRuleStatus.setStatus('current')
hpnicfPfilterAclRuleCountStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 8, 3, 4, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("success", 1), ("failed", 2), ("partialSuccess", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfPfilterAclRuleCountStatus.setStatus('current')
hpnicfPfilterAclRuleMatchPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 8, 3, 4, 1, 4), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfPfilterAclRuleMatchPackets.setStatus('current')
hpnicfPfilterAclRuleMatchBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 8, 3, 4, 1, 5), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfPfilterAclRuleMatchBytes.setStatus('current')
hpnicfPfilterStatisticSumTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 8, 3, 5), )
if mibBuilder.loadTexts: hpnicfPfilterStatisticSumTable.setStatus('current')
hpnicfPfilterStatisticSumEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 8, 3, 5, 1), ).setIndexNames((0, "HPN-ICF-ACL-MIB", "hpnicfPfilterSumDirection"), (0, "HPN-ICF-ACL-MIB", "hpnicfPfilterSumAclType"), (0, "HPN-ICF-ACL-MIB", "hpnicfPfilterSumAclIndex"), (0, "HPN-ICF-ACL-MIB", "hpnicfPfilterSumRuleIndex"))
if mibBuilder.loadTexts: hpnicfPfilterStatisticSumEntry.setStatus('current')
hpnicfPfilterSumDirection = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 8, 3, 5, 1, 1), DirectionType())
if mibBuilder.loadTexts: hpnicfPfilterSumDirection.setStatus('current')
hpnicfPfilterSumAclType = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 8, 3, 5, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("ipv4", 1), ("ipv6", 2))))
if mibBuilder.loadTexts: hpnicfPfilterSumAclType.setStatus('current')
hpnicfPfilterSumAclIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 8, 3, 5, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(2000, 5999)))
if mibBuilder.loadTexts: hpnicfPfilterSumAclIndex.setStatus('current')
hpnicfPfilterSumRuleIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 8, 3, 5, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65534)))
if mibBuilder.loadTexts: hpnicfPfilterSumRuleIndex.setStatus('current')
hpnicfPfilterSumRuleMatchPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 8, 3, 5, 1, 5), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfPfilterSumRuleMatchPackets.setStatus('current')
hpnicfPfilterSumRuleMatchBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 8, 3, 5, 1, 6), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfPfilterSumRuleMatchBytes.setStatus('current')
hpnicfAclPacketfilterTrapObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 8, 4))
hpnicfPfilterInterface = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 8, 4, 1), OctetString()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: hpnicfPfilterInterface.setStatus('current')
hpnicfPfilterDirection = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 8, 4, 2), OctetString()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: hpnicfPfilterDirection.setStatus('current')
hpnicfPfilterACLNumber = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 8, 4, 3), Integer32()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: hpnicfPfilterACLNumber.setStatus('current')
hpnicfPfilterAction = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 8, 4, 4), OctetString()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: hpnicfPfilterAction.setStatus('current')
hpnicfMACfilterSourceMac = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 8, 4, 5), OctetString()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: hpnicfMACfilterSourceMac.setStatus('current')
hpnicfMACfilterDestinationMac = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 8, 4, 6), OctetString()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: hpnicfMACfilterDestinationMac.setStatus('current')
hpnicfPfilterPacketNumber = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 8, 4, 7), Integer32()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: hpnicfPfilterPacketNumber.setStatus('current')
hpnicfPfilterReceiveInterface = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 8, 4, 8), OctetString()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: hpnicfPfilterReceiveInterface.setStatus('current')
hpnicfAclPacketfilterTrap = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 8, 5))
hpnicfPfilterTrapPrefix = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 8, 5, 0))
hpnicfMACfilterTrap = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 8, 5, 0, 1)).setObjects(("HPN-ICF-ACL-MIB", "hpnicfPfilterInterface"), ("HPN-ICF-ACL-MIB", "hpnicfPfilterDirection"), ("HPN-ICF-ACL-MIB", "hpnicfPfilterACLNumber"), ("HPN-ICF-ACL-MIB", "hpnicfPfilterAction"), ("HPN-ICF-ACL-MIB", "hpnicfMACfilterSourceMac"), ("HPN-ICF-ACL-MIB", "hpnicfMACfilterDestinationMac"), ("HPN-ICF-ACL-MIB", "hpnicfPfilterPacketNumber"), ("HPN-ICF-ACL-MIB", "hpnicfPfilterReceiveInterface"))
if mibBuilder.loadTexts: hpnicfMACfilterTrap.setStatus('current')
mibBuilder.exportSymbols("HPN-ICF-ACL-MIB", hpnicfPfilterAclRuleRunInfoEntry=hpnicfPfilterAclRuleRunInfoEntry, hpnicfAclIPAclBasicRouteTypeAny=hpnicfAclIPAclBasicRouteTypeAny, hpnicfAclActiveVlanID=hpnicfAclActiveVlanID, hpnicfPfilterApplyEntry=hpnicfPfilterApplyEntry, hpnicfAclBasicRowStatus=hpnicfAclBasicRowStatus, hpnicfAclUserTable=hpnicfAclUserTable, hpnicfAclMACCos=hpnicfAclMACCos, hpnicfAclNameGroupRowStatus=hpnicfAclNameGroupRowStatus, hpnicfAclMibObjects=hpnicfAclMibObjects, hpnicfAclPacketfilterTrap=hpnicfAclPacketfilterTrap, hpnicfAclMACEntry=hpnicfAclMACEntry, hpnicfAclNumberGroupCountClear=hpnicfAclNumberGroupCountClear, hpnicfAclResourceChassis=hpnicfAclResourceChassis, hpnicfAclBasicCountClear=hpnicfAclBasicCountClear, hpnicfAclLinkTypeMask=hpnicfAclLinkTypeMask, hpnicfAclIPAclAdvancedTCPFlagMask=hpnicfAclIPAclAdvancedTCPFlagMask, hpnicfPfilterScalarGroup=hpnicfPfilterScalarGroup, hpnicfAclIPAclGroup=hpnicfAclIPAclGroup, hpnicfAclMACCountClear=hpnicfAclMACCountClear, hpnicfPfilterDirection=hpnicfPfilterDirection, hpnicfAclAdvancedPrecedence=hpnicfAclAdvancedPrecedence, hpnicfAclLinkSrcMacWild=hpnicfAclLinkSrcMacWild, hpnicfAclBasicAclNum=hpnicfAclBasicAclNum, hpnicfAclUserVlanTag=hpnicfAclUserVlanTag, hpnicfPfilterAclRuleStatus=hpnicfPfilterAclRuleStatus, hpnicfAclBasicTimeRangeName=hpnicfAclBasicTimeRangeName, hpnicfAclResourceTypeDescription=hpnicfAclResourceTypeDescription, hpnicfAclMib2ProcessingStatus=hpnicfAclMib2ProcessingStatus, hpnicfAclNumGroupEntry=hpnicfAclNumGroupEntry, hpnicfAclIPAclBasicLog=hpnicfAclIPAclBasicLog, hpnicfAclLinkLsapCode=hpnicfAclLinkLsapCode, hpnicfAclPacketFilterObjects=hpnicfAclPacketFilterObjects, hpnicfAclIPAclBasicSrcAddrType=hpnicfAclIPAclBasicSrcAddrType, hpnicfAclAdvancedRowStatus=hpnicfAclAdvancedRowStatus, hpnicfAclNumGroupSubitemNum=hpnicfAclNumGroupSubitemNum, hpnicfAclActiveEntry=hpnicfAclActiveEntry, hpnicfAclIPAclBasicSrcWild=hpnicfAclIPAclBasicSrcWild, hpnicfPfilterAclRuleIndex=hpnicfPfilterAclRuleIndex, hpnicfAclUserRuleStr=hpnicfAclUserRuleStr, hpnicfAclLinkSrcVlanId=hpnicfAclLinkSrcVlanId, hpnicfAclNumberGroupIndex=hpnicfAclNumberGroupIndex, hpnicfAclMib2ObjectsCapabilities=hpnicfAclMib2ObjectsCapabilities, FragmentFlag=FragmentFlag, hpnicfAclIPAclAdvancedRowStatus=hpnicfAclIPAclAdvancedRowStatus, hpnicfAclIfIndex=hpnicfAclIfIndex, hpnicfPfilterTrapPrefix=hpnicfPfilterTrapPrefix, hpnicfPfilterAclGroupCountStatus=hpnicfPfilterAclGroupCountStatus, hpnicfAclEnUserRowStatus=hpnicfAclEnUserRowStatus, hpnicfPfilterAclGroupRunInfoTable=hpnicfPfilterAclGroupRunInfoTable, hpnicfAclNumGroupAclNum=hpnicfAclNumGroupAclNum, hpnicfPfilterACLNumber=hpnicfPfilterACLNumber, hpnicfAclBasicCount=hpnicfAclBasicCount, hpnicfAclNumberGroupRuleCounter=hpnicfAclNumberGroupRuleCounter, hpnicfAclLinkEnable=hpnicfAclLinkEnable, hpnicfAclMACAct=hpnicfAclMACAct, hpnicfAclIPAclBasicRowStatus=hpnicfAclIPAclBasicRowStatus, hpnicfPfilterSumRuleMatchBytes=hpnicfPfilterSumRuleMatchBytes, hpnicfAclIPAclAdvancedFragmentFlag=hpnicfAclIPAclAdvancedFragmentFlag, hpnicfAclIPAclAdvancedSrcOp=hpnicfAclIPAclAdvancedSrcOp, hpnicfAclIfAclNum=hpnicfAclIfAclNum, hpnicfAclActiveRowStatus=hpnicfAclActiveRowStatus, hpnicfAclActiveAclIndex=hpnicfAclActiveAclIndex, hpnicfPfilterApplyTable=hpnicfPfilterApplyTable, hpnicfAclIDSSrcMac=hpnicfAclIDSSrcMac, hpnicfAclIfRowStatus=hpnicfAclIfRowStatus, hpnicfAclIPAclAdvancedAddrFlag=hpnicfAclIPAclAdvancedAddrFlag, hpnicfAclIPAclBasicTimeRangeName=hpnicfAclIPAclBasicTimeRangeName, hpnicfAclIPAclAdvancedRouteTypeAny=hpnicfAclIPAclAdvancedRouteTypeAny, hpnicfAclIPAclBasicSrcAddr=hpnicfAclIPAclBasicSrcAddr, hpnicfAclActiveUserAclSubitem=hpnicfAclActiveUserAclSubitem, hpnicfAclIPAclBasicTable=hpnicfAclIPAclBasicTable, hpnicfAclResourceType=hpnicfAclResourceType, hpnicfPfilterAclGroupDenyPkts=hpnicfPfilterAclGroupDenyPkts, hpnicfAclIDSDestMac=hpnicfAclIDSDestMac, hpnicfAclBasicFragments=hpnicfAclBasicFragments, hpnicfAclMACLsapCode=hpnicfAclMACLsapCode, hpnicfAclUserRowStatus=hpnicfAclUserRowStatus, hpnicfAclMACSrcMac=hpnicfAclMACSrcMac, hpnicfAclIPAclBasicEntry=hpnicfAclIPAclBasicEntry, hpnicfAclAdvancedSrcWild=hpnicfAclAdvancedSrcWild, hpnicfAclUserRuleMask=hpnicfAclUserRuleMask, hpnicfAclIPAclAdvancedDestWild=hpnicfAclIPAclAdvancedDestWild, hpnicfAclNumberGroupDescription=hpnicfAclNumberGroupDescription, hpnicfPfilterApplyHardCount=hpnicfPfilterApplyHardCount, hpnicfAclLinkL2LabelRangeEnd=hpnicfAclLinkL2LabelRangeEnd, hpnicfAclIPAclAdvancedEntry=hpnicfAclIPAclAdvancedEntry, hpnicfAclNumberGroupTable=hpnicfAclNumberGroupTable, hpnicfPfilterApplySequence=hpnicfPfilterApplySequence, hpnicfAclLinkRowStatus=hpnicfAclLinkRowStatus, hpnicfAclMACComment=hpnicfAclMACComment, hpnicfAclUserTimeRangeName=hpnicfAclUserTimeRangeName, hpnicfPfilterAclGroupDenyBytes=hpnicfPfilterAclGroupDenyBytes, hpnicfPfilterApplyAclType=hpnicfPfilterApplyAclType, hpnicfAclIPAclAdvancedPrecedence=hpnicfAclIPAclAdvancedPrecedence, hpnicfAclIPAclAdvancedVpnInstanceName=hpnicfAclIPAclAdvancedVpnInstanceName, hpnicfAclMib2CapabilityTable=hpnicfAclMib2CapabilityTable, hpnicfAclIPAclAdvancedRuleIndex=hpnicfAclIPAclAdvancedRuleIndex, hpnicfAclMACLsapMask=hpnicfAclMACLsapMask, hpnicfAclIPAclAdvancedAct=hpnicfAclIPAclAdvancedAct, hpnicfAclIPAclBasicEnable=hpnicfAclIPAclBasicEnable, hpnicfAclNameGroupEntry=hpnicfAclNameGroupEntry, hpnicfAclEnUserCountClear=hpnicfAclEnUserCountClear, hpnicfPfilterSumAclType=hpnicfPfilterSumAclType, hpnicfAclAdvancedDestIp=hpnicfAclAdvancedDestIp, hpnicfPfilterApplyAclIndex=hpnicfPfilterApplyAclIndex, hpnicfAclMACTypeCode=hpnicfAclMACTypeCode, hpnicfPfilterSumRuleMatchPackets=hpnicfPfilterSumRuleMatchPackets, hpnicfAclIDSSrcIp=hpnicfAclIDSSrcIp, hpnicfPfilterApplyObjType=hpnicfPfilterApplyObjType, hpnicfAclIPAclAdvancedDestOp=hpnicfAclIPAclAdvancedDestOp, hpnicfAclAdvancedDestWild=hpnicfAclAdvancedDestWild, hpnicfAclEnUserIPv4String=hpnicfAclEnUserIPv4String, hpnicfPfilterApplyRowStatus=hpnicfPfilterApplyRowStatus, hpnicfAclLinkDestAny=hpnicfAclLinkDestAny, hpnicfAclIDSRowStatus=hpnicfAclIDSRowStatus, hpnicfAclMACAclGroup=hpnicfAclMACAclGroup, hpnicfAclUserAclNum=hpnicfAclUserAclNum, hpnicfAclIfRuleEntry=hpnicfAclIfRuleEntry, hpnicfAclIPAclBasicRouteTypeValue=hpnicfAclIPAclBasicRouteTypeValue, hpnicfAclActiveDirection=hpnicfAclActiveDirection, hpnicfAclActiveLinkAclNum=hpnicfAclActiveLinkAclNum, hpnicfAclLinkTypeCode=hpnicfAclLinkTypeCode, hpnicfAclPortRange=hpnicfAclPortRange, hpnicfAclNameGroupSubitemNum=hpnicfAclNameGroupSubitemNum, hpnicfPfilterReceiveInterface=hpnicfPfilterReceiveInterface, hpnicfAclIPAclBasicCounting=hpnicfAclIPAclBasicCounting, hpnicfAclLinkEntry=hpnicfAclLinkEntry, hpnicfAclIfCount=hpnicfAclIfCount, hpnicfAclIPAclAdvancedDestAddrType=hpnicfAclIPAclAdvancedDestAddrType, hpnicfAclNumGroupCountClear=hpnicfAclNumGroupCountClear, hpnicfAclIDSTable=hpnicfAclIDSTable, hpnicfAclIPAclBasicSrcPrefix=hpnicfAclIPAclBasicSrcPrefix, hpnicfAclMib2EntityIndex=hpnicfAclMib2EntityIndex, hpnicfAclAdvancedEstablish=hpnicfAclAdvancedEstablish, hpnicfAclIDSDestPort=hpnicfAclIDSDestPort, hpnicfAclIPAclAdvancedSrcAddrType=hpnicfAclIPAclAdvancedSrcAddrType, hpnicfAclMACRowStatus=hpnicfAclMACRowStatus, hpnicfPfilterApplyDirection=hpnicfPfilterApplyDirection, hpnicfAclLinkAclNum=hpnicfAclLinkAclNum, hpnicfAclMib2Version=hpnicfAclMib2Version, hpnicfAclBasicAct=hpnicfAclBasicAct, hpnicfPfilterAclRuleCountStatus=hpnicfPfilterAclRuleCountStatus, hpnicfPfilterSumDirection=hpnicfPfilterSumDirection, hpnicfAclLinkDestMacWild=hpnicfAclLinkDestMacWild, hpnicfAclBasicSrcIp=hpnicfAclBasicSrcIp, hpnicfAclIfAny=hpnicfAclIfAny, CounterClear=CounterClear, hpnicfAclMACTimeRangeName=hpnicfAclMACTimeRangeName, hpnicfAclAdvancedTos=hpnicfAclAdvancedTos, hpnicfPfilterAclRuleRunInfoTable=hpnicfPfilterAclRuleRunInfoTable, hpnicfPfilterAction=hpnicfPfilterAction, hpnicfAclNumberGroupEntry=hpnicfAclNumberGroupEntry, hpnicfAclLinkL2LabelRangeOp=hpnicfAclLinkL2LabelRangeOp, hpnicfAclActiveUserAclNum=hpnicfAclActiveUserAclNum, hpnicfAclIPAclBasicRuleIndex=hpnicfAclIPAclBasicRuleIndex, hpnicfAclAdvancedRuleTable=hpnicfAclAdvancedRuleTable, hpnicfAclIPAclAdvancedDscp=hpnicfAclIPAclAdvancedDscp, hpnicfAclPacketfilterTrapObjects=hpnicfAclPacketfilterTrapObjects, hpnicfAclEnUserEntry=hpnicfAclEnUserEntry, hpnicfAclIPAclAdvancedDestAny=hpnicfAclIPAclAdvancedDestAny, hpnicfAclAdvancedSrcPort2=hpnicfAclAdvancedSrcPort2, hpnicfAclIPAclAdvancedCounting=hpnicfAclIPAclAdvancedCounting, hpnicfAclIPAclBasicVpnInstanceName=hpnicfAclIPAclBasicVpnInstanceName, hpnicfAclMib2GlobalGroup=hpnicfAclMib2GlobalGroup, hpnicfAclMACSrcMacWild=hpnicfAclMACSrcMacWild, hpnicfAclIDSSrcPort=hpnicfAclIDSSrcPort, hpnicfAclNumberGroupStep=hpnicfAclNumberGroupStep, hpnicfAclIfAct=hpnicfAclIfAct, hpnicfAclNumberGroupType=hpnicfAclNumberGroupType, hpnicfAclIPAclAdvancedDestPort2=hpnicfAclIPAclAdvancedDestPort2, hpnicfAclNameGroupTable=hpnicfAclNameGroupTable, hpnicfAclNumberGroupMatchOrder=hpnicfAclNumberGroupMatchOrder, hpnicfAclResourceReserved=hpnicfAclResourceReserved, hpnicfAclEnUserL5String=hpnicfAclEnUserL5String, hpnicfAclLinkSrcIfIndex=hpnicfAclLinkSrcIfIndex, hpnicfPfilterAclRuleMatchPackets=hpnicfPfilterAclRuleMatchPackets, hpnicfPfilterAclGroupPermitPkts=hpnicfPfilterAclGroupPermitPkts, hpnicfAclNumGroupTable=hpnicfAclNumGroupTable, hpnicfAclMib2CharacteristicsDesc=hpnicfAclMib2CharacteristicsDesc, hpnicfAclLinkVlanTag=hpnicfAclLinkVlanTag, hpnicfAclMode=hpnicfAclMode, hpnicfAclLinkL2LabelRangeBegin=hpnicfAclLinkL2LabelRangeBegin, hpnicfAclAdvancedDestPort2=hpnicfAclAdvancedDestPort2, hpnicfAclIfSubitem=hpnicfAclIfSubitem, hpnicfAclIDSSrcWild=hpnicfAclIDSSrcWild, hpnicfAclMACDestMacWild=hpnicfAclMACDestMacWild, hpnicfAclIPAclAdvancedDestPort1=hpnicfAclIPAclAdvancedDestPort1, hpnicfPfilterAclGroupPermitBytes=hpnicfPfilterAclGroupPermitBytes, hpnicfAclLinkLsapMask=hpnicfAclLinkLsapMask, hpnicfAclActiveRuntime=hpnicfAclActiveRuntime, hpnicfAclIPAclBasicAct=hpnicfAclIPAclBasicAct, hpnicfAclResourceSlot=hpnicfAclResourceSlot, hpnicfAclIDSDenyTime=hpnicfAclIDSDenyTime, hpnicfAclEnUserEnable=hpnicfAclEnUserEnable, hpnicfAclIPAclAdvancedDestAddr=hpnicfAclIPAclAdvancedDestAddr, hpnicfAclMACEnable=hpnicfAclMACEnable, hpnicfPfilterRunApplyAclIndex=hpnicfPfilterRunApplyAclIndex, hpnicfAcl=hpnicfAcl, hpnicfPfilterApplyObjIndex=hpnicfPfilterApplyObjIndex, hpnicfPfilterRunApplyObjType=hpnicfPfilterRunApplyObjType, hpnicfAclAdvancedCountClear=hpnicfAclAdvancedCountClear, hpnicfAclEnUserStartString=hpnicfAclEnUserStartString, hpnicfMACfilterSourceMac=hpnicfMACfilterSourceMac, hpnicfAclAdvancedEnable=hpnicfAclAdvancedEnable, hpnicfAclResourceTotal=hpnicfAclResourceTotal, RuleAction=RuleAction, hpnicfAclActiveLinkAclSubitem=hpnicfAclActiveLinkAclSubitem, hpnicfAclMACTable=hpnicfAclMACTable, hpnicfAclActiveIfIndex=hpnicfAclActiveIfIndex, hpnicfAclUserAct=hpnicfAclUserAct, hpnicfAclMib2EntityType=hpnicfAclMib2EntityType, hpnicfAclNameGroupMatchOrder=hpnicfAclNameGroupMatchOrder, hpnicfAclAdvancedAct=hpnicfAclAdvancedAct, hpnicfAclEnUserLog=hpnicfAclEnUserLog, hpnicfAclLinkSrcAny=hpnicfAclLinkSrcAny, hpnicfAclEnUserL2String=hpnicfAclEnUserL2String, hpnicfAclEnUserAct=hpnicfAclEnUserAct, hpnicfAclUserSubitem=hpnicfAclUserSubitem, hpnicfAclIPAclAdvancedSrcAny=hpnicfAclIPAclAdvancedSrcAny, hpnicfAclEnUserIPv6String=hpnicfAclEnUserIPv6String, hpnicfAclIPAclBasicCount=hpnicfAclIPAclBasicCount, DirectionType=DirectionType, hpnicfAclIPAclAdvancedCount=hpnicfAclIPAclAdvancedCount, hpnicfAclLinkFormatType=hpnicfAclLinkFormatType, hpnicfAclLinkDestIfIndex=hpnicfAclLinkDestIfIndex, hpnicfAclAdvancedDscp=hpnicfAclAdvancedDscp, hpnicfAclIPAclAdvancedComment=hpnicfAclIPAclAdvancedComment, hpnicfAclIPAclAdvancedSrcAddr=hpnicfAclIPAclAdvancedSrcAddr, hpnicfAclResourceConfigured=hpnicfAclResourceConfigured, hpnicfAclBasicRuleEntry=hpnicfAclBasicRuleEntry, hpnicfAclEnUserAclGroup=hpnicfAclEnUserAclGroup, hpnicfAclAdvancedRuleEntry=hpnicfAclAdvancedRuleEntry, hpnicfPfilterRunApplyObjIndex=hpnicfPfilterRunApplyObjIndex, hpnicfAclIPAclAdvancedCountClear=hpnicfAclIPAclAdvancedCountClear, hpnicfAclAdvancedSrcPort1=hpnicfAclAdvancedSrcPort1, hpnicfAclIPAclAdvancedIcmpType=hpnicfAclIPAclAdvancedIcmpType, hpnicfMACfilterDestinationMac=hpnicfMACfilterDestinationMac, hpnicfAclIPAclAdvancedTos=hpnicfAclIPAclAdvancedTos, hpnicfAclBasicEnable=hpnicfAclBasicEnable, hpnicfPfilterSumAclIndex=hpnicfPfilterSumAclIndex, AddressFlag=AddressFlag, hpnicfAclIPAclAdvancedReflective=hpnicfAclIPAclAdvancedReflective, hpnicfAclNumberGroupName=hpnicfAclNumberGroupName, hpnicfAclAdvancedSrcOp=hpnicfAclAdvancedSrcOp, hpnicfAclIPAclAdvancedTCPFlag=hpnicfAclIPAclAdvancedTCPFlag, hpnicfAclLinkDestMac=hpnicfAclLinkDestMac, hpnicfAclIPAclAdvancedTimeRangeName=hpnicfAclIPAclAdvancedTimeRangeName, hpnicfAclBasicSrcWild=hpnicfAclBasicSrcWild, hpnicfAclMACRuleIndex=hpnicfAclMACRuleIndex, hpnicfAclBasicLog=hpnicfAclBasicLog, DSCPValue=DSCPValue, hpnicfAclLinkAct=hpnicfAclLinkAct, hpnicfAclResourceGroup=hpnicfAclResourceGroup, hpnicfAclIPAclAdvancedIcmpCode=hpnicfAclIPAclAdvancedIcmpCode)
mibBuilder.exportSymbols("HPN-ICF-ACL-MIB", hpnicfAclMACCount=hpnicfAclMACCount, hpnicfAclIPAclAdvancedSrcPrefix=hpnicfAclIPAclAdvancedSrcPrefix, hpnicfPfilterProcessingStatus=hpnicfPfilterProcessingStatus, hpnicfAclEnUserRuleIndex=hpnicfAclEnUserRuleIndex, hpnicfAclLinkProtocol=hpnicfAclLinkProtocol, hpnicfAclIfTimeRangeName=hpnicfAclIfTimeRangeName, hpnicfAclIPAclAdvancedFlowLabel=hpnicfAclIPAclAdvancedFlowLabel, hpnicfAclMACDestMac=hpnicfAclMACDestMac, hpnicfAclIDSProtocol=hpnicfAclIDSProtocol, hpnicfAclIfRuleTable=hpnicfAclIfRuleTable, hpnicfAclMib2CharacteristicsIndex=hpnicfAclMib2CharacteristicsIndex, hpnicfAclNameGroupCreateName=hpnicfAclNameGroupCreateName, hpnicfAclResourceUsageTable=hpnicfAclResourceUsageTable, hpnicfAclIDSEntry=hpnicfAclIDSEntry, hpnicfAclLinkMplsExp=hpnicfAclLinkMplsExp, hpnicfAclAdvancedDestOp=hpnicfAclAdvancedDestOp, hpnicfAclLinkSrcMac=hpnicfAclLinkSrcMac, hpnicfAclMib2ModuleIndex=hpnicfAclMib2ModuleIndex, hpnicfAclActiveTable=hpnicfAclActiveTable, hpnicfAclNumGroupDescription=hpnicfAclNumGroupDescription, hpnicfAclAdvancedFragments=hpnicfAclAdvancedFragments, hpnicfAclEnUserMplsString=hpnicfAclEnUserMplsString, hpnicfAclAdvancedSrcIp=hpnicfAclAdvancedSrcIp, hpnicfAclUserEntry=hpnicfAclUserEntry, hpnicfAclIPAclAdvancedSrcWild=hpnicfAclIPAclAdvancedSrcWild, hpnicfAclIPAclBasicSrcAny=hpnicfAclIPAclBasicSrcAny, hpnicfAclNumberGroupRowStatus=hpnicfAclNumberGroupRowStatus, hpnicfAclIDSDestWild=hpnicfAclIDSDestWild, hpnicfAclBasicSubitem=hpnicfAclBasicSubitem, hpnicfAclUserFormatType=hpnicfAclUserFormatType, hpnicfAclMib2NodesGroup=hpnicfAclMib2NodesGroup, hpnicfAclAdvancedIcmpCode=hpnicfAclAdvancedIcmpCode, hpnicfAclAdvancedTimeRangeName=hpnicfAclAdvancedTimeRangeName, hpnicfMACfilterTrap=hpnicfMACfilterTrap, hpnicfAclMACCounting=hpnicfAclMACCounting, hpnicfAclEnUserCounting=hpnicfAclEnUserCounting, hpnicfAclLinkVlanPri=hpnicfAclLinkVlanPri, hpnicfAclIPAclAdvancedTCPFlagValue=hpnicfAclIPAclAdvancedTCPFlagValue, hpnicfAclMib2Objects=hpnicfAclMib2Objects, hpnicfAclIPAclAdvancedSrcPort2=hpnicfAclIPAclAdvancedSrcPort2, hpnicfAclIPAclAdvancedDestPrefix=hpnicfAclIPAclAdvancedDestPrefix, hpnicfAclNameGroupTypes=hpnicfAclNameGroupTypes, hpnicfAclActiveIpAclSubitem=hpnicfAclActiveIpAclSubitem, hpnicfAclResourceUsagePercent=hpnicfAclResourceUsagePercent, hpnicfAclEnUserL4String=hpnicfAclEnUserL4String, hpnicfAclEnUserTable=hpnicfAclEnUserTable, hpnicfAclIfCountClear=hpnicfAclIfCountClear, hpnicfAclAdvancedIcmpType=hpnicfAclAdvancedIcmpType, hpnicfAclUserEnable=hpnicfAclUserEnable, hpnicfAclResourceChip=hpnicfAclResourceChip, hpnicfAclEnUserCount=hpnicfAclEnUserCount, hpnicfAclLinkTable=hpnicfAclLinkTable, hpnicfPfilterDefaultAction=hpnicfPfilterDefaultAction, hpnicfAclIPAclAdvancedRouteTypeValue=hpnicfAclIPAclAdvancedRouteTypeValue, hpnicfAclIDSDestIp=hpnicfAclIDSDestIp, hpnicfPfilterRunApplyAclType=hpnicfPfilterRunApplyAclType, hpnicfAclEnUserComment=hpnicfAclEnUserComment, hpnicfPfilterAclRuleMatchBytes=hpnicfPfilterAclRuleMatchBytes, hpnicfAclIPAclAdvancedSrcPort1=hpnicfAclIPAclAdvancedSrcPort1, hpnicfAclEnUserTimeRangeName=hpnicfAclEnUserTimeRangeName, hpnicfAclMACLog=hpnicfAclMACLog, hpnicfAclResourceUsageEntry=hpnicfAclResourceUsageEntry, hpnicfPfilterPacketNumber=hpnicfPfilterPacketNumber, TCPFlag=TCPFlag, hpnicfAclLinkSubitem=hpnicfAclLinkSubitem, hpnicfAclAdvancedAclNum=hpnicfAclAdvancedAclNum, hpnicfAclAdvancedCount=hpnicfAclAdvancedCount, hpnicfAclAdvancedDestPort1=hpnicfAclAdvancedDestPort1, hpnicfPfilterAclGroupStatus=hpnicfPfilterAclGroupStatus, hpnicfAclNumGroupMatchOrder=hpnicfAclNumGroupMatchOrder, hpnicfAclAdvancedProtocol=hpnicfAclAdvancedProtocol, hpnicfAclAdvancedLog=hpnicfAclAdvancedLog, hpnicfAclMib2CapabilityEntry=hpnicfAclMib2CapabilityEntry, hpnicfAclIDSAct=hpnicfAclIDSAct, hpnicfAclIDSName=hpnicfAclIDSName, hpnicfPfilterStatisticSumTable=hpnicfPfilterStatisticSumTable, hpnicfAclAdvancedSubitem=hpnicfAclAdvancedSubitem, hpnicfPfilterApplyCountClear=hpnicfPfilterApplyCountClear, hpnicfPfilterRunApplyDirection=hpnicfPfilterRunApplyDirection, hpnicfAclLinkTimeRangeName=hpnicfAclLinkTimeRangeName, hpnicfAclActiveIpAclNum=hpnicfAclActiveIpAclNum, hpnicfPfilterAclGroupRunInfoEntry=hpnicfPfilterAclGroupRunInfoEntry, hpnicfAclNameGroupIndex=hpnicfAclNameGroupIndex, hpnicfAclLinkDestVlanId=hpnicfAclLinkDestVlanId, hpnicfAclIPAclBasicCountClear=hpnicfAclIPAclBasicCountClear, PortOp=PortOp, hpnicfPfilterStatisticSumEntry=hpnicfPfilterStatisticSumEntry, hpnicfAclIfLog=hpnicfAclIfLog, hpnicfAclIPAclAdvancedLog=hpnicfAclIPAclAdvancedLog, hpnicfAclMib2Mode=hpnicfAclMib2Mode, hpnicfAclIPAclAdvancedTable=hpnicfAclIPAclAdvancedTable, hpnicfAclIfEnable=hpnicfAclIfEnable, hpnicfAclIPAclBasicComment=hpnicfAclIPAclBasicComment, hpnicfAclMib2CharacteristicsValue=hpnicfAclMib2CharacteristicsValue, hpnicfPfilterInterface=hpnicfPfilterInterface, hpnicfAclBasicRuleTable=hpnicfAclBasicRuleTable, hpnicfAclIPAclBasicFragmentFlag=hpnicfAclIPAclBasicFragmentFlag, hpnicfAclNumGroupRowStatus=hpnicfAclNumGroupRowStatus, hpnicfAclMACTypeMask=hpnicfAclMACTypeMask, PYSNMP_MODULE_ID=hpnicfAcl, hpnicfAclIPAclAdvancedProtocol=hpnicfAclIPAclAdvancedProtocol, hpnicfPfilterSumRuleIndex=hpnicfPfilterSumRuleIndex, hpnicfAclIPAclAdvancedEnable=hpnicfAclIPAclAdvancedEnable)
