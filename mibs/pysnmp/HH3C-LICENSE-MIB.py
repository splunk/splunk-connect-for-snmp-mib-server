#
# PySNMP MIB module HH3C-LICENSE-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/HH3C-LICENSE-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 19:14:57 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, OctetString, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "Integer", "OctetString", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
SingleValueConstraint, ConstraintsUnion, ValueSizeConstraint, ConstraintsIntersection, ValueRangeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "SingleValueConstraint", "ConstraintsUnion", "ValueSizeConstraint", "ConstraintsIntersection", "ValueRangeConstraint")
PhysicalIndex, PhysicalIndexOrZero = mibBuilder.importSymbols("ENTITY-MIB", "PhysicalIndex", "PhysicalIndexOrZero")
hh3cCommon, = mibBuilder.importSymbols("HH3C-OID-MIB", "hh3cCommon")
SnmpAdminString, = mibBuilder.importSymbols("SNMP-FRAMEWORK-MIB", "SnmpAdminString")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
MibIdentifier, IpAddress, TimeTicks, ObjectIdentity, Unsigned32, Bits, MibScalar, MibTable, MibTableRow, MibTableColumn, Counter32, ModuleIdentity, Gauge32, iso, Counter64, NotificationType, Integer32 = mibBuilder.importSymbols("SNMPv2-SMI", "MibIdentifier", "IpAddress", "TimeTicks", "ObjectIdentity", "Unsigned32", "Bits", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Counter32", "ModuleIdentity", "Gauge32", "iso", "Counter64", "NotificationType", "Integer32")
TextualConvention, DateAndTime, DisplayString, RowStatus, TruthValue = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DateAndTime", "DisplayString", "RowStatus", "TruthValue")
hh3cLicense = ModuleIdentity((1, 3, 6, 1, 4, 1, 25506, 2, 145))
hh3cLicense.setRevisions(('2013-09-18 10:00',))
if mibBuilder.loadTexts: hh3cLicense.setLastUpdated('201309181000Z')
if mibBuilder.loadTexts: hh3cLicense.setOrganization('Hangzhou H3C Technologies Co., Ltd.')
hh3cLicenseScalarObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 25506, 2, 145, 1))
hh3cLicenseTables = MibIdentifier((1, 3, 6, 1, 4, 1, 25506, 2, 145, 2))
hh3cLicenseNotifications = MibIdentifier((1, 3, 6, 1, 4, 1, 25506, 2, 145, 3))
hh3cLicenseNotifyEnable = MibScalar((1, 3, 6, 1, 4, 1, 25506, 2, 145, 1, 1), TruthValue().clone('true')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hh3cLicenseNotifyEnable.setStatus('current')
hh3cLicenseOpEntryMaxNum = MibScalar((1, 3, 6, 1, 4, 1, 25506, 2, 145, 1, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 20)).clone(10)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hh3cLicenseOpEntryMaxNum.setStatus('current')
hh3cLicenseNextFreeOpIndex = MibScalar((1, 3, 6, 1, 4, 1, 25506, 2, 145, 1, 3), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cLicenseNextFreeOpIndex.setStatus('current')
hh3cLicenseDevInfoTable = MibTable((1, 3, 6, 1, 4, 1, 25506, 2, 145, 2, 1), )
if mibBuilder.loadTexts: hh3cLicenseDevInfoTable.setStatus('current')
hh3cLicenseDevInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 25506, 2, 145, 2, 1, 1), ).setIndexNames((0, "HH3C-LICENSE-MIB", "hh3cLicensePhysicalIndex"))
if mibBuilder.loadTexts: hh3cLicenseDevInfoEntry.setStatus('current')
hh3cLicensePhysicalIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 145, 2, 1, 1, 1), PhysicalIndex()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: hh3cLicensePhysicalIndex.setStatus('current')
hh3cLicenseSN = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 145, 2, 1, 1, 2), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cLicenseSN.setStatus('current')
hh3cLicenseDeviceIDType = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 145, 2, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("invalid", 1), ("keyString", 2), ("file", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cLicenseDeviceIDType.setStatus('current')
hh3cLicenseDeviceID = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 145, 2, 1, 1, 4), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cLicenseDeviceID.setStatus('current')
hh3cLicenseHardwareInfo = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 145, 2, 1, 1, 5), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cLicenseHardwareInfo.setStatus('current')
hh3cLicenseMaxNum = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 145, 2, 1, 1, 6), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cLicenseMaxNum.setStatus('current')
hh3cLicenseUsedNum = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 145, 2, 1, 1, 7), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cLicenseUsedNum.setStatus('current')
hh3cLicenseRecyclableNum = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 145, 2, 1, 1, 8), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cLicenseRecyclableNum.setStatus('current')
hh3cLicenseInstallType = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 145, 2, 1, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("invalid", 1), ("installInChassis", 2), ("installInSlot", 3), ("installInCPU", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cLicenseInstallType.setStatus('current')
hh3cLicenseFileStoragePath = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 145, 2, 1, 1, 10), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cLicenseFileStoragePath.setStatus('current')
hh3cLicenseGeneralTable = MibTable((1, 3, 6, 1, 4, 1, 25506, 2, 145, 2, 2), )
if mibBuilder.loadTexts: hh3cLicenseGeneralTable.setStatus('current')
hh3cLicenseGeneralEntry = MibTableRow((1, 3, 6, 1, 4, 1, 25506, 2, 145, 2, 2, 1), ).setIndexNames((0, "HH3C-LICENSE-MIB", "hh3cLicensePhysicalIndex"), (0, "HH3C-LICENSE-MIB", "hh3cLicenseIndex"))
if mibBuilder.loadTexts: hh3cLicenseGeneralEntry.setStatus('current')
hh3cLicenseIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 145, 2, 2, 1, 1), Unsigned32()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: hh3cLicenseIndex.setStatus('current')
hh3cLicenseFeature = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 145, 2, 2, 1, 2), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 1024))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cLicenseFeature.setStatus('current')
hh3cLicenseProductDescr = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 145, 2, 2, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 1024))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cLicenseProductDescr.setStatus('current')
hh3cLicenseFileDescr = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 145, 2, 2, 1, 4), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 1024))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cLicenseFileDescr.setStatus('current')
hh3cLicenseState = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 145, 2, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("invalid", 1), ("inuse", 2), ("usable", 3), ("expired", 4), ("uninstalled", 5), ("unusable", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cLicenseState.setStatus('current')
hh3cLicenseActivationFile = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 145, 2, 2, 1, 6), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cLicenseActivationFile.setStatus('current')
hh3cLicenseActivationKey = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 145, 2, 2, 1, 7), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cLicenseActivationKey.setStatus('current')
hh3cLicenseLicenseKey = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 145, 2, 2, 1, 8), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cLicenseLicenseKey.setStatus('current')
hh3cLicenseUninstActivationFile = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 145, 2, 2, 1, 9), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cLicenseUninstActivationFile.setStatus('current')
hh3cLicenseUninstActivationKey = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 145, 2, 2, 1, 10), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cLicenseUninstActivationKey.setStatus('current')
hh3cLicenseType = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 145, 2, 2, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("unknown", 1), ("permanent", 2), ("daysRestricted", 3), ("trialDaysRestricted", 4), ("dateRestricted", 5), ("trialDateRestricted", 6), ("countRestricted", 7), ("trialCountRestricted", 8)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cLicenseType.setStatus('current')
hh3cLicenseInstalledTime = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 145, 2, 2, 1, 12), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cLicenseInstalledTime.setStatus('current')
hh3cLicenseUninstalledTime = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 145, 2, 2, 1, 13), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cLicenseUninstalledTime.setStatus('current')
hh3cLicenseDaysLeft = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 145, 2, 2, 1, 14), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cLicenseDaysLeft.setStatus('current')
hh3cLicenseValidityStart = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 145, 2, 2, 1, 15), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cLicenseValidityStart.setStatus('current')
hh3cLicenseValidityEnd = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 145, 2, 2, 1, 16), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cLicenseValidityEnd.setStatus('current')
hh3cLicenseExpiredDays = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 145, 2, 2, 1, 17), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cLicenseExpiredDays.setStatus('current')
hh3cLicenseCount = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 145, 2, 2, 1, 18), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cLicenseCount.setStatus('current')
hh3cLicenseFeatureTable = MibTable((1, 3, 6, 1, 4, 1, 25506, 2, 145, 2, 3), )
if mibBuilder.loadTexts: hh3cLicenseFeatureTable.setStatus('current')
hh3cLicenseFeatureEntry = MibTableRow((1, 3, 6, 1, 4, 1, 25506, 2, 145, 2, 3, 1), ).setIndexNames((0, "HH3C-LICENSE-MIB", "hh3cLicensePhysicalIndex"), (1, "HH3C-LICENSE-MIB", "hh3cLicenseFeatureName"))
if mibBuilder.loadTexts: hh3cLicenseFeatureEntry.setStatus('current')
hh3cLicenseFeatureName = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 145, 2, 3, 1, 1), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(1, 31))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cLicenseFeatureName.setStatus('current')
hh3cLicenseFeatureState = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 145, 2, 3, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("notLicensed", 1), ("trialLicense", 2), ("formalLicense", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cLicenseFeatureState.setStatus('current')
hh3cLicenseOpTable = MibTable((1, 3, 6, 1, 4, 1, 25506, 2, 145, 2, 4), )
if mibBuilder.loadTexts: hh3cLicenseOpTable.setStatus('current')
hh3cLicenseOpEntry = MibTableRow((1, 3, 6, 1, 4, 1, 25506, 2, 145, 2, 4, 1), ).setIndexNames((0, "HH3C-LICENSE-MIB", "hh3cLicenseOpIndex"))
if mibBuilder.loadTexts: hh3cLicenseOpEntry.setStatus('current')
hh3cLicenseOpIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 145, 2, 4, 1, 1), Unsigned32()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: hh3cLicenseOpIndex.setStatus('current')
hh3cLicenseOpPhysicalIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 145, 2, 4, 1, 2), PhysicalIndexOrZero()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cLicenseOpPhysicalIndex.setStatus('current')
hh3cLicenseOpType = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 145, 2, 4, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("compress", 1), ("delete", 2), ("installActivationFile", 3), ("installActivationKey", 4), ("installLicenseKey", 5), ("uninstallActivationFile", 6), ("uninstallActivationKey", 7), ("uninstallLicenseKey", 8)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cLicenseOpType.setStatus('current')
hh3cLicenseOpString = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 145, 2, 4, 1, 4), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cLicenseOpString.setStatus('current')
hh3cLicenseOpNotifyEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 145, 2, 4, 1, 5), TruthValue().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cLicenseOpNotifyEnable.setStatus('current')
hh3cLicenseOpRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 145, 2, 4, 1, 6), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cLicenseOpRowStatus.setStatus('current')
hh3cLicenseOpState = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 145, 2, 4, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("opInProgress", 1), ("opSuccessful", 2), ("opFailed", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cLicenseOpState.setStatus('current')
hh3cLicenseOpFailedReason = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 145, 2, 4, 1, 8), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cLicenseOpFailedReason.setStatus('current')
hh3cLicenseOpEndTime = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 145, 2, 4, 1, 9), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cLicenseOpEndTime.setStatus('current')
hh3cLicenseNotificationPrefix = MibIdentifier((1, 3, 6, 1, 4, 1, 25506, 2, 145, 3, 0))
hh3cLicenseOpCompletion = NotificationType((1, 3, 6, 1, 4, 1, 25506, 2, 145, 3, 0, 1)).setObjects(("HH3C-LICENSE-MIB", "hh3cLicenseOpIndex"), ("HH3C-LICENSE-MIB", "hh3cLicenseOpPhysicalIndex"), ("HH3C-LICENSE-MIB", "hh3cLicenseOpType"), ("HH3C-LICENSE-MIB", "hh3cLicenseOpString"), ("HH3C-LICENSE-MIB", "hh3cLicenseOpState"), ("HH3C-LICENSE-MIB", "hh3cLicenseOpFailedReason"))
if mibBuilder.loadTexts: hh3cLicenseOpCompletion.setStatus('current')
hh3cLicenseActivationFileLost = NotificationType((1, 3, 6, 1, 4, 1, 25506, 2, 145, 3, 0, 2)).setObjects(("HH3C-LICENSE-MIB", "hh3cLicensePhysicalIndex"), ("HH3C-LICENSE-MIB", "hh3cLicenseActivationFile"))
if mibBuilder.loadTexts: hh3cLicenseActivationFileLost.setStatus('current')
hh3cLicenseActivationFileRestored = NotificationType((1, 3, 6, 1, 4, 1, 25506, 2, 145, 3, 0, 3)).setObjects(("HH3C-LICENSE-MIB", "hh3cLicensePhysicalIndex"), ("HH3C-LICENSE-MIB", "hh3cLicenseActivationFile"))
if mibBuilder.loadTexts: hh3cLicenseActivationFileRestored.setStatus('current')
hh3cLicenseExpired = NotificationType((1, 3, 6, 1, 4, 1, 25506, 2, 145, 3, 0, 4)).setObjects(("HH3C-LICENSE-MIB", "hh3cLicenseFeatureName"), ("HH3C-LICENSE-MIB", "hh3cLicenseFeatureState"))
if mibBuilder.loadTexts: hh3cLicenseExpired.setStatus('current')
hh3cLicenseExpireWarning = NotificationType((1, 3, 6, 1, 4, 1, 25506, 2, 145, 3, 0, 5)).setObjects(("HH3C-LICENSE-MIB", "hh3cLicenseFeatureName"), ("HH3C-LICENSE-MIB", "hh3cLicenseFeatureState"), ("HH3C-LICENSE-MIB", "hh3cLicenseBindValidityPeriodRemaining"))
if mibBuilder.loadTexts: hh3cLicenseExpireWarning.setStatus('current')
hh3cLicenseNotificationBindings = MibIdentifier((1, 3, 6, 1, 4, 1, 25506, 2, 145, 3, 1))
hh3cLicenseBindValidityPeriodRemaining = MibScalar((1, 3, 6, 1, 4, 1, 25506, 2, 145, 3, 1, 1), Unsigned32()).setUnits('days').setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: hh3cLicenseBindValidityPeriodRemaining.setStatus('current')
mibBuilder.exportSymbols("HH3C-LICENSE-MIB", hh3cLicenseOpTable=hh3cLicenseOpTable, hh3cLicenseValidityStart=hh3cLicenseValidityStart, hh3cLicenseProductDescr=hh3cLicenseProductDescr, hh3cLicenseRecyclableNum=hh3cLicenseRecyclableNum, hh3cLicenseType=hh3cLicenseType, hh3cLicenseBindValidityPeriodRemaining=hh3cLicenseBindValidityPeriodRemaining, hh3cLicenseFileDescr=hh3cLicenseFileDescr, hh3cLicenseActivationFileRestored=hh3cLicenseActivationFileRestored, hh3cLicenseNotificationBindings=hh3cLicenseNotificationBindings, hh3cLicenseUsedNum=hh3cLicenseUsedNum, hh3cLicenseCount=hh3cLicenseCount, hh3cLicenseOpNotifyEnable=hh3cLicenseOpNotifyEnable, hh3cLicenseActivationFile=hh3cLicenseActivationFile, hh3cLicensePhysicalIndex=hh3cLicensePhysicalIndex, hh3cLicenseOpCompletion=hh3cLicenseOpCompletion, hh3cLicenseIndex=hh3cLicenseIndex, hh3cLicenseOpEntry=hh3cLicenseOpEntry, hh3cLicenseFeatureTable=hh3cLicenseFeatureTable, hh3cLicenseOpType=hh3cLicenseOpType, hh3cLicenseFeatureEntry=hh3cLicenseFeatureEntry, hh3cLicenseTables=hh3cLicenseTables, hh3cLicenseInstalledTime=hh3cLicenseInstalledTime, hh3cLicenseUninstalledTime=hh3cLicenseUninstalledTime, hh3cLicenseState=hh3cLicenseState, hh3cLicenseNotifyEnable=hh3cLicenseNotifyEnable, hh3cLicenseFeatureState=hh3cLicenseFeatureState, hh3cLicenseGeneralTable=hh3cLicenseGeneralTable, hh3cLicenseOpEntryMaxNum=hh3cLicenseOpEntryMaxNum, hh3cLicenseValidityEnd=hh3cLicenseValidityEnd, hh3cLicenseUninstActivationKey=hh3cLicenseUninstActivationKey, hh3cLicenseOpIndex=hh3cLicenseOpIndex, hh3cLicenseFeature=hh3cLicenseFeature, hh3cLicenseDeviceIDType=hh3cLicenseDeviceIDType, hh3cLicenseActivationKey=hh3cLicenseActivationKey, hh3cLicenseExpiredDays=hh3cLicenseExpiredDays, PYSNMP_MODULE_ID=hh3cLicense, hh3cLicenseDaysLeft=hh3cLicenseDaysLeft, hh3cLicense=hh3cLicense, hh3cLicenseOpFailedReason=hh3cLicenseOpFailedReason, hh3cLicenseNotificationPrefix=hh3cLicenseNotificationPrefix, hh3cLicenseActivationFileLost=hh3cLicenseActivationFileLost, hh3cLicenseGeneralEntry=hh3cLicenseGeneralEntry, hh3cLicenseFeatureName=hh3cLicenseFeatureName, hh3cLicenseDevInfoEntry=hh3cLicenseDevInfoEntry, hh3cLicenseDeviceID=hh3cLicenseDeviceID, hh3cLicenseHardwareInfo=hh3cLicenseHardwareInfo, hh3cLicenseDevInfoTable=hh3cLicenseDevInfoTable, hh3cLicenseOpRowStatus=hh3cLicenseOpRowStatus, hh3cLicenseExpired=hh3cLicenseExpired, hh3cLicenseNextFreeOpIndex=hh3cLicenseNextFreeOpIndex, hh3cLicenseInstallType=hh3cLicenseInstallType, hh3cLicenseUninstActivationFile=hh3cLicenseUninstActivationFile, hh3cLicenseOpEndTime=hh3cLicenseOpEndTime, hh3cLicenseLicenseKey=hh3cLicenseLicenseKey, hh3cLicenseNotifications=hh3cLicenseNotifications, hh3cLicenseScalarObjects=hh3cLicenseScalarObjects, hh3cLicenseOpState=hh3cLicenseOpState, hh3cLicenseOpPhysicalIndex=hh3cLicenseOpPhysicalIndex, hh3cLicenseFileStoragePath=hh3cLicenseFileStoragePath, hh3cLicenseOpString=hh3cLicenseOpString, hh3cLicenseExpireWarning=hh3cLicenseExpireWarning, hh3cLicenseSN=hh3cLicenseSN, hh3cLicenseMaxNum=hh3cLicenseMaxNum)
