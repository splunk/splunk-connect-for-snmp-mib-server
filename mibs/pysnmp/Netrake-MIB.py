#
# PySNMP MIB module Netrake-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/Netrake-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 20:16:34 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, ObjectIdentifier, Integer = mibBuilder.importSymbols("ASN1", "OctetString", "ObjectIdentifier", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsUnion, SingleValueConstraint, ValueSizeConstraint, ValueRangeConstraint, ConstraintsIntersection = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsUnion", "SingleValueConstraint", "ValueSizeConstraint", "ValueRangeConstraint", "ConstraintsIntersection")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
NotificationType, Gauge32, MibIdentifier, TimeTicks, Unsigned32, Integer32, Bits, MibScalar, MibTable, MibTableRow, MibTableColumn, ModuleIdentity, Counter64, iso, ObjectIdentity, Counter32, IpAddress, enterprises = mibBuilder.importSymbols("SNMPv2-SMI", "NotificationType", "Gauge32", "MibIdentifier", "TimeTicks", "Unsigned32", "Integer32", "Bits", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "ModuleIdentity", "Counter64", "iso", "ObjectIdentity", "Counter32", "IpAddress", "enterprises")
TextualConvention, DisplayString, RowStatus, DateAndTime = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString", "RowStatus", "DateAndTime")
netrake = ModuleIdentity((1, 3, 6, 1, 4, 1, 10950))
netrake.setRevisions(('2001-09-20 10:05', '2006-12-13 10:05', '2007-01-05 10:05',))
if mibBuilder.loadTexts: netrake.setLastUpdated('200612131005Z')
if mibBuilder.loadTexts: netrake.setOrganization('Netrake 3000 Technology Drive Suite 100 Plano, Texas 75074 phone: 214 291 1000 fax: 214 291 1010')
org = MibIdentifier((1, 3))
dod = MibIdentifier((1, 3, 6))
internet = MibIdentifier((1, 3, 6, 1))
private = MibIdentifier((1, 3, 6, 1, 4))
enterprises = MibIdentifier((1, 3, 6, 1, 4, 1))
products = MibIdentifier((1, 3, 6, 1, 4, 1, 10950, 1))
nCite = MibIdentifier((1, 3, 6, 1, 4, 1, 10950, 1, 1))
chassis = MibIdentifier((1, 3, 6, 1, 4, 1, 10950, 1, 1, 1))
nCiteSystem = MibIdentifier((1, 3, 6, 1, 4, 1, 10950, 1, 1, 2))
alarm = MibIdentifier((1, 3, 6, 1, 4, 1, 10950, 1, 1, 3))
switchNotifications = MibIdentifier((1, 3, 6, 1, 4, 1, 10950, 1, 1, 4))
nCiteRedundant = MibIdentifier((1, 3, 6, 1, 4, 1, 10950, 1, 1, 5))
nCiteStats = MibIdentifier((1, 3, 6, 1, 4, 1, 10950, 1, 1, 6))
diagnostics = MibIdentifier((1, 3, 6, 1, 4, 1, 10950, 1, 1, 7))
policyProvisioning = MibIdentifier((1, 3, 6, 1, 4, 1, 10950, 1, 1, 8))
nCiteStaticRoutes = MibIdentifier((1, 3, 6, 1, 4, 1, 10950, 1, 1, 9))
nCiteArpConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 10950, 1, 1, 10))
ipPortConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 10950, 1, 1, 11))
nCiteOutSyncFlag = MibScalar((1, 3, 6, 1, 4, 1, 10950, 1, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("no", 0), ("yes", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nCiteOutSyncFlag.setStatus('deprecated')
trapAckEnable = MibScalar((1, 3, 6, 1, 4, 1, 10950, 1, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: trapAckEnable.setStatus('current')
linkUpTrapAck = MibScalar((1, 3, 6, 1, 4, 1, 10950, 1, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("notAck", 0), ("ack", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: linkUpTrapAck.setStatus('current')
linkDownTrapAck = MibScalar((1, 3, 6, 1, 4, 1, 10950, 1, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("notAck", 0), ("ack", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: linkDownTrapAck.setStatus('current')
nCiteNTA = MibIdentifier((1, 3, 6, 1, 4, 1, 10950, 1, 1, 16))
nCiteRogue = MibIdentifier((1, 3, 6, 1, 4, 1, 10950, 1, 1, 17))
licenseInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 10950, 1, 1, 18))
nCiteRIPConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 10950, 1, 1, 19))
nCiteAuthConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 10950, 1, 1, 20))
linkUpTrapAckSource = MibScalar((1, 3, 6, 1, 4, 1, 10950, 1, 1, 21), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: linkUpTrapAckSource.setStatus('current')
linkDownTrapAckSource = MibScalar((1, 3, 6, 1, 4, 1, 10950, 1, 1, 22), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: linkDownTrapAckSource.setStatus('current')
chasGen = MibIdentifier((1, 3, 6, 1, 4, 1, 10950, 1, 1, 1, 1))
chasPwr = MibIdentifier((1, 3, 6, 1, 4, 1, 10950, 1, 1, 1, 2))
chasFan = MibIdentifier((1, 3, 6, 1, 4, 1, 10950, 1, 1, 1, 3))
chasBrd = MibIdentifier((1, 3, 6, 1, 4, 1, 10950, 1, 1, 1, 4))
resourceUsageTable = MibTable((1, 3, 6, 1, 4, 1, 10950, 1, 1, 2, 1), )
if mibBuilder.loadTexts: resourceUsageTable.setStatus('current')
resourceUsageEntry = MibTableRow((1, 3, 6, 1, 4, 1, 10950, 1, 1, 2, 1, 1), ).setIndexNames((0, "Netrake-MIB", "processorIndex"))
if mibBuilder.loadTexts: resourceUsageEntry.setStatus('current')
processorIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 10950, 1, 1, 2, 1, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("managementProc", 1), ("controlProcA", 2), ("controlProcB", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: processorIndex.setStatus('current')
memTotal = MibTableColumn((1, 3, 6, 1, 4, 1, 10950, 1, 1, 2, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: memTotal.setStatus('current')
memUsed = MibTableColumn((1, 3, 6, 1, 4, 1, 10950, 1, 1, 2, 1, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: memUsed.setStatus('current')
cpuUsage = MibTableColumn((1, 3, 6, 1, 4, 1, 10950, 1, 1, 2, 1, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpuUsage.setStatus('current')
systemSoftwareVersion = MibScalar((1, 3, 6, 1, 4, 1, 10950, 1, 1, 2, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: systemSoftwareVersion.setStatus('current')
systemRestoreFlag = MibScalar((1, 3, 6, 1, 4, 1, 10950, 1, 1, 2, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("normal", 0), ("outOfSync", 1), ("refreshStarted", 2))).clone('normal')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: systemRestoreFlag.setStatus('deprecated')
systemOperState = MibScalar((1, 3, 6, 1, 4, 1, 10950, 1, 1, 2, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: systemOperState.setStatus('current')
systemAdminState = MibScalar((1, 3, 6, 1, 4, 1, 10950, 1, 1, 2, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: systemAdminState.setStatus('current')
systemOperStateChangeTrap = NotificationType((1, 3, 6, 1, 4, 1, 10950, 1, 1, 2, 6)).setObjects(("Netrake-MIB", "systemOperState"))
if mibBuilder.loadTexts: systemOperStateChangeTrap.setStatus('current')
systemOperStateChangeTrapAck = MibScalar((1, 3, 6, 1, 4, 1, 10950, 1, 1, 2, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("notAck", 0), ("ack", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: systemOperStateChangeTrapAck.setStatus('current')
systemOperStateChangeTrapAckSource = MibScalar((1, 3, 6, 1, 4, 1, 10950, 1, 1, 2, 8), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: systemOperStateChangeTrapAckSource.setStatus('current')
systemTrapAckTable = MibTable((1, 3, 6, 1, 4, 1, 10950, 1, 1, 2, 9), )
if mibBuilder.loadTexts: systemTrapAckTable.setStatus('current')
systemTrapAckEntry = MibTableRow((1, 3, 6, 1, 4, 1, 10950, 1, 1, 2, 9, 1), ).setIndexNames((0, "Netrake-MIB", "systemSnmpMgrIpAddress"))
if mibBuilder.loadTexts: systemTrapAckEntry.setStatus('current')
systemSnmpMgrIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 10950, 1, 1, 2, 9, 1, 1), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: systemSnmpMgrIpAddress.setStatus('current')
systemTrapNoAck = MibTableColumn((1, 3, 6, 1, 4, 1, 10950, 1, 1, 2, 9, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("ok", 0), ("ackNotReceived", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: systemTrapNoAck.setStatus('current')
activeAlarmTable = MibTable((1, 3, 6, 1, 4, 1, 10950, 1, 1, 3, 1), )
if mibBuilder.loadTexts: activeAlarmTable.setStatus('current')
activeAlarmEntry = MibTableRow((1, 3, 6, 1, 4, 1, 10950, 1, 1, 3, 1, 1), ).setIndexNames((0, "Netrake-MIB", "activeAlarmIndex"))
if mibBuilder.loadTexts: activeAlarmEntry.setStatus('current')
activeAlarmIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 10950, 1, 1, 3, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: activeAlarmIndex.setStatus('current')
activeAlarmId = MibTableColumn((1, 3, 6, 1, 4, 1, 10950, 1, 1, 3, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: activeAlarmId.setStatus('current')
activeAlarmType = MibTableColumn((1, 3, 6, 1, 4, 1, 10950, 1, 1, 3, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: activeAlarmType.setStatus('current')
activeAlarmServiceAffecting = MibTableColumn((1, 3, 6, 1, 4, 1, 10950, 1, 1, 3, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("notServiceAffecting", 1), ("serviceAffecting", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: activeAlarmServiceAffecting.setStatus('current')
activeAlarmCategory = MibTableColumn((1, 3, 6, 1, 4, 1, 10950, 1, 1, 3, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("hardware", 1), ("software", 2), ("service", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: activeAlarmCategory.setStatus('current')
activeAlarmTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 10950, 1, 1, 3, 1, 1, 6), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: activeAlarmTimeStamp.setStatus('current')
activeAlarmSlotNum = MibTableColumn((1, 3, 6, 1, 4, 1, 10950, 1, 1, 3, 1, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 14))).setMaxAccess("readonly")
if mibBuilder.loadTexts: activeAlarmSlotNum.setStatus('current')
activeAlarmPortNum = MibTableColumn((1, 3, 6, 1, 4, 1, 10950, 1, 1, 3, 1, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 48))).setMaxAccess("readonly")
if mibBuilder.loadTexts: activeAlarmPortNum.setStatus('current')
activeAlarmSysUpTime = MibTableColumn((1, 3, 6, 1, 4, 1, 10950, 1, 1, 3, 1, 1, 9), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: activeAlarmSysUpTime.setStatus('current')
activeAlarmDevType = MibTableColumn((1, 3, 6, 1, 4, 1, 10950, 1, 1, 3, 1, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 0))).clone(namedValues=NamedValues(("managementProc", 1), ("controlProc", 2), ("netrakeControlProcessor", 3), ("gigE", 4), ("fastEther", 5), ("chassisFan", 6), ("chassisPowerSupply", 7), ("oc12", 8), ("unknown", 0))).clone('unknown')).setMaxAccess("readonly")
if mibBuilder.loadTexts: activeAlarmDevType.setStatus('current')
activeAlarmAdditionalInfo = MibTableColumn((1, 3, 6, 1, 4, 1, 10950, 1, 1, 3, 1, 1, 11), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: activeAlarmAdditionalInfo.setStatus('current')
activeAlarmOccurances = MibTableColumn((1, 3, 6, 1, 4, 1, 10950, 1, 1, 3, 1, 1, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: activeAlarmOccurances.setStatus('current')
acitveAlarmReportingSource = MibTableColumn((1, 3, 6, 1, 4, 1, 10950, 1, 1, 3, 1, 1, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acitveAlarmReportingSource.setStatus('deprecated')
activeAlarmSeverity = MibTableColumn((1, 3, 6, 1, 4, 1, 10950, 1, 1, 3, 1, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 0, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("critical", 1), ("unknown", 0), ("major", 2), ("minor", 3), ("warning", 4), ("clear", 5), ("info", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: activeAlarmSeverity.setStatus('current')
activeAlarmDisplayString = MibTableColumn((1, 3, 6, 1, 4, 1, 10950, 1, 1, 3, 1, 1, 15), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: activeAlarmDisplayString.setStatus('current')
activeAlarmSubType = MibTableColumn((1, 3, 6, 1, 4, 1, 10950, 1, 1, 3, 1, 1, 16), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: activeAlarmSubType.setStatus('current')
activeAlarmEventFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 10950, 1, 1, 3, 1, 1, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("alarm", 1), ("event", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: activeAlarmEventFlag.setStatus('current')
histEvent = MibIdentifier((1, 3, 6, 1, 4, 1, 10950, 1, 1, 3, 2))
postAlarm = NotificationType((1, 3, 6, 1, 4, 1, 10950, 1, 1, 3, 3)).setObjects(("Netrake-MIB", "acitveAlarmReportingSource"), ("Netrake-MIB", "activeAlarmAdditionalInfo"), ("Netrake-MIB", "activeAlarmCategory"), ("Netrake-MIB", "activeAlarmDevType"), ("Netrake-MIB", "activeAlarmDisplayString"), ("Netrake-MIB", "activeAlarmId"), ("Netrake-MIB", "activeAlarmOccurances"), ("Netrake-MIB", "activeAlarmPortNum"), ("Netrake-MIB", "activeAlarmServiceAffecting"), ("Netrake-MIB", "activeAlarmSeverity"), ("Netrake-MIB", "activeAlarmSlotNum"), ("Netrake-MIB", "activeAlarmSysUpTime"), ("Netrake-MIB", "activeAlarmTimeStamp"), ("Netrake-MIB", "activeAlarmType"), ("Netrake-MIB", "activeAlarmSubType"), ("Netrake-MIB", "activeAlarmEventFlag"))
if mibBuilder.loadTexts: postAlarm.setStatus('current')
postEvent = MibIdentifier((1, 3, 6, 1, 4, 1, 10950, 1, 1, 3, 4))
activeAlarmAcknowledge = MibScalar((1, 3, 6, 1, 4, 1, 10950, 1, 1, 3, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 0))).clone(namedValues=NamedValues(("acknowledge", 1), ("cleared", 0)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: activeAlarmAcknowledge.setStatus('current')
activeAlarmID = MibScalar((1, 3, 6, 1, 4, 1, 10950, 1, 1, 3, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: activeAlarmID.setStatus('current')
eventAcknowledge = MibIdentifier((1, 3, 6, 1, 4, 1, 10950, 1, 1, 3, 7))
eventID = MibScalar((1, 3, 6, 1, 4, 1, 10950, 1, 1, 3, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: eventID.setStatus('deprecated')
activeAlarmAcknowledgeSource = MibScalar((1, 3, 6, 1, 4, 1, 10950, 1, 1, 3, 9), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: activeAlarmAcknowledgeSource.setStatus('current')
coldStartTrapEnable = MibScalar((1, 3, 6, 1, 4, 1, 10950, 1, 1, 4, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: coldStartTrapEnable.setStatus('current')
coldStartTrap = NotificationType((1, 3, 6, 1, 4, 1, 10950, 1, 1, 4, 2)).setObjects(("Netrake-MIB", "systemRestoreFlag"), ("Netrake-MIB", "systemSoftwareVersion"))
if mibBuilder.loadTexts: coldStartTrap.setStatus('current')
coldStartTrapAck = MibScalar((1, 3, 6, 1, 4, 1, 10950, 1, 1, 4, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("notAck", 0), ("ack", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: coldStartTrapAck.setStatus('current')
coldStartTrapAckSource = MibScalar((1, 3, 6, 1, 4, 1, 10950, 1, 1, 4, 4), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: coldStartTrapAckSource.setStatus('current')
redundantPort1IpAddr = MibScalar((1, 3, 6, 1, 4, 1, 10950, 1, 1, 5, 1), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: redundantPort1IpAddr.setStatus('current')
redundantPort2IpAddr = MibScalar((1, 3, 6, 1, 4, 1, 10950, 1, 1, 5, 2), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: redundantPort2IpAddr.setStatus('current')
redundantAdminState = MibScalar((1, 3, 6, 1, 4, 1, 10950, 1, 1, 5, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("standAlone", 1), ("redundant", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: redundantAdminState.setStatus('current')
redundantMateName = MibScalar((1, 3, 6, 1, 4, 1, 10950, 1, 1, 5, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: redundantMateName.setStatus('current')
redundantConfigChangeTrapAck = MibScalar((1, 3, 6, 1, 4, 1, 10950, 1, 1, 5, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("notAck", 0), ("ack", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: redundantConfigChangeTrapAck.setStatus('current')
redundantConfigChangeTrap = NotificationType((1, 3, 6, 1, 4, 1, 10950, 1, 1, 5, 7)).setObjects(("Netrake-MIB", "redundantPairName"), ("Netrake-MIB", "redundantPort1IpAddr"), ("Netrake-MIB", "redundantPort2IpAddr"), ("Netrake-MIB", "redundantAdminState"), ("Netrake-MIB", "redundantPort1NetMask"), ("Netrake-MIB", "redundantPort2NetMask"))
if mibBuilder.loadTexts: redundantConfigChangeTrap.setStatus('current')
redundantPort1NetMask = MibScalar((1, 3, 6, 1, 4, 1, 10950, 1, 1, 5, 8), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: redundantPort1NetMask.setStatus('current')
redundantPort2NetMask = MibScalar((1, 3, 6, 1, 4, 1, 10950, 1, 1, 5, 9), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: redundantPort2NetMask.setStatus('current')
redundantFailbackThresh = MibScalar((1, 3, 6, 1, 4, 1, 10950, 1, 1, 5, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 50000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: redundantFailbackThresh.setStatus('current')
redundantRedirectorFlag = MibScalar((1, 3, 6, 1, 4, 1, 10950, 1, 1, 5, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: redundantRedirectorFlag.setStatus('current')
redundantFailbackThreshChangeTrap = NotificationType((1, 3, 6, 1, 4, 1, 10950, 1, 1, 5, 12)).setObjects(("Netrake-MIB", "redundantFailbackThresh"))
if mibBuilder.loadTexts: redundantFailbackThreshChangeTrap.setStatus('current')
redundantFailbackThreshChangeTrapAck = MibScalar((1, 3, 6, 1, 4, 1, 10950, 1, 1, 5, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("default", 0), ("ack", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: redundantFailbackThreshChangeTrapAck.setStatus('current')
redundantRedirectorFlagChangeTrap = NotificationType((1, 3, 6, 1, 4, 1, 10950, 1, 1, 5, 14)).setObjects(("Netrake-MIB", "redundantRedirectorFlag"))
if mibBuilder.loadTexts: redundantRedirectorFlagChangeTrap.setStatus('current')
redundantRedirectorFlagChangeTrapAck = MibScalar((1, 3, 6, 1, 4, 1, 10950, 1, 1, 5, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("default", 0), ("ack", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: redundantRedirectorFlagChangeTrapAck.setStatus('current')
redundantAutoFailbackFlag = MibScalar((1, 3, 6, 1, 4, 1, 10950, 1, 1, 5, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: redundantAutoFailbackFlag.setStatus('current')
redundantAutoFailbackChangeTrap = NotificationType((1, 3, 6, 1, 4, 1, 10950, 1, 1, 5, 17)).setObjects(("Netrake-MIB", "redundantAutoFailbackFlag"))
if mibBuilder.loadTexts: redundantAutoFailbackChangeTrap.setStatus('current')
redundantAutoFailbackFlagChangeTrapAck = MibScalar((1, 3, 6, 1, 4, 1, 10950, 1, 1, 5, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("default", 0), ("ack", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: redundantAutoFailbackFlagChangeTrapAck.setStatus('current')
redundantConfigChangeTrapAckSource = MibScalar((1, 3, 6, 1, 4, 1, 10950, 1, 1, 5, 19), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: redundantConfigChangeTrapAckSource.setStatus('current')
redundantFailbackThreshChangeTrapAckSource = MibScalar((1, 3, 6, 1, 4, 1, 10950, 1, 1, 5, 20), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: redundantFailbackThreshChangeTrapAckSource.setStatus('current')
redundantRedirectorFlagChangeTrapAckSource = MibScalar((1, 3, 6, 1, 4, 1, 10950, 1, 1, 5, 21), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: redundantRedirectorFlagChangeTrapAckSource.setStatus('current')
redundantAutoFailbackFlagChangeTrapAckSource = MibScalar((1, 3, 6, 1, 4, 1, 10950, 1, 1, 5, 22), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: redundantAutoFailbackFlagChangeTrapAckSource.setStatus('current')
globalCounters = MibIdentifier((1, 3, 6, 1, 4, 1, 10950, 1, 1, 6, 1))
gigEStats = MibIdentifier((1, 3, 6, 1, 4, 1, 10950, 1, 1, 6, 2))
serviceStats = MibIdentifier((1, 3, 6, 1, 4, 1, 10950, 1, 1, 6, 3))
redundancyStats = MibIdentifier((1, 3, 6, 1, 4, 1, 10950, 1, 1, 6, 4))
policyStats = MibIdentifier((1, 3, 6, 1, 4, 1, 10950, 1, 1, 6, 5))
sipStats = MibIdentifier((1, 3, 6, 1, 4, 1, 10950, 1, 1, 6, 6))
vlanStats = MibIdentifier((1, 3, 6, 1, 4, 1, 10950, 1, 1, 6, 7))
custSipStats = MibIdentifier((1, 3, 6, 1, 4, 1, 10950, 1, 1, 6, 8))
nCiteStatsConfigReset = MibScalar((1, 3, 6, 1, 4, 1, 10950, 1, 1, 6, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("default", 0), ("reset", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nCiteStatsConfigReset.setStatus('current')
nCiteSessionDetailRecord = MibIdentifier((1, 3, 6, 1, 4, 1, 10950, 1, 1, 6, 10))
registrationStats = MibIdentifier((1, 3, 6, 1, 4, 1, 10950, 1, 1, 6, 11))
custRegStats = MibIdentifier((1, 3, 6, 1, 4, 1, 10950, 1, 1, 6, 12))
ntsStats = MibIdentifier((1, 3, 6, 1, 4, 1, 10950, 1, 1, 6, 13))
rogueStats = MibIdentifier((1, 3, 6, 1, 4, 1, 10950, 1, 1, 6, 14))
nCiteStatsReset = MibScalar((1, 3, 6, 1, 4, 1, 10950, 1, 1, 6, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11))).clone(namedValues=NamedValues(("default", 0), ("sipStats", 1), ("registrationStats", 2), ("rogueStats", 3), ("ntsStats", 4), ("voIpStats", 5), ("sipH323Stats", 6), ("h323Stats", 7), ("h323RegStats", 8), ("mediaStats", 9), ("sipCommonStats", 10), ("sipEvtDlgStats", 11)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nCiteStatsReset.setStatus('current')
custNtsStats = MibIdentifier((1, 3, 6, 1, 4, 1, 10950, 1, 1, 6, 16))
sipH323Stats = MibIdentifier((1, 3, 6, 1, 4, 1, 10950, 1, 1, 6, 17))
h323Stats = MibIdentifier((1, 3, 6, 1, 4, 1, 10950, 1, 1, 6, 18))
voIpStats = MibIdentifier((1, 3, 6, 1, 4, 1, 10950, 1, 1, 6, 19))
custSipH323Stats = MibIdentifier((1, 3, 6, 1, 4, 1, 10950, 1, 1, 6, 20))
custH323Stats = MibIdentifier((1, 3, 6, 1, 4, 1, 10950, 1, 1, 6, 21))
custVoIpStats = MibIdentifier((1, 3, 6, 1, 4, 1, 10950, 1, 1, 6, 22))
mediaStats = MibIdentifier((1, 3, 6, 1, 4, 1, 10950, 1, 1, 6, 23))
h323RegStats = MibIdentifier((1, 3, 6, 1, 4, 1, 10950, 1, 1, 6, 24))
custH323RegStats = MibIdentifier((1, 3, 6, 1, 4, 1, 10950, 1, 1, 6, 25))
sipCommonStats = MibIdentifier((1, 3, 6, 1, 4, 1, 10950, 1, 1, 6, 26))
sipEvtDlgStats = MibIdentifier((1, 3, 6, 1, 4, 1, 10950, 1, 1, 6, 27))
runDiagGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 10950, 1, 1, 7, 2))
diagResultsTable = MibTable((1, 3, 6, 1, 4, 1, 10950, 1, 1, 7, 3), )
if mibBuilder.loadTexts: diagResultsTable.setStatus('deprecated')
diagResultsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 10950, 1, 1, 7, 3, 1), ).setIndexNames((0, "Netrake-MIB", "diagRsltIndex"))
if mibBuilder.loadTexts: diagResultsEntry.setStatus('deprecated')
diagRsltIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 10950, 1, 1, 7, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: diagRsltIndex.setStatus('deprecated')
diagRsltStartTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 10950, 1, 1, 7, 3, 1, 2), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: diagRsltStartTimeStamp.setStatus('deprecated')
diagRsltCompleteTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 10950, 1, 1, 7, 3, 1, 3), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: diagRsltCompleteTimeStamp.setStatus('deprecated')
diagRsltDesc = MibTableColumn((1, 3, 6, 1, 4, 1, 10950, 1, 1, 7, 3, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: diagRsltDesc.setStatus('deprecated')
diagRsltType = MibTableColumn((1, 3, 6, 1, 4, 1, 10950, 1, 1, 7, 3, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("nCiteFullIntLoopback", 1), ("nCiteFullExtLoopback", 2), ("nCiteInterfaceIntLoopback", 3), ("nCiteInterfaceExtLoopback", 4), ("cardIntLoopback", 5), ("cardExtLoopback", 6), ("portIntLoopback", 7), ("portExtLoopback", 8)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: diagRsltType.setStatus('deprecated')
diagRsltDeviceSlotNum = MibTableColumn((1, 3, 6, 1, 4, 1, 10950, 1, 1, 7, 3, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 14))).setMaxAccess("readonly")
if mibBuilder.loadTexts: diagRsltDeviceSlotNum.setStatus('deprecated')
diagRsltDevicePortNum = MibTableColumn((1, 3, 6, 1, 4, 1, 10950, 1, 1, 7, 3, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 48))).setMaxAccess("readonly")
if mibBuilder.loadTexts: diagRsltDevicePortNum.setStatus('deprecated')
diagStartedTrap = NotificationType((1, 3, 6, 1, 4, 1, 10950, 1, 1, 7, 4)).setObjects(("Netrake-MIB", "diagType"))
if mibBuilder.loadTexts: diagStartedTrap.setStatus('deprecated')
diagCompleteTrap = NotificationType((1, 3, 6, 1, 4, 1, 10950, 1, 1, 7, 5)).setObjects(("Netrake-MIB", "diagRsltIndex"), ("Netrake-MIB", "diagRsltCompleteTimeStamp"), ("Netrake-MIB", "diagRsltDesc"), ("Netrake-MIB", "diagRsltDevicePortNum"), ("Netrake-MIB", "diagRsltDeviceSlotNum"), ("Netrake-MIB", "diagRsltType"))
if mibBuilder.loadTexts: diagCompleteTrap.setStatus('deprecated')
diagRsltID = MibScalar((1, 3, 6, 1, 4, 1, 10950, 1, 1, 7, 6), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: diagRsltID.setStatus('deprecated')
diagRsltAcknowledge = MibScalar((1, 3, 6, 1, 4, 1, 10950, 1, 1, 7, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("default", 0), ("acknowledge", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: diagRsltAcknowledge.setStatus('deprecated')
diagStartedTrapAck = MibScalar((1, 3, 6, 1, 4, 1, 10950, 1, 1, 7, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("notAck", 0), ("ack", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: diagStartedTrapAck.setStatus('deprecated')
diagCompleteTrapAck = MibScalar((1, 3, 6, 1, 4, 1, 10950, 1, 1, 7, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("notAck", 0), ("ack", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: diagCompleteTrapAck.setStatus('deprecated')
diagStartedTrapAckSource = MibScalar((1, 3, 6, 1, 4, 1, 10950, 1, 1, 7, 10), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: diagStartedTrapAckSource.setStatus('deprecated')
diagCompleteTrapAckSource = MibScalar((1, 3, 6, 1, 4, 1, 10950, 1, 1, 7, 11), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: diagCompleteTrapAckSource.setStatus('deprecated')
activeImgName = MibScalar((1, 3, 6, 1, 4, 1, 10950, 1, 1, 8, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: activeImgName.setStatus('current')
activeImgPidSideAFilename = MibScalar((1, 3, 6, 1, 4, 1, 10950, 1, 1, 8, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: activeImgPidSideAFilename.setStatus('deprecated')
activeImgPidSideBFilename = MibScalar((1, 3, 6, 1, 4, 1, 10950, 1, 1, 8, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: activeImgPidSideBFilename.setStatus('deprecated')
activeImgDwnldTimeStamp = MibScalar((1, 3, 6, 1, 4, 1, 10950, 1, 1, 8, 4), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: activeImgDwnldTimeStamp.setStatus('current')
activeImgBuildStartTimeStamp = MibScalar((1, 3, 6, 1, 4, 1, 10950, 1, 1, 8, 5), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: activeImgBuildStartTimeStamp.setStatus('deprecated')
activeImgBuildCompleteTimeStamp = MibScalar((1, 3, 6, 1, 4, 1, 10950, 1, 1, 8, 6), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: activeImgBuildCompleteTimeStamp.setStatus('deprecated')
activeImgActivatedTimeStamp = MibScalar((1, 3, 6, 1, 4, 1, 10950, 1, 1, 8, 7), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: activeImgActivatedTimeStamp.setStatus('current')
commitImgName = MibScalar((1, 3, 6, 1, 4, 1, 10950, 1, 1, 8, 8), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: commitImgName.setStatus('current')
commitImgDwnldTimeStamp = MibScalar((1, 3, 6, 1, 4, 1, 10950, 1, 1, 8, 9), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: commitImgDwnldTimeStamp.setStatus('deprecated')
commitImgBuildStartTimeStamp = MibScalar((1, 3, 6, 1, 4, 1, 10950, 1, 1, 8, 10), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: commitImgBuildStartTimeStamp.setStatus('deprecated')
commitImgBuildCompleteTimeStamp = MibScalar((1, 3, 6, 1, 4, 1, 10950, 1, 1, 8, 11), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: commitImgBuildCompleteTimeStamp.setStatus('deprecated')
commitImgActivatedTimeStamp = MibScalar((1, 3, 6, 1, 4, 1, 10950, 1, 1, 8, 12), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: commitImgActivatedTimeStamp.setStatus('current')
commitImgTimeStamp = MibScalar((1, 3, 6, 1, 4, 1, 10950, 1, 1, 8, 13), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: commitImgTimeStamp.setStatus('current')
newActiveImgTrap = NotificationType((1, 3, 6, 1, 4, 1, 10950, 1, 1, 8, 14)).setObjects(("Netrake-MIB", "activeImgActivatedTimeStamp"), ("Netrake-MIB", "activeImgName"), ("Netrake-MIB", "activeImgPidSideAFilename"), ("Netrake-MIB", "activeImgPidSideBFilename"))
if mibBuilder.loadTexts: newActiveImgTrap.setStatus('current')
newCommittedImgTrap = NotificationType((1, 3, 6, 1, 4, 1, 10950, 1, 1, 8, 15)).setObjects(("Netrake-MIB", "commitImgTimeStamp"), ("Netrake-MIB", "commitImgName"))
if mibBuilder.loadTexts: newCommittedImgTrap.setStatus('current')
nextImgName = MibScalar((1, 3, 6, 1, 4, 1, 10950, 1, 1, 8, 16), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nextImgName.setStatus('deprecated')
nextImgState = MibScalar((1, 3, 6, 1, 4, 1, 10950, 1, 1, 8, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("cleared", 0), ("buildInProgress", 1), ("buildComplete", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nextImgState.setStatus('deprecated')
nextImgDwnldTimeStamp = MibScalar((1, 3, 6, 1, 4, 1, 10950, 1, 1, 8, 18), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nextImgDwnldTimeStamp.setStatus('deprecated')
nextImgBuildStartTimeStamp = MibScalar((1, 3, 6, 1, 4, 1, 10950, 1, 1, 8, 19), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nextImgBuildStartTimeStamp.setStatus('deprecated')
nextImgBuildCompleteTimeStamp = MibScalar((1, 3, 6, 1, 4, 1, 10950, 1, 1, 8, 20), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nextImgBuildCompleteTimeStamp.setStatus('deprecated')
buildStartedTrap = NotificationType((1, 3, 6, 1, 4, 1, 10950, 1, 1, 8, 21)).setObjects(("Netrake-MIB", "nextImg"), ("Netrake-MIB", "nextImgState"))
if mibBuilder.loadTexts: buildStartedTrap.setStatus('deprecated')
buildCompleteTrap = NotificationType((1, 3, 6, 1, 4, 1, 10950, 1, 1, 8, 22)).setObjects(("Netrake-MIB", "nextImgName"), ("Netrake-MIB", "nextImgState"), ("Netrake-MIB", "nextImgBuildCompleteTimeStamp"))
if mibBuilder.loadTexts: buildCompleteTrap.setStatus('deprecated')
newNextTrap = NotificationType((1, 3, 6, 1, 4, 1, 10950, 1, 1, 8, 23)).setObjects(("Netrake-MIB", "nextImgName"), ("Netrake-MIB", "nextImgState"))
if mibBuilder.loadTexts: newNextTrap.setStatus('deprecated')
newActiveImgTrapAck = MibScalar((1, 3, 6, 1, 4, 1, 10950, 1, 1, 8, 24), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("notAck", 0), ("ack", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: newActiveImgTrapAck.setStatus('current')
newCommittedImgTrapAck = MibScalar((1, 3, 6, 1, 4, 1, 10950, 1, 1, 8, 25), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("notAck", 0), ("ack", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: newCommittedImgTrapAck.setStatus('current')
buildStartedTrapAck = MibScalar((1, 3, 6, 1, 4, 1, 10950, 1, 1, 8, 26), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("notAck", 0), ("ack", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: buildStartedTrapAck.setStatus('deprecated')
buildCompleteTrapAck = MibScalar((1, 3, 6, 1, 4, 1, 10950, 1, 1, 8, 27), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("notAck", 0), ("ack", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: buildCompleteTrapAck.setStatus('deprecated')
newNextTrapAck = MibScalar((1, 3, 6, 1, 4, 1, 10950, 1, 1, 8, 28), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("notAck", 0), ("ack", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: newNextTrapAck.setStatus('deprecated')
newActiveImgTrapAckSource = MibScalar((1, 3, 6, 1, 4, 1, 10950, 1, 1, 8, 29), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: newActiveImgTrapAckSource.setStatus('current')
newCommittedImgTrapAckSource = MibScalar((1, 3, 6, 1, 4, 1, 10950, 1, 1, 8, 30), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: newCommittedImgTrapAckSource.setStatus('current')
buildStartedTrapAckSource = MibScalar((1, 3, 6, 1, 4, 1, 10950, 1, 1, 8, 31), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: buildStartedTrapAckSource.setStatus('deprecated')
buildCompleteTrapAckSource = MibScalar((1, 3, 6, 1, 4, 1, 10950, 1, 1, 8, 32), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: buildCompleteTrapAckSource.setStatus('deprecated')
newNextTrapAckSource = MibScalar((1, 3, 6, 1, 4, 1, 10950, 1, 1, 8, 33), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: newNextTrapAckSource.setStatus('deprecated')
staticRoutesTable = MibTable((1, 3, 6, 1, 4, 1, 10950, 1, 1, 9, 1), )
if mibBuilder.loadTexts: staticRoutesTable.setStatus('current')
staticRoutesEntry = MibTableRow((1, 3, 6, 1, 4, 1, 10950, 1, 1, 9, 1, 1), ).setIndexNames((0, "Netrake-MIB", "staticRouteDest"), (0, "Netrake-MIB", "staticRouteNextHop"), (0, "Netrake-MIB", "staticRouteNetMask"))
if mibBuilder.loadTexts: staticRoutesEntry.setStatus('current')
staticRouteDest = MibTableColumn((1, 3, 6, 1, 4, 1, 10950, 1, 1, 9, 1, 1, 1), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: staticRouteDest.setStatus('current')
staticRouteNextHop = MibTableColumn((1, 3, 6, 1, 4, 1, 10950, 1, 1, 9, 1, 1, 2), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: staticRouteNextHop.setStatus('current')
staticRouteNetMask = MibTableColumn((1, 3, 6, 1, 4, 1, 10950, 1, 1, 9, 1, 1, 3), IpAddress().clone(hexValue="00000000")).setMaxAccess("readwrite")
if mibBuilder.loadTexts: staticRouteNetMask.setStatus('current')
staticRouteIngressVlanTag = MibTableColumn((1, 3, 6, 1, 4, 1, 10950, 1, 1, 9, 1, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4096))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: staticRouteIngressVlanTag.setStatus('deprecated')
staticRouteMetric1 = MibTableColumn((1, 3, 6, 1, 4, 1, 10950, 1, 1, 9, 1, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 255)).clone(-1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: staticRouteMetric1.setStatus('current')
staticRouteAdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 10950, 1, 1, 9, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('enable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: staticRouteAdminState.setStatus('current')
staticRouteIngressProtocol = MibTableColumn((1, 3, 6, 1, 4, 1, 10950, 1, 1, 9, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("general", 0), ("vlan", 1))).clone('general')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: staticRouteIngressProtocol.setStatus('deprecated')
staticRouteOperState = MibTableColumn((1, 3, 6, 1, 4, 1, 10950, 1, 1, 9, 1, 1, 8), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staticRouteOperState.setStatus('current')
staticRouteType = MibTableColumn((1, 3, 6, 1, 4, 1, 10950, 1, 1, 9, 1, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("userDefined", 1), ("discovered", 2), ("defaultRoute", 3), ("mgmtRoute", 4), ("dcHostRoute", 5), ("dcNetRoute", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: staticRouteType.setStatus('current')
staticRouteRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 10950, 1, 1, 9, 1, 1, 10), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: staticRouteRowStatus.setStatus('current')
staticRouteVrdTag = MibTableColumn((1, 3, 6, 1, 4, 1, 10950, 1, 1, 9, 1, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4095))).setMaxAccess("readonly")
if mibBuilder.loadTexts: staticRouteVrdTag.setStatus('current')
staticRouteEgressVlan = MibTableColumn((1, 3, 6, 1, 4, 1, 10950, 1, 1, 9, 1, 1, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4095))).setMaxAccess("readonly")
if mibBuilder.loadTexts: staticRouteEgressVlan.setStatus('current')
staticRouteChange = NotificationType((1, 3, 6, 1, 4, 1, 10950, 1, 1, 9, 2)).setObjects(("Netrake-MIB", "staticRouteAdminState"), ("Netrake-MIB", "staticRouteDest"), ("Netrake-MIB", "staticRouteIngressVlanTag"), ("Netrake-MIB", "staticRouteIngressProtocol"), ("Netrake-MIB", "staticRouteMetric1"), ("Netrake-MIB", "staticRouteNetMask"), ("Netrake-MIB", "staticRouteNextHop"), ("Netrake-MIB", "staticRouteOperState"), ("Netrake-MIB", "staticRouteRowStatus"), ("Netrake-MIB", "staticRouteType"))
if mibBuilder.loadTexts: staticRouteChange.setStatus('current')
staticRoutesRefreshNeeded = MibScalar((1, 3, 6, 1, 4, 1, 10950, 1, 1, 9, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("default", 0), ("refresh", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: staticRoutesRefreshNeeded.setStatus('current')
staticRoutesRefreshTrap = NotificationType((1, 3, 6, 1, 4, 1, 10950, 1, 1, 9, 4)).setObjects(("Netrake-MIB", "staticRoutesRefreshNeeded"))
if mibBuilder.loadTexts: staticRoutesRefreshTrap.setStatus('current')
staticRouteChangeTrapAck = MibScalar((1, 3, 6, 1, 4, 1, 10950, 1, 1, 9, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("notAck", 0), ("ack", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: staticRouteChangeTrapAck.setStatus('current')
staticRouteRefreshTrapAck = MibScalar((1, 3, 6, 1, 4, 1, 10950, 1, 1, 9, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("notAck", 0), ("ack", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: staticRouteRefreshTrapAck.setStatus('current')
staticRouteChangeTrapAckSource = MibScalar((1, 3, 6, 1, 4, 1, 10950, 1, 1, 9, 7), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: staticRouteChangeTrapAckSource.setStatus('current')
staticRouteRefreshTrapAckSource = MibScalar((1, 3, 6, 1, 4, 1, 10950, 1, 1, 9, 8), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: staticRouteRefreshTrapAckSource.setStatus('current')
arpVerifTimerRetryCount = MibScalar((1, 3, 6, 1, 4, 1, 10950, 1, 1, 10, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 3600)).clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: arpVerifTimerRetryCount.setStatus('current')
arpNextHopIP = MibScalar((1, 3, 6, 1, 4, 1, 10950, 1, 1, 10, 2), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: arpNextHopIP.setStatus('current')
arpMacAddr = MibScalar((1, 3, 6, 1, 4, 1, 10950, 1, 1, 10, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: arpMacAddr.setStatus('current')
arpRefreshNeeded = MibScalar((1, 3, 6, 1, 4, 1, 10950, 1, 1, 10, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: arpRefreshNeeded.setStatus('current')
arpRefreshTrap = NotificationType((1, 3, 6, 1, 4, 1, 10950, 1, 1, 10, 5)).setObjects(("Netrake-MIB", "arpRefreshNeeded"))
if mibBuilder.loadTexts: arpRefreshTrap.setStatus('current')
arpRefreshTrapAck = MibScalar((1, 3, 6, 1, 4, 1, 10950, 1, 1, 10, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("notAck", 0), ("ack", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: arpRefreshTrapAck.setStatus('current')
arpUpdateMacTrap = NotificationType((1, 3, 6, 1, 4, 1, 10950, 1, 1, 10, 7)).setObjects(("Netrake-MIB", "arpMacAddr"), ("Netrake-MIB", "arpNextHopIP"), ("Netrake-MIB", "arpTrapOper"))
if mibBuilder.loadTexts: arpUpdateMacTrap.setStatus('current')
arpUpdateMacTrapAck = MibScalar((1, 3, 6, 1, 4, 1, 10950, 1, 1, 10, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("noAck", 0), ("ack", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: arpUpdateMacTrapAck.setStatus('current')
arpTrapOper = MibScalar((1, 3, 6, 1, 4, 1, 10950, 1, 1, 10, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("addUpdate", 0), ("delete", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: arpTrapOper.setStatus('current')
arpOperTimerFreq = MibScalar((1, 3, 6, 1, 4, 1, 10950, 1, 1, 10, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 60))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: arpOperTimerFreq.setStatus('current')
arpOperTimerRetryCount = MibScalar((1, 3, 6, 1, 4, 1, 10950, 1, 1, 10, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 600))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: arpOperTimerRetryCount.setStatus('current')
arpVerifTimerChangeTrap = NotificationType((1, 3, 6, 1, 4, 1, 10950, 1, 1, 10, 12)).setObjects(("Netrake-MIB", "arpVerifTimerRetryCount"))
if mibBuilder.loadTexts: arpVerifTimerChangeTrap.setStatus('current')
arpVerifTimerChangeTrapAck = MibScalar((1, 3, 6, 1, 4, 1, 10950, 1, 1, 10, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("default", 0), ("ack", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: arpVerifTimerChangeTrapAck.setStatus('current')
arpOperTimerChangeTrap = NotificationType((1, 3, 6, 1, 4, 1, 10950, 1, 1, 10, 14)).setObjects(("Netrake-MIB", "arpOperTimerFreq"), ("Netrake-MIB", "arpOperTimerRetryCount"))
if mibBuilder.loadTexts: arpOperTimerChangeTrap.setStatus('current')
arpOperTimerChangeTrapAck = MibScalar((1, 3, 6, 1, 4, 1, 10950, 1, 1, 10, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("default", 0), ("ack", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: arpOperTimerChangeTrapAck.setStatus('current')
arpRefreshTrapAckSource = MibScalar((1, 3, 6, 1, 4, 1, 10950, 1, 1, 10, 16), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: arpRefreshTrapAckSource.setStatus('current')
arpUpdateMacTrapAckSource = MibScalar((1, 3, 6, 1, 4, 1, 10950, 1, 1, 10, 17), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: arpUpdateMacTrapAckSource.setStatus('current')
arpVerifTimerChangeTrapAckSource = MibScalar((1, 3, 6, 1, 4, 1, 10950, 1, 1, 10, 18), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: arpVerifTimerChangeTrapAckSource.setStatus('current')
arpOperTimerChangeTrapAckSource = MibScalar((1, 3, 6, 1, 4, 1, 10950, 1, 1, 10, 19), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: arpOperTimerChangeTrapAckSource.setStatus('current')
ipPortConfigTable = MibTable((1, 3, 6, 1, 4, 1, 10950, 1, 1, 11, 1), )
if mibBuilder.loadTexts: ipPortConfigTable.setStatus('current')
ipPortConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 10950, 1, 1, 11, 1, 1), ).setIndexNames((0, "Netrake-MIB", "ipPortConfigSlotNum"), (0, "Netrake-MIB", "ipPortConfigPortNum"), (0, "Netrake-MIB", "ipPortConfigIpAddr"))
if mibBuilder.loadTexts: ipPortConfigEntry.setStatus('current')
ipPortConfigSlotNum = MibTableColumn((1, 3, 6, 1, 4, 1, 10950, 1, 1, 11, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 14))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipPortConfigSlotNum.setStatus('current')
ipPortConfigPortNum = MibTableColumn((1, 3, 6, 1, 4, 1, 10950, 1, 1, 11, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 48))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipPortConfigPortNum.setStatus('current')
ipPortConfigIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 10950, 1, 1, 11, 1, 1, 3), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipPortConfigIpAddr.setStatus('current')
ipPortVlanTag = MibTableColumn((1, 3, 6, 1, 4, 1, 10950, 1, 1, 11, 1, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4097))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipPortVlanTag.setStatus('current')
ipPortConfigNetMask = MibTableColumn((1, 3, 6, 1, 4, 1, 10950, 1, 1, 11, 1, 1, 5), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipPortConfigNetMask.setStatus('current')
ipPortConfigAdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 10950, 1, 1, 11, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipPortConfigAdminState.setStatus('current')
ipPortConfigOperState = MibTableColumn((1, 3, 6, 1, 4, 1, 10950, 1, 1, 11, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipPortConfigOperState.setStatus('current')
ipPortRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 10950, 1, 1, 11, 1, 1, 8), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ipPortRowStatus.setStatus('current')
ipPortVrdTag = MibTableColumn((1, 3, 6, 1, 4, 1, 10950, 1, 1, 11, 1, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4095))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipPortVrdTag.setStatus('current')
ipPortConfigChangeTrap = NotificationType((1, 3, 6, 1, 4, 1, 10950, 1, 1, 11, 2)).setObjects(("Netrake-MIB", "ipPortConfigIpAddr"), ("Netrake-MIB", "ipPortConfigNetMask"), ("Netrake-MIB", "ipPortConfigOperState"), ("Netrake-MIB", "ipPortConfigPortNum"), ("Netrake-MIB", "ipPortConfigSlotNum"), ("Netrake-MIB", "ipPortVlanTag"), ("Netrake-MIB", "ipPortVrdTag"), ("Netrake-MIB", "ipPortConfigAdminState"), ("Netrake-MIB", "ipPortRowStatus"))
if mibBuilder.loadTexts: ipPortConfigChangeTrap.setStatus('current')
ipPortConfigChangeTrapAck = MibScalar((1, 3, 6, 1, 4, 1, 10950, 1, 1, 11, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("notAck", 0), ("ack", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipPortConfigChangeTrapAck.setStatus('current')
ipPortPlaceHolder = MibScalar((1, 3, 6, 1, 4, 1, 10950, 1, 1, 11, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipPortPlaceHolder.setStatus('current')
ipPortRefreshOpStates = MibScalar((1, 3, 6, 1, 4, 1, 10950, 1, 1, 11, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipPortRefreshOpStates.setStatus('current')
ipPortRefreshTrap = NotificationType((1, 3, 6, 1, 4, 1, 10950, 1, 1, 11, 6)).setObjects(("Netrake-MIB", "ipPortRefreshOpStates"))
if mibBuilder.loadTexts: ipPortRefreshTrap.setStatus('current')
ipPortRefreshTrapAck = MibScalar((1, 3, 6, 1, 4, 1, 10950, 1, 1, 11, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("noAck", 0), ("ack", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipPortRefreshTrapAck.setStatus('current')
ipPortAutoNegTable = MibTable((1, 3, 6, 1, 4, 1, 10950, 1, 1, 11, 8), )
if mibBuilder.loadTexts: ipPortAutoNegTable.setStatus('current')
ipPortAutoNegEntry = MibTableRow((1, 3, 6, 1, 4, 1, 10950, 1, 1, 11, 8, 1), ).setIndexNames((0, "Netrake-MIB", "ipPortAutoNegSlotNum"), (0, "Netrake-MIB", "ipPortAutoNegPortNum"))
if mibBuilder.loadTexts: ipPortAutoNegEntry.setStatus('current')
ipPortAutoNegSlotNum = MibTableColumn((1, 3, 6, 1, 4, 1, 10950, 1, 1, 11, 8, 1, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipPortAutoNegSlotNum.setStatus('current')
ipPortAutoNegPortNum = MibTableColumn((1, 3, 6, 1, 4, 1, 10950, 1, 1, 11, 8, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipPortAutoNegPortNum.setStatus('current')
ipPortAutoNegFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 10950, 1, 1, 11, 8, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipPortAutoNegFlag.setStatus('current')
ipPortAutoNegChangeTrap = NotificationType((1, 3, 6, 1, 4, 1, 10950, 1, 1, 11, 9)).setObjects(("Netrake-MIB", "ipPortAutoNegFlag"), ("Netrake-MIB", "ipPortAutoNegPortNum"), ("Netrake-MIB", "ipPortAutoNegSlotNum"))
if mibBuilder.loadTexts: ipPortAutoNegChangeTrap.setStatus('current')
ipPortAutoNegChangeTrapAck = MibScalar((1, 3, 6, 1, 4, 1, 10950, 1, 1, 11, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("default", 0), ("ack", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipPortAutoNegChangeTrapAck.setStatus('current')
ipPortConfigChangeTrapAckSource = MibScalar((1, 3, 6, 1, 4, 1, 10950, 1, 1, 11, 11), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipPortConfigChangeTrapAckSource.setStatus('current')
ipPortRefreshTrapAckSource = MibScalar((1, 3, 6, 1, 4, 1, 10950, 1, 1, 11, 12), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipPortRefreshTrapAckSource.setStatus('current')
ipPortAutoNegChangeTrapAckSource = MibScalar((1, 3, 6, 1, 4, 1, 10950, 1, 1, 11, 13), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipPortAutoNegChangeTrapAckSource.setStatus('current')
nCiteNTATable = MibTable((1, 3, 6, 1, 4, 1, 10950, 1, 1, 16, 1), )
if mibBuilder.loadTexts: nCiteNTATable.setStatus('current')
nCiteNTAEntry = MibTableRow((1, 3, 6, 1, 4, 1, 10950, 1, 1, 16, 1, 1), ).setIndexNames((0, "Netrake-MIB", "nCiteNTACustomerId"))
if mibBuilder.loadTexts: nCiteNTAEntry.setStatus('current')
nCiteNTACustomerId = MibTableColumn((1, 3, 6, 1, 4, 1, 10950, 1, 1, 16, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nCiteNTACustomerId.setStatus('current')
nCiteNTAStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 10950, 1, 1, 16, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("noNTSClient", 0), ("configured", 1), ("connected", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nCiteNTAStatus.setStatus('current')
nCiteNTAReset = NotificationType((1, 3, 6, 1, 4, 1, 10950, 1, 1, 16, 2))
if mibBuilder.loadTexts: nCiteNTAReset.setStatus('current')
edrQuarantineListTable = MibTable((1, 3, 6, 1, 4, 1, 10950, 1, 1, 17, 1), )
if mibBuilder.loadTexts: edrQuarantineListTable.setStatus('current')
edrQuarantineListEntry = MibTableRow((1, 3, 6, 1, 4, 1, 10950, 1, 1, 17, 1, 1), ).setIndexNames((0, "Netrake-MIB", "erdQLUniqueId"))
if mibBuilder.loadTexts: edrQuarantineListEntry.setStatus('current')
erdQLUniqueId = MibTableColumn((1, 3, 6, 1, 4, 1, 10950, 1, 1, 17, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: erdQLUniqueId.setStatus('current')
edrQLCallId = MibTableColumn((1, 3, 6, 1, 4, 1, 10950, 1, 1, 17, 1, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: edrQLCallId.setStatus('current')
edrQLTimestamp = MibTableColumn((1, 3, 6, 1, 4, 1, 10950, 1, 1, 17, 1, 1, 3), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: edrQLTimestamp.setStatus('current')
edrQLFrom = MibTableColumn((1, 3, 6, 1, 4, 1, 10950, 1, 1, 17, 1, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: edrQLFrom.setStatus('current')
edrQLTo = MibTableColumn((1, 3, 6, 1, 4, 1, 10950, 1, 1, 17, 1, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: edrQLTo.setStatus('current')
edrQLRequestURI = MibTableColumn((1, 3, 6, 1, 4, 1, 10950, 1, 1, 17, 1, 1, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: edrQLRequestURI.setStatus('current')
edrQLSrcMediaIpPort = MibTableColumn((1, 3, 6, 1, 4, 1, 10950, 1, 1, 17, 1, 1, 7), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: edrQLSrcMediaIpPort.setStatus('current')
edrQLDestMediaAnchorIpPort = MibTableColumn((1, 3, 6, 1, 4, 1, 10950, 1, 1, 17, 1, 1, 8), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: edrQLDestMediaAnchorIpPort.setStatus('current')
edrQLDestMediaIpPort = MibTableColumn((1, 3, 6, 1, 4, 1, 10950, 1, 1, 17, 1, 1, 9), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: edrQLDestMediaIpPort.setStatus('current')
edrQLRogueStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 10950, 1, 1, 17, 1, 1, 10), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: edrQLRogueStatus.setStatus('current')
edrQLPerformGarbageCollection = MibTableColumn((1, 3, 6, 1, 4, 1, 10950, 1, 1, 17, 1, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("default", 0), ("start", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: edrQLPerformGarbageCollection.setStatus('current')
erdQL2SrcMediaIpPort = MibTableColumn((1, 3, 6, 1, 4, 1, 10950, 1, 1, 17, 1, 1, 12), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: erdQL2SrcMediaIpPort.setStatus('current')
erdQL2DestMediaAnchorIpPort = MibTableColumn((1, 3, 6, 1, 4, 1, 10950, 1, 1, 17, 1, 1, 13), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: erdQL2DestMediaAnchorIpPort.setStatus('current')
erdQL2DestMediaIpPort = MibTableColumn((1, 3, 6, 1, 4, 1, 10950, 1, 1, 17, 1, 1, 14), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: erdQL2DestMediaIpPort.setStatus('current')
edrGarbageCollectionState = MibScalar((1, 3, 6, 1, 4, 1, 10950, 1, 1, 17, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: edrGarbageCollectionState.setStatus('current')
edrLastGarbageCollection = MibScalar((1, 3, 6, 1, 4, 1, 10950, 1, 1, 17, 3), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: edrLastGarbageCollection.setStatus('current')
edrNextTrafficCheck = MibScalar((1, 3, 6, 1, 4, 1, 10950, 1, 1, 17, 4), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: edrNextTrafficCheck.setStatus('current')
edrPerformGarbageCollection = MibScalar((1, 3, 6, 1, 4, 1, 10950, 1, 1, 17, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("default", 0), ("start", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: edrPerformGarbageCollection.setStatus('current')
edrGarbageCollectionStatus = MibScalar((1, 3, 6, 1, 4, 1, 10950, 1, 1, 17, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("success", 0), ("entryNotFound", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: edrGarbageCollectionStatus.setStatus('current')
edrGarbageCollectionComplete = NotificationType((1, 3, 6, 1, 4, 1, 10950, 1, 1, 17, 7)).setObjects(("Netrake-MIB", "edrGarbageCollectionStatus"), ("Netrake-MIB", "edrGarbageCollectionState"), ("Netrake-MIB", "edrLastGarbageCollection"), ("Netrake-MIB", "edrNextTrafficCheck"))
if mibBuilder.loadTexts: edrGarbageCollectionComplete.setStatus('current')
edrGarbageCollectionCompleteTrapAck = MibScalar((1, 3, 6, 1, 4, 1, 10950, 1, 1, 17, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("notAck", 0), ("ack", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: edrGarbageCollectionCompleteTrapAck.setStatus('current')
lrdTable = MibTable((1, 3, 6, 1, 4, 1, 10950, 1, 1, 17, 9), )
if mibBuilder.loadTexts: lrdTable.setStatus('current')
lrdEntry = MibTableRow((1, 3, 6, 1, 4, 1, 10950, 1, 1, 17, 9, 1), ).setIndexNames((0, "Netrake-MIB", "lrdUniqueId"))
if mibBuilder.loadTexts: lrdEntry.setStatus('current')
lrdUniqueId = MibTableColumn((1, 3, 6, 1, 4, 1, 10950, 1, 1, 17, 9, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lrdUniqueId.setStatus('current')
lrdCallId = MibTableColumn((1, 3, 6, 1, 4, 1, 10950, 1, 1, 17, 9, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lrdCallId.setStatus('current')
lrdRequestURI = MibTableColumn((1, 3, 6, 1, 4, 1, 10950, 1, 1, 17, 9, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lrdRequestURI.setStatus('current')
lrdFrom = MibTableColumn((1, 3, 6, 1, 4, 1, 10950, 1, 1, 17, 9, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lrdFrom.setStatus('current')
lrdTo = MibTableColumn((1, 3, 6, 1, 4, 1, 10950, 1, 1, 17, 9, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lrdTo.setStatus('current')
lrdCallerState = MibTableColumn((1, 3, 6, 1, 4, 1, 10950, 1, 1, 17, 9, 1, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lrdCallerState.setStatus('current')
lrdCallerMediaAnchorIPPort = MibTableColumn((1, 3, 6, 1, 4, 1, 10950, 1, 1, 17, 9, 1, 7), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lrdCallerMediaAnchorIPPort.setStatus('current')
lrdCallerDestIPPort = MibTableColumn((1, 3, 6, 1, 4, 1, 10950, 1, 1, 17, 9, 1, 8), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lrdCallerDestIPPort.setStatus('current')
lrdCallerSourceIPPort1 = MibTableColumn((1, 3, 6, 1, 4, 1, 10950, 1, 1, 17, 9, 1, 9), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lrdCallerSourceIPPort1.setStatus('current')
lrdCallerSourceIPPort2 = MibTableColumn((1, 3, 6, 1, 4, 1, 10950, 1, 1, 17, 9, 1, 10), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lrdCallerSourceIPPort2.setStatus('current')
lrdCallerReason = MibTableColumn((1, 3, 6, 1, 4, 1, 10950, 1, 1, 17, 9, 1, 11), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lrdCallerReason.setStatus('current')
lrdCallerTimeDetect = MibTableColumn((1, 3, 6, 1, 4, 1, 10950, 1, 1, 17, 9, 1, 12), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lrdCallerTimeDetect.setStatus('current')
lrdCalleeState = MibTableColumn((1, 3, 6, 1, 4, 1, 10950, 1, 1, 17, 9, 1, 13), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lrdCalleeState.setStatus('current')
lrdCalleeMediaAnchorIPPort = MibTableColumn((1, 3, 6, 1, 4, 1, 10950, 1, 1, 17, 9, 1, 14), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lrdCalleeMediaAnchorIPPort.setStatus('current')
lrdCalleeDestIPPort = MibTableColumn((1, 3, 6, 1, 4, 1, 10950, 1, 1, 17, 9, 1, 15), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lrdCalleeDestIPPort.setStatus('current')
lrdCalleeSourceIPPort1 = MibTableColumn((1, 3, 6, 1, 4, 1, 10950, 1, 1, 17, 9, 1, 16), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lrdCalleeSourceIPPort1.setStatus('current')
lrdCalleeSourceIPPort2 = MibTableColumn((1, 3, 6, 1, 4, 1, 10950, 1, 1, 17, 9, 1, 17), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lrdCalleeSourceIPPort2.setStatus('current')
lrdCalleeReason = MibTableColumn((1, 3, 6, 1, 4, 1, 10950, 1, 1, 17, 9, 1, 18), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lrdCalleeReason.setStatus('current')
lrdCalleeTimeDetect = MibTableColumn((1, 3, 6, 1, 4, 1, 10950, 1, 1, 17, 9, 1, 19), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lrdCalleeTimeDetect.setStatus('current')
edrGarbageCollectionCompleteTrapAckSource = MibScalar((1, 3, 6, 1, 4, 1, 10950, 1, 1, 17, 10), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: edrGarbageCollectionCompleteTrapAckSource.setStatus('current')
licenseTable = MibTable((1, 3, 6, 1, 4, 1, 10950, 1, 1, 18, 1), )
if mibBuilder.loadTexts: licenseTable.setStatus('current')
licenseEntry = MibTableRow((1, 3, 6, 1, 4, 1, 10950, 1, 1, 18, 1, 1), ).setIndexNames((0, "Netrake-MIB", "licenseIndex"))
if mibBuilder.loadTexts: licenseEntry.setStatus('current')
licenseIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 10950, 1, 1, 18, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: licenseIndex.setStatus('current')
licenseFeatureName = MibTableColumn((1, 3, 6, 1, 4, 1, 10950, 1, 1, 18, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("globalCac", 0), ("redundancy", 1), ("nts", 2), ("rogueDetect", 3), ("totalCust", 4), ("totalNtsCust", 5), ("totalVlanCust", 6), ("globalReg", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: licenseFeatureName.setStatus('deprecated')
licenseValue = MibTableColumn((1, 3, 6, 1, 4, 1, 10950, 1, 1, 18, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: licenseValue.setStatus('current')
licenseInstallDate = MibTableColumn((1, 3, 6, 1, 4, 1, 10950, 1, 1, 18, 1, 1, 4), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: licenseInstallDate.setStatus('current')
licenseExpirationDate = MibTableColumn((1, 3, 6, 1, 4, 1, 10950, 1, 1, 18, 1, 1, 5), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: licenseExpirationDate.setStatus('current')
licenseFeatureDisplayName = MibTableColumn((1, 3, 6, 1, 4, 1, 10950, 1, 1, 18, 1, 1, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: licenseFeatureDisplayName.setStatus('current')
licenseFileName = MibScalar((1, 3, 6, 1, 4, 1, 10950, 1, 1, 18, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: licenseFileName.setStatus('current')
licenseFileChangeTrap = NotificationType((1, 3, 6, 1, 4, 1, 10950, 1, 1, 18, 3)).setObjects(("Netrake-MIB", "licenseFileName"))
if mibBuilder.loadTexts: licenseFileChangeTrap.setStatus('current')
licenseFileChangeTrapAck = MibScalar((1, 3, 6, 1, 4, 1, 10950, 1, 1, 18, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("notAck", 0), ("ack", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: licenseFileChangeTrapAck.setStatus('current')
licenseFileChangeTrapAckSource = MibScalar((1, 3, 6, 1, 4, 1, 10950, 1, 1, 18, 5), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: licenseFileChangeTrapAckSource.setStatus('current')
nCiteRipState = MibScalar((1, 3, 6, 1, 4, 1, 10950, 1, 1, 19, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("off", 0), ("on", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nCiteRipState.setStatus('current')
nCiteRipPortConfigTable = MibTable((1, 3, 6, 1, 4, 1, 10950, 1, 1, 19, 2), )
if mibBuilder.loadTexts: nCiteRipPortConfigTable.setStatus('current')
nCiteRipPortConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 10950, 1, 1, 19, 2, 1), ).setIndexNames((0, "Netrake-MIB", "nCiteRipPortSlotNum"), (0, "Netrake-MIB", "nCiteRipPortNum"))
if mibBuilder.loadTexts: nCiteRipPortConfigEntry.setStatus('current')
nCiteRipPortSlotNum = MibTableColumn((1, 3, 6, 1, 4, 1, 10950, 1, 1, 19, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nCiteRipPortSlotNum.setStatus('current')
nCiteRipPortNum = MibTableColumn((1, 3, 6, 1, 4, 1, 10950, 1, 1, 19, 2, 1, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nCiteRipPortNum.setStatus('current')
nCiteRipPortPrimary = MibTableColumn((1, 3, 6, 1, 4, 1, 10950, 1, 1, 19, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("default", 0), ("primary", 1), ("secondary", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nCiteRipPortPrimary.setStatus('current')
nCiteRipInterfacesTable = MibTable((1, 3, 6, 1, 4, 1, 10950, 1, 1, 19, 3), )
if mibBuilder.loadTexts: nCiteRipInterfacesTable.setStatus('current')
nCiteRipInterfacesEntry = MibTableRow((1, 3, 6, 1, 4, 1, 10950, 1, 1, 19, 3, 1), ).setIndexNames((0, "Netrake-MIB", "nCiteRipInterafacesSlotNum"), (0, "Netrake-MIB", "nCiteRipInterfacesPortNum"), (0, "Netrake-MIB", "nCiteRipInterfacesIPAddr"))
if mibBuilder.loadTexts: nCiteRipInterfacesEntry.setStatus('current')
nCiteRipInterafacesSlotNum = MibTableColumn((1, 3, 6, 1, 4, 1, 10950, 1, 1, 19, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nCiteRipInterafacesSlotNum.setStatus('current')
nCiteRipInterfacesPortNum = MibTableColumn((1, 3, 6, 1, 4, 1, 10950, 1, 1, 19, 3, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nCiteRipInterfacesPortNum.setStatus('current')
nCiteRipInterfacesIPAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 10950, 1, 1, 19, 3, 1, 3), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nCiteRipInterfacesIPAddr.setStatus('current')
authConfigLocalOverride = MibScalar((1, 3, 6, 1, 4, 1, 10950, 1, 1, 20, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: authConfigLocalOverride.setStatus('current')
authConfigRadiusRetryCount = MibScalar((1, 3, 6, 1, 4, 1, 10950, 1, 1, 20, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 5))).setMaxAccess("readonly")
if mibBuilder.loadTexts: authConfigRadiusRetryCount.setStatus('current')
authConfigRadiusRetryInterval = MibScalar((1, 3, 6, 1, 4, 1, 10950, 1, 1, 20, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 10))).setMaxAccess("readonly")
if mibBuilder.loadTexts: authConfigRadiusRetryInterval.setStatus('current')
authConfigRadiusServersTable = MibTable((1, 3, 6, 1, 4, 1, 10950, 1, 1, 20, 4), )
if mibBuilder.loadTexts: authConfigRadiusServersTable.setStatus('current')
authConfigRadiusServersEntry = MibTableRow((1, 3, 6, 1, 4, 1, 10950, 1, 1, 20, 4, 1), ).setIndexNames((0, "Netrake-MIB", "authConfigRadiusServerIp"))
if mibBuilder.loadTexts: authConfigRadiusServersEntry.setStatus('current')
authConfigRadiusServerIp = MibTableColumn((1, 3, 6, 1, 4, 1, 10950, 1, 1, 20, 4, 1, 1), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: authConfigRadiusServerIp.setStatus('current')
authConfigRadiusServerPort = MibTableColumn((1, 3, 6, 1, 4, 1, 10950, 1, 1, 20, 4, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: authConfigRadiusServerPort.setStatus('current')
authConfigRadiusServerPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 10950, 1, 1, 20, 4, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 5))).setMaxAccess("readonly")
if mibBuilder.loadTexts: authConfigRadiusServerPriority.setStatus('current')
chasSerNum = MibScalar((1, 3, 6, 1, 4, 1, 10950, 1, 1, 1, 1, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: chasSerNum.setStatus('current')
chasLedStatus = MibScalar((1, 3, 6, 1, 4, 1, 10950, 1, 1, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: chasLedStatus.setStatus('current')
chasPOSTMode = MibScalar((1, 3, 6, 1, 4, 1, 10950, 1, 1, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("fastPOST", 0), ("fullPost", 1))).clone('fastPOST')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: chasPOSTMode.setStatus('current')
chasType = MibScalar((1, 3, 6, 1, 4, 1, 10950, 1, 1, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("unknown", 0), ("bff", 1), ("sff", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: chasType.setStatus('current')
chasPwrSupplyTable = MibTable((1, 3, 6, 1, 4, 1, 10950, 1, 1, 1, 2, 1), )
if mibBuilder.loadTexts: chasPwrSupplyTable.setStatus('current')
chasPwrSupplyEntry = MibTableRow((1, 3, 6, 1, 4, 1, 10950, 1, 1, 1, 2, 1, 1), ).setIndexNames((0, "Netrake-MIB", "chasPwrSupplyIndex"))
if mibBuilder.loadTexts: chasPwrSupplyEntry.setStatus('current')
chasPwrSupplyIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 10950, 1, 1, 1, 2, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: chasPwrSupplyIndex.setStatus('current')
chasPwrSupplyOperStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 10950, 1, 1, 1, 2, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("unknown", 1), ("normal", 2), ("fault", 3), ("notPresent", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: chasPwrSupplyOperStatus.setStatus('current')
chasPwrSupplyDesc = MibTableColumn((1, 3, 6, 1, 4, 1, 10950, 1, 1, 1, 2, 1, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: chasPwrSupplyDesc.setStatus('current')
chasPwrTrap = NotificationType((1, 3, 6, 1, 4, 1, 10950, 1, 1, 1, 2, 2)).setObjects(("Netrake-MIB", "chasPwrSupplyIndex"), ("Netrake-MIB", "chasPwrSupplyOperStatus"))
if mibBuilder.loadTexts: chasPwrTrap.setStatus('current')
chasPwrTrapAck = MibScalar((1, 3, 6, 1, 4, 1, 10950, 1, 1, 1, 2, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("notAck", 0), ("ack", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: chasPwrTrapAck.setStatus('current')
chasPwrTrapAckSource = MibScalar((1, 3, 6, 1, 4, 1, 10950, 1, 1, 1, 2, 4), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: chasPwrTrapAckSource.setStatus('current')
chasFanTable = MibTable((1, 3, 6, 1, 4, 1, 10950, 1, 1, 1, 3, 1), )
if mibBuilder.loadTexts: chasFanTable.setStatus('current')
chasFanEntry = MibTableRow((1, 3, 6, 1, 4, 1, 10950, 1, 1, 1, 3, 1, 1), ).setIndexNames((0, "Netrake-MIB", "chasFanIndex"))
if mibBuilder.loadTexts: chasFanEntry.setStatus('current')
chasFanIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 10950, 1, 1, 1, 3, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: chasFanIndex.setStatus('current')
chasFanOperStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 10950, 1, 1, 1, 3, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4))).clone(namedValues=NamedValues(("dev_ok", 0), ("dev_fail", 1), ("dev_present", 2), ("dev_not_present", 3), ("unknown", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: chasFanOperStatus.setStatus('current')
chasFanDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 10950, 1, 1, 1, 3, 1, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: chasFanDescription.setStatus('current')
chasFanTrap = NotificationType((1, 3, 6, 1, 4, 1, 10950, 1, 1, 1, 3, 2)).setObjects(("Netrake-MIB", "chasFanIndex"), ("Netrake-MIB", "chasFanOperStatus"))
if mibBuilder.loadTexts: chasFanTrap.setStatus('current')
chasFanTrapAck = MibScalar((1, 3, 6, 1, 4, 1, 10950, 1, 1, 1, 3, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("notAck", 0), ("ack", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: chasFanTrapAck.setStatus('current')
chasFanTrapAckSource = MibScalar((1, 3, 6, 1, 4, 1, 10950, 1, 1, 1, 3, 4), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: chasFanTrapAckSource.setStatus('current')
chasBrdTable = MibTable((1, 3, 6, 1, 4, 1, 10950, 1, 1, 1, 4, 1), )
if mibBuilder.loadTexts: chasBrdTable.setStatus('current')
chasBrdEntry = MibTableRow((1, 3, 6, 1, 4, 1, 10950, 1, 1, 1, 4, 1, 1), ).setIndexNames((0, "Netrake-MIB", "chasBrdSlotNum"))
if mibBuilder.loadTexts: chasBrdEntry.setStatus('current')
chasBrdSlotNum = MibTableColumn((1, 3, 6, 1, 4, 1, 10950, 1, 1, 1, 4, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 14))).setMaxAccess("readonly")
if mibBuilder.loadTexts: chasBrdSlotNum.setStatus('current')
chasBrdDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 10950, 1, 1, 1, 4, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: chasBrdDescription.setStatus('current')
chasBrdType = MibTableColumn((1, 3, 6, 1, 4, 1, 10950, 1, 1, 1, 4, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 0))).clone(namedValues=NamedValues(("managementProc", 1), ("controlProc", 2), ("netrakeControlProcessor", 3), ("gigE", 4), ("fastEther", 5), ("noBoardPresent", 0)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: chasBrdType.setStatus('current')
chasBrdOccSlots = MibTableColumn((1, 3, 6, 1, 4, 1, 10950, 1, 1, 1, 4, 1, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: chasBrdOccSlots.setStatus('current')
chasBrdMaxPorts = MibTableColumn((1, 3, 6, 1, 4, 1, 10950, 1, 1, 1, 4, 1, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: chasBrdMaxPorts.setStatus('current')
chasBrdSlotLabel = MibTableColumn((1, 3, 6, 1, 4, 1, 10950, 1, 1, 1, 4, 1, 1, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: chasBrdSlotLabel.setStatus('current')
chasBrdStatusLeds = MibTableColumn((1, 3, 6, 1, 4, 1, 10950, 1, 1, 1, 4, 1, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: chasBrdStatusLeds.setStatus('current')
chasBrdState = MibTableColumn((1, 3, 6, 1, 4, 1, 10950, 1, 1, 1, 4, 1, 1, 8), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: chasBrdState.setStatus('current')
chasBrdPwr = MibTableColumn((1, 3, 6, 1, 4, 1, 10950, 1, 1, 1, 4, 1, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("default", 0), ("powerOn", 1), ("powerOff", 2))).clone('powerOn')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: chasBrdPwr.setStatus('current')
chasBrdIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 10950, 1, 1, 1, 4, 1, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: chasBrdIfIndex.setStatus('current')
chasBrdSerialNum = MibTableColumn((1, 3, 6, 1, 4, 1, 10950, 1, 1, 1, 4, 1, 1, 11), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: chasBrdSerialNum.setStatus('current')
chasBrdReset = MibTableColumn((1, 3, 6, 1, 4, 1, 10950, 1, 1, 1, 4, 1, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("default", 0), ("resetCold", 1), ("resetWarm", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: chasBrdReset.setStatus('current')
chasBrdStateChangeTrap = NotificationType((1, 3, 6, 1, 4, 1, 10950, 1, 1, 1, 4, 2)).setObjects(("Netrake-MIB", "chasBrdSlotNum"), ("Netrake-MIB", "chasBrdType"), ("Netrake-MIB", "chasBrdState"))
if mibBuilder.loadTexts: chasBrdStateChangeTrap.setStatus('current')
chasBrdStateChangeTrapAck = MibScalar((1, 3, 6, 1, 4, 1, 10950, 1, 1, 1, 4, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("notAck", 0), ("ack", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: chasBrdStateChangeTrapAck.setStatus('current')
chasBrdStateChangeTrapAckSource = MibScalar((1, 3, 6, 1, 4, 1, 10950, 1, 1, 1, 4, 4), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: chasBrdStateChangeTrapAckSource.setStatus('current')
totalPacketsXmitCPA = MibScalar((1, 3, 6, 1, 4, 1, 10950, 1, 1, 6, 1, 1), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: totalPacketsXmitCPA.setStatus('current')
numPacketsDiscardCPA = MibScalar((1, 3, 6, 1, 4, 1, 10950, 1, 1, 6, 1, 2), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: numPacketsDiscardCPA.setStatus('current')
totalPacketsXmitCPB = MibScalar((1, 3, 6, 1, 4, 1, 10950, 1, 1, 6, 1, 3), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: totalPacketsXmitCPB.setStatus('current')
numPacketsDiscardCPB = MibScalar((1, 3, 6, 1, 4, 1, 10950, 1, 1, 6, 1, 4), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: numPacketsDiscardCPB.setStatus('current')
totalPacketsXmit = MibScalar((1, 3, 6, 1, 4, 1, 10950, 1, 1, 6, 1, 5), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: totalPacketsXmit.setStatus('current')
totalPacketsDiscard = MibScalar((1, 3, 6, 1, 4, 1, 10950, 1, 1, 6, 1, 6), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: totalPacketsDiscard.setStatus('current')
gigEStatsTable = MibTable((1, 3, 6, 1, 4, 1, 10950, 1, 1, 6, 2, 1), )
if mibBuilder.loadTexts: gigEStatsTable.setStatus('current')
gigEStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 10950, 1, 1, 6, 2, 1, 1), ).setIndexNames((0, "Netrake-MIB", "gigEStatsPortIndex"), (0, "Netrake-MIB", "gigEStatsSlotNum"))
if mibBuilder.loadTexts: gigEStatsEntry.setStatus('current')
gigEStatsPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 10950, 1, 1, 6, 2, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 48))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gigEStatsPortIndex.setStatus('current')
gigEStatsSlotNum = MibTableColumn((1, 3, 6, 1, 4, 1, 10950, 1, 1, 6, 2, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 14))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gigEStatsSlotNum.setStatus('current')
linkStatusChanges = MibTableColumn((1, 3, 6, 1, 4, 1, 10950, 1, 1, 6, 2, 1, 1, 3), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: linkStatusChanges.setStatus('current')
framesRcvdOkCount = MibTableColumn((1, 3, 6, 1, 4, 1, 10950, 1, 1, 6, 2, 1, 1, 4), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: framesRcvdOkCount.setStatus('current')
octetsRcvdOkCount = MibTableColumn((1, 3, 6, 1, 4, 1, 10950, 1, 1, 6, 2, 1, 1, 5), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: octetsRcvdOkCount.setStatus('current')
framesRcvdCount = MibTableColumn((1, 3, 6, 1, 4, 1, 10950, 1, 1, 6, 2, 1, 1, 6), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: framesRcvdCount.setStatus('current')
octetsRcvdCount = MibTableColumn((1, 3, 6, 1, 4, 1, 10950, 1, 1, 6, 2, 1, 1, 7), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: octetsRcvdCount.setStatus('current')
frameSeqErrCount = MibTableColumn((1, 3, 6, 1, 4, 1, 10950, 1, 1, 6, 2, 1, 1, 8), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frameSeqErrCount.setStatus('current')
lostFramesMacErrCount = MibTableColumn((1, 3, 6, 1, 4, 1, 10950, 1, 1, 6, 2, 1, 1, 9), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lostFramesMacErrCount.setStatus('current')
rcvdFrames64Octets = MibTableColumn((1, 3, 6, 1, 4, 1, 10950, 1, 1, 6, 2, 1, 1, 10), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rcvdFrames64Octets.setStatus('current')
octetsRcvd1519toMax = MibTableColumn((1, 3, 6, 1, 4, 1, 10950, 1, 1, 6, 2, 1, 1, 11), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: octetsRcvd1519toMax.setStatus('current')
xmitFrames64Octets = MibTableColumn((1, 3, 6, 1, 4, 1, 10950, 1, 1, 6, 2, 1, 1, 12), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xmitFrames64Octets.setStatus('current')
octetsXmit1024to1518 = MibTableColumn((1, 3, 6, 1, 4, 1, 10950, 1, 1, 6, 2, 1, 1, 13), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: octetsXmit1024to1518.setStatus('current')
octetsXmitCount = MibTableColumn((1, 3, 6, 1, 4, 1, 10950, 1, 1, 6, 2, 1, 1, 14), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: octetsXmitCount.setStatus('current')
unicastFramesXmitOk = MibTableColumn((1, 3, 6, 1, 4, 1, 10950, 1, 1, 6, 2, 1, 1, 15), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: unicastFramesXmitOk.setStatus('current')
unicastFramesRcvdOk = MibTableColumn((1, 3, 6, 1, 4, 1, 10950, 1, 1, 6, 2, 1, 1, 16), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: unicastFramesRcvdOk.setStatus('current')
broadcastFramesXmitOk = MibTableColumn((1, 3, 6, 1, 4, 1, 10950, 1, 1, 6, 2, 1, 1, 17), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: broadcastFramesXmitOk.setStatus('current')
broadcastFramesRcvdOk = MibTableColumn((1, 3, 6, 1, 4, 1, 10950, 1, 1, 6, 2, 1, 1, 18), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: broadcastFramesRcvdOk.setStatus('current')
multicastFramesXmitOk = MibTableColumn((1, 3, 6, 1, 4, 1, 10950, 1, 1, 6, 2, 1, 1, 19), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: multicastFramesXmitOk.setStatus('current')
multicastFramesRcvdOk = MibTableColumn((1, 3, 6, 1, 4, 1, 10950, 1, 1, 6, 2, 1, 1, 20), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: multicastFramesRcvdOk.setStatus('current')
octetsRcvd65to127 = MibTableColumn((1, 3, 6, 1, 4, 1, 10950, 1, 1, 6, 2, 1, 1, 21), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: octetsRcvd65to127.setStatus('current')
octetsXmit65to127 = MibTableColumn((1, 3, 6, 1, 4, 1, 10950, 1, 1, 6, 2, 1, 1, 22), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: octetsXmit65to127.setStatus('current')
octetRcvd128to255 = MibTableColumn((1, 3, 6, 1, 4, 1, 10950, 1, 1, 6, 2, 1, 1, 23), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: octetRcvd128to255.setStatus('current')
octetsXmit128to255 = MibTableColumn((1, 3, 6, 1, 4, 1, 10950, 1, 1, 6, 2, 1, 1, 24), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: octetsXmit128to255.setStatus('current')
octetsRcvd256to511 = MibTableColumn((1, 3, 6, 1, 4, 1, 10950, 1, 1, 6, 2, 1, 1, 25), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: octetsRcvd256to511.setStatus('current')
octetsXmit256to511 = MibTableColumn((1, 3, 6, 1, 4, 1, 10950, 1, 1, 6, 2, 1, 1, 26), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: octetsXmit256to511.setStatus('current')
octetsRcvd512to1023 = MibTableColumn((1, 3, 6, 1, 4, 1, 10950, 1, 1, 6, 2, 1, 1, 27), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: octetsRcvd512to1023.setStatus('current')
octetsXmit512to1023 = MibTableColumn((1, 3, 6, 1, 4, 1, 10950, 1, 1, 6, 2, 1, 1, 28), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: octetsXmit512to1023.setStatus('current')
octetsRcvd1024to1518 = MibTableColumn((1, 3, 6, 1, 4, 1, 10950, 1, 1, 6, 2, 1, 1, 29), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: octetsRcvd1024to1518.setStatus('current')
octetsXmit1519toMax = MibTableColumn((1, 3, 6, 1, 4, 1, 10950, 1, 1, 6, 2, 1, 1, 30), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: octetsXmit1519toMax.setStatus('current')
underSizeFramesRcvd = MibTableColumn((1, 3, 6, 1, 4, 1, 10950, 1, 1, 6, 2, 1, 1, 31), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: underSizeFramesRcvd.setStatus('current')
jabbersRcvd = MibTableColumn((1, 3, 6, 1, 4, 1, 10950, 1, 1, 6, 2, 1, 1, 32), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jabbersRcvd.setStatus('current')
serviceStatsTable = MibTable((1, 3, 6, 1, 4, 1, 10950, 1, 1, 6, 3, 1), )
if mibBuilder.loadTexts: serviceStatsTable.setStatus('current')
serviceStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 10950, 1, 1, 6, 3, 1, 1), ).setIndexNames((0, "Netrake-MIB", "serviceStatsPortIndex"), (0, "Netrake-MIB", "serviceStatsSlotId"))
if mibBuilder.loadTexts: serviceStatsEntry.setStatus('current')
serviceStatsPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 10950, 1, 1, 6, 3, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: serviceStatsPortIndex.setStatus('current')
serviceStatsSlotId = MibTableColumn((1, 3, 6, 1, 4, 1, 10950, 1, 1, 6, 3, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: serviceStatsSlotId.setStatus('current')
realTimeTotalPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 10950, 1, 1, 6, 3, 1, 1, 3), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: realTimeTotalPackets.setStatus('current')
realTimeDiscardPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 10950, 1, 1, 6, 3, 1, 1, 4), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: realTimeDiscardPackets.setStatus('current')
nrtTotalPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 10950, 1, 1, 6, 3, 1, 1, 5), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nrtTotalPackets.setStatus('current')
nrtDiscardPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 10950, 1, 1, 6, 3, 1, 1, 6), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nrtDiscardPackets.setStatus('current')
bestEffortTotalPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 10950, 1, 1, 6, 3, 1, 1, 7), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bestEffortTotalPackets.setStatus('current')
bestEffortDiscardPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 10950, 1, 1, 6, 3, 1, 1, 8), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bestEffortDiscardPackets.setStatus('current')
redundPairedModeTimeTicks = MibScalar((1, 3, 6, 1, 4, 1, 10950, 1, 1, 6, 4, 1), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: redundPairedModeTimeTicks.setStatus('current')
redundRecoveryModeTimeTicks = MibScalar((1, 3, 6, 1, 4, 1, 10950, 1, 1, 6, 4, 2), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: redundRecoveryModeTimeTicks.setStatus('current')
redundNumRedundLinkFailures = MibScalar((1, 3, 6, 1, 4, 1, 10950, 1, 1, 6, 4, 3), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: redundNumRedundLinkFailures.setStatus('current')
redundActiveMateCalls = MibScalar((1, 3, 6, 1, 4, 1, 10950, 1, 1, 6, 4, 4), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: redundActiveMateCalls.setStatus('current')
redundActiveMateRegist = MibScalar((1, 3, 6, 1, 4, 1, 10950, 1, 1, 6, 4, 5), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: redundActiveMateRegist.setStatus('current')
policyCountersTable = MibTable((1, 3, 6, 1, 4, 1, 10950, 1, 1, 6, 5, 1), )
if mibBuilder.loadTexts: policyCountersTable.setStatus('current')
policyCountersEntry = MibTableRow((1, 3, 6, 1, 4, 1, 10950, 1, 1, 6, 5, 1, 1), ).setIndexNames((0, "Netrake-MIB", "policyIndex"))
if mibBuilder.loadTexts: policyCountersEntry.setStatus('current')
policyIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 10950, 1, 1, 6, 5, 1, 1, 1), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: policyIndex.setStatus('current')
policyTotalPacketsA = MibTableColumn((1, 3, 6, 1, 4, 1, 10950, 1, 1, 6, 5, 1, 1, 2), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: policyTotalPacketsA.setStatus('current')
policyTotalPacketsB = MibTableColumn((1, 3, 6, 1, 4, 1, 10950, 1, 1, 6, 5, 1, 1, 3), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: policyTotalPacketsB.setStatus('current')
policyTotalPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 10950, 1, 1, 6, 5, 1, 1, 4), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: policyTotalPackets.setStatus('current')
policyStatsReset = MibScalar((1, 3, 6, 1, 4, 1, 10950, 1, 1, 6, 5, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: policyStatsReset.setStatus('current')
sipStatCallsInitiating = MibScalar((1, 3, 6, 1, 4, 1, 10950, 1, 1, 6, 6, 1), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sipStatCallsInitiating.setStatus('current')
sipStatNonLocalActiveCalls = MibScalar((1, 3, 6, 1, 4, 1, 10950, 1, 1, 6, 6, 2), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sipStatNonLocalActiveCalls.setStatus('deprecated')
sipStatLocalActiveCalls = MibScalar((1, 3, 6, 1, 4, 1, 10950, 1, 1, 6, 6, 3), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sipStatLocalActiveCalls.setStatus('current')
sipStatTermCalls = MibScalar((1, 3, 6, 1, 4, 1, 10950, 1, 1, 6, 6, 4), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sipStatTermCalls.setStatus('current')
sipStatPeakActiveCalls = MibScalar((1, 3, 6, 1, 4, 1, 10950, 1, 1, 6, 6, 5), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sipStatPeakActiveCalls.setStatus('deprecated')
sipStatTotalActiveCalls = MibScalar((1, 3, 6, 1, 4, 1, 10950, 1, 1, 6, 6, 6), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sipStatTotalActiveCalls.setStatus('current')
sipStatCallsCompletedSuccess = MibScalar((1, 3, 6, 1, 4, 1, 10950, 1, 1, 6, 6, 7), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sipStatCallsCompletedSuccess.setStatus('current')
sipStatCallsFailed = MibScalar((1, 3, 6, 1, 4, 1, 10950, 1, 1, 6, 6, 8), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sipStatCallsFailed.setStatus('current')
sipStatCallsAbandoned = MibScalar((1, 3, 6, 1, 4, 1, 10950, 1, 1, 6, 6, 9), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sipStatCallsAbandoned.setStatus('current')
sipStatCallsDropped = MibScalar((1, 3, 6, 1, 4, 1, 10950, 1, 1, 6, 6, 10), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sipStatCallsDropped.setStatus('deprecated')
sipStatCallsDegraded = MibScalar((1, 3, 6, 1, 4, 1, 10950, 1, 1, 6, 6, 11), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sipStatCallsDegraded.setStatus('current')
sipStatAuthFailures = MibScalar((1, 3, 6, 1, 4, 1, 10950, 1, 1, 6, 6, 12), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sipStatAuthFailures.setStatus('deprecated')
sipStatCallMediaTimeouts = MibScalar((1, 3, 6, 1, 4, 1, 10950, 1, 1, 6, 6, 13), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sipStatCallMediaTimeouts.setStatus('current')
sipStatCallInitTimeouts = MibScalar((1, 3, 6, 1, 4, 1, 10950, 1, 1, 6, 6, 14), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sipStatCallInitTimeouts.setStatus('current')
sipStatTermTimeouts = MibScalar((1, 3, 6, 1, 4, 1, 10950, 1, 1, 6, 6, 15), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sipStatTermTimeouts.setStatus('current')
sipStatMsgErrs = MibScalar((1, 3, 6, 1, 4, 1, 10950, 1, 1, 6, 6, 16), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sipStatMsgErrs.setStatus('deprecated')
sipStatCallsProcessed = MibScalar((1, 3, 6, 1, 4, 1, 10950, 1, 1, 6, 6, 17), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sipStatCallsProcessed.setStatus('current')
sipStatPeakNonLocalCalls = MibScalar((1, 3, 6, 1, 4, 1, 10950, 1, 1, 6, 6, 18), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sipStatPeakNonLocalCalls.setStatus('deprecated')
sipStatPeakLocalCalls = MibScalar((1, 3, 6, 1, 4, 1, 10950, 1, 1, 6, 6, 19), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sipStatPeakLocalCalls.setStatus('current')
sipStatRedirectSuccess = MibScalar((1, 3, 6, 1, 4, 1, 10950, 1, 1, 6, 6, 20), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sipStatRedirectSuccess.setStatus('deprecated')
sipStatRedirectFailures = MibScalar((1, 3, 6, 1, 4, 1, 10950, 1, 1, 6, 6, 21), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sipStatRedirectFailures.setStatus('deprecated')
sipStatMessageRoutingFailures = MibScalar((1, 3, 6, 1, 4, 1, 10950, 1, 1, 6, 6, 22), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sipStatMessageRoutingFailures.setStatus('deprecated')
sipStatAuthenticationChallenges = MibScalar((1, 3, 6, 1, 4, 1, 10950, 1, 1, 6, 6, 23), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sipStatAuthenticationChallenges.setStatus('current')
sipStatRTPFWTraversalTimeouts = MibScalar((1, 3, 6, 1, 4, 1, 10950, 1, 1, 6, 6, 24), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sipStatRTPFWTraversalTimeouts.setStatus('current')
sipStatMessagesReroutedToMate = MibScalar((1, 3, 6, 1, 4, 1, 10950, 1, 1, 6, 6, 25), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sipStatMessagesReroutedToMate.setStatus('deprecated')
sipStatSameSideActiveCalls = MibScalar((1, 3, 6, 1, 4, 1, 10950, 1, 1, 6, 6, 26), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sipStatSameSideActiveCalls.setStatus('current')
sipStatNormalActiveCalls = MibScalar((1, 3, 6, 1, 4, 1, 10950, 1, 1, 6, 6, 27), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sipStatNormalActiveCalls.setStatus('current')
sipStatPeakSameSideActiveCalls = MibScalar((1, 3, 6, 1, 4, 1, 10950, 1, 1, 6, 6, 28), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sipStatPeakSameSideActiveCalls.setStatus('current')
sipStatPeakNormalActiveCalls = MibScalar((1, 3, 6, 1, 4, 1, 10950, 1, 1, 6, 6, 29), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sipStatPeakNormalActiveCalls.setStatus('current')
sipStatCurrentFaxSessions = MibScalar((1, 3, 6, 1, 4, 1, 10950, 1, 1, 6, 6, 30), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sipStatCurrentFaxSessions.setStatus('deprecated')
sipStatPeakFaxSessions = MibScalar((1, 3, 6, 1, 4, 1, 10950, 1, 1, 6, 6, 31), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sipStatPeakFaxSessions.setStatus('deprecated')
sipStatTotalFaxSessions = MibScalar((1, 3, 6, 1, 4, 1, 10950, 1, 1, 6, 6, 32), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sipStatTotalFaxSessions.setStatus('deprecated')
sipStatPeakTotalActiveCalls = MibScalar((1, 3, 6, 1, 4, 1, 10950, 1, 1, 6, 6, 33), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sipStatPeakTotalActiveCalls.setStatus('current')
vlanStatsTable = MibTable((1, 3, 6, 1, 4, 1, 10950, 1, 1, 6, 7, 2), )
if mibBuilder.loadTexts: vlanStatsTable.setStatus('current')
vlanStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 10950, 1, 1, 6, 7, 2, 1), ).setIndexNames((0, "Netrake-MIB", "vlanStatsSlotNum"), (0, "Netrake-MIB", "vlanStatsPortNum"), (0, "Netrake-MIB", "vlanStatsVlanLabel"))
if mibBuilder.loadTexts: vlanStatsEntry.setStatus('current')
vlanStatsSlotNum = MibTableColumn((1, 3, 6, 1, 4, 1, 10950, 1, 1, 6, 7, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 14))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vlanStatsSlotNum.setStatus('current')
vlanStatsPortNum = MibTableColumn((1, 3, 6, 1, 4, 1, 10950, 1, 1, 6, 7, 2, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 48))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vlanStatsPortNum.setStatus('current')
vlanStatsVlanLabel = MibTableColumn((1, 3, 6, 1, 4, 1, 10950, 1, 1, 6, 7, 2, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vlanStatsVlanLabel.setStatus('current')
vlanTotalPacketsXmit = MibTableColumn((1, 3, 6, 1, 4, 1, 10950, 1, 1, 6, 7, 2, 1, 4), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vlanTotalPacketsXmit.setStatus('current')
vlanTotalPacketsRcvd = MibTableColumn((1, 3, 6, 1, 4, 1, 10950, 1, 1, 6, 7, 2, 1, 5), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vlanTotalPacketsRcvd.setStatus('current')
vlanStatsReset = MibScalar((1, 3, 6, 1, 4, 1, 10950, 1, 1, 6, 7, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("default", 0), ("reset", 1))).clone('default')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vlanStatsReset.setStatus('current')
custSipStatsTable = MibTable((1, 3, 6, 1, 4, 1, 10950, 1, 1, 6, 8, 1), )
if mibBuilder.loadTexts: custSipStatsTable.setStatus('current')
custSipStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 10950, 1, 1, 6, 8, 1, 1), ).setIndexNames((0, "Netrake-MIB", "custSipStatId"))
if mibBuilder.loadTexts: custSipStatsEntry.setStatus('current')
custSipStatId = MibTableColumn((1, 3, 6, 1, 4, 1, 10950, 1, 1, 6, 8, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: custSipStatId.setStatus('current')
custSipStatCallsInitiating = MibTableColumn((1, 3, 6, 1, 4, 1, 10950, 1, 1, 6, 8, 1, 1, 2), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: custSipStatCallsInitiating.setStatus('current')
custSipStatNonLocalActiveCalls = MibTableColumn((1, 3, 6, 1, 4, 1, 10950, 1, 1, 6, 8, 1, 1, 3), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: custSipStatNonLocalActiveCalls.setStatus('deprecated')
custSipStatLocalActiveCalls = MibTableColumn((1, 3, 6, 1, 4, 1, 10950, 1, 1, 6, 8, 1, 1, 4), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: custSipStatLocalActiveCalls.setStatus('current')
custSipStatTermCalls = MibTableColumn((1, 3, 6, 1, 4, 1, 10950, 1, 1, 6, 8, 1, 1, 5), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: custSipStatTermCalls.setStatus('current')
custSipStatPeakActiveCalls = MibTableColumn((1, 3, 6, 1, 4, 1, 10950, 1, 1, 6, 8, 1, 1, 6), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: custSipStatPeakActiveCalls.setStatus('deprecated')
custSipStatTotalActiveCalls = MibTableColumn((1, 3, 6, 1, 4, 1, 10950, 1, 1, 6, 8, 1, 1, 7), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: custSipStatTotalActiveCalls.setStatus('current')
custSipStatCallsCompletedSuccess = MibTableColumn((1, 3, 6, 1, 4, 1, 10950, 1, 1, 6, 8, 1, 1, 8), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: custSipStatCallsCompletedSuccess.setStatus('current')
custSipStatCallsFailed = MibTableColumn((1, 3, 6, 1, 4, 1, 10950, 1, 1, 6, 8, 1, 1, 9), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: custSipStatCallsFailed.setStatus('current')
custSipStatCallsAbandoned = MibTableColumn((1, 3, 6, 1, 4, 1, 10950, 1, 1, 6, 8, 1, 1, 10), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: custSipStatCallsAbandoned.setStatus('current')
custSipStatCallsDropped = MibTableColumn((1, 3, 6, 1, 4, 1, 10950, 1, 1, 6, 8, 1, 1, 11), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: custSipStatCallsDropped.setStatus('deprecated')
custSipStatCallsDegraded = MibTableColumn((1, 3, 6, 1, 4, 1, 10950, 1, 1, 6, 8, 1, 1, 12), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: custSipStatCallsDegraded.setStatus('current')
custSipStatCallMediaTimeouts = MibTableColumn((1, 3, 6, 1, 4, 1, 10950, 1, 1, 6, 8, 1, 1, 13), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: custSipStatCallMediaTimeouts.setStatus('current')
custSipStatCallInitTimeouts = MibTableColumn((1, 3, 6, 1, 4, 1, 10950, 1, 1, 6, 8, 1, 1, 14), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: custSipStatCallInitTimeouts.setStatus('current')
custSipStatTermTimeouts = MibTableColumn((1, 3, 6, 1, 4, 1, 10950, 1, 1, 6, 8, 1, 1, 15), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: custSipStatTermTimeouts.setStatus('current')
custSipStatCallsProcessed = MibTableColumn((1, 3, 6, 1, 4, 1, 10950, 1, 1, 6, 8, 1, 1, 16), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: custSipStatCallsProcessed.setStatus('current')
custSipPeakNonLocalCalls = MibTableColumn((1, 3, 6, 1, 4, 1, 10950, 1, 1, 6, 8, 1, 1, 17), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: custSipPeakNonLocalCalls.setStatus('deprecated')
custSipPeakLocalCalls = MibTableColumn((1, 3, 6, 1, 4, 1, 10950, 1, 1, 6, 8, 1, 1, 18), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: custSipPeakLocalCalls.setStatus('current')
custSipAuthenticationChallenges = MibTableColumn((1, 3, 6, 1, 4, 1, 10950, 1, 1, 6, 8, 1, 1, 19), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: custSipAuthenticationChallenges.setStatus('current')
custSipRTPFWTraversalTimeouts = MibTableColumn((1, 3, 6, 1, 4, 1, 10950, 1, 1, 6, 8, 1, 1, 20), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: custSipRTPFWTraversalTimeouts.setStatus('current')
custSipSameSideActiveCalls = MibTableColumn((1, 3, 6, 1, 4, 1, 10950, 1, 1, 6, 8, 1, 1, 21), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: custSipSameSideActiveCalls.setStatus('current')
custSipNormalActiveCalls = MibTableColumn((1, 3, 6, 1, 4, 1, 10950, 1, 1, 6, 8, 1, 1, 22), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: custSipNormalActiveCalls.setStatus('current')
custSipPeakNormalActiveCalls = MibTableColumn((1, 3, 6, 1, 4, 1, 10950, 1, 1, 6, 8, 1, 1, 23), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: custSipPeakNormalActiveCalls.setStatus('current')
custSipPeakTotalActive = MibTableColumn((1, 3, 6, 1, 4, 1, 10950, 1, 1, 6, 8, 1, 1, 24), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: custSipPeakTotalActive.setStatus('current')
nCiteSDRCollectionCycle = MibScalar((1, 3, 6, 1, 4, 1, 10950, 1, 1, 6, 10, 1), Integer32().clone(5)).setMaxAccess("readonly")
if mibBuilder.loadTexts: nCiteSDRCollectionCycle.setStatus('current')
nCIteSDRLastSent = MibScalar((1, 3, 6, 1, 4, 1, 10950, 1, 1, 6, 10, 2), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nCIteSDRLastSent.setStatus('current')
nCiteSDREnable = MibScalar((1, 3, 6, 1, 4, 1, 10950, 1, 1, 6, 10, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nCiteSDREnable.setStatus('current')
nCiteSDRSentTrap = NotificationType((1, 3, 6, 1, 4, 1, 10950, 1, 1, 6, 10, 4)).setObjects(("Netrake-MIB", "nCIteSDRLastSent"))
if mibBuilder.loadTexts: nCiteSDRSentTrap.setStatus('current')
nCiteSDRSentTrapAck = MibScalar((1, 3, 6, 1, 4, 1, 10950, 1, 1, 6, 10, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("notAck", 0), ("ack", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nCiteSDRSentTrapAck.setStatus('current')
nCiteSDRSentTrapAckSource = MibScalar((1, 3, 6, 1, 4, 1, 10950, 1, 1, 6, 10, 6), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nCiteSDRSentTrapAckSource.setStatus('current')
regStatNumInitiating = MibScalar((1, 3, 6, 1, 4, 1, 10950, 1, 1, 6, 11, 1), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: regStatNumInitiating.setStatus('current')
regStatNumActive = MibScalar((1, 3, 6, 1, 4, 1, 10950, 1, 1, 6, 11, 2), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: regStatNumActive.setStatus('current')
regStatPeak = MibScalar((1, 3, 6, 1, 4, 1, 10950, 1, 1, 6, 11, 3), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: regStatPeak.setStatus('current')
regStatUpdateSuccess = MibScalar((1, 3, 6, 1, 4, 1, 10950, 1, 1, 6, 11, 4), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: regStatUpdateSuccess.setStatus('current')
regStatUpdateFailed = MibScalar((1, 3, 6, 1, 4, 1, 10950, 1, 1, 6, 11, 5), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: regStatUpdateFailed.setStatus('current')
regStatExpired = MibScalar((1, 3, 6, 1, 4, 1, 10950, 1, 1, 6, 11, 6), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: regStatExpired.setStatus('current')
regStatDropped = MibScalar((1, 3, 6, 1, 4, 1, 10950, 1, 1, 6, 11, 7), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: regStatDropped.setStatus('deprecated')
regStatAuthFailures = MibScalar((1, 3, 6, 1, 4, 1, 10950, 1, 1, 6, 11, 8), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: regStatAuthFailures.setStatus('current')
regStatInitSipTimeouts = MibScalar((1, 3, 6, 1, 4, 1, 10950, 1, 1, 6, 11, 9), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: regStatInitSipTimeouts.setStatus('current')
regStatTermSipTimeouts = MibScalar((1, 3, 6, 1, 4, 1, 10950, 1, 1, 6, 11, 10), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: regStatTermSipTimeouts.setStatus('current')
regStatTerminating = MibScalar((1, 3, 6, 1, 4, 1, 10950, 1, 1, 6, 11, 11), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: regStatTerminating.setStatus('current')
regStatFailed = MibScalar((1, 3, 6, 1, 4, 1, 10950, 1, 1, 6, 11, 12), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: regStatFailed.setStatus('current')
regStatAuthenticationChallenges = MibScalar((1, 3, 6, 1, 4, 1, 10950, 1, 1, 6, 11, 13), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: regStatAuthenticationChallenges.setStatus('current')
regStatUnauthReg = MibScalar((1, 3, 6, 1, 4, 1, 10950, 1, 1, 6, 11, 14), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: regStatUnauthReg.setStatus('current')
custRegStatsTable = MibTable((1, 3, 6, 1, 4, 1, 10950, 1, 1, 6, 12, 1), )
if mibBuilder.loadTexts: custRegStatsTable.setStatus('current')
custRegStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 10950, 1, 1, 6, 12, 1, 1), ).setIndexNames((0, "Netrake-MIB", "custRegStatId"))
if mibBuilder.loadTexts: custRegStatsEntry.setStatus('current')
custRegStatId = MibTableColumn((1, 3, 6, 1, 4, 1, 10950, 1, 1, 6, 12, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: custRegStatId.setStatus('current')
custRegStatNumInitiated = MibTableColumn((1, 3, 6, 1, 4, 1, 10950, 1, 1, 6, 12, 1, 1, 2), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: custRegStatNumInitiated.setStatus('current')
custRegStatNumActive = MibTableColumn((1, 3, 6, 1, 4, 1, 10950, 1, 1, 6, 12, 1, 1, 3), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: custRegStatNumActive.setStatus('current')
custRegStatPeak = MibTableColumn((1, 3, 6, 1, 4, 1, 10950, 1, 1, 6, 12, 1, 1, 4), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: custRegStatPeak.setStatus('current')
custRegStatUpdateSuccess = MibTableColumn((1, 3, 6, 1, 4, 1, 10950, 1, 1, 6, 12, 1, 1, 5), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: custRegStatUpdateSuccess.setStatus('current')
custRegStatUpdateFailed = MibTableColumn((1, 3, 6, 1, 4, 1, 10950, 1, 1, 6, 12, 1, 1, 6), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: custRegStatUpdateFailed.setStatus('current')
custRegStatExpired = MibTableColumn((1, 3, 6, 1, 4, 1, 10950, 1, 1, 6, 12, 1, 1, 7), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: custRegStatExpired.setStatus('current')
custRegStatDropped = MibTableColumn((1, 3, 6, 1, 4, 1, 10950, 1, 1, 6, 12, 1, 1, 8), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: custRegStatDropped.setStatus('deprecated')
custRegStatInitSipTimeouts = MibTableColumn((1, 3, 6, 1, 4, 1, 10950, 1, 1, 6, 12, 1, 1, 9), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: custRegStatInitSipTimeouts.setStatus('current')
custRegStatTermSipTimeouts = MibTableColumn((1, 3, 6, 1, 4, 1, 10950, 1, 1, 6, 12, 1, 1, 10), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: custRegStatTermSipTimeouts.setStatus('current')
custRegStatTerminating = MibTableColumn((1, 3, 6, 1, 4, 1, 10950, 1, 1, 6, 12, 1, 1, 11), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: custRegStatTerminating.setStatus('current')
custRegStatFailed = MibTableColumn((1, 3, 6, 1, 4, 1, 10950, 1, 1, 6, 12, 1, 1, 12), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: custRegStatFailed.setStatus('current')
custRegAuthenticationChallenges = MibTableColumn((1, 3, 6, 1, 4, 1, 10950, 1, 1, 6, 12, 1, 1, 13), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: custRegAuthenticationChallenges.setStatus('current')
custRegStatUnauthorizedReg = MibTableColumn((1, 3, 6, 1, 4, 1, 10950, 1, 1, 6, 12, 1, 1, 14), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: custRegStatUnauthorizedReg.setStatus('current')
ntsStatNumCust = MibScalar((1, 3, 6, 1, 4, 1, 10950, 1, 1, 6, 13, 1), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ntsStatNumCust.setStatus('current')
ntsStatAuthFailures = MibScalar((1, 3, 6, 1, 4, 1, 10950, 1, 1, 6, 13, 2), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ntsStatAuthFailures.setStatus('current')
ntsStatCustConnected = MibScalar((1, 3, 6, 1, 4, 1, 10950, 1, 1, 6, 13, 3), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ntsStatCustConnected.setStatus('current')
edrCurrentCallCount = MibScalar((1, 3, 6, 1, 4, 1, 10950, 1, 1, 6, 14, 1), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: edrCurrentCallCount.setStatus('current')
edrPeakCallCount = MibScalar((1, 3, 6, 1, 4, 1, 10950, 1, 1, 6, 14, 2), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: edrPeakCallCount.setStatus('current')
edrTotalCallsRogue = MibScalar((1, 3, 6, 1, 4, 1, 10950, 1, 1, 6, 14, 3), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: edrTotalCallsRogue.setStatus('current')
edrLastDetection = MibScalar((1, 3, 6, 1, 4, 1, 10950, 1, 1, 6, 14, 4), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: edrLastDetection.setStatus('current')
lrdCurrentCallCount = MibScalar((1, 3, 6, 1, 4, 1, 10950, 1, 1, 6, 14, 5), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lrdCurrentCallCount.setStatus('current')
lrdPeakCallCount = MibScalar((1, 3, 6, 1, 4, 1, 10950, 1, 1, 6, 14, 6), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lrdPeakCallCount.setStatus('current')
lrdTotalCallsRogue = MibScalar((1, 3, 6, 1, 4, 1, 10950, 1, 1, 6, 14, 7), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lrdTotalCallsRogue.setStatus('current')
lrdLastDetection = MibScalar((1, 3, 6, 1, 4, 1, 10950, 1, 1, 6, 14, 8), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lrdLastDetection.setStatus('current')
custNtsStatsTable = MibTable((1, 3, 6, 1, 4, 1, 10950, 1, 1, 6, 16, 1), )
if mibBuilder.loadTexts: custNtsStatsTable.setStatus('current')
custNtsStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 10950, 1, 1, 6, 16, 1, 1), ).setIndexNames((0, "Netrake-MIB", "custNtsStatId"))
if mibBuilder.loadTexts: custNtsStatsEntry.setStatus('current')
custNtsStatId = MibTableColumn((1, 3, 6, 1, 4, 1, 10950, 1, 1, 6, 16, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: custNtsStatId.setStatus('current')
custNtsAuthorizationFailed = MibTableColumn((1, 3, 6, 1, 4, 1, 10950, 1, 1, 6, 16, 1, 1, 2), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: custNtsAuthorizationFailed.setStatus('current')
sipH323CallsInitiating = MibScalar((1, 3, 6, 1, 4, 1, 10950, 1, 1, 6, 17, 1), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sipH323CallsInitiating.setStatus('current')
sipH323LocalActiveCalls = MibScalar((1, 3, 6, 1, 4, 1, 10950, 1, 1, 6, 17, 2), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sipH323LocalActiveCalls.setStatus('current')
sipH323TermCalls = MibScalar((1, 3, 6, 1, 4, 1, 10950, 1, 1, 6, 17, 3), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sipH323TermCalls.setStatus('current')
sipH323PeakTotalActiveCalls = MibScalar((1, 3, 6, 1, 4, 1, 10950, 1, 1, 6, 17, 4), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sipH323PeakTotalActiveCalls.setStatus('current')
sipH323TotalActiveCalls = MibScalar((1, 3, 6, 1, 4, 1, 10950, 1, 1, 6, 17, 5), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sipH323TotalActiveCalls.setStatus('current')
sipH323CallsCompletedSuccess = MibScalar((1, 3, 6, 1, 4, 1, 10950, 1, 1, 6, 17, 6), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sipH323CallsCompletedSuccess.setStatus('current')
sipH323CallsFailed = MibScalar((1, 3, 6, 1, 4, 1, 10950, 1, 1, 6, 17, 7), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sipH323CallsFailed.setStatus('current')
sipH323CallsAbandoned = MibScalar((1, 3, 6, 1, 4, 1, 10950, 1, 1, 6, 17, 8), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sipH323CallsAbandoned.setStatus('current')
sipH323CallsDropped = MibScalar((1, 3, 6, 1, 4, 1, 10950, 1, 1, 6, 17, 9), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sipH323CallsDropped.setStatus('deprecated')
sipH323CallsDegraded = MibScalar((1, 3, 6, 1, 4, 1, 10950, 1, 1, 6, 17, 10), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sipH323CallsDegraded.setStatus('current')
sipH323AuthFailures = MibScalar((1, 3, 6, 1, 4, 1, 10950, 1, 1, 6, 17, 11), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sipH323AuthFailures.setStatus('current')
sipH323CallMediaTimeouts = MibScalar((1, 3, 6, 1, 4, 1, 10950, 1, 1, 6, 17, 12), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sipH323CallMediaTimeouts.setStatus('current')
sipH323CallInitTimeouts = MibScalar((1, 3, 6, 1, 4, 1, 10950, 1, 1, 6, 17, 13), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sipH323CallInitTimeouts.setStatus('current')
sipH323TermTimeouts = MibScalar((1, 3, 6, 1, 4, 1, 10950, 1, 1, 6, 17, 14), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sipH323TermTimeouts.setStatus('current')
sipH323MsgErrs = MibScalar((1, 3, 6, 1, 4, 1, 10950, 1, 1, 6, 17, 15), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sipH323MsgErrs.setStatus('current')
sipH323CallsProcessed = MibScalar((1, 3, 6, 1, 4, 1, 10950, 1, 1, 6, 17, 16), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sipH323CallsProcessed.setStatus('current')
sipH323PeakLocalCalls = MibScalar((1, 3, 6, 1, 4, 1, 10950, 1, 1, 6, 17, 17), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sipH323PeakLocalCalls.setStatus('current')
sipH323RedirectSuccess = MibScalar((1, 3, 6, 1, 4, 1, 10950, 1, 1, 6, 17, 18), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sipH323RedirectSuccess.setStatus('deprecated')
sipH323RedirectFailures = MibScalar((1, 3, 6, 1, 4, 1, 10950, 1, 1, 6, 17, 19), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sipH323RedirectFailures.setStatus('deprecated')
sipH323MessageRoutingFailures = MibScalar((1, 3, 6, 1, 4, 1, 10950, 1, 1, 6, 17, 20), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sipH323MessageRoutingFailures.setStatus('current')
sipH323AuthenticationChallenges = MibScalar((1, 3, 6, 1, 4, 1, 10950, 1, 1, 6, 17, 21), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sipH323AuthenticationChallenges.setStatus('current')
sipH323RTPFWTraversalTimeouts = MibScalar((1, 3, 6, 1, 4, 1, 10950, 1, 1, 6, 17, 22), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sipH323RTPFWTraversalTimeouts.setStatus('current')
sipH323MessagesReroutedToMate = MibScalar((1, 3, 6, 1, 4, 1, 10950, 1, 1, 6, 17, 23), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sipH323MessagesReroutedToMate.setStatus('deprecated')
sipH323SameSideActiveCalls = MibScalar((1, 3, 6, 1, 4, 1, 10950, 1, 1, 6, 17, 24), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sipH323SameSideActiveCalls.setStatus('current')
sipH323NormalActiveCalls = MibScalar((1, 3, 6, 1, 4, 1, 10950, 1, 1, 6, 17, 25), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sipH323NormalActiveCalls.setStatus('current')
sipH323PeakSameSideActiveCalls = MibScalar((1, 3, 6, 1, 4, 1, 10950, 1, 1, 6, 17, 26), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sipH323PeakSameSideActiveCalls.setStatus('current')
sipH323PeakNormalActiveCalls = MibScalar((1, 3, 6, 1, 4, 1, 10950, 1, 1, 6, 17, 27), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sipH323PeakNormalActiveCalls.setStatus('current')
sipH323CurrentFaxSessions = MibScalar((1, 3, 6, 1, 4, 1, 10950, 1, 1, 6, 17, 28), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sipH323CurrentFaxSessions.setStatus('deprecated')
sipH323PeakFaxSessions = MibScalar((1, 3, 6, 1, 4, 1, 10950, 1, 1, 6, 17, 29), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sipH323PeakFaxSessions.setStatus('deprecated')
sipH323TotalFaxSessions = MibScalar((1, 3, 6, 1, 4, 1, 10950, 1, 1, 6, 17, 30), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sipH323TotalFaxSessions.setStatus('deprecated')
h323CallsInitiating = MibScalar((1, 3, 6, 1, 4, 1, 10950, 1, 1, 6, 18, 1), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h323CallsInitiating.setStatus('current')
h323LocalActiveCalls = MibScalar((1, 3, 6, 1, 4, 1, 10950, 1, 1, 6, 18, 2), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h323LocalActiveCalls.setStatus('current')
h323TermCalls = MibScalar((1, 3, 6, 1, 4, 1, 10950, 1, 1, 6, 18, 3), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h323TermCalls.setStatus('current')
h323PeakTotalActiveCalls = MibScalar((1, 3, 6, 1, 4, 1, 10950, 1, 1, 6, 18, 4), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h323PeakTotalActiveCalls.setStatus('current')
h323TotalActiveCalls = MibScalar((1, 3, 6, 1, 4, 1, 10950, 1, 1, 6, 18, 5), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h323TotalActiveCalls.setStatus('current')
h323CallsCompletedSuccess = MibScalar((1, 3, 6, 1, 4, 1, 10950, 1, 1, 6, 18, 6), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h323CallsCompletedSuccess.setStatus('current')
h323CallsFailed = MibScalar((1, 3, 6, 1, 4, 1, 10950, 1, 1, 6, 18, 7), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h323CallsFailed.setStatus('current')
h323CallsAbandoned = MibScalar((1, 3, 6, 1, 4, 1, 10950, 1, 1, 6, 18, 8), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h323CallsAbandoned.setStatus('current')
h323CallsDropped = MibScalar((1, 3, 6, 1, 4, 1, 10950, 1, 1, 6, 18, 9), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h323CallsDropped.setStatus('deprecated')
h323CallsDegraded = MibScalar((1, 3, 6, 1, 4, 1, 10950, 1, 1, 6, 18, 10), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h323CallsDegraded.setStatus('current')
h323AuthFailures = MibScalar((1, 3, 6, 1, 4, 1, 10950, 1, 1, 6, 18, 11), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h323AuthFailures.setStatus('current')
h323CallMediaTimeouts = MibScalar((1, 3, 6, 1, 4, 1, 10950, 1, 1, 6, 18, 12), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h323CallMediaTimeouts.setStatus('current')
h323CallInitTimeouts = MibScalar((1, 3, 6, 1, 4, 1, 10950, 1, 1, 6, 18, 13), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h323CallInitTimeouts.setStatus('current')
h323TermTimeouts = MibScalar((1, 3, 6, 1, 4, 1, 10950, 1, 1, 6, 18, 14), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h323TermTimeouts.setStatus('current')
h323MsgErrs = MibScalar((1, 3, 6, 1, 4, 1, 10950, 1, 1, 6, 18, 15), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h323MsgErrs.setStatus('current')
h323CallsProcessed = MibScalar((1, 3, 6, 1, 4, 1, 10950, 1, 1, 6, 18, 16), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h323CallsProcessed.setStatus('current')
h323PeakLocalCalls = MibScalar((1, 3, 6, 1, 4, 1, 10950, 1, 1, 6, 18, 17), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h323PeakLocalCalls.setStatus('current')
h323MessageRoutingFailures = MibScalar((1, 3, 6, 1, 4, 1, 10950, 1, 1, 6, 18, 18), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h323MessageRoutingFailures.setStatus('current')
h323AuthenticationChallenges = MibScalar((1, 3, 6, 1, 4, 1, 10950, 1, 1, 6, 18, 19), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h323AuthenticationChallenges.setStatus('current')
h323RTPFWTraversalTimeouts = MibScalar((1, 3, 6, 1, 4, 1, 10950, 1, 1, 6, 18, 20), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h323RTPFWTraversalTimeouts.setStatus('current')
h323SameSideActiveCalls = MibScalar((1, 3, 6, 1, 4, 1, 10950, 1, 1, 6, 18, 21), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h323SameSideActiveCalls.setStatus('current')
h323NormalActiveCalls = MibScalar((1, 3, 6, 1, 4, 1, 10950, 1, 1, 6, 18, 22), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h323NormalActiveCalls.setStatus('current')
h323PeakSameSideActiveCalls = MibScalar((1, 3, 6, 1, 4, 1, 10950, 1, 1, 6, 18, 23), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h323PeakSameSideActiveCalls.setStatus('current')
h323PeakNormalActiveCalls = MibScalar((1, 3, 6, 1, 4, 1, 10950, 1, 1, 6, 18, 24), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h323PeakNormalActiveCalls.setStatus('current')
h323CurrentFaxSessions = MibScalar((1, 3, 6, 1, 4, 1, 10950, 1, 1, 6, 18, 25), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h323CurrentFaxSessions.setStatus('deprecated')
h323PeakFaxSessions = MibScalar((1, 3, 6, 1, 4, 1, 10950, 1, 1, 6, 18, 26), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h323PeakFaxSessions.setStatus('deprecated')
h323TotalFaxSessions = MibScalar((1, 3, 6, 1, 4, 1, 10950, 1, 1, 6, 18, 27), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h323TotalFaxSessions.setStatus('deprecated')
voIpCallsInitiating = MibScalar((1, 3, 6, 1, 4, 1, 10950, 1, 1, 6, 19, 1), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: voIpCallsInitiating.setStatus('current')
voIpLocalActiveCalls = MibScalar((1, 3, 6, 1, 4, 1, 10950, 1, 1, 6, 19, 2), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: voIpLocalActiveCalls.setStatus('current')
voIpTermCalls = MibScalar((1, 3, 6, 1, 4, 1, 10950, 1, 1, 6, 19, 3), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: voIpTermCalls.setStatus('current')
voIpPeakTotalActiveCalls = MibScalar((1, 3, 6, 1, 4, 1, 10950, 1, 1, 6, 19, 4), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: voIpPeakTotalActiveCalls.setStatus('current')
voIpTotalActiveCalls = MibScalar((1, 3, 6, 1, 4, 1, 10950, 1, 1, 6, 19, 5), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: voIpTotalActiveCalls.setStatus('current')
voIpCallsCompletedSuccess = MibScalar((1, 3, 6, 1, 4, 1, 10950, 1, 1, 6, 19, 6), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: voIpCallsCompletedSuccess.setStatus('current')
voIpCallsFailed = MibScalar((1, 3, 6, 1, 4, 1, 10950, 1, 1, 6, 19, 7), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: voIpCallsFailed.setStatus('current')
voIpCallsAbandoned = MibScalar((1, 3, 6, 1, 4, 1, 10950, 1, 1, 6, 19, 8), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: voIpCallsAbandoned.setStatus('current')
voIpCallsDropped = MibScalar((1, 3, 6, 1, 4, 1, 10950, 1, 1, 6, 19, 9), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: voIpCallsDropped.setStatus('deprecated')
voIpCallsDegraded = MibScalar((1, 3, 6, 1, 4, 1, 10950, 1, 1, 6, 19, 10), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: voIpCallsDegraded.setStatus('current')
voIpAuthFailures = MibScalar((1, 3, 6, 1, 4, 1, 10950, 1, 1, 6, 19, 11), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: voIpAuthFailures.setStatus('current')
voIpCallMediaTimeouts = MibScalar((1, 3, 6, 1, 4, 1, 10950, 1, 1, 6, 19, 12), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: voIpCallMediaTimeouts.setStatus('current')
voIpCallInitTimeouts = MibScalar((1, 3, 6, 1, 4, 1, 10950, 1, 1, 6, 19, 13), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: voIpCallInitTimeouts.setStatus('current')
voIpTermTimeouts = MibScalar((1, 3, 6, 1, 4, 1, 10950, 1, 1, 6, 19, 14), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: voIpTermTimeouts.setStatus('current')
voIpMsgErrs = MibScalar((1, 3, 6, 1, 4, 1, 10950, 1, 1, 6, 19, 15), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: voIpMsgErrs.setStatus('current')
voIpCallsProcessed = MibScalar((1, 3, 6, 1, 4, 1, 10950, 1, 1, 6, 19, 16), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: voIpCallsProcessed.setStatus('current')
voIpPeakLocalCalls = MibScalar((1, 3, 6, 1, 4, 1, 10950, 1, 1, 6, 19, 17), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: voIpPeakLocalCalls.setStatus('current')
voIpRedirectSuccess = MibScalar((1, 3, 6, 1, 4, 1, 10950, 1, 1, 6, 19, 18), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: voIpRedirectSuccess.setStatus('deprecated')
voIpRedirectFailures = MibScalar((1, 3, 6, 1, 4, 1, 10950, 1, 1, 6, 19, 19), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: voIpRedirectFailures.setStatus('deprecated')
voIpMessageRoutingFailures = MibScalar((1, 3, 6, 1, 4, 1, 10950, 1, 1, 6, 19, 20), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: voIpMessageRoutingFailures.setStatus('current')
voIpAuthenticationChallenges = MibScalar((1, 3, 6, 1, 4, 1, 10950, 1, 1, 6, 19, 21), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: voIpAuthenticationChallenges.setStatus('current')
voIpRTPFWTraversalTimeouts = MibScalar((1, 3, 6, 1, 4, 1, 10950, 1, 1, 6, 19, 22), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: voIpRTPFWTraversalTimeouts.setStatus('current')
voIpMessagesReroutedToMate = MibScalar((1, 3, 6, 1, 4, 1, 10950, 1, 1, 6, 19, 23), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: voIpMessagesReroutedToMate.setStatus('deprecated')
voIpSameSideActiveCalls = MibScalar((1, 3, 6, 1, 4, 1, 10950, 1, 1, 6, 19, 24), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: voIpSameSideActiveCalls.setStatus('current')
voIpNormalActiveCalls = MibScalar((1, 3, 6, 1, 4, 1, 10950, 1, 1, 6, 19, 25), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: voIpNormalActiveCalls.setStatus('current')
voIpPeakSameSideActiveCalls = MibScalar((1, 3, 6, 1, 4, 1, 10950, 1, 1, 6, 19, 26), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: voIpPeakSameSideActiveCalls.setStatus('current')
voIpPeakNormalActiveCalls = MibScalar((1, 3, 6, 1, 4, 1, 10950, 1, 1, 6, 19, 27), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: voIpPeakNormalActiveCalls.setStatus('current')
voIpCurrentFaxSessions = MibScalar((1, 3, 6, 1, 4, 1, 10950, 1, 1, 6, 19, 28), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: voIpCurrentFaxSessions.setStatus('deprecated')
voIpPeakFaxSessions = MibScalar((1, 3, 6, 1, 4, 1, 10950, 1, 1, 6, 19, 29), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: voIpPeakFaxSessions.setStatus('deprecated')
voIpTotalFaxSessions = MibScalar((1, 3, 6, 1, 4, 1, 10950, 1, 1, 6, 19, 30), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: voIpTotalFaxSessions.setStatus('deprecated')
custSipH323StatsTable = MibTable((1, 3, 6, 1, 4, 1, 10950, 1, 1, 6, 20, 1), )
if mibBuilder.loadTexts: custSipH323StatsTable.setStatus('current')
custSipH323StatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 10950, 1, 1, 6, 20, 1, 1), ).setIndexNames((0, "Netrake-MIB", "custSipH323Id"))
if mibBuilder.loadTexts: custSipH323StatsEntry.setStatus('current')
custSipH323Id = MibTableColumn((1, 3, 6, 1, 4, 1, 10950, 1, 1, 6, 20, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: custSipH323Id.setStatus('current')
custSipH323CallsInitiating = MibTableColumn((1, 3, 6, 1, 4, 1, 10950, 1, 1, 6, 20, 1, 1, 2), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: custSipH323CallsInitiating.setStatus('current')
custSipH323LocalActiveCalls = MibTableColumn((1, 3, 6, 1, 4, 1, 10950, 1, 1, 6, 20, 1, 1, 3), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: custSipH323LocalActiveCalls.setStatus('current')
custSipH323TermCalls = MibTableColumn((1, 3, 6, 1, 4, 1, 10950, 1, 1, 6, 20, 1, 1, 4), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: custSipH323TermCalls.setStatus('current')
custSipH323PeakTotalActiveCalls = MibTableColumn((1, 3, 6, 1, 4, 1, 10950, 1, 1, 6, 20, 1, 1, 5), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: custSipH323PeakTotalActiveCalls.setStatus('current')
custSipH323TotalActiveCalls = MibTableColumn((1, 3, 6, 1, 4, 1, 10950, 1, 1, 6, 20, 1, 1, 6), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: custSipH323TotalActiveCalls.setStatus('current')
custSipH323CallsCompletedSuccess = MibTableColumn((1, 3, 6, 1, 4, 1, 10950, 1, 1, 6, 20, 1, 1, 7), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: custSipH323CallsCompletedSuccess.setStatus('current')
custSipH323CallsFailed = MibTableColumn((1, 3, 6, 1, 4, 1, 10950, 1, 1, 6, 20, 1, 1, 8), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: custSipH323CallsFailed.setStatus('current')
custSipH323CallsAbandoned = MibTableColumn((1, 3, 6, 1, 4, 1, 10950, 1, 1, 6, 20, 1, 1, 9), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: custSipH323CallsAbandoned.setStatus('current')
custSipH323CallsDropped = MibTableColumn((1, 3, 6, 1, 4, 1, 10950, 1, 1, 6, 20, 1, 1, 10), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: custSipH323CallsDropped.setStatus('deprecated')
custSipH323CallsDegraded = MibTableColumn((1, 3, 6, 1, 4, 1, 10950, 1, 1, 6, 20, 1, 1, 11), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: custSipH323CallsDegraded.setStatus('current')
custSipH323CallMediaTimeouts = MibTableColumn((1, 3, 6, 1, 4, 1, 10950, 1, 1, 6, 20, 1, 1, 12), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: custSipH323CallMediaTimeouts.setStatus('current')
custSipH323CallInitTimeouts = MibTableColumn((1, 3, 6, 1, 4, 1, 10950, 1, 1, 6, 20, 1, 1, 13), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: custSipH323CallInitTimeouts.setStatus('current')
custSipH323TermTimeouts = MibTableColumn((1, 3, 6, 1, 4, 1, 10950, 1, 1, 6, 20, 1, 1, 14), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: custSipH323TermTimeouts.setStatus('current')
custSipH323CallsProcessed = MibTableColumn((1, 3, 6, 1, 4, 1, 10950, 1, 1, 6, 20, 1, 1, 15), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: custSipH323CallsProcessed.setStatus('current')
custSipH323PeakLocalCalls = MibTableColumn((1, 3, 6, 1, 4, 1, 10950, 1, 1, 6, 20, 1, 1, 16), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: custSipH323PeakLocalCalls.setStatus('current')
custSipH323AuthenticationChallenges = MibTableColumn((1, 3, 6, 1, 4, 1, 10950, 1, 1, 6, 20, 1, 1, 17), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: custSipH323AuthenticationChallenges.setStatus('current')
custSipH323RTPFWTraversalTimeouts = MibTableColumn((1, 3, 6, 1, 4, 1, 10950, 1, 1, 6, 20, 1, 1, 18), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: custSipH323RTPFWTraversalTimeouts.setStatus('current')
custSipH323SameSideActiveCalls = MibTableColumn((1, 3, 6, 1, 4, 1, 10950, 1, 1, 6, 20, 1, 1, 19), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: custSipH323SameSideActiveCalls.setStatus('current')
custSipH323NormalActiveCalls = MibTableColumn((1, 3, 6, 1, 4, 1, 10950, 1, 1, 6, 20, 1, 1, 20), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: custSipH323NormalActiveCalls.setStatus('current')
custSipH323PeakNormalActiveCalls = MibTableColumn((1, 3, 6, 1, 4, 1, 10950, 1, 1, 6, 20, 1, 1, 21), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: custSipH323PeakNormalActiveCalls.setStatus('current')
custH323StatsTable = MibTable((1, 3, 6, 1, 4, 1, 10950, 1, 1, 6, 21, 1), )
if mibBuilder.loadTexts: custH323StatsTable.setStatus('current')
custH323StatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 10950, 1, 1, 6, 21, 1, 1), ).setIndexNames((0, "Netrake-MIB", "custH323Id"))
if mibBuilder.loadTexts: custH323StatsEntry.setStatus('current')
custH323Id = MibTableColumn((1, 3, 6, 1, 4, 1, 10950, 1, 1, 6, 21, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: custH323Id.setStatus('current')
custH323CallsInitiating = MibTableColumn((1, 3, 6, 1, 4, 1, 10950, 1, 1, 6, 21, 1, 1, 2), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: custH323CallsInitiating.setStatus('current')
custH323LocalActiveCalls = MibTableColumn((1, 3, 6, 1, 4, 1, 10950, 1, 1, 6, 21, 1, 1, 3), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: custH323LocalActiveCalls.setStatus('current')
custH323TermCalls = MibTableColumn((1, 3, 6, 1, 4, 1, 10950, 1, 1, 6, 21, 1, 1, 4), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: custH323TermCalls.setStatus('current')
custH323PeakTotalActiveCalls = MibTableColumn((1, 3, 6, 1, 4, 1, 10950, 1, 1, 6, 21, 1, 1, 5), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: custH323PeakTotalActiveCalls.setStatus('current')
custH323TotalActiveCalls = MibTableColumn((1, 3, 6, 1, 4, 1, 10950, 1, 1, 6, 21, 1, 1, 6), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: custH323TotalActiveCalls.setStatus('current')
custH323CallsCompletedSuccess = MibTableColumn((1, 3, 6, 1, 4, 1, 10950, 1, 1, 6, 21, 1, 1, 7), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: custH323CallsCompletedSuccess.setStatus('current')
custH323CallsFailed = MibTableColumn((1, 3, 6, 1, 4, 1, 10950, 1, 1, 6, 21, 1, 1, 8), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: custH323CallsFailed.setStatus('current')
custH323CallsAbandoned = MibTableColumn((1, 3, 6, 1, 4, 1, 10950, 1, 1, 6, 21, 1, 1, 9), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: custH323CallsAbandoned.setStatus('current')
custH323CallsDropped = MibTableColumn((1, 3, 6, 1, 4, 1, 10950, 1, 1, 6, 21, 1, 1, 10), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: custH323CallsDropped.setStatus('deprecated')
custH323CallsDegraded = MibTableColumn((1, 3, 6, 1, 4, 1, 10950, 1, 1, 6, 21, 1, 1, 11), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: custH323CallsDegraded.setStatus('current')
custH323CallMediaTimeouts = MibTableColumn((1, 3, 6, 1, 4, 1, 10950, 1, 1, 6, 21, 1, 1, 12), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: custH323CallMediaTimeouts.setStatus('current')
custH323CallInitTimeouts = MibTableColumn((1, 3, 6, 1, 4, 1, 10950, 1, 1, 6, 21, 1, 1, 13), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: custH323CallInitTimeouts.setStatus('current')
custH323TermTimeouts = MibTableColumn((1, 3, 6, 1, 4, 1, 10950, 1, 1, 6, 21, 1, 1, 14), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: custH323TermTimeouts.setStatus('current')
custH323CallsProcessed = MibTableColumn((1, 3, 6, 1, 4, 1, 10950, 1, 1, 6, 21, 1, 1, 15), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: custH323CallsProcessed.setStatus('current')
custH323PeakLocalCalls = MibTableColumn((1, 3, 6, 1, 4, 1, 10950, 1, 1, 6, 21, 1, 1, 16), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: custH323PeakLocalCalls.setStatus('current')
custH323AuthenticationChallenges = MibTableColumn((1, 3, 6, 1, 4, 1, 10950, 1, 1, 6, 21, 1, 1, 17), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: custH323AuthenticationChallenges.setStatus('current')
custH323RTPFWTraversalTimeouts = MibTableColumn((1, 3, 6, 1, 4, 1, 10950, 1, 1, 6, 21, 1, 1, 18), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: custH323RTPFWTraversalTimeouts.setStatus('current')
custH323SameSideActiveCalls = MibTableColumn((1, 3, 6, 1, 4, 1, 10950, 1, 1, 6, 21, 1, 1, 19), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: custH323SameSideActiveCalls.setStatus('current')
custH323NormalActiveCalls = MibTableColumn((1, 3, 6, 1, 4, 1, 10950, 1, 1, 6, 21, 1, 1, 20), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: custH323NormalActiveCalls.setStatus('current')
custH323PeakNormalActiveCalls = MibTableColumn((1, 3, 6, 1, 4, 1, 10950, 1, 1, 6, 21, 1, 1, 21), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: custH323PeakNormalActiveCalls.setStatus('current')
custVoIpStatsTable = MibTable((1, 3, 6, 1, 4, 1, 10950, 1, 1, 6, 22, 1), )
if mibBuilder.loadTexts: custVoIpStatsTable.setStatus('current')
custVoIpStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 10950, 1, 1, 6, 22, 1, 1), ).setIndexNames((0, "Netrake-MIB", "custVoIpId"))
if mibBuilder.loadTexts: custVoIpStatsEntry.setStatus('current')
custVoIpId = MibTableColumn((1, 3, 6, 1, 4, 1, 10950, 1, 1, 6, 22, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: custVoIpId.setStatus('current')
custVoIpCallsInitiating = MibTableColumn((1, 3, 6, 1, 4, 1, 10950, 1, 1, 6, 22, 1, 1, 2), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: custVoIpCallsInitiating.setStatus('current')
custVoIpLocalActiveCalls = MibTableColumn((1, 3, 6, 1, 4, 1, 10950, 1, 1, 6, 22, 1, 1, 3), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: custVoIpLocalActiveCalls.setStatus('current')
custVoIpTermCalls = MibTableColumn((1, 3, 6, 1, 4, 1, 10950, 1, 1, 6, 22, 1, 1, 4), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: custVoIpTermCalls.setStatus('current')
custVoIpPeakTotalActiveCalls = MibTableColumn((1, 3, 6, 1, 4, 1, 10950, 1, 1, 6, 22, 1, 1, 5), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: custVoIpPeakTotalActiveCalls.setStatus('current')
custVoIpTotalActiveCalls = MibTableColumn((1, 3, 6, 1, 4, 1, 10950, 1, 1, 6, 22, 1, 1, 6), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: custVoIpTotalActiveCalls.setStatus('current')
custVoIpCallsCompletedSuccess = MibTableColumn((1, 3, 6, 1, 4, 1, 10950, 1, 1, 6, 22, 1, 1, 7), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: custVoIpCallsCompletedSuccess.setStatus('current')
custVoIpCallsFailed = MibTableColumn((1, 3, 6, 1, 4, 1, 10950, 1, 1, 6, 22, 1, 1, 8), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: custVoIpCallsFailed.setStatus('current')
custVoIpCallsAbandoned = MibTableColumn((1, 3, 6, 1, 4, 1, 10950, 1, 1, 6, 22, 1, 1, 9), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: custVoIpCallsAbandoned.setStatus('current')
custVoIpCallsDropped = MibTableColumn((1, 3, 6, 1, 4, 1, 10950, 1, 1, 6, 22, 1, 1, 10), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: custVoIpCallsDropped.setStatus('deprecated')
custVoIpCallsDegraded = MibTableColumn((1, 3, 6, 1, 4, 1, 10950, 1, 1, 6, 22, 1, 1, 11), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: custVoIpCallsDegraded.setStatus('current')
custVoIpCallMediaTimeouts = MibTableColumn((1, 3, 6, 1, 4, 1, 10950, 1, 1, 6, 22, 1, 1, 12), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: custVoIpCallMediaTimeouts.setStatus('current')
custVoIpCallInitTimeouts = MibTableColumn((1, 3, 6, 1, 4, 1, 10950, 1, 1, 6, 22, 1, 1, 13), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: custVoIpCallInitTimeouts.setStatus('current')
custVoIpTermTimeouts = MibTableColumn((1, 3, 6, 1, 4, 1, 10950, 1, 1, 6, 22, 1, 1, 14), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: custVoIpTermTimeouts.setStatus('current')
custVoIpCallsProcessed = MibTableColumn((1, 3, 6, 1, 4, 1, 10950, 1, 1, 6, 22, 1, 1, 15), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: custVoIpCallsProcessed.setStatus('current')
custVoIpPeakLocalCalls = MibTableColumn((1, 3, 6, 1, 4, 1, 10950, 1, 1, 6, 22, 1, 1, 16), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: custVoIpPeakLocalCalls.setStatus('current')
custVoIpAuthenticationChallenges = MibTableColumn((1, 3, 6, 1, 4, 1, 10950, 1, 1, 6, 22, 1, 1, 17), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: custVoIpAuthenticationChallenges.setStatus('current')
custVoIpRTPFWTraversalTimeouts = MibTableColumn((1, 3, 6, 1, 4, 1, 10950, 1, 1, 6, 22, 1, 1, 18), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: custVoIpRTPFWTraversalTimeouts.setStatus('current')
custVoIpSameSideActiveCalls = MibTableColumn((1, 3, 6, 1, 4, 1, 10950, 1, 1, 6, 22, 1, 1, 19), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: custVoIpSameSideActiveCalls.setStatus('current')
custVoIpNormalActiveCalls = MibTableColumn((1, 3, 6, 1, 4, 1, 10950, 1, 1, 6, 22, 1, 1, 20), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: custVoIpNormalActiveCalls.setStatus('current')
custVoIpPeakNormalActiveCalls = MibTableColumn((1, 3, 6, 1, 4, 1, 10950, 1, 1, 6, 22, 1, 1, 21), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: custVoIpPeakNormalActiveCalls.setStatus('current')
mediaStatCurrentAudioSessions = MibScalar((1, 3, 6, 1, 4, 1, 10950, 1, 1, 6, 23, 1), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mediaStatCurrentAudioSessions.setStatus('current')
mediaStatPeakAudioSessions = MibScalar((1, 3, 6, 1, 4, 1, 10950, 1, 1, 6, 23, 2), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mediaStatPeakAudioSessions.setStatus('current')
mediaStatTotalAudioSessions = MibScalar((1, 3, 6, 1, 4, 1, 10950, 1, 1, 6, 23, 3), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mediaStatTotalAudioSessions.setStatus('current')
mediaStatCurrentVideoSessions = MibScalar((1, 3, 6, 1, 4, 1, 10950, 1, 1, 6, 23, 4), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mediaStatCurrentVideoSessions.setStatus('current')
mediaStatPeakVideoSessions = MibScalar((1, 3, 6, 1, 4, 1, 10950, 1, 1, 6, 23, 5), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mediaStatPeakVideoSessions.setStatus('current')
mediaStatTotalVideoSessions = MibScalar((1, 3, 6, 1, 4, 1, 10950, 1, 1, 6, 23, 6), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mediaStatTotalVideoSessions.setStatus('current')
mediaStatCurrentFaxSessions = MibScalar((1, 3, 6, 1, 4, 1, 10950, 1, 1, 6, 23, 7), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mediaStatCurrentFaxSessions.setStatus('current')
mediaStatPeakFaxSessions = MibScalar((1, 3, 6, 1, 4, 1, 10950, 1, 1, 6, 23, 8), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mediaStatPeakFaxSessions.setStatus('current')
mediaStatTotalFaxSessions = MibScalar((1, 3, 6, 1, 4, 1, 10950, 1, 1, 6, 23, 9), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mediaStatTotalFaxSessions.setStatus('current')
mediaStatTotalFailures = MibScalar((1, 3, 6, 1, 4, 1, 10950, 1, 1, 6, 23, 10), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mediaStatTotalFailures.setStatus('current')
h323RegStatActiveReg = MibScalar((1, 3, 6, 1, 4, 1, 10950, 1, 1, 6, 24, 1), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h323RegStatActiveReg.setStatus('current')
h323RegStatExpiredReg = MibScalar((1, 3, 6, 1, 4, 1, 10950, 1, 1, 6, 24, 2), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h323RegStatExpiredReg.setStatus('current')
h323RegStatUnauthorizedReg = MibScalar((1, 3, 6, 1, 4, 1, 10950, 1, 1, 6, 24, 3), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h323RegStatUnauthorizedReg.setStatus('current')
h323RegStatPeakActiveReg = MibScalar((1, 3, 6, 1, 4, 1, 10950, 1, 1, 6, 24, 4), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h323RegStatPeakActiveReg.setStatus('current')
h323RegStatUpdateComplete = MibScalar((1, 3, 6, 1, 4, 1, 10950, 1, 1, 6, 24, 5), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h323RegStatUpdateComplete.setStatus('current')
h323RegStatUpdateFailures = MibScalar((1, 3, 6, 1, 4, 1, 10950, 1, 1, 6, 24, 6), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h323RegStatUpdateFailures.setStatus('current')
h323RegStatAuthFailures = MibScalar((1, 3, 6, 1, 4, 1, 10950, 1, 1, 6, 24, 7), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h323RegStatAuthFailures.setStatus('current')
custH323RegStatsTable = MibTable((1, 3, 6, 1, 4, 1, 10950, 1, 1, 6, 25, 1), )
if mibBuilder.loadTexts: custH323RegStatsTable.setStatus('current')
custH323RegStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 10950, 1, 1, 6, 25, 1, 1), ).setIndexNames((0, "Netrake-MIB", "custH323RegStatId"))
if mibBuilder.loadTexts: custH323RegStatsEntry.setStatus('current')
custH323RegStatId = MibTableColumn((1, 3, 6, 1, 4, 1, 10950, 1, 1, 6, 25, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: custH323RegStatId.setStatus('current')
custH323RegStatActiveReg = MibTableColumn((1, 3, 6, 1, 4, 1, 10950, 1, 1, 6, 25, 1, 1, 2), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: custH323RegStatActiveReg.setStatus('current')
custH323RegStatExpiredReg = MibTableColumn((1, 3, 6, 1, 4, 1, 10950, 1, 1, 6, 25, 1, 1, 3), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: custH323RegStatExpiredReg.setStatus('current')
custH323RegStatUnauthorizedReg = MibTableColumn((1, 3, 6, 1, 4, 1, 10950, 1, 1, 6, 25, 1, 1, 4), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: custH323RegStatUnauthorizedReg.setStatus('current')
custH323RegStatPeakActiveReg = MibTableColumn((1, 3, 6, 1, 4, 1, 10950, 1, 1, 6, 25, 1, 1, 5), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: custH323RegStatPeakActiveReg.setStatus('current')
custH323RegStatUpdateComplete = MibTableColumn((1, 3, 6, 1, 4, 1, 10950, 1, 1, 6, 25, 1, 1, 6), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: custH323RegStatUpdateComplete.setStatus('current')
custH323RegStatUpdateFailures = MibTableColumn((1, 3, 6, 1, 4, 1, 10950, 1, 1, 6, 25, 1, 1, 7), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: custH323RegStatUpdateFailures.setStatus('current')
custH323RegStatAuthFailures = MibTableColumn((1, 3, 6, 1, 4, 1, 10950, 1, 1, 6, 25, 1, 1, 8), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: custH323RegStatAuthFailures.setStatus('current')
sipCommonStatsDiscontinuityTimer = MibScalar((1, 3, 6, 1, 4, 1, 10950, 1, 1, 6, 26, 1), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sipCommonStatsDiscontinuityTimer.setStatus('current')
sipCommonStatsScalars = MibIdentifier((1, 3, 6, 1, 4, 1, 10950, 1, 1, 6, 26, 2))
sipCommonStatsTotalMessageErrors = MibScalar((1, 3, 6, 1, 4, 1, 10950, 1, 1, 6, 26, 2, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sipCommonStatsTotalMessageErrors.setStatus('current')
sipCommonStatsTotalMessageRoutingFailures = MibScalar((1, 3, 6, 1, 4, 1, 10950, 1, 1, 6, 26, 2, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sipCommonStatsTotalMessageRoutingFailures.setStatus('current')
sipCommonStatsTotalMessageTransmitFailures = MibScalar((1, 3, 6, 1, 4, 1, 10950, 1, 1, 6, 26, 2, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sipCommonStatsTotalMessageTransmitFailures.setStatus('current')
sipCommonStatsTotalAuthenticationFailures = MibScalar((1, 3, 6, 1, 4, 1, 10950, 1, 1, 6, 26, 2, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sipCommonStatsTotalAuthenticationFailures.setStatus('current')
sipEvtDlgStatsDiscontinuityTimer = MibScalar((1, 3, 6, 1, 4, 1, 10950, 1, 1, 6, 27, 1), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sipEvtDlgStatsDiscontinuityTimer.setStatus('current')
sipEvtDlgStatsScalars = MibIdentifier((1, 3, 6, 1, 4, 1, 10950, 1, 1, 6, 27, 2))
sipEvtDlgStatsActiveDialogs = MibScalar((1, 3, 6, 1, 4, 1, 10950, 1, 1, 6, 27, 2, 1), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sipEvtDlgStatsActiveDialogs.setStatus('current')
sipEvtDlgStatsPeakActiveDialogs = MibScalar((1, 3, 6, 1, 4, 1, 10950, 1, 1, 6, 27, 2, 2), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sipEvtDlgStatsPeakActiveDialogs.setStatus('current')
sipEvtDlgStatsTerminatedDialogs = MibScalar((1, 3, 6, 1, 4, 1, 10950, 1, 1, 6, 27, 2, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sipEvtDlgStatsTerminatedDialogs.setStatus('current')
sipEvtDlgStatsExpiredDialogs = MibScalar((1, 3, 6, 1, 4, 1, 10950, 1, 1, 6, 27, 2, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sipEvtDlgStatsExpiredDialogs.setStatus('current')
sipEvtDlgStatsFailedDialogs = MibScalar((1, 3, 6, 1, 4, 1, 10950, 1, 1, 6, 27, 2, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sipEvtDlgStatsFailedDialogs.setStatus('current')
sipEvtDlgStatsUnauthorizedDialogs = MibScalar((1, 3, 6, 1, 4, 1, 10950, 1, 1, 6, 27, 2, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sipEvtDlgStatsUnauthorizedDialogs.setStatus('current')
sipEvtDlgStatsAuthenticationChallenges = MibScalar((1, 3, 6, 1, 4, 1, 10950, 1, 1, 6, 27, 2, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sipEvtDlgStatsAuthenticationChallenges.setStatus('current')
sipEvtDlgCustStatsTable = MibTable((1, 3, 6, 1, 4, 1, 10950, 1, 1, 6, 27, 3), )
if mibBuilder.loadTexts: sipEvtDlgCustStatsTable.setStatus('current')
sipEvtDlgCustStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 10950, 1, 1, 6, 27, 3, 1), ).setIndexNames((0, "Netrake-MIB", "sipEvtDlgCustStatsIndex"))
if mibBuilder.loadTexts: sipEvtDlgCustStatsEntry.setStatus('current')
sipEvtDlgCustStatsIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 10950, 1, 1, 6, 27, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sipEvtDlgCustStatsIndex.setStatus('current')
sipEvtDlgCustStatsActiveDialogs = MibTableColumn((1, 3, 6, 1, 4, 1, 10950, 1, 1, 6, 27, 3, 1, 2), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sipEvtDlgCustStatsActiveDialogs.setStatus('current')
sipEvtDlgCustStatsPeakActiveDialogs = MibTableColumn((1, 3, 6, 1, 4, 1, 10950, 1, 1, 6, 27, 3, 1, 3), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sipEvtDlgCustStatsPeakActiveDialogs.setStatus('current')
sipEvtDlgCustStatsTerminatedDialogs = MibTableColumn((1, 3, 6, 1, 4, 1, 10950, 1, 1, 6, 27, 3, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sipEvtDlgCustStatsTerminatedDialogs.setStatus('current')
sipEvtDlgCustStatsExpiredDialogs = MibTableColumn((1, 3, 6, 1, 4, 1, 10950, 1, 1, 6, 27, 3, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sipEvtDlgCustStatsExpiredDialogs.setStatus('current')
sipEvtDlgCustStatsFailedDialogs = MibTableColumn((1, 3, 6, 1, 4, 1, 10950, 1, 1, 6, 27, 3, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sipEvtDlgCustStatsFailedDialogs.setStatus('current')
sipEvtDlgCustStatsUnauthorizedDialogs = MibTableColumn((1, 3, 6, 1, 4, 1, 10950, 1, 1, 6, 27, 3, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sipEvtDlgCustStatsUnauthorizedDialogs.setStatus('current')
sipEvtDlgCustStatsAuthenticationChallenges = MibTableColumn((1, 3, 6, 1, 4, 1, 10950, 1, 1, 6, 27, 3, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sipEvtDlgCustStatsAuthenticationChallenges.setStatus('current')
diagType = MibScalar((1, 3, 6, 1, 4, 1, 10950, 1, 1, 7, 2, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("nCiteFullIntLoopback", 1), ("nCiteFullExtLoopback", 2), ("nCiteInterfaceIntLoopback", 3), ("nCiteInterfaceExtLoopback", 4), ("cardIntLoopback", 5), ("cardExtLoopback", 6), ("portIntLoopback", 7), ("portExtLoopback", 8)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: diagType.setStatus('deprecated')
diagDeviceSlotNum = MibScalar((1, 3, 6, 1, 4, 1, 10950, 1, 1, 7, 2, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 14))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: diagDeviceSlotNum.setStatus('deprecated')
diagDevPortNum = MibScalar((1, 3, 6, 1, 4, 1, 10950, 1, 1, 7, 2, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 48))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: diagDevPortNum.setStatus('deprecated')
diagStartCmd = MibScalar((1, 3, 6, 1, 4, 1, 10950, 1, 1, 7, 2, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("default", 0), ("runDiag", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: diagStartCmd.setStatus('deprecated')
nrObjectIDs = MibIdentifier((1, 3, 6, 1, 4, 1, 10950, 3))
nrSessionBorderController = MibIdentifier((1, 3, 6, 1, 4, 1, 10950, 3, 1))
nrSBCSE = MibIdentifier((1, 3, 6, 1, 4, 1, 10950, 3, 1, 1))
nrSBCwNcp = MibIdentifier((1, 3, 6, 1, 4, 1, 10950, 3, 1, 1, 1))
nrSBCwNte = MibIdentifier((1, 3, 6, 1, 4, 1, 10950, 3, 1, 1, 2))
nrSBCDE = MibIdentifier((1, 3, 6, 1, 4, 1, 10950, 3, 1, 2))
mibBuilder.exportSymbols("Netrake-MIB", activeAlarmIndex=activeAlarmIndex, staticRouteIngressVlanTag=staticRouteIngressVlanTag, nCiteRipInterfacesPortNum=nCiteRipInterfacesPortNum, postAlarm=postAlarm, h323AuthFailures=h323AuthFailures, custSipRTPFWTraversalTimeouts=custSipRTPFWTraversalTimeouts, nCiteNTACustomerId=nCiteNTACustomerId, sipH323CallMediaTimeouts=sipH323CallMediaTimeouts, sipStatAuthenticationChallenges=sipStatAuthenticationChallenges, redundantPort2NetMask=redundantPort2NetMask, custSipStatPeakActiveCalls=custSipStatPeakActiveCalls, sipStatNormalActiveCalls=sipStatNormalActiveCalls, nextImgDwnldTimeStamp=nextImgDwnldTimeStamp, redundantFailbackThreshChangeTrap=redundantFailbackThreshChangeTrap, chasPwrSupplyOperStatus=chasPwrSupplyOperStatus, sipH323NormalActiveCalls=sipH323NormalActiveCalls, newActiveImgTrapAckSource=newActiveImgTrapAckSource, sipH323MessagesReroutedToMate=sipH323MessagesReroutedToMate, diagResultsEntry=diagResultsEntry, custH323TotalActiveCalls=custH323TotalActiveCalls, nCiteStatsConfigReset=nCiteStatsConfigReset, custH323RegStatUpdateFailures=custH323RegStatUpdateFailures, regStatPeak=regStatPeak, lrdCallerReason=lrdCallerReason, edrQLRogueStatus=edrQLRogueStatus, h323PeakFaxSessions=h323PeakFaxSessions, custSipStatCallsInitiating=custSipStatCallsInitiating, ipPortRefreshTrap=ipPortRefreshTrap, sipStatCallsCompletedSuccess=sipStatCallsCompletedSuccess, h323RegStatUpdateComplete=h323RegStatUpdateComplete, authConfigLocalOverride=authConfigLocalOverride, chasBrdSlotNum=chasBrdSlotNum, custVoIpLocalActiveCalls=custVoIpLocalActiveCalls, licenseFileName=licenseFileName, serviceStatsSlotId=serviceStatsSlotId, nrSBCwNcp=nrSBCwNcp, octetsXmit256to511=octetsXmit256to511, arpVerifTimerChangeTrapAck=arpVerifTimerChangeTrapAck, sipStatPeakLocalCalls=sipStatPeakLocalCalls, redundantAutoFailbackFlagChangeTrapAckSource=redundantAutoFailbackFlagChangeTrapAckSource, nCiteOutSyncFlag=nCiteOutSyncFlag, custH323AuthenticationChallenges=custH323AuthenticationChallenges, nCiteRipPortSlotNum=nCiteRipPortSlotNum, chasSerNum=chasSerNum, custSipStatsEntry=custSipStatsEntry, custSipStatLocalActiveCalls=custSipStatLocalActiveCalls, custH323RegStatUnauthorizedReg=custH323RegStatUnauthorizedReg, arpTrapOper=arpTrapOper, gigEStats=gigEStats, ipPortAutoNegTable=ipPortAutoNegTable, licenseInstallDate=licenseInstallDate, commitImgName=commitImgName, custSipStatCallInitTimeouts=custSipStatCallInitTimeouts, redundantRedirectorFlag=redundantRedirectorFlag, chasBrdEntry=chasBrdEntry, octetsRcvd512to1023=octetsRcvd512to1023, activeAlarmSlotNum=activeAlarmSlotNum, sipH323CallsAbandoned=sipH323CallsAbandoned, internet=internet, regStatAuthFailures=regStatAuthFailures, newCommittedImgTrapAck=newCommittedImgTrapAck, regStatNumActive=regStatNumActive, custSipStatCallsProcessed=custSipStatCallsProcessed, histEvent=histEvent, licenseFeatureName=licenseFeatureName, custH323PeakLocalCalls=custH323PeakLocalCalls, custVoIpPeakTotalActiveCalls=custVoIpPeakTotalActiveCalls, erdQL2DestMediaAnchorIpPort=erdQL2DestMediaAnchorIpPort, h323TotalActiveCalls=h323TotalActiveCalls, custVoIpNormalActiveCalls=custVoIpNormalActiveCalls, edrQLPerformGarbageCollection=edrQLPerformGarbageCollection, diagCompleteTrapAck=diagCompleteTrapAck, mediaStatCurrentVideoSessions=mediaStatCurrentVideoSessions, sipH323TermCalls=sipH323TermCalls, activeImgDwnldTimeStamp=activeImgDwnldTimeStamp, chasFanDescription=chasFanDescription, diagRsltDevicePortNum=diagRsltDevicePortNum, ipPortConfigEntry=ipPortConfigEntry, sipStatPeakTotalActiveCalls=sipStatPeakTotalActiveCalls, sipH323TermTimeouts=sipH323TermTimeouts, globalCounters=globalCounters, voIpCallsDropped=voIpCallsDropped, h323RegStatUpdateFailures=h323RegStatUpdateFailures, policyCountersEntry=policyCountersEntry, commitImgBuildStartTimeStamp=commitImgBuildStartTimeStamp, newNextTrapAck=newNextTrapAck, chasBrdStateChangeTrapAckSource=chasBrdStateChangeTrapAckSource, sipH323RTPFWTraversalTimeouts=sipH323RTPFWTraversalTimeouts, custSipPeakTotalActive=custSipPeakTotalActive, sipEvtDlgStatsPeakActiveDialogs=sipEvtDlgStatsPeakActiveDialogs, lrdCurrentCallCount=lrdCurrentCallCount, chassis=chassis, h323PeakTotalActiveCalls=h323PeakTotalActiveCalls, voIpPeakNormalActiveCalls=voIpPeakNormalActiveCalls, redundantConfigChangeTrapAck=redundantConfigChangeTrapAck, chasFanOperStatus=chasFanOperStatus, sipStatCallInitTimeouts=sipStatCallInitTimeouts, mediaStatPeakAudioSessions=mediaStatPeakAudioSessions, systemTrapNoAck=systemTrapNoAck, regStatNumInitiating=regStatNumInitiating, custH323StatsTable=custH323StatsTable, arpRefreshTrapAckSource=arpRefreshTrapAckSource, authConfigRadiusServerPriority=authConfigRadiusServerPriority, octetsXmit512to1023=octetsXmit512to1023, lrdPeakCallCount=lrdPeakCallCount, staticRouteNetMask=staticRouteNetMask, rcvdFrames64Octets=rcvdFrames64Octets, edrQLFrom=edrQLFrom, staticRouteEgressVlan=staticRouteEgressVlan, sipH323AuthFailures=sipH323AuthFailures, h323CallsInitiating=h323CallsInitiating, mediaStatCurrentAudioSessions=mediaStatCurrentAudioSessions, sipEvtDlgCustStatsExpiredDialogs=sipEvtDlgCustStatsExpiredDialogs, policyStatsReset=policyStatsReset, diagDevPortNum=diagDevPortNum, activeAlarmTable=activeAlarmTable, ipPortRefreshTrapAckSource=ipPortRefreshTrapAckSource, chasPwr=chasPwr, diagRsltDesc=diagRsltDesc, mediaStatPeakFaxSessions=mediaStatPeakFaxSessions, custSipStatTermTimeouts=custSipStatTermTimeouts, redundantPort2IpAddr=redundantPort2IpAddr, sipStatTermTimeouts=sipStatTermTimeouts, h323CallInitTimeouts=h323CallInitTimeouts, custRegAuthenticationChallenges=custRegAuthenticationChallenges, redundantRedirectorFlagChangeTrapAck=redundantRedirectorFlagChangeTrapAck, mediaStatTotalFaxSessions=mediaStatTotalFaxSessions, chasBrdSerialNum=chasBrdSerialNum, diagStartedTrapAckSource=diagStartedTrapAckSource, h323TermTimeouts=h323TermTimeouts, policyIndex=policyIndex, custVoIpCallsCompletedSuccess=custVoIpCallsCompletedSuccess, resourceUsageEntry=resourceUsageEntry, activeAlarmAdditionalInfo=activeAlarmAdditionalInfo, ipPortPlaceHolder=ipPortPlaceHolder, numPacketsDiscardCPA=numPacketsDiscardCPA, ipPortAutoNegEntry=ipPortAutoNegEntry, nCiteSystem=nCiteSystem, voIpPeakSameSideActiveCalls=voIpPeakSameSideActiveCalls, nCiteRipPortConfigTable=nCiteRipPortConfigTable, chasFanTrapAckSource=chasFanTrapAckSource, custSipH323CallsDegraded=custSipH323CallsDegraded, custVoIpPeakLocalCalls=custVoIpPeakLocalCalls, chasBrdSlotLabel=chasBrdSlotLabel, linkUpTrapAck=linkUpTrapAck, newActiveImgTrap=newActiveImgTrap, nCiteArpConfig=nCiteArpConfig, custVoIpTermCalls=custVoIpTermCalls, staticRoutesEntry=staticRoutesEntry, nCiteNTAReset=nCiteNTAReset, custH323CallsDegraded=custH323CallsDegraded, newNextTrap=newNextTrap, voIpRedirectSuccess=voIpRedirectSuccess, edrPerformGarbageCollection=edrPerformGarbageCollection, custSipH323CallMediaTimeouts=custSipH323CallMediaTimeouts, arpOperTimerChangeTrapAck=arpOperTimerChangeTrapAck, sipH323CallsDropped=sipH323CallsDropped, products=products, chasFanTable=chasFanTable, custSipStatId=custSipStatId, commitImgDwnldTimeStamp=commitImgDwnldTimeStamp, voIpNormalActiveCalls=voIpNormalActiveCalls, h323NormalActiveCalls=h323NormalActiveCalls, sipH323Stats=sipH323Stats, voIpStats=voIpStats, sipStatPeakFaxSessions=sipStatPeakFaxSessions, chasBrdMaxPorts=chasBrdMaxPorts, multicastFramesRcvdOk=multicastFramesRcvdOk, arpRefreshNeeded=arpRefreshNeeded, diagCompleteTrapAckSource=diagCompleteTrapAckSource, voIpPeakLocalCalls=voIpPeakLocalCalls, diagStartedTrap=diagStartedTrap, authConfigRadiusServerIp=authConfigRadiusServerIp, redundantPort1IpAddr=redundantPort1IpAddr, activeAlarmPortNum=activeAlarmPortNum, redundNumRedundLinkFailures=redundNumRedundLinkFailures, linkDownTrapAckSource=linkDownTrapAckSource, custSipH323TermCalls=custSipH323TermCalls, sipEvtDlgCustStatsIndex=sipEvtDlgCustStatsIndex, licenseExpirationDate=licenseExpirationDate, nCiteSDRSentTrapAck=nCiteSDRSentTrapAck, custSipH323StatsEntry=custSipH323StatsEntry, sipStats=sipStats, redundantAutoFailbackFlag=redundantAutoFailbackFlag, sipEvtDlgStatsScalars=sipEvtDlgStatsScalars, totalPacketsXmit=totalPacketsXmit, sipH323TotalActiveCalls=sipH323TotalActiveCalls, systemRestoreFlag=systemRestoreFlag, h323LocalActiveCalls=h323LocalActiveCalls, chasBrdType=chasBrdType, h323RegStatActiveReg=h323RegStatActiveReg, custNtsStatsTable=custNtsStatsTable, custVoIpCallsDegraded=custVoIpCallsDegraded, custRegStatDropped=custRegStatDropped, nCiteNTATable=nCiteNTATable, edrQLTimestamp=edrQLTimestamp, policyStats=policyStats, custH323CallsProcessed=custH323CallsProcessed, h323RTPFWTraversalTimeouts=h323RTPFWTraversalTimeouts, custH323RTPFWTraversalTimeouts=custH323RTPFWTraversalTimeouts, sipStatPeakSameSideActiveCalls=sipStatPeakSameSideActiveCalls, activeAlarmSubType=activeAlarmSubType, nCiteSessionDetailRecord=nCiteSessionDetailRecord, staticRouteRowStatus=staticRouteRowStatus, staticRoutesRefreshNeeded=staticRoutesRefreshNeeded, lrdTo=lrdTo, voIpCallsProcessed=voIpCallsProcessed, chasPwrSupplyTable=chasPwrSupplyTable, vlanStatsSlotNum=vlanStatsSlotNum, staticRoutesRefreshTrap=staticRoutesRefreshTrap, nextImgBuildStartTimeStamp=nextImgBuildStartTimeStamp, voIpAuthenticationChallenges=voIpAuthenticationChallenges, activeAlarmAcknowledgeSource=activeAlarmAcknowledgeSource, sipStatRedirectSuccess=sipStatRedirectSuccess, staticRouteChangeTrapAck=staticRouteChangeTrapAck, ipPortRowStatus=ipPortRowStatus, ntsStatNumCust=ntsStatNumCust, nextImgName=nextImgName, chasBrdDescription=chasBrdDescription, bestEffortDiscardPackets=bestEffortDiscardPackets, newActiveImgTrapAck=newActiveImgTrapAck, sipStatCallsFailed=sipStatCallsFailed, buildStartedTrapAckSource=buildStartedTrapAckSource, ipPortAutoNegChangeTrapAck=ipPortAutoNegChangeTrapAck, postEvent=postEvent, ipPortConfigChangeTrapAckSource=ipPortConfigChangeTrapAckSource, mediaStatPeakVideoSessions=mediaStatPeakVideoSessions, custSipH323PeakTotalActiveCalls=custSipH323PeakTotalActiveCalls, custVoIpSameSideActiveCalls=custVoIpSameSideActiveCalls, ipPortConfigChangeTrapAck=ipPortConfigChangeTrapAck, redundantFailbackThreshChangeTrapAckSource=redundantFailbackThreshChangeTrapAckSource, edrCurrentCallCount=edrCurrentCallCount, nrObjectIDs=nrObjectIDs, custH323RegStats=custH323RegStats, sipEvtDlgCustStatsUnauthorizedDialogs=sipEvtDlgCustStatsUnauthorizedDialogs, custSipH323SameSideActiveCalls=custSipH323SameSideActiveCalls, multicastFramesXmitOk=multicastFramesXmitOk, lrdCalleeSourceIPPort2=lrdCalleeSourceIPPort2, diagRsltAcknowledge=diagRsltAcknowledge, netrake=netrake, arpVerifTimerChangeTrapAckSource=arpVerifTimerChangeTrapAckSource, licenseInfo=licenseInfo, totalPacketsXmitCPA=totalPacketsXmitCPA, sipH323PeakNormalActiveCalls=sipH323PeakNormalActiveCalls, ipPortAutoNegChangeTrap=ipPortAutoNegChangeTrap, vlanStatsPortNum=vlanStatsPortNum, PYSNMP_MODULE_ID=netrake, activeAlarmId=activeAlarmId, dod=dod, ipPortConfigPortNum=ipPortConfigPortNum, sipStatTermCalls=sipStatTermCalls, chasBrdStateChangeTrapAck=chasBrdStateChangeTrapAck, diagResultsTable=diagResultsTable, licenseEntry=licenseEntry)
mibBuilder.exportSymbols("Netrake-MIB", custH323CallMediaTimeouts=custH323CallMediaTimeouts, octetsRcvd1519toMax=octetsRcvd1519toMax, chasPwrSupplyIndex=chasPwrSupplyIndex, chasFanTrapAck=chasFanTrapAck, custVoIpStatsEntry=custVoIpStatsEntry, sipEvtDlgStatsFailedDialogs=sipEvtDlgStatsFailedDialogs, diagStartCmd=diagStartCmd, linkDownTrapAck=linkDownTrapAck, chasPOSTMode=chasPOSTMode, nrtTotalPackets=nrtTotalPackets, nextImgState=nextImgState, custH323RegStatPeakActiveReg=custH323RegStatPeakActiveReg, nrSessionBorderController=nrSessionBorderController, custSipPeakLocalCalls=custSipPeakLocalCalls, diagRsltID=diagRsltID, totalPacketsDiscard=totalPacketsDiscard, buildCompleteTrapAckSource=buildCompleteTrapAckSource, broadcastFramesXmitOk=broadcastFramesXmitOk, lrdCalleeDestIPPort=lrdCalleeDestIPPort, diagRsltStartTimeStamp=diagRsltStartTimeStamp, edrQLCallId=edrQLCallId, custVoIpTermTimeouts=custVoIpTermTimeouts, nCite=nCite, nrSBCDE=nrSBCDE, edrGarbageCollectionState=edrGarbageCollectionState, regStatUpdateFailed=regStatUpdateFailed, activeAlarmAcknowledge=activeAlarmAcknowledge, sipStatTotalFaxSessions=sipStatTotalFaxSessions, custVoIpAuthenticationChallenges=custVoIpAuthenticationChallenges, erdQL2DestMediaIpPort=erdQL2DestMediaIpPort, custVoIpCallsFailed=custVoIpCallsFailed, ipPortVrdTag=ipPortVrdTag, custRegStatInitSipTimeouts=custRegStatInitSipTimeouts, enterprises=enterprises, vlanStatsReset=vlanStatsReset, policyProvisioning=policyProvisioning, arpMacAddr=arpMacAddr, edrLastDetection=edrLastDetection, totalPacketsXmitCPB=totalPacketsXmitCPB, nrSBCwNte=nrSBCwNte, vlanTotalPacketsRcvd=vlanTotalPacketsRcvd, redundPairedModeTimeTicks=redundPairedModeTimeTicks, sipCommonStatsTotalMessageRoutingFailures=sipCommonStatsTotalMessageRoutingFailures, sipStatMessageRoutingFailures=sipStatMessageRoutingFailures, private=private, sipStatAuthFailures=sipStatAuthFailures, licenseFeatureDisplayName=licenseFeatureDisplayName, regStatTerminating=regStatTerminating, custH323NormalActiveCalls=custH323NormalActiveCalls, lrdCallerState=lrdCallerState, chasLedStatus=chasLedStatus, sipH323LocalActiveCalls=sipH323LocalActiveCalls, h323MsgErrs=h323MsgErrs, sipStatPeakNonLocalCalls=sipStatPeakNonLocalCalls, voIpMessagesReroutedToMate=voIpMessagesReroutedToMate, activeAlarmEntry=activeAlarmEntry, systemOperState=systemOperState, memUsed=memUsed, activeAlarmSysUpTime=activeAlarmSysUpTime, voIpCallsDegraded=voIpCallsDegraded, sipStatPeakActiveCalls=sipStatPeakActiveCalls, h323CurrentFaxSessions=h323CurrentFaxSessions, edrQLDestMediaAnchorIpPort=edrQLDestMediaAnchorIpPort, activeAlarmDisplayString=activeAlarmDisplayString, coldStartTrap=coldStartTrap, sipCommonStatsTotalMessageTransmitFailures=sipCommonStatsTotalMessageTransmitFailures, systemAdminState=systemAdminState, arpOperTimerRetryCount=arpOperTimerRetryCount, buildCompleteTrap=buildCompleteTrap, sipH323MsgErrs=sipH323MsgErrs, sipEvtDlgStatsAuthenticationChallenges=sipEvtDlgStatsAuthenticationChallenges, ipPortConfigAdminState=ipPortConfigAdminState, gigEStatsPortIndex=gigEStatsPortIndex, h323AuthenticationChallenges=h323AuthenticationChallenges, licenseFileChangeTrapAck=licenseFileChangeTrapAck, gigEStatsSlotNum=gigEStatsSlotNum, nCiteSDRSentTrap=nCiteSDRSentTrap, sipStatSameSideActiveCalls=sipStatSameSideActiveCalls, custSipH323StatsTable=custSipH323StatsTable, sipEvtDlgCustStatsTerminatedDialogs=sipEvtDlgCustStatsTerminatedDialogs, regStatAuthenticationChallenges=regStatAuthenticationChallenges, serviceStatsEntry=serviceStatsEntry, erdQLUniqueId=erdQLUniqueId, sipH323PeakLocalCalls=sipH323PeakLocalCalls, voIpTotalActiveCalls=voIpTotalActiveCalls, lrdCalleeReason=lrdCalleeReason, h323Stats=h323Stats, sipH323CallsCompletedSuccess=sipH323CallsCompletedSuccess, custH323CallsAbandoned=custH323CallsAbandoned, custVoIpCallsInitiating=custVoIpCallsInitiating, staticRouteChangeTrapAckSource=staticRouteChangeTrapAckSource, custH323CallsCompletedSuccess=custH323CallsCompletedSuccess, redundancyStats=redundancyStats, newCommittedImgTrap=newCommittedImgTrap, serviceStatsTable=serviceStatsTable, vlanStatsVlanLabel=vlanStatsVlanLabel, voIpTermTimeouts=voIpTermTimeouts, chasPwrTrapAck=chasPwrTrapAck, h323RegStatExpiredReg=h323RegStatExpiredReg, diagCompleteTrap=diagCompleteTrap, nrSBCSE=nrSBCSE, ipPortConfigNetMask=ipPortConfigNetMask, chasType=chasType, chasBrdStatusLeds=chasBrdStatusLeds, custNtsAuthorizationFailed=custNtsAuthorizationFailed, h323CallsProcessed=h323CallsProcessed, staticRouteRefreshTrapAck=staticRouteRefreshTrapAck, custSipH323CallsInitiating=custSipH323CallsInitiating, custSipH323PeakNormalActiveCalls=custSipH323PeakNormalActiveCalls, octetsXmitCount=octetsXmitCount, custSipH323RTPFWTraversalTimeouts=custSipH323RTPFWTraversalTimeouts, staticRouteType=staticRouteType, custH323SameSideActiveCalls=custH323SameSideActiveCalls, authConfigRadiusRetryInterval=authConfigRadiusRetryInterval, nCiteAuthConfig=nCiteAuthConfig, redundantConfigChangeTrapAckSource=redundantConfigChangeTrapAckSource, nCIteSDRLastSent=nCIteSDRLastSent, custSipNormalActiveCalls=custSipNormalActiveCalls, custH323StatsEntry=custH323StatsEntry, custSipStatCallsAbandoned=custSipStatCallsAbandoned, arpUpdateMacTrapAck=arpUpdateMacTrapAck, custH323TermTimeouts=custH323TermTimeouts, custVoIpCallMediaTimeouts=custVoIpCallMediaTimeouts, lrdCallerSourceIPPort2=lrdCallerSourceIPPort2, edrGarbageCollectionComplete=edrGarbageCollectionComplete, custRegStatNumInitiated=custRegStatNumInitiated, redundantAdminState=redundantAdminState, policyTotalPackets=policyTotalPackets, edrQLTo=edrQLTo, h323CallsCompletedSuccess=h323CallsCompletedSuccess, edrNextTrafficCheck=edrNextTrafficCheck, edrGarbageCollectionCompleteTrapAckSource=edrGarbageCollectionCompleteTrapAckSource, ipPortRefreshTrapAck=ipPortRefreshTrapAck, voIpPeakFaxSessions=voIpPeakFaxSessions, sipStatMsgErrs=sipStatMsgErrs, ipPortConfig=ipPortConfig, nCiteNTA=nCiteNTA, sipH323CallsFailed=sipH323CallsFailed, custSipH323AuthenticationChallenges=custSipH323AuthenticationChallenges, custH323RegStatId=custH323RegStatId, systemTrapAckEntry=systemTrapAckEntry, trapAckEnable=trapAckEnable, custRegStatTerminating=custRegStatTerminating, custRegStatPeak=custRegStatPeak, buildStartedTrapAck=buildStartedTrapAck, voIpRTPFWTraversalTimeouts=voIpRTPFWTraversalTimeouts, voIpCallsFailed=voIpCallsFailed, sipH323CallsProcessed=sipH323CallsProcessed, switchNotifications=switchNotifications, h323CallsFailed=h323CallsFailed, lrdCalleeSourceIPPort1=lrdCalleeSourceIPPort1, custH323CallsFailed=custH323CallsFailed, licenseIndex=licenseIndex, custRegStatUnauthorizedReg=custRegStatUnauthorizedReg, custH323PeakNormalActiveCalls=custH323PeakNormalActiveCalls, xmitFrames64Octets=xmitFrames64Octets, sipEvtDlgCustStatsAuthenticationChallenges=sipEvtDlgCustStatsAuthenticationChallenges, nCiteRedundant=nCiteRedundant, activeImgBuildStartTimeStamp=activeImgBuildStartTimeStamp, sipH323CallInitTimeouts=sipH323CallInitTimeouts, sipStatCallsProcessed=sipStatCallsProcessed, custH323TermCalls=custH323TermCalls, custVoIpRTPFWTraversalTimeouts=custVoIpRTPFWTraversalTimeouts, ipPortAutoNegPortNum=ipPortAutoNegPortNum, nCiteNTAStatus=nCiteNTAStatus, h323MessageRoutingFailures=h323MessageRoutingFailures, custSipH323LocalActiveCalls=custSipH323LocalActiveCalls, chasBrdPwr=chasBrdPwr, nCiteStaticRoutes=nCiteStaticRoutes, lrdEntry=lrdEntry, broadcastFramesRcvdOk=broadcastFramesRcvdOk, nCiteRipInterfacesEntry=nCiteRipInterfacesEntry, cpuUsage=cpuUsage, custSipH323Stats=custSipH323Stats, chasBrdState=chasBrdState, unicastFramesXmitOk=unicastFramesXmitOk, underSizeFramesRcvd=underSizeFramesRcvd, custSipStats=custSipStats, sipStatMessagesReroutedToMate=sipStatMessagesReroutedToMate, custRegStatsTable=custRegStatsTable, jabbersRcvd=jabbersRcvd, custVoIpPeakNormalActiveCalls=custVoIpPeakNormalActiveCalls, sipEvtDlgStatsDiscontinuityTimer=sipEvtDlgStatsDiscontinuityTimer, systemOperStateChangeTrap=systemOperStateChangeTrap, authConfigRadiusServerPort=authConfigRadiusServerPort, commitImgActivatedTimeStamp=commitImgActivatedTimeStamp, ipPortAutoNegSlotNum=ipPortAutoNegSlotNum, sipEvtDlgStatsExpiredDialogs=sipEvtDlgStatsExpiredDialogs, activeAlarmCategory=activeAlarmCategory, framesRcvdCount=framesRcvdCount, custVoIpTotalActiveCalls=custVoIpTotalActiveCalls, newNextTrapAckSource=newNextTrapAckSource, octetsXmit128to255=octetsXmit128to255, memTotal=memTotal, custVoIpCallsDropped=custVoIpCallsDropped, gigEStatsTable=gigEStatsTable, custRegStatId=custRegStatId, activeAlarmDevType=activeAlarmDevType, chasFanTrap=chasFanTrap, sipStatNonLocalActiveCalls=sipStatNonLocalActiveCalls, serviceStats=serviceStats, sipStatPeakNormalActiveCalls=sipStatPeakNormalActiveCalls, framesRcvdOkCount=framesRcvdOkCount, staticRouteNextHop=staticRouteNextHop, voIpRedirectFailures=voIpRedirectFailures, mediaStatTotalFailures=mediaStatTotalFailures, h323RegStatAuthFailures=h323RegStatAuthFailures, sipStatCallsAbandoned=sipStatCallsAbandoned, activeAlarmSeverity=activeAlarmSeverity, voIpPeakTotalActiveCalls=voIpPeakTotalActiveCalls, voIpCallsCompletedSuccess=voIpCallsCompletedSuccess, numPacketsDiscardCPB=numPacketsDiscardCPB, octetsXmit1024to1518=octetsXmit1024to1518, ntsStatCustConnected=ntsStatCustConnected, lrdTable=lrdTable, custSipStatCallsDropped=custSipStatCallsDropped, sipH323RedirectSuccess=sipH323RedirectSuccess, regStatInitSipTimeouts=regStatInitSipTimeouts, licenseTable=licenseTable, activeAlarmType=activeAlarmType, custNtsStatsEntry=custNtsStatsEntry, chasPwrSupplyDesc=chasPwrSupplyDesc, sipEvtDlgStatsTerminatedDialogs=sipEvtDlgStatsTerminatedDialogs, authConfigRadiusRetryCount=authConfigRadiusRetryCount, newCommittedImgTrapAckSource=newCommittedImgTrapAckSource, ipPortConfigTable=ipPortConfigTable, custRegStats=custRegStats, voIpAuthFailures=voIpAuthFailures, redundantRedirectorFlagChangeTrap=redundantRedirectorFlagChangeTrap, ipPortAutoNegFlag=ipPortAutoNegFlag, lrdCallerSourceIPPort1=lrdCallerSourceIPPort1, lrdFrom=lrdFrom, vlanStatsTable=vlanStatsTable, arpUpdateMacTrapAckSource=arpUpdateMacTrapAckSource, sipH323CurrentFaxSessions=sipH323CurrentFaxSessions, custSipH323PeakLocalCalls=custSipH323PeakLocalCalls, runDiagGroup=runDiagGroup, octetsXmit65to127=octetsXmit65to127, custH323RegStatsTable=custH323RegStatsTable, nCiteRipInterfacesIPAddr=nCiteRipInterfacesIPAddr, voIpTermCalls=voIpTermCalls, arpOperTimerChangeTrap=arpOperTimerChangeTrap, ipPortVlanTag=ipPortVlanTag, edrQuarantineListTable=edrQuarantineListTable, arpNextHopIP=arpNextHopIP, redundantFailbackThreshChangeTrapAck=redundantFailbackThreshChangeTrapAck, custSipSameSideActiveCalls=custSipSameSideActiveCalls, octetsXmit1519toMax=octetsXmit1519toMax, custSipH323CallsAbandoned=custSipH323CallsAbandoned, staticRouteVrdTag=staticRouteVrdTag, diagRsltIndex=diagRsltIndex, h323RegStatUnauthorizedReg=h323RegStatUnauthorizedReg, nCiteRipPortNum=nCiteRipPortNum, serviceStatsPortIndex=serviceStatsPortIndex)
mibBuilder.exportSymbols("Netrake-MIB", custSipH323CallsCompletedSuccess=custSipH323CallsCompletedSuccess, redundantAutoFailbackFlagChangeTrapAck=redundantAutoFailbackFlagChangeTrapAck, buildStartedTrap=buildStartedTrap, vlanTotalPacketsXmit=vlanTotalPacketsXmit, custSipH323TotalActiveCalls=custSipH323TotalActiveCalls, custVoIpCallInitTimeouts=custVoIpCallInitTimeouts, activeAlarmOccurances=activeAlarmOccurances, processorIndex=processorIndex, arpRefreshTrapAck=arpRefreshTrapAck, voIpTotalFaxSessions=voIpTotalFaxSessions, custVoIpStatsTable=custVoIpStatsTable, voIpMsgErrs=voIpMsgErrs, regStatUpdateSuccess=regStatUpdateSuccess, nCiteSDREnable=nCiteSDREnable, erdQL2SrcMediaIpPort=erdQL2SrcMediaIpPort, staticRouteDest=staticRouteDest, regStatUnauthReg=regStatUnauthReg, activeImgPidSideBFilename=activeImgPidSideBFilename, h323TotalFaxSessions=h323TotalFaxSessions, custH323Id=custH323Id, systemSoftwareVersion=systemSoftwareVersion, regStatDropped=regStatDropped, arpVerifTimerRetryCount=arpVerifTimerRetryCount, sipStatTotalActiveCalls=sipStatTotalActiveCalls, custRegStatsEntry=custRegStatsEntry, sipH323TotalFaxSessions=sipH323TotalFaxSessions, custH323RegStatsEntry=custH323RegStatsEntry, edrQLRequestURI=edrQLRequestURI, sipStatRedirectFailures=sipStatRedirectFailures, diagRsltDeviceSlotNum=diagRsltDeviceSlotNum, org=org, h323RegStatPeakActiveReg=h323RegStatPeakActiveReg, h323CallsDegraded=h323CallsDegraded, custH323Stats=custH323Stats, policyTotalPacketsB=policyTotalPacketsB, custSipH323CallsDropped=custSipH323CallsDropped, sipEvtDlgStatsUnauthorizedDialogs=sipEvtDlgStatsUnauthorizedDialogs, octetsRcvd1024to1518=octetsRcvd1024to1518, custVoIpStats=custVoIpStats, redundantConfigChangeTrap=redundantConfigChangeTrap, nCiteRogue=nCiteRogue, lrdCalleeState=lrdCalleeState, sipEvtDlgStats=sipEvtDlgStats, ipPortConfigChangeTrap=ipPortConfigChangeTrap, edrLastGarbageCollection=edrLastGarbageCollection, custVoIpCallsAbandoned=custVoIpCallsAbandoned, diagRsltType=diagRsltType, chasBrdOccSlots=chasBrdOccSlots, lrdTotalCallsRogue=lrdTotalCallsRogue, sipEvtDlgStatsActiveDialogs=sipEvtDlgStatsActiveDialogs, diagType=diagType, acitveAlarmReportingSource=acitveAlarmReportingSource, buildCompleteTrapAck=buildCompleteTrapAck, sipH323CallsInitiating=sipH323CallsInitiating, eventID=eventID, commitImgTimeStamp=commitImgTimeStamp, custSipStatCallMediaTimeouts=custSipStatCallMediaTimeouts, voIpCallInitTimeouts=voIpCallInitTimeouts, custSipAuthenticationChallenges=custSipAuthenticationChallenges, mediaStats=mediaStats, custNtsStats=custNtsStats, nCiteRipPortPrimary=nCiteRipPortPrimary, ipPortConfigIpAddr=ipPortConfigIpAddr, custSipH323CallInitTimeouts=custSipH323CallInitTimeouts, edrGarbageCollectionCompleteTrapAck=edrGarbageCollectionCompleteTrapAck, diagStartedTrapAck=diagStartedTrapAck, custH323LocalActiveCalls=custH323LocalActiveCalls, sipEvtDlgCustStatsFailedDialogs=sipEvtDlgCustStatsFailedDialogs, voIpCallsInitiating=voIpCallsInitiating, authConfigRadiusServersTable=authConfigRadiusServersTable, h323CallMediaTimeouts=h323CallMediaTimeouts, activeImgBuildCompleteTimeStamp=activeImgBuildCompleteTimeStamp, custH323CallInitTimeouts=custH323CallInitTimeouts, chasBrdReset=chasBrdReset, lostFramesMacErrCount=lostFramesMacErrCount, sipStatLocalActiveCalls=sipStatLocalActiveCalls, custSipStatNonLocalActiveCalls=custSipStatNonLocalActiveCalls, staticRouteMetric1=staticRouteMetric1, activeAlarmServiceAffecting=activeAlarmServiceAffecting, edrQuarantineListEntry=edrQuarantineListEntry, bestEffortTotalPackets=bestEffortTotalPackets, redundRecoveryModeTimeTicks=redundRecoveryModeTimeTicks, commitImgBuildCompleteTimeStamp=commitImgBuildCompleteTimeStamp, lrdCalleeMediaAnchorIPPort=lrdCalleeMediaAnchorIPPort, custSipStatTotalActiveCalls=custSipStatTotalActiveCalls, sipH323PeakFaxSessions=sipH323PeakFaxSessions, voIpLocalActiveCalls=voIpLocalActiveCalls, voIpCallMediaTimeouts=voIpCallMediaTimeouts, diagDeviceSlotNum=diagDeviceSlotNum, staticRouteOperState=staticRouteOperState, activeAlarmEventFlag=activeAlarmEventFlag, licenseValue=licenseValue, octetsRcvdCount=octetsRcvdCount, policyCountersTable=policyCountersTable, policyTotalPacketsA=policyTotalPacketsA, coldStartTrapAckSource=coldStartTrapAckSource, nrtDiscardPackets=nrtDiscardPackets, nextImgBuildCompleteTimeStamp=nextImgBuildCompleteTimeStamp, ipPortConfigSlotNum=ipPortConfigSlotNum, sipEvtDlgCustStatsEntry=sipEvtDlgCustStatsEntry, octetsRcvd256to511=octetsRcvd256to511, activeImgName=activeImgName, systemTrapAckTable=systemTrapAckTable, sipStatRTPFWTraversalTimeouts=sipStatRTPFWTraversalTimeouts, regStatTermSipTimeouts=regStatTermSipTimeouts, custH323CallsDropped=custH323CallsDropped, mediaStatTotalVideoSessions=mediaStatTotalVideoSessions, lrdCallerDestIPPort=lrdCallerDestIPPort, regStatExpired=regStatExpired, regStatFailed=regStatFailed, h323SameSideActiveCalls=h323SameSideActiveCalls, redundantPort1NetMask=redundantPort1NetMask, sipCommonStats=sipCommonStats, chasFanEntry=chasFanEntry, sipStatCurrentFaxSessions=sipStatCurrentFaxSessions, h323PeakLocalCalls=h323PeakLocalCalls, redundantAutoFailbackChangeTrap=redundantAutoFailbackChangeTrap, edrQLSrcMediaIpPort=edrQLSrcMediaIpPort, chasBrdIfIndex=chasBrdIfIndex, custSipPeakNormalActiveCalls=custSipPeakNormalActiveCalls, lrdUniqueId=lrdUniqueId, chasPwrSupplyEntry=chasPwrSupplyEntry, custSipH323TermTimeouts=custSipH323TermTimeouts, custRegStatUpdateFailed=custRegStatUpdateFailed, sipEvtDlgCustStatsActiveDialogs=sipEvtDlgCustStatsActiveDialogs, activeImgPidSideAFilename=activeImgPidSideAFilename, custH323RegStatAuthFailures=custH323RegStatAuthFailures, h323PeakSameSideActiveCalls=h323PeakSameSideActiveCalls, chasPwrTrap=chasPwrTrap, custH323RegStatExpiredReg=custH323RegStatExpiredReg, sipCommonStatsScalars=sipCommonStatsScalars, sipEvtDlgCustStatsPeakActiveDialogs=sipEvtDlgCustStatsPeakActiveDialogs, chasBrd=chasBrd, redundantFailbackThresh=redundantFailbackThresh, sipH323PeakSameSideActiveCalls=sipH323PeakSameSideActiveCalls, nCiteNTAEntry=nCiteNTAEntry, arpOperTimerChangeTrapAckSource=arpOperTimerChangeTrapAckSource, nCiteStats=nCiteStats, edrTotalCallsRogue=edrTotalCallsRogue, custSipH323CallsProcessed=custSipH323CallsProcessed, sipStatCallsInitiating=sipStatCallsInitiating, custH323RegStatActiveReg=custH323RegStatActiveReg, edrQLDestMediaIpPort=edrQLDestMediaIpPort, licenseFileChangeTrapAckSource=licenseFileChangeTrapAckSource, chasGen=chasGen, lrdCalleeTimeDetect=lrdCalleeTimeDetect, nCiteRipInterfacesTable=nCiteRipInterfacesTable, nCiteSDRCollectionCycle=nCiteSDRCollectionCycle, lrdLastDetection=lrdLastDetection, custH323CallsInitiating=custH323CallsInitiating, custSipStatCallsFailed=custSipStatCallsFailed, custRegStatUpdateSuccess=custRegStatUpdateSuccess, sipCommonStatsTotalAuthenticationFailures=sipCommonStatsTotalAuthenticationFailures, activeAlarmTimeStamp=activeAlarmTimeStamp, redundantMateName=redundantMateName, staticRouteIngressProtocol=staticRouteIngressProtocol, custSipStatTermCalls=custSipStatTermCalls, edrPeakCallCount=edrPeakCallCount, sipEvtDlgCustStatsTable=sipEvtDlgCustStatsTable, ntsStats=ntsStats, ipPortConfigOperState=ipPortConfigOperState, custRegStatNumActive=custRegStatNumActive, sipH323MessageRoutingFailures=sipH323MessageRoutingFailures, activeImgActivatedTimeStamp=activeImgActivatedTimeStamp, redundActiveMateRegist=redundActiveMateRegist, custSipStatCallsDegraded=custSipStatCallsDegraded, nCiteRipInterafacesSlotNum=nCiteRipInterafacesSlotNum, voIpCurrentFaxSessions=voIpCurrentFaxSessions, coldStartTrapEnable=coldStartTrapEnable, diagnostics=diagnostics, systemOperStateChangeTrapAck=systemOperStateChangeTrapAck, activeAlarmID=activeAlarmID, diagRsltCompleteTimeStamp=diagRsltCompleteTimeStamp, staticRouteAdminState=staticRouteAdminState, coldStartTrapAck=coldStartTrapAck, gigEStatsEntry=gigEStatsEntry, realTimeTotalPackets=realTimeTotalPackets, frameSeqErrCount=frameSeqErrCount, vlanStatsEntry=vlanStatsEntry, ntsStatAuthFailures=ntsStatAuthFailures, arpRefreshTrap=arpRefreshTrap, sipCommonStatsTotalMessageErrors=sipCommonStatsTotalMessageErrors, edrGarbageCollectionStatus=edrGarbageCollectionStatus, resourceUsageTable=resourceUsageTable, systemOperStateChangeTrapAckSource=systemOperStateChangeTrapAckSource, custVoIpId=custVoIpId, lrdCallerTimeDetect=lrdCallerTimeDetect, sipStatCallsDropped=sipStatCallsDropped, custRegStatFailed=custRegStatFailed, nCiteRIPConfig=nCiteRIPConfig, redundActiveMateCalls=redundActiveMateCalls, lrdCallerMediaAnchorIPPort=lrdCallerMediaAnchorIPPort, alarm=alarm, lrdRequestURI=lrdRequestURI, custVoIpCallsProcessed=custVoIpCallsProcessed, staticRouteRefreshTrapAckSource=staticRouteRefreshTrapAckSource, nCiteRipState=nCiteRipState, sipStatCallMediaTimeouts=sipStatCallMediaTimeouts, licenseFileChangeTrap=licenseFileChangeTrap, linkUpTrapAckSource=linkUpTrapAckSource, nCiteSDRSentTrapAckSource=nCiteSDRSentTrapAckSource, nCiteStatsReset=nCiteStatsReset, arpOperTimerFreq=arpOperTimerFreq, vlanStats=vlanStats, realTimeDiscardPackets=realTimeDiscardPackets, custSipH323Id=custSipH323Id, sipH323CallsDegraded=sipH323CallsDegraded, mediaStatTotalAudioSessions=mediaStatTotalAudioSessions, custH323PeakTotalActiveCalls=custH323PeakTotalActiveCalls, lrdCallId=lrdCallId, systemSnmpMgrIpAddress=systemSnmpMgrIpAddress, sipH323AuthenticationChallenges=sipH323AuthenticationChallenges, custSipH323CallsFailed=custSipH323CallsFailed, staticRoutesTable=staticRoutesTable, authConfigRadiusServersEntry=authConfigRadiusServersEntry, registrationStats=registrationStats, arpUpdateMacTrap=arpUpdateMacTrap, chasFan=chasFan, sipStatCallsDegraded=sipStatCallsDegraded, eventAcknowledge=eventAcknowledge, unicastFramesRcvdOk=unicastFramesRcvdOk, mediaStatCurrentFaxSessions=mediaStatCurrentFaxSessions, chasFanIndex=chasFanIndex, ipPortAutoNegChangeTrapAckSource=ipPortAutoNegChangeTrapAckSource, redundantRedirectorFlagChangeTrapAckSource=redundantRedirectorFlagChangeTrapAckSource, octetRcvd128to255=octetRcvd128to255, sipH323SameSideActiveCalls=sipH323SameSideActiveCalls, linkStatusChanges=linkStatusChanges, custSipPeakNonLocalCalls=custSipPeakNonLocalCalls, sipH323RedirectFailures=sipH323RedirectFailures, chasPwrTrapAckSource=chasPwrTrapAckSource, custSipStatsTable=custSipStatsTable, h323TermCalls=h323TermCalls, h323PeakNormalActiveCalls=h323PeakNormalActiveCalls, h323RegStats=h323RegStats, ipPortRefreshOpStates=ipPortRefreshOpStates, voIpCallsAbandoned=voIpCallsAbandoned, rogueStats=rogueStats, nCiteRipPortConfigEntry=nCiteRipPortConfigEntry, voIpMessageRoutingFailures=voIpMessageRoutingFailures, arpVerifTimerChangeTrap=arpVerifTimerChangeTrap, sipH323PeakTotalActiveCalls=sipH323PeakTotalActiveCalls, custNtsStatId=custNtsStatId, h323CallsDropped=h323CallsDropped, custSipStatCallsCompletedSuccess=custSipStatCallsCompletedSuccess, sipCommonStatsDiscontinuityTimer=sipCommonStatsDiscontinuityTimer, chasBrdStateChangeTrap=chasBrdStateChangeTrap, octetsRcvdOkCount=octetsRcvdOkCount, custH323RegStatUpdateComplete=custH323RegStatUpdateComplete, custRegStatTermSipTimeouts=custRegStatTermSipTimeouts, staticRouteChange=staticRouteChange, octetsRcvd65to127=octetsRcvd65to127, h323CallsAbandoned=h323CallsAbandoned, voIpSameSideActiveCalls=voIpSameSideActiveCalls)
mibBuilder.exportSymbols("Netrake-MIB", custSipH323NormalActiveCalls=custSipH323NormalActiveCalls, custRegStatExpired=custRegStatExpired, chasBrdTable=chasBrdTable)
