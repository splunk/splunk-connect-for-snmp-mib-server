#
# PySNMP MIB module BASEBRDD-MIB-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/BASEBRDD-MIB-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 17:18:03 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, Integer, OctetString = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "Integer", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsUnion, ConstraintsIntersection, ValueRangeConstraint, SingleValueConstraint, ValueSizeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsUnion", "ConstraintsIntersection", "ValueRangeConstraint", "SingleValueConstraint", "ValueSizeConstraint")
DmiDate, dmiCompId, dmiEventStateKey, dmiEventSystem, dmiEventSubSystem, DmiInteger64, dmiEventAssociatedGroup, dmiEventDateTime, dmiEventSeverity = mibBuilder.importSymbols("DMTF-DMI-MIB", "DmiDate", "dmiCompId", "dmiEventStateKey", "dmiEventSystem", "dmiEventSubSystem", "DmiInteger64", "dmiEventAssociatedGroup", "dmiEventDateTime", "dmiEventSeverity")
InternationalDisplayString, = mibBuilder.importSymbols("HOST-RESOURCES-MIB", "InternationalDisplayString")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
Gauge32, Unsigned32, NotificationType, Counter32, ObjectIdentity, IpAddress, Bits, Integer32, Counter64, MibIdentifier, MibScalar, MibTable, MibTableRow, MibTableColumn, NotificationType, TimeTicks, ModuleIdentity, iso, enterprises = mibBuilder.importSymbols("SNMPv2-SMI", "Gauge32", "Unsigned32", "NotificationType", "Counter32", "ObjectIdentity", "IpAddress", "Bits", "Integer32", "Counter64", "MibIdentifier", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "NotificationType", "TimeTicks", "ModuleIdentity", "iso", "enterprises")
DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention")
class DmiCounter(Counter32):
    pass

class DmiCounter64(Counter64):
    pass

class DmiGauge(Gauge32):
    pass

class DmiInteger(Integer32):
    pass

class DmiOctetstring(OctetString):
    pass

class DmiDisplaystring(DisplayString):
    pass

class DmiCompId(Integer32):
    pass

class DmiGroupId(Integer32):
    pass

dmtf = MibIdentifier((1, 3, 6, 1, 4, 1, 412))
dmtfStdMifs = MibIdentifier((1, 3, 6, 1, 4, 1, 412, 2))
dmtfDynOids = MibIdentifier((1, 3, 6, 1, 4, 1, 412, 3))
dmtfServiceLayerMIF = MibIdentifier((1, 3, 6, 1, 4, 1, 412, 2, 1))
dMTFComponentIDTable = MibTable((1, 3, 6, 1, 4, 1, 412, 2, 1, 1), )
if mibBuilder.loadTexts: dMTFComponentIDTable.setStatus('mandatory')
dMTFComponentIDEntry = MibTableRow((1, 3, 6, 1, 4, 1, 412, 2, 1, 1, 1), ).setIndexNames((0, "BASEBRDD-MIB-MIB", "DmiCompId"), (0, "BASEBRDD-MIB-MIB", "DmiGroupId"))
if mibBuilder.loadTexts: dMTFComponentIDEntry.setStatus('mandatory')
manufacturerAtt1 = MibTableColumn((1, 3, 6, 1, 4, 1, 412, 2, 1, 1, 1, 1), DmiDisplaystring()).setMaxAccess("readonly")
if mibBuilder.loadTexts: manufacturerAtt1.setStatus('mandatory')
productAtt2 = MibTableColumn((1, 3, 6, 1, 4, 1, 412, 2, 1, 1, 1, 2), DmiDisplaystring()).setMaxAccess("readonly")
if mibBuilder.loadTexts: productAtt2.setStatus('mandatory')
versionAtt3 = MibTableColumn((1, 3, 6, 1, 4, 1, 412, 2, 1, 1, 1, 3), DmiDisplaystring()).setMaxAccess("readonly")
if mibBuilder.loadTexts: versionAtt3.setStatus('mandatory')
serialNumberAtt4 = MibTableColumn((1, 3, 6, 1, 4, 1, 412, 2, 1, 1, 1, 4), DmiDisplaystring()).setMaxAccess("readonly")
if mibBuilder.loadTexts: serialNumberAtt4.setStatus('mandatory')
installationAtt5 = MibTableColumn((1, 3, 6, 1, 4, 1, 412, 2, 1, 1, 1, 5), DmiDate()).setMaxAccess("readonly")
if mibBuilder.loadTexts: installationAtt5.setStatus('mandatory')
verifyAtt6 = MibTableColumn((1, 3, 6, 1, 4, 1, 412, 2, 1, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("anErrorOccurredCheckStatusCode", 0), ("thisComponentDoesNotExist", 1), ("verificationIsNotSupported", 2), ("reserved", 3), ("thisComponentExistsButTheFunctionalityIsUntested", 4), ("thisComponentExistsButTheFunctionalityIsUnknown", 5), ("thisComponentExistsAndIsNotFunctioningCorrectly", 6), ("thisComponentExistsAndIsFunctioningCorrectly", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: verifyAtt6.setStatus('mandatory')
dell = MibIdentifier((1, 3, 6, 1, 4, 1, 674))
server2 = MibIdentifier((1, 3, 6, 1, 4, 1, 674, 10891))
dellTemperatureProbeTable = MibTable((1, 3, 6, 1, 4, 1, 674, 10891, 300), )
if mibBuilder.loadTexts: dellTemperatureProbeTable.setStatus('mandatory')
dellTemperatureProbeEntry = MibTableRow((1, 3, 6, 1, 4, 1, 674, 10891, 300, 1), ).setIndexNames((0, "BASEBRDD-MIB-MIB", "DmiCompId"), (0, "BASEBRDD-MIB-MIB", "DmiGroupId"), (0, "BASEBRDD-MIB-MIB", "tempParentIndexAtt1"), (0, "BASEBRDD-MIB-MIB", "tempIndexAtt2"))
if mibBuilder.loadTexts: dellTemperatureProbeEntry.setStatus('mandatory')
dellTemperatureProbeState = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10891, 300, 1, 0), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("active", 1), ("notInService", 2), ("notReady", 3), ("createAndGo", 4), ("createAndWait", 5), ("destroy", 6)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dellTemperatureProbeState.setStatus('mandatory')
tempParentIndexAtt1 = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10891, 300, 1, 1), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tempParentIndexAtt1.setStatus('mandatory')
tempIndexAtt2 = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10891, 300, 1, 2), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tempIndexAtt2.setStatus('mandatory')
tempTypeAtt3 = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10891, 300, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("other", 1), ("unknown", 2), ("tMC", 3), ("tVM", 4), ("eSM", 5), ("backplane", 6), ("harrierBackplane", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tempTypeAtt3.setStatus('mandatory')
tempStatusAtt4 = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10891, 300, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("other", 1), ("unknown", 2), ("oK", 3), ("nonCritical", 4), ("critical", 5), ("nonRecoverable", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tempStatusAtt4.setStatus('mandatory')
tempReadingAtt5 = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10891, 300, 1, 5), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tempReadingAtt5.setStatus('mandatory')
tempMinWarnAtt6 = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10891, 300, 1, 6), DmiDisplaystring()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tempMinWarnAtt6.setStatus('mandatory')
tempMaxWarnAtt7 = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10891, 300, 1, 7), DmiDisplaystring()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tempMaxWarnAtt7.setStatus('mandatory')
tempMinFailAtt8 = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10891, 300, 1, 8), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tempMinFailAtt8.setStatus('mandatory')
tempMaxFailAtt9 = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10891, 300, 1, 9), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tempMaxFailAtt9.setStatus('mandatory')
tempLocationAtt10 = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10891, 300, 1, 10), DmiDisplaystring()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tempLocationAtt10.setStatus('mandatory')
dellFanSensorTable = MibTable((1, 3, 6, 1, 4, 1, 674, 10891, 301), )
if mibBuilder.loadTexts: dellFanSensorTable.setStatus('mandatory')
dellFanSensorEntry = MibTableRow((1, 3, 6, 1, 4, 1, 674, 10891, 301, 1), ).setIndexNames((0, "BASEBRDD-MIB-MIB", "DmiCompId"), (0, "BASEBRDD-MIB-MIB", "DmiGroupId"), (0, "BASEBRDD-MIB-MIB", "fansParentIndexAtt1"), (0, "BASEBRDD-MIB-MIB", "fansIndexAtt2"))
if mibBuilder.loadTexts: dellFanSensorEntry.setStatus('mandatory')
dellFanSensorState = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10891, 301, 1, 0), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("active", 1), ("notInService", 2), ("notReady", 3), ("createAndGo", 4), ("createAndWait", 5), ("destroy", 6)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dellFanSensorState.setStatus('mandatory')
fansParentIndexAtt1 = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10891, 301, 1, 1), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fansParentIndexAtt1.setStatus('mandatory')
fansIndexAtt2 = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10891, 301, 1, 2), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fansIndexAtt2.setStatus('mandatory')
fansTypeAtt3 = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10891, 301, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("other", 1), ("unknown", 2), ("boolean", 3), ("rPM", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fansTypeAtt3.setStatus('mandatory')
fansStatusAtt4 = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10891, 301, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("other", 1), ("unknown", 2), ("oK", 3), ("nonCritical", 4), ("critical", 5), ("nonRecoverable", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fansStatusAtt4.setStatus('mandatory')
fansReadingAtt5 = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10891, 301, 1, 5), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fansReadingAtt5.setStatus('mandatory')
fansWarningMinAtt6 = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10891, 301, 1, 6), DmiDisplaystring()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fansWarningMinAtt6.setStatus('mandatory')
fansMaxWarnAtt7 = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10891, 301, 1, 7), DmiDisplaystring()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fansMaxWarnAtt7.setStatus('mandatory')
fansMinFailAtt8 = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10891, 301, 1, 8), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fansMinFailAtt8.setStatus('mandatory')
fansMaxFailAtt9 = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10891, 301, 1, 9), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fansMaxFailAtt9.setStatus('mandatory')
fansLocationAtt10 = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10891, 301, 1, 10), DmiDisplaystring()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fansLocationAtt10.setStatus('mandatory')
dellVoltageProbeTable = MibTable((1, 3, 6, 1, 4, 1, 674, 10891, 302), )
if mibBuilder.loadTexts: dellVoltageProbeTable.setStatus('mandatory')
dellVoltageProbeEntry = MibTableRow((1, 3, 6, 1, 4, 1, 674, 10891, 302, 1), ).setIndexNames((0, "BASEBRDD-MIB-MIB", "DmiCompId"), (0, "BASEBRDD-MIB-MIB", "DmiGroupId"), (0, "BASEBRDD-MIB-MIB", "voltParentIndexAtt1"), (0, "BASEBRDD-MIB-MIB", "voltIndexAtt2"))
if mibBuilder.loadTexts: dellVoltageProbeEntry.setStatus('mandatory')
dellVoltageProbeState = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10891, 302, 1, 0), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("active", 1), ("notInService", 2), ("notReady", 3), ("createAndGo", 4), ("createAndWait", 5), ("destroy", 6)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dellVoltageProbeState.setStatus('mandatory')
voltParentIndexAtt1 = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10891, 302, 1, 1), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: voltParentIndexAtt1.setStatus('mandatory')
voltIndexAtt2 = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10891, 302, 1, 2), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: voltIndexAtt2.setStatus('mandatory')
voltTypeAtt3 = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10891, 302, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10))).clone(namedValues=NamedValues(("other", 1), ("unknown", 2), ("v33", 3), ("v33-1", 4), ("v5", 5), ("v5-1", 6), ("v12", 7), ("v12-1", 8), ("v15", 9), ("core", 10)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: voltTypeAtt3.setStatus('mandatory')
voltStatusAtt4 = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10891, 302, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("other", 1), ("unknown", 2), ("oK", 3), ("nonCritical", 4), ("critical", 5), ("nonRecoverable", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: voltStatusAtt4.setStatus('mandatory')
voltReadingAtt5 = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10891, 302, 1, 5), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: voltReadingAtt5.setStatus('mandatory')
voltMinWarnAtt6 = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10891, 302, 1, 6), DmiDisplaystring()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: voltMinWarnAtt6.setStatus('mandatory')
voltMaxWarnAtt7 = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10891, 302, 1, 7), DmiDisplaystring()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: voltMaxWarnAtt7.setStatus('mandatory')
voltMinFailAtt8 = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10891, 302, 1, 8), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: voltMinFailAtt8.setStatus('mandatory')
voltMaxFailAtt9 = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10891, 302, 1, 9), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: voltMaxFailAtt9.setStatus('mandatory')
voltLocationAtt10 = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10891, 302, 1, 10), DmiDisplaystring()).setMaxAccess("readonly")
if mibBuilder.loadTexts: voltLocationAtt10.setStatus('mandatory')
dellCurrentProbeTable = MibTable((1, 3, 6, 1, 4, 1, 674, 10891, 303), )
if mibBuilder.loadTexts: dellCurrentProbeTable.setStatus('mandatory')
dellCurrentProbeEntry = MibTableRow((1, 3, 6, 1, 4, 1, 674, 10891, 303, 1), ).setIndexNames((0, "BASEBRDD-MIB-MIB", "DmiCompId"), (0, "BASEBRDD-MIB-MIB", "DmiGroupId"), (0, "BASEBRDD-MIB-MIB", "ampParentIndexAtt1"), (0, "BASEBRDD-MIB-MIB", "ampIndexAtt2"))
if mibBuilder.loadTexts: dellCurrentProbeEntry.setStatus('mandatory')
dellCurrentProbeState = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10891, 303, 1, 0), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("active", 1), ("notInService", 2), ("notReady", 3), ("createAndGo", 4), ("createAndWait", 5), ("destroy", 6)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dellCurrentProbeState.setStatus('mandatory')
ampParentIndexAtt1 = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10891, 303, 1, 1), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ampParentIndexAtt1.setStatus('mandatory')
ampIndexAtt2 = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10891, 303, 1, 2), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ampIndexAtt2.setStatus('mandatory')
ampTypeAtt3 = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10891, 303, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("other", 1), ("unknown", 2), ("v33", 3), ("v33", 4), ("v5", 5), ("v5", 6), ("v12", 7), ("v12", 8)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ampTypeAtt3.setStatus('mandatory')
ampStatusAtt4 = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10891, 303, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("other", 1), ("unknown", 2), ("oK", 3), ("nonCritical", 4), ("critical", 5), ("nonRecoverable", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ampStatusAtt4.setStatus('mandatory')
ampReadingAtt5 = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10891, 303, 1, 5), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ampReadingAtt5.setStatus('mandatory')
ampMinWarnAtt6 = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10891, 303, 1, 6), DmiDisplaystring()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ampMinWarnAtt6.setStatus('mandatory')
ampMaxWarnAtt7 = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10891, 303, 1, 7), DmiDisplaystring()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ampMaxWarnAtt7.setStatus('mandatory')
ampMinFailAtt8 = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10891, 303, 1, 8), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ampMinFailAtt8.setStatus('mandatory')
ampMaxFailAtt9 = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10891, 303, 1, 9), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ampMaxFailAtt9.setStatus('mandatory')
ampLocationAtt10 = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10891, 303, 1, 10), DmiDisplaystring()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ampLocationAtt10.setStatus('mandatory')
dellRedundantPowerSupplyTable = MibTable((1, 3, 6, 1, 4, 1, 674, 10891, 304), )
if mibBuilder.loadTexts: dellRedundantPowerSupplyTable.setStatus('mandatory')
dellRedundantPowerSupplyEntry = MibTableRow((1, 3, 6, 1, 4, 1, 674, 10891, 304, 1), ).setIndexNames((0, "BASEBRDD-MIB-MIB", "DmiCompId"), (0, "BASEBRDD-MIB-MIB", "DmiGroupId"), (0, "BASEBRDD-MIB-MIB", "pwrSupplyParentIndexAtt1"), (0, "BASEBRDD-MIB-MIB", "pwrSupplyIndexAtt2"))
if mibBuilder.loadTexts: dellRedundantPowerSupplyEntry.setStatus('mandatory')
dellRedundantPowerSupplyState = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10891, 304, 1, 0), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("active", 1), ("notInService", 2), ("notReady", 3), ("createAndGo", 4), ("createAndWait", 5), ("destroy", 6)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dellRedundantPowerSupplyState.setStatus('mandatory')
pwrSupplyParentIndexAtt1 = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10891, 304, 1, 1), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pwrSupplyParentIndexAtt1.setStatus('mandatory')
pwrSupplyIndexAtt2 = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10891, 304, 1, 2), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pwrSupplyIndexAtt2.setStatus('mandatory')
pwrSupplyTypeAtt3 = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10891, 304, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("other", 1), ("unknown", 2), ("pSPB", 3), ("x230W", 4), ("x500W", 5), ("x700W", 6), ("x320W", 7), ("x275W", 8)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pwrSupplyTypeAtt3.setStatus('mandatory')
pwrSupplyStatusAtt4 = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10891, 304, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("other", 1), ("unknown", 2), ("oK", 3), ("nonCritical", 4), ("critical", 5), ("nonRecoverable", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pwrSupplyStatusAtt4.setStatus('mandatory')
pwrSupplyOnlineAtt5 = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10891, 304, 1, 5), DmiDisplaystring()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pwrSupplyOnlineAtt5.setStatus('mandatory')
pwrLocationAtt6 = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10891, 304, 1, 6), DmiDisplaystring()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pwrLocationAtt6.setStatus('mandatory')
dellGlobalPowerUnitTable = MibTable((1, 3, 6, 1, 4, 1, 674, 10891, 305), )
if mibBuilder.loadTexts: dellGlobalPowerUnitTable.setStatus('mandatory')
dellGlobalPowerUnitEntry = MibTableRow((1, 3, 6, 1, 4, 1, 674, 10891, 305, 1), ).setIndexNames((0, "BASEBRDD-MIB-MIB", "DmiCompId"), (0, "BASEBRDD-MIB-MIB", "DmiGroupId"), (0, "BASEBRDD-MIB-MIB", "pwrUnitIndexAtt11"))
if mibBuilder.loadTexts: dellGlobalPowerUnitEntry.setStatus('mandatory')
dellGlobalPowerUnitState = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10891, 305, 1, 0), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("active", 1), ("notInService", 2), ("notReady", 3), ("createAndGo", 4), ("createAndWait", 5), ("destroy", 6)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dellGlobalPowerUnitState.setStatus('mandatory')
pwrUnitStatusAtt1 = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10891, 305, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("other", 1), ("unknown", 2), ("notApplicableUnitNotRedundant", 3), ("offline", 4), ("fullyRedundant", 5), ("degradedRedundancy", 6), ("redundancyLost", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pwrUnitStatusAtt1.setStatus('mandatory')
pwrUnitGlobalLevelAtt2 = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10891, 305, 1, 2), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pwrUnitGlobalLevelAtt2.setStatus('mandatory')
pwrUnitGlobalMaxWarnAtt3 = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10891, 305, 1, 3), DmiDisplaystring()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pwrUnitGlobalMaxWarnAtt3.setStatus('mandatory')
pwrUnitLevel33vAtt4 = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10891, 305, 1, 4), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pwrUnitLevel33vAtt4.setStatus('mandatory')
pwrUnitMaxWarn33vAtt5 = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10891, 305, 1, 5), DmiDisplaystring()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pwrUnitMaxWarn33vAtt5.setStatus('mandatory')
pwrUnitLevel5vAtt6 = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10891, 305, 1, 6), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pwrUnitLevel5vAtt6.setStatus('mandatory')
pwrUnitMaxWarn5vAtt7 = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10891, 305, 1, 7), DmiDisplaystring()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pwrUnitMaxWarn5vAtt7.setStatus('mandatory')
pwrUnitLevel12vAtt8 = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10891, 305, 1, 8), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pwrUnitLevel12vAtt8.setStatus('mandatory')
pwrUnitMaxWarn12vAtt9 = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10891, 305, 1, 9), DmiDisplaystring()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pwrUnitMaxWarn12vAtt9.setStatus('mandatory')
pwrUnitUidAtt10 = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10891, 305, 1, 10), DmiDisplaystring()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pwrUnitUidAtt10.setStatus('mandatory')
pwrUnitIndexAtt11 = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10891, 305, 1, 11), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pwrUnitIndexAtt11.setStatus('mandatory')
dellSystemChassisExtensionTable = MibTable((1, 3, 6, 1, 4, 1, 674, 10891, 306), )
if mibBuilder.loadTexts: dellSystemChassisExtensionTable.setStatus('mandatory')
dellSystemChassisExtensionEntry = MibTableRow((1, 3, 6, 1, 4, 1, 674, 10891, 306, 1), ).setIndexNames((0, "BASEBRDD-MIB-MIB", "DmiCompId"), (0, "BASEBRDD-MIB-MIB", "DmiGroupId"), (0, "BASEBRDD-MIB-MIB", "chassIndexAtt1"))
if mibBuilder.loadTexts: dellSystemChassisExtensionEntry.setStatus('mandatory')
dellSystemChassisExtensionState = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10891, 306, 1, 0), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("active", 1), ("notInService", 2), ("notReady", 3), ("createAndGo", 4), ("createAndWait", 5), ("destroy", 6)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dellSystemChassisExtensionState.setStatus('mandatory')
chassIndexAtt1 = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10891, 306, 1, 1), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: chassIndexAtt1.setStatus('mandatory')
chassGlobStatusAtt2 = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10891, 306, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("other", 1), ("unknown", 2), ("oK", 3), ("nonCritical", 4), ("critical", 5), ("nonRecoverable", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: chassGlobStatusAtt2.setStatus('mandatory')
chassTempStatusAtt3 = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10891, 306, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("other", 1), ("unknown", 2), ("oK", 3), ("nonCritical", 4), ("critical", 5), ("nonRecoverable", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: chassTempStatusAtt3.setStatus('mandatory')
chassTempProbesAtt4 = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10891, 306, 1, 4), DmiOctetstring()).setMaxAccess("readonly")
if mibBuilder.loadTexts: chassTempProbesAtt4.setStatus('mandatory')
chassFansStatusAtt5 = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10891, 306, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("other", 1), ("unknown", 2), ("oK", 3), ("nonCritical", 4), ("critical", 5), ("nonRecoverable", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: chassFansStatusAtt5.setStatus('mandatory')
chassFansProbesAtt6 = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10891, 306, 1, 6), DmiOctetstring()).setMaxAccess("readonly")
if mibBuilder.loadTexts: chassFansProbesAtt6.setStatus('mandatory')
chassVoltStatusAtt7 = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10891, 306, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("other", 1), ("unknown", 2), ("oK", 3), ("nonCritical", 4), ("critical", 5), ("nonRecoverable", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: chassVoltStatusAtt7.setStatus('mandatory')
chassVoltProbesAtt8 = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10891, 306, 1, 8), DmiOctetstring()).setMaxAccess("readonly")
if mibBuilder.loadTexts: chassVoltProbesAtt8.setStatus('mandatory')
chassAmpStatusAtt9 = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10891, 306, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("other", 1), ("unknown", 2), ("oK", 3), ("nonCritical", 4), ("critical", 5), ("nonRecoverable", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: chassAmpStatusAtt9.setStatus('mandatory')
chassAmpProbesAtt10 = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10891, 306, 1, 10), DmiOctetstring()).setMaxAccess("readonly")
if mibBuilder.loadTexts: chassAmpProbesAtt10.setStatus('mandatory')
chassPsStatusAtt11 = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10891, 306, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("other", 1), ("unknown", 2), ("oK", 3), ("nonCritical", 4), ("critical", 5), ("nonRecoverable", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: chassPsStatusAtt11.setStatus('mandatory')
chassPwrSuppliesAtt12 = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10891, 306, 1, 12), DmiOctetstring()).setMaxAccess("readonly")
if mibBuilder.loadTexts: chassPwrSuppliesAtt12.setStatus('mandatory')
chassServiceTagAtt13 = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10891, 306, 1, 13), DmiDisplaystring()).setMaxAccess("readonly")
if mibBuilder.loadTexts: chassServiceTagAtt13.setStatus('mandatory')
chassUidAtt14 = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10891, 306, 1, 14), DmiDisplaystring()).setMaxAccess("readonly")
if mibBuilder.loadTexts: chassUidAtt14.setStatus('mandatory')
chassBackPlaneUidAtt15 = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10891, 306, 1, 15), DmiDisplaystring()).setMaxAccess("readonly")
if mibBuilder.loadTexts: chassBackPlaneUidAtt15.setStatus('mandatory')
chassIdentifyAtt16 = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10891, 306, 1, 16), DmiDisplaystring()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: chassIdentifyAtt16.setStatus('mandatory')
chassFanControlAtt17 = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10891, 306, 1, 17), DmiDisplaystring()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: chassFanControlAtt17.setStatus('mandatory')
chassLEDConfigAtt18 = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10891, 306, 1, 18), DmiDisplaystring()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: chassLEDConfigAtt18.setStatus('mandatory')
chassFaultClearAtt19 = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10891, 306, 1, 19), DmiDisplaystring()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: chassFaultClearAtt19.setStatus('mandatory')
chassThermalShutdownAtt20 = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10891, 306, 1, 20), DmiDisplaystring()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: chassThermalShutdownAtt20.setStatus('mandatory')
chassMemStatusAtt21 = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10891, 306, 1, 21), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("other", 1), ("unknown", 2), ("oK", 3), ("nonCritical", 4), ("critical", 5), ("nonRecoverable", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: chassMemStatusAtt21.setStatus('mandatory')
chassMemDevicesAtt22 = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10891, 306, 1, 22), DmiOctetstring()).setMaxAccess("readonly")
if mibBuilder.loadTexts: chassMemDevicesAtt22.setStatus('mandatory')
dmtfSystemsMIF = MibIdentifier((1, 3, 6, 1, 4, 1, 412, 2, 4))
dMTFPhysicalContainerGlobalTableTable = MibTable((1, 3, 6, 1, 4, 1, 412, 2, 4, 63), )
if mibBuilder.loadTexts: dMTFPhysicalContainerGlobalTableTable.setStatus('mandatory')
dMTFPhysicalContainerGlobalTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 412, 2, 4, 63, 1), ).setIndexNames((0, "BASEBRDD-MIB-MIB", "DmiCompId"), (0, "BASEBRDD-MIB-MIB", "DmiGroupId"), (0, "BASEBRDD-MIB-MIB", "containerIndexAtt9"))
if mibBuilder.loadTexts: dMTFPhysicalContainerGlobalTableEntry.setStatus('mandatory')
dMTFPhysicalContainerGlobalTableState = MibTableColumn((1, 3, 6, 1, 4, 1, 412, 2, 4, 63, 1, 0), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("active", 1), ("notInService", 2), ("notReady", 3), ("createAndGo", 4), ("createAndWait", 5), ("destroy", 6)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dMTFPhysicalContainerGlobalTableState.setStatus('mandatory')
containerOrChassisTypeAtt1 = MibTableColumn((1, 3, 6, 1, 4, 1, 412, 2, 4, 63, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24))).clone(namedValues=NamedValues(("other", 1), ("unknown", 2), ("desktop", 3), ("lowProfileDesktop", 4), ("pizzaBox", 5), ("miniTower", 6), ("tower", 7), ("portable", 8), ("lapTop", 9), ("notebook", 10), ("handHeld", 11), ("dockingStation", 12), ("allInOne", 13), ("subNotebook", 14), ("spaceSaving", 15), ("lunchBox", 16), ("mainSystemChassis", 17), ("expansionChassis", 18), ("subChassis", 19), ("busExpansionChassis", 20), ("peripheralChassis", 21), ("rAIDChassis", 22), ("rackMountChassis", 23), ("sealedCasePC", 24)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: containerOrChassisTypeAtt1.setStatus('mandatory')
assetTagAtt2 = MibTableColumn((1, 3, 6, 1, 4, 1, 412, 2, 4, 63, 1, 2), DmiDisplaystring()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: assetTagAtt2.setStatus('mandatory')
chassisLockPresentAtt3 = MibTableColumn((1, 3, 6, 1, 4, 1, 412, 2, 4, 63, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("false", 0), ("true", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: chassisLockPresentAtt3.setStatus('mandatory')
bootupStateAtt4 = MibTableColumn((1, 3, 6, 1, 4, 1, 412, 2, 4, 63, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("other", 1), ("unknown", 2), ("oK", 3), ("warning", 4), ("critical", 5), ("nonRecoverable-1", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: bootupStateAtt4.setStatus('mandatory')
powerStateAtt5 = MibTableColumn((1, 3, 6, 1, 4, 1, 412, 2, 4, 63, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("other", 1), ("unknown", 2), ("oK", 3), ("warning", 4), ("critical", 5), ("nonRecoverable", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: powerStateAtt5.setStatus('mandatory')
thermalStateAtt6 = MibTableColumn((1, 3, 6, 1, 4, 1, 412, 2, 4, 63, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("other", 1), ("unknown", 2), ("oK", 3), ("warning", 4), ("critical", 5), ("nonRecoverable", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: thermalStateAtt6.setStatus('mandatory')
fRUGroupIndexAtt7 = MibTableColumn((1, 3, 6, 1, 4, 1, 412, 2, 4, 63, 1, 7), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fRUGroupIndexAtt7.setStatus('mandatory')
operationalGroupIndexAtt8 = MibTableColumn((1, 3, 6, 1, 4, 1, 412, 2, 4, 63, 1, 8), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: operationalGroupIndexAtt8.setStatus('mandatory')
containerIndexAtt9 = MibTableColumn((1, 3, 6, 1, 4, 1, 412, 2, 4, 63, 1, 9), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: containerIndexAtt9.setStatus('mandatory')
containerNameAtt10 = MibTableColumn((1, 3, 6, 1, 4, 1, 412, 2, 4, 63, 1, 10), DmiDisplaystring()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: containerNameAtt10.setStatus('mandatory')
containerLocationAtt11 = MibTableColumn((1, 3, 6, 1, 4, 1, 412, 2, 4, 63, 1, 11), DmiDisplaystring()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: containerLocationAtt11.setStatus('mandatory')
containerSecurityStatusAtt12 = MibTableColumn((1, 3, 6, 1, 4, 1, 412, 2, 4, 63, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("other", 1), ("unknown", 2), ("noSecurityBreachDetected", 3), ("containerSecurityBreachAttempted", 4), ("containerSecurityBreached", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: containerSecurityStatusAtt12.setStatus('mandatory')
dellSystemResetTable = MibTable((1, 3, 6, 1, 4, 1, 674, 10891, 312), )
if mibBuilder.loadTexts: dellSystemResetTable.setStatus('mandatory')
dellSystemResetEntry = MibTableRow((1, 3, 6, 1, 4, 1, 674, 10891, 312, 1), ).setIndexNames((0, "BASEBRDD-MIB-MIB", "DmiCompId"), (0, "BASEBRDD-MIB-MIB", "DmiGroupId"))
if mibBuilder.loadTexts: dellSystemResetEntry.setStatus('mandatory')
automaticCapabilitiesAtt1 = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10891, 312, 1, 1), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: automaticCapabilitiesAtt1.setStatus('mandatory')
automaticSettingsAtt2 = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10891, 312, 1, 2), DmiDisplaystring()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: automaticSettingsAtt2.setStatus('mandatory')
notificationNumberAtt3 = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10891, 312, 1, 3), DmiDisplaystring()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: notificationNumberAtt3.setStatus('mandatory')
manualCapabilitiesAtt4 = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10891, 312, 1, 4), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: manualCapabilitiesAtt4.setStatus('mandatory')
manualControlAtt5 = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10891, 312, 1, 5), DmiDisplaystring()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: manualControlAtt5.setStatus('mandatory')
automaticSystemResetTimerAtt6 = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10891, 312, 1, 6), DmiDisplaystring()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: automaticSystemResetTimerAtt6.setStatus('mandatory')
dellEsmLogTable = MibTable((1, 3, 6, 1, 4, 1, 674, 10891, 307), )
if mibBuilder.loadTexts: dellEsmLogTable.setStatus('mandatory')
dellEsmLogEntry = MibTableRow((1, 3, 6, 1, 4, 1, 674, 10891, 307, 1), ).setIndexNames((0, "BASEBRDD-MIB-MIB", "DmiCompId"), (0, "BASEBRDD-MIB-MIB", "DmiGroupId"), (0, "BASEBRDD-MIB-MIB", "esmLogIndexAtt1"))
if mibBuilder.loadTexts: dellEsmLogEntry.setStatus('mandatory')
dellEsmLogState = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10891, 307, 1, 0), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("active", 1), ("notInService", 2), ("notReady", 3), ("createAndGo", 4), ("createAndWait", 5), ("destroy", 6)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dellEsmLogState.setStatus('mandatory')
esmLogIndexAtt1 = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10891, 307, 1, 1), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: esmLogIndexAtt1.setStatus('mandatory')
esmLogDataAtt2 = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10891, 307, 1, 2), DmiDisplaystring()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: esmLogDataAtt2.setStatus('mandatory')
dellPOSTLogTable = MibTable((1, 3, 6, 1, 4, 1, 674, 10891, 308), )
if mibBuilder.loadTexts: dellPOSTLogTable.setStatus('mandatory')
dellPOSTLogEntry = MibTableRow((1, 3, 6, 1, 4, 1, 674, 10891, 308, 1), ).setIndexNames((0, "BASEBRDD-MIB-MIB", "DmiCompId"), (0, "BASEBRDD-MIB-MIB", "DmiGroupId"), (0, "BASEBRDD-MIB-MIB", "postLogIndexAtt1"))
if mibBuilder.loadTexts: dellPOSTLogEntry.setStatus('mandatory')
dellPOSTLogState = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10891, 308, 1, 0), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("active", 1), ("notInService", 2), ("notReady", 3), ("createAndGo", 4), ("createAndWait", 5), ("destroy", 6)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dellPOSTLogState.setStatus('mandatory')
postLogIndexAtt1 = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10891, 308, 1, 1), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: postLogIndexAtt1.setStatus('mandatory')
postLogDataAtt2 = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10891, 308, 1, 2), DmiOctetstring()).setMaxAccess("readonly")
if mibBuilder.loadTexts: postLogDataAtt2.setStatus('mandatory')
dellSecurityTable = MibTable((1, 3, 6, 1, 4, 1, 674, 10891, 309), )
if mibBuilder.loadTexts: dellSecurityTable.setStatus('mandatory')
dellSecurityEntry = MibTableRow((1, 3, 6, 1, 4, 1, 674, 10891, 309, 1), ).setIndexNames((0, "BASEBRDD-MIB-MIB", "DmiCompId"), (0, "BASEBRDD-MIB-MIB", "DmiGroupId"), (0, "BASEBRDD-MIB-MIB", "userIndexAtt1"))
if mibBuilder.loadTexts: dellSecurityEntry.setStatus('mandatory')
dellSecurityState = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10891, 309, 1, 0), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("active", 1), ("notInService", 2), ("notReady", 3), ("createAndGo", 4), ("createAndWait", 5), ("destroy", 6)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dellSecurityState.setStatus('mandatory')
userIndexAtt1 = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10891, 309, 1, 1), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: userIndexAtt1.setStatus('mandatory')
userNameAtt2 = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10891, 309, 1, 2), DmiDisplaystring()).setMaxAccess("readonly")
if mibBuilder.loadTexts: userNameAtt2.setStatus('mandatory')
userControlAtt3 = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10891, 309, 1, 3), DmiDisplaystring()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: userControlAtt3.setStatus('mandatory')
requestAtt4 = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10891, 309, 1, 4), DmiDisplaystring()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: requestAtt4.setStatus('mandatory')
dellDialupTable = MibTable((1, 3, 6, 1, 4, 1, 674, 10891, 310), )
if mibBuilder.loadTexts: dellDialupTable.setStatus('mandatory')
dellDialupEntry = MibTableRow((1, 3, 6, 1, 4, 1, 674, 10891, 310, 1), ).setIndexNames((0, "BASEBRDD-MIB-MIB", "DmiCompId"), (0, "BASEBRDD-MIB-MIB", "DmiGroupId"))
if mibBuilder.loadTexts: dellDialupEntry.setStatus('mandatory')
dialupCapabilityAtt1 = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10891, 310, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("false", 0), ("true", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dialupCapabilityAtt1.setStatus('mandatory')
callbackNumberAtt2 = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10891, 310, 1, 2), DmiDisplaystring()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: callbackNumberAtt2.setStatus('mandatory')
dellFirmwareTable = MibTable((1, 3, 6, 1, 4, 1, 674, 10891, 311), )
if mibBuilder.loadTexts: dellFirmwareTable.setStatus('mandatory')
dellFirmwareEntry = MibTableRow((1, 3, 6, 1, 4, 1, 674, 10891, 311, 1), ).setIndexNames((0, "BASEBRDD-MIB-MIB", "DmiCompId"), (0, "BASEBRDD-MIB-MIB", "DmiGroupId"), (0, "BASEBRDD-MIB-MIB", "firmwareChassisIndexAtt1"), (0, "BASEBRDD-MIB-MIB", "firmwareIndexAtt2"))
if mibBuilder.loadTexts: dellFirmwareEntry.setStatus('mandatory')
dellFirmwareState = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10891, 311, 1, 0), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("active", 1), ("notInService", 2), ("notReady", 3), ("createAndGo", 4), ("createAndWait", 5), ("destroy", 6)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dellFirmwareState.setStatus('mandatory')
firmwareChassisIndexAtt1 = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10891, 311, 1, 1), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: firmwareChassisIndexAtt1.setStatus('mandatory')
firmwareIndexAtt2 = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10891, 311, 1, 2), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: firmwareIndexAtt2.setStatus('mandatory')
firmwareTypeAtt3 = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10891, 311, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("other", 1), ("unknown", 2), ("bIOS", 3), ("eSM", 4), ("pSPB", 5), ("backplane", 6)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: firmwareTypeAtt3.setStatus('mandatory')
firmwareVersionAtt4 = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10891, 311, 1, 4), DmiDisplaystring()).setMaxAccess("readonly")
if mibBuilder.loadTexts: firmwareVersionAtt4.setStatus('mandatory')
firmwareStatusAtt5 = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10891, 311, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("other", 1), ("unknown", 2), ("oK", 3), ("nonCritical", 4), ("critical", 5), ("nonRecoverable", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: firmwareStatusAtt5.setStatus('mandatory')
dMTFCoolingDeviceTable = MibTable((1, 3, 6, 1, 4, 1, 412, 2, 4, 17), )
if mibBuilder.loadTexts: dMTFCoolingDeviceTable.setStatus('mandatory')
dMTFCoolingDeviceEntry = MibTableRow((1, 3, 6, 1, 4, 1, 412, 2, 4, 17, 1), ).setIndexNames((0, "BASEBRDD-MIB-MIB", "DmiCompId"), (0, "BASEBRDD-MIB-MIB", "DmiGroupId"), (0, "BASEBRDD-MIB-MIB", "coolingDeviceTableIndexAtt1"))
if mibBuilder.loadTexts: dMTFCoolingDeviceEntry.setStatus('mandatory')
dMTFCoolingDeviceState = MibTableColumn((1, 3, 6, 1, 4, 1, 412, 2, 4, 17, 1, 0), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("active", 1), ("notInService", 2), ("notReady", 3), ("createAndGo", 4), ("createAndWait", 5), ("destroy", 6)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dMTFCoolingDeviceState.setStatus('mandatory')
coolingDeviceTableIndexAtt1 = MibTableColumn((1, 3, 6, 1, 4, 1, 412, 2, 4, 17, 1, 1), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: coolingDeviceTableIndexAtt1.setStatus('mandatory')
fRUGroupIndexAtt2 = MibTableColumn((1, 3, 6, 1, 4, 1, 412, 2, 4, 17, 1, 2), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fRUGroupIndexAtt2.setStatus('mandatory')
operationalGroupIndexAtt3 = MibTableColumn((1, 3, 6, 1, 4, 1, 412, 2, 4, 17, 1, 3), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: operationalGroupIndexAtt3.setStatus('mandatory')
coolingUnitIndexAtt4 = MibTableColumn((1, 3, 6, 1, 4, 1, 412, 2, 4, 17, 1, 4), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: coolingUnitIndexAtt4.setStatus('mandatory')
coolingDeviceTypeAtt5 = MibTableColumn((1, 3, 6, 1, 4, 1, 412, 2, 4, 17, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 32, 33))).clone(namedValues=NamedValues(("other", 1), ("unknown", 2), ("fan", 3), ("centrifugalBlower", 4), ("chipFan", 5), ("cabinetFan", 6), ("powerSupplyFan", 7), ("heatPipe", 8), ("integratedRefrigeration", 9), ("activeCooling", 32), ("passiveCooling", 33)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: coolingDeviceTypeAtt5.setStatus('mandatory')
temperatureProbeIndexAtt6 = MibTableColumn((1, 3, 6, 1, 4, 1, 412, 2, 4, 17, 1, 6), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: temperatureProbeIndexAtt6.setStatus('mandatory')
dMTFElectricalCurrentProbeTable = MibTable((1, 3, 6, 1, 4, 1, 412, 2, 4, 55), )
if mibBuilder.loadTexts: dMTFElectricalCurrentProbeTable.setStatus('mandatory')
dMTFElectricalCurrentProbeEntry = MibTableRow((1, 3, 6, 1, 4, 1, 412, 2, 4, 55, 1), ).setIndexNames((0, "BASEBRDD-MIB-MIB", "DmiCompId"), (0, "BASEBRDD-MIB-MIB", "DmiGroupId"), (0, "BASEBRDD-MIB-MIB", "electricalCurrentProbeTableIndexAtt1"))
if mibBuilder.loadTexts: dMTFElectricalCurrentProbeEntry.setStatus('mandatory')
dMTFElectricalCurrentProbeState = MibTableColumn((1, 3, 6, 1, 4, 1, 412, 2, 4, 55, 1, 0), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("active", 1), ("notInService", 2), ("notReady", 3), ("createAndGo", 4), ("createAndWait", 5), ("destroy", 6)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dMTFElectricalCurrentProbeState.setStatus('mandatory')
electricalCurrentProbeTableIndexAtt1 = MibTableColumn((1, 3, 6, 1, 4, 1, 412, 2, 4, 55, 1, 1), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: electricalCurrentProbeTableIndexAtt1.setStatus('mandatory')
electricalCurrentProbeLocationAtt2 = MibTableColumn((1, 3, 6, 1, 4, 1, 412, 2, 4, 55, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11))).clone(namedValues=NamedValues(("other", 1), ("unknown", 2), ("processor", 3), ("disk", 4), ("peripheralBay", 5), ("sMBMaster", 6), ("motherboard", 7), ("memoryModule", 8), ("processorModule", 9), ("powerUnit", 10), ("addInCard", 11)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: electricalCurrentProbeLocationAtt2.setStatus('mandatory')
electricalCurrentProbeDescriptionAtt3 = MibTableColumn((1, 3, 6, 1, 4, 1, 412, 2, 4, 55, 1, 3), DmiDisplaystring()).setMaxAccess("readonly")
if mibBuilder.loadTexts: electricalCurrentProbeDescriptionAtt3.setStatus('mandatory')
electricalCurrentStatusAtt4 = MibTableColumn((1, 3, 6, 1, 4, 1, 412, 2, 4, 55, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("other", 1), ("unknown", 2), ("oK", 3), ("nonCritical", 4), ("critical", 5), ("nonRecoverable", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: electricalCurrentStatusAtt4.setStatus('mandatory')
electricalCurrentProbeReadingAtt5 = MibTableColumn((1, 3, 6, 1, 4, 1, 412, 2, 4, 55, 1, 5), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: electricalCurrentProbeReadingAtt5.setStatus('mandatory')
monitoredElectricalCurrentNominalReadingAtt6 = MibTableColumn((1, 3, 6, 1, 4, 1, 412, 2, 4, 55, 1, 6), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: monitoredElectricalCurrentNominalReadingAtt6.setStatus('mandatory')
monitoredElectricalCurrentNormalMaximumAtt7 = MibTableColumn((1, 3, 6, 1, 4, 1, 412, 2, 4, 55, 1, 7), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: monitoredElectricalCurrentNormalMaximumAtt7.setStatus('mandatory')
monitoredElectricalCurrentNormalMinimumAtt8 = MibTableColumn((1, 3, 6, 1, 4, 1, 412, 2, 4, 55, 1, 8), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: monitoredElectricalCurrentNormalMinimumAtt8.setStatus('mandatory')
electricalCurrentProbeMaximumAtt9 = MibTableColumn((1, 3, 6, 1, 4, 1, 412, 2, 4, 55, 1, 9), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: electricalCurrentProbeMaximumAtt9.setStatus('mandatory')
electricalCurrentProbeMinimumAtt10 = MibTableColumn((1, 3, 6, 1, 4, 1, 412, 2, 4, 55, 1, 10), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: electricalCurrentProbeMinimumAtt10.setStatus('mandatory')
electricalCurrentReadingLowerThresholdNonCriticalAtt11 = MibTableColumn((1, 3, 6, 1, 4, 1, 412, 2, 4, 55, 1, 11), DmiInteger()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: electricalCurrentReadingLowerThresholdNonCriticalAtt11.setStatus('mandatory')
electricalCurrentReadingUpperThresholdNonCriticalAtt12 = MibTableColumn((1, 3, 6, 1, 4, 1, 412, 2, 4, 55, 1, 12), DmiInteger()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: electricalCurrentReadingUpperThresholdNonCriticalAtt12.setStatus('mandatory')
electricalCurrentReadingLowerThresholdCriticalAtt13 = MibTableColumn((1, 3, 6, 1, 4, 1, 412, 2, 4, 55, 1, 13), DmiInteger()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: electricalCurrentReadingLowerThresholdCriticalAtt13.setStatus('mandatory')
currentReadingUpperThresholdCriticalAtt14 = MibTableColumn((1, 3, 6, 1, 4, 1, 412, 2, 4, 55, 1, 14), DmiInteger()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: currentReadingUpperThresholdCriticalAtt14.setStatus('mandatory')
electricalCurrentReadingLowerThresholdNonRecoverabAtt15 = MibTableColumn((1, 3, 6, 1, 4, 1, 412, 2, 4, 55, 1, 15), DmiInteger()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: electricalCurrentReadingLowerThresholdNonRecoverabAtt15.setStatus('mandatory')
electricalCurrentReadingUpperThresholdNonRecoverabAtt16 = MibTableColumn((1, 3, 6, 1, 4, 1, 412, 2, 4, 55, 1, 16), DmiInteger()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: electricalCurrentReadingUpperThresholdNonRecoverabAtt16.setStatus('mandatory')
electricalCurrentProbeResolutionAtt17 = MibTableColumn((1, 3, 6, 1, 4, 1, 412, 2, 4, 55, 1, 17), DmiInteger()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: electricalCurrentProbeResolutionAtt17.setStatus('mandatory')
electricalCurrentProbeToleranceAtt18 = MibTableColumn((1, 3, 6, 1, 4, 1, 412, 2, 4, 55, 1, 18), DmiInteger()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: electricalCurrentProbeToleranceAtt18.setStatus('mandatory')
electricalCurrentProbeAccuracyAtt19 = MibTableColumn((1, 3, 6, 1, 4, 1, 412, 2, 4, 55, 1, 19), DmiInteger()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: electricalCurrentProbeAccuracyAtt19.setStatus('mandatory')
fRUGroupIndexAtt20 = MibScalar((1, 3, 6, 1, 4, 1, 412, 2, 4, 55, 1, 20), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fRUGroupIndexAtt20.setStatus('mandatory')
operationalGroupIndexAtt21 = MibScalar((1, 3, 6, 1, 4, 1, 412, 2, 4, 55, 1, 21), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: operationalGroupIndexAtt21.setStatus('mandatory')
dMTFFRUTable = MibTable((1, 3, 6, 1, 4, 1, 412, 2, 4, 29), )
if mibBuilder.loadTexts: dMTFFRUTable.setStatus('mandatory')
dMTFFRUEntry = MibTableRow((1, 3, 6, 1, 4, 1, 412, 2, 4, 29, 1), ).setIndexNames((0, "BASEBRDD-MIB-MIB", "DmiCompId"), (0, "BASEBRDD-MIB-MIB", "DmiGroupId"), (0, "BASEBRDD-MIB-MIB", "fRUIndexAtt1"))
if mibBuilder.loadTexts: dMTFFRUEntry.setStatus('mandatory')
dMTFFRUState = MibTableColumn((1, 3, 6, 1, 4, 1, 412, 2, 4, 29, 1, 0), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("active", 1), ("notInService", 2), ("notReady", 3), ("createAndGo", 4), ("createAndWait", 5), ("destroy", 6)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dMTFFRUState.setStatus('mandatory')
fRUIndexAtt1 = MibTableColumn((1, 3, 6, 1, 4, 1, 412, 2, 4, 29, 1, 1), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fRUIndexAtt1.setStatus('mandatory')
deviceGroupIndexAtt2 = MibTableColumn((1, 3, 6, 1, 4, 1, 412, 2, 4, 29, 1, 2), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deviceGroupIndexAtt2.setStatus('mandatory')
descriptionAtt3 = MibTableColumn((1, 3, 6, 1, 4, 1, 412, 2, 4, 29, 1, 3), DmiDisplaystring()).setMaxAccess("readonly")
if mibBuilder.loadTexts: descriptionAtt3.setStatus('mandatory')
manufacturerAtt4 = MibTableColumn((1, 3, 6, 1, 4, 1, 412, 2, 4, 29, 1, 4), DmiDisplaystring()).setMaxAccess("readonly")
if mibBuilder.loadTexts: manufacturerAtt4.setStatus('mandatory')
modelAtt5 = MibTableColumn((1, 3, 6, 1, 4, 1, 412, 2, 4, 29, 1, 5), DmiDisplaystring()).setMaxAccess("readonly")
if mibBuilder.loadTexts: modelAtt5.setStatus('mandatory')
partNumberAtt6 = MibTableColumn((1, 3, 6, 1, 4, 1, 412, 2, 4, 29, 1, 6), DmiDisplaystring()).setMaxAccess("readonly")
if mibBuilder.loadTexts: partNumberAtt6.setStatus('mandatory')
fRUSerialNumberAtt7 = MibTableColumn((1, 3, 6, 1, 4, 1, 412, 2, 4, 29, 1, 7), DmiDisplaystring()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fRUSerialNumberAtt7.setStatus('mandatory')
revisionLevelAtt8 = MibTableColumn((1, 3, 6, 1, 4, 1, 412, 2, 4, 29, 1, 8), DmiDisplaystring()).setMaxAccess("readonly")
if mibBuilder.loadTexts: revisionLevelAtt8.setStatus('mandatory')
warrantyStartDateAtt9 = MibTableColumn((1, 3, 6, 1, 4, 1, 412, 2, 4, 29, 1, 9), DmiDate()).setMaxAccess("readonly")
if mibBuilder.loadTexts: warrantyStartDateAtt9.setStatus('mandatory')
warrantyDurationAtt10 = MibTableColumn((1, 3, 6, 1, 4, 1, 412, 2, 4, 29, 1, 10), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: warrantyDurationAtt10.setStatus('mandatory')
supportPhoneNumberAtt11 = MibTableColumn((1, 3, 6, 1, 4, 1, 412, 2, 4, 29, 1, 11), DmiDisplaystring()).setMaxAccess("readonly")
if mibBuilder.loadTexts: supportPhoneNumberAtt11.setStatus('mandatory')
fRUInternetUniformResourceLocatorAtt12 = MibTableColumn((1, 3, 6, 1, 4, 1, 412, 2, 4, 29, 1, 12), DmiDisplaystring()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fRUInternetUniformResourceLocatorAtt12.setStatus('mandatory')
dMTFGeneralInformationTable = MibTable((1, 3, 6, 1, 4, 1, 412, 2, 4, 1), )
if mibBuilder.loadTexts: dMTFGeneralInformationTable.setStatus('mandatory')
dMTFGeneralInformationEntry = MibTableRow((1, 3, 6, 1, 4, 1, 412, 2, 4, 1, 1), ).setIndexNames((0, "BASEBRDD-MIB-MIB", "DmiCompId"), (0, "BASEBRDD-MIB-MIB", "DmiGroupId"))
if mibBuilder.loadTexts: dMTFGeneralInformationEntry.setStatus('mandatory')
systemNameAtt1 = MibTableColumn((1, 3, 6, 1, 4, 1, 412, 2, 4, 1, 1, 1), DmiDisplaystring()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: systemNameAtt1.setStatus('mandatory')
systemLocationAtt2 = MibTableColumn((1, 3, 6, 1, 4, 1, 412, 2, 4, 1, 1, 2), DmiDisplaystring()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: systemLocationAtt2.setStatus('mandatory')
systemPrimaryUserNameAtt3 = MibTableColumn((1, 3, 6, 1, 4, 1, 412, 2, 4, 1, 1, 3), DmiDisplaystring()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: systemPrimaryUserNameAtt3.setStatus('mandatory')
systemPrimaryUserPhoneAtt4 = MibTableColumn((1, 3, 6, 1, 4, 1, 412, 2, 4, 1, 1, 4), DmiDisplaystring()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: systemPrimaryUserPhoneAtt4.setStatus('mandatory')
systemBootupTimeAtt5 = MibTableColumn((1, 3, 6, 1, 4, 1, 412, 2, 4, 1, 1, 5), DmiDate()).setMaxAccess("readonly")
if mibBuilder.loadTexts: systemBootupTimeAtt5.setStatus('mandatory')
systemDateTimeAtt6 = MibTableColumn((1, 3, 6, 1, 4, 1, 412, 2, 4, 1, 1, 6), DmiDate()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: systemDateTimeAtt6.setStatus('mandatory')
dMTFMemoryArrayMappedAddressesTable = MibTable((1, 3, 6, 1, 4, 1, 412, 2, 4, 34), )
if mibBuilder.loadTexts: dMTFMemoryArrayMappedAddressesTable.setStatus('mandatory')
dMTFMemoryArrayMappedAddressesEntry = MibTableRow((1, 3, 6, 1, 4, 1, 412, 2, 4, 34, 1), ).setIndexNames((0, "BASEBRDD-MIB-MIB", "DmiCompId"), (0, "BASEBRDD-MIB-MIB", "DmiGroupId"), (0, "BASEBRDD-MIB-MIB", "memoryArrayMappedAddressesTableIndexAtt1"))
if mibBuilder.loadTexts: dMTFMemoryArrayMappedAddressesEntry.setStatus('mandatory')
dMTFMemoryArrayMappedAddressesState = MibTableColumn((1, 3, 6, 1, 4, 1, 412, 2, 4, 34, 1, 0), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("active", 1), ("notInService", 2), ("notReady", 3), ("createAndGo", 4), ("createAndWait", 5), ("destroy", 6)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dMTFMemoryArrayMappedAddressesState.setStatus('mandatory')
memoryArrayMappedAddressesTableIndexAtt1 = MibTableColumn((1, 3, 6, 1, 4, 1, 412, 2, 4, 34, 1, 1), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: memoryArrayMappedAddressesTableIndexAtt1.setStatus('mandatory')
memoryArrayIndexAtt2 = MibTableColumn((1, 3, 6, 1, 4, 1, 412, 2, 4, 34, 1, 2), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: memoryArrayIndexAtt2.setStatus('mandatory')
mappedRangeStartingAddressAtt3 = MibTableColumn((1, 3, 6, 1, 4, 1, 412, 2, 4, 34, 1, 3), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mappedRangeStartingAddressAtt3.setStatus('mandatory')
mappedRangeEndingAddressAtt4 = MibTableColumn((1, 3, 6, 1, 4, 1, 412, 2, 4, 34, 1, 4), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mappedRangeEndingAddressAtt4.setStatus('mandatory')
partitionIDAtt5 = MibTableColumn((1, 3, 6, 1, 4, 1, 412, 2, 4, 34, 1, 5), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: partitionIDAtt5.setStatus('mandatory')
partitionWidthAtt6 = MibTableColumn((1, 3, 6, 1, 4, 1, 412, 2, 4, 34, 1, 6), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: partitionWidthAtt6.setStatus('mandatory')
operationalGroupIndexAtt7 = MibTableColumn((1, 3, 6, 1, 4, 1, 412, 2, 4, 34, 1, 7), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: operationalGroupIndexAtt7.setStatus('mandatory')
dMTFMemoryDeviceMappedAddressesTable = MibTable((1, 3, 6, 1, 4, 1, 412, 2, 4, 36), )
if mibBuilder.loadTexts: dMTFMemoryDeviceMappedAddressesTable.setStatus('mandatory')
dMTFMemoryDeviceMappedAddressesEntry = MibTableRow((1, 3, 6, 1, 4, 1, 412, 2, 4, 36, 1), ).setIndexNames((0, "BASEBRDD-MIB-MIB", "DmiCompId"), (0, "BASEBRDD-MIB-MIB", "DmiGroupId"), (0, "BASEBRDD-MIB-MIB", "memoryDeviceMappedAddressesTableIndexAtt1"))
if mibBuilder.loadTexts: dMTFMemoryDeviceMappedAddressesEntry.setStatus('mandatory')
dMTFMemoryDeviceMappedAddressesState = MibTableColumn((1, 3, 6, 1, 4, 1, 412, 2, 4, 36, 1, 0), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("active", 1), ("notInService", 2), ("notReady", 3), ("createAndGo", 4), ("createAndWait", 5), ("destroy", 6)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dMTFMemoryDeviceMappedAddressesState.setStatus('mandatory')
memoryDeviceMappedAddressesTableIndexAtt1 = MibTableColumn((1, 3, 6, 1, 4, 1, 412, 2, 4, 36, 1, 1), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: memoryDeviceMappedAddressesTableIndexAtt1.setStatus('mandatory')
memoryDeviceSetIDAtt2 = MibTableColumn((1, 3, 6, 1, 4, 1, 412, 2, 4, 36, 1, 2), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: memoryDeviceSetIDAtt2.setStatus('mandatory')
partitionAtt3 = MibTableColumn((1, 3, 6, 1, 4, 1, 412, 2, 4, 36, 1, 3), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: partitionAtt3.setStatus('mandatory')
mappedRangeStartingAddressAtt4 = MibTableColumn((1, 3, 6, 1, 4, 1, 412, 2, 4, 36, 1, 4), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mappedRangeStartingAddressAtt4.setStatus('mandatory')
mappedRangeEndingAddressAtt5 = MibTableColumn((1, 3, 6, 1, 4, 1, 412, 2, 4, 36, 1, 5), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mappedRangeEndingAddressAtt5.setStatus('mandatory')
partitionRowPositionAtt6 = MibTableColumn((1, 3, 6, 1, 4, 1, 412, 2, 4, 36, 1, 6), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: partitionRowPositionAtt6.setStatus('mandatory')
interleavePositionAtt7 = MibTableColumn((1, 3, 6, 1, 4, 1, 412, 2, 4, 36, 1, 7), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: interleavePositionAtt7.setStatus('mandatory')
dataDepthAtt8 = MibTableColumn((1, 3, 6, 1, 4, 1, 412, 2, 4, 36, 1, 8), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dataDepthAtt8.setStatus('mandatory')
dMTFMemoryDeviceTable = MibTable((1, 3, 6, 1, 4, 1, 412, 2, 4, 35), )
if mibBuilder.loadTexts: dMTFMemoryDeviceTable.setStatus('mandatory')
dMTFMemoryDeviceEntry = MibTableRow((1, 3, 6, 1, 4, 1, 412, 2, 4, 35, 1), ).setIndexNames((0, "BASEBRDD-MIB-MIB", "DmiCompId"), (0, "BASEBRDD-MIB-MIB", "DmiGroupId"), (0, "BASEBRDD-MIB-MIB", "memoryDeviceTableIndexAtt1"))
if mibBuilder.loadTexts: dMTFMemoryDeviceEntry.setStatus('mandatory')
dMTFMemoryDeviceState = MibTableColumn((1, 3, 6, 1, 4, 1, 412, 2, 4, 35, 1, 0), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("active", 1), ("notInService", 2), ("notReady", 3), ("createAndGo", 4), ("createAndWait", 5), ("destroy", 6)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dMTFMemoryDeviceState.setStatus('mandatory')
memoryDeviceTableIndexAtt1 = MibTableColumn((1, 3, 6, 1, 4, 1, 412, 2, 4, 35, 1, 1), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: memoryDeviceTableIndexAtt1.setStatus('mandatory')
memoryArrayIndexAtt2_1 = MibScalar((1, 3, 6, 1, 4, 1, 412, 2, 4, 35, 1, 2), DmiInteger()).setLabel("memoryArrayIndexAtt2-1").setMaxAccess("readonly")
if mibBuilder.loadTexts: memoryArrayIndexAtt2_1.setStatus('mandatory')
deviceLocatorAtt3 = MibTableColumn((1, 3, 6, 1, 4, 1, 412, 2, 4, 35, 1, 3), DmiDisplaystring()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deviceLocatorAtt3.setStatus('mandatory')
bankLocatorAtt4 = MibTableColumn((1, 3, 6, 1, 4, 1, 412, 2, 4, 35, 1, 4), DmiDisplaystring()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bankLocatorAtt4.setStatus('mandatory')
sizeAtt5 = MibTableColumn((1, 3, 6, 1, 4, 1, 412, 2, 4, 35, 1, 5), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sizeAtt5.setStatus('mandatory')
formFactorAtt6 = MibTableColumn((1, 3, 6, 1, 4, 1, 412, 2, 4, 35, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11))).clone(namedValues=NamedValues(("other", 1), ("unknown", 2), ("sIMM", 3), ("sIP", 4), ("chip", 5), ("dIP", 6), ("zIP", 7), ("proprietaryCard", 8), ("dIMM", 9), ("tSOP", 10), ("rowOfChips", 11)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: formFactorAtt6.setStatus('mandatory')
totalWidthAtt7 = MibTableColumn((1, 3, 6, 1, 4, 1, 412, 2, 4, 35, 1, 7), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: totalWidthAtt7.setStatus('mandatory')
dataWidthAtt8 = MibTableColumn((1, 3, 6, 1, 4, 1, 412, 2, 4, 35, 1, 8), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dataWidthAtt8.setStatus('mandatory')
memoryTypeAtt9 = MibTableColumn((1, 3, 6, 1, 4, 1, 412, 2, 4, 35, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12))).clone(namedValues=NamedValues(("other", 1), ("unknown", 2), ("dRAM", 3), ("eDRAM", 4), ("vRAM", 5), ("sRAM", 6), ("rAM", 7), ("rOM", 8), ("fLASH", 9), ("eEPROM", 10), ("fEPROM", 11), ("ePROM", 12)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: memoryTypeAtt9.setStatus('mandatory')
typeDetailAtt10 = MibTableColumn((1, 3, 6, 1, 4, 1, 412, 2, 4, 35, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12))).clone(namedValues=NamedValues(("other", 1), ("unknown", 2), ("fastPaged", 3), ("staticColumn", 4), ("pseudoStatic", 5), ("rAMBUS", 6), ("synchronous", 7), ("cMOS", 8), ("eDO", 9), ("windowDRAM", 10), ("cacheDRAM", 11), ("nonVolatile", 12)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: typeDetailAtt10.setStatus('mandatory')
deviceSetAtt11 = MibTableColumn((1, 3, 6, 1, 4, 1, 412, 2, 4, 35, 1, 11), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deviceSetAtt11.setStatus('mandatory')
deviceErrorTypeAtt12 = MibTableColumn((1, 3, 6, 1, 4, 1, 412, 2, 4, 35, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14))).clone(namedValues=NamedValues(("other", 1), ("unknown", 2), ("oK", 3), ("badRead", 4), ("parityError", 5), ("singleBitError", 6), ("doubleBitError", 7), ("multiBitError", 8), ("nibbleError", 9), ("checksumError", 10), ("cRCError", 11), ("correctedSingleBitError", 12), ("correctedError", 13), ("uncorrectableError", 14)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: deviceErrorTypeAtt12.setStatus('mandatory')
errorGranularityAtt13 = MibTableColumn((1, 3, 6, 1, 4, 1, 412, 2, 4, 35, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("other", 1), ("unknown", 2), ("deviceLevel", 3), ("memoryPartitionLevel", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: errorGranularityAtt13.setStatus('mandatory')
lastErrorUpdateAtt14 = MibTableColumn((1, 3, 6, 1, 4, 1, 412, 2, 4, 35, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("other", 1), ("unknown", 2), ("noUpdateSinceLastInstrumentationStart", 3), ("updatedFromInformationObtainedPriorToInstrumentati", 4), ("updatedDuringInstrumentationRunTime", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lastErrorUpdateAtt14.setStatus('mandatory')
errorOperationAtt15 = MibTableColumn((1, 3, 6, 1, 4, 1, 412, 2, 4, 35, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("other", 1), ("unknown", 2), ("read", 3), ("write", 4), ("partialWrite", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: errorOperationAtt15.setStatus('mandatory')
errorDataSizeAtt16 = MibTableColumn((1, 3, 6, 1, 4, 1, 412, 2, 4, 35, 1, 16), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: errorDataSizeAtt16.setStatus('mandatory')
errorDataAtt17 = MibTableColumn((1, 3, 6, 1, 4, 1, 412, 2, 4, 35, 1, 17), DmiOctetstring()).setMaxAccess("readonly")
if mibBuilder.loadTexts: errorDataAtt17.setStatus('mandatory')
vendorSyndromeAtt18 = MibTableColumn((1, 3, 6, 1, 4, 1, 412, 2, 4, 35, 1, 18), DmiOctetstring()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vendorSyndromeAtt18.setStatus('mandatory')
deviceErrorAddressAtt19 = MibTableColumn((1, 3, 6, 1, 4, 1, 412, 2, 4, 35, 1, 19), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deviceErrorAddressAtt19.setStatus('mandatory')
arrayErrorAddressAtt20 = MibTableColumn((1, 3, 6, 1, 4, 1, 412, 2, 4, 35, 1, 20), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: arrayErrorAddressAtt20.setStatus('mandatory')
errorResolutionAtt21 = MibTableColumn((1, 3, 6, 1, 4, 1, 412, 2, 4, 35, 1, 21), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: errorResolutionAtt21.setStatus('mandatory')
fRUGroupIndexAtt22 = MibTableColumn((1, 3, 6, 1, 4, 1, 412, 2, 4, 35, 1, 22), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fRUGroupIndexAtt22.setStatus('mandatory')
operationalGroupIndexAtt23 = MibTableColumn((1, 3, 6, 1, 4, 1, 412, 2, 4, 35, 1, 23), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: operationalGroupIndexAtt23.setStatus('mandatory')
dMTFOperatingSystemTable = MibTable((1, 3, 6, 1, 4, 1, 412, 2, 4, 2), )
if mibBuilder.loadTexts: dMTFOperatingSystemTable.setStatus('mandatory')
dMTFOperatingSystemEntry = MibTableRow((1, 3, 6, 1, 4, 1, 412, 2, 4, 2, 1), ).setIndexNames((0, "BASEBRDD-MIB-MIB", "DmiCompId"), (0, "BASEBRDD-MIB-MIB", "DmiGroupId"), (0, "BASEBRDD-MIB-MIB", "operatingSystemIndexAtt1"))
if mibBuilder.loadTexts: dMTFOperatingSystemEntry.setStatus('mandatory')
dMTFOperatingSystemState = MibTableColumn((1, 3, 6, 1, 4, 1, 412, 2, 4, 2, 1, 0), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("active", 1), ("notInService", 2), ("notReady", 3), ("createAndGo", 4), ("createAndWait", 5), ("destroy", 6)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dMTFOperatingSystemState.setStatus('mandatory')
operatingSystemIndexAtt1 = MibTableColumn((1, 3, 6, 1, 4, 1, 412, 2, 4, 2, 1, 1), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: operatingSystemIndexAtt1.setStatus('mandatory')
operatingSystemNameAtt2 = MibTableColumn((1, 3, 6, 1, 4, 1, 412, 2, 4, 2, 1, 2), DmiDisplaystring()).setMaxAccess("readonly")
if mibBuilder.loadTexts: operatingSystemNameAtt2.setStatus('mandatory')
operatingSystemVersionAtt3 = MibTableColumn((1, 3, 6, 1, 4, 1, 412, 2, 4, 2, 1, 3), DmiDisplaystring()).setMaxAccess("readonly")
if mibBuilder.loadTexts: operatingSystemVersionAtt3.setStatus('mandatory')
primaryOperatingSystemAtt4 = MibTableColumn((1, 3, 6, 1, 4, 1, 412, 2, 4, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("false", 0), ("true", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: primaryOperatingSystemAtt4.setStatus('mandatory')
operatingSystemBootDeviceStorageTypeAtt5 = MibTableColumn((1, 3, 6, 1, 4, 1, 412, 2, 4, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11))).clone(namedValues=NamedValues(("other", 1), ("unknown", 2), ("hardDisk", 3), ("floppyDisk", 4), ("opticalROM", 5), ("opticalWORM", 6), ("opticalRW", 7), ("compactDisk", 8), ("flashDisk", 9), ("bernoulli", 10), ("opticalFloppyDisk", 11)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: operatingSystemBootDeviceStorageTypeAtt5.setStatus('mandatory')
operatingSystemBootDeviceIndexAtt6 = MibTableColumn((1, 3, 6, 1, 4, 1, 412, 2, 4, 2, 1, 6), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: operatingSystemBootDeviceIndexAtt6.setStatus('mandatory')
operatingSystemBootPartitionIndexAtt7 = MibTableColumn((1, 3, 6, 1, 4, 1, 412, 2, 4, 2, 1, 7), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: operatingSystemBootPartitionIndexAtt7.setStatus('mandatory')
operatingSystemDescriptionAtt8 = MibTableColumn((1, 3, 6, 1, 4, 1, 412, 2, 4, 2, 1, 8), DmiDisplaystring()).setMaxAccess("readonly")
if mibBuilder.loadTexts: operatingSystemDescriptionAtt8.setStatus('mandatory')
dMTFOperationalStateTable = MibTable((1, 3, 6, 1, 4, 1, 412, 2, 4, 30), )
if mibBuilder.loadTexts: dMTFOperationalStateTable.setStatus('mandatory')
dMTFOperationalStateEntry = MibTableRow((1, 3, 6, 1, 4, 1, 412, 2, 4, 30, 1), ).setIndexNames((0, "BASEBRDD-MIB-MIB", "DmiCompId"), (0, "BASEBRDD-MIB-MIB", "DmiGroupId"), (0, "BASEBRDD-MIB-MIB", "operationalStateInstanceIndexAtt1"))
if mibBuilder.loadTexts: dMTFOperationalStateEntry.setStatus('mandatory')
dMTFOperationalStateState = MibTableColumn((1, 3, 6, 1, 4, 1, 412, 2, 4, 30, 1, 0), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("active", 1), ("notInService", 2), ("notReady", 3), ("createAndGo", 4), ("createAndWait", 5), ("destroy", 6)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dMTFOperationalStateState.setStatus('mandatory')
operationalStateInstanceIndexAtt1 = MibTableColumn((1, 3, 6, 1, 4, 1, 412, 2, 4, 30, 1, 1), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: operationalStateInstanceIndexAtt1.setStatus('mandatory')
deviceGroupIndexAtt2_1 = MibScalar((1, 3, 6, 1, 4, 1, 412, 2, 4, 30, 1, 2), DmiInteger()).setLabel("deviceGroupIndexAtt2-1").setMaxAccess("readonly")
if mibBuilder.loadTexts: deviceGroupIndexAtt2_1.setStatus('mandatory')
operationalStatusAtt3 = MibTableColumn((1, 3, 6, 1, 4, 1, 412, 2, 4, 30, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("other", 1), ("unknown", 2), ("enabled", 3), ("disabled", 4), ("notApplicable", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: operationalStatusAtt3.setStatus('mandatory')
usageStateAtt4 = MibTableColumn((1, 3, 6, 1, 4, 1, 412, 2, 4, 30, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("other", 1), ("unknown", 2), ("idle", 3), ("active", 4), ("busy", 5), ("notApplicable", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: usageStateAtt4.setStatus('mandatory')
availabilityStatusAtt5 = MibTableColumn((1, 3, 6, 1, 4, 1, 412, 2, 4, 30, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13))).clone(namedValues=NamedValues(("other", 1), ("unknown", 2), ("running", 3), ("warning", 4), ("inTest", 5), ("notApplicable", 6), ("powerOff", 7), ("offLine", 8), ("offDuty", 9), ("degraded", 10), ("notInstalled", 11), ("installError", 12), ("powerSave", 13)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: availabilityStatusAtt5.setStatus('mandatory')
administrativeStateAtt6 = MibTableColumn((1, 3, 6, 1, 4, 1, 412, 2, 4, 30, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("other", 1), ("unknown", 2), ("locked", 3), ("unlocked", 4), ("notApplicable", 5), ("shuttingDown", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: administrativeStateAtt6.setStatus('mandatory')
fatalErrorCountAtt7 = MibTableColumn((1, 3, 6, 1, 4, 1, 412, 2, 4, 30, 1, 7), DmiCounter()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fatalErrorCountAtt7.setStatus('mandatory')
majorErrorCountAtt8 = MibTableColumn((1, 3, 6, 1, 4, 1, 412, 2, 4, 30, 1, 8), DmiCounter()).setMaxAccess("readonly")
if mibBuilder.loadTexts: majorErrorCountAtt8.setStatus('mandatory')
warningErrorCountAtt9 = MibTableColumn((1, 3, 6, 1, 4, 1, 412, 2, 4, 30, 1, 9), DmiCounter()).setMaxAccess("readonly")
if mibBuilder.loadTexts: warningErrorCountAtt9.setStatus('mandatory')
currentErrorStatusAtt10 = MibTableColumn((1, 3, 6, 1, 4, 1, 412, 2, 4, 30, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("other", 1), ("unknown", 2), ("oK", 3), ("nonCritical", 4), ("critical", 5), ("nonRecoverable", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: currentErrorStatusAtt10.setStatus('mandatory')
devicePredictedFailureStatusAtt11 = MibTableColumn((1, 3, 6, 1, 4, 1, 412, 2, 4, 30, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("other", 1), ("unknown", 2), ("notSupportedByThisDevice", 3), ("noFailurePredictedByTheDevice", 4), ("deviceFailurePredictedByTheDevice", 5), ("mediaFailurePredictedByTheDevice", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: devicePredictedFailureStatusAtt11.setStatus('mandatory')
dmiDynOid386845712 = MibIdentifier((1, 3, 6, 1, 4, 1, 412, 3, 386845712))
dmiDynOid73111109 = MibIdentifier((1, 3, 6, 1, 4, 1, 412, 3, 386845712, 73111109))
dmiDynOid3922453424 = MibIdentifier((1, 3, 6, 1, 4, 1, 412, 3, 386845712, 73111109, 3922453424))
iNTELMIFTOMIBTable = MibTable((1, 3, 6, 1, 4, 1, 412, 3, 386845712, 73111109, 3922453424, 1737102472), )
if mibBuilder.loadTexts: iNTELMIFTOMIBTable.setStatus('mandatory')
iNTELMIFTOMIBEntry = MibTableRow((1, 3, 6, 1, 4, 1, 412, 3, 386845712, 73111109, 3922453424, 1737102472, 1), ).setIndexNames((0, "BASEBRDD-MIB-MIB", "DmiCompId"), (0, "BASEBRDD-MIB-MIB", "DmiGroupId"))
if mibBuilder.loadTexts: iNTELMIFTOMIBEntry.setStatus('mandatory')
dellBaseBoardMIBAtt1 = MibTableColumn((1, 3, 6, 1, 4, 1, 412, 3, 386845712, 73111109, 3922453424, 1737102472, 1, 1), DmiDisplaystring()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dellBaseBoardMIBAtt1.setStatus('mandatory')
mIBOIDAtt2 = MibTableColumn((1, 3, 6, 1, 4, 1, 412, 3, 386845712, 73111109, 3922453424, 1737102472, 1, 2), DmiDisplaystring()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mIBOIDAtt2.setStatus('mandatory')
disableTrapsAtt3 = MibTableColumn((1, 3, 6, 1, 4, 1, 412, 3, 386845712, 73111109, 3922453424, 1737102472, 1, 3), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: disableTrapsAtt3.setStatus('mandatory')
dMTFPowerSupplyTable = MibTable((1, 3, 6, 1, 4, 1, 412, 2, 4, 16), )
if mibBuilder.loadTexts: dMTFPowerSupplyTable.setStatus('mandatory')
dMTFPowerSupplyEntry = MibTableRow((1, 3, 6, 1, 4, 1, 412, 2, 4, 16, 1), ).setIndexNames((0, "BASEBRDD-MIB-MIB", "DmiCompId"), (0, "BASEBRDD-MIB-MIB", "DmiGroupId"), (0, "BASEBRDD-MIB-MIB", "powerSupplyIndexAtt1"))
if mibBuilder.loadTexts: dMTFPowerSupplyEntry.setStatus('mandatory')
dMTFPowerSupplyState = MibTableColumn((1, 3, 6, 1, 4, 1, 412, 2, 4, 16, 1, 0), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("active", 1), ("notInService", 2), ("notReady", 3), ("createAndGo", 4), ("createAndWait", 5), ("destroy", 6)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dMTFPowerSupplyState.setStatus('mandatory')
powerSupplyIndexAtt1 = MibTableColumn((1, 3, 6, 1, 4, 1, 412, 2, 4, 16, 1, 1), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: powerSupplyIndexAtt1.setStatus('mandatory')
fRUGroupIndexAtt2_1 = MibScalar((1, 3, 6, 1, 4, 1, 412, 2, 4, 16, 1, 2), DmiInteger()).setLabel("fRUGroupIndexAtt2-1").setMaxAccess("readonly")
if mibBuilder.loadTexts: fRUGroupIndexAtt2_1.setStatus('mandatory')
operationalGroupIndexAtt3_1 = MibScalar((1, 3, 6, 1, 4, 1, 412, 2, 4, 16, 1, 3), DmiInteger()).setLabel("operationalGroupIndexAtt3-1").setMaxAccess("readonly")
if mibBuilder.loadTexts: operationalGroupIndexAtt3_1.setStatus('mandatory')
powerUnitIndexAtt4 = MibTableColumn((1, 3, 6, 1, 4, 1, 412, 2, 4, 16, 1, 4), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: powerUnitIndexAtt4.setStatus('mandatory')
powerSupplyTypeAtt5 = MibTableColumn((1, 3, 6, 1, 4, 1, 412, 2, 4, 16, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("other", 1), ("unknown", 2), ("linear", 3), ("switching", 4), ("battery", 5), ("uPS", 6), ("converter", 7), ("regulator", 8)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: powerSupplyTypeAtt5.setStatus('mandatory')
inputVoltageCapabilityDescriptionAtt6 = MibTableColumn((1, 3, 6, 1, 4, 1, 412, 2, 4, 16, 1, 6), DmiDisplaystring()).setMaxAccess("readonly")
if mibBuilder.loadTexts: inputVoltageCapabilityDescriptionAtt6.setStatus('mandatory')
range1InputVoltageLowAtt7 = MibTableColumn((1, 3, 6, 1, 4, 1, 412, 2, 4, 16, 1, 7), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: range1InputVoltageLowAtt7.setStatus('mandatory')
range1InputVoltageHighAtt8 = MibTableColumn((1, 3, 6, 1, 4, 1, 412, 2, 4, 16, 1, 8), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: range1InputVoltageHighAtt8.setStatus('mandatory')
range1VoltageProbeIndexAtt9 = MibTableColumn((1, 3, 6, 1, 4, 1, 412, 2, 4, 16, 1, 9), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: range1VoltageProbeIndexAtt9.setStatus('mandatory')
range1ElectricalCurrentProbeIndexAtt10 = MibTableColumn((1, 3, 6, 1, 4, 1, 412, 2, 4, 16, 1, 10), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: range1ElectricalCurrentProbeIndexAtt10.setStatus('mandatory')
range2InputVoltageLowAtt11 = MibTableColumn((1, 3, 6, 1, 4, 1, 412, 2, 4, 16, 1, 11), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: range2InputVoltageLowAtt11.setStatus('mandatory')
range2InputVoltageHighAtt12 = MibTableColumn((1, 3, 6, 1, 4, 1, 412, 2, 4, 16, 1, 12), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: range2InputVoltageHighAtt12.setStatus('mandatory')
range2VoltageProbeIndexAtt13 = MibTableColumn((1, 3, 6, 1, 4, 1, 412, 2, 4, 16, 1, 13), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: range2VoltageProbeIndexAtt13.setStatus('mandatory')
range2CurrentProbeIndexAtt14 = MibTableColumn((1, 3, 6, 1, 4, 1, 412, 2, 4, 16, 1, 14), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: range2CurrentProbeIndexAtt14.setStatus('mandatory')
activeInputVoltageRangeAtt15 = MibTableColumn((1, 3, 6, 1, 4, 1, 412, 2, 4, 16, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("other", 1), ("unknown", 2), ("range1", 3), ("range2", 4), ("both", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: activeInputVoltageRangeAtt15.setStatus('mandatory')
inputVoltageRangeSwitchingAtt16 = MibTableColumn((1, 3, 6, 1, 4, 1, 412, 2, 4, 16, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("other", 1), ("unknown", 2), ("manual", 3), ("autoswitch", 4), ("wideRange", 5), ("notApplicable", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: inputVoltageRangeSwitchingAtt16.setStatus('mandatory')
range1InputFrequencyLowAtt17 = MibTableColumn((1, 3, 6, 1, 4, 1, 412, 2, 4, 16, 1, 17), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: range1InputFrequencyLowAtt17.setStatus('mandatory')
range1InputFrequencyHighAtt18 = MibTableColumn((1, 3, 6, 1, 4, 1, 412, 2, 4, 16, 1, 18), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: range1InputFrequencyHighAtt18.setStatus('mandatory')
range2InputFrequencyLowAtt19 = MibTableColumn((1, 3, 6, 1, 4, 1, 412, 2, 4, 16, 1, 19), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: range2InputFrequencyLowAtt19.setStatus('mandatory')
range2InputFrequencyHighAtt20 = MibTableColumn((1, 3, 6, 1, 4, 1, 412, 2, 4, 16, 1, 20), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: range2InputFrequencyHighAtt20.setStatus('mandatory')
totalOutputPowerAtt21 = MibTableColumn((1, 3, 6, 1, 4, 1, 412, 2, 4, 16, 1, 21), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: totalOutputPowerAtt21.setStatus('mandatory')
dMTFPowerUnitGlobalTableTable = MibTable((1, 3, 6, 1, 4, 1, 412, 2, 4, 66), )
if mibBuilder.loadTexts: dMTFPowerUnitGlobalTableTable.setStatus('mandatory')
dMTFPowerUnitGlobalTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 412, 2, 4, 66, 1), ).setIndexNames((0, "BASEBRDD-MIB-MIB", "DmiCompId"), (0, "BASEBRDD-MIB-MIB", "DmiGroupId"), (0, "BASEBRDD-MIB-MIB", "powerUnitIndexAtt1"))
if mibBuilder.loadTexts: dMTFPowerUnitGlobalTableEntry.setStatus('mandatory')
dMTFPowerUnitGlobalTableState = MibTableColumn((1, 3, 6, 1, 4, 1, 412, 2, 4, 66, 1, 0), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("active", 1), ("notInService", 2), ("notReady", 3), ("createAndGo", 4), ("createAndWait", 5), ("destroy", 6)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dMTFPowerUnitGlobalTableState.setStatus('mandatory')
powerUnitIndexAtt1 = MibTableColumn((1, 3, 6, 1, 4, 1, 412, 2, 4, 66, 1, 1), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: powerUnitIndexAtt1.setStatus('mandatory')
powerUnitRedundancyStatusAtt2 = MibTableColumn((1, 3, 6, 1, 4, 1, 412, 2, 4, 66, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("other", 1), ("unknown", 2), ("notApplicableUnitNotRedundant-1", 3), ("offline", 4), ("fullyRedundant-1", 5), ("degradedRedundancy", 6), ("redundancyLost", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: powerUnitRedundancyStatusAtt2.setStatus('mandatory')
dMTFProcessorTable = MibTable((1, 3, 6, 1, 4, 1, 412, 2, 4, 5), )
if mibBuilder.loadTexts: dMTFProcessorTable.setStatus('mandatory')
dMTFProcessorEntry = MibTableRow((1, 3, 6, 1, 4, 1, 412, 2, 4, 5, 1), ).setIndexNames((0, "BASEBRDD-MIB-MIB", "DmiCompId"), (0, "BASEBRDD-MIB-MIB", "DmiGroupId"), (0, "BASEBRDD-MIB-MIB", "processorIndexAtt1"))
if mibBuilder.loadTexts: dMTFProcessorEntry.setStatus('mandatory')
dMTFProcessorState = MibTableColumn((1, 3, 6, 1, 4, 1, 412, 2, 4, 5, 1, 0), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("active", 1), ("notInService", 2), ("notReady", 3), ("createAndGo", 4), ("createAndWait", 5), ("destroy", 6)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dMTFProcessorState.setStatus('mandatory')
processorIndexAtt1 = MibTableColumn((1, 3, 6, 1, 4, 1, 412, 2, 4, 5, 1, 1), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: processorIndexAtt1.setStatus('mandatory')
processorTypeAtt2 = MibTableColumn((1, 3, 6, 1, 4, 1, 412, 2, 4, 5, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("other", 1), ("unknown", 2), ("centralProcessor", 3), ("mathProcessor", 4), ("dSPProcessor", 5), ("videoProcessor", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: processorTypeAtt2.setStatus('mandatory')
processorFamilyAtt3 = MibTableColumn((1, 3, 6, 1, 4, 1, 412, 2, 4, 5, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 18, 19, 25, 26, 32, 33, 34, 35, 36, 48, 64, 80, 96, 97, 98, 99, 100, 101, 112, 128, 144, 160))).clone(namedValues=NamedValues(("other", 1), ("unknown", 2), ("x8086", 3), ("x80286", 4), ("x80386", 5), ("x80486", 6), ("x8087", 7), ("x80287", 8), ("x80387", 9), ("x80487", 10), ("pentiumFamily", 11), ("pentiumPro", 12), ("pentiumII", 13), ("pentiumMMX", 14), ("celeron", 15), ("xeon", 16), ("m1Family", 18), ("m2Family", 19), ("k5Family", 25), ("k6Family", 26), ("powerPCFamily", 32), ("powerPC601", 33), ("powerPC603", 34), ("powerPC603-1", 35), ("powerPC604", 36), ("alphaFamily", 48), ("mIPSFamily", 64), ("sPARCFamily", 80), ("x68040", 96), ("x68xxxFamily", 97), ("x68000", 98), ("x68010", 99), ("x68020", 100), ("x68030", 101), ("hobbitFamily", 112), ("weitek", 128), ("pARISCFamily", 144), ("v30Family", 160)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: processorFamilyAtt3.setStatus('mandatory')
processorVersionInformationAtt4 = MibTableColumn((1, 3, 6, 1, 4, 1, 412, 2, 4, 5, 1, 4), DmiDisplaystring()).setMaxAccess("readonly")
if mibBuilder.loadTexts: processorVersionInformationAtt4.setStatus('mandatory')
maximumSpeedAtt5 = MibTableColumn((1, 3, 6, 1, 4, 1, 412, 2, 4, 5, 1, 5), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: maximumSpeedAtt5.setStatus('mandatory')
currentSpeedAtt6 = MibTableColumn((1, 3, 6, 1, 4, 1, 412, 2, 4, 5, 1, 6), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: currentSpeedAtt6.setStatus('mandatory')
processorUpgradeAtt7 = MibTableColumn((1, 3, 6, 1, 4, 1, 412, 2, 4, 5, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9))).clone(namedValues=NamedValues(("other", 1), ("unknown", 2), ("daughterBoard", 3), ("zIFSocket", 4), ("replacementPiggyBack", 5), ("none", 6), ("lIFSocket", 7), ("slot1", 8), ("slot2", 9)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: processorUpgradeAtt7.setStatus('mandatory')
fRUGroupIndexAtt8 = MibTableColumn((1, 3, 6, 1, 4, 1, 412, 2, 4, 5, 1, 8), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fRUGroupIndexAtt8.setStatus('mandatory')
operationalGroupIndexAtt9 = MibTableColumn((1, 3, 6, 1, 4, 1, 412, 2, 4, 5, 1, 9), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: operationalGroupIndexAtt9.setStatus('mandatory')
level1CacheIndexAtt10 = MibTableColumn((1, 3, 6, 1, 4, 1, 412, 2, 4, 5, 1, 10), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: level1CacheIndexAtt10.setStatus('mandatory')
level2CacheIndexAtt11 = MibTableColumn((1, 3, 6, 1, 4, 1, 412, 2, 4, 5, 1, 11), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: level2CacheIndexAtt11.setStatus('mandatory')
level3CacheIndexAtt12 = MibTableColumn((1, 3, 6, 1, 4, 1, 412, 2, 4, 5, 1, 12), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: level3CacheIndexAtt12.setStatus('mandatory')
dMTFSerialPortsTable = MibTable((1, 3, 6, 1, 4, 1, 412, 2, 4, 11), )
if mibBuilder.loadTexts: dMTFSerialPortsTable.setStatus('mandatory')
dMTFSerialPortsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 412, 2, 4, 11, 1), ).setIndexNames((0, "BASEBRDD-MIB-MIB", "DmiCompId"), (0, "BASEBRDD-MIB-MIB", "DmiGroupId"), (0, "BASEBRDD-MIB-MIB", "serialPortIndexAtt1"))
if mibBuilder.loadTexts: dMTFSerialPortsEntry.setStatus('mandatory')
dMTFSerialPortsState = MibTableColumn((1, 3, 6, 1, 4, 1, 412, 2, 4, 11, 1, 0), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("active", 1), ("notInService", 2), ("notReady", 3), ("createAndGo", 4), ("createAndWait", 5), ("destroy", 6)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dMTFSerialPortsState.setStatus('mandatory')
serialPortIndexAtt1 = MibTableColumn((1, 3, 6, 1, 4, 1, 412, 2, 4, 11, 1, 1), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: serialPortIndexAtt1.setStatus('mandatory')
serialBaseIOAddressAtt2 = MibTableColumn((1, 3, 6, 1, 4, 1, 412, 2, 4, 11, 1, 2), DmiInteger64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: serialBaseIOAddressAtt2.setStatus('mandatory')
iRQUsedAtt3 = MibTableColumn((1, 3, 6, 1, 4, 1, 412, 2, 4, 11, 1, 3), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: iRQUsedAtt3.setStatus('mandatory')
logicalNameAtt4 = MibTableColumn((1, 3, 6, 1, 4, 1, 412, 2, 4, 11, 1, 4), DmiDisplaystring()).setMaxAccess("readonly")
if mibBuilder.loadTexts: logicalNameAtt4.setStatus('mandatory')
connectorTypeAtt5 = MibTableColumn((1, 3, 6, 1, 4, 1, 412, 2, 4, 11, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 160, 161))).clone(namedValues=NamedValues(("other", 1), ("unknown", 2), ("dB9PinMale", 3), ("dB9PinFemale", 4), ("dB25PinMale", 5), ("dB25PinFemale", 6), ("rJ11", 7), ("rJ45", 8), ("proprietary", 9), ("circularDIN8Male", 10), ("circularDIN8Female", 11), ("miniCentronicsType14", 160), ("miniCentronicsType26", 161)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: connectorTypeAtt5.setStatus('mandatory')
maximumSpeedAtt6 = MibTableColumn((1, 3, 6, 1, 4, 1, 412, 2, 4, 11, 1, 6), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: maximumSpeedAtt6.setStatus('mandatory')
serialPortCapabilitiesAtt7 = MibTableColumn((1, 3, 6, 1, 4, 1, 412, 2, 4, 11, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 160, 161))).clone(namedValues=NamedValues(("other", 1), ("unknown", 2), ("xTATCompatible", 3), ("x16450Compatible", 4), ("x16550Compatible", 5), ("x16550ACompatible", 6), ("x8251Compatible", 160), ("x8251FIFOCompatible", 161)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: serialPortCapabilitiesAtt7.setStatus('mandatory')
operationalGroupIndexAtt8_1 = MibScalar((1, 3, 6, 1, 4, 1, 412, 2, 4, 11, 1, 8), DmiInteger()).setLabel("operationalGroupIndexAtt8-1").setMaxAccess("readonly")
if mibBuilder.loadTexts: operationalGroupIndexAtt8_1.setStatus('mandatory')
serialPortSecuritySettingsAtt9 = MibTableColumn((1, 3, 6, 1, 4, 1, 412, 2, 4, 11, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("other", 1), ("unknown", 2), ("none", 3), ("externalInterfaceLockedOut", 4), ("externalInterfaceEnabled", 5), ("bootBypass", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: serialPortSecuritySettingsAtt9.setStatus('mandatory')
dMTFSystemBIOSTable = MibTable((1, 3, 6, 1, 4, 1, 412, 2, 4, 3), )
if mibBuilder.loadTexts: dMTFSystemBIOSTable.setStatus('mandatory')
dMTFSystemBIOSEntry = MibTableRow((1, 3, 6, 1, 4, 1, 412, 2, 4, 3, 1), ).setIndexNames((0, "BASEBRDD-MIB-MIB", "DmiCompId"), (0, "BASEBRDD-MIB-MIB", "DmiGroupId"), (0, "BASEBRDD-MIB-MIB", "bIOSIndexAtt1"))
if mibBuilder.loadTexts: dMTFSystemBIOSEntry.setStatus('mandatory')
dMTFSystemBIOSState = MibTableColumn((1, 3, 6, 1, 4, 1, 412, 2, 4, 3, 1, 0), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("active", 1), ("notInService", 2), ("notReady", 3), ("createAndGo", 4), ("createAndWait", 5), ("destroy", 6)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dMTFSystemBIOSState.setStatus('mandatory')
bIOSIndexAtt1 = MibTableColumn((1, 3, 6, 1, 4, 1, 412, 2, 4, 3, 1, 1), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bIOSIndexAtt1.setStatus('mandatory')
bIOSManufacturerAtt2 = MibTableColumn((1, 3, 6, 1, 4, 1, 412, 2, 4, 3, 1, 2), DmiDisplaystring()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bIOSManufacturerAtt2.setStatus('mandatory')
bIOSVersionAtt3 = MibTableColumn((1, 3, 6, 1, 4, 1, 412, 2, 4, 3, 1, 3), DmiDisplaystring()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bIOSVersionAtt3.setStatus('mandatory')
bIOSROMSizeAtt4 = MibTableColumn((1, 3, 6, 1, 4, 1, 412, 2, 4, 3, 1, 4), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bIOSROMSizeAtt4.setStatus('mandatory')
bIOSStartingAddressAtt5 = MibTableColumn((1, 3, 6, 1, 4, 1, 412, 2, 4, 3, 1, 5), DmiInteger64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bIOSStartingAddressAtt5.setStatus('mandatory')
bIOSEndingAddressAtt6 = MibTableColumn((1, 3, 6, 1, 4, 1, 412, 2, 4, 3, 1, 6), DmiInteger64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bIOSEndingAddressAtt6.setStatus('mandatory')
bIOSLoaderVersionAtt7 = MibTableColumn((1, 3, 6, 1, 4, 1, 412, 2, 4, 3, 1, 7), DmiDisplaystring()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bIOSLoaderVersionAtt7.setStatus('mandatory')
bIOSReleaseDateAtt8 = MibTableColumn((1, 3, 6, 1, 4, 1, 412, 2, 4, 3, 1, 8), DmiDate()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bIOSReleaseDateAtt8.setStatus('mandatory')
primaryBIOSAtt9 = MibTableColumn((1, 3, 6, 1, 4, 1, 412, 2, 4, 3, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("false", 0), ("true", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: primaryBIOSAtt9.setStatus('mandatory')
dMTFSystemCacheTable = MibTable((1, 3, 6, 1, 4, 1, 412, 2, 4, 9), )
if mibBuilder.loadTexts: dMTFSystemCacheTable.setStatus('mandatory')
dMTFSystemCacheEntry = MibTableRow((1, 3, 6, 1, 4, 1, 412, 2, 4, 9, 1), ).setIndexNames((0, "BASEBRDD-MIB-MIB", "DmiCompId"), (0, "BASEBRDD-MIB-MIB", "DmiGroupId"), (0, "BASEBRDD-MIB-MIB", "systemCacheIndexAtt1"))
if mibBuilder.loadTexts: dMTFSystemCacheEntry.setStatus('mandatory')
dMTFSystemCacheState = MibTableColumn((1, 3, 6, 1, 4, 1, 412, 2, 4, 9, 1, 0), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("active", 1), ("notInService", 2), ("notReady", 3), ("createAndGo", 4), ("createAndWait", 5), ("destroy", 6)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dMTFSystemCacheState.setStatus('mandatory')
systemCacheIndexAtt1 = MibTableColumn((1, 3, 6, 1, 4, 1, 412, 2, 4, 9, 1, 1), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: systemCacheIndexAtt1.setStatus('mandatory')
systemCacheLevelAtt2 = MibTableColumn((1, 3, 6, 1, 4, 1, 412, 2, 4, 9, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("other", 1), ("unknown", 2), ("primary", 3), ("secondary", 4), ("tertiary", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: systemCacheLevelAtt2.setStatus('mandatory')
systemCacheSpeedAtt3 = MibTableColumn((1, 3, 6, 1, 4, 1, 412, 2, 4, 9, 1, 3), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: systemCacheSpeedAtt3.setStatus('mandatory')
systemCacheSizeAtt4 = MibTableColumn((1, 3, 6, 1, 4, 1, 412, 2, 4, 9, 1, 4), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: systemCacheSizeAtt4.setStatus('mandatory')
systemCacheWritePolicyAtt5 = MibTableColumn((1, 3, 6, 1, 4, 1, 412, 2, 4, 9, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("other", 1), ("unknown", 2), ("writeBack", 3), ("writeThrough", 4), ("variesWithAddress", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: systemCacheWritePolicyAtt5.setStatus('mandatory')
systemCacheErrorCorrectionAtt6 = MibTableColumn((1, 3, 6, 1, 4, 1, 412, 2, 4, 9, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("other", 1), ("unknown", 2), ("none", 3), ("parity", 4), ("singleBitECC", 5), ("multiBitECC", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: systemCacheErrorCorrectionAtt6.setStatus('mandatory')
fRUGroupIndexAtt7_1 = MibScalar((1, 3, 6, 1, 4, 1, 412, 2, 4, 9, 1, 7), DmiInteger()).setLabel("fRUGroupIndexAtt7-1").setMaxAccess("readonly")
if mibBuilder.loadTexts: fRUGroupIndexAtt7_1.setStatus('mandatory')
operationalGroupIndexAtt8_2 = MibScalar((1, 3, 6, 1, 4, 1, 412, 2, 4, 9, 1, 8), DmiInteger()).setLabel("operationalGroupIndexAtt8-2").setMaxAccess("readonly")
if mibBuilder.loadTexts: operationalGroupIndexAtt8_2.setStatus('mandatory')
systemCacheTypeAtt9 = MibTableColumn((1, 3, 6, 1, 4, 1, 412, 2, 4, 9, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("other", 1), ("unknown", 2), ("instruction", 3), ("data", 4), ("unified", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: systemCacheTypeAtt9.setStatus('mandatory')
lineSizeAtt10 = MibTableColumn((1, 3, 6, 1, 4, 1, 412, 2, 4, 9, 1, 10), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lineSizeAtt10.setStatus('mandatory')
volatilityAtt11 = MibTableColumn((1, 3, 6, 1, 4, 1, 412, 2, 4, 9, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("other", 1), ("unknown", 2), ("temporaryVolatile", 3), ("volatile", 4), ("permanentNonVolatile", 5), ("temporaryNonVolatile", 6), ("uPSNonVolatile", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: volatilityAtt11.setStatus('mandatory')
replacementPolicyAtt12 = MibTableColumn((1, 3, 6, 1, 4, 1, 412, 2, 4, 9, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("other", 1), ("unknown", 2), ("leastRecentlyUsedLRU", 3), ("firstInFirstOutFIFO", 4), ("lastInFirstOutLIFO", 5), ("leastFrequentlyUsedLFU", 6), ("mostFrequentlyUsedMFU", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: replacementPolicyAtt12.setStatus('mandatory')
readPolicyAtt13 = MibTableColumn((1, 3, 6, 1, 4, 1, 412, 2, 4, 9, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("other", 1), ("unknown", 2), ("read", 3), ("readAhead", 4), ("readAndReadAhead", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: readPolicyAtt13.setStatus('mandatory')
flushTimerAtt14 = MibTableColumn((1, 3, 6, 1, 4, 1, 412, 2, 4, 9, 1, 14), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: flushTimerAtt14.setStatus('mandatory')
associativityAtt15 = MibTableColumn((1, 3, 6, 1, 4, 1, 412, 2, 4, 9, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("other", 1), ("unknown", 2), ("directMapped", 3), ("x2WaySetAssociative", 4), ("x4WaySetAssociative", 5), ("fullyAssociative", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: associativityAtt15.setStatus('mandatory')
dMTFSystemHardwareSecurityTable = MibTable((1, 3, 6, 1, 4, 1, 412, 2, 4, 49), )
if mibBuilder.loadTexts: dMTFSystemHardwareSecurityTable.setStatus('mandatory')
dMTFSystemHardwareSecurityEntry = MibTableRow((1, 3, 6, 1, 4, 1, 412, 2, 4, 49, 1), ).setIndexNames((0, "BASEBRDD-MIB-MIB", "DmiCompId"), (0, "BASEBRDD-MIB-MIB", "DmiGroupId"))
if mibBuilder.loadTexts: dMTFSystemHardwareSecurityEntry.setStatus('mandatory')
powerOnPasswordStatusAtt1 = MibTableColumn((1, 3, 6, 1, 4, 1, 412, 2, 4, 49, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("other", 1), ("unknown", 2), ("disabled", 3), ("enabled", 4), ("notImplemented", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: powerOnPasswordStatusAtt1.setStatus('mandatory')
keyboardPasswordStatusAtt2 = MibTableColumn((1, 3, 6, 1, 4, 1, 412, 2, 4, 49, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("other", 1), ("unknown", 2), ("disabled", 3), ("enabled", 4), ("notImplemented", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: keyboardPasswordStatusAtt2.setStatus('mandatory')
administratorPasswordStatisAtt3 = MibTableColumn((1, 3, 6, 1, 4, 1, 412, 2, 4, 49, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("other", 1), ("unknown", 2), ("disabled", 3), ("enabled", 4), ("notImplemented", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: administratorPasswordStatisAtt3.setStatus('mandatory')
frontPanelResetStatusAtt4 = MibTableColumn((1, 3, 6, 1, 4, 1, 412, 2, 4, 49, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("other", 1), ("unknown", 2), ("disabled", 3), ("enabled", 4), ("notImplemented", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: frontPanelResetStatusAtt4.setStatus('mandatory')
dMTFSystemPowerControlsTable = MibTable((1, 3, 6, 1, 4, 1, 412, 2, 4, 51), )
if mibBuilder.loadTexts: dMTFSystemPowerControlsTable.setStatus('mandatory')
dMTFSystemPowerControlsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 412, 2, 4, 51, 1), ).setIndexNames((0, "BASEBRDD-MIB-MIB", "DmiCompId"), (0, "BASEBRDD-MIB-MIB", "DmiGroupId"))
if mibBuilder.loadTexts: dMTFSystemPowerControlsEntry.setStatus('mandatory')
powerControlRequestAtt1 = MibTableColumn((1, 3, 6, 1, 4, 1, 412, 2, 4, 51, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("other", 1), ("unknown", 2), ("powerOff", 3), ("powerOffThenOnAgain", 4), ("enterStandbyMode", 5), ("enterSuspendMode", 6), ("enterHibernationMode", 7)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: powerControlRequestAtt1.setStatus('mandatory')
timedPowerOnAvailableAtt2 = MibTableColumn((1, 3, 6, 1, 4, 1, 412, 2, 4, 51, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("false", 0), ("true", 1), ("unknown", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: timedPowerOnAvailableAtt2.setStatus('mandatory')
timeToNextScheduledPowerOnAtt3 = MibTableColumn((1, 3, 6, 1, 4, 1, 412, 2, 4, 51, 1, 3), DmiInteger()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: timeToNextScheduledPowerOnAtt3.setStatus('mandatory')
dMTFSystemResourceDMAInfoTable = MibTable((1, 3, 6, 1, 4, 1, 412, 2, 4, 42), )
if mibBuilder.loadTexts: dMTFSystemResourceDMAInfoTable.setStatus('mandatory')
dMTFSystemResourceDMAInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 412, 2, 4, 42, 1), ).setIndexNames((0, "BASEBRDD-MIB-MIB", "DmiCompId"), (0, "BASEBRDD-MIB-MIB", "DmiGroupId"), (0, "BASEBRDD-MIB-MIB", "systemResourceDMAInfoIndexAtt1"))
if mibBuilder.loadTexts: dMTFSystemResourceDMAInfoEntry.setStatus('mandatory')
dMTFSystemResourceDMAInfoState = MibTableColumn((1, 3, 6, 1, 4, 1, 412, 2, 4, 42, 1, 0), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("active", 1), ("notInService", 2), ("notReady", 3), ("createAndGo", 4), ("createAndWait", 5), ("destroy", 6)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dMTFSystemResourceDMAInfoState.setStatus('mandatory')
systemResourceDMAInfoIndexAtt1 = MibTableColumn((1, 3, 6, 1, 4, 1, 412, 2, 4, 42, 1, 1), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: systemResourceDMAInfoIndexAtt1.setStatus('mandatory')
dMATransferWidthAtt2 = MibTableColumn((1, 3, 6, 1, 4, 1, 412, 2, 4, 42, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("other", 1), ("unknown", 2), ("x8Bit", 3), ("x8And16Bit", 4), ("x16Bit", 5), ("x32Bit", 6), ("x64Bit", 7), ("x128Bit", 8)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dMATransferWidthAtt2.setStatus('mandatory')
dMAAddressSizeAtt3 = MibTableColumn((1, 3, 6, 1, 4, 1, 412, 2, 4, 42, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 5, 6, 7))).clone(namedValues=NamedValues(("other", 1), ("unknown", 2), ("x8Bit", 3), ("x16Bit", 5), ("x32Bit", 6), ("x64Bit", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dMAAddressSizeAtt3.setStatus('mandatory')
dMAMaximumTransferSizeAtt4 = MibTableColumn((1, 3, 6, 1, 4, 1, 412, 2, 4, 42, 1, 4), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dMAMaximumTransferSizeAtt4.setStatus('mandatory')
dMATransferPreferenceAtt5 = MibTableColumn((1, 3, 6, 1, 4, 1, 412, 2, 4, 42, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("other", 1), ("unknown", 2), ("x8Bit", 3), ("x8And16Bit", 4), ("x16Bit", 5), ("x32Bit", 6), ("x64Bit", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dMATransferPreferenceAtt5.setStatus('mandatory')
busMasterAtt6 = MibTableColumn((1, 3, 6, 1, 4, 1, 412, 2, 4, 42, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("other", 1), ("unknown", 2), ("logicalDeviceIsNotABusMaster", 3), ("logicalDeviceIsABusMaster", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: busMasterAtt6.setStatus('mandatory')
byteModeAtt7 = MibTableColumn((1, 3, 6, 1, 4, 1, 412, 2, 4, 42, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("other", 1), ("unknown", 2), ("dMAMayNotExecuteInCountByByteMode", 3), ("dMAMayExecuteInCountByByteMode", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: byteModeAtt7.setStatus('mandatory')
wordModeAtt8 = MibTableColumn((1, 3, 6, 1, 4, 1, 412, 2, 4, 42, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("other", 1), ("unknown", 2), ("dMAMayNotExecuteInCountByWordMode", 3), ("dMAMayExecuteInCountByWordMode", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wordModeAtt8.setStatus('mandatory')
channelTimingAtt9 = MibTableColumn((1, 3, 6, 1, 4, 1, 412, 2, 4, 42, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("other", 1), ("unknown", 2), ("iSACompatible", 3), ("typeA", 4), ("typeB", 5), ("typeF", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: channelTimingAtt9.setStatus('mandatory')
typeCTimingAtt10 = MibTableColumn((1, 3, 6, 1, 4, 1, 412, 2, 4, 42, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("other", 1), ("unknown", 2), ("iSACompatible", 3), ("cTypeTimingIsNotSupported", 4), ("cTypeTimingIsSupported", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: typeCTimingAtt10.setStatus('mandatory')
dMTFSystemResourceDeviceInfoTable = MibTable((1, 3, 6, 1, 4, 1, 412, 2, 4, 38), )
if mibBuilder.loadTexts: dMTFSystemResourceDeviceInfoTable.setStatus('mandatory')
dMTFSystemResourceDeviceInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 412, 2, 4, 38, 1), ).setIndexNames((0, "BASEBRDD-MIB-MIB", "DmiCompId"), (0, "BASEBRDD-MIB-MIB", "DmiGroupId"), (0, "BASEBRDD-MIB-MIB", "resourceUserAtt1"))
if mibBuilder.loadTexts: dMTFSystemResourceDeviceInfoEntry.setStatus('mandatory')
dMTFSystemResourceDeviceInfoState = MibTableColumn((1, 3, 6, 1, 4, 1, 412, 2, 4, 38, 1, 0), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("active", 1), ("notInService", 2), ("notReady", 3), ("createAndGo", 4), ("createAndWait", 5), ("destroy", 6)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dMTFSystemResourceDeviceInfoState.setStatus('mandatory')
resourceUserAtt1 = MibTableColumn((1, 3, 6, 1, 4, 1, 412, 2, 4, 38, 1, 1), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: resourceUserAtt1.setStatus('mandatory')
deviceIDAtt2 = MibTableColumn((1, 3, 6, 1, 4, 1, 412, 2, 4, 38, 1, 2), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deviceIDAtt2.setStatus('mandatory')
deviceSerialNumberAtt3 = MibTableColumn((1, 3, 6, 1, 4, 1, 412, 2, 4, 38, 1, 3), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deviceSerialNumberAtt3.setStatus('mandatory')
logicalDeviceIDClassCodeAtt4 = MibTableColumn((1, 3, 6, 1, 4, 1, 412, 2, 4, 38, 1, 4), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: logicalDeviceIDClassCodeAtt4.setStatus('mandatory')
deviceFlagsAtt5 = MibTableColumn((1, 3, 6, 1, 4, 1, 412, 2, 4, 38, 1, 5), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deviceFlagsAtt5.setStatus('mandatory')
deviceNumberAtt6 = MibTableColumn((1, 3, 6, 1, 4, 1, 412, 2, 4, 38, 1, 6), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deviceNumberAtt6.setStatus('mandatory')
functionNumberAtt7 = MibTableColumn((1, 3, 6, 1, 4, 1, 412, 2, 4, 38, 1, 7), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: functionNumberAtt7.setStatus('mandatory')
busTypeAtt8 = MibTableColumn((1, 3, 6, 1, 4, 1, 412, 2, 4, 38, 1, 8), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: busTypeAtt8.setStatus('mandatory')
cMReservedAtt9 = MibTableColumn((1, 3, 6, 1, 4, 1, 412, 2, 4, 38, 1, 9), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cMReservedAtt9.setStatus('mandatory')
dMTFSystemResourceIOInfoTable = MibTable((1, 3, 6, 1, 4, 1, 412, 2, 4, 40), )
if mibBuilder.loadTexts: dMTFSystemResourceIOInfoTable.setStatus('mandatory')
dMTFSystemResourceIOInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 412, 2, 4, 40, 1), ).setIndexNames((0, "BASEBRDD-MIB-MIB", "DmiCompId"), (0, "BASEBRDD-MIB-MIB", "DmiGroupId"), (0, "BASEBRDD-MIB-MIB", "systemResourceIOInfoIndexAtt1"))
if mibBuilder.loadTexts: dMTFSystemResourceIOInfoEntry.setStatus('mandatory')
dMTFSystemResourceIOInfoState = MibTableColumn((1, 3, 6, 1, 4, 1, 412, 2, 4, 40, 1, 0), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("active", 1), ("notInService", 2), ("notReady", 3), ("createAndGo", 4), ("createAndWait", 5), ("destroy", 6)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dMTFSystemResourceIOInfoState.setStatus('mandatory')
systemResourceIOInfoIndexAtt1 = MibTableColumn((1, 3, 6, 1, 4, 1, 412, 2, 4, 40, 1, 1), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: systemResourceIOInfoIndexAtt1.setStatus('mandatory')
iODecodeAtt2 = MibTableColumn((1, 3, 6, 1, 4, 1, 412, 2, 4, 40, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("other", 1), ("unknown", 2), ("x10Bits", 3), ("x16Bits", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: iODecodeAtt2.setStatus('mandatory')
dMTFSystemResourceIRQInfoTable = MibTable((1, 3, 6, 1, 4, 1, 412, 2, 4, 41), )
if mibBuilder.loadTexts: dMTFSystemResourceIRQInfoTable.setStatus('mandatory')
dMTFSystemResourceIRQInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 412, 2, 4, 41, 1), ).setIndexNames((0, "BASEBRDD-MIB-MIB", "DmiCompId"), (0, "BASEBRDD-MIB-MIB", "DmiGroupId"), (0, "BASEBRDD-MIB-MIB", "systemResourceIRQInfoIndexAtt1"))
if mibBuilder.loadTexts: dMTFSystemResourceIRQInfoEntry.setStatus('mandatory')
dMTFSystemResourceIRQInfoState = MibTableColumn((1, 3, 6, 1, 4, 1, 412, 2, 4, 41, 1, 0), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("active", 1), ("notInService", 2), ("notReady", 3), ("createAndGo", 4), ("createAndWait", 5), ("destroy", 6)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dMTFSystemResourceIRQInfoState.setStatus('mandatory')
systemResourceIRQInfoIndexAtt1 = MibTableColumn((1, 3, 6, 1, 4, 1, 412, 2, 4, 41, 1, 1), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: systemResourceIRQInfoIndexAtt1.setStatus('mandatory')
triggerTypeAtt2 = MibTableColumn((1, 3, 6, 1, 4, 1, 412, 2, 4, 41, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("other", 1), ("unknown", 2), ("level", 3), ("edge", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: triggerTypeAtt2.setStatus('mandatory')
triggerLevelAtt3 = MibTableColumn((1, 3, 6, 1, 4, 1, 412, 2, 4, 41, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("other", 1), ("unknown", 2), ("activeLow", 3), ("activeHigh", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: triggerLevelAtt3.setStatus('mandatory')
dMTFSystemResourceMemoryInfoTable = MibTable((1, 3, 6, 1, 4, 1, 412, 2, 4, 39), )
if mibBuilder.loadTexts: dMTFSystemResourceMemoryInfoTable.setStatus('mandatory')
dMTFSystemResourceMemoryInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 412, 2, 4, 39, 1), ).setIndexNames((0, "BASEBRDD-MIB-MIB", "DmiCompId"), (0, "BASEBRDD-MIB-MIB", "DmiGroupId"), (0, "BASEBRDD-MIB-MIB", "systemResourceMemoryInfoIndexAtt1"))
if mibBuilder.loadTexts: dMTFSystemResourceMemoryInfoEntry.setStatus('mandatory')
dMTFSystemResourceMemoryInfoState = MibTableColumn((1, 3, 6, 1, 4, 1, 412, 2, 4, 39, 1, 0), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("active", 1), ("notInService", 2), ("notReady", 3), ("createAndGo", 4), ("createAndWait", 5), ("destroy", 6)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dMTFSystemResourceMemoryInfoState.setStatus('mandatory')
systemResourceMemoryInfoIndexAtt1 = MibTableColumn((1, 3, 6, 1, 4, 1, 412, 2, 4, 39, 1, 1), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: systemResourceMemoryInfoIndexAtt1.setStatus('mandatory')
iSAPCMCIARangeDescriptorAtt2 = MibTableColumn((1, 3, 6, 1, 4, 1, 412, 2, 4, 39, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("other", 1), ("unknown", 2), ("x8BitMemoryOnly", 3), ("x16BitMemoryOnly", 4), ("x8And16BitMemorySupported", 5), ("x32BitMemoryOnly", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: iSAPCMCIARangeDescriptorAtt2.setStatus('mandatory')
eISARangeDescriptorAtt3 = MibTableColumn((1, 3, 6, 1, 4, 1, 412, 2, 4, 39, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("other", 1), ("unknown", 2), ("x8BitMemoryOnly", 3), ("x16BitMemoryOnly", 4), ("x8And16BitMemorySupported", 5), ("x32BitMemoryOnly", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: eISARangeDescriptorAtt3.setStatus('mandatory')
decodeSupportAtt4 = MibTableColumn((1, 3, 6, 1, 4, 1, 412, 2, 4, 39, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("other", 1), ("unknown", 2), ("decodeSupportsHighAddress", 3), ("decodeSupportsRangeLength", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: decodeSupportAtt4.setStatus('mandatory')
cacheableAtt5 = MibTableColumn((1, 3, 6, 1, 4, 1, 412, 2, 4, 39, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("false", 0), ("true", 1), ("unknown", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cacheableAtt5.setStatus('mandatory')
cacheTypeAtt6 = MibTableColumn((1, 3, 6, 1, 4, 1, 412, 2, 4, 39, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("other", 1), ("unknown", 2), ("writeBack-1", 3), ("writeThrough-1", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cacheTypeAtt6.setStatus('mandatory')
readWriteAtt7 = MibTableColumn((1, 3, 6, 1, 4, 1, 412, 2, 4, 39, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("other", 1), ("unknown", 2), ("rOMReadOnly", 3), ("rAMReadwrite", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: readWriteAtt7.setStatus('mandatory')
dMTFSystemResources2Table = MibTable((1, 3, 6, 1, 4, 1, 412, 2, 4, 37), )
if mibBuilder.loadTexts: dMTFSystemResources2Table.setStatus('mandatory')
dMTFSystemResources2Entry = MibTableRow((1, 3, 6, 1, 4, 1, 412, 2, 4, 37, 1), ).setIndexNames((0, "BASEBRDD-MIB-MIB", "DmiCompId"), (0, "BASEBRDD-MIB-MIB", "DmiGroupId"), (0, "BASEBRDD-MIB-MIB", "systemResourcesIndexAtt1"))
if mibBuilder.loadTexts: dMTFSystemResources2Entry.setStatus('mandatory')
dMTFSystemResources2State = MibTableColumn((1, 3, 6, 1, 4, 1, 412, 2, 4, 37, 1, 0), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("active", 1), ("notInService", 2), ("notReady", 3), ("createAndGo", 4), ("createAndWait", 5), ("destroy", 6)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dMTFSystemResources2State.setStatus('mandatory')
systemResourcesIndexAtt1 = MibTableColumn((1, 3, 6, 1, 4, 1, 412, 2, 4, 37, 1, 1), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: systemResourcesIndexAtt1.setStatus('mandatory')
resourceUserAtt2 = MibTableColumn((1, 3, 6, 1, 4, 1, 412, 2, 4, 37, 1, 2), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: resourceUserAtt2.setStatus('mandatory')
resourceSetAtt3 = MibTableColumn((1, 3, 6, 1, 4, 1, 412, 2, 4, 37, 1, 3), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: resourceSetAtt3.setStatus('mandatory')
resourceAssignmentAtt4 = MibTableColumn((1, 3, 6, 1, 4, 1, 412, 2, 4, 37, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("other", 1), ("unknown", 2), ("allocated", 3), ("assignable", 4), ("temporaryAssignment", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: resourceAssignmentAtt4.setStatus('mandatory')
resourceTypeAtt5 = MibTableColumn((1, 3, 6, 1, 4, 1, 412, 2, 4, 37, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("other", 1), ("unknown", 2), ("memory", 3), ("iO", 4), ("iRQ", 5), ("dMA", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: resourceTypeAtt5.setStatus('mandatory')
resourceNumberAtt6 = MibTableColumn((1, 3, 6, 1, 4, 1, 412, 2, 4, 37, 1, 6), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: resourceNumberAtt6.setStatus('mandatory')
resourceInfoIDAtt7 = MibTableColumn((1, 3, 6, 1, 4, 1, 412, 2, 4, 37, 1, 7), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: resourceInfoIDAtt7.setStatus('mandatory')
startAddressAtt8 = MibTableColumn((1, 3, 6, 1, 4, 1, 412, 2, 4, 37, 1, 8), DmiInteger64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: startAddressAtt8.setStatus('mandatory')
endAddressAtt9 = MibTableColumn((1, 3, 6, 1, 4, 1, 412, 2, 4, 37, 1, 9), DmiInteger64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: endAddressAtt9.setStatus('mandatory')
resourceSizeAtt10 = MibTableColumn((1, 3, 6, 1, 4, 1, 412, 2, 4, 37, 1, 10), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: resourceSizeAtt10.setStatus('mandatory')
baseAlignmentAtt11 = MibTableColumn((1, 3, 6, 1, 4, 1, 412, 2, 4, 37, 1, 11), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: baseAlignmentAtt11.setStatus('mandatory')
shareableAtt12 = MibTableColumn((1, 3, 6, 1, 4, 1, 412, 2, 4, 37, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("false", 0), ("true", 1), ("unknown", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: shareableAtt12.setStatus('mandatory')
sharedAtt13 = MibTableColumn((1, 3, 6, 1, 4, 1, 412, 2, 4, 37, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("false", 0), ("true", 1), ("unknown", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sharedAtt13.setStatus('mandatory')
dMTFSystemSlotsTable = MibTable((1, 3, 6, 1, 4, 1, 412, 2, 4, 18), )
if mibBuilder.loadTexts: dMTFSystemSlotsTable.setStatus('mandatory')
dMTFSystemSlotsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 412, 2, 4, 18, 1), ).setIndexNames((0, "BASEBRDD-MIB-MIB", "DmiCompId"), (0, "BASEBRDD-MIB-MIB", "DmiGroupId"), (0, "BASEBRDD-MIB-MIB", "slotIndexAtt1"))
if mibBuilder.loadTexts: dMTFSystemSlotsEntry.setStatus('mandatory')
dMTFSystemSlotsState = MibTableColumn((1, 3, 6, 1, 4, 1, 412, 2, 4, 18, 1, 0), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("active", 1), ("notInService", 2), ("notReady", 3), ("createAndGo", 4), ("createAndWait", 5), ("destroy", 6)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dMTFSystemSlotsState.setStatus('mandatory')
slotIndexAtt1 = MibTableColumn((1, 3, 6, 1, 4, 1, 412, 2, 4, 18, 1, 1), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slotIndexAtt1.setStatus('mandatory')
slotTypeAtt2 = MibTableColumn((1, 3, 6, 1, 4, 1, 412, 2, 4, 18, 1, 2), DmiInteger64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slotTypeAtt2.setStatus('mandatory')
slotWidthAtt3 = MibTableColumn((1, 3, 6, 1, 4, 1, 412, 2, 4, 18, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("other", 1), ("unknown", 2), ("x8BitCard", 3), ("x16BitCard", 4), ("x32BitCard", 5), ("x64BitCard", 6), ("x128BitCard", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slotWidthAtt3.setStatus('mandatory')
currentUsageAtt4 = MibTableColumn((1, 3, 6, 1, 4, 1, 412, 2, 4, 18, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("other", 1), ("unknown", 2), ("available", 3), ("inUse", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: currentUsageAtt4.setStatus('mandatory')
slotDescriptionAtt5 = MibTableColumn((1, 3, 6, 1, 4, 1, 412, 2, 4, 18, 1, 5), DmiDisplaystring()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slotDescriptionAtt5.setStatus('mandatory')
slotCategoryAtt6 = MibTableColumn((1, 3, 6, 1, 4, 1, 412, 2, 4, 18, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("other", 1), ("unknown", 2), ("busConnector", 3), ("pCMCIASlot", 4), ("motherboard", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slotCategoryAtt6.setStatus('mandatory')
virtualSlotAtt7 = MibTableColumn((1, 3, 6, 1, 4, 1, 412, 2, 4, 18, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("false", 0), ("true", 1), ("unknown", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: virtualSlotAtt7.setStatus('mandatory')
resourceUserIDAtt8 = MibTableColumn((1, 3, 6, 1, 4, 1, 412, 2, 4, 18, 1, 8), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: resourceUserIDAtt8.setStatus('mandatory')
dMTFTemperatureProbeTable = MibTable((1, 3, 6, 1, 4, 1, 412, 2, 4, 54), )
if mibBuilder.loadTexts: dMTFTemperatureProbeTable.setStatus('mandatory')
dMTFTemperatureProbeEntry = MibTableRow((1, 3, 6, 1, 4, 1, 412, 2, 4, 54, 1), ).setIndexNames((0, "BASEBRDD-MIB-MIB", "DmiCompId"), (0, "BASEBRDD-MIB-MIB", "DmiGroupId"), (0, "BASEBRDD-MIB-MIB", "temperatureProbeTableIndexAtt1"))
if mibBuilder.loadTexts: dMTFTemperatureProbeEntry.setStatus('mandatory')
dMTFTemperatureProbeState = MibTableColumn((1, 3, 6, 1, 4, 1, 412, 2, 4, 54, 1, 0), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("active", 1), ("notInService", 2), ("notReady", 3), ("createAndGo", 4), ("createAndWait", 5), ("destroy", 6)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dMTFTemperatureProbeState.setStatus('mandatory')
temperatureProbeTableIndexAtt1 = MibTableColumn((1, 3, 6, 1, 4, 1, 412, 2, 4, 54, 1, 1), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: temperatureProbeTableIndexAtt1.setStatus('mandatory')
temperatureProbeLocationAtt2 = MibTableColumn((1, 3, 6, 1, 4, 1, 412, 2, 4, 54, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11))).clone(namedValues=NamedValues(("other", 1), ("unknown", 2), ("processor", 3), ("disk", 4), ("peripheralBay", 5), ("sMBMaster", 6), ("motherboard", 7), ("memoryModule", 8), ("processorModule", 9), ("powerUnit", 10), ("addInCard", 11)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: temperatureProbeLocationAtt2.setStatus('mandatory')
temperatureProbeDescriptionAtt3 = MibTableColumn((1, 3, 6, 1, 4, 1, 412, 2, 4, 54, 1, 3), DmiDisplaystring()).setMaxAccess("readonly")
if mibBuilder.loadTexts: temperatureProbeDescriptionAtt3.setStatus('mandatory')
temperatureStatusAtt4 = MibTableColumn((1, 3, 6, 1, 4, 1, 412, 2, 4, 54, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("other", 1), ("unknown", 2), ("oK", 3), ("nonCritical", 4), ("critical", 5), ("nonRecoverable", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: temperatureStatusAtt4.setStatus('mandatory')
temperatureProbeTemperatureReadingAtt5 = MibTableColumn((1, 3, 6, 1, 4, 1, 412, 2, 4, 54, 1, 5), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: temperatureProbeTemperatureReadingAtt5.setStatus('mandatory')
monitoredTemperatureNominalReadingAtt6 = MibTableColumn((1, 3, 6, 1, 4, 1, 412, 2, 4, 54, 1, 6), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: monitoredTemperatureNominalReadingAtt6.setStatus('mandatory')
monitoredTemperatureNormalMaximumAtt7 = MibTableColumn((1, 3, 6, 1, 4, 1, 412, 2, 4, 54, 1, 7), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: monitoredTemperatureNormalMaximumAtt7.setStatus('mandatory')
monitoredTemperatureNormalMinimumAtt8 = MibTableColumn((1, 3, 6, 1, 4, 1, 412, 2, 4, 54, 1, 8), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: monitoredTemperatureNormalMinimumAtt8.setStatus('mandatory')
temperatureProbeMaximumAtt9 = MibTableColumn((1, 3, 6, 1, 4, 1, 412, 2, 4, 54, 1, 9), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: temperatureProbeMaximumAtt9.setStatus('mandatory')
temperatureProbeMinimumAtt10 = MibTableColumn((1, 3, 6, 1, 4, 1, 412, 2, 4, 54, 1, 10), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: temperatureProbeMinimumAtt10.setStatus('mandatory')
temperatureReadingLowerThresholdNonCriticalAtt11 = MibTableColumn((1, 3, 6, 1, 4, 1, 412, 2, 4, 54, 1, 11), DmiInteger()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: temperatureReadingLowerThresholdNonCriticalAtt11.setStatus('mandatory')
temperatureReadingUpperThresholdNonCriticalAtt12 = MibTableColumn((1, 3, 6, 1, 4, 1, 412, 2, 4, 54, 1, 12), DmiInteger()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: temperatureReadingUpperThresholdNonCriticalAtt12.setStatus('mandatory')
temperatureReadingLowerThresholdCriticalAtt13 = MibTableColumn((1, 3, 6, 1, 4, 1, 412, 2, 4, 54, 1, 13), DmiInteger()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: temperatureReadingLowerThresholdCriticalAtt13.setStatus('mandatory')
temperatureReadingUpperThresholdCriticalAtt14 = MibTableColumn((1, 3, 6, 1, 4, 1, 412, 2, 4, 54, 1, 14), DmiInteger()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: temperatureReadingUpperThresholdCriticalAtt14.setStatus('mandatory')
temperatureReadingLowerThresholdNonRecoverableAtt15 = MibTableColumn((1, 3, 6, 1, 4, 1, 412, 2, 4, 54, 1, 15), DmiInteger()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: temperatureReadingLowerThresholdNonRecoverableAtt15.setStatus('mandatory')
temperatureReadingUpperThresholdNonRecoverableAtt16 = MibTableColumn((1, 3, 6, 1, 4, 1, 412, 2, 4, 54, 1, 16), DmiInteger()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: temperatureReadingUpperThresholdNonRecoverableAtt16.setStatus('mandatory')
temperatureProbeResolutionAtt17 = MibTableColumn((1, 3, 6, 1, 4, 1, 412, 2, 4, 54, 1, 17), DmiInteger()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: temperatureProbeResolutionAtt17.setStatus('mandatory')
temperatureProbeToleranceAtt18 = MibTableColumn((1, 3, 6, 1, 4, 1, 412, 2, 4, 54, 1, 18), DmiInteger()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: temperatureProbeToleranceAtt18.setStatus('mandatory')
temperatureProbeAccuracyAtt19 = MibTableColumn((1, 3, 6, 1, 4, 1, 412, 2, 4, 54, 1, 19), DmiInteger()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: temperatureProbeAccuracyAtt19.setStatus('mandatory')
fRUGroupIndexAtt20_1 = MibScalar((1, 3, 6, 1, 4, 1, 412, 2, 4, 54, 1, 20), DmiInteger()).setLabel("fRUGroupIndexAtt20-1").setMaxAccess("readonly")
if mibBuilder.loadTexts: fRUGroupIndexAtt20_1.setStatus('mandatory')
operationalGroupIndexAtt21_1 = MibScalar((1, 3, 6, 1, 4, 1, 412, 2, 4, 54, 1, 21), DmiInteger()).setLabel("operationalGroupIndexAtt21-1").setMaxAccess("readonly")
if mibBuilder.loadTexts: operationalGroupIndexAtt21_1.setStatus('mandatory')
dMTFVoltageProbeTable = MibTable((1, 3, 6, 1, 4, 1, 412, 2, 4, 53), )
if mibBuilder.loadTexts: dMTFVoltageProbeTable.setStatus('mandatory')
dMTFVoltageProbeEntry = MibTableRow((1, 3, 6, 1, 4, 1, 412, 2, 4, 53, 1), ).setIndexNames((0, "BASEBRDD-MIB-MIB", "DmiCompId"), (0, "BASEBRDD-MIB-MIB", "DmiGroupId"), (0, "BASEBRDD-MIB-MIB", "voltageProbeIndexAtt1"))
if mibBuilder.loadTexts: dMTFVoltageProbeEntry.setStatus('mandatory')
dMTFVoltageProbeState = MibTableColumn((1, 3, 6, 1, 4, 1, 412, 2, 4, 53, 1, 0), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("active", 1), ("notInService", 2), ("notReady", 3), ("createAndGo", 4), ("createAndWait", 5), ("destroy", 6)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dMTFVoltageProbeState.setStatus('mandatory')
voltageProbeIndexAtt1 = MibTableColumn((1, 3, 6, 1, 4, 1, 412, 2, 4, 53, 1, 1), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: voltageProbeIndexAtt1.setStatus('mandatory')
voltageProbeLocationAtt2 = MibTableColumn((1, 3, 6, 1, 4, 1, 412, 2, 4, 53, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11))).clone(namedValues=NamedValues(("other", 1), ("unknown", 2), ("processor", 3), ("disk", 4), ("peripheralBay", 5), ("systemManagementModule", 6), ("motherboard", 7), ("memoryModule", 8), ("processorModule", 9), ("powerUnit", 10), ("addInCard", 11)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: voltageProbeLocationAtt2.setStatus('mandatory')
voltageProbeDescriptionAtt3 = MibTableColumn((1, 3, 6, 1, 4, 1, 412, 2, 4, 53, 1, 3), DmiDisplaystring()).setMaxAccess("readonly")
if mibBuilder.loadTexts: voltageProbeDescriptionAtt3.setStatus('mandatory')
voltageStatusAtt4 = MibTableColumn((1, 3, 6, 1, 4, 1, 412, 2, 4, 53, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("other", 1), ("unknown", 2), ("oK", 3), ("nonCritical", 4), ("critical", 5), ("nonRecoverable", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: voltageStatusAtt4.setStatus('mandatory')
voltageProbeVoltageLevelAtt5 = MibTableColumn((1, 3, 6, 1, 4, 1, 412, 2, 4, 53, 1, 5), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: voltageProbeVoltageLevelAtt5.setStatus('mandatory')
monitoredVoltageNominalLevelAtt6 = MibTableColumn((1, 3, 6, 1, 4, 1, 412, 2, 4, 53, 1, 6), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: monitoredVoltageNominalLevelAtt6.setStatus('mandatory')
monitoredVoltageNormalMaximumAtt7 = MibTableColumn((1, 3, 6, 1, 4, 1, 412, 2, 4, 53, 1, 7), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: monitoredVoltageNormalMaximumAtt7.setStatus('mandatory')
monitoredVoltageNormalMinimumAtt8 = MibTableColumn((1, 3, 6, 1, 4, 1, 412, 2, 4, 53, 1, 8), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: monitoredVoltageNormalMinimumAtt8.setStatus('mandatory')
voltageProbeMaximumAtt9 = MibTableColumn((1, 3, 6, 1, 4, 1, 412, 2, 4, 53, 1, 9), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: voltageProbeMaximumAtt9.setStatus('mandatory')
voltageProbeMinimumAtt10 = MibTableColumn((1, 3, 6, 1, 4, 1, 412, 2, 4, 53, 1, 10), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: voltageProbeMinimumAtt10.setStatus('mandatory')
voltageLevelLowerThresholdNonCriticalAtt11 = MibTableColumn((1, 3, 6, 1, 4, 1, 412, 2, 4, 53, 1, 11), DmiInteger()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: voltageLevelLowerThresholdNonCriticalAtt11.setStatus('mandatory')
voltageLevelUpperThresholdNonCriticalAtt12 = MibTableColumn((1, 3, 6, 1, 4, 1, 412, 2, 4, 53, 1, 12), DmiInteger()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: voltageLevelUpperThresholdNonCriticalAtt12.setStatus('mandatory')
voltageLevelLowerThresholdCriticalAtt13 = MibTableColumn((1, 3, 6, 1, 4, 1, 412, 2, 4, 53, 1, 13), DmiInteger()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: voltageLevelLowerThresholdCriticalAtt13.setStatus('mandatory')
voltageLevelUpperThresholdCriticalAtt14 = MibTableColumn((1, 3, 6, 1, 4, 1, 412, 2, 4, 53, 1, 14), DmiInteger()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: voltageLevelUpperThresholdCriticalAtt14.setStatus('mandatory')
voltageLevelLowerThresholdNonRecoverableAtt15 = MibTableColumn((1, 3, 6, 1, 4, 1, 412, 2, 4, 53, 1, 15), DmiInteger()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: voltageLevelLowerThresholdNonRecoverableAtt15.setStatus('mandatory')
voltageLevelUpperThresholdNonRecoverableAtt16 = MibTableColumn((1, 3, 6, 1, 4, 1, 412, 2, 4, 53, 1, 16), DmiInteger()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: voltageLevelUpperThresholdNonRecoverableAtt16.setStatus('mandatory')
voltageProbeResolutionAtt17 = MibTableColumn((1, 3, 6, 1, 4, 1, 412, 2, 4, 53, 1, 17), DmiInteger()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: voltageProbeResolutionAtt17.setStatus('mandatory')
voltageProbeToleranceAtt18 = MibTableColumn((1, 3, 6, 1, 4, 1, 412, 2, 4, 53, 1, 18), DmiInteger()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: voltageProbeToleranceAtt18.setStatus('mandatory')
voltageProbeAccuracyAtt19 = MibTableColumn((1, 3, 6, 1, 4, 1, 412, 2, 4, 53, 1, 19), DmiInteger()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: voltageProbeAccuracyAtt19.setStatus('mandatory')
fRUGroupIndexAtt20_2 = MibScalar((1, 3, 6, 1, 4, 1, 412, 2, 4, 53, 1, 20), DmiInteger()).setLabel("fRUGroupIndexAtt20-2").setMaxAccess("readonly")
if mibBuilder.loadTexts: fRUGroupIndexAtt20_2.setStatus('mandatory')
operationalGroupIndexAtt21_2 = MibScalar((1, 3, 6, 1, 4, 1, 412, 2, 4, 53, 1, 21), DmiInteger()).setLabel("operationalGroupIndexAtt21-2").setMaxAccess("readonly")
if mibBuilder.loadTexts: operationalGroupIndexAtt21_2.setStatus('mandatory')
dMTFPhysicalMemoryArrayTable = MibTable((1, 3, 6, 1, 4, 1, 412, 2, 4, 33), )
if mibBuilder.loadTexts: dMTFPhysicalMemoryArrayTable.setStatus('mandatory')
dMTFPhysicalMemoryArrayEntry = MibTableRow((1, 3, 6, 1, 4, 1, 412, 2, 4, 33, 1), ).setIndexNames((0, "BASEBRDD-MIB-MIB", "DmiCompId"), (0, "BASEBRDD-MIB-MIB", "DmiGroupId"), (0, "BASEBRDD-MIB-MIB", "memoryArrayTableIndexAtt1"))
if mibBuilder.loadTexts: dMTFPhysicalMemoryArrayEntry.setStatus('mandatory')
dMTFPhysicalMemoryArrayState = MibTableColumn((1, 3, 6, 1, 4, 1, 412, 2, 4, 33, 1, 0), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("active", 1), ("notInService", 2), ("notReady", 3), ("createAndGo", 4), ("createAndWait", 5), ("destroy", 6)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dMTFPhysicalMemoryArrayState.setStatus('mandatory')
memoryArrayTableIndexAtt1 = MibTableColumn((1, 3, 6, 1, 4, 1, 412, 2, 4, 33, 1, 1), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: memoryArrayTableIndexAtt1.setStatus('mandatory')
memoryArrayLocationAtt2 = MibTableColumn((1, 3, 6, 1, 4, 1, 412, 2, 4, 33, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 16, 160, 161, 162, 163, 164))).clone(namedValues=NamedValues(("other", 1), ("unknown", 2), ("systemBoardOrMotherboard", 3), ("iSAAddOnCard", 4), ("eISAAddOnCard", 5), ("pCIAddOnCard", 6), ("mCAAddOnCard", 7), ("pCMCIAAddOnCard", 8), ("proprietaryAddOnCard", 9), ("nuBus", 16), ("pC98C20AddOnCard", 160), ("pC98C24AddOnCard", 161), ("pC98EAddOnCard", 162), ("pC98LocalBusAddOnCard", 163), ("pC98CardSlotAddOnCard", 164)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: memoryArrayLocationAtt2.setStatus('mandatory')
memoryArrayUseAtt3 = MibTableColumn((1, 3, 6, 1, 4, 1, 412, 2, 4, 33, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("other", 1), ("unknown", 2), ("systemMemory", 3), ("videoMemory", 4), ("flashMemory", 5), ("nonVolatileRAM", 6), ("cacheMemory", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: memoryArrayUseAtt3.setStatus('mandatory')
maximumMemoryCapacityAtt4 = MibTableColumn((1, 3, 6, 1, 4, 1, 412, 2, 4, 33, 1, 4), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: maximumMemoryCapacityAtt4.setStatus('mandatory')
numberOfMemoryDeviceSocketsAtt5 = MibTableColumn((1, 3, 6, 1, 4, 1, 412, 2, 4, 33, 1, 5), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: numberOfMemoryDeviceSocketsAtt5.setStatus('mandatory')
numberOfMemoryDeviceSocketsUsedAtt6 = MibTableColumn((1, 3, 6, 1, 4, 1, 412, 2, 4, 33, 1, 6), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: numberOfMemoryDeviceSocketsUsedAtt6.setStatus('mandatory')
memoryErrorCorrectionAtt7 = MibTableColumn((1, 3, 6, 1, 4, 1, 412, 2, 4, 33, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("other", 1), ("unknown", 2), ("none", 3), ("parity", 4), ("singleBitECC", 5), ("multiBitECC", 6), ("cRC", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: memoryErrorCorrectionAtt7.setStatus('mandatory')
arrayErrorTypeAtt8 = MibTableColumn((1, 3, 6, 1, 4, 1, 412, 2, 4, 33, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14))).clone(namedValues=NamedValues(("other", 1), ("unknown", 2), ("oK", 3), ("badRead", 4), ("parityError", 5), ("singleBitError", 6), ("doubleBitError", 7), ("multiBitError", 8), ("nibbleError", 9), ("checksumError", 10), ("cRCError", 11), ("correctedSingleBitError", 12), ("correctedError", 13), ("uncorrectableError", 14)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: arrayErrorTypeAtt8.setStatus('mandatory')
lastErrorUpdateAtt9 = MibTableColumn((1, 3, 6, 1, 4, 1, 412, 2, 4, 33, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("other", 1), ("unknown", 2), ("noUpdateSinceLastInstrumentationStart", 3), ("updatedFromInformationObtainedPriorToInstrumentati", 4), ("updatedDuringInstrumentationRunTime", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lastErrorUpdateAtt9.setStatus('mandatory')
errorOperationAtt10 = MibTableColumn((1, 3, 6, 1, 4, 1, 412, 2, 4, 33, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("other", 1), ("unknown", 2), ("read", 3), ("write", 4), ("partialWrite", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: errorOperationAtt10.setStatus('mandatory')
errorDataSizeAtt11 = MibTableColumn((1, 3, 6, 1, 4, 1, 412, 2, 4, 33, 1, 11), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: errorDataSizeAtt11.setStatus('mandatory')
errorDataAtt12 = MibTableColumn((1, 3, 6, 1, 4, 1, 412, 2, 4, 33, 1, 12), DmiOctetstring()).setMaxAccess("readonly")
if mibBuilder.loadTexts: errorDataAtt12.setStatus('mandatory')
vendorSyndromeAtt13 = MibTableColumn((1, 3, 6, 1, 4, 1, 412, 2, 4, 33, 1, 13), DmiOctetstring()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vendorSyndromeAtt13.setStatus('mandatory')
errorAddressAtt14 = MibTableColumn((1, 3, 6, 1, 4, 1, 412, 2, 4, 33, 1, 14), DmiInteger64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: errorAddressAtt14.setStatus('mandatory')
errorResolutionAtt15 = MibTableColumn((1, 3, 6, 1, 4, 1, 412, 2, 4, 33, 1, 15), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: errorResolutionAtt15.setStatus('mandatory')
fRUGroupIndexAtt16 = MibTableColumn((1, 3, 6, 1, 4, 1, 412, 2, 4, 33, 1, 16), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fRUGroupIndexAtt16.setStatus('mandatory')
operationalGroupIndexAtt17 = MibTableColumn((1, 3, 6, 1, 4, 1, 412, 2, 4, 33, 1, 17), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: operationalGroupIndexAtt17.setStatus('mandatory')
dMTFParallelPortsTable = MibTable((1, 3, 6, 1, 4, 1, 412, 2, 4, 10), )
if mibBuilder.loadTexts: dMTFParallelPortsTable.setStatus('mandatory')
dMTFParallelPortsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 412, 2, 4, 10, 1), ).setIndexNames((0, "BASEBRDD-MIB-MIB", "DmiCompId"), (0, "BASEBRDD-MIB-MIB", "DmiGroupId"), (0, "BASEBRDD-MIB-MIB", "parallelPortIndexAtt1"))
if mibBuilder.loadTexts: dMTFParallelPortsEntry.setStatus('mandatory')
dMTFParallelPortsState = MibTableColumn((1, 3, 6, 1, 4, 1, 412, 2, 4, 10, 1, 0), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("active", 1), ("notInService", 2), ("notReady", 3), ("createAndGo", 4), ("createAndWait", 5), ("destroy", 6)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dMTFParallelPortsState.setStatus('mandatory')
parallelPortIndexAtt1 = MibTableColumn((1, 3, 6, 1, 4, 1, 412, 2, 4, 10, 1, 1), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: parallelPortIndexAtt1.setStatus('mandatory')
parallelBaseIOAddressAtt2 = MibTableColumn((1, 3, 6, 1, 4, 1, 412, 2, 4, 10, 1, 2), DmiInteger64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: parallelBaseIOAddressAtt2.setStatus('mandatory')
iRQUsedAtt3_1 = MibScalar((1, 3, 6, 1, 4, 1, 412, 2, 4, 10, 1, 3), DmiInteger()).setLabel("iRQUsedAtt3-1").setMaxAccess("readonly")
if mibBuilder.loadTexts: iRQUsedAtt3_1.setStatus('mandatory')
logicalNameAtt4_1 = MibScalar((1, 3, 6, 1, 4, 1, 412, 2, 4, 10, 1, 4), DmiDisplaystring()).setLabel("logicalNameAtt4-1").setMaxAccess("readonly")
if mibBuilder.loadTexts: logicalNameAtt4_1.setStatus('mandatory')
connectorTypeAtt5_1 = MibScalar((1, 3, 6, 1, 4, 1, 412, 2, 4, 10, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 160, 161, 162))).clone(namedValues=NamedValues(("other", 1), ("unknown", 2), ("dB25Female", 3), ("dB25Male", 4), ("centronics", 5), ("miniCentronics", 6), ("proprietary", 7), ("centronics14", 160), ("dB36Female", 161), ("miniCentronics20", 162)))).setLabel("connectorTypeAtt5-1").setMaxAccess("readonly")
if mibBuilder.loadTexts: connectorTypeAtt5_1.setStatus('mandatory')
connectorPinoutAtt6 = MibTableColumn((1, 3, 6, 1, 4, 1, 412, 2, 4, 10, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 160, 161, 162, 163, 164))).clone(namedValues=NamedValues(("other", 1), ("unknown", 2), ("xTAT", 3), ("pS2", 4), ("iEEE1284", 5), ("proprietary", 6), ("pC98", 160), ("pC98Hireso", 161), ("pCH98", 162), ("pC98Note", 163), ("pC98Full", 164)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: connectorPinoutAtt6.setStatus('mandatory')
dMASupportAtt7 = MibTableColumn((1, 3, 6, 1, 4, 1, 412, 2, 4, 10, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("false", 0), ("true", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dMASupportAtt7.setStatus('mandatory')
parallelPortCapabilitiesAtt8 = MibTableColumn((1, 3, 6, 1, 4, 1, 412, 2, 4, 10, 1, 8), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: parallelPortCapabilitiesAtt8.setStatus('mandatory')
operationalGroupIndexAtt9_1 = MibScalar((1, 3, 6, 1, 4, 1, 412, 2, 4, 10, 1, 9), DmiInteger()).setLabel("operationalGroupIndexAtt9-1").setMaxAccess("readonly")
if mibBuilder.loadTexts: operationalGroupIndexAtt9_1.setStatus('mandatory')
parallelPortSecuritySettingsAtt10 = MibTableColumn((1, 3, 6, 1, 4, 1, 412, 2, 4, 10, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("other", 1), ("unknown", 2), ("none", 3), ("externalInterfaceLockedOut", 4), ("externalInterfaceEnabled", 5), ("bootBypass", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: parallelPortSecuritySettingsAtt10.setStatus('mandatory')
dELLSystemsManagementSoftwareTable = MibTable((1, 3, 6, 1, 4, 1, 674, 10891, 400), )
if mibBuilder.loadTexts: dELLSystemsManagementSoftwareTable.setStatus('mandatory')
dELLSystemsManagementSoftwareEntry = MibTableRow((1, 3, 6, 1, 4, 1, 674, 10891, 400, 1), ).setIndexNames((0, "BASEBRDD-MIB-MIB", "DmiCompId"), (0, "BASEBRDD-MIB-MIB", "DmiGroupId"))
if mibBuilder.loadTexts: dELLSystemsManagementSoftwareEntry.setStatus('mandatory')
productAtt1 = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10891, 400, 1, 1), DmiDisplaystring()).setMaxAccess("readonly")
if mibBuilder.loadTexts: productAtt1.setStatus('mandatory')
versionAtt2 = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10891, 400, 1, 2), DmiDisplaystring()).setMaxAccess("readonly")
if mibBuilder.loadTexts: versionAtt2.setStatus('mandatory')
buildNumberAtt3 = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10891, 400, 1, 3), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: buildNumberAtt3.setStatus('mandatory')
descriptionAtt4 = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10891, 400, 1, 4), DmiDisplaystring()).setMaxAccess("readonly")
if mibBuilder.loadTexts: descriptionAtt4.setStatus('mandatory')
supportedProtocolsAtt5 = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10891, 400, 1, 5), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: supportedProtocolsAtt5.setStatus('mandatory')
preferredProtocolAtt6 = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10891, 400, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 4))).clone(namedValues=NamedValues(("sNMP", 1), ("dMIRPC", 2), ("cIMOM", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: preferredProtocolAtt6.setStatus('mandatory')
dMIRPCTypesAtt7 = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10891, 400, 1, 7), DmiDisplaystring()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dMIRPCTypesAtt7.setStatus('mandatory')
dELLSystemsSummaryInformationTable = MibTable((1, 3, 6, 1, 4, 1, 674, 10891, 402), )
if mibBuilder.loadTexts: dELLSystemsSummaryInformationTable.setStatus('mandatory')
dELLSystemsSummaryInformationEntry = MibTableRow((1, 3, 6, 1, 4, 1, 674, 10891, 402, 1), ).setIndexNames((0, "BASEBRDD-MIB-MIB", "DmiCompId"), (0, "BASEBRDD-MIB-MIB", "DmiGroupId"))
if mibBuilder.loadTexts: dELLSystemsSummaryInformationEntry.setStatus('mandatory')
operatingSystemAtt1 = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10891, 402, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("other", 1), ("unknown", 2), ("windowsNT", 3), ("windows9x", 4), ("iBMOS2", 5), ("sCOUNIX", 6), ("netware", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: operatingSystemAtt1.setStatus('mandatory')
systemClassAtt2 = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10891, 402, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("other", 1), ("unknown", 2), ("workstation", 3), ("server", 4), ("desktop", 5), ("portable", 6), ("netPC", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: systemClassAtt2.setStatus('mandatory')
dellMemoryPrefailureTable = MibTable((1, 3, 6, 1, 4, 1, 674, 10891, 403), )
if mibBuilder.loadTexts: dellMemoryPrefailureTable.setStatus('mandatory')
dellMemoryPrefailureEntry = MibTableRow((1, 3, 6, 1, 4, 1, 674, 10891, 403, 1), ).setIndexNames((0, "BASEBRDD-MIB-MIB", "DmiCompId"), (0, "BASEBRDD-MIB-MIB", "DmiGroupId"), (0, "BASEBRDD-MIB-MIB", "memoryDeviceIndexAtt1"))
if mibBuilder.loadTexts: dellMemoryPrefailureEntry.setStatus('mandatory')
dellMemoryPrefailureState = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10891, 403, 1, 0), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("active", 1), ("notInService", 2), ("notReady", 3), ("createAndGo", 4), ("createAndWait", 5), ("destroy", 6)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dellMemoryPrefailureState.setStatus('mandatory')
memoryDeviceIndexAtt1 = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10891, 403, 1, 1), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: memoryDeviceIndexAtt1.setStatus('mandatory')
resetMemoryDeviceErrorCountAndPrefailureStatusAtt2 = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10891, 403, 1, 2), DmiInteger()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: resetMemoryDeviceErrorCountAndPrefailureStatusAtt2.setStatus('mandatory')
dellTemperatureProbeEvSys = MibScalar((1, 3, 6, 1, 4, 1, 674, 10891, 300, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("other", 0), ("unknown", 1))))
if mibBuilder.loadTexts: dellTemperatureProbeEvSys.setStatus('mandatory')
dellTemperatureProbeEvSub = MibScalar((1, 3, 6, 1, 4, 1, 674, 10891, 300, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("other", 0), ("unknown", 1))))
if mibBuilder.loadTexts: dellTemperatureProbeEvSub.setStatus('mandatory')
dellTemperatureProbeEvSol = MibScalar((1, 3, 6, 1, 4, 1, 674, 10891, 300, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("other", 1), ("unknown", 2))))
if mibBuilder.loadTexts: dellTemperatureProbeEvSol.setStatus('mandatory')
dellTemperatureProbeEvt1 = NotificationType((1, 3, 6, 1, 4, 1, 674, 10891, 300) + (0,1)).setObjects(("DMTF-DMI-MIB", "dmiEventDateTime"), ("DMTF-DMI-MIB", "dmiCompId"), ("DMTF-DMI-MIB", "dmiEventSeverity"), ("DMTF-DMI-MIB", "dmiEventStateKey"), ("DMTF-DMI-MIB", "dmiEventAssociatedGroup"), ("BASEBRDD-MIB-MIB", "dellTemperatureProbeEvSys"), ("BASEBRDD-MIB-MIB", "dellTemperatureProbeEvSub"), ("BASEBRDD-MIB-MIB", "dellTemperatureProbeEvSol"))
dellFanSensorEvSys = MibScalar((1, 3, 6, 1, 4, 1, 674, 10891, 301, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("other", 0), ("unknown", 1))))
if mibBuilder.loadTexts: dellFanSensorEvSys.setStatus('mandatory')
dellFanSensorEvSub = MibScalar((1, 3, 6, 1, 4, 1, 674, 10891, 301, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("other", 0), ("unknown", 1))))
if mibBuilder.loadTexts: dellFanSensorEvSub.setStatus('mandatory')
dellFanSensorEvSol = MibScalar((1, 3, 6, 1, 4, 1, 674, 10891, 301, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("other", 1), ("unknown", 2))))
if mibBuilder.loadTexts: dellFanSensorEvSol.setStatus('mandatory')
dellFanSensorEvt1 = NotificationType((1, 3, 6, 1, 4, 1, 674, 10891, 301) + (0,1)).setObjects(("DMTF-DMI-MIB", "dmiEventDateTime"), ("DMTF-DMI-MIB", "dmiCompId"), ("DMTF-DMI-MIB", "dmiEventSeverity"), ("DMTF-DMI-MIB", "dmiEventStateKey"), ("DMTF-DMI-MIB", "dmiEventAssociatedGroup"), ("BASEBRDD-MIB-MIB", "dellFanSensorEvSys"), ("BASEBRDD-MIB-MIB", "dellFanSensorEvSub"), ("BASEBRDD-MIB-MIB", "dellFanSensorEvSol"))
dellVoltageProbeEvSys = MibScalar((1, 3, 6, 1, 4, 1, 674, 10891, 302, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("other", 0), ("unknown", 1))))
if mibBuilder.loadTexts: dellVoltageProbeEvSys.setStatus('mandatory')
dellVoltageProbeEvSub = MibScalar((1, 3, 6, 1, 4, 1, 674, 10891, 302, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("other", 0), ("unknown", 1))))
if mibBuilder.loadTexts: dellVoltageProbeEvSub.setStatus('mandatory')
dellVoltageProbeEvSol = MibScalar((1, 3, 6, 1, 4, 1, 674, 10891, 302, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("other", 1), ("unknown", 2))))
if mibBuilder.loadTexts: dellVoltageProbeEvSol.setStatus('mandatory')
dellVoltageProbeEvt1 = NotificationType((1, 3, 6, 1, 4, 1, 674, 10891, 302) + (0,1)).setObjects(("DMTF-DMI-MIB", "dmiEventDateTime"), ("DMTF-DMI-MIB", "dmiCompId"), ("DMTF-DMI-MIB", "dmiEventSeverity"), ("DMTF-DMI-MIB", "dmiEventStateKey"), ("DMTF-DMI-MIB", "dmiEventAssociatedGroup"), ("BASEBRDD-MIB-MIB", "dellVoltageProbeEvSys"), ("BASEBRDD-MIB-MIB", "dellVoltageProbeEvSub"), ("BASEBRDD-MIB-MIB", "dellVoltageProbeEvSol"))
dellCurrentProbeEvSys = MibScalar((1, 3, 6, 1, 4, 1, 674, 10891, 303, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("other", 0), ("unknown", 1))))
if mibBuilder.loadTexts: dellCurrentProbeEvSys.setStatus('mandatory')
dellCurrentProbeEvSub = MibScalar((1, 3, 6, 1, 4, 1, 674, 10891, 303, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("other", 0), ("unknown", 1))))
if mibBuilder.loadTexts: dellCurrentProbeEvSub.setStatus('mandatory')
dellCurrentProbeEvSol = MibScalar((1, 3, 6, 1, 4, 1, 674, 10891, 303, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("other", 1), ("unknown", 2))))
if mibBuilder.loadTexts: dellCurrentProbeEvSol.setStatus('mandatory')
dellCurrentProbeEvt1 = NotificationType((1, 3, 6, 1, 4, 1, 674, 10891, 303) + (0,1)).setObjects(("DMTF-DMI-MIB", "dmiEventDateTime"), ("DMTF-DMI-MIB", "dmiCompId"), ("DMTF-DMI-MIB", "dmiEventSeverity"), ("DMTF-DMI-MIB", "dmiEventStateKey"), ("DMTF-DMI-MIB", "dmiEventAssociatedGroup"), ("BASEBRDD-MIB-MIB", "dellCurrentProbeEvSys"), ("BASEBRDD-MIB-MIB", "dellCurrentProbeEvSub"), ("BASEBRDD-MIB-MIB", "dellCurrentProbeEvSol"))
dellGlobalPowerUnitEvSys = MibScalar((1, 3, 6, 1, 4, 1, 674, 10891, 305, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("other", 0), ("unknown", 1))))
if mibBuilder.loadTexts: dellGlobalPowerUnitEvSys.setStatus('mandatory')
dellGlobalPowerUnitEvSub = MibScalar((1, 3, 6, 1, 4, 1, 674, 10891, 305, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("other", 0), ("unknown", 1))))
if mibBuilder.loadTexts: dellGlobalPowerUnitEvSub.setStatus('mandatory')
dellGlobalPowerUnitEvSol = MibScalar((1, 3, 6, 1, 4, 1, 674, 10891, 305, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("other", 1), ("unknown", 2))))
if mibBuilder.loadTexts: dellGlobalPowerUnitEvSol.setStatus('mandatory')
dellGlobalPowerUnitEvt1 = NotificationType((1, 3, 6, 1, 4, 1, 674, 10891, 305) + (0,1)).setObjects(("DMTF-DMI-MIB", "dmiEventDateTime"), ("DMTF-DMI-MIB", "dmiCompId"), ("DMTF-DMI-MIB", "dmiEventSeverity"), ("DMTF-DMI-MIB", "dmiEventStateKey"), ("DMTF-DMI-MIB", "dmiEventAssociatedGroup"), ("BASEBRDD-MIB-MIB", "dellGlobalPowerUnitEvSys"), ("BASEBRDD-MIB-MIB", "dellGlobalPowerUnitEvSub"), ("BASEBRDD-MIB-MIB", "dellGlobalPowerUnitEvSol"))
dellGlobalPowerUnitEvt2 = NotificationType((1, 3, 6, 1, 4, 1, 674, 10891, 305) + (0,2)).setObjects(("DMTF-DMI-MIB", "dmiEventDateTime"), ("DMTF-DMI-MIB", "dmiCompId"), ("DMTF-DMI-MIB", "dmiEventSeverity"), ("DMTF-DMI-MIB", "dmiEventStateKey"), ("DMTF-DMI-MIB", "dmiEventAssociatedGroup"), ("BASEBRDD-MIB-MIB", "dellGlobalPowerUnitEvSys"), ("BASEBRDD-MIB-MIB", "dellGlobalPowerUnitEvSub"), ("BASEBRDD-MIB-MIB", "dellGlobalPowerUnitEvSol"))
dellSystemChassisExtensionEvSys = MibScalar((1, 3, 6, 1, 4, 1, 674, 10891, 306, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("other", 0), ("unknown", 1))))
if mibBuilder.loadTexts: dellSystemChassisExtensionEvSys.setStatus('mandatory')
dellSystemChassisExtensionEvSub = MibScalar((1, 3, 6, 1, 4, 1, 674, 10891, 306, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("other", 0), ("unknown", 1))))
if mibBuilder.loadTexts: dellSystemChassisExtensionEvSub.setStatus('mandatory')
dellSystemChassisExtensionEvSol = MibScalar((1, 3, 6, 1, 4, 1, 674, 10891, 306, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("other", 1), ("unknown", 2))))
if mibBuilder.loadTexts: dellSystemChassisExtensionEvSol.setStatus('mandatory')
dellSystemChassisExtensionEvt1 = NotificationType((1, 3, 6, 1, 4, 1, 674, 10891, 306) + (0,1)).setObjects(("DMTF-DMI-MIB", "dmiEventDateTime"), ("DMTF-DMI-MIB", "dmiCompId"), ("DMTF-DMI-MIB", "dmiEventSeverity"), ("DMTF-DMI-MIB", "dmiEventStateKey"), ("DMTF-DMI-MIB", "dmiEventAssociatedGroup"), ("BASEBRDD-MIB-MIB", "dellSystemChassisExtensionEvSys"), ("BASEBRDD-MIB-MIB", "dellSystemChassisExtensionEvSub"), ("BASEBRDD-MIB-MIB", "dellSystemChassisExtensionEvSol"))
dMTFPhysicalContainerGlobalTableEvSys = MibScalar((1, 3, 6, 1, 4, 1, 412, 2, 4, 63, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("other", 0), ("unknown", 1))))
if mibBuilder.loadTexts: dMTFPhysicalContainerGlobalTableEvSys.setStatus('mandatory')
dMTFPhysicalContainerGlobalTableEvSub = MibScalar((1, 3, 6, 1, 4, 1, 412, 2, 4, 63, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("other", 0), ("unknown", 1))))
if mibBuilder.loadTexts: dMTFPhysicalContainerGlobalTableEvSub.setStatus('mandatory')
dMTFPhysicalContainerGlobalTableEvt1 = NotificationType((1, 3, 6, 1, 4, 1, 412, 2, 4, 63) + (0,1)).setObjects(("DMTF-DMI-MIB", "dmiEventDateTime"), ("DMTF-DMI-MIB", "dmiCompId"), ("DMTF-DMI-MIB", "dmiEventSeverity"), ("DMTF-DMI-MIB", "dmiEventStateKey"), ("DMTF-DMI-MIB", "dmiEventAssociatedGroup"), ("BASEBRDD-MIB-MIB", "dMTFPhysicalContainerGlobalTableEvSys"), ("BASEBRDD-MIB-MIB", "dMTFPhysicalContainerGlobalTableEvSub"))
dMTFPhysicalContainerGlobalTableEvt2 = NotificationType((1, 3, 6, 1, 4, 1, 412, 2, 4, 63) + (0,2)).setObjects(("DMTF-DMI-MIB", "dmiEventDateTime"), ("DMTF-DMI-MIB", "dmiCompId"), ("DMTF-DMI-MIB", "dmiEventSeverity"), ("DMTF-DMI-MIB", "dmiEventStateKey"), ("DMTF-DMI-MIB", "dmiEventAssociatedGroup"), ("BASEBRDD-MIB-MIB", "dMTFPhysicalContainerGlobalTableEvSys"), ("BASEBRDD-MIB-MIB", "dMTFPhysicalContainerGlobalTableEvSub"))
dMTFPhysicalContainerGlobalTableEvt3 = NotificationType((1, 3, 6, 1, 4, 1, 412, 2, 4, 63) + (0,3)).setObjects(("DMTF-DMI-MIB", "dmiEventDateTime"), ("DMTF-DMI-MIB", "dmiCompId"), ("DMTF-DMI-MIB", "dmiEventSeverity"), ("DMTF-DMI-MIB", "dmiEventStateKey"), ("DMTF-DMI-MIB", "dmiEventAssociatedGroup"), ("BASEBRDD-MIB-MIB", "dMTFPhysicalContainerGlobalTableEvSys"), ("BASEBRDD-MIB-MIB", "dMTFPhysicalContainerGlobalTableEvSub"))
dMTFPhysicalContainerGlobalTableEvt4 = NotificationType((1, 3, 6, 1, 4, 1, 412, 2, 4, 63) + (0,4)).setObjects(("DMTF-DMI-MIB", "dmiEventDateTime"), ("DMTF-DMI-MIB", "dmiCompId"), ("DMTF-DMI-MIB", "dmiEventSeverity"), ("DMTF-DMI-MIB", "dmiEventStateKey"), ("DMTF-DMI-MIB", "dmiEventAssociatedGroup"), ("BASEBRDD-MIB-MIB", "dMTFPhysicalContainerGlobalTableEvSys"), ("BASEBRDD-MIB-MIB", "dMTFPhysicalContainerGlobalTableEvSub"))
dMTFPhysicalContainerGlobalTableEvt5 = NotificationType((1, 3, 6, 1, 4, 1, 412, 2, 4, 63) + (0,5)).setObjects(("DMTF-DMI-MIB", "dmiEventDateTime"), ("DMTF-DMI-MIB", "dmiCompId"), ("DMTF-DMI-MIB", "dmiEventSeverity"), ("DMTF-DMI-MIB", "dmiEventStateKey"), ("DMTF-DMI-MIB", "dmiEventAssociatedGroup"), ("BASEBRDD-MIB-MIB", "dMTFPhysicalContainerGlobalTableEvSys"), ("BASEBRDD-MIB-MIB", "dMTFPhysicalContainerGlobalTableEvSub"))
dMTFPhysicalContainerGlobalTableEvt6 = NotificationType((1, 3, 6, 1, 4, 1, 412, 2, 4, 63) + (0,6)).setObjects(("DMTF-DMI-MIB", "dmiEventDateTime"), ("DMTF-DMI-MIB", "dmiCompId"), ("DMTF-DMI-MIB", "dmiEventSeverity"), ("DMTF-DMI-MIB", "dmiEventStateKey"), ("DMTF-DMI-MIB", "dmiEventAssociatedGroup"), ("BASEBRDD-MIB-MIB", "dMTFPhysicalContainerGlobalTableEvSys"), ("BASEBRDD-MIB-MIB", "dMTFPhysicalContainerGlobalTableEvSub"))
dMTFPhysicalContainerGlobalTableEvt7 = NotificationType((1, 3, 6, 1, 4, 1, 412, 2, 4, 63) + (0,7)).setObjects(("DMTF-DMI-MIB", "dmiEventDateTime"), ("DMTF-DMI-MIB", "dmiCompId"), ("DMTF-DMI-MIB", "dmiEventSeverity"), ("DMTF-DMI-MIB", "dmiEventStateKey"), ("DMTF-DMI-MIB", "dmiEventAssociatedGroup"), ("BASEBRDD-MIB-MIB", "dMTFPhysicalContainerGlobalTableEvSys"), ("BASEBRDD-MIB-MIB", "dMTFPhysicalContainerGlobalTableEvSub"))
dellSystemResetEvSys = MibScalar((1, 3, 6, 1, 4, 1, 674, 10891, 312, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("other", 0), ("unknown", 1))))
if mibBuilder.loadTexts: dellSystemResetEvSys.setStatus('mandatory')
dellSystemResetEvSub = MibScalar((1, 3, 6, 1, 4, 1, 674, 10891, 312, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("other", 0), ("unknown", 1))))
if mibBuilder.loadTexts: dellSystemResetEvSub.setStatus('mandatory')
dellSystemResetEvSol = MibScalar((1, 3, 6, 1, 4, 1, 674, 10891, 312, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("other", 1), ("unknown", 2))))
if mibBuilder.loadTexts: dellSystemResetEvSol.setStatus('mandatory')
dellSystemResetEvt1 = NotificationType((1, 3, 6, 1, 4, 1, 674, 10891, 312) + (0,1)).setObjects(("DMTF-DMI-MIB", "dmiEventDateTime"), ("DMTF-DMI-MIB", "dmiCompId"), ("DMTF-DMI-MIB", "dmiEventSeverity"), ("DMTF-DMI-MIB", "dmiEventStateKey"), ("DMTF-DMI-MIB", "dmiEventAssociatedGroup"), ("BASEBRDD-MIB-MIB", "dellSystemResetEvSys"), ("BASEBRDD-MIB-MIB", "dellSystemResetEvSub"), ("BASEBRDD-MIB-MIB", "dellSystemResetEvSol"))
dMTFCoolingDeviceEvSys = MibScalar((1, 3, 6, 1, 4, 1, 412, 2, 4, 17, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("other", 0), ("unknown", 1))))
if mibBuilder.loadTexts: dMTFCoolingDeviceEvSys.setStatus('mandatory')
dMTFCoolingDeviceEvSub = MibScalar((1, 3, 6, 1, 4, 1, 412, 2, 4, 17, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("other", 0), ("unknown", 1))))
if mibBuilder.loadTexts: dMTFCoolingDeviceEvSub.setStatus('mandatory')
dMTFCoolingDeviceEvt1 = NotificationType((1, 3, 6, 1, 4, 1, 412, 2, 4, 17) + (0,1)).setObjects(("DMTF-DMI-MIB", "dmiEventDateTime"), ("DMTF-DMI-MIB", "dmiCompId"), ("DMTF-DMI-MIB", "dmiEventSeverity"), ("DMTF-DMI-MIB", "dmiEventStateKey"), ("DMTF-DMI-MIB", "dmiEventAssociatedGroup"), ("BASEBRDD-MIB-MIB", "dMTFCoolingDeviceEvSys"), ("BASEBRDD-MIB-MIB", "dMTFCoolingDeviceEvSub"))
dMTFCoolingDeviceEvt2 = NotificationType((1, 3, 6, 1, 4, 1, 412, 2, 4, 17) + (0,2)).setObjects(("DMTF-DMI-MIB", "dmiEventDateTime"), ("DMTF-DMI-MIB", "dmiCompId"), ("DMTF-DMI-MIB", "dmiEventSeverity"), ("DMTF-DMI-MIB", "dmiEventStateKey"), ("DMTF-DMI-MIB", "dmiEventAssociatedGroup"), ("BASEBRDD-MIB-MIB", "dMTFCoolingDeviceEvSys"), ("BASEBRDD-MIB-MIB", "dMTFCoolingDeviceEvSub"))
dMTFElectricalCurrentProbeEvSys = MibScalar((1, 3, 6, 1, 4, 1, 412, 2, 4, 55, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("other", 0), ("unknown", 1))))
if mibBuilder.loadTexts: dMTFElectricalCurrentProbeEvSys.setStatus('mandatory')
dMTFElectricalCurrentProbeEvSub = MibScalar((1, 3, 6, 1, 4, 1, 412, 2, 4, 55, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("other", 0), ("unknown", 1))))
if mibBuilder.loadTexts: dMTFElectricalCurrentProbeEvSub.setStatus('mandatory')
dMTFElectricalCurrentProbeEvt1 = NotificationType((1, 3, 6, 1, 4, 1, 412, 2, 4, 55) + (0,1)).setObjects(("DMTF-DMI-MIB", "dmiEventDateTime"), ("DMTF-DMI-MIB", "dmiCompId"), ("DMTF-DMI-MIB", "dmiEventSeverity"), ("DMTF-DMI-MIB", "dmiEventStateKey"), ("DMTF-DMI-MIB", "dmiEventAssociatedGroup"), ("BASEBRDD-MIB-MIB", "dMTFElectricalCurrentProbeEvSys"), ("BASEBRDD-MIB-MIB", "dMTFElectricalCurrentProbeEvSub"))
dMTFElectricalCurrentProbeEvt2 = NotificationType((1, 3, 6, 1, 4, 1, 412, 2, 4, 55) + (0,2)).setObjects(("DMTF-DMI-MIB", "dmiEventDateTime"), ("DMTF-DMI-MIB", "dmiCompId"), ("DMTF-DMI-MIB", "dmiEventSeverity"), ("DMTF-DMI-MIB", "dmiEventStateKey"), ("DMTF-DMI-MIB", "dmiEventAssociatedGroup"), ("BASEBRDD-MIB-MIB", "dMTFElectricalCurrentProbeEvSys"), ("BASEBRDD-MIB-MIB", "dMTFElectricalCurrentProbeEvSub"))
dMTFPhysicalMemoryArrayEvSys = MibScalar((1, 3, 6, 1, 4, 1, 412, 2, 4, 33, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("other", 0), ("unknown", 1))))
if mibBuilder.loadTexts: dMTFPhysicalMemoryArrayEvSys.setStatus('mandatory')
dMTFPhysicalMemoryArrayEvSub = MibScalar((1, 3, 6, 1, 4, 1, 412, 2, 4, 33, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("other", 0), ("unknown", 1))))
if mibBuilder.loadTexts: dMTFPhysicalMemoryArrayEvSub.setStatus('mandatory')
dMTFPhysicalMemoryArrayEvt1 = NotificationType((1, 3, 6, 1, 4, 1, 412, 2, 4, 33) + (0,1)).setObjects(("DMTF-DMI-MIB", "dmiEventDateTime"), ("DMTF-DMI-MIB", "dmiCompId"), ("DMTF-DMI-MIB", "dmiEventSeverity"), ("DMTF-DMI-MIB", "dmiEventStateKey"), ("DMTF-DMI-MIB", "dmiEventAssociatedGroup"), ("BASEBRDD-MIB-MIB", "dMTFPhysicalMemoryArrayEvSys"), ("BASEBRDD-MIB-MIB", "dMTFPhysicalMemoryArrayEvSub"))
dMTFPhysicalMemoryArrayEvt2 = NotificationType((1, 3, 6, 1, 4, 1, 412, 2, 4, 33) + (0,2)).setObjects(("DMTF-DMI-MIB", "dmiEventDateTime"), ("DMTF-DMI-MIB", "dmiCompId"), ("DMTF-DMI-MIB", "dmiEventSeverity"), ("DMTF-DMI-MIB", "dmiEventStateKey"), ("DMTF-DMI-MIB", "dmiEventAssociatedGroup"), ("BASEBRDD-MIB-MIB", "dMTFPhysicalMemoryArrayEvSys"), ("BASEBRDD-MIB-MIB", "dMTFPhysicalMemoryArrayEvSub"))
dMTFPowerSupplyEvSys = MibScalar((1, 3, 6, 1, 4, 1, 412, 2, 4, 16, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("other", 0), ("unknown", 1))))
if mibBuilder.loadTexts: dMTFPowerSupplyEvSys.setStatus('mandatory')
dMTFPowerSupplyEvSub = MibScalar((1, 3, 6, 1, 4, 1, 412, 2, 4, 16, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("other", 0), ("unknown", 1))))
if mibBuilder.loadTexts: dMTFPowerSupplyEvSub.setStatus('mandatory')
dMTFPowerSupplyEvt1 = NotificationType((1, 3, 6, 1, 4, 1, 412, 2, 4, 16) + (0,1)).setObjects(("DMTF-DMI-MIB", "dmiEventDateTime"), ("DMTF-DMI-MIB", "dmiCompId"), ("DMTF-DMI-MIB", "dmiEventSeverity"), ("DMTF-DMI-MIB", "dmiEventStateKey"), ("DMTF-DMI-MIB", "dmiEventAssociatedGroup"), ("BASEBRDD-MIB-MIB", "dMTFPowerSupplyEvSys"), ("BASEBRDD-MIB-MIB", "dMTFPowerSupplyEvSub"))
dMTFPowerSupplyEvt2 = NotificationType((1, 3, 6, 1, 4, 1, 412, 2, 4, 16) + (0,2)).setObjects(("DMTF-DMI-MIB", "dmiEventDateTime"), ("DMTF-DMI-MIB", "dmiCompId"), ("DMTF-DMI-MIB", "dmiEventSeverity"), ("DMTF-DMI-MIB", "dmiEventStateKey"), ("DMTF-DMI-MIB", "dmiEventAssociatedGroup"), ("BASEBRDD-MIB-MIB", "dMTFPowerSupplyEvSys"), ("BASEBRDD-MIB-MIB", "dMTFPowerSupplyEvSub"))
dMTFTemperatureProbeEvSys = MibScalar((1, 3, 6, 1, 4, 1, 412, 2, 4, 54, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("other", 0), ("unknown", 1))))
if mibBuilder.loadTexts: dMTFTemperatureProbeEvSys.setStatus('mandatory')
dMTFTemperatureProbeEvSub = MibScalar((1, 3, 6, 1, 4, 1, 412, 2, 4, 54, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("other", 0), ("unknown", 1))))
if mibBuilder.loadTexts: dMTFTemperatureProbeEvSub.setStatus('mandatory')
dMTFTemperatureProbeEvt1 = NotificationType((1, 3, 6, 1, 4, 1, 412, 2, 4, 54) + (0,1)).setObjects(("DMTF-DMI-MIB", "dmiEventDateTime"), ("DMTF-DMI-MIB", "dmiCompId"), ("DMTF-DMI-MIB", "dmiEventSeverity"), ("DMTF-DMI-MIB", "dmiEventStateKey"), ("DMTF-DMI-MIB", "dmiEventAssociatedGroup"), ("BASEBRDD-MIB-MIB", "dMTFTemperatureProbeEvSys"), ("BASEBRDD-MIB-MIB", "dMTFTemperatureProbeEvSub"))
dMTFVoltageProbeEvSys = MibScalar((1, 3, 6, 1, 4, 1, 412, 2, 4, 53, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("other", 0), ("unknown", 1))))
if mibBuilder.loadTexts: dMTFVoltageProbeEvSys.setStatus('mandatory')
dMTFVoltageProbeEvSub = MibScalar((1, 3, 6, 1, 4, 1, 412, 2, 4, 53, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("other", 0), ("unknown", 1))))
if mibBuilder.loadTexts: dMTFVoltageProbeEvSub.setStatus('mandatory')
dMTFVoltageProbeEvt1 = NotificationType((1, 3, 6, 1, 4, 1, 412, 2, 4, 53) + (0,1)).setObjects(("DMTF-DMI-MIB", "dmiEventDateTime"), ("DMTF-DMI-MIB", "dmiCompId"), ("DMTF-DMI-MIB", "dmiEventSeverity"), ("DMTF-DMI-MIB", "dmiEventStateKey"), ("DMTF-DMI-MIB", "dmiEventAssociatedGroup"), ("BASEBRDD-MIB-MIB", "dMTFVoltageProbeEvSys"), ("BASEBRDD-MIB-MIB", "dMTFVoltageProbeEvSub"))
mibBuilder.exportSymbols("BASEBRDD-MIB-MIB", dMTFPhysicalContainerGlobalTableEntry=dMTFPhysicalContainerGlobalTableEntry, dMTFMemoryArrayMappedAddressesTable=dMTFMemoryArrayMappedAddressesTable, dellSecurityState=dellSecurityState, deviceFlagsAtt5=deviceFlagsAtt5, voltageProbeAccuracyAtt19=voltageProbeAccuracyAtt19, dellSystemChassisExtensionEvSol=dellSystemChassisExtensionEvSol, totalOutputPowerAtt21=totalOutputPowerAtt21, chassVoltStatusAtt7=chassVoltStatusAtt7, modelAtt5=modelAtt5, systemCacheIndexAtt1=systemCacheIndexAtt1, pwrSupplyParentIndexAtt1=pwrSupplyParentIndexAtt1, mappedRangeStartingAddressAtt3=mappedRangeStartingAddressAtt3, dMTFPhysicalMemoryArrayTable=dMTFPhysicalMemoryArrayTable, pwrUnitMaxWarn12vAtt9=pwrUnitMaxWarn12vAtt9, powerUnitIndexAtt4=powerUnitIndexAtt4, dMTFComponentIDTable=dMTFComponentIDTable, dellFanSensorState=dellFanSensorState, dMTFSystemHardwareSecurityTable=dMTFSystemHardwareSecurityTable, dMTFElectricalCurrentProbeEvt2=dMTFElectricalCurrentProbeEvt2, range2CurrentProbeIndexAtt14=range2CurrentProbeIndexAtt14, powerControlRequestAtt1=powerControlRequestAtt1, voltageLevelLowerThresholdNonCriticalAtt11=voltageLevelLowerThresholdNonCriticalAtt11, dellVoltageProbeEvSol=dellVoltageProbeEvSol, dellSystemChassisExtensionTable=dellSystemChassisExtensionTable, systemResourceDMAInfoIndexAtt1=systemResourceDMAInfoIndexAtt1, fRUGroupIndexAtt8=fRUGroupIndexAtt8, server2=server2, ampLocationAtt10=ampLocationAtt10, dellSystemResetEvt1=dellSystemResetEvt1, dMTFPhysicalMemoryArrayEvSys=dMTFPhysicalMemoryArrayEvSys, DmiCounter64=DmiCounter64, userControlAtt3=userControlAtt3, inputVoltageCapabilityDescriptionAtt6=inputVoltageCapabilityDescriptionAtt6, pwrLocationAtt6=pwrLocationAtt6, fRUGroupIndexAtt22=fRUGroupIndexAtt22, dMTFMemoryDeviceMappedAddressesState=dMTFMemoryDeviceMappedAddressesState, iNTELMIFTOMIBEntry=iNTELMIFTOMIBEntry, powerUnitRedundancyStatusAtt2=powerUnitRedundancyStatusAtt2, serialPortIndexAtt1=serialPortIndexAtt1, temperatureProbeLocationAtt2=temperatureProbeLocationAtt2, errorDataAtt12=errorDataAtt12, fansWarningMinAtt6=fansWarningMinAtt6, currentErrorStatusAtt10=currentErrorStatusAtt10, dELLSystemsSummaryInformationTable=dELLSystemsSummaryInformationTable, dMTFSystemResources2Table=dMTFSystemResources2Table, errorOperationAtt15=errorOperationAtt15, cacheableAtt5=cacheableAtt5, dellSystemChassisExtensionEvSys=dellSystemChassisExtensionEvSys, operationalGroupIndexAtt9_1=operationalGroupIndexAtt9_1, dMTFProcessorTable=dMTFProcessorTable, dMTFMemoryArrayMappedAddressesEntry=dMTFMemoryArrayMappedAddressesEntry, chassServiceTagAtt13=chassServiceTagAtt13, triggerTypeAtt2=triggerTypeAtt2, dMTFPhysicalContainerGlobalTableState=dMTFPhysicalContainerGlobalTableState, electricalCurrentReadingUpperThresholdNonCriticalAtt12=electricalCurrentReadingUpperThresholdNonCriticalAtt12, processorIndexAtt1=processorIndexAtt1, dMTFFRUState=dMTFFRUState, bIOSIndexAtt1=bIOSIndexAtt1, deviceGroupIndexAtt2=deviceGroupIndexAtt2, dMTFMemoryArrayMappedAddressesState=dMTFMemoryArrayMappedAddressesState, dMTFComponentIDEntry=dMTFComponentIDEntry, dMTFPowerUnitGlobalTableEntry=dMTFPowerUnitGlobalTableEntry, typeCTimingAtt10=typeCTimingAtt10, parallelPortIndexAtt1=parallelPortIndexAtt1, dMTFSystemResources2Entry=dMTFSystemResources2Entry, logicalDeviceIDClassCodeAtt4=logicalDeviceIDClassCodeAtt4, pwrUnitLevel33vAtt4=pwrUnitLevel33vAtt4, administratorPasswordStatisAtt3=administratorPasswordStatisAtt3, dMTFElectricalCurrentProbeEvt1=dMTFElectricalCurrentProbeEvt1, dell=dell, fatalErrorCountAtt7=fatalErrorCountAtt7, sharedAtt13=sharedAtt13, manufacturerAtt1=manufacturerAtt1, fansMinFailAtt8=fansMinFailAtt8, operatingSystemBootDeviceStorageTypeAtt5=operatingSystemBootDeviceStorageTypeAtt5, slotDescriptionAtt5=slotDescriptionAtt5, pwrUnitStatusAtt1=pwrUnitStatusAtt1, voltMinWarnAtt6=voltMinWarnAtt6, memoryErrorCorrectionAtt7=memoryErrorCorrectionAtt7, errorAddressAtt14=errorAddressAtt14, resourceAssignmentAtt4=resourceAssignmentAtt4, containerIndexAtt9=containerIndexAtt9, dellTemperatureProbeEvSol=dellTemperatureProbeEvSol, dMATransferPreferenceAtt5=dMATransferPreferenceAtt5, pwrUnitLevel12vAtt8=pwrUnitLevel12vAtt8, dMTFParallelPortsTable=dMTFParallelPortsTable, tempMinWarnAtt6=tempMinWarnAtt6, electricalCurrentProbeReadingAtt5=electricalCurrentProbeReadingAtt5, dMTFTemperatureProbeTable=dMTFTemperatureProbeTable, operatingSystemBootPartitionIndexAtt7=operatingSystemBootPartitionIndexAtt7, temperatureReadingLowerThresholdNonCriticalAtt11=temperatureReadingLowerThresholdNonCriticalAtt11, dMTFPowerSupplyEvt1=dMTFPowerSupplyEvt1, fansStatusAtt4=fansStatusAtt4, dMTFPowerUnitGlobalTableState=dMTFPowerUnitGlobalTableState, voltageProbeIndexAtt1=voltageProbeIndexAtt1, dMTFSystemResourceMemoryInfoEntry=dMTFSystemResourceMemoryInfoEntry, operationalGroupIndexAtt21_2=operationalGroupIndexAtt21_2, warningErrorCountAtt9=warningErrorCountAtt9, pwrUnitGlobalMaxWarnAtt3=pwrUnitGlobalMaxWarnAtt3, dMTFElectricalCurrentProbeEvSys=dMTFElectricalCurrentProbeEvSys, systemResourcesIndexAtt1=systemResourcesIndexAtt1, voltMaxFailAtt9=voltMaxFailAtt9, revisionLevelAtt8=revisionLevelAtt8, systemCacheLevelAtt2=systemCacheLevelAtt2, fRUGroupIndexAtt20=fRUGroupIndexAtt20, dellMemoryPrefailureTable=dellMemoryPrefailureTable, dellMemoryPrefailureState=dellMemoryPrefailureState, fansReadingAtt5=fansReadingAtt5, ampReadingAtt5=ampReadingAtt5, dellBaseBoardMIBAtt1=dellBaseBoardMIBAtt1, dmiDynOid386845712=dmiDynOid386845712, ampMinFailAtt8=ampMinFailAtt8, interleavePositionAtt7=interleavePositionAtt7, DmiCompId=DmiCompId, mappedRangeEndingAddressAtt4=mappedRangeEndingAddressAtt4, temperatureProbeTableIndexAtt1=temperatureProbeTableIndexAtt1, dMTFPowerSupplyEntry=dMTFPowerSupplyEntry, range1InputVoltageHighAtt8=range1InputVoltageHighAtt8, dMTFPhysicalContainerGlobalTableEvSub=dMTFPhysicalContainerGlobalTableEvSub, dMTFSystemResourceDMAInfoTable=dMTFSystemResourceDMAInfoTable, systemCacheSizeAtt4=systemCacheSizeAtt4, voltageLevelUpperThresholdNonCriticalAtt12=voltageLevelUpperThresholdNonCriticalAtt12, dMTFParallelPortsEntry=dMTFParallelPortsEntry, pwrSupplyStatusAtt4=pwrSupplyStatusAtt4, dMTFPowerUnitGlobalTableTable=dMTFPowerUnitGlobalTableTable, chassThermalShutdownAtt20=chassThermalShutdownAtt20, powerStateAtt5=powerStateAtt5, dellSystemResetEntry=dellSystemResetEntry, electricalCurrentReadingUpperThresholdNonRecoverabAtt16=electricalCurrentReadingUpperThresholdNonRecoverabAtt16, bIOSManufacturerAtt2=bIOSManufacturerAtt2, dMTFSystemResourceIRQInfoEntry=dMTFSystemResourceIRQInfoEntry, dMTFPhysicalMemoryArrayEvt1=dMTFPhysicalMemoryArrayEvt1, voltStatusAtt4=voltStatusAtt4, operatingSystemVersionAtt3=operatingSystemVersionAtt3, chassTempProbesAtt4=chassTempProbesAtt4, coolingDeviceTypeAtt5=coolingDeviceTypeAtt5, dMTFSystemResourceIOInfoState=dMTFSystemResourceIOInfoState, memoryArrayIndexAtt2=memoryArrayIndexAtt2, deviceErrorTypeAtt12=deviceErrorTypeAtt12, voltageStatusAtt4=voltageStatusAtt4, dMTFSystemResourceDMAInfoEntry=dMTFSystemResourceDMAInfoEntry, dMTFProcessorState=dMTFProcessorState, readPolicyAtt13=readPolicyAtt13, dMTFTemperatureProbeEvt1=dMTFTemperatureProbeEvt1, postLogIndexAtt1=postLogIndexAtt1, voltParentIndexAtt1=voltParentIndexAtt1, dellTemperatureProbeTable=dellTemperatureProbeTable, dellGlobalPowerUnitEvSub=dellGlobalPowerUnitEvSub, dellTemperatureProbeState=dellTemperatureProbeState, temperatureProbeTemperatureReadingAtt5=temperatureProbeTemperatureReadingAtt5, dMTFSystemResourceDeviceInfoState=dMTFSystemResourceDeviceInfoState, dMTFPhysicalContainerGlobalTableEvt7=dMTFPhysicalContainerGlobalTableEvt7, dmiDynOid3922453424=dmiDynOid3922453424, partitionIDAtt5=partitionIDAtt5, dMTFMemoryDeviceMappedAddressesTable=dMTFMemoryDeviceMappedAddressesTable, range2InputFrequencyLowAtt19=range2InputFrequencyLowAtt19, operationalGroupIndexAtt8_2=operationalGroupIndexAtt8_2, systemCacheErrorCorrectionAtt6=systemCacheErrorCorrectionAtt6, fansParentIndexAtt1=fansParentIndexAtt1, dMTFCoolingDeviceTable=dMTFCoolingDeviceTable, pwrUnitUidAtt10=pwrUnitUidAtt10, timedPowerOnAvailableAtt2=timedPowerOnAvailableAtt2, byteModeAtt7=byteModeAtt7, temperatureProbeToleranceAtt18=temperatureProbeToleranceAtt18, dellSystemChassisExtensionEntry=dellSystemChassisExtensionEntry, automaticSystemResetTimerAtt6=automaticSystemResetTimerAtt6, dMASupportAtt7=dMASupportAtt7, dMTFElectricalCurrentProbeState=dMTFElectricalCurrentProbeState, fRUGroupIndexAtt20_2=fRUGroupIndexAtt20_2, lastErrorUpdateAtt9=lastErrorUpdateAtt9, formFactorAtt6=formFactorAtt6, dMTFSystemResourceDMAInfoState=dMTFSystemResourceDMAInfoState, tempStatusAtt4=tempStatusAtt4, processorUpgradeAtt7=processorUpgradeAtt7, dMTFCoolingDeviceState=dMTFCoolingDeviceState, dellFirmwareEntry=dellFirmwareEntry, voltReadingAtt5=voltReadingAtt5, electricalCurrentProbeMinimumAtt10=electricalCurrentProbeMinimumAtt10, operationalGroupIndexAtt3_1=operationalGroupIndexAtt3_1, pwrSupplyOnlineAtt5=pwrSupplyOnlineAtt5, monitoredElectricalCurrentNormalMaximumAtt7=monitoredElectricalCurrentNormalMaximumAtt7, userIndexAtt1=userIndexAtt1, operatingSystemAtt1=operatingSystemAtt1, electricalCurrentProbeResolutionAtt17=electricalCurrentProbeResolutionAtt17, range1InputFrequencyLowAtt17=range1InputFrequencyLowAtt17, operationalGroupIndexAtt9=operationalGroupIndexAtt9, frontPanelResetStatusAtt4=frontPanelResetStatusAtt4, memoryArrayMappedAddressesTableIndexAtt1=memoryArrayMappedAddressesTableIndexAtt1, vendorSyndromeAtt18=vendorSyndromeAtt18, dellRedundantPowerSupplyEntry=dellRedundantPowerSupplyEntry, DmiDisplaystring=DmiDisplaystring, dellPOSTLogState=dellPOSTLogState, dellVoltageProbeEvSub=dellVoltageProbeEvSub, dellCurrentProbeTable=dellCurrentProbeTable, dellGlobalPowerUnitEvt1=dellGlobalPowerUnitEvt1, parallelBaseIOAddressAtt2=parallelBaseIOAddressAtt2, fRUGroupIndexAtt20_1=fRUGroupIndexAtt20_1, range1InputFrequencyHighAtt18=range1InputFrequencyHighAtt18, temperatureProbeDescriptionAtt3=temperatureProbeDescriptionAtt3, dMTFCoolingDeviceEvt2=dMTFCoolingDeviceEvt2, systemResourceIRQInfoIndexAtt1=systemResourceIRQInfoIndexAtt1, dmtfStdMifs=dmtfStdMifs, connectorTypeAtt5_1=connectorTypeAtt5_1, systemNameAtt1=systemNameAtt1, voltMaxWarnAtt7=voltMaxWarnAtt7, monitoredElectricalCurrentNormalMinimumAtt8=monitoredElectricalCurrentNormalMinimumAtt8, operatingSystemBootDeviceIndexAtt6=operatingSystemBootDeviceIndexAtt6, tempMaxFailAtt9=tempMaxFailAtt9, dellCurrentProbeState=dellCurrentProbeState, dellDialupEntry=dellDialupEntry, monitoredVoltageNominalLevelAtt6=monitoredVoltageNominalLevelAtt6, dellTemperatureProbeEvSub=dellTemperatureProbeEvSub, dMTFSystemBIOSTable=dMTFSystemBIOSTable, deviceGroupIndexAtt2_1=deviceGroupIndexAtt2_1, pwrUnitLevel5vAtt6=pwrUnitLevel5vAtt6, dMTFPhysicalContainerGlobalTableEvSys=dMTFPhysicalContainerGlobalTableEvSys, dellCurrentProbeEntry=dellCurrentProbeEntry, dMAAddressSizeAtt3=dMAAddressSizeAtt3, firmwareIndexAtt2=firmwareIndexAtt2, dellSystemResetEvSol=dellSystemResetEvSol, bIOSReleaseDateAtt8=bIOSReleaseDateAtt8, DmiCounter=DmiCounter, errorResolutionAtt15=errorResolutionAtt15, dMTFPhysicalContainerGlobalTableEvt1=dMTFPhysicalContainerGlobalTableEvt1, temperatureReadingUpperThresholdNonRecoverableAtt16=temperatureReadingUpperThresholdNonRecoverableAtt16, dMTFCoolingDeviceEvSys=dMTFCoolingDeviceEvSys, replacementPolicyAtt12=replacementPolicyAtt12, bIOSStartingAddressAtt5=bIOSStartingAddressAtt5, startAddressAtt8=startAddressAtt8, primaryBIOSAtt9=primaryBIOSAtt9, dMTFMemoryDeviceTable=dMTFMemoryDeviceTable, chassPsStatusAtt11=chassPsStatusAtt11, temperatureProbeMinimumAtt10=temperatureProbeMinimumAtt10, ampTypeAtt3=ampTypeAtt3, voltageProbeResolutionAtt17=voltageProbeResolutionAtt17, operationalGroupIndexAtt23=operationalGroupIndexAtt23, bankLocatorAtt4=bankLocatorAtt4, fRUGroupIndexAtt7=fRUGroupIndexAtt7, majorErrorCountAtt8=majorErrorCountAtt8, shareableAtt12=shareableAtt12, functionNumberAtt7=functionNumberAtt7, operationalStateInstanceIndexAtt1=operationalStateInstanceIndexAtt1, pwrSupplyTypeAtt3=pwrSupplyTypeAtt3, dMTFPhysicalContainerGlobalTableEvt3=dMTFPhysicalContainerGlobalTableEvt3, channelTimingAtt9=channelTimingAtt9, iRQUsedAtt3_1=iRQUsedAtt3_1, automaticSettingsAtt2=automaticSettingsAtt2, dMTFVoltageProbeEvt1=dMTFVoltageProbeEvt1, resourceUserIDAtt8=resourceUserIDAtt8, dMTFVoltageProbeEvSys=dMTFVoltageProbeEvSys, dMIRPCTypesAtt7=dMIRPCTypesAtt7, resourceNumberAtt6=resourceNumberAtt6, dMTFOperationalStateState=dMTFOperationalStateState, memoryDeviceSetIDAtt2=memoryDeviceSetIDAtt2)
mibBuilder.exportSymbols("BASEBRDD-MIB-MIB", currentSpeedAtt6=currentSpeedAtt6, dMTFSystemSlotsEntry=dMTFSystemSlotsEntry, iODecodeAtt2=iODecodeAtt2, serialPortCapabilitiesAtt7=serialPortCapabilitiesAtt7, dellFanSensorEvSol=dellFanSensorEvSol, systemCacheWritePolicyAtt5=systemCacheWritePolicyAtt5, partitionRowPositionAtt6=partitionRowPositionAtt6, dMTFOperationalStateEntry=dMTFOperationalStateEntry, range2VoltageProbeIndexAtt13=range2VoltageProbeIndexAtt13, temperatureReadingUpperThresholdCriticalAtt14=temperatureReadingUpperThresholdCriticalAtt14, tempIndexAtt2=tempIndexAtt2, chassUidAtt14=chassUidAtt14, dellTemperatureProbeEntry=dellTemperatureProbeEntry, dMTFSystemResources2State=dMTFSystemResources2State, slotWidthAtt3=slotWidthAtt3, level3CacheIndexAtt12=level3CacheIndexAtt12, fRUInternetUniformResourceLocatorAtt12=fRUInternetUniformResourceLocatorAtt12, pwrSupplyIndexAtt2=pwrSupplyIndexAtt2, dellCurrentProbeEvt1=dellCurrentProbeEvt1, memoryArrayUseAtt3=memoryArrayUseAtt3, operatingSystemNameAtt2=operatingSystemNameAtt2, bIOSVersionAtt3=bIOSVersionAtt3, dMTFSerialPortsEntry=dMTFSerialPortsEntry, chassIdentifyAtt16=chassIdentifyAtt16, voltageProbeVoltageLevelAtt5=voltageProbeVoltageLevelAtt5, virtualSlotAtt7=virtualSlotAtt7, voltMinFailAtt8=voltMinFailAtt8, dMTFElectricalCurrentProbeTable=dMTFElectricalCurrentProbeTable, dMTFPhysicalMemoryArrayEvt2=dMTFPhysicalMemoryArrayEvt2, lastErrorUpdateAtt14=lastErrorUpdateAtt14, electricalCurrentProbeLocationAtt2=electricalCurrentProbeLocationAtt2, pwrUnitIndexAtt11=pwrUnitIndexAtt11, deviceIDAtt2=deviceIDAtt2, fansMaxFailAtt9=fansMaxFailAtt9, monitoredTemperatureNominalReadingAtt6=monitoredTemperatureNominalReadingAtt6, ampParentIndexAtt1=ampParentIndexAtt1, dMTFPhysicalMemoryArrayEvSub=dMTFPhysicalMemoryArrayEvSub, temperatureProbeMaximumAtt9=temperatureProbeMaximumAtt9, ampMaxFailAtt9=ampMaxFailAtt9, dellVoltageProbeState=dellVoltageProbeState, dMTFSystemCacheEntry=dMTFSystemCacheEntry, firmwareChassisIndexAtt1=firmwareChassisIndexAtt1, voltageLevelLowerThresholdCriticalAtt13=voltageLevelLowerThresholdCriticalAtt13, containerLocationAtt11=containerLocationAtt11, dMTFSystemBIOSState=dMTFSystemBIOSState, dellGlobalPowerUnitEvt2=dellGlobalPowerUnitEvt2, dellGlobalPowerUnitEvSys=dellGlobalPowerUnitEvSys, level2CacheIndexAtt11=level2CacheIndexAtt11, fRUGroupIndexAtt7_1=fRUGroupIndexAtt7_1, deviceSetAtt11=deviceSetAtt11, parallelPortSecuritySettingsAtt10=parallelPortSecuritySettingsAtt10, dellGlobalPowerUnitEntry=dellGlobalPowerUnitEntry, memoryDeviceTableIndexAtt1=memoryDeviceTableIndexAtt1, pwrUnitGlobalLevelAtt2=pwrUnitGlobalLevelAtt2, errorResolutionAtt21=errorResolutionAtt21, maximumSpeedAtt5=maximumSpeedAtt5, dMTFCoolingDeviceEntry=dMTFCoolingDeviceEntry, voltTypeAtt3=voltTypeAtt3, dellSystemChassisExtensionEvt1=dellSystemChassisExtensionEvt1, automaticCapabilitiesAtt1=automaticCapabilitiesAtt1, firmwareTypeAtt3=firmwareTypeAtt3, fansTypeAtt3=fansTypeAtt3, readWriteAtt7=readWriteAtt7, dMTFPowerSupplyEvSys=dMTFPowerSupplyEvSys, systemResourceIOInfoIndexAtt1=systemResourceIOInfoIndexAtt1, temperatureProbeResolutionAtt17=temperatureProbeResolutionAtt17, dMTFPowerSupplyState=dMTFPowerSupplyState, productAtt2=productAtt2, ampMinWarnAtt6=ampMinWarnAtt6, maximumSpeedAtt6=maximumSpeedAtt6, dellFirmwareState=dellFirmwareState, dellMemoryPrefailureEntry=dellMemoryPrefailureEntry, devicePredictedFailureStatusAtt11=devicePredictedFailureStatusAtt11, arrayErrorAddressAtt20=arrayErrorAddressAtt20, usageStateAtt4=usageStateAtt4, pwrUnitMaxWarn5vAtt7=pwrUnitMaxWarn5vAtt7, administrativeStateAtt6=administrativeStateAtt6, voltIndexAtt2=voltIndexAtt2, dellGlobalPowerUnitEvSol=dellGlobalPowerUnitEvSol, availabilityStatusAtt5=availabilityStatusAtt5, busTypeAtt8=busTypeAtt8, versionAtt2=versionAtt2, dMTFSystemResourceDeviceInfoEntry=dMTFSystemResourceDeviceInfoEntry, dMTFMemoryDeviceEntry=dMTFMemoryDeviceEntry, pwrUnitMaxWarn33vAtt5=pwrUnitMaxWarn33vAtt5, fRUGroupIndexAtt2_1=fRUGroupIndexAtt2_1, electricalCurrentReadingLowerThresholdNonCriticalAtt11=electricalCurrentReadingLowerThresholdNonCriticalAtt11, mIBOIDAtt2=mIBOIDAtt2, dellVoltageProbeEvSys=dellVoltageProbeEvSys, dMTFVoltageProbeState=dMTFVoltageProbeState, dellRedundantPowerSupplyTable=dellRedundantPowerSupplyTable, dellPOSTLogTable=dellPOSTLogTable, voltageProbeToleranceAtt18=voltageProbeToleranceAtt18, voltageLevelLowerThresholdNonRecoverableAtt15=voltageLevelLowerThresholdNonRecoverableAtt15, tempMaxWarnAtt7=tempMaxWarnAtt7, dellSystemResetTable=dellSystemResetTable, memoryDeviceIndexAtt1=memoryDeviceIndexAtt1, containerOrChassisTypeAtt1=containerOrChassisTypeAtt1, esmLogDataAtt2=esmLogDataAtt2, systemPrimaryUserPhoneAtt4=systemPrimaryUserPhoneAtt4, operationalGroupIndexAtt8_1=operationalGroupIndexAtt8_1, dMTFTemperatureProbeEvSys=dMTFTemperatureProbeEvSys, systemLocationAtt2=systemLocationAtt2, chassMemStatusAtt21=chassMemStatusAtt21, powerOnPasswordStatusAtt1=powerOnPasswordStatusAtt1, dellTemperatureProbeEvt1=dellTemperatureProbeEvt1, dellEsmLogEntry=dellEsmLogEntry, requestAtt4=requestAtt4, dellCurrentProbeEvSol=dellCurrentProbeEvSol, operatingSystemDescriptionAtt8=operatingSystemDescriptionAtt8, temperatureStatusAtt4=temperatureStatusAtt4, deviceLocatorAtt3=deviceLocatorAtt3, chassAmpProbesAtt10=chassAmpProbesAtt10, dataDepthAtt8=dataDepthAtt8, logicalNameAtt4=logicalNameAtt4, ampMaxWarnAtt7=ampMaxWarnAtt7, operationalGroupIndexAtt3=operationalGroupIndexAtt3, processorVersionInformationAtt4=processorVersionInformationAtt4, dellSystemResetEvSub=dellSystemResetEvSub, coolingUnitIndexAtt4=coolingUnitIndexAtt4, dMTFSerialPortsState=dMTFSerialPortsState, voltLocationAtt10=voltLocationAtt10, dMTFTemperatureProbeEvSub=dMTFTemperatureProbeEvSub, dMTFSystemPowerControlsEntry=dMTFSystemPowerControlsEntry, dMTFParallelPortsState=dMTFParallelPortsState, range1ElectricalCurrentProbeIndexAtt10=range1ElectricalCurrentProbeIndexAtt10, dMTFSystemSlotsState=dMTFSystemSlotsState, fRUGroupIndexAtt2=fRUGroupIndexAtt2, numberOfMemoryDeviceSocketsUsedAtt6=numberOfMemoryDeviceSocketsUsedAtt6, voltageLevelUpperThresholdNonRecoverableAtt16=voltageLevelUpperThresholdNonRecoverableAtt16, associativityAtt15=associativityAtt15, dMTFOperatingSystemEntry=dMTFOperatingSystemEntry, volatilityAtt11=volatilityAtt11, dMTFSystemHardwareSecurityEntry=dMTFSystemHardwareSecurityEntry, dMTFSystemSlotsTable=dMTFSystemSlotsTable, dMTFPhysicalContainerGlobalTableEvt5=dMTFPhysicalContainerGlobalTableEvt5, dellEsmLogState=dellEsmLogState, supportPhoneNumberAtt11=supportPhoneNumberAtt11, systemCacheSpeedAtt3=systemCacheSpeedAtt3, triggerLevelAtt3=triggerLevelAtt3, flushTimerAtt14=flushTimerAtt14, memoryArrayLocationAtt2=memoryArrayLocationAtt2, assetTagAtt2=assetTagAtt2, dMTFMemoryDeviceMappedAddressesEntry=dMTFMemoryDeviceMappedAddressesEntry, cacheTypeAtt6=cacheTypeAtt6, electricalCurrentStatusAtt4=electricalCurrentStatusAtt4, systemBootupTimeAtt5=systemBootupTimeAtt5, voltageLevelUpperThresholdCriticalAtt14=voltageLevelUpperThresholdCriticalAtt14, systemCacheTypeAtt9=systemCacheTypeAtt9, sizeAtt5=sizeAtt5, warrantyStartDateAtt9=warrantyStartDateAtt9, processorTypeAtt2=processorTypeAtt2, dMTFPowerSupplyEvSub=dMTFPowerSupplyEvSub, dellRedundantPowerSupplyState=dellRedundantPowerSupplyState, dMTFPhysicalContainerGlobalTableEvt4=dMTFPhysicalContainerGlobalTableEvt4, totalWidthAtt7=totalWidthAtt7, dMTFSystemBIOSEntry=dMTFSystemBIOSEntry, dellPOSTLogEntry=dellPOSTLogEntry, dellSystemResetEvSys=dellSystemResetEvSys, ampStatusAtt4=ampStatusAtt4, operatingSystemIndexAtt1=operatingSystemIndexAtt1, dmtfSystemsMIF=dmtfSystemsMIF, dMTFSystemResourceMemoryInfoState=dMTFSystemResourceMemoryInfoState, dMTFElectricalCurrentProbeEvSub=dMTFElectricalCurrentProbeEvSub, processorFamilyAtt3=processorFamilyAtt3, installationAtt5=installationAtt5, temperatureProbeAccuracyAtt19=temperatureProbeAccuracyAtt19, range2InputFrequencyHighAtt20=range2InputFrequencyHighAtt20, dMTFFRUTable=dMTFFRUTable, dellFanSensorEvt1=dellFanSensorEvt1, chassMemDevicesAtt22=chassMemDevicesAtt22, dellGlobalPowerUnitTable=dellGlobalPowerUnitTable, activeInputVoltageRangeAtt15=activeInputVoltageRangeAtt15, fansLocationAtt10=fansLocationAtt10, level1CacheIndexAtt10=level1CacheIndexAtt10, chassTempStatusAtt3=chassTempStatusAtt3, DmiGauge=DmiGauge, dellSecurityEntry=dellSecurityEntry, tempMinFailAtt8=tempMinFailAtt8, dMTFPowerSupplyTable=dMTFPowerSupplyTable, operationalGroupIndexAtt21_1=operationalGroupIndexAtt21_1, chassIndexAtt1=chassIndexAtt1, dellCurrentProbeEvSub=dellCurrentProbeEvSub, range2InputVoltageHighAtt12=range2InputVoltageHighAtt12, dellVoltageProbeEvt1=dellVoltageProbeEvt1, dmtfServiceLayerMIF=dmtfServiceLayerMIF, resourceUserAtt2=resourceUserAtt2, inputVoltageRangeSwitchingAtt16=inputVoltageRangeSwitchingAtt16, serialBaseIOAddressAtt2=serialBaseIOAddressAtt2, manufacturerAtt4=manufacturerAtt4, bootupStateAtt4=bootupStateAtt4, dellSystemChassisExtensionState=dellSystemChassisExtensionState, voltageProbeDescriptionAtt3=voltageProbeDescriptionAtt3, connectorPinoutAtt6=connectorPinoutAtt6, errorDataSizeAtt11=errorDataSizeAtt11, monitoredElectricalCurrentNominalReadingAtt6=monitoredElectricalCurrentNominalReadingAtt6, slotIndexAtt1=slotIndexAtt1, systemClassAtt2=systemClassAtt2, dMTFSystemResourceDeviceInfoTable=dMTFSystemResourceDeviceInfoTable, fansMaxWarnAtt7=fansMaxWarnAtt7, warrantyDurationAtt10=warrantyDurationAtt10, dellFanSensorEntry=dellFanSensorEntry, dmtf=dmtf, electricalCurrentProbeToleranceAtt18=electricalCurrentProbeToleranceAtt18, thermalStateAtt6=thermalStateAtt6, range1InputVoltageLowAtt7=range1InputVoltageLowAtt7, dMTFPhysicalMemoryArrayState=dMTFPhysicalMemoryArrayState, typeDetailAtt10=typeDetailAtt10, dMTFVoltageProbeTable=dMTFVoltageProbeTable, mappedRangeStartingAddressAtt4=mappedRangeStartingAddressAtt4, dMTFPhysicalMemoryArrayEntry=dMTFPhysicalMemoryArrayEntry, mappedRangeEndingAddressAtt5=mappedRangeEndingAddressAtt5, dMTFSystemResourceIRQInfoTable=dMTFSystemResourceIRQInfoTable, dellFirmwareTable=dellFirmwareTable, iRQUsedAtt3=iRQUsedAtt3, buildNumberAtt3=buildNumberAtt3, dMTFVoltageProbeEntry=dMTFVoltageProbeEntry, resourceSetAtt3=resourceSetAtt3, range1VoltageProbeIndexAtt9=range1VoltageProbeIndexAtt9, dMTFCoolingDeviceEvt1=dMTFCoolingDeviceEvt1, dellCurrentProbeEvSys=dellCurrentProbeEvSys, serialNumberAtt4=serialNumberAtt4, dMTFOperatingSystemTable=dMTFOperatingSystemTable, slotTypeAtt2=slotTypeAtt2, dMTFSerialPortsTable=dMTFSerialPortsTable, operationalGroupIndexAtt17=operationalGroupIndexAtt17, monitoredTemperatureNormalMinimumAtt8=monitoredTemperatureNormalMinimumAtt8, operationalStatusAtt3=operationalStatusAtt3, userNameAtt2=userNameAtt2, DmiGroupId=DmiGroupId, lineSizeAtt10=lineSizeAtt10, DmiOctetstring=DmiOctetstring, verifyAtt6=verifyAtt6, fRUGroupIndexAtt16=fRUGroupIndexAtt16, eISARangeDescriptorAtt3=eISARangeDescriptorAtt3, deviceNumberAtt6=deviceNumberAtt6, dellVoltageProbeEntry=dellVoltageProbeEntry, decodeSupportAtt4=decodeSupportAtt4, resourceInfoIDAtt7=resourceInfoIDAtt7, manualControlAtt5=manualControlAtt5, ampIndexAtt2=ampIndexAtt2, esmLogIndexAtt1=esmLogIndexAtt1, connectorTypeAtt5=connectorTypeAtt5, containerSecurityStatusAtt12=containerSecurityStatusAtt12, dMTFVoltageProbeEvSub=dMTFVoltageProbeEvSub, dMTFSystemResourceIOInfoEntry=dMTFSystemResourceIOInfoEntry, temperatureProbeIndexAtt6=temperatureProbeIndexAtt6, monitoredVoltageNormalMinimumAtt8=monitoredVoltageNormalMinimumAtt8, dellDialupTable=dellDialupTable, slotCategoryAtt6=slotCategoryAtt6, dMTFPhysicalContainerGlobalTableEvt6=dMTFPhysicalContainerGlobalTableEvt6, dMTFProcessorEntry=dMTFProcessorEntry, electricalCurrentReadingLowerThresholdNonRecoverabAtt15=electricalCurrentReadingLowerThresholdNonRecoverabAtt15, dMTFPhysicalContainerGlobalTableEvt2=dMTFPhysicalContainerGlobalTableEvt2)
mibBuilder.exportSymbols("BASEBRDD-MIB-MIB", bIOSEndingAddressAtt6=bIOSEndingAddressAtt6, currentReadingUpperThresholdCriticalAtt14=currentReadingUpperThresholdCriticalAtt14, powerUnitIndexAtt1=powerUnitIndexAtt1, keyboardPasswordStatusAtt2=keyboardPasswordStatusAtt2, resourceSizeAtt10=resourceSizeAtt10, dMATransferWidthAtt2=dMATransferWidthAtt2, dellSecurityTable=dellSecurityTable, electricalCurrentProbeMaximumAtt9=electricalCurrentProbeMaximumAtt9, powerSupplyTypeAtt5=powerSupplyTypeAtt5, logicalNameAtt4_1=logicalNameAtt4_1, dellFanSensorTable=dellFanSensorTable, chassLEDConfigAtt18=chassLEDConfigAtt18, dMTFOperationalStateTable=dMTFOperationalStateTable, dMTFPowerSupplyEvt2=dMTFPowerSupplyEvt2, dMTFCoolingDeviceEvSub=dMTFCoolingDeviceEvSub, dMTFMemoryDeviceState=dMTFMemoryDeviceState, arrayErrorTypeAtt8=arrayErrorTypeAtt8, dMTFSystemPowerControlsTable=dMTFSystemPowerControlsTable, temperatureReadingUpperThresholdNonCriticalAtt12=temperatureReadingUpperThresholdNonCriticalAtt12, dMTFFRUEntry=dMTFFRUEntry, operationalGroupIndexAtt21=operationalGroupIndexAtt21, resourceUserAtt1=resourceUserAtt1, manualCapabilitiesAtt4=manualCapabilitiesAtt4, descriptionAtt3=descriptionAtt3, electricalCurrentProbeAccuracyAtt19=electricalCurrentProbeAccuracyAtt19, dMTFSystemCacheTable=dMTFSystemCacheTable, currentUsageAtt4=currentUsageAtt4, baseAlignmentAtt11=baseAlignmentAtt11, tempTypeAtt3=tempTypeAtt3, notificationNumberAtt3=notificationNumberAtt3, dellTemperatureProbeEvSys=dellTemperatureProbeEvSys, busMasterAtt6=busMasterAtt6, chassGlobStatusAtt2=chassGlobStatusAtt2, systemResourceMemoryInfoIndexAtt1=systemResourceMemoryInfoIndexAtt1, preferredProtocolAtt6=preferredProtocolAtt6, iNTELMIFTOMIBTable=iNTELMIFTOMIBTable, chassAmpStatusAtt9=chassAmpStatusAtt9, chassBackPlaneUidAtt15=chassBackPlaneUidAtt15, deviceErrorAddressAtt19=deviceErrorAddressAtt19, voltageProbeMaximumAtt9=voltageProbeMaximumAtt9, dMAMaximumTransferSizeAtt4=dMAMaximumTransferSizeAtt4, chassFaultClearAtt19=chassFaultClearAtt19, dellFanSensorEvSys=dellFanSensorEvSys, maximumMemoryCapacityAtt4=maximumMemoryCapacityAtt4, postLogDataAtt2=postLogDataAtt2, electricalCurrentReadingLowerThresholdCriticalAtt13=electricalCurrentReadingLowerThresholdCriticalAtt13, chassFansStatusAtt5=chassFansStatusAtt5, resourceTypeAtt5=resourceTypeAtt5, powerSupplyIndexAtt1=powerSupplyIndexAtt1, dMTFTemperatureProbeEntry=dMTFTemperatureProbeEntry, dMTFElectricalCurrentProbeEntry=dMTFElectricalCurrentProbeEntry, dMTFSystemCacheState=dMTFSystemCacheState, dmtfDynOids=dmtfDynOids, chassFansProbesAtt6=chassFansProbesAtt6, memoryDeviceMappedAddressesTableIndexAtt1=memoryDeviceMappedAddressesTableIndexAtt1, memoryArrayIndexAtt2_1=memoryArrayIndexAtt2_1, bIOSLoaderVersionAtt7=bIOSLoaderVersionAtt7, dellSystemChassisExtensionEvSub=dellSystemChassisExtensionEvSub, chassisLockPresentAtt3=chassisLockPresentAtt3, dELLSystemsManagementSoftwareEntry=dELLSystemsManagementSoftwareEntry, dmiDynOid73111109=dmiDynOid73111109, parallelPortCapabilitiesAtt8=parallelPortCapabilitiesAtt8, tempLocationAtt10=tempLocationAtt10, DmiInteger=DmiInteger, range2InputVoltageLowAtt11=range2InputVoltageLowAtt11, timeToNextScheduledPowerOnAtt3=timeToNextScheduledPowerOnAtt3, serialPortSecuritySettingsAtt9=serialPortSecuritySettingsAtt9, memoryArrayTableIndexAtt1=memoryArrayTableIndexAtt1, supportedProtocolsAtt5=supportedProtocolsAtt5, disableTrapsAtt3=disableTrapsAtt3, dMTFSystemResourceMemoryInfoTable=dMTFSystemResourceMemoryInfoTable, coolingDeviceTableIndexAtt1=coolingDeviceTableIndexAtt1, monitoredVoltageNormalMaximumAtt7=monitoredVoltageNormalMaximumAtt7, tempParentIndexAtt1=tempParentIndexAtt1, dMTFOperatingSystemState=dMTFOperatingSystemState, temperatureReadingLowerThresholdCriticalAtt13=temperatureReadingLowerThresholdCriticalAtt13, memoryTypeAtt9=memoryTypeAtt9, dMTFPhysicalContainerGlobalTableTable=dMTFPhysicalContainerGlobalTableTable, dMTFGeneralInformationEntry=dMTFGeneralInformationEntry, systemPrimaryUserNameAtt3=systemPrimaryUserNameAtt3, operationalGroupIndexAtt8=operationalGroupIndexAtt8, wordModeAtt8=wordModeAtt8, vendorSyndromeAtt13=vendorSyndromeAtt13, deviceSerialNumberAtt3=deviceSerialNumberAtt3, endAddressAtt9=endAddressAtt9, fRUSerialNumberAtt7=fRUSerialNumberAtt7, operationalGroupIndexAtt7=operationalGroupIndexAtt7, bIOSROMSizeAtt4=bIOSROMSizeAtt4, dellGlobalPowerUnitState=dellGlobalPowerUnitState, primaryOperatingSystemAtt4=primaryOperatingSystemAtt4, voltageProbeMinimumAtt10=voltageProbeMinimumAtt10, firmwareVersionAtt4=firmwareVersionAtt4, descriptionAtt4=descriptionAtt4, errorDataSizeAtt16=errorDataSizeAtt16, containerNameAtt10=containerNameAtt10, voltageProbeLocationAtt2=voltageProbeLocationAtt2, tempReadingAtt5=tempReadingAtt5, versionAtt3=versionAtt3, dialupCapabilityAtt1=dialupCapabilityAtt1, fansIndexAtt2=fansIndexAtt2, chassPwrSuppliesAtt12=chassPwrSuppliesAtt12, firmwareStatusAtt5=firmwareStatusAtt5, cMReservedAtt9=cMReservedAtt9, dELLSystemsSummaryInformationEntry=dELLSystemsSummaryInformationEntry, resetMemoryDeviceErrorCountAndPrefailureStatusAtt2=resetMemoryDeviceErrorCountAndPrefailureStatusAtt2, partitionWidthAtt6=partitionWidthAtt6, errorDataAtt17=errorDataAtt17, dMTFGeneralInformationTable=dMTFGeneralInformationTable, electricalCurrentProbeTableIndexAtt1=electricalCurrentProbeTableIndexAtt1, dataWidthAtt8=dataWidthAtt8, errorOperationAtt10=errorOperationAtt10, partitionAtt3=partitionAtt3, partNumberAtt6=partNumberAtt6, chassVoltProbesAtt8=chassVoltProbesAtt8, callbackNumberAtt2=callbackNumberAtt2, dellEsmLogTable=dellEsmLogTable, monitoredTemperatureNormalMaximumAtt7=monitoredTemperatureNormalMaximumAtt7, temperatureReadingLowerThresholdNonRecoverableAtt15=temperatureReadingLowerThresholdNonRecoverableAtt15, dellVoltageProbeTable=dellVoltageProbeTable, numberOfMemoryDeviceSocketsAtt5=numberOfMemoryDeviceSocketsAtt5, errorGranularityAtt13=errorGranularityAtt13, dELLSystemsManagementSoftwareTable=dELLSystemsManagementSoftwareTable, fRUIndexAtt1=fRUIndexAtt1, dMTFSystemResourceIOInfoTable=dMTFSystemResourceIOInfoTable, dellFanSensorEvSub=dellFanSensorEvSub, electricalCurrentProbeDescriptionAtt3=electricalCurrentProbeDescriptionAtt3, dMTFTemperatureProbeState=dMTFTemperatureProbeState, productAtt1=productAtt1, dMTFSystemResourceIRQInfoState=dMTFSystemResourceIRQInfoState, iSAPCMCIARangeDescriptorAtt2=iSAPCMCIARangeDescriptorAtt2, systemDateTimeAtt6=systemDateTimeAtt6, chassFanControlAtt17=chassFanControlAtt17)
