#
# PySNMP MIB module BAS-CARD-INFO-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/BAS-CARD-INFO-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 17:17:33 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, ObjectIdentifier, OctetString = mibBuilder.importSymbols("ASN1", "Integer", "ObjectIdentifier", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueSizeConstraint, SingleValueConstraint, ConstraintsUnion, ValueRangeConstraint, ConstraintsIntersection = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueSizeConstraint", "SingleValueConstraint", "ConstraintsUnion", "ValueRangeConstraint", "ConstraintsIntersection")
BasLogicalPortId, BasSlotId, BasCardClass, basCardInfo, BasChassisId, BasInterfaceId = mibBuilder.importSymbols("BAS-MIB", "BasLogicalPortId", "BasSlotId", "BasCardClass", "basCardInfo", "BasChassisId", "BasInterfaceId")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
ObjectIdentity, MibScalar, MibTable, MibTableRow, MibTableColumn, IpAddress, Bits, Counter32, NotificationType, Counter64, ModuleIdentity, Gauge32, MibIdentifier, TimeTicks, Unsigned32, Integer32, iso = mibBuilder.importSymbols("SNMPv2-SMI", "ObjectIdentity", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "IpAddress", "Bits", "Counter32", "NotificationType", "Counter64", "ModuleIdentity", "Gauge32", "MibIdentifier", "TimeTicks", "Unsigned32", "Integer32", "iso")
TextualConvention, DisplayString, RowStatus = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString", "RowStatus")
basCardInfoMib = ModuleIdentity((1, 3, 6, 1, 4, 1, 3493, 2, 1, 2, 1))
if mibBuilder.loadTexts: basCardInfoMib.setLastUpdated('9810081200Z')
if mibBuilder.loadTexts: basCardInfoMib.setOrganization('Broadband Access Systems')
basCardObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 3493, 2, 1, 2, 1, 1))
basCardInfoTable = MibTable((1, 3, 6, 1, 4, 1, 3493, 2, 1, 2, 1, 1, 1), )
if mibBuilder.loadTexts: basCardInfoTable.setStatus('current')
basCardInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3493, 2, 1, 2, 1, 1, 1, 1), ).setIndexNames((0, "BAS-CARD-INFO-MIB", "basCardInfoChassis"), (0, "BAS-CARD-INFO-MIB", "basCardInfoSlot"), (0, "BAS-CARD-INFO-MIB", "basCardInfoIf"), (0, "BAS-CARD-INFO-MIB", "basCardInfoLPort"))
if mibBuilder.loadTexts: basCardInfoEntry.setStatus('current')
basCardInfoChassis = MibTableColumn((1, 3, 6, 1, 4, 1, 3493, 2, 1, 2, 1, 1, 1, 1, 1), BasChassisId())
if mibBuilder.loadTexts: basCardInfoChassis.setStatus('current')
basCardInfoSlot = MibTableColumn((1, 3, 6, 1, 4, 1, 3493, 2, 1, 2, 1, 1, 1, 1, 2), BasSlotId())
if mibBuilder.loadTexts: basCardInfoSlot.setStatus('current')
basCardInfoIf = MibTableColumn((1, 3, 6, 1, 4, 1, 3493, 2, 1, 2, 1, 1, 1, 1, 3), BasInterfaceId())
if mibBuilder.loadTexts: basCardInfoIf.setStatus('current')
basCardInfoLPort = MibTableColumn((1, 3, 6, 1, 4, 1, 3493, 2, 1, 2, 1, 1, 1, 1, 4), BasLogicalPortId())
if mibBuilder.loadTexts: basCardInfoLPort.setStatus('current')
basCardInfoChassisNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 3493, 2, 1, 2, 1, 1, 1, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: basCardInfoChassisNumber.setStatus('current')
basCardInfoClass = MibTableColumn((1, 3, 6, 1, 4, 1, 3493, 2, 1, 2, 1, 1, 1, 1, 6), BasCardClass()).setMaxAccess("readonly")
if mibBuilder.loadTexts: basCardInfoClass.setStatus('current')
basAgentConfigSave = MibTableColumn((1, 3, 6, 1, 4, 1, 3493, 2, 1, 2, 1, 1, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("normal", 1), ("save", 2), ("saving", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: basAgentConfigSave.setStatus('current')
basAgentConfigSaveStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3493, 2, 1, 2, 1, 1, 1, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("none", 1), ("passed", 2), ("failed", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: basAgentConfigSaveStatus.setStatus('current')
basBcmIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 3493, 2, 1, 2, 1, 1, 1, 1, 9), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: basBcmIpAddress.setStatus('current')
basCardReset = MibTableColumn((1, 3, 6, 1, 4, 1, 3493, 2, 1, 2, 1, 1, 1, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("normal", 1), ("reset", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: basCardReset.setStatus('current')
basAgentSharedKey = MibTableColumn((1, 3, 6, 1, 4, 1, 3493, 2, 1, 2, 1, 1, 1, 1, 11), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 256))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: basAgentSharedKey.setStatus('current')
basAgentUdpPort = MibTableColumn((1, 3, 6, 1, 4, 1, 3493, 2, 1, 2, 1, 1, 1, 1, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: basAgentUdpPort.setStatus('current')
basAgentTcpPort = MibTableColumn((1, 3, 6, 1, 4, 1, 3493, 2, 1, 2, 1, 1, 1, 1, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: basAgentTcpPort.setStatus('current')
basCardInfoAdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3493, 2, 1, 2, 1, 1, 1, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9))).clone(namedValues=NamedValues(("up", 1), ("down", 2), ("testing", 3), ("loading", 4), ("loaded", 5), ("registering", 6), ("registered", 7), ("agentxstarting", 8), ("agentxstarted", 9)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: basCardInfoAdminStatus.setStatus('current')
basCardResetState = MibTableColumn((1, 3, 6, 1, 4, 1, 3493, 2, 1, 2, 1, 1, 1, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("locked", 1), ("unlocked", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: basCardResetState.setStatus('current')
basCardWatchdogTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 3493, 2, 1, 2, 1, 1, 1, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2), ("notSupported", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: basCardWatchdogTimer.setStatus('current')
basCardRSTable = MibTable((1, 3, 6, 1, 4, 1, 3493, 2, 1, 2, 1, 1, 2), )
if mibBuilder.loadTexts: basCardRSTable.setStatus('current')
basCardRSEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3493, 2, 1, 2, 1, 1, 2, 1), ).setIndexNames((0, "BAS-CARD-INFO-MIB", "basCardChassis"), (0, "BAS-CARD-INFO-MIB", "basCardSlot"), (0, "BAS-CARD-INFO-MIB", "basCardIf"), (0, "BAS-CARD-INFO-MIB", "basCardLPort"), (0, "BAS-CARD-INFO-MIB", "basCardRSChassis"), (0, "BAS-CARD-INFO-MIB", "basCardRSSlot"), (0, "BAS-CARD-INFO-MIB", "basCardRSIf"), (0, "BAS-CARD-INFO-MIB", "basCardRSLPort"))
if mibBuilder.loadTexts: basCardRSEntry.setStatus('current')
basCardChassis = MibTableColumn((1, 3, 6, 1, 4, 1, 3493, 2, 1, 2, 1, 1, 2, 1, 1), BasChassisId())
if mibBuilder.loadTexts: basCardChassis.setStatus('current')
basCardSlot = MibTableColumn((1, 3, 6, 1, 4, 1, 3493, 2, 1, 2, 1, 1, 2, 1, 2), BasSlotId())
if mibBuilder.loadTexts: basCardSlot.setStatus('current')
basCardIf = MibTableColumn((1, 3, 6, 1, 4, 1, 3493, 2, 1, 2, 1, 1, 2, 1, 3), BasInterfaceId())
if mibBuilder.loadTexts: basCardIf.setStatus('current')
basCardLPort = MibTableColumn((1, 3, 6, 1, 4, 1, 3493, 2, 1, 2, 1, 1, 2, 1, 4), BasLogicalPortId())
if mibBuilder.loadTexts: basCardLPort.setStatus('current')
basCardRSChassis = MibTableColumn((1, 3, 6, 1, 4, 1, 3493, 2, 1, 2, 1, 1, 2, 1, 5), BasChassisId()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: basCardRSChassis.setStatus('current')
basCardRSSlot = MibTableColumn((1, 3, 6, 1, 4, 1, 3493, 2, 1, 2, 1, 1, 2, 1, 6), BasSlotId()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: basCardRSSlot.setStatus('current')
basCardRSIf = MibTableColumn((1, 3, 6, 1, 4, 1, 3493, 2, 1, 2, 1, 1, 2, 1, 7), BasInterfaceId()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: basCardRSIf.setStatus('current')
basCardRSLPort = MibTableColumn((1, 3, 6, 1, 4, 1, 3493, 2, 1, 2, 1, 1, 2, 1, 8), BasLogicalPortId()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: basCardRSLPort.setStatus('current')
basCardRSStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3493, 2, 1, 2, 1, 1, 2, 1, 9), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: basCardRSStatus.setStatus('current')
mibBuilder.exportSymbols("BAS-CARD-INFO-MIB", basCardRSSlot=basCardRSSlot, basBcmIpAddress=basBcmIpAddress, basCardInfoChassis=basCardInfoChassis, basCardInfoLPort=basCardInfoLPort, basCardInfoTable=basCardInfoTable, basCardInfoChassisNumber=basCardInfoChassisNumber, basCardInfoIf=basCardInfoIf, basCardRSTable=basCardRSTable, basCardLPort=basCardLPort, basCardIf=basCardIf, basCardSlot=basCardSlot, basAgentUdpPort=basAgentUdpPort, basCardInfoMib=basCardInfoMib, basCardInfoClass=basCardInfoClass, basAgentTcpPort=basAgentTcpPort, basAgentConfigSave=basAgentConfigSave, basCardInfoSlot=basCardInfoSlot, basCardObjects=basCardObjects, basCardRSEntry=basCardRSEntry, basCardRSIf=basCardRSIf, basCardRSChassis=basCardRSChassis, basCardRSStatus=basCardRSStatus, basCardWatchdogTimer=basCardWatchdogTimer, basCardReset=basCardReset, basAgentConfigSaveStatus=basAgentConfigSaveStatus, basCardInfoEntry=basCardInfoEntry, basCardResetState=basCardResetState, PYSNMP_MODULE_ID=basCardInfoMib, basCardRSLPort=basCardRSLPort, basAgentSharedKey=basAgentSharedKey, basCardChassis=basCardChassis, basCardInfoAdminStatus=basCardInfoAdminStatus)
