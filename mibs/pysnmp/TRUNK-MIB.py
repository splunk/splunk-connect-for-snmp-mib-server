#
# PySNMP MIB module TRUNK-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/TRUNK-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 21:20:23 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, Integer, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "OctetString", "Integer", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueRangeConstraint, SingleValueConstraint, ConstraintsUnion, ValueSizeConstraint, ConstraintsIntersection = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueRangeConstraint", "SingleValueConstraint", "ConstraintsUnion", "ValueSizeConstraint", "ConstraintsIntersection")
MacAddress, = mibBuilder.importSymbols("BRIDGE-MIB", "MacAddress")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
Counter32, IpAddress, Integer32, NotificationType, ObjectIdentity, MibIdentifier, ModuleIdentity, Gauge32, iso, TimeTicks, Unsigned32, MibScalar, MibTable, MibTableRow, MibTableColumn, enterprises, Counter64, Bits = mibBuilder.importSymbols("SNMPv2-SMI", "Counter32", "IpAddress", "Integer32", "NotificationType", "ObjectIdentity", "MibIdentifier", "ModuleIdentity", "Gauge32", "iso", "TimeTicks", "Unsigned32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "enterprises", "Counter64", "Bits")
DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention")
class PortList(OctetString):
    subtypeSpec = OctetString.subtypeSpec + ValueSizeConstraint(4, 4)
    fixedLength = 4

marconi = MibIdentifier((1, 3, 6, 1, 4, 1, 326))
systems = MibIdentifier((1, 3, 6, 1, 4, 1, 326, 2))
external = MibIdentifier((1, 3, 6, 1, 4, 1, 326, 2, 20))
dlink = MibIdentifier((1, 3, 6, 1, 4, 1, 326, 2, 20, 1))
dlinkcommon = MibIdentifier((1, 3, 6, 1, 4, 1, 326, 2, 20, 1, 1))
golf = MibIdentifier((1, 3, 6, 1, 4, 1, 326, 2, 20, 1, 2))
golfproducts = MibIdentifier((1, 3, 6, 1, 4, 1, 326, 2, 20, 1, 2, 1))
golfcommon = MibIdentifier((1, 3, 6, 1, 4, 1, 326, 2, 20, 1, 2, 2))
marconi_mgmt = MibIdentifier((1, 3, 6, 1, 4, 1, 326, 2, 20, 1, 2, 2, 2)).setLabel("marconi-mgmt")
es1000Series = MibIdentifier((1, 3, 6, 1, 4, 1, 326, 2, 20, 1, 2, 2, 2, 24))
swPortTrunkPackage = MibIdentifier((1, 3, 6, 1, 4, 1, 326, 2, 20, 1, 2, 2, 2, 24, 6))
swSnoopPackage = MibIdentifier((1, 3, 6, 1, 4, 1, 326, 2, 20, 1, 2, 2, 2, 24, 7))
swIGMPPackage = MibIdentifier((1, 3, 6, 1, 4, 1, 326, 2, 20, 1, 2, 2, 2, 24, 8))
endOfMIB = MibScalar((1, 3, 6, 1, 4, 1, 326, 2, 20, 1, 2, 2, 2, 24, 9999), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: endOfMIB.setStatus('optional')
swPortTrunkTable = MibTable((1, 3, 6, 1, 4, 1, 326, 2, 20, 1, 2, 2, 2, 24, 6, 1), )
if mibBuilder.loadTexts: swPortTrunkTable.setStatus('mandatory')
swPortTrunkEntry = MibTableRow((1, 3, 6, 1, 4, 1, 326, 2, 20, 1, 2, 2, 2, 24, 6, 1, 1), ).setIndexNames((0, "TRUNK-MIB", "swPortTrunkIndex"))
if mibBuilder.loadTexts: swPortTrunkEntry.setStatus('mandatory')
swPortTrunkIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 20, 1, 2, 2, 2, 24, 6, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swPortTrunkIndex.setStatus('mandatory')
swPortTrunkName = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 20, 1, 2, 2, 2, 24, 6, 1, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(8, 8)).setFixedLength(8)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swPortTrunkName.setStatus('mandatory')
swPortTrunkModule = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 20, 1, 2, 2, 2, 24, 6, 1, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swPortTrunkModule.setStatus('mandatory')
swPortTrunkMasterPort = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 20, 1, 2, 2, 2, 24, 6, 1, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swPortTrunkMasterPort.setStatus('mandatory')
swPortTrunkMemberNum = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 20, 1, 2, 2, 2, 24, 6, 1, 1, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swPortTrunkMemberNum.setStatus('mandatory')
swPortTrunkState = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 20, 1, 2, 2, 2, 24, 6, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("disabled", 2), ("enabled", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swPortTrunkState.setStatus('mandatory')
swSnoopCtrlTable = MibTable((1, 3, 6, 1, 4, 1, 326, 2, 20, 1, 2, 2, 2, 24, 7, 1), )
if mibBuilder.loadTexts: swSnoopCtrlTable.setStatus('mandatory')
swSnoopCtrlEntry = MibTableRow((1, 3, 6, 1, 4, 1, 326, 2, 20, 1, 2, 2, 2, 24, 7, 1, 1), ).setIndexNames((0, "TRUNK-MIB", "swSnoopIndex"))
if mibBuilder.loadTexts: swSnoopCtrlEntry.setStatus('mandatory')
swSnoopIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 20, 1, 2, 2, 2, 24, 7, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swSnoopIndex.setStatus('mandatory')
swSnoopLogicSourcePort = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 20, 1, 2, 2, 2, 24, 7, 1, 1, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swSnoopLogicSourcePort.setStatus('mandatory')
swSnoopLogicTargetPort = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 20, 1, 2, 2, 2, 24, 7, 1, 1, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swSnoopLogicTargetPort.setStatus('mandatory')
swSnoopState = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 20, 1, 2, 2, 2, 24, 7, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("disable", 2), ("enable", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swSnoopState.setStatus('mandatory')
swIGMPCtrlTable = MibTable((1, 3, 6, 1, 4, 1, 326, 2, 20, 1, 2, 2, 2, 24, 8, 1), )
if mibBuilder.loadTexts: swIGMPCtrlTable.setStatus('mandatory')
swIGMPCtrlEntry = MibTableRow((1, 3, 6, 1, 4, 1, 326, 2, 20, 1, 2, 2, 2, 24, 8, 1, 1), ).setIndexNames((0, "TRUNK-MIB", "swIGMPCtrlIndex"))
if mibBuilder.loadTexts: swIGMPCtrlEntry.setStatus('mandatory')
swIGMPCtrlIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 20, 1, 2, 2, 2, 24, 8, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 12))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swIGMPCtrlIndex.setStatus('mandatory')
swIGMPCtrlVid = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 20, 1, 2, 2, 2, 24, 8, 1, 1, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swIGMPCtrlVid.setStatus('mandatory')
swIGMPCtrlTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 20, 1, 2, 2, 2, 24, 8, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(30, 9999)).clone(300)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swIGMPCtrlTimer.setStatus('mandatory')
swIGMPCtrlState = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 20, 1, 2, 2, 2, 24, 8, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("disable", 2), ("enable", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swIGMPCtrlState.setStatus('mandatory')
swIGMPInfoTable = MibTable((1, 3, 6, 1, 4, 1, 326, 2, 20, 1, 2, 2, 2, 24, 8, 2), )
if mibBuilder.loadTexts: swIGMPInfoTable.setStatus('mandatory')
swIGMPInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 326, 2, 20, 1, 2, 2, 2, 24, 8, 2, 1), ).setIndexNames((0, "TRUNK-MIB", "swIGMPInfoIndex"))
if mibBuilder.loadTexts: swIGMPInfoEntry.setStatus('mandatory')
swIGMPInfoIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 20, 1, 2, 2, 2, 24, 8, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 12))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swIGMPInfoIndex.setStatus('mandatory')
swIGMPInfoVid = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 20, 1, 2, 2, 2, 24, 8, 2, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swIGMPInfoVid.setStatus('mandatory')
swIGMPInfoQueryCount = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 20, 1, 2, 2, 2, 24, 8, 2, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swIGMPInfoQueryCount.setStatus('mandatory')
swIGMPInfoTxQueryCount = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 20, 1, 2, 2, 2, 24, 8, 2, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swIGMPInfoTxQueryCount.setStatus('mandatory')
swIGMPTable = MibTable((1, 3, 6, 1, 4, 1, 326, 2, 20, 1, 2, 2, 2, 24, 8, 3), )
if mibBuilder.loadTexts: swIGMPTable.setStatus('mandatory')
swIGMPEntry = MibTableRow((1, 3, 6, 1, 4, 1, 326, 2, 20, 1, 2, 2, 2, 24, 8, 3, 1), ).setIndexNames((0, "TRUNK-MIB", "swIGMPVid"), (0, "TRUNK-MIB", "swIGMPGroupIpAddr"))
if mibBuilder.loadTexts: swIGMPEntry.setStatus('mandatory')
swIGMPVid = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 20, 1, 2, 2, 2, 24, 8, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swIGMPVid.setStatus('mandatory')
swIGMPGroupIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 20, 1, 2, 2, 2, 24, 8, 3, 1, 2), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swIGMPGroupIpAddr.setStatus('mandatory')
swIGMPMacAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 20, 1, 2, 2, 2, 24, 8, 3, 1, 3), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swIGMPMacAddr.setStatus('mandatory')
swIGMPPortMap = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 20, 1, 2, 2, 2, 24, 8, 3, 1, 4), PortList()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swIGMPPortMap.setStatus('mandatory')
swIGMPIpGroupReportCount = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 20, 1, 2, 2, 2, 24, 8, 3, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swIGMPIpGroupReportCount.setStatus('mandatory')
mibBuilder.exportSymbols("TRUNK-MIB", marconi_mgmt=marconi_mgmt, swIGMPTable=swIGMPTable, swPortTrunkName=swPortTrunkName, swSnoopLogicSourcePort=swSnoopLogicSourcePort, swIGMPCtrlIndex=swIGMPCtrlIndex, swIGMPCtrlState=swIGMPCtrlState, swSnoopCtrlTable=swSnoopCtrlTable, swIGMPCtrlTable=swIGMPCtrlTable, swSnoopLogicTargetPort=swSnoopLogicTargetPort, golf=golf, swPortTrunkModule=swPortTrunkModule, swPortTrunkMasterPort=swPortTrunkMasterPort, swIGMPCtrlEntry=swIGMPCtrlEntry, swIGMPEntry=swIGMPEntry, swIGMPPortMap=swIGMPPortMap, swSnoopState=swSnoopState, swIGMPInfoQueryCount=swIGMPInfoQueryCount, systems=systems, swIGMPGroupIpAddr=swIGMPGroupIpAddr, swSnoopPackage=swSnoopPackage, swPortTrunkIndex=swPortTrunkIndex, swIGMPInfoVid=swIGMPInfoVid, golfcommon=golfcommon, swPortTrunkTable=swPortTrunkTable, swIGMPInfoTxQueryCount=swIGMPInfoTxQueryCount, dlinkcommon=dlinkcommon, swIGMPPackage=swIGMPPackage, swIGMPCtrlVid=swIGMPCtrlVid, external=external, swIGMPInfoIndex=swIGMPInfoIndex, swIGMPCtrlTimer=swIGMPCtrlTimer, golfproducts=golfproducts, swPortTrunkMemberNum=swPortTrunkMemberNum, swIGMPInfoEntry=swIGMPInfoEntry, swIGMPInfoTable=swIGMPInfoTable, swIGMPVid=swIGMPVid, es1000Series=es1000Series, swSnoopIndex=swSnoopIndex, swPortTrunkEntry=swPortTrunkEntry, PortList=PortList, swPortTrunkState=swPortTrunkState, swPortTrunkPackage=swPortTrunkPackage, swSnoopCtrlEntry=swSnoopCtrlEntry, swIGMPIpGroupReportCount=swIGMPIpGroupReportCount, marconi=marconi, dlink=dlink, swIGMPMacAddr=swIGMPMacAddr, endOfMIB=endOfMIB)
