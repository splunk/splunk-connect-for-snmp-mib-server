#
# PySNMP MIB module ISKRATEL-IPMI-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/ISKRATEL-IPMI-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 19:46:19 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, OctetString, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "Integer", "OctetString", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueRangeConstraint, ConstraintsIntersection, SingleValueConstraint, ValueSizeConstraint, ConstraintsUnion = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueRangeConstraint", "ConstraintsIntersection", "SingleValueConstraint", "ValueSizeConstraint", "ConstraintsUnion")
msanAdditionalConf, = mibBuilder.importSymbols("ISKRATEL-MSAN-MIB", "msanAdditionalConf")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
ObjectIdentity, ModuleIdentity, MibIdentifier, Gauge32, MibScalar, MibTable, MibTableRow, MibTableColumn, Counter64, NotificationType, IpAddress, Integer32, Bits, Unsigned32, iso, Counter32, TimeTicks = mibBuilder.importSymbols("SNMPv2-SMI", "ObjectIdentity", "ModuleIdentity", "MibIdentifier", "Gauge32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Counter64", "NotificationType", "IpAddress", "Integer32", "Bits", "Unsigned32", "iso", "Counter32", "TimeTicks")
DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention")
msanShMC = ModuleIdentity((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 33))
if mibBuilder.loadTexts: msanShMC.setLastUpdated('201203280944Z')
if mibBuilder.loadTexts: msanShMC.setOrganization('Iskratel')
msanShMCImpControllerVariablesTable = MibTable((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 33, 1), )
if mibBuilder.loadTexts: msanShMCImpControllerVariablesTable.setStatus('current')
msanShMCImpControllerVariablesEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 33, 1, 1), ).setIndexNames((0, "ISKRATEL-IPMI-MIB", "msanShMCImpControllerIndex"))
if mibBuilder.loadTexts: msanShMCImpControllerVariablesEntry.setStatus('current')
msanShMCImpControllerIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 33, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: msanShMCImpControllerIndex.setStatus('current')
msanShMCImpControllerSdrVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 33, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: msanShMCImpControllerSdrVersion.setStatus('current')
msanShMCImpControllerPicmgVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 33, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: msanShMCImpControllerPicmgVersion.setStatus('current')
msanShMCImpControllerSlaveAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 33, 1, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: msanShMCImpControllerSlaveAddress.setStatus('current')
msanShMCImpControllerChannelNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 33, 1, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: msanShMCImpControllerChannelNumber.setStatus('current')
msanShMCImpControllerPowerStateNotification = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 33, 1, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: msanShMCImpControllerPowerStateNotification.setStatus('current')
msanShMCImpControllerGlobalInitialisation = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 33, 1, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: msanShMCImpControllerGlobalInitialisation.setStatus('current')
msanShMCImpControllerCapabilities = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 33, 1, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: msanShMCImpControllerCapabilities.setStatus('current')
msanShMCImpControllerIdString = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 33, 1, 1, 9), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: msanShMCImpControllerIdString.setStatus('current')
msanShMCImpControllerMaximumFru = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 33, 1, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: msanShMCImpControllerMaximumFru.setStatus('current')
msanShMCImpControllerOwnFruId = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 33, 1, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: msanShMCImpControllerOwnFruId.setStatus('current')
msanShMCFruDeviceVariablesTable = MibTable((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 33, 2), )
if mibBuilder.loadTexts: msanShMCFruDeviceVariablesTable.setStatus('current')
msanShMCFruDeviceVariablesEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 33, 2, 1), ).setIndexNames((0, "ISKRATEL-IPMI-MIB", "msanShMCFruDeviceIndex"))
if mibBuilder.loadTexts: msanShMCFruDeviceVariablesEntry.setStatus('current')
msanShMCFruDeviceIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 33, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, -1))).setMaxAccess("readonly")
if mibBuilder.loadTexts: msanShMCFruDeviceIndex.setStatus('current')
msanShMCFruDeviceSdrVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 33, 2, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: msanShMCFruDeviceSdrVersion.setStatus('current')
msanShMCFruDeviceSlaveAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 33, 2, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: msanShMCFruDeviceSlaveAddress.setStatus('current')
msanShMCFruDeviceSFruDeviceId = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 33, 2, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: msanShMCFruDeviceSFruDeviceId.setStatus('current')
msanShMCFruDeviceChannelNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 33, 2, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: msanShMCFruDeviceChannelNumber.setStatus('current')
msanShMCFruDeviceDeviceType = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 33, 2, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: msanShMCFruDeviceDeviceType.setStatus('current')
msanShMCFruDeviceDeviceTypeModifier = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 33, 2, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: msanShMCFruDeviceDeviceTypeModifier.setStatus('current')
msanShMCFruDeviceFruEntityId = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 33, 2, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: msanShMCFruDeviceFruEntityId.setStatus('current')
msanShMCFruDeviceFruEntityInstance = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 33, 2, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: msanShMCFruDeviceFruEntityInstance.setStatus('current')
msanShMCFruDeviceIdString = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 33, 2, 1, 10), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: msanShMCFruDeviceIdString.setStatus('current')
msanShMCFruDeviceHotSwapState = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 33, 2, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: msanShMCFruDeviceHotSwapState.setStatus('current')
msanShMCFruDeviceActivated = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 33, 2, 1, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msanShMCFruDeviceActivated.setStatus('current')
msanShMCSensorVariablesTable = MibTable((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 33, 3), )
if mibBuilder.loadTexts: msanShMCSensorVariablesTable.setStatus('current')
msanShMCSensorVariablesEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 33, 3, 1), ).setIndexNames((0, "ISKRATEL-IPMI-MIB", "msanShMCSensorIndex"))
if mibBuilder.loadTexts: msanShMCSensorVariablesEntry.setStatus('current')
msanShMCSensorIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 33, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, -1))).setMaxAccess("readonly")
if mibBuilder.loadTexts: msanShMCSensorIndex.setStatus('current')
msanShMCSensorSdrVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 33, 3, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: msanShMCSensorSdrVersion.setStatus('current')
msanShMCSensorRecordType = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 33, 3, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: msanShMCSensorRecordType.setStatus('current')
msanShMCSensorOwnerId = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 33, 3, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: msanShMCSensorOwnerId.setStatus('current')
msanShMCSensorOwnerLun = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 33, 3, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: msanShMCSensorOwnerLun.setStatus('current')
msanShMCSensorNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 33, 3, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: msanShMCSensorNumber.setStatus('current')
msanShMCSensorEntityInstance = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 33, 3, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: msanShMCSensorEntityInstance.setStatus('current')
msanShMCSensorEntityId = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 33, 3, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: msanShMCSensorEntityId.setStatus('current')
msanShMCSensorInitialisation = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 33, 3, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: msanShMCSensorInitialisation.setStatus('current')
msanShMCSensorCapabilities = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 33, 3, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: msanShMCSensorCapabilities.setStatus('current')
msanShMCSensorType = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 33, 3, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: msanShMCSensorType.setStatus('current')
msanShMCSensorEvent = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 33, 3, 1, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: msanShMCSensorEvent.setStatus('current')
msanShMCSensorAssertionEventMask = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 33, 3, 1, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: msanShMCSensorAssertionEventMask.setStatus('current')
msanShMCSensorDeassertionEventMask = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 33, 3, 1, 14), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: msanShMCSensorDeassertionEventMask.setStatus('current')
msanShMCSensorMask = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 33, 3, 1, 15), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: msanShMCSensorMask.setStatus('current')
msanShMCSensorUnit1 = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 33, 3, 1, 16), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: msanShMCSensorUnit1.setStatus('current')
msanShMCSensorUnit2 = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 33, 3, 1, 17), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: msanShMCSensorUnit2.setStatus('current')
msanShMCSensorUnit3 = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 33, 3, 1, 18), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: msanShMCSensorUnit3.setStatus('current')
msanShMCSensorLinearization = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 33, 3, 1, 19), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: msanShMCSensorLinearization.setStatus('current')
msanShMCSensorM = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 33, 3, 1, 20), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: msanShMCSensorM.setStatus('current')
msanShMCSensorTolerance = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 33, 3, 1, 21), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: msanShMCSensorTolerance.setStatus('current')
msanShMCSensorB = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 33, 3, 1, 22), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: msanShMCSensorB.setStatus('current')
msanShMCSensorAccuracy = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 33, 3, 1, 23), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: msanShMCSensorAccuracy.setStatus('current')
msanShMCSensorAccuracyExp = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 33, 3, 1, 24), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: msanShMCSensorAccuracyExp.setStatus('current')
msanShMCSensorRexp = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 33, 3, 1, 25), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: msanShMCSensorRexp.setStatus('current')
msanShMCSensorBexp = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 33, 3, 1, 26), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: msanShMCSensorBexp.setStatus('current')
msanShMCSensorCharacteristicFlags = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 33, 3, 1, 27), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: msanShMCSensorCharacteristicFlags.setStatus('current')
msanShMCSensorReading = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 33, 3, 1, 28), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: msanShMCSensorReading.setStatus('current')
msanShMCSensorProcessedReading = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 33, 3, 1, 29), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: msanShMCSensorProcessedReading.setStatus('current')
msanShMCSensorNominalReading = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 33, 3, 1, 30), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: msanShMCSensorNominalReading.setStatus('current')
msanShMCSensorNormalMaximum = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 33, 3, 1, 31), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: msanShMCSensorNormalMaximum.setStatus('current')
msanShMCSensorNormalMinimum = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 33, 3, 1, 32), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: msanShMCSensorNormalMinimum.setStatus('current')
msanShMCSensorMaximumReading = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 33, 3, 1, 33), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: msanShMCSensorMaximumReading.setStatus('current')
msanShMCSensorMinimumReading = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 33, 3, 1, 34), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: msanShMCSensorMinimumReading.setStatus('current')
msanShMCSensorUpperNonRecoverableThr = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 33, 3, 1, 35), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: msanShMCSensorUpperNonRecoverableThr.setStatus('current')
msanShMCSensorUpperCriticalThr = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 33, 3, 1, 36), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: msanShMCSensorUpperCriticalThr.setStatus('current')
msanShMCSensorUpperNonCriticalThr = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 33, 3, 1, 37), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: msanShMCSensorUpperNonCriticalThr.setStatus('current')
msanShMCSensorLowerNonRecoverableThr = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 33, 3, 1, 38), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: msanShMCSensorLowerNonRecoverableThr.setStatus('current')
msanShMCSensorLowerCriticalThr = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 33, 3, 1, 39), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: msanShMCSensorLowerCriticalThr.setStatus('current')
msanShMCSensorLowerNonCriticalThr = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 33, 3, 1, 40), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: msanShMCSensorLowerNonCriticalThr.setStatus('current')
msanShMCSensorPositiveGoingThrHysteresis = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 33, 3, 1, 41), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: msanShMCSensorPositiveGoingThrHysteresis.setStatus('current')
msanShMCSensorNegativeGoingThrHysteresis = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 33, 3, 1, 42), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: msanShMCSensorNegativeGoingThrHysteresis.setStatus('current')
msanShMCSensorIdString = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 33, 3, 1, 43), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: msanShMCSensorIdString.setStatus('current')
msanShMCSensorEntireSensorData = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 33, 3, 1, 44), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: msanShMCSensorEntireSensorData.setStatus('current')
msanShMCBoardsTable = MibTable((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 33, 4), )
if mibBuilder.loadTexts: msanShMCBoardsTable.setStatus('current')
msanShMCBoardsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 33, 4, 1), ).setIndexNames((0, "ISKRATEL-IPMI-MIB", "msanShMCBoardsIndex"))
if mibBuilder.loadTexts: msanShMCBoardsEntry.setStatus('current')
msanShMCBoardsIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 33, 4, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: msanShMCBoardsIndex.setStatus('current')
msanShMCBoardsBoardBasicPresent = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 33, 4, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("absent", 0), ("present", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: msanShMCBoardsBoardBasicPresent.setStatus('current')
msanShMCBoardsBoardBasicHealthy = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 33, 4, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("off", 0), ("on", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: msanShMCBoardsBoardBasicHealthy.setStatus('current')
msanShMCBoardsBoardBasicReset = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 33, 4, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("none", 0), ("cold", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msanShMCBoardsBoardBasicReset.setStatus('current')
msanShMCBoardsBoardBasicSlaveAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 33, 4, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: msanShMCBoardsBoardBasicSlaveAddress.setStatus('current')
msanShMCBoardsBoardBasicFruDeviceId = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 33, 4, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: msanShMCBoardsBoardBasicFruDeviceId.setStatus('current')
msanShMCSelTable = MibTable((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 33, 5), )
if mibBuilder.loadTexts: msanShMCSelTable.setStatus('current')
msanShMCSelEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 33, 5, 1), ).setIndexNames((0, "ISKRATEL-IPMI-MIB", "msanShMCSelIndex"))
if mibBuilder.loadTexts: msanShMCSelEntry.setStatus('current')
msanShMCSelIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 33, 5, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: msanShMCSelIndex.setStatus('current')
msanShMCSelcontents = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 33, 5, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: msanShMCSelcontents.setStatus('current')
msanShMCShelfTable = MibTable((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 33, 6), )
if mibBuilder.loadTexts: msanShMCShelfTable.setStatus('current')
msanShMCShelfEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 33, 6, 1), ).setIndexNames((0, "ISKRATEL-IPMI-MIB", "msanShMCShelfIndex"))
if mibBuilder.loadTexts: msanShMCShelfEntry.setStatus('current')
msanShMCShelfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 33, 6, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: msanShMCShelfIndex.setStatus('current')
msanShMCShelfHealthy = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 33, 6, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: msanShMCShelfHealthy.setStatus('current')
msanShMCPefConfiguration = MibIdentifier((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 33, 8))
msanShMCPefConfigurationSetInProgress = MibScalar((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 33, 8, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("off", 0), ("on", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: msanShMCPefConfigurationSetInProgress.setStatus('current')
msanShMCPefConfigurationControl = MibScalar((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 33, 8, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("off", 0), ("on", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msanShMCPefConfigurationControl.setStatus('current')
msanShMCPefConfigurationActionGlobalControl = MibScalar((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 33, 8, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("off", 0), ("on", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msanShMCPefConfigurationActionGlobalControl.setStatus('current')
msanShMCPefConfigurationStartupDelay = MibScalar((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 33, 8, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("off", 0), ("on", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msanShMCPefConfigurationStartupDelay.setStatus('current')
msanShMCPefConfigurationAlertStartupDelay = MibScalar((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 33, 8, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("off", 0), ("on", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: msanShMCPefConfigurationAlertStartupDelay.setStatus('current')
msanShMCPefConfigurationNumberOfEventFilters = MibScalar((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 33, 8, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("off", 0), ("on", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: msanShMCPefConfigurationNumberOfEventFilters.setStatus('current')
msanShMCPefConfigurationNumberOfAlertPoliciEntries = MibScalar((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 33, 8, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("off", 0), ("on", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: msanShMCPefConfigurationNumberOfAlertPoliciEntries.setStatus('current')
msanShMCPefConfigurationSystemGuid = MibScalar((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 33, 8, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("off", 0), ("on", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msanShMCPefConfigurationSystemGuid.setStatus('current')
msanShMCPefConfigurationNumberOfAlertStrings = MibScalar((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 33, 8, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("off", 0), ("on", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: msanShMCPefConfigurationNumberOfAlertStrings.setStatus('current')
msanShMCPefConfigurationEventFilterTable = MibTable((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 33, 14), )
if mibBuilder.loadTexts: msanShMCPefConfigurationEventFilterTable.setStatus('current')
msanShMCPefConfigurationEventFilterEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 33, 14, 1), ).setIndexNames((0, "ISKRATEL-IPMI-MIB", "msanShMCPefConfigurationEventFilterIndex"))
if mibBuilder.loadTexts: msanShMCPefConfigurationEventFilterEntry.setStatus('current')
msanShMCPefConfigurationEventFilterIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 33, 14, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: msanShMCPefConfigurationEventFilterIndex.setStatus('current')
msanShMCPefConfigurationEventFilterData = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 33, 14, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(20, 20)).setFixedLength(20)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msanShMCPefConfigurationEventFilterData.setStatus('current')
msanShMCPefConfigurationAlertStringTable = MibTable((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 33, 19), )
if mibBuilder.loadTexts: msanShMCPefConfigurationAlertStringTable.setStatus('current')
msanShMCPefConfigurationAlertStringEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 33, 19, 1), ).setIndexNames((0, "ISKRATEL-IPMI-MIB", "msanShMCPefConfigurationAlertStringIndex"))
if mibBuilder.loadTexts: msanShMCPefConfigurationAlertStringEntry.setStatus('current')
msanShMCPefConfigurationAlertStringIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 33, 19, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: msanShMCPefConfigurationAlertStringIndex.setStatus('current')
msanShMCPefConfigurationAlertStringKey = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 33, 19, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(2, 2)).setFixedLength(2)).setMaxAccess("readonly")
if mibBuilder.loadTexts: msanShMCPefConfigurationAlertStringKey.setStatus('current')
msanShMCPefConfigurationAlertString = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 33, 19, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(255, 255)).setFixedLength(255)).setMaxAccess("readonly")
if mibBuilder.loadTexts: msanShMCPefConfigurationAlertString.setStatus('current')
msanShMCFruInfoTable = MibTable((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 33, 20), )
if mibBuilder.loadTexts: msanShMCFruInfoTable.setStatus('current')
msanShMCFruInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 33, 20, 1), ).setIndexNames((0, "ISKRATEL-IPMI-MIB", "msanShMCFruInfoIndex"))
if mibBuilder.loadTexts: msanShMCFruInfoEntry.setStatus('current')
msanShMCFruInfoIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 33, 20, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: msanShMCFruInfoIndex.setStatus('current')
msanShMCFruInfoData = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 33, 20, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: msanShMCFruInfoData.setStatus('current')
msanShMCFruInfoDataWo = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 33, 20, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msanShMCFruInfoDataWo.setStatus('current')
msanShMCBoardVariablesTable = MibTable((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 33, 32), )
if mibBuilder.loadTexts: msanShMCBoardVariablesTable.setStatus('current')
msanShMCBoardVariablesEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 33, 32, 1), ).setIndexNames((0, "ISKRATEL-IPMI-MIB", "msanShMCBoardVariablesBoardBasicSlotNumber"))
if mibBuilder.loadTexts: msanShMCBoardVariablesEntry.setStatus('current')
msanShMCBoardVariablesBoardBasicSlotNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 33, 32, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: msanShMCBoardVariablesBoardBasicSlotNumber.setStatus('current')
msanShMCBoardVariablesBoardBasicPresent = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 33, 32, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("absent", 0), ("present", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: msanShMCBoardVariablesBoardBasicPresent.setStatus('current')
msanShMCBoardVariablesBoardBasicHealthy = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 33, 32, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("off", 0), ("on", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: msanShMCBoardVariablesBoardBasicHealthy.setStatus('current')
msanShMCBoardVariablesBoardBasicReset = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 33, 32, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("none", 0), ("cold", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msanShMCBoardVariablesBoardBasicReset.setStatus('current')
msanShMCBoardVariablesBoardBasicPowered = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 33, 32, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("none", 0), ("powered", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: msanShMCBoardVariablesBoardBasicPowered.setStatus('current')
msanShMCBoardVariablesBoardBasicSlaveAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 33, 32, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: msanShMCBoardVariablesBoardBasicSlaveAddress.setStatus('current')
msanShMCBoardVariablesBoardBasicFruDeviceId = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 33, 32, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: msanShMCBoardVariablesBoardBasicFruDeviceId.setStatus('current')
msanShMCBoardVariablesBoardBasicFruinfoProductAreaPresent = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 33, 32, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("no", 0), ("yes", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: msanShMCBoardVariablesBoardBasicFruinfoProductAreaPresent.setStatus('current')
msanShMCBoardVariablesBoardBasicProductManufacturer = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 33, 32, 1, 9), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: msanShMCBoardVariablesBoardBasicProductManufacturer.setStatus('current')
msanShMCBoardVariablesBoardBasicProductName = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 33, 32, 1, 10), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: msanShMCBoardVariablesBoardBasicProductName.setStatus('current')
msanShMCBoardVariablesBoardBasicProductPartModelNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 33, 32, 1, 11), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: msanShMCBoardVariablesBoardBasicProductPartModelNumber.setStatus('current')
msanShMCBoardVariablesBoardBasicProductVersionNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 33, 32, 1, 12), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: msanShMCBoardVariablesBoardBasicProductVersionNumber.setStatus('current')
msanShMCBoardVariablesBoardBasicProductSerialNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 33, 32, 1, 13), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: msanShMCBoardVariablesBoardBasicProductSerialNumber.setStatus('current')
msanShMCBoardVariablesBoardBasicBoardAreaPresent = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 33, 32, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("no", 0), ("yes", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: msanShMCBoardVariablesBoardBasicBoardAreaPresent.setStatus('current')
msanShMCBoardVariablesBoardBasicBoardManufacturer = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 33, 32, 1, 15), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: msanShMCBoardVariablesBoardBasicBoardManufacturer.setStatus('current')
msanShMCBoardVariablesBoardBasicBoardProductName = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 33, 32, 1, 16), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: msanShMCBoardVariablesBoardBasicBoardProductName.setStatus('current')
msanShMCBoardVariablesBoardBasicBoardSerialNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 33, 32, 1, 17), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: msanShMCBoardVariablesBoardBasicBoardSerialNumber.setStatus('current')
msanShMCBoardVariablesBoardBasicBoardPartNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 33, 32, 1, 18), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: msanShMCBoardVariablesBoardBasicBoardPartNumber.setStatus('current')
msanShMCBoardVariablesBoardBasicBoardManufactureTime = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 33, 32, 1, 19), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: msanShMCBoardVariablesBoardBasicBoardManufactureTime.setStatus('current')
msanShMCBoardVariablesSelectivePowerOffSwitchOffType = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 33, 32, 1, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("automatic", 1), ("switchOff", 2), ("switchOn", 3))).clone('automatic')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msanShMCBoardVariablesSelectivePowerOffSwitchOffType.setStatus('current')
msanShMCFanTrayVariablesTable = MibTable((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 33, 33), )
if mibBuilder.loadTexts: msanShMCFanTrayVariablesTable.setStatus('current')
msanShMCFanTrayVariablesEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 33, 33, 1), ).setIndexNames((0, "ISKRATEL-IPMI-MIB", "msanShMCFanTraySlotNumber"))
if mibBuilder.loadTexts: msanShMCFanTrayVariablesEntry.setStatus('current')
msanShMCFanTraySlotNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 33, 33, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: msanShMCFanTraySlotNumber.setStatus('current')
msanShMCFanTrayPresent = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 33, 33, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("absent", 0), ("present", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: msanShMCFanTrayPresent.setStatus('current')
msanShMCFanTrayHealthy = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 33, 33, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("off", 0), ("on", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: msanShMCFanTrayHealthy.setStatus('current')
msanShMCFanTrayHealthLed = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 33, 33, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("off", 0), ("on", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msanShMCFanTrayHealthLed.setStatus('current')
msanShMCFanTraySlaveAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 33, 33, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: msanShMCFanTraySlaveAddress.setStatus('current')
msanShMCFanTrayFruDeviceId = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 33, 33, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: msanShMCFanTrayFruDeviceId.setStatus('current')
msanShMCFanTrayFruinfoProductAreaPresent = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 33, 33, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("no", 0), ("yes", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: msanShMCFanTrayFruinfoProductAreaPresent.setStatus('current')
msanShMCFanTrayFruinfoProductManufacturer = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 33, 33, 1, 8), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: msanShMCFanTrayFruinfoProductManufacturer.setStatus('current')
msanShMCFanTrayFruinfoProductName = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 33, 33, 1, 9), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: msanShMCFanTrayFruinfoProductName.setStatus('current')
msanShMCFanTrayFruinfoProductPartModelNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 33, 33, 1, 10), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: msanShMCFanTrayFruinfoProductPartModelNumber.setStatus('current')
msanShMCFanTrayFruinfoProductVersionNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 33, 33, 1, 11), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: msanShMCFanTrayFruinfoProductVersionNumber.setStatus('current')
msanShMCFanTrayFruinfoProductSerialNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 33, 33, 1, 12), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: msanShMCFanTrayFruinfoProductSerialNumber.setStatus('current')
msanShMCFanTrayFruinfoBoardAreaPresent = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 33, 33, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("no", 0), ("yes", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: msanShMCFanTrayFruinfoBoardAreaPresent.setStatus('current')
msanShMCFanTrayFruinfoBoardManufacturer = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 33, 33, 1, 14), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: msanShMCFanTrayFruinfoBoardManufacturer.setStatus('current')
msanShMCFanTrayFruinfoBoardProductName = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 33, 33, 1, 15), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: msanShMCFanTrayFruinfoBoardProductName.setStatus('current')
msanShMCFanTrayFruinfoBoardSerialNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 33, 33, 1, 16), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: msanShMCFanTrayFruinfoBoardSerialNumber.setStatus('current')
msanShMCFanTrayFruinfoBoardPartNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 33, 33, 1, 17), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: msanShMCFanTrayFruinfoBoardPartNumber.setStatus('current')
msanShMCFanTrayFruinfoBoardManufactureTime = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 33, 33, 1, 18), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: msanShMCFanTrayFruinfoBoardManufactureTime.setStatus('current')
msanShMCPowerSupplyVariablesTable = MibTable((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 33, 34), )
if mibBuilder.loadTexts: msanShMCPowerSupplyVariablesTable.setStatus('current')
msanShMCPowerSupplyVariablesEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 33, 34, 1), ).setIndexNames((0, "ISKRATEL-IPMI-MIB", "msanShMCPowerSupplySlotNumber"))
if mibBuilder.loadTexts: msanShMCPowerSupplyVariablesEntry.setStatus('current')
msanShMCPowerSupplySlotNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 33, 34, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: msanShMCPowerSupplySlotNumber.setStatus('current')
msanShMCPowerSupplyDegrade = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 33, 34, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("absent", 0), ("present", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: msanShMCPowerSupplyDegrade.setStatus('current')
msanShMCPowerSupplyFail = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 33, 34, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("off", 0), ("on", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: msanShMCPowerSupplyFail.setStatus('current')
msanShMCPowerSupplyInhibit = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 33, 34, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("on", 0), ("inhibit", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msanShMCPowerSupplyInhibit.setStatus('current')
msanShMCPowerSupplyHealthy = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 33, 34, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("off", 0), ("on", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msanShMCPowerSupplyHealthy.setStatus('current')
msanShMCPowerSupplySlaveAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 33, 34, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: msanShMCPowerSupplySlaveAddress.setStatus('current')
msanShMCPowerSupplyFruDeviceId = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 33, 34, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: msanShMCPowerSupplyFruDeviceId.setStatus('current')
msanShMCPowerSupplyFruinfoProductAreaPresent = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 33, 34, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("no", 0), ("yes", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: msanShMCPowerSupplyFruinfoProductAreaPresent.setStatus('current')
msanShMCPowerSupplyFruinfoProductManufacturer = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 33, 34, 1, 9), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: msanShMCPowerSupplyFruinfoProductManufacturer.setStatus('current')
msanShMCPowerSupplyFruinfoProductName = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 33, 34, 1, 10), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: msanShMCPowerSupplyFruinfoProductName.setStatus('current')
msanShMCPowerSupplyFruinfoProductPartModelNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 33, 34, 1, 11), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: msanShMCPowerSupplyFruinfoProductPartModelNumber.setStatus('current')
msanShMCPowerSupplyFruinfoProductVersionNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 33, 34, 1, 12), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: msanShMCPowerSupplyFruinfoProductVersionNumber.setStatus('current')
msanShMCPowerSupplyFruinfoProductSerialNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 33, 34, 1, 13), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: msanShMCPowerSupplyFruinfoProductSerialNumber.setStatus('current')
msanShMCPowerSupplyFruinfoBoardAreaPresent = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 33, 34, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("no", 0), ("yes", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: msanShMCPowerSupplyFruinfoBoardAreaPresent.setStatus('current')
msanShMCPowerSupplyFruinfoBoardManufacturer = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 33, 34, 1, 15), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: msanShMCPowerSupplyFruinfoBoardManufacturer.setStatus('current')
msanShMCPowerSupplyFruinfoBoardProductName = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 33, 34, 1, 16), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: msanShMCPowerSupplyFruinfoBoardProductName.setStatus('current')
msanShMCPowerSupplyFruinfoBoardSerialNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 33, 34, 1, 17), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: msanShMCPowerSupplyFruinfoBoardSerialNumber.setStatus('current')
msanShMCPowerSupplyFruinfoBoardPartNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 33, 34, 1, 18), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: msanShMCPowerSupplyFruinfoBoardPartNumber.setStatus('current')
msanShMCPowerSupplyFruinfoBoardmanufactureTime = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 33, 34, 1, 19), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: msanShMCPowerSupplyFruinfoBoardmanufactureTime.setStatus('current')
msanShMCShelfManagerVariablesTable = MibTable((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 33, 35), )
if mibBuilder.loadTexts: msanShMCShelfManagerVariablesTable.setStatus('current')
msanShMCShelfManagerVariablesEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 33, 35, 1), ).setIndexNames((0, "ISKRATEL-IPMI-MIB", "msanShMCShelfManagerSlotNumber"))
if mibBuilder.loadTexts: msanShMCShelfManagerVariablesEntry.setStatus('current')
msanShMCShelfManagerSlotNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 33, 35, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: msanShMCShelfManagerSlotNumber.setStatus('current')
msanShMCShelfManagerSlaveAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 33, 35, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: msanShMCShelfManagerSlaveAddress.setStatus('current')
msanShMCShelfManagerPresent = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 33, 35, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("absent", 0), ("present", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: msanShMCShelfManagerPresent.setStatus('current')
msanShMCShelfManagerHealthy = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 33, 35, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("off", 0), ("on", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: msanShMCShelfManagerHealthy.setStatus('current')
msanShMCShelfManagerActive = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 33, 35, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("standby", 0), ("active", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msanShMCShelfManagerActive.setStatus('current')
msanShMCShelfManagerReset = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 33, 35, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("none", 0), ("cold", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msanShMCShelfManagerReset.setStatus('current')
msanShMCShelfManagerFruinfoProductAreaPresent = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 33, 35, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("no", 0), ("yes", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: msanShMCShelfManagerFruinfoProductAreaPresent.setStatus('current')
msanShMCShelfManagerFruinfoProductManufacturer = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 33, 35, 1, 8), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: msanShMCShelfManagerFruinfoProductManufacturer.setStatus('current')
msanShMCShelfManagerFruinfoProductName = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 33, 35, 1, 9), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: msanShMCShelfManagerFruinfoProductName.setStatus('current')
msanShMCShelfManagerFruinfoProductPartModelNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 33, 35, 1, 10), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: msanShMCShelfManagerFruinfoProductPartModelNumber.setStatus('current')
msanShMCShelfManagerFruinfoProductVersionNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 33, 35, 1, 11), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: msanShMCShelfManagerFruinfoProductVersionNumber.setStatus('current')
msanShMCShelfManagerFruinfoProductSerialNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 33, 35, 1, 12), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: msanShMCShelfManagerFruinfoProductSerialNumber.setStatus('current')
msanShMCShelfManagerFruinfoBoardAreaPresent = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 33, 35, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("no", 0), ("yes", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: msanShMCShelfManagerFruinfoBoardAreaPresent.setStatus('current')
msanShMCShelfManagerFruinfoBoardManufacturer = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 33, 35, 1, 14), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: msanShMCShelfManagerFruinfoBoardManufacturer.setStatus('current')
msanShMCShelfManagerFruinfoBoardProductName = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 33, 35, 1, 15), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: msanShMCShelfManagerFruinfoBoardProductName.setStatus('current')
msanShMCShelfManagerFruinfoBoardSerialNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 33, 35, 1, 16), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: msanShMCShelfManagerFruinfoBoardSerialNumber.setStatus('current')
msanShMCShelfManagerFruinfoBoardPartNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 33, 35, 1, 17), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: msanShMCShelfManagerFruinfoBoardPartNumber.setStatus('current')
msanShMCShelfManagerFruinfoBoardmanufactureTime = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 33, 35, 1, 18), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: msanShMCShelfManagerFruinfoBoardmanufactureTime.setStatus('current')
msanShMCChassisVariablesTable = MibTable((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 33, 36), )
if mibBuilder.loadTexts: msanShMCChassisVariablesTable.setStatus('current')
msanShMCChassisVariablesEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 33, 36, 1), ).setIndexNames((0, "ISKRATEL-IPMI-MIB", "msanShMCChassisId"))
if mibBuilder.loadTexts: msanShMCChassisVariablesEntry.setStatus('current')
msanShMCChassisId = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 33, 36, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: msanShMCChassisId.setStatus('current')
msanShMCChassisType = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 33, 36, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: msanShMCChassisType.setStatus('current')
msanShMCChassisPartNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 33, 36, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: msanShMCChassisPartNumber.setStatus('current')
msanShMCChassisSerialNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 33, 36, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: msanShMCChassisSerialNumber.setStatus('current')
msanShMCChassisProductAreaPresent = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 33, 36, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("no", 0), ("yes", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: msanShMCChassisProductAreaPresent.setStatus('current')
msanShMCChassisProductManufacturer = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 33, 36, 1, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: msanShMCChassisProductManufacturer.setStatus('current')
msanShMCChassisProductName = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 33, 36, 1, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: msanShMCChassisProductName.setStatus('current')
msanShMCChassisProductPartModelNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 33, 36, 1, 8), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: msanShMCChassisProductPartModelNumber.setStatus('current')
msanShMCChassisProductVersionNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 33, 36, 1, 9), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: msanShMCChassisProductVersionNumber.setStatus('current')
msanShMCChassisProductSerialNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 33, 36, 1, 10), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: msanShMCChassisProductSerialNumber.setStatus('current')
msanShMCChassisBoardAreaPresent = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 33, 36, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("no", 0), ("yes", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: msanShMCChassisBoardAreaPresent.setStatus('current')
msanShMCChassisBoardManufacturer = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 33, 36, 1, 12), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: msanShMCChassisBoardManufacturer.setStatus('current')
msanShMCChassisBoardProductName = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 33, 36, 1, 13), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: msanShMCChassisBoardProductName.setStatus('current')
msanShMCChassisBoardSerialNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 33, 36, 1, 14), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: msanShMCChassisBoardSerialNumber.setStatus('current')
msanShMCChassisBoardPartNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 33, 36, 1, 15), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: msanShMCChassisBoardPartNumber.setStatus('current')
msanShMCChassisBoardmanufactureTime = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 33, 36, 1, 16), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: msanShMCChassisBoardmanufactureTime.setStatus('current')
msanShMCEventVariablesTable = MibTable((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 33, 37), )
if mibBuilder.loadTexts: msanShMCEventVariablesTable.setStatus('current')
msanShMCEventVariablesEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 33, 37, 1), ).setIndexNames((0, "ISKRATEL-IPMI-MIB", "msanShMCEventIndex"))
if mibBuilder.loadTexts: msanShMCEventVariablesEntry.setStatus('current')
msanShMCEventIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 33, 37, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: msanShMCEventIndex.setStatus('current')
msanShMCEventDelete = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 33, 37, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msanShMCEventDelete.setStatus('current')
msanShMCEventTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 33, 37, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: msanShMCEventTimeStamp.setStatus('current')
msanShMCEventClass = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 33, 37, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 225, 240))).clone(namedValues=NamedValues(("other", 0), ("temperature", 1), ("voltage", 2), ("current", 3), ("fan", 4), ("powerstate", 225), ("hotswap", 240)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: msanShMCEventClass.setStatus('current')
msanShMCEventType = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 33, 37, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15))).clone(namedValues=NamedValues(("other", 0), ("aboveUpperNonRecoverable", 1), ("aboveUpperCritical", 2), ("aboveUpperNonCritical", 3), ("belowLowerNonrecoverable", 4), ("belowLowerCritical", 5), ("belowLowerNonCritical", 6), ("inserted", 7), ("activated", 8), ("communicationLost", 9), ("communicationRestored", 10), ("deactivated", 11), ("extracted", 12), ("powerDegrade", 13), ("powerFail", 14), ("powerInhibit", 15)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: msanShMCEventType.setStatus('current')
msanShMCEventAsserted = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 33, 37, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("deasserted", 0), ("asserted", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: msanShMCEventAsserted.setStatus('current')
msanShMCEventOriginSiteType = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 33, 37, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: msanShMCEventOriginSiteType.setStatus('current')
msanShMCEventOriginSiteNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 33, 37, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: msanShMCEventOriginSiteNumber.setStatus('current')
msanShMCEventOriginSlaveAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 33, 37, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: msanShMCEventOriginSlaveAddress.setStatus('current')
msanShMCEventOriginFruId = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 33, 37, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: msanShMCEventOriginFruId.setStatus('current')
msanShMCEventOriginSensorNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 33, 37, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: msanShMCEventOriginSensorNumber.setStatus('current')
msanShMCGlobal = MibIdentifier((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 33, 38))
msanShMCSelectivePowerOffAdminMode = MibScalar((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 33, 38, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msanShMCSelectivePowerOffAdminMode.setStatus('current')
msanSHMCSelectivePowerOffOffDelay = MibScalar((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 33, 38, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 10)).clone(5)).setUnits('minutes').setMaxAccess("readwrite")
if mibBuilder.loadTexts: msanSHMCSelectivePowerOffOffDelay.setStatus('current')
msanSHMCSelectivePowerOffOnDelay = MibScalar((1, 3, 6, 1, 4, 1, 1332, 1, 1, 5, 3, 33, 38, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 10)).clone(1)).setUnits('minutes').setMaxAccess("readwrite")
if mibBuilder.loadTexts: msanSHMCSelectivePowerOffOnDelay.setStatus('current')
mibBuilder.exportSymbols("ISKRATEL-IPMI-MIB", msanShMCPowerSupplyFruinfoProductManufacturer=msanShMCPowerSupplyFruinfoProductManufacturer, msanShMCImpControllerVariablesTable=msanShMCImpControllerVariablesTable, msanShMCFanTrayFruinfoBoardPartNumber=msanShMCFanTrayFruinfoBoardPartNumber, msanShMCSensorEntityId=msanShMCSensorEntityId, msanShMCPowerSupplySlaveAddress=msanShMCPowerSupplySlaveAddress, msanShMCImpControllerPowerStateNotification=msanShMCImpControllerPowerStateNotification, msanShMCPefConfigurationAlertStringKey=msanShMCPefConfigurationAlertStringKey, msanShMCFanTrayFruinfoBoardManufactureTime=msanShMCFanTrayFruinfoBoardManufactureTime, msanShMCPowerSupplyVariablesEntry=msanShMCPowerSupplyVariablesEntry, msanShMCShelfManagerFruinfoBoardmanufactureTime=msanShMCShelfManagerFruinfoBoardmanufactureTime, msanShMCEventDelete=msanShMCEventDelete, msanShMCPowerSupplyVariablesTable=msanShMCPowerSupplyVariablesTable, msanShMCChassisVariablesTable=msanShMCChassisVariablesTable, msanShMCBoardsTable=msanShMCBoardsTable, msanShMCShelfManagerFruinfoBoardAreaPresent=msanShMCShelfManagerFruinfoBoardAreaPresent, msanShMCFruInfoDataWo=msanShMCFruInfoDataWo, msanShMCFruDeviceActivated=msanShMCFruDeviceActivated, msanShMCShelfManagerFruinfoBoardSerialNumber=msanShMCShelfManagerFruinfoBoardSerialNumber, msanShMCPowerSupplyFruinfoProductName=msanShMCPowerSupplyFruinfoProductName, msanShMCSensorCharacteristicFlags=msanShMCSensorCharacteristicFlags, msanShMCFruDeviceChannelNumber=msanShMCFruDeviceChannelNumber, msanShMCBoardVariablesBoardBasicBoardManufactureTime=msanShMCBoardVariablesBoardBasicBoardManufactureTime, PYSNMP_MODULE_ID=msanShMC, msanShMCSensorPositiveGoingThrHysteresis=msanShMCSensorPositiveGoingThrHysteresis, msanShMCPowerSupplyFruinfoBoardPartNumber=msanShMCPowerSupplyFruinfoBoardPartNumber, msanShMCSensorProcessedReading=msanShMCSensorProcessedReading, msanShMCSensorNormalMinimum=msanShMCSensorNormalMinimum, msanShMCBoardVariablesEntry=msanShMCBoardVariablesEntry, msanShMCFruDeviceDeviceType=msanShMCFruDeviceDeviceType, msanShMCSensorB=msanShMCSensorB, msanShMCBoardVariablesBoardBasicProductVersionNumber=msanShMCBoardVariablesBoardBasicProductVersionNumber, msanShMCSensorNegativeGoingThrHysteresis=msanShMCSensorNegativeGoingThrHysteresis, msanShMCImpControllerOwnFruId=msanShMCImpControllerOwnFruId, msanShMCSensorVariablesEntry=msanShMCSensorVariablesEntry, msanShMCFruDeviceSlaveAddress=msanShMCFruDeviceSlaveAddress, msanShMCSensorAccuracyExp=msanShMCSensorAccuracyExp, msanShMCFruInfoData=msanShMCFruInfoData, msanShMCBoardVariablesBoardBasicPowered=msanShMCBoardVariablesBoardBasicPowered, msanShMCBoardVariablesBoardBasicProductPartModelNumber=msanShMCBoardVariablesBoardBasicProductPartModelNumber, msanShMCChassisProductManufacturer=msanShMCChassisProductManufacturer, msanShMCBoardVariablesBoardBasicSlaveAddress=msanShMCBoardVariablesBoardBasicSlaveAddress, msanShMCFruDeviceFruEntityId=msanShMCFruDeviceFruEntityId, msanShMCBoardsIndex=msanShMCBoardsIndex, msanShMCSensorOwnerId=msanShMCSensorOwnerId, msanShMCSensorAssertionEventMask=msanShMCSensorAssertionEventMask, msanShMCChassisBoardManufacturer=msanShMCChassisBoardManufacturer, msanShMCBoardVariablesBoardBasicProductSerialNumber=msanShMCBoardVariablesBoardBasicProductSerialNumber, msanShMCChassisType=msanShMCChassisType, msanShMCChassisBoardmanufactureTime=msanShMCChassisBoardmanufactureTime, msanShMCGlobal=msanShMCGlobal, msanShMCPefConfigurationStartupDelay=msanShMCPefConfigurationStartupDelay, msanShMCSensorNominalReading=msanShMCSensorNominalReading, msanShMCPefConfigurationSystemGuid=msanShMCPefConfigurationSystemGuid, msanShMCFruDeviceSFruDeviceId=msanShMCFruDeviceSFruDeviceId, msanShMCSensorLowerNonRecoverableThr=msanShMCSensorLowerNonRecoverableThr, msanShMCBoardVariablesBoardBasicFruinfoProductAreaPresent=msanShMCBoardVariablesBoardBasicFruinfoProductAreaPresent, msanShMCChassisProductAreaPresent=msanShMCChassisProductAreaPresent, msanShMCSensorNormalMaximum=msanShMCSensorNormalMaximum, msanShMCPefConfigurationEventFilterIndex=msanShMCPefConfigurationEventFilterIndex, msanShMCPefConfigurationEventFilterEntry=msanShMCPefConfigurationEventFilterEntry, msanShMCPowerSupplyFruinfoProductPartModelNumber=msanShMCPowerSupplyFruinfoProductPartModelNumber, msanShMCBoardsBoardBasicFruDeviceId=msanShMCBoardsBoardBasicFruDeviceId, msanShMCFanTrayHealthLed=msanShMCFanTrayHealthLed, msanShMCSensorType=msanShMCSensorType, msanShMCFruDeviceIdString=msanShMCFruDeviceIdString, msanShMCPefConfigurationActionGlobalControl=msanShMCPefConfigurationActionGlobalControl, msanShMCSensorTolerance=msanShMCSensorTolerance, msanShMCShelfManagerFruinfoBoardPartNumber=msanShMCShelfManagerFruinfoBoardPartNumber, msanShMCShelfManagerReset=msanShMCShelfManagerReset, msanShMCPefConfigurationAlertStringEntry=msanShMCPefConfigurationAlertStringEntry, msanShMCFanTrayFruinfoProductSerialNumber=msanShMCFanTrayFruinfoProductSerialNumber, msanShMCSensorMask=msanShMCSensorMask, msanShMCBoardVariablesBoardBasicBoardSerialNumber=msanShMCBoardVariablesBoardBasicBoardSerialNumber, msanShMCPefConfigurationNumberOfEventFilters=msanShMCPefConfigurationNumberOfEventFilters, msanShMCPefConfiguration=msanShMCPefConfiguration, msanShMCChassisId=msanShMCChassisId, msanShMCPefConfigurationEventFilterTable=msanShMCPefConfigurationEventFilterTable, msanShMCPowerSupplyFruinfoBoardmanufactureTime=msanShMCPowerSupplyFruinfoBoardmanufactureTime, msanShMCChassisProductSerialNumber=msanShMCChassisProductSerialNumber, msanShMCShelfManagerFruinfoProductName=msanShMCShelfManagerFruinfoProductName, msanShMCEventClass=msanShMCEventClass, msanShMCSensorVariablesTable=msanShMCSensorVariablesTable, msanShMCFruInfoTable=msanShMCFruInfoTable, msanShMCSensorIndex=msanShMCSensorIndex, msanShMCShelfTable=msanShMCShelfTable, msanShMCPowerSupplyDegrade=msanShMCPowerSupplyDegrade, msanShMCSensorMaximumReading=msanShMCSensorMaximumReading, msanShMCSensorCapabilities=msanShMCSensorCapabilities, msanShMCImpControllerIdString=msanShMCImpControllerIdString, msanShMCImpControllerChannelNumber=msanShMCImpControllerChannelNumber, msanShMCChassisSerialNumber=msanShMCChassisSerialNumber, msanShMCSensorInitialisation=msanShMCSensorInitialisation, msanShMCImpControllerPicmgVersion=msanShMCImpControllerPicmgVersion, msanShMCShelfManagerSlotNumber=msanShMCShelfManagerSlotNumber, msanShMCBoardVariablesBoardBasicProductName=msanShMCBoardVariablesBoardBasicProductName, msanShMCSensorBexp=msanShMCSensorBexp, msanShMCBoardsBoardBasicPresent=msanShMCBoardsBoardBasicPresent, msanShMCShelfManagerHealthy=msanShMCShelfManagerHealthy, msanShMCPefConfigurationAlertStringIndex=msanShMCPefConfigurationAlertStringIndex, msanShMCEventType=msanShMCEventType, msanShMCShelfIndex=msanShMCShelfIndex, msanShMCPefConfigurationAlertStringTable=msanShMCPefConfigurationAlertStringTable, msanShMCBoardsBoardBasicHealthy=msanShMCBoardsBoardBasicHealthy, msanShMCPefConfigurationAlertString=msanShMCPefConfigurationAlertString, msanShMCFanTrayVariablesTable=msanShMCFanTrayVariablesTable, msanShMCEventVariablesTable=msanShMCEventVariablesTable, msanShMCBoardVariablesBoardBasicBoardPartNumber=msanShMCBoardVariablesBoardBasicBoardPartNumber, msanShMCBoardVariablesSelectivePowerOffSwitchOffType=msanShMCBoardVariablesSelectivePowerOffSwitchOffType, msanShMCSensorOwnerLun=msanShMCSensorOwnerLun, msanShMCSensorReading=msanShMCSensorReading, msanShMCSensorMinimumReading=msanShMCSensorMinimumReading, msanShMCShelfManagerSlaveAddress=msanShMCShelfManagerSlaveAddress, msanShMCEventIndex=msanShMCEventIndex, msanShMCEventOriginSlaveAddress=msanShMCEventOriginSlaveAddress, msanShMCBoardVariablesBoardBasicBoardProductName=msanShMCBoardVariablesBoardBasicBoardProductName, msanShMCSensorLinearization=msanShMCSensorLinearization, msanShMCSensorUnit1=msanShMCSensorUnit1, msanShMCChassisProductPartModelNumber=msanShMCChassisProductPartModelNumber, msanShMCSelEntry=msanShMCSelEntry, msanShMCFanTrayVariablesEntry=msanShMCFanTrayVariablesEntry, msanShMCFanTrayFruinfoProductName=msanShMCFanTrayFruinfoProductName, msanShMCFanTrayFruinfoBoardAreaPresent=msanShMCFanTrayFruinfoBoardAreaPresent, msanShMCImpControllerSdrVersion=msanShMCImpControllerSdrVersion, msanShMCFruDeviceDeviceTypeModifier=msanShMCFruDeviceDeviceTypeModifier, msanShMCSelTable=msanShMCSelTable, msanShMCBoardVariablesBoardBasicSlotNumber=msanShMCBoardVariablesBoardBasicSlotNumber, msanShMCChassisProductVersionNumber=msanShMCChassisProductVersionNumber, msanShMCPowerSupplyFruinfoProductVersionNumber=msanShMCPowerSupplyFruinfoProductVersionNumber, msanShMCPefConfigurationEventFilterData=msanShMCPefConfigurationEventFilterData, msanShMCEventVariablesEntry=msanShMCEventVariablesEntry, msanShMCSensorRecordType=msanShMCSensorRecordType, msanShMCBoardVariablesBoardBasicBoardManufacturer=msanShMCBoardVariablesBoardBasicBoardManufacturer, msanShMCSensorEntityInstance=msanShMCSensorEntityInstance, msanSHMCSelectivePowerOffOffDelay=msanSHMCSelectivePowerOffOffDelay, msanShMCPefConfigurationNumberOfAlertStrings=msanShMCPefConfigurationNumberOfAlertStrings, msanShMCShelfHealthy=msanShMCShelfHealthy, msanShMCFruDeviceVariablesTable=msanShMCFruDeviceVariablesTable, msanShMCShelfManagerFruinfoProductVersionNumber=msanShMCShelfManagerFruinfoProductVersionNumber, msanShMCSelectivePowerOffAdminMode=msanShMCSelectivePowerOffAdminMode, msanShMCFruDeviceSdrVersion=msanShMCFruDeviceSdrVersion, msanShMCPowerSupplyInhibit=msanShMCPowerSupplyInhibit, msanShMCShelfManagerFruinfoProductManufacturer=msanShMCShelfManagerFruinfoProductManufacturer, msanShMCImpControllerIndex=msanShMCImpControllerIndex, msanShMCBoardVariablesBoardBasicHealthy=msanShMCBoardVariablesBoardBasicHealthy, msanShMCBoardVariablesBoardBasicFruDeviceId=msanShMCBoardVariablesBoardBasicFruDeviceId, msanShMCFruInfoEntry=msanShMCFruInfoEntry, msanShMCFanTrayFruDeviceId=msanShMCFanTrayFruDeviceId, msanShMCSelcontents=msanShMCSelcontents, msanShMCFanTrayFruinfoProductManufacturer=msanShMCFanTrayFruinfoProductManufacturer, msanShMCFanTrayFruinfoBoardSerialNumber=msanShMCFanTrayFruinfoBoardSerialNumber, msanShMCPowerSupplyFruinfoBoardAreaPresent=msanShMCPowerSupplyFruinfoBoardAreaPresent, msanShMCFanTrayFruinfoProductPartModelNumber=msanShMCFanTrayFruinfoProductPartModelNumber, msanShMCSensorRexp=msanShMCSensorRexp, msanShMCPowerSupplyFruinfoProductAreaPresent=msanShMCPowerSupplyFruinfoProductAreaPresent, msanShMCShelfManagerActive=msanShMCShelfManagerActive, msanShMCSensorSdrVersion=msanShMCSensorSdrVersion, msanShMCFruDeviceHotSwapState=msanShMCFruDeviceHotSwapState, msanShMCSensorNumber=msanShMCSensorNumber, msanShMCBoardsEntry=msanShMCBoardsEntry, msanShMC=msanShMC, msanShMCImpControllerMaximumFru=msanShMCImpControllerMaximumFru, msanShMCSensorAccuracy=msanShMCSensorAccuracy, msanShMCPowerSupplyHealthy=msanShMCPowerSupplyHealthy, msanShMCFanTrayFruinfoBoardProductName=msanShMCFanTrayFruinfoBoardProductName, msanShMCSensorUnit3=msanShMCSensorUnit3, msanShMCSensorEvent=msanShMCSensorEvent, msanShMCImpControllerVariablesEntry=msanShMCImpControllerVariablesEntry, msanShMCEventOriginSiteNumber=msanShMCEventOriginSiteNumber, msanShMCChassisBoardPartNumber=msanShMCChassisBoardPartNumber, msanShMCFruDeviceIndex=msanShMCFruDeviceIndex, msanShMCPefConfigurationNumberOfAlertPoliciEntries=msanShMCPefConfigurationNumberOfAlertPoliciEntries, msanShMCFanTraySlotNumber=msanShMCFanTraySlotNumber, msanShMCShelfEntry=msanShMCShelfEntry, msanShMCFanTraySlaveAddress=msanShMCFanTraySlaveAddress, msanShMCSensorM=msanShMCSensorM, msanShMCChassisVariablesEntry=msanShMCChassisVariablesEntry, msanShMCBoardVariablesBoardBasicBoardAreaPresent=msanShMCBoardVariablesBoardBasicBoardAreaPresent, msanShMCChassisProductName=msanShMCChassisProductName, msanShMCEventAsserted=msanShMCEventAsserted, msanShMCPefConfigurationControl=msanShMCPefConfigurationControl, msanShMCFanTrayFruinfoBoardManufacturer=msanShMCFanTrayFruinfoBoardManufacturer, msanShMCBoardVariablesBoardBasicPresent=msanShMCBoardVariablesBoardBasicPresent, msanShMCImpControllerSlaveAddress=msanShMCImpControllerSlaveAddress, msanShMCShelfManagerVariablesEntry=msanShMCShelfManagerVariablesEntry, msanShMCFruDeviceVariablesEntry=msanShMCFruDeviceVariablesEntry, msanShMCPowerSupplyFruinfoBoardManufacturer=msanShMCPowerSupplyFruinfoBoardManufacturer, msanShMCFanTrayFruinfoProductAreaPresent=msanShMCFanTrayFruinfoProductAreaPresent, msanShMCShelfManagerFruinfoProductAreaPresent=msanShMCShelfManagerFruinfoProductAreaPresent, msanShMCShelfManagerFruinfoBoardProductName=msanShMCShelfManagerFruinfoBoardProductName, msanShMCShelfManagerFruinfoBoardManufacturer=msanShMCShelfManagerFruinfoBoardManufacturer, msanShMCEventOriginSensorNumber=msanShMCEventOriginSensorNumber, msanShMCSensorUnit2=msanShMCSensorUnit2, msanShMCBoardsBoardBasicSlaveAddress=msanShMCBoardsBoardBasicSlaveAddress, msanShMCPefConfigurationSetInProgress=msanShMCPefConfigurationSetInProgress, msanShMCShelfManagerPresent=msanShMCShelfManagerPresent, msanShMCEventOriginSiteType=msanShMCEventOriginSiteType, msanShMCBoardVariablesBoardBasicReset=msanShMCBoardVariablesBoardBasicReset, msanShMCFanTrayFruinfoProductVersionNumber=msanShMCFanTrayFruinfoProductVersionNumber, msanShMCBoardsBoardBasicReset=msanShMCBoardsBoardBasicReset, msanShMCFanTrayPresent=msanShMCFanTrayPresent, msanShMCShelfManagerFruinfoProductPartModelNumber=msanShMCShelfManagerFruinfoProductPartModelNumber, msanShMCSelIndex=msanShMCSelIndex, msanShMCSensorIdString=msanShMCSensorIdString, msanShMCBoardVariablesTable=msanShMCBoardVariablesTable, msanShMCSensorEntireSensorData=msanShMCSensorEntireSensorData, msanShMCFruDeviceFruEntityInstance=msanShMCFruDeviceFruEntityInstance, msanShMCEventOriginFruId=msanShMCEventOriginFruId, msanShMCPowerSupplySlotNumber=msanShMCPowerSupplySlotNumber, msanShMCShelfManagerVariablesTable=msanShMCShelfManagerVariablesTable, msanShMCPefConfigurationAlertStartupDelay=msanShMCPefConfigurationAlertStartupDelay, msanShMCSensorUpperNonRecoverableThr=msanShMCSensorUpperNonRecoverableThr, msanShMCFruInfoIndex=msanShMCFruInfoIndex, msanShMCSensorUpperNonCriticalThr=msanShMCSensorUpperNonCriticalThr, msanShMCChassisBoardAreaPresent=msanShMCChassisBoardAreaPresent, msanShMCEventTimeStamp=msanShMCEventTimeStamp, msanShMCBoardVariablesBoardBasicProductManufacturer=msanShMCBoardVariablesBoardBasicProductManufacturer, msanShMCSensorDeassertionEventMask=msanShMCSensorDeassertionEventMask, msanShMCShelfManagerFruinfoProductSerialNumber=msanShMCShelfManagerFruinfoProductSerialNumber, msanShMCPowerSupplyFruDeviceId=msanShMCPowerSupplyFruDeviceId, msanShMCPowerSupplyFruinfoBoardProductName=msanShMCPowerSupplyFruinfoBoardProductName, msanShMCImpControllerGlobalInitialisation=msanShMCImpControllerGlobalInitialisation, msanShMCPowerSupplyFruinfoProductSerialNumber=msanShMCPowerSupplyFruinfoProductSerialNumber, msanShMCImpControllerCapabilities=msanShMCImpControllerCapabilities, msanShMCPowerSupplyFruinfoBoardSerialNumber=msanShMCPowerSupplyFruinfoBoardSerialNumber, msanShMCChassisPartNumber=msanShMCChassisPartNumber, msanShMCPowerSupplyFail=msanShMCPowerSupplyFail, msanShMCSensorLowerNonCriticalThr=msanShMCSensorLowerNonCriticalThr, msanShMCSensorUpperCriticalThr=msanShMCSensorUpperCriticalThr, msanShMCChassisBoardProductName=msanShMCChassisBoardProductName, msanShMCSensorLowerCriticalThr=msanShMCSensorLowerCriticalThr, msanShMCChassisBoardSerialNumber=msanShMCChassisBoardSerialNumber, msanSHMCSelectivePowerOffOnDelay=msanSHMCSelectivePowerOffOnDelay, msanShMCFanTrayHealthy=msanShMCFanTrayHealthy)
