#
# PySNMP MIB module IPSEC-SA-MON-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/IPSEC-SA-MON-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 19:45:22 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, ObjectIdentifier, OctetString = mibBuilder.importSymbols("ASN1", "Integer", "ObjectIdentifier", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueRangeConstraint, ValueSizeConstraint, ConstraintsUnion, SingleValueConstraint, ConstraintsIntersection = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueRangeConstraint", "ValueSizeConstraint", "ConstraintsUnion", "SingleValueConstraint", "ConstraintsIntersection")
ifIndex, = mibBuilder.importSymbols("IF-MIB", "ifIndex")
IpsecDoiAuthAlgorithm, IpsecDoiIpcompTransform, IpsecDoiIdentType, IpsecDoiAhTransform, IpsecDoiEncapsulationMode, IpsecDoiSecProtocolId, IpsecDoiEspTransform = mibBuilder.importSymbols("IPSEC-ISAKMP-IKE-DOI-TC", "IpsecDoiAuthAlgorithm", "IpsecDoiIpcompTransform", "IpsecDoiIdentType", "IpsecDoiAhTransform", "IpsecDoiEncapsulationMode", "IpsecDoiSecProtocolId", "IpsecDoiEspTransform")
ObjectGroup, NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "ObjectGroup", "NotificationGroup", "ModuleCompliance")
MibScalar, MibTable, MibTableRow, MibTableColumn, Counter64, experimental, Integer32, ObjectIdentity, NotificationType, Bits, TimeTicks, Gauge32, ModuleIdentity, iso, Counter32, IpAddress, Unsigned32, MibIdentifier = mibBuilder.importSymbols("SNMPv2-SMI", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Counter64", "experimental", "Integer32", "ObjectIdentity", "NotificationType", "Bits", "TimeTicks", "Gauge32", "ModuleIdentity", "iso", "Counter32", "IpAddress", "Unsigned32", "MibIdentifier")
TextualConvention, TruthValue, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "TruthValue", "DisplayString")
ipsecSaMonModule = ModuleIdentity((1, 3, 6, 1, 3, 98))
ipsecSaMonModule.setRevisions(('1999-06-03 12:00', '1999-06-25 12:00', '1999-10-21 12:00',))
if mibBuilder.loadTexts: ipsecSaMonModule.setLastUpdated('9910211200Z')
if mibBuilder.loadTexts: ipsecSaMonModule.setOrganization('IETF IPsec Working Group')
class IpsecSaCreatorIdent(TextualConvention, Integer32):
    status = 'current'
    displayHint = 'd'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))
    namedValues = NamedValues(("unknown", 0), ("static", 1), ("ike", 2), ("other", 3))

class IpsecIpv6Address(TextualConvention, OctetString):
    reference = 'RFC 2373 sections 2.2 and 2.5.4'
    status = 'current'
    displayHint = '2x:2x:2x:2x:2x:2x:1d.1d.1d.1d'
    subtypeSpec = OctetString.subtypeSpec + ValueSizeConstraint(16, 16)
    fixedLength = 16

class IpsecRawId(TextualConvention, OctetString):
    status = 'current'
    displayHint = 'x'
    subtypeSpec = OctetString.subtypeSpec + ValueSizeConstraint(0, 255)

ipsecSaMonitorMIB = ObjectIdentity((1, 3, 6, 1, 3, 98, 1))
if mibBuilder.loadTexts: ipsecSaMonitorMIB.setStatus('current')
saTables = ObjectIdentity((1, 3, 6, 1, 3, 98, 1, 1))
if mibBuilder.loadTexts: saTables.setStatus('current')
saStatistics = ObjectIdentity((1, 3, 6, 1, 3, 98, 1, 2))
if mibBuilder.loadTexts: saStatistics.setStatus('current')
saErrors = ObjectIdentity((1, 3, 6, 1, 3, 98, 1, 3))
if mibBuilder.loadTexts: saErrors.setStatus('current')
saTraps = ObjectIdentity((1, 3, 6, 1, 3, 98, 1, 4))
if mibBuilder.loadTexts: saTraps.setStatus('current')
saTrapObjects = ObjectIdentity((1, 3, 6, 1, 3, 98, 1, 5))
if mibBuilder.loadTexts: saTrapObjects.setStatus('current')
saTrapControl = ObjectIdentity((1, 3, 6, 1, 3, 98, 1, 6))
if mibBuilder.loadTexts: saTrapControl.setStatus('current')
saGroups = ObjectIdentity((1, 3, 6, 1, 3, 98, 1, 7))
if mibBuilder.loadTexts: saGroups.setStatus('current')
saConformance = ObjectIdentity((1, 3, 6, 1, 3, 98, 1, 8))
if mibBuilder.loadTexts: saConformance.setStatus('current')
ipsecSaEspInTable = MibTable((1, 3, 6, 1, 3, 98, 1, 1, 1), )
if mibBuilder.loadTexts: ipsecSaEspInTable.setStatus('current')
ipsecSaEspInEntry = MibTableRow((1, 3, 6, 1, 3, 98, 1, 1, 1, 1), ).setIndexNames((0, "IPSEC-SA-MON-MIB", "ipsecSaEspInAddress"), (0, "IPSEC-SA-MON-MIB", "ipsecSaEspInSpi"))
if mibBuilder.loadTexts: ipsecSaEspInEntry.setStatus('current')
ipsecSaEspInAddress = MibTableColumn((1, 3, 6, 1, 3, 98, 1, 1, 1, 1, 1), IpsecIpv6Address()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipsecSaEspInAddress.setStatus('current')
ipsecSaEspInSpi = MibTableColumn((1, 3, 6, 1, 3, 98, 1, 1, 1, 1, 2), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipsecSaEspInSpi.setStatus('current')
ipsecSaEspInDestId = MibTableColumn((1, 3, 6, 1, 3, 98, 1, 1, 1, 1, 3), IpsecRawId()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipsecSaEspInDestId.setStatus('current')
ipsecSaEspInDestIdType = MibTableColumn((1, 3, 6, 1, 3, 98, 1, 1, 1, 1, 4), IpsecDoiIdentType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipsecSaEspInDestIdType.setStatus('current')
ipsecSaEspInSourceId = MibTableColumn((1, 3, 6, 1, 3, 98, 1, 1, 1, 1, 5), IpsecRawId()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipsecSaEspInSourceId.setStatus('current')
ipsecSaEspInSourceIdType = MibTableColumn((1, 3, 6, 1, 3, 98, 1, 1, 1, 1, 6), IpsecDoiIdentType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipsecSaEspInSourceIdType.setStatus('current')
ipsecSaEspInProtocol = MibTableColumn((1, 3, 6, 1, 3, 98, 1, 1, 1, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipsecSaEspInProtocol.setStatus('current')
ipsecSaEspInDestPort = MibTableColumn((1, 3, 6, 1, 3, 98, 1, 1, 1, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipsecSaEspInDestPort.setStatus('current')
ipsecSaEspInSourcePort = MibTableColumn((1, 3, 6, 1, 3, 98, 1, 1, 1, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipsecSaEspInSourcePort.setStatus('current')
ipsecSaEspInCreator = MibTableColumn((1, 3, 6, 1, 3, 98, 1, 1, 1, 1, 10), IpsecSaCreatorIdent()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipsecSaEspInCreator.setStatus('current')
ipsecSaEspInEncapsulation = MibTableColumn((1, 3, 6, 1, 3, 98, 1, 1, 1, 1, 11), IpsecDoiEncapsulationMode()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipsecSaEspInEncapsulation.setStatus('current')
ipsecSaEspInEncAlg = MibTableColumn((1, 3, 6, 1, 3, 98, 1, 1, 1, 1, 12), IpsecDoiEspTransform()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipsecSaEspInEncAlg.setStatus('current')
ipsecSaEspInEncKeyLength = MibTableColumn((1, 3, 6, 1, 3, 98, 1, 1, 1, 1, 13), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 65531))).setUnits('bits').setMaxAccess("readonly")
if mibBuilder.loadTexts: ipsecSaEspInEncKeyLength.setStatus('current')
ipsecSaEspInAuthAlg = MibTableColumn((1, 3, 6, 1, 3, 98, 1, 1, 1, 1, 14), IpsecDoiAuthAlgorithm()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipsecSaEspInAuthAlg.setStatus('current')
ipsecSaEspInAuthKeyLength = MibTableColumn((1, 3, 6, 1, 3, 98, 1, 1, 1, 1, 15), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 65531))).setUnits('bits').setMaxAccess("readonly")
if mibBuilder.loadTexts: ipsecSaEspInAuthKeyLength.setStatus('current')
ipsecSaEspInRepWinSize = MibTableColumn((1, 3, 6, 1, 3, 98, 1, 1, 1, 1, 16), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipsecSaEspInRepWinSize.setStatus('current')
ipsecSaEspInLimitSeconds = MibTableColumn((1, 3, 6, 1, 3, 98, 1, 1, 1, 1, 17), Unsigned32()).setUnits('seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: ipsecSaEspInLimitSeconds.setStatus('current')
ipsecSaEspInLimitKbytes = MibTableColumn((1, 3, 6, 1, 3, 98, 1, 1, 1, 1, 18), Unsigned32()).setUnits('kilobytes').setMaxAccess("readonly")
if mibBuilder.loadTexts: ipsecSaEspInLimitKbytes.setStatus('current')
ipsecSaEspInAccSeconds = MibTableColumn((1, 3, 6, 1, 3, 98, 1, 1, 1, 1, 19), Counter32()).setUnits('seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: ipsecSaEspInAccSeconds.setStatus('current')
ipsecSaEspInAccKbytes = MibTableColumn((1, 3, 6, 1, 3, 98, 1, 1, 1, 1, 20), Counter32()).setUnits('kilobytes').setMaxAccess("readonly")
if mibBuilder.loadTexts: ipsecSaEspInAccKbytes.setStatus('current')
ipsecSaEspInUserOctets = MibTableColumn((1, 3, 6, 1, 3, 98, 1, 1, 1, 1, 21), Counter64()).setUnits('bytes').setMaxAccess("readonly")
if mibBuilder.loadTexts: ipsecSaEspInUserOctets.setStatus('current')
ipsecSaEspInPackets = MibTableColumn((1, 3, 6, 1, 3, 98, 1, 1, 1, 1, 22), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipsecSaEspInPackets.setStatus('current')
ipsecSaEspInDecryptErrors = MibTableColumn((1, 3, 6, 1, 3, 98, 1, 1, 1, 1, 23), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipsecSaEspInDecryptErrors.setStatus('current')
ipsecSaEspInAuthErrors = MibTableColumn((1, 3, 6, 1, 3, 98, 1, 1, 1, 1, 24), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipsecSaEspInAuthErrors.setStatus('current')
ipsecSaEspInReplayErrors = MibTableColumn((1, 3, 6, 1, 3, 98, 1, 1, 1, 1, 25), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipsecSaEspInReplayErrors.setStatus('current')
ipsecSaEspInPolicyErrors = MibTableColumn((1, 3, 6, 1, 3, 98, 1, 1, 1, 1, 26), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipsecSaEspInPolicyErrors.setStatus('current')
ipsecSaEspInPadErrors = MibTableColumn((1, 3, 6, 1, 3, 98, 1, 1, 1, 1, 27), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipsecSaEspInPadErrors.setStatus('current')
ipsecSaEspInOtherReceiveErrors = MibTableColumn((1, 3, 6, 1, 3, 98, 1, 1, 1, 1, 28), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipsecSaEspInOtherReceiveErrors.setStatus('current')
ipsecSaAhInTable = MibTable((1, 3, 6, 1, 3, 98, 1, 1, 2), )
if mibBuilder.loadTexts: ipsecSaAhInTable.setStatus('current')
ipsecSaAhInEntry = MibTableRow((1, 3, 6, 1, 3, 98, 1, 1, 2, 1), ).setIndexNames((0, "IPSEC-SA-MON-MIB", "ipsecSaAhInAddress"), (0, "IPSEC-SA-MON-MIB", "ipsecSaAhInSpi"))
if mibBuilder.loadTexts: ipsecSaAhInEntry.setStatus('current')
ipsecSaAhInAddress = MibTableColumn((1, 3, 6, 1, 3, 98, 1, 1, 2, 1, 1), IpsecIpv6Address()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipsecSaAhInAddress.setStatus('current')
ipsecSaAhInSpi = MibTableColumn((1, 3, 6, 1, 3, 98, 1, 1, 2, 1, 2), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipsecSaAhInSpi.setStatus('current')
ipsecSaAhInDestId = MibTableColumn((1, 3, 6, 1, 3, 98, 1, 1, 2, 1, 3), IpsecRawId()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipsecSaAhInDestId.setStatus('current')
ipsecSaAhInDestIdType = MibTableColumn((1, 3, 6, 1, 3, 98, 1, 1, 2, 1, 4), IpsecDoiIdentType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipsecSaAhInDestIdType.setStatus('current')
ipsecSaAhInSourceId = MibTableColumn((1, 3, 6, 1, 3, 98, 1, 1, 2, 1, 5), IpsecRawId()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipsecSaAhInSourceId.setStatus('current')
ipsecSaAhInSourceIdType = MibTableColumn((1, 3, 6, 1, 3, 98, 1, 1, 2, 1, 6), IpsecDoiIdentType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipsecSaAhInSourceIdType.setStatus('current')
ipsecSaAhInProtocol = MibTableColumn((1, 3, 6, 1, 3, 98, 1, 1, 2, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipsecSaAhInProtocol.setStatus('current')
ipsecSaAhInDestPort = MibTableColumn((1, 3, 6, 1, 3, 98, 1, 1, 2, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipsecSaAhInDestPort.setStatus('current')
ipsecSaAhInSourcePort = MibTableColumn((1, 3, 6, 1, 3, 98, 1, 1, 2, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipsecSaAhInSourcePort.setStatus('current')
ipsecSaAhInCreator = MibTableColumn((1, 3, 6, 1, 3, 98, 1, 1, 2, 1, 10), IpsecSaCreatorIdent()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipsecSaAhInCreator.setStatus('current')
ipsecSaAhInEncapsulation = MibTableColumn((1, 3, 6, 1, 3, 98, 1, 1, 2, 1, 11), IpsecDoiEncapsulationMode()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipsecSaAhInEncapsulation.setStatus('current')
ipsecSaAhInAuthAlg = MibTableColumn((1, 3, 6, 1, 3, 98, 1, 1, 2, 1, 12), IpsecDoiAhTransform()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipsecSaAhInAuthAlg.setStatus('current')
ipsecSaAhInAuthKeyLength = MibTableColumn((1, 3, 6, 1, 3, 98, 1, 1, 2, 1, 13), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 65531))).setUnits('bits').setMaxAccess("readonly")
if mibBuilder.loadTexts: ipsecSaAhInAuthKeyLength.setStatus('current')
ipsecSaAhInRepWinSize = MibTableColumn((1, 3, 6, 1, 3, 98, 1, 1, 2, 1, 14), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipsecSaAhInRepWinSize.setStatus('current')
ipsecSaAhInLimitSeconds = MibTableColumn((1, 3, 6, 1, 3, 98, 1, 1, 2, 1, 15), Unsigned32()).setUnits('seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: ipsecSaAhInLimitSeconds.setStatus('current')
ipsecSaAhInLimitKbytes = MibTableColumn((1, 3, 6, 1, 3, 98, 1, 1, 2, 1, 16), Unsigned32()).setUnits('kilobytes').setMaxAccess("readonly")
if mibBuilder.loadTexts: ipsecSaAhInLimitKbytes.setStatus('current')
ipsecSaAhInAccSeconds = MibTableColumn((1, 3, 6, 1, 3, 98, 1, 1, 2, 1, 17), Counter32()).setUnits('seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: ipsecSaAhInAccSeconds.setStatus('current')
ipsecSaAhInAccKbytes = MibTableColumn((1, 3, 6, 1, 3, 98, 1, 1, 2, 1, 18), Counter32()).setUnits('kilobytes').setMaxAccess("readonly")
if mibBuilder.loadTexts: ipsecSaAhInAccKbytes.setStatus('current')
ipsecSaAhInUserOctets = MibTableColumn((1, 3, 6, 1, 3, 98, 1, 1, 2, 1, 19), Counter64()).setUnits('bytes').setMaxAccess("readonly")
if mibBuilder.loadTexts: ipsecSaAhInUserOctets.setStatus('current')
ipsecSaAhInPackets = MibTableColumn((1, 3, 6, 1, 3, 98, 1, 1, 2, 1, 20), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipsecSaAhInPackets.setStatus('current')
ipsecSaAhInAuthErrors = MibTableColumn((1, 3, 6, 1, 3, 98, 1, 1, 2, 1, 21), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipsecSaAhInAuthErrors.setStatus('current')
ipsecSaAhInReplayErrors = MibTableColumn((1, 3, 6, 1, 3, 98, 1, 1, 2, 1, 22), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipsecSaAhInReplayErrors.setStatus('current')
ipsecSaAhInPolicyErrors = MibTableColumn((1, 3, 6, 1, 3, 98, 1, 1, 2, 1, 23), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipsecSaAhInPolicyErrors.setStatus('current')
ipsecSaAhInOtherReceiveErrors = MibTableColumn((1, 3, 6, 1, 3, 98, 1, 1, 2, 1, 24), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipsecSaAhInOtherReceiveErrors.setStatus('current')
ipsecSaIpcompInTable = MibTable((1, 3, 6, 1, 3, 98, 1, 1, 3), )
if mibBuilder.loadTexts: ipsecSaIpcompInTable.setStatus('current')
ipsecSaIpcompInEntry = MibTableRow((1, 3, 6, 1, 3, 98, 1, 1, 3, 1), ).setIndexNames((0, "IPSEC-SA-MON-MIB", "ipsecSaIpcompInAddress"), (0, "IPSEC-SA-MON-MIB", "ipsecSaIpcompInCpi"))
if mibBuilder.loadTexts: ipsecSaIpcompInEntry.setStatus('current')
ipsecSaIpcompInAddress = MibTableColumn((1, 3, 6, 1, 3, 98, 1, 1, 3, 1, 1), IpsecIpv6Address()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipsecSaIpcompInAddress.setStatus('current')
ipsecSaIpcompInCpi = MibTableColumn((1, 3, 6, 1, 3, 98, 1, 1, 3, 1, 2), IpsecDoiIpcompTransform()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipsecSaIpcompInCpi.setStatus('current')
ipsecSaIpcompInDestId = MibTableColumn((1, 3, 6, 1, 3, 98, 1, 1, 3, 1, 3), IpsecRawId()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipsecSaIpcompInDestId.setStatus('current')
ipsecSaIpcompInDestIdType = MibTableColumn((1, 3, 6, 1, 3, 98, 1, 1, 3, 1, 4), IpsecDoiIdentType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipsecSaIpcompInDestIdType.setStatus('current')
ipsecSaIpcompInSourceId = MibTableColumn((1, 3, 6, 1, 3, 98, 1, 1, 3, 1, 5), IpsecRawId()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipsecSaIpcompInSourceId.setStatus('current')
ipsecSaIpcompInSourceIdType = MibTableColumn((1, 3, 6, 1, 3, 98, 1, 1, 3, 1, 6), IpsecDoiIdentType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipsecSaIpcompInSourceIdType.setStatus('current')
ipsecSaIpcompInProtocol = MibTableColumn((1, 3, 6, 1, 3, 98, 1, 1, 3, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipsecSaIpcompInProtocol.setStatus('current')
ipsecSaIpcompInDestPort = MibTableColumn((1, 3, 6, 1, 3, 98, 1, 1, 3, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipsecSaIpcompInDestPort.setStatus('current')
ipsecSaIpcompInSourcePort = MibTableColumn((1, 3, 6, 1, 3, 98, 1, 1, 3, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipsecSaIpcompInSourcePort.setStatus('current')
ipsecSaIpcompInCreator = MibTableColumn((1, 3, 6, 1, 3, 98, 1, 1, 3, 1, 10), IpsecSaCreatorIdent()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipsecSaIpcompInCreator.setStatus('current')
ipsecSaIpcompInEncapsulation = MibTableColumn((1, 3, 6, 1, 3, 98, 1, 1, 3, 1, 11), IpsecDoiEncapsulationMode()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipsecSaIpcompInEncapsulation.setStatus('current')
ipsecSaIpcompInDecompAlg = MibTableColumn((1, 3, 6, 1, 3, 98, 1, 1, 3, 1, 12), IpsecDoiIpcompTransform()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipsecSaIpcompInDecompAlg.setStatus('current')
ipsecSaIpcompInSeconds = MibTableColumn((1, 3, 6, 1, 3, 98, 1, 1, 3, 1, 13), Counter32()).setUnits('seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: ipsecSaIpcompInSeconds.setStatus('current')
ipsecSaIpcompInUserOctets = MibTableColumn((1, 3, 6, 1, 3, 98, 1, 1, 3, 1, 14), Counter64()).setUnits('bytes').setMaxAccess("readonly")
if mibBuilder.loadTexts: ipsecSaIpcompInUserOctets.setStatus('current')
ipsecSaIpcompInPackets = MibTableColumn((1, 3, 6, 1, 3, 98, 1, 1, 3, 1, 15), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipsecSaIpcompInPackets.setStatus('current')
ipsecSaIpcompInDecompErrors = MibTableColumn((1, 3, 6, 1, 3, 98, 1, 1, 3, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipsecSaIpcompInDecompErrors.setStatus('current')
ipsecSaIpcompInOtherReceiveErrors = MibTableColumn((1, 3, 6, 1, 3, 98, 1, 1, 3, 1, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipsecSaIpcompInOtherReceiveErrors.setStatus('current')
ipsecSaEspOutTable = MibTable((1, 3, 6, 1, 3, 98, 1, 1, 4), )
if mibBuilder.loadTexts: ipsecSaEspOutTable.setStatus('current')
ipsecSaEspOutEntry = MibTableRow((1, 3, 6, 1, 3, 98, 1, 1, 4, 1), ).setIndexNames((0, "IPSEC-SA-MON-MIB", "ipsecSaEspOutAddress"), (0, "IPSEC-SA-MON-MIB", "ipsecSaEspOutSpi"))
if mibBuilder.loadTexts: ipsecSaEspOutEntry.setStatus('current')
ipsecSaEspOutAddress = MibTableColumn((1, 3, 6, 1, 3, 98, 1, 1, 4, 1, 1), IpsecIpv6Address()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipsecSaEspOutAddress.setStatus('current')
ipsecSaEspOutSpi = MibTableColumn((1, 3, 6, 1, 3, 98, 1, 1, 4, 1, 2), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipsecSaEspOutSpi.setStatus('current')
ipsecSaEspOutSourceId = MibTableColumn((1, 3, 6, 1, 3, 98, 1, 1, 4, 1, 3), IpsecRawId()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipsecSaEspOutSourceId.setStatus('current')
ipsecSaEspOutSourceIdType = MibTableColumn((1, 3, 6, 1, 3, 98, 1, 1, 4, 1, 4), IpsecDoiIdentType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipsecSaEspOutSourceIdType.setStatus('current')
ipsecSaEspOutDestId = MibTableColumn((1, 3, 6, 1, 3, 98, 1, 1, 4, 1, 5), IpsecRawId()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipsecSaEspOutDestId.setStatus('current')
ipsecSaEspOutDestIdType = MibTableColumn((1, 3, 6, 1, 3, 98, 1, 1, 4, 1, 6), IpsecDoiIdentType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipsecSaEspOutDestIdType.setStatus('current')
ipsecSaEspOutProtocol = MibTableColumn((1, 3, 6, 1, 3, 98, 1, 1, 4, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipsecSaEspOutProtocol.setStatus('current')
ipsecSaEspOutSourcePort = MibTableColumn((1, 3, 6, 1, 3, 98, 1, 1, 4, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipsecSaEspOutSourcePort.setStatus('current')
ipsecSaEspOutDestPort = MibTableColumn((1, 3, 6, 1, 3, 98, 1, 1, 4, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipsecSaEspOutDestPort.setStatus('current')
ipsecSaEspOutCreator = MibTableColumn((1, 3, 6, 1, 3, 98, 1, 1, 4, 1, 10), IpsecSaCreatorIdent()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipsecSaEspOutCreator.setStatus('current')
ipsecSaEspOutEncapsulation = MibTableColumn((1, 3, 6, 1, 3, 98, 1, 1, 4, 1, 11), IpsecDoiEncapsulationMode()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipsecSaEspOutEncapsulation.setStatus('current')
ipsecSaEspOutEncAlg = MibTableColumn((1, 3, 6, 1, 3, 98, 1, 1, 4, 1, 12), IpsecDoiEspTransform()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipsecSaEspOutEncAlg.setStatus('current')
ipsecSaEspOutEncKeyLength = MibTableColumn((1, 3, 6, 1, 3, 98, 1, 1, 4, 1, 13), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 65531))).setUnits('bits').setMaxAccess("readonly")
if mibBuilder.loadTexts: ipsecSaEspOutEncKeyLength.setStatus('current')
ipsecSaEspOutAuthAlg = MibTableColumn((1, 3, 6, 1, 3, 98, 1, 1, 4, 1, 14), IpsecDoiAuthAlgorithm()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipsecSaEspOutAuthAlg.setStatus('current')
ipsecSaEspOutAuthKeyLength = MibTableColumn((1, 3, 6, 1, 3, 98, 1, 1, 4, 1, 15), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 65531))).setUnits('bits').setMaxAccess("readonly")
if mibBuilder.loadTexts: ipsecSaEspOutAuthKeyLength.setStatus('current')
ipsecSaEspOutLimitSeconds = MibTableColumn((1, 3, 6, 1, 3, 98, 1, 1, 4, 1, 16), Unsigned32()).setUnits('seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: ipsecSaEspOutLimitSeconds.setStatus('current')
ipsecSaEspOutLimitKbytes = MibTableColumn((1, 3, 6, 1, 3, 98, 1, 1, 4, 1, 17), Unsigned32()).setUnits('kilobytes').setMaxAccess("readonly")
if mibBuilder.loadTexts: ipsecSaEspOutLimitKbytes.setStatus('current')
ipsecSaEspOutAccSeconds = MibTableColumn((1, 3, 6, 1, 3, 98, 1, 1, 4, 1, 18), Counter32()).setUnits('seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: ipsecSaEspOutAccSeconds.setStatus('current')
ipsecSaEspOutAccKbytes = MibTableColumn((1, 3, 6, 1, 3, 98, 1, 1, 4, 1, 19), Counter32()).setUnits('kilobytes').setMaxAccess("readonly")
if mibBuilder.loadTexts: ipsecSaEspOutAccKbytes.setStatus('current')
ipsecSaEspOutUserOctets = MibTableColumn((1, 3, 6, 1, 3, 98, 1, 1, 4, 1, 20), Counter64()).setUnits('bytes').setMaxAccess("readonly")
if mibBuilder.loadTexts: ipsecSaEspOutUserOctets.setStatus('current')
ipsecSaEspOutPackets = MibTableColumn((1, 3, 6, 1, 3, 98, 1, 1, 4, 1, 21), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipsecSaEspOutPackets.setStatus('current')
ipsecSaEspOutSendErrors = MibTableColumn((1, 3, 6, 1, 3, 98, 1, 1, 4, 1, 22), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipsecSaEspOutSendErrors.setStatus('current')
ipsecSaAhOutTable = MibTable((1, 3, 6, 1, 3, 98, 1, 1, 5), )
if mibBuilder.loadTexts: ipsecSaAhOutTable.setStatus('current')
ipsecSaAhOutEntry = MibTableRow((1, 3, 6, 1, 3, 98, 1, 1, 5, 1), ).setIndexNames((0, "IPSEC-SA-MON-MIB", "ipsecSaAhOutAddress"), (0, "IPSEC-SA-MON-MIB", "ipsecSaAhOutSpi"))
if mibBuilder.loadTexts: ipsecSaAhOutEntry.setStatus('current')
ipsecSaAhOutAddress = MibTableColumn((1, 3, 6, 1, 3, 98, 1, 1, 5, 1, 1), IpsecIpv6Address()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipsecSaAhOutAddress.setStatus('current')
ipsecSaAhOutSpi = MibTableColumn((1, 3, 6, 1, 3, 98, 1, 1, 5, 1, 2), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipsecSaAhOutSpi.setStatus('current')
ipsecSaAhOutSourceId = MibTableColumn((1, 3, 6, 1, 3, 98, 1, 1, 5, 1, 3), IpsecRawId()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipsecSaAhOutSourceId.setStatus('current')
ipsecSaAhOutSourceIdType = MibTableColumn((1, 3, 6, 1, 3, 98, 1, 1, 5, 1, 4), IpsecDoiIdentType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipsecSaAhOutSourceIdType.setStatus('current')
ipsecSaAhOutDestId = MibTableColumn((1, 3, 6, 1, 3, 98, 1, 1, 5, 1, 5), IpsecRawId()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipsecSaAhOutDestId.setStatus('current')
ipsecSaAhOutDestIdType = MibTableColumn((1, 3, 6, 1, 3, 98, 1, 1, 5, 1, 6), IpsecDoiIdentType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipsecSaAhOutDestIdType.setStatus('current')
ipsecSaAhOutProtocol = MibTableColumn((1, 3, 6, 1, 3, 98, 1, 1, 5, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipsecSaAhOutProtocol.setStatus('current')
ipsecSaAhOutSourcePort = MibTableColumn((1, 3, 6, 1, 3, 98, 1, 1, 5, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipsecSaAhOutSourcePort.setStatus('current')
ipsecSaAhOutDestPort = MibTableColumn((1, 3, 6, 1, 3, 98, 1, 1, 5, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipsecSaAhOutDestPort.setStatus('current')
ipsecSaAhOutCreator = MibTableColumn((1, 3, 6, 1, 3, 98, 1, 1, 5, 1, 10), IpsecSaCreatorIdent()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipsecSaAhOutCreator.setStatus('current')
ipsecSaAhOutEncapsulation = MibTableColumn((1, 3, 6, 1, 3, 98, 1, 1, 5, 1, 11), IpsecDoiEncapsulationMode()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipsecSaAhOutEncapsulation.setStatus('current')
ipsecSaAhOutAuthAlg = MibTableColumn((1, 3, 6, 1, 3, 98, 1, 1, 5, 1, 12), IpsecDoiAhTransform()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipsecSaAhOutAuthAlg.setStatus('current')
ipsecSaAhOutAuthKeyLength = MibTableColumn((1, 3, 6, 1, 3, 98, 1, 1, 5, 1, 13), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 65531))).setUnits('bits').setMaxAccess("readonly")
if mibBuilder.loadTexts: ipsecSaAhOutAuthKeyLength.setStatus('current')
ipsecSaAhOutLimitSeconds = MibTableColumn((1, 3, 6, 1, 3, 98, 1, 1, 5, 1, 14), Unsigned32()).setUnits('seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: ipsecSaAhOutLimitSeconds.setStatus('current')
ipsecSaAhOutLimitKbytes = MibTableColumn((1, 3, 6, 1, 3, 98, 1, 1, 5, 1, 15), Unsigned32()).setUnits('kilobytes').setMaxAccess("readonly")
if mibBuilder.loadTexts: ipsecSaAhOutLimitKbytes.setStatus('current')
ipsecSaAhOutAccSeconds = MibTableColumn((1, 3, 6, 1, 3, 98, 1, 1, 5, 1, 16), Counter32()).setUnits('seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: ipsecSaAhOutAccSeconds.setStatus('current')
ipsecSaAhOutAccKbytes = MibTableColumn((1, 3, 6, 1, 3, 98, 1, 1, 5, 1, 17), Counter32()).setUnits('kilobytes').setMaxAccess("readonly")
if mibBuilder.loadTexts: ipsecSaAhOutAccKbytes.setStatus('current')
ipsecSaAhOutUserOctets = MibTableColumn((1, 3, 6, 1, 3, 98, 1, 1, 5, 1, 18), Counter64()).setUnits('bytes').setMaxAccess("readonly")
if mibBuilder.loadTexts: ipsecSaAhOutUserOctets.setStatus('current')
ipsecSaAhOutPackets = MibTableColumn((1, 3, 6, 1, 3, 98, 1, 1, 5, 1, 19), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipsecSaAhOutPackets.setStatus('current')
ipsecSaAhOutSendErrors = MibTableColumn((1, 3, 6, 1, 3, 98, 1, 1, 5, 1, 20), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipsecSaAhOutSendErrors.setStatus('current')
ipsecSaIpcompOutTable = MibTable((1, 3, 6, 1, 3, 98, 1, 1, 6), )
if mibBuilder.loadTexts: ipsecSaIpcompOutTable.setStatus('current')
ipsecSaIpcompOutEntry = MibTableRow((1, 3, 6, 1, 3, 98, 1, 1, 6, 1), ).setIndexNames((0, "IPSEC-SA-MON-MIB", "ipsecSaIpcompOutAddress"), (0, "IPSEC-SA-MON-MIB", "ipsecSaIpcompOutCpi"))
if mibBuilder.loadTexts: ipsecSaIpcompOutEntry.setStatus('current')
ipsecSaIpcompOutAddress = MibTableColumn((1, 3, 6, 1, 3, 98, 1, 1, 6, 1, 1), IpsecIpv6Address()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipsecSaIpcompOutAddress.setStatus('current')
ipsecSaIpcompOutCpi = MibTableColumn((1, 3, 6, 1, 3, 98, 1, 1, 6, 1, 2), IpsecDoiIpcompTransform()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipsecSaIpcompOutCpi.setStatus('current')
ipsecSaIpcompOutSourceId = MibTableColumn((1, 3, 6, 1, 3, 98, 1, 1, 6, 1, 3), IpsecRawId()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipsecSaIpcompOutSourceId.setStatus('current')
ipsecSaIpcompOutSourceIdType = MibTableColumn((1, 3, 6, 1, 3, 98, 1, 1, 6, 1, 4), IpsecDoiIdentType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipsecSaIpcompOutSourceIdType.setStatus('current')
ipsecSaIpcompOutDestId = MibTableColumn((1, 3, 6, 1, 3, 98, 1, 1, 6, 1, 5), IpsecRawId()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipsecSaIpcompOutDestId.setStatus('current')
ipsecSaIpcompOutDestIdType = MibTableColumn((1, 3, 6, 1, 3, 98, 1, 1, 6, 1, 6), IpsecDoiIdentType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipsecSaIpcompOutDestIdType.setStatus('current')
ipsecSaIpcompOutProtocol = MibTableColumn((1, 3, 6, 1, 3, 98, 1, 1, 6, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipsecSaIpcompOutProtocol.setStatus('current')
ipsecSaIpcompOutSourcePort = MibTableColumn((1, 3, 6, 1, 3, 98, 1, 1, 6, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipsecSaIpcompOutSourcePort.setStatus('current')
ipsecSaIpcompOutDestPort = MibTableColumn((1, 3, 6, 1, 3, 98, 1, 1, 6, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipsecSaIpcompOutDestPort.setStatus('current')
ipsecSaIpcompOutCreator = MibTableColumn((1, 3, 6, 1, 3, 98, 1, 1, 6, 1, 10), IpsecSaCreatorIdent()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipsecSaIpcompOutCreator.setStatus('current')
ipsecSaIpcompOutEncapsulation = MibTableColumn((1, 3, 6, 1, 3, 98, 1, 1, 6, 1, 11), IpsecDoiEncapsulationMode()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipsecSaIpcompOutEncapsulation.setStatus('current')
ipsecSaIpcompOutCompAlg = MibTableColumn((1, 3, 6, 1, 3, 98, 1, 1, 6, 1, 12), IpsecDoiIpcompTransform()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipsecSaIpcompOutCompAlg.setStatus('current')
ipsecSaIpcompOutSeconds = MibTableColumn((1, 3, 6, 1, 3, 98, 1, 1, 6, 1, 13), Counter32()).setUnits('seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: ipsecSaIpcompOutSeconds.setStatus('current')
ipsecSaIpcompOutUserOctets = MibTableColumn((1, 3, 6, 1, 3, 98, 1, 1, 6, 1, 14), Counter64()).setUnits('bytes').setMaxAccess("readonly")
if mibBuilder.loadTexts: ipsecSaIpcompOutUserOctets.setStatus('current')
ipsecSaIpcompOutOutputOctets = MibTableColumn((1, 3, 6, 1, 3, 98, 1, 1, 6, 1, 15), Counter64()).setUnits('bytes').setMaxAccess("readonly")
if mibBuilder.loadTexts: ipsecSaIpcompOutOutputOctets.setStatus('current')
ipsecSaIpcompOutPackets = MibTableColumn((1, 3, 6, 1, 3, 98, 1, 1, 6, 1, 16), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipsecSaIpcompOutPackets.setStatus('current')
ipsecEspCurrentInboundSAs = MibScalar((1, 3, 6, 1, 3, 98, 1, 2, 1), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipsecEspCurrentInboundSAs.setStatus('current')
ipsecEspTotalInboundSAs = MibScalar((1, 3, 6, 1, 3, 98, 1, 2, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipsecEspTotalInboundSAs.setStatus('current')
ipsecEspCurrentOutboundSAs = MibScalar((1, 3, 6, 1, 3, 98, 1, 2, 3), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipsecEspCurrentOutboundSAs.setStatus('current')
ipsecEspTotalOutboundSAs = MibScalar((1, 3, 6, 1, 3, 98, 1, 2, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipsecEspTotalOutboundSAs.setStatus('current')
ipsecAhCurrentInboundSAs = MibScalar((1, 3, 6, 1, 3, 98, 1, 2, 5), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipsecAhCurrentInboundSAs.setStatus('current')
ipsecAhTotalInboundSAs = MibScalar((1, 3, 6, 1, 3, 98, 1, 2, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipsecAhTotalInboundSAs.setStatus('current')
ipsecAhCurrentOutboundSAs = MibScalar((1, 3, 6, 1, 3, 98, 1, 2, 7), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipsecAhCurrentOutboundSAs.setStatus('current')
ipsecAhTotalOutboundSAs = MibScalar((1, 3, 6, 1, 3, 98, 1, 2, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipsecAhTotalOutboundSAs.setStatus('current')
ipsecIpcompCurrentInboundSAs = MibScalar((1, 3, 6, 1, 3, 98, 1, 2, 9), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipsecIpcompCurrentInboundSAs.setStatus('current')
ipsecIpcompTotalInboundSAs = MibScalar((1, 3, 6, 1, 3, 98, 1, 2, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipsecIpcompTotalInboundSAs.setStatus('current')
ipsecIpcompCurrentOutboundSAs = MibScalar((1, 3, 6, 1, 3, 98, 1, 2, 11), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipsecIpcompCurrentOutboundSAs.setStatus('current')
ipsecIpcompTotalOutboundSAs = MibScalar((1, 3, 6, 1, 3, 98, 1, 2, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipsecIpcompTotalOutboundSAs.setStatus('current')
ipsecDecryptionErrors = MibScalar((1, 3, 6, 1, 3, 98, 1, 3, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipsecDecryptionErrors.setStatus('current')
ipsecAuthenticationErrors = MibScalar((1, 3, 6, 1, 3, 98, 1, 3, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipsecAuthenticationErrors.setStatus('current')
ipsecReplayErrors = MibScalar((1, 3, 6, 1, 3, 98, 1, 3, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipsecReplayErrors.setStatus('current')
ipsecPolicyErrors = MibScalar((1, 3, 6, 1, 3, 98, 1, 3, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipsecPolicyErrors.setStatus('current')
ipsecOtherReceiveErrors = MibScalar((1, 3, 6, 1, 3, 98, 1, 3, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipsecOtherReceiveErrors.setStatus('current')
ipsecSendErrors = MibScalar((1, 3, 6, 1, 3, 98, 1, 3, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipsecSendErrors.setStatus('current')
ipsecUnknownSpiErrors = MibScalar((1, 3, 6, 1, 3, 98, 1, 3, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipsecUnknownSpiErrors.setStatus('current')
ipsecSecurityProtocol = MibScalar((1, 3, 6, 1, 3, 98, 1, 5, 1), IpsecDoiSecProtocolId()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: ipsecSecurityProtocol.setStatus('current')
ipsecSPI = MibScalar((1, 3, 6, 1, 3, 98, 1, 5, 2), Unsigned32()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: ipsecSPI.setStatus('current')
ipsecLocalAddress = MibScalar((1, 3, 6, 1, 3, 98, 1, 5, 3), IpsecIpv6Address()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: ipsecLocalAddress.setStatus('current')
ipsecPeerAddress = MibScalar((1, 3, 6, 1, 3, 98, 1, 5, 4), IpsecIpv6Address()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: ipsecPeerAddress.setStatus('current')
espAuthFailureTrapEnable = MibScalar((1, 3, 6, 1, 3, 98, 1, 6, 1), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: espAuthFailureTrapEnable.setStatus('current')
ahAuthFailureTrapEnable = MibScalar((1, 3, 6, 1, 3, 98, 1, 6, 2), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ahAuthFailureTrapEnable.setStatus('current')
espReplayFailureTrapEnable = MibScalar((1, 3, 6, 1, 3, 98, 1, 6, 3), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: espReplayFailureTrapEnable.setStatus('current')
ahReplayFailureTrapEnable = MibScalar((1, 3, 6, 1, 3, 98, 1, 6, 4), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ahReplayFailureTrapEnable.setStatus('current')
espPolicyFailureTrapEnable = MibScalar((1, 3, 6, 1, 3, 98, 1, 6, 5), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: espPolicyFailureTrapEnable.setStatus('current')
ahPolicyFailureTrapEnable = MibScalar((1, 3, 6, 1, 3, 98, 1, 6, 6), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ahPolicyFailureTrapEnable.setStatus('current')
invalidSpiTrapEnable = MibScalar((1, 3, 6, 1, 3, 98, 1, 6, 7), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: invalidSpiTrapEnable.setStatus('current')
otherPolicyFailureTrapEnable = MibScalar((1, 3, 6, 1, 3, 98, 1, 6, 8), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: otherPolicyFailureTrapEnable.setStatus('current')
espAuthFailureTrap = NotificationType((1, 3, 6, 1, 3, 98, 1, 4, 0, 1)).setObjects(("IPSEC-SA-MON-MIB", "ipsecSaEspInAuthErrors"))
if mibBuilder.loadTexts: espAuthFailureTrap.setStatus('current')
ahAuthFailureTrap = NotificationType((1, 3, 6, 1, 3, 98, 1, 4, 0, 2)).setObjects(("IPSEC-SA-MON-MIB", "ipsecSaAhInAuthErrors"))
if mibBuilder.loadTexts: ahAuthFailureTrap.setStatus('current')
espReplayFailureTrap = NotificationType((1, 3, 6, 1, 3, 98, 1, 4, 0, 3)).setObjects(("IPSEC-SA-MON-MIB", "ipsecSaEspInReplayErrors"))
if mibBuilder.loadTexts: espReplayFailureTrap.setStatus('current')
ahReplayFailureTrap = NotificationType((1, 3, 6, 1, 3, 98, 1, 4, 0, 4)).setObjects(("IPSEC-SA-MON-MIB", "ipsecSaAhInReplayErrors"))
if mibBuilder.loadTexts: ahReplayFailureTrap.setStatus('current')
espPolicyFailureTrap = NotificationType((1, 3, 6, 1, 3, 98, 1, 4, 0, 5)).setObjects(("IPSEC-SA-MON-MIB", "ipsecSaEspInPolicyErrors"))
if mibBuilder.loadTexts: espPolicyFailureTrap.setStatus('current')
ahPolicyFailureTrap = NotificationType((1, 3, 6, 1, 3, 98, 1, 4, 0, 6)).setObjects(("IPSEC-SA-MON-MIB", "ipsecSaAhInPolicyErrors"))
if mibBuilder.loadTexts: ahPolicyFailureTrap.setStatus('current')
espInvalidSpiTrap = NotificationType((1, 3, 6, 1, 3, 98, 1, 4, 0, 7)).setObjects(("IPSEC-SA-MON-MIB", "ipsecLocalAddress"), ("IPSEC-SA-MON-MIB", "ipsecSecurityProtocol"), ("IPSEC-SA-MON-MIB", "ipsecPeerAddress"), ("IPSEC-SA-MON-MIB", "ipsecSPI"), ("IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: espInvalidSpiTrap.setStatus('current')
otherPolicyFailureTrap = NotificationType((1, 3, 6, 1, 3, 98, 1, 4, 0, 8)).setObjects(("IPSEC-SA-MON-MIB", "ipsecPolicyErrors"), ("IPSEC-SA-MON-MIB", "ipsecPeerAddress"), ("IPSEC-SA-MON-MIB", "ipsecLocalAddress"))
if mibBuilder.loadTexts: otherPolicyFailureTrap.setStatus('current')
ipsecSaEspGroup = ObjectGroup((1, 3, 6, 1, 3, 98, 1, 7, 1)).setObjects(("IPSEC-SA-MON-MIB", "ipsecSaEspInAddress"), ("IPSEC-SA-MON-MIB", "ipsecSaEspInSpi"), ("IPSEC-SA-MON-MIB", "ipsecSaEspInDestId"), ("IPSEC-SA-MON-MIB", "ipsecSaEspInDestIdType"), ("IPSEC-SA-MON-MIB", "ipsecSaEspInSourceId"), ("IPSEC-SA-MON-MIB", "ipsecSaEspInSourceIdType"), ("IPSEC-SA-MON-MIB", "ipsecSaEspInProtocol"), ("IPSEC-SA-MON-MIB", "ipsecSaEspInDestPort"), ("IPSEC-SA-MON-MIB", "ipsecSaEspInSourcePort"), ("IPSEC-SA-MON-MIB", "ipsecSaEspInCreator"), ("IPSEC-SA-MON-MIB", "ipsecSaEspInEncapsulation"), ("IPSEC-SA-MON-MIB", "ipsecSaEspInEncAlg"), ("IPSEC-SA-MON-MIB", "ipsecSaEspInEncKeyLength"), ("IPSEC-SA-MON-MIB", "ipsecSaEspInAuthAlg"), ("IPSEC-SA-MON-MIB", "ipsecSaEspInAuthKeyLength"), ("IPSEC-SA-MON-MIB", "ipsecSaEspInRepWinSize"), ("IPSEC-SA-MON-MIB", "ipsecSaEspInLimitSeconds"), ("IPSEC-SA-MON-MIB", "ipsecSaEspInLimitKbytes"), ("IPSEC-SA-MON-MIB", "ipsecSaEspInAccSeconds"), ("IPSEC-SA-MON-MIB", "ipsecSaEspInAccKbytes"), ("IPSEC-SA-MON-MIB", "ipsecSaEspInUserOctets"), ("IPSEC-SA-MON-MIB", "ipsecSaEspInPackets"), ("IPSEC-SA-MON-MIB", "ipsecSaEspInDecryptErrors"), ("IPSEC-SA-MON-MIB", "ipsecSaEspInAuthErrors"), ("IPSEC-SA-MON-MIB", "ipsecSaEspInReplayErrors"), ("IPSEC-SA-MON-MIB", "ipsecSaEspInPolicyErrors"), ("IPSEC-SA-MON-MIB", "ipsecSaEspInPadErrors"), ("IPSEC-SA-MON-MIB", "ipsecSaEspInOtherReceiveErrors"), ("IPSEC-SA-MON-MIB", "ipsecSaEspOutAddress"), ("IPSEC-SA-MON-MIB", "ipsecSaEspOutSpi"), ("IPSEC-SA-MON-MIB", "ipsecSaEspOutSourceId"), ("IPSEC-SA-MON-MIB", "ipsecSaEspOutSourceIdType"), ("IPSEC-SA-MON-MIB", "ipsecSaEspOutDestId"), ("IPSEC-SA-MON-MIB", "ipsecSaEspOutDestIdType"), ("IPSEC-SA-MON-MIB", "ipsecSaEspOutProtocol"), ("IPSEC-SA-MON-MIB", "ipsecSaEspOutSourcePort"), ("IPSEC-SA-MON-MIB", "ipsecSaEspOutDestPort"), ("IPSEC-SA-MON-MIB", "ipsecSaEspOutCreator"), ("IPSEC-SA-MON-MIB", "ipsecSaEspOutEncapsulation"), ("IPSEC-SA-MON-MIB", "ipsecSaEspOutEncAlg"), ("IPSEC-SA-MON-MIB", "ipsecSaEspOutAuthKeyLength"), ("IPSEC-SA-MON-MIB", "ipsecSaEspOutEncKeyLength"), ("IPSEC-SA-MON-MIB", "ipsecSaEspOutAuthAlg"), ("IPSEC-SA-MON-MIB", "ipsecSaEspOutLimitSeconds"), ("IPSEC-SA-MON-MIB", "ipsecSaEspOutLimitKbytes"), ("IPSEC-SA-MON-MIB", "ipsecSaEspOutAccSeconds"), ("IPSEC-SA-MON-MIB", "ipsecSaEspOutAccKbytes"), ("IPSEC-SA-MON-MIB", "ipsecSaEspOutUserOctets"), ("IPSEC-SA-MON-MIB", "ipsecSaEspOutPackets"), ("IPSEC-SA-MON-MIB", "ipsecSaEspOutSendErrors"), ("IPSEC-SA-MON-MIB", "ipsecEspCurrentInboundSAs"), ("IPSEC-SA-MON-MIB", "ipsecEspTotalInboundSAs"), ("IPSEC-SA-MON-MIB", "ipsecEspCurrentOutboundSAs"), ("IPSEC-SA-MON-MIB", "ipsecEspTotalOutboundSAs"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ipsecSaEspGroup = ipsecSaEspGroup.setStatus('current')
ipsecSaAhGroup = ObjectGroup((1, 3, 6, 1, 3, 98, 1, 7, 2)).setObjects(("IPSEC-SA-MON-MIB", "ipsecSaAhInAddress"), ("IPSEC-SA-MON-MIB", "ipsecSaAhInSpi"), ("IPSEC-SA-MON-MIB", "ipsecSaAhInDestId"), ("IPSEC-SA-MON-MIB", "ipsecSaAhInDestIdType"), ("IPSEC-SA-MON-MIB", "ipsecSaAhInSourceId"), ("IPSEC-SA-MON-MIB", "ipsecSaAhInSourceIdType"), ("IPSEC-SA-MON-MIB", "ipsecSaAhInProtocol"), ("IPSEC-SA-MON-MIB", "ipsecSaAhInDestPort"), ("IPSEC-SA-MON-MIB", "ipsecSaAhInSourcePort"), ("IPSEC-SA-MON-MIB", "ipsecSaAhInCreator"), ("IPSEC-SA-MON-MIB", "ipsecSaAhInEncapsulation"), ("IPSEC-SA-MON-MIB", "ipsecSaAhInAuthAlg"), ("IPSEC-SA-MON-MIB", "ipsecSaAhInAuthKeyLength"), ("IPSEC-SA-MON-MIB", "ipsecSaAhInRepWinSize"), ("IPSEC-SA-MON-MIB", "ipsecSaAhInLimitSeconds"), ("IPSEC-SA-MON-MIB", "ipsecSaAhInLimitKbytes"), ("IPSEC-SA-MON-MIB", "ipsecSaAhInAccSeconds"), ("IPSEC-SA-MON-MIB", "ipsecSaAhInAccKbytes"), ("IPSEC-SA-MON-MIB", "ipsecSaAhInUserOctets"), ("IPSEC-SA-MON-MIB", "ipsecSaAhInPackets"), ("IPSEC-SA-MON-MIB", "ipsecSaAhInAuthErrors"), ("IPSEC-SA-MON-MIB", "ipsecSaAhInReplayErrors"), ("IPSEC-SA-MON-MIB", "ipsecSaAhInPolicyErrors"), ("IPSEC-SA-MON-MIB", "ipsecSaAhInOtherReceiveErrors"), ("IPSEC-SA-MON-MIB", "ipsecSaAhOutAddress"), ("IPSEC-SA-MON-MIB", "ipsecSaAhOutSpi"), ("IPSEC-SA-MON-MIB", "ipsecSaAhOutSourceId"), ("IPSEC-SA-MON-MIB", "ipsecSaAhOutSourceIdType"), ("IPSEC-SA-MON-MIB", "ipsecSaAhOutDestId"), ("IPSEC-SA-MON-MIB", "ipsecSaAhOutDestIdType"), ("IPSEC-SA-MON-MIB", "ipsecSaAhOutProtocol"), ("IPSEC-SA-MON-MIB", "ipsecSaAhOutSourcePort"), ("IPSEC-SA-MON-MIB", "ipsecSaAhOutDestPort"), ("IPSEC-SA-MON-MIB", "ipsecSaAhOutCreator"), ("IPSEC-SA-MON-MIB", "ipsecSaAhOutEncapsulation"), ("IPSEC-SA-MON-MIB", "ipsecSaAhOutAuthAlg"), ("IPSEC-SA-MON-MIB", "ipsecSaAhOutAuthKeyLength"), ("IPSEC-SA-MON-MIB", "ipsecSaAhOutLimitSeconds"), ("IPSEC-SA-MON-MIB", "ipsecSaAhOutLimitKbytes"), ("IPSEC-SA-MON-MIB", "ipsecSaAhOutAccSeconds"), ("IPSEC-SA-MON-MIB", "ipsecSaAhOutAccKbytes"), ("IPSEC-SA-MON-MIB", "ipsecSaAhOutUserOctets"), ("IPSEC-SA-MON-MIB", "ipsecSaAhOutPackets"), ("IPSEC-SA-MON-MIB", "ipsecSaAhOutSendErrors"), ("IPSEC-SA-MON-MIB", "ipsecAhCurrentInboundSAs"), ("IPSEC-SA-MON-MIB", "ipsecAhTotalInboundSAs"), ("IPSEC-SA-MON-MIB", "ipsecAhCurrentOutboundSAs"), ("IPSEC-SA-MON-MIB", "ipsecAhTotalOutboundSAs"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ipsecSaAhGroup = ipsecSaAhGroup.setStatus('current')
ipsecSaIpcompGroup = ObjectGroup((1, 3, 6, 1, 3, 98, 1, 7, 3)).setObjects(("IPSEC-SA-MON-MIB", "ipsecSaIpcompInAddress"), ("IPSEC-SA-MON-MIB", "ipsecSaIpcompInCpi"), ("IPSEC-SA-MON-MIB", "ipsecSaIpcompInDestId"), ("IPSEC-SA-MON-MIB", "ipsecSaIpcompInDestIdType"), ("IPSEC-SA-MON-MIB", "ipsecSaIpcompInSourceId"), ("IPSEC-SA-MON-MIB", "ipsecSaIpcompInSourceIdType"), ("IPSEC-SA-MON-MIB", "ipsecSaIpcompInProtocol"), ("IPSEC-SA-MON-MIB", "ipsecSaIpcompInDestPort"), ("IPSEC-SA-MON-MIB", "ipsecSaIpcompInSourcePort"), ("IPSEC-SA-MON-MIB", "ipsecSaIpcompInCreator"), ("IPSEC-SA-MON-MIB", "ipsecSaIpcompInEncapsulation"), ("IPSEC-SA-MON-MIB", "ipsecSaIpcompInDecompAlg"), ("IPSEC-SA-MON-MIB", "ipsecSaIpcompInSeconds"), ("IPSEC-SA-MON-MIB", "ipsecSaIpcompInUserOctets"), ("IPSEC-SA-MON-MIB", "ipsecSaIpcompInPackets"), ("IPSEC-SA-MON-MIB", "ipsecSaIpcompInDecompErrors"), ("IPSEC-SA-MON-MIB", "ipsecSaIpcompInOtherReceiveErrors"), ("IPSEC-SA-MON-MIB", "ipsecSaIpcompOutAddress"), ("IPSEC-SA-MON-MIB", "ipsecSaIpcompOutCpi"), ("IPSEC-SA-MON-MIB", "ipsecSaIpcompOutSourceId"), ("IPSEC-SA-MON-MIB", "ipsecSaIpcompOutSourceIdType"), ("IPSEC-SA-MON-MIB", "ipsecSaIpcompOutDestId"), ("IPSEC-SA-MON-MIB", "ipsecSaIpcompOutDestIdType"), ("IPSEC-SA-MON-MIB", "ipsecSaIpcompOutProtocol"), ("IPSEC-SA-MON-MIB", "ipsecSaIpcompOutSourcePort"), ("IPSEC-SA-MON-MIB", "ipsecSaIpcompOutDestPort"), ("IPSEC-SA-MON-MIB", "ipsecSaIpcompOutCreator"), ("IPSEC-SA-MON-MIB", "ipsecSaIpcompOutEncapsulation"), ("IPSEC-SA-MON-MIB", "ipsecSaIpcompOutCompAlg"), ("IPSEC-SA-MON-MIB", "ipsecSaIpcompOutSeconds"), ("IPSEC-SA-MON-MIB", "ipsecSaIpcompOutUserOctets"), ("IPSEC-SA-MON-MIB", "ipsecSaIpcompOutOutputOctets"), ("IPSEC-SA-MON-MIB", "ipsecSaIpcompOutPackets"), ("IPSEC-SA-MON-MIB", "ipsecIpcompCurrentInboundSAs"), ("IPSEC-SA-MON-MIB", "ipsecIpcompTotalInboundSAs"), ("IPSEC-SA-MON-MIB", "ipsecIpcompCurrentOutboundSAs"), ("IPSEC-SA-MON-MIB", "ipsecIpcompTotalOutboundSAs"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ipsecSaIpcompGroup = ipsecSaIpcompGroup.setStatus('current')
ipsecSaErrorsGroup = ObjectGroup((1, 3, 6, 1, 3, 98, 1, 7, 4)).setObjects(("IPSEC-SA-MON-MIB", "ipsecDecryptionErrors"), ("IPSEC-SA-MON-MIB", "ipsecAuthenticationErrors"), ("IPSEC-SA-MON-MIB", "ipsecReplayErrors"), ("IPSEC-SA-MON-MIB", "ipsecPolicyErrors"), ("IPSEC-SA-MON-MIB", "ipsecOtherReceiveErrors"), ("IPSEC-SA-MON-MIB", "ipsecUnknownSpiErrors"), ("IPSEC-SA-MON-MIB", "ipsecSendErrors"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ipsecSaErrorsGroup = ipsecSaErrorsGroup.setStatus('current')
ipsecSaFailureTrapEnableGroup = ObjectGroup((1, 3, 6, 1, 3, 98, 1, 7, 5)).setObjects(("IPSEC-SA-MON-MIB", "espAuthFailureTrapEnable"), ("IPSEC-SA-MON-MIB", "ahAuthFailureTrapEnable"), ("IPSEC-SA-MON-MIB", "espReplayFailureTrapEnable"), ("IPSEC-SA-MON-MIB", "ahReplayFailureTrapEnable"), ("IPSEC-SA-MON-MIB", "espPolicyFailureTrapEnable"), ("IPSEC-SA-MON-MIB", "ahPolicyFailureTrapEnable"), ("IPSEC-SA-MON-MIB", "invalidSpiTrapEnable"), ("IPSEC-SA-MON-MIB", "otherPolicyFailureTrapEnable"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ipsecSaFailureTrapEnableGroup = ipsecSaFailureTrapEnableGroup.setStatus('current')
ipsecSaTrapArgumentGroup = ObjectGroup((1, 3, 6, 1, 3, 98, 1, 7, 6)).setObjects(("IPSEC-SA-MON-MIB", "ipsecSecurityProtocol"), ("IPSEC-SA-MON-MIB", "ipsecSPI"), ("IPSEC-SA-MON-MIB", "ipsecLocalAddress"), ("IPSEC-SA-MON-MIB", "ipsecPeerAddress"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ipsecSaTrapArgumentGroup = ipsecSaTrapArgumentGroup.setStatus('current')
ipsecSaFailureTrapGroup = NotificationGroup((1, 3, 6, 1, 3, 98, 1, 7, 7)).setObjects(("IPSEC-SA-MON-MIB", "espAuthFailureTrap"), ("IPSEC-SA-MON-MIB", "ahAuthFailureTrap"), ("IPSEC-SA-MON-MIB", "espReplayFailureTrap"), ("IPSEC-SA-MON-MIB", "ahReplayFailureTrap"), ("IPSEC-SA-MON-MIB", "espPolicyFailureTrap"), ("IPSEC-SA-MON-MIB", "ahPolicyFailureTrap"), ("IPSEC-SA-MON-MIB", "espInvalidSpiTrap"), ("IPSEC-SA-MON-MIB", "otherPolicyFailureTrap"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ipsecSaFailureTrapGroup = ipsecSaFailureTrapGroup.setStatus('current')
ipsecSaMonitorCompliance = ModuleCompliance((1, 3, 6, 1, 3, 98, 1, 8, 1)).setObjects(("IPSEC-SA-MON-MIB", "ipsecSaEspGroup"), ("IPSEC-SA-MON-MIB", "ipsecSaAhGroup"), ("IPSEC-SA-MON-MIB", "ipsecSaErrorsGroup"), ("IPSEC-SA-MON-MIB", "ipsecSaFailureTrapEnableGroup"), ("IPSEC-SA-MON-MIB", "ipsecSaFailureTrapGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ipsecSaMonitorCompliance = ipsecSaMonitorCompliance.setStatus('current')
mibBuilder.exportSymbols("IPSEC-SA-MON-MIB", ipsecSaEspInEncKeyLength=ipsecSaEspInEncKeyLength, ipsecSaEspInEntry=ipsecSaEspInEntry, ipsecSaAhInPolicyErrors=ipsecSaAhInPolicyErrors, saTraps=saTraps, ipsecSaAhOutAuthKeyLength=ipsecSaAhOutAuthKeyLength, ipsecReplayErrors=ipsecReplayErrors, ipsecSaEspOutDestId=ipsecSaEspOutDestId, ipsecSaEspInDecryptErrors=ipsecSaEspInDecryptErrors, ipsecSaIpcompInCpi=ipsecSaIpcompInCpi, ahAuthFailureTrapEnable=ahAuthFailureTrapEnable, ipsecSaEspInSourcePort=ipsecSaEspInSourcePort, ipsecSaIpcompInDecompErrors=ipsecSaIpcompInDecompErrors, ipsecSaIpcompGroup=ipsecSaIpcompGroup, ipsecSaEspOutAccKbytes=ipsecSaEspOutAccKbytes, ipsecSaEspOutAuthAlg=ipsecSaEspOutAuthAlg, ipsecSaIpcompOutEntry=ipsecSaIpcompOutEntry, ipsecSaEspInDestIdType=ipsecSaEspInDestIdType, ipsecSaAhOutSourceId=ipsecSaAhOutSourceId, ipsecSaAhInAccSeconds=ipsecSaAhInAccSeconds, espReplayFailureTrap=espReplayFailureTrap, ipsecSaIpcompInPackets=ipsecSaIpcompInPackets, ipsecSaIpcompOutSourcePort=ipsecSaIpcompOutSourcePort, invalidSpiTrapEnable=invalidSpiTrapEnable, ipsecSaAhInPackets=ipsecSaAhInPackets, ipsecSaEspOutProtocol=ipsecSaEspOutProtocol, ipsecSaIpcompInSourceIdType=ipsecSaIpcompInSourceIdType, ipsecSaEspInEncAlg=ipsecSaEspInEncAlg, ipsecSaEspInReplayErrors=ipsecSaEspInReplayErrors, IpsecSaCreatorIdent=IpsecSaCreatorIdent, ipsecSaIpcompInCreator=ipsecSaIpcompInCreator, ipsecSaAhInTable=ipsecSaAhInTable, ipsecAhTotalInboundSAs=ipsecAhTotalInboundSAs, ipsecEspTotalInboundSAs=ipsecEspTotalInboundSAs, ipsecSaEspInCreator=ipsecSaEspInCreator, ipsecSaAhOutDestIdType=ipsecSaAhOutDestIdType, ipsecSaAhOutLimitSeconds=ipsecSaAhOutLimitSeconds, ipsecSaEspInAuthKeyLength=ipsecSaEspInAuthKeyLength, ipsecSaEspOutTable=ipsecSaEspOutTable, ipsecSaIpcompOutEncapsulation=ipsecSaIpcompOutEncapsulation, ipsecSaAhInRepWinSize=ipsecSaAhInRepWinSize, ipsecSaMonModule=ipsecSaMonModule, espAuthFailureTrapEnable=espAuthFailureTrapEnable, ipsecEspTotalOutboundSAs=ipsecEspTotalOutboundSAs, ipsecSaEspInPolicyErrors=ipsecSaEspInPolicyErrors, ipsecSaIpcompOutCpi=ipsecSaIpcompOutCpi, ipsecSaIpcompOutSourceId=ipsecSaIpcompOutSourceId, ipsecEspCurrentOutboundSAs=ipsecEspCurrentOutboundSAs, ipsecAhCurrentInboundSAs=ipsecAhCurrentInboundSAs, ipsecSaEspOutCreator=ipsecSaEspOutCreator, ipsecSaMonitorMIB=ipsecSaMonitorMIB, ipsecSaFailureTrapGroup=ipsecSaFailureTrapGroup, ipsecSaEspInProtocol=ipsecSaEspInProtocol, ipsecSaAhInAccKbytes=ipsecSaAhInAccKbytes, ipsecSaAhInAuthErrors=ipsecSaAhInAuthErrors, ipsecSaAhInAuthKeyLength=ipsecSaAhInAuthKeyLength, ipsecLocalAddress=ipsecLocalAddress, saGroups=saGroups, IpsecRawId=IpsecRawId, ipsecSaEspOutPackets=ipsecSaEspOutPackets, ahAuthFailureTrap=ahAuthFailureTrap, ipsecEspCurrentInboundSAs=ipsecEspCurrentInboundSAs, ipsecSaAhOutDestPort=ipsecSaAhOutDestPort, espPolicyFailureTrapEnable=espPolicyFailureTrapEnable, ipsecSaEspInAuthErrors=ipsecSaEspInAuthErrors, ipsecSaIpcompOutUserOctets=ipsecSaIpcompOutUserOctets, espAuthFailureTrap=espAuthFailureTrap, ipsecSaEspInAddress=ipsecSaEspInAddress, ipsecSaAhOutCreator=ipsecSaAhOutCreator, ipsecSaAhInAuthAlg=ipsecSaAhInAuthAlg, ipsecIpcompTotalInboundSAs=ipsecIpcompTotalInboundSAs, IpsecIpv6Address=IpsecIpv6Address, ipsecDecryptionErrors=ipsecDecryptionErrors, ipsecSaIpcompInEntry=ipsecSaIpcompInEntry, ipsecSaEspInAccKbytes=ipsecSaEspInAccKbytes, ipsecSaAhInLimitSeconds=ipsecSaAhInLimitSeconds, ipsecIpcompCurrentOutboundSAs=ipsecIpcompCurrentOutboundSAs, ipsecSaAhOutTable=ipsecSaAhOutTable, ipsecSPI=ipsecSPI, ipsecSaIpcompInOtherReceiveErrors=ipsecSaIpcompInOtherReceiveErrors, ipsecSaIpcompInDestIdType=ipsecSaIpcompInDestIdType, ahReplayFailureTrapEnable=ahReplayFailureTrapEnable, ipsecSaAhInReplayErrors=ipsecSaAhInReplayErrors, ipsecSaEspOutDestIdType=ipsecSaEspOutDestIdType, ipsecSaAhInUserOctets=ipsecSaAhInUserOctets, ipsecSaIpcompOutPackets=ipsecSaIpcompOutPackets, ipsecSaEspOutLimitSeconds=ipsecSaEspOutLimitSeconds, ipsecSaAhInSourceIdType=ipsecSaAhInSourceIdType, ipsecSaEspInEncapsulation=ipsecSaEspInEncapsulation, espPolicyFailureTrap=espPolicyFailureTrap, ipsecSaAhInEntry=ipsecSaAhInEntry, ipsecSaAhInOtherReceiveErrors=ipsecSaAhInOtherReceiveErrors, ipsecSaIpcompOutSeconds=ipsecSaIpcompOutSeconds, ipsecSaEspInAccSeconds=ipsecSaEspInAccSeconds, ipsecSaAhOutAuthAlg=ipsecSaAhOutAuthAlg, ipsecPolicyErrors=ipsecPolicyErrors, ipsecSaAhOutSendErrors=ipsecSaAhOutSendErrors, ipsecSaIpcompOutSourceIdType=ipsecSaIpcompOutSourceIdType, ahPolicyFailureTrap=ahPolicyFailureTrap, ipsecSaAhInSpi=ipsecSaAhInSpi, ipsecSaAhInAddress=ipsecSaAhInAddress, ipsecAhTotalOutboundSAs=ipsecAhTotalOutboundSAs, ipsecSaIpcompInAddress=ipsecSaIpcompInAddress, ipsecSaIpcompOutDestId=ipsecSaIpcompOutDestId, ipsecSaEspOutEntry=ipsecSaEspOutEntry, ipsecSaAhInSourceId=ipsecSaAhInSourceId, ahReplayFailureTrap=ahReplayFailureTrap, ipsecSaAhOutEncapsulation=ipsecSaAhOutEncapsulation, ipsecSaEspInPackets=ipsecSaEspInPackets, ipsecPeerAddress=ipsecPeerAddress, ipsecSaIpcompInSeconds=ipsecSaIpcompInSeconds, ipsecSaErrorsGroup=ipsecSaErrorsGroup, saErrors=saErrors, ipsecSaEspInSourceIdType=ipsecSaEspInSourceIdType, ipsecSaAhOutAccSeconds=ipsecSaAhOutAccSeconds, ipsecSaAhGroup=ipsecSaAhGroup, ipsecSaAhInSourcePort=ipsecSaAhInSourcePort, ipsecSaEspInDestPort=ipsecSaEspInDestPort, ipsecSaEspOutLimitKbytes=ipsecSaEspOutLimitKbytes, ipsecSaEspInOtherReceiveErrors=ipsecSaEspInOtherReceiveErrors, ipsecSaAhOutAddress=ipsecSaAhOutAddress, ipsecSaEspOutAccSeconds=ipsecSaEspOutAccSeconds, ipsecSaEspOutSpi=ipsecSaEspOutSpi, ipsecSaMonitorCompliance=ipsecSaMonitorCompliance, ipsecSaAhOutPackets=ipsecSaAhOutPackets, ipsecSaTrapArgumentGroup=ipsecSaTrapArgumentGroup, ipsecSaIpcompOutDestPort=ipsecSaIpcompOutDestPort, ipsecSaIpcompOutProtocol=ipsecSaIpcompOutProtocol, ipsecSaAhOutSpi=ipsecSaAhOutSpi, ipsecSaAhInDestPort=ipsecSaAhInDestPort, ipsecSaIpcompOutOutputOctets=ipsecSaIpcompOutOutputOctets, ipsecOtherReceiveErrors=ipsecOtherReceiveErrors, ipsecSaIpcompOutAddress=ipsecSaIpcompOutAddress, ipsecSaEspOutSourceIdType=ipsecSaEspOutSourceIdType, ipsecSaAhOutSourceIdType=ipsecSaAhOutSourceIdType, ipsecSaEspGroup=ipsecSaEspGroup, ipsecSaEspInUserOctets=ipsecSaEspInUserOctets, ipsecSaAhInLimitKbytes=ipsecSaAhInLimitKbytes, ipsecSaAhOutAccKbytes=ipsecSaAhOutAccKbytes, ipsecSaAhInDestIdType=ipsecSaAhInDestIdType, ipsecSaEspInLimitKbytes=ipsecSaEspInLimitKbytes, ipsecSaIpcompOutCreator=ipsecSaIpcompOutCreator, espReplayFailureTrapEnable=espReplayFailureTrapEnable, ipsecSaEspOutSourcePort=ipsecSaEspOutSourcePort, ipsecSaIpcompOutTable=ipsecSaIpcompOutTable, ipsecSaAhOutLimitKbytes=ipsecSaAhOutLimitKbytes, ipsecSaAhOutDestId=ipsecSaAhOutDestId, ipsecSaAhInEncapsulation=ipsecSaAhInEncapsulation, ipsecSaAhOutSourcePort=ipsecSaAhOutSourcePort, ipsecSaEspInRepWinSize=ipsecSaEspInRepWinSize, ipsecSaIpcompInDestId=ipsecSaIpcompInDestId, ipsecSaAhOutEntry=ipsecSaAhOutEntry, ipsecSendErrors=ipsecSendErrors, saConformance=saConformance, ipsecSaEspOutUserOctets=ipsecSaEspOutUserOctets, ipsecAuthenticationErrors=ipsecAuthenticationErrors, ipsecSaEspOutAuthKeyLength=ipsecSaEspOutAuthKeyLength, ipsecSaFailureTrapEnableGroup=ipsecSaFailureTrapEnableGroup, ipsecSaEspInSourceId=ipsecSaEspInSourceId, ipsecSaAhOutProtocol=ipsecSaAhOutProtocol, ipsecSaEspInLimitSeconds=ipsecSaEspInLimitSeconds, ipsecSaEspInDestId=ipsecSaEspInDestId, espInvalidSpiTrap=espInvalidSpiTrap, ipsecSaAhInDestId=ipsecSaAhInDestId, ipsecSaEspOutSendErrors=ipsecSaEspOutSendErrors, ipsecSaEspOutEncKeyLength=ipsecSaEspOutEncKeyLength, ipsecIpcompCurrentInboundSAs=ipsecIpcompCurrentInboundSAs, ipsecSaIpcompInSourceId=ipsecSaIpcompInSourceId, ipsecSaEspOutSourceId=ipsecSaEspOutSourceId, ipsecSaIpcompInEncapsulation=ipsecSaIpcompInEncapsulation, ipsecSaAhOutUserOctets=ipsecSaAhOutUserOctets, ipsecSaIpcompOutDestIdType=ipsecSaIpcompOutDestIdType, ipsecSaIpcompOutCompAlg=ipsecSaIpcompOutCompAlg, ahPolicyFailureTrapEnable=ahPolicyFailureTrapEnable, saTables=saTables, ipsecSaEspOutAddress=ipsecSaEspOutAddress, ipsecSaIpcompInDecompAlg=ipsecSaIpcompInDecompAlg, ipsecAhCurrentOutboundSAs=ipsecAhCurrentOutboundSAs, ipsecSaEspInAuthAlg=ipsecSaEspInAuthAlg, ipsecSaIpcompInSourcePort=ipsecSaIpcompInSourcePort, otherPolicyFailureTrap=otherPolicyFailureTrap, saTrapControl=saTrapControl, ipsecSaIpcompInUserOctets=ipsecSaIpcompInUserOctets, ipsecSaAhInCreator=ipsecSaAhInCreator, ipsecUnknownSpiErrors=ipsecUnknownSpiErrors, ipsecSaEspInSpi=ipsecSaEspInSpi, ipsecSaEspInPadErrors=ipsecSaEspInPadErrors, ipsecSaEspInTable=ipsecSaEspInTable, otherPolicyFailureTrapEnable=otherPolicyFailureTrapEnable, ipsecSaIpcompInTable=ipsecSaIpcompInTable, ipsecSaIpcompInDestPort=ipsecSaIpcompInDestPort, ipsecSecurityProtocol=ipsecSecurityProtocol, ipsecSaEspOutEncapsulation=ipsecSaEspOutEncapsulation, ipsecSaEspOutDestPort=ipsecSaEspOutDestPort, ipsecIpcompTotalOutboundSAs=ipsecIpcompTotalOutboundSAs, ipsecSaAhInProtocol=ipsecSaAhInProtocol, ipsecSaEspOutEncAlg=ipsecSaEspOutEncAlg, PYSNMP_MODULE_ID=ipsecSaMonModule, saStatistics=saStatistics, ipsecSaIpcompInProtocol=ipsecSaIpcompInProtocol, saTrapObjects=saTrapObjects)
