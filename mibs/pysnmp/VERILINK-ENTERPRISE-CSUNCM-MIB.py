#
# PySNMP MIB module VERILINK-ENTERPRISE-CSUNCM-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/VERILINK-ENTERPRISE-CSUNCM-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 21:26:41 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, Integer, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "OctetString", "Integer", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
SingleValueConstraint, ValueSizeConstraint, ConstraintsUnion, ConstraintsIntersection, ValueRangeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "SingleValueConstraint", "ValueSizeConstraint", "ConstraintsUnion", "ConstraintsIntersection", "ValueRangeConstraint")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
MibScalar, MibTable, MibTableRow, MibTableColumn, Integer32, ObjectIdentity, Gauge32, iso, IpAddress, Unsigned32, MibIdentifier, ModuleIdentity, TimeTicks, Counter64, NotificationType, Bits, Counter32 = mibBuilder.importSymbols("SNMPv2-SMI", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Integer32", "ObjectIdentity", "Gauge32", "iso", "IpAddress", "Unsigned32", "MibIdentifier", "ModuleIdentity", "TimeTicks", "Counter64", "NotificationType", "Bits", "Counter32")
TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString")
ncm_csu, = mibBuilder.importSymbols("VERILINK-ENTERPRISE-NCMALARM-MIB", "ncm-csu")
ncmcsuMainConfigTable = MibTable((1, 3, 6, 1, 4, 1, 321, 1, 3025, 6000), )
if mibBuilder.loadTexts: ncmcsuMainConfigTable.setStatus('mandatory')
ncmcsuMainConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 321, 1, 3025, 6000, 1), ).setIndexNames((0, "VERILINK-ENTERPRISE-CSUNCM-MIB", "ncmcsuNIDMainConfigIndex"), (0, "VERILINK-ENTERPRISE-CSUNCM-MIB", "ncmcsuMainLineIndex"))
if mibBuilder.loadTexts: ncmcsuMainConfigEntry.setStatus('mandatory')
ncmcsuNIDMainConfigIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3025, 6000, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmcsuNIDMainConfigIndex.setStatus('mandatory')
ncmcsuMainLineIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3025, 6000, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmcsuMainLineIndex.setStatus('mandatory')
ncmcsuFormat = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3025, 6000, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("unframed", 1), ("sf", 2), ("esf", 3), ("zbtsi", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ncmcsuFormat.setStatus('mandatory')
ncmcsuLineCode = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3025, 6000, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("ami", 1), ("b8zs", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ncmcsuLineCode.setStatus('mandatory')
ncmcsuEQCableLength = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3025, 6000, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("ft-0-133", 1), ("fT-133-266", 2), ("fT-266-399", 3), ("fT-399-533", 4), ("fT-533-655", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ncmcsuEQCableLength.setStatus('mandatory')
ncmcsuTiming = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3025, 6000, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("through", 1), ("internal", 2), ("external-422", 3), ("ext-ttl", 4), ("net", 5), ("eq", 6), ("tiu", 7), ("dsu", 8)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ncmcsuTiming.setStatus('mandatory')
ncmdsudatabus = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3025, 6000, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("none", 1), ("bus-a", 2), ("bus-b", 3), ("bus-c", 4), ("drop-uses-bus-b", 5), ("insert-uses-bus-a", 6)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ncmdsudatabus.setStatus('mandatory')
ncmcsuNetLineBuildOut = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3025, 6000, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("db-Zero", 1), ("db-Seven-point-five", 2), ("db-Fifteen", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ncmcsuNetLineBuildOut.setStatus('mandatory')
ncmcsuValidIntervals = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3025, 6000, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmcsuValidIntervals.setStatus('mandatory')
ncmcsuCurrentIntervalSec = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3025, 6000, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmcsuCurrentIntervalSec.setStatus('mandatory')
ncmcsuJitterBuf = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3025, 6000, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("eq-Net-16-16", 1), ("eq-Net-40-16", 2), ("eq-Net-16-40", 3), ("eq-Net-40-40", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ncmcsuJitterBuf.setStatus('mandatory')
ncmcsuTestSigCfgEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3025, 6000, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ncmcsuTestSigCfgEnable.setStatus('mandatory')
ncmcsuTestSigCfgFrameSignal = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3025, 6000, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ncmcsuTestSigCfgFrameSignal.setStatus('mandatory')
ncmcsuRLBTimeoutIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3025, 6000, 1, 14), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ncmcsuRLBTimeoutIndex.setStatus('mandatory')
ncmcsuCfgRptSendPRM = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3025, 6000, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ncmcsuCfgRptSendPRM.setStatus('mandatory')
ncmcsuCfgRptPollFarEnd = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3025, 6000, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ncmcsuCfgRptPollFarEnd.setStatus('mandatory')
ncmcsuCfgRptDataLinkUnsolicit = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3025, 6000, 1, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ncmcsuCfgRptDataLinkUnsolicit.setStatus('mandatory')
ncmcsuCfgRptAlmReporting = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3025, 6000, 1, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ncmcsuCfgRptAlmReporting.setStatus('mandatory')
ncmcsuCfgRptPRMType = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3025, 6000, 1, 19), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("nO-PRM", 1), ("uSER", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ncmcsuCfgRptPRMType.setStatus('mandatory')
ncmcsuCfgCodeRegenCRC = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3025, 6000, 1, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("pass", 1), ("net-to-Eq", 2), ("eq-to-Net", 3), ("both", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ncmcsuCfgCodeRegenCRC.setStatus('mandatory')
ncmcsuCfgCodeXYellowAlarm = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3025, 6000, 1, 21), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("off", 1), ("net-to-Eq", 2), ("eq-to-Net", 3), ("both", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ncmcsuCfgCodeXYellowAlarm.setStatus('mandatory')
ncmcsuCfgCodeEQFIFO = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3025, 6000, 1, 22), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("fifteen-bits", 1), ("forty-bits", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ncmcsuCfgCodeEQFIFO.setStatus('mandatory')
ncmcsuCfgCodeNETFIFO = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3025, 6000, 1, 23), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("fifteen-bits", 1), ("forty-bits", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ncmcsuCfgCodeNETFIFO.setStatus('mandatory')
ncmcsuCfgCodeTranMode = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3025, 6000, 1, 24), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ncmcsuCfgCodeTranMode.setStatus('mandatory')
ncmcsuCfgCodeSend1sLnkIdle = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3025, 6000, 1, 25), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ncmcsuCfgCodeSend1sLnkIdle.setStatus('mandatory')
ncmcsuCfgAlmSelfTest = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3025, 6000, 1, 26), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ncmcsuCfgAlmSelfTest.setStatus('mandatory')
ncmcsuCfgAlmEnableTestState = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3025, 6000, 1, 27), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ncmcsuCfgAlmEnableTestState.setStatus('mandatory')
ncmcsuCfgAlmUnframedMode = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3025, 6000, 1, 28), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ncmcsuCfgAlmUnframedMode.setStatus('mandatory')
ncmcsuCfgAlmOnEqLoop = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3025, 6000, 1, 29), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ncmcsuCfgAlmOnEqLoop.setStatus('mandatory')
ncmcsuCfgAlmOnNetLoop = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3025, 6000, 1, 30), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ncmcsuCfgAlmOnNetLoop.setStatus('mandatory')
ncmcsuCfgAlmOnPowerUpLoop = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3025, 6000, 1, 31), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ncmcsuCfgAlmOnPowerUpLoop.setStatus('mandatory')
ncmcsuCfgLoopRespLLB = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3025, 6000, 1, 32), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ncmcsuCfgLoopRespLLB.setStatus('mandatory')
ncmcsuCfgLoopRespPLB = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3025, 6000, 1, 33), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ncmcsuCfgLoopRespPLB.setStatus('mandatory')
ncmcsuCfgLoopRespELB = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3025, 6000, 1, 34), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ncmcsuCfgLoopRespELB.setStatus('mandatory')
ncmcsuCfgLoopRespRLB = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3025, 6000, 1, 35), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ncmcsuCfgLoopRespRLB.setStatus('mandatory')
ncmcsuCfgLoopRespLLBTONE = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3025, 6000, 1, 36), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ncmcsuCfgLoopRespLLBTONE.setStatus('mandatory')
ncmcsuCfgLoopRespPLBTONE = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3025, 6000, 1, 37), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ncmcsuCfgLoopRespPLBTONE.setStatus('mandatory')
ncmcsuCfgSendReceiveInBandCode = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3025, 6000, 1, 38), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disable", 1), ("enable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ncmcsuCfgSendReceiveInBandCode.setStatus('mandatory')
ncmcsuEnhanceConfigTable = MibTable((1, 3, 6, 1, 4, 1, 321, 1, 3025, 6001), )
if mibBuilder.loadTexts: ncmcsuEnhanceConfigTable.setStatus('mandatory')
ncmcsuEnhanceConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 321, 1, 3025, 6001, 1), ).setIndexNames((0, "VERILINK-ENTERPRISE-CSUNCM-MIB", "ncmcsuNIDEnhanceIndex"), (0, "VERILINK-ENTERPRISE-CSUNCM-MIB", "ncmcsuEnhanceLineIndex"))
if mibBuilder.loadTexts: ncmcsuEnhanceConfigEntry.setStatus('mandatory')
ncmcsuNIDEnhanceIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3025, 6001, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmcsuNIDEnhanceIndex.setStatus('mandatory')
ncmcsuEnhanceLineIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3025, 6001, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmcsuEnhanceLineIndex.setStatus('mandatory')
ncmcsuNetworkKeepAlive = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3025, 6001, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("none", 1), ("loop", 2), ("aIS", 3), ("framed-all-ones", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ncmcsuNetworkKeepAlive.setStatus('mandatory')
ncmcsuAlarmSetDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3025, 6001, 1, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ncmcsuAlarmSetDelay.setStatus('mandatory')
ncmcsuAlarmClearDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3025, 6001, 1, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ncmcsuAlarmClearDelay.setStatus('mandatory')
ncmcsuAlarmEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3025, 6001, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disable", 1), ("enable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ncmcsuAlarmEnable.setStatus('mandatory')
ncmcsuNetDensityEnforcement = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3025, 6001, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("none", 1), ("fcc-part-68", 2), ("pub-62411", 3), ("eighty-zeroes", 4), ("fifteen-zeroes", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ncmcsuNetDensityEnforcement.setStatus('mandatory')
ncmcsuLoopback = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3025, 6001, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 9, 10))).clone(namedValues=NamedValues(("csu-Payload-Loop-Back", 1), ("csu-Line-Loop-Back", 2), ("repeater-Loop-Back", 3), ("csu-Equip-Loop-Back", 4), ("csu-No-Loop-Back", 5), ("deactivate-LLB-and-PLB", 6), ("deactivate-ELB-and-RLB", 7), ("send-Inband-Loop-Up", 9), ("send-Inband-Loop-Down", 10)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ncmcsuLoopback.setStatus('mandatory')
ncmcsuTestPattern = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3025, 6001, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9))).clone(namedValues=NamedValues(("no-test", 1), ("qrss-to-net", 2), ("one-in-eight-to-net", 3), ("three-in-twenty-four-to-net", 4), ("all-ones-to-net", 5), ("qrss-to-eq", 6), ("one-in-eight-to-eq", 7), ("three-in-twenty-four-to-eq", 8), ("all-ones-to-eq", 9)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ncmcsuTestPattern.setStatus('mandatory')
ncmcsuResetPerfReg = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3025, 6001, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ncmcsuResetPerfReg.setStatus('mandatory')
ncmcsuTestErrorCounter = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3025, 6001, 1, 11), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmcsuTestErrorCounter.setStatus('mandatory')
ncmcsuTestSecondsRemain = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3025, 6001, 1, 12), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmcsuTestSecondsRemain.setStatus('mandatory')
ncmcsuTestTimeSeconds = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3025, 6001, 1, 13), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ncmcsuTestTimeSeconds.setStatus('mandatory')
ncmcsuNetLOFCIndexTime = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3025, 6001, 1, 14), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ncmcsuNetLOFCIndexTime.setStatus('mandatory')
ncmcsuChannelMask = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3025, 6001, 1, 15), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ncmcsuChannelMask.setStatus('mandatory')
ncmcsuApplication = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3025, 6001, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("none", 1), ("csu", 2), ("smds", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ncmcsuApplication.setStatus('mandatory')
ncmcsuTestIntervalIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3025, 6001, 1, 17), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ncmcsuTestIntervalIndex.setStatus('mandatory')
ncmcsuElementStatusOneTable = MibTable((1, 3, 6, 1, 4, 1, 321, 1, 3025, 6002), )
if mibBuilder.loadTexts: ncmcsuElementStatusOneTable.setStatus('mandatory')
ncmcsuElementStatusOneEntry = MibTableRow((1, 3, 6, 1, 4, 1, 321, 1, 3025, 6002, 1), ).setIndexNames((0, "VERILINK-ENTERPRISE-CSUNCM-MIB", "ncmcsuNIDElementStatusIndex1"), (0, "VERILINK-ENTERPRISE-CSUNCM-MIB", "ncmcsuElementStatusIndex1"))
if mibBuilder.loadTexts: ncmcsuElementStatusOneEntry.setStatus('mandatory')
ncmcsuNIDElementStatusIndex1 = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3025, 6002, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmcsuNIDElementStatusIndex1.setStatus('mandatory')
ncmcsuElementStatusIndex1 = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3025, 6002, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmcsuElementStatusIndex1.setStatus('mandatory')
ncmcsuExcessiveError = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3025, 6002, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("signal", 1), ("ais", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ncmcsuExcessiveError.setStatus('mandatory')
ncmcsuOutOfFrame = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3025, 6002, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("signal", 1), ("ais", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ncmcsuOutOfFrame.setStatus('mandatory')
ncmcsuNetLossOfSignal = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3025, 6002, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("signal", 1), ("ais", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ncmcsuNetLossOfSignal.setStatus('mandatory')
ncmcsuElementStatusTwoTable = MibTable((1, 3, 6, 1, 4, 1, 321, 1, 3025, 6003), )
if mibBuilder.loadTexts: ncmcsuElementStatusTwoTable.setStatus('mandatory')
ncmcsuElementStatusTwoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 321, 1, 3025, 6003, 1), ).setIndexNames((0, "VERILINK-ENTERPRISE-CSUNCM-MIB", "ncmcsuNIDElementStatusIndex2"), (0, "VERILINK-ENTERPRISE-CSUNCM-MIB", "ncmcsuElementStatusIndex2"))
if mibBuilder.loadTexts: ncmcsuElementStatusTwoEntry.setStatus('mandatory')
ncmcsuNIDElementStatusIndex2 = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3025, 6003, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmcsuNIDElementStatusIndex2.setStatus('mandatory')
ncmcsuElementStatusIndex2 = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3025, 6003, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmcsuElementStatusIndex2.setStatus('mandatory')
ncmcsuStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3025, 6003, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmcsuStatus.setStatus('mandatory')
ncmcsuAddress1 = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3025, 6003, 1, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ncmcsuAddress1.setStatus('mandatory')
ncmcsuAddress2 = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3025, 6003, 1, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ncmcsuAddress2.setStatus('mandatory')
ncmcsuLLBELBPLB = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3025, 6003, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("signal", 1), ("ais", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ncmcsuLLBELBPLB.setStatus('mandatory')
ncmcsuThresholdIntervalTable = MibTable((1, 3, 6, 1, 4, 1, 321, 1, 3025, 6004), )
if mibBuilder.loadTexts: ncmcsuThresholdIntervalTable.setStatus('mandatory')
ncmcsuThresholdIntervalEntry = MibTableRow((1, 3, 6, 1, 4, 1, 321, 1, 3025, 6004, 1), ).setIndexNames((0, "VERILINK-ENTERPRISE-CSUNCM-MIB", "ncmcsuNIDThresholdIntervalIndex"), (0, "VERILINK-ENTERPRISE-CSUNCM-MIB", "ncmcsuThresholdIntervalIndex"))
if mibBuilder.loadTexts: ncmcsuThresholdIntervalEntry.setStatus('mandatory')
ncmcsuNIDThresholdIntervalIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3025, 6004, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmcsuNIDThresholdIntervalIndex.setStatus('mandatory')
ncmcsuThresholdIntervalIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3025, 6004, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmcsuThresholdIntervalIndex.setStatus('mandatory')
ncmcsuBERThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3025, 6004, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("disable", 1), ("ten-to-Four", 2), ("ten-to-Five", 3), ("ten-to-Six", 4), ("ten-to-Seven", 5), ("ten-to-Eight", 6), ("ten-to-Nine", 7)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ncmcsuBERThreshold.setStatus('mandatory')
ncmcsubpvSecThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3025, 6004, 1, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ncmcsubpvSecThreshold.setStatus('mandatory')
ncmcsubpvSecInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3025, 6004, 1, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ncmcsubpvSecInterval.setStatus('mandatory')
ncmcsuESThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3025, 6004, 1, 6), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ncmcsuESThreshold.setStatus('mandatory')
ncmcsuESInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3025, 6004, 1, 7), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ncmcsuESInterval.setStatus('mandatory')
ncmcsuUASThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3025, 6004, 1, 8), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ncmcsuUASThreshold.setStatus('mandatory')
ncmcsuUASInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3025, 6004, 1, 9), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ncmcsuUASInterval.setStatus('mandatory')
ncmcsuCurrentOneTable = MibTable((1, 3, 6, 1, 4, 1, 321, 1, 3025, 6005), )
if mibBuilder.loadTexts: ncmcsuCurrentOneTable.setStatus('mandatory')
ncmcsuCurrentOneEntry = MibTableRow((1, 3, 6, 1, 4, 1, 321, 1, 3025, 6005, 1), ).setIndexNames((0, "VERILINK-ENTERPRISE-CSUNCM-MIB", "ncmcsuNIDCurrentIndex1"), (0, "VERILINK-ENTERPRISE-CSUNCM-MIB", "ncmcsuCurrentIndex1"), (0, "VERILINK-ENTERPRISE-CSUNCM-MIB", "ncmcsuCurrentEndType1"))
if mibBuilder.loadTexts: ncmcsuCurrentOneEntry.setStatus('mandatory')
ncmcsuNIDCurrentIndex1 = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3025, 6005, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmcsuNIDCurrentIndex1.setStatus('mandatory')
ncmcsuCurrentIndex1 = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3025, 6005, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmcsuCurrentIndex1.setStatus('mandatory')
ncmcsuCurrentEndType1 = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3025, 6005, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("near-End", 1), ("far-End", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmcsuCurrentEndType1.setStatus('mandatory')
ncmcsuCurrentESs = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3025, 6005, 1, 4), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmcsuCurrentESs.setStatus('mandatory')
ncmcsuCurrentSESs = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3025, 6005, 1, 5), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmcsuCurrentSESs.setStatus('mandatory')
ncmcsuCurrentSEFSs = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3025, 6005, 1, 6), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmcsuCurrentSEFSs.setStatus('mandatory')
ncmcsuCurrentUASs = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3025, 6005, 1, 7), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmcsuCurrentUASs.setStatus('mandatory')
ncmcsuCurrentCSSs = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3025, 6005, 1, 8), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmcsuCurrentCSSs.setStatus('mandatory')
ncmcsuCurrentPCVs = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3025, 6005, 1, 9), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmcsuCurrentPCVs.setStatus('mandatory')
ncmcsuCurrentLESs = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3025, 6005, 1, 10), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmcsuCurrentLESs.setStatus('mandatory')
ncmcsuCurrentBESs = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3025, 6005, 1, 11), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmcsuCurrentBESs.setStatus('mandatory')
ncmcsuCurrentDMs = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3025, 6005, 1, 12), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmcsuCurrentDMs.setStatus('mandatory')
ncmcsuCurrentLCVs = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3025, 6005, 1, 13), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmcsuCurrentLCVs.setStatus('mandatory')
ncmcsuIntervalOneTable = MibTable((1, 3, 6, 1, 4, 1, 321, 1, 3025, 6006), )
if mibBuilder.loadTexts: ncmcsuIntervalOneTable.setStatus('mandatory')
ncmcsuIntervalOneEntry = MibTableRow((1, 3, 6, 1, 4, 1, 321, 1, 3025, 6006, 1), ).setIndexNames((0, "VERILINK-ENTERPRISE-CSUNCM-MIB", "ncmcsuNIDIntervalIndex1"), (0, "VERILINK-ENTERPRISE-CSUNCM-MIB", "ncmcsuIntervalIndex1"), (0, "VERILINK-ENTERPRISE-CSUNCM-MIB", "ncmcsuIntervalEndType1"), (0, "VERILINK-ENTERPRISE-CSUNCM-MIB", "ncmcsuIntervalNumber1"))
if mibBuilder.loadTexts: ncmcsuIntervalOneEntry.setStatus('mandatory')
ncmcsuNIDIntervalIndex1 = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3025, 6006, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmcsuNIDIntervalIndex1.setStatus('mandatory')
ncmcsuIntervalIndex1 = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3025, 6006, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmcsuIntervalIndex1.setStatus('mandatory')
ncmcsuIntervalEndType1 = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3025, 6006, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("near-End", 1), ("far-End", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmcsuIntervalEndType1.setStatus('mandatory')
ncmcsuIntervalNumber1 = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3025, 6006, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 96))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmcsuIntervalNumber1.setStatus('mandatory')
ncmcsuIntervalESs = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3025, 6006, 1, 5), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmcsuIntervalESs.setStatus('mandatory')
ncmcsuIntervalSESs = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3025, 6006, 1, 6), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmcsuIntervalSESs.setStatus('mandatory')
ncmcsuIntervalSEFSs = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3025, 6006, 1, 7), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmcsuIntervalSEFSs.setStatus('mandatory')
ncmcsuIntervalUASs = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3025, 6006, 1, 8), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmcsuIntervalUASs.setStatus('mandatory')
ncmcsuIntervalCSSs = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3025, 6006, 1, 9), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmcsuIntervalCSSs.setStatus('mandatory')
ncmcsuIntervalPCVs = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3025, 6006, 1, 10), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmcsuIntervalPCVs.setStatus('mandatory')
ncmcsuIntervalLESs = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3025, 6006, 1, 11), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmcsuIntervalLESs.setStatus('mandatory')
ncmcsuIntervalBESs = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3025, 6006, 1, 12), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmcsuIntervalBESs.setStatus('mandatory')
ncmcsuIntervalDMs = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3025, 6006, 1, 13), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmcsuIntervalDMs.setStatus('mandatory')
ncmcsuIntervalLCVs = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3025, 6006, 1, 14), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmcsuIntervalLCVs.setStatus('mandatory')
ncmcsuTotalOneTable = MibTable((1, 3, 6, 1, 4, 1, 321, 1, 3025, 6007), )
if mibBuilder.loadTexts: ncmcsuTotalOneTable.setStatus('mandatory')
ncmcsuTotalOneEntry = MibTableRow((1, 3, 6, 1, 4, 1, 321, 1, 3025, 6007, 1), ).setIndexNames((0, "VERILINK-ENTERPRISE-CSUNCM-MIB", "ncmcsuNIDTotalIndex1"), (0, "VERILINK-ENTERPRISE-CSUNCM-MIB", "ncmcsuTotalIndex1"), (0, "VERILINK-ENTERPRISE-CSUNCM-MIB", "ncmcsuTotalEndType1"))
if mibBuilder.loadTexts: ncmcsuTotalOneEntry.setStatus('mandatory')
ncmcsuNIDTotalIndex1 = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3025, 6007, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmcsuNIDTotalIndex1.setStatus('mandatory')
ncmcsuTotalIndex1 = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3025, 6007, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmcsuTotalIndex1.setStatus('mandatory')
ncmcsuTotalEndType1 = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3025, 6007, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("near-End", 1), ("far-End", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmcsuTotalEndType1.setStatus('mandatory')
ncmcsuTotalESs = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3025, 6007, 1, 4), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmcsuTotalESs.setStatus('mandatory')
ncmcsuTotalSESs = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3025, 6007, 1, 5), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmcsuTotalSESs.setStatus('mandatory')
ncmcsuTotalSEFSs = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3025, 6007, 1, 6), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmcsuTotalSEFSs.setStatus('mandatory')
ncmcsuTotalUASs = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3025, 6007, 1, 7), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmcsuTotalUASs.setStatus('mandatory')
ncmcsuTotalCSSs = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3025, 6007, 1, 8), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmcsuTotalCSSs.setStatus('mandatory')
ncmcsuTotalPCVs = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3025, 6007, 1, 9), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmcsuTotalPCVs.setStatus('mandatory')
ncmcsuTotalLESs = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3025, 6007, 1, 10), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmcsuTotalLESs.setStatus('mandatory')
ncmcsuTotalBESs = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3025, 6007, 1, 11), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmcsuTotalBESs.setStatus('mandatory')
ncmcsuTotalDMs = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3025, 6007, 1, 12), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmcsuTotalDMs.setStatus('mandatory')
ncmcsuTotalLCVs = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3025, 6007, 1, 13), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmcsuTotalLCVs.setStatus('mandatory')
ncmcsuEnhancedCurrentTable = MibTable((1, 3, 6, 1, 4, 1, 321, 1, 3025, 6008), )
if mibBuilder.loadTexts: ncmcsuEnhancedCurrentTable.setStatus('mandatory')
ncmcsuEnhancedCurrentEntry = MibTableRow((1, 3, 6, 1, 4, 1, 321, 1, 3025, 6008, 1), ).setIndexNames((0, "VERILINK-ENTERPRISE-CSUNCM-MIB", "ncmcsuNIDEnhancedCurrentIndex"), (0, "VERILINK-ENTERPRISE-CSUNCM-MIB", "ncmcsuEnhancedCurrentIndex"), (0, "VERILINK-ENTERPRISE-CSUNCM-MIB", "ncmcsuEnhancedCurrentEndType"))
if mibBuilder.loadTexts: ncmcsuEnhancedCurrentEntry.setStatus('mandatory')
ncmcsuNIDEnhancedCurrentIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3025, 6008, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmcsuNIDEnhancedCurrentIndex.setStatus('mandatory')
ncmcsuEnhancedCurrentIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3025, 6008, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmcsuEnhancedCurrentIndex.setStatus('mandatory')
ncmcsuEnhancedCurrentEndType = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3025, 6008, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("near-End", 1), ("far-End", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmcsuEnhancedCurrentEndType.setStatus('mandatory')
ncmcsuEnhancedCurrentESs = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3025, 6008, 1, 4), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmcsuEnhancedCurrentESs.setStatus('mandatory')
ncmcsuEnhancedCurrentSESs = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3025, 6008, 1, 5), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmcsuEnhancedCurrentSESs.setStatus('mandatory')
ncmcsuEnhancedCurrentUASs = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3025, 6008, 1, 6), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmcsuEnhancedCurrentUASs.setStatus('mandatory')
ncmcsuEnhancedCurrentCSSs = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3025, 6008, 1, 7), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmcsuEnhancedCurrentCSSs.setStatus('mandatory')
ncmcsuEnhancedCurrentBESs = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3025, 6008, 1, 8), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmcsuEnhancedCurrentBESs.setStatus('mandatory')
ncmcsuEnhancedCurrentLOFC = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3025, 6008, 1, 9), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmcsuEnhancedCurrentLOFC.setStatus('mandatory')
ncmcsuEnhancedIntervalTable = MibTable((1, 3, 6, 1, 4, 1, 321, 1, 3025, 6009), )
if mibBuilder.loadTexts: ncmcsuEnhancedIntervalTable.setStatus('mandatory')
ncmcsuEnhancedIntervalEntry = MibTableRow((1, 3, 6, 1, 4, 1, 321, 1, 3025, 6009, 1), ).setIndexNames((0, "VERILINK-ENTERPRISE-CSUNCM-MIB", "ncmcsuNIDEnhancedIntervalIndex"), (0, "VERILINK-ENTERPRISE-CSUNCM-MIB", "ncmcsuEnhancedIntervalIndex"), (0, "VERILINK-ENTERPRISE-CSUNCM-MIB", "ncmcsuEnhancedIntervalEndType"), (0, "VERILINK-ENTERPRISE-CSUNCM-MIB", "ncmcsuEnhancedIntervalNumber"))
if mibBuilder.loadTexts: ncmcsuEnhancedIntervalEntry.setStatus('mandatory')
ncmcsuNIDEnhancedIntervalIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3025, 6009, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmcsuNIDEnhancedIntervalIndex.setStatus('mandatory')
ncmcsuEnhancedIntervalIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3025, 6009, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmcsuEnhancedIntervalIndex.setStatus('mandatory')
ncmcsuEnhancedIntervalEndType = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3025, 6009, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("near-End", 1), ("far-End", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmcsuEnhancedIntervalEndType.setStatus('mandatory')
ncmcsuEnhancedIntervalNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3025, 6009, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 96))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmcsuEnhancedIntervalNumber.setStatus('mandatory')
ncmcsuEnhancedIntervalESs = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3025, 6009, 1, 5), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmcsuEnhancedIntervalESs.setStatus('mandatory')
ncmcsuEnhancedIntervalSESs = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3025, 6009, 1, 6), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmcsuEnhancedIntervalSESs.setStatus('mandatory')
ncmcsuEnhancedIntervalUASs = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3025, 6009, 1, 7), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmcsuEnhancedIntervalUASs.setStatus('mandatory')
ncmcsuEnhancedIntervalCSSs = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3025, 6009, 1, 8), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmcsuEnhancedIntervalCSSs.setStatus('mandatory')
ncmcsuEnhancedIntervalBESs = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3025, 6009, 1, 9), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmcsuEnhancedIntervalBESs.setStatus('mandatory')
ncmcsuEnhancedIntervalLOFC = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3025, 6009, 1, 10), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmcsuEnhancedIntervalLOFC.setStatus('mandatory')
ncmcsuEnhancedTotalTable = MibTable((1, 3, 6, 1, 4, 1, 321, 1, 3025, 6010), )
if mibBuilder.loadTexts: ncmcsuEnhancedTotalTable.setStatus('mandatory')
ncmcsuEnhancedTotalEntry = MibTableRow((1, 3, 6, 1, 4, 1, 321, 1, 3025, 6010, 1), ).setIndexNames((0, "VERILINK-ENTERPRISE-CSUNCM-MIB", "ncmcsuNIDEnhancedTotalIndex"), (0, "VERILINK-ENTERPRISE-CSUNCM-MIB", "ncmcsuEnhancedTotalIndex"), (0, "VERILINK-ENTERPRISE-CSUNCM-MIB", "ncmcsuEnhancedTotalEndType"))
if mibBuilder.loadTexts: ncmcsuEnhancedTotalEntry.setStatus('mandatory')
ncmcsuNIDEnhancedTotalIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3025, 6010, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmcsuNIDEnhancedTotalIndex.setStatus('mandatory')
ncmcsuEnhancedTotalIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3025, 6010, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmcsuEnhancedTotalIndex.setStatus('mandatory')
ncmcsuEnhancedTotalEndType = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3025, 6010, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("near-End", 1), ("far-End", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmcsuEnhancedTotalEndType.setStatus('mandatory')
ncmcsuEnhancedTotalESs = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3025, 6010, 1, 4), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmcsuEnhancedTotalESs.setStatus('mandatory')
ncmcsuEnhancedTotalSESs = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3025, 6010, 1, 5), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmcsuEnhancedTotalSESs.setStatus('mandatory')
ncmcsuEnhancedTotalUASs = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3025, 6010, 1, 6), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmcsuEnhancedTotalUASs.setStatus('mandatory')
ncmcsuEnhancedTotalCSSs = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3025, 6010, 1, 7), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmcsuEnhancedTotalCSSs.setStatus('mandatory')
ncmcsuEnhancedTotalBESs = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3025, 6010, 1, 8), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmcsuEnhancedTotalBESs.setStatus('mandatory')
ncmcsuEnhancedTotalLOFC = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3025, 6010, 1, 9), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmcsuEnhancedTotalLOFC.setStatus('mandatory')
ncmcsuCurrentTable = MibTable((1, 3, 6, 1, 4, 1, 321, 1, 3025, 6011), )
if mibBuilder.loadTexts: ncmcsuCurrentTable.setStatus('mandatory')
ncmcsuCurrentEntry = MibTableRow((1, 3, 6, 1, 4, 1, 321, 1, 3025, 6011, 1), ).setIndexNames((0, "VERILINK-ENTERPRISE-CSUNCM-MIB", "ncmcsuNIDCurrentIndex"), (0, "VERILINK-ENTERPRISE-CSUNCM-MIB", "ncmcsuCurrentIndex"), (0, "VERILINK-ENTERPRISE-CSUNCM-MIB", "ncmcsuCurrentEndType"))
if mibBuilder.loadTexts: ncmcsuCurrentEntry.setStatus('mandatory')
ncmcsuNIDCurrentIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3025, 6011, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmcsuNIDCurrentIndex.setStatus('mandatory')
ncmcsuCurrentIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3025, 6011, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmcsuCurrentIndex.setStatus('mandatory')
ncmcsuCurrentEndType = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3025, 6011, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("near-End", 1), ("far-End", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmcsuCurrentEndType.setStatus('mandatory')
ncmcsuCurrentNETOOFS = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3025, 6011, 1, 4), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmcsuCurrentNETOOFS.setStatus('mandatory')
ncmcsuCurrentNETLOSS = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3025, 6011, 1, 5), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmcsuCurrentNETLOSS.setStatus('mandatory')
ncmcsuCurrentNETAISS = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3025, 6011, 1, 6), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmcsuCurrentNETAISS.setStatus('mandatory')
ncmcsuCurrentNETBERS = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3025, 6011, 1, 7), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmcsuCurrentNETBERS.setStatus('mandatory')
ncmcsuCurrentNETYELS = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3025, 6011, 1, 8), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmcsuCurrentNETYELS.setStatus('mandatory')
ncmcsuCurrentNETLOFS = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3025, 6011, 1, 9), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmcsuCurrentNETLOFS.setStatus('mandatory')
ncmcsuCurrentNETESL = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3025, 6011, 1, 10), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmcsuCurrentNETESL.setStatus('mandatory')
ncmcsuCurrentNETSEFS = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3025, 6011, 1, 11), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmcsuCurrentNETSEFS.setStatus('mandatory')
ncmcsuCurrentEQOOFS = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3025, 6011, 1, 12), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmcsuCurrentEQOOFS.setStatus('mandatory')
ncmcsuCurrentEQDTED = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3025, 6011, 1, 13), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmcsuCurrentEQDTED.setStatus('mandatory')
ncmcsuCurrentEQDBER = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3025, 6011, 1, 14), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmcsuCurrentEQDBER.setStatus('mandatory')
ncmcsuCurrentEQES = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3025, 6011, 1, 15), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmcsuCurrentEQES.setStatus('mandatory')
ncmcsuCurrentEQUAS = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3025, 6011, 1, 16), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmcsuCurrentEQUAS.setStatus('mandatory')
ncmcsuCurrentEQESL = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3025, 6011, 1, 17), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmcsuCurrentEQESL.setStatus('mandatory')
ncmcsuTotalTable = MibTable((1, 3, 6, 1, 4, 1, 321, 1, 3025, 6012), )
if mibBuilder.loadTexts: ncmcsuTotalTable.setStatus('mandatory')
ncmcsuTotalEntry = MibTableRow((1, 3, 6, 1, 4, 1, 321, 1, 3025, 6012, 1), ).setIndexNames((0, "VERILINK-ENTERPRISE-CSUNCM-MIB", "ncmcsuNIDTotalIndex"), (0, "VERILINK-ENTERPRISE-CSUNCM-MIB", "ncmcsuTotalIndex"), (0, "VERILINK-ENTERPRISE-CSUNCM-MIB", "ncmcsuTotalEndType"))
if mibBuilder.loadTexts: ncmcsuTotalEntry.setStatus('mandatory')
ncmcsuNIDTotalIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3025, 6012, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmcsuNIDTotalIndex.setStatus('mandatory')
ncmcsuTotalIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3025, 6012, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmcsuTotalIndex.setStatus('mandatory')
ncmcsuTotalEndType = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3025, 6012, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("near-End", 1), ("far-End", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmcsuTotalEndType.setStatus('mandatory')
ncmcsuTotalNETOOFS = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3025, 6012, 1, 4), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmcsuTotalNETOOFS.setStatus('mandatory')
ncmcsuTotalNETLOSS = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3025, 6012, 1, 5), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmcsuTotalNETLOSS.setStatus('mandatory')
ncmcsuTotalNETAISS = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3025, 6012, 1, 6), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmcsuTotalNETAISS.setStatus('mandatory')
ncmcsuTotalNETBERS = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3025, 6012, 1, 7), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmcsuTotalNETBERS.setStatus('mandatory')
ncmcsuTotalNETYELS = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3025, 6012, 1, 8), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmcsuTotalNETYELS.setStatus('mandatory')
ncmcsuTotalNETLOFS = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3025, 6012, 1, 9), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmcsuTotalNETLOFS.setStatus('mandatory')
ncmcsuTotalNETESL = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3025, 6012, 1, 10), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmcsuTotalNETESL.setStatus('mandatory')
ncmcsuTotalNETSEFS = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3025, 6012, 1, 11), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmcsuTotalNETSEFS.setStatus('mandatory')
ncmcsuTotalEQOOFS = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3025, 6012, 1, 12), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmcsuTotalEQOOFS.setStatus('mandatory')
ncmcsuTotalEQDTED = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3025, 6012, 1, 13), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmcsuTotalEQDTED.setStatus('mandatory')
ncmcsuTotalEQDBER = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3025, 6012, 1, 14), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmcsuTotalEQDBER.setStatus('mandatory')
ncmcsuTotalEQES = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3025, 6012, 1, 15), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmcsuTotalEQES.setStatus('mandatory')
ncmcsuTotalEQUAS = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3025, 6012, 1, 16), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmcsuTotalEQUAS.setStatus('mandatory')
ncmcsuTotalEQESL = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3025, 6012, 1, 17), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmcsuTotalEQESL.setStatus('mandatory')
ncmcsuIntervalTable = MibTable((1, 3, 6, 1, 4, 1, 321, 1, 3025, 6013), )
if mibBuilder.loadTexts: ncmcsuIntervalTable.setStatus('mandatory')
ncmcsuIntervalEntry = MibTableRow((1, 3, 6, 1, 4, 1, 321, 1, 3025, 6013, 1), ).setIndexNames((0, "VERILINK-ENTERPRISE-CSUNCM-MIB", "ncmcsuNIDIntervalIndex"), (0, "VERILINK-ENTERPRISE-CSUNCM-MIB", "ncmcsuIntervalIndex"), (0, "VERILINK-ENTERPRISE-CSUNCM-MIB", "ncmcsuIntervalEndType"), (0, "VERILINK-ENTERPRISE-CSUNCM-MIB", "ncmcsuIntervalNumber"))
if mibBuilder.loadTexts: ncmcsuIntervalEntry.setStatus('mandatory')
ncmcsuNIDIntervalIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3025, 6013, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmcsuNIDIntervalIndex.setStatus('mandatory')
ncmcsuIntervalIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3025, 6013, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmcsuIntervalIndex.setStatus('mandatory')
ncmcsuIntervalEndType = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3025, 6013, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("near-End", 1), ("far-End", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmcsuIntervalEndType.setStatus('mandatory')
ncmcsuIntervalNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3025, 6013, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 96))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmcsuIntervalNumber.setStatus('mandatory')
ncmcsuIntervalNETOOFS = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3025, 6013, 1, 5), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmcsuIntervalNETOOFS.setStatus('mandatory')
ncmcsuIntervalNETLOSS = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3025, 6013, 1, 6), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmcsuIntervalNETLOSS.setStatus('mandatory')
ncmcsuIntervalNETAISS = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3025, 6013, 1, 7), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmcsuIntervalNETAISS.setStatus('mandatory')
ncmcsuIntervalNETBERS = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3025, 6013, 1, 8), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmcsuIntervalNETBERS.setStatus('mandatory')
ncmcsuIntervalNETYELS = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3025, 6013, 1, 9), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmcsuIntervalNETYELS.setStatus('mandatory')
ncmcsuIntervalNETLOFS = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3025, 6013, 1, 10), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmcsuIntervalNETLOFS.setStatus('mandatory')
ncmcsuIntervalNETESL = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3025, 6013, 1, 11), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmcsuIntervalNETESL.setStatus('mandatory')
ncmcsuIntervalNETSEFS = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3025, 6013, 1, 12), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmcsuIntervalNETSEFS.setStatus('mandatory')
ncmcsuIntervalEQOOFS = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3025, 6013, 1, 13), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmcsuIntervalEQOOFS.setStatus('mandatory')
ncmcsuIntervalEQDTED = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3025, 6013, 1, 14), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmcsuIntervalEQDTED.setStatus('mandatory')
ncmcsuIntervalEQDBER = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3025, 6013, 1, 15), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmcsuIntervalEQDBER.setStatus('mandatory')
ncmcsuIntervalEQES = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3025, 6013, 1, 16), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmcsuIntervalEQES.setStatus('mandatory')
ncmcsuIntervalEQUAS = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3025, 6013, 1, 17), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmcsuIntervalEQUAS.setStatus('mandatory')
ncmcsuIntervalEQESL = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3025, 6013, 1, 18), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmcsuIntervalEQESL.setStatus('mandatory')
ncmcsucommonTable = MibTable((1, 3, 6, 1, 4, 1, 321, 1, 3025, 6014), )
if mibBuilder.loadTexts: ncmcsucommonTable.setStatus('mandatory')
ncmcsucommonEntry = MibTableRow((1, 3, 6, 1, 4, 1, 321, 1, 3025, 6014, 1), ).setIndexNames((0, "VERILINK-ENTERPRISE-CSUNCM-MIB", "ncmcsuNIDcommonIndex"), (0, "VERILINK-ENTERPRISE-CSUNCM-MIB", "ncmcsucommonIndex"), (0, "VERILINK-ENTERPRISE-CSUNCM-MIB", "ncmcsucommonEndType"))
if mibBuilder.loadTexts: ncmcsucommonEntry.setStatus('mandatory')
ncmcsuNIDcommonIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3025, 6014, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmcsuNIDcommonIndex.setStatus('mandatory')
ncmcsucommonIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3025, 6014, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmcsucommonIndex.setStatus('mandatory')
ncmcsucommonEndType = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3025, 6014, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("near-End", 1), ("far-End", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmcsucommonEndType.setStatus('mandatory')
ncmValidInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3025, 6014, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmValidInterval.setStatus('mandatory')
ncmCurrentIntervalSeconds = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3025, 6014, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmCurrentIntervalSeconds.setStatus('mandatory')
ncmResetPerformanceReg = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3025, 6014, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ncmResetPerformanceReg.setStatus('mandatory')
ncmcsuRetrievalStatusOneTable = MibTable((1, 3, 6, 1, 4, 1, 321, 1, 3025, 6015), )
if mibBuilder.loadTexts: ncmcsuRetrievalStatusOneTable.setStatus('mandatory')
ncmcsuRetrievalStatusOneEntry = MibTableRow((1, 3, 6, 1, 4, 1, 321, 1, 3025, 6015, 1), ).setIndexNames((0, "VERILINK-ENTERPRISE-CSUNCM-MIB", "ncmcsuNIDRetrievalStatusIndex1"), (0, "VERILINK-ENTERPRISE-CSUNCM-MIB", "ncmcsuRetrievalStatusIndex1"))
if mibBuilder.loadTexts: ncmcsuRetrievalStatusOneEntry.setStatus('mandatory')
ncmcsuNIDRetrievalStatusIndex1 = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3025, 6015, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmcsuNIDRetrievalStatusIndex1.setStatus('mandatory')
ncmcsuRetrievalStatusIndex1 = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3025, 6015, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmcsuRetrievalStatusIndex1.setStatus('mandatory')
ncmcsuNearAlmBERthresexcd = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3025, 6015, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmcsuNearAlmBERthresexcd.setStatus('mandatory')
ncmcsuNearAlmESthresexcd = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3025, 6015, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmcsuNearAlmESthresexcd.setStatus('mandatory')
ncmcsuNearAlmUASthresexcd = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3025, 6015, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmcsuNearAlmUASthresexcd.setStatus('mandatory')
ncmcsuNearAlmLLBPLB = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3025, 6015, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmcsuNearAlmLLBPLB.setStatus('mandatory')
ncmcsuFarAlmBERthresexcd = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3025, 6015, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmcsuFarAlmBERthresexcd.setStatus('mandatory')
ncmcsuFarAlmESthresexcd = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3025, 6015, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmcsuFarAlmESthresexcd.setStatus('mandatory')
ncmcsuFarAlmUASthresexcd = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3025, 6015, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmcsuFarAlmUASthresexcd.setStatus('mandatory')
ncmcsuFarAlmLLBDLB = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3025, 6015, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmcsuFarAlmLLBDLB.setStatus('mandatory')
ncmcsuFarCsuAbsent = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3025, 6015, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmcsuFarCsuAbsent.setStatus('mandatory')
ncmcsuEqStatusLowDensity = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3025, 6015, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmcsuEqStatusLowDensity.setStatus('mandatory')
ncmcsuEqStatusOOF = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3025, 6015, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmcsuEqStatusOOF.setStatus('mandatory')
ncmcsuEqStatusCRCError = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3025, 6015, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmcsuEqStatusCRCError.setStatus('mandatory')
ncmcsuEqStatusBPV = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3025, 6015, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmcsuEqStatusBPV.setStatus('mandatory')
ncmcsuEqStatusPLB = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3025, 6015, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmcsuEqStatusPLB.setStatus('mandatory')
ncmcsuEqStatusELBRLB = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3025, 6015, 1, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("no-Loop", 1), ("elb", 2), ("rlb", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmcsuEqStatusELBRLB.setStatus('mandatory')
ncmcsuNetStatusPulses = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3025, 6015, 1, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmcsuNetStatusPulses.setStatus('mandatory')
ncmcsuNetStatusOOF = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3025, 6015, 1, 19), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmcsuNetStatusOOF.setStatus('mandatory')
ncmcsuNetStatusCRCError = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3025, 6015, 1, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmcsuNetStatusCRCError.setStatus('mandatory')
ncmcsuNetStatusBPV = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3025, 6015, 1, 21), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmcsuNetStatusBPV.setStatus('mandatory')
ncmcsuNetStatusLLB = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3025, 6015, 1, 22), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmcsuNetStatusLLB.setStatus('mandatory')
ncmcsuXNetStatus1BERthresexcd = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3025, 6015, 1, 23), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmcsuXNetStatus1BERthresexcd.setStatus('mandatory')
ncmcsuXNetStatus1ES1thresexcd = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3025, 6015, 1, 24), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmcsuXNetStatus1ES1thresexcd.setStatus('mandatory')
ncmcsuXNetStatus1ESthresexcd = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3025, 6015, 1, 25), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmcsuXNetStatus1ESthresexcd.setStatus('mandatory')
ncmcsuXNetStatus1UASthresexcd = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3025, 6015, 1, 26), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmcsuXNetStatus1UASthresexcd.setStatus('mandatory')
ncmcsuXNetStatus1LLB = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3025, 6015, 1, 27), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmcsuXNetStatus1LLB.setStatus('mandatory')
ncmcsuXNetStatus1PLB = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3025, 6015, 1, 28), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmcsuXNetStatus1PLB.setStatus('mandatory')
ncmcsuXNetStatus1LOS = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3025, 6015, 1, 29), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmcsuXNetStatus1LOS.setStatus('mandatory')
ncmcsuXNetStatus1YEL = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3025, 6015, 1, 30), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmcsuXNetStatus1YEL.setStatus('mandatory')
ncmcsuXNetStatus2LOF = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3025, 6015, 1, 31), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmcsuXNetStatus2LOF.setStatus('mandatory')
ncmcsuXNetStatus2AIS = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3025, 6015, 1, 32), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmcsuXNetStatus2AIS.setStatus('mandatory')
ncmcsuXNetStatus2TSTProgress = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3025, 6015, 1, 33), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmcsuXNetStatus2TSTProgress.setStatus('mandatory')
ncmcsuXNetStatus2PowerAFail = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3025, 6015, 1, 34), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmcsuXNetStatus2PowerAFail.setStatus('mandatory')
ncmcsuXNetStatus2PowerBFail = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3025, 6015, 1, 35), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmcsuXNetStatus2PowerBFail.setStatus('mandatory')
ncmcsuXEqStatus1BERthresexcd = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3025, 6015, 1, 36), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmcsuXEqStatus1BERthresexcd.setStatus('mandatory')
ncmcsuXEqStatus1ES1thresexcd = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3025, 6015, 1, 37), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmcsuXEqStatus1ES1thresexcd.setStatus('mandatory')
ncmcsuXEqStatus1ESthresexcd = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3025, 6015, 1, 38), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmcsuXEqStatus1ESthresexcd.setStatus('mandatory')
ncmcsuXEqStatus1UASthresexcd = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3025, 6015, 1, 39), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmcsuXEqStatus1UASthresexcd.setStatus('mandatory')
ncmcsuXEqStatus1ELB = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3025, 6015, 1, 40), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmcsuXEqStatus1ELB.setStatus('mandatory')
ncmcsuXEqStatus1RLB = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3025, 6015, 1, 41), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmcsuXEqStatus1RLB.setStatus('mandatory')
ncmcsuXEqStatus1LOS = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3025, 6015, 1, 42), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmcsuXEqStatus1LOS.setStatus('mandatory')
ncmcsuXEqStatus1YEL = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3025, 6015, 1, 43), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmcsuXEqStatus1YEL.setStatus('mandatory')
ncmcsuXEqStatus2LOF = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3025, 6015, 1, 44), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmcsuXEqStatus2LOF.setStatus('mandatory')
ncmcsuXEqStatus2AIS = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3025, 6015, 1, 45), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmcsuXEqStatus2AIS.setStatus('mandatory')
ncmcsuXEqStatus2TSTSignal = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3025, 6015, 1, 46), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmcsuXEqStatus2TSTSignal.setStatus('mandatory')
ncmcsuTstRstNearRLBTstFail = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3025, 6015, 1, 47), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmcsuTstRstNearRLBTstFail.setStatus('mandatory')
ncmcsuTstRstNearPLBTstFail = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3025, 6015, 1, 48), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmcsuTstRstNearPLBTstFail.setStatus('mandatory')
ncmcsuMiscellaneousTable = MibTable((1, 3, 6, 1, 4, 1, 321, 1, 3025, 6016), )
if mibBuilder.loadTexts: ncmcsuMiscellaneousTable.setStatus('mandatory')
ncmcsuMiscellaneousEntry = MibTableRow((1, 3, 6, 1, 4, 1, 321, 1, 3025, 6016, 1), ).setIndexNames((0, "VERILINK-ENTERPRISE-CSUNCM-MIB", "ncmcsuNIDMiscellaneousIndex"), (0, "VERILINK-ENTERPRISE-CSUNCM-MIB", "ncmcsuMiscellaneousIndex"))
if mibBuilder.loadTexts: ncmcsuMiscellaneousEntry.setStatus('mandatory')
ncmcsuNIDMiscellaneousIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3025, 6016, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmcsuNIDMiscellaneousIndex.setStatus('mandatory')
ncmcsuMiscellaneousIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3025, 6016, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmcsuMiscellaneousIndex.setStatus('mandatory')
ncmcsuResetESFErrCounter = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3025, 6016, 1, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ncmcsuResetESFErrCounter.setStatus('mandatory')
ncmcsuRetrieveNetESFErrCounter = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3025, 6016, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmcsuRetrieveNetESFErrCounter.setStatus('mandatory')
ncmcsuRetrieveEqESFErrCounter = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3025, 6016, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmcsuRetrieveEqESFErrCounter.setStatus('mandatory')
ncmcsuSendBOPmessage = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3025, 6016, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("plb-activate", 1), ("plb-deactivate", 2), ("llb-activate", 3), ("llb-deactivate", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ncmcsuSendBOPmessage.setStatus('mandatory')
ncmcsuResetNetEqBERAlarm = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3025, 6016, 1, 7), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ncmcsuResetNetEqBERAlarm.setStatus('mandatory')
mibBuilder.exportSymbols("VERILINK-ENTERPRISE-CSUNCM-MIB", ncmcsuAlarmClearDelay=ncmcsuAlarmClearDelay, ncmcsuNIDIntervalIndex1=ncmcsuNIDIntervalIndex1, ncmcsuTotalEndType1=ncmcsuTotalEndType1, ncmcsuEnhancedIntervalUASs=ncmcsuEnhancedIntervalUASs, ncmcsuCurrentNETESL=ncmcsuCurrentNETESL, ncmcsuTotalEQES=ncmcsuTotalEQES, ncmcsuIntervalEndType1=ncmcsuIntervalEndType1, ncmCurrentIntervalSeconds=ncmCurrentIntervalSeconds, ncmcsuIntervalNETBERS=ncmcsuIntervalNETBERS, ncmcsuTotalLCVs=ncmcsuTotalLCVs, ncmcsuTotalOneEntry=ncmcsuTotalOneEntry, ncmcsuEnhancedTotalLOFC=ncmcsuEnhancedTotalLOFC, ncmcsuEnhancedIntervalLOFC=ncmcsuEnhancedIntervalLOFC, ncmcsuTotalEntry=ncmcsuTotalEntry, ncmcsuXNetStatus1LLB=ncmcsuXNetStatus1LLB, ncmcsuIntervalOneTable=ncmcsuIntervalOneTable, ncmcsuUASThreshold=ncmcsuUASThreshold, ncmcsuNetDensityEnforcement=ncmcsuNetDensityEnforcement, ncmcsuEnhancedTotalTable=ncmcsuEnhancedTotalTable, ncmcsuIntervalSESs=ncmcsuIntervalSESs, ncmcsuElementStatusIndex1=ncmcsuElementStatusIndex1, ncmcsuIntervalEndType=ncmcsuIntervalEndType, ncmcsuCurrentSEFSs=ncmcsuCurrentSEFSs, ncmcsuIntervalNETLOSS=ncmcsuIntervalNETLOSS, ncmcsuEnhanceLineIndex=ncmcsuEnhanceLineIndex, ncmcsuXNetStatus1PLB=ncmcsuXNetStatus1PLB, ncmcsuMiscellaneousIndex=ncmcsuMiscellaneousIndex, ncmcsuTotalNETLOFS=ncmcsuTotalNETLOFS, ncmcsuIntervalEQESL=ncmcsuIntervalEQESL, ncmcsuCfgRptPRMType=ncmcsuCfgRptPRMType, ncmcsuXNetStatus2PowerAFail=ncmcsuXNetStatus2PowerAFail, ncmcsuEnhancedIntervalEntry=ncmcsuEnhancedIntervalEntry, ncmcsuTotalNETLOSS=ncmcsuTotalNETLOSS, ncmcsuCfgAlmSelfTest=ncmcsuCfgAlmSelfTest, ncmcsuXEqStatus1ELB=ncmcsuXEqStatus1ELB, ncmcsuEnhancedCurrentCSSs=ncmcsuEnhancedCurrentCSSs, ncmcsuTotalEQOOFS=ncmcsuTotalEQOOFS, ncmcsuIntervalLCVs=ncmcsuIntervalLCVs, ncmcsuIntervalIndex=ncmcsuIntervalIndex, ncmcsuNIDEnhanceIndex=ncmcsuNIDEnhanceIndex, ncmcsuIntervalNETESL=ncmcsuIntervalNETESL, ncmcsuFarCsuAbsent=ncmcsuFarCsuAbsent, ncmcsuTestTimeSeconds=ncmcsuTestTimeSeconds, ncmcsuEnhancedIntervalNumber=ncmcsuEnhancedIntervalNumber, ncmcsuCurrentOneEntry=ncmcsuCurrentOneEntry, ncmcsuTotalESs=ncmcsuTotalESs, ncmcsuCurrentIndex1=ncmcsuCurrentIndex1, ncmcsuCurrentEQESL=ncmcsuCurrentEQESL, ncmcsuStatus=ncmcsuStatus, ncmcsuNetworkKeepAlive=ncmcsuNetworkKeepAlive, ncmcsuIntervalBESs=ncmcsuIntervalBESs, ncmcsuCurrentEntry=ncmcsuCurrentEntry, ncmcsuRetrieveEqESFErrCounter=ncmcsuRetrieveEqESFErrCounter, ncmcsuExcessiveError=ncmcsuExcessiveError, ncmcsuTotalBESs=ncmcsuTotalBESs, ncmcsuCfgCodeEQFIFO=ncmcsuCfgCodeEQFIFO, ncmcsuEnhancedCurrentTable=ncmcsuEnhancedCurrentTable, ncmValidInterval=ncmValidInterval, ncmcsuBERThreshold=ncmcsuBERThreshold, ncmResetPerformanceReg=ncmResetPerformanceReg, ncmcsuXNetStatus1YEL=ncmcsuXNetStatus1YEL, ncmcsuEnhancedTotalUASs=ncmcsuEnhancedTotalUASs, ncmcsuCurrentTable=ncmcsuCurrentTable, ncmcsuElementStatusTwoEntry=ncmcsuElementStatusTwoEntry, ncmcsuCurrentCSSs=ncmcsuCurrentCSSs, ncmcsuCurrentDMs=ncmcsuCurrentDMs, ncmcsuTstRstNearRLBTstFail=ncmcsuTstRstNearRLBTstFail, ncmcsuXNetStatus2AIS=ncmcsuXNetStatus2AIS, ncmcsuTotalNETYELS=ncmcsuTotalNETYELS, ncmcsuCurrentNETBERS=ncmcsuCurrentNETBERS, ncmcsuValidIntervals=ncmcsuValidIntervals, ncmcsuEnhancedIntervalIndex=ncmcsuEnhancedIntervalIndex, ncmcsuIntervalEQOOFS=ncmcsuIntervalEQOOFS, ncmcsuEqStatusBPV=ncmcsuEqStatusBPV, ncmcsuNIDElementStatusIndex2=ncmcsuNIDElementStatusIndex2, ncmcsuEqStatusLowDensity=ncmcsuEqStatusLowDensity, ncmcsuResetESFErrCounter=ncmcsuResetESFErrCounter, ncmcsuXNetStatus1UASthresexcd=ncmcsuXNetStatus1UASthresexcd, ncmcsuCfgLoopRespRLB=ncmcsuCfgLoopRespRLB, ncmcsuCurrentLCVs=ncmcsuCurrentLCVs, ncmcsuNIDTotalIndex1=ncmcsuNIDTotalIndex1, ncmcsuNIDRetrievalStatusIndex1=ncmcsuNIDRetrievalStatusIndex1, ncmcsuMiscellaneousTable=ncmcsuMiscellaneousTable, ncmcsuEnhancedIntervalCSSs=ncmcsuEnhancedIntervalCSSs, ncmcsuNetStatusOOF=ncmcsuNetStatusOOF, ncmcsuEnhancedTotalESs=ncmcsuEnhancedTotalESs, ncmcsuElementStatusIndex2=ncmcsuElementStatusIndex2, ncmcsuEnhancedCurrentEntry=ncmcsuEnhancedCurrentEntry, ncmcsuNearAlmESthresexcd=ncmcsuNearAlmESthresexcd, ncmcsuIntervalESs=ncmcsuIntervalESs, ncmcsuIntervalOneEntry=ncmcsuIntervalOneEntry, ncmcsuEnhancedIntervalSESs=ncmcsuEnhancedIntervalSESs, ncmcsucommonTable=ncmcsucommonTable, ncmcsuEnhancedCurrentSESs=ncmcsuEnhancedCurrentSESs, ncmcsuTestIntervalIndex=ncmcsuTestIntervalIndex, ncmcsuEqStatusOOF=ncmcsuEqStatusOOF, ncmcsuCurrentEQES=ncmcsuCurrentEQES, ncmcsuAlarmEnable=ncmcsuAlarmEnable, ncmcsuCurrentEQOOFS=ncmcsuCurrentEQOOFS, ncmcsuCfgAlmUnframedMode=ncmcsuCfgAlmUnframedMode, ncmcsucommonIndex=ncmcsucommonIndex, ncmcsuXNetStatus1BERthresexcd=ncmcsuXNetStatus1BERthresexcd, ncmcsuCurrentEQUAS=ncmcsuCurrentEQUAS, ncmcsuNIDTotalIndex=ncmcsuNIDTotalIndex, ncmcsuTestSigCfgFrameSignal=ncmcsuTestSigCfgFrameSignal, ncmcsuIntervalNETLOFS=ncmcsuIntervalNETLOFS, ncmcsuXEqStatus1YEL=ncmcsuXEqStatus1YEL, ncmcsuElementStatusTwoTable=ncmcsuElementStatusTwoTable, ncmcsuESThreshold=ncmcsuESThreshold, ncmcsuIntervalLESs=ncmcsuIntervalLESs, ncmcsuEnhancedTotalSESs=ncmcsuEnhancedTotalSESs, ncmcsuNIDcommonIndex=ncmcsuNIDcommonIndex, ncmcsuCurrentSESs=ncmcsuCurrentSESs, ncmcsuJitterBuf=ncmcsuJitterBuf, ncmcsuApplication=ncmcsuApplication, ncmcsuCurrentNETLOFS=ncmcsuCurrentNETLOFS, ncmcsuCurrentEQDTED=ncmcsuCurrentEQDTED, ncmcsuIntervalDMs=ncmcsuIntervalDMs, ncmcsuCfgCodeSend1sLnkIdle=ncmcsuCfgCodeSend1sLnkIdle, ncmcsuIntervalEQES=ncmcsuIntervalEQES, ncmcsuXEqStatus1UASthresexcd=ncmcsuXEqStatus1UASthresexcd, ncmcsuCfgCodeXYellowAlarm=ncmcsuCfgCodeXYellowAlarm, ncmcsuSendBOPmessage=ncmcsuSendBOPmessage, ncmcsuNetLineBuildOut=ncmcsuNetLineBuildOut, ncmcsuTotalNETOOFS=ncmcsuTotalNETOOFS, ncmcsuIntervalNETAISS=ncmcsuIntervalNETAISS, ncmcsuTotalEQDTED=ncmcsuTotalEQDTED, ncmcsuEnhanceConfigEntry=ncmcsuEnhanceConfigEntry, ncmcsuCfgAlmEnableTestState=ncmcsuCfgAlmEnableTestState, ncmcsuESInterval=ncmcsuESInterval, ncmcsuTestSecondsRemain=ncmcsuTestSecondsRemain, ncmcsuCurrentEndType1=ncmcsuCurrentEndType1, ncmcsuCurrentUASs=ncmcsuCurrentUASs, ncmcsuTestPattern=ncmcsuTestPattern, ncmcsuElementStatusOneTable=ncmcsuElementStatusOneTable, ncmcsubpvSecInterval=ncmcsubpvSecInterval, ncmcsuTotalEQESL=ncmcsuTotalEQESL, ncmcsuCfgAlmOnNetLoop=ncmcsuCfgAlmOnNetLoop, ncmcsuTotalNETBERS=ncmcsuTotalNETBERS, ncmcsuLoopback=ncmcsuLoopback, ncmcsuTiming=ncmcsuTiming, ncmcsuXEqStatus1ESthresexcd=ncmcsuXEqStatus1ESthresexcd, ncmcsuMiscellaneousEntry=ncmcsuMiscellaneousEntry, ncmcsuTotalCSSs=ncmcsuTotalCSSs, ncmcsuMainLineIndex=ncmcsuMainLineIndex, ncmcsuFarAlmBERthresexcd=ncmcsuFarAlmBERthresexcd, ncmcsuThresholdIntervalIndex=ncmcsuThresholdIntervalIndex, ncmcsuRLBTimeoutIndex=ncmcsuRLBTimeoutIndex, ncmcsuTotalIndex=ncmcsuTotalIndex, ncmcsuTotalDMs=ncmcsuTotalDMs, ncmcsuXNetStatus1ES1thresexcd=ncmcsuXNetStatus1ES1thresexcd, ncmcsuNearAlmLLBPLB=ncmcsuNearAlmLLBPLB, ncmcsuElementStatusOneEntry=ncmcsuElementStatusOneEntry, ncmcsuNIDElementStatusIndex1=ncmcsuNIDElementStatusIndex1, ncmcsuEnhancedCurrentUASs=ncmcsuEnhancedCurrentUASs, ncmcsuXNetStatus1LOS=ncmcsuXNetStatus1LOS, ncmcsuAddress2=ncmcsuAddress2, ncmcsuCurrentIntervalSec=ncmcsuCurrentIntervalSec, ncmcsuIntervalEntry=ncmcsuIntervalEntry, ncmcsuEnhancedIntervalEndType=ncmcsuEnhancedIntervalEndType, ncmcsuTotalNETSEFS=ncmcsuTotalNETSEFS, ncmcsuNIDMainConfigIndex=ncmcsuNIDMainConfigIndex, ncmcsuTotalOneTable=ncmcsuTotalOneTable, ncmcsuResetNetEqBERAlarm=ncmcsuResetNetEqBERAlarm, ncmcsuIntervalTable=ncmcsuIntervalTable, ncmcsuEQCableLength=ncmcsuEQCableLength, ncmcsucommonEntry=ncmcsucommonEntry, ncmcsuNIDThresholdIntervalIndex=ncmcsuNIDThresholdIntervalIndex, ncmcsuNIDCurrentIndex=ncmcsuNIDCurrentIndex, ncmcsuXNetStatus2TSTProgress=ncmcsuXNetStatus2TSTProgress, ncmcsuFarAlmLLBDLB=ncmcsuFarAlmLLBDLB, ncmcsuTotalPCVs=ncmcsuTotalPCVs, ncmcsuXEqStatus1RLB=ncmcsuXEqStatus1RLB, ncmcsuCfgLoopRespELB=ncmcsuCfgLoopRespELB, ncmcsuRetrieveNetESFErrCounter=ncmcsuRetrieveNetESFErrCounter, ncmcsuAddress1=ncmcsuAddress1, ncmcsuEnhancedTotalBESs=ncmcsuEnhancedTotalBESs, ncmcsuCurrentNETYELS=ncmcsuCurrentNETYELS, ncmcsuTotalEndType=ncmcsuTotalEndType, ncmcsuNIDEnhancedTotalIndex=ncmcsuNIDEnhancedTotalIndex, ncmcsuIntervalNETYELS=ncmcsuIntervalNETYELS, ncmcsuNearAlmUASthresexcd=ncmcsuNearAlmUASthresexcd, ncmcsuXEqStatus1ES1thresexcd=ncmcsuXEqStatus1ES1thresexcd, ncmcsuCurrentLESs=ncmcsuCurrentLESs, ncmcsuRetrievalStatusOneEntry=ncmcsuRetrievalStatusOneEntry, ncmcsuTstRstNearPLBTstFail=ncmcsuTstRstNearPLBTstFail, ncmcsuNIDEnhancedIntervalIndex=ncmcsuNIDEnhancedIntervalIndex, ncmcsuCurrentNETOOFS=ncmcsuCurrentNETOOFS, ncmcsuRetrievalStatusOneTable=ncmcsuRetrievalStatusOneTable, ncmcsuXEqStatus1LOS=ncmcsuXEqStatus1LOS, ncmcsuCfgLoopRespPLB=ncmcsuCfgLoopRespPLB, ncmcsuEqStatusPLB=ncmcsuEqStatusPLB, ncmcsuCurrentESs=ncmcsuCurrentESs, ncmcsuThresholdIntervalTable=ncmcsuThresholdIntervalTable, ncmcsuIntervalEQUAS=ncmcsuIntervalEQUAS, ncmcsuIntervalNumber1=ncmcsuIntervalNumber1, ncmcsuXEqStatus2LOF=ncmcsuXEqStatus2LOF, ncmcsuXEqStatus2AIS=ncmcsuXEqStatus2AIS, ncmcsucommonEndType=ncmcsucommonEndType, ncmcsuEnhancedCurrentESs=ncmcsuEnhancedCurrentESs, ncmcsuEqStatusCRCError=ncmcsuEqStatusCRCError, ncmcsuTestSigCfgEnable=ncmcsuTestSigCfgEnable, ncmcsuIntervalEQDBER=ncmcsuIntervalEQDBER, ncmcsuCfgLoopRespLLBTONE=ncmcsuCfgLoopRespLLBTONE, ncmcsuEnhancedIntervalBESs=ncmcsuEnhancedIntervalBESs, ncmcsuIntervalIndex1=ncmcsuIntervalIndex1, ncmcsuCfgCodeNETFIFO=ncmcsuCfgCodeNETFIFO, ncmcsuEnhancedIntervalTable=ncmcsuEnhancedIntervalTable, ncmcsuCfgLoopRespLLB=ncmcsuCfgLoopRespLLB, ncmcsuTestErrorCounter=ncmcsuTestErrorCounter, ncmcsuIntervalNETOOFS=ncmcsuIntervalNETOOFS, ncmcsuIntervalPCVs=ncmcsuIntervalPCVs, ncmcsuTotalTable=ncmcsuTotalTable, ncmcsubpvSecThreshold=ncmcsubpvSecThreshold, ncmcsuCfgCodeTranMode=ncmcsuCfgCodeTranMode, ncmcsuUASInterval=ncmcsuUASInterval, ncmcsuEnhancedCurrentIndex=ncmcsuEnhancedCurrentIndex, ncmcsuMainConfigEntry=ncmcsuMainConfigEntry, ncmcsuTotalEQUAS=ncmcsuTotalEQUAS, ncmcsuResetPerfReg=ncmcsuResetPerfReg, ncmcsuRetrievalStatusIndex1=ncmcsuRetrievalStatusIndex1, ncmcsuCfgAlmOnPowerUpLoop=ncmcsuCfgAlmOnPowerUpLoop, ncmcsuEqStatusELBRLB=ncmcsuEqStatusELBRLB, ncmcsuCurrentEQDBER=ncmcsuCurrentEQDBER, ncmcsuCfgRptDataLinkUnsolicit=ncmcsuCfgRptDataLinkUnsolicit, ncmcsuXNetStatus2LOF=ncmcsuXNetStatus2LOF, ncmcsuCfgCodeRegenCRC=ncmcsuCfgCodeRegenCRC, ncmcsuIntervalEQDTED=ncmcsuIntervalEQDTED, ncmcsuThresholdIntervalEntry=ncmcsuThresholdIntervalEntry, ncmcsuTotalLESs=ncmcsuTotalLESs, ncmcsuXNetStatus1ESthresexcd=ncmcsuXNetStatus1ESthresexcd, ncmcsuCurrentOneTable=ncmcsuCurrentOneTable, ncmcsuCurrentNETAISS=ncmcsuCurrentNETAISS, ncmcsuCurrentNETSEFS=ncmcsuCurrentNETSEFS, ncmcsuCfgRptAlmReporting=ncmcsuCfgRptAlmReporting, ncmcsuNetLOFCIndexTime=ncmcsuNetLOFCIndexTime, ncmcsuLLBELBPLB=ncmcsuLLBELBPLB, ncmcsuCurrentPCVs=ncmcsuCurrentPCVs, ncmcsuEnhancedIntervalESs=ncmcsuEnhancedIntervalESs, ncmcsuNetStatusLLB=ncmcsuNetStatusLLB, ncmcsuEnhancedTotalIndex=ncmcsuEnhancedTotalIndex, ncmcsuNIDEnhancedCurrentIndex=ncmcsuNIDEnhancedCurrentIndex, ncmcsuCfgSendReceiveInBandCode=ncmcsuCfgSendReceiveInBandCode, ncmcsuTotalNETAISS=ncmcsuTotalNETAISS, ncmcsuNIDCurrentIndex1=ncmcsuNIDCurrentIndex1, ncmcsuCurrentIndex=ncmcsuCurrentIndex, ncmcsuTotalUASs=ncmcsuTotalUASs, ncmcsuEnhancedTotalCSSs=ncmcsuEnhancedTotalCSSs, ncmcsuEnhancedCurrentEndType=ncmcsuEnhancedCurrentEndType, ncmcsuTotalIndex1=ncmcsuTotalIndex1, ncmcsuCfgRptSendPRM=ncmcsuCfgRptSendPRM, ncmcsuEnhancedCurrentLOFC=ncmcsuEnhancedCurrentLOFC, ncmcsuNetStatusPulses=ncmcsuNetStatusPulses, ncmcsuFormat=ncmcsuFormat)
mibBuilder.exportSymbols("VERILINK-ENTERPRISE-CSUNCM-MIB", ncmcsuNIDMiscellaneousIndex=ncmcsuNIDMiscellaneousIndex, ncmcsuNetLossOfSignal=ncmcsuNetLossOfSignal, ncmcsuIntervalNETSEFS=ncmcsuIntervalNETSEFS, ncmcsuXEqStatus2TSTSignal=ncmcsuXEqStatus2TSTSignal, ncmcsuIntervalUASs=ncmcsuIntervalUASs, ncmdsudatabus=ncmdsudatabus, ncmcsuEnhanceConfigTable=ncmcsuEnhanceConfigTable, ncmcsuIntervalCSSs=ncmcsuIntervalCSSs, ncmcsuOutOfFrame=ncmcsuOutOfFrame, ncmcsuTotalSEFSs=ncmcsuTotalSEFSs, ncmcsuCurrentBESs=ncmcsuCurrentBESs, ncmcsuCurrentEndType=ncmcsuCurrentEndType, ncmcsuTotalEQDBER=ncmcsuTotalEQDBER, ncmcsuNearAlmBERthresexcd=ncmcsuNearAlmBERthresexcd, ncmcsuNetStatusBPV=ncmcsuNetStatusBPV, ncmcsuTotalSESs=ncmcsuTotalSESs, ncmcsuCfgAlmOnEqLoop=ncmcsuCfgAlmOnEqLoop, ncmcsuLineCode=ncmcsuLineCode, ncmcsuChannelMask=ncmcsuChannelMask, ncmcsuNetStatusCRCError=ncmcsuNetStatusCRCError, ncmcsuIntervalSEFSs=ncmcsuIntervalSEFSs, ncmcsuEnhancedTotalEntry=ncmcsuEnhancedTotalEntry, ncmcsuAlarmSetDelay=ncmcsuAlarmSetDelay, ncmcsuEnhancedTotalEndType=ncmcsuEnhancedTotalEndType, ncmcsuXNetStatus2PowerBFail=ncmcsuXNetStatus2PowerBFail, ncmcsuFarAlmUASthresexcd=ncmcsuFarAlmUASthresexcd, ncmcsuCfgLoopRespPLBTONE=ncmcsuCfgLoopRespPLBTONE, ncmcsuEnhancedCurrentBESs=ncmcsuEnhancedCurrentBESs, ncmcsuMainConfigTable=ncmcsuMainConfigTable, ncmcsuTotalNETESL=ncmcsuTotalNETESL, ncmcsuCurrentNETLOSS=ncmcsuCurrentNETLOSS, ncmcsuCfgRptPollFarEnd=ncmcsuCfgRptPollFarEnd, ncmcsuXEqStatus1BERthresexcd=ncmcsuXEqStatus1BERthresexcd, ncmcsuNIDIntervalIndex=ncmcsuNIDIntervalIndex, ncmcsuIntervalNumber=ncmcsuIntervalNumber, ncmcsuFarAlmESthresexcd=ncmcsuFarAlmESthresexcd)
