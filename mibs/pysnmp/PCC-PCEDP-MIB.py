#
# PySNMP MIB module PCC-PCEDP-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/PCC-PCEDP-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 20:28:45 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, ObjectIdentifier, OctetString = mibBuilder.importSymbols("ASN1", "Integer", "ObjectIdentifier", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
SingleValueConstraint, ValueRangeConstraint, ValueSizeConstraint, ConstraintsIntersection, ConstraintsUnion = mibBuilder.importSymbols("ASN1-REFINEMENT", "SingleValueConstraint", "ValueRangeConstraint", "ValueSizeConstraint", "ConstraintsIntersection", "ConstraintsUnion")
AddressFamilyNumbers, = mibBuilder.importSymbols("IANA-ADDRESS-FAMILY-NUMBERS-MIB", "AddressFamilyNumbers")
IANAipRouteProtocol, = mibBuilder.importSymbols("IANA-RTPROTO-MIB", "IANAipRouteProtocol")
Ipv6Address, = mibBuilder.importSymbols("IPV6-TC", "Ipv6Address")
ObjectGroup, ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ObjectGroup", "ModuleCompliance", "NotificationGroup")
Counter32, MibIdentifier, ModuleIdentity, NotificationType, IpAddress, MibScalar, MibTable, MibTableRow, MibTableColumn, experimental, Integer32, Gauge32, TimeTicks, Counter64, ObjectIdentity, Unsigned32, iso, Bits = mibBuilder.importSymbols("SNMPv2-SMI", "Counter32", "MibIdentifier", "ModuleIdentity", "NotificationType", "IpAddress", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "experimental", "Integer32", "Gauge32", "TimeTicks", "Counter64", "ObjectIdentity", "Unsigned32", "iso", "Bits")
DisplayString, TimeStamp, TruthValue, TextualConvention, RowStatus = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TimeStamp", "TruthValue", "TextualConvention", "RowStatus")
pccPcedpMIB = ModuleIdentity((1, 3, 6, 1, 3, 10000))
if mibBuilder.loadTexts: pccPcedpMIB.setLastUpdated('200606150000Z')
if mibBuilder.loadTexts: pccPcedpMIB.setOrganization('PCE Working Group')
class PccPceDpRoutingDomainID(TextualConvention, OctetString):
    status = 'current'
    subtypeSpec = OctetString.subtypeSpec + ValueSizeConstraint(0, 20)

pccPcedpNotifications = MibIdentifier((1, 3, 6, 1, 3, 10000, 0))
pccPcedpMIBObjects = MibIdentifier((1, 3, 6, 1, 3, 10000, 1))
pccPcedpDiscoveryObjects = MibIdentifier((1, 3, 6, 1, 3, 10000, 1, 1))
pccPcedpDiscAdminStatus = MibScalar((1, 3, 6, 1, 3, 10000, 1, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pccPcedpDiscAdminStatus.setStatus('current')
pccPcedpDiscKnowPCEs = MibScalar((1, 3, 6, 1, 3, 10000, 1, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pccPcedpDiscKnowPCEs.setStatus('current')
pccPcedpDiscActivePCEs = MibScalar((1, 3, 6, 1, 3, 10000, 1, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pccPcedpDiscActivePCEs.setStatus('current')
pccPcedpDiscPceTable = MibTable((1, 3, 6, 1, 3, 10000, 1, 1, 4), )
if mibBuilder.loadTexts: pccPcedpDiscPceTable.setStatus('current')
pccPcedpDiscPceEntry = MibTableRow((1, 3, 6, 1, 3, 10000, 1, 1, 4, 1), ).setIndexNames((0, "PCC-PCEDP-MIB", "pccPcedpDiscPceIndex"))
if mibBuilder.loadTexts: pccPcedpDiscPceEntry.setStatus('current')
pccPcedpDiscPceIndex = MibTableColumn((1, 3, 6, 1, 3, 10000, 1, 1, 4, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647)))
if mibBuilder.loadTexts: pccPcedpDiscPceIndex.setStatus('current')
pccPcedpDiscMechanism = MibTableColumn((1, 3, 6, 1, 3, 10000, 1, 1, 4, 1, 2), IANAipRouteProtocol()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pccPcedpDiscMechanism.setStatus('current')
pccPcedpDiscPceIPv4Address = MibTableColumn((1, 3, 6, 1, 3, 10000, 1, 1, 4, 1, 3), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pccPcedpDiscPceIPv4Address.setStatus('current')
pccPcedpDiscPceIPv6Address = MibTableColumn((1, 3, 6, 1, 3, 10000, 1, 1, 4, 1, 4), Ipv6Address()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pccPcedpDiscPceIPv6Address.setStatus('current')
pccPcedpDiscPceTime = MibTableColumn((1, 3, 6, 1, 3, 10000, 1, 1, 4, 1, 5), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pccPcedpDiscPceTime.setStatus('current')
pccPcedpDiscPceLastUpdated = MibTableColumn((1, 3, 6, 1, 3, 10000, 1, 1, 4, 1, 6), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pccPcedpDiscPceLastUpdated.setStatus('current')
pccPcedpDiscActTable = MibTable((1, 3, 6, 1, 3, 10000, 1, 1, 5), )
if mibBuilder.loadTexts: pccPcedpDiscActTable.setStatus('current')
pccPcedpDiscActEntry = MibTableRow((1, 3, 6, 1, 3, 10000, 1, 1, 5, 1), ).setIndexNames((0, "PCC-PCEDP-MIB", "pccPcedpDiscPceIndex"))
if mibBuilder.loadTexts: pccPcedpDiscActEntry.setStatus('current')
pccPcedpDiscActCongestion = MibTableColumn((1, 3, 6, 1, 3, 10000, 1, 1, 5, 1, 1), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pccPcedpDiscActCongestion.setStatus('current')
pccPcedpDiscActCongestionDuration = MibTableColumn((1, 3, 6, 1, 3, 10000, 1, 1, 5, 1, 2), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pccPcedpDiscActCongestionDuration.setStatus('current')
pccPcedpCapabilityObjects = MibIdentifier((1, 3, 6, 1, 3, 10000, 1, 2))
pccPcedpCapPathScopeTable = MibTable((1, 3, 6, 1, 3, 10000, 1, 2, 1), )
if mibBuilder.loadTexts: pccPcedpCapPathScopeTable.setStatus('current')
pccPcedpCapPathScopeEntry = MibTableRow((1, 3, 6, 1, 3, 10000, 1, 2, 1, 1), ).setIndexNames((0, "PCC-PCEDP-MIB", "pccPcedpDiscPceIndex"))
if mibBuilder.loadTexts: pccPcedpCapPathScopeEntry.setStatus('current')
pccPcedpCapPathScopeIntraArea = MibTableColumn((1, 3, 6, 1, 3, 10000, 1, 2, 1, 1, 1), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pccPcedpCapPathScopeIntraArea.setStatus('current')
pccPcedpCapPathScopeInterArea = MibTableColumn((1, 3, 6, 1, 3, 10000, 1, 2, 1, 1, 2), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pccPcedpCapPathScopeInterArea.setStatus('current')
pccPcedpCapPathScopeDefaultInterArea = MibTableColumn((1, 3, 6, 1, 3, 10000, 1, 2, 1, 1, 3), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pccPcedpCapPathScopeDefaultInterArea.setStatus('current')
pccPcedpCapPathScopeInterAS = MibTableColumn((1, 3, 6, 1, 3, 10000, 1, 2, 1, 1, 4), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pccPcedpCapPathScopeInterAS.setStatus('current')
pccPcedpCapPathScopeDefaultInterAS = MibTableColumn((1, 3, 6, 1, 3, 10000, 1, 2, 1, 1, 5), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pccPcedpCapPathScopeDefaultInterAS.setStatus('current')
pccPcedpCapPathScopeInterLayer = MibTableColumn((1, 3, 6, 1, 3, 10000, 1, 2, 1, 1, 6), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pccPcedpCapPathScopeInterLayer.setStatus('current')
pccPcedpCapPathScopePrefIntraArea = MibTableColumn((1, 3, 6, 1, 3, 10000, 1, 2, 1, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pccPcedpCapPathScopePrefIntraArea.setStatus('current')
pccPcedpCapPathScopePrefInterArea = MibTableColumn((1, 3, 6, 1, 3, 10000, 1, 2, 1, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pccPcedpCapPathScopePrefInterArea.setStatus('current')
pccPcedpCapPathScopePrefInterAS = MibTableColumn((1, 3, 6, 1, 3, 10000, 1, 2, 1, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pccPcedpCapPathScopePrefInterAS.setStatus('current')
pccPcedpCapPathScopePrefInterLayer = MibTableColumn((1, 3, 6, 1, 3, 10000, 1, 2, 1, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pccPcedpCapPathScopePrefInterLayer.setStatus('current')
pccPcedpCapDomainTable = MibTable((1, 3, 6, 1, 3, 10000, 1, 2, 2), )
if mibBuilder.loadTexts: pccPcedpCapDomainTable.setStatus('current')
pccPcedpCapDomainEntry = MibTableRow((1, 3, 6, 1, 3, 10000, 1, 2, 2, 1), ).setIndexNames((0, "PCC-PCEDP-MIB", "pccPcedpDiscPceIndex"), (0, "PCC-PCEDP-MIB", "pccPcedpCapDomainIndex"))
if mibBuilder.loadTexts: pccPcedpCapDomainEntry.setStatus('current')
pccPcedpCapDomainIndex = MibTableColumn((1, 3, 6, 1, 3, 10000, 1, 2, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647)))
if mibBuilder.loadTexts: pccPcedpCapDomainIndex.setStatus('current')
pccPcedpCapDomainIDType = MibTableColumn((1, 3, 6, 1, 3, 10000, 1, 2, 2, 1, 2), AddressFamilyNumbers()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pccPcedpCapDomainIDType.setStatus('current')
pccPcedpCapDomainID = MibTableColumn((1, 3, 6, 1, 3, 10000, 1, 2, 2, 1, 3), PccPceDpRoutingDomainID()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pccPcedpCapDomainID.setStatus('current')
pccPcedpCapDestDomainTable = MibTable((1, 3, 6, 1, 3, 10000, 1, 2, 3), )
if mibBuilder.loadTexts: pccPcedpCapDestDomainTable.setStatus('current')
pccPcedpCapDestDomainEntry = MibTableRow((1, 3, 6, 1, 3, 10000, 1, 2, 3, 1), ).setIndexNames((0, "PCC-PCEDP-MIB", "pccPcedpDiscPceIndex"), (0, "PCC-PCEDP-MIB", "pccPcedpCapDestDomainIndex"))
if mibBuilder.loadTexts: pccPcedpCapDestDomainEntry.setStatus('current')
pccPcedpCapDestDomainIndex = MibTableColumn((1, 3, 6, 1, 3, 10000, 1, 2, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647)))
if mibBuilder.loadTexts: pccPcedpCapDestDomainIndex.setStatus('current')
pccPcedpCapDestDomainIDType = MibTableColumn((1, 3, 6, 1, 3, 10000, 1, 2, 3, 1, 2), AddressFamilyNumbers()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pccPcedpCapDestDomainIDType.setStatus('current')
pccPcedpCapDestDomainID = MibTableColumn((1, 3, 6, 1, 3, 10000, 1, 2, 3, 1, 3), PccPceDpRoutingDomainID()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pccPcedpCapDestDomainID.setStatus('current')
pccPcedpPceActivityGroup = MibIdentifier((1, 3, 6, 1, 3, 10000, 1, 3))
pccPcedpConformance = MibIdentifier((1, 3, 6, 1, 3, 10000, 2))
pccPcedpGroups = MibIdentifier((1, 3, 6, 1, 3, 10000, 2, 1))
pccPcedpCompliances = MibIdentifier((1, 3, 6, 1, 3, 10000, 2, 2))
pccPcedpGeneralPceInformation = ModuleCompliance((1, 3, 6, 1, 3, 10000, 2, 2, 1)).setObjects()

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    pccPcedpGeneralPceInformation = pccPcedpGeneralPceInformation.setStatus('current')
pccPcedpDetailledPceInformation = ModuleCompliance((1, 3, 6, 1, 3, 10000, 2, 2, 2)).setObjects()

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    pccPcedpDetailledPceInformation = pccPcedpDetailledPceInformation.setStatus('current')
mibBuilder.exportSymbols("PCC-PCEDP-MIB", pccPcedpCapDomainTable=pccPcedpCapDomainTable, pccPcedpCapDestDomainTable=pccPcedpCapDestDomainTable, PccPceDpRoutingDomainID=PccPceDpRoutingDomainID, pccPcedpDiscAdminStatus=pccPcedpDiscAdminStatus, pccPcedpCapPathScopeTable=pccPcedpCapPathScopeTable, pccPcedpConformance=pccPcedpConformance, pccPcedpCapPathScopePrefInterArea=pccPcedpCapPathScopePrefInterArea, pccPcedpCompliances=pccPcedpCompliances, pccPcedpCapDestDomainEntry=pccPcedpCapDestDomainEntry, pccPcedpCapPathScopeDefaultInterArea=pccPcedpCapPathScopeDefaultInterArea, pccPcedpCapDestDomainID=pccPcedpCapDestDomainID, pccPcedpPceActivityGroup=pccPcedpPceActivityGroup, pccPcedpDiscPceIPv4Address=pccPcedpDiscPceIPv4Address, pccPcedpCapPathScopeInterLayer=pccPcedpCapPathScopeInterLayer, pccPcedpNotifications=pccPcedpNotifications, pccPcedpMIBObjects=pccPcedpMIBObjects, pccPcedpDiscMechanism=pccPcedpDiscMechanism, pccPcedpDiscPceTable=pccPcedpDiscPceTable, pccPcedpCapPathScopeEntry=pccPcedpCapPathScopeEntry, pccPcedpCapPathScopeInterArea=pccPcedpCapPathScopeInterArea, pccPcedpDiscActEntry=pccPcedpDiscActEntry, pccPcedpCapDomainIndex=pccPcedpCapDomainIndex, pccPcedpDiscActCongestion=pccPcedpDiscActCongestion, pccPcedpCapDestDomainIndex=pccPcedpCapDestDomainIndex, pccPcedpCapDomainID=pccPcedpCapDomainID, pccPcedpMIB=pccPcedpMIB, pccPcedpDiscPceEntry=pccPcedpDiscPceEntry, pccPcedpDiscoveryObjects=pccPcedpDiscoveryObjects, pccPcedpCapPathScopeInterAS=pccPcedpCapPathScopeInterAS, pccPcedpDiscActivePCEs=pccPcedpDiscActivePCEs, pccPcedpDiscPceIndex=pccPcedpDiscPceIndex, pccPcedpDiscPceTime=pccPcedpDiscPceTime, PYSNMP_MODULE_ID=pccPcedpMIB, pccPcedpCapPathScopeIntraArea=pccPcedpCapPathScopeIntraArea, pccPcedpCapPathScopePrefInterAS=pccPcedpCapPathScopePrefInterAS, pccPcedpCapabilityObjects=pccPcedpCapabilityObjects, pccPcedpCapPathScopePrefIntraArea=pccPcedpCapPathScopePrefIntraArea, pccPcedpDiscKnowPCEs=pccPcedpDiscKnowPCEs, pccPcedpCapPathScopePrefInterLayer=pccPcedpCapPathScopePrefInterLayer, pccPcedpDiscActCongestionDuration=pccPcedpDiscActCongestionDuration, pccPcedpCapDestDomainIDType=pccPcedpCapDestDomainIDType, pccPcedpDiscPceLastUpdated=pccPcedpDiscPceLastUpdated, pccPcedpGroups=pccPcedpGroups, pccPcedpGeneralPceInformation=pccPcedpGeneralPceInformation, pccPcedpDiscActTable=pccPcedpDiscActTable, pccPcedpDetailledPceInformation=pccPcedpDetailledPceInformation, pccPcedpCapDomainEntry=pccPcedpCapDomainEntry, pccPcedpCapDomainIDType=pccPcedpCapDomainIDType, pccPcedpDiscPceIPv6Address=pccPcedpDiscPceIPv6Address, pccPcedpCapPathScopeDefaultInterAS=pccPcedpCapPathScopeDefaultInterAS)
