#
# PySNMP MIB module EICON-MIB-SERVER (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/EICON-MIB-SERVER
# Produced by pysmi-0.3.4 at Mon Apr 29 18:45:09 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, OctetString, Integer = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "OctetString", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsUnion, ValueSizeConstraint, SingleValueConstraint, ValueRangeConstraint, ConstraintsIntersection = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsUnion", "ValueSizeConstraint", "SingleValueConstraint", "ValueRangeConstraint", "ConstraintsIntersection")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
sysName, = mibBuilder.importSymbols("SNMPv2-MIB", "sysName")
ObjectIdentity, MibScalar, MibTable, MibTableRow, MibTableColumn, enterprises, MibIdentifier, NotificationType, NotificationType, ModuleIdentity, Bits, Counter32, TimeTicks, Gauge32, Counter64, IpAddress, iso, Unsigned32, Integer32 = mibBuilder.importSymbols("SNMPv2-SMI", "ObjectIdentity", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "enterprises", "MibIdentifier", "NotificationType", "NotificationType", "ModuleIdentity", "Bits", "Counter32", "TimeTicks", "Gauge32", "Counter64", "IpAddress", "iso", "Unsigned32", "Integer32")
DisplayString, PhysAddress, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "PhysAddress", "TextualConvention")
eicon = MibIdentifier((1, 3, 6, 1, 4, 1, 434))
management = MibIdentifier((1, 3, 6, 1, 4, 1, 434, 2))
mibv2 = MibIdentifier((1, 3, 6, 1, 4, 1, 434, 2, 2))
module = MibIdentifier((1, 3, 6, 1, 4, 1, 434, 2, 2, 4))
class OperState(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))
    namedValues = NamedValues(("other", 1), ("disabled", 2), ("ready", 3), ("active", 4), ("busy", 5))

class AdminState(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))
    namedValues = NamedValues(("start", 1), ("stop", 2), ("dump", 3), ("test", 4), ("invalid", 5))

class ActionState(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3))
    namedValues = NamedValues(("done", 1), ("failed", 2), ("in-progress", 3))

class EiconCardType(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37))
    namedValues = NamedValues(("ect-NONE", 1), ("ect-PC-NA", 2), ("ect-PC-DNA", 3), ("ect-PC-SPNA", 4), ("ect-MC-SPCC", 5), ("ect-PC-DPNA", 6), ("ect-PC-EC", 7), ("ect-PC-ECHSI", 8), ("ect-PC-QPNA", 9), ("ect-PC-MPNA", 10), ("ect-MC-EC", 11), ("ect-MC-HSI", 12), ("ect-XX-DIGI", 13), ("ect-MC-IMC", 14), ("ect-PC-IMC", 15), ("ect-MC-MPNA", 16), ("ect-PC-HSI1M", 17), ("ect-MC-HSI1M", 18), ("ect-NB-HSI1M", 19), ("ect-PC-EC1M", 20), ("ect-MC-EC1M", 21), ("ect-NB-EC1M", 22), ("ect-NB-IMC", 23), ("ect-NB-SPCC", 24), ("ect-NB-EC", 25), ("ect-PC-ACC8", 26), ("ect-PC-ISDN", 27), ("ect-PC-DPNA2M", 28), ("ect-PC-MPNA2M", 29), ("ect-MC-MPNA2M", 30), ("ect-MC-SPCC2", 31), ("ect-PP-IMC", 32), ("ect-MC-ISDN", 33), ("ect-PP-EC", 34), ("ect-PC-HSI2", 35), ("ect-PC-S51", 36), ("ect-PC-S52", 37))

class ControlOnOff(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3))
    namedValues = NamedValues(("stop", 1), ("start", 2), ("invalid", 3))

class CardRef(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ValueRangeConstraint(1, 6)

class PortRef(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ValueRangeConstraint(1, 48)

class PortName(DisplayString):
    subtypeSpec = DisplayString.subtypeSpec + ValueSizeConstraint(1, 15)

class PositiveInteger(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ValueRangeConstraint(0, 2147483647)

server = MibIdentifier((1, 3, 6, 1, 4, 1, 434, 2, 2, 1))
srvAdminStateCtr = MibScalar((1, 3, 6, 1, 4, 1, 434, 2, 2, 1, 1), AdminState()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: srvAdminStateCtr.setStatus('mandatory')
srvOsName = MibScalar((1, 3, 6, 1, 4, 1, 434, 2, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("other", 1), ("dos", 2), ("os2", 3), ("unix", 4), ("mac", 5), ("windows", 6), ("netware", 7), ("nt", 8)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: srvOsName.setStatus('mandatory')
srvOsVersion = MibScalar((1, 3, 6, 1, 4, 1, 434, 2, 2, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: srvOsVersion.setStatus('mandatory')
srvNosName = MibScalar((1, 3, 6, 1, 4, 1, 434, 2, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("other", 1), ("netWare", 2), ("lanManager", 3), ("vines", 4), ("lanServer", 5), ("genericNetBIOS", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: srvNosName.setStatus('mandatory')
srvNosVersion = MibScalar((1, 3, 6, 1, 4, 1, 434, 2, 2, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: srvNosVersion.setStatus('mandatory')
srvLanShellInfo = MibScalar((1, 3, 6, 1, 4, 1, 434, 2, 2, 1, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: srvLanShellInfo.setStatus('mandatory')
srvBusType = MibScalar((1, 3, 6, 1, 4, 1, 434, 2, 2, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("other", 1), ("isa", 2), ("eisa", 3), ("mca", 4), ("parallelPort", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: srvBusType.setStatus('mandatory')
srvCpuType = MibScalar((1, 3, 6, 1, 4, 1, 434, 2, 2, 1, 8), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: srvCpuType.setStatus('mandatory')
srvCpuSpeed = MibScalar((1, 3, 6, 1, 4, 1, 434, 2, 2, 1, 9), PositiveInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: srvCpuSpeed.setStatus('mandatory')
srvStdMemory = MibScalar((1, 3, 6, 1, 4, 1, 434, 2, 2, 1, 10), PositiveInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: srvStdMemory.setStatus('mandatory')
srvExtendMemory = MibScalar((1, 3, 6, 1, 4, 1, 434, 2, 2, 1, 11), PositiveInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: srvExtendMemory.setStatus('mandatory')
srvExpandedMemory = MibScalar((1, 3, 6, 1, 4, 1, 434, 2, 2, 1, 12), PositiveInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: srvExpandedMemory.setStatus('mandatory')
srvVideoAdaptType = MibScalar((1, 3, 6, 1, 4, 1, 434, 2, 2, 1, 13), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: srvVideoAdaptType.setStatus('mandatory')
srvHardDisk = MibScalar((1, 3, 6, 1, 4, 1, 434, 2, 2, 1, 14), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: srvHardDisk.setStatus('mandatory')
srvHardDiskSize = MibScalar((1, 3, 6, 1, 4, 1, 434, 2, 2, 1, 15), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: srvHardDiskSize.setStatus('mandatory')
srvNotePad = MibScalar((1, 3, 6, 1, 4, 1, 434, 2, 2, 1, 16), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 512))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: srvNotePad.setStatus('mandatory')
srvAgentMajorVersion = MibScalar((1, 3, 6, 1, 4, 1, 434, 2, 2, 1, 17), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: srvAgentMajorVersion.setStatus('mandatory')
srvAgentMinorVersion = MibScalar((1, 3, 6, 1, 4, 1, 434, 2, 2, 1, 18), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: srvAgentMinorVersion.setStatus('mandatory')
srvAgentMaxOfLostNMPHeartB = MibScalar((1, 3, 6, 1, 4, 1, 434, 2, 2, 1, 19), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: srvAgentMaxOfLostNMPHeartB.setStatus('mandatory')
srvAgentHeartBeatPeriod = MibScalar((1, 3, 6, 1, 4, 1, 434, 2, 2, 1, 20), Integer32().subtype(subtypeSpec=ValueRangeConstraint(60, 3600))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: srvAgentHeartBeatPeriod.setStatus('mandatory')
srvAgentPollFrequency = MibScalar((1, 3, 6, 1, 4, 1, 434, 2, 2, 1, 21), Integer32().subtype(subtypeSpec=ValueRangeConstraint(60, 3600))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: srvAgentPollFrequency.setStatus('mandatory')
srvAgentAlarmsFilterValue = MibScalar((1, 3, 6, 1, 4, 1, 434, 2, 2, 1, 22), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: srvAgentAlarmsFilterValue.setStatus('mandatory')
srvDomainName = MibScalar((1, 3, 6, 1, 4, 1, 434, 2, 2, 1, 23), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 48))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: srvDomainName.setStatus('mandatory')
srvDomainConfigDir = MibScalar((1, 3, 6, 1, 4, 1, 434, 2, 2, 1, 24), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 256))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: srvDomainConfigDir.setStatus('mandatory')
srvNbOfLanCards = MibScalar((1, 3, 6, 1, 4, 1, 434, 2, 2, 1, 25), CardRef()).setMaxAccess("readonly")
if mibBuilder.loadTexts: srvNbOfLanCards.setStatus('mandatory')
srvLanCardTable = MibTable((1, 3, 6, 1, 4, 1, 434, 2, 2, 1, 26), )
if mibBuilder.loadTexts: srvLanCardTable.setStatus('mandatory')
srvLanCardEntry = MibTableRow((1, 3, 6, 1, 4, 1, 434, 2, 2, 1, 26, 1), ).setIndexNames((0, "EICON-MIB-SERVER", "srvLanCardIndex"))
if mibBuilder.loadTexts: srvLanCardEntry.setStatus('mandatory')
srvLanCardIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 1, 26, 1, 1), CardRef()).setMaxAccess("readonly")
if mibBuilder.loadTexts: srvLanCardIndex.setStatus('mandatory')
srvLanCardCFGMajorVer = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 1, 26, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: srvLanCardCFGMajorVer.setStatus('mandatory')
srvLanCardCFGMinorVer = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 1, 26, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: srvLanCardCFGMinorVer.setStatus('mandatory')
srvLanCardNodeAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 1, 26, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: srvLanCardNodeAddr.setStatus('mandatory')
srvLanCardMaxSize = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 1, 26, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: srvLanCardMaxSize.setStatus('mandatory')
srvLanCardName = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 1, 26, 1, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: srvLanCardName.setStatus('mandatory')
srvLanCardShortName = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 1, 26, 1, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: srvLanCardShortName.setStatus('mandatory')
srvLanCardFrameType = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 1, 26, 1, 8), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: srvLanCardFrameType.setStatus('mandatory')
srvLanCardDrvMajorVer = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 1, 26, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: srvLanCardDrvMajorVer.setStatus('mandatory')
srvLanCardDrvMinorVer = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 1, 26, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: srvLanCardDrvMinorVer.setStatus('mandatory')
srvLanCardMemoryAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 1, 26, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: srvLanCardMemoryAddr.setStatus('mandatory')
srvLanCardInterrupt = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 1, 26, 1, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: srvLanCardInterrupt.setStatus('mandatory')
srvLanCardDMAUsage = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 1, 26, 1, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: srvLanCardDMAUsage.setStatus('mandatory')
srvNbOfSoftPackage = MibScalar((1, 3, 6, 1, 4, 1, 434, 2, 2, 1, 27), PositiveInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: srvNbOfSoftPackage.setStatus('mandatory')
srvSoftPackageTable = MibTable((1, 3, 6, 1, 4, 1, 434, 2, 2, 1, 28), )
if mibBuilder.loadTexts: srvSoftPackageTable.setStatus('mandatory')
srvPackageEntry = MibTableRow((1, 3, 6, 1, 4, 1, 434, 2, 2, 1, 28, 1), ).setIndexNames((0, "EICON-MIB-SERVER", "srvProductIndex"))
if mibBuilder.loadTexts: srvPackageEntry.setStatus('mandatory')
srvProductIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 1, 28, 1, 1), PositiveInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: srvProductIndex.setStatus('mandatory')
srvProductName = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 1, 28, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: srvProductName.setStatus('mandatory')
srvProductVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 1, 28, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: srvProductVersion.setStatus('mandatory')
srvProductDate = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 1, 28, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: srvProductDate.setStatus('mandatory')
srvProductConfigured = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 1, 28, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: srvProductConfigured.setStatus('mandatory')
srvCfgNbOfEiconCards = MibScalar((1, 3, 6, 1, 4, 1, 434, 2, 2, 1, 29), CardRef()).setMaxAccess("readonly")
if mibBuilder.loadTexts: srvCfgNbOfEiconCards.setStatus('mandatory')
srvCfgEiconCardTable = MibTable((1, 3, 6, 1, 4, 1, 434, 2, 2, 1, 30), )
if mibBuilder.loadTexts: srvCfgEiconCardTable.setStatus('mandatory')
srvCfgEiconCardEntry = MibTableRow((1, 3, 6, 1, 4, 1, 434, 2, 2, 1, 30, 1), ).setIndexNames((0, "EICON-MIB-SERVER", "srvCfgECIndex"))
if mibBuilder.loadTexts: srvCfgEiconCardEntry.setStatus('mandatory')
srvCfgECIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 1, 30, 1, 1), CardRef()).setMaxAccess("readonly")
if mibBuilder.loadTexts: srvCfgECIndex.setStatus('mandatory')
srvCfgECMemAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 1, 30, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: srvCfgECMemAddr.setStatus('mandatory')
srvCfgECIoAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 1, 30, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: srvCfgECIoAddr.setStatus('mandatory')
srvCfgECIntrLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 1, 30, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: srvCfgECIntrLevel.setStatus('mandatory')
srvCfgECNbOfPorts = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 1, 30, 1, 5), PortRef()).setMaxAccess("readonly")
if mibBuilder.loadTexts: srvCfgECNbOfPorts.setStatus('mandatory')
srvCfgECSlotNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 1, 30, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 8))).setMaxAccess("readonly")
if mibBuilder.loadTexts: srvCfgECSlotNumber.setStatus('mandatory')
srvCfgECOptModule = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 1, 30, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("mod-DPSM", 1), ("mod-HSIM", 2), ("mod-None", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: srvCfgECOptModule.setStatus('mandatory')
srvCfgECAutoActivate = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 1, 30, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: srvCfgECAutoActivate.setStatus('mandatory')
srvCfgNbOfPorts = MibScalar((1, 3, 6, 1, 4, 1, 434, 2, 2, 1, 31), PortRef()).setMaxAccess("readonly")
if mibBuilder.loadTexts: srvCfgNbOfPorts.setStatus('mandatory')
srvCfgPortTable = MibTable((1, 3, 6, 1, 4, 1, 434, 2, 2, 1, 32), )
if mibBuilder.loadTexts: srvCfgPortTable.setStatus('mandatory')
srvCfgPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 434, 2, 2, 1, 32, 1), ).setIndexNames((0, "EICON-MIB-SERVER", "srvCfgPortIndex"))
if mibBuilder.loadTexts: srvCfgPortEntry.setStatus('mandatory')
srvCfgPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 1, 32, 1, 1), PortRef()).setMaxAccess("readonly")
if mibBuilder.loadTexts: srvCfgPortIndex.setStatus('mandatory')
srvCfgPortLanaNo = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 1, 32, 1, 2), PortRef()).setMaxAccess("readonly")
if mibBuilder.loadTexts: srvCfgPortLanaNo.setStatus('mandatory')
srvCfgPortName = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 1, 32, 1, 3), PortName()).setMaxAccess("readonly")
if mibBuilder.loadTexts: srvCfgPortName.setStatus('mandatory')
srvDescr = MibScalar((1, 3, 6, 1, 4, 1, 434, 2, 2, 1, 33), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: srvDescr.setStatus('mandatory')
srvObjectID = MibScalar((1, 3, 6, 1, 4, 1, 434, 2, 2, 1, 34), ObjectIdentifier()).setMaxAccess("readonly")
if mibBuilder.loadTexts: srvObjectID.setStatus('mandatory')
srvUpTime = MibScalar((1, 3, 6, 1, 4, 1, 434, 2, 2, 1, 35), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: srvUpTime.setStatus('mandatory')
srvContact = MibScalar((1, 3, 6, 1, 4, 1, 434, 2, 2, 1, 36), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: srvContact.setStatus('mandatory')
srvName = MibScalar((1, 3, 6, 1, 4, 1, 434, 2, 2, 1, 37), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: srvName.setStatus('mandatory')
srvLocation = MibScalar((1, 3, 6, 1, 4, 1, 434, 2, 2, 1, 38), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: srvLocation.setStatus('mandatory')
srvServices = MibScalar((1, 3, 6, 1, 4, 1, 434, 2, 2, 1, 39), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 127))).setMaxAccess("readonly")
if mibBuilder.loadTexts: srvServices.setStatus('mandatory')
srvIfNumber = MibScalar((1, 3, 6, 1, 4, 1, 434, 2, 2, 1, 40), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: srvIfNumber.setStatus('mandatory')
srvIfTable = MibTable((1, 3, 6, 1, 4, 1, 434, 2, 2, 1, 41), )
if mibBuilder.loadTexts: srvIfTable.setStatus('mandatory')
srvIfEntry = MibTableRow((1, 3, 6, 1, 4, 1, 434, 2, 2, 1, 41, 1), ).setIndexNames((0, "EICON-MIB-SERVER", "srvIfIndex"))
if mibBuilder.loadTexts: srvIfEntry.setStatus('mandatory')
srvIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 1, 41, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: srvIfIndex.setStatus('mandatory')
srvIfDescr = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 1, 41, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: srvIfDescr.setStatus('mandatory')
srvIfType = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 1, 41, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40))).clone(namedValues=NamedValues(("other", 1), ("regular1822", 2), ("hdh1822", 3), ("ddn-x25", 4), ("rfc877-x25", 5), ("ethernet-csmacd", 6), ("iso88023-csmacd", 7), ("iso88024-tokenBus", 8), ("iso88025-tokenRing", 9), ("iso88026-man", 10), ("starLan", 11), ("proteon-10Mbit", 12), ("proteon-80Mbit", 13), ("hyperchannel", 14), ("fddi", 15), ("lapb", 16), ("sdlc", 17), ("ds1", 18), ("e1", 19), ("basicISDN", 20), ("primaryISDN", 21), ("propPointToPointSerial", 22), ("ppp", 23), ("softwareLoopback", 24), ("eon", 25), ("ethernet-3Mbit", 26), ("nsip", 27), ("slip", 28), ("ultra", 29), ("ds3", 30), ("sip", 31), ("frame-relay", 32), ("appc", 33), ("snafm", 34), ("snapc", 35), ("xport-iso", 36), ("xport-tgx", 37), ("netview", 38), ("llc", 39), ("snafr", 40)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: srvIfType.setStatus('mandatory')
srvIfMtu = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 1, 41, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: srvIfMtu.setStatus('mandatory')
srvIfSpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 1, 41, 1, 5), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: srvIfSpeed.setStatus('mandatory')
srvIfPhysAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 1, 41, 1, 6), PhysAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: srvIfPhysAddress.setStatus('mandatory')
srvIfAdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 1, 41, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("up", 1), ("down", 2), ("testing", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: srvIfAdminStatus.setStatus('mandatory')
srvIfOperStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 1, 41, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("up", 1), ("down", 2), ("testing", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: srvIfOperStatus.setStatus('mandatory')
srvIfLastChange = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 1, 41, 1, 9), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: srvIfLastChange.setStatus('mandatory')
srvIfInOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 1, 41, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: srvIfInOctets.setStatus('mandatory')
srvIfInUcastPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 1, 41, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: srvIfInUcastPkts.setStatus('mandatory')
srvIfInNUcastPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 1, 41, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: srvIfInNUcastPkts.setStatus('mandatory')
srvIfInDiscards = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 1, 41, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: srvIfInDiscards.setStatus('mandatory')
srvIfInErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 1, 41, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: srvIfInErrors.setStatus('mandatory')
srvIfInUnknownProtos = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 1, 41, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: srvIfInUnknownProtos.setStatus('mandatory')
srvIfOutOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 1, 41, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: srvIfOutOctets.setStatus('mandatory')
srvIfOutUcastPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 1, 41, 1, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: srvIfOutUcastPkts.setStatus('mandatory')
srvIfOutNUcastPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 1, 41, 1, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: srvIfOutNUcastPkts.setStatus('mandatory')
srvIfOutDiscards = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 1, 41, 1, 19), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: srvIfOutDiscards.setStatus('mandatory')
srvIfOutErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 1, 41, 1, 20), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: srvIfOutErrors.setStatus('mandatory')
srvIfOutQLen = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 1, 41, 1, 21), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: srvIfOutQLen.setStatus('mandatory')
srvIfSpecific = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 1, 41, 1, 22), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: srvIfSpecific.setStatus('mandatory')
srvModulesOperStates = MibScalar((1, 3, 6, 1, 4, 1, 434, 2, 2, 1, 42), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readonly")
if mibBuilder.loadTexts: srvModulesOperStates.setStatus('mandatory')
srvInstallDirName = MibScalar((1, 3, 6, 1, 4, 1, 434, 2, 2, 1, 43), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 50))).setMaxAccess("readonly")
if mibBuilder.loadTexts: srvInstallDirName.setStatus('mandatory')
srvCurrDirName = MibScalar((1, 3, 6, 1, 4, 1, 434, 2, 2, 1, 44), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 50))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: srvCurrDirName.setStatus('mandatory')
srvDirTable = MibTable((1, 3, 6, 1, 4, 1, 434, 2, 2, 1, 45), )
if mibBuilder.loadTexts: srvDirTable.setStatus('mandatory')
srvDirEntry = MibTableRow((1, 3, 6, 1, 4, 1, 434, 2, 2, 1, 45, 1), ).setIndexNames((0, "EICON-MIB-SERVER", "srvIfIndex"))
if mibBuilder.loadTexts: srvDirEntry.setStatus('mandatory')
srvDirIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 1, 45, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: srvDirIndex.setStatus('mandatory')
srvDirFilename = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 1, 45, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: srvDirFilename.setStatus('mandatory')
srvDirFileAttribute = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 1, 45, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: srvDirFileAttribute.setStatus('mandatory')
srvDirFileAccessTime = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 1, 45, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: srvDirFileAccessTime.setStatus('mandatory')
srvDirFileSize = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 1, 45, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: srvDirFileSize.setStatus('mandatory')
srvTrapHeartbeat = NotificationType((1, 3, 6, 1, 4, 1, 434) + (0,11)).setObjects(("SNMPv2-MIB", "sysName"))
srvTrapInternal = NotificationType((1, 3, 6, 1, 4, 1, 434) + (0,12)).setObjects(("SNMPv2-MIB", "sysName"))
mibBuilder.exportSymbols("EICON-MIB-SERVER", srvAgentAlarmsFilterValue=srvAgentAlarmsFilterValue, srvPackageEntry=srvPackageEntry, EiconCardType=EiconCardType, srvProductName=srvProductName, srvCfgECSlotNumber=srvCfgECSlotNumber, srvSoftPackageTable=srvSoftPackageTable, srvLanCardDMAUsage=srvLanCardDMAUsage, srvCfgPortEntry=srvCfgPortEntry, srvCfgECNbOfPorts=srvCfgECNbOfPorts, srvCfgPortName=srvCfgPortName, srvAgentHeartBeatPeriod=srvAgentHeartBeatPeriod, srvCfgNbOfEiconCards=srvCfgNbOfEiconCards, srvIfOutDiscards=srvIfOutDiscards, srvIfSpeed=srvIfSpeed, srvNosName=srvNosName, srvTrapInternal=srvTrapInternal, srvAgentPollFrequency=srvAgentPollFrequency, srvIfSpecific=srvIfSpecific, ControlOnOff=ControlOnOff, srvLanShellInfo=srvLanShellInfo, srvIfInDiscards=srvIfInDiscards, srvNosVersion=srvNosVersion, srvHardDiskSize=srvHardDiskSize, management=management, srvTrapHeartbeat=srvTrapHeartbeat, srvDomainName=srvDomainName, srvCfgECAutoActivate=srvCfgECAutoActivate, srvName=srvName, srvDirTable=srvDirTable, srvLanCardEntry=srvLanCardEntry, srvLanCardNodeAddr=srvLanCardNodeAddr, srvCfgPortIndex=srvCfgPortIndex, srvDomainConfigDir=srvDomainConfigDir, srvBusType=srvBusType, srvProductConfigured=srvProductConfigured, srvIfIndex=srvIfIndex, srvNbOfSoftPackage=srvNbOfSoftPackage, srvDescr=srvDescr, OperState=OperState, srvDirFileAttribute=srvDirFileAttribute, srvServices=srvServices, srvProductDate=srvProductDate, srvIfOutOctets=srvIfOutOctets, srvDirFileAccessTime=srvDirFileAccessTime, srvIfPhysAddress=srvIfPhysAddress, srvLanCardName=srvLanCardName, PortRef=PortRef, srvIfInUcastPkts=srvIfInUcastPkts, srvLanCardCFGMinorVer=srvLanCardCFGMinorVer, srvLanCardFrameType=srvLanCardFrameType, srvCfgECIntrLevel=srvCfgECIntrLevel, srvIfInUnknownProtos=srvIfInUnknownProtos, srvUpTime=srvUpTime, srvCfgECOptModule=srvCfgECOptModule, srvProductIndex=srvProductIndex, srvIfEntry=srvIfEntry, srvNotePad=srvNotePad, srvIfInNUcastPkts=srvIfInNUcastPkts, srvCfgECMemAddr=srvCfgECMemAddr, srvLanCardShortName=srvLanCardShortName, srvDirFileSize=srvDirFileSize, srvDirEntry=srvDirEntry, srvIfMtu=srvIfMtu, srvInstallDirName=srvInstallDirName, srvDirIndex=srvDirIndex, srvIfType=srvIfType, srvIfInErrors=srvIfInErrors, mibv2=mibv2, ActionState=ActionState, CardRef=CardRef, srvCfgPortLanaNo=srvCfgPortLanaNo, srvCfgNbOfPorts=srvCfgNbOfPorts, srvAgentMaxOfLostNMPHeartB=srvAgentMaxOfLostNMPHeartB, srvModulesOperStates=srvModulesOperStates, srvLanCardDrvMajorVer=srvLanCardDrvMajorVer, srvIfAdminStatus=srvIfAdminStatus, srvLanCardMaxSize=srvLanCardMaxSize, AdminState=AdminState, srvProductVersion=srvProductVersion, srvObjectID=srvObjectID, srvIfInOctets=srvIfInOctets, srvDirFilename=srvDirFilename, srvOsVersion=srvOsVersion, srvLanCardMemoryAddr=srvLanCardMemoryAddr, eicon=eicon, srvCurrDirName=srvCurrDirName, srvIfNumber=srvIfNumber, srvLocation=srvLocation, srvExpandedMemory=srvExpandedMemory, srvLanCardInterrupt=srvLanCardInterrupt, srvIfOutUcastPkts=srvIfOutUcastPkts, srvHardDisk=srvHardDisk, srvCfgECIoAddr=srvCfgECIoAddr, srvCfgECIndex=srvCfgECIndex, srvCfgPortTable=srvCfgPortTable, srvCfgEiconCardEntry=srvCfgEiconCardEntry, srvCfgEiconCardTable=srvCfgEiconCardTable, srvIfDescr=srvIfDescr, srvIfOutNUcastPkts=srvIfOutNUcastPkts, srvIfOutErrors=srvIfOutErrors, PortName=PortName, srvIfLastChange=srvIfLastChange, srvIfOperStatus=srvIfOperStatus, srvExtendMemory=srvExtendMemory, PositiveInteger=PositiveInteger, srvLanCardDrvMinorVer=srvLanCardDrvMinorVer, srvAgentMinorVersion=srvAgentMinorVersion, srvLanCardIndex=srvLanCardIndex, srvVideoAdaptType=srvVideoAdaptType, srvIfOutQLen=srvIfOutQLen, srvAgentMajorVersion=srvAgentMajorVersion, module=module, srvAdminStateCtr=srvAdminStateCtr, srvOsName=srvOsName, srvLanCardTable=srvLanCardTable, srvNbOfLanCards=srvNbOfLanCards, srvLanCardCFGMajorVer=srvLanCardCFGMajorVer, srvCpuType=srvCpuType, server=server, srvCpuSpeed=srvCpuSpeed, srvIfTable=srvIfTable, srvStdMemory=srvStdMemory, srvContact=srvContact)
