#
# PySNMP MIB module WWP-LEOS-FLOW-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/WWP-LEOS-FLOW-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 21:31:09 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, Integer, OctetString = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "Integer", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
SingleValueConstraint, ConstraintsIntersection, ValueSizeConstraint, ValueRangeConstraint, ConstraintsUnion = mibBuilder.importSymbols("ASN1-REFINEMENT", "SingleValueConstraint", "ConstraintsIntersection", "ValueSizeConstraint", "ValueRangeConstraint", "ConstraintsUnion")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
Unsigned32, Bits, Integer32, ModuleIdentity, ObjectIdentity, Counter32, MibScalar, MibTable, MibTableRow, MibTableColumn, iso, IpAddress, NotificationType, MibIdentifier, Counter64, Gauge32, TimeTicks = mibBuilder.importSymbols("SNMPv2-SMI", "Unsigned32", "Bits", "Integer32", "ModuleIdentity", "ObjectIdentity", "Counter32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "iso", "IpAddress", "NotificationType", "MibIdentifier", "Counter64", "Gauge32", "TimeTicks")
RowStatus, MacAddress, TruthValue, DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "RowStatus", "MacAddress", "TruthValue", "DisplayString", "TextualConvention")
wwpModulesLeos, = mibBuilder.importSymbols("WWP-SMI", "wwpModulesLeos")
wwpLeosFlowMIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 6141, 2, 60, 6))
wwpLeosFlowMIB.setRevisions(('2012-03-29 00:00', '2011-02-02 00:00', '2008-06-16 17:00', '2001-04-03 17:00',))
if mibBuilder.loadTexts: wwpLeosFlowMIB.setLastUpdated('201203290000Z')
if mibBuilder.loadTexts: wwpLeosFlowMIB.setOrganization('Ciena, Inc')
class PriorityMapping(TextualConvention, OctetString):
    status = 'current'
    displayHint = '1x:'
    subtypeSpec = OctetString.subtypeSpec + ValueSizeConstraint(8, 8)
    fixedLength = 8

wwpLeosFlowMIBObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 6141, 2, 60, 6, 1))
wwpLeosFlow = MibIdentifier((1, 3, 6, 1, 4, 1, 6141, 2, 60, 6, 1, 1))
wwpLeosFlowNotifAttrs = MibIdentifier((1, 3, 6, 1, 4, 1, 6141, 2, 60, 6, 1, 2))
wwpLeosFlowNotificationPrefix = MibIdentifier((1, 3, 6, 1, 4, 1, 6141, 2, 60, 6, 2))
wwpLeosFlowNotifications = MibIdentifier((1, 3, 6, 1, 4, 1, 6141, 2, 60, 6, 2, 0))
wwpLeosFlowMIBConformance = MibIdentifier((1, 3, 6, 1, 4, 1, 6141, 2, 60, 6, 3))
wwpLeosFlowMIBCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 6141, 2, 60, 6, 3, 1))
wwpLeosFlowMIBGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 6141, 2, 60, 6, 3, 2))
wwpLeosFlowAgeTime = MibScalar((1, 3, 6, 1, 4, 1, 6141, 2, 60, 6, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(10, 1000000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wwpLeosFlowAgeTime.setStatus('current')
wwpLeosFlowAgeTimeState = MibScalar((1, 3, 6, 1, 4, 1, 6141, 2, 60, 6, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wwpLeosFlowAgeTimeState.setStatus('current')
wwpLeosFlowServiceLevelTable = MibTable((1, 3, 6, 1, 4, 1, 6141, 2, 60, 6, 1, 1, 3), )
if mibBuilder.loadTexts: wwpLeosFlowServiceLevelTable.setStatus('current')
wwpLeosFlowServiceLevelEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6141, 2, 60, 6, 1, 1, 3, 1), ).setIndexNames((0, "WWP-LEOS-FLOW-MIB", "wwpLeosFlowServiceLevelPort"), (0, "WWP-LEOS-FLOW-MIB", "wwpLeosFlowServiceLevelId"), (0, "WWP-LEOS-FLOW-MIB", "wwpLeosFlowServiceLevelDirection"))
if mibBuilder.loadTexts: wwpLeosFlowServiceLevelEntry.setStatus('current')
wwpLeosFlowServiceLevelDirection = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 6, 1, 1, 3, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("ingress", 1), ("egress", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosFlowServiceLevelDirection.setStatus('current')
wwpLeosFlowServiceLevelPort = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 6, 1, 1, 3, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosFlowServiceLevelPort.setStatus('current')
wwpLeosFlowServiceLevelId = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 6, 1, 1, 3, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosFlowServiceLevelId.setStatus('current')
wwpLeosFlowServiceLevelName = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 6, 1, 1, 3, 1, 4), DisplayString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: wwpLeosFlowServiceLevelName.setStatus('current')
wwpLeosFlowServiceLevelPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 6, 1, 1, 3, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: wwpLeosFlowServiceLevelPriority.setStatus('current')
wwpLeosFlowServiceLevelQueueSize = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 6, 1, 1, 3, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17))).clone(namedValues=NamedValues(("size0KB", 0), ("small", 1), ("medium", 2), ("large", 3), ("jumbo", 4), ("x5", 5), ("x6", 6), ("x7", 7), ("x8", 8), ("size16KB", 9), ("size32KB", 10), ("size64KB", 11), ("size128KB", 12), ("size256KB", 13), ("size512KB", 14), ("size1MB", 15), ("size2MB", 16), ("size4MB", 17)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: wwpLeosFlowServiceLevelQueueSize.setStatus('current')
wwpLeosFlowServiceLevelDropEligibility = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 6, 1, 1, 3, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: wwpLeosFlowServiceLevelDropEligibility.setStatus('current')
wwpLeosFlowServiceLevelShareEligibility = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 6, 1, 1, 3, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: wwpLeosFlowServiceLevelShareEligibility.setStatus('current')
wwpLeosFlowServiceLevelCirBW = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 6, 1, 1, 3, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: wwpLeosFlowServiceLevelCirBW.setStatus('current')
wwpLeosFlowServiceLevelPirBW = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 6, 1, 1, 3, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: wwpLeosFlowServiceLevelPirBW.setStatus('current')
wwpLeosFlowServiceStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 6, 1, 1, 3, 1, 11), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: wwpLeosFlowServiceStatus.setStatus('current')
wwpLeosFlowServiceRedCurveId = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 6, 1, 1, 3, 1, 12), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(5, 64))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: wwpLeosFlowServiceRedCurveId.setStatus('current')
wwpLeosFlowServiceLevelQueueSizeYellow = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 6, 1, 1, 3, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("size16KB", 1), ("size32KB", 2), ("size64KB", 3), ("size128KB", 4)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: wwpLeosFlowServiceLevelQueueSizeYellow.setStatus('current')
wwpLeosFlowServiceLevelQueueSizeRed = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 6, 1, 1, 3, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("size16KB", 1), ("size32KB", 2), ("size64KB", 3), ("size128KB", 4)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: wwpLeosFlowServiceLevelQueueSizeRed.setStatus('current')
wwpLeosFlowServiceLevelFlowGroup = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 6, 1, 1, 3, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: wwpLeosFlowServiceLevelFlowGroup.setStatus('current')
wwpLeosFlowServiceMappingTable = MibTable((1, 3, 6, 1, 4, 1, 6141, 2, 60, 6, 1, 1, 4), )
if mibBuilder.loadTexts: wwpLeosFlowServiceMappingTable.setStatus('deprecated')
wwpLeosFlowServiceMappingEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6141, 2, 60, 6, 1, 1, 4, 1), ).setIndexNames((0, "WWP-LEOS-FLOW-MIB", "wwpLeosFlowServiceMapVid"), (0, "WWP-LEOS-FLOW-MIB", "wwpLeosFlowServiceMapSrcPort"), (0, "WWP-LEOS-FLOW-MIB", "wwpLeosFlowServiceMapSrcTag"), (0, "WWP-LEOS-FLOW-MIB", "wwpLeosFlowServiceMapDstPort"), (0, "WWP-LEOS-FLOW-MIB", "wwpLeosFlowServiceMapDstTag"), (0, "WWP-LEOS-FLOW-MIB", "wwpLeosFlowServiceMapSrcPri"), (0, "WWP-LEOS-FLOW-MIB", "wwpLeosFlowServiceMapProtocolType"), (0, "WWP-LEOS-FLOW-MIB", "wwpLeosFlowServiceMapProtocolPortNum"))
if mibBuilder.loadTexts: wwpLeosFlowServiceMappingEntry.setStatus('deprecated')
wwpLeosFlowServiceMapVid = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 6, 1, 1, 4, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 24576))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosFlowServiceMapVid.setStatus('deprecated')
wwpLeosFlowServiceMapSrcPort = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 6, 1, 1, 4, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosFlowServiceMapSrcPort.setStatus('deprecated')
wwpLeosFlowServiceMapSrcTag = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 6, 1, 1, 4, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4095))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosFlowServiceMapSrcTag.setStatus('deprecated')
wwpLeosFlowServiceMapDstPort = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 6, 1, 1, 4, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosFlowServiceMapDstPort.setStatus('deprecated')
wwpLeosFlowServiceMapDstTag = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 6, 1, 1, 4, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4095))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosFlowServiceMapDstTag.setStatus('deprecated')
wwpLeosFlowServiceMapSrcPri = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 6, 1, 1, 4, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosFlowServiceMapSrcPri.setStatus('deprecated')
wwpLeosFlowServiceMapProtocolType = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 6, 1, 1, 4, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("none", 1), ("tcp", 2), ("udp", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosFlowServiceMapProtocolType.setStatus('deprecated')
wwpLeosFlowServiceMapProtocolPortNum = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 6, 1, 1, 4, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosFlowServiceMapProtocolPortNum.setStatus('deprecated')
wwpLeosFlowServiceMapDstSlidId = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 6, 1, 1, 4, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4095))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wwpLeosFlowServiceMapDstSlidId.setStatus('deprecated')
wwpLeosFlowServiceMapSrcSlidId = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 6, 1, 1, 4, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4095))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wwpLeosFlowServiceMapSrcSlidId.setStatus('deprecated')
wwpLeosFlowServiceMapPriRemarkStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 6, 1, 1, 4, 1, 11), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wwpLeosFlowServiceMapPriRemarkStatus.setStatus('deprecated')
wwpLeosFlowServiceMapRemarkPri = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 6, 1, 1, 4, 1, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4095))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wwpLeosFlowServiceMapRemarkPri.setStatus('deprecated')
wwpLeosFlowServiceMapStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 6, 1, 1, 4, 1, 13), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: wwpLeosFlowServiceMapStatus.setStatus('deprecated')
wwpLeosFlowServiceACTable = MibTable((1, 3, 6, 1, 4, 1, 6141, 2, 60, 6, 1, 1, 5), )
if mibBuilder.loadTexts: wwpLeosFlowServiceACTable.setStatus('current')
wwpLeosFlowServiceACEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6141, 2, 60, 6, 1, 1, 5, 1), ).setIndexNames((0, "WWP-LEOS-FLOW-MIB", "wwpLeosFlowServiceACPortId"), (0, "WWP-LEOS-FLOW-MIB", "wwpLeosFlowServiceACVid"))
if mibBuilder.loadTexts: wwpLeosFlowServiceACEntry.setStatus('current')
wwpLeosFlowServiceACPortId = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 6, 1, 1, 5, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosFlowServiceACPortId.setStatus('current')
wwpLeosFlowServiceACVid = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 6, 1, 1, 5, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 24576))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosFlowServiceACVid.setStatus('current')
wwpLeosFlowServiceACMaxDynamicMacCount = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 6, 1, 1, 5, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: wwpLeosFlowServiceACMaxDynamicMacCount.setStatus('current')
wwpLeosFlowServiceACDynamicNonFilteredMacCount = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 6, 1, 1, 5, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosFlowServiceACDynamicNonFilteredMacCount.setStatus('current')
wwpLeosFlowServiceACDynamicFilteredMacCount = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 6, 1, 1, 5, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosFlowServiceACDynamicFilteredMacCount.setStatus('current')
wwpLeosFlowServiceACStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 6, 1, 1, 5, 1, 7), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: wwpLeosFlowServiceACStatus.setStatus('current')
wwpLeosFlowServiceACForwardLearning = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 6, 1, 1, 5, 1, 50), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("on", 1), ("off", 2))).clone('off')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: wwpLeosFlowServiceACForwardLearning.setStatus('current')
wwpLeosFlowStaticMacTable = MibTable((1, 3, 6, 1, 4, 1, 6141, 2, 60, 6, 1, 1, 6), )
if mibBuilder.loadTexts: wwpLeosFlowStaticMacTable.setStatus('current')
wwpLeosFlowStaticMacEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6141, 2, 60, 6, 1, 1, 6, 1), ).setIndexNames((0, "WWP-LEOS-FLOW-MIB", "wwpLeosFlowSMVid"), (0, "WWP-LEOS-FLOW-MIB", "wwpLeosFlowSMMacAddr"))
if mibBuilder.loadTexts: wwpLeosFlowStaticMacEntry.setStatus('current')
wwpLeosFlowSMVid = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 6, 1, 1, 6, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 24576))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosFlowSMVid.setStatus('current')
wwpLeosFlowSMMacAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 6, 1, 1, 6, 1, 2), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosFlowSMMacAddr.setStatus('current')
wwpLeosFlowSMPortId = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 6, 1, 1, 6, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: wwpLeosFlowSMPortId.setStatus('current')
wwpLeosFlowSMTag = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 6, 1, 1, 6, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4095))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: wwpLeosFlowSMTag.setStatus('current')
wwpLeosFlowSMStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 6, 1, 1, 6, 1, 5), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: wwpLeosFlowSMStatus.setStatus('current')
wwpLeosFlowLearnTable = MibTable((1, 3, 6, 1, 4, 1, 6141, 2, 60, 6, 1, 1, 7), )
if mibBuilder.loadTexts: wwpLeosFlowLearnTable.setStatus('current')
wwpLeosFlowLearnEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6141, 2, 60, 6, 1, 1, 7, 1), ).setIndexNames((0, "WWP-LEOS-FLOW-MIB", "wwpLeosFlowLearnVid"), (0, "WWP-LEOS-FLOW-MIB", "wwpLeosFlowLearnAddr"), (0, "WWP-LEOS-FLOW-MIB", "wwpLeosFlowLearnSrcPort"), (0, "WWP-LEOS-FLOW-MIB", "wwpLeosFlowLearnSrcTag"), (0, "WWP-LEOS-FLOW-MIB", "wwpLeosFlowLearnSrcPri"), (0, "WWP-LEOS-FLOW-MIB", "wwpLeosFlowLearnAddrType"))
if mibBuilder.loadTexts: wwpLeosFlowLearnEntry.setStatus('current')
wwpLeosFlowLearnVid = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 6, 1, 1, 7, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 24576))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosFlowLearnVid.setStatus('current')
wwpLeosFlowLearnAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 6, 1, 1, 7, 1, 2), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosFlowLearnAddr.setStatus('current')
wwpLeosFlowLearnSrcPort = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 6, 1, 1, 7, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosFlowLearnSrcPort.setStatus('current')
wwpLeosFlowLearnSrcTag = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 6, 1, 1, 7, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4095))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosFlowLearnSrcTag.setStatus('current')
wwpLeosFlowLearnSrcPri = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 6, 1, 1, 7, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosFlowLearnSrcPri.setStatus('current')
wwpLeosFlowLearnAddrType = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 6, 1, 1, 7, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("layer2", 1), ("layer3", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosFlowLearnAddrType.setStatus('current')
wwpLeosFlowLearnDstPort = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 6, 1, 1, 7, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosFlowLearnDstPort.setStatus('current')
wwpLeosFlowLearnDstTag = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 6, 1, 1, 7, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4095))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosFlowLearnDstTag.setStatus('current')
wwpLeosFlowLearnType = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 6, 1, 1, 7, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("dynamic", 1), ("static", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosFlowLearnType.setStatus('current')
wwpLeosFlowLearnIsFiltered = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 6, 1, 1, 7, 1, 10), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosFlowLearnIsFiltered.setStatus('current')
wwpLeosFlowServiceStatsTable = MibTable((1, 3, 6, 1, 4, 1, 6141, 2, 60, 6, 1, 1, 8), )
if mibBuilder.loadTexts: wwpLeosFlowServiceStatsTable.setStatus('deprecated')
wwpLeosFlowServiceStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6141, 2, 60, 6, 1, 1, 8, 1), ).setIndexNames((0, "WWP-LEOS-FLOW-MIB", "wwpLeosFlowServiceMapVid"), (0, "WWP-LEOS-FLOW-MIB", "wwpLeosFlowServiceMapSrcPort"), (0, "WWP-LEOS-FLOW-MIB", "wwpLeosFlowServiceMapSrcTag"), (0, "WWP-LEOS-FLOW-MIB", "wwpLeosFlowServiceMapDstPort"), (0, "WWP-LEOS-FLOW-MIB", "wwpLeosFlowServiceMapDstTag"), (0, "WWP-LEOS-FLOW-MIB", "wwpLeosFlowServiceMapSrcPri"), (0, "WWP-LEOS-FLOW-MIB", "wwpLeosFlowServiceMapProtocolType"), (0, "WWP-LEOS-FLOW-MIB", "wwpLeosFlowServiceMapProtocolPortNum"))
if mibBuilder.loadTexts: wwpLeosFlowServiceStatsEntry.setStatus('deprecated')
wwpLeosFlowServiceStatsRxHi = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 6, 1, 1, 8, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosFlowServiceStatsRxHi.setStatus('deprecated')
wwpLeosFlowServiceStatsRxLo = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 6, 1, 1, 8, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosFlowServiceStatsRxLo.setStatus('deprecated')
wwpLeosFlowServiceStatsTxHi = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 6, 1, 1, 8, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosFlowServiceStatsTxHi.setStatus('deprecated')
wwpLeosFlowServiceStatsTxLo = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 6, 1, 1, 8, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosFlowServiceStatsTxLo.setStatus('deprecated')
wwpLeosFlowServiceStatsType = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 6, 1, 1, 8, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("forward", 1), ("drop", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wwpLeosFlowServiceStatsType.setStatus('deprecated')
wwpLeosFlowMacFindTable = MibTable((1, 3, 6, 1, 4, 1, 6141, 2, 60, 6, 1, 1, 9), )
if mibBuilder.loadTexts: wwpLeosFlowMacFindTable.setStatus('current')
wwpLeosFlowMacFindEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6141, 2, 60, 6, 1, 1, 9, 1), ).setIndexNames((0, "WWP-LEOS-FLOW-MIB", "wwpLeosFlowMacFindVlanId"), (0, "WWP-LEOS-FLOW-MIB", "wwpLeosFlowMacFindMacAddr"))
if mibBuilder.loadTexts: wwpLeosFlowMacFindEntry.setStatus('current')
wwpLeosFlowMacFindMacAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 6, 1, 1, 9, 1, 1), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosFlowMacFindMacAddr.setStatus('current')
wwpLeosFlowMacFindVlanId = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 6, 1, 1, 9, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 24576))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosFlowMacFindVlanId.setStatus('current')
wwpLeosFlowMacFindPort = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 6, 1, 1, 9, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosFlowMacFindPort.setStatus('current')
wwpLeosFlowMacFindVlanTag = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 6, 1, 1, 9, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 24576))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosFlowMacFindVlanTag.setStatus('current')
wwpLeosFlowPriRemapTable = MibTable((1, 3, 6, 1, 4, 1, 6141, 2, 60, 6, 1, 1, 10), )
if mibBuilder.loadTexts: wwpLeosFlowPriRemapTable.setStatus('current')
wwpLeosFlowPriRemapEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6141, 2, 60, 6, 1, 1, 10, 1), ).setIndexNames((0, "WWP-LEOS-FLOW-MIB", "wwpLeosFlowUserPri"))
if mibBuilder.loadTexts: wwpLeosFlowPriRemapEntry.setStatus('current')
wwpLeosFlowUserPri = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 6, 1, 1, 10, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosFlowUserPri.setStatus('current')
wwpLeosFlowRemappedPri = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 6, 1, 1, 10, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wwpLeosFlowRemappedPri.setStatus('current')
wwpLeosFlowSMappingTable = MibTable((1, 3, 6, 1, 4, 1, 6141, 2, 60, 6, 1, 1, 13), )
if mibBuilder.loadTexts: wwpLeosFlowSMappingTable.setStatus('current')
wwpLeosFlowSMappingEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6141, 2, 60, 6, 1, 1, 13, 1), ).setIndexNames((0, "WWP-LEOS-FLOW-MIB", "wwpLeosFlowSMappingNetType"), (0, "WWP-LEOS-FLOW-MIB", "wwpLeosFlowSMappingNetValue"), (0, "WWP-LEOS-FLOW-MIB", "wwpLeosFlowSMappingSrcType"), (0, "WWP-LEOS-FLOW-MIB", "wwpLeosFlowSMappingSrcValue"), (0, "WWP-LEOS-FLOW-MIB", "wwpLeosFlowSMappingDstType"), (0, "WWP-LEOS-FLOW-MIB", "wwpLeosFlowSMappingDstValue"), (0, "WWP-LEOS-FLOW-MIB", "wwpLeosFlowSMappingCosType"), (0, "WWP-LEOS-FLOW-MIB", "wwpLeosFlowSMappingCosValue"))
if mibBuilder.loadTexts: wwpLeosFlowSMappingEntry.setStatus('current')
wwpLeosFlowSMappingNetType = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 6, 1, 1, 13, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("none", 1), ("vlan", 2), ("vsi", 3), ("vsiMpls", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosFlowSMappingNetType.setStatus('current')
wwpLeosFlowSMappingNetValue = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 6, 1, 1, 13, 1, 2), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosFlowSMappingNetValue.setStatus('current')
wwpLeosFlowSMappingSrcType = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 6, 1, 1, 13, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("none", 1), ("port", 2), ("mplsVc", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosFlowSMappingSrcType.setStatus('current')
wwpLeosFlowSMappingSrcValue = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 6, 1, 1, 13, 1, 4), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosFlowSMappingSrcValue.setStatus('current')
wwpLeosFlowSMappingDstType = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 6, 1, 1, 13, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("none", 1), ("port", 2), ("mplsVc", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosFlowSMappingDstType.setStatus('current')
wwpLeosFlowSMappingDstValue = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 6, 1, 1, 13, 1, 6), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosFlowSMappingDstValue.setStatus('current')
wwpLeosFlowSMappingCosType = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 6, 1, 1, 13, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12))).clone(namedValues=NamedValues(("none", 1), ("phb", 2), ("dscp", 3), ("ipPrec", 4), ("dot1dPri", 5), ("mplsExp", 6), ("tcpSrcPort", 7), ("tcpDstPort", 8), ("udpSrcPort", 9), ("udpDstPort", 10), ("pcp", 11), ("cvlan", 12)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosFlowSMappingCosType.setStatus('current')
wwpLeosFlowSMappingCosValue = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 6, 1, 1, 13, 1, 8), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosFlowSMappingCosValue.setStatus('current')
wwpLeosFlowSMappingDstSlid = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 6, 1, 1, 13, 1, 9), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wwpLeosFlowSMappingDstSlid.setStatus('current')
wwpLeosFlowSMappingSrcSlid = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 6, 1, 1, 13, 1, 10), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wwpLeosFlowSMappingSrcSlid.setStatus('current')
wwpLeosFlowSMappingStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 6, 1, 1, 13, 1, 11), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: wwpLeosFlowSMappingStatus.setStatus('current')
wwpLeosFlowSMappingRedCurveOffset = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 6, 1, 1, 13, 1, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 3))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: wwpLeosFlowSMappingRedCurveOffset.setStatus('current')
wwpLeosFlowSMappingCpuPort = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 6, 1, 1, 13, 1, 13), TruthValue().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: wwpLeosFlowSMappingCpuPort.setStatus('current')
wwpLeosFlowSMappingStatsTable = MibTable((1, 3, 6, 1, 4, 1, 6141, 2, 60, 6, 1, 1, 14), )
if mibBuilder.loadTexts: wwpLeosFlowSMappingStatsTable.setStatus('current')
wwpLeosFlowSMappingStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6141, 2, 60, 6, 1, 1, 14, 1), ).setIndexNames((0, "WWP-LEOS-FLOW-MIB", "wwpLeosFlowSMappingNetType"), (0, "WWP-LEOS-FLOW-MIB", "wwpLeosFlowSMappingNetValue"), (0, "WWP-LEOS-FLOW-MIB", "wwpLeosFlowSMappingSrcType"), (0, "WWP-LEOS-FLOW-MIB", "wwpLeosFlowSMappingSrcValue"), (0, "WWP-LEOS-FLOW-MIB", "wwpLeosFlowSMappingDstType"), (0, "WWP-LEOS-FLOW-MIB", "wwpLeosFlowSMappingDstValue"), (0, "WWP-LEOS-FLOW-MIB", "wwpLeosFlowSMappingCosType"), (0, "WWP-LEOS-FLOW-MIB", "wwpLeosFlowSMappingCosValue"))
if mibBuilder.loadTexts: wwpLeosFlowSMappingStatsEntry.setStatus('current')
wwpLeosFlowSMappingStatsRxHi = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 6, 1, 1, 14, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosFlowSMappingStatsRxHi.setStatus('current')
wwpLeosFlowSMappingStatsRxLo = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 6, 1, 1, 14, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosFlowSMappingStatsRxLo.setStatus('current')
wwpLeosFlowSMappingStatsTxHi = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 6, 1, 1, 14, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosFlowSMappingStatsTxHi.setStatus('current')
wwpLeosFlowSMappingStatsTxLo = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 6, 1, 1, 14, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosFlowSMappingStatsTxLo.setStatus('current')
wwpLeosFlowSMappingStatsType = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 6, 1, 1, 14, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("forward", 1), ("drop", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wwpLeosFlowSMappingStatsType.setStatus('current')
wwpLeosFlowCosSync1dToExpTable = MibTable((1, 3, 6, 1, 4, 1, 6141, 2, 60, 6, 1, 1, 15), )
if mibBuilder.loadTexts: wwpLeosFlowCosSync1dToExpTable.setStatus('current')
wwpLeosFlowCosSync1dToExpEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6141, 2, 60, 6, 1, 1, 15, 1), ).setIndexNames((0, "WWP-LEOS-FLOW-MIB", "wwpLeosFlowCosSync1dToExpMapFrom"))
if mibBuilder.loadTexts: wwpLeosFlowCosSync1dToExpEntry.setStatus('current')
wwpLeosFlowCosSync1dToExpMapFrom = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 6, 1, 1, 15, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosFlowCosSync1dToExpMapFrom.setStatus('current')
wwpLeosFlowCosSync1dToExpMapTo = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 6, 1, 1, 15, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wwpLeosFlowCosSync1dToExpMapTo.setStatus('current')
wwpLeosFlowCosSyncExpTo1dTable = MibTable((1, 3, 6, 1, 4, 1, 6141, 2, 60, 6, 1, 1, 16), )
if mibBuilder.loadTexts: wwpLeosFlowCosSyncExpTo1dTable.setStatus('current')
wwpLeosFlowCosSyncExpTo1dEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6141, 2, 60, 6, 1, 1, 16, 1), ).setIndexNames((0, "WWP-LEOS-FLOW-MIB", "wwpLeosFlowCosSyncExpTo1dMapFrom"))
if mibBuilder.loadTexts: wwpLeosFlowCosSyncExpTo1dEntry.setStatus('current')
wwpLeosFlowCosSyncExpTo1dMapFrom = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 6, 1, 1, 16, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosFlowCosSyncExpTo1dMapFrom.setStatus('current')
wwpLeosFlowCosSyncExpTo1dMapTo = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 6, 1, 1, 16, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wwpLeosFlowCosSyncExpTo1dMapTo.setStatus('current')
wwpLeosFlowCosSyncIpPrecTo1dTable = MibTable((1, 3, 6, 1, 4, 1, 6141, 2, 60, 6, 1, 1, 17), )
if mibBuilder.loadTexts: wwpLeosFlowCosSyncIpPrecTo1dTable.setStatus('current')
wwpLeosFlowCosSyncIpPrecTo1dEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6141, 2, 60, 6, 1, 1, 17, 1), ).setIndexNames((0, "WWP-LEOS-FLOW-MIB", "wwpLeosFlowCosSyncIpPrecTo1dMapFrom"))
if mibBuilder.loadTexts: wwpLeosFlowCosSyncIpPrecTo1dEntry.setStatus('current')
wwpLeosFlowCosSyncIpPrecTo1dMapFrom = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 6, 1, 1, 17, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosFlowCosSyncIpPrecTo1dMapFrom.setStatus('current')
wwpLeosFlowCosSyncIpPrecTo1dMapTo = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 6, 1, 1, 17, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wwpLeosFlowCosSyncIpPrecTo1dMapTo.setStatus('current')
wwpLeosFlowCosSyncStdPhbTo1dTable = MibTable((1, 3, 6, 1, 4, 1, 6141, 2, 60, 6, 1, 1, 18), )
if mibBuilder.loadTexts: wwpLeosFlowCosSyncStdPhbTo1dTable.setStatus('current')
wwpLeosFlowCosSyncStdPhbTo1dEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6141, 2, 60, 6, 1, 1, 18, 1), ).setIndexNames((0, "WWP-LEOS-FLOW-MIB", "wwpLeosFlowCosSyncStdPhbTo1dMapFrom"))
if mibBuilder.loadTexts: wwpLeosFlowCosSyncStdPhbTo1dEntry.setStatus('current')
wwpLeosFlowCosSyncStdPhbTo1dMapFrom = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 6, 1, 1, 18, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13))).clone(namedValues=NamedValues(("cs0", 1), ("cs1", 2), ("cs2", 3), ("cs3", 4), ("cs4", 5), ("cs5", 6), ("cs6", 7), ("cs7", 8), ("af1", 9), ("af2", 10), ("af3", 11), ("af4", 12), ("ef", 13)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosFlowCosSyncStdPhbTo1dMapFrom.setStatus('current')
wwpLeosFlowCosSyncStdPhbTo1dMapTo = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 6, 1, 1, 18, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wwpLeosFlowCosSyncStdPhbTo1dMapTo.setStatus('current')
wwpLeosFlowL2SacTable = MibTable((1, 3, 6, 1, 4, 1, 6141, 2, 60, 6, 1, 1, 19), )
if mibBuilder.loadTexts: wwpLeosFlowL2SacTable.setStatus('current')
wwpLeosFlowL2SacEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6141, 2, 60, 6, 1, 1, 19, 1), ).setIndexNames((0, "WWP-LEOS-FLOW-MIB", "wwpLeosFlowL2SacPortId"), (0, "WWP-LEOS-FLOW-MIB", "wwpLeosFlowL2SacNetType"), (0, "WWP-LEOS-FLOW-MIB", "wwpLeosFlowSacNetValue"))
if mibBuilder.loadTexts: wwpLeosFlowL2SacEntry.setStatus('current')
wwpLeosFlowL2SacPortId = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 6, 1, 1, 19, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosFlowL2SacPortId.setStatus('current')
wwpLeosFlowL2SacNetType = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 6, 1, 1, 19, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("none", 1), ("vlan", 2), ("vsiEth", 3), ("vsiMpls", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosFlowL2SacNetType.setStatus('current')
wwpLeosFlowSacNetValue = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 6, 1, 1, 19, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosFlowSacNetValue.setStatus('current')
wwpLeosFlowL2SacLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 6, 1, 1, 19, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: wwpLeosFlowL2SacLimit.setStatus('current')
wwpLeosFlowL2SacCurMac = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 6, 1, 1, 19, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosFlowL2SacCurMac.setStatus('current')
wwpLeosFlowL2SacCurFilteredMac = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 6, 1, 1, 19, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosFlowL2SacCurFilteredMac.setStatus('current')
wwpLeosFlowL2SacOperState = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 6, 1, 1, 19, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosFlowL2SacOperState.setStatus('current')
wwpLeosFlowL2SacRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 6, 1, 1, 19, 1, 8), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: wwpLeosFlowL2SacRowStatus.setStatus('current')
wwpLeosFlowL2SacTrapState = MibScalar((1, 3, 6, 1, 4, 1, 6141, 2, 60, 6, 1, 1, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wwpLeosFlowL2SacTrapState.setStatus('current')
wwpLeosFlowStrictQueuingState = MibScalar((1, 3, 6, 1, 4, 1, 6141, 2, 60, 6, 1, 1, 21), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wwpLeosFlowStrictQueuingState.setStatus('current')
wwpLeosFlowBwCalcMode = MibScalar((1, 3, 6, 1, 4, 1, 6141, 2, 60, 6, 1, 1, 22), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("transport", 1), ("payload", 2))).clone('transport')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wwpLeosFlowBwCalcMode.setStatus('current')
wwpLeosFlowGlobal = MibIdentifier((1, 3, 6, 1, 4, 1, 6141, 2, 60, 6, 1, 1, 23))
wwpLeosFlowServiceLevelFlowGroupState = MibScalar((1, 3, 6, 1, 4, 1, 6141, 2, 60, 6, 1, 1, 23, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wwpLeosFlowServiceLevelFlowGroupState.setStatus('current')
wwpLeosFlowServiceMappingCosRedMappingState = MibScalar((1, 3, 6, 1, 4, 1, 6141, 2, 60, 6, 1, 1, 23, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wwpLeosFlowServiceMappingCosRedMappingState.setStatus('current')
wwpLeosFlowServiceAllRedCurveUnset = MibScalar((1, 3, 6, 1, 4, 1, 6141, 2, 60, 6, 1, 1, 23, 3), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wwpLeosFlowServiceAllRedCurveUnset.setStatus('current')
wwpLeosFlowServiceRedCurveTable = MibTable((1, 3, 6, 1, 4, 1, 6141, 2, 60, 6, 1, 1, 24), )
if mibBuilder.loadTexts: wwpLeosFlowServiceRedCurveTable.setStatus('current')
wwpLeosFlowServiceRedCurveEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6141, 2, 60, 6, 1, 1, 24, 1), ).setIndexNames((0, "WWP-LEOS-FLOW-MIB", "wwpLeosFlowServiceRedCurveIndex"))
if mibBuilder.loadTexts: wwpLeosFlowServiceRedCurveEntry.setStatus('current')
wwpLeosFlowServiceRedCurveIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 6, 1, 1, 24, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(5, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosFlowServiceRedCurveIndex.setStatus('current')
wwpLeosFlowServiceRedCurveName = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 6, 1, 1, 24, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 31))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wwpLeosFlowServiceRedCurveName.setStatus('current')
wwpLeosFlowServiceRedCurveState = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 6, 1, 1, 24, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wwpLeosFlowServiceRedCurveState.setStatus('current')
wwpLeosFlowServiceRedCurveMinThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 6, 1, 1, 24, 1, 4), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setUnits('kbps').setMaxAccess("readwrite")
if mibBuilder.loadTexts: wwpLeosFlowServiceRedCurveMinThreshold.setStatus('current')
wwpLeosFlowServiceRedCurveMaxThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 6, 1, 1, 24, 1, 5), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setUnits('kbps').setMaxAccess("readwrite")
if mibBuilder.loadTexts: wwpLeosFlowServiceRedCurveMaxThreshold.setStatus('current')
wwpLeosFlowServiceRedCurveDropProbability = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 6, 1, 1, 24, 1, 6), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wwpLeosFlowServiceRedCurveDropProbability.setStatus('current')
wwpLeosFlowServiceRedCurveUnset = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 6, 1, 1, 24, 1, 7), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wwpLeosFlowServiceRedCurveUnset.setStatus('current')
wwpLeosFlowCos1dToRedCurveOffsetTable = MibTable((1, 3, 6, 1, 4, 1, 6141, 2, 60, 6, 1, 1, 25), )
if mibBuilder.loadTexts: wwpLeosFlowCos1dToRedCurveOffsetTable.setStatus('current')
wwpLeosFlowCos1dToRedCurveOffsetEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6141, 2, 60, 6, 1, 1, 25, 1), ).setIndexNames((0, "WWP-LEOS-FLOW-MIB", "wwpLeosFlowCos1dToRedCurveOffset1dValue"))
if mibBuilder.loadTexts: wwpLeosFlowCos1dToRedCurveOffsetEntry.setStatus('current')
wwpLeosFlowCos1dToRedCurveOffset1dValue = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 6, 1, 1, 25, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosFlowCos1dToRedCurveOffset1dValue.setStatus('current')
wwpLeosFlowCos1dToRedCurveOffsetValue = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 6, 1, 1, 25, 1, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 3))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wwpLeosFlowCos1dToRedCurveOffsetValue.setStatus('current')
wwpLeosFlowCosMapPCPTo1dTable = MibTable((1, 3, 6, 1, 4, 1, 6141, 2, 60, 6, 1, 1, 26), )
if mibBuilder.loadTexts: wwpLeosFlowCosMapPCPTo1dTable.setStatus('current')
wwpLeosFlowCosMapPCPTo1dEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6141, 2, 60, 6, 1, 1, 26, 1), ).setIndexNames((0, "WWP-LEOS-FLOW-MIB", "wwpLeosFlowCosMapPCPTo1dMapFrom"))
if mibBuilder.loadTexts: wwpLeosFlowCosMapPCPTo1dEntry.setStatus('current')
wwpLeosFlowCosMapPCPTo1dMapFrom = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 6, 1, 1, 26, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosFlowCosMapPCPTo1dMapFrom.setStatus('current')
wwpLeosFlowCosMapPCPTo1dMapTo = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 6, 1, 1, 26, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wwpLeosFlowCosMapPCPTo1dMapTo.setStatus('current')
wwpLeosFlowCosMap1dToPCPTable = MibTable((1, 3, 6, 1, 4, 1, 6141, 2, 60, 6, 1, 1, 27), )
if mibBuilder.loadTexts: wwpLeosFlowCosMap1dToPCPTable.setStatus('current')
wwpLeosFlowCosMap1dToPCPEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6141, 2, 60, 6, 1, 1, 27, 1), ).setIndexNames((0, "WWP-LEOS-FLOW-MIB", "wwpLeosFlowCosMap1dToPCPMapFrom"))
if mibBuilder.loadTexts: wwpLeosFlowCosMap1dToPCPEntry.setStatus('current')
wwpLeosFlowCosMap1dToPCPMapFrom = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 6, 1, 1, 27, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosFlowCosMap1dToPCPMapFrom.setStatus('current')
wwpLeosFlowCosMap1dToPCPMapTo = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 6, 1, 1, 27, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wwpLeosFlowCosMap1dToPCPMapTo.setStatus('current')
wwpLeosFlowMacMotionEventsEnable = MibScalar((1, 3, 6, 1, 4, 1, 6141, 2, 60, 6, 1, 1, 28), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wwpLeosFlowMacMotionEventsEnable.setStatus('current')
wwpLeosFlowMacMotionEventsInterval = MibScalar((1, 3, 6, 1, 4, 1, 6141, 2, 60, 6, 1, 1, 29), Integer32().subtype(subtypeSpec=ValueRangeConstraint(15, 300))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wwpLeosFlowMacMotionEventsInterval.setStatus('current')
wwpLeosFlowCpuRateLimitsEnable = MibScalar((1, 3, 6, 1, 4, 1, 6141, 2, 60, 6, 1, 1, 30), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wwpLeosFlowCpuRateLimitsEnable.setStatus('current')
wwpLeosFlowCpuRateLimitTable = MibTable((1, 3, 6, 1, 4, 1, 6141, 2, 60, 6, 1, 1, 31), )
if mibBuilder.loadTexts: wwpLeosFlowCpuRateLimitTable.setStatus('current')
wwpLeosFlowCpuRateLimitEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6141, 2, 60, 6, 1, 1, 31, 1), ).setIndexNames((0, "WWP-LEOS-FLOW-MIB", "wwpLeosFlowCpuRateLimitPort"))
if mibBuilder.loadTexts: wwpLeosFlowCpuRateLimitEntry.setStatus('current')
wwpLeosFlowCpuRateLimitPort = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 6, 1, 1, 31, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 64)))
if mibBuilder.loadTexts: wwpLeosFlowCpuRateLimitPort.setStatus('current')
wwpLeosFlowCpuRateLimitEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 6, 1, 1, 31, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wwpLeosFlowCpuRateLimitEnable.setStatus('current')
wwpLeosFlowCpuRateLimitBootp = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 6, 1, 1, 31, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2500))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wwpLeosFlowCpuRateLimitBootp.setStatus('current')
wwpLeosFlowCpuRateLimitCfm = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 6, 1, 1, 31, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2500))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wwpLeosFlowCpuRateLimitCfm.setStatus('current')
wwpLeosFlowCpuRateLimitCft = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 6, 1, 1, 31, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2500))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wwpLeosFlowCpuRateLimitCft.setStatus('current')
wwpLeosFlowCpuRateLimitDot1x = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 6, 1, 1, 31, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2500))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wwpLeosFlowCpuRateLimitDot1x.setStatus('current')
wwpLeosFlowCpuRateLimitOam = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 6, 1, 1, 31, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2500))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wwpLeosFlowCpuRateLimitOam.setStatus('current')
wwpLeosFlowCpuRateLimitEprArp = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 6, 1, 1, 31, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2500))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wwpLeosFlowCpuRateLimitEprArp.setStatus('current')
wwpLeosFlowCpuRateLimitIgmp = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 6, 1, 1, 31, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2500))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wwpLeosFlowCpuRateLimitIgmp.setStatus('current')
wwpLeosFlowCpuRateLimitInet = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 6, 1, 1, 31, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 5000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wwpLeosFlowCpuRateLimitInet.setStatus('current')
wwpLeosFlowCpuRateLimitLacp = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 6, 1, 1, 31, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2500))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wwpLeosFlowCpuRateLimitLacp.setStatus('current')
wwpLeosFlowCpuRateLimitLldp = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 6, 1, 1, 31, 1, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2500))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wwpLeosFlowCpuRateLimitLldp.setStatus('current')
wwpLeosFlowCpuRateLimitMpls = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 6, 1, 1, 31, 1, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2500))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wwpLeosFlowCpuRateLimitMpls.setStatus('current')
wwpLeosFlowCpuRateLimitMstp = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 6, 1, 1, 31, 1, 14), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 500))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wwpLeosFlowCpuRateLimitMstp.setStatus('current')
wwpLeosFlowCpuRateLimitPeArp = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 6, 1, 1, 31, 1, 15), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2500))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wwpLeosFlowCpuRateLimitPeArp.setStatus('current')
wwpLeosFlowCpuRateLimitPvst = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 6, 1, 1, 31, 1, 16), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2500))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wwpLeosFlowCpuRateLimitPvst.setStatus('current')
wwpLeosFlowCpuRateLimitRstp = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 6, 1, 1, 31, 1, 17), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2500))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wwpLeosFlowCpuRateLimitRstp.setStatus('current')
wwpLeosFlowCpuRateLimitLpbk = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 6, 1, 1, 31, 1, 18), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2500))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wwpLeosFlowCpuRateLimitLpbk.setStatus('current')
wwpLeosFlowCpuRateLimitRmtLpbk = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 6, 1, 1, 31, 1, 19), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2500))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wwpLeosFlowCpuRateLimitRmtLpbk.setStatus('current')
wwpLeosFlowCpuRateLimitCxeRx = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 6, 1, 1, 31, 1, 20), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 500))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wwpLeosFlowCpuRateLimitCxeRx.setStatus('current')
wwpLeosFlowCpuRateLimitCxeTx = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 6, 1, 1, 31, 1, 21), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 500))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wwpLeosFlowCpuRateLimitCxeTx.setStatus('current')
wwpLeosFlowCpuRateLimitTwamp = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 6, 1, 1, 31, 1, 22), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2500))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wwpLeosFlowCpuRateLimitTwamp.setStatus('current')
wwpLeosFlowCpuRateLimitDflt = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 6, 1, 1, 31, 1, 23), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 10000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wwpLeosFlowCpuRateLimitDflt.setStatus('current')
wwpLeosFlowCpuRateLimitTwampRsp = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 6, 1, 1, 31, 1, 24), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2500))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wwpLeosFlowCpuRateLimitTwampRsp.setStatus('current')
wwpLeosFlowCpuRateLimitMultiCast = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 6, 1, 1, 31, 1, 25), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wwpLeosFlowCpuRateLimitMultiCast.setStatus('current')
wwpLeosFlowCpuRateLimitBroadCast = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 6, 1, 1, 31, 1, 26), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 500))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wwpLeosFlowCpuRateLimitBroadCast.setStatus('current')
wwpLeosFlowCpuRateLimitArp = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 6, 1, 1, 31, 1, 27), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wwpLeosFlowCpuRateLimitArp.setStatus('current')
wwpLeosFlowCpuRateLimitIcmp = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 6, 1, 1, 31, 1, 28), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wwpLeosFlowCpuRateLimitIcmp.setStatus('current')
wwpLeosFlowCpuRateLimitTcpSyn = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 6, 1, 1, 31, 1, 29), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wwpLeosFlowCpuRateLimitTcpSyn.setStatus('current')
wwpLeosFlowCpuRateLimitRaps = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 6, 1, 1, 31, 1, 30), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2500))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wwpLeosFlowCpuRateLimitRaps.setStatus('current')
wwpLeosFlowCpuRateLimitIpMgmt = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 6, 1, 1, 31, 1, 31), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 5000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wwpLeosFlowCpuRateLimitIpMgmt.setStatus('current')
wwpLeosFlowCpuRateLimitIpControl = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 6, 1, 1, 31, 1, 32), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 5000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wwpLeosFlowCpuRateLimitIpControl.setStatus('current')
wwpLeosFlowCpuRateLimitIpV6Mgmt = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 6, 1, 1, 31, 1, 33), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 5000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wwpLeosFlowCpuRateLimitIpV6Mgmt.setStatus('current')
wwpLeosFlowCpuRateLimitInet6 = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 6, 1, 1, 31, 1, 34), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 5000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wwpLeosFlowCpuRateLimitInet6.setStatus('current')
wwpLeosFlowCpuRateLimitStatsTable = MibTable((1, 3, 6, 1, 4, 1, 6141, 2, 60, 6, 1, 1, 32), )
if mibBuilder.loadTexts: wwpLeosFlowCpuRateLimitStatsTable.setStatus('current')
wwpLeosFlowCpuRateLimitStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6141, 2, 60, 6, 1, 1, 32, 1), ).setIndexNames((0, "WWP-LEOS-FLOW-MIB", "wwpLeosFlowCpuRateLimitStatsPort"))
if mibBuilder.loadTexts: wwpLeosFlowCpuRateLimitStatsEntry.setStatus('current')
wwpLeosFlowCpuRateLimitStatsPort = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 6, 1, 1, 32, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 64)))
if mibBuilder.loadTexts: wwpLeosFlowCpuRateLimitStatsPort.setStatus('current')
wwpLeosFlowCpuRateLimitStatsBootpPassed = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 6, 1, 1, 32, 1, 2), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosFlowCpuRateLimitStatsBootpPassed.setStatus('current')
wwpLeosFlowCpuRateLimitStatsCfmPassed = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 6, 1, 1, 32, 1, 3), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosFlowCpuRateLimitStatsCfmPassed.setStatus('current')
wwpLeosFlowCpuRateLimitStatsCftPassed = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 6, 1, 1, 32, 1, 4), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosFlowCpuRateLimitStatsCftPassed.setStatus('current')
wwpLeosFlowCpuRateLimitStatsDot1xPassed = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 6, 1, 1, 32, 1, 5), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosFlowCpuRateLimitStatsDot1xPassed.setStatus('current')
wwpLeosFlowCpuRateLimitStatsOamPassed = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 6, 1, 1, 32, 1, 6), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosFlowCpuRateLimitStatsOamPassed.setStatus('current')
wwpLeosFlowCpuRateLimitStatsEprArpPassed = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 6, 1, 1, 32, 1, 7), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosFlowCpuRateLimitStatsEprArpPassed.setStatus('current')
wwpLeosFlowCpuRateLimitStatsIgmpPassed = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 6, 1, 1, 32, 1, 8), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosFlowCpuRateLimitStatsIgmpPassed.setStatus('current')
wwpLeosFlowCpuRateLimitStatsInetPassed = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 6, 1, 1, 32, 1, 9), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosFlowCpuRateLimitStatsInetPassed.setStatus('current')
wwpLeosFlowCpuRateLimitStatsLacpPassed = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 6, 1, 1, 32, 1, 10), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosFlowCpuRateLimitStatsLacpPassed.setStatus('current')
wwpLeosFlowCpuRateLimitStatsLldpPassed = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 6, 1, 1, 32, 1, 11), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosFlowCpuRateLimitStatsLldpPassed.setStatus('current')
wwpLeosFlowCpuRateLimitStatsMplsPassed = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 6, 1, 1, 32, 1, 12), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosFlowCpuRateLimitStatsMplsPassed.setStatus('current')
wwpLeosFlowCpuRateLimitStatsMstpPassed = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 6, 1, 1, 32, 1, 13), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosFlowCpuRateLimitStatsMstpPassed.setStatus('current')
wwpLeosFlowCpuRateLimitStatsPeArpPassed = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 6, 1, 1, 32, 1, 14), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosFlowCpuRateLimitStatsPeArpPassed.setStatus('current')
wwpLeosFlowCpuRateLimitStatsPvstPassed = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 6, 1, 1, 32, 1, 15), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosFlowCpuRateLimitStatsPvstPassed.setStatus('current')
wwpLeosFlowCpuRateLimitStatsRstpPassed = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 6, 1, 1, 32, 1, 16), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosFlowCpuRateLimitStatsRstpPassed.setStatus('current')
wwpLeosFlowCpuRateLimitStatsLpbkPassed = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 6, 1, 1, 32, 1, 17), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosFlowCpuRateLimitStatsLpbkPassed.setStatus('current')
wwpLeosFlowCpuRateLimitStatsRmtLpbkPassed = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 6, 1, 1, 32, 1, 18), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosFlowCpuRateLimitStatsRmtLpbkPassed.setStatus('current')
wwpLeosFlowCpuRateLimitStatsCxeRxPassed = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 6, 1, 1, 32, 1, 19), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosFlowCpuRateLimitStatsCxeRxPassed.setStatus('current')
wwpLeosFlowCpuRateLimitStatsCxeTxPassed = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 6, 1, 1, 32, 1, 20), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosFlowCpuRateLimitStatsCxeTxPassed.setStatus('current')
wwpLeosFlowCpuRateLimitStatsTwampPassed = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 6, 1, 1, 32, 1, 21), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosFlowCpuRateLimitStatsTwampPassed.setStatus('current')
wwpLeosFlowCpuRateLimitStatsDfltPassed = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 6, 1, 1, 32, 1, 22), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosFlowCpuRateLimitStatsDfltPassed.setStatus('current')
wwpLeosFlowCpuRateLimitStatsBootpDropped = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 6, 1, 1, 32, 1, 23), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosFlowCpuRateLimitStatsBootpDropped.setStatus('current')
wwpLeosFlowCpuRateLimitStatsCfmDropped = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 6, 1, 1, 32, 1, 24), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosFlowCpuRateLimitStatsCfmDropped.setStatus('current')
wwpLeosFlowCpuRateLimitStatsCftDropped = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 6, 1, 1, 32, 1, 25), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosFlowCpuRateLimitStatsCftDropped.setStatus('current')
wwpLeosFlowCpuRateLimitStatsDot1xDropped = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 6, 1, 1, 32, 1, 26), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosFlowCpuRateLimitStatsDot1xDropped.setStatus('current')
wwpLeosFlowCpuRateLimitStatsOamDropped = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 6, 1, 1, 32, 1, 27), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosFlowCpuRateLimitStatsOamDropped.setStatus('current')
wwpLeosFlowCpuRateLimitStatsEprArpDropped = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 6, 1, 1, 32, 1, 28), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosFlowCpuRateLimitStatsEprArpDropped.setStatus('current')
wwpLeosFlowCpuRateLimitStatsIgmpDropped = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 6, 1, 1, 32, 1, 29), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosFlowCpuRateLimitStatsIgmpDropped.setStatus('current')
wwpLeosFlowCpuRateLimitStatsInetDropped = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 6, 1, 1, 32, 1, 30), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosFlowCpuRateLimitStatsInetDropped.setStatus('current')
wwpLeosFlowCpuRateLimitStatsLacpDropped = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 6, 1, 1, 32, 1, 31), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosFlowCpuRateLimitStatsLacpDropped.setStatus('current')
wwpLeosFlowCpuRateLimitStatsLldpDropped = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 6, 1, 1, 32, 1, 32), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosFlowCpuRateLimitStatsLldpDropped.setStatus('current')
wwpLeosFlowCpuRateLimitStatsMplsDropped = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 6, 1, 1, 32, 1, 33), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosFlowCpuRateLimitStatsMplsDropped.setStatus('current')
wwpLeosFlowCpuRateLimitStatsMstpDropped = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 6, 1, 1, 32, 1, 34), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosFlowCpuRateLimitStatsMstpDropped.setStatus('current')
wwpLeosFlowCpuRateLimitStatsPeArpDropped = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 6, 1, 1, 32, 1, 35), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosFlowCpuRateLimitStatsPeArpDropped.setStatus('current')
wwpLeosFlowCpuRateLimitStatsPvstDropped = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 6, 1, 1, 32, 1, 36), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosFlowCpuRateLimitStatsPvstDropped.setStatus('current')
wwpLeosFlowCpuRateLimitStatsRstpDropped = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 6, 1, 1, 32, 1, 37), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosFlowCpuRateLimitStatsRstpDropped.setStatus('current')
wwpLeosFlowCpuRateLimitStatsLpbkDropped = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 6, 1, 1, 32, 1, 38), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosFlowCpuRateLimitStatsLpbkDropped.setStatus('current')
wwpLeosFlowCpuRateLimitStatsRmtLpbkDropped = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 6, 1, 1, 32, 1, 39), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosFlowCpuRateLimitStatsRmtLpbkDropped.setStatus('current')
wwpLeosFlowCpuRateLimitStatsCxeRxDropped = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 6, 1, 1, 32, 1, 40), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosFlowCpuRateLimitStatsCxeRxDropped.setStatus('current')
wwpLeosFlowCpuRateLimitStatsCxeTxDropped = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 6, 1, 1, 32, 1, 41), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosFlowCpuRateLimitStatsCxeTxDropped.setStatus('current')
wwpLeosFlowCpuRateLimitStatsTwampDropped = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 6, 1, 1, 32, 1, 42), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosFlowCpuRateLimitStatsTwampDropped.setStatus('current')
wwpLeosFlowCpuRateLimitStatsDfltDropped = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 6, 1, 1, 32, 1, 43), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosFlowCpuRateLimitStatsDfltDropped.setStatus('current')
wwpLeosFlowCpuRateLimitStatsTwampRspPassed = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 6, 1, 1, 32, 1, 44), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosFlowCpuRateLimitStatsTwampRspPassed.setStatus('current')
wwpLeosFlowCpuRateLimitStatsTwampRspDropped = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 6, 1, 1, 32, 1, 45), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosFlowCpuRateLimitStatsTwampRspDropped.setStatus('current')
wwpLeosFlowCpuRateLimitStatsMultiCastPassed = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 6, 1, 1, 32, 1, 46), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosFlowCpuRateLimitStatsMultiCastPassed.setStatus('current')
wwpLeosFlowCpuRateLimitStatsMultiCastDropped = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 6, 1, 1, 32, 1, 47), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosFlowCpuRateLimitStatsMultiCastDropped.setStatus('current')
wwpLeosFlowCpuRateLimitStatsBroadCastPassed = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 6, 1, 1, 32, 1, 48), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosFlowCpuRateLimitStatsBroadCastPassed.setStatus('current')
wwpLeosFlowCpuRateLimitStatsBroadCastDropped = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 6, 1, 1, 32, 1, 49), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosFlowCpuRateLimitStatsBroadCastDropped.setStatus('current')
wwpLeosFlowCpuRateLimitStatsArpPassed = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 6, 1, 1, 32, 1, 50), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosFlowCpuRateLimitStatsArpPassed.setStatus('current')
wwpLeosFlowCpuRateLimitStatsArpDropped = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 6, 1, 1, 32, 1, 51), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosFlowCpuRateLimitStatsArpDropped.setStatus('current')
wwpLeosFlowCpuRateLimitStatsIcmpPassed = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 6, 1, 1, 32, 1, 52), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosFlowCpuRateLimitStatsIcmpPassed.setStatus('current')
wwpLeosFlowCpuRateLimitStatsIcmpDropped = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 6, 1, 1, 32, 1, 53), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosFlowCpuRateLimitStatsIcmpDropped.setStatus('current')
wwpLeosFlowCpuRateLimitStatsTcpSynPassed = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 6, 1, 1, 32, 1, 54), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosFlowCpuRateLimitStatsTcpSynPassed.setStatus('current')
wwpLeosFlowCpuRateLimitStatsTcpSynDropped = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 6, 1, 1, 32, 1, 55), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosFlowCpuRateLimitStatsTcpSynDropped.setStatus('current')
wwpLeosFlowCpuRateLimitStatsRapsPassed = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 6, 1, 1, 32, 1, 56), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosFlowCpuRateLimitStatsRapsPassed.setStatus('current')
wwpLeosFlowCpuRateLimitStatsRapsDropped = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 6, 1, 1, 32, 1, 57), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosFlowCpuRateLimitStatsRapsDropped.setStatus('current')
wwpLeosFlowCpuRateLimitStatsIpMgmtPassed = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 6, 1, 1, 32, 1, 58), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosFlowCpuRateLimitStatsIpMgmtPassed.setStatus('current')
wwpLeosFlowCpuRateLimitStatsIpMgmtDropped = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 6, 1, 1, 32, 1, 59), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosFlowCpuRateLimitStatsIpMgmtDropped.setStatus('current')
wwpLeosFlowCpuRateLimitStatsIpControlPassed = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 6, 1, 1, 32, 1, 60), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosFlowCpuRateLimitStatsIpControlPassed.setStatus('current')
wwpLeosFlowCpuRateLimitStatsIpControlDropped = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 6, 1, 1, 32, 1, 61), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosFlowCpuRateLimitStatsIpControlDropped.setStatus('current')
wwpLeosFlowCpuRateLimitStatsIpV6MgmtPassed = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 6, 1, 1, 32, 1, 62), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosFlowCpuRateLimitStatsIpV6MgmtPassed.setStatus('current')
wwpLeosFlowCpuRateLimitStatsIpV6MgmtDropped = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 6, 1, 1, 32, 1, 63), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosFlowCpuRateLimitStatsIpV6MgmtDropped.setStatus('current')
wwpLeosFlowCpuRateLimitStatsInet6Passed = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 6, 1, 1, 32, 1, 64), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosFlowCpuRateLimitStatsInet6Passed.setStatus('current')
wwpLeosFlowCpuRateLimitStatsInet6Dropped = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 6, 1, 1, 32, 1, 65), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosFlowCpuRateLimitStatsInet6Dropped.setStatus('current')
wwpLeosFlowCpuRateLimitStatsClearTable = MibTable((1, 3, 6, 1, 4, 1, 6141, 2, 60, 6, 1, 1, 33), )
if mibBuilder.loadTexts: wwpLeosFlowCpuRateLimitStatsClearTable.setStatus('current')
wwpLeosFlowCpuRateLimitStatsClearEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6141, 2, 60, 6, 1, 1, 33, 1), ).setIndexNames((0, "WWP-LEOS-FLOW-MIB", "wwpLeosFlowCpuRateLimitStatsClearPort"))
if mibBuilder.loadTexts: wwpLeosFlowCpuRateLimitStatsClearEntry.setStatus('current')
wwpLeosFlowCpuRateLimitStatsClearPort = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 6, 1, 1, 33, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 64)))
if mibBuilder.loadTexts: wwpLeosFlowCpuRateLimitStatsClearPort.setStatus('current')
wwpLeosFlowCpuRateLimitStatsClear = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 6, 1, 1, 33, 1, 2), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wwpLeosFlowCpuRateLimitStatsClear.setStatus('current')
wwpLeosFlowServiceLevelPortOverProvisionedTrap = NotificationType((1, 3, 6, 1, 4, 1, 6141, 2, 60, 6, 2, 0, 1)).setObjects(("WWP-LEOS-FLOW-MIB", "wwpLeosFlowServiceLevelPort"))
if mibBuilder.loadTexts: wwpLeosFlowServiceLevelPortOverProvisionedTrap.setStatus('current')
wwpLeosFlowServiceLevelPortUnderProvisionedTrap = NotificationType((1, 3, 6, 1, 4, 1, 6141, 2, 60, 6, 2, 0, 2)).setObjects(("WWP-LEOS-FLOW-MIB", "wwpLeosFlowServiceLevelPort"))
if mibBuilder.loadTexts: wwpLeosFlowServiceLevelPortUnderProvisionedTrap.setStatus('current')
wwpLeosFlowL2SacHighThreshold = NotificationType((1, 3, 6, 1, 4, 1, 6141, 2, 60, 6, 2, 0, 3)).setObjects(("WWP-LEOS-FLOW-MIB", "wwpLeosFlowL2SacPortId"), ("WWP-LEOS-FLOW-MIB", "wwpLeosFlowL2SacNetType"), ("WWP-LEOS-FLOW-MIB", "wwpLeosFlowSacNetValue"))
if mibBuilder.loadTexts: wwpLeosFlowL2SacHighThreshold.setStatus('current')
wwpLeosFlowL2SacNormalThreshold = NotificationType((1, 3, 6, 1, 4, 1, 6141, 2, 60, 6, 2, 0, 4)).setObjects(("WWP-LEOS-FLOW-MIB", "wwpLeosFlowL2SacPortId"), ("WWP-LEOS-FLOW-MIB", "wwpLeosFlowL2SacNetType"), ("WWP-LEOS-FLOW-MIB", "wwpLeosFlowSacNetValue"))
if mibBuilder.loadTexts: wwpLeosFlowL2SacNormalThreshold.setStatus('current')
wwpLeosFlowMacMotionNotification = NotificationType((1, 3, 6, 1, 4, 1, 6141, 2, 60, 6, 2, 0, 5)).setObjects(("WWP-LEOS-FLOW-MIB", "wwpLeosFlowMacMotionAttrOldPort"), ("WWP-LEOS-FLOW-MIB", "wwpLeosFlowMacMotionAttrOldVlan"), ("WWP-LEOS-FLOW-MIB", "wwpLeosFlowMacMotionAttrNewPort"), ("WWP-LEOS-FLOW-MIB", "wwpLeosFlowMacMotionAttrNewVlan"), ("WWP-LEOS-FLOW-MIB", "wwpLeosFlowMacMotionAttrMacAddr"))
if mibBuilder.loadTexts: wwpLeosFlowMacMotionNotification.setStatus('current')
wwpLeosFlowMacMotionAttrOldPort = MibScalar((1, 3, 6, 1, 4, 1, 6141, 2, 60, 6, 1, 2, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65536))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: wwpLeosFlowMacMotionAttrOldPort.setStatus('current')
wwpLeosFlowMacMotionAttrOldVlan = MibScalar((1, 3, 6, 1, 4, 1, 6141, 2, 60, 6, 1, 2, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4094))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: wwpLeosFlowMacMotionAttrOldVlan.setStatus('current')
wwpLeosFlowMacMotionAttrNewPort = MibScalar((1, 3, 6, 1, 4, 1, 6141, 2, 60, 6, 1, 2, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65536))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: wwpLeosFlowMacMotionAttrNewPort.setStatus('current')
wwpLeosFlowMacMotionAttrNewVlan = MibScalar((1, 3, 6, 1, 4, 1, 6141, 2, 60, 6, 1, 2, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4094))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: wwpLeosFlowMacMotionAttrNewVlan.setStatus('current')
wwpLeosFlowMacMotionAttrMacAddr = MibScalar((1, 3, 6, 1, 4, 1, 6141, 2, 60, 6, 1, 2, 5), MacAddress()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: wwpLeosFlowMacMotionAttrMacAddr.setStatus('current')
wwpLeosFlowServiceTotalStatsTable = MibTable((1, 3, 6, 1, 4, 1, 6141, 2, 60, 6, 1, 1, 34), )
if mibBuilder.loadTexts: wwpLeosFlowServiceTotalStatsTable.setStatus('current')
wwpLeosFlowServiceTotalStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6141, 2, 60, 6, 1, 1, 34, 1), ).setIndexNames((0, "WWP-LEOS-FLOW-MIB", "wwpLeosFlowSMappingNetType"), (0, "WWP-LEOS-FLOW-MIB", "wwpLeosFlowSMappingNetValue"), (0, "WWP-LEOS-FLOW-MIB", "wwpLeosFlowSMappingSrcType"), (0, "WWP-LEOS-FLOW-MIB", "wwpLeosFlowSMappingSrcValue"), (0, "WWP-LEOS-FLOW-MIB", "wwpLeosFlowSMappingDstType"), (0, "WWP-LEOS-FLOW-MIB", "wwpLeosFlowSMappingDstValue"), (0, "WWP-LEOS-FLOW-MIB", "wwpLeosFlowSMappingCosType"), (0, "WWP-LEOS-FLOW-MIB", "wwpLeosFlowSMappingCosValue"))
if mibBuilder.loadTexts: wwpLeosFlowServiceTotalStatsEntry.setStatus('current')
wwpLeosFlowServiceTotalStatsRxHi = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 6, 1, 1, 34, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosFlowServiceTotalStatsRxHi.setStatus('current')
wwpLeosFlowServiceTotalStatsRxLo = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 6, 1, 1, 34, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosFlowServiceTotalStatsRxLo.setStatus('current')
wwpLeosFlowServiceTotalStatsTxHi = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 6, 1, 1, 34, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosFlowServiceTotalStatsTxHi.setStatus('current')
wwpLeosFlowServiceTotalStatsTxLo = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 6, 1, 1, 34, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosFlowServiceTotalStatsTxLo.setStatus('current')
wwpLeosFlowServiceTotalStatsType = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 6, 1, 1, 34, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("forward", 1), ("drop", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosFlowServiceTotalStatsType.setStatus('current')
wwpLeosFlowPortServiceLevelTable = MibTable((1, 3, 6, 1, 4, 1, 6141, 2, 60, 6, 1, 1, 40), )
if mibBuilder.loadTexts: wwpLeosFlowPortServiceLevelTable.setStatus('current')
wwpLeosFlowPortServiceLevelEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6141, 2, 60, 6, 1, 1, 40, 1), ).setIndexNames((0, "WWP-LEOS-FLOW-MIB", "wwpLeosFlowPortServiceLevelPort"))
if mibBuilder.loadTexts: wwpLeosFlowPortServiceLevelEntry.setStatus('current')
wwpLeosFlowPortServiceLevelPort = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 6, 1, 1, 40, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosFlowPortServiceLevelPort.setStatus('current')
wwpLeosFlowPortServiceLevelMaxBandwidth = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 6, 1, 1, 40, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 8000000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wwpLeosFlowPortServiceLevelMaxBandwidth.setStatus('current')
wwpLeosFlowPortServiceLevelQueueSize = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 6, 1, 1, 40, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9))).clone(namedValues=NamedValues(("size0KB", 0), ("size16KB", 1), ("size32KB", 2), ("size64KB", 3), ("size128KB", 4), ("size256KB", 5), ("size512KB", 6), ("size1MB", 7), ("size2MB", 8), ("size4MB", 9)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wwpLeosFlowPortServiceLevelQueueSize.setStatus('current')
wwpLeosFlowPortServiceLevelQueueSizeYellow = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 6, 1, 1, 40, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("size16KB", 1), ("size32KB", 2), ("size64KB", 3), ("size128KB", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wwpLeosFlowPortServiceLevelQueueSizeYellow.setStatus('current')
wwpLeosFlowPortServiceLevelQueueSizeRed = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 6, 1, 1, 40, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("size16KB", 1), ("size32KB", 2), ("size64KB", 3), ("size128KB", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wwpLeosFlowPortServiceLevelQueueSizeRed.setStatus('current')
wwpLeosFlowPortServiceLevelFlowGroup = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 6, 1, 1, 40, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wwpLeosFlowPortServiceLevelFlowGroup.setStatus('current')
wwpLeosFlowPortServiceLevelRedCurve = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 6, 1, 1, 40, 1, 7), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 64))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: wwpLeosFlowPortServiceLevelRedCurve.setStatus('current')
wwpLeosFlowBurstConfigBacklogLimit = MibScalar((1, 3, 6, 1, 4, 1, 6141, 2, 60, 6, 1, 1, 41), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 131072))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wwpLeosFlowBurstConfigBacklogLimit.setStatus('current')
wwpLeosFlowBurstConfigMulticastLimit = MibScalar((1, 3, 6, 1, 4, 1, 6141, 2, 60, 6, 1, 1, 42), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 131072))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wwpLeosFlowBurstConfigMulticastLimit.setStatus('current')
wwpLeosFlowBurstConfigVlanPriFltrOnThld = MibScalar((1, 3, 6, 1, 4, 1, 6141, 2, 60, 6, 1, 1, 43), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wwpLeosFlowBurstConfigVlanPriFltrOnThld.setStatus('current')
wwpLeosFlowBurstConfigVlanPriFltrOffThld = MibScalar((1, 3, 6, 1, 4, 1, 6141, 2, 60, 6, 1, 1, 44), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wwpLeosFlowBurstConfigVlanPriFltrOffThld.setStatus('current')
wwpLeosFlowBurstConfigVlanPriFltrPriMatch = MibScalar((1, 3, 6, 1, 4, 1, 6141, 2, 60, 6, 1, 1, 45), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wwpLeosFlowBurstConfigVlanPriFltrPriMatch.setStatus('current')
wwpLeosFlowBurstConfigVlanPriFltrState = MibScalar((1, 3, 6, 1, 4, 1, 6141, 2, 60, 6, 1, 1, 46), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wwpLeosFlowBurstConfigVlanPriFltrState.setStatus('current')
mibBuilder.exportSymbols("WWP-LEOS-FLOW-MIB", wwpLeosFlowSMMacAddr=wwpLeosFlowSMMacAddr, wwpLeosFlowServiceLevelDirection=wwpLeosFlowServiceLevelDirection, wwpLeosFlowCpuRateLimitRstp=wwpLeosFlowCpuRateLimitRstp, wwpLeosFlowCosSync1dToExpMapTo=wwpLeosFlowCosSync1dToExpMapTo, wwpLeosFlowL2SacEntry=wwpLeosFlowL2SacEntry, wwpLeosFlowServiceLevelEntry=wwpLeosFlowServiceLevelEntry, wwpLeosFlowLearnSrcPort=wwpLeosFlowLearnSrcPort, wwpLeosFlowCpuRateLimitStatsBootpDropped=wwpLeosFlowCpuRateLimitStatsBootpDropped, wwpLeosFlowServiceStatsTxHi=wwpLeosFlowServiceStatsTxHi, wwpLeosFlowPortServiceLevelEntry=wwpLeosFlowPortServiceLevelEntry, wwpLeosFlowCpuRateLimitPort=wwpLeosFlowCpuRateLimitPort, wwpLeosFlowCpuRateLimitEnable=wwpLeosFlowCpuRateLimitEnable, wwpLeosFlowMacMotionAttrOldPort=wwpLeosFlowMacMotionAttrOldPort, wwpLeosFlowCpuRateLimitIgmp=wwpLeosFlowCpuRateLimitIgmp, wwpLeosFlowCpuRateLimitStatsRapsDropped=wwpLeosFlowCpuRateLimitStatsRapsDropped, wwpLeosFlowSMStatus=wwpLeosFlowSMStatus, wwpLeosFlowServiceRedCurveTable=wwpLeosFlowServiceRedCurveTable, wwpLeosFlowServiceLevelQueueSize=wwpLeosFlowServiceLevelQueueSize, wwpLeosFlowMIB=wwpLeosFlowMIB, wwpLeosFlowSMappingTable=wwpLeosFlowSMappingTable, wwpLeosFlowServiceTotalStatsTable=wwpLeosFlowServiceTotalStatsTable, wwpLeosFlowL2SacOperState=wwpLeosFlowL2SacOperState, wwpLeosFlowCos1dToRedCurveOffsetEntry=wwpLeosFlowCos1dToRedCurveOffsetEntry, wwpLeosFlowMIBGroups=wwpLeosFlowMIBGroups, wwpLeosFlowL2SacNormalThreshold=wwpLeosFlowL2SacNormalThreshold, wwpLeosFlow=wwpLeosFlow, wwpLeosFlowMIBCompliances=wwpLeosFlowMIBCompliances, wwpLeosFlowServiceStatsEntry=wwpLeosFlowServiceStatsEntry, wwpLeosFlowCpuRateLimitStatsPeArpPassed=wwpLeosFlowCpuRateLimitStatsPeArpPassed, wwpLeosFlowCpuRateLimitStatsRstpPassed=wwpLeosFlowCpuRateLimitStatsRstpPassed, wwpLeosFlowCosSyncIpPrecTo1dMapFrom=wwpLeosFlowCosSyncIpPrecTo1dMapFrom, wwpLeosFlowCpuRateLimitsEnable=wwpLeosFlowCpuRateLimitsEnable, wwpLeosFlowCosSyncIpPrecTo1dMapTo=wwpLeosFlowCosSyncIpPrecTo1dMapTo, wwpLeosFlowCpuRateLimitStatsClear=wwpLeosFlowCpuRateLimitStatsClear, wwpLeosFlowCpuRateLimitBootp=wwpLeosFlowCpuRateLimitBootp, wwpLeosFlowSMappingSrcValue=wwpLeosFlowSMappingSrcValue, wwpLeosFlowCpuRateLimitStatsInet6Passed=wwpLeosFlowCpuRateLimitStatsInet6Passed, wwpLeosFlowMacMotionAttrNewVlan=wwpLeosFlowMacMotionAttrNewVlan, wwpLeosFlowServiceTotalStatsRxHi=wwpLeosFlowServiceTotalStatsRxHi, wwpLeosFlowCpuRateLimitStatsDfltDropped=wwpLeosFlowCpuRateLimitStatsDfltDropped, wwpLeosFlowCpuRateLimitStatsRstpDropped=wwpLeosFlowCpuRateLimitStatsRstpDropped, wwpLeosFlowCosSyncIpPrecTo1dTable=wwpLeosFlowCosSyncIpPrecTo1dTable, wwpLeosFlowCpuRateLimitStatsCxeTxPassed=wwpLeosFlowCpuRateLimitStatsCxeTxPassed, wwpLeosFlowCpuRateLimitStatsMstpPassed=wwpLeosFlowCpuRateLimitStatsMstpPassed, wwpLeosFlowPortServiceLevelRedCurve=wwpLeosFlowPortServiceLevelRedCurve, wwpLeosFlowCpuRateLimitStatsDot1xPassed=wwpLeosFlowCpuRateLimitStatsDot1xPassed, wwpLeosFlowCpuRateLimitDot1x=wwpLeosFlowCpuRateLimitDot1x, wwpLeosFlowCpuRateLimitTcpSyn=wwpLeosFlowCpuRateLimitTcpSyn, wwpLeosFlowCpuRateLimitStatsCfmPassed=wwpLeosFlowCpuRateLimitStatsCfmPassed, wwpLeosFlowBurstConfigVlanPriFltrState=wwpLeosFlowBurstConfigVlanPriFltrState, wwpLeosFlowLearnSrcTag=wwpLeosFlowLearnSrcTag, wwpLeosFlowCosSyncStdPhbTo1dMapTo=wwpLeosFlowCosSyncStdPhbTo1dMapTo, wwpLeosFlowServiceMapStatus=wwpLeosFlowServiceMapStatus, wwpLeosFlowLearnSrcPri=wwpLeosFlowLearnSrcPri, wwpLeosFlowCosSync1dToExpMapFrom=wwpLeosFlowCosSync1dToExpMapFrom, wwpLeosFlowServiceLevelFlowGroup=wwpLeosFlowServiceLevelFlowGroup, wwpLeosFlowServiceACMaxDynamicMacCount=wwpLeosFlowServiceACMaxDynamicMacCount, wwpLeosFlowServiceLevelPortOverProvisionedTrap=wwpLeosFlowServiceLevelPortOverProvisionedTrap, wwpLeosFlowCos1dToRedCurveOffsetTable=wwpLeosFlowCos1dToRedCurveOffsetTable, wwpLeosFlowServiceRedCurveUnset=wwpLeosFlowServiceRedCurveUnset, wwpLeosFlowCpuRateLimitCxeRx=wwpLeosFlowCpuRateLimitCxeRx, wwpLeosFlowMacFindVlanId=wwpLeosFlowMacFindVlanId, wwpLeosFlowLearnTable=wwpLeosFlowLearnTable, wwpLeosFlowSMappingStatsTable=wwpLeosFlowSMappingStatsTable, wwpLeosFlowServiceMapDstPort=wwpLeosFlowServiceMapDstPort, wwpLeosFlowL2SacCurMac=wwpLeosFlowL2SacCurMac, wwpLeosFlowCpuRateLimitStatsClearEntry=wwpLeosFlowCpuRateLimitStatsClearEntry, wwpLeosFlowServiceRedCurveState=wwpLeosFlowServiceRedCurveState, wwpLeosFlowServiceRedCurveIndex=wwpLeosFlowServiceRedCurveIndex, wwpLeosFlowNotifAttrs=wwpLeosFlowNotifAttrs, wwpLeosFlowGlobal=wwpLeosFlowGlobal, wwpLeosFlowCosSyncExpTo1dEntry=wwpLeosFlowCosSyncExpTo1dEntry, wwpLeosFlowL2SacCurFilteredMac=wwpLeosFlowL2SacCurFilteredMac, wwpLeosFlowCpuRateLimitInet6=wwpLeosFlowCpuRateLimitInet6, wwpLeosFlowServiceRedCurveName=wwpLeosFlowServiceRedCurveName, wwpLeosFlowCpuRateLimitStatsCfmDropped=wwpLeosFlowCpuRateLimitStatsCfmDropped, wwpLeosFlowLearnVid=wwpLeosFlowLearnVid, wwpLeosFlowServiceStatsType=wwpLeosFlowServiceStatsType, wwpLeosFlowServiceRedCurveEntry=wwpLeosFlowServiceRedCurveEntry, wwpLeosFlowCpuRateLimitPeArp=wwpLeosFlowCpuRateLimitPeArp, wwpLeosFlowCosSyncStdPhbTo1dMapFrom=wwpLeosFlowCosSyncStdPhbTo1dMapFrom, wwpLeosFlowLearnEntry=wwpLeosFlowLearnEntry, wwpLeosFlowSMappingDstSlid=wwpLeosFlowSMappingDstSlid, wwpLeosFlowCosSyncExpTo1dMapFrom=wwpLeosFlowCosSyncExpTo1dMapFrom, wwpLeosFlowCpuRateLimitStatsTwampRspPassed=wwpLeosFlowCpuRateLimitStatsTwampRspPassed, wwpLeosFlowCpuRateLimitStatsIpMgmtDropped=wwpLeosFlowCpuRateLimitStatsIpMgmtDropped, wwpLeosFlowSMappingCpuPort=wwpLeosFlowSMappingCpuPort, wwpLeosFlowServiceMapSrcTag=wwpLeosFlowServiceMapSrcTag, wwpLeosFlowCpuRateLimitStatsIpMgmtPassed=wwpLeosFlowCpuRateLimitStatsIpMgmtPassed, wwpLeosFlowCpuRateLimitStatsEntry=wwpLeosFlowCpuRateLimitStatsEntry, wwpLeosFlowCpuRateLimitTwamp=wwpLeosFlowCpuRateLimitTwamp, wwpLeosFlowCpuRateLimitStatsClearPort=wwpLeosFlowCpuRateLimitStatsClearPort, wwpLeosFlowCosSyncStdPhbTo1dTable=wwpLeosFlowCosSyncStdPhbTo1dTable, wwpLeosFlowCpuRateLimitStatsPvstDropped=wwpLeosFlowCpuRateLimitStatsPvstDropped, wwpLeosFlowL2SacTable=wwpLeosFlowL2SacTable, wwpLeosFlowServiceMapRemarkPri=wwpLeosFlowServiceMapRemarkPri, wwpLeosFlowPortServiceLevelPort=wwpLeosFlowPortServiceLevelPort, wwpLeosFlowLearnAddrType=wwpLeosFlowLearnAddrType, wwpLeosFlowSMTag=wwpLeosFlowSMTag, wwpLeosFlowServiceLevelFlowGroupState=wwpLeosFlowServiceLevelFlowGroupState, wwpLeosFlowMacFindVlanTag=wwpLeosFlowMacFindVlanTag, wwpLeosFlowLearnDstTag=wwpLeosFlowLearnDstTag, wwpLeosFlowBurstConfigVlanPriFltrOffThld=wwpLeosFlowBurstConfigVlanPriFltrOffThld, wwpLeosFlowSMappingStatsRxLo=wwpLeosFlowSMappingStatsRxLo, wwpLeosFlowL2SacLimit=wwpLeosFlowL2SacLimit, wwpLeosFlowCpuRateLimitStatsCftDropped=wwpLeosFlowCpuRateLimitStatsCftDropped, wwpLeosFlowCpuRateLimitStatsMultiCastDropped=wwpLeosFlowCpuRateLimitStatsMultiCastDropped, wwpLeosFlowCosMapPCPTo1dTable=wwpLeosFlowCosMapPCPTo1dTable, wwpLeosFlowPriRemapEntry=wwpLeosFlowPriRemapEntry, wwpLeosFlowCpuRateLimitStatsLacpPassed=wwpLeosFlowCpuRateLimitStatsLacpPassed, wwpLeosFlowCpuRateLimitStatsIpControlDropped=wwpLeosFlowCpuRateLimitStatsIpControlDropped, wwpLeosFlowSMappingCosType=wwpLeosFlowSMappingCosType, wwpLeosFlowCpuRateLimitCft=wwpLeosFlowCpuRateLimitCft, wwpLeosFlowCpuRateLimitStatsLpbkPassed=wwpLeosFlowCpuRateLimitStatsLpbkPassed, wwpLeosFlowServiceRedCurveDropProbability=wwpLeosFlowServiceRedCurveDropProbability, wwpLeosFlowServiceACDynamicNonFilteredMacCount=wwpLeosFlowServiceACDynamicNonFilteredMacCount, wwpLeosFlowCpuRateLimitStatsIcmpPassed=wwpLeosFlowCpuRateLimitStatsIcmpPassed, wwpLeosFlowServiceACTable=wwpLeosFlowServiceACTable, wwpLeosFlowServiceACEntry=wwpLeosFlowServiceACEntry, wwpLeosFlowServiceStatsTable=wwpLeosFlowServiceStatsTable, wwpLeosFlowMacMotionNotification=wwpLeosFlowMacMotionNotification, wwpLeosFlowCpuRateLimitStatsCxeRxDropped=wwpLeosFlowCpuRateLimitStatsCxeRxDropped, wwpLeosFlowMacMotionAttrNewPort=wwpLeosFlowMacMotionAttrNewPort, wwpLeosFlowServiceLevelName=wwpLeosFlowServiceLevelName, wwpLeosFlowSMappingStatsTxHi=wwpLeosFlowSMappingStatsTxHi, wwpLeosFlowServiceMappingTable=wwpLeosFlowServiceMappingTable, wwpLeosFlowMacFindMacAddr=wwpLeosFlowMacFindMacAddr, wwpLeosFlowServiceMapProtocolPortNum=wwpLeosFlowServiceMapProtocolPortNum, wwpLeosFlowSMappingSrcType=wwpLeosFlowSMappingSrcType, wwpLeosFlowCpuRateLimitIpControl=wwpLeosFlowCpuRateLimitIpControl, wwpLeosFlowCpuRateLimitInet=wwpLeosFlowCpuRateLimitInet, wwpLeosFlowServiceLevelPortUnderProvisionedTrap=wwpLeosFlowServiceLevelPortUnderProvisionedTrap, wwpLeosFlowNotifications=wwpLeosFlowNotifications, PYSNMP_MODULE_ID=wwpLeosFlowMIB, wwpLeosFlowL2SacPortId=wwpLeosFlowL2SacPortId, wwpLeosFlowCpuRateLimitStatsDot1xDropped=wwpLeosFlowCpuRateLimitStatsDot1xDropped, wwpLeosFlowCosSyncExpTo1dTable=wwpLeosFlowCosSyncExpTo1dTable, wwpLeosFlowCpuRateLimitStatsIpV6MgmtPassed=wwpLeosFlowCpuRateLimitStatsIpV6MgmtPassed, wwpLeosFlowServiceTotalStatsTxHi=wwpLeosFlowServiceTotalStatsTxHi, wwpLeosFlowMacFindEntry=wwpLeosFlowMacFindEntry, wwpLeosFlowCpuRateLimitEntry=wwpLeosFlowCpuRateLimitEntry, wwpLeosFlowL2SacNetType=wwpLeosFlowL2SacNetType, wwpLeosFlowCpuRateLimitStatsPeArpDropped=wwpLeosFlowCpuRateLimitStatsPeArpDropped, wwpLeosFlowCpuRateLimitStatsInet6Dropped=wwpLeosFlowCpuRateLimitStatsInet6Dropped, wwpLeosFlowCosSync1dToExpTable=wwpLeosFlowCosSync1dToExpTable, wwpLeosFlowStaticMacTable=wwpLeosFlowStaticMacTable, wwpLeosFlowCpuRateLimitLldp=wwpLeosFlowCpuRateLimitLldp, wwpLeosFlowPortServiceLevelMaxBandwidth=wwpLeosFlowPortServiceLevelMaxBandwidth, wwpLeosFlowCpuRateLimitMultiCast=wwpLeosFlowCpuRateLimitMultiCast, wwpLeosFlowCpuRateLimitStatsInetPassed=wwpLeosFlowCpuRateLimitStatsInetPassed, wwpLeosFlowL2SacHighThreshold=wwpLeosFlowL2SacHighThreshold, wwpLeosFlowServiceLevelShareEligibility=wwpLeosFlowServiceLevelShareEligibility, wwpLeosFlowBurstConfigVlanPriFltrOnThld=wwpLeosFlowBurstConfigVlanPriFltrOnThld, wwpLeosFlowL2SacTrapState=wwpLeosFlowL2SacTrapState, wwpLeosFlowCpuRateLimitStatsTable=wwpLeosFlowCpuRateLimitStatsTable, wwpLeosFlowCpuRateLimitMstp=wwpLeosFlowCpuRateLimitMstp, wwpLeosFlowCosMapPCPTo1dEntry=wwpLeosFlowCosMapPCPTo1dEntry, wwpLeosFlowCosMap1dToPCPMapTo=wwpLeosFlowCosMap1dToPCPMapTo, wwpLeosFlowServiceMapVid=wwpLeosFlowServiceMapVid, wwpLeosFlowServiceMapSrcPri=wwpLeosFlowServiceMapSrcPri, wwpLeosFlowStaticMacEntry=wwpLeosFlowStaticMacEntry, wwpLeosFlowServiceTotalStatsEntry=wwpLeosFlowServiceTotalStatsEntry, wwpLeosFlowServiceACStatus=wwpLeosFlowServiceACStatus, wwpLeosFlowCpuRateLimitStatsCftPassed=wwpLeosFlowCpuRateLimitStatsCftPassed, wwpLeosFlowServiceMapPriRemarkStatus=wwpLeosFlowServiceMapPriRemarkStatus, wwpLeosFlowCosSyncIpPrecTo1dEntry=wwpLeosFlowCosSyncIpPrecTo1dEntry, wwpLeosFlowServiceACPortId=wwpLeosFlowServiceACPortId, wwpLeosFlowCpuRateLimitStatsArpDropped=wwpLeosFlowCpuRateLimitStatsArpDropped, wwpLeosFlowSMappingSrcSlid=wwpLeosFlowSMappingSrcSlid, wwpLeosFlowCpuRateLimitIpMgmt=wwpLeosFlowCpuRateLimitIpMgmt, wwpLeosFlowAgeTimeState=wwpLeosFlowAgeTimeState, wwpLeosFlowUserPri=wwpLeosFlowUserPri, wwpLeosFlowSMappingCosValue=wwpLeosFlowSMappingCosValue, wwpLeosFlowServiceMapDstSlidId=wwpLeosFlowServiceMapDstSlidId, wwpLeosFlowCpuRateLimitStatsIgmpDropped=wwpLeosFlowCpuRateLimitStatsIgmpDropped, wwpLeosFlowCpuRateLimitStatsMultiCastPassed=wwpLeosFlowCpuRateLimitStatsMultiCastPassed, wwpLeosFlowServiceStatsRxLo=wwpLeosFlowServiceStatsRxLo, wwpLeosFlowCos1dToRedCurveOffsetValue=wwpLeosFlowCos1dToRedCurveOffsetValue, wwpLeosFlowCpuRateLimitStatsLldpPassed=wwpLeosFlowCpuRateLimitStatsLldpPassed, wwpLeosFlowL2SacRowStatus=wwpLeosFlowL2SacRowStatus, wwpLeosFlowServiceTotalStatsRxLo=wwpLeosFlowServiceTotalStatsRxLo, wwpLeosFlowCosMap1dToPCPTable=wwpLeosFlowCosMap1dToPCPTable, wwpLeosFlowSMappingNetType=wwpLeosFlowSMappingNetType, wwpLeosFlowCpuRateLimitStatsOamPassed=wwpLeosFlowCpuRateLimitStatsOamPassed, wwpLeosFlowCpuRateLimitStatsBroadCastPassed=wwpLeosFlowCpuRateLimitStatsBroadCastPassed, wwpLeosFlowCosSyncStdPhbTo1dEntry=wwpLeosFlowCosSyncStdPhbTo1dEntry, wwpLeosFlowAgeTime=wwpLeosFlowAgeTime, wwpLeosFlowCpuRateLimitStatsRmtLpbkDropped=wwpLeosFlowCpuRateLimitStatsRmtLpbkDropped, wwpLeosFlowServiceLevelTable=wwpLeosFlowServiceLevelTable, wwpLeosFlowCpuRateLimitTwampRsp=wwpLeosFlowCpuRateLimitTwampRsp, wwpLeosFlowCpuRateLimitStatsIpControlPassed=wwpLeosFlowCpuRateLimitStatsIpControlPassed, wwpLeosFlowServiceRedCurveMinThreshold=wwpLeosFlowServiceRedCurveMinThreshold, wwpLeosFlowServiceLevelPort=wwpLeosFlowServiceLevelPort, wwpLeosFlowCpuRateLimitStatsDfltPassed=wwpLeosFlowCpuRateLimitStatsDfltPassed, wwpLeosFlowStrictQueuingState=wwpLeosFlowStrictQueuingState, wwpLeosFlowCpuRateLimitIpV6Mgmt=wwpLeosFlowCpuRateLimitIpV6Mgmt, wwpLeosFlowSMappingStatsRxHi=wwpLeosFlowSMappingStatsRxHi, wwpLeosFlowBwCalcMode=wwpLeosFlowBwCalcMode, wwpLeosFlowCpuRateLimitStatsEprArpPassed=wwpLeosFlowCpuRateLimitStatsEprArpPassed, wwpLeosFlowSMappingStatsEntry=wwpLeosFlowSMappingStatsEntry, wwpLeosFlowCosSync1dToExpEntry=wwpLeosFlowCosSync1dToExpEntry, wwpLeosFlowCpuRateLimitStatsTwampPassed=wwpLeosFlowCpuRateLimitStatsTwampPassed, wwpLeosFlowSMappingStatsTxLo=wwpLeosFlowSMappingStatsTxLo, wwpLeosFlowCpuRateLimitStatsRmtLpbkPassed=wwpLeosFlowCpuRateLimitStatsRmtLpbkPassed, wwpLeosFlowCpuRateLimitStatsLacpDropped=wwpLeosFlowCpuRateLimitStatsLacpDropped, wwpLeosFlowPriRemapTable=wwpLeosFlowPriRemapTable, wwpLeosFlowCpuRateLimitStatsPvstPassed=wwpLeosFlowCpuRateLimitStatsPvstPassed, wwpLeosFlowCpuRateLimitStatsTcpSynPassed=wwpLeosFlowCpuRateLimitStatsTcpSynPassed, wwpLeosFlowServiceLevelPirBW=wwpLeosFlowServiceLevelPirBW, wwpLeosFlowSMappingDstValue=wwpLeosFlowSMappingDstValue, wwpLeosFlowCos1dToRedCurveOffset1dValue=wwpLeosFlowCos1dToRedCurveOffset1dValue, wwpLeosFlowCpuRateLimitCfm=wwpLeosFlowCpuRateLimitCfm, wwpLeosFlowServiceTotalStatsTxLo=wwpLeosFlowServiceTotalStatsTxLo, wwpLeosFlowLearnDstPort=wwpLeosFlowLearnDstPort, wwpLeosFlowSacNetValue=wwpLeosFlowSacNetValue, wwpLeosFlowServiceStatsRxHi=wwpLeosFlowServiceStatsRxHi, wwpLeosFlowServiceMappingCosRedMappingState=wwpLeosFlowServiceMappingCosRedMappingState, wwpLeosFlowCosMapPCPTo1dMapFrom=wwpLeosFlowCosMapPCPTo1dMapFrom, wwpLeosFlowCpuRateLimitStatsIgmpPassed=wwpLeosFlowCpuRateLimitStatsIgmpPassed, wwpLeosFlowServiceTotalStatsType=wwpLeosFlowServiceTotalStatsType, wwpLeosFlowMacMotionEventsInterval=wwpLeosFlowMacMotionEventsInterval, wwpLeosFlowServiceStatus=wwpLeosFlowServiceStatus, wwpLeosFlowCosMapPCPTo1dMapTo=wwpLeosFlowCosMapPCPTo1dMapTo, wwpLeosFlowCpuRateLimitStatsIcmpDropped=wwpLeosFlowCpuRateLimitStatsIcmpDropped, wwpLeosFlowCpuRateLimitLpbk=wwpLeosFlowCpuRateLimitLpbk, wwpLeosFlowPortServiceLevelQueueSize=wwpLeosFlowPortServiceLevelQueueSize, wwpLeosFlowCpuRateLimitStatsIpV6MgmtDropped=wwpLeosFlowCpuRateLimitStatsIpV6MgmtDropped, wwpLeosFlowCpuRateLimitStatsMstpDropped=wwpLeosFlowCpuRateLimitStatsMstpDropped, wwpLeosFlowServiceAllRedCurveUnset=wwpLeosFlowServiceAllRedCurveUnset, wwpLeosFlowCpuRateLimitStatsPort=wwpLeosFlowCpuRateLimitStatsPort, wwpLeosFlowCpuRateLimitLacp=wwpLeosFlowCpuRateLimitLacp, wwpLeosFlowCosSyncExpTo1dMapTo=wwpLeosFlowCosSyncExpTo1dMapTo, wwpLeosFlowCosMap1dToPCPMapFrom=wwpLeosFlowCosMap1dToPCPMapFrom, wwpLeosFlowServiceACForwardLearning=wwpLeosFlowServiceACForwardLearning, wwpLeosFlowServiceStatsTxLo=wwpLeosFlowServiceStatsTxLo, wwpLeosFlowServiceMapSrcSlidId=wwpLeosFlowServiceMapSrcSlidId, wwpLeosFlowSMappingDstType=wwpLeosFlowSMappingDstType, wwpLeosFlowSMappingRedCurveOffset=wwpLeosFlowSMappingRedCurveOffset, wwpLeosFlowBurstConfigVlanPriFltrPriMatch=wwpLeosFlowBurstConfigVlanPriFltrPriMatch, wwpLeosFlowCpuRateLimitStatsRapsPassed=wwpLeosFlowCpuRateLimitStatsRapsPassed, wwpLeosFlowRemappedPri=wwpLeosFlowRemappedPri, wwpLeosFlowCpuRateLimitOam=wwpLeosFlowCpuRateLimitOam, wwpLeosFlowCpuRateLimitBroadCast=wwpLeosFlowCpuRateLimitBroadCast, wwpLeosFlowPortServiceLevelQueueSizeRed=wwpLeosFlowPortServiceLevelQueueSizeRed, wwpLeosFlowCpuRateLimitStatsTwampDropped=wwpLeosFlowCpuRateLimitStatsTwampDropped, wwpLeosFlowCpuRateLimitStatsTcpSynDropped=wwpLeosFlowCpuRateLimitStatsTcpSynDropped, wwpLeosFlowLearnType=wwpLeosFlowLearnType, wwpLeosFlowCpuRateLimitStatsMplsDropped=wwpLeosFlowCpuRateLimitStatsMplsDropped, wwpLeosFlowSMappingStatsType=wwpLeosFlowSMappingStatsType, wwpLeosFlowPortServiceLevelQueueSizeYellow=wwpLeosFlowPortServiceLevelQueueSizeYellow, wwpLeosFlowCpuRateLimitArp=wwpLeosFlowCpuRateLimitArp, wwpLeosFlowServiceRedCurveId=wwpLeosFlowServiceRedCurveId, wwpLeosFlowServiceMapDstTag=wwpLeosFlowServiceMapDstTag, wwpLeosFlowLearnIsFiltered=wwpLeosFlowLearnIsFiltered)
mibBuilder.exportSymbols("WWP-LEOS-FLOW-MIB", wwpLeosFlowBurstConfigBacklogLimit=wwpLeosFlowBurstConfigBacklogLimit, wwpLeosFlowCpuRateLimitCxeTx=wwpLeosFlowCpuRateLimitCxeTx, wwpLeosFlowCpuRateLimitStatsInetDropped=wwpLeosFlowCpuRateLimitStatsInetDropped, wwpLeosFlowPortServiceLevelTable=wwpLeosFlowPortServiceLevelTable, wwpLeosFlowServiceLevelDropEligibility=wwpLeosFlowServiceLevelDropEligibility, wwpLeosFlowServiceMapProtocolType=wwpLeosFlowServiceMapProtocolType, wwpLeosFlowMIBConformance=wwpLeosFlowMIBConformance, wwpLeosFlowCpuRateLimitStatsTwampRspDropped=wwpLeosFlowCpuRateLimitStatsTwampRspDropped, wwpLeosFlowSMappingStatus=wwpLeosFlowSMappingStatus, PriorityMapping=PriorityMapping, wwpLeosFlowCpuRateLimitPvst=wwpLeosFlowCpuRateLimitPvst, wwpLeosFlowCpuRateLimitStatsBootpPassed=wwpLeosFlowCpuRateLimitStatsBootpPassed, wwpLeosFlowCpuRateLimitRmtLpbk=wwpLeosFlowCpuRateLimitRmtLpbk, wwpLeosFlowCpuRateLimitStatsClearTable=wwpLeosFlowCpuRateLimitStatsClearTable, wwpLeosFlowServiceMappingEntry=wwpLeosFlowServiceMappingEntry, wwpLeosFlowNotificationPrefix=wwpLeosFlowNotificationPrefix, wwpLeosFlowMacFindTable=wwpLeosFlowMacFindTable, wwpLeosFlowMacFindPort=wwpLeosFlowMacFindPort, wwpLeosFlowCpuRateLimitTable=wwpLeosFlowCpuRateLimitTable, wwpLeosFlowServiceRedCurveMaxThreshold=wwpLeosFlowServiceRedCurveMaxThreshold, wwpLeosFlowLearnAddr=wwpLeosFlowLearnAddr, wwpLeosFlowServiceACDynamicFilteredMacCount=wwpLeosFlowServiceACDynamicFilteredMacCount, wwpLeosFlowPortServiceLevelFlowGroup=wwpLeosFlowPortServiceLevelFlowGroup, wwpLeosFlowServiceLevelId=wwpLeosFlowServiceLevelId, wwpLeosFlowCosMap1dToPCPEntry=wwpLeosFlowCosMap1dToPCPEntry, wwpLeosFlowCpuRateLimitStatsCxeRxPassed=wwpLeosFlowCpuRateLimitStatsCxeRxPassed, wwpLeosFlowCpuRateLimitStatsMplsPassed=wwpLeosFlowCpuRateLimitStatsMplsPassed, wwpLeosFlowServiceMapSrcPort=wwpLeosFlowServiceMapSrcPort, wwpLeosFlowMacMotionEventsEnable=wwpLeosFlowMacMotionEventsEnable, wwpLeosFlowCpuRateLimitStatsOamDropped=wwpLeosFlowCpuRateLimitStatsOamDropped, wwpLeosFlowCpuRateLimitEprArp=wwpLeosFlowCpuRateLimitEprArp, wwpLeosFlowCpuRateLimitStatsLpbkDropped=wwpLeosFlowCpuRateLimitStatsLpbkDropped, wwpLeosFlowServiceLevelQueueSizeRed=wwpLeosFlowServiceLevelQueueSizeRed, wwpLeosFlowCpuRateLimitIcmp=wwpLeosFlowCpuRateLimitIcmp, wwpLeosFlowMIBObjects=wwpLeosFlowMIBObjects, wwpLeosFlowCpuRateLimitStatsLldpDropped=wwpLeosFlowCpuRateLimitStatsLldpDropped, wwpLeosFlowCpuRateLimitStatsArpPassed=wwpLeosFlowCpuRateLimitStatsArpPassed, wwpLeosFlowCpuRateLimitStatsBroadCastDropped=wwpLeosFlowCpuRateLimitStatsBroadCastDropped, wwpLeosFlowCpuRateLimitStatsEprArpDropped=wwpLeosFlowCpuRateLimitStatsEprArpDropped, wwpLeosFlowSMappingEntry=wwpLeosFlowSMappingEntry, wwpLeosFlowSMVid=wwpLeosFlowSMVid, wwpLeosFlowServiceLevelPriority=wwpLeosFlowServiceLevelPriority, wwpLeosFlowMacMotionAttrOldVlan=wwpLeosFlowMacMotionAttrOldVlan, wwpLeosFlowServiceACVid=wwpLeosFlowServiceACVid, wwpLeosFlowCpuRateLimitDflt=wwpLeosFlowCpuRateLimitDflt, wwpLeosFlowCpuRateLimitMpls=wwpLeosFlowCpuRateLimitMpls, wwpLeosFlowBurstConfigMulticastLimit=wwpLeosFlowBurstConfigMulticastLimit, wwpLeosFlowServiceLevelCirBW=wwpLeosFlowServiceLevelCirBW, wwpLeosFlowCpuRateLimitStatsCxeTxDropped=wwpLeosFlowCpuRateLimitStatsCxeTxDropped, wwpLeosFlowServiceLevelQueueSizeYellow=wwpLeosFlowServiceLevelQueueSizeYellow, wwpLeosFlowSMPortId=wwpLeosFlowSMPortId, wwpLeosFlowSMappingNetValue=wwpLeosFlowSMappingNetValue, wwpLeosFlowMacMotionAttrMacAddr=wwpLeosFlowMacMotionAttrMacAddr, wwpLeosFlowCpuRateLimitRaps=wwpLeosFlowCpuRateLimitRaps)
