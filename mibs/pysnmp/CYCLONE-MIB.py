#
# PySNMP MIB module CYCLONE-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/CYCLONE-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 18:18:52 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, OctetString, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "Integer", "OctetString", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsIntersection, SingleValueConstraint, ValueSizeConstraint, ConstraintsUnion, ValueRangeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsIntersection", "SingleValueConstraint", "ValueSizeConstraint", "ConstraintsUnion", "ValueRangeConstraint")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
Gauge32, Counter64, Integer32, NotificationType, IpAddress, ObjectIdentity, enterprises, Bits, MibScalar, MibTable, MibTableRow, MibTableColumn, Unsigned32, MibIdentifier, iso, Counter32, ModuleIdentity, TimeTicks = mibBuilder.importSymbols("SNMPv2-SMI", "Gauge32", "Counter64", "Integer32", "NotificationType", "IpAddress", "ObjectIdentity", "enterprises", "Bits", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Unsigned32", "MibIdentifier", "iso", "Counter32", "ModuleIdentity", "TimeTicks")
TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString")
adaptec = MibIdentifier((1, 3, 6, 1, 4, 1, 795))
storagemanagement = MibIdentifier((1, 3, 6, 1, 4, 1, 795, 2))
cyclone = MibIdentifier((1, 3, 6, 1, 4, 1, 795, 2, 5))
cycTraps = MibIdentifier((1, 3, 6, 1, 4, 1, 795, 2, 5, 9000))
cycManagerID = MibScalar((1, 3, 6, 1, 4, 1, 795, 2, 5, 9000, 9001), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cycManagerID.setStatus('mandatory')
cycHostAdapterID = MibScalar((1, 3, 6, 1, 4, 1, 795, 2, 5, 9000, 9002), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cycHostAdapterID.setStatus('mandatory')
cycHostAdapterNumber = MibScalar((1, 3, 6, 1, 4, 1, 795, 2, 5, 9000, 9003), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cycHostAdapterNumber.setStatus('mandatory')
cycVendor = MibScalar((1, 3, 6, 1, 4, 1, 795, 2, 5, 9000, 9004), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 8))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cycVendor.setStatus('mandatory')
cycProduct = MibScalar((1, 3, 6, 1, 4, 1, 795, 2, 5, 9000, 9005), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cycProduct.setStatus('mandatory')
cycControllerModel = MibScalar((1, 3, 6, 1, 4, 1, 795, 2, 5, 9000, 9006), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cycControllerModel.setStatus('mandatory')
cycBusNumber = MibScalar((1, 3, 6, 1, 4, 1, 795, 2, 5, 9000, 9007), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cycBusNumber.setStatus('mandatory')
cycChannelNumber = MibScalar((1, 3, 6, 1, 4, 1, 795, 2, 5, 9000, 9008), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cycChannelNumber.setStatus('mandatory')
cycScsiTargetID = MibScalar((1, 3, 6, 1, 4, 1, 795, 2, 5, 9000, 9009), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cycScsiTargetID.setStatus('mandatory')
cycLun = MibScalar((1, 3, 6, 1, 4, 1, 795, 2, 5, 9000, 9010), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cycLun.setStatus('mandatory')
cycArrayName = MibScalar((1, 3, 6, 1, 4, 1, 795, 2, 5, 9000, 9011), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cycArrayName.setStatus('mandatory')
cycMisCompares = MibScalar((1, 3, 6, 1, 4, 1, 795, 2, 5, 9000, 9012), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cycMisCompares.setStatus('mandatory')
cycDriver = MibScalar((1, 3, 6, 1, 4, 1, 795, 2, 5, 9000, 9013), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cycDriver.setStatus('mandatory')
cycManager = MibScalar((1, 3, 6, 1, 4, 1, 795, 2, 5, 9000, 9014), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cycManager.setStatus('mandatory')
cycOldArrayName = MibScalar((1, 3, 6, 1, 4, 1, 795, 2, 5, 9000, 9015), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cycOldArrayName.setStatus('mandatory')
cycNewArrayName = MibScalar((1, 3, 6, 1, 4, 1, 795, 2, 5, 9000, 9016), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cycNewArrayName.setStatus('mandatory')
cycPriority = MibScalar((1, 3, 6, 1, 4, 1, 795, 2, 5, 9000, 9017), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cycPriority.setStatus('mandatory')
cycSenseInfo = MibScalar((1, 3, 6, 1, 4, 1, 795, 2, 5, 9000, 9018), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cycSenseInfo.setStatus('mandatory')
sCSISmart1 = NotificationType((1, 3, 6, 1, 4, 1, 795, 2, 5) + (0,101))
sCSISmart2 = NotificationType((1, 3, 6, 1, 4, 1, 795, 2, 5) + (0,102))
sCSISmart3 = NotificationType((1, 3, 6, 1, 4, 1, 795, 2, 5) + (0,107))
sCSISmart4 = NotificationType((1, 3, 6, 1, 4, 1, 795, 2, 5) + (0,108)).setObjects(("CYCLONE-MIB", "cycHostAdapterNumber"), ("CYCLONE-MIB", "cycHostAdapterID"), ("CYCLONE-MIB", "cycManagerID"))
sCSISmart5 = NotificationType((1, 3, 6, 1, 4, 1, 795, 2, 5) + (0,109)).setObjects(("CYCLONE-MIB", "cycHostAdapterNumber"), ("CYCLONE-MIB", "cycHostAdapterID"), ("CYCLONE-MIB", "cycManagerID"))
sCSISmart6 = NotificationType((1, 3, 6, 1, 4, 1, 795, 2, 5) + (0,110)).setObjects(("CYCLONE-MIB", "cycHostAdapterNumber"))
sCSISmart7 = NotificationType((1, 3, 6, 1, 4, 1, 795, 2, 5) + (0,111)).setObjects(("CYCLONE-MIB", "cycHostAdapterNumber"))
sCSISmart8 = NotificationType((1, 3, 6, 1, 4, 1, 795, 2, 5) + (0,112)).setObjects(("CYCLONE-MIB", "cycHostAdapterNumber"), ("CYCLONE-MIB", "cycScsiTargetID"), ("CYCLONE-MIB", "cycLun"))
sCSISmart9 = NotificationType((1, 3, 6, 1, 4, 1, 795, 2, 5) + (0,113)).setObjects(("CYCLONE-MIB", "cycHostAdapterNumber"), ("CYCLONE-MIB", "cycScsiTargetID"), ("CYCLONE-MIB", "cycLun"), ("CYCLONE-MIB", "cycVendor"), ("CYCLONE-MIB", "cycProduct"))
sCSISmart10 = NotificationType((1, 3, 6, 1, 4, 1, 795, 2, 5) + (0,114)).setObjects(("CYCLONE-MIB", "cycHostAdapterNumber"), ("CYCLONE-MIB", "cycScsiTargetID"), ("CYCLONE-MIB", "cycLun"))
sCSISmart11 = NotificationType((1, 3, 6, 1, 4, 1, 795, 2, 5) + (0,115)).setObjects(("CYCLONE-MIB", "cycHostAdapterNumber"), ("CYCLONE-MIB", "cycScsiTargetID"), ("CYCLONE-MIB", "cycLun"), ("CYCLONE-MIB", "cycVendor"), ("CYCLONE-MIB", "cycProduct"))
sCSISmart12 = NotificationType((1, 3, 6, 1, 4, 1, 795, 2, 5) + (0,116)).setObjects(("CYCLONE-MIB", "cycHostAdapterNumber"), ("CYCLONE-MIB", "cycScsiTargetID"), ("CYCLONE-MIB", "cycLun"), ("CYCLONE-MIB", "cycVendor"), ("CYCLONE-MIB", "cycProduct"), ("CYCLONE-MIB", "cycSenseInfo"))
sCSISmart13 = NotificationType((1, 3, 6, 1, 4, 1, 795, 2, 5) + (0,117))
sCSISmart14 = NotificationType((1, 3, 6, 1, 4, 1, 795, 2, 5) + (0,118))
sCSISmart15 = NotificationType((1, 3, 6, 1, 4, 1, 795, 2, 5) + (0,119))
sCSISmart16 = NotificationType((1, 3, 6, 1, 4, 1, 795, 2, 5) + (0,120))
sCSISmart17 = NotificationType((1, 3, 6, 1, 4, 1, 795, 2, 5) + (0,121))
sCSISmart18 = NotificationType((1, 3, 6, 1, 4, 1, 795, 2, 5) + (0,122))
sCSISmart19 = NotificationType((1, 3, 6, 1, 4, 1, 795, 2, 5) + (0,123))
sCSISmart20 = NotificationType((1, 3, 6, 1, 4, 1, 795, 2, 5) + (0,124))
sCSISmart21 = NotificationType((1, 3, 6, 1, 4, 1, 795, 2, 5) + (0,125))
mibBuilder.exportSymbols("CYCLONE-MIB", sCSISmart9=sCSISmart9, cycControllerModel=cycControllerModel, sCSISmart4=sCSISmart4, sCSISmart16=sCSISmart16, cycDriver=cycDriver, cycProduct=cycProduct, cycTraps=cycTraps, cycPriority=cycPriority, cycSenseInfo=cycSenseInfo, sCSISmart10=sCSISmart10, sCSISmart11=sCSISmart11, cycArrayName=cycArrayName, sCSISmart1=sCSISmart1, sCSISmart3=sCSISmart3, sCSISmart12=sCSISmart12, sCSISmart13=sCSISmart13, cycVendor=cycVendor, sCSISmart14=sCSISmart14, cycOldArrayName=cycOldArrayName, sCSISmart6=sCSISmart6, cycBusNumber=cycBusNumber, sCSISmart15=sCSISmart15, storagemanagement=storagemanagement, sCSISmart7=sCSISmart7, sCSISmart21=sCSISmart21, sCSISmart17=sCSISmart17, cycManagerID=cycManagerID, cycHostAdapterNumber=cycHostAdapterNumber, sCSISmart18=sCSISmart18, sCSISmart19=sCSISmart19, sCSISmart8=sCSISmart8, cycScsiTargetID=cycScsiTargetID, cycLun=cycLun, cyclone=cyclone, cycHostAdapterID=cycHostAdapterID, adaptec=adaptec, sCSISmart5=sCSISmart5, cycChannelNumber=cycChannelNumber, sCSISmart20=sCSISmart20, cycMisCompares=cycMisCompares, cycNewArrayName=cycNewArrayName, sCSISmart2=sCSISmart2, cycManager=cycManager)
