#
# PySNMP MIB module RADLAN-Tuning (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/RADLAN-Tuning
# Produced by pysmi-0.3.4 at Mon Apr 29 20:41:46 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, Integer, OctetString = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "Integer", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueSizeConstraint, ValueRangeConstraint, ConstraintsIntersection, ConstraintsUnion, SingleValueConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueSizeConstraint", "ValueRangeConstraint", "ConstraintsIntersection", "ConstraintsUnion", "SingleValueConstraint")
VlanList1, VlanList2, VlanList3, VlanList4 = mibBuilder.importSymbols("RADLAN-BRIDGEMIBOBJECTS-MIB", "VlanList1", "VlanList2", "VlanList3", "VlanList4")
rnd, = mibBuilder.importSymbols("RADLAN-MIB", "rnd")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
Bits, Integer32, iso, TimeTicks, MibScalar, MibTable, MibTableRow, MibTableColumn, Counter64, NotificationType, Gauge32, Counter32, ObjectIdentity, Unsigned32, IpAddress, MibIdentifier, ModuleIdentity = mibBuilder.importSymbols("SNMPv2-SMI", "Bits", "Integer32", "iso", "TimeTicks", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Counter64", "NotificationType", "Gauge32", "Counter32", "ObjectIdentity", "Unsigned32", "IpAddress", "MibIdentifier", "ModuleIdentity")
DisplayString, RowStatus, TruthValue, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "RowStatus", "TruthValue", "TextualConvention")
rsTunning = ModuleIdentity((1, 3, 6, 1, 4, 1, 89, 29))
rsTunning.setRevisions(('2009-03-03 00:00', '2006-02-12 00:00', '2004-06-01 00:00',))
if mibBuilder.loadTexts: rsTunning.setLastUpdated('200602120000Z')
if mibBuilder.loadTexts: rsTunning.setOrganization('Radlan Computer Communications Ltd.')
rsHighPriority = MibScalar((1, 3, 6, 1, 4, 1, 89, 29, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rsHighPriority.setStatus('current')
rsLowPriority = MibScalar((1, 3, 6, 1, 4, 1, 89, 29, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rsLowPriority.setStatus('current')
rsDbgLevel = MibScalar((1, 3, 6, 1, 4, 1, 89, 29, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rsDbgLevel.setStatus('current')
rsDiagnosticsTable = MibTable((1, 3, 6, 1, 4, 1, 89, 29, 4), )
if mibBuilder.loadTexts: rsDiagnosticsTable.setStatus('current')
rsDiagnosticsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 89, 29, 4, 1), ).setIndexNames((0, "RADLAN-Tuning", "rsDiagnosticsRequestId"))
if mibBuilder.loadTexts: rsDiagnosticsEntry.setStatus('current')
rsDiagnosticsRequestId = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 29, 4, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rsDiagnosticsRequestId.setStatus('current')
rsDiagnosticsCode = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 29, 4, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rsDiagnosticsCode.setStatus('current')
rsDiagnosticsLocation = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 29, 4, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rsDiagnosticsLocation.setStatus('current')
rsDiagnosticsText = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 29, 4, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 160))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rsDiagnosticsText.setStatus('current')
rsConfirmMessagTab = MibScalar((1, 3, 6, 1, 4, 1, 89, 29, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rsConfirmMessagTab.setStatus('current')
eventMessageTable = MibTable((1, 3, 6, 1, 4, 1, 89, 29, 6), )
if mibBuilder.loadTexts: eventMessageTable.setStatus('current')
eventMessageEntry = MibTableRow((1, 3, 6, 1, 4, 1, 89, 29, 6, 1), ).setIndexNames((0, "RADLAN-Tuning", "eventNum"))
if mibBuilder.loadTexts: eventMessageEntry.setStatus('current')
eventNum = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 29, 6, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eventNum.setStatus('current')
eventDesc = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 29, 6, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eventDesc.setStatus('current')
reaTunning = MibIdentifier((1, 3, 6, 1, 4, 1, 89, 29, 7))
reaIpForwardEnable = MibScalar((1, 3, 6, 1, 4, 1, 89, 29, 7, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: reaIpForwardEnable.setStatus('current')
reaIpxForwardEnable = MibScalar((1, 3, 6, 1, 4, 1, 89, 29, 7, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: reaIpxForwardEnable.setStatus('current')
rsMaxEntriesTuning = MibIdentifier((1, 3, 6, 1, 4, 1, 89, 29, 8))
rsMaxBridgeForwardingEntriesTuning = MibIdentifier((1, 3, 6, 1, 4, 1, 89, 29, 8, 1))
rsMaxBrgFrwEntries = MibScalar((1, 3, 6, 1, 4, 1, 89, 29, 8, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rsMaxBrgFrwEntries.setStatus('current')
rsMaxBrgFrwEntriesAfterReset = MibScalar((1, 3, 6, 1, 4, 1, 89, 29, 8, 1, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rsMaxBrgFrwEntriesAfterReset.setStatus('current')
rsMaxIpForwardingEntriesTuning = MibIdentifier((1, 3, 6, 1, 4, 1, 89, 29, 8, 2))
rsMaxIpFrwEntries = MibScalar((1, 3, 6, 1, 4, 1, 89, 29, 8, 2, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rsMaxIpFrwEntries.setStatus('current')
rsMaxIpFrwEntriesAfterReset = MibScalar((1, 3, 6, 1, 4, 1, 89, 29, 8, 2, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rsMaxIpFrwEntriesAfterReset.setStatus('current')
rsMaxArpEntriesTuning = MibIdentifier((1, 3, 6, 1, 4, 1, 89, 29, 8, 3))
rsMaxArpEntries = MibScalar((1, 3, 6, 1, 4, 1, 89, 29, 8, 3, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rsMaxArpEntries.setStatus('current')
rsMaxArpEntriesAfterReset = MibScalar((1, 3, 6, 1, 4, 1, 89, 29, 8, 3, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rsMaxArpEntriesAfterReset.setStatus('current')
rsMaxIpxForwardingEntriesTuning = MibIdentifier((1, 3, 6, 1, 4, 1, 89, 29, 8, 4))
rsMaxIpxFrwEntries = MibScalar((1, 3, 6, 1, 4, 1, 89, 29, 8, 4, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rsMaxIpxFrwEntries.setStatus('current')
rsMaxIpxFrwEntriesAfterReset = MibScalar((1, 3, 6, 1, 4, 1, 89, 29, 8, 4, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rsMaxIpxFrwEntriesAfterReset.setStatus('current')
rsMaxIpxSapEntriesTuning = MibIdentifier((1, 3, 6, 1, 4, 1, 89, 29, 8, 5))
rsMaxIpxSapEntries = MibScalar((1, 3, 6, 1, 4, 1, 89, 29, 8, 5, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rsMaxIpxSapEntries.setStatus('current')
rsMaxIpxSapEntriesAfterReset = MibScalar((1, 3, 6, 1, 4, 1, 89, 29, 8, 5, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rsMaxIpxSapEntriesAfterReset.setStatus('current')
rsMaxDspClntEntriesTuning = MibIdentifier((1, 3, 6, 1, 4, 1, 89, 29, 8, 6))
rsMaxDspClntEntries = MibScalar((1, 3, 6, 1, 4, 1, 89, 29, 8, 6, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rsMaxDspClntEntries.setStatus('current')
rsMaxDspClntEntriesAfterReset = MibScalar((1, 3, 6, 1, 4, 1, 89, 29, 8, 6, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rsMaxDspClntEntriesAfterReset.setStatus('current')
rsMaxIpFftEntriesTuning = MibIdentifier((1, 3, 6, 1, 4, 1, 89, 29, 8, 9))
rsMaxIpSFftEntries = MibScalar((1, 3, 6, 1, 4, 1, 89, 29, 8, 9, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rsMaxIpSFftEntries.setStatus('current')
rsMaxIpSFftEntriesAfterReset = MibScalar((1, 3, 6, 1, 4, 1, 89, 29, 8, 9, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rsMaxIpSFftEntriesAfterReset.setStatus('current')
rsMaxIpNFftEntries = MibScalar((1, 3, 6, 1, 4, 1, 89, 29, 8, 9, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rsMaxIpNFftEntries.setStatus('current')
rsMaxIpNFftEntriesAfterReset = MibScalar((1, 3, 6, 1, 4, 1, 89, 29, 8, 9, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rsMaxIpNFftEntriesAfterReset.setStatus('current')
rsMaxIpSFftSysEntries = MibScalar((1, 3, 6, 1, 4, 1, 89, 29, 8, 9, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rsMaxIpSFftSysEntries.setStatus('current')
rsMaxIpSFftSysEntriesAfterReset = MibScalar((1, 3, 6, 1, 4, 1, 89, 29, 8, 9, 6), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rsMaxIpSFftSysEntriesAfterReset.setStatus('current')
rsMaxIpNFftSysEntries = MibScalar((1, 3, 6, 1, 4, 1, 89, 29, 8, 9, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rsMaxIpNFftSysEntries.setStatus('current')
rsMaxIpNFftSysEntriesAfterReset = MibScalar((1, 3, 6, 1, 4, 1, 89, 29, 8, 9, 8), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rsMaxIpNFftSysEntriesAfterReset.setStatus('current')
rsMaxIpNextHopEntries = MibScalar((1, 3, 6, 1, 4, 1, 89, 29, 8, 9, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rsMaxIpNextHopEntries.setStatus('current')
rsMaxIpNextHopEntriesAfterReset = MibScalar((1, 3, 6, 1, 4, 1, 89, 29, 8, 9, 10), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rsMaxIpNextHopEntriesAfterReset.setStatus('current')
rsMaxIpxFftEntriesTuning = MibIdentifier((1, 3, 6, 1, 4, 1, 89, 29, 8, 10))
rsMaxIpxSFftEntries = MibScalar((1, 3, 6, 1, 4, 1, 89, 29, 8, 10, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rsMaxIpxSFftEntries.setStatus('current')
rsMaxIpxSFftEntriesAfterReset = MibScalar((1, 3, 6, 1, 4, 1, 89, 29, 8, 10, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rsMaxIpxSFftEntriesAfterReset.setStatus('current')
rsMaxIpxNFftEntries = MibScalar((1, 3, 6, 1, 4, 1, 89, 29, 8, 10, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rsMaxIpxNFftEntries.setStatus('current')
rsMaxIpxNFftEntriesAfterReset = MibScalar((1, 3, 6, 1, 4, 1, 89, 29, 8, 10, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rsMaxIpxNFftEntriesAfterReset.setStatus('current')
rsMaxIpxSFftSysEntries = MibScalar((1, 3, 6, 1, 4, 1, 89, 29, 8, 10, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rsMaxIpxSFftSysEntries.setStatus('current')
rsMaxIpxSFftSysEntriesAfterReset = MibScalar((1, 3, 6, 1, 4, 1, 89, 29, 8, 10, 6), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rsMaxIpxSFftSysEntriesAfterReset.setStatus('current')
rsMaxIpxNFftSysEntries = MibScalar((1, 3, 6, 1, 4, 1, 89, 29, 8, 10, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rsMaxIpxNFftSysEntries.setStatus('current')
rsMaxIpxNFftSysEntriesAfterReset = MibScalar((1, 3, 6, 1, 4, 1, 89, 29, 8, 10, 8), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rsMaxIpxNFftSysEntriesAfterReset.setStatus('current')
rsMaxDhcpTuning = MibIdentifier((1, 3, 6, 1, 4, 1, 89, 29, 8, 11))
rsMaxDhcpConns = MibScalar((1, 3, 6, 1, 4, 1, 89, 29, 8, 11, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rsMaxDhcpConns.setStatus('current')
rsMaxDhcpConnsAfterReset = MibScalar((1, 3, 6, 1, 4, 1, 89, 29, 8, 11, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rsMaxDhcpConnsAfterReset.setStatus('current')
rsMaxIpmTuning = MibIdentifier((1, 3, 6, 1, 4, 1, 89, 29, 8, 12))
rsMaxIpmFftEntriesTuning = MibIdentifier((1, 3, 6, 1, 4, 1, 89, 29, 8, 12, 1))
rsMaxIpmFftEntries = MibScalar((1, 3, 6, 1, 4, 1, 89, 29, 8, 12, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rsMaxIpmFftEntries.setStatus('current')
rsMaxIpmFftEntriesAfterReset = MibScalar((1, 3, 6, 1, 4, 1, 89, 29, 8, 12, 1, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rsMaxIpmFftEntriesAfterReset.setStatus('current')
rsIpmFftAging = MibScalar((1, 3, 6, 1, 4, 1, 89, 29, 8, 12, 1, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rsIpmFftAging.setStatus('current')
rsMaxIgmpTuning = MibIdentifier((1, 3, 6, 1, 4, 1, 89, 29, 8, 12, 2))
rsMaxIgmpInterfaceEntries = MibScalar((1, 3, 6, 1, 4, 1, 89, 29, 8, 12, 2, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rsMaxIgmpInterfaceEntries.setStatus('current')
rsMaxIgmpInterfaceEntriesAfterReset = MibScalar((1, 3, 6, 1, 4, 1, 89, 29, 8, 12, 2, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rsMaxIgmpInterfaceEntriesAfterReset.setStatus('current')
rsMaxIgmpCacheEntries = MibScalar((1, 3, 6, 1, 4, 1, 89, 29, 8, 12, 2, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rsMaxIgmpCacheEntries.setStatus('current')
rsMaxIgmpCacheEntriesAfterReset = MibScalar((1, 3, 6, 1, 4, 1, 89, 29, 8, 12, 2, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rsMaxIgmpCacheEntriesAfterReset.setStatus('current')
rsMaxPimTuning = MibIdentifier((1, 3, 6, 1, 4, 1, 89, 29, 8, 12, 3))
rsMaxPimNeighborEntries = MibScalar((1, 3, 6, 1, 4, 1, 89, 29, 8, 12, 3, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rsMaxPimNeighborEntries.setStatus('current')
rsMaxPimNeighborEntriesAfterReset = MibScalar((1, 3, 6, 1, 4, 1, 89, 29, 8, 12, 3, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rsMaxPimNeighborEntriesAfterReset.setStatus('current')
rsMaxPimRouteEntries = MibScalar((1, 3, 6, 1, 4, 1, 89, 29, 8, 12, 3, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rsMaxPimRouteEntries.setStatus('current')
rsMaxPimRouteEntriesAfterReset = MibScalar((1, 3, 6, 1, 4, 1, 89, 29, 8, 12, 3, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rsMaxPimRouteEntriesAfterReset.setStatus('current')
rsMaxPimRouteNextHopEntries = MibScalar((1, 3, 6, 1, 4, 1, 89, 29, 8, 12, 3, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rsMaxPimRouteNextHopEntries.setStatus('current')
rsMaxPimRouteNextHopEntriesAfterReset = MibScalar((1, 3, 6, 1, 4, 1, 89, 29, 8, 12, 3, 6), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rsMaxPimRouteNextHopEntriesAfterReset.setStatus('current')
rsMaxPimInterfaceEntriesAfterReset = MibScalar((1, 3, 6, 1, 4, 1, 89, 29, 8, 12, 3, 7), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rsMaxPimInterfaceEntriesAfterReset.setStatus('current')
rsMaxPimInterfaceEntries = MibScalar((1, 3, 6, 1, 4, 1, 89, 29, 8, 12, 3, 8), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rsMaxPimInterfaceEntries.setStatus('current')
rsMaxDvmrpTuning = MibIdentifier((1, 3, 6, 1, 4, 1, 89, 29, 8, 12, 4))
rsMaxDvmrpNeighborEntries = MibScalar((1, 3, 6, 1, 4, 1, 89, 29, 8, 12, 4, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rsMaxDvmrpNeighborEntries.setStatus('current')
rsMaxDvmrpNeighborEntriesAfterReset = MibScalar((1, 3, 6, 1, 4, 1, 89, 29, 8, 12, 4, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rsMaxDvmrpNeighborEntriesAfterReset.setStatus('current')
rsMaxDvmrpRouteEntries = MibScalar((1, 3, 6, 1, 4, 1, 89, 29, 8, 12, 4, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rsMaxDvmrpRouteEntries.setStatus('current')
rsMaxDvmrpRouteEntriesAfterReset = MibScalar((1, 3, 6, 1, 4, 1, 89, 29, 8, 12, 4, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rsMaxDvmrpRouteEntriesAfterReset.setStatus('current')
rsMaxDvmrpMRouteEntries = MibScalar((1, 3, 6, 1, 4, 1, 89, 29, 8, 12, 4, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rsMaxDvmrpMRouteEntries.setStatus('current')
rsMaxDvmrpMRouteEntriesAfterReset = MibScalar((1, 3, 6, 1, 4, 1, 89, 29, 8, 12, 4, 6), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rsMaxDvmrpMRouteEntriesAfterReset.setStatus('current')
rsMaxDvmrpInterfaceEntries = MibScalar((1, 3, 6, 1, 4, 1, 89, 29, 8, 12, 4, 7), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rsMaxDvmrpInterfaceEntries.setStatus('current')
rsMaxDvmrpInterfaceEntriesAfterReset = MibScalar((1, 3, 6, 1, 4, 1, 89, 29, 8, 12, 4, 8), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rsMaxDvmrpInterfaceEntriesAfterReset.setStatus('current')
rsMaxPigmpTuning = MibIdentifier((1, 3, 6, 1, 4, 1, 89, 29, 8, 12, 5))
rsMaxPigmpRouteEntries = MibScalar((1, 3, 6, 1, 4, 1, 89, 29, 8, 12, 5, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rsMaxPigmpRouteEntries.setStatus('current')
rsMaxPigmpRouteEntriesAfterReset = MibScalar((1, 3, 6, 1, 4, 1, 89, 29, 8, 12, 5, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rsMaxPigmpRouteEntriesAfterReset.setStatus('current')
rsMaxPimSmTuning = MibIdentifier((1, 3, 6, 1, 4, 1, 89, 29, 8, 12, 6))
rsMaxPimSmNeighborEntries = MibScalar((1, 3, 6, 1, 4, 1, 89, 29, 8, 12, 6, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rsMaxPimSmNeighborEntries.setStatus('current')
rsMaxPimSmNeighborEntriesAfterReset = MibScalar((1, 3, 6, 1, 4, 1, 89, 29, 8, 12, 6, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rsMaxPimSmNeighborEntriesAfterReset.setStatus('current')
rsMaxPimSmRouteEntries = MibScalar((1, 3, 6, 1, 4, 1, 89, 29, 8, 12, 6, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rsMaxPimSmRouteEntries.setStatus('current')
rsMaxPimSmRouteEntriesAfterReset = MibScalar((1, 3, 6, 1, 4, 1, 89, 29, 8, 12, 6, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rsMaxPimSmRouteEntriesAfterReset.setStatus('current')
rsMaxPimSmInterfaceEntries = MibScalar((1, 3, 6, 1, 4, 1, 89, 29, 8, 12, 6, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rsMaxPimSmInterfaceEntries.setStatus('current')
rsMaxPimSmInterfaceEntriesAfterReset = MibScalar((1, 3, 6, 1, 4, 1, 89, 29, 8, 12, 6, 6), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rsMaxPimSmInterfaceEntriesAfterReset.setStatus('current')
rsMaxPimSmRPSetEntries = MibScalar((1, 3, 6, 1, 4, 1, 89, 29, 8, 12, 6, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rsMaxPimSmRPSetEntries.setStatus('current')
rsMaxPimSmRPSetEntriesAfterReset = MibScalar((1, 3, 6, 1, 4, 1, 89, 29, 8, 12, 6, 8), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rsMaxPimSmRPSetEntriesAfterReset.setStatus('current')
rsMaxPimSmCRPEntries = MibScalar((1, 3, 6, 1, 4, 1, 89, 29, 8, 12, 6, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rsMaxPimSmCRPEntries.setStatus('current')
rsMaxPimSmCRPEntriesAfterReset = MibScalar((1, 3, 6, 1, 4, 1, 89, 29, 8, 12, 6, 10), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rsMaxPimSmCRPEntriesAfterReset.setStatus('current')
rsMaxNumberRpAddresesInGroupRange = MibScalar((1, 3, 6, 1, 4, 1, 89, 29, 8, 12, 6, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rsMaxNumberRpAddresesInGroupRange.setStatus('current')
rsMaxNumberRpAddresesInGroupRangeAfterReset = MibScalar((1, 3, 6, 1, 4, 1, 89, 29, 8, 12, 6, 12), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rsMaxNumberRpAddresesInGroupRangeAfterReset.setStatus('current')
rsMaxRmonTuning = MibIdentifier((1, 3, 6, 1, 4, 1, 89, 29, 8, 13))
rsMaxRmonLogEntries = MibScalar((1, 3, 6, 1, 4, 1, 89, 29, 8, 13, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rsMaxRmonLogEntries.setStatus('current')
rsMaxRmonLogEntriesAfterReset = MibScalar((1, 3, 6, 1, 4, 1, 89, 29, 8, 13, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rsMaxRmonLogEntriesAfterReset.setStatus('current')
rsMaxRmonEtherHistoryEntries = MibScalar((1, 3, 6, 1, 4, 1, 89, 29, 8, 13, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rsMaxRmonEtherHistoryEntries.setStatus('current')
rsMaxRmonEtherHistoryEntriesAfterReset = MibScalar((1, 3, 6, 1, 4, 1, 89, 29, 8, 13, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rsMaxRmonEtherHistoryEntriesAfterReset.setStatus('current')
rsMaxIgmpSnoopTuning = MibIdentifier((1, 3, 6, 1, 4, 1, 89, 29, 8, 14))
rsMaxIgmpSnoopGroupEntries = MibScalar((1, 3, 6, 1, 4, 1, 89, 29, 8, 14, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rsMaxIgmpSnoopGroupEntries.setStatus('current')
rsMaxIgmpSnoopGroupEntriesAfterReset = MibScalar((1, 3, 6, 1, 4, 1, 89, 29, 8, 14, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rsMaxIgmpSnoopGroupEntriesAfterReset.setStatus('current')
rsMaxVlansTuning = MibIdentifier((1, 3, 6, 1, 4, 1, 89, 29, 8, 15))
rsMaxVlansEntries = MibScalar((1, 3, 6, 1, 4, 1, 89, 29, 8, 15, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rsMaxVlansEntries.setStatus('current')
rsMaxVlansEntriesAfterReset = MibScalar((1, 3, 6, 1, 4, 1, 89, 29, 8, 15, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rsMaxVlansEntriesAfterReset.setStatus('current')
rsMaxPolicyTuning = MibIdentifier((1, 3, 6, 1, 4, 1, 89, 29, 8, 16))
rsMaxPolicyMaxRulesEntries = MibScalar((1, 3, 6, 1, 4, 1, 89, 29, 8, 16, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rsMaxPolicyMaxRulesEntries.setStatus('current')
rsMaxPolicyMaxRulesEntriesAfterReset = MibScalar((1, 3, 6, 1, 4, 1, 89, 29, 8, 16, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rsMaxPolicyMaxRulesEntriesAfterReset.setStatus('current')
rsMaxPolicySimpleMibMaxRulesEntries = MibScalar((1, 3, 6, 1, 4, 1, 89, 29, 8, 16, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rsMaxPolicySimpleMibMaxRulesEntries.setStatus('current')
rsMaxPolicySimpleMibMaxRulesEntriesAfterReset = MibScalar((1, 3, 6, 1, 4, 1, 89, 29, 8, 16, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rsMaxPolicySimpleMibMaxRulesEntriesAfterReset.setStatus('current')
rsMaxPolicySimpleMibMaxProfilesEntries = MibScalar((1, 3, 6, 1, 4, 1, 89, 29, 8, 16, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rsMaxPolicySimpleMibMaxProfilesEntries.setStatus('current')
rsMaxPolicySimpleMibMaxProfilesEntriesAfterReset = MibScalar((1, 3, 6, 1, 4, 1, 89, 29, 8, 16, 6), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rsMaxPolicySimpleMibMaxProfilesEntriesAfterReset.setStatus('current')
rsMaxGvrpVlansTuning = MibIdentifier((1, 3, 6, 1, 4, 1, 89, 29, 8, 17))
rsMaxGvrpVlans = MibScalar((1, 3, 6, 1, 4, 1, 89, 29, 8, 17, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rsMaxGvrpVlans.setStatus('current')
rsMaxGvrpVlansAfterReset = MibScalar((1, 3, 6, 1, 4, 1, 89, 29, 8, 17, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rsMaxGvrpVlansAfterReset.setStatus('current')
rsMaxTraceRouteTuning = MibIdentifier((1, 3, 6, 1, 4, 1, 89, 29, 8, 18))
rsMaxTraceRouteControlEntries = MibScalar((1, 3, 6, 1, 4, 1, 89, 29, 8, 18, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rsMaxTraceRouteControlEntries.setStatus('current')
rsMaxTraceRouteControlEntriesAfterReset = MibScalar((1, 3, 6, 1, 4, 1, 89, 29, 8, 18, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rsMaxTraceRouteControlEntriesAfterReset.setStatus('current')
rsMaxTraceRouteProbeHistoryEntries = MibScalar((1, 3, 6, 1, 4, 1, 89, 29, 8, 18, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rsMaxTraceRouteProbeHistoryEntries.setStatus('current')
rsMaxTraceRouteProbeHistoryEntriesAfterReset = MibScalar((1, 3, 6, 1, 4, 1, 89, 29, 8, 18, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rsMaxTraceRouteProbeHistoryEntriesAfterReset.setStatus('current')
rsMaxSnmpTuning = MibIdentifier((1, 3, 6, 1, 4, 1, 89, 29, 8, 19))
rsMaxSnmpCommunityEntries = MibScalar((1, 3, 6, 1, 4, 1, 89, 29, 8, 19, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rsMaxSnmpCommunityEntries.setStatus('current')
rsMaxSnmpCommunityEntriesAfterReset = MibScalar((1, 3, 6, 1, 4, 1, 89, 29, 8, 19, 2), Integer32().clone(16)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rsMaxSnmpCommunityEntriesAfterReset.setStatus('current')
rsMaxSocketTuning = MibIdentifier((1, 3, 6, 1, 4, 1, 89, 29, 8, 20))
rsMaxNumberOfSockets = MibScalar((1, 3, 6, 1, 4, 1, 89, 29, 8, 20, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rsMaxNumberOfSockets.setStatus('current')
rsMaxNumberOfSocketsAfterReset = MibScalar((1, 3, 6, 1, 4, 1, 89, 29, 8, 20, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rsMaxNumberOfSocketsAfterReset.setStatus('current')
rsMaxSizeOfSocketDataPool = MibScalar((1, 3, 6, 1, 4, 1, 89, 29, 8, 20, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rsMaxSizeOfSocketDataPool.setStatus('current')
rsMaxSizeOfSocketDataPoolAfterReset = MibScalar((1, 3, 6, 1, 4, 1, 89, 29, 8, 20, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rsMaxSizeOfSocketDataPoolAfterReset.setStatus('current')
rsMaxIpRouteTuning = MibIdentifier((1, 3, 6, 1, 4, 1, 89, 29, 8, 21))
rsMaxIpPrefixes = MibScalar((1, 3, 6, 1, 4, 1, 89, 29, 8, 21, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rsMaxIpPrefixes.setStatus('current')
rsMaxIpPrefixesAfterReset = MibScalar((1, 3, 6, 1, 4, 1, 89, 29, 8, 21, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rsMaxIpPrefixesAfterReset.setStatus('current')
rsMaxIpNextHopSetTuning = MibIdentifier((1, 3, 6, 1, 4, 1, 89, 29, 8, 22))
rsMaxIpNextHopSetEntries = MibScalar((1, 3, 6, 1, 4, 1, 89, 29, 8, 22, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rsMaxIpNextHopSetEntries.setStatus('current')
rsMaxIpNextHopSetEntriesAfterReset = MibScalar((1, 3, 6, 1, 4, 1, 89, 29, 8, 22, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rsMaxIpNextHopSetEntriesAfterReset.setStatus('current')
rsMaxIpEcmpTuning = MibIdentifier((1, 3, 6, 1, 4, 1, 89, 29, 8, 23))
rsMaxIpEcmpEntrySize = MibScalar((1, 3, 6, 1, 4, 1, 89, 29, 8, 23, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rsMaxIpEcmpEntrySize.setStatus('current')
rsMaxIpEcmpEntrySizeAfterReset = MibScalar((1, 3, 6, 1, 4, 1, 89, 29, 8, 23, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rsMaxIpEcmpEntrySizeAfterReset.setStatus('current')
rsMaxdot1xEapRequestTuning = MibIdentifier((1, 3, 6, 1, 4, 1, 89, 29, 8, 24))
rsMaxdot1xEapRequestEntries = MibScalar((1, 3, 6, 1, 4, 1, 89, 29, 8, 24, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rsMaxdot1xEapRequestEntries.setStatus('current')
rsMaxdot1xEapRequestEntriesAfterReset = MibScalar((1, 3, 6, 1, 4, 1, 89, 29, 8, 24, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rsMaxdot1xEapRequestEntriesAfterReset.setStatus('current')
rsMaxIpInterfaceTuning = MibIdentifier((1, 3, 6, 1, 4, 1, 89, 29, 8, 25))
rsMaxIpInterfaces = MibScalar((1, 3, 6, 1, 4, 1, 89, 29, 8, 25, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rsMaxIpInterfaces.setStatus('current')
rsMaxIpInterfacesAfterReset = MibScalar((1, 3, 6, 1, 4, 1, 89, 29, 8, 25, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rsMaxIpInterfacesAfterReset.setStatus('current')
rsMaxIpv6FftEntriesTuning = MibIdentifier((1, 3, 6, 1, 4, 1, 89, 29, 8, 26))
rsMaxIpv6SFftEntries = MibScalar((1, 3, 6, 1, 4, 1, 89, 29, 8, 26, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rsMaxIpv6SFftEntries.setStatus('current')
rsMaxIpv6SFftEntriesAfterReset = MibScalar((1, 3, 6, 1, 4, 1, 89, 29, 8, 26, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rsMaxIpv6SFftEntriesAfterReset.setStatus('current')
rsMaxIpv6SFftSysEntries = MibScalar((1, 3, 6, 1, 4, 1, 89, 29, 8, 26, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rsMaxIpv6SFftSysEntries.setStatus('current')
rsMaxIpv6SFftSysEntriesAfterReset = MibScalar((1, 3, 6, 1, 4, 1, 89, 29, 8, 26, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rsMaxIpv6SFftSysEntriesAfterReset.setStatus('current')
rsMaxIpv6Prefixes = MibScalar((1, 3, 6, 1, 4, 1, 89, 29, 8, 26, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rsMaxIpv6Prefixes.setStatus('current')
rsMaxIpv6PrefixesAfterReset = MibScalar((1, 3, 6, 1, 4, 1, 89, 29, 8, 26, 6), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rsMaxIpv6PrefixesAfterReset.setStatus('current')
rsMaxIpv6NextHopEntries = MibScalar((1, 3, 6, 1, 4, 1, 89, 29, 8, 26, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rsMaxIpv6NextHopEntries.setStatus('current')
rsMaxIpv6NextHopEntriesAfterReset = MibScalar((1, 3, 6, 1, 4, 1, 89, 29, 8, 26, 8), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rsMaxIpv6NextHopEntriesAfterReset.setStatus('current')
rsMaxIpv6NextHopSetEntries = MibScalar((1, 3, 6, 1, 4, 1, 89, 29, 8, 26, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rsMaxIpv6NextHopSetEntries.setStatus('current')
rsMaxIpv6NextHopSetEntriesAfterReset = MibScalar((1, 3, 6, 1, 4, 1, 89, 29, 8, 26, 10), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rsMaxIpv6NextHopSetEntriesAfterReset.setStatus('current')
rsMaxIpv6GlobalAddresses = MibScalar((1, 3, 6, 1, 4, 1, 89, 29, 8, 26, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rsMaxIpv6GlobalAddresses.setStatus('current')
rsMaxIpv6GlobalAddressesAfterReset = MibScalar((1, 3, 6, 1, 4, 1, 89, 29, 8, 26, 12), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rsMaxIpv6GlobalAddressesAfterReset.setStatus('current')
rsMaxArpTunnelStartEntries = MibScalar((1, 3, 6, 1, 4, 1, 89, 29, 8, 26, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rsMaxArpTunnelStartEntries.setStatus('current')
rsMaxArpTunnelStartEntriesAfterReset = MibScalar((1, 3, 6, 1, 4, 1, 89, 29, 8, 26, 14), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rsMaxArpTunnelStartEntriesAfterReset.setStatus('current')
rsMaxIpv6InterfaceTuning = MibIdentifier((1, 3, 6, 1, 4, 1, 89, 29, 8, 27))
rsMaxIpv6Interfaces = MibScalar((1, 3, 6, 1, 4, 1, 89, 29, 8, 27, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rsMaxIpv6Interfaces.setStatus('current')
rsMaxIpv6InterfacesAfterReset = MibScalar((1, 3, 6, 1, 4, 1, 89, 29, 8, 27, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rsMaxIpv6InterfacesAfterReset.setStatus('current')
rsMaxIpv6AddrPerInterfaces = MibScalar((1, 3, 6, 1, 4, 1, 89, 29, 8, 27, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rsMaxIpv6AddrPerInterfaces.setStatus('current')
rsMaxIpv6AddrPerInterfacesAfterReset = MibScalar((1, 3, 6, 1, 4, 1, 89, 29, 8, 27, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rsMaxIpv6AddrPerInterfacesAfterReset.setStatus('current')
rsMaxIpRoutesTuning = MibIdentifier((1, 3, 6, 1, 4, 1, 89, 29, 8, 28))
rsMaxIpv4Routes = MibScalar((1, 3, 6, 1, 4, 1, 89, 29, 8, 28, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rsMaxIpv4Routes.setStatus('current')
rsMaxIpv4RoutesAfterReset = MibScalar((1, 3, 6, 1, 4, 1, 89, 29, 8, 28, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rsMaxIpv4RoutesAfterReset.setStatus('current')
rsMaxIpv6Routes = MibScalar((1, 3, 6, 1, 4, 1, 89, 29, 8, 28, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rsMaxIpv6Routes.setStatus('current')
rsMaxIpv6RoutesAfterReset = MibScalar((1, 3, 6, 1, 4, 1, 89, 29, 8, 28, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rsMaxIpv6RoutesAfterReset.setStatus('current')
rsMaxIpmv4Routes = MibScalar((1, 3, 6, 1, 4, 1, 89, 29, 8, 28, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rsMaxIpmv4Routes.setStatus('current')
rsMaxIpmv4RoutesAfterReset = MibScalar((1, 3, 6, 1, 4, 1, 89, 29, 8, 28, 6), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rsMaxIpmv4RoutesAfterReset.setStatus('current')
rsMaxIpmv6Routes = MibScalar((1, 3, 6, 1, 4, 1, 89, 29, 8, 28, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rsMaxIpmv6Routes.setStatus('current')
rsMaxIpmv6RoutesAfterReset = MibScalar((1, 3, 6, 1, 4, 1, 89, 29, 8, 28, 8), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rsMaxIpmv6RoutesAfterReset.setStatus('current')
rsTcpTuning = MibIdentifier((1, 3, 6, 1, 4, 1, 89, 29, 11))
rsTcpMemoryPoolSizeAfterReset = MibScalar((1, 3, 6, 1, 4, 1, 89, 29, 11, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rsTcpMemoryPoolSizeAfterReset.setStatus('current')
rsTcpMemoryPoolSize = MibScalar((1, 3, 6, 1, 4, 1, 89, 29, 11, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rsTcpMemoryPoolSize.setStatus('current')
rsRadiusTuning = MibIdentifier((1, 3, 6, 1, 4, 1, 89, 29, 12))
rsRadiusMemoryPoolSizeAfterReset = MibScalar((1, 3, 6, 1, 4, 1, 89, 29, 12, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rsRadiusMemoryPoolSizeAfterReset.setStatus('current')
rsRadiusMemoryPoolSize = MibScalar((1, 3, 6, 1, 4, 1, 89, 29, 12, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rsRadiusMemoryPoolSize.setStatus('current')
rlSyslogTuning = MibIdentifier((1, 3, 6, 1, 4, 1, 89, 29, 13))
rlSyslogFilePercentToDeleteWhenCompacting = MibScalar((1, 3, 6, 1, 4, 1, 89, 29, 13, 3), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rlSyslogFilePercentToDeleteWhenCompacting.setStatus('current')
rlSyslogFilePercentToDeleteWhenCompactingAfterReset = MibScalar((1, 3, 6, 1, 4, 1, 89, 29, 13, 4), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rlSyslogFilePercentToDeleteWhenCompactingAfterReset.setStatus('current')
rlSyslogCacheSize = MibScalar((1, 3, 6, 1, 4, 1, 89, 29, 13, 5), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rlSyslogCacheSize.setStatus('current')
rlSyslogCacheSizeAfterReset = MibScalar((1, 3, 6, 1, 4, 1, 89, 29, 13, 6), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rlSyslogCacheSizeAfterReset.setStatus('current')
rlMngInfTuning = MibIdentifier((1, 3, 6, 1, 4, 1, 89, 29, 14))
rlMaxNumberOfAccessRules = MibScalar((1, 3, 6, 1, 4, 1, 89, 29, 14, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rlMaxNumberOfAccessRules.setStatus('current')
rlMaxNumberOfAccessRulesAfterReset = MibScalar((1, 3, 6, 1, 4, 1, 89, 29, 14, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rlMaxNumberOfAccessRulesAfterReset.setStatus('current')
rsDiagnosticTextSource = MibScalar((1, 3, 6, 1, 4, 1, 89, 29, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("fromCLI", 1), ("fromDiagnosticsTable", 2))).clone('fromCLI')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rsDiagnosticTextSource.setStatus('current')
rsMultiSession = MibIdentifier((1, 3, 6, 1, 4, 1, 89, 29, 17))
rsMultiSessionMaxSessionsAfterReset = MibScalar((1, 3, 6, 1, 4, 1, 89, 29, 17, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rsMultiSessionMaxSessionsAfterReset.setStatus('current')
rsMultiSessionMaxSessions = MibScalar((1, 3, 6, 1, 4, 1, 89, 29, 17, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rsMultiSessionMaxSessions.setStatus('current')
rlDnsClTuning = MibIdentifier((1, 3, 6, 1, 4, 1, 89, 29, 18))
rlMaxDnsClCacheRREntries = MibScalar((1, 3, 6, 1, 4, 1, 89, 29, 18, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rlMaxDnsClCacheRREntries.setStatus('current')
rlMaxDnsClCacheRREntriesAfterReset = MibScalar((1, 3, 6, 1, 4, 1, 89, 29, 18, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rlMaxDnsClCacheRREntriesAfterReset.setStatus('current')
rlMaxDnsClNCacheErrEntries = MibScalar((1, 3, 6, 1, 4, 1, 89, 29, 18, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rlMaxDnsClNCacheErrEntries.setStatus('current')
rlMaxDnsClNCacheErrEntriesAfterReset = MibScalar((1, 3, 6, 1, 4, 1, 89, 29, 18, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rlMaxDnsClNCacheErrEntriesAfterReset.setStatus('current')
rlMaxDnsClNamesEntries = MibScalar((1, 3, 6, 1, 4, 1, 89, 29, 18, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rlMaxDnsClNamesEntries.setStatus('current')
rlMaxDnsClNamesEntriesAfterReset = MibScalar((1, 3, 6, 1, 4, 1, 89, 29, 18, 6), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rlMaxDnsClNamesEntriesAfterReset.setStatus('current')
rlTuningParamsTable = MibTable((1, 3, 6, 1, 4, 1, 89, 29, 19), )
if mibBuilder.loadTexts: rlTuningParamsTable.setStatus('current')
rlTuningParamsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 89, 29, 19, 1), ).setIndexNames((1, "RADLAN-Tuning", "rlTuningParamsName"))
if mibBuilder.loadTexts: rlTuningParamsEntry.setStatus('current')
rlTuningParamsName = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 29, 19, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rlTuningParamsName.setStatus('current')
rlTuningParamsCurrentValue = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 29, 19, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rlTuningParamsCurrentValue.setStatus('current')
rlTuningParamsAfterResetValue = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 29, 19, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rlTuningParamsAfterResetValue.setStatus('current')
rlTuningParamsDefaultValue = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 29, 19, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rlTuningParamsDefaultValue.setStatus('current')
rlTuningParamsMinimalValue = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 29, 19, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rlTuningParamsMinimalValue.setStatus('current')
rlTuningParamsMaximalValue = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 29, 19, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rlTuningParamsMaximalValue.setStatus('current')
rlHostParamTable = MibTable((1, 3, 6, 1, 4, 1, 89, 29, 20), )
if mibBuilder.loadTexts: rlHostParamTable.setStatus('current')
rlHostParamEntry = MibTableRow((1, 3, 6, 1, 4, 1, 89, 29, 20, 1), ).setIndexNames((1, "RADLAN-Tuning", "rlHostParamName"))
if mibBuilder.loadTexts: rlHostParamEntry.setStatus('current')
rlHostParamName = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 29, 20, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rlHostParamName.setStatus('current')
rlHostParamValue = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 29, 20, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rlHostParamValue.setStatus('current')
rlHostParamType = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 29, 20, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12))).clone(namedValues=NamedValues(("int", 1), ("uint", 2), ("octetString", 3), ("ipV4address", 4), ("ipV6address", 5), ("ipV6zAddress", 6), ("inetAddress", 7), ("macAddress", 8), ("objectIdentifier", 9), ("displayString", 10), ("truthValue", 11), ("portlist", 12)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rlHostParamType.setStatus('current')
rlHostParamUINT = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 29, 20, 1, 4), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rlHostParamUINT.setStatus('current')
rlHostParamOctetString = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 29, 20, 1, 5), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rlHostParamOctetString.setStatus('current')
rlHostParamIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 29, 20, 1, 6), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rlHostParamIpAddress.setStatus('current')
rlHostParamObjectId = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 29, 20, 1, 7), ObjectIdentifier()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rlHostParamObjectId.setStatus('current')
rlOspfTuning = MibIdentifier((1, 3, 6, 1, 4, 1, 89, 29, 21))
rlMaxOspfInterfaces = MibScalar((1, 3, 6, 1, 4, 1, 89, 29, 21, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rlMaxOspfInterfaces.setStatus('current')
rlMaxOspfInterfacesAfterReset = MibScalar((1, 3, 6, 1, 4, 1, 89, 29, 21, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rlMaxOspfInterfacesAfterReset.setStatus('current')
rlMaxOspfAreas = MibScalar((1, 3, 6, 1, 4, 1, 89, 29, 21, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rlMaxOspfAreas.setStatus('current')
rlMaxOspfAreasAfterReset = MibScalar((1, 3, 6, 1, 4, 1, 89, 29, 21, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rlMaxOspfAreasAfterReset.setStatus('current')
rlMaxOspfNeighbors = MibScalar((1, 3, 6, 1, 4, 1, 89, 29, 21, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rlMaxOspfNeighbors.setStatus('current')
rlMaxOspfNeighborsAfterReset = MibScalar((1, 3, 6, 1, 4, 1, 89, 29, 21, 6), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rlMaxOspfNeighborsAfterReset.setStatus('current')
rlMaxOspfAbrPerArea = MibScalar((1, 3, 6, 1, 4, 1, 89, 29, 21, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rlMaxOspfAbrPerArea.setStatus('current')
rlMaxOspfAbrPerAreaAfterReset = MibScalar((1, 3, 6, 1, 4, 1, 89, 29, 21, 8), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rlMaxOspfAbrPerAreaAfterReset.setStatus('current')
rlMaxOspfNetsInAs = MibScalar((1, 3, 6, 1, 4, 1, 89, 29, 21, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rlMaxOspfNetsInAs.setStatus('current')
rlMaxOspfNetsInAsAfterReset = MibScalar((1, 3, 6, 1, 4, 1, 89, 29, 21, 10), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rlMaxOspfNetsInAsAfterReset.setStatus('current')
rlVlanTuning = MibIdentifier((1, 3, 6, 1, 4, 1, 89, 29, 22))
rlVlanDefaultVID = MibScalar((1, 3, 6, 1, 4, 1, 89, 29, 22, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rlVlanDefaultVID.setStatus('current')
rlVlanDefaultVIDAfterReset = MibScalar((1, 3, 6, 1, 4, 1, 89, 29, 22, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rlVlanDefaultVIDAfterReset.setStatus('current')
rlVlanUsageForbiddenListTable = MibTable((1, 3, 6, 1, 4, 1, 89, 29, 22, 3), )
if mibBuilder.loadTexts: rlVlanUsageForbiddenListTable.setStatus('current')
rlVlanUsageForbiddenListEntry = MibTableRow((1, 3, 6, 1, 4, 1, 89, 29, 22, 3, 1), ).setIndexNames((0, "RADLAN-Tuning", "rlVlanUsageForbiddenListIndex"))
if mibBuilder.loadTexts: rlVlanUsageForbiddenListEntry.setStatus('current')
rlVlanUsageForbiddenListIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 29, 22, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rlVlanUsageForbiddenListIndex.setStatus('current')
rlVlanUsageForbiddenList1to1024 = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 29, 22, 3, 1, 2), VlanList1().clone(hexValue="00")).setMaxAccess("readonly")
if mibBuilder.loadTexts: rlVlanUsageForbiddenList1to1024.setStatus('current')
rlVlanUsageForbiddenList1025to2048 = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 29, 22, 3, 1, 3), VlanList2().clone(hexValue="00")).setMaxAccess("readonly")
if mibBuilder.loadTexts: rlVlanUsageForbiddenList1025to2048.setStatus('current')
rlVlanUsageForbiddenList2049to3072 = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 29, 22, 3, 1, 4), VlanList3().clone(hexValue="00")).setMaxAccess("readonly")
if mibBuilder.loadTexts: rlVlanUsageForbiddenList2049to3072.setStatus('current')
rlVlanUsageForbiddenList3073to4094 = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 29, 22, 3, 1, 5), VlanList4().clone(hexValue="00")).setMaxAccess("readonly")
if mibBuilder.loadTexts: rlVlanUsageForbiddenList3073to4094.setStatus('current')
rlVlanUsageForbiddenListAfterResetTable = MibTable((1, 3, 6, 1, 4, 1, 89, 29, 22, 4), )
if mibBuilder.loadTexts: rlVlanUsageForbiddenListAfterResetTable.setStatus('current')
rlVlanUsageForbiddenListAfterResetEntry = MibTableRow((1, 3, 6, 1, 4, 1, 89, 29, 22, 4, 1), ).setIndexNames((0, "RADLAN-Tuning", "rlVlanUsageForbiddenListAfterResetIndex"))
if mibBuilder.loadTexts: rlVlanUsageForbiddenListAfterResetEntry.setStatus('current')
rlVlanUsageForbiddenListAfterResetIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 29, 22, 4, 1, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rlVlanUsageForbiddenListAfterResetIndex.setStatus('current')
rlVlanUsageForbiddenListAfterReset1to1024 = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 29, 22, 4, 1, 2), VlanList1().clone(hexValue="00")).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rlVlanUsageForbiddenListAfterReset1to1024.setStatus('current')
rlVlanUsageForbiddenListAfterReset1025to2048 = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 29, 22, 4, 1, 3), VlanList2().clone(hexValue="00")).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rlVlanUsageForbiddenListAfterReset1025to2048.setStatus('current')
rlVlanUsageForbiddenListAfterReset2049to3072 = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 29, 22, 4, 1, 4), VlanList3().clone(hexValue="00")).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rlVlanUsageForbiddenListAfterReset2049to3072.setStatus('current')
rlVlanUsageForbiddenListAfterReset3073to4094 = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 29, 22, 4, 1, 5), VlanList4().clone(hexValue="00")).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rlVlanUsageForbiddenListAfterReset3073to4094.setStatus('current')
rlDependendFeaturesEnableTuning = MibIdentifier((1, 3, 6, 1, 4, 1, 89, 29, 23))
rlDependendFeaturesEnabled = MibScalar((1, 3, 6, 1, 4, 1, 89, 29, 23, 1), Bits().clone(namedValues=NamedValues(("ipV4routingEnabled", 0), ("policyBasedVlanEnabled", 1), ("qualityOfServiceEnables", 2), ("iscsiEnabled", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rlDependendFeaturesEnabled.setStatus('current')
rlDependendFeaturesEnabledAfterReset = MibScalar((1, 3, 6, 1, 4, 1, 89, 29, 23, 2), Bits().clone(namedValues=NamedValues(("ipV4routingEnabled", 0), ("policyBasedVlanEnabled", 1), ("qualityOfServiceEnables", 2), ("iscsiEnabled", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rlDependendFeaturesEnabledAfterReset.setStatus('current')
rlIpDhcpSnoopingTuning = MibIdentifier((1, 3, 6, 1, 4, 1, 89, 29, 24))
rlMaxIpDhcpSnoopingEntries = MibScalar((1, 3, 6, 1, 4, 1, 89, 29, 24, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rlMaxIpDhcpSnoopingEntries.setStatus('current')
rlMaxIpDhcpSnoopingEntriesAfterReset = MibScalar((1, 3, 6, 1, 4, 1, 89, 29, 24, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rlMaxIpDhcpSnoopingEntriesAfterReset.setStatus('current')
rlIscsiSnoopTuning = MibIdentifier((1, 3, 6, 1, 4, 1, 89, 29, 25))
rlIscsiSnoopMaxNumOfConnections = MibScalar((1, 3, 6, 1, 4, 1, 89, 29, 25, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rlIscsiSnoopMaxNumOfConnections.setStatus('current')
rlIscsiSnoopMaxNumOfConnectionsAfterReset = MibScalar((1, 3, 6, 1, 4, 1, 89, 29, 25, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rlIscsiSnoopMaxNumOfConnectionsAfterReset.setStatus('current')
rlDhcpServerTuning = MibIdentifier((1, 3, 6, 1, 4, 1, 89, 29, 26))
rlDhcpSrvMaxAllocatedAddresses = MibScalar((1, 3, 6, 1, 4, 1, 89, 29, 26, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rlDhcpSrvMaxAllocatedAddresses.setStatus('current')
rlDhcpSrvMaxAllocatedAddressesAfterReset = MibScalar((1, 3, 6, 1, 4, 1, 89, 29, 26, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rlDhcpSrvMaxAllocatedAddressesAfterReset.setStatus('current')
rlBrgMacHashChainLen = MibScalar((1, 3, 6, 1, 4, 1, 89, 29, 27), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rlBrgMacHashChainLen.setStatus('current')
rlBrgMacHashChainLenAfterReset = MibScalar((1, 3, 6, 1, 4, 1, 89, 29, 28), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rlBrgMacHashChainLenAfterReset.setStatus('current')
rlBrgMacHashFunction = MibScalar((1, 3, 6, 1, 4, 1, 89, 29, 29), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("macSqnVlanSqn", 0), ("macRndVlanSqn", 1), ("macSqnVlanRnd", 2), ("macRndVlanRnd", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rlBrgMacHashFunction.setStatus('current')
rlBrgMacHashFunctionAfterReset = MibScalar((1, 3, 6, 1, 4, 1, 89, 29, 30), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("macSqnVlanSqn", 0), ("macRndVlanSqn", 1), ("macSqnVlanRnd", 2), ("macRndVlanRnd", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rlBrgMacHashFunctionAfterReset.setStatus('current')
mibBuilder.exportSymbols("RADLAN-Tuning", rlTuningParamsDefaultValue=rlTuningParamsDefaultValue, rsMaxPimSmRPSetEntriesAfterReset=rsMaxPimSmRPSetEntriesAfterReset, rsMaxTraceRouteTuning=rsMaxTraceRouteTuning, rlMaxNumberOfAccessRulesAfterReset=rlMaxNumberOfAccessRulesAfterReset, rlHostParamType=rlHostParamType, rlMaxOspfInterfacesAfterReset=rlMaxOspfInterfacesAfterReset, rsMaxIpv6NextHopEntries=rsMaxIpv6NextHopEntries, rsMaxIpv6PrefixesAfterReset=rsMaxIpv6PrefixesAfterReset, rsMaxDvmrpRouteEntriesAfterReset=rsMaxDvmrpRouteEntriesAfterReset, rsMaxIpv6NextHopEntriesAfterReset=rsMaxIpv6NextHopEntriesAfterReset, reaIpForwardEnable=reaIpForwardEnable, rsMaxPimSmRouteEntriesAfterReset=rsMaxPimSmRouteEntriesAfterReset, rsMaxIpFftEntriesTuning=rsMaxIpFftEntriesTuning, rsMaxPimNeighborEntries=rsMaxPimNeighborEntries, rlMaxIpDhcpSnoopingEntriesAfterReset=rlMaxIpDhcpSnoopingEntriesAfterReset, rsMaxPolicySimpleMibMaxProfilesEntriesAfterReset=rsMaxPolicySimpleMibMaxProfilesEntriesAfterReset, rsMaxIpNextHopEntriesAfterReset=rsMaxIpNextHopEntriesAfterReset, rsMaxPimRouteNextHopEntries=rsMaxPimRouteNextHopEntries, rsMaxPolicySimpleMibMaxRulesEntries=rsMaxPolicySimpleMibMaxRulesEntries, rsMaxTraceRouteControlEntriesAfterReset=rsMaxTraceRouteControlEntriesAfterReset, rsMaxPimTuning=rsMaxPimTuning, rsMaxIpv6SFftEntriesAfterReset=rsMaxIpv6SFftEntriesAfterReset, rlVlanUsageForbiddenListAfterResetTable=rlVlanUsageForbiddenListAfterResetTable, rsRadiusTuning=rsRadiusTuning, rsMaxIpInterfaces=rsMaxIpInterfaces, rsRadiusMemoryPoolSizeAfterReset=rsRadiusMemoryPoolSizeAfterReset, rlHostParamValue=rlHostParamValue, rsMaxNumberRpAddresesInGroupRangeAfterReset=rsMaxNumberRpAddresesInGroupRangeAfterReset, rsMaxdot1xEapRequestTuning=rsMaxdot1xEapRequestTuning, rlDependendFeaturesEnabled=rlDependendFeaturesEnabled, rsMaxIpv6InterfacesAfterReset=rsMaxIpv6InterfacesAfterReset, rlDependendFeaturesEnableTuning=rlDependendFeaturesEnableTuning, rsMaxIpForwardingEntriesTuning=rsMaxIpForwardingEntriesTuning, rsMaxDspClntEntries=rsMaxDspClntEntries, rsMaxIgmpInterfaceEntriesAfterReset=rsMaxIgmpInterfaceEntriesAfterReset, rsMaxIpv6GlobalAddresses=rsMaxIpv6GlobalAddresses, rsMaxIpNextHopSetTuning=rsMaxIpNextHopSetTuning, rsMaxIpSFftSysEntries=rsMaxIpSFftSysEntries, rsDiagnosticsLocation=rsDiagnosticsLocation, rsMaxIpv6RoutesAfterReset=rsMaxIpv6RoutesAfterReset, rsMaxIpxNFftEntries=rsMaxIpxNFftEntries, rsMaxIpv6FftEntriesTuning=rsMaxIpv6FftEntriesTuning, rsMaxIgmpSnoopGroupEntriesAfterReset=rsMaxIgmpSnoopGroupEntriesAfterReset, rsMaxArpTunnelStartEntriesAfterReset=rsMaxArpTunnelStartEntriesAfterReset, rsMaxVlansTuning=rsMaxVlansTuning, rsMaxNumberOfSockets=rsMaxNumberOfSockets, rsMaxArpTunnelStartEntries=rsMaxArpTunnelStartEntries, rsMaxIpmv4RoutesAfterReset=rsMaxIpmv4RoutesAfterReset, rsMaxPimSmNeighborEntriesAfterReset=rsMaxPimSmNeighborEntriesAfterReset, rsTcpMemoryPoolSize=rsTcpMemoryPoolSize, rlVlanDefaultVID=rlVlanDefaultVID, rsMaxIpv6Interfaces=rsMaxIpv6Interfaces, rsMaxIpRouteTuning=rsMaxIpRouteTuning, rlVlanUsageForbiddenList1to1024=rlVlanUsageForbiddenList1to1024, rlVlanUsageForbiddenListAfterResetIndex=rlVlanUsageForbiddenListAfterResetIndex, rsMaxIpxFftEntriesTuning=rsMaxIpxFftEntriesTuning, rsMaxDhcpTuning=rsMaxDhcpTuning, rlBrgMacHashFunction=rlBrgMacHashFunction, rsMaxIpxSFftEntriesAfterReset=rsMaxIpxSFftEntriesAfterReset, rsMaxSnmpCommunityEntries=rsMaxSnmpCommunityEntries, rsMaxIpNextHopEntries=rsMaxIpNextHopEntries, rsMaxIpv6SFftSysEntriesAfterReset=rsMaxIpv6SFftSysEntriesAfterReset, rsMaxIgmpInterfaceEntries=rsMaxIgmpInterfaceEntries, rsMaxVlansEntries=rsMaxVlansEntries, rlSyslogCacheSizeAfterReset=rlSyslogCacheSizeAfterReset, rsMaxIpInterfacesAfterReset=rsMaxIpInterfacesAfterReset, rsMaxdot1xEapRequestEntriesAfterReset=rsMaxdot1xEapRequestEntriesAfterReset, rsMaxIpNextHopSetEntries=rsMaxIpNextHopSetEntries, rsMaxIgmpSnoopTuning=rsMaxIgmpSnoopTuning, rsMaxDvmrpMRouteEntriesAfterReset=rsMaxDvmrpMRouteEntriesAfterReset, rlSyslogFilePercentToDeleteWhenCompacting=rlSyslogFilePercentToDeleteWhenCompacting, rsMaxIpmFftEntries=rsMaxIpmFftEntries, rlMaxOspfAreas=rlMaxOspfAreas, reaIpxForwardEnable=reaIpxForwardEnable, rlTuningParamsMaximalValue=rlTuningParamsMaximalValue, rsMaxPimInterfaceEntriesAfterReset=rsMaxPimInterfaceEntriesAfterReset, rsMaxSnmpCommunityEntriesAfterReset=rsMaxSnmpCommunityEntriesAfterReset, rlMaxOspfInterfaces=rlMaxOspfInterfaces, reaTunning=reaTunning, rsMaxIpEcmpTuning=rsMaxIpEcmpTuning, rlMaxOspfAreasAfterReset=rlMaxOspfAreasAfterReset, rlVlanTuning=rlVlanTuning, rsMaxDhcpConnsAfterReset=rsMaxDhcpConnsAfterReset, rsHighPriority=rsHighPriority, rsMaxIpSFftEntriesAfterReset=rsMaxIpSFftEntriesAfterReset, rsMaxIpNFftSysEntriesAfterReset=rsMaxIpNFftSysEntriesAfterReset, rsMaxIpxSFftEntries=rsMaxIpxSFftEntries, rsMaxIpEcmpEntrySize=rsMaxIpEcmpEntrySize, rsMaxIpxFrwEntries=rsMaxIpxFrwEntries, eventMessageTable=eventMessageTable, rsMaxGvrpVlans=rsMaxGvrpVlans, rsDiagnosticsTable=rsDiagnosticsTable, rsMaxPimSmCRPEntries=rsMaxPimSmCRPEntries, rlHostParamName=rlHostParamName, rsMaxNumberOfSocketsAfterReset=rsMaxNumberOfSocketsAfterReset, rsMaxEntriesTuning=rsMaxEntriesTuning, rlBrgMacHashChainLen=rlBrgMacHashChainLen, rsMaxIpxNFftEntriesAfterReset=rsMaxIpxNFftEntriesAfterReset, rsMaxDvmrpRouteEntries=rsMaxDvmrpRouteEntries, rsMaxIpv6Prefixes=rsMaxIpv6Prefixes, rsMaxPolicySimpleMibMaxProfilesEntries=rsMaxPolicySimpleMibMaxProfilesEntries, rsDbgLevel=rsDbgLevel, rsMaxIpNFftEntries=rsMaxIpNFftEntries, rlVlanDefaultVIDAfterReset=rlVlanDefaultVIDAfterReset, rsMultiSession=rsMultiSession, rsMaxBrgFrwEntries=rsMaxBrgFrwEntries, rsMaxPimRouteEntries=rsMaxPimRouteEntries, rsTcpMemoryPoolSizeAfterReset=rsTcpMemoryPoolSizeAfterReset, rsTunning=rsTunning, rsMaxIpFrwEntriesAfterReset=rsMaxIpFrwEntriesAfterReset, rsMaxIpxNFftSysEntries=rsMaxIpxNFftSysEntries, rlOspfTuning=rlOspfTuning, rsMaxRmonLogEntriesAfterReset=rsMaxRmonLogEntriesAfterReset, rsMaxArpEntriesTuning=rsMaxArpEntriesTuning, rsMaxPigmpTuning=rsMaxPigmpTuning, rlMaxDnsClNamesEntriesAfterReset=rlMaxDnsClNamesEntriesAfterReset, rlMaxOspfAbrPerAreaAfterReset=rlMaxOspfAbrPerAreaAfterReset, rsMaxPigmpRouteEntries=rsMaxPigmpRouteEntries, rlVlanUsageForbiddenListAfterReset1025to2048=rlVlanUsageForbiddenListAfterReset1025to2048, rsDiagnosticsRequestId=rsDiagnosticsRequestId, rsMaxPimSmCRPEntriesAfterReset=rsMaxPimSmCRPEntriesAfterReset, rsRadiusMemoryPoolSize=rsRadiusMemoryPoolSize, rsMaxIpxForwardingEntriesTuning=rsMaxIpxForwardingEntriesTuning, rlBrgMacHashFunctionAfterReset=rlBrgMacHashFunctionAfterReset, eventMessageEntry=eventMessageEntry, rsMaxDspClntEntriesAfterReset=rsMaxDspClntEntriesAfterReset, rsMaxPolicyTuning=rsMaxPolicyTuning, rsMaxIpv6GlobalAddressesAfterReset=rsMaxIpv6GlobalAddressesAfterReset, rlTuningParamsTable=rlTuningParamsTable, rlTuningParamsCurrentValue=rlTuningParamsCurrentValue, rsMaxIpNFftEntriesAfterReset=rsMaxIpNFftEntriesAfterReset, rlTuningParamsAfterResetValue=rlTuningParamsAfterResetValue, rlMaxOspfNetsInAs=rlMaxOspfNetsInAs, rsMaxIpv6SFftEntries=rsMaxIpv6SFftEntries, rsDiagnosticTextSource=rsDiagnosticTextSource, rlHostParamOctetString=rlHostParamOctetString, rsMaxArpEntriesAfterReset=rsMaxArpEntriesAfterReset, rlIscsiSnoopMaxNumOfConnections=rlIscsiSnoopMaxNumOfConnections, rlMaxOspfNetsInAsAfterReset=rlMaxOspfNetsInAsAfterReset, rlVlanUsageForbiddenListAfterResetEntry=rlVlanUsageForbiddenListAfterResetEntry, rsDiagnosticsText=rsDiagnosticsText, rsMaxRmonTuning=rsMaxRmonTuning, rsMaxIpv6InterfaceTuning=rsMaxIpv6InterfaceTuning, rlMaxNumberOfAccessRules=rlMaxNumberOfAccessRules, rsMaxIpxSFftSysEntriesAfterReset=rsMaxIpxSFftSysEntriesAfterReset, rsMaxIgmpCacheEntriesAfterReset=rsMaxIgmpCacheEntriesAfterReset, rsMaxIpPrefixesAfterReset=rsMaxIpPrefixesAfterReset, rlDhcpServerTuning=rlDhcpServerTuning, rsLowPriority=rsLowPriority, rsMaxDvmrpMRouteEntries=rsMaxDvmrpMRouteEntries, rsMaxTraceRouteProbeHistoryEntries=rsMaxTraceRouteProbeHistoryEntries, rlTuningParamsMinimalValue=rlTuningParamsMinimalValue, rlIscsiSnoopMaxNumOfConnectionsAfterReset=rlIscsiSnoopMaxNumOfConnectionsAfterReset, rlHostParamIpAddress=rlHostParamIpAddress, rsMaxDvmrpInterfaceEntries=rsMaxDvmrpInterfaceEntries, rlTuningParamsName=rlTuningParamsName, rsMaxArpEntries=rsMaxArpEntries, rsMaxGvrpVlansAfterReset=rsMaxGvrpVlansAfterReset, rlMaxDnsClCacheRREntries=rlMaxDnsClCacheRREntries, eventNum=eventNum, rsMaxBridgeForwardingEntriesTuning=rsMaxBridgeForwardingEntriesTuning, rsMaxIpv6NextHopSetEntriesAfterReset=rsMaxIpv6NextHopSetEntriesAfterReset, rsMaxIpv6SFftSysEntries=rsMaxIpv6SFftSysEntries, rlIpDhcpSnoopingTuning=rlIpDhcpSnoopingTuning, rsMaxRmonEtherHistoryEntriesAfterReset=rsMaxRmonEtherHistoryEntriesAfterReset, rsMaxSocketTuning=rsMaxSocketTuning, rsMaxPolicySimpleMibMaxRulesEntriesAfterReset=rsMaxPolicySimpleMibMaxRulesEntriesAfterReset, rsMaxGvrpVlansTuning=rsMaxGvrpVlansTuning, rlMaxDnsClNCacheErrEntriesAfterReset=rlMaxDnsClNCacheErrEntriesAfterReset, rsMaxIpSFftSysEntriesAfterReset=rsMaxIpSFftSysEntriesAfterReset, rsMaxPimNeighborEntriesAfterReset=rsMaxPimNeighborEntriesAfterReset, rsMultiSessionMaxSessions=rsMultiSessionMaxSessions, rsMaxIpmFftEntriesTuning=rsMaxIpmFftEntriesTuning, rsMaxIpPrefixes=rsMaxIpPrefixes, rlVlanUsageForbiddenListIndex=rlVlanUsageForbiddenListIndex, rsMaxVlansEntriesAfterReset=rsMaxVlansEntriesAfterReset, rlVlanUsageForbiddenListEntry=rlVlanUsageForbiddenListEntry, rlVlanUsageForbiddenListAfterReset3073to4094=rlVlanUsageForbiddenListAfterReset3073to4094, rsMaxRmonLogEntries=rsMaxRmonLogEntries, rsMaxIpmv6RoutesAfterReset=rsMaxIpmv6RoutesAfterReset, rsMaxPimSmTuning=rsMaxPimSmTuning, rlSyslogTuning=rlSyslogTuning, rsMaxIgmpTuning=rsMaxIgmpTuning, rlSyslogFilePercentToDeleteWhenCompactingAfterReset=rlSyslogFilePercentToDeleteWhenCompactingAfterReset, rsDiagnosticsEntry=rsDiagnosticsEntry, rsMaxDhcpConns=rsMaxDhcpConns, rsDiagnosticsCode=rsDiagnosticsCode, rsMaxIpxSapEntriesTuning=rsMaxIpxSapEntriesTuning, rlVlanUsageForbiddenListTable=rlVlanUsageForbiddenListTable, rsMaxPimRouteNextHopEntriesAfterReset=rsMaxPimRouteNextHopEntriesAfterReset, rsMaxIpEcmpEntrySizeAfterReset=rsMaxIpEcmpEntrySizeAfterReset, rsMaxIpmTuning=rsMaxIpmTuning, rsMaxSizeOfSocketDataPoolAfterReset=rsMaxSizeOfSocketDataPoolAfterReset, rlMngInfTuning=rlMngInfTuning, rlMaxOspfNeighbors=rlMaxOspfNeighbors, rsMaxDvmrpTuning=rsMaxDvmrpTuning, rsMaxIpmv6Routes=rsMaxIpmv6Routes, rlMaxOspfAbrPerArea=rlMaxOspfAbrPerArea, rsMaxDspClntEntriesTuning=rsMaxDspClntEntriesTuning, rlDhcpSrvMaxAllocatedAddresses=rlDhcpSrvMaxAllocatedAddresses, rlBrgMacHashChainLenAfterReset=rlBrgMacHashChainLenAfterReset, PYSNMP_MODULE_ID=rsTunning, rsMaxPolicyMaxRulesEntriesAfterReset=rsMaxPolicyMaxRulesEntriesAfterReset, rsMaxIgmpCacheEntries=rsMaxIgmpCacheEntries, rlMaxDnsClNamesEntries=rlMaxDnsClNamesEntries, rlVlanUsageForbiddenList2049to3072=rlVlanUsageForbiddenList2049to3072, rsMaxIpInterfaceTuning=rsMaxIpInterfaceTuning, rlHostParamObjectId=rlHostParamObjectId, rsMaxIpv6Routes=rsMaxIpv6Routes, rsMaxPimSmRPSetEntries=rsMaxPimSmRPSetEntries, rsMaxIpv6AddrPerInterfaces=rsMaxIpv6AddrPerInterfaces, rlMaxDnsClNCacheErrEntries=rlMaxDnsClNCacheErrEntries, rlDhcpSrvMaxAllocatedAddressesAfterReset=rlDhcpSrvMaxAllocatedAddressesAfterReset, rsMaxIpmFftEntriesAfterReset=rsMaxIpmFftEntriesAfterReset, rsMaxBrgFrwEntriesAfterReset=rsMaxBrgFrwEntriesAfterReset, rsMaxIpv6AddrPerInterfacesAfterReset=rsMaxIpv6AddrPerInterfacesAfterReset, eventDesc=eventDesc, rsMaxIpxSapEntriesAfterReset=rsMaxIpxSapEntriesAfterReset, rsMaxIpFrwEntries=rsMaxIpFrwEntries, rsMaxSnmpTuning=rsMaxSnmpTuning, rlSyslogCacheSize=rlSyslogCacheSize, rlMaxIpDhcpSnoopingEntries=rlMaxIpDhcpSnoopingEntries, rsMultiSessionMaxSessionsAfterReset=rsMultiSessionMaxSessionsAfterReset, rlVlanUsageForbiddenList3073to4094=rlVlanUsageForbiddenList3073to4094, rsMaxIpmv4Routes=rsMaxIpmv4Routes, rsMaxIpRoutesTuning=rsMaxIpRoutesTuning, rsMaxRmonEtherHistoryEntries=rsMaxRmonEtherHistoryEntries, rsTcpTuning=rsTcpTuning, rlTuningParamsEntry=rlTuningParamsEntry, rsMaxIpSFftEntries=rsMaxIpSFftEntries, rsMaxdot1xEapRequestEntries=rsMaxdot1xEapRequestEntries, rsMaxSizeOfSocketDataPool=rsMaxSizeOfSocketDataPool, rsMaxIpxSFftSysEntries=rsMaxIpxSFftSysEntries, rsMaxPimSmInterfaceEntriesAfterReset=rsMaxPimSmInterfaceEntriesAfterReset, rsMaxIpv4Routes=rsMaxIpv4Routes, rlIscsiSnoopTuning=rlIscsiSnoopTuning, rsMaxPigmpRouteEntriesAfterReset=rsMaxPigmpRouteEntriesAfterReset, rlDnsClTuning=rlDnsClTuning, rsMaxPolicyMaxRulesEntries=rsMaxPolicyMaxRulesEntries, rlDependendFeaturesEnabledAfterReset=rlDependendFeaturesEnabledAfterReset, rsMaxDvmrpInterfaceEntriesAfterReset=rsMaxDvmrpInterfaceEntriesAfterReset, rsMaxIpxNFftSysEntriesAfterReset=rsMaxIpxNFftSysEntriesAfterReset, rlVlanUsageForbiddenListAfterReset1to1024=rlVlanUsageForbiddenListAfterReset1to1024, rsMaxPimRouteEntriesAfterReset=rsMaxPimRouteEntriesAfterReset, rsMaxTraceRouteControlEntries=rsMaxTraceRouteControlEntries, rlVlanUsageForbiddenList1025to2048=rlVlanUsageForbiddenList1025to2048, rsMaxIpv4RoutesAfterReset=rsMaxIpv4RoutesAfterReset, rsMaxIpNFftSysEntries=rsMaxIpNFftSysEntries, rsIpmFftAging=rsIpmFftAging, rsMaxDvmrpNeighborEntriesAfterReset=rsMaxDvmrpNeighborEntriesAfterReset, rsMaxPimSmRouteEntries=rsMaxPimSmRouteEntries, rsMaxIpxSapEntries=rsMaxIpxSapEntries, rsMaxPimInterfaceEntries=rsMaxPimInterfaceEntries, rlMaxOspfNeighborsAfterReset=rlMaxOspfNeighborsAfterReset)
mibBuilder.exportSymbols("RADLAN-Tuning", rsConfirmMessagTab=rsConfirmMessagTab, rlVlanUsageForbiddenListAfterReset2049to3072=rlVlanUsageForbiddenListAfterReset2049to3072, rsMaxTraceRouteProbeHistoryEntriesAfterReset=rsMaxTraceRouteProbeHistoryEntriesAfterReset, rsMaxDvmrpNeighborEntries=rsMaxDvmrpNeighborEntries, rlMaxDnsClCacheRREntriesAfterReset=rlMaxDnsClCacheRREntriesAfterReset, rsMaxPimSmNeighborEntries=rsMaxPimSmNeighborEntries, rsMaxNumberRpAddresesInGroupRange=rsMaxNumberRpAddresesInGroupRange, rlHostParamEntry=rlHostParamEntry, rsMaxIpv6NextHopSetEntries=rsMaxIpv6NextHopSetEntries, rsMaxPimSmInterfaceEntries=rsMaxPimSmInterfaceEntries, rsMaxIpNextHopSetEntriesAfterReset=rsMaxIpNextHopSetEntriesAfterReset, rsMaxIpxFrwEntriesAfterReset=rsMaxIpxFrwEntriesAfterReset, rlHostParamUINT=rlHostParamUINT, rsMaxIgmpSnoopGroupEntries=rsMaxIgmpSnoopGroupEntries, rlHostParamTable=rlHostParamTable)
