#
# PySNMP MIB module HMPRIV-MGMT-SNMP-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/HMPRIV-MGMT-SNMP-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 19:18:06 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, Integer, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "OctetString", "Integer", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
SingleValueConstraint, ValueSizeConstraint, ConstraintsUnion, ConstraintsIntersection, ValueRangeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "SingleValueConstraint", "ValueSizeConstraint", "ConstraintsUnion", "ConstraintsIntersection", "ValueRangeConstraint")
dot1dStaticAddress, = mibBuilder.importSymbols("BRIDGE-MIB", "dot1dStaticAddress")
AddressFamilyNumbers, = mibBuilder.importSymbols("IANA-ADDRESS-FAMILY-NUMBERS-MIB", "AddressFamilyNumbers")
ifIndex, = mibBuilder.importSymbols("IF-MIB", "ifIndex")
InetAddressType, InetAddress = mibBuilder.importSymbols("INET-ADDRESS-MIB", "InetAddressType", "InetAddress")
TimeFilter, = mibBuilder.importSymbols("RMON2-MIB", "TimeFilter")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
TimeTicks, iso, Counter32, IpAddress, MibScalar, MibTable, MibTableRow, MibTableColumn, enterprises, Counter64, Unsigned32, MibIdentifier, ObjectIdentity, Integer32, Gauge32, Bits, ModuleIdentity, NotificationType = mibBuilder.importSymbols("SNMPv2-SMI", "TimeTicks", "iso", "Counter32", "IpAddress", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "enterprises", "Counter64", "Unsigned32", "MibIdentifier", "ObjectIdentity", "Integer32", "Gauge32", "Bits", "ModuleIdentity", "NotificationType")
RowStatus, TruthValue, DisplayString, TextualConvention, MacAddress = mibBuilder.importSymbols("SNMPv2-TC", "RowStatus", "TruthValue", "DisplayString", "TextualConvention", "MacAddress")
hmConfiguration = ModuleIdentity((1, 3, 6, 1, 4, 1, 248, 14))
hmConfiguration.setRevisions(('2008-06-03 12:00', '2007-12-11 12:00', '2007-09-13 12:00', '2010-01-29 12:00', '2012-09-04 12:00',))
if mibBuilder.loadTexts: hmConfiguration.setLastUpdated('201209041200Z')
if mibBuilder.loadTexts: hmConfiguration.setOrganization('Hirschmann Automation and Control GmbH')
class HmAgentLogSeverity(TextualConvention, Integer32):
    reference = 'RFC3164 - 4.1.1: Table 2'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7))
    namedValues = NamedValues(("emergency", 0), ("alert", 1), ("critical", 2), ("error", 3), ("warning", 4), ("notice", 5), ("informational", 6), ("debug", 7))

class LEDState(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))
    namedValues = NamedValues(("off", 1), ("green", 2), ("yellow", 3), ("red", 4))

class DIPSwitchState(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2))
    namedValues = NamedValues(("on", 1), ("off", 2))

class PTPTimeInterval(TextualConvention, OctetString):
    reference = 'IEEE P1588 D2.21 Draft Standard for a Precision Clock Synchronization Protocol for Networked Measurement and Control Systems page 18'
    status = 'current'
    subtypeSpec = OctetString.subtypeSpec + ValueSizeConstraint(8, 8)
    fixedLength = 8

class PTPPortIdentity(TextualConvention, OctetString):
    reference = 'IEEE P1588 D2.21 Draft Standard for a Precision Clock Synchronization Protocol for Networked Measurement and Control Systems page 19'
    status = 'current'
    subtypeSpec = OctetString.subtypeSpec + ValueSizeConstraint(10, 10)
    fixedLength = 10

class PTPClockIdentity(TextualConvention, OctetString):
    reference = 'IEEE P1588 D2.21 Draft Standard for a Precision Clock Synchronization Protocol for Networked Measurement and Control Systems page 19'
    status = 'current'
    subtypeSpec = OctetString.subtypeSpec + ValueSizeConstraint(8, 8)
    fixedLength = 8

class PTPClockQuality(TextualConvention, OctetString):
    reference = 'IEEE P1588 D2.21 Draft Standard for a Precision Clock Synchronization Protocol for Networked Measurement and Control Systems page 19'
    status = 'current'
    subtypeSpec = OctetString.subtypeSpec + ValueSizeConstraint(4, 4)
    fixedLength = 4

class BridgeIdOrNull(TextualConvention, OctetString):
    status = 'current'
    subtypeSpec = OctetString.subtypeSpec + ConstraintsUnion(ValueSizeConstraint(0, 0), ValueSizeConstraint(8, 8), )
hirschmann = MibIdentifier((1, 3, 6, 1, 4, 1, 248))
hmChassis = MibIdentifier((1, 3, 6, 1, 4, 1, 248, 14, 1))
hmAgent = MibIdentifier((1, 3, 6, 1, 4, 1, 248, 14, 2))
hmProducts = MibIdentifier((1, 3, 6, 1, 4, 1, 248, 14, 10))
rs2 = MibIdentifier((1, 3, 6, 1, 4, 1, 248, 14, 10, 2))
mach3000 = MibIdentifier((1, 3, 6, 1, 4, 1, 248, 14, 10, 3))
ms2108_2 = MibIdentifier((1, 3, 6, 1, 4, 1, 248, 14, 10, 4)).setLabel("ms2108-2")
ms3124_4 = MibIdentifier((1, 3, 6, 1, 4, 1, 248, 14, 10, 5)).setLabel("ms3124-4")
rs2_16 = MibIdentifier((1, 3, 6, 1, 4, 1, 248, 14, 10, 6)).setLabel("rs2-16")
rs2_4r = MibIdentifier((1, 3, 6, 1, 4, 1, 248, 14, 10, 7)).setLabel("rs2-4r")
ms4128_5 = MibIdentifier((1, 3, 6, 1, 4, 1, 248, 14, 10, 10)).setLabel("ms4128-5")
eagle = MibIdentifier((1, 3, 6, 1, 4, 1, 248, 14, 10, 20))
rr_epl = MibIdentifier((1, 3, 6, 1, 4, 1, 248, 14, 10, 21)).setLabel("rr-epl")
eagle_mguard = MibIdentifier((1, 3, 6, 1, 4, 1, 248, 14, 10, 22)).setLabel("eagle-mguard")
eagle20 = MibIdentifier((1, 3, 6, 1, 4, 1, 248, 14, 10, 23))
ms20 = MibIdentifier((1, 3, 6, 1, 4, 1, 248, 14, 10, 30))
ms30 = MibIdentifier((1, 3, 6, 1, 4, 1, 248, 14, 10, 31))
rs20 = MibIdentifier((1, 3, 6, 1, 4, 1, 248, 14, 10, 40))
rs30 = MibIdentifier((1, 3, 6, 1, 4, 1, 248, 14, 10, 41))
rsb20 = MibIdentifier((1, 3, 6, 1, 4, 1, 248, 14, 10, 44))
osb20 = MibIdentifier((1, 3, 6, 1, 4, 1, 248, 14, 10, 45))
mach4002_48_4G = MibIdentifier((1, 3, 6, 1, 4, 1, 248, 14, 10, 50)).setLabel("mach4002-48-4G")
octopus = MibIdentifier((1, 3, 6, 1, 4, 1, 248, 14, 10, 60))
mach4002_24G = MibIdentifier((1, 3, 6, 1, 4, 1, 248, 14, 10, 70)).setLabel("mach4002-24G")
mach4002_24G_3X = MibIdentifier((1, 3, 6, 1, 4, 1, 248, 14, 10, 71)).setLabel("mach4002-24G-3X")
mach4002_48G = MibIdentifier((1, 3, 6, 1, 4, 1, 248, 14, 10, 75)).setLabel("mach4002-48G")
mach4002_48G_3X = MibIdentifier((1, 3, 6, 1, 4, 1, 248, 14, 10, 76)).setLabel("mach4002-48G-3X")
ruggedswitch = MibIdentifier((1, 3, 6, 1, 4, 1, 248, 14, 10, 90))
railswitchrugged = MibIdentifier((1, 3, 6, 1, 4, 1, 248, 14, 10, 100))
mach100 = MibIdentifier((1, 3, 6, 1, 4, 1, 248, 14, 10, 110))
octopus_os = MibIdentifier((1, 3, 6, 1, 4, 1, 248, 14, 10, 120)).setLabel("octopus-os")
mach100ge = MibIdentifier((1, 3, 6, 1, 4, 1, 248, 14, 10, 130))
mach1000ge = MibIdentifier((1, 3, 6, 1, 4, 1, 248, 14, 10, 131))
eem1 = MibIdentifier((1, 3, 6, 1, 4, 1, 248, 14, 10, 200))
hmSystemTable = MibIdentifier((1, 3, 6, 1, 4, 1, 248, 14, 1, 1))
hmSysProduct = MibScalar((1, 3, 6, 1, 4, 1, 248, 14, 1, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 10, 11, 12, 20, 21, 100, 101, 102, 110, 111, 112, 120, 121, 122, 130, 131, 132, 140, 141, 142, 200, 201, 202, 210, 211, 212, 220, 221, 222, 230, 231, 232, 240, 241, 242, 300, 301, 302, 303, 304, 311, 312, 313, 401, 410, 420, 421, 425, 426, 500, 501, 502, 503, 504, 505, 506, 507, 520, 521, 522, 523, 524, 525, 526, 527, 530, 531, 532, 533, 534, 535, 536, 537, 540, 541, 542, 543, 544, 545, 546, 547, 550, 551, 600, 601, 620, 621, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 720, 721, 722, 723, 724, 725, 730, 731, 732, 733, 734, 740, 780, 800, 801, 802, 803, 804, 810, 811, 812, 820, 821, 822, 823, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1100, 1101, 1102, 1103, 1104, 1105, 1106, 1107, 1108, 1109, 1200))).clone(namedValues=NamedValues(("rs2-tx-tx", 1), ("rs2-fx-fx", 2), ("rs2-fxsm-fxsm", 3), ("mach3002", 10), ("mach3005", 11), ("mach3001", 12), ("ms2108-2", 20), ("ms3124-4", 21), ("rs2-16m", 100), ("rs2-15m", 101), ("rs2-14m", 102), ("rs2-16m-1mm-sc", 110), ("rs2-16m-1sm-sc", 111), ("rs2-16m-1lh-sc", 112), ("rs2-15m-1mm-sc", 120), ("rs2-15m-1sm-sc", 121), ("rs2-15m-1lh-sc", 122), ("rs2-16m-2mm-sc", 130), ("rs2-16m-2sm-sc", 131), ("rs2-16m-2lh-sc", 132), ("rs2-16m-1mm-sc-1sm-sc", 140), ("rs2-16m-1mm-sc-1lh-sc", 141), ("rs2-16m-1sm-sc-1lh-sc", 142), ("rs2-8m", 200), ("rs2-7m", 201), ("rs2-6m", 202), ("rs2-8m-1mm-sc", 210), ("rs2-8m-1sm-sc", 211), ("rs2-8m-1lh-sc", 212), ("rs2-7m-1mm-sc", 220), ("rs2-7m-1sm-sc", 221), ("rs2-7m-1lh-sc", 222), ("rs2-8m-2mm-sc", 230), ("rs2-8m-2sm-sc", 231), ("rs2-8m-2lh-sc", 232), ("rs2-8m-1mm-sc-1sm-sc", 240), ("rs2-8m-1mm-sc-1lh-sc", 241), ("rs2-8m-1sm-sc-1lh-sc", 242), ("rs2-4r", 300), ("rs2-4r-1mm-sc", 301), ("rs2-4r-1sm-sc", 302), ("rs2-4r-1lh-sc", 303), ("rs2-4r-1fl-st", 304), ("rs2-4r-2mm-sc", 311), ("rs2-4r-2sm-sc", 312), ("rs2-4r-2lh-sc", 313), ("ms4128-5", 401), ("mach4002-48-4G", 410), ("mach4002-24G", 420), ("mach4002-24G-3X", 421), ("mach4002-48G", 425), ("mach4002-48G-3X", 426), ("eagle-tx-tx", 500), ("eagle-tx-mm-sc", 501), ("eagle-tx-sm-sc", 502), ("eagle-tx-lh-sc", 503), ("eagle-mm-sc-tx", 504), ("eagle-mm-sc-mm-sc", 505), ("eagle-mm-sc-sm-sc", 506), ("eagle-mm-sc-lh-sc", 507), ("eagle-fw-tx-tx", 520), ("eagle-fw-tx-mm-sc", 521), ("eagle-fw-tx-sm-sc", 522), ("eagle-fw-tx-lh-sc", 523), ("eagle-fw-mm-sc-tx", 524), ("eagle-fw-mm-sc-mm-sc", 525), ("eagle-fw-mm-sc-sm-sc", 526), ("eagle-fw-mm-sc-lh-sc", 527), ("eagle-mguard-tx-tx", 530), ("eagle-mguard-tx-mm-sc", 531), ("eagle-mguard-tx-sm-sc", 532), ("eagle-mguard-tx-lh-sc", 533), ("eagle-mguard-mm-sc-tx", 534), ("eagle-mguard-mm-sc-mm-sc", 535), ("eagle-mguard-mm-sc-sm-sc", 536), ("eagle-mguard-mm-sc-lh-sc", 537), ("eagle20-tx-tx", 540), ("eagle20-tx-mm-sc", 541), ("eagle20-tx-sm-sc", 542), ("eagle20-tx-lh-sc", 543), ("eagle20-mm-sc-tx", 544), ("eagle20-mm-sc-mm-sc", 545), ("eagle20-mm-sc-sm-sc", 546), ("eagle20-mm-sc-lh-sc", 547), ("rr-epl-tx-tx", 550), ("rr-epl-tx-mm-sc", 551), ("ms20-0800", 600), ("ms20-2400", 601), ("ms30-0802", 620), ("ms30-2402", 621), ("rs20-0400", 700), ("rs20-0400m1", 701), ("rs20-0400m2", 702), ("rs20-0800", 703), ("rs20-0800m2", 704), ("rs20-1600", 705), ("rs20-1600m2", 706), ("rs20-2400", 707), ("rs20-2400m2", 708), ("rs20-0900m3", 709), ("rs20-1700m3", 710), ("rs20-2500m3", 711), ("rs30-0802", 720), ("rs30-1602", 721), ("rs30-2402", 722), ("rs30-0802m4", 723), ("rs30-1602m4", 724), ("rs30-2402m4", 725), ("rsb20-8tx", 730), ("rsb20-8tx-1fx", 731), ("rsb20-6tx-2fx", 732), ("rsb20-6tx-3fx", 733), ("rsb20-6tx-3sfp", 734), ("rs40-0009", 740), ("cs30-0202", 780), ("octopus-8m", 800), ("octopus-16m", 801), ("octopus-24m", 802), ("octopus-8m-2g", 803), ("octopus-16m-2g", 804), ("os-000800", 810), ("os-000802", 811), ("os-001000", 812), ("osb20-9tx", 820), ("osb24-9tx-8poe", 821), ("osb20-10tx", 822), ("osb24-10tx-8poe", 823), ("mar1020", 900), ("mar1030", 901), ("mar1030-4g", 902), ("mar1022", 903), ("mar1032", 904), ("mar1032-4g", 905), ("mar1120", 906), ("mar1130", 907), ("mar1130-4g", 908), ("mar1122", 909), ("mar1132", 910), ("mar1132-4g", 911), ("mar1040", 912), ("mar1042", 913), ("mar1140", 914), ("mar1142", 915), ("rsr30-07sfp-03sfp", 1000), ("rsr30-06tp-03combo", 1001), ("rsr30-06tp-02sfp-02combo", 1002), ("rsr30-06tp-02sfp-02sfp", 1003), ("rsr30-08tp-02combo", 1004), ("rsr30-08tp-02sfp", 1005), ("rsr20-06tp-03fx", 1006), ("rsr20-06tp-02fx", 1007), ("rsr20-08tp", 1008), ("mach100", 1100), ("mach104-20tx-f", 1101), ("mach104-20tx-fr", 1102), ("mach104-20tx-f-4poe", 1103), ("mach104-16tx-poep", 1104), ("mach104-16tx-poep-r", 1105), ("mach104-16tx-poep-e", 1106), ("mach104-16tx-poep-2x", 1107), ("mach104-16tx-poep-2x-r", 1108), ("mach104-16tx-poep-2x-e", 1109), ("eem1", 1200)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hmSysProduct.setStatus('current')
hmSysVersion = MibScalar((1, 3, 6, 1, 4, 1, 248, 14, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hmSysVersion.setStatus('current')
hmSysGroupCapacity = MibScalar((1, 3, 6, 1, 4, 1, 248, 14, 1, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hmSysGroupCapacity.setStatus('current')
hmSysGroupMap = MibScalar((1, 3, 6, 1, 4, 1, 248, 14, 1, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hmSysGroupMap.setStatus('current')
hmSysMaxPowerSupply = MibScalar((1, 3, 6, 1, 4, 1, 248, 14, 1, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hmSysMaxPowerSupply.setStatus('current')
hmSysMaxFan = MibScalar((1, 3, 6, 1, 4, 1, 248, 14, 1, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hmSysMaxFan.setStatus('current')
hmSysGroupModuleCapacity = MibScalar((1, 3, 6, 1, 4, 1, 248, 14, 1, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hmSysGroupModuleCapacity.setStatus('current')
hmSysModulePortCapacity = MibScalar((1, 3, 6, 1, 4, 1, 248, 14, 1, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hmSysModulePortCapacity.setStatus('current')
hmSysGroupTable = MibTable((1, 3, 6, 1, 4, 1, 248, 14, 1, 1, 9), )
if mibBuilder.loadTexts: hmSysGroupTable.setStatus('current')
hmSysGroupEntry = MibTableRow((1, 3, 6, 1, 4, 1, 248, 14, 1, 1, 9, 1), ).setIndexNames((0, "HMPRIV-MGMT-SNMP-MIB", "hmSysGroupID"))
if mibBuilder.loadTexts: hmSysGroupEntry.setStatus('current')
hmSysGroupID = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 14, 1, 1, 9, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 5))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hmSysGroupID.setStatus('current')
hmSysGroupType = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 14, 1, 1, 9, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 10, 20, 21, 22, 23, 30, 31, 40, 41, 42, 44, 45, 50, 60, 70, 71, 75, 76, 90, 100, 110, 130, 131, 200))).clone(namedValues=NamedValues(("unknown", 1), ("m-basic4", 10), ("ms2108-2", 20), ("ms3124-4", 21), ("rs2", 22), ("ms4128-5", 23), ("ms20", 30), ("ms30", 31), ("rs20", 40), ("rs30", 41), ("rs40", 42), ("rsb20", 44), ("osb2x", 45), ("mach4002-48-4G", 50), ("octopus", 60), ("mach4002-24G", 70), ("mach4002-24G-3X", 71), ("mach4002-48G", 75), ("mach4002-48G-3X", 76), ("ruggedswitch", 90), ("railswitchrugged", 100), ("mach100", 110), ("mach100ge", 130), ("mach1000ge", 131), ("eem1", 200)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hmSysGroupType.setStatus('current')
hmSysGroupDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 14, 1, 1, 9, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hmSysGroupDescription.setStatus('current')
hmSysGroupHwVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 14, 1, 1, 9, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hmSysGroupHwVersion.setStatus('current')
hmSysGroupSwVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 14, 1, 1, 9, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hmSysGroupSwVersion.setStatus('current')
hmSysGroupModuleMap = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 14, 1, 1, 9, 1, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hmSysGroupModuleMap.setStatus('current')
hmSysGroupAction = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 14, 1, 1, 9, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 10))).clone(namedValues=NamedValues(("other", 1), ("reset", 2), ("resetStats", 3), ("resetFDB", 4), ("resetARP", 5), ("resetL3Stats", 6), ("resetL4-7Stats", 7), ("hotRestart", 10))).clone('other')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hmSysGroupAction.setStatus('current')
hmSysGroupActionResult = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 14, 1, 1, 9, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hmSysGroupActionResult.setStatus('current')
hmSysGroupIsolateMode = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 14, 1, 1, 9, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hmSysGroupIsolateMode.setStatus('current')
hmSysGroupSerialNum = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 14, 1, 1, 9, 1, 10), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hmSysGroupSerialNum.setStatus('current')
hmSysGroupActionDelayPreset = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 14, 1, 1, 9, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hmSysGroupActionDelayPreset.setStatus('current')
hmSysGroupActionDelayCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 14, 1, 1, 9, 1, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hmSysGroupActionDelayCurrent.setStatus('current')
hmSysModuleTable = MibTable((1, 3, 6, 1, 4, 1, 248, 14, 1, 1, 10), )
if mibBuilder.loadTexts: hmSysModuleTable.setStatus('current')
hmSysModuleEntry = MibTableRow((1, 3, 6, 1, 4, 1, 248, 14, 1, 1, 10, 1), ).setIndexNames((0, "HMPRIV-MGMT-SNMP-MIB", "hmSysModGroupID"), (0, "HMPRIV-MGMT-SNMP-MIB", "hmSysModID"))
if mibBuilder.loadTexts: hmSysModuleEntry.setStatus('current')
hmSysModGroupID = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 14, 1, 1, 10, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 5))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hmSysModGroupID.setStatus('current')
hmSysModID = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 14, 1, 1, 10, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 7))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hmSysModID.setStatus('current')
hmSysModType = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 14, 1, 1, 10, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 100, 101, 102, 103, 104, 200, 201, 300, 400, 401, 402, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1100, 1101, 1102, 1103, 1104, 1105, 1106, 1107, 1201, 1202, 1203, 1204, 1205, 1206, 1207, 1208, 1209, 1299, 1300, 1301, 1302, 1303, 1401, 1402, 1403, 1404, 1405, 1406, 1407, 1408, 1409, 1410, 1411, 1412, 1413, 1501, 1502, 1503, 1550, 1600, 1601, 1610, 1611, 1612, 1613, 1614, 1615, 1701, 1702, 1703, 1704, 1705, 1706, 1707, 1708, 1709, 1710, 1711, 1712, 1713, 1714, 1715, 1750, 1751, 1752, 1753, 1850))).clone(namedValues=NamedValues(("unknown", 1), ("m-fast-8tp-rj", 100), ("m-fast-8mm-mt", 101), ("m-fast-2mm-sc", 102), ("m-fast-2sm-sc", 103), ("m-eth-4mm-st", 104), ("m-giga-2sx-sc", 200), ("m-giga-1lx-sc", 201), ("m-router", 300), ("m-giga-2sx-sc-2", 400), ("m-giga-1lx-sc-2", 401), ("m-giga-2tp-rj", 402), ("mm2-4tx1", 1000), ("mm2-2flm4", 1001), ("mm2-2fls4", 1002), ("mm3-4flm4", 1003), ("mm3-4fls4", 1004), ("mm3-2aui", 1005), ("mm3-4tx5", 1006), ("mm2-4fxm3", 1100), ("mm2-2fxm2", 1101), ("mm2-2fxs2", 1102), ("mm3-4fxm2", 1103), ("mm3-4fxs2", 1104), ("mm3-4fxm4", 1105), ("mm2-2fxp4", 1106), ("mm3-4fxp4", 1107), ("mm2-2fxm3-2tx1", 1201), ("mm3-2fxm2-2tx1", 1202), ("mm3-2fxs2-2tx1", 1203), ("mm3-1fxl2-3tx1", 1204), ("mm3-1fxs2-3tx1", 1205), ("mm3-1fxm2-3tx1", 1206), ("mm3-2fxm4-2tx1", 1207), ("mm3-3tx1-1fxm2", 1208), ("mm3-4tx5-relay", 1209), ("mm3-3fxxx-1tx1", 1299), ("mm3-4tx1-rt", 1300), ("mm3-2fxm2-2tx1-rt", 1301), ("mm3-2fxs2-2tx1-rt", 1302), ("mm3-2flm3-2tx1-rt", 1303), ("mm4-4tx-sfp", 1401), ("mm4-2tx-sfp", 1402), ("mm3-4tx1-poe", 1403), ("mm3-4sfp", 1404), ("mm3-4tx5-poe", 1405), ("mm3-3tx5-poe-1tx5", 1406), ("mm23-t1t1t1t1", 1407), ("mm23-m2m2t1t1", 1408), ("mm23-s2s2t1t1", 1409), ("mm23-f4f4t1t1", 1410), ("mm33-07079999", 1411), ("mm4-2tx-sfp-giga", 1412), ("mm4-2tx-giga", 1413), ("m4-8tp-rj45", 1501), ("m4-fast-8sfp", 1502), ("m4-fast-8tp-rj45-poe", 1503), ("m4-giga-8sfp", 1550), ("m4-base-giga-4tp-sfp", 1600), ("m4-base-fast-16tp", 1601), ("m4-base-48g-16tp", 1610), ("m4-base-48g-8tp-sfp-8tp", 1611), ("m4-base-48g-3xfp", 1612), ("m4-base-24g-8tp", 1613), ("m4-base-24g-8tp-sfp", 1614), ("m4-base-24g-3xfp", 1615), ("mach102-8tp", 1701), ("m1-8tp-rj45", 1702), ("m1-8mm-sc", 1703), ("m1-8sm-sc", 1704), ("m1-8sfp", 1705), ("mach104-20tx-f", 1706), ("mach104-20tx-fr", 1707), ("mach104-20tx-f-4poe", 1708), ("m1-8tp-rj45-poe", 1709), ("mach104-16tx-poep", 1710), ("mach104-16tx-poep-r", 1711), ("mach104-16tx-poep-e", 1712), ("mach104-16tx-poep-2x", 1713), ("mach104-16tx-poep-2x-r", 1714), ("mach104-16tx-poep-2x-e", 1715), ("mar1040", 1750), ("mar1042", 1751), ("mar1140", 1752), ("mar1142", 1753), ("mm20-ioioioio", 1850)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hmSysModType.setStatus('current')
hmSysModDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 14, 1, 1, 10, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hmSysModDescription.setStatus('current')
hmSysModVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 14, 1, 1, 10, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hmSysModVersion.setStatus('current')
hmSysModNumOfPorts = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 14, 1, 1, 10, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hmSysModNumOfPorts.setStatus('current')
hmSysModFirstMauIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 14, 1, 1, 10, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hmSysModFirstMauIndex.setStatus('current')
hmSysModStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 14, 1, 1, 10, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("physical", 1), ("configurable", 2), ("remove", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hmSysModStatus.setStatus('current')
hmSysModSerialNum = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 14, 1, 1, 10, 1, 9), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hmSysModSerialNum.setStatus('current')
hmInterfaceTable = MibTable((1, 3, 6, 1, 4, 1, 248, 14, 1, 1, 11), )
if mibBuilder.loadTexts: hmInterfaceTable.setStatus('current')
hmInterfaceEntry = MibTableRow((1, 3, 6, 1, 4, 1, 248, 14, 1, 1, 11, 1), ).setIndexNames((0, "HMPRIV-MGMT-SNMP-MIB", "hmIfaceGroupID"), (0, "HMPRIV-MGMT-SNMP-MIB", "hmIfaceID"))
if mibBuilder.loadTexts: hmInterfaceEntry.setStatus('current')
hmIfaceGroupID = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 14, 1, 1, 11, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 5))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hmIfaceGroupID.setStatus('current')
hmIfaceID = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 14, 1, 1, 11, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 128))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hmIfaceID.setStatus('current')
hmIfaceStpEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 14, 1, 1, 11, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('enable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hmIfaceStpEnable.setStatus('current')
hmIfaceLinkType = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 14, 1, 1, 11, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("user", 1), ("uplink", 2))).clone('user')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hmIfaceLinkType.setStatus('current')
hmIfaceAction = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 14, 1, 1, 11, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("noAction", 1), ("resetStats", 2))).clone('noAction')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hmIfaceAction.setStatus('current')
hmIfaceNextHopMacAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 14, 1, 1, 11, 1, 6), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hmIfaceNextHopMacAddress.setStatus('current')
hmIfaceFlowControl = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 14, 1, 1, 11, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('enable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hmIfaceFlowControl.setStatus('current')
hmIfacePriorityThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 14, 1, 1, 11, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7)).clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hmIfacePriorityThreshold.setStatus('current')
hmIfaceName = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 14, 1, 1, 11, 1, 9), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hmIfaceName.setStatus('current')
hmIfaceTrunkID = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 14, 1, 1, 11, 1, 10), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hmIfaceTrunkID.setStatus('current')
hmIfacePrioTOSEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 14, 1, 1, 11, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hmIfacePrioTOSEnable.setStatus('current')
hmIfaceBcastLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 14, 1, 1, 11, 1, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1000000000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hmIfaceBcastLimit.setStatus('current')
hmIfaceUtilization = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 14, 1, 1, 11, 1, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 10000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hmIfaceUtilization.setStatus('current')
hmIfaceUtilizationControlInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 14, 1, 1, 11, 1, 14), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 3600))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hmIfaceUtilizationControlInterval.setStatus('current')
hmIfaceStpBpduGuardEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 14, 1, 1, 11, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('enable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hmIfaceStpBpduGuardEnable.setStatus('current')
hmIfaceStpBpduGuardStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 14, 1, 1, 11, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("true", 1), ("false", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hmIfaceStpBpduGuardStatus.setStatus('current')
hmIfaceCapability = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 14, 1, 1, 11, 1, 17), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hmIfaceCapability.setStatus('current')
hmIfaceIngressLimiterMode = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 14, 1, 1, 11, 1, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("all", 1), ("bc", 2), ("bc-mc", 3), ("bc-mc-uuc", 4))).clone('bc')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hmIfaceIngressLimiterMode.setStatus('current')
hmIfaceIngressLimiterCalculationMode = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 14, 1, 1, 11, 1, 19), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("bytebased", 1), ("packetbased", 2))).clone('bytebased')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hmIfaceIngressLimiterCalculationMode.setStatus('current')
hmIfaceIngressLimiterRate = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 14, 1, 1, 11, 1, 20), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1000000000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hmIfaceIngressLimiterRate.setStatus('current')
hmIfaceEgressLimiterMode = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 14, 1, 1, 11, 1, 21), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("all", 1), ("bc", 2), ("bc-mc", 3), ("bc-mc-uuc", 4))).clone('all')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hmIfaceEgressLimiterMode.setStatus('current')
hmIfaceEgressLimiterCalculationMode = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 14, 1, 1, 11, 1, 22), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("bytebased", 1), ("packetbased", 2))).clone('bytebased')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hmIfaceEgressLimiterCalculationMode.setStatus('current')
hmIfaceEgressLimiterRate = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 14, 1, 1, 11, 1, 23), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1000000000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hmIfaceEgressLimiterRate.setStatus('current')
hmIfaceUtilizationAlarmUpperThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 14, 1, 1, 11, 1, 24), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 10000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hmIfaceUtilizationAlarmUpperThreshold.setStatus('current')
hmIfaceUtilizationAlarmLowerThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 14, 1, 1, 11, 1, 25), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 10000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hmIfaceUtilizationAlarmLowerThreshold.setStatus('current')
hmIfaceUtilizationAlarmCondition = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 14, 1, 1, 11, 1, 26), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hmIfaceUtilizationAlarmCondition.setStatus('current')
hmIfaceCableCrossing = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 14, 1, 1, 11, 1, 27), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2), ("unsupported", 3))).clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hmIfaceCableCrossing.setStatus('current')
hmIfacePhyFastLinkDetection = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 14, 1, 1, 11, 1, 28), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2), ("unsupported", 3))).clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hmIfacePhyFastLinkDetection.setStatus('current')
hmTrunkTable = MibTable((1, 3, 6, 1, 4, 1, 248, 14, 1, 1, 12), )
if mibBuilder.loadTexts: hmTrunkTable.setStatus('current')
hmTrunkEntry = MibTableRow((1, 3, 6, 1, 4, 1, 248, 14, 1, 1, 12, 1), ).setIndexNames((0, "HMPRIV-MGMT-SNMP-MIB", "hmTrunkID"))
if mibBuilder.loadTexts: hmTrunkEntry.setStatus('current')
hmTrunkID = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 14, 1, 1, 12, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 8))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hmTrunkID.setStatus('current')
hmTrunkInterfaces = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 14, 1, 1, 12, 1, 2), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hmTrunkInterfaces.setStatus('current')
hmTrunkName = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 14, 1, 1, 12, 1, 3), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hmTrunkName.setStatus('current')
hmTrunkAction = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 14, 1, 1, 12, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("noAction", 1), ("resetStats", 2))).clone('noAction')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hmTrunkAction.setStatus('current')
hmTrunkAdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 14, 1, 1, 12, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("up", 1), ("down", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hmTrunkAdminStatus.setStatus('current')
hmTrunkOperStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 14, 1, 1, 12, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("up", 1), ("down", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hmTrunkOperStatus.setStatus('current')
hmTrunkLastChange = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 14, 1, 1, 12, 1, 7), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hmTrunkLastChange.setStatus('current')
hmSFPTable = MibTable((1, 3, 6, 1, 4, 1, 248, 14, 1, 1, 13), )
if mibBuilder.loadTexts: hmSFPTable.setStatus('current')
hmSFPEntry = MibTableRow((1, 3, 6, 1, 4, 1, 248, 14, 1, 1, 13, 1), ).setIndexNames((0, "HMPRIV-MGMT-SNMP-MIB", "hmSfpGroupID"), (0, "HMPRIV-MGMT-SNMP-MIB", "hmSfpID"))
if mibBuilder.loadTexts: hmSFPEntry.setStatus('current')
hmSfpGroupID = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 14, 1, 1, 13, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 7)))
if mibBuilder.loadTexts: hmSfpGroupID.setStatus('current')
hmSfpID = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 14, 1, 1, 13, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 128)))
if mibBuilder.loadTexts: hmSfpID.setStatus('current')
hmSfpConnector = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 14, 1, 1, 13, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 6, 7, 8, 11, 33))).clone(namedValues=NamedValues(("non-sfp", 1), ("fiberjack", 6), ("lc", 7), ("mt-rj", 8), ("optical-pigtail", 11), ("copper-pigtail", 33)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hmSfpConnector.setStatus('current')
hmSfpTransceiver = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 14, 1, 1, 13, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 4, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 30, 31, 32, 40, 41))).clone(namedValues=NamedValues(("ge-1000-base-sx", 1), ("ge-1000-base-lx", 2), ("ge-1000-base-cx", 4), ("ge-1000-base-t", 8), ("unsupported", 9), ("oc3-mm-sr", 10), ("oc3-sm-ir", 11), ("oc3-sm-lr", 12), ("oc12-mm-sr", 13), ("oc12-sm-ir", 14), ("oc12-sm-lr", 15), ("oc48-sr", 16), ("oc48-ir", 17), ("oc48-lr", 18), ("xfp-10gbase-sr", 30), ("xfp-10gbase-lr", 31), ("xfp-10gbase-er", 32), ("microfx", 40), ("pof", 41)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hmSfpTransceiver.setStatus('current')
hmSfpVendorOUI = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 14, 1, 1, 13, 1, 5), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hmSfpVendorOUI.setStatus('current')
hmSfpVendorName = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 14, 1, 1, 13, 1, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hmSfpVendorName.setStatus('current')
hmSfpPartNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 14, 1, 1, 13, 1, 7), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hmSfpPartNumber.setStatus('current')
hmSfpPartRev = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 14, 1, 1, 13, 1, 8), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hmSfpPartRev.setStatus('current')
hmSfpSerialNum = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 14, 1, 1, 13, 1, 9), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hmSfpSerialNum.setStatus('current')
hmSfpDateCode = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 14, 1, 1, 13, 1, 10), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hmSfpDateCode.setStatus('current')
hmSfpBitRate = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 14, 1, 1, 13, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hmSfpBitRate.setStatus('current')
hmSfpTemperature = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 14, 1, 1, 13, 1, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hmSfpTemperature.setStatus('current')
hmSfpTxPower = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 14, 1, 1, 13, 1, 13), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hmSfpTxPower.setStatus('current')
hmSfpRxPower = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 14, 1, 1, 13, 1, 14), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hmSfpRxPower.setStatus('current')
hmSfpTxPowerInt = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 14, 1, 1, 13, 1, 15), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hmSfpTxPowerInt.setStatus('current')
hmSfpRxPowerInt = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 14, 1, 1, 13, 1, 16), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hmSfpRxPowerInt.setStatus('current')
hmSfpRxPowerState = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 14, 1, 1, 13, 1, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("ok", 1), ("warning", 2), ("alarm", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hmSfpRxPowerState.setStatus('current')
hmSfpInfoVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 14, 1, 1, 13, 1, 20), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hmSfpInfoVersion.setStatus('current')
hmSfpInfoPartNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 14, 1, 1, 13, 1, 21), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 11))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hmSfpInfoPartNumber.setStatus('current')
hmSfpInfoPartId = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 14, 1, 1, 13, 1, 22), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hmSfpInfoPartId.setStatus('current')
hmSfpInfoMagic = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 14, 1, 1, 13, 1, 23), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hmSfpInfoMagic.setStatus('current')
hmSfpSupported = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 14, 1, 1, 13, 1, 24), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hmSfpSupported.setStatus('current')
hmSfpMaxLength_fiber_9 = MibScalar((1, 3, 6, 1, 4, 1, 248, 14, 1, 1, 13, 1, 30), Integer32()).setLabel("hmSfpMaxLength-fiber-9").setMaxAccess("readonly")
if mibBuilder.loadTexts: hmSfpMaxLength_fiber_9.setStatus('current')
hmSfpMaxLength_fiber_50 = MibScalar((1, 3, 6, 1, 4, 1, 248, 14, 1, 1, 13, 1, 31), Integer32()).setLabel("hmSfpMaxLength-fiber-50").setMaxAccess("readonly")
if mibBuilder.loadTexts: hmSfpMaxLength_fiber_50.setStatus('current')
hmSfpMaxLength_fiber_62_5 = MibScalar((1, 3, 6, 1, 4, 1, 248, 14, 1, 1, 13, 1, 32), Integer32()).setLabel("hmSfpMaxLength-fiber-62-5").setMaxAccess("readonly")
if mibBuilder.loadTexts: hmSfpMaxLength_fiber_62_5.setStatus('current')
hmSfpMaxLength_copper = MibScalar((1, 3, 6, 1, 4, 1, 248, 14, 1, 1, 13, 1, 33), Integer32()).setLabel("hmSfpMaxLength-copper").setMaxAccess("readonly")
if mibBuilder.loadTexts: hmSfpMaxLength_copper.setStatus('current')
hmSfpTxPowerdBm = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 14, 1, 1, 13, 1, 34), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hmSfpTxPowerdBm.setStatus('current')
hmSfpRxPowerdBm = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 14, 1, 1, 13, 1, 35), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hmSfpRxPowerdBm.setStatus('current')
hmSysChassisName = MibScalar((1, 3, 6, 1, 4, 1, 248, 14, 1, 1, 20), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hmSysChassisName.setStatus('current')
hmSysStpEnable = MibScalar((1, 3, 6, 1, 4, 1, 248, 14, 1, 1, 21), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('enable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hmSysStpEnable.setStatus('current')
hmSysFlowControl = MibScalar((1, 3, 6, 1, 4, 1, 248, 14, 1, 1, 22), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hmSysFlowControl.setStatus('current')
hmSysBOOTPEnable = MibScalar((1, 3, 6, 1, 4, 1, 248, 14, 1, 1, 23), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hmSysBOOTPEnable.setStatus('current')
hmSysDHCPEnable = MibScalar((1, 3, 6, 1, 4, 1, 248, 14, 1, 1, 24), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hmSysDHCPEnable.setStatus('current')
hmSysTelnetEnable = MibScalar((1, 3, 6, 1, 4, 1, 248, 14, 1, 1, 25), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('enable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hmSysTelnetEnable.setStatus('current')
hmSysHTTPEnable = MibScalar((1, 3, 6, 1, 4, 1, 248, 14, 1, 1, 26), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('enable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hmSysHTTPEnable.setStatus('current')
hmSysPlugAndPlay = MibScalar((1, 3, 6, 1, 4, 1, 248, 14, 1, 1, 27), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hmSysPlugAndPlay.setStatus('current')
hmBcastLimiterMode = MibScalar((1, 3, 6, 1, 4, 1, 248, 14, 1, 1, 29), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hmBcastLimiterMode.setStatus('current')
hmSystemTime = MibScalar((1, 3, 6, 1, 4, 1, 248, 14, 1, 1, 30), TimeTicks()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hmSystemTime.setStatus('current')
hmSystemTimeSource = MibScalar((1, 3, 6, 1, 4, 1, 248, 14, 1, 1, 31), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("local", 1), ("sntp", 2), ("ptp", 3), ("gps", 4), ("ntp", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hmSystemTimeSource.setStatus('current')
hmSysStpBPDUGuardEnable = MibScalar((1, 3, 6, 1, 4, 1, 248, 14, 1, 1, 32), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hmSysStpBPDUGuardEnable.setStatus('current')
hmSysSTPErrorNumber = MibScalar((1, 3, 6, 1, 4, 1, 248, 14, 1, 1, 33), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hmSysSTPErrorNumber.setStatus('current')
hmSysSoftwareCapability = MibScalar((1, 3, 6, 1, 4, 1, 248, 14, 1, 1, 34), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hmSysSoftwareCapability.setStatus('current')
hmLEDGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 248, 14, 1, 1, 35))
hmLEDRSGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 248, 14, 1, 1, 35, 1))
hmLEDRSPowerSupply = MibScalar((1, 3, 6, 1, 4, 1, 248, 14, 1, 1, 35, 1, 1), LEDState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hmLEDRSPowerSupply.setStatus('current')
hmLEDRStandby = MibScalar((1, 3, 6, 1, 4, 1, 248, 14, 1, 1, 35, 1, 2), LEDState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hmLEDRStandby.setStatus('current')
hmLEDRSRedundancyManager = MibScalar((1, 3, 6, 1, 4, 1, 248, 14, 1, 1, 35, 1, 3), LEDState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hmLEDRSRedundancyManager.setStatus('current')
hmLEDRSFault = MibScalar((1, 3, 6, 1, 4, 1, 248, 14, 1, 1, 35, 1, 4), LEDState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hmLEDRSFault.setStatus('current')
hmLEDOctGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 248, 14, 1, 1, 35, 2))
hmLEDOctPowerSupply1 = MibScalar((1, 3, 6, 1, 4, 1, 248, 14, 1, 1, 35, 2, 1), LEDState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hmLEDOctPowerSupply1.setStatus('current')
hmLEDOctPowerSupply2 = MibScalar((1, 3, 6, 1, 4, 1, 248, 14, 1, 1, 35, 2, 2), LEDState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hmLEDOctPowerSupply2.setStatus('current')
hmLEDOctRedundancyManager = MibScalar((1, 3, 6, 1, 4, 1, 248, 14, 1, 1, 35, 2, 3), LEDState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hmLEDOctRedundancyManager.setStatus('current')
hmLEDOctFault = MibScalar((1, 3, 6, 1, 4, 1, 248, 14, 1, 1, 35, 2, 4), LEDState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hmLEDOctFault.setStatus('current')
hmLEDRSRGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 248, 14, 1, 1, 35, 3))
hmLEDRSRPowerSupply = MibScalar((1, 3, 6, 1, 4, 1, 248, 14, 1, 1, 35, 3, 1), LEDState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hmLEDRSRPowerSupply.setStatus('current')
hmLEDRSRStandby = MibScalar((1, 3, 6, 1, 4, 1, 248, 14, 1, 1, 35, 3, 2), LEDState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hmLEDRSRStandby.setStatus('current')
hmLEDRSRRedundancyManager = MibScalar((1, 3, 6, 1, 4, 1, 248, 14, 1, 1, 35, 3, 3), LEDState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hmLEDRSRRedundancyManager.setStatus('current')
hmLEDRSRFault = MibScalar((1, 3, 6, 1, 4, 1, 248, 14, 1, 1, 35, 3, 4), LEDState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hmLEDRSRFault.setStatus('current')
hmLEDRSRRelay1 = MibScalar((1, 3, 6, 1, 4, 1, 248, 14, 1, 1, 35, 3, 5), LEDState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hmLEDRSRRelay1.setStatus('current')
hmLEDRSRRelay2 = MibScalar((1, 3, 6, 1, 4, 1, 248, 14, 1, 1, 35, 3, 6), LEDState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hmLEDRSRRelay2.setStatus('current')
hmDIPSwitchGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 248, 14, 1, 1, 36))
hmDIPSwitchRSGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 248, 14, 1, 1, 36, 1))
hmDIPSwitchRSRedundancyManager = MibScalar((1, 3, 6, 1, 4, 1, 248, 14, 1, 1, 36, 1, 1), DIPSwitchState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hmDIPSwitchRSRedundancyManager.setStatus('current')
hmDIPSwitchRSStandby = MibScalar((1, 3, 6, 1, 4, 1, 248, 14, 1, 1, 36, 1, 2), DIPSwitchState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hmDIPSwitchRSStandby.setStatus('current')
hmDIPSwitchMICEGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 248, 14, 1, 1, 36, 2))
hmDIPSwitchMICERedundancyManager = MibScalar((1, 3, 6, 1, 4, 1, 248, 14, 1, 1, 36, 2, 1), DIPSwitchState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hmDIPSwitchMICERedundancyManager.setStatus('current')
hmDIPSwitchMICERingPort = MibScalar((1, 3, 6, 1, 4, 1, 248, 14, 1, 1, 36, 2, 2), DIPSwitchState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hmDIPSwitchMICERingPort.setStatus('current')
hmDIPSwitchMICEStandby = MibScalar((1, 3, 6, 1, 4, 1, 248, 14, 1, 1, 36, 2, 3), DIPSwitchState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hmDIPSwitchMICEStandby.setStatus('current')
hmDIPSwitchMICEConfig = MibScalar((1, 3, 6, 1, 4, 1, 248, 14, 1, 1, 36, 2, 4), DIPSwitchState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hmDIPSwitchMICEConfig.setStatus('current')
hmSysMaxTrunks = MibScalar((1, 3, 6, 1, 4, 1, 248, 14, 1, 1, 37), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hmSysMaxTrunks.setStatus('current')
hmLimiterGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 248, 14, 1, 1, 38))
hmIngressLimiterGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 248, 14, 1, 1, 38, 1))
hmIngressLimiterEnable = MibScalar((1, 3, 6, 1, 4, 1, 248, 14, 1, 1, 38, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hmIngressLimiterEnable.setStatus('current')
hmIngressLimiterMode = MibScalar((1, 3, 6, 1, 4, 1, 248, 14, 1, 1, 38, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("all", 1), ("bc", 2), ("bc-mc", 3), ("bc-mc-uuc", 4))).clone('bc')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hmIngressLimiterMode.setStatus('current')
hmIngressUnknUcLimiterGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 248, 14, 1, 1, 38, 1, 3))
hmIngressUnknUcLimiterMode = MibScalar((1, 3, 6, 1, 4, 1, 248, 14, 1, 1, 38, 1, 3, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hmIngressUnknUcLimiterMode.setStatus('current')
hmIngressUnknUcLimiterCalculationMode = MibScalar((1, 3, 6, 1, 4, 1, 248, 14, 1, 1, 38, 1, 3, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("bytebased", 1), ("packetbased", 2))).clone('bytebased')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hmIngressUnknUcLimiterCalculationMode.setStatus('current')
hmIngressUnknUcLimiterRate = MibScalar((1, 3, 6, 1, 4, 1, 248, 14, 1, 1, 38, 1, 3, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1000000000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hmIngressUnknUcLimiterRate.setStatus('current')
hmEgressLimiterGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 248, 14, 1, 1, 38, 2))
hmEgressLimiterEnable = MibScalar((1, 3, 6, 1, 4, 1, 248, 14, 1, 1, 38, 2, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hmEgressLimiterEnable.setStatus('current')
hmSysUSBGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 248, 14, 1, 1, 39))
hmSysMaxUSBPorts = MibScalar((1, 3, 6, 1, 4, 1, 248, 14, 1, 1, 39, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hmSysMaxUSBPorts.setStatus('current')
hmSysSwitchGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 248, 14, 1, 1, 40))
hmSysSwitchLearning = MibScalar((1, 3, 6, 1, 4, 1, 248, 14, 1, 1, 40, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('enabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hmSysSwitchLearning.setStatus('current')
hmSysSwitchMRU = MibScalar((1, 3, 6, 1, 4, 1, 248, 14, 1, 1, 40, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1522, 1552, 1632))).clone(namedValues=NamedValues(("size1522", 1522), ("size1552", 1552), ("size1632", 1632))).clone('size1522')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hmSysSwitchMRU.setStatus('current')
hmSysSwitchFastLinkDetection = MibScalar((1, 3, 6, 1, 4, 1, 248, 14, 1, 1, 40, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('enabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hmSysSwitchFastLinkDetection.setStatus('current')
hmSysSwitchAddressRelearnDetection = MibScalar((1, 3, 6, 1, 4, 1, 248, 14, 1, 1, 40, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hmSysSwitchAddressRelearnDetection.setStatus('current')
hmSysSwitchAddressRelearnThreshold = MibScalar((1, 3, 6, 1, 4, 1, 248, 14, 1, 1, 40, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1024)).clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hmSysSwitchAddressRelearnThreshold.setStatus('current')
hmSysSwitchDuplexMismatchDetection = MibScalar((1, 3, 6, 1, 4, 1, 248, 14, 1, 1, 40, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('enabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hmSysSwitchDuplexMismatchDetection.setStatus('current')
hmSysSwitchFDBFullCounter = MibScalar((1, 3, 6, 1, 4, 1, 248, 14, 1, 1, 40, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hmSysSwitchFDBFullCounter.setStatus('current')
hmSysSwitchFDBHashOptimizingMode = MibScalar((1, 3, 6, 1, 4, 1, 248, 14, 1, 1, 40, 8), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hmSysSwitchFDBHashOptimizingMode.setStatus('current')
hmSysSwitchFDBHashOptimizingStatus = MibScalar((1, 3, 6, 1, 4, 1, 248, 14, 1, 1, 40, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hmSysSwitchFDBHashOptimizingStatus.setStatus('current')
hmSysSwitchVLANGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 248, 14, 1, 1, 40, 10))
hmSysSwitchVLANLearningMode = MibScalar((1, 3, 6, 1, 4, 1, 248, 14, 1, 1, 40, 10, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("ivl", 1), ("svl", 2))).clone('ivl')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hmSysSwitchVLANLearningMode.setStatus('current')
hmSysSwitchVLANLearningStatus = MibScalar((1, 3, 6, 1, 4, 1, 248, 14, 1, 1, 40, 10, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("ivl", 1), ("svl", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hmSysSwitchVLANLearningStatus.setStatus('current')
hmSysSwitchServiceModeGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 248, 14, 1, 1, 40, 11))
hmSysSwitchServiceMode = MibScalar((1, 3, 6, 1, 4, 1, 248, 14, 1, 1, 40, 11, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hmSysSwitchServiceMode.setStatus('current')
hmSysSwitchServiceVlan = MibScalar((1, 3, 6, 1, 4, 1, 248, 14, 1, 1, 40, 11, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hmSysSwitchServiceVlan.setStatus('current')
hmSysSwitchServiceModeOperState = MibScalar((1, 3, 6, 1, 4, 1, 248, 14, 1, 1, 40, 11, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('disable')).setMaxAccess("readonly")
if mibBuilder.loadTexts: hmSysSwitchServiceModeOperState.setStatus('current')
hmSysSwitchRedundancyGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 248, 14, 1, 1, 40, 20))
hmSysSwitchRedundancyRstpMrpMode = MibScalar((1, 3, 6, 1, 4, 1, 248, 14, 1, 1, 40, 20, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hmSysSwitchRedundancyRstpMrpMode.setStatus('current')
hmSysSwitchRedundancyRstpMrpConfigError = MibScalar((1, 3, 6, 1, 4, 1, 248, 14, 1, 1, 40, 20, 2), TruthValue().clone('false')).setMaxAccess("readonly")
if mibBuilder.loadTexts: hmSysSwitchRedundancyRstpMrpConfigError.setStatus('current')
hmSysSwitchRedundancyRstpMrpConfigErrorBridge = MibScalar((1, 3, 6, 1, 4, 1, 248, 14, 1, 1, 40, 20, 3), BridgeIdOrNull()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hmSysSwitchRedundancyRstpMrpConfigErrorBridge.setStatus('current')
hmSysSelftestGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 248, 14, 1, 1, 41))
hmSysSelftestRAM = MibScalar((1, 3, 6, 1, 4, 1, 248, 14, 1, 1, 41, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('enabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hmSysSelftestRAM.setStatus('current')
hmSysSelftestRebootOnError = MibScalar((1, 3, 6, 1, 4, 1, 248, 14, 1, 1, 41, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('enabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hmSysSelftestRebootOnError.setStatus('current')
hmSysSelftestMMUStatus = MibScalar((1, 3, 6, 1, 4, 1, 248, 14, 1, 1, 41, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hmSysSelftestMMUStatus.setStatus('current')
hmSysSelftestRebootOnHdxError = MibScalar((1, 3, 6, 1, 4, 1, 248, 14, 1, 1, 41, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('enabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hmSysSelftestRebootOnHdxError.setStatus('current')
hmSysOEMGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 248, 14, 1, 1, 42))
hmSysOEMID = MibScalar((1, 3, 6, 1, 4, 1, 248, 14, 1, 1, 42, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hmSysOEMID.setStatus('current')
hmSysMaxSignalContacts = MibScalar((1, 3, 6, 1, 4, 1, 248, 14, 1, 1, 43), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hmSysMaxSignalContacts.setStatus('current')
hmSysHttpsEnable = MibScalar((1, 3, 6, 1, 4, 1, 248, 14, 1, 1, 44), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hmSysHttpsEnable.setStatus('current')
hmSysHttpsPortNumber = MibScalar((1, 3, 6, 1, 4, 1, 248, 14, 1, 1, 45), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535)).clone(443)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hmSysHttpsPortNumber.setStatus('current')
hmSysSkipAcaOnBoot = MibScalar((1, 3, 6, 1, 4, 1, 248, 14, 1, 1, 46), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hmSysSkipAcaOnBoot.setStatus('current')
hmPSTable = MibTable((1, 3, 6, 1, 4, 1, 248, 14, 1, 2), )
if mibBuilder.loadTexts: hmPSTable.setStatus('current')
hmPSEntry = MibTableRow((1, 3, 6, 1, 4, 1, 248, 14, 1, 2, 1), ).setIndexNames((0, "HMPRIV-MGMT-SNMP-MIB", "hmPSSysID"), (0, "HMPRIV-MGMT-SNMP-MIB", "hmPSID"))
if mibBuilder.loadTexts: hmPSEntry.setStatus('current')
hmPSSysID = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 14, 1, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hmPSSysID.setStatus('current')
hmPSID = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 14, 1, 2, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 8))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hmPSID.setStatus('current')
hmPSState = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 14, 1, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("ok", 1), ("failed", 2), ("notInstalled", 3), ("unknown", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hmPSState.setStatus('current')
hmPSType = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 14, 1, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("unknown", 1), ("ac-dc", 2), ("dc-dc-24v-1", 3), ("dc-dc-48v-1", 4), ("dc-dc-24v-2", 5), ("dc-dc-48v-2", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hmPSType.setStatus('current')
hmPSVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 14, 1, 2, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hmPSVersion.setStatus('current')
hmPSDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 14, 1, 2, 1, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hmPSDescription.setStatus('current')
hmPSSerialNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 14, 1, 2, 1, 7), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hmPSSerialNumber.setStatus('current')
hmPSProductCode = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 14, 1, 2, 1, 8), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hmPSProductCode.setStatus('current')
hmPSPowerBudget = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 14, 1, 2, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hmPSPowerBudget.setStatus('current')
hmFanTable = MibTable((1, 3, 6, 1, 4, 1, 248, 14, 1, 3), )
if mibBuilder.loadTexts: hmFanTable.setStatus('current')
hmFanEntry = MibTableRow((1, 3, 6, 1, 4, 1, 248, 14, 1, 3, 1), ).setIndexNames((0, "HMPRIV-MGMT-SNMP-MIB", "hmFanSysID"), (0, "HMPRIV-MGMT-SNMP-MIB", "hmFanID"))
if mibBuilder.loadTexts: hmFanEntry.setStatus('current')
hmFanSysID = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 14, 1, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hmFanSysID.setStatus('current')
hmFanID = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 14, 1, 3, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hmFanID.setStatus('current')
hmFanState = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 14, 1, 3, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("ok", 1), ("failed", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hmFanState.setStatus('current')
hmFwdPriorityConfiguration = MibIdentifier((1, 3, 6, 1, 4, 1, 248, 14, 1, 4))
hmPrioTOSEnable = MibScalar((1, 3, 6, 1, 4, 1, 248, 14, 1, 4, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hmPrioTOSEnable.setStatus('current')
hmPrioMACAddressEnable = MibScalar((1, 3, 6, 1, 4, 1, 248, 14, 1, 4, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hmPrioMACAddressEnable.setStatus('current')
hmPrioVlan0TagTransparentMode = MibScalar((1, 3, 6, 1, 4, 1, 248, 14, 1, 4, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hmPrioVlan0TagTransparentMode.setStatus('current')
hmPrioMACAddressTable = MibTable((1, 3, 6, 1, 4, 1, 248, 14, 1, 4, 10), )
if mibBuilder.loadTexts: hmPrioMACAddressTable.setStatus('current')
hmPrioMACAddressEntry = MibTableRow((1, 3, 6, 1, 4, 1, 248, 14, 1, 4, 10, 1), ).setIndexNames((0, "HMPRIV-MGMT-SNMP-MIB", "hmPrioMACAddress"), (0, "HMPRIV-MGMT-SNMP-MIB", "hmPrioMACReceivePort"))
if mibBuilder.loadTexts: hmPrioMACAddressEntry.setStatus('current')
hmPrioMACAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 14, 1, 4, 10, 1, 1), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hmPrioMACAddress.setStatus('current')
hmPrioMACReceivePort = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 14, 1, 4, 10, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 128))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hmPrioMACReceivePort.setStatus('current')
hmPrioMACPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 14, 1, 4, 10, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 9))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hmPrioMACPriority.setStatus('current')
hmPrioMACStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 14, 1, 4, 10, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("other", 1), ("invalid", 2), ("permanent", 3), ("deleteOnReset", 4), ("deleteOnTimeout", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hmPrioMACStatus.setStatus('current')
hmPrioTrafficClassTable = MibTable((1, 3, 6, 1, 4, 1, 248, 14, 1, 4, 11), )
if mibBuilder.loadTexts: hmPrioTrafficClassTable.setStatus('current')
hmPrioTrafficClassEntry = MibTableRow((1, 3, 6, 1, 4, 1, 248, 14, 1, 4, 11, 1), ).setIndexNames((0, "HMPRIV-MGMT-SNMP-MIB", "hmPrioTrafficClassID"))
if mibBuilder.loadTexts: hmPrioTrafficClassEntry.setStatus('current')
hmPrioTrafficClassID = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 14, 1, 4, 11, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 3))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hmPrioTrafficClassID.setStatus('current')
hmPrioTrafficClassWeight = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 14, 1, 4, 11, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(2, 100))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hmPrioTrafficClassWeight.setStatus('current')
hmPrioTosToPrioTable = MibTable((1, 3, 6, 1, 4, 1, 248, 14, 1, 4, 12), )
if mibBuilder.loadTexts: hmPrioTosToPrioTable.setStatus('current')
hmPrioTosToPrioEntry = MibTableRow((1, 3, 6, 1, 4, 1, 248, 14, 1, 4, 12, 1), ).setIndexNames((0, "HMPRIV-MGMT-SNMP-MIB", "hmPrioTTPTos"))
if mibBuilder.loadTexts: hmPrioTosToPrioEntry.setStatus('current')
hmPrioTTPTos = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 14, 1, 4, 12, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hmPrioTTPTos.setStatus('current')
hmPrioTTPPrio = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 14, 1, 4, 12, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hmPrioTTPPrio.setStatus('current')
hmCurrentAddressTable = MibTable((1, 3, 6, 1, 4, 1, 248, 14, 1, 5), )
if mibBuilder.loadTexts: hmCurrentAddressTable.setStatus('current')
hmCurrentAddressEntry = MibTableRow((1, 3, 6, 1, 4, 1, 248, 14, 1, 5, 1), ).setIndexNames((0, "HMPRIV-MGMT-SNMP-MIB", "hmCurrentAddress"), (0, "HMPRIV-MGMT-SNMP-MIB", "hmCurrentAddressReceivePort"))
if mibBuilder.loadTexts: hmCurrentAddressEntry.setStatus('current')
hmCurrentAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 14, 1, 5, 1, 1), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hmCurrentAddress.setStatus('current')
hmCurrentAddressReceivePort = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 14, 1, 5, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 128))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hmCurrentAddressReceivePort.setStatus('current')
hmCurrentAddressStaticEgressPorts = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 14, 1, 5, 1, 3), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hmCurrentAddressStaticEgressPorts.setStatus('current')
hmCurrentAddressEgressPorts = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 14, 1, 5, 1, 4), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hmCurrentAddressEgressPorts.setStatus('current')
hmCurrentAddressStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 14, 1, 5, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("other", 1), ("invalid", 2), ("permanent", 3), ("deleteOnReset", 4), ("deleteOnTimeout", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hmCurrentAddressStatus.setStatus('current')
hmRS2ext = MibIdentifier((1, 3, 6, 1, 4, 1, 248, 14, 1, 10))
hmRS2OperMode = MibScalar((1, 3, 6, 1, 4, 1, 248, 14, 1, 10, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("normal", 1), ("standby-active", 2), ("standby-inactive", 3), ("redundancy-manager-active", 4), ("redundancy-manager-inactive", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hmRS2OperMode.setStatus('current')
hmRS2ConfigError = MibScalar((1, 3, 6, 1, 4, 1, 248, 14, 1, 10, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no-error", 1), ("error", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hmRS2ConfigError.setStatus('current')
hmRS2SigRelayState = MibScalar((1, 3, 6, 1, 4, 1, 248, 14, 1, 10, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("on", 1), ("off", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hmRS2SigRelayState.setStatus('current')
hmSigLinkTable = MibTable((1, 3, 6, 1, 4, 1, 248, 14, 1, 10, 4), )
if mibBuilder.loadTexts: hmSigLinkTable.setStatus('current')
hmSigLinkEntry = MibTableRow((1, 3, 6, 1, 4, 1, 248, 14, 1, 10, 4, 1), ).setIndexNames((0, "HMPRIV-MGMT-SNMP-MIB", "hmSigLinkID"))
if mibBuilder.loadTexts: hmSigLinkEntry.setStatus('current')
hmSigLinkID = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 14, 1, 10, 4, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 7))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hmSigLinkID.setStatus('current')
hmSigLinkAlarm = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 14, 1, 10, 4, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("on", 1), ("off", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hmSigLinkAlarm.setStatus('current')
hmSigTrapReason = MibScalar((1, 3, 6, 1, 4, 1, 248, 14, 1, 10, 5), ObjectIdentifier()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hmSigTrapReason.setStatus('current')
hmSigReasonIndex = MibScalar((1, 3, 6, 1, 4, 1, 248, 14, 1, 10, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hmSigReasonIndex.setStatus('current')
hmRS2TopologyGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 248, 14, 1, 10, 7))
hmRS2PartnerIpAddress = MibScalar((1, 3, 6, 1, 4, 1, 248, 14, 1, 10, 7, 1), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hmRS2PartnerIpAddress.setStatus('current')
hmRS2TopologyTable = MibTable((1, 3, 6, 1, 4, 1, 248, 14, 1, 10, 7, 2), )
if mibBuilder.loadTexts: hmRS2TopologyTable.setStatus('current')
hmRS2TopologyEntry = MibTableRow((1, 3, 6, 1, 4, 1, 248, 14, 1, 10, 7, 2, 1), ).setIndexNames((0, "HMPRIV-MGMT-SNMP-MIB", "hmRS2TopologyLinkID"))
if mibBuilder.loadTexts: hmRS2TopologyEntry.setStatus('current')
hmRS2TopologyLinkID = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 14, 1, 10, 7, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 7))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hmRS2TopologyLinkID.setStatus('current')
hmRS2TopologyIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 14, 1, 10, 7, 2, 1, 2), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hmRS2TopologyIpAddress.setStatus('current')
hmRS2ConnectionMirroringGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 248, 14, 1, 10, 8))
hmRS2ConnectionMirroringStatus = MibScalar((1, 3, 6, 1, 4, 1, 248, 14, 1, 10, 8, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("active", 1), ("inactive", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hmRS2ConnectionMirroringStatus.setStatus('current')
hmRS2ConnectionMirroringPortOne = MibScalar((1, 3, 6, 1, 4, 1, 248, 14, 1, 10, 8, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hmRS2ConnectionMirroringPortOne.setStatus('current')
hmRS2ConnectionMirroringPortTwo = MibScalar((1, 3, 6, 1, 4, 1, 248, 14, 1, 10, 8, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hmRS2ConnectionMirroringPortTwo.setStatus('current')
hmRS2DisableLearningGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 248, 14, 1, 10, 9))
hmRS2DisableLearningStatus = MibScalar((1, 3, 6, 1, 4, 1, 248, 14, 1, 10, 9, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("active", 1), ("inactive", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hmRS2DisableLearningStatus.setStatus('current')
hmRS2SigRelayGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 248, 14, 1, 10, 10))
hmRS2SigRelayMode = MibScalar((1, 3, 6, 1, 4, 1, 248, 14, 1, 10, 10, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("standard", 1), ("manual", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hmRS2SigRelayMode.setStatus('current')
hmRS2SigRelayManualState = MibScalar((1, 3, 6, 1, 4, 1, 248, 14, 1, 10, 10, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("on", 1), ("off", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hmRS2SigRelayManualState.setStatus('current')
hmRS2VlanGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 248, 14, 1, 10, 11))
hmRS2VlanMode = MibScalar((1, 3, 6, 1, 4, 1, 248, 14, 1, 10, 11, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hmRS2VlanMode.setStatus('current')
hmRS2VlanStatus = MibScalar((1, 3, 6, 1, 4, 1, 248, 14, 1, 10, 11, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hmRS2VlanStatus.setStatus('current')
hmRS2SelftestGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 248, 14, 1, 10, 12))
hmRS2SelftestResult = MibScalar((1, 3, 6, 1, 4, 1, 248, 14, 1, 10, 12, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hmRS2SelftestResult.setStatus('current')
hmRS2SelftestMode = MibScalar((1, 3, 6, 1, 4, 1, 248, 14, 1, 10, 12, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hmRS2SelftestMode.setStatus('current')
hmRS2PSGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 248, 14, 1, 10, 13))
hmRS2PSAlarm = MibScalar((1, 3, 6, 1, 4, 1, 248, 14, 1, 10, 13, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hmRS2PSAlarm.setStatus('current')
hmRS2RedundancyGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 248, 14, 1, 10, 14))
hmRS2RedNotGuaranteedAlarm = MibScalar((1, 3, 6, 1, 4, 1, 248, 14, 1, 10, 14, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hmRS2RedNotGuaranteedAlarm.setStatus('current')
hmRS4RGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 248, 14, 1, 10, 15))
hmRS4RVlanGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 248, 14, 1, 10, 15, 1))
hmRS4RVlanPortTable = MibTable((1, 3, 6, 1, 4, 1, 248, 14, 1, 10, 15, 1, 1), )
if mibBuilder.loadTexts: hmRS4RVlanPortTable.setStatus('current')
hmRS4RVlanPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 248, 14, 1, 10, 15, 1, 1, 1), ).setIndexNames((0, "HMPRIV-MGMT-SNMP-MIB", "hmRS4RVlanPortID"))
if mibBuilder.loadTexts: hmRS4RVlanPortEntry.setStatus('current')
hmRS4RVlanPortID = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 14, 1, 10, 15, 1, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4)))
if mibBuilder.loadTexts: hmRS4RVlanPortID.setStatus('current')
hmRS4RVlanPortTagFormatRstp = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 14, 1, 10, 15, 1, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hmRS4RVlanPortTagFormatRstp.setStatus('current')
hmRS2FDBGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 248, 14, 1, 10, 16))
hmRS2FDBHashGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 248, 14, 1, 10, 16, 1))
hmRS2FDBHashOptimizingMode = MibScalar((1, 3, 6, 1, 4, 1, 248, 14, 1, 10, 16, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hmRS2FDBHashOptimizingMode.setStatus('current')
hmRS2FDBHashOptimizingStatus = MibScalar((1, 3, 6, 1, 4, 1, 248, 14, 1, 10, 16, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hmRS2FDBHashOptimizingStatus.setStatus('current')
hmMACH3ChassisExt = MibIdentifier((1, 3, 6, 1, 4, 1, 248, 14, 1, 11))
hmSelfTestResults = MibIdentifier((1, 3, 6, 1, 4, 1, 248, 14, 1, 11, 1))
hmSelfTestCpuResult = MibScalar((1, 3, 6, 1, 4, 1, 248, 14, 1, 11, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hmSelfTestCpuResult.setStatus('current')
hmSelfTestBBResult = MibScalar((1, 3, 6, 1, 4, 1, 248, 14, 1, 11, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hmSelfTestBBResult.setStatus('current')
hmSelfTestBPResult = MibScalar((1, 3, 6, 1, 4, 1, 248, 14, 1, 11, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hmSelfTestBPResult.setStatus('current')
hmSelfTestM1Result = MibScalar((1, 3, 6, 1, 4, 1, 248, 14, 1, 11, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hmSelfTestM1Result.setStatus('current')
hmSelfTestM2Result = MibScalar((1, 3, 6, 1, 4, 1, 248, 14, 1, 11, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hmSelfTestM2Result.setStatus('current')
hmSelfTestM3Result = MibScalar((1, 3, 6, 1, 4, 1, 248, 14, 1, 11, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hmSelfTestM3Result.setStatus('current')
hmSelfTestM4Result = MibScalar((1, 3, 6, 1, 4, 1, 248, 14, 1, 11, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hmSelfTestM4Result.setStatus('current')
hmSelfTestMode = MibScalar((1, 3, 6, 1, 4, 1, 248, 14, 1, 11, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hmSelfTestMode.setStatus('current')
hmMgmtBusSelected = MibScalar((1, 3, 6, 1, 4, 1, 248, 14, 1, 11, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("main", 1), ("redundant", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hmMgmtBusSelected.setStatus('current')
hmSerialNumbers = MibIdentifier((1, 3, 6, 1, 4, 1, 248, 14, 1, 11, 3))
hmSerialNumCpu = MibScalar((1, 3, 6, 1, 4, 1, 248, 14, 1, 11, 3, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hmSerialNumCpu.setStatus('current')
hmSerialNumBB = MibScalar((1, 3, 6, 1, 4, 1, 248, 14, 1, 11, 3, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hmSerialNumBB.setStatus('current')
hmSerialNumBP = MibScalar((1, 3, 6, 1, 4, 1, 248, 14, 1, 11, 3, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hmSerialNumBP.setStatus('current')
hmSerialNumM1 = MibScalar((1, 3, 6, 1, 4, 1, 248, 14, 1, 11, 3, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hmSerialNumM1.setStatus('current')
hmSerialNumM2 = MibScalar((1, 3, 6, 1, 4, 1, 248, 14, 1, 11, 3, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hmSerialNumM2.setStatus('current')
hmSerialNumM3 = MibScalar((1, 3, 6, 1, 4, 1, 248, 14, 1, 11, 3, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hmSerialNumM3.setStatus('current')
hmSerialNumM4 = MibScalar((1, 3, 6, 1, 4, 1, 248, 14, 1, 11, 3, 7), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hmSerialNumM4.setStatus('current')
hmPlugAndPlay = MibIdentifier((1, 3, 6, 1, 4, 1, 248, 14, 1, 11, 4))
hmAutoConfigState = MibScalar((1, 3, 6, 1, 4, 1, 248, 14, 1, 11, 4, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("disabled", 1), ("inProgess", 2), ("ready", 3), ("failed", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hmAutoConfigState.setStatus('current')
hmMACH3Misc = MibIdentifier((1, 3, 6, 1, 4, 1, 248, 14, 1, 11, 5))
hmUserGroupStatus = MibScalar((1, 3, 6, 1, 4, 1, 248, 14, 1, 11, 5, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("active", 1), ("inactive", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hmUserGroupStatus.setStatus('current')
hmAUIGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 248, 14, 1, 12))
hmAUIModuleTable = MibTable((1, 3, 6, 1, 4, 1, 248, 14, 1, 12, 10), )
if mibBuilder.loadTexts: hmAUIModuleTable.setStatus('current')
hmAUIModuleEntry = MibTableRow((1, 3, 6, 1, 4, 1, 248, 14, 1, 12, 10, 1), ).setIndexNames((0, "HMPRIV-MGMT-SNMP-MIB", "hmAUIModuleID"))
if mibBuilder.loadTexts: hmAUIModuleEntry.setStatus('current')
hmAUIModuleID = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 14, 1, 12, 10, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 7))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hmAUIModuleID.setStatus('current')
hmAUIModuleDTEPowerMonitor = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 14, 1, 12, 10, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hmAUIModuleDTEPowerMonitor.setStatus('current')
hmAUIPortTable = MibTable((1, 3, 6, 1, 4, 1, 248, 14, 1, 12, 11), )
if mibBuilder.loadTexts: hmAUIPortTable.setStatus('current')
hmAUIPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 248, 14, 1, 12, 11, 1), ).setIndexNames((0, "HMPRIV-MGMT-SNMP-MIB", "hmAUIPortID"))
if mibBuilder.loadTexts: hmAUIPortEntry.setStatus('current')
hmAUIPortID = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 14, 1, 12, 11, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 128))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hmAUIPortID.setStatus('current')
hmAUIPortDTEPower = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 14, 1, 12, 11, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hmAUIPortDTEPower.setStatus('current')
hmAUIPortSQETest = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 14, 1, 12, 11, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hmAUIPortSQETest.setStatus('current')
hmAction = MibScalar((1, 3, 6, 1, 4, 1, 248, 14, 2, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 10, 12))).clone(namedValues=NamedValues(("other", 1), ("reset", 2), ("resetStats", 3), ("resetFDB", 4), ("resetARP", 5), ("resetL3Stats", 6), ("resetL4-7Stats", 7), ("hotRestart", 10), ("gbl-reset", 12))).clone('other')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hmAction.setStatus('current')
hmActionResult = MibScalar((1, 3, 6, 1, 4, 1, 248, 14, 2, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hmActionResult.setStatus('current')
hmNetwork = MibIdentifier((1, 3, 6, 1, 4, 1, 248, 14, 2, 3))
hmNetLocalIPAddr = MibScalar((1, 3, 6, 1, 4, 1, 248, 14, 2, 3, 1), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hmNetLocalIPAddr.setStatus('current')
hmNetLocalPhysAddr = MibScalar((1, 3, 6, 1, 4, 1, 248, 14, 2, 3, 2), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hmNetLocalPhysAddr.setStatus('current')
hmNetGatewayIPAddr = MibScalar((1, 3, 6, 1, 4, 1, 248, 14, 2, 3, 3), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hmNetGatewayIPAddr.setStatus('current')
hmNetMask = MibScalar((1, 3, 6, 1, 4, 1, 248, 14, 2, 3, 4), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hmNetMask.setStatus('current')
hmNetPPPBaseIPAddr = MibScalar((1, 3, 6, 1, 4, 1, 248, 14, 2, 3, 5), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hmNetPPPBaseIPAddr.setStatus('current')
hmNetPPPNetMask = MibScalar((1, 3, 6, 1, 4, 1, 248, 14, 2, 3, 6), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hmNetPPPNetMask.setStatus('current')
hmNetAction = MibScalar((1, 3, 6, 1, 4, 1, 248, 14, 2, 3, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("other", 1), ("activate", 2))).clone('other')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hmNetAction.setStatus('current')
hmNetVlanID = MibScalar((1, 3, 6, 1, 4, 1, 248, 14, 2, 3, 8), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hmNetVlanID.setStatus('current')
hmNetLocalPhysAddrRange = MibScalar((1, 3, 6, 1, 4, 1, 248, 14, 2, 3, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hmNetLocalPhysAddrRange.setStatus('current')
hmNetVlanPriority = MibScalar((1, 3, 6, 1, 4, 1, 248, 14, 2, 3, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hmNetVlanPriority.setStatus('current')
hmNetIpDscpPriority = MibScalar((1, 3, 6, 1, 4, 1, 248, 14, 2, 3, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 63))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hmNetIpDscpPriority.setStatus('current')
hmNetACDGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 248, 14, 2, 3, 12))
hmNetACDStatus = MibScalar((1, 3, 6, 1, 4, 1, 248, 14, 2, 3, 12, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2), ("activeDetectionOnly", 3), ("passiveDetectionOnly", 4))).clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hmNetACDStatus.setStatus('current')
hmNetACDOngoingProbeStatus = MibScalar((1, 3, 6, 1, 4, 1, 248, 14, 2, 3, 12, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('enable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hmNetACDOngoingProbeStatus.setStatus('current')
hmNetACDDelay = MibScalar((1, 3, 6, 1, 4, 1, 248, 14, 2, 3, 12, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 500)).clone(200)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hmNetACDDelay.setStatus('current')
hmNetACDReleaseDelay = MibScalar((1, 3, 6, 1, 4, 1, 248, 14, 2, 3, 12, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 3600)).clone(15)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hmNetACDReleaseDelay.setStatus('current')
hmNetACDMaxProtection = MibScalar((1, 3, 6, 1, 4, 1, 248, 14, 2, 3, 12, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100)).clone(3)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hmNetACDMaxProtection.setStatus('current')
hmNetACDProtectInterval = MibScalar((1, 3, 6, 1, 4, 1, 248, 14, 2, 3, 12, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 5000)).clone(200)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hmNetACDProtectInterval.setStatus('current')
hmNetACDFaultState = MibScalar((1, 3, 6, 1, 4, 1, 248, 14, 2, 3, 12, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("true", 1), ("false", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hmNetACDFaultState.setStatus('current')
hmNetACDAddrTable = MibTable((1, 3, 6, 1, 4, 1, 248, 14, 2, 3, 12, 20), )
if mibBuilder.loadTexts: hmNetACDAddrTable.setStatus('current')
hmNetACDAddrEntry = MibTableRow((1, 3, 6, 1, 4, 1, 248, 14, 2, 3, 12, 20, 1), ).setIndexNames((0, "HMPRIV-MGMT-SNMP-MIB", "hmNetACDTimeMark"))
if mibBuilder.loadTexts: hmNetACDAddrEntry.setStatus('current')
hmNetACDTimeMark = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 14, 2, 3, 12, 20, 1, 1), TimeFilter()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hmNetACDTimeMark.setStatus('current')
hmNetACDAddrSubtype = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 14, 2, 3, 12, 20, 1, 3), AddressFamilyNumbers()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hmNetACDAddrSubtype.setStatus('current')
hmNetACDAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 14, 2, 3, 12, 20, 1, 5), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 31))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hmNetACDAddr.setStatus('current')
hmNetACDMAC = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 14, 2, 3, 12, 20, 1, 7), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hmNetACDMAC.setStatus('current')
hmNetACDIfId = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 14, 2, 3, 12, 20, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hmNetACDIfId.setStatus('current')
hmNetHiDiscoveryGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 248, 14, 2, 3, 20))
hmNetHiDiscoveryStatus = MibScalar((1, 3, 6, 1, 4, 1, 248, 14, 2, 3, 20, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2), ("readOnly", 3))).clone('enable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hmNetHiDiscoveryStatus.setStatus('current')
hmNetHiDiscoveryRelay = MibScalar((1, 3, 6, 1, 4, 1, 248, 14, 2, 3, 20, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hmNetHiDiscoveryRelay.setStatus('current')
hmNetSNTPGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 248, 14, 2, 3, 30))
hmNetSNTPStatus = MibScalar((1, 3, 6, 1, 4, 1, 248, 14, 2, 3, 30, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hmNetSNTPStatus.setStatus('current')
hmNetSNTPServer = MibScalar((1, 3, 6, 1, 4, 1, 248, 14, 2, 3, 30, 2), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hmNetSNTPServer.setStatus('current')
hmNetSNTPTime = MibScalar((1, 3, 6, 1, 4, 1, 248, 14, 2, 3, 30, 3), TimeTicks()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hmNetSNTPTime.setStatus('current')
hmNetSNTPLocalOffset = MibScalar((1, 3, 6, 1, 4, 1, 248, 14, 2, 3, 30, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1000, 1000)).clone(60)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hmNetSNTPLocalOffset.setStatus('current')
hmNetSNTPServer2 = MibScalar((1, 3, 6, 1, 4, 1, 248, 14, 2, 3, 30, 5), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hmNetSNTPServer2.setStatus('current')
hmNetSNTPSyncInterval = MibScalar((1, 3, 6, 1, 4, 1, 248, 14, 2, 3, 30, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 3600)).clone(30)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hmNetSNTPSyncInterval.setStatus('current')
hmNetSNTPAcceptBroadcasts = MibScalar((1, 3, 6, 1, 4, 1, 248, 14, 2, 3, 30, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('enable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hmNetSNTPAcceptBroadcasts.setStatus('current')
hmNetSNTPAnycastAddr = MibScalar((1, 3, 6, 1, 4, 1, 248, 14, 2, 3, 30, 8), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hmNetSNTPAnycastAddr.setStatus('current')
hmNetSNTPAnycastVlan = MibScalar((1, 3, 6, 1, 4, 1, 248, 14, 2, 3, 30, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4042)).clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hmNetSNTPAnycastVlan.setStatus('current')
hmNetSNTPAnycastInterval = MibScalar((1, 3, 6, 1, 4, 1, 248, 14, 2, 3, 30, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 3600)).clone(120)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hmNetSNTPAnycastInterval.setStatus('current')
hmNetSNTPOperStatus = MibScalar((1, 3, 6, 1, 4, 1, 248, 14, 2, 3, 30, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hmNetSNTPOperStatus.setStatus('current')
hmNetSNTPTimeAdjustThreshold = MibScalar((1, 3, 6, 1, 4, 1, 248, 14, 2, 3, 30, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hmNetSNTPTimeAdjustThreshold.setStatus('current')
hmNetSNTPOnceAtStartup = MibScalar((1, 3, 6, 1, 4, 1, 248, 14, 2, 3, 30, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hmNetSNTPOnceAtStartup.setStatus('current')
hmNetSNTPServerOnlyIfSync = MibScalar((1, 3, 6, 1, 4, 1, 248, 14, 2, 3, 30, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hmNetSNTPServerOnlyIfSync.setStatus('current')
hmNetSNTPServerStatus = MibScalar((1, 3, 6, 1, 4, 1, 248, 14, 2, 3, 30, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('enable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hmNetSNTPServerStatus.setStatus('current')
hmNetSNTPClientStatus = MibScalar((1, 3, 6, 1, 4, 1, 248, 14, 2, 3, 30, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('enable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hmNetSNTPClientStatus.setStatus('current')
hmNetNTPGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 248, 14, 2, 3, 31))
hmNetNTPOperation = MibScalar((1, 3, 6, 1, 4, 1, 248, 14, 2, 3, 31, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("off", 1), ("symmetric-active", 2), ("symmetric-passive", 3), ("client", 4), ("server", 5), ("client-server", 6), ("broadcast-client", 7))).clone('off')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hmNetNTPOperation.setStatus('current')
hmNetNTPServer1AddrType = MibScalar((1, 3, 6, 1, 4, 1, 248, 14, 2, 3, 31, 2), InetAddressType().clone('ipv4')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hmNetNTPServer1AddrType.setStatus('current')
hmNetNTPServer1Address = MibScalar((1, 3, 6, 1, 4, 1, 248, 14, 2, 3, 31, 3), InetAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hmNetNTPServer1Address.setStatus('current')
hmNetNTPServer2AddrType = MibScalar((1, 3, 6, 1, 4, 1, 248, 14, 2, 3, 31, 4), InetAddressType().clone('ipv4')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hmNetNTPServer2AddrType.setStatus('current')
hmNetNTPServer2Address = MibScalar((1, 3, 6, 1, 4, 1, 248, 14, 2, 3, 31, 5), InetAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hmNetNTPServer2Address.setStatus('current')
hmNetNTPSyncInterval = MibScalar((1, 3, 6, 1, 4, 1, 248, 14, 2, 3, 31, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(16, 4096)).clone(64)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hmNetNTPSyncInterval.setStatus('current')
hmNetNTPAnycastAddrType = MibScalar((1, 3, 6, 1, 4, 1, 248, 14, 2, 3, 31, 7), InetAddressType().clone('ipv4')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hmNetNTPAnycastAddrType.setStatus('current')
hmNetNTPAnycastAddress = MibScalar((1, 3, 6, 1, 4, 1, 248, 14, 2, 3, 31, 8), InetAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hmNetNTPAnycastAddress.setStatus('current')
hmNetNTPAnycastInterval = MibScalar((1, 3, 6, 1, 4, 1, 248, 14, 2, 3, 31, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(16, 4096)).clone(128)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hmNetNTPAnycastInterval.setStatus('current')
hmNetNTPStatusText = MibScalar((1, 3, 6, 1, 4, 1, 248, 14, 2, 3, 31, 10), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hmNetNTPStatusText.setStatus('current')
hmNetNTPStatusCode = MibScalar((1, 3, 6, 1, 4, 1, 248, 14, 2, 3, 31, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hmNetNTPStatusCode.setStatus('current')
hmNetPTPGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 248, 14, 2, 3, 40))
hmNetPTPConfiguration = MibIdentifier((1, 3, 6, 1, 4, 1, 248, 14, 2, 3, 40, 1))
hmNetPTPEnable = MibScalar((1, 3, 6, 1, 4, 1, 248, 14, 2, 3, 40, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hmNetPTPEnable.setStatus('current')
hmNetPTPAction = MibScalar((1, 3, 6, 1, 4, 1, 248, 14, 2, 3, 40, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("init-with-default", 2), ("init-with-nvm", 3))).clone('other')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hmNetPTPAction.setStatus('current')
hmNetPTPClockMode = MibScalar((1, 3, 6, 1, 4, 1, 248, 14, 2, 3, 40, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 4, 5, 6, 7, 9))).clone(namedValues=NamedValues(("v1-boundary-clock", 1), ("v1-simple-mode", 4), ("v2-boundary-clock-onestep", 5), ("v2-boundary-clock-twostep", 6), ("v2-transparent-clock", 7), ("v2-simple-mode", 9))).clone('v1-simple-mode')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hmNetPTPClockMode.setStatus('current')
hmNetPTPSlavePort = MibScalar((1, 3, 6, 1, 4, 1, 248, 14, 2, 3, 40, 1, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hmNetPTPSlavePort.setStatus('current')
hmNetPTPIsSynchronized = MibScalar((1, 3, 6, 1, 4, 1, 248, 14, 2, 3, 40, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("true", 1), ("false", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hmNetPTPIsSynchronized.setStatus('current')
hmNetPTPSyncLowerBound = MibScalar((1, 3, 6, 1, 4, 1, 248, 14, 2, 3, 40, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 999999999)).clone(30)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hmNetPTPSyncLowerBound.setStatus('current')
hmNetPTPSyncUpperBound = MibScalar((1, 3, 6, 1, 4, 1, 248, 14, 2, 3, 40, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(31, 1000000000)).clone(5000)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hmNetPTPSyncUpperBound.setStatus('current')
hmNetPTPClockStratum = MibScalar((1, 3, 6, 1, 4, 1, 248, 14, 2, 3, 40, 1, 8), Integer32().clone(255)).setMaxAccess("readonly")
if mibBuilder.loadTexts: hmNetPTPClockStratum.setStatus('current')
hmNetPTPClockIdentifier = MibScalar((1, 3, 6, 1, 4, 1, 248, 14, 2, 3, 40, 1, 9), OctetString().subtype(subtypeSpec=ValueSizeConstraint(4, 4)).setFixedLength(4)).setMaxAccess("readonly")
if mibBuilder.loadTexts: hmNetPTPClockIdentifier.setStatus('current')
hmNetPTPClockVariance = MibScalar((1, 3, 6, 1, 4, 1, 248, 14, 2, 3, 40, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-32768, 32767)).clone(-16256)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hmNetPTPClockVariance.setStatus('current')
hmNetPTPPreferredMaster = MibScalar((1, 3, 6, 1, 4, 1, 248, 14, 2, 3, 40, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("true", 1), ("false", 2))).clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hmNetPTPPreferredMaster.setStatus('current')
hmNetPTPSyncInterval = MibScalar((1, 3, 6, 1, 4, 1, 248, 14, 2, 3, 40, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 8, 16, 64))).clone(namedValues=NamedValues(("sec-1", 1), ("sec-2", 2), ("sec-8", 8), ("sec-16", 16), ("sec-64", 64))).clone('sec-2')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hmNetPTPSyncInterval.setStatus('current')
hmNetPTPSubdomainName = MibScalar((1, 3, 6, 1, 4, 1, 248, 14, 2, 3, 40, 1, 13), OctetString().subtype(subtypeSpec=ValueSizeConstraint(16, 16)).setFixedLength(16)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hmNetPTPSubdomainName.setStatus('current')
hmNetPTPOffsetFromMasterNanoSecs = MibScalar((1, 3, 6, 1, 4, 1, 248, 14, 2, 3, 40, 1, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hmNetPTPOffsetFromMasterNanoSecs.setStatus('current')
hmNetPTPAbsMaxOffset = MibScalar((1, 3, 6, 1, 4, 1, 248, 14, 2, 3, 40, 1, 15), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hmNetPTPAbsMaxOffset.setStatus('current')
hmNetPTPOneWayDelayNanoSecs = MibScalar((1, 3, 6, 1, 4, 1, 248, 14, 2, 3, 40, 1, 16), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hmNetPTPOneWayDelayNanoSecs.setStatus('current')
hmNetPTPTimeSeconds = MibScalar((1, 3, 6, 1, 4, 1, 248, 14, 2, 3, 40, 1, 17), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hmNetPTPTimeSeconds.setStatus('current')
hmNetPTPObservedDrift = MibScalar((1, 3, 6, 1, 4, 1, 248, 14, 2, 3, 40, 1, 18), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hmNetPTPObservedDrift.setStatus('current')
hmNetPTPPiIntegral = MibScalar((1, 3, 6, 1, 4, 1, 248, 14, 2, 3, 40, 1, 19), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 50000)).clone(6250)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hmNetPTPPiIntegral.setStatus('current')
hmNetPTPParentUUID = MibScalar((1, 3, 6, 1, 4, 1, 248, 14, 2, 3, 40, 1, 20), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hmNetPTPParentUUID.setStatus('current')
hmNetPTPGrandmasterUUID = MibScalar((1, 3, 6, 1, 4, 1, 248, 14, 2, 3, 40, 1, 21), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hmNetPTPGrandmasterUUID.setStatus('current')
hmNetPTPCurrentUTCOffset = MibScalar((1, 3, 6, 1, 4, 1, 248, 14, 2, 3, 40, 1, 22), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hmNetPTPCurrentUTCOffset.setStatus('current')
hmNetPTPleap59 = MibScalar((1, 3, 6, 1, 4, 1, 248, 14, 2, 3, 40, 1, 23), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("true", 1), ("false", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hmNetPTPleap59.setStatus('current')
hmNetPTPleap61 = MibScalar((1, 3, 6, 1, 4, 1, 248, 14, 2, 3, 40, 1, 24), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("true", 1), ("false", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hmNetPTPleap61.setStatus('current')
hmNetPTPStepsRemoved = MibScalar((1, 3, 6, 1, 4, 1, 248, 14, 2, 3, 40, 1, 25), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hmNetPTPStepsRemoved.setStatus('current')
hmNetPTPEpochNumber = MibScalar((1, 3, 6, 1, 4, 1, 248, 14, 2, 3, 40, 1, 26), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hmNetPTPEpochNumber.setStatus('current')
hmNetPTPStaticDrift = MibScalar((1, 3, 6, 1, 4, 1, 248, 14, 2, 3, 40, 1, 27), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-500000000, 500000000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hmNetPTPStaticDrift.setStatus('current')
hmNetPTPPortTable = MibTable((1, 3, 6, 1, 4, 1, 248, 14, 2, 3, 40, 2), )
if mibBuilder.loadTexts: hmNetPTPPortTable.setStatus('current')
hmNetPTPPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 248, 14, 2, 3, 40, 2, 1), ).setIndexNames((0, "HMPRIV-MGMT-SNMP-MIB", "hmNetPTPPortID"))
if mibBuilder.loadTexts: hmNetPTPPortEntry.setStatus('current')
hmNetPTPPortID = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 14, 2, 3, 40, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 128))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hmNetPTPPortID.setStatus('current')
hmNetPTPPortState = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 14, 2, 3, 40, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9))).clone(namedValues=NamedValues(("initializing", 1), ("faulty", 2), ("disabled", 3), ("listening", 4), ("pre-master", 5), ("master", 6), ("passive", 7), ("uncalibrated", 8), ("slave", 9)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hmNetPTPPortState.setStatus('current')
hmNetPTPPortBurstEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 14, 2, 3, 40, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("true", 1), ("false", 2))).clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hmNetPTPPortBurstEnable.setStatus('current')
hmNetPTPPortEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 14, 2, 3, 40, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("true", 1), ("false", 2))).clone('true')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hmNetPTPPortEnable.setStatus('current')
hmNetPTP2Group = MibIdentifier((1, 3, 6, 1, 4, 1, 248, 14, 2, 3, 41))
hmNetPTP2Configuration = MibIdentifier((1, 3, 6, 1, 4, 1, 248, 14, 2, 3, 41, 1))
hmNetPTP2TwoStepClock = MibScalar((1, 3, 6, 1, 4, 1, 248, 14, 2, 3, 41, 1, 1), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hmNetPTP2TwoStepClock.setStatus('current')
hmNetPTP2ClockIdentity = MibScalar((1, 3, 6, 1, 4, 1, 248, 14, 2, 3, 41, 1, 2), PTPClockIdentity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hmNetPTP2ClockIdentity.setStatus('current')
hmNetPTP2Priority1 = MibScalar((1, 3, 6, 1, 4, 1, 248, 14, 2, 3, 41, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255)).clone(128)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hmNetPTP2Priority1.setStatus('current')
hmNetPTP2Priority2 = MibScalar((1, 3, 6, 1, 4, 1, 248, 14, 2, 3, 41, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255)).clone(128)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hmNetPTP2Priority2.setStatus('current')
hmNetPTP2DomainNumber = MibScalar((1, 3, 6, 1, 4, 1, 248, 14, 2, 3, 41, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hmNetPTP2DomainNumber.setStatus('current')
hmNetPTP2StepsRemoved = MibScalar((1, 3, 6, 1, 4, 1, 248, 14, 2, 3, 41, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hmNetPTP2StepsRemoved.setStatus('current')
hmNetPTP2OffsetFromMaster = MibScalar((1, 3, 6, 1, 4, 1, 248, 14, 2, 3, 41, 1, 7), PTPTimeInterval()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hmNetPTP2OffsetFromMaster.setStatus('current')
hmNetPTP2MeanPathDelay = MibScalar((1, 3, 6, 1, 4, 1, 248, 14, 2, 3, 41, 1, 8), PTPTimeInterval()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hmNetPTP2MeanPathDelay.setStatus('current')
hmNetPTP2ParentPortIdentity = MibScalar((1, 3, 6, 1, 4, 1, 248, 14, 2, 3, 41, 1, 9), PTPPortIdentity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hmNetPTP2ParentPortIdentity.setStatus('current')
hmNetPTP2ParentStats = MibScalar((1, 3, 6, 1, 4, 1, 248, 14, 2, 3, 41, 1, 10), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hmNetPTP2ParentStats.setStatus('current')
hmNetPTP2ObservedParentOffsetScaledLogVariance = MibScalar((1, 3, 6, 1, 4, 1, 248, 14, 2, 3, 41, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hmNetPTP2ObservedParentOffsetScaledLogVariance.setStatus('current')
hmNetPTP2ObservedParentClockPhaseChangeRate = MibScalar((1, 3, 6, 1, 4, 1, 248, 14, 2, 3, 41, 1, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hmNetPTP2ObservedParentClockPhaseChangeRate.setStatus('current')
hmNetPTP2GrandmasterIdentity = MibScalar((1, 3, 6, 1, 4, 1, 248, 14, 2, 3, 41, 1, 13), PTPClockIdentity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hmNetPTP2GrandmasterIdentity.setStatus('current')
hmNetPTP2GrandmasterClockQuality = MibScalar((1, 3, 6, 1, 4, 1, 248, 14, 2, 3, 41, 1, 14), PTPClockQuality()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hmNetPTP2GrandmasterClockQuality.setStatus('current')
hmNetPTP2GrandmasterPriority1 = MibScalar((1, 3, 6, 1, 4, 1, 248, 14, 2, 3, 41, 1, 15), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hmNetPTP2GrandmasterPriority1.setStatus('current')
hmNetPTP2GrandmasterPriority2 = MibScalar((1, 3, 6, 1, 4, 1, 248, 14, 2, 3, 41, 1, 16), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hmNetPTP2GrandmasterPriority2.setStatus('current')
hmNetPTP2CurrentUtcOffset = MibScalar((1, 3, 6, 1, 4, 1, 248, 14, 2, 3, 41, 1, 17), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hmNetPTP2CurrentUtcOffset.setStatus('current')
hmNetPTP2CurrentUtcOffsetValid = MibScalar((1, 3, 6, 1, 4, 1, 248, 14, 2, 3, 41, 1, 18), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hmNetPTP2CurrentUtcOffsetValid.setStatus('current')
hmNetPTP2Leap59 = MibScalar((1, 3, 6, 1, 4, 1, 248, 14, 2, 3, 41, 1, 19), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hmNetPTP2Leap59.setStatus('current')
hmNetPTP2Leap61 = MibScalar((1, 3, 6, 1, 4, 1, 248, 14, 2, 3, 41, 1, 20), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hmNetPTP2Leap61.setStatus('current')
hmNetPTP2TimeTraceable = MibScalar((1, 3, 6, 1, 4, 1, 248, 14, 2, 3, 41, 1, 21), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hmNetPTP2TimeTraceable.setStatus('current')
hmNetPTP2FrequencyTraceable = MibScalar((1, 3, 6, 1, 4, 1, 248, 14, 2, 3, 41, 1, 22), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hmNetPTP2FrequencyTraceable.setStatus('current')
hmNetPTP2PtpTimescale = MibScalar((1, 3, 6, 1, 4, 1, 248, 14, 2, 3, 41, 1, 23), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hmNetPTP2PtpTimescale.setStatus('current')
hmNetPTP2TimeSource = MibScalar((1, 3, 6, 1, 4, 1, 248, 14, 2, 3, 41, 1, 24), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(16, 32, 48, 64, 80, 96, 144, 160))).clone(namedValues=NamedValues(("atomicClock", 16), ("gps", 32), ("terrestrialRadio", 48), ("ptp", 64), ("ntp", 80), ("handSet", 96), ("other", 144), ("internalOscillator", 160)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hmNetPTP2TimeSource.setStatus('current')
hmNetPTP2GrandmasterClockClass = MibScalar((1, 3, 6, 1, 4, 1, 248, 14, 2, 3, 41, 1, 25), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hmNetPTP2GrandmasterClockClass.setStatus('current')
hmNetPTP2GrandmasterClockAccuracy = MibScalar((1, 3, 6, 1, 4, 1, 248, 14, 2, 3, 41, 1, 26), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 254))).clone(namedValues=NamedValues(("within25ns", 32), ("within100ns", 33), ("within250ns", 34), ("within1000ns", 35), ("within2500ns", 36), ("within10us", 37), ("within25us", 38), ("within100us", 39), ("within250us", 40), ("within1000us", 41), ("within2500us", 42), ("within10ms", 43), ("within25ms", 44), ("within100ms", 45), ("within250ms", 46), ("within1s", 47), ("within10s", 48), ("beyond10s", 49), ("unknown", 254)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hmNetPTP2GrandmasterClockAccuracy.setStatus('current')
hmNetPTP2GrandmasterClockVariance = MibScalar((1, 3, 6, 1, 4, 1, 248, 14, 2, 3, 41, 1, 27), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hmNetPTP2GrandmasterClockVariance.setStatus('current')
hmNetPTP2PortTable = MibTable((1, 3, 6, 1, 4, 1, 248, 14, 2, 3, 41, 2), )
if mibBuilder.loadTexts: hmNetPTP2PortTable.setStatus('current')
hmNetPTP2PortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 248, 14, 2, 3, 41, 2, 1), ).setIndexNames((0, "HMPRIV-MGMT-SNMP-MIB", "hmNetPTPPortID"))
if mibBuilder.loadTexts: hmNetPTP2PortEntry.setStatus('current')
hmNetPTP2PortEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 14, 2, 3, 41, 2, 1, 1), TruthValue().clone('true')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hmNetPTP2PortEnable.setStatus('current')
hmNetPTP2PortState = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 14, 2, 3, 41, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9))).clone(namedValues=NamedValues(("initializing", 1), ("faulty", 2), ("disabled", 3), ("listening", 4), ("pre-master", 5), ("master", 6), ("passive", 7), ("uncalibrated", 8), ("slave", 9)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hmNetPTP2PortState.setStatus('current')
hmNetPTP2LogDelayReqInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 14, 2, 3, 41, 2, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hmNetPTP2LogDelayReqInterval.setStatus('current')
hmNetPTP2PeerMeanPathDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 14, 2, 3, 41, 2, 1, 4), PTPTimeInterval()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hmNetPTP2PeerMeanPathDelay.setStatus('current')
hmNetPTP2LogAnnounceInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 14, 2, 3, 41, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4))).clone(namedValues=NamedValues(("sec-1", 0), ("sec-2", 1), ("sec-4", 2), ("sec-8", 3), ("sec-16", 4))).clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hmNetPTP2LogAnnounceInterval.setStatus('current')
hmNetPTP2AnnounceReceiptTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 14, 2, 3, 41, 2, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(2, 10)).clone(3)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hmNetPTP2AnnounceReceiptTimeout.setStatus('current')
hmNetPTP2LogSyncInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 14, 2, 3, 41, 2, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(-2, -1, 0, 1))).clone(namedValues=NamedValues(("msec-250", -2), ("msec-500", -1), ("sec-1", 0), ("sec-2", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hmNetPTP2LogSyncInterval.setStatus('current')
hmNetPTP2DelayMechanism = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 14, 2, 3, 41, 2, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 254))).clone(namedValues=NamedValues(("e2e", 1), ("p2p", 2), ("disabled", 254))).clone('e2e')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hmNetPTP2DelayMechanism.setStatus('current')
hmNetPTP2LogPdelayReqInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 14, 2, 3, 41, 2, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("sec-1", 0), ("sec-2", 1), ("sec-4", 2), ("sec-8", 3), ("sec-16", 4), ("sec-32", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hmNetPTP2LogPdelayReqInterval.setStatus('current')
hmNetPTP2VersionNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 14, 2, 3, 41, 2, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("ptpVersion1", 1), ("ptpVersion2", 2))).clone('ptpVersion2')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hmNetPTP2VersionNumber.setStatus('current')
hmNetPTP2NetworkProtocol = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 14, 2, 3, 41, 2, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 3))).clone(namedValues=NamedValues(("udpIpv4", 1), ("ieee8023", 3))).clone('udpIpv4')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hmNetPTP2NetworkProtocol.setStatus('current')
hmNetPTP2V1Compatibility = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 14, 2, 3, 41, 2, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("on", 1), ("off", 2), ("auto", 3))).clone('auto')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hmNetPTP2V1Compatibility.setStatus('current')
hmNetPTP2DelayAsymmetry = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 14, 2, 3, 41, 2, 1, 13), PTPTimeInterval().clone(hexValue="0000000000000000")).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hmNetPTP2DelayAsymmetry.setStatus('current')
hmNetPTP2PortCapability = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 14, 2, 3, 41, 2, 1, 14), Bits().clone(namedValues=NamedValues(("reserved", 0), ("one-step", 1), ("e2e-delay", 2), ("p2p-delay", 3), ("ptp2Ieee8023", 4), ("ptp2UdpIpv4", 5), ("ptp2UdpIpv6", 6), ("asymmCorrection", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hmNetPTP2PortCapability.setStatus('current')
hmNetPTP2VlanID = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 14, 2, 3, 41, 2, 1, 15), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 4042)).clone(-1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hmNetPTP2VlanID.setStatus('current')
hmNetPTP2VlanPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 14, 2, 3, 41, 2, 1, 16), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7)).clone(4)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hmNetPTP2VlanPriority.setStatus('current')
hmNetPTP2TCGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 248, 14, 2, 3, 42))
hmNetPTP2TCConfiguration = MibIdentifier((1, 3, 6, 1, 4, 1, 248, 14, 2, 3, 42, 1))
hmNetPTP2TCClockIdentity = MibScalar((1, 3, 6, 1, 4, 1, 248, 14, 2, 3, 42, 1, 1), PTPClockIdentity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hmNetPTP2TCClockIdentity.setStatus('current')
hmNetPTP2TCDelayMechanism = MibScalar((1, 3, 6, 1, 4, 1, 248, 14, 2, 3, 42, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 254))).clone(namedValues=NamedValues(("e2e", 1), ("p2p", 2), ("e2e-optimized", 3), ("disabled", 254))).clone('e2e')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hmNetPTP2TCDelayMechanism.setStatus('current')
hmNetPTP2TCPrimaryDomain = MibScalar((1, 3, 6, 1, 4, 1, 248, 14, 2, 3, 42, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hmNetPTP2TCPrimaryDomain.setStatus('current')
hmNetPTP2TCSyntonized = MibScalar((1, 3, 6, 1, 4, 1, 248, 14, 2, 3, 42, 1, 4), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hmNetPTP2TCSyntonized.setStatus('current')
hmNetPTP2TCNetworkProtocol = MibScalar((1, 3, 6, 1, 4, 1, 248, 14, 2, 3, 42, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 3))).clone(namedValues=NamedValues(("udpIpv4", 1), ("ieee8023", 3))).clone('udpIpv4')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hmNetPTP2TCNetworkProtocol.setStatus('current')
hmNetPTP2TCCurrentMaster = MibScalar((1, 3, 6, 1, 4, 1, 248, 14, 2, 3, 42, 1, 6), PTPPortIdentity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hmNetPTP2TCCurrentMaster.setStatus('current')
hmNetPTP2TCManagement = MibScalar((1, 3, 6, 1, 4, 1, 248, 14, 2, 3, 42, 1, 7), TruthValue().clone('true')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hmNetPTP2TCManagement.setStatus('current')
hmNetPTP2TCMultiDomainMode = MibScalar((1, 3, 6, 1, 4, 1, 248, 14, 2, 3, 42, 1, 8), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hmNetPTP2TCMultiDomainMode.setStatus('current')
hmNetPTP2TCSyncLocalClock = MibScalar((1, 3, 6, 1, 4, 1, 248, 14, 2, 3, 42, 1, 9), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hmNetPTP2TCSyncLocalClock.setStatus('current')
hmNetPTP2TCVlanID = MibScalar((1, 3, 6, 1, 4, 1, 248, 14, 2, 3, 42, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 4042)).clone(-1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hmNetPTP2TCVlanID.setStatus('current')
hmNetPTP2TCVlanPriority = MibScalar((1, 3, 6, 1, 4, 1, 248, 14, 2, 3, 42, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7)).clone(4)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hmNetPTP2TCVlanPriority.setStatus('current')
hmNetPTP2TCPortTable = MibTable((1, 3, 6, 1, 4, 1, 248, 14, 2, 3, 42, 2), )
if mibBuilder.loadTexts: hmNetPTP2TCPortTable.setStatus('current')
hmNetPTP2TCPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 248, 14, 2, 3, 42, 2, 1), ).setIndexNames((0, "HMPRIV-MGMT-SNMP-MIB", "hmNetPTPPortID"))
if mibBuilder.loadTexts: hmNetPTP2TCPortEntry.setStatus('current')
hmNetPTP2TCPortEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 14, 2, 3, 42, 2, 1, 1), TruthValue().clone('true')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hmNetPTP2TCPortEnable.setStatus('current')
hmNetPTP2TCLogPdelayReqInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 14, 2, 3, 42, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("sec-1", 0), ("sec-2", 1), ("sec-4", 2), ("sec-8", 3), ("sec-16", 4), ("sec-32", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hmNetPTP2TCLogPdelayReqInterval.setStatus('current')
hmNetPTP2TCFaulty = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 14, 2, 3, 42, 2, 1, 3), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hmNetPTP2TCFaulty.setStatus('current')
hmNetPTP2TCPeerMeanPathDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 14, 2, 3, 42, 2, 1, 4), PTPTimeInterval()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hmNetPTP2TCPeerMeanPathDelay.setStatus('current')
hmNetPTP2TCDelayAsymmetry = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 14, 2, 3, 42, 2, 1, 5), PTPTimeInterval().clone(hexValue="0000000000000000")).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hmNetPTP2TCDelayAsymmetry.setStatus('current')
hmNetSNMPGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 248, 14, 2, 3, 50))
hmNetSNMPv1Status = MibScalar((1, 3, 6, 1, 4, 1, 248, 14, 2, 3, 50, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('enable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hmNetSNMPv1Status.setStatus('current')
hmNetSNMPv2Status = MibScalar((1, 3, 6, 1, 4, 1, 248, 14, 2, 3, 50, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('enable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hmNetSNMPv2Status.setStatus('current')
hmNetSNMPv3Status = MibScalar((1, 3, 6, 1, 4, 1, 248, 14, 2, 3, 50, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('enable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hmNetSNMPv3Status.setStatus('current')
hmNetSNMPAccessStatus = MibScalar((1, 3, 6, 1, 4, 1, 248, 14, 2, 3, 50, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2), ("readOnly", 3))).clone('enable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hmNetSNMPAccessStatus.setStatus('current')
hmNetSNMPSynchronizeV1V3Status = MibScalar((1, 3, 6, 1, 4, 1, 248, 14, 2, 3, 50, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('enable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hmNetSNMPSynchronizeV1V3Status.setStatus('current')
hmNetSNMPPortNumber = MibScalar((1, 3, 6, 1, 4, 1, 248, 14, 2, 3, 50, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535)).clone(161)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hmNetSNMPPortNumber.setStatus('current')
hmNetSNMPRadiusAuthenticate = MibScalar((1, 3, 6, 1, 4, 1, 248, 14, 2, 3, 50, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hmNetSNMPRadiusAuthenticate.setStatus('current')
hmNetSNMPv3EncryptionReadWriteStatus = MibScalar((1, 3, 6, 1, 4, 1, 248, 14, 2, 3, 50, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hmNetSNMPv3EncryptionReadWriteStatus.setStatus('current')
hmNetSNMPv3EncryptionReadOnlyStatus = MibScalar((1, 3, 6, 1, 4, 1, 248, 14, 2, 3, 50, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hmNetSNMPv3EncryptionReadOnlyStatus.setStatus('current')
hmNetGPSGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 248, 14, 2, 3, 60))
hmNetGPSIsAvailable = MibScalar((1, 3, 6, 1, 4, 1, 248, 14, 2, 3, 60, 1), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hmNetGPSIsAvailable.setStatus('current')
hmNetGPSIsSynchronized = MibScalar((1, 3, 6, 1, 4, 1, 248, 14, 2, 3, 60, 2), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hmNetGPSIsSynchronized.setStatus('current')
hmNetGPSMode = MibScalar((1, 3, 6, 1, 4, 1, 248, 14, 2, 3, 60, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("gpsIn", 1), ("gpsOut", 2))).clone('gpsIn')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hmNetGPSMode.setStatus('current')
hmNetGPSTimeStringFormat = MibScalar((1, 3, 6, 1, 4, 1, 248, 14, 2, 3, 60, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("meinberg", 1))).clone('meinberg')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hmNetGPSTimeStringFormat.setStatus('current')
hmRestrictedMgtAccessGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 248, 14, 2, 3, 70))
hmRMAOperation = MibScalar((1, 3, 6, 1, 4, 1, 248, 14, 2, 3, 70, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hmRMAOperation.setStatus('current')
hmRMATable = MibTable((1, 3, 6, 1, 4, 1, 248, 14, 2, 3, 70, 2), )
if mibBuilder.loadTexts: hmRMATable.setStatus('current')
hmRMAEntry = MibTableRow((1, 3, 6, 1, 4, 1, 248, 14, 2, 3, 70, 2, 1), ).setIndexNames((0, "HMPRIV-MGMT-SNMP-MIB", "hmRMAIndex"))
if mibBuilder.loadTexts: hmRMAEntry.setStatus('current')
hmRMAIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 14, 2, 3, 70, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hmRMAIndex.setStatus('current')
hmRMARowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 14, 2, 3, 70, 2, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hmRMARowStatus.setStatus('current')
hmRMAIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 14, 2, 3, 70, 2, 1, 3), IpAddress().clone(hexValue="00000000")).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hmRMAIpAddr.setStatus('current')
hmRMANetMask = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 14, 2, 3, 70, 2, 1, 4), IpAddress().clone(hexValue="00000000")).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hmRMANetMask.setStatus('current')
hmRMASrvHttp = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 14, 2, 3, 70, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('enabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hmRMASrvHttp.setStatus('current')
hmRMASrvSnmp = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 14, 2, 3, 70, 2, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('enabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hmRMASrvSnmp.setStatus('current')
hmRMASrvTelnet = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 14, 2, 3, 70, 2, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('enabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hmRMASrvTelnet.setStatus('current')
hmRMASrvSsh = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 14, 2, 3, 70, 2, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('enabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hmRMASrvSsh.setStatus('current')
hmFSTable = MibIdentifier((1, 3, 6, 1, 4, 1, 248, 14, 2, 4))
hmFSUpdFileName = MibScalar((1, 3, 6, 1, 4, 1, 248, 14, 2, 4, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 70))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hmFSUpdFileName.setStatus('current')
hmFSConfFileName = MibScalar((1, 3, 6, 1, 4, 1, 248, 14, 2, 4, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 70))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hmFSConfFileName.setStatus('current')
hmFSLogFileName = MibScalar((1, 3, 6, 1, 4, 1, 248, 14, 2, 4, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 70))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hmFSLogFileName.setStatus('current')
hmFSUserName = MibScalar((1, 3, 6, 1, 4, 1, 248, 14, 2, 4, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 10))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hmFSUserName.setStatus('current')
hmFSTPPassword = MibScalar((1, 3, 6, 1, 4, 1, 248, 14, 2, 4, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 10))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hmFSTPPassword.setStatus('current')
hmFSAction = MibScalar((1, 3, 6, 1, 4, 1, 248, 14, 2, 4, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 12, 13, 15, 16, 20, 21))).clone(namedValues=NamedValues(("other", 1), ("update", 2), ("config-load", 3), ("config-save", 4), ("config-load-remote", 5), ("config-save-remote", 6), ("log-save", 7), ("config-load-default", 8), ("set-to-factory", 9), ("log-clear", 10), ("gbl-update", 12), ("config-load-backup", 13), ("config-remote-and-save", 15), ("updateBootcode", 16), ("toggleImage", 20), ("config-save-remote-script", 21))).clone('other')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hmFSAction.setStatus('current')
hmFSActionResult = MibScalar((1, 3, 6, 1, 4, 1, 248, 14, 2, 4, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("other", 1), ("pending", 2), ("ok", 3), ("failed", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hmFSActionResult.setStatus('current')
hmFSBootConfiguration = MibScalar((1, 3, 6, 1, 4, 1, 248, 14, 2, 4, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("default", 1), ("local", 2))).clone('local')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hmFSBootConfiguration.setStatus('current')
hmFSRunningConfiguration = MibScalar((1, 3, 6, 1, 4, 1, 248, 14, 2, 4, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("boot", 1), ("local", 2), ("remote", 3))).clone('boot')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hmFSRunningConfiguration.setStatus('current')
hmFSLastMessage = MibScalar((1, 3, 6, 1, 4, 1, 248, 14, 2, 4, 11), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hmFSLastMessage.setStatus('current')
hmConfigurationStatus = MibScalar((1, 3, 6, 1, 4, 1, 248, 14, 2, 4, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("ok", 1), ("notInSync", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hmConfigurationStatus.setStatus('current')
hmFSFileTable = MibTable((1, 3, 6, 1, 4, 1, 248, 14, 2, 4, 100), )
if mibBuilder.loadTexts: hmFSFileTable.setStatus('current')
hmFSFileEntry = MibTableRow((1, 3, 6, 1, 4, 1, 248, 14, 2, 4, 100, 1), ).setIndexNames((0, "HMPRIV-MGMT-SNMP-MIB", "hmFSFileID"))
if mibBuilder.loadTexts: hmFSFileEntry.setStatus('current')
hmFSFileID = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 14, 2, 4, 100, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hmFSFileID.setStatus('current')
hmFSFileName = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 14, 2, 4, 100, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hmFSFileName.setStatus('current')
hmFSFileSize = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 14, 2, 4, 100, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hmFSFileSize.setStatus('current')
hmFSFileDate = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 14, 2, 4, 100, 1, 4), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hmFSFileDate.setStatus('current')
hmAutoconfigGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 248, 14, 2, 4, 200))
hmAutoconfigAdapterStatus = MibScalar((1, 3, 6, 1, 4, 1, 248, 14, 2, 4, 200, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9))).clone(namedValues=NamedValues(("notPresent", 1), ("removed", 2), ("ok", 3), ("notInSync", 4), ("outOfMemory", 5), ("wrongMachine", 6), ("checksumErr", 7), ("genericErr", 8), ("autodisabled", 9)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hmAutoconfigAdapterStatus.setStatus('current')
hmAutoconfigAdapterSerialNum = MibScalar((1, 3, 6, 1, 4, 1, 248, 14, 2, 4, 200, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hmAutoconfigAdapterSerialNum.setStatus('current')
hmConfigWatchdogGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 248, 14, 2, 4, 201))
hmConfigWatchdogAdminStatus = MibScalar((1, 3, 6, 1, 4, 1, 248, 14, 2, 4, 201, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hmConfigWatchdogAdminStatus.setStatus('current')
hmConfigWatchdogOperStatus = MibScalar((1, 3, 6, 1, 4, 1, 248, 14, 2, 4, 201, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hmConfigWatchdogOperStatus.setStatus('current')
hmConfigWatchdogTimeInterval = MibScalar((1, 3, 6, 1, 4, 1, 248, 14, 2, 4, 201, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(10, 600)).clone(600)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hmConfigWatchdogTimeInterval.setStatus('current')
hmConfigWatchdogTimerValue = MibScalar((1, 3, 6, 1, 4, 1, 248, 14, 2, 4, 201, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hmConfigWatchdogTimerValue.setStatus('current')
hmConfigWatchdogIPAddress = MibScalar((1, 3, 6, 1, 4, 1, 248, 14, 2, 4, 201, 5), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hmConfigWatchdogIPAddress.setStatus('current')
hmTempTable = MibIdentifier((1, 3, 6, 1, 4, 1, 248, 14, 2, 5))
hmTemperature = MibScalar((1, 3, 6, 1, 4, 1, 248, 14, 2, 5, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hmTemperature.setStatus('current')
hmTempUprLimit = MibScalar((1, 3, 6, 1, 4, 1, 248, 14, 2, 5, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-99, 99)).clone(70)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hmTempUprLimit.setStatus('current')
hmTempLwrLimit = MibScalar((1, 3, 6, 1, 4, 1, 248, 14, 2, 5, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-99, 99))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hmTempLwrLimit.setStatus('current')
hmNeighbourAgentTable = MibTable((1, 3, 6, 1, 4, 1, 248, 14, 2, 6), )
if mibBuilder.loadTexts: hmNeighbourAgentTable.setStatus('current')
hmNeighbourAgentEntry = MibTableRow((1, 3, 6, 1, 4, 1, 248, 14, 2, 6, 1), ).setIndexNames((0, "HMPRIV-MGMT-SNMP-MIB", "hmNeighbourSlot"))
if mibBuilder.loadTexts: hmNeighbourAgentEntry.setStatus('current')
hmNeighbourSlot = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 14, 2, 6, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 7))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hmNeighbourSlot.setStatus('current')
hmNeighbourIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 14, 2, 6, 1, 2), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hmNeighbourIpAddress.setStatus('current')
hmAuthGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 248, 14, 2, 7))
hmAuthHostTableEntriesMax = MibScalar((1, 3, 6, 1, 4, 1, 248, 14, 2, 7, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 8))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hmAuthHostTableEntriesMax.setStatus('current')
hmAuthCommTableEntriesMax = MibScalar((1, 3, 6, 1, 4, 1, 248, 14, 2, 7, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 8))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hmAuthCommTableEntriesMax.setStatus('current')
hmAuthCommTable = MibTable((1, 3, 6, 1, 4, 1, 248, 14, 2, 7, 3), )
if mibBuilder.loadTexts: hmAuthCommTable.setStatus('current')
hmAuthCommEntry = MibTableRow((1, 3, 6, 1, 4, 1, 248, 14, 2, 7, 3, 1), ).setIndexNames((0, "HMPRIV-MGMT-SNMP-MIB", "hmAuthCommIndex"))
if mibBuilder.loadTexts: hmAuthCommEntry.setStatus('current')
hmAuthCommIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 14, 2, 7, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 8))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hmAuthCommIndex.setStatus('current')
hmAuthCommName = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 14, 2, 7, 3, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hmAuthCommName.setStatus('current')
hmAuthCommPerm = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 14, 2, 7, 3, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("perm-ro", 1), ("perm-rw", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hmAuthCommPerm.setStatus('current')
hmAuthCommState = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 14, 2, 7, 3, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2), ("delete", 3), ("invalid", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hmAuthCommState.setStatus('current')
hmAuthHostTable = MibTable((1, 3, 6, 1, 4, 1, 248, 14, 2, 7, 4), )
if mibBuilder.loadTexts: hmAuthHostTable.setStatus('current')
hmAuthHostEntry = MibTableRow((1, 3, 6, 1, 4, 1, 248, 14, 2, 7, 4, 1), ).setIndexNames((0, "HMPRIV-MGMT-SNMP-MIB", "hmAuthHostIndex"))
if mibBuilder.loadTexts: hmAuthHostEntry.setStatus('current')
hmAuthHostIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 14, 2, 7, 4, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 8))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hmAuthHostIndex.setStatus('current')
hmAuthHostName = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 14, 2, 7, 4, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hmAuthHostName.setStatus('current')
hmAuthHostCommIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 14, 2, 7, 4, 1, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hmAuthHostCommIndex.setStatus('current')
hmAuthHostIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 14, 2, 7, 4, 1, 4), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hmAuthHostIpAddress.setStatus('current')
hmAuthHostIpMask = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 14, 2, 7, 4, 1, 5), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hmAuthHostIpMask.setStatus('current')
hmAuthHostState = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 14, 2, 7, 4, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2), ("delete", 3), ("invalid", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hmAuthHostState.setStatus('current')
hmTrapGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 248, 14, 2, 8))
hmTrapCommTableEntriesMax = MibScalar((1, 3, 6, 1, 4, 1, 248, 14, 2, 8, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 8))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hmTrapCommTableEntriesMax.setStatus('current')
hmTrapDestTableEntriesMax = MibScalar((1, 3, 6, 1, 4, 1, 248, 14, 2, 8, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 8))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hmTrapDestTableEntriesMax.setStatus('current')
hmTrapCommTable = MibTable((1, 3, 6, 1, 4, 1, 248, 14, 2, 8, 3), )
if mibBuilder.loadTexts: hmTrapCommTable.setStatus('current')
hmTrapCommEntry = MibTableRow((1, 3, 6, 1, 4, 1, 248, 14, 2, 8, 3, 1), ).setIndexNames((0, "HMPRIV-MGMT-SNMP-MIB", "hmTrapCommIndex"))
if mibBuilder.loadTexts: hmTrapCommEntry.setStatus('current')
hmTrapCommIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 14, 2, 8, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 8))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hmTrapCommIndex.setStatus('current')
hmTrapCommCommIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 14, 2, 8, 3, 1, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hmTrapCommCommIndex.setStatus('current')
hmTrapCommColdStart = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 14, 2, 8, 3, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hmTrapCommColdStart.setStatus('current')
hmTrapCommLinkDown = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 14, 2, 8, 3, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hmTrapCommLinkDown.setStatus('current')
hmTrapCommLinkUp = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 14, 2, 8, 3, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hmTrapCommLinkUp.setStatus('current')
hmTrapCommAuthentication = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 14, 2, 8, 3, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hmTrapCommAuthentication.setStatus('current')
hmTrapCommBridge = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 14, 2, 8, 3, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hmTrapCommBridge.setStatus('current')
hmTrapCommRMON = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 14, 2, 8, 3, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hmTrapCommRMON.setStatus('current')
hmTrapCommUsergroup = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 14, 2, 8, 3, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hmTrapCommUsergroup.setStatus('current')
hmTrapCommDualHoming = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 14, 2, 8, 3, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hmTrapCommDualHoming.setStatus('current')
hmTrapCommChassis = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 14, 2, 8, 3, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hmTrapCommChassis.setStatus('current')
hmTrapCommState = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 14, 2, 8, 3, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2), ("delete", 3), ("invalid", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hmTrapCommState.setStatus('current')
hmTrapDestTable = MibTable((1, 3, 6, 1, 4, 1, 248, 14, 2, 8, 4), )
if mibBuilder.loadTexts: hmTrapDestTable.setStatus('current')
hmTrapDestEntry = MibTableRow((1, 3, 6, 1, 4, 1, 248, 14, 2, 8, 4, 1), ).setIndexNames((0, "HMPRIV-MGMT-SNMP-MIB", "hmTrapDestIndex"))
if mibBuilder.loadTexts: hmTrapDestEntry.setStatus('current')
hmTrapDestIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 14, 2, 8, 4, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 8))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hmTrapDestIndex.setStatus('current')
hmTrapDestName = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 14, 2, 8, 4, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hmTrapDestName.setStatus('current')
hmTrapDestCommIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 14, 2, 8, 4, 1, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hmTrapDestCommIndex.setStatus('current')
hmTrapDestIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 14, 2, 8, 4, 1, 4), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hmTrapDestIpAddress.setStatus('current')
hmTrapDestIpMask = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 14, 2, 8, 4, 1, 5), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hmTrapDestIpMask.setStatus('obsolete')
hmTrapDestState = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 14, 2, 8, 4, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2), ("delete", 3), ("invalid", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hmTrapDestState.setStatus('current')
hmLastAccessGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 248, 14, 2, 9))
hmLastIpAddr = MibScalar((1, 3, 6, 1, 4, 1, 248, 14, 2, 9, 1), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hmLastIpAddr.setStatus('current')
hmLastPort = MibScalar((1, 3, 6, 1, 4, 1, 248, 14, 2, 9, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hmLastPort.setStatus('current')
hmLastCommunity = MibScalar((1, 3, 6, 1, 4, 1, 248, 14, 2, 9, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hmLastCommunity.setStatus('current')
hmLastLoginUserName = MibScalar((1, 3, 6, 1, 4, 1, 248, 14, 2, 9, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hmLastLoginUserName.setStatus('current')
hmMulticast = MibIdentifier((1, 3, 6, 1, 4, 1, 248, 14, 2, 10))
hmIGMPGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 248, 14, 2, 10, 1))
hmIGMPSnoop = MibIdentifier((1, 3, 6, 1, 4, 1, 248, 14, 2, 10, 1, 2))
hmIGMPSnoopStatus = MibScalar((1, 3, 6, 1, 4, 1, 248, 14, 2, 10, 1, 2, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hmIGMPSnoopStatus.setStatus('current')
hmIGMPSnoopAgingTime = MibScalar((1, 3, 6, 1, 4, 1, 248, 14, 2, 10, 1, 2, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(3, 3600)).clone(260)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hmIGMPSnoopAgingTime.setStatus('current')
hmIGMPSnoopUnknownMode = MibScalar((1, 3, 6, 1, 4, 1, 248, 14, 2, 10, 1, 2, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("discard", 1), ("flood", 2), ("query-ports", 3))).clone('flood')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hmIGMPSnoopUnknownMode.setStatus('current')
hmIGMPSnoopUnknownAgingTime = MibScalar((1, 3, 6, 1, 4, 1, 248, 14, 2, 10, 1, 2, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(3, 3600)).clone(260)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hmIGMPSnoopUnknownAgingTime.setStatus('current')
hmIGMPSnoopUnknownLookupInterval = MibScalar((1, 3, 6, 1, 4, 1, 248, 14, 2, 10, 1, 2, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(2, 3599)).clone(125)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hmIGMPSnoopUnknownLookupInterval.setStatus('current')
hmIGMPSnoopUnknownLookupResponseTime = MibScalar((1, 3, 6, 1, 4, 1, 248, 14, 2, 10, 1, 2, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 3598)).clone(10)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hmIGMPSnoopUnknownLookupResponseTime.setStatus('current')
hmIGMPSnoopQuerierToPortmask = MibScalar((1, 3, 6, 1, 4, 1, 248, 14, 2, 10, 1, 2, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hmIGMPSnoopQuerierToPortmask.setStatus('current')
hmIGMPSnoopQuerierIPAddress = MibScalar((1, 3, 6, 1, 4, 1, 248, 14, 2, 10, 1, 2, 8), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hmIGMPSnoopQuerierIPAddress.setStatus('current')
hmIGMPSnoopQueryTable = MibTable((1, 3, 6, 1, 4, 1, 248, 14, 2, 10, 1, 2, 10), )
if mibBuilder.loadTexts: hmIGMPSnoopQueryTable.setStatus('current')
hmIGMPSnoopQueryEntry = MibTableRow((1, 3, 6, 1, 4, 1, 248, 14, 2, 10, 1, 2, 10, 1), ).setIndexNames((0, "HMPRIV-MGMT-SNMP-MIB", "hmIGMPSnoopQueryVlanIndex"))
if mibBuilder.loadTexts: hmIGMPSnoopQueryEntry.setStatus('current')
hmIGMPSnoopQueryVlanIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 14, 2, 10, 1, 2, 10, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4095)))
if mibBuilder.loadTexts: hmIGMPSnoopQueryVlanIndex.setStatus('current')
hmIGMPSnoopQueryPorts = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 14, 2, 10, 1, 2, 10, 1, 2), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hmIGMPSnoopQueryPorts.setStatus('current')
hmIGMPSnoopFilterTable = MibTable((1, 3, 6, 1, 4, 1, 248, 14, 2, 10, 1, 2, 11), )
if mibBuilder.loadTexts: hmIGMPSnoopFilterTable.setStatus('current')
hmIGMPSnoopFilterEntry = MibTableRow((1, 3, 6, 1, 4, 1, 248, 14, 2, 10, 1, 2, 11, 1), ).setIndexNames((0, "HMPRIV-MGMT-SNMP-MIB", "hmIGMPSnoopFilterVlanIndex"), (0, "HMPRIV-MGMT-SNMP-MIB", "hmIGMPSnoopFilterAddress"))
if mibBuilder.loadTexts: hmIGMPSnoopFilterEntry.setStatus('current')
hmIGMPSnoopFilterVlanIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 14, 2, 10, 1, 2, 11, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4095)))
if mibBuilder.loadTexts: hmIGMPSnoopFilterVlanIndex.setStatus('current')
hmIGMPSnoopFilterAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 14, 2, 10, 1, 2, 11, 1, 2), MacAddress())
if mibBuilder.loadTexts: hmIGMPSnoopFilterAddress.setStatus('current')
hmIGMPSnoopFilterLearntPorts = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 14, 2, 10, 1, 2, 11, 1, 3), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hmIGMPSnoopFilterLearntPorts.setStatus('current')
hmIGMPSnoopForwardAllTable = MibTable((1, 3, 6, 1, 4, 1, 248, 14, 2, 10, 1, 2, 12), )
if mibBuilder.loadTexts: hmIGMPSnoopForwardAllTable.setStatus('current')
hmIGMPSnoopForwardAllEntry = MibTableRow((1, 3, 6, 1, 4, 1, 248, 14, 2, 10, 1, 2, 12, 1), ).setIndexNames((0, "HMPRIV-MGMT-SNMP-MIB", "hmIGMPSnoopForwardAllVlanIndex"))
if mibBuilder.loadTexts: hmIGMPSnoopForwardAllEntry.setStatus('current')
hmIGMPSnoopForwardAllVlanIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 14, 2, 10, 1, 2, 12, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4095)))
if mibBuilder.loadTexts: hmIGMPSnoopForwardAllVlanIndex.setStatus('current')
hmIGMPSnoopForwardAllStaticPorts = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 14, 2, 10, 1, 2, 12, 1, 2), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hmIGMPSnoopForwardAllStaticPorts.setStatus('current')
hmIGMPSnoopQueryStaticTable = MibTable((1, 3, 6, 1, 4, 1, 248, 14, 2, 10, 1, 2, 13), )
if mibBuilder.loadTexts: hmIGMPSnoopQueryStaticTable.setStatus('current')
hmIGMPSnoopQueryStaticEntry = MibTableRow((1, 3, 6, 1, 4, 1, 248, 14, 2, 10, 1, 2, 13, 1), ).setIndexNames((0, "HMPRIV-MGMT-SNMP-MIB", "hmIGMPSnoopQueryStaticVlanIndex"))
if mibBuilder.loadTexts: hmIGMPSnoopQueryStaticEntry.setStatus('current')
hmIGMPSnoopQueryStaticVlanIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 14, 2, 10, 1, 2, 13, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4095)))
if mibBuilder.loadTexts: hmIGMPSnoopQueryStaticVlanIndex.setStatus('current')
hmIGMPSnoopQueryStaticPorts = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 14, 2, 10, 1, 2, 13, 1, 2), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hmIGMPSnoopQueryStaticPorts.setStatus('current')
hmIGMPSnoopQueryStaticAutomaticPorts = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 14, 2, 10, 1, 2, 13, 1, 3), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hmIGMPSnoopQueryStaticAutomaticPorts.setStatus('current')
hmIGMPSnoopQueryStaticAutomaticPortsEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 14, 2, 10, 1, 2, 13, 1, 4), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hmIGMPSnoopQueryStaticAutomaticPortsEnable.setStatus('current')
hmIGMPQuerierGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 248, 14, 2, 10, 1, 2, 100))
hmIGMPQuerierStatus = MibScalar((1, 3, 6, 1, 4, 1, 248, 14, 2, 10, 1, 2, 100, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hmIGMPQuerierStatus.setStatus('current')
hmIGMPQuerierMode = MibScalar((1, 3, 6, 1, 4, 1, 248, 14, 2, 10, 1, 2, 100, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("querier", 1), ("non-querier", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hmIGMPQuerierMode.setStatus('current')
hmIGMPQuerierTransmitInterval = MibScalar((1, 3, 6, 1, 4, 1, 248, 14, 2, 10, 1, 2, 100, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(2, 3599)).clone(125)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hmIGMPQuerierTransmitInterval.setStatus('current')
hmIGMPQuerierMaxResponseTime = MibScalar((1, 3, 6, 1, 4, 1, 248, 14, 2, 10, 1, 2, 100, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 3598)).clone(10)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hmIGMPQuerierMaxResponseTime.setStatus('current')
hmIGMPQuerierProtocolVersion = MibScalar((1, 3, 6, 1, 4, 1, 248, 14, 2, 10, 1, 2, 100, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 3)).clone(2)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hmIGMPQuerierProtocolVersion.setStatus('current')
hmGMRPGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 248, 14, 2, 10, 2))
hmGMRP = MibIdentifier((1, 3, 6, 1, 4, 1, 248, 14, 2, 10, 2, 1))
hmGmrpUnknownMode = MibScalar((1, 3, 6, 1, 4, 1, 248, 14, 2, 10, 2, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("discard", 1), ("flood", 2))).clone('flood')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hmGmrpUnknownMode.setStatus('current')
hmRelayGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 248, 14, 2, 11))
hmRelayOption82Status = MibScalar((1, 3, 6, 1, 4, 1, 248, 14, 2, 11, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hmRelayOption82Status.setStatus('current')
hmRelayOptionRemoteIDType = MibScalar((1, 3, 6, 1, 4, 1, 248, 14, 2, 11, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("ip", 1), ("mac", 2), ("client-id", 3), ("other", 4))).clone('mac')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hmRelayOptionRemoteIDType.setStatus('current')
hmRelayOptionRemoteID = MibScalar((1, 3, 6, 1, 4, 1, 248, 14, 2, 11, 3), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hmRelayOptionRemoteID.setStatus('current')
hmRelayOptionRemoteIDValue = MibScalar((1, 3, 6, 1, 4, 1, 248, 14, 2, 11, 4), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hmRelayOptionRemoteIDValue.setStatus('current')
hmRelayServerGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 248, 14, 2, 11, 10))
hmRelayDHCPServerIpAddr = MibScalar((1, 3, 6, 1, 4, 1, 248, 14, 2, 11, 10, 1), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hmRelayDHCPServerIpAddr.setStatus('current')
hmRelayDHCPServer2IpAddr = MibScalar((1, 3, 6, 1, 4, 1, 248, 14, 2, 11, 10, 2), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hmRelayDHCPServer2IpAddr.setStatus('current')
hmRelayDHCPServer3IpAddr = MibScalar((1, 3, 6, 1, 4, 1, 248, 14, 2, 11, 10, 3), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hmRelayDHCPServer3IpAddr.setStatus('current')
hmRelayDHCPServer4IpAddr = MibScalar((1, 3, 6, 1, 4, 1, 248, 14, 2, 11, 10, 4), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hmRelayDHCPServer4IpAddr.setStatus('current')
hmRelayInterfaceTable = MibTable((1, 3, 6, 1, 4, 1, 248, 14, 2, 11, 11), )
if mibBuilder.loadTexts: hmRelayInterfaceTable.setStatus('current')
hmRelayInterfaceEntry = MibTableRow((1, 3, 6, 1, 4, 1, 248, 14, 2, 11, 11, 1), ).setIndexNames((0, "HMPRIV-MGMT-SNMP-MIB", "hmRelayIfaceGroupID"), (0, "HMPRIV-MGMT-SNMP-MIB", "hmRelayIfaceID"))
if mibBuilder.loadTexts: hmRelayInterfaceEntry.setStatus('current')
hmRelayIfaceGroupID = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 14, 2, 11, 11, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 5))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hmRelayIfaceGroupID.setStatus('current')
hmRelayIfaceID = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 14, 2, 11, 11, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 128))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hmRelayIfaceID.setStatus('current')
hmRelayIfaceOption82Enable = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 14, 2, 11, 11, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('enable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hmRelayIfaceOption82Enable.setStatus('current')
hmRelayIfaceBCRequestFwd = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 14, 2, 11, 11, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("forward", 1), ("discard", 2))).clone('forward')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hmRelayIfaceBCRequestFwd.setStatus('current')
hmRelayIfaceCircuitID = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 14, 2, 11, 11, 1, 5), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hmRelayIfaceCircuitID.setStatus('current')
hmRelayBCPktInCnt = MibScalar((1, 3, 6, 1, 4, 1, 248, 14, 2, 11, 20), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hmRelayBCPktInCnt.setStatus('current')
hmRelayMCPktInCnt = MibScalar((1, 3, 6, 1, 4, 1, 248, 14, 2, 11, 21), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hmRelayMCPktInCnt.setStatus('current')
hmRelayPktServerRelayCnt = MibScalar((1, 3, 6, 1, 4, 1, 248, 14, 2, 11, 22), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hmRelayPktServerRelayCnt.setStatus('current')
hmRelayPktClientRelayCnt = MibScalar((1, 3, 6, 1, 4, 1, 248, 14, 2, 11, 23), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hmRelayPktClientRelayCnt.setStatus('current')
hmRelayErrCnt = MibScalar((1, 3, 6, 1, 4, 1, 248, 14, 2, 11, 24), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hmRelayErrCnt.setStatus('current')
hmRelayLastDuplicateIP = MibScalar((1, 3, 6, 1, 4, 1, 248, 14, 2, 11, 25), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hmRelayLastDuplicateIP.setStatus('current')
hmDeviceMonitoringGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 248, 14, 2, 12))
hmSigConConfigTable = MibTable((1, 3, 6, 1, 4, 1, 248, 14, 2, 12, 1), )
if mibBuilder.loadTexts: hmSigConConfigTable.setStatus('current')
hmSigConConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 248, 14, 2, 12, 1, 1), ).setIndexNames((0, "HMPRIV-MGMT-SNMP-MIB", "hmSigConID"))
if mibBuilder.loadTexts: hmSigConConfigEntry.setStatus('current')
hmSigConID = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 14, 2, 12, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hmSigConID.setStatus('current')
hmSigConTrapEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 14, 2, 12, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hmSigConTrapEnable.setStatus('current')
hmSigConTrapCause = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 14, 2, 12, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10))).clone(namedValues=NamedValues(("other", 1), ("linkFailure", 2), ("controlLine", 3), ("redNotGuaranteed", 4), ("psState", 5), ("temperature", 6), ("moduleRemoval", 7), ("acaRemoval", 8), ("fanFailure", 9), ("acaNotInSync", 10)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hmSigConTrapCause.setStatus('current')
hmSigConTrapCauseIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 14, 2, 12, 1, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hmSigConTrapCauseIndex.setStatus('current')
hmSigConMode = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 14, 2, 12, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("manual", 1), ("monitor", 2), ("devicestate", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hmSigConMode.setStatus('current')
hmSigConManualActivate = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 14, 2, 12, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("close", 1), ("open", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hmSigConManualActivate.setStatus('current')
hmSigConOperState = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 14, 2, 12, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("open", 1), ("close", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hmSigConOperState.setStatus('current')
hmSigConSenseLinkFailure = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 14, 2, 12, 1, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hmSigConSenseLinkFailure.setStatus('current')
hmSigConSenseControlLine = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 14, 2, 12, 1, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hmSigConSenseControlLine.setStatus('current')
hmSigConSenseRedNotGuaranteed = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 14, 2, 12, 1, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hmSigConSenseRedNotGuaranteed.setStatus('current')
hmSigConSensePS1State = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 14, 2, 12, 1, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hmSigConSensePS1State.setStatus('current')
hmSigConSensePS2State = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 14, 2, 12, 1, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hmSigConSensePS2State.setStatus('current')
hmSigConSenseTemperature = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 14, 2, 12, 1, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hmSigConSenseTemperature.setStatus('current')
hmSigConSenseModuleRemoval = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 14, 2, 12, 1, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hmSigConSenseModuleRemoval.setStatus('current')
hmSigConSenseACARemoval = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 14, 2, 12, 1, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hmSigConSenseACARemoval.setStatus('current')
hmSigConSensePS3State = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 14, 2, 12, 1, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hmSigConSensePS3State.setStatus('current')
hmSigConSensePS4State = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 14, 2, 12, 1, 1, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hmSigConSensePS4State.setStatus('current')
hmSigConSenseFan1State = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 14, 2, 12, 1, 1, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hmSigConSenseFan1State.setStatus('current')
hmSigConSensePS5State = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 14, 2, 12, 1, 1, 19), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hmSigConSensePS5State.setStatus('current')
hmSigConSensePS6State = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 14, 2, 12, 1, 1, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hmSigConSensePS6State.setStatus('current')
hmSigConSensePS7State = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 14, 2, 12, 1, 1, 21), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hmSigConSensePS7State.setStatus('current')
hmSigConSensePS8State = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 14, 2, 12, 1, 1, 22), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hmSigConSensePS8State.setStatus('current')
hmSigConSenseACANotInSync = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 14, 2, 12, 1, 1, 23), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hmSigConSenseACANotInSync.setStatus('current')
hmSigConLinkTable = MibTable((1, 3, 6, 1, 4, 1, 248, 14, 2, 12, 2), )
if mibBuilder.loadTexts: hmSigConLinkTable.setStatus('current')
hmSigConLinkEntry = MibTableRow((1, 3, 6, 1, 4, 1, 248, 14, 2, 12, 2, 1), ).setIndexNames((0, "HMPRIV-MGMT-SNMP-MIB", "hmSigConLinkID"))
if mibBuilder.loadTexts: hmSigConLinkEntry.setStatus('current')
hmSigConLinkID = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 14, 2, 12, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 128))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hmSigConLinkID.setStatus('current')
hmSigConLinkAlarm = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 14, 2, 12, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hmSigConLinkAlarm.setStatus('current')
hmDevMonConfigTable = MibTable((1, 3, 6, 1, 4, 1, 248, 14, 2, 12, 3), )
if mibBuilder.loadTexts: hmDevMonConfigTable.setStatus('current')
hmDevMonConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 248, 14, 2, 12, 3, 1), ).setIndexNames((0, "HMPRIV-MGMT-SNMP-MIB", "hmDevMonID"))
if mibBuilder.loadTexts: hmDevMonConfigEntry.setStatus('current')
hmDevMonID = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 14, 2, 12, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hmDevMonID.setStatus('current')
hmDevMonTrapEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 14, 2, 12, 3, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hmDevMonTrapEnable.setStatus('current')
hmDevMonTrapCause = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 14, 2, 12, 3, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10))).clone(namedValues=NamedValues(("other", 1), ("linkFailure", 2), ("controlLine", 3), ("redNotGuaranteed", 4), ("psState", 5), ("temperature", 6), ("moduleRemoval", 7), ("acaRemoval", 8), ("fanFailure", 9), ("acaNotInSync", 10)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hmDevMonTrapCause.setStatus('current')
hmDevMonTrapCauseIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 14, 2, 12, 3, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hmDevMonTrapCauseIndex.setStatus('current')
hmDevMonSwitchState = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 14, 2, 12, 3, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("error", 1), ("noerror", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hmDevMonSwitchState.setStatus('current')
hmDevMonSenseLinkFailure = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 14, 2, 12, 3, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("error", 1), ("ignore", 2))).clone('ignore')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hmDevMonSenseLinkFailure.setStatus('current')
hmDevMonSenseControlLine = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 14, 2, 12, 3, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("error", 1), ("ignore", 2))).clone('ignore')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hmDevMonSenseControlLine.setStatus('current')
hmDevMonSenseRedNotGuaranteed = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 14, 2, 12, 3, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("error", 1), ("ignore", 2))).clone('ignore')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hmDevMonSenseRedNotGuaranteed.setStatus('current')
hmDevMonSensePS1State = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 14, 2, 12, 3, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("error", 1), ("ignore", 2))).clone('error')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hmDevMonSensePS1State.setStatus('current')
hmDevMonSensePS2State = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 14, 2, 12, 3, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("error", 1), ("ignore", 2))).clone('error')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hmDevMonSensePS2State.setStatus('current')
hmDevMonSenseTemperature = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 14, 2, 12, 3, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("error", 1), ("ignore", 2))).clone('ignore')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hmDevMonSenseTemperature.setStatus('current')
hmDevMonSenseModuleRemoval = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 14, 2, 12, 3, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("error", 1), ("ignore", 2))).clone('ignore')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hmDevMonSenseModuleRemoval.setStatus('current')
hmDevMonSenseACARemoval = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 14, 2, 12, 3, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("error", 1), ("ignore", 2))).clone('ignore')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hmDevMonSenseACARemoval.setStatus('current')
hmDevMonSensePS3State = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 14, 2, 12, 3, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("error", 1), ("ignore", 2))).clone('ignore')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hmDevMonSensePS3State.setStatus('current')
hmDevMonSensePS4State = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 14, 2, 12, 3, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("error", 1), ("ignore", 2))).clone('ignore')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hmDevMonSensePS4State.setStatus('current')
hmDevMonSenseFan1State = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 14, 2, 12, 3, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("error", 1), ("ignore", 2))).clone('ignore')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hmDevMonSenseFan1State.setStatus('current')
hmDevMonSensePS5State = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 14, 2, 12, 3, 1, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("error", 1), ("ignore", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hmDevMonSensePS5State.setStatus('current')
hmDevMonSensePS6State = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 14, 2, 12, 3, 1, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("error", 1), ("ignore", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hmDevMonSensePS6State.setStatus('current')
hmDevMonSensePS7State = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 14, 2, 12, 3, 1, 19), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("error", 1), ("ignore", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hmDevMonSensePS7State.setStatus('current')
hmDevMonSensePS8State = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 14, 2, 12, 3, 1, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("error", 1), ("ignore", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hmDevMonSensePS8State.setStatus('current')
hmDevMonSenseACANotInSync = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 14, 2, 12, 3, 1, 21), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("error", 1), ("ignore", 2))).clone('ignore')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hmDevMonSenseACANotInSync.setStatus('current')
hmAgentSnmpConfigGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 248, 14, 2, 13))
hmAgentSnmpCommunityCreate = MibScalar((1, 3, 6, 1, 4, 1, 248, 14, 2, 13, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hmAgentSnmpCommunityCreate.setStatus('current')
hmAgentSnmpCommunityConfigTable = MibTable((1, 3, 6, 1, 4, 1, 248, 14, 2, 13, 2), )
if mibBuilder.loadTexts: hmAgentSnmpCommunityConfigTable.setStatus('current')
hmAgentSnmpCommunityConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 248, 14, 2, 13, 2, 1), ).setIndexNames((0, "HMPRIV-MGMT-SNMP-MIB", "hmAgentSnmpCommunityIndex"))
if mibBuilder.loadTexts: hmAgentSnmpCommunityConfigEntry.setStatus('current')
hmAgentSnmpCommunityIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 14, 2, 13, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 9))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hmAgentSnmpCommunityIndex.setStatus('current')
hmAgentSnmpCommunityName = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 14, 2, 13, 2, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hmAgentSnmpCommunityName.setStatus('current')
hmAgentSnmpCommunityIPAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 14, 2, 13, 2, 1, 3), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hmAgentSnmpCommunityIPAddress.setStatus('current')
hmAgentSnmpCommunityIPMask = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 14, 2, 13, 2, 1, 4), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hmAgentSnmpCommunityIPMask.setStatus('current')
hmAgentSnmpCommunityAccessMode = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 14, 2, 13, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("readOnly", 1), ("readWrite", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hmAgentSnmpCommunityAccessMode.setStatus('current')
hmAgentSnmpCommunityStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 14, 2, 13, 2, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("active", 1), ("notInService", 2), ("config", 3), ("destroy", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hmAgentSnmpCommunityStatus.setStatus('current')
hmAgentSnmpLoggingGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 248, 14, 2, 13, 8))
hmAgentSnmpLogGetRequest = MibScalar((1, 3, 6, 1, 4, 1, 248, 14, 2, 13, 8, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hmAgentSnmpLogGetRequest.setStatus('current')
hmAgentSnmpLogSetRequest = MibScalar((1, 3, 6, 1, 4, 1, 248, 14, 2, 13, 8, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hmAgentSnmpLogSetRequest.setStatus('current')
hmAgentSnmpLogGetSeverity = MibScalar((1, 3, 6, 1, 4, 1, 248, 14, 2, 13, 8, 3), HmAgentLogSeverity().clone('notice')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hmAgentSnmpLogGetSeverity.setStatus('current')
hmAgentSnmpLogSetSeverity = MibScalar((1, 3, 6, 1, 4, 1, 248, 14, 2, 13, 8, 4), HmAgentLogSeverity().clone('notice')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hmAgentSnmpLogSetSeverity.setStatus('current')
hmAgentSnmpTrapReceiverCreate = MibScalar((1, 3, 6, 1, 4, 1, 248, 14, 2, 13, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hmAgentSnmpTrapReceiverCreate.setStatus('current')
hmAgentSnmpTrapReceiverConfigTable = MibTable((1, 3, 6, 1, 4, 1, 248, 14, 2, 13, 4), )
if mibBuilder.loadTexts: hmAgentSnmpTrapReceiverConfigTable.setStatus('current')
hmAgentSnmpTrapReceiverConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 248, 14, 2, 13, 4, 1), ).setIndexNames((0, "HMPRIV-MGMT-SNMP-MIB", "hmAgentSnmpTrapReceiverIndex"))
if mibBuilder.loadTexts: hmAgentSnmpTrapReceiverConfigEntry.setStatus('current')
hmAgentSnmpTrapReceiverIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 14, 2, 13, 4, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 9))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hmAgentSnmpTrapReceiverIndex.setStatus('current')
hmAgentSnmpTrapReceiverCommunityName = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 14, 2, 13, 4, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hmAgentSnmpTrapReceiverCommunityName.setStatus('current')
hmAgentSnmpTrapReceiverIPAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 14, 2, 13, 4, 1, 3), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hmAgentSnmpTrapReceiverIPAddress.setStatus('current')
hmAgentSnmpTrapReceiverStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 14, 2, 13, 4, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("active", 1), ("notInService", 2), ("config", 3), ("destroy", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hmAgentSnmpTrapReceiverStatus.setStatus('current')
hmAgentSnmpTrapFlagsConfigGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 248, 14, 2, 13, 5))
hmAgentSnmpAuthenticationTrapFlag = MibScalar((1, 3, 6, 1, 4, 1, 248, 14, 2, 13, 5, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('enable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hmAgentSnmpAuthenticationTrapFlag.setStatus('current')
hmAgentSnmpLinkUpDownTrapFlag = MibScalar((1, 3, 6, 1, 4, 1, 248, 14, 2, 13, 5, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('enable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hmAgentSnmpLinkUpDownTrapFlag.setStatus('current')
hmAgentSnmpMultipleUsersTrapFlag = MibScalar((1, 3, 6, 1, 4, 1, 248, 14, 2, 13, 5, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('enable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hmAgentSnmpMultipleUsersTrapFlag.setStatus('current')
hmAgentSnmpSpanningTreeTrapFlag = MibScalar((1, 3, 6, 1, 4, 1, 248, 14, 2, 13, 5, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('enable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hmAgentSnmpSpanningTreeTrapFlag.setStatus('current')
hmAgentSnmpBroadcastStormTrapFlag = MibScalar((1, 3, 6, 1, 4, 1, 248, 14, 2, 13, 5, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('enable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hmAgentSnmpBroadcastStormTrapFlag.setStatus('current')
hmAgentSnmpChassisTrapFlag = MibScalar((1, 3, 6, 1, 4, 1, 248, 14, 2, 13, 5, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('enable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hmAgentSnmpChassisTrapFlag.setStatus('current')
hmAgentSnmpL2RedundancyTrapFlag = MibScalar((1, 3, 6, 1, 4, 1, 248, 14, 2, 13, 5, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('enable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hmAgentSnmpL2RedundancyTrapFlag.setStatus('current')
hmAgentSnmpPortSecurityTrapFlag = MibScalar((1, 3, 6, 1, 4, 1, 248, 14, 2, 13, 5, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('enable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hmAgentSnmpPortSecurityTrapFlag.setStatus('current')
hmAgentSnmpCommunityMaxEntries = MibScalar((1, 3, 6, 1, 4, 1, 248, 14, 2, 13, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hmAgentSnmpCommunityMaxEntries.setStatus('current')
hmAgentSnmpTrapReceiverMaxEntries = MibScalar((1, 3, 6, 1, 4, 1, 248, 14, 2, 13, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hmAgentSnmpTrapReceiverMaxEntries.setStatus('current')
hmPOEGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 248, 14, 2, 14))
hmPOEGlobalGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 248, 14, 2, 14, 1))
hmPOEStatus = MibScalar((1, 3, 6, 1, 4, 1, 248, 14, 2, 14, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('enable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hmPOEStatus.setStatus('current')
hmPOEScanning = MibScalar((1, 3, 6, 1, 4, 1, 248, 14, 2, 14, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('enable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hmPOEScanning.setStatus('current')
hmPOEReservedPower = MibScalar((1, 3, 6, 1, 4, 1, 248, 14, 2, 14, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hmPOEReservedPower.setStatus('current')
hmPOEFastStartup = MibScalar((1, 3, 6, 1, 4, 1, 248, 14, 2, 14, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hmPOEFastStartup.setStatus('current')
hmPOEPortTable = MibTable((1, 3, 6, 1, 4, 1, 248, 14, 2, 14, 2), )
if mibBuilder.loadTexts: hmPOEPortTable.setStatus('current')
hmPOEPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 248, 14, 2, 14, 2, 1), ).setIndexNames((0, "HMPRIV-MGMT-SNMP-MIB", "hmPOEPortIndex"))
if mibBuilder.loadTexts: hmPOEPortEntry.setStatus('current')
hmPOEPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 14, 2, 14, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 128))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hmPOEPortIndex.setStatus('current')
hmPOEPortConsumptionPower = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 14, 2, 14, 2, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hmPOEPortConsumptionPower.setStatus('current')
hmPOEModuleTable = MibTable((1, 3, 6, 1, 4, 1, 248, 14, 2, 14, 3), )
if mibBuilder.loadTexts: hmPOEModuleTable.setStatus('current')
hmPOEModuleEntry = MibTableRow((1, 3, 6, 1, 4, 1, 248, 14, 2, 14, 3, 1), ).setIndexNames((0, "HMPRIV-MGMT-SNMP-MIB", "hmPOEModuleIndex"))
if mibBuilder.loadTexts: hmPOEModuleEntry.setStatus('current')
hmPOEModuleIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 14, 2, 14, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 128))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hmPOEModuleIndex.setStatus('current')
hmPOEModulePower = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 14, 2, 14, 3, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hmPOEModulePower.setStatus('current')
hmPOEModuleMaximumPower = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 14, 2, 14, 3, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hmPOEModuleMaximumPower.setStatus('current')
hmPOEModuleReservedPower = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 14, 2, 14, 3, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hmPOEModuleReservedPower.setStatus('current')
hmPOEModuleDeliveredPower = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 14, 2, 14, 3, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hmPOEModuleDeliveredPower.setStatus('current')
hmPOEModuleUsageThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 14, 2, 14, 3, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 99)).clone(90)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hmPOEModuleUsageThreshold.setStatus('current')
hmPOEModuleNotificationControlEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 14, 2, 14, 3, 1, 7), TruthValue().clone('true')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hmPOEModuleNotificationControlEnable.setStatus('current')
hmSwitchResources = MibIdentifier((1, 3, 6, 1, 4, 1, 248, 14, 2, 15))
hmCpuResources = MibIdentifier((1, 3, 6, 1, 4, 1, 248, 14, 2, 15, 2))
hmMemoryResources = MibIdentifier((1, 3, 6, 1, 4, 1, 248, 14, 2, 15, 3))
hmNetworkResources = MibIdentifier((1, 3, 6, 1, 4, 1, 248, 14, 2, 15, 4))
hmEnableMeasurement = MibScalar((1, 3, 6, 1, 4, 1, 248, 14, 2, 15, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('enable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hmEnableMeasurement.setStatus('current')
hmCpuUtilization = MibScalar((1, 3, 6, 1, 4, 1, 248, 14, 2, 15, 2, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setUnits('percent').setMaxAccess("readonly")
if mibBuilder.loadTexts: hmCpuUtilization.setStatus('current')
hmCpuAverageUtilization = MibScalar((1, 3, 6, 1, 4, 1, 248, 14, 2, 15, 2, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setUnits('percent').setMaxAccess("readonly")
if mibBuilder.loadTexts: hmCpuAverageUtilization.setStatus('current')
hmCpuRunningProcesses = MibScalar((1, 3, 6, 1, 4, 1, 248, 14, 2, 15, 2, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 32768))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hmCpuRunningProcesses.setStatus('current')
hmCpuMaxRunningProcesses = MibScalar((1, 3, 6, 1, 4, 1, 248, 14, 2, 15, 2, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 32768))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hmCpuMaxRunningProcesses.setStatus('current')
hmMemoryAllocated = MibScalar((1, 3, 6, 1, 4, 1, 248, 14, 2, 15, 3, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setUnits('kBytes').setMaxAccess("readonly")
if mibBuilder.loadTexts: hmMemoryAllocated.setStatus('current')
hmMemoryFree = MibScalar((1, 3, 6, 1, 4, 1, 248, 14, 2, 15, 3, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setUnits('kBytes').setMaxAccess("readonly")
if mibBuilder.loadTexts: hmMemoryFree.setStatus('current')
hmMemoryAllocatedAverage = MibScalar((1, 3, 6, 1, 4, 1, 248, 14, 2, 15, 3, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setUnits('kBytes').setMaxAccess("readonly")
if mibBuilder.loadTexts: hmMemoryAllocatedAverage.setStatus('current')
hmMemoryFreeAverage = MibScalar((1, 3, 6, 1, 4, 1, 248, 14, 2, 15, 3, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setUnits('kBytes').setMaxAccess("readonly")
if mibBuilder.loadTexts: hmMemoryFreeAverage.setStatus('current')
hmNetworkCpuIfUtilization = MibScalar((1, 3, 6, 1, 4, 1, 248, 14, 2, 15, 4, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setUnits('precent').setMaxAccess("readonly")
if mibBuilder.loadTexts: hmNetworkCpuIfUtilization.setStatus('current')
hmNetworkCpuIfAverageUtilization = MibScalar((1, 3, 6, 1, 4, 1, 248, 14, 2, 15, 4, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setUnits('precent').setMaxAccess("readonly")
if mibBuilder.loadTexts: hmNetworkCpuIfAverageUtilization.setStatus('current')
hmIndustrialEthernetProtocols = MibIdentifier((1, 3, 6, 1, 4, 1, 248, 14, 2, 16))
hmProfinetIOConfigGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 248, 14, 2, 16, 1))
hmProfinetIOStatisticsGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 248, 14, 2, 16, 2))
hmEthernetIPConfigGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 248, 14, 2, 16, 3))
hmEthernetIPStatisticsGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 248, 14, 2, 16, 4))
hmPNIOAdminStatus = MibScalar((1, 3, 6, 1, 4, 1, 248, 14, 2, 16, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hmPNIOAdminStatus.setStatus('current')
hmPNIODeviceID = MibScalar((1, 3, 6, 1, 4, 1, 248, 14, 2, 16, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hmPNIODeviceID.setStatus('current')
hmPNIOModuleIdentNumber = MibScalar((1, 3, 6, 1, 4, 1, 248, 14, 2, 16, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hmPNIOModuleIdentNumber.setStatus('current')
hmPNIOOrderID = MibScalar((1, 3, 6, 1, 4, 1, 248, 14, 2, 16, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hmPNIOOrderID.setStatus('current')
hmPNIODeviceTypeDetails = MibScalar((1, 3, 6, 1, 4, 1, 248, 14, 2, 16, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hmPNIODeviceTypeDetails.setStatus('current')
hmPNIOSoftwareRelease = MibScalar((1, 3, 6, 1, 4, 1, 248, 14, 2, 16, 1, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hmPNIOSoftwareRelease.setStatus('current')
hmPNIOHardwareRelease = MibScalar((1, 3, 6, 1, 4, 1, 248, 14, 2, 16, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hmPNIOHardwareRelease.setStatus('current')
hmPNIOOrderID9th = MibScalar((1, 3, 6, 1, 4, 1, 248, 14, 2, 16, 1, 8), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hmPNIOOrderID9th.setStatus('current')
hmPNIODcpModeTable = MibTable((1, 3, 6, 1, 4, 1, 248, 14, 2, 16, 1, 10), )
if mibBuilder.loadTexts: hmPNIODcpModeTable.setStatus('current')
hmPNIODcpModeEntry = MibTableRow((1, 3, 6, 1, 4, 1, 248, 14, 2, 16, 1, 10, 1), ).setIndexNames((0, "HMPRIV-MGMT-SNMP-MIB", "hmPNIODcpModePortID"))
if mibBuilder.loadTexts: hmPNIODcpModeEntry.setStatus('current')
hmPNIODcpModePortID = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 14, 2, 16, 1, 10, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 128))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hmPNIODcpModePortID.setStatus('current')
hmPNIODcpMode = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 14, 2, 16, 1, 10, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("none", 0), ("ingress", 1), ("egress", 2), ("both", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hmPNIODcpMode.setStatus('current')
hmPNIONameOfStation = MibScalar((1, 3, 6, 1, 4, 1, 248, 14, 2, 16, 1, 11), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 240))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hmPNIONameOfStation.setStatus('current')
hmEtherNetIPAdminStatus = MibScalar((1, 3, 6, 1, 4, 1, 248, 14, 2, 16, 3, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hmEtherNetIPAdminStatus.setStatus('current')
hmEtherNetIPErrorCode = MibScalar((1, 3, 6, 1, 4, 1, 248, 14, 2, 16, 3, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hmEtherNetIPErrorCode.setStatus('current')
hmEtherNetIPProductCode = MibScalar((1, 3, 6, 1, 4, 1, 248, 14, 2, 16, 3, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hmEtherNetIPProductCode.setStatus('current')
hmEtherNetIPRevisionMajor = MibScalar((1, 3, 6, 1, 4, 1, 248, 14, 2, 16, 3, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hmEtherNetIPRevisionMajor.setStatus('current')
hmEtherNetIPRevisionMinor = MibScalar((1, 3, 6, 1, 4, 1, 248, 14, 2, 16, 3, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hmEtherNetIPRevisionMinor.setStatus('current')
hmEtherNetIPProductName = MibScalar((1, 3, 6, 1, 4, 1, 248, 14, 2, 16, 3, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hmEtherNetIPProductName.setStatus('current')
hmEtherNetIPCatalogName = MibScalar((1, 3, 6, 1, 4, 1, 248, 14, 2, 16, 3, 7), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hmEtherNetIPCatalogName.setStatus('current')
hmEtherNetIPConnEstablished = MibScalar((1, 3, 6, 1, 4, 1, 248, 14, 2, 16, 4, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hmEtherNetIPConnEstablished.setStatus('current')
hmEtherNetIPConnTimeouts = MibScalar((1, 3, 6, 1, 4, 1, 248, 14, 2, 16, 4, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hmEtherNetIPConnTimeouts.setStatus('current')
hmEtherNetIPVendorObjRequests = MibScalar((1, 3, 6, 1, 4, 1, 248, 14, 2, 16, 4, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hmEtherNetIPVendorObjRequests.setStatus('current')
hmAgentLoginGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 248, 14, 2, 17))
hmAgentLoginBanner = MibScalar((1, 3, 6, 1, 4, 1, 248, 14, 2, 17, 1), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hmAgentLoginBanner.setStatus('current')
hmPortMonitorGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 248, 14, 2, 18))
hmPortMonitorAdminMode = MibScalar((1, 3, 6, 1, 4, 1, 248, 14, 2, 18, 1), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hmPortMonitorAdminMode.setStatus('current')
hmPortMonitorIntfTable = MibTable((1, 3, 6, 1, 4, 1, 248, 14, 2, 18, 2), )
if mibBuilder.loadTexts: hmPortMonitorIntfTable.setStatus('current')
hmPortMonitorIntfEntry = MibTableRow((1, 3, 6, 1, 4, 1, 248, 14, 2, 18, 2, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: hmPortMonitorIntfEntry.setStatus('current')
hmPortMonitorIntfMode = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 14, 2, 18, 2, 1, 1), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hmPortMonitorIntfMode.setStatus('current')
hmPortMonitorIntfReset = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 14, 2, 18, 2, 1, 2), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hmPortMonitorIntfReset.setStatus('current')
hmPortMonitorIntfAction = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 14, 2, 18, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("port-disable", 1), ("trap-only", 2))).clone('port-disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hmPortMonitorIntfAction.setStatus('current')
hmPortMonitorConditionGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 248, 14, 2, 18, 3))
hmPortMonitorConditionTable = MibTable((1, 3, 6, 1, 4, 1, 248, 14, 2, 18, 3, 1), )
if mibBuilder.loadTexts: hmPortMonitorConditionTable.setStatus('current')
hmPortMonitorConditionIntfEntry = MibTableRow((1, 3, 6, 1, 4, 1, 248, 14, 2, 18, 3, 1, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: hmPortMonitorConditionIntfEntry.setStatus('current')
hmPortMonitorConditionLinkFlapMode = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 14, 2, 18, 3, 1, 1, 1), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hmPortMonitorConditionLinkFlapMode.setStatus('current')
hmPortMonitorConditionCrcFragmentsMode = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 14, 2, 18, 3, 1, 1, 2), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hmPortMonitorConditionCrcFragmentsMode.setStatus('current')
hmPortMonitorConditionField = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 14, 2, 18, 3, 1, 1, 3), Bits().clone(namedValues=NamedValues(("none", 0), ("link-flap", 1), ("crcFragments", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hmPortMonitorConditionField.setStatus('current')
hmPortMonitorConditionLinkFlapGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 248, 14, 2, 18, 3, 2))
hmPortMonitorConditionLinkFlapInterval = MibScalar((1, 3, 6, 1, 4, 1, 248, 14, 2, 18, 3, 2, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 180)).clone(10)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hmPortMonitorConditionLinkFlapInterval.setStatus('current')
hmPortMonitorConditionLinkFlapCount = MibScalar((1, 3, 6, 1, 4, 1, 248, 14, 2, 18, 3, 2, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 100)).clone(5)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hmPortMonitorConditionLinkFlapCount.setStatus('current')
hmPortMonitorConditionLinkFlapIntfTable = MibTable((1, 3, 6, 1, 4, 1, 248, 14, 2, 18, 3, 2, 3), )
if mibBuilder.loadTexts: hmPortMonitorConditionLinkFlapIntfTable.setStatus('current')
hmPortMonitorConditionLinkFlapIntfEntry = MibTableRow((1, 3, 6, 1, 4, 1, 248, 14, 2, 18, 3, 2, 3, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: hmPortMonitorConditionLinkFlapIntfEntry.setStatus('current')
hmPortMonitorConditionLinkFlapCountInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 14, 2, 18, 3, 2, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hmPortMonitorConditionLinkFlapCountInterval.setStatus('current')
hmPortMonitorConditionLinkFlapCountTotal = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 14, 2, 18, 3, 2, 3, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hmPortMonitorConditionLinkFlapCountTotal.setStatus('current')
hmPortMonitorConditionCrcFragmentsGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 248, 14, 2, 18, 3, 3))
hmPortMonitorConditionCrcFragmentsInterval = MibScalar((1, 3, 6, 1, 4, 1, 248, 14, 2, 18, 3, 3, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(5, 180)).clone(10)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hmPortMonitorConditionCrcFragmentsInterval.setStatus('current')
hmPortMonitorConditionCrcFragmentsCount = MibScalar((1, 3, 6, 1, 4, 1, 248, 14, 2, 18, 3, 3, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1000000)).clone(1000)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hmPortMonitorConditionCrcFragmentsCount.setStatus('current')
hmPortMonitorConditionCrcFragmentsIntfTable = MibTable((1, 3, 6, 1, 4, 1, 248, 14, 2, 18, 3, 3, 3), )
if mibBuilder.loadTexts: hmPortMonitorConditionCrcFragmentsIntfTable.setStatus('current')
hmPortMonitorConditionCrcFragmentsIntfEntry = MibTableRow((1, 3, 6, 1, 4, 1, 248, 14, 2, 18, 3, 3, 3, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: hmPortMonitorConditionCrcFragmentsIntfEntry.setStatus('current')
hmPortMonitorConditionCrcFragmentsCountInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 14, 2, 18, 3, 3, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hmPortMonitorConditionCrcFragmentsCountInterval.setStatus('current')
hmPortMonitorConditionCrcFragmentsCountTotal = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 14, 2, 18, 3, 3, 3, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hmPortMonitorConditionCrcFragmentsCountTotal.setStatus('current')
hmChassisEvent = ObjectIdentity((1, 3, 6, 1, 4, 1, 248, 14, 1, 0))
if mibBuilder.loadTexts: hmChassisEvent.setStatus('current')
hmAgentEvent = ObjectIdentity((1, 3, 6, 1, 4, 1, 248, 14, 2, 0))
if mibBuilder.loadTexts: hmAgentEvent.setStatus('current')
hmGroupMapChange = NotificationType((1, 3, 6, 1, 4, 1, 248, 14, 1, 0, 1)).setObjects(("HMPRIV-MGMT-SNMP-MIB", "hmSysGroupMap"), ("HMPRIV-MGMT-SNMP-MIB", "hmNeighbourSlot"), ("HMPRIV-MGMT-SNMP-MIB", "hmNeighbourIpAddress"))
if mibBuilder.loadTexts: hmGroupMapChange.setStatus('current')
hmPowerSupply = NotificationType((1, 3, 6, 1, 4, 1, 248, 14, 1, 0, 2)).setObjects(("HMPRIV-MGMT-SNMP-MIB", "hmPSState"))
if mibBuilder.loadTexts: hmPowerSupply.setStatus('current')
hmFan = NotificationType((1, 3, 6, 1, 4, 1, 248, 14, 1, 0, 3)).setObjects(("HMPRIV-MGMT-SNMP-MIB", "hmFanState"))
if mibBuilder.loadTexts: hmFan.setStatus('current')
hmSignallingRelay = NotificationType((1, 3, 6, 1, 4, 1, 248, 14, 1, 0, 4)).setObjects(("HMPRIV-MGMT-SNMP-MIB", "hmRS2SigRelayState"), ("HMPRIV-MGMT-SNMP-MIB", "hmSigTrapReason"), ("HMPRIV-MGMT-SNMP-MIB", "hmSigReasonIndex"))
if mibBuilder.loadTexts: hmSignallingRelay.setStatus('current')
hmStandby = NotificationType((1, 3, 6, 1, 4, 1, 248, 14, 1, 0, 5)).setObjects(("HMPRIV-MGMT-SNMP-MIB", "hmRS2OperMode"))
if mibBuilder.loadTexts: hmStandby.setStatus('current')
hmSelftestError = NotificationType((1, 3, 6, 1, 4, 1, 248, 14, 1, 0, 6)).setObjects(("HMPRIV-MGMT-SNMP-MIB", "hmSelfTestCpuResult"), ("HMPRIV-MGMT-SNMP-MIB", "hmSelfTestBBResult"), ("HMPRIV-MGMT-SNMP-MIB", "hmSelfTestBPResult"), ("HMPRIV-MGMT-SNMP-MIB", "hmSelfTestM1Result"), ("HMPRIV-MGMT-SNMP-MIB", "hmSelfTestM2Result"), ("HMPRIV-MGMT-SNMP-MIB", "hmSelfTestM3Result"), ("HMPRIV-MGMT-SNMP-MIB", "hmSelfTestM4Result"))
if mibBuilder.loadTexts: hmSelftestError.setStatus('current')
hmModuleMapChange = NotificationType((1, 3, 6, 1, 4, 1, 248, 14, 1, 0, 7)).setObjects(("HMPRIV-MGMT-SNMP-MIB", "hmSysGroupModuleMap"))
if mibBuilder.loadTexts: hmModuleMapChange.setStatus('current')
hmBPDUGuardTrap = NotificationType((1, 3, 6, 1, 4, 1, 248, 14, 1, 0, 8)).setObjects(("HMPRIV-MGMT-SNMP-MIB", "hmIfaceStpBpduGuardStatus"))
if mibBuilder.loadTexts: hmBPDUGuardTrap.setStatus('current')
hmSigConRelayChange = NotificationType((1, 3, 6, 1, 4, 1, 248, 14, 1, 0, 10)).setObjects(("HMPRIV-MGMT-SNMP-MIB", "hmSigConOperState"), ("HMPRIV-MGMT-SNMP-MIB", "hmSigConTrapCause"), ("HMPRIV-MGMT-SNMP-MIB", "hmSigConTrapCauseIndex"))
if mibBuilder.loadTexts: hmSigConRelayChange.setStatus('current')
hmSFPChangeTrap = NotificationType((1, 3, 6, 1, 4, 1, 248, 14, 1, 0, 11)).setObjects(("HMPRIV-MGMT-SNMP-MIB", "hmIfaceGroupID"), ("HMPRIV-MGMT-SNMP-MIB", "hmIfaceID"))
if mibBuilder.loadTexts: hmSFPChangeTrap.setStatus('current')
hmIfaceUtilizationTrap = NotificationType((1, 3, 6, 1, 4, 1, 248, 14, 1, 0, 12)).setObjects(("HMPRIV-MGMT-SNMP-MIB", "hmIfaceUtilizationAlarmCondition"), ("HMPRIV-MGMT-SNMP-MIB", "hmIfaceUtilization"))
if mibBuilder.loadTexts: hmIfaceUtilizationTrap.setStatus('current')
hmDevMonStateChange = NotificationType((1, 3, 6, 1, 4, 1, 248, 14, 1, 0, 13)).setObjects(("HMPRIV-MGMT-SNMP-MIB", "hmDevMonSwitchState"), ("HMPRIV-MGMT-SNMP-MIB", "hmDevMonTrapCause"), ("HMPRIV-MGMT-SNMP-MIB", "hmDevMonTrapCauseIndex"))
if mibBuilder.loadTexts: hmDevMonStateChange.setStatus('current')
hmSFPRxPowerChangeTrap = NotificationType((1, 3, 6, 1, 4, 1, 248, 14, 1, 0, 14)).setObjects(("HMPRIV-MGMT-SNMP-MIB", "hmSfpRxPowerState"))
if mibBuilder.loadTexts: hmSFPRxPowerChangeTrap.setStatus('current')
hmSysSelftestRebootOnErrorTrap = NotificationType((1, 3, 6, 1, 4, 1, 248, 14, 1, 0, 15)).setObjects(("HMPRIV-MGMT-SNMP-MIB", "hmSysSelftestRebootOnError"))
if mibBuilder.loadTexts: hmSysSelftestRebootOnErrorTrap.setStatus('current')
hmTemperatureTrap = NotificationType((1, 3, 6, 1, 4, 1, 248, 14, 2, 0, 1)).setObjects(("HMPRIV-MGMT-SNMP-MIB", "hmTemperature"), ("HMPRIV-MGMT-SNMP-MIB", "hmTempUprLimit"), ("HMPRIV-MGMT-SNMP-MIB", "hmTempLwrLimit"))
if mibBuilder.loadTexts: hmTemperatureTrap.setStatus('current')
hmLoginTrap = NotificationType((1, 3, 6, 1, 4, 1, 248, 14, 2, 0, 2)).setObjects(("HMPRIV-MGMT-SNMP-MIB", "hmLastIpAddr"), ("HMPRIV-MGMT-SNMP-MIB", "hmLastCommunity"))
if mibBuilder.loadTexts: hmLoginTrap.setStatus('current')
hmDuplicateStaticAddressTrap = NotificationType((1, 3, 6, 1, 4, 1, 248, 14, 2, 0, 3)).setObjects(("BRIDGE-MIB", "dot1dStaticAddress"))
if mibBuilder.loadTexts: hmDuplicateStaticAddressTrap.setStatus('current')
hmAutoconfigAdapterTrap = NotificationType((1, 3, 6, 1, 4, 1, 248, 14, 2, 0, 4)).setObjects(("HMPRIV-MGMT-SNMP-MIB", "hmAutoconfigAdapterStatus"))
if mibBuilder.loadTexts: hmAutoconfigAdapterTrap.setStatus('current')
hmRelayDuplicateIPTrap = NotificationType((1, 3, 6, 1, 4, 1, 248, 14, 2, 0, 5)).setObjects(("HMPRIV-MGMT-SNMP-MIB", "hmRelayLastDuplicateIP"))
if mibBuilder.loadTexts: hmRelayDuplicateIPTrap.setStatus('current')
hmSNTPTrap = NotificationType((1, 3, 6, 1, 4, 1, 248, 14, 2, 0, 6)).setObjects(("HMPRIV-MGMT-SNMP-MIB", "hmNetSNTPOperStatus"))
if mibBuilder.loadTexts: hmSNTPTrap.setStatus('current')
hmNetACDNotification = NotificationType((1, 3, 6, 1, 4, 1, 248, 14, 2, 0, 7)).setObjects(("HMPRIV-MGMT-SNMP-MIB", "hmNetACDTimeMark"), ("HMPRIV-MGMT-SNMP-MIB", "hmNetACDAddrSubtype"), ("HMPRIV-MGMT-SNMP-MIB", "hmNetACDAddr"), ("HMPRIV-MGMT-SNMP-MIB", "hmNetACDMAC"), ("HMPRIV-MGMT-SNMP-MIB", "hmNetACDIfId"))
if mibBuilder.loadTexts: hmNetACDNotification.setStatus('current')
hmConfigurationSavedTrap = NotificationType((1, 3, 6, 1, 4, 1, 248, 14, 2, 0, 8)).setObjects(("HMPRIV-MGMT-SNMP-MIB", "hmAutoconfigAdapterStatus"))
if mibBuilder.loadTexts: hmConfigurationSavedTrap.setStatus('current')
hmConfigurationChangedTrap = NotificationType((1, 3, 6, 1, 4, 1, 248, 14, 2, 0, 9)).setObjects(("HMPRIV-MGMT-SNMP-MIB", "hmConfigurationStatus"))
if mibBuilder.loadTexts: hmConfigurationChangedTrap.setStatus('current')
hmAddressRelearnDetectTrap = NotificationType((1, 3, 6, 1, 4, 1, 248, 14, 2, 0, 10)).setObjects(("HMPRIV-MGMT-SNMP-MIB", "hmSysSwitchAddressRelearnThreshold"))
if mibBuilder.loadTexts: hmAddressRelearnDetectTrap.setStatus('current')
hmDuplexMismatchTrap = NotificationType((1, 3, 6, 1, 4, 1, 248, 14, 2, 0, 11)).setObjects(("HMPRIV-MGMT-SNMP-MIB", "hmIfaceGroupID"), ("HMPRIV-MGMT-SNMP-MIB", "hmIfaceID"))
if mibBuilder.loadTexts: hmDuplexMismatchTrap.setStatus('current')
hmNTPTrap = NotificationType((1, 3, 6, 1, 4, 1, 248, 14, 2, 0, 12)).setObjects(("HMPRIV-MGMT-SNMP-MIB", "hmNetNTPStatusCode"), ("HMPRIV-MGMT-SNMP-MIB", "hmNetNTPStatusText"))
if mibBuilder.loadTexts: hmNTPTrap.setStatus('current')
hmPortMonitorPortDisabledTrap = NotificationType((1, 3, 6, 1, 4, 1, 248, 14, 2, 0, 13)).setObjects(("IF-MIB", "ifIndex"), ("HMPRIV-MGMT-SNMP-MIB", "hmPortMonitorConditionField"))
if mibBuilder.loadTexts: hmPortMonitorPortDisabledTrap.setStatus('current')
hmPOEModulePowerUsageOnNotification = NotificationType((1, 3, 6, 1, 4, 1, 248, 14, 2, 0, 14)).setObjects(("HMPRIV-MGMT-SNMP-MIB", "hmPOEModuleIndex"), ("HMPRIV-MGMT-SNMP-MIB", "hmPOEModuleDeliveredPower"))
if mibBuilder.loadTexts: hmPOEModulePowerUsageOnNotification.setStatus('current')
hmPOEModulePowerUsageOffNotification = NotificationType((1, 3, 6, 1, 4, 1, 248, 14, 2, 0, 15)).setObjects(("HMPRIV-MGMT-SNMP-MIB", "hmPOEModuleIndex"), ("HMPRIV-MGMT-SNMP-MIB", "hmPOEModuleDeliveredPower"))
if mibBuilder.loadTexts: hmPOEModulePowerUsageOffNotification.setStatus('current')
hmSysSelftestPortError = NotificationType((1, 3, 6, 1, 4, 1, 248, 14, 2, 0, 16)).setObjects(("HMPRIV-MGMT-SNMP-MIB", "hmIfaceGroupID"), ("HMPRIV-MGMT-SNMP-MIB", "hmIfaceID"))
if mibBuilder.loadTexts: hmSysSelftestPortError.setStatus('current')
mibBuilder.exportSymbols("HMPRIV-MGMT-SNMP-MIB", PTPClockIdentity=PTPClockIdentity, hmNetPTPGroup=hmNetPTPGroup, hmFSBootConfiguration=hmFSBootConfiguration, hmSysSelftestPortError=hmSysSelftestPortError, hmPlugAndPlay=hmPlugAndPlay, hmDevMonSensePS8State=hmDevMonSensePS8State, hmRS2OperMode=hmRS2OperMode, hmRelayDHCPServer4IpAddr=hmRelayDHCPServer4IpAddr, hmIfaceEgressLimiterMode=hmIfaceEgressLimiterMode, hmNetSNTPGroup=hmNetSNTPGroup, hmPSVersion=hmPSVersion, hmBcastLimiterMode=hmBcastLimiterMode, hmPSSerialNumber=hmPSSerialNumber, hmSysHttpsPortNumber=hmSysHttpsPortNumber, hmLastCommunity=hmLastCommunity, hmIGMPSnoopQuerierToPortmask=hmIGMPSnoopQuerierToPortmask, hmRelayOptionRemoteID=hmRelayOptionRemoteID, hmNetworkResources=hmNetworkResources, hmSysGroupEntry=hmSysGroupEntry, hmNetPTP2TCLogPdelayReqInterval=hmNetPTP2TCLogPdelayReqInterval, hmCurrentAddressTable=hmCurrentAddressTable, hmPNIODeviceTypeDetails=hmPNIODeviceTypeDetails, hmNetPTP2TCGroup=hmNetPTP2TCGroup, hmPrioTrafficClassTable=hmPrioTrafficClassTable, hmNetPTP2V1Compatibility=hmNetPTP2V1Compatibility, hmPSID=hmPSID, hmCpuMaxRunningProcesses=hmCpuMaxRunningProcesses, hmSysProduct=hmSysProduct, hmUserGroupStatus=hmUserGroupStatus, hmFSUserName=hmFSUserName, hmMemoryFreeAverage=hmMemoryFreeAverage, hmCurrentAddressStatus=hmCurrentAddressStatus, hmAgentSnmpTrapReceiverIndex=hmAgentSnmpTrapReceiverIndex, octopus=octopus, hmRelayIfaceOption82Enable=hmRelayIfaceOption82Enable, hmSysStpBPDUGuardEnable=hmSysStpBPDUGuardEnable, hmTrapCommIndex=hmTrapCommIndex, mach3000=mach3000, hmSelfTestResults=hmSelfTestResults, hmNetAction=hmNetAction, hmDevMonSenseFan1State=hmDevMonSenseFan1State, hmIfaceNextHopMacAddress=hmIfaceNextHopMacAddress, hmAgentSnmpAuthenticationTrapFlag=hmAgentSnmpAuthenticationTrapFlag, mach4002_24G_3X=mach4002_24G_3X, hmFanEntry=hmFanEntry, hmSfpRxPowerInt=hmSfpRxPowerInt, hmAUIModuleEntry=hmAUIModuleEntry, hmRMAIndex=hmRMAIndex, hmNetPTP2StepsRemoved=hmNetPTP2StepsRemoved, hmDevMonTrapCause=hmDevMonTrapCause, hmNetPTPClockVariance=hmNetPTPClockVariance, hmAUIPortSQETest=hmAUIPortSQETest, hmFSFileID=hmFSFileID, hmNetPTP2PortTable=hmNetPTP2PortTable, hmTrapCommEntry=hmTrapCommEntry, hmNetPTP2TCSyncLocalClock=hmNetPTP2TCSyncLocalClock, hmSysGroupMap=hmSysGroupMap, hmIGMPSnoopQueryStaticAutomaticPortsEnable=hmIGMPSnoopQueryStaticAutomaticPortsEnable, hmNetPTP2PortState=hmNetPTP2PortState, hmSwitchResources=hmSwitchResources, hmSysSwitchRedundancyGroup=hmSysSwitchRedundancyGroup, hmPrioMACPriority=hmPrioMACPriority, hmSysModGroupID=hmSysModGroupID, hmSigConMode=hmSigConMode, hmAgentLoginBanner=hmAgentLoginBanner, hmDevMonSensePS3State=hmDevMonSensePS3State, hmAgentSnmpCommunityMaxEntries=hmAgentSnmpCommunityMaxEntries, hmLEDRStandby=hmLEDRStandby, hmSigLinkID=hmSigLinkID, hmNetPTPSyncUpperBound=hmNetPTPSyncUpperBound, hmPortMonitorIntfTable=hmPortMonitorIntfTable, HmAgentLogSeverity=HmAgentLogSeverity, hmSysUSBGroup=hmSysUSBGroup, hmNetACDAddrEntry=hmNetACDAddrEntry, hmNetPTP2ObservedParentClockPhaseChangeRate=hmNetPTP2ObservedParentClockPhaseChangeRate, hmPSPowerBudget=hmPSPowerBudget, hmFSRunningConfiguration=hmFSRunningConfiguration, hmPortMonitorIntfReset=hmPortMonitorIntfReset, hmNetSNTPServerOnlyIfSync=hmNetSNTPServerOnlyIfSync, hmSysSwitchRedundancyRstpMrpConfigError=hmSysSwitchRedundancyRstpMrpConfigError, hmRS2DisableLearningGroup=hmRS2DisableLearningGroup, hmNetVlanID=hmNetVlanID, hmSelfTestCpuResult=hmSelfTestCpuResult, hmTrapDestIpMask=hmTrapDestIpMask, hmSfpRxPowerState=hmSfpRxPowerState, hmIGMPQuerierTransmitInterval=hmIGMPQuerierTransmitInterval, hmPSProductCode=hmPSProductCode, hmIngressLimiterMode=hmIngressLimiterMode, hmSysGroupIsolateMode=hmSysGroupIsolateMode, hmFSActionResult=hmFSActionResult, ms2108_2=ms2108_2, hmNetSNTPAcceptBroadcasts=hmNetSNTPAcceptBroadcasts, hmLEDRSRedundancyManager=hmLEDRSRedundancyManager, hmAgentSnmpLogGetRequest=hmAgentSnmpLogGetRequest, hmIGMPSnoopAgingTime=hmIGMPSnoopAgingTime, hmRS2ConnectionMirroringPortTwo=hmRS2ConnectionMirroringPortTwo, hmNetPTP2TCPortTable=hmNetPTP2TCPortTable, hmNetGPSIsAvailable=hmNetGPSIsAvailable, hmIGMPSnoopFilterLearntPorts=hmIGMPSnoopFilterLearntPorts, hmPrioTosToPrioEntry=hmPrioTosToPrioEntry, hmLEDRSPowerSupply=hmLEDRSPowerSupply, hmRelayOption82Status=hmRelayOption82Status, hmNetPTPStepsRemoved=hmNetPTPStepsRemoved, hmNetGPSMode=hmNetGPSMode, hmLastIpAddr=hmLastIpAddr, hmNetHiDiscoveryRelay=hmNetHiDiscoveryRelay, hmLastLoginUserName=hmLastLoginUserName, hmAgentSnmpCommunityName=hmAgentSnmpCommunityName, hmTrapCommState=hmTrapCommState, hmNetGPSIsSynchronized=hmNetGPSIsSynchronized, hmIGMPSnoopForwardAllEntry=hmIGMPSnoopForwardAllEntry, hmModuleMapChange=hmModuleMapChange, rs2_4r=rs2_4r, hmSfpTemperature=hmSfpTemperature, hmConfigWatchdogGroup=hmConfigWatchdogGroup, hmNetPTPGrandmasterUUID=hmNetPTPGrandmasterUUID, hmEtherNetIPRevisionMajor=hmEtherNetIPRevisionMajor, hmNetPTP2Group=hmNetPTP2Group, hmNetPTP2LogSyncInterval=hmNetPTP2LogSyncInterval, hmSystemTime=hmSystemTime, hmNetPPPBaseIPAddr=hmNetPPPBaseIPAddr, hmTempUprLimit=hmTempUprLimit, hmIfaceUtilizationControlInterval=hmIfaceUtilizationControlInterval, hmRelayPktClientRelayCnt=hmRelayPktClientRelayCnt, hmGroupMapChange=hmGroupMapChange, hmAutoconfigAdapterTrap=hmAutoconfigAdapterTrap, hmAUIModuleTable=hmAUIModuleTable, hmSysGroupSerialNum=hmSysGroupSerialNum, hmTrunkTable=hmTrunkTable, hmIGMPSnoopForwardAllVlanIndex=hmIGMPSnoopForwardAllVlanIndex, rs2_16=rs2_16, hmTrapDestIpAddress=hmTrapDestIpAddress, hmSelfTestMode=hmSelfTestMode, hmRS4RVlanPortEntry=hmRS4RVlanPortEntry, hmTrapGroup=hmTrapGroup, hmSigLinkTable=hmSigLinkTable, hmFanID=hmFanID, hmSelfTestM4Result=hmSelfTestM4Result, hmPortMonitorPortDisabledTrap=hmPortMonitorPortDisabledTrap, rs30=rs30, hmSigConSenseModuleRemoval=hmSigConSenseModuleRemoval, hmRS2ConfigError=hmRS2ConfigError, hmSfpID=hmSfpID, LEDState=LEDState, hmAgentSnmpCommunityIPMask=hmAgentSnmpCommunityIPMask, hmNetPTPPortEntry=hmNetPTPPortEntry, hmNetPTP2ObservedParentOffsetScaledLogVariance=hmNetPTP2ObservedParentOffsetScaledLogVariance, hmNetPTP2LogAnnounceInterval=hmNetPTP2LogAnnounceInterval, hmDevMonSenseRedNotGuaranteed=hmDevMonSenseRedNotGuaranteed, hmFan=hmFan, hmSfpInfoMagic=hmSfpInfoMagic, hmSigConRelayChange=hmSigConRelayChange, hmFSFileSize=hmFSFileSize, hmNetNTPStatusCode=hmNetNTPStatusCode, hmRMASrvSnmp=hmRMASrvSnmp, hmLoginTrap=hmLoginTrap, hmSfpPartNumber=hmSfpPartNumber, hmIngressUnknUcLimiterGroup=hmIngressUnknUcLimiterGroup, hmSysSwitchGroup=hmSysSwitchGroup, hmNetPTPClockStratum=hmNetPTPClockStratum, hmNetPTPleap61=hmNetPTPleap61, hmNetIpDscpPriority=hmNetIpDscpPriority, hmEgressLimiterGroup=hmEgressLimiterGroup, ms3124_4=ms3124_4, hmFSFileName=hmFSFileName, hmIGMPSnoopStatus=hmIGMPSnoopStatus, hmIGMPSnoopFilterVlanIndex=hmIGMPSnoopFilterVlanIndex, hmNetLocalPhysAddr=hmNetLocalPhysAddr, hmAutoconfigGroup=hmAutoconfigGroup, hmSysGroupCapacity=hmSysGroupCapacity, hmNetPTPPortID=hmNetPTPPortID, hmCpuResources=hmCpuResources, hmTrapCommAuthentication=hmTrapCommAuthentication, hmSelfTestM2Result=hmSelfTestM2Result, hmRS4RVlanPortTable=hmRS4RVlanPortTable, hmAuthHostTableEntriesMax=hmAuthHostTableEntriesMax, hmRS2SigRelayState=hmRS2SigRelayState, hmRS2PSAlarm=hmRS2PSAlarm, hmNetPTPPortState=hmNetPTPPortState, hmTrapDestIndex=hmTrapDestIndex, hmIGMPSnoop=hmIGMPSnoop, hmMulticast=hmMulticast, hmTrapDestTable=hmTrapDestTable, hmRelayIfaceID=hmRelayIfaceID, hmSysSwitchRedundancyRstpMrpConfigErrorBridge=hmSysSwitchRedundancyRstpMrpConfigErrorBridge, hmConfigWatchdogTimerValue=hmConfigWatchdogTimerValue, hmNeighbourAgentTable=hmNeighbourAgentTable, hmSysModuleEntry=hmSysModuleEntry, hmConfigurationChangedTrap=hmConfigurationChangedTrap, hmTrunkInterfaces=hmTrunkInterfaces, hmNetACDProtectInterval=hmNetACDProtectInterval, mach4002_48G_3X=mach4002_48G_3X, hmNetPTP2TwoStepClock=hmNetPTP2TwoStepClock, hmGMRPGroup=hmGMRPGroup, hmSigConLinkEntry=hmSigConLinkEntry, hmNetPTP2AnnounceReceiptTimeout=hmNetPTP2AnnounceReceiptTimeout, hmSysSkipAcaOnBoot=hmSysSkipAcaOnBoot, hmSysModNumOfPorts=hmSysModNumOfPorts, hmNetPTP2TCDelayAsymmetry=hmNetPTP2TCDelayAsymmetry, hmAction=hmAction, hmSysTelnetEnable=hmSysTelnetEnable, hmNetPTP2GrandmasterIdentity=hmNetPTP2GrandmasterIdentity, hmFSAction=hmFSAction, hmEtherNetIPCatalogName=hmEtherNetIPCatalogName, hmNetPTP2PeerMeanPathDelay=hmNetPTP2PeerMeanPathDelay, hmTrapCommLinkDown=hmTrapCommLinkDown, PTPTimeInterval=PTPTimeInterval, hmPortMonitorConditionCrcFragmentsGroup=hmPortMonitorConditionCrcFragmentsGroup, hmLEDRSRStandby=hmLEDRSRStandby, hmTemperatureTrap=hmTemperatureTrap, hmRS2VlanStatus=hmRS2VlanStatus, hmDevMonSensePS1State=hmDevMonSensePS1State, ms4128_5=ms4128_5, hmSigConSenseControlLine=hmSigConSenseControlLine, hmMemoryAllocated=hmMemoryAllocated, hmSysStpEnable=hmSysStpEnable, hmPortMonitorConditionLinkFlapCount=hmPortMonitorConditionLinkFlapCount, hmNetPTP2ParentPortIdentity=hmNetPTP2ParentPortIdentity, hmRelayIfaceGroupID=hmRelayIfaceGroupID, hmSelfTestBPResult=hmSelfTestBPResult, hmNetSNTPAnycastVlan=hmNetSNTPAnycastVlan, hmAgentSnmpTrapReceiverStatus=hmAgentSnmpTrapReceiverStatus, hmIfaceFlowControl=hmIfaceFlowControl, PTPClockQuality=PTPClockQuality, hmLEDRSFault=hmLEDRSFault, hmAgentSnmpBroadcastStormTrapFlag=hmAgentSnmpBroadcastStormTrapFlag, hmPortMonitorConditionCrcFragmentsCountInterval=hmPortMonitorConditionCrcFragmentsCountInterval, hmAgentSnmpCommunityIndex=hmAgentSnmpCommunityIndex, hmAgentSnmpLogSetRequest=hmAgentSnmpLogSetRequest, hmPrioMACAddressEnable=hmPrioMACAddressEnable, hmNetSNTPAnycastInterval=hmNetSNTPAnycastInterval, hmNetPTP2DelayAsymmetry=hmNetPTP2DelayAsymmetry, hmSysMaxPowerSupply=hmSysMaxPowerSupply, hmEthernetIPConfigGroup=hmEthernetIPConfigGroup, hmNetNTPAnycastAddress=hmNetNTPAnycastAddress, hmTrunkLastChange=hmTrunkLastChange, hmNetACDReleaseDelay=hmNetACDReleaseDelay, hmSysSwitchDuplexMismatchDetection=hmSysSwitchDuplexMismatchDetection, hmNetPTP2FrequencyTraceable=hmNetPTP2FrequencyTraceable, hmSerialNumCpu=hmSerialNumCpu, hmIfaceEgressLimiterRate=hmIfaceEgressLimiterRate, hmNetPTP2TCDelayMechanism=hmNetPTP2TCDelayMechanism, hmRMAOperation=hmRMAOperation, hmSfpTransceiver=hmSfpTransceiver, hmAuthCommEntry=hmAuthCommEntry, hmGmrpUnknownMode=hmGmrpUnknownMode, hmIGMPQuerierGroup=hmIGMPQuerierGroup, hmSerialNumBP=hmSerialNumBP, hmPOEScanning=hmPOEScanning, hmNetPTP2VersionNumber=hmNetPTP2VersionNumber, hmPortMonitorConditionCrcFragmentsInterval=hmPortMonitorConditionCrcFragmentsInterval, hmSysBOOTPEnable=hmSysBOOTPEnable, hmFSFileDate=hmFSFileDate, hmFSLogFileName=hmFSLogFileName)
mibBuilder.exportSymbols("HMPRIV-MGMT-SNMP-MIB", hmNetPTP2LogPdelayReqInterval=hmNetPTP2LogPdelayReqInterval, hmEtherNetIPAdminStatus=hmEtherNetIPAdminStatus, hmPNIODcpModeEntry=hmPNIODcpModeEntry, hmDevMonSenseACARemoval=hmDevMonSenseACARemoval, hmIfacePriorityThreshold=hmIfacePriorityThreshold, hmNetSNMPAccessStatus=hmNetSNMPAccessStatus, hmSysGroupAction=hmSysGroupAction, hmAuthCommName=hmAuthCommName, hmIfaceGroupID=hmIfaceGroupID, hmPrioVlan0TagTransparentMode=hmPrioVlan0TagTransparentMode, hmPOEPortTable=hmPOEPortTable, hmAutoconfigAdapterStatus=hmAutoconfigAdapterStatus, hmRelayDuplicateIPTrap=hmRelayDuplicateIPTrap, hmNetACDNotification=hmNetACDNotification, hmFSLastMessage=hmFSLastMessage, hmSysHTTPEnable=hmSysHTTPEnable, hmIfaceCapability=hmIfaceCapability, hmPSType=hmPSType, hmSysModSerialNum=hmSysModSerialNum, hmInterfaceTable=hmInterfaceTable, hmNetPTP2GrandmasterPriority1=hmNetPTP2GrandmasterPriority1, hmSysModDescription=hmSysModDescription, hmNetPTPCurrentUTCOffset=hmNetPTPCurrentUTCOffset, hmNetPTP2TCConfiguration=hmNetPTP2TCConfiguration, hmSigConTrapEnable=hmSigConTrapEnable, hmNetPTP2ClockIdentity=hmNetPTP2ClockIdentity, hmAgentSnmpTrapReceiverConfigTable=hmAgentSnmpTrapReceiverConfigTable, hmSfpSupported=hmSfpSupported, hmPortMonitorConditionLinkFlapCountInterval=hmPortMonitorConditionLinkFlapCountInterval, hmAuthCommTableEntriesMax=hmAuthCommTableEntriesMax, hmRelayIfaceBCRequestFwd=hmRelayIfaceBCRequestFwd, hmRMASrvSsh=hmRMASrvSsh, hmAuthHostState=hmAuthHostState, hmPNIODcpModeTable=hmPNIODcpModeTable, hmEtherNetIPProductCode=hmEtherNetIPProductCode, hmDIPSwitchRSRedundancyManager=hmDIPSwitchRSRedundancyManager, hmNetGPSTimeStringFormat=hmNetGPSTimeStringFormat, hmRelayMCPktInCnt=hmRelayMCPktInCnt, hmSignallingRelay=hmSignallingRelay, hmSigTrapReason=hmSigTrapReason, hmConfigWatchdogTimeInterval=hmConfigWatchdogTimeInterval, hmSigConSenseACARemoval=hmSigConSenseACARemoval, hmPortMonitorConditionLinkFlapGroup=hmPortMonitorConditionLinkFlapGroup, hmAgentSnmpTrapFlagsConfigGroup=hmAgentSnmpTrapFlagsConfigGroup, hmSysModID=hmSysModID, hmRS2FDBHashOptimizingMode=hmRS2FDBHashOptimizingMode, hmNetPTPObservedDrift=hmNetPTPObservedDrift, hmPOEGlobalGroup=hmPOEGlobalGroup, osb20=osb20, hirschmann=hirschmann, hmIfaceTrunkID=hmIfaceTrunkID, hmTrapCommCommIndex=hmTrapCommCommIndex, hmSfpGroupID=hmSfpGroupID, hmSfpMaxLength_copper=hmSfpMaxLength_copper, hmRS4RVlanPortTagFormatRstp=hmRS4RVlanPortTagFormatRstp, hmNetSNTPClientStatus=hmNetSNTPClientStatus, hmIngressLimiterEnable=hmIngressLimiterEnable, hmPOEModuleTable=hmPOEModuleTable, mach4002_48_4G=mach4002_48_4G, mach4002_48G=mach4002_48G, hmPrioTTPTos=hmPrioTTPTos, hmRelayBCPktInCnt=hmRelayBCPktInCnt, hmNetNTPGroup=hmNetNTPGroup, hmDevMonConfigTable=hmDevMonConfigTable, hmTrapCommUsergroup=hmTrapCommUsergroup, hmNetPTP2CurrentUtcOffsetValid=hmNetPTP2CurrentUtcOffsetValid, hmPortMonitorConditionCrcFragmentsIntfTable=hmPortMonitorConditionCrcFragmentsIntfTable, hmDevMonSenseACANotInSync=hmDevMonSenseACANotInSync, hmSysModFirstMauIndex=hmSysModFirstMauIndex, hmSysSelftestRebootOnError=hmSysSelftestRebootOnError, hmDeviceMonitoringGroup=hmDeviceMonitoringGroup, hmSerialNumM3=hmSerialNumM3, hmNetPTPClockMode=hmNetPTPClockMode, hmSysSwitchServiceVlan=hmSysSwitchServiceVlan, hmSysSelftestRebootOnErrorTrap=hmSysSelftestRebootOnErrorTrap, hmIfacePrioTOSEnable=hmIfacePrioTOSEnable, hmMACH3Misc=hmMACH3Misc, hmNetSNTPServerStatus=hmNetSNTPServerStatus, hmIGMPSnoopUnknownLookupInterval=hmIGMPSnoopUnknownLookupInterval, hmDIPSwitchMICEConfig=hmDIPSwitchMICEConfig, hmRelayPktServerRelayCnt=hmRelayPktServerRelayCnt, hmAgentSnmpTrapReceiverMaxEntries=hmAgentSnmpTrapReceiverMaxEntries, mach1000ge=mach1000ge, hmPortMonitorConditionCrcFragmentsMode=hmPortMonitorConditionCrcFragmentsMode, hmNetSNMPGroup=hmNetSNMPGroup, hmAgentSnmpMultipleUsersTrapFlag=hmAgentSnmpMultipleUsersTrapFlag, hmLEDRSRRedundancyManager=hmLEDRSRRedundancyManager, hmPSState=hmPSState, hmFanTable=hmFanTable, hmFwdPriorityConfiguration=hmFwdPriorityConfiguration, PYSNMP_MODULE_ID=hmConfiguration, hmDIPSwitchGroup=hmDIPSwitchGroup, hmNetACDDelay=hmNetACDDelay, hmNetHiDiscoveryStatus=hmNetHiDiscoveryStatus, hmSigConSenseLinkFailure=hmSigConSenseLinkFailure, hmEthernetIPStatisticsGroup=hmEthernetIPStatisticsGroup, hmSysGroupDescription=hmSysGroupDescription, ms30=ms30, hmTrapDestCommIndex=hmTrapDestCommIndex, hmSysSelftestRebootOnHdxError=hmSysSelftestRebootOnHdxError, hmPrioTTPPrio=hmPrioTTPPrio, hmSigConSensePS1State=hmSigConSensePS1State, hmLEDOctRedundancyManager=hmLEDOctRedundancyManager, hmIGMPSnoopFilterAddress=hmIGMPSnoopFilterAddress, PTPPortIdentity=PTPPortIdentity, hmPortMonitorConditionLinkFlapMode=hmPortMonitorConditionLinkFlapMode, hmNetACDStatus=hmNetACDStatus, hmRS2PartnerIpAddress=hmRS2PartnerIpAddress, hmPNIOSoftwareRelease=hmPNIOSoftwareRelease, hmNetACDAddrSubtype=hmNetACDAddrSubtype, hmSigConSensePS4State=hmSigConSensePS4State, hmDevMonSenseModuleRemoval=hmDevMonSenseModuleRemoval, hmSelfTestBBResult=hmSelfTestBBResult, hmPNIONameOfStation=hmPNIONameOfStation, hmPortMonitorIntfEntry=hmPortMonitorIntfEntry, hmChassisEvent=hmChassisEvent, hmPSEntry=hmPSEntry, hmSysModStatus=hmSysModStatus, hmPortMonitorIntfAction=hmPortMonitorIntfAction, hmNetHiDiscoveryGroup=hmNetHiDiscoveryGroup, hmNetPTPSyncLowerBound=hmNetPTPSyncLowerBound, hmRelayServerGroup=hmRelayServerGroup, hmPOEModuleDeliveredPower=hmPOEModuleDeliveredPower, hmLEDOctGroup=hmLEDOctGroup, hmRelayDHCPServer2IpAddr=hmRelayDHCPServer2IpAddr, hmSysGroupModuleCapacity=hmSysGroupModuleCapacity, hmDuplicateStaticAddressTrap=hmDuplicateStaticAddressTrap, hmMACH3ChassisExt=hmMACH3ChassisExt, hmTrapCommColdStart=hmTrapCommColdStart, hmDevMonSenseTemperature=hmDevMonSenseTemperature, hmConfigWatchdogIPAddress=hmConfigWatchdogIPAddress, hmPortMonitorAdminMode=hmPortMonitorAdminMode, hmPortMonitorConditionGroup=hmPortMonitorConditionGroup, hmDIPSwitchMICERingPort=hmDIPSwitchMICERingPort, hmIngressLimiterGroup=hmIngressLimiterGroup, hmSysMaxSignalContacts=hmSysMaxSignalContacts, hmPNIOHardwareRelease=hmPNIOHardwareRelease, hmDevMonTrapEnable=hmDevMonTrapEnable, hmBPDUGuardTrap=hmBPDUGuardTrap, hmRS2TopologyLinkID=hmRS2TopologyLinkID, hmIfacePhyFastLinkDetection=hmIfacePhyFastLinkDetection, hmAuthCommState=hmAuthCommState, hmPOEModuleEntry=hmPOEModuleEntry, hmPrioMACStatus=hmPrioMACStatus, hmSFPTable=hmSFPTable, hmNetPTPPreferredMaster=hmNetPTPPreferredMaster, hmAuthHostEntry=hmAuthHostEntry, hmIfaceEgressLimiterCalculationMode=hmIfaceEgressLimiterCalculationMode, hmNetPTPPortEnable=hmNetPTPPortEnable, hmIfaceAction=hmIfaceAction, hmNetPTP2TCManagement=hmNetPTP2TCManagement, hmNetPTPEnable=hmNetPTPEnable, hmSfpBitRate=hmSfpBitRate, hmSysGroupTable=hmSysGroupTable, hmRelayInterfaceTable=hmRelayInterfaceTable, hmEtherNetIPVendorObjRequests=hmEtherNetIPVendorObjRequests, hmRS2VlanMode=hmRS2VlanMode, hmNetNTPStatusText=hmNetNTPStatusText, hmRS2RedundancyGroup=hmRS2RedundancyGroup, hmAUIPortDTEPower=hmAUIPortDTEPower, hmNetPTP2TCSyntonized=hmNetPTP2TCSyntonized, hmPortMonitorConditionField=hmPortMonitorConditionField, hmStandby=hmStandby, hmAgentSnmpLogSetSeverity=hmAgentSnmpLogSetSeverity, hmSelfTestM1Result=hmSelfTestM1Result, hmIGMPSnoopQueryStaticTable=hmIGMPSnoopQueryStaticTable, hmAuthGroup=hmAuthGroup, hmSfpDateCode=hmSfpDateCode, hmIfaceID=hmIfaceID, hmMgmtBusSelected=hmMgmtBusSelected, hmSigConSensePS5State=hmSigConSensePS5State, hmTrunkOperStatus=hmTrunkOperStatus, hmSelftestError=hmSelftestError, hmAUIModuleID=hmAUIModuleID, hmIfaceCableCrossing=hmIfaceCableCrossing, hmAgentSnmpTrapReceiverConfigEntry=hmAgentSnmpTrapReceiverConfigEntry, eagle_mguard=eagle_mguard, hmTempTable=hmTempTable, hmInterfaceEntry=hmInterfaceEntry, hmNetACDTimeMark=hmNetACDTimeMark, hmSysGroupActionDelayPreset=hmSysGroupActionDelayPreset, hmNetPTPIsSynchronized=hmNetPTPIsSynchronized, hmIGMPSnoopUnknownMode=hmIGMPSnoopUnknownMode, hmSigLinkAlarm=hmSigLinkAlarm, hmSigConID=hmSigConID, hmSystemTimeSource=hmSystemTimeSource, hmSystemTable=hmSystemTable, hmNetPTP2GrandmasterClockClass=hmNetPTP2GrandmasterClockClass, hmCpuRunningProcesses=hmCpuRunningProcesses, hmRelayDHCPServerIpAddr=hmRelayDHCPServerIpAddr, hmNetNTPServer1AddrType=hmNetNTPServer1AddrType, hmSysGroupType=hmSysGroupType, hmPortMonitorConditionLinkFlapInterval=hmPortMonitorConditionLinkFlapInterval, hmIGMPSnoopUnknownLookupResponseTime=hmIGMPSnoopUnknownLookupResponseTime, hmLEDOctPowerSupply2=hmLEDOctPowerSupply2, hmDIPSwitchMICERedundancyManager=hmDIPSwitchMICERedundancyManager, hmNetACDMAC=hmNetACDMAC, hmSigLinkEntry=hmSigLinkEntry, hmLEDRSRPowerSupply=hmLEDRSRPowerSupply, hmDIPSwitchRSStandby=hmDIPSwitchRSStandby, hmSysModuleTable=hmSysModuleTable, hmNetSNTPStatus=hmNetSNTPStatus, hmNetSNMPv3EncryptionReadOnlyStatus=hmNetSNMPv3EncryptionReadOnlyStatus, hmPrioMACAddressEntry=hmPrioMACAddressEntry, hmNetACDAddr=hmNetACDAddr, hmFSTable=hmFSTable, mach100ge=mach100ge, hmSfpInfoPartId=hmSfpInfoPartId, hmNetPTP2DelayMechanism=hmNetPTP2DelayMechanism, mach100=mach100, hmFSUpdFileName=hmFSUpdFileName, hmLastPort=hmLastPort, hmIGMPSnoopQueryPorts=hmIGMPSnoopQueryPorts, hmAUIPortEntry=hmAUIPortEntry, hmPNIOOrderID9th=hmPNIOOrderID9th, mach4002_24G=mach4002_24G, hmNetPTPSubdomainName=hmNetPTPSubdomainName, hmSfpRxPowerdBm=hmSfpRxPowerdBm, hmIGMPSnoopQueryTable=hmIGMPSnoopQueryTable, hmPrioTrafficClassWeight=hmPrioTrafficClassWeight, hmRS2ConnectionMirroringGroup=hmRS2ConnectionMirroringGroup, hmNetNTPServer2Address=hmNetNTPServer2Address, hmLEDRSRFault=hmLEDRSRFault, hmIGMPSnoopUnknownAgingTime=hmIGMPSnoopUnknownAgingTime, rs20=rs20, hmNetwork=hmNetwork, hmIGMPQuerierMaxResponseTime=hmIGMPQuerierMaxResponseTime, hmLEDOctPowerSupply1=hmLEDOctPowerSupply1, hmPNIODcpMode=hmPNIODcpMode, hmTrunkName=hmTrunkName, hmNetPTP2TCVlanID=hmNetPTP2TCVlanID, hmAgentSnmpTrapReceiverIPAddress=hmAgentSnmpTrapReceiverIPAddress, hmSysSwitchAddressRelearnDetection=hmSysSwitchAddressRelearnDetection, hmSfpMaxLength_fiber_50=hmSfpMaxLength_fiber_50, hmTrapCommTableEntriesMax=hmTrapCommTableEntriesMax, hmNetPTP2PortEntry=hmNetPTP2PortEntry, hmPortMonitorConditionLinkFlapCountTotal=hmPortMonitorConditionLinkFlapCountTotal, hmNetPTPStaticDrift=hmNetPTPStaticDrift, hmNetSNMPv3Status=hmNetSNMPv3Status, hmPOEModuleMaximumPower=hmPOEModuleMaximumPower, hmSigConSenseFan1State=hmSigConSenseFan1State, hmCurrentAddressStaticEgressPorts=hmCurrentAddressStaticEgressPorts, hmAUIPortTable=hmAUIPortTable, hmAuthHostIpMask=hmAuthHostIpMask, rsb20=rsb20, hmActionResult=hmActionResult, hmSigConSensePS6State=hmSigConSensePS6State, hmAgentSnmpLogGetSeverity=hmAgentSnmpLogGetSeverity, hmIGMPQuerierStatus=hmIGMPQuerierStatus, hmRS2SelftestGroup=hmRS2SelftestGroup, hmSysChassisName=hmSysChassisName, hmNetPTP2GrandmasterPriority2=hmNetPTP2GrandmasterPriority2, hmNeighbourAgentEntry=hmNeighbourAgentEntry, hmNeighbourSlot=hmNeighbourSlot)
mibBuilder.exportSymbols("HMPRIV-MGMT-SNMP-MIB", hmPOEPortConsumptionPower=hmPOEPortConsumptionPower, hmIGMPGroup=hmIGMPGroup, hmNetPTP2TCFaulty=hmNetPTP2TCFaulty, hmPNIODcpModePortID=hmPNIODcpModePortID, hmNetACDMaxProtection=hmNetACDMaxProtection, hmNetPTP2OffsetFromMaster=hmNetPTP2OffsetFromMaster, hmPNIOModuleIdentNumber=hmPNIOModuleIdentNumber, hmAddressRelearnDetectTrap=hmAddressRelearnDetectTrap, hmNetACDOngoingProbeStatus=hmNetACDOngoingProbeStatus, hmNetSNTPServer=hmNetSNTPServer, hmFanSysID=hmFanSysID, hmAgentSnmpPortSecurityTrapFlag=hmAgentSnmpPortSecurityTrapFlag, hmSysSTPErrorNumber=hmSysSTPErrorNumber, hmNetPTP2TimeTraceable=hmNetPTP2TimeTraceable, hmConfiguration=hmConfiguration, hmConfigurationStatus=hmConfigurationStatus, hmPNIODeviceID=hmPNIODeviceID, hmFSTPPassword=hmFSTPPassword, hmEtherNetIPConnTimeouts=hmEtherNetIPConnTimeouts, hmTrapCommBridge=hmTrapCommBridge, hmNetSNTPLocalOffset=hmNetSNTPLocalOffset, hmPOEModulePowerUsageOnNotification=hmPOEModulePowerUsageOnNotification, hmNetPTP2TCPrimaryDomain=hmNetPTP2TCPrimaryDomain, hmSigConSensePS8State=hmSigConSensePS8State, hmSigConLinkTable=hmSigConLinkTable, hmSfpInfoVersion=hmSfpInfoVersion, hmSerialNumM2=hmSerialNumM2, hmSigConSensePS7State=hmSigConSensePS7State, hmAgentEvent=hmAgentEvent, hmNetACDFaultState=hmNetACDFaultState, hmIngressUnknUcLimiterRate=hmIngressUnknUcLimiterRate, rr_epl=rr_epl, hmSysFlowControl=hmSysFlowControl, hmNetSNTPTimeAdjustThreshold=hmNetSNTPTimeAdjustThreshold, hmNetPTPOneWayDelayNanoSecs=hmNetPTPOneWayDelayNanoSecs, hmDevMonStateChange=hmDevMonStateChange, hmMemoryFree=hmMemoryFree, hmTrunkAction=hmTrunkAction, hmSFPEntry=hmSFPEntry, hmLEDRSRRelay1=hmLEDRSRRelay1, hmRS2FDBHashGroup=hmRS2FDBHashGroup, hmIGMPQuerierProtocolVersion=hmIGMPQuerierProtocolVersion, hmSysMaxFan=hmSysMaxFan, hmSigConTrapCause=hmSigConTrapCause, hmTrapCommRMON=hmTrapCommRMON, hmIGMPSnoopQueryStaticEntry=hmIGMPSnoopQueryStaticEntry, hmPOEPortEntry=hmPOEPortEntry, hmNetPTP2TimeSource=hmNetPTP2TimeSource, hmAuthHostIndex=hmAuthHostIndex, hmPOEModuleIndex=hmPOEModuleIndex, hmNetPTP2DomainNumber=hmNetPTP2DomainNumber, hmDevMonSensePS6State=hmDevMonSensePS6State, hmSysPlugAndPlay=hmSysPlugAndPlay, ruggedswitch=ruggedswitch, hmLimiterGroup=hmLimiterGroup, hmNetACDGroup=hmNetACDGroup, hmIGMPSnoopQuerierIPAddress=hmIGMPSnoopQuerierIPAddress, hmLEDGroup=hmLEDGroup, hmSfpMaxLength_fiber_9=hmSfpMaxLength_fiber_9, eagle=eagle, hmSfpConnector=hmSfpConnector, hmRMAIpAddr=hmRMAIpAddr, hmSysVersion=hmSysVersion, hmLEDRSRGroup=hmLEDRSRGroup, hmNetSNTPTime=hmNetSNTPTime, hmConfigWatchdogAdminStatus=hmConfigWatchdogAdminStatus, hmPSTable=hmPSTable, eem1=eem1, hmPOEStatus=hmPOEStatus, hmRS2RedNotGuaranteedAlarm=hmRS2RedNotGuaranteedAlarm, hmDevMonSensePS7State=hmDevMonSensePS7State, hmLEDRSRRelay2=hmLEDRSRRelay2, hmRelayGroup=hmRelayGroup, hmPrioMACAddressTable=hmPrioMACAddressTable, hmNetPPPNetMask=hmNetPPPNetMask, hmSysDHCPEnable=hmSysDHCPEnable, hmDIPSwitchMICEGroup=hmDIPSwitchMICEGroup, hmTrapDestTableEntriesMax=hmTrapDestTableEntriesMax, hmRelayOptionRemoteIDType=hmRelayOptionRemoteIDType, hmAgentSnmpLoggingGroup=hmAgentSnmpLoggingGroup, hmPOEPortIndex=hmPOEPortIndex, hmRS2ConnectionMirroringPortOne=hmRS2ConnectionMirroringPortOne, hmSysSwitchFDBHashOptimizingMode=hmSysSwitchFDBHashOptimizingMode, hmAuthCommIndex=hmAuthCommIndex, hmRMARowStatus=hmRMARowStatus, hmNetPTP2GrandmasterClockAccuracy=hmNetPTP2GrandmasterClockAccuracy, hmNetSNMPv1Status=hmNetSNMPv1Status, hmSigConSenseACANotInSync=hmSigConSenseACANotInSync, hmSfpTxPower=hmSfpTxPower, hmAgentSnmpCommunityAccessMode=hmAgentSnmpCommunityAccessMode, hmSysOEMID=hmSysOEMID, hmSysGroupActionResult=hmSysGroupActionResult, hmTrapCommTable=hmTrapCommTable, hmPNIOOrderID=hmPNIOOrderID, hmSysSwitchServiceModeGroup=hmSysSwitchServiceModeGroup, hmRelayIfaceCircuitID=hmRelayIfaceCircuitID, hmSysGroupActionDelayCurrent=hmSysGroupActionDelayCurrent, hmIfaceUtilization=hmIfaceUtilization, hmAutoConfigState=hmAutoConfigState, hmNetPTP2TCPortEnable=hmNetPTP2TCPortEnable, hmNetPTPPortBurstEnable=hmNetPTPPortBurstEnable, hmAuthHostTable=hmAuthHostTable, hmDevMonSensePS5State=hmDevMonSensePS5State, hmEnableMeasurement=hmEnableMeasurement, hmPortMonitorConditionCrcFragmentsCountTotal=hmPortMonitorConditionCrcFragmentsCountTotal, hmPSSysID=hmPSSysID, hmRelayInterfaceEntry=hmRelayInterfaceEntry, hmAgentSnmpChassisTrapFlag=hmAgentSnmpChassisTrapFlag, hmSerialNumBB=hmSerialNumBB, hmSFPRxPowerChangeTrap=hmSFPRxPowerChangeTrap, hmPortMonitorConditionCrcFragmentsIntfEntry=hmPortMonitorConditionCrcFragmentsIntfEntry, ms20=ms20, hmTrapCommLinkUp=hmTrapCommLinkUp, hmPOEModuleUsageThreshold=hmPOEModuleUsageThreshold, octopus_os=octopus_os, hmAgentSnmpLinkUpDownTrapFlag=hmAgentSnmpLinkUpDownTrapFlag, hmRestrictedMgtAccessGroup=hmRestrictedMgtAccessGroup, hmEtherNetIPRevisionMinor=hmEtherNetIPRevisionMinor, hmAgentSnmpL2RedundancyTrapFlag=hmAgentSnmpL2RedundancyTrapFlag, hmLEDRSGroup=hmLEDRSGroup, hmNetPTPSlavePort=hmNetPTPSlavePort, hmChassis=hmChassis, hmSysSelftestRAM=hmSysSelftestRAM, hmSysSwitchMRU=hmSysSwitchMRU, hmNetPTP2VlanID=hmNetPTP2VlanID, hmAuthHostIpAddress=hmAuthHostIpAddress, hmEgressLimiterEnable=hmEgressLimiterEnable, hmSigConSenseRedNotGuaranteed=hmSigConSenseRedNotGuaranteed, hmNetPTP2Leap61=hmNetPTP2Leap61, hmDevMonSenseLinkFailure=hmDevMonSenseLinkFailure, hmRS2SigRelayMode=hmRS2SigRelayMode, hmRMASrvTelnet=hmRMASrvTelnet, hmRS2TopologyGroup=hmRS2TopologyGroup, hmTrapDestEntry=hmTrapDestEntry, hmSFPChangeTrap=hmSFPChangeTrap, hmNetPTP2ParentStats=hmNetPTP2ParentStats, hmSysGroupSwVersion=hmSysGroupSwVersion, hmRS2SelftestMode=hmRS2SelftestMode, hmIfaceBcastLimit=hmIfaceBcastLimit, hmIGMPSnoopQueryStaticPorts=hmIGMPSnoopQueryStaticPorts, hmPOEModulePower=hmPOEModulePower, hmSysMaxTrunks=hmSysMaxTrunks, hmSysSwitchFDBHashOptimizingStatus=hmSysSwitchFDBHashOptimizingStatus, hmRS2TopologyEntry=hmRS2TopologyEntry, hmPOEModuleReservedPower=hmPOEModuleReservedPower, hmNetVlanPriority=hmNetVlanPriority, hmSysGroupID=hmSysGroupID, hmDevMonSenseControlLine=hmDevMonSenseControlLine, hmRS2ext=hmRS2ext, hmRMAEntry=hmRMAEntry, hmAgentLoginGroup=hmAgentLoginGroup, hmRS2FDBGroup=hmRS2FDBGroup, hmSerialNumM4=hmSerialNumM4, hmSysGroupHwVersion=hmSysGroupHwVersion, hmNetSNTPSyncInterval=hmNetSNTPSyncInterval, hmCpuUtilization=hmCpuUtilization, hmRelayOptionRemoteIDValue=hmRelayOptionRemoteIDValue, hmProfinetIOConfigGroup=hmProfinetIOConfigGroup, hmTrapDestName=hmTrapDestName, hmDevMonConfigEntry=hmDevMonConfigEntry, hmAuthCommTable=hmAuthCommTable, hmNeighbourIpAddress=hmNeighbourIpAddress, hmCurrentAddress=hmCurrentAddress, hmNetGPSGroup=hmNetGPSGroup, hmAgentSnmpCommunityCreate=hmAgentSnmpCommunityCreate, hmNetSNMPv3EncryptionReadWriteStatus=hmNetSNMPv3EncryptionReadWriteStatus, hmCpuAverageUtilization=hmCpuAverageUtilization, hmPowerSupply=hmPowerSupply, hmSysSwitchServiceMode=hmSysSwitchServiceMode, hmRS2DisableLearningStatus=hmRS2DisableLearningStatus, hmAUIModuleDTEPowerMonitor=hmAUIModuleDTEPowerMonitor, hmSigConSenseTemperature=hmSigConSenseTemperature, hmPOEModuleNotificationControlEnable=hmPOEModuleNotificationControlEnable, hmNetGatewayIPAddr=hmNetGatewayIPAddr, hmIfaceStpBpduGuardEnable=hmIfaceStpBpduGuardEnable, hmNetPTP2PortEnable=hmNetPTP2PortEnable, hmDuplexMismatchTrap=hmDuplexMismatchTrap, hmSigConConfigEntry=hmSigConConfigEntry, hmCurrentAddressEgressPorts=hmCurrentAddressEgressPorts, hmNetPTPPiIntegral=hmNetPTPPiIntegral, hmSigReasonIndex=hmSigReasonIndex, hmSerialNumM1=hmSerialNumM1, hmPrioMACAddress=hmPrioMACAddress, hmNetSNMPv2Status=hmNetSNMPv2Status, hmNetworkCpuIfAverageUtilization=hmNetworkCpuIfAverageUtilization, hmAgentSnmpCommunityIPAddress=hmAgentSnmpCommunityIPAddress, hmSigConLinkAlarm=hmSigConLinkAlarm, hmDevMonID=hmDevMonID, hmIfaceUtilizationTrap=hmIfaceUtilizationTrap, hmSysSwitchLearning=hmSysSwitchLearning, hmSfpSerialNum=hmSfpSerialNum, hmNetPTPAbsMaxOffset=hmNetPTPAbsMaxOffset, hmEtherNetIPConnEstablished=hmEtherNetIPConnEstablished, hmSysSwitchVLANLearningMode=hmSysSwitchVLANLearningMode, hmNetNTPOperation=hmNetNTPOperation, hmSfpPartRev=hmSfpPartRev, hmPrioTrafficClassID=hmPrioTrafficClassID, hmNetSNTPAnycastAddr=hmNetSNTPAnycastAddr, BridgeIdOrNull=BridgeIdOrNull, hmIngressUnknUcLimiterCalculationMode=hmIngressUnknUcLimiterCalculationMode, hmSigConTrapCauseIndex=hmSigConTrapCauseIndex, hmMemoryAllocatedAverage=hmMemoryAllocatedAverage, hmNetNTPSyncInterval=hmNetNTPSyncInterval, hmSigConSensePS2State=hmSigConSensePS2State, hmPortMonitorGroup=hmPortMonitorGroup, hmPSDescription=hmPSDescription, hmNetACDIfId=hmNetACDIfId, hmLEDOctFault=hmLEDOctFault, hmDIPSwitchMICEStandby=hmDIPSwitchMICEStandby, hmAgentSnmpConfigGroup=hmAgentSnmpConfigGroup, hmRS2SelftestResult=hmRS2SelftestResult, hmPrioTrafficClassEntry=hmPrioTrafficClassEntry, hmPOEModulePowerUsageOffNotification=hmPOEModulePowerUsageOffNotification, hmNetPTP2CurrentUtcOffset=hmNetPTP2CurrentUtcOffset, hmNetPTP2LogDelayReqInterval=hmNetPTP2LogDelayReqInterval, hmNetPTP2Leap59=hmNetPTP2Leap59, hmSysSwitchFastLinkDetection=hmSysSwitchFastLinkDetection, hmSysMaxUSBPorts=hmSysMaxUSBPorts, railswitchrugged=railswitchrugged, hmPrioTosToPrioTable=hmPrioTosToPrioTable, hmNetMask=hmNetMask, hmTrapCommChassis=hmTrapCommChassis, hmRelayLastDuplicateIP=hmRelayLastDuplicateIP, hmSysModVersion=hmSysModVersion, hmSysSwitchServiceModeOperState=hmSysSwitchServiceModeOperState, hmNetPTPEpochNumber=hmNetPTPEpochNumber, hmSerialNumbers=hmSerialNumbers, hmIfaceStpEnable=hmIfaceStpEnable, hmRMATable=hmRMATable, hmAgentSnmpTrapReceiverCreate=hmAgentSnmpTrapReceiverCreate, hmAgentSnmpTrapReceiverCommunityName=hmAgentSnmpTrapReceiverCommunityName, eagle20=eagle20, hmIfaceUtilizationAlarmLowerThreshold=hmIfaceUtilizationAlarmLowerThreshold, hmAUIPortID=hmAUIPortID, hmIfaceUtilizationAlarmUpperThreshold=hmIfaceUtilizationAlarmUpperThreshold, hmTrapCommDualHoming=hmTrapCommDualHoming, hmAgentSnmpCommunityConfigEntry=hmAgentSnmpCommunityConfigEntry, hmIndustrialEthernetProtocols=hmIndustrialEthernetProtocols, hmNetSNTPOnceAtStartup=hmNetSNTPOnceAtStartup, hmGMRP=hmGMRP, hmLastAccessGroup=hmLastAccessGroup, hmFanState=hmFanState, hmNetPTP2GrandmasterClockQuality=hmNetPTP2GrandmasterClockQuality, hmFSConfFileName=hmFSConfFileName, hmFSFileTable=hmFSFileTable, hmIGMPSnoopForwardAllTable=hmIGMPSnoopForwardAllTable, hmSigConConfigTable=hmSigConConfigTable, hmSfpMaxLength_fiber_62_5=hmSfpMaxLength_fiber_62_5, hmSigConManualActivate=hmSigConManualActivate, hmNetPTP2TCPortEntry=hmNetPTP2TCPortEntry, hmRMASrvHttp=hmRMASrvHttp, hmSysSwitchVLANGroup=hmSysSwitchVLANGroup, hmPortMonitorConditionTable=hmPortMonitorConditionTable, hmRS2TopologyIpAddress=hmRS2TopologyIpAddress)
mibBuilder.exportSymbols("HMPRIV-MGMT-SNMP-MIB", hmNetPTP2TCPeerMeanPathDelay=hmNetPTP2TCPeerMeanPathDelay, hmNetSNMPRadiusAuthenticate=hmNetSNMPRadiusAuthenticate, hmPOEReservedPower=hmPOEReservedPower, hmNetPTP2TCNetworkProtocol=hmNetPTP2TCNetworkProtocol, hmSelfTestM3Result=hmSelfTestM3Result, hmAuthHostName=hmAuthHostName, hmAutoconfigAdapterSerialNum=hmAutoconfigAdapterSerialNum, hmNetACDAddrTable=hmNetACDAddrTable, hmNetPTPConfiguration=hmNetPTPConfiguration, hmPNIOAdminStatus=hmPNIOAdminStatus, hmTrunkEntry=hmTrunkEntry, hmSfpVendorName=hmSfpVendorName, hmNetPTP2PtpTimescale=hmNetPTP2PtpTimescale, hmNetPTP2VlanPriority=hmNetPTP2VlanPriority, hmRS2PSGroup=hmRS2PSGroup, hmDevMonSwitchState=hmDevMonSwitchState, hmIGMPQuerierMode=hmIGMPQuerierMode, hmRS2TopologyTable=hmRS2TopologyTable, hmPOEGroup=hmPOEGroup, hmRS4RVlanPortID=hmRS4RVlanPortID, hmNetLocalIPAddr=hmNetLocalIPAddr, hmIGMPSnoopQueryEntry=hmIGMPSnoopQueryEntry, hmAuthCommPerm=hmAuthCommPerm, hmSysOEMGroup=hmSysOEMGroup, hmRS2VlanGroup=hmRS2VlanGroup, hmIGMPSnoopQueryStaticAutomaticPorts=hmIGMPSnoopQueryStaticAutomaticPorts, hmMemoryResources=hmMemoryResources, hmIfaceName=hmIfaceName, hmAUIGroup=hmAUIGroup, hmSigConSensePS3State=hmSigConSensePS3State, hmTrapDestState=hmTrapDestState, hmSfpInfoPartNumber=hmSfpInfoPartNumber, hmAgentSnmpCommunityStatus=hmAgentSnmpCommunityStatus, hmIngressUnknUcLimiterMode=hmIngressUnknUcLimiterMode, hmIGMPSnoopFilterTable=hmIGMPSnoopFilterTable, hmIGMPSnoopForwardAllStaticPorts=hmIGMPSnoopForwardAllStaticPorts, hmTrunkID=hmTrunkID, hmRelayErrCnt=hmRelayErrCnt, hmConfigWatchdogOperStatus=hmConfigWatchdogOperStatus, hmNetworkCpuIfUtilization=hmNetworkCpuIfUtilization, hmIGMPSnoopFilterEntry=hmIGMPSnoopFilterEntry, hmAgentSnmpSpanningTreeTrapFlag=hmAgentSnmpSpanningTreeTrapFlag, hmRelayDHCPServer3IpAddr=hmRelayDHCPServer3IpAddr, hmCurrentAddressReceivePort=hmCurrentAddressReceivePort, hmNetPTPleap59=hmNetPTPleap59, hmProducts=hmProducts, hmPortMonitorConditionLinkFlapIntfTable=hmPortMonitorConditionLinkFlapIntfTable, hmRS2SigRelayManualState=hmRS2SigRelayManualState, hmNetPTP2GrandmasterClockVariance=hmNetPTP2GrandmasterClockVariance, hmNetPTP2PortCapability=hmNetPTP2PortCapability, hmDIPSwitchRSGroup=hmDIPSwitchRSGroup, hmNetSNTPOperStatus=hmNetSNTPOperStatus, hmRMANetMask=hmRMANetMask, hmAgent=hmAgent, hmTemperature=hmTemperature, hmPOEFastStartup=hmPOEFastStartup, hmConfigurationSavedTrap=hmConfigurationSavedTrap, hmIfaceIngressLimiterCalculationMode=hmIfaceIngressLimiterCalculationMode, hmDevMonTrapCauseIndex=hmDevMonTrapCauseIndex, hmSfpRxPower=hmSfpRxPower, rs2=rs2, hmSysSwitchFDBFullCounter=hmSysSwitchFDBFullCounter, hmNetNTPAnycastInterval=hmNetNTPAnycastInterval, hmNetPTP2TCClockIdentity=hmNetPTP2TCClockIdentity, hmNetNTPServer1Address=hmNetNTPServer1Address, hmEtherNetIPProductName=hmEtherNetIPProductName, hmNetPTPPortTable=hmNetPTPPortTable, hmNetPTP2Configuration=hmNetPTP2Configuration, hmPrioTOSEnable=hmPrioTOSEnable, hmNetPTPTimeSeconds=hmNetPTPTimeSeconds, hmNetPTP2Priority1=hmNetPTP2Priority1, hmProfinetIOStatisticsGroup=hmProfinetIOStatisticsGroup, hmRS2SigRelayGroup=hmRS2SigRelayGroup, hmPortMonitorConditionLinkFlapIntfEntry=hmPortMonitorConditionLinkFlapIntfEntry, hmIfaceUtilizationAlarmCondition=hmIfaceUtilizationAlarmCondition, hmSfpTxPowerdBm=hmSfpTxPowerdBm, hmNetPTPAction=hmNetPTPAction, hmIGMPSnoopQueryStaticVlanIndex=hmIGMPSnoopQueryStaticVlanIndex, hmNetPTP2TCVlanPriority=hmNetPTP2TCVlanPriority, hmSysSwitchVLANLearningStatus=hmSysSwitchVLANLearningStatus, hmSysGroupModuleMap=hmSysGroupModuleMap, hmNetPTP2TCMultiDomainMode=hmNetPTP2TCMultiDomainMode, hmPortMonitorIntfMode=hmPortMonitorIntfMode, hmSNTPTrap=hmSNTPTrap, hmAgentSnmpCommunityConfigTable=hmAgentSnmpCommunityConfigTable, hmNetPTPClockIdentifier=hmNetPTPClockIdentifier, hmPrioMACReceivePort=hmPrioMACReceivePort, DIPSwitchState=DIPSwitchState, hmSysSwitchAddressRelearnThreshold=hmSysSwitchAddressRelearnThreshold, hmSfpVendorOUI=hmSfpVendorOUI, hmSysModulePortCapacity=hmSysModulePortCapacity, hmSysSelftestGroup=hmSysSelftestGroup, hmNetPTPParentUUID=hmNetPTPParentUUID, hmIfaceLinkType=hmIfaceLinkType, hmPortMonitorConditionCrcFragmentsCount=hmPortMonitorConditionCrcFragmentsCount, hmPortMonitorConditionIntfEntry=hmPortMonitorConditionIntfEntry, hmNetPTPOffsetFromMasterNanoSecs=hmNetPTPOffsetFromMasterNanoSecs, hmTempLwrLimit=hmTempLwrLimit, hmSysSwitchRedundancyRstpMrpMode=hmSysSwitchRedundancyRstpMrpMode, hmEtherNetIPErrorCode=hmEtherNetIPErrorCode, hmSigConOperState=hmSigConOperState, hmNetPTPSyncInterval=hmNetPTPSyncInterval, hmRS2FDBHashOptimizingStatus=hmRS2FDBHashOptimizingStatus, hmSysHttpsEnable=hmSysHttpsEnable, hmIGMPSnoopQueryVlanIndex=hmIGMPSnoopQueryVlanIndex, hmDevMonSensePS2State=hmDevMonSensePS2State, hmNetLocalPhysAddrRange=hmNetLocalPhysAddrRange, hmSysSoftwareCapability=hmSysSoftwareCapability, hmNetPTP2TCCurrentMaster=hmNetPTP2TCCurrentMaster, hmNetNTPAnycastAddrType=hmNetNTPAnycastAddrType, hmNetSNTPServer2=hmNetSNTPServer2, hmIfaceStpBpduGuardStatus=hmIfaceStpBpduGuardStatus, hmIfaceIngressLimiterRate=hmIfaceIngressLimiterRate, hmAuthHostCommIndex=hmAuthHostCommIndex, hmNTPTrap=hmNTPTrap, hmSfpTxPowerInt=hmSfpTxPowerInt, hmNetPTP2Priority2=hmNetPTP2Priority2, hmSysSelftestMMUStatus=hmSysSelftestMMUStatus, hmFSFileEntry=hmFSFileEntry, hmSigConLinkID=hmSigConLinkID, hmDevMonSensePS4State=hmDevMonSensePS4State, hmNetPTP2MeanPathDelay=hmNetPTP2MeanPathDelay, hmTrunkAdminStatus=hmTrunkAdminStatus, hmRS4RVlanGroup=hmRS4RVlanGroup, hmNetPTP2NetworkProtocol=hmNetPTP2NetworkProtocol, hmNetSNMPPortNumber=hmNetSNMPPortNumber, hmRS2ConnectionMirroringStatus=hmRS2ConnectionMirroringStatus, hmSysModType=hmSysModType, hmNetSNMPSynchronizeV1V3Status=hmNetSNMPSynchronizeV1V3Status, hmCurrentAddressEntry=hmCurrentAddressEntry, hmNetNTPServer2AddrType=hmNetNTPServer2AddrType, hmRS4RGroup=hmRS4RGroup, hmIfaceIngressLimiterMode=hmIfaceIngressLimiterMode)
