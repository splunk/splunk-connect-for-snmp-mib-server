#
# PySNMP MIB module Wellfleet-USER-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/Wellfleet-USER-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 21:35:32 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, OctetString, Integer = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "OctetString", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
SingleValueConstraint, ValueSizeConstraint, ValueRangeConstraint, ConstraintsIntersection, ConstraintsUnion = mibBuilder.importSymbols("ASN1-REFINEMENT", "SingleValueConstraint", "ValueSizeConstraint", "ValueRangeConstraint", "ConstraintsIntersection", "ConstraintsUnion")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
Integer32, ObjectIdentity, Bits, MibScalar, MibTable, MibTableRow, MibTableColumn, iso, Counter32, Counter64, Gauge32, NotificationType, ModuleIdentity, IpAddress, Unsigned32, MibIdentifier, TimeTicks = mibBuilder.importSymbols("SNMPv2-SMI", "Integer32", "ObjectIdentity", "Bits", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "iso", "Counter32", "Counter64", "Gauge32", "NotificationType", "ModuleIdentity", "IpAddress", "Unsigned32", "MibIdentifier", "TimeTicks")
TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString")
wfUserServicesGroup, = mibBuilder.importSymbols("Wellfleet-COMMON-MIB", "wfUserServicesGroup")
wfUserAccess = MibIdentifier((1, 3, 6, 1, 4, 1, 18, 3, 3, 2, 22, 1))
wfUserAccessDelete = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 3, 2, 22, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("created", 1), ("deleted", 2))).clone('created')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfUserAccessDelete.setStatus('mandatory')
wfUserAccessConfig = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 3, 2, 22, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('enabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfUserAccessConfig.setStatus('mandatory')
wfUserAccessRadius = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 3, 2, 22, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfUserAccessRadius.setStatus('mandatory')
wfUserAccessMaxLogin = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 3, 2, 22, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 16)).clone(16)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfUserAccessMaxLogin.setStatus('mandatory')
wfUserAccessMinLogin = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 3, 2, 22, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 16)).clone(4)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfUserAccessMinLogin.setStatus('mandatory')
wfUserAccessMaxGroup = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 3, 2, 22, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 16)).clone(16)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfUserAccessMaxGroup.setStatus('mandatory')
wfUserAccessMinGroup = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 3, 2, 22, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 16)).clone(4)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfUserAccessMinGroup.setStatus('mandatory')
wfUserAccessMaxPassword = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 3, 2, 22, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 16)).clone(16)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfUserAccessMaxPassword.setStatus('mandatory')
wfUserAccessMinPassword = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 3, 2, 22, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfUserAccessMinPassword.setStatus('mandatory')
wfUserManagerLock = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 3, 2, 22, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2), ("serverwait", 3))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfUserManagerLock.setStatus('mandatory')
wfUserAccessRadiusAcctEnable = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 3, 2, 22, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfUserAccessRadiusAcctEnable.setStatus('mandatory')
wfUserAccessNameTable = MibTable((1, 3, 6, 1, 4, 1, 18, 3, 3, 2, 22, 2), )
if mibBuilder.loadTexts: wfUserAccessNameTable.setStatus('mandatory')
wfUserAccessNameEntry = MibTableRow((1, 3, 6, 1, 4, 1, 18, 3, 3, 2, 22, 2, 1), ).setIndexNames((0, "Wellfleet-USER-MIB", "wfUserAccessNameId"))
if mibBuilder.loadTexts: wfUserAccessNameEntry.setStatus('mandatory')
wfUserAccessNameDelete = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 3, 2, 22, 2, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("created", 1), ("deleted", 2))).clone('created')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfUserAccessNameDelete.setStatus('mandatory')
wfUserAccessNameDisable = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 3, 2, 22, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('enabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfUserAccessNameDisable.setStatus('mandatory')
wfUserAccessNameId = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 3, 2, 22, 2, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfUserAccessNameId.setStatus('mandatory')
wfUserAccessNameName = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 3, 2, 22, 2, 1, 4), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfUserAccessNameName.setStatus('mandatory')
wfUserAccessNamePasswd = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 3, 2, 22, 2, 1, 5), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfUserAccessNamePasswd.setStatus('mandatory')
wfUserAccessNameGroups = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 3, 2, 22, 2, 1, 6), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfUserAccessNameGroups.setStatus('mandatory')
wfUserAccessNameAudit = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 3, 2, 22, 2, 1, 7), Integer32().clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfUserAccessNameAudit.setStatus('mandatory')
wfUserAccessNameScript = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 3, 2, 22, 2, 1, 8), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfUserAccessNameScript.setStatus('mandatory')
wfUserAccessActiveTable = MibTable((1, 3, 6, 1, 4, 1, 18, 3, 3, 2, 22, 3), )
if mibBuilder.loadTexts: wfUserAccessActiveTable.setStatus('mandatory')
wfUserAccessActiveEntry = MibTableRow((1, 3, 6, 1, 4, 1, 18, 3, 3, 2, 22, 3, 1), ).setIndexNames((0, "Wellfleet-USER-MIB", "wfUserAccessActiveLoginAddress"), (0, "Wellfleet-USER-MIB", "wfUserAccessActivePort"))
if mibBuilder.loadTexts: wfUserAccessActiveEntry.setStatus('mandatory')
wfUserAccessActiveDelete = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 3, 2, 22, 3, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("created", 1), ("deleted", 2))).clone('created')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfUserAccessActiveDelete.setStatus('mandatory')
wfUserAccessActiveDisable = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 3, 2, 22, 3, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('enabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfUserAccessActiveDisable.setStatus('mandatory')
wfUserAccessActiveId = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 3, 2, 22, 3, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfUserAccessActiveId.setStatus('mandatory')
wfUserAccessActiveLoginAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 3, 2, 22, 3, 1, 4), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfUserAccessActiveLoginAddress.setStatus('mandatory')
wfUserAccessActivePort = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 3, 2, 22, 3, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfUserAccessActivePort.setStatus('mandatory')
wfUserAccessActiveState = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 3, 2, 22, 3, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("active", 1), ("config", 2), ("ftp", 3))).clone('active')).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfUserAccessActiveState.setStatus('mandatory')
wfUserAccessActiveCmd = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 3, 2, 22, 3, 1, 7), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfUserAccessActiveCmd.setStatus('mandatory')
wfUserAccessActiveLastCmdTime = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 3, 2, 22, 3, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfUserAccessActiveLastCmdTime.setStatus('mandatory')
wfUserAccessActiveLoginTime = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 3, 2, 22, 3, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfUserAccessActiveLoginTime.setStatus('mandatory')
wfUserAccessActiveAcctInOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 3, 2, 22, 3, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfUserAccessActiveAcctInOctets.setStatus('mandatory')
wfUserAccessActiveAcctOutOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 3, 2, 22, 3, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfUserAccessActiveAcctOutOctets.setStatus('mandatory')
wfUserAccessActiveAcctAccessType = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 3, 2, 22, 3, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("console", 1), ("telnet", 2), ("ftp", 3))).clone('console')).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfUserAccessActiveAcctAccessType.setStatus('mandatory')
wfUserAccessActiveAcctTermCause = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 3, 2, 22, 3, 1, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfUserAccessActiveAcctTermCause.setStatus('mandatory')
wfUserAccessActiveAcctServiceType = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 3, 2, 22, 3, 1, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfUserAccessActiveAcctServiceType.setStatus('mandatory')
wfUserAccessActiveAcctNasPortType = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 3, 2, 22, 3, 1, 15), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfUserAccessActiveAcctNasPortType.setStatus('mandatory')
wfUserAccessActiveAcctPriv = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 3, 2, 22, 3, 1, 16), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfUserAccessActiveAcctPriv.setStatus('mandatory')
wfUserAccessGroupTable = MibTable((1, 3, 6, 1, 4, 1, 18, 3, 3, 2, 22, 4), )
if mibBuilder.loadTexts: wfUserAccessGroupTable.setStatus('mandatory')
wfUserAccessGroupEntry = MibTableRow((1, 3, 6, 1, 4, 1, 18, 3, 3, 2, 22, 4, 1), ).setIndexNames((0, "Wellfleet-USER-MIB", "wfUserAccessGroupNumber"))
if mibBuilder.loadTexts: wfUserAccessGroupEntry.setStatus('mandatory')
wfUserAccessGroupDelete = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 3, 2, 22, 4, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("created", 1), ("deleted", 2))).clone('created')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfUserAccessGroupDelete.setStatus('mandatory')
wfUserAccessGroupDisable = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 3, 2, 22, 4, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('enabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfUserAccessGroupDisable.setStatus('mandatory')
wfUserAccessGroupNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 3, 2, 22, 4, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfUserAccessGroupNumber.setStatus('mandatory')
wfUserAccessGroupName = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 3, 2, 22, 4, 1, 4), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfUserAccessGroupName.setStatus('mandatory')
wfUserAccessGroupPriv = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 3, 2, 22, 4, 1, 5), Integer32().clone(2)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfUserAccessGroupPriv.setStatus('mandatory')
wfUserAccessGroupAudit = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 3, 2, 22, 4, 1, 6), Integer32().clone(2)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfUserAccessGroupAudit.setStatus('mandatory')
wfUserAudit = MibIdentifier((1, 3, 6, 1, 4, 1, 18, 3, 3, 2, 22, 5))
wfUserAuditDelete = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 3, 2, 22, 5, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("created", 1), ("deleted", 2))).clone('created')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfUserAuditDelete.setStatus('mandatory')
wfUserAuditDisable = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 3, 2, 22, 5, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('enabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfUserAuditDisable.setStatus('mandatory')
wfUserAuditlevel = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 3, 2, 22, 5, 3), Integer32().clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfUserAuditlevel.setStatus('mandatory')
wfUserBccLock = MibIdentifier((1, 3, 6, 1, 4, 1, 18, 3, 3, 2, 22, 6))
wfUserBccLockDelete = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 3, 2, 22, 6, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("created", 1), ("deleted", 2))).clone('created')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfUserBccLockDelete.setStatus('mandatory')
wfUserBccLockId = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 3, 2, 22, 6, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfUserBccLockId.setStatus('mandatory')
wfUserBccLockTimer = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 3, 2, 22, 6, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfUserBccLockTimer.setStatus('mandatory')
wfUserBccLockAddress = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 3, 2, 22, 6, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfUserBccLockAddress.setStatus('mandatory')
wfUserBccLockPort = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 3, 2, 22, 6, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfUserBccLockPort.setStatus('mandatory')
wfUserBccConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 18, 3, 3, 2, 22, 7))
wfUserBccConfigDelete = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 3, 2, 22, 7, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("created", 1), ("deleted", 2))).clone('created')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfUserBccConfigDelete.setStatus('mandatory')
wfUserBccConfigDefaultShell = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 3, 2, 22, 7, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfUserBccConfigDefaultShell.setStatus('mandatory')
mibBuilder.exportSymbols("Wellfleet-USER-MIB", wfUserAccess=wfUserAccess, wfUserManagerLock=wfUserManagerLock, wfUserAccessNameEntry=wfUserAccessNameEntry, wfUserAccessActivePort=wfUserAccessActivePort, wfUserAccessNameGroups=wfUserAccessNameGroups, wfUserBccLockTimer=wfUserBccLockTimer, wfUserBccConfigDelete=wfUserBccConfigDelete, wfUserAccessMaxLogin=wfUserAccessMaxLogin, wfUserAccessMinLogin=wfUserAccessMinLogin, wfUserAccessNameScript=wfUserAccessNameScript, wfUserAccessActiveLoginAddress=wfUserAccessActiveLoginAddress, wfUserAccessGroupTable=wfUserAccessGroupTable, wfUserAuditlevel=wfUserAuditlevel, wfUserBccLockId=wfUserBccLockId, wfUserAccessGroupAudit=wfUserAccessGroupAudit, wfUserAccessGroupDisable=wfUserAccessGroupDisable, wfUserAccessMaxGroup=wfUserAccessMaxGroup, wfUserAccessActiveAcctTermCause=wfUserAccessActiveAcctTermCause, wfUserAuditDisable=wfUserAuditDisable, wfUserAccessNameName=wfUserAccessNameName, wfUserAccessNameAudit=wfUserAccessNameAudit, wfUserAccessGroupName=wfUserAccessGroupName, wfUserAccessActiveLoginTime=wfUserAccessActiveLoginTime, wfUserAccessActiveId=wfUserAccessActiveId, wfUserAccessMinPassword=wfUserAccessMinPassword, wfUserAccessNamePasswd=wfUserAccessNamePasswd, wfUserAccessActiveAcctNasPortType=wfUserAccessActiveAcctNasPortType, wfUserAccessActiveTable=wfUserAccessActiveTable, wfUserAccessNameTable=wfUserAccessNameTable, wfUserAccessRadius=wfUserAccessRadius, wfUserAccessActiveAcctOutOctets=wfUserAccessActiveAcctOutOctets, wfUserBccLockPort=wfUserBccLockPort, wfUserAccessConfig=wfUserAccessConfig, wfUserAccessActiveAcctPriv=wfUserAccessActiveAcctPriv, wfUserAccessGroupNumber=wfUserAccessGroupNumber, wfUserBccLock=wfUserBccLock, wfUserAccessActiveDelete=wfUserAccessActiveDelete, wfUserAccessActiveAcctInOctets=wfUserAccessActiveAcctInOctets, wfUserAccessGroupDelete=wfUserAccessGroupDelete, wfUserAccessGroupEntry=wfUserAccessGroupEntry, wfUserAccessActiveDisable=wfUserAccessActiveDisable, wfUserAccessDelete=wfUserAccessDelete, wfUserAccessMaxPassword=wfUserAccessMaxPassword, wfUserAccessNameDisable=wfUserAccessNameDisable, wfUserAccessActiveAcctAccessType=wfUserAccessActiveAcctAccessType, wfUserBccLockDelete=wfUserBccLockDelete, wfUserAccessNameDelete=wfUserAccessNameDelete, wfUserAccessNameId=wfUserAccessNameId, wfUserAccessActiveAcctServiceType=wfUserAccessActiveAcctServiceType, wfUserAudit=wfUserAudit, wfUserAuditDelete=wfUserAuditDelete, wfUserAccessMinGroup=wfUserAccessMinGroup, wfUserAccessActiveCmd=wfUserAccessActiveCmd, wfUserBccConfigDefaultShell=wfUserBccConfigDefaultShell, wfUserBccConfig=wfUserBccConfig, wfUserAccessActiveState=wfUserAccessActiveState, wfUserAccessActiveLastCmdTime=wfUserAccessActiveLastCmdTime, wfUserAccessActiveEntry=wfUserAccessActiveEntry, wfUserAccessGroupPriv=wfUserAccessGroupPriv, wfUserBccLockAddress=wfUserBccLockAddress, wfUserAccessRadiusAcctEnable=wfUserAccessRadiusAcctEnable)
