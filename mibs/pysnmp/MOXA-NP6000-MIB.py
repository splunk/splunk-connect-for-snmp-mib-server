#
# PySNMP MIB module MOXA-NP6000-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/MOXA-NP6000-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 20:03:37 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, Integer, OctetString = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "Integer", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueRangeConstraint, SingleValueConstraint, ConstraintsIntersection, ConstraintsUnion, ValueSizeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueRangeConstraint", "SingleValueConstraint", "ConstraintsIntersection", "ConstraintsUnion", "ValueSizeConstraint")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
Counter32, MibScalar, MibTable, MibTableRow, MibTableColumn, MibIdentifier, iso, ModuleIdentity, ObjectIdentity, Bits, Gauge32, TimeTicks, Unsigned32, Counter64, NotificationType, IpAddress, enterprises, Integer32 = mibBuilder.importSymbols("SNMPv2-SMI", "Counter32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "MibIdentifier", "iso", "ModuleIdentity", "ObjectIdentity", "Bits", "Gauge32", "TimeTicks", "Unsigned32", "Counter64", "NotificationType", "IpAddress", "enterprises", "Integer32")
TextualConvention, MacAddress, DisplayString, DateAndTime = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "MacAddress", "DisplayString", "DateAndTime")
moxa = MibIdentifier((1, 3, 6, 1, 4, 1, 8691))
nport = MibIdentifier((1, 3, 6, 1, 4, 1, 8691, 2))
np6000 = ModuleIdentity((1, 3, 6, 1, 4, 1, 8691, 2, 8))
if mibBuilder.loadTexts: np6000.setLastUpdated('200607120000Z')
if mibBuilder.loadTexts: np6000.setOrganization('Moxa Technologies Co.')
swMgmt = MibIdentifier((1, 3, 6, 1, 4, 1, 8691, 2, 8, 1))
class PortList(TextualConvention, OctetString):
    status = 'current'

overview = MibIdentifier((1, 3, 6, 1, 4, 1, 8691, 2, 8, 1, 1))
modelName = MibScalar((1, 3, 6, 1, 4, 1, 8691, 2, 8, 1, 1, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: modelName.setStatus('current')
serialNumber = MibScalar((1, 3, 6, 1, 4, 1, 8691, 2, 8, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: serialNumber.setStatus('current')
firmwareVersion = MibScalar((1, 3, 6, 1, 4, 1, 8691, 2, 8, 1, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: firmwareVersion.setStatus('current')
macAddress = MibScalar((1, 3, 6, 1, 4, 1, 8691, 2, 8, 1, 1, 4), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: macAddress.setStatus('current')
viewLanSpeed = MibScalar((1, 3, 6, 1, 4, 1, 8691, 2, 8, 1, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: viewLanSpeed.setStatus('current')
viewLanModuleSpeed = MibScalar((1, 3, 6, 1, 4, 1, 8691, 2, 8, 1, 1, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: viewLanModuleSpeed.setStatus('current')
upTime = MibScalar((1, 3, 6, 1, 4, 1, 8691, 2, 8, 1, 1, 7), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upTime.setStatus('current')
moduleType = MibScalar((1, 3, 6, 1, 4, 1, 8691, 2, 8, 1, 1, 8), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: moduleType.setStatus('current')
basicSetting = MibIdentifier((1, 3, 6, 1, 4, 1, 8691, 2, 8, 1, 2))
serverSetting = MibIdentifier((1, 3, 6, 1, 4, 1, 8691, 2, 8, 1, 2, 1))
serverName = MibScalar((1, 3, 6, 1, 4, 1, 8691, 2, 8, 1, 2, 1, 1), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: serverName.setStatus('current')
serverLocation = MibScalar((1, 3, 6, 1, 4, 1, 8691, 2, 8, 1, 2, 1, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: serverLocation.setStatus('current')
timeSetting = MibIdentifier((1, 3, 6, 1, 4, 1, 8691, 2, 8, 1, 2, 2))
timeZone = MibScalar((1, 3, 6, 1, 4, 1, 8691, 2, 8, 1, 2, 2, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: timeZone.setStatus('current')
localTime = MibScalar((1, 3, 6, 1, 4, 1, 8691, 2, 8, 1, 2, 2, 2), DateAndTime()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: localTime.setStatus('current')
timeServer = MibScalar((1, 3, 6, 1, 4, 1, 8691, 2, 8, 1, 2, 2, 3), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: timeServer.setStatus('current')
networkSetting = MibIdentifier((1, 3, 6, 1, 4, 1, 8691, 2, 8, 1, 3))
ipConfiguration = MibScalar((1, 3, 6, 1, 4, 1, 8691, 2, 8, 1, 3, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4))).clone(namedValues=NamedValues(("static", 0), ("dhcp", 1), ("dhcp-BOOTP", 2), ("bootp", 3), ("pppoe", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipConfiguration.setStatus('current')
sysIpAddress = MibScalar((1, 3, 6, 1, 4, 1, 8691, 2, 8, 1, 3, 2), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysIpAddress.setStatus('current')
netMask = MibScalar((1, 3, 6, 1, 4, 1, 8691, 2, 8, 1, 3, 3), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: netMask.setStatus('current')
defaultGateway = MibScalar((1, 3, 6, 1, 4, 1, 8691, 2, 8, 1, 3, 4), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: defaultGateway.setStatus('current')
dnsServer1IpAddr = MibScalar((1, 3, 6, 1, 4, 1, 8691, 2, 8, 1, 3, 5), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dnsServer1IpAddr.setStatus('current')
dnsServer2IpAddr = MibScalar((1, 3, 6, 1, 4, 1, 8691, 2, 8, 1, 3, 6), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dnsServer2IpAddr.setStatus('current')
pppoeUserAccount = MibScalar((1, 3, 6, 1, 4, 1, 8691, 2, 8, 1, 3, 7), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pppoeUserAccount.setStatus('current')
pppoePassword = MibScalar((1, 3, 6, 1, 4, 1, 8691, 2, 8, 1, 3, 8), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pppoePassword.setStatus('current')
winsFunction = MibScalar((1, 3, 6, 1, 4, 1, 8691, 2, 8, 1, 3, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: winsFunction.setStatus('current')
winsServer = MibScalar((1, 3, 6, 1, 4, 1, 8691, 2, 8, 1, 3, 10), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: winsServer.setStatus('current')
lan1Speed = MibScalar((1, 3, 6, 1, 4, 1, 8691, 2, 8, 1, 3, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4))).clone(namedValues=NamedValues(("auto-Negation", 0), ("tenMbps-Half", 1), ("tenMbps-Full", 2), ("hundredMbps-Half", 3), ("hundredMbps-Full", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lan1Speed.setStatus('current')
routingProtocol = MibScalar((1, 3, 6, 1, 4, 1, 8691, 2, 8, 1, 3, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("none", 0), ("rip-1", 1), ("rip-2", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: routingProtocol.setStatus('current')
gratuitousArp = MibScalar((1, 3, 6, 1, 4, 1, 8691, 2, 8, 1, 3, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gratuitousArp.setStatus('current')
gratuitousArpSendPeriod = MibScalar((1, 3, 6, 1, 4, 1, 8691, 2, 8, 1, 3, 14), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gratuitousArpSendPeriod.setStatus('current')
portSetting = MibIdentifier((1, 3, 6, 1, 4, 1, 8691, 2, 8, 1, 4))
opModeSetting = MibIdentifier((1, 3, 6, 1, 4, 1, 8691, 2, 8, 1, 4, 1))
opMode = MibIdentifier((1, 3, 6, 1, 4, 1, 8691, 2, 8, 1, 4, 1, 1))
opModePortTable = MibTable((1, 3, 6, 1, 4, 1, 8691, 2, 8, 1, 4, 1, 1, 1), )
if mibBuilder.loadTexts: opModePortTable.setStatus('current')
opModePortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 8691, 2, 8, 1, 4, 1, 1, 1, 1), ).setIndexNames((0, "MOXA-NP6000-MIB", "portIndex"))
if mibBuilder.loadTexts: opModePortEntry.setStatus('current')
portIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 8691, 2, 8, 1, 4, 1, 1, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: portIndex.setStatus('current')
portApplication = MibTableColumn((1, 3, 6, 1, 4, 1, 8691, 2, 8, 1, 4, 1, 1, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 4, 11, 13, 12, 2, 3, 6, 1))).clone(namedValues=NamedValues(("disable", 0), ("device-Control", 4), ("socket", 11), ("pair-Connection", 13), ("ethernet-Modem", 12), ("terminal", 2), ("reverse-Terminal", 3), ("printer", 6), ("dial-InOut", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portApplication.setStatus('current')
portMode = MibTableColumn((1, 3, 6, 1, 4, 1, 8691, 2, 8, 1, 4, 1, 1, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20))).clone(namedValues=NamedValues(("pair-Slave", 0), ("pair-Master", 1), ("aspp", 2), ("raw-PRN", 3), ("slip", 4), ("slipd", 5), ("ppp", 6), ("disable", 7), ("telnetd", 8), ("dynamic", 9), ("tcp-Server", 10), ("lpd-PRN", 11), ("ethernet-Modem", 12), ("tcp-Client", 13), ("udp", 14), ("pppd", 15), ("term-ASC", 16), ("term-BIN", 17), ("reverse-SSH", 18), ("ssh", 19), ("rfc-2217", 20)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portMode.setStatus('current')
application = MibIdentifier((1, 3, 6, 1, 4, 1, 8691, 2, 8, 1, 4, 1, 2))
deviceControl = MibIdentifier((1, 3, 6, 1, 4, 1, 8691, 2, 8, 1, 4, 1, 2, 1))
deviceControlTable = MibTable((1, 3, 6, 1, 4, 1, 8691, 2, 8, 1, 4, 1, 2, 1, 1), )
if mibBuilder.loadTexts: deviceControlTable.setStatus('current')
deviceControlEntry = MibTableRow((1, 3, 6, 1, 4, 1, 8691, 2, 8, 1, 4, 1, 2, 1, 1, 1), ).setIndexNames((0, "MOXA-NP6000-MIB", "portIndex"))
if mibBuilder.loadTexts: deviceControlEntry.setStatus('current')
deviceControlTcpAliveCheck = MibTableColumn((1, 3, 6, 1, 4, 1, 8691, 2, 8, 1, 4, 1, 2, 1, 1, 1, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: deviceControlTcpAliveCheck.setStatus('current')
deviceControlMaxConnection = MibTableColumn((1, 3, 6, 1, 4, 1, 8691, 2, 8, 1, 4, 1, 2, 1, 1, 1, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: deviceControlMaxConnection.setStatus('current')
deviceControlIgnoreJammedIp = MibTableColumn((1, 3, 6, 1, 4, 1, 8691, 2, 8, 1, 4, 1, 2, 1, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("no", 0), ("yes", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: deviceControlIgnoreJammedIp.setStatus('current')
deviceControlAllowDriverControl = MibTableColumn((1, 3, 6, 1, 4, 1, 8691, 2, 8, 1, 4, 1, 2, 1, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("no", 0), ("yes", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: deviceControlAllowDriverControl.setStatus('current')
deviceControlSecure = MibTableColumn((1, 3, 6, 1, 4, 1, 8691, 2, 8, 1, 4, 1, 2, 1, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("no", 0), ("yes", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: deviceControlSecure.setStatus('current')
deviceControlTcpPort = MibTableColumn((1, 3, 6, 1, 4, 1, 8691, 2, 8, 1, 4, 1, 2, 1, 1, 1, 6), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: deviceControlTcpPort.setStatus('current')
deviceControlConnectionDownRTS = MibTableColumn((1, 3, 6, 1, 4, 1, 8691, 2, 8, 1, 4, 1, 2, 1, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 0))).clone(namedValues=NamedValues(("goes-low", 1), ("always-high", 0)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: deviceControlConnectionDownRTS.setStatus('current')
deviceControlConnectionDownDTR = MibTableColumn((1, 3, 6, 1, 4, 1, 8691, 2, 8, 1, 4, 1, 2, 1, 1, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 0))).clone(namedValues=NamedValues(("goes-low", 1), ("always-high", 0)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: deviceControlConnectionDownDTR.setStatus('current')
socket = MibIdentifier((1, 3, 6, 1, 4, 1, 8691, 2, 8, 1, 4, 1, 2, 2))
socketTable = MibTable((1, 3, 6, 1, 4, 1, 8691, 2, 8, 1, 4, 1, 2, 2, 1), )
if mibBuilder.loadTexts: socketTable.setStatus('current')
socketEntry = MibTableRow((1, 3, 6, 1, 4, 1, 8691, 2, 8, 1, 4, 1, 2, 2, 1, 1), ).setIndexNames((0, "MOXA-NP6000-MIB", "portIndex"))
if mibBuilder.loadTexts: socketEntry.setStatus('current')
socketTcpAliveCheck = MibTableColumn((1, 3, 6, 1, 4, 1, 8691, 2, 8, 1, 4, 1, 2, 2, 1, 1, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: socketTcpAliveCheck.setStatus('current')
socketInactivityTime = MibTableColumn((1, 3, 6, 1, 4, 1, 8691, 2, 8, 1, 4, 1, 2, 2, 1, 1, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: socketInactivityTime.setStatus('current')
socketMaxConnection = MibTableColumn((1, 3, 6, 1, 4, 1, 8691, 2, 8, 1, 4, 1, 2, 2, 1, 1, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: socketMaxConnection.setStatus('current')
socketIgnoreJammedIp = MibTableColumn((1, 3, 6, 1, 4, 1, 8691, 2, 8, 1, 4, 1, 2, 2, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("no", 0), ("yes", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: socketIgnoreJammedIp.setStatus('current')
socketAllowDriverControl = MibTableColumn((1, 3, 6, 1, 4, 1, 8691, 2, 8, 1, 4, 1, 2, 2, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("no", 0), ("yes", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: socketAllowDriverControl.setStatus('current')
socketSecure = MibTableColumn((1, 3, 6, 1, 4, 1, 8691, 2, 8, 1, 4, 1, 2, 2, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("no", 0), ("yes", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: socketSecure.setStatus('current')
socketTcpPort = MibTableColumn((1, 3, 6, 1, 4, 1, 8691, 2, 8, 1, 4, 1, 2, 2, 1, 1, 7), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: socketTcpPort.setStatus('current')
socketCmdPort = MibTableColumn((1, 3, 6, 1, 4, 1, 8691, 2, 8, 1, 4, 1, 2, 2, 1, 1, 8), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: socketCmdPort.setStatus('current')
socketTcpServerConnectionDownRTS = MibTableColumn((1, 3, 6, 1, 4, 1, 8691, 2, 8, 1, 4, 1, 2, 2, 1, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 0))).clone(namedValues=NamedValues(("goes-low", 1), ("always-high", 0)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: socketTcpServerConnectionDownRTS.setStatus('current')
socketTcpServerConnectionDownDTR = MibTableColumn((1, 3, 6, 1, 4, 1, 8691, 2, 8, 1, 4, 1, 2, 2, 1, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 0))).clone(namedValues=NamedValues(("goes-low", 1), ("always-high", 0)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: socketTcpServerConnectionDownDTR.setStatus('current')
socketTcpClientDestinationAddress1 = MibTableColumn((1, 3, 6, 1, 4, 1, 8691, 2, 8, 1, 4, 1, 2, 2, 1, 1, 11), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: socketTcpClientDestinationAddress1.setStatus('current')
socketTcpClientDestinationPort1 = MibTableColumn((1, 3, 6, 1, 4, 1, 8691, 2, 8, 1, 4, 1, 2, 2, 1, 1, 12), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: socketTcpClientDestinationPort1.setStatus('current')
socketTcpClientDestinationAddress2 = MibTableColumn((1, 3, 6, 1, 4, 1, 8691, 2, 8, 1, 4, 1, 2, 2, 1, 1, 13), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: socketTcpClientDestinationAddress2.setStatus('current')
socketTcpClientDestinationPort2 = MibTableColumn((1, 3, 6, 1, 4, 1, 8691, 2, 8, 1, 4, 1, 2, 2, 1, 1, 14), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: socketTcpClientDestinationPort2.setStatus('current')
socketTcpClientDestinationAddress3 = MibTableColumn((1, 3, 6, 1, 4, 1, 8691, 2, 8, 1, 4, 1, 2, 2, 1, 1, 15), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: socketTcpClientDestinationAddress3.setStatus('current')
socketTcpClientDestinationPort3 = MibTableColumn((1, 3, 6, 1, 4, 1, 8691, 2, 8, 1, 4, 1, 2, 2, 1, 1, 16), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: socketTcpClientDestinationPort3.setStatus('current')
socketTcpClientDestinationAddress4 = MibTableColumn((1, 3, 6, 1, 4, 1, 8691, 2, 8, 1, 4, 1, 2, 2, 1, 1, 17), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: socketTcpClientDestinationAddress4.setStatus('current')
socketTcpClientDestinationPort4 = MibTableColumn((1, 3, 6, 1, 4, 1, 8691, 2, 8, 1, 4, 1, 2, 2, 1, 1, 18), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: socketTcpClientDestinationPort4.setStatus('current')
socketTcpClientDesignatedLocalPort1 = MibTableColumn((1, 3, 6, 1, 4, 1, 8691, 2, 8, 1, 4, 1, 2, 2, 1, 1, 19), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: socketTcpClientDesignatedLocalPort1.setStatus('current')
socketTcpClientDesignatedLocalPort2 = MibTableColumn((1, 3, 6, 1, 4, 1, 8691, 2, 8, 1, 4, 1, 2, 2, 1, 1, 20), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: socketTcpClientDesignatedLocalPort2.setStatus('current')
socketTcpClientDesignatedLocalPort3 = MibTableColumn((1, 3, 6, 1, 4, 1, 8691, 2, 8, 1, 4, 1, 2, 2, 1, 1, 21), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: socketTcpClientDesignatedLocalPort3.setStatus('current')
socketTcpClientDesignatedLocalPort4 = MibTableColumn((1, 3, 6, 1, 4, 1, 8691, 2, 8, 1, 4, 1, 2, 2, 1, 1, 22), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: socketTcpClientDesignatedLocalPort4.setStatus('current')
socketTcpClientConnectionControl = MibTableColumn((1, 3, 6, 1, 4, 1, 8691, 2, 8, 1, 4, 1, 2, 2, 1, 1, 23), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(257, 258, 514, 1028, 260, 2056, 264))).clone(namedValues=NamedValues(("startup-None", 257), ("anyCharacter-None", 258), ("anyCharacter-InactivityTime", 514), ("dsrOn-DSR-Off", 1028), ("dsrOn-None", 260), ("dcdOn-DCD-Off", 2056), ("dcdOn-None", 264)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: socketTcpClientConnectionControl.setStatus('current')
socketUdpDestinationAddress1Begin = MibTableColumn((1, 3, 6, 1, 4, 1, 8691, 2, 8, 1, 4, 1, 2, 2, 1, 1, 24), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: socketUdpDestinationAddress1Begin.setStatus('current')
socketUdpDestinationAddress1End = MibTableColumn((1, 3, 6, 1, 4, 1, 8691, 2, 8, 1, 4, 1, 2, 2, 1, 1, 25), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: socketUdpDestinationAddress1End.setStatus('current')
socketUdpDestinationPort1 = MibTableColumn((1, 3, 6, 1, 4, 1, 8691, 2, 8, 1, 4, 1, 2, 2, 1, 1, 26), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: socketUdpDestinationPort1.setStatus('current')
socketUdpDestinationAddress2Begin = MibTableColumn((1, 3, 6, 1, 4, 1, 8691, 2, 8, 1, 4, 1, 2, 2, 1, 1, 27), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: socketUdpDestinationAddress2Begin.setStatus('current')
socketUdpDestinationAddress2End = MibTableColumn((1, 3, 6, 1, 4, 1, 8691, 2, 8, 1, 4, 1, 2, 2, 1, 1, 28), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: socketUdpDestinationAddress2End.setStatus('current')
socketUdpDestinationPort2 = MibTableColumn((1, 3, 6, 1, 4, 1, 8691, 2, 8, 1, 4, 1, 2, 2, 1, 1, 29), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: socketUdpDestinationPort2.setStatus('current')
socketUdpDestinationAddress3Begin = MibTableColumn((1, 3, 6, 1, 4, 1, 8691, 2, 8, 1, 4, 1, 2, 2, 1, 1, 30), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: socketUdpDestinationAddress3Begin.setStatus('current')
socketUdpDestinationAddress3End = MibTableColumn((1, 3, 6, 1, 4, 1, 8691, 2, 8, 1, 4, 1, 2, 2, 1, 1, 31), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: socketUdpDestinationAddress3End.setStatus('current')
socketUdpDestinationPort3 = MibTableColumn((1, 3, 6, 1, 4, 1, 8691, 2, 8, 1, 4, 1, 2, 2, 1, 1, 32), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: socketUdpDestinationPort3.setStatus('current')
socketUdpDestinationAddress4Begin = MibTableColumn((1, 3, 6, 1, 4, 1, 8691, 2, 8, 1, 4, 1, 2, 2, 1, 1, 33), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: socketUdpDestinationAddress4Begin.setStatus('current')
socketUdpDestinationAddress4End = MibTableColumn((1, 3, 6, 1, 4, 1, 8691, 2, 8, 1, 4, 1, 2, 2, 1, 1, 34), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: socketUdpDestinationAddress4End.setStatus('current')
socketUdpDestinationPort4 = MibTableColumn((1, 3, 6, 1, 4, 1, 8691, 2, 8, 1, 4, 1, 2, 2, 1, 1, 35), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: socketUdpDestinationPort4.setStatus('current')
socketUdpLocalListenPort = MibTableColumn((1, 3, 6, 1, 4, 1, 8691, 2, 8, 1, 4, 1, 2, 2, 1, 1, 36), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: socketUdpLocalListenPort.setStatus('current')
pairConnection = MibIdentifier((1, 3, 6, 1, 4, 1, 8691, 2, 8, 1, 4, 1, 2, 3))
pairConnectionTable = MibTable((1, 3, 6, 1, 4, 1, 8691, 2, 8, 1, 4, 1, 2, 3, 1), )
if mibBuilder.loadTexts: pairConnectionTable.setStatus('current')
pairConnectionEntry = MibTableRow((1, 3, 6, 1, 4, 1, 8691, 2, 8, 1, 4, 1, 2, 3, 1, 1), ).setIndexNames((0, "MOXA-NP6000-MIB", "portIndex"))
if mibBuilder.loadTexts: pairConnectionEntry.setStatus('current')
pairConnectionTcpAliveCheck = MibTableColumn((1, 3, 6, 1, 4, 1, 8691, 2, 8, 1, 4, 1, 2, 3, 1, 1, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pairConnectionTcpAliveCheck.setStatus('current')
pairConnectionSecure = MibTableColumn((1, 3, 6, 1, 4, 1, 8691, 2, 8, 1, 4, 1, 2, 3, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("no", 0), ("yes", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pairConnectionSecure.setStatus('current')
pairConnectionDestinationAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 8691, 2, 8, 1, 4, 1, 2, 3, 1, 1, 3), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pairConnectionDestinationAddress.setStatus('current')
pairConnectionDestinationPort = MibTableColumn((1, 3, 6, 1, 4, 1, 8691, 2, 8, 1, 4, 1, 2, 3, 1, 1, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pairConnectionDestinationPort.setStatus('current')
pairConnectionTcpPort = MibTableColumn((1, 3, 6, 1, 4, 1, 8691, 2, 8, 1, 4, 1, 2, 3, 1, 1, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pairConnectionTcpPort.setStatus('current')
ethernetModem = MibIdentifier((1, 3, 6, 1, 4, 1, 8691, 2, 8, 1, 4, 1, 2, 4))
ethernetModemTable = MibTable((1, 3, 6, 1, 4, 1, 8691, 2, 8, 1, 4, 1, 2, 4, 1), )
if mibBuilder.loadTexts: ethernetModemTable.setStatus('current')
ethernetModemEntry = MibTableRow((1, 3, 6, 1, 4, 1, 8691, 2, 8, 1, 4, 1, 2, 4, 1, 1), ).setIndexNames((0, "MOXA-NP6000-MIB", "portIndex"))
if mibBuilder.loadTexts: ethernetModemEntry.setStatus('current')
ethernetModemTcpAliveCheck = MibTableColumn((1, 3, 6, 1, 4, 1, 8691, 2, 8, 1, 4, 1, 2, 4, 1, 1, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ethernetModemTcpAliveCheck.setStatus('current')
ethernetModemTcpPort = MibTableColumn((1, 3, 6, 1, 4, 1, 8691, 2, 8, 1, 4, 1, 2, 4, 1, 1, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ethernetModemTcpPort.setStatus('current')
terminal = MibIdentifier((1, 3, 6, 1, 4, 1, 8691, 2, 8, 1, 4, 1, 2, 5))
terminalTable = MibTable((1, 3, 6, 1, 4, 1, 8691, 2, 8, 1, 4, 1, 2, 5, 1), )
if mibBuilder.loadTexts: terminalTable.setStatus('current')
terminalEntry = MibTableRow((1, 3, 6, 1, 4, 1, 8691, 2, 8, 1, 4, 1, 2, 5, 1, 1), ).setIndexNames((0, "MOXA-NP6000-MIB", "portIndex"))
if mibBuilder.loadTexts: terminalEntry.setStatus('current')
terminalTcpAliveCheck = MibTableColumn((1, 3, 6, 1, 4, 1, 8691, 2, 8, 1, 4, 1, 2, 5, 1, 1, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: terminalTcpAliveCheck.setStatus('current')
terminalInactivityTime = MibTableColumn((1, 3, 6, 1, 4, 1, 8691, 2, 8, 1, 4, 1, 2, 5, 1, 1, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: terminalInactivityTime.setStatus('current')
terminalAutoLinkProtocol = MibTableColumn((1, 3, 6, 1, 4, 1, 8691, 2, 8, 1, 4, 1, 2, 5, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("none", 0), ("telnet", 1), ("rlogin", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: terminalAutoLinkProtocol.setStatus('current')
terminalPrimaryHostAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 8691, 2, 8, 1, 4, 1, 2, 5, 1, 1, 4), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: terminalPrimaryHostAddress.setStatus('current')
terminalSecondHostAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 8691, 2, 8, 1, 4, 1, 2, 5, 1, 1, 5), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: terminalSecondHostAddress.setStatus('current')
terminalTelnetTcpPort = MibTableColumn((1, 3, 6, 1, 4, 1, 8691, 2, 8, 1, 4, 1, 2, 5, 1, 1, 6), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: terminalTelnetTcpPort.setStatus('current')
terminalSshTcpPort = MibTableColumn((1, 3, 6, 1, 4, 1, 8691, 2, 8, 1, 4, 1, 2, 5, 1, 1, 7), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: terminalSshTcpPort.setStatus('current')
terminalType = MibTableColumn((1, 3, 6, 1, 4, 1, 8691, 2, 8, 1, 4, 1, 2, 5, 1, 1, 8), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: terminalType.setStatus('current')
terminalMaxSessions = MibTableColumn((1, 3, 6, 1, 4, 1, 8691, 2, 8, 1, 4, 1, 2, 5, 1, 1, 9), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: terminalMaxSessions.setStatus('current')
terminalChangeSession = MibTableColumn((1, 3, 6, 1, 4, 1, 8691, 2, 8, 1, 4, 1, 2, 5, 1, 1, 10), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: terminalChangeSession.setStatus('current')
terminalQuit = MibTableColumn((1, 3, 6, 1, 4, 1, 8691, 2, 8, 1, 4, 1, 2, 5, 1, 1, 11), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: terminalQuit.setStatus('current')
terminalBreak = MibTableColumn((1, 3, 6, 1, 4, 1, 8691, 2, 8, 1, 4, 1, 2, 5, 1, 1, 12), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: terminalBreak.setStatus('current')
terminalInterrupt = MibTableColumn((1, 3, 6, 1, 4, 1, 8691, 2, 8, 1, 4, 1, 2, 5, 1, 1, 13), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: terminalInterrupt.setStatus('current')
terminalAuthenticationType = MibTableColumn((1, 3, 6, 1, 4, 1, 8691, 2, 8, 1, 4, 1, 2, 5, 1, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("none", 0), ("local", 1), ("radius", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: terminalAuthenticationType.setStatus('current')
terminalAutoLoginPrompt = MibTableColumn((1, 3, 6, 1, 4, 1, 8691, 2, 8, 1, 4, 1, 2, 5, 1, 1, 15), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: terminalAutoLoginPrompt.setStatus('current')
terminalPasswordPrompt = MibTableColumn((1, 3, 6, 1, 4, 1, 8691, 2, 8, 1, 4, 1, 2, 5, 1, 1, 16), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: terminalPasswordPrompt.setStatus('current')
terminalLoginUserName = MibTableColumn((1, 3, 6, 1, 4, 1, 8691, 2, 8, 1, 4, 1, 2, 5, 1, 1, 17), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: terminalLoginUserName.setStatus('current')
terminalLoginPassword = MibTableColumn((1, 3, 6, 1, 4, 1, 8691, 2, 8, 1, 4, 1, 2, 5, 1, 1, 18), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: terminalLoginPassword.setStatus('current')
reverseTerminal = MibIdentifier((1, 3, 6, 1, 4, 1, 8691, 2, 8, 1, 4, 1, 2, 6))
reverseTerminalTable = MibTable((1, 3, 6, 1, 4, 1, 8691, 2, 8, 1, 4, 1, 2, 6, 1), )
if mibBuilder.loadTexts: reverseTerminalTable.setStatus('current')
reverseTerminalEntry = MibTableRow((1, 3, 6, 1, 4, 1, 8691, 2, 8, 1, 4, 1, 2, 6, 1, 1), ).setIndexNames((0, "MOXA-NP6000-MIB", "portIndex"))
if mibBuilder.loadTexts: reverseTerminalEntry.setStatus('current')
reverseTerminalTcpAliveCheck = MibTableColumn((1, 3, 6, 1, 4, 1, 8691, 2, 8, 1, 4, 1, 2, 6, 1, 1, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: reverseTerminalTcpAliveCheck.setStatus('current')
reverseTerminalInactivityTime = MibTableColumn((1, 3, 6, 1, 4, 1, 8691, 2, 8, 1, 4, 1, 2, 6, 1, 1, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: reverseTerminalInactivityTime.setStatus('current')
reverseTerminalTcpPort = MibTableColumn((1, 3, 6, 1, 4, 1, 8691, 2, 8, 1, 4, 1, 2, 6, 1, 1, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: reverseTerminalTcpPort.setStatus('current')
reverseTerminalAuthenticationType = MibTableColumn((1, 3, 6, 1, 4, 1, 8691, 2, 8, 1, 4, 1, 2, 6, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("none", 0), ("local", 1), ("radius", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: reverseTerminalAuthenticationType.setStatus('current')
reverseTerminalMapKeys = MibTableColumn((1, 3, 6, 1, 4, 1, 8691, 2, 8, 1, 4, 1, 2, 6, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("cr-lf", 0), ("cr", 1), ("lf", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: reverseTerminalMapKeys.setStatus('current')
printer = MibIdentifier((1, 3, 6, 1, 4, 1, 8691, 2, 8, 1, 4, 1, 2, 7))
printerTable = MibTable((1, 3, 6, 1, 4, 1, 8691, 2, 8, 1, 4, 1, 2, 7, 1), )
if mibBuilder.loadTexts: printerTable.setStatus('current')
printerEntry = MibTableRow((1, 3, 6, 1, 4, 1, 8691, 2, 8, 1, 4, 1, 2, 7, 1, 1), ).setIndexNames((0, "MOXA-NP6000-MIB", "portIndex"))
if mibBuilder.loadTexts: printerEntry.setStatus('current')
printerTcpAliveCheck = MibTableColumn((1, 3, 6, 1, 4, 1, 8691, 2, 8, 1, 4, 1, 2, 7, 1, 1, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: printerTcpAliveCheck.setStatus('current')
printerTcpPort = MibTableColumn((1, 3, 6, 1, 4, 1, 8691, 2, 8, 1, 4, 1, 2, 7, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: printerTcpPort.setStatus('current')
printerGroup = MibTableColumn((1, 3, 6, 1, 4, 1, 8691, 2, 8, 1, 4, 1, 2, 7, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15))).clone(namedValues=NamedValues(("group1", 0), ("group2", 1), ("group3", 2), ("group4", 3), ("group5", 4), ("group6", 5), ("group7", 6), ("group8", 7), ("group9", 8), ("group10", 9), ("group11", 10), ("group12", 11), ("group13", 12), ("group14", 13), ("group15", 14), ("group16", 15)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: printerGroup.setStatus('current')
printerQueueNameRaw = MibTableColumn((1, 3, 6, 1, 4, 1, 8691, 2, 8, 1, 4, 1, 2, 7, 1, 1, 4), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: printerQueueNameRaw.setStatus('current')
printerQueueNameASCII = MibTableColumn((1, 3, 6, 1, 4, 1, 8691, 2, 8, 1, 4, 1, 2, 7, 1, 1, 5), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: printerQueueNameASCII.setStatus('current')
printerAppendFromFeed = MibTableColumn((1, 3, 6, 1, 4, 1, 8691, 2, 8, 1, 4, 1, 2, 7, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: printerAppendFromFeed.setStatus('current')
dial = MibIdentifier((1, 3, 6, 1, 4, 1, 8691, 2, 8, 1, 4, 1, 2, 8))
dialTable = MibTable((1, 3, 6, 1, 4, 1, 8691, 2, 8, 1, 4, 1, 2, 8, 1), )
if mibBuilder.loadTexts: dialTable.setStatus('current')
dialEntry = MibTableRow((1, 3, 6, 1, 4, 1, 8691, 2, 8, 1, 4, 1, 2, 8, 1, 1), ).setIndexNames((0, "MOXA-NP6000-MIB", "portIndex"))
if mibBuilder.loadTexts: dialEntry.setStatus('current')
dialTERMBINMode = MibTableColumn((1, 3, 6, 1, 4, 1, 8691, 2, 8, 1, 4, 1, 2, 8, 1, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("no", 0), ("yes", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dialTERMBINMode.setStatus('current')
dialPPPDMode = MibTableColumn((1, 3, 6, 1, 4, 1, 8691, 2, 8, 1, 4, 1, 2, 8, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("no", 0), ("yes", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dialPPPDMode.setStatus('current')
dialSLIPDMode = MibTableColumn((1, 3, 6, 1, 4, 1, 8691, 2, 8, 1, 4, 1, 2, 8, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("no", 0), ("yes", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dialSLIPDMode.setStatus('current')
dialAuthType = MibTableColumn((1, 3, 6, 1, 4, 1, 8691, 2, 8, 1, 4, 1, 2, 8, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("none", 0), ("local", 1), ("radius", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dialAuthType.setStatus('current')
dialDisconnectBy = MibTableColumn((1, 3, 6, 1, 4, 1, 8691, 2, 8, 1, 4, 1, 2, 8, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 2, 4))).clone(namedValues=NamedValues(("none", 0), ("dcd-off", 2), ("dsr-off", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dialDisconnectBy.setStatus('current')
dialDestinationIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 8691, 2, 8, 1, 4, 1, 2, 8, 1, 1, 6), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dialDestinationIpAddress.setStatus('current')
dialSourceIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 8691, 2, 8, 1, 4, 1, 2, 8, 1, 1, 7), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dialSourceIpAddress.setStatus('current')
dialIpNetmask = MibTableColumn((1, 3, 6, 1, 4, 1, 8691, 2, 8, 1, 4, 1, 2, 8, 1, 1, 8), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dialIpNetmask.setStatus('current')
dialTcpIpCompression = MibTableColumn((1, 3, 6, 1, 4, 1, 8691, 2, 8, 1, 4, 1, 2, 8, 1, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("no", 0), ("yes", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dialTcpIpCompression.setStatus('current')
dialInactivityTime = MibTableColumn((1, 3, 6, 1, 4, 1, 8691, 2, 8, 1, 4, 1, 2, 8, 1, 1, 10), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dialInactivityTime.setStatus('current')
dialLinkQualityReport = MibTableColumn((1, 3, 6, 1, 4, 1, 8691, 2, 8, 1, 4, 1, 2, 8, 1, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("no", 0), ("yes", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dialLinkQualityReport.setStatus('current')
dialOutgoingPAPID = MibTableColumn((1, 3, 6, 1, 4, 1, 8691, 2, 8, 1, 4, 1, 2, 8, 1, 1, 12), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dialOutgoingPAPID.setStatus('current')
dialPAPPassword = MibTableColumn((1, 3, 6, 1, 4, 1, 8691, 2, 8, 1, 4, 1, 2, 8, 1, 1, 13), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dialPAPPassword.setStatus('current')
dialIncomingPAPCheck = MibTableColumn((1, 3, 6, 1, 4, 1, 8691, 2, 8, 1, 4, 1, 2, 8, 1, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("none", 0), ("local", 1), ("radius", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dialIncomingPAPCheck.setStatus('current')
dataPacking = MibIdentifier((1, 3, 6, 1, 4, 1, 8691, 2, 8, 1, 4, 1, 3))
dataPackingPortTable = MibTable((1, 3, 6, 1, 4, 1, 8691, 2, 8, 1, 4, 1, 3, 1), )
if mibBuilder.loadTexts: dataPackingPortTable.setStatus('current')
dataPackingPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 8691, 2, 8, 1, 4, 1, 3, 1, 1), ).setIndexNames((0, "MOXA-NP6000-MIB", "portIndex"))
if mibBuilder.loadTexts: dataPackingPortEntry.setStatus('current')
portPacketLength = MibTableColumn((1, 3, 6, 1, 4, 1, 8691, 2, 8, 1, 4, 1, 3, 1, 1, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portPacketLength.setStatus('current')
portDelimiter1Enable = MibTableColumn((1, 3, 6, 1, 4, 1, 8691, 2, 8, 1, 4, 1, 3, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portDelimiter1Enable.setStatus('current')
portDelimiter1 = MibTableColumn((1, 3, 6, 1, 4, 1, 8691, 2, 8, 1, 4, 1, 3, 1, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 2))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portDelimiter1.setStatus('current')
portDelimiter2Enable = MibTableColumn((1, 3, 6, 1, 4, 1, 8691, 2, 8, 1, 4, 1, 3, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portDelimiter2Enable.setStatus('current')
portDelimiter2 = MibTableColumn((1, 3, 6, 1, 4, 1, 8691, 2, 8, 1, 4, 1, 3, 1, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 2))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portDelimiter2.setStatus('current')
portDelimiterProcess = MibTableColumn((1, 3, 6, 1, 4, 1, 8691, 2, 8, 1, 4, 1, 3, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 4, 8))).clone(namedValues=NamedValues(("doNothing", 1), ("delimiterAddOne", 2), ("delimiterAddTwo", 4), ("stripDelimiter", 8)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portDelimiterProcess.setStatus('current')
portForceTransmit = MibTableColumn((1, 3, 6, 1, 4, 1, 8691, 2, 8, 1, 4, 1, 3, 1, 1, 7), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portForceTransmit.setStatus('current')
comParamSetting = MibIdentifier((1, 3, 6, 1, 4, 1, 8691, 2, 8, 1, 4, 2))
comParamPortTable = MibTable((1, 3, 6, 1, 4, 1, 8691, 2, 8, 1, 4, 2, 1), )
if mibBuilder.loadTexts: comParamPortTable.setStatus('current')
comParamPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 8691, 2, 8, 1, 4, 2, 1, 1), ).setIndexNames((0, "MOXA-NP6000-MIB", "portIndex"))
if mibBuilder.loadTexts: comParamPortEntry.setStatus('current')
portAlias = MibTableColumn((1, 3, 6, 1, 4, 1, 8691, 2, 8, 1, 4, 2, 1, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portAlias.setStatus('current')
portInterface = MibTableColumn((1, 3, 6, 1, 4, 1, 8691, 2, 8, 1, 4, 2, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("rs-232", 0), ("rs-422", 1), ("rs-485-2-wire", 2), ("rs-485-4-wire", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portInterface.setStatus('current')
portBaudRate = MibTableColumn((1, 3, 6, 1, 4, 1, 8691, 2, 8, 1, 4, 2, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19))).clone(namedValues=NamedValues(("b50", 0), ("b75", 1), ("b110", 2), ("b134", 3), ("b150", 4), ("b300", 5), ("b600", 6), ("b1200", 7), ("b1800", 8), ("b2400", 9), ("b4800", 10), ("b7200", 11), ("b9600", 12), ("b19200", 13), ("b38400", 14), ("b57600", 15), ("b115200", 16), ("b230400", 17), ("b460800", 18), ("b921600", 19)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portBaudRate.setStatus('current')
portBaudRateManual = MibTableColumn((1, 3, 6, 1, 4, 1, 8691, 2, 8, 1, 4, 2, 1, 1, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portBaudRateManual.setStatus('current')
portDataBits = MibTableColumn((1, 3, 6, 1, 4, 1, 8691, 2, 8, 1, 4, 2, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("d5", 0), ("d6", 1), ("d7", 2), ("d8", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portDataBits.setStatus('current')
portStopBits = MibTableColumn((1, 3, 6, 1, 4, 1, 8691, 2, 8, 1, 4, 2, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("s1", 0), ("s15", 1), ("s2", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portStopBits.setStatus('current')
portParity = MibTableColumn((1, 3, 6, 1, 4, 1, 8691, 2, 8, 1, 4, 2, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4))).clone(namedValues=NamedValues(("none", 0), ("odd", 1), ("even", 2), ("mark", 3), ("space", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portParity.setStatus('current')
portFlowControl = MibTableColumn((1, 3, 6, 1, 4, 1, 8691, 2, 8, 1, 4, 2, 1, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("none", 0), ("rts-cts", 1), ("xon-xoff", 2), ("dtr-dsr", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portFlowControl.setStatus('current')
portFIFO = MibTableColumn((1, 3, 6, 1, 4, 1, 8691, 2, 8, 1, 4, 2, 1, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portFIFO.setStatus('current')
dataBuffering = MibIdentifier((1, 3, 6, 1, 4, 1, 8691, 2, 8, 1, 4, 3))
dataBufferingPortTable = MibTable((1, 3, 6, 1, 4, 1, 8691, 2, 8, 1, 4, 3, 1), )
if mibBuilder.loadTexts: dataBufferingPortTable.setStatus('current')
dataBufferingPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 8691, 2, 8, 1, 4, 3, 1, 1), ).setIndexNames((0, "MOXA-NP6000-MIB", "portIndex"))
if mibBuilder.loadTexts: dataBufferingPortEntry.setStatus('current')
portBufferingEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 8691, 2, 8, 1, 4, 3, 1, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("no", 0), ("yes", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portBufferingEnable.setStatus('current')
portBufferingLocation = MibTableColumn((1, 3, 6, 1, 4, 1, 8691, 2, 8, 1, 4, 3, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("memory", 0), ("sdCard", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portBufferingLocation.setStatus('current')
portBufferingSDFileSize = MibTableColumn((1, 3, 6, 1, 4, 1, 8691, 2, 8, 1, 4, 3, 1, 1, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portBufferingSDFileSize.setStatus('current')
portSerialDataLoggingEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 8691, 2, 8, 1, 4, 3, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("no", 0), ("yes", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portSerialDataLoggingEnable.setStatus('current')
modemSettings = MibIdentifier((1, 3, 6, 1, 4, 1, 8691, 2, 8, 1, 4, 4))
modemSettingsPortTable = MibTable((1, 3, 6, 1, 4, 1, 8691, 2, 8, 1, 4, 4, 1), )
if mibBuilder.loadTexts: modemSettingsPortTable.setStatus('current')
modemSettingsPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 8691, 2, 8, 1, 4, 4, 1, 1), ).setIndexNames((0, "MOXA-NP6000-MIB", "portIndex"))
if mibBuilder.loadTexts: modemSettingsPortEntry.setStatus('current')
portEnableModem = MibTableColumn((1, 3, 6, 1, 4, 1, 8691, 2, 8, 1, 4, 4, 1, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portEnableModem.setStatus('current')
portInitialString = MibTableColumn((1, 3, 6, 1, 4, 1, 8691, 2, 8, 1, 4, 4, 1, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 24))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portInitialString.setStatus('current')
portDialUp = MibTableColumn((1, 3, 6, 1, 4, 1, 8691, 2, 8, 1, 4, 4, 1, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 8))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portDialUp.setStatus('current')
portPhoneNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 8691, 2, 8, 1, 4, 4, 1, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portPhoneNumber.setStatus('current')
welcomeMessage = MibIdentifier((1, 3, 6, 1, 4, 1, 8691, 2, 8, 1, 4, 5))
portEnableWelcomeMessage = MibScalar((1, 3, 6, 1, 4, 1, 8691, 2, 8, 1, 4, 5, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portEnableWelcomeMessage.setStatus('current')
portMessage = MibScalar((1, 3, 6, 1, 4, 1, 8691, 2, 8, 1, 4, 5, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 1280))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portMessage.setStatus('current')
sysManagement = MibIdentifier((1, 3, 6, 1, 4, 1, 8691, 2, 8, 1, 5))
miscNetworkSettings = MibIdentifier((1, 3, 6, 1, 4, 1, 8691, 2, 8, 1, 5, 1))
accessibleIp = MibIdentifier((1, 3, 6, 1, 4, 1, 8691, 2, 8, 1, 5, 1, 1))
enableAccessibleIpList = MibScalar((1, 3, 6, 1, 4, 1, 8691, 2, 8, 1, 5, 1, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: enableAccessibleIpList.setStatus('current')
accessibleIpListTable = MibTable((1, 3, 6, 1, 4, 1, 8691, 2, 8, 1, 5, 1, 1, 2), )
if mibBuilder.loadTexts: accessibleIpListTable.setStatus('current')
accessibleIpListEntry = MibTableRow((1, 3, 6, 1, 4, 1, 8691, 2, 8, 1, 5, 1, 1, 2, 1), ).setIndexNames((0, "MOXA-NP6000-MIB", "activeAccessibleIpList"))
if mibBuilder.loadTexts: accessibleIpListEntry.setStatus('current')
accessibleIpListIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 8691, 2, 8, 1, 5, 1, 1, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: accessibleIpListIndex.setStatus('current')
activeAccessibleIpList = MibTableColumn((1, 3, 6, 1, 4, 1, 8691, 2, 8, 1, 5, 1, 1, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: activeAccessibleIpList.setStatus('current')
accessibleIpListAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 8691, 2, 8, 1, 5, 1, 1, 2, 1, 3), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: accessibleIpListAddress.setStatus('current')
accessibleIpListNetmask = MibTableColumn((1, 3, 6, 1, 4, 1, 8691, 2, 8, 1, 5, 1, 1, 2, 1, 4), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: accessibleIpListNetmask.setStatus('current')
snmpAgentSettings = MibIdentifier((1, 3, 6, 1, 4, 1, 8691, 2, 8, 1, 5, 1, 2))
snmpEnable = MibScalar((1, 3, 6, 1, 4, 1, 8691, 2, 8, 1, 5, 1, 2, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snmpEnable.setStatus('current')
snmpContactName = MibScalar((1, 3, 6, 1, 4, 1, 8691, 2, 8, 1, 5, 1, 2, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 40))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snmpContactName.setStatus('current')
snmpLocation = MibScalar((1, 3, 6, 1, 4, 1, 8691, 2, 8, 1, 5, 1, 2, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 40))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snmpLocation.setStatus('current')
dDNS = MibIdentifier((1, 3, 6, 1, 4, 1, 8691, 2, 8, 1, 5, 1, 3))
dDNSEnable = MibScalar((1, 3, 6, 1, 4, 1, 8691, 2, 8, 1, 5, 1, 3, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dDNSEnable.setStatus('current')
dDNSServerAddress = MibScalar((1, 3, 6, 1, 4, 1, 8691, 2, 8, 1, 5, 1, 3, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0))).clone(namedValues=NamedValues(("dynDns_org", 0)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dDNSServerAddress.setStatus('current')
dDNSHostName = MibScalar((1, 3, 6, 1, 4, 1, 8691, 2, 8, 1, 5, 1, 3, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 60))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dDNSHostName.setStatus('current')
dDNSUserName = MibScalar((1, 3, 6, 1, 4, 1, 8691, 2, 8, 1, 5, 1, 3, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 60))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dDNSUserName.setStatus('current')
dDNSPassword = MibScalar((1, 3, 6, 1, 4, 1, 8691, 2, 8, 1, 5, 1, 3, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 60))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dDNSPassword.setStatus('current')
hostTable = MibIdentifier((1, 3, 6, 1, 4, 1, 8691, 2, 8, 1, 5, 1, 4))
hostTableTable = MibTable((1, 3, 6, 1, 4, 1, 8691, 2, 8, 1, 5, 1, 4, 1), )
if mibBuilder.loadTexts: hostTableTable.setStatus('current')
hostTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 8691, 2, 8, 1, 5, 1, 4, 1, 1), ).setIndexNames((0, "MOXA-NP6000-MIB", "hostTableIndex"))
if mibBuilder.loadTexts: hostTableEntry.setStatus('current')
hostTableIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 8691, 2, 8, 1, 5, 1, 4, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hostTableIndex.setStatus('current')
hostName = MibTableColumn((1, 3, 6, 1, 4, 1, 8691, 2, 8, 1, 5, 1, 4, 1, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hostName.setStatus('current')
hostIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 8691, 2, 8, 1, 5, 1, 4, 1, 1, 3), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hostIpAddress.setStatus('current')
routeTable = MibIdentifier((1, 3, 6, 1, 4, 1, 8691, 2, 8, 1, 5, 1, 5))
routeTableTable = MibTable((1, 3, 6, 1, 4, 1, 8691, 2, 8, 1, 5, 1, 5, 1), )
if mibBuilder.loadTexts: routeTableTable.setStatus('current')
routeTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 8691, 2, 8, 1, 5, 1, 5, 1, 1), ).setIndexNames((0, "MOXA-NP6000-MIB", "routeTableIndex"))
if mibBuilder.loadTexts: routeTableEntry.setStatus('current')
routeTableIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 8691, 2, 8, 1, 5, 1, 5, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: routeTableIndex.setStatus('current')
gatewayRouteTable = MibTableColumn((1, 3, 6, 1, 4, 1, 8691, 2, 8, 1, 5, 1, 5, 1, 1, 2), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gatewayRouteTable.setStatus('current')
destinationRouteTable = MibTableColumn((1, 3, 6, 1, 4, 1, 8691, 2, 8, 1, 5, 1, 5, 1, 1, 3), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: destinationRouteTable.setStatus('current')
netmaskRouteTable = MibTableColumn((1, 3, 6, 1, 4, 1, 8691, 2, 8, 1, 5, 1, 5, 1, 1, 4), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: netmaskRouteTable.setStatus('current')
metricRouteTable = MibTableColumn((1, 3, 6, 1, 4, 1, 8691, 2, 8, 1, 5, 1, 5, 1, 1, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: metricRouteTable.setStatus('current')
interfaceRouteTable = MibTableColumn((1, 3, 6, 1, 4, 1, 8691, 2, 8, 1, 5, 1, 5, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 256))).clone(namedValues=NamedValues(("port1", 0), ("port2", 1), ("port3", 2), ("port4", 3), ("port5", 4), ("port6", 5), ("port7", 6), ("port8", 7), ("port9", 8), ("port10", 9), ("port11", 10), ("port12", 11), ("port13", 12), ("port14", 13), ("port15", 14), ("port16", 15), ("lan", 256)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: interfaceRouteTable.setStatus('current')
userTable = MibIdentifier((1, 3, 6, 1, 4, 1, 8691, 2, 8, 1, 5, 1, 6))
userTableTable = MibTable((1, 3, 6, 1, 4, 1, 8691, 2, 8, 1, 5, 1, 6, 1), )
if mibBuilder.loadTexts: userTableTable.setStatus('current')
userTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 8691, 2, 8, 1, 5, 1, 6, 1, 1), ).setIndexNames((0, "MOXA-NP6000-MIB", "userTableIndex"))
if mibBuilder.loadTexts: userTableEntry.setStatus('current')
userTableIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 8691, 2, 8, 1, 5, 1, 6, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: userTableIndex.setStatus('current')
userNameUserTable = MibTableColumn((1, 3, 6, 1, 4, 1, 8691, 2, 8, 1, 5, 1, 6, 1, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: userNameUserTable.setStatus('current')
passwordUserTable = MibTableColumn((1, 3, 6, 1, 4, 1, 8691, 2, 8, 1, 5, 1, 6, 1, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: passwordUserTable.setStatus('current')
phoneNumberUserTable = MibTableColumn((1, 3, 6, 1, 4, 1, 8691, 2, 8, 1, 5, 1, 6, 1, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: phoneNumberUserTable.setStatus('current')
authenticationServer = MibIdentifier((1, 3, 6, 1, 4, 1, 8691, 2, 8, 1, 5, 1, 7))
radiusServerIp = MibScalar((1, 3, 6, 1, 4, 1, 8691, 2, 8, 1, 5, 1, 7, 1), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: radiusServerIp.setStatus('current')
radiusKey = MibScalar((1, 3, 6, 1, 4, 1, 8691, 2, 8, 1, 5, 1, 7, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: radiusKey.setStatus('current')
udpPortAuthenticationServer = MibScalar((1, 3, 6, 1, 4, 1, 8691, 2, 8, 1, 5, 1, 7, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1645, 1812))).clone(namedValues=NamedValues(("port1645", 1645), ("port1812", 1812)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: udpPortAuthenticationServer.setStatus('current')
radiusAccounting = MibScalar((1, 3, 6, 1, 4, 1, 8691, 2, 8, 1, 5, 1, 7, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: radiusAccounting.setStatus('current')
sysLogSettings = MibIdentifier((1, 3, 6, 1, 4, 1, 8691, 2, 8, 1, 5, 1, 8))
sysLocalLog = MibScalar((1, 3, 6, 1, 4, 1, 8691, 2, 8, 1, 5, 1, 8, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysLocalLog.setStatus('current')
networkLocalLog = MibScalar((1, 3, 6, 1, 4, 1, 8691, 2, 8, 1, 5, 1, 8, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: networkLocalLog.setStatus('current')
configLocalLog = MibScalar((1, 3, 6, 1, 4, 1, 8691, 2, 8, 1, 5, 1, 8, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: configLocalLog.setStatus('current')
opModeLocalLog = MibScalar((1, 3, 6, 1, 4, 1, 8691, 2, 8, 1, 5, 1, 8, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: opModeLocalLog.setStatus('current')
autoWarningSettings = MibIdentifier((1, 3, 6, 1, 4, 1, 8691, 2, 8, 1, 5, 2))
eventSettings = MibIdentifier((1, 3, 6, 1, 4, 1, 8691, 2, 8, 1, 5, 2, 1))
mailWarningColdStart = MibScalar((1, 3, 6, 1, 4, 1, 8691, 2, 8, 1, 5, 2, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mailWarningColdStart.setStatus('current')
mailWarningWarmStart = MibScalar((1, 3, 6, 1, 4, 1, 8691, 2, 8, 1, 5, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mailWarningWarmStart.setStatus('current')
mailWarningAuthFailure = MibScalar((1, 3, 6, 1, 4, 1, 8691, 2, 8, 1, 5, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mailWarningAuthFailure.setStatus('current')
mailWarningIpChanged = MibScalar((1, 3, 6, 1, 4, 1, 8691, 2, 8, 1, 5, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mailWarningIpChanged.setStatus('current')
mailWarningPasswordChanged = MibScalar((1, 3, 6, 1, 4, 1, 8691, 2, 8, 1, 5, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mailWarningPasswordChanged.setStatus('current')
trapServerColdStart = MibScalar((1, 3, 6, 1, 4, 1, 8691, 2, 8, 1, 5, 2, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: trapServerColdStart.setStatus('current')
trapServerWarmStart = MibScalar((1, 3, 6, 1, 4, 1, 8691, 2, 8, 1, 5, 2, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: trapServerWarmStart.setStatus('current')
trapServerAuthFailure = MibScalar((1, 3, 6, 1, 4, 1, 8691, 2, 8, 1, 5, 2, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: trapServerAuthFailure.setStatus('current')
alarmServerEthernet1LinkDown = MibScalar((1, 3, 6, 1, 4, 1, 8691, 2, 8, 1, 5, 2, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: alarmServerEthernet1LinkDown.setStatus('current')
alarmServerEthernet2LinkDown = MibScalar((1, 3, 6, 1, 4, 1, 8691, 2, 8, 1, 5, 2, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: alarmServerEthernet2LinkDown.setStatus('current')
alarmServerEthernet3LinkDown = MibScalar((1, 3, 6, 1, 4, 1, 8691, 2, 8, 1, 5, 2, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: alarmServerEthernet3LinkDown.setStatus('current')
serialEventSettings = MibIdentifier((1, 3, 6, 1, 4, 1, 8691, 2, 8, 1, 5, 2, 2))
portEventSettingsTable = MibTable((1, 3, 6, 1, 4, 1, 8691, 2, 8, 1, 5, 2, 2, 1), )
if mibBuilder.loadTexts: portEventSettingsTable.setStatus('current')
portEventSettingsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 8691, 2, 8, 1, 5, 2, 2, 1, 1), ).setIndexNames((0, "MOXA-NP6000-MIB", "portIndex"))
if mibBuilder.loadTexts: portEventSettingsEntry.setStatus('current')
mailDCDchange = MibTableColumn((1, 3, 6, 1, 4, 1, 8691, 2, 8, 1, 5, 2, 2, 1, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mailDCDchange.setStatus('current')
trapDCDchange = MibTableColumn((1, 3, 6, 1, 4, 1, 8691, 2, 8, 1, 5, 2, 2, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: trapDCDchange.setStatus('current')
alarmDCDchange = MibTableColumn((1, 3, 6, 1, 4, 1, 8691, 2, 8, 1, 5, 2, 2, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: alarmDCDchange.setStatus('current')
mailDSRchange = MibTableColumn((1, 3, 6, 1, 4, 1, 8691, 2, 8, 1, 5, 2, 2, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mailDSRchange.setStatus('current')
trapDSRchange = MibTableColumn((1, 3, 6, 1, 4, 1, 8691, 2, 8, 1, 5, 2, 2, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: trapDSRchange.setStatus('current')
alarmDSRchange = MibTableColumn((1, 3, 6, 1, 4, 1, 8691, 2, 8, 1, 5, 2, 2, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: alarmDSRchange.setStatus('current')
emailAlert = MibIdentifier((1, 3, 6, 1, 4, 1, 8691, 2, 8, 1, 5, 2, 3))
emailWarningMailServer = MibScalar((1, 3, 6, 1, 4, 1, 8691, 2, 8, 1, 5, 2, 3, 1), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: emailWarningMailServer.setStatus('current')
emailRequiresAuthentication = MibScalar((1, 3, 6, 1, 4, 1, 8691, 2, 8, 1, 5, 2, 3, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("non-require", 0), ("require", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: emailRequiresAuthentication.setStatus('current')
emailWarningUserName = MibScalar((1, 3, 6, 1, 4, 1, 8691, 2, 8, 1, 5, 2, 3, 3), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: emailWarningUserName.setStatus('current')
emailWarningPassword = MibScalar((1, 3, 6, 1, 4, 1, 8691, 2, 8, 1, 5, 2, 3, 4), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: emailWarningPassword.setStatus('current')
emailWarningFromEmail = MibScalar((1, 3, 6, 1, 4, 1, 8691, 2, 8, 1, 5, 2, 3, 5), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: emailWarningFromEmail.setStatus('current')
emailWarningFirstEmailAddr = MibScalar((1, 3, 6, 1, 4, 1, 8691, 2, 8, 1, 5, 2, 3, 6), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: emailWarningFirstEmailAddr.setStatus('current')
emailWarningSecondEmailAddr = MibScalar((1, 3, 6, 1, 4, 1, 8691, 2, 8, 1, 5, 2, 3, 7), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: emailWarningSecondEmailAddr.setStatus('current')
emailWarningThirdEmailAddr = MibScalar((1, 3, 6, 1, 4, 1, 8691, 2, 8, 1, 5, 2, 3, 8), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: emailWarningThirdEmailAddr.setStatus('current')
emailWarningFourthEmailAddr = MibScalar((1, 3, 6, 1, 4, 1, 8691, 2, 8, 1, 5, 2, 3, 9), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: emailWarningFourthEmailAddr.setStatus('current')
snmpTrap = MibIdentifier((1, 3, 6, 1, 4, 1, 8691, 2, 8, 1, 5, 2, 4))
snmpTrapReceiverIp = MibScalar((1, 3, 6, 1, 4, 1, 8691, 2, 8, 1, 5, 2, 4, 1), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snmpTrapReceiverIp.setStatus('current')
trapVersion = MibScalar((1, 3, 6, 1, 4, 1, 8691, 2, 8, 1, 5, 2, 4, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("v1", 0), ("v2c", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: trapVersion.setStatus('current')
maintenance = MibIdentifier((1, 3, 6, 1, 4, 1, 8691, 2, 8, 1, 5, 3))
consoleSettings = MibIdentifier((1, 3, 6, 1, 4, 1, 8691, 2, 8, 1, 5, 3, 1))
httpConsole = MibScalar((1, 3, 6, 1, 4, 1, 8691, 2, 8, 1, 5, 3, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("enable", 0), ("disable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: httpConsole.setStatus('current')
httpsConsole = MibScalar((1, 3, 6, 1, 4, 1, 8691, 2, 8, 1, 5, 3, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("enable", 0), ("disable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: httpsConsole.setStatus('current')
telnetConsole = MibScalar((1, 3, 6, 1, 4, 1, 8691, 2, 8, 1, 5, 3, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("enable", 0), ("disable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: telnetConsole.setStatus('current')
sshConsole = MibScalar((1, 3, 6, 1, 4, 1, 8691, 2, 8, 1, 5, 3, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("enable", 0), ("disable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sshConsole.setStatus('current')
lcmReadOnlyProtect = MibScalar((1, 3, 6, 1, 4, 1, 8691, 2, 8, 1, 5, 3, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("writable", 0), ("readonly", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lcmReadOnlyProtect.setStatus('current')
resetButtonFunction = MibScalar((1, 3, 6, 1, 4, 1, 8691, 2, 8, 1, 5, 3, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("always-enable", 0), ("disable-after-60-sec", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: resetButtonFunction.setStatus('current')
loadFactoryDefault = MibIdentifier((1, 3, 6, 1, 4, 1, 8691, 2, 8, 1, 5, 3, 2))
loadFactoryDefaultSetting = MibScalar((1, 3, 6, 1, 4, 1, 8691, 2, 8, 1, 5, 3, 2, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("resetToFactoryDefault-ExcludingIpConfiguration", 0), ("resetToFactoryDefault", 1)))).setMaxAccess("writeonly")
if mibBuilder.loadTexts: loadFactoryDefaultSetting.setStatus('current')
sysStatus = MibIdentifier((1, 3, 6, 1, 4, 1, 8691, 2, 8, 1, 6))
s2eConnections = MibIdentifier((1, 3, 6, 1, 4, 1, 8691, 2, 8, 1, 6, 1))
monitorRemoteIpTable = MibTable((1, 3, 6, 1, 4, 1, 8691, 2, 8, 1, 6, 1, 1), )
if mibBuilder.loadTexts: monitorRemoteIpTable.setStatus('current')
monitorRemoteIpEntry = MibTableRow((1, 3, 6, 1, 4, 1, 8691, 2, 8, 1, 6, 1, 1, 1), ).setIndexNames((0, "MOXA-NP6000-MIB", "portIndex"), (0, "MOXA-NP6000-MIB", "remoteIpIndex"))
if mibBuilder.loadTexts: monitorRemoteIpEntry.setStatus('current')
remoteIpIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 8691, 2, 8, 1, 6, 1, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: remoteIpIndex.setStatus('current')
monitorRemoteIp = MibTableColumn((1, 3, 6, 1, 4, 1, 8691, 2, 8, 1, 6, 1, 1, 1, 2), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: monitorRemoteIp.setStatus('current')
serialPortStatus = MibIdentifier((1, 3, 6, 1, 4, 1, 8691, 2, 8, 1, 6, 2))
monitorSerialPortStatusTable = MibTable((1, 3, 6, 1, 4, 1, 8691, 2, 8, 1, 6, 2, 1), )
if mibBuilder.loadTexts: monitorSerialPortStatusTable.setStatus('current')
monitorSerialPortStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 8691, 2, 8, 1, 6, 2, 1, 1), ).setIndexNames((0, "MOXA-NP6000-MIB", "portIndex"))
if mibBuilder.loadTexts: monitorSerialPortStatusEntry.setStatus('current')
monitorTxCount = MibTableColumn((1, 3, 6, 1, 4, 1, 8691, 2, 8, 1, 6, 2, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: monitorTxCount.setStatus('current')
monitorRxCount = MibTableColumn((1, 3, 6, 1, 4, 1, 8691, 2, 8, 1, 6, 2, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: monitorRxCount.setStatus('current')
monitorTxTotalCount = MibTableColumn((1, 3, 6, 1, 4, 1, 8691, 2, 8, 1, 6, 2, 1, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: monitorTxTotalCount.setStatus('current')
monitorRxTotalCount = MibTableColumn((1, 3, 6, 1, 4, 1, 8691, 2, 8, 1, 6, 2, 1, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: monitorRxTotalCount.setStatus('current')
monitorDSR = MibTableColumn((1, 3, 6, 1, 4, 1, 8691, 2, 8, 1, 6, 2, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("off", 0), ("on", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: monitorDSR.setStatus('current')
monitorDTR = MibTableColumn((1, 3, 6, 1, 4, 1, 8691, 2, 8, 1, 6, 2, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("off", 0), ("on", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: monitorDTR.setStatus('current')
monitorRTS = MibTableColumn((1, 3, 6, 1, 4, 1, 8691, 2, 8, 1, 6, 2, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("off", 0), ("on", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: monitorRTS.setStatus('current')
monitorCTS = MibTableColumn((1, 3, 6, 1, 4, 1, 8691, 2, 8, 1, 6, 2, 1, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("off", 0), ("on", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: monitorCTS.setStatus('current')
monitorDCD = MibTableColumn((1, 3, 6, 1, 4, 1, 8691, 2, 8, 1, 6, 2, 1, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("off", 0), ("on", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: monitorDCD.setStatus('current')
serialPortErrorCount = MibIdentifier((1, 3, 6, 1, 4, 1, 8691, 2, 8, 1, 6, 3))
monitorSerialPortErrorCountTable = MibTable((1, 3, 6, 1, 4, 1, 8691, 2, 8, 1, 6, 3, 1), )
if mibBuilder.loadTexts: monitorSerialPortErrorCountTable.setStatus('current')
monitorSerialPortErrorCountEntry = MibTableRow((1, 3, 6, 1, 4, 1, 8691, 2, 8, 1, 6, 3, 1, 1), ).setIndexNames((0, "MOXA-NP6000-MIB", "portIndex"))
if mibBuilder.loadTexts: monitorSerialPortErrorCountEntry.setStatus('current')
monitorErrorCountFrame = MibTableColumn((1, 3, 6, 1, 4, 1, 8691, 2, 8, 1, 6, 3, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: monitorErrorCountFrame.setStatus('current')
monitorErrorCountParity = MibTableColumn((1, 3, 6, 1, 4, 1, 8691, 2, 8, 1, 6, 3, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: monitorErrorCountParity.setStatus('current')
monitorErrorCountOverrun = MibTableColumn((1, 3, 6, 1, 4, 1, 8691, 2, 8, 1, 6, 3, 1, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: monitorErrorCountOverrun.setStatus('current')
monitorErrorCountBreak = MibTableColumn((1, 3, 6, 1, 4, 1, 8691, 2, 8, 1, 6, 3, 1, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: monitorErrorCountBreak.setStatus('current')
serialPortSettings = MibIdentifier((1, 3, 6, 1, 4, 1, 8691, 2, 8, 1, 6, 4))
monitorSerialPortSettingsTable = MibTable((1, 3, 6, 1, 4, 1, 8691, 2, 8, 1, 6, 4, 1), )
if mibBuilder.loadTexts: monitorSerialPortSettingsTable.setStatus('current')
monitorSerialPortSettingsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 8691, 2, 8, 1, 6, 4, 1, 1), ).setIndexNames((0, "MOXA-NP6000-MIB", "portIndex"))
if mibBuilder.loadTexts: monitorSerialPortSettingsEntry.setStatus('current')
monitorBaudRate = MibTableColumn((1, 3, 6, 1, 4, 1, 8691, 2, 8, 1, 6, 4, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: monitorBaudRate.setStatus('current')
monitorDataBits = MibTableColumn((1, 3, 6, 1, 4, 1, 8691, 2, 8, 1, 6, 4, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: monitorDataBits.setStatus('current')
monitorStopBits = MibTableColumn((1, 3, 6, 1, 4, 1, 8691, 2, 8, 1, 6, 4, 1, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: monitorStopBits.setStatus('current')
monitorParity = MibTableColumn((1, 3, 6, 1, 4, 1, 8691, 2, 8, 1, 6, 4, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 8, 24, 40, 56))).clone(namedValues=NamedValues(("none", 0), ("odd", 8), ("even", 24), ("mark", 40), ("space", 56)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: monitorParity.setStatus('current')
monitorRTSCTSFlowControl = MibTableColumn((1, 3, 6, 1, 4, 1, 8691, 2, 8, 1, 6, 4, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("off", 0), ("on", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: monitorRTSCTSFlowControl.setStatus('current')
monitorXONXOFFFlowControl = MibTableColumn((1, 3, 6, 1, 4, 1, 8691, 2, 8, 1, 6, 4, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("off", 0), ("on", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: monitorXONXOFFFlowControl.setStatus('current')
monitorDTRDSRFlowControl = MibTableColumn((1, 3, 6, 1, 4, 1, 8691, 2, 8, 1, 6, 4, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("off", 0), ("on", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: monitorDTRDSRFlowControl.setStatus('current')
monitorFIFO = MibTableColumn((1, 3, 6, 1, 4, 1, 8691, 2, 8, 1, 6, 4, 1, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: monitorFIFO.setStatus('current')
monitorInterface = MibTableColumn((1, 3, 6, 1, 4, 1, 8691, 2, 8, 1, 6, 4, 1, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("rs-232", 0), ("rs-422", 1), ("rs-485-2-wire", 2), ("rs-485-4-wire", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: monitorInterface.setStatus('current')
relayOutputStatus = MibIdentifier((1, 3, 6, 1, 4, 1, 8691, 2, 8, 1, 6, 5))
relayOutputEthernet1LinkDown = MibScalar((1, 3, 6, 1, 4, 1, 8691, 2, 8, 1, 6, 5, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("none", 0), ("alarm", 1), ("alarm-Acked", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: relayOutputEthernet1LinkDown.setStatus('current')
ethernet1LinkDownAcknowledge = MibScalar((1, 3, 6, 1, 4, 1, 8691, 2, 8, 1, 6, 5, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0))).clone(namedValues=NamedValues(("acked", 0)))).setMaxAccess("writeonly")
if mibBuilder.loadTexts: ethernet1LinkDownAcknowledge.setStatus('current')
relayOutputEthernet2LinkDown = MibScalar((1, 3, 6, 1, 4, 1, 8691, 2, 8, 1, 6, 5, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("none", 0), ("alarm", 1), ("alarm-Acked", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: relayOutputEthernet2LinkDown.setStatus('current')
ethernet2LinkDownAcknowledge = MibScalar((1, 3, 6, 1, 4, 1, 8691, 2, 8, 1, 6, 5, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0))).clone(namedValues=NamedValues(("acked", 0)))).setMaxAccess("writeonly")
if mibBuilder.loadTexts: ethernet2LinkDownAcknowledge.setStatus('current')
relayOutputEthernet3LinkDown = MibScalar((1, 3, 6, 1, 4, 1, 8691, 2, 8, 1, 6, 5, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("none", 0), ("alarm", 1), ("alarm-Acked", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: relayOutputEthernet3LinkDown.setStatus('current')
ethernet3LinkDownAcknowledge = MibScalar((1, 3, 6, 1, 4, 1, 8691, 2, 8, 1, 6, 5, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0))).clone(namedValues=NamedValues(("acked", 0)))).setMaxAccess("writeonly")
if mibBuilder.loadTexts: ethernet3LinkDownAcknowledge.setStatus('current')
portDCDChangedStatusTable = MibTable((1, 3, 6, 1, 4, 1, 8691, 2, 8, 1, 6, 5, 7), )
if mibBuilder.loadTexts: portDCDChangedStatusTable.setStatus('current')
portDCDChangedStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 8691, 2, 8, 1, 6, 5, 7, 1), ).setIndexNames((0, "MOXA-NP6000-MIB", "portIndex"))
if mibBuilder.loadTexts: portDCDChangedStatusEntry.setStatus('current')
portDCDChangedStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 8691, 2, 8, 1, 6, 5, 7, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("none", 0), ("alarm", 1), ("alarm-Acked", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: portDCDChangedStatus.setStatus('current')
portDCDChangedAcknowledge = MibTableColumn((1, 3, 6, 1, 4, 1, 8691, 2, 8, 1, 6, 5, 7, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0))).clone(namedValues=NamedValues(("acked", 0)))).setMaxAccess("writeonly")
if mibBuilder.loadTexts: portDCDChangedAcknowledge.setStatus('current')
portDSRChangedStatusTable = MibTable((1, 3, 6, 1, 4, 1, 8691, 2, 8, 1, 6, 5, 8), )
if mibBuilder.loadTexts: portDSRChangedStatusTable.setStatus('current')
portDSRChangedStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 8691, 2, 8, 1, 6, 5, 8, 1), ).setIndexNames((0, "MOXA-NP6000-MIB", "portIndex"))
if mibBuilder.loadTexts: portDSRChangedStatusEntry.setStatus('current')
portDSRChangedStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 8691, 2, 8, 1, 6, 5, 8, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("none", 0), ("alarm", 1), ("alarm-Acked", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: portDSRChangedStatus.setStatus('current')
portDSRChangedAcknowledge = MibTableColumn((1, 3, 6, 1, 4, 1, 8691, 2, 8, 1, 6, 5, 8, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0))).clone(namedValues=NamedValues(("acked", 0)))).setMaxAccess("writeonly")
if mibBuilder.loadTexts: portDSRChangedAcknowledge.setStatus('current')
saveConfiguration = MibIdentifier((1, 3, 6, 1, 4, 1, 8691, 2, 8, 1, 7))
saveConfig = MibScalar((1, 3, 6, 1, 4, 1, 8691, 2, 8, 1, 7, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("save", 1)))).setMaxAccess("writeonly")
if mibBuilder.loadTexts: saveConfig.setStatus('current')
restart = MibIdentifier((1, 3, 6, 1, 4, 1, 8691, 2, 8, 1, 8))
restartPorts = MibScalar((1, 3, 6, 1, 4, 1, 8691, 2, 8, 1, 8, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15))).clone(namedValues=NamedValues(("port1", 0), ("port2", 1), ("port3", 2), ("port4", 3), ("port5", 4), ("port6", 5), ("port7", 6), ("port8", 7), ("port9", 8), ("port10", 9), ("port11", 10), ("port12", 11), ("port13", 12), ("port14", 13), ("port15", 14), ("port16", 15)))).setMaxAccess("writeonly")
if mibBuilder.loadTexts: restartPorts.setStatus('current')
restartSystem = MibScalar((1, 3, 6, 1, 4, 1, 8691, 2, 8, 1, 8, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("restart", 1)))).setMaxAccess("writeonly")
if mibBuilder.loadTexts: restartSystem.setStatus('current')
mibBuilder.exportSymbols("MOXA-NP6000-MIB", opMode=opMode, alarmDCDchange=alarmDCDchange, portDelimiter1Enable=portDelimiter1Enable, dialIncomingPAPCheck=dialIncomingPAPCheck, passwordUserTable=passwordUserTable, socketTcpClientDestinationPort3=socketTcpClientDestinationPort3, relayOutputStatus=relayOutputStatus, mailWarningPasswordChanged=mailWarningPasswordChanged, dnsServer2IpAddr=dnsServer2IpAddr, terminalSecondHostAddress=terminalSecondHostAddress, gatewayRouteTable=gatewayRouteTable, monitorParity=monitorParity, pairConnectionDestinationAddress=pairConnectionDestinationAddress, dialDisconnectBy=dialDisconnectBy, sysLogSettings=sysLogSettings, hostTableIndex=hostTableIndex, socketUdpDestinationAddress2Begin=socketUdpDestinationAddress2Begin, phoneNumberUserTable=phoneNumberUserTable, portDSRChangedStatusEntry=portDSRChangedStatusEntry, opModeSetting=opModeSetting, restartSystem=restartSystem, timeSetting=timeSetting, miscNetworkSettings=miscNetworkSettings, socketUdpDestinationAddress1End=socketUdpDestinationAddress1End, portEnableWelcomeMessage=portEnableWelcomeMessage, snmpContactName=snmpContactName, mailWarningColdStart=mailWarningColdStart, socketUdpDestinationAddress4End=socketUdpDestinationAddress4End, reverseTerminalTcpPort=reverseTerminalTcpPort, routeTable=routeTable, pppoeUserAccount=pppoeUserAccount, terminalLoginPassword=terminalLoginPassword, printer=printer, winsFunction=winsFunction, reverseTerminalEntry=reverseTerminalEntry, upTime=upTime, dataPacking=dataPacking, dataBufferingPortTable=dataBufferingPortTable, portBufferingEnable=portBufferingEnable, dDNSServerAddress=dDNSServerAddress, userTableTable=userTableTable, routeTableIndex=routeTableIndex, dialDestinationIpAddress=dialDestinationIpAddress, emailWarningPassword=emailWarningPassword, terminalLoginUserName=terminalLoginUserName, monitorTxTotalCount=monitorTxTotalCount, socketUdpDestinationPort3=socketUdpDestinationPort3, portStopBits=portStopBits, portFlowControl=portFlowControl, serialPortSettings=serialPortSettings, terminalAutoLinkProtocol=terminalAutoLinkProtocol, socketTable=socketTable, snmpLocation=snmpLocation, ethernetModemTcpAliveCheck=ethernetModemTcpAliveCheck, monitorXONXOFFFlowControl=monitorXONXOFFFlowControl, socketTcpClientDesignatedLocalPort4=socketTcpClientDesignatedLocalPort4, hostName=hostName, winsServer=winsServer, snmpTrapReceiverIp=snmpTrapReceiverIp, userTableIndex=userTableIndex, monitorDTRDSRFlowControl=monitorDTRDSRFlowControl, overview=overview, netMask=netMask, portMessage=portMessage, snmpAgentSettings=snmpAgentSettings, printerTcpPort=printerTcpPort, deviceControlConnectionDownRTS=deviceControlConnectionDownRTS, emailWarningMailServer=emailWarningMailServer, mailWarningAuthFailure=mailWarningAuthFailure, monitorSerialPortErrorCountTable=monitorSerialPortErrorCountTable, portAlias=portAlias, saveConfiguration=saveConfiguration, pairConnectionEntry=pairConnectionEntry, monitorDCD=monitorDCD, dialTcpIpCompression=dialTcpIpCompression, socketUdpLocalListenPort=socketUdpLocalListenPort, pppoePassword=pppoePassword, trapDCDchange=trapDCDchange, monitorSerialPortSettingsTable=monitorSerialPortSettingsTable, pairConnectionSecure=pairConnectionSecure, hostTableEntry=hostTableEntry, socketTcpPort=socketTcpPort, socketTcpClientDestinationAddress1=socketTcpClientDestinationAddress1, routeTableTable=routeTableTable, dialIpNetmask=dialIpNetmask, gratuitousArpSendPeriod=gratuitousArpSendPeriod, socketUdpDestinationAddress1Begin=socketUdpDestinationAddress1Begin, moduleType=moduleType, socket=socket, relayOutputEthernet2LinkDown=relayOutputEthernet2LinkDown, activeAccessibleIpList=activeAccessibleIpList, interfaceRouteTable=interfaceRouteTable, firmwareVersion=firmwareVersion, snmpTrap=snmpTrap, configLocalLog=configLocalLog, comParamSetting=comParamSetting, socketTcpClientDestinationPort2=socketTcpClientDestinationPort2, terminalSshTcpPort=terminalSshTcpPort, portDCDChangedAcknowledge=portDCDChangedAcknowledge, dialSourceIpAddress=dialSourceIpAddress, opModePortEntry=opModePortEntry, pairConnectionTcpPort=pairConnectionTcpPort, monitorRTSCTSFlowControl=monitorRTSCTSFlowControl, monitorRxTotalCount=monitorRxTotalCount, terminalType=terminalType, modelName=modelName, portBufferingSDFileSize=portBufferingSDFileSize, monitorSerialPortStatusEntry=monitorSerialPortStatusEntry, socketTcpClientDestinationAddress3=socketTcpClientDestinationAddress3, emailWarningFourthEmailAddr=emailWarningFourthEmailAddr, restart=restart, reverseTerminalTable=reverseTerminalTable, maintenance=maintenance, swMgmt=swMgmt, portParity=portParity, monitorErrorCountFrame=monitorErrorCountFrame, terminalAuthenticationType=terminalAuthenticationType, socketCmdPort=socketCmdPort, PYSNMP_MODULE_ID=np6000, socketMaxConnection=socketMaxConnection, s2eConnections=s2eConnections, socketUdpDestinationPort4=socketUdpDestinationPort4, sysStatus=sysStatus, portBaudRate=portBaudRate, sshConsole=sshConsole, accessibleIpListAddress=accessibleIpListAddress, userTable=userTable, monitorRTS=monitorRTS, portDSRChangedAcknowledge=portDSRChangedAcknowledge, monitorSerialPortErrorCountEntry=monitorSerialPortErrorCountEntry, portDSRChangedStatusTable=portDSRChangedStatusTable, socketTcpClientDestinationPort1=socketTcpClientDestinationPort1, dataPackingPortTable=dataPackingPortTable, restartPorts=restartPorts, opModePortTable=opModePortTable, portIndex=portIndex, reverseTerminalTcpAliveCheck=reverseTerminalTcpAliveCheck, dataBuffering=dataBuffering, serialNumber=serialNumber, resetButtonFunction=resetButtonFunction, ethernetModemEntry=ethernetModemEntry, terminalQuit=terminalQuit, hostTableTable=hostTableTable, dialTERMBINMode=dialTERMBINMode, hostIpAddress=hostIpAddress, alarmDSRchange=alarmDSRchange, socketUdpDestinationAddress2End=socketUdpDestinationAddress2End, consoleSettings=consoleSettings, monitorSerialPortStatusTable=monitorSerialPortStatusTable, relayOutputEthernet1LinkDown=relayOutputEthernet1LinkDown, timeZone=timeZone, mailDCDchange=mailDCDchange, monitorStopBits=monitorStopBits, serialPortErrorCount=serialPortErrorCount, deviceControlMaxConnection=deviceControlMaxConnection, monitorFIFO=monitorFIFO, dataBufferingPortEntry=dataBufferingPortEntry, welcomeMessage=welcomeMessage, socketTcpClientDesignatedLocalPort3=socketTcpClientDesignatedLocalPort3, socketTcpClientDesignatedLocalPort2=socketTcpClientDesignatedLocalPort2, mailDSRchange=mailDSRchange, autoWarningSettings=autoWarningSettings, trapServerAuthFailure=trapServerAuthFailure, userNameUserTable=userNameUserTable, monitorRemoteIpEntry=monitorRemoteIpEntry, portFIFO=portFIFO, terminalInactivityTime=terminalInactivityTime, relayOutputEthernet3LinkDown=relayOutputEthernet3LinkDown, opModeLocalLog=opModeLocalLog, portDialUp=portDialUp, deviceControlTcpPort=deviceControlTcpPort, application=application, gratuitousArp=gratuitousArp, alarmServerEthernet3LinkDown=alarmServerEthernet3LinkDown, reverseTerminalInactivityTime=reverseTerminalInactivityTime, accessibleIp=accessibleIp, eventSettings=eventSettings, moxa=moxa, portPacketLength=portPacketLength, serialEventSettings=serialEventSettings, socketUdpDestinationAddress3Begin=socketUdpDestinationAddress3Begin, portDelimiter2=portDelimiter2, snmpEnable=snmpEnable, dialInactivityTime=dialInactivityTime, sysManagement=sysManagement, nport=nport, terminalAutoLoginPrompt=terminalAutoLoginPrompt, monitorRemoteIpTable=monitorRemoteIpTable, netmaskRouteTable=netmaskRouteTable, portDCDChangedStatus=portDCDChangedStatus, monitorCTS=monitorCTS, emailWarningThirdEmailAddr=emailWarningThirdEmailAddr, dial=dial, monitorErrorCountBreak=monitorErrorCountBreak, pairConnectionDestinationPort=pairConnectionDestinationPort, monitorSerialPortSettingsEntry=monitorSerialPortSettingsEntry, terminalTelnetTcpPort=terminalTelnetTcpPort, terminal=terminal, socketSecure=socketSecure, networkSetting=networkSetting, portInitialString=portInitialString, comParamPortTable=comParamPortTable, mailWarningWarmStart=mailWarningWarmStart, portSerialDataLoggingEnable=portSerialDataLoggingEnable, dialSLIPDMode=dialSLIPDMode, portSetting=portSetting, monitorBaudRate=monitorBaudRate, emailWarningSecondEmailAddr=emailWarningSecondEmailAddr, socketTcpClientConnectionControl=socketTcpClientConnectionControl, httpsConsole=httpsConsole, portEventSettingsEntry=portEventSettingsEntry, portEventSettingsTable=portEventSettingsTable, radiusAccounting=radiusAccounting, reverseTerminal=reverseTerminal, portDSRChangedStatus=portDSRChangedStatus, emailAlert=emailAlert, pairConnectionTcpAliveCheck=pairConnectionTcpAliveCheck, socketUdpDestinationPort2=socketUdpDestinationPort2, loadFactoryDefault=loadFactoryDefault, dDNSUserName=dDNSUserName, routingProtocol=routingProtocol, ethernet2LinkDownAcknowledge=ethernet2LinkDownAcknowledge, socketTcpAliveCheck=socketTcpAliveCheck, reverseTerminalAuthenticationType=reverseTerminalAuthenticationType, dDNS=dDNS, destinationRouteTable=destinationRouteTable, serialPortStatus=serialPortStatus, portForceTransmit=portForceTransmit, accessibleIpListIndex=accessibleIpListIndex, terminalTable=terminalTable, trapDSRchange=trapDSRchange, socketTcpClientDestinationAddress4=socketTcpClientDestinationAddress4, deviceControl=deviceControl, portMode=portMode, portDCDChangedStatusEntry=portDCDChangedStatusEntry, ethernetModemTable=ethernetModemTable, socketTcpServerConnectionDownRTS=socketTcpServerConnectionDownRTS, portDelimiter2Enable=portDelimiter2Enable, printerQueueNameASCII=printerQueueNameASCII, terminalPrimaryHostAddress=terminalPrimaryHostAddress, ethernetModem=ethernetModem, deviceControlIgnoreJammedIp=deviceControlIgnoreJammedIp, ipConfiguration=ipConfiguration, ethernetModemTcpPort=ethernetModemTcpPort, terminalChangeSession=terminalChangeSession, trapServerWarmStart=trapServerWarmStart, basicSetting=basicSetting, portBufferingLocation=portBufferingLocation, deviceControlSecure=deviceControlSecure, deviceControlEntry=deviceControlEntry, telnetConsole=telnetConsole, printerTcpAliveCheck=printerTcpAliveCheck, emailWarningFirstEmailAddr=emailWarningFirstEmailAddr, portApplication=portApplication)
mibBuilder.exportSymbols("MOXA-NP6000-MIB", sysLocalLog=sysLocalLog, np6000=np6000, radiusServerIp=radiusServerIp, socketTcpClientDestinationPort4=socketTcpClientDestinationPort4, socketTcpClientDesignatedLocalPort1=socketTcpClientDesignatedLocalPort1, accessibleIpListNetmask=accessibleIpListNetmask, deviceControlAllowDriverControl=deviceControlAllowDriverControl, ethernet1LinkDownAcknowledge=ethernet1LinkDownAcknowledge, deviceControlTable=deviceControlTable, terminalEntry=terminalEntry, socketTcpClientDestinationAddress2=socketTcpClientDestinationAddress2, radiusKey=radiusKey, alarmServerEthernet2LinkDown=alarmServerEthernet2LinkDown, reverseTerminalMapKeys=reverseTerminalMapKeys, monitorDTR=monitorDTR, modemSettingsPortEntry=modemSettingsPortEntry, serverSetting=serverSetting, saveConfig=saveConfig, dialEntry=dialEntry, monitorRxCount=monitorRxCount, terminalPasswordPrompt=terminalPasswordPrompt, enableAccessibleIpList=enableAccessibleIpList, portDelimiter1=portDelimiter1, portDelimiterProcess=portDelimiterProcess, deviceControlConnectionDownDTR=deviceControlConnectionDownDTR, dDNSPassword=dDNSPassword, monitorTxCount=monitorTxCount, dDNSEnable=dDNSEnable, emailWarningFromEmail=emailWarningFromEmail, viewLanModuleSpeed=viewLanModuleSpeed, portEnableModem=portEnableModem, modemSettingsPortTable=modemSettingsPortTable, dialLinkQualityReport=dialLinkQualityReport, terminalMaxSessions=terminalMaxSessions, modemSettings=modemSettings, macAddress=macAddress, terminalTcpAliveCheck=terminalTcpAliveCheck, portPhoneNumber=portPhoneNumber, metricRouteTable=metricRouteTable, localTime=localTime, monitorDataBits=monitorDataBits, monitorErrorCountOverrun=monitorErrorCountOverrun, printerAppendFromFeed=printerAppendFromFeed, monitorRemoteIp=monitorRemoteIp, printerQueueNameRaw=printerQueueNameRaw, socketUdpDestinationPort1=socketUdpDestinationPort1, routeTableEntry=routeTableEntry, dialOutgoingPAPID=dialOutgoingPAPID, pairConnection=pairConnection, printerTable=printerTable, networkLocalLog=networkLocalLog, defaultGateway=defaultGateway, udpPortAuthenticationServer=udpPortAuthenticationServer, socketEntry=socketEntry, mailWarningIpChanged=mailWarningIpChanged, portBaudRateManual=portBaudRateManual, trapServerColdStart=trapServerColdStart, monitorInterface=monitorInterface, terminalInterrupt=terminalInterrupt, serverLocation=serverLocation, dialTable=dialTable, portDCDChangedStatusTable=portDCDChangedStatusTable, emailWarningUserName=emailWarningUserName, socketUdpDestinationAddress3End=socketUdpDestinationAddress3End, comParamPortEntry=comParamPortEntry, httpConsole=httpConsole, dnsServer1IpAddr=dnsServer1IpAddr, accessibleIpListTable=accessibleIpListTable, timeServer=timeServer, alarmServerEthernet1LinkDown=alarmServerEthernet1LinkDown, dialAuthType=dialAuthType, userTableEntry=userTableEntry, serverName=serverName, dialPPPDMode=dialPPPDMode, monitorDSR=monitorDSR, socketUdpDestinationAddress4Begin=socketUdpDestinationAddress4Begin, hostTable=hostTable, printerEntry=printerEntry, ethernet3LinkDownAcknowledge=ethernet3LinkDownAcknowledge, dataPackingPortEntry=dataPackingPortEntry, accessibleIpListEntry=accessibleIpListEntry, emailRequiresAuthentication=emailRequiresAuthentication, portInterface=portInterface, lan1Speed=lan1Speed, sysIpAddress=sysIpAddress, portDataBits=portDataBits, loadFactoryDefaultSetting=loadFactoryDefaultSetting, authenticationServer=authenticationServer, viewLanSpeed=viewLanSpeed, pairConnectionTable=pairConnectionTable, socketInactivityTime=socketInactivityTime, printerGroup=printerGroup, dDNSHostName=dDNSHostName, socketTcpServerConnectionDownDTR=socketTcpServerConnectionDownDTR, lcmReadOnlyProtect=lcmReadOnlyProtect, socketIgnoreJammedIp=socketIgnoreJammedIp, remoteIpIndex=remoteIpIndex, monitorErrorCountParity=monitorErrorCountParity, terminalBreak=terminalBreak, PortList=PortList, dialPAPPassword=dialPAPPassword, deviceControlTcpAliveCheck=deviceControlTcpAliveCheck, socketAllowDriverControl=socketAllowDriverControl, trapVersion=trapVersion)
