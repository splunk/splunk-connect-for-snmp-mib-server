#
# PySNMP MIB module HH3C-MPLSOAM-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/HH3C-MPLSOAM-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 19:15:43 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, OctetString, Integer = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "OctetString", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueSizeConstraint, ConstraintsUnion, ValueRangeConstraint, ConstraintsIntersection, SingleValueConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueSizeConstraint", "ConstraintsUnion", "ValueRangeConstraint", "ConstraintsIntersection", "SingleValueConstraint")
hh3cCommon, = mibBuilder.importSymbols("HH3C-OID-MIB", "hh3cCommon")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
IpAddress, Unsigned32, TimeTicks, Counter64, Integer32, Counter32, Gauge32, MibIdentifier, MibScalar, MibTable, MibTableRow, MibTableColumn, ModuleIdentity, NotificationType, iso, Bits, ObjectIdentity = mibBuilder.importSymbols("SNMPv2-SMI", "IpAddress", "Unsigned32", "TimeTicks", "Counter64", "Integer32", "Counter32", "Gauge32", "MibIdentifier", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "ModuleIdentity", "NotificationType", "iso", "Bits", "ObjectIdentity")
RowStatus, DisplayString, TruthValue, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "RowStatus", "DisplayString", "TruthValue", "TextualConvention")
hh3cMplsOam = ModuleIdentity((1, 3, 6, 1, 4, 1, 25506, 2, 79))
if mibBuilder.loadTexts: hh3cMplsOam.setLastUpdated('200703310000Z')
if mibBuilder.loadTexts: hh3cMplsOam.setOrganization('Hangzhou H3C Tech. Co., Ltd.')
class Hh3cMplsOAMDefectType(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11))
    namedValues = NamedValues(("dServer", 1), ("dPeerMe", 2), ("dLOCV", 3), ("dTTSIMismatch", 4), ("dTTSIMismerge", 5), ("dExcess", 6), ("dUnknown", 7), ("dRlsnDown", 8), ("dLspDown", 9), ("dME", 10), ("noDefect", 11))

class Hh3cMplsOAMDetectFreq(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))
    namedValues = NamedValues(("ffd10ms", 1), ("ffd20ms", 2), ("ffd50ms", 3), ("ffd100ms", 4), ("ffd200ms", 5), ("ffd500ms", 6), ("cv1000ms", 7))

hh3cMplsOamScalarGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 25506, 2, 79, 1))
hh3cMplsOamCapability = MibScalar((1, 3, 6, 1, 4, 1, 25506, 2, 79, 1, 1), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hh3cMplsOamCapability.setStatus('current')
hh3cMplsOamTrapOpen = MibScalar((1, 3, 6, 1, 4, 1, 25506, 2, 79, 1, 2), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hh3cMplsOamTrapOpen.setStatus('current')
hh3cMplsOamTable = MibIdentifier((1, 3, 6, 1, 4, 1, 25506, 2, 79, 2))
hh3cMplsOamIgrTable = MibTable((1, 3, 6, 1, 4, 1, 25506, 2, 79, 2, 1), )
if mibBuilder.loadTexts: hh3cMplsOamIgrTable.setStatus('current')
hh3cMplsOamIgrEntry = MibTableRow((1, 3, 6, 1, 4, 1, 25506, 2, 79, 2, 1, 1), ).setIndexNames((0, "HH3C-MPLSOAM-MIB", "hh3cMplsOamIgrIndex"))
if mibBuilder.loadTexts: hh3cMplsOamIgrEntry.setStatus('current')
hh3cMplsOamIgrIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 79, 2, 1, 1, 1), Unsigned32())
if mibBuilder.loadTexts: hh3cMplsOamIgrIndex.setStatus('current')
hh3cMplsOamIgrLspName = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 79, 2, 1, 1, 2), OctetString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cMplsOamIgrLspName.setStatus('current')
hh3cMplsOamIgrDetectType = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 79, 2, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("cv", 1), ("ffd", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cMplsOamIgrDetectType.setStatus('current')
hh3cMplsOamIgrDetectFreq = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 79, 2, 1, 1, 4), Hh3cMplsOAMDetectFreq()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cMplsOamIgrDetectFreq.setStatus('current')
hh3cMplsOamIgrRevType = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 79, 2, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("private", 1), ("share", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cMplsOamIgrRevType.setStatus('current')
hh3cMplsOamIgrRevLspName = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 79, 2, 1, 1, 6), OctetString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cMplsOamIgrRevLspName.setStatus('current')
hh3cMplsOamIgrLspId = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 79, 2, 1, 1, 7), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cMplsOamIgrLspId.setStatus('current')
hh3cMplsOamIgrEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 79, 2, 1, 1, 8), TruthValue().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cMplsOamIgrEnable.setStatus('current')
hh3cMplsOamIgrDefectType = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 79, 2, 1, 1, 9), Hh3cMplsOAMDefectType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cMplsOamIgrDefectType.setStatus('current')
hh3cMplsOamIgrRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 79, 2, 1, 1, 10), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cMplsOamIgrRowStatus.setStatus('current')
hh3cMplsOamEgrTable = MibTable((1, 3, 6, 1, 4, 1, 25506, 2, 79, 2, 2), )
if mibBuilder.loadTexts: hh3cMplsOamEgrTable.setStatus('current')
hh3cMplsOamEgrEntry = MibTableRow((1, 3, 6, 1, 4, 1, 25506, 2, 79, 2, 2, 1), ).setIndexNames((0, "HH3C-MPLSOAM-MIB", "hh3cMplsOamEgrIndex"))
if mibBuilder.loadTexts: hh3cMplsOamEgrEntry.setStatus('current')
hh3cMplsOamEgrIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 79, 2, 2, 1, 1), Unsigned32())
if mibBuilder.loadTexts: hh3cMplsOamEgrIndex.setStatus('current')
hh3cMplsOamEgrLspName = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 79, 2, 2, 1, 2), OctetString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cMplsOamEgrLspName.setStatus('current')
hh3cMplsOamEgrDetectType = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 79, 2, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("cv", 1), ("ffd", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cMplsOamEgrDetectType.setStatus('current')
hh3cMplsOamEgrDetectFreq = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 79, 2, 2, 1, 4), Hh3cMplsOAMDetectFreq()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cMplsOamEgrDetectFreq.setStatus('current')
hh3cMplsOamEgrRevType = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 79, 2, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("private", 1), ("share", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cMplsOamEgrRevType.setStatus('current')
hh3cMplsOamEgrRevLspName = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 79, 2, 2, 1, 6), OctetString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cMplsOamEgrRevLspName.setStatus('current')
hh3cMplsOamEgrLsrId = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 79, 2, 2, 1, 7), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cMplsOamEgrLsrId.setStatus('current')
hh3cMplsOamEgrLspId = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 79, 2, 2, 1, 8), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cMplsOamEgrLspId.setStatus('current')
hh3cMplsOamEgrEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 79, 2, 2, 1, 9), TruthValue().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cMplsOamEgrEnable.setStatus('current')
hh3cMplsOamEgrDefectType = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 79, 2, 2, 1, 10), Hh3cMplsOAMDefectType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cMplsOamEgrDefectType.setStatus('current')
hh3cMplsOamEgrRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 79, 2, 2, 1, 11), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cMplsOamEgrRowStatus.setStatus('current')
hh3cMplsOamNotifications = MibIdentifier((1, 3, 6, 1, 4, 1, 25506, 2, 79, 3))
hh3cMplsOamIgrLSPOutDefect = NotificationType((1, 3, 6, 1, 4, 1, 25506, 2, 79, 3, 1)).setObjects(("HH3C-MPLSOAM-MIB", "hh3cMplsOamIgrLspName"), ("HH3C-MPLSOAM-MIB", "hh3cMplsOamIgrDefectType"))
if mibBuilder.loadTexts: hh3cMplsOamIgrLSPOutDefect.setStatus('current')
hh3cMplsOamIgrLSPInDefect = NotificationType((1, 3, 6, 1, 4, 1, 25506, 2, 79, 3, 2)).setObjects(("HH3C-MPLSOAM-MIB", "hh3cMplsOamIgrLspName"), ("HH3C-MPLSOAM-MIB", "hh3cMplsOamIgrDefectType"))
if mibBuilder.loadTexts: hh3cMplsOamIgrLSPInDefect.setStatus('current')
hh3cMplsOamEgrLSPOutDefect = NotificationType((1, 3, 6, 1, 4, 1, 25506, 2, 79, 3, 3)).setObjects(("HH3C-MPLSOAM-MIB", "hh3cMplsOamEgrLspName"), ("HH3C-MPLSOAM-MIB", "hh3cMplsOamEgrDefectType"))
if mibBuilder.loadTexts: hh3cMplsOamEgrLSPOutDefect.setStatus('current')
hh3cMplsOamEgrLSPInDefect = NotificationType((1, 3, 6, 1, 4, 1, 25506, 2, 79, 3, 4)).setObjects(("HH3C-MPLSOAM-MIB", "hh3cMplsOamEgrLspName"), ("HH3C-MPLSOAM-MIB", "hh3cMplsOamEgrDefectType"))
if mibBuilder.loadTexts: hh3cMplsOamEgrLSPInDefect.setStatus('current')
mibBuilder.exportSymbols("HH3C-MPLSOAM-MIB", hh3cMplsOamEgrDetectFreq=hh3cMplsOamEgrDetectFreq, hh3cMplsOamIgrDetectType=hh3cMplsOamIgrDetectType, hh3cMplsOamCapability=hh3cMplsOamCapability, hh3cMplsOamIgrLSPInDefect=hh3cMplsOamIgrLSPInDefect, hh3cMplsOamEgrIndex=hh3cMplsOamEgrIndex, hh3cMplsOamEgrRowStatus=hh3cMplsOamEgrRowStatus, hh3cMplsOamIgrLspId=hh3cMplsOamIgrLspId, hh3cMplsOamIgrDefectType=hh3cMplsOamIgrDefectType, hh3cMplsOamIgrTable=hh3cMplsOamIgrTable, hh3cMplsOamTable=hh3cMplsOamTable, hh3cMplsOamEgrEnable=hh3cMplsOamEgrEnable, hh3cMplsOamEgrLspId=hh3cMplsOamEgrLspId, hh3cMplsOamNotifications=hh3cMplsOamNotifications, hh3cMplsOamEgrRevLspName=hh3cMplsOamEgrRevLspName, hh3cMplsOamEgrLspName=hh3cMplsOamEgrLspName, PYSNMP_MODULE_ID=hh3cMplsOam, hh3cMplsOamIgrLspName=hh3cMplsOamIgrLspName, hh3cMplsOamIgrRevType=hh3cMplsOamIgrRevType, hh3cMplsOamIgrRevLspName=hh3cMplsOamIgrRevLspName, hh3cMplsOamEgrDefectType=hh3cMplsOamEgrDefectType, hh3cMplsOamIgrEntry=hh3cMplsOamIgrEntry, hh3cMplsOamIgrRowStatus=hh3cMplsOamIgrRowStatus, hh3cMplsOamEgrDetectType=hh3cMplsOamEgrDetectType, hh3cMplsOam=hh3cMplsOam, hh3cMplsOamEgrLsrId=hh3cMplsOamEgrLsrId, Hh3cMplsOAMDefectType=Hh3cMplsOAMDefectType, hh3cMplsOamScalarGroup=hh3cMplsOamScalarGroup, hh3cMplsOamEgrLSPInDefect=hh3cMplsOamEgrLSPInDefect, Hh3cMplsOAMDetectFreq=Hh3cMplsOAMDetectFreq, hh3cMplsOamEgrRevType=hh3cMplsOamEgrRevType, hh3cMplsOamIgrDetectFreq=hh3cMplsOamIgrDetectFreq, hh3cMplsOamTrapOpen=hh3cMplsOamTrapOpen, hh3cMplsOamEgrTable=hh3cMplsOamEgrTable, hh3cMplsOamEgrLSPOutDefect=hh3cMplsOamEgrLSPOutDefect, hh3cMplsOamIgrLSPOutDefect=hh3cMplsOamIgrLSPOutDefect, hh3cMplsOamIgrEnable=hh3cMplsOamIgrEnable, hh3cMplsOamEgrEntry=hh3cMplsOamEgrEntry, hh3cMplsOamIgrIndex=hh3cMplsOamIgrIndex)
