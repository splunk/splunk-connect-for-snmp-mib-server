#
# PySNMP MIB module Fore-SONET-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/Fore-SONET-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 19:03:49 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, OctetString, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "Integer", "OctetString", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsUnion, ConstraintsIntersection, SingleValueConstraint, ValueSizeConstraint, ValueRangeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsUnion", "ConstraintsIntersection", "SingleValueConstraint", "ValueSizeConstraint", "ValueRangeConstraint")
asx, = mibBuilder.importSymbols("Fore-Common-MIB", "asx")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
Gauge32, MibIdentifier, ModuleIdentity, Counter64, NotificationType, TimeTicks, Integer32, iso, Bits, ObjectIdentity, Unsigned32, IpAddress, Counter32, MibScalar, MibTable, MibTableRow, MibTableColumn = mibBuilder.importSymbols("SNMPv2-SMI", "Gauge32", "MibIdentifier", "ModuleIdentity", "Counter64", "NotificationType", "TimeTicks", "Integer32", "iso", "Bits", "ObjectIdentity", "Unsigned32", "IpAddress", "Counter32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn")
TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString")
foreSonetModule = ModuleIdentity((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 1, 4))
if mibBuilder.loadTexts: foreSonetModule.setLastUpdated('9911050000Z')
if mibBuilder.loadTexts: foreSonetModule.setOrganization('FORE')
sonetConfGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 1, 4, 1))
sonetStatsGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 1, 4, 2))
sonetConfTable = MibTable((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 1, 4, 1, 1), )
if mibBuilder.loadTexts: sonetConfTable.setStatus('current')
sonetConfEntry = MibTableRow((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 1, 4, 1, 1, 1), ).setIndexNames((0, "Fore-SONET-MIB", "sonetConfBoard"), (0, "Fore-SONET-MIB", "sonetConfModule"), (0, "Fore-SONET-MIB", "sonetConfPort"))
if mibBuilder.loadTexts: sonetConfEntry.setStatus('current')
sonetConfBoard = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 1, 4, 1, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sonetConfBoard.setStatus('current')
sonetConfModule = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 1, 4, 1, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sonetConfModule.setStatus('current')
sonetConfPort = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 1, 4, 1, 1, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sonetConfPort.setStatus('current')
sonetLineType = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 1, 4, 1, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("sonetOther", 1), ("sonetSingleModeShortRange", 2), ("sonetSingleModeMediumRange", 3), ("sonetMultiMode", 4), ("sonetUTP", 5), ("sonetCoax", 6))).clone('sonetMultiMode')).setMaxAccess("readonly")
if mibBuilder.loadTexts: sonetLineType.setStatus('current')
sonetLineCoding = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 1, 4, 1, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("sonetOther", 1), ("sonetB3ZS", 2), ("sonetCMI", 3), ("sonetNRZ", 4), ("sonetRZ", 5))).clone('sonetNRZ')).setMaxAccess("readonly")
if mibBuilder.loadTexts: sonetLineCoding.setStatus('current')
sonetFramingStandardDefault = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 1, 4, 1, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("atmSONET", 1), ("atmSDH", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sonetFramingStandardDefault.setStatus('current')
sonetFramingStandardOper = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 1, 4, 1, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("atmSONET", 1), ("atmSDH", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sonetFramingStandardOper.setStatus('current')
sonetPathWidth = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 1, 4, 1, 1, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("sts1", 1), ("sts3c", 2), ("sts9c", 3), ("sts12c", 4), ("sts24c", 5), ("sts48c", 6))).clone('sts3c')).setMaxAccess("readonly")
if mibBuilder.loadTexts: sonetPathWidth.setStatus('current')
sonetLoopbackConfig = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 1, 4, 1, 1, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("sonetNoLoop", 1), ("sonetLineLoop", 2), ("sonetDiagLoop", 3), ("sonetOtherLoop", 4), ("sonetPathLoop", 5))).clone('sonetNoLoop')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sonetLoopbackConfig.setStatus('current')
sonetTxClockSource = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 1, 4, 1, 1, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("rxTiming", 1), ("localTiming", 2))).clone('localTiming')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sonetTxClockSource.setStatus('current')
sonetRxScrambling = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 1, 4, 1, 1, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("descrambling", 1), ("noDescrambling", 2))).clone('descrambling')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sonetRxScrambling.setStatus('current')
sonetTxScrambling = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 1, 4, 1, 1, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("scrambling", 1), ("noScrambling", 2))).clone('scrambling')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sonetTxScrambling.setStatus('current')
sonetSectionStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 1, 4, 1, 1, 1, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 6)).clone(1)).setMaxAccess("readonly")
if mibBuilder.loadTexts: sonetSectionStatus.setStatus('current')
sonetLineStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 1, 4, 1, 1, 1, 14), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 6)).clone(1)).setMaxAccess("readonly")
if mibBuilder.loadTexts: sonetLineStatus.setStatus('current')
sonetPathStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 1, 4, 1, 1, 1, 15), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 62)).clone(1)).setMaxAccess("readonly")
if mibBuilder.loadTexts: sonetPathStatus.setStatus('current')
sonetIdleUnassignedCells = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 1, 4, 1, 1, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("unassigned", 1), ("idle", 2))).clone('unassigned')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sonetIdleUnassignedCells.setStatus('current')
sonetAtmStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 1, 4, 1, 1, 1, 17), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2)).clone(1)).setMaxAccess("readonly")
if mibBuilder.loadTexts: sonetAtmStatus.setStatus('current')
sonetLineAis = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 1, 4, 1, 1, 1, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("sonetLineAisOff", 1), ("sonetLineAisOn", 2))).clone('sonetLineAisOff')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sonetLineAis.setStatus('current')
sonetLineRdi = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 1, 4, 1, 1, 1, 19), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("sonetLineRdiOff", 1), ("sonetLineRdiOn", 2), ("sonetLineRdiAuto", 3))).clone('sonetLineRdiAuto')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sonetLineRdi.setStatus('current')
sonetPathAis = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 1, 4, 1, 1, 1, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("sonetPathAisOff", 1), ("sonetPathAisOn", 2))).clone('sonetPathAisOff')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sonetPathAis.setStatus('current')
sonetPathRdi = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 1, 4, 1, 1, 1, 21), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("sonetPathRdiOff", 1), ("sonetPathRdiOn", 2), ("sonetPathRdiAuto", 3))).clone('sonetPathRdiAuto')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sonetPathRdi.setStatus('current')
sonetFebe = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 1, 4, 1, 1, 1, 22), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 3))).clone(namedValues=NamedValues(("sonetFebeOff", 1), ("sonetFebeAuto", 3))).clone('sonetFebeAuto')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sonetFebe.setStatus('current')
sonetRxPathSignalLabel = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 1, 4, 1, 1, 1, 23), Integer32().clone(19)).setMaxAccess("readonly")
if mibBuilder.loadTexts: sonetRxPathSignalLabel.setStatus('current')
sonetTxPathSignalLabel = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 1, 4, 1, 1, 1, 24), Integer32().clone(19)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sonetTxPathSignalLabel.setStatus('current')
sonetArbitraryPointer = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 1, 4, 1, 1, 1, 25), Integer32().clone(522)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sonetArbitraryPointer.setStatus('current')
sonetSectionDiagnostic = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 1, 4, 1, 1, 1, 26), Integer32().clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sonetSectionDiagnostic.setStatus('current')
sonetLineDiagnostic = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 1, 4, 1, 1, 1, 27), Integer32().clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sonetLineDiagnostic.setStatus('current')
sonetPathDiagnostic = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 1, 4, 1, 1, 1, 28), Integer32().clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sonetPathDiagnostic.setStatus('current')
sonetPathPointerDiagnostic = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 1, 4, 1, 1, 1, 29), Integer32().clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sonetPathPointerDiagnostic.setStatus('current')
sonetAtmDiagnostic = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 1, 4, 1, 1, 1, 30), Integer32().clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sonetAtmDiagnostic.setStatus('current')
sonetLineBipThrSeconds = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 1, 4, 1, 1, 1, 31), Integer32().clone(10)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sonetLineBipThrSeconds.setStatus('current')
sonetLineBipThrErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 1, 4, 1, 1, 1, 32), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sonetLineBipThrErrors.setStatus('current')
sonetLineBipFailEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 1, 4, 1, 1, 1, 33), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sonetLineBipFailEnable.setStatus('current')
sonetLineSignalDegradeBer = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 1, 4, 1, 1, 1, 34), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sonetLineSignalDegradeBer.setStatus('current')
sonetLineSignalFailBer = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 1, 4, 1, 1, 1, 35), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sonetLineSignalFailBer.setStatus('current')
sonetLineBerErrorModel = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 1, 4, 1, 1, 1, 36), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("errorModelNone", 0), ("errorModelRandom", 1), ("errorModelBurst", 2))).clone('errorModelRandom')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sonetLineBerErrorModel.setStatus('current')
sonetLineBerState = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 1, 4, 1, 1, 1, 37), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("berStateOk", 0), ("berStateSigDegrade", 1), ("berStateSigFail", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sonetLineBerState.setStatus('current')
sonetSectionTable = MibTable((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 1, 4, 2, 1), )
if mibBuilder.loadTexts: sonetSectionTable.setStatus('current')
sonetSectionEntry = MibTableRow((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 1, 4, 2, 1, 1), ).setIndexNames((0, "Fore-SONET-MIB", "sonetSectionBoard"), (0, "Fore-SONET-MIB", "sonetSectionModule"), (0, "Fore-SONET-MIB", "sonetSectionPort"))
if mibBuilder.loadTexts: sonetSectionEntry.setStatus('current')
sonetSectionBoard = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 1, 4, 2, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sonetSectionBoard.setStatus('current')
sonetSectionModule = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 1, 4, 2, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sonetSectionModule.setStatus('current')
sonetSectionPort = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 1, 4, 2, 1, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sonetSectionPort.setStatus('current')
sonetSectionBIPs = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 1, 4, 2, 1, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sonetSectionBIPs.setStatus('current')
sonetSectionLOSs = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 1, 4, 2, 1, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sonetSectionLOSs.setStatus('current')
sonetSectionLOFs = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 1, 4, 2, 1, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sonetSectionLOFs.setStatus('current')
sonetLineTable = MibTable((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 1, 4, 2, 2), )
if mibBuilder.loadTexts: sonetLineTable.setStatus('current')
sonetLineEntry = MibTableRow((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 1, 4, 2, 2, 1), ).setIndexNames((0, "Fore-SONET-MIB", "sonetLineBoard"), (0, "Fore-SONET-MIB", "sonetLineModule"), (0, "Fore-SONET-MIB", "sonetLinePort"))
if mibBuilder.loadTexts: sonetLineEntry.setStatus('current')
sonetLineBoard = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 1, 4, 2, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sonetLineBoard.setStatus('current')
sonetLineModule = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 1, 4, 2, 2, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sonetLineModule.setStatus('current')
sonetLinePort = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 1, 4, 2, 2, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sonetLinePort.setStatus('current')
sonetLineBIPs = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 1, 4, 2, 2, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sonetLineBIPs.setStatus('current')
sonetLineFEBEs = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 1, 4, 2, 2, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sonetLineFEBEs.setStatus('current')
sonetLineAISs = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 1, 4, 2, 2, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sonetLineAISs.setStatus('current')
sonetLineRDIs = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 1, 4, 2, 2, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sonetLineRDIs.setStatus('current')
sonetPathTable = MibTable((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 1, 4, 2, 3), )
if mibBuilder.loadTexts: sonetPathTable.setStatus('current')
sonetPathEntry = MibTableRow((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 1, 4, 2, 3, 1), ).setIndexNames((0, "Fore-SONET-MIB", "sonetPathBoard"), (0, "Fore-SONET-MIB", "sonetPathModule"), (0, "Fore-SONET-MIB", "sonetPathPort"))
if mibBuilder.loadTexts: sonetPathEntry.setStatus('current')
sonetPathBoard = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 1, 4, 2, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sonetPathBoard.setStatus('current')
sonetPathModule = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 1, 4, 2, 3, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sonetPathModule.setStatus('current')
sonetPathPort = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 1, 4, 2, 3, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sonetPathPort.setStatus('current')
sonetPathBIPs = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 1, 4, 2, 3, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sonetPathBIPs.setStatus('current')
sonetPathFEBEs = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 1, 4, 2, 3, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sonetPathFEBEs.setStatus('current')
sonetPathLOPs = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 1, 4, 2, 3, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sonetPathLOPs.setStatus('current')
sonetPathAISs = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 1, 4, 2, 3, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sonetPathAISs.setStatus('current')
sonetPathRDIs = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 1, 4, 2, 3, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sonetPathRDIs.setStatus('current')
sonetPathUNEQs = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 1, 4, 2, 3, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sonetPathUNEQs.setStatus('current')
sonetPathPLMs = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 1, 4, 2, 3, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sonetPathPLMs.setStatus('current')
sonetAtmTable = MibTable((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 1, 4, 2, 4), )
if mibBuilder.loadTexts: sonetAtmTable.setStatus('current')
sonetAtmEntry = MibTableRow((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 1, 4, 2, 4, 1), ).setIndexNames((0, "Fore-SONET-MIB", "sonetAtmBoard"), (0, "Fore-SONET-MIB", "sonetAtmModule"), (0, "Fore-SONET-MIB", "sonetAtmPort"))
if mibBuilder.loadTexts: sonetAtmEntry.setStatus('current')
sonetAtmBoard = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 1, 4, 2, 4, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sonetAtmBoard.setStatus('current')
sonetAtmModule = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 1, 4, 2, 4, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sonetAtmModule.setStatus('current')
sonetAtmPort = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 1, 4, 2, 4, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sonetAtmPort.setStatus('current')
sonetAtmCorrectableHCSs = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 1, 4, 2, 4, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sonetAtmCorrectableHCSs.setStatus('current')
sonetAtmUncorrectableHCSs = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 1, 4, 2, 4, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sonetAtmUncorrectableHCSs.setStatus('current')
sonetAtmLCDs = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 1, 4, 2, 4, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sonetAtmLCDs.setStatus('current')
mibBuilder.exportSymbols("Fore-SONET-MIB", sonetSectionTable=sonetSectionTable, sonetPathPort=sonetPathPort, sonetLineBipThrErrors=sonetLineBipThrErrors, sonetSectionStatus=sonetSectionStatus, sonetLineStatus=sonetLineStatus, sonetPathEntry=sonetPathEntry, sonetPathPointerDiagnostic=sonetPathPointerDiagnostic, sonetPathAis=sonetPathAis, sonetSectionEntry=sonetSectionEntry, sonetStatsGroup=sonetStatsGroup, sonetLineRDIs=sonetLineRDIs, sonetSectionDiagnostic=sonetSectionDiagnostic, sonetPathTable=sonetPathTable, sonetLineSignalDegradeBer=sonetLineSignalDegradeBer, sonetPathModule=sonetPathModule, sonetPathWidth=sonetPathWidth, sonetAtmPort=sonetAtmPort, sonetFebe=sonetFebe, sonetFramingStandardDefault=sonetFramingStandardDefault, sonetConfGroup=sonetConfGroup, sonetAtmTable=sonetAtmTable, sonetLoopbackConfig=sonetLoopbackConfig, sonetTxScrambling=sonetTxScrambling, sonetPathFEBEs=sonetPathFEBEs, foreSonetModule=foreSonetModule, sonetPathStatus=sonetPathStatus, sonetAtmModule=sonetAtmModule, sonetLineEntry=sonetLineEntry, sonetLineSignalFailBer=sonetLineSignalFailBer, sonetConfModule=sonetConfModule, sonetAtmDiagnostic=sonetAtmDiagnostic, sonetAtmStatus=sonetAtmStatus, sonetTxPathSignalLabel=sonetTxPathSignalLabel, sonetLineCoding=sonetLineCoding, sonetSectionLOFs=sonetSectionLOFs, sonetSectionBoard=sonetSectionBoard, sonetLinePort=sonetLinePort, sonetPathPLMs=sonetPathPLMs, sonetLineBerState=sonetLineBerState, sonetLineBerErrorModel=sonetLineBerErrorModel, sonetLineBipThrSeconds=sonetLineBipThrSeconds, sonetSectionPort=sonetSectionPort, sonetPathUNEQs=sonetPathUNEQs, sonetLineAis=sonetLineAis, sonetPathDiagnostic=sonetPathDiagnostic, sonetLineBoard=sonetLineBoard, sonetLineBIPs=sonetLineBIPs, sonetIdleUnassignedCells=sonetIdleUnassignedCells, sonetAtmCorrectableHCSs=sonetAtmCorrectableHCSs, sonetAtmLCDs=sonetAtmLCDs, sonetLineAISs=sonetLineAISs, sonetConfEntry=sonetConfEntry, sonetLineType=sonetLineType, sonetTxClockSource=sonetTxClockSource, sonetConfTable=sonetConfTable, sonetRxScrambling=sonetRxScrambling, sonetArbitraryPointer=sonetArbitraryPointer, sonetPathAISs=sonetPathAISs, sonetPathRdi=sonetPathRdi, sonetAtmBoard=sonetAtmBoard, sonetAtmEntry=sonetAtmEntry, sonetSectionModule=sonetSectionModule, sonetRxPathSignalLabel=sonetRxPathSignalLabel, sonetSectionBIPs=sonetSectionBIPs, sonetPathRDIs=sonetPathRDIs, sonetAtmUncorrectableHCSs=sonetAtmUncorrectableHCSs, sonetConfPort=sonetConfPort, PYSNMP_MODULE_ID=foreSonetModule, sonetPathLOPs=sonetPathLOPs, sonetLineFEBEs=sonetLineFEBEs, sonetLineTable=sonetLineTable, sonetConfBoard=sonetConfBoard, sonetLineModule=sonetLineModule, sonetFramingStandardOper=sonetFramingStandardOper, sonetPathBoard=sonetPathBoard, sonetSectionLOSs=sonetSectionLOSs, sonetLineDiagnostic=sonetLineDiagnostic, sonetPathBIPs=sonetPathBIPs, sonetLineRdi=sonetLineRdi, sonetLineBipFailEnable=sonetLineBipFailEnable)
