#
# PySNMP MIB module H3C-BFD-STD-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/H3C-BFD-STD-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 19:08:09 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, Integer, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "OctetString", "Integer", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsUnion, ValueSizeConstraint, ValueRangeConstraint, ConstraintsIntersection, SingleValueConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsUnion", "ValueSizeConstraint", "ValueRangeConstraint", "ConstraintsIntersection", "SingleValueConstraint")
h3cCommon, = mibBuilder.importSymbols("HUAWEI-3COM-OID-MIB", "h3cCommon")
InterfaceIndex, = mibBuilder.importSymbols("IF-MIB", "InterfaceIndex")
InetPortNumber, InetAddressType, InetAddress = mibBuilder.importSymbols("INET-ADDRESS-MIB", "InetPortNumber", "InetAddressType", "InetAddress")
ModuleCompliance, ObjectGroup, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "ObjectGroup", "NotificationGroup")
ModuleIdentity, IpAddress, Counter64, MibIdentifier, Gauge32, TimeTicks, Unsigned32, NotificationType, Counter32, iso, Integer32, MibScalar, MibTable, MibTableRow, MibTableColumn, mib_2, Bits, ObjectIdentity = mibBuilder.importSymbols("SNMPv2-SMI", "ModuleIdentity", "IpAddress", "Counter64", "MibIdentifier", "Gauge32", "TimeTicks", "Unsigned32", "NotificationType", "Counter32", "iso", "Integer32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "mib-2", "Bits", "ObjectIdentity")
StorageType, TimeStamp, DisplayString, TruthValue, RowStatus, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "StorageType", "TimeStamp", "DisplayString", "TruthValue", "RowStatus", "TextualConvention")
h3cBfdMIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 2011, 10, 2, 72))
h3cBfdMIB.setRevisions(('2006-05-16 12:00',))
if mibBuilder.loadTexts: h3cBfdMIB.setLastUpdated('200605081200Z')
if mibBuilder.loadTexts: h3cBfdMIB.setOrganization('H3C')
h3cBfdNotifications = MibIdentifier((1, 3, 6, 1, 4, 1, 2011, 10, 2, 72, 0))
h3cBfdObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 2011, 10, 2, 72, 1))
h3cBfdConformance = MibIdentifier((1, 3, 6, 1, 4, 1, 2011, 10, 2, 72, 2))
h3cBfdGlobalObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 2011, 10, 2, 72, 1, 1))
class BfdSessIndexTC(TextualConvention, Unsigned32):
    status = 'current'
    displayHint = 'd'
    subtypeSpec = Unsigned32.subtypeSpec + ValueRangeConstraint(1, 4294967295)

class BfdInterval(TextualConvention, Unsigned32):
    status = 'current'
    subtypeSpec = Unsigned32.subtypeSpec + ValueRangeConstraint(1, 4294967295)

class BfdDiag(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9))
    namedValues = NamedValues(("noDiagnostic", 1), ("controlDetectionTimeExpired", 2), ("echoFunctionFailed", 3), ("neighborSignaledSessionDown", 4), ("forwardingPlaneReset", 5), ("pathDown", 6), ("concatenatedPathDown", 7), ("administrativelyDown", 8), ("reverseConcatenatedPathDown", 9))

h3cBfdVersionNumber = MibScalar((1, 3, 6, 1, 4, 1, 2011, 10, 2, 72, 1, 1, 1), Unsigned32().clone(1)).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cBfdVersionNumber.setStatus('current')
h3cBfdSysInitMode = MibScalar((1, 3, 6, 1, 4, 1, 2011, 10, 2, 72, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("active", 1), ("passive", 2))).clone('active')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: h3cBfdSysInitMode.setStatus('current')
h3cBfdIfTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 10, 2, 72, 1, 2), )
if mibBuilder.loadTexts: h3cBfdIfTable.setStatus('current')
h3cBfdIfEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 10, 2, 72, 1, 2, 1), ).setIndexNames((0, "H3C-BFD-STD-MIB", "h3cBfdIfIndex"))
if mibBuilder.loadTexts: h3cBfdIfEntry.setStatus('current')
h3cBfdIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 2, 72, 1, 2, 1, 1), InterfaceIndex()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: h3cBfdIfIndex.setStatus('current')
h3cBfdIfDesiredMinTxInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 2, 72, 1, 2, 1, 2), BfdInterval()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: h3cBfdIfDesiredMinTxInterval.setStatus('current')
h3cBfdIfDesiredMinRxInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 2, 72, 1, 2, 1, 3), BfdInterval()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: h3cBfdIfDesiredMinRxInterval.setStatus('current')
h3cBfdIfDetectMult = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 2, 72, 1, 2, 1, 4), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: h3cBfdIfDetectMult.setStatus('current')
h3cBfdIfAuthType = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 2, 72, 1, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("none", 1), ("simple", 2), ("md5", 3), ("mmd5", 4), ("sha1", 5), ("msha1", 6))).clone('none')).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cBfdIfAuthType.setStatus('current')
h3cBfdSessTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 10, 2, 72, 1, 3), )
if mibBuilder.loadTexts: h3cBfdSessTable.setStatus('current')
h3cBfdSessEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 10, 2, 72, 1, 3, 1), ).setIndexNames((0, "H3C-BFD-STD-MIB", "h3cBfdSessIfIndex"), (0, "H3C-BFD-STD-MIB", "h3cBfdSessIndex"))
if mibBuilder.loadTexts: h3cBfdSessEntry.setStatus('current')
h3cBfdSessIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 2, 72, 1, 3, 1, 1), InterfaceIndex()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: h3cBfdSessIfIndex.setStatus('current')
h3cBfdSessIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 2, 72, 1, 3, 1, 2), BfdSessIndexTC()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: h3cBfdSessIndex.setStatus('current')
h3cBfdSessAppSupportId = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 2, 72, 1, 3, 1, 3), Bits().clone(namedValues=NamedValues(("none", 0), ("ospf", 1), ("isis", 2), ("bgp", 3), ("mpls", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cBfdSessAppSupportId.setStatus('current')
h3cBfdSessLocalDiscr = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 2, 72, 1, 3, 1, 4), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cBfdSessLocalDiscr.setStatus('current')
h3cBfdSessRemoteDiscr = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 2, 72, 1, 3, 1, 5), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cBfdSessRemoteDiscr.setStatus('current')
h3cBfdSessDstPort = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 2, 72, 1, 3, 1, 6), InetPortNumber().clone(3784)).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cBfdSessDstPort.setStatus('current')
h3cBfdSessOperMode = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 2, 72, 1, 3, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("asynchModeWOEchoFun", 1), ("demandModeWOEchoFunction", 2), ("asyncModeWEchoFun", 3), ("demandModeWEchoFunction", 4))).clone('asynchModeWOEchoFun')).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cBfdSessOperMode.setStatus('current')
h3cBfdSessAddrType = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 2, 72, 1, 3, 1, 8), InetAddressType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cBfdSessAddrType.setStatus('current')
h3cBfdSessLocalAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 2, 72, 1, 3, 1, 9), InetAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cBfdSessLocalAddr.setStatus('current')
h3cBfdSessRemoteAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 2, 72, 1, 3, 1, 10), InetAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cBfdSessRemoteAddr.setStatus('current')
h3cBfdSessLocalDiag = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 2, 72, 1, 3, 1, 11), BfdDiag().clone('noDiagnostic')).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cBfdSessLocalDiag.setStatus('current')
h3cBfdSessState = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 2, 72, 1, 3, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("adminDown", 0), ("down", 1), ("init", 2), ("up", 3))).clone('down')).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cBfdSessState.setStatus('current')
h3cBfdSessControlPlanIndepFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 2, 72, 1, 3, 1, 13), TruthValue().clone('true')).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cBfdSessControlPlanIndepFlag.setStatus('current')
h3cBfdSessAuthFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 2, 72, 1, 3, 1, 14), TruthValue().clone('false')).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cBfdSessAuthFlag.setStatus('current')
h3cBfdSessDemandModeFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 2, 72, 1, 3, 1, 15), TruthValue().clone('false')).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cBfdSessDemandModeFlag.setStatus('current')
h3cBfdSessStatTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 10, 2, 72, 1, 4), )
if mibBuilder.loadTexts: h3cBfdSessStatTable.setStatus('current')
h3cBfdSessStatEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 10, 2, 72, 1, 4, 1), )
h3cBfdSessEntry.registerAugmentions(("H3C-BFD-STD-MIB", "h3cBfdSessStatEntry"))
h3cBfdSessStatEntry.setIndexNames(*h3cBfdSessEntry.getIndexNames())
if mibBuilder.loadTexts: h3cBfdSessStatEntry.setStatus('current')
h3cBfdSessStatPktInHC = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 2, 72, 1, 4, 1, 1), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cBfdSessStatPktInHC.setStatus('current')
h3cBfdSessStatPktOutHC = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 2, 72, 1, 4, 1, 2), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cBfdSessStatPktOutHC.setStatus('current')
h3cBfdSessStatDownCount = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 2, 72, 1, 4, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cBfdSessStatDownCount.setStatus('current')
h3cBfdSessStatPktDiscard = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 2, 72, 1, 4, 1, 4), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cBfdSessStatPktDiscard.setStatus('current')
h3cBfdSessStatPktLost = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 2, 72, 1, 4, 1, 5), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cBfdSessStatPktLost.setStatus('current')
h3cBfdSessPerfTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 10, 2, 72, 1, 5), )
if mibBuilder.loadTexts: h3cBfdSessPerfTable.setStatus('current')
h3cBfdSessPerfEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 10, 2, 72, 1, 5, 1), )
h3cBfdSessEntry.registerAugmentions(("H3C-BFD-STD-MIB", "h3cBfdSessPerfEntry"))
h3cBfdSessPerfEntry.setIndexNames(*h3cBfdSessEntry.getIndexNames())
if mibBuilder.loadTexts: h3cBfdSessPerfEntry.setStatus('current')
h3cBfdSessPerfCreatTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 2, 72, 1, 5, 1, 1), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cBfdSessPerfCreatTime.setStatus('current')
h3cBfdSessPerfLastUpTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 2, 72, 1, 5, 1, 2), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cBfdSessPerfLastUpTime.setStatus('current')
h3cBfdSessPerfLastDownTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 2, 72, 1, 5, 1, 3), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cBfdSessPerfLastDownTime.setStatus('current')
h3cBfdSessNotificationsEnable = MibScalar((1, 3, 6, 1, 4, 1, 2011, 10, 2, 72, 1, 1, 3), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: h3cBfdSessNotificationsEnable.setStatus('current')
h3cBfdSessStateChange = NotificationType((1, 3, 6, 1, 4, 1, 2011, 10, 2, 72, 0, 1)).setObjects(("H3C-BFD-STD-MIB", "h3cBfdSessIfIndex"), ("H3C-BFD-STD-MIB", "h3cBfdSessIndex"), ("H3C-BFD-STD-MIB", "h3cBfdSessState"))
if mibBuilder.loadTexts: h3cBfdSessStateChange.setStatus('current')
h3cBfdSessAuthFail = NotificationType((1, 3, 6, 1, 4, 1, 2011, 10, 2, 72, 0, 2)).setObjects(("H3C-BFD-STD-MIB", "h3cBfdIfIndex"))
if mibBuilder.loadTexts: h3cBfdSessAuthFail.setStatus('current')
mibBuilder.exportSymbols("H3C-BFD-STD-MIB", BfdDiag=BfdDiag, PYSNMP_MODULE_ID=h3cBfdMIB, h3cBfdSessLocalAddr=h3cBfdSessLocalAddr, h3cBfdSessLocalDiscr=h3cBfdSessLocalDiscr, h3cBfdSessStatDownCount=h3cBfdSessStatDownCount, h3cBfdSessPerfEntry=h3cBfdSessPerfEntry, h3cBfdSessStatEntry=h3cBfdSessStatEntry, h3cBfdGlobalObjects=h3cBfdGlobalObjects, h3cBfdNotifications=h3cBfdNotifications, h3cBfdSessRemoteAddr=h3cBfdSessRemoteAddr, BfdSessIndexTC=BfdSessIndexTC, h3cBfdSessEntry=h3cBfdSessEntry, h3cBfdMIB=h3cBfdMIB, h3cBfdSessPerfCreatTime=h3cBfdSessPerfCreatTime, h3cBfdSessNotificationsEnable=h3cBfdSessNotificationsEnable, h3cBfdSessOperMode=h3cBfdSessOperMode, h3cBfdSessIfIndex=h3cBfdSessIfIndex, h3cBfdIfDesiredMinRxInterval=h3cBfdIfDesiredMinRxInterval, h3cBfdConformance=h3cBfdConformance, h3cBfdSessState=h3cBfdSessState, h3cBfdSessStatTable=h3cBfdSessStatTable, h3cBfdSessIndex=h3cBfdSessIndex, h3cBfdSessPerfLastUpTime=h3cBfdSessPerfLastUpTime, h3cBfdSessDstPort=h3cBfdSessDstPort, h3cBfdSessAddrType=h3cBfdSessAddrType, h3cBfdSessStatPktInHC=h3cBfdSessStatPktInHC, h3cBfdSessStatPktOutHC=h3cBfdSessStatPktOutHC, h3cBfdSessTable=h3cBfdSessTable, h3cBfdSessStatPktDiscard=h3cBfdSessStatPktDiscard, h3cBfdSessControlPlanIndepFlag=h3cBfdSessControlPlanIndepFlag, h3cBfdSysInitMode=h3cBfdSysInitMode, h3cBfdSessRemoteDiscr=h3cBfdSessRemoteDiscr, h3cBfdIfDesiredMinTxInterval=h3cBfdIfDesiredMinTxInterval, h3cBfdSessLocalDiag=h3cBfdSessLocalDiag, h3cBfdIfTable=h3cBfdIfTable, h3cBfdSessPerfLastDownTime=h3cBfdSessPerfLastDownTime, h3cBfdSessAuthFail=h3cBfdSessAuthFail, h3cBfdObjects=h3cBfdObjects, h3cBfdSessAppSupportId=h3cBfdSessAppSupportId, h3cBfdSessDemandModeFlag=h3cBfdSessDemandModeFlag, h3cBfdSessPerfTable=h3cBfdSessPerfTable, h3cBfdIfDetectMult=h3cBfdIfDetectMult, h3cBfdSessStatPktLost=h3cBfdSessStatPktLost, h3cBfdIfEntry=h3cBfdIfEntry, BfdInterval=BfdInterval, h3cBfdVersionNumber=h3cBfdVersionNumber, h3cBfdIfIndex=h3cBfdIfIndex, h3cBfdSessAuthFlag=h3cBfdSessAuthFlag, h3cBfdSessStateChange=h3cBfdSessStateChange, h3cBfdIfAuthType=h3cBfdIfAuthType)
