#
# PySNMP MIB module Nortel-Magellan-Passport-AtmCoreMIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/Nortel-Magellan-Passport-AtmCoreMIB
# Produced by pysmi-0.3.4 at Mon Apr 29 20:16:44 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, OctetString, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "Integer", "OctetString", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsUnion, ConstraintsIntersection, SingleValueConstraint, ValueSizeConstraint, ValueRangeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsUnion", "ConstraintsIntersection", "SingleValueConstraint", "ValueSizeConstraint", "ValueRangeConstraint")
Integer32, Gauge32, Counter32, DisplayString, PassportCounter64, Unsigned32, RowStatus, StorageType = mibBuilder.importSymbols("Nortel-Magellan-Passport-StandardTextualConventionsMIB", "Integer32", "Gauge32", "Counter32", "DisplayString", "PassportCounter64", "Unsigned32", "RowStatus", "StorageType")
IntegerSequence, NonReplicated, Hex, AsciiString, AsciiStringIndex, Link = mibBuilder.importSymbols("Nortel-Magellan-Passport-TextualConventionsMIB", "IntegerSequence", "NonReplicated", "Hex", "AsciiString", "AsciiStringIndex", "Link")
passportMIBs, components = mibBuilder.importSymbols("Nortel-Magellan-Passport-UsefulDefinitionsMIB", "passportMIBs", "components")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
Integer32, ModuleIdentity, IpAddress, iso, Gauge32, Counter32, ObjectIdentity, Unsigned32, MibScalar, MibTable, MibTableRow, MibTableColumn, TimeTicks, Bits, MibIdentifier, Counter64, NotificationType = mibBuilder.importSymbols("SNMPv2-SMI", "Integer32", "ModuleIdentity", "IpAddress", "iso", "Gauge32", "Counter32", "ObjectIdentity", "Unsigned32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "TimeTicks", "Bits", "MibIdentifier", "Counter64", "NotificationType")
TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString")
atmCoreMIB = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 2, 4, 2, 123))
atmIf = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114))
atmIfRowStatusTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 1), )
if mibBuilder.loadTexts: atmIfRowStatusTable.setStatus('mandatory')
atmIfRowStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 1, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-AtmCoreMIB", "atmIfIndex"))
if mibBuilder.loadTexts: atmIfRowStatusEntry.setStatus('mandatory')
atmIfRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 1, 1, 1), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmIfRowStatus.setStatus('mandatory')
atmIfComponentName = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmIfComponentName.setStatus('mandatory')
atmIfStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 1, 1, 4), StorageType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmIfStorageType.setStatus('mandatory')
atmIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 1, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1024)))
if mibBuilder.loadTexts: atmIfIndex.setStatus('mandatory')
atmIfCidDataTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 100), )
if mibBuilder.loadTexts: atmIfCidDataTable.setStatus('mandatory')
atmIfCidDataEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 100, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-AtmCoreMIB", "atmIfIndex"))
if mibBuilder.loadTexts: atmIfCidDataEntry.setStatus('mandatory')
atmIfCustomerIdentifier = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 100, 1, 1), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(1, 8191), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmIfCustomerIdentifier.setStatus('mandatory')
atmIfProvTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 110), )
if mibBuilder.loadTexts: atmIfProvTable.setStatus('mandatory')
atmIfProvEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 110, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-AtmCoreMIB", "atmIfIndex"))
if mibBuilder.loadTexts: atmIfProvEntry.setStatus('mandatory')
atmIfInterfaceName = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 110, 1, 10), Link()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmIfInterfaceName.setStatus('mandatory')
atmIfType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 110, 1, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("uni", 0), ("ppi", 1))).clone('uni')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmIfType.setStatus('obsolete')
atmIfOamSegmentBoundary = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 110, 1, 30), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("no", 0), ("yes", 1))).clone('yes')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmIfOamSegmentBoundary.setStatus('mandatory')
atmIfMaxVpcs = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 110, 1, 40), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 255)).clone(128)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmIfMaxVpcs.setStatus('obsolete')
atmIfMaxVccs = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 110, 1, 50), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 16384)).clone(255)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmIfMaxVccs.setStatus('obsolete')
atmIfTrafficShaping = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 110, 1, 60), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("enabled", 0), ("disabled", 1))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmIfTrafficShaping.setStatus('obsolete')
atmIfUnshapedTransmitQueueing = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 110, 1, 70), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("perVc", 0), ("common", 1), ("autoConfigure", 2))).clone('autoConfigure')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmIfUnshapedTransmitQueueing.setStatus('obsolete')
atmIfUsageParameterControl = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 110, 1, 80), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("enabled", 0), ("disabled", 1))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmIfUsageParameterControl.setStatus('obsolete')
atmIfMaxVpiBits = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 110, 1, 85), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(8, 8), ValueRangeConstraint(12, 12), )).clone(8)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmIfMaxVpiBits.setStatus('mandatory')
atmIfRemoteAtmInterfaceLabel = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 110, 1, 90), AsciiString().subtype(subtypeSpec=ValueSizeConstraint(0, 60)).clone(hexValue="")).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmIfRemoteAtmInterfaceLabel.setStatus('mandatory')
atmIfTxCellMemory = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 110, 1, 91), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 100)).clone(100)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmIfTxCellMemory.setStatus('mandatory')
atmIfFaultHoldOffTime = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 110, 1, 100), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 65535))).clone(namedValues=NamedValues(("n0", 0), ("infinity", 65535))).clone('infinity')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmIfFaultHoldOffTime.setStatus('mandatory')
atmIfLbkTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 120), )
if mibBuilder.loadTexts: atmIfLbkTable.setStatus('mandatory')
atmIfLbkEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 120, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-AtmCoreMIB", "atmIfIndex"))
if mibBuilder.loadTexts: atmIfLbkEntry.setStatus('mandatory')
atmIfSegLinkSideLoopback = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 120, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("on", 0), ("off", 1))).clone('off')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmIfSegLinkSideLoopback.setStatus('mandatory')
atmIfSegSwitchSideLoopback = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 120, 1, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("on", 0), ("off", 1))).clone('off')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmIfSegSwitchSideLoopback.setStatus('mandatory')
atmIfEndToEndLoopback = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 120, 1, 30), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("on", 0), ("off", 1))).clone('off')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmIfEndToEndLoopback.setStatus('mandatory')
atmIfLoopbackMonitoring = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 120, 1, 110), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("on", 0), ("off", 1))).clone('on')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmIfLoopbackMonitoring.setStatus('mandatory')
atmIfStateTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 130), )
if mibBuilder.loadTexts: atmIfStateTable.setStatus('mandatory')
atmIfStateEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 130, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-AtmCoreMIB", "atmIfIndex"))
if mibBuilder.loadTexts: atmIfStateEntry.setStatus('mandatory')
atmIfAdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 130, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("locked", 0), ("unlocked", 1), ("shuttingDown", 2))).clone('unlocked')).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmIfAdminState.setStatus('mandatory')
atmIfOperationalState = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 130, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1))).clone('disabled')).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmIfOperationalState.setStatus('mandatory')
atmIfUsageState = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 130, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("idle", 0), ("active", 1), ("busy", 2))).clone('idle')).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmIfUsageState.setStatus('mandatory')
atmIfAvailabilityStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 130, 1, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(2, 2)).setFixedLength(2)).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmIfAvailabilityStatus.setStatus('mandatory')
atmIfProceduralStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 130, 1, 5), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 1)).setFixedLength(1)).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmIfProceduralStatus.setStatus('mandatory')
atmIfControlStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 130, 1, 6), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 1)).setFixedLength(1)).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmIfControlStatus.setStatus('mandatory')
atmIfAlarmStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 130, 1, 7), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 1)).setFixedLength(1)).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmIfAlarmStatus.setStatus('mandatory')
atmIfStandbyStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 130, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 15))).clone(namedValues=NamedValues(("hotStandby", 0), ("coldStandby", 1), ("providingService", 2), ("notSet", 15))).clone('notSet')).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmIfStandbyStatus.setStatus('mandatory')
atmIfUnknownStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 130, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("false", 0), ("true", 1))).clone('false')).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmIfUnknownStatus.setStatus('mandatory')
atmIfOperTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 140), )
if mibBuilder.loadTexts: atmIfOperTable.setStatus('mandatory')
atmIfOperEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 140, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-AtmCoreMIB", "atmIfIndex"))
if mibBuilder.loadTexts: atmIfOperEntry.setStatus('mandatory')
atmIfTxCellMemoryAvailable = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 140, 1, 1), Gauge32().subtype(subtypeSpec=ValueRangeConstraint(0, 163839))).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmIfTxCellMemoryAvailable.setStatus('obsolete')
atmIfTxCellMemoryCongestionState = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 140, 1, 2), Gauge32().subtype(subtypeSpec=ValueRangeConstraint(0, 3))).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmIfTxCellMemoryCongestionState.setStatus('mandatory')
atmIfTxCellMemoryUsage = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 140, 1, 3), Gauge32().subtype(subtypeSpec=ValueRangeConstraint(0, 163839))).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmIfTxCellMemoryUsage.setStatus('mandatory')
atmIfUnshapedTransmitQueueingOper = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 140, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("perVc", 0), ("common", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmIfUnshapedTransmitQueueingOper.setStatus('obsolete')
atmIfStatsTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 150), )
if mibBuilder.loadTexts: atmIfStatsTable.setStatus('mandatory')
atmIfStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 150, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-AtmCoreMIB", "atmIfIndex"))
if mibBuilder.loadTexts: atmIfStatsEntry.setStatus('mandatory')
atmIfTransmittedCells = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 150, 1, 10), PassportCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmIfTransmittedCells.setStatus('obsolete')
atmIfTxCell = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 150, 1, 13), PassportCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmIfTxCell.setStatus('mandatory')
atmIfTxCellClp = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 150, 1, 14), PassportCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmIfTxCellClp.setStatus('mandatory')
atmIfTxCellEfci = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 150, 1, 15), PassportCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmIfTxCellEfci.setStatus('mandatory')
atmIfTxCellDiscard = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 150, 1, 16), PassportCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmIfTxCellDiscard.setStatus('mandatory')
atmIfTxCellDiscardClp = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 150, 1, 17), PassportCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmIfTxCellDiscardClp.setStatus('mandatory')
atmIfTxFrameDiscard = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 150, 1, 18), PassportCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmIfTxFrameDiscard.setStatus('mandatory')
atmIfTxFrameDiscardClp = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 150, 1, 19), PassportCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmIfTxFrameDiscardClp.setStatus('mandatory')
atmIfReceivedCells = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 150, 1, 20), PassportCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmIfReceivedCells.setStatus('obsolete')
atmIfRxCell = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 150, 1, 23), PassportCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmIfRxCell.setStatus('mandatory')
atmIfRxCellClp = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 150, 1, 24), PassportCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmIfRxCellClp.setStatus('mandatory')
atmIfRxCellEfci = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 150, 1, 25), PassportCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmIfRxCellEfci.setStatus('mandatory')
atmIfRxCellDiscard = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 150, 1, 26), PassportCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmIfRxCellDiscard.setStatus('mandatory')
atmIfRxCellDiscardClp = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 150, 1, 27), PassportCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmIfRxCellDiscardClp.setStatus('mandatory')
atmIfRxFrameDiscard = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 150, 1, 28), PassportCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmIfRxFrameDiscard.setStatus('mandatory')
atmIfRxFrameDiscardClp = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 150, 1, 29), PassportCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmIfRxFrameDiscardClp.setStatus('mandatory')
atmIfDroppedRxCells = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 150, 1, 30), PassportCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmIfDroppedRxCells.setStatus('mandatory')
atmIfLastDroppedRxCellConnection = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 150, 1, 31), IntegerSequence().subtype(subtypeSpec=ValueSizeConstraint(3, 10))).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmIfLastDroppedRxCellConnection.setStatus('mandatory')
atmIfAal5RxErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 150, 1, 32), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmIfAal5RxErrors.setStatus('mandatory')
atmIfLastAal5RxErrorConnection = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 150, 1, 33), IntegerSequence().subtype(subtypeSpec=ValueSizeConstraint(3, 10))).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmIfLastAal5RxErrorConnection.setStatus('mandatory')
atmIfLrcFrameErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 150, 1, 34), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmIfLrcFrameErrors.setStatus('mandatory')
atmIfLastLrcFrameErrorConnection = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 150, 1, 35), IntegerSequence().subtype(subtypeSpec=ValueSizeConstraint(3, 10))).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmIfLastLrcFrameErrorConnection.setStatus('mandatory')
atmIfAal5RxAborts = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 150, 1, 40), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmIfAal5RxAborts.setStatus('mandatory')
atmIfLastAal5RxAbortConnection = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 150, 1, 50), IntegerSequence().subtype(subtypeSpec=ValueSizeConstraint(3, 10))).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmIfLastAal5RxAbortConnection.setStatus('mandatory')
atmIfTxLinkUtilization = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 150, 1, 59), Gauge32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmIfTxLinkUtilization.setStatus('mandatory')
atmIfRxLinkUtilization = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 150, 1, 60), Gauge32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmIfRxLinkUtilization.setStatus('mandatory')
atmIfTxCellMemoryThresholdTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 441), )
if mibBuilder.loadTexts: atmIfTxCellMemoryThresholdTable.setStatus('mandatory')
atmIfTxCellMemoryThresholdEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 441, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-AtmCoreMIB", "atmIfIndex"), (0, "Nortel-Magellan-Passport-AtmCoreMIB", "atmIfTxCellMemoryThresholdIndex"))
if mibBuilder.loadTexts: atmIfTxCellMemoryThresholdEntry.setStatus('mandatory')
atmIfTxCellMemoryThresholdIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 441, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 3)))
if mibBuilder.loadTexts: atmIfTxCellMemoryThresholdIndex.setStatus('mandatory')
atmIfTxCellMemoryThresholdValue = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 441, 1, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 163839))).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmIfTxCellMemoryThresholdValue.setStatus('mandatory')
atmIfConnMap = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 2))
atmIfConnMapRowStatusTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 2, 1), )
if mibBuilder.loadTexts: atmIfConnMapRowStatusTable.setStatus('mandatory')
atmIfConnMapRowStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 2, 1, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-AtmCoreMIB", "atmIfIndex"), (0, "Nortel-Magellan-Passport-AtmCoreMIB", "atmIfConnMapIndex"))
if mibBuilder.loadTexts: atmIfConnMapRowStatusEntry.setStatus('mandatory')
atmIfConnMapRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 2, 1, 1, 1), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmIfConnMapRowStatus.setStatus('mandatory')
atmIfConnMapComponentName = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 2, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmIfConnMapComponentName.setStatus('mandatory')
atmIfConnMapStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 2, 1, 1, 4), StorageType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmIfConnMapStorageType.setStatus('mandatory')
atmIfConnMapIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 2, 1, 1, 10), NonReplicated())
if mibBuilder.loadTexts: atmIfConnMapIndex.setStatus('mandatory')
atmIfConnMapVccProvTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 2, 100), )
if mibBuilder.loadTexts: atmIfConnMapVccProvTable.setStatus('obsolete')
atmIfConnMapVccProvEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 2, 100, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-AtmCoreMIB", "atmIfIndex"), (0, "Nortel-Magellan-Passport-AtmCoreMIB", "atmIfConnMapIndex"))
if mibBuilder.loadTexts: atmIfConnMapVccProvEntry.setStatus('obsolete')
atmIfConnMapNumVccsForVpiZero = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 2, 100, 1, 10), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 16128)).clone(768)).setMaxAccess("writeonly")
if mibBuilder.loadTexts: atmIfConnMapNumVccsForVpiZero.setStatus('obsolete')
atmIfConnMapNumNonZeroVpisForVccs = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 2, 100, 1, 20), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("writeonly")
if mibBuilder.loadTexts: atmIfConnMapNumNonZeroVpisForVccs.setStatus('obsolete')
atmIfConnMapFirstNonZeroVpiForVccs = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 2, 100, 1, 30), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(1, 1), ValueRangeConstraint(16, 16), ValueRangeConstraint(32, 32), ValueRangeConstraint(48, 48), ValueRangeConstraint(64, 64), ValueRangeConstraint(80, 80), ValueRangeConstraint(96, 96), ValueRangeConstraint(112, 112), ValueRangeConstraint(128, 128), ValueRangeConstraint(144, 144), ValueRangeConstraint(160, 160), ValueRangeConstraint(176, 176), ValueRangeConstraint(192, 192), ValueRangeConstraint(208, 208), ValueRangeConstraint(224, 224), ValueRangeConstraint(240, 240), )).clone(1)).setMaxAccess("writeonly")
if mibBuilder.loadTexts: atmIfConnMapFirstNonZeroVpiForVccs.setStatus('obsolete')
atmIfConnMapNumVccsPerNonZeroVpi = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 2, 100, 1, 40), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(2, 2), ValueRangeConstraint(4, 4), ValueRangeConstraint(8, 8), ValueRangeConstraint(16, 16), ValueRangeConstraint(32, 32), ValueRangeConstraint(64, 64), ValueRangeConstraint(128, 128), ValueRangeConstraint(256, 256), ValueRangeConstraint(512, 512), ValueRangeConstraint(1024, 1024), ValueRangeConstraint(2048, 2048), )).clone(64)).setMaxAccess("writeonly")
if mibBuilder.loadTexts: atmIfConnMapNumVccsPerNonZeroVpi.setStatus('obsolete')
atmIfConnMapOperTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 2, 110), )
if mibBuilder.loadTexts: atmIfConnMapOperTable.setStatus('mandatory')
atmIfConnMapOperEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 2, 110, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-AtmCoreMIB", "atmIfIndex"), (0, "Nortel-Magellan-Passport-AtmCoreMIB", "atmIfConnMapIndex"))
if mibBuilder.loadTexts: atmIfConnMapOperEntry.setStatus('mandatory')
atmIfConnMapNumVccsForVpiZeroOper = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 2, 110, 1, 10), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 16128))).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmIfConnMapNumVccsForVpiZeroOper.setStatus('mandatory')
atmIfConnMapNumNonZeroVpisForVccsOper = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 2, 110, 1, 20), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmIfConnMapNumNonZeroVpisForVccsOper.setStatus('mandatory')
atmIfConnMapFirstNonZeroVpiForVccsOper = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 2, 110, 1, 30), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(1, 1), ValueRangeConstraint(16, 16), ValueRangeConstraint(32, 32), ValueRangeConstraint(48, 48), ValueRangeConstraint(64, 64), ValueRangeConstraint(80, 80), ValueRangeConstraint(96, 96), ValueRangeConstraint(112, 112), ValueRangeConstraint(128, 128), ValueRangeConstraint(144, 144), ValueRangeConstraint(160, 160), ValueRangeConstraint(176, 176), ValueRangeConstraint(192, 192), ValueRangeConstraint(208, 208), ValueRangeConstraint(224, 224), ValueRangeConstraint(240, 240), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmIfConnMapFirstNonZeroVpiForVccsOper.setStatus('mandatory')
atmIfConnMapNumVccsPerNonZeroVpiOper = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 2, 110, 1, 40), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(2, 2), ValueRangeConstraint(4, 4), ValueRangeConstraint(8, 8), ValueRangeConstraint(16, 16), ValueRangeConstraint(32, 32), ValueRangeConstraint(64, 64), ValueRangeConstraint(128, 128), ValueRangeConstraint(256, 256), ValueRangeConstraint(512, 512), ValueRangeConstraint(1024, 1024), ValueRangeConstraint(2048, 2048), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmIfConnMapNumVccsPerNonZeroVpiOper.setStatus('mandatory')
atmIfConnMapOv = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 2, 120))
atmIfConnMapOvRowStatusTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 2, 120, 1), )
if mibBuilder.loadTexts: atmIfConnMapOvRowStatusTable.setStatus('mandatory')
atmIfConnMapOvRowStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 2, 120, 1, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-AtmCoreMIB", "atmIfIndex"), (0, "Nortel-Magellan-Passport-AtmCoreMIB", "atmIfConnMapIndex"), (0, "Nortel-Magellan-Passport-AtmCoreMIB", "atmIfConnMapOvIndex"))
if mibBuilder.loadTexts: atmIfConnMapOvRowStatusEntry.setStatus('mandatory')
atmIfConnMapOvRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 2, 120, 1, 1, 1), RowStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmIfConnMapOvRowStatus.setStatus('mandatory')
atmIfConnMapOvComponentName = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 2, 120, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmIfConnMapOvComponentName.setStatus('mandatory')
atmIfConnMapOvStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 2, 120, 1, 1, 4), StorageType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmIfConnMapOvStorageType.setStatus('mandatory')
atmIfConnMapOvIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 2, 120, 1, 1, 10), NonReplicated())
if mibBuilder.loadTexts: atmIfConnMapOvIndex.setStatus('mandatory')
atmIfConnMapOvProvTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 2, 120, 100), )
if mibBuilder.loadTexts: atmIfConnMapOvProvTable.setStatus('mandatory')
atmIfConnMapOvProvEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 2, 120, 100, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-AtmCoreMIB", "atmIfIndex"), (0, "Nortel-Magellan-Passport-AtmCoreMIB", "atmIfConnMapIndex"), (0, "Nortel-Magellan-Passport-AtmCoreMIB", "atmIfConnMapOvIndex"))
if mibBuilder.loadTexts: atmIfConnMapOvProvEntry.setStatus('mandatory')
atmIfConnMapOvNumVccsForVpiZero = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 2, 120, 100, 1, 10), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 16128)).clone(768)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmIfConnMapOvNumVccsForVpiZero.setStatus('mandatory')
atmIfConnMapOvNumNonZeroVpisForVccs = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 2, 120, 100, 1, 20), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmIfConnMapOvNumNonZeroVpisForVccs.setStatus('mandatory')
atmIfConnMapOvFirstNonZeroVpiForVccs = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 2, 120, 100, 1, 30), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(1, 1), ValueRangeConstraint(16, 16), ValueRangeConstraint(32, 32), ValueRangeConstraint(48, 48), ValueRangeConstraint(64, 64), ValueRangeConstraint(80, 80), ValueRangeConstraint(96, 96), ValueRangeConstraint(112, 112), ValueRangeConstraint(128, 128), ValueRangeConstraint(144, 144), ValueRangeConstraint(160, 160), ValueRangeConstraint(176, 176), ValueRangeConstraint(192, 192), ValueRangeConstraint(208, 208), ValueRangeConstraint(224, 224), ValueRangeConstraint(240, 240), )).clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmIfConnMapOvFirstNonZeroVpiForVccs.setStatus('mandatory')
atmIfConnMapOvNumVccsPerNonZeroVpi = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 2, 120, 100, 1, 40), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(2, 2), ValueRangeConstraint(4, 4), ValueRangeConstraint(8, 8), ValueRangeConstraint(16, 16), ValueRangeConstraint(32, 32), ValueRangeConstraint(64, 64), ValueRangeConstraint(128, 128), ValueRangeConstraint(256, 256), ValueRangeConstraint(512, 512), ValueRangeConstraint(1024, 1024), ValueRangeConstraint(2048, 2048), )).clone(64)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmIfConnMapOvNumVccsPerNonZeroVpi.setStatus('mandatory')
atmIfCA = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 3))
atmIfCARowStatusTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 3, 1), )
if mibBuilder.loadTexts: atmIfCARowStatusTable.setStatus('mandatory')
atmIfCARowStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 3, 1, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-AtmCoreMIB", "atmIfIndex"), (0, "Nortel-Magellan-Passport-AtmCoreMIB", "atmIfCAIndex"))
if mibBuilder.loadTexts: atmIfCARowStatusEntry.setStatus('mandatory')
atmIfCARowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 3, 1, 1, 1), RowStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmIfCARowStatus.setStatus('mandatory')
atmIfCAComponentName = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 3, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmIfCAComponentName.setStatus('mandatory')
atmIfCAStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 3, 1, 1, 4), StorageType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmIfCAStorageType.setStatus('mandatory')
atmIfCAIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 3, 1, 1, 10), NonReplicated())
if mibBuilder.loadTexts: atmIfCAIndex.setStatus('mandatory')
atmIfCAProvTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 3, 100), )
if mibBuilder.loadTexts: atmIfCAProvTable.setStatus('mandatory')
atmIfCAProvEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 3, 100, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-AtmCoreMIB", "atmIfIndex"), (0, "Nortel-Magellan-Passport-AtmCoreMIB", "atmIfCAIndex"))
if mibBuilder.loadTexts: atmIfCAProvEntry.setStatus('mandatory')
atmIfCAMaxVpcs = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 3, 100, 1, 5), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4096)).clone(128)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmIfCAMaxVpcs.setStatus('obsolete')
atmIfCAMaxVccs = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 3, 100, 1, 6), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 16384)).clone(255)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmIfCAMaxVccs.setStatus('mandatory')
atmIfCAMinMulticastBranches = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 3, 100, 1, 7), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 16384))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmIfCAMinMulticastBranches.setStatus('mandatory')
atmIfCAMaxMulticastBranches = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 3, 100, 1, 8), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(1, 16384), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmIfCAMaxMulticastBranches.setStatus('mandatory')
atmIfCAMaxVpts = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 3, 100, 1, 9), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4096)).clone(128)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmIfCAMaxVpts.setStatus('obsolete')
atmIfCAMinAutoSelectedVci = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 3, 100, 1, 10), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(32, 65535)).clone(32)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmIfCAMinAutoSelectedVci.setStatus('obsolete')
atmIfCAMinAutoSelectedVciForVpiZero = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 3, 100, 1, 15), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535)).clone(32)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmIfCAMinAutoSelectedVciForVpiZero.setStatus('mandatory')
atmIfCAMinAutoSelectedVciForNonZeroVpi = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 3, 100, 1, 20), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(5, 65535)).clone(32)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmIfCAMinAutoSelectedVciForNonZeroVpi.setStatus('mandatory')
atmIfCAPermittedSvcAtmServiceCategories = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 3, 100, 1, 25), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 1)).setFixedLength(1).clone(hexValue="f0")).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmIfCAPermittedSvcAtmServiceCategories.setStatus('obsolete')
atmIfCACbrPool = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 3, 100, 1, 30), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("notApplicable", 0), ("pool1", 1), ("pool2", 2), ("pool3", 3))).clone('pool1')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmIfCACbrPool.setStatus('obsolete')
atmIfCACbrCdvt = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 3, 100, 1, 40), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 10000)).clone(250)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmIfCACbrCdvt.setStatus('obsolete')
atmIfCACbrCellLossRatio = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 3, 100, 1, 50), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-10, 0)).clone(-10)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmIfCACbrCellLossRatio.setStatus('obsolete')
atmIfCASvcCbrHoldingPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 3, 100, 1, 51), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4))).clone(namedValues=NamedValues(("n0", 0), ("n1", 1), ("n2", 2), ("n3", 3), ("n4", 4))).clone('n3')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmIfCASvcCbrHoldingPriority.setStatus('obsolete')
atmIfCASvcVbrRtHoldingPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 3, 100, 1, 52), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4))).clone(namedValues=NamedValues(("n0", 0), ("n1", 1), ("n2", 2), ("n3", 3), ("n4", 4))).clone('n3')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmIfCASvcVbrRtHoldingPriority.setStatus('obsolete')
atmIfCASvcVbrNrtHoldingPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 3, 100, 1, 53), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4))).clone(namedValues=NamedValues(("n0", 0), ("n1", 1), ("n2", 2), ("n3", 3), ("n4", 4))).clone('n3')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmIfCASvcVbrNrtHoldingPriority.setStatus('obsolete')
atmIfCAVbrRtPool = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 3, 100, 1, 60), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("notApplicable", 0), ("pool1", 1), ("pool2", 2), ("pool3", 3))).clone('pool1')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmIfCAVbrRtPool.setStatus('obsolete')
atmIfCAVbrRtCdvt = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 3, 100, 1, 70), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 1200000)).clone(250)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmIfCAVbrRtCdvt.setStatus('obsolete')
atmIfCAVbrRtCellLossRatio = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 3, 100, 1, 80), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-10, 0)).clone(-10)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmIfCAVbrRtCellLossRatio.setStatus('obsolete')
atmIfCAVbrNrtPool = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 3, 100, 1, 90), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("notApplicable", 0), ("pool1", 1), ("pool2", 2), ("pool3", 3))).clone('pool1')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmIfCAVbrNrtPool.setStatus('obsolete')
atmIfCAVbrNrtCdvt = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 3, 100, 1, 100), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 1200000)).clone(250)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmIfCAVbrNrtCdvt.setStatus('obsolete')
atmIfCAMaxCaVpcs = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 3, 100, 1, 105), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4096)).clone(128)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmIfCAMaxCaVpcs.setStatus('mandatory')
atmIfCAMaxCaVpts = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 3, 100, 1, 106), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4096)).clone(128)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmIfCAMaxCaVpts.setStatus('mandatory')
atmIfCAVbrNrtCellLossRatio = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 3, 100, 1, 110), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-10, 0)).clone(-7)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmIfCAVbrNrtCellLossRatio.setStatus('obsolete')
atmIfCAUbrMaxConnections = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 3, 100, 1, 120), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 16384)).clone(16384)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmIfCAUbrMaxConnections.setStatus('obsolete')
atmIfCAMinAutoSelectedVpi = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 3, 100, 1, 121), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 4095)).clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmIfCAMinAutoSelectedVpi.setStatus('mandatory')
atmIfCAPermittedAtmServiceCategories = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 3, 100, 1, 122), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 1)).setFixedLength(1).clone(hexValue="f0")).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmIfCAPermittedAtmServiceCategories.setStatus('mandatory')
atmIfCAMaxAutoSelectedVpi = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 3, 100, 1, 125), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 4095)).clone(128)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmIfCAMaxAutoSelectedVpi.setStatus('mandatory')
atmIfCAMaxAutoSelectedVciForVpiZero = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 3, 100, 1, 126), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535)).clone(767)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmIfCAMaxAutoSelectedVciForVpiZero.setStatus('mandatory')
atmIfCAMaxAutoSelectedVciForNonZeroVpi = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 3, 100, 1, 127), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(5, 65535)).clone(63)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmIfCAMaxAutoSelectedVciForNonZeroVpi.setStatus('mandatory')
atmIfCAOperTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 3, 110), )
if mibBuilder.loadTexts: atmIfCAOperTable.setStatus('mandatory')
atmIfCAOperEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 3, 110, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-AtmCoreMIB", "atmIfIndex"), (0, "Nortel-Magellan-Passport-AtmCoreMIB", "atmIfCAIndex"))
if mibBuilder.loadTexts: atmIfCAOperEntry.setStatus('mandatory')
atmIfCAPermanentVpcs = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 3, 110, 1, 10), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4096))).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmIfCAPermanentVpcs.setStatus('mandatory')
atmIfCAPermanentVpts = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 3, 110, 1, 15), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4096))).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmIfCAPermanentVpts.setStatus('mandatory')
atmIfCAPermanentVccs = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 3, 110, 1, 20), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 16384))).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmIfCAPermanentVccs.setStatus('mandatory')
atmIfCASwitchedVccs = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 3, 110, 1, 30), Gauge32().subtype(subtypeSpec=ValueRangeConstraint(0, 16384))).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmIfCASwitchedVccs.setStatus('mandatory')
atmIfCASwitchedMulticastBranches = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 3, 110, 1, 40), Gauge32().subtype(subtypeSpec=ValueRangeConstraint(0, 10752))).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmIfCASwitchedMulticastBranches.setStatus('mandatory')
atmIfCATroubledVpcs = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 3, 110, 1, 60), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4096))).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmIfCATroubledVpcs.setStatus('mandatory')
atmIfCATroubledVpts = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 3, 110, 1, 65), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4096))).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmIfCATroubledVpts.setStatus('mandatory')
atmIfCATroubledVccs = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 3, 110, 1, 70), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 16384))).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmIfCATroubledVccs.setStatus('mandatory')
atmIfCAUbrAvailableConnections = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 3, 110, 1, 80), Gauge32().subtype(subtypeSpec=ValueRangeConstraint(0, 16384))).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmIfCAUbrAvailableConnections.setStatus('obsolete')
atmIfCAConnectionPoolUsage = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 3, 110, 1, 81), Gauge32().subtype(subtypeSpec=ValueRangeConstraint(0, 16384))).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmIfCAConnectionPoolUsage.setStatus('mandatory')
atmIfCASwitchedVpcs = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 3, 110, 1, 82), Gauge32().subtype(subtypeSpec=ValueRangeConstraint(0, 4095))).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmIfCASwitchedVpcs.setStatus('mandatory')
atmIfCAVirtualLinkRequestedBandwidth = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 3, 110, 1, 130), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 16384))).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmIfCAVirtualLinkRequestedBandwidth.setStatus('mandatory')
atmIfCAVirtualLinkAdmittedBandwidth = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 3, 110, 1, 131), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 16384))).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmIfCAVirtualLinkAdmittedBandwidth.setStatus('mandatory')
atmIfCAVirtualLinkUnallocatedBandwidth = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 3, 110, 1, 132), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 16384))).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmIfCAVirtualLinkUnallocatedBandwidth.setStatus('mandatory')
atmIfCABwPoolTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 3, 293), )
if mibBuilder.loadTexts: atmIfCABwPoolTable.setStatus('mandatory')
atmIfCABwPoolEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 3, 293, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-AtmCoreMIB", "atmIfIndex"), (0, "Nortel-Magellan-Passport-AtmCoreMIB", "atmIfCAIndex"), (0, "Nortel-Magellan-Passport-AtmCoreMIB", "atmIfCABwPoolIndex"))
if mibBuilder.loadTexts: atmIfCABwPoolEntry.setStatus('mandatory')
atmIfCABwPoolIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 3, 293, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 5)))
if mibBuilder.loadTexts: atmIfCABwPoolIndex.setStatus('mandatory')
atmIfCABwPoolValue = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 3, 293, 1, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 12800))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmIfCABwPoolValue.setStatus('mandatory')
atmIfCAPoolRequBwTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 3, 296), )
if mibBuilder.loadTexts: atmIfCAPoolRequBwTable.setStatus('mandatory')
atmIfCAPoolRequBwEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 3, 296, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-AtmCoreMIB", "atmIfIndex"), (0, "Nortel-Magellan-Passport-AtmCoreMIB", "atmIfCAIndex"), (0, "Nortel-Magellan-Passport-AtmCoreMIB", "atmIfCAPoolRequBwIndex"))
if mibBuilder.loadTexts: atmIfCAPoolRequBwEntry.setStatus('mandatory')
atmIfCAPoolRequBwIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 3, 296, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 5)))
if mibBuilder.loadTexts: atmIfCAPoolRequBwIndex.setStatus('mandatory')
atmIfCAPoolRequBwValue = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 3, 296, 1, 2), Gauge32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmIfCAPoolRequBwValue.setStatus('mandatory')
atmIfCAPoolAdmitBwTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 3, 299), )
if mibBuilder.loadTexts: atmIfCAPoolAdmitBwTable.setStatus('mandatory')
atmIfCAPoolAdmitBwEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 3, 299, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-AtmCoreMIB", "atmIfIndex"), (0, "Nortel-Magellan-Passport-AtmCoreMIB", "atmIfCAIndex"), (0, "Nortel-Magellan-Passport-AtmCoreMIB", "atmIfCAPoolAdmitBwIndex"))
if mibBuilder.loadTexts: atmIfCAPoolAdmitBwEntry.setStatus('mandatory')
atmIfCAPoolAdmitBwIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 3, 299, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 5)))
if mibBuilder.loadTexts: atmIfCAPoolAdmitBwIndex.setStatus('mandatory')
atmIfCAPoolAdmitBwValue = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 3, 299, 1, 2), Gauge32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmIfCAPoolAdmitBwValue.setStatus('mandatory')
atmIfCAPoolAvailBwTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 3, 300), )
if mibBuilder.loadTexts: atmIfCAPoolAvailBwTable.setStatus('obsolete')
atmIfCAPoolAvailBwEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 3, 300, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-AtmCoreMIB", "atmIfIndex"), (0, "Nortel-Magellan-Passport-AtmCoreMIB", "atmIfCAIndex"), (0, "Nortel-Magellan-Passport-AtmCoreMIB", "atmIfCAPoolAvailBwIndex"))
if mibBuilder.loadTexts: atmIfCAPoolAvailBwEntry.setStatus('obsolete')
atmIfCAPoolAvailBwIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 3, 300, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 3)))
if mibBuilder.loadTexts: atmIfCAPoolAvailBwIndex.setStatus('obsolete')
atmIfCAPoolAvailBwValue = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 3, 300, 1, 2), Gauge32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmIfCAPoolAvailBwValue.setStatus('obsolete')
atmIfCAPoolProvBwTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 3, 319), )
if mibBuilder.loadTexts: atmIfCAPoolProvBwTable.setStatus('mandatory')
atmIfCAPoolProvBwEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 3, 319, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-AtmCoreMIB", "atmIfIndex"), (0, "Nortel-Magellan-Passport-AtmCoreMIB", "atmIfCAIndex"), (0, "Nortel-Magellan-Passport-AtmCoreMIB", "atmIfCAPoolProvBwIndex"))
if mibBuilder.loadTexts: atmIfCAPoolProvBwEntry.setStatus('mandatory')
atmIfCAPoolProvBwIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 3, 319, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 5)))
if mibBuilder.loadTexts: atmIfCAPoolProvBwIndex.setStatus('mandatory')
atmIfCAPoolProvBwValue = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 3, 319, 1, 2), Gauge32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmIfCAPoolProvBwValue.setStatus('mandatory')
atmIfCAPoolWaitAdmConnsTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 3, 320), )
if mibBuilder.loadTexts: atmIfCAPoolWaitAdmConnsTable.setStatus('mandatory')
atmIfCAPoolWaitAdmConnsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 3, 320, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-AtmCoreMIB", "atmIfIndex"), (0, "Nortel-Magellan-Passport-AtmCoreMIB", "atmIfCAIndex"), (0, "Nortel-Magellan-Passport-AtmCoreMIB", "atmIfCAPoolWaitAdmConnsIndex"))
if mibBuilder.loadTexts: atmIfCAPoolWaitAdmConnsEntry.setStatus('mandatory')
atmIfCAPoolWaitAdmConnsIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 3, 320, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 5)))
if mibBuilder.loadTexts: atmIfCAPoolWaitAdmConnsIndex.setStatus('mandatory')
atmIfCAPoolWaitAdmConnsValue = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 3, 320, 1, 2), Gauge32().subtype(subtypeSpec=ValueRangeConstraint(0, 16384))).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmIfCAPoolWaitAdmConnsValue.setStatus('mandatory')
atmIfCAPoolAdmConnsTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 3, 321), )
if mibBuilder.loadTexts: atmIfCAPoolAdmConnsTable.setStatus('mandatory')
atmIfCAPoolAdmConnsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 3, 321, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-AtmCoreMIB", "atmIfIndex"), (0, "Nortel-Magellan-Passport-AtmCoreMIB", "atmIfCAIndex"), (0, "Nortel-Magellan-Passport-AtmCoreMIB", "atmIfCAPoolAdmConnsIndex"))
if mibBuilder.loadTexts: atmIfCAPoolAdmConnsEntry.setStatus('mandatory')
atmIfCAPoolAdmConnsIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 3, 321, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 5)))
if mibBuilder.loadTexts: atmIfCAPoolAdmConnsIndex.setStatus('mandatory')
atmIfCAPoolAdmConnsValue = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 3, 321, 1, 2), Gauge32().subtype(subtypeSpec=ValueRangeConstraint(0, 16384))).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmIfCAPoolAdmConnsValue.setStatus('mandatory')
atmIfCAPoolAvailableBwTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 3, 326), )
if mibBuilder.loadTexts: atmIfCAPoolAvailableBwTable.setStatus('mandatory')
atmIfCAPoolAvailableBwEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 3, 326, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-AtmCoreMIB", "atmIfIndex"), (0, "Nortel-Magellan-Passport-AtmCoreMIB", "atmIfCAIndex"), (0, "Nortel-Magellan-Passport-AtmCoreMIB", "atmIfCAPoolAvailableBwIndex"))
if mibBuilder.loadTexts: atmIfCAPoolAvailableBwEntry.setStatus('mandatory')
atmIfCAPoolAvailableBwIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 3, 326, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 5)))
if mibBuilder.loadTexts: atmIfCAPoolAvailableBwIndex.setStatus('mandatory')
atmIfCAPoolAvailableBwValue = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 3, 326, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmIfCAPoolAvailableBwValue.setStatus('mandatory')
atmIfCACbr = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 3, 2))
atmIfCACbrRowStatusTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 3, 2, 1), )
if mibBuilder.loadTexts: atmIfCACbrRowStatusTable.setStatus('mandatory')
atmIfCACbrRowStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 3, 2, 1, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-AtmCoreMIB", "atmIfIndex"), (0, "Nortel-Magellan-Passport-AtmCoreMIB", "atmIfCAIndex"), (0, "Nortel-Magellan-Passport-AtmCoreMIB", "atmIfCACbrIndex"))
if mibBuilder.loadTexts: atmIfCACbrRowStatusEntry.setStatus('mandatory')
atmIfCACbrRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 3, 2, 1, 1, 1), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmIfCACbrRowStatus.setStatus('mandatory')
atmIfCACbrComponentName = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 3, 2, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmIfCACbrComponentName.setStatus('mandatory')
atmIfCACbrStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 3, 2, 1, 1, 4), StorageType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmIfCACbrStorageType.setStatus('mandatory')
atmIfCACbrIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 3, 2, 1, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 0)))
if mibBuilder.loadTexts: atmIfCACbrIndex.setStatus('mandatory')
atmIfCACbrProvTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 3, 2, 100), )
if mibBuilder.loadTexts: atmIfCACbrProvTable.setStatus('mandatory')
atmIfCACbrProvEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 3, 2, 100, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-AtmCoreMIB", "atmIfIndex"), (0, "Nortel-Magellan-Passport-AtmCoreMIB", "atmIfCAIndex"), (0, "Nortel-Magellan-Passport-AtmCoreMIB", "atmIfCACbrIndex"))
if mibBuilder.loadTexts: atmIfCACbrProvEntry.setStatus('mandatory')
atmIfCACbrProvPool = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 3, 2, 100, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("pool1", 1), ("pool2", 2), ("pool3", 3), ("pool4", 4), ("pool5", 5))).clone('pool1')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmIfCACbrProvPool.setStatus('mandatory')
atmIfCACbrProvCdvt = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 3, 2, 100, 1, 20), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 10000)).clone(250)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmIfCACbrProvCdvt.setStatus('mandatory')
atmIfCACbrCdv = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 3, 2, 100, 1, 30), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647)).clone(250)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmIfCACbrCdv.setStatus('mandatory')
atmIfCACbrMaxCtd = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 3, 2, 100, 1, 40), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647)).clone(1000)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmIfCACbrMaxCtd.setStatus('mandatory')
atmIfCACbrProvClr = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 3, 2, 100, 1, 50), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 15)).clone(10)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmIfCACbrProvClr.setStatus('mandatory')
atmIfCACbrTxQueueLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 3, 2, 100, 1, 60), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(5, 63488), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmIfCACbrTxQueueLimit.setStatus('mandatory')
atmIfCACbrHoldingPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 3, 2, 100, 1, 61), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4))).clone(namedValues=NamedValues(("n0", 0), ("n1", 1), ("n2", 2), ("n3", 3), ("n4", 4))).clone('n3')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmIfCACbrHoldingPriority.setStatus('mandatory')
atmIfCACbrSvcHoldingPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 3, 2, 100, 1, 70), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4))).clone(namedValues=NamedValues(("n0", 0), ("n1", 1), ("n2", 2), ("n3", 3), ("n4", 4))).clone('n3')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmIfCACbrSvcHoldingPriority.setStatus('obsolete')
atmIfCACbrSvcMpHoldingPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 3, 2, 100, 1, 71), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4))).clone(namedValues=NamedValues(("n0", 0), ("n1", 1), ("n2", 2), ("n3", 3), ("n4", 4))).clone('n3')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmIfCACbrSvcMpHoldingPriority.setStatus('mandatory')
atmIfCACbrMinPerVcQueueLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 3, 2, 100, 1, 80), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(5, 12000)).clone(88)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmIfCACbrMinPerVcQueueLimit.setStatus('mandatory')
atmIfCACbrPerVcQueueLimitReferenceRate = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 3, 2, 100, 1, 90), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(1, 943396), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmIfCACbrPerVcQueueLimitReferenceRate.setStatus('mandatory')
atmIfCACbrEmissionPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 3, 2, 100, 1, 100), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmIfCACbrEmissionPriority.setStatus('mandatory')
atmIfCACbrTrafficShaping = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 3, 2, 100, 1, 140), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 5, 6))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 5), ("inverseUpc", 6))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmIfCACbrTrafficShaping.setStatus('mandatory')
atmIfCACbrShapeRecoupPolicy = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 3, 2, 100, 1, 150), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("minimumCdv", 0), ("maximumEfficiency", 1))).clone('minimumCdv')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmIfCACbrShapeRecoupPolicy.setStatus('mandatory')
atmIfCACbrUnshapedTransmitQueueing = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 3, 2, 100, 1, 160), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("perVc", 0), ("common", 1))).clone('common')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmIfCACbrUnshapedTransmitQueueing.setStatus('mandatory')
atmIfCACbrWeightPolicy = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 3, 2, 100, 1, 165), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("scr", 1), ("pcr", 2), ("ecr", 3))).clone('ecr')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmIfCACbrWeightPolicy.setStatus('mandatory')
atmIfCACbrForceTagging = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 3, 2, 100, 1, 169), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("enabled", 0), ("disabled", 1))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmIfCACbrForceTagging.setStatus('mandatory')
atmIfCACbrUsageParameterControl = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 3, 2, 100, 1, 170), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 4))).clone(namedValues=NamedValues(("enforced", 0), ("disabled", 1), ("monitored", 4))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmIfCACbrUsageParameterControl.setStatus('mandatory')
atmIfCACbrOperTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 3, 2, 110), )
if mibBuilder.loadTexts: atmIfCACbrOperTable.setStatus('mandatory')
atmIfCACbrOperEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 3, 2, 110, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-AtmCoreMIB", "atmIfIndex"), (0, "Nortel-Magellan-Passport-AtmCoreMIB", "atmIfCAIndex"), (0, "Nortel-Magellan-Passport-AtmCoreMIB", "atmIfCACbrIndex"))
if mibBuilder.loadTexts: atmIfCACbrOperEntry.setStatus('mandatory')
atmIfCACbrEpdOffset = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 3, 2, 110, 1, 10), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(5, 1024), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmIfCACbrEpdOffset.setStatus('mandatory')
atmIfCARtVbr = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 3, 3))
atmIfCARtVbrRowStatusTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 3, 3, 1), )
if mibBuilder.loadTexts: atmIfCARtVbrRowStatusTable.setStatus('mandatory')
atmIfCARtVbrRowStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 3, 3, 1, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-AtmCoreMIB", "atmIfIndex"), (0, "Nortel-Magellan-Passport-AtmCoreMIB", "atmIfCAIndex"), (0, "Nortel-Magellan-Passport-AtmCoreMIB", "atmIfCARtVbrIndex"))
if mibBuilder.loadTexts: atmIfCARtVbrRowStatusEntry.setStatus('mandatory')
atmIfCARtVbrRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 3, 3, 1, 1, 1), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmIfCARtVbrRowStatus.setStatus('mandatory')
atmIfCARtVbrComponentName = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 3, 3, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmIfCARtVbrComponentName.setStatus('mandatory')
atmIfCARtVbrStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 3, 3, 1, 1, 4), StorageType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmIfCARtVbrStorageType.setStatus('mandatory')
atmIfCARtVbrIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 3, 3, 1, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 0)))
if mibBuilder.loadTexts: atmIfCARtVbrIndex.setStatus('mandatory')
atmIfCARtVbrProvTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 3, 3, 100), )
if mibBuilder.loadTexts: atmIfCARtVbrProvTable.setStatus('mandatory')
atmIfCARtVbrProvEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 3, 3, 100, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-AtmCoreMIB", "atmIfIndex"), (0, "Nortel-Magellan-Passport-AtmCoreMIB", "atmIfCAIndex"), (0, "Nortel-Magellan-Passport-AtmCoreMIB", "atmIfCARtVbrIndex"))
if mibBuilder.loadTexts: atmIfCARtVbrProvEntry.setStatus('mandatory')
atmIfCARtVbrPool = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 3, 3, 100, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("pool1", 1), ("pool2", 2), ("pool3", 3), ("pool4", 4), ("pool5", 5))).clone('pool1')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmIfCARtVbrPool.setStatus('mandatory')
atmIfCARtVbrCdvt = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 3, 3, 100, 1, 20), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 1200000)).clone(250)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmIfCARtVbrCdvt.setStatus('mandatory')
atmIfCARtVbrCdv = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 3, 3, 100, 1, 30), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647)).clone(1268)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmIfCARtVbrCdv.setStatus('mandatory')
atmIfCARtVbrMaxCtd = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 3, 3, 100, 1, 40), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647)).clone(2000)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmIfCARtVbrMaxCtd.setStatus('mandatory')
atmIfCARtVbrCellLossRatio = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 3, 3, 100, 1, 50), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 15)).clone(10)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmIfCARtVbrCellLossRatio.setStatus('mandatory')
atmIfCARtVbrTxQueueLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 3, 3, 100, 1, 60), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(5, 63488), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmIfCARtVbrTxQueueLimit.setStatus('mandatory')
atmIfCARtVbrMinPerVcQueueLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 3, 3, 100, 1, 70), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(5, 12000)).clone(88)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmIfCARtVbrMinPerVcQueueLimit.setStatus('mandatory')
atmIfCARtVbrPerVcQueueLimitReferenceRate = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 3, 3, 100, 1, 75), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(1, 943396), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmIfCARtVbrPerVcQueueLimitReferenceRate.setStatus('mandatory')
atmIfCARtVbrHoldingPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 3, 3, 100, 1, 76), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4))).clone(namedValues=NamedValues(("n0", 0), ("n1", 1), ("n2", 2), ("n3", 3), ("n4", 4))).clone('n3')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmIfCARtVbrHoldingPriority.setStatus('mandatory')
atmIfCARtVbrSvcHoldingPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 3, 3, 100, 1, 80), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4))).clone(namedValues=NamedValues(("n0", 0), ("n1", 1), ("n2", 2), ("n3", 3), ("n4", 4))).clone('n3')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmIfCARtVbrSvcHoldingPriority.setStatus('obsolete')
atmIfCARtVbrSvcMpHoldingPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 3, 3, 100, 1, 81), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4))).clone(namedValues=NamedValues(("n0", 0), ("n1", 1), ("n2", 2), ("n3", 3), ("n4", 4))).clone('n3')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmIfCARtVbrSvcMpHoldingPriority.setStatus('mandatory')
atmIfCARtVbrEmissionPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 3, 3, 100, 1, 82), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 7)).clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmIfCARtVbrEmissionPriority.setStatus('mandatory')
atmIfCARtVbrTrafficShaping = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 3, 3, 100, 1, 86), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 5, 6))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 5), ("inverseUpc", 6))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmIfCARtVbrTrafficShaping.setStatus('mandatory')
atmIfCARtVbrShapeRecoupPolicy = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 3, 3, 100, 1, 87), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("minimumCdv", 0), ("maximumEfficiency", 1))).clone('minimumCdv')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmIfCARtVbrShapeRecoupPolicy.setStatus('mandatory')
atmIfCARtVbrUnshapedTransmitQueueing = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 3, 3, 100, 1, 88), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("perVc", 0), ("common", 1), ("autoConfigure", 2))).clone('autoConfigure')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmIfCARtVbrUnshapedTransmitQueueing.setStatus('mandatory')
atmIfCARtVbrUsageParameterControl = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 3, 3, 100, 1, 89), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 4))).clone(namedValues=NamedValues(("enforced", 0), ("disabled", 1), ("monitored", 4))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmIfCARtVbrUsageParameterControl.setStatus('mandatory')
atmIfCARtVbrWeightPolicy = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 3, 3, 100, 1, 90), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("scr", 1), ("pcr", 2), ("ecr", 3))).clone('ecr')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmIfCARtVbrWeightPolicy.setStatus('mandatory')
atmIfCARtVbrForceTagging = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 3, 3, 100, 1, 91), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("enabled", 0), ("disabled", 1))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmIfCARtVbrForceTagging.setStatus('mandatory')
atmIfCARtVbrOperTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 3, 3, 110), )
if mibBuilder.loadTexts: atmIfCARtVbrOperTable.setStatus('mandatory')
atmIfCARtVbrOperEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 3, 3, 110, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-AtmCoreMIB", "atmIfIndex"), (0, "Nortel-Magellan-Passport-AtmCoreMIB", "atmIfCAIndex"), (0, "Nortel-Magellan-Passport-AtmCoreMIB", "atmIfCARtVbrIndex"))
if mibBuilder.loadTexts: atmIfCARtVbrOperEntry.setStatus('mandatory')
atmIfCARtVbrOpUnshapedTransmitQueueing = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 3, 3, 110, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("perVc", 0), ("common", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmIfCARtVbrOpUnshapedTransmitQueueing.setStatus('mandatory')
atmIfCARtVbrEpdOffset = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 3, 3, 110, 1, 11), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(5, 1024), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmIfCARtVbrEpdOffset.setStatus('mandatory')
atmIfCANrtVbr = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 3, 4))
atmIfCANrtVbrRowStatusTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 3, 4, 1), )
if mibBuilder.loadTexts: atmIfCANrtVbrRowStatusTable.setStatus('mandatory')
atmIfCANrtVbrRowStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 3, 4, 1, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-AtmCoreMIB", "atmIfIndex"), (0, "Nortel-Magellan-Passport-AtmCoreMIB", "atmIfCAIndex"), (0, "Nortel-Magellan-Passport-AtmCoreMIB", "atmIfCANrtVbrIndex"))
if mibBuilder.loadTexts: atmIfCANrtVbrRowStatusEntry.setStatus('mandatory')
atmIfCANrtVbrRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 3, 4, 1, 1, 1), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmIfCANrtVbrRowStatus.setStatus('mandatory')
atmIfCANrtVbrComponentName = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 3, 4, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmIfCANrtVbrComponentName.setStatus('mandatory')
atmIfCANrtVbrStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 3, 4, 1, 1, 4), StorageType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmIfCANrtVbrStorageType.setStatus('mandatory')
atmIfCANrtVbrIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 3, 4, 1, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 0)))
if mibBuilder.loadTexts: atmIfCANrtVbrIndex.setStatus('mandatory')
atmIfCANrtVbrProvTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 3, 4, 100), )
if mibBuilder.loadTexts: atmIfCANrtVbrProvTable.setStatus('mandatory')
atmIfCANrtVbrProvEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 3, 4, 100, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-AtmCoreMIB", "atmIfIndex"), (0, "Nortel-Magellan-Passport-AtmCoreMIB", "atmIfCAIndex"), (0, "Nortel-Magellan-Passport-AtmCoreMIB", "atmIfCANrtVbrIndex"))
if mibBuilder.loadTexts: atmIfCANrtVbrProvEntry.setStatus('mandatory')
atmIfCANrtVbrPool = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 3, 4, 100, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("pool1", 1), ("pool2", 2), ("pool3", 3), ("pool4", 4), ("pool5", 5))).clone('pool1')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmIfCANrtVbrPool.setStatus('mandatory')
atmIfCANrtVbrCdvt = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 3, 4, 100, 1, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 1200000)).clone(250)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmIfCANrtVbrCdvt.setStatus('mandatory')
atmIfCANrtVbrCellLossRatio = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 3, 4, 100, 1, 3), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 15)).clone(7)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmIfCANrtVbrCellLossRatio.setStatus('mandatory')
atmIfCANrtVbrTxQueueLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 3, 4, 100, 1, 4), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(5, 63488), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmIfCANrtVbrTxQueueLimit.setStatus('mandatory')
atmIfCANrtVbrSvcHoldingPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 3, 4, 100, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4))).clone(namedValues=NamedValues(("n0", 0), ("n1", 1), ("n2", 2), ("n3", 3), ("n4", 4))).clone('n3')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmIfCANrtVbrSvcHoldingPriority.setStatus('obsolete')
atmIfCANrtVbrMinPerVcQueueLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 3, 4, 100, 1, 6), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(5, 30000)).clone(88)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmIfCANrtVbrMinPerVcQueueLimit.setStatus('mandatory')
atmIfCANrtVbrPerVcQueueLimitReferenceRate = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 3, 4, 100, 1, 7), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(1, 943396), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmIfCANrtVbrPerVcQueueLimitReferenceRate.setStatus('mandatory')
atmIfCANrtVbrSvcMpHoldingPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 3, 4, 100, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4))).clone(namedValues=NamedValues(("n0", 0), ("n1", 1), ("n2", 2), ("n3", 3), ("n4", 4))).clone('n3')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmIfCANrtVbrSvcMpHoldingPriority.setStatus('mandatory')
atmIfCANrtVbrHoldingPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 3, 4, 100, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4))).clone(namedValues=NamedValues(("n0", 0), ("n1", 1), ("n2", 2), ("n3", 3), ("n4", 4))).clone('n3')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmIfCANrtVbrHoldingPriority.setStatus('mandatory')
atmIfCANrtVbrEmissionPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 3, 4, 100, 1, 10), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 7)).clone(4)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmIfCANrtVbrEmissionPriority.setStatus('mandatory')
atmIfCANrtVbrTrafficShaping = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 3, 4, 100, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 5, 6))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 5), ("inverseUpc", 6))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmIfCANrtVbrTrafficShaping.setStatus('mandatory')
atmIfCANrtVbrShapeRecoupPolicy = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 3, 4, 100, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("minimumCdv", 0), ("maximumEfficiency", 1))).clone('maximumEfficiency')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmIfCANrtVbrShapeRecoupPolicy.setStatus('mandatory')
atmIfCANrtVbrUnshapedTransmitQueueing = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 3, 4, 100, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("perVc", 0), ("common", 1), ("autoConfigure", 2))).clone('autoConfigure')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmIfCANrtVbrUnshapedTransmitQueueing.setStatus('mandatory')
atmIfCANrtVbrUsageParameterControl = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 3, 4, 100, 1, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 4))).clone(namedValues=NamedValues(("enforced", 0), ("disabled", 1), ("monitored", 4))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmIfCANrtVbrUsageParameterControl.setStatus('mandatory')
atmIfCANrtVbrWeightPolicy = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 3, 4, 100, 1, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("scr", 1), ("pcr", 2), ("ecr", 3))).clone('ecr')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmIfCANrtVbrWeightPolicy.setStatus('mandatory')
atmIfCANrtVbrForceTagging = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 3, 4, 100, 1, 19), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("enabled", 0), ("disabled", 1))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmIfCANrtVbrForceTagging.setStatus('mandatory')
atmIfCANrtVbrOperTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 3, 4, 110), )
if mibBuilder.loadTexts: atmIfCANrtVbrOperTable.setStatus('mandatory')
atmIfCANrtVbrOperEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 3, 4, 110, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-AtmCoreMIB", "atmIfIndex"), (0, "Nortel-Magellan-Passport-AtmCoreMIB", "atmIfCAIndex"), (0, "Nortel-Magellan-Passport-AtmCoreMIB", "atmIfCANrtVbrIndex"))
if mibBuilder.loadTexts: atmIfCANrtVbrOperEntry.setStatus('mandatory')
atmIfCANrtVbrOpUnshapedTransmitQueueing = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 3, 4, 110, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("perVc", 0), ("common", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmIfCANrtVbrOpUnshapedTransmitQueueing.setStatus('mandatory')
atmIfCANrtVbrEpdOffset = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 3, 4, 110, 1, 11), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(5, 1024), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmIfCANrtVbrEpdOffset.setStatus('mandatory')
atmIfCAAbr = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 3, 5))
atmIfCAAbrRowStatusTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 3, 5, 1), )
if mibBuilder.loadTexts: atmIfCAAbrRowStatusTable.setStatus('mandatory')
atmIfCAAbrRowStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 3, 5, 1, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-AtmCoreMIB", "atmIfIndex"), (0, "Nortel-Magellan-Passport-AtmCoreMIB", "atmIfCAIndex"), (0, "Nortel-Magellan-Passport-AtmCoreMIB", "atmIfCAAbrIndex"))
if mibBuilder.loadTexts: atmIfCAAbrRowStatusEntry.setStatus('mandatory')
atmIfCAAbrRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 3, 5, 1, 1, 1), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmIfCAAbrRowStatus.setStatus('mandatory')
atmIfCAAbrComponentName = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 3, 5, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmIfCAAbrComponentName.setStatus('mandatory')
atmIfCAAbrStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 3, 5, 1, 1, 4), StorageType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmIfCAAbrStorageType.setStatus('mandatory')
atmIfCAAbrIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 3, 5, 1, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 0)))
if mibBuilder.loadTexts: atmIfCAAbrIndex.setStatus('mandatory')
atmIfCAAbrProvTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 3, 5, 100), )
if mibBuilder.loadTexts: atmIfCAAbrProvTable.setStatus('mandatory')
atmIfCAAbrProvEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 3, 5, 100, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-AtmCoreMIB", "atmIfIndex"), (0, "Nortel-Magellan-Passport-AtmCoreMIB", "atmIfCAIndex"), (0, "Nortel-Magellan-Passport-AtmCoreMIB", "atmIfCAAbrIndex"))
if mibBuilder.loadTexts: atmIfCAAbrProvEntry.setStatus('mandatory')
atmIfCAAbrPool = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 3, 5, 100, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("pool1", 1), ("pool2", 2), ("pool3", 3), ("pool4", 4), ("pool5", 5))).clone('pool1')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmIfCAAbrPool.setStatus('mandatory')
atmIfCAAbrCdvt = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 3, 5, 100, 1, 11), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 1200000)).clone(250)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmIfCAAbrCdvt.setStatus('mandatory')
atmIfCAAbrTxQueueLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 3, 5, 100, 1, 12), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(5, 63488), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmIfCAAbrTxQueueLimit.setStatus('mandatory')
atmIfCAAbrMinPerVcQueueLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 3, 5, 100, 1, 13), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(5, 63488)).clone(88)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmIfCAAbrMinPerVcQueueLimit.setStatus('mandatory')
atmIfCAAbrPerVcQueueLimitReferenceRate = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 3, 5, 100, 1, 14), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(1, 943396), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmIfCAAbrPerVcQueueLimitReferenceRate.setStatus('mandatory')
atmIfCAAbrEmissionPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 3, 5, 100, 1, 15), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 7)).clone(6)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmIfCAAbrEmissionPriority.setStatus('mandatory')
atmIfCAAbrFairnessPolicy = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 3, 5, 100, 1, 19), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 4))).clone(namedValues=NamedValues(("pcr", 2), ("pcrMinusMcr", 4))).clone('pcrMinusMcr')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmIfCAAbrFairnessPolicy.setStatus('mandatory')
atmIfCAAbrFrttPortion = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 3, 5, 100, 1, 20), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 10000)).clone(5)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmIfCAAbrFrttPortion.setStatus('mandatory')
atmIfCAAbrAbrConnectionType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 3, 5, 100, 1, 21), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 3, 5))).clone(namedValues=NamedValues(("abrSwitch", 0), ("virtualSourceDest", 3), ("nonAbrInterworking", 5))).clone('abrSwitch')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmIfCAAbrAbrConnectionType.setStatus('mandatory')
atmIfCAAbrUsageParameterControl = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 3, 5, 100, 1, 22), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 4))).clone(namedValues=NamedValues(("enforced", 0), ("disabled", 1), ("monitored", 4))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmIfCAAbrUsageParameterControl.setStatus('mandatory')
atmIfCAAbrInitialCellRate = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 3, 5, 100, 1, 23), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 16777215), ValueRangeConstraint(16777217, 16777217), ValueRangeConstraint(16777218, 16777218), )).clone(16777218)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmIfCAAbrInitialCellRate.setStatus('mandatory')
atmIfCAAbrRateDecreaseFactor = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 3, 5, 100, 1, 24), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 15)).clone(15)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmIfCAAbrRateDecreaseFactor.setStatus('mandatory')
atmIfCAAbrRateIncreaseFactor = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 3, 5, 100, 1, 25), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 15))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmIfCAAbrRateIncreaseFactor.setStatus('mandatory')
atmIfCAAbrMaxCellPerRmCell = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 3, 5, 100, 1, 26), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(2, 2), ValueRangeConstraint(4, 4), ValueRangeConstraint(8, 8), ValueRangeConstraint(16, 16), ValueRangeConstraint(32, 32), ValueRangeConstraint(64, 64), ValueRangeConstraint(128, 128), ValueRangeConstraint(256, 256), )).clone(256)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmIfCAAbrMaxCellPerRmCell.setStatus('mandatory')
atmIfCAAbrMaxTimeBetweenRmCells = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 3, 5, 100, 1, 27), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(781, 781), ValueRangeConstraint(1563, 1563), ValueRangeConstraint(3125, 3125), ValueRangeConstraint(6250, 6250), ValueRangeConstraint(12500, 12500), ValueRangeConstraint(25000, 25000), ValueRangeConstraint(50000, 50000), ValueRangeConstraint(100000, 100000), )).clone(100000)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmIfCAAbrMaxTimeBetweenRmCells.setStatus('mandatory')
atmIfCAAbrCutoffDecreaseFactor = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 3, 5, 100, 1, 28), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(1, 1), ValueRangeConstraint(2, 2), ValueRangeConstraint(4, 4), ValueRangeConstraint(8, 8), ValueRangeConstraint(16, 16), ValueRangeConstraint(32, 32), ValueRangeConstraint(64, 64), )).clone(16)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmIfCAAbrCutoffDecreaseFactor.setStatus('mandatory')
atmIfCAAbrAcrDecreaseTimeFactor = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 3, 5, 100, 1, 29), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 1023)).clone(50)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmIfCAAbrAcrDecreaseTimeFactor.setStatus('mandatory')
atmIfCAAbrDgcraMaximumDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 3, 5, 100, 1, 30), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 16700000)).clone(10000)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmIfCAAbrDgcraMaximumDelay.setStatus('mandatory')
atmIfCAAbrDgcraMinimumDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 3, 5, 100, 1, 31), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 16700000)).clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmIfCAAbrDgcraMinimumDelay.setStatus('mandatory')
atmIfCAAbrHoldingPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 3, 5, 100, 1, 32), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4))).clone(namedValues=NamedValues(("n0", 0), ("n1", 1), ("n2", 2), ("n3", 3), ("n4", 4))).clone('n3')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmIfCAAbrHoldingPriority.setStatus('mandatory')
atmIfCAAbrOperTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 3, 5, 110), )
if mibBuilder.loadTexts: atmIfCAAbrOperTable.setStatus('mandatory')
atmIfCAAbrOperEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 3, 5, 110, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-AtmCoreMIB", "atmIfIndex"), (0, "Nortel-Magellan-Passport-AtmCoreMIB", "atmIfCAIndex"), (0, "Nortel-Magellan-Passport-AtmCoreMIB", "atmIfCAAbrIndex"))
if mibBuilder.loadTexts: atmIfCAAbrOperEntry.setStatus('mandatory')
atmIfCAAbrEpdOffset = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 3, 5, 110, 1, 10), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(5, 1024), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmIfCAAbrEpdOffset.setStatus('mandatory')
atmIfCAUbr = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 3, 6))
atmIfCAUbrRowStatusTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 3, 6, 1), )
if mibBuilder.loadTexts: atmIfCAUbrRowStatusTable.setStatus('mandatory')
atmIfCAUbrRowStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 3, 6, 1, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-AtmCoreMIB", "atmIfIndex"), (0, "Nortel-Magellan-Passport-AtmCoreMIB", "atmIfCAIndex"), (0, "Nortel-Magellan-Passport-AtmCoreMIB", "atmIfCAUbrIndex"))
if mibBuilder.loadTexts: atmIfCAUbrRowStatusEntry.setStatus('mandatory')
atmIfCAUbrRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 3, 6, 1, 1, 1), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmIfCAUbrRowStatus.setStatus('mandatory')
atmIfCAUbrComponentName = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 3, 6, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmIfCAUbrComponentName.setStatus('mandatory')
atmIfCAUbrStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 3, 6, 1, 1, 4), StorageType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmIfCAUbrStorageType.setStatus('mandatory')
atmIfCAUbrIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 3, 6, 1, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 0)))
if mibBuilder.loadTexts: atmIfCAUbrIndex.setStatus('mandatory')
atmIfCAUbrProvTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 3, 6, 100), )
if mibBuilder.loadTexts: atmIfCAUbrProvTable.setStatus('mandatory')
atmIfCAUbrProvEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 3, 6, 100, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-AtmCoreMIB", "atmIfIndex"), (0, "Nortel-Magellan-Passport-AtmCoreMIB", "atmIfCAIndex"), (0, "Nortel-Magellan-Passport-AtmCoreMIB", "atmIfCAUbrIndex"))
if mibBuilder.loadTexts: atmIfCAUbrProvEntry.setStatus('mandatory')
atmIfCAUbrMaxVpcs = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 3, 6, 100, 1, 5), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 4096), ValueRangeConstraint(16385, 16385), )).clone(16385)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmIfCAUbrMaxVpcs.setStatus('mandatory')
atmIfCAUbrMaxVccs = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 3, 6, 100, 1, 6), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 16384), ValueRangeConstraint(16385, 16385), )).clone(16385)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmIfCAUbrMaxVccs.setStatus('mandatory')
atmIfCAUbrMaxVpts = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 3, 6, 100, 1, 7), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 4096), ValueRangeConstraint(16385, 16385), )).clone(16385)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmIfCAUbrMaxVpts.setStatus('mandatory')
atmIfCAUbrPool = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 3, 6, 100, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("pool1", 1), ("pool2", 2), ("pool3", 3), ("pool4", 4), ("pool5", 5))).clone('pool1')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmIfCAUbrPool.setStatus('mandatory')
atmIfCAUbrMinimumCellRate = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 3, 6, 100, 1, 11), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmIfCAUbrMinimumCellRate.setStatus('mandatory')
atmIfCAUbrTxQueueLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 3, 6, 100, 1, 12), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(5, 63488), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmIfCAUbrTxQueueLimit.setStatus('mandatory')
atmIfCAUbrMinPerVcQueueLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 3, 6, 100, 1, 13), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(5, 30000)).clone(88)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmIfCAUbrMinPerVcQueueLimit.setStatus('mandatory')
atmIfCAUbrPerVcQueueLimitReferenceRate = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 3, 6, 100, 1, 14), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(1, 943396), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmIfCAUbrPerVcQueueLimitReferenceRate.setStatus('mandatory')
atmIfCAUbrEmissionPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 3, 6, 100, 1, 15), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 7)).clone(7)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmIfCAUbrEmissionPriority.setStatus('mandatory')
atmIfCAUbrTrafficShaping = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 3, 6, 100, 1, 19), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 5, 6))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 5), ("inverseUpc", 6))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmIfCAUbrTrafficShaping.setStatus('mandatory')
atmIfCAUbrShapeRecoupPolicy = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 3, 6, 100, 1, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("minimumCdv", 0), ("maximumEfficiency", 1))).clone('maximumEfficiency')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmIfCAUbrShapeRecoupPolicy.setStatus('mandatory')
atmIfCAUbrUnshapedTransmitQueueing = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 3, 6, 100, 1, 21), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("perVc", 0), ("common", 1), ("autoConfigure", 2))).clone('autoConfigure')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmIfCAUbrUnshapedTransmitQueueing.setStatus('mandatory')
atmIfCAUbrUsageParameterControl = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 3, 6, 100, 1, 22), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 4))).clone(namedValues=NamedValues(("enforced", 0), ("disabled", 1), ("monitored", 4))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmIfCAUbrUsageParameterControl.setStatus('mandatory')
atmIfCAUbrWeightPolicy = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 3, 6, 100, 1, 23), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 2, 3))).clone(namedValues=NamedValues(("mcr", 0), ("pcr", 2), ("ecr", 3))).clone('pcr')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmIfCAUbrWeightPolicy.setStatus('mandatory')
atmIfCAUbrForceTagging = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 3, 6, 100, 1, 24), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("enabled", 0), ("disabled", 1))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmIfCAUbrForceTagging.setStatus('mandatory')
atmIfCAUbrCdvt = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 3, 6, 100, 1, 30), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 1200000)).clone(250)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmIfCAUbrCdvt.setStatus('mandatory')
atmIfCAUbrHoldingPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 3, 6, 100, 1, 40), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4))).clone(namedValues=NamedValues(("n0", 0), ("n1", 1), ("n2", 2), ("n3", 3), ("n4", 4))).clone('n3')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmIfCAUbrHoldingPriority.setStatus('mandatory')
atmIfCAUbrSvcMpHoldingPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 3, 6, 100, 1, 50), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4))).clone(namedValues=NamedValues(("n0", 0), ("n1", 1), ("n2", 2), ("n3", 3), ("n4", 4))).clone('n3')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmIfCAUbrSvcMpHoldingPriority.setStatus('mandatory')
atmIfCAUbrOperTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 3, 6, 110), )
if mibBuilder.loadTexts: atmIfCAUbrOperTable.setStatus('mandatory')
atmIfCAUbrOperEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 3, 6, 110, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-AtmCoreMIB", "atmIfIndex"), (0, "Nortel-Magellan-Passport-AtmCoreMIB", "atmIfCAIndex"), (0, "Nortel-Magellan-Passport-AtmCoreMIB", "atmIfCAUbrIndex"))
if mibBuilder.loadTexts: atmIfCAUbrOperEntry.setStatus('mandatory')
atmIfCAUbrOpUnshapedTransmitQueueing = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 3, 6, 110, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("perVc", 0), ("common", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmIfCAUbrOpUnshapedTransmitQueueing.setStatus('mandatory')
atmIfCAUbrVpcUsage = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 3, 6, 110, 1, 11), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4096))).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmIfCAUbrVpcUsage.setStatus('mandatory')
atmIfCAUbrVccUsage = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 3, 6, 110, 1, 12), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 16384))).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmIfCAUbrVccUsage.setStatus('mandatory')
atmIfCAUbrVptUsage = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 3, 6, 110, 1, 13), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4096))).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmIfCAUbrVptUsage.setStatus('mandatory')
atmIfCAUbrEpdOffset = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 3, 6, 110, 1, 14), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(5, 1024), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmIfCAUbrEpdOffset.setStatus('mandatory')
atmIfVpc = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 4))
atmIfVpcRowStatusTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 4, 1), )
if mibBuilder.loadTexts: atmIfVpcRowStatusTable.setStatus('mandatory')
atmIfVpcRowStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 4, 1, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-AtmCoreMIB", "atmIfIndex"), (0, "Nortel-Magellan-Passport-AtmCoreMIB", "atmIfVpcIndex"))
if mibBuilder.loadTexts: atmIfVpcRowStatusEntry.setStatus('mandatory')
atmIfVpcRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 4, 1, 1, 1), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmIfVpcRowStatus.setStatus('mandatory')
atmIfVpcComponentName = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 4, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmIfVpcComponentName.setStatus('mandatory')
atmIfVpcStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 4, 1, 1, 4), StorageType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmIfVpcStorageType.setStatus('mandatory')
atmIfVpcIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 4, 1, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4095)))
if mibBuilder.loadTexts: atmIfVpcIndex.setStatus('mandatory')
atmIfVpcStateTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 4, 100), )
if mibBuilder.loadTexts: atmIfVpcStateTable.setStatus('mandatory')
atmIfVpcStateEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 4, 100, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-AtmCoreMIB", "atmIfIndex"), (0, "Nortel-Magellan-Passport-AtmCoreMIB", "atmIfVpcIndex"))
if mibBuilder.loadTexts: atmIfVpcStateEntry.setStatus('mandatory')
atmIfVpcAdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 4, 100, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("locked", 0), ("unlocked", 1), ("shuttingDown", 2))).clone('unlocked')).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmIfVpcAdminState.setStatus('mandatory')
atmIfVpcOperationalState = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 4, 100, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1))).clone('disabled')).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmIfVpcOperationalState.setStatus('mandatory')
atmIfVpcUsageState = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 4, 100, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("idle", 0), ("active", 1), ("busy", 2))).clone('idle')).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmIfVpcUsageState.setStatus('mandatory')
atmIfVpcOperTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 4, 110), )
if mibBuilder.loadTexts: atmIfVpcOperTable.setStatus('mandatory')
atmIfVpcOperEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 4, 110, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-AtmCoreMIB", "atmIfIndex"), (0, "Nortel-Magellan-Passport-AtmCoreMIB", "atmIfVpcIndex"))
if mibBuilder.loadTexts: atmIfVpcOperEntry.setStatus('mandatory')
atmIfVpcConnectionPointType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 4, 110, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("connectionEndPoint", 0), ("segmentEndPoint", 1), ("connectingPoint", 2), ("unknown", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmIfVpcConnectionPointType.setStatus('mandatory')
atmIfVpcStatusTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 4, 120), )
if mibBuilder.loadTexts: atmIfVpcStatusTable.setStatus('mandatory')
atmIfVpcStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 4, 120, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-AtmCoreMIB", "atmIfIndex"), (0, "Nortel-Magellan-Passport-AtmCoreMIB", "atmIfVpcIndex"))
if mibBuilder.loadTexts: atmIfVpcStatusEntry.setStatus('mandatory')
atmIfVpcOperStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 4, 120, 1, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4))).clone(namedValues=NamedValues(("unknown", 0), ("end2endUp", 1), ("end2endDown", 2), ("localUpEnd2endUnknown", 3), ("localDown", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmIfVpcOperStatus.setStatus('mandatory')
atmIfVpcLocalFailureCause = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 4, 120, 1, 25), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("noFailure", 0), ("localBwLoss", 1), ("portDown", 2), ("notAdmitted", 3), ("appNotRegistered", 4), ("disabledByApp", 5), ("bwReduced", 6), ("vpDown", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmIfVpcLocalFailureCause.setStatus('mandatory')
atmIfVpcTroubled = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 4, 120, 1, 28), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("no", 0), ("yes", 1))).clone('no')).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmIfVpcTroubled.setStatus('mandatory')
atmIfVpcSegLinkSideLoopbackState = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 4, 120, 1, 30), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("good", 0), ("bad", 1), ("unknown", 2), ("notApplicable", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmIfVpcSegLinkSideLoopbackState.setStatus('mandatory')
atmIfVpcSegSwitchSideLoopbackState = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 4, 120, 1, 40), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("good", 0), ("bad", 1), ("unknown", 2), ("notApplicable", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmIfVpcSegSwitchSideLoopbackState.setStatus('mandatory')
atmIfVpcEndToEndLoopbackState = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 4, 120, 1, 50), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("good", 0), ("bad", 1), ("unknown", 2), ("notApplicable", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmIfVpcEndToEndLoopbackState.setStatus('mandatory')
atmIfVpcRxOamCellCongestionState = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 4, 120, 1, 55), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("good", 0), ("bad", 1), ("unknown", 2), ("notApplicable", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmIfVpcRxOamCellCongestionState.setStatus('mandatory')
atmIfVpcAisState = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 4, 120, 1, 60), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("good", 0), ("bad", 1), ("unknown", 2), ("notApplicable", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmIfVpcAisState.setStatus('mandatory')
atmIfVpcRdiState = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 4, 120, 1, 70), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("good", 0), ("bad", 1), ("unknown", 2), ("notApplicable", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmIfVpcRdiState.setStatus('mandatory')
atmIfVpcTrafficTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 4, 130), )
if mibBuilder.loadTexts: atmIfVpcTrafficTable.setStatus('mandatory')
atmIfVpcTrafficEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 4, 130, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-AtmCoreMIB", "atmIfIndex"), (0, "Nortel-Magellan-Passport-AtmCoreMIB", "atmIfVpcIndex"))
if mibBuilder.loadTexts: atmIfVpcTrafficEntry.setStatus('mandatory')
atmIfVpcTxTrafficDescType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 4, 130, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("n1", 1), ("n2", 2), ("n3", 3), ("n4", 4), ("n5", 5), ("n6", 6), ("n7", 7), ("n8", 8)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmIfVpcTxTrafficDescType.setStatus('obsolete')
atmIfVpcTxQosClass = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 4, 130, 1, 30), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4))).clone(namedValues=NamedValues(("unspecified", 0), ("constantBitRate", 1), ("variableBitRate", 2), ("connectionOriented", 3), ("connectionless", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmIfVpcTxQosClass.setStatus('obsolete')
atmIfVpcFwdQosClass = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 4, 130, 1, 31), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 14))).clone(namedValues=NamedValues(("n0", 0), ("n1", 1), ("n2", 2), ("n3", 3), ("n4", 4), ("notApplicable", 14)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmIfVpcFwdQosClass.setStatus('obsolete')
atmIfVpcTxQueueLength = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 4, 130, 1, 32), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 30720))).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmIfVpcTxQueueLength.setStatus('obsolete')
atmIfVpcTxQueueCongestionState = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 4, 130, 1, 33), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 3))).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmIfVpcTxQueueCongestionState.setStatus('obsolete')
atmIfVpcHoldingPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 4, 130, 1, 35), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 6))).clone(namedValues=NamedValues(("n0", 0), ("n1", 1), ("n2", 2), ("n3", 3), ("n4", 4), ("notApplicable", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmIfVpcHoldingPriority.setStatus('obsolete')
atmIfVpcRxTrafficDescType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 4, 130, 1, 40), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("n1", 1), ("n2", 2), ("n3", 3), ("n4", 4), ("n5", 5), ("n6", 6), ("n7", 7), ("n8", 8)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmIfVpcRxTrafficDescType.setStatus('obsolete')
atmIfVpcRxQosClass = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 4, 130, 1, 60), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4))).clone(namedValues=NamedValues(("unspecified", 0), ("constantBitRate", 1), ("variableBitRate", 2), ("connectionOriented", 3), ("connectionless", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmIfVpcRxQosClass.setStatus('obsolete')
atmIfVpcBwdQosClass = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 4, 130, 1, 61), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 14))).clone(namedValues=NamedValues(("n0", 0), ("n1", 1), ("n2", 2), ("n3", 3), ("n4", 4), ("notApplicable", 14)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmIfVpcBwdQosClass.setStatus('obsolete')
atmIfVpcAtmServiceCategory = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 4, 130, 1, 62), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("unspecifiedBitRate", 0), ("constantBitRate", 1), ("rtVariableBitRate", 2), ("nrtVariableBitRate", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmIfVpcAtmServiceCategory.setStatus('obsolete')
atmIfVpcTrafficShaping = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 4, 130, 1, 70), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 4))).clone(namedValues=NamedValues(("enabled", 0), ("disabled", 1), ("notApplicable", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmIfVpcTrafficShaping.setStatus('obsolete')
atmIfVpcBearerClassBbc = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 4, 130, 1, 71), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 3, 16, 24, 30))).clone(namedValues=NamedValues(("a", 1), ("c", 3), ("x", 16), ("vp", 24), ("notApplicable", 30)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmIfVpcBearerClassBbc.setStatus('obsolete')
atmIfVpcTransferCapabilityBbc = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 4, 130, 1, 72), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 5, 8, 9, 10, 30))).clone(namedValues=NamedValues(("n0", 0), ("n1", 1), ("n2", 2), ("n5", 5), ("n8", 8), ("n9", 9), ("n10", 10), ("notApplicable", 30)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmIfVpcTransferCapabilityBbc.setStatus('obsolete')
atmIfVpcClippingBbc = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 4, 130, 1, 74), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 14))).clone(namedValues=NamedValues(("no", 0), ("yes", 1), ("notApplicable", 14)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmIfVpcClippingBbc.setStatus('obsolete')
atmIfVpcUnshapedTransmitQueueing = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 4, 130, 1, 75), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 4))).clone(namedValues=NamedValues(("perVc", 0), ("common", 1), ("notApplicable", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmIfVpcUnshapedTransmitQueueing.setStatus('obsolete')
atmIfVpcBestEffort = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 4, 130, 1, 76), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 14))).clone(namedValues=NamedValues(("indicated", 0), ("notIndicated", 1), ("notApplicable", 14)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmIfVpcBestEffort.setStatus('obsolete')
atmIfVpcUsageParameterControl = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 4, 130, 1, 80), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 3))).clone(namedValues=NamedValues(("enabled", 0), ("disabled", 1), ("notApplicable", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmIfVpcUsageParameterControl.setStatus('obsolete')
atmIfVpcTxFrameDiscard = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 4, 130, 1, 85), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 1)).setFixedLength(1)).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmIfVpcTxFrameDiscard.setStatus('obsolete')
atmIfVpcRxFrameDiscard = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 4, 130, 1, 86), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 1)).setFixedLength(1)).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmIfVpcRxFrameDiscard.setStatus('obsolete')
atmIfVpcBandwidthElastic = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 4, 130, 1, 90), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("no", 0), ("yes", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmIfVpcBandwidthElastic.setStatus('obsolete')
atmIfVpcBandwidthReduction = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 4, 130, 1, 100), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmIfVpcBandwidthReduction.setStatus('obsolete')
atmIfVpcStatsTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 4, 140), )
if mibBuilder.loadTexts: atmIfVpcStatsTable.setStatus('mandatory')
atmIfVpcStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 4, 140, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-AtmCoreMIB", "atmIfIndex"), (0, "Nortel-Magellan-Passport-AtmCoreMIB", "atmIfVpcIndex"))
if mibBuilder.loadTexts: atmIfVpcStatsEntry.setStatus('mandatory')
atmIfVpcStatsTxCell = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 4, 140, 1, 10), PassportCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmIfVpcStatsTxCell.setStatus('mandatory')
atmIfVpcStatsTxCellClp = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 4, 140, 1, 20), PassportCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmIfVpcStatsTxCellClp.setStatus('mandatory')
atmIfVpcTxDiscard = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 4, 140, 1, 30), PassportCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmIfVpcTxDiscard.setStatus('obsolete')
atmIfVpcTxDiscardClp = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 4, 140, 1, 40), PassportCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmIfVpcTxDiscardClp.setStatus('obsolete')
atmIfVpcStatsTxCellDiscard = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 4, 140, 1, 42), PassportCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmIfVpcStatsTxCellDiscard.setStatus('mandatory')
atmIfVpcStatsTxCellDiscardClp = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 4, 140, 1, 43), PassportCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmIfVpcStatsTxCellDiscardClp.setStatus('mandatory')
atmIfVpcStatsTxFrameDiscard = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 4, 140, 1, 46), PassportCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmIfVpcStatsTxFrameDiscard.setStatus('mandatory')
atmIfVpcStatsTxFrameDiscardClp = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 4, 140, 1, 47), PassportCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmIfVpcStatsTxFrameDiscardClp.setStatus('mandatory')
atmIfVpcTxUtilization = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 4, 140, 1, 48), Gauge32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 200), ValueRangeConstraint(255, 255), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmIfVpcTxUtilization.setStatus('mandatory')
atmIfVpcStatsRxCell = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 4, 140, 1, 50), PassportCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmIfVpcStatsRxCell.setStatus('mandatory')
atmIfVpcStatsRxCellClp = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 4, 140, 1, 60), PassportCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmIfVpcStatsRxCellClp.setStatus('mandatory')
atmIfVpcRxDiscard = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 4, 140, 1, 70), PassportCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmIfVpcRxDiscard.setStatus('obsolete')
atmIfVpcRxDiscardClp = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 4, 140, 1, 80), PassportCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmIfVpcRxDiscardClp.setStatus('obsolete')
atmIfVpcStatsRxCellDiscard = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 4, 140, 1, 82), PassportCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmIfVpcStatsRxCellDiscard.setStatus('mandatory')
atmIfVpcStatsRxCellDiscardClp = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 4, 140, 1, 83), PassportCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmIfVpcStatsRxCellDiscardClp.setStatus('mandatory')
atmIfVpcStatsRxFrameDiscard = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 4, 140, 1, 86), PassportCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmIfVpcStatsRxFrameDiscard.setStatus('mandatory')
atmIfVpcStatsRxFrameDiscardClp = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 4, 140, 1, 88), PassportCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmIfVpcStatsRxFrameDiscardClp.setStatus('mandatory')
atmIfVpcRxUtilization = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 4, 140, 1, 89), Gauge32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 200), ValueRangeConstraint(255, 255), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmIfVpcRxUtilization.setStatus('mandatory')
atmIfVpcStatsRxUpcViolationOnEnforcer1 = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 4, 140, 1, 90), PassportCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmIfVpcStatsRxUpcViolationOnEnforcer1.setStatus('mandatory')
atmIfVpcStatsRxUpcViolationOnEnforcer2 = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 4, 140, 1, 92), PassportCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmIfVpcStatsRxUpcViolationOnEnforcer2.setStatus('mandatory')
atmIfVpcStatsRxAal5FrameError = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 4, 140, 1, 100), PassportCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmIfVpcStatsRxAal5FrameError.setStatus('mandatory')
atmIfVpcStatsRxAal5FrameAbort = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 4, 140, 1, 102), PassportCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmIfVpcStatsRxAal5FrameAbort.setStatus('mandatory')
atmIfVpcTxTdpTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 4, 294), )
if mibBuilder.loadTexts: atmIfVpcTxTdpTable.setStatus('obsolete')
atmIfVpcTxTdpEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 4, 294, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-AtmCoreMIB", "atmIfIndex"), (0, "Nortel-Magellan-Passport-AtmCoreMIB", "atmIfVpcIndex"), (0, "Nortel-Magellan-Passport-AtmCoreMIB", "atmIfVpcTxTdpIndex"))
if mibBuilder.loadTexts: atmIfVpcTxTdpEntry.setStatus('obsolete')
atmIfVpcTxTdpIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 4, 294, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 5)))
if mibBuilder.loadTexts: atmIfVpcTxTdpIndex.setStatus('obsolete')
atmIfVpcTxTdpValue = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 4, 294, 1, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmIfVpcTxTdpValue.setStatus('obsolete')
atmIfVpcRxTdpTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 4, 295), )
if mibBuilder.loadTexts: atmIfVpcRxTdpTable.setStatus('obsolete')
atmIfVpcRxTdpEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 4, 295, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-AtmCoreMIB", "atmIfIndex"), (0, "Nortel-Magellan-Passport-AtmCoreMIB", "atmIfVpcIndex"), (0, "Nortel-Magellan-Passport-AtmCoreMIB", "atmIfVpcRxTdpIndex"))
if mibBuilder.loadTexts: atmIfVpcRxTdpEntry.setStatus('obsolete')
atmIfVpcRxTdpIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 4, 295, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4)))
if mibBuilder.loadTexts: atmIfVpcRxTdpIndex.setStatus('obsolete')
atmIfVpcRxTdpValue = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 4, 295, 1, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmIfVpcRxTdpValue.setStatus('obsolete')
atmIfVpcTxQThreshTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 4, 352), )
if mibBuilder.loadTexts: atmIfVpcTxQThreshTable.setStatus('obsolete')
atmIfVpcTxQThreshEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 4, 352, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-AtmCoreMIB", "atmIfIndex"), (0, "Nortel-Magellan-Passport-AtmCoreMIB", "atmIfVpcIndex"), (0, "Nortel-Magellan-Passport-AtmCoreMIB", "atmIfVpcTxQThreshIndex"))
if mibBuilder.loadTexts: atmIfVpcTxQThreshEntry.setStatus('obsolete')
atmIfVpcTxQThreshIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 4, 352, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 3)))
if mibBuilder.loadTexts: atmIfVpcTxQThreshIndex.setStatus('obsolete')
atmIfVpcTxQThreshValue = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 4, 352, 1, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 30720))).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmIfVpcTxQThreshValue.setStatus('obsolete')
atmIfVpcFqpTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 4, 357), )
if mibBuilder.loadTexts: atmIfVpcFqpTable.setStatus('obsolete')
atmIfVpcFqpEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 4, 357, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-AtmCoreMIB", "atmIfIndex"), (0, "Nortel-Magellan-Passport-AtmCoreMIB", "atmIfVpcIndex"), (0, "Nortel-Magellan-Passport-AtmCoreMIB", "atmIfVpcFqpIndex"))
if mibBuilder.loadTexts: atmIfVpcFqpEntry.setStatus('obsolete')
atmIfVpcFqpIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 4, 357, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("cdv", 0), ("ctd", 1), ("clr", 2))))
if mibBuilder.loadTexts: atmIfVpcFqpIndex.setStatus('obsolete')
atmIfVpcFqpValue = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 4, 357, 1, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmIfVpcFqpValue.setStatus('obsolete')
atmIfVpcBqpTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 4, 358), )
if mibBuilder.loadTexts: atmIfVpcBqpTable.setStatus('obsolete')
atmIfVpcBqpEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 4, 358, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-AtmCoreMIB", "atmIfIndex"), (0, "Nortel-Magellan-Passport-AtmCoreMIB", "atmIfVpcIndex"), (0, "Nortel-Magellan-Passport-AtmCoreMIB", "atmIfVpcBqpIndex"))
if mibBuilder.loadTexts: atmIfVpcBqpEntry.setStatus('obsolete')
atmIfVpcBqpIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 4, 358, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("cdv", 0), ("ctd", 1), ("clr", 2))))
if mibBuilder.loadTexts: atmIfVpcBqpIndex.setStatus('obsolete')
atmIfVpcBqpValue = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 4, 358, 1, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmIfVpcBqpValue.setStatus('obsolete')
atmIfVpcVpd = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 4, 2))
atmIfVpcVpdRowStatusTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 4, 2, 1), )
if mibBuilder.loadTexts: atmIfVpcVpdRowStatusTable.setStatus('mandatory')
atmIfVpcVpdRowStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 4, 2, 1, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-AtmCoreMIB", "atmIfIndex"), (0, "Nortel-Magellan-Passport-AtmCoreMIB", "atmIfVpcIndex"), (0, "Nortel-Magellan-Passport-AtmCoreMIB", "atmIfVpcVpdIndex"))
if mibBuilder.loadTexts: atmIfVpcVpdRowStatusEntry.setStatus('mandatory')
atmIfVpcVpdRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 4, 2, 1, 1, 1), RowStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmIfVpcVpdRowStatus.setStatus('mandatory')
atmIfVpcVpdComponentName = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 4, 2, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmIfVpcVpdComponentName.setStatus('mandatory')
atmIfVpcVpdStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 4, 2, 1, 1, 4), StorageType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmIfVpcVpdStorageType.setStatus('mandatory')
atmIfVpcVpdIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 4, 2, 1, 1, 10), NonReplicated())
if mibBuilder.loadTexts: atmIfVpcVpdIndex.setStatus('mandatory')
atmIfVpcVpdLbkTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 4, 2, 100), )
if mibBuilder.loadTexts: atmIfVpcVpdLbkTable.setStatus('mandatory')
atmIfVpcVpdLbkEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 4, 2, 100, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-AtmCoreMIB", "atmIfIndex"), (0, "Nortel-Magellan-Passport-AtmCoreMIB", "atmIfVpcIndex"), (0, "Nortel-Magellan-Passport-AtmCoreMIB", "atmIfVpcVpdIndex"))
if mibBuilder.loadTexts: atmIfVpcVpdLbkEntry.setStatus('mandatory')
atmIfVpcVpdSegLinkSideLoopback = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 4, 2, 100, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("on", 0), ("off", 1), ("sameAsInterface", 2))).clone('sameAsInterface')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmIfVpcVpdSegLinkSideLoopback.setStatus('mandatory')
atmIfVpcVpdSegSwitchSideLoopback = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 4, 2, 100, 1, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("on", 0), ("off", 1), ("sameAsInterface", 2))).clone('sameAsInterface')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmIfVpcVpdSegSwitchSideLoopback.setStatus('mandatory')
atmIfVpcVpdEndToEndLoopback = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 4, 2, 100, 1, 30), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("on", 0), ("off", 1), ("sameAsInterface", 2))).clone('sameAsInterface')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmIfVpcVpdEndToEndLoopback.setStatus('mandatory')
atmIfVpcVpdLoopbackMonitoring = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 4, 2, 100, 1, 1000), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("on", 0), ("off", 1), ("sameAsInterface", 2))).clone('sameAsInterface')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmIfVpcVpdLoopbackMonitoring.setStatus('mandatory')
atmIfVpcVpdTrafficTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 4, 2, 110), )
if mibBuilder.loadTexts: atmIfVpcVpdTrafficTable.setStatus('mandatory')
atmIfVpcVpdTrafficEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 4, 2, 110, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-AtmCoreMIB", "atmIfIndex"), (0, "Nortel-Magellan-Passport-AtmCoreMIB", "atmIfVpcIndex"), (0, "Nortel-Magellan-Passport-AtmCoreMIB", "atmIfVpcVpdIndex"))
if mibBuilder.loadTexts: atmIfVpcVpdTrafficEntry.setStatus('mandatory')
atmIfVpcVpdTxTrafficDescType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 4, 2, 110, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9))).clone(namedValues=NamedValues(("n1", 1), ("n2", 2), ("n3", 3), ("n4", 4), ("n5", 5), ("n6", 6), ("n7", 7), ("n8", 8), ("n9", 9))).clone('n1')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmIfVpcVpdTxTrafficDescType.setStatus('obsolete')
atmIfVpcVpdTxQosClass = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 4, 2, 110, 1, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4))).clone(namedValues=NamedValues(("unspecified", 0), ("constantBitRate", 1), ("variableBitRate", 2), ("connectionOriented", 3), ("connectionless", 4))).clone('connectionOriented')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmIfVpcVpdTxQosClass.setStatus('obsolete')
atmIfVpcVpdFwdQosClass = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 4, 2, 110, 1, 21), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4))).clone(namedValues=NamedValues(("n0", 0), ("n1", 1), ("n2", 2), ("n3", 3), ("n4", 4))).clone('n0')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmIfVpcVpdFwdQosClass.setStatus('obsolete')
atmIfVpcVpdHoldingPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 4, 2, 110, 1, 25), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4))).clone(namedValues=NamedValues(("n0", 0), ("n1", 1), ("n2", 2), ("n3", 3), ("n4", 4))).clone('n2')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmIfVpcVpdHoldingPriority.setStatus('obsolete')
atmIfVpcVpdRxTrafficDescType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 4, 2, 110, 1, 30), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 15))).clone(namedValues=NamedValues(("n1", 1), ("n2", 2), ("n3", 3), ("n4", 4), ("n5", 5), ("n6", 6), ("n7", 7), ("n8", 8), ("sameAsTx", 15))).clone('sameAsTx')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmIfVpcVpdRxTrafficDescType.setStatus('obsolete')
atmIfVpcVpdRxQosClass = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 4, 2, 110, 1, 40), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 15))).clone(namedValues=NamedValues(("unspecified", 0), ("constantBitRate", 1), ("variableBitRate", 2), ("connectionOriented", 3), ("connectionless", 4), ("sameAsTx", 15))).clone('sameAsTx')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmIfVpcVpdRxQosClass.setStatus('obsolete')
atmIfVpcVpdBwdQosClass = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 4, 2, 110, 1, 41), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 15))).clone(namedValues=NamedValues(("n0", 0), ("n1", 1), ("n2", 2), ("n3", 3), ("n4", 4), ("sameAsFwd", 15))).clone('sameAsFwd')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmIfVpcVpdBwdQosClass.setStatus('obsolete')
atmIfVpcVpdAtmServiceCategory = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 4, 2, 110, 1, 42), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 15))).clone(namedValues=NamedValues(("unspecifiedBitRate", 0), ("constantBitRate", 1), ("rtVariableBitRate", 2), ("nrtVariableBitRate", 3), ("derivedFromBBC", 15))).clone('unspecifiedBitRate')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmIfVpcVpdAtmServiceCategory.setStatus('obsolete')
atmIfVpcVpdTrafficShaping = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 4, 2, 110, 1, 50), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("sameAsInterface", 2))).clone('sameAsInterface')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmIfVpcVpdTrafficShaping.setStatus('obsolete')
atmIfVpcVpdUnshapedTransmitQueueing = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 4, 2, 110, 1, 60), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 3))).clone(namedValues=NamedValues(("common", 1), ("sameAsInterface", 3))).clone('sameAsInterface')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmIfVpcVpdUnshapedTransmitQueueing.setStatus('obsolete')
atmIfVpcVpdUsageParameterControl = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 4, 2, 110, 1, 70), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("sameAsInterface", 2))).clone('sameAsInterface')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmIfVpcVpdUsageParameterControl.setStatus('obsolete')
atmIfVpcVpdBearerClassBbc = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 4, 2, 110, 1, 71), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 3, 16, 24, 31))).clone(namedValues=NamedValues(("a", 1), ("c", 3), ("x", 16), ("vp", 24), ("derivedFromServiceCategory", 31))).clone('derivedFromServiceCategory')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmIfVpcVpdBearerClassBbc.setStatus('obsolete')
atmIfVpcVpdTransferCapabilityBbc = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 4, 2, 110, 1, 72), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 5, 8, 9, 10, 30, 31))).clone(namedValues=NamedValues(("n0", 0), ("n1", 1), ("n2", 2), ("n5", 5), ("n8", 8), ("n9", 9), ("n10", 10), ("notApplicable", 30), ("derivedFromServiceCategory", 31))).clone('derivedFromServiceCategory')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmIfVpcVpdTransferCapabilityBbc.setStatus('obsolete')
atmIfVpcVpdClippingBbc = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 4, 2, 110, 1, 74), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("no", 0), ("yes", 1))).clone('no')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmIfVpcVpdClippingBbc.setStatus('obsolete')
atmIfVpcVpdBestEffort = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 4, 2, 110, 1, 75), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 15))).clone(namedValues=NamedValues(("indicated", 0), ("notIndicated", 1), ("derivedFromServiceCategory", 15))).clone('derivedFromServiceCategory')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmIfVpcVpdBestEffort.setStatus('obsolete')
atmIfVpcVpdFwdFrameDiscard = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 4, 2, 110, 1, 76), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("notIndicated", 0), ("indicated", 1))).clone('notIndicated')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmIfVpcVpdFwdFrameDiscard.setStatus('obsolete')
atmIfVpcVpdBwdFrameDiscard = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 4, 2, 110, 1, 77), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("notIndicated", 0), ("indicated", 1))).clone('notIndicated')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmIfVpcVpdBwdFrameDiscard.setStatus('obsolete')
atmIfVpcVpdAcctTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 4, 2, 111), )
if mibBuilder.loadTexts: atmIfVpcVpdAcctTable.setStatus('mandatory')
atmIfVpcVpdAcctEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 4, 2, 111, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-AtmCoreMIB", "atmIfIndex"), (0, "Nortel-Magellan-Passport-AtmCoreMIB", "atmIfVpcIndex"), (0, "Nortel-Magellan-Passport-AtmCoreMIB", "atmIfVpcVpdIndex"))
if mibBuilder.loadTexts: atmIfVpcVpdAcctEntry.setStatus('mandatory')
atmIfVpcVpdCorrelationTag = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 4, 2, 111, 1, 10), AsciiString().subtype(subtypeSpec=ValueSizeConstraint(0, 32)).clone(hexValue="")).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmIfVpcVpdCorrelationTag.setStatus('mandatory')
atmIfVpcVpdTxTdpTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 4, 2, 297), )
if mibBuilder.loadTexts: atmIfVpcVpdTxTdpTable.setStatus('obsolete')
atmIfVpcVpdTxTdpEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 4, 2, 297, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-AtmCoreMIB", "atmIfIndex"), (0, "Nortel-Magellan-Passport-AtmCoreMIB", "atmIfVpcIndex"), (0, "Nortel-Magellan-Passport-AtmCoreMIB", "atmIfVpcVpdIndex"), (0, "Nortel-Magellan-Passport-AtmCoreMIB", "atmIfVpcVpdTxTdpIndex"))
if mibBuilder.loadTexts: atmIfVpcVpdTxTdpEntry.setStatus('obsolete')
atmIfVpcVpdTxTdpIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 4, 2, 297, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 5)))
if mibBuilder.loadTexts: atmIfVpcVpdTxTdpIndex.setStatus('obsolete')
atmIfVpcVpdTxTdpValue = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 4, 2, 297, 1, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmIfVpcVpdTxTdpValue.setStatus('obsolete')
atmIfVpcVpdRxTdpTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 4, 2, 298), )
if mibBuilder.loadTexts: atmIfVpcVpdRxTdpTable.setStatus('obsolete')
atmIfVpcVpdRxTdpEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 4, 2, 298, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-AtmCoreMIB", "atmIfIndex"), (0, "Nortel-Magellan-Passport-AtmCoreMIB", "atmIfVpcIndex"), (0, "Nortel-Magellan-Passport-AtmCoreMIB", "atmIfVpcVpdIndex"), (0, "Nortel-Magellan-Passport-AtmCoreMIB", "atmIfVpcVpdRxTdpIndex"))
if mibBuilder.loadTexts: atmIfVpcVpdRxTdpEntry.setStatus('obsolete')
atmIfVpcVpdRxTdpIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 4, 2, 298, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 5)))
if mibBuilder.loadTexts: atmIfVpcVpdRxTdpIndex.setStatus('obsolete')
atmIfVpcVpdRxTdpValue = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 4, 2, 298, 1, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmIfVpcVpdRxTdpValue.setStatus('obsolete')
atmIfVpcVpdFqpTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 4, 2, 359), )
if mibBuilder.loadTexts: atmIfVpcVpdFqpTable.setStatus('obsolete')
atmIfVpcVpdFqpEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 4, 2, 359, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-AtmCoreMIB", "atmIfIndex"), (0, "Nortel-Magellan-Passport-AtmCoreMIB", "atmIfVpcIndex"), (0, "Nortel-Magellan-Passport-AtmCoreMIB", "atmIfVpcVpdIndex"), (0, "Nortel-Magellan-Passport-AtmCoreMIB", "atmIfVpcVpdFqpIndex"))
if mibBuilder.loadTexts: atmIfVpcVpdFqpEntry.setStatus('obsolete')
atmIfVpcVpdFqpIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 4, 2, 359, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("cdv", 0), ("ctd", 1), ("clr", 2))))
if mibBuilder.loadTexts: atmIfVpcVpdFqpIndex.setStatus('obsolete')
atmIfVpcVpdFqpValue = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 4, 2, 359, 1, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmIfVpcVpdFqpValue.setStatus('obsolete')
atmIfVpcVpdBqpTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 4, 2, 360), )
if mibBuilder.loadTexts: atmIfVpcVpdBqpTable.setStatus('obsolete')
atmIfVpcVpdBqpEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 4, 2, 360, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-AtmCoreMIB", "atmIfIndex"), (0, "Nortel-Magellan-Passport-AtmCoreMIB", "atmIfVpcIndex"), (0, "Nortel-Magellan-Passport-AtmCoreMIB", "atmIfVpcVpdIndex"), (0, "Nortel-Magellan-Passport-AtmCoreMIB", "atmIfVpcVpdBqpIndex"))
if mibBuilder.loadTexts: atmIfVpcVpdBqpEntry.setStatus('obsolete')
atmIfVpcVpdBqpIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 4, 2, 360, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("cdv", 0), ("ctd", 1), ("clr", 2))))
if mibBuilder.loadTexts: atmIfVpcVpdBqpIndex.setStatus('obsolete')
atmIfVpcVpdBqpValue = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 4, 2, 360, 1, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmIfVpcVpdBqpValue.setStatus('obsolete')
atmIfVpcVpdTm = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 4, 2, 2))
atmIfVpcVpdTmRowStatusTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 4, 2, 2, 1), )
if mibBuilder.loadTexts: atmIfVpcVpdTmRowStatusTable.setStatus('mandatory')
atmIfVpcVpdTmRowStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 4, 2, 2, 1, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-AtmCoreMIB", "atmIfIndex"), (0, "Nortel-Magellan-Passport-AtmCoreMIB", "atmIfVpcIndex"), (0, "Nortel-Magellan-Passport-AtmCoreMIB", "atmIfVpcVpdIndex"), (0, "Nortel-Magellan-Passport-AtmCoreMIB", "atmIfVpcVpdTmIndex"))
if mibBuilder.loadTexts: atmIfVpcVpdTmRowStatusEntry.setStatus('mandatory')
atmIfVpcVpdTmRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 4, 2, 2, 1, 1, 1), RowStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmIfVpcVpdTmRowStatus.setStatus('mandatory')
atmIfVpcVpdTmComponentName = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 4, 2, 2, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmIfVpcVpdTmComponentName.setStatus('mandatory')
atmIfVpcVpdTmStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 4, 2, 2, 1, 1, 4), StorageType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmIfVpcVpdTmStorageType.setStatus('mandatory')
atmIfVpcVpdTmIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 4, 2, 2, 1, 1, 10), NonReplicated())
if mibBuilder.loadTexts: atmIfVpcVpdTmIndex.setStatus('mandatory')
atmIfVpcVpdTmProvTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 4, 2, 2, 100), )
if mibBuilder.loadTexts: atmIfVpcVpdTmProvTable.setStatus('mandatory')
atmIfVpcVpdTmProvEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 4, 2, 2, 100, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-AtmCoreMIB", "atmIfIndex"), (0, "Nortel-Magellan-Passport-AtmCoreMIB", "atmIfVpcIndex"), (0, "Nortel-Magellan-Passport-AtmCoreMIB", "atmIfVpcVpdIndex"), (0, "Nortel-Magellan-Passport-AtmCoreMIB", "atmIfVpcVpdTmIndex"))
if mibBuilder.loadTexts: atmIfVpcVpdTmProvEntry.setStatus('mandatory')
atmIfVpcVpdTmTxTrafficDescType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 4, 2, 2, 100, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9))).clone(namedValues=NamedValues(("n1", 1), ("n2", 2), ("n3", 3), ("n4", 4), ("n5", 5), ("n6", 6), ("n7", 7), ("n8", 8), ("n9", 9))).clone('n1')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmIfVpcVpdTmTxTrafficDescType.setStatus('mandatory')
atmIfVpcVpdTmFwdQosClass = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 4, 2, 2, 100, 1, 21), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4))).clone(namedValues=NamedValues(("n0", 0), ("n1", 1), ("n2", 2), ("n3", 3), ("n4", 4))).clone('n0')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmIfVpcVpdTmFwdQosClass.setStatus('mandatory')
atmIfVpcVpdTmTxQueueLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 4, 2, 2, 100, 1, 22), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(5, 63488), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmIfVpcVpdTmTxQueueLimit.setStatus('mandatory')
atmIfVpcVpdTmHoldingPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 4, 2, 2, 100, 1, 25), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4))).clone(namedValues=NamedValues(("n0", 0), ("n1", 1), ("n2", 2), ("n3", 3), ("n4", 4))).clone('n2')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmIfVpcVpdTmHoldingPriority.setStatus('mandatory')
atmIfVpcVpdTmRxTrafficDescType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 4, 2, 2, 100, 1, 30), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 15))).clone(namedValues=NamedValues(("n1", 1), ("n2", 2), ("n3", 3), ("n4", 4), ("n5", 5), ("n6", 6), ("n7", 7), ("n8", 8), ("n9", 9), ("sameAsTx", 15))).clone('sameAsTx')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmIfVpcVpdTmRxTrafficDescType.setStatus('mandatory')
atmIfVpcVpdTmBwdQosClass = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 4, 2, 2, 100, 1, 41), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 15))).clone(namedValues=NamedValues(("n0", 0), ("n1", 1), ("n2", 2), ("n3", 3), ("n4", 4), ("sameAsFwd", 15))).clone('sameAsFwd')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmIfVpcVpdTmBwdQosClass.setStatus('mandatory')
atmIfVpcVpdTmAtmServiceCategory = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 4, 2, 2, 100, 1, 42), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 15))).clone(namedValues=NamedValues(("unspecifiedBitRate", 0), ("constantBitRate", 1), ("rtVariableBitRate", 2), ("nrtVariableBitRate", 3), ("availableBitRate", 4), ("derivedFromBBC", 15))).clone('unspecifiedBitRate')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmIfVpcVpdTmAtmServiceCategory.setStatus('mandatory')
atmIfVpcVpdTmTrafficShaping = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 4, 2, 2, 100, 1, 50), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("sameAsCa", 2))).clone('sameAsCa')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmIfVpcVpdTmTrafficShaping.setStatus('mandatory')
atmIfVpcVpdTmUnshapedTransmitQueueing = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 4, 2, 2, 100, 1, 60), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 3))).clone(namedValues=NamedValues(("common", 1), ("sameAsCa", 3))).clone('sameAsCa')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmIfVpcVpdTmUnshapedTransmitQueueing.setStatus('mandatory')
atmIfVpcVpdTmWeight = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 4, 2, 2, 100, 1, 61), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(1, 4095), ValueRangeConstraint(65535, 65535), )).clone(65535)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmIfVpcVpdTmWeight.setStatus('mandatory')
atmIfVpcVpdTmForceTagging = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 4, 2, 2, 100, 1, 62), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("enabled", 0), ("disabled", 1), ("sameAsCa", 2))).clone('sameAsCa')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmIfVpcVpdTmForceTagging.setStatus('mandatory')
atmIfVpcVpdTmUsageParameterControl = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 4, 2, 2, 100, 1, 70), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 4))).clone(namedValues=NamedValues(("enforced", 0), ("disabled", 1), ("sameAsCa", 2), ("monitored", 4))).clone('sameAsCa')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmIfVpcVpdTmUsageParameterControl.setStatus('mandatory')
atmIfVpcVpdTmBearerClassBbc = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 4, 2, 2, 100, 1, 71), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 3, 16, 24, 31))).clone(namedValues=NamedValues(("a", 1), ("c", 3), ("x", 16), ("vp", 24), ("derivedFromServiceCategory", 31))).clone('derivedFromServiceCategory')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmIfVpcVpdTmBearerClassBbc.setStatus('mandatory')
atmIfVpcVpdTmTransferCapabilityBbc = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 4, 2, 2, 100, 1, 72), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 5, 8, 9, 10, 30, 31))).clone(namedValues=NamedValues(("n0", 0), ("n1", 1), ("n2", 2), ("n5", 5), ("n8", 8), ("n9", 9), ("n10", 10), ("notApplicable", 30), ("derivedFromServiceCategory", 31))).clone('derivedFromServiceCategory')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmIfVpcVpdTmTransferCapabilityBbc.setStatus('mandatory')
atmIfVpcVpdTmTxWredThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 4, 2, 2, 100, 1, 73), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(25, 25), ValueRangeConstraint(50, 50), ValueRangeConstraint(75, 75), )).clone(25)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmIfVpcVpdTmTxWredThreshold.setStatus('mandatory')
atmIfVpcVpdTmClippingBbc = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 4, 2, 2, 100, 1, 74), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("no", 0), ("yes", 1))).clone('no')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmIfVpcVpdTmClippingBbc.setStatus('mandatory')
atmIfVpcVpdTmBestEffort = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 4, 2, 2, 100, 1, 75), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 15))).clone(namedValues=NamedValues(("indicated", 0), ("notIndicated", 1), ("derivedFromServiceCategory", 15))).clone('derivedFromServiceCategory')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmIfVpcVpdTmBestEffort.setStatus('mandatory')
atmIfVpcVpdTmTxPacketWiseDiscard = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 4, 2, 2, 100, 1, 76), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmIfVpcVpdTmTxPacketWiseDiscard.setStatus('mandatory')
atmIfVpcVpdTmTxWredMode = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 4, 2, 2, 100, 1, 77), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1), ("perFlow", 2))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmIfVpcVpdTmTxWredMode.setStatus('mandatory')
atmIfVpcVpdTmRxPacketWiseDiscard = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 4, 2, 2, 100, 1, 78), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmIfVpcVpdTmRxPacketWiseDiscard.setStatus('mandatory')
atmIfVpcVpdTmAbrConnectionType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 4, 2, 2, 100, 1, 90), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 3, 4, 5, 14))).clone(namedValues=NamedValues(("abrSwitch", 0), ("virtualSourceDest", 3), ("sourceDest", 4), ("nonAbrInterworking", 5), ("sameAsCa", 14))).clone('sameAsCa')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmIfVpcVpdTmAbrConnectionType.setStatus('mandatory')
atmIfVpcVpdTmTxTdpTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 4, 2, 2, 456), )
if mibBuilder.loadTexts: atmIfVpcVpdTmTxTdpTable.setStatus('mandatory')
atmIfVpcVpdTmTxTdpEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 4, 2, 2, 456, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-AtmCoreMIB", "atmIfIndex"), (0, "Nortel-Magellan-Passport-AtmCoreMIB", "atmIfVpcIndex"), (0, "Nortel-Magellan-Passport-AtmCoreMIB", "atmIfVpcVpdIndex"), (0, "Nortel-Magellan-Passport-AtmCoreMIB", "atmIfVpcVpdTmIndex"), (0, "Nortel-Magellan-Passport-AtmCoreMIB", "atmIfVpcVpdTmTxTdpIndex"))
if mibBuilder.loadTexts: atmIfVpcVpdTmTxTdpEntry.setStatus('mandatory')
atmIfVpcVpdTmTxTdpIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 4, 2, 2, 456, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 5)))
if mibBuilder.loadTexts: atmIfVpcVpdTmTxTdpIndex.setStatus('mandatory')
atmIfVpcVpdTmTxTdpValue = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 4, 2, 2, 456, 1, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmIfVpcVpdTmTxTdpValue.setStatus('mandatory')
atmIfVpcVpdTmRxTdpTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 4, 2, 2, 457), )
if mibBuilder.loadTexts: atmIfVpcVpdTmRxTdpTable.setStatus('mandatory')
atmIfVpcVpdTmRxTdpEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 4, 2, 2, 457, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-AtmCoreMIB", "atmIfIndex"), (0, "Nortel-Magellan-Passport-AtmCoreMIB", "atmIfVpcIndex"), (0, "Nortel-Magellan-Passport-AtmCoreMIB", "atmIfVpcVpdIndex"), (0, "Nortel-Magellan-Passport-AtmCoreMIB", "atmIfVpcVpdTmIndex"), (0, "Nortel-Magellan-Passport-AtmCoreMIB", "atmIfVpcVpdTmRxTdpIndex"))
if mibBuilder.loadTexts: atmIfVpcVpdTmRxTdpEntry.setStatus('mandatory')
atmIfVpcVpdTmRxTdpIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 4, 2, 2, 457, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 5)))
if mibBuilder.loadTexts: atmIfVpcVpdTmRxTdpIndex.setStatus('mandatory')
atmIfVpcVpdTmRxTdpValue = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 4, 2, 2, 457, 1, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmIfVpcVpdTmRxTdpValue.setStatus('mandatory')
atmIfVpcVpdTmFqpTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 4, 2, 2, 458), )
if mibBuilder.loadTexts: atmIfVpcVpdTmFqpTable.setStatus('mandatory')
atmIfVpcVpdTmFqpEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 4, 2, 2, 458, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-AtmCoreMIB", "atmIfIndex"), (0, "Nortel-Magellan-Passport-AtmCoreMIB", "atmIfVpcIndex"), (0, "Nortel-Magellan-Passport-AtmCoreMIB", "atmIfVpcVpdIndex"), (0, "Nortel-Magellan-Passport-AtmCoreMIB", "atmIfVpcVpdTmIndex"), (0, "Nortel-Magellan-Passport-AtmCoreMIB", "atmIfVpcVpdTmFqpIndex"))
if mibBuilder.loadTexts: atmIfVpcVpdTmFqpEntry.setStatus('mandatory')
atmIfVpcVpdTmFqpIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 4, 2, 2, 458, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("cdv", 0), ("ctd", 1), ("clr", 2))))
if mibBuilder.loadTexts: atmIfVpcVpdTmFqpIndex.setStatus('mandatory')
atmIfVpcVpdTmFqpValue = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 4, 2, 2, 458, 1, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 16777215))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmIfVpcVpdTmFqpValue.setStatus('mandatory')
atmIfVpcVpdTmBqpTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 4, 2, 2, 459), )
if mibBuilder.loadTexts: atmIfVpcVpdTmBqpTable.setStatus('mandatory')
atmIfVpcVpdTmBqpEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 4, 2, 2, 459, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-AtmCoreMIB", "atmIfIndex"), (0, "Nortel-Magellan-Passport-AtmCoreMIB", "atmIfVpcIndex"), (0, "Nortel-Magellan-Passport-AtmCoreMIB", "atmIfVpcVpdIndex"), (0, "Nortel-Magellan-Passport-AtmCoreMIB", "atmIfVpcVpdTmIndex"), (0, "Nortel-Magellan-Passport-AtmCoreMIB", "atmIfVpcVpdTmBqpIndex"))
if mibBuilder.loadTexts: atmIfVpcVpdTmBqpEntry.setStatus('mandatory')
atmIfVpcVpdTmBqpIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 4, 2, 2, 459, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 2))).clone(namedValues=NamedValues(("cdv", 0), ("clr", 2))))
if mibBuilder.loadTexts: atmIfVpcVpdTmBqpIndex.setStatus('mandatory')
atmIfVpcVpdTmBqpValue = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 4, 2, 2, 459, 1, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 16777215))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmIfVpcVpdTmBqpValue.setStatus('mandatory')
atmIfVpcVpdTmAbr = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 4, 2, 2, 2))
atmIfVpcVpdTmAbrRowStatusTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 4, 2, 2, 2, 1), )
if mibBuilder.loadTexts: atmIfVpcVpdTmAbrRowStatusTable.setStatus('mandatory')
atmIfVpcVpdTmAbrRowStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 4, 2, 2, 2, 1, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-AtmCoreMIB", "atmIfIndex"), (0, "Nortel-Magellan-Passport-AtmCoreMIB", "atmIfVpcIndex"), (0, "Nortel-Magellan-Passport-AtmCoreMIB", "atmIfVpcVpdIndex"), (0, "Nortel-Magellan-Passport-AtmCoreMIB", "atmIfVpcVpdTmIndex"), (0, "Nortel-Magellan-Passport-AtmCoreMIB", "atmIfVpcVpdTmAbrIndex"))
if mibBuilder.loadTexts: atmIfVpcVpdTmAbrRowStatusEntry.setStatus('mandatory')
atmIfVpcVpdTmAbrRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 4, 2, 2, 2, 1, 1, 1), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmIfVpcVpdTmAbrRowStatus.setStatus('mandatory')
atmIfVpcVpdTmAbrComponentName = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 4, 2, 2, 2, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmIfVpcVpdTmAbrComponentName.setStatus('mandatory')
atmIfVpcVpdTmAbrStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 4, 2, 2, 2, 1, 1, 4), StorageType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmIfVpcVpdTmAbrStorageType.setStatus('mandatory')
atmIfVpcVpdTmAbrIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 4, 2, 2, 2, 1, 1, 10), NonReplicated())
if mibBuilder.loadTexts: atmIfVpcVpdTmAbrIndex.setStatus('mandatory')
atmIfVpcVpdTmAbrProvTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 4, 2, 2, 2, 110), )
if mibBuilder.loadTexts: atmIfVpcVpdTmAbrProvTable.setStatus('mandatory')
atmIfVpcVpdTmAbrProvEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 4, 2, 2, 2, 110, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-AtmCoreMIB", "atmIfIndex"), (0, "Nortel-Magellan-Passport-AtmCoreMIB", "atmIfVpcIndex"), (0, "Nortel-Magellan-Passport-AtmCoreMIB", "atmIfVpcVpdIndex"), (0, "Nortel-Magellan-Passport-AtmCoreMIB", "atmIfVpcVpdTmIndex"), (0, "Nortel-Magellan-Passport-AtmCoreMIB", "atmIfVpcVpdTmAbrIndex"))
if mibBuilder.loadTexts: atmIfVpcVpdTmAbrProvEntry.setStatus('mandatory')
atmIfVpcVpdTmAbrInitialCellRate = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 4, 2, 2, 2, 110, 1, 10), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 16777215), ValueRangeConstraint(16777216, 16777216), ValueRangeConstraint(16777217, 16777217), ValueRangeConstraint(16777218, 16777218), )).clone(16777216)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmIfVpcVpdTmAbrInitialCellRate.setStatus('mandatory')
atmIfVpcVpdTmAbrTransientBufferExposure = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 4, 2, 2, 2, 110, 1, 11), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 16777215)).clone(16777215)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmIfVpcVpdTmAbrTransientBufferExposure.setStatus('mandatory')
atmIfVpcVpdTmAbrFixedRoundTripTime = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 4, 2, 2, 2, 110, 1, 12), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 16700000)).clone(5000000)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmIfVpcVpdTmAbrFixedRoundTripTime.setStatus('mandatory')
atmIfVpcVpdTmAbrRateDecreaseFactor = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 4, 2, 2, 2, 110, 1, 13), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 15), ValueRangeConstraint(16777216, 16777216), )).clone(16777216)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmIfVpcVpdTmAbrRateDecreaseFactor.setStatus('mandatory')
atmIfVpcVpdTmAbrRateIncreaseFactor = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 4, 2, 2, 2, 110, 1, 14), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 15), ValueRangeConstraint(16777216, 16777216), )).clone(16777216)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmIfVpcVpdTmAbrRateIncreaseFactor.setStatus('mandatory')
atmIfVpcVpdTmAbrMaxCellPerRmCell = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 4, 2, 2, 2, 110, 1, 15), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(2, 2), ValueRangeConstraint(4, 4), ValueRangeConstraint(8, 8), ValueRangeConstraint(16, 16), ValueRangeConstraint(32, 32), ValueRangeConstraint(64, 64), ValueRangeConstraint(128, 128), ValueRangeConstraint(256, 256), ValueRangeConstraint(16777216, 16777216), )).clone(16777216)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmIfVpcVpdTmAbrMaxCellPerRmCell.setStatus('mandatory')
atmIfVpcVpdTmAbrMaxTimeBetweenRmCells = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 4, 2, 2, 2, 110, 1, 16), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(781, 781), ValueRangeConstraint(1563, 1563), ValueRangeConstraint(3125, 3125), ValueRangeConstraint(6250, 6250), ValueRangeConstraint(12500, 12500), ValueRangeConstraint(25000, 25000), ValueRangeConstraint(50000, 50000), ValueRangeConstraint(100000, 100000), ValueRangeConstraint(16777216, 16777216), )).clone(16777216)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmIfVpcVpdTmAbrMaxTimeBetweenRmCells.setStatus('mandatory')
atmIfVpcVpdTmAbrCutoffDecreaseFactor = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 4, 2, 2, 2, 110, 1, 17), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(1, 1), ValueRangeConstraint(2, 2), ValueRangeConstraint(4, 4), ValueRangeConstraint(8, 8), ValueRangeConstraint(16, 16), ValueRangeConstraint(32, 32), ValueRangeConstraint(64, 64), ValueRangeConstraint(16777216, 16777216), )).clone(16777216)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmIfVpcVpdTmAbrCutoffDecreaseFactor.setStatus('mandatory')
atmIfVpcVpdTmAbrAcrDecreaseTimeFactor = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 4, 2, 2, 2, 110, 1, 18), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 1023), ValueRangeConstraint(16777216, 16777216), )).clone(16777216)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmIfVpcVpdTmAbrAcrDecreaseTimeFactor.setStatus('mandatory')
atmIfVpcVpdTmAbrDgcraMaximumDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 4, 2, 2, 2, 110, 1, 19), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(1, 16700000), ValueRangeConstraint(16777216, 16777216), )).clone(16777216)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmIfVpcVpdTmAbrDgcraMaximumDelay.setStatus('mandatory')
atmIfVpcVpdTmAbrDgcraMinimumDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 4, 2, 2, 2, 110, 1, 20), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(1, 16700000), ValueRangeConstraint(16777216, 16777216), )).clone(16777216)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmIfVpcVpdTmAbrDgcraMinimumDelay.setStatus('mandatory')
atmIfVpcVpdTmAbrFarEndAcrDecreaseTimeFactor = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 4, 2, 2, 2, 110, 1, 21), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 1023), ValueRangeConstraint(1024, 1024), )).clone(1024)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmIfVpcVpdTmAbrFarEndAcrDecreaseTimeFactor.setStatus('mandatory')
atmIfVpcVpdTmAbrFarEndInitialCellRate = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 4, 2, 2, 2, 110, 1, 22), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 16777215), ValueRangeConstraint(16777219, 16777219), )).clone(16777219)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmIfVpcVpdTmAbrFarEndInitialCellRate.setStatus('mandatory')
atmIfVpcLoop = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 4, 3))
atmIfVpcLoopRowStatusTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 4, 3, 1), )
if mibBuilder.loadTexts: atmIfVpcLoopRowStatusTable.setStatus('mandatory')
atmIfVpcLoopRowStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 4, 3, 1, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-AtmCoreMIB", "atmIfIndex"), (0, "Nortel-Magellan-Passport-AtmCoreMIB", "atmIfVpcIndex"), (0, "Nortel-Magellan-Passport-AtmCoreMIB", "atmIfVpcLoopIndex"))
if mibBuilder.loadTexts: atmIfVpcLoopRowStatusEntry.setStatus('mandatory')
atmIfVpcLoopRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 4, 3, 1, 1, 1), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmIfVpcLoopRowStatus.setStatus('mandatory')
atmIfVpcLoopComponentName = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 4, 3, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmIfVpcLoopComponentName.setStatus('mandatory')
atmIfVpcLoopStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 4, 3, 1, 1, 4), StorageType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmIfVpcLoopStorageType.setStatus('mandatory')
atmIfVpcLoopIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 4, 3, 1, 1, 10), NonReplicated())
if mibBuilder.loadTexts: atmIfVpcLoopIndex.setStatus('mandatory')
atmIfVpcTm = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 4, 9))
atmIfVpcTmRowStatusTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 4, 9, 1), )
if mibBuilder.loadTexts: atmIfVpcTmRowStatusTable.setStatus('mandatory')
atmIfVpcTmRowStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 4, 9, 1, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-AtmCoreMIB", "atmIfIndex"), (0, "Nortel-Magellan-Passport-AtmCoreMIB", "atmIfVpcIndex"), (0, "Nortel-Magellan-Passport-AtmCoreMIB", "atmIfVpcTmIndex"))
if mibBuilder.loadTexts: atmIfVpcTmRowStatusEntry.setStatus('mandatory')
atmIfVpcTmRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 4, 9, 1, 1, 1), RowStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmIfVpcTmRowStatus.setStatus('mandatory')
atmIfVpcTmComponentName = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 4, 9, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmIfVpcTmComponentName.setStatus('mandatory')
atmIfVpcTmStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 4, 9, 1, 1, 4), StorageType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmIfVpcTmStorageType.setStatus('mandatory')
atmIfVpcTmIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 4, 9, 1, 1, 10), NonReplicated())
if mibBuilder.loadTexts: atmIfVpcTmIndex.setStatus('mandatory')
atmIfVpcTmOperTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 4, 9, 100), )
if mibBuilder.loadTexts: atmIfVpcTmOperTable.setStatus('mandatory')
atmIfVpcTmOperEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 4, 9, 100, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-AtmCoreMIB", "atmIfIndex"), (0, "Nortel-Magellan-Passport-AtmCoreMIB", "atmIfVpcIndex"), (0, "Nortel-Magellan-Passport-AtmCoreMIB", "atmIfVpcTmIndex"))
if mibBuilder.loadTexts: atmIfVpcTmOperEntry.setStatus('mandatory')
atmIfVpcTmTxTrafficDescType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 4, 9, 100, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9))).clone(namedValues=NamedValues(("n1", 1), ("n2", 2), ("n3", 3), ("n4", 4), ("n5", 5), ("n6", 6), ("n7", 7), ("n8", 8), ("n9", 9)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmIfVpcTmTxTrafficDescType.setStatus('mandatory')
atmIfVpcTmTxQosClass = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 4, 9, 100, 1, 31), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 14))).clone(namedValues=NamedValues(("n0", 0), ("n1", 1), ("n2", 2), ("n3", 3), ("n4", 4), ("notApplicable", 14)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmIfVpcTmTxQosClass.setStatus('mandatory')
atmIfVpcTmTxQueueLength = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 4, 9, 100, 1, 32), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 30720))).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmIfVpcTmTxQueueLength.setStatus('mandatory')
atmIfVpcTmTxQueueCongestionState = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 4, 9, 100, 1, 33), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 3))).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmIfVpcTmTxQueueCongestionState.setStatus('mandatory')
atmIfVpcTmHoldingPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 4, 9, 100, 1, 35), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 6))).clone(namedValues=NamedValues(("n0", 0), ("n1", 1), ("n2", 2), ("n3", 3), ("n4", 4), ("notApplicable", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmIfVpcTmHoldingPriority.setStatus('mandatory')
atmIfVpcTmRxTrafficDescType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 4, 9, 100, 1, 40), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9))).clone(namedValues=NamedValues(("n1", 1), ("n2", 2), ("n3", 3), ("n4", 4), ("n5", 5), ("n6", 6), ("n7", 7), ("n8", 8), ("n9", 9)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmIfVpcTmRxTrafficDescType.setStatus('mandatory')
atmIfVpcTmRxQosClass = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 4, 9, 100, 1, 61), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 14))).clone(namedValues=NamedValues(("n0", 0), ("n1", 1), ("n2", 2), ("n3", 3), ("n4", 4), ("notApplicable", 14)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmIfVpcTmRxQosClass.setStatus('mandatory')
atmIfVpcTmAtmServiceCategory = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 4, 9, 100, 1, 62), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4))).clone(namedValues=NamedValues(("unspecifiedBitRate", 0), ("constantBitRate", 1), ("rtVariableBitRate", 2), ("nrtVariableBitRate", 3), ("availableBitRate", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmIfVpcTmAtmServiceCategory.setStatus('mandatory')
atmIfVpcTmTrafficShaping = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 4, 9, 100, 1, 70), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 4, 5, 6, 7))).clone(namedValues=NamedValues(("disabled", 1), ("notApplicable", 4), ("linear", 5), ("inverseUpc", 6), ("dynamic", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmIfVpcTmTrafficShaping.setStatus('mandatory')
atmIfVpcTmBearerClassBbc = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 4, 9, 100, 1, 71), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 3, 16, 24, 30))).clone(namedValues=NamedValues(("a", 1), ("c", 3), ("x", 16), ("vp", 24), ("notApplicable", 30)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmIfVpcTmBearerClassBbc.setStatus('mandatory')
atmIfVpcTmTransferCapabilityBbc = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 4, 9, 100, 1, 72), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 5, 8, 9, 10, 30))).clone(namedValues=NamedValues(("n0", 0), ("n1", 1), ("n2", 2), ("n5", 5), ("n8", 8), ("n9", 9), ("n10", 10), ("notApplicable", 30)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmIfVpcTmTransferCapabilityBbc.setStatus('mandatory')
atmIfVpcTmClippingBbc = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 4, 9, 100, 1, 74), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 14))).clone(namedValues=NamedValues(("no", 0), ("yes", 1), ("notApplicable", 14)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmIfVpcTmClippingBbc.setStatus('mandatory')
atmIfVpcTmUnshapedTransmitQueueing = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 4, 9, 100, 1, 75), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 4, 5))).clone(namedValues=NamedValues(("perVc", 0), ("common", 1), ("notApplicable", 4), ("fifo", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmIfVpcTmUnshapedTransmitQueueing.setStatus('mandatory')
atmIfVpcTmBestEffort = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 4, 9, 100, 1, 76), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 14))).clone(namedValues=NamedValues(("indicated", 0), ("notIndicated", 1), ("notApplicable", 14)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmIfVpcTmBestEffort.setStatus('mandatory')
atmIfVpcTmForceTagging = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 4, 9, 100, 1, 78), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("enabled", 0), ("disabled", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmIfVpcTmForceTagging.setStatus('mandatory')
atmIfVpcTmWeight = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 4, 9, 100, 1, 79), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(1, 4095), ValueRangeConstraint(65534, 65534), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmIfVpcTmWeight.setStatus('mandatory')
atmIfVpcTmUsageParameterControl = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 4, 9, 100, 1, 80), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 3, 4, 5, 6))).clone(namedValues=NamedValues(("enforced", 0), ("disabled", 1), ("notApplicable", 3), ("monitored", 4), ("abrMonitored", 5), ("abrEnforced", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmIfVpcTmUsageParameterControl.setStatus('mandatory')
atmIfVpcTmTxPacketWiseDiscard = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 4, 9, 100, 1, 85), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 1)).setFixedLength(1)).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmIfVpcTmTxPacketWiseDiscard.setStatus('mandatory')
atmIfVpcTmRxPacketWiseDiscard = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 4, 9, 100, 1, 86), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 1)).setFixedLength(1)).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmIfVpcTmRxPacketWiseDiscard.setStatus('mandatory')
atmIfVpcTmBandwidthElastic = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 4, 9, 100, 1, 90), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("no", 0), ("yes", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmIfVpcTmBandwidthElastic.setStatus('mandatory')
atmIfVpcTmBandwidthReduction = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 4, 9, 100, 1, 100), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmIfVpcTmBandwidthReduction.setStatus('mandatory')
atmIfVpcTmAbrConnectionType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 4, 9, 100, 1, 110), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 15))).clone(namedValues=NamedValues(("erSwitch", 1), ("efciSwitch", 2), ("virtualSourceDest", 3), ("sourceDest", 4), ("nonAbrInterworking", 5), ("notApplicable", 15)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmIfVpcTmAbrConnectionType.setStatus('mandatory')
atmIfVpcTmTxTdpTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 4, 9, 451), )
if mibBuilder.loadTexts: atmIfVpcTmTxTdpTable.setStatus('mandatory')
atmIfVpcTmTxTdpEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 4, 9, 451, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-AtmCoreMIB", "atmIfIndex"), (0, "Nortel-Magellan-Passport-AtmCoreMIB", "atmIfVpcIndex"), (0, "Nortel-Magellan-Passport-AtmCoreMIB", "atmIfVpcTmIndex"), (0, "Nortel-Magellan-Passport-AtmCoreMIB", "atmIfVpcTmTxTdpIndex"))
if mibBuilder.loadTexts: atmIfVpcTmTxTdpEntry.setStatus('mandatory')
atmIfVpcTmTxTdpIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 4, 9, 451, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 5)))
if mibBuilder.loadTexts: atmIfVpcTmTxTdpIndex.setStatus('mandatory')
atmIfVpcTmTxTdpValue = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 4, 9, 451, 1, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmIfVpcTmTxTdpValue.setStatus('mandatory')
atmIfVpcTmTxQThreshTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 4, 9, 452), )
if mibBuilder.loadTexts: atmIfVpcTmTxQThreshTable.setStatus('mandatory')
atmIfVpcTmTxQThreshEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 4, 9, 452, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-AtmCoreMIB", "atmIfIndex"), (0, "Nortel-Magellan-Passport-AtmCoreMIB", "atmIfVpcIndex"), (0, "Nortel-Magellan-Passport-AtmCoreMIB", "atmIfVpcTmIndex"), (0, "Nortel-Magellan-Passport-AtmCoreMIB", "atmIfVpcTmTxQThreshIndex"))
if mibBuilder.loadTexts: atmIfVpcTmTxQThreshEntry.setStatus('mandatory')
atmIfVpcTmTxQThreshIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 4, 9, 452, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 3)))
if mibBuilder.loadTexts: atmIfVpcTmTxQThreshIndex.setStatus('mandatory')
atmIfVpcTmTxQThreshValue = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 4, 9, 452, 1, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 30720))).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmIfVpcTmTxQThreshValue.setStatus('mandatory')
atmIfVpcTmRxTdpTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 4, 9, 453), )
if mibBuilder.loadTexts: atmIfVpcTmRxTdpTable.setStatus('mandatory')
atmIfVpcTmRxTdpEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 4, 9, 453, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-AtmCoreMIB", "atmIfIndex"), (0, "Nortel-Magellan-Passport-AtmCoreMIB", "atmIfVpcIndex"), (0, "Nortel-Magellan-Passport-AtmCoreMIB", "atmIfVpcTmIndex"), (0, "Nortel-Magellan-Passport-AtmCoreMIB", "atmIfVpcTmRxTdpIndex"))
if mibBuilder.loadTexts: atmIfVpcTmRxTdpEntry.setStatus('mandatory')
atmIfVpcTmRxTdpIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 4, 9, 453, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4)))
if mibBuilder.loadTexts: atmIfVpcTmRxTdpIndex.setStatus('mandatory')
atmIfVpcTmRxTdpValue = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 4, 9, 453, 1, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmIfVpcTmRxTdpValue.setStatus('mandatory')
atmIfVpcTmTqpTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 4, 9, 454), )
if mibBuilder.loadTexts: atmIfVpcTmTqpTable.setStatus('mandatory')
atmIfVpcTmTqpEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 4, 9, 454, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-AtmCoreMIB", "atmIfIndex"), (0, "Nortel-Magellan-Passport-AtmCoreMIB", "atmIfVpcIndex"), (0, "Nortel-Magellan-Passport-AtmCoreMIB", "atmIfVpcTmIndex"), (0, "Nortel-Magellan-Passport-AtmCoreMIB", "atmIfVpcTmTqpIndex"))
if mibBuilder.loadTexts: atmIfVpcTmTqpEntry.setStatus('mandatory')
atmIfVpcTmTqpIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 4, 9, 454, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("cdv", 0), ("ctd", 1), ("clr", 2))))
if mibBuilder.loadTexts: atmIfVpcTmTqpIndex.setStatus('mandatory')
atmIfVpcTmTqpValue = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 4, 9, 454, 1, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmIfVpcTmTqpValue.setStatus('mandatory')
atmIfVpcTmRqpTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 4, 9, 455), )
if mibBuilder.loadTexts: atmIfVpcTmRqpTable.setStatus('mandatory')
atmIfVpcTmRqpEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 4, 9, 455, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-AtmCoreMIB", "atmIfIndex"), (0, "Nortel-Magellan-Passport-AtmCoreMIB", "atmIfVpcIndex"), (0, "Nortel-Magellan-Passport-AtmCoreMIB", "atmIfVpcTmIndex"), (0, "Nortel-Magellan-Passport-AtmCoreMIB", "atmIfVpcTmRqpIndex"))
if mibBuilder.loadTexts: atmIfVpcTmRqpEntry.setStatus('mandatory')
atmIfVpcTmRqpIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 4, 9, 455, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("cdv", 0), ("ctd", 1), ("clr", 2))))
if mibBuilder.loadTexts: atmIfVpcTmRqpIndex.setStatus('mandatory')
atmIfVpcTmRqpValue = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 4, 9, 455, 1, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmIfVpcTmRqpValue.setStatus('mandatory')
atmIfVpcTmAbr = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 4, 9, 2))
atmIfVpcTmAbrRowStatusTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 4, 9, 2, 1), )
if mibBuilder.loadTexts: atmIfVpcTmAbrRowStatusTable.setStatus('mandatory')
atmIfVpcTmAbrRowStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 4, 9, 2, 1, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-AtmCoreMIB", "atmIfIndex"), (0, "Nortel-Magellan-Passport-AtmCoreMIB", "atmIfVpcIndex"), (0, "Nortel-Magellan-Passport-AtmCoreMIB", "atmIfVpcTmIndex"), (0, "Nortel-Magellan-Passport-AtmCoreMIB", "atmIfVpcTmAbrIndex"))
if mibBuilder.loadTexts: atmIfVpcTmAbrRowStatusEntry.setStatus('mandatory')
atmIfVpcTmAbrRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 4, 9, 2, 1, 1, 1), RowStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmIfVpcTmAbrRowStatus.setStatus('mandatory')
atmIfVpcTmAbrComponentName = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 4, 9, 2, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmIfVpcTmAbrComponentName.setStatus('mandatory')
atmIfVpcTmAbrStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 4, 9, 2, 1, 1, 4), StorageType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmIfVpcTmAbrStorageType.setStatus('mandatory')
atmIfVpcTmAbrIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 4, 9, 2, 1, 1, 10), NonReplicated())
if mibBuilder.loadTexts: atmIfVpcTmAbrIndex.setStatus('mandatory')
atmIfVpcTmAbrOperTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 4, 9, 2, 110), )
if mibBuilder.loadTexts: atmIfVpcTmAbrOperTable.setStatus('mandatory')
atmIfVpcTmAbrOperEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 4, 9, 2, 110, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-AtmCoreMIB", "atmIfIndex"), (0, "Nortel-Magellan-Passport-AtmCoreMIB", "atmIfVpcIndex"), (0, "Nortel-Magellan-Passport-AtmCoreMIB", "atmIfVpcTmIndex"), (0, "Nortel-Magellan-Passport-AtmCoreMIB", "atmIfVpcTmAbrIndex"))
if mibBuilder.loadTexts: atmIfVpcTmAbrOperEntry.setStatus('mandatory')
atmIfVpcTmAbrInitialCellRate = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 4, 9, 2, 110, 1, 10), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 16777215))).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmIfVpcTmAbrInitialCellRate.setStatus('mandatory')
atmIfVpcTmAbrTransientBufferExposure = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 4, 9, 2, 110, 1, 11), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 16777215))).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmIfVpcTmAbrTransientBufferExposure.setStatus('mandatory')
atmIfVpcTmAbrFixedRoundTripTime = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 4, 9, 2, 110, 1, 12), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 16700000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmIfVpcTmAbrFixedRoundTripTime.setStatus('mandatory')
atmIfVpcTmAbrRateDecreaseFactor = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 4, 9, 2, 110, 1, 13), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 15))).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmIfVpcTmAbrRateDecreaseFactor.setStatus('mandatory')
atmIfVpcTmAbrRateIncreaseFactor = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 4, 9, 2, 110, 1, 14), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 15))).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmIfVpcTmAbrRateIncreaseFactor.setStatus('mandatory')
atmIfVpcTmAbrMaxCellPerRmCell = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 4, 9, 2, 110, 1, 15), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(2, 2), ValueRangeConstraint(4, 4), ValueRangeConstraint(8, 8), ValueRangeConstraint(16, 16), ValueRangeConstraint(32, 32), ValueRangeConstraint(64, 64), ValueRangeConstraint(128, 128), ValueRangeConstraint(256, 256), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmIfVpcTmAbrMaxCellPerRmCell.setStatus('mandatory')
atmIfVpcTmAbrMaxTimeBetweenRmCell = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 4, 9, 2, 110, 1, 16), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(781, 781), ValueRangeConstraint(1563, 1563), ValueRangeConstraint(3125, 3125), ValueRangeConstraint(6250, 6250), ValueRangeConstraint(12500, 12500), ValueRangeConstraint(25000, 25000), ValueRangeConstraint(50000, 50000), ValueRangeConstraint(100000, 100000), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmIfVpcTmAbrMaxTimeBetweenRmCell.setStatus('mandatory')
atmIfVpcTmAbrCutoffDecreaseFactor = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 4, 9, 2, 110, 1, 17), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(1, 1), ValueRangeConstraint(2, 2), ValueRangeConstraint(4, 4), ValueRangeConstraint(8, 8), ValueRangeConstraint(16, 16), ValueRangeConstraint(32, 32), ValueRangeConstraint(64, 64), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmIfVpcTmAbrCutoffDecreaseFactor.setStatus('mandatory')
atmIfVpcTmAbrAcrDecreaseTimeFactor = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 4, 9, 2, 110, 1, 18), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 1023))).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmIfVpcTmAbrAcrDecreaseTimeFactor.setStatus('mandatory')
atmIfVpcTmAbrForwardRmCellLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 4, 9, 2, 110, 1, 19), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(1, 1), ValueRangeConstraint(3, 3), ValueRangeConstraint(7, 7), ValueRangeConstraint(15, 15), ValueRangeConstraint(31, 31), ValueRangeConstraint(63, 63), ValueRangeConstraint(127, 127), ValueRangeConstraint(255, 255), ValueRangeConstraint(511, 511), ValueRangeConstraint(1023, 1023), ValueRangeConstraint(2047, 2047), ValueRangeConstraint(4095, 4095), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmIfVpcTmAbrForwardRmCellLimit.setStatus('mandatory')
atmIfVpcTmAbrTxRateChangeInfo = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 4, 9, 2, 110, 1, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("congestionIndicated", 0), ("noIncreaseIndicated", 1), ("explicitRateIndicated", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmIfVpcTmAbrTxRateChangeInfo.setStatus('obsolete')
atmIfVpcTmAbrAcrRateChangeInfo = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 4, 9, 2, 110, 1, 21), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 15))).clone(namedValues=NamedValues(("noChange", 0), ("decreasedByRdf", 1), ("increasedByRif", 2), ("setToExplicitRate", 3), ("notApplicable", 15)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmIfVpcTmAbrAcrRateChangeInfo.setStatus('mandatory')
atmIfVpcTmAbrTxFwdRmCells = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 4, 9, 2, 110, 1, 22), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4095))).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmIfVpcTmAbrTxFwdRmCells.setStatus('mandatory')
atmIfVpcTmAbrRxEfci = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 4, 9, 2, 110, 1, 23), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("notIndicated", 0), ("indicated", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmIfVpcTmAbrRxEfci.setStatus('mandatory')
atmIfVpcTmAbrBrmRateChangeInfo = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 4, 9, 2, 110, 1, 24), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 1)).setFixedLength(1)).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmIfVpcTmAbrBrmRateChangeInfo.setStatus('mandatory')
atmIfVpcTmAbrBrmExplicitRate = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 4, 9, 2, 110, 1, 25), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 16777215))).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmIfVpcTmAbrBrmExplicitRate.setStatus('mandatory')
atmIfVcc = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 5))
atmIfVccRowStatusTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 5, 1), )
if mibBuilder.loadTexts: atmIfVccRowStatusTable.setStatus('mandatory')
atmIfVccRowStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 5, 1, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-AtmCoreMIB", "atmIfIndex"), (0, "Nortel-Magellan-Passport-AtmCoreMIB", "atmIfVccIndex"))
if mibBuilder.loadTexts: atmIfVccRowStatusEntry.setStatus('mandatory')
atmIfVccRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 5, 1, 1, 1), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmIfVccRowStatus.setStatus('mandatory')
atmIfVccComponentName = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 5, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmIfVccComponentName.setStatus('mandatory')
atmIfVccStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 5, 1, 1, 4), StorageType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmIfVccStorageType.setStatus('mandatory')
atmIfVccIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 5, 1, 1, 10), AsciiStringIndex().subtype(subtypeSpec=ValueSizeConstraint(3, 10)))
if mibBuilder.loadTexts: atmIfVccIndex.setStatus('mandatory')
atmIfVccStateTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 5, 100), )
if mibBuilder.loadTexts: atmIfVccStateTable.setStatus('mandatory')
atmIfVccStateEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 5, 100, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-AtmCoreMIB", "atmIfIndex"), (0, "Nortel-Magellan-Passport-AtmCoreMIB", "atmIfVccIndex"))
if mibBuilder.loadTexts: atmIfVccStateEntry.setStatus('mandatory')
atmIfVccAdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 5, 100, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("locked", 0), ("unlocked", 1), ("shuttingDown", 2))).clone('unlocked')).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmIfVccAdminState.setStatus('mandatory')
atmIfVccOperationalState = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 5, 100, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1))).clone('disabled')).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmIfVccOperationalState.setStatus('mandatory')
atmIfVccUsageState = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 5, 100, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("idle", 0), ("active", 1), ("busy", 2))).clone('idle')).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmIfVccUsageState.setStatus('mandatory')
atmIfVccOperTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 5, 110), )
if mibBuilder.loadTexts: atmIfVccOperTable.setStatus('mandatory')
atmIfVccOperEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 5, 110, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-AtmCoreMIB", "atmIfIndex"), (0, "Nortel-Magellan-Passport-AtmCoreMIB", "atmIfVccIndex"))
if mibBuilder.loadTexts: atmIfVccOperEntry.setStatus('mandatory')
atmIfVccConnectionPointType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 5, 110, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("connectionEndPoint", 0), ("segmentEndPoint", 1), ("connectingPoint", 2), ("unknown", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmIfVccConnectionPointType.setStatus('mandatory')
atmIfVccConnInfoTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 5, 115), )
if mibBuilder.loadTexts: atmIfVccConnInfoTable.setStatus('mandatory')
atmIfVccConnInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 5, 115, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-AtmCoreMIB", "atmIfIndex"), (0, "Nortel-Magellan-Passport-AtmCoreMIB", "atmIfVccIndex"))
if mibBuilder.loadTexts: atmIfVccConnInfoEntry.setStatus('mandatory')
atmIfVccDistributionType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 5, 115, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("pointToPoint", 0), ("pointToMultipoint", 1))).clone('pointToPoint')).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmIfVccDistributionType.setStatus('mandatory')
atmIfVccNumLeaves = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 5, 115, 1, 12), Gauge32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmIfVccNumLeaves.setStatus('mandatory')
atmIfVccCallDirection = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 5, 115, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("fromLink", 0), ("toLink", 1), ("notApplicable", 2))).clone('notApplicable')).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmIfVccCallDirection.setStatus('mandatory')
atmIfVccStatusTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 5, 120), )
if mibBuilder.loadTexts: atmIfVccStatusTable.setStatus('mandatory')
atmIfVccStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 5, 120, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-AtmCoreMIB", "atmIfIndex"), (0, "Nortel-Magellan-Passport-AtmCoreMIB", "atmIfVccIndex"))
if mibBuilder.loadTexts: atmIfVccStatusEntry.setStatus('mandatory')
atmIfVccOperStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 5, 120, 1, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4))).clone(namedValues=NamedValues(("unknown", 0), ("end2endUp", 1), ("end2endDown", 2), ("localUpEnd2endUnknown", 3), ("localDown", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmIfVccOperStatus.setStatus('mandatory')
atmIfVccLocalFailureCause = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 5, 120, 1, 25), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("noFailure", 0), ("localBwLoss", 1), ("portDown", 2), ("notAdmitted", 3), ("appNotRegistered", 4), ("disabledByApp", 5), ("bwReduced", 6), ("vpDown", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmIfVccLocalFailureCause.setStatus('mandatory')
atmIfVccTroubled = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 5, 120, 1, 28), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("no", 0), ("yes", 1))).clone('no')).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmIfVccTroubled.setStatus('mandatory')
atmIfVccSegLinkSideLoopbackState = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 5, 120, 1, 30), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("good", 0), ("bad", 1), ("unknown", 2), ("notApplicable", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmIfVccSegLinkSideLoopbackState.setStatus('mandatory')
atmIfVccSegSwitchSideLoopbackState = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 5, 120, 1, 40), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("good", 0), ("bad", 1), ("unknown", 2), ("notApplicable", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmIfVccSegSwitchSideLoopbackState.setStatus('mandatory')
atmIfVccEndToEndLoopbackState = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 5, 120, 1, 50), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("good", 0), ("bad", 1), ("unknown", 2), ("notApplicable", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmIfVccEndToEndLoopbackState.setStatus('mandatory')
atmIfVccRxOamCellCongestionState = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 5, 120, 1, 55), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("good", 0), ("bad", 1), ("unknown", 2), ("notApplicable", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmIfVccRxOamCellCongestionState.setStatus('mandatory')
atmIfVccAisState = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 5, 120, 1, 60), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("good", 0), ("bad", 1), ("unknown", 2), ("notApplicable", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmIfVccAisState.setStatus('mandatory')
atmIfVccRdiState = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 5, 120, 1, 70), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("good", 0), ("bad", 1), ("unknown", 2), ("notApplicable", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmIfVccRdiState.setStatus('mandatory')
atmIfVccTrafficTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 5, 130), )
if mibBuilder.loadTexts: atmIfVccTrafficTable.setStatus('mandatory')
atmIfVccTrafficEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 5, 130, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-AtmCoreMIB", "atmIfIndex"), (0, "Nortel-Magellan-Passport-AtmCoreMIB", "atmIfVccIndex"))
if mibBuilder.loadTexts: atmIfVccTrafficEntry.setStatus('mandatory')
atmIfVccTxTrafficDescType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 5, 130, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("n1", 1), ("n2", 2), ("n3", 3), ("n4", 4), ("n5", 5), ("n6", 6), ("n7", 7), ("n8", 8)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmIfVccTxTrafficDescType.setStatus('obsolete')
atmIfVccTxQosClass = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 5, 130, 1, 30), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4))).clone(namedValues=NamedValues(("unspecified", 0), ("constantBitRate", 1), ("variableBitRate", 2), ("connectionOriented", 3), ("connectionless", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmIfVccTxQosClass.setStatus('obsolete')
atmIfVccFwdQosClass = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 5, 130, 1, 31), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 14))).clone(namedValues=NamedValues(("n0", 0), ("n1", 1), ("n2", 2), ("n3", 3), ("n4", 4), ("notApplicable", 14)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmIfVccFwdQosClass.setStatus('obsolete')
atmIfVccTxQueueLength = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 5, 130, 1, 32), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 30720))).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmIfVccTxQueueLength.setStatus('obsolete')
atmIfVccTxQueueCongestionState = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 5, 130, 1, 33), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 3))).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmIfVccTxQueueCongestionState.setStatus('obsolete')
atmIfVccHoldingPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 5, 130, 1, 35), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 6))).clone(namedValues=NamedValues(("n0", 0), ("n1", 1), ("n2", 2), ("n3", 3), ("n4", 4), ("notApplicable", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmIfVccHoldingPriority.setStatus('obsolete')
atmIfVccRxTrafficDescType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 5, 130, 1, 40), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("n1", 1), ("n2", 2), ("n3", 3), ("n4", 4), ("n5", 5), ("n6", 6), ("n7", 7), ("n8", 8)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmIfVccRxTrafficDescType.setStatus('obsolete')
atmIfVccRxQosClass = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 5, 130, 1, 60), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4))).clone(namedValues=NamedValues(("unspecified", 0), ("constantBitRate", 1), ("variableBitRate", 2), ("connectionOriented", 3), ("connectionless", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmIfVccRxQosClass.setStatus('obsolete')
atmIfVccBwdQosClass = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 5, 130, 1, 61), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 14))).clone(namedValues=NamedValues(("n0", 0), ("n1", 1), ("n2", 2), ("n3", 3), ("n4", 4), ("notApplicable", 14)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmIfVccBwdQosClass.setStatus('obsolete')
atmIfVccAtmServiceCategory = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 5, 130, 1, 62), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("unspecifiedBitRate", 0), ("constantBitRate", 1), ("rtVariableBitRate", 2), ("nrtVariableBitRate", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmIfVccAtmServiceCategory.setStatus('obsolete')
atmIfVccTrafficShaping = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 5, 130, 1, 70), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 4))).clone(namedValues=NamedValues(("enabled", 0), ("disabled", 1), ("notApplicable", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmIfVccTrafficShaping.setStatus('obsolete')
atmIfVccBearerClassBbc = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 5, 130, 1, 71), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 3, 16, 24, 30))).clone(namedValues=NamedValues(("a", 1), ("c", 3), ("x", 16), ("vp", 24), ("notApplicable", 30)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmIfVccBearerClassBbc.setStatus('obsolete')
atmIfVccTransferCapabilityBbc = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 5, 130, 1, 72), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 5, 8, 9, 10, 30))).clone(namedValues=NamedValues(("n0", 0), ("n1", 1), ("n2", 2), ("n5", 5), ("n8", 8), ("n9", 9), ("n10", 10), ("notApplicable", 30)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmIfVccTransferCapabilityBbc.setStatus('obsolete')
atmIfVccClippingBbc = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 5, 130, 1, 74), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 14))).clone(namedValues=NamedValues(("no", 0), ("yes", 1), ("notApplicable", 14)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmIfVccClippingBbc.setStatus('obsolete')
atmIfVccUnshapedTransmitQueueing = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 5, 130, 1, 75), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 4))).clone(namedValues=NamedValues(("perVc", 0), ("common", 1), ("notApplicable", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmIfVccUnshapedTransmitQueueing.setStatus('obsolete')
atmIfVccBestEffort = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 5, 130, 1, 76), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 14))).clone(namedValues=NamedValues(("indicated", 0), ("notIndicated", 1), ("notApplicable", 14)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmIfVccBestEffort.setStatus('obsolete')
atmIfVccUsageParameterControl = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 5, 130, 1, 80), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 3))).clone(namedValues=NamedValues(("enabled", 0), ("disabled", 1), ("notApplicable", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmIfVccUsageParameterControl.setStatus('obsolete')
atmIfVccTxFrameDiscard = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 5, 130, 1, 85), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 1)).setFixedLength(1)).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmIfVccTxFrameDiscard.setStatus('obsolete')
atmIfVccRxFrameDiscard = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 5, 130, 1, 86), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 1)).setFixedLength(1)).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmIfVccRxFrameDiscard.setStatus('obsolete')
atmIfVccBandwidthElastic = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 5, 130, 1, 90), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("no", 0), ("yes", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmIfVccBandwidthElastic.setStatus('obsolete')
atmIfVccBandwidthReduction = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 5, 130, 1, 100), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmIfVccBandwidthReduction.setStatus('obsolete')
atmIfVccStatsTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 5, 140), )
if mibBuilder.loadTexts: atmIfVccStatsTable.setStatus('mandatory')
atmIfVccStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 5, 140, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-AtmCoreMIB", "atmIfIndex"), (0, "Nortel-Magellan-Passport-AtmCoreMIB", "atmIfVccIndex"))
if mibBuilder.loadTexts: atmIfVccStatsEntry.setStatus('mandatory')
atmIfVccStatsTxCell = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 5, 140, 1, 10), PassportCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmIfVccStatsTxCell.setStatus('mandatory')
atmIfVccStatsTxCellClp = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 5, 140, 1, 20), PassportCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmIfVccStatsTxCellClp.setStatus('mandatory')
atmIfVccTxDiscard = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 5, 140, 1, 30), PassportCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmIfVccTxDiscard.setStatus('obsolete')
atmIfVccTxDiscardClp = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 5, 140, 1, 40), PassportCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmIfVccTxDiscardClp.setStatus('obsolete')
atmIfVccStatsTxCellDiscard = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 5, 140, 1, 42), PassportCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmIfVccStatsTxCellDiscard.setStatus('mandatory')
atmIfVccStatsTxCellDiscardClp = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 5, 140, 1, 43), PassportCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmIfVccStatsTxCellDiscardClp.setStatus('mandatory')
atmIfVccStatsTxFrameDiscard = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 5, 140, 1, 46), PassportCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmIfVccStatsTxFrameDiscard.setStatus('mandatory')
atmIfVccStatsTxFrameDiscardClp = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 5, 140, 1, 47), PassportCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmIfVccStatsTxFrameDiscardClp.setStatus('mandatory')
atmIfVccTxUtilization = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 5, 140, 1, 48), Gauge32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 200), ValueRangeConstraint(255, 255), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmIfVccTxUtilization.setStatus('mandatory')
atmIfVccStatsRxCell = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 5, 140, 1, 50), PassportCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmIfVccStatsRxCell.setStatus('mandatory')
atmIfVccStatsRxCellClp = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 5, 140, 1, 60), PassportCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmIfVccStatsRxCellClp.setStatus('mandatory')
atmIfVccRxDiscard = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 5, 140, 1, 70), PassportCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmIfVccRxDiscard.setStatus('obsolete')
atmIfVccRxDiscardClp = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 5, 140, 1, 80), PassportCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmIfVccRxDiscardClp.setStatus('obsolete')
atmIfVccStatsRxCellDiscard = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 5, 140, 1, 82), PassportCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmIfVccStatsRxCellDiscard.setStatus('mandatory')
atmIfVccStatsRxCellDiscardClp = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 5, 140, 1, 83), PassportCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmIfVccStatsRxCellDiscardClp.setStatus('mandatory')
atmIfVccStatsRxFrameDiscard = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 5, 140, 1, 86), PassportCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmIfVccStatsRxFrameDiscard.setStatus('mandatory')
atmIfVccStatsRxFrameDiscardClp = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 5, 140, 1, 88), PassportCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmIfVccStatsRxFrameDiscardClp.setStatus('mandatory')
atmIfVccRxUtilization = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 5, 140, 1, 89), Gauge32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 200), ValueRangeConstraint(255, 255), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmIfVccRxUtilization.setStatus('mandatory')
atmIfVccStatsRxUpcViolationOnEnforcer1 = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 5, 140, 1, 90), PassportCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmIfVccStatsRxUpcViolationOnEnforcer1.setStatus('mandatory')
atmIfVccStatsRxUpcViolationOnEnforcer2 = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 5, 140, 1, 92), PassportCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmIfVccStatsRxUpcViolationOnEnforcer2.setStatus('mandatory')
atmIfVccStatsRxAal5FrameError = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 5, 140, 1, 100), PassportCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmIfVccStatsRxAal5FrameError.setStatus('mandatory')
atmIfVccStatsRxAal5FrameAbort = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 5, 140, 1, 102), PassportCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmIfVccStatsRxAal5FrameAbort.setStatus('mandatory')
atmIfVccTxTdpTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 5, 294), )
if mibBuilder.loadTexts: atmIfVccTxTdpTable.setStatus('obsolete')
atmIfVccTxTdpEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 5, 294, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-AtmCoreMIB", "atmIfIndex"), (0, "Nortel-Magellan-Passport-AtmCoreMIB", "atmIfVccIndex"), (0, "Nortel-Magellan-Passport-AtmCoreMIB", "atmIfVccTxTdpIndex"))
if mibBuilder.loadTexts: atmIfVccTxTdpEntry.setStatus('obsolete')
atmIfVccTxTdpIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 5, 294, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 5)))
if mibBuilder.loadTexts: atmIfVccTxTdpIndex.setStatus('obsolete')
atmIfVccTxTdpValue = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 5, 294, 1, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmIfVccTxTdpValue.setStatus('obsolete')
atmIfVccRxTdpTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 5, 295), )
if mibBuilder.loadTexts: atmIfVccRxTdpTable.setStatus('obsolete')
atmIfVccRxTdpEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 5, 295, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-AtmCoreMIB", "atmIfIndex"), (0, "Nortel-Magellan-Passport-AtmCoreMIB", "atmIfVccIndex"), (0, "Nortel-Magellan-Passport-AtmCoreMIB", "atmIfVccRxTdpIndex"))
if mibBuilder.loadTexts: atmIfVccRxTdpEntry.setStatus('obsolete')
atmIfVccRxTdpIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 5, 295, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4)))
if mibBuilder.loadTexts: atmIfVccRxTdpIndex.setStatus('obsolete')
atmIfVccRxTdpValue = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 5, 295, 1, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmIfVccRxTdpValue.setStatus('obsolete')
atmIfVccTxQThreshTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 5, 352), )
if mibBuilder.loadTexts: atmIfVccTxQThreshTable.setStatus('obsolete')
atmIfVccTxQThreshEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 5, 352, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-AtmCoreMIB", "atmIfIndex"), (0, "Nortel-Magellan-Passport-AtmCoreMIB", "atmIfVccIndex"), (0, "Nortel-Magellan-Passport-AtmCoreMIB", "atmIfVccTxQThreshIndex"))
if mibBuilder.loadTexts: atmIfVccTxQThreshEntry.setStatus('obsolete')
atmIfVccTxQThreshIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 5, 352, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 3)))
if mibBuilder.loadTexts: atmIfVccTxQThreshIndex.setStatus('obsolete')
atmIfVccTxQThreshValue = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 5, 352, 1, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 30720))).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmIfVccTxQThreshValue.setStatus('obsolete')
atmIfVccFqpTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 5, 357), )
if mibBuilder.loadTexts: atmIfVccFqpTable.setStatus('obsolete')
atmIfVccFqpEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 5, 357, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-AtmCoreMIB", "atmIfIndex"), (0, "Nortel-Magellan-Passport-AtmCoreMIB", "atmIfVccIndex"), (0, "Nortel-Magellan-Passport-AtmCoreMIB", "atmIfVccFqpIndex"))
if mibBuilder.loadTexts: atmIfVccFqpEntry.setStatus('obsolete')
atmIfVccFqpIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 5, 357, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("cdv", 0), ("ctd", 1), ("clr", 2))))
if mibBuilder.loadTexts: atmIfVccFqpIndex.setStatus('obsolete')
atmIfVccFqpValue = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 5, 357, 1, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmIfVccFqpValue.setStatus('obsolete')
atmIfVccBqpTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 5, 358), )
if mibBuilder.loadTexts: atmIfVccBqpTable.setStatus('obsolete')
atmIfVccBqpEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 5, 358, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-AtmCoreMIB", "atmIfIndex"), (0, "Nortel-Magellan-Passport-AtmCoreMIB", "atmIfVccIndex"), (0, "Nortel-Magellan-Passport-AtmCoreMIB", "atmIfVccBqpIndex"))
if mibBuilder.loadTexts: atmIfVccBqpEntry.setStatus('obsolete')
atmIfVccBqpIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 5, 358, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("cdv", 0), ("ctd", 1), ("clr", 2))))
if mibBuilder.loadTexts: atmIfVccBqpIndex.setStatus('obsolete')
atmIfVccBqpValue = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 5, 358, 1, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmIfVccBqpValue.setStatus('obsolete')
atmIfVccVcd = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 5, 2))
atmIfVccVcdRowStatusTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 5, 2, 1), )
if mibBuilder.loadTexts: atmIfVccVcdRowStatusTable.setStatus('mandatory')
atmIfVccVcdRowStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 5, 2, 1, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-AtmCoreMIB", "atmIfIndex"), (0, "Nortel-Magellan-Passport-AtmCoreMIB", "atmIfVccIndex"), (0, "Nortel-Magellan-Passport-AtmCoreMIB", "atmIfVccVcdIndex"))
if mibBuilder.loadTexts: atmIfVccVcdRowStatusEntry.setStatus('mandatory')
atmIfVccVcdRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 5, 2, 1, 1, 1), RowStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmIfVccVcdRowStatus.setStatus('mandatory')
atmIfVccVcdComponentName = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 5, 2, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmIfVccVcdComponentName.setStatus('mandatory')
atmIfVccVcdStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 5, 2, 1, 1, 4), StorageType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmIfVccVcdStorageType.setStatus('mandatory')
atmIfVccVcdIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 5, 2, 1, 1, 10), NonReplicated())
if mibBuilder.loadTexts: atmIfVccVcdIndex.setStatus('mandatory')
atmIfVccVcdLbkTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 5, 2, 100), )
if mibBuilder.loadTexts: atmIfVccVcdLbkTable.setStatus('mandatory')
atmIfVccVcdLbkEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 5, 2, 100, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-AtmCoreMIB", "atmIfIndex"), (0, "Nortel-Magellan-Passport-AtmCoreMIB", "atmIfVccIndex"), (0, "Nortel-Magellan-Passport-AtmCoreMIB", "atmIfVccVcdIndex"))
if mibBuilder.loadTexts: atmIfVccVcdLbkEntry.setStatus('mandatory')
atmIfVccVcdSegLinkSideLoopback = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 5, 2, 100, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("on", 0), ("off", 1), ("sameAsInterface", 2))).clone('sameAsInterface')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmIfVccVcdSegLinkSideLoopback.setStatus('mandatory')
atmIfVccVcdSegSwitchSideLoopback = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 5, 2, 100, 1, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("on", 0), ("off", 1), ("sameAsInterface", 2))).clone('sameAsInterface')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmIfVccVcdSegSwitchSideLoopback.setStatus('mandatory')
atmIfVccVcdEndToEndLoopback = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 5, 2, 100, 1, 30), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("on", 0), ("off", 1), ("sameAsInterface", 2))).clone('sameAsInterface')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmIfVccVcdEndToEndLoopback.setStatus('mandatory')
atmIfVccVcdLoopbackMonitoring = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 5, 2, 100, 1, 1000), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("on", 0), ("off", 1), ("sameAsInterface", 2))).clone('sameAsInterface')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmIfVccVcdLoopbackMonitoring.setStatus('mandatory')
atmIfVccVcdTrafficTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 5, 2, 110), )
if mibBuilder.loadTexts: atmIfVccVcdTrafficTable.setStatus('mandatory')
atmIfVccVcdTrafficEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 5, 2, 110, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-AtmCoreMIB", "atmIfIndex"), (0, "Nortel-Magellan-Passport-AtmCoreMIB", "atmIfVccIndex"), (0, "Nortel-Magellan-Passport-AtmCoreMIB", "atmIfVccVcdIndex"))
if mibBuilder.loadTexts: atmIfVccVcdTrafficEntry.setStatus('mandatory')
atmIfVccVcdTxTrafficDescType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 5, 2, 110, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9))).clone(namedValues=NamedValues(("n1", 1), ("n2", 2), ("n3", 3), ("n4", 4), ("n5", 5), ("n6", 6), ("n7", 7), ("n8", 8), ("n9", 9))).clone('n1')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmIfVccVcdTxTrafficDescType.setStatus('obsolete')
atmIfVccVcdTxQosClass = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 5, 2, 110, 1, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4))).clone(namedValues=NamedValues(("unspecified", 0), ("constantBitRate", 1), ("variableBitRate", 2), ("connectionOriented", 3), ("connectionless", 4))).clone('connectionOriented')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmIfVccVcdTxQosClass.setStatus('obsolete')
atmIfVccVcdFwdQosClass = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 5, 2, 110, 1, 21), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4))).clone(namedValues=NamedValues(("n0", 0), ("n1", 1), ("n2", 2), ("n3", 3), ("n4", 4))).clone('n0')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmIfVccVcdFwdQosClass.setStatus('obsolete')
atmIfVccVcdHoldingPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 5, 2, 110, 1, 25), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4))).clone(namedValues=NamedValues(("n0", 0), ("n1", 1), ("n2", 2), ("n3", 3), ("n4", 4))).clone('n2')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmIfVccVcdHoldingPriority.setStatus('obsolete')
atmIfVccVcdRxTrafficDescType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 5, 2, 110, 1, 30), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 15))).clone(namedValues=NamedValues(("n1", 1), ("n2", 2), ("n3", 3), ("n4", 4), ("n5", 5), ("n6", 6), ("n7", 7), ("n8", 8), ("sameAsTx", 15))).clone('sameAsTx')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmIfVccVcdRxTrafficDescType.setStatus('obsolete')
atmIfVccVcdRxQosClass = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 5, 2, 110, 1, 40), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 15))).clone(namedValues=NamedValues(("unspecified", 0), ("constantBitRate", 1), ("variableBitRate", 2), ("connectionOriented", 3), ("connectionless", 4), ("sameAsTx", 15))).clone('sameAsTx')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmIfVccVcdRxQosClass.setStatus('obsolete')
atmIfVccVcdBwdQosClass = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 5, 2, 110, 1, 41), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 15))).clone(namedValues=NamedValues(("n0", 0), ("n1", 1), ("n2", 2), ("n3", 3), ("n4", 4), ("sameAsFwd", 15))).clone('sameAsFwd')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmIfVccVcdBwdQosClass.setStatus('obsolete')
atmIfVccVcdAtmServiceCategory = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 5, 2, 110, 1, 42), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 15))).clone(namedValues=NamedValues(("unspecifiedBitRate", 0), ("constantBitRate", 1), ("rtVariableBitRate", 2), ("nrtVariableBitRate", 3), ("derivedFromBBC", 15))).clone('unspecifiedBitRate')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmIfVccVcdAtmServiceCategory.setStatus('obsolete')
atmIfVccVcdTrafficShaping = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 5, 2, 110, 1, 50), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("sameAsInterface", 2))).clone('sameAsInterface')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmIfVccVcdTrafficShaping.setStatus('obsolete')
atmIfVccVcdUnshapedTransmitQueueing = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 5, 2, 110, 1, 60), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 3))).clone(namedValues=NamedValues(("common", 1), ("sameAsInterface", 3))).clone('sameAsInterface')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmIfVccVcdUnshapedTransmitQueueing.setStatus('obsolete')
atmIfVccVcdUsageParameterControl = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 5, 2, 110, 1, 70), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("sameAsInterface", 2))).clone('sameAsInterface')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmIfVccVcdUsageParameterControl.setStatus('obsolete')
atmIfVccVcdBearerClassBbc = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 5, 2, 110, 1, 71), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 3, 16, 24, 31))).clone(namedValues=NamedValues(("a", 1), ("c", 3), ("x", 16), ("vp", 24), ("derivedFromServiceCategory", 31))).clone('derivedFromServiceCategory')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmIfVccVcdBearerClassBbc.setStatus('obsolete')
atmIfVccVcdTransferCapabilityBbc = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 5, 2, 110, 1, 72), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 5, 8, 9, 10, 30, 31))).clone(namedValues=NamedValues(("n0", 0), ("n1", 1), ("n2", 2), ("n5", 5), ("n8", 8), ("n9", 9), ("n10", 10), ("notApplicable", 30), ("derivedFromServiceCategory", 31))).clone('derivedFromServiceCategory')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmIfVccVcdTransferCapabilityBbc.setStatus('obsolete')
atmIfVccVcdClippingBbc = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 5, 2, 110, 1, 74), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("no", 0), ("yes", 1))).clone('no')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmIfVccVcdClippingBbc.setStatus('obsolete')
atmIfVccVcdBestEffort = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 5, 2, 110, 1, 75), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 15))).clone(namedValues=NamedValues(("indicated", 0), ("notIndicated", 1), ("derivedFromServiceCategory", 15))).clone('derivedFromServiceCategory')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmIfVccVcdBestEffort.setStatus('obsolete')
atmIfVccVcdFwdFrameDiscard = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 5, 2, 110, 1, 76), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("notIndicated", 0), ("indicated", 1))).clone('notIndicated')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmIfVccVcdFwdFrameDiscard.setStatus('obsolete')
atmIfVccVcdBwdFrameDiscard = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 5, 2, 110, 1, 77), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("notIndicated", 0), ("indicated", 1))).clone('notIndicated')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmIfVccVcdBwdFrameDiscard.setStatus('obsolete')
atmIfVccVcdAcctTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 5, 2, 111), )
if mibBuilder.loadTexts: atmIfVccVcdAcctTable.setStatus('mandatory')
atmIfVccVcdAcctEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 5, 2, 111, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-AtmCoreMIB", "atmIfIndex"), (0, "Nortel-Magellan-Passport-AtmCoreMIB", "atmIfVccIndex"), (0, "Nortel-Magellan-Passport-AtmCoreMIB", "atmIfVccVcdIndex"))
if mibBuilder.loadTexts: atmIfVccVcdAcctEntry.setStatus('mandatory')
atmIfVccVcdCorrelationTag = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 5, 2, 111, 1, 10), AsciiString().subtype(subtypeSpec=ValueSizeConstraint(0, 32)).clone(hexValue="")).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmIfVccVcdCorrelationTag.setStatus('mandatory')
atmIfVccVcdTxTdpTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 5, 2, 297), )
if mibBuilder.loadTexts: atmIfVccVcdTxTdpTable.setStatus('obsolete')
atmIfVccVcdTxTdpEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 5, 2, 297, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-AtmCoreMIB", "atmIfIndex"), (0, "Nortel-Magellan-Passport-AtmCoreMIB", "atmIfVccIndex"), (0, "Nortel-Magellan-Passport-AtmCoreMIB", "atmIfVccVcdIndex"), (0, "Nortel-Magellan-Passport-AtmCoreMIB", "atmIfVccVcdTxTdpIndex"))
if mibBuilder.loadTexts: atmIfVccVcdTxTdpEntry.setStatus('obsolete')
atmIfVccVcdTxTdpIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 5, 2, 297, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 5)))
if mibBuilder.loadTexts: atmIfVccVcdTxTdpIndex.setStatus('obsolete')
atmIfVccVcdTxTdpValue = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 5, 2, 297, 1, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmIfVccVcdTxTdpValue.setStatus('obsolete')
atmIfVccVcdRxTdpTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 5, 2, 298), )
if mibBuilder.loadTexts: atmIfVccVcdRxTdpTable.setStatus('obsolete')
atmIfVccVcdRxTdpEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 5, 2, 298, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-AtmCoreMIB", "atmIfIndex"), (0, "Nortel-Magellan-Passport-AtmCoreMIB", "atmIfVccIndex"), (0, "Nortel-Magellan-Passport-AtmCoreMIB", "atmIfVccVcdIndex"), (0, "Nortel-Magellan-Passport-AtmCoreMIB", "atmIfVccVcdRxTdpIndex"))
if mibBuilder.loadTexts: atmIfVccVcdRxTdpEntry.setStatus('obsolete')
atmIfVccVcdRxTdpIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 5, 2, 298, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 5)))
if mibBuilder.loadTexts: atmIfVccVcdRxTdpIndex.setStatus('obsolete')
atmIfVccVcdRxTdpValue = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 5, 2, 298, 1, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmIfVccVcdRxTdpValue.setStatus('obsolete')
atmIfVccVcdFqpTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 5, 2, 359), )
if mibBuilder.loadTexts: atmIfVccVcdFqpTable.setStatus('obsolete')
atmIfVccVcdFqpEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 5, 2, 359, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-AtmCoreMIB", "atmIfIndex"), (0, "Nortel-Magellan-Passport-AtmCoreMIB", "atmIfVccIndex"), (0, "Nortel-Magellan-Passport-AtmCoreMIB", "atmIfVccVcdIndex"), (0, "Nortel-Magellan-Passport-AtmCoreMIB", "atmIfVccVcdFqpIndex"))
if mibBuilder.loadTexts: atmIfVccVcdFqpEntry.setStatus('obsolete')
atmIfVccVcdFqpIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 5, 2, 359, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("cdv", 0), ("ctd", 1), ("clr", 2))))
if mibBuilder.loadTexts: atmIfVccVcdFqpIndex.setStatus('obsolete')
atmIfVccVcdFqpValue = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 5, 2, 359, 1, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmIfVccVcdFqpValue.setStatus('obsolete')
atmIfVccVcdBqpTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 5, 2, 360), )
if mibBuilder.loadTexts: atmIfVccVcdBqpTable.setStatus('obsolete')
atmIfVccVcdBqpEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 5, 2, 360, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-AtmCoreMIB", "atmIfIndex"), (0, "Nortel-Magellan-Passport-AtmCoreMIB", "atmIfVccIndex"), (0, "Nortel-Magellan-Passport-AtmCoreMIB", "atmIfVccVcdIndex"), (0, "Nortel-Magellan-Passport-AtmCoreMIB", "atmIfVccVcdBqpIndex"))
if mibBuilder.loadTexts: atmIfVccVcdBqpEntry.setStatus('obsolete')
atmIfVccVcdBqpIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 5, 2, 360, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("cdv", 0), ("ctd", 1), ("clr", 2))))
if mibBuilder.loadTexts: atmIfVccVcdBqpIndex.setStatus('obsolete')
atmIfVccVcdBqpValue = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 5, 2, 360, 1, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmIfVccVcdBqpValue.setStatus('obsolete')
atmIfVccVcdTm = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 5, 2, 2))
atmIfVccVcdTmRowStatusTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 5, 2, 2, 1), )
if mibBuilder.loadTexts: atmIfVccVcdTmRowStatusTable.setStatus('mandatory')
atmIfVccVcdTmRowStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 5, 2, 2, 1, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-AtmCoreMIB", "atmIfIndex"), (0, "Nortel-Magellan-Passport-AtmCoreMIB", "atmIfVccIndex"), (0, "Nortel-Magellan-Passport-AtmCoreMIB", "atmIfVccVcdIndex"), (0, "Nortel-Magellan-Passport-AtmCoreMIB", "atmIfVccVcdTmIndex"))
if mibBuilder.loadTexts: atmIfVccVcdTmRowStatusEntry.setStatus('mandatory')
atmIfVccVcdTmRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 5, 2, 2, 1, 1, 1), RowStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmIfVccVcdTmRowStatus.setStatus('mandatory')
atmIfVccVcdTmComponentName = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 5, 2, 2, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmIfVccVcdTmComponentName.setStatus('mandatory')
atmIfVccVcdTmStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 5, 2, 2, 1, 1, 4), StorageType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmIfVccVcdTmStorageType.setStatus('mandatory')
atmIfVccVcdTmIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 5, 2, 2, 1, 1, 10), NonReplicated())
if mibBuilder.loadTexts: atmIfVccVcdTmIndex.setStatus('mandatory')
atmIfVccVcdTmProvTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 5, 2, 2, 100), )
if mibBuilder.loadTexts: atmIfVccVcdTmProvTable.setStatus('mandatory')
atmIfVccVcdTmProvEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 5, 2, 2, 100, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-AtmCoreMIB", "atmIfIndex"), (0, "Nortel-Magellan-Passport-AtmCoreMIB", "atmIfVccIndex"), (0, "Nortel-Magellan-Passport-AtmCoreMIB", "atmIfVccVcdIndex"), (0, "Nortel-Magellan-Passport-AtmCoreMIB", "atmIfVccVcdTmIndex"))
if mibBuilder.loadTexts: atmIfVccVcdTmProvEntry.setStatus('mandatory')
atmIfVccVcdTmTxTrafficDescType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 5, 2, 2, 100, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9))).clone(namedValues=NamedValues(("n1", 1), ("n2", 2), ("n3", 3), ("n4", 4), ("n5", 5), ("n6", 6), ("n7", 7), ("n8", 8), ("n9", 9))).clone('n1')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmIfVccVcdTmTxTrafficDescType.setStatus('mandatory')
atmIfVccVcdTmFwdQosClass = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 5, 2, 2, 100, 1, 21), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4))).clone(namedValues=NamedValues(("n0", 0), ("n1", 1), ("n2", 2), ("n3", 3), ("n4", 4))).clone('n0')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmIfVccVcdTmFwdQosClass.setStatus('mandatory')
atmIfVccVcdTmTxQueueLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 5, 2, 2, 100, 1, 22), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(5, 63488), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmIfVccVcdTmTxQueueLimit.setStatus('mandatory')
atmIfVccVcdTmHoldingPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 5, 2, 2, 100, 1, 25), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4))).clone(namedValues=NamedValues(("n0", 0), ("n1", 1), ("n2", 2), ("n3", 3), ("n4", 4))).clone('n2')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmIfVccVcdTmHoldingPriority.setStatus('mandatory')
atmIfVccVcdTmRxTrafficDescType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 5, 2, 2, 100, 1, 30), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 15))).clone(namedValues=NamedValues(("n1", 1), ("n2", 2), ("n3", 3), ("n4", 4), ("n5", 5), ("n6", 6), ("n7", 7), ("n8", 8), ("n9", 9), ("sameAsTx", 15))).clone('sameAsTx')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmIfVccVcdTmRxTrafficDescType.setStatus('mandatory')
atmIfVccVcdTmBwdQosClass = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 5, 2, 2, 100, 1, 41), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 15))).clone(namedValues=NamedValues(("n0", 0), ("n1", 1), ("n2", 2), ("n3", 3), ("n4", 4), ("sameAsFwd", 15))).clone('sameAsFwd')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmIfVccVcdTmBwdQosClass.setStatus('mandatory')
atmIfVccVcdTmAtmServiceCategory = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 5, 2, 2, 100, 1, 42), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 15))).clone(namedValues=NamedValues(("unspecifiedBitRate", 0), ("constantBitRate", 1), ("rtVariableBitRate", 2), ("nrtVariableBitRate", 3), ("availableBitRate", 4), ("derivedFromBBC", 15))).clone('unspecifiedBitRate')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmIfVccVcdTmAtmServiceCategory.setStatus('mandatory')
atmIfVccVcdTmTrafficShaping = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 5, 2, 2, 100, 1, 50), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("sameAsCa", 2))).clone('sameAsCa')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmIfVccVcdTmTrafficShaping.setStatus('mandatory')
atmIfVccVcdTmUnshapedTransmitQueueing = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 5, 2, 2, 100, 1, 60), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 3))).clone(namedValues=NamedValues(("common", 1), ("sameAsCa", 3))).clone('sameAsCa')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmIfVccVcdTmUnshapedTransmitQueueing.setStatus('mandatory')
atmIfVccVcdTmWeight = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 5, 2, 2, 100, 1, 61), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(1, 4095), ValueRangeConstraint(65535, 65535), )).clone(65535)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmIfVccVcdTmWeight.setStatus('mandatory')
atmIfVccVcdTmForceTagging = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 5, 2, 2, 100, 1, 62), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("enabled", 0), ("disabled", 1), ("sameAsCa", 2))).clone('sameAsCa')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmIfVccVcdTmForceTagging.setStatus('mandatory')
atmIfVccVcdTmUsageParameterControl = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 5, 2, 2, 100, 1, 70), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 4))).clone(namedValues=NamedValues(("enforced", 0), ("disabled", 1), ("sameAsCa", 2), ("monitored", 4))).clone('sameAsCa')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmIfVccVcdTmUsageParameterControl.setStatus('mandatory')
atmIfVccVcdTmBearerClassBbc = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 5, 2, 2, 100, 1, 71), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 3, 16, 24, 31))).clone(namedValues=NamedValues(("a", 1), ("c", 3), ("x", 16), ("vp", 24), ("derivedFromServiceCategory", 31))).clone('derivedFromServiceCategory')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmIfVccVcdTmBearerClassBbc.setStatus('mandatory')
atmIfVccVcdTmTransferCapabilityBbc = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 5, 2, 2, 100, 1, 72), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 5, 8, 9, 10, 30, 31))).clone(namedValues=NamedValues(("n0", 0), ("n1", 1), ("n2", 2), ("n5", 5), ("n8", 8), ("n9", 9), ("n10", 10), ("notApplicable", 30), ("derivedFromServiceCategory", 31))).clone('derivedFromServiceCategory')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmIfVccVcdTmTransferCapabilityBbc.setStatus('mandatory')
atmIfVccVcdTmTxWredThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 5, 2, 2, 100, 1, 73), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(25, 25), ValueRangeConstraint(50, 50), ValueRangeConstraint(75, 75), )).clone(25)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmIfVccVcdTmTxWredThreshold.setStatus('mandatory')
atmIfVccVcdTmClippingBbc = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 5, 2, 2, 100, 1, 74), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("no", 0), ("yes", 1))).clone('no')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmIfVccVcdTmClippingBbc.setStatus('mandatory')
atmIfVccVcdTmBestEffort = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 5, 2, 2, 100, 1, 75), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 15))).clone(namedValues=NamedValues(("indicated", 0), ("notIndicated", 1), ("derivedFromServiceCategory", 15))).clone('derivedFromServiceCategory')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmIfVccVcdTmBestEffort.setStatus('mandatory')
atmIfVccVcdTmTxPacketWiseDiscard = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 5, 2, 2, 100, 1, 76), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmIfVccVcdTmTxPacketWiseDiscard.setStatus('mandatory')
atmIfVccVcdTmTxWredMode = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 5, 2, 2, 100, 1, 77), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1), ("perFlow", 2))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmIfVccVcdTmTxWredMode.setStatus('mandatory')
atmIfVccVcdTmRxPacketWiseDiscard = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 5, 2, 2, 100, 1, 78), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmIfVccVcdTmRxPacketWiseDiscard.setStatus('mandatory')
atmIfVccVcdTmAbrConnectionType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 5, 2, 2, 100, 1, 90), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 3, 4, 5, 14))).clone(namedValues=NamedValues(("abrSwitch", 0), ("virtualSourceDest", 3), ("sourceDest", 4), ("nonAbrInterworking", 5), ("sameAsCa", 14))).clone('sameAsCa')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmIfVccVcdTmAbrConnectionType.setStatus('mandatory')
atmIfVccVcdTmTxTdpTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 5, 2, 2, 456), )
if mibBuilder.loadTexts: atmIfVccVcdTmTxTdpTable.setStatus('mandatory')
atmIfVccVcdTmTxTdpEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 5, 2, 2, 456, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-AtmCoreMIB", "atmIfIndex"), (0, "Nortel-Magellan-Passport-AtmCoreMIB", "atmIfVccIndex"), (0, "Nortel-Magellan-Passport-AtmCoreMIB", "atmIfVccVcdIndex"), (0, "Nortel-Magellan-Passport-AtmCoreMIB", "atmIfVccVcdTmIndex"), (0, "Nortel-Magellan-Passport-AtmCoreMIB", "atmIfVccVcdTmTxTdpIndex"))
if mibBuilder.loadTexts: atmIfVccVcdTmTxTdpEntry.setStatus('mandatory')
atmIfVccVcdTmTxTdpIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 5, 2, 2, 456, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 5)))
if mibBuilder.loadTexts: atmIfVccVcdTmTxTdpIndex.setStatus('mandatory')
atmIfVccVcdTmTxTdpValue = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 5, 2, 2, 456, 1, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmIfVccVcdTmTxTdpValue.setStatus('mandatory')
atmIfVccVcdTmRxTdpTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 5, 2, 2, 457), )
if mibBuilder.loadTexts: atmIfVccVcdTmRxTdpTable.setStatus('mandatory')
atmIfVccVcdTmRxTdpEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 5, 2, 2, 457, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-AtmCoreMIB", "atmIfIndex"), (0, "Nortel-Magellan-Passport-AtmCoreMIB", "atmIfVccIndex"), (0, "Nortel-Magellan-Passport-AtmCoreMIB", "atmIfVccVcdIndex"), (0, "Nortel-Magellan-Passport-AtmCoreMIB", "atmIfVccVcdTmIndex"), (0, "Nortel-Magellan-Passport-AtmCoreMIB", "atmIfVccVcdTmRxTdpIndex"))
if mibBuilder.loadTexts: atmIfVccVcdTmRxTdpEntry.setStatus('mandatory')
atmIfVccVcdTmRxTdpIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 5, 2, 2, 457, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 5)))
if mibBuilder.loadTexts: atmIfVccVcdTmRxTdpIndex.setStatus('mandatory')
atmIfVccVcdTmRxTdpValue = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 5, 2, 2, 457, 1, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmIfVccVcdTmRxTdpValue.setStatus('mandatory')
atmIfVccVcdTmFqpTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 5, 2, 2, 458), )
if mibBuilder.loadTexts: atmIfVccVcdTmFqpTable.setStatus('mandatory')
atmIfVccVcdTmFqpEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 5, 2, 2, 458, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-AtmCoreMIB", "atmIfIndex"), (0, "Nortel-Magellan-Passport-AtmCoreMIB", "atmIfVccIndex"), (0, "Nortel-Magellan-Passport-AtmCoreMIB", "atmIfVccVcdIndex"), (0, "Nortel-Magellan-Passport-AtmCoreMIB", "atmIfVccVcdTmIndex"), (0, "Nortel-Magellan-Passport-AtmCoreMIB", "atmIfVccVcdTmFqpIndex"))
if mibBuilder.loadTexts: atmIfVccVcdTmFqpEntry.setStatus('mandatory')
atmIfVccVcdTmFqpIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 5, 2, 2, 458, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("cdv", 0), ("ctd", 1), ("clr", 2))))
if mibBuilder.loadTexts: atmIfVccVcdTmFqpIndex.setStatus('mandatory')
atmIfVccVcdTmFqpValue = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 5, 2, 2, 458, 1, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 16777215))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmIfVccVcdTmFqpValue.setStatus('mandatory')
atmIfVccVcdTmBqpTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 5, 2, 2, 459), )
if mibBuilder.loadTexts: atmIfVccVcdTmBqpTable.setStatus('mandatory')
atmIfVccVcdTmBqpEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 5, 2, 2, 459, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-AtmCoreMIB", "atmIfIndex"), (0, "Nortel-Magellan-Passport-AtmCoreMIB", "atmIfVccIndex"), (0, "Nortel-Magellan-Passport-AtmCoreMIB", "atmIfVccVcdIndex"), (0, "Nortel-Magellan-Passport-AtmCoreMIB", "atmIfVccVcdTmIndex"), (0, "Nortel-Magellan-Passport-AtmCoreMIB", "atmIfVccVcdTmBqpIndex"))
if mibBuilder.loadTexts: atmIfVccVcdTmBqpEntry.setStatus('mandatory')
atmIfVccVcdTmBqpIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 5, 2, 2, 459, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 2))).clone(namedValues=NamedValues(("cdv", 0), ("clr", 2))))
if mibBuilder.loadTexts: atmIfVccVcdTmBqpIndex.setStatus('mandatory')
atmIfVccVcdTmBqpValue = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 5, 2, 2, 459, 1, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 16777215))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmIfVccVcdTmBqpValue.setStatus('mandatory')
atmIfVccVcdTmAbr = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 5, 2, 2, 2))
atmIfVccVcdTmAbrRowStatusTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 5, 2, 2, 2, 1), )
if mibBuilder.loadTexts: atmIfVccVcdTmAbrRowStatusTable.setStatus('mandatory')
atmIfVccVcdTmAbrRowStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 5, 2, 2, 2, 1, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-AtmCoreMIB", "atmIfIndex"), (0, "Nortel-Magellan-Passport-AtmCoreMIB", "atmIfVccIndex"), (0, "Nortel-Magellan-Passport-AtmCoreMIB", "atmIfVccVcdIndex"), (0, "Nortel-Magellan-Passport-AtmCoreMIB", "atmIfVccVcdTmIndex"), (0, "Nortel-Magellan-Passport-AtmCoreMIB", "atmIfVccVcdTmAbrIndex"))
if mibBuilder.loadTexts: atmIfVccVcdTmAbrRowStatusEntry.setStatus('mandatory')
atmIfVccVcdTmAbrRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 5, 2, 2, 2, 1, 1, 1), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmIfVccVcdTmAbrRowStatus.setStatus('mandatory')
atmIfVccVcdTmAbrComponentName = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 5, 2, 2, 2, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmIfVccVcdTmAbrComponentName.setStatus('mandatory')
atmIfVccVcdTmAbrStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 5, 2, 2, 2, 1, 1, 4), StorageType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmIfVccVcdTmAbrStorageType.setStatus('mandatory')
atmIfVccVcdTmAbrIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 5, 2, 2, 2, 1, 1, 10), NonReplicated())
if mibBuilder.loadTexts: atmIfVccVcdTmAbrIndex.setStatus('mandatory')
atmIfVccVcdTmAbrProvTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 5, 2, 2, 2, 110), )
if mibBuilder.loadTexts: atmIfVccVcdTmAbrProvTable.setStatus('mandatory')
atmIfVccVcdTmAbrProvEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 5, 2, 2, 2, 110, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-AtmCoreMIB", "atmIfIndex"), (0, "Nortel-Magellan-Passport-AtmCoreMIB", "atmIfVccIndex"), (0, "Nortel-Magellan-Passport-AtmCoreMIB", "atmIfVccVcdIndex"), (0, "Nortel-Magellan-Passport-AtmCoreMIB", "atmIfVccVcdTmIndex"), (0, "Nortel-Magellan-Passport-AtmCoreMIB", "atmIfVccVcdTmAbrIndex"))
if mibBuilder.loadTexts: atmIfVccVcdTmAbrProvEntry.setStatus('mandatory')
atmIfVccVcdTmAbrInitialCellRate = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 5, 2, 2, 2, 110, 1, 10), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 16777215), ValueRangeConstraint(16777216, 16777216), ValueRangeConstraint(16777217, 16777217), ValueRangeConstraint(16777218, 16777218), )).clone(16777216)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmIfVccVcdTmAbrInitialCellRate.setStatus('mandatory')
atmIfVccVcdTmAbrTransientBufferExposure = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 5, 2, 2, 2, 110, 1, 11), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 16777215)).clone(16777215)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmIfVccVcdTmAbrTransientBufferExposure.setStatus('mandatory')
atmIfVccVcdTmAbrFixedRoundTripTime = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 5, 2, 2, 2, 110, 1, 12), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 16700000)).clone(5000000)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmIfVccVcdTmAbrFixedRoundTripTime.setStatus('mandatory')
atmIfVccVcdTmAbrRateDecreaseFactor = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 5, 2, 2, 2, 110, 1, 13), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 15), ValueRangeConstraint(16777216, 16777216), )).clone(16777216)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmIfVccVcdTmAbrRateDecreaseFactor.setStatus('mandatory')
atmIfVccVcdTmAbrRateIncreaseFactor = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 5, 2, 2, 2, 110, 1, 14), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 15), ValueRangeConstraint(16777216, 16777216), )).clone(16777216)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmIfVccVcdTmAbrRateIncreaseFactor.setStatus('mandatory')
atmIfVccVcdTmAbrMaxCellPerRmCell = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 5, 2, 2, 2, 110, 1, 15), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(2, 2), ValueRangeConstraint(4, 4), ValueRangeConstraint(8, 8), ValueRangeConstraint(16, 16), ValueRangeConstraint(32, 32), ValueRangeConstraint(64, 64), ValueRangeConstraint(128, 128), ValueRangeConstraint(256, 256), ValueRangeConstraint(16777216, 16777216), )).clone(16777216)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmIfVccVcdTmAbrMaxCellPerRmCell.setStatus('mandatory')
atmIfVccVcdTmAbrMaxTimeBetweenRmCells = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 5, 2, 2, 2, 110, 1, 16), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(781, 781), ValueRangeConstraint(1563, 1563), ValueRangeConstraint(3125, 3125), ValueRangeConstraint(6250, 6250), ValueRangeConstraint(12500, 12500), ValueRangeConstraint(25000, 25000), ValueRangeConstraint(50000, 50000), ValueRangeConstraint(100000, 100000), ValueRangeConstraint(16777216, 16777216), )).clone(16777216)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmIfVccVcdTmAbrMaxTimeBetweenRmCells.setStatus('mandatory')
atmIfVccVcdTmAbrCutoffDecreaseFactor = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 5, 2, 2, 2, 110, 1, 17), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(1, 1), ValueRangeConstraint(2, 2), ValueRangeConstraint(4, 4), ValueRangeConstraint(8, 8), ValueRangeConstraint(16, 16), ValueRangeConstraint(32, 32), ValueRangeConstraint(64, 64), ValueRangeConstraint(16777216, 16777216), )).clone(16777216)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmIfVccVcdTmAbrCutoffDecreaseFactor.setStatus('mandatory')
atmIfVccVcdTmAbrAcrDecreaseTimeFactor = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 5, 2, 2, 2, 110, 1, 18), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 1023), ValueRangeConstraint(16777216, 16777216), )).clone(16777216)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmIfVccVcdTmAbrAcrDecreaseTimeFactor.setStatus('mandatory')
atmIfVccVcdTmAbrDgcraMaximumDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 5, 2, 2, 2, 110, 1, 19), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(1, 16700000), ValueRangeConstraint(16777216, 16777216), )).clone(16777216)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmIfVccVcdTmAbrDgcraMaximumDelay.setStatus('mandatory')
atmIfVccVcdTmAbrDgcraMinimumDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 5, 2, 2, 2, 110, 1, 20), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(1, 16700000), ValueRangeConstraint(16777216, 16777216), )).clone(16777216)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmIfVccVcdTmAbrDgcraMinimumDelay.setStatus('mandatory')
atmIfVccVcdTmAbrFarEndAcrDecreaseTimeFactor = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 5, 2, 2, 2, 110, 1, 21), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 1023), ValueRangeConstraint(1024, 1024), )).clone(1024)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmIfVccVcdTmAbrFarEndAcrDecreaseTimeFactor.setStatus('mandatory')
atmIfVccVcdTmAbrFarEndInitialCellRate = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 5, 2, 2, 2, 110, 1, 22), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 16777215), ValueRangeConstraint(16777219, 16777219), )).clone(16777219)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmIfVccVcdTmAbrFarEndInitialCellRate.setStatus('mandatory')
atmIfVccLoop = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 5, 3))
atmIfVccLoopRowStatusTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 5, 3, 1), )
if mibBuilder.loadTexts: atmIfVccLoopRowStatusTable.setStatus('mandatory')
atmIfVccLoopRowStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 5, 3, 1, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-AtmCoreMIB", "atmIfIndex"), (0, "Nortel-Magellan-Passport-AtmCoreMIB", "atmIfVccIndex"), (0, "Nortel-Magellan-Passport-AtmCoreMIB", "atmIfVccLoopIndex"))
if mibBuilder.loadTexts: atmIfVccLoopRowStatusEntry.setStatus('mandatory')
atmIfVccLoopRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 5, 3, 1, 1, 1), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmIfVccLoopRowStatus.setStatus('mandatory')
atmIfVccLoopComponentName = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 5, 3, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmIfVccLoopComponentName.setStatus('mandatory')
atmIfVccLoopStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 5, 3, 1, 1, 4), StorageType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmIfVccLoopStorageType.setStatus('mandatory')
atmIfVccLoopIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 5, 3, 1, 1, 10), NonReplicated())
if mibBuilder.loadTexts: atmIfVccLoopIndex.setStatus('mandatory')
atmIfVccNep = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 5, 5))
atmIfVccNepRowStatusTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 5, 5, 1), )
if mibBuilder.loadTexts: atmIfVccNepRowStatusTable.setStatus('mandatory')
atmIfVccNepRowStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 5, 5, 1, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-AtmCoreMIB", "atmIfIndex"), (0, "Nortel-Magellan-Passport-AtmCoreMIB", "atmIfVccIndex"), (0, "Nortel-Magellan-Passport-AtmCoreMIB", "atmIfVccNepIndex"))
if mibBuilder.loadTexts: atmIfVccNepRowStatusEntry.setStatus('mandatory')
atmIfVccNepRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 5, 5, 1, 1, 1), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmIfVccNepRowStatus.setStatus('mandatory')
atmIfVccNepComponentName = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 5, 5, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmIfVccNepComponentName.setStatus('mandatory')
atmIfVccNepStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 5, 5, 1, 1, 4), StorageType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmIfVccNepStorageType.setStatus('mandatory')
atmIfVccNepIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 5, 5, 1, 1, 10), NonReplicated())
if mibBuilder.loadTexts: atmIfVccNepIndex.setStatus('mandatory')
atmIfVccNepProvTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 5, 5, 100), )
if mibBuilder.loadTexts: atmIfVccNepProvTable.setStatus('mandatory')
atmIfVccNepProvEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 5, 5, 100, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-AtmCoreMIB", "atmIfIndex"), (0, "Nortel-Magellan-Passport-AtmCoreMIB", "atmIfVccIndex"), (0, "Nortel-Magellan-Passport-AtmCoreMIB", "atmIfVccNepIndex"))
if mibBuilder.loadTexts: atmIfVccNepProvEntry.setStatus('mandatory')
atmIfVccNepApplicationName = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 5, 5, 100, 1, 10), Link()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmIfVccNepApplicationName.setStatus('mandatory')
atmIfVccTest = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 5, 6))
atmIfVccTestRowStatusTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 5, 6, 1), )
if mibBuilder.loadTexts: atmIfVccTestRowStatusTable.setStatus('mandatory')
atmIfVccTestRowStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 5, 6, 1, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-AtmCoreMIB", "atmIfIndex"), (0, "Nortel-Magellan-Passport-AtmCoreMIB", "atmIfVccIndex"), (0, "Nortel-Magellan-Passport-AtmCoreMIB", "atmIfVccTestIndex"))
if mibBuilder.loadTexts: atmIfVccTestRowStatusEntry.setStatus('mandatory')
atmIfVccTestRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 5, 6, 1, 1, 1), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmIfVccTestRowStatus.setStatus('mandatory')
atmIfVccTestComponentName = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 5, 6, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmIfVccTestComponentName.setStatus('mandatory')
atmIfVccTestStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 5, 6, 1, 1, 4), StorageType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmIfVccTestStorageType.setStatus('mandatory')
atmIfVccTestIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 5, 6, 1, 1, 10), NonReplicated())
if mibBuilder.loadTexts: atmIfVccTestIndex.setStatus('mandatory')
atmIfVccTestStateTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 5, 6, 100), )
if mibBuilder.loadTexts: atmIfVccTestStateTable.setStatus('mandatory')
atmIfVccTestStateEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 5, 6, 100, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-AtmCoreMIB", "atmIfIndex"), (0, "Nortel-Magellan-Passport-AtmCoreMIB", "atmIfVccIndex"), (0, "Nortel-Magellan-Passport-AtmCoreMIB", "atmIfVccTestIndex"))
if mibBuilder.loadTexts: atmIfVccTestStateEntry.setStatus('mandatory')
atmIfVccTestAdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 5, 6, 100, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("locked", 0), ("unlocked", 1), ("shuttingDown", 2))).clone('unlocked')).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmIfVccTestAdminState.setStatus('mandatory')
atmIfVccTestOperationalState = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 5, 6, 100, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1))).clone('disabled')).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmIfVccTestOperationalState.setStatus('mandatory')
atmIfVccTestUsageState = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 5, 6, 100, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("idle", 0), ("active", 1), ("busy", 2))).clone('idle')).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmIfVccTestUsageState.setStatus('mandatory')
atmIfVccTestSetupTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 5, 6, 110), )
if mibBuilder.loadTexts: atmIfVccTestSetupTable.setStatus('mandatory')
atmIfVccTestSetupEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 5, 6, 110, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-AtmCoreMIB", "atmIfIndex"), (0, "Nortel-Magellan-Passport-AtmCoreMIB", "atmIfVccIndex"), (0, "Nortel-Magellan-Passport-AtmCoreMIB", "atmIfVccTestIndex"))
if mibBuilder.loadTexts: atmIfVccTestSetupEntry.setStatus('mandatory')
atmIfVccTestFrmTypes = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 5, 6, 110, 1, 10), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 1)).setFixedLength(1).clone(hexValue="c0")).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmIfVccTestFrmTypes.setStatus('mandatory')
atmIfVccTestFrmSize = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 5, 6, 110, 1, 20), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(4, 4096)).clone(1024)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmIfVccTestFrmSize.setStatus('mandatory')
atmIfVccTestFrmPatternType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 5, 6, 110, 1, 30), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("ccitt32kBitPattern", 0), ("ccitt8MBitPattern", 1), ("customizedPattern", 2))).clone('ccitt32kBitPattern')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmIfVccTestFrmPatternType.setStatus('mandatory')
atmIfVccTestCustomizedPattern = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 5, 6, 110, 1, 40), Hex().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295)).clone(1431655765)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmIfVccTestCustomizedPattern.setStatus('mandatory')
atmIfVccTestDuration = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 5, 6, 110, 1, 50), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 30240)).clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmIfVccTestDuration.setStatus('mandatory')
atmIfVccTestBandwidthElastic = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 5, 6, 110, 1, 60), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("no", 0), ("yes", 1))).clone('no')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmIfVccTestBandwidthElastic.setStatus('mandatory')
atmIfVccTestOverrideHoldingPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 5, 6, 110, 1, 70), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 6))).clone(namedValues=NamedValues(("n0", 0), ("n1", 1), ("n2", 2), ("n3", 3), ("n4", 4), ("noOverride", 6))).clone('noOverride')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmIfVccTestOverrideHoldingPriority.setStatus('mandatory')
atmIfVccTestResultsTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 5, 6, 120), )
if mibBuilder.loadTexts: atmIfVccTestResultsTable.setStatus('mandatory')
atmIfVccTestResultsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 5, 6, 120, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-AtmCoreMIB", "atmIfIndex"), (0, "Nortel-Magellan-Passport-AtmCoreMIB", "atmIfVccIndex"), (0, "Nortel-Magellan-Passport-AtmCoreMIB", "atmIfVccTestIndex"))
if mibBuilder.loadTexts: atmIfVccTestResultsEntry.setStatus('mandatory')
atmIfVccTestElapsedTime = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 5, 6, 120, 1, 10), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 30240))).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmIfVccTestElapsedTime.setStatus('mandatory')
atmIfVccTestTimeRemaining = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 5, 6, 120, 1, 20), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 30240))).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmIfVccTestTimeRemaining.setStatus('mandatory')
atmIfVccTestCauseOfTermination = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 5, 6, 120, 1, 30), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("testTimeExpired", 0), ("stoppedByOperator", 1), ("neverStarted", 2), ("testRunning", 3))).clone('neverStarted')).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmIfVccTestCauseOfTermination.setStatus('mandatory')
atmIfVccTestBytesTx = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 5, 6, 120, 1, 40), PassportCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmIfVccTestBytesTx.setStatus('mandatory')
atmIfVccTestBytesRx = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 5, 6, 120, 1, 50), PassportCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmIfVccTestBytesRx.setStatus('mandatory')
atmIfVccTestLoadingFrmTx = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 5, 6, 120, 1, 60), PassportCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmIfVccTestLoadingFrmTx.setStatus('mandatory')
atmIfVccTestLoadingFrmRx = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 5, 6, 120, 1, 70), PassportCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmIfVccTestLoadingFrmRx.setStatus('mandatory')
atmIfVccTestLoadingFrmLost = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 5, 6, 120, 1, 80), PassportCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmIfVccTestLoadingFrmLost.setStatus('mandatory')
atmIfVccTestVerificationFrmTx = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 5, 6, 120, 1, 90), PassportCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmIfVccTestVerificationFrmTx.setStatus('mandatory')
atmIfVccTestVerificationFrmRx = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 5, 6, 120, 1, 100), PassportCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmIfVccTestVerificationFrmRx.setStatus('mandatory')
atmIfVccTestVerificationFrmBad = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 5, 6, 120, 1, 110), PassportCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmIfVccTestVerificationFrmBad.setStatus('mandatory')
atmIfVccTestUnrecognizableFrmRx = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 5, 6, 120, 1, 120), PassportCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmIfVccTestUnrecognizableFrmRx.setStatus('mandatory')
atmIfVccTm = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 5, 7))
atmIfVccTmRowStatusTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 5, 7, 1), )
if mibBuilder.loadTexts: atmIfVccTmRowStatusTable.setStatus('mandatory')
atmIfVccTmRowStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 5, 7, 1, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-AtmCoreMIB", "atmIfIndex"), (0, "Nortel-Magellan-Passport-AtmCoreMIB", "atmIfVccIndex"), (0, "Nortel-Magellan-Passport-AtmCoreMIB", "atmIfVccTmIndex"))
if mibBuilder.loadTexts: atmIfVccTmRowStatusEntry.setStatus('mandatory')
atmIfVccTmRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 5, 7, 1, 1, 1), RowStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmIfVccTmRowStatus.setStatus('mandatory')
atmIfVccTmComponentName = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 5, 7, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmIfVccTmComponentName.setStatus('mandatory')
atmIfVccTmStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 5, 7, 1, 1, 4), StorageType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmIfVccTmStorageType.setStatus('mandatory')
atmIfVccTmIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 5, 7, 1, 1, 10), NonReplicated())
if mibBuilder.loadTexts: atmIfVccTmIndex.setStatus('mandatory')
atmIfVccTmOperTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 5, 7, 100), )
if mibBuilder.loadTexts: atmIfVccTmOperTable.setStatus('mandatory')
atmIfVccTmOperEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 5, 7, 100, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-AtmCoreMIB", "atmIfIndex"), (0, "Nortel-Magellan-Passport-AtmCoreMIB", "atmIfVccIndex"), (0, "Nortel-Magellan-Passport-AtmCoreMIB", "atmIfVccTmIndex"))
if mibBuilder.loadTexts: atmIfVccTmOperEntry.setStatus('mandatory')
atmIfVccTmTxTrafficDescType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 5, 7, 100, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9))).clone(namedValues=NamedValues(("n1", 1), ("n2", 2), ("n3", 3), ("n4", 4), ("n5", 5), ("n6", 6), ("n7", 7), ("n8", 8), ("n9", 9)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmIfVccTmTxTrafficDescType.setStatus('mandatory')
atmIfVccTmTxQosClass = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 5, 7, 100, 1, 31), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 14))).clone(namedValues=NamedValues(("n0", 0), ("n1", 1), ("n2", 2), ("n3", 3), ("n4", 4), ("notApplicable", 14)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmIfVccTmTxQosClass.setStatus('mandatory')
atmIfVccTmTxQueueLength = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 5, 7, 100, 1, 32), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 30720))).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmIfVccTmTxQueueLength.setStatus('mandatory')
atmIfVccTmTxQueueCongestionState = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 5, 7, 100, 1, 33), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 3))).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmIfVccTmTxQueueCongestionState.setStatus('mandatory')
atmIfVccTmHoldingPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 5, 7, 100, 1, 35), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 6))).clone(namedValues=NamedValues(("n0", 0), ("n1", 1), ("n2", 2), ("n3", 3), ("n4", 4), ("notApplicable", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmIfVccTmHoldingPriority.setStatus('mandatory')
atmIfVccTmRxTrafficDescType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 5, 7, 100, 1, 40), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9))).clone(namedValues=NamedValues(("n1", 1), ("n2", 2), ("n3", 3), ("n4", 4), ("n5", 5), ("n6", 6), ("n7", 7), ("n8", 8), ("n9", 9)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmIfVccTmRxTrafficDescType.setStatus('mandatory')
atmIfVccTmRxQosClass = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 5, 7, 100, 1, 61), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 14))).clone(namedValues=NamedValues(("n0", 0), ("n1", 1), ("n2", 2), ("n3", 3), ("n4", 4), ("notApplicable", 14)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmIfVccTmRxQosClass.setStatus('mandatory')
atmIfVccTmAtmServiceCategory = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 5, 7, 100, 1, 62), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4))).clone(namedValues=NamedValues(("unspecifiedBitRate", 0), ("constantBitRate", 1), ("rtVariableBitRate", 2), ("nrtVariableBitRate", 3), ("availableBitRate", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmIfVccTmAtmServiceCategory.setStatus('mandatory')
atmIfVccTmTrafficShaping = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 5, 7, 100, 1, 70), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 4, 5, 6, 7))).clone(namedValues=NamedValues(("disabled", 1), ("notApplicable", 4), ("linear", 5), ("inverseUpc", 6), ("dynamic", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmIfVccTmTrafficShaping.setStatus('mandatory')
atmIfVccTmBearerClassBbc = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 5, 7, 100, 1, 71), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 3, 16, 24, 30))).clone(namedValues=NamedValues(("a", 1), ("c", 3), ("x", 16), ("vp", 24), ("notApplicable", 30)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmIfVccTmBearerClassBbc.setStatus('mandatory')
atmIfVccTmTransferCapabilityBbc = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 5, 7, 100, 1, 72), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 5, 8, 9, 10, 30))).clone(namedValues=NamedValues(("n0", 0), ("n1", 1), ("n2", 2), ("n5", 5), ("n8", 8), ("n9", 9), ("n10", 10), ("notApplicable", 30)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmIfVccTmTransferCapabilityBbc.setStatus('mandatory')
atmIfVccTmClippingBbc = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 5, 7, 100, 1, 74), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 14))).clone(namedValues=NamedValues(("no", 0), ("yes", 1), ("notApplicable", 14)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmIfVccTmClippingBbc.setStatus('mandatory')
atmIfVccTmUnshapedTransmitQueueing = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 5, 7, 100, 1, 75), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 4, 5))).clone(namedValues=NamedValues(("perVc", 0), ("common", 1), ("notApplicable", 4), ("fifo", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmIfVccTmUnshapedTransmitQueueing.setStatus('mandatory')
atmIfVccTmBestEffort = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 5, 7, 100, 1, 76), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 14))).clone(namedValues=NamedValues(("indicated", 0), ("notIndicated", 1), ("notApplicable", 14)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmIfVccTmBestEffort.setStatus('mandatory')
atmIfVccTmForceTagging = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 5, 7, 100, 1, 78), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("enabled", 0), ("disabled", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmIfVccTmForceTagging.setStatus('mandatory')
atmIfVccTmWeight = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 5, 7, 100, 1, 79), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(1, 4095), ValueRangeConstraint(65534, 65534), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmIfVccTmWeight.setStatus('mandatory')
atmIfVccTmUsageParameterControl = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 5, 7, 100, 1, 80), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 3, 4, 5, 6))).clone(namedValues=NamedValues(("enforced", 0), ("disabled", 1), ("notApplicable", 3), ("monitored", 4), ("abrMonitored", 5), ("abrEnforced", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmIfVccTmUsageParameterControl.setStatus('mandatory')
atmIfVccTmTxPacketWiseDiscard = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 5, 7, 100, 1, 85), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 1)).setFixedLength(1)).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmIfVccTmTxPacketWiseDiscard.setStatus('mandatory')
atmIfVccTmRxPacketWiseDiscard = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 5, 7, 100, 1, 86), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 1)).setFixedLength(1)).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmIfVccTmRxPacketWiseDiscard.setStatus('mandatory')
atmIfVccTmBandwidthElastic = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 5, 7, 100, 1, 90), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("no", 0), ("yes", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmIfVccTmBandwidthElastic.setStatus('mandatory')
atmIfVccTmBandwidthReduction = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 5, 7, 100, 1, 100), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmIfVccTmBandwidthReduction.setStatus('mandatory')
atmIfVccTmAbrConnectionType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 5, 7, 100, 1, 110), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 15))).clone(namedValues=NamedValues(("erSwitch", 1), ("efciSwitch", 2), ("virtualSourceDest", 3), ("sourceDest", 4), ("nonAbrInterworking", 5), ("notApplicable", 15)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmIfVccTmAbrConnectionType.setStatus('mandatory')
atmIfVccTmTxTdpTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 5, 7, 451), )
if mibBuilder.loadTexts: atmIfVccTmTxTdpTable.setStatus('mandatory')
atmIfVccTmTxTdpEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 5, 7, 451, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-AtmCoreMIB", "atmIfIndex"), (0, "Nortel-Magellan-Passport-AtmCoreMIB", "atmIfVccIndex"), (0, "Nortel-Magellan-Passport-AtmCoreMIB", "atmIfVccTmIndex"), (0, "Nortel-Magellan-Passport-AtmCoreMIB", "atmIfVccTmTxTdpIndex"))
if mibBuilder.loadTexts: atmIfVccTmTxTdpEntry.setStatus('mandatory')
atmIfVccTmTxTdpIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 5, 7, 451, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 5)))
if mibBuilder.loadTexts: atmIfVccTmTxTdpIndex.setStatus('mandatory')
atmIfVccTmTxTdpValue = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 5, 7, 451, 1, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmIfVccTmTxTdpValue.setStatus('mandatory')
atmIfVccTmTxQThreshTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 5, 7, 452), )
if mibBuilder.loadTexts: atmIfVccTmTxQThreshTable.setStatus('mandatory')
atmIfVccTmTxQThreshEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 5, 7, 452, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-AtmCoreMIB", "atmIfIndex"), (0, "Nortel-Magellan-Passport-AtmCoreMIB", "atmIfVccIndex"), (0, "Nortel-Magellan-Passport-AtmCoreMIB", "atmIfVccTmIndex"), (0, "Nortel-Magellan-Passport-AtmCoreMIB", "atmIfVccTmTxQThreshIndex"))
if mibBuilder.loadTexts: atmIfVccTmTxQThreshEntry.setStatus('mandatory')
atmIfVccTmTxQThreshIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 5, 7, 452, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 3)))
if mibBuilder.loadTexts: atmIfVccTmTxQThreshIndex.setStatus('mandatory')
atmIfVccTmTxQThreshValue = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 5, 7, 452, 1, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 30720))).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmIfVccTmTxQThreshValue.setStatus('mandatory')
atmIfVccTmRxTdpTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 5, 7, 453), )
if mibBuilder.loadTexts: atmIfVccTmRxTdpTable.setStatus('mandatory')
atmIfVccTmRxTdpEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 5, 7, 453, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-AtmCoreMIB", "atmIfIndex"), (0, "Nortel-Magellan-Passport-AtmCoreMIB", "atmIfVccIndex"), (0, "Nortel-Magellan-Passport-AtmCoreMIB", "atmIfVccTmIndex"), (0, "Nortel-Magellan-Passport-AtmCoreMIB", "atmIfVccTmRxTdpIndex"))
if mibBuilder.loadTexts: atmIfVccTmRxTdpEntry.setStatus('mandatory')
atmIfVccTmRxTdpIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 5, 7, 453, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4)))
if mibBuilder.loadTexts: atmIfVccTmRxTdpIndex.setStatus('mandatory')
atmIfVccTmRxTdpValue = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 5, 7, 453, 1, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmIfVccTmRxTdpValue.setStatus('mandatory')
atmIfVccTmTqpTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 5, 7, 454), )
if mibBuilder.loadTexts: atmIfVccTmTqpTable.setStatus('mandatory')
atmIfVccTmTqpEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 5, 7, 454, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-AtmCoreMIB", "atmIfIndex"), (0, "Nortel-Magellan-Passport-AtmCoreMIB", "atmIfVccIndex"), (0, "Nortel-Magellan-Passport-AtmCoreMIB", "atmIfVccTmIndex"), (0, "Nortel-Magellan-Passport-AtmCoreMIB", "atmIfVccTmTqpIndex"))
if mibBuilder.loadTexts: atmIfVccTmTqpEntry.setStatus('mandatory')
atmIfVccTmTqpIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 5, 7, 454, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("cdv", 0), ("ctd", 1), ("clr", 2))))
if mibBuilder.loadTexts: atmIfVccTmTqpIndex.setStatus('mandatory')
atmIfVccTmTqpValue = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 5, 7, 454, 1, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmIfVccTmTqpValue.setStatus('mandatory')
atmIfVccTmRqpTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 5, 7, 455), )
if mibBuilder.loadTexts: atmIfVccTmRqpTable.setStatus('mandatory')
atmIfVccTmRqpEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 5, 7, 455, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-AtmCoreMIB", "atmIfIndex"), (0, "Nortel-Magellan-Passport-AtmCoreMIB", "atmIfVccIndex"), (0, "Nortel-Magellan-Passport-AtmCoreMIB", "atmIfVccTmIndex"), (0, "Nortel-Magellan-Passport-AtmCoreMIB", "atmIfVccTmRqpIndex"))
if mibBuilder.loadTexts: atmIfVccTmRqpEntry.setStatus('mandatory')
atmIfVccTmRqpIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 5, 7, 455, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("cdv", 0), ("ctd", 1), ("clr", 2))))
if mibBuilder.loadTexts: atmIfVccTmRqpIndex.setStatus('mandatory')
atmIfVccTmRqpValue = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 5, 7, 455, 1, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmIfVccTmRqpValue.setStatus('mandatory')
atmIfVccTmAbr = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 5, 7, 2))
atmIfVccTmAbrRowStatusTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 5, 7, 2, 1), )
if mibBuilder.loadTexts: atmIfVccTmAbrRowStatusTable.setStatus('mandatory')
atmIfVccTmAbrRowStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 5, 7, 2, 1, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-AtmCoreMIB", "atmIfIndex"), (0, "Nortel-Magellan-Passport-AtmCoreMIB", "atmIfVccIndex"), (0, "Nortel-Magellan-Passport-AtmCoreMIB", "atmIfVccTmIndex"), (0, "Nortel-Magellan-Passport-AtmCoreMIB", "atmIfVccTmAbrIndex"))
if mibBuilder.loadTexts: atmIfVccTmAbrRowStatusEntry.setStatus('mandatory')
atmIfVccTmAbrRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 5, 7, 2, 1, 1, 1), RowStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmIfVccTmAbrRowStatus.setStatus('mandatory')
atmIfVccTmAbrComponentName = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 5, 7, 2, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmIfVccTmAbrComponentName.setStatus('mandatory')
atmIfVccTmAbrStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 5, 7, 2, 1, 1, 4), StorageType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmIfVccTmAbrStorageType.setStatus('mandatory')
atmIfVccTmAbrIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 5, 7, 2, 1, 1, 10), NonReplicated())
if mibBuilder.loadTexts: atmIfVccTmAbrIndex.setStatus('mandatory')
atmIfVccTmAbrOperTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 5, 7, 2, 110), )
if mibBuilder.loadTexts: atmIfVccTmAbrOperTable.setStatus('mandatory')
atmIfVccTmAbrOperEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 5, 7, 2, 110, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-AtmCoreMIB", "atmIfIndex"), (0, "Nortel-Magellan-Passport-AtmCoreMIB", "atmIfVccIndex"), (0, "Nortel-Magellan-Passport-AtmCoreMIB", "atmIfVccTmIndex"), (0, "Nortel-Magellan-Passport-AtmCoreMIB", "atmIfVccTmAbrIndex"))
if mibBuilder.loadTexts: atmIfVccTmAbrOperEntry.setStatus('mandatory')
atmIfVccTmAbrInitialCellRate = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 5, 7, 2, 110, 1, 10), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 16777215))).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmIfVccTmAbrInitialCellRate.setStatus('mandatory')
atmIfVccTmAbrTransientBufferExposure = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 5, 7, 2, 110, 1, 11), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 16777215))).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmIfVccTmAbrTransientBufferExposure.setStatus('mandatory')
atmIfVccTmAbrFixedRoundTripTime = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 5, 7, 2, 110, 1, 12), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 16700000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmIfVccTmAbrFixedRoundTripTime.setStatus('mandatory')
atmIfVccTmAbrRateDecreaseFactor = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 5, 7, 2, 110, 1, 13), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 15))).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmIfVccTmAbrRateDecreaseFactor.setStatus('mandatory')
atmIfVccTmAbrRateIncreaseFactor = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 5, 7, 2, 110, 1, 14), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 15))).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmIfVccTmAbrRateIncreaseFactor.setStatus('mandatory')
atmIfVccTmAbrMaxCellPerRmCell = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 5, 7, 2, 110, 1, 15), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(2, 2), ValueRangeConstraint(4, 4), ValueRangeConstraint(8, 8), ValueRangeConstraint(16, 16), ValueRangeConstraint(32, 32), ValueRangeConstraint(64, 64), ValueRangeConstraint(128, 128), ValueRangeConstraint(256, 256), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmIfVccTmAbrMaxCellPerRmCell.setStatus('mandatory')
atmIfVccTmAbrMaxTimeBetweenRmCell = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 5, 7, 2, 110, 1, 16), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(781, 781), ValueRangeConstraint(1563, 1563), ValueRangeConstraint(3125, 3125), ValueRangeConstraint(6250, 6250), ValueRangeConstraint(12500, 12500), ValueRangeConstraint(25000, 25000), ValueRangeConstraint(50000, 50000), ValueRangeConstraint(100000, 100000), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmIfVccTmAbrMaxTimeBetweenRmCell.setStatus('mandatory')
atmIfVccTmAbrCutoffDecreaseFactor = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 5, 7, 2, 110, 1, 17), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(1, 1), ValueRangeConstraint(2, 2), ValueRangeConstraint(4, 4), ValueRangeConstraint(8, 8), ValueRangeConstraint(16, 16), ValueRangeConstraint(32, 32), ValueRangeConstraint(64, 64), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmIfVccTmAbrCutoffDecreaseFactor.setStatus('mandatory')
atmIfVccTmAbrAcrDecreaseTimeFactor = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 5, 7, 2, 110, 1, 18), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 1023))).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmIfVccTmAbrAcrDecreaseTimeFactor.setStatus('mandatory')
atmIfVccTmAbrForwardRmCellLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 5, 7, 2, 110, 1, 19), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(1, 1), ValueRangeConstraint(3, 3), ValueRangeConstraint(7, 7), ValueRangeConstraint(15, 15), ValueRangeConstraint(31, 31), ValueRangeConstraint(63, 63), ValueRangeConstraint(127, 127), ValueRangeConstraint(255, 255), ValueRangeConstraint(511, 511), ValueRangeConstraint(1023, 1023), ValueRangeConstraint(2047, 2047), ValueRangeConstraint(4095, 4095), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmIfVccTmAbrForwardRmCellLimit.setStatus('mandatory')
atmIfVccTmAbrTxRateChangeInfo = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 5, 7, 2, 110, 1, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("congestionIndicated", 0), ("noIncreaseIndicated", 1), ("explicitRateIndicated", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmIfVccTmAbrTxRateChangeInfo.setStatus('obsolete')
atmIfVccTmAbrAcrRateChangeInfo = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 5, 7, 2, 110, 1, 21), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 15))).clone(namedValues=NamedValues(("noChange", 0), ("decreasedByRdf", 1), ("increasedByRif", 2), ("setToExplicitRate", 3), ("notApplicable", 15)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmIfVccTmAbrAcrRateChangeInfo.setStatus('mandatory')
atmIfVccTmAbrTxFwdRmCells = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 5, 7, 2, 110, 1, 22), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4095))).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmIfVccTmAbrTxFwdRmCells.setStatus('mandatory')
atmIfVccTmAbrRxEfci = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 5, 7, 2, 110, 1, 23), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("notIndicated", 0), ("indicated", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmIfVccTmAbrRxEfci.setStatus('mandatory')
atmIfVccTmAbrBrmRateChangeInfo = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 5, 7, 2, 110, 1, 24), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 1)).setFixedLength(1)).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmIfVccTmAbrBrmRateChangeInfo.setStatus('mandatory')
atmIfVccTmAbrBrmExplicitRate = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 5, 7, 2, 110, 1, 25), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 16777215))).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmIfVccTmAbrBrmExplicitRate.setStatus('mandatory')
atmIfNAcct = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 8))
atmIfNAcctRowStatusTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 8, 1), )
if mibBuilder.loadTexts: atmIfNAcctRowStatusTable.setStatus('mandatory')
atmIfNAcctRowStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 8, 1, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-AtmCoreMIB", "atmIfIndex"), (0, "Nortel-Magellan-Passport-AtmCoreMIB", "atmIfNAcctIndex"))
if mibBuilder.loadTexts: atmIfNAcctRowStatusEntry.setStatus('mandatory')
atmIfNAcctRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 8, 1, 1, 1), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmIfNAcctRowStatus.setStatus('mandatory')
atmIfNAcctComponentName = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 8, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmIfNAcctComponentName.setStatus('mandatory')
atmIfNAcctStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 8, 1, 1, 4), StorageType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmIfNAcctStorageType.setStatus('mandatory')
atmIfNAcctIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 8, 1, 1, 10), NonReplicated())
if mibBuilder.loadTexts: atmIfNAcctIndex.setStatus('mandatory')
atmIfNAcctProvTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 8, 10), )
if mibBuilder.loadTexts: atmIfNAcctProvTable.setStatus('mandatory')
atmIfNAcctProvEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 8, 10, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-AtmCoreMIB", "atmIfIndex"), (0, "Nortel-Magellan-Passport-AtmCoreMIB", "atmIfNAcctIndex"))
if mibBuilder.loadTexts: atmIfNAcctProvEntry.setStatus('mandatory')
atmIfNAcctAccountCollection = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 8, 10, 1, 1), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 1)).setFixedLength(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmIfNAcctAccountCollection.setStatus('mandatory')
atmIfNAcctAccountConnectionType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 8, 10, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("origTerm", 0), ("intermediate", 1))).clone('origTerm')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmIfNAcctAccountConnectionType.setStatus('mandatory')
atmIfNAcctAccountClass = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 8, 10, 1, 3), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmIfNAcctAccountClass.setStatus('mandatory')
atmIfNAcctServiceExchange = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 8, 10, 1, 4), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmIfNAcctServiceExchange.setStatus('mandatory')
atmIfVpt = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 9))
atmIfVptRowStatusTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 9, 1), )
if mibBuilder.loadTexts: atmIfVptRowStatusTable.setStatus('mandatory')
atmIfVptRowStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 9, 1, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-AtmCoreMIB", "atmIfIndex"), (0, "Nortel-Magellan-Passport-AtmCoreMIB", "atmIfVptIndex"))
if mibBuilder.loadTexts: atmIfVptRowStatusEntry.setStatus('mandatory')
atmIfVptRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 9, 1, 1, 1), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmIfVptRowStatus.setStatus('mandatory')
atmIfVptComponentName = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 9, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmIfVptComponentName.setStatus('mandatory')
atmIfVptStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 9, 1, 1, 4), StorageType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmIfVptStorageType.setStatus('mandatory')
atmIfVptIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 9, 1, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4095)))
if mibBuilder.loadTexts: atmIfVptIndex.setStatus('mandatory')
atmIfVptStateTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 9, 100), )
if mibBuilder.loadTexts: atmIfVptStateTable.setStatus('mandatory')
atmIfVptStateEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 9, 100, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-AtmCoreMIB", "atmIfIndex"), (0, "Nortel-Magellan-Passport-AtmCoreMIB", "atmIfVptIndex"))
if mibBuilder.loadTexts: atmIfVptStateEntry.setStatus('mandatory')
atmIfVptAdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 9, 100, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("locked", 0), ("unlocked", 1), ("shuttingDown", 2))).clone('unlocked')).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmIfVptAdminState.setStatus('mandatory')
atmIfVptOperationalState = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 9, 100, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1))).clone('disabled')).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmIfVptOperationalState.setStatus('mandatory')
atmIfVptUsageState = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 9, 100, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("idle", 0), ("active", 1), ("busy", 2))).clone('idle')).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmIfVptUsageState.setStatus('mandatory')
atmIfVptOperTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 9, 110), )
if mibBuilder.loadTexts: atmIfVptOperTable.setStatus('mandatory')
atmIfVptOperEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 9, 110, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-AtmCoreMIB", "atmIfIndex"), (0, "Nortel-Magellan-Passport-AtmCoreMIB", "atmIfVptIndex"))
if mibBuilder.loadTexts: atmIfVptOperEntry.setStatus('mandatory')
atmIfVptConnectionPointType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 9, 110, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("connectionEndPoint", 0), ("segmentEndPoint", 1), ("connectingPoint", 2), ("unknown", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmIfVptConnectionPointType.setStatus('mandatory')
atmIfVptStatusTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 9, 120), )
if mibBuilder.loadTexts: atmIfVptStatusTable.setStatus('mandatory')
atmIfVptStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 9, 120, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-AtmCoreMIB", "atmIfIndex"), (0, "Nortel-Magellan-Passport-AtmCoreMIB", "atmIfVptIndex"))
if mibBuilder.loadTexts: atmIfVptStatusEntry.setStatus('mandatory')
atmIfVptOperStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 9, 120, 1, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4))).clone(namedValues=NamedValues(("unknown", 0), ("end2endUp", 1), ("end2endDown", 2), ("localUpEnd2endUnknown", 3), ("localDown", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmIfVptOperStatus.setStatus('mandatory')
atmIfVptLocalFailureCause = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 9, 120, 1, 25), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("noFailure", 0), ("localBwLoss", 1), ("portDown", 2), ("notAdmitted", 3), ("appNotRegistered", 4), ("disabledByApp", 5), ("bwReduced", 6), ("vpDown", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmIfVptLocalFailureCause.setStatus('mandatory')
atmIfVptTroubled = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 9, 120, 1, 28), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("no", 0), ("yes", 1))).clone('no')).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmIfVptTroubled.setStatus('mandatory')
atmIfVptSegLinkSideLoopbackState = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 9, 120, 1, 30), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("good", 0), ("bad", 1), ("unknown", 2), ("notApplicable", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmIfVptSegLinkSideLoopbackState.setStatus('mandatory')
atmIfVptSegSwitchSideLoopbackState = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 9, 120, 1, 40), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("good", 0), ("bad", 1), ("unknown", 2), ("notApplicable", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmIfVptSegSwitchSideLoopbackState.setStatus('mandatory')
atmIfVptEndToEndLoopbackState = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 9, 120, 1, 50), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("good", 0), ("bad", 1), ("unknown", 2), ("notApplicable", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmIfVptEndToEndLoopbackState.setStatus('mandatory')
atmIfVptRxOamCellCongestionState = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 9, 120, 1, 55), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("good", 0), ("bad", 1), ("unknown", 2), ("notApplicable", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmIfVptRxOamCellCongestionState.setStatus('mandatory')
atmIfVptAisState = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 9, 120, 1, 60), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("good", 0), ("bad", 1), ("unknown", 2), ("notApplicable", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmIfVptAisState.setStatus('mandatory')
atmIfVptRdiState = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 9, 120, 1, 70), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("good", 0), ("bad", 1), ("unknown", 2), ("notApplicable", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmIfVptRdiState.setStatus('mandatory')
atmIfVptTrafficTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 9, 130), )
if mibBuilder.loadTexts: atmIfVptTrafficTable.setStatus('mandatory')
atmIfVptTrafficEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 9, 130, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-AtmCoreMIB", "atmIfIndex"), (0, "Nortel-Magellan-Passport-AtmCoreMIB", "atmIfVptIndex"))
if mibBuilder.loadTexts: atmIfVptTrafficEntry.setStatus('mandatory')
atmIfVptTxTrafficDescType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 9, 130, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("n1", 1), ("n2", 2), ("n3", 3), ("n4", 4), ("n5", 5), ("n6", 6), ("n7", 7), ("n8", 8)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmIfVptTxTrafficDescType.setStatus('obsolete')
atmIfVptTxQosClass = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 9, 130, 1, 30), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4))).clone(namedValues=NamedValues(("unspecified", 0), ("constantBitRate", 1), ("variableBitRate", 2), ("connectionOriented", 3), ("connectionless", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmIfVptTxQosClass.setStatus('obsolete')
atmIfVptFwdQosClass = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 9, 130, 1, 31), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 14))).clone(namedValues=NamedValues(("n0", 0), ("n1", 1), ("n2", 2), ("n3", 3), ("n4", 4), ("notApplicable", 14)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmIfVptFwdQosClass.setStatus('obsolete')
atmIfVptTxQueueLength = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 9, 130, 1, 32), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 30720))).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmIfVptTxQueueLength.setStatus('obsolete')
atmIfVptTxQueueCongestionState = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 9, 130, 1, 33), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 3))).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmIfVptTxQueueCongestionState.setStatus('obsolete')
atmIfVptHoldingPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 9, 130, 1, 35), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 6))).clone(namedValues=NamedValues(("n0", 0), ("n1", 1), ("n2", 2), ("n3", 3), ("n4", 4), ("notApplicable", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmIfVptHoldingPriority.setStatus('obsolete')
atmIfVptRxTrafficDescType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 9, 130, 1, 40), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("n1", 1), ("n2", 2), ("n3", 3), ("n4", 4), ("n5", 5), ("n6", 6), ("n7", 7), ("n8", 8)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmIfVptRxTrafficDescType.setStatus('obsolete')
atmIfVptRxQosClass = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 9, 130, 1, 60), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4))).clone(namedValues=NamedValues(("unspecified", 0), ("constantBitRate", 1), ("variableBitRate", 2), ("connectionOriented", 3), ("connectionless", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmIfVptRxQosClass.setStatus('obsolete')
atmIfVptBwdQosClass = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 9, 130, 1, 61), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 14))).clone(namedValues=NamedValues(("n0", 0), ("n1", 1), ("n2", 2), ("n3", 3), ("n4", 4), ("notApplicable", 14)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmIfVptBwdQosClass.setStatus('obsolete')
atmIfVptAtmServiceCategory = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 9, 130, 1, 62), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("unspecifiedBitRate", 0), ("constantBitRate", 1), ("rtVariableBitRate", 2), ("nrtVariableBitRate", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmIfVptAtmServiceCategory.setStatus('obsolete')
atmIfVptTrafficShaping = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 9, 130, 1, 70), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 4))).clone(namedValues=NamedValues(("enabled", 0), ("disabled", 1), ("notApplicable", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmIfVptTrafficShaping.setStatus('obsolete')
atmIfVptBearerClassBbc = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 9, 130, 1, 71), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 3, 16, 24, 30))).clone(namedValues=NamedValues(("a", 1), ("c", 3), ("x", 16), ("vp", 24), ("notApplicable", 30)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmIfVptBearerClassBbc.setStatus('obsolete')
atmIfVptTransferCapabilityBbc = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 9, 130, 1, 72), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 5, 8, 9, 10, 30))).clone(namedValues=NamedValues(("n0", 0), ("n1", 1), ("n2", 2), ("n5", 5), ("n8", 8), ("n9", 9), ("n10", 10), ("notApplicable", 30)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmIfVptTransferCapabilityBbc.setStatus('obsolete')
atmIfVptClippingBbc = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 9, 130, 1, 74), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 14))).clone(namedValues=NamedValues(("no", 0), ("yes", 1), ("notApplicable", 14)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmIfVptClippingBbc.setStatus('obsolete')
atmIfVptUnshapedTransmitQueueing = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 9, 130, 1, 75), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 4))).clone(namedValues=NamedValues(("perVc", 0), ("common", 1), ("notApplicable", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmIfVptUnshapedTransmitQueueing.setStatus('obsolete')
atmIfVptBestEffort = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 9, 130, 1, 76), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 14))).clone(namedValues=NamedValues(("indicated", 0), ("notIndicated", 1), ("notApplicable", 14)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmIfVptBestEffort.setStatus('obsolete')
atmIfVptUsageParameterControl = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 9, 130, 1, 80), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 3))).clone(namedValues=NamedValues(("enabled", 0), ("disabled", 1), ("notApplicable", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmIfVptUsageParameterControl.setStatus('obsolete')
atmIfVptTxFrameDiscard = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 9, 130, 1, 85), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 1)).setFixedLength(1)).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmIfVptTxFrameDiscard.setStatus('obsolete')
atmIfVptRxFrameDiscard = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 9, 130, 1, 86), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 1)).setFixedLength(1)).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmIfVptRxFrameDiscard.setStatus('obsolete')
atmIfVptBandwidthElastic = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 9, 130, 1, 90), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("no", 0), ("yes", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmIfVptBandwidthElastic.setStatus('obsolete')
atmIfVptBandwidthReduction = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 9, 130, 1, 100), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmIfVptBandwidthReduction.setStatus('obsolete')
atmIfVptStatsTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 9, 140), )
if mibBuilder.loadTexts: atmIfVptStatsTable.setStatus('mandatory')
atmIfVptStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 9, 140, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-AtmCoreMIB", "atmIfIndex"), (0, "Nortel-Magellan-Passport-AtmCoreMIB", "atmIfVptIndex"))
if mibBuilder.loadTexts: atmIfVptStatsEntry.setStatus('mandatory')
atmIfVptStatsTxCell = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 9, 140, 1, 10), PassportCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmIfVptStatsTxCell.setStatus('mandatory')
atmIfVptStatsTxCellClp = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 9, 140, 1, 20), PassportCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmIfVptStatsTxCellClp.setStatus('mandatory')
atmIfVptTxDiscard = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 9, 140, 1, 30), PassportCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmIfVptTxDiscard.setStatus('obsolete')
atmIfVptTxDiscardClp = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 9, 140, 1, 40), PassportCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmIfVptTxDiscardClp.setStatus('obsolete')
atmIfVptStatsTxCellDiscard = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 9, 140, 1, 42), PassportCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmIfVptStatsTxCellDiscard.setStatus('mandatory')
atmIfVptStatsTxCellDiscardClp = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 9, 140, 1, 43), PassportCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmIfVptStatsTxCellDiscardClp.setStatus('mandatory')
atmIfVptStatsTxFrameDiscard = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 9, 140, 1, 46), PassportCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmIfVptStatsTxFrameDiscard.setStatus('mandatory')
atmIfVptStatsTxFrameDiscardClp = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 9, 140, 1, 47), PassportCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmIfVptStatsTxFrameDiscardClp.setStatus('mandatory')
atmIfVptTxUtilization = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 9, 140, 1, 48), Gauge32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 200), ValueRangeConstraint(255, 255), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmIfVptTxUtilization.setStatus('mandatory')
atmIfVptStatsRxCell = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 9, 140, 1, 50), PassportCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmIfVptStatsRxCell.setStatus('mandatory')
atmIfVptStatsRxCellClp = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 9, 140, 1, 60), PassportCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmIfVptStatsRxCellClp.setStatus('mandatory')
atmIfVptRxDiscard = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 9, 140, 1, 70), PassportCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmIfVptRxDiscard.setStatus('obsolete')
atmIfVptRxDiscardClp = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 9, 140, 1, 80), PassportCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmIfVptRxDiscardClp.setStatus('obsolete')
atmIfVptStatsRxCellDiscard = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 9, 140, 1, 82), PassportCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmIfVptStatsRxCellDiscard.setStatus('mandatory')
atmIfVptStatsRxCellDiscardClp = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 9, 140, 1, 83), PassportCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmIfVptStatsRxCellDiscardClp.setStatus('mandatory')
atmIfVptStatsRxFrameDiscard = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 9, 140, 1, 86), PassportCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmIfVptStatsRxFrameDiscard.setStatus('mandatory')
atmIfVptStatsRxFrameDiscardClp = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 9, 140, 1, 88), PassportCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmIfVptStatsRxFrameDiscardClp.setStatus('mandatory')
atmIfVptRxUtilization = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 9, 140, 1, 89), Gauge32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 200), ValueRangeConstraint(255, 255), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmIfVptRxUtilization.setStatus('mandatory')
atmIfVptStatsRxUpcViolationOnEnforcer1 = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 9, 140, 1, 90), PassportCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmIfVptStatsRxUpcViolationOnEnforcer1.setStatus('mandatory')
atmIfVptStatsRxUpcViolationOnEnforcer2 = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 9, 140, 1, 92), PassportCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmIfVptStatsRxUpcViolationOnEnforcer2.setStatus('mandatory')
atmIfVptStatsRxAal5FrameError = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 9, 140, 1, 100), PassportCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmIfVptStatsRxAal5FrameError.setStatus('mandatory')
atmIfVptStatsRxAal5FrameAbort = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 9, 140, 1, 102), PassportCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmIfVptStatsRxAal5FrameAbort.setStatus('mandatory')
atmIfVptTxTdpTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 9, 294), )
if mibBuilder.loadTexts: atmIfVptTxTdpTable.setStatus('obsolete')
atmIfVptTxTdpEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 9, 294, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-AtmCoreMIB", "atmIfIndex"), (0, "Nortel-Magellan-Passport-AtmCoreMIB", "atmIfVptIndex"), (0, "Nortel-Magellan-Passport-AtmCoreMIB", "atmIfVptTxTdpIndex"))
if mibBuilder.loadTexts: atmIfVptTxTdpEntry.setStatus('obsolete')
atmIfVptTxTdpIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 9, 294, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 5)))
if mibBuilder.loadTexts: atmIfVptTxTdpIndex.setStatus('obsolete')
atmIfVptTxTdpValue = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 9, 294, 1, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmIfVptTxTdpValue.setStatus('obsolete')
atmIfVptRxTdpTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 9, 295), )
if mibBuilder.loadTexts: atmIfVptRxTdpTable.setStatus('obsolete')
atmIfVptRxTdpEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 9, 295, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-AtmCoreMIB", "atmIfIndex"), (0, "Nortel-Magellan-Passport-AtmCoreMIB", "atmIfVptIndex"), (0, "Nortel-Magellan-Passport-AtmCoreMIB", "atmIfVptRxTdpIndex"))
if mibBuilder.loadTexts: atmIfVptRxTdpEntry.setStatus('obsolete')
atmIfVptRxTdpIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 9, 295, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4)))
if mibBuilder.loadTexts: atmIfVptRxTdpIndex.setStatus('obsolete')
atmIfVptRxTdpValue = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 9, 295, 1, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmIfVptRxTdpValue.setStatus('obsolete')
atmIfVptTxQThreshTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 9, 352), )
if mibBuilder.loadTexts: atmIfVptTxQThreshTable.setStatus('obsolete')
atmIfVptTxQThreshEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 9, 352, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-AtmCoreMIB", "atmIfIndex"), (0, "Nortel-Magellan-Passport-AtmCoreMIB", "atmIfVptIndex"), (0, "Nortel-Magellan-Passport-AtmCoreMIB", "atmIfVptTxQThreshIndex"))
if mibBuilder.loadTexts: atmIfVptTxQThreshEntry.setStatus('obsolete')
atmIfVptTxQThreshIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 9, 352, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 3)))
if mibBuilder.loadTexts: atmIfVptTxQThreshIndex.setStatus('obsolete')
atmIfVptTxQThreshValue = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 9, 352, 1, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 30720))).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmIfVptTxQThreshValue.setStatus('obsolete')
atmIfVptFqpTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 9, 357), )
if mibBuilder.loadTexts: atmIfVptFqpTable.setStatus('obsolete')
atmIfVptFqpEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 9, 357, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-AtmCoreMIB", "atmIfIndex"), (0, "Nortel-Magellan-Passport-AtmCoreMIB", "atmIfVptIndex"), (0, "Nortel-Magellan-Passport-AtmCoreMIB", "atmIfVptFqpIndex"))
if mibBuilder.loadTexts: atmIfVptFqpEntry.setStatus('obsolete')
atmIfVptFqpIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 9, 357, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("cdv", 0), ("ctd", 1), ("clr", 2))))
if mibBuilder.loadTexts: atmIfVptFqpIndex.setStatus('obsolete')
atmIfVptFqpValue = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 9, 357, 1, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmIfVptFqpValue.setStatus('obsolete')
atmIfVptBqpTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 9, 358), )
if mibBuilder.loadTexts: atmIfVptBqpTable.setStatus('obsolete')
atmIfVptBqpEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 9, 358, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-AtmCoreMIB", "atmIfIndex"), (0, "Nortel-Magellan-Passport-AtmCoreMIB", "atmIfVptIndex"), (0, "Nortel-Magellan-Passport-AtmCoreMIB", "atmIfVptBqpIndex"))
if mibBuilder.loadTexts: atmIfVptBqpEntry.setStatus('obsolete')
atmIfVptBqpIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 9, 358, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("cdv", 0), ("ctd", 1), ("clr", 2))))
if mibBuilder.loadTexts: atmIfVptBqpIndex.setStatus('obsolete')
atmIfVptBqpValue = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 9, 358, 1, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmIfVptBqpValue.setStatus('obsolete')
atmIfVptVpd = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 9, 2))
atmIfVptVpdRowStatusTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 9, 2, 1), )
if mibBuilder.loadTexts: atmIfVptVpdRowStatusTable.setStatus('mandatory')
atmIfVptVpdRowStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 9, 2, 1, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-AtmCoreMIB", "atmIfIndex"), (0, "Nortel-Magellan-Passport-AtmCoreMIB", "atmIfVptIndex"), (0, "Nortel-Magellan-Passport-AtmCoreMIB", "atmIfVptVpdIndex"))
if mibBuilder.loadTexts: atmIfVptVpdRowStatusEntry.setStatus('mandatory')
atmIfVptVpdRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 9, 2, 1, 1, 1), RowStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmIfVptVpdRowStatus.setStatus('mandatory')
atmIfVptVpdComponentName = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 9, 2, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmIfVptVpdComponentName.setStatus('mandatory')
atmIfVptVpdStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 9, 2, 1, 1, 4), StorageType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmIfVptVpdStorageType.setStatus('mandatory')
atmIfVptVpdIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 9, 2, 1, 1, 10), NonReplicated())
if mibBuilder.loadTexts: atmIfVptVpdIndex.setStatus('mandatory')
atmIfVptVpdLbkTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 9, 2, 100), )
if mibBuilder.loadTexts: atmIfVptVpdLbkTable.setStatus('mandatory')
atmIfVptVpdLbkEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 9, 2, 100, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-AtmCoreMIB", "atmIfIndex"), (0, "Nortel-Magellan-Passport-AtmCoreMIB", "atmIfVptIndex"), (0, "Nortel-Magellan-Passport-AtmCoreMIB", "atmIfVptVpdIndex"))
if mibBuilder.loadTexts: atmIfVptVpdLbkEntry.setStatus('mandatory')
atmIfVptVpdSegLinkSideLoopback = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 9, 2, 100, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("on", 0), ("off", 1), ("sameAsInterface", 2))).clone('sameAsInterface')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmIfVptVpdSegLinkSideLoopback.setStatus('mandatory')
atmIfVptVpdSegSwitchSideLoopback = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 9, 2, 100, 1, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("on", 0), ("off", 1), ("sameAsInterface", 2))).clone('sameAsInterface')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmIfVptVpdSegSwitchSideLoopback.setStatus('mandatory')
atmIfVptVpdEndToEndLoopback = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 9, 2, 100, 1, 30), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("on", 0), ("off", 1), ("sameAsInterface", 2))).clone('sameAsInterface')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmIfVptVpdEndToEndLoopback.setStatus('mandatory')
atmIfVptVpdLoopbackMonitoring = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 9, 2, 100, 1, 1000), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("on", 0), ("off", 1), ("sameAsInterface", 2))).clone('sameAsInterface')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmIfVptVpdLoopbackMonitoring.setStatus('mandatory')
atmIfVptVpdTrafficTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 9, 2, 110), )
if mibBuilder.loadTexts: atmIfVptVpdTrafficTable.setStatus('mandatory')
atmIfVptVpdTrafficEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 9, 2, 110, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-AtmCoreMIB", "atmIfIndex"), (0, "Nortel-Magellan-Passport-AtmCoreMIB", "atmIfVptIndex"), (0, "Nortel-Magellan-Passport-AtmCoreMIB", "atmIfVptVpdIndex"))
if mibBuilder.loadTexts: atmIfVptVpdTrafficEntry.setStatus('mandatory')
atmIfVptVpdTxTrafficDescType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 9, 2, 110, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9))).clone(namedValues=NamedValues(("n1", 1), ("n2", 2), ("n3", 3), ("n4", 4), ("n5", 5), ("n6", 6), ("n7", 7), ("n8", 8), ("n9", 9))).clone('n1')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmIfVptVpdTxTrafficDescType.setStatus('obsolete')
atmIfVptVpdTxQosClass = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 9, 2, 110, 1, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4))).clone(namedValues=NamedValues(("unspecified", 0), ("constantBitRate", 1), ("variableBitRate", 2), ("connectionOriented", 3), ("connectionless", 4))).clone('connectionOriented')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmIfVptVpdTxQosClass.setStatus('obsolete')
atmIfVptVpdFwdQosClass = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 9, 2, 110, 1, 21), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4))).clone(namedValues=NamedValues(("n0", 0), ("n1", 1), ("n2", 2), ("n3", 3), ("n4", 4))).clone('n0')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmIfVptVpdFwdQosClass.setStatus('obsolete')
atmIfVptVpdHoldingPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 9, 2, 110, 1, 25), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4))).clone(namedValues=NamedValues(("n0", 0), ("n1", 1), ("n2", 2), ("n3", 3), ("n4", 4))).clone('n2')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmIfVptVpdHoldingPriority.setStatus('obsolete')
atmIfVptVpdRxTrafficDescType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 9, 2, 110, 1, 30), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 15))).clone(namedValues=NamedValues(("n1", 1), ("n2", 2), ("n3", 3), ("n4", 4), ("n5", 5), ("n6", 6), ("n7", 7), ("n8", 8), ("sameAsTx", 15))).clone('sameAsTx')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmIfVptVpdRxTrafficDescType.setStatus('obsolete')
atmIfVptVpdRxQosClass = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 9, 2, 110, 1, 40), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 15))).clone(namedValues=NamedValues(("unspecified", 0), ("constantBitRate", 1), ("variableBitRate", 2), ("connectionOriented", 3), ("connectionless", 4), ("sameAsTx", 15))).clone('sameAsTx')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmIfVptVpdRxQosClass.setStatus('obsolete')
atmIfVptVpdBwdQosClass = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 9, 2, 110, 1, 41), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 15))).clone(namedValues=NamedValues(("n0", 0), ("n1", 1), ("n2", 2), ("n3", 3), ("n4", 4), ("sameAsFwd", 15))).clone('sameAsFwd')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmIfVptVpdBwdQosClass.setStatus('obsolete')
atmIfVptVpdAtmServiceCategory = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 9, 2, 110, 1, 42), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 15))).clone(namedValues=NamedValues(("unspecifiedBitRate", 0), ("constantBitRate", 1), ("rtVariableBitRate", 2), ("nrtVariableBitRate", 3), ("derivedFromBBC", 15))).clone('unspecifiedBitRate')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmIfVptVpdAtmServiceCategory.setStatus('obsolete')
atmIfVptVpdTrafficShaping = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 9, 2, 110, 1, 50), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("sameAsInterface", 2))).clone('sameAsInterface')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmIfVptVpdTrafficShaping.setStatus('obsolete')
atmIfVptVpdUnshapedTransmitQueueing = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 9, 2, 110, 1, 60), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 3))).clone(namedValues=NamedValues(("common", 1), ("sameAsInterface", 3))).clone('sameAsInterface')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmIfVptVpdUnshapedTransmitQueueing.setStatus('obsolete')
atmIfVptVpdUsageParameterControl = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 9, 2, 110, 1, 70), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("sameAsInterface", 2))).clone('sameAsInterface')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmIfVptVpdUsageParameterControl.setStatus('obsolete')
atmIfVptVpdBearerClassBbc = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 9, 2, 110, 1, 71), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 3, 16, 24, 31))).clone(namedValues=NamedValues(("a", 1), ("c", 3), ("x", 16), ("vp", 24), ("derivedFromServiceCategory", 31))).clone('derivedFromServiceCategory')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmIfVptVpdBearerClassBbc.setStatus('obsolete')
atmIfVptVpdTransferCapabilityBbc = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 9, 2, 110, 1, 72), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 5, 8, 9, 10, 30, 31))).clone(namedValues=NamedValues(("n0", 0), ("n1", 1), ("n2", 2), ("n5", 5), ("n8", 8), ("n9", 9), ("n10", 10), ("notApplicable", 30), ("derivedFromServiceCategory", 31))).clone('derivedFromServiceCategory')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmIfVptVpdTransferCapabilityBbc.setStatus('obsolete')
atmIfVptVpdClippingBbc = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 9, 2, 110, 1, 74), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("no", 0), ("yes", 1))).clone('no')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmIfVptVpdClippingBbc.setStatus('obsolete')
atmIfVptVpdBestEffort = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 9, 2, 110, 1, 75), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 15))).clone(namedValues=NamedValues(("indicated", 0), ("notIndicated", 1), ("derivedFromServiceCategory", 15))).clone('derivedFromServiceCategory')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmIfVptVpdBestEffort.setStatus('obsolete')
atmIfVptVpdFwdFrameDiscard = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 9, 2, 110, 1, 76), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("notIndicated", 0), ("indicated", 1))).clone('notIndicated')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmIfVptVpdFwdFrameDiscard.setStatus('obsolete')
atmIfVptVpdBwdFrameDiscard = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 9, 2, 110, 1, 77), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("notIndicated", 0), ("indicated", 1))).clone('notIndicated')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmIfVptVpdBwdFrameDiscard.setStatus('obsolete')
atmIfVptVpdAcctTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 9, 2, 111), )
if mibBuilder.loadTexts: atmIfVptVpdAcctTable.setStatus('mandatory')
atmIfVptVpdAcctEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 9, 2, 111, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-AtmCoreMIB", "atmIfIndex"), (0, "Nortel-Magellan-Passport-AtmCoreMIB", "atmIfVptIndex"), (0, "Nortel-Magellan-Passport-AtmCoreMIB", "atmIfVptVpdIndex"))
if mibBuilder.loadTexts: atmIfVptVpdAcctEntry.setStatus('mandatory')
atmIfVptVpdCorrelationTag = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 9, 2, 111, 1, 10), AsciiString().subtype(subtypeSpec=ValueSizeConstraint(0, 32)).clone(hexValue="")).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmIfVptVpdCorrelationTag.setStatus('mandatory')
atmIfVptVpdProvTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 9, 2, 112), )
if mibBuilder.loadTexts: atmIfVptVpdProvTable.setStatus('mandatory')
atmIfVptVpdProvEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 9, 2, 112, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-AtmCoreMIB", "atmIfIndex"), (0, "Nortel-Magellan-Passport-AtmCoreMIB", "atmIfVptIndex"), (0, "Nortel-Magellan-Passport-AtmCoreMIB", "atmIfVptVpdIndex"))
if mibBuilder.loadTexts: atmIfVptVpdProvEntry.setStatus('mandatory')
atmIfVptVpdVptType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 9, 2, 112, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("basic", 0), ("standard", 1), ("virtualLink", 2))).clone('basic')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmIfVptVpdVptType.setStatus('mandatory')
atmIfVptVpdTxTdpTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 9, 2, 297), )
if mibBuilder.loadTexts: atmIfVptVpdTxTdpTable.setStatus('obsolete')
atmIfVptVpdTxTdpEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 9, 2, 297, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-AtmCoreMIB", "atmIfIndex"), (0, "Nortel-Magellan-Passport-AtmCoreMIB", "atmIfVptIndex"), (0, "Nortel-Magellan-Passport-AtmCoreMIB", "atmIfVptVpdIndex"), (0, "Nortel-Magellan-Passport-AtmCoreMIB", "atmIfVptVpdTxTdpIndex"))
if mibBuilder.loadTexts: atmIfVptVpdTxTdpEntry.setStatus('obsolete')
atmIfVptVpdTxTdpIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 9, 2, 297, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 5)))
if mibBuilder.loadTexts: atmIfVptVpdTxTdpIndex.setStatus('obsolete')
atmIfVptVpdTxTdpValue = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 9, 2, 297, 1, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmIfVptVpdTxTdpValue.setStatus('obsolete')
atmIfVptVpdRxTdpTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 9, 2, 298), )
if mibBuilder.loadTexts: atmIfVptVpdRxTdpTable.setStatus('obsolete')
atmIfVptVpdRxTdpEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 9, 2, 298, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-AtmCoreMIB", "atmIfIndex"), (0, "Nortel-Magellan-Passport-AtmCoreMIB", "atmIfVptIndex"), (0, "Nortel-Magellan-Passport-AtmCoreMIB", "atmIfVptVpdIndex"), (0, "Nortel-Magellan-Passport-AtmCoreMIB", "atmIfVptVpdRxTdpIndex"))
if mibBuilder.loadTexts: atmIfVptVpdRxTdpEntry.setStatus('obsolete')
atmIfVptVpdRxTdpIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 9, 2, 298, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 5)))
if mibBuilder.loadTexts: atmIfVptVpdRxTdpIndex.setStatus('obsolete')
atmIfVptVpdRxTdpValue = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 9, 2, 298, 1, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmIfVptVpdRxTdpValue.setStatus('obsolete')
atmIfVptVpdFqpTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 9, 2, 359), )
if mibBuilder.loadTexts: atmIfVptVpdFqpTable.setStatus('obsolete')
atmIfVptVpdFqpEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 9, 2, 359, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-AtmCoreMIB", "atmIfIndex"), (0, "Nortel-Magellan-Passport-AtmCoreMIB", "atmIfVptIndex"), (0, "Nortel-Magellan-Passport-AtmCoreMIB", "atmIfVptVpdIndex"), (0, "Nortel-Magellan-Passport-AtmCoreMIB", "atmIfVptVpdFqpIndex"))
if mibBuilder.loadTexts: atmIfVptVpdFqpEntry.setStatus('obsolete')
atmIfVptVpdFqpIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 9, 2, 359, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("cdv", 0), ("ctd", 1), ("clr", 2))))
if mibBuilder.loadTexts: atmIfVptVpdFqpIndex.setStatus('obsolete')
atmIfVptVpdFqpValue = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 9, 2, 359, 1, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmIfVptVpdFqpValue.setStatus('obsolete')
atmIfVptVpdBqpTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 9, 2, 360), )
if mibBuilder.loadTexts: atmIfVptVpdBqpTable.setStatus('obsolete')
atmIfVptVpdBqpEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 9, 2, 360, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-AtmCoreMIB", "atmIfIndex"), (0, "Nortel-Magellan-Passport-AtmCoreMIB", "atmIfVptIndex"), (0, "Nortel-Magellan-Passport-AtmCoreMIB", "atmIfVptVpdIndex"), (0, "Nortel-Magellan-Passport-AtmCoreMIB", "atmIfVptVpdBqpIndex"))
if mibBuilder.loadTexts: atmIfVptVpdBqpEntry.setStatus('obsolete')
atmIfVptVpdBqpIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 9, 2, 360, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("cdv", 0), ("ctd", 1), ("clr", 2))))
if mibBuilder.loadTexts: atmIfVptVpdBqpIndex.setStatus('obsolete')
atmIfVptVpdBqpValue = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 9, 2, 360, 1, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmIfVptVpdBqpValue.setStatus('obsolete')
atmIfVptVpdTm = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 9, 2, 2))
atmIfVptVpdTmRowStatusTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 9, 2, 2, 1), )
if mibBuilder.loadTexts: atmIfVptVpdTmRowStatusTable.setStatus('mandatory')
atmIfVptVpdTmRowStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 9, 2, 2, 1, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-AtmCoreMIB", "atmIfIndex"), (0, "Nortel-Magellan-Passport-AtmCoreMIB", "atmIfVptIndex"), (0, "Nortel-Magellan-Passport-AtmCoreMIB", "atmIfVptVpdIndex"), (0, "Nortel-Magellan-Passport-AtmCoreMIB", "atmIfVptVpdTmIndex"))
if mibBuilder.loadTexts: atmIfVptVpdTmRowStatusEntry.setStatus('mandatory')
atmIfVptVpdTmRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 9, 2, 2, 1, 1, 1), RowStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmIfVptVpdTmRowStatus.setStatus('mandatory')
atmIfVptVpdTmComponentName = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 9, 2, 2, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmIfVptVpdTmComponentName.setStatus('mandatory')
atmIfVptVpdTmStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 9, 2, 2, 1, 1, 4), StorageType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmIfVptVpdTmStorageType.setStatus('mandatory')
atmIfVptVpdTmIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 9, 2, 2, 1, 1, 10), NonReplicated())
if mibBuilder.loadTexts: atmIfVptVpdTmIndex.setStatus('mandatory')
atmIfVptVpdTmProvTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 9, 2, 2, 100), )
if mibBuilder.loadTexts: atmIfVptVpdTmProvTable.setStatus('mandatory')
atmIfVptVpdTmProvEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 9, 2, 2, 100, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-AtmCoreMIB", "atmIfIndex"), (0, "Nortel-Magellan-Passport-AtmCoreMIB", "atmIfVptIndex"), (0, "Nortel-Magellan-Passport-AtmCoreMIB", "atmIfVptVpdIndex"), (0, "Nortel-Magellan-Passport-AtmCoreMIB", "atmIfVptVpdTmIndex"))
if mibBuilder.loadTexts: atmIfVptVpdTmProvEntry.setStatus('mandatory')
atmIfVptVpdTmTxTrafficDescType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 9, 2, 2, 100, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9))).clone(namedValues=NamedValues(("n1", 1), ("n2", 2), ("n3", 3), ("n4", 4), ("n5", 5), ("n6", 6), ("n7", 7), ("n8", 8), ("n9", 9))).clone('n1')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmIfVptVpdTmTxTrafficDescType.setStatus('mandatory')
atmIfVptVpdTmFwdQosClass = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 9, 2, 2, 100, 1, 21), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4))).clone(namedValues=NamedValues(("n0", 0), ("n1", 1), ("n2", 2), ("n3", 3), ("n4", 4))).clone('n0')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmIfVptVpdTmFwdQosClass.setStatus('mandatory')
atmIfVptVpdTmTxQueueLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 9, 2, 2, 100, 1, 22), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(5, 63488), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmIfVptVpdTmTxQueueLimit.setStatus('mandatory')
atmIfVptVpdTmHoldingPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 9, 2, 2, 100, 1, 25), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4))).clone(namedValues=NamedValues(("n0", 0), ("n1", 1), ("n2", 2), ("n3", 3), ("n4", 4))).clone('n2')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmIfVptVpdTmHoldingPriority.setStatus('mandatory')
atmIfVptVpdTmRxTrafficDescType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 9, 2, 2, 100, 1, 30), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 15))).clone(namedValues=NamedValues(("n1", 1), ("n2", 2), ("n3", 3), ("n4", 4), ("n5", 5), ("n6", 6), ("n7", 7), ("n8", 8), ("n9", 9), ("sameAsTx", 15))).clone('sameAsTx')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmIfVptVpdTmRxTrafficDescType.setStatus('mandatory')
atmIfVptVpdTmBwdQosClass = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 9, 2, 2, 100, 1, 41), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 15))).clone(namedValues=NamedValues(("n0", 0), ("n1", 1), ("n2", 2), ("n3", 3), ("n4", 4), ("sameAsFwd", 15))).clone('sameAsFwd')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmIfVptVpdTmBwdQosClass.setStatus('mandatory')
atmIfVptVpdTmAtmServiceCategory = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 9, 2, 2, 100, 1, 42), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 15))).clone(namedValues=NamedValues(("unspecifiedBitRate", 0), ("constantBitRate", 1), ("rtVariableBitRate", 2), ("nrtVariableBitRate", 3), ("availableBitRate", 4), ("derivedFromBBC", 15))).clone('unspecifiedBitRate')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmIfVptVpdTmAtmServiceCategory.setStatus('mandatory')
atmIfVptVpdTmTrafficShaping = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 9, 2, 2, 100, 1, 50), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("sameAsCa", 2))).clone('sameAsCa')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmIfVptVpdTmTrafficShaping.setStatus('mandatory')
atmIfVptVpdTmUnshapedTransmitQueueing = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 9, 2, 2, 100, 1, 60), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 3))).clone(namedValues=NamedValues(("common", 1), ("sameAsCa", 3))).clone('sameAsCa')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmIfVptVpdTmUnshapedTransmitQueueing.setStatus('mandatory')
atmIfVptVpdTmWeight = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 9, 2, 2, 100, 1, 61), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(1, 4095), ValueRangeConstraint(65535, 65535), )).clone(65535)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmIfVptVpdTmWeight.setStatus('mandatory')
atmIfVptVpdTmForceTagging = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 9, 2, 2, 100, 1, 62), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("enabled", 0), ("disabled", 1), ("sameAsCa", 2))).clone('sameAsCa')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmIfVptVpdTmForceTagging.setStatus('mandatory')
atmIfVptVpdTmUsageParameterControl = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 9, 2, 2, 100, 1, 70), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 4))).clone(namedValues=NamedValues(("enforced", 0), ("disabled", 1), ("sameAsCa", 2), ("monitored", 4))).clone('sameAsCa')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmIfVptVpdTmUsageParameterControl.setStatus('mandatory')
atmIfVptVpdTmBearerClassBbc = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 9, 2, 2, 100, 1, 71), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 3, 16, 24, 31))).clone(namedValues=NamedValues(("a", 1), ("c", 3), ("x", 16), ("vp", 24), ("derivedFromServiceCategory", 31))).clone('derivedFromServiceCategory')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmIfVptVpdTmBearerClassBbc.setStatus('mandatory')
atmIfVptVpdTmTransferCapabilityBbc = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 9, 2, 2, 100, 1, 72), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 5, 8, 9, 10, 30, 31))).clone(namedValues=NamedValues(("n0", 0), ("n1", 1), ("n2", 2), ("n5", 5), ("n8", 8), ("n9", 9), ("n10", 10), ("notApplicable", 30), ("derivedFromServiceCategory", 31))).clone('derivedFromServiceCategory')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmIfVptVpdTmTransferCapabilityBbc.setStatus('mandatory')
atmIfVptVpdTmTxWredThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 9, 2, 2, 100, 1, 73), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(25, 25), ValueRangeConstraint(50, 50), ValueRangeConstraint(75, 75), )).clone(25)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmIfVptVpdTmTxWredThreshold.setStatus('mandatory')
atmIfVptVpdTmClippingBbc = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 9, 2, 2, 100, 1, 74), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("no", 0), ("yes", 1))).clone('no')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmIfVptVpdTmClippingBbc.setStatus('mandatory')
atmIfVptVpdTmBestEffort = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 9, 2, 2, 100, 1, 75), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 15))).clone(namedValues=NamedValues(("indicated", 0), ("notIndicated", 1), ("derivedFromServiceCategory", 15))).clone('derivedFromServiceCategory')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmIfVptVpdTmBestEffort.setStatus('mandatory')
atmIfVptVpdTmTxPacketWiseDiscard = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 9, 2, 2, 100, 1, 76), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmIfVptVpdTmTxPacketWiseDiscard.setStatus('mandatory')
atmIfVptVpdTmTxWredMode = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 9, 2, 2, 100, 1, 77), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1), ("perFlow", 2))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmIfVptVpdTmTxWredMode.setStatus('mandatory')
atmIfVptVpdTmRxPacketWiseDiscard = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 9, 2, 2, 100, 1, 78), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmIfVptVpdTmRxPacketWiseDiscard.setStatus('mandatory')
atmIfVptVpdTmAbrConnectionType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 9, 2, 2, 100, 1, 90), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 3, 4, 5, 14))).clone(namedValues=NamedValues(("abrSwitch", 0), ("virtualSourceDest", 3), ("sourceDest", 4), ("nonAbrInterworking", 5), ("sameAsCa", 14))).clone('sameAsCa')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmIfVptVpdTmAbrConnectionType.setStatus('mandatory')
atmIfVptVpdTmTxTdpTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 9, 2, 2, 456), )
if mibBuilder.loadTexts: atmIfVptVpdTmTxTdpTable.setStatus('mandatory')
atmIfVptVpdTmTxTdpEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 9, 2, 2, 456, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-AtmCoreMIB", "atmIfIndex"), (0, "Nortel-Magellan-Passport-AtmCoreMIB", "atmIfVptIndex"), (0, "Nortel-Magellan-Passport-AtmCoreMIB", "atmIfVptVpdIndex"), (0, "Nortel-Magellan-Passport-AtmCoreMIB", "atmIfVptVpdTmIndex"), (0, "Nortel-Magellan-Passport-AtmCoreMIB", "atmIfVptVpdTmTxTdpIndex"))
if mibBuilder.loadTexts: atmIfVptVpdTmTxTdpEntry.setStatus('mandatory')
atmIfVptVpdTmTxTdpIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 9, 2, 2, 456, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 5)))
if mibBuilder.loadTexts: atmIfVptVpdTmTxTdpIndex.setStatus('mandatory')
atmIfVptVpdTmTxTdpValue = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 9, 2, 2, 456, 1, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmIfVptVpdTmTxTdpValue.setStatus('mandatory')
atmIfVptVpdTmRxTdpTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 9, 2, 2, 457), )
if mibBuilder.loadTexts: atmIfVptVpdTmRxTdpTable.setStatus('mandatory')
atmIfVptVpdTmRxTdpEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 9, 2, 2, 457, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-AtmCoreMIB", "atmIfIndex"), (0, "Nortel-Magellan-Passport-AtmCoreMIB", "atmIfVptIndex"), (0, "Nortel-Magellan-Passport-AtmCoreMIB", "atmIfVptVpdIndex"), (0, "Nortel-Magellan-Passport-AtmCoreMIB", "atmIfVptVpdTmIndex"), (0, "Nortel-Magellan-Passport-AtmCoreMIB", "atmIfVptVpdTmRxTdpIndex"))
if mibBuilder.loadTexts: atmIfVptVpdTmRxTdpEntry.setStatus('mandatory')
atmIfVptVpdTmRxTdpIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 9, 2, 2, 457, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 5)))
if mibBuilder.loadTexts: atmIfVptVpdTmRxTdpIndex.setStatus('mandatory')
atmIfVptVpdTmRxTdpValue = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 9, 2, 2, 457, 1, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmIfVptVpdTmRxTdpValue.setStatus('mandatory')
atmIfVptVpdTmFqpTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 9, 2, 2, 458), )
if mibBuilder.loadTexts: atmIfVptVpdTmFqpTable.setStatus('mandatory')
atmIfVptVpdTmFqpEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 9, 2, 2, 458, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-AtmCoreMIB", "atmIfIndex"), (0, "Nortel-Magellan-Passport-AtmCoreMIB", "atmIfVptIndex"), (0, "Nortel-Magellan-Passport-AtmCoreMIB", "atmIfVptVpdIndex"), (0, "Nortel-Magellan-Passport-AtmCoreMIB", "atmIfVptVpdTmIndex"), (0, "Nortel-Magellan-Passport-AtmCoreMIB", "atmIfVptVpdTmFqpIndex"))
if mibBuilder.loadTexts: atmIfVptVpdTmFqpEntry.setStatus('mandatory')
atmIfVptVpdTmFqpIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 9, 2, 2, 458, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("cdv", 0), ("ctd", 1), ("clr", 2))))
if mibBuilder.loadTexts: atmIfVptVpdTmFqpIndex.setStatus('mandatory')
atmIfVptVpdTmFqpValue = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 9, 2, 2, 458, 1, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 16777215))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmIfVptVpdTmFqpValue.setStatus('mandatory')
atmIfVptVpdTmBqpTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 9, 2, 2, 459), )
if mibBuilder.loadTexts: atmIfVptVpdTmBqpTable.setStatus('mandatory')
atmIfVptVpdTmBqpEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 9, 2, 2, 459, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-AtmCoreMIB", "atmIfIndex"), (0, "Nortel-Magellan-Passport-AtmCoreMIB", "atmIfVptIndex"), (0, "Nortel-Magellan-Passport-AtmCoreMIB", "atmIfVptVpdIndex"), (0, "Nortel-Magellan-Passport-AtmCoreMIB", "atmIfVptVpdTmIndex"), (0, "Nortel-Magellan-Passport-AtmCoreMIB", "atmIfVptVpdTmBqpIndex"))
if mibBuilder.loadTexts: atmIfVptVpdTmBqpEntry.setStatus('mandatory')
atmIfVptVpdTmBqpIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 9, 2, 2, 459, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 2))).clone(namedValues=NamedValues(("cdv", 0), ("clr", 2))))
if mibBuilder.loadTexts: atmIfVptVpdTmBqpIndex.setStatus('mandatory')
atmIfVptVpdTmBqpValue = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 9, 2, 2, 459, 1, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 16777215))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmIfVptVpdTmBqpValue.setStatus('mandatory')
atmIfVptVpdTmAbr = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 9, 2, 2, 2))
atmIfVptVpdTmAbrRowStatusTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 9, 2, 2, 2, 1), )
if mibBuilder.loadTexts: atmIfVptVpdTmAbrRowStatusTable.setStatus('mandatory')
atmIfVptVpdTmAbrRowStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 9, 2, 2, 2, 1, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-AtmCoreMIB", "atmIfIndex"), (0, "Nortel-Magellan-Passport-AtmCoreMIB", "atmIfVptIndex"), (0, "Nortel-Magellan-Passport-AtmCoreMIB", "atmIfVptVpdIndex"), (0, "Nortel-Magellan-Passport-AtmCoreMIB", "atmIfVptVpdTmIndex"), (0, "Nortel-Magellan-Passport-AtmCoreMIB", "atmIfVptVpdTmAbrIndex"))
if mibBuilder.loadTexts: atmIfVptVpdTmAbrRowStatusEntry.setStatus('mandatory')
atmIfVptVpdTmAbrRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 9, 2, 2, 2, 1, 1, 1), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmIfVptVpdTmAbrRowStatus.setStatus('mandatory')
atmIfVptVpdTmAbrComponentName = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 9, 2, 2, 2, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmIfVptVpdTmAbrComponentName.setStatus('mandatory')
atmIfVptVpdTmAbrStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 9, 2, 2, 2, 1, 1, 4), StorageType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmIfVptVpdTmAbrStorageType.setStatus('mandatory')
atmIfVptVpdTmAbrIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 9, 2, 2, 2, 1, 1, 10), NonReplicated())
if mibBuilder.loadTexts: atmIfVptVpdTmAbrIndex.setStatus('mandatory')
atmIfVptVpdTmAbrProvTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 9, 2, 2, 2, 110), )
if mibBuilder.loadTexts: atmIfVptVpdTmAbrProvTable.setStatus('mandatory')
atmIfVptVpdTmAbrProvEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 9, 2, 2, 2, 110, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-AtmCoreMIB", "atmIfIndex"), (0, "Nortel-Magellan-Passport-AtmCoreMIB", "atmIfVptIndex"), (0, "Nortel-Magellan-Passport-AtmCoreMIB", "atmIfVptVpdIndex"), (0, "Nortel-Magellan-Passport-AtmCoreMIB", "atmIfVptVpdTmIndex"), (0, "Nortel-Magellan-Passport-AtmCoreMIB", "atmIfVptVpdTmAbrIndex"))
if mibBuilder.loadTexts: atmIfVptVpdTmAbrProvEntry.setStatus('mandatory')
atmIfVptVpdTmAbrInitialCellRate = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 9, 2, 2, 2, 110, 1, 10), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 16777215), ValueRangeConstraint(16777216, 16777216), ValueRangeConstraint(16777217, 16777217), ValueRangeConstraint(16777218, 16777218), )).clone(16777216)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmIfVptVpdTmAbrInitialCellRate.setStatus('mandatory')
atmIfVptVpdTmAbrTransientBufferExposure = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 9, 2, 2, 2, 110, 1, 11), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 16777215)).clone(16777215)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmIfVptVpdTmAbrTransientBufferExposure.setStatus('mandatory')
atmIfVptVpdTmAbrFixedRoundTripTime = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 9, 2, 2, 2, 110, 1, 12), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 16700000)).clone(5000000)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmIfVptVpdTmAbrFixedRoundTripTime.setStatus('mandatory')
atmIfVptVpdTmAbrRateDecreaseFactor = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 9, 2, 2, 2, 110, 1, 13), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 15), ValueRangeConstraint(16777216, 16777216), )).clone(16777216)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmIfVptVpdTmAbrRateDecreaseFactor.setStatus('mandatory')
atmIfVptVpdTmAbrRateIncreaseFactor = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 9, 2, 2, 2, 110, 1, 14), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 15), ValueRangeConstraint(16777216, 16777216), )).clone(16777216)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmIfVptVpdTmAbrRateIncreaseFactor.setStatus('mandatory')
atmIfVptVpdTmAbrMaxCellPerRmCell = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 9, 2, 2, 2, 110, 1, 15), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(2, 2), ValueRangeConstraint(4, 4), ValueRangeConstraint(8, 8), ValueRangeConstraint(16, 16), ValueRangeConstraint(32, 32), ValueRangeConstraint(64, 64), ValueRangeConstraint(128, 128), ValueRangeConstraint(256, 256), ValueRangeConstraint(16777216, 16777216), )).clone(16777216)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmIfVptVpdTmAbrMaxCellPerRmCell.setStatus('mandatory')
atmIfVptVpdTmAbrMaxTimeBetweenRmCells = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 9, 2, 2, 2, 110, 1, 16), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(781, 781), ValueRangeConstraint(1563, 1563), ValueRangeConstraint(3125, 3125), ValueRangeConstraint(6250, 6250), ValueRangeConstraint(12500, 12500), ValueRangeConstraint(25000, 25000), ValueRangeConstraint(50000, 50000), ValueRangeConstraint(100000, 100000), ValueRangeConstraint(16777216, 16777216), )).clone(16777216)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmIfVptVpdTmAbrMaxTimeBetweenRmCells.setStatus('mandatory')
atmIfVptVpdTmAbrCutoffDecreaseFactor = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 9, 2, 2, 2, 110, 1, 17), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(1, 1), ValueRangeConstraint(2, 2), ValueRangeConstraint(4, 4), ValueRangeConstraint(8, 8), ValueRangeConstraint(16, 16), ValueRangeConstraint(32, 32), ValueRangeConstraint(64, 64), ValueRangeConstraint(16777216, 16777216), )).clone(16777216)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmIfVptVpdTmAbrCutoffDecreaseFactor.setStatus('mandatory')
atmIfVptVpdTmAbrAcrDecreaseTimeFactor = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 9, 2, 2, 2, 110, 1, 18), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 1023), ValueRangeConstraint(16777216, 16777216), )).clone(16777216)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmIfVptVpdTmAbrAcrDecreaseTimeFactor.setStatus('mandatory')
atmIfVptVpdTmAbrDgcraMaximumDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 9, 2, 2, 2, 110, 1, 19), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(1, 16700000), ValueRangeConstraint(16777216, 16777216), )).clone(16777216)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmIfVptVpdTmAbrDgcraMaximumDelay.setStatus('mandatory')
atmIfVptVpdTmAbrDgcraMinimumDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 9, 2, 2, 2, 110, 1, 20), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(1, 16700000), ValueRangeConstraint(16777216, 16777216), )).clone(16777216)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmIfVptVpdTmAbrDgcraMinimumDelay.setStatus('mandatory')
atmIfVptVpdTmAbrFarEndAcrDecreaseTimeFactor = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 9, 2, 2, 2, 110, 1, 21), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 1023), ValueRangeConstraint(1024, 1024), )).clone(1024)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmIfVptVpdTmAbrFarEndAcrDecreaseTimeFactor.setStatus('mandatory')
atmIfVptVpdTmAbrFarEndInitialCellRate = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 9, 2, 2, 2, 110, 1, 22), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 16777215), ValueRangeConstraint(16777219, 16777219), )).clone(16777219)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmIfVptVpdTmAbrFarEndInitialCellRate.setStatus('mandatory')
atmIfVptCA = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 9, 5))
atmIfVptCARowStatusTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 9, 5, 1), )
if mibBuilder.loadTexts: atmIfVptCARowStatusTable.setStatus('mandatory')
atmIfVptCARowStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 9, 5, 1, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-AtmCoreMIB", "atmIfIndex"), (0, "Nortel-Magellan-Passport-AtmCoreMIB", "atmIfVptIndex"), (0, "Nortel-Magellan-Passport-AtmCoreMIB", "atmIfVptCAIndex"))
if mibBuilder.loadTexts: atmIfVptCARowStatusEntry.setStatus('mandatory')
atmIfVptCARowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 9, 5, 1, 1, 1), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmIfVptCARowStatus.setStatus('mandatory')
atmIfVptCAComponentName = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 9, 5, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmIfVptCAComponentName.setStatus('mandatory')
atmIfVptCAStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 9, 5, 1, 1, 4), StorageType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmIfVptCAStorageType.setStatus('mandatory')
atmIfVptCAIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 9, 5, 1, 1, 10), NonReplicated())
if mibBuilder.loadTexts: atmIfVptCAIndex.setStatus('mandatory')
atmIfVptCAProvTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 9, 5, 100), )
if mibBuilder.loadTexts: atmIfVptCAProvTable.setStatus('mandatory')
atmIfVptCAProvEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 9, 5, 100, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-AtmCoreMIB", "atmIfIndex"), (0, "Nortel-Magellan-Passport-AtmCoreMIB", "atmIfVptIndex"), (0, "Nortel-Magellan-Passport-AtmCoreMIB", "atmIfVptCAIndex"))
if mibBuilder.loadTexts: atmIfVptCAProvEntry.setStatus('mandatory')
atmIfVptCAMaxVccs = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 9, 5, 100, 1, 6), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 16384)).clone(255)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmIfVptCAMaxVccs.setStatus('mandatory')
atmIfVptCAPermittedAtmServiceCategories = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 9, 5, 100, 1, 25), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 1)).setFixedLength(1).clone(hexValue="f0")).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmIfVptCAPermittedAtmServiceCategories.setStatus('mandatory')
atmIfVptCAOperTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 9, 5, 110), )
if mibBuilder.loadTexts: atmIfVptCAOperTable.setStatus('mandatory')
atmIfVptCAOperEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 9, 5, 110, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-AtmCoreMIB", "atmIfIndex"), (0, "Nortel-Magellan-Passport-AtmCoreMIB", "atmIfVptIndex"), (0, "Nortel-Magellan-Passport-AtmCoreMIB", "atmIfVptCAIndex"))
if mibBuilder.loadTexts: atmIfVptCAOperEntry.setStatus('mandatory')
atmIfVptCAPermanentVccs = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 9, 5, 110, 1, 20), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 16384))).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmIfVptCAPermanentVccs.setStatus('mandatory')
atmIfVptCASwitchedVccs = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 9, 5, 110, 1, 30), Gauge32().subtype(subtypeSpec=ValueRangeConstraint(0, 16384))).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmIfVptCASwitchedVccs.setStatus('mandatory')
atmIfVptCATroubledVccs = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 9, 5, 110, 1, 70), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 16384))).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmIfVptCATroubledVccs.setStatus('mandatory')
atmIfVptCAConnectionPoolUsage = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 9, 5, 110, 1, 81), Gauge32().subtype(subtypeSpec=ValueRangeConstraint(0, 10752))).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmIfVptCAConnectionPoolUsage.setStatus('mandatory')
atmIfVptCAPoolAvailBwTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 9, 5, 460), )
if mibBuilder.loadTexts: atmIfVptCAPoolAvailBwTable.setStatus('mandatory')
atmIfVptCAPoolAvailBwEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 9, 5, 460, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-AtmCoreMIB", "atmIfIndex"), (0, "Nortel-Magellan-Passport-AtmCoreMIB", "atmIfVptIndex"), (0, "Nortel-Magellan-Passport-AtmCoreMIB", "atmIfVptCAIndex"), (0, "Nortel-Magellan-Passport-AtmCoreMIB", "atmIfVptCAPoolAvailBwIndex"))
if mibBuilder.loadTexts: atmIfVptCAPoolAvailBwEntry.setStatus('mandatory')
atmIfVptCAPoolAvailBwIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 9, 5, 460, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 5)))
if mibBuilder.loadTexts: atmIfVptCAPoolAvailBwIndex.setStatus('mandatory')
atmIfVptCAPoolAvailBwValue = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 9, 5, 460, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmIfVptCAPoolAvailBwValue.setStatus('mandatory')
atmIfVptCABwPoolTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 9, 5, 461), )
if mibBuilder.loadTexts: atmIfVptCABwPoolTable.setStatus('mandatory')
atmIfVptCABwPoolEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 9, 5, 461, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-AtmCoreMIB", "atmIfIndex"), (0, "Nortel-Magellan-Passport-AtmCoreMIB", "atmIfVptIndex"), (0, "Nortel-Magellan-Passport-AtmCoreMIB", "atmIfVptCAIndex"), (0, "Nortel-Magellan-Passport-AtmCoreMIB", "atmIfVptCABwPoolIndex"))
if mibBuilder.loadTexts: atmIfVptCABwPoolEntry.setStatus('mandatory')
atmIfVptCABwPoolIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 9, 5, 461, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 5)))
if mibBuilder.loadTexts: atmIfVptCABwPoolIndex.setStatus('mandatory')
atmIfVptCABwPoolValue = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 9, 5, 461, 1, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 12800))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmIfVptCABwPoolValue.setStatus('mandatory')
atmIfVptCAPoolProvBwTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 9, 5, 462), )
if mibBuilder.loadTexts: atmIfVptCAPoolProvBwTable.setStatus('mandatory')
atmIfVptCAPoolProvBwEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 9, 5, 462, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-AtmCoreMIB", "atmIfIndex"), (0, "Nortel-Magellan-Passport-AtmCoreMIB", "atmIfVptIndex"), (0, "Nortel-Magellan-Passport-AtmCoreMIB", "atmIfVptCAIndex"), (0, "Nortel-Magellan-Passport-AtmCoreMIB", "atmIfVptCAPoolProvBwIndex"))
if mibBuilder.loadTexts: atmIfVptCAPoolProvBwEntry.setStatus('mandatory')
atmIfVptCAPoolProvBwIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 9, 5, 462, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 5)))
if mibBuilder.loadTexts: atmIfVptCAPoolProvBwIndex.setStatus('mandatory')
atmIfVptCAPoolProvBwValue = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 9, 5, 462, 1, 2), Gauge32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmIfVptCAPoolProvBwValue.setStatus('mandatory')
atmIfVptCAPoolRequBwTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 9, 5, 463), )
if mibBuilder.loadTexts: atmIfVptCAPoolRequBwTable.setStatus('mandatory')
atmIfVptCAPoolRequBwEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 9, 5, 463, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-AtmCoreMIB", "atmIfIndex"), (0, "Nortel-Magellan-Passport-AtmCoreMIB", "atmIfVptIndex"), (0, "Nortel-Magellan-Passport-AtmCoreMIB", "atmIfVptCAIndex"), (0, "Nortel-Magellan-Passport-AtmCoreMIB", "atmIfVptCAPoolRequBwIndex"))
if mibBuilder.loadTexts: atmIfVptCAPoolRequBwEntry.setStatus('mandatory')
atmIfVptCAPoolRequBwIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 9, 5, 463, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 5)))
if mibBuilder.loadTexts: atmIfVptCAPoolRequBwIndex.setStatus('mandatory')
atmIfVptCAPoolRequBwValue = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 9, 5, 463, 1, 2), Gauge32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmIfVptCAPoolRequBwValue.setStatus('mandatory')
atmIfVptCAPoolAdmitBwTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 9, 5, 464), )
if mibBuilder.loadTexts: atmIfVptCAPoolAdmitBwTable.setStatus('mandatory')
atmIfVptCAPoolAdmitBwEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 9, 5, 464, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-AtmCoreMIB", "atmIfIndex"), (0, "Nortel-Magellan-Passport-AtmCoreMIB", "atmIfVptIndex"), (0, "Nortel-Magellan-Passport-AtmCoreMIB", "atmIfVptCAIndex"), (0, "Nortel-Magellan-Passport-AtmCoreMIB", "atmIfVptCAPoolAdmitBwIndex"))
if mibBuilder.loadTexts: atmIfVptCAPoolAdmitBwEntry.setStatus('mandatory')
atmIfVptCAPoolAdmitBwIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 9, 5, 464, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 5)))
if mibBuilder.loadTexts: atmIfVptCAPoolAdmitBwIndex.setStatus('mandatory')
atmIfVptCAPoolAdmitBwValue = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 9, 5, 464, 1, 2), Gauge32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmIfVptCAPoolAdmitBwValue.setStatus('mandatory')
atmIfVptCAPoolAdmConnsTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 9, 5, 465), )
if mibBuilder.loadTexts: atmIfVptCAPoolAdmConnsTable.setStatus('mandatory')
atmIfVptCAPoolAdmConnsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 9, 5, 465, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-AtmCoreMIB", "atmIfIndex"), (0, "Nortel-Magellan-Passport-AtmCoreMIB", "atmIfVptIndex"), (0, "Nortel-Magellan-Passport-AtmCoreMIB", "atmIfVptCAIndex"), (0, "Nortel-Magellan-Passport-AtmCoreMIB", "atmIfVptCAPoolAdmConnsIndex"))
if mibBuilder.loadTexts: atmIfVptCAPoolAdmConnsEntry.setStatus('mandatory')
atmIfVptCAPoolAdmConnsIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 9, 5, 465, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 5)))
if mibBuilder.loadTexts: atmIfVptCAPoolAdmConnsIndex.setStatus('mandatory')
atmIfVptCAPoolAdmConnsValue = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 9, 5, 465, 1, 2), Gauge32().subtype(subtypeSpec=ValueRangeConstraint(0, 16384))).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmIfVptCAPoolAdmConnsValue.setStatus('mandatory')
atmIfVptCAPoolWaitAdmConnsTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 9, 5, 466), )
if mibBuilder.loadTexts: atmIfVptCAPoolWaitAdmConnsTable.setStatus('mandatory')
atmIfVptCAPoolWaitAdmConnsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 9, 5, 466, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-AtmCoreMIB", "atmIfIndex"), (0, "Nortel-Magellan-Passport-AtmCoreMIB", "atmIfVptIndex"), (0, "Nortel-Magellan-Passport-AtmCoreMIB", "atmIfVptCAIndex"), (0, "Nortel-Magellan-Passport-AtmCoreMIB", "atmIfVptCAPoolWaitAdmConnsIndex"))
if mibBuilder.loadTexts: atmIfVptCAPoolWaitAdmConnsEntry.setStatus('mandatory')
atmIfVptCAPoolWaitAdmConnsIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 9, 5, 466, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 5)))
if mibBuilder.loadTexts: atmIfVptCAPoolWaitAdmConnsIndex.setStatus('mandatory')
atmIfVptCAPoolWaitAdmConnsValue = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 9, 5, 466, 1, 2), Gauge32().subtype(subtypeSpec=ValueRangeConstraint(0, 16384))).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmIfVptCAPoolWaitAdmConnsValue.setStatus('mandatory')
atmIfVptCACbr = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 9, 5, 2))
atmIfVptCACbrRowStatusTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 9, 5, 2, 1), )
if mibBuilder.loadTexts: atmIfVptCACbrRowStatusTable.setStatus('mandatory')
atmIfVptCACbrRowStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 9, 5, 2, 1, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-AtmCoreMIB", "atmIfIndex"), (0, "Nortel-Magellan-Passport-AtmCoreMIB", "atmIfVptIndex"), (0, "Nortel-Magellan-Passport-AtmCoreMIB", "atmIfVptCAIndex"), (0, "Nortel-Magellan-Passport-AtmCoreMIB", "atmIfVptCACbrIndex"))
if mibBuilder.loadTexts: atmIfVptCACbrRowStatusEntry.setStatus('mandatory')
atmIfVptCACbrRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 9, 5, 2, 1, 1, 1), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmIfVptCACbrRowStatus.setStatus('mandatory')
atmIfVptCACbrComponentName = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 9, 5, 2, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmIfVptCACbrComponentName.setStatus('mandatory')
atmIfVptCACbrStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 9, 5, 2, 1, 1, 4), StorageType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmIfVptCACbrStorageType.setStatus('mandatory')
atmIfVptCACbrIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 9, 5, 2, 1, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 0)))
if mibBuilder.loadTexts: atmIfVptCACbrIndex.setStatus('mandatory')
atmIfVptCACbrProvTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 9, 5, 2, 100), )
if mibBuilder.loadTexts: atmIfVptCACbrProvTable.setStatus('mandatory')
atmIfVptCACbrProvEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 9, 5, 2, 100, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-AtmCoreMIB", "atmIfIndex"), (0, "Nortel-Magellan-Passport-AtmCoreMIB", "atmIfVptIndex"), (0, "Nortel-Magellan-Passport-AtmCoreMIB", "atmIfVptCAIndex"), (0, "Nortel-Magellan-Passport-AtmCoreMIB", "atmIfVptCACbrIndex"))
if mibBuilder.loadTexts: atmIfVptCACbrProvEntry.setStatus('mandatory')
atmIfVptCACbrPool = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 9, 5, 2, 100, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("pool1", 1), ("pool2", 2), ("pool3", 3), ("pool4", 4), ("pool5", 5))).clone('pool1')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmIfVptCACbrPool.setStatus('mandatory')
atmIfVptCACbrCdvt = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 9, 5, 2, 100, 1, 20), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 10000)).clone(250)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmIfVptCACbrCdvt.setStatus('mandatory')
atmIfVptCACbrCdv = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 9, 5, 2, 100, 1, 30), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647)).clone(250)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmIfVptCACbrCdv.setStatus('mandatory')
atmIfVptCACbrMaxCtd = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 9, 5, 2, 100, 1, 40), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647)).clone(1000)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmIfVptCACbrMaxCtd.setStatus('mandatory')
atmIfVptCACbrCellLossRatio = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 9, 5, 2, 100, 1, 50), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 15)).clone(10)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmIfVptCACbrCellLossRatio.setStatus('mandatory')
atmIfVptCARtVbr = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 9, 5, 3))
atmIfVptCARtVbrRowStatusTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 9, 5, 3, 1), )
if mibBuilder.loadTexts: atmIfVptCARtVbrRowStatusTable.setStatus('mandatory')
atmIfVptCARtVbrRowStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 9, 5, 3, 1, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-AtmCoreMIB", "atmIfIndex"), (0, "Nortel-Magellan-Passport-AtmCoreMIB", "atmIfVptIndex"), (0, "Nortel-Magellan-Passport-AtmCoreMIB", "atmIfVptCAIndex"), (0, "Nortel-Magellan-Passport-AtmCoreMIB", "atmIfVptCARtVbrIndex"))
if mibBuilder.loadTexts: atmIfVptCARtVbrRowStatusEntry.setStatus('mandatory')
atmIfVptCARtVbrRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 9, 5, 3, 1, 1, 1), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmIfVptCARtVbrRowStatus.setStatus('mandatory')
atmIfVptCARtVbrComponentName = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 9, 5, 3, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmIfVptCARtVbrComponentName.setStatus('mandatory')
atmIfVptCARtVbrStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 9, 5, 3, 1, 1, 4), StorageType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmIfVptCARtVbrStorageType.setStatus('mandatory')
atmIfVptCARtVbrIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 9, 5, 3, 1, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 0)))
if mibBuilder.loadTexts: atmIfVptCARtVbrIndex.setStatus('mandatory')
atmIfVptCARtVbrProvTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 9, 5, 3, 100), )
if mibBuilder.loadTexts: atmIfVptCARtVbrProvTable.setStatus('mandatory')
atmIfVptCARtVbrProvEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 9, 5, 3, 100, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-AtmCoreMIB", "atmIfIndex"), (0, "Nortel-Magellan-Passport-AtmCoreMIB", "atmIfVptIndex"), (0, "Nortel-Magellan-Passport-AtmCoreMIB", "atmIfVptCAIndex"), (0, "Nortel-Magellan-Passport-AtmCoreMIB", "atmIfVptCARtVbrIndex"))
if mibBuilder.loadTexts: atmIfVptCARtVbrProvEntry.setStatus('mandatory')
atmIfVptCARtVbrPool = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 9, 5, 3, 100, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("pool1", 1), ("pool2", 2), ("pool3", 3), ("pool4", 4), ("pool5", 5))).clone('pool1')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmIfVptCARtVbrPool.setStatus('mandatory')
atmIfVptCARtVbrCdv = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 9, 5, 3, 100, 1, 30), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647)).clone(1268)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmIfVptCARtVbrCdv.setStatus('mandatory')
atmIfVptCARtVbrMaxCtd = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 9, 5, 3, 100, 1, 40), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647)).clone(2000)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmIfVptCARtVbrMaxCtd.setStatus('mandatory')
atmIfVptCARtVbrCellLossRatio = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 9, 5, 3, 100, 1, 50), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 15)).clone(10)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmIfVptCARtVbrCellLossRatio.setStatus('mandatory')
atmIfVptCANrtVbr = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 9, 5, 4))
atmIfVptCANrtVbrRowStatusTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 9, 5, 4, 1), )
if mibBuilder.loadTexts: atmIfVptCANrtVbrRowStatusTable.setStatus('mandatory')
atmIfVptCANrtVbrRowStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 9, 5, 4, 1, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-AtmCoreMIB", "atmIfIndex"), (0, "Nortel-Magellan-Passport-AtmCoreMIB", "atmIfVptIndex"), (0, "Nortel-Magellan-Passport-AtmCoreMIB", "atmIfVptCAIndex"), (0, "Nortel-Magellan-Passport-AtmCoreMIB", "atmIfVptCANrtVbrIndex"))
if mibBuilder.loadTexts: atmIfVptCANrtVbrRowStatusEntry.setStatus('mandatory')
atmIfVptCANrtVbrRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 9, 5, 4, 1, 1, 1), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmIfVptCANrtVbrRowStatus.setStatus('mandatory')
atmIfVptCANrtVbrComponentName = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 9, 5, 4, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmIfVptCANrtVbrComponentName.setStatus('mandatory')
atmIfVptCANrtVbrStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 9, 5, 4, 1, 1, 4), StorageType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmIfVptCANrtVbrStorageType.setStatus('mandatory')
atmIfVptCANrtVbrIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 9, 5, 4, 1, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 0)))
if mibBuilder.loadTexts: atmIfVptCANrtVbrIndex.setStatus('mandatory')
atmIfVptCANrtVbrProvTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 9, 5, 4, 100), )
if mibBuilder.loadTexts: atmIfVptCANrtVbrProvTable.setStatus('mandatory')
atmIfVptCANrtVbrProvEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 9, 5, 4, 100, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-AtmCoreMIB", "atmIfIndex"), (0, "Nortel-Magellan-Passport-AtmCoreMIB", "atmIfVptIndex"), (0, "Nortel-Magellan-Passport-AtmCoreMIB", "atmIfVptCAIndex"), (0, "Nortel-Magellan-Passport-AtmCoreMIB", "atmIfVptCANrtVbrIndex"))
if mibBuilder.loadTexts: atmIfVptCANrtVbrProvEntry.setStatus('mandatory')
atmIfVptCANrtVbrPool = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 9, 5, 4, 100, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("pool1", 1), ("pool2", 2), ("pool3", 3), ("pool4", 4), ("pool5", 5))).clone('pool1')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmIfVptCANrtVbrPool.setStatus('mandatory')
atmIfVptCANrtVbrCellLossRatio = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 9, 5, 4, 100, 1, 3), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 15)).clone(7)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmIfVptCANrtVbrCellLossRatio.setStatus('mandatory')
atmIfVptCAAbr = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 9, 5, 5))
atmIfVptCAAbrRowStatusTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 9, 5, 5, 1), )
if mibBuilder.loadTexts: atmIfVptCAAbrRowStatusTable.setStatus('mandatory')
atmIfVptCAAbrRowStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 9, 5, 5, 1, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-AtmCoreMIB", "atmIfIndex"), (0, "Nortel-Magellan-Passport-AtmCoreMIB", "atmIfVptIndex"), (0, "Nortel-Magellan-Passport-AtmCoreMIB", "atmIfVptCAIndex"), (0, "Nortel-Magellan-Passport-AtmCoreMIB", "atmIfVptCAAbrIndex"))
if mibBuilder.loadTexts: atmIfVptCAAbrRowStatusEntry.setStatus('mandatory')
atmIfVptCAAbrRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 9, 5, 5, 1, 1, 1), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmIfVptCAAbrRowStatus.setStatus('mandatory')
atmIfVptCAAbrComponentName = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 9, 5, 5, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmIfVptCAAbrComponentName.setStatus('mandatory')
atmIfVptCAAbrStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 9, 5, 5, 1, 1, 4), StorageType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmIfVptCAAbrStorageType.setStatus('mandatory')
atmIfVptCAAbrIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 9, 5, 5, 1, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 0)))
if mibBuilder.loadTexts: atmIfVptCAAbrIndex.setStatus('mandatory')
atmIfVptCAAbrProvTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 9, 5, 5, 100), )
if mibBuilder.loadTexts: atmIfVptCAAbrProvTable.setStatus('mandatory')
atmIfVptCAAbrProvEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 9, 5, 5, 100, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-AtmCoreMIB", "atmIfIndex"), (0, "Nortel-Magellan-Passport-AtmCoreMIB", "atmIfVptIndex"), (0, "Nortel-Magellan-Passport-AtmCoreMIB", "atmIfVptCAIndex"), (0, "Nortel-Magellan-Passport-AtmCoreMIB", "atmIfVptCAAbrIndex"))
if mibBuilder.loadTexts: atmIfVptCAAbrProvEntry.setStatus('mandatory')
atmIfVptCAAbrPool = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 9, 5, 5, 100, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("pool1", 1), ("pool2", 2), ("pool3", 3), ("pool4", 4), ("pool5", 5))).clone('pool1')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmIfVptCAAbrPool.setStatus('mandatory')
atmIfVptCAUbr = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 9, 5, 6))
atmIfVptCAUbrRowStatusTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 9, 5, 6, 1), )
if mibBuilder.loadTexts: atmIfVptCAUbrRowStatusTable.setStatus('mandatory')
atmIfVptCAUbrRowStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 9, 5, 6, 1, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-AtmCoreMIB", "atmIfIndex"), (0, "Nortel-Magellan-Passport-AtmCoreMIB", "atmIfVptIndex"), (0, "Nortel-Magellan-Passport-AtmCoreMIB", "atmIfVptCAIndex"), (0, "Nortel-Magellan-Passport-AtmCoreMIB", "atmIfVptCAUbrIndex"))
if mibBuilder.loadTexts: atmIfVptCAUbrRowStatusEntry.setStatus('mandatory')
atmIfVptCAUbrRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 9, 5, 6, 1, 1, 1), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmIfVptCAUbrRowStatus.setStatus('mandatory')
atmIfVptCAUbrComponentName = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 9, 5, 6, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmIfVptCAUbrComponentName.setStatus('mandatory')
atmIfVptCAUbrStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 9, 5, 6, 1, 1, 4), StorageType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmIfVptCAUbrStorageType.setStatus('mandatory')
atmIfVptCAUbrIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 9, 5, 6, 1, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 0)))
if mibBuilder.loadTexts: atmIfVptCAUbrIndex.setStatus('mandatory')
atmIfVptCAUbrProvTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 9, 5, 6, 100), )
if mibBuilder.loadTexts: atmIfVptCAUbrProvTable.setStatus('mandatory')
atmIfVptCAUbrProvEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 9, 5, 6, 100, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-AtmCoreMIB", "atmIfIndex"), (0, "Nortel-Magellan-Passport-AtmCoreMIB", "atmIfVptIndex"), (0, "Nortel-Magellan-Passport-AtmCoreMIB", "atmIfVptCAIndex"), (0, "Nortel-Magellan-Passport-AtmCoreMIB", "atmIfVptCAUbrIndex"))
if mibBuilder.loadTexts: atmIfVptCAUbrProvEntry.setStatus('mandatory')
atmIfVptCAUbrMaxVccs = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 9, 5, 6, 100, 1, 6), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 16384), ValueRangeConstraint(16385, 16385), )).clone(16385)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmIfVptCAUbrMaxVccs.setStatus('mandatory')
atmIfVptCAUbrPool = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 9, 5, 6, 100, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("pool1", 1), ("pool2", 2), ("pool3", 3), ("pool4", 4), ("pool5", 5))).clone('pool1')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmIfVptCAUbrPool.setStatus('mandatory')
atmIfVptCAUbrMinimumCellRate = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 9, 5, 6, 100, 1, 11), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmIfVptCAUbrMinimumCellRate.setStatus('mandatory')
atmIfVptCAUbrOperTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 9, 5, 6, 110), )
if mibBuilder.loadTexts: atmIfVptCAUbrOperTable.setStatus('mandatory')
atmIfVptCAUbrOperEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 9, 5, 6, 110, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-AtmCoreMIB", "atmIfIndex"), (0, "Nortel-Magellan-Passport-AtmCoreMIB", "atmIfVptIndex"), (0, "Nortel-Magellan-Passport-AtmCoreMIB", "atmIfVptCAIndex"), (0, "Nortel-Magellan-Passport-AtmCoreMIB", "atmIfVptCAUbrIndex"))
if mibBuilder.loadTexts: atmIfVptCAUbrOperEntry.setStatus('mandatory')
atmIfVptCAUbrVccUsage = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 9, 5, 6, 110, 1, 12), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 16384))).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmIfVptCAUbrVccUsage.setStatus('mandatory')
atmIfVptTm = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 9, 9))
atmIfVptTmRowStatusTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 9, 9, 1), )
if mibBuilder.loadTexts: atmIfVptTmRowStatusTable.setStatus('mandatory')
atmIfVptTmRowStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 9, 9, 1, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-AtmCoreMIB", "atmIfIndex"), (0, "Nortel-Magellan-Passport-AtmCoreMIB", "atmIfVptIndex"), (0, "Nortel-Magellan-Passport-AtmCoreMIB", "atmIfVptTmIndex"))
if mibBuilder.loadTexts: atmIfVptTmRowStatusEntry.setStatus('mandatory')
atmIfVptTmRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 9, 9, 1, 1, 1), RowStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmIfVptTmRowStatus.setStatus('mandatory')
atmIfVptTmComponentName = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 9, 9, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmIfVptTmComponentName.setStatus('mandatory')
atmIfVptTmStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 9, 9, 1, 1, 4), StorageType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmIfVptTmStorageType.setStatus('mandatory')
atmIfVptTmIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 9, 9, 1, 1, 10), NonReplicated())
if mibBuilder.loadTexts: atmIfVptTmIndex.setStatus('mandatory')
atmIfVptTmOperTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 9, 9, 100), )
if mibBuilder.loadTexts: atmIfVptTmOperTable.setStatus('mandatory')
atmIfVptTmOperEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 9, 9, 100, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-AtmCoreMIB", "atmIfIndex"), (0, "Nortel-Magellan-Passport-AtmCoreMIB", "atmIfVptIndex"), (0, "Nortel-Magellan-Passport-AtmCoreMIB", "atmIfVptTmIndex"))
if mibBuilder.loadTexts: atmIfVptTmOperEntry.setStatus('mandatory')
atmIfVptTmTxTrafficDescType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 9, 9, 100, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9))).clone(namedValues=NamedValues(("n1", 1), ("n2", 2), ("n3", 3), ("n4", 4), ("n5", 5), ("n6", 6), ("n7", 7), ("n8", 8), ("n9", 9)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmIfVptTmTxTrafficDescType.setStatus('mandatory')
atmIfVptTmTxQosClass = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 9, 9, 100, 1, 31), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 14))).clone(namedValues=NamedValues(("n0", 0), ("n1", 1), ("n2", 2), ("n3", 3), ("n4", 4), ("notApplicable", 14)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmIfVptTmTxQosClass.setStatus('mandatory')
atmIfVptTmTxQueueLength = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 9, 9, 100, 1, 32), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 30720))).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmIfVptTmTxQueueLength.setStatus('mandatory')
atmIfVptTmTxQueueCongestionState = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 9, 9, 100, 1, 33), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 3))).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmIfVptTmTxQueueCongestionState.setStatus('mandatory')
atmIfVptTmHoldingPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 9, 9, 100, 1, 35), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 6))).clone(namedValues=NamedValues(("n0", 0), ("n1", 1), ("n2", 2), ("n3", 3), ("n4", 4), ("notApplicable", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmIfVptTmHoldingPriority.setStatus('mandatory')
atmIfVptTmRxTrafficDescType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 9, 9, 100, 1, 40), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9))).clone(namedValues=NamedValues(("n1", 1), ("n2", 2), ("n3", 3), ("n4", 4), ("n5", 5), ("n6", 6), ("n7", 7), ("n8", 8), ("n9", 9)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmIfVptTmRxTrafficDescType.setStatus('mandatory')
atmIfVptTmRxQosClass = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 9, 9, 100, 1, 61), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 14))).clone(namedValues=NamedValues(("n0", 0), ("n1", 1), ("n2", 2), ("n3", 3), ("n4", 4), ("notApplicable", 14)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmIfVptTmRxQosClass.setStatus('mandatory')
atmIfVptTmAtmServiceCategory = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 9, 9, 100, 1, 62), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4))).clone(namedValues=NamedValues(("unspecifiedBitRate", 0), ("constantBitRate", 1), ("rtVariableBitRate", 2), ("nrtVariableBitRate", 3), ("availableBitRate", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmIfVptTmAtmServiceCategory.setStatus('mandatory')
atmIfVptTmTrafficShaping = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 9, 9, 100, 1, 70), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 4, 5, 6, 7))).clone(namedValues=NamedValues(("disabled", 1), ("notApplicable", 4), ("linear", 5), ("inverseUpc", 6), ("dynamic", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmIfVptTmTrafficShaping.setStatus('mandatory')
atmIfVptTmBearerClassBbc = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 9, 9, 100, 1, 71), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 3, 16, 24, 30))).clone(namedValues=NamedValues(("a", 1), ("c", 3), ("x", 16), ("vp", 24), ("notApplicable", 30)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmIfVptTmBearerClassBbc.setStatus('mandatory')
atmIfVptTmTransferCapabilityBbc = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 9, 9, 100, 1, 72), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 5, 8, 9, 10, 30))).clone(namedValues=NamedValues(("n0", 0), ("n1", 1), ("n2", 2), ("n5", 5), ("n8", 8), ("n9", 9), ("n10", 10), ("notApplicable", 30)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmIfVptTmTransferCapabilityBbc.setStatus('mandatory')
atmIfVptTmClippingBbc = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 9, 9, 100, 1, 74), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 14))).clone(namedValues=NamedValues(("no", 0), ("yes", 1), ("notApplicable", 14)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmIfVptTmClippingBbc.setStatus('mandatory')
atmIfVptTmUnshapedTransmitQueueing = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 9, 9, 100, 1, 75), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 4, 5))).clone(namedValues=NamedValues(("perVc", 0), ("common", 1), ("notApplicable", 4), ("fifo", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmIfVptTmUnshapedTransmitQueueing.setStatus('mandatory')
atmIfVptTmBestEffort = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 9, 9, 100, 1, 76), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 14))).clone(namedValues=NamedValues(("indicated", 0), ("notIndicated", 1), ("notApplicable", 14)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmIfVptTmBestEffort.setStatus('mandatory')
atmIfVptTmForceTagging = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 9, 9, 100, 1, 78), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("enabled", 0), ("disabled", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmIfVptTmForceTagging.setStatus('mandatory')
atmIfVptTmWeight = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 9, 9, 100, 1, 79), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(1, 4095), ValueRangeConstraint(65534, 65534), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmIfVptTmWeight.setStatus('mandatory')
atmIfVptTmUsageParameterControl = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 9, 9, 100, 1, 80), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 3, 4, 5, 6))).clone(namedValues=NamedValues(("enforced", 0), ("disabled", 1), ("notApplicable", 3), ("monitored", 4), ("abrMonitored", 5), ("abrEnforced", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmIfVptTmUsageParameterControl.setStatus('mandatory')
atmIfVptTmTxPacketWiseDiscard = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 9, 9, 100, 1, 85), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 1)).setFixedLength(1)).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmIfVptTmTxPacketWiseDiscard.setStatus('mandatory')
atmIfVptTmRxPacketWiseDiscard = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 9, 9, 100, 1, 86), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 1)).setFixedLength(1)).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmIfVptTmRxPacketWiseDiscard.setStatus('mandatory')
atmIfVptTmBandwidthElastic = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 9, 9, 100, 1, 90), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("no", 0), ("yes", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmIfVptTmBandwidthElastic.setStatus('mandatory')
atmIfVptTmBandwidthReduction = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 9, 9, 100, 1, 100), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmIfVptTmBandwidthReduction.setStatus('mandatory')
atmIfVptTmAbrConnectionType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 9, 9, 100, 1, 110), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 15))).clone(namedValues=NamedValues(("erSwitch", 1), ("efciSwitch", 2), ("virtualSourceDest", 3), ("sourceDest", 4), ("nonAbrInterworking", 5), ("notApplicable", 15)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmIfVptTmAbrConnectionType.setStatus('mandatory')
atmIfVptTmTxTdpTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 9, 9, 451), )
if mibBuilder.loadTexts: atmIfVptTmTxTdpTable.setStatus('mandatory')
atmIfVptTmTxTdpEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 9, 9, 451, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-AtmCoreMIB", "atmIfIndex"), (0, "Nortel-Magellan-Passport-AtmCoreMIB", "atmIfVptIndex"), (0, "Nortel-Magellan-Passport-AtmCoreMIB", "atmIfVptTmIndex"), (0, "Nortel-Magellan-Passport-AtmCoreMIB", "atmIfVptTmTxTdpIndex"))
if mibBuilder.loadTexts: atmIfVptTmTxTdpEntry.setStatus('mandatory')
atmIfVptTmTxTdpIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 9, 9, 451, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 5)))
if mibBuilder.loadTexts: atmIfVptTmTxTdpIndex.setStatus('mandatory')
atmIfVptTmTxTdpValue = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 9, 9, 451, 1, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmIfVptTmTxTdpValue.setStatus('mandatory')
atmIfVptTmTxQThreshTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 9, 9, 452), )
if mibBuilder.loadTexts: atmIfVptTmTxQThreshTable.setStatus('mandatory')
atmIfVptTmTxQThreshEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 9, 9, 452, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-AtmCoreMIB", "atmIfIndex"), (0, "Nortel-Magellan-Passport-AtmCoreMIB", "atmIfVptIndex"), (0, "Nortel-Magellan-Passport-AtmCoreMIB", "atmIfVptTmIndex"), (0, "Nortel-Magellan-Passport-AtmCoreMIB", "atmIfVptTmTxQThreshIndex"))
if mibBuilder.loadTexts: atmIfVptTmTxQThreshEntry.setStatus('mandatory')
atmIfVptTmTxQThreshIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 9, 9, 452, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 3)))
if mibBuilder.loadTexts: atmIfVptTmTxQThreshIndex.setStatus('mandatory')
atmIfVptTmTxQThreshValue = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 9, 9, 452, 1, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 30720))).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmIfVptTmTxQThreshValue.setStatus('mandatory')
atmIfVptTmRxTdpTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 9, 9, 453), )
if mibBuilder.loadTexts: atmIfVptTmRxTdpTable.setStatus('mandatory')
atmIfVptTmRxTdpEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 9, 9, 453, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-AtmCoreMIB", "atmIfIndex"), (0, "Nortel-Magellan-Passport-AtmCoreMIB", "atmIfVptIndex"), (0, "Nortel-Magellan-Passport-AtmCoreMIB", "atmIfVptTmIndex"), (0, "Nortel-Magellan-Passport-AtmCoreMIB", "atmIfVptTmRxTdpIndex"))
if mibBuilder.loadTexts: atmIfVptTmRxTdpEntry.setStatus('mandatory')
atmIfVptTmRxTdpIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 9, 9, 453, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4)))
if mibBuilder.loadTexts: atmIfVptTmRxTdpIndex.setStatus('mandatory')
atmIfVptTmRxTdpValue = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 9, 9, 453, 1, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmIfVptTmRxTdpValue.setStatus('mandatory')
atmIfVptTmTqpTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 9, 9, 454), )
if mibBuilder.loadTexts: atmIfVptTmTqpTable.setStatus('mandatory')
atmIfVptTmTqpEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 9, 9, 454, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-AtmCoreMIB", "atmIfIndex"), (0, "Nortel-Magellan-Passport-AtmCoreMIB", "atmIfVptIndex"), (0, "Nortel-Magellan-Passport-AtmCoreMIB", "atmIfVptTmIndex"), (0, "Nortel-Magellan-Passport-AtmCoreMIB", "atmIfVptTmTqpIndex"))
if mibBuilder.loadTexts: atmIfVptTmTqpEntry.setStatus('mandatory')
atmIfVptTmTqpIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 9, 9, 454, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("cdv", 0), ("ctd", 1), ("clr", 2))))
if mibBuilder.loadTexts: atmIfVptTmTqpIndex.setStatus('mandatory')
atmIfVptTmTqpValue = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 9, 9, 454, 1, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmIfVptTmTqpValue.setStatus('mandatory')
atmIfVptTmRqpTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 9, 9, 455), )
if mibBuilder.loadTexts: atmIfVptTmRqpTable.setStatus('mandatory')
atmIfVptTmRqpEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 9, 9, 455, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-AtmCoreMIB", "atmIfIndex"), (0, "Nortel-Magellan-Passport-AtmCoreMIB", "atmIfVptIndex"), (0, "Nortel-Magellan-Passport-AtmCoreMIB", "atmIfVptTmIndex"), (0, "Nortel-Magellan-Passport-AtmCoreMIB", "atmIfVptTmRqpIndex"))
if mibBuilder.loadTexts: atmIfVptTmRqpEntry.setStatus('mandatory')
atmIfVptTmRqpIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 9, 9, 455, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("cdv", 0), ("ctd", 1), ("clr", 2))))
if mibBuilder.loadTexts: atmIfVptTmRqpIndex.setStatus('mandatory')
atmIfVptTmRqpValue = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 9, 9, 455, 1, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmIfVptTmRqpValue.setStatus('mandatory')
atmIfVptTmAbr = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 9, 9, 2))
atmIfVptTmAbrRowStatusTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 9, 9, 2, 1), )
if mibBuilder.loadTexts: atmIfVptTmAbrRowStatusTable.setStatus('mandatory')
atmIfVptTmAbrRowStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 9, 9, 2, 1, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-AtmCoreMIB", "atmIfIndex"), (0, "Nortel-Magellan-Passport-AtmCoreMIB", "atmIfVptIndex"), (0, "Nortel-Magellan-Passport-AtmCoreMIB", "atmIfVptTmIndex"), (0, "Nortel-Magellan-Passport-AtmCoreMIB", "atmIfVptTmAbrIndex"))
if mibBuilder.loadTexts: atmIfVptTmAbrRowStatusEntry.setStatus('mandatory')
atmIfVptTmAbrRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 9, 9, 2, 1, 1, 1), RowStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmIfVptTmAbrRowStatus.setStatus('mandatory')
atmIfVptTmAbrComponentName = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 9, 9, 2, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmIfVptTmAbrComponentName.setStatus('mandatory')
atmIfVptTmAbrStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 9, 9, 2, 1, 1, 4), StorageType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmIfVptTmAbrStorageType.setStatus('mandatory')
atmIfVptTmAbrIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 9, 9, 2, 1, 1, 10), NonReplicated())
if mibBuilder.loadTexts: atmIfVptTmAbrIndex.setStatus('mandatory')
atmIfVptTmAbrOperTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 9, 9, 2, 110), )
if mibBuilder.loadTexts: atmIfVptTmAbrOperTable.setStatus('mandatory')
atmIfVptTmAbrOperEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 9, 9, 2, 110, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-AtmCoreMIB", "atmIfIndex"), (0, "Nortel-Magellan-Passport-AtmCoreMIB", "atmIfVptIndex"), (0, "Nortel-Magellan-Passport-AtmCoreMIB", "atmIfVptTmIndex"), (0, "Nortel-Magellan-Passport-AtmCoreMIB", "atmIfVptTmAbrIndex"))
if mibBuilder.loadTexts: atmIfVptTmAbrOperEntry.setStatus('mandatory')
atmIfVptTmAbrInitialCellRate = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 9, 9, 2, 110, 1, 10), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 16777215))).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmIfVptTmAbrInitialCellRate.setStatus('mandatory')
atmIfVptTmAbrTransientBufferExposure = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 9, 9, 2, 110, 1, 11), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 16777215))).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmIfVptTmAbrTransientBufferExposure.setStatus('mandatory')
atmIfVptTmAbrFixedRoundTripTime = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 9, 9, 2, 110, 1, 12), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 16700000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmIfVptTmAbrFixedRoundTripTime.setStatus('mandatory')
atmIfVptTmAbrRateDecreaseFactor = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 9, 9, 2, 110, 1, 13), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 15))).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmIfVptTmAbrRateDecreaseFactor.setStatus('mandatory')
atmIfVptTmAbrRateIncreaseFactor = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 9, 9, 2, 110, 1, 14), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 15))).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmIfVptTmAbrRateIncreaseFactor.setStatus('mandatory')
atmIfVptTmAbrMaxCellPerRmCell = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 9, 9, 2, 110, 1, 15), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(2, 2), ValueRangeConstraint(4, 4), ValueRangeConstraint(8, 8), ValueRangeConstraint(16, 16), ValueRangeConstraint(32, 32), ValueRangeConstraint(64, 64), ValueRangeConstraint(128, 128), ValueRangeConstraint(256, 256), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmIfVptTmAbrMaxCellPerRmCell.setStatus('mandatory')
atmIfVptTmAbrMaxTimeBetweenRmCell = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 9, 9, 2, 110, 1, 16), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(781, 781), ValueRangeConstraint(1563, 1563), ValueRangeConstraint(3125, 3125), ValueRangeConstraint(6250, 6250), ValueRangeConstraint(12500, 12500), ValueRangeConstraint(25000, 25000), ValueRangeConstraint(50000, 50000), ValueRangeConstraint(100000, 100000), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmIfVptTmAbrMaxTimeBetweenRmCell.setStatus('mandatory')
atmIfVptTmAbrCutoffDecreaseFactor = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 9, 9, 2, 110, 1, 17), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(1, 1), ValueRangeConstraint(2, 2), ValueRangeConstraint(4, 4), ValueRangeConstraint(8, 8), ValueRangeConstraint(16, 16), ValueRangeConstraint(32, 32), ValueRangeConstraint(64, 64), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmIfVptTmAbrCutoffDecreaseFactor.setStatus('mandatory')
atmIfVptTmAbrAcrDecreaseTimeFactor = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 9, 9, 2, 110, 1, 18), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 1023))).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmIfVptTmAbrAcrDecreaseTimeFactor.setStatus('mandatory')
atmIfVptTmAbrForwardRmCellLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 9, 9, 2, 110, 1, 19), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(1, 1), ValueRangeConstraint(3, 3), ValueRangeConstraint(7, 7), ValueRangeConstraint(15, 15), ValueRangeConstraint(31, 31), ValueRangeConstraint(63, 63), ValueRangeConstraint(127, 127), ValueRangeConstraint(255, 255), ValueRangeConstraint(511, 511), ValueRangeConstraint(1023, 1023), ValueRangeConstraint(2047, 2047), ValueRangeConstraint(4095, 4095), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmIfVptTmAbrForwardRmCellLimit.setStatus('mandatory')
atmIfVptTmAbrTxRateChangeInfo = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 9, 9, 2, 110, 1, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("congestionIndicated", 0), ("noIncreaseIndicated", 1), ("explicitRateIndicated", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmIfVptTmAbrTxRateChangeInfo.setStatus('obsolete')
atmIfVptTmAbrAcrRateChangeInfo = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 9, 9, 2, 110, 1, 21), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 15))).clone(namedValues=NamedValues(("noChange", 0), ("decreasedByRdf", 1), ("increasedByRif", 2), ("setToExplicitRate", 3), ("notApplicable", 15)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmIfVptTmAbrAcrRateChangeInfo.setStatus('mandatory')
atmIfVptTmAbrTxFwdRmCells = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 9, 9, 2, 110, 1, 22), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4095))).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmIfVptTmAbrTxFwdRmCells.setStatus('mandatory')
atmIfVptTmAbrRxEfci = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 9, 9, 2, 110, 1, 23), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("notIndicated", 0), ("indicated", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmIfVptTmAbrRxEfci.setStatus('mandatory')
atmIfVptTmAbrBrmRateChangeInfo = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 9, 9, 2, 110, 1, 24), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 1)).setFixedLength(1)).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmIfVptTmAbrBrmRateChangeInfo.setStatus('mandatory')
atmIfVptTmAbrBrmExplicitRate = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 9, 9, 2, 110, 1, 25), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 16777215))).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmIfVptTmAbrBrmExplicitRate.setStatus('mandatory')
atmIfVptVcc = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 9, 20))
atmIfVptVccRowStatusTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 9, 20, 1), )
if mibBuilder.loadTexts: atmIfVptVccRowStatusTable.setStatus('mandatory')
atmIfVptVccRowStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 9, 20, 1, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-AtmCoreMIB", "atmIfIndex"), (0, "Nortel-Magellan-Passport-AtmCoreMIB", "atmIfVptIndex"), (0, "Nortel-Magellan-Passport-AtmCoreMIB", "atmIfVptVccIndex"))
if mibBuilder.loadTexts: atmIfVptVccRowStatusEntry.setStatus('mandatory')
atmIfVptVccRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 9, 20, 1, 1, 1), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmIfVptVccRowStatus.setStatus('mandatory')
atmIfVptVccComponentName = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 9, 20, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmIfVptVccComponentName.setStatus('mandatory')
atmIfVptVccStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 9, 20, 1, 1, 4), StorageType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmIfVptVccStorageType.setStatus('mandatory')
atmIfVptVccIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 9, 20, 1, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535)))
if mibBuilder.loadTexts: atmIfVptVccIndex.setStatus('mandatory')
atmIfVptVccStateTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 9, 20, 100), )
if mibBuilder.loadTexts: atmIfVptVccStateTable.setStatus('mandatory')
atmIfVptVccStateEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 9, 20, 100, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-AtmCoreMIB", "atmIfIndex"), (0, "Nortel-Magellan-Passport-AtmCoreMIB", "atmIfVptIndex"), (0, "Nortel-Magellan-Passport-AtmCoreMIB", "atmIfVptVccIndex"))
if mibBuilder.loadTexts: atmIfVptVccStateEntry.setStatus('mandatory')
atmIfVptVccAdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 9, 20, 100, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("locked", 0), ("unlocked", 1), ("shuttingDown", 2))).clone('unlocked')).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmIfVptVccAdminState.setStatus('mandatory')
atmIfVptVccOperationalState = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 9, 20, 100, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1))).clone('disabled')).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmIfVptVccOperationalState.setStatus('mandatory')
atmIfVptVccUsageState = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 9, 20, 100, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("idle", 0), ("active", 1), ("busy", 2))).clone('idle')).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmIfVptVccUsageState.setStatus('mandatory')
atmIfVptVccOperTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 9, 20, 110), )
if mibBuilder.loadTexts: atmIfVptVccOperTable.setStatus('mandatory')
atmIfVptVccOperEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 9, 20, 110, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-AtmCoreMIB", "atmIfIndex"), (0, "Nortel-Magellan-Passport-AtmCoreMIB", "atmIfVptIndex"), (0, "Nortel-Magellan-Passport-AtmCoreMIB", "atmIfVptVccIndex"))
if mibBuilder.loadTexts: atmIfVptVccOperEntry.setStatus('mandatory')
atmIfVptVccConnectionPointType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 9, 20, 110, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("connectionEndPoint", 0), ("segmentEndPoint", 1), ("connectingPoint", 2), ("unknown", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmIfVptVccConnectionPointType.setStatus('mandatory')
atmIfVptVccConnInfoTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 9, 20, 115), )
if mibBuilder.loadTexts: atmIfVptVccConnInfoTable.setStatus('mandatory')
atmIfVptVccConnInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 9, 20, 115, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-AtmCoreMIB", "atmIfIndex"), (0, "Nortel-Magellan-Passport-AtmCoreMIB", "atmIfVptIndex"), (0, "Nortel-Magellan-Passport-AtmCoreMIB", "atmIfVptVccIndex"))
if mibBuilder.loadTexts: atmIfVptVccConnInfoEntry.setStatus('mandatory')
atmIfVptVccDistributionType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 9, 20, 115, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("pointToPoint", 0), ("pointToMultipoint", 1))).clone('pointToPoint')).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmIfVptVccDistributionType.setStatus('mandatory')
atmIfVptVccNumLeaves = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 9, 20, 115, 1, 12), Gauge32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmIfVptVccNumLeaves.setStatus('mandatory')
atmIfVptVccCallDirection = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 9, 20, 115, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("fromLink", 0), ("toLink", 1), ("notApplicable", 2))).clone('notApplicable')).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmIfVptVccCallDirection.setStatus('mandatory')
atmIfVptVccStatusTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 9, 20, 120), )
if mibBuilder.loadTexts: atmIfVptVccStatusTable.setStatus('mandatory')
atmIfVptVccStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 9, 20, 120, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-AtmCoreMIB", "atmIfIndex"), (0, "Nortel-Magellan-Passport-AtmCoreMIB", "atmIfVptIndex"), (0, "Nortel-Magellan-Passport-AtmCoreMIB", "atmIfVptVccIndex"))
if mibBuilder.loadTexts: atmIfVptVccStatusEntry.setStatus('mandatory')
atmIfVptVccOperStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 9, 20, 120, 1, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4))).clone(namedValues=NamedValues(("unknown", 0), ("end2endUp", 1), ("end2endDown", 2), ("localUpEnd2endUnknown", 3), ("localDown", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmIfVptVccOperStatus.setStatus('mandatory')
atmIfVptVccLocalFailureCause = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 9, 20, 120, 1, 25), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("noFailure", 0), ("localBwLoss", 1), ("portDown", 2), ("notAdmitted", 3), ("appNotRegistered", 4), ("disabledByApp", 5), ("bwReduced", 6), ("vpDown", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmIfVptVccLocalFailureCause.setStatus('mandatory')
atmIfVptVccTroubled = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 9, 20, 120, 1, 28), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("no", 0), ("yes", 1))).clone('no')).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmIfVptVccTroubled.setStatus('mandatory')
atmIfVptVccSegLinkSideLoopbackState = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 9, 20, 120, 1, 30), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("good", 0), ("bad", 1), ("unknown", 2), ("notApplicable", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmIfVptVccSegLinkSideLoopbackState.setStatus('mandatory')
atmIfVptVccSegSwitchSideLoopbackState = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 9, 20, 120, 1, 40), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("good", 0), ("bad", 1), ("unknown", 2), ("notApplicable", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmIfVptVccSegSwitchSideLoopbackState.setStatus('mandatory')
atmIfVptVccEndToEndLoopbackState = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 9, 20, 120, 1, 50), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("good", 0), ("bad", 1), ("unknown", 2), ("notApplicable", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmIfVptVccEndToEndLoopbackState.setStatus('mandatory')
atmIfVptVccRxOamCellCongestionState = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 9, 20, 120, 1, 55), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("good", 0), ("bad", 1), ("unknown", 2), ("notApplicable", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmIfVptVccRxOamCellCongestionState.setStatus('mandatory')
atmIfVptVccAisState = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 9, 20, 120, 1, 60), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("good", 0), ("bad", 1), ("unknown", 2), ("notApplicable", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmIfVptVccAisState.setStatus('mandatory')
atmIfVptVccRdiState = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 9, 20, 120, 1, 70), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("good", 0), ("bad", 1), ("unknown", 2), ("notApplicable", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmIfVptVccRdiState.setStatus('mandatory')
atmIfVptVccTrafficTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 9, 20, 130), )
if mibBuilder.loadTexts: atmIfVptVccTrafficTable.setStatus('mandatory')
atmIfVptVccTrafficEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 9, 20, 130, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-AtmCoreMIB", "atmIfIndex"), (0, "Nortel-Magellan-Passport-AtmCoreMIB", "atmIfVptIndex"), (0, "Nortel-Magellan-Passport-AtmCoreMIB", "atmIfVptVccIndex"))
if mibBuilder.loadTexts: atmIfVptVccTrafficEntry.setStatus('mandatory')
atmIfVptVccTxTrafficDescType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 9, 20, 130, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("n1", 1), ("n2", 2), ("n3", 3), ("n4", 4), ("n5", 5), ("n6", 6), ("n7", 7), ("n8", 8)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmIfVptVccTxTrafficDescType.setStatus('obsolete')
atmIfVptVccTxQosClass = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 9, 20, 130, 1, 30), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4))).clone(namedValues=NamedValues(("unspecified", 0), ("constantBitRate", 1), ("variableBitRate", 2), ("connectionOriented", 3), ("connectionless", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmIfVptVccTxQosClass.setStatus('obsolete')
atmIfVptVccFwdQosClass = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 9, 20, 130, 1, 31), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 14))).clone(namedValues=NamedValues(("n0", 0), ("n1", 1), ("n2", 2), ("n3", 3), ("n4", 4), ("notApplicable", 14)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmIfVptVccFwdQosClass.setStatus('obsolete')
atmIfVptVccTxQueueLength = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 9, 20, 130, 1, 32), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 30720))).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmIfVptVccTxQueueLength.setStatus('obsolete')
atmIfVptVccTxQueueCongestionState = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 9, 20, 130, 1, 33), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 3))).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmIfVptVccTxQueueCongestionState.setStatus('obsolete')
atmIfVptVccHoldingPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 9, 20, 130, 1, 35), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 6))).clone(namedValues=NamedValues(("n0", 0), ("n1", 1), ("n2", 2), ("n3", 3), ("n4", 4), ("notApplicable", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmIfVptVccHoldingPriority.setStatus('obsolete')
atmIfVptVccRxTrafficDescType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 9, 20, 130, 1, 40), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("n1", 1), ("n2", 2), ("n3", 3), ("n4", 4), ("n5", 5), ("n6", 6), ("n7", 7), ("n8", 8)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmIfVptVccRxTrafficDescType.setStatus('obsolete')
atmIfVptVccRxQosClass = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 9, 20, 130, 1, 60), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4))).clone(namedValues=NamedValues(("unspecified", 0), ("constantBitRate", 1), ("variableBitRate", 2), ("connectionOriented", 3), ("connectionless", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmIfVptVccRxQosClass.setStatus('obsolete')
atmIfVptVccBwdQosClass = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 9, 20, 130, 1, 61), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 14))).clone(namedValues=NamedValues(("n0", 0), ("n1", 1), ("n2", 2), ("n3", 3), ("n4", 4), ("notApplicable", 14)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmIfVptVccBwdQosClass.setStatus('obsolete')
atmIfVptVccAtmServiceCategory = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 9, 20, 130, 1, 62), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("unspecifiedBitRate", 0), ("constantBitRate", 1), ("rtVariableBitRate", 2), ("nrtVariableBitRate", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmIfVptVccAtmServiceCategory.setStatus('obsolete')
atmIfVptVccTrafficShaping = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 9, 20, 130, 1, 70), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 4))).clone(namedValues=NamedValues(("enabled", 0), ("disabled", 1), ("notApplicable", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmIfVptVccTrafficShaping.setStatus('obsolete')
atmIfVptVccBearerClassBbc = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 9, 20, 130, 1, 71), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 3, 16, 24, 30))).clone(namedValues=NamedValues(("a", 1), ("c", 3), ("x", 16), ("vp", 24), ("notApplicable", 30)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmIfVptVccBearerClassBbc.setStatus('obsolete')
atmIfVptVccTransferCapabilityBbc = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 9, 20, 130, 1, 72), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 5, 8, 9, 10, 30))).clone(namedValues=NamedValues(("n0", 0), ("n1", 1), ("n2", 2), ("n5", 5), ("n8", 8), ("n9", 9), ("n10", 10), ("notApplicable", 30)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmIfVptVccTransferCapabilityBbc.setStatus('obsolete')
atmIfVptVccClippingBbc = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 9, 20, 130, 1, 74), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 14))).clone(namedValues=NamedValues(("no", 0), ("yes", 1), ("notApplicable", 14)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmIfVptVccClippingBbc.setStatus('obsolete')
atmIfVptVccUnshapedTransmitQueueing = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 9, 20, 130, 1, 75), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 4))).clone(namedValues=NamedValues(("perVc", 0), ("common", 1), ("notApplicable", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmIfVptVccUnshapedTransmitQueueing.setStatus('obsolete')
atmIfVptVccBestEffort = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 9, 20, 130, 1, 76), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 14))).clone(namedValues=NamedValues(("indicated", 0), ("notIndicated", 1), ("notApplicable", 14)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmIfVptVccBestEffort.setStatus('obsolete')
atmIfVptVccUsageParameterControl = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 9, 20, 130, 1, 80), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 3))).clone(namedValues=NamedValues(("enabled", 0), ("disabled", 1), ("notApplicable", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmIfVptVccUsageParameterControl.setStatus('obsolete')
atmIfVptVccTxFrameDiscard = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 9, 20, 130, 1, 85), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 1)).setFixedLength(1)).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmIfVptVccTxFrameDiscard.setStatus('obsolete')
atmIfVptVccRxFrameDiscard = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 9, 20, 130, 1, 86), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 1)).setFixedLength(1)).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmIfVptVccRxFrameDiscard.setStatus('obsolete')
atmIfVptVccBandwidthElastic = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 9, 20, 130, 1, 90), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("no", 0), ("yes", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmIfVptVccBandwidthElastic.setStatus('obsolete')
atmIfVptVccBandwidthReduction = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 9, 20, 130, 1, 100), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmIfVptVccBandwidthReduction.setStatus('obsolete')
atmIfVptVccStatsTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 9, 20, 140), )
if mibBuilder.loadTexts: atmIfVptVccStatsTable.setStatus('mandatory')
atmIfVptVccStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 9, 20, 140, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-AtmCoreMIB", "atmIfIndex"), (0, "Nortel-Magellan-Passport-AtmCoreMIB", "atmIfVptIndex"), (0, "Nortel-Magellan-Passport-AtmCoreMIB", "atmIfVptVccIndex"))
if mibBuilder.loadTexts: atmIfVptVccStatsEntry.setStatus('mandatory')
atmIfVptVccStatsTxCell = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 9, 20, 140, 1, 10), PassportCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmIfVptVccStatsTxCell.setStatus('mandatory')
atmIfVptVccStatsTxCellClp = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 9, 20, 140, 1, 20), PassportCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmIfVptVccStatsTxCellClp.setStatus('mandatory')
atmIfVptVccTxDiscard = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 9, 20, 140, 1, 30), PassportCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmIfVptVccTxDiscard.setStatus('obsolete')
atmIfVptVccTxDiscardClp = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 9, 20, 140, 1, 40), PassportCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmIfVptVccTxDiscardClp.setStatus('obsolete')
atmIfVptVccStatsTxCellDiscard = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 9, 20, 140, 1, 42), PassportCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmIfVptVccStatsTxCellDiscard.setStatus('mandatory')
atmIfVptVccStatsTxCellDiscardClp = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 9, 20, 140, 1, 43), PassportCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmIfVptVccStatsTxCellDiscardClp.setStatus('mandatory')
atmIfVptVccStatsTxFrameDiscard = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 9, 20, 140, 1, 46), PassportCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmIfVptVccStatsTxFrameDiscard.setStatus('mandatory')
atmIfVptVccStatsTxFrameDiscardClp = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 9, 20, 140, 1, 47), PassportCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmIfVptVccStatsTxFrameDiscardClp.setStatus('mandatory')
atmIfVptVccTxUtilization = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 9, 20, 140, 1, 48), Gauge32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 200), ValueRangeConstraint(255, 255), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmIfVptVccTxUtilization.setStatus('mandatory')
atmIfVptVccStatsRxCell = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 9, 20, 140, 1, 50), PassportCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmIfVptVccStatsRxCell.setStatus('mandatory')
atmIfVptVccStatsRxCellClp = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 9, 20, 140, 1, 60), PassportCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmIfVptVccStatsRxCellClp.setStatus('mandatory')
atmIfVptVccRxDiscard = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 9, 20, 140, 1, 70), PassportCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmIfVptVccRxDiscard.setStatus('obsolete')
atmIfVptVccRxDiscardClp = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 9, 20, 140, 1, 80), PassportCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmIfVptVccRxDiscardClp.setStatus('obsolete')
atmIfVptVccStatsRxCellDiscard = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 9, 20, 140, 1, 82), PassportCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmIfVptVccStatsRxCellDiscard.setStatus('mandatory')
atmIfVptVccStatsRxCellDiscardClp = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 9, 20, 140, 1, 83), PassportCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmIfVptVccStatsRxCellDiscardClp.setStatus('mandatory')
atmIfVptVccStatsRxFrameDiscard = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 9, 20, 140, 1, 86), PassportCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmIfVptVccStatsRxFrameDiscard.setStatus('mandatory')
atmIfVptVccStatsRxFrameDiscardClp = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 9, 20, 140, 1, 88), PassportCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmIfVptVccStatsRxFrameDiscardClp.setStatus('mandatory')
atmIfVptVccRxUtilization = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 9, 20, 140, 1, 89), Gauge32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 200), ValueRangeConstraint(255, 255), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmIfVptVccRxUtilization.setStatus('mandatory')
atmIfVptVccStatsRxUpcViolationOnEnforcer1 = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 9, 20, 140, 1, 90), PassportCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmIfVptVccStatsRxUpcViolationOnEnforcer1.setStatus('mandatory')
atmIfVptVccStatsRxUpcViolationOnEnforcer2 = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 9, 20, 140, 1, 92), PassportCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmIfVptVccStatsRxUpcViolationOnEnforcer2.setStatus('mandatory')
atmIfVptVccStatsRxAal5FrameError = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 9, 20, 140, 1, 100), PassportCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmIfVptVccStatsRxAal5FrameError.setStatus('mandatory')
atmIfVptVccStatsRxAal5FrameAbort = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 9, 20, 140, 1, 102), PassportCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmIfVptVccStatsRxAal5FrameAbort.setStatus('mandatory')
atmIfVptVccTxTdpTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 9, 20, 294), )
if mibBuilder.loadTexts: atmIfVptVccTxTdpTable.setStatus('obsolete')
atmIfVptVccTxTdpEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 9, 20, 294, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-AtmCoreMIB", "atmIfIndex"), (0, "Nortel-Magellan-Passport-AtmCoreMIB", "atmIfVptIndex"), (0, "Nortel-Magellan-Passport-AtmCoreMIB", "atmIfVptVccIndex"), (0, "Nortel-Magellan-Passport-AtmCoreMIB", "atmIfVptVccTxTdpIndex"))
if mibBuilder.loadTexts: atmIfVptVccTxTdpEntry.setStatus('obsolete')
atmIfVptVccTxTdpIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 9, 20, 294, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 5)))
if mibBuilder.loadTexts: atmIfVptVccTxTdpIndex.setStatus('obsolete')
atmIfVptVccTxTdpValue = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 9, 20, 294, 1, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmIfVptVccTxTdpValue.setStatus('obsolete')
atmIfVptVccRxTdpTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 9, 20, 295), )
if mibBuilder.loadTexts: atmIfVptVccRxTdpTable.setStatus('obsolete')
atmIfVptVccRxTdpEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 9, 20, 295, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-AtmCoreMIB", "atmIfIndex"), (0, "Nortel-Magellan-Passport-AtmCoreMIB", "atmIfVptIndex"), (0, "Nortel-Magellan-Passport-AtmCoreMIB", "atmIfVptVccIndex"), (0, "Nortel-Magellan-Passport-AtmCoreMIB", "atmIfVptVccRxTdpIndex"))
if mibBuilder.loadTexts: atmIfVptVccRxTdpEntry.setStatus('obsolete')
atmIfVptVccRxTdpIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 9, 20, 295, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4)))
if mibBuilder.loadTexts: atmIfVptVccRxTdpIndex.setStatus('obsolete')
atmIfVptVccRxTdpValue = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 9, 20, 295, 1, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmIfVptVccRxTdpValue.setStatus('obsolete')
atmIfVptVccTxQThreshTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 9, 20, 352), )
if mibBuilder.loadTexts: atmIfVptVccTxQThreshTable.setStatus('obsolete')
atmIfVptVccTxQThreshEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 9, 20, 352, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-AtmCoreMIB", "atmIfIndex"), (0, "Nortel-Magellan-Passport-AtmCoreMIB", "atmIfVptIndex"), (0, "Nortel-Magellan-Passport-AtmCoreMIB", "atmIfVptVccIndex"), (0, "Nortel-Magellan-Passport-AtmCoreMIB", "atmIfVptVccTxQThreshIndex"))
if mibBuilder.loadTexts: atmIfVptVccTxQThreshEntry.setStatus('obsolete')
atmIfVptVccTxQThreshIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 9, 20, 352, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 3)))
if mibBuilder.loadTexts: atmIfVptVccTxQThreshIndex.setStatus('obsolete')
atmIfVptVccTxQThreshValue = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 9, 20, 352, 1, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 30720))).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmIfVptVccTxQThreshValue.setStatus('obsolete')
atmIfVptVccFqpTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 9, 20, 357), )
if mibBuilder.loadTexts: atmIfVptVccFqpTable.setStatus('obsolete')
atmIfVptVccFqpEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 9, 20, 357, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-AtmCoreMIB", "atmIfIndex"), (0, "Nortel-Magellan-Passport-AtmCoreMIB", "atmIfVptIndex"), (0, "Nortel-Magellan-Passport-AtmCoreMIB", "atmIfVptVccIndex"), (0, "Nortel-Magellan-Passport-AtmCoreMIB", "atmIfVptVccFqpIndex"))
if mibBuilder.loadTexts: atmIfVptVccFqpEntry.setStatus('obsolete')
atmIfVptVccFqpIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 9, 20, 357, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("cdv", 0), ("ctd", 1), ("clr", 2))))
if mibBuilder.loadTexts: atmIfVptVccFqpIndex.setStatus('obsolete')
atmIfVptVccFqpValue = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 9, 20, 357, 1, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmIfVptVccFqpValue.setStatus('obsolete')
atmIfVptVccBqpTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 9, 20, 358), )
if mibBuilder.loadTexts: atmIfVptVccBqpTable.setStatus('obsolete')
atmIfVptVccBqpEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 9, 20, 358, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-AtmCoreMIB", "atmIfIndex"), (0, "Nortel-Magellan-Passport-AtmCoreMIB", "atmIfVptIndex"), (0, "Nortel-Magellan-Passport-AtmCoreMIB", "atmIfVptVccIndex"), (0, "Nortel-Magellan-Passport-AtmCoreMIB", "atmIfVptVccBqpIndex"))
if mibBuilder.loadTexts: atmIfVptVccBqpEntry.setStatus('obsolete')
atmIfVptVccBqpIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 9, 20, 358, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("cdv", 0), ("ctd", 1), ("clr", 2))))
if mibBuilder.loadTexts: atmIfVptVccBqpIndex.setStatus('obsolete')
atmIfVptVccBqpValue = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 9, 20, 358, 1, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmIfVptVccBqpValue.setStatus('obsolete')
atmIfVptVccVcd = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 9, 20, 2))
atmIfVptVccVcdRowStatusTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 9, 20, 2, 1), )
if mibBuilder.loadTexts: atmIfVptVccVcdRowStatusTable.setStatus('mandatory')
atmIfVptVccVcdRowStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 9, 20, 2, 1, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-AtmCoreMIB", "atmIfIndex"), (0, "Nortel-Magellan-Passport-AtmCoreMIB", "atmIfVptIndex"), (0, "Nortel-Magellan-Passport-AtmCoreMIB", "atmIfVptVccIndex"), (0, "Nortel-Magellan-Passport-AtmCoreMIB", "atmIfVptVccVcdIndex"))
if mibBuilder.loadTexts: atmIfVptVccVcdRowStatusEntry.setStatus('mandatory')
atmIfVptVccVcdRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 9, 20, 2, 1, 1, 1), RowStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmIfVptVccVcdRowStatus.setStatus('mandatory')
atmIfVptVccVcdComponentName = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 9, 20, 2, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmIfVptVccVcdComponentName.setStatus('mandatory')
atmIfVptVccVcdStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 9, 20, 2, 1, 1, 4), StorageType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmIfVptVccVcdStorageType.setStatus('mandatory')
atmIfVptVccVcdIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 9, 20, 2, 1, 1, 10), NonReplicated())
if mibBuilder.loadTexts: atmIfVptVccVcdIndex.setStatus('mandatory')
atmIfVptVccVcdLbkTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 9, 20, 2, 100), )
if mibBuilder.loadTexts: atmIfVptVccVcdLbkTable.setStatus('mandatory')
atmIfVptVccVcdLbkEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 9, 20, 2, 100, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-AtmCoreMIB", "atmIfIndex"), (0, "Nortel-Magellan-Passport-AtmCoreMIB", "atmIfVptIndex"), (0, "Nortel-Magellan-Passport-AtmCoreMIB", "atmIfVptVccIndex"), (0, "Nortel-Magellan-Passport-AtmCoreMIB", "atmIfVptVccVcdIndex"))
if mibBuilder.loadTexts: atmIfVptVccVcdLbkEntry.setStatus('mandatory')
atmIfVptVccVcdSegLinkSideLoopback = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 9, 20, 2, 100, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("on", 0), ("off", 1), ("sameAsInterface", 2))).clone('sameAsInterface')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmIfVptVccVcdSegLinkSideLoopback.setStatus('mandatory')
atmIfVptVccVcdSegSwitchSideLoopback = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 9, 20, 2, 100, 1, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("on", 0), ("off", 1), ("sameAsInterface", 2))).clone('sameAsInterface')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmIfVptVccVcdSegSwitchSideLoopback.setStatus('mandatory')
atmIfVptVccVcdEndToEndLoopback = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 9, 20, 2, 100, 1, 30), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("on", 0), ("off", 1), ("sameAsInterface", 2))).clone('sameAsInterface')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmIfVptVccVcdEndToEndLoopback.setStatus('mandatory')
atmIfVptVccVcdLoopbackMonitoring = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 9, 20, 2, 100, 1, 1000), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("on", 0), ("off", 1), ("sameAsInterface", 2))).clone('sameAsInterface')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmIfVptVccVcdLoopbackMonitoring.setStatus('mandatory')
atmIfVptVccVcdTrafficTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 9, 20, 2, 110), )
if mibBuilder.loadTexts: atmIfVptVccVcdTrafficTable.setStatus('mandatory')
atmIfVptVccVcdTrafficEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 9, 20, 2, 110, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-AtmCoreMIB", "atmIfIndex"), (0, "Nortel-Magellan-Passport-AtmCoreMIB", "atmIfVptIndex"), (0, "Nortel-Magellan-Passport-AtmCoreMIB", "atmIfVptVccIndex"), (0, "Nortel-Magellan-Passport-AtmCoreMIB", "atmIfVptVccVcdIndex"))
if mibBuilder.loadTexts: atmIfVptVccVcdTrafficEntry.setStatus('mandatory')
atmIfVptVccVcdTxTrafficDescType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 9, 20, 2, 110, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9))).clone(namedValues=NamedValues(("n1", 1), ("n2", 2), ("n3", 3), ("n4", 4), ("n5", 5), ("n6", 6), ("n7", 7), ("n8", 8), ("n9", 9))).clone('n1')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmIfVptVccVcdTxTrafficDescType.setStatus('obsolete')
atmIfVptVccVcdTxQosClass = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 9, 20, 2, 110, 1, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4))).clone(namedValues=NamedValues(("unspecified", 0), ("constantBitRate", 1), ("variableBitRate", 2), ("connectionOriented", 3), ("connectionless", 4))).clone('connectionOriented')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmIfVptVccVcdTxQosClass.setStatus('obsolete')
atmIfVptVccVcdFwdQosClass = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 9, 20, 2, 110, 1, 21), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4))).clone(namedValues=NamedValues(("n0", 0), ("n1", 1), ("n2", 2), ("n3", 3), ("n4", 4))).clone('n0')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmIfVptVccVcdFwdQosClass.setStatus('obsolete')
atmIfVptVccVcdHoldingPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 9, 20, 2, 110, 1, 25), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4))).clone(namedValues=NamedValues(("n0", 0), ("n1", 1), ("n2", 2), ("n3", 3), ("n4", 4))).clone('n2')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmIfVptVccVcdHoldingPriority.setStatus('obsolete')
atmIfVptVccVcdRxTrafficDescType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 9, 20, 2, 110, 1, 30), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 15))).clone(namedValues=NamedValues(("n1", 1), ("n2", 2), ("n3", 3), ("n4", 4), ("n5", 5), ("n6", 6), ("n7", 7), ("n8", 8), ("sameAsTx", 15))).clone('sameAsTx')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmIfVptVccVcdRxTrafficDescType.setStatus('obsolete')
atmIfVptVccVcdRxQosClass = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 9, 20, 2, 110, 1, 40), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 15))).clone(namedValues=NamedValues(("unspecified", 0), ("constantBitRate", 1), ("variableBitRate", 2), ("connectionOriented", 3), ("connectionless", 4), ("sameAsTx", 15))).clone('sameAsTx')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmIfVptVccVcdRxQosClass.setStatus('obsolete')
atmIfVptVccVcdBwdQosClass = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 9, 20, 2, 110, 1, 41), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 15))).clone(namedValues=NamedValues(("n0", 0), ("n1", 1), ("n2", 2), ("n3", 3), ("n4", 4), ("sameAsFwd", 15))).clone('sameAsFwd')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmIfVptVccVcdBwdQosClass.setStatus('obsolete')
atmIfVptVccVcdAtmServiceCategory = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 9, 20, 2, 110, 1, 42), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 15))).clone(namedValues=NamedValues(("unspecifiedBitRate", 0), ("constantBitRate", 1), ("rtVariableBitRate", 2), ("nrtVariableBitRate", 3), ("derivedFromBBC", 15))).clone('unspecifiedBitRate')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmIfVptVccVcdAtmServiceCategory.setStatus('obsolete')
atmIfVptVccVcdTrafficShaping = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 9, 20, 2, 110, 1, 50), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("sameAsInterface", 2))).clone('sameAsInterface')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmIfVptVccVcdTrafficShaping.setStatus('obsolete')
atmIfVptVccVcdUnshapedTransmitQueueing = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 9, 20, 2, 110, 1, 60), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 3))).clone(namedValues=NamedValues(("common", 1), ("sameAsInterface", 3))).clone('sameAsInterface')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmIfVptVccVcdUnshapedTransmitQueueing.setStatus('obsolete')
atmIfVptVccVcdUsageParameterControl = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 9, 20, 2, 110, 1, 70), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("sameAsInterface", 2))).clone('sameAsInterface')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmIfVptVccVcdUsageParameterControl.setStatus('obsolete')
atmIfVptVccVcdBearerClassBbc = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 9, 20, 2, 110, 1, 71), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 3, 16, 24, 31))).clone(namedValues=NamedValues(("a", 1), ("c", 3), ("x", 16), ("vp", 24), ("derivedFromServiceCategory", 31))).clone('derivedFromServiceCategory')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmIfVptVccVcdBearerClassBbc.setStatus('obsolete')
atmIfVptVccVcdTransferCapabilityBbc = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 9, 20, 2, 110, 1, 72), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 5, 8, 9, 10, 30, 31))).clone(namedValues=NamedValues(("n0", 0), ("n1", 1), ("n2", 2), ("n5", 5), ("n8", 8), ("n9", 9), ("n10", 10), ("notApplicable", 30), ("derivedFromServiceCategory", 31))).clone('derivedFromServiceCategory')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmIfVptVccVcdTransferCapabilityBbc.setStatus('obsolete')
atmIfVptVccVcdClippingBbc = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 9, 20, 2, 110, 1, 74), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("no", 0), ("yes", 1))).clone('no')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmIfVptVccVcdClippingBbc.setStatus('obsolete')
atmIfVptVccVcdBestEffort = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 9, 20, 2, 110, 1, 75), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 15))).clone(namedValues=NamedValues(("indicated", 0), ("notIndicated", 1), ("derivedFromServiceCategory", 15))).clone('derivedFromServiceCategory')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmIfVptVccVcdBestEffort.setStatus('obsolete')
atmIfVptVccVcdFwdFrameDiscard = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 9, 20, 2, 110, 1, 76), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("notIndicated", 0), ("indicated", 1))).clone('notIndicated')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmIfVptVccVcdFwdFrameDiscard.setStatus('obsolete')
atmIfVptVccVcdBwdFrameDiscard = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 9, 20, 2, 110, 1, 77), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("notIndicated", 0), ("indicated", 1))).clone('notIndicated')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmIfVptVccVcdBwdFrameDiscard.setStatus('obsolete')
atmIfVptVccVcdAcctTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 9, 20, 2, 111), )
if mibBuilder.loadTexts: atmIfVptVccVcdAcctTable.setStatus('mandatory')
atmIfVptVccVcdAcctEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 9, 20, 2, 111, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-AtmCoreMIB", "atmIfIndex"), (0, "Nortel-Magellan-Passport-AtmCoreMIB", "atmIfVptIndex"), (0, "Nortel-Magellan-Passport-AtmCoreMIB", "atmIfVptVccIndex"), (0, "Nortel-Magellan-Passport-AtmCoreMIB", "atmIfVptVccVcdIndex"))
if mibBuilder.loadTexts: atmIfVptVccVcdAcctEntry.setStatus('mandatory')
atmIfVptVccVcdCorrelationTag = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 9, 20, 2, 111, 1, 10), AsciiString().subtype(subtypeSpec=ValueSizeConstraint(0, 32)).clone(hexValue="")).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmIfVptVccVcdCorrelationTag.setStatus('mandatory')
atmIfVptVccVcdTxTdpTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 9, 20, 2, 297), )
if mibBuilder.loadTexts: atmIfVptVccVcdTxTdpTable.setStatus('obsolete')
atmIfVptVccVcdTxTdpEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 9, 20, 2, 297, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-AtmCoreMIB", "atmIfIndex"), (0, "Nortel-Magellan-Passport-AtmCoreMIB", "atmIfVptIndex"), (0, "Nortel-Magellan-Passport-AtmCoreMIB", "atmIfVptVccIndex"), (0, "Nortel-Magellan-Passport-AtmCoreMIB", "atmIfVptVccVcdIndex"), (0, "Nortel-Magellan-Passport-AtmCoreMIB", "atmIfVptVccVcdTxTdpIndex"))
if mibBuilder.loadTexts: atmIfVptVccVcdTxTdpEntry.setStatus('obsolete')
atmIfVptVccVcdTxTdpIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 9, 20, 2, 297, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 5)))
if mibBuilder.loadTexts: atmIfVptVccVcdTxTdpIndex.setStatus('obsolete')
atmIfVptVccVcdTxTdpValue = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 9, 20, 2, 297, 1, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmIfVptVccVcdTxTdpValue.setStatus('obsolete')
atmIfVptVccVcdRxTdpTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 9, 20, 2, 298), )
if mibBuilder.loadTexts: atmIfVptVccVcdRxTdpTable.setStatus('obsolete')
atmIfVptVccVcdRxTdpEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 9, 20, 2, 298, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-AtmCoreMIB", "atmIfIndex"), (0, "Nortel-Magellan-Passport-AtmCoreMIB", "atmIfVptIndex"), (0, "Nortel-Magellan-Passport-AtmCoreMIB", "atmIfVptVccIndex"), (0, "Nortel-Magellan-Passport-AtmCoreMIB", "atmIfVptVccVcdIndex"), (0, "Nortel-Magellan-Passport-AtmCoreMIB", "atmIfVptVccVcdRxTdpIndex"))
if mibBuilder.loadTexts: atmIfVptVccVcdRxTdpEntry.setStatus('obsolete')
atmIfVptVccVcdRxTdpIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 9, 20, 2, 298, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 5)))
if mibBuilder.loadTexts: atmIfVptVccVcdRxTdpIndex.setStatus('obsolete')
atmIfVptVccVcdRxTdpValue = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 9, 20, 2, 298, 1, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmIfVptVccVcdRxTdpValue.setStatus('obsolete')
atmIfVptVccVcdFqpTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 9, 20, 2, 359), )
if mibBuilder.loadTexts: atmIfVptVccVcdFqpTable.setStatus('obsolete')
atmIfVptVccVcdFqpEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 9, 20, 2, 359, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-AtmCoreMIB", "atmIfIndex"), (0, "Nortel-Magellan-Passport-AtmCoreMIB", "atmIfVptIndex"), (0, "Nortel-Magellan-Passport-AtmCoreMIB", "atmIfVptVccIndex"), (0, "Nortel-Magellan-Passport-AtmCoreMIB", "atmIfVptVccVcdIndex"), (0, "Nortel-Magellan-Passport-AtmCoreMIB", "atmIfVptVccVcdFqpIndex"))
if mibBuilder.loadTexts: atmIfVptVccVcdFqpEntry.setStatus('obsolete')
atmIfVptVccVcdFqpIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 9, 20, 2, 359, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("cdv", 0), ("ctd", 1), ("clr", 2))))
if mibBuilder.loadTexts: atmIfVptVccVcdFqpIndex.setStatus('obsolete')
atmIfVptVccVcdFqpValue = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 9, 20, 2, 359, 1, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmIfVptVccVcdFqpValue.setStatus('obsolete')
atmIfVptVccVcdBqpTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 9, 20, 2, 360), )
if mibBuilder.loadTexts: atmIfVptVccVcdBqpTable.setStatus('obsolete')
atmIfVptVccVcdBqpEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 9, 20, 2, 360, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-AtmCoreMIB", "atmIfIndex"), (0, "Nortel-Magellan-Passport-AtmCoreMIB", "atmIfVptIndex"), (0, "Nortel-Magellan-Passport-AtmCoreMIB", "atmIfVptVccIndex"), (0, "Nortel-Magellan-Passport-AtmCoreMIB", "atmIfVptVccVcdIndex"), (0, "Nortel-Magellan-Passport-AtmCoreMIB", "atmIfVptVccVcdBqpIndex"))
if mibBuilder.loadTexts: atmIfVptVccVcdBqpEntry.setStatus('obsolete')
atmIfVptVccVcdBqpIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 9, 20, 2, 360, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("cdv", 0), ("ctd", 1), ("clr", 2))))
if mibBuilder.loadTexts: atmIfVptVccVcdBqpIndex.setStatus('obsolete')
atmIfVptVccVcdBqpValue = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 9, 20, 2, 360, 1, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmIfVptVccVcdBqpValue.setStatus('obsolete')
atmIfVptVccVcdTm = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 9, 20, 2, 2))
atmIfVptVccVcdTmRowStatusTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 9, 20, 2, 2, 1), )
if mibBuilder.loadTexts: atmIfVptVccVcdTmRowStatusTable.setStatus('mandatory')
atmIfVptVccVcdTmRowStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 9, 20, 2, 2, 1, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-AtmCoreMIB", "atmIfIndex"), (0, "Nortel-Magellan-Passport-AtmCoreMIB", "atmIfVptIndex"), (0, "Nortel-Magellan-Passport-AtmCoreMIB", "atmIfVptVccIndex"), (0, "Nortel-Magellan-Passport-AtmCoreMIB", "atmIfVptVccVcdIndex"), (0, "Nortel-Magellan-Passport-AtmCoreMIB", "atmIfVptVccVcdTmIndex"))
if mibBuilder.loadTexts: atmIfVptVccVcdTmRowStatusEntry.setStatus('mandatory')
atmIfVptVccVcdTmRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 9, 20, 2, 2, 1, 1, 1), RowStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmIfVptVccVcdTmRowStatus.setStatus('mandatory')
atmIfVptVccVcdTmComponentName = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 9, 20, 2, 2, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmIfVptVccVcdTmComponentName.setStatus('mandatory')
atmIfVptVccVcdTmStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 9, 20, 2, 2, 1, 1, 4), StorageType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmIfVptVccVcdTmStorageType.setStatus('mandatory')
atmIfVptVccVcdTmIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 9, 20, 2, 2, 1, 1, 10), NonReplicated())
if mibBuilder.loadTexts: atmIfVptVccVcdTmIndex.setStatus('mandatory')
atmIfVptVccVcdTmProvTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 9, 20, 2, 2, 100), )
if mibBuilder.loadTexts: atmIfVptVccVcdTmProvTable.setStatus('mandatory')
atmIfVptVccVcdTmProvEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 9, 20, 2, 2, 100, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-AtmCoreMIB", "atmIfIndex"), (0, "Nortel-Magellan-Passport-AtmCoreMIB", "atmIfVptIndex"), (0, "Nortel-Magellan-Passport-AtmCoreMIB", "atmIfVptVccIndex"), (0, "Nortel-Magellan-Passport-AtmCoreMIB", "atmIfVptVccVcdIndex"), (0, "Nortel-Magellan-Passport-AtmCoreMIB", "atmIfVptVccVcdTmIndex"))
if mibBuilder.loadTexts: atmIfVptVccVcdTmProvEntry.setStatus('mandatory')
atmIfVptVccVcdTmTxTrafficDescType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 9, 20, 2, 2, 100, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9))).clone(namedValues=NamedValues(("n1", 1), ("n2", 2), ("n3", 3), ("n4", 4), ("n5", 5), ("n6", 6), ("n7", 7), ("n8", 8), ("n9", 9))).clone('n1')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmIfVptVccVcdTmTxTrafficDescType.setStatus('mandatory')
atmIfVptVccVcdTmFwdQosClass = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 9, 20, 2, 2, 100, 1, 21), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4))).clone(namedValues=NamedValues(("n0", 0), ("n1", 1), ("n2", 2), ("n3", 3), ("n4", 4))).clone('n0')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmIfVptVccVcdTmFwdQosClass.setStatus('mandatory')
atmIfVptVccVcdTmTxQueueLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 9, 20, 2, 2, 100, 1, 22), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(5, 63488), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmIfVptVccVcdTmTxQueueLimit.setStatus('mandatory')
atmIfVptVccVcdTmHoldingPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 9, 20, 2, 2, 100, 1, 25), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4))).clone(namedValues=NamedValues(("n0", 0), ("n1", 1), ("n2", 2), ("n3", 3), ("n4", 4))).clone('n2')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmIfVptVccVcdTmHoldingPriority.setStatus('mandatory')
atmIfVptVccVcdTmRxTrafficDescType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 9, 20, 2, 2, 100, 1, 30), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 15))).clone(namedValues=NamedValues(("n1", 1), ("n2", 2), ("n3", 3), ("n4", 4), ("n5", 5), ("n6", 6), ("n7", 7), ("n8", 8), ("n9", 9), ("sameAsTx", 15))).clone('sameAsTx')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmIfVptVccVcdTmRxTrafficDescType.setStatus('mandatory')
atmIfVptVccVcdTmBwdQosClass = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 9, 20, 2, 2, 100, 1, 41), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 15))).clone(namedValues=NamedValues(("n0", 0), ("n1", 1), ("n2", 2), ("n3", 3), ("n4", 4), ("sameAsFwd", 15))).clone('sameAsFwd')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmIfVptVccVcdTmBwdQosClass.setStatus('mandatory')
atmIfVptVccVcdTmAtmServiceCategory = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 9, 20, 2, 2, 100, 1, 42), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 15))).clone(namedValues=NamedValues(("unspecifiedBitRate", 0), ("constantBitRate", 1), ("rtVariableBitRate", 2), ("nrtVariableBitRate", 3), ("availableBitRate", 4), ("derivedFromBBC", 15))).clone('unspecifiedBitRate')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmIfVptVccVcdTmAtmServiceCategory.setStatus('mandatory')
atmIfVptVccVcdTmTrafficShaping = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 9, 20, 2, 2, 100, 1, 50), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("sameAsCa", 2))).clone('sameAsCa')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmIfVptVccVcdTmTrafficShaping.setStatus('mandatory')
atmIfVptVccVcdTmUnshapedTransmitQueueing = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 9, 20, 2, 2, 100, 1, 60), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 3))).clone(namedValues=NamedValues(("common", 1), ("sameAsCa", 3))).clone('sameAsCa')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmIfVptVccVcdTmUnshapedTransmitQueueing.setStatus('mandatory')
atmIfVptVccVcdTmWeight = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 9, 20, 2, 2, 100, 1, 61), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(1, 4095), ValueRangeConstraint(65535, 65535), )).clone(65535)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmIfVptVccVcdTmWeight.setStatus('mandatory')
atmIfVptVccVcdTmForceTagging = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 9, 20, 2, 2, 100, 1, 62), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("enabled", 0), ("disabled", 1), ("sameAsCa", 2))).clone('sameAsCa')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmIfVptVccVcdTmForceTagging.setStatus('mandatory')
atmIfVptVccVcdTmUsageParameterControl = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 9, 20, 2, 2, 100, 1, 70), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 4))).clone(namedValues=NamedValues(("enforced", 0), ("disabled", 1), ("sameAsCa", 2), ("monitored", 4))).clone('sameAsCa')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmIfVptVccVcdTmUsageParameterControl.setStatus('mandatory')
atmIfVptVccVcdTmBearerClassBbc = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 9, 20, 2, 2, 100, 1, 71), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 3, 16, 24, 31))).clone(namedValues=NamedValues(("a", 1), ("c", 3), ("x", 16), ("vp", 24), ("derivedFromServiceCategory", 31))).clone('derivedFromServiceCategory')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmIfVptVccVcdTmBearerClassBbc.setStatus('mandatory')
atmIfVptVccVcdTmTransferCapabilityBbc = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 9, 20, 2, 2, 100, 1, 72), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 5, 8, 9, 10, 30, 31))).clone(namedValues=NamedValues(("n0", 0), ("n1", 1), ("n2", 2), ("n5", 5), ("n8", 8), ("n9", 9), ("n10", 10), ("notApplicable", 30), ("derivedFromServiceCategory", 31))).clone('derivedFromServiceCategory')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmIfVptVccVcdTmTransferCapabilityBbc.setStatus('mandatory')
atmIfVptVccVcdTmTxWredThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 9, 20, 2, 2, 100, 1, 73), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(25, 25), ValueRangeConstraint(50, 50), ValueRangeConstraint(75, 75), )).clone(25)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmIfVptVccVcdTmTxWredThreshold.setStatus('mandatory')
atmIfVptVccVcdTmClippingBbc = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 9, 20, 2, 2, 100, 1, 74), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("no", 0), ("yes", 1))).clone('no')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmIfVptVccVcdTmClippingBbc.setStatus('mandatory')
atmIfVptVccVcdTmBestEffort = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 9, 20, 2, 2, 100, 1, 75), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 15))).clone(namedValues=NamedValues(("indicated", 0), ("notIndicated", 1), ("derivedFromServiceCategory", 15))).clone('derivedFromServiceCategory')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmIfVptVccVcdTmBestEffort.setStatus('mandatory')
atmIfVptVccVcdTmTxPacketWiseDiscard = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 9, 20, 2, 2, 100, 1, 76), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmIfVptVccVcdTmTxPacketWiseDiscard.setStatus('mandatory')
atmIfVptVccVcdTmTxWredMode = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 9, 20, 2, 2, 100, 1, 77), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1), ("perFlow", 2))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmIfVptVccVcdTmTxWredMode.setStatus('mandatory')
atmIfVptVccVcdTmRxPacketWiseDiscard = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 9, 20, 2, 2, 100, 1, 78), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmIfVptVccVcdTmRxPacketWiseDiscard.setStatus('mandatory')
atmIfVptVccVcdTmAbrConnectionType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 9, 20, 2, 2, 100, 1, 90), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 3, 4, 5, 14))).clone(namedValues=NamedValues(("abrSwitch", 0), ("virtualSourceDest", 3), ("sourceDest", 4), ("nonAbrInterworking", 5), ("sameAsCa", 14))).clone('sameAsCa')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmIfVptVccVcdTmAbrConnectionType.setStatus('mandatory')
atmIfVptVccVcdTmTxTdpTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 9, 20, 2, 2, 456), )
if mibBuilder.loadTexts: atmIfVptVccVcdTmTxTdpTable.setStatus('mandatory')
atmIfVptVccVcdTmTxTdpEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 9, 20, 2, 2, 456, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-AtmCoreMIB", "atmIfIndex"), (0, "Nortel-Magellan-Passport-AtmCoreMIB", "atmIfVptIndex"), (0, "Nortel-Magellan-Passport-AtmCoreMIB", "atmIfVptVccIndex"), (0, "Nortel-Magellan-Passport-AtmCoreMIB", "atmIfVptVccVcdIndex"), (0, "Nortel-Magellan-Passport-AtmCoreMIB", "atmIfVptVccVcdTmIndex"), (0, "Nortel-Magellan-Passport-AtmCoreMIB", "atmIfVptVccVcdTmTxTdpIndex"))
if mibBuilder.loadTexts: atmIfVptVccVcdTmTxTdpEntry.setStatus('mandatory')
atmIfVptVccVcdTmTxTdpIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 9, 20, 2, 2, 456, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 5)))
if mibBuilder.loadTexts: atmIfVptVccVcdTmTxTdpIndex.setStatus('mandatory')
atmIfVptVccVcdTmTxTdpValue = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 9, 20, 2, 2, 456, 1, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmIfVptVccVcdTmTxTdpValue.setStatus('mandatory')
atmIfVptVccVcdTmRxTdpTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 9, 20, 2, 2, 457), )
if mibBuilder.loadTexts: atmIfVptVccVcdTmRxTdpTable.setStatus('mandatory')
atmIfVptVccVcdTmRxTdpEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 9, 20, 2, 2, 457, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-AtmCoreMIB", "atmIfIndex"), (0, "Nortel-Magellan-Passport-AtmCoreMIB", "atmIfVptIndex"), (0, "Nortel-Magellan-Passport-AtmCoreMIB", "atmIfVptVccIndex"), (0, "Nortel-Magellan-Passport-AtmCoreMIB", "atmIfVptVccVcdIndex"), (0, "Nortel-Magellan-Passport-AtmCoreMIB", "atmIfVptVccVcdTmIndex"), (0, "Nortel-Magellan-Passport-AtmCoreMIB", "atmIfVptVccVcdTmRxTdpIndex"))
if mibBuilder.loadTexts: atmIfVptVccVcdTmRxTdpEntry.setStatus('mandatory')
atmIfVptVccVcdTmRxTdpIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 9, 20, 2, 2, 457, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 5)))
if mibBuilder.loadTexts: atmIfVptVccVcdTmRxTdpIndex.setStatus('mandatory')
atmIfVptVccVcdTmRxTdpValue = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 9, 20, 2, 2, 457, 1, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmIfVptVccVcdTmRxTdpValue.setStatus('mandatory')
atmIfVptVccVcdTmFqpTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 9, 20, 2, 2, 458), )
if mibBuilder.loadTexts: atmIfVptVccVcdTmFqpTable.setStatus('mandatory')
atmIfVptVccVcdTmFqpEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 9, 20, 2, 2, 458, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-AtmCoreMIB", "atmIfIndex"), (0, "Nortel-Magellan-Passport-AtmCoreMIB", "atmIfVptIndex"), (0, "Nortel-Magellan-Passport-AtmCoreMIB", "atmIfVptVccIndex"), (0, "Nortel-Magellan-Passport-AtmCoreMIB", "atmIfVptVccVcdIndex"), (0, "Nortel-Magellan-Passport-AtmCoreMIB", "atmIfVptVccVcdTmIndex"), (0, "Nortel-Magellan-Passport-AtmCoreMIB", "atmIfVptVccVcdTmFqpIndex"))
if mibBuilder.loadTexts: atmIfVptVccVcdTmFqpEntry.setStatus('mandatory')
atmIfVptVccVcdTmFqpIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 9, 20, 2, 2, 458, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("cdv", 0), ("ctd", 1), ("clr", 2))))
if mibBuilder.loadTexts: atmIfVptVccVcdTmFqpIndex.setStatus('mandatory')
atmIfVptVccVcdTmFqpValue = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 9, 20, 2, 2, 458, 1, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 16777215))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmIfVptVccVcdTmFqpValue.setStatus('mandatory')
atmIfVptVccVcdTmBqpTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 9, 20, 2, 2, 459), )
if mibBuilder.loadTexts: atmIfVptVccVcdTmBqpTable.setStatus('mandatory')
atmIfVptVccVcdTmBqpEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 9, 20, 2, 2, 459, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-AtmCoreMIB", "atmIfIndex"), (0, "Nortel-Magellan-Passport-AtmCoreMIB", "atmIfVptIndex"), (0, "Nortel-Magellan-Passport-AtmCoreMIB", "atmIfVptVccIndex"), (0, "Nortel-Magellan-Passport-AtmCoreMIB", "atmIfVptVccVcdIndex"), (0, "Nortel-Magellan-Passport-AtmCoreMIB", "atmIfVptVccVcdTmIndex"), (0, "Nortel-Magellan-Passport-AtmCoreMIB", "atmIfVptVccVcdTmBqpIndex"))
if mibBuilder.loadTexts: atmIfVptVccVcdTmBqpEntry.setStatus('mandatory')
atmIfVptVccVcdTmBqpIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 9, 20, 2, 2, 459, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 2))).clone(namedValues=NamedValues(("cdv", 0), ("clr", 2))))
if mibBuilder.loadTexts: atmIfVptVccVcdTmBqpIndex.setStatus('mandatory')
atmIfVptVccVcdTmBqpValue = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 9, 20, 2, 2, 459, 1, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 16777215))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmIfVptVccVcdTmBqpValue.setStatus('mandatory')
atmIfVptVccVcdTmAbr = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 9, 20, 2, 2, 2))
atmIfVptVccVcdTmAbrRowStatusTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 9, 20, 2, 2, 2, 1), )
if mibBuilder.loadTexts: atmIfVptVccVcdTmAbrRowStatusTable.setStatus('mandatory')
atmIfVptVccVcdTmAbrRowStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 9, 20, 2, 2, 2, 1, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-AtmCoreMIB", "atmIfIndex"), (0, "Nortel-Magellan-Passport-AtmCoreMIB", "atmIfVptIndex"), (0, "Nortel-Magellan-Passport-AtmCoreMIB", "atmIfVptVccIndex"), (0, "Nortel-Magellan-Passport-AtmCoreMIB", "atmIfVptVccVcdIndex"), (0, "Nortel-Magellan-Passport-AtmCoreMIB", "atmIfVptVccVcdTmIndex"), (0, "Nortel-Magellan-Passport-AtmCoreMIB", "atmIfVptVccVcdTmAbrIndex"))
if mibBuilder.loadTexts: atmIfVptVccVcdTmAbrRowStatusEntry.setStatus('mandatory')
atmIfVptVccVcdTmAbrRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 9, 20, 2, 2, 2, 1, 1, 1), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmIfVptVccVcdTmAbrRowStatus.setStatus('mandatory')
atmIfVptVccVcdTmAbrComponentName = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 9, 20, 2, 2, 2, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmIfVptVccVcdTmAbrComponentName.setStatus('mandatory')
atmIfVptVccVcdTmAbrStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 9, 20, 2, 2, 2, 1, 1, 4), StorageType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmIfVptVccVcdTmAbrStorageType.setStatus('mandatory')
atmIfVptVccVcdTmAbrIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 9, 20, 2, 2, 2, 1, 1, 10), NonReplicated())
if mibBuilder.loadTexts: atmIfVptVccVcdTmAbrIndex.setStatus('mandatory')
atmIfVptVccVcdTmAbrProvTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 9, 20, 2, 2, 2, 110), )
if mibBuilder.loadTexts: atmIfVptVccVcdTmAbrProvTable.setStatus('mandatory')
atmIfVptVccVcdTmAbrProvEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 9, 20, 2, 2, 2, 110, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-AtmCoreMIB", "atmIfIndex"), (0, "Nortel-Magellan-Passport-AtmCoreMIB", "atmIfVptIndex"), (0, "Nortel-Magellan-Passport-AtmCoreMIB", "atmIfVptVccIndex"), (0, "Nortel-Magellan-Passport-AtmCoreMIB", "atmIfVptVccVcdIndex"), (0, "Nortel-Magellan-Passport-AtmCoreMIB", "atmIfVptVccVcdTmIndex"), (0, "Nortel-Magellan-Passport-AtmCoreMIB", "atmIfVptVccVcdTmAbrIndex"))
if mibBuilder.loadTexts: atmIfVptVccVcdTmAbrProvEntry.setStatus('mandatory')
atmIfVptVccVcdTmAbrInitialCellRate = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 9, 20, 2, 2, 2, 110, 1, 10), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 16777215), ValueRangeConstraint(16777216, 16777216), ValueRangeConstraint(16777217, 16777217), ValueRangeConstraint(16777218, 16777218), )).clone(16777216)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmIfVptVccVcdTmAbrInitialCellRate.setStatus('mandatory')
atmIfVptVccVcdTmAbrTransientBufferExposure = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 9, 20, 2, 2, 2, 110, 1, 11), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 16777215)).clone(16777215)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmIfVptVccVcdTmAbrTransientBufferExposure.setStatus('mandatory')
atmIfVptVccVcdTmAbrFixedRoundTripTime = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 9, 20, 2, 2, 2, 110, 1, 12), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 16700000)).clone(5000000)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmIfVptVccVcdTmAbrFixedRoundTripTime.setStatus('mandatory')
atmIfVptVccVcdTmAbrRateDecreaseFactor = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 9, 20, 2, 2, 2, 110, 1, 13), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 15), ValueRangeConstraint(16777216, 16777216), )).clone(16777216)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmIfVptVccVcdTmAbrRateDecreaseFactor.setStatus('mandatory')
atmIfVptVccVcdTmAbrRateIncreaseFactor = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 9, 20, 2, 2, 2, 110, 1, 14), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 15), ValueRangeConstraint(16777216, 16777216), )).clone(16777216)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmIfVptVccVcdTmAbrRateIncreaseFactor.setStatus('mandatory')
atmIfVptVccVcdTmAbrMaxCellPerRmCell = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 9, 20, 2, 2, 2, 110, 1, 15), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(2, 2), ValueRangeConstraint(4, 4), ValueRangeConstraint(8, 8), ValueRangeConstraint(16, 16), ValueRangeConstraint(32, 32), ValueRangeConstraint(64, 64), ValueRangeConstraint(128, 128), ValueRangeConstraint(256, 256), ValueRangeConstraint(16777216, 16777216), )).clone(16777216)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmIfVptVccVcdTmAbrMaxCellPerRmCell.setStatus('mandatory')
atmIfVptVccVcdTmAbrMaxTimeBetweenRmCells = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 9, 20, 2, 2, 2, 110, 1, 16), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(781, 781), ValueRangeConstraint(1563, 1563), ValueRangeConstraint(3125, 3125), ValueRangeConstraint(6250, 6250), ValueRangeConstraint(12500, 12500), ValueRangeConstraint(25000, 25000), ValueRangeConstraint(50000, 50000), ValueRangeConstraint(100000, 100000), ValueRangeConstraint(16777216, 16777216), )).clone(16777216)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmIfVptVccVcdTmAbrMaxTimeBetweenRmCells.setStatus('mandatory')
atmIfVptVccVcdTmAbrCutoffDecreaseFactor = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 9, 20, 2, 2, 2, 110, 1, 17), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(1, 1), ValueRangeConstraint(2, 2), ValueRangeConstraint(4, 4), ValueRangeConstraint(8, 8), ValueRangeConstraint(16, 16), ValueRangeConstraint(32, 32), ValueRangeConstraint(64, 64), ValueRangeConstraint(16777216, 16777216), )).clone(16777216)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmIfVptVccVcdTmAbrCutoffDecreaseFactor.setStatus('mandatory')
atmIfVptVccVcdTmAbrAcrDecreaseTimeFactor = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 9, 20, 2, 2, 2, 110, 1, 18), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 1023), ValueRangeConstraint(16777216, 16777216), )).clone(16777216)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmIfVptVccVcdTmAbrAcrDecreaseTimeFactor.setStatus('mandatory')
atmIfVptVccVcdTmAbrDgcraMaximumDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 9, 20, 2, 2, 2, 110, 1, 19), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(1, 16700000), ValueRangeConstraint(16777216, 16777216), )).clone(16777216)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmIfVptVccVcdTmAbrDgcraMaximumDelay.setStatus('mandatory')
atmIfVptVccVcdTmAbrDgcraMinimumDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 9, 20, 2, 2, 2, 110, 1, 20), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(1, 16700000), ValueRangeConstraint(16777216, 16777216), )).clone(16777216)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmIfVptVccVcdTmAbrDgcraMinimumDelay.setStatus('mandatory')
atmIfVptVccVcdTmAbrFarEndAcrDecreaseTimeFactor = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 9, 20, 2, 2, 2, 110, 1, 21), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 1023), ValueRangeConstraint(1024, 1024), )).clone(1024)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmIfVptVccVcdTmAbrFarEndAcrDecreaseTimeFactor.setStatus('mandatory')
atmIfVptVccVcdTmAbrFarEndInitialCellRate = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 9, 20, 2, 2, 2, 110, 1, 22), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 16777215), ValueRangeConstraint(16777219, 16777219), )).clone(16777219)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmIfVptVccVcdTmAbrFarEndInitialCellRate.setStatus('mandatory')
atmIfVptVccLoop = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 9, 20, 3))
atmIfVptVccLoopRowStatusTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 9, 20, 3, 1), )
if mibBuilder.loadTexts: atmIfVptVccLoopRowStatusTable.setStatus('mandatory')
atmIfVptVccLoopRowStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 9, 20, 3, 1, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-AtmCoreMIB", "atmIfIndex"), (0, "Nortel-Magellan-Passport-AtmCoreMIB", "atmIfVptIndex"), (0, "Nortel-Magellan-Passport-AtmCoreMIB", "atmIfVptVccIndex"), (0, "Nortel-Magellan-Passport-AtmCoreMIB", "atmIfVptVccLoopIndex"))
if mibBuilder.loadTexts: atmIfVptVccLoopRowStatusEntry.setStatus('mandatory')
atmIfVptVccLoopRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 9, 20, 3, 1, 1, 1), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmIfVptVccLoopRowStatus.setStatus('mandatory')
atmIfVptVccLoopComponentName = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 9, 20, 3, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmIfVptVccLoopComponentName.setStatus('mandatory')
atmIfVptVccLoopStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 9, 20, 3, 1, 1, 4), StorageType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmIfVptVccLoopStorageType.setStatus('mandatory')
atmIfVptVccLoopIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 9, 20, 3, 1, 1, 10), NonReplicated())
if mibBuilder.loadTexts: atmIfVptVccLoopIndex.setStatus('mandatory')
atmIfVptVccNep = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 9, 20, 5))
atmIfVptVccNepRowStatusTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 9, 20, 5, 1), )
if mibBuilder.loadTexts: atmIfVptVccNepRowStatusTable.setStatus('mandatory')
atmIfVptVccNepRowStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 9, 20, 5, 1, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-AtmCoreMIB", "atmIfIndex"), (0, "Nortel-Magellan-Passport-AtmCoreMIB", "atmIfVptIndex"), (0, "Nortel-Magellan-Passport-AtmCoreMIB", "atmIfVptVccIndex"), (0, "Nortel-Magellan-Passport-AtmCoreMIB", "atmIfVptVccNepIndex"))
if mibBuilder.loadTexts: atmIfVptVccNepRowStatusEntry.setStatus('mandatory')
atmIfVptVccNepRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 9, 20, 5, 1, 1, 1), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmIfVptVccNepRowStatus.setStatus('mandatory')
atmIfVptVccNepComponentName = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 9, 20, 5, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmIfVptVccNepComponentName.setStatus('mandatory')
atmIfVptVccNepStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 9, 20, 5, 1, 1, 4), StorageType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmIfVptVccNepStorageType.setStatus('mandatory')
atmIfVptVccNepIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 9, 20, 5, 1, 1, 10), NonReplicated())
if mibBuilder.loadTexts: atmIfVptVccNepIndex.setStatus('mandatory')
atmIfVptVccNepProvTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 9, 20, 5, 100), )
if mibBuilder.loadTexts: atmIfVptVccNepProvTable.setStatus('mandatory')
atmIfVptVccNepProvEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 9, 20, 5, 100, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-AtmCoreMIB", "atmIfIndex"), (0, "Nortel-Magellan-Passport-AtmCoreMIB", "atmIfVptIndex"), (0, "Nortel-Magellan-Passport-AtmCoreMIB", "atmIfVptVccIndex"), (0, "Nortel-Magellan-Passport-AtmCoreMIB", "atmIfVptVccNepIndex"))
if mibBuilder.loadTexts: atmIfVptVccNepProvEntry.setStatus('mandatory')
atmIfVptVccNepApplicationName = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 9, 20, 5, 100, 1, 10), Link()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmIfVptVccNepApplicationName.setStatus('mandatory')
atmIfVptVccTest = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 9, 20, 6))
atmIfVptVccTestRowStatusTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 9, 20, 6, 1), )
if mibBuilder.loadTexts: atmIfVptVccTestRowStatusTable.setStatus('mandatory')
atmIfVptVccTestRowStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 9, 20, 6, 1, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-AtmCoreMIB", "atmIfIndex"), (0, "Nortel-Magellan-Passport-AtmCoreMIB", "atmIfVptIndex"), (0, "Nortel-Magellan-Passport-AtmCoreMIB", "atmIfVptVccIndex"), (0, "Nortel-Magellan-Passport-AtmCoreMIB", "atmIfVptVccTestIndex"))
if mibBuilder.loadTexts: atmIfVptVccTestRowStatusEntry.setStatus('mandatory')
atmIfVptVccTestRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 9, 20, 6, 1, 1, 1), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmIfVptVccTestRowStatus.setStatus('mandatory')
atmIfVptVccTestComponentName = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 9, 20, 6, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmIfVptVccTestComponentName.setStatus('mandatory')
atmIfVptVccTestStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 9, 20, 6, 1, 1, 4), StorageType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmIfVptVccTestStorageType.setStatus('mandatory')
atmIfVptVccTestIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 9, 20, 6, 1, 1, 10), NonReplicated())
if mibBuilder.loadTexts: atmIfVptVccTestIndex.setStatus('mandatory')
atmIfVptVccTestStateTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 9, 20, 6, 100), )
if mibBuilder.loadTexts: atmIfVptVccTestStateTable.setStatus('mandatory')
atmIfVptVccTestStateEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 9, 20, 6, 100, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-AtmCoreMIB", "atmIfIndex"), (0, "Nortel-Magellan-Passport-AtmCoreMIB", "atmIfVptIndex"), (0, "Nortel-Magellan-Passport-AtmCoreMIB", "atmIfVptVccIndex"), (0, "Nortel-Magellan-Passport-AtmCoreMIB", "atmIfVptVccTestIndex"))
if mibBuilder.loadTexts: atmIfVptVccTestStateEntry.setStatus('mandatory')
atmIfVptVccTestAdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 9, 20, 6, 100, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("locked", 0), ("unlocked", 1), ("shuttingDown", 2))).clone('unlocked')).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmIfVptVccTestAdminState.setStatus('mandatory')
atmIfVptVccTestOperationalState = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 9, 20, 6, 100, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1))).clone('disabled')).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmIfVptVccTestOperationalState.setStatus('mandatory')
atmIfVptVccTestUsageState = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 9, 20, 6, 100, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("idle", 0), ("active", 1), ("busy", 2))).clone('idle')).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmIfVptVccTestUsageState.setStatus('mandatory')
atmIfVptVccTestSetupTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 9, 20, 6, 110), )
if mibBuilder.loadTexts: atmIfVptVccTestSetupTable.setStatus('mandatory')
atmIfVptVccTestSetupEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 9, 20, 6, 110, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-AtmCoreMIB", "atmIfIndex"), (0, "Nortel-Magellan-Passport-AtmCoreMIB", "atmIfVptIndex"), (0, "Nortel-Magellan-Passport-AtmCoreMIB", "atmIfVptVccIndex"), (0, "Nortel-Magellan-Passport-AtmCoreMIB", "atmIfVptVccTestIndex"))
if mibBuilder.loadTexts: atmIfVptVccTestSetupEntry.setStatus('mandatory')
atmIfVptVccTestFrmTypes = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 9, 20, 6, 110, 1, 10), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 1)).setFixedLength(1).clone(hexValue="c0")).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmIfVptVccTestFrmTypes.setStatus('mandatory')
atmIfVptVccTestFrmSize = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 9, 20, 6, 110, 1, 20), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(4, 4096)).clone(1024)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmIfVptVccTestFrmSize.setStatus('mandatory')
atmIfVptVccTestFrmPatternType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 9, 20, 6, 110, 1, 30), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("ccitt32kBitPattern", 0), ("ccitt8MBitPattern", 1), ("customizedPattern", 2))).clone('ccitt32kBitPattern')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmIfVptVccTestFrmPatternType.setStatus('mandatory')
atmIfVptVccTestCustomizedPattern = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 9, 20, 6, 110, 1, 40), Hex().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295)).clone(1431655765)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmIfVptVccTestCustomizedPattern.setStatus('mandatory')
atmIfVptVccTestDuration = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 9, 20, 6, 110, 1, 50), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 30240)).clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmIfVptVccTestDuration.setStatus('mandatory')
atmIfVptVccTestBandwidthElastic = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 9, 20, 6, 110, 1, 60), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("no", 0), ("yes", 1))).clone('no')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmIfVptVccTestBandwidthElastic.setStatus('mandatory')
atmIfVptVccTestOverrideHoldingPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 9, 20, 6, 110, 1, 70), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 6))).clone(namedValues=NamedValues(("n0", 0), ("n1", 1), ("n2", 2), ("n3", 3), ("n4", 4), ("noOverride", 6))).clone('noOverride')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmIfVptVccTestOverrideHoldingPriority.setStatus('mandatory')
atmIfVptVccTestResultsTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 9, 20, 6, 120), )
if mibBuilder.loadTexts: atmIfVptVccTestResultsTable.setStatus('mandatory')
atmIfVptVccTestResultsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 9, 20, 6, 120, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-AtmCoreMIB", "atmIfIndex"), (0, "Nortel-Magellan-Passport-AtmCoreMIB", "atmIfVptIndex"), (0, "Nortel-Magellan-Passport-AtmCoreMIB", "atmIfVptVccIndex"), (0, "Nortel-Magellan-Passport-AtmCoreMIB", "atmIfVptVccTestIndex"))
if mibBuilder.loadTexts: atmIfVptVccTestResultsEntry.setStatus('mandatory')
atmIfVptVccTestElapsedTime = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 9, 20, 6, 120, 1, 10), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 30240))).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmIfVptVccTestElapsedTime.setStatus('mandatory')
atmIfVptVccTestTimeRemaining = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 9, 20, 6, 120, 1, 20), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 30240))).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmIfVptVccTestTimeRemaining.setStatus('mandatory')
atmIfVptVccTestCauseOfTermination = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 9, 20, 6, 120, 1, 30), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("testTimeExpired", 0), ("stoppedByOperator", 1), ("neverStarted", 2), ("testRunning", 3))).clone('neverStarted')).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmIfVptVccTestCauseOfTermination.setStatus('mandatory')
atmIfVptVccTestBytesTx = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 9, 20, 6, 120, 1, 40), PassportCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmIfVptVccTestBytesTx.setStatus('mandatory')
atmIfVptVccTestBytesRx = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 9, 20, 6, 120, 1, 50), PassportCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmIfVptVccTestBytesRx.setStatus('mandatory')
atmIfVptVccTestLoadingFrmTx = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 9, 20, 6, 120, 1, 60), PassportCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmIfVptVccTestLoadingFrmTx.setStatus('mandatory')
atmIfVptVccTestLoadingFrmRx = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 9, 20, 6, 120, 1, 70), PassportCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmIfVptVccTestLoadingFrmRx.setStatus('mandatory')
atmIfVptVccTestLoadingFrmLost = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 9, 20, 6, 120, 1, 80), PassportCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmIfVptVccTestLoadingFrmLost.setStatus('mandatory')
atmIfVptVccTestVerificationFrmTx = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 9, 20, 6, 120, 1, 90), PassportCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmIfVptVccTestVerificationFrmTx.setStatus('mandatory')
atmIfVptVccTestVerificationFrmRx = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 9, 20, 6, 120, 1, 100), PassportCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmIfVptVccTestVerificationFrmRx.setStatus('mandatory')
atmIfVptVccTestVerificationFrmBad = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 9, 20, 6, 120, 1, 110), PassportCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmIfVptVccTestVerificationFrmBad.setStatus('mandatory')
atmIfVptVccTestUnrecognizableFrmRx = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 9, 20, 6, 120, 1, 120), PassportCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmIfVptVccTestUnrecognizableFrmRx.setStatus('mandatory')
atmIfVptVccTm = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 9, 20, 7))
atmIfVptVccTmRowStatusTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 9, 20, 7, 1), )
if mibBuilder.loadTexts: atmIfVptVccTmRowStatusTable.setStatus('mandatory')
atmIfVptVccTmRowStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 9, 20, 7, 1, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-AtmCoreMIB", "atmIfIndex"), (0, "Nortel-Magellan-Passport-AtmCoreMIB", "atmIfVptIndex"), (0, "Nortel-Magellan-Passport-AtmCoreMIB", "atmIfVptVccIndex"), (0, "Nortel-Magellan-Passport-AtmCoreMIB", "atmIfVptVccTmIndex"))
if mibBuilder.loadTexts: atmIfVptVccTmRowStatusEntry.setStatus('mandatory')
atmIfVptVccTmRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 9, 20, 7, 1, 1, 1), RowStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmIfVptVccTmRowStatus.setStatus('mandatory')
atmIfVptVccTmComponentName = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 9, 20, 7, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmIfVptVccTmComponentName.setStatus('mandatory')
atmIfVptVccTmStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 9, 20, 7, 1, 1, 4), StorageType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmIfVptVccTmStorageType.setStatus('mandatory')
atmIfVptVccTmIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 9, 20, 7, 1, 1, 10), NonReplicated())
if mibBuilder.loadTexts: atmIfVptVccTmIndex.setStatus('mandatory')
atmIfVptVccTmOperTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 9, 20, 7, 100), )
if mibBuilder.loadTexts: atmIfVptVccTmOperTable.setStatus('mandatory')
atmIfVptVccTmOperEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 9, 20, 7, 100, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-AtmCoreMIB", "atmIfIndex"), (0, "Nortel-Magellan-Passport-AtmCoreMIB", "atmIfVptIndex"), (0, "Nortel-Magellan-Passport-AtmCoreMIB", "atmIfVptVccIndex"), (0, "Nortel-Magellan-Passport-AtmCoreMIB", "atmIfVptVccTmIndex"))
if mibBuilder.loadTexts: atmIfVptVccTmOperEntry.setStatus('mandatory')
atmIfVptVccTmTxTrafficDescType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 9, 20, 7, 100, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9))).clone(namedValues=NamedValues(("n1", 1), ("n2", 2), ("n3", 3), ("n4", 4), ("n5", 5), ("n6", 6), ("n7", 7), ("n8", 8), ("n9", 9)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmIfVptVccTmTxTrafficDescType.setStatus('mandatory')
atmIfVptVccTmTxQosClass = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 9, 20, 7, 100, 1, 31), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 14))).clone(namedValues=NamedValues(("n0", 0), ("n1", 1), ("n2", 2), ("n3", 3), ("n4", 4), ("notApplicable", 14)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmIfVptVccTmTxQosClass.setStatus('mandatory')
atmIfVptVccTmTxQueueLength = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 9, 20, 7, 100, 1, 32), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 30720))).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmIfVptVccTmTxQueueLength.setStatus('mandatory')
atmIfVptVccTmTxQueueCongestionState = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 9, 20, 7, 100, 1, 33), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 3))).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmIfVptVccTmTxQueueCongestionState.setStatus('mandatory')
atmIfVptVccTmHoldingPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 9, 20, 7, 100, 1, 35), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 6))).clone(namedValues=NamedValues(("n0", 0), ("n1", 1), ("n2", 2), ("n3", 3), ("n4", 4), ("notApplicable", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmIfVptVccTmHoldingPriority.setStatus('mandatory')
atmIfVptVccTmRxTrafficDescType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 9, 20, 7, 100, 1, 40), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9))).clone(namedValues=NamedValues(("n1", 1), ("n2", 2), ("n3", 3), ("n4", 4), ("n5", 5), ("n6", 6), ("n7", 7), ("n8", 8), ("n9", 9)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmIfVptVccTmRxTrafficDescType.setStatus('mandatory')
atmIfVptVccTmRxQosClass = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 9, 20, 7, 100, 1, 61), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 14))).clone(namedValues=NamedValues(("n0", 0), ("n1", 1), ("n2", 2), ("n3", 3), ("n4", 4), ("notApplicable", 14)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmIfVptVccTmRxQosClass.setStatus('mandatory')
atmIfVptVccTmAtmServiceCategory = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 9, 20, 7, 100, 1, 62), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4))).clone(namedValues=NamedValues(("unspecifiedBitRate", 0), ("constantBitRate", 1), ("rtVariableBitRate", 2), ("nrtVariableBitRate", 3), ("availableBitRate", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmIfVptVccTmAtmServiceCategory.setStatus('mandatory')
atmIfVptVccTmTrafficShaping = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 9, 20, 7, 100, 1, 70), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 4, 5, 6, 7))).clone(namedValues=NamedValues(("disabled", 1), ("notApplicable", 4), ("linear", 5), ("inverseUpc", 6), ("dynamic", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmIfVptVccTmTrafficShaping.setStatus('mandatory')
atmIfVptVccTmBearerClassBbc = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 9, 20, 7, 100, 1, 71), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 3, 16, 24, 30))).clone(namedValues=NamedValues(("a", 1), ("c", 3), ("x", 16), ("vp", 24), ("notApplicable", 30)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmIfVptVccTmBearerClassBbc.setStatus('mandatory')
atmIfVptVccTmTransferCapabilityBbc = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 9, 20, 7, 100, 1, 72), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 5, 8, 9, 10, 30))).clone(namedValues=NamedValues(("n0", 0), ("n1", 1), ("n2", 2), ("n5", 5), ("n8", 8), ("n9", 9), ("n10", 10), ("notApplicable", 30)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmIfVptVccTmTransferCapabilityBbc.setStatus('mandatory')
atmIfVptVccTmClippingBbc = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 9, 20, 7, 100, 1, 74), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 14))).clone(namedValues=NamedValues(("no", 0), ("yes", 1), ("notApplicable", 14)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmIfVptVccTmClippingBbc.setStatus('mandatory')
atmIfVptVccTmUnshapedTransmitQueueing = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 9, 20, 7, 100, 1, 75), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 4, 5))).clone(namedValues=NamedValues(("perVc", 0), ("common", 1), ("notApplicable", 4), ("fifo", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmIfVptVccTmUnshapedTransmitQueueing.setStatus('mandatory')
atmIfVptVccTmBestEffort = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 9, 20, 7, 100, 1, 76), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 14))).clone(namedValues=NamedValues(("indicated", 0), ("notIndicated", 1), ("notApplicable", 14)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmIfVptVccTmBestEffort.setStatus('mandatory')
atmIfVptVccTmForceTagging = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 9, 20, 7, 100, 1, 78), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("enabled", 0), ("disabled", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmIfVptVccTmForceTagging.setStatus('mandatory')
atmIfVptVccTmWeight = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 9, 20, 7, 100, 1, 79), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(1, 4095), ValueRangeConstraint(65534, 65534), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmIfVptVccTmWeight.setStatus('mandatory')
atmIfVptVccTmUsageParameterControl = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 9, 20, 7, 100, 1, 80), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 3, 4, 5, 6))).clone(namedValues=NamedValues(("enforced", 0), ("disabled", 1), ("notApplicable", 3), ("monitored", 4), ("abrMonitored", 5), ("abrEnforced", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmIfVptVccTmUsageParameterControl.setStatus('mandatory')
atmIfVptVccTmTxPacketWiseDiscard = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 9, 20, 7, 100, 1, 85), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 1)).setFixedLength(1)).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmIfVptVccTmTxPacketWiseDiscard.setStatus('mandatory')
atmIfVptVccTmRxPacketWiseDiscard = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 9, 20, 7, 100, 1, 86), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 1)).setFixedLength(1)).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmIfVptVccTmRxPacketWiseDiscard.setStatus('mandatory')
atmIfVptVccTmBandwidthElastic = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 9, 20, 7, 100, 1, 90), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("no", 0), ("yes", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmIfVptVccTmBandwidthElastic.setStatus('mandatory')
atmIfVptVccTmBandwidthReduction = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 9, 20, 7, 100, 1, 100), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmIfVptVccTmBandwidthReduction.setStatus('mandatory')
atmIfVptVccTmAbrConnectionType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 9, 20, 7, 100, 1, 110), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 15))).clone(namedValues=NamedValues(("erSwitch", 1), ("efciSwitch", 2), ("virtualSourceDest", 3), ("sourceDest", 4), ("nonAbrInterworking", 5), ("notApplicable", 15)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmIfVptVccTmAbrConnectionType.setStatus('mandatory')
atmIfVptVccTmTxTdpTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 9, 20, 7, 451), )
if mibBuilder.loadTexts: atmIfVptVccTmTxTdpTable.setStatus('mandatory')
atmIfVptVccTmTxTdpEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 9, 20, 7, 451, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-AtmCoreMIB", "atmIfIndex"), (0, "Nortel-Magellan-Passport-AtmCoreMIB", "atmIfVptIndex"), (0, "Nortel-Magellan-Passport-AtmCoreMIB", "atmIfVptVccIndex"), (0, "Nortel-Magellan-Passport-AtmCoreMIB", "atmIfVptVccTmIndex"), (0, "Nortel-Magellan-Passport-AtmCoreMIB", "atmIfVptVccTmTxTdpIndex"))
if mibBuilder.loadTexts: atmIfVptVccTmTxTdpEntry.setStatus('mandatory')
atmIfVptVccTmTxTdpIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 9, 20, 7, 451, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 5)))
if mibBuilder.loadTexts: atmIfVptVccTmTxTdpIndex.setStatus('mandatory')
atmIfVptVccTmTxTdpValue = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 9, 20, 7, 451, 1, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmIfVptVccTmTxTdpValue.setStatus('mandatory')
atmIfVptVccTmTxQThreshTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 9, 20, 7, 452), )
if mibBuilder.loadTexts: atmIfVptVccTmTxQThreshTable.setStatus('mandatory')
atmIfVptVccTmTxQThreshEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 9, 20, 7, 452, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-AtmCoreMIB", "atmIfIndex"), (0, "Nortel-Magellan-Passport-AtmCoreMIB", "atmIfVptIndex"), (0, "Nortel-Magellan-Passport-AtmCoreMIB", "atmIfVptVccIndex"), (0, "Nortel-Magellan-Passport-AtmCoreMIB", "atmIfVptVccTmIndex"), (0, "Nortel-Magellan-Passport-AtmCoreMIB", "atmIfVptVccTmTxQThreshIndex"))
if mibBuilder.loadTexts: atmIfVptVccTmTxQThreshEntry.setStatus('mandatory')
atmIfVptVccTmTxQThreshIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 9, 20, 7, 452, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 3)))
if mibBuilder.loadTexts: atmIfVptVccTmTxQThreshIndex.setStatus('mandatory')
atmIfVptVccTmTxQThreshValue = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 9, 20, 7, 452, 1, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 30720))).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmIfVptVccTmTxQThreshValue.setStatus('mandatory')
atmIfVptVccTmRxTdpTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 9, 20, 7, 453), )
if mibBuilder.loadTexts: atmIfVptVccTmRxTdpTable.setStatus('mandatory')
atmIfVptVccTmRxTdpEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 9, 20, 7, 453, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-AtmCoreMIB", "atmIfIndex"), (0, "Nortel-Magellan-Passport-AtmCoreMIB", "atmIfVptIndex"), (0, "Nortel-Magellan-Passport-AtmCoreMIB", "atmIfVptVccIndex"), (0, "Nortel-Magellan-Passport-AtmCoreMIB", "atmIfVptVccTmIndex"), (0, "Nortel-Magellan-Passport-AtmCoreMIB", "atmIfVptVccTmRxTdpIndex"))
if mibBuilder.loadTexts: atmIfVptVccTmRxTdpEntry.setStatus('mandatory')
atmIfVptVccTmRxTdpIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 9, 20, 7, 453, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4)))
if mibBuilder.loadTexts: atmIfVptVccTmRxTdpIndex.setStatus('mandatory')
atmIfVptVccTmRxTdpValue = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 9, 20, 7, 453, 1, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmIfVptVccTmRxTdpValue.setStatus('mandatory')
atmIfVptVccTmTqpTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 9, 20, 7, 454), )
if mibBuilder.loadTexts: atmIfVptVccTmTqpTable.setStatus('mandatory')
atmIfVptVccTmTqpEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 9, 20, 7, 454, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-AtmCoreMIB", "atmIfIndex"), (0, "Nortel-Magellan-Passport-AtmCoreMIB", "atmIfVptIndex"), (0, "Nortel-Magellan-Passport-AtmCoreMIB", "atmIfVptVccIndex"), (0, "Nortel-Magellan-Passport-AtmCoreMIB", "atmIfVptVccTmIndex"), (0, "Nortel-Magellan-Passport-AtmCoreMIB", "atmIfVptVccTmTqpIndex"))
if mibBuilder.loadTexts: atmIfVptVccTmTqpEntry.setStatus('mandatory')
atmIfVptVccTmTqpIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 9, 20, 7, 454, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("cdv", 0), ("ctd", 1), ("clr", 2))))
if mibBuilder.loadTexts: atmIfVptVccTmTqpIndex.setStatus('mandatory')
atmIfVptVccTmTqpValue = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 9, 20, 7, 454, 1, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmIfVptVccTmTqpValue.setStatus('mandatory')
atmIfVptVccTmRqpTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 9, 20, 7, 455), )
if mibBuilder.loadTexts: atmIfVptVccTmRqpTable.setStatus('mandatory')
atmIfVptVccTmRqpEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 9, 20, 7, 455, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-AtmCoreMIB", "atmIfIndex"), (0, "Nortel-Magellan-Passport-AtmCoreMIB", "atmIfVptIndex"), (0, "Nortel-Magellan-Passport-AtmCoreMIB", "atmIfVptVccIndex"), (0, "Nortel-Magellan-Passport-AtmCoreMIB", "atmIfVptVccTmIndex"), (0, "Nortel-Magellan-Passport-AtmCoreMIB", "atmIfVptVccTmRqpIndex"))
if mibBuilder.loadTexts: atmIfVptVccTmRqpEntry.setStatus('mandatory')
atmIfVptVccTmRqpIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 9, 20, 7, 455, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("cdv", 0), ("ctd", 1), ("clr", 2))))
if mibBuilder.loadTexts: atmIfVptVccTmRqpIndex.setStatus('mandatory')
atmIfVptVccTmRqpValue = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 9, 20, 7, 455, 1, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmIfVptVccTmRqpValue.setStatus('mandatory')
atmIfVptVccTmAbr = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 9, 20, 7, 2))
atmIfVptVccTmAbrRowStatusTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 9, 20, 7, 2, 1), )
if mibBuilder.loadTexts: atmIfVptVccTmAbrRowStatusTable.setStatus('mandatory')
atmIfVptVccTmAbrRowStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 9, 20, 7, 2, 1, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-AtmCoreMIB", "atmIfIndex"), (0, "Nortel-Magellan-Passport-AtmCoreMIB", "atmIfVptIndex"), (0, "Nortel-Magellan-Passport-AtmCoreMIB", "atmIfVptVccIndex"), (0, "Nortel-Magellan-Passport-AtmCoreMIB", "atmIfVptVccTmIndex"), (0, "Nortel-Magellan-Passport-AtmCoreMIB", "atmIfVptVccTmAbrIndex"))
if mibBuilder.loadTexts: atmIfVptVccTmAbrRowStatusEntry.setStatus('mandatory')
atmIfVptVccTmAbrRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 9, 20, 7, 2, 1, 1, 1), RowStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmIfVptVccTmAbrRowStatus.setStatus('mandatory')
atmIfVptVccTmAbrComponentName = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 9, 20, 7, 2, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmIfVptVccTmAbrComponentName.setStatus('mandatory')
atmIfVptVccTmAbrStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 9, 20, 7, 2, 1, 1, 4), StorageType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmIfVptVccTmAbrStorageType.setStatus('mandatory')
atmIfVptVccTmAbrIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 9, 20, 7, 2, 1, 1, 10), NonReplicated())
if mibBuilder.loadTexts: atmIfVptVccTmAbrIndex.setStatus('mandatory')
atmIfVptVccTmAbrOperTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 9, 20, 7, 2, 110), )
if mibBuilder.loadTexts: atmIfVptVccTmAbrOperTable.setStatus('mandatory')
atmIfVptVccTmAbrOperEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 9, 20, 7, 2, 110, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-AtmCoreMIB", "atmIfIndex"), (0, "Nortel-Magellan-Passport-AtmCoreMIB", "atmIfVptIndex"), (0, "Nortel-Magellan-Passport-AtmCoreMIB", "atmIfVptVccIndex"), (0, "Nortel-Magellan-Passport-AtmCoreMIB", "atmIfVptVccTmIndex"), (0, "Nortel-Magellan-Passport-AtmCoreMIB", "atmIfVptVccTmAbrIndex"))
if mibBuilder.loadTexts: atmIfVptVccTmAbrOperEntry.setStatus('mandatory')
atmIfVptVccTmAbrInitialCellRate = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 9, 20, 7, 2, 110, 1, 10), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 16777215))).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmIfVptVccTmAbrInitialCellRate.setStatus('mandatory')
atmIfVptVccTmAbrTransientBufferExposure = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 9, 20, 7, 2, 110, 1, 11), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 16777215))).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmIfVptVccTmAbrTransientBufferExposure.setStatus('mandatory')
atmIfVptVccTmAbrFixedRoundTripTime = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 9, 20, 7, 2, 110, 1, 12), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 16700000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmIfVptVccTmAbrFixedRoundTripTime.setStatus('mandatory')
atmIfVptVccTmAbrRateDecreaseFactor = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 9, 20, 7, 2, 110, 1, 13), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 15))).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmIfVptVccTmAbrRateDecreaseFactor.setStatus('mandatory')
atmIfVptVccTmAbrRateIncreaseFactor = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 9, 20, 7, 2, 110, 1, 14), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 15))).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmIfVptVccTmAbrRateIncreaseFactor.setStatus('mandatory')
atmIfVptVccTmAbrMaxCellPerRmCell = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 9, 20, 7, 2, 110, 1, 15), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(2, 2), ValueRangeConstraint(4, 4), ValueRangeConstraint(8, 8), ValueRangeConstraint(16, 16), ValueRangeConstraint(32, 32), ValueRangeConstraint(64, 64), ValueRangeConstraint(128, 128), ValueRangeConstraint(256, 256), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmIfVptVccTmAbrMaxCellPerRmCell.setStatus('mandatory')
atmIfVptVccTmAbrMaxTimeBetweenRmCell = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 9, 20, 7, 2, 110, 1, 16), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(781, 781), ValueRangeConstraint(1563, 1563), ValueRangeConstraint(3125, 3125), ValueRangeConstraint(6250, 6250), ValueRangeConstraint(12500, 12500), ValueRangeConstraint(25000, 25000), ValueRangeConstraint(50000, 50000), ValueRangeConstraint(100000, 100000), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmIfVptVccTmAbrMaxTimeBetweenRmCell.setStatus('mandatory')
atmIfVptVccTmAbrCutoffDecreaseFactor = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 9, 20, 7, 2, 110, 1, 17), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(1, 1), ValueRangeConstraint(2, 2), ValueRangeConstraint(4, 4), ValueRangeConstraint(8, 8), ValueRangeConstraint(16, 16), ValueRangeConstraint(32, 32), ValueRangeConstraint(64, 64), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmIfVptVccTmAbrCutoffDecreaseFactor.setStatus('mandatory')
atmIfVptVccTmAbrAcrDecreaseTimeFactor = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 9, 20, 7, 2, 110, 1, 18), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 1023))).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmIfVptVccTmAbrAcrDecreaseTimeFactor.setStatus('mandatory')
atmIfVptVccTmAbrForwardRmCellLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 9, 20, 7, 2, 110, 1, 19), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(1, 1), ValueRangeConstraint(3, 3), ValueRangeConstraint(7, 7), ValueRangeConstraint(15, 15), ValueRangeConstraint(31, 31), ValueRangeConstraint(63, 63), ValueRangeConstraint(127, 127), ValueRangeConstraint(255, 255), ValueRangeConstraint(511, 511), ValueRangeConstraint(1023, 1023), ValueRangeConstraint(2047, 2047), ValueRangeConstraint(4095, 4095), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmIfVptVccTmAbrForwardRmCellLimit.setStatus('mandatory')
atmIfVptVccTmAbrTxRateChangeInfo = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 9, 20, 7, 2, 110, 1, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("congestionIndicated", 0), ("noIncreaseIndicated", 1), ("explicitRateIndicated", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmIfVptVccTmAbrTxRateChangeInfo.setStatus('obsolete')
atmIfVptVccTmAbrAcrRateChangeInfo = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 9, 20, 7, 2, 110, 1, 21), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 15))).clone(namedValues=NamedValues(("noChange", 0), ("decreasedByRdf", 1), ("increasedByRif", 2), ("setToExplicitRate", 3), ("notApplicable", 15)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmIfVptVccTmAbrAcrRateChangeInfo.setStatus('mandatory')
atmIfVptVccTmAbrTxFwdRmCells = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 9, 20, 7, 2, 110, 1, 22), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4095))).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmIfVptVccTmAbrTxFwdRmCells.setStatus('mandatory')
atmIfVptVccTmAbrRxEfci = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 9, 20, 7, 2, 110, 1, 23), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("notIndicated", 0), ("indicated", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmIfVptVccTmAbrRxEfci.setStatus('mandatory')
atmIfVptVccTmAbrBrmRateChangeInfo = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 9, 20, 7, 2, 110, 1, 24), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 1)).setFixedLength(1)).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmIfVptVccTmAbrBrmRateChangeInfo.setStatus('mandatory')
atmIfVptVccTmAbrBrmExplicitRate = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 9, 20, 7, 2, 110, 1, 25), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 16777215))).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmIfVptVccTmAbrBrmExplicitRate.setStatus('mandatory')
atmIfEp = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 10))
atmIfEpRowStatusTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 10, 1), )
if mibBuilder.loadTexts: atmIfEpRowStatusTable.setStatus('mandatory')
atmIfEpRowStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 10, 1, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-AtmCoreMIB", "atmIfIndex"), (0, "Nortel-Magellan-Passport-AtmCoreMIB", "atmIfEpIndex"))
if mibBuilder.loadTexts: atmIfEpRowStatusEntry.setStatus('mandatory')
atmIfEpRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 10, 1, 1, 1), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmIfEpRowStatus.setStatus('mandatory')
atmIfEpComponentName = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 10, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmIfEpComponentName.setStatus('mandatory')
atmIfEpStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 10, 1, 1, 4), StorageType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmIfEpStorageType.setStatus('mandatory')
atmIfEpIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 10, 1, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(2, 7)))
if mibBuilder.loadTexts: atmIfEpIndex.setStatus('mandatory')
atmIfEpProvTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 10, 100), )
if mibBuilder.loadTexts: atmIfEpProvTable.setStatus('mandatory')
atmIfEpProvEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 10, 100, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-AtmCoreMIB", "atmIfIndex"), (0, "Nortel-Magellan-Passport-AtmCoreMIB", "atmIfEpIndex"))
if mibBuilder.loadTexts: atmIfEpProvEntry.setStatus('mandatory')
atmIfEpMinimumBandwidthGuarantee = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 10, 100, 1, 1), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(1, 49), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmIfEpMinimumBandwidthGuarantee.setStatus('mandatory')
atmCoreGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 2, 4, 2, 123, 1))
atmCoreGroupBE = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 2, 4, 2, 123, 1, 5))
atmCoreGroupBE01 = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 2, 4, 2, 123, 1, 5, 2))
atmCoreGroupBE01A = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 2, 4, 2, 123, 1, 5, 2, 2))
atmCoreCapabilities = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 2, 4, 2, 123, 3))
atmCoreCapabilitiesBE = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 2, 4, 2, 123, 3, 5))
atmCoreCapabilitiesBE01 = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 2, 4, 2, 123, 3, 5, 2))
atmCoreCapabilitiesBE01A = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 2, 4, 2, 123, 3, 5, 2, 2))
mibBuilder.exportSymbols("Nortel-Magellan-Passport-AtmCoreMIB", atmIfVccTmTxTdpTable=atmIfVccTmTxTdpTable, atmIfVccTmRxTdpValue=atmIfVccTmRxTdpValue, atmIfVptVccTxTrafficDescType=atmIfVptVccTxTrafficDescType, atmIfCAMaxAutoSelectedVciForVpiZero=atmIfCAMaxAutoSelectedVciForVpiZero, atmIfIndex=atmIfIndex, atmIfVccNepComponentName=atmIfVccNepComponentName, atmIfCACbrCdv=atmIfCACbrCdv, atmIfVccVcdFwdQosClass=atmIfVccVcdFwdQosClass, atmIfVpcTmIndex=atmIfVpcTmIndex, atmIfVptCABwPoolEntry=atmIfVptCABwPoolEntry, atmIfVptRxFrameDiscard=atmIfVptRxFrameDiscard, atmIfConnMapStorageType=atmIfConnMapStorageType, atmIfVccTmTqpEntry=atmIfVccTmTqpEntry, atmIfVccTmTxTdpValue=atmIfVccTmTxTdpValue, atmIfCAPoolAvailBwEntry=atmIfCAPoolAvailBwEntry, atmIfVptTmTqpValue=atmIfVptTmTqpValue, atmIfVccLoop=atmIfVccLoop, atmIfVpcVpdTmRxTdpValue=atmIfVpcVpdTmRxTdpValue, atmIfVccVcdTmFqpEntry=atmIfVccVcdTmFqpEntry, atmIfVpcTmAbrMaxCellPerRmCell=atmIfVpcTmAbrMaxCellPerRmCell, atmCoreCapabilitiesBE01A=atmCoreCapabilitiesBE01A, atmIfVccVcdTmBqpTable=atmIfVccVcdTmBqpTable, atmIfVptVpdTxTrafficDescType=atmIfVptVpdTxTrafficDescType, atmIfVpcStatsRxAal5FrameError=atmIfVpcStatsRxAal5FrameError, atmIfVptStateEntry=atmIfVptStateEntry, atmIfVccTmAbrIndex=atmIfVccTmAbrIndex, atmIfVccVcd=atmIfVccVcd, atmIfVptVccVcdTmBqpIndex=atmIfVptVccVcdTmBqpIndex, atmIfVptVpdTmRowStatusTable=atmIfVptVpdTmRowStatusTable, atmIfVptCANrtVbr=atmIfVptCANrtVbr, atmIfCACbrProvCdvt=atmIfCACbrProvCdvt, atmIfVptVccVcdIndex=atmIfVptVccVcdIndex, atmIfVptVccClippingBbc=atmIfVptVccClippingBbc, atmIfCAUbrOpUnshapedTransmitQueueing=atmIfCAUbrOpUnshapedTransmitQueueing, atmIfVptStatsTxFrameDiscardClp=atmIfVptStatsTxFrameDiscardClp, atmIfEndToEndLoopback=atmIfEndToEndLoopback, atmIfVpcTmComponentName=atmIfVpcTmComponentName, atmIfVccTm=atmIfVccTm, atmIfVccVcdFqpValue=atmIfVccVcdFqpValue, atmIfVptVpdFwdFrameDiscard=atmIfVptVpdFwdFrameDiscard, atmIfVccUnshapedTransmitQueueing=atmIfVccUnshapedTransmitQueueing, atmIfVpcVpdTxQosClass=atmIfVpcVpdTxQosClass, atmIfVptVccUnshapedTransmitQueueing=atmIfVptVccUnshapedTransmitQueueing, atmIfCACbrProvEntry=atmIfCACbrProvEntry, atmIfVccTxTdpValue=atmIfVccTxTdpValue, atmIfCustomerIdentifier=atmIfCustomerIdentifier, atmIfVptTmAbrForwardRmCellLimit=atmIfVptTmAbrForwardRmCellLimit, atmIfVptCANrtVbrRowStatusEntry=atmIfVptCANrtVbrRowStatusEntry, atmCoreGroupBE01A=atmCoreGroupBE01A, atmIfCANrtVbrUsageParameterControl=atmIfCANrtVbrUsageParameterControl, atmIfVptCANrtVbrProvTable=atmIfVptCANrtVbrProvTable, atmIfVpcAtmServiceCategory=atmIfVpcAtmServiceCategory, atmIfVptVccLoop=atmIfVptVccLoop, atmIfVptCAAbrIndex=atmIfVptCAAbrIndex, atmIfVptCANrtVbrPool=atmIfVptCANrtVbrPool, atmIfCAUbrMinPerVcQueueLimit=atmIfCAUbrMinPerVcQueueLimit, atmIfVccTestSetupEntry=atmIfVccTestSetupEntry, atmIfVccTmAbrRxEfci=atmIfVccTmAbrRxEfci, atmIfStandbyStatus=atmIfStandbyStatus, atmIfCAUbrVptUsage=atmIfCAUbrVptUsage, atmIfVptCAUbr=atmIfVptCAUbr, atmIfOperTable=atmIfOperTable, atmIfVccVcdRxTdpValue=atmIfVccVcdRxTdpValue, atmIfVptVccTmAbrTransientBufferExposure=atmIfVptVccTmAbrTransientBufferExposure, atmIfVpcVpdTmAbrFarEndInitialCellRate=atmIfVpcVpdTmAbrFarEndInitialCellRate, atmIfVpcBqpValue=atmIfVpcBqpValue, atmIfCAPoolProvBwEntry=atmIfCAPoolProvBwEntry, atmIfCAPoolAvailBwIndex=atmIfCAPoolAvailBwIndex, atmIfVccVcdTmTxTdpTable=atmIfVccVcdTmTxTdpTable, atmIfVpcVpdBqpIndex=atmIfVpcVpdBqpIndex, atmIfVccVcdTmBqpValue=atmIfVccVcdTmBqpValue, atmIfVptVccVcdFwdQosClass=atmIfVptVccVcdFwdQosClass, atmIfUsageState=atmIfUsageState, atmIfVptTmAbrConnectionType=atmIfVptTmAbrConnectionType, atmIfVptCARowStatusEntry=atmIfVptCARowStatusEntry, atmIfNAcctProvTable=atmIfNAcctProvTable, atmIfVccNepProvEntry=atmIfVccNepProvEntry, atmIfVpcTxTdpTable=atmIfVpcTxTdpTable, atmIfVccAtmServiceCategory=atmIfVccAtmServiceCategory, atmIfVptBandwidthReduction=atmIfVptBandwidthReduction, atmIfVptVccVcdTmAbrTransientBufferExposure=atmIfVptVccVcdTmAbrTransientBufferExposure, atmIfVccVcdTmTrafficShaping=atmIfVccVcdTmTrafficShaping, atmIfVptTmTxTrafficDescType=atmIfVptTmTxTrafficDescType, atmIfVpcTmTxPacketWiseDiscard=atmIfVpcTmTxPacketWiseDiscard, atmIfVpcVpdTmProvTable=atmIfVpcVpdTmProvTable, atmIfVptVccVcdHoldingPriority=atmIfVptVccVcdHoldingPriority, atmIfVccVcdTmAbrDgcraMaximumDelay=atmIfVccVcdTmAbrDgcraMaximumDelay, atmIfVpcTxDiscardClp=atmIfVpcTxDiscardClp, atmIfLastDroppedRxCellConnection=atmIfLastDroppedRxCellConnection, atmIfVptVccTmComponentName=atmIfVptVccTmComponentName, atmIfVptTm=atmIfVptTm, atmIfVpcTxQThreshTable=atmIfVpcTxQThreshTable, atmIfVptCARowStatus=atmIfVptCARowStatus, atmIfVccVcdTmAbrFarEndAcrDecreaseTimeFactor=atmIfVccVcdTmAbrFarEndAcrDecreaseTimeFactor, atmIfVptStatsRxFrameDiscardClp=atmIfVptStatsRxFrameDiscardClp, atmIfVptAisState=atmIfVptAisState, atmIfVccNepStorageType=atmIfVccNepStorageType, atmIfVptVccTxQueueLength=atmIfVptVccTxQueueLength, atmIfVccRowStatusTable=atmIfVccRowStatusTable, atmIfVptVpdHoldingPriority=atmIfVptVpdHoldingPriority, atmIfVptTmTransferCapabilityBbc=atmIfVptTmTransferCapabilityBbc, atmIfVptVccComponentName=atmIfVptVccComponentName, atmIfVptTmAbrTxFwdRmCells=atmIfVptTmAbrTxFwdRmCells, atmIfVptVccVcdTmAbrIndex=atmIfVptVccVcdTmAbrIndex, atmIfVccVcdTmRxPacketWiseDiscard=atmIfVccVcdTmRxPacketWiseDiscard, atmIfVptVpdTmTxTdpEntry=atmIfVptVpdTmTxTdpEntry, atmIfVptCAPoolAdmConnsEntry=atmIfVptCAPoolAdmConnsEntry, atmIfCAPoolProvBwTable=atmIfCAPoolProvBwTable, atmIfCAUbrRowStatusTable=atmIfCAUbrRowStatusTable, atmIfVpcTxTrafficDescType=atmIfVpcTxTrafficDescType, atmIfVptVpdUnshapedTransmitQueueing=atmIfVptVpdUnshapedTransmitQueueing, atmIfVptRxTdpIndex=atmIfVptRxTdpIndex, atmIfCACbrUnshapedTransmitQueueing=atmIfCACbrUnshapedTransmitQueueing, atmIfVccLoopIndex=atmIfVccLoopIndex, atmIfVptVpdRowStatus=atmIfVptVpdRowStatus, atmIfVptVpdTmAbrFarEndInitialCellRate=atmIfVptVpdTmAbrFarEndInitialCellRate, atmIfCANrtVbrShapeRecoupPolicy=atmIfCANrtVbrShapeRecoupPolicy, atmIfVpcVpdTmAbrDgcraMinimumDelay=atmIfVpcVpdTmAbrDgcraMinimumDelay, atmIfVptVpdTmTrafficShaping=atmIfVptVpdTmTrafficShaping, atmIfVptVpdTmAbrMaxTimeBetweenRmCells=atmIfVptVpdTmAbrMaxTimeBetweenRmCells, atmIfVptCARtVbrPool=atmIfVptCARtVbrPool, atmIfVpcVpdTrafficShaping=atmIfVpcVpdTrafficShaping, atmIfVccVcdBqpValue=atmIfVccVcdBqpValue, atmIfConnMapNumNonZeroVpisForVccsOper=atmIfConnMapNumNonZeroVpisForVccsOper, atmIfVptVccTmAbrAcrDecreaseTimeFactor=atmIfVptVccTmAbrAcrDecreaseTimeFactor, atmIfVccStatsTxFrameDiscardClp=atmIfVccStatsTxFrameDiscardClp, atmIfVptTmAbrFixedRoundTripTime=atmIfVptTmAbrFixedRoundTripTime, atmIfCAMinMulticastBranches=atmIfCAMinMulticastBranches, atmIfVccVcdTmTxTdpEntry=atmIfVccVcdTmTxTdpEntry, atmIfVptCAAbrRowStatusEntry=atmIfVptCAAbrRowStatusEntry, atmIfVptVccVcdTmAbrRowStatusTable=atmIfVptVccVcdTmAbrRowStatusTable, atmIfVpcStatsTable=atmIfVpcStatsTable, atmIfVptVccTestStateEntry=atmIfVptVccTestStateEntry, atmIfVpcTmRxTdpValue=atmIfVpcTmRxTdpValue, atmIfVptTmAbrRateDecreaseFactor=atmIfVptTmAbrRateDecreaseFactor, atmIfVptVpdBwdQosClass=atmIfVptVpdBwdQosClass, atmIfVptVccVcdTmTxWredThreshold=atmIfVptVccVcdTmTxWredThreshold, atmIfOperEntry=atmIfOperEntry, atmIfVpcBandwidthElastic=atmIfVpcBandwidthElastic, atmIfVptVccTmAbrMaxTimeBetweenRmCell=atmIfVptVccTmAbrMaxTimeBetweenRmCell, atmIfVptVccTestVerificationFrmBad=atmIfVptVccTestVerificationFrmBad, atmIfVpcTmAbrTransientBufferExposure=atmIfVpcTmAbrTransientBufferExposure, atmIfVptVccTmUsageParameterControl=atmIfVptVccTmUsageParameterControl, atmIfVptCARtVbrCdv=atmIfVptCARtVbrCdv, atmIfVptVccStatsRxCellDiscardClp=atmIfVptVccStatsRxCellDiscardClp, atmIfVptVccStatsRxCellDiscard=atmIfVptVccStatsRxCellDiscard, atmIfCAVirtualLinkUnallocatedBandwidth=atmIfCAVirtualLinkUnallocatedBandwidth, atmIfCAUbrShapeRecoupPolicy=atmIfCAUbrShapeRecoupPolicy, atmIfVptCAUbrOperTable=atmIfVptCAUbrOperTable, atmIfVptCARowStatusTable=atmIfVptCARowStatusTable, atmIfVccTmRxTdpTable=atmIfVccTmRxTdpTable, atmIfVptVccVcdTmAbrAcrDecreaseTimeFactor=atmIfVptVccVcdTmAbrAcrDecreaseTimeFactor, atmIfCAUbrOperEntry=atmIfCAUbrOperEntry, atmIfVptSegLinkSideLoopbackState=atmIfVptSegLinkSideLoopbackState, atmIfCAUbrRowStatus=atmIfCAUbrRowStatus, atmIfCARtVbrEmissionPriority=atmIfCARtVbrEmissionPriority, atmIfNAcct=atmIfNAcct, atmIfVccVcdTmAbrConnectionType=atmIfVccVcdTmAbrConnectionType, atmIfVptCAAbr=atmIfVptCAAbr, atmIfConnMapOvNumVccsPerNonZeroVpi=atmIfConnMapOvNumVccsPerNonZeroVpi, atmIfVccRxDiscard=atmIfVccRxDiscard, atmIfVpcIndex=atmIfVpcIndex, atmIfCAVbrRtPool=atmIfCAVbrRtPool, atmIfVptVccVcdTmTxTdpEntry=atmIfVptVccVcdTmTxTdpEntry, atmIfCAVbrNrtPool=atmIfCAVbrNrtPool, atmIfVptVpdTmTxTdpValue=atmIfVptVpdTmTxTdpValue, atmIfVptCAOperEntry=atmIfVptCAOperEntry, atmIfVptVccTxTdpEntry=atmIfVptVccTxTdpEntry, atmIfVccVcdTmFwdQosClass=atmIfVccVcdTmFwdQosClass, atmIfVptVpdTmClippingBbc=atmIfVptVpdTmClippingBbc, atmIfVccAdminState=atmIfVccAdminState, atmIfVpcTmTqpEntry=atmIfVpcTmTqpEntry, atmIfVptVccTestOverrideHoldingPriority=atmIfVptVccTestOverrideHoldingPriority, atmIfVptVccBqpIndex=atmIfVptVccBqpIndex, atmIfVptVccStatsTxFrameDiscardClp=atmIfVptVccStatsTxFrameDiscardClp, atmIfVpcVpdTmBestEffort=atmIfVpcVpdTmBestEffort, atmIfVptVccBandwidthElastic=atmIfVptVccBandwidthElastic, atmIfVptVpdTmAbrTransientBufferExposure=atmIfVptVpdTmAbrTransientBufferExposure, atmIfVptVccTmClippingBbc=atmIfVptVccTmClippingBbc, atmIfRemoteAtmInterfaceLabel=atmIfRemoteAtmInterfaceLabel, atmIfVptCAAbrProvEntry=atmIfVptCAAbrProvEntry, atmIfVptVccTestLoadingFrmTx=atmIfVptVccTestLoadingFrmTx, atmIfVptVccTxQThreshValue=atmIfVptVccTxQThreshValue, atmIfVptTxQueueLength=atmIfVptTxQueueLength, atmIfCANrtVbrTrafficShaping=atmIfCANrtVbrTrafficShaping, atmIfVpcVpdTmAtmServiceCategory=atmIfVpcVpdTmAtmServiceCategory, atmIfCACbrSvcHoldingPriority=atmIfCACbrSvcHoldingPriority, atmIfVpcVpdTmAbrStorageType=atmIfVpcVpdTmAbrStorageType, atmIfVccVcdRxTdpTable=atmIfVccVcdRxTdpTable, atmIfCAOperEntry=atmIfCAOperEntry, atmIfVptRxQosClass=atmIfVptRxQosClass, atmIfVptVccTxQThreshIndex=atmIfVptVccTxQThreshIndex, atmIfVptVccTmTxQueueLength=atmIfVptVccTmTxQueueLength, atmIfCANrtVbrStorageType=atmIfCANrtVbrStorageType, atmIfVptVccVcdTxTdpIndex=atmIfVptVccVcdTxTdpIndex, atmIfVccVcdTmForceTagging=atmIfVccVcdTmForceTagging, atmIfCAUbrMinimumCellRate=atmIfCAUbrMinimumCellRate, atmIfVpcVpdLoopbackMonitoring=atmIfVpcVpdLoopbackMonitoring, atmIfCARtVbrOperTable=atmIfCARtVbrOperTable, atmIfVpcVpdUsageParameterControl=atmIfVpcVpdUsageParameterControl, atmIfVptTmUnshapedTransmitQueueing=atmIfVptTmUnshapedTransmitQueueing, atmIfVptVccVcdTmAtmServiceCategory=atmIfVptVccVcdTmAtmServiceCategory, atmIfVccTmBestEffort=atmIfVccTmBestEffort, atmIfCACbrRowStatusTable=atmIfCACbrRowStatusTable, atmIfVptVpdTm=atmIfVptVpdTm, atmIfCANrtVbrIndex=atmIfCANrtVbrIndex, atmIfVccBwdQosClass=atmIfVccBwdQosClass, atmIfVptCACbrCdvt=atmIfVptCACbrCdvt, atmIfVccNepApplicationName=atmIfVccNepApplicationName, atmIfCACbrIndex=atmIfCACbrIndex, atmIfFaultHoldOffTime=atmIfFaultHoldOffTime, atmIfVptCARtVbrRowStatus=atmIfVptCARtVbrRowStatus, atmIfVptVccVcdRxTrafficDescType=atmIfVptVccVcdRxTrafficDescType, atmIfUnknownStatus=atmIfUnknownStatus, atmIfCAMaxVpcs=atmIfCAMaxVpcs, atmIfVpcTmRxTdpEntry=atmIfVpcTmRxTdpEntry, atmIfVptVpdTmBearerClassBbc=atmIfVptVpdTmBearerClassBbc, atmIfVptTmTxPacketWiseDiscard=atmIfVptTmTxPacketWiseDiscard, atmIfVpcLocalFailureCause=atmIfVpcLocalFailureCause, atmIfVptVccRdiState=atmIfVptVccRdiState, atmIfCANrtVbrRowStatusEntry=atmIfCANrtVbrRowStatusEntry, atmIfVccTrafficShaping=atmIfVccTrafficShaping, atmIfVptVpdBearerClassBbc=atmIfVptVpdBearerClassBbc, atmIfVccVcdTmTxPacketWiseDiscard=atmIfVccVcdTmTxPacketWiseDiscard, atmIfVccVcdSegLinkSideLoopback=atmIfVccVcdSegLinkSideLoopback, atmIfVptVccTxFrameDiscard=atmIfVptVccTxFrameDiscard, atmIfVptVpdFqpValue=atmIfVptVpdFqpValue, atmIfVpcTmAtmServiceCategory=atmIfVpcTmAtmServiceCategory, atmIfCAPoolWaitAdmConnsValue=atmIfCAPoolWaitAdmConnsValue, atmIfCAPermanentVpts=atmIfCAPermanentVpts, atmIfCAUbrSvcMpHoldingPriority=atmIfCAUbrSvcMpHoldingPriority, atmIfCAAbrUsageParameterControl=atmIfCAAbrUsageParameterControl, atmIfVpcVpdTmBqpEntry=atmIfVpcVpdTmBqpEntry, atmIfVptStatsRxCell=atmIfVptStatsRxCell, atmIfVccVcdTmAtmServiceCategory=atmIfVccVcdTmAtmServiceCategory, atmIf=atmIf, atmIfVpcTxQueueLength=atmIfVpcTxQueueLength, atmIfVpcVpdTmUsageParameterControl=atmIfVpcVpdTmUsageParameterControl, atmIfVccConnInfoTable=atmIfVccConnInfoTable, atmIfVptVccTmAbrConnectionType=atmIfVptVccTmAbrConnectionType, atmIfCASwitchedVccs=atmIfCASwitchedVccs, atmIfCAAbrDgcraMinimumDelay=atmIfCAAbrDgcraMinimumDelay, atmIfTxCellMemoryCongestionState=atmIfTxCellMemoryCongestionState, atmIfVptFqpTable=atmIfVptFqpTable, atmIfVpcRxTdpIndex=atmIfVpcRxTdpIndex, atmIfVpcVpdTmAbr=atmIfVpcVpdTmAbr, atmIfVptTxTdpTable=atmIfVptTxTdpTable, atmIfVpcVpdRowStatusTable=atmIfVpcVpdRowStatusTable, atmIfVpcVpdTmFqpTable=atmIfVpcVpdTmFqpTable, atmIfVptVccVcdRowStatusEntry=atmIfVptVccVcdRowStatusEntry, atmIfVpcRxTdpEntry=atmIfVpcRxTdpEntry, atmIfVpcEndToEndLoopbackState=atmIfVpcEndToEndLoopbackState, atmIfVccStatsTxFrameDiscard=atmIfVccStatsTxFrameDiscard, atmIfVpcTrafficEntry=atmIfVpcTrafficEntry)
mibBuilder.exportSymbols("Nortel-Magellan-Passport-AtmCoreMIB", atmIfVpcTmBearerClassBbc=atmIfVpcTmBearerClassBbc, atmIfConnMapNumVccsPerNonZeroVpi=atmIfConnMapNumVccsPerNonZeroVpi, atmIfVptRxTdpTable=atmIfVptRxTdpTable, atmIfVptVpdTmRxTdpTable=atmIfVptVpdTmRxTdpTable, atmIfVptTxQThreshIndex=atmIfVptTxQThreshIndex, atmIfVpcBandwidthReduction=atmIfVpcBandwidthReduction, atmIfVptVpdBestEffort=atmIfVptVpdBestEffort, atmIfCANrtVbrCdvt=atmIfCANrtVbrCdvt, atmIfVptRowStatusTable=atmIfVptRowStatusTable, atmIfVptVccTmTxTrafficDescType=atmIfVptVccTmTxTrafficDescType, atmIfVpcStatsRxCellDiscard=atmIfVpcStatsRxCellDiscard, atmIfVptVccStatsTxCellDiscard=atmIfVptVccStatsTxCellDiscard, atmIfVptTrafficEntry=atmIfVptTrafficEntry, atmIfCANrtVbrOperEntry=atmIfCANrtVbrOperEntry, atmIfVptCAAbrRowStatusTable=atmIfVptCAAbrRowStatusTable, atmIfVptVccVcdTmAbr=atmIfVptVccVcdTmAbr, atmIfCAVirtualLinkRequestedBandwidth=atmIfCAVirtualLinkRequestedBandwidth, atmIfConnMapComponentName=atmIfConnMapComponentName, atmIfVccVcdTmFqpIndex=atmIfVccVcdTmFqpIndex, atmIfVptCANrtVbrRowStatus=atmIfVptCANrtVbrRowStatus, atmIfVptVccConnInfoTable=atmIfVptVccConnInfoTable, atmIfVptCAPoolProvBwValue=atmIfVptCAPoolProvBwValue, atmIfVptVccVcdTmUsageParameterControl=atmIfVptVccVcdTmUsageParameterControl, atmIfVpcVpdTmUnshapedTransmitQueueing=atmIfVpcVpdTmUnshapedTransmitQueueing, atmIfVpcVpdTmTxWredThreshold=atmIfVpcVpdTmTxWredThreshold, atmIfTxFrameDiscardClp=atmIfTxFrameDiscardClp, atmIfConnMapRowStatus=atmIfConnMapRowStatus, atmIfVpcTmAbr=atmIfVpcTmAbr, atmIfVptVccVcdStorageType=atmIfVptVccVcdStorageType, atmIfCAUbrWeightPolicy=atmIfCAUbrWeightPolicy, atmIfVpcVpdRxTdpValue=atmIfVpcVpdRxTdpValue, atmIfCAAbrRowStatusEntry=atmIfCAAbrRowStatusEntry, atmIfCACbrEmissionPriority=atmIfCACbrEmissionPriority, atmIfVptSegSwitchSideLoopbackState=atmIfVptSegSwitchSideLoopbackState, atmIfCAIndex=atmIfCAIndex, atmIfVccTestFrmPatternType=atmIfVccTestFrmPatternType, atmIfConnMapOvRowStatusEntry=atmIfConnMapOvRowStatusEntry, atmIfVptVccRxDiscardClp=atmIfVptVccRxDiscardClp, atmIfVptVpdTmWeight=atmIfVptVpdTmWeight, atmIfVptVccTmAbrBrmRateChangeInfo=atmIfVptVccTmAbrBrmRateChangeInfo, atmIfVpcVpdTmTxTrafficDescType=atmIfVpcVpdTmTxTrafficDescType, atmIfVptVccVcdFqpIndex=atmIfVptVccVcdFqpIndex, atmIfVpcRowStatusTable=atmIfVpcRowStatusTable, atmIfVccTmHoldingPriority=atmIfVccTmHoldingPriority, atmIfRxFrameDiscardClp=atmIfRxFrameDiscardClp, atmIfVptVpdProvTable=atmIfVptVpdProvTable, atmIfVpcStatsTxFrameDiscardClp=atmIfVpcStatsTxFrameDiscardClp, atmIfVccVcdRxTdpEntry=atmIfVccVcdRxTdpEntry, atmIfCAPoolAdmitBwTable=atmIfCAPoolAdmitBwTable, atmIfVccVcdTmStorageType=atmIfVccVcdTmStorageType, atmIfVpt=atmIfVpt, atmIfVptVccStatusTable=atmIfVptVccStatusTable, atmIfVptTmAbrRowStatus=atmIfVptTmAbrRowStatus, atmIfVpcVpdTrafficEntry=atmIfVpcVpdTrafficEntry, atmIfEpProvTable=atmIfEpProvTable, atmIfRxCell=atmIfRxCell, atmIfCARtVbrUnshapedTransmitQueueing=atmIfCARtVbrUnshapedTransmitQueueing, atmIfVpcRxDiscard=atmIfVpcRxDiscard, atmIfControlStatus=atmIfControlStatus, atmIfVptVccTmStorageType=atmIfVptVccTmStorageType, atmIfVptTxDiscard=atmIfVptTxDiscard, atmIfVptVpdTmBqpTable=atmIfVptVpdTmBqpTable, atmIfCANrtVbrUnshapedTransmitQueueing=atmIfCANrtVbrUnshapedTransmitQueueing, atmIfVptClippingBbc=atmIfVptClippingBbc, atmIfVpcBqpIndex=atmIfVpcBqpIndex, atmIfVpcStatsRxCellClp=atmIfVpcStatsRxCellClp, atmIfVccTmTqpValue=atmIfVccTmTqpValue, atmIfVpcTmClippingBbc=atmIfVpcTmClippingBbc, atmIfVpcVpdFqpTable=atmIfVpcVpdFqpTable, atmIfVptVccTmAbrStorageType=atmIfVptVccTmAbrStorageType, atmIfVptVccVcdTmAbrCutoffDecreaseFactor=atmIfVptVccVcdTmAbrCutoffDecreaseFactor, atmIfVptTroubled=atmIfVptTroubled, atmIfVccRxQosClass=atmIfVccRxQosClass, atmIfVpcStatsTxFrameDiscard=atmIfVpcStatsTxFrameDiscard, atmIfVptVccVcdTmRxTdpValue=atmIfVptVccVcdTmRxTdpValue, atmIfVccVcdFwdFrameDiscard=atmIfVccVcdFwdFrameDiscard, atmIfVptVpdTrafficTable=atmIfVptVpdTrafficTable, atmIfVptStatsTxCellClp=atmIfVptStatsTxCellClp, atmIfVccStatusEntry=atmIfVccStatusEntry, atmIfVptCARtVbrCellLossRatio=atmIfVptCARtVbrCellLossRatio, atmIfVccTmWeight=atmIfVccTmWeight, atmIfCANrtVbrMinPerVcQueueLimit=atmIfCANrtVbrMinPerVcQueueLimit, atmIfEpIndex=atmIfEpIndex, atmIfVpcVpdTmRxTrafficDescType=atmIfVpcVpdTmRxTrafficDescType, atmIfVptVccTmRqpIndex=atmIfVptVccTmRqpIndex, atmIfCAMaxMulticastBranches=atmIfCAMaxMulticastBranches, atmIfVptVccLoopIndex=atmIfVptVccLoopIndex, atmIfVccStorageType=atmIfVccStorageType, atmIfNAcctAccountClass=atmIfNAcctAccountClass, atmIfCACbrProvClr=atmIfCACbrProvClr, atmIfCAPoolAdmConnsValue=atmIfCAPoolAdmConnsValue, atmIfVptTmTxQueueLength=atmIfVptTmTxQueueLength, atmIfVptTmAbrAcrRateChangeInfo=atmIfVptTmAbrAcrRateChangeInfo, atmIfVptVccTmAbrOperEntry=atmIfVptVccTmAbrOperEntry, atmIfVpcVpdTmRowStatus=atmIfVpcVpdTmRowStatus, atmIfVpcVpdCorrelationTag=atmIfVpcVpdCorrelationTag, atmIfVptVpdTmFqpIndex=atmIfVptVpdTmFqpIndex, atmIfVptVccStatsTable=atmIfVptVccStatsTable, atmIfVpcVpdTmForceTagging=atmIfVpcVpdTmForceTagging, atmIfVptVccOperTable=atmIfVptVccOperTable, atmIfCAPoolAvailableBwTable=atmIfCAPoolAvailableBwTable, atmIfVccVcdTmUsageParameterControl=atmIfVccVcdTmUsageParameterControl, atmIfVptVccLoopStorageType=atmIfVptVccLoopStorageType, atmIfTxFrameDiscard=atmIfTxFrameDiscard, atmIfCAUbrComponentName=atmIfCAUbrComponentName, atmIfCAPoolAvailBwTable=atmIfCAPoolAvailBwTable, atmIfVptBwdQosClass=atmIfVptBwdQosClass, atmIfVccVcdTmComponentName=atmIfVccVcdTmComponentName, atmIfVptCABwPoolIndex=atmIfVptCABwPoolIndex, atmIfVptCAPoolRequBwTable=atmIfVptCAPoolRequBwTable, atmIfCAAbrIndex=atmIfCAAbrIndex, atmIfCACbrWeightPolicy=atmIfCACbrWeightPolicy, atmIfCAAbrComponentName=atmIfCAAbrComponentName, atmIfVptRxTrafficDescType=atmIfVptRxTrafficDescType, atmIfVptVccTxTdpTable=atmIfVptVccTxTdpTable, atmIfVpcBqpEntry=atmIfVpcBqpEntry, atmIfTxCellMemoryAvailable=atmIfTxCellMemoryAvailable, atmIfVptVpdClippingBbc=atmIfVptVpdClippingBbc, atmIfVccTmBearerClassBbc=atmIfVccTmBearerClassBbc, atmIfVptVccVcdSegSwitchSideLoopback=atmIfVptVccVcdSegSwitchSideLoopback, atmIfVptVccTestFrmSize=atmIfVptVccTestFrmSize, atmIfStateEntry=atmIfStateEntry, atmIfVptVccLoopComponentName=atmIfVptVccLoopComponentName, atmIfVpcVpdBestEffort=atmIfVpcVpdBestEffort, atmIfVpcVpdTmAbrFarEndAcrDecreaseTimeFactor=atmIfVpcVpdTmAbrFarEndAcrDecreaseTimeFactor, atmIfVccStatsTable=atmIfVccStatsTable, atmIfVptTmTxQThreshEntry=atmIfVptTmTxQThreshEntry, atmIfVptVpdComponentName=atmIfVptVpdComponentName, atmIfCAOperTable=atmIfCAOperTable, atmIfConnMap=atmIfConnMap, atmIfVptVccTmAbrRowStatus=atmIfVptVccTmAbrRowStatus, atmIfVpcTmTxTrafficDescType=atmIfVpcTmTxTrafficDescType, atmIfVptVccRxDiscard=atmIfVptVccRxDiscard, atmIfVptVccTmAbrRowStatusTable=atmIfVptVccTmAbrRowStatusTable, atmIfConnMapOvNumVccsForVpiZero=atmIfConnMapOvNumVccsForVpiZero, atmIfVccStatsTxCellDiscardClp=atmIfVccStatsTxCellDiscardClp, atmIfVpcHoldingPriority=atmIfVpcHoldingPriority, atmIfVpcTmForceTagging=atmIfVpcTmForceTagging, atmIfSegLinkSideLoopback=atmIfSegLinkSideLoopback, atmIfVpcStatsRxAal5FrameAbort=atmIfVpcStatsRxAal5FrameAbort, atmIfCARtVbrIndex=atmIfCARtVbrIndex, atmIfVccTmAtmServiceCategory=atmIfVccTmAtmServiceCategory, atmIfCANrtVbrSvcMpHoldingPriority=atmIfCANrtVbrSvcMpHoldingPriority, atmIfVptVccRowStatus=atmIfVptVccRowStatus, atmIfVpcUsageState=atmIfVpcUsageState, atmIfVpcVpdRxTrafficDescType=atmIfVpcVpdRxTrafficDescType, atmIfVptAtmServiceCategory=atmIfVptAtmServiceCategory, atmIfVptVccTrafficShaping=atmIfVptVccTrafficShaping, atmIfVccTmAbrTxRateChangeInfo=atmIfVccTmAbrTxRateChangeInfo, atmIfVptVccTrafficTable=atmIfVptVccTrafficTable, atmIfVccVcdTmAbrDgcraMinimumDelay=atmIfVccVcdTmAbrDgcraMinimumDelay, atmIfVpcVpdTmAbrMaxCellPerRmCell=atmIfVpcVpdTmAbrMaxCellPerRmCell, atmIfVpcLoopStorageType=atmIfVpcLoopStorageType, atmIfEpMinimumBandwidthGuarantee=atmIfEpMinimumBandwidthGuarantee, atmIfVccFqpTable=atmIfVccFqpTable, atmIfVccTmComponentName=atmIfVccTmComponentName, atmIfVptVpdRxTdpEntry=atmIfVptVpdRxTdpEntry, atmIfVccTmTxQThreshEntry=atmIfVccTmTxQThreshEntry, atmIfVptVpdLbkTable=atmIfVptVpdLbkTable, atmIfVptVccUsageParameterControl=atmIfVptVccUsageParameterControl, atmIfCAUbrEmissionPriority=atmIfCAUbrEmissionPriority, atmIfVptVpdSegSwitchSideLoopback=atmIfVptVpdSegSwitchSideLoopback, atmIfCAPoolAvailableBwEntry=atmIfCAPoolAvailableBwEntry, atmIfVccTestElapsedTime=atmIfVccTestElapsedTime, atmIfVpcTxTdpIndex=atmIfVpcTxTdpIndex, atmIfVccRxTdpValue=atmIfVccRxTdpValue, atmIfVptVccVcdFqpValue=atmIfVptVccVcdFqpValue, atmIfVptTrafficShaping=atmIfVptTrafficShaping, atmIfVptCAPoolAdmitBwTable=atmIfVptCAPoolAdmitBwTable, atmIfVptVccRxTdpValue=atmIfVptVccRxTdpValue, atmIfCACbrPool=atmIfCACbrPool, atmIfVptVccFqpTable=atmIfVptVccFqpTable, atmIfVptVccVcdTmAbrRateIncreaseFactor=atmIfVptVccVcdTmAbrRateIncreaseFactor, atmIfCAPoolRequBwIndex=atmIfCAPoolRequBwIndex, atmIfVpcStatsTxCellDiscard=atmIfVpcStatsTxCellDiscard, atmIfVptCAIndex=atmIfVptCAIndex, atmIfRxFrameDiscard=atmIfRxFrameDiscard, atmIfCACbrMaxCtd=atmIfCACbrMaxCtd, atmIfVccTmRowStatus=atmIfVccTmRowStatus, atmIfVptVccRxTdpEntry=atmIfVptVccRxTdpEntry, atmIfConnMapRowStatusTable=atmIfConnMapRowStatusTable, atmIfVptVccVcdClippingBbc=atmIfVptVccVcdClippingBbc, atmIfVptVccTestRowStatusTable=atmIfVptVccTestRowStatusTable, atmIfVptTmRowStatus=atmIfVptTmRowStatus, atmIfVccTmBandwidthElastic=atmIfVccTmBandwidthElastic, atmIfVptVpdTmProvTable=atmIfVptVpdTmProvTable, atmIfCAAbrFrttPortion=atmIfCAAbrFrttPortion, atmIfVccStatsRxUpcViolationOnEnforcer2=atmIfVccStatsRxUpcViolationOnEnforcer2, atmIfVccTmIndex=atmIfVccTmIndex, atmIfVpcVpdTmAbrProvTable=atmIfVpcVpdTmAbrProvTable, atmIfVpcTmTxQThreshValue=atmIfVpcTmTxQThreshValue, atmIfVccClippingBbc=atmIfVccClippingBbc, atmIfVptVccVcdTxTdpEntry=atmIfVptVccVcdTxTdpEntry, atmIfVptVccVcdTmTxPacketWiseDiscard=atmIfVptVccVcdTmTxPacketWiseDiscard, atmIfVptVccVcdTmTxTdpTable=atmIfVptVccVcdTmTxTdpTable, atmIfCAPoolWaitAdmConnsEntry=atmIfCAPoolWaitAdmConnsEntry, atmIfVptVccNepIndex=atmIfVptVccNepIndex, atmIfVccStatsRxCellDiscardClp=atmIfVccStatsRxCellDiscardClp, atmIfVccVcdTmRowStatusEntry=atmIfVccVcdTmRowStatusEntry, atmIfVptBqpValue=atmIfVptBqpValue, atmIfVptVpdSegLinkSideLoopback=atmIfVptVpdSegLinkSideLoopback, atmIfCAAbrOperEntry=atmIfCAAbrOperEntry, atmIfVptStatsRxCellDiscard=atmIfVptStatsRxCellDiscard, atmIfVptTmTqpIndex=atmIfVptTmTqpIndex, atmIfVptCAPoolWaitAdmConnsIndex=atmIfVptCAPoolWaitAdmConnsIndex, atmIfUsageParameterControl=atmIfUsageParameterControl, atmIfVptVpdTmBqpValue=atmIfVptVpdTmBqpValue, atmIfRxLinkUtilization=atmIfRxLinkUtilization, atmIfCAPoolAdmConnsIndex=atmIfCAPoolAdmConnsIndex, atmIfCACbrCdvt=atmIfCACbrCdvt, atmIfCACbr=atmIfCACbr, atmIfStateTable=atmIfStateTable, atmIfCAUbr=atmIfCAUbr, atmIfNAcctAccountConnectionType=atmIfNAcctAccountConnectionType, atmIfVccTrafficTable=atmIfVccTrafficTable, atmIfVpcTmAbrComponentName=atmIfVpcTmAbrComponentName, atmIfVptVccNepProvEntry=atmIfVptVccNepProvEntry, atmIfVptCACbr=atmIfVptCACbr, atmIfVptTmTxQThreshTable=atmIfVptTmTxQThreshTable, atmIfCARtVbrForceTagging=atmIfCARtVbrForceTagging, atmIfVptCATroubledVccs=atmIfVptCATroubledVccs, atmIfVptVpdTmFqpTable=atmIfVptVpdTmFqpTable, atmIfConnMapOv=atmIfConnMapOv, atmIfVpcVpdTmWeight=atmIfVpcVpdTmWeight, atmIfVpcFqpEntry=atmIfVpcFqpEntry, atmIfVccVcdRowStatusEntry=atmIfVccVcdRowStatusEntry, atmIfVptTmAbrBrmRateChangeInfo=atmIfVptTmAbrBrmRateChangeInfo, atmIfVptVccTestTimeRemaining=atmIfVptVccTestTimeRemaining, atmIfVpcVpdRowStatus=atmIfVpcVpdRowStatus, atmIfVptVpdUsageParameterControl=atmIfVptVpdUsageParameterControl, atmIfCANrtVbrHoldingPriority=atmIfCANrtVbrHoldingPriority, atmIfCAPoolRequBwValue=atmIfCAPoolRequBwValue, atmIfCAPermittedAtmServiceCategories=atmIfCAPermittedAtmServiceCategories, atmIfVptTmRqpTable=atmIfVptTmRqpTable, atmIfVptVccTmRqpTable=atmIfVptVccTmRqpTable, atmIfVccVcdBwdFrameDiscard=atmIfVccVcdBwdFrameDiscard, atmIfVptCANrtVbrIndex=atmIfVptCANrtVbrIndex, atmIfVptVccTmAbr=atmIfVptVccTmAbr, atmIfVpcVpdTmTransferCapabilityBbc=atmIfVpcVpdTmTransferCapabilityBbc, atmIfVccVcdTmAbr=atmIfVccVcdTmAbr, atmIfVptFqpEntry=atmIfVptFqpEntry, atmIfVptVpdTxTdpIndex=atmIfVptVpdTxTdpIndex, atmIfCAPoolAdmConnsTable=atmIfCAPoolAdmConnsTable, atmIfVptVpdTmFqpEntry=atmIfVptVpdTmFqpEntry, atmIfVpcTmAbrRowStatus=atmIfVpcTmAbrRowStatus, atmIfVpcVpdStorageType=atmIfVpcVpdStorageType, atmIfVccVcdTmBqpEntry=atmIfVccVcdTmBqpEntry, atmIfVccSegSwitchSideLoopbackState=atmIfVccSegSwitchSideLoopbackState, atmIfVpcVpdTxTrafficDescType=atmIfVpcVpdTxTrafficDescType, atmIfVptVcc=atmIfVptVcc, atmIfVptVccTmAbrAcrRateChangeInfo=atmIfVptVccTmAbrAcrRateChangeInfo, atmIfVccTxUtilization=atmIfVccTxUtilization, atmIfVccLocalFailureCause=atmIfVccLocalFailureCause, atmIfVptVpdAcctEntry=atmIfVptVpdAcctEntry)
mibBuilder.exportSymbols("Nortel-Magellan-Passport-AtmCoreMIB", atmIfVptVpdTmAbr=atmIfVptVpdTmAbr, atmIfVptTmRxTdpEntry=atmIfVptTmRxTdpEntry, atmIfVptVccVcdCorrelationTag=atmIfVptVccVcdCorrelationTag, atmIfVptVccRxFrameDiscard=atmIfVptVccRxFrameDiscard, atmIfVpcVpdBqpValue=atmIfVpcVpdBqpValue, atmIfVpcTmTxQThreshIndex=atmIfVpcTmTxQThreshIndex, atmIfVptTmAbrTransientBufferExposure=atmIfVptTmAbrTransientBufferExposure, atmIfVptVccVcdRxTdpValue=atmIfVptVccVcdRxTdpValue, atmIfVptVccVcdTmBestEffort=atmIfVptVccVcdTmBestEffort, atmIfVptVccVcdBearerClassBbc=atmIfVptVccVcdBearerClassBbc, atmIfVptCAProvTable=atmIfVptCAProvTable, atmIfVpcTmUnshapedTransmitQueueing=atmIfVpcTmUnshapedTransmitQueueing, atmIfVptCAUbrOperEntry=atmIfVptCAUbrOperEntry, atmIfCAPoolAvailableBwIndex=atmIfCAPoolAvailableBwIndex, atmIfVpcTmAbrInitialCellRate=atmIfVpcTmAbrInitialCellRate, atmIfVptCARtVbr=atmIfVptCARtVbr, atmIfVptVccVcdTmComponentName=atmIfVptVccVcdTmComponentName, atmIfVccFqpEntry=atmIfVccFqpEntry, atmIfVptVccUsageState=atmIfVptVccUsageState, atmIfVptVccVcdLbkEntry=atmIfVptVccVcdLbkEntry, atmIfVptStatsRxCellDiscardClp=atmIfVptStatsRxCellDiscardClp, atmIfStatsTable=atmIfStatsTable, atmIfVptVccTmAbrRateIncreaseFactor=atmIfVptVccTmAbrRateIncreaseFactor, atmIfVptVccBearerClassBbc=atmIfVptVccBearerClassBbc, atmIfVptVccBwdQosClass=atmIfVptVccBwdQosClass, atmIfCAConnectionPoolUsage=atmIfCAConnectionPoolUsage, atmIfCASvcVbrNrtHoldingPriority=atmIfCASvcVbrNrtHoldingPriority, atmIfCAUbrCdvt=atmIfCAUbrCdvt, atmIfCAAbr=atmIfCAAbr, atmIfVptVccTrafficEntry=atmIfVptVccTrafficEntry, atmIfVptLocalFailureCause=atmIfVptLocalFailureCause, atmIfVptVccVcdBestEffort=atmIfVptVccVcdBestEffort, atmIfVptVccTmRxTrafficDescType=atmIfVptVccTmRxTrafficDescType, atmIfVptVccNepProvTable=atmIfVptVccNepProvTable, atmIfVptVccBqpTable=atmIfVptVccBqpTable, atmIfVptVccVcdTmClippingBbc=atmIfVptVccVcdTmClippingBbc, atmIfVptVccTmTxTdpValue=atmIfVptVccTmTxTdpValue, atmIfVptVccTestResultsEntry=atmIfVptVccTestResultsEntry, atmIfVptVccVcdTmRxTdpTable=atmIfVptVccVcdTmRxTdpTable, atmIfVccTmAbrOperTable=atmIfVccTmAbrOperTable, atmIfVpcVpdTmAbrTransientBufferExposure=atmIfVpcVpdTmAbrTransientBufferExposure, atmIfVptVccVcdEndToEndLoopback=atmIfVptVccVcdEndToEndLoopback, atmIfVptOperStatus=atmIfVptOperStatus, atmIfVpcOperTable=atmIfVpcOperTable, atmIfVccBqpIndex=atmIfVccBqpIndex, atmIfVccVcdComponentName=atmIfVccVcdComponentName, atmIfVccConnectionPointType=atmIfVccConnectionPointType, atmIfLbkTable=atmIfLbkTable, atmIfVccRxFrameDiscard=atmIfVccRxFrameDiscard, atmIfVpcVpdFqpIndex=atmIfVpcVpdFqpIndex, atmIfVptCAPoolWaitAdmConnsTable=atmIfVptCAPoolWaitAdmConnsTable, atmIfVptVccSegLinkSideLoopbackState=atmIfVptVccSegLinkSideLoopbackState, atmIfVptUsageParameterControl=atmIfVptUsageParameterControl, atmIfVccLoopComponentName=atmIfVccLoopComponentName, atmIfVccTxQThreshEntry=atmIfVccTxQThreshEntry, atmIfConnMapRowStatusEntry=atmIfConnMapRowStatusEntry, atmIfVptVccStatsTxCellClp=atmIfVptVccStatsTxCellClp, atmIfVccTmAbrFixedRoundTripTime=atmIfVccTmAbrFixedRoundTripTime, atmIfCAUbrHoldingPriority=atmIfCAUbrHoldingPriority, atmIfVccTxQThreshTable=atmIfVccTxQThreshTable, atmIfVccVcdTmTxWredThreshold=atmIfVccVcdTmTxWredThreshold, atmIfVccVcdCorrelationTag=atmIfVccVcdCorrelationTag, atmIfVccDistributionType=atmIfVccDistributionType, atmIfCAUbrOperTable=atmIfCAUbrOperTable, atmIfVptVccVcdTmAbrRowStatusEntry=atmIfVptVccVcdTmAbrRowStatusEntry, atmIfVptVccVcdTmAbrInitialCellRate=atmIfVptVccVcdTmAbrInitialCellRate, atmIfVpcVpdFwdQosClass=atmIfVpcVpdFwdQosClass, atmIfVptVccTmBandwidthElastic=atmIfVptVccTmBandwidthElastic, atmIfVptCAPermanentVccs=atmIfVptCAPermanentVccs, atmIfVptVpdTmAbrDgcraMaximumDelay=atmIfVptVpdTmAbrDgcraMaximumDelay, atmIfCARtVbrOperEntry=atmIfCARtVbrOperEntry, atmIfEpProvEntry=atmIfEpProvEntry, atmIfVpcRowStatus=atmIfVpcRowStatus, atmIfTxCellMemoryThresholdIndex=atmIfTxCellMemoryThresholdIndex, atmIfVccTxFrameDiscard=atmIfVccTxFrameDiscard, atmIfVptCAAbrPool=atmIfVptCAAbrPool, atmIfVccTmAbrAcrRateChangeInfo=atmIfVccTmAbrAcrRateChangeInfo, atmIfConnMapOvRowStatus=atmIfConnMapOvRowStatus, atmIfVpcVpdTmAbrRowStatusTable=atmIfVpcVpdTmAbrRowStatusTable, atmIfVptVccTmAbrCutoffDecreaseFactor=atmIfVptVccTmAbrCutoffDecreaseFactor, atmIfVptVccVcdTmAbrMaxCellPerRmCell=atmIfVptVccVcdTmAbrMaxCellPerRmCell, atmIfVccTestResultsEntry=atmIfVccTestResultsEntry, atmIfVpcTmRqpEntry=atmIfVpcTmRqpEntry, atmIfVptTmAbrAcrDecreaseTimeFactor=atmIfVptTmAbrAcrDecreaseTimeFactor, atmIfVptVccLocalFailureCause=atmIfVptVccLocalFailureCause, atmIfVptVpdBqpValue=atmIfVptVpdBqpValue, atmIfVptCASwitchedVccs=atmIfVptCASwitchedVccs, atmIfVptVccVcdTmProvTable=atmIfVptVccVcdTmProvTable, atmIfCAUbrProvTable=atmIfCAUbrProvTable, atmIfVptVpdTrafficEntry=atmIfVptVpdTrafficEntry, atmIfVptStatsRxUpcViolationOnEnforcer1=atmIfVptStatsRxUpcViolationOnEnforcer1, atmIfVptVccVcdAcctTable=atmIfVptVccVcdAcctTable, atmIfVptVccTxQThreshEntry=atmIfVptVccTxQThreshEntry, atmIfVptStatsTxCellDiscard=atmIfVptStatsTxCellDiscard, atmIfVptVccAisState=atmIfVptVccAisState, atmIfVpcTmAbrConnectionType=atmIfVpcTmAbrConnectionType, atmIfCABwPoolIndex=atmIfCABwPoolIndex, atmIfVptVccTestCauseOfTermination=atmIfVptVccTestCauseOfTermination, atmIfVptVccStatsRxUpcViolationOnEnforcer2=atmIfVptVccStatsRxUpcViolationOnEnforcer2, atmIfVccVcdStorageType=atmIfVccVcdStorageType, atmIfVccVcdTmAbrStorageType=atmIfVccVcdTmAbrStorageType, atmIfVptCACbrRowStatus=atmIfVptCACbrRowStatus, atmIfVptCACbrComponentName=atmIfVptCACbrComponentName, atmIfCAPoolAdmConnsEntry=atmIfCAPoolAdmConnsEntry, atmIfVpcVpdBwdFrameDiscard=atmIfVpcVpdBwdFrameDiscard, atmIfVpcTmAbrStorageType=atmIfVpcTmAbrStorageType, atmIfVccTmClippingBbc=atmIfVccTmClippingBbc, atmIfVptVccTmForceTagging=atmIfVptVccTmForceTagging, atmIfVptVccVcdTmBearerClassBbc=atmIfVptVccVcdTmBearerClassBbc, atmIfVpcVpdTmAbrConnectionType=atmIfVpcVpdTmAbrConnectionType, atmIfVccTmStorageType=atmIfVccTmStorageType, atmIfVptVpdTmAbrRowStatus=atmIfVptVpdTmAbrRowStatus, atmIfVpcVpdTmBqpIndex=atmIfVpcVpdTmBqpIndex, atmIfVccVcdLbkEntry=atmIfVccVcdLbkEntry, atmIfVptVccVcdTmRxTdpEntry=atmIfVptVccVcdTmRxTdpEntry, atmIfVptVccStatsRxCellClp=atmIfVptVccStatsRxCellClp, atmIfVccTestLoadingFrmLost=atmIfVccTestLoadingFrmLost, atmIfVccStatsRxAal5FrameAbort=atmIfVccStatsRxAal5FrameAbort, atmIfVptVccTmTxTdpIndex=atmIfVptVccTmTxTdpIndex, atmIfVccTestStateTable=atmIfVccTestStateTable, atmIfVptVccOperationalState=atmIfVptVccOperationalState, atmIfVptCAOperTable=atmIfVptCAOperTable, atmIfVptVccVcdTmAbrProvEntry=atmIfVptVccVcdTmAbrProvEntry, atmIfVptTmAbrInitialCellRate=atmIfVptTmAbrInitialCellRate, atmIfVccVcdEndToEndLoopback=atmIfVccVcdEndToEndLoopback, atmCoreMIB=atmCoreMIB, atmIfProceduralStatus=atmIfProceduralStatus, atmIfVccStatsRxFrameDiscard=atmIfVccStatsRxFrameDiscard, atmIfCAMinAutoSelectedVci=atmIfCAMinAutoSelectedVci, atmIfVccTestOverrideHoldingPriority=atmIfVccTestOverrideHoldingPriority, atmIfVpcLoopRowStatus=atmIfVpcLoopRowStatus, atmIfVccLoopRowStatusTable=atmIfVccLoopRowStatusTable, atmIfVpcVpdBqpTable=atmIfVpcVpdBqpTable, atmIfCAAbrMaxCellPerRmCell=atmIfCAAbrMaxCellPerRmCell, atmIfVpcVpdTmAbrRowStatusEntry=atmIfVpcVpdTmAbrRowStatusEntry, atmIfVpcStatsRxUpcViolationOnEnforcer1=atmIfVpcStatsRxUpcViolationOnEnforcer1, atmIfVptTxQosClass=atmIfVptTxQosClass, atmIfInterfaceName=atmIfInterfaceName, atmIfCATroubledVpcs=atmIfCATroubledVpcs, atmIfCAPoolAvailBwValue=atmIfCAPoolAvailBwValue, atmIfVpcTmTqpValue=atmIfVpcTmTqpValue, atmIfVptVccEndToEndLoopbackState=atmIfVptVccEndToEndLoopbackState, atmIfCAPoolWaitAdmConnsTable=atmIfCAPoolWaitAdmConnsTable, atmIfVccConnInfoEntry=atmIfVccConnInfoEntry, atmIfVptVpdTmStorageType=atmIfVptVpdTmStorageType, atmIfVptVccNepRowStatusTable=atmIfVptVccNepRowStatusTable, atmIfVpcStatsRxCellDiscardClp=atmIfVpcStatsRxCellDiscardClp, atmIfSegSwitchSideLoopback=atmIfSegSwitchSideLoopback, atmIfVptVccTmRxPacketWiseDiscard=atmIfVptVccTmRxPacketWiseDiscard, atmIfCAProvEntry=atmIfCAProvEntry, atmIfVpcVpdRxTdpTable=atmIfVpcVpdRxTdpTable, atmIfVccVcdTmAbrRowStatus=atmIfVccVcdTmAbrRowStatus, atmIfVptCACbrIndex=atmIfVptCACbrIndex, atmIfVptVccTestFrmPatternType=atmIfVptVccTestFrmPatternType, atmIfVptTmRowStatusTable=atmIfVptTmRowStatusTable, atmIfVptVccTmAbrRowStatusEntry=atmIfVptVccTmAbrRowStatusEntry, atmIfVptTmAbrIndex=atmIfVptTmAbrIndex, atmCoreGroupBE01=atmCoreGroupBE01, atmIfVccVcdTmRxTdpIndex=atmIfVccVcdTmRxTdpIndex, atmIfVpcTmTransferCapabilityBbc=atmIfVpcTmTransferCapabilityBbc, atmIfProvTable=atmIfProvTable, atmIfVpcVpdSegLinkSideLoopback=atmIfVpcVpdSegLinkSideLoopback, atmIfCATroubledVccs=atmIfCATroubledVccs, atmIfCAUbrRowStatusEntry=atmIfCAUbrRowStatusEntry, atmIfVpcTxTdpValue=atmIfVpcTxTdpValue, atmIfVpcVpdBwdQosClass=atmIfVpcVpdBwdQosClass, atmIfVpcVpdTxTdpIndex=atmIfVpcVpdTxTdpIndex, atmIfVptVpdTmRowStatusEntry=atmIfVptVpdTmRowStatusEntry, atmIfVptVccTmTransferCapabilityBbc=atmIfVptVccTmTransferCapabilityBbc, atmIfVptVccTmWeight=atmIfVptVccTmWeight, atmIfVpcTmBandwidthReduction=atmIfVpcTmBandwidthReduction, atmIfVccVcdFqpIndex=atmIfVccVcdFqpIndex, atmIfVptTmRowStatusEntry=atmIfVptTmRowStatusEntry, atmIfVpcVpdTmAbrDgcraMaximumDelay=atmIfVpcVpdTmAbrDgcraMaximumDelay, atmIfVccTestRowStatus=atmIfVccTestRowStatus, atmIfVptVccTmTqpIndex=atmIfVptVccTmTqpIndex, atmIfVccVcdFqpTable=atmIfVccVcdFqpTable, atmIfVptVpdTmTxTdpTable=atmIfVptVpdTmTxTdpTable, atmIfVccStatsTxCell=atmIfVccStatsTxCell, atmIfVpcVpdTmAbrRateDecreaseFactor=atmIfVpcVpdTmAbrRateDecreaseFactor, atmIfVccTestStateEntry=atmIfVccTestStateEntry, atmIfVptVccVcdTrafficShaping=atmIfVptVccVcdTrafficShaping, atmIfVptCAComponentName=atmIfVptCAComponentName, atmIfVptTmIndex=atmIfVptTmIndex, atmIfVpcBearerClassBbc=atmIfVpcBearerClassBbc, atmIfCAVbrNrtCdvt=atmIfCAVbrNrtCdvt, atmIfVptVccConnInfoEntry=atmIfVptVccConnInfoEntry, atmIfCAMinAutoSelectedVciForVpiZero=atmIfCAMinAutoSelectedVciForVpiZero, atmIfCAAbrPerVcQueueLimitReferenceRate=atmIfCAAbrPerVcQueueLimitReferenceRate, atmIfVptConnectionPointType=atmIfVptConnectionPointType, atmIfVptTxTdpValue=atmIfVptTxTdpValue, atmIfCAAbrHoldingPriority=atmIfCAAbrHoldingPriority, atmIfVptVccTmTxTdpTable=atmIfVptVccTmTxTdpTable, atmIfVpcTmTxQThreshTable=atmIfVpcTmTxQThreshTable, atmIfVpcTmTxQThreshEntry=atmIfVpcTmTxQThreshEntry, atmIfVccTxQThreshIndex=atmIfVccTxQThreshIndex, atmIfCAPermanentVpcs=atmIfCAPermanentVpcs, atmIfVccTmTransferCapabilityBbc=atmIfVccTmTransferCapabilityBbc, atmIfVccTmAbrForwardRmCellLimit=atmIfVccTmAbrForwardRmCellLimit, atmIfVptVccTmRxTdpTable=atmIfVptVccTmRxTdpTable, atmIfVccVcdTmAbrIndex=atmIfVccVcdTmAbrIndex, atmIfVptComponentName=atmIfVptComponentName, atmIfVptCACbrStorageType=atmIfVptCACbrStorageType, atmIfVptVpdStorageType=atmIfVptVpdStorageType, atmIfTransmittedCells=atmIfTransmittedCells, atmIfCAAbrTxQueueLimit=atmIfCAAbrTxQueueLimit, atmIfVccTestRowStatusEntry=atmIfVccTestRowStatusEntry, atmIfConnMapVccProvEntry=atmIfConnMapVccProvEntry, atmIfVptVccTmTqpValue=atmIfVptVccTmTqpValue, atmIfVccBqpEntry=atmIfVccBqpEntry, atmIfCAAbrAcrDecreaseTimeFactor=atmIfCAAbrAcrDecreaseTimeFactor, atmIfVccTmBandwidthReduction=atmIfVccTmBandwidthReduction, atmIfVptCA=atmIfVptCA, atmIfVptVccTm=atmIfVptVccTm, atmIfVccTmAbrRowStatusTable=atmIfVccTmAbrRowStatusTable, atmIfCAUbrIndex=atmIfCAUbrIndex, atmIfVpcTroubled=atmIfVpcTroubled, atmIfVccTestUsageState=atmIfVccTestUsageState, atmIfVpcVpdRxQosClass=atmIfVpcVpdRxQosClass, atmIfVptVccVcdBwdFrameDiscard=atmIfVptVccVcdBwdFrameDiscard, atmIfVccTmAbrInitialCellRate=atmIfVccTmAbrInitialCellRate, atmIfConnMapOvFirstNonZeroVpiForVccs=atmIfConnMapOvFirstNonZeroVpiForVccs, atmIfVccRxTdpEntry=atmIfVccRxTdpEntry, atmIfVpcVpdTmTxTdpIndex=atmIfVpcVpdTmTxTdpIndex, atmIfVptTmClippingBbc=atmIfVptTmClippingBbc, atmIfVptVccVcdComponentName=atmIfVptVccVcdComponentName, atmIfVptVccRxTdpIndex=atmIfVptVccRxTdpIndex, atmIfVccTmAbrConnectionType=atmIfVccTmAbrConnectionType, atmIfCAUbrPerVcQueueLimitReferenceRate=atmIfCAUbrPerVcQueueLimitReferenceRate, atmIfVptVpdLoopbackMonitoring=atmIfVptVpdLoopbackMonitoring, atmIfVpcRowStatusEntry=atmIfVpcRowStatusEntry, atmIfCAAbrCdvt=atmIfCAAbrCdvt, atmIfVpcVpdLbkEntry=atmIfVpcVpdLbkEntry, atmIfCARtVbrMinPerVcQueueLimit=atmIfCARtVbrMinPerVcQueueLimit, atmIfVptTmAbrOperTable=atmIfVptTmAbrOperTable, atmIfCACbrProvTable=atmIfCACbrProvTable, atmIfVccUsageState=atmIfVccUsageState, atmIfVccVcdTmAbrComponentName=atmIfVccVcdTmAbrComponentName, atmIfLbkEntry=atmIfLbkEntry, atmIfVccVcdHoldingPriority=atmIfVccVcdHoldingPriority, atmIfCAUbrForceTagging=atmIfCAUbrForceTagging, atmIfVpcVpdSegSwitchSideLoopback=atmIfVpcVpdSegSwitchSideLoopback, atmIfStorageType=atmIfStorageType, atmIfVccLoopStorageType=atmIfVccLoopStorageType, atmIfAdminState=atmIfAdminState, atmIfVptTmTqpEntry=atmIfVptTmTqpEntry, atmIfCAMaxVpts=atmIfCAMaxVpts, atmIfVptTxTdpIndex=atmIfVptTxTdpIndex, atmIfVptOperationalState=atmIfVptOperationalState, atmIfVccTmTxQThreshTable=atmIfVccTmTxQThreshTable, atmIfVccTestSetupTable=atmIfVccTestSetupTable, atmIfCAAbrMaxTimeBetweenRmCells=atmIfCAAbrMaxTimeBetweenRmCells, atmIfVpcVpdTm=atmIfVpcVpdTm, atmIfVptStatsEntry=atmIfVptStatsEntry)
mibBuilder.exportSymbols("Nortel-Magellan-Passport-AtmCoreMIB", atmIfVptStatsTxFrameDiscard=atmIfVptStatsTxFrameDiscard, atmIfVccRowStatusEntry=atmIfVccRowStatusEntry, atmIfVptFqpIndex=atmIfVptFqpIndex, atmIfVccRxTdpIndex=atmIfVccRxTdpIndex, atmIfVccVcdTmAbrTransientBufferExposure=atmIfVccVcdTmAbrTransientBufferExposure, atmIfVccVcdBearerClassBbc=atmIfVccVcdBearerClassBbc, atmIfVptTmRxTdpTable=atmIfVptTmRxTdpTable, atmIfVptVccCallDirection=atmIfVptVccCallDirection, atmIfVccBandwidthElastic=atmIfVccBandwidthElastic, atmIfVccTmAbrOperEntry=atmIfVccTmAbrOperEntry, atmIfVptVccVcdBqpValue=atmIfVptVccVcdBqpValue, atmIfVccVcdTmAbrRateDecreaseFactor=atmIfVccVcdTmAbrRateDecreaseFactor, atmIfVptVpdTmRowStatus=atmIfVptVpdTmRowStatus, atmIfCAAbrRateDecreaseFactor=atmIfCAAbrRateDecreaseFactor, atmIfVccTroubled=atmIfVccTroubled, atmIfVccTmAbrStorageType=atmIfVccTmAbrStorageType, atmIfVptCAUbrPool=atmIfVptCAUbrPool, atmIfVccComponentName=atmIfVccComponentName, atmIfCACbrSvcMpHoldingPriority=atmIfCACbrSvcMpHoldingPriority, atmIfConnMapOperTable=atmIfConnMapOperTable, atmIfLastLrcFrameErrorConnection=atmIfLastLrcFrameErrorConnection, atmIfVptVccRxQosClass=atmIfVptVccRxQosClass, atmIfVptTmBandwidthElastic=atmIfVptTmBandwidthElastic, atmIfVptVccStatsRxAal5FrameAbort=atmIfVptVccStatsRxAal5FrameAbort, atmIfVccSegLinkSideLoopbackState=atmIfVccSegLinkSideLoopbackState, atmIfComponentName=atmIfComponentName, atmIfVccVcdTmTransferCapabilityBbc=atmIfVccVcdTmTransferCapabilityBbc, atmIfVccVcdTmBearerClassBbc=atmIfVccVcdTmBearerClassBbc, atmIfVptVccTmAbrForwardRmCellLimit=atmIfVptVccTmAbrForwardRmCellLimit, atmIfVccTmOperTable=atmIfVccTmOperTable, atmIfCASwitchedMulticastBranches=atmIfCASwitchedMulticastBranches, atmIfRxCellDiscard=atmIfRxCellDiscard, atmIfCAUbrMaxConnections=atmIfCAUbrMaxConnections, atmIfVpcVpdEndToEndLoopback=atmIfVpcVpdEndToEndLoopback, atmIfVccBestEffort=atmIfVccBestEffort, atmIfVccCallDirection=atmIfVccCallDirection, atmIfVccVcdTmProvTable=atmIfVccVcdTmProvTable, atmIfVccFqpIndex=atmIfVccFqpIndex, atmIfVptTmAbr=atmIfVptTmAbr, atmIfVptCAUbrVccUsage=atmIfVptCAUbrVccUsage, atmIfVptStatsTable=atmIfVptStatsTable, atmIfVpcTmAbrOperTable=atmIfVpcTmAbrOperTable, atmIfVccVcdTmIndex=atmIfVccVcdTmIndex, atmIfVpcTmRqpValue=atmIfVpcTmRqpValue, atmIfVptVpdTrafficShaping=atmIfVptVpdTrafficShaping, atmIfVpcVpdTmFwdQosClass=atmIfVpcVpdTmFwdQosClass, atmIfVptVccRxTrafficDescType=atmIfVptVccRxTrafficDescType, atmIfVpcTmTxQosClass=atmIfVpcTmTxQosClass, atmIfCATroubledVpts=atmIfCATroubledVpts, atmIfVptVccTmAbrRxEfci=atmIfVptVccTmAbrRxEfci, atmIfVptVccTmTqpEntry=atmIfVptVccTmTqpEntry, atmIfVptCAUbrProvTable=atmIfVptCAUbrProvTable, atmIfCARtVbrRowStatus=atmIfCARtVbrRowStatus, atmIfConnMapOvRowStatusTable=atmIfConnMapOvRowStatusTable, atmIfCAUbrStorageType=atmIfCAUbrStorageType, atmIfVptTmUsageParameterControl=atmIfVptTmUsageParameterControl, atmIfVpcRxTrafficDescType=atmIfVpcRxTrafficDescType, atmIfVccTmTxQThreshValue=atmIfVccTmTxQThreshValue, atmIfVptVpdTmUsageParameterControl=atmIfVptVpdTmUsageParameterControl, atmIfVptVccNepRowStatus=atmIfVptVccNepRowStatus, atmIfVpcSegSwitchSideLoopbackState=atmIfVpcSegSwitchSideLoopbackState, atmIfVptCAConnectionPoolUsage=atmIfVptCAConnectionPoolUsage, atmIfVccVcdTmTxTdpIndex=atmIfVccVcdTmTxTdpIndex, atmIfVptVccRxTdpTable=atmIfVptVccRxTdpTable, atmIfVptTmBearerClassBbc=atmIfVptTmBearerClassBbc, atmIfVpcVpdTmTxPacketWiseDiscard=atmIfVpcVpdTmTxPacketWiseDiscard, atmIfVptCAAbrProvTable=atmIfVptCAAbrProvTable, atmIfVptVccTmBandwidthReduction=atmIfVptVccTmBandwidthReduction, atmIfVccNep=atmIfVccNep, atmIfVptVccTestStorageType=atmIfVptVccTestStorageType, atmIfUnshapedTransmitQueueingOper=atmIfUnshapedTransmitQueueingOper, atmIfCARtVbrUsageParameterControl=atmIfCARtVbrUsageParameterControl, atmIfVptTxQThreshTable=atmIfVptTxQThreshTable, atmIfVptTmBandwidthReduction=atmIfVptTmBandwidthReduction, atmIfVccTestVerificationFrmTx=atmIfVccTestVerificationFrmTx, atmIfCACbrEpdOffset=atmIfCACbrEpdOffset, atmIfVccVcdSegSwitchSideLoopback=atmIfVccVcdSegSwitchSideLoopback, atmIfCAAbrDgcraMaximumDelay=atmIfCAAbrDgcraMaximumDelay, atmIfVptVccVcdBwdQosClass=atmIfVptVccVcdBwdQosClass, atmIfVpcVpdClippingBbc=atmIfVpcVpdClippingBbc, atmIfVccVcdTmAbrFarEndInitialCellRate=atmIfVccVcdTmAbrFarEndInitialCellRate, atmIfVpcStateEntry=atmIfVpcStateEntry, atmIfVpcTmAbrTxFwdRmCells=atmIfVpcTmAbrTxFwdRmCells, atmIfNAcctProvEntry=atmIfNAcctProvEntry, atmIfVptFqpValue=atmIfVptFqpValue, atmIfVccVcdTmAbrProvTable=atmIfVccVcdTmAbrProvTable, atmIfVptVccHoldingPriority=atmIfVptVccHoldingPriority, atmIfConnMapOvNumNonZeroVpisForVccs=atmIfConnMapOvNumNonZeroVpisForVccs, atmIfVccTmRqpEntry=atmIfVccTmRqpEntry, atmIfVptVpdTxTdpTable=atmIfVptVpdTxTdpTable, atmIfCACbrOperEntry=atmIfCACbrOperEntry, atmIfVccTestStorageType=atmIfVccTestStorageType, atmIfVpcLoopRowStatusEntry=atmIfVpcLoopRowStatusEntry, atmIfVptCAPoolAvailBwTable=atmIfVptCAPoolAvailBwTable, atmIfCAUbrVpcUsage=atmIfCAUbrVpcUsage, atmIfVptVpdTmFqpValue=atmIfVptVpdTmFqpValue, atmIfVpcVpdTmAbrFixedRoundTripTime=atmIfVpcVpdTmAbrFixedRoundTripTime, atmIfVpcVpdTmTxQueueLimit=atmIfVpcVpdTmTxQueueLimit, atmIfVpcTmAbrRxEfci=atmIfVpcTmAbrRxEfci, atmIfVpcVpdAcctTable=atmIfVpcVpdAcctTable, atmIfVccEndToEndLoopbackState=atmIfVccEndToEndLoopbackState, atmIfVptVccVcdTmAbrRateDecreaseFactor=atmIfVptVccVcdTmAbrRateDecreaseFactor, atmIfVptVpdTmAbrRowStatusEntry=atmIfVptVpdTmAbrRowStatusEntry, atmIfVptVpdBqpEntry=atmIfVptVpdBqpEntry, atmIfStatsEntry=atmIfStatsEntry, atmIfCANrtVbrForceTagging=atmIfCANrtVbrForceTagging, atmIfVccVcdTmTxTrafficDescType=atmIfVccVcdTmTxTrafficDescType, atmIfVpcConnectionPointType=atmIfVpcConnectionPointType, atmIfVptVccVcdTmBqpTable=atmIfVptVccVcdTmBqpTable, atmIfVpcVpdTmAbrMaxTimeBetweenRmCells=atmIfVpcVpdTmAbrMaxTimeBetweenRmCells, atmIfVccTestLoadingFrmRx=atmIfVccTestLoadingFrmRx, atmIfVptVpdRxTdpValue=atmIfVptVpdRxTdpValue, atmIfCARowStatus=atmIfCARowStatus, atmIfVpcBwdQosClass=atmIfVpcBwdQosClass, atmIfVptVccTmAbrTxRateChangeInfo=atmIfVptVccTmAbrTxRateChangeInfo, atmIfVptVccTmTxPacketWiseDiscard=atmIfVptVccTmTxPacketWiseDiscard, atmIfVptVccTroubled=atmIfVptVccTroubled, atmCoreCapabilitiesBE01=atmCoreCapabilitiesBE01, atmIfVccVcdTmProvEntry=atmIfVccVcdTmProvEntry, atmIfVccTmAbrComponentName=atmIfVccTmAbrComponentName, atmIfVccVcdTmTxWredMode=atmIfVccVcdTmTxWredMode, atmIfCAUbrMaxVccs=atmIfCAUbrMaxVccs, atmIfVptVccStatsRxCell=atmIfVptVccStatsRxCell, atmIfVptCARtVbrMaxCtd=atmIfVptCARtVbrMaxCtd, atmIfVptTmRqpValue=atmIfVptTmRqpValue, atmIfVptVccTmRxTdpEntry=atmIfVptVccTmRxTdpEntry, atmIfCACbrHoldingPriority=atmIfCACbrHoldingPriority, atmIfVccVcdRowStatusTable=atmIfVccVcdRowStatusTable, atmIfVptStateTable=atmIfVptStateTable, atmIfVptTxFrameDiscard=atmIfVptTxFrameDiscard, atmIfVccVcdIndex=atmIfVccVcdIndex, atmIfCACbrMinPerVcQueueLimit=atmIfCACbrMinPerVcQueueLimit, atmIfCAAbrEmissionPriority=atmIfCAAbrEmissionPriority, atmIfVccRxDiscardClp=atmIfVccRxDiscardClp, atmIfVptTmRqpEntry=atmIfVptTmRqpEntry, atmIfCARtVbrHoldingPriority=atmIfCARtVbrHoldingPriority, atmIfVptCANrtVbrCellLossRatio=atmIfVptCANrtVbrCellLossRatio, atmIfVptVccTmRxQosClass=atmIfVptVccTmRxQosClass, atmIfVpcLoopComponentName=atmIfVpcLoopComponentName, atmIfCARtVbrCdv=atmIfCARtVbrCdv, atmIfVccNepIndex=atmIfVccNepIndex, atmIfVpcVpdComponentName=atmIfVpcVpdComponentName, atmIfVptVccTestBytesTx=atmIfVptVccTestBytesTx, atmIfVccTmTxTdpEntry=atmIfVccTmTxTdpEntry, atmIfVpcVpdTmBearerClassBbc=atmIfVpcVpdTmBearerClassBbc, atmIfVpcVpdTmTrafficShaping=atmIfVpcVpdTmTrafficShaping, atmIfVpcStatusEntry=atmIfVpcStatusEntry, atmIfVpcVpdTmHoldingPriority=atmIfVpcVpdTmHoldingPriority, atmIfCAVbrRtCdvt=atmIfCAVbrRtCdvt, atmIfVccTmAbrMaxTimeBetweenRmCell=atmIfVccTmAbrMaxTimeBetweenRmCell, atmIfVptStorageType=atmIfVptStorageType, atmIfCAUbrPool=atmIfCAUbrPool, atmIfVccVcdTmUnshapedTransmitQueueing=atmIfVccVcdTmUnshapedTransmitQueueing, atmIfVccStatsRxAal5FrameError=atmIfVccStatsRxAal5FrameError, atmIfVptVccTestRowStatus=atmIfVptVccTestRowStatus, atmIfVptVpd=atmIfVptVpd, atmIfCARtVbrShapeRecoupPolicy=atmIfCARtVbrShapeRecoupPolicy, atmIfVptRxTdpValue=atmIfVptRxTdpValue, atmIfVptVccConnectionPointType=atmIfVptVccConnectionPointType, atmIfVptVccStateEntry=atmIfVptVccStateEntry, atmIfVptCANrtVbrComponentName=atmIfVptCANrtVbrComponentName, atmIfOperationalState=atmIfOperationalState, atmIfVpcTm=atmIfVpcTm, atmIfVccTestTimeRemaining=atmIfVccTestTimeRemaining, atmIfVccTestVerificationFrmRx=atmIfVccTestVerificationFrmRx, atmIfVptCAMaxVccs=atmIfVptCAMaxVccs, atmIfVptCABwPoolTable=atmIfVptCABwPoolTable, atmIfVptTmAbrBrmExplicitRate=atmIfVptTmAbrBrmExplicitRate, atmIfVpcVpdTmBqpValue=atmIfVpcVpdTmBqpValue, atmIfCA=atmIfCA, atmIfCAPoolAdmitBwEntry=atmIfCAPoolAdmitBwEntry, atmIfVptTmAbrComponentName=atmIfVptTmAbrComponentName, atmIfVccRdiState=atmIfVccRdiState, atmIfVptVpdTmAtmServiceCategory=atmIfVptVpdTmAtmServiceCategory, atmIfCANrtVbrProvEntry=atmIfCANrtVbrProvEntry, atmIfVpcTmRxTdpTable=atmIfVpcTmRxTdpTable, atmIfVptVccVcdUsageParameterControl=atmIfVptVccVcdUsageParameterControl, atmIfVpcBqpTable=atmIfVpcBqpTable, atmIfVptVccVcdTmForceTagging=atmIfVptVccVcdTmForceTagging, atmIfVptVccNepStorageType=atmIfVptVccNepStorageType, atmIfVptCAPoolAdmConnsTable=atmIfVptCAPoolAdmConnsTable, atmIfVptVccVcdLoopbackMonitoring=atmIfVptVccVcdLoopbackMonitoring, atmIfVptRxUtilization=atmIfVptRxUtilization, atmIfVccTxQosClass=atmIfVccTxQosClass, atmIfVptVccVcdFqpTable=atmIfVptVccVcdFqpTable, atmIfVptVpdTmAbrConnectionType=atmIfVptVpdTmAbrConnectionType, atmIfVccTxDiscardClp=atmIfVccTxDiscardClp, atmIfVccTestComponentName=atmIfVccTestComponentName, atmIfCAUbrTxQueueLimit=atmIfCAUbrTxQueueLimit, atmIfVpcVpdTmAbrInitialCellRate=atmIfVpcVpdTmAbrInitialCellRate, atmIfVptVpdTmTxQueueLimit=atmIfVptVpdTmTxQueueLimit, atmIfVptCAUbrRowStatusTable=atmIfVptCAUbrRowStatusTable, atmIfVccTestCauseOfTermination=atmIfVccTestCauseOfTermination, atmIfCAAbrOperTable=atmIfCAAbrOperTable, atmIfVptVpdTmRxTdpIndex=atmIfVptVpdTmRxTdpIndex, atmIfCAAbrStorageType=atmIfCAAbrStorageType, atmIfVpcTmWeight=atmIfVpcTmWeight, atmIfVptBearerClassBbc=atmIfVptBearerClassBbc, atmIfVptVpdTmRxTrafficDescType=atmIfVptVpdTmRxTrafficDescType, atmIfVptVccTestStateTable=atmIfVptVccTestStateTable, atmIfVpcTmTqpTable=atmIfVpcTmTqpTable, atmIfVccBandwidthReduction=atmIfVccBandwidthReduction, atmIfVpcTmAbrAcrDecreaseTimeFactor=atmIfVpcTmAbrAcrDecreaseTimeFactor, atmIfVptVccTmRxTdpIndex=atmIfVptVccTmRxTdpIndex, atmIfVccUsageParameterControl=atmIfVccUsageParameterControl, atmIfVptCAUbrIndex=atmIfVptCAUbrIndex, atmIfVccTestFrmTypes=atmIfVccTestFrmTypes, atmIfVccTestBytesTx=atmIfVccTestBytesTx, atmIfVpcStatsTxCellDiscardClp=atmIfVpcStatsTxCellDiscardClp, atmIfVptStatsRxAal5FrameError=atmIfVptStatsRxAal5FrameError, atmIfVptTmAbrRowStatusEntry=atmIfVptTmAbrRowStatusEntry, atmIfVptVpdTmTxWredThreshold=atmIfVptVpdTmTxWredThreshold, atmIfVpcVpdFqpValue=atmIfVpcVpdFqpValue, atmIfVptVccTestDuration=atmIfVptVccTestDuration, atmIfCARtVbrProvEntry=atmIfCARtVbrProvEntry, atmIfVptVccTestSetupEntry=atmIfVptVccTestSetupEntry, atmIfVpcVpdFqpEntry=atmIfVpcVpdFqpEntry, atmIfVccTmRqpIndex=atmIfVccTmRqpIndex, atmIfNAcctRowStatus=atmIfNAcctRowStatus, atmIfVptVpdVptType=atmIfVptVpdVptType, atmIfVptVccTxUtilization=atmIfVptVccTxUtilization, atmIfVptVccAtmServiceCategory=atmIfVptVccAtmServiceCategory, atmIfCAMinAutoSelectedVciForNonZeroVpi=atmIfCAMinAutoSelectedVciForNonZeroVpi, atmIfVptVccVcdTmUnshapedTransmitQueueing=atmIfVptVccVcdTmUnshapedTransmitQueueing, atmIfNAcctStorageType=atmIfNAcctStorageType, atmIfVptVccTestResultsTable=atmIfVptVccTestResultsTable, atmIfTxCellMemoryThresholdValue=atmIfTxCellMemoryThresholdValue, atmIfVptVccFwdQosClass=atmIfVptVccFwdQosClass, atmIfVptVccTransferCapabilityBbc=atmIfVptVccTransferCapabilityBbc, atmIfVpcLoop=atmIfVpcLoop, atmIfVccVcdTxTdpTable=atmIfVccVcdTxTdpTable, atmIfVccBqpTable=atmIfVccBqpTable, atmIfVptVpdRxTrafficDescType=atmIfVptVpdRxTrafficDescType, atmIfVptVccVcdTmAbrRowStatus=atmIfVptVccVcdTmAbrRowStatus, atmIfVptVccTmRqpValue=atmIfVptVccTmRqpValue, atmIfTxCell=atmIfTxCell, atmIfVptVccTestAdminState=atmIfVptVccTestAdminState, atmIfVptVccIndex=atmIfVptVccIndex, atmIfVccTestBytesRx=atmIfVccTestBytesRx, atmIfVptTxDiscardClp=atmIfVptTxDiscardClp, atmIfVptVpdTmAbrFixedRoundTripTime=atmIfVptVpdTmAbrFixedRoundTripTime, atmIfVptVccTxQThreshTable=atmIfVptVccTxQThreshTable, atmIfVptVccVcdUnshapedTransmitQueueing=atmIfVptVccVcdUnshapedTransmitQueueing, atmIfVpcVpdTmAbrCutoffDecreaseFactor=atmIfVpcVpdTmAbrCutoffDecreaseFactor, atmIfCARtVbrRowStatusEntry=atmIfCARtVbrRowStatusEntry, atmIfVccOperStatus=atmIfVccOperStatus, atmIfCASvcCbrHoldingPriority=atmIfCASvcCbrHoldingPriority, atmIfVpcVpdTmAbrRowStatus=atmIfVpcVpdTmAbrRowStatus, atmIfCACbrUsageParameterControl=atmIfCACbrUsageParameterControl, atmIfVccTxQueueLength=atmIfVccTxQueueLength, atmIfVptTmTqpTable=atmIfVptTmTqpTable, atmIfVpcComponentName=atmIfVpcComponentName, atmIfVptVccFqpEntry=atmIfVptVccFqpEntry, atmIfNAcctRowStatusTable=atmIfNAcctRowStatusTable)
mibBuilder.exportSymbols("Nortel-Magellan-Passport-AtmCoreMIB", atmIfVpc=atmIfVpc, atmIfVptVccTmRqpEntry=atmIfVptVccTmRqpEntry, atmIfVptRdiState=atmIfVptRdiState, atmIfVptVpdTmAbrComponentName=atmIfVptVpdTmAbrComponentName, atmIfVptVpdTmProvEntry=atmIfVptVpdTmProvEntry, atmIfRowStatusTable=atmIfRowStatusTable, atmIfVptVccVcdTmAbrFarEndAcrDecreaseTimeFactor=atmIfVptVccVcdTmAbrFarEndAcrDecreaseTimeFactor, atmIfVptVccNepApplicationName=atmIfVptVccNepApplicationName, atmIfTxLinkUtilization=atmIfTxLinkUtilization, atmIfVptTmHoldingPriority=atmIfVptTmHoldingPriority, atmIfRxCellDiscardClp=atmIfRxCellDiscardClp, atmIfVccBqpValue=atmIfVccBqpValue, atmIfVptVccTmTxQThreshTable=atmIfVptVccTmTxQThreshTable, atmIfVptVpdCorrelationTag=atmIfVptVpdCorrelationTag, atmIfVpcStatsEntry=atmIfVpcStatsEntry, atmIfVpcTmTxTdpIndex=atmIfVpcTmTxTdpIndex, atmIfVptVccVcdTmRxTrafficDescType=atmIfVptVccVcdTmRxTrafficDescType, atmIfVptTmAbrTxRateChangeInfo=atmIfVptTmAbrTxRateChangeInfo, atmIfVptCACbrMaxCtd=atmIfVptCACbrMaxCtd, atmIfVpcTmAbrTxRateChangeInfo=atmIfVpcTmAbrTxRateChangeInfo, atmIfVpcVpdTmAbrIndex=atmIfVpcVpdTmAbrIndex, atmIfVptOperEntry=atmIfVptOperEntry, atmIfVpcTmBandwidthElastic=atmIfVpcTmBandwidthElastic, atmIfCACbrRowStatus=atmIfCACbrRowStatus, atmIfVptVccStatusEntry=atmIfVptVccStatusEntry, atmIfVptVccTestBytesRx=atmIfVptVccTestBytesRx, atmIfVccVcdTmBestEffort=atmIfVccVcdTmBestEffort, atmIfVptVccVcdTmAbrDgcraMaximumDelay=atmIfVptVccVcdTmAbrDgcraMaximumDelay, atmIfTxCellMemoryUsage=atmIfTxCellMemoryUsage, atmIfCARowStatusTable=atmIfCARowStatusTable, atmIfVptVccRowStatusTable=atmIfVptVccRowStatusTable, atmIfVptVccVcdTmFqpValue=atmIfVptVccVcdTmFqpValue, atmIfCAAbrEpdOffset=atmIfCAAbrEpdOffset, atmIfVpcTmAbrAcrRateChangeInfo=atmIfVpcTmAbrAcrRateChangeInfo, atmIfCACbrProvPool=atmIfCACbrProvPool, atmIfVccTmRxTrafficDescType=atmIfVccTmRxTrafficDescType, atmIfVpcVpdTmRxTdpIndex=atmIfVpcVpdTmRxTdpIndex, atmIfVccVcdTmRowStatus=atmIfVccVcdTmRowStatus, atmIfVccVcdTxTdpIndex=atmIfVccVcdTxTdpIndex, atmIfVpcVpdTmRxTdpEntry=atmIfVpcVpdTmRxTdpEntry, atmIfVptCABwPoolValue=atmIfVptCABwPoolValue, atmIfCACbrForceTagging=atmIfCACbrForceTagging, atmIfVptCAPoolAdmConnsValue=atmIfVptCAPoolAdmConnsValue, atmIfRowStatusEntry=atmIfRowStatusEntry, atmIfVptVpdRxQosClass=atmIfVptVpdRxQosClass, atmIfVptCARtVbrIndex=atmIfVptCARtVbrIndex, atmIfVptVccLoopRowStatus=atmIfVptVccLoopRowStatus, atmIfVpcVpdTxTdpTable=atmIfVpcVpdTxTdpTable, atmIfConnMapOvComponentName=atmIfConnMapOvComponentName, atmIfVptTmAbrMaxCellPerRmCell=atmIfVptTmAbrMaxCellPerRmCell, atmIfVpcStatsTxCell=atmIfVpcStatsTxCell, atmIfVpcVpdTmAbrComponentName=atmIfVpcVpdTmAbrComponentName, atmIfVptVccTxDiscardClp=atmIfVptVccTxDiscardClp, atmIfCARtVbrTxQueueLimit=atmIfCARtVbrTxQueueLimit, atmIfVpcVpdTmRxPacketWiseDiscard=atmIfVpcVpdTmRxPacketWiseDiscard, atmIfVptVccTxQueueCongestionState=atmIfVptVccTxQueueCongestionState, atmIfVpcVpdTmProvEntry=atmIfVpcVpdTmProvEntry, atmIfVptVccVcdTmFqpTable=atmIfVptVccVcdTmFqpTable, atmIfVccTestIndex=atmIfVccTestIndex, atmIfVptVccTmTxQThreshEntry=atmIfVptVccTmTxQThreshEntry, atmIfVpcVpdRxTdpIndex=atmIfVpcVpdRxTdpIndex, atmIfVptVpdTxQosClass=atmIfVptVpdTxQosClass, atmIfVptVpdTmAbrFarEndAcrDecreaseTimeFactor=atmIfVptVpdTmAbrFarEndAcrDecreaseTimeFactor, atmIfVpcStatsRxUpcViolationOnEnforcer2=atmIfVpcStatsRxUpcViolationOnEnforcer2, atmIfVptCAPoolAdmitBwIndex=atmIfVptCAPoolAdmitBwIndex, atmIfVccRxUtilization=atmIfVccRxUtilization, atmIfEpRowStatusTable=atmIfEpRowStatusTable, atmIfVccTmTxQThreshIndex=atmIfVccTmTxQThreshIndex, atmIfCAAbrProvTable=atmIfCAAbrProvTable, atmIfVpcLoopIndex=atmIfVpcLoopIndex, atmIfVptCAPoolAvailBwIndex=atmIfVptCAPoolAvailBwIndex, atmIfVptCAPoolProvBwIndex=atmIfVptCAPoolProvBwIndex, atmIfVccTmAbrBrmRateChangeInfo=atmIfVccTmAbrBrmRateChangeInfo, atmIfVptCARtVbrStorageType=atmIfVptCARtVbrStorageType, atmIfVptRxOamCellCongestionState=atmIfVptRxOamCellCongestionState, atmIfVptCACbrRowStatusEntry=atmIfVptCACbrRowStatusEntry, atmIfVptVccOperEntry=atmIfVptVccOperEntry, atmIfVpcTxQThreshIndex=atmIfVpcTxQThreshIndex, atmIfVptVpdTmTxTrafficDescType=atmIfVptVpdTmTxTrafficDescType, atmIfVpcTxQThreshEntry=atmIfVpcTxQThreshEntry, atmIfVptVpdTxTdpValue=atmIfVptVpdTxTdpValue, atmIfVccTestLoadingFrmTx=atmIfVccTestLoadingFrmTx, atmIfVptVccTmUnshapedTransmitQueueing=atmIfVptVccTmUnshapedTransmitQueueing, atmIfEpStorageType=atmIfEpStorageType, atmIfVccStatsRxCell=atmIfVccStatsRxCell, atmIfEpRowStatusEntry=atmIfEpRowStatusEntry, atmIfVpcTmTrafficShaping=atmIfVpcTmTrafficShaping, atmIfVptHoldingPriority=atmIfVptHoldingPriority, atmIfVptVccTmRowStatusTable=atmIfVptVccTmRowStatusTable, atmIfTxCellClp=atmIfTxCellClp, atmIfCANrtVbrComponentName=atmIfCANrtVbrComponentName, atmIfCAMaxAutoSelectedVciForNonZeroVpi=atmIfCAMaxAutoSelectedVciForNonZeroVpi, atmIfVptCAUbrMaxVccs=atmIfVptCAUbrMaxVccs, atmIfCARtVbrWeightPolicy=atmIfCARtVbrWeightPolicy, atmIfVccTmAbrBrmExplicitRate=atmIfVccTmAbrBrmExplicitRate, atmIfVpcVpdTmTxTdpTable=atmIfVpcVpdTmTxTdpTable, atmIfVptVccTmRxTdpValue=atmIfVptVccTmRxTdpValue, atmIfVccTestBandwidthElastic=atmIfVccTestBandwidthElastic, atmIfVptOperTable=atmIfVptOperTable, atmIfVpcRdiState=atmIfVpcRdiState, atmIfVccVcdTmHoldingPriority=atmIfVccVcdTmHoldingPriority, atmIfVptCAPoolAdmitBwValue=atmIfVptCAPoolAdmitBwValue, atmIfVptVccFqpIndex=atmIfVptVccFqpIndex, atmIfVptVccLoopRowStatusTable=atmIfVptVccLoopRowStatusTable, atmIfVptBqpTable=atmIfVptBqpTable, atmIfVccVcdTxTrafficDescType=atmIfVccVcdTxTrafficDescType, atmIfCAUbrMaxVpts=atmIfCAUbrMaxVpts, atmIfVpcVpdBearerClassBbc=atmIfVpcVpdBearerClassBbc, atmIfVptVccVcdTmTxTrafficDescType=atmIfVptVccVcdTmTxTrafficDescType, atmIfVptVccVcdTmBwdQosClass=atmIfVptVccVcdTmBwdQosClass, atmIfConnMapOperEntry=atmIfConnMapOperEntry, atmIfVccStatsRxUpcViolationOnEnforcer1=atmIfVccStatsRxUpcViolationOnEnforcer1, atmIfVpcTmAbrRateDecreaseFactor=atmIfVpcTmAbrRateDecreaseFactor, atmIfVpcRxQosClass=atmIfVpcRxQosClass, atmIfLastAal5RxErrorConnection=atmIfLastAal5RxErrorConnection, atmIfCANrtVbrRowStatus=atmIfCANrtVbrRowStatus, atmIfVptVccVcdTmRowStatusTable=atmIfVptVccVcdTmRowStatusTable, atmIfCAVbrRtCellLossRatio=atmIfCAVbrRtCellLossRatio, atmIfVccVcdTmRxTrafficDescType=atmIfVccVcdTmRxTrafficDescType, atmIfVptVccVcdTxTrafficDescType=atmIfVptVccVcdTxTrafficDescType, atmIfConnMapVccProvTable=atmIfConnMapVccProvTable, atmIfVptCAPoolRequBwIndex=atmIfVptCAPoolRequBwIndex, atmIfVptVccVcdFwdFrameDiscard=atmIfVptVccVcdFwdFrameDiscard, atmIfVptStatsTxCell=atmIfVptStatsTxCell, atmIfVccVcdTmAbrInitialCellRate=atmIfVccVcdTmAbrInitialCellRate, atmIfVccTmTqpTable=atmIfVccTmTqpTable, atmIfVptVpdTmAbrAcrDecreaseTimeFactor=atmIfVptVpdTmAbrAcrDecreaseTimeFactor, atmIfVptVccVcdBqpEntry=atmIfVptVccVcdBqpEntry, atmIfVptVccDistributionType=atmIfVptVccDistributionType, atmIfCAAbrRowStatusTable=atmIfCAAbrRowStatusTable, atmIfCACbrComponentName=atmIfCACbrComponentName, atmIfVpcVpdRxTdpEntry=atmIfVpcVpdRxTdpEntry, atmIfVptEndToEndLoopbackState=atmIfVptEndToEndLoopbackState, atmIfVptVpdBqpIndex=atmIfVptVpdBqpIndex, atmIfVptVccVcdTmAbrProvTable=atmIfVptVccVcdTmAbrProvTable, atmIfVpcTxQThreshValue=atmIfVpcTxQThreshValue, atmIfVpcVpdBqpEntry=atmIfVpcVpdBqpEntry, atmIfVpcTmRqpIndex=atmIfVpcTmRqpIndex, atmIfVptCACbrCellLossRatio=atmIfVptCACbrCellLossRatio, atmIfCAPoolRequBwEntry=atmIfCAPoolRequBwEntry, atmIfVccVcdTmAbrProvEntry=atmIfVccVcdTmAbrProvEntry, atmIfVptTxQThreshEntry=atmIfVptTxQThreshEntry, atmIfLrcFrameErrors=atmIfLrcFrameErrors, atmIfVpcTxTdpEntry=atmIfVpcTxTdpEntry, atmIfVccTransferCapabilityBbc=atmIfVccTransferCapabilityBbc, atmIfVptVccStateTable=atmIfVptVccStateTable, atmIfVpcStateTable=atmIfVpcStateTable, atmIfVpcVpdTmBwdQosClass=atmIfVpcVpdTmBwdQosClass, atmIfVccVcdTmRxTdpTable=atmIfVccVcdTmRxTdpTable, atmIfVptVpdTmAbrRateIncreaseFactor=atmIfVptVpdTmAbrRateIncreaseFactor, atmIfVccTestResultsTable=atmIfVccTestResultsTable, atmIfVccTestRowStatusTable=atmIfVccTestRowStatusTable, atmIfVptStatusTable=atmIfVptStatusTable, atmIfVptCAPoolWaitAdmConnsValue=atmIfVptCAPoolWaitAdmConnsValue, atmIfVptVccBandwidthReduction=atmIfVptVccBandwidthReduction, atmIfCAVbrNrtCellLossRatio=atmIfCAVbrNrtCellLossRatio, atmIfVpcTrafficShaping=atmIfVpcTrafficShaping, atmIfVccVcdTmAbrRowStatusEntry=atmIfVccVcdTmAbrRowStatusEntry, atmIfConnMapOvProvEntry=atmIfConnMapOvProvEntry, atmIfVptVccTmAbrMaxCellPerRmCell=atmIfVptVccTmAbrMaxCellPerRmCell, atmIfCAPoolRequBwTable=atmIfCAPoolRequBwTable, atmIfCAUbrUsageParameterControl=atmIfCAUbrUsageParameterControl, atmIfVptVccStatsTxCellDiscardClp=atmIfVptVccStatsTxCellDiscardClp, atmIfVpcTmRxQosClass=atmIfVpcTmRxQosClass, atmIfTxCellDiscard=atmIfTxCellDiscard, atmIfVpcFwdQosClass=atmIfVpcFwdQosClass, atmIfVptTmOperEntry=atmIfVptTmOperEntry, atmIfEpComponentName=atmIfEpComponentName, atmIfVptVccBqpValue=atmIfVptVccBqpValue, atmIfVpcVpdTmFqpEntry=atmIfVpcVpdTmFqpEntry, atmIfVccVcdTrafficTable=atmIfVccVcdTrafficTable, atmIfVpcTxUtilization=atmIfVpcTxUtilization, atmIfVptVpdTmAbrRateDecreaseFactor=atmIfVptVpdTmAbrRateDecreaseFactor, atmIfCAUbrAvailableConnections=atmIfCAUbrAvailableConnections, atmIfVptVpdTmAbrProvEntry=atmIfVptVpdTmAbrProvEntry, atmIfVptCANrtVbrRowStatusTable=atmIfVptCANrtVbrRowStatusTable, atmIfVptVccVcdTxTdpValue=atmIfVptVccVcdTxTdpValue, atmIfVptCAPoolProvBwEntry=atmIfVptCAPoolProvBwEntry, atmIfVptVccVcdLbkTable=atmIfVptVccVcdLbkTable, atmIfLoopbackMonitoring=atmIfLoopbackMonitoring, atmIfVptVccNepRowStatusEntry=atmIfVptVccNepRowStatusEntry, atmIfVccTxTdpEntry=atmIfVccTxTdpEntry, atmIfVpcOperStatus=atmIfVpcOperStatus, atmIfVccNepProvTable=atmIfVccNepProvTable, atmIfVptRowStatusEntry=atmIfVptRowStatusEntry, atmIfVpcOperationalState=atmIfVpcOperationalState, atmIfVptVccTmAbrIndex=atmIfVptVccTmAbrIndex, atmIfVccTxTdpTable=atmIfVccTxTdpTable, atmIfVptVccVcdTmFwdQosClass=atmIfVptVccVcdTmFwdQosClass, atmIfProvEntry=atmIfProvEntry, atmIfVptTxQueueCongestionState=atmIfVptTxQueueCongestionState, atmIfConnMapIndex=atmIfConnMapIndex, atmIfVptVpdTmAbrIndex=atmIfVptVpdTmAbrIndex, atmIfVptCAUbrProvEntry=atmIfVptCAUbrProvEntry, atmIfNAcctComponentName=atmIfNAcctComponentName, atmIfVptCAProvEntry=atmIfVptCAProvEntry, atmIfCARtVbrSvcMpHoldingPriority=atmIfCARtVbrSvcMpHoldingPriority, atmIfCAAbrAbrConnectionType=atmIfCAAbrAbrConnectionType, atmIfVptVpdFqpEntry=atmIfVptVpdFqpEntry, atmIfVccVcdUnshapedTransmitQueueing=atmIfVccVcdUnshapedTransmitQueueing, atmIfCANrtVbr=atmIfCANrtVbr, atmIfVptVccTmTxQosClass=atmIfVptVccTmTxQosClass, atmIfVptVccRowStatusEntry=atmIfVptVccRowStatusEntry, atmIfVccTxTdpIndex=atmIfVccTxTdpIndex, atmIfCACbrPerVcQueueLimitReferenceRate=atmIfCACbrPerVcQueueLimitReferenceRate, atmIfVptVccTmAbrInitialCellRate=atmIfVptVccTmAbrInitialCellRate, atmIfVptVccTmHoldingPriority=atmIfVptVccTmHoldingPriority, atmIfConnMapOvStorageType=atmIfConnMapOvStorageType, atmIfVccStatsRxFrameDiscardClp=atmIfVccStatsRxFrameDiscardClp, atmIfTrafficShaping=atmIfTrafficShaping, atmIfRxCellClp=atmIfRxCellClp, atmIfVptVccTestFrmTypes=atmIfVptVccTestFrmTypes, atmIfConnMapNumVccsPerNonZeroVpiOper=atmIfConnMapNumVccsPerNonZeroVpiOper, atmIfVptAdminState=atmIfVptAdminState, atmIfVptVpdTmRxTdpValue=atmIfVptVpdTmRxTdpValue, atmIfVptTmRqpIndex=atmIfVptTmRqpIndex, atmIfCANrtVbrOpUnshapedTransmitQueueing=atmIfCANrtVbrOpUnshapedTransmitQueueing, atmIfVptCACbrPool=atmIfVptCACbrPool, atmIfVptCARtVbrRowStatusTable=atmIfVptCARtVbrRowStatusTable, atmIfVpcTmAbrOperEntry=atmIfVpcTmAbrOperEntry, atmIfCANrtVbrPerVcQueueLimitReferenceRate=atmIfCANrtVbrPerVcQueueLimitReferenceRate, atmIfVpcVpdTmAbrProvEntry=atmIfVpcVpdTmAbrProvEntry, atmIfCAPoolProvBwIndex=atmIfCAPoolProvBwIndex, atmIfVccVcdTmRxTdpValue=atmIfVccVcdTmRxTdpValue, atmIfVptVccStatsRxAal5FrameError=atmIfVptVccStatsRxAal5FrameError, atmIfVptBqpEntry=atmIfVptBqpEntry, atmIfVptVpdBwdFrameDiscard=atmIfVptVpdBwdFrameDiscard, atmIfVptVccTest=atmIfVptVccTest, atmIfVptCANrtVbrProvEntry=atmIfVptCANrtVbrProvEntry, atmIfVptVpdTmAbrMaxCellPerRmCell=atmIfVptVpdTmAbrMaxCellPerRmCell, atmIfVptVpdTmUnshapedTransmitQueueing=atmIfVptVpdTmUnshapedTransmitQueueing, atmIfVptStatusEntry=atmIfVptStatusEntry, atmIfVpcTmAbrForwardRmCellLimit=atmIfVpcTmAbrForwardRmCellLimit, atmIfVpcVpdTmStorageType=atmIfVpcVpdTmStorageType, atmIfCANrtVbrEmissionPriority=atmIfCANrtVbrEmissionPriority, atmIfVptStatsRxUpcViolationOnEnforcer2=atmIfVptStatsRxUpcViolationOnEnforcer2, atmIfVptVccTestOperationalState=atmIfVptVccTestOperationalState, atmIfVptTxQThreshValue=atmIfVptTxQThreshValue, atmIfCAPermittedSvcAtmServiceCategories=atmIfCAPermittedSvcAtmServiceCategories, atmIfVccFwdQosClass=atmIfVccFwdQosClass, atmIfVpcFqpTable=atmIfVpcFqpTable, atmIfVccVcdTmAbrMaxCellPerRmCell=atmIfVccVcdTmAbrMaxCellPerRmCell, atmIfCAStorageType=atmIfCAStorageType, atmIfVptVpdTmBqpIndex=atmIfVptVpdTmBqpIndex, atmIfVptVccVcdTmStorageType=atmIfVptVccVcdTmStorageType, atmIfVccTxTrafficDescType=atmIfVccTxTrafficDescType, atmIfVptVccVcdTmAbrMaxTimeBetweenRmCells=atmIfVptVccVcdTmAbrMaxTimeBetweenRmCells, atmIfVptBandwidthElastic=atmIfVptBandwidthElastic, atmIfCANrtVbrTxQueueLimit=atmIfCANrtVbrTxQueueLimit, atmIfVptVccVcdTmAbrFixedRoundTripTime=atmIfVptVccVcdTmAbrFixedRoundTripTime, atmIfVccTmAbrRateDecreaseFactor=atmIfVccTmAbrRateDecreaseFactor, atmIfVptCANrtVbrStorageType=atmIfVptCANrtVbrStorageType, atmIfVccTmTxQueueCongestionState=atmIfVccTmTxQueueCongestionState, atmIfVpcTmRowStatusTable=atmIfVpcTmRowStatusTable)
mibBuilder.exportSymbols("Nortel-Magellan-Passport-AtmCoreMIB", atmIfVccVcdRxTrafficDescType=atmIfVccVcdRxTrafficDescType, atmIfVpcVpdAtmServiceCategory=atmIfVpcVpdAtmServiceCategory, atmIfVptVccVcdBqpIndex=atmIfVptVccVcdBqpIndex, atmIfVccTmRxPacketWiseDiscard=atmIfVccTmRxPacketWiseDiscard, atmIfVptVccRxOamCellCongestionState=atmIfVptVccRxOamCellCongestionState, atmIfVptVccTxDiscard=atmIfVptVccTxDiscard, atmIfVptVccTestCustomizedPattern=atmIfVptVccTestCustomizedPattern, atmIfCANrtVbrRowStatusTable=atmIfCANrtVbrRowStatusTable, atmIfVptCAPoolAdmitBwEntry=atmIfVptCAPoolAdmitBwEntry, atmIfVpcRxUtilization=atmIfVpcRxUtilization, atmIfVptVccVcdTmAbrFarEndInitialCellRate=atmIfVptVccVcdTmAbrFarEndInitialCellRate, atmIfLastAal5RxAbortConnection=atmIfLastAal5RxAbortConnection, atmIfVpcTmAbrCutoffDecreaseFactor=atmIfVpcTmAbrCutoffDecreaseFactor, atmIfConnMapOvIndex=atmIfConnMapOvIndex, atmIfVptVccOperStatus=atmIfVptVccOperStatus, atmIfCABwPoolTable=atmIfCABwPoolTable, atmIfVccFqpValue=atmIfVccFqpValue, atmIfVptVpdTmRxTdpEntry=atmIfVptVpdTmRxTdpEntry, atmIfVpcSegLinkSideLoopbackState=atmIfVpcSegLinkSideLoopbackState, atmIfVccVcdBestEffort=atmIfVccVcdBestEffort, atmIfCAMaxCaVpts=atmIfCAMaxCaVpts, atmIfVptVpdTmTxTdpIndex=atmIfVptVpdTmTxTdpIndex, atmIfVptVpdFwdQosClass=atmIfVptVpdFwdQosClass, atmIfVccVcdRowStatus=atmIfVccVcdRowStatus, atmIfVccVcdFqpEntry=atmIfVccVcdFqpEntry, atmIfVpcVpdFwdFrameDiscard=atmIfVpcVpdFwdFrameDiscard, atmIfVptVccVcdTmBqpValue=atmIfVptVccVcdTmBqpValue, atmIfVccTmTxQosClass=atmIfVccTmTxQosClass, atmIfVptVpdAcctTable=atmIfVptVpdAcctTable, atmIfAvailabilityStatus=atmIfAvailabilityStatus, atmIfVccVcdTmTxQueueLimit=atmIfVccVcdTmTxQueueLimit, atmIfVccVcdBwdQosClass=atmIfVccVcdBwdQosClass, atmIfVptVccVcdBqpTable=atmIfVptVccVcdBqpTable, atmIfVptVccTestUnrecognizableFrmRx=atmIfVptVccTestUnrecognizableFrmRx, atmIfVptTmOperTable=atmIfVptTmOperTable, atmIfVpcTransferCapabilityBbc=atmIfVpcTransferCapabilityBbc, atmIfVptTmRxTdpIndex=atmIfVptTmRxTdpIndex, atmIfVpcTmAbrRowStatusTable=atmIfVpcTmAbrRowStatusTable, atmIfVpcFqpValue=atmIfVpcFqpValue, atmIfVptVpdTmFwdQosClass=atmIfVptVpdTmFwdQosClass, atmIfCAPoolProvBwValue=atmIfCAPoolProvBwValue, atmIfVptVccTmTrafficShaping=atmIfVptVccTmTrafficShaping, atmIfVpcVpdTmRowStatusEntry=atmIfVpcVpdTmRowStatusEntry, atmIfAal5RxAborts=atmIfAal5RxAborts, atmIfVccVcdBqpEntry=atmIfVccVcdBqpEntry, atmIfVptVpdRxTdpIndex=atmIfVptVpdRxTdpIndex, atmIfVptCARtVbrProvEntry=atmIfVptCARtVbrProvEntry, atmIfCAPoolAvailableBwValue=atmIfCAPoolAvailableBwValue, atmIfVpcVpd=atmIfVpcVpd, atmIfVccRxTdpTable=atmIfVccRxTdpTable, atmIfEpRowStatus=atmIfEpRowStatus, atmIfVpcLoopRowStatusTable=atmIfVpcLoopRowStatusTable, atmIfVptVpdIndex=atmIfVptVpdIndex, atmIfVccBearerClassBbc=atmIfVccBearerClassBbc, atmIfVptVpdRowStatusTable=atmIfVptVpdRowStatusTable, atmIfVptVccVcdRxTdpIndex=atmIfVptVccVcdRxTdpIndex, atmIfVpcUnshapedTransmitQueueing=atmIfVpcUnshapedTransmitQueueing, atmIfVccVcdTm=atmIfVccVcdTm, atmIfVptVccStorageType=atmIfVptVccStorageType, atmIfVpcClippingBbc=atmIfVpcClippingBbc, atmIfVccTmAbrMaxCellPerRmCell=atmIfVccTmAbrMaxCellPerRmCell, atmIfVptCACbrRowStatusTable=atmIfVptCACbrRowStatusTable, atmIfVccTmAbrRowStatus=atmIfVccTmAbrRowStatus, atmIfVptTmAbrCutoffDecreaseFactor=atmIfVptTmAbrCutoffDecreaseFactor, atmIfCAMaxVccs=atmIfCAMaxVccs, atmIfVptVccVcdTmRowStatus=atmIfVptVccVcdTmRowStatus, atmIfVptVccVcdAtmServiceCategory=atmIfVptVccVcdAtmServiceCategory, atmIfVptVccVcdTmAbrConnectionType=atmIfVptVccVcdTmAbrConnectionType, atmIfVccVcdAcctEntry=atmIfVccVcdAcctEntry, atmIfVccTestCustomizedPattern=atmIfVccTestCustomizedPattern, atmIfVptVccVcdTmFqpEntry=atmIfVptVccVcdTmFqpEntry, atmIfVpcVpdTmAbrRateIncreaseFactor=atmIfVpcVpdTmAbrRateIncreaseFactor, atmIfVccStatsTxCellClp=atmIfVccStatsTxCellClp, atmIfVccTxQThreshValue=atmIfVccTxQThreshValue, atmIfMaxVpiBits=atmIfMaxVpiBits, atmIfVpcTmStorageType=atmIfVpcTmStorageType, atmIfVccTestVerificationFrmBad=atmIfVccTestVerificationFrmBad, atmIfVptTmComponentName=atmIfVptTmComponentName, atmIfCAProvTable=atmIfCAProvTable, atmIfVccVcdTmAbrAcrDecreaseTimeFactor=atmIfVccVcdTmAbrAcrDecreaseTimeFactor, atmIfVccTestOperationalState=atmIfVccTestOperationalState, atmIfVptVccVcdRxTdpEntry=atmIfVptVccVcdRxTdpEntry, atmIfVpcTmHoldingPriority=atmIfVpcTmHoldingPriority, atmIfVptVpdTmTxPacketWiseDiscard=atmIfVptVpdTmTxPacketWiseDiscard, atmIfVptVccBestEffort=atmIfVptVccBestEffort, atmIfVccStateEntry=atmIfVccStateEntry, atmIfCARtVbrCellLossRatio=atmIfCARtVbrCellLossRatio, atmIfVptVccVcdTrafficTable=atmIfVptVccVcdTrafficTable, atmIfUnshapedTransmitQueueing=atmIfUnshapedTransmitQueueing, atmIfVccVcdLoopbackMonitoring=atmIfVccVcdLoopbackMonitoring, atmIfVptCARtVbrProvTable=atmIfVptCARtVbrProvTable, atmIfVptVccTestIndex=atmIfVptVccTestIndex, atmIfVpcTmOperEntry=atmIfVpcTmOperEntry, atmIfVptCARtVbrComponentName=atmIfVptCARtVbrComponentName, atmIfVpcVpdTmFqpIndex=atmIfVpcVpdTmFqpIndex, atmIfVpcVpdTransferCapabilityBbc=atmIfVpcVpdTransferCapabilityBbc, atmIfVpcStatsRxCell=atmIfVpcStatsRxCell, atmIfCARtVbr=atmIfCARtVbr, atmIfVptRxDiscard=atmIfVptRxDiscard, atmIfVpcVpdTmTxTdpEntry=atmIfVpcVpdTmTxTdpEntry, atmIfCAUbrMaxVpcs=atmIfCAUbrMaxVpcs, atmIfVptCARtVbrRowStatusEntry=atmIfVptCARtVbrRowStatusEntry, atmIfVpcVpdTmTxWredMode=atmIfVpcVpdTmTxWredMode, atmIfVccTmRqpTable=atmIfVccTmRqpTable, atmIfVptTmRxQosClass=atmIfVptTmRxQosClass, atmIfRowStatus=atmIfRowStatus, atmIfVptCAPoolProvBwTable=atmIfVptCAPoolProvBwTable, atmIfVptVccStatsEntry=atmIfVptVccStatsEntry, atmIfVptVccVcdTmTxTdpIndex=atmIfVptVccVcdTmTxTdpIndex, atmIfCANrtVbrPool=atmIfCANrtVbrPool, atmIfVccTxDiscard=atmIfVccTxDiscard, atmIfVptTmAbrStorageType=atmIfVptTmAbrStorageType, atmIfCARtVbrCdvt=atmIfCARtVbrCdvt, atmIfVpcTmRxPacketWiseDiscard=atmIfVpcTmRxPacketWiseDiscard, atmIfVptVccVcdTm=atmIfVptVccVcdTm, atmIfVptVccVcdFqpEntry=atmIfVptVccVcdFqpEntry, atmIfVccTmTxTrafficDescType=atmIfVccTmTxTrafficDescType, atmIfVptVccTmRowStatus=atmIfVptVccTmRowStatus, atmIfCAMaxAutoSelectedVpi=atmIfCAMaxAutoSelectedVpi, atmIfVptVccTmTxQThreshIndex=atmIfVptVccTmTxQThreshIndex, atmIfVptVccNepComponentName=atmIfVptVccNepComponentName, atmIfVccVcdRxQosClass=atmIfVccVcdRxQosClass, atmIfVptTmAbrMaxTimeBetweenRmCell=atmIfVptTmAbrMaxTimeBetweenRmCell, atmIfVpcTxQosClass=atmIfVpcTxQosClass, atmIfVpcTxDiscard=atmIfVpcTxDiscard, atmIfVptVccVcdTransferCapabilityBbc=atmIfVptVccVcdTransferCapabilityBbc, atmIfVptVccVcdTmTxWredMode=atmIfVptVccVcdTmTxWredMode, atmIfCAMaxCaVpcs=atmIfCAMaxCaVpcs, atmIfVccNumLeaves=atmIfVccNumLeaves, atmIfVptVccTestRowStatusEntry=atmIfVptVccTestRowStatusEntry, atmIfVpcStorageType=atmIfVpcStorageType, atmIfVptVpdTmAbrProvTable=atmIfVptVpdTmAbrProvTable, atmIfVccVcdBqpIndex=atmIfVccVcdBqpIndex, atmIfVptCAUbrRowStatus=atmIfVptCAUbrRowStatus, atmIfVptVccAdminState=atmIfVptVccAdminState, atmIfVccTestFrmSize=atmIfVccTestFrmSize, atmIfNAcctServiceExchange=atmIfNAcctServiceExchange, atmIfVptTrafficTable=atmIfVptTrafficTable, atmIfVccVcdTmFqpValue=atmIfVccVcdTmFqpValue, atmIfVccTmAbrCutoffDecreaseFactor=atmIfVccTmAbrCutoffDecreaseFactor, atmIfVptTmTxTdpTable=atmIfVptTmTxTdpTable, atmIfVptVccFqpValue=atmIfVptVccFqpValue, atmIfVptTmTxTdpValue=atmIfVptTmTxTdpValue, atmIfVpcVpdTmClippingBbc=atmIfVpcVpdTmClippingBbc, atmIfVpcTmAbrMaxTimeBetweenRmCell=atmIfVpcTmAbrMaxTimeBetweenRmCell, atmIfVptTmTrafficShaping=atmIfVptTmTrafficShaping, atmIfVccTestDuration=atmIfVccTestDuration, atmIfVptTmAbrRowStatusTable=atmIfVptTmAbrRowStatusTable, atmIfVptVccTestVerificationFrmRx=atmIfVptVccTestVerificationFrmRx, atmIfVpcTmAbrBrmExplicitRate=atmIfVpcTmAbrBrmExplicitRate, atmIfVptVccVcdTmTransferCapabilityBbc=atmIfVptVccVcdTmTransferCapabilityBbc, atmIfVccVcdBqpTable=atmIfVccVcdBqpTable, atmIfVptVccSegSwitchSideLoopbackState=atmIfVptVccSegSwitchSideLoopbackState, atmIfVptVccVcdTxQosClass=atmIfVptVccVcdTxQosClass, atmIfVptVccTmTxQueueCongestionState=atmIfVptVccTmTxQueueCongestionState, atmIfVpcTmTqpIndex=atmIfVpcTmTqpIndex, atmIfVccTmRxTdpIndex=atmIfVccTmRxTdpIndex, atmIfVptTmRxTdpValue=atmIfVptTmRxTdpValue, atmIfVptVccVcdTmTxQueueLimit=atmIfVptVccVcdTmTxQueueLimit, atmIfVptVccTmAbrFixedRoundTripTime=atmIfVptVccTmAbrFixedRoundTripTime, atmIfVccTmTxQueueLength=atmIfVccTmTxQueueLength, atmIfVptVccVcdTmRxPacketWiseDiscard=atmIfVptVccVcdTmRxPacketWiseDiscard, atmIfVptVccTmTxTdpEntry=atmIfVptVccTmTxTdpEntry, atmIfVccIndex=atmIfVccIndex, atmIfVptVccVcdTmWeight=atmIfVptVccVcdTmWeight, atmIfVptRowStatus=atmIfVptRowStatus, atmIfVccTmRowStatusTable=atmIfVccTmRowStatusTable, atmIfVpcUsageParameterControl=atmIfVpcUsageParameterControl, atmIfVccTxQueueCongestionState=atmIfVccTxQueueCongestionState, atmIfVptVccVcdTmAbrComponentName=atmIfVptVccVcdTmAbrComponentName, atmIfOamSegmentBoundary=atmIfOamSegmentBoundary, atmIfVptVccTmRowStatusEntry=atmIfVptVccTmRowStatusEntry, atmIfCAComponentName=atmIfCAComponentName, atmIfVptVpdFqpTable=atmIfVptVpdFqpTable, atmIfVpcRxTdpTable=atmIfVpcRxTdpTable, atmIfVptVccTxQosClass=atmIfVptVccTxQosClass, atmIfMaxVpcs=atmIfMaxVpcs, atmIfVptVpdTmRxPacketWiseDiscard=atmIfVptVpdTmRxPacketWiseDiscard, atmIfCASwitchedVpcs=atmIfCASwitchedVpcs, atmIfVptVccVcdSegLinkSideLoopback=atmIfVptVccVcdSegLinkSideLoopback, atmIfVptVccVcdTmBqpEntry=atmIfVptVccVcdTmBqpEntry, atmIfVccVcdTmAbrMaxTimeBetweenRmCells=atmIfVccVcdTmAbrMaxTimeBetweenRmCells, atmIfVpcTmBestEffort=atmIfVpcTmBestEffort, atmIfVptStatsRxCellClp=atmIfVptStatsRxCellClp, atmIfVpcTmRowStatusEntry=atmIfVpcTmRowStatusEntry, atmIfVptTmAbrRxEfci=atmIfVptTmAbrRxEfci, atmIfVccVcdTransferCapabilityBbc=atmIfVccVcdTransferCapabilityBbc, atmIfCAAbrFairnessPolicy=atmIfCAAbrFairnessPolicy, atmIfCARtVbrOpUnshapedTransmitQueueing=atmIfCARtVbrOpUnshapedTransmitQueueing, atmIfVptVpdTmForceTagging=atmIfVptVpdTmForceTagging, atmIfVptVccVcdTxTdpTable=atmIfVptVccVcdTxTdpTable, atmIfVccRxOamCellCongestionState=atmIfVccRxOamCellCongestionState, atmIfVccVcdTmAbrCutoffDecreaseFactor=atmIfVccVcdTmAbrCutoffDecreaseFactor, atmIfVpcStatusTable=atmIfVpcStatusTable, atmIfVpcVpdTmIndex=atmIfVpcVpdTmIndex, atmIfVccTmAbrTransientBufferExposure=atmIfVccTmAbrTransientBufferExposure, atmIfVpcStatsRxFrameDiscardClp=atmIfVpcStatsRxFrameDiscardClp, atmIfVpcTmOperTable=atmIfVpcTmOperTable, atmIfVptVpdTmBwdQosClass=atmIfVptVpdTmBwdQosClass, atmIfVpcVpdTxTdpEntry=atmIfVpcVpdTxTdpEntry, atmIfVpcTmTxQueueCongestionState=atmIfVpcTmTxQueueCongestionState, atmIfVpcRxOamCellCongestionState=atmIfVpcRxOamCellCongestionState, atmIfVptVpdTmAbrStorageType=atmIfVptVpdTmAbrStorageType, atmIfVpcFqpIndex=atmIfVpcFqpIndex, atmIfVptVpdProvEntry=atmIfVptVpdProvEntry, atmIfConnMapOvProvTable=atmIfConnMapOvProvTable, atmIfAlarmStatus=atmIfAlarmStatus, atmIfCACbrShapeRecoupPolicy=atmIfCACbrShapeRecoupPolicy, atmIfType=atmIfType, atmIfVptVccVcdTmAbrStorageType=atmIfVptVccVcdTmAbrStorageType, atmIfVccTmAbrRowStatusEntry=atmIfVccTmAbrRowStatusEntry, atmIfCANrtVbrCellLossRatio=atmIfCANrtVbrCellLossRatio, atmIfVpcTmRqpTable=atmIfVpcTmRqpTable, atmIfVptTmAbrRateIncreaseFactor=atmIfVptTmAbrRateIncreaseFactor, atmIfVccTmTxTdpIndex=atmIfVccTmTxTdpIndex, atmIfVptVccTestLoadingFrmRx=atmIfVptVccTestLoadingFrmRx, atmIfEp=atmIfEp, atmIfCAVirtualLinkAdmittedBandwidth=atmIfCAVirtualLinkAdmittedBandwidth, atmIfVpcVpdAcctEntry=atmIfVpcVpdAcctEntry, atmIfVptVpdTmHoldingPriority=atmIfVptVpdTmHoldingPriority, atmIfVptVccTmOperTable=atmIfVptVccTmOperTable, atmIfNAcctAccountCollection=atmIfNAcctAccountCollection, atmIfCANrtVbrWeightPolicy=atmIfCANrtVbrWeightPolicy, atmIfVpcTmAbrIndex=atmIfVpcTmAbrIndex, atmIfVptUnshapedTransmitQueueing=atmIfVptUnshapedTransmitQueueing, atmIfVptVpdLbkEntry=atmIfVptVpdLbkEntry, atmIfVptTmTxTdpEntry=atmIfVptTmTxTdpEntry, atmIfVpcAisState=atmIfVpcAisState, atmIfVccVcdRxTdpIndex=atmIfVccVcdRxTdpIndex, atmIfVpcOperEntry=atmIfVpcOperEntry, atmIfVpcVpdTmBqpTable=atmIfVpcVpdTmBqpTable, atmIfVccTestAdminState=atmIfVccTestAdminState, atmIfVptVpdAtmServiceCategory=atmIfVptVpdAtmServiceCategory, atmIfVccVcdTmRowStatusTable=atmIfVccVcdTmRowStatusTable, atmIfVccNepRowStatusTable=atmIfVccNepRowStatusTable, atmIfVptVpdFqpIndex=atmIfVptVpdFqpIndex, atmIfTxCellMemory=atmIfTxCellMemory, atmIfCACbrTrafficShaping=atmIfCACbrTrafficShaping, atmIfVptCAAbrComponentName=atmIfVptCAAbrComponentName, atmIfVptStatsTxCellDiscardClp=atmIfVptStatsTxCellDiscardClp, atmIfCAPoolWaitAdmConnsIndex=atmIfCAPoolWaitAdmConnsIndex, atmIfVptVccTestBandwidthElastic=atmIfVptVccTestBandwidthElastic, atmCoreCapabilities=atmCoreCapabilities, atmIfCidDataTable=atmIfCidDataTable, atmIfCARtVbrProvTable=atmIfCARtVbrProvTable, atmIfTxCellMemoryThresholdEntry=atmIfTxCellMemoryThresholdEntry, atmIfVpcVpdTmFqpValue=atmIfVpcVpdTmFqpValue, atmIfCAPermanentVccs=atmIfCAPermanentVccs, atmIfVptVccVcdRowStatusTable=atmIfVptVccVcdRowStatusTable, atmIfVptVccTmAbrRateDecreaseFactor=atmIfVptVccTmAbrRateDecreaseFactor, atmIfVptTmTxTdpIndex=atmIfVptTmTxTdpIndex, atmIfVpcTmAbrFixedRoundTripTime=atmIfVpcTmAbrFixedRoundTripTime, atmIfVccTmRowStatusEntry=atmIfVccTmRowStatusEntry, atmIfVptVccTmAbrOperTable=atmIfVptVccTmAbrOperTable)
mibBuilder.exportSymbols("Nortel-Magellan-Passport-AtmCoreMIB", atmIfCACbrTxQueueLimit=atmIfCACbrTxQueueLimit, atmIfVpcAdminState=atmIfVpcAdminState, atmIfVptVccVcdRxQosClass=atmIfVptVccVcdRxQosClass, atmIfVpcTmAbrBrmRateChangeInfo=atmIfVpcTmAbrBrmRateChangeInfo, atmIfNAcctRowStatusEntry=atmIfNAcctRowStatusEntry, atmIfVpcVpdRowStatusEntry=atmIfVpcVpdRowStatusEntry, atmIfVccVcdTmAbrRowStatusTable=atmIfVccVcdTmAbrRowStatusTable, atmIfCAAbrRateIncreaseFactor=atmIfCAAbrRateIncreaseFactor, atmIfVccVcdTmAbrRateIncreaseFactor=atmIfVccVcdTmAbrRateIncreaseFactor, atmIfVptRxTdpEntry=atmIfVptRxTdpEntry, atmIfVptVpdTmTransferCapabilityBbc=atmIfVptVpdTmTransferCapabilityBbc, atmIfReceivedCells=atmIfReceivedCells, atmIfVptVccTmBestEffort=atmIfVptVccTmBestEffort, atmIfNAcctIndex=atmIfNAcctIndex, atmIfVptCAUbrStorageType=atmIfVptCAUbrStorageType, atmIfVccTmRxQosClass=atmIfVccTmRxQosClass, atmIfVpcVpdTxTdpValue=atmIfVpcVpdTxTdpValue, atmIfVccVcdTrafficShaping=atmIfVccVcdTrafficShaping, atmIfVpcBestEffort=atmIfVpcBestEffort, atmIfCidDataEntry=atmIfCidDataEntry, atmIfVccVcdAtmServiceCategory=atmIfVccVcdAtmServiceCategory, atmIfVptCAUbrComponentName=atmIfVptCAUbrComponentName, atmIfVptVccVcd=atmIfVptVccVcd, atmIfCARtVbrRowStatusTable=atmIfCARtVbrRowStatusTable, atmIfCANrtVbrSvcHoldingPriority=atmIfCANrtVbrSvcHoldingPriority, atmIfVptVpdTmBestEffort=atmIfVptVpdTmBestEffort, atmIfVptCAStorageType=atmIfVptCAStorageType, atmIfVptCAPoolAvailBwEntry=atmIfVptCAPoolAvailBwEntry, atmIfVptCAPoolRequBwEntry=atmIfVptCAPoolRequBwEntry, atmIfCAAbrCutoffDecreaseFactor=atmIfCAAbrCutoffDecreaseFactor, atmIfCARtVbrMaxCtd=atmIfCARtVbrMaxCtd, atmIfCACbrStorageType=atmIfCACbrStorageType, atmIfCASvcVbrRtHoldingPriority=atmIfCASvcVbrRtHoldingPriority, atmIfConnMapFirstNonZeroVpiForVccsOper=atmIfConnMapFirstNonZeroVpiForVccsOper, atmIfVpcVpdIndex=atmIfVpcVpdIndex, atmIfVptTmStorageType=atmIfVptTmStorageType, atmIfVptVccTmBearerClassBbc=atmIfVptVccTmBearerClassBbc, atmIfVptVccTmIndex=atmIfVptVccTmIndex, atmIfVpcTmAbrRateIncreaseFactor=atmIfVpcTmAbrRateIncreaseFactor, atmIfVpcVpdTmRowStatusTable=atmIfVpcVpdTmRowStatusTable, atmIfCAAbrRowStatus=atmIfCAAbrRowStatus, atmIfVpcVpdHoldingPriority=atmIfVpcVpdHoldingPriority, atmIfVpcVpdTrafficTable=atmIfVpcVpdTrafficTable, atmIfVptVccVcdRowStatus=atmIfVptVccVcdRowStatus, atmIfVptVpdTxTdpEntry=atmIfVptVpdTxTdpEntry, atmIfVpcTxFrameDiscard=atmIfVpcTxFrameDiscard, atmIfTxCellDiscardClp=atmIfTxCellDiscardClp, atmIfVptVccTmTxQThreshValue=atmIfVptVccTmTxQThreshValue, atmIfCACbrCellLossRatio=atmIfCACbrCellLossRatio, atmIfCARtVbrPerVcQueueLimitReferenceRate=atmIfCARtVbrPerVcQueueLimitReferenceRate, atmIfVptVccTestComponentName=atmIfVptVccTestComponentName, atmIfVccVcdTmClippingBbc=atmIfVccVcdTmClippingBbc, atmIfVccVcdTxQosClass=atmIfVccVcdTxQosClass, atmIfVptVpdTmTxWredMode=atmIfVptVpdTmTxWredMode, atmIfVpcStatsRxFrameDiscard=atmIfVpcStatsRxFrameDiscard, atmIfVptVccVcdTmProvEntry=atmIfVptVccVcdTmProvEntry, atmIfVpcRxDiscardClp=atmIfVpcRxDiscardClp, atmIfVpcVpdTmTxTdpValue=atmIfVpcVpdTmTxTdpValue, atmIfVccTmUsageParameterControl=atmIfVccTmUsageParameterControl, atmIfCAPoolAdmitBwIndex=atmIfCAPoolAdmitBwIndex, atmIfVptVccTestSetupTable=atmIfVptVccTestSetupTable, atmIfVptTmRxTrafficDescType=atmIfVptTmRxTrafficDescType, atmIfVccTestUnrecognizableFrmRx=atmIfVccTestUnrecognizableFrmRx, atmIfVccTmTrafficShaping=atmIfVccTmTrafficShaping, atmIfVpcVpdUnshapedTransmitQueueing=atmIfVpcVpdUnshapedTransmitQueueing, atmIfVccStatsRxCellClp=atmIfVccStatsRxCellClp, atmIfCANrtVbrProvTable=atmIfCANrtVbrProvTable, atmIfCAUbrVccUsage=atmIfCAUbrVccUsage, atmIfVpcTmTxTdpValue=atmIfVpcTmTxTdpValue, atmIfVptTxTrafficDescType=atmIfVptTxTrafficDescType, atmIfVccTmAbrAcrDecreaseTimeFactor=atmIfVccTmAbrAcrDecreaseTimeFactor, atmIfVpcVpdTmAbrAcrDecreaseTimeFactor=atmIfVpcVpdTmAbrAcrDecreaseTimeFactor, atmIfVccOperEntry=atmIfVccOperEntry, atmIfVptCAPoolAvailBwValue=atmIfVptCAPoolAvailBwValue, atmIfVccTmRqpValue=atmIfVccTmRqpValue, atmIfVpcTmRxTrafficDescType=atmIfVpcTmRxTrafficDescType, atmIfVccStatsRxCellDiscard=atmIfVccStatsRxCellDiscard, atmIfVccTmTqpIndex=atmIfVccTmTqpIndex, atmIfVptVccTxTdpValue=atmIfVptVccTxTdpValue, atmIfCABwPoolValue=atmIfCABwPoolValue, atmIfVptVpdTmComponentName=atmIfVptVpdTmComponentName, atmIfCAUbrTrafficShaping=atmIfCAUbrTrafficShaping, atmIfVpcRxTdpValue=atmIfVpcRxTdpValue, atmIfVptRxDiscardClp=atmIfVptRxDiscardClp, atmIfRxCellEfci=atmIfRxCellEfci, atmIfMaxVccs=atmIfMaxVccs, atmIfVpcTmAbrRowStatusEntry=atmIfVpcTmAbrRowStatusEntry, atmIfVpcTxQueueCongestionState=atmIfVpcTxQueueCongestionState, atmIfVccVcdLbkTable=atmIfVccVcdLbkTable, atmIfVptTmWeight=atmIfVptTmWeight, atmIfVptVccBqpEntry=atmIfVptVccBqpEntry, atmIfVptCACbrProvEntry=atmIfVptCACbrProvEntry, atmIfVptCAPoolAdmConnsIndex=atmIfVptCAPoolAdmConnsIndex, atmIfVptVccTestUsageState=atmIfVptVccTestUsageState, atmIfVccOperationalState=atmIfVccOperationalState, atmIfVptVccVcdAcctEntry=atmIfVptVccVcdAcctEntry, atmIfVptVpdTmAbrDgcraMinimumDelay=atmIfVptVpdTmAbrDgcraMinimumDelay, atmIfConnMapNumVccsForVpiZero=atmIfConnMapNumVccsForVpiZero, atmIfConnMapNumNonZeroVpisForVccs=atmIfConnMapNumNonZeroVpisForVccs, atmIfVptVccStatsTxFrameDiscard=atmIfVptVccStatsTxFrameDiscard, atmIfVptTransferCapabilityBbc=atmIfVptTransferCapabilityBbc, atmIfVccVcdTmBwdQosClass=atmIfVccVcdTmBwdQosClass, atmIfVptVccStatsRxUpcViolationOnEnforcer1=atmIfVptVccStatsRxUpcViolationOnEnforcer1, atmIfCAUbrUnshapedTransmitQueueing=atmIfCAUbrUnshapedTransmitQueueing, atmIfVptVccVcdTmIndex=atmIfVptVccVcdTmIndex, atmIfVptVccTxTdpIndex=atmIfVptVccTxTdpIndex, atmIfVpcVpdLbkTable=atmIfVpcVpdLbkTable, atmIfVpcTmRxTdpIndex=atmIfVpcTmRxTdpIndex, atmIfCABwPoolEntry=atmIfCABwPoolEntry, atmIfVptVccTmTqpTable=atmIfVptVccTmTqpTable, atmIfVccTmOperEntry=atmIfVccTmOperEntry, atmIfVptCAPermittedAtmServiceCategories=atmIfVptCAPermittedAtmServiceCategories, atmIfVptTmRxPacketWiseDiscard=atmIfVptTmRxPacketWiseDiscard, atmIfDroppedRxCells=atmIfDroppedRxCells, atmIfVcc=atmIfVcc, atmIfVptVccTestElapsedTime=atmIfVptVccTestElapsedTime, atmIfVccTmTxPacketWiseDiscard=atmIfVccTmTxPacketWiseDiscard, atmIfVptVccTmAbrTxFwdRmCells=atmIfVptVccTmAbrTxFwdRmCells, atmIfVccLoopRowStatusEntry=atmIfVccLoopRowStatusEntry, atmIfVpcStatsTxCellClp=atmIfVpcStatsTxCellClp, atmIfVptTmAbrOperEntry=atmIfVptTmAbrOperEntry, atmIfVptVpdRowStatusEntry=atmIfVptVpdRowStatusEntry, atmIfVptVccVcdTmRxTdpIndex=atmIfVptVccVcdTmRxTdpIndex, atmIfVptTxTdpEntry=atmIfVptTxTdpEntry, atmIfVccVcdTmAbrFixedRoundTripTime=atmIfVccVcdTmAbrFixedRoundTripTime, atmIfVccTmAbr=atmIfVccTmAbr, atmIfVptVccTmOperEntry=atmIfVptVccTmOperEntry, atmIfVptBqpIndex=atmIfVptBqpIndex, atmIfVccTmForceTagging=atmIfVccTmForceTagging, atmIfVptVccNumLeaves=atmIfVptVccNumLeaves, atmIfVptVpdTmAbrInitialCellRate=atmIfVptVpdTmAbrInitialCellRate, atmIfCAAbrInitialCellRate=atmIfCAAbrInitialCellRate, atmIfVpcVpdTmComponentName=atmIfVpcVpdTmComponentName, atmIfVpcTmTxTdpTable=atmIfVpcTmTxTdpTable, atmIfTxCellEfci=atmIfTxCellEfci, atmIfCACbrOperTable=atmIfCACbrOperTable, atmIfCARtVbrStorageType=atmIfCARtVbrStorageType, atmIfConnMapFirstNonZeroVpiForVccs=atmIfConnMapFirstNonZeroVpiForVccs, atmIfVptTmAtmServiceCategory=atmIfVptTmAtmServiceCategory, atmIfVptVccTmAbrComponentName=atmIfVptVccTmAbrComponentName, atmIfVccVcdUsageParameterControl=atmIfVccVcdUsageParameterControl, atmIfVccRowStatus=atmIfVccRowStatus, atmIfVptVccRxUtilization=atmIfVptVccRxUtilization, atmIfVptTmBestEffort=atmIfVptTmBestEffort, atmIfCANrtVbrEpdOffset=atmIfCANrtVbrEpdOffset, atmIfVptVccTmAbrBrmExplicitRate=atmIfVptVccTmAbrBrmExplicitRate, atmIfCARtVbrSvcHoldingPriority=atmIfCARtVbrSvcHoldingPriority, atmIfVpcTrafficTable=atmIfVpcTrafficTable, atmIfVptTmTxQThreshValue=atmIfVptTmTxQThreshValue, atmIfVccStatsEntry=atmIfVccStatsEntry, atmIfCACbrRowStatusEntry=atmIfCACbrRowStatusEntry, atmIfVptVpdTmBqpEntry=atmIfVptVpdTmBqpEntry, atmIfCAAbrMinPerVcQueueLimit=atmIfCAAbrMinPerVcQueueLimit, atmIfVptVccTestLoadingFrmLost=atmIfVptVccTestLoadingFrmLost, atmIfVptVccVcdTmHoldingPriority=atmIfVptVccVcdTmHoldingPriority, atmIfVpcTmTxTdpEntry=atmIfVpcTmTxTdpEntry, atmIfVptVccStatsRxFrameDiscardClp=atmIfVptVccStatsRxFrameDiscardClp, atmIfCAUbrProvEntry=atmIfCAUbrProvEntry, atmIfVccVcdTmWeight=atmIfVccVcdTmWeight, atmIfVptVccNep=atmIfVptVccNep, atmIfVptCAAbrRowStatus=atmIfVptCAAbrRowStatus, atmIfVpcRxFrameDiscard=atmIfVpcRxFrameDiscard, atmIfVccTmRxTdpEntry=atmIfVccTmRxTdpEntry, atmIfVccVcdTmFqpTable=atmIfVccVcdTmFqpTable, atmIfCARtVbrEpdOffset=atmIfCARtVbrEpdOffset, atmIfAal5RxErrors=atmIfAal5RxErrors, atmIfVptVccVcdTmAbrDgcraMinimumDelay=atmIfVptVccVcdTmAbrDgcraMinimumDelay, atmIfVptCAPoolWaitAdmConnsEntry=atmIfVptCAPoolWaitAdmConnsEntry, atmIfVptVccVcdTmRowStatusEntry=atmIfVptVccVcdTmRowStatusEntry, atmIfVptVccStatsRxFrameDiscard=atmIfVptVccStatsRxFrameDiscard, atmIfVptFwdQosClass=atmIfVptFwdQosClass, atmIfVccTest=atmIfVccTest, atmIfCARtVbrComponentName=atmIfCARtVbrComponentName, atmIfVccNepRowStatusEntry=atmIfVccNepRowStatusEntry, atmIfVccNepRowStatus=atmIfVccNepRowStatus, atmIfVccTmUnshapedTransmitQueueing=atmIfVccTmUnshapedTransmitQueueing, atmIfCARowStatusEntry=atmIfCARowStatusEntry, atmIfVptVpdEndToEndLoopback=atmIfVptVpdEndToEndLoopback, atmIfVptTmTxQosClass=atmIfVptTmTxQosClass, atmIfVptVccVcdRxTdpTable=atmIfVptVccVcdRxTdpTable, atmIfCAUbrEpdOffset=atmIfCAUbrEpdOffset, atmIfVptVpdBqpTable=atmIfVptVpdBqpTable, atmIfVptStatsRxAal5FrameAbort=atmIfVptStatsRxAal5FrameAbort, atmIfCAAbrPool=atmIfCAAbrPool, atmIfVptCACbrCdv=atmIfVptCACbrCdv, atmIfVptTxUtilization=atmIfVptTxUtilization, atmIfVccStatusTable=atmIfVccStatusTable, atmIfVptCAAbrStorageType=atmIfVptCAAbrStorageType, atmIfVccVcdTxTdpEntry=atmIfVccVcdTxTdpEntry, atmCoreGroupBE=atmCoreGroupBE, atmIfVccVcdClippingBbc=atmIfVccVcdClippingBbc, atmIfVccVcdTrafficEntry=atmIfVccVcdTrafficEntry, atmIfVccTrafficEntry=atmIfVccTrafficEntry, atmIfCAPoolAdmitBwValue=atmIfCAPoolAdmitBwValue, atmIfVccStatsTxCellDiscard=atmIfVccStatsTxCellDiscard, atmIfVccLoopRowStatus=atmIfVccLoopRowStatus, atmIfVptVccTmAtmServiceCategory=atmIfVptVccTmAtmServiceCategory, atmIfVptVccStatsTxCell=atmIfVptVccStatsTxCell, atmIfConnMapNumVccsForVpiZeroOper=atmIfConnMapNumVccsForVpiZeroOper, atmIfVptVccTestVerificationFrmTx=atmIfVptVccTestVerificationFrmTx, atmIfVptVpdTmAbrCutoffDecreaseFactor=atmIfVptVpdTmAbrCutoffDecreaseFactor, atmIfVptIndex=atmIfVptIndex, atmIfTxCellMemoryThresholdTable=atmIfTxCellMemoryThresholdTable, atmIfVccRxTrafficDescType=atmIfVccRxTrafficDescType, atmIfVptVccVcdTrafficEntry=atmIfVptVccVcdTrafficEntry, atmIfVccVcdTmRxTdpEntry=atmIfVccVcdTmRxTdpEntry, atmIfVptVpdTmIndex=atmIfVptVpdTmIndex, atmCoreGroup=atmCoreGroup, atmIfVccVcdTmBqpIndex=atmIfVccVcdTmBqpIndex, atmIfVccAisState=atmIfVccAisState, atmIfCAAbrProvEntry=atmIfCAAbrProvEntry, atmIfCARtVbrTrafficShaping=atmIfCARtVbrTrafficShaping, atmIfVptVpdRxTdpTable=atmIfVptVpdRxTdpTable, atmIfVpcTmUsageParameterControl=atmIfVpcTmUsageParameterControl, atmIfVptCAUbrMinimumCellRate=atmIfVptCAUbrMinimumCellRate, atmIfVccVcdAcctTable=atmIfVccVcdAcctTable, atmIfVptVpdTransferCapabilityBbc=atmIfVptVpdTransferCapabilityBbc, atmIfVpcTmTxQueueLength=atmIfVpcTmTxQueueLength, atmIfVpcTmRowStatus=atmIfVpcTmRowStatus, atmIfVptVccVcdTmFqpIndex=atmIfVptVccVcdTmFqpIndex, atmIfVccVcdTxTdpValue=atmIfVccVcdTxTdpValue, atmIfVptBestEffort=atmIfVptBestEffort, atmIfVccHoldingPriority=atmIfVccHoldingPriority, atmIfVptVpdTmAbrRowStatusTable=atmIfVptVpdTmAbrRowStatusTable, atmIfVptTmTxQThreshIndex=atmIfVptTmTxQThreshIndex, atmIfVptVccVcdTmTrafficShaping=atmIfVptVccVcdTmTrafficShaping, atmIfCAMinAutoSelectedVpi=atmIfCAMinAutoSelectedVpi, atmIfVptVccVcdTmTxTdpValue=atmIfVptVccVcdTmTxTdpValue, atmIfVccOperTable=atmIfVccOperTable, atmIfVptTmForceTagging=atmIfVptTmForceTagging, atmIfCANrtVbrOperTable=atmIfCANrtVbrOperTable, atmIfVptCAUbrRowStatusEntry=atmIfVptCAUbrRowStatusEntry, atmIfVptVccLoopRowStatusEntry=atmIfVptVccLoopRowStatusEntry, atmIfVptCAPoolRequBwValue=atmIfVptCAPoolRequBwValue, atmIfCARtVbrPool=atmIfCARtVbrPool, atmIfVccTmAbrRateIncreaseFactor=atmIfVccTmAbrRateIncreaseFactor, atmIfVptTmTxQueueCongestionState=atmIfVptTmTxQueueCongestionState, atmIfVptStatsRxFrameDiscard=atmIfVptStatsRxFrameDiscard, atmIfVccStateTable=atmIfVccStateTable, atmIfVccVcdTmTxTdpValue=atmIfVccVcdTmTxTdpValue, atmIfVpcVpdTmRxTdpTable=atmIfVpcVpdTmRxTdpTable, atmIfVptUsageState=atmIfVptUsageState, atmIfVccTmAbrTxFwdRmCells=atmIfVccTmAbrTxFwdRmCells, atmCoreCapabilitiesBE=atmCoreCapabilitiesBE, atmIfVptCACbrProvTable=atmIfVptCACbrProvTable)
