#
# PySNMP MIB module HPN-ICF-SMLK-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/HPN-ICF-SMLK-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 19:29:12 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, ObjectIdentifier, OctetString = mibBuilder.importSymbols("ASN1", "Integer", "ObjectIdentifier", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueRangeConstraint, SingleValueConstraint, ValueSizeConstraint, ConstraintsIntersection, ConstraintsUnion = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueRangeConstraint", "SingleValueConstraint", "ValueSizeConstraint", "ConstraintsIntersection", "ConstraintsUnion")
hpnicfCommon, = mibBuilder.importSymbols("HPN-ICF-OID-MIB", "hpnicfCommon")
InterfaceIndex, = mibBuilder.importSymbols("IF-MIB", "InterfaceIndex")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
Counter32, Bits, Unsigned32, Counter64, iso, ModuleIdentity, ObjectIdentity, MibScalar, MibTable, MibTableRow, MibTableColumn, NotificationType, IpAddress, Gauge32, MibIdentifier, TimeTicks, Integer32 = mibBuilder.importSymbols("SNMPv2-SMI", "Counter32", "Bits", "Unsigned32", "Counter64", "iso", "ModuleIdentity", "ObjectIdentity", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "NotificationType", "IpAddress", "Gauge32", "MibIdentifier", "TimeTicks", "Integer32")
DateAndTime, DisplayString, RowStatus, MacAddress, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DateAndTime", "DisplayString", "RowStatus", "MacAddress", "TextualConvention")
hpnicfSmlk = ModuleIdentity((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 147))
hpnicfSmlk.setRevisions(('2014-07-23 15:03',))
if mibBuilder.loadTexts: hpnicfSmlk.setLastUpdated('201407231503Z')
if mibBuilder.loadTexts: hpnicfSmlk.setOrganization('')
hpnicfSmlkObject = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 147, 1))
hpnicfSmlkGroupTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 147, 1, 1), )
if mibBuilder.loadTexts: hpnicfSmlkGroupTable.setStatus('current')
hpnicfSmlkGroupEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 147, 1, 1, 1), ).setIndexNames((0, "HPN-ICF-SMLK-MIB", "hpnicfSmlkGroupID"))
if mibBuilder.loadTexts: hpnicfSmlkGroupEntry.setStatus('current')
hpnicfSmlkGroupID = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 147, 1, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 256))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: hpnicfSmlkGroupID.setStatus('current')
hpnicfSmlkDeviceID = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 147, 1, 1, 1, 2), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfSmlkDeviceID.setStatus('current')
hpnicfSmlkPreemptionMode = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 147, 1, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("none", 1), ("role", 2), ("speed", 3))).clone(1)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfSmlkPreemptionMode.setStatus('current')
hpnicfSmlkSpeedThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 147, 1, 1, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 10000))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfSmlkSpeedThreshold.setStatus('current')
hpnicfSmlkPreemptionDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 147, 1, 1, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 300)).clone(1)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfSmlkPreemptionDelay.setStatus('current')
hpnicfSmlkControlVlanID = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 147, 1, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(1, 4094), ValueRangeConstraint(65535, 65535), )).clone(1)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfSmlkControlVlanID.setStatus('current')
hpnicfSmlkInstanceListLow = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 147, 1, 1, 1, 7), OctetString().subtype(subtypeSpec=ValueSizeConstraint(256, 256)).setFixedLength(256)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfSmlkInstanceListLow.setStatus('current')
hpnicfSmlkInstanceListHigh = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 147, 1, 1, 1, 8), OctetString().subtype(subtypeSpec=ValueSizeConstraint(256, 256)).setFixedLength(256)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfSmlkInstanceListHigh.setStatus('current')
hpnicfSmlkGroupRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 147, 1, 1, 1, 9), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfSmlkGroupRowStatus.setStatus('current')
hpnicfSmlkPortTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 147, 1, 2), )
if mibBuilder.loadTexts: hpnicfSmlkPortTable.setStatus('current')
hpnicfSmlkPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 147, 1, 2, 1), ).setIndexNames((0, "HPN-ICF-SMLK-MIB", "hpnicfSmlkGroupID"), (0, "HPN-ICF-SMLK-MIB", "hpnicfSmlkPortIfIndex"))
if mibBuilder.loadTexts: hpnicfSmlkPortEntry.setStatus('current')
hpnicfSmlkPortIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 147, 1, 2, 1, 1), InterfaceIndex()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: hpnicfSmlkPortIfIndex.setStatus('current')
hpnicfSmlkPortRole = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 147, 1, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("primary", 1), ("secondary", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfSmlkPortRole.setStatus('current')
hpnicfSmlkPortStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 147, 1, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("down", 1), ("active", 2), ("standby", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfSmlkPortStatus.setStatus('current')
hpnicfSmlkFlushCount = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 147, 1, 2, 1, 4), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfSmlkFlushCount.setStatus('current')
hpnicfSmlkLastFlushTime = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 147, 1, 2, 1, 5), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfSmlkLastFlushTime.setStatus('current')
hpnicfSmlkPortRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 147, 1, 2, 1, 6), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfSmlkPortRowStatus.setStatus('current')
hpnicfSmlkFlushEnableTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 147, 1, 3), )
if mibBuilder.loadTexts: hpnicfSmlkFlushEnableTable.setStatus('current')
hpnicfSmlkFlushEnableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 147, 1, 3, 1), ).setIndexNames((0, "HPN-ICF-SMLK-MIB", "hpnicfSmlkIfIndex"))
if mibBuilder.loadTexts: hpnicfSmlkFlushEnableEntry.setStatus('current')
hpnicfSmlkIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 147, 1, 3, 1, 1), InterfaceIndex())
if mibBuilder.loadTexts: hpnicfSmlkIfIndex.setStatus('current')
hpnicfSmlkControlVlanListLow = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 147, 1, 3, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(256, 256)).setFixedLength(256)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpnicfSmlkControlVlanListLow.setStatus('current')
hpnicfSmlkControlVlanListHigh = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 147, 1, 3, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(256, 256)).setFixedLength(256)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpnicfSmlkControlVlanListHigh.setStatus('current')
hpnicfSmlkTrap = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 147, 2))
hpnicfSmlkTrapPrefix = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 147, 2, 0))
hpnicfSmlkGroupLinkActive = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 147, 2, 0, 1)).setObjects(("HPN-ICF-SMLK-MIB", "hpnicfSmlkGroupID"), ("HPN-ICF-SMLK-MIB", "hpnicfSmlkPortIfIndex"))
if mibBuilder.loadTexts: hpnicfSmlkGroupLinkActive.setStatus('current')
mibBuilder.exportSymbols("HPN-ICF-SMLK-MIB", hpnicfSmlkPortIfIndex=hpnicfSmlkPortIfIndex, hpnicfSmlkGroupRowStatus=hpnicfSmlkGroupRowStatus, hpnicfSmlkFlushCount=hpnicfSmlkFlushCount, hpnicfSmlkControlVlanID=hpnicfSmlkControlVlanID, hpnicfSmlkPortTable=hpnicfSmlkPortTable, hpnicfSmlkPortEntry=hpnicfSmlkPortEntry, hpnicfSmlkPortRole=hpnicfSmlkPortRole, hpnicfSmlkControlVlanListHigh=hpnicfSmlkControlVlanListHigh, hpnicfSmlkDeviceID=hpnicfSmlkDeviceID, hpnicfSmlkIfIndex=hpnicfSmlkIfIndex, hpnicfSmlkGroupEntry=hpnicfSmlkGroupEntry, hpnicfSmlkFlushEnableEntry=hpnicfSmlkFlushEnableEntry, hpnicfSmlkObject=hpnicfSmlkObject, hpnicfSmlkInstanceListHigh=hpnicfSmlkInstanceListHigh, hpnicfSmlkLastFlushTime=hpnicfSmlkLastFlushTime, hpnicfSmlkSpeedThreshold=hpnicfSmlkSpeedThreshold, hpnicfSmlkControlVlanListLow=hpnicfSmlkControlVlanListLow, hpnicfSmlkPortRowStatus=hpnicfSmlkPortRowStatus, hpnicfSmlkGroupTable=hpnicfSmlkGroupTable, hpnicfSmlkGroupID=hpnicfSmlkGroupID, hpnicfSmlk=hpnicfSmlk, hpnicfSmlkPreemptionMode=hpnicfSmlkPreemptionMode, hpnicfSmlkTrap=hpnicfSmlkTrap, hpnicfSmlkGroupLinkActive=hpnicfSmlkGroupLinkActive, hpnicfSmlkFlushEnableTable=hpnicfSmlkFlushEnableTable, hpnicfSmlkInstanceListLow=hpnicfSmlkInstanceListLow, PYSNMP_MODULE_ID=hpnicfSmlk, hpnicfSmlkPortStatus=hpnicfSmlkPortStatus, hpnicfSmlkTrapPrefix=hpnicfSmlkTrapPrefix, hpnicfSmlkPreemptionDelay=hpnicfSmlkPreemptionDelay)
