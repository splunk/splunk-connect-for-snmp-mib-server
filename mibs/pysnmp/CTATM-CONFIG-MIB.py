#
# PySNMP MIB module CTATM-CONFIG-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/CTATM-CONFIG-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 17:26:48 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, OctetString, Integer = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "OctetString", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueRangeConstraint, SingleValueConstraint, ConstraintsIntersection, ValueSizeConstraint, ConstraintsUnion = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueRangeConstraint", "SingleValueConstraint", "ConstraintsIntersection", "ValueSizeConstraint", "ConstraintsUnion")
atmTrafficDescrParamIndex, atmVclVpi, atmVclVci = mibBuilder.importSymbols("ATM-MIB", "atmTrafficDescrParamIndex", "atmVclVpi", "atmVclVci")
AtmTrafficDescrParamIndex, = mibBuilder.importSymbols("ATM-TC-MIB", "AtmTrafficDescrParamIndex")
ctATMConfig, = mibBuilder.importSymbols("CTRON-MIB-NAMES", "ctATMConfig")
ifIndex, = mibBuilder.importSymbols("IF-MIB", "ifIndex")
lecIndex, leArpMacAddress = mibBuilder.importSymbols("LAN-EMULATION-CLIENT-MIB", "lecIndex", "leArpMacAddress")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
Unsigned32, iso, IpAddress, MibScalar, MibTable, MibTableRow, MibTableColumn, NotificationType, Bits, TimeTicks, MibIdentifier, ObjectIdentity, ModuleIdentity, Integer32, Gauge32, Counter32, Counter64 = mibBuilder.importSymbols("SNMPv2-SMI", "Unsigned32", "iso", "IpAddress", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "NotificationType", "Bits", "TimeTicks", "MibIdentifier", "ObjectIdentity", "ModuleIdentity", "Integer32", "Gauge32", "Counter32", "Counter64")
DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention")
class AtmAddress(OctetString):
    subtypeSpec = OctetString.subtypeSpec + ValueSizeConstraint(20, 20)
    fixedLength = 20

ctATMBaseConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 10, 1, 1))
ctATMPhysicalRedundancy = MibIdentifier((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 10, 1, 2))
ctATMPhysicalRedundancyInterface = MibIdentifier((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 10, 1, 2, 1))
ctATMIlmi = MibIdentifier((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 10, 1, 3))
ctATMSignalConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 10, 1, 4))
ctATMLANEServices = MibIdentifier((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 10, 1, 5))
ctATMLANEInfoExtGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 10, 1, 6))
ctATMTrafficManagementGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 10, 1, 7))
ctATMPvcIfDef = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 10, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 512))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ctATMPvcIfDef.setStatus('deprecated')
ctATMLecIfDef = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 10, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 512))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ctATMLecIfDef.setStatus('obsolete')
ctATMDefApplicationTable = MibTable((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 10, 1, 1, 3), )
if mibBuilder.loadTexts: ctATMDefApplicationTable.setStatus('obsolete')
ctATMDefApplicationEntry = MibTableRow((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 10, 1, 1, 3, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: ctATMDefApplicationEntry.setStatus('obsolete')
ctATMDefApplicationIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 10, 1, 1, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 512))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctATMDefApplicationIfIndex.setStatus('obsolete')
ctATMDefApplication = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 10, 1, 1, 3, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("lane04", 1), ("lane", 2))).clone('lane')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ctATMDefApplication.setStatus('obsolete')
ctATMFramerStatusTable = MibTable((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 10, 1, 1, 4), )
if mibBuilder.loadTexts: ctATMFramerStatusTable.setStatus('obsolete')
ctATMFramerStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 10, 1, 1, 4, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: ctATMFramerStatusEntry.setStatus('obsolete')
ctATMFramerStatusIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 10, 1, 1, 4, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 512))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctATMFramerStatusIfIndex.setStatus('obsolete')
ctATMFramerStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 10, 1, 1, 4, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("on", 1), ("off", 2))).clone('off')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ctATMFramerStatus.setStatus('obsolete')
ctATMLecArpMacTable = MibTable((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 10, 1, 1, 5), )
if mibBuilder.loadTexts: ctATMLecArpMacTable.setStatus('current')
ctATMLecArpMacEntry = MibTableRow((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 10, 1, 1, 5, 1), ).setIndexNames((0, "LAN-EMULATION-CLIENT-MIB", "lecIndex"), (0, "LAN-EMULATION-CLIENT-MIB", "leArpMacAddress"))
if mibBuilder.loadTexts: ctATMLecArpMacEntry.setStatus('current')
ctATMLecArpMacLecIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 10, 1, 1, 5, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctATMLecArpMacLecIndex.setStatus('obsolete')
ctATMLecArpMacAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 10, 1, 1, 5, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(6, 6)).setFixedLength(6)).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctATMLecArpMacAddress.setStatus('obsolete')
ctATMLecArpMacElanName = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 10, 1, 1, 5, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctATMLecArpMacElanName.setStatus('current')
ctATMLecArpMacVpi = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 10, 1, 1, 5, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4095))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctATMLecArpMacVpi.setStatus('current')
ctATMLecArpMacVci = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 10, 1, 1, 5, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctATMLecArpMacVci.setStatus('current')
ctATMLecArpMacATMAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 10, 1, 1, 5, 1, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(32, 32)).setFixedLength(32)).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctATMLecArpMacATMAddress.setStatus('current')
ctATMPvcBwAllocTable = MibTable((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 10, 1, 1, 6), )
if mibBuilder.loadTexts: ctATMPvcBwAllocTable.setStatus('current')
ctATMPvcBwAllocEntry = MibTableRow((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 10, 1, 1, 6, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: ctATMPvcBwAllocEntry.setStatus('current')
ctATMPvcBwAllocPhysIface = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 10, 1, 1, 6, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 512))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctATMPvcBwAllocPhysIface.setStatus('obsolete')
ctATMPvcBwAllocStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 10, 1, 1, 6, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("on", 1), ("off", 2), ("notSupported", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ctATMPvcBwAllocStatus.setStatus('current')
ctATMPvcBwAllocBandwidth = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 10, 1, 1, 6, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctATMPvcBwAllocBandwidth.setStatus('obsolete')
ctATMDiscoveryElanTable = MibTable((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 10, 1, 1, 7), )
if mibBuilder.loadTexts: ctATMDiscoveryElanTable.setStatus('current')
ctATMDiscoveryElanEntry = MibTableRow((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 10, 1, 1, 7, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "CTATM-CONFIG-MIB", "ctATMDiscoveryElanIndex"))
if mibBuilder.loadTexts: ctATMDiscoveryElanEntry.setStatus('current')
ctATMDiscoveryElanIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 10, 1, 1, 7, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctATMDiscoveryElanIndex.setStatus('current')
ctATMDiscoveryElanName = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 10, 1, 1, 7, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(32, 32)).setFixedLength(32)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ctATMDiscoveryElanName.setStatus('current')
ctATMDiscoveryElanMode = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 10, 1, 1, 7, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("ctATMDiscoveryElanMaster", 1), ("ctATMDiscoveryElanSlave", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ctATMDiscoveryElanMode.setStatus('current')
ctATMDiscoveryElanStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 10, 1, 1, 7, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("ctATMDiscoveryElanEnabled", 1), ("ctATmDiscoveryElanDisabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ctATMDiscoveryElanStatus.setStatus('current')
ctATMDiscoveryElanPhysIface = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 10, 1, 1, 7, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 512))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctATMDiscoveryElanPhysIface.setStatus('obsolete')
ctATMVclTable = MibTable((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 10, 1, 1, 8), )
if mibBuilder.loadTexts: ctATMVclTable.setStatus('current')
ctATMVclEntry = MibTableRow((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 10, 1, 1, 8, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "ATM-MIB", "atmVclVpi"), (0, "ATM-MIB", "atmVclVci"))
if mibBuilder.loadTexts: ctATMVclEntry.setStatus('current')
ctATMVclIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 10, 1, 1, 8, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 512))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctATMVclIfIndex.setStatus('obsolete')
ctATMVclVpi = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 10, 1, 1, 8, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4095))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctATMVclVpi.setStatus('obsolete')
ctATMVclVci = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 10, 1, 1, 8, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctATMVclVci.setStatus('obsolete')
ctATMVclVirtualIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 10, 1, 1, 8, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 512))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctATMVclVirtualIfIndex.setStatus('current')
ctATMVclApplicationPort = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 10, 1, 1, 8, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 512))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctATMVclApplicationPort.setStatus('current')
ctATMVclATMAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 10, 1, 1, 8, 1, 6), AtmAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctATMVclATMAddress.setStatus('current')
ctATMVclEncapsulationType = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 10, 1, 1, 8, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17))).clone(namedValues=NamedValues(("vcMultiplexRoutedProtocol", 1), ("vcMultiplexBridgedProtocol8023", 2), ("vcMultiplexBridgedProtocol8025", 3), ("vcMultiplexBridgedProtocol8026", 4), ("vcMultiplexLANemulation8023", 5), ("vcMultiplexLANemulation8025", 6), ("llcEncapsulation", 7), ("multiprotocolFrameRelaySscs", 8), ("other", 9), ("unknown", 10), ("ilmi", 11), ("uni", 12), ("lanEmulationData", 13), ("lanEmulationControl", 14), ("atmVcSvcApp", 15), ("multiProtocolOverATMData", 16), ("multiProtocolOverATMControl", 17)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctATMVclEncapsulationType.setStatus('current')
ctATMPhyRedundTable = MibTable((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 10, 1, 2, 1, 1), )
if mibBuilder.loadTexts: ctATMPhyRedundTable.setStatus('current')
ctATMPhyRedundEntry = MibTableRow((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 10, 1, 2, 1, 1, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: ctATMPhyRedundEntry.setStatus('current')
ctATMPhyRedundIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 10, 1, 2, 1, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 512))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctATMPhyRedundIfIndex.setStatus('obsolete')
ctATMPhyRedundPrimaryPort = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 10, 1, 2, 1, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 16)).clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ctATMPhyRedundPrimaryPort.setStatus('current')
ctATMPhyRedundActivePort = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 10, 1, 2, 1, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 16)).clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ctATMPhyRedundActivePort.setStatus('current')
ctATMPhyRedundStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 10, 1, 2, 1, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ctATMPhyRedundStatus.setStatus('current')
ctATMPhyRedundActivation = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 10, 1, 2, 1, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("automatic", 1), ("manual", 2))).clone('automatic')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ctATMPhyRedundActivation.setStatus('current')
ctATMPhyRedundPrimaryRevert = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 10, 1, 2, 1, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("automatic", 1), ("manual", 2))).clone('automatic')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ctATMPhyRedundPrimaryRevert.setStatus('current')
ctATMPhyRedundPerformTest = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 10, 1, 2, 1, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2), ("immediate", 3))).clone('enable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ctATMPhyRedundPerformTest.setStatus('current')
ctATMPhyRedundTestTOD = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 10, 1, 2, 1, 1, 1, 8), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(9, 9)).setFixedLength(9)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ctATMPhyRedundTestTOD.setStatus('current')
ctATMPhyRedundTestResult = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 10, 1, 2, 1, 1, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(100, 101, 102, 103, 200, 201, 202, 203))).clone(namedValues=NamedValues(("manualAllPortsGood", 100), ("manualPrimaryBadOthersGood", 101), ("manualPrimaryGoodOthersBad", 102), ("manualPrimaryBadOthersBad", 103), ("automaticAllPortsGood", 200), ("automaticPrimaryBadOthersGood", 201), ("automaticPrimaryGoodOthersBad", 202), ("automaticPrimaryBadOthersBad", 203)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctATMPhyRedundTestResult.setStatus('current')
ctATMPhyRedundReset = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 10, 1, 2, 1, 1, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("reset", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ctATMPhyRedundReset.setStatus('current')
ctATMIlmiTable = MibTable((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 10, 1, 3, 1), )
if mibBuilder.loadTexts: ctATMIlmiTable.setStatus('current')
ctATMIlmiEntry = MibTableRow((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 10, 1, 3, 1, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: ctATMIlmiEntry.setStatus('current')
ctATMIlmiIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 10, 1, 3, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 512))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctATMIlmiIfIndex.setStatus('obsolete')
ctATMIlmiStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 10, 1, 3, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("enableAutoConfigure", 1), ("enable", 2), ("disable", 3))).clone('enableAutoConfigure')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ctATMIlmiStatus.setStatus('current')
ctATMIlmiAtmAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 10, 1, 3, 1, 1, 3), AtmAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ctATMIlmiAtmAddress.setStatus('current')
ctATMIlmiState = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 10, 1, 3, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("unknown", 1), ("up", 2), ("addressRegistration", 3), ("autoconfigure", 4), ("down", 5), ("estabConnectivity", 6), ("noLink", 7), ("obtainLECS", 8)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctATMIlmiState.setStatus('current')
ctATMIlmiRestart = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 10, 1, 3, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("restart", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ctATMIlmiRestart.setStatus('current')
ctATMSignalTable = MibTable((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 10, 1, 4, 1), )
if mibBuilder.loadTexts: ctATMSignalTable.setStatus('current')
ctATMSignalEntry = MibTableRow((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 10, 1, 4, 1, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: ctATMSignalEntry.setStatus('current')
ctATMSignalIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 10, 1, 4, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 512))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctATMSignalIfIndex.setStatus('obsolete')
ctATMSignalStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 10, 1, 4, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('enable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ctATMSignalStatus.setStatus('current')
ctATMSignalType = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 10, 1, 4, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("unknown", 1), ("spans", 2), ("uni30", 3), ("uni31", 4), ("uni40", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ctATMSignalType.setStatus('current')
ctATMSignalQ93Status = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 10, 1, 4, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("up", 1), ("down", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctATMSignalQ93Status.setStatus('current')
ctATMSignalQsaalStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 10, 1, 4, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("up", 1), ("down", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctATMSignalQsaalStatus.setStatus('current')
ctATMSignalRestart = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 10, 1, 4, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("restart", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ctATMSignalRestart.setStatus('current')
ctATMLANEInfoExtStatusTable = MibTable((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 10, 1, 6, 1), )
if mibBuilder.loadTexts: ctATMLANEInfoExtStatusTable.setStatus('current')
ctATMLANEInfoExtStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 10, 1, 6, 1, 1), ).setIndexNames((0, "LAN-EMULATION-CLIENT-MIB", "lecIndex"))
if mibBuilder.loadTexts: ctATMLANEInfoExtStatusEntry.setStatus('current')
ctATMLANEInfoExtStatusUpTime = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 10, 1, 6, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctATMLANEInfoExtStatusUpTime.setStatus('current')
ctATMLANEInfoExtStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 10, 1, 6, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("lecactive", 1), ("lecnotInService", 2), ("lecnoLink", 3), ("lecnoATMaddrnoUNI", 4), ("lecnoATMaddr", 5), ("lecnoUNI", 6), ("lecmemError", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctATMLANEInfoExtStatus.setStatus('current')
ctATMLANEInfoExtStatusSendTopo = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 10, 1, 6, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("on", 1), ("off", 2))).clone('on')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ctATMLANEInfoExtStatusSendTopo.setStatus('current')
ctATMLANEInfoExtStatusTimeLeft = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 10, 1, 6, 1, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(32, 32)).setFixedLength(32)).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctATMLANEInfoExtStatusTimeLeft.setStatus('current')
ctATMLANEInfoExtStatusNumQueues = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 10, 1, 6, 1, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 32)).clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ctATMLANEInfoExtStatusNumQueues.setStatus('current')
ctATMLANEInfoExtStatusMaxNumQueues = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 10, 1, 6, 1, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctATMLANEInfoExtStatusMaxNumQueues.setStatus('current')
ctATMLANEInfoExtTMTable = MibTable((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 10, 1, 6, 2), )
if mibBuilder.loadTexts: ctATMLANEInfoExtTMTable.setStatus('current')
ctATMLANEInfoExtTMEntry = MibTableRow((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 10, 1, 6, 2, 1), ).setIndexNames((0, "LAN-EMULATION-CLIENT-MIB", "lecIndex"), (0, "CTATM-CONFIG-MIB", "ctATMLANEInfoExtTMIndex"))
if mibBuilder.loadTexts: ctATMLANEInfoExtTMEntry.setStatus('current')
ctATMLANEInfoExtTMIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 10, 1, 6, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctATMLANEInfoExtTMIndex.setStatus('current')
ctATMLANEInfoExtTMTrafficDescrIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 10, 1, 6, 2, 1, 2), AtmTrafficDescrParamIndex()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ctATMLANEInfoExtTMTrafficDescrIndex.setStatus('current')
ctATMTrafficDescrNameTable = MibTable((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 10, 1, 7, 1), )
if mibBuilder.loadTexts: ctATMTrafficDescrNameTable.setStatus('current')
ctATMTrafficDescrNameEntry = MibTableRow((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 10, 1, 7, 1, 1), ).setIndexNames((0, "ATM-MIB", "atmTrafficDescrParamIndex"))
if mibBuilder.loadTexts: ctATMTrafficDescrNameEntry.setStatus('current')
ctATMTrafficDescrName = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 10, 1, 7, 1, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(32, 32)).setFixedLength(32)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ctATMTrafficDescrName.setStatus('current')
ctATMTrafficServiceCategoriesSupportedTable = MibTable((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 10, 1, 7, 2), )
if mibBuilder.loadTexts: ctATMTrafficServiceCategoriesSupportedTable.setStatus('current')
ctATMTrafficServiceCategoriesSupportedEntry = MibTableRow((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 10, 1, 7, 2, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: ctATMTrafficServiceCategoriesSupportedEntry.setStatus('current')
ctATMTrafficServiceCategoriesSupportedBitMask = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 10, 1, 7, 2, 1, 1), Bits().clone(namedValues=NamedValues(("other", 0), ("pvcBandwidthAllocation", 1), ("cbr", 2), ("vbrnrt", 3), ("ubr", 4), ("abr", 5), ("vbrrt", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctATMTrafficServiceCategoriesSupportedBitMask.setStatus('current')
ctATMTrafficManagementAllocBandwidth = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 10, 1, 7, 2, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctATMTrafficManagementAllocBandwidth.setStatus('current')
mibBuilder.exportSymbols("CTATM-CONFIG-MIB", ctATMPvcBwAllocEntry=ctATMPvcBwAllocEntry, ctATMPhyRedundActivation=ctATMPhyRedundActivation, ctATMDiscoveryElanStatus=ctATMDiscoveryElanStatus, ctATMVclEntry=ctATMVclEntry, ctATMIlmiRestart=ctATMIlmiRestart, ctATMVclEncapsulationType=ctATMVclEncapsulationType, ctATMTrafficDescrNameEntry=ctATMTrafficDescrNameEntry, ctATMIlmiIfIndex=ctATMIlmiIfIndex, ctATMLANEInfoExtStatusUpTime=ctATMLANEInfoExtStatusUpTime, ctATMLANEInfoExtStatusTimeLeft=ctATMLANEInfoExtStatusTimeLeft, ctATMDefApplicationTable=ctATMDefApplicationTable, ctATMIlmiAtmAddress=ctATMIlmiAtmAddress, ctATMSignalRestart=ctATMSignalRestart, ctATMLANEInfoExtStatusMaxNumQueues=ctATMLANEInfoExtStatusMaxNumQueues, ctATMPhyRedundReset=ctATMPhyRedundReset, ctATMLecArpMacAddress=ctATMLecArpMacAddress, AtmAddress=AtmAddress, ctATMSignalConfig=ctATMSignalConfig, ctATMLecArpMacEntry=ctATMLecArpMacEntry, ctATMLANEInfoExtStatus=ctATMLANEInfoExtStatus, ctATMFramerStatus=ctATMFramerStatus, ctATMDiscoveryElanTable=ctATMDiscoveryElanTable, ctATMVclVci=ctATMVclVci, ctATMSignalEntry=ctATMSignalEntry, ctATMPhyRedundIfIndex=ctATMPhyRedundIfIndex, ctATMFramerStatusTable=ctATMFramerStatusTable, ctATMDiscoveryElanMode=ctATMDiscoveryElanMode, ctATMVclIfIndex=ctATMVclIfIndex, ctATMTrafficServiceCategoriesSupportedTable=ctATMTrafficServiceCategoriesSupportedTable, ctATMTrafficManagementGroup=ctATMTrafficManagementGroup, ctATMPhyRedundPerformTest=ctATMPhyRedundPerformTest, ctATMDefApplicationEntry=ctATMDefApplicationEntry, ctATMLANEInfoExtGroup=ctATMLANEInfoExtGroup, ctATMPvcBwAllocTable=ctATMPvcBwAllocTable, ctATMVclVirtualIfIndex=ctATMVclVirtualIfIndex, ctATMLANEInfoExtTMTrafficDescrIndex=ctATMLANEInfoExtTMTrafficDescrIndex, ctATMSignalType=ctATMSignalType, ctATMIlmiState=ctATMIlmiState, ctATMLANEInfoExtStatusTable=ctATMLANEInfoExtStatusTable, ctATMSignalQsaalStatus=ctATMSignalQsaalStatus, ctATMPvcBwAllocPhysIface=ctATMPvcBwAllocPhysIface, ctATMLANEInfoExtStatusNumQueues=ctATMLANEInfoExtStatusNumQueues, ctATMSignalStatus=ctATMSignalStatus, ctATMPhyRedundActivePort=ctATMPhyRedundActivePort, ctATMLecArpMacElanName=ctATMLecArpMacElanName, ctATMLecIfDef=ctATMLecIfDef, ctATMPvcBwAllocBandwidth=ctATMPvcBwAllocBandwidth, ctATMFramerStatusEntry=ctATMFramerStatusEntry, ctATMSignalIfIndex=ctATMSignalIfIndex, ctATMTrafficManagementAllocBandwidth=ctATMTrafficManagementAllocBandwidth, ctATMIlmiTable=ctATMIlmiTable, ctATMVclTable=ctATMVclTable, ctATMSignalQ93Status=ctATMSignalQ93Status, ctATMTrafficDescrName=ctATMTrafficDescrName, ctATMBaseConfig=ctATMBaseConfig, ctATMPhysicalRedundancy=ctATMPhysicalRedundancy, ctATMSignalTable=ctATMSignalTable, ctATMTrafficDescrNameTable=ctATMTrafficDescrNameTable, ctATMDiscoveryElanEntry=ctATMDiscoveryElanEntry, ctATMPhyRedundEntry=ctATMPhyRedundEntry, ctATMDefApplicationIfIndex=ctATMDefApplicationIfIndex, ctATMPvcBwAllocStatus=ctATMPvcBwAllocStatus, ctATMDiscoveryElanPhysIface=ctATMDiscoveryElanPhysIface, ctATMIlmi=ctATMIlmi, ctATMPvcIfDef=ctATMPvcIfDef, ctATMPhyRedundTable=ctATMPhyRedundTable, ctATMTrafficServiceCategoriesSupportedEntry=ctATMTrafficServiceCategoriesSupportedEntry, ctATMPhyRedundTestResult=ctATMPhyRedundTestResult, ctATMLecArpMacVci=ctATMLecArpMacVci, ctATMLANEInfoExtStatusEntry=ctATMLANEInfoExtStatusEntry, ctATMLANEServices=ctATMLANEServices, ctATMVclATMAddress=ctATMVclATMAddress, ctATMDefApplication=ctATMDefApplication, ctATMLecArpMacTable=ctATMLecArpMacTable, ctATMTrafficServiceCategoriesSupportedBitMask=ctATMTrafficServiceCategoriesSupportedBitMask, ctATMPhysicalRedundancyInterface=ctATMPhysicalRedundancyInterface, ctATMPhyRedundPrimaryPort=ctATMPhyRedundPrimaryPort, ctATMLANEInfoExtTMTable=ctATMLANEInfoExtTMTable, ctATMVclVpi=ctATMVclVpi, ctATMLANEInfoExtTMIndex=ctATMLANEInfoExtTMIndex, ctATMDiscoveryElanName=ctATMDiscoveryElanName, ctATMFramerStatusIfIndex=ctATMFramerStatusIfIndex, ctATMIlmiStatus=ctATMIlmiStatus, ctATMPhyRedundStatus=ctATMPhyRedundStatus, ctATMPhyRedundTestTOD=ctATMPhyRedundTestTOD, ctATMLecArpMacLecIndex=ctATMLecArpMacLecIndex, ctATMPhyRedundPrimaryRevert=ctATMPhyRedundPrimaryRevert, ctATMDiscoveryElanIndex=ctATMDiscoveryElanIndex, ctATMLANEInfoExtStatusSendTopo=ctATMLANEInfoExtStatusSendTopo, ctATMVclApplicationPort=ctATMVclApplicationPort, ctATMLANEInfoExtTMEntry=ctATMLANEInfoExtTMEntry, ctATMIlmiEntry=ctATMIlmiEntry, ctATMLecArpMacVpi=ctATMLecArpMacVpi, ctATMLecArpMacATMAddress=ctATMLecArpMacATMAddress)
